int64_t CFDictionaryGetInt64Ranged(const __CFDictionary *a1, const void *a2, int64_t a3, int64_t a4, int *a5)
{
  const __CFString *Value;

  if (a1)
  {
    Value = (const __CFString *)CFDictionaryGetValue(a1, a2);
    if (Value)
      return CFGetInt64Ranged(Value, a3, a4, a5);
  }
  if (a5)
    *a5 = -6727;
  return 0;
}

uint64_t DataBuffer_AppendF(uint64_t (*a1)(unsigned __int8 *, int64_t, _QWORD), unsigned __int8 *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  int v9;

  v9 = VCPrintF((uint64_t (*)(unsigned __int8 *, int64_t, _QWORD))__DataBuffer_PrintFCallBack, a1, a2, (uint64_t)&a9, a5, a6, a7, a8);
  return v9 & (v9 >> 31);
}

uint64_t DataBuffer_Init(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4)
{
  *(_QWORD *)result = a2;
  *(_QWORD *)(result + 8) = a3;
  *(_QWORD *)(result + 16) = a4;
  *(_QWORD *)(result + 24) = a2;
  *(_QWORD *)(result + 32) = 0;
  *(_QWORD *)(result + 40) = a3;
  *(_BYTE *)(result + 48) = 0;
  *(_DWORD *)(result + 52) = 0;
  return result;
}

const __CFDictionary *CFDictionaryGetTypedValue(const __CFDictionary *result, const void *a2, uint64_t a3, int *a4)
{
  const __CFDictionary *v6;
  CFTypeID v7;
  BOOL v8;
  int v9;

  if (result)
  {
    result = (const __CFDictionary *)CFDictionaryGetValue(result, a2);
    if (result)
    {
      v6 = result;
      v7 = CFGetTypeID(result);
      v8 = v7 == a3;
      if (v7 == a3)
        result = v6;
      else
        result = 0;
      if (v8)
        v9 = 0;
      else
        v9 = -6756;
    }
    else
    {
      v9 = -6727;
    }
  }
  else
  {
    v9 = -6705;
  }
  if (a4)
    *a4 = v9;
  return result;
}

uint64_t CUXPCDecodeUInt64RangedEx(void *a1, const char *a2, uint64_t a3, uint64_t a4, uint64_t *a5, _QWORD *a6)
{
  uint64_t v11;
  void *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t value;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;

  xpc_dictionary_get_value(a1, a2);
  v11 = objc_claimAutoreleasedReturnValue();
  v12 = (void *)v11;
  if (!v11)
  {
    v19 = 2;
    goto LABEL_14;
  }
  v13 = MEMORY[0x18D78F504](v11);
  if (v13 == MEMORY[0x1E0C81398])
  {
    value = xpc_uint64_get_value(v12);
    goto LABEL_11;
  }
  if (v13 == MEMORY[0x1E0C81328])
  {
    value = xpc_int64_get_value(v12);
LABEL_11:
    if (value >= a3 && value <= a4)
    {
      *a5 = value;
      v19 = 6;
      goto LABEL_14;
    }
    if (!a6)
      goto LABEL_7;
    NSErrorF_safe((void *)*MEMORY[0x1E0CB2F90], 4294960586, (uint64_t)"XPC out-of-range: '%s', %llu vs min %llu, max %llu", v21, v22, v23, v24, v25, (uint64_t)a2);
    goto LABEL_6;
  }
  if (a6)
  {
    NSErrorF_safe((void *)*MEMORY[0x1E0CB2F90], 4294960540, (uint64_t)"XPC non-uint64 type: '%s'", v14, v15, v16, v17, v18, (uint64_t)a2);
LABEL_6:
    *a6 = (id)objc_claimAutoreleasedReturnValue();
  }
LABEL_7:
  v19 = 5;
LABEL_14:

  return v19;
}

void NSAppendPrintF(CFMutableStringRef *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  NSAppendPrintV(a1, a2, (uint64_t)&a9);
}

void NSAppendPrintF_safe(CFMutableStringRef *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  NSAppendPrintV(a1, a2, (uint64_t)&a9);
}

void NSAppendPrintV(CFMutableStringRef *a1, uint64_t a2, uint64_t a3)
{
  char *v6;
  char *cStr;

  if (!*a1)
  {
    objc_msgSend(MEMORY[0x1E0CB37A0], "string");
    *a1 = (CFMutableStringRef)(id)objc_claimAutoreleasedReturnValue();
  }
  cStr = 0;
  VASPrintF((void **)&cStr, a2, a3);
  v6 = cStr;
  if (cStr)
  {
    CFStringAppendCString(*a1, cStr, 0x8000100u);
    free(v6);
  }
}

uint64_t PrintFWriteFlags(uint64_t a1, char a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  unint64_t v20;
  const char *i;
  size_t v22;
  uint64_t v23;
  int v24;
  int v25;
  uint64_t v27;
  uint64_t v28;

  v8 = a4;
  if (a2)
  {
    v11 = PrintFCore(a1, (uint64_t)"0x%llX ", a3, a4, a5, a6, a7, a8, a4);
    if ((v11 & 0x80000000) != 0)
      return v11;
  }
  else
  {
    LODWORD(v11) = 0;
  }
  v12 = PrintFCore(a1, (uint64_t)"<", a3, a4, a5, a6, a7, a8, v27);
  if ((v12 & 0x80000000) != 0)
    return v12;
  v19 = v12 + v11;
  if (v8)
  {
    v20 = 0;
    do
    {
      if (((1 << v20) & v8) != 0)
      {
        v8 &= ~(1 << v20);
        for (i = (const char *)a3; ; i += v22 + 2)
        {
          v22 = strlen(i + 1);
          if (!v22)
            break;
          if (v20 == *(unsigned __int8 *)i)
          {
            v23 = PrintFCore(a1, (uint64_t)" %s", v13, v14, v15, v16, v17, v18, (uint64_t)(i + 1));
            v11 = v23;
            if ((v23 & 0x80000000) != 0)
              return v11;
            v19 += v23;
            break;
          }
        }
      }
      if (v20 > 0x3E)
        break;
      ++v20;
    }
    while (v8);
  }
  v24 = PrintFCore(a1, (uint64_t)" >", v13, v14, v15, v16, v17, v18, v28);
  if (v24 >= 0)
    v25 = v19;
  else
    v25 = 0;
  return (v25 + v24);
}

uint64_t PrintFCore(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  return PrintFCoreVAList(a1, a2, &a9);
}

uint64_t VCPrintF(uint64_t (*a1)(unsigned __int8 *, int64_t, _QWORD), uint64_t (*a2)(unsigned __int8 *, int64_t, _QWORD), unsigned __int8 *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  int v9;
  uint64_t (*v11[6])(unsigned __int8 *, int64_t, _QWORD);

  v11[0] = (uint64_t (*)(unsigned __int8 *, int64_t, _QWORD))PrintFCallBackUserCallBack;
  memset(&v11[1], 0, 24);
  v11[4] = a1;
  v11[5] = a2;
  v8 = PrintFCoreVAList(v11, a3, a4, a4, a5, a6, a7, a8);
  if ((v8 & 0x80000000) == 0)
  {
    v9 = v11[0]("", 0, v11);
    if (v9 >= 0)
      return v8;
    else
      return v9;
  }
  return v8;
}

uint64_t VASPrintF(void **a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t (*v7)(const void *, size_t, uint64_t);
  void *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v7 = PrintFCallBackAllocatedString;
  v8 = 0;
  v11 = 0;
  v12 = 0;
  v9 = 0;
  v10 = 0;
  v4 = PrintFCoreVAList(&v7, a2, a3);
  if ((v4 & 0x80000000) == 0)
  {
    v5 = v7("", 1, (uint64_t)&v7);
    if ((v5 & 0x80000000) == 0)
    {
      *a1 = v8;
      return v4;
    }
    v4 = v5;
  }
  if (v8)
    free(v8);
  return v4;
}

uint64_t PrintFCoreVAList(uint64_t (**a1)(unsigned __int8 *, int64_t, _QWORD), unsigned __int8 *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned __int8 *v8;
  char *v9;
  int v10;
  uint64_t v11;
  unsigned __int8 *v12;
  unsigned __int8 *v13;
  int v14;
  int v15;
  uint64_t v16;
  int v17;
  int v18;
  char v19;
  char v20;
  unsigned int v21;
  int v22;
  _DWORD *v23;
  uint64_t v24;
  int v25;
  unsigned int *v26;
  unsigned __int8 *v27;
  unsigned int *v28;
  size_t v29;
  int v30;
  unsigned __int8 v31;
  char v32;
  unint64_t v33;
  int v34;
  char v35;
  int v36;
  unsigned int v37;
  const char *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  char *v42;
  uint64_t v43;
  _QWORD *v44;
  double v45;
  uint64_t v46;
  unint64_t *v47;
  unint64_t v48;
  uint64_t (**v49)(const char *, uint64_t, _QWORD);
  char *v50;
  uint64_t v51;
  int v52;
  __CFString **v53;
  __CFString *v54;
  __CFString *v55;
  __int16 v56;
  unsigned int *v57;
  unsigned int v58;
  unsigned int v59;
  uint64_t v60;
  char *v61;
  unint64_t v62;
  unint64_t v63;
  uint64_t v64;
  tm *v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  int v71;
  unsigned __int8 **v72;
  unsigned __int8 *v73;
  char v74;
  _BOOL4 v75;
  BOOL v76;
  int8x16_t **v77;
  int8x16_t *p_s;
  int v79;
  uint64_t v80;
  uint64_t v81;
  char *v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t *v87;
  uint64_t v88;
  _QWORD *v89;
  char **v90;
  char *v91;
  unsigned __int8 *v92;
  char *v93;
  char v94;
  int *v95;
  int v96;
  char v97;
  char v98;
  _DWORD *v99;
  uint64_t v100;
  BOOL v101;
  const char *v102;
  const char *v103;
  _BYTE **v104;
  _BYTE *v105;
  char v106;
  unint64_t *v107;
  unint64_t v108;
  const char **v109;
  unsigned int *v110;
  unsigned int v111;
  int v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  unint64_t v123;
  unint64_t *v124;
  unint64_t v125;
  unsigned int *v126;
  unint64_t v127;
  unint64_t v128;
  unsigned __int8 *v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t *v133;
  int *v134;
  unsigned int v135;
  unsigned int v136;
  uint64_t v137;
  _DWORD *v138;
  uint64_t v139;
  char *v140;
  int v141;
  int v142;
  unsigned int v143;
  char *i;
  unint64_t v145;
  uint64_t v146;
  int v147;
  uint64_t v148;
  uint64_t v149;
  const char *v150;
  int v151;
  const char *v152;
  uint64_t v153;
  int v154;
  int v155;
  uint64_t v156;
  uint64_t (**v157)(unsigned __int8 *, int64_t, _QWORD);
  size_t v158;
  unint64_t v159;
  uint64_t v160;
  tm *v161;
  const char *v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  unsigned __int8 **v169;
  unsigned __int8 *v170;
  unsigned int v171;
  unsigned int v172;
  const char *v173;
  unsigned int v174;
  _BYTE *v175;
  char v176;
  char v177;
  char v178;
  int v179;
  char v180;
  int v181;
  char v182;
  BOOL v183;
  size_t v184;
  double *v185;
  long double v186;
  uint64_t v187;
  double v188;
  uint64_t v189;
  uint64_t v190;
  uint64_t v191;
  uint64_t v192;
  uint64_t v193;
  const __CFData *Data;
  const __CFData *v195;
  unsigned __int8 *BytePtr;
  CFIndex Length;
  int v198;
  CFTypeID v199;
  uint64_t v200;
  unsigned int v201;
  __int128 v202;
  unsigned int v203;
  uint64_t v204;
  const char *v205;
  unint64_t *v206;
  unint64_t v207;
  uint64_t v208;
  int v210;
  uint64_t v211;
  char *v212;
  unsigned int v213;
  int v214;
  char *v215;
  _BYTE *v216;
  unsigned int v217;
  uint64_t v218;
  char *p_str;
  unsigned int v220;
  unsigned int v221;
  uint64_t v222;
  uint64_t v223;
  uint64_t v224;
  uint64_t v225;
  uint64_t v226;
  int v227;
  CFIndex v228;
  CFIndex MaximumSizeForEncoding;
  CFIndex v230;
  UInt8 *v231;
  char *v232;
  time_t tv_sec;
  char *v234;
  uint64_t (**v235)(const char *, uint64_t, _QWORD);
  uint64_t v236;
  uint64_t v237;
  uint64_t v238;
  uint64_t v239;
  uint64_t v240;
  uint64_t (**v241)(const char *, uint64_t);
  uint64_t v242;
  uint64_t v243;
  unint64_t v244;
  unint64_t v245;
  uint64_t v246;
  uint64_t (**v247)(_BYTE *, uint64_t, _QWORD);
  int v248;
  int v249;
  uint64_t v250;
  void **v251;
  uint64_t v252;
  int v253;
  int v254;
  uint64_t v255;
  uint64_t v256;
  BOOL v257;
  int v258;
  char v259;
  BOOL v260;
  int v261;
  uint64_t v262;
  int v263;
  BOOL v264;
  BOOL v265;
  __int16 v266;
  char *v267;
  char *v268;
  char v269;
  uint64_t v270;
  uint64_t v271;
  unint64_t v272;
  uint64_t v273;
  uint64_t v274;
  uint64_t v275;
  uint64_t v276;
  uint64_t v277;
  uint64_t v278;
  unsigned int v279;
  const char *v280;
  int v281;
  char *v282;
  uint64_t v283;
  int v284;
  uint64_t v285;
  int v286;
  uint64_t v287;
  int v288;
  unsigned int v289;
  uint64_t v290;
  int v291;
  int v292;
  unsigned int *v293;
  unint64_t v294;
  char *v295;
  char *v296;
  char v297;
  char *v298;
  char v299;
  const char *v300;
  int v301;
  int v302;
  int v303;
  int *v304;
  int v305;
  int v306;
  int v307;
  unint64_t v308;
  size_t v309;
  const char *v310;
  unsigned __int8 *v311;
  int v312;
  uint64_t v313;
  uint64_t v314;
  uint64_t v315;
  uint64_t v316;
  uint64_t v317;
  uint64_t v318;
  uint64_t v319;
  unint64_t v320;
  uint64_t v321;
  uint64_t v322;
  uint64_t *v323;
  char *v324;
  char v325;
  int v326;
  int v327;
  int v328;
  uint64_t v329;
  int v330;
  int v331;
  unsigned int v332;
  int v333;
  unsigned __int8 *v334;
  unint64_t v335;
  unint64_t v336;
  unint64_t v337;
  uint64_t v338;
  BOOL v339;
  unint64_t v340;
  uint64_t v341;
  int v342;
  int v343;
  uint64_t v344;
  unsigned __int8 *v345;
  int v346;
  uint64_t v347;
  __int16 v348;
  const __CFURL **v349;
  char *v350;
  char *v351;
  char v352;
  char *v353;
  char *v354;
  char v355;
  int *v356;
  int v357;
  uint64_t v358;
  uint64_t v359;
  uint64_t v360;
  uint64_t v361;
  uint64_t v362;
  uint64_t v363;
  uint64_t v364;
  unsigned int *v365;
  void **v366;
  void *v367;
  void *v368;
  uint64_t *v369;
  uint64_t v370;
  char *v371;
  size_t v372;
  const char *v373;
  int v374;
  uint64_t v375;
  char *v376;
  size_t v377;
  uint64_t v378;
  int v379;
  uint64_t v380;
  const char *v381;
  const char *v382;
  uint64_t *v383;
  uint64_t v384;
  char *v385;
  id *v386;
  id v387;
  void *v388;
  const char *v389;
  unsigned __int8 *v390;
  size_t v391;
  uint64_t v392;
  uint64_t v393;
  uint64_t v394;
  uint64_t v395;
  uint64_t v396;
  uint64_t usedBufLen;
  CFIndex *usedBufLena;
  uint64_t v400;
  unint64_t v401;
  uint64_t v402;
  uint64_t v403;
  uint64_t v404;
  uint64_t v405;
  uint64_t v406;
  uint64_t v407;
  uint64_t v408;
  uint64_t v409;
  uint64_t v410;
  uint64_t v411;
  uint64_t v412;
  __CFString *v413;
  char *v414;
  int v415;
  __int128 v417;
  __int128 v418;
  _QWORD v419[2];
  time_t v420;
  unsigned int v421;
  uint64_t v422;
  int8x16_t __s;
  char __str;
  _BYTE v425[253];
  _BYTE v426[46];
  char v427[4];
  timeval v428;
  char __format[16];
  uint64_t v430;
  uint64_t v431;
  uint64_t v432;
  CFRange v433;

  v8 = a2;
  v9 = 0;
  v432 = *MEMORY[0x1E0C80C00];
  v419[1] = a3;
  v417 = 0u;
  v418 = 0u;
  v419[0] = a3;
  v10 = (char)*a2;
  v413 = (__CFString *)*MEMORY[0x1E0C9AE50];
  v11 = 42;
  while (1)
  {
    v12 = v8 + 1;
    v13 = v8;
    if (v10)
    {
      do
      {
        if (v10 == 37)
          break;
        v14 = (char)*++v13;
        v10 = v14;
        ++v12;
      }
      while (v14);
    }
    v15 = (_DWORD)v13 - (_DWORD)v8;
    if (v13 == v8)
    {
      if (!v10)
        return (uint64_t)v9;
    }
    else
    {
      v16 = ((uint64_t (*)(unsigned __int8 *, _QWORD))*a1)(v8, v15);
      if ((v16 & 0x80000000) != 0)
        return v16;
      v9 = (char *)((_DWORD)v9 + v15);
      v11 = 42;
      if (!v10)
        return (uint64_t)v9;
    }
    v17 = 0;
    v18 = 0;
    v19 = 0;
    v20 = 0;
    v21 = 0;
    v417 = 0u;
    v418 = 0u;
    while (2)
    {
      v22 = *v12;
      switch(*v12)
      {
        case ' ':
          v17 = 32;
          BYTE4(v417) = 32;
          goto LABEL_23;
        case '!':
        case '"':
        case '$':
        case '%':
        case '&':
        case '(':
        case ')':
        case ',':
        case '.':
        case '/':
          goto LABEL_24;
        case '#':
          BYTE3(v417) = ++v19;
          goto LABEL_23;
        case '\'':
          BYTE8(v418) = ++v20;
          goto LABEL_23;
        case '*':
          v26 = (unsigned int *)v419[0];
          v419[0] += 8;
          v24 = *v26;
          if ((v24 & 0x80000000) != 0)
          {
            v24 = -(int)v24;
            LOBYTE(v21) = v21 | 1;
            LOBYTE(v417) = v21;
          }
          DWORD2(v417) = v24;
          v22 = *++v12;
          goto LABEL_32;
        case '+':
          v21 |= 2u;
          goto LABEL_22;
        case '-':
          v21 |= 1u;
          goto LABEL_22;
        case '0':
          v21 |= 4u;
          goto LABEL_22;
        default:
          if (v22 == 63)
          {
            v23 = (_DWORD *)v419[0];
            v419[0] += 8;
            v21 = v21 & 0xFFFFFFEF | (16 * (*v23 == 0));
LABEL_22:
            LOBYTE(v417) = v21;
LABEL_23:
            ++v12;
            continue;
          }
          if (v22 == 126)
          {
            v18 = 1;
            BYTE11(v418) = 1;
            goto LABEL_23;
          }
LABEL_24:
          if ((v22 - 48) > 9)
          {
            v24 = 0;
          }
          else
          {
            LODWORD(v24) = 0;
            do
            {
              v24 = 10 * (_DWORD)v24 + v22 - 48;
              DWORD2(v417) = v24;
              v25 = *++v12;
              v22 = v25;
            }
            while ((v25 - 48) < 0xA);
          }
LABEL_32:
          if (v22 == 46)
          {
            v27 = v12 + 1;
            v22 = v12[1];
            if (v22 == 42)
            {
              v28 = (unsigned int *)v419[0];
              v419[0] += 8;
              v29 = *v28;
              *(_QWORD *)&v418 = v29;
              v22 = v12[2];
              v27 = v12 + 2;
            }
            else if ((v22 - 48) > 9)
            {
              v29 = 0;
            }
            else
            {
              v29 = 0;
              do
              {
                v29 = v22 - 48 + 10 * v29;
                *(_QWORD *)&v418 = v29;
                v30 = *++v27;
                v22 = v30;
              }
              while ((v30 - 48) < 0xA);
            }
            LOBYTE(v21) = v21 | 8;
            LOBYTE(v417) = v21;
            v12 = v27;
            if ((v21 & 1) != 0)
            {
LABEL_43:
              LOBYTE(v21) = v21 & 0xFB;
              LOBYTE(v417) = v21;
            }
          }
          else
          {
            v29 = 0;
            if ((v21 & 1) != 0)
              goto LABEL_43;
          }
          v31 = 0;
          v32 = 0;
          while (2)
          {
            HIDWORD(v33) = v22;
            LODWORD(v33) = (v22 << 24) - 1744830464;
            switch((v33 >> 25))
            {
              case 0u:
                BYTE1(v417) = ++v31;
                goto LABEL_48;
              case 1u:
              case 6u:
              case 9u:
                if (v31 | v32)
                  return 0xFFFFFFFFLL;
                v31 = 0;
                v32 = 1;
                BYTE2(v417) = 1;
                v35 = *++v12;
                LOBYTE(v22) = v35;
                break;
              case 2u:
                BYTE2(v417) = ++v32;
LABEL_48:
                v34 = *++v12;
                v22 = v34;
                continue;
              default:
                v40 = 0xFFFFFFFFLL;
                if ((char)v31 > 2 || v32 > 2)
                  return v40;
                if (v31 && v32)
                  return 0xFFFFFFFFLL;
                break;
            }
            break;
          }
          v36 = (char)v22;
          v37 = 10;
          v38 = "0123456789ABCDEF";
          switch((char)v22)
          {
            case '@':
              v53 = (__CFString **)v419[0];
              v419[0] += 8;
              if ((v21 & 0x10) != 0)
                goto LABEL_786;
              v54 = *v53;
              if (v54)
                v55 = v54;
              else
                v55 = CFSTR("NULL");
              if (!v20 || (v21 & 8) == 0)
                goto LABEL_94;
              if (v29 < 2)
              {
                *(_QWORD *)&v418 = 0;
                BYTE8(v418) = 0;
              }
              else
              {
                *(_QWORD *)&v418 = v29 - 2;
LABEL_94:
                if (v20 == 2)
                {
                  v56 = 8738;
                }
                else
                {
                  if (v20 != 1)
                    goto LABEL_388;
                  v56 = 10023;
                }
                *(_WORD *)((char *)&v418 + 9) = v56;
              }
LABEL_388:
              if (v19 == 1)
              {
                Data = CFPropertyListCreateData(0, v55, kCFPropertyListXMLFormat_v1_0, 0, 0);
                if (Data)
                {
                  v195 = Data;
                  BytePtr = (unsigned __int8 *)CFDataGetBytePtr(Data);
                  Length = CFDataGetLength(v195);
                  v40 = PrintFWriteMultiLineText(a1, (uint64_t)&v417, BytePtr, Length);
                  CFRelease(v195);
                  goto LABEL_669;
                }
                v204 = (uint64_t)a1;
                v205 = "<<PLIST NOT XML-ABLE>>";
LABEL_667:
                v160 = PrintFCore(v204, (uint64_t)v205, v11, a4, a5, a6, a7, a8, usedBufLen);
LABEL_668:
                v40 = v160;
                goto LABEL_669;
              }
              while (2)
              {
                v198 = BYTE3(v417);
                v199 = CFGetTypeID(v55);
                if (v199 == CFBooleanGetTypeID())
                {
                  if (v413 == v55)
                    v218 = 4;
                  else
                    v218 = 5;
                  if (v413 == v55)
                    p_str = "true";
                  else
                    p_str = "false";
                  goto LABEL_650;
                }
                if (v199 == CFNumberGetTypeID())
                {
                  if (CFNumberIsFloatType((CFNumberRef)v55))
                  {
                    *(_QWORD *)__format = 0;
                    CFNumberGetValue((CFNumberRef)v55, kCFNumberDoubleType, __format);
                    v227 = SNPrintF((uint64_t)&__str, 300, (uint64_t)"%f", v222, v223, v224, v225, v226, *(uint64_t *)__format);
                  }
                  else
                  {
                    *(_QWORD *)__format = 0;
                    CFNumberGetValue((CFNumberRef)v55, kCFNumberSInt64Type, __format);
                    v227 = SNPrintF((uint64_t)&__str, 300, (uint64_t)"%lld", v313, v314, v315, v316, v317, *(uint64_t *)__format);
                  }
                  v218 = v227;
                  goto LABEL_649;
                }
                if (v199 != CFStringGetTypeID())
                {
                  if (v199 == CFNullGetTypeID())
                  {
                    v235 = (uint64_t (**)(const char *, uint64_t, _QWORD))a1;
                    p_str = "Null";
                    v218 = 4;
                    goto LABEL_651;
                  }
                  if (v199 == CFURLGetTypeID())
                  {
                    v55 = (__CFString *)CFURLGetString((CFURLRef)v55);
                    v40 = 4294960596;
                    if (!v55)
                      return v40;
                    continue;
                  }
                  objc_opt_class();
                  if ((objc_opt_isKindOfClass() & 1) != 0)
                  {
                    memset(__format, 0, sizeof(__format));
                    -[__CFString getUUIDBytes:](v55, "getUUIDBytes:", __format);
                    goto LABEL_614;
                  }
                  if (v199 == CFUUIDGetTypeID())
                  {
                    *(CFUUIDBytes *)__format = CFUUIDGetUUIDBytes((CFUUIDRef)v55);
LABEL_614:
                    if (BYTE11(v418))
                      v300 = "%~#U";
                    else
                      v300 = "%#U";
                    v301 = SNPrintF((uint64_t)&__str, 300, (uint64_t)v300, v236, v237, v238, v239, v240, (uint64_t)__format);
                    v302 = v418;
                    if (v301 < (int)v418)
                      v302 = v301;
                    if ((v417 & 8) != 0)
                      v303 = v302;
                    else
                      v303 = v301;
                    v218 = v303;
LABEL_649:
                    p_str = &__str;
LABEL_650:
                    v235 = (uint64_t (**)(const char *, uint64_t, _QWORD))a1;
LABEL_651:
                    v160 = PrintFWriteText(v235, (uint64_t)&v417, p_str, v218);
                    goto LABEL_668;
                  }
                  if (v199 != CFDataGetTypeID())
                  {
                    v431 = 0;
                    *(_QWORD *)__format = a1;
                    *(_QWORD *)&__format[8] = &v417;
                    v430 = DWORD2(v417);
                    v40 = PrintFWriteCFObjectLevel((uint64_t (***)(CFUUIDBytes *))__format, (const __CFArray *)v55, 0);
                    if ((v40 & 0x80000000) != 0
                      || v198 == 2
                      || v199 != CFArrayGetTypeID() && v199 != CFDictionaryGetTypeID() && v199 != CFSetGetTypeID())
                    {
                      goto LABEL_669;
                    }
                    v342 = ((uint64_t (*)(const char *, uint64_t))*a1)("\n", 1);
                    if (v342 <= 0)
                      v343 = 0;
                    else
                      v343 = v40;
                    goto LABEL_872;
                  }
                  v334 = (unsigned __int8 *)CFDataGetBytePtr((CFDataRef)v55);
                  v335 = CFDataGetLength((CFDataRef)v55);
                  v336 = v335;
                  v337 = v418;
                  if ((v417 & 8) == 0)
                    v337 = v335;
                  v338 = 32;
                  if (v337 < 0x20)
                    v338 = v337;
                  if (v198 == 2)
                    v337 = v338;
                  if (BYTE8(v418))
                    v339 = (v417 & 8) == 0;
                  else
                    v339 = 1;
                  if (v339)
                    v340 = v337;
                  else
                    v340 = v337 + 2;
                  if (v335 >= 0x21 && v340 > 0x20)
                  {
                    v40 = (*a1)("\n", 1, a1);
                    if ((v40 & 0x80000000) != 0)
                      return v40;
                    v342 = PrintFWriteHex((uint64_t (**)(const char *, uint64_t))a1, (uint64_t)&v417, 0, (uint64_t)v334, v336, v340, 0, v341);
                    if (v342 >= 0)
                      v343 = v40;
                    else
                      v343 = 0;
LABEL_872:
                    v40 = (v343 + v342);
                    goto LABEL_669;
                  }
                  if (BYTE9(v418))
                  {
                    v40 = ((uint64_t (*)(char *, uint64_t))*a1)((char *)&v418 + 9, 1);
                    if ((v40 & 0x80000000) != 0)
                      return v40;
                  }
                  else
                  {
                    LODWORD(v40) = 0;
                  }
                  if (v336 >= v340)
                    v378 = v340;
                  else
                    v378 = v336;
                  v16 = PrintFWriteHexByteStream(a1, 0, v334, v378);
                  if ((v16 & 0x80000000) == 0)
                  {
                    v379 = v16 + v40;
                    if (BYTE10(v418))
                    {
                      v342 = ((uint64_t (*)(char *, uint64_t))*a1)((char *)&v418 + 10, 1);
                      if (v342 >= 0)
                        v343 = v379;
                      else
                        v343 = 0;
                      goto LABEL_872;
                    }
                    v9 = (char *)(v379 + (_DWORD)v9);
LABEL_377:
                    v11 = 42;
                    goto LABEL_786;
                  }
                  return v16;
                }
                break;
              }
              v228 = CFStringGetLength(v55);
              MaximumSizeForEncoding = CFStringGetMaximumSizeForEncoding(v228, 0x8000100u);
              v428.tv_sec = MaximumSizeForEncoding;
              if (!MaximumSizeForEncoding)
              {
                v235 = (uint64_t (**)(const char *, uint64_t, _QWORD))a1;
                p_str = "";
                v218 = 0;
                goto LABEL_651;
              }
              v230 = MaximumSizeForEncoding;
              v231 = (UInt8 *)malloc_type_malloc(MaximumSizeForEncoding, 0x146251E0uLL);
              if (v231)
              {
                v232 = (char *)v231;
                v420 = 0;
                v433.location = 0;
                v433.length = v228;
                CFStringGetBytes(v55, v433, 0x8000100u, 0x5Eu, 0, v231, v230, &v420);
                tv_sec = v420;
                if (BYTE11(v418))
                {
                  v234 = __format;
                  _PrintFObfuscateString((unint64_t)v232, v420, __format, &v428.tv_sec);
                  tv_sec = v428.tv_sec;
                  v420 = v428.tv_sec;
                }
                else
                {
                  v234 = v232;
                }
                if ((v417 & 8) != 0 && tv_sec > (uint64_t)v418)
                {
                  v344 = (int)v418;
                  v420 = (int)v418;
                  tv_sec = (int)v418;
                  if ((uint64_t)((_QWORD)v418 << 32) >= 1)
                  {
                    while ((v234[v344] & 0xC0) == 0x80)
                    {
                      tv_sec = v344 - 1;
                      v420 = v344 - 1;
                      v183 = v344-- < 2;
                      if (v183)
                        goto LABEL_823;
                    }
                    tv_sec = v344;
                  }
                }
LABEL_823:
                v40 = PrintFWriteText((uint64_t (**)(const char *, uint64_t, _QWORD))a1, (uint64_t)&v417, v234, tv_sec);
                free(v232);
              }
              else
              {
                v40 = 4294960568;
              }
LABEL_669:
              v11 = 42;
              if ((v40 & 0x80000000) == 0)
              {
                v9 = (char *)(v40 + (_DWORD)v9);
                goto LABEL_786;
              }
              return v40;
            case 'A':
            case 'B':
            case 'D':
            case 'I':
            case 'J':
            case 'K':
            case 'L':
            case 'M':
            case 'O':
            case 'P':
            case 'Q':
            case 'R':
            case 'T':
            case 'W':
            case 'Y':
            case 'Z':
            case '[':
            case '\\':
            case ']':
            case '^':
            case '_':
            case 'h':
            case 'j':
            case 'k':
            case 'l':
            case 'q':
            case 'r':
            case 't':
            case 'w':
            case 'y':
            case 'z':
              goto LABEL_81;
            case 'C':
              v57 = (unsigned int *)v419[0];
              v419[0] += 8;
              if ((v21 & 0x10) != 0)
                goto LABEL_786;
              v58 = *v57;
              if (v20)
              {
                __str = 39;
                v59 = 1;
              }
              else
              {
                v59 = 0;
              }
              v174 = HIBYTE(v58);
              v50 = &__str;
              v175 = &v425[v59 - 1];
              if (HIBYTE(v58))
                v176 = 94;
              else
                v176 = 46;
              if (HIBYTE(v58) - 127 < 0xFFFFFFA1)
                LOBYTE(v174) = v176;
              *v175 = v174;
              v177 = BYTE2(v58);
              if (BYTE2(v58))
                v178 = 94;
              else
                v178 = 46;
              if (BYTE2(v58) - 127 < 0xFFFFFFA1)
                v177 = v178;
              v175[1] = v177;
              v179 = BYTE1(v58);
              if (v179)
                v180 = 94;
              else
                v180 = 46;
              if ((v179 - 127) < 0xFFFFFFA1)
                LOBYTE(v179) = v180;
              v175[2] = v179;
              v181 = v58 << 24;
              if ((_BYTE)v58)
                v182 = 94;
              else
                v182 = 46;
              v183 = v181 == 2130706432 || v181 < 520093697;
              if (v183)
                LOBYTE(v58) = v182;
              v175[3] = v58;
              if (v20)
              {
                LODWORD(v40) = v59 + 5;
                v425[(v59 | 4) - 1] = 39;
                v36 = 67;
              }
              else
              {
                v36 = 67;
                LODWORD(v40) = v59 | 4;
              }
              goto LABEL_780;
            case 'E':
            case 'F':
            case 'G':
            case 'e':
            case 'f':
            case 'g':
              __format[0] = 37;
              if ((v21 & 2) != 0)
              {
                __format[1] = 43;
                v39 = 2;
              }
              else
              {
                v39 = 1;
              }
              if (v19)
                __format[v39++] = 35;
              if ((v21 & 4) != 0)
                __format[v39++] = 48;
              v41 = v39 + 1;
              __format[v39] = 42;
              if ((v21 & 8) != 0)
              {
                __format[v41] = 46;
                v41 = v39 + 3;
                __format[v39 + 2] = 42;
              }
              v42 = &__format[v41];
              *v42 = v22;
              v42[1] = 0;
              if ((v21 & 1) != 0)
                v43 = -(int)v24;
              else
                v43 = v24;
              v44 = (_QWORD *)v419[0];
              v419[0] += 8;
              if ((v21 & 0x10) != 0)
                goto LABEL_786;
              v45 = *(double *)v44;
              if ((v21 & 8) != 0)
                v46 = snprintf(&__str, 0x12CuLL, __format, v45, v43, v29, *v44, v401, v402, v403, v404, v405, v406, v407, v408, v409, v410);
              else
                v46 = snprintf(&__str, 0x12CuLL, __format, v45, v43, *v44, v400, v401, v402, v403, v404, v405, v406, v407, v408, v409, v410);
              v40 = v46;
              v49 = (uint64_t (**)(const char *, uint64_t, _QWORD))a1;
              if ((v40 & 0x80000000) != 0)
                return v40;
              v50 = &__str;
              goto LABEL_781;
            case 'H':
              v60 = v419[0];
              v419[0] += 8;
              v61 = *(char **)v60;
              v419[0] = v60 + 16;
              v62 = *(int *)(v60 + 8);
              v419[0] = v60 + 24;
              if ((v21 & 0x10) != 0)
                goto LABEL_786;
              v63 = *(int *)(v60 + 16);
              if (!v61 && (_DWORD)v62)
              {
                v64 = PrintFCore((uint64_t)a1, (uint64_t)"<<NULL %zu/%zu>>", 42, a4, a5, a6, a7, a8, v62);
LABEL_375:
                v40 = v64;
                if ((v64 & 0x80000000) != 0)
                  return v40;
                v9 = (char *)(v64 + (_DWORD)v9);
                goto LABEL_377;
              }
              v157 = a1;
              if ((_DWORD)v62 == -1)
              {
                v158 = strlen(v61);
                v157 = a1;
                v62 = v158;
              }
              switch(v29)
              {
                case 0uLL:
                  if (v62 >= v63)
                    v159 = v63;
                  else
                    v159 = v62;
                  v160 = PrintFWriteHexOneLine((uint64_t (**)(const char *, uint64_t, _QWORD))a1, (uint64_t)&v417, (unsigned __int8 *)v61, v159);
                  goto LABEL_668;
                case 1uLL:
                  v241 = (uint64_t (**)(const char *, uint64_t))a1;
                  v242 = v24;
                  goto LABEL_473;
                case 2uLL:
                  if (!v62)
                  {
                    v204 = (uint64_t)a1;
                    v205 = "(0 bytes)\n";
                    goto LABEL_667;
                  }
                  v241 = (uint64_t (**)(const char *, uint64_t))a1;
                  if (v62 > 0x10)
                  {
                    v16 = PrintFCore((uint64_t)a1, (uint64_t)"\n", v11, a4, a5, a6, a7, a8, usedBufLen);
                    if ((v16 & 0x80000000) != 0)
                      return v16;
                    v242 = DWORD2(v417);
                    v241 = (uint64_t (**)(const char *, uint64_t))a1;
                    v243 = (uint64_t)v61;
                    v244 = v62;
                    v245 = v63;
                  }
                  else
                  {
                    v242 = 0;
LABEL_473:
                    v243 = (uint64_t)v61;
                    v244 = v62;
                    v245 = v63;
                  }
                  v160 = PrintFWriteHex(v241, (uint64_t)&v417, v242, v243, v244, v245, 1, a8);
                  goto LABEL_668;
                case 3uLL:
                  if (v62 >= v63)
                    v246 = v63;
                  else
                    v246 = v62;
                  v247 = a1;
                  v248 = 0;
                  goto LABEL_483;
                case 4uLL:
                  if (v62 >= v63)
                    v246 = v63;
                  else
                    v246 = v62;
                  v247 = a1;
                  v248 = 1;
LABEL_483:
                  v160 = PrintFWriteHexByteStream(v247, v248, (unsigned __int8 *)v61, v246);
                  goto LABEL_668;
                default:
                  v204 = (uint64_t)v157;
                  v205 = "<< BAD %%H PRECISION >>";
                  goto LABEL_667;
              }
            case 'N':
              if ((v21 & 0x10) != 0)
                goto LABEL_786;
              v428.tv_sec = 0;
              *(_QWORD *)&v428.tv_usec = 0;
              v420 = 0;
              gettimeofday(&v428, 0);
              v420 = v428.tv_sec;
              if (BYTE3(v417) == 2)
              {
                v65 = gmtime(&v420);
                strftime(__format, 0x18uLL, "%Y-%m-%d-%H:%M:%S", v65);
                v71 = SNPrintF((uint64_t)&__str, 300, (uint64_t)"%s.%06u", v66, v67, v68, v69, v70, (uint64_t)__format);
              }
              else
              {
                v161 = localtime(&v420);
                if (BYTE3(v417))
                  v162 = "%Y-%m-%d_%I-%M-%S";
                else
                  v162 = "%Y-%m-%d %I:%M:%S";
                strftime(__format, 0x18uLL, v162, v161);
                strftime(v427, 8uLL, "%p", v161);
                v168 = 32;
                if (BYTE3(v417))
                  v168 = 45;
                v400 = v168;
                v401 = (unint64_t)v427;
                v71 = SNPrintF((uint64_t)&__str, 300, (uint64_t)"%s.%06u%c%s", v163, v164, v165, v166, v167, (uint64_t)__format);
              }
              LODWORD(v40) = v71;
              v36 = 78;
              goto LABEL_779;
            case 'S':
              v72 = (unsigned __int8 **)v419[0];
              v419[0] += 8;
              if ((v21 & 0x10) != 0)
                goto LABEL_786;
              v73 = *v72;
              if (v73)
              {
                v74 = v21 & 8;
                v75 = (v21 & 8) == 0;
                if (v20 && v74)
                {
                  v76 = v29 >= 2;
                  v29 -= 2;
                  if (v76)
                  {
                    v75 = 0;
                    *(_QWORD *)&v418 = v29;
                  }
                  else
                  {
LABEL_366:
                    v75 = 0;
                    v20 = 0;
                    v29 = 0;
                    *(_QWORD *)&v418 = 0;
                    BYTE8(v418) = 0;
                  }
                }
LABEL_492:
                if (!v75 && !v29)
                  goto LABEL_501;
                v253 = *v73;
                if (v253 == 255)
                {
                  if (v73[1] != 254)
                    goto LABEL_501;
                  v19 = 2;
LABEL_500:
                  BYTE3(v417) = v19;
                  --v29;
                  v73 += 2;
                  *(_QWORD *)&v418 = v29;
                  goto LABEL_502;
                }
                if (v253 == 254 && v73[1] == 255)
                {
                  v19 = 1;
                  goto LABEL_500;
                }
LABEL_501:
                if ((v19 - 1) < 2)
                {
LABEL_502:
                  v254 = (int)v29 > 0 || v75;
                  if (v254 == 1)
                  {
                    v40 = 0;
                    v255 = 300;
                    v256 = 2 - v19;
                    do
                    {
                      if (*(_WORD *)&v73[2 * v40])
                        v257 = v255 < 1;
                      else
                        v257 = 1;
                      if (v257)
                        break;
                      v258 = v73[v256];
                      if (v73[v256])
                        v259 = 94;
                      else
                        v259 = 46;
                      if ((v258 - 32) >= 0x5F)
                        LOBYTE(v258) = v259;
                      v425[v40++ - 1] = v258;
                      v260 = v40 < (int)v29 || v75;
                      --v255;
                      v256 += 2;
                    }
                    while (v260);
                    goto LABEL_540;
                  }
LABEL_538:
                  LODWORD(v40) = 0;
                  goto LABEL_540;
                }
                if (v19)
                {
                  LODWORD(v40) = SNPrintF((uint64_t)&__str, 300, (uint64_t)"<< ERROR: %%S with too many #'s (%d) >>", a4, a5, a6, a7, a8, v19);
                  v20 = BYTE8(v418);
                  goto LABEL_540;
                }
                v261 = (int)v29 > 0 || v75;
                if (v261 != 1)
                  goto LABEL_538;
                v40 = 0;
                v262 = 300;
                do
                {
                  v263 = *(unsigned __int16 *)&v73[2 * v40];
                  if (*(_WORD *)&v73[2 * v40])
                    v264 = v262 < 1;
                  else
                    v264 = 1;
                  if (v264)
                    break;
                  if ((v263 - 32) >= 0x5F)
                    LOBYTE(v263) = 94;
                  v425[v40++ - 1] = v263;
                  v265 = v40 < (int)v29 || v75;
                  --v262;
                }
                while (v265);
LABEL_540:
                if (v20 == 2)
                {
                  v266 = 8738;
LABEL_544:
                  *(_WORD *)((char *)&v418 + 9) = v266;
                }
                else if (v20 == 1)
                {
                  v266 = 10023;
                  goto LABEL_544;
                }
                v36 = 83;
                goto LABEL_779;
              }
              v36 = 83;
              LODWORD(v40) = 4;
              if ((v21 & 8) != 0 && !v29)
              {
                if (v20)
                  goto LABEL_366;
                v75 = 0;
                v20 = 0;
                v29 = 0;
                goto LABEL_492;
              }
              goto LABEL_370;
            case 'U':
              v77 = (int8x16_t **)v419[0];
              v419[0] += 8;
              if ((v21 & 0x10) != 0)
                goto LABEL_786;
              p_s = *v77;
              if (!*v77)
              {
                v36 = 85;
                goto LABEL_369;
              }
              if (v18)
              {
                if (gObfuscateOnce != -1)
                  dispatch_once_f(&gObfuscateOnce, 0, (dispatch_function_t)_PrintFObfuscateInit);
                if (!v19)
                {
                  *(int8x16_t *)__format = vqtbl1q_s8(*p_s, (int8x16_t)xmmword_18D51D4B0);
                  p_s = (int8x16_t *)__format;
                }
                v79 = SipHash(gObfuscateKey, (unsigned __int8 *)p_s, 16);
                __s.i16[0] = 187;
                __s.i8[2] = HIBYTE(v79);
                __s.i8[3] = BYTE2(v79);
                __s.i8[4] = BYTE1(v79);
                __s.i8[5] = v79;
                *(uint64_t *)((char *)__s.i64 + 6) = 0xFBF31F0000800010;
                __s.i16[7] = -8320;
                if (!v19)
                  __s = vqtbl1q_s8(__s, (int8x16_t)xmmword_18D51D4B0);
                p_s = &__s;
                v19 = BYTE3(v417);
              }
              if (v19)
              {
                v80 = p_s->u8[0];
                v81 = p_s->u8[2];
                v82 = (char *)p_s->u8[3];
                v83 = p_s->u8[4];
                v84 = p_s->u8[5];
                v85 = p_s->u8[6];
                v86 = p_s->u8[7];
              }
              else
              {
                v80 = p_s->u8[3];
                v81 = p_s->u8[1];
                v82 = (char *)p_s->u8[0];
                v83 = p_s->u8[5];
                v84 = p_s->u8[4];
                v85 = p_s->u8[7];
                v86 = p_s->u8[6];
              }
              v200 = p_s->u8[14];
              v412 = p_s->u8[15];
              v410 = p_s->u8[12];
              v411 = p_s->u8[13];
              v408 = p_s->u8[10];
              v409 = p_s->u8[11];
              v406 = p_s->u8[8];
              v407 = p_s->u8[9];
              v404 = v85;
              v405 = v86;
              v402 = v83;
              v403 = v84;
              v400 = v81;
              v401 = (unint64_t)v82;
              v50 = &__str;
              LODWORD(v40) = SNPrintF((uint64_t)&__str, 300, (uint64_t)"%02x%02x%02x%02x-%02x%02x-%02x%02x-%02x%02x-%02x%02x%02x%02x%02x%02x", v411, v200, v412, a7, a8, v80);
              v36 = 85;
              goto LABEL_780;
            case 'V':
              v87 = (uint64_t *)v419[0];
              v419[0] += 8;
              v88 = *v87;
              v419[0] = v87 + 2;
              if ((v21 & 0x10) != 0)
                goto LABEL_786;
              v36 = 86;
              LODWORD(v40) = 4;
              if (!v88)
                goto LABEL_370;
              v89 = (_QWORD *)v87[1];
              if (!v89)
                goto LABEL_370;
              v64 = PrintFCoreVAList(a1, v88, *v89);
              goto LABEL_375;
            case 'X':
              goto LABEL_176;
            case 'a':
              v90 = (char **)v419[0];
              v419[0] += 8;
              if ((v21 & 0x10) != 0)
                goto LABEL_786;
              v91 = *v90;
              if (!*v90)
              {
                v36 = 97;
                goto LABEL_369;
              }
              v92 = (unsigned __int8 *)(v91 + 4);
              if (v19 == 2)
              {
                v201 = v91[1];
                if (v201 > 0x11)
                {
                  if (v201 != 18)
                  {
                    if (v201 == 30)
                    {
                      v92 = (unsigned __int8 *)(v91 + 8);
                      if (v18)
                      {
                        _PrintFObfuscateIPv6(v92, (uint64_t)__format);
                        v92 = (unsigned __int8 *)__format;
                      }
                      v220 = *((_DWORD *)v91 + 6);
                      v221 = bswap32(*((unsigned __int16 *)v91 + 1)) >> 16;
LABEL_732:
                      IPv6AddressToCString(v92, v220, v221, 0xFFFFFFFF, &__str, 0);
LABEL_733:
                      LODWORD(v40) = strlen(&__str);
                      goto LABEL_778;
                    }
                    goto LABEL_646;
                  }
                  v311 = (unsigned __int8 *)&v91[v91[5] + 8];
                  if (v91[6] != 6)
                  {
                    v400 = v91[6];
                    v312 = SNPrintF((uint64_t)&__str, 300, (uint64_t)"<< AF_LINK %H >>", a4, a5, a6, a7, a8, (uint64_t)v311);
                    goto LABEL_777;
                  }
                  if (v18)
                  {
                    _PrintFObfuscateHardwareAddress((unsigned __int8 *)&v91[v91[5] + 8], 6uLL, __format);
                    v311 = (unsigned __int8 *)__format;
                  }
                  v402 = v311[4];
                  v403 = v311[5];
                  v400 = v311[2];
                  v401 = v311[3];
                  usedBufLen = *v311;
                  goto LABEL_775;
                }
                if (v91[1])
                {
                  if (v201 == 2)
                  {
                    if (v18)
                    {
                      _PrintFObfuscateIPv4(v92, __format);
                      v92 = (unsigned __int8 *)__format;
                    }
                    IPv4AddressToCString(bswap32(*(_DWORD *)v92), bswap32(*((unsigned __int16 *)v91 + 1)) >> 16, &__str);
                    goto LABEL_733;
                  }
LABEL_646:
                  v312 = SNPrintF((uint64_t)&__str, 300, (uint64_t)"<< ERROR: %%##a used with unknown family: %d >>", a4, a5, a6, a7, a8, v91[1]);
                  goto LABEL_777;
                }
                v310 = "<< AF_UNSPEC >>";
              }
              else
              {
                if (v19 != 1)
                {
                  *((_QWORD *)&v202 + 1) = v29;
                  *(_QWORD *)&v202 = v29 - 2;
                  switch((unint64_t)(v202 >> 1))
                  {
                    case 0uLL:
                      v203 = v91[1];
                      v400 = v203 >> 4;
                      v401 = v203 & 0xF;
                      usedBufLen = *v91 >> 4;
                      goto LABEL_769;
                    case 1uLL:
                      if (v18)
                      {
                        _PrintFObfuscateIPv4((unsigned __int8 *)v91, __format);
                        v91 = __format;
                      }
                      v270 = *v91;
                      v271 = v91[2];
                      v272 = v91[3];
                      goto LABEL_768;
                    case 2uLL:
                      if (v18)
                      {
                        _PrintFObfuscateHardwareAddress((unsigned __int8 *)v91, 6uLL, __format);
                        v91 = __format;
                      }
                      v318 = *v91;
                      v319 = v91[2];
                      v320 = v91[3];
                      v321 = v91[4];
                      v322 = v91[5];
                      goto LABEL_774;
                    case 3uLL:
                      if (v18)
                      {
                        _PrintFObfuscateHardwareAddress((unsigned __int8 *)v91, 8uLL, __format);
                        v91 = __format;
                      }
                      v404 = v91[6];
                      v405 = v91[7];
                      v402 = v91[4];
                      v403 = v91[5];
                      v400 = v91[2];
                      v401 = v91[3];
                      v312 = SNPrintF((uint64_t)&__str, 300, (uint64_t)"%02X:%02X:%02X:%02X:%02X:%02X:%02X:%02X", a4, a5, a6, a7, a8, *v91);
                      goto LABEL_777;
                    case 7uLL:
                      if (v18)
                      {
                        _PrintFObfuscateIPv6((unsigned __int8 *)v91, (uint64_t)__format);
                        v91 = __format;
                      }
                      v92 = (unsigned __int8 *)v91;
                      goto LABEL_731;
                    default:
                      v312 = SNPrintF((uint64_t)&__str, 300, (uint64_t)"%s", a4, a5, a6, a7, a8, (uint64_t)"<< ERROR: Must specify address size (i.e. %.4a=IPv4, %.6a=Enet, %.8a=Fibre, %.16a=IPv6) >>");
                      goto LABEL_777;
                  }
                }
                if (v29 == 6)
                {
                  if (v18)
                  {
                    if (v91 == __format)
                    {
                      v354 = &__format[5];
                      v353 = &__format[1];
                      do
                      {
                        v355 = *(v353 - 1);
                        *(v353 - 1) = *v354;
                        *v354-- = v355;
                        v76 = v353++ >= v354;
                      }
                      while (!v76);
                    }
                    else
                    {
                      v267 = v91 + 6;
                      v268 = __format;
                      do
                      {
                        v269 = *--v267;
                        *v268++ = v269;
                      }
                      while (v267 > v91);
                    }
                    _PrintFObfuscateHardwareAddress((unsigned __int8 *)__format, 6uLL, __format);
                    v318 = __format[0];
                    v319 = __format[2];
                    v320 = __format[3];
                    v321 = __format[4];
                    v322 = __format[5];
                  }
                  else
                  {
                    v318 = v91[5];
                    v319 = v91[3];
                    v320 = v91[2];
                    v321 = v91[1];
                    v322 = *v91;
                  }
LABEL_774:
                  v402 = v321;
                  v403 = v322;
                  v400 = v319;
                  v401 = v320;
                  usedBufLen = v318;
LABEL_775:
                  v310 = "%02X:%02X:%02X:%02X:%02X:%02X";
                  goto LABEL_776;
                }
                if (v29 == 4)
                {
                  v93 = __format;
                  if (v18)
                  {
                    if (v91 == __format)
                    {
                      v350 = &__format[1];
                      v351 = &__format[3];
                      do
                      {
                        v352 = *(v350 - 1);
                        *(v350 - 1) = *v351;
                        *v351-- = v352;
                        v76 = v350++ >= v351;
                      }
                      while (!v76);
                    }
                    else
                    {
                      do
                      {
                        v94 = *--v92;
                        *v93++ = v94;
                      }
                      while (v92 > (unsigned __int8 *)v91);
                    }
                    _PrintFObfuscateIPv4((unsigned __int8 *)__format, __format);
                    v270 = __format[0];
                    v271 = __format[2];
                    v272 = __format[3];
                  }
                  else
                  {
                    v270 = v91[3];
                    v271 = v91[1];
                    v272 = *v91;
                  }
                }
                else
                {
                  if (*(_DWORD *)v91 == 6)
                  {
                    if (v18)
                    {
                      _PrintFObfuscateIPv6(v92, (uint64_t)__format);
                      v92 = (unsigned __int8 *)__format;
                    }
LABEL_731:
                    v220 = 0;
                    v221 = 0;
                    goto LABEL_732;
                  }
                  if (*(_DWORD *)v91 != 4)
                  {
                    v312 = SNPrintF((uint64_t)&__str, 300, (uint64_t)"<< ERROR: %%#a used with unsupported type: %d >>", a4, a5, a6, a7, a8, *(unsigned int *)v91);
                    goto LABEL_777;
                  }
                  if (v18)
                  {
                    _PrintFObfuscateIPv4(v92, __format);
                    v92 = (unsigned __int8 *)__format;
                  }
                  v270 = *v92;
                  v271 = v92[2];
                  v272 = v92[3];
                }
LABEL_768:
                v400 = v271;
                v401 = v272;
                usedBufLen = v270;
LABEL_769:
                v310 = "%u.%u.%u.%u";
              }
LABEL_776:
              v312 = SNPrintF((uint64_t)&__str, 300, (uint64_t)v310, a4, a5, a6, a7, a8, usedBufLen);
LABEL_777:
              LODWORD(v40) = v312;
LABEL_778:
              v36 = 97;
LABEL_779:
              v50 = &__str;
              goto LABEL_780;
            case 'b':
              v37 = 2;
              goto LABEL_177;
            case 'c':
              v95 = (int *)v419[0];
              v419[0] += 8;
              if ((v21 & 0x10) != 0)
                goto LABEL_786;
              v96 = *v95;
              if (!v20)
              {
                __str = *v95;
                v36 = 99;
                goto LABEL_372;
              }
              __str = 39;
              if (v96)
                v97 = 94;
              else
                v97 = 46;
              if ((v96 - 32) >= 0x5F)
                v98 = v97;
              else
                v98 = v96;
              v425[0] = v98;
              v425[1] = 39;
              v36 = 99;
              LODWORD(v40) = 3;
              goto LABEL_779;
            case 'd':
            case 'i':
              v414 = v9;
              if (v32 == 1 || v32 == 2)
              {
                v47 = (unint64_t *)v419[0];
                v419[0] += 8;
                v48 = *v47;
              }
              else
              {
                v134 = (int *)v419[0];
                v419[0] += 8;
                v48 = *v134;
              }
              if (v31 == 1)
                v48 = (__int16)v48;
              if (v31 == 2)
                v108 = (char)v48;
              else
                v108 = v48;
              if ((v108 & 0x8000000000000000) != 0)
              {
                v108 = -(uint64_t)v108;
                v37 = 10;
                v106 = 45;
                v17 = 45;
              }
              else
              {
                v37 = 10;
                if ((v21 & 2) == 0)
                {
                  v38 = "0123456789ABCDEF";
                  if ((v21 & 0x10) != 0)
                    goto LABEL_221;
                  goto LABEL_226;
                }
                v17 = 45;
                v106 = 43;
              }
LABEL_224:
              v38 = "0123456789ABCDEF";
LABEL_225:
              BYTE4(v417) = v106;
              if ((v21 & 0x10) != 0)
              {
LABEL_221:
                v9 = v414;
                goto LABEL_786;
              }
LABEL_226:
              if (v37 == 2 && v19 >= 2)
              {
                *(_QWORD *)__format = &__str;
                if ((v21 & 8) == 0)
                {
                  if (v31 == 1)
                  {
                    v29 = 16;
                  }
                  else if (v31 == 2)
                  {
                    v29 = 8;
                  }
                  else if (((v32 - 1) & 0xFE) != 0)
                  {
                    v29 = 32;
                  }
                  else
                  {
                    v29 = 64;
                  }
LABEL_286:
                  *(_QWORD *)&v418 = v29;
                  goto LABEL_287;
                }
                if (v29 < 0x41)
                {
                  if (!v29)
                  {
                    v29 = 1;
                    goto LABEL_286;
                  }
LABEL_287:
                  if (v19 == 2)
                  {
                    v149 = (v29 - 1);
                    do
                    {
                      if (((v108 >> v149) & 1) != 0)
                      {
                        v150 = "";
                        if (*(char **)__format != &__str)
                          v150 = " ";
                        SNPrintF_Add((uint64_t *)__format, (uint64_t)v427, (uint64_t)"%s%d", a4, a5, a6, a7, a8, (uint64_t)v150);
                      }
                      v183 = v149-- <= 0;
                    }
                    while (!v183);
                  }
                  else
                  {
                    v151 = 0;
                    do
                    {
                      if (((v108 >> (v29 - 1)) & 1) != 0)
                      {
                        v152 = "";
                        if (*(char **)__format != &__str)
                          v152 = " ";
                        SNPrintF_Add((uint64_t *)__format, (uint64_t)v427, (uint64_t)"%s%d", a4, a5, a6, a7, a8, (uint64_t)v152);
                      }
                      ++v151;
                      --v29;
                    }
                    while (v29);
                  }
                }
                else
                {
                  SNPrintF_Add((uint64_t *)__format, (uint64_t)v427, (uint64_t)"ERROR: << precision must be 0-%d >>", a4, a5, a6, a7, a8, 64);
                }
                v50 = &__str;
                LODWORD(v40) = *(_DWORD *)__format - &__str;
                LODWORD(v9) = (_DWORD)v414;
                goto LABEL_780;
              }
              if ((v21 & 8) != 0)
                goto LABEL_245;
              if ((v21 & 4) != 0)
              {
                v135 = 2 * (v37 != 10);
                if (v37 == 8)
                  v135 = 1;
                if (!v19)
                  v135 = 0;
                if (v17)
                  ++v135;
                v76 = v24 >= v135;
                v136 = v24 - v135;
                if (v76)
                  v29 = v136;
                else
                  v29 = 0;
                *(_QWORD *)&v418 = v29;
              }
              if (v29)
              {
LABEL_245:
                if (v29 < 0x12C)
                  goto LABEL_259;
                v29 = 299;
              }
              else
              {
                v29 = 1;
              }
              *(_QWORD *)&v418 = v29;
LABEL_259:
              if (v20)
              {
                v141 = 0;
                v142 = -1;
                v143 = 1;
                for (i = v427; ; i = v50)
                {
                  if (HIDWORD(v108))
                  {
                    v145 = v108 / v37;
                    *(i - 1) = v38[v108 % v37];
                    v50 = i - 1;
                    LODWORD(v40) = v141 + 1;
                  }
                  else
                  {
                    v145 = v108 / v37;
                    *(i - 1) = v38[v108 % v37];
                    v50 = i - 1;
                    LODWORD(v40) = v141 + 1;
                    if (v37 > v108)
                    {
                      LODWORD(v29) = v418;
                      goto LABEL_309;
                    }
                  }
                  v108 = v145;
                  if (!(v142 + 3 * (v143 / 3)))
                  {
                    *(i - 2) = 44;
                    LODWORD(v40) = v141 + 2;
                    v50 = i - 2;
                  }
                  --v142;
                  ++v143;
                  v141 = v40;
                }
              }
              if (v108)
              {
                v146 = 0;
                do
                {
                  if (HIDWORD(v108))
                    v147 = v108 % v37;
                  else
                    v147 = v108 % v37;
                  if (HIDWORD(v108))
                    v108 /= v37;
                  else
                    v108 = v108 / v37;
                  v426[v146-- + 45] = v38[v147];
                }
                while (v108);
                v50 = &v427[v146];
                LODWORD(v40) = -(int)v146;
              }
              else
              {
                LODWORD(v40) = 0;
                v50 = v427;
              }
LABEL_309:
              LODWORD(v9) = (_DWORD)v414;
              if ((int)v40 < (int)v29)
              {
                do
                {
                  *--v50 = 48;
                  LODWORD(v40) = v40 + 1;
                }
                while ((int)v40 < (int)v418);
              }
              if (!BYTE3(v417))
                goto LABEL_317;
              if (v37 == 8)
              {
                v155 = 1;
                v156 = -1;
              }
              else
              {
                if (v37 == 10)
                  goto LABEL_317;
                *(v50 - 1) = v36;
                v155 = 2;
                v156 = -2;
              }
              v50 += v156;
              *v50 = 48;
              LODWORD(v40) = v155 + v40;
LABEL_317:
              if (BYTE4(v417))
              {
                *--v50 = BYTE4(v417);
                LODWORD(v40) = v40 + 1;
              }
              goto LABEL_780;
            case 'm':
              v99 = (_DWORD *)v419[0];
              v419[0] += 8;
              if ((v21 & 0x10) != 0)
                goto LABEL_786;
              v100 = *v99;
              if (v19)
              {
                if ((v100 - 0x20000000) >> 24 > 0x5E
                  || BYTE2(v100) - 32 > 0x5E
                  || BYTE1(v100) - 32 > 0x5E
                  || *v99 - 32 > 0x5E)
                {
                  v101 = v19 == 2;
                  v102 = "%d/0x%X ";
                  v103 = "%-11d    0x%08X    '^^^^'    ";
                }
                else
                {
                  v101 = v19 == 2;
                  v102 = "%d/0x%X/'%C' ";
                  v103 = "%-11d    0x%08X    '%C'    ";
                }
                if (v101)
                  v153 = (uint64_t)v103;
                else
                  v153 = (uint64_t)v102;
                v400 = v100;
                v154 = SNPrintF((uint64_t)&__str, 300, v153, a4, a5, a6, a7, a8, v100);
              }
              else
              {
                v154 = 0;
              }
              DebugGetErrorStringEx(0, v100, &v425[v154 - 1], 300 - v154);
              v184 = strlen(&__str);
              v64 = PrintFWriteText((uint64_t (**)(const char *, uint64_t, _QWORD))a1, (uint64_t)&v417, &__str, v184);
              goto LABEL_375;
            case 'n':
              v104 = (_BYTE **)v419[0];
              v419[0] += 8;
              v105 = *v104;
              if (v31 == 2)
              {
                *v105 = (_BYTE)v9;
                goto LABEL_786;
              }
              if (v31 == 1)
              {
                *(_WORD *)v105 = (_WORD)v9;
                goto LABEL_786;
              }
              if (v32 == 2)
              {
                v148 = (int)v9;
              }
              else
              {
                if (v32 != 1)
                {
                  *(_DWORD *)v105 = (_DWORD)v9;
                  goto LABEL_786;
                }
                v148 = (int)v9;
              }
              *(_QWORD *)v105 = v148;
              goto LABEL_786;
            case 'o':
              v37 = 8;
              goto LABEL_177;
            case 'p':
              v414 = v9;
              v106 = 0;
              v17 = 0;
              v107 = (unint64_t *)v419[0];
              v419[0] += 8;
              v108 = *v107;
              v29 = 16;
              *(_QWORD *)&v418 = 16;
              LOBYTE(v21) = v21 | 8;
              LOBYTE(v417) = v21;
              v19 = 1;
              BYTE3(v417) = 1;
              v36 = 120;
              v37 = 16;
              goto LABEL_224;
            case 's':
              v109 = (const char **)v419[0];
              v419[0] += 8;
              if ((v21 & 0x10) != 0)
                goto LABEL_786;
              v50 = (char *)*v109;
              if (!*v109)
              {
                v36 = 115;
                LODWORD(v40) = 4;
                if ((v21 & 8) == 0 || v29)
                  goto LABEL_370;
              }
              if (v18)
              {
                if ((v21 & 8) == 0)
                  v29 = strlen(*v109);
                _PrintFObfuscateString((unint64_t)v50, v29, &__s, 0);
                v20 = BYTE8(v418);
                v50 = (char *)&__s;
              }
              if (v20 && (v417 & 8) != 0)
              {
                if ((unint64_t)v418 < 2)
                {
                  *(_QWORD *)&v418 = 0;
                  BYTE8(v418) = 0;
                }
                else
                {
                  *(_QWORD *)&v418 = v418 - 2;
                }
              }
              switch(BYTE3(v417))
              {
                case 0:
                  if ((v417 & 8) != 0)
                  {
                    v249 = v418;
                    if ((int)v418 < 1)
                      goto LABEL_701;
                    v250 = 0;
                    while (v50[v250])
                    {
                      if (v418 == ++v250)
                        goto LABEL_691;
                    }
                    v249 = v250;
LABEL_691:
                    if (v249)
                    {
                      v327 = 0;
                      v328 = v249;
                      v329 = (v249 - 1);
                      do
                      {
                        v330 = v50[v329];
                        if ((v330 & 0x80) == 0)
                          break;
                        ++v327;
                        v331 = v328--;
                        if (v331 < 2)
                          break;
                        --v329;
                      }
                      while ((v330 & 0xC0) == 0x80);
                      v332 = v327 - 2;
                      if ((((255 << (8 - v327)) | (1 << (7 - v327))) & v330) != (255 << (8 - v327)))
                        v327 = 0;
                      v333 = v327 + v328;
                      if (v332 <= 4)
                        LODWORD(v40) = v333;
                      else
                        LODWORD(v40) = v328;
                    }
                    else
                    {
LABEL_701:
                      LODWORD(v40) = 0;
                    }
                  }
                  else
                  {
                    v208 = 0;
                    do
                      LODWORD(v40) = v208;
                    while (v50[v208++]);
                  }
                  goto LABEL_747;
                case 1:
                  v210 = *v50++;
                  LODWORD(v40) = v210;
                  goto LABEL_747;
                case 2:
                  *(_QWORD *)__format = &__str;
                  v211 = *v50;
                  if (*v50 || (*(_QWORD *)__format = v425, __str = 46, v211 = *v50, *v50))
                  {
                    while (1)
                    {
                      if (v211 >= 0x40)
                      {
                        SNPrintF_Add((uint64_t *)__format, (uint64_t)v427, (uint64_t)"<<INVALID DNS LABEL LENGTH %u>>", a4, a5, a6, a7, a8, v211);
                        goto LABEL_624;
                      }
                      if (*(_QWORD *)__format + (unint64_t)v211 >= (unint64_t)v426)
                        break;
                      SNPrintF_Add((uint64_t *)__format, (uint64_t)v427, (uint64_t)"%#s.", a4, a5, a6, a7, a8, (uint64_t)v50);
                      v212 = &v50[*v50];
                      v213 = v212[1];
                      v50 = v212 + 1;
                      v211 = v213;
                      if (!v213)
                        goto LABEL_624;
                    }
                    SNPrintF_Add((uint64_t *)__format, (uint64_t)v427, (uint64_t)"<<DNS NAME TOO LONG>>", a4, a5, a6, a7, a8, usedBufLen);
                  }
LABEL_624:
                  v50 = &__str;
                  LODWORD(v40) = *(_DWORD *)__format - &__str;
                  goto LABEL_747;
                case 3:
                  v214 = *v50;
                  if (v214 == 43 || v214 == 45)
                  {
                    LODWORD(v215) = (_DWORD)v50 + strlen(v50);
                    goto LABEL_746;
                  }
                  v295 = v50 + 1;
                  v296 = v50 + 1;
                  v297 = *v50;
                  v298 = v50;
                  break;
                default:
                  v50 = &__str;
                  LODWORD(v40) = SNPrintF((uint64_t)&__str, 300, (uint64_t)"<< ERROR: %%s with too many #'s (%d) >>", a4, a5, a6, a7, a8, SBYTE3(v417));
                  goto LABEL_747;
              }
              while (2)
              {
                if (v297 == 32)
                {
                  v298 = v296;
LABEL_610:
                  v299 = *v296++;
                  v297 = v299;
                  continue;
                }
                break;
              }
              if (!v297)
                goto LABEL_678;
              if (v297 != 58)
                goto LABEL_610;
              v324 = v296 - 1;
              if (v324[1] != 58)
              {
                while (1)
                {
LABEL_678:
                  if (v214 == 32)
                  {
                    v50 = v295;
                  }
                  else if (!(_BYTE)v214 || v214 == 40)
                  {
                    v215 = v295 - 1;
                    goto LABEL_682;
                  }
                  v325 = *v295++;
                  LOBYTE(v214) = v325;
                }
              }
              v215 = v324 + 2;
              v50 = v298;
LABEL_682:
              while (1)
              {
                v326 = *v215;
                if (!*v215 || v326 == 32)
                  break;
                if (v326 == 40)
                {
                  if (v215[1] == 41)
                  {
                    v345 = (unsigned __int8 *)(v215 + 2);
                    v346 = v215[2];
                    v347 = 3;
                    if (v346 != 39)
                      v347 = 0;
                    v215 += v347;
                    if (v346 == 40)
                      v215 = (char *)v345;
                  }
                  break;
                }
                ++v215;
              }
              if (v50 < v215 && *v50 == 42)
                ++v50;
LABEL_746:
              LODWORD(v40) = (_DWORD)v215 - (_DWORD)v50;
LABEL_747:
              if ((v417 & 8) != 0 && (int)v40 > (int)v418)
              {
                LODWORD(v40) = v418;
                if ((int)v418 >= 1)
                {
                  v40 = v418;
                  while ((v50[v40] & 0xC0) == 0x80)
                  {
                    v183 = v40-- <= 1;
                    if (v183)
                    {
                      LODWORD(v40) = 0;
                      break;
                    }
                  }
                }
              }
              if (BYTE8(v418) == 2)
              {
                v348 = 8738;
              }
              else
              {
                if (BYTE8(v418) != 1)
                  goto LABEL_760;
                v348 = 10023;
              }
              *(_WORD *)((char *)&v418 + 9) = v348;
LABEL_760:
              v36 = 115;
              goto LABEL_780;
            case 'u':
              goto LABEL_177;
            case 'v':
              v110 = (unsigned int *)v419[0];
              v419[0] += 8;
              if ((v21 & 0x10) != 0)
                goto LABEL_786;
              v111 = *v110;
              v112 = HIWORD(*v110) & 0xF;
              *(_QWORD *)__format = &__str;
              SNPrintF_Add((uint64_t *)__format, (uint64_t)v427, (uint64_t)"%u", a4, a5, a6, a7, a8, HIBYTE(v111));
              SNPrintF_Add((uint64_t *)__format, (uint64_t)v427, (uint64_t)".%u", v113, v114, v115, v116, v117, (v111 >> 20) & 0xF);
              if (v112)
                SNPrintF_Add((uint64_t *)__format, (uint64_t)v427, (uint64_t)".%u", v118, v119, v120, v121, v122, HIWORD(v111) & 0xF);
              HIDWORD(v123) = v111 >> 8;
              LODWORD(v123) = ((v111 >> 8) & 0xE0) - 32;
              switch((v123 >> 5))
              {
                case 0u:
                  SNPrintF_Add((uint64_t *)__format, (uint64_t)v427, (uint64_t)"d%u", v118, v119, v120, v121, v122, v111);
                  break;
                case 1u:
                  SNPrintF_Add((uint64_t *)__format, (uint64_t)v427, (uint64_t)"a%u", v118, v119, v120, v121, v122, v111);
                  break;
                case 2u:
                  SNPrintF_Add((uint64_t *)__format, (uint64_t)v427, (uint64_t)"b%u", v118, v119, v120, v121, v122, v111);
                  break;
                case 3u:
                  if ((_BYTE)v111)
                    SNPrintF_Add((uint64_t *)__format, (uint64_t)v427, (uint64_t)"f%u", v118, v119, v120, v121, v122, v111);
                  break;
                default:
                  SNPrintF_Add((uint64_t *)__format, (uint64_t)v427, (uint64_t)"<< ERROR: invalid NumVersion stage: 0x%02X >>", v118, v119, v120, v121, v122, v111);
                  break;
              }
              v50 = &__str;
              LODWORD(v40) = *(_DWORD *)__format - &__str;
              v36 = 118;
              goto LABEL_780;
            case 'x':
              v38 = "0123456789abcdef";
LABEL_176:
              v37 = 16;
LABEL_177:
              v414 = v9;
              if (v32 == 2 || v32 == 1)
              {
                v124 = (unint64_t *)v419[0];
                v419[0] += 8;
                v125 = *v124;
              }
              else
              {
                v126 = (unsigned int *)v419[0];
                v419[0] += 8;
                v125 = *v126;
              }
              v127 = v125;
              v128 = (unsigned __int16)v125;
              if (v31 != 1)
                v128 = v125;
              v106 = 0;
              v17 = 0;
              if (v31 == 2)
                v108 = v127;
              else
                v108 = v128;
              goto LABEL_225;
            case '{':
              v129 = ++v12;
              while (1)
              {
                v36 = *v12;
                if (!*v12 || v36 == 125)
                  break;
                ++v12;
              }
              if (!strnicmpx(v129, v12 - v129, "asbd"))
              {
                v137 = v419[0];
                v419[0] += 8;
                if ((v417 & 0x10) != 0)
                  goto LABEL_784;
                v138 = *(_DWORD **)v137;
                v139 = *(unsigned int *)(*(_QWORD *)v137 + 8);
                if ((int)v139 <= 1634492770)
                {
                  if ((_DWORD)v139 == 1633772320)
                  {
                    v140 = "AAC,";
                  }
                  else
                  {
                    v140 = "ELD,";
                    if ((_DWORD)v139 != 1633772389)
                      goto LABEL_424;
                  }
                }
                else
                {
                  switch((_DWORD)v139)
                  {
                    case 0x616C6163:
                      v140 = "ALAC,";
                      break;
                    case 0x6C70636D:
                      v140 = "PCM,";
                      break;
                    case 0x6F707573:
                      v140 = "Opus,";
                      break;
                    default:
LABEL_424:
                      v140 = __format;
                      SNPrintF((uint64_t)__format, 32, (uint64_t)"%C,", a4, a5, a6, a7, a8, v139);
                      break;
                  }
                }
                v40 = PrintFCore((uint64_t)a1, (uint64_t)"%-5s %5u Hz", v130, a4, a5, a6, a7, a8, (uint64_t)v140);
                if ((v40 & 0x80000000) != 0)
                  return v40;
                if (v138[8])
                {
                  v16 = PrintFCore((uint64_t)a1, (uint64_t)", %2u-bit", v273, v274, v275, v276, v277, v278, v138[8]);
                  goto LABEL_566;
                }
                if (v138[2] == 1634492771)
                {
                  v279 = v138[3] - 1;
                  v280 = "??-bit";
                  if (v279 <= 3)
                    v280 = off_1E25DEF78[v279];
                  v16 = PrintFCore((uint64_t)a1, (uint64_t)", %s", v273, v274, v275, v276, v277, v278, (uint64_t)v280);
LABEL_566:
                  if ((v16 & 0x80000000) != 0)
                    return v16;
                  LODWORD(v40) = v16 + v40;
                }
                v281 = v138[7];
                if (v281 == 1)
                {
                  v282 = "Mono";
                }
                else if (v281 == 2)
                {
                  v282 = "Stereo";
                }
                else
                {
                  v282 = __format;
                  SNPrintF((uint64_t)__format, 32, (uint64_t)"%u ch", v274, v275, v276, v277, v278, v138[7]);
                }
                v16 = PrintFCore((uint64_t)a1, (uint64_t)", %s", v273, v274, v275, v276, v277, v278, (uint64_t)v282);
                if ((v16 & 0x80000000) != 0)
                  return v16;
                v284 = v16 + v40;
                if ((v138[3] & 0x20) != 0)
                {
                  v285 = PrintFCore((uint64_t)a1, (uint64_t)", Non-interleaved", v283, a4, a5, a6, a7, a8, usedBufLen);
                  v40 = v285;
                  if ((v285 & 0x80000000) != 0)
                    return v40;
                  v284 += v285;
                }
                if (v138[2] == 1819304813)
                {
                  v286 = v138[3];
                  if ((v286 & 2) != 0)
                  {
                    v287 = PrintFCore((uint64_t)a1, (uint64_t)", Swapped", v283, a4, a5, a6, a7, a8, usedBufLen);
                    v40 = v287;
                    if ((v287 & 0x80000000) != 0)
                      return v40;
                    v284 += v287;
                    v286 = v138[3];
                  }
                  if ((v286 & 1) != 0)
                  {
                    v290 = PrintFCore((uint64_t)a1, (uint64_t)", Float", v283, a4, a5, a6, a7, a8, usedBufLen);
LABEL_587:
                    v40 = v290;
                    if ((v290 & 0x80000000) != 0)
                      return v40;
                    v284 += v290;
                  }
                  else if ((v286 & 4) != 0)
                  {
                    v288 = v138[8];
                    if (v288)
                    {
                      v289 = v286 & 0x1F80;
                      if (v289)
                      {
                        v290 = PrintFCore((uint64_t)a1, (uint64_t)", %u.%u", v283, a4, a5, a6, a7, a8, v288 - (v289 >> 7));
                        goto LABEL_587;
                      }
                    }
                  }
                }
                if (v138[5] <= 1u)
                {
                  v9 = (char *)(v284 + (_DWORD)v9);
                  goto LABEL_784;
                }
                v291 = PrintFCore((uint64_t)a1, (uint64_t)", %u samples/packet", v283, a4, a5, a6, a7, a8, v138[5]);
                if (v291 >= 0)
                  v292 = v284;
                else
                  v292 = 0;
                v40 = (v292 + v291);
                if (v292 + v291 < 0)
                  return v40;
LABEL_783:
                v9 = (char *)(v40 + (_DWORD)v9);
                goto LABEL_784;
              }
              if (!strnicmpx(v129, v12 - v129, "cec"))
              {
                v169 = (unsigned __int8 **)v419[0];
                v419[0] += 8;
                v170 = *v169;
                v419[0] = v169 + 2;
                if ((v417 & 0x10) != 0)
                  goto LABEL_784;
                v171 = *((_DWORD *)v169 + 2);
                if ((int)v171 >= 1)
                {
                  v172 = *v170;
                  v415 = (int)v9;
                  if (v171 == 1)
                  {
                    v9 = "<Poll>";
                    v173 = "";
                    goto LABEL_852;
                  }
                  v216 = v170 + 2;
                  v217 = v170[1];
                  if (v217 > 0x7F)
                  {
                    switch(v170[1])
                    {
                      case 0x80u:
                        if (v171 < 6)
                          goto LABEL_896;
                        v173 = (const char *)&v428;
                        SNPrintF((uint64_t)&v428, 32, (uint64_t)"%.2a -> %.2a", a4, a5, a6, a7, a8, (uint64_t)(v170 + 2));
                        v9 = "<Routing Change>";
                        break;
                      case 0x82u:
                        if (v171 < 4)
                          goto LABEL_896;
                        v173 = (const char *)&v428;
                        SNPrintF((uint64_t)&v428, 32, (uint64_t)"%.2a", a4, a5, a6, a7, a8, (uint64_t)(v170 + 2));
                        v9 = "<Active Source>";
                        break;
                      case 0x83u:
                        v9 = "<Give Physical Address>";
                        goto LABEL_851;
                      case 0x84u:
                        v9 = "<Report Physical Address>";
                        goto LABEL_851;
                      case 0x85u:
                        v9 = "<Request Active Source>";
                        goto LABEL_851;
                      case 0x86u:
                        if (v171 < 4)
                          goto LABEL_896;
                        v173 = (const char *)&v428;
                        SNPrintF((uint64_t)&v428, 32, (uint64_t)"%.2a", a4, a5, a6, a7, a8, (uint64_t)(v170 + 2));
                        v9 = "<Set Stream Path>";
                        break;
                      case 0x87u:
                        if (v171 < 5)
                          goto LABEL_896;
                        v173 = (const char *)&v428;
                        SNPrintF((uint64_t)&v428, 32, (uint64_t)"%02X-%02X-%02X", a4, a5, a6, a7, a8, v170[2]);
                        v9 = "<Device Vendor ID>";
                        break;
                      case 0x8Cu:
                        v9 = "<Give Device Vendor ID>";
                        goto LABEL_851;
                      case 0x8Du:
                        v9 = "<Menu Request>";
                        goto LABEL_851;
                      case 0x8Eu:
                        v9 = "<Menu Status>";
                        goto LABEL_851;
                      case 0x8Fu:
                        v9 = "<Give Power Status>";
                        goto LABEL_851;
                      case 0x90u:
                        v9 = "<Report Power Status>";
                        goto LABEL_851;
                      case 0x9Du:
                        v9 = "<Inactive Source>";
                        goto LABEL_851;
                      case 0x9Eu:
                        if (v171 < 3)
                          goto LABEL_896;
                        if (*v216 - 4 >= 3)
                        {
                          v173 = (const char *)&v428;
                          SNPrintF((uint64_t)&v428, 32, (uint64_t)"Other %H", a4, a5, a6, a7, a8, (uint64_t)(v170 + 2));
                        }
                        else
                        {
                          v173 = off_1E25DEF98[(*v216 - 4)];
                        }
                        v9 = "<CEC Version>";
                        break;
                      case 0x9Fu:
                        v9 = "<Get CEC Version>";
                        goto LABEL_851;
                      case 0xA0u:
                        v9 = "<Vendor Command with ID>";
                        goto LABEL_851;
                      default:
                        goto LABEL_848;
                    }
                    goto LABEL_852;
                  }
                  if (v170[1] > 0x31u)
                  {
                    switch(v170[1])
                    {
                      case 'D':
                        v9 = "<User Control Pressed>";
                        break;
                      case 'E':
                        v9 = "<User Control Released>";
                        break;
                      case 'F':
                        v9 = "<Get OSD Name>";
                        break;
                      case 'G':
                        v173 = (const char *)&v428;
                        SNPrintF((uint64_t)&v428, 32, (uint64_t)"'%.*s'", a4, a5, a6, a7, a8, v171 - 2);
                        v9 = "<Set OSD Name>";
                        goto LABEL_852;
                      default:
                        if (v217 == 50)
                        {
                          v173 = (const char *)&v428;
                          SNPrintF((uint64_t)&v428, 32, (uint64_t)"'%.*s'", a4, a5, a6, a7, a8, v171 - 2);
                          v9 = "<Set Menu Language>";
                          goto LABEL_852;
                        }
                        if (v217 != 54)
                          goto LABEL_848;
                        v9 = "<Standby>";
                        break;
                    }
                  }
                  else if (v170[1] > 0xCu)
                  {
                    if (v217 == 13)
                    {
                      v9 = "<Text View On>";
                    }
                    else
                    {
                      if (v217 != 26)
                        goto LABEL_848;
                      v9 = "<Give Deck Status>";
                    }
                  }
                  else if (v170[1])
                  {
                    v9 = "<Image View On>";
                    if (v217 != 4)
                    {
LABEL_848:
                      v9 = __format;
                      SNPrintF((uint64_t)__format, 32, (uint64_t)"<<? 0x%02X>>", a4, a5, a6, a7, a8, v170[1]);
                      v216 = v170 + 2;
                    }
                  }
                  else
                  {
                    v9 = "<Feature Abort>";
                  }
LABEL_851:
                  v173 = (const char *)&v428;
                  SNPrintF((uint64_t)&v428, 32, (uint64_t)"%H", a4, a5, a6, a7, a8, (uint64_t)v216);
LABEL_852:
                  v373 = "TV";
                  if (v172 >= 0x10)
                  {
                    v373 = "Broadcast";
                    if ((v172 >> 4) - 1 <= 0xD)
                      v373 = off_1E25DEFB0[((v172 >> 4) - 1)];
                  }
                  v400 = (uint64_t)v9;
                  v401 = (unint64_t)v173;
                  v374 = PrintFCore((uint64_t)a1, (uint64_t)"%-9s -> %9s: %s %s", v11, a4, a5, a6, a7, a8, (uint64_t)v373);
                  LODWORD(v9) = v415;
                  v11 = 42;
                  if ((v374 & 0x80000000) == 0)
                  {
                    v9 = (char *)(v374 + v415);
                    goto LABEL_785;
                  }
                }
LABEL_896:
                v400 = 64;
                v252 = PrintFCore((uint64_t)a1, (uint64_t)"<< MALFORMED CEC: %H >>", v11, a4, a5, a6, a7, a8, (uint64_t)v170);
                goto LABEL_782;
              }
              if (!strnicmpx(v129, v12 - v129, "DateCF"))
              {
                v185 = (double *)v419[0];
                v419[0] += 8;
                if ((v417 & 0x10) == 0)
                {
                  v186 = *v185;
                  v187 = (uint64_t)*v185;
                  LODWORD(v428.tv_sec) = 0;
                  LODWORD(v420) = 0;
                  *(_DWORD *)v427 = 0;
                  v422 = 0;
                  v421 = 0;
                  SecondsToYMD_HMS(v187 + 0xEB1E31100, (int *)&v428, &v420, v427, (int *)&v422 + 1, (unsigned int *)&v422, &v421);
                  v188 = modf(v186, (long double *)__format);
                  v403 = v421;
                  v404 = (int)(fabs(v188) * 1000.0);
                  v401 = HIDWORD(v422);
                  v402 = v422;
                  v400 = *(unsigned int *)v427;
                  v50 = &__str;
                  v52 = SNPrintF((uint64_t)&__str, 300, (uint64_t)"%04d-%02d-%02d-%02d:%02d:%02d.%03d", v189, v190, v191, v192, v193, LODWORD(v428.tv_sec));
LABEL_85:
                  LODWORD(v40) = v52;
                  goto LABEL_780;
                }
                goto LABEL_784;
              }
              if (!strnicmpx(v129, v12 - v129, "dur"))
              {
                if (BYTE2(v417) == 2 || BYTE2(v417) == 1)
                {
                  v206 = (unint64_t *)v419[0];
                  v419[0] += 8;
                  v207 = *v206;
                }
                else
                {
                  v293 = (unsigned int *)v419[0];
                  v419[0] += 8;
                  v207 = *v293;
                }
                if (BYTE1(v417) == 1)
                  v207 = (unsigned __int16)v207;
                if (BYTE1(v417) == 2)
                  v294 = v207;
                else
                  v294 = v207;
                if ((v417 & 0x10) == 0)
                {
                  v50 = &__str;
                  v52 = PrintFWriteTimeDuration(v294, SBYTE3(v417), &__str);
                  goto LABEL_85;
                }
                goto LABEL_784;
              }
              if (strnicmpx(v129, v12 - v129, "end"))
              {
                if (!strnicmpx(v129, v12 - v129, "error"))
                {
                  v251 = (void **)v419[0];
                  v419[0] += 8;
                  if ((v417 & 0x10) != 0)
                    goto LABEL_784;
                  v252 = PrintFWriteErrorObject((uint64_t)a1, *v251, v131, a4, a5, a6, a7, a8, usedBufLen);
                  goto LABEL_782;
                }
                if (!strnicmpx(v129, v12 - v129, "fill"))
                {
                  v304 = (int *)v419[0];
                  v419[0] += 8;
                  v305 = *v304;
                  v419[0] = v304 + 4;
                  if ((v417 & 0x10) == 0)
                  {
                    v306 = v304[2];
                    if (v306)
                    {
                      v307 = (int)v9;
                      LODWORD(v40) = 0;
                      v308 = v306;
                      do
                      {
                        if (v308 >= 0x12C)
                          v309 = 300;
                        else
                          v309 = v308;
                        memset(&__str, v305, v309);
                        v16 = ((uint64_t (*)(char *, size_t))*a1)(&__str, v309);
                        if ((v16 & 0x80000000) != 0)
                          return v16;
                        v40 = (v16 + v40);
                        v308 -= v309;
                      }
                      while (v308);
                      v11 = 42;
                      if ((v40 & 0x80000000) != 0)
                        return v40;
                      LODWORD(v9) = v307;
                      goto LABEL_640;
                    }
                  }
                  goto LABEL_784;
                }
                if (strnicmpx(v129, v12 - v129, "flags"))
                {
                  if (!strnicmpx(v129, v12 - v129, "mask"))
                  {
                    v349 = (const __CFURL **)v419[0];
                    v419[0] += 8;
                    if ((v417 & 0x10) != 0)
                      goto LABEL_784;
                    if (*v349)
                    {
                      v252 = PrintFWriteMaskObject(a1, *v349);
                      goto LABEL_782;
                    }
LABEL_369:
                    LODWORD(v40) = 4;
LABEL_370:
                    v50 = "NULL";
                    goto LABEL_780;
                  }
                  if (!strnicmpx(v129, v12 - v129, "pid"))
                  {
                    v356 = (int *)v419[0];
                    v419[0] += 8;
                    if ((v417 & 0x10) == 0)
                    {
                      v357 = *v356;
                      __str = 0;
                      GetProcessNameByPID(v357, &__str, 0x12CuLL);
                      if (__str)
                      {
                        if (BYTE3(v417))
                          v364 = PrintFCore((uint64_t)a1, (uint64_t)"%s:%lld", v358, v359, v360, v361, v362, v363, (uint64_t)&__str);
                        else
                          v364 = PrintFCore((uint64_t)a1, (uint64_t)"%s", v358, v359, v360, v361, v362, v363, (uint64_t)&__str);
                      }
                      else
                      {
                        v364 = PrintFCore((uint64_t)a1, (uint64_t)"%lld", v358, v359, v360, v361, v362, v363, v357);
                      }
                      v40 = v364;
                      v11 = 42;
                      if ((v364 & 0x80000000) != 0)
                        return v40;
LABEL_640:
                      v9 = (char *)(v40 + (_DWORD)v9);
                      goto LABEL_785;
                    }
                    goto LABEL_784;
                  }
                  if (strnicmpx(v129, v12 - v129, "ptr"))
                  {
                    if (strnicmpx(v129, v12 - v129, "sline"))
                    {
                      if (strnicmpx(v129, v12 - v129, "text"))
                      {
                        if (strnicmpx(v129, v12 - v129, "tlv8"))
                        {
                          if (strnicmpx(v129, v12 - v129, "txt"))
                          {
                            if (strnicmpx(v129, v12 - v129, "xml"))
                            {
                              if (strnicmpx(v129, v12 - v129, "xpc"))
                              {
                                pthread_mutex_lock(&gPrintFUtilsLock);
                                v133 = &gExtensionList;
                                do
                                {
                                  v133 = (uint64_t *)*v133;
                                  if (!v133)
                                  {
                                    pthread_mutex_unlock(&gPrintFUtilsLock);
                                    usedBufLena = (CFIndex *)(v12 - v129);
                                    v50 = &__str;
                                    v52 = SNPrintF((uint64_t)&__str, 300, (uint64_t)"<<UNKNOWN PRINTF EXTENSION '%.*s'>>", v392, v393, v394, v395, v396, (uint64_t)usedBufLena);
                                    goto LABEL_85;
                                  }
                                }
                                while (strnicmpx(v129, v12 - v129, (_BYTE *)v133 + 24));
                                v40 = ((uint64_t (*)(uint64_t (**)(unsigned __int8 *, int64_t, _QWORD), __int128 *, _QWORD *, uint64_t))v133[1])(a1, &v417, v419, v133[2]);
                                pthread_mutex_unlock(&gPrintFUtilsLock);
                                if ((v40 & 0x80000000) != 0)
                                  return v40;
                                goto LABEL_783;
                              }
                              v386 = (id *)v419[0];
                              v419[0] += 8;
                              v387 = *v386;
                              v388 = v387;
                              if ((v417 & 0x10) != 0)
                                goto LABEL_894;
                              if (v387)
                              {
                                v389 = (const char *)MEMORY[0x18D78F3F0](v387);
                                if (v389)
                                {
                                  v390 = (unsigned __int8 *)v389;
                                  v391 = strlen(v389);
                                  v40 = PrintFWriteMultiLineText(a1, (uint64_t)&v417, v390, v391);
                                  free(v390);
                                  if ((v40 & 0x80000000) != 0)
                                  {

                                    return v40;
                                  }
                                  v9 = (char *)(v40 + (_DWORD)v9);
LABEL_894:

                                  goto LABEL_784;
                                }
                                LODWORD(v40) = 17;
                                v50 = "<<NULL XPC DESC>>";
                              }
                              else
                              {
                                LODWORD(v40) = 4;
                                v50 = "NULL";
                              }

LABEL_780:
                              v49 = (uint64_t (**)(const char *, uint64_t, _QWORD))a1;
LABEL_781:
                              v252 = PrintFWriteText(v49, (uint64_t)&v417, v50, (int)v40);
                            }
                            else
                            {
                              v384 = v419[0];
                              v419[0] += 8;
                              v385 = *(char **)v384;
                              v419[0] = v384 + 16;
                              if ((v417 & 0x10) != 0)
                                goto LABEL_784;
                              v252 = PrintFWriteXMLEscaped((uint64_t (**)(char *, int64_t, _QWORD))a1, v385, *(_QWORD *)(v384 + 8), a4, a5, a6, a7, a8);
                            }
                          }
                          else
                          {
                            v383 = (uint64_t *)v419[0];
                            v419[0] += 8;
                            a4 = *v383;
                            v419[0] = v383 + 2;
                            if ((v417 & 0x10) != 0)
                              goto LABEL_784;
                            v252 = PrintFWriteTXTRecord((uint64_t)a1, SBYTE3(v417), DWORD2(v417), (unsigned __int8 *)a4, v383[1], a6, a7, a8);
                          }
                        }
                        else
                        {
                          v380 = v419[0];
                          v419[0] += 8;
                          v381 = *(const char **)v380;
                          v419[0] = v380 + 16;
                          a4 = *(_QWORD *)(v380 + 8);
                          v419[0] = v380 + 24;
                          if ((v417 & 0x10) != 0)
                            goto LABEL_784;
                          if (v381)
                            v382 = v381;
                          else
                            v382 = (const char *)&unk_18D51F694;
                          v252 = PrintFWriteTLV8((uint64_t)a1, (uint64_t)&v417, v382, (unsigned __int8 *)a4, *(int *)(v380 + 16));
                        }
                      }
                      else
                      {
                        v375 = v419[0];
                        v419[0] += 8;
                        v376 = *(char **)v375;
                        v419[0] = v375 + 16;
                        if ((v417 & 0x10) != 0)
                          goto LABEL_784;
                        v377 = *(_QWORD *)(v375 + 8);
                        if (v377 == -1)
                          v377 = strlen(v376);
                        v252 = PrintFWriteMultiLineText(a1, (uint64_t)&v417, (unsigned __int8 *)v376, v377);
                      }
                    }
                    else
                    {
                      v370 = v419[0];
                      v419[0] += 8;
                      v371 = *(char **)v370;
                      v419[0] = v370 + 16;
                      if ((v417 & 0x10) != 0)
                        goto LABEL_784;
                      v372 = *(_QWORD *)(v370 + 8);
                      if (v372 == -1)
                        v372 = strlen(v371);
                      v252 = PrintFWriteSingleLineText(a1, (unsigned __int8 *)v371, v372, SBYTE3(v417));
                    }
LABEL_782:
                    v40 = v252;
                    if ((v252 & 0x80000000) != 0)
                      return v40;
                    goto LABEL_783;
                  }
                  v369 = (uint64_t *)v419[0];
                  v419[0] += 8;
                  if ((v417 & 0x10) == 0)
                    v9 = (char *)(PrintFWriteObfuscatedPtr((uint64_t)a1, *v369, v132, a4, a5, a6, a7, a8)
                                + v9);
                }
                else
                {
                  if (BYTE2(v417) == 2 || BYTE2(v417) == 1)
                  {
                    v323 = (uint64_t *)v419[0];
                    v419[0] += 8;
                    a4 = *v323;
                  }
                  else
                  {
                    v365 = (unsigned int *)v419[0];
                    v419[0] += 8;
                    a4 = *v365;
                  }
                  if (BYTE1(v417) == 2)
                  {
                    a4 = a4;
                  }
                  else if (BYTE1(v417) == 1)
                  {
                    a4 = (unsigned __int16)a4;
                  }
                  v366 = (void **)v419[0];
                  v419[0] += 8;
                  if ((v417 & 0x10) == 0)
                  {
                    v367 = *v366;
                    if (v367)
                      v368 = v367;
                    else
                      v368 = &unk_18D51F694;
                    v252 = PrintFWriteFlags((uint64_t)a1, SBYTE3(v417), (uint64_t)v368, a4, a5, a6, a7, a8);
                    goto LABEL_782;
                  }
                }
LABEL_784:
                v11 = 42;
                goto LABEL_785;
              }
              v40 = (uint64_t)v9;
              v11 = 42;
              if ((v417 & 0x10) == 0)
                return v40;
LABEL_785:
              v10 = 0;
              v8 = v12;
              if (v36)
              {
LABEL_786:
                v10 = (char)v12[1];
                v8 = v12 + 1;
              }
              break;
            default:
              if ((char)v22 != 37)
              {
LABEL_81:
                if (((char)v22 - 32) >= 0x5F)
                  v51 = 32;
                else
                  v51 = (char)v22;
                v50 = &__str;
                v52 = SNPrintF((uint64_t)&__str, 300, (uint64_t)"<<UNKNOWN FORMAT CONVERSION CODE '%%%c'>>", a4, a5, a6, a7, a8, v51);
                goto LABEL_85;
              }
              if ((v21 & 0x10) != 0)
                goto LABEL_786;
              v36 = 37;
              __str = 37;
LABEL_372:
              LODWORD(v40) = 1;
              goto LABEL_779;
          }
          break;
      }
      break;
    }
  }
}

uint64_t PrintFCallBackAllocatedString(const void *a1, size_t a2, uint64_t a3)
{
  size_t v4;
  uint64_t v6;
  unint64_t v7;
  size_t v8;
  char *v9;

  v4 = a2;
  v6 = *(_QWORD *)(a3 + 16);
  v7 = v6 + a2;
  if (v6 + a2 <= *(_QWORD *)(a3 + 24))
  {
    v9 = *(char **)(a3 + 8);
  }
  else
  {
    if (v7 >= 0x100)
      v8 = ((_DWORD)v7 + 1023) & 0xFFFFFC00;
    else
      v8 = 256;
    v9 = (char *)malloc_type_realloc(*(void **)(a3 + 8), v8, 0x7F9BF5A7uLL);
    if (!v9)
      return 4294960568;
    *(_QWORD *)(a3 + 8) = v9;
    *(_QWORD *)(a3 + 24) = v8;
    v6 = *(_QWORD *)(a3 + 16);
  }
  memcpy(&v9[v6], a1, v4);
  *(_QWORD *)(a3 + 16) += v4;
  return v4;
}

uint64_t PrintFWriteText(uint64_t (**a1)(const char *, uint64_t, _QWORD), uint64_t a2, const char *a3, uint64_t a4)
{
  const char *v8;
  int v9;
  const char *v10;
  int v11;
  int v12;
  uint64_t v13;
  int v14;
  uint64_t v15;

  v8 = (const char *)(a2 + 25);
  if (*(_BYTE *)(a2 + 25))
    v9 = a4 + 1;
  else
    v9 = a4;
  v10 = (const char *)(a2 + 26);
  if (*(_BYTE *)(a2 + 26))
    v11 = v9 + 1;
  else
    v11 = v9;
  if ((*(_BYTE *)a2 & 1) == 0 && v11 < *(_DWORD *)(a2 + 8))
  {
    v12 = 0;
    while (1)
    {
      v13 = (*a1)(" ", 1, a1);
      if ((v13 & 0x80000000) != 0)
        return v13;
      ++v12;
      v14 = *(_DWORD *)(a2 + 8) - 1;
      *(_DWORD *)(a2 + 8) = v14;
      if (v11 >= v14)
      {
        if (*v8)
          goto LABEL_15;
        goto LABEL_17;
      }
    }
  }
  v12 = 0;
  if (*(_BYTE *)(a2 + 25))
  {
LABEL_15:
    v13 = (*a1)(v8, 1, a1);
    if ((v13 & 0x80000000) != 0)
      return v13;
    ++v12;
  }
LABEL_17:
  v13 = (*a1)(a3, a4, a1);
  if ((v13 & 0x80000000) != 0)
    return v13;
  v15 = (v12 + a4);
  if (!*v10)
    goto LABEL_21;
  v13 = (*a1)(v10, 1, a1);
  if ((v13 & 0x80000000) != 0)
    return v13;
  v15 = (v15 + 1);
LABEL_21:
  if (v11 < *(_DWORD *)(a2 + 8))
  {
    while (1)
    {
      v13 = (*a1)(" ", 1, a1);
      if ((v13 & 0x80000000) != 0)
        break;
      v15 = (v15 + 1);
      if (++v11 >= *(_DWORD *)(a2 + 8))
        return v15;
    }
    return v13;
  }
  return v15;
}

uint64_t PrintFCallBackUserCallBack(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(a3 + 32))(a1, a2, *(_QWORD *)(a3 + 40));
}

uint64_t strnicmpx(unsigned __int8 *a1, uint64_t a2, _BYTE *a3)
{
  uint64_t v4;
  __darwin_ct_rune_t v6;
  uint64_t result;

  if (a2)
  {
    v4 = a2;
    while (1)
    {
      --v4;
      v6 = __tolower(*a1);
      result = __tolower(*a3);
      if (v6 < (int)result)
        return 0xFFFFFFFFLL;
      if (v6 > (int)result)
        return 1;
      if (!(_DWORD)result)
        return result;
      ++a1;
      ++a3;
      if (!v4)
        goto LABEL_8;
    }
  }
  else
  {
LABEL_8:
    if (*a3)
      return 0xFFFFFFFFLL;
    else
      return 0;
  }
}

uint64_t __DataBuffer_PrintFCallBack(char *__s, size_t a2, uint64_t a3)
{
  unsigned int v3;
  uint64_t result;

  v3 = a2;
  LODWORD(result) = DataBuffer_Append(a3, __s, a2);
  if ((_DWORD)result)
    return result;
  else
    return v3;
}

uint64_t DataBuffer_Append(uint64_t a1, char *__s, size_t a3)
{
  size_t v3;
  uint64_t v6;
  void *__dst;

  v3 = a3;
  if (a3 == -1)
    v3 = strlen(__s);
  __dst = 0;
  v6 = DataBuffer_Resize(a1, *(_QWORD *)(a1 + 32) + v3, (unint64_t *)&__dst);
  if (!(_DWORD)v6)
    memcpy(__dst, __s, v3);
  return v6;
}

uint64_t DataBuffer_Resize(uint64_t a1, unint64_t a2, unint64_t *a3)
{
  uint64_t result;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  size_t v10;
  void *v11;
  void *v12;
  size_t v13;
  void *v14;
  unint64_t v15;

  result = *(unsigned int *)(a1 + 52);
  if (!(_DWORD)result)
  {
    v7 = *(_QWORD *)(a1 + 32);
    if (v7 >= a2)
    {
      *(_QWORD *)(a1 + 32) = a2;
      if (a3)
      {
        result = 0;
        v15 = *(_QWORD *)(a1 + 24);
        goto LABEL_24;
      }
      return 0;
    }
    if (*(_QWORD *)(a1 + 40) < a2)
    {
      if (*(_QWORD *)(a1 + 16) < a2)
      {
        result = 4294960545;
      }
      else
      {
        v8 = 4096;
        if (a2 >> 17)
          v9 = ((_DWORD)a2 + 0x1FFFF) & 0xFFFE0000;
        else
          v9 = ((_DWORD)a2 + 0x3FFF) & 0xFFFFC000;
        if (a2 >= 0x1000)
          v8 = v9;
        if (a2 >= 0x100)
          v10 = v8;
        else
          v10 = 256;
        v11 = malloc_type_malloc(v10, 0x9F885888uLL);
        if (v11)
        {
          v12 = v11;
          v13 = *(_QWORD *)(a1 + 32);
          if (v13)
            memcpy(v11, *(const void **)(a1 + 24), v13);
          if (*(_BYTE *)(a1 + 48))
          {
            v14 = *(void **)(a1 + 24);
            if (v14)
              free(v14);
          }
          *(_QWORD *)(a1 + 40) = v10;
          *(_QWORD *)(a1 + 24) = v12;
          *(_BYTE *)(a1 + 48) = 1;
          goto LABEL_20;
        }
        result = 4294960568;
      }
      *(_DWORD *)(a1 + 52) = result;
      return result;
    }
LABEL_20:
    *(_QWORD *)(a1 + 32) = a2;
    if (a3)
    {
      result = 0;
      v15 = *(_QWORD *)(a1 + 24) + v7;
LABEL_24:
      *a3 = v15;
      return result;
    }
    return 0;
  }
  return result;
}

size_t _LogPrintFCallBack(void *__src, size_t __n, uint64_t a3)
{
  size_t v6;

  if (!__n && *(_BYTE *)(a3 + 2072))
  {
    v6 = *(_QWORD *)(a3 + 2064);
    if (!v6)
      goto LABEL_5;
LABEL_4:
    _LogPrintFWrite(a3, (const void *)(a3 + 12), v6, 0);
    v6 = 0;
    *(_QWORD *)(a3 + 2064) = 0;
    goto LABEL_5;
  }
  v6 = *(_QWORD *)(a3 + 2064);
  if (v6 + __n >= 0x801 && v6)
    goto LABEL_4;
LABEL_5:
  if (__n < 0x801)
  {
    if (__n)
    {
      memcpy((void *)(a3 + v6 + 12), __src, __n);
      *(_QWORD *)(a3 + 2064) += __n;
    }
  }
  else
  {
    _LogPrintFWrite(a3, __src, __n, 0);
  }
  return __n;
}

size_t PrintFCallBackFixedString(_BYTE *__src, size_t __n, _QWORD *a3)
{
  size_t v4;
  uint64_t v5;
  size_t v6;

  v4 = __n;
  v5 = a3[2];
  v6 = a3[3] - v5;
  if (v6 >= __n)
  {
    if (!__n)
      goto LABEL_10;
    goto LABEL_9;
  }
  if (v6)
  {
    while ((__src[v6] & 0xC0) == 0x80)
    {
      if (!--v6)
        goto LABEL_5;
    }
    v4 = v6;
LABEL_9:
    memcpy((void *)(a3[1] + v5), __src, v4);
    v5 = a3[2];
    goto LABEL_10;
  }
LABEL_5:
  v4 = 0;
LABEL_10:
  a3[2] = v5 + v4;
  return v4;
}

unint64_t _PrintFObfuscateString(unint64_t __s, uint64_t a2, _BYTE *a3, uint64_t *a4)
{
  unsigned __int8 *v6;
  uint64_t v7;
  uint64_t i;
  uint64_t v9;

  v6 = (unsigned __int8 *)__s;
  if (a2 == -1)
  {
    __s = strlen((const char *)__s);
    v7 = __s;
    if (__s)
      goto LABEL_8;
LABEL_15:
    *a3 = 0;
    if (!a4)
      return __s;
    v9 = 0;
    goto LABEL_17;
  }
  if (!a2)
    goto LABEL_15;
  v7 = 0;
  while (*(_BYTE *)(__s + v7))
  {
    if (a2 == ++v7)
    {
      v7 = a2;
      break;
    }
  }
  if (!v7)
    goto LABEL_15;
LABEL_8:
  if (gObfuscateOnce != -1)
    dispatch_once_f(&gObfuscateOnce, 0, (dispatch_function_t)_PrintFObfuscateInit);
  __s = SipHash(gObfuscateKey, v6, v7);
  *(_WORD *)a3 = 16962;
  for (i = 2; i != 8; ++i)
  {
    a3[i] = aAbcdefghijklmn[__s % 0x34];
    __s >>= 8;
  }
  a3[8] = 0;
  if (a4)
  {
    v9 = 8;
LABEL_17:
    *a4 = v9;
  }
  return __s;
}

uint64_t SipHash(_QWORD *a1, unsigned __int8 *a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unsigned __int8 *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;

  v3 = a1[1];
  v4 = *a1 ^ 0x736F6D6570736575;
  v5 = v3 ^ 0x646F72616E646F6DLL;
  v6 = *a1 ^ 0x6C7967656E657261;
  v7 = v3 ^ 0x7465646279746573;
  if ((a3 & 0xFFFFFFFFFFFFFFF8) != 0)
  {
    v8 = &a2[a3 & 0xFFFFFFFFFFFFFFF8];
    do
    {
      v9 = *(_QWORD *)a2;
      a2 += 8;
      v10 = v9 ^ v7;
      v11 = v5 + v4;
      v12 = v11 ^ __ROR8__(v5, 51);
      v13 = v10 + v6;
      v14 = __ROR8__(v10, 48);
      v15 = (v13 ^ v14) + __ROR8__(v11, 32);
      v16 = v15 ^ __ROR8__(v13 ^ v14, 43);
      v17 = v13 + v12;
      v18 = v17 ^ __ROR8__(v12, 47);
      v19 = v15 + v18;
      v20 = v19 ^ __ROR8__(v18, 51);
      v21 = v16 + __ROR8__(v17, 32);
      v22 = __ROR8__(v16, 48);
      v23 = (v21 ^ v22) + __ROR8__(v19, 32);
      v7 = v23 ^ __ROR8__(v21 ^ v22, 43);
      v24 = v21 + v20;
      v5 = v24 ^ __ROR8__(v20, 47);
      v6 = __ROR8__(v24, 32);
      v4 = v23 ^ v9;
    }
    while (a2 != v8);
    a2 = v8;
  }
  v25 = a3 << 56;
  switch(a3 & 7)
  {
    case 1:
      goto LABEL_12;
    case 2:
      goto LABEL_11;
    case 3:
      goto LABEL_10;
    case 4:
      goto LABEL_9;
    case 5:
      goto LABEL_8;
    case 6:
      goto LABEL_7;
    case 7:
      v25 |= (unint64_t)a2[6] << 48;
LABEL_7:
      v25 |= (unint64_t)a2[5] << 40;
LABEL_8:
      v25 |= (unint64_t)a2[4] << 32;
LABEL_9:
      v25 |= (unint64_t)a2[3] << 24;
LABEL_10:
      v25 |= (unint64_t)a2[2] << 16;
LABEL_11:
      v25 |= (unint64_t)a2[1] << 8;
LABEL_12:
      v25 |= *a2;
      break;
    default:
      break;
  }
  v26 = v25 ^ v7;
  v27 = v5 + v4;
  v28 = v27 ^ __ROR8__(v5, 51);
  v29 = v26 + v6;
  v30 = __ROR8__(v26, 48);
  v31 = (v29 ^ v30) + __ROR8__(v27, 32);
  v32 = v31 ^ __ROR8__(v29 ^ v30, 43);
  v33 = v29 + v28;
  v34 = v33 ^ __ROR8__(v28, 47);
  v35 = v31 + v34;
  v36 = v35 ^ __ROR8__(v34, 51);
  v37 = v32 + __ROR8__(v33, 32);
  v38 = __ROR8__(v32, 48);
  v39 = (v37 ^ v38) + __ROR8__(v35, 32);
  v40 = v39 ^ __ROR8__(v37 ^ v38, 43);
  v41 = v37 + v36;
  v42 = v41 ^ __ROR8__(v36, 47);
  v43 = (v39 ^ v25) + v42;
  v44 = v43 ^ __ROR8__(v42, 51);
  v45 = (__ROR8__(v41, 32) ^ 0xFFLL) + v40;
  v46 = __ROR8__(v40, 48);
  v47 = __ROR8__(v43, 32) + (v45 ^ v46);
  v48 = v47 ^ __ROR8__(v45 ^ v46, 43);
  v49 = v44 + v45;
  v50 = __ROR8__(v49, 32);
  v51 = v49 ^ __ROR8__(v44, 47);
  v52 = v51 + v47;
  v53 = (v51 + v47) ^ __ROR8__(v51, 51);
  v54 = v50 + v48;
  v55 = (v50 + v48) ^ __ROR8__(v48, 48);
  v56 = __ROR8__(v52, 32) + v55;
  v57 = v56 ^ __ROR8__(v55, 43);
  v58 = v53 + v54;
  v59 = __ROR8__(v53, 47);
  v60 = (v58 ^ v59) + v56;
  v61 = v60 ^ __ROR8__(v58 ^ v59, 51);
  v62 = __ROR8__(v58, 32) + v57;
  v63 = v62 ^ __ROR8__(v57, 48);
  v64 = __ROR8__(v60, 32) + v63;
  v65 = v64 ^ __ROR8__(v63, 43);
  v66 = v61 + v62;
  v67 = v66 ^ __ROR8__(v61, 47);
  v68 = __ROR8__(v66, 32) + v65;
  v69 = (v67 + v64) ^ __ROR8__(v67, 51);
  return __ROR8__(v68 ^ __ROR8__(v65, 48), 43) ^ __ROR8__(v69, 47) ^ __ROR8__(v69 + v68, 32) ^ (v69 + v68);
}

uint64_t SNPrintF(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  return VSNPrintF(a1, a2, a3, (uint64_t)&a9);
}

uint64_t VSNPrintF(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t result;
  size_t (*v7)(_BYTE *, size_t, _QWORD *);
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v11 = 0;
  v12 = 0;
  v7 = PrintFCallBackFixedString;
  v8 = a1;
  v5 = a2 - 1;
  if (!a2)
    v5 = 0;
  v9 = 0;
  v10 = v5;
  result = PrintFCoreVAList(&v7, a3, a4);
  if (a2)
    *(_BYTE *)(v8 + v9) = 0;
  return result;
}

uint64_t PrintFWriteHexByteStream(uint64_t (**a1)(_BYTE *, uint64_t, _QWORD), int a2, unsigned __int8 *a3, uint64_t a4)
{
  const char *v4;
  unsigned __int8 *v5;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  _BYTE *v11;
  unsigned int v12;
  int v13;
  _BYTE v15[64];
  uint64_t v16;

  v16 = *MEMORY[0x1E0C80C00];
  if (a2)
    v4 = "0123456789ABCDEF";
  else
    v4 = "0123456789abcdef";
  if (a4 < 1)
    return 0;
  v5 = a3;
  v7 = 0;
  v8 = 0;
  v9 = (unint64_t)&a3[a4];
  do
  {
    if (v7 == 64)
    {
      v10 = (*a1)(v15, 64, a1);
      if ((v10 & 0x80000000) != 0)
        return v10;
      v7 = 0;
      v8 = (v8 + 64);
    }
    v11 = &v15[v7];
    v12 = *v5++;
    *v11 = v4[(unint64_t)v12 >> 4];
    v7 += 2;
    v11[1] = v4[v12 & 0xF];
  }
  while ((unint64_t)v5 < v9);
  if (v7)
  {
    v13 = (*a1)(v15, v7, a1);
    if (v13 >= 0)
      return (v8 + v7);
    else
      return v13;
  }
  return v8;
}

uint64_t PrintFWriteHexOneLine(uint64_t (**a1)(const char *, uint64_t, _QWORD), uint64_t a2, unsigned __int8 *a3, unint64_t a4)
{
  int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  _BYTE *v14;
  int v15;
  uint64_t v16;
  int v17;
  char v18;
  int v19;
  int v20;
  char v22;
  _BYTE v23[3];

  if (!a4)
    return 0;
  if (*(_BYTE *)(a2 + 3) == 2)
  {
    v8 = 1;
    v9 = (*a1)("|", 1, a1);
    if ((v9 & 0x80000000) == 0)
    {
LABEL_14:
      if (a4 <= 1)
        v16 = 1;
      else
        v16 = a4;
      v17 = v8 + v16;
      while (1)
      {
        v19 = *a3++;
        v18 = v19;
        if ((v19 - 127) < 0xFFFFFFA1)
          v18 = 94;
        v22 = v18;
        v9 = (*a1)(&v22, 1, a1);
        if ((v9 & 0x80000000) != 0)
          break;
        if (!--v16)
        {
          v20 = (*a1)("|", 1, a1);
          if (v20 >= 0)
            return (v17 + 1);
          else
            return v20;
        }
      }
    }
  }
  else
  {
    v10 = 0;
    LODWORD(v11) = 0;
    while (1)
    {
      if (v10)
      {
        v23[0] = 32;
        v12 = 1;
      }
      else
      {
        v12 = 0;
      }
      v13 = a3[v10];
      v14 = &v23[v12];
      *v14 = a0123456789abcd[v13 >> 4];
      v15 = v12 | 2;
      v14[1] = a0123456789abcd[v13 & 0xF];
      v9 = (*a1)(v23, v12 | 2, a1);
      if ((v9 & 0x80000000) != 0)
        break;
      v11 = (v11 + v15);
      if (a4 == ++v10)
      {
        if (*(char *)(a2 + 3) < 1)
          return v11;
        v9 = (*a1)(" |", 2, a1);
        if ((v9 & 0x80000000) == 0)
        {
          v8 = v11 + 2;
          goto LABEL_14;
        }
        return v9;
      }
    }
  }
  return v9;
}

const char *GetProcessNameByPID(int a1, char *a2, size_t a3)
{
  const char *v6;
  size_t v8;
  _OWORD buffer[3];
  __int128 v10;
  _OWORD v11[4];
  uint64_t v12;
  _BYTE v13[243];
  _BYTE v14[5];
  int v15[2];
  int v16;
  int v17;
  uint64_t v18;

  v18 = *MEMORY[0x1E0C80C00];
  if (!a3)
    return "";
  v12 = 0;
  memset(v11, 0, sizeof(v11));
  v10 = 0u;
  memset(buffer, 0, sizeof(buffer));
  if (proc_pidinfo(a1, 3, 0, buffer, 136) == 136)
  {
    if (LOBYTE(v11[0]))
      v6 = (const char *)v11;
    else
      v6 = (const char *)&v10;
    goto LABEL_12;
  }
  *(_QWORD *)v15 = 0xE00000001;
  v16 = 1;
  v17 = a1;
  bzero(v13, 0x288uLL);
  v8 = 648;
  if (!sysctl(v15, 4u, v13, &v8, 0, 0) || *__error() && !*__error())
  {
    v6 = v14;
LABEL_12:
    strlcpy(a2, v6, a3);
    return a2;
  }
  *a2 = 0;
  return a2;
}

uint64_t PrintFWriteObfuscatedPtr(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v10;
  int v11;
  uint64_t v13;

  v13 = a2;
  if (gObfuscateOnce != -1)
  {
    dispatch_once_f(&gObfuscateOnce, 0, (dispatch_function_t)_PrintFObfuscateInit);
    if (a2)
      goto LABEL_3;
LABEL_5:
    v10 = 0;
    goto LABEL_6;
  }
  if (!a2)
    goto LABEL_5;
LABEL_3:
  v10 = (unsigned __int16)SipHash(gObfuscateKey, (unsigned __int8 *)&v13, 8);
LABEL_6:
  v11 = PrintFCore(a1, (uint64_t)"0x%04X", a3, a4, a5, a6, a7, a8, v10);
  return v11 & ~(v11 >> 31);
}

char *IPv6AddressToCString(_BYTE *a1, unsigned int a2, int a3, unsigned int a4, char *a5, char a6)
{
  unsigned int v8;
  unsigned int v9;
  char *v10;
  _BOOL4 v11;
  int v12;
  unint64_t v13;
  _BYTE *v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  char v18;
  uint64_t v19;
  unsigned int v20;
  uint64_t v21;
  int v22;
  _BYTE *v23;
  uint64_t i;
  uint64_t v25;
  int v26;
  int v27;
  int v28;
  char v29;
  unsigned __int8 *v30;
  int v31;
  BOOL v32;
  char *v33;
  char v34;
  unsigned __int8 *v35;
  int v36;
  char *v37;
  char v38;
  _BYTE *v39;
  char v40;
  char *v41;
  char v42;
  uint64_t j;
  unsigned int v45;
  char *v46;
  char v47;
  _BOOL4 v48;
  _BYTE v49[32];
  char v50[96];
  _BYTE v51[40];
  uint64_t v52;

  v8 = a3;
  v9 = a2;
  v52 = *MEMORY[0x1E0C80C00];
  if (a3 > 0 || (v10 = a5, a3 == -2))
  {
    *a5 = 91;
    v10 = a5 + 1;
  }
  if (*a1 || a1[1] || a1[2] || a1[3])
    goto LABEL_28;
  v11 = !a1[4]
     && !a1[5]
     && !a1[6]
     && !a1[7]
     && !a1[8]
     && !a1[9]
     && a1[10] == 255
     && a1[11] == 255;
  if (a1[4] || a1[5] || a1[6] || a1[7] || a1[8] || a1[9] || a1[10] || a1[11])
  {
    v12 = 0;
    goto LABEL_25;
  }
  if (a1[12] || a1[13] || a1[14])
  {
    v48 = 0;
LABEL_101:
    v12 = !v48;
    goto LABEL_25;
  }
  v12 = a1[15];
  if (a1[15])
  {
    v48 = v12 == 1;
    goto LABEL_101;
  }
LABEL_25:
  if ((v11 | v12) != 1)
  {
LABEL_28:
    v13 = 0;
    v14 = v51;
    while (1)
    {
      v15 = v13 | 1;
      v16 = a1[v13];
      if (v16 >= 0x10)
      {
        *v14 = a0123456789abcd[v16 >> 4];
        LODWORD(v16) = v16 & 0xF;
        v17 = 1;
      }
      else
      {
        if (!a1[v13])
        {
          v19 = 0;
          v21 = 0;
          v13 += 2;
          v20 = a1[v15];
          if (v20 < 0x10)
            goto LABEL_35;
          goto LABEL_34;
        }
        v17 = 0;
      }
      v18 = a0123456789abcd[v16];
      v19 = v17 + 1;
      v14[v17] = v18;
      v13 += 2;
      v20 = a1[v15];
LABEL_34:
      v21 = v19 + 1;
      v14[v19] = a0123456789abcd[(unint64_t)v20 >> 4];
LABEL_35:
      *(_WORD *)&v14[v21] = a0123456789abcd[v20 & 0xF];
      v14 += 5;
      if (v13 >= 0x10)
      {
        v22 = 0;
        v23 = a1 + 15;
        for (i = 28; i != -4; i -= 4)
        {
          if (*(v23 - 1))
          {
            v22 = 0;
          }
          else if (*v23)
          {
            v22 = 0;
          }
          else
          {
            ++v22;
          }
          *(_DWORD *)&v50[i + 64] = v22;
          v23 -= 2;
        }
        v25 = 0;
        v26 = 1;
        v27 = -1;
        do
        {
          if (*(_DWORD *)&v50[4 * v25 + 64] > v26)
          {
            v26 = *(_DWORD *)&v50[4 * v25 + 64];
            v27 = v25;
          }
          ++v25;
        }
        while (v25 != 8);
        v28 = 0;
        while (1)
        {
          if (v28 == v27)
          {
            if (!v27)
              *v10++ = 58;
            *v10 = 58;
            v28 = v27 - 1 + *(_DWORD *)&v50[4 * v27 + 64];
          }
          else
          {
            v29 = v51[5 * v28];
            if (v29)
            {
              v30 = &v51[5 * v28 + 1];
              do
              {
                *v10++ = v29;
                v31 = *v30++;
                v29 = v31;
              }
              while (v31);
            }
            if (v28 == 7)
              goto LABEL_60;
            *v10 = 58;
          }
          ++v10;
          v32 = v28++ < 7;
          if (!v32)
            goto LABEL_60;
        }
      }
    }
  }
  *(_WORD *)v10 = 14906;
  if (v11)
  {
    *(_DWORD *)(v10 + 2) = 1717986918;
    v10[6] = 58;
    v10 += 7;
  }
  else
  {
    v10 += 2;
  }
  for (j = 12; ; ++j)
  {
    v45 = a1[j];
    v46 = v50;
    do
    {
      *v46++ = (v45 % 0xA) | 0x30;
      v32 = v45 > 9;
      v45 /= 0xAu;
    }
    while (v32);
    while (v46 > v50)
    {
      v47 = *--v46;
      *v10++ = v47;
    }
    if (j == 15)
      break;
    *v10++ = 46;
  }
LABEL_60:
  if (a2)
  {
    *v10 = 37;
    if ((a6 & 1) != 0)
    {
      *(_WORD *)(v10 + 1) = 13618;
      v10 += 3;
    }
    else
    {
      ++v10;
    }
    v33 = if_indextoname(a2, v50);
    if (v33 && (v34 = *v33) != 0)
    {
      v35 = (unsigned __int8 *)(v33 + 1);
      do
      {
        *v10++ = v34;
        v36 = *v35++;
        v34 = v36;
      }
      while (v36);
    }
    else
    {
      v39 = v49;
      do
      {
        *v39++ = (v9 % 0xA) | 0x30;
        v32 = v9 > 9;
        v9 /= 0xAu;
      }
      while (v32);
      while (v39 > v49)
      {
        v40 = *--v39;
        *v10++ = v40;
      }
    }
  }
  if ((int)v8 < 1)
  {
    if (v8 == -2)
      *v10++ = 93;
  }
  else
  {
    *(_WORD *)v10 = 14941;
    v37 = v50;
    do
    {
      *v37++ = (v8 % 0xA) | 0x30;
      v32 = v8 > 9;
      v8 /= 0xAu;
    }
    while (v32);
    v10 += 2;
    while (v37 > v50)
    {
      v38 = *--v37;
      *v10++ = v38;
    }
  }
  if ((a4 & 0x80000000) == 0)
  {
    *v10 = 47;
    v41 = v50;
    do
    {
      *v41++ = (a4 % 0xA) | 0x30;
      v32 = a4 > 9;
      a4 /= 0xAu;
    }
    while (v32);
    ++v10;
    while (v41 > v50)
    {
      v42 = *--v41;
      *v10++ = v42;
    }
  }
  *v10 = 0;
  return a5;
}

void DataBuffer_Free(uint64_t a1)
{
  void *v2;
  uint64_t v3;

  if (*(_BYTE *)(a1 + 48))
  {
    v2 = *(void **)(a1 + 24);
    if (v2)
      free(v2);
  }
  v3 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)a1;
  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 40) = v3;
  *(_BYTE *)(a1 + 48) = 0;
  *(_DWORD *)(a1 + 52) = 0;
}

uint64_t DataBuffer_Detach(uint64_t a1, _QWORD *a2, size_t *a3)
{
  size_t v6;
  void *v7;
  size_t v8;
  void *v9;
  uint64_t result;
  uint64_t v11;

  v6 = *(_QWORD *)(a1 + 32);
  if (*(_BYTE *)(a1 + 48))
  {
    v7 = *(void **)(a1 + 24);
LABEL_9:
    result = 0;
    v11 = *(_QWORD *)(a1 + 8);
    *(_QWORD *)(a1 + 24) = *(_QWORD *)a1;
    *(_QWORD *)(a1 + 32) = 0;
    *(_QWORD *)(a1 + 40) = v11;
    *(_BYTE *)(a1 + 48) = 0;
    *(_DWORD *)(a1 + 52) = 0;
    *a2 = v7;
    *a3 = v6;
    return result;
  }
  if (v6 <= 1)
    v8 = 1;
  else
    v8 = *(_QWORD *)(a1 + 32);
  v9 = malloc_type_malloc(v8, 0xDEADC368uLL);
  if (v9)
  {
    v7 = v9;
    if (v6)
      memcpy(v9, *(const void **)(a1 + 24), v6);
    goto LABEL_9;
  }
  return 4294960568;
}

uint64_t CUXPCDecodeNSString(void *a1, const char *a2, void **a3, _QWORD *a4)
{
  id v7;
  const char *string;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  v7 = a1;
  string = xpc_dictionary_get_string(v7, a2);
  if (string)
  {
    v9 = objc_msgSend(objc_alloc(MEMORY[0x1E0CB3940]), "initWithUTF8String:", string);
    v10 = *a3;
    *a3 = (void *)v9;
LABEL_5:
    v17 = 1;
    goto LABEL_6;
  }
  xpc_dictionary_get_value(v7, a2);
  v11 = objc_claimAutoreleasedReturnValue();
  v10 = (void *)v11;
  if (!v11 || MEMORY[0x18D78F504](v11) == MEMORY[0x1E0C81390])
    goto LABEL_5;
  if (a4)
  {
    NSErrorF_safe((void *)*MEMORY[0x1E0CB2F90], 4294960540, (uint64_t)"XPC non-string type: '%s'", v12, v13, v14, v15, v16, (uint64_t)a2);
    v17 = 0;
    *a4 = (id)objc_claimAutoreleasedReturnValue();
  }
  else
  {
    v17 = 0;
  }
LABEL_6:

  return v17;
}

uint64_t CUXPCDecodeSInt64RangedEx(void *a1, const char *a2, int64_t a3, int64_t a4, int64_t *a5, _QWORD *a6)
{
  uint64_t v11;
  void *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  int64_t value;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;

  xpc_dictionary_get_value(a1, a2);
  v11 = objc_claimAutoreleasedReturnValue();
  v12 = (void *)v11;
  if (!v11)
  {
    v19 = 2;
    goto LABEL_14;
  }
  v13 = MEMORY[0x18D78F504](v11);
  if (v13 == MEMORY[0x1E0C81328])
  {
    value = xpc_int64_get_value(v12);
    goto LABEL_11;
  }
  if (v13 == MEMORY[0x1E0C81398])
  {
    value = xpc_uint64_get_value(v12);
LABEL_11:
    if (value >= a3 && value <= a4)
    {
      *a5 = value;
      v19 = 6;
      goto LABEL_14;
    }
    if (!a6)
      goto LABEL_7;
    NSErrorF_safe((void *)*MEMORY[0x1E0CB2F90], 4294960586, (uint64_t)"XPC out-of-range: '%s', %lld vs min %lld, max %lld", v21, v22, v23, v24, v25, (uint64_t)a2);
    goto LABEL_6;
  }
  if (a6)
  {
    NSErrorF_safe((void *)*MEMORY[0x1E0CB2F90], 4294960540, (uint64_t)"XPC non-int64 type: '%s'", v14, v15, v16, v17, v18, (uint64_t)a2);
LABEL_6:
    *a6 = (id)objc_claimAutoreleasedReturnValue();
  }
LABEL_7:
  v19 = 5;
LABEL_14:

  return v19;
}

uint64_t CUXPCDecodeNSData(void *a1, const char *a2, void **a3, _QWORD *a4)
{
  id v7;
  const void *data;
  const void *v9;
  id v10;
  uint64_t v11;
  void *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  void *v20;
  uint64_t v21;
  size_t length;

  v7 = a1;
  length = 0;
  data = xpc_dictionary_get_data(v7, a2, &length);
  if (data)
  {
    v9 = data;
    v10 = objc_alloc(MEMORY[0x1E0C99D50]);
    v11 = objc_msgSend(v10, "initWithBytes:length:", v9, length);
    v12 = *a3;
    *a3 = (void *)v11;
LABEL_6:
    v21 = 1;
    goto LABEL_7;
  }
  xpc_dictionary_get_value(v7, a2);
  v13 = objc_claimAutoreleasedReturnValue();
  v12 = (void *)v13;
  if (!v13)
    goto LABEL_6;
  if (MEMORY[0x18D78F504](v13) == MEMORY[0x1E0C812E8])
  {
    objc_msgSend(MEMORY[0x1E0C99D50], "data");
    v19 = objc_claimAutoreleasedReturnValue();
    v20 = *a3;
    *a3 = (void *)v19;

    goto LABEL_6;
  }
  if (a4)
  {
    NSErrorF_safe((void *)*MEMORY[0x1E0CB2F90], 4294960540, (uint64_t)"XPC non-data type: '%s'", v14, v15, v16, v17, v18, (uint64_t)a2);
    v21 = 0;
    *a4 = (id)objc_claimAutoreleasedReturnValue();
  }
  else
  {
    v21 = 0;
  }
LABEL_7:

  return v21;
}

uint64_t CUXPCDecodeNSDataOfLength(void *a1, const char *a2, uint64_t a3, void **a4, _QWORD *a5)
{
  id v9;
  const void *data;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  const void *v16;
  id v17;
  uint64_t v18;
  void *v19;
  uint64_t v20;
  void *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  void *v28;
  uint64_t v29;
  size_t length;

  v9 = a1;
  length = 0;
  data = xpc_dictionary_get_data(v9, a2, &length);
  if (!data)
  {
    xpc_dictionary_get_value(v9, a2);
    v20 = objc_claimAutoreleasedReturnValue();
    v21 = (void *)v20;
    if (!v20)
    {
LABEL_8:

      goto LABEL_9;
    }
    if (MEMORY[0x18D78F504](v20) == MEMORY[0x1E0C812E8])
    {
      if (!a3)
      {
        objc_msgSend(MEMORY[0x1E0C99D50], "data");
        v27 = objc_claimAutoreleasedReturnValue();
        v28 = *a4;
        *a4 = (void *)v27;

        goto LABEL_8;
      }
      if (a5)
      {
        NSErrorF_safe((void *)*MEMORY[0x1E0CB2F90], 4294960553, (uint64_t)"XPC bad size: '%s', 0 vs %zu", v22, v23, v24, v25, v26, (uint64_t)a2);
        goto LABEL_17;
      }
    }
    else if (a5)
    {
      NSErrorF_safe((void *)*MEMORY[0x1E0CB2F90], 4294960540, (uint64_t)"XPC non-data type: '%s'", v22, v23, v24, v25, v26, (uint64_t)a2);
LABEL_17:
      *a5 = (id)objc_claimAutoreleasedReturnValue();
    }

    goto LABEL_19;
  }
  if (length != a3)
  {
    if (a5)
    {
      NSErrorF_safe((void *)*MEMORY[0x1E0CB2F90], 4294960553, (uint64_t)"XPC bad size: '%s', %zu vs %zu", v11, v12, v13, v14, v15, (uint64_t)a2);
      v29 = 0;
      *a5 = (id)objc_claimAutoreleasedReturnValue();
      goto LABEL_10;
    }
LABEL_19:
    v29 = 0;
    goto LABEL_10;
  }
  v16 = data;
  v17 = objc_alloc(MEMORY[0x1E0C99D50]);
  v18 = objc_msgSend(v17, "initWithBytes:length:", v16, length);
  v19 = *a4;
  *a4 = (void *)v18;

LABEL_9:
  v29 = 1;
LABEL_10:

  return v29;
}

CFMutableDataRef OPACKEncoderCreateDataMutable(const __CFString *a1, char a2, int *a3)
{
  CFMutableDataRef Mutable;
  int v7;

  Mutable = CFDataCreateMutable(0, 0);
  if (Mutable)
  {
    v7 = OPACKEncodeObject(a1, a2, (uint64_t)_OPACKEncoderAppendCallback, (uint64_t)Mutable);
    if (v7)
    {
      CFRelease(Mutable);
      Mutable = 0;
    }
  }
  else
  {
    v7 = -6728;
  }
  if (a3)
    *a3 = v7;
  return Mutable;
}

uint64_t OPACKEncodeObject(const __CFString *a1, char a2, uint64_t a3, uint64_t a4)
{
  __int128 v6;
  uint64_t v7;
  CFDictionaryKeyCallBacks v9;
  _QWORD v10[2];
  CFTypeRef cf;
  uint64_t v12;

  v10[0] = a3;
  v10[1] = a4;
  cf = 0;
  v12 = 0;
  if (gOPACKInitalizeOnce == -1)
  {
    if ((a2 & 2) != 0)
      goto LABEL_4;
  }
  else
  {
    dispatch_once_f(&gOPACKInitalizeOnce, 0, (dispatch_function_t)_OPACKInitializeOnce);
    if ((a2 & 2) != 0)
      goto LABEL_4;
  }
  v6 = *(_OWORD *)(MEMORY[0x1E0C9B390] + 32);
  *(_OWORD *)&v9.release = *(_OWORD *)(MEMORY[0x1E0C9B390] + 16);
  *(_OWORD *)&v9.equal = v6;
  *(_OWORD *)&v9.version = *MEMORY[0x1E0C9B390];
  v9.equal = (CFDictionaryEqualCallBack)_OPACKObjectsExactlyEqual;
  cf = CFDictionaryCreateMutable(0, 0, &v9, 0);
  if (!cf)
    return 4294960568;
LABEL_4:
  v7 = _OPACKEncodeObject((uint64_t)v10, a1);
  if (cf)
    CFRelease(cf);
  return v7;
}

id CUDescriptionWithLevel(void *a1, uint64_t a2)
{
  id v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;

  v3 = a1;
  if ((objc_opt_respondsToSelector() & 1) == 0)
  {
    if (a2 > 0x14u)
    {
      if (a2 >= 0x32u && (objc_opt_respondsToSelector() & 1) != 0)
      {
        objc_msgSend(v3, "shortDescription");
        v11 = objc_claimAutoreleasedReturnValue();
        goto LABEL_10;
      }
    }
    else if ((objc_opt_respondsToSelector() & 1) != 0)
    {
      objc_msgSend(v3, "detailedDescription");
      v11 = objc_claimAutoreleasedReturnValue();
      goto LABEL_10;
    }
    NSPrintF((uint64_t)"%@", v4, v5, v6, v7, v8, v9, v10, (uint64_t)v3);
    v11 = objc_claimAutoreleasedReturnValue();
    goto LABEL_10;
  }
  objc_msgSend(v3, "descriptionWithLevel:", a2);
  v11 = objc_claimAutoreleasedReturnValue();
LABEL_10:
  v12 = (void *)v11;

  return v12;
}

void sub_18D412EB8(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void NSDecodeNSDictionaryOfClassesIfPresent(void *a1, void *a2, uint64_t a3, uint64_t a4, void **a5)
{
  id v8;
  id v9;
  void *v10;
  void *v11;
  char isKindOfClass;
  _QWORD *v13;
  void *v14;
  objc_class *v15;
  void *v16;
  id v17;
  void *v18;
  id v19;
  _QWORD v21[4];
  id v22;
  uint64_t *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t *v27;
  uint64_t v28;
  char v29;

  v8 = a1;
  v9 = a2;
  v26 = 0;
  v27 = &v26;
  v28 = 0x2020000000;
  v29 = 0;
  if ((objc_msgSend(v8, "containsValueForKey:", v9) & 1) != 0)
  {
    objc_msgSend(MEMORY[0x1E0C99E60], "setWithObjects:", objc_opt_class(), a3, a4, 0);
    v10 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v8, "decodeObjectOfClasses:forKey:", v10, v9);
    v11 = (void *)objc_claimAutoreleasedReturnValue();
    objc_opt_class();
    isKindOfClass = objc_opt_isKindOfClass();
    v13 = (_QWORD *)MEMORY[0x1E0C99778];
    if ((isKindOfClass & 1) == 0)
    {
      v14 = (void *)MEMORY[0x1E0C99DA0];
      v15 = (objc_class *)objc_opt_class();
      NSStringFromClass(v15);
      v16 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v14, "raise:format:", *MEMORY[0x1E0C99778], CFSTR("bad dictionary type for key %@, %@"), v9, v16);

      v13 = (_QWORD *)MEMORY[0x1E0C99778];
    }
    v21[0] = MEMORY[0x1E0C809B0];
    v21[1] = 3221225472;
    v21[2] = __NSDecodeNSDictionaryOfClassesIfPresent_block_invoke;
    v21[3] = &unk_1E25DEA08;
    v24 = a3;
    v17 = v9;
    v22 = v17;
    v23 = &v26;
    v25 = a4;
    objc_msgSend(v11, "enumerateKeysAndObjectsUsingBlock:", v21);
    if (*((_BYTE *)v27 + 24))
      objc_msgSend(MEMORY[0x1E0C99DA0], "raise:format:", *v13, CFSTR("bad element type for key %@"), v17);
    v18 = *a5;
    *a5 = v11;
    v19 = v11;

  }
  _Block_object_dispose(&v26, 8);

}

void sub_18D4130F8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  void *v13;
  void *v14;
  void *v15;
  void *v16;
  void *v17;
  va_list va;

  va_start(va, a13);

  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void NSDecodeStandardContainerIfPresent(void *a1, void *a2, uint64_t a3, void **a4)
{
  id v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void *v13;
  void *v14;
  void *v15;
  id v16;
  uint64_t v17;
  void *v18;
  id v19;

  v19 = a1;
  v6 = a2;
  if ((objc_msgSend(v19, "containsValueForKey:", v6) & 1) != 0)
  {
    v18 = (void *)MEMORY[0x1E0C99E60];
    v17 = objc_opt_class();
    v7 = objc_opt_class();
    v8 = objc_opt_class();
    v9 = objc_opt_class();
    v10 = objc_opt_class();
    v11 = objc_opt_class();
    v12 = objc_opt_class();
    objc_msgSend(v18, "setWithObjects:", v17, v7, v8, v9, v10, v11, v12, objc_opt_class(), 0);
    v13 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v19, "decodeObjectOfClasses:forKey:", v13, v6);
    v14 = (void *)objc_claimAutoreleasedReturnValue();
    if ((objc_opt_isKindOfClass() & 1) == 0)
      objc_msgSend(MEMORY[0x1E0C99DA0], "raise:format:", *MEMORY[0x1E0C99778], CFSTR("bad type for key %@ : %@"), v6, v14);
    v15 = *a4;
    *a4 = v14;
    v16 = v14;

  }
}

void sub_18D413330(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, id a20)
{
  void *v20;
  void *v21;
  void *v22;

  _Unwind_Resume(a1);
}

void NSDecodeNSArrayOfClassIfPresent(void *a1, void *a2, uint64_t a3, void **a4)
{
  id v6;
  id v7;
  uint64_t v8;
  void *v9;
  char isKindOfClass;
  uint64_t *v11;
  void *v12;
  objc_class *v13;
  void *v14;
  id v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t i;
  uint64_t v20;
  void *v21;
  id v22;
  void *v23;
  void *v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  _BYTE v30[128];
  uint64_t v31;

  v31 = *MEMORY[0x1E0C80C00];
  v6 = a1;
  v7 = a2;
  v25 = v6;
  if ((objc_msgSend(v6, "containsValueForKey:", v7) & 1) != 0)
  {
    objc_msgSend(MEMORY[0x1E0C99E60], "setWithObjects:", objc_opt_class(), a3, 0);
    v8 = objc_claimAutoreleasedReturnValue();
    objc_msgSend(v25, "decodeObjectOfClasses:forKey:", v8, v7);
    v9 = (void *)objc_claimAutoreleasedReturnValue();
    objc_opt_class();
    isKindOfClass = objc_opt_isKindOfClass();
    v23 = (void *)v8;
    v11 = (uint64_t *)MEMORY[0x1E0C99778];
    if ((isKindOfClass & 1) == 0)
    {
      v12 = (void *)MEMORY[0x1E0C99DA0];
      v13 = (objc_class *)objc_opt_class();
      NSStringFromClass(v13);
      v14 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v12, "raise:format:", *v11, CFSTR("bad array type for key %@, class %@"), v7, v14);

    }
    v28 = 0u;
    v29 = 0u;
    v26 = 0u;
    v27 = 0u;
    v15 = v9;
    v16 = objc_msgSend(v15, "countByEnumeratingWithState:objects:count:", &v26, v30, 16);
    if (v16)
    {
      v17 = *(_QWORD *)v27;
      v18 = *v11;
      do
      {
        for (i = 0; i != v16; ++i)
        {
          if (*(_QWORD *)v27 != v17)
            objc_enumerationMutation(v15);
          v20 = *(_QWORD *)(*((_QWORD *)&v26 + 1) + 8 * i);
          if ((objc_opt_isKindOfClass() & 1) == 0)
            objc_msgSend(MEMORY[0x1E0C99DA0], "raise:format:", v18, CFSTR("bad array element type for key %@ : %@"), v7, v20);
        }
        v16 = objc_msgSend(v15, "countByEnumeratingWithState:objects:count:", &v26, v30, 16);
      }
      while (v16);
    }

    v21 = *a4;
    *a4 = v15;
    v22 = v15;

  }
}

void sub_18D4135B4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, void *a14)
{
  void *v14;
  void *v15;
  void *v16;

  _Unwind_Resume(a1);
}

uint64_t NSDecodeSInt64RangedIfPresent(void *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t *a5)
{
  id v9;
  id v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  v9 = a1;
  v10 = a2;
  v11 = objc_msgSend(v9, "containsValueForKey:", v10);
  if ((v11 & 1) != 0)
  {
    v12 = objc_msgSend(v9, "decodeInt64ForKey:", v10);
    v13 = v12;
    if (v12 < a3 || v12 > a4)
      objc_msgSend(MEMORY[0x1E0C99DA0], "raise:format:", *MEMORY[0x1E0C99778], CFSTR("Key '%@', value (%lld) out-of-range (%lld - %lld)"), v10, v12, a3, a4);
    *a5 = v13;
  }

  return v11;
}

void sub_18D4136CC(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void NSDecodeObjectIfPresent(void *a1, void *a2, uint64_t a3, void **a4)
{
  id v7;
  void *v8;
  void *v9;
  id v10;
  id v11;

  v11 = a1;
  v7 = a2;
  if ((objc_msgSend(v11, "containsValueForKey:", v7) & 1) != 0)
  {
    objc_msgSend(v11, "decodeObjectOfClass:forKey:", a3, v7);
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    if ((objc_opt_isKindOfClass() & 1) == 0)
      objc_msgSend(MEMORY[0x1E0C99DA0], "raise:format:", *MEMORY[0x1E0C99778], CFSTR("bad type for key %@"), v7);
    v9 = *a4;
    *a4 = v8;
    v10 = v8;

  }
}

void sub_18D4137B4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;
  void *v11;

  _Unwind_Resume(a1);
}

void _BonjourBrowser_Start(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9;
  void *v10;
  void *v11;
  void *v12;
  uint64_t v13;

  v9 = *a1;
  v10 = *(void **)(*a1 + 128);
  if (v10)
    free(v10);
  *(_QWORD *)(v9 + 128) = a1[1];
  v11 = *(void **)(v9 + 136);
  if (v11)
    free(v11);
  *(_QWORD *)(v9 + 136) = a1[2];
  v12 = *(void **)(v9 + 144);
  if (v12)
    free(v12);
  v13 = a1[4];
  *(_QWORD *)(v9 + 144) = a1[3];
  *(_QWORD *)(v9 + 152) = v13;
  if (!*(_BYTE *)(v9 + 96))
  {
    CFRetain((CFTypeRef)v9);
    *(_BYTE *)(v9 + 96) = 1;
    *(_QWORD *)(v9 + 104) = mach_absolute_time();
  }
  _BonjourBrowser_EnsureStarted((DNSServiceRef *)v9, a2, a3, a4, a5, a6, a7, a8);
  free(a1);
  CFRelease((CFTypeRef)v9);
}

void sub_18D4139A4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

id NSErrorV(void *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  const __CFString *v7;
  __CFString *v8;
  const char *ErrorString;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  __CFString *v17;
  void *v18;
  void *v19;
  id v20;
  const __CFString *v21;
  void *v22;
  __CFString *v23;
  _QWORD v25[3];
  _QWORD v26[4];

  v26[3] = *MEMORY[0x1E0C80C00];
  v7 = a1;
  v8 = (__CFString *)v7;
  if ((_DWORD)a2)
  {
    ErrorString = DebugGetErrorStringEx(v7, a2, 0, 0);
    NSPrintV(a3, a4);
    v17 = (__CFString *)objc_claimAutoreleasedReturnValue();
    if (*ErrorString)
      NSPrintF((uint64_t)"%s (%@)", v10, v11, v12, v13, v14, v15, v16, (uint64_t)ErrorString);
    else
      NSPrintF((uint64_t)"%d (%@)", v10, v11, v12, v13, v14, v15, v16, a2);
    v19 = (void *)objc_claimAutoreleasedReturnValue();
    v20 = objc_alloc(MEMORY[0x1E0CB35C8]);
    v25[0] = CFSTR("cuErrorDesc");
    v25[1] = CFSTR("cuErrorMsg");
    if (v17)
      v21 = v17;
    else
      v21 = &stru_1E25DF9F8;
    v26[0] = v19;
    v26[1] = v21;
    v25[2] = *MEMORY[0x1E0CB2D50];
    v26[2] = v19;
    objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", v26, v25, 3);
    v22 = (void *)objc_claimAutoreleasedReturnValue();
    if (v8)
      v23 = v8;
    else
      v23 = (__CFString *)*MEMORY[0x1E0CB2F90];
    v18 = (void *)objc_msgSend(v20, "initWithDomain:code:userInfo:", v23, (int)a2, v22);

  }
  else
  {
    v18 = 0;
  }

  return v18;
}

void sub_18D413F48(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  _Unwind_Resume(a1);
}

id CUPrintPID(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  return NSPrintF((uint64_t)"%#{pid}", a2, a3, a4, a5, a6, a7, a8, a1);
}

id CUPrintFlags32(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  return NSPrintF((uint64_t)"%#{flags}", a2, a3, a4, a5, a6, a7, a8, a1);
}

__CFString *CUPrintNSDataAddress(void *a1)
{
  id v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  __CFString *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;

  v1 = a1;
  v2 = objc_msgSend(v1, "length");
  v10 = CFSTR("NULL");
  switch(__ROR8__(v2, 1))
  {
    case 0:
      goto LABEL_10;
    case 1:
      v47 = objc_msgSend(objc_retainAutorelease(v1), "bytes");
      NSPrintF((uint64_t)"%.2a", v11, v12, v13, v14, v15, v16, v17, v47);
      goto LABEL_9;
    case 2:
      v48 = objc_msgSend(objc_retainAutorelease(v1), "bytes");
      NSPrintF((uint64_t)"%.4a", v18, v19, v20, v21, v22, v23, v24, v48);
      goto LABEL_9;
    case 3:
      v49 = objc_msgSend(objc_retainAutorelease(v1), "bytes");
      NSPrintF((uint64_t)"%.6a", v25, v26, v27, v28, v29, v30, v31, v49);
      goto LABEL_9;
    case 4:
      v50 = objc_msgSend(objc_retainAutorelease(v1), "bytes");
      NSPrintF((uint64_t)"%.8a", v32, v33, v34, v35, v36, v37, v38, v50);
      goto LABEL_9;
    case 8:
      v51 = objc_msgSend(objc_retainAutorelease(v1), "bytes");
      NSPrintF((uint64_t)"%.16a", v39, v40, v41, v42, v43, v44, v45, v51);
      goto LABEL_9;
    default:
      if (v1)
      {
        NSPrintF((uint64_t)"<< ERROR: Bad Address Size: %zu >>", v3, v4, v5, v6, v7, v8, v9, v2);
LABEL_9:
        v10 = (__CFString *)objc_claimAutoreleasedReturnValue();
      }
      else
      {
        v10 = CFSTR("NULL");
      }
LABEL_10:

      return v10;
  }
}

id CUPrintNSDataHex(void *a1, uint64_t a2, int a3)
{
  id v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  const char *v13;

  v4 = objc_retainAutorelease(a1);
  v5 = objc_msgSend(v4, "bytes");
  objc_msgSend(v4, "length");

  if (a3)
    v13 = "%H";
  else
    v13 = "%.3H";
  NSPrintF((uint64_t)v13, v6, v7, v8, v9, v10, v11, v12, v5);
  return (id)objc_claimAutoreleasedReturnValue();
}

id CUPrintFlags64(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  return NSPrintF((uint64_t)"%#ll{flags}", a2, a3, a4, a5, a6, a7, a8, a1);
}

id NSPrintF(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  NSPrintV(a1, (uint64_t)&a9);
  return (id)objc_claimAutoreleasedReturnValue();
}

__CFString *NSPrintV(uint64_t a1, uint64_t a2)
{
  void *v2;
  void *v3;
  void *v5;

  v5 = 0;
  VASPrintF(&v5, a1, a2);
  v2 = v5;
  if (!v5)
    return &stru_1E25DF9F8;
  objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", v5);
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  free(v2);
  return (__CFString *)v3;
}

void _BonjourBrowser_EnsureStarted(DNSServiceRef *sdRef, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unint64_t v9;
  DNSServiceRef *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  DNSServiceErrorType Connection;
  const char *v18;
  unsigned int v19;
  int v20;
  const char *v21;
  DNSServiceErrorType v22;
  _DNSServiceRef_t *v23;
  unsigned int v24;
  DNSServiceRef v25;
  _DNSServiceRef_t *v26;
  CUNANSubscriber *v27;
  uint64_t v28;
  uint64_t v29;
  _QWORD v30[6];
  _QWORD v31[6];
  _QWORD v32[6];
  DNSServiceRef sdRefa[6];

  v9 = (unint64_t)sdRef[19];
  if ((v9 & 0x80000000000000) != 0)
  {
    _BonjourBrowser_EnsureStoppedDNSSD(sdRef);
    goto LABEL_66;
  }
  sdRefa[0] = 0;
  v10 = sdRef + 3;
  if (!sdRef[3])
  {
    if (gLogCategory_BonjourBrowser <= 30
      && (gLogCategory_BonjourBrowser != -1 || _LogCategory_Initialize((uint64_t)&gLogCategory_BonjourBrowser, 0x1Eu)))
    {
      LogPrintF((uint64_t)&gLogCategory_BonjourBrowser, (uint64_t)"void _BonjourBrowser_EnsureStartedDNSSD(BonjourBrowserRef)", 0x1Eu, (uint64_t)"Creating shared connection to browse for %s\n", a5, a6, a7, a8, (uint64_t)sdRef[16]);
    }
    Connection = DNSServiceCreateConnection(sdRef + 3);
    if (Connection)
    {
      v22 = Connection;
      goto LABEL_31;
    }
    DNSServiceSetDispatchQueue(sdRef[3], (dispatch_queue_t)sdRef[2]);
  }
  if (!sdRef[5])
  {
    v19 = v9 | 0x2000000;
    if ((v9 & 0x1000000000000000) != 0)
      v19 = v9 & 0xFDEFFFFF | 0x2000000;
    if ((v9 & 0x2000000000000000) != 0)
      v20 = v19;
    else
      v20 = v9;
    v21 = (const char *)sdRef[18];
    if (v21)
    {
      if (!strcmp((const char *)sdRef[18], "-1"))
        LODWORD(v21) = -1;
      else
        LODWORD(v21) = if_nametoindex(v21);
    }
    sdRefa[0] = *v10;
    if (gLogCategory_BonjourBrowser <= 30
      && (gLogCategory_BonjourBrowser != -1 || _LogCategory_Initialize((uint64_t)&gLogCategory_BonjourBrowser, 0x1Eu)))
    {
      LogPrintF((uint64_t)&gLogCategory_BonjourBrowser, (uint64_t)"void _BonjourBrowser_EnsureStartedDNSSD(BonjourBrowserRef)", 0x1Eu, (uint64_t)"Starting browse for %s on if %s, flagsAlt 0x%X, flags %#ll{flags}", a5, a6, a7, a8, (uint64_t)sdRef[16]);
    }
    v22 = DNSServiceBrowse(sdRefa, v20 | 0x4000, (uint32_t)v21, (const char *)sdRef[16], (const char *)sdRef[17], (DNSServiceBrowseReply)_BonjourBrowser_BrowseHandler, sdRef);
    if (!v22)
    {
      sdRef[5] = sdRefa[0];
      if ((v9 & 0x4000000000000000) == 0)
        goto LABEL_12;
LABEL_35:
      v23 = sdRef[6];
      if (v23)
      {
        if (gLogCategory_BonjourBrowser > 40)
          goto LABEL_41;
        if (gLogCategory_BonjourBrowser != -1 || _LogCategory_Initialize((uint64_t)&gLogCategory_BonjourBrowser, 0x28u))
          LogPrintF((uint64_t)&gLogCategory_BonjourBrowser, (uint64_t)"void _BonjourBrowser_EnsureStartedDNSSD(BonjourBrowserRef)", 0x28u, (uint64_t)"Stopping detail browse for %s, if %s, flags 0x%X\n", a5, a6, a7, a8, (uint64_t)sdRef[16]);
        v23 = sdRef[6];
        if (v23)
        {
LABEL_41:
          DNSServiceRefDeallocate(v23);
          sdRef[6] = 0;
        }
        if ((v9 & 0x1000000000000000) != 0 && (v9 & 0x2000000000000000) != 0)
          _BonjourBrowser_RemoveAWDLServices((uint64_t)sdRef);
      }
      goto LABEL_45;
    }
LABEL_31:
    if (gLogCategory_BonjourBrowser <= 60
      && (gLogCategory_BonjourBrowser != -1 || _LogCategory_Initialize((uint64_t)&gLogCategory_BonjourBrowser, 0x3Cu)))
    {
      LogPrintF((uint64_t)&gLogCategory_BonjourBrowser, (uint64_t)"void _BonjourBrowser_EnsureStartedDNSSD(BonjourBrowserRef)", 0x3Cu, (uint64_t)"### Start browse for %s on if %s, flags 0x%llX failed: %#m\n", a5, a6, a7, a8, (uint64_t)sdRef[16]);
    }
    _BonjourBrowser_NANEnsureStopped((uint64_t)sdRef, 1, a3, a4, a5, a6, a7, a8);
    _BonjourBrowser_EnsureStoppedDNSSD(sdRef);
    goto LABEL_65;
  }
  if ((v9 & 0x4000000000000000) != 0)
    goto LABEL_35;
LABEL_12:
  if ((v9 & 0x2000000000000000) == 0 || sdRef[6])
  {
LABEL_45:
    v24 = v9;
    goto LABEL_46;
  }
  v18 = (const char *)sdRef[18];
  if (v18)
  {
    if (!strcmp((const char *)sdRef[18], "-1"))
      LODWORD(v18) = -1;
    else
      LODWORD(v18) = if_nametoindex(v18);
  }
  v24 = v9 & 0xFDFFFFFF;
  sdRefa[0] = *v10;
  if (gLogCategory_BonjourBrowser <= 40
    && (gLogCategory_BonjourBrowser != -1 || _LogCategory_Initialize((uint64_t)&gLogCategory_BonjourBrowser, 0x28u)))
  {
    LogPrintF((uint64_t)&gLogCategory_BonjourBrowser, (uint64_t)"void _BonjourBrowser_EnsureStartedDNSSD(BonjourBrowserRef)", 0x28u, (uint64_t)"Starting detail browse for %s, if %s, flags 0x%X\n", a5, a6, a7, a8, (uint64_t)sdRef[16]);
  }
  if (!DNSServiceBrowse(sdRefa, v9 & 0xFDFFBFFF | 0x4000, (uint32_t)v18, (const char *)sdRef[16], (const char *)sdRef[17], (DNSServiceBrowseReply)_BonjourBrowser_IgnoredBrowseHandler, sdRef))sdRef[6] = sdRefa[0];
LABEL_46:
  v25 = sdRef[4];
  if ((v9 & 0x400000000000000) != 0)
  {
    if (!v25)
    {
      if (gLogCategory_BonjourBrowser <= 40
        && (gLogCategory_BonjourBrowser != -1 || _LogCategory_Initialize((uint64_t)&gLogCategory_BonjourBrowser, 0x28u)))
      {
        LogPrintF((uint64_t)&gLogCategory_BonjourBrowser, (uint64_t)"void _BonjourBrowser_EnsureStartedDNSSD(BonjourBrowserRef)", 0x28u, (uint64_t)"Starting AWDL browse for %s, flags 0x%llX\n", a5, a6, a7, a8, (uint64_t)sdRef[16]);
      }
      LODWORD(a3) = *((_DWORD *)sdRef + 30);
      if ((_DWORD)a3 || (a3 = if_nametoindex("awdl0"), (*((_DWORD *)sdRef + 30) = a3) != 0))
      {
        sdRefa[0] = sdRef[3];
        if (!DNSServiceBrowse(sdRefa, v24 | 0x4000, a3, (const char *)sdRef[16], (const char *)sdRef[17], (DNSServiceBrowseReply)_BonjourBrowser_BrowseHandler, sdRef))
        {
          v22 = 0;
          sdRef[4] = sdRefa[0];
          goto LABEL_65;
        }
      }
    }
    goto LABEL_64;
  }
  if (!v25)
    goto LABEL_64;
  if (gLogCategory_BonjourBrowser <= 40
    && (gLogCategory_BonjourBrowser != -1 || _LogCategory_Initialize((uint64_t)&gLogCategory_BonjourBrowser, 0x28u)))
  {
    LogPrintF((uint64_t)&gLogCategory_BonjourBrowser, (uint64_t)"void _BonjourBrowser_EnsureStartedDNSSD(BonjourBrowserRef)", 0x28u, (uint64_t)"Stopping AWDL browse for %s, flags 0x%llX\n", a5, a6, a7, a8, (uint64_t)sdRef[16]);
  }
  _BonjourBrowser_RemoveAWDLServices((uint64_t)sdRef);
  v26 = sdRef[4];
  if (!v26)
  {
LABEL_64:
    v22 = 0;
    goto LABEL_65;
  }
  DNSServiceRefDeallocate(v26);
  v22 = 0;
  sdRef[4] = 0;
LABEL_65:
  _BonjourBrowser_HandleError((uint64_t)sdRef, v22, a3, a4, a5, a6, a7, a8, v29);
LABEL_66:
  if ((*((_BYTE *)sdRef + 159) & 2) != 0)
  {
    if (!sdRef[8])
    {
      if (gLogCategory_BonjourBrowser <= 30
        && (gLogCategory_BonjourBrowser != -1 || _LogCategory_Initialize((uint64_t)&gLogCategory_BonjourBrowser, 0x1Eu)))
      {
        LogPrintF((uint64_t)&gLogCategory_BonjourBrowser, (uint64_t)"void _BonjourBrowser_NANEnsureStarted(BonjourBrowserRef)", 0x1Eu, (uint64_t)"NAN subscriber start: %s\n", v13, v14, v15, v16, (uint64_t)sdRef[16]);
      }
      v27 = objc_alloc_init(CUNANSubscriber);
      sdRef[8] = (DNSServiceRef)v27;
      -[CUNANSubscriber setChangeFlags:](v27, "setChangeFlags:", 4294967291);
      -[CUNANSubscriber setControlFlags:](v27, "setControlFlags:", *((unsigned int *)sdRef + 14));
      -[CUNANSubscriber setDispatchQueue:](v27, "setDispatchQueue:", sdRef[2]);
      -[CUNANSubscriber setServiceType:](v27, "setServiceType:", objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", sdRef[16]));
      v28 = MEMORY[0x1E0C809B0];
      sdRefa[0] = (DNSServiceRef)MEMORY[0x1E0C809B0];
      sdRefa[1] = (DNSServiceRef)3221225472;
      sdRefa[2] = (DNSServiceRef)___BonjourBrowser_NANEnsureStarted_block_invoke;
      sdRefa[3] = (DNSServiceRef)&unk_1E25DBB10;
      sdRefa[4] = (DNSServiceRef)v27;
      sdRefa[5] = (DNSServiceRef)sdRef;
      -[CUNANSubscriber setEndpointFoundHandler:](v27, "setEndpointFoundHandler:", sdRefa);
      v32[0] = v28;
      v32[1] = 3221225472;
      v32[2] = ___BonjourBrowser_NANEnsureStarted_block_invoke_2;
      v32[3] = &unk_1E25DBB10;
      v32[4] = v27;
      v32[5] = sdRef;
      -[CUNANSubscriber setEndpointLostHandler:](v27, "setEndpointLostHandler:", v32);
      v31[0] = v28;
      v31[1] = 3221225472;
      v31[2] = ___BonjourBrowser_NANEnsureStarted_block_invoke_3;
      v31[3] = &unk_1E25DBB38;
      v31[4] = v27;
      v31[5] = sdRef;
      -[CUNANSubscriber setEndpointChangedHandler:](v27, "setEndpointChangedHandler:", v31);
      v30[0] = v28;
      v30[1] = 3221225472;
      v30[2] = ___BonjourBrowser_NANEnsureStarted_block_invoke_4;
      v30[3] = &unk_1E25DBB60;
      v30[4] = v27;
      v30[5] = sdRef;
      -[CUNANSubscriber activateWithCompletion:](v27, "activateWithCompletion:", v30);
    }
  }
  else
  {
    _BonjourBrowser_NANEnsureStopped((uint64_t)sdRef, 0, v11, v12, v13, v14, v15, v16);
  }
}

uint64_t LogPrintF_safe(uint64_t a1, uint64_t a2, unsigned int a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  return LogPrintV(a1, a2, a3, a4, (uint64_t)&a9);
}

uint64_t LogPrintF(uint64_t a1, uint64_t a2, unsigned int a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  return LogPrintV(a1, a2, a3, a4, (uint64_t)&a9);
}

uint64_t LogPrintV(uint64_t a1, uint64_t a2, unsigned int a3, uint64_t a4, uint64_t a5)
{
  int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  int v15;
  unsigned int v16;
  int v17;
  int v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  int v25;
  int v26;
  const char *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  int v33;
  const char *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  int v40;
  const char *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  int v47;
  int v48;
  int v49;
  int v50;
  int v51;
  int v52;
  uint64_t v53;
  char *v54;
  const char *v55;
  int v56;
  const char *v57;
  const char *v58;
  int v59;
  _opaque_pthread_t *v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  const char *v66;
  int v67;
  char *v68;
  char *v69;
  CFStringRef v70;
  void (*v71)(CFStringRef, _QWORD, uint64_t);
  uint64_t v72;
  void (*v73)(uint64_t, _QWORD, CFStringRef);
  uint64_t v74;
  uint64_t v76;
  uint64_t v77;
  char *__s;
  uint64_t v79;
  uint64_t v80;
  char v81[64];
  _OWORD v82[129];
  uint64_t v83;
  char v84;
  uint64_t v85;

  v85 = *MEMORY[0x1E0C80C00];
  v80 = a5;
  memset(v82, 0, 512);
  __s = 0;
  v79 = 0;
  v8 = a3 & 0x4200000;
  if ((a3 & 0x4200000) != 0)
  {
    v79 = v80;
    VASPrintF((void **)&__s, a4, v80);
  }
  LogUtils_EnsureInitialized();
  pthread_mutex_lock(&gLogUtilsLock);
  v14 = 0;
  *(_QWORD *)&v82[0] = a1;
  DWORD2(v82[0]) = a3;
  BYTE12(v82[0]) = 0;
  v83 = 0;
  v84 = 0;
  if ((a3 & 0x80000) == 0)
  {
    v15 = *(_DWORD *)(a1 + 16);
    if ((a3 & 0x400000) == 0 && *(_DWORD *)(a1 + 88))
    {
      if (!*(_QWORD *)(a1 + 80))
        *(_QWORD *)(a1 + 80) = *(_QWORD *)(a1 + 72) + mach_absolute_time();
      if (mach_absolute_time() >= *(_QWORD *)(a1 + 80))
      {
        v16 = 0;
        *(_QWORD *)(a1 + 80) = 0;
        *(_DWORD *)(a1 + 92) = 0;
      }
      else
      {
        v16 = *(_DWORD *)(a1 + 92);
      }
      if (v16 >= *(_DWORD *)(a1 + 88))
      {
        pthread_mutex_unlock(&gLogUtilsLock);
        v53 = 0;
        v54 = __s;
        goto LABEL_81;
      }
      *(_DWORD *)(a1 + 92) = v16 + 1;
    }
    if ((v15 & 1) != 0)
    {
      v17 = SNPrintF((uint64_t)v81, 64, (uint64_t)"%N ", v9, v10, v11, v12, v13, v76);
      if (v17 >= 1)
        _LogPrintFWrite((uint64_t)v82, v81, v17, 1);
    }
    if ((a3 >> 14) & 0x40 | (a3 >> 17) & 0x80 | v15 & 0xFE)
    {
      v18 = CPrintF((uint64_t)_LogPrintFCallBack, (uint64_t)v82, (uint64_t)"[", v9, v10, v11, v12, v13, v76);
      v25 = v18 & ~(v18 >> 31);
      v26 = v25;
      if ((v15 & 4) != 0)
      {
        v27 = getprogname();
        v33 = CPrintF((uint64_t)_LogPrintFCallBack, (uint64_t)v82, (uint64_t)"%s", v28, v29, v30, v31, v32, (uint64_t)v27);
        v26 = (v33 & ~(v33 >> 31)) + v25;
      }
      if ((v15 & 2) != 0)
      {
        if (v25 == v26)
          v34 = "";
        else
          v34 = ":";
        getpid();
        v40 = CPrintF((uint64_t)_LogPrintFCallBack, (uint64_t)v82, (uint64_t)"%s%llu", v35, v36, v37, v38, v39, (uint64_t)v34);
        v26 += v40 & ~(v40 >> 31);
      }
      if ((v15 & 8) != 0)
      {
        v55 = "";
        if (v25 != v26)
          v55 = ",";
        v56 = CPrintF((uint64_t)_LogPrintFCallBack, (uint64_t)v82, (uint64_t)"%s%s", v20, v21, v22, v23, v24, (uint64_t)v55);
      }
      else
      {
        if ((v15 & 0x20) == 0)
        {
          if (!((a3 >> 14) & 0x40 | v15 & 0x40))
            goto LABEL_27;
          goto LABEL_51;
        }
        v57 = "";
        if (v25 != v26)
          v57 = ",";
        v56 = CPrintF((uint64_t)_LogPrintFCallBack, (uint64_t)v82, (uint64_t)"%s%.*s", v20, v21, v22, v23, v24, (uint64_t)v57);
      }
      v26 += v56 & ~(v56 >> 31);
      if (!((a3 >> 14) & 0x40 | v15 & 0x40))
      {
LABEL_27:
        if (!((a3 >> 17) & 0x80 | v15 & 0x80))
          goto LABEL_28;
        goto LABEL_54;
      }
LABEL_51:
      v58 = "";
      if (v25 != v26)
        v58 = ",";
      v59 = CPrintF((uint64_t)_LogPrintFCallBack, (uint64_t)v82, (uint64_t)"%s%s", v20, v21, v22, v23, v24, (uint64_t)v58);
      v26 += v59 & ~(v59 >> 31);
      if (!((a3 >> 17) & 0x80 | v15 & 0x80))
      {
LABEL_28:
        if ((v15 & 0x10) == 0)
        {
LABEL_33:
          v48 = CPrintF((uint64_t)_LogPrintFCallBack, (uint64_t)v82, (uint64_t)"] ", v20, v21, v22, v23, v24, v77);
          v14 = (v48 & ~(v48 >> 31)) + v26;
          goto LABEL_35;
        }
LABEL_29:
        if (v25 == v26)
          v41 = "";
        else
          v41 = "@";
        _LULevelToString(a3, (uint64_t)v81, v19, v20, v21, v22, v23, v24);
        v47 = CPrintF((uint64_t)_LogPrintFCallBack, (uint64_t)v82, (uint64_t)"%s%s", v42, v43, v44, v45, v46, (uint64_t)v41);
        v26 += v47 & ~(v47 >> 31);
        goto LABEL_33;
      }
LABEL_54:
      v60 = pthread_self();
      pthread_getname_np(v60, v81, 0x40uLL);
      if (!v81[0])
        dispatch_queue_get_label(0);
      v66 = "";
      if (v25 != v26)
        v66 = ",";
      v67 = CPrintF((uint64_t)_LogPrintFCallBack, (uint64_t)v82, (uint64_t)"%s%s", v61, v62, v63, v64, v65, (uint64_t)v66);
      v26 += v67 & ~(v67 >> 31);
      if ((v15 & 0x10) == 0)
        goto LABEL_33;
      goto LABEL_29;
    }
    v14 = 0;
  }
LABEL_35:
  v49 = VCPrintF(_LogPrintFCallBack, v82, a4, v80);
  v50 = v49 & ~(v49 >> 31);
  v84 = 1;
  v51 = _LogPrintFCallBack("", 0, (uint64_t)v82);
  v52 = v14 + (v51 & ~(v51 >> 31));
  pthread_mutex_unlock(&gLogUtilsLock);
  if ((a3 & 0x10000) != 0
    && gLogCategory_DebugServicesStackTrace <= 254
    && (gLogCategory_DebugServicesStackTrace != -1
     || _LogCategory_Initialize((uint64_t)&gLogCategory_DebugServicesStackTrace, 0xFEu))
    && gLogCategory_DebugServicesLogging <= 90
    && (gLogCategory_DebugServicesLogging != -1
     || _LogCategory_Initialize((uint64_t)&gLogCategory_DebugServicesLogging, 0x5Au)))
  {
    LogPrintF(&gLogCategory_DebugServicesLogging, "OSStatus DebugStackTrace(LogLevel)", 90, "### stack tracing not supported on this platform\n");
  }
  v53 = (v50 + v52);
  if ((a3 & 0x20000) != 0 && DebugIsDebuggerPresent())
    __debugbreak();
  v54 = __s;
  if (v8 && __s)
  {
    v68 = &__s[strlen(__s)];
    do
    {
      v69 = v68;
      if (v68 <= __s)
        break;
      --v68;
    }
    while (*(v69 - 1) == 10);
    *v69 = 0;
    if (ReportCriticalError_sInitOnce != -1)
      dispatch_once(&ReportCriticalError_sInitOnce, &__block_literal_global_217);
    v70 = CFStringCreateWithCString(0, v54, 0x8000100u);
    if (v70)
    {
      if ((a3 & 0x200000) == 0)
        goto LABEL_73;
    }
    else
    {
      v70 = CFSTR("<< No memory for reason >>");
      CFRetain(CFSTR("<< No memory for reason >>"));
      if ((a3 & 0x200000) == 0)
      {
LABEL_73:
        v71 = (void (*)(CFStringRef, _QWORD, uint64_t))ReportCriticalError_sWriteStackShot_f;
        if (ReportCriticalError_sWriteStackShot_f)
        {
          v72 = getpid();
          v71(v70, 0, v72);
        }
        else
        {
          syslog(5, "### WriteStackShot() missing: %s");
        }
LABEL_80:
        CFRelease(v70);
        goto LABEL_81;
      }
    }
    v73 = (void (*)(uint64_t, _QWORD, CFStringRef))ReportCriticalError_sSimulateCrash_f;
    if (ReportCriticalError_sSimulateCrash_f)
    {
      v74 = getpid();
      v73(v74, 0, v70);
    }
    else
    {
      syslog(5, "### SimulateCrash() missing: %s");
    }
    goto LABEL_80;
  }
LABEL_81:
  if (v54)
    free(v54);
  return v53;
}

uint64_t _LogPrintFWrite(uint64_t result, const void *a2, size_t a3, int a4)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  BOOL v10;
  int v11;
  uint64_t v12;
  int v13;
  BOOL v14;

  v6 = result;
  v7 = *(_QWORD *)result;
  if (!a4)
  {
    v12 = *(_QWORD *)(v7 + 56);
    if (v12)
    {
      v13 = *(_DWORD *)(v12 + 24);
      v14 = v13 != -1 && *(_DWORD *)(result + 8) < v13;
      if (!v14 && ((*(_DWORD *)(result + 8) & 0x800000) == 0 || *(_DWORD *)(v12 + 40) == 14))
      {
        result = (*(uint64_t (**)(uint64_t))(v12 + 32))(result);
        v7 = *(_QWORD *)v6;
      }
    }
  }
  v8 = *(_QWORD *)(v7 + 64);
  if (v8)
  {
    v9 = *(_DWORD *)(v8 + 24);
    v10 = v9 != -1 && *(_DWORD *)(v6 + 8) < v9;
    if (!v10 && ((*(_DWORD *)(v6 + 8) & 0x800000) == 0 || *(_DWORD *)(v8 + 40) == 14))
      result = (*(uint64_t (**)(uint64_t))(v8 + 32))(v6);
  }
  if ((*(_DWORD *)(v6 + 8) & 0x840000) == 0x40000)
  {
    result = open("/dev/console", 1, 0);
    if ((result & 0x80000000) == 0)
    {
      v11 = result;
      write(result, a2, a3);
      close(v11);
      return usleep(0xC8u);
    }
  }
  return result;
}

uint64_t LogUtils_EnsureInitialized()
{
  uint64_t result;

  if ((gLogCFInitialized & 1) == 0 && (gLogUtilsInitializing & 1) == 0)
  {
    pthread_mutex_lock(&gLogUtilsLock);
    gLogUtilsInitializing = 1;
    if ((gLogCFInitialized & 1) == 0)
    {
      gLogCFInitialized = 1;
      notify_register_dispatch("com.apple.managedconfiguration.defaultsdidchange", (int *)&gLogUtilsMCDefaultsChangedToken, MEMORY[0x1E0C80D38], &__block_literal_global_11170);
      _LogUtils_ReadCFPreferences(0);
    }
    gLogUtilsInitializing = 0;
    return pthread_mutex_unlock(&gLogUtilsLock);
  }
  return result;
}

void _LogOutputOSLog_Writer(uint64_t a1, uint64_t a2, char *__s1, size_t __n)
{
  NSObject *v8;
  os_log_t OSLogHandle;
  os_log_type_t v10;
  int v11;
  char *v12;
  char *v13;
  uint64_t v14;
  _BOOL4 v15;
  os_log_type_t v16;
  const char *v17;
  NSObject *v18;
  uint32_t v19;
  uint64_t v20;
  _BOOL4 v21;
  os_log_type_t v22;
  const char *v23;
  NSObject *v24;
  uint32_t v25;
  unsigned int v26;
  char v27;
  char v28;
  uint64_t v29;
  _BOOL4 v30;
  uint64_t v31;
  uint8_t buf[4];
  _BYTE v33[24];
  uint64_t v34;

  v34 = *MEMORY[0x1E0C80C00];
  v31 = 0;
  v8 = *(NSObject **)(a2 + 56);
  if (!v8)
  {
    OSLogHandle = _LogCategoryGetOSLogHandle(*(_QWORD *)a1, &v31);
    if (OSLogHandle)
      v8 = OSLogHandle;
    else
      v8 = MEMORY[0x1E0C81028];
  }
  if (*(_BYTE *)(a2 + 64))
  {
    v10 = *(_BYTE *)(a2 + 65);
    if (!__n)
      goto LABEL_9;
    goto LABEL_7;
  }
  v26 = *(unsigned __int8 *)(a1 + 8);
  if (v26 > 0xA)
    v27 = 1;
  else
    v27 = 2;
  if (v26 > 0x14)
    v27 = 0;
  if (v26 <= 0x59)
    v28 = v27;
  else
    v28 = 16;
  if (v26 <= 0x72)
    v10 = v28;
  else
    v10 = OS_LOG_TYPE_FAULT;
  if (__n)
  {
LABEL_7:
    if (__s1[__n - 1] == 10)
      --__n;
  }
LABEL_9:
  if (*(_BYTE *)(a2 + 67) || (v11 = *(_DWORD *)(a1 + 8), (v11 & 0x800000) != 0))
  {
    v20 = v31;
    v21 = os_log_type_enabled(v8, v10);
    if (v20)
    {
      if (!v21)
        return;
      *(_DWORD *)buf = 136446723;
      *(_QWORD *)v33 = v20;
      *(_WORD *)&v33[8] = 1040;
      *(_DWORD *)&v33[10] = __n;
      *(_WORD *)&v33[14] = 2081;
      *(_QWORD *)&v33[16] = __s1;
      v22 = v10;
      v23 = "%{public}s: %{private}.*s";
      goto LABEL_20;
    }
    if (!v21)
      return;
    *(_DWORD *)buf = 68157955;
    *(_DWORD *)v33 = __n;
    *(_WORD *)&v33[4] = 2081;
    *(_QWORD *)&v33[6] = __s1;
    v22 = v10;
    v23 = "%{private}.*s";
    goto LABEL_36;
  }
  if (*(_BYTE *)(a2 + 66) || *(_DWORD *)(*(_QWORD *)a1 + 16) & 0x200 | v11 & 0x2000000)
  {
    v12 = strndup(__s1, __n);
    if (!v12)
      return;
    v13 = v12;
    v14 = v31;
    v15 = os_log_type_enabled(v8, v10);
    if (v14)
    {
      if (v15)
      {
        *(_DWORD *)buf = 136446466;
        *(_QWORD *)v33 = v14;
        *(_WORD *)&v33[8] = 2082;
        *(_QWORD *)&v33[10] = v13;
        v16 = v10;
        v17 = "%{public}s: %{public}s";
        v18 = v8;
        v19 = 22;
LABEL_40:
        _os_log_impl(&dword_18D40C000, v18, v16, v17, buf, v19);
      }
    }
    else if (v15)
    {
      *(_DWORD *)buf = 136446210;
      *(_QWORD *)v33 = v13;
      v16 = v10;
      v17 = "%{public}s";
      v18 = v8;
      v19 = 12;
      goto LABEL_40;
    }
    free(v13);
    return;
  }
  v29 = v31;
  v30 = os_log_type_enabled(v8, v10);
  if (!v29)
  {
    if (!v30)
      return;
    *(_DWORD *)buf = 68157954;
    *(_DWORD *)v33 = __n;
    *(_WORD *)&v33[4] = 2080;
    *(_QWORD *)&v33[6] = __s1;
    v22 = v10;
    v23 = "%.*s";
LABEL_36:
    v24 = v8;
    v25 = 18;
    goto LABEL_37;
  }
  if (v30)
  {
    *(_DWORD *)buf = 136446722;
    *(_QWORD *)v33 = v29;
    *(_WORD *)&v33[8] = 1040;
    *(_DWORD *)&v33[10] = __n;
    *(_WORD *)&v33[14] = 2080;
    *(_QWORD *)&v33[16] = __s1;
    v22 = v10;
    v23 = "%{public}s: %.*s";
LABEL_20:
    v24 = v8;
    v25 = 28;
LABEL_37:
    _os_log_impl(&dword_18D40C000, v24, v22, v23, buf, v25);
  }
}

os_log_t _LogCategoryGetOSLogHandle(uint64_t a1, _QWORD *a2)
{
  os_log_t v2;
  os_log_t *v4;
  const char *v6;
  char *v7;
  char *v8;
  char *v9;
  os_log_t v10;
  char *v11;
  char *v12;
  char *v13;

  if ((*(_BYTE *)(a1 + 18) & 2) == 0)
    return 0;
  v4 = *(os_log_t **)(a1 + 104);
  if (!v4)
    return 0;
  v2 = *v4;
  if (*v4)
    goto LABEL_14;
  v6 = *(const char **)(a1 + 96);
  if (!v6)
    v6 = getprogname();
  v7 = *(char **)(a1 + 24);
  if (!v7)
    return 0;
  v8 = strchr(v7, 45);
  if (!v8)
  {
    v2 = os_log_create(v6, v7);
    *v4 = v2;
    if (!a2)
      return v2;
    goto LABEL_15;
  }
  v9 = v8;
  v10 = v4[1];
  if (v10)
  {
    free(v10);
    v4[1] = 0;
  }
  v11 = strdup(v9 + 1);
  v4[1] = (os_log_t)v11;
  if (!v11)
    return 0;
  v12 = strndup(v7, v9 - v7);
  if (!v12)
    return 0;
  v13 = v12;
  v2 = os_log_create(v6, v12);
  *v4 = v2;
  free(v13);
LABEL_14:
  if (a2)
LABEL_15:
    *a2 = v4[1];
  return v2;
}

char *__cdecl strndup(const char *__s1, size_t __n)
{
  size_t v3;
  char *v4;
  char *v5;

  v3 = 0;
  if (__n)
  {
    while (__s1[v3])
    {
      if (__n == ++v3)
      {
        v3 = __n;
        break;
      }
    }
  }
  v4 = (char *)malloc_type_malloc(v3 + 1, 0x61E0B974uLL);
  v5 = v4;
  if (v4)
  {
    memcpy(v4, __s1, v3);
    v5[v3] = 0;
  }
  return v5;
}

void _BonjourBrowser_NANEnsureStopped(uint64_t a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  void *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t i;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  _BYTE v19[128];
  uint64_t v20;

  v20 = *MEMORY[0x1E0C80C00];
  if (*(_QWORD *)(a1 + 64))
  {
    if (gLogCategory_BonjourBrowser <= 30
      && (gLogCategory_BonjourBrowser != -1 || _LogCategory_Initialize((uint64_t)&gLogCategory_BonjourBrowser, 0x1Eu)))
    {
      LogPrintF((uint64_t)&gLogCategory_BonjourBrowser, (uint64_t)"void _BonjourBrowser_NANEnsureStopped(BonjourBrowserRef, Boolean)", 0x1Eu, (uint64_t)"NAN subscriber stop: %s\n", a5, a6, a7, a8, *(_QWORD *)(a1 + 128));
    }
    if (!a2)
    {
      v17 = 0u;
      v18 = 0u;
      v15 = 0u;
      v16 = 0u;
      v10 = (void *)objc_msgSend(*(id *)(a1 + 64), "discoveredEndpoints");
      v11 = objc_msgSend(v10, "countByEnumeratingWithState:objects:count:", &v15, v19, 16);
      if (v11)
      {
        v12 = v11;
        v13 = *(_QWORD *)v16;
        do
        {
          for (i = 0; i != v12; ++i)
          {
            if (*(_QWORD *)v16 != v13)
              objc_enumerationMutation(v10);
            _BonjourBrowser_NANEndpointLost(a1, *(void **)(*((_QWORD *)&v15 + 1) + 8 * i));
          }
          v12 = objc_msgSend(v10, "countByEnumeratingWithState:objects:count:", &v15, v19, 16);
        }
        while (v12);
      }
    }
    objc_msgSend(*(id *)(a1 + 64), "invalidate");

    *(_QWORD *)(a1 + 64) = 0;
  }
}

void _BonjourBrowser_HandleError(uint64_t a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  NSObject *v10;
  _QWORD *v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  dispatch_source_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  NSObject *v24;
  dispatch_time_t v25;

  v10 = *(NSObject **)(a1 + 112);
  if (a2)
  {
    if (!v10)
      _BonjourBrowser_PostEvent(a1, 4, 0, 0);
    while (1)
    {
      v11 = *(_QWORD **)(a1 + 80);
      if (!v11)
        break;
      *(_QWORD *)(a1 + 80) = *v11;
      _BonjourBrowser_RemoveService(a1, (uint64_t)v11, 0);
      _BonjourService_Free((uint64_t)v11);
    }
    _BonjourBrowser_NANEnsureStopped(a1, 1, a3, a4, a5, a6, a7, a8);
    _BonjourBrowser_EnsureStoppedDNSSD((_QWORD *)a1);
    if (!*(_QWORD *)(a1 + 112))
    {
      v12 = mach_absolute_time();
      v13 = UpTicksToMilliseconds(v12 - *(_QWORD *)(a1 + 104));
      if (v13 >= 0x2911)
        v18 = 100;
      else
        v18 = 10513 - v13;
      if (gLogCategory_BonjourBrowser <= 50
        && (gLogCategory_BonjourBrowser != -1 || _LogCategory_Initialize((uint64_t)&gLogCategory_BonjourBrowser, 0x32u)))
      {
        LogPrintF((uint64_t)&gLogCategory_BonjourBrowser, (uint64_t)"void _BonjourBrowser_HandleError(BonjourBrowserRef, OSStatus)", 0x32u, (uint64_t)"### Browse for %s failed, retrying in %llu ms: %#m\n", v14, v15, v16, v17, *(_QWORD *)(a1 + 128));
      }
      v19 = dispatch_source_create(MEMORY[0x1E0C80DD0], 0, 0, *(dispatch_queue_t *)(a1 + 16));
      *(_QWORD *)(a1 + 112) = v19;
      if (v19)
      {
        CFRetain((CFTypeRef)a1);
        dispatch_set_context(*(dispatch_object_t *)(a1 + 112), (void *)a1);
        dispatch_source_set_event_handler_f(*(dispatch_source_t *)(a1 + 112), (dispatch_function_t)_BonjourBrowser_RetryTimerFired);
        dispatch_source_set_cancel_handler_f(*(dispatch_source_t *)(a1 + 112), (dispatch_function_t)_BonjourBrowser_RetryTimerCanceled);
        v24 = *(NSObject **)(a1 + 112);
        v25 = dispatch_time(0, 1000000 * v18);
        dispatch_source_set_timer(v24, v25, 0xFFFFFFFFFFFFFFFFLL, 0x3B9ACA00uLL);
        dispatch_resume(*(dispatch_object_t *)(a1 + 112));
      }
      else if (gLogCategory_BonjourBrowser <= 60
             && (gLogCategory_BonjourBrowser != -1
              || _LogCategory_Initialize((uint64_t)&gLogCategory_BonjourBrowser, 0x3Cu)))
      {
        LogPrintF((uint64_t)&gLogCategory_BonjourBrowser, (uint64_t)"void _BonjourBrowser_HandleError(BonjourBrowserRef, OSStatus)", 0x3Cu, (uint64_t)"### Bonjour retry timer failed\n", v20, v21, v22, v23, a9);
      }
    }
  }
  else if (v10)
  {
    dispatch_source_cancel(*(dispatch_source_t *)(a1 + 112));
    dispatch_release(v10);
    *(_QWORD *)(a1 + 112) = 0;
  }
}

const char *DebugGetErrorStringEx(const __CFString *a1, int a2, char *a3, uint64_t a4)
{
  const char *v7;
  int v8;
  uint64_t v9;
  const char **v10;
  int v11;
  uint64_t v12;
  char *v13;
  char v14;

  if (a1)
  {
    v7 = (const char *)CUErrorDomainCodeToString(a1, a2);
    if (v7)
      goto LABEL_22;
  }
  if (a2 == 999 || (a2 - 100) <= 0x1F3)
  {
    if (a2 == 102)
    {
      v7 = "EOPNOTSUPP / kA11AuthFatalErr / HTTP Processing";
      goto LABEL_22;
    }
    v8 = a2;
    goto LABEL_12;
  }
  if (a2 == 200999 || (a2 - 200100) <= 0x1F3)
  {
    v8 = a2 - 200000;
LABEL_12:
    v7 = HTTPGetReasonPhrase(v8);
    if (*v7)
      goto LABEL_22;
    goto LABEL_13;
  }
  v7 = 0;
LABEL_13:
  if (MEMORY[0x1E0D1B9C8])
  {
    v9 = CUErrorCodesTableGet();
    v7 = *(const char **)(v9 + 8);
    if (v7)
    {
      if (*(_DWORD *)v9 == a2)
        goto LABEL_22;
      v10 = (const char **)(v9 + 24);
      while (1)
      {
        v7 = *v10;
        if (!*v10)
          break;
        v11 = *((_DWORD *)v10 - 2);
        v10 += 2;
        if (v11 == a2)
          goto LABEL_22;
      }
    }
  }
  if (!v7)
    v7 = "";
LABEL_22:
  if (!a3 || !a4)
    return v7;
  v12 = a4 - 1;
  v13 = a3;
  if (a4 - 1 >= 1)
  {
    v13 = a3;
    do
    {
      v14 = *v7;
      if (!*v7)
        break;
      ++v7;
      *v13++ = v14;
      --v12;
    }
    while (v12 > 0);
  }
  *v13 = 0;
  return a3;
}

uint64_t CUErrorDomainCodeToString(const __CFString *a1, int a2)
{
  const char *v3;
  uint64_t v4;
  const char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  const char *v9;
  void *v11;
  const char *v12;

  v11 = 0;
  v12 = 0;
  CFStringGetOrCopyCStringUTF8(a1, &v12, (UInt8 **)&v11, 0);
  v3 = v12;
  if (!v12)
    return 0;
  if (MEMORY[0x1E0D1B9D0] && (v4 = CUErrorDomainTableGet(), (v5 = *(const char **)v4) != 0))
  {
    while (1)
    {
      if (!strcasecmp(v5, v3))
      {
        v6 = *(_QWORD *)(v4 + 8);
        v7 = *(_QWORD *)(v6 + 8);
        if (v7)
        {
          v8 = 0;
          do
          {
            if (*(_DWORD *)v6 == a2)
              v8 = v7;
            v7 = *(_QWORD *)(v6 + 24);
            v6 += 16;
          }
          while (v7);
          if (v8)
            break;
        }
      }
      v9 = *(const char **)(v4 + 16);
      v4 += 16;
      v5 = v9;
      if (!v9)
        goto LABEL_12;
    }
  }
  else
  {
LABEL_12:
    v8 = 0;
  }
  if (v11)
    free(v11);
  return v8;
}

uint64_t _OPACKEncodeDictionaryApplier(uint64_t result, uint64_t a2, _QWORD *a3)
{
  if (!*((_DWORD *)a3 + 4))
  {
    result = _OPACKEncodeObject(*a3, result);
    if ((_DWORD)result || (result = _OPACKEncodeObject(*a3, a2), (_DWORD)result))
      *((_DWORD *)a3 + 4) = result;
  }
  return result;
}

uint64_t _OPACKEncodeObject(uint64_t a1, const __CFString *a2)
{
  CFTypeID v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  CFTypeID v8;
  uint64_t v9;
  char v10;
  uint64_t v11;
  uint64_t (*v12)(const char **, uint64_t, _QWORD, uint64_t);
  const char **p_context;
  uint64_t v14;
  CFIndex Count;
  char v16;
  const char *v17;
  CFIndex v18;
  char v19;
  CFIndex v20;
  const void *ValueAtIndex;
  size_t v23;
  void *v24;
  const char *valuePtr;
  __int128 context;
  uint64_t v27;
  uint64_t v28;

  v28 = *MEMORY[0x1E0C80C00];
  v4 = CFGetTypeID(a2);
  if (v4 == gCFStringType_11836)
  {
    v24 = 0;
    valuePtr = 0;
    v23 = 0;
    if (!*(_QWORD *)(a1 + 16) || CFStringGetLength(a2) < 1)
      goto LABEL_6;
    LOBYTE(context) = 0;
    v5 = _OPACKEncodeUID(a1, a2, &context);
    if (!(_DWORD)v5)
    {
      if (!(_BYTE)context)
      {
LABEL_6:
        v6 = CFStringGetOrCopyCStringUTF8(a2, &valuePtr, (UInt8 **)&v24, &v23);
        if (!(_DWORD)v6)
        {
          if (v23 > 0x20)
          {
            if (v23 > 0xFF)
            {
              if (v23 >> 16)
              {
                if (HIDWORD(v23))
                {
                  LOBYTE(context) = 100;
                  *(_QWORD *)((char *)&context + 1) = v23;
                  v7 = 9;
                }
                else
                {
                  LOBYTE(context) = 99;
                  *(_DWORD *)((char *)&context + 1) = v23;
                  v7 = 5;
                }
              }
              else
              {
                LOBYTE(context) = 98;
                *(_WORD *)((char *)&context + 1) = v23;
                v7 = 3;
              }
            }
            else
            {
              LOBYTE(context) = 97;
              BYTE1(context) = v23;
              v7 = 2;
            }
          }
          else
          {
            LOBYTE(context) = v23 + 64;
            v7 = 1;
          }
          v6 = (*(uint64_t (**)(__int128 *, uint64_t, _QWORD, _QWORD))a1)(&context, v7, 0, *(_QWORD *)(a1 + 8));
          if (!(_DWORD)v6)
          {
            if (v23)
              v6 = (*(uint64_t (**)(const char *, size_t, _QWORD, _QWORD))a1)(valuePtr, v23, 0, *(_QWORD *)(a1 + 8));
            else
              v6 = 0;
          }
        }
        if (v24)
          free(v24);
        return v6;
      }
      return 0;
    }
    return v5;
  }
  v8 = v4;
  if (v4 == gCFNumberType_11837)
  {
    if (!CFNumberIsFloatType((CFNumberRef)a2))
    {
      valuePtr = 0;
      CFNumberGetValue((CFNumberRef)a2, kCFNumberSInt64Type, &valuePtr);
      v17 = valuePtr;
      if (*(_QWORD *)(a1 + 16) && (unint64_t)(valuePtr - 40) <= 0xFFFFFFFFFFFFFFD6)
      {
        LOBYTE(context) = 0;
        v6 = _OPACKEncodeUID(a1, a2, &context);
        if ((_DWORD)v6 || (_BYTE)context)
          return v6;
        v17 = valuePtr;
      }
      if (v17 == (const char *)(char)v17)
      {
        if (((_BYTE)v17 + 1) > 0x28u)
        {
          LOBYTE(context) = 48;
          BYTE1(context) = (_BYTE)v17;
          v9 = 2;
        }
        else
        {
          LOBYTE(context) = (_BYTE)v17 + 8;
          v9 = 1;
        }
      }
      else if (v17 == (const char *)(int)v17)
      {
        LOBYTE(context) = 50;
        *(_WORD *)((char *)&context + 1) = (_WORD)v17;
        BYTE3(context) = BYTE2(v17);
        v9 = 5;
        BYTE4(context) = BYTE3(v17);
      }
      else
      {
        LOBYTE(context) = 51;
        *(_QWORD *)((char *)&context + 1) = v17;
        v9 = 9;
      }
      goto LABEL_74;
    }
    if (!*(_QWORD *)(a1 + 16))
      goto LABEL_14;
    LOBYTE(context) = 0;
    v5 = _OPACKEncodeUID(a1, a2, &context);
    if ((_DWORD)v5)
      return v5;
    if (!(_BYTE)context)
    {
LABEL_14:
      if (CFNumberGetByteSize((CFNumberRef)a2) > 4)
      {
        valuePtr = 0;
        CFNumberGetValue((CFNumberRef)a2, kCFNumberFloat64Type, &valuePtr);
        LOBYTE(context) = 54;
        *(_QWORD *)((char *)&context + 1) = valuePtr;
        v9 = 9;
      }
      else
      {
        LODWORD(valuePtr) = 0;
        v9 = 5;
        CFNumberGetValue((CFNumberRef)a2, kCFNumberFloat32Type, &valuePtr);
        LOBYTE(context) = 53;
        *(_DWORD *)((char *)&context + 1) = (_DWORD)valuePtr;
      }
LABEL_74:
      v12 = *(uint64_t (**)(const char **, uint64_t, _QWORD, uint64_t))a1;
      v11 = *(_QWORD *)(a1 + 8);
      p_context = (const char **)&context;
      v14 = v9;
      return v12(p_context, v14, 0, v11);
    }
    return 0;
  }
  if (v4 == gCFBooleanType_11838)
  {
    if ((const __CFString *)*MEMORY[0x1E0C9AE50] == a2)
      v10 = 1;
    else
      v10 = 2;
    goto LABEL_20;
  }
  if (v4 == gCFDictionaryType_11839)
  {
    Count = CFDictionaryGetCount((CFDictionaryRef)a2);
    v16 = Count - 32;
    if (Count >= 15)
      v16 = -17;
    LOBYTE(valuePtr) = v16;
    v5 = (*(uint64_t (**)(const char **, uint64_t, _QWORD, _QWORD))a1)(&valuePtr, 1, 0, *(_QWORD *)(a1 + 8));
    if ((_DWORD)v5)
      return v5;
    if (Count >= 1)
    {
      v27 = 0;
      context = (unint64_t)a1;
      CFDictionaryApplyFunction((CFDictionaryRef)a2, (CFDictionaryApplierFunction)_OPACKEncodeDictionaryApplier, &context);
      v6 = v27;
      if ((_DWORD)v27)
        return v6;
    }
    if (valuePtr != 239)
      return 0;
    LOBYTE(valuePtr) = 3;
    v12 = *(uint64_t (**)(const char **, uint64_t, _QWORD, uint64_t))a1;
    v11 = *(_QWORD *)(a1 + 8);
    p_context = &valuePtr;
    goto LABEL_21;
  }
  if (v4 == gCFArrayType_11840)
  {
    v18 = CFArrayGetCount((CFArrayRef)a2);
    v19 = v18 - 48;
    if (v18 >= 15)
      v19 = -33;
    LOBYTE(context) = v19;
    v5 = (*(uint64_t (**)(__int128 *, uint64_t, _QWORD, _QWORD))a1)(&context, 1, 0, *(_QWORD *)(a1 + 8));
    if ((_DWORD)v5)
      return v5;
    if (v18 >= 1)
    {
      v20 = 0;
      do
      {
        ValueAtIndex = CFArrayGetValueAtIndex((CFArrayRef)a2, v20);
        v5 = _OPACKEncodeObject(a1, ValueAtIndex);
        if ((_DWORD)v5)
          return v5;
      }
      while (v18 != ++v20);
    }
    if (context != 223)
      return 0;
    v10 = 3;
    goto LABEL_20;
  }
  if (v4 == gCFDataType_11841)
    return _OPACKEncodeData(a1, (CFDataRef)a2);
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) != 0)
    return _OPACKEncodeUUID(a1, (CFUUIDRef)a2, 1);
  if (v8 == gCFUUIDType)
    return _OPACKEncodeUUID(a1, (CFUUIDRef)a2, 0);
  if ((const __CFString *)*MEMORY[0x1E0C9B0D0] == a2)
  {
    v10 = 4;
LABEL_20:
    LOBYTE(context) = v10;
    v12 = *(uint64_t (**)(const char **, uint64_t, _QWORD, uint64_t))a1;
    v11 = *(_QWORD *)(a1 + 8);
    p_context = (const char **)&context;
LABEL_21:
    v14 = 1;
    return v12(p_context, v14, 0, v11);
  }
  if (v8 != gCFDateType_11842)
    return 4294960561;
  return _OPACKEncodeDate(a1, a2);
}

uint64_t _OPACKEncoderAppendCallback(UInt8 *bytes, CFIndex length, int a3, CFMutableDataRef theData)
{
  CFDataAppendBytes(theData, bytes, length);
  return 0;
}

uint64_t _OPACKEncodeUID(uint64_t a1, const void *a2, _BYTE *a3)
{
  const void *Value;
  uint64_t v7;
  __CFDictionary *v8;
  const void *v9;
  uint64_t result;
  char v11;
  int v12;
  uint64_t v13;

  v13 = *MEMORY[0x1E0C80C00];
  Value = CFDictionaryGetValue(*(CFDictionaryRef *)(a1 + 16), a2);
  if (!Value)
  {
    v8 = *(__CFDictionary **)(a1 + 16);
    v9 = (const void *)(*(_QWORD *)(a1 + 24) + 1);
    *(_QWORD *)(a1 + 24) = v9;
    CFDictionaryAddValue(v8, a2, v9);
    result = 0;
    *a3 = 0;
    return result;
  }
  if ((unint64_t)Value > 0x21)
  {
    if ((unint64_t)Value > 0x100)
    {
      if ((unint64_t)Value > 0x10000)
      {
        if ((unint64_t)Value >= 0x1000001)
        {
          if ((unint64_t)Value > 0x100000000)
            return 4294960586;
          v11 = -60;
          v12 = (_DWORD)Value - 1;
          v7 = 5;
        }
        else
        {
          v11 = -61;
          LOWORD(v12) = (_WORD)Value - 1;
          BYTE2(v12) = ((_DWORD)Value - 1) >> 16;
          v7 = 4;
        }
      }
      else
      {
        v11 = -62;
        LOWORD(v12) = (_WORD)Value - 1;
        v7 = 3;
      }
    }
    else
    {
      v11 = -63;
      LOBYTE(v12) = (_BYTE)Value - 1;
      v7 = 2;
    }
  }
  else
  {
    v11 = (_BYTE)Value - 97;
    v7 = 1;
  }
  result = (*(uint64_t (**)(char *, uint64_t, _QWORD, _QWORD))a1)(&v11, v7, 0, *(_QWORD *)(a1 + 8));
  if (!(_DWORD)result)
    *a3 = 1;
  return result;
}

uint64_t CFStringGetOrCopyCStringUTF8(const __CFString *a1, const char **a2, UInt8 **a3, size_t *a4)
{
  const char *CStringPtr;
  const char *v9;
  size_t v10;
  UInt8 *v11;
  CFIndex Length;
  CFIndex MaximumSizeForEncoding;
  UInt8 *v14;
  uint64_t result;
  CFIndex usedBufLen;
  CFRange v17;

  CStringPtr = CFStringGetCStringPtr(a1, 0x8000100u);
  if (CStringPtr)
  {
    v9 = CStringPtr;
    if (!a4)
    {
      v11 = 0;
      goto LABEL_9;
    }
    v10 = strlen(CStringPtr);
    v11 = 0;
    goto LABEL_7;
  }
  Length = CFStringGetLength(a1);
  MaximumSizeForEncoding = CFStringGetMaximumSizeForEncoding(Length, 0x8000100u);
  usedBufLen = MaximumSizeForEncoding;
  v14 = (UInt8 *)malloc_type_malloc(MaximumSizeForEncoding + 1, 0xCF0805A1uLL);
  if (!v14)
    return 4294960568;
  v11 = v14;
  v17.location = 0;
  v17.length = Length;
  if (CFStringGetBytes(a1, v17, 0x8000100u, 0, 0, v14, MaximumSizeForEncoding, &usedBufLen) != Length)
  {
    free(v11);
    return 4294960596;
  }
  v10 = usedBufLen;
  v11[usedBufLen] = 0;
  v9 = (const char *)v11;
  if (a4)
LABEL_7:
    *a4 = v10;
LABEL_9:
  result = 0;
  *a2 = v9;
  *a3 = v11;
  return result;
}

double CFDictionaryGetDouble(const __CFDictionary *a1, const void *a2, _DWORD *a3)
{
  const __CFString *Value;

  if (a1)
  {
    Value = (const __CFString *)CFDictionaryGetValue(a1, a2);
    if (Value)
      return CFGetDouble(Value, a3);
  }
  if (a3)
    *a3 = -6727;
  return 0.0;
}

BOOL _OPACKObjectsExactlyEqual(const void *a1, const __CFNumber *a2)
{
  CFTypeID v4;
  int IsFloatType;
  _BOOL8 result;

  v4 = CFGetTypeID(a1);
  result = 0;
  if (v4 == CFGetTypeID(a2))
  {
    if (CFEqual(a1, a2))
    {
      if (v4 != gCFNumberType_11837)
        return 1;
      IsFloatType = CFNumberIsFloatType((CFNumberRef)a1);
      if (IsFloatType == CFNumberIsFloatType(a2))
        return 1;
    }
  }
  return result;
}

const __CFDictionary *CFDictionaryGetCFDataOfLength(const __CFDictionary *result, const void *a2, uint64_t a3, int *a4)
{
  const __CFData *v6;
  CFTypeID v7;
  CFIndex Length;
  BOOL v9;
  int v10;

  if (result)
  {
    result = (const __CFDictionary *)CFDictionaryGetValue(result, a2);
    if (result)
    {
      v6 = result;
      v7 = CFGetTypeID(result);
      if (v7 == CFDataGetTypeID())
      {
        Length = CFDataGetLength(v6);
        v9 = Length == a3;
        if (Length == a3)
          result = v6;
        else
          result = 0;
        if (v9)
          v10 = 0;
        else
          v10 = -6743;
      }
      else
      {
        result = 0;
        v10 = -6756;
      }
    }
    else
    {
      v10 = -6727;
    }
  }
  else
  {
    v10 = -6705;
  }
  if (a4)
    *a4 = v10;
  return result;
}

unint64_t CFDictionaryGetInt64(const __CFDictionary *a1, const void *a2, int *a3)
{
  const __CFString *Value;

  if (a1)
  {
    Value = (const __CFString *)CFDictionaryGetValue(a1, a2);
    if (Value)
      return CFGetInt64(Value, a3);
  }
  if (a3)
    *a3 = -6727;
  return 0;
}

uint64_t NormalizeUUIDString(char *a1, size_t a2, __int128 *a3, char a4, char *a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t result;
  unsigned int v12;
  __int128 v13;
  uint64_t v14;

  v14 = *MEMORY[0x1E0C80C00];
  result = StringToUUIDEx(a1, a2, a4 & 1, a3, &v13, a6, a7, a8);
  v12 = result;
  if (!(_DWORD)result)
  {
    UUIDtoCStringFlags(&v13, 16, a3, a4, a5, (int *)&v12);
    return v12;
  }
  return result;
}

char *UUIDtoCStringFlags(_BYTE *a1, uint64_t a2, __int128 *a3, char a4, char *__str, int *a6)
{
  int v8;
  uint64_t v9;
  unsigned __int8 *v10;
  __int16 v11;
  BOOL v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  __int128 v20;
  uint64_t v21;

  v21 = *MEMORY[0x1E0C80C00];
  if (a2 == 1 && a3)
  {
    v8 = 0;
    v20 = *a3;
    if ((a4 & 1) != 0)
      v9 = 0;
    else
      v9 = 3;
    v10 = (unsigned __int8 *)&v20;
    *(_BYTE *)((unint64_t)&v20 | v9) = *a1;
    goto LABEL_24;
  }
  if (a2 == 2 && a3)
  {
    v20 = *a3;
    v8 = 0;
    if ((a4 & 1) != 0)
    {
      LOBYTE(v20) = a1[1];
      BYTE1(v20) = *a1;
      goto LABEL_23;
    }
    v11 = *(_WORD *)a1;
LABEL_15:
    WORD1(v20) = v11;
LABEL_23:
    v10 = (unsigned __int8 *)&v20;
    goto LABEL_24;
  }
  if (a2 == 4 && a3)
  {
    v20 = *a3;
    v8 = 0;
    if ((a4 & 1) != 0)
    {
      BYTE3(v20) = *a1;
      BYTE2(v20) = a1[1];
      BYTE1(v20) = a1[2];
      LOBYTE(v20) = a1[3];
      goto LABEL_23;
    }
    LOWORD(v20) = *(_WORD *)a1;
    v11 = *((_WORD *)a1 + 1);
    goto LABEL_15;
  }
  v10 = (unsigned __int8 *)&unk_18D51F8EA;
  if (a2 == 16)
  {
    v10 = a1;
    v8 = 0;
  }
  else
  {
    v8 = -6743;
  }
  if (!a3)
    goto LABEL_29;
LABEL_24:
  if ((a4 & 2) == 0
    || (*(_QWORD *)(v10 + 4) == *(_QWORD *)((char *)a3 + 4)
      ? (v12 = *((unsigned int *)v10 + 3) == (unint64_t)*((unsigned int *)a3 + 3))
      : (v12 = 0),
        !v12))
  {
LABEL_29:
    if ((a4 & 1) != 0)
    {
      v13 = v10[3];
      v14 = v10[2];
      v15 = v10[1];
      v16 = *v10;
      v17 = v10[5];
      v18 = v10[4];
    }
    else
    {
      v13 = *v10;
      v14 = v10[1];
      v15 = v10[2];
      v16 = v10[3];
      v17 = v10[4];
      v18 = v10[5];
    }
    snprintf(__str, 0x25uLL, "%02x%02x%02x%02x-%02x%02x-%02x%02x-%02x%02x-%02x%02x%02x%02x%02x%02x", v13, v14, v15, v16, v17, v18);
    goto LABEL_33;
  }
  snprintf(__str, 0x25uLL, "%x");
LABEL_33:
  if (a6)
    *a6 = v8;
  return __str;
}

uint64_t StringToUUIDEx(char *__s, size_t a2, int a3, _OWORD *a4, _OWORD *a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  size_t v11;
  int v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  int v20;
  uint64_t result;
  unsigned int v22;
  unint64_t v23;
  uint64_t v24;
  __int128 v25;
  uint64_t v26;

  v11 = a2;
  v26 = *MEMORY[0x1E0C80C00];
  if (a2 == -1)
    v11 = strlen(__s);
  v23 = 0;
  v24 = 0;
  if (a3)
    v13 = SNScanF(__s, v11, "%2hhx%2hhx%2hhx%2hhx-%2hhx%2hhx-%2hhx%2hhx-%2hhx%2hhx-%2hhx%2hhx%2hhx%2hhx%2hhx%2hhx%n", (uint64_t)&v25 + 4, (uint64_t)&v25 + 7, (uint64_t)&v25 + 6, (uint64_t)&v24 + 4, a8, (int)&v25 + 3);
  else
    v13 = SNScanF(__s, v11, "%2hhx%2hhx%2hhx%2hhx-%2hhx%2hhx-%2hhx%2hhx-%2hhx%2hhx-%2hhx%2hhx%2hhx%2hhx%2hhx%2hhx%n", (uint64_t)&v25 + 5, (uint64_t)&v25 + 6, (uint64_t)&v25 + 7, (uint64_t)&v24 + 4, a8, (int)&v25);
  v19 = v13;
  if (!a4 || v13 == 16)
  {
    result = 4294960554;
    if (v19 != 16 || HIDWORD(v24) != 36)
      return result;
    if (a5)
    {
      result = 0;
      *a5 = v25;
      return result;
    }
    return 0;
  }
  v20 = SNScanF(__s, v11, "%llx%n", v14, v15, v16, v17, v18, (int)&v23);
  result = 4294960554;
  if (v20 != 1)
    return result;
  v22 = v23;
  if (HIDWORD(v23) || (_DWORD)v24 != (_DWORD)v11)
    return result;
  if (!a5)
    return 0;
  *a5 = *a4;
  result = 0;
  if (!a3)
    v22 = bswap32(v22);
  *(_DWORD *)a5 = v22;
  return result;
}

uint64_t SNScanF(char *a1, size_t a2, unsigned __int8 *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, int a9)
{
  return VSNScanF(a1, a2, a3, &a9);
}

uint64_t VSNScanF(char *__s, size_t a2, unsigned __int8 *a3, int *a4)
{
  char *v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  int v9;
  uint64_t v10;
  int64_t v11;
  uint64_t v12;
  char *v13;
  int v14;
  int v15;
  int v16;
  uint64_t v17;
  char v18;
  unsigned __int8 *v19;
  unsigned __int8 *v20;
  uint64_t v21;
  int v22;
  int v23;
  int v24;
  int v25;
  int v26;
  int *v27;
  int v28;
  unint64_t v29;
  int v30;
  BOOL v31;
  int v32;
  int v33;
  int v34;
  int v35;
  int v36;
  uint64_t v37;
  int v38;
  unsigned __int8 *v39;
  uint64_t v40;
  unsigned __int8 *v41;
  int v42;
  uint64_t v43;
  unsigned __int8 *v44;
  uint64_t v45;
  int64_t v46;
  uint64_t v47;
  char *v48;
  int64_t v49;
  int v50;
  char ***v51;
  char **v52;
  int v53;
  int64_t v54;
  uint64_t v55;
  int v56;
  int v57;
  unint64_t v58;
  int v59;
  int v60;
  uint64_t v61;
  unint64_t v62;
  BOOL v63;
  __darwin_ct_rune_t v64;
  int v65;
  uint64_t v66;
  int *v67;
  _BYTE *v68;
  char v69;
  int64_t v70;
  uint64_t v71;
  int64_t v72;
  uint64_t v73;
  int v74;
  uint64_t v76;
  int64_t v77;
  int64_t v78;
  __darwin_ct_rune_t v79;
  int v80;
  int64_t v81;
  double **v82;
  double *v83;
  char **v84;
  char *v85;
  int64_t v86;
  uint64_t v87;
  char v88;
  int v89;
  uint64_t v91;
  unsigned __int8 *v92;
  int *v93;
  _BYTE *v94;
  int64_t v95;
  char v96;
  unsigned int v97;
  char ***v98;
  char **v99;
  int *v100;
  int64_t *v101;
  unsigned int v102;
  char *v103;
  int64_t v104;
  uint64_t v105;
  int v106;
  char ***v108;
  char **v109;
  int *v110;
  _QWORD *v111;
  int *v112;
  _BYTE *v113;
  unsigned int v114;
  char v115;
  float v116;
  int *v117;
  _QWORD *v118;
  int v120;
  unsigned int v121;
  int v122;
  char *v123;
  double v124;
  int *v125;
  char v126[64];
  uint64_t v127;

  v5 = __s;
  v127 = *MEMORY[0x1E0C80C00];
  v125 = a4;
  if (a2 == -1)
    a2 = strlen(__s);
  v121 = 0;
  v123 = &v5[a2];
  v6 = MEMORY[0x1E0C80978];
  v124 = 0.0;
  v120 = (int)v5;
LABEL_4:
  while (2)
  {
    while (2)
    {
      v7 = *a3;
      if ((char)*a3 < 0)
        v8 = __maskrune(v7, 0x4000uLL);
      else
        v8 = *(_DWORD *)(v6 + 4 * v7 + 60) & 0x4000;
      if (v8)
      {
        do
        {
          while (1)
          {
            v9 = (char)*++a3;
            v10 = v9;
            if (v9 < 0)
              break;
            if ((*(_DWORD *)(v6 + 4 * v10 + 60) & 0x4000) == 0)
              goto LABEL_12;
          }
        }
        while (__maskrune(v10, 0x4000uLL));
LABEL_12:
        if (v5 < v123)
        {
          v11 = v123 - v5;
          do
          {
            v12 = *v5;
            if (*v5 < 0)
            {
              if (!__maskrune(v12, 0x4000uLL))
                goto LABEL_20;
            }
            else if ((*(_DWORD *)(v6 + 4 * v12 + 60) & 0x4000) == 0)
            {
              goto LABEL_20;
            }
            ++v5;
            --v11;
          }
          while (v11);
          v5 = v123;
        }
      }
LABEL_20:
      v13 = v5;
      v14 = *a3;
      if (v14 != 37)
      {
        if (*a3)
        {
          if (v5 < v123)
          {
            ++a3;
            v15 = *v5++;
            if (v14 == v15)
              continue;
          }
        }
        return v121;
      }
      break;
    }
    v16 = 0;
    v17 = 0;
    v18 = 1;
    v19 = a3;
    while (1)
    {
      while (1)
      {
        do
        {
          v20 = v19;
          v21 = v17;
          v23 = *++v19;
          v22 = v23;
          v17 = 1;
        }
        while (v23 == 42);
        if (v22 != 38)
          break;
        v18 = 0;
        v17 = v21;
      }
      if (v22 != 35)
        break;
      ++v16;
      v17 = v21;
    }
    if ((v22 - 48) > 9)
    {
      if (v22 == 46)
      {
        v27 = v125;
        v125 += 2;
        v24 = *v27;
        if (*v27 < 0)
          return v121;
        v22 = v20[2];
        v19 = v20 + 2;
      }
      else
      {
        v24 = 0x7FFFFFFF;
      }
    }
    else
    {
      v24 = 0;
      do
      {
        v25 = v22 + 10 * v24;
        v26 = *++v19;
        v22 = v26;
        v24 = v25 - 48;
      }
      while ((v26 - 48) < 0xA);
      if (v24 < 0)
        return v121;
    }
    v28 = 0;
    HIDWORD(v29) = v22;
    LODWORD(v29) = v22 - 104;
    switch((v29 >> 1))
    {
      case 0u:
        v30 = *++v19;
        v31 = v30 == 104;
        v22 = 104;
        v32 = 72;
        goto LABEL_44;
      case 1u:
      case 6u:
      case 9u:
        ++v19;
        goto LABEL_46;
      case 2u:
        v33 = *++v19;
        v31 = v33 == 108;
        v22 = 108;
        v32 = 76;
LABEL_44:
        if (v31)
        {
          v22 = v32;
          ++v19;
        }
LABEL_46:
        v28 = v22;
        v22 = *v19;
        break;
      default:
        break;
    }
    v122 = v28;
    if (!v22)
      return v121;
    a3 = v19 + 1;
    v34 = 0;
    v35 = 0;
    v36 = 0;
    v37 = 10;
    switch(v22)
    {
      case '[':
        if (v28)
          return v121;
        v38 = v19[1];
        v39 = v19 + 2;
        if (v38 == 94)
          v40 = 2;
        else
          v40 = 1;
        if (v38 == 94)
          v41 = v19 + 2;
        else
          v41 = v19 + 1;
        v42 = v19[v40];
        v43 = v42 == 93;
        if (v42 == 93)
          v44 = v41 + 1;
        else
          v44 = v41;
        while (2)
        {
          if (!*v44)
            return v121;
          if (*v44 != 93)
          {
            ++v44;
            ++v43;
            continue;
          }
          break;
        }
        v5 = v13;
        if (v38 == 94)
        {
          if (v13 >= v123)
            goto LABEL_284;
          v5 = v13;
          while (*v5)
          {
            v63 = __OFSUB__(v24--, 1);
            if (v24 < 0 != v63)
              break;
            if (v39 < v44)
            {
              v76 = 0;
              do
              {
                if (v41[v76] == *v5)
                  goto LABEL_284;
                ++v76;
              }
              while (v43 != v76);
            }
            if (++v5 == v123)
            {
              v5 = v123;
              break;
            }
          }
        }
        else
        {
          if (v13 >= v123)
            goto LABEL_284;
          v5 = v13;
          while (*v5)
          {
            v63 = __OFSUB__(v24, 1);
            if (--v24 < 0 != v63)
              break;
            v91 = v43;
            v92 = v41;
            if (a3 >= v44)
              break;
            while (*v92 != *v5)
            {
              ++v92;
              if (!--v91)
                goto LABEL_284;
            }
            if (++v5 == v123)
            {
              v5 = v123;
              break;
            }
          }
        }
LABEL_284:
        if (v13 == v5 && !v16)
          return v121;
        a3 = v44 + 1;
        if ((_DWORD)v21)
          continue;
        v93 = v125;
        v125 += 2;
        v94 = *(_BYTE **)v93;
        if ((v18 & 1) != 0)
        {
          if (!v94)
            return v121;
          if (v13 < v5)
          {
            v95 = v5 - v13;
            do
            {
              v96 = *v13++;
              *v94++ = v96;
              --v95;
            }
            while (v95);
          }
          *v94 = 0;
          v97 = v121;
        }
        else
        {
          if (v94)
            *(_QWORD *)v94 = v13;
          v117 = v125;
          v125 += 2;
          v118 = *(_QWORD **)v117;
          v97 = v121;
          if (v118)
            *v118 = v5 - v13;
        }
        v121 = v97 + 1;
        continue;
      case '\\':
      case ']':
      case '^':
      case '_':
      case 'a':
      case 'e':
      case 'g':
      case 'h':
      case 'j':
      case 'k':
      case 'l':
      case 'm':
      case 'q':
      case 'r':
      case 't':
      case 'v':
      case 'w':
        return v121;
      case 'b':
        v34 = 0;
        v35 = 0;
        v36 = 1;
        v37 = 2;
        goto LABEL_106;
      case 'c':
        if (v28)
          return v121;
        if ((v18 & 1) != 0)
        {
          if (v24 == 0x7FFFFFFF)
            v45 = 1;
          else
            v45 = v24;
          if (v123 - v13 < v45)
            return v121;
          if ((_DWORD)v21)
          {
            v5 = &v13[v45];
            continue;
          }
          v112 = v125;
          v125 += 2;
          v113 = *(_BYTE **)v112;
          if (!v113)
            return v121;
          if ((_DWORD)v45)
          {
            v114 = v45 + 1;
            v102 = v121;
            do
            {
              v115 = *v13++;
              *v113++ = v115;
              --v114;
            }
            while (v114 > 1);
          }
          else
          {
            v102 = v121;
          }
        }
        else
        {
          v77 = v123 - v13;
          if (v123 - v13 >= (unint64_t)v24)
            v77 = v24;
          if ((_DWORD)v21)
          {
            v5 = &v13[v77];
            continue;
          }
          v98 = (char ***)v125;
          v125 += 2;
          v99 = *v98;
          if (v99)
            *v99 = v13;
          v100 = v125;
          v125 += 2;
          v101 = *(int64_t **)v100;
          v102 = v121;
          if (v101)
            *v101 = v77;
          v13 += v77;
        }
        v121 = v102 + 1;
        v5 = v13;
        continue;
      case 'd':
      case 'u':
        goto LABEL_106;
      case 'f':
        if (v13 >= v123)
          goto LABEL_82;
        v46 = v123 - v13;
        do
        {
          v47 = *v13;
          if (*v13 < 0)
          {
            if (!__maskrune(v47, 0x4000uLL))
              goto LABEL_82;
          }
          else if ((*(_DWORD *)(v6 + 4 * v47 + 60) & 0x4000) == 0)
          {
            goto LABEL_82;
          }
          ++v13;
          --v46;
        }
        while (v46);
        v13 = v123;
LABEL_82:
        if (v123 - v13 <= v24)
          v48 = v123;
        else
          v48 = &v13[v24];
        v5 = v13;
        if (v13 < v48)
        {
          if (*v13 == 45)
            v5 = v13 + 1;
          else
            v5 = v13;
        }
        if (v5 < v48)
        {
          v49 = v48 - v5;
          while (1)
          {
            v50 = *v5;
            if ((v50 - 48) > 9)
              break;
            ++v5;
            if (!--v49)
            {
              v5 = v48;
              goto LABEL_233;
            }
          }
          if (v50 == 46)
            ++v5;
        }
LABEL_233:
        if (v5 < v48)
        {
          v78 = v48 - v5;
          while (1)
          {
            v79 = *v5;
            if ((v79 - 48) > 9)
              break;
            ++v5;
            if (!--v78)
            {
              v5 = v48;
              goto LABEL_240;
            }
          }
          if (__tolower(v79) == 101)
            ++v5;
        }
LABEL_240:
        if (v5 < v48)
        {
          v80 = *v5;
          if (v80 == 45 || v80 == 43)
            ++v5;
        }
        if (v5 < v48)
        {
          v81 = v48 - v5;
          while (*v5 - 48 <= 9)
          {
            ++v5;
            if (!--v81)
            {
              v5 = v48;
              break;
            }
          }
        }
        if ((unint64_t)(v5 - v13) > 0x3F)
          return v121;
        __memcpy_chk();
        v126[v5 - v13] = 0;
        if (sscanf(v126, "%lf", &v124) != 1)
          return v121;
        if ((_DWORD)v21)
          continue;
        v82 = (double **)v125;
        v125 += 2;
        v83 = *v82;
        if (!v83)
          return v121;
        if (v122)
        {
          if (v122 != 108)
            return v121;
          *v83 = v124;
        }
        else
        {
          v116 = v124;
          *(float *)v83 = v116;
        }
        goto LABEL_211;
      case 'i':
        v35 = 0;
        v36 = 0;
        v37 = 0;
        v34 = 1;
        goto LABEL_106;
      case 'n':
        if (v28 || v24 != 0x7FFFFFFF || (_DWORD)v21)
          return v121;
        v51 = (char ***)v125;
        v125 += 2;
        v52 = *v51;
        if (v16)
        {
          if (v52)
          {
            *v52 = v13;
            v5 = v13;
            continue;
          }
        }
        else if (v52)
        {
          *(_DWORD *)v52 = (_DWORD)v13 - v120;
          v5 = v13;
          continue;
        }
        return v121;
      case 'o':
        v34 = 0;
        v35 = 0;
        v36 = 0;
        v37 = 8;
        goto LABEL_106;
      case 'p':
        v53 = v28;
        if (!v28)
          v53 = 112;
        v122 = v53;
        goto LABEL_105;
      case 's':
        if (v28)
          return v121;
        if (v13 >= v123)
          goto LABEL_184;
        v69 = v18;
        v70 = v123 - v13;
        v5 = v13;
        do
        {
          v71 = *v5;
          if (*v5 < 0)
          {
            if (!__maskrune(v71, 0x4000uLL))
            {
LABEL_257:
              if (!v16)
              {
                v18 = v69;
                if (*v5)
                  goto LABEL_185;
                return v121;
              }
              v18 = v69;
              if ((_DWORD)v21)
                goto LABEL_186;
              goto LABEL_259;
            }
          }
          else if ((*(_DWORD *)(v6 + 4 * v71 + 60) & 0x4000) == 0)
          {
            goto LABEL_257;
          }
          ++v5;
          --v70;
        }
        while (v70);
        v13 = v123;
        v18 = v69;
LABEL_184:
        v5 = v13;
        if (!v16)
          return v121;
LABEL_185:
        if ((_DWORD)v21)
        {
LABEL_186:
          if (v5 < v123)
          {
            v72 = v123 - v5;
            while (1)
            {
              v73 = *v5;
              if (!*v5)
                break;
              v74 = (v73 & 0x80) != 0 ? __maskrune(v73, 0x4000uLL) : *(_DWORD *)(v6 + 4 * v73 + 60) & 0x4000;
              if (v74 || v24 < 1)
                break;
              --v24;
              ++v5;
              if (!--v72)
              {
                v5 = v123;
                goto LABEL_4;
              }
            }
          }
          continue;
        }
LABEL_259:
        if ((v18 & 1) != 0)
        {
          v84 = (char **)v125;
          v125 += 2;
          v85 = *v84;
          if (*v84)
          {
            if (v5 < v123)
            {
              v86 = v123 - v5;
              while (1)
              {
                v87 = *v5;
                if (!*v5)
                  break;
                v88 = *v5;
                v89 = (char)v87 < 0 ? __maskrune(v87, 0x4000uLL) : *(_DWORD *)(v6 + 4 * v87 + 60) & 0x4000;
                if (v89 || v24 < 1)
                  break;
                --v24;
                ++v5;
                *v85++ = v88;
                if (!--v86)
                {
                  v5 = v123;
                  break;
                }
              }
            }
            *v85 = 0;
            goto LABEL_211;
          }
          return v121;
        }
        v103 = v5;
        if (v5 < v123)
        {
          v104 = v123 - v5;
          v103 = v5;
          while (1)
          {
            v105 = *v103;
            if (!*v103)
              break;
            v106 = (v105 & 0x80) != 0 ? __maskrune(v105, 0x4000uLL) : *(_DWORD *)(v6 + 4 * v105 + 60) & 0x4000;
            if (v106 || v24 < 1)
              break;
            --v24;
            ++v103;
            if (!--v104)
            {
              v103 = v123;
              break;
            }
          }
        }
        v108 = (char ***)v125;
        v125 += 2;
        v109 = *v108;
        if (v109)
          *v109 = v5;
        v110 = v125;
        v125 += 2;
        v111 = *(_QWORD **)v110;
        if (v111)
          *v111 = v103 - v5;
        ++v121;
        v5 = v103;
        continue;
      case 'x':
        goto LABEL_105;
      default:
        if (v22 == 37)
        {
          if (!v28 && v24 == 0x7FFFFFFF && !(_DWORD)v21 && v13 < v123)
          {
            v5 = v13 + 1;
            if (*v13 == 37)
              continue;
          }
          return v121;
        }
        if (v22 != 88)
          return v121;
LABEL_105:
        v34 = 0;
        v36 = 0;
        v35 = 1;
        v37 = 16;
LABEL_106:
        if (v13 < v123)
        {
          v54 = v123 - v13;
          do
          {
            v55 = *v13;
            if (*v13 < 0)
            {
              if (!__maskrune(v55, 0x4000uLL))
                goto LABEL_114;
            }
            else if ((*(_DWORD *)(v6 + 4 * v55 + 60) & 0x4000) == 0)
            {
              goto LABEL_114;
            }
            ++v13;
            --v54;
          }
          while (v54);
          v13 = v123;
        }
LABEL_114:
        v56 = 1;
        if (v123 - v13 < 2 || v24 < 1)
          goto LABEL_120;
        v57 = *v13;
        if (v57 == 43)
          goto LABEL_119;
        if (v57 == 45)
        {
          v56 = 0;
LABEL_119:
          ++v13;
          --v24;
        }
LABEL_120:
        if (!v34)
        {
          if (v35 && v123 - v13 >= 2 && v24 >= 2 && *v13 == 48 && __tolower(v13[1]) == 120)
          {
            v5 = v13 + 2;
            v24 -= 2;
            v37 = 16;
          }
          else
          {
            if (v36)
            {
              v58 = (unint64_t)v123;
              if (v123 - v13 < 2 || (v59 = v24 - 2, v24 < 2) || *v13 != 48 || __tolower(v13[1]) != 98)
              {
                v37 = 2;
                goto LABEL_155;
              }
              v5 = v13 + 2;
LABEL_150:
              v24 = v59;
              v37 = 2;
              goto LABEL_156;
            }
            v5 = v13;
          }
          v58 = (unint64_t)v123;
          goto LABEL_156;
        }
        v58 = (unint64_t)v123;
        if (v123 - v13 > 2)
        {
          v59 = v24 - 2;
          if (v24 >= 2 && *v13 == 48)
          {
            if (__tolower(v13[1]) == 120)
            {
              v5 = v13 + 2;
              if ((*(_DWORD *)(v6 + 4 * v13[2] + 60) & 0x10000) != 0)
              {
                v24 -= 2;
                v37 = 16;
                goto LABEL_156;
              }
            }
            if (*v13 == 48 && __tolower(v13[1]) == 98)
            {
              v5 = v13 + 2;
              if ((v13[2] & 0xFE) == 0x30)
                goto LABEL_150;
            }
          }
        }
        if (v123 - v13 < 2 || v24 < 1 || *v13 != 48)
        {
          v37 = 10;
LABEL_155:
          v5 = v13;
          goto LABEL_156;
        }
        v60 = v13[1] & 0xF8;
        if (v60 == 48)
        {
          --v24;
          v37 = 8;
        }
        else
        {
          v37 = 10;
        }
        if (v60 == 48)
          v5 = v13 + 1;
        else
          v5 = v13;
LABEL_156:
        if ((unint64_t)v5 >= v58)
        {
          v61 = 0;
        }
        else
        {
          v61 = 0;
          v62 = v58 - (_QWORD)v5;
          while (1)
          {
            v63 = __OFSUB__(v24, 1);
            if (--v24 < 0 != v63)
              break;
            v64 = *v5;
            v65 = v64 - 48;
            if ((v64 - 48) >= 0xA)
            {
              if ((*(_DWORD *)(v6 + 4 * *v5 + 60) & 0x10000) == 0)
                break;
              v65 = __tolower(v64) - 87;
            }
            if (v65 >= (int)v37)
              break;
            v61 = v61 * v37 + v65;
            ++v5;
            if (!--v62)
            {
              v5 = v123;
              break;
            }
          }
        }
        if (v5 != v13)
        {
          if ((_DWORD)v21)
            continue;
          v66 = v56 ? v61 : -v61;
          v67 = v125;
          v125 += 2;
          v68 = *(_BYTE **)v67;
          if (v68)
          {
            if (v122 <= 103)
            {
              if (v122)
              {
                if (v122 == 72)
                {
                  *v68 = v66;
                }
                else
                {
                  if (v122 != 76)
                    return v121;
LABEL_210:
                  *(_QWORD *)v68 = v66;
                }
              }
              else
              {
                *(_DWORD *)v68 = v66;
              }
LABEL_211:
              ++v121;
              continue;
            }
            switch(v122)
            {
              case 'h':
                *(_WORD *)v68 = v66;
                goto LABEL_211;
              case 'i':
              case 'k':
              case 'm':
              case 'n':
              case 'o':
                return v121;
              case 'j':
              case 'l':
              case 'p':
                goto LABEL_210;
              default:
                if (v122 == 116 || v122 == 122)
                  goto LABEL_210;
                break;
            }
          }
        }
        return v121;
    }
  }
}

uint64_t IsAppleInternalBuild()
{
  if (IsAppleInternalBuild_sOnce != -1)
    dispatch_once(&IsAppleInternalBuild_sOnce, &__block_literal_global_85);
  return IsAppleInternalBuild_sIsInternal;
}

uint64_t GestaltGetDeviceClass()
{
  if (GestaltGetDeviceClass_sOnce != -1)
    dispatch_once(&GestaltGetDeviceClass_sOnce, &__block_literal_global_13066);
  return GestaltGetDeviceClass_deviceClass;
}

uint64_t CUXPCEncodeObject(void *a1, const char *a2, void *a3)
{
  id v5;
  id v6;
  xpc_object_t v7;

  if (a3)
  {
    v5 = a3;
    v6 = a1;
    v7 = xpc_dictionary_create(0, 0, 0);
    objc_msgSend(v5, "encodeWithXPCObject:", v7);

    xpc_dictionary_set_value(v6, a2, v7);
  }
  return 1;
}

uint64_t CUXPCDecodeBool(void *a1, const char *a2, BOOL *a3, _QWORD *a4)
{
  id v7;
  _BOOL4 v8;
  BOOL v9;
  uint64_t v10;
  void *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  v7 = a1;
  v8 = xpc_dictionary_get_BOOL(v7, a2);
  v9 = v8;
  if (v8)
  {
    *a3 = v8;
LABEL_7:
    v17 = 1;
    goto LABEL_8;
  }
  xpc_dictionary_get_value(v7, a2);
  v10 = objc_claimAutoreleasedReturnValue();
  v11 = (void *)v10;
  if (!v10)
  {
LABEL_6:

    goto LABEL_7;
  }
  if (MEMORY[0x18D78F504](v10) == MEMORY[0x1E0C812D0])
  {
    *a3 = v9;
    goto LABEL_6;
  }
  if (a4)
  {
    NSErrorF_safe((void *)*MEMORY[0x1E0CB2F90], 4294960540, (uint64_t)"XPC non-BOOL type: '%s'", v12, v13, v14, v15, v16, (uint64_t)a2);
    *a4 = (id)objc_claimAutoreleasedReturnValue();
  }

  v17 = 0;
LABEL_8:

  return v17;
}

const __CFString *_OPACKDecodeBytes(uint64_t a1, UInt8 *a2, uint64_t a3, unsigned int a4, _DWORD *a5)
{
  __int128 v10;
  const __CFString *v11;
  const __CFString *v12;
  uint64_t v14;
  CFDictionaryValueCallBacks valueCallBacks;
  _QWORD v16[3];
  CFTypeRef cf[2];
  uint64_t v18;
  int v19;

  if (gOPACKInitalizeOnce != -1)
    dispatch_once_f(&gOPACKInitalizeOnce, 0, (dispatch_function_t)_OPACKInitializeOnce);
  v19 = 0;
  cf[1] = 0;
  v18 = 0;
  v16[0] = a1;
  v16[1] = a4;
  v16[2] = a2;
  cf[0] = 0;
  if ((a4 & 2) == 0)
  {
    v10 = *(_OWORD *)(MEMORY[0x1E0C9B3A0] + 16);
    *(_OWORD *)&valueCallBacks.version = *MEMORY[0x1E0C9B3A0];
    *(_OWORD *)&valueCallBacks.release = v10;
    valueCallBacks.equal = (CFDictionaryEqualCallBack)_OPACKObjectsExactlyEqual;
    cf[0] = CFDictionaryCreateMutable(0, 0, 0, &valueCallBacks);
    if (!cf[0])
    {
      v12 = 0;
      v19 = -6728;
      if (!a5)
        return v12;
      goto LABEL_11;
    }
  }
  v11 = _OPACKDecodeObject((uint64_t)v16, a2, (unint64_t)&a2[a3], &v14, &v19);
  v12 = v11;
  if (!v19 && !v11)
    v19 = -6742;
  if (cf[0])
    CFRelease(cf[0]);
  if (a5)
LABEL_11:
    *a5 = v19;
  return v12;
}

__CFArray *_OPACKDecodeArray(uint64_t a1, UInt8 *a2, uint64_t a3, int a4, UInt8 **a5, int *a6)
{
  __CFArray *Mutable;
  uint64_t v11;
  int v12;
  const void *v13;
  const void *v14;
  int v15;
  int v17;
  const void *v18;
  const void *v19;
  int v20;
  int v21;

  Mutable = CFArrayCreateMutable(0, 0, MEMORY[0x1E0C9B378]);
  if (!Mutable)
  {
    v15 = -6728;
    goto LABEL_8;
  }
  if ((a4 + 48) >= 0xFu)
  {
    while (1)
    {
      v17 = *(_DWORD *)(a1 + 40);
      if (v17 > 31)
        break;
      *(_DWORD *)(a1 + 40) = v17 + 1;
      v18 = (const void *)_OPACKDecodeObject(a1, a2);
      v19 = v18;
      --*(_DWORD *)(a1 + 40);
      if (!v18)
        goto LABEL_7;
      CFArrayAppendValue(Mutable, v18);
      CFRelease(v19);
    }
  }
  else
  {
    v11 = (a4 - 208);
    if (a4 == 208)
    {
LABEL_7:
      v15 = 0;
      goto LABEL_8;
    }
    while (1)
    {
      v12 = *(_DWORD *)(a1 + 40);
      if (v12 >= 32)
        break;
      *(_DWORD *)(a1 + 40) = v12 + 1;
      v13 = (const void *)_OPACKDecodeObject(a1, a2);
      v14 = v13;
      --*(_DWORD *)(a1 + 40);
      if (!v13)
      {
        v20 = -6742;
        goto LABEL_14;
      }
      CFArrayAppendValue(Mutable, v13);
      CFRelease(v14);
      if (!--v11)
        goto LABEL_7;
    }
  }
  v20 = -6751;
LABEL_14:
  v21 = v20;
  CFRelease(Mutable);
  Mutable = 0;
  v15 = v21;
LABEL_8:
  *a5 = a2;
  *a6 = v15;
  return Mutable;
}

__CFDictionary *_OPACKDecodeDictionary(uint64_t a1, UInt8 *a2, uint64_t a3, int a4, UInt8 **a5, int *a6)
{
  __CFDictionary *Mutable;
  uint64_t v11;
  int v12;
  const void *v13;
  int v14;
  const void *v15;
  const void *v16;
  int v17;
  int v19;
  int v20;
  const void *v21;
  const void *v22;
  int v23;
  int v24;

  Mutable = CFDictionaryCreateMutable(0, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  if (!Mutable)
  {
    v17 = -6728;
    goto LABEL_9;
  }
  if ((a4 + 32) >= 0xFu)
  {
    while (1)
    {
      v19 = *(_DWORD *)(a1 + 40);
      if (v19 > 31)
        break;
      *(_DWORD *)(a1 + 40) = v19 + 1;
      v13 = (const void *)_OPACKDecodeObject(a1, a2);
      v20 = *(_DWORD *)(a1 + 40);
      *(_DWORD *)(a1 + 40) = v20 - 1;
      if (!v13)
        goto LABEL_8;
      *(_DWORD *)(a1 + 40) = v20;
      v21 = (const void *)_OPACKDecodeObject(a1, a2);
      v22 = v21;
      --*(_DWORD *)(a1 + 40);
      if (!v21)
      {
LABEL_15:
        v24 = -6742;
        CFRelease(v13);
        goto LABEL_18;
      }
      CFDictionaryAddValue(Mutable, v13, v21);
      CFRelease(v13);
      CFRelease(v22);
    }
  }
  else
  {
    v11 = (a4 - 224);
    if (a4 == 224)
    {
LABEL_8:
      v17 = 0;
      goto LABEL_9;
    }
    while (1)
    {
      v12 = *(_DWORD *)(a1 + 40);
      if (v12 >= 32)
        break;
      *(_DWORD *)(a1 + 40) = v12 + 1;
      v13 = (const void *)_OPACKDecodeObject(a1, a2);
      v14 = *(_DWORD *)(a1 + 40);
      *(_DWORD *)(a1 + 40) = v14 - 1;
      if (!v13)
      {
        v23 = -6742;
        goto LABEL_17;
      }
      *(_DWORD *)(a1 + 40) = v14;
      v15 = (const void *)_OPACKDecodeObject(a1, a2);
      v16 = v15;
      --*(_DWORD *)(a1 + 40);
      if (!v15)
        goto LABEL_15;
      CFDictionaryAddValue(Mutable, v13, v15);
      CFRelease(v13);
      CFRelease(v16);
      if (!--v11)
        goto LABEL_8;
    }
  }
  v23 = -6751;
LABEL_17:
  v24 = v23;
LABEL_18:
  CFRelease(Mutable);
  Mutable = 0;
  v17 = v24;
LABEL_9:
  *a5 = a2;
  *a6 = v17;
  return Mutable;
}

const __CFString *_OPACKDecodeObject(uint64_t a1, UInt8 *bytes, unint64_t a3, _QWORD *a4, int *a5)
{
  int v9;
  unsigned __int8 *v10;
  unint64_t v11;
  const __CFString *v12;
  __CFDictionary *v13;
  char *v14;
  int v15;
  uint64_t v16;
  unint64_t v17;
  int v18;
  BOOL v20;
  CFNumberType v21;
  const __CFString **v22;
  unint64_t v23;
  UInt8 *v24;
  const __CFString *v25;
  CFNumberRef v26;
  unsigned __int8 v27;
  CFUUIDRef v28;
  unsigned __int8 *v29;
  __CFDictionary *v30;
  char *v31;
  unsigned __int8 *v32;
  uint64_t valuePtr;
  CFUUIDBytes v34;

  if ((uint64_t)(a3 - (_QWORD)bytes) < 1)
    goto LABEL_92;
  v10 = bytes + 1;
  v9 = *bytes;
  v32 = bytes + 1;
  if ((v9 - 64) <= 0x20)
  {
    v11 = (v9 - 64);
    if (v9 == 64)
    {
      v12 = &stru_1E25DF9F8;
LABEL_17:
      v32 = v10;
      goto LABEL_18;
    }
    if (a3 - (unint64_t)v10 >= v11)
    {
      v12 = CFStringCreateWithBytes(0, bytes + 1, (v9 - 64), 0x8000100u, 0);
      if (v12)
      {
        v10 += v11;
LABEL_7:
        v13 = *(__CFDictionary **)(a1 + 24);
        if (v13)
        {
          v14 = *(char **)(a1 + 32);
          *(_QWORD *)(a1 + 32) = v14 + 1;
          CFDictionaryAddValue(v13, v14, v12);
        }
        goto LABEL_17;
      }
      goto LABEL_100;
    }
LABEL_92:
    v12 = 0;
    v18 = -6750;
    goto LABEL_19;
  }
  v15 = v9 - 7;
  if ((v9 - 7) > 0x28)
  {
    if ((v9 - 97) <= 0xE)
    {
      switch(v9)
      {
        case 'a':
          if ((uint64_t)(a3 - (_QWORD)v10) < 1)
            goto LABEL_92;
          v16 = 0;
          v17 = bytes[1];
          v10 = bytes + 2;
          goto LABEL_67;
        case 'b':
          if ((uint64_t)(a3 - (_QWORD)v10) < 2)
            goto LABEL_92;
          v16 = 0;
          v17 = *(unsigned __int16 *)(bytes + 1);
          v10 = bytes + 3;
          goto LABEL_67;
        case 'c':
          if ((uint64_t)(a3 - (_QWORD)v10) < 4)
            goto LABEL_92;
          v16 = 0;
          v17 = *(unsigned int *)(bytes + 1);
          v10 = bytes + 5;
          goto LABEL_67;
        case 'd':
          if ((uint64_t)(a3 - (_QWORD)v10) < 8)
            goto LABEL_92;
          v17 = *(_QWORD *)(bytes + 1);
          if ((v17 & 0x8000000000000000) != 0)
            goto LABEL_71;
          v16 = 0;
          v10 = bytes + 9;
          goto LABEL_67;
        default:
          if (v9 != 111)
          {
            v12 = 0;
            goto LABEL_42;
          }
          if ((unint64_t)v10 >= a3)
            goto LABEL_92;
          v23 = a3 - (_QWORD)v10;
          v24 = bytes + 1;
          v12 = 0;
          while (*v24)
          {
            ++v24;
            v18 = -6750;
            if (!--v23)
              goto LABEL_19;
          }
          v17 = v24 - v10;
          if (v24 - v10 < 0)
          {
LABEL_71:
            v12 = 0;
            v18 = -6743;
            goto LABEL_19;
          }
          v16 = 1;
LABEL_67:
          if (a3 - (unint64_t)v10 < v17)
            goto LABEL_92;
          v12 = CFStringCreateWithBytes(0, v10, v17, 0x8000100u, 0);
          if (!v12)
            goto LABEL_100;
          v10 += v16 + v17;
          if (!v17)
            goto LABEL_17;
          goto LABEL_7;
      }
    }
    if ((v9 - 48) <= 6)
    {
      valuePtr = 0;
      v18 = -6762;
      switch(v9)
      {
        case '0':
          if ((uint64_t)(a3 - (_QWORD)v10) < 1)
            goto LABEL_101;
          v10 = bytes + 2;
          LOBYTE(valuePtr) = bytes[1];
          v20 = (valuePtr + 1) < 0x29u;
          v21 = kCFNumberSInt8Type;
          goto LABEL_58;
        case '1':
          if ((uint64_t)(a3 - (_QWORD)v10) < 2)
            goto LABEL_101;
          LOWORD(valuePtr) = *(_WORD *)(bytes + 1);
          v10 = bytes + 3;
          v20 = (unsigned __int16)(valuePtr + 1) < 0x29u;
          v21 = kCFNumberSInt16Type;
          goto LABEL_58;
        case '2':
          if ((uint64_t)(a3 - (_QWORD)v10) < 4)
            goto LABEL_101;
          LODWORD(valuePtr) = *(_DWORD *)(bytes + 1);
          v10 = bytes + 5;
          v20 = (valuePtr + 1) < 0x29;
          v21 = kCFNumberSInt32Type;
          goto LABEL_58;
        case '3':
          if ((uint64_t)(a3 - (_QWORD)v10) < 8)
            goto LABEL_101;
          valuePtr = *(_QWORD *)(bytes + 1);
          v10 = bytes + 9;
          v20 = (unint64_t)(valuePtr + 1) < 0x29;
          v21 = kCFNumberSInt64Type;
          goto LABEL_58;
        case '5':
          if ((uint64_t)(a3 - (_QWORD)v10) < 4)
            goto LABEL_101;
          v20 = 0;
          LODWORD(valuePtr) = *(_DWORD *)(bytes + 1);
          v10 = bytes + 5;
          v21 = kCFNumberFloat32Type;
          goto LABEL_58;
        case '6':
          if ((uint64_t)(a3 - (_QWORD)v10) < 8)
          {
LABEL_101:
            v18 = -6750;
LABEL_102:
            v12 = 0;
            goto LABEL_19;
          }
          v20 = 0;
          valuePtr = *(_QWORD *)(bytes + 1);
          v10 = bytes + 9;
          v21 = kCFNumberFloat64Type;
LABEL_58:
          v26 = CFNumberCreate(0, v21, &valuePtr);
          v12 = (const __CFString *)v26;
          if (v26 && !v20)
            goto LABEL_7;
          v32 = v10;
          if (v26)
            goto LABEL_18;
          break;
        default:
          goto LABEL_102;
      }
LABEL_100:
      v18 = -6728;
      goto LABEL_19;
    }
    v12 = 0;
    switch(v9)
    {
      case 1:
        v22 = (const __CFString **)MEMORY[0x1E0C9AE50];
        goto LABEL_47;
      case 2:
        v22 = (const __CFString **)MEMORY[0x1E0C9AE40];
        goto LABEL_47;
      case 3:
        goto LABEL_18;
      case 4:
        v22 = (const __CFString **)MEMORY[0x1E0C9B0D0];
LABEL_47:
        v12 = *v22;
        goto LABEL_18;
      default:
        LODWORD(valuePtr) = 0;
        if ((v9 + 96) <= 0x24u)
        {
          v25 = (const __CFString *)_OPACKDecodeUID(a1, bytes + 1, a3, v9, &v32, (int *)&valuePtr);
          goto LABEL_73;
        }
        if ((v9 & 0xF0) == 0xD0)
        {
          v25 = (const __CFString *)_OPACKDecodeArray(a1, bytes + 1, a3, v9, &v32, (int *)&valuePtr);
        }
        else
        {
          if ((v9 & 0xF0) == 0xE0)
          {
            v25 = (const __CFString *)_OPACKDecodeDictionary(a1, bytes + 1, a3, v9, &v32, (int *)&valuePtr);
            goto LABEL_73;
          }
          v27 = v9 - 112;
          if ((v9 - 112) <= 0x20)
          {
            if (a3 - (unint64_t)v10 < v27)
              goto LABEL_92;
            v12 = (const __CFString *)CFDataCreate(0, bytes + 1, (v9 - 112));
            if (!v12)
              goto LABEL_100;
            v32 = &v10[v27];
            if (v27 < 2u)
              goto LABEL_18;
            goto LABEL_98;
          }
          if ((v9 + 111) > 3u)
          {
            switch(v9)
            {
              case 5:
                if ((uint64_t)(a3 - (_QWORD)v10) < 16)
                  goto LABEL_92;
                if ((*(_BYTE *)(a1 + 8) & 8) != 0)
                {
                  v28 = (CFUUIDRef)objc_msgSend(objc_alloc(MEMORY[0x1E0CB3A28]), "initWithUUIDBytes:", v10);
                }
                else
                {
                  *(_QWORD *)&v34.byte0 = *(_QWORD *)(bytes + 1);
                  *(_QWORD *)&v34.byte8 = *(_QWORD *)(bytes + 9);
                  v28 = CFUUIDCreateFromUUIDBytes(0, v34);
                }
                v12 = (const __CFString *)v28;
                if (!v28)
                  goto LABEL_100;
                v29 = bytes + 17;
                break;
              case 6:
                if ((uint64_t)(a3 - (_QWORD)v10) < 8)
                  goto LABEL_92;
                v12 = (const __CFString *)CFDateCreate(0, *(CFAbsoluteTime *)v10);
                if (!v12)
                  goto LABEL_100;
                v29 = bytes + 9;
                break;
              case 159:
                v25 = (const __CFString *)_OPACKDecodeDataChunks(a1, (char *)bytes + 1, a3, (char **)&v32, (int *)&valuePtr);
                goto LABEL_73;
              default:
                v12 = 0;
                v18 = -6735;
                goto LABEL_19;
            }
            v32 = v29;
LABEL_98:
            v30 = *(__CFDictionary **)(a1 + 24);
            if (v30)
            {
              v31 = *(char **)(a1 + 32);
              *(_QWORD *)(a1 + 32) = v31 + 1;
              CFDictionaryAddValue(v30, v31, v12);
            }
            goto LABEL_18;
          }
          v25 = (const __CFString *)_OPACKDecodeData(a1, bytes + 1, a3, v9, (const UInt8 **)&v32, (int *)&valuePtr);
        }
LABEL_73:
        v12 = v25;
        v18 = valuePtr;
        if (!(_DWORD)valuePtr)
          goto LABEL_18;
        goto LABEL_19;
    }
  }
  v12 = (const __CFString *)gCFNumbers[v15];
  if (v12)
  {
    CFRetain((CFTypeRef)gCFNumbers[v15]);
LABEL_18:
    v18 = 0;
    *a4 = v32;
    goto LABEL_19;
  }
LABEL_42:
  v18 = -6762;
LABEL_19:
  if (a5)
    *a5 = v18;
  return v12;
}

const void *_OPACKDecodeUID(uint64_t a1, unsigned __int8 *a2, uint64_t a3, int a4, unsigned __int8 **a5, int *a6)
{
  unsigned __int8 *v8;
  unint64_t v9;
  const __CFDictionary *v10;
  const void *Value;
  const void *v12;
  int v13;

  v8 = a2;
  if ((a4 + 96) > 0x20u)
  {
    switch(a4)
    {
      case 193:
        if (a3 - (uint64_t)a2 < 1)
          goto LABEL_19;
        v8 = a2 + 1;
        v9 = *a2;
        goto LABEL_3;
      case 194:
        if (a3 - (uint64_t)a2 < 2)
          goto LABEL_19;
        v8 = a2 + 2;
        v9 = *(unsigned __int16 *)a2;
        goto LABEL_3;
      case 195:
        if (a3 - (uint64_t)a2 < 3)
          goto LABEL_19;
        v9 = *(unsigned __int16 *)a2 | ((unint64_t)a2[2] << 16);
        v8 += 3;
        goto LABEL_3;
      case 196:
        if (a3 - (uint64_t)a2 >= 4)
        {
          v8 = a2 + 4;
          v9 = *(unsigned int *)a2;
          goto LABEL_3;
        }
LABEL_19:
        v12 = 0;
        v13 = -6750;
        break;
      default:
        v12 = 0;
        v13 = -6762;
        break;
    }
  }
  else
  {
    v9 = (a4 - 160);
LABEL_3:
    v10 = *(const __CFDictionary **)(a1 + 24);
    if (v10)
    {
      Value = CFDictionaryGetValue(v10, (const void *)v9);
      v12 = Value;
      if (Value)
      {
        CFRetain(Value);
        v13 = 0;
      }
      else
      {
        v13 = -6708;
      }
    }
    else
    {
      v12 = 0;
      v13 = -6732;
    }
  }
  *a5 = v8;
  *a6 = v13;
  return v12;
}

CFDataRef _OPACKDecodeData(uint64_t a1, UInt8 *bytes, uint64_t a3, int a4, const UInt8 **a5, int *a6)
{
  const UInt8 *v8;
  unint64_t v10;
  CFDataRef v11;
  int v12;
  uint64_t v13;
  __CFDictionary *v14;
  char *v15;
  CoreUtilsNSSubrangeData *v17;
  int v18;

  v8 = bytes;
  switch(a4)
  {
    case 145:
      if (a3 - (uint64_t)bytes < 1)
        goto LABEL_24;
      v8 = bytes + 1;
      v10 = *bytes;
      goto LABEL_12;
    case 146:
      if (a3 - (uint64_t)bytes < 2)
        goto LABEL_24;
      v8 = bytes + 2;
      v10 = *(unsigned __int16 *)bytes;
      goto LABEL_12;
    case 147:
      if (a3 - (uint64_t)bytes < 4)
        goto LABEL_24;
      v8 = bytes + 4;
      v10 = *(unsigned int *)bytes;
      goto LABEL_12;
    case 148:
      if (a3 - (uint64_t)bytes < 8)
        goto LABEL_24;
      v8 = bytes + 8;
      v10 = *(_QWORD *)bytes;
      if ((*(_QWORD *)bytes & 0x8000000000000000) != 0)
      {
        v11 = 0;
        v12 = -6743;
      }
      else
      {
LABEL_12:
        if (a3 - (uint64_t)v8 < v10)
        {
LABEL_24:
          v11 = 0;
          v12 = -6750;
          goto LABEL_20;
        }
        v18 = 0;
        v13 = *(_QWORD *)a1;
        if (*(_QWORD *)a1 && (*(_BYTE *)(a1 + 8) & 4) != 0)
        {
          v17 = CFDataCreateSubdataWithRangeNoCopy(v13, (uint64_t)&v8[-*(_QWORD *)(a1 + 16)], v10, &v18);
          v11 = (CFDataRef)v17;
          v12 = v18;
          if (v18)
            goto LABEL_20;
          if (!v17)
          {
LABEL_5:
            v12 = -6762;
            goto LABEL_20;
          }
        }
        else
        {
          v11 = CFDataCreate(0, v8, v10);
          if (!v11)
          {
            v12 = -6728;
            goto LABEL_20;
          }
        }
        v8 += v10;
        if (v10 >= 2)
        {
          v14 = *(__CFDictionary **)(a1 + 24);
          if (v14)
          {
            v15 = *(char **)(a1 + 32);
            *(_QWORD *)(a1 + 32) = v15 + 1;
            CFDictionaryAddValue(v14, v15, v11);
          }
        }
        v12 = 0;
      }
LABEL_20:
      *a5 = v8;
      *a6 = v12;
      return v11;
    default:
      v11 = 0;
      goto LABEL_5;
  }
}

uint64_t CUXPCDecodeDouble(void *a1, const char *a2, double *a3)
{
  id v5;

  v5 = a1;
  *a3 = xpc_dictionary_get_double(v5, a2);

  return 1;
}

BOOL CUXPCDecodeObject(void *a1, const char *a2, objc_class *a3, id *a4, _QWORD *a5)
{
  uint64_t v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;
  _BOOL8 v17;

  xpc_dictionary_get_value(a1, a2);
  v9 = objc_claimAutoreleasedReturnValue();
  v10 = (void *)v9;
  if (v9)
  {
    if (MEMORY[0x18D78F504](v9) == MEMORY[0x1E0C812F8])
    {
      v16 = (void *)objc_msgSend([a3 alloc], "initWithXPCObject:error:", v10, a5);
      v17 = v16 != 0;
      if (v16)
        objc_storeStrong(a4, v16);

    }
    else if (a5)
    {
      NSErrorF_safe((void *)*MEMORY[0x1E0CB2F90], 4294960540, (uint64_t)"XPC non-dict type: '%s'", v11, v12, v13, v14, v15, (uint64_t)a2);
      v17 = 0;
      *a5 = (id)objc_claimAutoreleasedReturnValue();
    }
    else
    {
      v17 = 0;
    }
  }
  else
  {
    v17 = 1;
  }

  return v17;
}

uint64_t CUXPCDecodeNSArrayOfClass(void *a1, const char *a2, uint64_t a3, id *a4, _QWORD *a5)
{
  id v9;
  uint64_t v10;
  void *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  id v18;
  void *v19;
  _QWORD applier[8];
  uint64_t v22;
  uint64_t *v23;
  uint64_t v24;
  uint64_t (*v25)(uint64_t, uint64_t);
  void (*v26)(uint64_t);
  id v27;

  v9 = a1;
  xpc_dictionary_get_value(v9, a2);
  v10 = objc_claimAutoreleasedReturnValue();
  v11 = (void *)v10;
  if (!v10)
    goto LABEL_9;
  if (MEMORY[0x18D78F504](v10) == MEMORY[0x1E0C812C8])
  {
    v22 = 0;
    v23 = &v22;
    v24 = 0x3032000000;
    v25 = __Block_byref_object_copy__10155;
    v26 = __Block_byref_object_dispose__10156;
    v27 = 0;
    v18 = objc_alloc_init(MEMORY[0x1E0C99DE8]);
    applier[0] = MEMORY[0x1E0C809B0];
    applier[1] = 3221225472;
    applier[2] = __CUXPCDecodeNSArrayOfClass_block_invoke;
    applier[3] = &unk_1E25DE650;
    applier[6] = a2;
    applier[7] = a3;
    applier[4] = v18;
    applier[5] = &v22;
    xpc_array_apply(v11, applier);
    v19 = (void *)v23[5];
    if (v19)
    {
      if (a5)
        *a5 = objc_retainAutorelease(v19);
    }
    else
    {
      objc_storeStrong(a4, v18);
    }

    _Block_object_dispose(&v22, 8);
    if (v19)
      goto LABEL_8;
LABEL_9:
    v17 = 1;
    goto LABEL_10;
  }
  if (!a5)
  {
LABEL_8:
    v17 = 0;
    goto LABEL_10;
  }
  NSErrorF_safe((void *)*MEMORY[0x1E0CB2F90], 4294960540, (uint64_t)"XPC non-array type: '%s'", v12, v13, v14, v15, v16, (uint64_t)a2);
  v17 = 0;
  *a5 = (id)objc_claimAutoreleasedReturnValue();
LABEL_10:

  return v17;
}

void sub_18D418D9C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_list va;

  va_start(va, a11);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void CUXPCEncodeNSArrayOfObjects(void *a1, const char *a2, void *a3)
{
  id v5;
  id v6;
  xpc_object_t v7;
  id v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void *v13;
  xpc_object_t v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  _BYTE v19[128];
  uint64_t v20;

  v20 = *MEMORY[0x1E0C80C00];
  v5 = a1;
  v6 = a3;
  if (v6)
  {
    v7 = xpc_array_create(0, 0);
    v15 = 0u;
    v16 = 0u;
    v17 = 0u;
    v18 = 0u;
    v8 = v6;
    v9 = objc_msgSend(v8, "countByEnumeratingWithState:objects:count:", &v15, v19, 16);
    if (v9)
    {
      v10 = v9;
      v11 = *(_QWORD *)v16;
      do
      {
        v12 = 0;
        do
        {
          if (*(_QWORD *)v16 != v11)
            objc_enumerationMutation(v8);
          v13 = *(void **)(*((_QWORD *)&v15 + 1) + 8 * v12);
          v14 = xpc_dictionary_create(0, 0, 0);
          objc_msgSend(v13, "encodeWithXPCObject:", v14, (_QWORD)v15);
          xpc_array_append_value(v7, v14);

          ++v12;
        }
        while (v10 != v12);
        v10 = objc_msgSend(v8, "countByEnumeratingWithState:objects:count:", &v15, v19, 16);
      }
      while (v10);
    }

    xpc_dictionary_set_value(v5, a2, v7);
  }

}

int64_t CFGetInt64Ranged(const __CFString *a1, int64_t a2, int64_t a3, int *a4)
{
  int64_t result;
  int v8;
  int v9;

  v9 = 0;
  result = CFGetInt64(a1, &v9);
  v8 = v9;
  if (v9)
  {
LABEL_5:
    if (!a4)
      return result;
    goto LABEL_6;
  }
  if (result >= a2 && result <= a3)
  {
    v8 = 0;
    goto LABEL_5;
  }
  v8 = -6710;
  if (!a4)
    return result;
LABEL_6:
  *a4 = v8;
  return result;
}

unint64_t CFGetInt64(const __CFString *a1, int *a2)
{
  CFTypeID v4;
  double v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  const UInt8 *BytePtr;
  CFIndex Length;
  unint64_t v16;
  const UInt8 *v17;
  unsigned int v18;
  unint64_t v20;
  double valuePtr[17];

  valuePtr[16] = *(double *)MEMORY[0x1E0C80C00];
  v20 = 0;
  if (!a1)
  {
    v12 = -6705;
    goto LABEL_39;
  }
  v4 = CFGetTypeID(a1);
  if (v4 == CFNumberGetTypeID())
  {
    if (CFNumberIsFloatType((CFNumberRef)a1))
    {
      valuePtr[0] = 0.0;
      CFNumberGetValue((CFNumberRef)a1, kCFNumberDoubleType, valuePtr);
      v5 = valuePtr[0];
      if (valuePtr[0] < -9.22337204e18)
      {
        v6 = 0x8000000000000000;
LABEL_26:
        v20 = v6;
        v12 = -6710;
        goto LABEL_39;
      }
      if (valuePtr[0] >= 9.22337204e18)
      {
        v6 = 0x7FFFFFFFFFFFFFFFLL;
        goto LABEL_26;
      }
      goto LABEL_36;
    }
    CFNumberGetValue((CFNumberRef)a1, kCFNumberSInt64Type, &v20);
LABEL_38:
    v12 = 0;
    goto LABEL_39;
  }
  if ((const __CFString *)*MEMORY[0x1E0C9AE50] == a1)
    goto LABEL_22;
  if ((const __CFString *)*MEMORY[0x1E0C9AE40] == a1)
  {
LABEL_27:
    v20 = 0;
    goto LABEL_38;
  }
  if (v4 == CFStringGetTypeID())
  {
    if (CFStringGetCString(a1, (char *)valuePtr, 128, 0x600u))
    {
      if (strnicmpx((unsigned __int8 *)valuePtr, -1, "true")
        && strnicmpx((unsigned __int8 *)valuePtr, -1, "yes")
        && strnicmpx((unsigned __int8 *)valuePtr, -1, "y")
        && strnicmpx((unsigned __int8 *)valuePtr, -1, "on")
        && strnicmpx((unsigned __int8 *)valuePtr, -1, "1"))
      {
        if (strnicmpx((unsigned __int8 *)valuePtr, -1, "false")
          && strnicmpx((unsigned __int8 *)valuePtr, -1, "no")
          && strnicmpx((unsigned __int8 *)valuePtr, -1, "n")
          && strnicmpx((unsigned __int8 *)valuePtr, -1, "off")
          && strnicmpx((unsigned __int8 *)valuePtr, -1, "0"))
        {
          if (SNScanF((char *)valuePtr, 0xFFFFFFFFFFFFFFFFLL, "%lli", v7, v8, v9, v10, v11, (int)&v20) != 1)
          {
            v12 = -6717;
            goto LABEL_39;
          }
          goto LABEL_38;
        }
        goto LABEL_27;
      }
LABEL_22:
      v13 = 1;
LABEL_37:
      v20 = v13;
      goto LABEL_38;
    }
    goto LABEL_45;
  }
  if (v4 == CFDataGetTypeID())
  {
    BytePtr = CFDataGetBytePtr((CFDataRef)a1);
    Length = CFDataGetLength((CFDataRef)a1);
    if (Length <= 8)
    {
      if (Length >= 1)
      {
        v16 = 0;
        v17 = &BytePtr[Length];
        do
        {
          v18 = *BytePtr++;
          v16 = v18 | (v16 << 8);
          v20 = v16;
        }
        while (BytePtr < v17);
      }
      goto LABEL_38;
    }
LABEL_45:
    v12 = -6743;
    goto LABEL_39;
  }
  if (v4 == CFDateGetTypeID())
  {
    v5 = MEMORY[0x18D78D644](a1);
LABEL_36:
    v13 = (uint64_t)v5;
    goto LABEL_37;
  }
  if (v4 == CFNullGetTypeID())
    goto LABEL_38;
  v12 = -6756;
LABEL_39:
  if (a2)
    *a2 = v12;
  return v20;
}

uint64_t CUXPCDecodeNSArrayOfNSData(void *a1, const char *a2, uint64_t a3, uint64_t a4, id *a5, _QWORD *a6)
{
  id v11;
  uint64_t v12;
  void *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  id v20;
  void *v21;
  _QWORD applier[9];
  uint64_t v24;
  uint64_t *v25;
  uint64_t v26;
  uint64_t (*v27)(uint64_t, uint64_t);
  void (*v28)(uint64_t);
  id v29;

  v11 = a1;
  xpc_dictionary_get_value(v11, a2);
  v12 = objc_claimAutoreleasedReturnValue();
  v13 = (void *)v12;
  if (!v12)
    goto LABEL_9;
  if (MEMORY[0x18D78F504](v12) == MEMORY[0x1E0C812C8])
  {
    v24 = 0;
    v25 = &v24;
    v26 = 0x3032000000;
    v27 = __Block_byref_object_copy__10155;
    v28 = __Block_byref_object_dispose__10156;
    v29 = 0;
    v20 = objc_alloc_init(MEMORY[0x1E0C99DE8]);
    applier[0] = MEMORY[0x1E0C809B0];
    applier[1] = 3221225472;
    applier[2] = __CUXPCDecodeNSArrayOfNSData_block_invoke;
    applier[3] = &unk_1E25DE678;
    applier[6] = a2;
    applier[7] = a3;
    applier[8] = a4;
    applier[4] = v20;
    applier[5] = &v24;
    xpc_array_apply(v13, applier);
    v21 = (void *)v25[5];
    if (v21)
    {
      if (a6)
        *a6 = objc_retainAutorelease(v21);
    }
    else
    {
      objc_storeStrong(a5, v20);
    }

    _Block_object_dispose(&v24, 8);
    if (v21)
      goto LABEL_8;
LABEL_9:
    v19 = 1;
    goto LABEL_10;
  }
  if (!a6)
  {
LABEL_8:
    v19 = 0;
    goto LABEL_10;
  }
  NSErrorF_safe((void *)*MEMORY[0x1E0CB2F90], 4294960540, (uint64_t)"XPC non-array type: '%s'", v14, v15, v16, v17, v18, (uint64_t)a2);
  v19 = 0;
  *a6 = (id)objc_claimAutoreleasedReturnValue();
LABEL_10:

  return v19;
}

void sub_18D419430(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_list va;

  va_start(va, a11);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void CUXPCEncodeNSArrayOfNSData(void *a1, const char *a2, void *a3, size_t a4, size_t a5)
{
  id v9;
  id v10;
  xpc_object_t v11;
  id v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t i;
  void *v17;
  size_t v18;
  xpc_object_t v20;
  const char *v21;
  void *v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  _BYTE v27[128];
  uint64_t v28;

  v28 = *MEMORY[0x1E0C80C00];
  v9 = a1;
  v10 = a3;
  if (v10)
  {
    v21 = a2;
    v22 = v9;
    v11 = xpc_array_create(0, 0);
    v23 = 0u;
    v24 = 0u;
    v25 = 0u;
    v26 = 0u;
    v12 = v10;
    v13 = objc_msgSend(v12, "countByEnumeratingWithState:objects:count:", &v23, v27, 16);
    if (v13)
    {
      v14 = v13;
      v15 = *(_QWORD *)v24;
      do
      {
        for (i = 0; i != v14; ++i)
        {
          if (*(_QWORD *)v24 != v15)
            objc_enumerationMutation(v12);
          v17 = *(void **)(*((_QWORD *)&v23 + 1) + 8 * i);
          v18 = objc_msgSend(v17, "length", v21, v22, (_QWORD)v23);
          if (v18 >= a4 && v18 <= a5)
          {
            v20 = xpc_data_create((const void *)objc_msgSend(objc_retainAutorelease(v17), "bytes"), v18);
            xpc_array_append_value(v11, v20);

          }
        }
        v14 = objc_msgSend(v12, "countByEnumeratingWithState:objects:count:", &v23, v27, 16);
      }
      while (v14);
    }

    v9 = v22;
    xpc_dictionary_set_value(v22, v21, v11);

  }
}

uint64_t NSErrorToOSStatus(void *a1)
{
  return NSErrorToOSStatusEx(a1, 0);
}

void sub_18D4196B8(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void PrintFWriteCFObjectApplier(uint64_t a1, void *a2, uint64_t a3)
{
  void *v3;
  int v6;
  int v7;
  int v8;
  CFTypeID v9;
  int v10;
  uint64_t v11;
  void *v12;
  uint64_t v13;
  int v14;
  uint64_t (*v15)(const char *, uint64_t);
  const char *v16;
  int v17;
  const char *v18;
  const char *v19;
  uint64_t v20;
  void *v21;
  uint64_t v22;
  int v23;
  int v24;
  uint64_t v25;
  int v26;
  int v27;
  int v28;
  int v29;
  id v30;

  if (*(_DWORD *)(a3 + 24))
  {
    v3 = 0;
    goto LABEL_47;
  }
  v6 = *(unsigned __int8 *)(*(_QWORD *)(a3 + 8) + 3);
  v7 = PrintFWriteCFObjectLevel(a3, a1, 0);
  if (v7 < 0)
  {
    v3 = 0;
LABEL_46:
    *(_DWORD *)(a3 + 24) = v7;
    goto LABEL_47;
  }
  v8 = (**(uint64_t (***)(const char *, uint64_t))a3)(" : ", 3);
  if (v8 < 0)
  {
    v3 = 0;
    v7 = v8;
    goto LABEL_46;
  }
  v9 = CFGetTypeID(a2);
  if (v9 == CFSetGetTypeID())
  {
    objc_msgSend(a2, "allObjects");
    v3 = (void *)objc_claimAutoreleasedReturnValue();
    if (!v3)
      goto LABEL_47;
    a2 = v3;
    v9 = CFGetTypeID(v3);
    v30 = a2;
  }
  else
  {
    v30 = 0;
  }
  v10 = v8 + v7;
  if (v9 == CFArrayGetTypeID())
  {
    if (CFArrayGetCount((CFArrayRef)a2) >= 1)
    {
      if (v6 == 2)
      {
        v11 = a3;
        v12 = a2;
        v13 = 1;
        goto LABEL_17;
      }
      v7 = (**(uint64_t (***)(const char *, uint64_t))a3)("\n", 1);
      if ((v7 & 0x80000000) == 0)
      {
        v20 = a3;
        v21 = a2;
        v22 = 1;
LABEL_37:
        v26 = PrintFWriteCFObjectLevel(v20, v21, v22);
        if ((v26 & 0x80000000) == 0)
        {
          v10 += v7 + v26;
          v15 = **(uint64_t (***)(const char *, uint64_t))a3;
          v16 = ",\n";
          goto LABEL_39;
        }
        v7 = v26;
        goto LABEL_51;
      }
      goto LABEL_51;
    }
    v15 = **(uint64_t (***)(const char *, uint64_t))a3;
    v18 = "[],\n";
    v19 = "[], ";
  }
  else
  {
    if (v9 != CFDictionaryGetTypeID())
    {
      if (v9 == CFDataGetTypeID())
      {
        v17 = PrintFWriteCFObjectLevel(a3, a2, 0);
        v7 = v17;
        if (v17 < 0)
          goto LABEL_51;
        v10 += v17;
      }
      else
      {
        v23 = *(_DWORD *)(a3 + 16);
        *(_DWORD *)(a3 + 16) = 0;
        v24 = PrintFWriteCFObjectLevel(a3, a2, 0);
        v7 = v24;
        if (v24 < 0)
          goto LABEL_51;
        v10 += v24;
        *(_DWORD *)(a3 + 16) = v23;
      }
      v15 = **(uint64_t (***)(const char *, uint64_t))a3;
      if (v6 == 2)
        v16 = ", ";
      else
        v16 = ",\n";
      goto LABEL_39;
    }
    if (CFDictionaryGetCount((CFDictionaryRef)a2) >= 1)
    {
      if (v6 == 2)
      {
        v11 = a3;
        v12 = a2;
        v13 = 0;
LABEL_17:
        v14 = PrintFWriteCFObjectLevel(v11, v12, v13);
        v7 = v14;
        if ((v14 & 0x80000000) == 0)
        {
          v10 += v14;
          v15 = **(uint64_t (***)(const char *, uint64_t))a3;
          v16 = ", ";
LABEL_39:
          v25 = 2;
          goto LABEL_40;
        }
        goto LABEL_51;
      }
      v7 = (**(uint64_t (***)(const char *, uint64_t))a3)("\n", 1);
      if ((v7 & 0x80000000) == 0)
      {
        v20 = a3;
        v21 = a2;
        v22 = 0;
        goto LABEL_37;
      }
LABEL_51:
      v3 = v30;
      goto LABEL_46;
    }
    v15 = **(uint64_t (***)(const char *, uint64_t))a3;
    v18 = "{},\n";
    v19 = "{}, ";
  }
  if (v6 == 2)
    v16 = v19;
  else
    v16 = v18;
  v25 = 4;
LABEL_40:
  v27 = v15(v16, v25);
  v7 = v27;
  if (v27 >= 0)
    v28 = v10;
  else
    v28 = 0;
  v29 = v28 + v27;
  v3 = v30;
  if (v29 >= 1)
    *(_DWORD *)(a3 + 20) += v29;
  if (v7 < 0)
    goto LABEL_46;
LABEL_47:

}

uint64_t PrintFWriteCFObjectLevel(uint64_t (***a1)(CFUUIDBytes *), const __CFArray *a2, uint64_t a3)
{
  uint64_t v3;
  const __CFArray *v4;
  uint64_t (***v5)(CFUUIDBytes *);
  uint64_t v6;
  int v7;
  CFTypeID v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  CFIndex Count;
  CFIndex v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  CFIndex v25;
  CFIndex v26;
  int v27;
  const void *ValueAtIndex;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t (**v36)(const char *, uint64_t);
  int v37;
  unsigned __int8 *BytePtr;
  unint64_t Length;
  uint64_t v40;
  unint64_t v41;
  unint64_t v42;
  unint64_t v43;
  unint64_t v44;
  uint64_t v45;
  int v46;
  uint64_t v47;
  const char *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  int v61;
  unsigned int v62;
  int v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  const char *v78;
  uint64_t v79;
  int v80;
  int v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  int v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  CFIndex v114;
  size_t MaximumSizeForEncoding;
  CFIndex v116;
  UInt8 *v117;
  CFUUIDBytes *v118;
  CFUUIDBytes *p_context;
  CFStringRef v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  int v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  const char *v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  void *v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  CFStringRef v155;
  uint64_t v156;
  int v157;
  int v158;
  CFIndex usedBufLen;
  int v160;
  uint64_t v161;
  uint64_t v162;
  CFIndex v163;
  CFUUIDBytes context;
  int v165;
  int v166;
  uint64_t v167;
  uint64_t v168;
  CFRange v169;

  while (1)
  {
    v3 = a3;
    v4 = a2;
    v5 = a1;
    v168 = *MEMORY[0x1E0C80C00];
    v6 = (uint64_t)a1[1];
    v7 = *(unsigned __int8 *)(v6 + 3);
    v163 = 0;
    v8 = CFGetTypeID(a2);
    if (v8 == CFArrayGetTypeID())
    {
      if (v7 == 2)
      {
        Count = CFArrayGetCount(v4);
        if (Count > 0)
        {
          v16 = Count;
          v17 = ((uint64_t (*)(const char *, uint64_t))**v5)("[ ", 2);
          LODWORD(v18) = 0;
LABEL_11:
          if ((v17 & 0x80000000) != 0)
            return v17;
          v26 = 0;
          v27 = v17 + v18;
          while (1)
          {
            ++*((_DWORD *)v5 + 4);
            ValueAtIndex = CFArrayGetValueAtIndex(v4, v26);
            v18 = PrintFWriteCFObjectLevel(v5, ValueAtIndex, 1);
            --*((_DWORD *)v5 + 4);
            if ((v18 & 0x80000000) != 0)
              return v18;
            if (++v26 >= v16)
              break;
            context.byte0 = 44;
            if (v7 != 2)
            {
              v30 = 1;
LABEL_20:
              v29 = v30 + 1;
              *(&context.byte0 + v30) = 10;
              goto LABEL_21;
            }
            context.byte1 = 32;
            v29 = 2;
LABEL_21:
            v17 = ((uint64_t (*)(CFUUIDBytes *, uint64_t))**v5)(&context, v29);
            if ((v17 & 0x80000000) != 0)
              return v17;
            v27 += v18 + v17;
            if (v16 == v26)
            {
              v36 = (uint64_t (**)(const char *, uint64_t))*v5;
              if (v7 == 2)
              {
                v37 = (*v36)(" ]", 2);
              }
              else
              {
                v45 = PrintFCore((uint64_t)v36, (uint64_t)"%*s", (uint64_t)v36, v31, v32, v33, v34, v35, (4 * *((_DWORD *)v5 + 4)));
                v18 = v45;
                if ((v45 & 0x80000000) != 0)
                  return v18;
                v27 += v45;
                v37 = ((uint64_t (*)(const char *, uint64_t))**v5)("]", 1);
              }
              if (v37 >= 0)
                v46 = v27;
              else
                v46 = 0;
              return (v46 + v37);
            }
          }
          v30 = 0;
          v29 = 0;
          if (v7 == 2)
            goto LABEL_21;
          goto LABEL_20;
        }
        LODWORD(v18) = 0;
      }
      else
      {
        v18 = PrintFCore((uint64_t)*v5, (uint64_t)"%*s", v9, v10, v11, v12, v13, v14, (4 * *((_DWORD *)v5 + 4)));
        if ((v18 & 0x80000000) != 0)
          return v18;
        v25 = CFArrayGetCount(v4);
        if (v25 > 0)
        {
          v16 = v25;
          v17 = ((uint64_t (*)(const char *, uint64_t))**v5)("[\n", 2);
          goto LABEL_11;
        }
      }
      v37 = ((uint64_t (*)(const char *, uint64_t))**v5)("[]", 2);
      goto LABEL_60;
    }
    if (v8 == CFBooleanGetTypeID())
    {
      if (v7 == 2)
      {
        LODWORD(v18) = 0;
      }
      else
      {
        v18 = PrintFCore((uint64_t)*v5, (uint64_t)"%*s", v19, v20, v21, v22, v23, v24, (4 * *((_DWORD *)v5 + 4)));
        if ((v18 & 0x80000000) != 0)
          return v18;
      }
      if ((const __CFArray *)*MEMORY[0x1E0C9AE50] == v4)
        v47 = 4;
      else
        v47 = 5;
      if ((const __CFArray *)*MEMORY[0x1E0C9AE50] == v4)
        v48 = "true";
      else
        v48 = "false";
      v17 = ((uint64_t (*)(const char *, uint64_t))**v5)(v48, v47);
LABEL_51:
      if ((v17 & 0x80000000) != 0)
        return v17;
      return (v17 + v18);
    }
    if (v8 == CFDataGetTypeID())
    {
      BytePtr = (unsigned __int8 *)CFDataGetBytePtr(v4);
      Length = CFDataGetLength(v4);
      v41 = Length;
      v42 = Length;
      if ((*(_BYTE *)v6 & 8) != 0)
        v42 = *(_QWORD *)(v6 + 16);
      if (v7 == 2)
      {
        if (v42 >= Length)
          v43 = Length;
        else
          v43 = v42;
        if (v43 >= 0x40)
          v44 = 64;
        else
          v44 = v43;
        v18 = PrintFWriteHexByteStream((uint64_t (**)(_BYTE *, uint64_t, _QWORD))*v5, 0, BytePtr, v44);
        if ((v18 & 0x80000000) != 0 || v44 >= v41)
          return v18;
        v37 = ((uint64_t (*)(const char *, uint64_t))**v5)("...", 3);
        goto LABEL_60;
      }
      v64 = *((_DWORD *)v5 + 4);
      if ((_DWORD)v3 || Length >= 0x11)
      {
        if ((_DWORD)v3)
        {
          LODWORD(v18) = 0;
        }
        else
        {
          v18 = ((uint64_t (*)(const char *, uint64_t))**v5)("\n", 1);
          if ((v18 & 0x80000000) != 0)
            return v18;
        }
        v65 = (v64 + 1);
      }
      else
      {
        v65 = 0;
        LODWORD(v18) = 0;
      }
      *((_DWORD *)v5 + 4) = v65;
      v17 = PrintFWriteHex((uint64_t (**)(const char *, uint64_t))*v5, v6, v65, (uint64_t)BytePtr, v41, v42, 0, v40);
      if ((v17 & 0x80000000) != 0)
        return v17;
      v18 = (v17 + v18);
      *((_DWORD *)v5 + 4) = v64;
      return v18;
    }
    if (v8 == CFDateGetTypeID())
    {
      LODWORD(v18) = 0;
      *(_DWORD *)&context.byte0 = 0;
      LODWORD(usedBufLen) = 0;
      v161 = 0;
      v162 = 0;
      v160 = 0;
      if (v7 != 2)
      {
        v18 = PrintFCore((uint64_t)*v5, (uint64_t)"%*s", v49, v50, v51, v52, v53, v54, (4 * *((_DWORD *)v5 + 4)));
        if ((v18 & 0x80000000) != 0)
          return v18;
      }
      CFDateGetComponents((uint64_t)v4, &context, &usedBufLen, (_DWORD *)&v162 + 1, &v162, (_DWORD *)&v161 + 1, &v161, &v160);
      v61 = PrintFCore((uint64_t)*v5, (uint64_t)"%04d-%02d-%02d %02d:%02d:%02d.%03d", v55, v56, v57, v58, v59, v60, *(unsigned int *)&context.byte0);
LABEL_57:
      v62 = v61 + v18;
      goto LABEL_87;
    }
    if (v8 == CFDictionaryGetTypeID())
    {
      if (v7 == 2)
      {
        LODWORD(v18) = 0;
      }
      else
      {
        v18 = PrintFCore((uint64_t)*v5, (uint64_t)"%*s", v66, v67, v68, v69, v70, v71, (4 * *((_DWORD *)v5 + 4)));
        if ((v18 & 0x80000000) != 0)
          return v18;
      }
      if (CFDictionaryGetCount(v4) < 1)
      {
        v37 = ((uint64_t (*)(const char *, uint64_t))**v5)("{}", 2);
        goto LABEL_60;
      }
      v167 = 0;
      if (v7 == 2)
        v78 = "{ ";
      else
        v78 = "{\n";
      v79 = ((uint64_t (*)(const char *, uint64_t))**v5)(v78, 2);
      v80 = v79;
      if ((v79 & 0x80000000) != 0)
        return v79;
      *(_QWORD *)&context.byte0 = *v5;
      *(_QWORD *)&context.byte8 = v6;
      v81 = *((_DWORD *)v5 + 4) + 1;
      v166 = 0;
      LODWORD(v167) = 0;
      v165 = v81;
      CFDictionaryApplyFunction(v4, (CFDictionaryApplierFunction)PrintFWriteCFObjectApplier, &context);
      if ((v167 & 0x80000000) != 0)
        return v167;
      v88 = v80 + v18 + v166;
      if (v7 != 2)
      {
        v89 = PrintFCore((uint64_t)*v5, (uint64_t)"%*s", v82, v83, v84, v85, v86, v87, (4 * *((_DWORD *)v5 + 4)));
        v18 = v89;
        if ((v89 & 0x80000000) != 0)
          return v18;
        v88 += v89;
      }
      v61 = ((uint64_t (*)(const char *, uint64_t))**v5)("}", 1);
      v62 = v61 + v88;
LABEL_87:
      if (v61 >= 0)
        return v62;
      else
        return v61;
    }
    if (v8 == CFNumberGetTypeID())
    {
      if (v7 == 2)
      {
        LODWORD(v18) = 0;
      }
      else
      {
        v18 = PrintFCore((uint64_t)*v5, (uint64_t)"%*s", v72, v73, v74, v75, v76, v77, (4 * *((_DWORD *)v5 + 4)));
        if ((v18 & 0x80000000) != 0)
          return v18;
      }
      *(_QWORD *)&context.byte0 = 0;
      if (CFNumberIsFloatType(v4))
      {
        CFNumberGetValue(v4, kCFNumberDoubleType, &context);
        v37 = PrintFCore((uint64_t)*v5, (uint64_t)"%f", v96, v97, v98, v99, v100, v101, *(uint64_t *)&context.byte0);
      }
      else
      {
        CFNumberGetValue(v4, kCFNumberSInt64Type, &context);
        v37 = PrintFCore((uint64_t)*v5, (uint64_t)"%lld", v108, v109, v110, v111, v112, v113, *(uint64_t *)&context.byte0);
      }
      goto LABEL_60;
    }
    if (v8 == CFStringGetTypeID())
      break;
    if (v8 == CFNullGetTypeID())
    {
      if (v7 == 2)
      {
        LODWORD(v18) = 0;
      }
      else
      {
        v18 = PrintFCore((uint64_t)*v5, (uint64_t)"%*s", v102, v103, v104, v105, v106, v107, (4 * *((_DWORD *)v5 + 4)));
        if ((v18 & 0x80000000) != 0)
          return v18;
      }
      v61 = ((uint64_t (*)(const char *, uint64_t))**v5)("Null", 4);
      goto LABEL_57;
    }
    if (v8 != CFURLGetTypeID())
    {
      objc_opt_class();
      if ((objc_opt_isKindOfClass() & 1) != 0)
      {
        *(_QWORD *)&context.byte0 = 0;
        *(_QWORD *)&context.byte8 = 0;
        if (v7 == 2)
        {
          LODWORD(v18) = 0;
LABEL_126:
          -[__CFArray getUUIDBytes:](v4, "getUUIDBytes:", &context);
          v140 = (uint64_t)*v5;
          if (*(_BYTE *)(v6 + 27))
            v141 = "%~#U";
          else
            v141 = "%#U";
LABEL_137:
          v17 = PrintFCore(v140, (uint64_t)v141, v134, v135, v136, v137, v138, v139, (uint64_t)&context);
          if ((v17 & 0x80000000) != 0)
            return v17;
          return (v17 + v18);
        }
        else
        {
          v18 = PrintFCore((uint64_t)*v5, (uint64_t)"%*s", v121, v122, v123, v124, v125, v126, (4 * *((_DWORD *)v5 + 4)));
          if ((v18 & 0x80000000) == 0)
            goto LABEL_126;
        }
        return v18;
      }
      if (v8 == CFUUIDGetTypeID())
      {
        if (v7 == 2)
        {
          LODWORD(v18) = 0;
        }
        else
        {
          v18 = PrintFCore((uint64_t)*v5, (uint64_t)"%*s", v128, v129, v130, v131, v132, v133, (4 * *((_DWORD *)v5 + 4)));
          if ((v18 & 0x80000000) != 0)
            return v18;
        }
        context = CFUUIDGetUUIDBytes(v4);
        v140 = (uint64_t)*v5;
        if (*(_BYTE *)(v6 + 27))
          v141 = "%~#U";
        else
          v141 = "%#U";
        goto LABEL_137;
      }
      if (v8 == CFSetGetTypeID())
      {
        -[__CFArray allObjects](v4, "allObjects");
        v148 = (void *)objc_claimAutoreleasedReturnValue();
        if (v148)
          v18 = PrintFWriteCFObjectLevel(v5, v148, v3);
        else
          v18 = 4294960568;

        return v18;
      }
      if (v7 == 2)
      {
        LODWORD(v18) = 0;
      }
      else
      {
        v18 = PrintFCore((uint64_t)*v5, (uint64_t)"%*s", v142, v143, v144, v145, v146, v147, (4 * *((_DWORD *)v5 + 4)));
        if ((v18 & 0x80000000) != 0)
          return v18;
      }
      v155 = CFCopyDescription(v4);
      v156 = (uint64_t)*v5;
      if (v155)
      {
        v157 = PrintFCore(v156, (uint64_t)"%@", v149, v150, v151, v152, v153, v154, (uint64_t)v155);
        CFRelease(v155);
        if (v157 >= 0)
          v158 = v18;
        else
          v158 = 0;
        return (v158 + v157);
      }
      v37 = PrintFCore(v156, (uint64_t)"<<UNKNOWN CF OBJECT TYPE: %d>>", v149, v150, v151, v152, v153, v154, v8);
LABEL_60:
      if (v37 >= 0)
        v46 = v18;
      else
        v46 = 0;
      return (v46 + v37);
    }
    v120 = CFURLGetString(v4);
    if (!v120)
      return 4294960596;
    a2 = (const __CFArray *)v120;
    a1 = v5;
    a3 = v3;
  }
  if (v7 == 2)
  {
    LODWORD(v18) = 0;
  }
  else
  {
    v18 = PrintFCore((uint64_t)*v5, (uint64_t)"%*s", v90, v91, v92, v93, v94, v95, (4 * *((_DWORD *)v5 + 4)));
    if ((v18 & 0x80000000) != 0)
      return v18;
  }
  v17 = ((uint64_t (*)(const char *, uint64_t))**v5)("\"", 1);
  if ((v17 & 0x80000000) != 0)
    return v17;
  LODWORD(v18) = v17 + v18;
  v114 = CFStringGetLength((CFStringRef)v4);
  MaximumSizeForEncoding = CFStringGetMaximumSizeForEncoding(v114, 0x8000100u);
  v163 = MaximumSizeForEncoding;
  if (!MaximumSizeForEncoding)
    goto LABEL_121;
  v116 = MaximumSizeForEncoding;
  v117 = (UInt8 *)malloc_type_malloc(MaximumSizeForEncoding, 0x66A5B184uLL);
  if (!v117)
    return 4294960568;
  v118 = (CFUUIDBytes *)v117;
  usedBufLen = 0;
  v169.location = 0;
  v169.length = v114;
  CFStringGetBytes((CFStringRef)v4, v169, 0x8000100u, 0x5Eu, 0, v117, v116, &usedBufLen);
  if (*(_BYTE *)(v6 + 27))
  {
    p_context = &context;
    _PrintFObfuscateString((unint64_t)v118, usedBufLen, &context, &v163);
    usedBufLen = v163;
  }
  else
  {
    p_context = v118;
  }
  v127 = (**v5)(p_context);
  free(v118);
  v18 = (v18 & ~(v127 >> 31)) + v127;
  if ((v127 & 0x80000000) == 0)
  {
LABEL_121:
    v17 = ((uint64_t (*)(const char *, uint64_t))**v5)("\"", 1);
    goto LABEL_51;
  }
  return v18;
}

uint64_t CFDateGetComponents(uint64_t a1, _DWORD *a2, _DWORD *a3, _DWORD *a4, _DWORD *a5, _DWORD *a6, _DWORD *a7, _DWORD *a8)
{
  CFCalendarRef v16;
  __CFCalendar *v17;
  const __CFTimeZone *v18;
  const __CFTimeZone *v19;
  double v20;
  long double __y;

  v16 = CFCalendarCopyCurrent();
  if (v16)
  {
    v17 = v16;
    v18 = CFTimeZoneCreateWithName(0, CFSTR("GMT"), 0);
    if (v18)
    {
      v19 = v18;
      CFCalendarSetTimeZone(v17, v18);
      CFRelease(v19);
      v20 = MEMORY[0x18D78D644](a1);
      if (CFCalendarDecomposeAbsoluteTime(v17, v20, "yMdHms", a2, a3, a4, a5, a6, a7))
      {
        if (a8)
          *a8 = (int)(modf(v20, &__y) * 1000000.0);
        CFRelease(v17);
        return 0;
      }
    }
    CFRelease(v17);
  }
  *a2 = 0;
  *a3 = 0;
  *a4 = 0;
  *a5 = 0;
  *a6 = 0;
  *a7 = 0;
  if (a8)
    *a8 = 0;
  return 4294960596;
}

const __CFString *OPACKDecodeData(const __CFData *a1, unsigned int a2, _DWORD *a3)
{
  UInt8 *BytePtr;
  CFIndex Length;

  BytePtr = (UInt8 *)CFDataGetBytePtr(a1);
  Length = CFDataGetLength(a1);
  return _OPACKDecodeBytes((uint64_t)a1, BytePtr, Length, a2, a3);
}

uint64_t CUMainQueue()
{
  if (CUMainQueue_sOnce != -1)
    dispatch_once(&CUMainQueue_sOnce, &__block_literal_global_16);
  return CUMainQueue_sQueue;
}

uint64_t TLV8GetNext(_BYTE *a1, _BYTE *a2, _BYTE *a3, _QWORD *a4, _QWORD *a5, _QWORD *a6)
{
  uint64_t v6;
  _BYTE *v7;
  uint64_t result;

  if (a1 == a2)
    return 4294960569;
  if (a1 >= a2)
    return 4294960591;
  if ((unint64_t)(a2 - a1) < 2)
    return 4294960569;
  v6 = a1[1];
  v7 = &a1[v6 + 2];
  if (v7 > a2)
    return 4294960546;
  *a3 = *a1;
  *a4 = a1 + 2;
  *a5 = v6;
  result = 0;
  if (a6)
    *a6 = v7;
  return result;
}

uint64_t BonjourBrowser_Start(dispatch_queue_t *a1, const char *a2, const char *a3, const char *a4, uint64_t a5)
{
  _QWORD *v10;
  _QWORD *v11;
  char *v12;
  char *v13;
  const char *v14;
  char *v15;
  char *v16;
  void *v18;

  v10 = malloc_type_calloc(1uLL, 0x28uLL, 0x1030040D16A4755uLL);
  if (v10)
  {
    v11 = v10;
    *v10 = a1;
    v10[4] = a5;
    v12 = strdup(a2);
    v11[1] = v12;
    if (v12)
    {
      v13 = v12;
      if (a3)
        v14 = a3;
      else
        v14 = "";
      v15 = strdup(v14);
      v11[2] = v15;
      if (v15)
      {
        if (!a4 || !*a4 || (v16 = strdup(a4), (v11[3] = v16) != 0))
        {
          CFRetain(a1);
          dispatch_async_f(a1[2], v11, (dispatch_function_t)_BonjourBrowser_Start);
          return 0;
        }
      }
      free(v13);
    }
    else
    {
      v15 = (char *)v11[2];
    }
    if (v15)
      free(v15);
    v18 = (void *)v11[3];
    if (v18)
      free(v18);
    free(v11);
  }
  return 4294960568;
}

void CFDictionaryApplyBlock(const __CFDictionary *a1, void *context)
{
  CFDictionaryApplyFunction(a1, (CFDictionaryApplierFunction)_CFDictionaryApplyBlockApplier, context);
}

uint64_t ASPrintF(void **a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  return VASPrintF(a1, a2, (uint64_t)&a9);
}

id NSErrorWithOSStatusF(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  if (!(_DWORD)a1)
    return 0;
  NSErrorV((void *)*MEMORY[0x1E0CB2F90], a1, a2, (uint64_t)&a9);
  return (id)objc_claimAutoreleasedReturnValue();
}

void CUXPCEncodeNSArrayOfNSString(void *a1, const char *a2, void *a3)
{
  id v5;
  id v6;
  xpc_object_t v7;
  id v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  id v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  _BYTE v18[128];
  uint64_t v19;

  v19 = *MEMORY[0x1E0C80C00];
  v5 = a1;
  v6 = a3;
  if (v6)
  {
    v7 = xpc_array_create(0, 0);
    v14 = 0u;
    v15 = 0u;
    v16 = 0u;
    v17 = 0u;
    v8 = v6;
    v9 = objc_msgSend(v8, "countByEnumeratingWithState:objects:count:", &v14, v18, 16);
    if (v9)
    {
      v10 = v9;
      v11 = *(_QWORD *)v15;
      do
      {
        v12 = 0;
        do
        {
          if (*(_QWORD *)v15 != v11)
            objc_enumerationMutation(v8);
          v13 = objc_retainAutorelease(*(id *)(*((_QWORD *)&v14 + 1) + 8 * v12));
          xpc_array_set_string(v7, 0xFFFFFFFFFFFFFFFFLL, (const char *)objc_msgSend(v13, "UTF8String", (_QWORD)v14));
          ++v12;
        }
        while (v10 != v12);
        v10 = objc_msgSend(v8, "countByEnumeratingWithState:objects:count:", &v14, v18, 16);
      }
      while (v10);
    }

    xpc_dictionary_set_value(v5, a2, v7);
  }

}

id CUXPCDictionaryCreateReply(void *a1)
{
  id v1;
  void *v2;
  xpc_object_t reply;

  v1 = a1;
  objc_getAssociatedObject(v1, &sCUXPCResponseHandlerKey);
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  if (v2)
  {
    reply = xpc_dictionary_create(0, 0, 0);
    objc_setAssociatedObject(reply, &sCUXPCResponseHandlerKey, v2, (void *)0x301);
  }
  else
  {
    reply = xpc_dictionary_create_reply(v1);
  }

  return reply;
}

uint64_t CUXPCDecodeNSArrayOfNSString(void *a1, const char *a2, id *a3, _QWORD *a4)
{
  id v7;
  uint64_t v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  id v16;
  void *v17;
  _QWORD applier[7];
  uint64_t v20;
  uint64_t *v21;
  uint64_t v22;
  uint64_t (*v23)(uint64_t, uint64_t);
  void (*v24)(uint64_t);
  id v25;

  v7 = a1;
  xpc_dictionary_get_value(v7, a2);
  v8 = objc_claimAutoreleasedReturnValue();
  v9 = (void *)v8;
  if (!v8)
    goto LABEL_9;
  if (MEMORY[0x18D78F504](v8) == MEMORY[0x1E0C812C8])
  {
    v20 = 0;
    v21 = &v20;
    v22 = 0x3032000000;
    v23 = __Block_byref_object_copy__10155;
    v24 = __Block_byref_object_dispose__10156;
    v25 = 0;
    v16 = objc_alloc_init(MEMORY[0x1E0C99DE8]);
    applier[0] = MEMORY[0x1E0C809B0];
    applier[1] = 3221225472;
    applier[2] = __CUXPCDecodeNSArrayOfNSString_block_invoke;
    applier[3] = &unk_1E25DE6A0;
    applier[5] = &v20;
    applier[6] = a2;
    applier[4] = v16;
    xpc_array_apply(v9, applier);
    v17 = (void *)v21[5];
    if (v17)
    {
      if (a4)
        *a4 = objc_retainAutorelease(v17);
    }
    else
    {
      objc_storeStrong(a3, v16);
    }

    _Block_object_dispose(&v20, 8);
    if (v17)
      goto LABEL_8;
LABEL_9:
    v15 = 1;
    goto LABEL_10;
  }
  if (!a4)
  {
LABEL_8:
    v15 = 0;
    goto LABEL_10;
  }
  NSErrorF_safe((void *)*MEMORY[0x1E0CB2F90], 4294960540, (uint64_t)"XPC non-array type: '%s'", v10, v11, v12, v13, v14, (uint64_t)a2);
  v15 = 0;
  *a4 = (id)objc_claimAutoreleasedReturnValue();
LABEL_10:

  return v15;
}

void sub_18D41B6A4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t IsAppleTV()
{
  if (IsAppleTV_sOnce != -1)
    dispatch_once(&IsAppleTV_sOnce, &__block_literal_global_87);
  return IsAppleTV_sIsAppleTV;
}

void CUDispatchTimerSet(NSObject *a1, double a2, double a3, double a4)
{
  CUDispatchTimerSetEx(a1, 0, a2, a3, a4);
}

CFStringRef CFStringCreateF(int *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  return CFStringCreateV(a1, a2, (uint64_t)&a9);
}

CFStringRef CFStringCreateV(int *a1, uint64_t a2, uint64_t a3)
{
  char *v4;
  CFStringRef v5;
  int v6;
  char *cStr;

  cStr = 0;
  if ((VASPrintF((void **)&cStr, a2, a3) & 0x80000000) != 0)
  {
    v5 = 0;
    v6 = -6700;
    if (!a1)
      return v5;
    goto LABEL_6;
  }
  v4 = cStr;
  v5 = CFStringCreateWithCString(0, cStr, 0x8000100u);
  free(v4);
  if (v5)
    v6 = 0;
  else
    v6 = -6728;
  if (a1)
LABEL_6:
    *a1 = v6;
  return v5;
}

uint64_t TextToHardwareAddress(char *__s, size_t a2, uint64_t a3, _BYTE *a4)
{
  uint64_t v5;
  char *v6;
  char *v7;
  uint64_t v8;
  int v9;
  int v10;
  char *v11;
  unsigned int v12;
  unsigned int v13;
  int v14;

  v5 = a3;
  v6 = __s;
  if (a2 == -1)
  {
    a2 = strlen(__s);
    if (!v5)
      return 0;
  }
  else if (!a3)
  {
    return 0;
  }
  v7 = &v6[a2];
  v8 = MEMORY[0x1E0C80978];
  do
  {
    if (v6 >= v7)
      return 4294960554;
    v9 = 0;
    v10 = 0;
    --v5;
    v11 = v6;
    while (1)
    {
      v13 = *v6++;
      v12 = v13;
      v14 = (char)v13;
      if (v13 - 48 > 9)
        break;
      v9 = v14 + 16 * v9 - 48;
LABEL_16:
      ++v10;
LABEL_17:
      if (v10 <= 1)
      {
        v11 = v6;
        if (v6 < v7)
          continue;
      }
      if (!v10)
        return 4294960554;
      if (a4)
        goto LABEL_21;
      goto LABEL_22;
    }
    if ((*(_DWORD *)(v8 + 4 * v14 + 60) & 0x10000) != 0)
    {
      v9 = __tolower(v12) + 16 * v9 - 87;
      goto LABEL_16;
    }
    if (!v10)
    {
      if (v12 > 0x3A || ((1 << v12) & 0x400200100000000) == 0)
        return 4294960554;
      v10 = 0;
      goto LABEL_17;
    }
    v6 = v11 + 1;
    if (a4)
LABEL_21:
      *a4++ = v9;
LABEL_22:
    ;
  }
  while (v5);
  return 0;
}

id CUXPCDecodeNSErrorIfNeeded(void *a1)
{
  id v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  const char *v8;
  uint64_t v9;
  id v10;
  id v11;
  void *v12;
  void *v13;
  id v14;
  id v16;
  id v17;

  v1 = a1;
  if (MEMORY[0x18D78F504]() == MEMORY[0x1E0C812F8])
  {
    v16 = 0;
    v17 = 0;
    CUXPCDecodeNSError(v1, "errO", "errC", "errD", "errM", "errO", &v17, &v16);
    v10 = v17;
    v11 = v16;
    v12 = v11;
    if (v10)
      v13 = v10;
    else
      v13 = v11;
    v14 = v13;

  }
  else
  {
    if (v1 == (id)MEMORY[0x1E0C81258])
    {
      v7 = (void *)*MEMORY[0x1E0CB2F90];
      v9 = 4294896154;
      v8 = "XPC connection interrupted";
    }
    else
    {
      v7 = (void *)*MEMORY[0x1E0CB2F90];
      if (v1 == (id)MEMORY[0x1E0C81260])
      {
        v8 = "XPC connection invalidated";
        v9 = 4294896148;
      }
      else
      {
        v8 = "XPC unknown type";
        v9 = 4294960540;
      }
    }
    NSErrorF_safe(v7, v9, (uint64_t)v8, v2, v3, v4, v5, v6, (uint64_t)v16);
    v14 = (id)objc_claimAutoreleasedReturnValue();
  }

  return v14;
}

uint64_t CUXPCDecodeNSError(void *a1, const char *a2, const char *a3, const char *a4, const char *a5, const char *a6, _QWORD *a7, _QWORD *a8)
{
  uint64_t v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v23;

  xpc_dictionary_get_value(a1, a2);
  v14 = objc_claimAutoreleasedReturnValue();
  v15 = (void *)v14;
  if (v14)
  {
    if (MEMORY[0x18D78F504](v14) == MEMORY[0x1E0C812F8])
    {
      v21 = _CUXPCDecodeNSError(v15, a3, a4, a5, a6, 1u, 0, a7, a8);
    }
    else if (a8)
    {
      NSErrorF_safe((void *)*MEMORY[0x1E0CB2F90], 4294960540, (uint64_t)"XPC non-dictionary error object", v16, v17, v18, v19, v20, v23);
      v21 = 0;
      *a8 = (id)objc_claimAutoreleasedReturnValue();
    }
    else
    {
      v21 = 0;
    }
  }
  else
  {
    v21 = 1;
  }

  return v21;
}

CFArrayRef CFDictionaryCopyKeys(const __CFDictionary *a1, int *a2)
{
  uint64_t Count;
  CFIndex v5;
  const void **v6;
  const void **v7;
  CFArrayRef v8;
  int v9;

  Count = CFDictionaryGetCount(a1);
  v5 = Count;
  if (Count <= 0)
  {
    v8 = CFArrayCreate(0, 0, Count, MEMORY[0x1E0C9B378]);
  }
  else
  {
    v6 = (const void **)malloc_type_malloc(8 * Count, 0xC0040B8AA526DuLL);
    if (!v6)
    {
      v8 = 0;
      v9 = -6728;
      if (!a2)
        return v8;
      goto LABEL_9;
    }
    v7 = v6;
    CFDictionaryGetKeysAndValues(a1, v6, 0);
    v8 = CFArrayCreate(0, v7, v5, MEMORY[0x1E0C9B378]);
    free(v7);
  }
  if (v8)
    v9 = 0;
  else
    v9 = -6728;
  if (a2)
LABEL_9:
    *a2 = v9;
  return v8;
}

double CFGetDouble(const __CFString *a1, _DWORD *a2)
{
  CFTypeID v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  double v10;
  int v12;
  uint64_t v13;
  int v14;
  double valuePtr;
  char buffer[128];
  uint64_t v17;

  v17 = *MEMORY[0x1E0C80C00];
  valuePtr = 0.0;
  v14 = 0;
  if (!a1)
  {
    v12 = -6705;
LABEL_31:
    v14 = v12;
    goto LABEL_24;
  }
  v4 = CFGetTypeID(a1);
  if (v4 == CFNumberGetTypeID())
  {
    CFNumberGetValue((CFNumberRef)a1, kCFNumberDoubleType, &valuePtr);
    goto LABEL_23;
  }
  if (v4 == CFStringGetTypeID())
  {
    v13 = 0;
    if (CFStringGetCString(a1, buffer, 128, 0x600u))
    {
      if (!strnicmpx((unsigned __int8 *)buffer, -1, "true")
        || !strnicmpx((unsigned __int8 *)buffer, -1, "yes")
        || !strnicmpx((unsigned __int8 *)buffer, -1, "y")
        || !strnicmpx((unsigned __int8 *)buffer, -1, "on")
        || !strnicmpx((unsigned __int8 *)buffer, -1, "1"))
      {
        valuePtr = 1.0;
        goto LABEL_23;
      }
      if (!strnicmpx((unsigned __int8 *)buffer, -1, "false")
        || !strnicmpx((unsigned __int8 *)buffer, -1, "no")
        || !strnicmpx((unsigned __int8 *)buffer, -1, "n")
        || !strnicmpx((unsigned __int8 *)buffer, -1, "off")
        || !strnicmpx((unsigned __int8 *)buffer, -1, "0"))
      {
        valuePtr = 0.0;
        goto LABEL_23;
      }
      if (sscanf(buffer, "%lf", &valuePtr) == 1)
      {
LABEL_23:
        v14 = 0;
        goto LABEL_24;
      }
      if (SNScanF(buffer, 0xFFFFFFFFFFFFFFFFLL, "%lli", v5, v6, v7, v8, v9, (int)&v13) == 1)
      {
        v10 = (double)v13;
LABEL_21:
        valuePtr = v10;
        goto LABEL_23;
      }
      v12 = -6717;
    }
    else
    {
      v12 = -6743;
    }
    goto LABEL_31;
  }
  if (v4 == CFDateGetTypeID())
  {
    v10 = MEMORY[0x18D78D644](a1);
    goto LABEL_21;
  }
  valuePtr = (double)(uint64_t)CFGetInt64(a1, &v14);
LABEL_24:
  if (a2)
    *a2 = v14;
  return valuePtr;
}

uint64_t CFDictionarySetCString(__CFDictionary *a1, const void *a2, const char *a3, CFIndex numBytes)
{
  const char *v6;
  CFStringRef v7;
  CFStringRef v8;

  if (a3)
    v6 = a3;
  else
    v6 = "";
  if (numBytes == -1)
    v7 = CFStringCreateWithCString(0, v6, 0x8000100u);
  else
    v7 = CFStringCreateWithBytes(0, (const UInt8 *)v6, numBytes, 0x8000100u, 0);
  v8 = v7;
  if (!v7)
    return 4294960596;
  CFDictionarySetValue(a1, a2, v7);
  CFRelease(v8);
  return 0;
}

BOOL _LogCategory_Initialize(uint64_t a1, unsigned __int8 a2)
{
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  unsigned __int8 *v8;
  uint64_t v9;
  int v10;

  if ((gLogUtilsInitializing & 1) != 0)
    return 0;
  LogUtils_EnsureInitialized();
  pthread_mutex_lock(&gLogUtilsLock);
  if (*(_DWORD *)a1 == -1)
  {
    *(_DWORD *)a1 = *(_DWORD *)(a1 + 4);
    v5 = &gLogCategoryList;
    v6 = gLogCategoryList;
    if (gLogCategoryList)
    {
      while ((int)strnicmpx(*(unsigned __int8 **)(v6 + 24), -1, *(_BYTE **)(a1 + 24)) < 1)
      {
        v7 = *(_QWORD *)(v6 + 48);
        v5 = (uint64_t *)(v6 + 48);
        v6 = v7;
        if (!v7)
          goto LABEL_10;
      }
      v7 = *v5;
    }
    else
    {
      v7 = 0;
    }
LABEL_10:
    *(_QWORD *)(a1 + 48) = v7;
    *v5 = a1;
    if ((*(_BYTE *)(a1 + 18) & 2) != 0)
      *(_QWORD *)(a1 + 104) = malloc_type_calloc(1uLL, 0x10uLL, 0x90040C859B4A5uLL);
    v8 = *(unsigned __int8 **)(a1 + 8);
    if (v8)
      _LogControlLocked(v8, 0);
    _LogCategory_ApplyActions(a1);
    v9 = a1 + 56;
    if (!*(_QWORD *)(a1 + 56))
    {
      _LogOutputCreate("console", (uint64_t **)(a1 + 56));
      if (*(_QWORD *)v9)
        ++*(_DWORD *)(*(_QWORD *)v9 + 8);
      _LogCategory_ApplyActions(a1);
    }
  }
  v10 = *(_DWORD *)a1;
  pthread_mutex_unlock(&gLogUtilsLock);
  return v10 <= a2;
}

void _LogOutputDeleteUnused()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t *v2;

  v0 = gLogOutputList;
  if (gLogOutputList)
  {
    v1 = &gLogOutputList;
    do
    {
      v2 = v1;
      v1 = (uint64_t *)v0;
      while (1)
      {
        v0 = *v1;
        if (*((_DWORD *)v1 + 2))
          break;
        *v2 = v0;
        _LogOutputDelete(v1);
        v1 = (uint64_t *)*v2;
        if (!*v2)
          return;
      }
    }
    while (v0);
  }
}

void _LogCategory_ApplyActions(uint64_t a1)
{
  uint64_t v1;
  int v3;
  uint64_t v4;
  int v5;
  uint64_t v6;
  const char *v7;
  int v8;
  const char *v9;
  unsigned __int8 *v10;
  _BOOL4 v11;
  unsigned __int8 *v12;
  size_t v13;
  int v14;
  uint64_t v15;
  int v16;
  uint64_t i;
  char *v18;
  char *v19;
  uint64_t v20;
  const char *v21;
  int64_t v22;
  const char *v23;
  unsigned int v24;
  unsigned int v25;
  uint64_t v26;
  const char *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  uint64_t v32;
  int v33;
  uint64_t j;
  char *v35;
  uint64_t *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  int v40;
  int v41;
  uint64_t v42;
  int v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t *v46;

  v1 = gLogActionList;
  if (gLogActionList)
  {
    do
    {
      if (!strnicmpx(*(unsigned __int8 **)(v1 + 16), -1, "level"))
      {
        v3 = LUStringToLevel(*(char **)(v1 + 24));
        if (v3 != -1)
        {
          v4 = gLogCategoryList;
          if (gLogCategoryList)
          {
            v5 = v3;
            do
            {
              if ((!a1 || v4 == a1) && _LogCategoryMatch(*(_DWORD *)(v4 + 16), *(char **)(v4 + 24), *(char **)(v1 + 8)))
                *(_DWORD *)v4 = v5;
              v4 = *(_QWORD *)(v4 + 48);
            }
            while (v4);
          }
        }
      }
      v1 = *(_QWORD *)v1;
    }
    while (v1);
    v6 = gLogActionList;
    if (gLogActionList)
    {
      do
      {
        if (!strnicmpx(*(unsigned __int8 **)(v6 + 16), -1, "flags"))
        {
          v7 = *(const char **)(v6 + 24);
          v8 = 0;
          v9 = &v7[strlen(v7)];
LABEL_17:
          v10 = (unsigned __int8 *)v7;
          while (v10 < (unsigned __int8 *)v9)
          {
            if (*v10 == 59)
            {
              v11 = 1;
              v12 = v10;
            }
            else
            {
              v13 = v9 - 1 - (const char *)v10;
              v12 = v10;
              while (v13)
              {
                v14 = *++v12;
                --v13;
                if (v14 == 59)
                  goto LABEL_26;
              }
              v12 = (unsigned __int8 *)v9;
LABEL_26:
              v11 = v12 < (unsigned __int8 *)v9;
            }
            v15 = v12 - v10;
            v7 = (const char *)&v12[v11];
            if (!strnicmpx(v10, v12 - v10, "none"))
            {
              v8 = 0;
              goto LABEL_17;
            }
            if (!strnicmpx(v10, v15, "time"))
            {
              v8 |= 1u;
              goto LABEL_17;
            }
            if (!strnicmpx(v10, v15, "pid"))
            {
              v8 |= 2u;
              goto LABEL_17;
            }
            if (!strnicmpx(v10, v15, "program"))
            {
              v8 |= 4u;
              goto LABEL_17;
            }
            if (!strnicmpx(v10, v15, "category"))
            {
              v8 |= 8u;
              goto LABEL_17;
            }
            if (!strnicmpx(v10, v15, "level"))
            {
              v8 |= 0x10u;
              goto LABEL_17;
            }
            if (!strnicmpx(v10, v15, "prefix"))
            {
              v8 |= 0x20u;
              goto LABEL_17;
            }
            if (!strnicmpx(v10, v15, "function"))
            {
              v8 |= 0x40u;
              goto LABEL_17;
            }
            if (!strnicmpx(v10, v15, "thread"))
            {
              v8 |= 0x80u;
              goto LABEL_17;
            }
            v16 = strnicmpx(v10, v15, "public");
            v10 = (unsigned __int8 *)v7;
            if (!v16)
            {
              v8 |= 0x200u;
              goto LABEL_17;
            }
          }
          for (i = gLogCategoryList; i; i = *(_QWORD *)(i + 48))
          {
            if ((!a1 || i == a1) && _LogCategoryMatch(*(_DWORD *)(i + 16), *(char **)(i + 24), *(char **)(v6 + 8)))
            {
              if ((v8 & 0x20) != 0)
              {
                v18 = *(char **)(i + 24);
                v19 = strchr(v18, 95);
                if (!v19)
                  LODWORD(v19) = (_DWORD)v18 + strlen(v18);
                *(_QWORD *)(i + 32) = v18;
                *(_DWORD *)(i + 40) = (_DWORD)v19 - (_DWORD)v18;
              }
              *(_DWORD *)(i + 16) = *(_DWORD *)(i + 16) & 0x70000 | v8;
            }
          }
        }
        v6 = *(_QWORD *)v6;
      }
      while (v6);
      v20 = gLogActionList;
      if (gLogActionList)
      {
        do
        {
          if (!strnicmpx(*(unsigned __int8 **)(v20 + 16), -1, "rate"))
          {
            v21 = *(const char **)(v20 + 24);
            v22 = strlen(v21);
            v23 = &v21[v22];
            if (v22 < 1)
            {
              v24 = 0;
LABEL_66:
              v26 = 0;
            }
            else
            {
              v24 = 0;
              while (1)
              {
                v25 = *(unsigned __int8 *)v21 - 48;
                if (v25 > 9)
                  break;
                v24 = v25 + 10 * v24;
                if (++v21 >= v23)
                  goto LABEL_66;
              }
              v26 = 1;
            }
            v27 = &v21[v26];
            if (v27 >= v23)
            {
              v28 = 0;
            }
            else
            {
              v28 = 0;
              do
              {
                v29 = *(unsigned __int8 *)v27;
                if ((v29 - 48) > 9)
                  break;
                v28 = v29 + 10 * v28 - 48;
                ++v27;
              }
              while (v27 < v23);
            }
            if (UpTicksPerSecond_sOnce != -1)
              dispatch_once_f(&UpTicksPerSecond_sOnce, &UpTicksPerSecond_sTicksPerSecond, (dispatch_function_t)_UpTicksPerSecondInit);
            v30 = gLogCategoryList;
            if (gLogCategoryList)
            {
              v31 = UpTicksPerSecond_sTicksPerSecond * v28 / 0x3E8uLL;
              do
              {
                if ((!a1 || v30 == a1)
                  && _LogCategoryMatch(*(_DWORD *)(v30 + 16), *(char **)(v30 + 24), *(char **)(v20 + 8)))
                {
                  *(_QWORD *)(v30 + 72) = v31;
                  *(_DWORD *)(v30 + 88) = v24;
                }
                v30 = *(_QWORD *)(v30 + 48);
              }
              while (v30);
            }
          }
          v20 = *(_QWORD *)v20;
        }
        while (v20);
        v32 = gLogActionList;
        if (gLogActionList)
        {
          do
          {
            v33 = strnicmpx(*(unsigned __int8 **)(v32 + 16), -1, "output");
            if (!v33 || !strnicmpx(*(unsigned __int8 **)(v32 + 16), -1, "output2"))
            {
              for (j = gLogCategoryList; j; j = *(_QWORD *)(j + 48))
              {
                if ((!a1 || j == a1) && _LogCategoryMatch(*(_DWORD *)(j + 16), *(char **)(j + 24), *(char **)(v32 + 8)))
                {
                  v35 = *(char **)(v32 + 24);
                  if (!*v35)
                  {
                    v36 = 0;
LABEL_95:
                    if (v33)
                      v37 = 64;
                    else
                      v37 = 56;
                    v38 = *(_QWORD *)(j + v37);
                    if ((uint64_t *)v38 != v36)
                    {
                      if (v38)
                        --*(_DWORD *)(v38 + 8);
                      if (v36)
                        ++*((_DWORD *)v36 + 2);
                      *(_QWORD *)(j + v37) = v36;
                    }
                    continue;
                  }
                  v46 = 0;
                  if (!_LogOutputCreate(v35, &v46))
                  {
                    v36 = v46;
                    goto LABEL_95;
                  }
                }
              }
            }
            v32 = *(_QWORD *)v32;
          }
          while (v32);
          v39 = gLogActionList;
          if (gLogActionList)
          {
            while (strnicmpx(*(unsigned __int8 **)(v39 + 16), -1, "o1l"))
            {
              if (!strnicmpx(*(unsigned __int8 **)(v39 + 16), -1, "o2l"))
                goto LABEL_111;
              if (!strnicmpx(*(unsigned __int8 **)(v39 + 16), -1, "output1Level"))
                break;
              if (!strnicmpx(*(unsigned __int8 **)(v39 + 16), -1, "output2Level"))
              {
LABEL_111:
                v40 = 0;
                goto LABEL_113;
              }
LABEL_124:
              v39 = *(_QWORD *)v39;
              if (!v39)
                goto LABEL_125;
            }
            v40 = 1;
LABEL_113:
            v41 = LUStringToLevel(*(char **)(v39 + 24));
            v42 = gLogCategoryList;
            if (gLogCategoryList)
            {
              v43 = v41;
              do
              {
                if ((!a1 || v42 == a1)
                  && _LogCategoryMatch(*(_DWORD *)(v42 + 16), *(char **)(v42 + 24), *(char **)(v39 + 8)))
                {
                  if (v40)
                    v44 = 56;
                  else
                    v44 = 64;
                  v45 = *(_QWORD *)(v42 + v44);
                  if (v45)
                    *(_DWORD *)(v45 + 24) = v43;
                }
                v42 = *(_QWORD *)(v42 + 48);
              }
              while (v42);
            }
            goto LABEL_124;
          }
        }
      }
    }
  }
LABEL_125:
  _LogOutputDeleteUnused();
}

BOOL _LogCategoryMatch(__int16 a1, char *a2, char *a3)
{
  if ((a1 & 0x100) != 0)
    return strcasecmp(a2, a3) == 0;
  else
    return RegexMatch((unsigned __int8 *)a3, a2) != 0;
}

uint64_t RegexMatch(unsigned __int8 *a1, _BYTE *a2)
{
  _BYTE *v2;

  v2 = a2;
  if (*a1 == 94)
    return RegexMatchHere(a1 + 1, a2);
  while (!RegexMatchHere(a1, v2))
  {
    if (!*v2++)
      return 0;
  }
  return 1;
}

uint64_t RegexMatchHere(unsigned __int8 *a1, _BYTE *a2)
{
  __darwin_ct_rune_t v2;
  unsigned __int8 *v4;
  __darwin_ct_rune_t v5;
  __darwin_ct_rune_t v6;
  __darwin_ct_rune_t v7;
  __darwin_ct_rune_t v8;
  uint64_t result;
  _BYTE *v10;
  __darwin_ct_rune_t v11;
  __darwin_ct_rune_t v12;

  v2 = *a1;
  if (*a1)
  {
    v4 = a1;
    while (1)
    {
      v6 = *++v4;
      v5 = v6;
      if (v6 == 42)
        break;
      v7 = *a2;
      if (v2 == 36 && !v5)
        return v7 == 0;
      if (!*a2)
        return 0;
      if (v2 != 46)
      {
        v8 = __tolower(v2);
        if (v8 != __tolower(v7))
          return 0;
        v5 = *v4;
      }
      ++a2;
      v2 = v5;
      a1 = v4;
      if (!v5)
        return 1;
    }
    v10 = a1 + 2;
    while (!RegexMatchHere(v10, a2))
    {
      result = *a2;
      if (!*a2)
        return result;
      ++a2;
      v11 = __tolower(result);
      v12 = __tolower(v2);
      if (v2 != 46 && v11 != v12)
        return 0;
    }
  }
  return 1;
}

uint64_t LUStringToLevel(char *__s1)
{
  uint64_t v2;
  char *v3;
  char *v4;
  int v5;
  int v6;
  size_t v7;
  uint64_t v8;
  const char **i;
  int v10;
  unsigned int v11;
  char *v12;
  int v13;
  uint64_t result;
  int v15;
  int v16;
  uint64_t v17;

  v2 = MEMORY[0x1E0C80978];
  v3 = __s1;
  do
  {
    v4 = v3;
    v5 = *v3;
    if (*v3 < 0)
      v6 = __maskrune(*v3, 0x100uLL);
    else
      v6 = *(_DWORD *)(v2 + 4 * *v3 + 60) & 0x100;
    ++v3;
  }
  while (v6);
  v7 = v4 - __s1;
  if (v4 == __s1)
  {
    v10 = *__s1;
    if ((v10 - 48) > 9)
    {
      v11 = 0;
    }
    else
    {
      v11 = 0;
      v12 = __s1 + 1;
      do
      {
        v11 = 10 * v11 + (char)v10 - 48;
        v13 = *v12++;
        v10 = v13;
      }
      while ((v13 - 48) < 0xA);
    }
    if (v10)
      return 0xFFFFFFFFLL;
    else
      return v11;
  }
  else
  {
    v8 = 0;
    for (i = (const char **)&off_1E25DEA90; strncmp(__s1, *i, v7); i += 2)
    {
      if (++v8 == 18)
        return 0xFFFFFFFFLL;
    }
    result = kLogLevelToStringTable[4 * v8];
    if (v5 && (_DWORD)result != -1)
    {
      v15 = *v3;
      if ((v15 - 48) > 9)
      {
        v16 = 0;
      }
      else
      {
        v16 = 0;
        v17 = 1;
        do
        {
          v16 = 10 * v16 + (char)v15 - 48;
          v15 = v3[v17++];
        }
        while ((v15 - 48) < 0xA);
      }
      if (v15)
        return 0xFFFFFFFFLL;
      if (v5 != 45)
      {
        if (v5 == 43)
          return (v16 + result);
        return 0xFFFFFFFFLL;
      }
      return (result - v16);
    }
  }
  return result;
}

uint64_t _LogOutputCreate(char *a1, uint64_t **a2)
{
  uint64_t *v4;
  uint64_t v5;
  uint64_t *v6;
  char *v7;
  unsigned __int8 *i;
  uint64_t v9;
  unsigned __int8 *v10;
  int v11;
  unsigned __int8 *v12;
  int v13;
  uint64_t v14;
  _BYTE *k;
  unint64_t v16;
  unsigned __int8 *v17;
  uint64_t v18;
  FILE *v19;
  int v21;
  unsigned __int8 *v22;
  int v23;
  unsigned __int8 *v24;
  uint64_t v25;
  size_t j;
  unsigned __int8 *v27;
  size_t v28;
  uint64_t v29;
  size_t v30;
  unsigned __int8 *v31;
  char *v32;
  char *v33;
  void *v34;
  char *v35;
  int64_t v36;
  FILE *v37;
  uint64_t v38;
  int v39;
  int v40;
  uint64_t v41;
  unsigned __int8 *v42;
  BOOL v43;
  unsigned __int8 *v44;
  unsigned __int8 *v45;
  int v46;
  int v47;
  uint64_t v48;
  int v49;
  _BYTE *v50;
  _BYTE *v51;
  void *v52;
  unsigned __int8 *v53;
  int v54;
  int v55;
  FILE *v56;
  FILE **v57;
  unsigned __int8 *v59;
  uint64_t v60;
  char v61[1025];
  uint64_t v62;

  v62 = *MEMORY[0x1E0C80C00];
  v4 = &gLogOutputList;
  while (1)
  {
    v4 = (uint64_t *)*v4;
    if (!v4)
      break;
    if (!strnicmpx((unsigned __int8 *)v4[2], -1, a1))
    {
      v5 = 0;
LABEL_149:
      *a2 = v4;
      return v5;
    }
  }
  v6 = (uint64_t *)malloc_type_calloc(1uLL, 0x68uLL, 0x10B2040D471ABDAuLL);
  if (!v6)
    return 4294960568;
  v4 = v6;
  *((_DWORD *)v6 + 2) = 0;
  v7 = strdup(a1);
  v4[2] = (uint64_t)v7;
  if (!v7)
  {
LABEL_152:
    v5 = 4294960568;
    goto LABEL_142;
  }
  *((_DWORD *)v4 + 6) = -1;
  for (i = (unsigned __int8 *)a1; *i && *i != 59; ++i)
    ;
  v9 = i - (unsigned __int8 *)a1;
  if (i == (unsigned __int8 *)a1)
  {
    v5 = 4294960540;
    goto LABEL_142;
  }
  if (*i)
    v10 = i + 1;
  else
    v10 = i;
  if (strnicmpx((unsigned __int8 *)a1, i - (unsigned __int8 *)a1, "callback"))
  {
    if (!strnicmpx((unsigned __int8 *)a1, v9, "console"))
    {
      if (!_LogOutputOSLog_Setup((uint64_t)v4, v10))
        goto LABEL_148;
      goto LABEL_44;
    }
    if (strnicmpx((unsigned __int8 *)a1, v9, "file"))
    {
      if (!strnicmpx((unsigned __int8 *)a1, v9, "oslog"))
      {
        v18 = _LogOutputOSLog_Setup((uint64_t)v4, v10);
        if ((_DWORD)v18)
        {
LABEL_144:
          v5 = v18;
          goto LABEL_142;
        }
LABEL_148:
        v5 = 0;
        *v4 = gLogOutputList;
        gLogOutputList = (uint64_t)v4;
        goto LABEL_149;
      }
      if (strnicmpx((unsigned __int8 *)a1, v9, "syslog"))
      {
LABEL_20:
        v5 = 4294960591;
        goto LABEL_142;
      }
LABEL_44:
      v18 = _LogOutputSysLog_Setup((uint64_t)v4, v10);
      if ((_DWORD)v18)
        goto LABEL_144;
      goto LABEL_148;
    }
    v4[4] = (uint64_t)_LogOutputFile_Writer;
    *((_DWORD *)v4 + 10) = 2;
    v19 = (FILE *)v4[7];
    if (v19)
    {
      if (v19 != (FILE *)*MEMORY[0x1E0C80C10] && v19 != (FILE *)*MEMORY[0x1E0C80C20])
        fclose(v19);
    }
    v4[7] = 0;
    if (*v10 && strnicmpx(v10, -1, "stderr"))
    {
      if (strnicmpx(v10, -1, "stdout"))
      {
        v21 = *v10;
        if (*v10)
        {
          while (1)
          {
            v22 = v10;
            if (!v21)
              goto LABEL_141;
            while (v21 != 61)
            {
              v23 = *++v22;
              v21 = v23;
              if (!v23)
                goto LABEL_141;
            }
            v24 = v22 + 1;
            v25 = -1;
            for (j = 1; v22[j] && v22[j] != 59; ++j)
              ++v25;
            v27 = &v22[j];
            v28 = j - 1;
            v29 = (uint64_t)(v22[j] ? v27 + 1 : &v22[j]);
            v59 = (unsigned __int8 *)v29;
            if (strnicmpx(v10, v22 - v10, "path"))
              break;
            if (j == 1)
              goto LABEL_156;
            v32 = (char *)malloc_type_malloc(j, 0x4BEBB36AuLL);
            if (!v32)
              goto LABEL_152;
            v33 = v32;
            memcpy(v32, v22 + 1, j - 1);
            v33[v28] = 0;
            v34 = (void *)v4[6];
            if (v34)
              free(v34);
            v4[6] = (uint64_t)v33;
            v35 = strrchr(v33, 47);
            if (v35)
            {
              v36 = v35 - v33;
              if ((unint64_t)(v35 - v33) > 0x400)
              {
LABEL_156:
                v5 = 4294960592;
                goto LABEL_142;
              }
              __memcpy_chk();
              v61[v36] = 0;
              mkpath(v61, 0x1F8u, 504);
              v33 = (char *)v4[6];
            }
            v37 = fopen(v33, "a");
            v4[7] = (uint64_t)v37;
            if (!v37)
            {
              v5 = 4294960541;
              goto LABEL_142;
            }
            fseeko(v37, 0, 2);
            v4[8] = ftello((FILE *)v4[7]);
LABEL_138:
            v10 = v59;
            v21 = *v59;
            if (!*v59)
              goto LABEL_139;
          }
          if (!strnicmpx(v10, v22 - v10, "roll"))
          {
            if (j < 2)
            {
              v38 = 0;
            }
            else
            {
              v38 = 0;
              while (1)
              {
                v39 = *v24;
                v40 = (char)v39;
                if ((v39 - 48) > 9)
                  break;
                v38 = (char)v39 + 10 * v38 - 48;
                if (++v24 >= v27)
                  goto LABEL_105;
              }
              v41 = v38 << 20;
              if (v39 == 66)
                v42 = v24 + 1;
              else
                v42 = v24;
              v43 = v39 == 75;
              if (v39 == 75)
                v44 = v24 + 1;
              else
                v44 = v42;
              if (v43)
                v38 <<= 10;
              if (v40 == 77)
                ++v24;
              else
                v24 = v44;
              if (v40 == 77)
                v38 = v41;
            }
LABEL_105:
            if (v24 != v27 && *v24 != 35)
              goto LABEL_20;
            v4[9] = v38;
            v45 = v24 >= v27 ? v24 : v24 + 1;
            if (v45 >= v27)
            {
              v46 = 0;
            }
            else
            {
              v46 = 0;
              do
              {
                v47 = *v45;
                if ((v47 - 48) > 9)
                  break;
                v46 = (char)v47 + 10 * v46 - 48;
                ++v45;
              }
              while (v45 < v27);
            }
            if (v45 != v27)
              goto LABEL_20;
            *((_DWORD *)v4 + 20) = v46;
            goto LABEL_138;
          }
          if (strnicmpx(v10, v22 - v10, "backup"))
            goto LABEL_138;
          if (j < 2)
          {
            LODWORD(v25) = 0;
            v30 = 1;
            v31 = v22 + 1;
          }
          else
          {
            if (*v24 != 35)
            {
              v48 = 2;
              while (1)
              {
                v30 = v48;
                if (!v25)
                  break;
                v31 = &v22[v48];
                v49 = v22[v48++];
                --v25;
                if (v49 == 35)
                {
                  LODWORD(v25) = v30 < j;
                  goto LABEL_89;
                }
              }
              v31 = &v22[v48];
              goto LABEL_123;
            }
            v30 = 1;
            v31 = v22 + 1;
            LODWORD(v25) = 1;
          }
LABEL_89:
          if (v30 != j)
          {
            if (*v31 != 35)
              goto LABEL_20;
            v28 = v30 - 1;
            goto LABEL_124;
          }
LABEL_123:
          v30 = j;
LABEL_124:
          if (v30 == 1)
          {
            v50 = 0;
          }
          else
          {
            v51 = malloc_type_malloc(v30, 0x12B12331uLL);
            if (!v51)
              goto LABEL_152;
            v50 = v51;
            memcpy(v51, v22 + 1, v28);
            v50[v28] = 0;
          }
          v52 = (void *)v4[11];
          if (v52)
            free(v52);
          v4[11] = (uint64_t)v50;
          v53 = &v31[v25];
          if (v53 >= v27)
          {
            v54 = 0;
          }
          else
          {
            v54 = 0;
            do
            {
              v55 = *v53;
              if ((v55 - 48) > 9)
                break;
              v54 = (char)v55 + 10 * v54 - 48;
              ++v53;
            }
            while (v53 < v27);
          }
          if (v53 != v27)
            goto LABEL_20;
          *((_DWORD *)v4 + 24) = v54;
          goto LABEL_138;
        }
LABEL_139:
        v56 = (FILE *)v4[7];
        if (!v56)
          goto LABEL_20;
LABEL_147:
        setvbuf(v56, 0, 2, 0);
        goto LABEL_148;
      }
      v57 = (FILE **)MEMORY[0x1E0C80C20];
    }
    else
    {
      v57 = (FILE **)MEMORY[0x1E0C80C10];
    }
    v56 = *v57;
    v4[7] = (uint64_t)*v57;
    goto LABEL_147;
  }
  v60 = 0;
  v4[6] = 0;
  v4[7] = 0;
  v11 = *v10;
  if (!*v10)
  {
LABEL_42:
    v4[4] = (uint64_t)_LogOutputCallBack_Writer;
    *((_DWORD *)v4 + 10) = 11;
    goto LABEL_148;
  }
  while (1)
  {
    v12 = v10;
    if (!v11)
    {
LABEL_141:
      v5 = 4294960554;
      goto LABEL_142;
    }
    while (v11 != 61)
    {
      v13 = *++v12;
      v11 = v13;
      if (!v13)
        goto LABEL_141;
    }
    v14 = v12 - v10;
    for (k = v12 + 1; *k && *k != 59; ++k)
      ;
    v16 = k - (v12 + 1);
    v17 = *k ? k + 1 : k;
    if (!strnicmpx(v10, v14, "func"))
      break;
    if (!strnicmpx(v10, v14, "arg"))
    {
      if (v16 > 0x3F)
        goto LABEL_155;
      __memcpy_chk();
      v61[v16] = 0;
      if (sscanf(v61, "%p", v4 + 7) != 1)
        goto LABEL_141;
    }
LABEL_41:
    v11 = *v17;
    v10 = v17;
    if (!*v17)
      goto LABEL_42;
  }
  if (v16 <= 0x3F)
  {
    __memcpy_chk();
    v61[v16] = 0;
    if (sscanf(v61, "%p", &v60) != 1)
      goto LABEL_141;
    v4[6] = v60;
    goto LABEL_41;
  }
LABEL_155:
  v5 = 4294960553;
LABEL_142:
  _LogOutputDelete(v4);
  return v5;
}

uint64_t LogCategory_Remove(void *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  id *v8;
  void *v9;
  void *v10;
  void *v11;

  LogUtils_EnsureInitialized();
  pthread_mutex_lock(&gLogUtilsLock);
  v2 = gLogCategoryList;
  if (gLogCategoryList)
  {
    if ((void *)gLogCategoryList == a1)
    {
      v4 = &gLogCategoryList;
LABEL_7:
      v5 = *((_QWORD *)a1 + 7);
      if (v5)
        --*(_DWORD *)(v5 + 8);
      v6 = *((_QWORD *)a1 + 8);
      if (v6)
        --*(_DWORD *)(v6 + 8);
      *v4 = *((_QWORD *)a1 + 6);
      *(_DWORD *)a1 = -1;
      *((_QWORD *)a1 + 7) = 0;
      *((_QWORD *)a1 + 8) = 0;
      _LogOutputDeleteUnused();
    }
    else
    {
      while (1)
      {
        v3 = v2;
        v2 = *(_QWORD *)(v2 + 48);
        if (!v2)
          break;
        if ((void *)v2 == a1)
        {
          v4 = (uint64_t *)(v3 + 48);
          goto LABEL_7;
        }
      }
    }
  }
  v7 = *((_DWORD *)a1 + 4);
  if ((v7 & 0x20000) != 0)
  {
    v8 = (id *)*((_QWORD *)a1 + 13);
    if (v8)
    {
      if (*v8)
      {

        v8 = (id *)*((_QWORD *)a1 + 13);
        *v8 = 0;
      }
      if (v8[1])
      {
        free(v8[1]);
        v8 = (id *)*((_QWORD *)a1 + 13);
        v8[1] = 0;
      }
      free(v8);
      *((_QWORD *)a1 + 13) = 0;
      v7 = *((_DWORD *)a1 + 4);
    }
  }
  if ((v7 & 0x10000) != 0)
  {
    v9 = (void *)*((_QWORD *)a1 + 14);
    if (v9)
      free(v9);
    v10 = (void *)*((_QWORD *)a1 + 15);
    if (v10)
      free(v10);
    v11 = (void *)*((_QWORD *)a1 + 16);
    if (v11)
      free(v11);
    free(a1);
  }
  return pthread_mutex_unlock(&gLogUtilsLock);
}

_DWORD *LogCategoryCreateEx(const char *a1, const char *a2, int a3, int a4, const char *a5, int *a6)
{
  _DWORD *v12;
  char *v13;
  char *v14;
  const char *v15;
  char *v16;
  void *v17;
  void *v18;
  void *v19;
  int v20;
  int v21;

  v12 = malloc_type_calloc(1uLL, 0x88uLL, 0x107004000997796uLL);
  if (!v12)
  {
LABEL_14:
    v20 = -6728;
    goto LABEL_17;
  }
  if (a1 && (v13 = strdup(a1), (*((_QWORD *)v12 + 14) = v13) == 0)
    || (v14 = strdup(a2), (*((_QWORD *)v12 + 15) = v14) == 0))
  {
LABEL_7:
    v17 = (void *)*((_QWORD *)v12 + 14);
    if (v17)
      free(v17);
    v18 = (void *)*((_QWORD *)v12 + 15);
    if (v18)
      free(v18);
    v19 = (void *)*((_QWORD *)v12 + 16);
    if (v19)
      free(v19);
    free(v12);
    v12 = 0;
    goto LABEL_14;
  }
  v15 = v14;
  if (a5)
  {
    v16 = strdup(a5);
    *((_QWORD *)v12 + 16) = v16;
    if (!v16)
      goto LABEL_7;
  }
  else
  {
    v16 = (char *)*((_QWORD *)v12 + 16);
  }
  *v12 = -1;
  v12[1] = a3;
  *((_QWORD *)v12 + 1) = v16;
  v12[4] = a4 | 0x70000;
  *((_QWORD *)v12 + 3) = v15;
  *((_QWORD *)v12 + 4) = v15;
  v21 = strlen(v15);
  v20 = 0;
  v12[10] = v21;
  *((_QWORD *)v12 + 12) = *((_QWORD *)v12 + 14);
LABEL_17:
  if (a6)
    *a6 = v20;
  return v12;
}

CFNumberRef _OPACKInitializeOnce()
{
  uint64_t v0;
  CFNumberRef result;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char valuePtr;

  gCFArrayType_11840 = CFArrayGetTypeID();
  gCFBooleanType_11838 = CFBooleanGetTypeID();
  gCFDataType_11841 = CFDataGetTypeID();
  gCFDateType_11842 = CFDateGetTypeID();
  gCFDictionaryType_11839 = CFDictionaryGetTypeID();
  gCFNumberType_11837 = CFNumberGetTypeID();
  gCFStringType_11836 = CFStringGetTypeID();
  v0 = 0;
  gCFUUIDType = CFUUIDGetTypeID();
  do
  {
    valuePtr = v0 - 1;
    result = CFNumberCreate(0, kCFNumberSInt8Type, &valuePtr);
    gCFNumbers[v0] = result;
    if (!result)
      FatalErrorF((uint64_t)"Create small number %d failed", v2, v3, v4, v5, v6, v7, v8, valuePtr);
    ++v0;
  }
  while (v0 != 41);
  return result;
}

uint64_t NSErrorToOSStatusEx(void *a1, char *a2)
{
  id v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  uint64_t v15;
  char v16;
  char v18;
  void *v19;
  int v20;
  void *v21;
  int v22;
  void *v23;
  void *v24;
  int v25;
  void *v26;
  int v27;
  uint64_t v28;
  void *v29;
  int v30;
  int v31;
  void *v32;
  int v33;
  uint64_t v34;
  unsigned int v35;
  BOOL v36;
  void *v37;
  int v38;
  uint64_t v39;
  int v40;
  void *v41;
  int v42;
  void *v43;
  int v44;
  void *v45;
  int v46;
  void *v47;
  int v48;
  int v49;
  void *v50;
  int v51;
  void *v52;
  int v53;
  void *v54;
  int v55;
  void *v56;
  int v57;
  unsigned int v58;
  void *v59;
  int v60;
  void *v61;
  void *v62;
  void *v63;
  void *v64;
  char v65;
  void *v66;
  int v67;
  void *v68;
  int v69;
  void *v70;
  void *v71;
  int v72;
  uint64_t v73;
  void *v74;
  int v75;
  unsigned int v76;
  unsigned int v77;
  void *v78;
  void *v79;
  void *v80;
  void *v81;
  void *v82;
  void *v83;
  void *v84;
  void *v85;
  void *v86;

  v3 = a1;
  v4 = v3;
  if (!v3)
  {
    v15 = 0;
    goto LABEL_23;
  }
  objc_msgSend(v3, "domain");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  if ((objc_msgSend(v5, "isEqualToString:", *MEMORY[0x1E0CB2F90]) & 1) != 0)
    goto LABEL_21;
  objc_msgSend(v4, "domain");
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  if ((objc_msgSend(v6, "isEqualToString:", *MEMORY[0x1E0CB2FE0]) & 1) != 0)
  {
LABEL_20:

LABEL_21:
LABEL_22:
    v15 = objc_msgSend(v4, "code");
LABEL_23:
    v16 = 1;
    goto LABEL_24;
  }
  objc_msgSend(v4, "domain");
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  if ((objc_msgSend(v7, "isEqualToString:", *MEMORY[0x1E0CB2D98]) & 1) != 0)
  {
LABEL_19:

    goto LABEL_20;
  }
  objc_msgSend(v4, "domain");
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  if ((objc_msgSend(v8, "isEqualToString:", CFSTR("AKAnisetteError")) & 1) != 0)
  {
LABEL_18:

    goto LABEL_19;
  }
  objc_msgSend(v4, "domain");
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  if ((objc_msgSend(v9, "isEqualToString:", CFSTR("AKAuthenticationError")) & 1) != 0)
  {
LABEL_17:

    goto LABEL_18;
  }
  objc_msgSend(v4, "domain");
  v10 = (void *)objc_claimAutoreleasedReturnValue();
  if ((objc_msgSend(v10, "isEqualToString:", CFSTR("AVFoundationErrorDomain")) & 1) != 0)
  {
LABEL_16:

    goto LABEL_17;
  }
  objc_msgSend(v4, "domain");
  v11 = (void *)objc_claimAutoreleasedReturnValue();
  if ((objc_msgSend(v11, "isEqualToString:", CFSTR("com.apple.accounts.keychain")) & 1) != 0)
  {
LABEL_15:

    goto LABEL_16;
  }
  objc_msgSend(v4, "domain");
  v12 = (void *)objc_claimAutoreleasedReturnValue();
  if ((objc_msgSend(v12, "isEqualToString:", CFSTR("com.apple.wifi.apple80211API.error")) & 1) != 0)
  {
LABEL_14:

    goto LABEL_15;
  }
  v86 = v12;
  objc_msgSend(v4, "domain");
  v13 = (void *)objc_claimAutoreleasedReturnValue();
  if ((objc_msgSend(v13, "isEqualToString:", CFSTR("CDPStateError")) & 1) != 0)
  {
LABEL_13:

    v12 = v86;
    goto LABEL_14;
  }
  v85 = v13;
  objc_msgSend(v4, "domain");
  v14 = (void *)objc_claimAutoreleasedReturnValue();
  if ((objc_msgSend(v14, "isEqualToString:", CFSTR("NSCocoaErrorDomain")) & 1) != 0)
  {

    v13 = v85;
    goto LABEL_13;
  }
  v84 = v14;
  objc_msgSend(v4, "domain");
  v83 = (void *)objc_claimAutoreleasedReturnValue();
  if ((objc_msgSend(v83, "isEqualToString:", CFSTR("NSURLErrorDomain")) & 1) != 0)
  {
    v18 = 1;
  }
  else
  {
    objc_msgSend(v4, "domain");
    v82 = (void *)objc_claimAutoreleasedReturnValue();
    if ((objc_msgSend(v82, "isEqualToString:", CFSTR("RPErrorDomain")) & 1) != 0)
    {
      v18 = 1;
    }
    else
    {
      objc_msgSend(v4, "domain");
      v81 = (void *)objc_claimAutoreleasedReturnValue();
      if ((objc_msgSend(v81, "isEqualToString:", CFSTR("SFAppleIDErrorDomain")) & 1) != 0)
      {
        v18 = 1;
      }
      else
      {
        objc_msgSend(v4, "domain");
        v80 = (void *)objc_claimAutoreleasedReturnValue();
        if ((objc_msgSend(v80, "isEqualToString:", CFSTR("UserErrorDomain")) & 1) != 0)
        {
          v18 = 1;
        }
        else
        {
          objc_msgSend(v4, "domain");
          v79 = (void *)objc_claimAutoreleasedReturnValue();
          if ((objc_msgSend(v79, "isEqualToString:", CFSTR("WCErrorDomain")) & 1) != 0)
          {
            v18 = 1;
          }
          else
          {
            objc_msgSend(v4, "domain");
            v78 = (void *)objc_claimAutoreleasedReturnValue();
            v18 = objc_msgSend(v78, "isEqualToString:", CFSTR("WCInternalErrorDomain"));

          }
        }

      }
    }

  }
  if ((v18 & 1) != 0)
    goto LABEL_22;
  objc_msgSend(v4, "domain");
  v19 = (void *)objc_claimAutoreleasedReturnValue();
  v20 = objc_msgSend(v19, "isEqualToString:", CFSTR("com.apple.accounts"));

  if (v20)
  {
    v15 = objc_msgSend(v4, "code") + 312200;
    goto LABEL_23;
  }
  objc_msgSend(v4, "domain");
  v21 = (void *)objc_claimAutoreleasedReturnValue();
  v22 = objc_msgSend(v21, "isEqualToString:", CFSTR("com.apple.AppleIDAuthSupport"));

  if (v22)
  {
    v15 = objc_msgSend(v4, "code") + 312250;
    goto LABEL_23;
  }
  objc_msgSend(v4, "domain");
  v23 = (void *)objc_claimAutoreleasedReturnValue();
  if (objc_msgSend(v23, "isEqualToString:", CFSTR("AppleKeyStore")))
  {

LABEL_51:
    v15 = 300940 - objc_msgSend(v4, "code");
    goto LABEL_23;
  }
  objc_msgSend(v4, "domain");
  v24 = (void *)objc_claimAutoreleasedReturnValue();
  v25 = objc_msgSend(v24, "isEqualToString:", CFSTR("AKS"));

  if (v25)
    goto LABEL_51;
  objc_msgSend(v4, "domain");
  v26 = (void *)objc_claimAutoreleasedReturnValue();
  v27 = objc_msgSend(v26, "isEqualToString:", CFSTR("CBErrorDomain"));

  if (v27)
  {
    v28 = objc_msgSend(v4, "code");
    if (v28 >= 0x49444)
      v15 = v28;
    else
      v15 = objc_msgSend(v4, "code") + 300100;
    goto LABEL_23;
  }
  objc_msgSend(v4, "domain");
  v29 = (void *)objc_claimAutoreleasedReturnValue();
  v30 = objc_msgSend(v29, "isEqualToString:", CFSTR("CBATTErrorDomain"));

  if (v30)
  {
    v31 = objc_msgSend(v4, "code");
    if (v31 <= 0x11)
    {
      v15 = (v31 + 300120);
      goto LABEL_23;
    }
    v35 = v31 + 311000;
    v36 = v31 < 300100;
LABEL_70:
    if (v36)
      v15 = v35;
    else
      v15 = v31;
    goto LABEL_23;
  }
  objc_msgSend(v4, "domain");
  v32 = (void *)objc_claimAutoreleasedReturnValue();
  v33 = objc_msgSend(v32, "isEqualToString:", CFSTR("CBInternalErrorDomain"));

  if (v33)
  {
    v34 = objc_msgSend(v4, "code");
    if ((_DWORD)v34 == 12)
    {
      v15 = 300112;
    }
    else
    {
      v15 = v34;
      if ((_DWORD)v34 == 13)
      {
        v15 = 300113;
      }
      else if ((int)v34 < 300100)
      {
        v15 = objc_msgSend(v4, "code") + 312800;
      }
    }
    goto LABEL_23;
  }
  objc_msgSend(v4, "domain");
  v37 = (void *)objc_claimAutoreleasedReturnValue();
  v38 = objc_msgSend(v37, "isEqualToString:", CFSTR("kCFErrorDomainCFNetwork"));

  if (v38)
  {
    v39 = objc_msgSend(v4, "code");
    v15 = v39;
    v16 = 1;
    if ((int)v39 > 199)
    {
      switch((int)v39)
      {
        case 300:
          v15 = 300155;
          goto LABEL_23;
        case 301:
          v15 = 300156;
          goto LABEL_23;
        case 302:
          v40 = 57;
          goto LABEL_116;
        case 303:
          v40 = 58;
          goto LABEL_116;
        case 304:
          v40 = 59;
          goto LABEL_116;
        case 305:
          v15 = 300160;
          goto LABEL_23;
        case 306:
          v15 = 300161;
          goto LABEL_23;
        case 307:
          v15 = 300162;
          goto LABEL_23;
        case 308:
          v15 = 300163;
          goto LABEL_23;
        case 309:
          v15 = 300164;
          goto LABEL_23;
        case 310:
          v15 = 300165;
          goto LABEL_23;
        case 311:
          v15 = 300166;
          goto LABEL_23;
        default:
          if ((_DWORD)v39 != 200)
            goto LABEL_24;
          v15 = 300154;
          break;
      }
    }
    else
    {
      switch((int)v39)
      {
        case 'd':
          v40 = 43;
          break;
        case 'e':
          v15 = 300144;
          goto LABEL_23;
        case 'f':
        case 'g':
        case 'h':
        case 'i':
        case 'j':
        case 'k':
        case 'l':
        case 'm':
        case 'r':
        case 's':
        case 't':
        case 'u':
        case 'v':
        case 'w':
          goto LABEL_24;
        case 'n':
          v15 = 300145;
          goto LABEL_23;
        case 'o':
          v15 = 300146;
          goto LABEL_23;
        case 'p':
          v15 = 300147;
          goto LABEL_23;
        case 'q':
          v15 = 300148;
          goto LABEL_23;
        case 'x':
          v40 = 49;
          break;
        case 'y':
          v40 = 50;
          break;
        case 'z':
          v40 = 51;
          break;
        case '{':
          v15 = 300152;
          goto LABEL_23;
        case '|':
          v15 = 300153;
          goto LABEL_23;
        default:
          if ((_DWORD)v39 == 1)
          {
            v40 = 41;
          }
          else
          {
            if ((_DWORD)v39 != 2)
              goto LABEL_24;
            v40 = 42;
          }
          break;
      }
LABEL_116:
      v15 = v40 | 0x49444u;
    }
    goto LABEL_23;
  }
  objc_msgSend(v4, "domain");
  v41 = (void *)objc_claimAutoreleasedReturnValue();
  v42 = objc_msgSend(v41, "isEqualToString:", CFSTR("CSIdentityErrorDomain"));

  if (v42)
  {
    v31 = objc_msgSend(v4, "code");
    v35 = v31 + 312115;
    v36 = v31 < 0;
    goto LABEL_70;
  }
  objc_msgSend(v4, "domain");
  v43 = (void *)objc_claimAutoreleasedReturnValue();
  v44 = objc_msgSend(v43, "isEqualToString:", CFSTR("HMErrorDomain"));

  if (v44)
  {
    v15 = objc_msgSend(v4, "code") + 300200;
    goto LABEL_23;
  }
  objc_msgSend(v4, "domain");
  v45 = (void *)objc_claimAutoreleasedReturnValue();
  v46 = objc_msgSend(v45, "isEqualToString:", CFSTR("HMFErrorDomain"));

  if (v46)
  {
    v15 = objc_msgSend(v4, "code") + 312600;
    goto LABEL_23;
  }
  objc_msgSend(v4, "domain");
  v47 = (void *)objc_claimAutoreleasedReturnValue();
  v48 = objc_msgSend(v47, "isEqualToString:", CFSTR("com.apple.identityservices.error"));

  if (v48)
  {
    v49 = objc_msgSend(v4, "code");
    if (v49 == 200)
      v15 = 300800;
    else
      v15 = (v49 + 300400);
    goto LABEL_23;
  }
  objc_msgSend(v4, "domain");
  v50 = (void *)objc_claimAutoreleasedReturnValue();
  v51 = objc_msgSend(v50, "isEqualToString:", CFSTR("IDSLocalPairingErrorDomain"));

  if (v51
    || (objc_msgSend(v4, "domain"),
        v52 = (void *)objc_claimAutoreleasedReturnValue(),
        v53 = objc_msgSend(v52, "isEqualToString:", CFSTR("IDSAccountRegistrationErrorDomain")),
        v52,
        v53))
  {
    v15 = objc_msgSend(v4, "code") + 300500;
    goto LABEL_23;
  }
  objc_msgSend(v4, "domain");
  v54 = (void *)objc_claimAutoreleasedReturnValue();
  v55 = objc_msgSend(v54, "isEqualToString:", CFSTR("com.apple.ids.idssenderrordomain"));

  if (v55)
  {
    v15 = objc_msgSend(v4, "code") + 300700;
    goto LABEL_23;
  }
  objc_msgSend(v4, "domain");
  v56 = (void *)objc_claimAutoreleasedReturnValue();
  v57 = objc_msgSend(v56, "isEqualToString:", CFSTR("com.apple.ids.idssessionerrorDomain"));

  if (v57)
  {
    v58 = objc_msgSend(v4, "code");
    if (v58 >= 3)
      v15 = v58;
    else
      v15 = v58 + 300801;
    goto LABEL_23;
  }
  objc_msgSend(v4, "domain");
  v59 = (void *)objc_claimAutoreleasedReturnValue();
  v60 = objc_msgSend(v59, "isEqualToString:", CFSTR("signal"));

  if (v60)
  {
    v15 = objc_msgSend(v4, "code") + 312700;
    goto LABEL_23;
  }
  objc_msgSend(v4, "domain");
  v61 = (void *)objc_claimAutoreleasedReturnValue();
  if ((objc_msgSend(v61, "isEqualToString:", CFSTR("kAFAssistantErrorDomain")) & 1) != 0)
    goto LABEL_130;
  objc_msgSend(v4, "domain");
  v62 = (void *)objc_claimAutoreleasedReturnValue();
  if ((objc_msgSend(v62, "isEqualToString:", CFSTR("SiriAceErrorDomain")) & 1) != 0)
  {
LABEL_129:

LABEL_130:
LABEL_131:
    v15 = objc_msgSend(v4, "code") + 320000;
    goto LABEL_23;
  }
  objc_msgSend(v4, "domain");
  v63 = (void *)objc_claimAutoreleasedReturnValue();
  if (objc_msgSend(v63, "isEqualToString:", CFSTR("SiriSpeechErrorDomain")))
  {

    goto LABEL_129;
  }
  objc_msgSend(v4, "domain");
  v64 = (void *)objc_claimAutoreleasedReturnValue();
  v65 = objc_msgSend(v64, "isEqualToString:", CFSTR("SiriStructuredDictationErrorDomain"));

  if ((v65 & 1) != 0)
    goto LABEL_131;
  objc_msgSend(v4, "domain");
  v66 = (void *)objc_claimAutoreleasedReturnValue();
  v67 = objc_msgSend(v66, "isEqualToString:", CFSTR("SBSRemoteAlertHandleInvalidationErrorDomain"));

  if (v67)
  {
    v15 = objc_msgSend(v4, "code") + 300180;
    goto LABEL_23;
  }
  objc_msgSend(v4, "domain");
  v68 = (void *)objc_claimAutoreleasedReturnValue();
  v69 = objc_msgSend(v68, "isEqualToString:", CFSTR("SSErrorDomain"));

  if (v69)
  {
    v15 = objc_msgSend(v4, "code") + 312300;
    goto LABEL_23;
  }
  objc_msgSend(v4, "domain");
  v70 = (void *)objc_claimAutoreleasedReturnValue();
  if (objc_msgSend(v70, "isEqualToString:", CFSTR("TRNearbyDeviceErrorDomain")))
  {

  }
  else
  {
    objc_msgSend(v4, "domain");
    v71 = (void *)objc_claimAutoreleasedReturnValue();
    v72 = objc_msgSend(v71, "isEqualToString:", CFSTR("TouchRemote"));

    if (!v72)
    {
      objc_msgSend(v4, "domain");
      v74 = (void *)objc_claimAutoreleasedReturnValue();
      v75 = objc_msgSend(v74, "isEqualToString:", CFSTR("WPErrorDomain"));

      v76 = objc_msgSend(v4, "code");
      if (v75)
      {
        v15 = v76 + 300900;
        goto LABEL_23;
      }
      v16 = 0;
      if (v76)
        v15 = v76;
      else
        v15 = 4294960596;
      goto LABEL_24;
    }
  }
  v73 = objc_msgSend(v4, "code");
  if (v73 <= -9105)
  {
    if (v73 <= -9402)
    {
      if (v73 > -10002)
      {
        switch(v73)
        {
          case -10001:
            v15 = 300985;
            goto LABEL_23;
          case -10000:
            v15 = 300984;
            goto LABEL_23;
          case -9500:
            v15 = 300983;
            goto LABEL_23;
        }
      }
      else
      {
        switch(v73)
        {
          case -11001:
            v15 = 300988;
            goto LABEL_23;
          case -11000:
            v15 = 300987;
            goto LABEL_23;
          case -10002:
            v15 = 300986;
            goto LABEL_23;
        }
      }
    }
    else if (v73 <= -9301)
    {
      switch(v73)
      {
        case -9401:
          v15 = 300982;
          goto LABEL_23;
        case -9400:
          v15 = 300981;
          goto LABEL_23;
        case -9301:
          v15 = 300980;
          goto LABEL_23;
      }
    }
    else if (v73 > -9202)
    {
      if (v73 == -9201)
      {
        v15 = 300977;
        goto LABEL_23;
      }
      if (v73 == -9200)
      {
        v15 = 300976;
        goto LABEL_23;
      }
    }
    else
    {
      if (v73 == -9300)
      {
        v15 = 300979;
        goto LABEL_23;
      }
      if (v73 == -9202)
      {
        v15 = 300978;
        goto LABEL_23;
      }
    }
LABEL_195:
    v77 = objc_msgSend(v4, "code");
    if (v77)
      v15 = v77;
    else
      v15 = 300960;
    goto LABEL_23;
  }
  if (v73 <= -8008)
  {
    switch(v73)
    {
      case -9104:
        v15 = 300975;
        break;
      case -9103:
        v15 = 300974;
        break;
      case -9102:
        v15 = 300973;
        break;
      case -9101:
        v15 = 300972;
        break;
      case -9100:
        v15 = 300971;
        break;
      default:
        if (v73 == -9001)
        {
          v15 = 300970;
        }
        else
        {
          if (v73 != -9000)
            goto LABEL_195;
          v15 = 300969;
        }
        break;
    }
    goto LABEL_23;
  }
  v15 = 300961;
  v16 = 1;
  switch(v73)
  {
    case -8007:
      v15 = 300968;
      break;
    case -8006:
      v15 = 300967;
      break;
    case -8005:
      v15 = 300966;
      break;
    case -8004:
      v15 = 300965;
      break;
    case -8003:
      v15 = 300964;
      break;
    case -8002:
      v15 = 300963;
      break;
    case -8001:
      v15 = 300962;
      break;
    case -8000:
      break;
    default:
      goto LABEL_195;
  }
LABEL_24:
  if (a2)
    *a2 = v16;

  return v15;
}

void sub_18D41E808(_Unwind_Exception *a1)
{
  uint64_t v1;

  (*(void (**)(uint64_t))(v1 + 16))(v1);
  _Unwind_Resume(a1);
}

uint64_t SecondsToUpTicks(uint64_t a1)
{
  if (SecondsToUpTicks_sOnce != -1)
    dispatch_once_f(&SecondsToUpTicks_sOnce, &SecondsToUpTicks_sMultiplier, (dispatch_function_t)_SecondsToUpTicksInit);
  return SecondsToUpTicks_sMultiplier * a1;
}

uint64_t PrintFWriteTimeDuration(unint64_t a1, int a2, char *a3)
{
  unint64_t v3;
  unsigned int v4;
  unsigned int v5;
  unsigned int v6;
  unsigned int v7;
  unsigned int v8;
  unsigned int v9;
  char *v10;
  _BYTE *v11;
  BOOL v12;
  char *v13;
  char v14;
  char *v15;
  _BYTE *v16;
  char v17;
  unsigned int v18;
  char *v19;
  _BYTE *v20;
  char v21;
  char v22;
  char v23;
  _BYTE *v24;
  char v25;
  char v26;
  char v27;
  _BYTE *v28;
  char v29;
  _BYTE v31[32];
  uint64_t v32;

  v32 = *MEMORY[0x1E0C80C00];
  v3 = a1 / 0x1E13380;
  v4 = a1 % 0x1E13380;
  v5 = v4 / 0x15180;
  v6 = v4 % 0x15180;
  v7 = v4 % 0x15180 / 0xE10;
  v8 = v4 % 0x15180 % 0xE10;
  v9 = (unsigned __int16)v8 / 0x3Cu;
  v10 = a3;
  if ((a1 / 0x1E13380))
  {
    v11 = v31;
    do
    {
      *v11++ = (v3 % 0xA) | 0x30;
      v12 = v3 > 9;
      LODWORD(v3) = v3 / 0xA;
    }
    while (v12);
    v13 = a3;
    if (v11 > v31)
    {
      v13 = a3;
      do
      {
        v14 = *--v11;
        *v13++ = v14;
      }
      while (v11 > v31);
    }
    *v13 = 121;
    v10 = v13 + 1;
  }
  if (v4 >= 0x15180)
  {
    v15 = a3;
    if (v10 != a3)
    {
      *v10 = 32;
      v15 = v10 + 1;
    }
    v16 = v31;
    do
    {
      *v16++ = (v5 % 0xA) | 0x30;
      v12 = v5 > 9;
      v5 /= 0xAu;
    }
    while (v12);
    while (v16 > v31)
    {
      v17 = *--v16;
      *v15++ = v17;
    }
    *v15 = 100;
    v10 = v15 + 1;
  }
  v18 = (unsigned __int16)v8 % 0x3Cu;
  if (v6 >= 0xE10)
  {
    v19 = a3;
    if (v10 != a3)
    {
      *v10 = 32;
      v19 = v10 + 1;
    }
    if (a2 && v6 >> 5 <= 0x464)
      *v19++ = 48;
    v20 = v31;
    do
    {
      *v20++ = (v7 % 0xA) | 0x30;
      v12 = v7 > 9;
      v7 /= 0xAu;
    }
    while (v12);
    while (v20 > v31)
    {
      v21 = *--v20;
      *v19++ = v21;
    }
    if (a2)
      v22 = 58;
    else
      v22 = 104;
    *v19 = v22;
    v10 = v19 + 1;
  }
  if (a2 || v8 >= 0x3C)
  {
    if (a2 || v10 == a3)
    {
      if (v6 < 0xE10 || !a2 || v8 > 0x257)
        goto LABEL_40;
      v23 = 48;
    }
    else
    {
      v23 = 32;
    }
    *v10++ = v23;
LABEL_40:
    v24 = v31;
    do
    {
      *v24++ = (v9 % 0xA) | 0x30;
      v12 = v9 > 9;
      v9 /= 0xAu;
    }
    while (v12);
    while (v24 > v31)
    {
      v25 = *--v24;
      *v10++ = v25;
    }
    if (a2)
      v26 = 58;
    else
      v26 = 109;
    *v10++ = v26;
  }
  if (!((unsigned __int16)v8 % 0x3Cu) && !a2 && v10 != a3)
    goto LABEL_64;
  if (!a2 && v10 != a3)
  {
    v27 = 32;
LABEL_57:
    *v10++ = v27;
    goto LABEL_58;
  }
  if (a2 && v18 <= 9)
  {
    v27 = 48;
    goto LABEL_57;
  }
LABEL_58:
  v28 = v31;
  do
  {
    *v28++ = (v18 % 0xA) | 0x30;
    v12 = v18 > 9;
    v18 /= 0xAu;
  }
  while (v12);
  while (v28 > v31)
  {
    v29 = *--v28;
    *v10++ = v29;
  }
  if (!a2)
    *v10++ = 115;
LABEL_64:
  *v10 = 0;
  return ((_DWORD)v10 - (_DWORD)a3);
}

uint64_t PrintFWriteErrorObject(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  id v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  void *v17;
  void *v18;
  int v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  void *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  __CFError *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  int v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  void *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  CFTypeID TypeID;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  int v61;
  uint64_t v62;
  uint64_t v63;
  int v65;
  int v66;
  uint64_t v67;
  char v68;
  char v69[128];
  uint64_t v70;

  v70 = *MEMORY[0x1E0C80C00];
  v10 = a2;
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) != 0)
  {
    v17 = 0;
    v18 = 0;
    v19 = 0;
    LODWORD(v20) = 0;
    v68 = 0;
    v21 = *MEMORY[0x1E0CB3388];
    while (1)
    {
      if (v19)
      {
        v22 = PrintFCore(a1, (uint64_t)" -> ", v11, v12, v13, v14, v15, v16, v67);
        if ((v22 & 0x80000000) != 0)
        {
          v20 = v22;
          v23 = v18;
          goto LABEL_32;
        }
        LODWORD(v20) = v22 + v20;
      }
      objc_msgSend(v10, "userInfo");
      v23 = (void *)objc_claimAutoreleasedReturnValue();

      objc_msgSend(v23, "objectForKeyedSubscript:", CFSTR("cuErrorDesc"));
      v24 = objc_claimAutoreleasedReturnValue();

      if (v24)
      {
        v31 = PrintFCore(a1, (uint64_t)"%@", v25, v26, v27, v28, v29, v30, v24);
        if ((v31 & 0x80000000) != 0)
        {
          v20 = v31;
          v17 = (void *)v24;
          goto LABEL_32;
        }
        v20 = (v31 + v20);
        v17 = (void *)v24;
      }
      else
      {
        v32 = CUErrorCFErrorToString((__CFError *)v10);
        if (v32)
        {
          v39 = PrintFCore(a1, (uint64_t)"%s", v33, v34, v35, v36, v37, v38, (uint64_t)v32);
          if ((v39 & 0x80000000) != 0)
            goto LABEL_35;
        }
        else
        {
          v69[0] = 0;
          v40 = NSErrorToOSStatusEx(v10, &v68);
          if (v68)
            DebugGetErrorStringEx(0, v40, v69, 128);
          if (v69[0])
          {
            v39 = PrintFCore(a1, (uint64_t)"%s", v41, v42, v43, v44, v45, v46, (uint64_t)v69);
            if ((v39 & 0x80000000) != 0)
              goto LABEL_35;
          }
          else
          {
            objc_msgSend(v10, "domain");
            v47 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend(v10, "code");
            v39 = PrintFCore(a1, (uint64_t)"%@:%ld", v48, v49, v50, v51, v52, v53, (uint64_t)v47);

            if ((v39 & 0x80000000) != 0)
            {
LABEL_35:
              v17 = 0;
              v20 = v39;
              goto LABEL_32;
            }
          }
        }
        v20 = (v39 + v20);
        TypeID = CFStringGetTypeID();
        CFDictionaryGetTypedValue((const __CFDictionary *)v23, CFSTR("cuErrorMsg"), TypeID, 0);
        v17 = (void *)objc_claimAutoreleasedReturnValue();
        if (objc_msgSend(v17, "length"))
        {
          v61 = PrintFCore(a1, (uint64_t)" '%@'", v55, v56, v57, v58, v59, v60, (uint64_t)v17);
          v20 = (v20 & ~(v61 >> 31)) + v61;
          if (v61 < 0)
            goto LABEL_32;
        }
      }
      objc_msgSend(v23, "objectForKeyedSubscript:", v21);
      v62 = objc_claimAutoreleasedReturnValue();

      if (!v62)
      {
        v10 = 0;
        goto LABEL_32;
      }
      v10 = (id)v62;
      objc_opt_class();
      if ((objc_opt_isKindOfClass() & 1) == 0)
        break;
      ++v19;
      v18 = v23;
      if (v19 == 4)
        goto LABEL_32;
    }
    v65 = PrintFCore(a1, (uint64_t)"-> ?", v11, v12, v13, v14, v15, v16, v67);
    if (v65 >= 0)
      v66 = v20;
    else
      v66 = 0;
    v20 = (v66 + v65);
LABEL_32:

    return v20;
  }
  else if (v10)
  {
    v63 = PrintFCore(a1, (uint64_t)"<<non-error>>", v11, v12, v13, v14, v15, v16, v67);

    return v63;
  }
  else
  {
    return PrintFCore(a1, (uint64_t)"kNoErr", v11, v12, v13, v14, v15, v16, a9);
  }
}

uint64_t CUXPCGetNextClientID()
{
  unsigned int v0;
  uint64_t result;

  if (CUXPCGetNextClientID_sOnce != -1)
    dispatch_once(&CUXPCGetNextClientID_sOnce, &__block_literal_global_10187);
  do
  {
    v0 = __ldaxr((unsigned int *)&CUXPCGetNextClientID_sNext);
    result = v0 + 1;
  }
  while (__stlxr(result, (unsigned int *)&CUXPCGetNextClientID_sNext));
  return result;
}

__CFError *CUErrorCFErrorToString(__CFError *result)
{
  __CFError *v1;
  const __CFString *Domain;
  int Code;

  if (result)
  {
    v1 = result;
    Domain = CFErrorGetDomain(result);
    Code = CFErrorGetCode(v1);
    return (__CFError *)CUErrorDomainCodeToString(Domain, Code);
  }
  return result;
}

void CUDispatchTimerSetEx(NSObject *a1, int a2, double a3, double a4, double a5)
{
  unint64_t v8;
  dispatch_time_t v9;
  uint64_t v10;
  uint64_t v11;

  v8 = (unint64_t)(a3 * 1000000000.0);
  v9 = dispatch_time((unint64_t)(a2 != 0) << 63, v8);
  if (a5 <= -10.0)
  {
    v10 = v8 / 0xA;
  }
  else if (a5 <= -4.0)
  {
    v10 = v8 >> 2;
  }
  else
  {
    v10 = (unint64_t)(a5 * 1000000000.0);
  }
  if (a4 < 0.0)
    v11 = -1;
  else
    v11 = (unint64_t)(a4 * 1000000000.0);
  dispatch_source_set_timer(a1, v9, v11, v10);
}

void CUAppendV(id *a1, int *a2, uint64_t a3, uint64_t a4)
{
  char *v6;
  id v7;
  int v8;
  const __CFString *v9;
  id v10;
  void *v11;

  v11 = 0;
  VASPrintF(&v11, a3, a4);
  v6 = (char *)v11;
  if (v11)
  {
    if (!*(_BYTE *)v11)
    {
      free(v11);
      return;
    }
    v7 = *a1;
    if (!v7)
    {
      v7 = objc_retainAutorelease(objc_alloc_init(MEMORY[0x1E0CB37A0]));
      *a1 = v7;
    }
    v8 = *a2;
    v10 = v7;
    if ((*a2 & 1) == 0)
    {
      v8 |= 1u;
LABEL_18:
      CFStringAppendCString((CFMutableStringRef)*a1, v6, 0x8000100u);
      free(v6);
      *a2 = v8;

      return;
    }
    if ((v8 & 2) != 0)
    {
      if ((v8 & 8) != 0)
        objc_msgSend(v7, "appendString:", CFSTR(", "));
      goto LABEL_18;
    }
    if ((v8 & 4) != 0)
    {
      v9 = CFSTR(": ");
    }
    else
    {
      if ((v8 & 8) == 0)
      {
LABEL_17:
        v8 |= 2u;
        goto LABEL_18;
      }
      v9 = CFSTR(", ");
    }
    objc_msgSend(v7, "appendString:", v9, v7);
    goto LABEL_17;
  }
}

void CUAppendF(id *a1, int *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  CUAppendV(a1, a2, a3, (uint64_t)&a9);
}

const void *CFPrefs_CopyTypedValue(const __CFString *a1, CFStringRef key, uint64_t a3, int *a4)
{
  const __CFString *v7;
  CFPropertyListRef v8;
  const void *v9;
  int v10;

  if (a1)
    v7 = a1;
  else
    v7 = (const __CFString *)*MEMORY[0x1E0C9B248];
  v8 = CFPreferencesCopyAppValue(key, v7);
  v9 = v8;
  if (!v8)
  {
    v10 = -6727;
    if (!a4)
      return v9;
    goto LABEL_10;
  }
  if (!a3 || CFGetTypeID(v8) == a3)
  {
    v10 = 0;
    if (!a4)
      return v9;
    goto LABEL_10;
  }
  CFRelease(v9);
  v9 = 0;
  v10 = -6756;
  if (a4)
LABEL_10:
    *a4 = v10;
  return v9;
}

id CDPStateControllerFunction()
{
  return (id)classCDPStateController;
}

id CDPContextFunction()
{
  return (id)classCDPContext;
}

__n128 AES_CTR_Init(CCCryptorRef *cryptorRef, void *key, __n128 *a3)
{
  __n128 result;

  *cryptorRef = 0;
  if (!CCCryptorCreate(0, 0, 2u, key, 0x10uLL, 0, cryptorRef))
  {
    result = *a3;
    *(__n128 *)(cryptorRef + 1) = *a3;
    cryptorRef[5] = 0;
  }
  return result;
}

uint64_t AES_CTR_Update(uint64_t a1, char *a2, unint64_t a3, _BYTE *a4)
{
  unint64_t v5;
  _BYTE *v8;
  uint64_t v9;
  char v10;
  uint64_t result;
  uint64_t v12;
  __int16 v13;
  uint64_t v14;
  uint64_t v15;
  __int16 v16;
  uint64_t v17;
  uint64_t v18;
  size_t dataOutMoved;

  v5 = a3;
  v8 = (_BYTE *)(a1 + 24);
  v9 = *(_QWORD *)(a1 + 40);
  if (a3 && v9)
  {
    do
    {
      v10 = *a2++;
      *a4++ = v8[v9] ^ v10;
      v9 = ((int)v9 + 1) & 0xFLL;
      --v5;
    }
    while (v5 && v9);
  }
  dataOutMoved = 0;
  *(_QWORD *)(a1 + 40) = v9;
  if (v5 < 0x10)
  {
LABEL_14:
    if (v5)
    {
      result = CCCryptorUpdate(*(CCCryptorRef *)a1, (const void *)(a1 + 8), 0x10uLL, v8, 0x10uLL, &dataOutMoved);
      if (!(_DWORD)result)
      {
        if (dataOutMoved == 16)
        {
          v15 = 23;
          do
          {
            if (v15 == 7)
              break;
            v16 = (*(_BYTE *)(a1 + v15--))++ + 1;
          }
          while ((v16 & 0x100) != 0);
          v17 = 0;
          dataOutMoved = 0;
          if (v5 <= 1)
            v18 = 1;
          else
            v18 = v5;
          do
          {
            a4[v17] = *(_BYTE *)(v9 + a1 + 24 + v17) ^ a2[v17];
            dataOutMoved = ++v17;
          }
          while (v18 != v17);
          result = 0;
          *(_QWORD *)(a1 + 40) = v9 + v17;
        }
        else
        {
          return 4294960553;
        }
      }
    }
    else
    {
      return 0;
    }
  }
  else
  {
    while (1)
    {
      result = CCCryptorUpdate(*(CCCryptorRef *)a1, (const void *)(a1 + 8), 0x10uLL, v8, 0x10uLL, &dataOutMoved);
      if ((_DWORD)result)
        break;
      if (dataOutMoved != 16)
        return 4294960553;
      v12 = 23;
      do
      {
        if (v12 == 7)
          break;
        v13 = (*(_BYTE *)(a1 + v12--))++ + 1;
      }
      while ((v13 & 0x100) != 0);
      v14 = 0;
      dataOutMoved = 0;
      do
      {
        a4[v14] = v8[v14] ^ a2[v14];
        dataOutMoved = ++v14;
      }
      while (v14 != 16);
      a2 += 16;
      a4 += 16;
      v5 -= 16;
      if (v5 <= 0xF)
        goto LABEL_14;
    }
  }
  return result;
}

uint64_t AES_CTR_Final(_CCCryptor **__s)
{
  _CCCryptor *v2;

  v2 = *__s;
  if (v2)
    CCCryptorRelease(v2);
  return memset_s(__s, 0x30uLL, 0, 0x30uLL);
}

__n128 AES_CBCFrame_Init(CCCryptorRef *cryptorRef, void *key, __n128 *a3, int a4)
{
  __n128 result;

  *cryptorRef = 0;
  if (!CCCryptorCreate(a4 == 0, 0, 0, key, 0x10uLL, 0, cryptorRef))
  {
    result = *a3;
    *(__n128 *)(cryptorRef + 1) = *a3;
  }
  return result;
}

uint64_t AES_CBCFrame_Update(CCCryptorRef *a1, char *a2, uint64_t a3, _BYTE *a4)
{
  size_t v7;
  uint64_t result;
  char *v10;
  char v11;
  size_t dataOutMoved;

  v7 = a3 & 0xFFFFFFFFFFFFFFF0;
  dataOutMoved = a3 & 0xFFFFFFFFFFFFFFF0;
  if ((a3 & 0xFFFFFFFFFFFFFFF0) != 0)
  {
    result = CCCryptorReset(*a1, a1 + 1);
    if ((_DWORD)result)
      return result;
    result = CCCryptorUpdate(*a1, a2, v7, a4, v7, &dataOutMoved);
    if ((_DWORD)result)
      return result;
    v10 = &a2[dataOutMoved];
    a4 += dataOutMoved;
  }
  else
  {
    v10 = a2;
  }
  while (v10 != &a2[a3])
  {
    v11 = *v10++;
    *a4++ = v11;
  }
  return 0;
}

uint64_t AES_CBCFrame_Final(_CCCryptor **__s)
{
  _CCCryptor *v2;

  v2 = *__s;
  if (v2)
    CCCryptorRelease(v2);
  return memset_s(__s, 0x18uLL, 0, 0x18uLL);
}

double AES_GCM_Init(CCCryptorRef *a1, void *key, __n128 *a3)
{
  double result;

  *(_QWORD *)&result = AES_GCM_InitEx(a1, 0, key, a3).n128_u64[0];
  return result;
}

__n128 AES_GCM_InitEx(CCCryptorRef *cryptorRef, CCOperation op, void *key, __n128 *a4)
{
  CCCryptorStatus v6;
  __n128 result;

  v6 = CCCryptorCreateWithMode(op, 0xBu, 0, 0, 0, key, 0x10uLL, 0, 0, 0, 0, cryptorRef);
  if (a4)
  {
    if (!v6)
    {
      result = *a4;
      *(__n128 *)(cryptorRef + 1) = *a4;
    }
  }
  return result;
}

uint64_t AES_GCM_InitEx2(CCCryptorRef *cryptorRef, CCOperation op, void *key, size_t keyLength)
{
  return CCCryptorCreateWithMode(op, 0xBu, 0, 0, 0, key, keyLength, 0, 0, 0, 0, cryptorRef);
}

uint64_t AES_GCM_Final(_CCCryptor **__s)
{
  _CCCryptor *v2;

  v2 = *__s;
  if (v2)
    CCCryptorRelease(v2);
  return memset_s(__s, 0x18uLL, 0, 0x18uLL);
}

uint64_t AES_GCM_InitMessage(uint64_t a1, uint64_t a2)
{
  uint64_t result;
  uint64_t v5;
  __int16 v6;

  result = CCCryptorGCMReset();
  if (!(_DWORD)result)
  {
    if (!a2)
    {
      v5 = 23;
      do
      {
        if (v5 == 7)
          break;
        v6 = (*(_BYTE *)(a1 + v5--))++ + 1;
      }
      while ((v6 & 0x100) != 0);
    }
    return CCCryptorGCMSetIV();
  }
  return result;
}

uint64_t AES_GCM_InitMessageEx()
{
  uint64_t result;

  result = CCCryptorGCMReset();
  if (!(_DWORD)result)
    return CCCryptorGCMSetIV();
  return result;
}

uint64_t AES_GCM_FinalizeMessage()
{
  return CCCryptorGCMFinalize();
}

uint64_t AES_GCM_VerifyMessage()
{
  return CCCryptorGCMFinalize();
}

uint64_t AES_GCM_AddAAD()
{
  return CCCryptorGCMAddAAD();
}

void AES_GCM_Encrypt()
{
  JUMPOUT(0x18D78D3B0);
}

void AES_GCM_Decrypt()
{
  JUMPOUT(0x18D78D3A4);
}

uint64_t SimpleArrayAppendItem(void **a1, uint64_t *a2, size_t a3, const void *a4)
{
  uint64_t v4;
  size_t v5;
  void *v10;
  char *v11;
  char *v12;
  uint64_t result;

  v4 = *a2;
  v5 = *a2 * a3;
  if (__CFADD__(v5, a3))
    return 4294960553;
  v10 = *a1;
  v11 = (char *)malloc_type_malloc(v5 + a3, 0x874EB8AuLL);
  if (!v11)
    return 4294960568;
  v12 = v11;
  if (v4)
    memcpy(v11, v10, v5);
  memcpy(&v12[v5], a4, a3);
  if (v10)
    free(v10);
  result = 0;
  *a1 = v12;
  *a2 = v4 + 1;
  return result;
}

uint64_t SimpleArrayRemoveItemAtIndex(void **a1, unint64_t *a2, unint64_t a3, unint64_t a4, int a5)
{
  unint64_t v5;
  char *v10;
  unint64_t v11;
  BOOL v12;
  uint64_t result;
  char *v14;
  char *v15;
  unint64_t v16;

  v5 = *a2;
  if (*a2 <= a4)
    return 4294960586;
  v10 = (char *)*a1;
  if (a5)
  {
    if (v5 < 2)
    {
      free(*a1);
      result = 0;
      *a1 = 0;
      *a2 = 0;
    }
    else
    {
      v11 = v5 - 1;
      v12 = !is_mul_ok(a3, v5 - 1);
      result = 4294960553;
      if (a3 && !v12)
      {
        v14 = (char *)malloc_type_malloc(a3 * v11, 0x70026AE6uLL);
        if (v14)
        {
          v15 = v14;
          if (a4)
          {
            memcpy(v14, v10, a4 * a3);
            v14 = &v15[a4 * a3];
          }
          v16 = a3 + a3 * a4;
          if (v16 != v5 * a3)
            memcpy(v14, &v10[v16], v5 * a3 - v16);
          *a1 = v15;
          *a2 = v11;
          free(v10);
          return 0;
        }
        else
        {
          return 4294960568;
        }
      }
    }
  }
  else
  {
    if (v5 - 1 > a4)
      memcpy(&v10[a4 * a3], &v10[a3 + a4 * a3], v5 * a3 - (a3 + a4 * a3));
    result = 0;
    *a2 = v5 - 1;
  }
  return result;
}

uint64_t AsyncConnection_Connect(_QWORD *a1, uint64_t a2, int a3, int a4, uint64_t a5, int a6, int a7, uint64_t a8, __int128 a9, uint64_t a10, uint64_t a11)
{
  uint64_t v12;
  int v13;
  int v14;
  uint64_t v15;
  int v16;
  int v17;
  uint64_t v18;
  __int128 v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  uint64_t v28;

  v28 = 0;
  v27 = 0u;
  v26 = 0u;
  v23 = 0;
  v25 = 0u;
  v24 = 152;
  v12 = a2;
  v13 = a3;
  v14 = a4;
  v15 = a5;
  v16 = a6;
  v17 = a7;
  v18 = a8;
  v19 = a9;
  v20 = a10;
  v21 = a11;
  v22 = 0;
  return AsyncConnection_ConnectEx(a1, (uint64_t)&v12);
}

uint64_t AsyncConnection_ConnectEx(_QWORD *a1, uint64_t a2)
{
  _DWORD *v4;
  _DWORD *v5;
  char *v6;
  uint64_t v7;
  double Current;
  int *v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  int *v18;
  const void *v19;
  uint64_t v20;
  int v21;
  int v22;
  uint64_t result;
  int *v24;

  v4 = malloc_type_calloc(1uLL, 0xB8uLL, 0x10F0040E01D48F7uLL);
  if (!v4)
    return 4294960568;
  v5 = v4;
  *v4 = 1;
  if (*(_QWORD *)a2)
  {
    v6 = strdup(*(const char **)a2);
    *((_QWORD *)v5 + 1) = v6;
    if (!v6)
    {
      _AsyncConnection_Release(v5);
      return 4294960568;
    }
  }
  *((_QWORD *)v5 + 2) = *(_QWORD *)(a2 + 8);
  v7 = *(_QWORD *)(a2 + 16);
  if (!v7)
    v7 = -1;
  *((_QWORD *)v5 + 6) = v7;
  *((_QWORD *)v5 + 3) = *(_QWORD *)(a2 + 80);
  Current = CFAbsoluteTimeGetCurrent();
  *(_OWORD *)(v5 + 22) = *(_OWORD *)(a2 + 32);
  v10 = *(_QWORD *)(a2 + 64);
  v9 = *(int **)(a2 + 72);
  if (!v9)
    v9 = &gLogCategory_AsyncCnx;
  *((_QWORD *)v5 + 18) = v9;
  *((_QWORD *)v5 + 7) = *(_QWORD *)(a2 + 24);
  *((double *)v5 + 8) = Current;
  *((_QWORD *)v5 + 13) = v10;
  *((_OWORD *)v5 + 7) = *(_OWORD *)(a2 + 48);
  if ((*(_BYTE *)(a2 + 13) & 4) != 0)
  {
    v11 = *(_QWORD *)(a2 + 88);
    if (v11 >= 0x68)
    {
      if (*(_QWORD *)(a2 + 96))
      {
        *((_QWORD *)v5 + 17) = strdup(*(const char **)(a2 + 96));
        v24 = &gLogCategory_AsyncCnx;
        LogCategoryReplaceF((uint64_t *)&v24, (uint64_t)"%s-%s", v12, v13, v14, v15, v16, v17, (uint64_t)off_1EE065380);
        v18 = v24;
        if (v24)
        {
          *((_QWORD *)v5 + 18) = v24;
          *((_QWORD *)v5 + 19) = v18;
        }
        v11 = *(_QWORD *)(a2 + 88);
      }
      if (v11 >= 0x70)
      {
        *((_QWORD *)v5 + 16) = *(_QWORD *)(a2 + 104);
        if (v11 >= 0x78)
        {
          v19 = *(const void **)(a2 + 112);
          if (v19)
          {
            CFRetain(v19);
            v20 = *(_QWORD *)(a2 + 112);
            v11 = *(_QWORD *)(a2 + 88);
          }
          else
          {
            v20 = 0;
          }
          *((_QWORD *)v5 + 20) = v20;
          if (v11 >= 0x7C)
          {
            v5[42] = *(_DWORD *)(a2 + 120);
            if (v11 >= 0x84)
            {
              v21 = *(_DWORD *)(a2 + 124);
              v22 = *(_DWORD *)(a2 + 128);
              if (!v21)
                v21 = 1000;
              v5[43] = v21;
              v5[44] = v22;
              if (v11 >= 0x90)
              {
                *((_QWORD *)v5 + 4) = *(_QWORD *)(a2 + 136);
                if (v11 >= 0x94)
                  v5[45] = *(_DWORD *)(a2 + 144);
              }
            }
          }
        }
      }
    }
  }
  dispatch_retain(*(dispatch_object_t *)(a2 + 64));
  dispatch_async_f(*(dispatch_queue_t *)(a2 + 64), v5, (dispatch_function_t)_AsyncConnection_Connect);
  result = 0;
  *a1 = v5;
  return result;
}

void _AsyncConnection_Connect(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  const __CFArray *v9;
  CFIndex Count;
  CFIndex v11;
  CFIndex v12;
  uint64_t v13;
  CFTypeID TypeID;
  const __CFDictionary *TypedValueAtIndex;
  const __CFDictionary *v16;
  const void *Value;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  int *v23;
  char *v24;
  char *v25;
  uint64_t v26;
  char *v27;
  char *v28;
  CUNANDataSession *v29;
  int *v30;
  char *v31;
  uint64_t v32;
  NSObject *v33;
  NSObject *v34;
  dispatch_time_t v35;
  char *__stringp[7];

  v9 = *(const __CFArray **)(a1 + 160);
  if (v9)
  {
    Count = CFArrayGetCount(*(CFArrayRef *)(a1 + 160));
    if (Count >= 1)
    {
      v11 = Count;
      v12 = 0;
      v13 = 4294960591;
      while (1)
      {
        TypeID = CFDictionaryGetTypeID();
        TypedValueAtIndex = CFArrayGetTypedValueAtIndex(v9, v12, TypeID, 0);
        if (TypedValueAtIndex)
          break;
LABEL_22:
        if (v11 == ++v12)
          goto LABEL_37;
      }
      v16 = TypedValueAtIndex;
      Value = CFDictionaryGetValue(TypedValueAtIndex, CFSTR("nanEP"));
      if (!Value)
      {
        v24 = CFDictionaryCopyCString(v16, CFSTR("dnsName"), 0);
        if (v24)
        {
          v25 = v24;
          if (!*(_QWORD *)(a1 + 8))
            *(_QWORD *)(a1 + 8) = v24;
          v26 = _AsyncConnection_ConnectOne(a1, v24);
          if (v25 != *(char **)(a1 + 8))
            free(v25);
          if ((_DWORD)v26 != -6757)
          {
            if ((_DWORD)v26)
              goto LABEL_30;
            v13 = 0;
          }
        }
        goto LABEL_22;
      }
      v22 = (uint64_t)Value;
      v23 = *(int **)(a1 + 144);
      if (*v23 <= 50)
      {
        if (*v23 != -1)
        {
LABEL_8:
          LogPrintF((uint64_t)v23, (uint64_t)"OSStatus _AsyncConnection_StartNANDataSession(AsyncConnectionRef, CFTypeRef)", 0x32u, (uint64_t)"NAN data session start: %@\n", v18, v19, v20, v21, v22);
          goto LABEL_18;
        }
        if (_LogCategory_Initialize((uint64_t)v23, 0x32u))
        {
          v23 = *(int **)(a1 + 144);
          goto LABEL_8;
        }
      }
LABEL_18:
      v27 = (char *)malloc_type_calloc(1uLL, 0xB8uLL, 0x10E0040D7525972uLL);
      if (v27)
      {
        v28 = v27;
        ++*(_DWORD *)a1;
        *(_DWORD *)v27 = 1;
        *((_QWORD *)v27 + 2) = a1;
        *((_DWORD *)v27 + 15) = -1;
        v29 = objc_alloc_init(CUNANDataSession);
        *((_QWORD *)v28 + 13) = v29;
        -[CUNANDataSession setDispatchQueue:](v29, "setDispatchQueue:", *(_QWORD *)(a1 + 104));
        if (*(_QWORD *)(a1 + 136))
          -[CUNANDataSession setLabel:](v29, "setLabel:", objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:"));
        -[CUNANDataSession setPeerEndpoint:](v29, "setPeerEndpoint:", v22);
        -[CUNANDataSession setTrafficFlags:](v29, "setTrafficFlags:", *(unsigned int *)(a1 + 168));
        ++*(_DWORD *)v28;
        __stringp[0] = (char *)MEMORY[0x1E0C809B0];
        __stringp[1] = (char *)3221225472;
        __stringp[2] = (char *)___AsyncConnection_StartNANDataSession_block_invoke;
        __stringp[3] = (char *)&unk_1E25DBA20;
        __stringp[4] = (char *)v29;
        __stringp[5] = (char *)a1;
        __stringp[6] = v28;
        -[CUNANDataSession activateWithCompletion:](v29, "activateWithCompletion:", __stringp);
        v13 = 0;
        *((_QWORD *)v28 + 1) = *(_QWORD *)(a1 + 80);
        *(_QWORD *)(a1 + 80) = v28;
      }
      else
      {
        v13 = 4294960568;
      }
      goto LABEL_22;
    }
    v26 = 4294960591;
    goto LABEL_30;
  }
  v30 = *(int **)(a1 + 144);
  if (*v30 <= 50)
  {
    if (*v30 != -1)
    {
LABEL_28:
      LogPrintF((uint64_t)v30, (uint64_t)"OSStatus _AsyncConnection_ConnectStrings(AsyncConnectionRef)", 0x32u, (uint64_t)"Connect start: '%s'\n", a5, a6, a7, a8, *(_QWORD *)(a1 + 8));
      goto LABEL_32;
    }
    if (_LogCategory_Initialize((uint64_t)v30, 0x32u))
    {
      v30 = *(int **)(a1 + 144);
      goto LABEL_28;
    }
  }
LABEL_32:
  __stringp[0] = *(char **)(a1 + 8);
  v13 = 4294960591;
  while (__stringp[0])
  {
    v31 = strsep(__stringp, "\x1E");
    if (!v31)
      break;
    v32 = _AsyncConnection_ConnectOne(a1, v31);
    if ((_DWORD)v32 != -6757)
    {
      v13 = v32;
      if ((_DWORD)v32)
        break;
    }
  }
LABEL_37:
  v26 = v13;
  if ((_DWORD)v13)
    goto LABEL_30;
  if (*(_QWORD *)(a1 + 48) == -1)
    return;
  v33 = dispatch_source_create(MEMORY[0x1E0C80DD0], 0, 0, *(dispatch_queue_t *)(a1 + 104));
  *(_QWORD *)(a1 + 72) = v33;
  if (!v33)
  {
    v26 = 4294960596;
LABEL_30:
    _AsyncConnection_Complete(a1, 0, 0xFFFFFFFFLL, v26);
    return;
  }
  dispatch_set_context(v33, (void *)a1);
  dispatch_source_set_event_handler_f(*(dispatch_source_t *)(a1 + 72), (dispatch_function_t)_AsyncConnection_TimeoutHandler);
  v34 = *(NSObject **)(a1 + 72);
  v35 = dispatch_time(0, *(_QWORD *)(a1 + 48));
  dispatch_source_set_timer(v34, v35, 0xFFFFFFFFFFFFFFFFLL, 0x5F5E100uLL);
  dispatch_resume(*(dispatch_object_t *)(a1 + 72));
}

void _AsyncConnection_Release(_QWORD *a1)
{
  NSObject *v3;
  void *v4;
  void *v5;
  _BYTE *v6;
  const void *v7;

  if ((*(_DWORD *)a1)-- == 1)
  {
    _AsyncConnection_Complete();
    v3 = a1[13];
    if (v3)
    {
      dispatch_release(v3);
      a1[13] = 0;
    }
    v4 = (void *)a1[1];
    if (v4)
    {
      free(v4);
      a1[1] = 0;
    }
    v5 = (void *)a1[17];
    if (v5)
    {
      free(v5);
      a1[17] = 0;
    }
    v6 = (_BYTE *)a1[19];
    if (v6 && (v6[18] & 4) != 0)
    {
      LogCategory_Remove(v6);
      a1[19] = 0;
    }
    v7 = (const void *)a1[20];
    if (v7)
      CFRelease(v7);
    free(a1);
  }
}

uint64_t _AsyncConnection_Complete(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  void (*v5)(uint64_t *);
  void (*v6)(uint64_t, uint64_t, _QWORD);
  NSObject *v8;
  uint64_t result;
  uint64_t v10;
  int v11;
  int v12;
  uint64_t v13;
  uint64_t v14;

  v5 = *(void (**)(uint64_t *))(a1 + 128);
  *(_QWORD *)(a1 + 128) = 0;
  v6 = *(void (**)(uint64_t, uint64_t, _QWORD))(a1 + 112);
  *(_QWORD *)(a1 + 112) = 0;
  if (v5)
  {
    v10 = 32;
    v11 = a3;
    v12 = a4;
    v13 = *(_QWORD *)(a1 + 120);
    v14 = 0;
    if (a2)
    {
      v14 = *(_QWORD *)(a2 + 104);
      v5(&v10);
      *(_QWORD *)(a2 + 104) = v14;
    }
    else
    {
      v5(&v10);
    }
  }
  else if (v6)
  {
    v6(a3, a4, *(_QWORD *)(a1 + 120));
  }
  v8 = *(NSObject **)(a1 + 72);
  if (v8)
  {
    dispatch_source_cancel(*(dispatch_source_t *)(a1 + 72));
    dispatch_release(v8);
    *(_QWORD *)(a1 + 72) = 0;
  }
  while (1)
  {
    result = *(_QWORD *)(a1 + 80);
    if (!result)
      break;
    *(_QWORD *)(a1 + 80) = *(_QWORD *)(result + 8);
    _AsyncConnection_ReleaseOperation((_DWORD *)result);
  }
  return result;
}

void _AsyncConnection_ReleaseOperation(_DWORD *a1)
{
  const __SCNetworkReachability *v2;
  NSObject *v3;
  NSObject *v4;
  NSObject *v5;
  _DNSServiceRef_t *v6;
  int v8;
  void *v9;

  v2 = (const __SCNetworkReachability *)*((_QWORD *)a1 + 12);
  if (v2)
  {
    SCNetworkReachabilitySetCallback(v2, 0, 0);
    SCNetworkReachabilitySetDispatchQueue(*((SCNetworkReachabilityRef *)a1 + 12), 0);
    CFRelease(*((CFTypeRef *)a1 + 12));
    *((_QWORD *)a1 + 12) = 0;
  }
  v3 = *((_QWORD *)a1 + 9);
  if (v3)
  {
    dispatch_source_cancel(*((dispatch_source_t *)a1 + 9));
    dispatch_release(v3);
    *((_QWORD *)a1 + 9) = 0;
  }
  v4 = *((_QWORD *)a1 + 10);
  if (v4)
  {
    dispatch_source_cancel(*((dispatch_source_t *)a1 + 10));
    dispatch_release(v4);
    *((_QWORD *)a1 + 10) = 0;
  }
  v5 = *((_QWORD *)a1 + 11);
  if (v5)
  {
    dispatch_source_cancel(*((dispatch_source_t *)a1 + 11));
    dispatch_release(v5);
    *((_QWORD *)a1 + 11) = 0;
  }
  v6 = (_DNSServiceRef_t *)*((_QWORD *)a1 + 8);
  if (v6)
  {
    DNSServiceRefDeallocate(v6);
    *((_QWORD *)a1 + 8) = 0;
  }
  if ((*a1)-- == 1)
  {
    v8 = a1[15];
    if ((v8 & 0x80000000) == 0)
    {
      if (close(v8) && *__error())
        __error();
      a1[15] = -1;
    }
    v9 = (void *)*((_QWORD *)a1 + 13);
    if (v9)
    {
      objc_msgSend(*((id *)a1 + 13), "invalidate");

      *((_QWORD *)a1 + 13) = 0;
    }
    _AsyncConnection_Release(*((_QWORD **)a1 + 2));
    free(a1);
  }
}

uint64_t _AsyncConnection_ConnectOne(uint64_t a1, char *__s)
{
  char *v2;
  char *v4;
  size_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  DNSServiceRef *v15;
  DNSServiceRef *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t Record;
  int v22;
  BOOL v23;
  int *v24;
  uint64_t v25;
  void (*v27)(uint64_t, char *, _QWORD);
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  int *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  int v38;
  int *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  ifaddrs *v44;
  int v45;
  sockaddr *ifa_dstaddr;
  const char *ifa_name;
  unsigned int v48;
  uint32_t v49;
  int *v50;
  int *v51;
  DNSServiceRef *v52;
  DNSServiceRef *v53;
  int *v54;
  uint64_t v55;
  _QWORD v56[3];
  int v57;
  ifaddrs *v58;
  char v59[6];
  char fullname[16];
  __int128 v61;
  __int128 v62;
  __int128 v63;
  __int128 v64;
  __int128 v65;
  __int128 v66;
  __int128 v67;
  __int128 v68;
  __int128 v69;
  __int128 v70;
  __int128 v71;
  char name[4];
  uint64_t v73;

  v2 = __s;
  v73 = *MEMORY[0x1E0C80C00];
  v4 = strchr(__s, 58);
  if (!v4)
    goto LABEL_9;
  if (v4[1] != 47)
    goto LABEL_9;
  if (v4[2] != 47)
    goto LABEL_9;
  v68 = 0u;
  v69 = 0u;
  v66 = 0u;
  v67 = 0u;
  v64 = 0u;
  v65 = 0u;
  v62 = 0u;
  v63 = 0u;
  *(_OWORD *)fullname = 0u;
  v61 = 0u;
  URLParseComponents(v2, 0, (char **)fullname, 0);
  v5 = *((_QWORD *)&v63 + 1);
  v2 = (char *)v63;
  *(_BYTE *)(v63 + *((_QWORD *)&v63 + 1)) = 0;
  if (strnicmpx(*(unsigned __int8 **)fullname, *(uint64_t *)&fullname[8], "wake")
    || (*(_BYTE *)(a1 + 21) & 0x10) != 0)
  {
LABEL_9:
    if (!*v2)
      return 4294960539;
    memset(v56, 0, sizeof(v56));
    v57 = 0;
    if (!StringToSockAddr((unsigned __int8 *)v2, (uint64_t)v56, 0x1CuLL, 0))
    {
      v25 = *(unsigned int *)(a1 + 16);
      if ((*(_BYTE *)(a1 + 20) & 4) != 0)
      {
        if (!_AsyncConnection_ReachabilityStart(a1, 0, (uint64_t)v56, 0, v25))
          return 0;
        v25 = *(unsigned int *)(a1 + 16);
      }
      return _AsyncConnection_StartConnect(a1, 0, (uint64_t)v56, 0, v25, v11, v12, v13);
    }
    if (!stristr(v2, "._tcp.") && !stristr(v2, "._udp."))
      return _AsyncConnection_StartDNSResolve(a1, 0, v2, *(_DWORD *)(a1 + 16));
    v14 = *(_DWORD *)(a1 + 16);
    v15 = (DNSServiceRef *)malloc_type_calloc(1uLL, 0xB8uLL, 0x10E0040D7525972uLL);
    if (!v15)
      return 4294960568;
    v16 = v15;
    *(_DWORD *)name = 0;
    ++*(_DWORD *)a1;
    *(_DWORD *)v15 = 1;
    v15[2] = (DNSServiceRef)a1;
    *((_DWORD *)v15 + 15) = -1;
    *((CFAbsoluteTime *)v15 + 16) = CFAbsoluteTimeGetCurrent();
    LODWORD(v70) = 0;
    Record = ParseDestination(v2, fullname, (unsigned int *)name, &v70);
    if ((_DWORD)Record)
    {
LABEL_32:
      _AsyncConnection_ReleaseOperation(v16);
      return Record;
    }
    v22 = v70;
    if ((_DWORD)v70)
      v23 = v14 < 0;
    else
      v23 = 1;
    if (v23)
      v22 = v14;
    *((_DWORD *)v16 + 14) = v22;
    v24 = *(int **)(a1 + 144);
    if (*v24 <= 30)
    {
      if (*v24 != -1)
      {
LABEL_22:
        LogPrintF((uint64_t)v24, (uint64_t)"OSStatus _AsyncConnection_StartSRVQuery(AsyncConnectionRef, const char *, int)", 0x1Eu, (uint64_t)"Querying SRV %s\n", v17, v18, v19, v20, (uint64_t)v2);
        goto LABEL_29;
      }
      if (_LogCategory_Initialize((uint64_t)v24, 0x1Eu))
      {
        v24 = *(int **)(a1 + 144);
        goto LABEL_22;
      }
    }
LABEL_29:
    v27 = *(void (**)(uint64_t, char *, _QWORD))(a1 + 88);
    if (v27)
      v27(1, v2, *(_QWORD *)(a1 + 96));
    Record = DNSServiceQueryRecord(v16 + 8, 0x400000u, *(uint32_t *)name, fullname, 0x21u, 1u, (DNSServiceQueryRecordReply)_AsyncConnection_SRVCallBack, v16);
    if (!(_DWORD)Record)
    {
      DNSServiceSetDispatchQueue(v16[8], *(dispatch_queue_t *)(a1 + 104));
      v16[1] = *(DNSServiceRef *)(a1 + 80);
      *(_QWORD *)(a1 + 80) = v16;
      return Record;
    }
    goto LABEL_32;
  }
  v10 = *(int **)(a1 + 144);
  if (*v10 > 50)
    goto LABEL_36;
  if (*v10 != -1)
    goto LABEL_8;
  if (_LogCategory_Initialize((uint64_t)v10, 0x32u))
  {
    v10 = *(int **)(a1 + 144);
LABEL_8:
    LogPrintF((uint64_t)v10, (uint64_t)"OSStatus _AsyncConnection_StartWakeAll(AsyncConnectionRef, const char *, size_t)", 0x32u, (uint64_t)"WakeDevice start: %.*s\n", v6, v7, v8, v9, v5);
  }
LABEL_36:
  if (TextToHardwareAddress(v2, v5, 6, v59))
  {
    v33 = *(int **)(a1 + 144);
    if (*v33 > 90)
      return 0;
    if (*v33 == -1)
    {
      if (!_LogCategory_Initialize((uint64_t)v33, 0x5Au))
        return 0;
      v33 = *(int **)(a1 + 144);
    }
    LogPrintF((uint64_t)v33, (uint64_t)"OSStatus _AsyncConnection_StartWakeAll(AsyncConnectionRef, const char *, size_t)", 0x5Au, (uint64_t)"### WakeDevice failed: %.*s\n", v29, v30, v31, v32, v5);
    return 0;
  }
  SNPrintF((uint64_t)name, 32, (uint64_t)"%.6a@0.0.0.0", v28, v29, v30, v31, v32, (uint64_t)v59);
  v38 = socket(2, 2, 0);
  if ((v38 & 0x80000000) == 0)
    goto LABEL_47;
  v39 = *(int **)(a1 + 144);
  if (*v39 > 90)
    goto LABEL_47;
  if (*v39 == -1)
  {
    if (!_LogCategory_Initialize((uint64_t)v39, 0x5Au))
      goto LABEL_47;
    v39 = *(int **)(a1 + 144);
  }
  LogPrintF((uint64_t)v39, (uint64_t)"OSStatus _AsyncConnection_StartWakeAll(AsyncConnectionRef, const char *, size_t)", 0x5Au, (uint64_t)"### WakeDevice: create temp socket failed\n", v34, v35, v36, v37, v55);
LABEL_47:
  v58 = 0;
  getifaddrs(&v58);
  v44 = v58;
  if (!v58)
    goto LABEL_76;
  v45 = 0;
  do
  {
    if ((v44->ifa_flags & 9) != 1)
      goto LABEL_68;
    ifa_dstaddr = v44->ifa_dstaddr;
    if (!ifa_dstaddr)
      goto LABEL_68;
    if (ifa_dstaddr->sa_family != 2)
      goto LABEL_68;
    ifa_name = v44->ifa_name;
    if (!ifa_name)
      goto LABEL_68;
    v48 = if_nametoindex(ifa_name);
    if (!v48)
      goto LABEL_68;
    v49 = v48;
    if (v38 < 0 || (v70 = 0u, v71 = 0u, __strlcpy_chk(), ioctl(v38, 0xC020699FuLL, &v70), DWORD1(v71) == 2))
    {
      v50 = *(int **)(a1 + 144);
      if (*v50 <= 50)
      {
        if (*v50 == -1)
        {
          if (!_LogCategory_Initialize((uint64_t)v50, 0x32u))
            goto LABEL_63;
          v50 = *(int **)(a1 + 144);
        }
        LogPrintF((uint64_t)v50, (uint64_t)"OSStatus _AsyncConnection_StartWakeInterface(AsyncConnectionRef, const char *, uint32_t)", 0x32u, (uint64_t)"WakeDevice interface: %s, %u\n", v40, v41, v42, v43, (uint64_t)name);
      }
LABEL_63:
      v52 = (DNSServiceRef *)malloc_type_calloc(1uLL, 0xB8uLL, 0x10E0040D7525972uLL);
      if (v52)
      {
        v53 = v52;
        ++*(_DWORD *)a1;
        *(_DWORD *)v52 = 1;
        v52[2] = (DNSServiceRef)a1;
        *((_DWORD *)v52 + 15) = -1;
        if (DNSServiceResolve(v52 + 8, 0x40000u, v49, name, "_wake._tcp", "local.", (DNSServiceResolveReply)_AsyncConnection_WakeResolveCallback, v52))
        {
          _AsyncConnection_ReleaseOperation(v53);
        }
        else
        {
          DNSServiceSetDispatchQueue(v53[8], *(dispatch_queue_t *)(a1 + 104));
          v53[1] = *(DNSServiceRef *)(a1 + 80);
          *(_QWORD *)(a1 + 80) = v53;
        }
      }
      ++v45;
      goto LABEL_68;
    }
    v51 = *(int **)(a1 + 144);
    if (*v51 > 30)
      goto LABEL_68;
    if (*v51 != -1)
      goto LABEL_61;
    if (_LogCategory_Initialize((uint64_t)v51, 0x1Eu))
    {
      v51 = *(int **)(a1 + 144);
LABEL_61:
      LogPrintF((uint64_t)v51, (uint64_t)"OSStatus _AsyncConnection_StartWakeAll(AsyncConnectionRef, const char *, size_t)", 0x1Eu, (uint64_t)"WakeDevice: skiping non-Ethernet-style: %s\n", v40, v41, v42, v43, (uint64_t)v44->ifa_name);
    }
LABEL_68:
    v44 = v44->ifa_next;
  }
  while (v44);
  if (v58)
    MEMORY[0x18D78E7C0]();
  if (!v45)
  {
LABEL_76:
    v54 = *(int **)(a1 + 144);
    if (*v54 <= 90)
    {
      if (*v54 != -1)
        goto LABEL_78;
      if (_LogCategory_Initialize((uint64_t)v54, 0x5Au))
      {
        v54 = *(int **)(a1 + 144);
LABEL_78:
        LogPrintF((uint64_t)v54, (uint64_t)"OSStatus _AsyncConnection_StartWakeAll(AsyncConnectionRef, const char *, size_t)", 0x5Au, (uint64_t)"### WakeDevice with no interfaces: %.*s\n", v40, v41, v42, v43, v5);
      }
    }
  }
  if ((v38 & 0x80000000) == 0 && close(v38))
  {
    if (*__error())
      __error();
  }
  return 0;
}

uint64_t _AsyncConnection_TimeoutHandler(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int *v9;

  v9 = *(int **)(a1 + 144);
  if (*v9 <= 50)
  {
    if (*v9 == -1)
    {
      if (!_LogCategory_Initialize((uint64_t)v9, 0x32u))
        return _AsyncConnection_Complete(a1, 0, 0xFFFFFFFFLL, 4294960574);
      v9 = *(int **)(a1 + 144);
    }
    LogPrintF((uint64_t)v9, (uint64_t)"void _AsyncConnection_TimeoutHandler(void *)", 0x32u, (uint64_t)"### Connect timed out: %s\n", a5, a6, a7, a8, *(_QWORD *)(a1 + 8));
  }
  return _AsyncConnection_Complete(a1, 0, 0xFFFFFFFFLL, 4294960574);
}

uint64_t _AsyncConnection_ReachabilityStart(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  char *v10;
  _DWORD *v11;
  int v12;
  __int128 v13;
  uint64_t v14;
  int v15;
  int v16;
  unsigned int v17;
  __CFDictionary *Mutable;
  __CFDictionary *v19;
  uint64_t v20;
  CFIndex v21;
  const __SCNetworkReachability *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  int *v31;
  int *v32;
  uint64_t v33;
  int *v34;
  SCNetworkReachabilityContext context;
  SCNetworkReachabilityFlags flags;
  UInt8 bytes[39];
  char v39[17];
  uint64_t v40;

  v40 = *MEMORY[0x1E0C80C00];
  memset(&context, 0, sizeof(context));
  v10 = (char *)malloc_type_calloc(1uLL, 0xB8uLL, 0x10E0040D7525972uLL);
  if (!v10)
    return 4294960568;
  v11 = v10;
  ++*(_DWORD *)a1;
  *(_DWORD *)v10 = 1;
  *((_QWORD *)v10 + 2) = a1;
  *((_DWORD *)v10 + 15) = -1;
  v12 = *(unsigned __int8 *)(a3 + 1);
  if (*(_BYTE *)(a3 + 1))
  {
    if (v12 == 30)
    {
      v13 = *(_OWORD *)a3;
      v14 = *(_QWORD *)(a3 + 16);
      *((_DWORD *)v10 + 12) = *(_DWORD *)(a3 + 24);
      *((_QWORD *)v10 + 5) = v14;
    }
    else
    {
      if (v12 != 2)
        goto LABEL_9;
      v13 = *(_OWORD *)a3;
    }
    *(_OWORD *)(v10 + 24) = v13;
  }
  else
  {
    v10[25] = 0;
  }
LABEL_9:
  *((_DWORD *)v10 + 13) = a4;
  *((_DWORD *)v10 + 14) = a5;
  *((CFAbsoluteTime *)v10 + 14) = CFAbsoluteTimeGetCurrent();
  if (a2)
  {
    *((_QWORD *)v11 + 17) = *(_QWORD *)(a2 + 136);
    *((_QWORD *)v11 + 19) = *(_QWORD *)(a2 + 152);
  }
  memset(bytes, 0, 28);
  flags = 0;
  v15 = *(unsigned __int8 *)(a3 + 1);
  if (v15 == 30)
  {
    *(_OWORD *)bytes = *(_OWORD *)a3;
    *(_OWORD *)&bytes[12] = *(_OWORD *)(a3 + 12);
    if ((a5 & 0x80000000) == 0)
      goto LABEL_15;
  }
  else
  {
    if (v15 == 2)
      *(_OWORD *)bytes = *(_OWORD *)a3;
    if ((a5 & 0x80000000) == 0)
    {
LABEL_15:
      v16 = bytes[1];
      if (bytes[1] != 30 && bytes[1] != 2)
        goto LABEL_24;
      v17 = a5;
      if (*(_WORD *)&bytes[2])
        goto LABEL_24;
      goto LABEL_21;
    }
  }
  v17 = -(int)a5;
  v16 = bytes[1];
LABEL_21:
  if (v16 == 30 || v16 == 2)
    *(_WORD *)&bytes[2] = bswap32(v17) >> 16;
LABEL_24:
  Mutable = CFDictionaryCreateMutable(0, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  if (!Mutable)
  {
    v33 = 4294960568;
    goto LABEL_51;
  }
  v19 = Mutable;
  v20 = 28;
  if (v16 != 30)
    v20 = 0;
  if (v16 == 2)
    v21 = 16;
  else
    v21 = v20;
  CFDictionarySetData(Mutable, CFSTR("remote-address"), bytes, v21);
  if ((_DWORD)a4 && ((*(_BYTE *)(a1 + 20) & 8) != 0 || bytes[1] == 2 && bytes[4] == 169 && bytes[5] == 254))
  {
    v39[0] = 0;
    if_indextoname(a4, v39);
    if (v39[0])
      CFDictionarySetCString(v19, CFSTR("interface"), v39, -1);
  }
  *((_QWORD *)v11 + 12) = SCNetworkReachabilityCreateWithOptions();
  CFRelease(v19);
  v22 = (const __SCNetworkReachability *)*((_QWORD *)v11 + 12);
  if (!v22
    || (context.info = v11,
        !SCNetworkReachabilitySetCallback(v22, (SCNetworkReachabilityCallBack)_AsyncConnection_ReachabilityHandler, &context))|| !SCNetworkReachabilitySetDispatchQueue(*((SCNetworkReachabilityRef *)v11 + 12), *(dispatch_queue_t *)(a1 + 104)))
  {
    v33 = 4294960596;
    goto LABEL_51;
  }
  flags = 0;
  if (!SCNetworkReachabilityGetFlags(*((SCNetworkReachabilityRef *)v11 + 12), &flags) || (flags & 2) == 0)
    goto LABEL_53;
  *((CFAbsoluteTime *)v11 + 15) = CFAbsoluteTimeGetCurrent() - *((double *)v11 + 14);
  v31 = *(int **)(a1 + 144);
  if (*v31 <= 30)
  {
    if (*v31 == -1)
    {
      if (!_LogCategory_Initialize((uint64_t)v31, 0x1Eu))
        goto LABEL_46;
      v31 = *(int **)(a1 + 144);
    }
    LogPrintF((uint64_t)v31, (uint64_t)"OSStatus _AsyncConnection_ReachabilityStart(AsyncConnectionRef, AsyncConnectionOperationRef, const void *, uint32_t, int)", 0x1Eu, (uint64_t)"Reachability of %##a default port %d OK, Flags 0x%X\n", v27, v28, v29, v30, a3);
  }
LABEL_46:
  if (_AsyncConnection_StartConnect(a1, 0, a3, a4, a5, v28, v29, v30))
  {
    v32 = *(int **)(a1 + 144);
    if (*v32 > 90)
      goto LABEL_53;
    if (*v32 != -1)
      goto LABEL_49;
    if (_LogCategory_Initialize((uint64_t)v32, 0x5Au))
    {
      v32 = *(int **)(a1 + 144);
LABEL_49:
      LogPrintF((uint64_t)v32, (uint64_t)"OSStatus _AsyncConnection_ReachabilityStart(AsyncConnectionRef, AsyncConnectionOperationRef, const void *, uint32_t, int)", 0x5Au, (uint64_t)"### Connect %##a default port %d failed after reachability said OK\n", v23, v24, v25, v26, a3);
    }
LABEL_53:
    v34 = *(int **)(a1 + 144);
    if (*v34 <= 30)
    {
      if (*v34 == -1)
      {
        if (!_LogCategory_Initialize((uint64_t)v34, 0x1Eu))
          goto LABEL_57;
        v34 = *(int **)(a1 + 144);
      }
      LogPrintF((uint64_t)v34, (uint64_t)"OSStatus _AsyncConnection_ReachabilityStart(AsyncConnectionRef, AsyncConnectionOperationRef, const void *, uint32_t, int)", 0x1Eu, (uint64_t)"Monitoring reachability of %##a default port %d\n", v23, v24, v25, v26, a3);
    }
LABEL_57:
    v33 = 0;
    *((_QWORD *)v11 + 1) = *(_QWORD *)(a1 + 80);
    *(_QWORD *)(a1 + 80) = v11;
    return v33;
  }
  v33 = 0;
LABEL_51:
  _AsyncConnection_ReleaseOperation(v11);
  return v33;
}

uint64_t _AsyncConnection_StartConnect(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v13;
  int v14;
  unint64_t v15;
  int *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  int *v26;
  int *v28;
  uint64_t v29;
  char v30;
  __int16 v31;
  char v32;
  __int16 v33;

  v13 = *(_DWORD *)(a1 + 20);
  v14 = *(unsigned __int8 *)(a3 + 1);
  if ((v13 & 0x80) != 0)
  {
    if (v14 == 30)
    {
      if (*(unsigned __int8 *)(a3 + 8) == 254 && (*(_BYTE *)(a3 + 9) & 0xC0) == 0x80)
        return 0;
      v14 = 30;
    }
    else if (v14 == 2)
    {
      if (*(unsigned __int8 *)(a3 + 4) == 169 && *(unsigned __int8 *)(a3 + 5) == 254)
        return 0;
      v14 = 2;
    }
  }
  if ((v13 & 0x800) != 0)
  {
    if (v14 != 30)
      goto LABEL_20;
    if (*(unsigned __int8 *)(a3 + 8) == 254 && (*(_BYTE *)(a3 + 9) & 0xC0) == 0x80)
      return 0;
  }
  else if (v14 != 30)
  {
LABEL_20:
    if ((v13 & 0x40) == 0)
      goto LABEL_22;
    goto LABEL_21;
  }
  if ((v13 & 0x200) != 0)
  {
    v16 = *(int **)(a1 + 144);
    if (*v16 <= 30)
    {
      if (*v16 == -1)
      {
        if (!_LogCategory_Initialize((uint64_t)v16, 0x1Eu))
          return 0;
        v16 = *(int **)(a1 + 144);
      }
      LogPrintF((uint64_t)v16, (uint64_t)"OSStatus _AsyncConnection_StartConnect(AsyncConnectionRef, AsyncConnectionOperationRef, const void *, uint32_t, int)", 0x1Eu, (uint64_t)"Skipping IPv6 address with NoIPv6: %##a\n", a5, a6, a7, a8, a3);
    }
    return 0;
  }
  if ((v13 & 0x40) == 0)
  {
    v15 = *(_QWORD *)(a1 + 32);
    if (!v15)
      goto LABEL_31;
    goto LABEL_24;
  }
  if (*(unsigned __int8 *)(a3 + 8) != 254)
    goto LABEL_21;
  if ((*(_BYTE *)(a3 + 9) & 0xC0) != 0x80)
    goto LABEL_21;
  if (!*(_DWORD *)(a3 + 24))
    goto LABEL_21;
  if (if_nametoindex("awdl0") != *(_DWORD *)(a3 + 24))
    goto LABEL_21;
  v30 = *(_BYTE *)(a3 + 16) ^ 2;
  v31 = *(_WORD *)(a3 + 17);
  v32 = *(_BYTE *)(a3 + 21);
  v33 = *(_WORD *)(a3 + 22);
  v22 = AWDLTrafficRegister((uint64_t)&v30, 1, 1);
  if (!(_DWORD)v22)
    goto LABEL_21;
  v21 = v22;
  v26 = *(int **)(a1 + 144);
  if (*v26 <= 90)
  {
    if (*v26 == -1)
    {
      if (!_LogCategory_Initialize((uint64_t)v26, 0x5Au))
        goto LABEL_52;
      v26 = *(int **)(a1 + 144);
    }
    LogPrintF((uint64_t)v26, (uint64_t)"OSStatus _AsyncConnection_StartConnect(AsyncConnectionRef, AsyncConnectionOperationRef, const void *, uint32_t, int)", 0x5Au, (uint64_t)"AWDLTrafficRegister failed: %#m\n", v23, v24, v25, a8, v21);
  }
LABEL_52:
  if ((*(_BYTE *)(a1 + 21) & 1) == 0 || (_DWORD)v21 != 13 && (_DWORD)v21 != 35)
  {
    v28 = *(int **)(a1 + 144);
    if (*v28 <= 50)
    {
      if (*v28 == -1)
      {
        if (!_LogCategory_Initialize((uint64_t)v28, 0x32u))
          goto LABEL_59;
        v28 = *(int **)(a1 + 144);
      }
      LogPrintF((uint64_t)v28, (uint64_t)"OSStatus _AsyncConnection_StartConnect(AsyncConnectionRef, AsyncConnectionOperationRef, const void *, uint32_t, int)", 0x32u, (uint64_t)"Skipping %##a (MAC %.6a) due to AWDLTrafficRegister reject: %#m\n", v23, v24, v25, a8, a3);
    }
LABEL_59:
    _AsyncConnection_Complete(a1, 0, 0xFFFFFFFFLL, v21);
    return v21;
  }
LABEL_21:
  v14 = *(unsigned __int8 *)(a3 + 1);
LABEL_22:
  v15 = *(_QWORD *)(a1 + 32);
  if (v15)
  {
    if (v14 == 30)
    {
LABEL_24:
      if (*(unsigned __int8 *)(a3 + 8) == 254 && (*(_BYTE *)(a3 + 9) & 0xC0) == 0x80)
        return _AsyncConnection_StartConnectDelayed(a1, a2, 0, a3, a4, a5, v15, a8);
LABEL_31:
      v15 = *(_QWORD *)(a1 + 24);
      if (v15)
        return _AsyncConnection_StartConnectDelayed(a1, a2, 0, a3, a4, a5, v15, a8);
    }
  }
  else if (v14 == 30)
  {
    goto LABEL_31;
  }
  v17 = mach_absolute_time();
  v18 = *(_QWORD *)(a1 + 40);
  if (!v18)
    goto LABEL_38;
  if (NanosecondsToUpTicks_sOnce != -1)
  {
    v29 = *(_QWORD *)(a1 + 40);
    dispatch_once_f(&NanosecondsToUpTicks_sOnce, &NanosecondsToUpTicks_sMultiplier, (dispatch_function_t)_NanosecondsToUpTicksInit);
    v18 = v29;
  }
  v19 = v18 + (unint64_t)(*(double *)&NanosecondsToUpTicks_sMultiplier * 100000000.0);
  if (v19 <= v17)
  {
LABEL_38:
    *(_QWORD *)(a1 + 40) = v17;
    return _AsyncConnection_StartConnectNow(a1, (uint64_t)a2, a3, a4, a5);
  }
  *(_QWORD *)(a1 + 40) = v19;
  v15 = UpTicksToNanoseconds(v19 - v17);
  return _AsyncConnection_StartConnectDelayed(a1, a2, 0, a3, a4, a5, v15, a8);
}

uint64_t ParseDestination(char *a1, void *a2, unsigned int *a3, _DWORD *a4)
{
  char *v8;
  const char *v9;
  char *v10;
  char *v11;
  char *v12;
  int v13;
  char *v14;
  char *v15;
  size_t v16;
  unint64_t v17;
  uint64_t result;
  int v19;
  unsigned int v20;
  char v21[17];
  uint64_t v22;

  v22 = *MEMORY[0x1E0C80C00];
  v19 = 0;
  v8 = strchr(a1, 37);
  if (v8)
  {
    v9 = v8;
    v10 = v8 + 1;
    v11 = strchr(v8 + 1, 58);
    if (v11)
    {
      v12 = v11;
      if (sscanf(v11 + 1, "%d", &v19) != 1)
        return 4294960554;
      v13 = 1;
    }
    else
    {
      v13 = 0;
      v12 = &v10[strlen(v9)];
    }
    v17 = v12 - v10;
    if (v17 <= 0x10)
    {
      __memcpy_chk();
      v21[v17] = 0;
      v20 = if_nametoindex(v21);
      if (v20 || sscanf(v21, "%u", &v20) == 1)
      {
        v16 = v9 - a1;
        goto LABEL_15;
      }
    }
    return 4294960554;
  }
  v14 = strchr(a1, 58);
  if (v14)
  {
    v15 = v14;
    if (sscanf(v14 + 1, "%d", &v19) != 1)
      return 4294960554;
    v16 = v15 - a1;
    v13 = 1;
  }
  else
  {
    v16 = strlen(a1);
    v13 = 0;
  }
  v20 = 0;
LABEL_15:
  if (v16 > 0x3F0)
    return 4294960553;
  memcpy(a2, a1, v16);
  *((_BYTE *)a2 + v16) = 0;
  *a3 = v20;
  result = 0;
  if (v13)
    *a4 = v19;
  return result;
}

void _AsyncConnection_SRVCallBack(uint64_t a1, char a2, int a3, uint64_t started, uint64_t a5, uint64_t a6, uint64_t a7, unsigned int a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  unsigned int v13;
  uint64_t v14;
  unsigned int v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  unint64_t v19;
  unsigned __int8 *v20;
  unsigned int v21;
  unsigned int v22;
  char *v23;
  unsigned int v24;
  unsigned int v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  int *v30;
  size_t v31;
  BOOL v32;
  int v33;
  char __s[1073];
  _QWORD v35[135];

  v35[134] = *MEMORY[0x1E0C80C00];
  if ((_DWORD)started)
    goto LABEL_32;
  if ((a2 & 2) != 0)
  {
    if (a8 < 7)
    {
      started = 4294960554;
      goto LABEL_32;
    }
    v14 = a9 + 6;
    v13 = *(unsigned __int8 *)(a9 + 6);
    v15 = *(unsigned __int16 *)(a9 + 4);
    if (!*(_BYTE *)(a9 + 6))
    {
      v17 = (char *)v35;
      __s[0] = 46;
      goto LABEL_20;
    }
    v16 = 0;
    v17 = __s;
    v18 = a9 + 6;
LABEL_6:
    if (v16 + 1 + (unint64_t)v13 <= 0xFE && v13 <= 0x3F)
    {
      v19 = v13 + v18 + 1;
      v20 = (unsigned __int8 *)(v18 + 1);
      while (1)
      {
        v22 = *v20++;
        v21 = v22;
        if (v22 == 92 || v21 == 46)
        {
          *v17++ = 92;
        }
        else if (v21 <= 0x20)
        {
          *(_WORD *)v17 = 12380;
          v24 = (205 * v21) >> 11;
          v23 = v17 + 3;
          v17[2] = v24 | 0x30;
          LOBYTE(v21) = (v21 - 10 * v24) | 0x30;
          goto LABEL_13;
        }
        v23 = v17;
LABEL_13:
        *v23 = v21;
        v17 = v23 + 1;
        if ((unint64_t)v20 >= v19)
        {
          v23[1] = 0;
          v16 += 1 + *(unsigned __int8 *)(v14 + v16);
          v17 = v23 + 2;
          v23[1] = 46;
          v18 = v14 + v16;
          v13 = *(unsigned __int8 *)(v14 + v16);
          if (!*(_BYTE *)(v14 + v16))
          {
LABEL_20:
            *v17 = 0;
            break;
          }
          goto LABEL_6;
        }
      }
    }
    v25 = __rev16(v15);
    *(CFAbsoluteTime *)(a11 + 136) = CFAbsoluteTimeGetCurrent() - *(double *)(a11 + 128);
    v30 = *(int **)(*(_QWORD *)(a11 + 16) + 144);
    if (*v30 <= 30)
    {
      if (*v30 != -1)
        goto LABEL_23;
      if (_LogCategory_Initialize((uint64_t)v30, 0x1Eu))
      {
        v30 = *(int **)(*(_QWORD *)(a11 + 16) + 144);
LABEL_23:
        LogPrintF((uint64_t)v30, (uint64_t)"void _AsyncConnection_SRVCallBack(DNSServiceRef, DNSServiceFlags, uint32_t, DNSServiceErrorType, const char *, uint16_t, uint16_t, uint16_t, const void *, uint32_t, void *)", 0x1Eu, (uint64_t)"SRV resolved %s -> %s port %d, If %u, Flags 0x%X, TTL %u\n", v26, v27, v28, v29, a5);
      }
    }
    v31 = strlen(__s);
    snprintf(&__s[v31], 1073 - v31, "%%%u", a3);
    v32 = *(int *)(a11 + 56) < 0 || v25 == 0;
    v33 = v32 ? *(_DWORD *)(a11 + 56) : v25;
    started = _AsyncConnection_StartDNSResolve(*(_QWORD *)(a11 + 16), a11, __s, v33);
    if ((_DWORD)started)
LABEL_32:
      _AsyncConnection_ErrorHandler(a11, started);
  }
}

uint64_t _AsyncConnection_StartDNSResolve(uint64_t a1, uint64_t a2, char *a3, int a4)
{
  _QWORD *v8;
  _DWORD *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t AddrInfo;
  int v15;
  BOOL v16;
  int *v17;
  void (*v18)(uint64_t, char *, _QWORD);
  int v20;
  uint32_t interfaceIndex;
  char hostname[1009];
  uint64_t v23;

  v23 = *MEMORY[0x1E0C80C00];
  v8 = malloc_type_calloc(1uLL, 0xB8uLL, 0x10E0040D7525972uLL);
  if (!v8)
    return 4294960568;
  v9 = v8;
  ++*(_DWORD *)a1;
  *(_DWORD *)v8 = 1;
  v8[2] = a1;
  *((_DWORD *)v8 + 15) = -1;
  *((CFAbsoluteTime *)v8 + 18) = CFAbsoluteTimeGetCurrent();
  if (a2)
  {
    *((_QWORD *)v9 + 15) = *(_QWORD *)(a2 + 120);
    *((_QWORD *)v9 + 17) = *(_QWORD *)(a2 + 136);
  }
  v20 = 0;
  interfaceIndex = 0;
  AddrInfo = ParseDestination(a3, hostname, &interfaceIndex, &v20);
  if ((_DWORD)AddrInfo)
    goto LABEL_17;
  v15 = v20;
  if (v20)
    v16 = a4 < 0;
  else
    v16 = 1;
  if (v16)
    v15 = a4;
  v9[14] = v15;
  v17 = *(int **)(a1 + 144);
  if (*v17 <= 30)
  {
    if (*v17 != -1)
    {
LABEL_12:
      LogPrintF((uint64_t)v17, (uint64_t)"OSStatus _AsyncConnection_StartDNSResolve(AsyncConnectionRef, AsyncConnectionOperationRef, const char *, int)", 0x1Eu, (uint64_t)"Resolving DNS %s\n", v10, v11, v12, v13, (uint64_t)a3);
      goto LABEL_14;
    }
    if (_LogCategory_Initialize((uint64_t)v17, 0x1Eu))
    {
      v17 = *(int **)(a1 + 144);
      goto LABEL_12;
    }
  }
LABEL_14:
  v18 = *(void (**)(uint64_t, char *, _QWORD))(a1 + 88);
  if (v18)
    v18(2, a3, *(_QWORD *)(a1 + 96));
  AddrInfo = DNSServiceGetAddrInfo((DNSServiceRef *)v9 + 8, (*(_DWORD *)(a1 + 20) << 14) & 0x8000, interfaceIndex, 0, hostname, (DNSServiceGetAddrInfoReply)_AsyncConnection_DNSCallBack, v9);
  if (!(_DWORD)AddrInfo)
  {
    DNSServiceSetDispatchQueue(*((DNSServiceRef *)v9 + 8), *(dispatch_queue_t *)(a1 + 104));
    *((_QWORD *)v9 + 1) = *(_QWORD *)(a1 + 80);
    *(_QWORD *)(a1 + 80) = v9;
    return AddrInfo;
  }
LABEL_17:
  _AsyncConnection_ReleaseOperation(v9);
  return AddrInfo;
}

void _AsyncConnection_DNSCallBack(uint64_t a1, char a2, uint64_t a3, int a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  int *v17;

  if ((a2 & 2) == 0 || a4)
    return;
  v12 = *(_QWORD *)(a8 + 16);
  *(CFAbsoluteTime *)(a8 + 152) = CFAbsoluteTimeGetCurrent() - *(double *)(a8 + 144);
  v17 = *(int **)(v12 + 144);
  if (*v17 <= 30)
  {
    if (*v17 == -1)
    {
      if (!_LogCategory_Initialize((uint64_t)v17, 0x1Eu))
        goto LABEL_7;
      v17 = *(int **)(v12 + 144);
    }
    LogPrintF((uint64_t)v17, (uint64_t)"void _AsyncConnection_DNSCallBack(DNSServiceRef, DNSServiceFlags, uint32_t, DNSServiceErrorType, const char *, const struct sockaddr *, uint32_t, void *)", 0x1Eu, (uint64_t)"Resolved DNS %s -> %##a, Flags 0x%X, If %u, TTL %u\n", v13, v14, v15, v16, a5);
  }
LABEL_7:
  if ((*(_BYTE *)(v12 + 20) & 4) == 0
    || _AsyncConnection_ReachabilityStart(v12, a8, a6, a3, *(unsigned int *)(a8 + 56)))
  {
    _AsyncConnection_StartConnect(v12, (_QWORD *)a8, a6, a3, *(unsigned int *)(a8 + 56), v14, v15, v16);
  }
}

void _AsyncConnection_ErrorHandler(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;

  v3 = *(_QWORD *)(a1 + 16);
  v4 = *(_QWORD *)(v3 + 80);
  if (v4)
  {
    v5 = (_QWORD *)(v3 + 80);
    if (v4 == a1)
    {
LABEL_6:
      *v5 = *(_QWORD *)(a1 + 8);
      if (!*(_QWORD *)(v3 + 80))
        _AsyncConnection_Complete(v3, 0, 0xFFFFFFFFLL, a2);
      _AsyncConnection_ReleaseOperation((_DWORD *)a1);
    }
    else
    {
      while (1)
      {
        v6 = v4;
        v4 = *(_QWORD *)(v4 + 8);
        if (!v4)
          break;
        if (v4 == a1)
        {
          v5 = (_QWORD *)(v6 + 8);
          goto LABEL_6;
        }
      }
    }
  }
  else
  {
    _AsyncConnection_Complete(v3, 0, 0xFFFFFFFFLL, a2);
  }
}

uint64_t _AsyncConnection_StartConnectDelayed(uint64_t a1, _QWORD *a2, int a3, uint64_t a4, uint64_t a5, uint64_t a6, unint64_t a7, uint64_t a8)
{
  unsigned int v9;
  int v10;
  int *v15;
  int v16;
  char *v17;
  _DWORD *v18;
  int v19;
  __int128 v20;
  uint64_t v21;
  int v22;
  unsigned int v23;
  NSObject *v24;
  NSObject *v25;
  dispatch_time_t v26;
  uint64_t result;

  v9 = a6;
  v10 = a5;
  v15 = *(int **)(a1 + 144);
  v16 = *v15;
  if (!a3)
  {
    if (v16 > 30)
      goto LABEL_11;
    if (v16 == -1)
    {
      if (!_LogCategory_Initialize((uint64_t)v15, 0x1Eu))
        goto LABEL_11;
      v15 = *(int **)(a1 + 144);
    }
    LogPrintF((uint64_t)v15, (uint64_t)"OSStatus _AsyncConnection_StartConnectDelayed(AsyncConnectionRef, AsyncConnectionOperationRef, uint32_t, const void *, uint32_t, int, uint64_t)", 0x1Eu, (uint64_t)"Delaying connect to %##a, interface %u by %llu ms\n", a5, a6, a7, a8, a4);
    goto LABEL_11;
  }
  if (v16 > 30)
    goto LABEL_11;
  if (v16 != -1)
    goto LABEL_4;
  if (_LogCategory_Initialize((uint64_t)v15, 0x1Eu))
  {
    v15 = *(int **)(a1 + 144);
LABEL_4:
    LogPrintF((uint64_t)v15, (uint64_t)"OSStatus _AsyncConnection_StartConnectDelayed(AsyncConnectionRef, AsyncConnectionOperationRef, uint32_t, const void *, uint32_t, int, uint64_t)", 0x1Eu, (uint64_t)"Retrying connect to %##a, interface %u, delay %llu ms, %u of %u\n", a5, a6, a7, a8, a4);
  }
LABEL_11:
  v17 = (char *)malloc_type_calloc(1uLL, 0xB8uLL, 0x10E0040D7525972uLL);
  if (!v17)
    return 4294960568;
  v18 = v17;
  ++*(_DWORD *)a1;
  *(_DWORD *)v17 = 1;
  *((_QWORD *)v17 + 2) = a1;
  v19 = *(unsigned __int8 *)(a4 + 1);
  if (*(_BYTE *)(a4 + 1))
  {
    if (v19 == 30)
    {
      v20 = *(_OWORD *)a4;
      v21 = *(_QWORD *)(a4 + 16);
      *((_DWORD *)v17 + 12) = *(_DWORD *)(a4 + 24);
      *((_QWORD *)v17 + 5) = v21;
    }
    else
    {
      if (v19 != 2)
        goto LABEL_19;
      v20 = *(_OWORD *)a4;
    }
    *(_OWORD *)(v17 + 24) = v20;
  }
  else
  {
    v17[25] = 0;
  }
LABEL_19:
  *((_DWORD *)v17 + 13) = v10;
  if ((v9 & 0x80000000) != 0)
  {
    v23 = -v9;
    v22 = v17[25];
    goto LABEL_25;
  }
  v22 = v17[25];
  if ((v22 == 30 || v22 == 2) && !*((_WORD *)v17 + 13))
  {
    v23 = v9;
LABEL_25:
    if (v22 == 30 || v22 == 2)
      *((_WORD *)v17 + 13) = bswap32(v23) >> 16;
  }
  *((_DWORD *)v17 + 14) = v9;
  *((_DWORD *)v17 + 15) = -1;
  *((CFAbsoluteTime *)v17 + 20) = CFAbsoluteTimeGetCurrent();
  v18[45] = a3;
  if (a2)
  {
    *((_QWORD *)v18 + 15) = a2[15];
    *((_QWORD *)v18 + 17) = a2[17];
    *((_QWORD *)v18 + 19) = a2[19];
  }
  v24 = dispatch_source_create(MEMORY[0x1E0C80DD0], 0, 0, *(dispatch_queue_t *)(a1 + 104));
  *((_QWORD *)v18 + 9) = v24;
  if (v24)
  {
    dispatch_set_context(v24, v18);
    dispatch_source_set_event_handler_f(*((dispatch_source_t *)v18 + 9), (dispatch_function_t)_AsyncConnection_ConnectDelayedHandler);
    v25 = *((_QWORD *)v18 + 9);
    v26 = dispatch_time(0, a7);
    dispatch_source_set_timer(v25, v26, 0xFFFFFFFFFFFFFFFFLL, a7 >> 2);
    dispatch_resume(*((dispatch_object_t *)v18 + 9));
    result = 0;
    *((_QWORD *)v18 + 1) = *(_QWORD *)(a1 + 80);
    *(_QWORD *)(a1 + 80) = v18;
  }
  else
  {
    _AsyncConnection_ReleaseOperation(v18);
    return 4294960596;
  }
  return result;
}

uint64_t _AsyncConnection_StartConnectNow(uint64_t a1, uint64_t a2, uint64_t a3, int a4, unsigned int a5)
{
  char *v10;
  _DWORD *v11;
  sockaddr *v12;
  int v13;
  sockaddr v14;
  int v15;
  BOOL v16;
  unsigned int v17;
  uint64_t v18;
  int v20;
  uint64_t v21;
  unsigned int v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  int *v27;
  int v29;
  int v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  int *v35;
  void (*v36)(uint64_t, sockaddr *, _QWORD);
  int v37;
  int v38;
  socklen_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  int v44;
  NSObject *v45;
  NSObject *v46;
  int *v47;
  int v48;
  unsigned int v49;
  int v50;

  v10 = (char *)malloc_type_calloc(1uLL, 0xB8uLL, 0x10E0040D7525972uLL);
  if (!v10)
    return 4294960568;
  v11 = v10;
  ++*(_DWORD *)a1;
  *(_DWORD *)v10 = 1;
  *((_QWORD *)v10 + 2) = a1;
  v12 = (sockaddr *)(v10 + 24);
  v13 = *(unsigned __int8 *)(a3 + 1);
  if (*(_BYTE *)(a3 + 1))
  {
    if (v13 == 30)
    {
      v14 = *(sockaddr *)a3;
      v18 = *(_QWORD *)(a3 + 16);
      *((_DWORD *)v10 + 12) = *(_DWORD *)(a3 + 24);
      *((_QWORD *)v10 + 5) = v18;
LABEL_16:
      *v12 = v14;
      if ((a5 & 0x80000000) != 0)
        goto LABEL_17;
      goto LABEL_8;
    }
    if (v13 == 2)
    {
      v14 = *(sockaddr *)a3;
      goto LABEL_16;
    }
  }
  else
  {
    v10[25] = 0;
  }
  if ((a5 & 0x80000000) != 0)
  {
LABEL_17:
    v17 = -a5;
    v15 = v10[25];
    goto LABEL_18;
  }
LABEL_8:
  v15 = v10[25];
  v16 = v15 == 30 || v15 == 2;
  if (!v16 || *((_WORD *)v10 + 13))
    goto LABEL_24;
  v17 = a5;
LABEL_18:
  if (v15 == 30 || v15 == 2)
    *((_WORD *)v10 + 13) = bswap32(v17) >> 16;
LABEL_24:
  *((_DWORD *)v10 + 14) = a5;
  *((CFAbsoluteTime *)v10 + 20) = CFAbsoluteTimeGetCurrent();
  if (a2)
  {
    *((_QWORD *)v11 + 13) = *(_QWORD *)(a2 + 104);
    *(_QWORD *)(a2 + 104) = 0;
    *((_QWORD *)v11 + 15) = *(_QWORD *)(a2 + 120);
    *((_QWORD *)v11 + 17) = *(_QWORD *)(a2 + 136);
    *((_QWORD *)v11 + 19) = *(_QWORD *)(a2 + 152);
    v11[45] = *(_DWORD *)(a2 + 180);
  }
  v50 = 0;
  if ((*(_BYTE *)(a1 + 21) & 0x20) != 0)
  {
    v11[15] = -1;
LABEL_37:
    _AsyncConnection_ConnectHandler((uint64_t)v11);
    v21 = 0;
    goto LABEL_38;
  }
  v20 = socket(*((unsigned __int8 *)v11 + 25), 1, 6);
  v11[15] = v20;
  if (v20 < 0)
  {
    if (!*__error())
    {
LABEL_71:
      v21 = 4294960596;
      goto LABEL_38;
    }
    v21 = *__error();
    if ((_DWORD)v21)
      goto LABEL_38;
    v20 = v11[15];
  }
  v21 = SocketSetNonBlocking(v20, 1);
  if (!(_DWORD)v21)
  {
    v22 = *(_DWORD *)(a1 + 20);
    if ((v22 & 1) != 0)
    {
      SocketSetP2P(v11[15], 1);
      v22 = *(_DWORD *)(a1 + 20);
    }
    if ((v22 & 0x30) != 0)
    {
      v49 = (v22 >> 2) & 0xC;
      if (setsockopt(v11[15], 0xFFFF, 4225, &v49, 4u))
      {
        v27 = *(int **)(a1 + 144);
        if (*v27 <= 90)
        {
          if (*v27 != -1)
          {
LABEL_35:
            LogPrintF((uint64_t)v27, (uint64_t)"OSStatus _AsyncConnection_StartConnectNow(AsyncConnectionRef, AsyncConnectionOperationRef, const void *, uint32_t, int)", 0x5Au, (uint64_t)"## SO_RESTRICTIONS failed: 0x%X, %#m", v23, v24, v25, v26, v49);
            goto LABEL_44;
          }
          if (_LogCategory_Initialize((uint64_t)v27, 0x5Au))
          {
            v27 = *(int **)(a1 + 144);
            goto LABEL_35;
          }
        }
      }
    }
LABEL_44:
    v29 = v11[15];
    v48 = 1;
    setsockopt(v29, 0xFFFF, 4130, &v48, 4u);
    if (*(_DWORD *)(a1 + 180))
      a4 = *(_DWORD *)(a1 + 180);
    if (a4)
    {
      v30 = *((unsigned __int8 *)v11 + 25);
      if ((*(_BYTE *)(a1 + 20) & 8) != 0
        || v30 == 2 && *((unsigned __int8 *)v11 + 28) == 169 && *((unsigned __int8 *)v11 + 29) == 254)
      {
        SocketSetBoundInterface(v11[15], v30, a4);
      }
    }
    v50 = 1;
    setsockopt(v11[15], 6, 1, &v50, 4u);
    SocketSetBufferSize(v11[15], 4097, *(_DWORD *)(a1 + 56));
    SocketSetBufferSize(v11[15], 4098, *(_DWORD *)(a1 + 60));
    v35 = *(int **)(a1 + 144);
    if (*v35 <= 50)
    {
      if (*v35 != -1)
      {
LABEL_54:
        LogPrintF((uint64_t)v35, (uint64_t)"OSStatus _AsyncConnection_StartConnectNow(AsyncConnectionRef, AsyncConnectionOperationRef, const void *, uint32_t, int)", 0x32u, (uint64_t)"Connecting to %##a, interface %d\n", v31, v32, v33, v34, (uint64_t)v12);
        goto LABEL_56;
      }
      if (_LogCategory_Initialize((uint64_t)v35, 0x32u))
      {
        v35 = *(int **)(a1 + 144);
        goto LABEL_54;
      }
    }
LABEL_56:
    v36 = *(void (**)(uint64_t, sockaddr *, _QWORD))(a1 + 88);
    if (v36)
      v36(3, v12, *(_QWORD *)(a1 + 96));
    v37 = *((unsigned __int8 *)v11 + 25);
    if (v37 == 30)
      v38 = 28;
    else
      v38 = 0;
    if (v37 == 2)
      v39 = 16;
    else
      v39 = v38;
    if (connect(v11[15], v12, v39))
    {
      if (!*__error())
      {
        v44 = -6700;
        goto LABEL_73;
      }
      v44 = *__error();
      if (v44)
      {
        if ((v44 - 37) > 0xFFFFFFFD)
        {
          v45 = dispatch_source_create(MEMORY[0x1E0C80DB8], (int)v11[15], 0, *(dispatch_queue_t *)(a1 + 104));
          *((_QWORD *)v11 + 10) = v45;
          if (v45)
          {
            dispatch_set_context(v45, v11);
            dispatch_source_set_event_handler_f(*((dispatch_source_t *)v11 + 10), (dispatch_function_t)_AsyncConnection_EventHandler);
            dispatch_source_set_cancel_handler_f(*((dispatch_source_t *)v11 + 10), (dispatch_function_t)_AsyncConnection_CancelHandler);
            dispatch_resume(*((dispatch_object_t *)v11 + 10));
            ++*v11;
            v46 = dispatch_source_create(MEMORY[0x1E0C80DF0], (int)v11[15], 0, *(dispatch_queue_t *)(a1 + 104));
            *((_QWORD *)v11 + 11) = v46;
            if (v46)
            {
              dispatch_set_context(v46, v11);
              dispatch_source_set_event_handler_f(*((dispatch_source_t *)v11 + 11), (dispatch_function_t)_AsyncConnection_EventHandler);
              dispatch_source_set_cancel_handler_f(*((dispatch_source_t *)v11 + 11), (dispatch_function_t)_AsyncConnection_CancelHandler);
              dispatch_resume(*((dispatch_object_t *)v11 + 11));
              v21 = 0;
              ++*v11;
              *((_QWORD *)v11 + 1) = *(_QWORD *)(a1 + 80);
              *(_QWORD *)(a1 + 80) = v11;
              return v21;
            }
          }
          goto LABEL_71;
        }
LABEL_73:
        v47 = *(int **)(a1 + 144);
        if (*v47 <= 50)
        {
          if (*v47 == -1)
          {
            if (!_LogCategory_Initialize((uint64_t)v47, 0x32u))
              goto LABEL_77;
            v47 = *(int **)(a1 + 144);
          }
          LogPrintF((uint64_t)v47, (uint64_t)"OSStatus _AsyncConnection_StartConnectNow(AsyncConnectionRef, AsyncConnectionOperationRef, const void *, uint32_t, int)", 0x32u, (uint64_t)"### Connect failed immediate: %##a, %#m\n", v40, v41, v42, v43, (uint64_t)v12);
        }
LABEL_77:
        v11[44] = v44;
        dispatch_async_f(*(dispatch_queue_t *)(a1 + 104), v11, (dispatch_function_t)_AsyncConnection_StartConnectFailed);
        return 0;
      }
    }
    goto LABEL_37;
  }
LABEL_38:
  _AsyncConnection_ReleaseOperation(v11);
  return v21;
}

void _AsyncConnection_ConnectHandler(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  double Current;
  double v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int *v12;
  int v13;
  uint64_t v14;
  void (*v15)(uint64_t, _BYTE *, _QWORD);
  NSObject *v16;
  NSObject *v17;
  _BYTE v18[28];
  int v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  double v23;
  double v24;
  uint64_t v25;

  Current = CFAbsoluteTimeGetCurrent();
  v7 = Current - *(double *)(a1 + 160);
  *(double *)(a1 + 168) = v7;
  v25 = 4;
  v8 = *(unsigned int *)(a1 + 60);
  if ((v8 & 0x80000000) == 0)
  {
    if (!getsockopt(*(_DWORD *)(a1 + 60), 0xFFFF, 4103, (char *)&v25 + 4, (socklen_t *)&v25))
      goto LABEL_5;
    if (!*__error())
    {
      v9 = 4294960596;
      goto LABEL_15;
    }
    v9 = *__error();
    if (!(_DWORD)v9)
    {
LABEL_5:
      v9 = HIDWORD(v25);
      if (!HIDWORD(v25))
      {
        v7 = *(double *)(a1 + 168);
        goto LABEL_7;
      }
    }
LABEL_15:
    _AsyncConnection_ErrorHandler(a1, v9);
    return;
  }
LABEL_7:
  v19 = 0;
  *(_OWORD *)&v18[12] = *(_OWORD *)(a1 + 36);
  *(_OWORD *)v18 = *(_OWORD *)(a1 + 24);
  v10 = *(_QWORD *)(a1 + 136);
  v20 = *(_QWORD *)(a1 + 120);
  v21 = v10;
  v22 = *(_QWORD *)(a1 + 152);
  v23 = v7;
  v11 = *(_QWORD *)(a1 + 16);
  v24 = Current - *(double *)(v11 + 64);
  v12 = *(int **)(v11 + 144);
  v13 = *v12;
  if ((*(_BYTE *)(v11 + 21) & 0x20) != 0)
  {
    if (v13 <= 50)
    {
      if (v13 == -1)
      {
        if (!_LogCategory_Initialize((uint64_t)v12, 0x32u))
          goto LABEL_19;
        v12 = *(int **)(*(_QWORD *)(a1 + 16) + 144);
      }
      LogPrintF((uint64_t)v12, (uint64_t)"void _AsyncConnection_ConnectHandler(AsyncConnectionOperationRef)", 0x32u, (uint64_t)"NoConnect to %##a (Reach=%.2f ms, SRV=%.2f ms, DNS=%.2f ms, Total=%.2f ms)\n", v2, v3, v4, v5, (uint64_t)v18);
    }
  }
  else if (v13 <= 50)
  {
    if (v13 == -1)
    {
      if (!_LogCategory_Initialize((uint64_t)v12, 0x32u))
        goto LABEL_19;
      v12 = *(int **)(*(_QWORD *)(a1 + 16) + 144);
    }
    LogPrintF((uint64_t)v12, (uint64_t)"void _AsyncConnection_ConnectHandler(AsyncConnectionOperationRef)", 0x32u, (uint64_t)"Connected to %##a (Reach=%.2f ms, SRV=%.2f ms, DNS=%.2f ms, Connect=%.2f ms, Total=%.2f ms)\n", v2, v3, v4, v5, (uint64_t)v18);
  }
LABEL_19:
  v14 = *(_QWORD *)(a1 + 16);
  v15 = *(void (**)(uint64_t, _BYTE *, _QWORD))(v14 + 88);
  if (v15)
    v15(4, v18, *(_QWORD *)(v14 + 96));
  *(_DWORD *)(a1 + 60) = -1;
  v16 = *(NSObject **)(a1 + 80);
  if (v16)
  {
    dispatch_source_cancel(*(dispatch_source_t *)(a1 + 80));
    dispatch_release(v16);
    *(_QWORD *)(a1 + 80) = 0;
  }
  v17 = *(NSObject **)(a1 + 88);
  if (v17)
  {
    dispatch_source_cancel(*(dispatch_source_t *)(a1 + 88));
    dispatch_release(v17);
    *(_QWORD *)(a1 + 88) = 0;
  }
  _AsyncConnection_Complete(*(_QWORD *)(a1 + 16), a1, v8, 0);
}

void _AsyncConnection_StartConnectFailed(_DWORD *a1)
{
  _AsyncConnection_ErrorHandler((uint64_t)a1, a1[44]);
  _AsyncConnection_ReleaseOperation(a1);
}

void _AsyncConnection_EventHandler(uint64_t a1)
{
  _DNSServiceRef_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int *v9;
  int v10;
  int v11;
  socklen_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unsigned int v18;
  uint64_t v19;
  int *v20;
  unsigned int v21;
  unsigned int started;
  socklen_t v23[2];

  *(_QWORD *)v23 = 0;
  v2 = *(_DNSServiceRef_t **)(a1 + 64);
  if (!v2)
  {
    v10 = *(unsigned __int8 *)(a1 + 25);
    if (v10 == 30)
      v11 = 28;
    else
      v11 = 0;
    if (v10 == 2)
      v12 = 16;
    else
      v12 = v11;
    if (!connect(*(_DWORD *)(a1 + 60), (const sockaddr *)(a1 + 24), v12))
      goto LABEL_17;
    if (*__error())
    {
      v17 = *__error();
      if ((_DWORD)v17 == 56)
      {
LABEL_17:
        _AsyncConnection_ConnectHandler(a1);
        return;
      }
      if ((_DWORD)v17 != 22)
      {
        if (!(_DWORD)v17)
          goto LABEL_17;
LABEL_28:
        v19 = *(_QWORD *)(a1 + 16);
        v20 = *(int **)(v19 + 144);
        if (*v20 <= 50)
        {
          if (*v20 == -1)
          {
            if (!_LogCategory_Initialize((uint64_t)v20, 0x32u))
              goto LABEL_32;
            v20 = *(int **)(v19 + 144);
          }
          LogPrintF((uint64_t)v20, (uint64_t)"void _AsyncConnection_EventHandler(void *)", 0x32u, (uint64_t)"### Connect failed: %##a, %#m\n", v13, v14, v15, v16, a1 + 24);
        }
LABEL_32:
        v21 = *(_DWORD *)(a1 + 180);
        if (v21 < *(_DWORD *)(v19 + 176))
        {
          started = _AsyncConnection_StartConnectDelayed(v19, (_QWORD *)a1, v21 + 1, a1 + 24, *(unsigned int *)(a1 + 52), *(unsigned int *)(a1 + 56), 1000000 * *(unsigned int *)(v19 + 172), v16);
          if (started)
            v17 = started;
          else
            v17 = v17;
        }
        _AsyncConnection_ErrorHandler(a1, v17);
        return;
      }
      v23[0] = 4;
      v23[1] = 0;
      if (!getsockopt(*(_DWORD *)(a1 + 60), 0xFFFF, 4103, &v23[1], v23))
      {
LABEL_23:
        v18 = v23[1];
LABEL_24:
        if (v18)
          v17 = v18;
        else
          v17 = 22;
        goto LABEL_28;
      }
      if (*__error())
      {
        v18 = *__error();
        if (v18)
          goto LABEL_24;
        goto LABEL_23;
      }
    }
    v17 = 4294960596;
    goto LABEL_28;
  }
  v3 = DNSServiceProcessResult(v2);
  if ((_DWORD)v3)
  {
    v8 = v3;
    v9 = *(int **)(*(_QWORD *)(a1 + 16) + 144);
    if (*v9 <= 90)
    {
      if (*v9 == -1)
      {
        if (!_LogCategory_Initialize((uint64_t)v9, 0x5Au))
          goto LABEL_19;
        v9 = *(int **)(*(_QWORD *)(a1 + 16) + 144);
      }
      LogPrintF((uint64_t)v9, (uint64_t)"void _AsyncConnection_EventHandler(void *)", 0x5Au, (uint64_t)"DNSServiceProcessResult failed: %#m...Bonjour crashed\n", v4, v5, v6, v7, v8);
    }
LABEL_19:
    _AsyncConnection_ErrorHandler(a1, v8);
  }
}

void _AsyncConnection_ConnectDelayedHandler(uint64_t a1)
{
  uint64_t started;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;

  started = _AsyncConnection_StartConnectNow(*(_QWORD *)(a1 + 16), a1, a1 + 24, *(unsigned int *)(a1 + 52), *(unsigned int *)(a1 + 56));
  if ((_DWORD)started)
  {
    _AsyncConnection_ErrorHandler(a1, started);
  }
  else
  {
    v3 = *(_QWORD *)(a1 + 16);
    v6 = *(_QWORD *)(v3 + 80);
    v5 = (_QWORD *)(v3 + 80);
    v4 = v6;
    if (v6)
    {
      if (v4 == a1)
      {
LABEL_8:
        *v5 = *(_QWORD *)(a1 + 8);
        _AsyncConnection_ReleaseOperation((_DWORD *)a1);
      }
      else
      {
        while (1)
        {
          v7 = v4;
          v4 = *(_QWORD *)(v4 + 8);
          if (!v4)
            break;
          if (v4 == a1)
          {
            v5 = (_QWORD *)(v7 + 8);
            goto LABEL_8;
          }
        }
      }
    }
  }
}

void _AsyncConnection_ReachabilityHandler(uint64_t a1, char a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;

  v10 = *(int **)(*(_QWORD *)(a3 + 16) + 144);
  if (*v10 <= 30)
  {
    if (*v10 == -1)
    {
      if (!_LogCategory_Initialize((uint64_t)v10, 0x1Eu))
        goto LABEL_5;
      v10 = *(int **)(*(_QWORD *)(a3 + 16) + 144);
    }
    LogPrintF((uint64_t)v10, (uint64_t)"void _AsyncConnection_ReachabilityHandler(SCNetworkReachabilityRef, SCNetworkReachabilityFlags, void *)", 0x1Eu, (uint64_t)"Reachability of %##a, port %d changed: 0x%X\n", a5, a6, a7, a8, a3 + 24);
  }
LABEL_5:
  if ((a2 & 2) != 0)
  {
    *(CFAbsoluteTime *)(a3 + 120) = CFAbsoluteTimeGetCurrent() - *(double *)(a3 + 112);
    if (!_AsyncConnection_StartConnect(*(_QWORD *)(a3 + 16), (_QWORD *)a3, a3 + 24, *(unsigned int *)(a3 + 52), *(unsigned int *)(a3 + 56), v11, v12, v13))
    {
      v14 = *(_QWORD *)(a3 + 16);
      v17 = *(_QWORD *)(v14 + 80);
      v16 = (_QWORD *)(v14 + 80);
      v15 = v17;
      if (v17)
      {
        if (v15 == a3)
        {
LABEL_13:
          *v16 = *(_QWORD *)(a3 + 8);
        }
        else
        {
          while (1)
          {
            v18 = v15;
            v15 = *(_QWORD *)(v15 + 8);
            if (!v15)
              break;
            if (v15 == a3)
            {
              v16 = (_QWORD *)(v18 + 8);
              goto LABEL_13;
            }
          }
        }
      }
      _AsyncConnection_ReleaseOperation((_DWORD *)a3);
    }
  }
}

void _AsyncConnection_WakeResolveCallback(uint64_t a1, uint64_t a2, uint64_t a3, int a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (a4
    && gLogCategory_AsyncCnx <= 90
    && (gLogCategory_AsyncCnx != -1 || _LogCategory_Initialize((uint64_t)&gLogCategory_AsyncCnx, 0x5Au)))
  {
    LogPrintF((uint64_t)&gLogCategory_AsyncCnx, (uint64_t)"void _AsyncConnection_WakeResolveCallback(DNSServiceRef, DNSServiceFlags, uint32_t, DNSServiceErrorType, const char *, const char *, uint16_t, uint16_t, const unsigned char *, void *)", 0x5Au, (uint64_t)"### WakeResolve failed: '%s', ifindex %u, %#m\n", a5, a6, a7, a8, a5);
  }
}

void AsyncConnection_Release(dispatch_queue_t *context)
{
  dispatch_async_f(context[13], context, (dispatch_function_t)_AsyncConnection_UserRelease);
}

void _AsyncConnection_UserRelease(_QWORD *a1)
{
  _AsyncConnection_Complete((uint64_t)a1, 0, 0xFFFFFFFFLL, 4294960573);
  _AsyncConnection_Release(a1);
}

uint64_t AsyncConnection_ConnectSync(const char *a1, int a2, int a3, uint64_t a4, int a5, int a6, uint64_t a7, uint64_t a8, _DWORD *a9)
{
  return AsyncConnection_ConnectSyncEx(a1, a2, a3, a4, a5, a6, a7, a8, 0, 0, a9);
}

uint64_t AsyncConnection_ConnectSyncEx(const char *a1, int a2, int a3, uint64_t a4, int a5, int a6, uint64_t a7, uint64_t a8, uint64_t (*a9)(uint64_t), uint64_t a10, _DWORD *a11)
{
  NSObject *v19;
  NSObject *v20;
  uint64_t v21;
  char v22;
  uint64_t v23;
  char v24;
  dispatch_time_t v25;
  int v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  int *v31;
  uint64_t v33;
  dispatch_object_t object;
  dispatch_semaphore_t dsema;
  uint64_t v36;
  const char *v37;
  int v38;
  int v39;
  uint64_t v40;
  int v41;
  int v42;
  uint64_t v43;
  uint64_t v44;
  intptr_t (*v45)(int, int, uint64_t);
  dispatch_object_t *p_object;
  NSObject *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  uint64_t v54;

  dsema = 0;
  if (!*a1)
    return 4294960591;
  v36 = 0;
  v19 = dispatch_queue_create(a1, 0);
  object = v19;
  if (!v19)
  {
    v21 = 4294960596;
LABEL_22:
    if (dsema)
      dispatch_release(dsema);
    goto LABEL_24;
  }
  v20 = v19;
  dsema = dispatch_semaphore_create(0);
  if (dsema)
  {
    v33 = 0;
    v36 = -6700;
    v54 = 0;
    v53 = 0u;
    v52 = 0u;
    v49 = 0;
    v51 = 0u;
    v50 = 152;
    v37 = a1;
    v38 = a2;
    v39 = a3;
    v40 = a4;
    v41 = a5;
    v42 = a6;
    v43 = a7;
    v44 = a8;
    v45 = _AsyncConnection_ConnectSyncHandler;
    p_object = &object;
    v47 = v20;
    v48 = 0;
    v21 = AsyncConnection_ConnectEx(&v33, (uint64_t)&v37);
    if (!(_DWORD)v21)
    {
      if (a9)
      {
        v22 = 1;
        v23 = v33;
        while (1)
        {
          while (1)
          {
            v24 = v22;
            v25 = dispatch_time(0, 250000000);
            if (!dispatch_semaphore_wait(dsema, v25))
            {
              if ((v24 & 1) == 0)
                goto LABEL_20;
              goto LABEL_19;
            }
            v22 = 0;
            if ((v24 & 1) != 0)
            {
              v26 = a9(a10);
              v22 = 1;
              if (v26)
                break;
            }
          }
          v31 = *(int **)(v23 + 144);
          if (*v31 <= 50)
          {
            if (*v31 != -1)
              goto LABEL_12;
            if (_LogCategory_Initialize((uint64_t)v31, 0x32u))
              break;
          }
LABEL_14:
          dispatch_async_f(*(dispatch_queue_t *)(v23 + 104), (void *)v23, (dispatch_function_t)_AsyncConnection_UserRelease);
          v22 = 0;
        }
        v31 = *(int **)(v23 + 144);
LABEL_12:
        LogPrintF((uint64_t)v31, (uint64_t)"OSStatus AsyncConnection_ConnectSyncEx(const char *, int, AsyncConnectionFlags, uint64_t, int, int, AsyncConnectionProgressFunc, void *, AsyncConnectionWaitFunc, void *, SocketRef *)", 0x32u, (uint64_t)"### Canceling connect to %s\n", v27, v28, v29, v30, (uint64_t)a1);
        goto LABEL_14;
      }
      dispatch_semaphore_wait(dsema, 0xFFFFFFFFFFFFFFFFLL);
      v23 = v33;
LABEL_19:
      dispatch_async_f(*(dispatch_queue_t *)(v23 + 104), (void *)v23, (dispatch_function_t)_AsyncConnection_UserRelease);
LABEL_20:
      v21 = v36;
      if (!(_DWORD)v36)
        *a11 = HIDWORD(v36);
    }
    goto LABEL_22;
  }
  v21 = 4294960596;
LABEL_24:
  if (object)
    dispatch_release(object);
  return v21;
}

intptr_t _AsyncConnection_ConnectSyncHandler(int a1, int a2, uint64_t a3)
{
  *(_DWORD *)(a3 + 16) = a2;
  if (!a2)
    *(_DWORD *)(a3 + 20) = a1;
  return dispatch_semaphore_signal(*(dispatch_semaphore_t *)(a3 + 8));
}

uint64_t SineTable_Create(_QWORD *a1, int a2, int a3)
{
  _DWORD *v6;
  _DWORD *v7;
  unint64_t v8;
  uint64x2_t v9;
  uint64_t v10;
  int64x2_t v11;
  float64x2_t v12;
  uint64_t result;
  int64x2_t v14;
  uint64x2_t v15;
  double v16;
  float64x2_t __x;
  long double v18;
  int32x2_t v19;
  int64x2_t v20;

  v6 = malloc_type_malloc(2 * a2 + 12, 0xBB4DB1F7uLL);
  if (!v6)
    return 4294960568;
  v7 = v6;
  *v6 = a2;
  v6[1] = a3;
  v6[2] = 0;
  if (a2 >= 1)
  {
    v8 = 0;
    v16 = 6.28318531 / (double)a2;
    v15 = (uint64x2_t)vdupq_n_s64((unint64_t)a2 - 1);
    v9 = (uint64x2_t)xmmword_18D51D370;
    v14 = vdupq_n_s64(2uLL);
    v10 = (a2 + 1) & 0x1FFFFFFFELL;
    do
    {
      v20 = (int64x2_t)v9;
      v19 = vmovn_s64((int64x2_t)vcgeq_u64(v15, v9));
      v11.i64[0] = (int)v8;
      v11.i64[1] = (int)v8 + 1;
      __x = vmulq_n_f64(vcvtq_f64_s64(v11), v16);
      v18 = sin(__x.f64[1]);
      v12.f64[0] = sin(__x.f64[0]);
      v12.f64[1] = v18;
      if ((v19.i8[0] & 1) != 0)
        LOWORD(v7[v8 / 2 + 3]) = (int)(32767.0 * v12.f64[0]);
      if ((v19.i8[4] & 1) != 0)
        HIWORD(v7[v8 / 2 + 3]) = (int)vmuld_lane_f64(32767.0, v12, 1);
      v8 += 2;
      v9 = (uint64x2_t)vaddq_s64(v20, v14);
    }
    while (v10 != v8);
  }
  result = 0;
  *a1 = v7;
  return result;
}

_DWORD *SineTable_GetSamples(_DWORD *result, int a2, int a3, _WORD *a4)
{
  int v4;
  int v5;
  int v6;
  _WORD *v7;
  __int16 v8;
  int v9;
  int v10;
  __int16 v11;

  v4 = result[2];
  if (a3 >= 1)
  {
    v5 = *result;
    v6 = result[1];
    v7 = &a4[2 * a3];
    do
    {
      v8 = *((_WORD *)result + v4 + 6);
      v9 = v4 + v6;
      if (v9 <= v5)
        v10 = 0;
      else
        v10 = v5;
      v4 = v9 - v10;
      if (a2 >= 1)
        v11 = 0;
      else
        v11 = v8;
      if (a2 < 0)
        v8 = 0;
      *a4 = v11;
      a4[1] = v8;
      a4 += 2;
    }
    while (a4 < v7);
  }
  result[2] = v4;
  return result;
}

uint64_t AudioStreamGetTypeID()
{
  if (gAudioStreamInitOnce != -1)
    dispatch_once_f(&gAudioStreamInitOnce, 0, (dispatch_function_t)_AudioStreamGetTypeID);
  return gAudioStreamTypeID;
}

uint64_t _AudioStreamGetTypeID()
{
  uint64_t result;

  result = _CFRuntimeRegisterClass();
  gAudioStreamTypeID = result;
  return result;
}

void _AudioStreamFinalize(uint64_t a1)
{
  const void *v2;

  v2 = *(const void **)(a1 + 176);
  if (v2)
  {
    CFRelease(v2);
    *(_QWORD *)(a1 + 176) = 0;
  }
}

uint64_t AudioStreamCreate(uint64_t *a1)
{
  uint64_t Instance;
  uint64_t v3;
  uint64_t result;

  if (gAudioStreamInitOnce != -1)
    dispatch_once_f(&gAudioStreamInitOnce, 0, (dispatch_function_t)_AudioStreamGetTypeID);
  Instance = _CFRuntimeCreateInstance();
  if (!Instance)
    return 4294960568;
  v3 = Instance;
  result = 0;
  *(_OWORD *)(v3 + 128) = 0u;
  *(_OWORD *)(v3 + 144) = 0u;
  *(_DWORD *)(v3 + 132) = 1065353216;
  *(_QWORD *)(v3 + 224) = 0;
  *(_OWORD *)(v3 + 192) = 0u;
  *(_OWORD *)(v3 + 208) = 0u;
  *(_OWORD *)(v3 + 160) = 0u;
  *(_OWORD *)(v3 + 176) = 0u;
  *(_OWORD *)(v3 + 96) = 0u;
  *(_OWORD *)(v3 + 112) = 0u;
  *(_OWORD *)(v3 + 64) = 0u;
  *(_OWORD *)(v3 + 80) = 0u;
  *(_OWORD *)(v3 + 32) = 0u;
  *(_OWORD *)(v3 + 48) = 0u;
  *(_OWORD *)(v3 + 16) = 0u;
  *a1 = v3;
  return result;
}

uint64_t AudioStreamSetInputCallback(uint64_t result, uint64_t a2, uint64_t a3)
{
  *(_QWORD *)(result + 144) = a2;
  *(_QWORD *)(result + 152) = a3;
  return result;
}

uint64_t AudioStreamSetOutputCallback(uint64_t result, uint64_t a2, uint64_t a3)
{
  *(_QWORD *)(result + 160) = a2;
  *(_QWORD *)(result + 168) = a3;
  return result;
}

CFNumberRef _AudioStreamCopyProperty(uint64_t a1, CFTypeRef cf1, int *a3)
{
  CFNumberRef v6;
  CFDataRef Int64;
  int v8;
  CFNumberRef *v10;
  int v11;
  uint64_t v12;
  unsigned int v13;
  uint64_t v14;
  __objc2_class **p_superclass;
  __objc2_class **v16;
  int v17;
  unsigned int v18;
  unint64_t v19;
  unint64_t v20;
  unsigned int v21;
  unsigned int *v22;
  unsigned int *v23;
  unint64_t v24;
  unsigned int *v25;
  unsigned int v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  double v30;
  uint64_t v31;
  uint64_t v32;
  double v33;
  double v34;
  _DWORD size[3];
  _QWORD valuePtr[2];
  int v37;
  uint64_t v38;

  if (CFEqual(cf1, CFSTR("audioType")))
  {
    v6 = *(CFNumberRef *)(a1 + 176);
    if (v6)
    {
LABEL_3:
      CFRetain(v6);
LABEL_7:
      v8 = 0;
      goto LABEL_8;
    }
    v8 = -6727;
    goto LABEL_8;
  }
  if (CFEqual(cf1, CFSTR("format")))
  {
    Int64 = CFDataCreate(0, (const UInt8 *)(a1 + 184), 40);
LABEL_6:
    v6 = Int64;
    if (Int64)
      goto LABEL_7;
    v8 = -6728;
    goto LABEL_8;
  }
  if (CFEqual(cf1, CFSTR("input")))
  {
    v10 = (CFNumberRef *)MEMORY[0x1E0C9AE50];
    v11 = *(unsigned __int8 *)(a1 + 97);
LABEL_13:
    if (!v11)
      v10 = (CFNumberRef *)MEMORY[0x1E0C9AE40];
    v6 = *v10;
    goto LABEL_3;
  }
  if (CFEqual(cf1, CFSTR("latency")))
  {
    v12 = *(_QWORD *)(a1 + 24);
    if (!v12)
    {
      v6 = 0;
      v8 = -6745;
      goto LABEL_8;
    }
    v38 = 0;
    valuePtr[0] = 0;
    valuePtr[1] = 0;
    v37 = 0;
    memset(size, 0, sizeof(size));
    v33 = 0.0;
    v34 = 0.0;
    HIDWORD(v32) = 0;
    v13 = 0;
    if (!((unsigned int (*)(uint64_t, uint64_t))softLinkAUGraphGetNodeCount[0])(v12, (uint64_t)&v38 + 4)
      && HIDWORD(v38))
    {
      v14 = 0;
      v13 = 0;
      p_superclass = CUNetInterfaceMonitor.superclass;
      v16 = CUNetInterfaceMonitor.superclass;
      do
      {
        if (!((unsigned int (*)(uint64_t, uint64_t, uint64_t))softLinkAUGraphGetIndNode[0])(*(_QWORD *)(a1 + 24), v14, (uint64_t)&v38)&& !((unsigned int (*)(uint64_t, uint64_t, uint64_t, uint64_t))p_superclass[352])(*(_QWORD *)(a1 + 24), v38, (uint64_t)valuePtr, (uint64_t)&size[1]))
        {
          size[0] = 8;
          if (((unsigned int (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))v16[362])(*(uint64_t *)&size[1], 2, 0, 0, (uint64_t)&v34, (uint64_t)size)|| v34 <= 0.0)
          {
            v34 = 44100.0;
          }
          size[0] = 8;
          v17 = ((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))v16[362])(*(uint64_t *)&size[1], 12, 0, 0, (uint64_t)&v33, (uint64_t)size);
          v18 = (v33 * 1000000.0);
          if (v17)
            v18 = 0;
          v13 += v18;
          if (LODWORD(valuePtr[0]) == 1635086197)
          {
            HIDWORD(v32) = 0;
            size[0] = 4;
            if (!((unsigned int (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))v16[362])(*(uint64_t *)&size[1], 1819569763, 2, 0, (uint64_t)&v32 + 4, (uint64_t)size))
            {
              LODWORD(v19) = HIDWORD(v32);
              v13 += ((double)v19 * 1000000.0 / v34);
            }
            HIDWORD(v32) = 0;
            size[0] = 4;
            if (!((unsigned int (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))v16[362])(*(uint64_t *)&size[1], 1935763060, 2, 0, (uint64_t)&v32 + 4, (uint64_t)size))
            {
              LODWORD(v20) = HIDWORD(v32);
              v13 += ((double)v20 * 1000000.0 / v34);
            }
            size[0] = 0;
            v21 = 0;
            if (!((unsigned int (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))softLinkAudioUnitGetPropertyInfo[0])(*(uint64_t *)&size[1], 1937009955, 2, 0, (uint64_t)size, 0)&& size[0] >= 4u)
            {
              v22 = (unsigned int *)malloc_type_malloc(size[0], 0x267E9B6FuLL);
              if (v22)
              {
                v23 = v22;
                v21 = 0;
                if (!((unsigned int (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))softLinkAudioUnitGetProperty[0])(*(uint64_t *)&size[1], 1937009955, 2, 0, (uint64_t)v22, (uint64_t)size)&& size[0] >= 4u)
                {
                  v21 = 0;
                  v24 = (unint64_t)size[0] >> 2;
                  v25 = v23;
                  do
                  {
                    v31 = *(_QWORD *)"cntlbolg";
                    v32 = 0;
                    size[0] = 4;
                    v26 = *v25++;
                    if (!((unsigned int (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))softLinkAudioObjectGetPropertyData[0])(v26, (uint64_t)&v31, 0, 0, (uint64_t)size, (uint64_t)&v32 + 4))
                    {
                      LODWORD(v27) = HIDWORD(v32);
                      if (v21 <= ((double)v27 * 1000000.0 / v34))
                        v21 = ((double)v27 * 1000000.0 / v34);
                    }
                    --v24;
                  }
                  while (v24);
                }
                free(v23);
                p_superclass = (__objc2_class **)(CUNetInterfaceMonitor + 8);
              }
              else
              {
                v21 = 0;
              }
              v16 = (__objc2_class **)(CUNetInterfaceMonitor + 8);
            }
            v13 += v21;
          }
        }
        v14 = (v14 + 1);
      }
      while (v14 < HIDWORD(v38));
    }
    v28 = v13;
    goto LABEL_51;
  }
  if (CFEqual(cf1, CFSTR("preferredLatency")))
  {
    v28 = *(unsigned int *)(a1 + 224);
LABEL_51:
    Int64 = CFNumberCreateInt64(v28);
    goto LABEL_6;
  }
  if (CFEqual(cf1, CFSTR("varispeedEnabled")))
  {
    v10 = (CFNumberRef *)MEMORY[0x1E0C9AE50];
    v11 = *(unsigned __int8 *)(a1 + 64);
    goto LABEL_13;
  }
  if (CFEqual(cf1, CFSTR("volume")))
  {
    LODWORD(v31) = 1065353216;
    v29 = *(_QWORD *)(a1 + 56);
    if (v29)
    {
      v8 = ((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))softLinkAudioUnitGetParameter[0])(v29, 0, 2, 0, (uint64_t)&v31);
      if (v8)
      {
        v6 = 0;
        goto LABEL_8;
      }
      v30 = *(float *)&v31;
    }
    else
    {
      v30 = 1.0;
    }
    *(double *)valuePtr = v30;
    v6 = CFNumberCreate(0, kCFNumberDoubleType, valuePtr);
    if (v6)
      goto LABEL_7;
    v8 = -6700;
  }
  else
  {
    v6 = 0;
    v8 = -6714;
  }
LABEL_8:
  if (a3)
    *a3 = v8;
  return v6;
}

uint64_t initAudioUnitGetParameter(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  if (AudioToolboxLibrary_sOnce != -1)
    dispatch_once(&AudioToolboxLibrary_sOnce, &__block_literal_global);
  softLinkAudioUnitGetParameter[0] = (uint64_t (*)())dlsym((void *)AudioToolboxLibrary_sLib, "AudioUnitGetParameter");
  return ((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))softLinkAudioUnitGetParameter[0])(a1, a2, a3, a4, a5);
}

uint64_t initAudioObjectGetPropertyData(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  if (CoreAudioLibrary_sOnce != -1)
    dispatch_once(&CoreAudioLibrary_sOnce, &__block_literal_global_36);
  softLinkAudioObjectGetPropertyData[0] = (uint64_t (*)())dlsym((void *)CoreAudioLibrary_sLib, "AudioObjectGetPropertyData");
  return ((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))softLinkAudioObjectGetPropertyData[0])(a1, a2, a3, a4, a5, a6);
}

uint64_t initAudioUnitGetPropertyInfo(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  if (AudioToolboxLibrary_sOnce != -1)
    dispatch_once(&AudioToolboxLibrary_sOnce, &__block_literal_global);
  softLinkAudioUnitGetPropertyInfo[0] = (uint64_t (*)())dlsym((void *)AudioToolboxLibrary_sLib, "AudioUnitGetPropertyInfo");
  return ((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))softLinkAudioUnitGetPropertyInfo[0])(a1, a2, a3, a4, a5, a6);
}

uint64_t initAudioUnitGetProperty(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  if (AudioToolboxLibrary_sOnce != -1)
    dispatch_once(&AudioToolboxLibrary_sOnce, &__block_literal_global);
  softLinkAudioUnitGetProperty[0] = (uint64_t (*)())dlsym((void *)AudioToolboxLibrary_sLib, "AudioUnitGetProperty");
  return ((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))softLinkAudioUnitGetProperty[0])(a1, a2, a3, a4, a5, a6);
}

uint64_t initAUGraphNodeInfo(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (AudioToolboxLibrary_sOnce != -1)
    dispatch_once(&AudioToolboxLibrary_sOnce, &__block_literal_global);
  softLinkAUGraphNodeInfo[0] = (uint64_t (*)())dlsym((void *)AudioToolboxLibrary_sLib, "AUGraphNodeInfo");
  return ((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))softLinkAUGraphNodeInfo[0])(a1, a2, a3, a4);
}

uint64_t initAUGraphGetIndNode(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (AudioToolboxLibrary_sOnce != -1)
    dispatch_once(&AudioToolboxLibrary_sOnce, &__block_literal_global);
  softLinkAUGraphGetIndNode[0] = (uint64_t (*)())dlsym((void *)AudioToolboxLibrary_sLib, "AUGraphGetIndNode");
  return ((uint64_t (*)(uint64_t, uint64_t, uint64_t))softLinkAUGraphGetIndNode[0])(a1, a2, a3);
}

uint64_t initAUGraphGetNodeCount(uint64_t a1, uint64_t a2)
{
  if (AudioToolboxLibrary_sOnce != -1)
    dispatch_once(&AudioToolboxLibrary_sOnce, &__block_literal_global);
  softLinkAUGraphGetNodeCount[0] = (uint64_t (*)())dlsym((void *)AudioToolboxLibrary_sLib, "AUGraphGetNodeCount");
  return ((uint64_t (*)(uint64_t, uint64_t))softLinkAUGraphGetNodeCount[0])(a1, a2);
}

uint64_t _AudioStreamSetProperty(uint64_t a1, CFTypeRef cf1, __CFString *a3)
{
  CFTypeID v6;
  const void *v7;
  uint64_t result;
  unint64_t v9;
  double v10;
  float v11;
  double v12;
  float v13;
  uint64_t v14;
  unsigned int v15;
  unsigned int v16;

  if (CFEqual(cf1, CFSTR("audioType")))
  {
    if (!a3)
      return 4294960540;
    v6 = CFGetTypeID(a3);
    if (v6 != CFStringGetTypeID())
      return 4294960540;
    v7 = *(const void **)(a1 + 176);
    CFRetain(a3);
    *(_QWORD *)(a1 + 176) = a3;
    if (v7)
      CFRelease(v7);
    return 0;
  }
  v15 = 0;
  if (!CFEqual(cf1, CFSTR("format")))
  {
    if (CFEqual(cf1, CFSTR("input")))
    {
      *(_BYTE *)(a1 + 97) = CFGetInt64(a3, 0) != 0;
      return 0;
    }
    if (CFEqual(cf1, CFSTR("preferredLatency")))
    {
      v16 = 0;
      v9 = CFGetInt64(a3, (int *)&v16);
      result = v16;
      if (!v16)
      {
        if (!HIDWORD(v9))
        {
          *(_DWORD *)(a1 + 224) = v9;
          return 0;
        }
        result = 4294960586;
      }
      *(_DWORD *)(a1 + 224) = v9;
      return result;
    }
    if (CFEqual(cf1, CFSTR("threadName")) || CFEqual(cf1, CFSTR("threadPriority")))
      return 0;
    if (CFEqual(cf1, CFSTR("varispeedEnabled")))
    {
      *(_BYTE *)(a1 + 64) = CFGetInt64(a3, 0) != 0;
      return 0;
    }
    if (CFEqual(cf1, CFSTR("varispeedRate")))
    {
      if (!*(_QWORD *)(a1 + 72))
        return 4294960551;
      v10 = CFGetDouble(a3, &v15);
      result = v15;
      if (v15)
        return result;
      v11 = v10 / *(double *)(a1 + 184);
      result = ((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, float))softLinkAudioUnitSetParameter[0])(*(_QWORD *)(a1 + 72), 0, 0, 0, 0, v11);
    }
    else
    {
      if (CFEqual(cf1, CFSTR("voice")))
      {
        *(_BYTE *)(a1 + 80) = CFGetInt64(a3, 0) != 0;
        return 0;
      }
      if (!CFEqual(cf1, CFSTR("volume")))
        return 4294960582;
      v12 = CFGetDouble(a3, &v15);
      result = v15;
      if (v15)
        return result;
      v13 = v12;
      *(float *)(a1 + 132) = v13;
      v14 = *(_QWORD *)(a1 + 56);
      if (!v14)
        return 0;
      result = ((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, float))softLinkAudioUnitSetParameter[0])(v14, 0, 2, 0, 0, v13);
    }
    if ((_DWORD)result)
      return result;
    return 0;
  }
  CFGetData(a3, (const char *)(a1 + 184), 0x28uLL, 0, (int *)&v15);
  result = v15;
  if (!v15)
    return 0;
  return result;
}

uint64_t initAudioUnitSetParameter(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, float a6)
{
  if (AudioToolboxLibrary_sOnce != -1)
    dispatch_once(&AudioToolboxLibrary_sOnce, &__block_literal_global);
  softLinkAudioUnitSetParameter[0] = (uint64_t (*)())dlsym((void *)AudioToolboxLibrary_sLib, "AudioUnitSetParameter");
  return ((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, float))softLinkAudioUnitSetParameter[0])(a1, a2, a3, a4, a5, a6);
}

uint64_t AudioStreamRampVolume(uint64_t a1, NSObject *a2, double a3, double a4)
{
  NSObject **v8;
  NSObject *v9;
  uint64_t v10;
  float v11;
  _QWORD v13[5];

  v8 = (NSObject **)(a1 + 136);
  v9 = *(NSObject **)(a1 + 136);
  if (v9)
  {
    dispatch_source_cancel(*(dispatch_source_t *)(a1 + 136));
    dispatch_release(v9);
    *v8 = 0;
  }
  v10 = *(_QWORD *)(a1 + 56);
  v11 = a3;
  v13[0] = MEMORY[0x1E0C809B0];
  v13[1] = 0x40000000;
  v13[2] = __AudioStreamRampVolume_block_invoke;
  v13[3] = &__block_descriptor_tmp;
  v13[4] = a1;
  CoreAudioRampParameterStart(v8, v10, 0, 1, 0, 16, a2, (uint64_t)v13, v11, a4);
  return 0;
}

uint64_t AudioStreamPrepare(uint64_t a1)
{
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  unsigned int *v9;
  uint64_t *v10;
  int v11;
  int v13;
  uint64_t *v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  int v19;
  size_t v21;
  void *v22;
  _OWORD v23[2];
  uint64_t v24;
  uint64_t v25;
  void *v26;
  uint64_t v27;
  __int128 v28;
  int v29;

  v28 = 0uLL;
  v29 = 0;
  v26 = 0;
  v27 = 0;
  v24 = 0;
  v25 = 0;
  memset(v23, 0, sizeof(v23));
  v2 = (uint64_t *)(a1 + 24);
  v7 = ((uint64_t (*)(uint64_t))softLinkNewAUGraph[0])(a1 + 24);
  if ((_DWORD)v7)
    goto LABEL_15;
  v7 = ((uint64_t (*)(uint64_t))softLinkAUGraphOpen[0])(*v2);
  if ((_DWORD)v7)
    goto LABEL_15;
  *(_BYTE *)(a1 + 32) = 1;
  v8 = *(_BYTE *)(a1 + 80) ? 1987078511 : 1919512419;
  LODWORD(v28) = 1635086197;
  DWORD1(v28) = v8;
  *((_QWORD *)&v28 + 1) = 1634758764;
  v29 = 0;
  v7 = ((uint64_t (*)(uint64_t, uint64_t, uint64_t))softLinkAUGraphAddNode[0])(*(_QWORD *)(a1 + 24), (uint64_t)&v28, a1 + 84);
  if ((_DWORD)v7)
    goto LABEL_15;
  v7 = ((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))softLinkAUGraphNodeInfo[0])(*(_QWORD *)(a1 + 24), *(unsigned int *)(a1 + 84), 0, a1 + 88);
  if ((_DWORD)v7)
    goto LABEL_15;
  v28 = xmmword_18D51D380;
  v29 = 0;
  v9 = (unsigned int *)(a1 + 48);
  v7 = ((uint64_t (*)(uint64_t, uint64_t, uint64_t))softLinkAUGraphAddNode[0])(*(_QWORD *)(a1 + 24), (uint64_t)&v28, a1 + 48);
  if ((_DWORD)v7)
    goto LABEL_15;
  v10 = (uint64_t *)(a1 + 56);
  v7 = ((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))softLinkAUGraphNodeInfo[0])(*(_QWORD *)(a1 + 24), *(unsigned int *)(a1 + 48), 0, a1 + 56);
  if ((_DWORD)v7)
    goto LABEL_15;
  HIDWORD(v25) = 1;
  v7 = ((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))softLinkAudioUnitSetProperty[0])(*v10, 11, 1, 0, (uint64_t)&v25 + 4, 4);
  if ((_DWORD)v7)
    goto LABEL_15;
  *(_QWORD *)&v23[0] = 0x40E7700000000000;
  *(_OWORD *)((char *)v23 + 8) = xmmword_18D51D390;
  v11 = *(_DWORD *)(a1 + 212);
  DWORD2(v23[1]) = 4;
  HIDWORD(v23[1]) = v11;
  v24 = 32;
  v7 = ((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))softLinkAudioUnitSetProperty[0])(*(_QWORD *)(a1 + 56), 8, 2, 0, (uint64_t)v23, 40);
  if ((_DWORD)v7)
    goto LABEL_15;
  v7 = ((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, float))softLinkAudioUnitSetParameter[0])(*v10, 0, 1, 0, 0, 1.0);
  if ((_DWORD)v7)
    goto LABEL_15;
  v7 = ((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, float))softLinkAudioUnitSetParameter[0])(*(_QWORD *)(a1 + 56), 0, 2, 0, 0, *(float *)(a1 + 132));
  if ((_DWORD)v7)
    goto LABEL_15;
  v7 = ((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))softLinkAUGraphConnectNodeInput[0])(*v2, *v9, 0, *(unsigned int *)(a1 + 84), 0);
  if ((_DWORD)v7)
    goto LABEL_15;
  if (*(_BYTE *)(a1 + 64))
  {
    v28 = xmmword_18D51D3A0;
    v29 = 0;
    v7 = ((uint64_t (*)(uint64_t, uint64_t, uint64_t))softLinkAUGraphAddNode[0])(*(_QWORD *)(a1 + 24), (uint64_t)&v28, a1 + 68);
    if ((_DWORD)v7)
      goto LABEL_15;
    v7 = ((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))softLinkAUGraphNodeInfo[0])(*(_QWORD *)(a1 + 24), *(unsigned int *)(a1 + 68), 0, a1 + 72);
    if ((_DWORD)v7)
      goto LABEL_15;
    *(_QWORD *)&v23[0] = 0x40E7700000000000;
    *(_OWORD *)((char *)v23 + 8) = xmmword_18D51D390;
    v13 = *(_DWORD *)(a1 + 212);
    DWORD2(v23[1]) = 4;
    HIDWORD(v23[1]) = v13;
    v24 = 32;
    v7 = ((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))softLinkAudioUnitSetProperty[0])(*(_QWORD *)(a1 + 72), 8, 2, 0, (uint64_t)v23, 40);
    if ((_DWORD)v7)
      goto LABEL_15;
    HIDWORD(v25) = 127;
    v7 = ((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))softLinkAudioUnitSetProperty[0])(*(_QWORD *)(a1 + 72), 26, 0, 0, (uint64_t)&v25 + 4, 4);
    if ((_DWORD)v7)
      goto LABEL_15;
    v7 = ((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))softLinkAUGraphConnectNodeInput[0])(*v2, *(unsigned int *)(a1 + 68), 0, *v9, 0);
    if ((_DWORD)v7)
      goto LABEL_15;
  }
  v28 = xmmword_18D51D3B0;
  v29 = 0;
  v7 = ((uint64_t (*)(uint64_t, uint64_t, uint64_t))softLinkAUGraphAddNode[0])(*(_QWORD *)(a1 + 24), (uint64_t)&v28, a1 + 36);
  if ((_DWORD)v7)
    goto LABEL_15;
  v14 = (uint64_t *)(a1 + 40);
  v7 = ((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))softLinkAUGraphNodeInfo[0])(*(_QWORD *)(a1 + 24), *(unsigned int *)(a1 + 36), 0, a1 + 40);
  if ((_DWORD)v7)
    goto LABEL_15;
  v7 = ((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))softLinkAudioUnitSetProperty[0])(*v14, 8, 1, 0, a1 + 184, 40);
  if ((_DWORD)v7)
    goto LABEL_15;
  *(_QWORD *)&v23[0] = 0x40E7700000000000;
  *(_OWORD *)((char *)v23 + 8) = xmmword_18D51D390;
  v15 = *(_DWORD *)(a1 + 212);
  DWORD2(v23[1]) = 4;
  HIDWORD(v23[1]) = v15;
  v24 = 32;
  if (*(_BYTE *)(a1 + 64))
    *(_QWORD *)&v23[0] = *(_QWORD *)(a1 + 184);
  v7 = ((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))softLinkAudioUnitSetProperty[0])(*v14, 8, 2, 0, (uint64_t)v23, 40);
  if ((_DWORD)v7)
    goto LABEL_15;
  v26 = _AudioStreamOutputCallBack;
  v27 = a1;
  v7 = ((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))softLinkAUGraphSetNodeInputCallback[0])(*(_QWORD *)(a1 + 24), *(unsigned int *)(a1 + 36), 0, (uint64_t)&v26);
  if ((_DWORD)v7)
    goto LABEL_15;
  v16 = *(unsigned int *)(a1 + 68);
  if (!(_DWORD)v16)
    v16 = *v9;
  v7 = ((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))softLinkAUGraphConnectNodeInput[0])(*(_QWORD *)(a1 + 24), *(unsigned int *)(a1 + 36), 0, v16, 0);
  if ((_DWORD)v7)
    goto LABEL_15;
  if (*(_BYTE *)(a1 + 97))
  {
    v17 = *(_QWORD *)(a1 + 88);
    *(_QWORD *)(a1 + 104) = v17;
    HIDWORD(v25) = 1;
    v7 = ((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))softLinkAudioUnitSetProperty[0])(v17, 2003, 1, 1, (uint64_t)&v25 + 4, 4);
    if ((_DWORD)v7)
      goto LABEL_15;
    v7 = ((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))softLinkAudioUnitSetProperty[0])(*(_QWORD *)(a1 + 104), 8, 2, 1, a1 + 184, 40);
    if ((_DWORD)v7)
      goto LABEL_15;
    v25 = 4;
    v18 = ((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))softLinkAudioUnitGetProperty[0])(*(_QWORD *)(a1 + 104), 14, 0, 0, (uint64_t)&v25 + 4, (uint64_t)&v25);
    v19 = HIDWORD(v25);
    if (HIDWORD(v25) < 0x1000 || v18 != 0)
      v19 = 4096;
    v21 = (v19 * DWORD2(v23[1]));
    HIDWORD(v25) = v19 * DWORD2(v23[1]);
    *(_QWORD *)(a1 + 120) = v21;
    v22 = malloc_type_malloc(v21, 0x2853C0C0uLL);
    *(_QWORD *)(a1 + 112) = v22;
    if (!v22)
    {
      v7 = 4294960568;
      goto LABEL_15;
    }
    v26 = _AudioStreamInputCallBack;
    v27 = a1;
    v7 = ((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))softLinkAudioUnitSetProperty[0])(*(_QWORD *)(a1 + 104), 2005, 0, 0, (uint64_t)&v26, 16);
    if ((_DWORD)v7)
      goto LABEL_15;
  }
  v7 = ((uint64_t (*)(uint64_t))softLinkAUGraphInitialize[0])(*v2);
  if (!(_DWORD)v7)
  {
    *(_BYTE *)(a1 + 33) = 1;
    return v7;
  }
LABEL_15:
  if (gLogCategory_AudioUtils <= 50
    && (gLogCategory_AudioUtils != -1 || _LogCategory_Initialize((uint64_t)&gLogCategory_AudioUtils, 0x32u)))
  {
    LogPrintF((uint64_t)&gLogCategory_AudioUtils, (uint64_t)"OSStatus AudioStreamPrepare(AudioStreamRef)", 0x32u, (uint64_t)"### Audio stream prepare failed: %#m\n", v3, v4, v5, v6, v7);
  }
  AudioStreamStop(a1);
  return v7;
}

uint64_t _AudioStreamOutputCallBack(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5, uint64_t a6)
{
  long double v10;

  v10 = fmod(*(long double *)a3, 4294967300.0);
  (*(void (**)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))(a1 + 160))(v10, *(_QWORD *)(a3 + 8), *(_QWORD *)(a6 + 16), (*(_DWORD *)(a1 + 208) * a5), *(_QWORD *)(a1 + 168));
  return 0;
}

uint64_t _AudioStreamInputCallBack(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  unint64_t v5;
  uint64_t v8;
  uint64_t v9;
  uint64_t result;
  long double v11;
  uint64_t v12;
  int v13;
  int v14;
  uint64_t v15;

  v5 = (*(_DWORD *)(a1 + 208) * a5);
  if (*(_QWORD *)(a1 + 120) < v5)
    return 4294960545;
  v12 = 1;
  v13 = *(_DWORD *)(a1 + 212);
  v14 = v5;
  v9 = a1 + 104;
  v8 = *(_QWORD *)(a1 + 104);
  v15 = *(_QWORD *)(v9 + 8);
  result = ((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))softLinkAudioUnitRender[0])(v8, a2, a3, a4, a5, (uint64_t)&v12);
  if (!(_DWORD)result)
  {
    v11 = fmod(*(long double *)a3, 4294967300.0);
    (*(void (**)(_QWORD, _QWORD, _QWORD, unint64_t, _QWORD))(a1 + 144))(v11, *(_QWORD *)(a3 + 8), *(_QWORD *)(a1 + 112), v5, *(_QWORD *)(a1 + 152));
    return 0;
  }
  return result;
}

void AudioStreamStop(uint64_t a1)
{
  NSObject *v2;
  uint64_t v3;
  void *v4;

  v2 = *(NSObject **)(a1 + 136);
  if (v2)
  {
    dispatch_source_cancel(*(dispatch_source_t *)(a1 + 136));
    dispatch_release(v2);
    *(_QWORD *)(a1 + 136) = 0;
  }
  if (*(_BYTE *)(a1 + 34))
  {
    ((void (*)(uint64_t))softLinkAUGraphStop[0])(*(_QWORD *)(a1 + 24));
    *(_BYTE *)(a1 + 34) = 0;
  }
  if (*(_BYTE *)(a1 + 33))
  {
    ((void (*)(uint64_t))softLinkAUGraphUninitialize[0])(*(_QWORD *)(a1 + 24));
    *(_BYTE *)(a1 + 33) = 0;
  }
  if (*(_BYTE *)(a1 + 32))
  {
    ((void (*)(uint64_t))softLinkAUGraphClose[0])(*(_QWORD *)(a1 + 24));
    *(_BYTE *)(a1 + 32) = 0;
  }
  v3 = *(_QWORD *)(a1 + 24);
  if (v3)
  {
    ((void (*)(uint64_t))softLinkDisposeAUGraph[0])(v3);
    *(_QWORD *)(a1 + 24) = 0;
  }
  *(_QWORD *)(a1 + 56) = 0;
  *(_DWORD *)(a1 + 68) = 0;
  *(_QWORD *)(a1 + 72) = 0;
  *(_DWORD *)(a1 + 84) = 0;
  *(_QWORD *)(a1 + 88) = 0;
  *(_BYTE *)(a1 + 96) = 0;
  *(_QWORD *)(a1 + 104) = 0;
  *(_QWORD *)(a1 + 44) = 0;
  *(_QWORD *)(a1 + 36) = 0;
  v4 = *(void **)(a1 + 112);
  if (v4)
  {
    free(v4);
    *(_QWORD *)(a1 + 112) = 0;
  }
  *(_BYTE *)(a1 + 128) = 0;
}

uint64_t initDisposeAUGraph(uint64_t a1)
{
  if (AudioToolboxLibrary_sOnce != -1)
    dispatch_once(&AudioToolboxLibrary_sOnce, &__block_literal_global);
  softLinkDisposeAUGraph[0] = (uint64_t (*)())dlsym((void *)AudioToolboxLibrary_sLib, "DisposeAUGraph");
  return ((uint64_t (*)(uint64_t))softLinkDisposeAUGraph[0])(a1);
}

uint64_t initAUGraphClose(uint64_t a1)
{
  if (AudioToolboxLibrary_sOnce != -1)
    dispatch_once(&AudioToolboxLibrary_sOnce, &__block_literal_global);
  softLinkAUGraphClose[0] = (uint64_t (*)())dlsym((void *)AudioToolboxLibrary_sLib, "AUGraphClose");
  return ((uint64_t (*)(uint64_t))softLinkAUGraphClose[0])(a1);
}

uint64_t initAUGraphUninitialize(uint64_t a1)
{
  if (AudioToolboxLibrary_sOnce != -1)
    dispatch_once(&AudioToolboxLibrary_sOnce, &__block_literal_global);
  softLinkAUGraphUninitialize[0] = (uint64_t (*)())dlsym((void *)AudioToolboxLibrary_sLib, "AUGraphUninitialize");
  return ((uint64_t (*)(uint64_t))softLinkAUGraphUninitialize[0])(a1);
}

uint64_t initAUGraphStop(uint64_t a1)
{
  if (AudioToolboxLibrary_sOnce != -1)
    dispatch_once(&AudioToolboxLibrary_sOnce, &__block_literal_global);
  softLinkAUGraphStop[0] = (uint64_t (*)())dlsym((void *)AudioToolboxLibrary_sLib, "AUGraphStop");
  return ((uint64_t (*)(uint64_t))softLinkAUGraphStop[0])(a1);
}

uint64_t initAUGraphInitialize(uint64_t a1)
{
  if (AudioToolboxLibrary_sOnce != -1)
    dispatch_once(&AudioToolboxLibrary_sOnce, &__block_literal_global);
  softLinkAUGraphInitialize[0] = (uint64_t (*)())dlsym((void *)AudioToolboxLibrary_sLib, "AUGraphInitialize");
  return ((uint64_t (*)(uint64_t))softLinkAUGraphInitialize[0])(a1);
}

uint64_t initAudioUnitRender(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  if (AudioToolboxLibrary_sOnce != -1)
    dispatch_once(&AudioToolboxLibrary_sOnce, &__block_literal_global);
  softLinkAudioUnitRender[0] = (uint64_t (*)())dlsym((void *)AudioToolboxLibrary_sLib, "AudioUnitRender");
  return ((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))softLinkAudioUnitRender[0])(a1, a2, a3, a4, a5, a6);
}

uint64_t initAUGraphSetNodeInputCallback(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (AudioToolboxLibrary_sOnce != -1)
    dispatch_once(&AudioToolboxLibrary_sOnce, &__block_literal_global);
  softLinkAUGraphSetNodeInputCallback[0] = (uint64_t (*)())dlsym((void *)AudioToolboxLibrary_sLib, "AUGraphSetNodeInputCallback");
  return ((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))softLinkAUGraphSetNodeInputCallback[0])(a1, a2, a3, a4);
}

uint64_t initAUGraphConnectNodeInput(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  if (AudioToolboxLibrary_sOnce != -1)
    dispatch_once(&AudioToolboxLibrary_sOnce, &__block_literal_global);
  softLinkAUGraphConnectNodeInput[0] = (uint64_t (*)())dlsym((void *)AudioToolboxLibrary_sLib, "AUGraphConnectNodeInput");
  return ((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))softLinkAUGraphConnectNodeInput[0])(a1, a2, a3, a4, a5);
}

uint64_t initAudioUnitSetProperty(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  if (AudioToolboxLibrary_sOnce != -1)
    dispatch_once(&AudioToolboxLibrary_sOnce, &__block_literal_global);
  softLinkAudioUnitSetProperty[0] = (uint64_t (*)())dlsym((void *)AudioToolboxLibrary_sLib, "AudioUnitSetProperty");
  return ((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))softLinkAudioUnitSetProperty[0])(a1, a2, a3, a4, a5, a6);
}

uint64_t initAUGraphAddNode(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (AudioToolboxLibrary_sOnce != -1)
    dispatch_once(&AudioToolboxLibrary_sOnce, &__block_literal_global);
  softLinkAUGraphAddNode[0] = (uint64_t (*)())dlsym((void *)AudioToolboxLibrary_sLib, "AUGraphAddNode");
  return ((uint64_t (*)(uint64_t, uint64_t, uint64_t))softLinkAUGraphAddNode[0])(a1, a2, a3);
}

uint64_t initAUGraphOpen(uint64_t a1)
{
  if (AudioToolboxLibrary_sOnce != -1)
    dispatch_once(&AudioToolboxLibrary_sOnce, &__block_literal_global);
  softLinkAUGraphOpen[0] = (uint64_t (*)())dlsym((void *)AudioToolboxLibrary_sLib, "AUGraphOpen");
  return ((uint64_t (*)(uint64_t))softLinkAUGraphOpen[0])(a1);
}

uint64_t initNewAUGraph(uint64_t a1)
{
  if (AudioToolboxLibrary_sOnce != -1)
    dispatch_once(&AudioToolboxLibrary_sOnce, &__block_literal_global);
  softLinkNewAUGraph[0] = (uint64_t (*)())dlsym((void *)AudioToolboxLibrary_sLib, "NewAUGraph");
  return ((uint64_t (*)(uint64_t))softLinkNewAUGraph[0])(a1);
}

uint64_t AudioStreamStart(uint64_t a1)
{
  uint64_t v2;
  uint64_t result;

  v2 = *(_QWORD *)(a1 + 24);
  if (!v2)
  {
    result = AudioStreamPrepare(a1);
    if ((_DWORD)result)
      return result;
    v2 = *(_QWORD *)(a1 + 24);
    if (!v2)
      goto LABEL_6;
  }
  if (*(_BYTE *)(a1 + 96))
  {
    ((void (*)(uint64_t))softLinkAUGraphStop[0])(v2);
    v2 = *(_QWORD *)(a1 + 24);
  }
  result = ((uint64_t (*)(uint64_t))softLinkAUGraphStart[0])(v2);
  if (!(_DWORD)result)
  {
    *(_BYTE *)(a1 + 96) = 1;
LABEL_6:
    result = 0;
    *(_BYTE *)(a1 + 128) = 1;
  }
  return result;
}

uint64_t initAUGraphStart(uint64_t a1)
{
  if (AudioToolboxLibrary_sOnce != -1)
    dispatch_once(&AudioToolboxLibrary_sOnce, &__block_literal_global);
  softLinkAUGraphStart[0] = (uint64_t (*)())dlsym((void *)AudioToolboxLibrary_sLib, "AUGraphStart");
  return ((uint64_t (*)(uint64_t))softLinkAUGraphStart[0])(a1);
}

uint64_t AudioStreamTest(int a1)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  void *v5;
  const char *v6;
  uint64_t v8;
  UInt8 bytes[48];
  _QWORD *v10;
  void *v11;

  v10 = 0;
  v11 = 0;
  memset(bytes, 0, 40);
  v8 = 0;
  v2 = SineTable_Create(&v11, 44100, 800);
  if (!(_DWORD)v2)
  {
    v3 = AudioStreamCreate((uint64_t *)&v10);
    v4 = v10;
    if ((_DWORD)v3)
    {
      v2 = v3;
      if (!v10)
        goto LABEL_14;
    }
    else
    {
      if (a1)
      {
        v10[18] = _AudioStreamTestInput;
        v4[19] = &v8;
        _AudioStreamSetProperty((uint64_t)v4, CFSTR("input"), (__CFString *)*MEMORY[0x1E0C9AE50]);
      }
      v5 = v11;
      v4[20] = _AudioStreamTestOutput;
      v4[21] = v5;
      *(_QWORD *)bytes = 0x40E5888000000000;
      *(_OWORD *)&bytes[8] = xmmword_18D51D3C0;
      *(_OWORD *)&bytes[24] = xmmword_18D51D3D0;
      v2 = CFObjectSetBytes((uint64_t)v4, (uint64_t (*)(uint64_t, uint64_t, CFDataRef))_AudioStreamSetProperty, (uint64_t)CFSTR("format"), bytes, 40);
      if (!(_DWORD)v2)
      {
        v2 = CFObjectSetInt64((uint64_t)v4, (uint64_t (*)(uint64_t, uint64_t, CFNumberRef))_AudioStreamSetProperty, (uint64_t)CFSTR("preferredLatency"), 100000);
        if (!(_DWORD)v2)
        {
          v2 = AudioStreamStart((uint64_t)v4);
          if (!(_DWORD)v2)
          {
            sleep(5u);
            if (a1)
            {
              if (!v8)
                v2 = 4294960550;
            }
          }
        }
      }
    }
    AudioStreamStop((uint64_t)v4);
    CFRelease(v4);
  }
LABEL_14:
  if (v11)
    free(v11);
  v6 = "FAILED";
  if (!(_DWORD)v2)
    v6 = "PASSED";
  printf("AudioStreamTest: %s\n", v6);
  return v2;
}

void _AudioStreamTestInput(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, _QWORD *a5)
{
  *a5 += a4;
}

void _AudioStreamTestOutput(uint64_t a1, uint64_t a2, _WORD *a3, unint64_t a4, _DWORD *a5)
{
  int v5;
  int v6;
  int v7;
  _WORD *v8;
  __int16 v9;
  int v10;
  int v11;

  v5 = a5[2];
  if ((int)(a4 >> 2) >= 1)
  {
    v6 = *a5;
    v7 = a5[1];
    v8 = &a3[(int)(2 * (a4 >> 2))];
    do
    {
      v9 = *((_WORD *)a5 + v5 + 6);
      v10 = v5 + v7;
      if (v10 <= v6)
        v11 = 0;
      else
        v11 = v6;
      v5 = v10 - v11;
      *a3 = v9;
      a3[1] = v9;
      a3 += 2;
    }
    while (a3 < v8);
  }
  a5[2] = v5;
}

uint64_t Base64EncodeEx(char *__s, int64_t a2, char a3, _BYTE *a4, unint64_t a5, _QWORD *a6)
{
  char *v10;
  const char *v11;
  unint64_t v12;
  _BYTE *v13;
  uint64_t result;

  v10 = __s;
  if (a2 == -1)
    a2 = strlen(__s);
  v11 = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/";
  if ((a3 & 2) != 0)
    v11 = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789-_";
  v12 = (2 * (((unint64_t)(a2 + 2) * (unsigned __int128)0xAAAAAAAAAAAAAAABLL) >> 64)) & 0xFFFFFFFFFFFFFFFCLL;
  if (v12 < a2)
  {
    result = 4294960553;
    goto LABEL_25;
  }
  if (v12 > a5)
  {
    result = 4294960545;
LABEL_25:
    v13 = a4;
    if (!a6)
      return result;
    goto LABEL_21;
  }
  v13 = a4;
  if (a2 >= 3)
  {
    do
    {
      *v13 = v11[(unint64_t)*v10 >> 2];
      v13[1] = v11[((unint64_t)v10[1] >> 4) & 0xFFFFFFFFFFFFFFCFLL | (16 * (*v10 & 3))];
      v13[2] = v11[((unint64_t)v10[2] >> 6) & 0xFFFFFFFFFFFFFFC3 | (4 * (v10[1] & 0xF))];
      v13[3] = v11[v10[2] & 0x3F];
      v10 += 3;
      v13 += 4;
      a2 -= 3;
    }
    while (a2 > 2);
  }
  if (a2 == 2)
  {
    *v13 = v11[(unint64_t)*v10 >> 2];
    v13[1] = v11[((unint64_t)v10[1] >> 4) & 0xFFFFFFFFFFFFFFCFLL | (16 * (*v10 & 3))];
    v13[2] = v11[4 * (v10[1] & 0xF)];
    if ((a3 & 1) != 0)
    {
      result = 0;
      v13 += 3;
      if (!a6)
        return result;
      goto LABEL_21;
    }
  }
  else
  {
    if (a2 != 1)
    {
      result = 0;
      if (!a6)
        return result;
      goto LABEL_21;
    }
    *v13 = v11[(unint64_t)*v10 >> 2];
    v13[1] = v11[16 * (*v10 & 3)];
    if ((a3 & 1) != 0)
    {
      result = 0;
      v13 += 2;
      if (!a6)
        return result;
      goto LABEL_21;
    }
    v13[2] = 61;
  }
  result = 0;
  v13[3] = 61;
  v13 += 4;
  if (!a6)
    return result;
LABEL_21:
  *a6 = v13 - a4;
  return result;
}

uint64_t Base64EncodeCopyEx(char *__s, size_t a2, char a3, _QWORD *a4, unint64_t *a5)
{
  size_t v8;
  unint64_t v10;
  _BYTE *v11;
  void *v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v17;

  v8 = a2;
  if (a2 == -1)
    v8 = strlen(__s);
  v10 = (2 * (((v8 + 2) * (unsigned __int128)0xAAAAAAAAAAAAAAABLL) >> 64)) & 0xFFFFFFFFFFFFFFFCLL;
  v17 = v10;
  if (v10 < v8)
    return 4294960553;
  v11 = malloc_type_malloc(v10 | 1, 0x43744E7AuLL);
  if (!v11)
    return 4294960568;
  v12 = v11;
  v13 = Base64EncodeEx(__s, v8, a3, v11, v10, &v17);
  if ((_DWORD)v13)
  {
    v14 = v13;
    free(v12);
  }
  else
  {
    v15 = v17;
    *((_BYTE *)v12 + v17) = 0;
    *a4 = v12;
    v14 = 0;
    if (a5)
      *a5 = v15;
  }
  return v14;
}

uint64_t Base64EncodeLinesCopyEx(char *__s, int64_t a2, size_t a3, _BYTE *a4, char a5, char **a6, _QWORD *a7)
{
  int64_t v12;
  char *v13;
  _BYTE *v14;
  _BYTE *v15;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  char *v21;
  char *v22;
  const char *v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t v27;
  char *v28;
  unint64_t v29;
  char *v30;
  char v31;
  unsigned __int8 *v32;
  int v33;
  unint64_t v34;
  char v35;
  unsigned __int8 *v36;
  int v37;
  _QWORD *v38;
  char *v39;
  char v40;
  unsigned __int8 *v41;
  int v42;
  uint64_t v43;
  _QWORD *v45;
  char **v46;

  v12 = a2;
  v13 = __s;
  if (a2 == -1)
    v12 = strlen(__s);
  v14 = a4 - 1;
  v15 = a4 - 1;
  while (*++v15)
    ;
  v17 = (2 * (((unint64_t)(v12 + 2) * (unsigned __int128)0xAAAAAAAAAAAAAAABLL) >> 64)) & 0xFFFFFFFFFFFFFFFCLL;
  v18 = v17 / 0x48;
  if (v17 % 0x48)
    ++v18;
  v19 = v17 + (_QWORD)&v15[a3 - (_QWORD)a4] * v18;
  if (v19 < v12 || v19 == -1)
    return 4294960553;
  v46 = a6;
  v21 = (char *)malloc_type_malloc(v19 + 1, 0xD1C047FDuLL);
  if (!v21)
    return 4294960568;
  v22 = v21;
  if (v12 == -1)
    v12 = strlen(v13);
  v45 = a7;
  while (*++v14)
    ;
  if ((a5 & 2) != 0)
    v24 = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789-_";
  else
    v24 = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/";
  v25 = (2 * (((unint64_t)(v12 + 2) * (unsigned __int128)0xAAAAAAAAAAAAAAABLL) >> 64)) & 0xFFFFFFFFFFFFFFFCLL;
  v26 = v25 / 0x48;
  if (v25 % 0x48)
    ++v26;
  v27 = v25 + (_QWORD)&v14[a3 - (_QWORD)a4] * v26;
  if (v27 < v12)
  {
    v43 = 4294960553;
LABEL_64:
    free(v22);
    return v43;
  }
  if (v27 > v19)
  {
    v43 = 4294960545;
    goto LABEL_64;
  }
  v28 = v22;
  if (a3)
  {
    memset(v22, 9, a3);
    v28 = &v22[a3];
  }
  if (v12 >= 3)
  {
    v29 = 0;
    v30 = &v13[v12];
    do
    {
      if (v29 < 0x48)
      {
        v34 = v29;
      }
      else
      {
        v31 = *a4;
        v32 = a4 + 1;
        if (*a4)
        {
          do
          {
            *v28++ = v31;
            v33 = *v32++;
            v31 = v33;
          }
          while (v33);
        }
        if (a3)
        {
          memset(v28, 9, a3);
          v34 = 0;
          v28 += a3;
        }
        else
        {
          v34 = 0;
        }
      }
      *v28 = v24[(unint64_t)*v13 >> 2];
      v28[1] = v24[((unint64_t)v13[1] >> 4) & 0xFFFFFFFFFFFFFFCFLL | (16 * (*v13 & 3))];
      v28[2] = v24[((unint64_t)v13[2] >> 6) & 0xFFFFFFFFFFFFFFC3 | (4 * (v13[1] & 0xF))];
      v28[3] = v24[v13[2] & 0x3F];
      v13 += 3;
      v28 += 4;
      v29 = v34 + 4;
      v12 = v30 - v13;
    }
    while (v30 - v13 > 2);
    if (v12 >= 1 && v34 >= 0x44)
    {
      v35 = *a4;
      if (*a4)
      {
        v36 = a4 + 1;
        do
        {
          *v28++ = v35;
          v37 = *v36++;
          v35 = v37;
        }
        while (v37);
      }
      if (a3)
      {
        memset(v28, 9, a3);
        v28 += a3;
      }
    }
  }
  if (v12 == 2)
  {
    *v28 = v24[(unint64_t)*v13 >> 2];
    v28[1] = v24[((unint64_t)v13[1] >> 4) & 0xFFFFFFFFFFFFFFCFLL | (16 * (*v13 & 3))];
    v28[2] = v24[4 * (v13[1] & 0xF)];
    v38 = v45;
    if ((a5 & 1) != 0)
    {
      v28 += 3;
      goto LABEL_51;
    }
    goto LABEL_47;
  }
  if (v12 != 1)
  {
LABEL_49:
    v38 = v45;
    goto LABEL_51;
  }
  *v28 = v24[(unint64_t)*v13 >> 2];
  v28[1] = v24[16 * (*v13 & 3)];
  if ((a5 & 1) != 0)
  {
    v28 += 2;
    goto LABEL_49;
  }
  v28[2] = 61;
  v38 = v45;
LABEL_47:
  v28[3] = 61;
  v28 += 4;
LABEL_51:
  v39 = v22;
  if (v28 != v22)
  {
    v40 = *a4;
    if (*a4)
    {
      v41 = a4 + 1;
      v39 = v28;
      do
      {
        *v39++ = v40;
        v42 = *v41++;
        v40 = v42;
      }
      while (v42);
    }
    else
    {
      v39 = v28;
    }
  }
  *v39 = 0;
  *v46 = v22;
  v43 = 0;
  if (v38)
    *v38 = v39 - v22;
  return v43;
}

uint64_t Base64Decode(char *__s, size_t a2, _BYTE *a3, uint64_t a4, _QWORD *a5)
{
  char *v8;
  int v9;
  int v10;
  int v11;
  char *v12;
  _BYTE *v13;
  _BYTE *v14;
  unsigned int v15;
  unsigned int v16;
  unsigned int v17;
  unsigned int v18;
  uint64_t result;

  v8 = __s;
  if (a2 == -1)
    a2 = strlen(__s);
  v9 = 0;
  v10 = 0;
  v11 = 0;
  v12 = &v8[a2];
  v13 = &a3[a4];
  v14 = a3;
LABEL_4:
  v15 = 0;
  while (v8 < v12)
  {
    v17 = *v8++;
    v16 = v17;
    v18 = kBase64DecodeTable[v17];
    if (v18 != 128)
    {
      if (v18 == 255)
      {
        result = 4294960563;
        goto LABEL_24;
      }
      if (v16 == 61)
        break;
      if (v15)
      {
        if (v15 == 1)
        {
          v10 = 16 * v18;
          v15 = 2;
          v11 |= v18 >> 4;
        }
        else
        {
          if (v15 != 2)
          {
            if (v13 - v14 >= 3)
            {
              v9 |= v18;
              *v14 = v11;
              v14[1] = v10;
              v14[2] = v9;
              v14 += 3;
              goto LABEL_4;
            }
            goto LABEL_28;
          }
          v9 = v18 << 6;
          v15 = 3;
          v10 |= v18 >> 2;
        }
      }
      else
      {
        v11 = 4 * v18;
        v15 = 1;
      }
    }
  }
  if (v15 < 2)
  {
    result = 0;
    goto LABEL_24;
  }
  if (v15 == 3)
  {
    if (v13 - v14 >= 2)
    {
      result = 0;
      *v14 = v11;
      v14[1] = v10;
      v14 += 2;
      goto LABEL_24;
    }
  }
  else if (v13 - v14 >= 1)
  {
    result = 0;
    *v14++ = v11;
    goto LABEL_24;
  }
LABEL_28:
  result = 4294960545;
LABEL_24:
  if (a5)
    *a5 = v14 - a3;
  return result;
}

uint64_t Base64DecodeCopy(char *__s, size_t a2, _QWORD *a3, unint64_t *a4)
{
  size_t v6;
  _BYTE *v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v14;

  v6 = a2;
  if (a2 == -1)
    v6 = strlen(__s);
  if (v6 > 0xFFFFFFFFFFFFFFFCLL)
    return 4294960553;
  v14 = 3 * ((v6 + 3) >> 2);
  v8 = malloc_type_malloc(v14 + 1, 0x19CA1A60uLL);
  if (!v8)
    return 4294960568;
  v9 = v8;
  v10 = Base64Decode(__s, v6, v8, 3 * ((v6 + 3) >> 2), &v14);
  if ((_DWORD)v10)
  {
    v11 = v10;
    free(v9);
  }
  else
  {
    v12 = v14;
    *((_BYTE *)v9 + v14) = 0;
    *a3 = v9;
    v11 = 0;
    if (a4)
      *a4 = v12;
  }
  return v11;
}

uint64_t _BonjourAdvertiserGetTypeID()
{
  uint64_t result;

  result = _CFRuntimeRegisterClass();
  gBonjourAdvertiserTypeID = result;
  return result;
}

_BYTE *_BonjourAdvertiserFinalize(uint64_t a1)
{
  NSObject *v2;
  const void *v3;
  const void *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  _BYTE *result;

  v2 = *(NSObject **)(a1 + 24);
  if (v2)
  {
    dispatch_release(v2);
    *(_QWORD *)(a1 + 24) = 0;
  }
  v3 = *(const void **)(a1 + 48);
  if (v3)
  {
    CFRelease(v3);
    *(_QWORD *)(a1 + 48) = 0;
  }
  v4 = *(const void **)(a1 + 56);
  if (v4)
  {
    _Block_release(v4);
    *(_QWORD *)(a1 + 56) = 0;
  }

  *(_QWORD *)(a1 + 64) = 0;
  v5 = *(void **)(a1 + 96);
  if (v5)
  {
    free(v5);
    *(_QWORD *)(a1 + 96) = 0;
  }
  v6 = *(void **)(a1 + 136);
  if (v6)
  {
    free(v6);
    *(_QWORD *)(a1 + 136) = 0;
  }
  v7 = *(void **)(a1 + 152);
  if (v7)
  {
    free(v7);
    *(_QWORD *)(a1 + 152) = 0;
  }
  v8 = *(void **)(a1 + 160);
  if (v8)
  {
    free(v8);
    *(_QWORD *)(a1 + 160) = 0;
  }
  result = *(_BYTE **)(a1 + 16);
  if (result)
  {
    if ((result[18] & 4) != 0)
    {
      result = (_BYTE *)LogCategory_Remove(result);
      *(_QWORD *)(a1 + 16) = 0;
    }
  }
  return result;
}

uint64_t BonjourAdvertiserCreate(_QWORD *a1)
{
  _OWORD *Instance;
  _QWORD *v3;
  dispatch_queue_t v4;
  uint64_t result;

  if (gBonjourAdvertiserInitOnce != -1)
    dispatch_once_f(&gBonjourAdvertiserInitOnce, 0, (dispatch_function_t)_BonjourAdvertiserGetTypeID);
  Instance = (_OWORD *)_CFRuntimeCreateInstance();
  if (!Instance)
    return 4294960568;
  v3 = Instance;
  Instance[9] = 0u;
  Instance[10] = 0u;
  Instance[7] = 0u;
  Instance[8] = 0u;
  Instance[5] = 0u;
  Instance[6] = 0u;
  Instance[3] = 0u;
  Instance[4] = 0u;
  Instance[1] = 0u;
  Instance[2] = 0u;
  v4 = dispatch_queue_create("BonjourAdvertiser", 0);
  v3[3] = v4;
  if (v4)
  {
    result = 0;
    v3[2] = &gLogCategory_BonjourAdvertiser;
    *a1 = v3;
  }
  else
  {
    CFRelease(v3);
    return 4294960596;
  }
  return result;
}

void BonjourAdvertiserGenerateStatisticsNAN(uint64_t a1, uint64_t a2)
{
  NSObject *v2;
  _QWORD v3[6];

  v2 = *(NSObject **)(a1 + 24);
  v3[0] = MEMORY[0x1E0C809B0];
  v3[1] = 3221225472;
  v3[2] = __BonjourAdvertiserGenerateStatisticsNAN_block_invoke;
  v3[3] = &unk_1E25DBE50;
  v3[4] = a2;
  v3[5] = a1;
  dispatch_async(v2, v3);
}

void BonjourAdvertiserReportNANIssue(uint64_t a1, uint64_t a2)
{
  NSObject *v2;
  _QWORD v3[6];

  v2 = *(NSObject **)(a1 + 24);
  v3[0] = MEMORY[0x1E0C809B0];
  v3[1] = 3221225472;
  v3[2] = __BonjourAdvertiserReportNANIssue_block_invoke;
  v3[3] = &unk_1E25DD170;
  v3[4] = a2;
  v3[5] = a1;
  dispatch_async(v2, v3);
}

void BonjourAdvertiserSetNANControlFlags(uint64_t a1, int a2)
{
  NSObject *v2;
  _QWORD v3[5];
  int v4;

  v2 = *(NSObject **)(a1 + 24);
  v3[0] = MEMORY[0x1E0C809B0];
  v3[1] = 3221225472;
  v3[2] = __BonjourAdvertiserSetNANControlFlags_block_invoke;
  v3[3] = &__block_descriptor_44_e5_v8__0l;
  v3[4] = a1;
  v4 = a2;
  dispatch_async(v2, v3);
}

void BonjourAdvertiserSetNANCustomData(uint64_t a1, CFTypeRef cf)
{
  NSObject *v4;
  _QWORD v5[6];

  if (cf)
    CFRetain(cf);
  v4 = *(NSObject **)(a1 + 24);
  v5[0] = MEMORY[0x1E0C809B0];
  v5[1] = 3221225472;
  v5[2] = __BonjourAdvertiserSetNANCustomData_block_invoke;
  v5[3] = &__block_descriptor_48_e5_v8__0l;
  v5[4] = a1;
  v5[5] = cf;
  dispatch_async(v4, v5);
}

void BonjourAdvertiserSetNANInterruptionHandler(uint64_t a1, uint64_t a2)
{
  NSObject *v2;
  _QWORD v3[6];

  v2 = *(NSObject **)(a1 + 24);
  v3[0] = MEMORY[0x1E0C809B0];
  v3[1] = 3221225472;
  v3[2] = __BonjourAdvertiserSetNANInterruptionHandler_block_invoke;
  v3[3] = &unk_1E25DBE50;
  v3[4] = a2;
  v3[5] = a1;
  dispatch_async(v2, v3);
}

void BonjourAdvertiserUpdateLinkStatusNAN(uint64_t a1, int a2)
{
  NSObject *v2;
  _QWORD v3[5];
  int v4;

  v2 = *(NSObject **)(a1 + 24);
  v3[0] = MEMORY[0x1E0C809B0];
  v3[1] = 3221225472;
  v3[2] = __BonjourAdvertiserUpdateLinkStatusNAN_block_invoke;
  v3[3] = &__block_descriptor_44_e5_v8__0l;
  v3[4] = a1;
  v4 = a2;
  dispatch_async(v2, v3);
}

void BonjourAdvertiserSetDispatchQueue(uint64_t a1, NSObject *a2)
{
  NSObject *v3;
  NSObject *v4;

  if (a2)
    v3 = a2;
  else
    v3 = MEMORY[0x1E0C80D38];
  dispatch_retain(v3);
  v4 = *(NSObject **)(a1 + 24);
  if (v4)
    dispatch_release(v4);
  *(_QWORD *)(a1 + 24) = v3;
}

uint64_t BonjourAdvertiserSetFlags(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 104) = a2;
  return result;
}

uint64_t BonjourAdvertiserSetInterfaceIndex(uint64_t result, int a2)
{
  *(_DWORD *)(result + 112) = a2;
  return result;
}

uint64_t BonjourAdvertiserSetInterfaceName()
{
  return __strlcpy_chk();
}

uint64_t BonjourAdvertiserSetLabel(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  return LogCategoryReplaceF((uint64_t *)(a1 + 16), (uint64_t)"%s-%s", a3, a4, a5, a6, a7, a8, qword_1EE0662E8);
}

uint64_t BonjourAdvertiserSetName(uint64_t a1, char *a2)
{
  return ReplaceDifferentString((void **)(a1 + 136), a2);
}

uint64_t BonjourAdvertiserSetServiceType(uint64_t a1, char *a2)
{
  return ReplaceDifferentString((void **)(a1 + 152), a2);
}

uint64_t BonjourAdvertiserSetDomain(uint64_t a1, char *a2)
{
  return ReplaceDifferentString((void **)(a1 + 96), a2);
}

uint64_t BonjourAdvertiserSetP2P(uint64_t result, char a2)
{
  *(_BYTE *)(result + 144) = a2;
  return result;
}

uint64_t BonjourAdvertiserSetPort(uint64_t result, int a2)
{
  *(_DWORD *)(result + 148) = a2;
  return result;
}

uint64_t BonjourAdvertiserSetTXTRecord(uint64_t a1, const void *a2, size_t size)
{
  void *v6;
  void *v7;
  void *v8;
  uint64_t result;

  if (size)
  {
    v6 = malloc_type_malloc(size, 0x37DD5EA4uLL);
    if (!v6)
      return 4294960568;
    v7 = v6;
    memcpy(v6, a2, size);
  }
  else
  {
    v7 = 0;
  }
  v8 = *(void **)(a1 + 160);
  if (v8)
    free(v8);
  result = 0;
  *(_QWORD *)(a1 + 160) = v7;
  *(_WORD *)(a1 + 168) = size;
  *(_BYTE *)(a1 + 170) = 1;
  return result;
}

uint64_t BonjourAdvertiserSetTrafficFlags(uint64_t result, int a2)
{
  *(_DWORD *)(result + 172) = a2;
  return result;
}

uint64_t BonjourAdvertiserStart(dispatch_queue_t *a1)
{
  CFRetain(a1);
  dispatch_async_f(a1[3], a1, (dispatch_function_t)_BonjourAdvertiserStart);
  return 0;
}

void _BonjourAdvertiserStart(_BYTE *cf)
{
  if (!cf[88])
  {
    cf[88] = 1;
    CFRetain(cf);
  }
  *((_QWORD *)cf + 10) = mach_absolute_time();
  _BonjourAdvertiserUpdateDirect((uint64_t)cf);
  CFRelease(cf);
}

void _BonjourAdvertiserUpdateDirect(uint64_t a1)
{
  _DNSServiceRef_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  int *v9;
  DNSServiceFlags v10;
  uint32_t v11;
  DNSServiceErrorType v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  int *v17;
  uint64_t v18;
  int v19;
  CUNANPublisher *v20;
  uint64_t v21;
  uint64_t v22;
  __CFDictionary *v23;
  __CFDictionary *v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  int *v32;
  NSObject *v33;
  NSObject *v34;
  dispatch_time_t v35;
  int v36;

  if (*(_BYTE *)(a1 + 88))
  {
    v3 = a1 + 32;
    v2 = *(_DNSServiceRef_t **)(a1 + 32);
    if ((*(_BYTE *)(v3 + 78) & 0x80) != 0)
    {
      if (v2)
      {
        DNSServiceRefDeallocate(v2);
        v8 = 0;
        *(_QWORD *)v3 = 0;
        goto LABEL_27;
      }
      goto LABEL_26;
    }
    if (!v2)
    {
LABEL_14:
      if (*(_BYTE *)(a1 + 144))
        v10 = *(_DWORD *)(a1 + 104) | 0x100000;
      else
        v10 = *(_DWORD *)(a1 + 104);
      if (*(_BYTE *)(a1 + 116))
      {
        v11 = if_nametoindex((const char *)(a1 + 116));
        if (!v11)
        {
          v8 = -6727;
          goto LABEL_27;
        }
      }
      else
      {
        v11 = *(_DWORD *)(a1 + 112);
      }
      v12 = DNSServiceRegister((DNSServiceRef *)v3, v10, v11, *(const char **)(a1 + 136), *(const char **)(a1 + 152), *(const char **)(a1 + 96), 0, bswap32(*(unsigned __int16 *)(a1 + 148)) >> 16, *(_WORD *)(a1 + 168), *(const void **)(a1 + 160), (DNSServiceRegisterReply)_BonjourAdvertiserRegistrationHandler, (void *)a1);
      if (v12)
      {
        v8 = v12;
LABEL_27:
        v18 = *(_QWORD *)(a1 + 64);
        if ((*(_BYTE *)(a1 + 111) & 2) == 0)
        {
          objc_msgSend(*(id *)(a1 + 64), "invalidate");

          v19 = 0;
          *(_QWORD *)(a1 + 64) = 0;
          if (!v8)
            goto LABEL_42;
LABEL_43:
          if (!*(_QWORD *)(a1 + 72))
          {
            v25 = mach_absolute_time();
            v26 = UpTicksToMilliseconds(v25 - *(_QWORD *)(a1 + 80));
            if (v26 >= 0x2B69)
              v31 = 1;
            else
              v31 = 11113 - v26;
            v32 = *(int **)(a1 + 16);
            if (*v32 > 50)
              goto LABEL_51;
            if (*v32 == -1)
            {
              if (!_LogCategory_Initialize((uint64_t)v32, 0x32u))
              {
LABEL_51:
                v33 = dispatch_source_create(MEMORY[0x1E0C80DD0], 0, 0, *(dispatch_queue_t *)(a1 + 24));
                *(_QWORD *)(a1 + 72) = v33;
                if (v33)
                {
                  dispatch_set_context(v33, (void *)a1);
                  dispatch_source_set_event_handler_f(*(dispatch_source_t *)(a1 + 72), (dispatch_function_t)_BonjourAdvertiserRetryTimer);
                  v34 = *(NSObject **)(a1 + 72);
                  v35 = dispatch_time(0, 1000000 * v31);
                  dispatch_source_set_timer(v34, v35, 0xFFFFFFFFFFFFFFFFLL, 0x3B9ACA00uLL);
                  dispatch_resume(*(dispatch_object_t *)(a1 + 72));
                }
                goto LABEL_53;
              }
              v32 = *(int **)(a1 + 16);
            }
            LogPrintF((uint64_t)v32, (uint64_t)"void _BonjourAdvertiserHandleError(BonjourAdvertiserRef, OSStatus)", 0x32u, (uint64_t)"### Bonjour register for %s failed, retrying in %llu ms: %#m\n", v27, v28, v29, v30, *(_QWORD *)(a1 + 152));
            goto LABEL_51;
          }
LABEL_53:
          *(_BYTE *)(a1 + 170) = 0;
          return;
        }
        v20 = *(CUNANPublisher **)(a1 + 64);
        if (!v18)
        {
          v20 = objc_alloc_init(CUNANPublisher);
          -[CUNANPublisher setControlFlags:](v20, "setControlFlags:", *(unsigned int *)(a1 + 40));
          -[CUNANPublisher setCustomData:](v20, "setCustomData:", *(_QWORD *)(a1 + 48));
          -[CUNANPublisher setDispatchQueue:](v20, "setDispatchQueue:", *(_QWORD *)(a1 + 24));
          -[CUNANPublisher setInterruptionHandler:](v20, "setInterruptionHandler:", *(_QWORD *)(a1 + 56));
          v21 = *(_QWORD *)(a1 + 152);
          if (v21)
            v21 = objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:");
          -[CUNANPublisher setServiceType:](v20, "setServiceType:", v21);
          -[CUNANPublisher setTrafficFlags:](v20, "setTrafficFlags:", *(unsigned int *)(a1 + 172));
          *(_QWORD *)(a1 + 64) = v20;
        }
        v22 = *(_QWORD *)(a1 + 136);
        if (v22)
        {
          v22 = objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:");
          v20 = *(CUNANPublisher **)(a1 + 64);
        }
        v36 = 0;
        -[CUNANPublisher setName:](v20, "setName:", v22);
        objc_msgSend(*(id *)(a1 + 64), "setPort:", *(unsigned int *)(a1 + 148));
        if (*(_BYTE *)(a1 + 170))
        {
          v23 = CFDictionaryCreateWithTXTRecordBytes(*(const char **)(a1 + 160), *(unsigned __int16 *)(a1 + 168), &v36);
          if (!v23)
          {
            v19 = v36;
            if (v8)
              goto LABEL_43;
            goto LABEL_42;
          }
          v24 = v23;
          objc_msgSend(*(id *)(a1 + 64), "setTextInfo:", v23);
          CFRelease(v24);
        }
        if (!v18)
          objc_msgSend(*(id *)(a1 + 64), "activateWithCompletion:", 0);
        v19 = 0;
        if (v8)
          goto LABEL_43;
LABEL_42:
        if (!v19)
          goto LABEL_53;
        goto LABEL_43;
      }
      DNSServiceSetDispatchQueue(*(DNSServiceRef *)(a1 + 32), *(dispatch_queue_t *)(a1 + 24));
      v17 = *(int **)(a1 + 16);
      if (*v17 <= 50)
      {
        if (*v17 == -1)
        {
          if (!_LogCategory_Initialize((uint64_t)v17, 0x32u))
            goto LABEL_26;
          v17 = *(int **)(a1 + 16);
        }
        LogPrintF((uint64_t)v17, (uint64_t)"OSStatus _BonjourAdvertiserUpdateDNSService(BonjourAdvertiserRef)", 0x32u, (uint64_t)"Registering Bonjour %s port %d\n", v13, v14, v15, v16, *(_QWORD *)(a1 + 152));
      }
LABEL_26:
      v8 = 0;
      goto LABEL_27;
    }
    if (DNSServiceUpdateRecord(v2, 0, 0, *(_WORD *)(a1 + 168), *(const void **)(a1 + 160), 0))
    {
      if (*(_QWORD *)v3)
      {
        DNSServiceRefDeallocate(*(DNSServiceRef *)v3);
        *(_QWORD *)v3 = 0;
      }
      goto LABEL_14;
    }
    v9 = *(int **)(a1 + 16);
    if (*v9 <= 50)
    {
      if (*v9 != -1)
      {
LABEL_11:
        LogPrintF((uint64_t)v9, (uint64_t)"OSStatus _BonjourAdvertiserUpdateDNSService(BonjourAdvertiserRef)", 0x32u, (uint64_t)"Updated Bonjour TXT for %s\n", v4, v5, v6, v7, *(_QWORD *)(a1 + 152));
        goto LABEL_13;
      }
      if (_LogCategory_Initialize((uint64_t)v9, 0x32u))
      {
        v9 = *(int **)(a1 + 16);
        goto LABEL_11;
      }
    }
LABEL_13:
    if (*(_QWORD *)v3)
      goto LABEL_26;
    goto LABEL_14;
  }
}

void _BonjourAdvertiserRegistrationHandler(int a1, int a2, int a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t cf, uint64_t a8)
{
  int *v9;
  int *v10;
  int *v12;
  _DNSServiceRef_t *v13;

  if (!a3)
  {
    v10 = *(int **)(cf + 16);
    if (*v10 > 50)
      return;
    if (*v10 == -1)
    {
      if (!_LogCategory_Initialize((uint64_t)v10, 0x32u))
        return;
      v10 = *(int **)(cf + 16);
    }
    LogPrintF((uint64_t)v10, (uint64_t)"void _BonjourAdvertiserRegistrationHandler(DNSServiceRef, DNSServiceFlags, DNSServiceErrorType, const char *, const char *, const char *, void *)", 0x32u, (uint64_t)"Registered Bonjour %s.%s%s\n", a5, a6, cf, a8, a4);
    return;
  }
  if (a3 != -65563)
  {
    v12 = *(int **)(cf + 16);
    if (*v12 > 50)
      return;
    if (*v12 == -1)
    {
      if (!_LogCategory_Initialize((uint64_t)v12, 0x32u))
        return;
      v12 = *(int **)(cf + 16);
    }
    LogPrintF((uint64_t)v12, (uint64_t)"void _BonjourAdvertiserRegistrationHandler(DNSServiceRef, DNSServiceFlags, DNSServiceErrorType, const char *, const char *, const char *, void *)", 0x32u, (uint64_t)"### Bonjour registration error for %s: %#m\n", a5, a6, cf, a8, *(_QWORD *)(cf + 152));
    return;
  }
  v9 = *(int **)(cf + 16);
  if (*v9 <= 50)
  {
    if (*v9 == -1)
    {
      if (!_LogCategory_Initialize((uint64_t)v9, 0x32u))
        goto LABEL_13;
      v9 = *(int **)(cf + 16);
    }
    LogPrintF((uint64_t)v9, (uint64_t)"void _BonjourAdvertiserRegistrationHandler(DNSServiceRef, DNSServiceFlags, DNSServiceErrorType, const char *, const char *, const char *, void *)", 0x32u, (uint64_t)"### Bonjour server crashed for %s\n", a5, a6, cf, a8, *(_QWORD *)(cf + 152));
  }
LABEL_13:
  v13 = *(_DNSServiceRef_t **)(cf + 32);
  if (v13)
  {
    DNSServiceRefDeallocate(v13);
    *(_QWORD *)(cf + 32) = 0;
  }
  CFRetain((CFTypeRef)cf);
  dispatch_async_f(*(dispatch_queue_t *)(cf + 24), (void *)cf, (dispatch_function_t)_BonjourAdvertiserUpdate);
}

uint64_t _BonjourAdvertiserRetryTimer(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int *v9;
  NSObject *v10;

  v9 = *(int **)(a1 + 16);
  if (*v9 <= 50)
  {
    if (*v9 != -1)
    {
LABEL_3:
      LogPrintF((uint64_t)v9, (uint64_t)"void _BonjourAdvertiserRetryTimer(void *)", 0x32u, (uint64_t)"Retrying Bonjour register for %s after failure\n", a5, a6, a7, a8, *(_QWORD *)(a1 + 152));
      goto LABEL_5;
    }
    if (_LogCategory_Initialize((uint64_t)v9, 0x32u))
    {
      v9 = *(int **)(a1 + 16);
      goto LABEL_3;
    }
  }
LABEL_5:
  v10 = *(NSObject **)(a1 + 72);
  if (v10)
  {
    dispatch_source_cancel(*(dispatch_source_t *)(a1 + 72));
    dispatch_release(v10);
    *(_QWORD *)(a1 + 72) = 0;
  }
  *(_QWORD *)(a1 + 80) = mach_absolute_time();
  return _BonjourAdvertiserUpdateDirect(a1);
}

void _BonjourAdvertiserUpdate(const void *a1)
{
  _BonjourAdvertiserUpdateDirect();
  CFRelease(a1);
}

void BonjourAdvertiserStop(dispatch_queue_t *a1)
{
  CFRetain(a1);
  dispatch_async_f(a1[3], a1, (dispatch_function_t)_BonjourAdvertiserStop);
}

void _BonjourAdvertiserStop(uint64_t a1)
{
  NSObject *v2;
  _DNSServiceRef_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int *v8;

  v2 = *(NSObject **)(a1 + 72);
  if (v2)
  {
    dispatch_source_cancel(*(dispatch_source_t *)(a1 + 72));
    dispatch_release(v2);
    *(_QWORD *)(a1 + 72) = 0;
  }
  v3 = *(_DNSServiceRef_t **)(a1 + 32);
  if (v3)
  {
    DNSServiceRefDeallocate(v3);
    *(_QWORD *)(a1 + 32) = 0;
  }
  objc_msgSend(*(id *)(a1 + 64), "invalidate");

  *(_QWORD *)(a1 + 64) = 0;
  if (*(_BYTE *)(a1 + 88))
  {
    v8 = *(int **)(a1 + 16);
    if (*v8 <= 50)
    {
      if (*v8 == -1)
      {
        if (!_LogCategory_Initialize((uint64_t)v8, 0x32u))
          goto LABEL_10;
        v8 = *(int **)(a1 + 16);
      }
      LogPrintF((uint64_t)v8, (uint64_t)"void _BonjourAdvertiserStop(void *)", 0x32u, (uint64_t)"Deregistered Bonjour %s\n", v4, v5, v6, v7, *(_QWORD *)(a1 + 152));
    }
LABEL_10:
    CFRelease((CFTypeRef)a1);
  }
  *(_BYTE *)(a1 + 88) = 0;
  CFRelease((CFTypeRef)a1);
}

uint64_t BonjourAdvertiserUpdate(dispatch_queue_t *a1)
{
  CFRetain(a1);
  dispatch_async_f(a1[3], a1, (dispatch_function_t)_BonjourAdvertiserUpdate);
  return 0;
}

uint64_t _BonjourBrowserGetTypeID()
{
  uint64_t result;

  result = _CFRuntimeRegisterClass();
  gBonjourBrowserTypeID = result;
  return result;
}

void _BonjourBrowser_Finalize(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  NSObject *v10;
  NSObject *v11;
  const void *v12;

  v10 = a1[2];
  if (v10)
  {
    dispatch_release(v10);
    a1[2] = 0;
  }
  v11 = a1[20];
  if (v11)
  {
    dispatch_release(v11);
    a1[20] = 0;
  }
  v12 = (const void *)a1[23];
  if (v12)
  {
    _Block_release(v12);
    a1[23] = 0;
  }
  if (gLogCategory_BonjourBrowser <= 20
    && (gLogCategory_BonjourBrowser != -1 || _LogCategory_Initialize((uint64_t)&gLogCategory_BonjourBrowser, 0x14u)))
  {
    LogPrintF((uint64_t)&gLogCategory_BonjourBrowser, (uint64_t)"void _BonjourBrowser_Finalize(CFTypeRef)", 0x14u, (uint64_t)"Finalized browser\n", a5, a6, a7, a8, a9);
  }
}

uint64_t BonjourBrowser_Create(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  return BonjourBrowser_CreateEx(a1, a2, 0, a4, a5, a6, a7, a8);
}

uint64_t BonjourBrowser_CreateEx(_QWORD *a1, uint64_t a2, char a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  _OWORD *Instance;
  _QWORD *v12;
  dispatch_queue_t *v13;
  const char *v14;
  NSObject *v15;
  dispatch_qos_class_t v16;
  dispatch_queue_t v17;
  NSObject *v18;
  uint64_t result;

  if (gLogCategory_BonjourBrowser <= 30
    && (gLogCategory_BonjourBrowser != -1 || _LogCategory_Initialize((uint64_t)&gLogCategory_BonjourBrowser, 0x1Eu)))
  {
    LogPrintF((uint64_t)&gLogCategory_BonjourBrowser, (uint64_t)"OSStatus BonjourBrowser_CreateEx(BonjourBrowserRef *, const char *, CUBonjourBrowserFlags)", 0x1Eu, (uint64_t)"Create '%s', %#{flags}\n", a5, a6, a7, a8, a2);
  }
  if (gBonjourBrowserInitOnce != -1)
    dispatch_once_f(&gBonjourBrowserInitOnce, 0, (dispatch_function_t)_BonjourBrowserGetTypeID);
  Instance = (_OWORD *)_CFRuntimeCreateInstance();
  if (!Instance)
    return 4294960568;
  v12 = Instance;
  Instance[1] = 0u;
  v13 = (dispatch_queue_t *)(Instance + 1);
  Instance[10] = 0u;
  Instance[11] = 0u;
  Instance[8] = 0u;
  Instance[9] = 0u;
  Instance[6] = 0u;
  Instance[7] = 0u;
  Instance[4] = 0u;
  Instance[5] = 0u;
  Instance[2] = 0u;
  Instance[3] = 0u;
  if ((a3 & 2) != 0)
  {
    v16 = QOS_CLASS_USER_INITIATED;
  }
  else
  {
    if ((a3 & 1) == 0)
    {
      if (a2)
        v14 = (const char *)a2;
      else
        v14 = "BonjourBrowser";
      v15 = 0;
      goto LABEL_19;
    }
    v16 = QOS_CLASS_UTILITY;
  }
  v15 = dispatch_queue_attr_make_with_qos_class(0, v16, 0);
  if (a2)
    v14 = (const char *)a2;
  else
    v14 = "BonjourBrowser";
LABEL_19:
  v17 = dispatch_queue_create(v14, v15);
  *v13 = v17;
  if (v17)
  {
    v18 = MEMORY[0x1E0C80D38];
    v12[20] = MEMORY[0x1E0C80D38];
    dispatch_retain(v18);
    result = 0;
    *a1 = v12;
  }
  else
  {
    CFRelease(v12);
    return 4294960596;
  }
  return result;
}

void BonjourBrowser_SetDispatchQueue(uint64_t a1, NSObject *a2)
{
  NSObject *v3;
  NSObject *v4;

  if (a2)
    v3 = a2;
  else
    v3 = MEMORY[0x1E0C80D38];
  dispatch_retain(v3);
  v4 = *(NSObject **)(a1 + 160);
  if (v4)
    dispatch_release(v4);
  *(_QWORD *)(a1 + 160) = v3;
}

uint64_t BonjourBrowser_SetEventHandler(uint64_t result, uint64_t a2, uint64_t a3)
{
  *(_QWORD *)(result + 168) = a2;
  *(_QWORD *)(result + 176) = a3;
  return result;
}

void BonjourBrowser_SetEventHandlerBlock(uint64_t a1, void *aBlock)
{
  void *v3;
  const void *v4;

  if (aBlock)
    v3 = _Block_copy(aBlock);
  else
    v3 = 0;
  v4 = *(const void **)(a1 + 184);
  if (v4)
    _Block_release(v4);
  *(_QWORD *)(a1 + 184) = v3;
}

uint64_t BonjourBrowser_SetNANControlFlags(uint64_t a1, uint64_t a2)
{
  *(_DWORD *)(a1 + 56) = a2;
  return objc_msgSend(*(id *)(a1 + 64), "setControlFlags:", a2);
}

void _BonjourBrowser_BrowseHandler(int a1, unsigned __int8 a2, uint64_t a3, uint64_t a4, char *a5, const char *a6, const char *a7, uint64_t a8, uint64_t a9)
{
  unsigned int v13;
  unsigned int v14;
  const char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  CFStringRef v21;
  CFStringRef v22;
  uint64_t v23;
  const void *v24;
  int IsThunderbolt;
  uint64_t v26;
  uint64_t v27;
  _QWORD *v28;
  uint64_t v29;
  uint64_t v30;
  int v31;
  uint64_t v32;
  char cStr[17];
  uint64_t v34;

  v34 = *MEMORY[0x1E0C80C00];
  if ((_DWORD)a4)
  {
    if ((_DWORD)a4 == -65563)
    {
      if (gLogCategory_BonjourBrowser <= 60
        && (gLogCategory_BonjourBrowser != -1 || _LogCategory_Initialize((uint64_t)&gLogCategory_BonjourBrowser, 0x3Cu)))
      {
        LogPrintF((uint64_t)&gLogCategory_BonjourBrowser, (uint64_t)"void _BonjourBrowser_BrowseHandler(DNSServiceRef, DNSServiceFlags, uint32_t, DNSServiceErrorType, const char *, const char *, const char *, void *)", 0x3Cu, (uint64_t)"### Browser for %s server crashed\n", (uint64_t)a5, (uint64_t)a6, (uint64_t)a7, a8, *(_QWORD *)(a8 + 128));
      }
      _BonjourBrowser_HandleError(a8, -65563, a3, a4, (uint64_t)a5, (uint64_t)a6, (uint64_t)a7, a8, a9);
    }
    else if (gLogCategory_BonjourBrowser <= 60
           && (gLogCategory_BonjourBrowser != -1 || _LogCategory_Initialize((uint64_t)&gLogCategory_BonjourBrowser, 0x3Cu)))
    {
      LogPrintF((uint64_t)&gLogCategory_BonjourBrowser, (uint64_t)"void _BonjourBrowser_BrowseHandler(DNSServiceRef, DNSServiceFlags, uint32_t, DNSServiceErrorType, const char *, const char *, const char *, void *)", 0x3Cu, (uint64_t)"### Browser for %s browse error: %#m\n", (uint64_t)a5, (uint64_t)a6, (uint64_t)a7, a8, *(_QWORD *)(a8 + 128));
    }
    return;
  }
  if (*(_BYTE *)(a8 + 96))
  {
    v13 = a3;
    v14 = a2;
    if (gLogCategory_BonjourBrowser <= 20
      && (gLogCategory_BonjourBrowser != -1 || _LogCategory_Initialize((uint64_t)&gLogCategory_BonjourBrowser, 0x14u)))
    {
      v15 = "Add";
      if (((v14 >> 1) & 1) == 0)
        v15 = "Rmv";
      LogPrintF((uint64_t)&gLogCategory_BonjourBrowser, (uint64_t)"void _BonjourBrowser_BrowseHandler(DNSServiceRef, DNSServiceFlags, uint32_t, DNSServiceErrorType, const char *, const char *, const char *, void *)", 0x14u, (uint64_t)"Bonjour PTR %s %s.%s%s on %u\n", (uint64_t)a5, (uint64_t)a6, (uint64_t)a7, a8, (uint64_t)v15);
    }
    cStr[0] = 0;
    v31 = 0;
    if ((v14 & 2) != 0 && (*(_BYTE *)(a8 + 158) & 0x7B) != 0)
    {
      if_indextoname(v13, cStr);
      SocketGetInterfaceInfo(-1, cStr, 0, 0, 0, 0, 0, 0, 0, (uint64_t)&v31);
      v20 = *(_QWORD *)(a8 + 152);
      if ((v20 & 0x8000000000000) != 0 && (v31 & 3) != 0
        || (v20 & 0x20000000000000) != 0 && v31 == 2
        || (v20 & 0x10000000000000) != 0 && v31 == 4
        || (v20 & 0x40000000000000) != 0 && v31 == 8
        || (v20 & 0x1000000000000) != 0 && v31 == 16)
      {
LABEL_32:
        if (gLogCategory_BonjourBrowser <= 20
          && (gLogCategory_BonjourBrowser != -1 || _LogCategory_Initialize((uint64_t)&gLogCategory_BonjourBrowser, 0x14u)))
        {
          LogPrintF((uint64_t)&gLogCategory_BonjourBrowser, (uint64_t)"void _BonjourBrowser_BrowseHandler(DNSServiceRef, DNSServiceFlags, uint32_t, DNSServiceErrorType, const char *, const char *, const char *, void *)", 0x14u, (uint64_t)"Ignoring interface: Nm '%s', ST '%s', IFI %u (%s), %#ll{flags}\n", v16, v17, v18, v19, (uint64_t)a5);
        }
        return;
      }
      if ((v20 & 0x2000000000000) != 0)
      {
        v21 = CFStringCreateWithCString(0, cStr, 0x8000100u);
        if (v21)
        {
          v22 = v21;
          v23 = _SCNetworkInterfaceCreateWithBSDName();
          if (v23)
          {
            v24 = (const void *)v23;
            IsThunderbolt = _SCNetworkInterfaceIsThunderbolt();
            CFRelease(v24);
            CFRelease(v22);
            if (IsThunderbolt)
              goto LABEL_32;
          }
          else
          {
            CFRelease(v22);
          }
        }
      }
    }
    v27 = a8 + 80;
    v26 = *(_QWORD *)(a8 + 80);
    if (!v26)
    {
LABEL_49:
      v32 = 0;
      if ((v14 & 2) == 0 || _BonjourService_Create(a8, a5, a6, a7, v13, cStr, v31, &v32))
        return;
      v29 = v32;
      if (!_BonjourService_StartTXTQuery(v32))
      {
        *(_QWORD *)v27 = v29;
        return;
      }
      v30 = v29;
LABEL_53:
      _BonjourService_Free(v30);
      return;
    }
    while (1)
    {
      v28 = (_QWORD *)v27;
      v27 = v26;
      if (*(_DWORD *)(v26 + 48) == v13
        && !strcasecmp(*(const char **)(v26 + 24), a5)
        && !strcasecmp(*(const char **)(v27 + 32), a6)
        && !strcasecmp(*(const char **)(v27 + 40), a7))
      {
        break;
      }
      v26 = *(_QWORD *)v27;
      if (!*(_QWORD *)v27)
        goto LABEL_49;
    }
    if ((v14 & 2) == 0)
    {
      *v28 = *(_QWORD *)v27;
      _BonjourBrowser_RemoveService(a8, v27, 1);
      v30 = v27;
      goto LABEL_53;
    }
  }
  else if (gLogCategory_BonjourBrowser <= 60
         && (gLogCategory_BonjourBrowser != -1 || _LogCategory_Initialize((uint64_t)&gLogCategory_BonjourBrowser, 0x3Cu)))
  {
    LogPrintF((uint64_t)&gLogCategory_BonjourBrowser, (uint64_t)"void _BonjourBrowser_BrowseHandler(DNSServiceRef, DNSServiceFlags, uint32_t, DNSServiceErrorType, const char *, const char *, const char *, void *)", 0x3Cu, (uint64_t)"### Browse response after stop\n", (uint64_t)a5, (uint64_t)a6, (uint64_t)a7, a8, a9);
  }
}

void _BonjourBrowser_RemoveAWDLServices(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t *v4;

  if (*(_DWORD *)(a1 + 120))
  {
    v3 = a1 + 80;
    v2 = *(_QWORD *)(a1 + 80);
    while (v2)
    {
      v4 = (uint64_t *)v3;
      v3 = v2;
      while (1)
      {
        v2 = *(_QWORD *)v3;
        if (*(_DWORD *)(v3 + 48) != *(_DWORD *)(a1 + 120))
          break;
        *v4 = v2;
        _BonjourBrowser_RemoveService(a1, v3, 1);
        _BonjourService_Free(v3);
        v3 = *v4;
        if (!*v4)
          return;
      }
    }
  }
}

void _BonjourBrowser_IgnoredBrowseHandler(int a1, unsigned __int8 a2, uint64_t a3, uint64_t a4, char *a5, const char *a6, const char *a7, uint64_t a8, uint64_t a9)
{
  unsigned int v16;

  if ((~*(_QWORD *)(a8 + 152) & 0x3000000000000000) == 0)
  {
    v16 = *(_DWORD *)(a8 + 120);
    if (!v16)
    {
      v16 = if_nametoindex("awdl0");
      *(_DWORD *)(a8 + 120) = v16;
    }
    if ((_DWORD)a3)
    {
      if (v16 == (_DWORD)a3)
        _BonjourBrowser_BrowseHandler(v16, a2, a3, a4, a5, a6, a7, a8, a9);
    }
  }
}

_QWORD *_BonjourBrowser_EnsureStoppedDNSSD(_QWORD *a1)
{
  _DNSServiceRef_t *v2;
  _QWORD *v3;
  _QWORD *result;

  v2 = (_DNSServiceRef_t *)a1[3];
  if (v2)
  {
    DNSServiceRefDeallocate(v2);
    a1[3] = 0;
  }
  a1[4] = 0;
  a1[5] = 0;
  a1[6] = 0;
  while (1)
  {
    v3 = (_QWORD *)a1[11];
    if (!v3)
      break;
    a1[11] = *v3;
    _BonjourDevice_Free(v3);
  }
  while (1)
  {
    result = (_QWORD *)a1[10];
    if (!result)
      break;
    a1[10] = *result;
    result[11] = 0;
    _BonjourService_Free((uint64_t)result);
  }
  return result;
}

void _BonjourBrowser_NANEndpointFound(uint64_t a1, void *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  const char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  const char *v15;
  unsigned int v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  void *v21;
  id v22;
  const __CFDictionary *v23;
  void *v24;
  void *v25;
  _QWORD *v26;
  _QWORD *v27;
  size_t v28;
  void *v29;
  uint64_t DeviceID;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  _QWORD *v40;
  int v41;
  const char *v42;
  uint64_t v43;
  uint64_t v44;
  size_t __n;
  uint64_t v46;
  unsigned int v47;
  char v48[64];
  uint64_t v49;

  v49 = *MEMORY[0x1E0C80C00];
  v47 = 0;
  v4 = objc_msgSend((id)objc_msgSend(a2, "serviceType"), "UTF8String");
  if (v4)
  {
    v9 = (const char *)v4;
    v10 = objc_msgSend((id)objc_msgSend(a2, "name"), "UTF8String");
    if (v10)
      v15 = (const char *)v10;
    else
      v15 = "";
    v16 = *(_DWORD *)(a1 + 72);
    if (!v16)
    {
      v16 = if_nametoindex("nan0");
      *(_DWORD *)(a1 + 72) = v16;
    }
    if (gLogCategory_BonjourBrowser <= 20
      && (gLogCategory_BonjourBrowser != -1 || _LogCategory_Initialize((uint64_t)&gLogCategory_BonjourBrowser, 0x14u)))
    {
      LogPrintF((uint64_t)&gLogCategory_BonjourBrowser, (uint64_t)"void _BonjourBrowser_NANEndpointFound(BonjourBrowserRef, CUNANEndpoint *)", 0x14u, (uint64_t)"Bonjour NAN found: %s.%s%s on %u\n", v11, v12, v13, v14, (uint64_t)v15);
    }
    v18 = a1 + 80;
    v17 = *(_QWORD *)(a1 + 80);
    if (v17)
    {
      while (1)
      {
        v18 = v17;
        if (*(_DWORD *)(v17 + 48) == v16
          && !strcasecmp(*(const char **)(v17 + 24), v15)
          && !strcasecmp(*(const char **)(v18 + 32), v9)
          && !strcasecmp(*(const char **)(v18 + 40), "local."))
        {
          break;
        }
        v17 = *(_QWORD *)v18;
        if (!*(_QWORD *)v18)
          goto LABEL_17;
      }
      v46 = v18;
    }
    else
    {
LABEL_17:
      v46 = 0;
      v19 = _BonjourService_Create(a1, v15, v9, "local.", v16, 0, 0, &v46);
      v47 = v19;
      if ((_DWORD)v19)
      {
        if (gLogCategory_BonjourBrowser > 90)
          return;
        v43 = v19;
        if (gLogCategory_BonjourBrowser == -1 && !_LogCategory_Initialize((uint64_t)&gLogCategory_BonjourBrowser, 0x5Au))
          goto LABEL_42;
        v44 = v43;
        v42 = "### BonjourService_Create failed: %#m";
        goto LABEL_63;
      }
      v20 = v46;
      *(_BYTE *)(v46 + 80) = 1;
      *(_DWORD *)(v20 + 84) = 128;
      *(_QWORD *)v18 = v20;
      v18 = v46;
    }
    v21 = *(void **)(v18 + 72);
    v22 = a2;
    *(_QWORD *)(v18 + 72) = a2;

    v23 = (const __CFDictionary *)objc_msgSend(a2, "textInfo");
    if (!v23)
      v23 = (const __CFDictionary *)MEMORY[0x1E0C9AA70];
    __n = 0;
    v24 = TXTRecordCreateWithDictionary(v23, &__n, &v47);
    if (v24)
    {
      v25 = v24;
      v26 = malloc_type_calloc(1uLL, __n + 16, 0x6D1C11AAuLL);
      if (!v26)
      {
LABEL_50:
        v47 = -6728;
        goto LABEL_41;
      }
      v27 = v26;
      v28 = __n;
      v26[1] = __n;
      memcpy(v26 + 2, v25, v28);
      v29 = *(void **)(v18 + 96);
      if (v29)
        free(v29);
      *(_QWORD *)(v18 + 96) = v27;
      DeviceID = _BonjourService_GetDeviceID(v18, v48);
      v47 = DeviceID;
      if ((_DWORD)DeviceID)
      {
        if (gLogCategory_BonjourBrowser <= 90)
        {
          if (gLogCategory_BonjourBrowser == -1)
          {
            if (!_LogCategory_Initialize((uint64_t)&gLogCategory_BonjourBrowser, 0x5Au))
              goto LABEL_41;
            DeviceID = v47;
          }
          LogPrintF((uint64_t)&gLogCategory_BonjourBrowser, (uint64_t)"void _BonjourBrowser_NANEndpointFound(BonjourBrowserRef, CUNANEndpoint *)", 0x5Au, (uint64_t)"### GetDeviceID failed: %#m", v31, v32, v33, v34, DeviceID);
        }
LABEL_41:
        free(v25);
LABEL_42:
        if (!v47)
          return;
        v41 = gLogCategory_BonjourBrowser;
        goto LABEL_44;
      }
      v35 = *(_QWORD *)(v18 + 104);
      if (v35)
      {
        if (!strcasecmp((const char *)(v35 + 16), v48))
        {
LABEL_40:
          _BonjourDevice_UpdateTXTQueries(v35);
          _BonjourBrowser_PostEvent(a1, 1, v35, 0);
          goto LABEL_41;
        }
        if (gLogCategory_BonjourIssues <= 40
          && (gLogCategory_BonjourIssues != -1 || _LogCategory_Initialize((uint64_t)&gLogCategory_BonjourIssues, 0x28u)))
        {
          LogPrintF((uint64_t)&gLogCategory_BonjourIssues, (uint64_t)"void _BonjourBrowser_NANEndpointFound(BonjourBrowserRef, CUNANEndpoint *)", 0x28u, (uint64_t)"Removing and re-adding %s.%s%s for NAN device ID update (%s -> %s)\n", v36, v37, v38, v39, *(_QWORD *)(v18 + 24));
        }
        _BonjourBrowser_RemoveService(a1, v18, 1);
        *(_QWORD *)(v18 + 104) = 0;
      }
      v35 = a1 + 88;
      while (1)
      {
        v35 = *(_QWORD *)v35;
        if (!v35)
          break;
        if (!strcasecmp((const char *)(v35 + 16), v48))
          goto LABEL_39;
      }
      v40 = malloc_type_calloc(1uLL, 0x68uLL, 0x1060040FDB03D26uLL);
      if (!v40)
        goto LABEL_50;
      v35 = (uint64_t)v40;
      v40[1] = a1;
      __strlcpy_chk();
      *(_QWORD *)v35 = *(_QWORD *)(a1 + 88);
      *(_QWORD *)(a1 + 88) = v35;
LABEL_39:
      *(_QWORD *)(v18 + 104) = v35;
      *(_QWORD *)(v18 + 8) = *(_QWORD *)(v35 + 88);
      *(_QWORD *)(v35 + 88) = v18;
      goto LABEL_40;
    }
    if (gLogCategory_BonjourBrowser > 90
      || gLogCategory_BonjourBrowser == -1 && !_LogCategory_Initialize((uint64_t)&gLogCategory_BonjourBrowser, 0x5Au))
    {
      goto LABEL_42;
    }
    v44 = v47;
    v42 = "### TXTRecordCreate failed: %#m";
LABEL_63:
    LogPrintF((uint64_t)&gLogCategory_BonjourBrowser, (uint64_t)"void _BonjourBrowser_NANEndpointFound(BonjourBrowserRef, CUNANEndpoint *)", 0x5Au, (uint64_t)v42, v5, v6, v7, v8, v44);
    goto LABEL_42;
  }
  v47 = -6700;
  v41 = gLogCategory_BonjourBrowser;
  if (gLogCategory_BonjourBrowser <= 60)
  {
    if (gLogCategory_BonjourBrowser != -1 || _LogCategory_Initialize((uint64_t)&gLogCategory_BonjourBrowser, 0x3Cu))
      LogPrintF((uint64_t)&gLogCategory_BonjourBrowser, (uint64_t)"void _BonjourBrowser_NANEndpointFound(BonjourBrowserRef, CUNANEndpoint *)", 0x3Cu, (uint64_t)"### Bonjour NAN found without service type: %@\n", v5, v6, v7, v8, (uint64_t)a2);
    goto LABEL_42;
  }
LABEL_44:
  if (v41 <= 90 && (v41 != -1 || _LogCategory_Initialize((uint64_t)&gLogCategory_BonjourBrowser, 0x5Au)))
    LogPrintF((uint64_t)&gLogCategory_BonjourBrowser, (uint64_t)"void _BonjourBrowser_NANEndpointFound(BonjourBrowserRef, CUNANEndpoint *)", 0x5Au, (uint64_t)"### Bonjour NAN found failed: %@, %#m\n", v5, v6, v7, v8, (uint64_t)a2);
}

uint64_t _BonjourService_Create(uint64_t a1, const char *a2, const char *a3, const char *a4, unsigned int a5, _BYTE *a6, int a7, uint64_t *a8)
{
  int v9;
  _QWORD *v16;
  uint64_t v17;
  char *v18;
  char *v19;
  char *v20;
  uint64_t result;
  int v22;

  v9 = a7;
  v22 = a7;
  v16 = malloc_type_calloc(1uLL, 0x70uLL, 0x10B0040FB0F965DuLL);
  if (!v16)
    return 4294960568;
  v17 = (uint64_t)v16;
  v16[2] = a1;
  v18 = strdup(a2);
  *(_QWORD *)(v17 + 24) = v18;
  if (v18)
  {
    v19 = strdup(a3);
    *(_QWORD *)(v17 + 32) = v19;
    if (v19)
    {
      v20 = strdup(a4);
      *(_QWORD *)(v17 + 40) = v20;
      if (v20)
      {
        *(_DWORD *)(v17 + 48) = a5;
        if (a6 && *a6)
        {
          __strlcpy_chk();
          if (v9)
            goto LABEL_11;
        }
        else
        {
          if_indextoname(a5, (char *)(v17 + 52));
          if (v9)
            goto LABEL_11;
        }
        SocketGetInterfaceInfo(-1, (char *)(v17 + 52), 0, 0, 0, 0, 0, 0, 0, (uint64_t)&v22);
        v9 = v22;
LABEL_11:
        *(_DWORD *)(v17 + 84) = v9;
        if (v9 > 63)
        {
          if (v9 != 128 && v9 != 64)
            goto LABEL_19;
        }
        else
        {
          if (v9 == 2)
          {
LABEL_18:
            *(_BYTE *)(v17 + 70) = 1;
LABEL_19:
            result = 0;
            *a8 = v17;
            return result;
          }
          if (v9 != 4)
            goto LABEL_19;
        }
        *(_BYTE *)(v17 + 69) = 1;
        goto LABEL_18;
      }
    }
  }
  _BonjourService_Free(v17);
  return 4294901757;
}

uint64_t _BonjourService_GetDeviceID(uint64_t a1, void *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  const char *v7;
  char *v8;
  char *v9;
  uint8_t v10;
  uint64_t result;
  uint64_t v12;
  char *v13;
  char *v14;
  unint64_t v15;
  uint64_t v16;
  char v17;
  char *ValuePtr;
  uint64_t v19;
  char *v20;
  unint64_t v21;
  uint64_t v22;
  char v23;
  unsigned __int8 v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  char *v28;
  unint64_t v29;
  uint64_t v30;
  char v31;
  char *v32;
  char *v33;
  uint64_t v34;
  char *v35;
  unint64_t v36;
  uint64_t v37;
  char v38;
  uint64_t v39;
  char *v40;
  unint64_t v41;
  uint64_t v42;
  char v43;
  uint64_t v44;
  char *v45;
  unint64_t v46;
  uint64_t v47;
  char v48;
  unsigned __int8 *v49;
  uint64_t v50;
  uint64_t v51;
  char *v52;
  char *v53;
  unint64_t v54;
  uint64_t v55;
  char v56;
  void *v57;
  const char *v58;
  size_t v59;
  uint64_t v60;
  uint64_t v61;
  unsigned __int8 *v62;
  uint8_t v63[6];
  uint8_t valueLen;
  unsigned __int8 v65[8];
  char __s[256];
  uint64_t v67;

  v67 = *MEMORY[0x1E0C80C00];
  valueLen = 0;
  v3 = *(_QWORD *)(a1 + 96);
  v4 = *(_QWORD *)(v3 + 8);
  v5 = *(_QWORD *)(*(_QWORD *)(a1 + 16) + 152);
  if ((v5 & 0x800000000000) != 0
    || (v7 = *(const char **)(a1 + 32), !strcasecmp(v7, "_airplay._tcp."))
    || !strcasecmp(v7, "_airplay-alt._tcp.")
    || !strcasecmp(v7, "_mfi-config._tcp."))
  {
    ValuePtr = (char *)TXTRecordGetValuePtr(v4, (const void *)(v3 + 16), "deviceid", &valueLen);
    if (ValuePtr)
    {
      result = TextToHardwareAddress(ValuePtr, valueLen, 6, v63);
      if ((_DWORD)result)
        return result;
      v19 = 0;
      v13 = __s;
      do
      {
        if (v13 == __s)
        {
          v20 = __s;
        }
        else
        {
          *v13 = 58;
          v20 = v13 + 1;
        }
        v21 = v63[v19];
        v22 = v19 + 1;
        *v20 = a0123456789abcd_0[v21 >> 4];
        v23 = a0123456789abcd_0[v21 & 0xF];
        v13 = v20 + 2;
        v20[1] = v23;
        v19 = v22;
      }
      while (v22 != 6);
      goto LABEL_28;
    }
    return 4294960569;
  }
  if ((v5 & 0x800000000000000) != 0 || !strcasecmp(v7, "_hap._tcp."))
  {
    v26 = (char *)TXTRecordGetValuePtr(v4, (const void *)(v3 + 16), "id", &valueLen);
    if (!v26)
      return 4294960569;
    result = TextToHardwareAddress(v26, valueLen, 6, v63);
    if (!(_DWORD)result)
    {
      v27 = 0;
      v13 = __s;
      do
      {
        if (v13 == __s)
        {
          v28 = __s;
        }
        else
        {
          *v13 = 58;
          v28 = v13 + 1;
        }
        v29 = v63[v27];
        v30 = v27 + 1;
        *v28 = a0123456789abcd_0[v29 >> 4];
        v31 = a0123456789abcd_0[v29 & 0xF];
        v13 = v28 + 2;
        v28[1] = v31;
        v27 = v30;
      }
      while (v30 != 6);
      goto LABEL_28;
    }
  }
  else
  {
    if (!strcasecmp(v7, "_airport._tcp."))
    {
      v60 = 0;
      v61 = 0;
      if (!(_WORD)v4)
        return 4294960553;
      valueLen = 0;
      v62 = (unsigned __int8 *)(v3 + 17);
      while (!ParseCommaSeparatedNameValuePair(v62, v3 + 17 + (unsigned __int16)v4 - 1, v65, 8, &v61, __s, &v60, &v62))
      {
        if (!strnicmpx(v65, v61, "waMA"))
        {
          valueLen = v60;
          result = TextToHardwareAddress(__s, v60, 6, v63);
          if ((_DWORD)result)
            return result;
          v39 = 0;
          v13 = __s;
          do
          {
            if (v13 == __s)
            {
              v40 = __s;
            }
            else
            {
              *v13 = 58;
              v40 = v13 + 1;
            }
            v41 = v63[v39];
            v42 = v39 + 1;
            *v40 = a0123456789abcd_0[v41 >> 4];
            v43 = a0123456789abcd_0[v41 & 0xF];
            v13 = v40 + 2;
            v40[1] = v43;
            v39 = v42;
          }
          while (v42 != 6);
          goto LABEL_28;
        }
      }
      return 4294960569;
    }
    if (!strcasecmp(v7, "_raop._tcp.") || !strcasecmp(v7, "_airplay-p2p._tcp."))
    {
      v32 = *(char **)(a1 + 24);
      v33 = strchr(v32, 64);
      if (!v33)
        return 4294960554;
      valueLen = (_BYTE)v33 - (_BYTE)v32;
      result = TextToHardwareAddress(v32, ((_BYTE)v33 - (_BYTE)v32), 6, v63);
      if (!(_DWORD)result)
      {
        v34 = 0;
        v13 = __s;
        do
        {
          if (v13 == __s)
          {
            v35 = __s;
          }
          else
          {
            *v13 = 58;
            v35 = v13 + 1;
          }
          v36 = v63[v34];
          v37 = v34 + 1;
          *v35 = a0123456789abcd_0[v36 >> 4];
          v38 = a0123456789abcd_0[v36 & 0xF];
          v13 = v35 + 2;
          v35[1] = v38;
          v34 = v37;
        }
        while (v37 != 6);
        goto LABEL_28;
      }
    }
    else
    {
      if (strcasecmp(v7, "_airdrop._tcp."))
      {
        if (!strcasecmp(v7, "_googlecast._tcp."))
        {
          v49 = (unsigned __int8 *)TXTRecordGetValuePtr(v4, (const void *)(v3 + 16), "id", &valueLen);
          if (v49)
          {
            v50 = SipHash(qword_18D51DFB3, v49, valueLen);
            v51 = 0;
            LOBYTE(v62) = BYTE5(v50);
            BYTE1(v62) = BYTE4(v50);
            BYTE2(v62) = BYTE3(v50);
            BYTE3(v62) = BYTE2(v50);
            BYTE4(v62) = BYTE1(v50);
            BYTE5(v62) = v50;
            v52 = __s;
            do
            {
              if (v52 == __s)
              {
                v53 = __s;
              }
              else
              {
                *v52 = 58;
                v53 = v52 + 1;
              }
              v54 = v63[v51 - 7];
              v55 = v51 + 1;
              *v53 = a0123456789abcd_0[v54 >> 4];
              v56 = a0123456789abcd_0[v54 & 0xF];
              v52 = v53 + 2;
              v53[1] = v56;
              v51 = v55;
            }
            while (v55 != 6);
            *v52 = 0;
LABEL_29:
            v24 = strlen(__s);
            if ((v24 & 0xC0) == 0)
            {
              v25 = v24;
              memcpy(a2, __s, v24);
              result = 0;
              *((_BYTE *)a2 + v25) = 0;
              return result;
            }
            return 4294960553;
          }
        }
        else
        {
          v8 = (char *)TXTRecordGetValuePtr(v4, (const void *)(v3 + 16), "rpBA", &valueLen);
          if (v8)
          {
            v9 = v8;
            v10 = valueLen;
LABEL_14:
            result = TextToHardwareAddress(v9, v10, 6, v63);
            if ((_DWORD)result)
              return result;
            v12 = 0;
            v13 = __s;
            do
            {
              if (v13 == __s)
              {
                v14 = __s;
              }
              else
              {
                *v13 = 58;
                v14 = v13 + 1;
              }
              v15 = v63[v12];
              v16 = v12 + 1;
              *v14 = a0123456789abcd_0[v15 >> 4];
              v17 = a0123456789abcd_0[v15 & 0xF];
              v13 = v14 + 2;
              v14[1] = v17;
              v12 = v16;
            }
            while (v16 != 6);
            goto LABEL_28;
          }
          v57 = *(void **)(a1 + 72);
          if (v57)
          {
            v58 = (const char *)objc_msgSend((id)objc_msgSend(v57, "identifier"), "UTF8String");
            if (v58)
            {
              v9 = (char *)v58;
              v59 = strlen(v58);
              v10 = TruncatedUTF8Length(v9, v59, 0xFFuLL);
              valueLen = v10;
              goto LABEL_14;
            }
          }
        }
        return 4294960569;
      }
      result = TextToHardwareAddress(*(char **)(a1 + 24), 0xFFFFFFFFFFFFFFFFLL, 6, v63);
      if (!(_DWORD)result)
      {
        v44 = 0;
        v13 = __s;
        do
        {
          if (v13 == __s)
          {
            v45 = __s;
          }
          else
          {
            *v13 = 58;
            v45 = v13 + 1;
          }
          v46 = v63[v44];
          v47 = v44 + 1;
          *v45 = a0123456789abcd_0[v46 >> 4];
          v48 = a0123456789abcd_0[v46 & 0xF];
          v13 = v45 + 2;
          v45[1] = v48;
          v44 = v47;
        }
        while (v47 != 6);
LABEL_28:
        *v13 = 0;
        goto LABEL_29;
      }
    }
  }
  return result;
}

void _BonjourBrowser_RemoveService(uint64_t a1, uint64_t a2, int a3)
{
  _QWORD *v3;
  uint64_t v4;
  _QWORD *v6;
  uint64_t v7;
  _QWORD *v8;
  _QWORD *v9;

  v3 = *(_QWORD **)(a2 + 104);
  if (v3)
  {
    v4 = v3[11];
    if (v4)
    {
      v6 = v3 + 11;
      if (v4 != a2)
      {
        while (1)
        {
          v7 = v4;
          v4 = *(_QWORD *)(v4 + 8);
          if (!v4)
            goto LABEL_8;
          if (v4 == a2)
          {
            v6 = (_QWORD *)(v7 + 8);
            break;
          }
        }
      }
      *v6 = *(_QWORD *)(a2 + 8);
      if (v3[11])
      {
LABEL_8:
        _BonjourBrowser_PostEvent(a1, 1, (uint64_t)v3, a2);
        if (a3)
          _BonjourDevice_UpdateTXTQueries((uint64_t)v3);
        return;
      }
    }
    v8 = (_QWORD *)(a1 + 88);
    while (1)
    {
      v9 = v8;
      v8 = (_QWORD *)*v8;
      if (!v8)
        break;
      if (v8 == v3)
      {
        *v9 = *v3;
        break;
      }
    }
    _BonjourBrowser_PostEvent(a1, 2, (uint64_t)v3, a2);
    _BonjourDevice_Free(v3);
  }
}

void _BonjourDevice_UpdateTXTQueries(uint64_t a1)
{
  uint64_t v2;
  uint64_t BestService;
  uint64_t v4;
  uint64_t v5;
  _BOOL4 v6;
  _DNSServiceRef_t *v7;
  const void *v8;
  uint16_t v9;
  char *ValuePtr;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unsigned __int8 *v16;
  uint64_t v17;
  uint8_t valueLen;

  v2 = *(_QWORD *)(a1 + 88);
  BestService = _BonjourDevice_GetBestService(v2);
  if (BestService)
  {
    v4 = BestService;
    if ((*(_DWORD *)(a1 + 96) & 0x80000000) != 0)
    {
      v5 = *(_QWORD *)(BestService + 96);
      if (v5)
      {
        v6 = 0;
        if (!strcasecmp(*(const char **)(BestService + 32), "_raop._tcp."))
        {
          if ((valueLen = 0,
                v17 = 0,
                v8 = (const void *)(v5 + 16),
                v9 = *(_WORD *)(v5 + 8),
                (ValuePtr = (char *)TXTRecordGetValuePtr(v9, v8, "ft", &valueLen)) != 0)
            && SNScanF(ValuePtr, valueLen, "%llx", v11, v12, v13, v14, v15, (int)&v17) == 1
            && (v17 & 0x40000000) != 0
            || (v16 = (unsigned __int8 *)TXTRecordGetValuePtr(v9, v8, "am", &valueLen)) != 0
            && !strnicmp_prefix(v16, valueLen, "AppleTV"))
          {
            v6 = 1;
          }
        }
        *(_DWORD *)(a1 + 96) = v6;
        v2 = *(_QWORD *)(a1 + 88);
      }
    }
    for (; v2; v2 = *(_QWORD *)(v2 + 8))
    {
      if (v2 != v4 || *(int *)(a1 + 96) >= 1)
      {
        v7 = *(_DNSServiceRef_t **)(v2 + 88);
        if (v7)
        {
          DNSServiceRefDeallocate(v7);
          *(_QWORD *)(v2 + 88) = 0;
        }
      }
    }
    if (!*(_BYTE *)(v4 + 80) && *(int *)(a1 + 96) <= 0 && !*(_QWORD *)(v4 + 88))
      _BonjourService_StartTXTQuery(v4);
  }
}

void _BonjourBrowser_PostEvent(uint64_t a1, int a2, uint64_t a3, uint64_t a4)
{
  CFMutableDictionaryRef MutableCopy;
  __CFDictionary *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  const __CFDictionary *v13;
  const void *v14;
  __CFDictionary *Dictionary;
  __CFDictionary *v16;
  CFArrayRef v17;
  const void *v18;
  void *v19;
  void *v20;
  NSObject *v21;
  _OWORD *v22;
  void *v23;
  unsigned int v24;
  unsigned int v25;
  void *values[6];
  int v27;
  uint64_t v28;

  MutableCopy = (CFMutableDictionaryRef)a3;
  v28 = *MEMORY[0x1E0C80C00];
  if (*(_QWORD *)(a1 + 168) || *(_QWORD *)(a1 + 184))
  {
    v25 = 0;
    if (!a3)
    {
      v13 = 0;
      goto LABEL_14;
    }
    v8 = _BonjourDevice_CreateDictionary(a3, &v25);
    if (v8)
    {
      v13 = v8;
      v14 = (const void *)*((_QWORD *)MutableCopy + 10);
      if (v14)
        CFRelease(v14);
      *((_QWORD *)MutableCopy + 10) = v13;
      if (a4)
      {
        MutableCopy = CFDictionaryCreateMutableCopy(0, 0, v13);
        if (!MutableCopy)
          goto LABEL_28;
        Dictionary = _BonjourService_CreateDictionary(a4, (int *)&v25);
        if (!Dictionary)
          goto LABEL_25;
        v16 = Dictionary;
        values[0] = Dictionary;
        v17 = CFArrayCreate(0, (const void **)values, 1, MEMORY[0x1E0C9B378]);
        CFRelease(v16);
        if (!v17)
          goto LABEL_28;
        CFDictionarySetValue(MutableCopy, CFSTR("removedServices"), v17);
        CFRelease(v17);
        v13 = MutableCopy;
      }
      else
      {
        MutableCopy = 0;
      }
LABEL_14:
      v18 = *(const void **)(a1 + 184);
      if (v18)
      {
        v19 = _Block_copy(v18);
        if (!v19)
        {
          v24 = -6700;
          goto LABEL_24;
        }
        v20 = v19;
        if (v13)
          CFRetain(v13);
        v21 = *(NSObject **)(a1 + 160);
        values[0] = (void *)MEMORY[0x1E0C809B0];
        values[1] = (void *)3221225472;
        values[2] = ___BonjourBrowser_PostEventEx_block_invoke;
        values[3] = &unk_1E25DBAE8;
        v27 = a2;
        values[4] = v20;
        values[5] = v13;
        dispatch_async(v21, values);
        goto LABEL_23;
      }
      v22 = malloc_type_calloc(1uLL, 0x20uLL, 0x10E0040718843B5uLL);
      if (v22)
      {
        v23 = v22;
        *((_DWORD *)v22 + 4) = a2;
        *v22 = *(_OWORD *)(a1 + 168);
        *((_QWORD *)v22 + 3) = v13;
        if (v13)
          CFRetain(v13);
        dispatch_async_f(*(dispatch_queue_t *)(a1 + 160), v23, (dispatch_function_t)_BonjourBrowser_PostEventOnEventQueue);
LABEL_23:
        v24 = 0;
LABEL_24:
        v25 = v24;
LABEL_25:
        if (MutableCopy)
          CFRelease(MutableCopy);
        return;
      }
LABEL_28:
      v24 = -6728;
      goto LABEL_24;
    }
    if (gLogCategory_BonjourBrowser <= 90
      && (gLogCategory_BonjourBrowser != -1 || _LogCategory_Initialize((uint64_t)&gLogCategory_BonjourBrowser, 0x5Au)))
    {
      LogPrintF((uint64_t)&gLogCategory_BonjourBrowser, (uint64_t)"OSStatus _BonjourBrowser_PostEvent(BonjourBrowserRef, BonjourBrowserEventType, BonjourDeviceRef, BonjourServiceRef)", 0x5Au, (uint64_t)"### CreateDictionary failed: %#m", v9, v10, v11, v12, v25);
    }
  }
}

__CFDictionary *_BonjourDevice_CreateDictionary(uint64_t a1, _DWORD *a2)
{
  uint64_t BestService;
  uint64_t v5;
  uint64_t v6;
  CFIndex v7;
  __CFDictionary *Mutable;
  const char *v9;
  int v10;
  char *v11;
  char *v12;
  char *v13;
  const __CFDictionary *v14;
  __CFDictionary *MutableCopy;
  char *v16;
  size_t v17;
  size_t v18;
  double Current;
  unsigned __int8 *v20;
  unint64_t v21;
  UInt8 *BytesPtr;
  unsigned int Length;
  uint64_t v24;
  unsigned int v25;
  CFMutableArrayRef v26;
  char v27;
  const CFArrayCallBacks *v28;
  int v29;
  __CFDictionary *v30;
  __CFDictionary *v31;
  int v33;
  int v34;
  uint8_t valueSize[8];
  uint64_t v36;
  unsigned __int8 *v37;
  int v38;
  char value[256];
  char key[8];
  _BYTE buffer[256];
  TXTRecordRef txtRecord;
  char __s[1073];
  uint64_t v44;

  v44 = *MEMORY[0x1E0C80C00];
  v38 = 0;
  BestService = _BonjourDevice_GetBestService(*(_QWORD *)(a1 + 88));
  if (!BestService || (v5 = BestService, (v6 = *(_QWORD *)(BestService + 96)) == 0))
  {
    v14 = *(const __CFDictionary **)(a1 + 80);
    if (!v14)
    {
      Mutable = 0;
      v34 = -6745;
      goto LABEL_49;
    }
    MutableCopy = CFDictionaryCreateMutableCopy(0, 0, v14);
    Mutable = MutableCopy;
    if (MutableCopy)
    {
      CFDictionaryRemoveValue(MutableCopy, CFSTR("services"));
      goto LABEL_35;
    }
LABEL_47:
    v34 = -6728;
LABEL_49:
    v38 = v34;
    goto LABEL_36;
  }
  v7 = *(_QWORD *)(v6 + 8);
  Mutable = CFDictionaryCreateMutable(0, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  if (!Mutable)
    goto LABEL_47;
  v9 = *(const char **)(v5 + 32);
  if (!strcasecmp(v9, "_raop._tcp.") || !strcasecmp(v9, "_airplay-p2p._tcp."))
  {
    v11 = *(char **)(v5 + 24);
    v16 = strchr(v11, 64);
    if (v16)
      v11 = v16 + 1;
  }
  else
  {
    v10 = strcasecmp(v9, "_airplay._tcp.");
    v11 = *(char **)(v5 + 24);
    if (!v10)
    {
      v12 = strchr(*(char **)(v5 + 24), 64);
      if (v12)
      {
        v13 = v12;
        if (TextToHardwareAddress(v11, ((_BYTE)v12 - (_BYTE)v11), 6, __s))
          v11 = *(char **)(v5 + 24);
        else
          v11 = v13 + 1;
      }
    }
  }
  v17 = strlen(v11);
  CFDictionarySetCString(Mutable, CFSTR("name"), v11, v17);
  CFDictionarySetCString(Mutable, CFSTR("deviceID"), (const char *)(a1 + 16), -1);
  v38 = DNSServiceConstructFullNameEx(__s, *(_QWORD *)(v5 + 24), *(char **)(v5 + 32), *(unsigned __int8 **)(v5 + 40));
  if (!v38)
  {
    v18 = strlen(__s);
    snprintf(&__s[v18], 1073 - v18, "%%%u", *(_DWORD *)(v5 + 48));
    CFDictionarySetCString(Mutable, CFSTR("dnsName"), __s, -1);
  }
  Current = CFAbsoluteTimeGetCurrent();
  CFDictionarySetDouble(Mutable, CFSTR("lastSeen"), Current);
  CFDictionarySetCString(Mutable, CFSTR("serviceType"), *(const char **)(v5 + 32), -1);
  if (strcasecmp(*(const char **)(v5 + 32), "_airport._tcp."))
  {
    CFDictionarySetData(Mutable, CFSTR("txt"), (UInt8 *)(v6 + 16), v7);
LABEL_24:
    v24 = *(_QWORD *)(a1 + 88);
    if (v24)
    {
      v25 = 0;
      v26 = 0;
      v27 = 1;
      v28 = (const CFArrayCallBacks *)MEMORY[0x1E0C9B378];
      do
      {
        if (!*(_BYTE *)(v24 + 69))
          v27 = 0;
        v29 = *(_DWORD *)(v24 + 84);
        if (!v26)
        {
          v26 = CFArrayCreateMutable(0, 0, v28);
          if (!v26)
          {
            v33 = -6728;
            goto LABEL_45;
          }
        }
        v30 = _BonjourService_CreateDictionary(v24, &v38);
        if (!v30)
        {
          CFRelease(v26);
          goto LABEL_46;
        }
        v31 = v30;
        v25 |= v29;
        CFArrayAppendValue(v26, v30);
        CFRelease(v31);
        v24 = *(_QWORD *)(v24 + 8);
      }
      while (v24);
      CFDictionarySetValue(Mutable, CFSTR("services"), v26);
      CFRelease(v26);
      if (v27)
        goto LABEL_40;
      if (!v25)
        goto LABEL_35;
    }
    else
    {
      v25 = 0;
LABEL_40:
      CFDictionarySetValue(Mutable, CFSTR("p2pOnly"), (const void *)*MEMORY[0x1E0C9AE50]);
      if (!v25)
        goto LABEL_35;
    }
    CFDictionarySetInt64(Mutable, CFSTR("TrTy"), v25);
LABEL_35:
    v38 = 0;
    goto LABEL_36;
  }
  txtRecord = 0uLL;
  *(_QWORD *)valueSize = 0;
  v36 = 0;
  if (v7)
  {
    TXTRecordCreate(&txtRecord, 0x100u, buffer);
    v20 = (unsigned __int8 *)(v6 + 17);
    v37 = (unsigned __int8 *)(v6 + 17);
    v21 = v6 + v7 + 16;
    while (!ParseCommaSeparatedNameValuePair(v20, v21, key, 7, &v36, value, valueSize, &v37))
    {
      key[v36] = 0;
      TXTRecordSetValue(&txtRecord, key, valueSize[0], value);
      v20 = v37;
    }
    BytesPtr = (UInt8 *)TXTRecordGetBytesPtr(&txtRecord);
    Length = TXTRecordGetLength(&txtRecord);
    CFDictionarySetData(Mutable, CFSTR("txt"), BytesPtr, Length);
    TXTRecordDeallocate(&txtRecord);
    goto LABEL_24;
  }
  v33 = -6743;
LABEL_45:
  v38 = v33;
LABEL_46:
  CFRelease(Mutable);
  Mutable = 0;
LABEL_36:
  if (a2)
    *a2 = v38;
  return Mutable;
}

__CFDictionary *_BonjourService_CreateDictionary(uint64_t a1, int *a2)
{
  __CFDictionary *Mutable;
  size_t v5;
  const void *v6;
  const void **v7;
  int v8;
  char __s[1073];
  uint64_t v11;

  v11 = *MEMORY[0x1E0C80C00];
  Mutable = CFDictionaryCreateMutable(0, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  if (!Mutable)
  {
    v8 = -6728;
    if (!a2)
      return Mutable;
    goto LABEL_11;
  }
  if (!DNSServiceConstructFullNameEx(__s, *(_QWORD *)(a1 + 24), *(char **)(a1 + 32), *(unsigned __int8 **)(a1 + 40)))
  {
    v5 = strlen(__s);
    snprintf(&__s[v5], 1073 - v5, "%%%u", *(_DWORD *)(a1 + 48));
    CFDictionarySetCString(Mutable, CFSTR("dnsName"), __s, -1);
  }
  CFDictionarySetCString(Mutable, CFSTR("domain"), *(const char **)(a1 + 40), -1);
  CFDictionarySetInt64(Mutable, CFSTR("ifindex"), *(unsigned int *)(a1 + 48));
  CFDictionarySetCString(Mutable, CFSTR("ifname"), (const char *)(a1 + 52), -1);
  v6 = *(const void **)(a1 + 72);
  if (v6)
    CFDictionarySetValue(Mutable, CFSTR("nanEP"), v6);
  v7 = (const void **)MEMORY[0x1E0C9AE50];
  if (*(_BYTE *)(a1 + 69))
    CFDictionarySetValue(Mutable, CFSTR("p2p"), (const void *)*MEMORY[0x1E0C9AE50]);
  CFDictionarySetCString(Mutable, CFSTR("rawName"), *(const char **)(a1 + 24), -1);
  CFDictionarySetInt64(Mutable, CFSTR("transportType"), *(unsigned int *)(a1 + 84));
  v8 = *(unsigned __int8 *)(a1 + 70);
  if (*(_BYTE *)(a1 + 70))
  {
    CFDictionarySetValue(Mutable, CFSTR("wifi"), *v7);
    v8 = 0;
  }
  if (a2)
LABEL_11:
    *a2 = v8;
  return Mutable;
}

void _BonjourBrowser_PostEventOnEventQueue(_QWORD *a1)
{
  const void *v2;

  ((void (*)(_QWORD, _QWORD, _QWORD))*a1)(*((unsigned int *)a1 + 4), a1[3], a1[1]);
  v2 = (const void *)a1[3];
  if (v2)
    CFRelease(v2);
  free(a1);
}

uint64_t _BonjourDevice_GetBestService(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  if (!a1)
    return a1;
  v2 = 0;
  v3 = 0;
  v4 = a1;
  do
  {
    if (!strcmp(*(const char **)(v4 + 40), "local."))
    {
      if (!*(_BYTE *)(v4 + 70))
        return v4;
      if (!v3)
      {
        if (*(_BYTE *)(v4 + 69))
          v3 = 0;
        else
          v3 = v4;
      }
      if (!v2)
        v2 = v4;
    }
    v4 = *(_QWORD *)(v4 + 8);
  }
  while (v4);
  if (!v3)
  {
    v3 = v2;
    if (!v2)
      return a1;
  }
  return v3;
}

uint64_t _BonjourService_StartTXTQuery(uint64_t a1)
{
  uint64_t result;
  DNSServiceRef sdRef;
  char fullName[1009];
  uint64_t v5;

  v5 = *MEMORY[0x1E0C80C00];
  result = DNSServiceConstructFullName(fullName, *(const char *const *)(a1 + 24), *(const char *const *)(a1 + 32), *(const char *const *)(a1 + 40));
  if (!(_DWORD)result)
  {
    sdRef = *(DNSServiceRef *)(*(_QWORD *)(a1 + 16) + 24);
    result = DNSServiceQueryRecord(&sdRef, 0x404000u, *(_DWORD *)(a1 + 48), fullName, 0x10u, 1u, (DNSServiceQueryRecordReply)_BonjourService_TXTHandler, (void *)a1);
    if (!(_DWORD)result)
      *(_QWORD *)(a1 + 88) = sdRef;
  }
  return result;
}

void _BonjourService_TXTHandler(int a1, unsigned __int8 a2, int a3, int a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t __n, void *__s1, uint64_t a10, _QWORD *a11)
{
  uint64_t v11;
  unsigned int v12;
  unsigned int v13;
  const char *v14;
  _QWORD *v15;
  _QWORD **v16;
  _QWORD *v17;
  _QWORD *v18;
  int v19;
  _QWORD *v20;
  uint64_t v21;
  _QWORD *v22;
  _QWORD *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  _DWORD *v29;
  char v30[64];
  uint64_t v31;

  v31 = *MEMORY[0x1E0C80C00];
  v11 = a11[2];
  if (a4)
  {
    if (gLogCategory_BonjourBrowser <= 60
      && (gLogCategory_BonjourBrowser != -1 || _LogCategory_Initialize((uint64_t)&gLogCategory_BonjourBrowser, 0x3Cu)))
    {
      LogPrintF((uint64_t)&gLogCategory_BonjourBrowser, (uint64_t)"void _BonjourService_TXTHandler(DNSServiceRef, DNSServiceFlags, uint32_t, DNSServiceErrorType, const char *, uint16_t, uint16_t, uint16_t, const void *, uint32_t, void *)", 0x3Cu, (uint64_t)"### Browser for %s TXT error: %#m\n", a5, a6, a7, __n, *(_QWORD *)(v11 + 128));
    }
  }
  else
  {
    if (*(_BYTE *)(v11 + 96))
    {
      v12 = __n;
      v13 = a2;
      if (gLogCategory_BonjourBrowser <= 20
        && (gLogCategory_BonjourBrowser != -1 || _LogCategory_Initialize((uint64_t)&gLogCategory_BonjourBrowser, 0x14u)))
      {
        v14 = "Add";
        if (((v13 >> 1) & 1) == 0)
          v14 = "Rmv";
        LogPrintF((uint64_t)&gLogCategory_BonjourBrowser, (uint64_t)"void _BonjourService_TXTHandler(DNSServiceRef, DNSServiceFlags, uint32_t, DNSServiceErrorType, const char *, uint16_t, uint16_t, uint16_t, const void *, uint32_t, void *)", 0x14u, (uint64_t)"Bonjour TXT %s %s on %u\n", a5, a6, a7, __n, (uint64_t)v14);
      }
      v16 = (_QWORD **)(a11 + 12);
      v15 = (_QWORD *)a11[12];
      if ((v13 & 2) == 0)
      {
        if (v15)
        {
          v17 = a11 + 12;
          while (1)
          {
            v18 = v15;
            if (v15[1] == v12 && !memcmp(__s1, v15 + 2, v12))
              break;
            v15 = (_QWORD *)*v15;
            v17 = v18;
            if (!*v18)
              goto LABEL_15;
          }
          *v17 = *v15;
          free(v15);
        }
        else
        {
LABEL_15:
          if (gLogCategory_BonjourBrowser <= 40
            && (gLogCategory_BonjourBrowser != -1
             || _LogCategory_Initialize((uint64_t)&gLogCategory_BonjourBrowser, 0x28u)))
          {
            LogPrintF((uint64_t)&gLogCategory_BonjourBrowser, (uint64_t)"void _BonjourService_RemoveRData(BonjourServiceRef, const void *, size_t)", 0x28u, (uint64_t)"Removed RData missing for %s.%s%s %%%u\n%1.1H\n", a5, a6, a7, __n, a11[3]);
          }
        }
        goto LABEL_25;
      }
      if (!v15)
        goto LABEL_42;
      v19 = gLogCategory_BonjourIssues;
      if (gLogCategory_BonjourIssues > 40)
      {
LABEL_39:
        while (v15[1] != v12 || memcmp(__s1, v15 + 2, v12))
        {
          v15 = (_QWORD *)*v15;
          if (!v15)
            goto LABEL_42;
        }
        goto LABEL_25;
      }
      if (gLogCategory_BonjourIssues != -1)
        goto LABEL_73;
      if (!_LogCategory_Initialize((uint64_t)&gLogCategory_BonjourIssues, 0x28u))
        goto LABEL_38;
      v19 = gLogCategory_BonjourIssues;
      if (gLogCategory_BonjourIssues <= 40)
      {
LABEL_73:
        if (v19 != -1 || _LogCategory_Initialize((uint64_t)&gLogCategory_BonjourIssues, 0x28u))
          LogPrintF((uint64_t)&gLogCategory_BonjourIssues, (uint64_t)"OSStatus _BonjourService_AddRData(BonjourServiceRef, const void *, size_t)", 0x28u, (uint64_t)"Add without remove new:   %s.%s%s%%%u: %#{txt}\n", a5, a6, a7, __n, a11[3]);
      }
      v20 = *v16;
      if (!*v16)
        goto LABEL_42;
      v21 = 1;
      do
      {
        if (gLogCategory_BonjourIssues <= 40
          && (gLogCategory_BonjourIssues != -1 || _LogCategory_Initialize((uint64_t)&gLogCategory_BonjourIssues, 0x28u)))
        {
          LogPrintF((uint64_t)&gLogCategory_BonjourIssues, (uint64_t)"OSStatus _BonjourService_AddRData(BonjourServiceRef, const void *, size_t)", 0x28u, (uint64_t)"Add without remove old %d: %s.%s%s%%%u: %#{txt}\n", a5, a6, a7, __n, v21);
        }
        v21 = (v21 + 1);
        v20 = (_QWORD *)*v20;
      }
      while (v20);
LABEL_38:
      v15 = *v16;
      if (*v16)
        goto LABEL_39;
LABEL_42:
      v22 = malloc_type_calloc(1uLL, v12 + 16, 0x592042F3uLL);
      if (v22)
      {
        v23 = v22;
        *v22 = *v16;
        v22[1] = v12;
        memcpy(v22 + 2, __s1, v12);
        *v16 = v23;
        goto LABEL_44;
      }
LABEL_25:
      if (!*v16)
        return;
LABEL_44:
      if (_BonjourService_GetDeviceID((uint64_t)a11, v30))
        return;
      v24 = a11[13];
      if (v24)
      {
        if (!strcasecmp((const char *)(v24 + 16), v30))
        {
LABEL_59:
          _BonjourDevice_UpdateTXTQueries(v24);
          _BonjourBrowser_PostEvent(v11, 1, v24, 0);
          return;
        }
        if (gLogCategory_BonjourIssues <= 40
          && (gLogCategory_BonjourIssues != -1 || _LogCategory_Initialize((uint64_t)&gLogCategory_BonjourIssues, 0x28u)))
        {
          LogPrintF((uint64_t)&gLogCategory_BonjourIssues, (uint64_t)"void _BonjourService_TXTHandler(DNSServiceRef, DNSServiceFlags, uint32_t, DNSServiceErrorType, const char *, uint16_t, uint16_t, uint16_t, const void *, uint32_t, void *)", 0x28u, (uint64_t)"Removing and re-adding %s.%s%s for TXT device ID update (%s -> %s)\n", v25, v26, v27, v28, a11[3]);
        }
        _BonjourBrowser_RemoveService(v11, a11, 1);
        a11[13] = 0;
      }
      v24 = v11 + 88;
      while (1)
      {
        v24 = *(_QWORD *)v24;
        if (!v24)
          break;
        if (!strcasecmp((const char *)(v24 + 16), v30))
          goto LABEL_58;
      }
      v29 = malloc_type_calloc(1uLL, 0x68uLL, 0x1060040FDB03D26uLL);
      if (!v29)
        return;
      v24 = (uint64_t)v29;
      v29[24] = -1;
      *((_QWORD *)v29 + 1) = v11;
      __strlcpy_chk();
      *(_QWORD *)v24 = *(_QWORD *)(v11 + 88);
      *(_QWORD *)(v11 + 88) = v24;
LABEL_58:
      a11[13] = v24;
      a11[1] = *(_QWORD *)(v24 + 88);
      *(_QWORD *)(v24 + 88) = a11;
      goto LABEL_59;
    }
    if (gLogCategory_BonjourBrowser <= 60
      && (gLogCategory_BonjourBrowser != -1 || _LogCategory_Initialize((uint64_t)&gLogCategory_BonjourBrowser, 0x3Cu)))
    {
      LogPrintF((uint64_t)&gLogCategory_BonjourBrowser, (uint64_t)"void _BonjourService_TXTHandler(DNSServiceRef, DNSServiceFlags, uint32_t, DNSServiceErrorType, const char *, uint16_t, uint16_t, uint16_t, const void *, uint32_t, void *)", 0x3Cu, (uint64_t)"### TXT response after stop\n", a5, a6, a7, __n, (uint64_t)__s1);
    }
  }
}

void _BonjourDevice_Free(_QWORD *a1)
{
  const void *v2;

  v2 = (const void *)a1[10];
  if (v2)
    CFRelease(v2);
  free(a1);
}

void _BonjourService_Free(uint64_t a1)
{
  void *v2;
  void *v3;
  void *v4;
  _DNSServiceRef_t *v5;
  _QWORD *v6;

  v2 = *(void **)(a1 + 24);
  if (v2)
  {
    free(v2);
    *(_QWORD *)(a1 + 24) = 0;
  }
  v3 = *(void **)(a1 + 32);
  if (v3)
  {
    free(v3);
    *(_QWORD *)(a1 + 32) = 0;
  }
  v4 = *(void **)(a1 + 40);
  if (v4)
  {
    free(v4);
    *(_QWORD *)(a1 + 40) = 0;
  }

  *(_QWORD *)(a1 + 72) = 0;
  v5 = *(_DNSServiceRef_t **)(a1 + 88);
  if (v5)
  {
    DNSServiceRefDeallocate(v5);
    *(_QWORD *)(a1 + 88) = 0;
  }
  while (1)
  {
    v6 = *(_QWORD **)(a1 + 96);
    if (!v6)
      break;
    *(_QWORD *)(a1 + 96) = *v6;
    free(v6);
  }
  free((void *)a1);
}

void _BonjourBrowser_NANEndpointLost(uint64_t a1, void *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  const char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  const char *v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;

  v4 = objc_msgSend((id)objc_msgSend(a2, "serviceType"), "UTF8String");
  if (v4)
  {
    v9 = (const char *)v4;
    v10 = objc_msgSend((id)objc_msgSend(a2, "name"), "UTF8String");
    if (v10)
      v15 = (const char *)v10;
    else
      v15 = "";
    v16 = *(_DWORD *)(a1 + 72);
    if (gLogCategory_BonjourBrowser <= 20
      && (gLogCategory_BonjourBrowser != -1 || _LogCategory_Initialize((uint64_t)&gLogCategory_BonjourBrowser, 0x14u)))
    {
      LogPrintF((uint64_t)&gLogCategory_BonjourBrowser, (uint64_t)"void _BonjourBrowser_NANEndpointLost(BonjourBrowserRef, CUNANEndpoint *)", 0x14u, (uint64_t)"Bonjour NAN lost: %s.%s%s on %u\n", v11, v12, v13, v14, (uint64_t)v15);
    }
    v18 = a1 + 80;
    v17 = *(_QWORD *)(a1 + 80);
    if (v17)
    {
      while (1)
      {
        v19 = (_QWORD *)v18;
        v18 = v17;
        if (*(_DWORD *)(v17 + 48) == v16
          && !strcasecmp(*(const char **)(v17 + 24), v15)
          && !strcasecmp(*(const char **)(v18 + 32), v9)
          && !strcasecmp(*(const char **)(v18 + 40), "local."))
        {
          break;
        }
        v17 = *(_QWORD *)v18;
        if (!*(_QWORD *)v18)
          return;
      }
      *v19 = *(_QWORD *)v18;
      _BonjourBrowser_RemoveService(a1, v18, 1);
      _BonjourService_Free(v18);
    }
  }
  else if (gLogCategory_BonjourBrowser <= 60
         && (gLogCategory_BonjourBrowser != -1 || _LogCategory_Initialize((uint64_t)&gLogCategory_BonjourBrowser, 0x3Cu)))
  {
    LogPrintF((uint64_t)&gLogCategory_BonjourBrowser, (uint64_t)"void _BonjourBrowser_NANEndpointLost(BonjourBrowserRef, CUNANEndpoint *)", 0x3Cu, (uint64_t)"### Bonjour NAN lost without service type: %@\n", v5, v6, v7, v8, (uint64_t)a2);
  }
}

uint64_t _BonjourBrowser_RetryTimerFired(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  NSObject *v9;

  if (gLogCategory_BonjourBrowser <= 50
    && (gLogCategory_BonjourBrowser != -1 || _LogCategory_Initialize((uint64_t)&gLogCategory_BonjourBrowser, 0x32u)))
  {
    LogPrintF((uint64_t)&gLogCategory_BonjourBrowser, (uint64_t)"void _BonjourBrowser_RetryTimerFired(void *)", 0x32u, (uint64_t)"Retrying Bonjour start for %s after failure\n", a5, a6, a7, a8, *(_QWORD *)(a1 + 128));
  }
  v9 = *(NSObject **)(a1 + 112);
  if (v9)
  {
    dispatch_source_cancel(*(dispatch_source_t *)(a1 + 112));
    dispatch_release(v9);
    *(_QWORD *)(a1 + 112) = 0;
  }
  *(_QWORD *)(a1 + 104) = mach_absolute_time();
  return _BonjourBrowser_EnsureStarted((DNSServiceRef *)a1);
}

void BonjourBrowser_Stop(dispatch_queue_t *a1)
{
  CFRetain(a1);
  dispatch_async_f(a1[2], a1, (dispatch_function_t)_BonjourBrowser_Stop);
}

void _BonjourBrowser_Stop(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v9;
  NSObject *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  void *v15;
  void *v16;
  void *v17;

  v9 = *(unsigned __int8 *)(a1 + 96);
  *(_BYTE *)(a1 + 96) = 0;
  if (v9
    && gLogCategory_BonjourBrowser <= 30
    && (gLogCategory_BonjourBrowser != -1 || _LogCategory_Initialize((uint64_t)&gLogCategory_BonjourBrowser, 0x1Eu)))
  {
    LogPrintF((uint64_t)&gLogCategory_BonjourBrowser, (uint64_t)"void _BonjourBrowser_Stop(void *)", 0x1Eu, (uint64_t)"Stopping browse for %s\n", a5, a6, a7, a8, *(_QWORD *)(a1 + 128));
  }
  v10 = *(NSObject **)(a1 + 112);
  if (v10)
  {
    dispatch_source_cancel(*(dispatch_source_t *)(a1 + 112));
    dispatch_release(v10);
    *(_QWORD *)(a1 + 112) = 0;
  }
  _BonjourBrowser_NANEnsureStopped(a1, 1, a3, a4, a5, a6, a7, a8);
  _BonjourBrowser_EnsureStoppedDNSSD((_QWORD *)a1);
  if (v9)
  {
    _BonjourBrowser_PostEvent(a1, 3, 0, 0);
    if (gLogCategory_BonjourBrowser <= 30
      && (gLogCategory_BonjourBrowser != -1 || _LogCategory_Initialize((uint64_t)&gLogCategory_BonjourBrowser, 0x1Eu)))
    {
      LogPrintF((uint64_t)&gLogCategory_BonjourBrowser, (uint64_t)"void _BonjourBrowser_Stop(void *)", 0x1Eu, (uint64_t)"Stopped browse for %s\n", v11, v12, v13, v14, *(_QWORD *)(a1 + 128));
    }
    CFRelease((CFTypeRef)a1);
  }
  v15 = *(void **)(a1 + 128);
  if (v15)
  {
    free(v15);
    *(_QWORD *)(a1 + 128) = 0;
  }
  v16 = *(void **)(a1 + 136);
  if (v16)
  {
    free(v16);
    *(_QWORD *)(a1 + 136) = 0;
  }
  v17 = *(void **)(a1 + 144);
  if (v17)
  {
    free(v17);
    *(_QWORD *)(a1 + 144) = 0;
  }
  CFRelease((CFTypeRef)a1);
}

uint64_t BonjourBrowser_CopyDevices(uint64_t a1, _DWORD *a2)
{
  uint64_t context;
  uint64_t v5;
  uint64_t v6;

  v5 = 0;
  v6 = 1;
  context = a1;
  dispatch_sync_f(*(dispatch_queue_t *)(a1 + 16), &context, (dispatch_function_t)_BonjourBrowser_CopyDevices);
  if (a2)
    *a2 = v6;
  return v5;
}

void _BonjourBrowser_CopyDevices(uint64_t a1)
{
  CFMutableArrayRef Mutable;
  __CFArray *v3;
  _QWORD *v4;
  __CFDictionary *v5;
  __CFDictionary *v6;
  int v7;
  int v8;

  Mutable = CFArrayCreateMutable(0, 0, MEMORY[0x1E0C9B378]);
  if (Mutable)
  {
    v3 = Mutable;
    v4 = *(_QWORD **)(*(_QWORD *)a1 + 88);
    if (v4)
    {
      v8 = 0;
      do
      {
        v5 = _BonjourDevice_CreateDictionary((uint64_t)v4, &v8);
        if (v5)
        {
          v6 = v5;
          CFArrayAppendValue(v3, v5);
          CFRelease(v6);
        }
        v4 = (_QWORD *)*v4;
      }
      while (v4);
    }
    v7 = 0;
    *(_QWORD *)(a1 + 8) = v3;
  }
  else
  {
    v7 = -6728;
  }
  *(_DWORD *)(a1 + 16) = v7;
}

void BonjourBrowser_ReconfirmDevice(dispatch_queue_t *a1, const void *a2)
{
  BonjourBrowser_ReconfirmDeviceEx(a1, a2, 0);
}

void BonjourBrowser_ReconfirmDeviceEx(dispatch_queue_t *a1, const void *a2, const char *a3)
{
  _QWORD *v6;
  _QWORD *v7;
  char *v8;

  v6 = malloc_type_malloc(0x18uLL, 0x70040A71FDFA8uLL);
  if (v6)
  {
    v7 = v6;
    *v6 = a1;
    v6[1] = a2;
    if (a3)
      v8 = strdup(a3);
    else
      v8 = 0;
    v7[2] = v8;
    CFRetain(a2);
    CFRetain(a1);
    dispatch_async_f(a1[2], v7, (dispatch_function_t)_BonjourBrowser_ReconfirmDevice);
  }
}

void _BonjourBrowser_ReconfirmDevice(void *a1)
{
  const __CFDictionary *v2;
  char *v3;
  uint64_t i;
  const char *v5;
  _BYTE *DomainNameFromDNSNameString;
  __int16 v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;
  char fullName[1009];
  char rdata[256];
  char v15[64];
  uint64_t v16;

  v16 = *MEMORY[0x1E0C80C00];
  v15[0] = 0;
  v2 = *(const __CFDictionary **)a1;
  CFDictionaryGetCString(*((const __CFDictionary **)a1 + 1), CFSTR("deviceID"), v15, 0x40uLL, 0);
  if (v15[0])
  {
    v3 = (char *)v2 + 88;
    while (1)
    {
      v3 = *(char **)v3;
      if (!v3)
        break;
      if (!strcasecmp(v3 + 16, v15))
      {
        for (i = *((_QWORD *)v3 + 11); i; i = *(_QWORD *)(i + 8))
        {
          v5 = (const char *)*((_QWORD *)a1 + 2);
          if ((!v5 || !strcasecmp(v5, (const char *)(i + 52)))
            && !DNSServiceConstructFullName(fullName, *(const char *const *)(i + 24), *(const char *const *)(i + 32), *(const char *const *)(i + 40)))
          {
            DomainNameFromDNSNameString = MakeDomainNameFromDNSNameString(rdata, fullName);
            if (DomainNameFromDNSNameString)
            {
              v7 = (__int16)DomainNameFromDNSNameString;
              snprintf(fullName, 0x3F1uLL, "%s%s", *(const char **)(i + 32), *(const char **)(i + 40));
              if (gLogCategory_BonjourBrowser <= 50
                && (gLogCategory_BonjourBrowser != -1
                 || _LogCategory_Initialize((uint64_t)&gLogCategory_BonjourBrowser, 0x32u)))
              {
                LogPrintF((uint64_t)&gLogCategory_BonjourBrowser, (uint64_t)"void _BonjourBrowser_ReconfirmDevice(void *)", 0x32u, (uint64_t)"Reconfirming PTR for %s.%s%s on %s\n", v8, v9, v10, v11, *(_QWORD *)(i + 24));
              }
              DNSServiceReconfirmRecord(0, *(_DWORD *)(i + 48), fullName, 0xCu, 1u, v7 - (unsigned __int16)rdata, rdata);
            }
          }
        }
        break;
      }
    }
  }
  v12 = (void *)*((_QWORD *)a1 + 2);
  if (v12)
    free(v12);
  CFRelease(*((CFTypeRef *)a1 + 1));
  free(a1);
  CFRelease(v2);
}

uint64_t BonjourDevice_Reconfirm(const __CFDictionary *a1)
{
  CFTypeID TypeID;
  const __CFDictionary *TypedValue;
  const __CFArray *v4;
  CFIndex Count;
  CFIndex v6;
  CFIndex v7;
  uint64_t v8;
  CFTypeID v9;
  const __CFDictionary *TypedValueAtIndex;
  const __CFDictionary *v11;
  const __CFString *Value;
  const __CFString *v13;
  const __CFString *v14;
  uint32_t v15;
  _BYTE *DomainNameFromDNSNameString;
  __int16 v17;
  unsigned int v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  BOOL v23;
  char rdata[256];
  char fullName[1009];
  char domain[1009];
  char regtype[128];
  char service[128];
  uint64_t v30;

  v30 = *MEMORY[0x1E0C80C00];
  regtype[0] = 0;
  CFDictionaryGetCString(a1, CFSTR("serviceType"), regtype, 0x80uLL, 0);
  TypeID = CFArrayGetTypeID();
  TypedValue = CFDictionaryGetTypedValue(a1, CFSTR("services"), TypeID, 0);
  if (!TypedValue)
    return 0;
  v4 = TypedValue;
  Count = CFArrayGetCount(TypedValue);
  if (Count < 1)
    return 0;
  v6 = Count;
  v7 = 0;
  v8 = 0;
  do
  {
    v9 = CFDictionaryGetTypeID();
    TypedValueAtIndex = CFArrayGetTypedValueAtIndex(v4, v7, v9, 0);
    if (TypedValueAtIndex)
    {
      v11 = TypedValueAtIndex;
      service[0] = 0;
      Value = (const __CFString *)CFDictionaryGetValue(TypedValueAtIndex, CFSTR("rawName"));
      if (Value)
      {
        CFGetCString(Value, service, 0x80uLL);
        domain[0] = 0;
        v13 = (const __CFString *)CFDictionaryGetValue(v11, CFSTR("domain"));
        if (v13)
          CFGetCString(v13, domain, 0x3F1uLL);
        else
          domain[0] = 0;
        v14 = (const __CFString *)CFDictionaryGetValue(v11, CFSTR("ifindex"));
        if (v14)
          v15 = CFGetInt64(v14, 0);
        else
          v15 = 0;
        if (!DNSServiceConstructFullName(fullName, service, regtype, domain))
        {
          DomainNameFromDNSNameString = MakeDomainNameFromDNSNameString(rdata, fullName);
          if (DomainNameFromDNSNameString)
          {
            v17 = (__int16)DomainNameFromDNSNameString;
            snprintf(fullName, 0x3F1uLL, "%s%s", regtype, domain);
            v18 = DNSServiceReconfirmRecord(0, v15, fullName, 0xCu, 1u, v17 - (unsigned __int16)rdata, rdata);
            if ((_DWORD)v8)
              v23 = 1;
            else
              v23 = v18 == 0;
            if (v23)
              v8 = v8;
            else
              v8 = v18;
            if (gLogCategory_BonjourBrowser <= 50
              && (gLogCategory_BonjourBrowser != -1
               || _LogCategory_Initialize((uint64_t)&gLogCategory_BonjourBrowser, 0x32u)))
            {
              LogPrintF((uint64_t)&gLogCategory_BonjourBrowser, (uint64_t)"OSStatus BonjourDevice_Reconfirm(CFDictionaryRef)", 0x32u, (uint64_t)"Reconfirm PTR for %s.%s%s%%%u: %#m\n", v19, v20, v21, v22, (uint64_t)service);
            }
          }
        }
      }
      else
      {
        service[0] = 0;
      }
    }
    ++v7;
  }
  while (v6 != v7);
  return v8;
}

const __CFData *BonjourDevice_CopyCFString(const __CFDictionary *a1, const char *a2, int *a3)
{
  const __CFData *result;
  const __CFData *v6;
  const UInt8 *BytePtr;
  uint16_t Length;
  uint64_t v9;
  int v10;
  uint8_t valueLen;

  result = (const __CFData *)CFDictionaryGetValue(a1, CFSTR("txt"));
  if (result)
  {
    v6 = result;
    valueLen = 0;
    BytePtr = CFDataGetBytePtr(result);
    Length = CFDataGetLength(v6);
    result = (const __CFData *)TXTRecordGetValuePtr(Length, BytePtr, a2, &valueLen);
    if (result)
    {
      if (valueLen)
      {
        v9 = 0;
        while (*((_BYTE *)result + v9))
        {
          if (valueLen == ++v9)
          {
            LOBYTE(v9) = valueLen;
            break;
          }
        }
      }
      else
      {
        LOBYTE(v9) = 0;
      }
      valueLen = v9;
      result = (const __CFData *)CFStringCreateWithBytes(0, (const UInt8 *)result, v9, 0x8000100u, 0);
      if (result)
        v10 = 0;
      else
        v10 = -6742;
    }
    else
    {
      v10 = -6727;
    }
  }
  else
  {
    v10 = -6762;
  }
  if (a3)
    *a3 = v10;
  return result;
}

uint64_t BonjourDevice_GetBitListValue(const __CFDictionary *a1, const char *a2, int *a3)
{
  const __CFData *Value;
  const __CFData *v6;
  const UInt8 *BytePtr;
  uint16_t Length;
  char *ValuePtr;
  int v10;
  uint8_t valueLen;
  unsigned int v13;

  v13 = 0;
  Value = (const __CFData *)CFDictionaryGetValue(a1, CFSTR("txt"));
  if (Value)
  {
    v6 = Value;
    valueLen = 0;
    BytePtr = CFDataGetBytePtr(Value);
    Length = CFDataGetLength(v6);
    ValuePtr = (char *)TXTRecordGetValuePtr(Length, BytePtr, a2, &valueLen);
    if (ValuePtr)
      v10 = BitListString_Parse(ValuePtr, valueLen, &v13);
    else
      v10 = -6727;
  }
  else
  {
    v10 = -6762;
  }
  if (a3)
    *a3 = v10;
  return v13;
}

unint64_t BonjourDevice_GetDeviceID(const __CFDictionary *a1, char *a2, int *a3)
{
  const __CFString *Value;
  int v6;
  unint64_t v7;
  char v9;
  char buffer[64];
  uint64_t v11;

  v11 = *MEMORY[0x1E0C80C00];
  Value = (const __CFString *)CFDictionaryGetValue(a1, CFSTR("deviceID"));
  if (Value)
  {
    if (CFStringGetCString(Value, buffer, 64, 0x600u))
    {
      if (!a2)
        a2 = &v9;
      v6 = TextToHardwareAddress(buffer, 0xFFFFFFFFFFFFFFFFLL, 6, a2);
      if (v6)
        v7 = 0;
      else
        v7 = ((unint64_t)*a2 << 40) | ((unint64_t)a2[1] << 32) | ((unint64_t)a2[2] << 24) | ((unint64_t)a2[3] << 16) | ((unint64_t)a2[4] << 8) | a2[5];
    }
    else
    {
      v7 = 0;
      v6 = -6742;
    }
  }
  else
  {
    v7 = 0;
    v6 = -6762;
  }
  if (a3)
    *a3 = v6;
  return v7;
}

__CFArray *BonjourDevice_CopyConnectionInfo(const __CFDictionary *a1, uint64_t a2, const void *a3, int *a4)
{
  __CFArray *Mutable;
  CFTypeID TypeID;
  const __CFDictionary *TypedValue;
  const __CFArray *v10;
  CFIndex Count;
  CFIndex v12;
  CFIndex v13;
  const CFDictionaryKeyCallBacks *v14;
  const CFDictionaryValueCallBacks *v15;
  CFTypeID v16;
  const __CFArray *TypedValueAtIndex;
  const __CFData *v18;
  const UInt8 *BytePtr;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  __CFDictionary *v25;
  __CFDictionary *v26;
  CFTypeID v27;
  const __CFDictionary *v28;
  const __CFArray *MutableCopy;
  __CFArray *v30;
  CFIndex v31;
  CFIndex v32;
  CFIndex i;
  CFTypeID v34;
  const __CFDictionary *v35;
  const __CFDictionary *v36;
  const void *Value;
  int v38;
  uint64_t context;
  char v41[32];
  uint64_t v42;
  CFRange v43;

  v42 = *MEMORY[0x1E0C80C00];
  context = a2;
  Mutable = CFArrayCreateMutable(0, 0, MEMORY[0x1E0C9B378]);
  if (!Mutable)
  {
    v38 = -6728;
    if (!a4)
      return Mutable;
    goto LABEL_24;
  }
  TypeID = CFArrayGetTypeID();
  TypedValue = CFDictionaryGetTypedValue(a1, CFSTR("wakeArray"), TypeID, 0);
  if (TypedValue)
  {
    v10 = TypedValue;
    Count = CFArrayGetCount(TypedValue);
    if (Count >= 1)
    {
      v12 = Count;
      v13 = 0;
      v14 = (const CFDictionaryKeyCallBacks *)MEMORY[0x1E0C9B390];
      v15 = (const CFDictionaryValueCallBacks *)MEMORY[0x1E0C9B3A0];
      do
      {
        v16 = CFDataGetTypeID();
        TypedValueAtIndex = CFArrayGetTypedValueAtIndex(v10, v13, v16, 0);
        if (TypedValueAtIndex)
        {
          v18 = TypedValueAtIndex;
          if (CFDataGetLength(TypedValueAtIndex) == 6)
          {
            BytePtr = CFDataGetBytePtr(v18);
            SNPrintF((uint64_t)v41, 32, (uint64_t)"wake://%02X-%02X-%02X-%02X-%02X-%02X", v20, v21, v22, v23, v24, *BytePtr);
            v25 = CFDictionaryCreateMutable(0, 0, v14, v15);
            if (!v25)
            {
              v38 = -6728;
              v30 = Mutable;
              Mutable = 0;
              goto LABEL_21;
            }
            v26 = v25;
            CFDictionarySetCString(v25, CFSTR("dnsName"), v41, -1);
            CFArrayAppendValue(Mutable, v26);
            CFRelease(v26);
          }
        }
        ++v13;
      }
      while (v12 != v13);
    }
  }
  v27 = CFArrayGetTypeID();
  v28 = CFDictionaryGetTypedValue(a1, CFSTR("services"), v27, 0);
  if (!v28)
  {
    v38 = 0;
    if (!a4)
      return Mutable;
LABEL_24:
    *a4 = v38;
    return Mutable;
  }
  MutableCopy = CFArrayCreateMutableCopy(0, 0, v28);
  if (MutableCopy)
  {
    v30 = MutableCopy;
    v43.length = CFArrayGetCount(MutableCopy);
    v43.location = 0;
    CFArraySortValues(v30, v43, (CFComparatorFunction)_BonjourService_Comparator, &context);
    v31 = CFArrayGetCount(v30);
    if (v31 >= 1)
    {
      v32 = v31;
      for (i = 0; i != v32; ++i)
      {
        v34 = CFDictionaryGetTypeID();
        v35 = CFArrayGetTypedValueAtIndex(v30, i, v34, 0);
        if (v35)
        {
          v36 = v35;
          if (!a3 || (Value = CFDictionaryGetValue(v35, CFSTR("ifname"))) != 0 && CFEqual(Value, a3))
            CFArrayAppendValue(Mutable, v36);
        }
      }
    }
    v38 = 0;
  }
  else
  {
    v38 = -6728;
    v30 = Mutable;
    Mutable = 0;
  }
LABEL_21:
  CFRelease(v30);
  if (a4)
    goto LABEL_24;
  return Mutable;
}

unint64_t _BonjourService_Comparator(const __CFDictionary *a1, const __CFDictionary *a2, unint64_t *a3)
{
  unint64_t v5;
  CFTypeID TypeID;
  const __CFDictionary *TypedValue;
  uint64_t v8;
  CFTypeID v9;
  const __CFDictionary *v10;
  _BOOL8 v11;
  unint64_t v12;
  int Int64;
  unsigned int v14;
  uint64_t v15;
  _BOOL4 v16;
  uint64_t v17;
  _BOOL8 v18;
  uint64_t v19;

  v5 = *a3;
  TypeID = CFStringGetTypeID();
  TypedValue = CFDictionaryGetTypedValue(a1, CFSTR("domain"), TypeID, 0);
  if (TypedValue)
  {
    if (CFEqual(TypedValue, CFSTR("local.")))
      v8 = -1;
    else
      v8 = 0;
  }
  else
  {
    v8 = 0;
  }
  v9 = CFStringGetTypeID();
  v10 = CFDictionaryGetTypedValue(a2, CFSTR("domain"), v9, 0);
  if (v10)
    v11 = CFEqual(v10, CFSTR("local.")) != 0;
  else
    v11 = 0;
  v12 = v11 + v8;
  if (!v12)
  {
    Int64 = CFDictionaryGetInt64(a1, CFSTR("transportType"), 0);
    v14 = CFDictionaryGetInt64(a2, CFSTR("transportType"), 0);
    LODWORD(v12) = ((v14 >> 4) & 1) + (Int64 << 27 >> 31);
    if ((_DWORD)v12)
      return (int)v12;
    LODWORD(v12) = ((v14 >> 3) & 1) + (Int64 << 28 >> 31);
    if ((_DWORD)v12)
    {
      return (int)v12;
    }
    else
    {
      v15 = 1;
      if (Int64 != 4 && Int64 != 64)
        v15 = Int64 == 128;
      v16 = 1;
      if (v14 != 4 && v14 != 64)
        v16 = v14 == 128;
      v17 = v15 << 63 >> 63;
      if ((v5 & 0x8000000000000000) == 0 || (v12 = v17 + v16) == 0)
      {
        v18 = 1;
        if (v14 != 1 && v14 != 8)
          v18 = v14 == 16;
        v19 = -1;
        if (Int64 != 1 && Int64 != 8)
        {
          if (Int64 == 16)
            v19 = -1;
          else
            v19 = 0;
        }
        v12 = v19 + v18;
        if (!v12 && ((v5 & 0x8000000000000000) != 0 || (v12 = !v16 - (unint64_t)((v17 & 1) == 0)) == 0))
        {
          if (((v5 >> 50) & v17 & v16) == 1)
            return (v14 == 128) - (unint64_t)(Int64 == 128);
          else
            return 0;
        }
      }
    }
  }
  return v12;
}

void *BonjourDevice_CopyDNSNames(const __CFDictionary *a1, uint64_t a2, int *a3)
{
  const __CFArray *Value;
  CFMutableArrayRef MutableCopy;
  const __CFArray *v7;
  CFTypeID TypeID;
  const __CFDictionary *TypedValue;
  const __CFArray *v10;
  CFIndex v11;
  CFIndex v12;
  CFIndex v13;
  CFTypeID v14;
  const __CFArray *TypedValueAtIndex;
  const __CFData *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  const __CFData *CFDataOfLength;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  CFIndex Count;
  CFIndex v32;
  CFIndex v33;
  const __CFDictionary *ValueAtIndex;
  CFTypeID v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  char *v42;
  void *v43;
  int v44;
  void *v46;
  uint64_t context;
  CFRange v48;

  v46 = 0;
  context = a2;
  Value = (const __CFArray *)CFDictionaryGetValue(a1, CFSTR("services"));
  if (Value)
    MutableCopy = CFArrayCreateMutableCopy(0, 0, Value);
  else
    MutableCopy = CFArrayCreateMutable(0, 0, MEMORY[0x1E0C9B378]);
  v7 = MutableCopy;
  if (MutableCopy)
  {
    TypeID = CFArrayGetTypeID();
    TypedValue = CFDictionaryGetTypedValue(a1, CFSTR("wakeArray"), TypeID, 0);
    if (TypedValue && (v10 = TypedValue, v11 = CFArrayGetCount(TypedValue), v11 >= 1))
    {
      v12 = v11;
      v13 = 0;
      while (1)
      {
        v14 = CFDataGetTypeID();
        TypedValueAtIndex = CFArrayGetTypedValueAtIndex(v10, v13, v14, 0);
        if (TypedValueAtIndex)
        {
          v16 = TypedValueAtIndex;
          if (CFDataGetLength(TypedValueAtIndex) == 6)
          {
            CFDataGetBytePtr(v16);
            v23 = v46 ? "\x1E" : "";
            if ((int)AppendPrintF(&v46, (uint64_t)"%swake://%02X-%02X-%02X-%02X-%02X-%02X", v17, v18, v19, v20, v21, v22, (uint64_t)v23) < 1)break;
          }
        }
        if (v12 == ++v13)
        {
          if (v46)
            goto LABEL_18;
          goto LABEL_16;
        }
      }
    }
    else
    {
LABEL_16:
      CFDataOfLength = CFDictionaryGetCFDataOfLength(a1, CFSTR("wakeAddr"), 6, 0);
      if (!CFDataOfLength
        || (CFDataGetBytePtr(CFDataOfLength),
            (int)AppendPrintF(&v46, (uint64_t)"%swake://%02X-%02X-%02X-%02X-%02X-%02X", v25, v26, v27, v28, v29, v30, (uint64_t)"") >= 1))
      {
LABEL_18:
        v48.length = CFArrayGetCount(v7);
        v48.location = 0;
        CFArraySortValues(v7, v48, (CFComparatorFunction)_BonjourService_Comparator, &context);
        Count = CFArrayGetCount(v7);
        if (Count < 1)
        {
LABEL_26:
          v43 = v46;
          if (v46)
            v44 = 0;
          else
            v44 = -6727;
          if (!v7)
            goto LABEL_31;
          goto LABEL_30;
        }
        v32 = Count;
        v33 = 0;
        while (1)
        {
          ValueAtIndex = (const __CFDictionary *)CFArrayGetValueAtIndex(v7, v33);
          v35 = CFStringGetTypeID();
          if (CFDictionaryGetTypedValue(ValueAtIndex, CFSTR("dnsName"), v35, 0))
          {
            v42 = v46 ? "\x1E" : "";
            if ((int)AppendPrintF(&v46, (uint64_t)"%s%@", v36, v37, v38, v39, v40, v41, (uint64_t)v42) < 1)
              break;
          }
          if (v32 == ++v33)
            goto LABEL_26;
        }
      }
    }
    v44 = -6700;
  }
  else
  {
    v44 = -6728;
  }
  if (v46)
    free(v46);
  v43 = 0;
  if (v7)
LABEL_30:
    CFRelease(v7);
LABEL_31:
  if (a3)
    *a3 = v44;
  return v43;
}

uint64_t BonjourDevice_GetDNSName(const __CFDictionary *a1, unint64_t a2, char *a3, size_t a4)
{
  CFTypeID TypeID;
  const __CFDictionary *TypedValue;
  const __CFArray *v10;
  CFIndex Count;
  CFIndex v12;
  CFIndex v13;
  char v14;
  CFTypeID v15;
  const __CFArray *TypedValueAtIndex;
  const __CFData *v17;
  const UInt8 *BytePtr;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  int v24;
  const __CFData *CFDataOfLength;
  const UInt8 *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  int v32;
  const __CFArray *Value;
  const __CFArray *v34;
  CFIndex v35;
  CFIndex v36;
  const __CFDictionary *v37;
  const __CFDictionary *v38;
  CFIndex v39;
  unint64_t v40;
  const __CFString *v41;
  const __CFString *v42;
  const __CFDictionary *ValueAtIndex;
  const __CFString *v45;
  const __CFString *v46;
  unint64_t Int64;
  unint64_t v48;
  const __CFDictionary *v49;
  const __CFDictionary *v50;
  const __CFDictionary *v52;
  uint64_t result;
  size_t v54;
  char *v55;
  const __CFDictionary *v56;
  const __CFDictionary *v57;
  unsigned int v58;
  char v59[256];
  uint64_t v60;

  v60 = *MEMORY[0x1E0C80C00];
  v58 = 0;
  if (a3)
  {
    TypeID = CFArrayGetTypeID();
    TypedValue = CFDictionaryGetTypedValue(a1, CFSTR("wakeArray"), TypeID, 0);
    v55 = a3;
    if (!TypedValue)
      goto LABEL_59;
    v10 = TypedValue;
    Count = CFArrayGetCount(TypedValue);
    if (Count < 1)
      goto LABEL_59;
    v12 = Count;
    v13 = 0;
    v14 = 1;
    do
    {
      while (1)
      {
        v15 = CFDataGetTypeID();
        TypedValueAtIndex = CFArrayGetTypedValueAtIndex(v10, v13, v15, 0);
        if (!TypedValueAtIndex)
          break;
        v17 = TypedValueAtIndex;
        if (CFDataGetLength(TypedValueAtIndex) != 6)
          break;
        BytePtr = CFDataGetBytePtr(v17);
        v24 = SNPrintF((uint64_t)v55, a4, (uint64_t)"wake://%02X-%02X-%02X-%02X-%02X-%02X%s", v19, v20, v21, v22, v23, *BytePtr);
        if (v24 < 1)
          return 4294960596;
        v14 = 0;
        v55 += v24;
        a4 -= v24;
        if (++v13 == v12)
          goto LABEL_17;
      }
      ++v13;
    }
    while (v12 != v13);
    if ((v14 & 1) != 0)
    {
LABEL_59:
      CFDataOfLength = CFDictionaryGetCFDataOfLength(a1, CFSTR("wakeAddr"), 6, 0);
      if (CFDataOfLength)
      {
        v26 = CFDataGetBytePtr(CFDataOfLength);
        v32 = SNPrintF((uint64_t)v55, a4, (uint64_t)"wake://%02X-%02X-%02X-%02X-%02X-%02X%s", v27, v28, v29, v30, v31, *v26);
        if (v32 < 1)
          return 4294960596;
        v55 += v32;
        a4 -= v32;
      }
    }
  }
  else
  {
    v55 = 0;
  }
LABEL_17:
  Value = (const __CFArray *)CFDictionaryGetValue(a1, CFSTR("services"));
  if (!Value || (v34 = Value, v35 = CFArrayGetCount(Value), v35 < 1))
  {
    v38 = 0;
    v37 = 0;
    goto LABEL_47;
  }
  v36 = v35;
  v54 = a4;
  v37 = 0;
  v38 = 0;
  v56 = 0;
  v57 = 0;
  v39 = 0;
  v40 = a2 >> 63;
  v41 = CFSTR("p2p");
  v42 = CFSTR("domain");
  do
  {
    ValueAtIndex = (const __CFDictionary *)CFArrayGetValueAtIndex(v34, v39);
    if ((CFDictionaryGetInt64(ValueAtIndex, v41, 0) != 0) == (_DWORD)v40)
    {
      v59[0] = 0;
      CFDictionaryGetCString(ValueAtIndex, v42, v59, 0x100uLL, 0);
      if (*(_DWORD *)v59 == 1633906540 && *(_DWORD *)&v59[3] == 3042401)
      {
        v45 = v41;
        v46 = v42;
        Int64 = CFDictionaryGetInt64(ValueAtIndex, CFSTR("transportType"), 0);
        v48 = Int64;
        if (!v57 && Int64 != 32)
        {
          if (CFDictionaryGetInt64(ValueAtIndex, CFSTR("wifi"), 0))
            v49 = 0;
          else
            v49 = ValueAtIndex;
          v57 = v49;
        }
        v50 = v56;
        if (v48 == 32 && v56 == 0)
          v50 = ValueAtIndex;
        v56 = v50;
        if (!v38)
          v38 = ValueAtIndex;
        v42 = v46;
        v41 = v45;
      }
      if (!v37)
        v37 = ValueAtIndex;
    }
    ++v39;
  }
  while (v36 != v39);
  a4 = v54;
  if (!v57)
  {
    v57 = v56;
    if (!v56)
    {
LABEL_47:
      if (v38)
        v52 = v38;
      else
        v52 = v37;
      v57 = v52;
      if (!v52)
        return 4294960569;
    }
  }
  if (!v55)
    return 0;
  CFDictionaryGetCString(v57, CFSTR("dnsName"), v55, a4, (int *)&v58);
  result = v58;
  if (!v58)
    return 0;
  return result;
}

uint64_t BonjourDevice_GetInt64(const __CFDictionary *a1, const char *a2, int a3, int *a4)
{
  const __CFData *Value;
  const __CFData *v8;
  const UInt8 *BytePtr;
  uint16_t Length;
  char *ValuePtr;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unsigned int v19;
  unint64_t v20;
  char *v21;
  unsigned __int8 *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unsigned int v28;
  unint64_t v29;
  int v30;
  uint64_t v31;
  uint8_t valueLen;
  uint64_t v34;
  uint64_t v35;
  char __s[64];
  uint64_t v37;

  v37 = *MEMORY[0x1E0C80C00];
  v35 = 0;
  Value = (const __CFData *)CFDictionaryGetValue(a1, CFSTR("txt"));
  if (!Value)
  {
    v30 = -6762;
    goto LABEL_36;
  }
  v8 = Value;
  valueLen = 0;
  BytePtr = CFDataGetBytePtr(Value);
  Length = CFDataGetLength(v8);
  ValuePtr = (char *)TXTRecordGetValuePtr(Length, BytePtr, a2, &valueLen);
  if (!ValuePtr)
  {
    v30 = -6727;
    goto LABEL_36;
  }
  v12 = valueLen;
  if (valueLen > 0x3FuLL)
  {
    v30 = -6743;
    goto LABEL_36;
  }
  v13 = ValuePtr;
  __memcpy_chk();
  __s[v12] = 0;
  if (strnicmpx((unsigned __int8 *)v13, v12, "true")
    && strnicmpx((unsigned __int8 *)v13, valueLen, "yes")
    && strnicmpx((unsigned __int8 *)v13, valueLen, "y")
    && strnicmpx((unsigned __int8 *)v13, valueLen, "on")
    && strnicmpx((unsigned __int8 *)v13, valueLen, "1"))
  {
    if (strnicmpx((unsigned __int8 *)v13, valueLen, "false")
      && strnicmpx((unsigned __int8 *)v13, valueLen, "no")
      && strnicmpx((unsigned __int8 *)v13, valueLen, "n")
      && strnicmpx((unsigned __int8 *)v13, valueLen, "off")
      && strnicmpx((unsigned __int8 *)v13, valueLen, "0"))
    {
      HIDWORD(v20) = a3;
      LODWORD(v20) = a3;
      v19 = v20 >> 1;
      if (v19 > 8 || ((0x131u >> v19) & 1) == 0)
        goto LABEL_32;
      if (SNScanF(v13, valueLen, (unsigned __int8 *)off_1E25DBB80[v19], v14, v15, v16, v17, v18, (int)&v35) != 1)goto LABEL_46;
    }
    else
    {
      v35 = 0;
    }
  }
  else
  {
    v35 = 1;
  }
  v21 = strchr(__s, 44);
  if (!v21)
  {
    v30 = 0;
    goto LABEL_36;
  }
  v34 = 0;
  v22 = (unsigned __int8 *)(v21 + 1);
  if (!strnicmpx((unsigned __int8 *)v21 + 1, -1, "true")
    || !strnicmpx(v22, -1, "yes")
    || !strnicmpx(v22, -1, "y")
    || !strnicmpx(v22, -1, "on")
    || !strnicmpx(v22, -1, "1"))
  {
    v31 = 0x100000000;
LABEL_34:
    v30 = 0;
    v35 |= v31;
    goto LABEL_36;
  }
  if (!strnicmpx(v22, -1, "false")
    || !strnicmpx(v22, -1, "no")
    || !strnicmpx(v22, -1, "n")
    || !strnicmpx(v22, -1, "off")
    || !strnicmpx(v22, -1, "0"))
  {
    v31 = 0;
    goto LABEL_34;
  }
  HIDWORD(v29) = a3;
  LODWORD(v29) = a3;
  v28 = v29 >> 1;
  if (v28 > 8 || ((0x131u >> v28) & 1) == 0)
  {
LABEL_32:
    v30 = -6705;
    goto LABEL_36;
  }
  if (SNScanF((char *)v22, 0xFFFFFFFFFFFFFFFFLL, (unsigned __int8 *)off_1E25DBB80[v28], v23, v24, v25, v26, v27, (int)&v34) == 1)
  {
    v31 = v34 << 32;
    goto LABEL_34;
  }
LABEL_46:
  v30 = -6742;
LABEL_36:
  if (a4)
    *a4 = v30;
  return v35;
}

uint64_t BonjourDevice_MergeInfo(uint64_t *a1, CFTypeRef cf)
{
  uint64_t v4;
  CFTypeID TypeID;
  const __CFDictionary *TypedValue;
  const __CFArray *v7;
  CFMutableDictionaryRef MutableCopy;
  __CFDictionary *v9;
  CFTypeID v10;
  const __CFDictionary *v11;
  CFMutableArrayRef Mutable;
  CFTypeID v13;
  const __CFDictionary *v14;
  const __CFArray *v15;
  CFIndex Count;
  __CFDictionary *v17;
  CFIndex v18;
  CFIndex v19;
  CFTypeID v20;
  const void *Value;
  const void *v22;
  CFIndex v23;
  CFTypeID v24;
  const __CFDictionary *v25;
  const __CFDictionary *v26;
  const void *v27;
  const void *v28;
  CFIndex v29;
  CFTypeID v30;
  const __CFDictionary *TypedValueAtIndex;
  const __CFDictionary *v32;
  const void *v33;
  const void *v34;
  CFIndex v35;
  CFIndex v36;
  CFIndex v37;
  CFTypeID v38;
  const __CFDictionary *v39;
  const __CFString *v40;
  __CFDictionary *v42;
  CFTypeRef cfa;
  _QWORD *v44;
  __CFArray *theArray;
  const __CFArray *v46;
  CFIndex v47;
  const __CFDictionary *theDict;

  v4 = *a1;
  if (!*a1)
  {
    CFRetain(cf);
    *a1 = (uint64_t)cf;
    return v4;
  }
  TypeID = CFArrayGetTypeID();
  TypedValue = CFDictionaryGetTypedValue((const __CFDictionary *)v4, CFSTR("services"), TypeID, 0);
  v7 = TypedValue;
  if (TypedValue)
    CFRetain(TypedValue);
  MutableCopy = CFDictionaryCreateMutableCopy(0, 0, (CFDictionaryRef)v4);
  if (!MutableCopy)
  {
    v4 = 4294960568;
    if (!v7)
      return v4;
    goto LABEL_56;
  }
  v9 = MutableCopy;
  CFDictionaryApplyFunction((CFDictionaryRef)cf, (CFDictionaryApplierFunction)_CFDictionaryMergeDictionaryApplier, MutableCopy);
  CFDictionaryRemoveValue(v9, CFSTR("removedServices"));
  v10 = CFArrayGetTypeID();
  v11 = CFDictionaryGetTypedValue((const __CFDictionary *)cf, CFSTR("services"), v10, 0);
  if (v11)
  {
    Mutable = CFArrayCreateMutableCopy(0, 0, v11);
    if (Mutable)
      goto LABEL_7;
LABEL_11:
    v4 = 4294960568;
    v17 = v9;
    goto LABEL_55;
  }
  Mutable = CFArrayCreateMutable(0, 0, MEMORY[0x1E0C9B378]);
  if (!Mutable)
    goto LABEL_11;
LABEL_7:
  theArray = Mutable;
  v13 = CFArrayGetTypeID();
  v14 = CFDictionaryGetTypedValue((const __CFDictionary *)cf, CFSTR("removedServices"), v13, 0);
  v15 = v14;
  if (v14)
    Count = CFArrayGetCount(v14);
  else
    Count = 0;
  cfa = (CFTypeRef)v4;
  v44 = a1;
  v42 = v9;
  if (v11)
  {
    v18 = CFArrayGetCount(v11);
    if (!v7)
      goto LABEL_46;
LABEL_17:
    v47 = CFArrayGetCount(v7);
    if (v47 >= 1)
    {
      v19 = 0;
      v46 = v7;
      do
      {
        v20 = CFDictionaryGetTypeID();
        theDict = CFArrayGetTypedValueAtIndex(v7, v19, v20, 0);
        if (theDict)
        {
          Value = CFDictionaryGetValue(theDict, CFSTR("domain"));
          v22 = CFDictionaryGetValue(theDict, CFSTR("ifname"));
          if (v18 < 1)
          {
LABEL_32:
            if (Count < 1)
            {
LABEL_44:
              CFArrayAppendValue(theArray, theDict);
            }
            else
            {
              v29 = 0;
              while (1)
              {
                v30 = CFDictionaryGetTypeID();
                TypedValueAtIndex = CFArrayGetTypedValueAtIndex(v15, v29, v30, 0);
                if (TypedValueAtIndex)
                {
                  v32 = TypedValueAtIndex;
                  v33 = CFDictionaryGetValue(TypedValueAtIndex, CFSTR("domain"));
                  v34 = CFDictionaryGetValue(v32, CFSTR("ifname"));
                  if ((Value == v33 || Value && v33 && CFEqual(Value, v33))
                    && (v22 == v34 || v22 && v34 && CFEqual(v22, v34)))
                  {
                    break;
                  }
                }
                if (Count == ++v29)
                  goto LABEL_44;
              }
            }
          }
          else
          {
            v23 = 0;
            while (1)
            {
              v24 = CFDictionaryGetTypeID();
              v25 = CFArrayGetTypedValueAtIndex(v11, v23, v24, 0);
              if (v25)
              {
                v26 = v25;
                v27 = CFDictionaryGetValue(v25, CFSTR("domain"));
                v28 = CFDictionaryGetValue(v26, CFSTR("ifname"));
                if ((Value == v27 || Value && v27 && CFEqual(Value, v27))
                  && (v22 == v28 || v22 && v28 && CFEqual(v22, v28)))
                {
                  break;
                }
              }
              if (v18 == ++v23)
                goto LABEL_32;
            }
          }
        }
        ++v19;
        v7 = v46;
      }
      while (v19 != v47);
    }
    goto LABEL_46;
  }
  v18 = 0;
  if (v7)
    goto LABEL_17;
LABEL_46:
  v17 = theArray;
  CFDictionarySetValue(v42, CFSTR("services"), theArray);
  v35 = CFArrayGetCount(theArray);
  if (v35 >= 1)
  {
    v36 = v35;
    v37 = 0;
    while (1)
    {
      v38 = CFDictionaryGetTypeID();
      v39 = CFArrayGetTypedValueAtIndex(theArray, v37, v38, 0);
      if (v39)
      {
        v40 = (const __CFString *)CFDictionaryGetValue(v39, CFSTR("p2p"));
        if (!v40 || !CFGetInt64(v40, 0))
          break;
      }
      if (v36 == ++v37)
      {
        CFDictionarySetValue(v42, CFSTR("p2pOnly"), (const void *)*MEMORY[0x1E0C9AE50]);
        goto LABEL_54;
      }
    }
  }
  CFDictionaryRemoveValue(v42, CFSTR("p2pOnly"));
LABEL_54:
  CFRelease(cfa);
  v4 = 0;
  *v44 = v42;
LABEL_55:
  CFRelease(v17);
  if (v7)
LABEL_56:
    CFRelease(v7);
  return v4;
}

const __CFDictionary *BonjourDevice_RemoveInterfaceInfo(CFDictionaryRef *a1, const char *a2, int a3)
{
  const __CFDictionary *v3;
  CFTypeID TypeID;
  const __CFDictionary *result;
  const __CFArray *v9;
  CFIndex Count;
  CFIndex v11;
  CFMutableDictionaryRef MutableCopy;
  __CFDictionary *v13;
  CFMutableArrayRef v14;
  const __CFArray *v15;
  unint64_t v16;
  CFTypeID v17;
  const __CFDictionary *TypedValueAtIndex;
  const __CFString *Value;
  char __s1[17];
  uint64_t v21;

  v21 = *MEMORY[0x1E0C80C00];
  v3 = *a1;
  if (*a1)
  {
    TypeID = CFArrayGetTypeID();
    result = CFDictionaryGetTypedValue(v3, CFSTR("services"), TypeID, 0);
    if (!result)
      return result;
    v9 = result;
    Count = CFArrayGetCount(result);
    if (Count >= 1)
    {
      v11 = Count;
      MutableCopy = CFDictionaryCreateMutableCopy(0, 0, *a1);
      if (MutableCopy)
      {
        v13 = MutableCopy;
        v14 = CFArrayCreateMutableCopy(0, 0, v9);
        if (v14)
        {
          v15 = v14;
          v16 = v11 + 1;
          do
          {
            v17 = CFDictionaryGetTypeID();
            TypedValueAtIndex = CFArrayGetTypedValueAtIndex(v15, v16 - 2, v17, 0);
            if (TypedValueAtIndex)
            {
              __s1[0] = 0;
              Value = (const __CFString *)CFDictionaryGetValue(TypedValueAtIndex, CFSTR("ifname"));
              if (Value)
                CFGetCString(Value, __s1, 0x11uLL);
              else
                __s1[0] = 0;
              if ((a3 == 0) != (strcmp(__s1, a2) != 0))
                CFArrayRemoveValueAtIndex(v15, v16 - 2);
            }
            --v16;
          }
          while (v16 > 1);
          if (CFArrayGetCount(v15) < 1)
            CFDictionaryRemoveValue(v13, CFSTR("services"));
          else
            CFDictionarySetValue(v13, CFSTR("services"), v15);
          CFRelease(*a1);
          *a1 = v13;
          CFRelease(v15);
          return 0;
        }
        CFRelease(v13);
      }
      return (const __CFDictionary *)4294960568;
    }
  }
  return 0;
}

void FadeInLayerThruBlack(void *a1, void *a2, void *a3, double a4, double a5, double a6)
{
  _FadeLayerThruBlack(a1, 1, a2, a3, a4, a5, a6);
}

void _FadeLayerThruBlack(void *a1, char a2, void *a3, void *a4, double a5, double a6, double a7)
{
  id v13;
  id v14;
  id v15;
  void *v16;
  id v17;
  void *v18;
  uint64_t v19;
  id v20;
  id v21;
  NSObject *v22;
  dispatch_time_t v23;
  id v24;
  id v25;
  id v26;
  id v27;
  _QWORD v28[4];
  id v29;
  id v30;
  id v31;
  id v32;
  double v33;
  char v34;
  _QWORD block[4];
  id v36;
  id v37;
  double v38;
  char v39;

  v13 = a1;
  v14 = a3;
  v15 = a4;
  v16 = (void *)MEMORY[0x18D78EB2C]();
  if (!v14 && v15)
  {
    v14 = (id)MEMORY[0x1E0C80D38];
    v17 = MEMORY[0x1E0C80D38];
  }
  objc_msgSend((Class)getCALayerClass[0](), "layer");
  v18 = (void *)objc_claimAutoreleasedReturnValue();
  v19 = MEMORY[0x1E0C809B0];
  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 3221225472;
  block[2] = ___FadeLayerThruBlack_block_invoke;
  block[3] = &unk_1E25DBBD0;
  v20 = v18;
  v36 = v20;
  v21 = v13;
  v37 = v21;
  v39 = a2;
  v38 = a5;
  v22 = MEMORY[0x1E0C80D38];
  dispatch_async(MEMORY[0x1E0C80D38], block);
  v23 = dispatch_time(0, (uint64_t)(a6 * 1000000000.0));
  v28[0] = v19;
  v28[1] = 3221225472;
  v28[2] = ___FadeLayerThruBlack_block_invoke_2;
  v28[3] = &unk_1E25DBC20;
  v34 = a2;
  v24 = v21;
  v29 = v24;
  v30 = v20;
  v33 = a7;
  v25 = v15;
  v32 = v25;
  v26 = v14;
  v31 = v26;
  v27 = v20;
  dispatch_after(v23, v22, v28);

  objc_autoreleasePoolPop(v16);
}

id CALayerFunction()
{
  return (id)classCALayer;
}

Class initCALayer()
{
  Class result;

  if (QuartzCoreLibrary_sOnce != -1)
    dispatch_once(&QuartzCoreLibrary_sOnce, &__block_literal_global_215);
  result = objc_getClass("CALayer");
  classCALayer = (uint64_t)result;
  getCALayerClass[0] = (uint64_t (*)())CALayerFunction;
  return result;
}

id CATransactionFunction()
{
  return (id)classCATransaction;
}

Class initCATransaction()
{
  Class result;

  if (QuartzCoreLibrary_sOnce != -1)
    dispatch_once(&QuartzCoreLibrary_sOnce, &__block_literal_global_215);
  result = objc_getClass("CATransaction");
  classCATransaction = (uint64_t)result;
  getCATransactionClass[0] = (uint64_t (*)())CATransactionFunction;
  return result;
}

id CABasicAnimationFunction()
{
  return (id)classCABasicAnimation;
}

Class initCABasicAnimation()
{
  Class result;

  if (QuartzCoreLibrary_sOnce != -1)
    dispatch_once(&QuartzCoreLibrary_sOnce, &__block_literal_global_215);
  result = objc_getClass("CABasicAnimation");
  classCABasicAnimation = (uint64_t)result;
  getCABasicAnimationClass[0] = (uint64_t (*)())CABasicAnimationFunction;
  return result;
}

id CAMediaTimingFunctionFunction()
{
  return (id)classCAMediaTimingFunction;
}

Class initCAMediaTimingFunction()
{
  Class result;

  if (QuartzCoreLibrary_sOnce != -1)
    dispatch_once(&QuartzCoreLibrary_sOnce, &__block_literal_global_215);
  result = objc_getClass("CAMediaTimingFunction");
  classCAMediaTimingFunction = (uint64_t)result;
  getCAMediaTimingFunctionClass[0] = (uint64_t (*)())CAMediaTimingFunctionFunction;
  return result;
}

id initValkCAMediaTimingFunctionEaseIn()
{
  id *v0;

  if (QuartzCoreLibrary_sOnce != -1)
    dispatch_once(&QuartzCoreLibrary_sOnce, &__block_literal_global_215);
  v0 = (id *)dlsym((void *)QuartzCoreLibrary_sLib, "kCAMediaTimingFunctionEaseIn");
  if (v0)
    objc_storeStrong((id *)&constantValkCAMediaTimingFunctionEaseIn, *v0);
  getkCAMediaTimingFunctionEaseIn[0] = (uint64_t (*)())kCAMediaTimingFunctionEaseInFunction;
  return (id)constantValkCAMediaTimingFunctionEaseIn;
}

id kCAMediaTimingFunctionEaseInFunction()
{
  return (id)constantValkCAMediaTimingFunctionEaseIn;
}

id initValkCAMediaTimingFunctionEaseOut()
{
  id *v0;

  if (QuartzCoreLibrary_sOnce != -1)
    dispatch_once(&QuartzCoreLibrary_sOnce, &__block_literal_global_215);
  v0 = (id *)dlsym((void *)QuartzCoreLibrary_sLib, "kCAMediaTimingFunctionEaseOut");
  if (v0)
    objc_storeStrong((id *)&constantValkCAMediaTimingFunctionEaseOut, *v0);
  getkCAMediaTimingFunctionEaseOut[0] = (uint64_t (*)())kCAMediaTimingFunctionEaseOutFunction;
  return (id)constantValkCAMediaTimingFunctionEaseOut;
}

id kCAMediaTimingFunctionEaseOutFunction()
{
  return (id)constantValkCAMediaTimingFunctionEaseOut;
}

void FadeOutLayerThruBlack(void *a1, void *a2, void *a3, double a4, double a5, double a6)
{
  _FadeLayerThruBlack(a1, 0, a2, a3, a4, a5, a6);
}

void *CreateCAContextForRemoteHosting()
{
  void *v0;
  const __CFUUID *v1;
  CFStringRef v2;
  void *v3;
  void *v4;
  void *v5;
  uint64_t v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;

  v0 = (void *)MEMORY[0x18D78EB2C]();
  objc_msgSend((Class)getCATransactionClass[0](), "begin");
  objc_msgSend((Class)getCATransactionClass[0](), "setDisableActions:", 1);
  v1 = CFUUIDCreate(0);
  v2 = CFUUIDCreateString(0, v1);
  CFRelease(v1);
  objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("%s-%@"), getprogname(), v2);
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  CFRelease(v2);
  v4 = (void *)MEMORY[0x1E0C99D80];
  getkCAContextDisplayName[0]();
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  v6 = *MEMORY[0x1E0C9AE50];
  getkCAContextIgnoresHitTest[0]();
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v4, "dictionaryWithObjectsAndKeys:", v3, v5, v6, v7, 0);
  v8 = (void *)objc_claimAutoreleasedReturnValue();

  objc_msgSend((Class)getCAContextClass[0](), "remoteContextWithOptions:", v8);
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend((Class)getCALayerClass[0](), "layer");
  v10 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v10, "setGeometryFlipped:", 1);
  objc_msgSend(v9, "setLayer:", v10);
  objc_msgSend((Class)getCATransactionClass[0](), "commit");

  objc_autoreleasePoolPop(v0);
  return v9;
}

id initValkCAContextDisplayName()
{
  id *v0;

  if (QuartzCoreLibrary_sOnce != -1)
    dispatch_once(&QuartzCoreLibrary_sOnce, &__block_literal_global_215);
  v0 = (id *)dlsym((void *)QuartzCoreLibrary_sLib, "kCAContextDisplayName");
  if (v0)
    objc_storeStrong((id *)&constantValkCAContextDisplayName, *v0);
  getkCAContextDisplayName[0] = (uint64_t (*)())kCAContextDisplayNameFunction;
  return (id)constantValkCAContextDisplayName;
}

id kCAContextDisplayNameFunction()
{
  return (id)constantValkCAContextDisplayName;
}

id initValkCAContextIgnoresHitTest()
{
  id *v0;

  if (QuartzCoreLibrary_sOnce != -1)
    dispatch_once(&QuartzCoreLibrary_sOnce, &__block_literal_global_215);
  v0 = (id *)dlsym((void *)QuartzCoreLibrary_sLib, "kCAContextIgnoresHitTest");
  if (v0)
    objc_storeStrong((id *)&constantValkCAContextIgnoresHitTest, *v0);
  getkCAContextIgnoresHitTest[0] = (uint64_t (*)())kCAContextIgnoresHitTestFunction;
  return (id)constantValkCAContextIgnoresHitTest;
}

id kCAContextIgnoresHitTestFunction()
{
  return (id)constantValkCAContextIgnoresHitTest;
}

id CAContextFunction()
{
  return (id)classCAContext;
}

Class initCAContext()
{
  Class result;

  if (QuartzCoreLibrary_sOnce != -1)
    dispatch_once(&QuartzCoreLibrary_sOnce, &__block_literal_global_215);
  result = objc_getClass("CAContext");
  classCAContext = (uint64_t)result;
  getCAContextClass[0] = (uint64_t (*)())CAContextFunction;
  return result;
}

id CreateCALayerForRemoteDrawing(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  id v5;

  v3 = a2;
  v4 = (void *)MEMORY[0x18D78EB2C]();
  objc_msgSend((Class)getCATransactionClass[0](), "begin");
  objc_msgSend((Class)getCATransactionClass[0](), "setDisableActions:", 1);
  v5 = objc_alloc_init((Class)getCALayerHostClass[0]());
  objc_msgSend(v5, "setContextId:", a1);
  objc_msgSend(v3, "frame");
  objc_msgSend(v5, "setFrame:");
  objc_msgSend(v3, "addSublayer:", v5);
  objc_msgSend((Class)getCATransactionClass[0](), "commit");
  objc_autoreleasePoolPop(v4);

  return v5;
}

id CALayerHostFunction()
{
  return (id)classCALayerHost;
}

Class initCALayerHost()
{
  Class result;

  if (QuartzCoreLibrary_sOnce != -1)
    dispatch_once(&QuartzCoreLibrary_sOnce, &__block_literal_global_215);
  result = objc_getClass("CALayerHost");
  classCALayerHost = (uint64_t)result;
  getCALayerHostClass[0] = (uint64_t (*)())CALayerHostFunction;
  return result;
}

void CAGetStats(_DWORD *a1)
{
  __int128 v2;
  _DWORD *v3;
  _DWORD *v4;
  _DWORD *v5;
  uint64_t v6;
  char *v7;
  _DWORD *v8;
  _DWORD *v9;
  char *v10;
  char *v11;
  char *v12;
  _DWORD *v13;
  char *v14;
  _DWORD *v15;
  _DWORD *v16;
  int v17;
  char *__lasts;

  v17 = 0;
  if (a1)
  {
    *(_QWORD *)&v2 = -1;
    *((_QWORD *)&v2 + 1) = -1;
    *((_OWORD *)a1 + 1) = v2;
    v3 = a1 + 4;
    *(_OWORD *)a1 = v2;
    v4 = a1 + 7;
    a1[8] = -1;
    v5 = a1 + 8;
    if ((CAGetStats_sInitialized & 1) != 0)
    {
      v6 = CAGetStats_sServerPort;
      if (!CAGetStats_sServerPort)
        return;
    }
    else
    {
      v6 = ((uint64_t (*)(uint64_t))softLinkCARenderServerGetServerPort[0])(0);
      CAGetStats_sServerPort = v6;
      CAGetStats_sInitialized = 1;
      if (!(_DWORD)v6)
        return;
    }
    v7 = (char *)((uint64_t (*)(uint64_t, uint64_t, uint64_t))softLinkCARenderServerGetInfo[0])(v6, 1, 0);
    if (v7)
    {
      v15 = v3;
      v16 = 0;
      v8 = 0;
      v9 = 0;
      v14 = v7;
      __lasts = v7;
      while (1)
      {
        v10 = strtok_r(__lasts, "\n", &__lasts);
        if (!v10)
          break;
        v11 = v10;
        if (strstr(v10, "LCD display:"))
        {
          v8 = a1;
          v9 = a1 + 1;
          v16 = a1 + 2;
        }
        else if (strstr(v11, "TVOut display:"))
        {
          v8 = a1 + 3;
          v9 = v15;
          v16 = a1 + 5;
        }
        else
        {
          v12 = strstr(v11, "Wireless display:");
          if (v12 || !v8)
          {
            if (v12)
              v8 = a1 + 6;
            else
              v8 = 0;
            if (v12)
              v9 = v4;
            v13 = v16;
            if (v12)
              v13 = v5;
            v16 = v13;
          }
          else if (sscanf(v11, " Total Frames: %d", &v17) == 1)
          {
            *v8 = 0;
          }
          else if (sscanf(v11, " Total Cloned Frames: %d", &v17) == 1)
          {
            *v9 = 0;
          }
          else if (sscanf(v11, " Skipped Cloned Frames: %d", &v17) == 1)
          {
            *v16 = 0;
          }
        }
      }
      free(v14);
    }
  }
  else
  {
    if (CAGetStats_sServerPort)
    {
      mach_port_deallocate(*MEMORY[0x1E0C83DA0], CAGetStats_sServerPort);
      CAGetStats_sServerPort = 0;
    }
    CAGetStats_sInitialized = 0;
  }
}

uint64_t initCARenderServerGetInfo(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (QuartzCoreLibrary_sOnce != -1)
    dispatch_once(&QuartzCoreLibrary_sOnce, &__block_literal_global_215);
  softLinkCARenderServerGetInfo[0] = (uint64_t (*)())dlsym((void *)QuartzCoreLibrary_sLib, "CARenderServerGetInfo");
  return ((uint64_t (*)(uint64_t, uint64_t, uint64_t))softLinkCARenderServerGetInfo[0])(a1, a2, a3);
}

uint64_t initCARenderServerGetServerPort(uint64_t a1)
{
  if (QuartzCoreLibrary_sOnce != -1)
    dispatch_once(&QuartzCoreLibrary_sOnce, &__block_literal_global_215);
  softLinkCARenderServerGetServerPort[0] = (uint64_t (*)())dlsym((void *)QuartzCoreLibrary_sLib, "CARenderServerGetServerPort");
  return ((uint64_t (*)(uint64_t))softLinkCARenderServerGetServerPort[0])(a1);
}

int32x4_t CADiffStats(int32x4_t *a1, int32x4_t *a2, int32x4_t *a3)
{
  int32x4_t result;

  *a1 = vsubq_s32(*a3, *a2);
  result = vsubq_s32(a3[1], a2[1]);
  a1[1] = result;
  a1[2].i32[0] = a3[2].i32[0] - a2[2].i32[0];
  return result;
}

uint64_t SaveScreenshot(char *a1)
{
  void *v2;
  void *v3;
  void *v4;
  double v5;
  double v6;
  double v7;
  double v8;
  double v9;
  double v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  void *v14;
  uint64_t v15;
  void *v16;
  uint64_t v17;
  void *v18;
  uint64_t v19;
  void *v20;
  uint64_t v21;
  void *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  const void *v29;
  uint64_t v30;
  const void *v31;
  const void *v32;
  size_t v33;
  CFURLRef v34;
  CFURLRef v35;
  const void *v36;
  uint64_t v37;
  char *__s;
  int v40;
  int v41;
  unint64_t v42;
  uint64_t v43;
  uint64_t v44;
  void *v45;
  uint64_t v46;
  void *v47;
  void *v48;
  void *v49;
  void *v50;

  v2 = (void *)MEMORY[0x18D78EB2C]();
  objc_msgSend((Class)getCADisplayClass[0](), "mainDisplay");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  v4 = v3;
  if (!v3)
  {
    v37 = 4294960596;
    goto LABEL_11;
  }
  __s = a1;
  v50 = v2;
  objc_msgSend(v3, "bounds");
  v6 = v5;
  v8 = v7;
  v11 = (unint64_t)v10;
  v12 = (4 * (unint64_t)v9 + 63) & 0xFFFFFFC0;
  v13 = ((_DWORD)v12 * (unint64_t)v10 + 4095) & 0xFFFFF000;
  v48 = (void *)MEMORY[0x1E0C99D80];
  v42 = (unint64_t)v9;
  objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInt:");
  v47 = (void *)objc_claimAutoreleasedReturnValue();
  v46 = getkIOSurfaceWidth[0]();
  v41 = v11;
  objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInt:", v11);
  v45 = (void *)objc_claimAutoreleasedReturnValue();
  v44 = getkIOSurfaceHeight[0]();
  objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInt:", 1111970369);
  v14 = (void *)objc_claimAutoreleasedReturnValue();
  v49 = v4;
  v15 = getkIOSurfacePixelFormat[0]();
  objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInt:", 4);
  v16 = (void *)objc_claimAutoreleasedReturnValue();
  v17 = getkIOSurfaceBytesPerElement[0]();
  v40 = v12;
  objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInt:", v12);
  v18 = (void *)objc_claimAutoreleasedReturnValue();
  v19 = getkIOSurfaceBytesPerRow[0]();
  v43 = v13;
  objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInt:", v13);
  v20 = (void *)objc_claimAutoreleasedReturnValue();
  v21 = getkIOSurfaceAllocSize[0]();
  objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithBool:", 1);
  v22 = (void *)objc_claimAutoreleasedReturnValue();
  v23 = getkIOSurfaceIsGlobal[0]();
  v24 = objc_msgSend(v48, "dictionaryWithObjectsAndKeys:", v47, v46, v45, v44, v14, v15, v16, v17, v18, v19, v20, v21, v22, v23, CFSTR("PurpleGfxMem"), getkIOSurfaceMemoryRegion[0](), 0);
  v25 = ((uint64_t (*)(uint64_t))softLinkIOSurfaceCreate[0])(v24);

  if (!v25)
  {
    v37 = 4294960596;
    v4 = v49;
    v2 = v50;
    goto LABEL_11;
  }
  v4 = v49;
  v26 = objc_msgSend(v49, "name");
  ((void (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))softLinkCARenderServerRenderDisplay[0])(0, v26, v25, (int)v6, (int)v8);
  ((void (*)(uint64_t, uint64_t, uint64_t))softLinkIOSurfaceLock[0])(v25, 1, 0);
  v27 = ((uint64_t (*)(uint64_t))softLinkIOSurfaceGetBaseAddress[0])(v25);
  v28 = softLinkCGDataProviderCreateWithData(v25, v27, v43, (uint64_t)_SaveScreenshotReleaseSurfaceData);
  if (v28)
  {
    v29 = (const void *)v28;
    v30 = softLinkCGColorSpaceCreateDeviceRGB[0]();
    if (v30)
    {
      v31 = (const void *)v30;
      v32 = (const void *)softLinkCGImageCreate(v42, v41, 8, 32, v40, v30, 8194, (int)v29, 0, 1, 0);
      CFRelease(v31);
      if (v32)
      {
        v33 = strlen(__s);
        v34 = CFURLCreateFromFileSystemRepresentation(0, (const UInt8 *)__s, v33, 0);
        if (v34
          && (v35 = v34,
              v36 = (const void *)((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))softLinkCGImageDestinationCreateWithURL[0])((uint64_t)v34, (uint64_t)CFSTR("public.png"), 1, 0), CFRelease(v35), v36))
        {
          ((void (*)(uint64_t, uint64_t, uint64_t))softLinkCGImageDestinationAddImage[0])((uint64_t)v36, (uint64_t)v32, 0);
          ((void (*)(uint64_t))softLinkCGImageDestinationFinalize[0])((uint64_t)v36);
          CFRelease(v36);
          v37 = 0;
        }
        else
        {
          v37 = 4294960596;
        }
        v2 = v50;
        CFRelease(v32);
        goto LABEL_10;
      }
    }
    v37 = 4294960596;
  }
  else
  {
    v37 = 4294960596;
    v29 = (const void *)v25;
  }
  v2 = v50;
LABEL_10:
  CFRelease(v29);
LABEL_11:
  objc_autoreleasePoolPop(v2);

  return v37;
}

id CADisplayFunction()
{
  return (id)classCADisplay;
}

Class initCADisplay()
{
  Class result;

  if (QuartzCoreLibrary_sOnce != -1)
    dispatch_once(&QuartzCoreLibrary_sOnce, &__block_literal_global_215);
  result = objc_getClass("CADisplay");
  classCADisplay = (uint64_t)result;
  getCADisplayClass[0] = (uint64_t (*)())CADisplayFunction;
  return result;
}

uint64_t initValkIOSurfaceWidth()
{
  uint64_t *v0;
  uint64_t result;

  if (IOSurfaceLibrary_sOnce != -1)
    dispatch_once(&IOSurfaceLibrary_sOnce, &__block_literal_global_104);
  v0 = (uint64_t *)dlsym((void *)IOSurfaceLibrary_sLib, "kIOSurfaceWidth");
  if (v0)
  {
    result = *v0;
    constantValkIOSurfaceWidth = result;
  }
  else
  {
    result = constantValkIOSurfaceWidth;
  }
  getkIOSurfaceWidth[0] = kIOSurfaceWidthFunction;
  return result;
}

uint64_t kIOSurfaceWidthFunction()
{
  return constantValkIOSurfaceWidth;
}

uint64_t initValkIOSurfaceHeight()
{
  uint64_t *v0;
  uint64_t result;

  if (IOSurfaceLibrary_sOnce != -1)
    dispatch_once(&IOSurfaceLibrary_sOnce, &__block_literal_global_104);
  v0 = (uint64_t *)dlsym((void *)IOSurfaceLibrary_sLib, "kIOSurfaceHeight");
  if (v0)
  {
    result = *v0;
    constantValkIOSurfaceHeight = result;
  }
  else
  {
    result = constantValkIOSurfaceHeight;
  }
  getkIOSurfaceHeight[0] = kIOSurfaceHeightFunction;
  return result;
}

uint64_t kIOSurfaceHeightFunction()
{
  return constantValkIOSurfaceHeight;
}

uint64_t initValkIOSurfacePixelFormat()
{
  uint64_t *v0;
  uint64_t result;

  if (IOSurfaceLibrary_sOnce != -1)
    dispatch_once(&IOSurfaceLibrary_sOnce, &__block_literal_global_104);
  v0 = (uint64_t *)dlsym((void *)IOSurfaceLibrary_sLib, "kIOSurfacePixelFormat");
  if (v0)
  {
    result = *v0;
    constantValkIOSurfacePixelFormat = result;
  }
  else
  {
    result = constantValkIOSurfacePixelFormat;
  }
  getkIOSurfacePixelFormat[0] = kIOSurfacePixelFormatFunction;
  return result;
}

uint64_t kIOSurfacePixelFormatFunction()
{
  return constantValkIOSurfacePixelFormat;
}

uint64_t initValkIOSurfaceBytesPerElement()
{
  uint64_t *v0;
  uint64_t result;

  if (IOSurfaceLibrary_sOnce != -1)
    dispatch_once(&IOSurfaceLibrary_sOnce, &__block_literal_global_104);
  v0 = (uint64_t *)dlsym((void *)IOSurfaceLibrary_sLib, "kIOSurfaceBytesPerElement");
  if (v0)
  {
    result = *v0;
    constantValkIOSurfaceBytesPerElement = result;
  }
  else
  {
    result = constantValkIOSurfaceBytesPerElement;
  }
  getkIOSurfaceBytesPerElement[0] = kIOSurfaceBytesPerElementFunction;
  return result;
}

uint64_t kIOSurfaceBytesPerElementFunction()
{
  return constantValkIOSurfaceBytesPerElement;
}

uint64_t initValkIOSurfaceBytesPerRow()
{
  uint64_t *v0;
  uint64_t result;

  if (IOSurfaceLibrary_sOnce != -1)
    dispatch_once(&IOSurfaceLibrary_sOnce, &__block_literal_global_104);
  v0 = (uint64_t *)dlsym((void *)IOSurfaceLibrary_sLib, "kIOSurfaceBytesPerRow");
  if (v0)
  {
    result = *v0;
    constantValkIOSurfaceBytesPerRow = result;
  }
  else
  {
    result = constantValkIOSurfaceBytesPerRow;
  }
  getkIOSurfaceBytesPerRow[0] = kIOSurfaceBytesPerRowFunction;
  return result;
}

uint64_t kIOSurfaceBytesPerRowFunction()
{
  return constantValkIOSurfaceBytesPerRow;
}

uint64_t initValkIOSurfaceAllocSize()
{
  uint64_t *v0;
  uint64_t result;

  if (IOSurfaceLibrary_sOnce != -1)
    dispatch_once(&IOSurfaceLibrary_sOnce, &__block_literal_global_104);
  v0 = (uint64_t *)dlsym((void *)IOSurfaceLibrary_sLib, "kIOSurfaceAllocSize");
  if (v0)
  {
    result = *v0;
    constantValkIOSurfaceAllocSize = result;
  }
  else
  {
    result = constantValkIOSurfaceAllocSize;
  }
  getkIOSurfaceAllocSize[0] = kIOSurfaceAllocSizeFunction;
  return result;
}

uint64_t kIOSurfaceAllocSizeFunction()
{
  return constantValkIOSurfaceAllocSize;
}

uint64_t initValkIOSurfaceIsGlobal()
{
  uint64_t *v0;
  uint64_t result;

  if (IOSurfaceLibrary_sOnce != -1)
    dispatch_once(&IOSurfaceLibrary_sOnce, &__block_literal_global_104);
  v0 = (uint64_t *)dlsym((void *)IOSurfaceLibrary_sLib, "kIOSurfaceIsGlobal");
  if (v0)
  {
    result = *v0;
    constantValkIOSurfaceIsGlobal = result;
  }
  else
  {
    result = constantValkIOSurfaceIsGlobal;
  }
  getkIOSurfaceIsGlobal[0] = kIOSurfaceIsGlobalFunction;
  return result;
}

uint64_t kIOSurfaceIsGlobalFunction()
{
  return constantValkIOSurfaceIsGlobal;
}

uint64_t initValkIOSurfaceMemoryRegion()
{
  uint64_t *v0;
  uint64_t result;

  if (IOSurfaceLibrary_sOnce != -1)
    dispatch_once(&IOSurfaceLibrary_sOnce, &__block_literal_global_104);
  v0 = (uint64_t *)dlsym((void *)IOSurfaceLibrary_sLib, "kIOSurfaceMemoryRegion");
  if (v0)
  {
    result = *v0;
    constantValkIOSurfaceMemoryRegion = result;
  }
  else
  {
    result = constantValkIOSurfaceMemoryRegion;
  }
  getkIOSurfaceMemoryRegion[0] = kIOSurfaceMemoryRegionFunction;
  return result;
}

uint64_t kIOSurfaceMemoryRegionFunction()
{
  return constantValkIOSurfaceMemoryRegion;
}

void _SaveScreenshotReleaseSurfaceData(const void *a1)
{
  ((void (*)(uint64_t, uint64_t, uint64_t))softLinkIOSurfaceUnlock[0])((uint64_t)a1, 1, 0);
  CFRelease(a1);
}

uint64_t initCGImageDestinationFinalize(uint64_t a1)
{
  if (ImageIOLibrary_sOnce != -1)
    dispatch_once(&ImageIOLibrary_sOnce, &__block_literal_global_123);
  softLinkCGImageDestinationFinalize[0] = (uint64_t (*)())dlsym((void *)ImageIOLibrary_sLib, "CGImageDestinationFinalize");
  return ((uint64_t (*)(uint64_t))softLinkCGImageDestinationFinalize[0])(a1);
}

uint64_t initCGImageDestinationAddImage(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (ImageIOLibrary_sOnce != -1)
    dispatch_once(&ImageIOLibrary_sOnce, &__block_literal_global_123);
  softLinkCGImageDestinationAddImage[0] = (uint64_t (*)())dlsym((void *)ImageIOLibrary_sLib, "CGImageDestinationAddImage");
  return ((uint64_t (*)(uint64_t, uint64_t, uint64_t))softLinkCGImageDestinationAddImage[0])(a1, a2, a3);
}

uint64_t initCGImageDestinationCreateWithURL(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (ImageIOLibrary_sOnce != -1)
    dispatch_once(&ImageIOLibrary_sOnce, &__block_literal_global_123);
  softLinkCGImageDestinationCreateWithURL[0] = (uint64_t (*)())dlsym((void *)ImageIOLibrary_sLib, "CGImageDestinationCreateWithURL");
  return ((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))softLinkCGImageDestinationCreateWithURL[0])(a1, a2, a3, a4);
}

uint64_t initCGImageCreate(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  if (CoreGraphicsLibrary_sOnce != -1)
    dispatch_once(&CoreGraphicsLibrary_sOnce, &__block_literal_global_117);
  softLinkCGImageCreate = (uint64_t (*)(int, int, int, int, int, int, int, int, uint64_t, char, int))dlsym((void *)CoreGraphicsLibrary_sLib, "CGImageCreate");
  return ((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))softLinkCGImageCreate)(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10);
}

uint64_t initCGColorSpaceCreateDeviceRGB()
{
  if (CoreGraphicsLibrary_sOnce != -1)
    dispatch_once(&CoreGraphicsLibrary_sOnce, &__block_literal_global_117);
  softLinkCGColorSpaceCreateDeviceRGB[0] = (uint64_t (*)())dlsym((void *)CoreGraphicsLibrary_sLib, "CGColorSpaceCreateDeviceRGB");
  return softLinkCGColorSpaceCreateDeviceRGB[0]();
}

uint64_t initCGDataProviderCreateWithData(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (CoreGraphicsLibrary_sOnce != -1)
    dispatch_once(&CoreGraphicsLibrary_sOnce, &__block_literal_global_117);
  softLinkCGDataProviderCreateWithData = (uint64_t (*)())dlsym((void *)CoreGraphicsLibrary_sLib, "CGDataProviderCreateWithData");
  return ((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))softLinkCGDataProviderCreateWithData)(a1, a2, a3, a4);
}

uint64_t initIOSurfaceUnlock(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (IOSurfaceLibrary_sOnce != -1)
    dispatch_once(&IOSurfaceLibrary_sOnce, &__block_literal_global_104);
  softLinkIOSurfaceUnlock[0] = (uint64_t (*)())dlsym((void *)IOSurfaceLibrary_sLib, "IOSurfaceUnlock");
  return ((uint64_t (*)(uint64_t, uint64_t, uint64_t))softLinkIOSurfaceUnlock[0])(a1, a2, a3);
}

uint64_t initIOSurfaceGetBaseAddress(uint64_t a1)
{
  if (IOSurfaceLibrary_sOnce != -1)
    dispatch_once(&IOSurfaceLibrary_sOnce, &__block_literal_global_104);
  softLinkIOSurfaceGetBaseAddress[0] = (uint64_t (*)())dlsym((void *)IOSurfaceLibrary_sLib, "IOSurfaceGetBaseAddress");
  return ((uint64_t (*)(uint64_t))softLinkIOSurfaceGetBaseAddress[0])(a1);
}

uint64_t initIOSurfaceLock(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (IOSurfaceLibrary_sOnce != -1)
    dispatch_once(&IOSurfaceLibrary_sOnce, &__block_literal_global_104);
  softLinkIOSurfaceLock[0] = (uint64_t (*)())dlsym((void *)IOSurfaceLibrary_sLib, "IOSurfaceLock");
  return ((uint64_t (*)(uint64_t, uint64_t, uint64_t))softLinkIOSurfaceLock[0])(a1, a2, a3);
}

uint64_t initCARenderServerRenderDisplay(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  if (QuartzCoreLibrary_sOnce != -1)
    dispatch_once(&QuartzCoreLibrary_sOnce, &__block_literal_global_215);
  softLinkCARenderServerRenderDisplay[0] = (uint64_t (*)())dlsym((void *)QuartzCoreLibrary_sLib, "CARenderServerRenderDisplay");
  return ((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))softLinkCARenderServerRenderDisplay[0])(a1, a2, a3, a4, a5);
}

uint64_t initIOSurfaceCreate(uint64_t a1)
{
  if (IOSurfaceLibrary_sOnce != -1)
    dispatch_once(&IOSurfaceLibrary_sOnce, &__block_literal_global_104);
  softLinkIOSurfaceCreate[0] = (uint64_t (*)())dlsym((void *)IOSurfaceLibrary_sLib, "IOSurfaceCreate");
  return ((uint64_t (*)(uint64_t))softLinkIOSurfaceCreate[0])(a1);
}

uint64_t cdb_read(uint64_t a1, char *__dst, size_t __n, unsigned int a4)
{
  unsigned int v4;
  char *v5;
  unsigned int v7;
  unsigned int v8;
  BOOL v9;
  ssize_t v10;
  ssize_t v11;
  uint64_t result;

  v4 = __n;
  v5 = __dst;
  if (*(_QWORD *)a1)
  {
    v7 = *(_DWORD *)(a1 + 12);
    v9 = v7 >= a4;
    v8 = v7 - a4;
    v9 = v9 && v8 >= __n;
    if (!v9)
    {
LABEL_6:
      *__error() = 100;
      return 0xFFFFFFFFLL;
    }
    memcpy(__dst, (const void *)(*(_QWORD *)a1 + a4), __n);
  }
  else
  {
    if (lseek(*(_DWORD *)(a1 + 8), a4, 0) == -1)
      return 0xFFFFFFFFLL;
    if (v4)
    {
      while (1)
      {
        while (1)
        {
          v10 = read(*(_DWORD *)(a1 + 8), v5, v4);
          if (v10 != -1)
            break;
          if (*__error() != 4)
            return 0xFFFFFFFFLL;
        }
        v11 = v10;
        if (!v10)
          break;
        result = 0;
        v5 += v11;
        v4 -= v11;
        if (!v4)
          return result;
      }
      goto LABEL_6;
    }
  }
  return 0;
}

uint64_t cdb_findnext(_DWORD *a1, unsigned __int8 *a2, int a3)
{
  unsigned int v6;
  unsigned int v7;
  uint64_t result;
  unsigned int v9;
  int v10;
  int v11;
  unsigned int v12;
  unsigned int v13;
  int v14;
  char *v15;
  size_t v16;
  unsigned int v17;
  int v18;
  unsigned __int8 *v19;
  int v20;
  int v21;
  unsigned int v22;
  int v23;
  unsigned int __dst;
  char __dst_4[32];
  uint64_t v26;

  v26 = *MEMORY[0x1E0C80C00];
  v6 = a1[4];
  if (v6)
  {
    v7 = a1[8];
  }
  else
  {
    v17 = 5381;
    if (a3)
    {
      v18 = a3;
      v19 = a2;
      do
      {
        v20 = *v19++;
        v17 = (33 * v17) ^ v20;
        --v18;
      }
      while (v18);
    }
    result = cdb_read((uint64_t)a1, (char *)&v23, 8uLL, 8 * v17);
    if ((_DWORD)result == -1)
      return result;
    v7 = __dst;
    a1[8] = __dst;
    if (!v7)
      return 0;
    v21 = v23;
    a1[7] = v23;
    a1[5] = v17;
    a1[6] = v21 + 8 * ((v17 >> 8) % v7);
    v6 = a1[4];
  }
  if (v6 >= v7)
    return 0;
  while (1)
  {
    result = cdb_read((uint64_t)a1, (char *)&v23, 8uLL, a1[6]);
    if ((_DWORD)result == -1)
      return result;
    v9 = __dst;
    if (!__dst)
      return 0;
    v10 = a1[5];
    ++a1[4];
    v11 = a1[6] + 8;
    if (v11 == a1[7] + 8 * a1[8])
      v11 = a1[7];
    a1[6] = v11;
    if (v23 == v10)
    {
      result = cdb_read((uint64_t)a1, (char *)&v23, 8uLL, v9);
      if ((_DWORD)result == -1)
        return result;
      if (v23 == a3)
      {
        v12 = v9 + 8;
        if (a3)
        {
          v13 = v9 + 8;
          v14 = a3;
          v15 = (char *)a2;
          while (1)
          {
            v16 = v14 >= 32 ? 32 : v14;
            result = cdb_read((uint64_t)a1, __dst_4, v16, v13);
            if ((_DWORD)result == -1)
              break;
            if (memcmp(__dst_4, v15, v16))
              goto LABEL_20;
            v13 += v16;
            v15 += (int)v16;
            v14 -= v16;
            if (!v14)
              goto LABEL_30;
          }
        }
        else
        {
LABEL_30:
          v22 = __dst;
          a1[9] = v12 + a3;
          a1[10] = v22;
          return 1;
        }
        return result;
      }
    }
LABEL_20:
    if (a1[4] >= a1[8])
      return 0;
  }
}

uint64_t cdb_make_addend(uint64_t a1, int a2, int a3, int a4)
{
  _DWORD *v8;
  int v9;
  _DWORD *v10;
  unsigned int v11;
  int v12;
  BOOL v13;
  int v14;
  uint64_t result;

  v8 = *(_DWORD **)(a1 + 12288);
  if (!v8 || (v9 = v8[2002], v9 >= 1000))
  {
    v8 = malloc_type_malloc(0x1F50uLL, 0x10200405A375028uLL);
    if (!v8)
      return 0xFFFFFFFFLL;
    v9 = 0;
    v8[2002] = 0;
    *((_QWORD *)v8 + 1000) = *(_QWORD *)(a1 + 12288);
    *(_QWORD *)(a1 + 12288) = v8;
  }
  v10 = &v8[2 * v9];
  v11 = *(_DWORD *)(a1 + 12352);
  *v10 = a4;
  v10[1] = v11;
  v8[2002] = v9 + 1;
  ++*(_DWORD *)(a1 + 12312);
  if (v11 < 0xFFFFFFF8)
  {
    *(_DWORD *)(a1 + 12352) = v11 + 8;
    v12 = v11 + 8 + a2;
    if (!__CFADD__(v11 + 8, a2))
    {
      *(_DWORD *)(a1 + 12352) = v12;
      v13 = __CFADD__(v12, a3);
      v14 = v12 + a3;
      if (!v13)
      {
        result = 0;
        *(_DWORD *)(a1 + 12352) = v14;
        return result;
      }
    }
  }
  *__error() = 12;
  return 0xFFFFFFFFLL;
}

uint64_t buffer_putalign(uint64_t a1, char *__src, size_t __n)
{
  unsigned int v3;
  uint64_t v6;
  unsigned int v7;
  void *v8;
  uint64_t result;

  v3 = __n;
  while (1)
  {
    v6 = *(unsigned int *)(a1 + 8);
    v7 = *(_DWORD *)(a1 + 12) - v6;
    v8 = (void *)(*(_QWORD *)a1 + v6);
    if (v3 <= v7)
      break;
    memcpy(v8, __src, (*(_DWORD *)(a1 + 12) - v6));
    *(_DWORD *)(a1 + 8) += v7;
    __src += v7;
    result = buffer_flush((uint64_t *)a1);
    v3 -= v7;
    if ((_DWORD)result == -1)
      return result;
  }
  memcpy(v8, __src, v3);
  result = 0;
  *(_DWORD *)(a1 + 8) += v3;
  return result;
}

uint64_t buffer_flush(uint64_t *a1)
{
  unsigned int v1;
  uint64_t (*v2)(uint64_t, uint64_t, uint64_t);
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v1 = *((_DWORD *)a1 + 2);
  if (v1)
  {
    *((_DWORD *)a1 + 2) = 0;
    v2 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))a1[3];
    v3 = *((unsigned int *)a1 + 4);
    v4 = *a1;
    do
    {
      v5 = v1;
      while (1)
      {
        v6 = v2(v3, v4, v5);
        if (v6 != -1)
          break;
        if (*__error() != 4)
          return 0xFFFFFFFFLL;
      }
      v4 += v6;
      v1 = v5 - v6;
    }
    while ((_DWORD)v5 != (_DWORD)v6);
  }
  return 0;
}

uint64_t buffer_putflush(uint64_t a1, uint64_t a2)
{
  uint64_t result;
  uint64_t (*v5)(uint64_t, uint64_t, uint64_t);
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  result = buffer_flush((uint64_t *)a1);
  if ((_DWORD)result != -1)
  {
    v5 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(a1 + 24);
    v6 = *(unsigned int *)(a1 + 16);
    v7 = 2048;
    do
    {
      while (1)
      {
        v8 = v5(v6, a2, v7);
        if (v8 != -1)
          break;
        if (*__error() != 4)
          return 0xFFFFFFFFLL;
      }
      a2 += v8;
      v7 = (v7 - v8);
    }
    while ((_DWORD)v7);
    return 0;
  }
  return result;
}

CFTypeRef CFBinaryPlistStreamedCreateData(const __CFString *a1, int *a2)
{
  return CFBinaryPlistStreamedCreateDataEx(a1, 31, a2);
}

CFTypeRef CFBinaryPlistStreamedCreateDataEx(const __CFString *a1, int a2, int *a3)
{
  int v6;
  CFTypeRef v7;
  CFTypeRef cf;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  __int128 v32;

  v30 = 0;
  v32 = 0u;
  v28 = 0;
  v25 = 0u;
  v24 = 0u;
  v23 = 0u;
  v22 = 0u;
  v21 = 0u;
  v20 = 0u;
  v19 = 0u;
  v18 = 0u;
  v16 = 0u;
  v17 = 0u;
  v14 = 0u;
  v15 = 0u;
  v12 = 0u;
  v13 = 0u;
  v10 = 0u;
  v11 = 0u;
  _GlobalEnsureInitialized();
  v29 = 0;
  v26 = 0u;
  v27 = 0u;
  v31 = 0;
  *(_QWORD *)&v32 = 0;
  DWORD2(v32) = 0;
  cf = CFDataCreateMutable(0, 0);
  if (!cf)
  {
    v7 = 0;
    v6 = -6728;
    goto LABEL_8;
  }
  LODWORD(v30) = a2;
  v6 = _WriteStreamed((uint64_t)&cf, a1);
  v7 = cf;
  if (v6)
  {
    if (!cf)
      goto LABEL_6;
    CFRelease(cf);
    v7 = 0;
  }
  cf = 0;
LABEL_6:
  if ((_QWORD)v26)
  {
    CFRelease((CFTypeRef)v26);
    *(_QWORD *)&v26 = 0;
  }
LABEL_8:
  if (*((_QWORD *)&v26 + 1))
    CFRelease(*((CFTypeRef *)&v26 + 1));
  if (a3)
    *a3 = v6;
  return v7;
}

void _GlobalEnsureInitialized()
{
  if (gCFStringType == -1)
  {
    gCFArrayType = CFArrayGetTypeID();
    gCFBooleanType = CFBooleanGetTypeID();
    gCFDataType = CFDataGetTypeID();
    gCFDateType = CFDateGetTypeID();
    gCFDictionaryType = CFDictionaryGetTypeID();
    gCFNumberType = CFNumberGetTypeID();
    gCFStringType = CFStringGetTypeID();
  }
}

uint64_t _WriteStreamed(uint64_t a1, const __CFString *a2)
{
  int v4;
  __int128 v5;
  __int128 v6;
  CFMutableDictionaryRef v7;
  uint64_t result;
  CFDictionaryKeyCallBacks v9;

  v4 = *(_DWORD *)(a1 + 312);
  if ((v4 & 0x40) != 0)
  {
    v5 = *(_OWORD *)(MEMORY[0x1E0C9B390] + 32);
    v6 = *MEMORY[0x1E0C9B390];
    v9.copyDescription = *(CFDictionaryCopyDescriptionCallBack *)(MEMORY[0x1E0C9B390] + 24);
    v9.hash = (CFDictionaryHashCallBack)*((_QWORD *)&v5 + 1);
    *(_OWORD *)&v9.version = (unint64_t)v6;
    v9.equal = (CFDictionaryEqualCallBack)_ObjectsExactlyEqual;
    v9.release = 0;
    v7 = CFDictionaryCreateMutable(0, 0, &v9, 0);
    *(_QWORD *)(a1 + 272) = v7;
    if (!v7)
      return 4294960568;
  }
  if ((v4 & 1) == 0 || (result = _WriteBytes(a1, (const UInt8 *)"CFB1", 4), !(_DWORD)result))
  {
    if ((v4 & 0x1C) == 0 || (result = _WriteStreamedObject(a1, a2), !(_DWORD)result))
    {
      if ((v4 & 2) == 0)
        return 0;
      result = _WriteBytes(a1, (const UInt8 *)"END!", 4);
      if (!(_DWORD)result)
        return 0;
    }
  }
  return result;
}

BOOL _ObjectsExactlyEqual(const void *a1, const __CFNumber *a2)
{
  CFTypeID v4;
  int IsFloatType;
  _BOOL8 result;

  v4 = CFGetTypeID(a1);
  result = 0;
  if (v4 == CFGetTypeID(a2))
  {
    if (CFEqual(a1, a2))
    {
      if (v4 != gCFNumberType)
        return 1;
      IsFloatType = CFNumberIsFloatType((CFNumberRef)a1);
      if (IsFloatType == CFNumberIsFloatType(a2))
        return 1;
    }
  }
  return result;
}

uint64_t _WriteBytes(uint64_t a1, const UInt8 *a2, CFIndex length)
{
  __CFData *v5;
  uint64_t (*v6)(const UInt8 *, CFIndex, _QWORD);
  uint64_t result;

  v5 = *(__CFData **)a1;
  if (v5)
  {
    CFDataAppendBytes(v5, a2, length);
LABEL_5:
    result = 0;
    *(_QWORD *)(a1 + 288) += length;
    return result;
  }
  v6 = *(uint64_t (**)(const UInt8 *, CFIndex, _QWORD))(a1 + 320);
  if (!v6)
    return 4294960551;
  result = v6(a2, length, *(_QWORD *)(a1 + 328));
  if (!(_DWORD)result)
    goto LABEL_5;
  return result;
}

uint64_t _WriteStreamedObject(uint64_t a1, const __CFString *a2)
{
  int v4;
  CFTypeID v5;
  uint64_t result;
  const char *CStringPtr;
  const char *v8;
  CFIndex v9;
  uint64_t v10;
  const UInt8 *BytePtr;
  UInt8 v12;
  CFIndex v13;
  UInt8 v14;
  CFIndex v15;
  CFIndex v16;
  CFIndex v17;
  CFIndex Bytes;
  CFIndex v19;
  BOOL v20;
  CFIndex Count;
  uint64_t v22;
  uint64_t v23;
  CFIndex v24;
  CFIndex v25;
  CFIndex v26;
  const void *ValueAtIndex;
  char v28;
  CFIndex length;
  UInt8 v30;
  void *values[2];
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  void *keys[2];
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  uint64_t v47;
  CFRange v48;

  v47 = *MEMORY[0x1E0C80C00];
  v4 = *(_DWORD *)(a1 + 312);
  v5 = CFGetTypeID(a2);
  v30 = 0;
  length = 0;
  v28 = 0;
  if (v5 != gCFStringType)
  {
    if (v5 == gCFNumberType)
    {
      result = _WriteNumber(a1, (CFNumberRef)a2, 1, 1);
      if ((_DWORD)result)
        return result;
      return 0;
    }
    if (v5 == gCFBooleanType)
    {
      if ((const __CFString *)*MEMORY[0x1E0C9AE50] == a2)
        v12 = 9;
      else
        v12 = 8;
      v30 = v12;
    }
    else
    {
      if (v5 == gCFDataType)
      {
        v13 = CFDataGetLength((CFDataRef)a2);
        if (v13 < 2
          || !*(_QWORD *)(a1 + 272)
          || (result = _WriteStreamedUpdateUID(a1, a2, &v28), !(_DWORD)result) && !v28)
        {
          v14 = v13 | 0x40;
          if (v13 >= 15)
            v14 = 79;
          v30 = v14;
          result = _WriteBytes(a1, &v30, 1);
          if (!(_DWORD)result)
          {
            if (v13 < 15 || (result = _WriteInteger(a1, v13, 1, 1), !(_DWORD)result))
            {
              BytePtr = CFDataGetBytePtr((CFDataRef)a2);
              v10 = a1;
              v9 = v13;
              goto LABEL_42;
            }
          }
        }
        return result;
      }
      if (v5 == gCFDateType)
      {
        if (!*(_QWORD *)(a1 + 272) || (result = _WriteStreamedUpdateUID(a1, a2, &v28), !(_DWORD)result) && !v28)
        {
          LOBYTE(keys[0]) = 51;
          *(void **)((char *)keys + 1) = COERCE_VOID_(MEMORY[0x18D78D644](a2));
          BytePtr = (const UInt8 *)keys;
          v10 = a1;
          v9 = 9;
          goto LABEL_42;
        }
        return result;
      }
      if (v5 == gCFDictionaryType)
      {
        if ((v4 & 4) != 0)
        {
          v30 = -48;
          result = _WriteBytes(a1, &v30, 1);
          if ((_DWORD)result)
            return result;
        }
        if ((v4 & 0x10) != 0)
        {
          Count = CFDictionaryGetCount((CFDictionaryRef)a2);
          if (Count > 16)
          {
            keys[1] = (void *)a2;
            *(_QWORD *)&v40 = 0;
            keys[0] = (void *)a1;
            CFDictionaryApplyFunction((CFDictionaryRef)a2, (CFDictionaryApplierFunction)_WriteStreamedDictionaryApplier, keys);
            result = v40;
            if ((_DWORD)v40)
              return result;
          }
          else
          {
            v22 = Count;
            v45 = 0u;
            v46 = 0u;
            v43 = 0u;
            v44 = 0u;
            v41 = 0u;
            v42 = 0u;
            *(_OWORD *)keys = 0u;
            v40 = 0u;
            v38 = 0u;
            v36 = 0u;
            v37 = 0u;
            v34 = 0u;
            v35 = 0u;
            v32 = 0u;
            v33 = 0u;
            *(_OWORD *)values = 0u;
            CFDictionaryGetKeysAndValues((CFDictionaryRef)a2, (const void **)keys, (const void **)values);
            if (v22 >= 1)
            {
              v23 = 0;
              do
              {
                result = _WriteStreamedObject(a1, keys[v23]);
                if ((_DWORD)result)
                  return result;
                result = _WriteStreamedObject(a1, values[v23]);
                if ((_DWORD)result)
                  return result;
              }
              while (v22 != ++v23);
            }
          }
        }
      }
      else
      {
        if (v5 != gCFArrayType)
        {
          if ((const __CFString *)*MEMORY[0x1E0C9B0D0] != a2)
            return 4294960561;
          v30 = 0;
          goto LABEL_17;
        }
        if ((v4 & 4) != 0)
        {
          v30 = -96;
          result = _WriteBytes(a1, &v30, 1);
          if ((_DWORD)result)
            return result;
        }
        if ((v4 & 0x10) != 0)
        {
          v24 = CFArrayGetCount((CFArrayRef)a2);
          if (v24 >= 1)
          {
            v25 = v24;
            v26 = 0;
            do
            {
              ValueAtIndex = CFArrayGetValueAtIndex((CFArrayRef)a2, v26);
              result = _WriteStreamedObject(a1, ValueAtIndex);
              if ((_DWORD)result)
                return result;
            }
            while (v25 != ++v26);
          }
        }
      }
      if ((v4 & 8) == 0)
        return 0;
      v30 = 1;
    }
LABEL_17:
    BytePtr = &v30;
LABEL_41:
    v10 = a1;
    v9 = 1;
LABEL_42:
    result = _WriteBytes(v10, BytePtr, v9);
    if ((_DWORD)result)
      return result;
    return 0;
  }
  if (!*(_QWORD *)(a1 + 272)
    || CFStringGetLength(a2) < 1
    || (result = _WriteStreamedUpdateUID(a1, a2, &v28), !(_DWORD)result) && !v28)
  {
    v30 = 112;
    result = _WriteBytes(a1, &v30, 1);
    if (!(_DWORD)result)
    {
      CStringPtr = CFStringGetCStringPtr(a2, 0x8000100u);
      if (CStringPtr)
      {
        v8 = CStringPtr;
        v9 = strlen(CStringPtr) + 1;
        v10 = a1;
        BytePtr = (const UInt8 *)v8;
        goto LABEL_42;
      }
      v15 = CFStringGetLength(a2);
      if (v15 >= 1)
      {
        v16 = v15;
        v17 = 0;
        do
        {
          v48.location = v17;
          v48.length = v16;
          Bytes = CFStringGetBytes(a2, v48, 0x8000100u, 0, 0, (UInt8 *)(a1 + 8), 256, &length);
          if (Bytes < 1)
            return 4294960561;
          v19 = Bytes;
          result = _WriteBytes(a1, (const UInt8 *)(a1 + 8), length);
          if ((_DWORD)result)
            return result;
          v17 += v19;
          v20 = v16 <= v19;
          v16 -= v19;
        }
        while (!v20);
      }
      BytePtr = (const UInt8 *)"";
      goto LABEL_41;
    }
  }
  return result;
}

uint64_t _WriteStreamedUpdateUID(uint64_t a1, const void *a2, char *a3)
{
  char *Value;
  unint64_t v7;
  CFIndex v8;
  uint64_t v9;
  __CFDictionary *v10;
  const void *v11;
  char v12;
  uint64_t result;
  UInt8 v14;
  __int16 v15;
  char v16;
  uint64_t v17;

  v17 = *MEMORY[0x1E0C80C00];
  Value = (char *)CFDictionaryGetValue(*(CFDictionaryRef *)(a1 + 272), a2);
  if (!Value)
  {
    v10 = *(__CFDictionary **)(a1 + 272);
    v11 = (const void *)(*(_QWORD *)(a1 + 280) + 1);
    *(_QWORD *)(a1 + 280) = v11;
    CFDictionaryAddValue(v10, a2, v11);
    v12 = 0;
LABEL_13:
    result = 0;
    *a3 = v12;
    return result;
  }
  v7 = (unint64_t)(Value - 1);
  if ((unint64_t)Value > 0x100)
  {
    if ((unint64_t)Value > 0x10000)
    {
      if ((unint64_t)Value >= 0x1000001)
      {
        if ((unint64_t)Value > 0x100000000)
          return 4294960586;
        v14 = -125;
        v15 = (_WORD)Value - 1;
        v16 = ((_DWORD)Value - 1) >> 16;
        v7 >>= 24;
        v8 = 5;
        v9 = 4;
      }
      else
      {
        v14 = -126;
        v15 = (_WORD)Value - 1;
        v7 >>= 16;
        v8 = 4;
        v9 = 3;
      }
    }
    else
    {
      v14 = -127;
      LOBYTE(v15) = (_BYTE)Value - 1;
      v7 >>= 8;
      v8 = 3;
      v9 = 2;
    }
  }
  else
  {
    v14 = 0x80;
    v8 = 2;
    v9 = 1;
  }
  *(&v14 + v9) = v7;
  result = _WriteBytes(a1, &v14, v8);
  if (!(_DWORD)result)
  {
    v12 = 1;
    goto LABEL_13;
  }
  return result;
}

uint64_t _WriteNumber(uint64_t a1, CFNumberRef number, int a3, int a4)
{
  uint64_t result;
  unsigned int v9;
  CFIndex v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  char v23;
  unint64_t valuePtr;
  UInt8 v25;
  unint64_t v26;
  char v27;
  char v28;
  char v29;
  char v30;
  char v31;
  char v32;
  char v33;
  char v34;
  uint64_t v35;

  v35 = *MEMORY[0x1E0C80C00];
  valuePtr = 0;
  v23 = 0;
  if (CFNumberIsFloatType(number))
  {
    if ((*(_BYTE *)(a1 + 312) & 0x40) == 0
      || (result = _WriteStreamedUpdateUID(a1, number, &v23), !(_DWORD)result) && !v23)
    {
      if (CFNumberGetByteSize(number) > 4)
      {
        CFNumberGetValue(number, kCFNumberFloat64Type, &valuePtr);
        v25 = 35;
        v18 = valuePtr;
        if (!a4)
          v18 = bswap64(valuePtr);
        v26 = v18;
        v10 = 9;
      }
      else
      {
        CFNumberGetValue(number, kCFNumberFloat32Type, &valuePtr);
        v25 = 34;
        v9 = valuePtr;
        if (!a4)
          v9 = bswap32(valuePtr);
        LODWORD(v26) = v9;
        v10 = 5;
      }
      v19 = a1;
      return _WriteBytes(v19, &v25, v10);
    }
  }
  else
  {
    if (CFNumberGetType(number) != (kCFNumberMaxType|kCFNumberSInt8Type))
    {
      CFNumberGetValue(number, kCFNumberSInt64Type, &valuePtr);
      v20 = valuePtr;
      if ((*(_BYTE *)(a1 + 312) & 0x40) != 0 && valuePtr >= 0x100)
      {
        result = _WriteStreamedUpdateUID(a1, number, &v23);
        if ((_DWORD)result || v23)
          return result;
        v20 = valuePtr;
      }
      return _WriteInteger(a1, v20, a3, a4);
    }
    v21 = 0;
    v22 = 0;
    if ((*(_BYTE *)(a1 + 312) & 0x40) == 0
      || (result = _WriteStreamedUpdateUID(a1, number, &v23), !(_DWORD)result) && !v23)
    {
      CFNumberGetValue(number, kCFNumberMaxType|kCFNumberSInt8Type, &v21);
      v25 = 20;
      if (a4)
      {
        v11 = v22 >> 8;
        v26 = v21;
        v12 = v22 >> 16;
        v27 = v22;
        v13 = v22 >> 24;
        v14 = HIDWORD(v22);
        v15 = v22 >> 40;
        v16 = HIWORD(v22);
        v17 = HIBYTE(v22);
      }
      else
      {
        LOBYTE(v17) = v22;
        v26 = bswap64(v21);
        v11 = HIWORD(v22);
        v27 = HIBYTE(v22);
        v12 = v22 >> 40;
        v13 = HIDWORD(v22);
        v14 = v22 >> 24;
        v15 = v22 >> 16;
        v16 = v22 >> 8;
      }
      v28 = v11;
      v29 = v12;
      v30 = v13;
      v31 = v14;
      v32 = v15;
      v33 = v16;
      v34 = v17;
      v19 = a1;
      v10 = 17;
      return _WriteBytes(v19, &v25, v10);
    }
  }
  return result;
}

uint64_t _WriteInteger(uint64_t a1, unint64_t a2, int a3, int a4)
{
  CFIndex v4;
  UInt8 v6;
  unint64_t v7;
  uint64_t v8;

  v8 = *MEMORY[0x1E0C80C00];
  if (a2 <= 0xF && a3)
  {
    v6 = a2 | 0x90;
    v4 = 1;
  }
  else if (a2 > 0xFF)
  {
    if (a2 >> 16)
    {
      if (HIDWORD(a2))
      {
        v6 = 19;
        if (a4)
          v7 = a2;
        else
          v7 = bswap64(a2);
        v4 = 9;
      }
      else
      {
        v6 = 18;
        if (a4)
          LODWORD(v7) = a2;
        else
          LODWORD(v7) = bswap32(a2);
        v4 = 5;
      }
    }
    else
    {
      v6 = 17;
      if (a4)
        LOWORD(v7) = a2;
      else
        LOWORD(v7) = bswap32(a2) >> 16;
      v4 = 3;
    }
  }
  else
  {
    v6 = 16;
    LOBYTE(v7) = a2;
    v4 = 2;
  }
  return _WriteBytes(a1, &v6, v4);
}

uint64_t _WriteStreamedDictionaryApplier(uint64_t result, uint64_t a2, _QWORD *a3)
{
  if (!*((_DWORD *)a3 + 4))
  {
    result = _WriteStreamedObject(*a3, result);
    if ((_DWORD)result || (result = _WriteStreamedObject(*a3, a2), (_DWORD)result))
      *((_DWORD *)a3 + 4) = result;
  }
  return result;
}

uint64_t CFBinaryPlistStreamedWriteBytes(const UInt8 *a1, unint64_t a2, uint64_t a3, uint64_t a4)
{
  UInt8 v8;
  uint64_t v9;
  UInt8 v11;
  CFTypeRef cf;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  __int128 v35;

  v33 = 0;
  v35 = 0u;
  v31 = 0;
  v28 = 0u;
  v27 = 0u;
  v26 = 0u;
  v25 = 0u;
  v24 = 0u;
  v23 = 0u;
  v22 = 0u;
  v21 = 0u;
  v19 = 0u;
  v20 = 0u;
  v17 = 0u;
  v18 = 0u;
  v15 = 0u;
  v16 = 0u;
  v13 = 0u;
  v14 = 0u;
  _GlobalEnsureInitialized();
  cf = 0;
  v32 = 0;
  v29 = 0u;
  v30 = 0u;
  DWORD2(v35) = 0;
  v8 = a2 | 0x40;
  v34 = a3;
  *(_QWORD *)&v35 = a4;
  if (a2 >= 0xF)
    v8 = 79;
  v11 = v8;
  v9 = _WriteBytes((uint64_t)&cf, &v11, 1);
  if (!(_DWORD)v9)
  {
    if (a2 < 0xF || (v9 = _WriteInteger((uint64_t)&cf, a2, 1, 1), !(_DWORD)v9))
      v9 = _WriteBytes((uint64_t)&cf, a1, a2);
  }
  if (cf)
    CFRelease(cf);
  if ((_QWORD)v29)
    CFRelease((CFTypeRef)v29);
  if (*((_QWORD *)&v29 + 1))
    CFRelease(*((CFTypeRef *)&v29 + 1));
  return v9;
}

uint64_t CFBinaryPlistStreamedWriteObject(const __CFString *a1, int a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8;
  CFTypeRef cf;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  uint64_t v29;
  uint64_t v30;
  int v31;
  int v32;
  uint64_t v33;
  __int128 v34;

  v32 = 0;
  v34 = 0u;
  v29 = 0;
  v26 = 0u;
  v25 = 0u;
  v24 = 0u;
  v23 = 0u;
  v22 = 0u;
  v21 = 0u;
  v20 = 0u;
  v19 = 0u;
  v17 = 0u;
  v18 = 0u;
  v15 = 0u;
  v16 = 0u;
  v13 = 0u;
  v14 = 0u;
  v11 = 0u;
  v12 = 0u;
  _GlobalEnsureInitialized();
  cf = 0;
  v30 = 0;
  v27 = 0u;
  v28 = 0u;
  DWORD2(v34) = 0;
  v31 = a2;
  v33 = a3;
  *(_QWORD *)&v34 = a4;
  v8 = _WriteStreamed((uint64_t)&cf, a1);
  if (cf)
  {
    CFRelease(cf);
    cf = 0;
  }
  if ((_QWORD)v27)
  {
    CFRelease((CFTypeRef)v27);
    *(_QWORD *)&v27 = 0;
  }
  if (*((_QWORD *)&v27 + 1))
    CFRelease(*((CFTypeRef *)&v27 + 1));
  return v8;
}

CFTypeRef CFBinaryPlistStreamedCreateWithBytes(unsigned __int8 *a1, uint64_t a2, int *a3)
{
  _OWORD v4[3];

  v4[0] = 0u;
  LODWORD(v4[0]) = 19;
  v4[1] = (unint64_t)a1;
  v4[2] = 0uLL;
  return _ReadStreamed((uint64_t)v4, a1, (unint64_t)&a1[a2], 0, a3);
}

CFTypeRef _ReadStreamed(uint64_t a1, unsigned __int8 *a2, unint64_t a3, _QWORD *a4, int *a5)
{
  int v10;
  __int128 v11;
  CFMutableDictionaryRef v12;
  CFTypeRef v13;
  int v14;
  int v15;
  const void *v16;
  CFDictionaryValueCallBacks v18;
  CFTypeRef cf;
  unsigned __int8 *v20;

  cf = 0;
  v20 = a2;
  _GlobalEnsureInitialized();
  v10 = *(_DWORD *)a1;
  if ((*(_DWORD *)a1 & 0x40) != 0)
  {
    v11 = *(_OWORD *)(MEMORY[0x1E0C9B3A0] + 16);
    *(_OWORD *)&v18.version = (unint64_t)*MEMORY[0x1E0C9B3A0];
    v18.copyDescription = (CFDictionaryCopyDescriptionCallBack)*((_QWORD *)&v11 + 1);
    v18.equal = (CFDictionaryEqualCallBack)_ObjectsExactlyEqual;
    v18.release = 0;
    v12 = CFDictionaryCreateMutable(0, 0, 0, &v18);
    *(_QWORD *)(a1 + 24) = v12;
    if (!v12)
    {
      v13 = 0;
      v14 = -6728;
      goto LABEL_18;
    }
    v10 = *(_DWORD *)a1;
  }
  if ((v10 & 1) != 0)
  {
    if ((uint64_t)(a3 - (_QWORD)a2) < 4)
    {
      v13 = 0;
      v14 = -6743;
      goto LABEL_18;
    }
    if (*(_DWORD *)a2 != 826426947)
    {
      v13 = 0;
      v14 = -6716;
      goto LABEL_18;
    }
    v20 = a2 + 4;
  }
  if ((v10 & 0x10) == 0)
  {
    v13 = 0;
    if ((v10 & 2) == 0)
    {
LABEL_10:
      v14 = 0;
      goto LABEL_18;
    }
LABEL_14:
    if ((uint64_t)(a3 - (_QWORD)v20) < 4)
    {
      v14 = -6743;
    }
    else
    {
      if (*(_DWORD *)v20 == 558124613)
      {
        v14 = 0;
        v20 += 4;
        goto LABEL_18;
      }
      v14 = -6716;
    }
    goto LABEL_31;
  }
  v15 = _ReadStreamedObject(a1, &v20, a3, &cf);
  v13 = cf;
  if (!v15)
  {
    if (!cf)
    {
      v14 = -6742;
      goto LABEL_18;
    }
    if ((*(_DWORD *)a1 & 2) == 0)
      goto LABEL_10;
    goto LABEL_14;
  }
  v14 = v15;
LABEL_31:
  if (v13)
  {
    CFRelease(v13);
    v13 = 0;
  }
LABEL_18:
  v16 = *(const void **)(a1 + 24);
  if (v16)
  {
    CFRelease(v16);
    *(_QWORD *)(a1 + 24) = 0;
  }
  if (a4)
    *a4 = v20;
  if (a5)
    *a5 = v14;
  return v13;
}

uint64_t _ReadStreamedObject(uint64_t a1, unsigned __int8 **a2, unint64_t a3, _QWORD *a4)
{
  unsigned __int8 *v4;
  unsigned int v5;
  CFAbsoluteTime *v6;
  _QWORD *v11;
  unsigned int v12;
  uint64_t v13;
  unsigned int v14;
  unint64_t v15;
  int v16;
  uint64_t v17;
  CFNumberRef v18;
  CFDateRef v19;
  unsigned __int8 *v20;
  uint64_t v21;
  uint64_t v22;
  __CFDictionary *v23;
  __CFArray *Mutable;
  unsigned int v25;
  unint64_t v26;
  _BYTE *v27;
  int64_t v28;
  unint64_t v29;
  uint64_t v30;
  CFNumberRef v31;
  int v32;
  unsigned int v33;
  void *v34;
  int v35;
  unsigned int v36;
  int v37;
  unsigned int v38;
  void *v39;
  CFNumberRef v40;
  CFNumberRef v41;
  CoreUtilsNSSubrangeData *SubdataWithRangeNoCopy;
  CFStringRef v43;
  CFStringRef v44;
  __CFDictionary *v45;
  char *v46;
  const __CFDictionary *v47;
  const void *v48;
  const void *v49;
  CFNumberRef v50;
  __CFDictionary *v51;
  char *v52;
  __int128 v54;
  void *value;
  __CFArray *v56;
  unint64_t valuePtr;
  unsigned __int8 *v58;
  unsigned int v59;

  v59 = 0;
  v56 = 0;
  valuePtr = 0;
  value = 0;
  v4 = *a2;
  if ((unint64_t)*a2 < a3)
  {
    v6 = (CFAbsoluteTime *)(v4 + 1);
    v5 = *v4;
    v58 = v4 + 1;
    switch(v5 >> 4)
    {
      case 0u:
        switch(v5)
        {
          case 0u:
            v11 = (_QWORD *)MEMORY[0x1E0C9B0D0];
            break;
          case 1u:
            *a4 = 0;
            goto LABEL_94;
          case 8u:
            v11 = (_QWORD *)MEMORY[0x1E0C9AE40];
            break;
          case 9u:
            v11 = (_QWORD *)MEMORY[0x1E0C9AE50];
            break;
          default:
            goto LABEL_72;
        }
        *a4 = *v11;
        goto LABEL_94;
      case 1u:
        v12 = v5 & 0xF;
        if (v12 > 3)
        {
          if (v12 != 4)
          {
            v23 = 0;
            Mutable = 0;
            v25 = -6764;
            goto LABEL_79;
          }
          if ((uint64_t)(a3 - (_QWORD)v6) < 16)
          {
LABEL_114:
            v25 = -6743;
          }
          else
          {
            v54 = *(_OWORD *)(v4 + 1);
            v58 = v4 + 17;
            v40 = CFNumberCreate(0, kCFNumberMaxType|kCFNumberSInt8Type, &v54);
            if (v40)
            {
              v18 = v40;
              *a4 = v40;
              goto LABEL_92;
            }
            v25 = -6728;
          }
          goto LABEL_78;
        }
        v13 = 1 << v12;
        if (a3 - (unint64_t)v6 < 1 << v12)
        {
          v14 = -6743;
LABEL_119:
          v23 = 0;
          Mutable = 0;
          v59 = v14;
          goto LABEL_95;
        }
        v14 = -6764;
        switch((int)v13)
        {
          case 1:
            v15 = *(unsigned __int8 *)v6;
            break;
          case 2:
            v15 = *(unsigned __int16 *)(v4 + 1);
            break;
          case 4:
            v15 = *(unsigned int *)v6;
            break;
          case 8:
            v15 = *(_QWORD *)v6;
            break;
          default:
            goto LABEL_119;
        }
        valuePtr = v15;
        v58 = (unsigned __int8 *)v6 + v13;
        v50 = CFNumberCreate(0, kCFNumberSInt64Type, &valuePtr);
        if (!v50)
          goto LABEL_111;
        v18 = v50;
        *a4 = v50;
        if (!v12)
          goto LABEL_94;
        goto LABEL_92;
      case 2u:
        v16 = v5 & 0xF;
        if (v16 == 3)
        {
          if ((uint64_t)(a3 - (_QWORD)v6) <= 7)
            goto LABEL_61;
          valuePtr = *(_QWORD *)v6;
          v41 = CFNumberCreate(0, kCFNumberFloat64Type, &valuePtr);
          if (v41)
          {
            v18 = v41;
            v17 = 9;
LABEL_59:
            v20 = &v4[v17];
            goto LABEL_60;
          }
LABEL_111:
          v23 = 0;
LABEL_112:
          Mutable = 0;
LABEL_113:
          v25 = -6728;
        }
        else
        {
          if (v16 == 2 && (uint64_t)(a3 - (_QWORD)v6) > 3)
          {
            LODWORD(valuePtr) = *(_DWORD *)v6;
            v17 = 5;
            v18 = CFNumberCreate(0, kCFNumberFloat32Type, &valuePtr);
            if (!v18)
              goto LABEL_111;
            goto LABEL_59;
          }
LABEL_61:
          v23 = 0;
          Mutable = 0;
          v25 = -6743;
        }
        goto LABEL_79;
      case 3u:
        if (v5 != 51)
        {
LABEL_72:
          v23 = 0;
          Mutable = 0;
          v25 = -6756;
          goto LABEL_79;
        }
        if ((uint64_t)(a3 - (_QWORD)v6) <= 7)
          goto LABEL_61;
        v19 = CFDateCreate(0, *v6);
        if (!v19)
          goto LABEL_111;
        v18 = v19;
        v20 = v4 + 9;
LABEL_60:
        v58 = v20;
        *a4 = v18;
        goto LABEL_92;
      case 4u:
        v21 = v5 & 0xF;
        valuePtr = v21;
        if ((v5 & 0xF) != 0xF)
          goto LABEL_22;
        v59 = _ReadInteger(&v58, a3, &valuePtr, 1, 1);
        if (v59)
          goto LABEL_86;
        v21 = valuePtr;
        if (valuePtr >> 31)
        {
          v23 = 0;
          Mutable = 0;
          v25 = -6710;
          goto LABEL_79;
        }
        v6 = (CFAbsoluteTime *)v58;
LABEL_22:
        if (v21 > (uint64_t)(a3 - (_QWORD)v6))
          break;
        v22 = *(_QWORD *)(a1 + 8);
        if (v22 && (*(_BYTE *)a1 & 0x20) != 0)
        {
          SubdataWithRangeNoCopy = CFDataCreateSubdataWithRangeNoCopy(v22, (uint64_t)v6 - *(_QWORD *)(a1 + 16), v21, (int *)&v59);
          if (!SubdataWithRangeNoCopy)
          {
LABEL_86:
            v23 = 0;
            goto LABEL_110;
          }
          v18 = (CFNumberRef)SubdataWithRangeNoCopy;
          v21 = valuePtr;
        }
        else
        {
          v18 = CFDataCreate(0, (const UInt8 *)v6, v21);
          if (!v18)
            goto LABEL_111;
        }
        v58 = (unsigned __int8 *)v6 + v21;
        *a4 = v18;
        if ((unint64_t)v21 >= 2)
        {
LABEL_92:
          v51 = *(__CFDictionary **)(a1 + 24);
          if (v51)
          {
            v52 = *(char **)(a1 + 32);
            *(_QWORD *)(a1 + 32) = v52 + 1;
            CFDictionaryAddValue(v51, v52, v18);
          }
        }
        goto LABEL_94;
      case 7u:
        if ((unint64_t)v6 >= a3)
          break;
        v26 = ~(unint64_t)v4 + a3;
        v27 = v4 + 1;
        while (*v27)
        {
          ++v27;
          if (!--v26)
            goto LABEL_32;
        }
        v43 = CFStringCreateWithCString(0, (const char *)v6, 0x8000100u);
        if (!v43)
        {
          v23 = 0;
          Mutable = 0;
          v25 = -6742;
          goto LABEL_79;
        }
        v44 = v43;
        *a4 = v43;
        if (*(_BYTE *)v6)
        {
          v45 = *(__CFDictionary **)(a1 + 24);
          if (v45)
          {
            v46 = *(char **)(a1 + 32);
            *(_QWORD *)(a1 + 32) = v46 + 1;
            CFDictionaryAddValue(v45, v46, v44);
          }
        }
        v58 = v27 + 1;
        goto LABEL_94;
      case 8u:
        v28 = v5 & 0xF;
        if ((uint64_t)(a3 - (_QWORD)v6) < v28)
          goto LABEL_114;
        switch((int)v28)
        {
          case 0:
            v29 = *(unsigned __int8 *)v6;
            v30 = 1;
            break;
          case 1:
            v29 = *(unsigned __int16 *)(v4 + 1);
            v30 = 2;
            break;
          case 2:
            v29 = *(unsigned __int16 *)(v4 + 1) | ((unint64_t)v4[3] << 16);
            v30 = 3;
            break;
          case 3:
            v29 = *(unsigned int *)v6;
            v30 = 4;
            break;
          default:
            v25 = -6710;
            goto LABEL_78;
        }
        v47 = *(const __CFDictionary **)(a1 + 24);
        if (v47)
        {
          v48 = CFDictionaryGetValue(v47, (const void *)v29);
          if (v48)
          {
            v49 = v48;
            CFRetain(v48);
            v58 = (unsigned __int8 *)v6 + v30;
            *a4 = v49;
            v59 = 0;
LABEL_94:
            v23 = 0;
            Mutable = 0;
            *a2 = v58;
            v59 = 0;
            goto LABEL_95;
          }
          v25 = -6708;
        }
        else
        {
          v25 = -6732;
        }
LABEL_78:
        v23 = 0;
        Mutable = 0;
        goto LABEL_79;
      case 9u:
        LOBYTE(valuePtr) = v5 & 0xF;
        v31 = CFNumberCreate(0, kCFNumberSInt8Type, &valuePtr);
        if (!v31)
          goto LABEL_111;
        *a4 = v31;
        goto LABEL_94;
      case 0xAu:
        Mutable = CFArrayCreateMutable(0, 0, MEMORY[0x1E0C9B378]);
        if (!Mutable)
        {
          v23 = 0;
          goto LABEL_113;
        }
        while (1)
        {
          v32 = *(_DWORD *)(a1 + 40);
          if (v32 > 31)
          {
            v23 = 0;
            goto LABEL_105;
          }
          *(_DWORD *)(a1 + 40) = v32 + 1;
          v33 = _ReadStreamedObject(a1, &v58, a3, &value);
          v59 = v33;
          --*(_DWORD *)(a1 + 40);
          if (v33)
            break;
          v34 = value;
          if (!value)
          {
            *a4 = Mutable;
            goto LABEL_94;
          }
          CFArrayAppendValue(Mutable, value);
          CFRelease(v34);
          value = 0;
        }
        v23 = 0;
        goto LABEL_95;
      case 0xDu:
        v23 = CFDictionaryCreateMutable(0, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
        if (!v23)
          goto LABEL_112;
        while (2)
        {
          v35 = *(_DWORD *)(a1 + 40);
          if (v35 > 31)
          {
            Mutable = 0;
LABEL_105:
            v25 = -6751;
            goto LABEL_79;
          }
          *(_DWORD *)(a1 + 40) = v35 + 1;
          v36 = _ReadStreamedObject(a1, &v58, a3, &v56);
          v59 = v36;
          v37 = *(_DWORD *)(a1 + 40);
          *(_DWORD *)(a1 + 40) = v37 - 1;
          Mutable = v56;
          if (v36)
          {
            if (!v56)
              goto LABEL_95;
          }
          else
          {
            if (!v56)
            {
              *a4 = v23;
              goto LABEL_94;
            }
            *(_DWORD *)(a1 + 40) = v37;
            v38 = _ReadStreamedObject(a1, &v58, a3, &value);
            v59 = v38;
            --*(_DWORD *)(a1 + 40);
            if (!v38)
            {
              v39 = value;
              if (value)
              {
                CFDictionarySetValue(v23, Mutable, value);
                CFRelease(Mutable);
                v56 = 0;
                CFRelease(v39);
                value = 0;
                continue;
              }
              v59 = -6750;
            }
          }
          break;
        }
        CFRelease(Mutable);
LABEL_110:
        Mutable = 0;
        goto LABEL_95;
      default:
        v23 = 0;
        Mutable = 0;
        v25 = -6735;
        goto LABEL_79;
    }
  }
LABEL_32:
  v23 = 0;
  Mutable = 0;
  v25 = -6750;
LABEL_79:
  v59 = v25;
LABEL_95:
  if (value)
    CFRelease(value);
  if (Mutable)
    CFRelease(Mutable);
  if (v23)
    CFRelease(v23);
  return v59;
}

uint64_t _ReadInteger(unsigned __int8 **a1, unint64_t a2, unint64_t *a3, int a4, int a5)
{
  unsigned __int8 *v5;
  unsigned __int8 *v7;
  unsigned __int8 v8;
  unsigned __int8 v9;
  int v10;
  uint64_t result;
  unsigned __int8 *v12;

  v5 = *a1;
  if ((unint64_t)*a1 >= a2)
    return 4294960546;
  v9 = *v5;
  v7 = v5 + 1;
  v8 = v9;
  v12 = v7;
  v10 = v9 & 0xF0;
  if (a4 && v10 == 144)
  {
    *a3 = v8 & 0xF;
LABEL_8:
    result = 0;
    *a1 = v7;
    return result;
  }
  if (v10 != 16)
    return 4294960540;
  result = _ReadSizedInteger(&v12, a2, 1 << (v8 & 0xF), a3, a5);
  if (!(_DWORD)result)
  {
    v7 = v12;
    goto LABEL_8;
  }
  return result;
}

uint64_t _ReadSizedInteger(unsigned __int8 **a1, uint64_t a2, unint64_t a3, unint64_t *a4, int a5)
{
  unsigned __int8 *v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;

  v5 = *a1;
  if (a2 - (uint64_t)*a1 < a3)
    return 4294960553;
  v6 = 4294960532;
  switch(a3)
  {
    case 1uLL:
      v7 = *v5;
      goto LABEL_13;
    case 2uLL:
      v8 = *v5;
      if (a5)
        v7 = v8 | ((unint64_t)v5[1] << 8);
      else
        v7 = v5[1] | (unint64_t)(v8 << 8);
      goto LABEL_13;
    case 4uLL:
      if (a5)
        v7 = *(unsigned int *)v5;
      else
        v7 = bswap32(*(_DWORD *)v5);
      goto LABEL_13;
    case 8uLL:
      if (a5)
        v7 = *(_QWORD *)v5;
      else
        v7 = bswap64(*(_QWORD *)v5);
LABEL_13:
      v6 = 0;
      *a4 = v7;
      *a1 = &v5[a3];
      break;
    default:
      return v6;
  }
  return v6;
}

CFTypeRef CFBinaryPlistStreamedCreateWithBytesEx(unsigned __int8 *a1, uint64_t a2, int a3, int *a4)
{
  _OWORD v5[3];

  v5[0] = 0u;
  LODWORD(v5[0]) = a3;
  v5[1] = (unint64_t)a1;
  v5[2] = 0uLL;
  return _ReadStreamed((uint64_t)v5, a1, (unint64_t)&a1[a2], 0, a4);
}

CFTypeRef CFBinaryPlistStreamedCreateWithBytesEx2(unsigned __int8 *a1, uint64_t a2, int a3, _QWORD *a4, int *a5)
{
  _OWORD v6[3];

  v6[0] = 0u;
  LODWORD(v6[0]) = a3;
  v6[1] = (unint64_t)a1;
  v6[2] = 0uLL;
  return _ReadStreamed((uint64_t)v6, a1, (unint64_t)&a1[a2], a4, a5);
}

CFTypeRef CFBinaryPlistStreamedCreateWithData(const __CFData *a1, unsigned int a2, int *a3)
{
  unsigned __int8 *BytePtr;
  CFIndex Length;
  _QWORD v8[2];
  __int128 v9;
  __int128 v10;

  v10 = 0u;
  v8[0] = a2;
  v8[1] = a1;
  BytePtr = (unsigned __int8 *)CFDataGetBytePtr(a1);
  *(_QWORD *)&v10 = 0;
  v9 = (unint64_t)BytePtr;
  DWORD2(v10) = 0;
  Length = CFDataGetLength(a1);
  return _ReadStreamed((uint64_t)v8, BytePtr, (unint64_t)&BytePtr[Length], 0, a3);
}

CFMutableDataRef CFBinaryPlistV0CreateData(const void *a1, int *a2)
{
  return CFBinaryPlistV0CreateDataEx(a1, 0, a2);
}

CFMutableDataRef CFBinaryPlistV0CreateDataEx(const void *a1, int a2, int *a3)
{
  __int128 v6;
  int v7;
  int v8;
  CFMutableDataRef v9;
  char v10;
  _QWORD *v11;
  _QWORD *v12;
  uint64_t v13;
  CFIndex v14;
  const __CFString *ValueAtIndex;
  CFTypeID v16;
  const char *CStringPtr;
  UInt8 *v18;
  size_t v19;
  UInt8 *v20;
  int v21;
  UInt8 v22;
  UInt8 *BytePtr;
  CFIndex v24;
  CFIndex v25;
  CFIndex MaximumSizeForEncoding;
  CFIndex v27;
  CFIndex Length;
  int64_t v29;
  char v30;
  int v31;
  uint64_t v32;
  void *v33;
  char v34;
  CFIndex v35;
  int64_t v36;
  CFIndex v37;
  CFIndex v38;
  char v39;
  int v40;
  CFIndex Count;
  int64_t v42;
  char v43;
  void *v44;
  CFIndex v45;
  uint64_t v46;
  char v47;
  char v48;
  unsigned __int8 v49;
  uint64_t v50;
  CFIndex v51;
  const UInt8 *v52;
  int v53;
  const __CFString *v55;
  int *v56;
  const __CFString *v57;
  __int128 v58;
  __int128 v59;
  CFDictionaryKeyCallBacks keyCallBacks;
  CFMutableDataRef context;
  _OWORD v62[16];
  __int128 theArray;
  __int128 v64;
  uint64_t v65;
  uint64_t v66;
  int v67;
  int v68;
  uint64_t v69;
  __int128 v70;
  unint64_t v71;
  UInt8 v72;
  UInt8 v73;
  CFIndex usedBufLen[4];
  CFRange v75;
  CFRange v76;
  CFRange v77;

  usedBufLen[1] = *MEMORY[0x1E0C80C00];
  v68 = 0;
  v70 = 0u;
  v65 = 0;
  memset(v62, 0, sizeof(v62));
  v59 = 0u;
  memset(&keyCallBacks, 0, sizeof(keyCallBacks));
  v58 = 0u;
  _GlobalEnsureInitialized();
  v66 = 0;
  theArray = 0u;
  v64 = 0u;
  v69 = 0;
  *(_QWORD *)&v70 = 0;
  DWORD2(v70) = 0;
  v67 = a2;
  context = CFDataCreateMutable(0, 0);
  if (!context)
  {
    v9 = 0;
    v8 = -6728;
    goto LABEL_116;
  }
  *(_QWORD *)&theArray = CFArrayCreateMutable(0, 0, 0);
  if ((_QWORD)theArray)
  {
    v6 = *(_OWORD *)(MEMORY[0x1E0C9B390] + 32);
    *(_OWORD *)&keyCallBacks.release = *(_OWORD *)(MEMORY[0x1E0C9B390] + 16);
    *(_OWORD *)&keyCallBacks.equal = v6;
    keyCallBacks.version = *MEMORY[0x1E0C9B390];
    keyCallBacks.equal = (CFDictionaryEqualCallBack)_ObjectsExactlyEqual;
    keyCallBacks.retain = 0;
    keyCallBacks.release = 0;
    *((_QWORD *)&theArray + 1) = CFDictionaryCreateMutable(0, 0, &keyCallBacks, 0);
    if (*((_QWORD *)&theArray + 1))
    {
      _FlattenPlist((uint64_t)&context, a1);
      v7 = _WriteBytes((uint64_t)&context, (const UInt8 *)"bplist00", 8);
      if (v7)
      {
        v8 = v7;
        v9 = 0;
        goto LABEL_114;
      }
      *(_QWORD *)&v58 = 0;
      v59 = 0u;
      *((_QWORD *)&v58 + 1) = bswap64(v64);
      if (DWORD1(v64))
      {
        v10 = 8;
      }
      else if ((v64 & 0xFFFF0000) != 0)
      {
        v10 = 4;
      }
      else
      {
        v10 = (v64 & 0xFF00) != 0 ? 2 : 1;
      }
      BYTE7(v58) = v10;
      LOBYTE(v65) = v10;
      v11 = malloc_type_malloc(8 * v64, 0x100004000313F17uLL);
      if (v11)
      {
        v12 = v11;
        v13 = v64;
        if ((uint64_t)v64 < 1)
        {
LABEL_95:
          *((_QWORD *)&v59 + 1) = bswap64(*((unint64_t *)&v64 + 1));
          if ((WORD4(v64) & 0xFF00) != 0)
            v48 = 2;
          else
            v48 = 1;
          if ((DWORD2(v64) & 0xFFFF0000) != 0)
            v49 = 4;
          else
            v49 = v48;
          if (HIDWORD(*((_QWORD *)&v64 + 1)))
            v49 = 8;
          BYTE6(v58) = v49;
          if (v13 < 1)
          {
LABEL_107:
            v8 = _WriteBytes((uint64_t)&context, (const UInt8 *)&v58, 32);
            if (!v8)
            {
              v9 = context;
              context = 0;
              goto LABEL_113;
            }
          }
          else
          {
            v50 = 0;
            v51 = v49;
            v52 = (const UInt8 *)&usedBufLen[1] - v49;
            while (1)
            {
              usedBufLen[0] = bswap64(v12[v50]);
              v53 = _WriteBytes((uint64_t)&context, v52, v51);
              if (v53)
                break;
              if (++v50 >= (uint64_t)v64)
                goto LABEL_107;
            }
            v8 = v53;
          }
          v9 = 0;
LABEL_113:
          free(v12);
          goto LABEL_114;
        }
        v56 = a3;
        v14 = 0;
        v55 = (const __CFString *)*MEMORY[0x1E0C9B0D0];
        v57 = (const __CFString *)*MEMORY[0x1E0C9AE50];
        while (1)
        {
          v12[v14] = *((_QWORD *)&v64 + 1);
          ValueAtIndex = (const __CFString *)CFArrayGetValueAtIndex((CFArrayRef)theArray, v14);
          v72 = 0;
          v71 = 0;
          v16 = CFGetTypeID(ValueAtIndex);
          if (v16 == gCFStringType)
            break;
          if (v16 == gCFNumberType)
          {
            v21 = _WriteNumber((uint64_t)&context, (CFNumberRef)ValueAtIndex, 0, 0);
            goto LABEL_37;
          }
          if (v16 == gCFBooleanType)
          {
            if (v57 == ValueAtIndex)
              v22 = 9;
            else
              v22 = 8;
            v72 = v22;
            goto LABEL_26;
          }
          if (v16 == gCFDataType)
          {
            Length = CFDataGetLength((CFDataRef)ValueAtIndex);
            v29 = Length;
            v30 = 15;
            if (Length < 15)
              v30 = Length;
            v72 = v30 | 0x40;
            v31 = _WriteBytes((uint64_t)&context, &v72, 1);
            if (v31)
              goto LABEL_111;
            if (v29 >= 15)
            {
              v31 = _WriteInteger((uint64_t)&context, v29, 0, 0);
              if (v31)
                goto LABEL_111;
            }
            BytePtr = (UInt8 *)CFDataGetBytePtr((CFDataRef)ValueAtIndex);
            v24 = v29;
LABEL_36:
            v21 = _WriteBytes((uint64_t)&context, BytePtr, v24);
LABEL_37:
            v8 = v21;
            if (v21)
              goto LABEL_112;
            goto LABEL_66;
          }
          if (v16 == gCFDictionaryType)
          {
            Count = CFDictionaryGetCount((CFDictionaryRef)ValueAtIndex);
            v42 = Count;
            v43 = 15;
            if (Count < 15)
              v43 = Count;
            v72 = v43 | 0xD0;
            v31 = _WriteBytes((uint64_t)&context, &v72, 1);
            if (v31)
              goto LABEL_111;
            if (v42 >= 15)
            {
              v31 = _WriteInteger((uint64_t)&context, v42, 0, 0);
              if (v31)
                goto LABEL_111;
            }
            CFDictionaryApplyFunction((CFDictionaryRef)ValueAtIndex, (CFDictionaryApplierFunction)_WriteV0DictionaryKey, &context);
            CFDictionaryApplyFunction((CFDictionaryRef)ValueAtIndex, (CFDictionaryApplierFunction)_WriteV0DictionaryValue, &context);
          }
          else
          {
            if (v16 != gCFArrayType)
            {
              if (v16 == gCFDateType)
              {
                v72 = 51;
                v31 = _WriteBytes((uint64_t)&context, &v72, 1);
                if (v31)
                  goto LABEL_111;
                v71 = bswap64(COERCE_UNSIGNED_INT64(MEMORY[0x18D78D644](ValueAtIndex)));
                BytePtr = (UInt8 *)&v71;
                v24 = 8;
                goto LABEL_36;
              }
              if (v55 != ValueAtIndex)
              {
                v8 = -6732;
LABEL_112:
                v9 = 0;
                a3 = v56;
                goto LABEL_113;
              }
              v72 = 0;
LABEL_26:
              BytePtr = &v72;
              v24 = 1;
              goto LABEL_36;
            }
            v45 = CFArrayGetCount((CFArrayRef)ValueAtIndex);
            v46 = v45;
            v47 = 15;
            if (v45 < 15)
              v47 = v45;
            v72 = v47 | 0xA0;
            v31 = _WriteBytes((uint64_t)&context, &v72, 1);
            if (v31 || v46 >= 15 && (v31 = _WriteInteger((uint64_t)&context, v46, 0, 0)) != 0)
            {
LABEL_111:
              v8 = v31;
              goto LABEL_112;
            }
            v77.location = 0;
            v77.length = v46;
            CFArrayApplyFunction((CFArrayRef)ValueAtIndex, v77, (CFArrayApplierFunction)_WriteV0ArrayValue, &context);
          }
LABEL_66:
          ++v14;
          v13 = v64;
          if (v14 >= (uint64_t)v64)
          {
            a3 = v56;
            goto LABEL_95;
          }
        }
        v73 = 0;
        usedBufLen[0] = 0;
        CStringPtr = CFStringGetCStringPtr(ValueAtIndex, 0x8000100u);
        if (CStringPtr)
        {
          v18 = (UInt8 *)CStringPtr;
          v19 = strlen(CStringPtr);
          v20 = 0;
        }
        else
        {
          v25 = CFStringGetLength(ValueAtIndex);
          MaximumSizeForEncoding = CFStringGetMaximumSizeForEncoding(v25, 0x8000100u);
          v27 = MaximumSizeForEncoding;
          usedBufLen[0] = MaximumSizeForEncoding;
          if (MaximumSizeForEncoding >= 256)
          {
            v20 = (UInt8 *)malloc_type_malloc(MaximumSizeForEncoding + 1, 0x6A741D23uLL);
            v18 = v20;
            if (!v20)
              goto LABEL_93;
          }
          else
          {
            v20 = 0;
            v18 = (UInt8 *)v62;
          }
          v75.location = 0;
          v75.length = v25;
          if (CFStringGetBytes(ValueAtIndex, v75, 0x8000100u, 0, 0, v18, v27, usedBufLen) != v25)
          {
            v33 = 0;
            v8 = -6700;
            if (v20)
LABEL_62:
              free(v20);
LABEL_63:
            if (v33)
              free(v33);
            if (v8)
              goto LABEL_112;
            goto LABEL_66;
          }
          v18[usedBufLen[0]] = 0;
          v19 = usedBufLen[0];
        }
        v32 = 0;
        if (v19)
        {
          while (((char)v18[v32] & 0x80000000) == 0)
          {
            if (v19 == ++v32)
              goto LABEL_47;
          }
        }
        if (v32 == v19)
        {
LABEL_47:
          v33 = 0;
          v34 = 80;
        }
        else
        {
          if ((v67 & 1) == 0)
          {
            if (v20)
              free(v20);
            v35 = CFStringGetLength(ValueAtIndex);
            v36 = CFStringGetMaximumSizeForEncoding(v35, 0x10000100u);
            v37 = v36;
            usedBufLen[0] = v36;
            if (v36 >= 257)
            {
              v44 = malloc_type_malloc(v36, 0xC5DCBB94uLL);
              if (!v44)
              {
LABEL_93:
                v8 = -6728;
                goto LABEL_112;
              }
              v33 = v44;
              v37 = usedBufLen[0];
              v18 = (UInt8 *)v44;
            }
            else
            {
              v33 = 0;
              v18 = (UInt8 *)v62;
            }
            v76.location = 0;
            v76.length = v35;
            if (CFStringGetBytes(ValueAtIndex, v76, 0x10000100u, 0, 0, v18, v37, usedBufLen) != v35)
            {
              v8 = -6700;
              goto LABEL_63;
            }
            v20 = 0;
            v38 = usedBufLen[0];
            v19 = (unint64_t)usedBufLen[0] >> 1;
            v34 = 96;
            goto LABEL_55;
          }
          v33 = 0;
          v34 = 112;
        }
        v38 = v19;
LABEL_55:
        v39 = 15;
        if (v19 < 0xF)
          v39 = v19;
        v73 = v34 | v39;
        v40 = _WriteBytes((uint64_t)&context, &v73, 1);
        if (!v40 && (v19 < 0xF || (v40 = _WriteInteger((uint64_t)&context, v19, 0, 0)) == 0))
          v40 = _WriteBytes((uint64_t)&context, v18, v38);
        v8 = v40;
        if (v20)
          goto LABEL_62;
        goto LABEL_63;
      }
    }
  }
  v9 = 0;
  v8 = -6728;
LABEL_114:
  if (context)
  {
    CFRelease(context);
    context = 0;
  }
LABEL_116:
  if ((_QWORD)theArray)
  {
    CFRelease((CFTypeRef)theArray);
    *(_QWORD *)&theArray = 0;
  }
  if (*((_QWORD *)&theArray + 1))
    CFRelease(*((CFTypeRef *)&theArray + 1));
  if (a3)
    *a3 = v8;
  return v9;
}

void _FlattenPlist(uint64_t a1, const void *a2)
{
  CFIndex Count;
  CFTypeID v5;
  CFTypeID v6;
  BOOL v10;
  CFRange v11;

  Count = CFDictionaryGetCount(*(CFDictionaryRef *)(a1 + 272));
  CFDictionaryAddValue(*(CFMutableDictionaryRef *)(a1 + 272), a2, *(const void **)(a1 + 280));
  v5 = CFGetTypeID(a2);
  v6 = v5;
  v10 = v5 == gCFStringType || v5 == gCFNumberType || v5 == gCFBooleanType || v5 == gCFDataType || v5 == gCFDateType;
  if (!v10 || CFDictionaryGetCount(*(CFDictionaryRef *)(a1 + 272)) != Count)
  {
    CFArrayAppendValue(*(CFMutableArrayRef *)(a1 + 264), a2);
    ++*(_QWORD *)(a1 + 280);
    if (v6 == gCFDictionaryType)
    {
      CFDictionaryApplyFunction((CFDictionaryRef)a2, (CFDictionaryApplierFunction)_FlattenDictionaryKey, (void *)a1);
      CFDictionaryApplyFunction((CFDictionaryRef)a2, (CFDictionaryApplierFunction)_FlattenDictionaryValue, (void *)a1);
    }
    else if (v6 == gCFArrayType)
    {
      v11.length = CFArrayGetCount((CFArrayRef)a2);
      v11.location = 0;
      CFArrayApplyFunction((CFArrayRef)a2, v11, (CFArrayApplierFunction)_FlattenArray, (void *)a1);
    }
  }
}

uint64_t _WriteV0DictionaryKey(void *key, uint64_t a2, uint64_t a3)
{
  unsigned int v5;

  v5 = bswap32(CFDictionaryGetValue(*(CFDictionaryRef *)(a3 + 272), key));
  return _WriteBytes(a3, (const UInt8 *)&v5 - *(unsigned __int8 *)(a3 + 296) + 4, *(unsigned __int8 *)(a3 + 296));
}

uint64_t _WriteV0DictionaryValue(uint64_t a1, const void *a2, uint64_t a3)
{
  unsigned int v5;

  v5 = bswap32(CFDictionaryGetValue(*(CFDictionaryRef *)(a3 + 272), a2));
  return _WriteBytes(a3, (const UInt8 *)&v5 - *(unsigned __int8 *)(a3 + 296) + 4, *(unsigned __int8 *)(a3 + 296));
}

uint64_t _WriteV0ArrayValue(void *key, uint64_t a2)
{
  unsigned int v4;

  v4 = bswap32(CFDictionaryGetValue(*(CFDictionaryRef *)(a2 + 272), key));
  return _WriteBytes(a2, (const UInt8 *)&v4 - *(unsigned __int8 *)(a2 + 296) + 4, *(unsigned __int8 *)(a2 + 296));
}

uint64_t _FlattenDictionaryKey(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _FlattenPlist(a3, a1);
}

uint64_t _FlattenDictionaryValue(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _FlattenPlist(a3, a2);
}

uint64_t _FlattenArray(uint64_t a1, uint64_t a2)
{
  return _FlattenPlist(a2, a1);
}

__CFDictionary *CFBinaryPlistV0CreateWithData(uint64_t a1, uint64_t a2, _DWORD *a3)
{
  char *v5;
  unint64_t v6;
  unsigned int v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  char *v13;
  __int128 v14;
  __CFDictionary *v15;
  int v16;
  char *v18;
  char *v19;
  CFDictionaryValueCallBacks valueCallBacks;
  int SizedInteger;
  CFTypeRef cf;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  uint64_t v41;
  unint64_t v42;
  int v43;
  int v44;
  uint64_t v45;
  uint64_t v46;
  int v47;
  int v48;

  v44 = 0;
  v48 = 0;
  v41 = 0;
  v38 = 0u;
  v37 = 0u;
  v36 = 0u;
  v35 = 0u;
  v34 = 0u;
  v33 = 0u;
  v32 = 0u;
  v31 = 0u;
  v30 = 0u;
  v29 = 0u;
  v28 = 0u;
  v27 = 0u;
  v26 = 0u;
  v24 = 0u;
  v25 = 0u;
  v23 = 0u;
  memset(&valueCallBacks, 0, sizeof(valueCallBacks));
  cf = 0;
  v42 = 0;
  v43 = 0;
  v39 = 0u;
  v40 = 0u;
  v45 = 0;
  v46 = 0;
  v47 = 0;
  if (a2 <= 0)
  {
    v15 = 0;
    SizedInteger = -6743;
    goto LABEL_22;
  }
  if ((unint64_t)a2 <= 0x28)
  {
    v15 = 0;
    v16 = -6743;
    goto LABEL_19;
  }
  if (*(_QWORD *)a1 != 0x30307473696C7062)
  {
    v15 = 0;
    v16 = -6717;
    goto LABEL_19;
  }
  v5 = (char *)(a1 + a2);
  v6 = *(unsigned __int8 *)(a1 + a2 - 26);
  if (v6 > 8)
    goto LABEL_18;
  if (((1 << v6) & 0x116) == 0)
    goto LABEL_18;
  v7 = *(v5 - 25);
  if (v7 > 8 || ((1 << v7) & 0x116) == 0)
    goto LABEL_18;
  v8 = *((_QWORD *)v5 - 3);
  if (!v8)
  {
LABEL_27:
    v15 = 0;
    v16 = -6764;
    goto LABEL_19;
  }
  v9 = bswap64(v8);
  v10 = bswap64(*((_QWORD *)v5 - 2));
  if (v10 >= v9)
  {
LABEL_28:
    v15 = 0;
    v16 = -6710;
    goto LABEL_19;
  }
  v11 = bswap64(*((_QWORD *)v5 - 1));
  if (v11 <= 8 || v11 >= a2 - 32)
  {
LABEL_18:
    v15 = 0;
    v16 = -6742;
LABEL_19:
    SizedInteger = v16;
    goto LABEL_20;
  }
  v12 = (unint64_t)(v5 - 32);
  if (v9 > (a2 - 32 - v11) / v6)
    goto LABEL_27;
  v13 = (char *)(v11 + v10 * v6);
  v19 = v13;
  if ((unint64_t)v13 >= v12 - a1)
    goto LABEL_28;
  v18 = &v13[a1];
  SizedInteger = _ReadSizedInteger((unsigned __int8 **)&v18, v12, v6, (unint64_t *)&v19, 0);
  if (!SizedInteger)
  {
    _GlobalEnsureInitialized();
    *(_QWORD *)&v40 = v9;
    BYTE1(v41) = v6;
    LOBYTE(v41) = v7;
    v42 = v11;
    v14 = *(_OWORD *)(MEMORY[0x1E0C9B3A0] + 16);
    *(_OWORD *)&valueCallBacks.version = *MEMORY[0x1E0C9B3A0];
    *(_OWORD *)&valueCallBacks.release = v14;
    valueCallBacks.equal = (CFDictionaryEqualCallBack)_ObjectsExactlyEqual;
    *((_QWORD *)&v39 + 1) = CFDictionaryCreateMutable(0, 0, 0, &valueCallBacks);
    if (*((_QWORD *)&v39 + 1))
    {
      v15 = _ReadV0Object((uint64_t)&cf, a1, v12, v19, &SizedInteger);
      if (cf)
      {
        CFRelease(cf);
        cf = 0;
      }
      goto LABEL_20;
    }
    v15 = 0;
    v16 = -6728;
    goto LABEL_19;
  }
  v15 = 0;
LABEL_20:
  if ((_QWORD)v39)
  {
    CFRelease((CFTypeRef)v39);
    *(_QWORD *)&v39 = 0;
  }
LABEL_22:
  if (*((_QWORD *)&v39 + 1))
    CFRelease(*((CFTypeRef *)&v39 + 1));
  if (a3)
    *a3 = SizedInteger;
  return v15;
}

__CFDictionary *_ReadV0Object(uint64_t a1, uint64_t a2, unint64_t a3, char *a4, int *a5)
{
  __CFDictionary *Value;
  __CFDictionary *v11;
  char *v12;
  unsigned int v13;
  unsigned __int8 *v14;
  unint64_t v15;
  CFStringEncoding v16;
  const UInt8 *v17;
  CFTypeRef *v18;
  unsigned int v19;
  uint64_t v20;
  unint64_t v21;
  unsigned int v22;
  uint64_t v23;
  unint64_t v24;
  unint64_t *p_valuePtr;
  CFNumberType v26;
  __CFDictionary *v27;
  int v28;
  unint64_t v29;
  unint64_t v30;
  CFMutableArrayRef Mutable;
  __CFDictionary *v32;
  unint64_t v33;
  int v34;
  void *v35;
  unint64_t v36;
  unint64_t v37;
  unint64_t v38;
  unsigned int v39;
  __CFDictionary *v41;
  unsigned __int8 *v42;
  unsigned __int8 *v43;
  void *key;
  unint64_t v45;
  unint64_t v46;
  unint64_t valuePtr;
  unint64_t v48;
  unsigned __int8 *v49;
  int RefOffset;

  RefOffset = 0;
  v43 = 0;
  key = 0;
  v42 = 0;
  if (a3 - a2 <= (unint64_t)a4)
  {
    v11 = 0;
    v28 = -6710;
LABEL_81:
    RefOffset = v28;
    goto LABEL_77;
  }
  Value = (__CFDictionary *)CFDictionaryGetValue(*(CFDictionaryRef *)(a1 + 272), a4);
  if (!Value)
  {
    valuePtr = 0;
    v48 = 0;
    v45 = 0;
    v46 = 0;
    v12 = &a4[a2];
    v14 = (unsigned __int8 *)&a4[a2 + 1];
    v13 = a4[a2];
    v49 = v14;
    switch(v13 >> 4)
    {
      case 0u:
        if (v13 == 9)
        {
          v18 = (CFTypeRef *)MEMORY[0x1E0C9AE50];
        }
        else if (v13 == 8)
        {
          v18 = (CFTypeRef *)MEMORY[0x1E0C9AE40];
        }
        else
        {
          if (v13)
            goto LABEL_32;
          v18 = (CFTypeRef *)MEMORY[0x1E0C9B0D0];
        }
        v11 = (__CFDictionary *)CFRetain(*v18);
        goto LABEL_76;
      case 1u:
        v19 = v13 & 0xF;
        if (v19 >= 5)
          goto LABEL_99;
        v20 = 1 << v19;
        if (a3 - (unint64_t)v14 < 1 << v19)
          goto LABEL_80;
        if (v19 <= 3)
        {
          v38 = 0;
          do
          {
            v39 = *v14++;
            v38 = v39 | (v38 << 8);
            LODWORD(v20) = v20 - 1;
          }
          while ((_DWORD)v20);
          valuePtr = v38;
          p_valuePtr = &valuePtr;
          v26 = kCFNumberSInt64Type;
        }
        else
        {
          v21 = 0;
          do
          {
            v22 = *v14++;
            v21 = v22 | (v21 << 8);
            LODWORD(v20) = v20 - 1;
          }
          while (v20 > 8);
          v23 = 0;
          v24 = 0;
          v45 = v21;
          v49 = v14;
          do
            v24 = v14[v23++] | (v24 << 8);
          while ((_DWORD)v23 != 8);
          v46 = v24;
          p_valuePtr = &v45;
          v26 = kCFNumberMaxType|kCFNumberSInt8Type;
        }
        goto LABEL_73;
      case 2u:
        if ((v13 & 0xF) == 3)
        {
          if ((uint64_t)(a3 - (_QWORD)v14) > 7)
          {
            valuePtr = bswap64(*(_QWORD *)(v12 + 1));
            p_valuePtr = &valuePtr;
            v26 = kCFNumberFloat64Type;
LABEL_73:
            v27 = CFNumberCreate(0, v26, p_valuePtr);
LABEL_74:
            v11 = v27;
            if (v27)
            {
              CFDictionarySetValue(*(CFMutableDictionaryRef *)(a1 + 272), a4, v27);
              goto LABEL_76;
            }
LABEL_101:
            v28 = -6728;
            goto LABEL_81;
          }
        }
        else if ((v13 & 0xF) == 2 && (uint64_t)(a3 - (_QWORD)v14) > 3)
        {
          LODWORD(valuePtr) = bswap32(*(_DWORD *)(v12 + 1));
          p_valuePtr = &valuePtr;
          v26 = kCFNumberFloat32Type;
          goto LABEL_73;
        }
LABEL_80:
        v11 = 0;
        v28 = -6743;
        goto LABEL_81;
      case 3u:
        if (v13 != 51)
          goto LABEL_32;
        if ((uint64_t)(a3 - (_QWORD)v14) <= 7)
          goto LABEL_80;
        v27 = CFDateCreate(0, COERCE_CFABSOLUTETIME(bswap64(*(_QWORD *)(v12 + 1))));
        goto LABEL_74;
      case 4u:
        v29 = v13 & 0xF;
        v48 = v29;
        if ((v13 & 0xF) != 0xF)
          goto LABEL_36;
        RefOffset = _ReadInteger(&v49, a3, &v48, 0, 0);
        if (RefOffset)
          goto LABEL_98;
        v29 = v48;
        v14 = v49;
LABEL_36:
        if (v29 > a3 - (unint64_t)v14)
          goto LABEL_80;
        v27 = CFDataCreate(0, v14, v29);
        goto LABEL_74;
      case 5u:
      case 7u:
        v15 = v13 & 0xF;
        v48 = v15;
        if ((v13 & 0xF) != 0xF)
          goto LABEL_8;
        RefOffset = _ReadInteger(&v49, a3, &v48, 0, 0);
        if (RefOffset)
          goto LABEL_98;
        v15 = v48;
        v14 = v49;
LABEL_8:
        if (v15 > a3 - (unint64_t)v14)
          goto LABEL_80;
        if ((v13 & 0xF0) == 0x50)
          v16 = 1536;
        else
          v16 = 134217984;
        v17 = v14;
        goto LABEL_43;
      case 6u:
        v30 = v13 & 0xF;
        v48 = v30;
        if ((v13 & 0xF) != 0xF)
          goto LABEL_41;
        RefOffset = _ReadInteger(&v49, a3, &v48, 0, 0);
        if (RefOffset)
          goto LABEL_98;
        v30 = v48;
        v14 = v49;
LABEL_41:
        v15 = 2 * v30;
        if (2 * v30 > a3 - (unint64_t)v14)
          goto LABEL_80;
        v17 = v14;
        v16 = 268435712;
LABEL_43:
        v27 = (__CFDictionary *)CFStringCreateWithBytes(0, v17, v15, v16, 0);
        goto LABEL_74;
      case 0xAu:
        v48 = v13 & 0xF;
        if ((v13 & 0xF) == 0xF)
        {
          RefOffset = _ReadInteger(&v49, a3, &v48, 0, 0);
          if (RefOffset)
            goto LABEL_98;
        }
        Mutable = CFArrayCreateMutable(0, 0, MEMORY[0x1E0C9B378]);
        if (Mutable)
        {
          v32 = Mutable;
          if (!v48)
          {
LABEL_53:
            v11 = v32;
            goto LABEL_76;
          }
          v33 = v48 - 1;
          while (1)
          {
            RefOffset = _ReadRefOffset(a1, a2, a3, (unsigned int **)&v49, (unint64_t *)&key);
            if (RefOffset)
              break;
            v34 = *(_DWORD *)(a1 + 336);
            if (v34 >= 32)
            {
              v35 = 0;
              v48 = v33;
              RefOffset = -6751;
LABEL_92:
              CFRelease(v32);
              goto LABEL_93;
            }
            *(_DWORD *)(a1 + 336) = v34 + 1;
            v35 = (void *)_ReadV0Object(a1, a2, a3, key, &RefOffset);
            --*(_DWORD *)(a1 + 336);
            if (RefOffset)
              goto LABEL_90;
            CFArrayAppendValue(v32, v35);
            CFRelease(v35);
            if (--v33 == -1)
              goto LABEL_53;
          }
          v35 = 0;
LABEL_90:
          v48 = v33;
          goto LABEL_92;
        }
        v11 = 0;
        goto LABEL_101;
      case 0xDu:
        v36 = v13 & 0xF;
        v48 = v36;
        if ((v13 & 0xF) != 0xF)
          goto LABEL_57;
        RefOffset = _ReadInteger(&v49, a3, &v48, 0, 0);
        if (RefOffset)
          goto LABEL_98;
        v36 = v48;
        v14 = v49;
LABEL_57:
        if (v36 > (a3 - (unint64_t)v14) / *(unsigned __int8 *)(a1 + 296))
        {
LABEL_99:
          v11 = 0;
          v28 = -6764;
          goto LABEL_81;
        }
        v11 = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
        if (!v11)
          goto LABEL_101;
        v42 = &v14[v36 * *(unsigned __int8 *)(a1 + 296)];
        v43 = v14;
        if (!v36)
          goto LABEL_76;
        v37 = v36 - 1;
        while (2)
        {
          if (*(int *)(a1 + 336) >= 32)
          {
            RefOffset = -6751;
LABEL_96:
            v41 = v11;
            goto LABEL_97;
          }
          RefOffset = _ReadRefOffset(a1, a2, a3, (unsigned int **)&v43, (unint64_t *)&key);
          if (RefOffset)
            goto LABEL_96;
          ++*(_DWORD *)(a1 + 336);
          v32 = (__CFDictionary *)_ReadV0Object(a1, a2, a3, key, &RefOffset);
          --*(_DWORD *)(a1 + 336);
          if (RefOffset
            || (RefOffset = _ReadRefOffset(a1, a2, a3, (unsigned int **)&v42, (unint64_t *)&key)) != 0)
          {
            v35 = 0;
          }
          else
          {
            ++*(_DWORD *)(a1 + 336);
            v35 = (void *)_ReadV0Object(a1, a2, a3, key, &RefOffset);
            --*(_DWORD *)(a1 + 336);
            if (!RefOffset)
            {
              CFDictionarySetValue(v11, v32, v35);
              CFRelease(v32);
              CFRelease(v35);
              if (--v37 == -1)
                goto LABEL_76;
              continue;
            }
          }
          break;
        }
        v48 = v37;
        CFRelease(v11);
        if (v32)
          goto LABEL_92;
LABEL_93:
        if (v35)
        {
          v41 = (__CFDictionary *)v35;
LABEL_97:
          CFRelease(v41);
        }
LABEL_98:
        v11 = 0;
        goto LABEL_77;
      default:
LABEL_32:
        v11 = 0;
        v28 = -6756;
        goto LABEL_81;
    }
  }
  v11 = Value;
  CFRetain(Value);
LABEL_76:
  RefOffset = 0;
LABEL_77:
  if (a5)
    *a5 = RefOffset;
  return v11;
}

uint64_t _ReadRefOffset(uint64_t a1, uint64_t a2, uint64_t a3, unsigned int **a4, unint64_t *a5)
{
  unsigned int *v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  int v10;
  unsigned int *v11;
  unint64_t v12;

  v5 = *a4;
  v6 = *(unsigned __int8 *)(a1 + 296);
  if (a3 - (uint64_t)*a4 <= v6)
    return 4294960546;
  v7 = 4294960534;
  switch(*(_BYTE *)(a1 + 296))
  {
    case 1:
      v8 = *(unsigned __int8 *)v5;
      goto LABEL_7;
    case 2:
      v8 = __rev16(*(unsigned __int16 *)v5);
      goto LABEL_7;
    case 4:
      v8 = bswap32(*v5);
      goto LABEL_7;
    case 8:
      v8 = bswap64(*(_QWORD *)v5);
LABEL_7:
      *a4 = (unsigned int *)((char *)v5 + v6);
      if (v8 >= *(_QWORD *)(a1 + 280))
      {
        v7 = 4294960586;
      }
      else
      {
        v9 = *(unsigned __int8 *)(a1 + 297);
        v7 = 4294960534;
        v10 = v9 - 1;
        v11 = (unsigned int *)(a2 + *(_QWORD *)(a1 + 304) + v8 * v9);
        switch(v10)
        {
          case 0:
            v12 = *(unsigned __int8 *)v11;
            goto LABEL_13;
          case 1:
            v12 = __rev16(*(unsigned __int16 *)v11);
            goto LABEL_13;
          case 3:
            v12 = bswap32(*v11);
            goto LABEL_13;
          case 7:
            v12 = bswap64(*(_QWORD *)v11);
LABEL_13:
            v7 = 0;
            *a5 = v12;
            break;
          default:
            return v7;
        }
      }
      break;
    default:
      return v7;
  }
  return v7;
}

CFArrayRef CFPrefs_CopyKeys(const __CFString *a1, int *a2)
{
  CFArrayRef result;
  int v4;

  if (!a1)
    a1 = (const __CFString *)*MEMORY[0x1E0C9B248];
  result = CFPreferencesCopyKeyList(a1, (CFStringRef)*MEMORY[0x1E0C9B260], (CFStringRef)*MEMORY[0x1E0C9B230]);
  if (result)
  {
    if (!a2)
      return result;
  }
  else
  {
    result = CFArrayCreate(0, 0, 0, MEMORY[0x1E0C9B378]);
    if (!a2)
      return result;
  }
  if (result)
    v4 = 0;
  else
    v4 = -6700;
  *a2 = v4;
  return result;
}

uint64_t CFPrefs_RemoveValue(const __CFString *a1, CFStringRef key)
{
  const __CFString *v2;

  if (a1)
    v2 = a1;
  else
    v2 = (const __CFString *)*MEMORY[0x1E0C9B248];
  CFPreferencesSetAppValue(key, 0, v2);
  return 0;
}

uint64_t CFPrefs_SetValue(const __CFString *a1, CFStringRef key, CFPropertyListRef value)
{
  const __CFString *v4;

  if (a1)
    v4 = a1;
  else
    v4 = (const __CFString *)*MEMORY[0x1E0C9B248];
  CFPreferencesSetAppValue(key, value, v4);
  return 0;
}

const char *CFPrefs_GetCString(const __CFString *a1, CFStringRef key, char *a3, size_t a4, int *a5)
{
  const __CFString *v9;
  const __CFString *v10;
  const __CFString *v11;
  int v12;

  if (a1)
    v9 = a1;
  else
    v9 = (const __CFString *)*MEMORY[0x1E0C9B248];
  v10 = (const __CFString *)CFPreferencesCopyAppValue(key, v9);
  v11 = v10;
  if (a5)
  {
    if (v10)
      v12 = 0;
    else
      v12 = -6727;
    *a5 = v12;
  }
  if (v10)
  {
    a3 = (char *)CFGetCString(v10, a3, a4);
    CFRelease(v11);
  }
  else if (a4)
  {
    *a3 = 0;
  }
  else
  {
    return "";
  }
  return a3;
}

uint64_t CFPrefs_SetCString(const __CFString *a1, const __CFString *a2, char *cStr, CFIndex numBytes)
{
  CFStringRef v6;
  CFStringRef v7;
  const __CFString *v8;

  if (numBytes == -1)
    v6 = CFStringCreateWithCString(0, cStr, 0x8000100u);
  else
    v6 = CFStringCreateWithBytes(0, (const UInt8 *)cStr, numBytes, 0x8000100u, 0);
  v7 = v6;
  if (!v6)
    return 4294960579;
  if (a1)
    v8 = a1;
  else
    v8 = (const __CFString *)*MEMORY[0x1E0C9B248];
  CFPreferencesSetAppValue(a2, v6, v8);
  CFRelease(v7);
  return 0;
}

const char *CFPrefs_GetData(const __CFString *a1, CFStringRef key, const char *a3, unint64_t a4, _QWORD *a5, int *a6)
{
  const __CFString *v11;
  __CFString *v12;
  __CFString *v13;
  int v14;
  const char *v15;

  if (a1)
    v11 = a1;
  else
    v11 = (const __CFString *)*MEMORY[0x1E0C9B248];
  v12 = (__CFString *)CFPreferencesCopyAppValue(key, v11);
  v13 = v12;
  if (a6)
  {
    if (v12)
      v14 = 0;
    else
      v14 = -6727;
    *a6 = v14;
  }
  if (v12)
  {
    v15 = CFGetData(v12, a3, a4, a5, a6);
    CFRelease(v13);
    return v15;
  }
  else
  {
    if (a5)
      *a5 = 0;
    return a3;
  }
}

void CFPrefs_GetDouble(const __CFString *a1, CFStringRef key, int *a3)
{
  const __CFString *v5;
  const __CFString *v6;
  const __CFString *v7;
  int v8;

  if (a1)
    v5 = a1;
  else
    v5 = (const __CFString *)*MEMORY[0x1E0C9B248];
  v6 = (const __CFString *)CFPreferencesCopyAppValue(key, v5);
  v7 = v6;
  if (a3)
  {
    if (v6)
      v8 = 0;
    else
      v8 = -6727;
    *a3 = v8;
  }
  if (v6)
  {
    CFGetDouble(v6, a3);
    CFRelease(v7);
  }
}

uint64_t CFPrefs_SetDouble(const __CFString *a1, const __CFString *a2, double a3)
{
  CFNumberRef v5;
  CFNumberRef v6;
  const __CFString *v7;
  double valuePtr;

  valuePtr = a3;
  v5 = CFNumberCreate(0, kCFNumberDoubleType, &valuePtr);
  if (!v5)
    return 4294960596;
  v6 = v5;
  if (a1)
    v7 = a1;
  else
    v7 = (const __CFString *)*MEMORY[0x1E0C9B248];
  CFPreferencesSetAppValue(a2, v5, v7);
  CFRelease(v6);
  return 0;
}

unint64_t CFPrefs_GetInt64(const __CFString *a1, CFStringRef key, int *a3)
{
  const __CFString *v5;
  const __CFString *v6;
  const __CFString *v7;
  int v8;
  unint64_t v9;

  if (a1)
    v5 = a1;
  else
    v5 = (const __CFString *)*MEMORY[0x1E0C9B248];
  v6 = (const __CFString *)CFPreferencesCopyAppValue(key, v5);
  v7 = v6;
  if (a3)
  {
    if (v6)
      v8 = 0;
    else
      v8 = -6727;
    *a3 = v8;
  }
  if (!v6)
    return 0;
  v9 = CFGetInt64(v6, a3);
  CFRelease(v7);
  return v9;
}

uint64_t CFPrefs_SetInt64(const __CFString *a1, const __CFString *a2, uint64_t a3)
{
  CFNumberRef Int64;
  CFNumberRef v6;
  const __CFString *v7;

  Int64 = CFNumberCreateInt64(a3);
  if (!Int64)
    return 4294960596;
  v6 = Int64;
  if (a1)
    v7 = a1;
  else
    v7 = (const __CFString *)*MEMORY[0x1E0C9B248];
  CFPreferencesSetAppValue(a2, Int64, v7);
  CFRelease(v6);
  return 0;
}

uint64_t CFRuntimeCreateObject(uint64_t a1, unint64_t a2, int *a3)
{
  size_t v4;
  uint64_t Instance;
  uint64_t v6;
  int v7;

  v4 = a2 - 16;
  if (a2 < 0x10)
  {
    v6 = 0;
    v7 = -6743;
  }
  else
  {
    Instance = _CFRuntimeCreateInstance();
    v6 = Instance;
    if (Instance)
    {
      bzero((void *)(Instance + 16), v4);
      v7 = 0;
    }
    else
    {
      v7 = -6728;
    }
  }
  if (a3)
    *a3 = v7;
  return v6;
}

CFTypeRef CFCreateF(_DWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  int v10;
  CFTypeRef v12;

  v12 = 0;
  v10 = CFPropertyListBuildFormatted(0, 0, &v12, a2, (uint64_t)&a9, a6, a7, a8);
  if (a1)
    *a1 = v10;
  return v12;
}

uint64_t CFPropertyListBuildFormatted(const __CFAllocator *TypeID, void *cf, CFTypeRef *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  const UInt8 *v8;
  const __CFAllocator *v11;
  CFTypeID v12;
  __CFDictionary *v13;
  __CFArray *v14;
  __CFArray *v15;
  unsigned int v16;
  const UInt8 *v17;
  __CFArray *v18;
  __CFArray *v19;
  CFMutableDictionaryRef v20;
  CFMutableArrayRef v21;
  uint64_t v22;
  CFMutableDictionaryRef Mutable;
  _BOOL4 v24;
  int v25;
  int v26;
  int v27;
  unsigned __int8 *v28;
  unsigned int *v29;
  unsigned int v30;
  CFStringRef v31;
  CFStringRef v32;
  unsigned int *v33;
  uint64_t v34;
  CFTypeRef v35;
  int v36;
  int v37;
  uint64_t *v38;
  uint64_t v39;
  BOOL v40;
  int v41;
  unsigned int *v42;
  const __CFAllocator *v43;
  CFIndex v44;
  CFStringEncoding v45;
  CFTypeRef *v46;
  const __CFDictionary *v47;
  const __CFData *DeepCopy;
  const UInt8 **v49;
  const UInt8 *v50;
  CFDataRef Data;
  CFUUIDBytes **v52;
  CFUUIDBytes *v53;
  const __CFData *v54;
  unsigned int *v55;
  __CFArray **v56;
  __CFArray *v57;
  unsigned int *v58;
  unsigned int v59;
  unsigned int *v60;
  CFTypeRef v61;
  __CFArray *v62;
  __CFDictionary *v63;
  unsigned int *v64;
  uint64_t *v65;
  uint64_t v66;
  unsigned int v67;
  UInt8 **v68;
  UInt8 *v69;
  uint64_t v70;
  CFIndex v71;
  const __CFAllocator *v72;
  CFStringEncoding v73;
  UInt8 **v74;
  UInt8 *v75;
  BOOL v76;
  uint64_t v77;
  unsigned int *v78;
  uint64_t v79;
  uint64_t v80;
  unsigned int *v81;
  CFTypeID v82;
  const void **v83;
  const void *v84;
  unsigned int *v85;
  const __CFAllocator *v86;
  unsigned int *v87;
  const __CFAllocator *v88;
  int v89;
  __CFArray *v90;
  const void *v92;
  const void *v93;
  CFTypeRef *v94;
  uint64_t valuePtr;
  CFTypeRef v97;
  CFTypeRef cfa;
  unsigned int *v99;
  UInt8 bytes[64];
  uint64_t v101;

  v101 = *MEMORY[0x1E0C80C00];
  cfa = 0;
  v99 = (unsigned int *)a5;
  valuePtr = 0;
  v97 = 0;
  if (!a4)
  {
    v14 = 0;
LABEL_205:
    v22 = 4294960591;
    goto LABEL_189;
  }
  v8 = (const UInt8 *)a4;
  v11 = TypeID;
  if (cf)
  {
    v12 = CFGetTypeID(cf);
    TypeID = (const __CFAllocator *)CFArrayGetTypeID();
    if ((const __CFAllocator *)v12 == TypeID)
    {
      v94 = a3;
      v13 = 0;
      v14 = (__CFArray *)cf;
    }
    else
    {
      TypeID = (const __CFAllocator *)CFDictionaryGetTypeID();
      v14 = 0;
      if ((const __CFAllocator *)v12 != TypeID)
      {
LABEL_188:
        v22 = 4294960540;
        goto LABEL_189;
      }
      v94 = a3;
      v13 = (__CFDictionary *)cf;
    }
  }
  else
  {
    v94 = a3;
    v14 = 0;
    v13 = 0;
  }
  v93 = (const void *)*MEMORY[0x1E0C9AE50];
  v92 = (const void *)*MEMORY[0x1E0C9AE40];
  v15 = v14;
  v14 = 0;
  while (1)
  {
    v16 = *v8;
    if (v16 <= 0x5C)
      break;
    if (v16 == 93)
      goto LABEL_13;
    if (v16 == 123)
    {
      Mutable = CFDictionaryCreateMutable(v11, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
      if (!Mutable)
        goto LABEL_198;
      v20 = Mutable;
      v22 = _CFPropertyListAssociateObject(v15, v13, &cfa, Mutable, &v97);
      CFRelease(v20);
      if ((_DWORD)v22)
        goto LABEL_189;
      TypeID = (const __CFAllocator *)malloc_type_calloc(1uLL, 0x18uLL, 0x20040960023A9uLL);
      if (!TypeID)
        goto LABEL_198;
      v19 = 0;
      goto LABEL_25;
    }
    v17 = v8;
    if (v16 == 125)
    {
LABEL_13:
      if (v14)
      {
        v18 = *(__CFArray **)v14;
        v19 = (__CFArray *)*((_QWORD *)v14 + 1);
        v20 = (CFMutableDictionaryRef)*((_QWORD *)v14 + 2);
        free(v14);
        v14 = v18;
        goto LABEL_180;
      }
      v22 = 4294960554;
      goto LABEL_189;
    }
LABEL_35:
    if (*v8)
    {
      while (1)
      {
        if (v16 == 59)
          goto LABEL_39;
        if (v16 == 61)
          break;
        v30 = *++v17;
        v16 = v30;
        if (!v30)
          goto LABEL_39;
      }
      v35 = cfa;
      v22 = 4294960554;
      if (cfa || !v13)
        goto LABEL_190;
      TypeID = (const __CFAllocator *)CFStringCreateWithBytes(v11, v8, v17 - v8, 0x8000100u, 0);
      cfa = TypeID;
      if (!TypeID)
        goto LABEL_201;
    }
    else
    {
LABEL_39:
      v31 = CFStringCreateWithBytes(v11, v8, v17 - v8, 0x8000100u, 0);
      if (!v31)
        goto LABEL_198;
      v32 = v31;
      v22 = _CFPropertyListAssociateObject(v15, v13, &cfa, v31, &v97);
      CFRelease(v32);
      if ((_DWORD)v22)
        goto LABEL_189;
      if (!v16)
      {
LABEL_186:
        v22 = 0;
        if (v94)
        {
          *v94 = v97;
          v97 = 0;
        }
        goto LABEL_189;
      }
    }
    v19 = v15;
    v20 = v13;
    v8 = v17;
LABEL_180:
    ++v8;
    v15 = v19;
    v13 = v20;
  }
  if (v16 != 37)
  {
    if (v16 == 91)
    {
      v21 = CFArrayCreateMutable(v11, 0, MEMORY[0x1E0C9B378]);
      if (!v21)
        goto LABEL_198;
      v19 = v21;
      v22 = _CFPropertyListAssociateObject(v15, v13, &cfa, v21, &v97);
      CFRelease(v19);
      if ((_DWORD)v22)
        goto LABEL_189;
      TypeID = (const __CFAllocator *)malloc_type_calloc(1uLL, 0x18uLL, 0x20040960023A9uLL);
      if (!TypeID)
        goto LABEL_198;
      v20 = 0;
LABEL_25:
      *(_QWORD *)TypeID = v14;
      *((_QWORD *)TypeID + 1) = v15;
      v14 = TypeID;
      *((_QWORD *)TypeID + 2) = v13;
      goto LABEL_180;
    }
    v17 = v8;
    if (!*v8)
      goto LABEL_186;
    goto LABEL_35;
  }
  v24 = 0;
  v25 = 0;
  v26 = 0;
  while (1)
  {
    while (1)
    {
      v28 = (unsigned __int8 *)v8++;
      v27 = *v8;
      if (v27 != 35)
        break;
      ++v26;
    }
    if (v27 == 46)
      break;
    if (v27 == 63)
    {
      v29 = v99;
      v99 += 2;
      v24 = *v29 == 0;
    }
    else
    {
      if (v27 != 108)
      {
        v34 = 0xFFFFFFFFLL;
        goto LABEL_57;
      }
      ++v25;
    }
  }
  ++v8;
  v27 = v28[2];
  if (v27 == 42)
  {
    v33 = v99;
    v99 += 2;
    v34 = *v33;
    if ((v34 & 0x80000000) == 0)
    {
      v27 = v28[3];
      v8 = v28 + 3;
      goto LABEL_57;
    }
LABEL_200:
    v22 = 4294960553;
    goto LABEL_189;
  }
  v36 = v27 - 48;
  if ((v27 - 48) > 9)
  {
    v34 = 0;
  }
  else
  {
    LODWORD(v34) = 0;
    do
    {
      v34 = (v36 + 10 * v34);
      v37 = *++v8;
      v27 = v37;
      v36 = v37 - 48;
    }
    while ((v37 - 48) < 0xA);
    if ((v34 & 0x80000000) != 0)
      goto LABEL_200;
  }
LABEL_57:
  v22 = 4294960579;
  if (v27 <= 83)
  {
    if (v27 <= 67)
    {
      if (v27 == 64)
      {
        if ((_DWORD)v34 != -1)
          goto LABEL_189;
        v55 = v99;
        v99 += 2;
        v56 = *(__CFArray ***)v55;
        if (!v56)
          goto LABEL_205;
        if (v15)
          v57 = v15;
        else
          v57 = v13;
        *v56 = v57;
        goto LABEL_179;
      }
      if (v27 != 67 || (_DWORD)v34 != -1)
        goto LABEL_189;
      v42 = v99;
      v99 += 2;
      if (v24)
        goto LABEL_147;
      *(_DWORD *)bytes = bswap32(*v42);
      v43 = v11;
      v44 = 4;
      v45 = 0;
LABEL_166:
      DeepCopy = (const __CFData *)CFStringCreateWithBytes(v43, bytes, v44, v45, 0);
      if (!DeepCopy)
        goto LABEL_198;
      goto LABEL_167;
    }
    if (v27 == 68)
    {
LABEL_81:
      if ((_DWORD)v34 != -1)
        goto LABEL_189;
      v49 = (const UInt8 **)v99;
      v99 += 2;
      v50 = *v49;
      if (!v26)
      {
        v58 = v99;
        v99 += 2;
        if (!v24)
        {
          v59 = *v58;
          if (!v50 && v59)
            goto LABEL_205;
          v54 = CFDataCreate(v11, v50, (int)v59);
LABEL_177:
          Data = v54;
          if (!v54)
          {
LABEL_198:
            v22 = 4294960568;
            goto LABEL_189;
          }
          goto LABEL_178;
        }
LABEL_147:
        TypeID = (const __CFAllocator *)cfa;
        if (cfa)
        {
          CFRelease(cfa);
          cfa = 0;
        }
        goto LABEL_179;
      }
      if (!v50 || v24)
        goto LABEL_147;
      Data = CFPropertyListCreateData(0, v50, kCFPropertyListBinaryFormat_v1_0, 0, 0);
      if (Data)
      {
LABEL_178:
        v22 = _CFPropertyListAssociateObject(v15, v13, &cfa, Data, &v97);
        CFRelease(Data);
        if ((_DWORD)v22)
          goto LABEL_189;
        goto LABEL_179;
      }
      v22 = 4294960564;
    }
    else
    {
      if (v27 != 79)
        goto LABEL_189;
LABEL_74:
      if ((_DWORD)v34 != -1)
        goto LABEL_189;
      v46 = (CFTypeRef *)v99;
      v99 += 2;
      v47 = (const __CFDictionary *)*v46;
      if (!*v46 || v24)
        goto LABEL_147;
      if (v26 == 2)
      {
        v35 = cfa;
        v22 = 4294960591;
        if (cfa || !v13)
          goto LABEL_190;
        v82 = CFGetTypeID(*v46);
        if (v82 != CFDictionaryGetTypeID())
          goto LABEL_188;
        CFDictionaryApplyFunction(v47, (CFDictionaryApplierFunction)_CFDictionaryMergeDictionaryApplier, v13);
        goto LABEL_179;
      }
      if (v26 == 1)
      {
        DeepCopy = (const __CFData *)CFPropertyListCreateDeepCopy(v11, *v46, 2uLL);
        if (!DeepCopy)
          goto LABEL_198;
LABEL_167:
        Data = DeepCopy;
        goto LABEL_178;
      }
      v62 = v15;
      v63 = v13;
      v61 = *v46;
LABEL_154:
      TypeID = (const __CFAllocator *)_CFPropertyListAssociateObject(v62, v63, &cfa, v61, &v97);
      if (!(_DWORD)TypeID)
        goto LABEL_179;
      v22 = (uint64_t)TypeID;
    }
LABEL_189:
    v35 = cfa;
LABEL_190:
    if (v35)
      CFRelease(v35);
    if (cf)
      goto LABEL_195;
LABEL_193:
    if (v97)
      CFRelease(v97);
    goto LABEL_195;
  }
  switch(v27)
  {
    case 'a':
      v38 = (uint64_t *)v99;
      v99 += 2;
      v39 = *v38;
      if (v39)
        v40 = !v24;
      else
        v40 = 0;
      if (!v40)
        goto LABEL_147;
      if (v26 == 2)
        v41 = SNPrintF((uint64_t)bytes, 64, (uint64_t)"%##a", a4, a5, a6, a7, a8, v39);
      else
        v41 = SNPrintF((uint64_t)bytes, 64, (uint64_t)"%.*a", a4, a5, a6, a7, a8, v34);
      if (v41 >= 1)
      {
        v44 = v41;
        v43 = v11;
        v45 = 134217984;
        goto LABEL_166;
      }
      v22 = 4294960596;
      goto LABEL_189;
    case 'b':
      if ((_DWORD)v34 != -1)
        goto LABEL_189;
      v60 = v99;
      v99 += 2;
      if (v24)
        goto LABEL_147;
      if (*v60)
        v61 = v93;
      else
        v61 = v92;
      v62 = v15;
      v63 = v13;
      goto LABEL_154;
    case 'c':
    case 'e':
    case 'g':
    case 'h':
    case 'j':
    case 'l':
    case 'm':
    case 'n':
    case 'p':
    case 'q':
    case 'r':
      goto LABEL_189;
    case 'd':
      goto LABEL_81;
    case 'f':
      if ((_DWORD)v34 != -1)
        goto LABEL_189;
      v64 = v99;
      v99 += 2;
      valuePtr = *(_QWORD *)v64;
      if (v24)
        goto LABEL_147;
      DeepCopy = CFNumberCreate(v11, kCFNumberDoubleType, &valuePtr);
      if (!DeepCopy)
        goto LABEL_198;
      goto LABEL_167;
    case 'i':
      if ((_DWORD)v34 != -1)
        goto LABEL_189;
      if (v25 == 2)
      {
        v65 = (uint64_t *)v99;
        v99 += 2;
        v66 = *v65;
        if (v24)
          goto LABEL_147;
      }
      else
      {
        v81 = v99;
        v99 += 2;
        v66 = (int)*v81;
        if (v24)
          goto LABEL_147;
      }
      DeepCopy = CFNumberCreateInt64(v66);
      if (!DeepCopy)
        goto LABEL_198;
      goto LABEL_167;
    case 'k':
      v35 = cfa;
      v22 = 4294960554;
      if (cfa || !v13)
        goto LABEL_190;
      if (v24)
      {
        v22 = 4294960561;
        goto LABEL_189;
      }
      v67 = v8[1];
      v22 = 4294960579;
      if (v67 <= 0x54)
      {
        if (v67 == 67)
        {
          if ((_DWORD)v34 != -1)
            goto LABEL_189;
          v87 = v99;
          v99 += 2;
          *(_DWORD *)bytes = bswap32(*v87);
          v69 = bytes;
          v72 = v11;
          v71 = 4;
          v73 = 0;
          goto LABEL_173;
        }
        if (v67 != 79)
          goto LABEL_189;
      }
      else
      {
        if (v67 == 85)
        {
          if ((_DWORD)v34 != -1)
            goto LABEL_189;
          v85 = v99;
          v99 += 2;
          if (!*(_QWORD *)v85)
            goto LABEL_205;
          UUIDtoCStringFlags(*(_BYTE **)v85, 16, 0, 0, (char *)bytes, 0);
          v69 = bytes;
          v86 = 0;
          goto LABEL_182;
        }
        if (v67 != 111)
        {
          if (v67 != 115)
            goto LABEL_189;
          v68 = (UInt8 **)v99;
          v99 += 2;
          v69 = *v68;
          if (!*v68)
            goto LABEL_205;
          if ((v34 & 0x80000000) == 0)
          {
            v70 = 0;
            if ((_DWORD)v34)
            {
              while (v69[v70])
              {
                if (v34 == ++v70)
                {
                  LODWORD(v70) = v34;
                  break;
                }
              }
            }
            v71 = (int)v70;
            v72 = v11;
            v73 = 134217984;
LABEL_173:
            TypeID = (const __CFAllocator *)CFStringCreateWithBytes(v72, v69, v71, v73, 0);
            goto LABEL_183;
          }
          v86 = v11;
LABEL_182:
          TypeID = (const __CFAllocator *)CFStringCreateWithCString(v86, (const char *)v69, 0x8000100u);
LABEL_183:
          cfa = TypeID;
          if (!TypeID)
          {
LABEL_201:
            v22 = 4294960568;
            goto LABEL_202;
          }
LABEL_184:
          v89 = v8[2];
          v8 += 2;
          if (v89 != 61)
          {
            v22 = 4294960579;
            goto LABEL_189;
          }
LABEL_179:
          v19 = v15;
          v20 = v13;
          goto LABEL_180;
        }
      }
      if ((_DWORD)v34 != -1)
        goto LABEL_189;
      v83 = (const void **)v99;
      v99 += 2;
      v84 = *v83;
      cfa = v84;
      if (v84)
      {
        TypeID = (const __CFAllocator *)CFRetain(v84);
        goto LABEL_184;
      }
      v22 = 4294960591;
LABEL_202:
      if (!cf)
        goto LABEL_193;
LABEL_195:
      if (v14)
      {
        do
        {
          v90 = *(__CFArray **)v14;
          free(v14);
          v14 = v90;
        }
        while (v90);
      }
      return v22;
    case 'o':
      goto LABEL_74;
    case 's':
      v74 = (UInt8 **)v99;
      v99 += 2;
      v75 = *v74;
      if (*v74)
        v76 = !v24;
      else
        v76 = 0;
      if (!v76)
        goto LABEL_147;
      if ((v34 & 0x80000000) == 0)
      {
        v77 = 0;
        if ((_DWORD)v34)
        {
          do
          {
            if (!v75[v77])
              goto LABEL_141;
            ++v77;
          }
          while (v34 != v77);
          LODWORD(v77) = v34;
        }
LABEL_141:
        v54 = (const __CFData *)CFStringCreateWithBytes(v11, v75, (int)v77, 0x8000100u, 0);
        goto LABEL_177;
      }
      v88 = v11;
      goto LABEL_176;
    default:
      if (v27 != 84)
      {
        if (v27 != 85)
          goto LABEL_189;
        v52 = (CFUUIDBytes **)v99;
        v99 += 2;
        v53 = *v52;
        if (*v52 && !v24)
        {
          if (v26)
          {
            v54 = CFUUIDCreateFromUUIDBytes(0, *v53);
          }
          else
          {
            UUIDtoCStringFlags(v53, 16, 0, 0, (char *)bytes, 0);
            v75 = bytes;
            v88 = 0;
LABEL_176:
            v54 = (const __CFData *)CFStringCreateWithCString(v88, (const char *)v75, 0x8000100u);
          }
          goto LABEL_177;
        }
        goto LABEL_147;
      }
      if ((_DWORD)v34 != -1)
        goto LABEL_189;
      v78 = v99;
      v99 += 2;
      v79 = *v78;
      v99 = v78 + 4;
      v80 = v78[2];
      v99 = v78 + 6;
      a4 = v78[4];
      v99 = v78 + 8;
      a5 = v78[6];
      v99 = v78 + 10;
      a6 = v78[8];
      v99 = v78 + 12;
      if (v24)
        goto LABEL_147;
      DeepCopy = CFDateCreateWithComponents((uint64_t)TypeID, v79, v80, a4, a5, a6, v78[10]);
      if (!DeepCopy)
        goto LABEL_198;
      break;
  }
  goto LABEL_167;
}

uint64_t _CFPropertyListAssociateObject(__CFArray *a1, CFMutableDictionaryRef theDict, const void **a3, CFTypeRef cf, _QWORD *a5)
{
  uint64_t result;

  if (a1)
  {
    CFArrayAppendValue(a1, cf);
  }
  else if (theDict)
  {
    if (!*a3)
      return 4294960554;
    CFDictionarySetValue(theDict, *a3, cf);
    CFRelease(*a3);
    *a3 = 0;
  }
  else
  {
    CFRetain(cf);
  }
  result = 0;
  if (!*a5)
    *a5 = cf;
  return result;
}

CFNumberRef CFNumberCreateInt64(uint64_t a1)
{
  uint64_t *p_valuePtr;
  CFNumberType v2;
  int v4;
  __int16 v5;
  char v6;
  uint64_t valuePtr;

  valuePtr = a1;
  v6 = 0;
  v5 = 0;
  v4 = 0;
  if (a1 == (char)a1)
  {
    v6 = a1;
    p_valuePtr = (uint64_t *)&v6;
    v2 = kCFNumberSInt8Type;
  }
  else
  {
    p_valuePtr = &valuePtr;
    v2 = kCFNumberSInt64Type;
  }
  return CFNumberCreate(0, v2, p_valuePtr);
}

void _CFDictionaryMergeDictionaryApplier(void *key, void *value, CFMutableDictionaryRef theDict)
{
  CFDictionarySetValue(theDict, key, value);
}

CFDateRef CFDateCreateWithComponents(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  CFCalendarRef v13;
  __CFCalendar *v14;
  const __CFTimeZone *v15;
  const __CFTimeZone *v16;
  CFDateRef v17;
  CFAbsoluteTime at;

  v13 = CFCalendarCopyCurrent();
  if (!v13)
    return 0;
  v14 = v13;
  at = 0.0;
  v15 = CFTimeZoneCreateWithName(0, CFSTR("GMT"), 0);
  if (v15
    && (v16 = v15,
        CFCalendarSetTimeZone(v14, v15),
        CFRelease(v16),
        CFCalendarComposeAbsoluteTime(v14, &at, "yMdHms", a2, a3, a4, a5, a6, a7)))
  {
    v17 = CFDateCreate(0, at);
  }
  else
  {
    v17 = 0;
  }
  CFRelease(v14);
  return v17;
}

CFTypeRef CFCreateV(_DWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v9;
  CFTypeRef v11;

  v11 = 0;
  v9 = CFPropertyListBuildFormatted(0, 0, &v11, a2, a3, a6, a7, a8);
  if (a1)
    *a1 = v9;
  return v11;
}

uint64_t CFPropertyListCreateFormatted(const __CFAllocator *a1, CFTypeRef *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  return CFPropertyListBuildFormatted(a1, 0, a2, a3, (uint64_t)&a9, a6, a7, a8);
}

uint64_t CFPropertyListCreateFormattedVAList(const __CFAllocator *a1, CFTypeRef *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  return CFPropertyListBuildFormatted(a1, 0, a2, a3, a4, a6, a7, a8);
}

uint64_t CFPropertyListAppendFormatted(const __CFAllocator *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  return CFPropertyListBuildFormatted(a1, a2, 0, a3, (uint64_t)&a9, a6, a7, a8);
}

uint64_t CFDictionaryMergeDictionary(void *context, CFDictionaryRef theDict)
{
  CFDictionaryApplyFunction(theDict, (CFDictionaryApplierFunction)_CFDictionaryMergeDictionaryApplier, context);
  return 0;
}

uint64_t CFPropertyListExtractFormatted(const __CFString *cf, uint64_t a2, UInt8 *bytes, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  unsigned int v9;
  UInt8 *v10;
  const __CFAllocator *v12;
  unsigned int v13;
  UInt8 *v14;
  unsigned int v15;
  UInt8 *v16;
  unsigned int v17;
  unsigned int v18;
  uint64_t result;
  int v20;
  uint64_t *v21;
  uint64_t v22;
  CFStringRef v23;
  unsigned int v24;
  int v25;
  CFTypeID v26;
  unsigned int *v27;
  UInt8 *v28;
  const __CFAllocator *v29;
  CFIndex v30;
  CFStringEncoding v31;
  char **v32;
  char *v33;
  const __CFAllocator *v34;
  CFTypeRef *v35;
  uint64_t *v36;
  CFStringRef v37;
  UInt8 **v38;
  uint64_t *v39;
  CFTypeID v40;
  _BYTE *v41;
  _BYTE *i;
  unsigned int v43;
  size_t v44;
  unsigned __int8 *v45;
  int v46;
  int v47;
  unint64_t v48;
  uint64_t *v49;
  CFTypeID v50;
  CFIndex Length;
  UInt8 *v52;
  UInt8 *v53;
  CFTypeID v54;
  CFIndex *v55;
  CFTypeID v56;
  CFTypeID v57;
  const UInt8 *BytePtr;
  __int16 v59;
  CFTypeID v60;
  const UInt8 *v61;
  uint64_t v62;
  _BYTE *v63;
  _BYTE *v64;
  unint64_t v65;
  uint64_t v66;
  char v67;
  CFTypeID v68;
  CFTypeID v69;
  int v70;
  int v71;
  int v72;
  int v73;
  CFTypeID v74;
  uint64_t v75;
  _BYTE *v76;
  unint64_t v77;
  uint64_t v78;
  char v79;
  CFTypeID v80;
  CFTypeID v81;
  int *v82;
  int v83;
  CFTypeID v84;
  char *v85;
  uint64_t v86;
  char *v87;
  uint64_t v88;
  uint64_t v89;
  int v90;
  char *v91;
  char *v92;
  int v93;
  CFTypeID v94;
  int v95;
  _BOOL4 v96;
  CFTypeID v97;
  CFTypeID v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  CFTypeID v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  char *v106;
  size_t v107;
  unsigned int v108;
  unsigned int v109;
  char *v110;
  char *v111;
  unsigned int v112;
  BOOL v113;
  unsigned int v114;
  unsigned int v115;
  char v116;
  unsigned int v117;
  unsigned int v118;
  int v119;
  char *v120;
  __darwin_ct_rune_t v121;
  char *v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  unsigned int v126;
  BOOL v127;
  CFTypeID v128;
  uint64_t *v129;
  uint64_t v130;
  CFTypeID v131;
  const UInt8 *v132;
  unsigned int v133;
  char v134;
  int v135;
  __darwin_ct_rune_t v136;
  int v137;
  char *v138;
  char *v139;
  unsigned int v140;
  _BOOL4 v142;
  BOOL v143;
  uint64_t v144;
  uint64_t v145;
  CFTypeID TypeID;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  CFIndex maxBufLen;
  unsigned int v154;
  uint64_t *v155;
  char valuePtr[64];
  UInt8 cStr[64];
  UInt8 v158[8];
  uint64_t v159;
  CFRange v160;
  CFRange v161;
  CFRange v162;
  CFRange v163;

  v159 = *MEMORY[0x1E0C80C00];
  maxBufLen = 0;
  v155 = &a9;
  v154 = 0;
  v9 = *bytes;
  if (!*bytes)
    return 4294960569;
  v10 = bytes;
  v12 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
  while (1)
  {
    v13 = v9;
    v14 = v10;
    while (v13 > 0x3A || ((1 << v13) & 0x400400000000001) == 0)
    {
      v15 = *++v14;
      v13 = v15;
    }
    v16 = v14;
    if (v13)
    {
      do
      {
        if (v13 == 46)
          break;
        v17 = *++v16;
        v13 = v17;
      }
      while (v17);
    }
    if (v9 == 91)
    {
      v20 = v10[1];
      if (v20 == 42)
      {
        if (v10[2] != 93)
          return 4294960579;
        v21 = v155++;
        v22 = *(unsigned int *)v21;
        if ((v22 & 0x80000000) != 0)
          return 4294960586;
        v14 = v10 + 3;
      }
      else
      {
        v24 = v20 - 48;
        if (v24 > 9)
          return 4294960579;
        v22 = 0;
        do
        {
          v22 = 10 * v22 + v24;
          v25 = v10[2];
          v24 = v25 - 48;
          ++v10;
        }
        while ((v25 - 48) < 0xA);
        if (v22 < 0)
          return 4294960586;
        if (v25 != 93)
          return 4294960579;
        v14 = v10 + 2;
      }
      v26 = CFGetTypeID(cf);
      if (v26 != CFArrayGetTypeID())
        return 4294960540;
      if (v22 >= CFArrayGetCount((CFArrayRef)cf))
        return 4294960586;
      cf = (const __CFString *)CFArrayGetValueAtIndex((CFArrayRef)cf, v22);
      goto LABEL_54;
    }
    if (v9 != 37)
    {
      if (v10 >= v14)
      {
        v14 = v10;
        goto LABEL_54;
      }
      v23 = CFStringCreateWithBytes(v12, v10, v14 - v10, 0x8000100u, 0);
      if (!v23)
        return 4294960568;
      goto LABEL_52;
    }
    if (v10[1] != 107)
      return 4294960579;
    v18 = v10[2];
    result = 4294960579;
    if (v18 > 0x68)
    {
      if (v10[2] > 0x72u)
      {
        if (v18 == 116)
        {
          v38 = (UInt8 **)v155++;
          v28 = *v38;
          if (!*v38)
            return 4294960591;
          v39 = v155++;
          v30 = *(int *)v39;
          v29 = v12;
          v31 = 134217984;
          goto LABEL_49;
        }
        if (v18 != 115)
          return result;
        v32 = (char **)v155++;
        v33 = *v32;
        if (!*v32)
          return 4294960591;
        v34 = v12;
      }
      else
      {
        if (v18 != 105)
        {
          if (v18 != 111)
            return result;
          goto LABEL_43;
        }
        v36 = v155++;
        SNPrintF((uint64_t)cStr, 64, (uint64_t)"%llu", a4, a5, a6, a7, a8, *v36);
        v33 = (char *)cStr;
        v34 = 0;
      }
      v37 = CFStringCreateWithCString(v34, v33, 0x8000100u);
      goto LABEL_50;
    }
    if (v18 == 67)
      goto LABEL_38;
    if (v18 != 79)
    {
      if (v18 != 99)
        return result;
LABEL_38:
      v27 = (unsigned int *)v155++;
      *(_DWORD *)v158 = bswap32(*v27);
      v28 = v158;
      v29 = v12;
      v30 = 4;
      v31 = 0;
LABEL_49:
      v37 = CFStringCreateWithBytes(v29, v28, v30, v31, 0);
LABEL_50:
      v23 = v37;
      if (!v37)
        return 4294960568;
      goto LABEL_51;
    }
LABEL_43:
    v35 = (CFTypeRef *)v155++;
    v23 = (CFStringRef)*v35;
    if (!*v35)
      return 4294960591;
    CFRetain(*v35);
LABEL_51:
    v14 = v10 + 3;
LABEL_52:
    v40 = CFGetTypeID(cf);
    if (v40 != CFDictionaryGetTypeID())
    {
      CFRelease(v23);
      return 4294960540;
    }
    cf = (const __CFString *)CFDictionaryGetValue((CFDictionaryRef)cf, v23);
    CFRelease(v23);
    if (!cf)
      return 4294960569;
LABEL_54:
    if (*v14 == 58)
      break;
    if (*v16)
      v10 = v16 + 1;
    else
      v10 = v16;
    v9 = *v10;
    if (!*v10)
    {
      if (!cf)
        return 4294960569;
LABEL_60:
      if (a2)
LABEL_61:
        *(_QWORD *)a2 = cf;
      return 0;
    }
  }
  v41 = v14 + 1;
  for (i = v14 + 1; *i; ++i)
  {
    if (*i == 46)
      return 4294960579;
  }
  if (!cf)
    return 4294960569;
  if (!strcmp((const char *)v14 + 1, "err") || !strcmp((const char *)v14 + 1, "int"))
  {
    LODWORD(v48) = CFGetInt64(cf, (int *)&v154);
    result = v154;
    if (!v154)
    {
      if (a2)
LABEL_97:
        *(_DWORD *)a2 = v48;
      return 0;
    }
    return result;
  }
  if (!strcmp((const char *)v14 + 1, "int8"))
  {
    LOBYTE(v48) = CFGetInt64(cf, (int *)&v154);
    result = v154;
    if (!v154)
    {
      if (a2)
LABEL_100:
        *(_BYTE *)a2 = v48;
      return 0;
    }
    return result;
  }
  if (!strcmp((const char *)v14 + 1, "int16"))
  {
    LOWORD(v48) = CFGetInt64(cf, (int *)&v154);
    result = v154;
    if (!v154)
    {
      if (a2)
LABEL_103:
        *(_WORD *)a2 = v48;
      return 0;
    }
    return result;
  }
  if (!strcmp((const char *)v14 + 1, "int64"))
  {
    v48 = CFGetInt64(cf, (int *)&v154);
    result = v154;
    if (!v154)
    {
      if (a2)
LABEL_106:
        *(_QWORD *)a2 = v48;
      return 0;
    }
    return result;
  }
  if (!strcmp((const char *)v14 + 1, "int*"))
  {
    v48 = CFGetInt64(cf, (int *)&v154);
    result = v154;
    if (!v154)
    {
      v49 = v155++;
      result = 4294960553;
      switch(*v49)
      {
        case 1:
          goto LABEL_100;
        case 2:
          goto LABEL_103;
        case 4:
          goto LABEL_97;
        case 8:
          goto LABEL_106;
        default:
          return result;
      }
    }
    return result;
  }
  if (!strcmp((const char *)v14 + 1, "utf8"))
  {
    v50 = CFGetTypeID(cf);
    if (v50 != CFStringGetTypeID())
      return 4294960540;
    Length = CFStringGetLength(cf);
    maxBufLen = CFStringGetMaximumSizeForEncoding(Length, 0x8000100u);
    v52 = (UInt8 *)malloc_type_malloc(maxBufLen + 1, 0x7B59936FuLL);
    if (!v52)
      return 4294960568;
    v53 = v52;
    v160.location = 0;
    v160.length = Length;
    if (CFStringGetBytes(cf, v160, 0x8000100u, 0, 0, v52, maxBufLen, &maxBufLen) == Length)
    {
      v53[maxBufLen] = 0;
      if (a2)
        *(_QWORD *)a2 = v53;
      else
        free(v53);
      return 0;
    }
    free(v53);
    return 4294960560;
  }
  if (!strcmp((const char *)v14 + 1, "*utf8"))
  {
    v54 = CFGetTypeID(cf);
    if (v54 == CFStringGetTypeID())
    {
      v55 = v155++;
      if (CFStringGetCString(cf, (char *)a2, *v55, 0x8000100u))
        return 0;
      return 4294960553;
    }
    return 4294960540;
  }
  if (!strcmp((const char *)v14 + 1, "obj"))
  {
    if (a2)
    {
      CFRetain(cf);
      goto LABEL_61;
    }
    return 0;
  }
  if (!strcmp((const char *)v14 + 1, "BOOL"))
  {
    v56 = CFGetTypeID(cf);
    if (v56 == CFBooleanGetTypeID())
    {
      if (a2)
        *(_BYTE *)a2 = CFBooleanGetValue((CFBooleanRef)cf);
      return 0;
    }
    return 4294960540;
  }
  if (!strcmp((const char *)v14 + 1, "mac"))
  {
    v57 = CFGetTypeID(cf);
    if (v57 == CFDataGetTypeID())
    {
      if (CFDataGetLength((CFDataRef)cf) == 6)
      {
        if (a2)
        {
          BytePtr = CFDataGetBytePtr((CFDataRef)cf);
          v59 = *((_WORD *)BytePtr + 2);
          *(_DWORD *)a2 = *(_DWORD *)BytePtr;
          *(_WORD *)(a2 + 4) = v59;
        }
        return 0;
      }
      return 4294960553;
    }
    v68 = CFGetTypeID(cf);
    if (v68 != CFStringGetTypeID())
      return 4294960540;
    if (!CFStringGetCString(cf, (char *)cStr, 64, 0x8000100u))
      return 4294960553;
    result = TextToHardwareAddress((char *)cStr, 0xFFFFFFFFFFFFFFFFLL, 6, (_BYTE *)a2);
    if (!(_DWORD)result)
      return 0;
    return result;
  }
  if (!strcmp((const char *)v14 + 1, "macStr"))
  {
    v60 = CFGetTypeID(cf);
    if (v60 == CFDataGetTypeID())
    {
      if (CFDataGetLength((CFDataRef)cf) != 6)
        return 4294960553;
      v61 = CFDataGetBytePtr((CFDataRef)cf);
      v62 = 0;
      v63 = (_BYTE *)a2;
      do
      {
        v64 = (_BYTE *)a2;
        if (v63 != (_BYTE *)a2)
        {
          *v63 = 58;
          v64 = v63 + 1;
        }
        v65 = v61[v62];
        v66 = v62 + 1;
        *v64 = a0123456789abcd_0[v65 >> 4];
        v67 = a0123456789abcd_0[v65 & 0xF];
        v63 = v64 + 2;
        v64[1] = v67;
        v62 = v66;
      }
      while (v66 != 6);
    }
    else
    {
      v74 = CFGetTypeID(cf);
      if (v74 != CFStringGetTypeID())
        return 4294960540;
      if (!CFStringGetCString(cf, (char *)cStr, 64, 0x8000100u))
        return 4294960553;
      result = TextToHardwareAddress((char *)cStr, 0xFFFFFFFFFFFFFFFFLL, 6, v158);
      v154 = result;
      if ((_DWORD)result)
        return result;
      v75 = 0;
      v63 = (_BYTE *)a2;
      do
      {
        v76 = (_BYTE *)a2;
        if (v63 != (_BYTE *)a2)
        {
          *v63 = 58;
          v76 = v63 + 1;
        }
        v77 = v158[v75];
        v78 = v75 + 1;
        *v76 = a0123456789abcd_0[v77 >> 4];
        v79 = a0123456789abcd_0[v77 & 0xF];
        v63 = v76 + 2;
        v76[1] = v79;
        v75 = v78;
      }
      while (v78 != 6);
    }
    *v63 = 0;
    return 0;
  }
  if (!strcmp((const char *)v14 + 1, "code"))
  {
    *(_DWORD *)valuePtr = 0;
    v69 = CFGetTypeID(cf);
    if (v69 == CFStringGetTypeID())
    {
      if (CFStringGetLength(cf) != 4)
        return 4294960553;
      maxBufLen = 0;
      v161.location = 0;
      v161.length = 4;
      CFStringGetBytes(cf, v161, 0x8000100u, 0, 0, v158, 4, &maxBufLen);
      if (maxBufLen != 4)
        return 4294960579;
      v70 = v158[0] << 8;
      if (!v158[0])
        v70 = 0x2000;
      v71 = v158[1];
      if (!v158[1])
        v71 = 32;
      if (v158[2])
        v72 = v158[2] << 8;
      else
        v72 = 0x2000;
      if (v158[3])
        v73 = v158[3];
      else
        v73 = 32;
      *(_DWORD *)valuePtr = v72 | v73 | ((v70 | v71) << 16);
    }
    else
    {
      v81 = CFGetTypeID(cf);
      if (v81 != CFNumberGetTypeID())
        return 4294960540;
      CFNumberGetValue((CFNumberRef)cf, kCFNumberSInt32Type, valuePtr);
    }
    v82 = (int *)a2;
    if (!a2)
      return 0;
    v83 = *(_DWORD *)valuePtr;
LABEL_286:
    *v82 = v83;
    return 0;
  }
  if (!strcmp((const char *)v14 + 1, "ipv4"))
  {
    v80 = CFGetTypeID(cf);
    if (v80 != CFStringGetTypeID())
      return 4294960540;
    if (!CFStringGetCString(cf, (char *)cStr, 64, 0x8000100u))
      return 4294960545;
    result = StringToIPv4Address(cStr, (_DWORD *)a2, 0);
    if (!(_DWORD)result)
      return 0;
    return result;
  }
  if (!strcmp((const char *)v14 + 1, "vers"))
  {
    v84 = CFGetTypeID(cf);
    if (v84 != CFStringGetTypeID())
      return 4294960540;
    v162.length = CFStringGetLength(cf);
    maxBufLen = 0;
    v85 = (char *)cStr;
    v162.location = 0;
    CFStringGetBytes(cf, v162, 0x8000100u, 0, 0, cStr, 63, &maxBufLen);
    v86 = maxBufLen;
    if (maxBufLen == -1)
      v86 = strlen((const char *)cStr);
    v87 = (char *)&cStr[v86];
    if (v86 >= 1)
    {
      v85 = (char *)cStr;
      v88 = MEMORY[0x1E0C80978];
      do
      {
        v89 = *v85;
        if (*v85 < 0)
          v90 = __maskrune(v89, 0x4000uLL);
        else
          v90 = *(_DWORD *)(v88 + 4 * v89 + 60) & 0x4000;
        if (!v90)
          break;
        ++v85;
      }
      while (v85 < v87);
    }
    if (v85 >= v87)
    {
      v96 = 0;
    }
    else
    {
      if (*v85 - 48 <= 9)
      {
        v91 = (char *)&cStr[v86 + ~(unint64_t)v85];
        v92 = v85;
        while (v91)
        {
          v93 = *++v92;
          --v91;
          if ((v93 - 48) > 9)
            goto LABEL_212;
        }
        v92 = (char *)&cStr[v86];
LABEL_212:
        v96 = v92 < v87;
LABEL_213:
        if (v85 == v92)
          return 4294960554;
        v108 = TextToInt32(v85, v92 - v85, 10);
        if (v108 <= 0xFF)
        {
          v109 = v108;
          v110 = &v92[v96];
          if (v110 >= v87)
          {
            v113 = 1;
            v111 = &v92[v96];
          }
          else
          {
            v111 = &v92[v96];
            while (1)
            {
              v112 = *v111 - 48;
              v113 = v112 < 0xA;
              if (v112 > 9)
                break;
              if (++v111 >= v87)
              {
                v113 = 1;
                v111 = (char *)&cStr[v86];
                break;
              }
            }
          }
          v114 = TextToInt32(v110, v111 - v110, 10);
          if (v114 <= 0xF)
          {
            v115 = v114;
            v116 = v110 == v111 || v113;
            if ((v116 & 1) != 0)
            {
              v117 = 0;
              v118 = 0;
              v119 = 0x8000;
LABEL_284:
              if (!a2)
                return 0;
              v83 = (v115 << 20) | (v109 << 24) | (v117 << 16) | v119 | v118;
              v82 = (int *)a2;
              goto LABEL_286;
            }
            v120 = v111 + 1;
            v121 = __tolower(*v111);
            if (v121 != 46)
            {
              v117 = 0;
              v122 = v111 + 1;
              goto LABEL_256;
            }
            if (v120 >= v87)
            {
              v123 = 1;
              v122 = v111 + 1;
              v127 = 1;
            }
            else if (v111[1] - 48 > 9)
            {
              v127 = 0;
              v123 = 1;
              v122 = v120;
            }
            else
            {
              v122 = (char *)&cStr[v86];
              v123 = &cStr[v86] - (UInt8 *)v111;
              v124 = 2;
              while (v123 != v124)
              {
                v125 = v124;
                v126 = v111[v124++] - 48;
                if (v126 > 9)
                {
                  v122 = &v111[v125];
                  v123 = v125;
                  break;
                }
              }
              v127 = v122 >= v87;
            }
            v133 = TextToInt32(v120, v123 - 1, 10);
            if (v133 <= 0xF)
            {
              v117 = v133;
              v134 = v123 == 1 || v127;
              if ((v134 & 1) != 0)
              {
                v135 = 0x8000;
LABEL_264:
                v138 = v122;
                if (v122 < v87)
                {
                  v139 = (char *)(&cStr[v86] - (UInt8 *)v122);
                  v138 = v122;
                  while (*v138 - 48 <= 9)
                  {
                    ++v138;
                    if (!--v139)
                    {
                      v138 = (char *)&cStr[v86];
                      break;
                    }
                  }
                }
                if (v122 >= v138)
                  v140 = 0;
                else
                  v140 = TextToInt32(v122, v138 - v122, 10);
                v142 = v122 == v138 || v140 > 0xFF;
                v143 = !v142;
                if (v142)
                  v119 = 0x8000;
                else
                  v119 = v135;
                if (v143)
                  v118 = v140;
                else
                  v118 = 0;
                goto LABEL_284;
              }
              v136 = *v122++;
              v121 = __tolower(v136);
LABEL_256:
              if (v121 == 100)
                v137 = 0x2000;
              else
                v137 = 0x8000;
              if (v121 == 98)
                v137 = 24576;
              if (v121 == 97)
                v135 = 0x4000;
              else
                v135 = v137;
              goto LABEL_264;
            }
          }
        }
        return 4294960586;
      }
      v96 = 1;
    }
    v92 = v85;
    goto LABEL_213;
  }
  if (!strcmp((const char *)v14 + 1, "svers"))
  {
    v94 = CFGetTypeID(cf);
    if (v94 != CFStringGetTypeID())
      return 4294960540;
    v163.length = CFStringGetLength(cf);
    maxBufLen = 0;
    v163.location = 0;
    CFStringGetBytes(cf, v163, 0x8000100u, 0, 0, cStr, 63, &maxBufLen);
    v95 = TextToSourceVersion((char *)cStr, maxBufLen);
    if (v95)
    {
      *(_DWORD *)a2 = v95;
      return 0;
    }
    return 4294960554;
  }
  if (!strcmp((const char *)v14 + 1, "uuid"))
  {
    v97 = CFGetTypeID(cf);
    if (v97 == CFDataGetTypeID())
    {
      if (CFDataGetLength((CFDataRef)cf) == 16)
      {
        if (a2)
          *(_OWORD *)a2 = *(_OWORD *)CFDataGetBytePtr((CFDataRef)cf);
        return 0;
      }
      return 4294960553;
    }
    v102 = CFGetTypeID(cf);
    if (v102 != CFStringGetTypeID())
      return 4294960540;
    if (!CFStringGetCString(cf, valuePtr, 64, 0x8000100u))
      return 4294960553;
    result = StringToUUIDEx(valuePtr, 0xFFFFFFFFFFFFFFFFLL, 0, 0, (_OWORD *)a2, v103, v104, v105);
    if (!(_DWORD)result)
      return 0;
  }
  else
  {
    if (strcmp((const char *)v14 + 1, "CFStringUUID"))
    {
      if (!strncmp((const char *)v14 + 1, "CF", 2uLL))
      {
        v106 = strchr((char *)v14 + 1, 33);
        if (v106)
          v107 = v106 - v41;
        else
          v107 = strlen((const char *)v14 + 1);
        v144 = 0;
        while (v107 != v144)
        {
          if (v41[v144] != aCfarray[v144])
            goto LABEL_294;
          if (++v144 == 8)
            goto LABEL_299;
        }
        if (!aCfarray[v107])
        {
LABEL_299:
          TypeID = CFArrayGetTypeID();
          goto LABEL_338;
        }
LABEL_294:
        v145 = 0;
        while (v107 != v145)
        {
          if (v41[v145] != aCfBOOLean[v145])
            goto LABEL_301;
          if (++v145 == 10)
            goto LABEL_306;
        }
        if (!aCfBOOLean[v107])
        {
LABEL_306:
          TypeID = CFBooleanGetTypeID();
          goto LABEL_338;
        }
LABEL_301:
        v147 = 0;
        while (v107 != v147)
        {
          if (v41[v147] != aCfdata[v147])
            goto LABEL_308;
          if (++v147 == 7)
            goto LABEL_313;
        }
        if (!aCfdata[v107])
        {
LABEL_313:
          TypeID = CFDataGetTypeID();
          goto LABEL_338;
        }
LABEL_308:
        v148 = 0;
        while (v107 != v148)
        {
          if (v41[v148] != aCfdate[v148])
            goto LABEL_315;
          if (++v148 == 7)
            goto LABEL_320;
        }
        if (!aCfdate[v107])
        {
LABEL_320:
          TypeID = CFDateGetTypeID();
          goto LABEL_338;
        }
LABEL_315:
        v149 = 0;
        while (v107 != v149)
        {
          if (v41[v149] != aCfdictionary[v149])
            goto LABEL_322;
          if (++v149 == 13)
            goto LABEL_327;
        }
        if (!aCfdictionary[v107])
        {
LABEL_327:
          TypeID = CFDictionaryGetTypeID();
          goto LABEL_338;
        }
LABEL_322:
        v150 = 0;
        while (v107 != v150)
        {
          if (v41[v150] != aCfnumber[v150])
            goto LABEL_329;
          if (++v150 == 9)
            goto LABEL_334;
        }
        if (!aCfnumber[v107])
        {
LABEL_334:
          TypeID = CFNumberGetTypeID();
          goto LABEL_338;
        }
LABEL_329:
        v151 = 0;
        while (v107 != v151)
        {
          if (v41[v151] != aCfstring[v151])
            return 4294960561;
          if (++v151 == 9)
            goto LABEL_337;
        }
        if (aCfstring[v107])
          return 4294960561;
LABEL_337:
        TypeID = CFStringGetTypeID();
LABEL_338:
        if (CFGetTypeID(cf) == TypeID)
          goto LABEL_60;
        return 4294960540;
      }
      if (!strcmp((const char *)v14 + 1, "data*"))
      {
        v128 = CFGetTypeID(cf);
        if (v128 == CFDataGetTypeID())
        {
          v129 = v155++;
          v130 = *v129;
          if (CFDataGetLength((CFDataRef)cf) == v130)
          {
            if (a2)
              *(_QWORD *)a2 = CFDataGetBytePtr((CFDataRef)cf);
            return 0;
          }
        }
        return 4294960553;
      }
      v43 = *v41 - 48;
      if (v43 > 9)
      {
        if (!*v41)
        {
          v44 = 0;
          goto LABEL_243;
        }
      }
      else
      {
        v44 = 0;
        v45 = v14 + 2;
        do
        {
          v44 = 10 * v44 + v43;
          v47 = *v45++;
          v46 = v47;
          v43 = v47 - 48;
        }
        while ((v47 - 48) < 0xA);
        if (!v46)
        {
          if ((v44 & 0x8000000000000000) != 0)
            return 4294960586;
LABEL_243:
          v131 = CFGetTypeID(cf);
          if (v131 == CFDataGetTypeID())
          {
            if (CFDataGetLength((CFDataRef)cf) == v44)
            {
              if (a2)
              {
                v132 = CFDataGetBytePtr((CFDataRef)cf);
                memcpy((void *)a2, v132, v44);
              }
              return 0;
            }
            return 4294960553;
          }
          return 4294960540;
        }
      }
      return 4294960560;
    }
    v98 = CFGetTypeID(cf);
    if (v98 != CFStringGetTypeID())
      return 4294960540;
    if (!CFStringGetCString(cf, (char *)cStr, 64, 0x8000100u))
      return 4294960553;
    result = StringToUUIDEx((char *)cStr, 0xFFFFFFFFFFFFFFFFLL, 0, 0, 0, v99, v100, v101);
    if (!(_DWORD)result)
      goto LABEL_60;
  }
  return result;
}

CFPropertyListRef CFCreateWithPlistBytes(UInt8 *bytes, CFIndex length, unsigned int a3, uint64_t a4, int *a5)
{
  const __CFData *v8;
  const __CFData *v9;
  CFPropertyListRef v10;
  int v11;
  int v12;
  CFMutableDictionaryRef Mutable;

  if (!length)
  {
    v12 = a3 & 3;
    if (CFDictionaryGetTypeID() == a4)
    {
      if (v12)
        Mutable = CFDictionaryCreateMutable(0, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
      else
        Mutable = CFDictionaryCreate(0, 0, 0, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
    }
    else
    {
      if (CFArrayGetTypeID() != a4)
      {
        v10 = 0;
        v11 = -6732;
        goto LABEL_18;
      }
      if (v12)
        Mutable = CFArrayCreateMutable(0, 0, MEMORY[0x1E0C9B378]);
      else
        Mutable = CFArrayCreate(0, 0, 0, MEMORY[0x1E0C9B378]);
    }
    v10 = Mutable;
    if (Mutable)
      goto LABEL_17;
    goto LABEL_22;
  }
  v8 = CFDataCreate(0, bytes, length);
  if (!v8)
  {
    v10 = 0;
LABEL_22:
    v11 = -6728;
    goto LABEL_18;
  }
  v9 = v8;
  v10 = CFPropertyListCreateWithData(0, v8, a3, 0, 0);
  CFRelease(v9);
  if (v10)
  {
    if (a4 && CFGetTypeID(v10) != a4)
    {
      CFRelease(v10);
      v10 = 0;
      v11 = -6756;
      goto LABEL_18;
    }
LABEL_17:
    v11 = 0;
    goto LABEL_18;
  }
  v11 = -6717;
LABEL_18:
  if (a5)
    *a5 = v11;
  return v10;
}

uint64_t CFCreateObjectFromString(char *a1, _QWORD *a2)
{
  size_t v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void *Int64;
  void **v12;
  uint64_t v13;
  uint64_t v15;

  if (!strcasecmp(a1, "true") || !strcasecmp(a1, "yes") || !strcasecmp(a1, "y") || !strcasecmp(a1, "on"))
  {
    v12 = (void **)MEMORY[0x1E0C9AE50];
LABEL_14:
    Int64 = *v12;
    goto LABEL_15;
  }
  if (!strcasecmp(a1, "false") || !strcasecmp(a1, "no") || !strcasecmp(a1, "n") || !strcasecmp(a1, "off"))
  {
    v12 = (void **)MEMORY[0x1E0C9AE40];
    goto LABEL_14;
  }
  v15 = 0;
  v4 = strlen(a1);
  v5 = v4;
  if (SNScanF(a1, v4, "%lli %n", v6, v7, v8, v9, v10, (int)&v15) == 1 && v5 == -1)
  {
    Int64 = CFNumberCreateInt64(v15);
    if (!Int64)
      return 4294960596;
  }
  else if (!strcmp(a1, "[]"))
  {
    Int64 = CFArrayCreateMutable(0, 0, MEMORY[0x1E0C9B378]);
    if (!Int64)
      return 4294960596;
  }
  else if (!strcmp(a1, "{}"))
  {
    Int64 = CFDictionaryCreateMutable(0, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
    if (!Int64)
      return 4294960596;
  }
  else
  {
    Int64 = (void *)CFStringCreateWithCString(0, a1, 0x8000100u);
    if (!Int64)
      return 4294960596;
  }
LABEL_15:
  v13 = 0;
  *a2 = Int64;
  return v13;
}

const __CFDictionary *CFDictionaryCreateWithINIBytes(const UInt8 *a1, uint64_t a2, char a3, const void *a4, int *a5)
{
  CFMutableDictionaryRef Mutable;
  unint64_t v11;
  uint64_t v12;
  const UInt8 *v13;
  int64_t v14;
  uint64_t v15;
  const UInt8 *v16;
  const UInt8 *v17;
  unsigned __int8 *v18;
  int64_t v19;
  int v20;
  int v22;
  const UInt8 *v23;
  const UInt8 *v24;
  uint64_t v25;
  int v26;
  const UInt8 *v27;
  uint64_t v28;
  int64_t v29;
  const UInt8 *v30;
  uint64_t v31;
  const UInt8 *v33;
  unsigned __int8 *v34;
  int64_t v35;
  uint64_t v36;
  int v37;
  const char *v38;
  unsigned __int8 *v39;
  const UInt8 *v40;
  int64_t v41;
  uint64_t v42;
  const char *v43;
  int v44;
  const char *v45;
  const char *v46;
  uint64_t v47;
  uint64_t v48;
  unsigned __int8 *v49;
  uint64_t v50;
  int v51;
  const char *v52;
  int v53;
  uint64_t v54;
  unsigned __int8 *v55;
  unsigned __int8 *v56;
  uint64_t v57;
  int v58;
  CFIndex v59;
  CFStringRef v60;
  CFStringRef v61;
  CFMutableDictionaryRef v62;
  __CFArray *v63;
  CFMutableDictionaryRef v64;
  CFStringRef v65;
  __CFDictionary *v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  void *Value;
  CFMutableDictionaryRef v72;
  CFStringRef v73;
  __CFDictionary *v74;
  CFStringRef v75;
  CFMutableDictionaryRef v76;
  __CFArray *v77;
  __CFArray *v78;
  int v79;
  const __CFDictionary *v80;
  const __CFDictionary *v81;
  const void *v83;
  int v84;
  int *v85;
  const __CFDictionary *theDict;
  CFMutableDictionaryRef cf;
  const UInt8 *v88;

  Mutable = CFDictionaryCreateMutable(0, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  if (!Mutable)
  {
    v80 = 0;
    v79 = -6728;
    goto LABEL_165;
  }
  v83 = a4;
  v85 = a5;
  theDict = Mutable;
  cf = 0;
  v11 = (unint64_t)&a1[a2];
  v12 = MEMORY[0x1E0C80978];
  v13 = &a1[a2];
  v84 = a3 & 1;
  v88 = &a1[a2];
  do
  {
    while (1)
    {
      do
      {
        if ((unint64_t)a1 < v11)
        {
          v14 = v13 - a1;
          do
          {
            v15 = *a1;
            if (*(char *)a1 < 0)
            {
              if (!__maskrune(v15, 0x4000uLL))
                goto LABEL_11;
            }
            else if ((*(_DWORD *)(v12 + 4 * v15 + 60) & 0x4000) == 0)
            {
              goto LABEL_11;
            }
            ++a1;
            --v14;
          }
          while (v14);
          a1 = (const UInt8 *)v11;
        }
LABEL_11:
        v16 = a1;
        v17 = a1;
        if (a1 == (const UInt8 *)v11)
        {
          v79 = 0;
          v80 = theDict;
          v62 = cf;
          v81 = 0;
          goto LABEL_161;
        }
        v18 = (unsigned __int8 *)a1;
        if ((unint64_t)a1 < v11)
        {
          a1 = (const UInt8 *)v11;
          v19 = v13 - v16;
          v18 = (unsigned __int8 *)v17;
          while (1)
          {
            v20 = *v18;
            if (v20 == 10 || v20 == 13)
              break;
            ++v18;
            if (!--v19)
            {
              v18 = (unsigned __int8 *)(&v17[v11] - v16);
              goto LABEL_23;
            }
          }
          if (v20 == 13)
            a1 = v18 + 1;
          else
            a1 = v18;
        }
LABEL_23:
        if ((unint64_t)a1 < v11 && *a1 == 10)
          ++a1;
        v22 = *v17;
      }
      while (v22 == 35 || v22 == 59);
      if (v22 != 91)
        break;
      v23 = v17 + 1;
      do
      {
        v24 = v23;
        if (v23 >= v18)
        {
          v27 = v23;
          goto LABEL_58;
        }
        v25 = *v23;
        if (*(char *)v23 < 0)
          v26 = __maskrune(v25, 0x4000uLL);
        else
          v26 = *(_DWORD *)(v12 + 4 * v25 + 60) & 0x4000;
        v23 = v24 + 1;
      }
      while (v26);
      v27 = v24;
      do
      {
        v28 = *v27;
        if (v28 == 93)
          break;
        if ((v28 & 0x80) != 0)
        {
          if (__maskrune(v28, 0x4000uLL))
            break;
        }
        else if ((*(_DWORD *)(v12 + 4 * v28 + 60) & 0x4000) != 0)
        {
          break;
        }
        ++v27;
      }
      while (v27 < v18);
LABEL_58:
      if (v27 != v18)
      {
        v34 = (unsigned __int8 *)v27;
        if (v27 < v18)
        {
          v35 = v18 - v27;
          v34 = (unsigned __int8 *)v27;
          do
          {
            v36 = *v34;
            if ((char)*v34 < 0)
            {
              if (!__maskrune(v36, 0x4000uLL))
                goto LABEL_67;
            }
            else if ((*(_DWORD *)(v12 + 4 * v36 + 60) & 0x4000) == 0)
            {
              goto LABEL_67;
            }
            ++v34;
            --v35;
          }
          while (v35);
          v34 = v18;
        }
LABEL_67:
        if (v34 != v18)
        {
          v37 = *v34;
          if (v37 == 34)
          {
            v38 = (const char *)(v34 + 1);
            v39 = v34 + 1;
            if (v34 + 1 < v18)
            {
              v54 = v18 - v34 - 1;
              v39 = v34 + 1;
              while (*v39 != 34)
              {
                ++v39;
                if (!--v54)
                {
                  v39 = v18;
                  break;
                }
              }
            }
            if (v39 != v18)
            {
              v55 = v39 + 1;
              do
              {
                v56 = v55;
                if (v55 >= v18)
                  break;
                v57 = *v55;
                v58 = (char)*v55 < 0 ? __maskrune(v57, 0x4000uLL) : *(_DWORD *)(v12 + 4 * v57 + 60) & 0x4000;
                v55 = v56 + 1;
              }
              while (v58);
              if (v56 != v18 && *v56 == 93)
              {
LABEL_111:
                if (cf)
                  CFRelease(cf);
                cf = CFDictionaryCreateMutable(0, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
                if (!cf)
                {
LABEL_170:
                  v80 = 0;
                  v79 = -6728;
                  a5 = v85;
                  v81 = theDict;
                  goto LABEL_164;
                }
                v59 = v39 - (unsigned __int8 *)v38;
                if (v38)
                {
                  if ((unint64_t)v83 + 2 >= 3)
                    CFDictionarySetCString(cf, v83, v38, v59);
                  if (v83 == (const void *)-1)
                  {
                    v61 = CFStringCreateWithFormat(0, 0, CFSTR("%.*s.%.*s"), v27 - v24, v24, v59, v38);
                    v62 = cf;
                    if (!v61)
                    {
                      v80 = 0;
                      v79 = -6700;
                      a5 = v85;
                      v81 = theDict;
                      goto LABEL_162;
                    }
LABEL_156:
                    v74 = theDict;
                    v75 = v61;
                    v76 = v62;
LABEL_157:
                    CFDictionarySetValue(v74, v75, v76);
                    goto LABEL_134;
                  }
                }
                v60 = CFStringCreateWithBytes(0, v24, v27 - v24, 0x8000100u, 0);
                if (!v60)
                  goto LABEL_171;
                v61 = v60;
                v62 = cf;
                if (v83 == (const void *)-2)
                {
                  Value = (void *)CFDictionaryGetValue(theDict, v60);
                  if (!Value)
                  {
                    v72 = CFDictionaryCreateMutable(0, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
                    if (!v72)
                      goto LABEL_174;
                    Value = v72;
                    CFDictionarySetValue(theDict, v61, v72);
                    CFRelease(Value);
                  }
                  CFRelease(v61);
                  v73 = CFStringCreateWithBytes(0, (const UInt8 *)v38, v59, 0x8000100u, 0);
                  if (!v73)
                  {
LABEL_171:
                    v80 = 0;
                    v79 = -6700;
LABEL_172:
                    a5 = v85;
                    v81 = theDict;
                    v62 = cf;
                    goto LABEL_162;
                  }
                  v61 = v73;
                  v74 = (__CFDictionary *)Value;
                  v75 = v61;
                  v76 = cf;
                  goto LABEL_157;
                }
                if (v83 == (const void *)-1)
                  goto LABEL_156;
                v63 = (__CFArray *)CFDictionaryGetValue(theDict, v60);
                if (v63)
                {
                  CFArrayAppendValue(v63, cf);
                }
                else
                {
                  v77 = CFArrayCreateMutable(0, 0, MEMORY[0x1E0C9B378]);
                  if (!v77)
                  {
LABEL_174:
                    CFRelease(v61);
                    v80 = 0;
                    v79 = -6728;
                    goto LABEL_172;
                  }
                  v78 = v77;
                  CFArrayAppendValue(v77, cf);
                  CFDictionarySetValue(theDict, v61, v78);
                  CFRelease(v78);
                }
LABEL_134:
                CFRelease(v61);
              }
            }
          }
          else if (v37 == 93)
          {
            v38 = 0;
            v39 = 0;
            goto LABEL_111;
          }
        }
      }
    }
    if (v17 >= v18)
    {
      v33 = v17;
    }
    else
    {
      v29 = v18 - v16;
      v30 = &v17[v18 - v16];
      v16 = v17;
      while (1)
      {
        v31 = *v16;
        if (v31 <= 0x3D && ((1 << v31) & 0x2800000800000000) != 0)
          break;
        if ((v31 & 0x80) != 0)
        {
          if (__maskrune(v31, 0x4000uLL))
            break;
        }
        else if ((*(_DWORD *)(v12 + 4 * v31 + 60) & 0x4000) != 0)
        {
          break;
        }
        ++v16;
        if (!--v29)
        {
          v16 = v30;
          break;
        }
      }
      v33 = v16;
    }
    v40 = v33;
    if (v33 < v18)
    {
      v41 = v18 - v16;
      v40 = v33;
      do
      {
        v42 = *v40;
        if (*(char *)v40 < 0)
        {
          if (!__maskrune(v42, 0x4000uLL))
            goto LABEL_80;
        }
        else if ((*(_DWORD *)(v12 + 4 * v42 + 60) & 0x4000) == 0)
        {
          goto LABEL_80;
        }
        ++v40;
        --v41;
      }
      while (v41);
      v40 = &v33[v18 - v16];
LABEL_80:
      v13 = v88;
    }
    if (v40 == v18)
    {
      v43 = 0;
      v45 = 0;
      goto LABEL_125;
    }
    v43 = 0;
    v44 = *v40;
    v45 = 0;
    if (v44 == 35 || v44 == 59)
      goto LABEL_125;
  }
  while (v44 != 61);
  v46 = (const char *)(v40 + 1);
  v47 = v18 - v40 - 2;
  do
  {
    v43 = v46;
    if (v46 >= (const char *)v18)
      goto LABEL_124;
    v48 = v47;
    v49 = (unsigned __int8 *)v40;
    v50 = *(unsigned __int8 *)v46;
    if (*v46 < 0)
      v51 = __maskrune(v50, 0x4000uLL);
    else
      v51 = *(_DWORD *)(v12 + 4 * v50 + 60) & 0x4000;
    v46 = v43 + 1;
    v47 = v48 - 1;
    ++v40;
  }
  while (v51);
  v52 = v43 - 1;
  v53 = *(unsigned __int8 *)v43;
  if (v53 == 34)
  {
    ++v43;
    if (v52 + 2 >= (const char *)v18)
    {
LABEL_124:
      v45 = v43;
      v13 = v88;
      goto LABEL_125;
    }
    v45 = v52 + 2;
    v13 = v88;
    while (*v45 != 34)
    {
      if (++v45 >= (const char *)v18)
      {
        v45 = (const char *)v18;
        break;
      }
    }
  }
  else
  {
    v67 = 0;
    v68 = v18 - (unsigned __int8 *)v52;
    while (v53 != 35 && v53 != 59)
    {
      if (!v48)
        goto LABEL_141;
      v53 = v46[v67++];
      --v48;
    }
    v68 = v67 + 1;
LABEL_141:
    v13 = v88;
    if (v68 < 2)
    {
      v45 = &v52[v68];
    }
    else
    {
      v45 = (const char *)&v49[v68];
      v69 = v68 + 1;
      do
      {
        v70 = *((unsigned __int8 *)v45 - 1);
        if (*(v45 - 1) < 0)
        {
          if (!__maskrune(v70, 0x4000uLL))
            break;
        }
        else if ((*(_DWORD *)(v12 + 4 * v70 + 60) & 0x4000) == 0)
        {
          break;
        }
        --v45;
        --v69;
      }
      while (v69 >= 3);
    }
  }
LABEL_125:
  v62 = cf;
  if (!cf && !v84)
  {
    v64 = CFDictionaryCreateMutable(0, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
    if (!v64)
      goto LABEL_170;
    v62 = v64;
    CFDictionarySetValue(theDict, &stru_1E25DF9F8, v64);
  }
  v65 = CFStringCreateWithBytes(0, v17, v33 - v17, 0x8000100u, 0);
  if (v65)
  {
    v61 = v65;
    cf = v62;
    if (v62)
      v66 = v62;
    else
      v66 = theDict;
    CFDictionarySetCString(v66, v61, v43, v45 - v43);
    goto LABEL_134;
  }
  v80 = 0;
  v79 = -6700;
  v81 = theDict;
LABEL_161:
  a5 = v85;
  if (!v62)
    goto LABEL_163;
LABEL_162:
  CFRelease(v62);
LABEL_163:
  if (!v81)
    goto LABEL_165;
LABEL_164:
  CFRelease(v81);
LABEL_165:
  if (a5)
    *a5 = v79;
  return v80;
}

uint64_t CFPropertyListCreateBytes(CFPropertyListRef propertyList, CFPropertyListFormat format, _QWORD *a3, size_t *a4)
{
  const __CFData *Data;
  const __CFData *v7;
  size_t Length;
  void *v9;
  void *v10;
  const UInt8 *BytePtr;
  uint64_t v12;

  Data = CFPropertyListCreateData(0, propertyList, format, 0, 0);
  if (!Data)
    return 4294960596;
  v7 = Data;
  Length = CFDataGetLength(Data);
  v9 = malloc_type_malloc(Length, 0xB17AC261uLL);
  if (v9)
  {
    v10 = v9;
    BytePtr = CFDataGetBytePtr(v7);
    memcpy(v10, BytePtr, Length);
    v12 = 0;
    *a3 = v10;
    *a4 = Length;
  }
  else
  {
    v12 = 4294960596;
  }
  CFRelease(v7);
  return v12;
}

CFMutableDataRef CFDataCreateWithANSIFile(FILE *a1, int *a2)
{
  CFMutableDataRef Mutable;
  UInt8 *v5;
  UInt8 *i;
  size_t v7;
  int v8;

  Mutable = CFDataCreateMutable(0, 0);
  if (!Mutable)
  {
LABEL_10:
    v8 = -6728;
    if (!a2)
      return Mutable;
    goto LABEL_7;
  }
  v5 = (UInt8 *)malloc_type_malloc(0x20000uLL, 0xE5AE55E1uLL);
  if (!v5)
  {
    CFRelease(Mutable);
    Mutable = 0;
    goto LABEL_10;
  }
  for (i = v5; ; CFDataAppendBytes(Mutable, i, v7))
  {
    v7 = fread(i, 1uLL, 0x20000uLL, a1);
    if (!v7)
      break;
  }
  free(i);
  v8 = 0;
  if (a2)
LABEL_7:
    *a2 = v8;
  return Mutable;
}

CFPropertyListRef CFPropertyListCreateFromFilePath(const char *a1, CFOptionFlags a2, int *a3)
{
  const __CFData *v5;
  const __CFData *v6;
  CFPropertyListRef v7;
  int v9;

  v9 = 0;
  v5 = CFDataCreateWithFilePath(a1, &v9);
  if (v5)
  {
    v6 = v5;
    v7 = CFPropertyListCreateWithData(0, v5, a2, 0, 0);
    CFRelease(v6);
    if (!v7)
      v9 = -6717;
  }
  else
  {
    v7 = 0;
  }
  if (a3)
    *a3 = v9;
  return v7;
}

CFMutableDataRef CFDataCreateWithFilePath(const char *a1, _DWORD *a2)
{
  FILE *v3;
  FILE *v4;
  CFMutableDataRef v5;
  int v7;

  v7 = 0;
  v3 = fopen(a1, "rb");
  if (v3)
  {
    v4 = v3;
    v7 = 0;
    v5 = CFDataCreateWithANSIFile(v3, &v7);
    fclose(v4);
    if (!a2)
      return v5;
    goto LABEL_9;
  }
  if (*__error())
  {
    v7 = *__error();
    if (v7)
    {
      v5 = 0;
      if (!a2)
        return v5;
    }
    else
    {
      v5 = CFDataCreateWithANSIFile(0, &v7);
      if (!a2)
        return v5;
    }
    goto LABEL_9;
  }
  v5 = 0;
  v7 = -6700;
  if (a2)
LABEL_9:
    *a2 = v7;
  return v5;
}

uint64_t CFPropertyListWriteToFilePath(const __CFString *cf, char *__s1, FILE *a3)
{
  const char *v4;
  uint64_t v6;
  int v7;
  int v8;
  CFTypeID v9;
  const __CFData *Data;
  size_t Length;
  const UInt8 *BytePtr;
  int v13;
  FILE *v14;
  size_t v15;
  const UInt8 *v16;
  size_t v17;
  size_t __nitems;
  void *v20;
  void *__ptr;
  unsigned int v22;

  v4 = __s1;
  v6 = 0;
  v22 = 0;
  v20 = 0;
  __ptr = 0;
  __nitems = 0;
  while (v6 != 4)
  {
    v7 = aRaw[v6];
    v8 = __s1[v6++];
    if (v8 != v7)
      goto LABEL_14;
  }
  v9 = CFGetTypeID(cf);
  if (v9 != CFStringGetTypeID())
  {
    if (v9 == CFDataGetTypeID())
    {
      if (a3)
      {
        a3 = fopen((const char *)a3, "wb");
        if (!a3)
        {
          if (!*__error())
          {
LABEL_42:
            a3 = 0;
            Data = 0;
            goto LABEL_43;
          }
          a3 = 0;
          Data = 0;
          v22 = *__error();
          if (v22)
            goto LABEL_47;
        }
        Length = CFDataGetLength((CFDataRef)cf);
        BytePtr = CFDataGetBytePtr((CFDataRef)cf);
        if (fwrite(BytePtr, 1uLL, Length, a3) != Length)
          goto LABEL_28;
        goto LABEL_12;
      }
      goto LABEL_54;
    }
    v4 += 4;
LABEL_14:
    if (!strcmp(v4, "streamed"))
    {
      Data = (const __CFData *)CFBinaryPlistStreamedCreateDataEx(cf, 31, (int *)&v22);
      if (v22)
      {
        a3 = 0;
        goto LABEL_47;
      }
    }
    else
    {
      if (strcmp(v4, "binary1"))
      {
        a3 = 0;
        Data = 0;
        v13 = -6735;
        goto LABEL_46;
      }
      Data = CFPropertyListCreateData(0, cf, kCFPropertyListBinaryFormat_v1_0, 0, 0);
      if (!Data)
        goto LABEL_41;
    }
    if (!a3)
    {
LABEL_55:
      v13 = -6704;
      goto LABEL_46;
    }
    v14 = fopen((const char *)a3, "wb");
    if (v14)
    {
      a3 = v14;
      v22 = 0;
      goto LABEL_23;
    }
    if (*__error())
    {
      a3 = 0;
      v22 = *__error();
      if (v22)
        goto LABEL_47;
LABEL_23:
      v15 = CFDataGetLength(Data);
      v16 = CFDataGetBytePtr(Data);
      if (fwrite(v16, 1uLL, v15, a3) == v15)
      {
        v13 = 0;
        goto LABEL_46;
      }
      if (*__error())
      {
        v13 = *__error();
        goto LABEL_46;
      }
      goto LABEL_43;
    }
LABEL_41:
    a3 = 0;
LABEL_43:
    v13 = -6700;
    goto LABEL_46;
  }
  v22 = CFStringGetOrCopyCStringUTF8(cf, (const char **)&__ptr, (UInt8 **)&v20, &__nitems);
  if (v22)
  {
    a3 = 0;
    Data = 0;
    goto LABEL_47;
  }
  if (!a3)
  {
LABEL_54:
    Data = 0;
    goto LABEL_55;
  }
  a3 = fopen((const char *)a3, "wb");
  if (a3)
    goto LABEL_27;
  if (!*__error())
    goto LABEL_42;
  a3 = 0;
  Data = 0;
  v22 = *__error();
  if (v22)
    goto LABEL_47;
LABEL_27:
  v17 = fwrite(__ptr, 1uLL, __nitems, a3);
  if (v17 != __nitems)
  {
LABEL_28:
    if (*__error())
      v13 = *__error();
    else
      v13 = -6700;
    goto LABEL_45;
  }
LABEL_12:
  v13 = 0;
LABEL_45:
  Data = 0;
LABEL_46:
  v22 = v13;
LABEL_47:
  if (v20)
    free(v20);
  if (Data)
    CFRelease(Data);
  if (a3)
    fclose(a3);
  return v22;
}

uint64_t CFObjectControlAsync(const void *a1, NSObject *a2, uint64_t a3, int a4, const void *a5, const void *a6, const void *a7, NSObject *a8, uint64_t a9, uint64_t a10)
{
  _QWORD *v18;
  _QWORD *v19;

  v18 = malloc_type_malloc(0x58uLL, 0x10E0040D6740AE0uLL);
  if (!v18)
    return 4294960568;
  v19 = v18;
  CFRetain(a1);
  *v19 = a1;
  v19[1] = a3;
  *((_DWORD *)v19 + 4) = a4;
  CFRetain(a5);
  v19[3] = a5;
  if (a6)
    CFRetain(a6);
  v19[4] = a6;
  if (a7)
    CFRetain(a7);
  v19[5] = a7;
  v19[7] = 0;
  if (a8)
    dispatch_retain(a8);
  v19[8] = a8;
  v19[9] = a9;
  v19[10] = a10;
  dispatch_async_f(a2, v19, (dispatch_function_t)_CFObjectControlAsync);
  return 0;
}

void _CFObjectControlAsync(uint64_t a1)
{
  CFTypeRef *v2;
  const void *v3;
  const void *v4;
  void (*v5)(_QWORD, _QWORD, _QWORD);
  NSObject *v6;
  NSObject *v7;

  v2 = (CFTypeRef *)(a1 + 56);
  *(_DWORD *)(a1 + 48) = (*(uint64_t (**)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, uint64_t))(a1 + 8))(*(_QWORD *)a1, *(unsigned int *)(a1 + 16), *(_QWORD *)(a1 + 24), *(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 40), a1 + 56);
  CFRelease(*(CFTypeRef *)a1);
  CFRelease(*(CFTypeRef *)(a1 + 24));
  v3 = *(const void **)(a1 + 32);
  if (v3)
    CFRelease(v3);
  v4 = *(const void **)(a1 + 40);
  if (v4)
    CFRelease(v4);
  v5 = *(void (**)(_QWORD, _QWORD, _QWORD))(a1 + 72);
  if (v5)
  {
    v6 = *(NSObject **)(a1 + 64);
    if (v6)
    {
      dispatch_async_f(v6, (void *)a1, (dispatch_function_t)_CFObjectControlResponse);
      return;
    }
    v5(*(unsigned int *)(a1 + 48), *(_QWORD *)(a1 + 56), *(_QWORD *)(a1 + 80));
  }
  if (*v2)
    CFRelease(*v2);
  v7 = *(NSObject **)(a1 + 64);
  if (v7)
    dispatch_release(v7);
  free((void *)a1);
}

void _CFObjectControlResponse(uint64_t a1)
{
  const void *v2;

  (*(void (**)(_QWORD, _QWORD, _QWORD))(a1 + 72))(*(unsigned int *)(a1 + 48), *(_QWORD *)(a1 + 56), *(_QWORD *)(a1 + 80));
  v2 = *(const void **)(a1 + 56);
  if (v2)
    CFRelease(v2);
  dispatch_release(*(dispatch_object_t *)(a1 + 64));
  free((void *)a1);
}

uint64_t CFObjectControlAsyncF(const void *a1, NSObject *a2, uint64_t a3, int a4, const void *a5, const void *a6, NSObject *a7, uint64_t a8, uint64_t a9, uint64_t a10, ...)
{
  uint64_t v18;
  CFTypeRef cf;
  va_list va;

  va_start(va, a10);
  cf = 0;
  v18 = CFPropertyListBuildFormatted(0, 0, &cf, a10, (uint64_t)va, (uint64_t)a6, (uint64_t)a7, a8);
  if (!(_DWORD)v18)
  {
    v18 = CFObjectControlAsync(a1, a2, a3, a4, a5, a6, cf, a7, a8, a9);
    if (cf)
      CFRelease(cf);
  }
  return v18;
}

uint64_t CFObjectControlSync(uint64_t a1, dispatch_queue_t queue, uint64_t (*a3)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t), uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  _QWORD v9[7];
  uint64_t v10;

  if ((a4 & 1) != 0)
    return a3(a1, a4, a5, a6, a7, a8);
  v9[0] = a1;
  v9[1] = a3;
  v9[2] = a4;
  v9[3] = a5;
  v9[4] = a6;
  v9[5] = a7;
  v9[6] = a8;
  v10 = 4294960596;
  dispatch_sync_f(queue, v9, (dispatch_function_t)_CFObjectControlSync);
  return v10;
}

uint64_t _CFObjectControlSync(uint64_t a1)
{
  uint64_t result;

  result = (*(uint64_t (**)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))(a1 + 8))(*(_QWORD *)a1, *(unsigned int *)(a1 + 16), *(_QWORD *)(a1 + 24), *(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48));
  *(_DWORD *)(a1 + 56) = result;
  return result;
}

uint64_t CFObjectControlSyncF(uint64_t a1, NSObject *a2, uint64_t (*a3)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t), uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v16;
  CFTypeRef cf;

  cf = 0;
  v16 = CFPropertyListBuildFormatted(0, 0, &cf, a8, (uint64_t)&a9, a6, a7, a8);
  if (!(_DWORD)v16)
  {
    v16 = CFObjectControlSync(a1, a2, a3, a4, a5, a6, (uint64_t)cf, a7);
    CFRelease(cf);
  }
  return v16;
}

uint64_t CFObjectCopyProperty(uint64_t a1, dispatch_queue_t queue, uint64_t (*a3)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t), uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  _QWORD context[5];
  uint64_t v9;
  uint64_t v10;

  if ((a4 & 1) != 0)
    return a3(a1, a4, a5, a6, a7);
  context[0] = a1;
  context[1] = a3;
  context[3] = a5;
  context[2] = a4;
  context[4] = a6;
  v9 = 0;
  v10 = a7;
  dispatch_sync_f(queue, context, (dispatch_function_t)_CFObjectCopyProperty);
  return v9;
}

uint64_t _CFObjectCopyProperty(uint64_t a1)
{
  uint64_t result;

  result = (*(uint64_t (**)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))(a1 + 8))(*(_QWORD *)a1, *(unsigned int *)(a1 + 16), *(_QWORD *)(a1 + 24), *(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 48));
  *(_QWORD *)(a1 + 40) = result;
  return result;
}

const __CFString *CFObjectGetPropertyCStringSync(uint64_t a1, NSObject *a2, uint64_t (*a3)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t), uint64_t a4, uint64_t a5, uint64_t a6, char *a7, size_t a8, uint64_t a9)
{
  const __CFString *result;
  const __CFString *v12;
  const char *v13;

  result = (const __CFString *)CFObjectCopyProperty(a1, a2, a3, a4, a5, a6, a9);
  if (result)
  {
    v12 = result;
    v13 = CFGetCString(result, a7, a8);
    CFRelease(v12);
    return (const __CFString *)v13;
  }
  return result;
}

const char *CFGetCString(const __CFString *cf, char *a2, size_t a3)
{
  CFTypeID v6;
  const UInt8 *BytePtr;
  CFIndex Length;
  char *v9;
  uint64_t v10;
  const UInt8 *v11;
  char *v12;
  unint64_t v13;
  char v14;
  BOOL v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  const char *v21;
  uint64_t v23;
  uint64_t v24;
  _BYTE v25[12];
  uint64_t valuePtr;

  if (!a3)
    return "";
  if (!cf)
  {
LABEL_29:
    *a2 = 0;
    return a2;
  }
  v6 = CFGetTypeID(cf);
  if (v6 == CFStringGetTypeID())
  {
    *a2 = 0;
    CFStringGetCString(cf, a2, a3, 0x8000100u);
    return a2;
  }
  if (v6 == CFNumberGetTypeID())
  {
    if (CFNumberIsFloatType((CFNumberRef)cf))
    {
      valuePtr = 0;
      CFNumberGetValue((CFNumberRef)cf, kCFNumberDoubleType, &valuePtr);
      snprintf(a2, a3, "%f");
    }
    else
    {
      *(_QWORD *)&v25[4] = 0;
      CFNumberGetValue((CFNumberRef)cf, kCFNumberSInt64Type, &v25[4]);
      SNPrintF((uint64_t)a2, a3, (uint64_t)"%lld", v16, v17, v18, v19, v20, *(uint64_t *)&v25[4]);
    }
    return a2;
  }
  if ((const __CFString *)*MEMORY[0x1E0C9AE50] == cf)
  {
    v21 = "true";
LABEL_22:
    strlcpy(a2, v21, a3);
    return a2;
  }
  if ((const __CFString *)*MEMORY[0x1E0C9AE40] == cf)
  {
    v21 = "false";
    goto LABEL_22;
  }
  if (v6 != CFDataGetTypeID())
  {
    if (v6 == CFDateGetTypeID())
    {
      LODWORD(valuePtr) = 0;
      *(_QWORD *)v25 = 0;
      v24 = 0;
      v23 = 0;
      CFDateGetComponents((uint64_t)cf, &valuePtr, &v25[4], v25, (_DWORD *)&v24 + 1, &v24, (_DWORD *)&v23 + 1, &v23);
      snprintf(a2, a3, "%04d-%02d-%02d %02d:%02d:%02d.%06d %s", valuePtr, *(unsigned int *)&v25[4]);
      return a2;
    }
    if (v6 == CFDictionaryGetTypeID())
    {
      snprintf(a2, a3, "{}");
      return a2;
    }
    if (v6 == CFArrayGetTypeID())
    {
      snprintf(a2, a3, "[]");
      return a2;
    }
    goto LABEL_29;
  }
  BytePtr = CFDataGetBytePtr((CFDataRef)cf);
  Length = CFDataGetLength((CFDataRef)cf);
  v9 = a2;
  if (Length >= 1)
  {
    v9 = a2;
    if ((uint64_t)(a3 - 1) >= 2)
    {
      v10 = a3 - 3;
      v11 = BytePtr + 1;
      v12 = a2;
      do
      {
        v13 = *(v11 - 1);
        *v12 = a0123456789abcd[v13 >> 4];
        v14 = a0123456789abcd[v13 & 0xF];
        v9 = v12 + 2;
        v12[1] = v14;
        if (v11 >= &BytePtr[Length])
          break;
        ++v11;
        v12 += 2;
        v15 = v10 <= 1;
        v10 -= 2;
      }
      while (!v15);
    }
  }
  *v9 = 0;
  return a2;
}

void CFObjectGetPropertyDoubleSync(uint64_t a1, NSObject *a2, uint64_t (*a3)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t), uint64_t a4, uint64_t a5, uint64_t a6, _DWORD *a7)
{
  const __CFString *v8;
  const __CFString *v9;

  v8 = (const __CFString *)CFObjectCopyProperty(a1, a2, a3, a4, a5, a6, (uint64_t)a7);
  if (v8)
  {
    v9 = v8;
    CFGetDouble(v8, a7);
    CFRelease(v9);
  }
}

const __CFString *CFObjectGetPropertyInt64Sync(uint64_t a1, NSObject *a2, uint64_t (*a3)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t), uint64_t a4, uint64_t a5, uint64_t a6, int *a7)
{
  const __CFString *result;
  const __CFString *v9;
  unint64_t v10;

  result = (const __CFString *)CFObjectCopyProperty(a1, a2, a3, a4, a5, a6, (uint64_t)a7);
  if (result)
  {
    v9 = result;
    v10 = CFGetInt64(result, a7);
    CFRelease(v9);
    return (const __CFString *)v10;
  }
  return result;
}

uint64_t CFObjectSetProperty(const void *a1, dispatch_queue_t queue, uint64_t (*a3)(const void *, uint64_t, const void *, const void *, const void *), uint64_t a4, const void *a5, const void *a6, const void *a7)
{
  int v10;
  _QWORD *v14;
  _QWORD *v15;
  _QWORD context[6];
  uint64_t v18;

  v10 = a4;
  if ((a4 & 1) != 0)
    return a3(a1, a4, a5, a6, a7);
  if ((a4 & 8) != 0)
  {
    v14 = malloc_type_malloc(0x38uLL, 0x10E0040A36414A6uLL);
    if (v14)
    {
      v15 = v14;
      CFRetain(a1);
      *v15 = a1;
      v15[1] = a3;
      *((_DWORD *)v15 + 4) = v10;
      CFRetain(a5);
      v15[3] = a5;
      if (a6)
        CFRetain(a6);
      v15[4] = a6;
      if (a7)
        CFRetain(a7);
      v15[5] = a7;
      dispatch_async_f(queue, v15, (dispatch_function_t)_CFObjectSetProperty);
      return 0;
    }
    else
    {
      return 4294960568;
    }
  }
  else
  {
    context[0] = a1;
    context[1] = a3;
    context[2] = a4;
    context[3] = a5;
    context[4] = a6;
    context[5] = a7;
    v18 = 4294960596;
    dispatch_sync_f(queue, context, (dispatch_function_t)_CFObjectSetProperty);
    return v18;
  }
}

void _CFObjectSetProperty(uint64_t a1)
{
  const void *v2;
  const void *v3;

  *(_DWORD *)(a1 + 48) = (*(uint64_t (**)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))(a1 + 8))(*(_QWORD *)a1, *(unsigned int *)(a1 + 16), *(_QWORD *)(a1 + 24), *(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 40));
  if ((*(_BYTE *)(a1 + 16) & 8) != 0)
  {
    CFRelease(*(CFTypeRef *)a1);
    CFRelease(*(CFTypeRef *)(a1 + 24));
    v2 = *(const void **)(a1 + 32);
    if (v2)
      CFRelease(v2);
    v3 = *(const void **)(a1 + 40);
    if (v3)
      CFRelease(v3);
    free((void *)a1);
  }
}

uint64_t CFObjectSetPropertyF(const void *a1, NSObject *a2, uint64_t (*a3)(const void *, uint64_t, const void *, const void *, const void *), uint64_t a4, const void *a5, const void *a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v15;
  CFTypeRef cf;

  cf = 0;
  v15 = CFPropertyListBuildFormatted(0, 0, &cf, a7, (uint64_t)&a9, (uint64_t)a6, a7, a8);
  if (!(_DWORD)v15)
  {
    v15 = CFObjectSetProperty(a1, a2, a3, a4, a5, a6, cf);
    if (cf)
      CFRelease(cf);
  }
  return v15;
}

uint64_t CFObjectSetPropertyCString(const void *a1, NSObject *a2, uint64_t (*a3)(const void *, uint64_t, const void *, const void *, const void *), uint64_t a4, const void *a5, const void *a6, char *cStr, CFIndex numBytes)
{
  CFStringRef v14;
  CFStringRef v15;
  uint64_t v16;

  if (numBytes == -1)
    v14 = CFStringCreateWithCString(0, cStr, 0x8000100u);
  else
    v14 = CFStringCreateWithBytes(0, (const UInt8 *)cStr, numBytes, 0x8000100u, 0);
  v15 = v14;
  if (!v14)
    return 4294960596;
  v16 = CFObjectSetProperty(a1, a2, a3, a4, a5, a6, v14);
  CFRelease(v15);
  return v16;
}

uint64_t CFObjectSetPropertyData(const void *a1, NSObject *a2, uint64_t (*a3)(const void *, uint64_t, const void *, const void *, const void *), uint64_t a4, const void *a5, const void *a6, UInt8 *bytes, CFIndex length)
{
  CFDataRef v14;
  CFDataRef v15;
  uint64_t v16;

  v14 = CFDataCreate(0, bytes, length);
  if (!v14)
    return 4294960596;
  v15 = v14;
  v16 = CFObjectSetProperty(a1, a2, a3, a4, a5, a6, v14);
  CFRelease(v15);
  return v16;
}

uint64_t CFObjectSetPropertyDouble(const void *a1, NSObject *a2, uint64_t (*a3)(const void *, uint64_t, const void *, const void *, const void *), uint64_t a4, const void *a5, const void *a6, double a7)
{
  CFNumberRef v13;
  CFNumberRef v14;
  uint64_t v15;
  double valuePtr;

  valuePtr = a7;
  v13 = CFNumberCreate(0, kCFNumberDoubleType, &valuePtr);
  if (!v13)
    return 4294960568;
  v14 = v13;
  v15 = CFObjectSetProperty(a1, a2, a3, a4, a5, a6, v13);
  CFRelease(v14);
  return v15;
}

uint64_t CFObjectSetPropertyInt64(const void *a1, NSObject *a2, uint64_t (*a3)(const void *, uint64_t, const void *, const void *, const void *), uint64_t a4, const void *a5, const void *a6, uint64_t a7)
{
  CFNumberRef Int64;
  CFNumberRef v14;
  uint64_t v15;

  Int64 = CFNumberCreateInt64(a7);
  if (!Int64)
    return 4294960568;
  v14 = Int64;
  v15 = CFObjectSetProperty(a1, a2, a3, a4, a5, a6, Int64);
  CFRelease(v14);
  return v15;
}

const void *CFObjectCopyTypedValue(uint64_t a1, uint64_t (*a2)(uint64_t, uint64_t, int *), uint64_t a3, uint64_t a4, int *a5)
{
  const void *v7;
  const void *v8;
  int v10;

  v10 = 0;
  v7 = (const void *)a2(a1, a3, &v10);
  v8 = v7;
  if (a4 && !v10 && CFGetTypeID(v7) != a4)
  {
    CFRelease(v8);
    v8 = 0;
    v10 = -6756;
  }
  if (a5)
    *a5 = v10;
  return v8;
}

uint64_t CFObjectSetValue(uint64_t a1, uint64_t (*a2)(uint64_t, uint64_t, uint64_t), uint64_t a3, uint64_t a4)
{
  return a2(a1, a3, a4);
}

void *CFObjectCopyBytes(uint64_t a1, uint64_t (*a2)(uint64_t, uint64_t, int *), uint64_t a3, size_t *a4, int *a5)
{
  const __CFData *v7;
  const __CFData *v8;
  void *v9;
  int v11;
  int v12;

  v12 = 0;
  v7 = (const __CFData *)a2(a1, a3, &v12);
  v11 = v12;
  if (v7)
  {
    v8 = v7;
    v9 = CFCopyData(v7, a4, &v11);
    CFRelease(v8);
    if (a5)
LABEL_3:
      *a5 = v11;
  }
  else
  {
    if (a4)
      *a4 = 0;
    v9 = 0;
    v11 = -6727;
    if (a5)
      goto LABEL_3;
  }
  return v9;
}

void *CFCopyData(const __CFData *a1, size_t *a2, _DWORD *a3)
{
  const __CFData *v5;
  CFTypeID v6;
  const UInt8 *BytePtr;
  size_t Length;
  void *v9;
  int v10;
  void *v11;
  CFUUIDBytes *v12;
  CFUUIDBytes *v13;
  CFUUIDBytes v14;
  void *v16;
  char *v17;
  int64_t v18;
  size_t v19;
  void *v20;

  v5 = a1;
  v19 = 0;
  v20 = 0;
  v6 = CFGetTypeID(a1);
  if (v6 == CFDataGetTypeID())
  {
    BytePtr = CFDataGetBytePtr(v5);
    Length = CFDataGetLength(v5);
    v5 = (const __CFData *)Length;
    v19 = Length;
    if (Length <= 1)
      Length = 1;
    v9 = malloc_type_malloc(Length, 0xB1CED34BuLL);
    v20 = v9;
    if (v9)
    {
      if (v5)
      {
        memcpy(v9, BytePtr, (size_t)v5);
        goto LABEL_7;
      }
LABEL_28:
      if (!a2)
        goto LABEL_30;
      goto LABEL_29;
    }
    goto LABEL_33;
  }
  if (v6 == CFStringGetTypeID())
  {
    v17 = 0;
    v18 = 0;
    v16 = 0;
    v10 = CFStringGetOrCopyCStringUTF8((const __CFString *)v5, (const char **)&v17, (UInt8 **)&v16, (size_t *)&v18);
    if (v10)
    {
      LODWORD(v5) = v10;
      if (a2)
        goto LABEL_29;
    }
    else
    {
      LODWORD(v5) = HexToDataCopy(v17, v18, 22, &v20, &v19, 0);
      if (!v16)
        goto LABEL_28;
      free(v16);
      if (a2)
        goto LABEL_29;
    }
    goto LABEL_30;
  }
  if (v6 == CFNullGetTypeID())
  {
    v20 = malloc_type_malloc(1uLL, 0x63FC2D25uLL);
    if (v20)
    {
      LODWORD(v5) = 0;
      v19 = 0;
      if (a2)
        goto LABEL_29;
      goto LABEL_30;
    }
LABEL_33:
    LODWORD(v5) = -6728;
    if (a2)
      goto LABEL_29;
    goto LABEL_30;
  }
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) != 0)
  {
    v19 = 16;
    v11 = malloc_type_malloc(0x10uLL, 0xF3364FB2uLL);
    v20 = v11;
    if (v11)
    {
      -[__CFData getUUIDBytes:](v5, "getUUIDBytes:", v11);
LABEL_7:
      LODWORD(v5) = 0;
      if (!a2)
        goto LABEL_30;
LABEL_29:
      *a2 = v19;
      goto LABEL_30;
    }
    goto LABEL_33;
  }
  if (v6 != CFUUIDGetTypeID())
  {
    LODWORD(v5) = -6735;
    goto LABEL_28;
  }
  v19 = 16;
  v12 = (CFUUIDBytes *)malloc_type_malloc(0x10uLL, 0x2190380DuLL);
  v20 = v12;
  if (!v12)
    goto LABEL_33;
  v13 = v12;
  v14 = CFUUIDGetUUIDBytes(v5);
  LODWORD(v5) = 0;
  *v13 = v14;
  if (a2)
    goto LABEL_29;
LABEL_30:
  if (a3)
    *a3 = (_DWORD)v5;
  return v20;
}

const char *CFObjectGetBytes(uint64_t a1, uint64_t (*a2)(uint64_t, uint64_t, int *), uint64_t a3, const char *a4, unint64_t a5, _QWORD *a6, int *a7)
{
  __CFString *v11;
  __CFString *v12;
  int v14;

  v14 = 0;
  v11 = (__CFString *)a2(a1, a3, &v14);
  v12 = v11;
  if (a7)
    *a7 = v14;
  if (v11)
  {
    a4 = CFGetData(v11, a4, a5, a6, a7);
    CFRelease(v12);
  }
  else if (a6)
  {
    *a6 = 0;
  }
  return a4;
}

const char *CFGetData(__CFString *a1, const char *a2, unint64_t a3, _QWORD *a4, int *a5)
{
  CFTypeID v10;
  const UInt8 *BytePtr;
  unint64_t Length;
  size_t v13;
  char *v14;
  CFUUIDBytes *p_s;
  int v16;
  void *v18;
  int64_t v19;
  unint64_t v20;
  CFUUIDBytes __s;
  uint64_t v22;

  v22 = *MEMORY[0x1E0C80C00];
  v20 = 0;
  if (a1)
  {
    v10 = CFGetTypeID(a1);
    if (v10 == CFDataGetTypeID())
    {
      BytePtr = CFDataGetBytePtr((CFDataRef)a1);
      Length = CFDataGetLength((CFDataRef)a1);
      v20 = Length;
      if (a2)
      {
        v13 = Length;
        if (Length > a3)
        {
          v20 = a3;
          v13 = a3;
        }
        if (!v13)
          goto LABEL_9;
        v14 = (char *)a2;
        p_s = (CFUUIDBytes *)BytePtr;
        goto LABEL_8;
      }
      v16 = 0;
      a2 = (const char *)BytePtr;
    }
    else
    {
      v19 = 0;
      if (v10 != CFStringGetTypeID())
      {
        if (v10 == CFNullGetTypeID())
        {
          v16 = 0;
          v20 = 0;
          a2 = "";
          goto LABEL_17;
        }
        objc_opt_class();
        if ((objc_opt_isKindOfClass() & 1) != 0)
        {
          *(_QWORD *)&__s.byte0 = 0;
          *(_QWORD *)&__s.byte8 = 0;
          -[__CFString getUUIDBytes:](a1, "getUUIDBytes:", &__s);
        }
        else
        {
          if (v10 != CFUUIDGetTypeID())
          {
            v16 = -6735;
            goto LABEL_17;
          }
          __s = CFUUIDGetUUIDBytes((CFUUIDRef)a1);
        }
        v20 = 16;
        if (!a2)
        {
          a2 = "";
          goto LABEL_9;
        }
        if (a3 > 0xF)
        {
          a3 = 16;
        }
        else
        {
          v20 = a3;
          if (!a3)
            goto LABEL_9;
        }
        p_s = &__s;
        v14 = (char *)a2;
        v13 = a3;
LABEL_8:
        memcpy(v14, p_s, v13);
LABEL_9:
        v16 = 0;
        goto LABEL_17;
      }
      *(_QWORD *)&__s.byte0 = 0;
      v18 = 0;
      v16 = CFStringGetOrCopyCStringUTF8(a1, (const char **)&__s, (UInt8 **)&v18, (size_t *)&v19);
      if (!v16)
      {
        HexToData(*(char **)&__s.byte0, v19, 22, (uint64_t)a2, a3, &v20, 0, 0);
        if (v18)
          free(v18);
        goto LABEL_9;
      }
    }
  }
  else
  {
    v16 = -6705;
  }
LABEL_17:
  if (a4)
    *a4 = v20;
  if (a5)
    *a5 = v16;
  return a2;
}

uint64_t CFObjectSetBytes(uint64_t a1, uint64_t (*a2)(uint64_t, uint64_t, CFDataRef), uint64_t a3, UInt8 *bytes, CFIndex length)
{
  CFDataRef v8;
  CFDataRef v9;
  uint64_t v10;

  v8 = CFDataCreate(0, bytes, length);
  if (!v8)
    return 4294960596;
  v9 = v8;
  v10 = a2(a1, a3, v8);
  CFRelease(v9);
  return v10;
}

char *CFObjectCopyCString(uint64_t a1, uint64_t (*a2)(uint64_t, uint64_t, int *), uint64_t a3, _DWORD *a4)
{
  const __CFString *v5;
  const __CFString *v6;
  char *v7;
  int v9;
  int v10;

  v10 = 0;
  v5 = (const __CFString *)a2(a1, a3, &v10);
  v9 = v10;
  if (!v5)
  {
    v7 = 0;
    v9 = -6727;
    if (!a4)
      return v7;
    goto LABEL_3;
  }
  v6 = v5;
  v7 = CFCopyCString(v5, &v9);
  CFRelease(v6);
  if (a4)
LABEL_3:
    *a4 = v9;
  return v7;
}

char *CFCopyCString(const __CFString *a1, int *a2)
{
  CFTypeID v4;
  int v5;
  size_t v6;
  char *v7;
  char *v9;
  char __s1[64];
  uint64_t v11;

  v11 = *MEMORY[0x1E0C80C00];
  v9 = 0;
  if (a1)
  {
    v4 = CFGetTypeID(a1);
    if (v4 == CFStringGetTypeID())
    {
      v5 = CFStringCopyUTF8CString(a1, &v9);
      if (v5)
        goto LABEL_10;
      goto LABEL_9;
    }
    if (v4 == CFDataGetTypeID())
    {
      v6 = (2 * CFDataGetLength((CFDataRef)a1)) | 1;
      v7 = (char *)malloc_type_malloc(v6, 0x9096367FuLL);
      v9 = v7;
      if (v7)
      {
        CFGetCString(a1, v7, v6);
LABEL_9:
        v5 = 0;
        goto LABEL_10;
      }
    }
    else
    {
      CFGetCString(a1, __s1, 0x40uLL);
      v9 = strdup(__s1);
      if (v9)
        goto LABEL_9;
    }
    v5 = -6728;
  }
  else
  {
    v5 = -6705;
  }
LABEL_10:
  if (a2)
    *a2 = v5;
  return v9;
}

uint64_t CFStringCopyUTF8CString(const __CFString *a1, char **a2)
{
  const char *CStringPtr;
  char *v5;
  CFIndex Length;
  CFIndex MaximumSizeForEncoding;
  UInt8 *v8;
  uint64_t result;
  CFIndex usedBufLen;
  CFRange v11;

  CStringPtr = CFStringGetCStringPtr(a1, 0x8000100u);
  if (CStringPtr)
  {
    v5 = strdup(CStringPtr);
    if (!v5)
      return 4294960568;
LABEL_7:
    result = 0;
    *a2 = v5;
    return result;
  }
  Length = CFStringGetLength(a1);
  MaximumSizeForEncoding = CFStringGetMaximumSizeForEncoding(Length, 0x8000100u);
  usedBufLen = MaximumSizeForEncoding;
  v8 = (UInt8 *)malloc_type_malloc(MaximumSizeForEncoding + 1, 0xA12CFD3CuLL);
  if (!v8)
    return 4294960568;
  v5 = (char *)v8;
  v11.location = 0;
  v11.length = Length;
  if (CFStringGetBytes(a1, v11, 0x8000100u, 0, 0, v8, MaximumSizeForEncoding, &usedBufLen) == Length)
  {
    v5[usedBufLen] = 0;
    goto LABEL_7;
  }
  free(v5);
  return 4294960596;
}

const char *CFObjectGetCString(uint64_t a1, uint64_t (*a2)(uint64_t, uint64_t, int *), uint64_t a3, char *a4, size_t a5, _DWORD *a6)
{
  const __CFString *v9;
  const __CFString *v10;
  int v12;

  v12 = 0;
  v9 = (const __CFString *)a2(a1, a3, &v12);
  v10 = v9;
  if (a6)
    *a6 = v12;
  if (v9)
  {
    a4 = (char *)CFGetCString(v9, a4, a5);
    CFRelease(v10);
  }
  else if (a5)
  {
    *a4 = 0;
  }
  else
  {
    return "";
  }
  return a4;
}

uint64_t CFObjectSetCString(uint64_t a1, uint64_t (*a2)(uint64_t, uint64_t, CFStringRef), uint64_t a3, char *cStr, CFIndex numBytes)
{
  CFStringRef v8;
  CFStringRef v9;
  uint64_t v10;

  if (numBytes == -1)
    v8 = CFStringCreateWithCString(0, cStr, 0x8000100u);
  else
    v8 = CFStringCreateWithBytes(0, (const UInt8 *)cStr, numBytes, 0x8000100u, 0);
  v9 = v8;
  if (!v8)
    return 4294960579;
  v10 = a2(a1, a3, v8);
  CFRelease(v9);
  return v10;
}

double CFObjectGetDouble(uint64_t a1, uint64_t (*a2)(uint64_t, uint64_t, int *), uint64_t a3, _DWORD *a4)
{
  const __CFString *v5;
  const __CFString *v6;
  double v7;
  int v9;

  v9 = 0;
  v5 = (const __CFString *)a2(a1, a3, &v9);
  v6 = v5;
  if (a4)
    *a4 = v9;
  if (!v5)
    return 0.0;
  v7 = CFGetDouble(v5, a4);
  CFRelease(v6);
  return v7;
}

uint64_t CFObjectSetDouble(uint64_t a1, uint64_t (*a2)(uint64_t, uint64_t, CFNumberRef), uint64_t a3, double a4)
{
  CFNumberRef v7;
  CFNumberRef v8;
  uint64_t v9;
  double valuePtr;

  valuePtr = a4;
  v7 = CFNumberCreate(0, kCFNumberDoubleType, &valuePtr);
  if (!v7)
    return 4294960596;
  v8 = v7;
  v9 = a2(a1, a3, v7);
  CFRelease(v8);
  return v9;
}

unint64_t CFObjectGetHardwareAddress(uint64_t a1, uint64_t (*a2)(uint64_t, uint64_t, int *), uint64_t a3, char *a4, size_t a5, int *a6)
{
  const __CFString *v9;
  const __CFString *v10;
  unint64_t v11;
  int v13;

  v13 = 0;
  v9 = (const __CFString *)a2(a1, a3, &v13);
  v10 = v9;
  if (a6)
    *a6 = v13;
  if (v9)
  {
    v11 = CFGetHardwareAddress(v9, a4, a5, a6);
    CFRelease(v10);
  }
  else
  {
    if (a4)
      bzero(a4, a5);
    v11 = 0;
    if (a6)
      *a6 = -6727;
  }
  return v11;
}

unint64_t CFGetHardwareAddress(const __CFString *a1, char *a2, size_t a3, int *a4)
{
  CFTypeID v8;
  int v9;
  int v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  const UInt8 *BytePtr;
  unint64_t v15;
  unint64_t valuePtr;
  char v18;
  char buffer[64];
  uint64_t v20;

  v20 = *MEMORY[0x1E0C80C00];
  valuePtr = 0;
  if (!a1)
  {
    v10 = -6705;
    goto LABEL_30;
  }
  v8 = CFGetTypeID(a1);
  if (v8 == CFStringGetTypeID())
  {
    if (CFStringGetCString(a1, buffer, 64, 0x600u))
    {
      if (!a2)
      {
        if (a3 > 8)
        {
          v10 = -6743;
          if (!a4)
            return valuePtr;
          goto LABEL_38;
        }
        a2 = &v18;
      }
      v9 = TextToHardwareAddress(buffer, 0xFFFFFFFFFFFFFFFFLL, a3, a2);
      if (!v9)
      {
        if (a3 != 8)
        {
          if (a3 == 6)
          {
            v10 = 0;
            v11 = ((unint64_t)*a2 << 40) | ((unint64_t)a2[1] << 32) | ((unint64_t)a2[2] << 24) | ((unint64_t)a2[3] << 16) | ((unint64_t)a2[4] << 8);
            v12 = a2[5];
            goto LABEL_24;
          }
          goto LABEL_26;
        }
        v10 = 0;
        v15 = *(_QWORD *)a2;
        goto LABEL_36;
      }
      v10 = v9;
LABEL_31:
      bzero(a2, a3);
      if (!a4)
        return valuePtr;
      goto LABEL_38;
    }
LABEL_41:
    v10 = -6743;
LABEL_30:
    if (!a2)
      goto LABEL_37;
    goto LABEL_31;
  }
  if (v8 == CFNumberGetTypeID())
  {
    CFNumberGetValue((CFNumberRef)a1, kCFNumberSInt64Type, &valuePtr);
    if (a2)
    {
      if (a3 == 8)
      {
        v10 = 0;
        *(_QWORD *)a2 = bswap64(valuePtr);
        if (!a4)
          return valuePtr;
        goto LABEL_38;
      }
      if (a3 == 6)
      {
        v10 = 0;
        v13 = valuePtr;
        *a2 = BYTE5(valuePtr);
        a2[1] = BYTE4(v13);
        a2[2] = BYTE3(v13);
        a2[3] = BYTE2(v13);
        a2[4] = BYTE1(v13);
        a2[5] = v13;
        if (!a4)
          return valuePtr;
        goto LABEL_38;
      }
    }
LABEL_26:
    v10 = 0;
    if (!a4)
      return valuePtr;
    goto LABEL_38;
  }
  if (v8 != CFDataGetTypeID())
  {
    v10 = -6756;
    goto LABEL_30;
  }
  if (CFDataGetLength((CFDataRef)a1) != a3)
    goto LABEL_41;
  BytePtr = CFDataGetBytePtr((CFDataRef)a1);
  if (a2)
    memcpy(a2, BytePtr, a3);
  if (a3 != 8)
  {
    if (a3 == 6)
    {
      v10 = 0;
      v11 = ((unint64_t)*BytePtr << 40) | ((unint64_t)BytePtr[1] << 32) | ((unint64_t)BytePtr[2] << 24) | ((unint64_t)BytePtr[3] << 16) | ((unint64_t)BytePtr[4] << 8);
      v12 = BytePtr[5];
LABEL_24:
      valuePtr = v11 | v12;
      if (!a4)
        return valuePtr;
      goto LABEL_38;
    }
    goto LABEL_26;
  }
  v10 = 0;
  v15 = *(_QWORD *)BytePtr;
LABEL_36:
  valuePtr = bswap64(v15);
LABEL_37:
  if (a4)
LABEL_38:
    *a4 = v10;
  return valuePtr;
}

uint64_t CFObjectSetHardwareAddress(uint64_t a1, uint64_t (*a2)(uint64_t, uint64_t, CFStringRef), uint64_t a3, unsigned __int8 *a4, uint64_t a5)
{
  unsigned __int8 *v5;
  char *v6;
  char *v7;
  unsigned int v8;
  char cStr[64];
  uint64_t v11;

  v11 = *MEMORY[0x1E0C80C00];
  if (a5 != 8 && a5 != 6)
    return 4294960553;
  v5 = &a4[a5];
  v6 = cStr;
  do
  {
    if (v6 == cStr)
    {
      v7 = cStr;
    }
    else
    {
      *v6 = 58;
      v7 = v6 + 1;
    }
    v8 = *a4++;
    *v7 = a0123456789abcd_0[(unint64_t)v8 >> 4];
    v6 = v7 + 2;
    v7[1] = a0123456789abcd_0[v8 & 0xF];
  }
  while (a4 < v5);
  *v6 = 0;
  return CFObjectSetCString(a1, a2, a3, cStr, -1);
}

unint64_t CFObjectGetInt64(uint64_t a1, uint64_t (*a2)(uint64_t, uint64_t, int *), uint64_t a3, int *a4)
{
  const __CFString *v5;
  const __CFString *v6;
  unint64_t v7;
  int v9;

  v9 = 0;
  v5 = (const __CFString *)a2(a1, a3, &v9);
  v6 = v5;
  if (a4)
    *a4 = v9;
  if (!v5)
    return 0;
  v7 = CFGetInt64(v5, a4);
  CFRelease(v6);
  return v7;
}

int64_t CFObjectGetInt64Ranged(uint64_t a1, uint64_t (*a2)(uint64_t, uint64_t, int *), uint64_t a3, int64_t a4, int64_t a5, int *a6)
{
  const __CFString *v9;
  const __CFString *v10;
  int64_t v11;
  int v13;

  v13 = 0;
  v9 = (const __CFString *)a2(a1, a3, &v13);
  v10 = v9;
  if (a6)
    *a6 = v13;
  if (!v9)
    return 0;
  v11 = CFGetInt64Ranged(v9, a4, a5, a6);
  CFRelease(v10);
  return v11;
}

uint64_t CFObjectSetInt64(uint64_t a1, uint64_t (*a2)(uint64_t, uint64_t, CFNumberRef), uint64_t a3, uint64_t a4)
{
  CFNumberRef Int64;
  CFNumberRef v8;
  uint64_t v9;

  Int64 = CFNumberCreateInt64(a4);
  if (!Int64)
    return 4294960596;
  v8 = Int64;
  v9 = a2(a1, a3, Int64);
  CFRelease(v8);
  return v9;
}

uint64_t CFObjectGetUUID(uint64_t a1, uint64_t (*a2)(uint64_t, uint64_t, unsigned int *), uint64_t a3, _OWORD *a4, uint64_t a5)
{
  __CFString *v7;
  uint64_t v8;
  __CFString *v9;
  unsigned int v11;

  v11 = 0;
  v7 = (__CFString *)a2(a1, a3, &v11);
  v8 = v11;
  if (!v11)
  {
    v9 = v7;
    v8 = CFGetUUIDEx(v7, a4, a5);
    CFRelease(v9);
  }
  return v8;
}

uint64_t CFGetUUIDEx(__CFString *a1, _OWORD *a2, uint64_t a3)
{
  CFTypeID v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t result;
  CFIndex Length;
  unsigned int v12;
  CFIndex v13;
  const UInt8 *BytePtr;
  UInt8 v15;
  const UInt8 *v16;
  unint64_t v17;
  char buffer[64];
  uint64_t v19;
  CFRange v20;

  v19 = *MEMORY[0x1E0C80C00];
  if (!a1)
    return 4294960591;
  v17 = 0;
  v6 = CFGetTypeID(a1);
  if (v6 != CFStringGetTypeID())
  {
    if (v6 != CFDataGetTypeID())
    {
      if (a2 && v6 == CFNumberGetTypeID())
      {
        CFNumberGetValue((CFNumberRef)a1, kCFNumberSInt64Type, &v17);
        v12 = v17;
        if (HIDWORD(v17))
          return 4294960586;
        if (a3)
        {
          *(_OWORD *)a3 = *a2;
          *(_DWORD *)a3 = bswap32(v12);
        }
      }
      else
      {
        objc_opt_class();
        if ((objc_opt_isKindOfClass() & 1) != 0)
        {
          if (a3)
            -[__CFString getUUIDBytes:](a1, "getUUIDBytes:", a3);
        }
        else
        {
          if (v6 != CFUUIDGetTypeID())
            return 4294960540;
          if (a3)
            *(CFUUIDBytes *)a3 = CFUUIDGetUUIDBytes((CFUUIDRef)a1);
        }
      }
      return 0;
    }
    Length = CFDataGetLength((CFDataRef)a1);
    if (Length == 16)
    {
      if (a3)
        *(_OWORD *)a3 = *(_OWORD *)CFDataGetBytePtr((CFDataRef)a1);
      return 0;
    }
    v13 = Length;
    if (a2 && Length == 1)
    {
      if (a3)
      {
        *(_OWORD *)a3 = *a2;
        v20.location = 0;
        v20.length = 1;
        CFDataGetBytes((CFDataRef)a1, v20, (UInt8 *)(a3 + 3));
      }
      return 0;
    }
    if (a2 && Length == 2)
    {
      if (a3)
      {
        BytePtr = CFDataGetBytePtr((CFDataRef)a1);
        *(_OWORD *)a3 = *a2;
        *(_BYTE *)(a3 + 2) = *BytePtr;
        v15 = BytePtr[1];
LABEL_35:
        *(_BYTE *)(a3 + 3) = v15;
      }
    }
    else
    {
      result = 4294960553;
      if (!a2 || v13 != 4)
        return result;
      if (a3)
      {
        v16 = CFDataGetBytePtr((CFDataRef)a1);
        *(_OWORD *)a3 = *a2;
        *(_BYTE *)a3 = *v16;
        *(_BYTE *)(a3 + 1) = v16[1];
        *(_BYTE *)(a3 + 2) = v16[2];
        v15 = v16[3];
        goto LABEL_35;
      }
    }
    return 0;
  }
  if (!CFStringGetCString(a1, buffer, 64, 0x600u))
    return 4294960553;
  result = StringToUUIDEx(buffer, 0xFFFFFFFFFFFFFFFFLL, 0, a2, (_OWORD *)a3, v7, v8, v9);
  if (!(_DWORD)result)
    return 0;
  return result;
}

uint64_t CFObjectSetUUID(uint64_t a1, uint64_t (*a2)(uint64_t, uint64_t, CFUUIDRef), uint64_t a3, uint64_t *a4, uint64_t *a5, uint64_t a6)
{
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  CFUUIDRef v15;
  CFUUIDRef v16;
  uint64_t v17;
  CFUUIDBytes v18;

  if (a4)
  {
    switch(a6)
    {
      case 4:
        v9 = *a4;
        LOBYTE(v13) = *(_BYTE *)a5;
        LOBYTE(v10) = *((_BYTE *)a5 + 1);
        LOBYTE(v11) = *((_BYTE *)a5 + 2);
        LOBYTE(v12) = *((_BYTE *)a5 + 3);
        break;
      case 2:
        v9 = *a4;
        v10 = (unint64_t)*a4 >> 8;
        LOBYTE(v11) = *(_BYTE *)a5;
        LOBYTE(v12) = *((_BYTE *)a5 + 1);
        v13 = *a4;
        break;
      case 1:
        v9 = *a4;
        v10 = (unint64_t)*a4 >> 8;
        v11 = (unint64_t)*a4 >> 16;
        LOBYTE(v12) = *(_BYTE *)a5;
        v13 = *a4;
        break;
      default:
        return 4294960553;
    }
  }
  else
  {
    if (a6 != 16)
      return 4294960553;
    v9 = *a5;
    v10 = (unint64_t)*a5 >> 8;
    v11 = (unint64_t)*a5 >> 16;
    v12 = (unint64_t)*a5 >> 24;
    v13 = *a5;
    a4 = a5;
  }
  *(_QWORD *)&v18.byte8 = a4[1];
  *(_QWORD *)&v18.byte0 = v9 & 0xFFFFFFFF00000000 | ((unint64_t)v12 << 24) | ((unint64_t)v11 << 16) | ((unint64_t)v10 << 8) | v13;
  v15 = CFUUIDCreateFromUUIDBytes(0, v18);
  if (!v15)
    return 4294960568;
  v16 = v15;
  v17 = a2(a1, a3, v15);
  CFRelease(v16);
  return v17;
}

uint64_t CFObjectSetUUIDString(uint64_t a1, uint64_t (*a2)(uint64_t, uint64_t, CFStringRef), uint64_t a3, _BYTE *a4, uint64_t a5, __int128 *a6, char a7)
{
  CFStringRef v10;
  CFStringRef v11;
  unsigned int v13;

  v13 = 0;
  v10 = CFCreateUUIDString(a4, a5, a6, a7, &v13);
  if (v10)
  {
    v11 = v10;
    v13 = a2(a1, a3, v10);
    CFRelease(v11);
  }
  return v13;
}

CFStringRef CFCreateUUIDString(_BYTE *a1, uint64_t a2, __int128 *a3, char a4, _DWORD *a5)
{
  CFStringRef result;
  int v7;
  char cStr[38];
  uint64_t v9;

  v9 = *MEMORY[0x1E0C80C00];
  v7 = 0;
  UUIDtoCStringFlags(a1, a2, a3, a4, cStr, &v7);
  if (v7)
  {
    result = 0;
    if (!a5)
      return result;
  }
  else
  {
    result = CFStringCreateWithCString(0, cStr, 0x8000100u);
    if (result)
    {
      if (!a5)
        return result;
    }
    else
    {
      v7 = -6700;
      if (!a5)
        return result;
    }
  }
  *a5 = v7;
  return result;
}

const void *CFGetTypedObject(const void *result, uint64_t a2, int *a3)
{
  const void *v5;
  CFTypeID v6;
  BOOL v7;
  int v8;

  if (!result)
  {
    v8 = -6705;
    if (!a3)
      return result;
    goto LABEL_9;
  }
  v5 = result;
  v6 = CFGetTypeID(result);
  v7 = v6 == a2;
  if (v6 == a2)
    result = v5;
  else
    result = 0;
  if (v7)
    v8 = 0;
  else
    v8 = -6756;
  if (a3)
LABEL_9:
    *a3 = v8;
  return result;
}

uint64_t CFSetObjectAtPath(void *cf, _BYTE *a2, const void *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned int v11;
  const CFDictionaryKeyCallBacks *v12;
  const CFDictionaryValueCallBacks *v13;
  _BYTE *i;
  CFIndex v15;
  _BYTE *v16;
  CFTypeID v17;
  CFIndex v18;
  CFTypeID v19;
  CFStringRef v20;
  CFStringRef v21;
  const void *Value;
  CFMutableDictionaryRef Mutable;
  CFTypeID v24;
  CFStringRef v25;
  CFStringRef v26;
  CFTypeID v27;
  CFIndex idx;

  v11 = -1;
  v12 = (const CFDictionaryKeyCallBacks *)MEMORY[0x1E0C9B390];
  v13 = (const CFDictionaryValueCallBacks *)MEMORY[0x1E0C9B3A0];
  while (1)
  {
    for (i = a2; *i && *i != 46; ++i)
      ;
    v15 = i - a2;
    if (!*i)
      break;
    v16 = i + 1;
    if (*a2 == 91)
    {
      LODWORD(idx) = 0;
      if (SNScanF(a2 + 1, v15 - 1, "%i]", a4, a5, a6, a7, a8, (int)&idx) != 1)
        return 4294960579;
      v17 = CFGetTypeID(cf);
      if (v17 != CFArrayGetTypeID())
        return 4294960540;
      v18 = idx;
      if ((idx & 0x80000000) != 0 || CFArrayGetCount((CFArrayRef)cf) <= v18)
        return 4294960586;
      cf = (void *)CFArrayGetValueAtIndex((CFArrayRef)cf, (int)idx);
      v11 = idx;
      a2 = v16;
    }
    else
    {
      v19 = CFGetTypeID(cf);
      if (v19 != CFDictionaryGetTypeID())
        return 4294960540;
      v20 = CFStringCreateWithBytes(0, a2, v15, 0x8000100u, 0);
      if (!v20)
        return 4294960596;
      v21 = v20;
      Value = CFDictionaryGetValue((CFDictionaryRef)cf, v20);
      if (!Value)
      {
        Mutable = CFDictionaryCreateMutable(0, 0, v12, v13);
        if (!Mutable)
        {
          CFRelease(v21);
          return 4294960568;
        }
        Value = Mutable;
        CFDictionarySetValue((CFMutableDictionaryRef)cf, v21, Mutable);
        CFRelease(Value);
      }
      CFRelease(v21);
      v11 = -1;
      a2 = v16;
      cf = (void *)Value;
    }
  }
  v24 = CFGetTypeID(cf);
  if (v24 != CFDictionaryGetTypeID())
  {
    v27 = CFGetTypeID(cf);
    if (v27 != CFArrayGetTypeID())
      return 4294960540;
    if (i != a2)
      return 4294960579;
    if (a3)
    {
      CFArrayAppendValue((CFMutableArrayRef)cf, a3);
    }
    else
    {
      if ((v11 & 0x80000000) != 0)
        return 4294960579;
      CFArrayRemoveValueAtIndex((CFMutableArrayRef)cf, v11);
    }
    return 0;
  }
  if (i == a2)
    return 4294960579;
  v25 = CFStringCreateWithBytes(0, a2, i - a2, 0x8000100u, 0);
  if (v25)
  {
    v26 = v25;
    if (a3)
      CFDictionarySetValue((CFMutableDictionaryRef)cf, v25, a3);
    else
      CFDictionaryRemoveValue((CFMutableDictionaryRef)cf, v25);
    CFRelease(v26);
    return 0;
  }
  return 4294960596;
}

void CFArrayApplyBlock(const __CFArray *a1, CFRange a2, void *context)
{
  CFArrayApplyFunction(a1, a2, (CFArrayApplierFunction)_CFArrayApplyBlockApplier, context);
}

uint64_t _CFArrayApplyBlockApplier(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(a2 + 16))(a2, a1);
}

uint64_t CFArrayAppendInt64(__CFArray *a1, uint64_t a2)
{
  CFNumberRef Int64;
  CFNumberRef v4;

  Int64 = CFNumberCreateInt64(a2);
  if (!Int64)
    return 4294960568;
  v4 = Int64;
  CFArrayAppendValue(a1, Int64);
  CFRelease(v4);
  return 0;
}

uint64_t CFArrayAppendBytes(__CFArray *a1, const UInt8 *a2, CFIndex a3)
{
  CFDataRef v4;
  CFDataRef v5;

  v4 = CFDataCreate(0, a2, a3);
  if (!v4)
    return 4294960568;
  v5 = v4;
  CFArrayAppendValue(a1, v4);
  CFRelease(v5);
  return 0;
}

CFComparisonResult CFSortCompareKeyPath(const __CFString *a1, const __CFString *a2, UInt8 *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  const __CFString *v15;
  const __CFString *v17;
  CFTypeID v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t valuePtr;
  const __CFString *v23;

  v23 = 0;
  if (CFPropertyListExtractFormatted(a1, (uint64_t)&v23, a3, a4, a5, a6, a7, a8, v19))
    return -1;
  v15 = v23;
  if (CFPropertyListExtractFormatted(a2, (uint64_t)&v23, a3, v10, v11, v12, v13, v14, v20))
    return -1;
  v17 = v23;
  v18 = CFGetTypeID(v15);
  if (v18 != CFGetTypeID(v17))
    return -1;
  if (v18 != CFNumberGetTypeID())
  {
    if (v18 == CFStringGetTypeID())
      return CFStringCompare(v15, v17, 0x361uLL);
    if (v18 == CFDateGetTypeID())
      return CFDateCompare((CFDateRef)v15, (CFDateRef)v17, 0);
    return -1;
  }
  v21 = 0;
  valuePtr = 0;
  CFNumberGetValue((CFNumberRef)v15, kCFNumberSInt64Type, &valuePtr);
  CFNumberGetValue((CFNumberRef)v17, kCFNumberSInt64Type, &v21);
  if (valuePtr < v21)
    return -1;
  else
    return (unint64_t)(valuePtr > v21);
}

uint64_t CFArrayEnsureCreatedAndAppend(__CFArray **a1, void *value)
{
  __CFArray *Mutable;

  Mutable = *a1;
  if (Mutable)
    goto LABEL_4;
  Mutable = CFArrayCreateMutable(0, 0, MEMORY[0x1E0C9B378]);
  if (Mutable)
  {
    *a1 = Mutable;
LABEL_4:
    CFArrayAppendValue(Mutable, value);
    return 0;
  }
  return 4294960568;
}

uint64_t CFArrayEnsureCreatedAndAppendCString(__CFArray **a1, const char *a2, CFIndex a3)
{
  __CFString *v4;
  __CFString *v5;
  uint64_t v6;

  if (a3 == -1)
    v4 = (__CFString *)CFStringCreateWithCString(0, a2, 0x8000100u);
  else
    v4 = (__CFString *)CFStringCreateWithBytes(0, (const UInt8 *)a2, a3, 0x8000100u, 0);
  v5 = v4;
  if (!v4)
    return 4294960596;
  v6 = CFArrayEnsureCreatedAndAppend(a1, v4);
  CFRelease(v5);
  return v6;
}

const __CFArray *CFArrayGetTypedValueAtIndex(const __CFArray *result, CFIndex a2, uint64_t a3, int *a4)
{
  const __CFArray *v6;
  CFTypeID v7;
  BOOL v8;
  int v9;

  if (result)
  {
    result = (const __CFArray *)CFArrayGetValueAtIndex(result, a2);
    if (result)
    {
      v6 = result;
      v7 = CFGetTypeID(result);
      v8 = v7 == a3;
      if (v7 == a3)
        result = v6;
      else
        result = 0;
      if (v8)
        v9 = 0;
      else
        v9 = -6756;
    }
    else
    {
      v9 = -6727;
    }
  }
  else
  {
    v9 = -6705;
  }
  if (a4)
    *a4 = v9;
  return result;
}

uint64_t CFDataGetEmpty()
{
  if (gCFDataGetEmptyOnce != -1)
    dispatch_once_f(&gCFDataGetEmptyOnce, 0, (dispatch_function_t)_CFDataGetEmptyOnce);
  return gCFDataEmpty;
}

CFDataRef _CFDataGetEmptyOnce()
{
  CFDataRef result;

  result = CFDataCreate(0, (const UInt8 *)"", 0);
  gCFDataEmpty = (uint64_t)result;
  return result;
}

uint64_t _CFDictionaryApplyBlockApplier(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(a3 + 16))(a3, a1, a2);
}

uint64_t CFDictionaryCreateFromNameTypeValueArgList(CFMutableDictionaryRef *a1, int a2, int a3, uint64_t a4)
{
  const __CFAllocator *v7;
  CFMutableDictionaryRef Mutable;
  CFMutableDictionaryRef v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  char *v13;
  char *v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  char *v23;
  int64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  int v31;
  uint64_t appended;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  char *v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  char *v68;
  char *v69;
  uint64_t v70;
  int v71;
  _BYTE *v72;
  uint64_t v73;
  uint64_t v76;
  int v77;
  char *__s;
  _OWORD v79[16];
  _BYTE v80[256];
  _BYTE v81[256];
  uint64_t v82;

  v82 = *MEMORY[0x1E0C80C00];
  v7 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
  Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  if (!Mutable)
    return 4294960568;
  v9 = Mutable;
  if (a2 >= a3)
  {
LABEL_118:
    v73 = 0;
    *a1 = v9;
    return v73;
  }
  v10 = a2;
  __s = 0;
  v77 = 0;
  while (1)
  {
    v11 = *(_QWORD *)(a4 + 8 * v10);
    if (!v11)
    {
      v73 = 4294960591;
      goto LABEL_117;
    }
    v12 = strchr(*(char **)(a4 + 8 * v10), 58);
    if (!v12 || (v13 = v12, v14 = v12 + 1, (v15 = strchr(v12 + 1, 58)) == 0))
    {
      v73 = 4294960554;
      goto LABEL_117;
    }
    v21 = v15;
    v22 = 0;
    ++v10;
    v23 = v15 + 1;
    __s = v23;
    v24 = v21 - v14;
    while (v24 != v22)
    {
      if (v14[v22] != aB[v22])
        goto LABEL_13;
      if (++v22 == 2)
        goto LABEL_18;
    }
    if (!aB[v24])
    {
LABEL_18:
      if (strnicmpx((unsigned __int8 *)v23, -1, "true")
        && strnicmpx((unsigned __int8 *)__s, -1, "yes")
        && strnicmpx((unsigned __int8 *)__s, -1, "y")
        && strnicmpx((unsigned __int8 *)__s, -1, "on")
        && strnicmpx((unsigned __int8 *)__s, -1, "1"))
      {
        if (strnicmpx((unsigned __int8 *)__s, -1, "false")
          && strnicmpx((unsigned __int8 *)__s, -1, "no")
          && strnicmpx((unsigned __int8 *)__s, -1, "n")
          && strnicmpx((unsigned __int8 *)__s, -1, "off")
          && strnicmpx((unsigned __int8 *)__s, -1, "0"))
        {
LABEL_123:
          v73 = 4294960559;
          goto LABEL_117;
        }
        v31 = 0;
      }
      else
      {
        v31 = 1;
      }
      v77 = v31;
      appended = CFPropertyListAppendFormatted(v7, v9, (uint64_t)"%.*ks=%b", v26, v27, v28, v29, v30, (uint64_t)&v13[-v11]);
      goto LABEL_79;
    }
LABEL_13:
    v25 = 0;
    while (v24 != v25)
    {
      if (v14[v25] != aF[v25])
        goto LABEL_32;
      if (++v25 == 2)
        goto LABEL_37;
    }
    if (!aF[v24])
    {
LABEL_37:
      *(_QWORD *)&v79[0] = 0;
      if (sscanf(v23, "%lf", v79) != 1)
        goto LABEL_123;
      appended = CFPropertyListAppendFormatted(v7, v9, (uint64_t)"%.*ks=%f", v34, v35, v36, v37, v38, (uint64_t)&v13[-v11]);
      goto LABEL_79;
    }
LABEL_32:
    v33 = 0;
    while (v24 != v33)
    {
      if (v14[v33] != aI_1[v33])
        goto LABEL_40;
      if (++v33 == 2)
        goto LABEL_45;
    }
    if (!aI_1[v24])
    {
LABEL_45:
      if (sscanf(v23, "%i", &v77) != 1)
        goto LABEL_123;
      appended = CFPropertyListAppendFormatted(v7, v9, (uint64_t)"%.*ks=%i", v40, v41, v42, v43, v44, (uint64_t)&v13[-v11]);
      goto LABEL_79;
    }
LABEL_40:
    v39 = 0;
    while (v24 != v39)
    {
      if (v14[v39] != aM[v39])
        goto LABEL_48;
      if (++v39 == 2)
        goto LABEL_53;
    }
    if (!aM[v24])
    {
LABEL_53:
      appended = TextToHardwareAddress(v23, 0xFFFFFFFFFFFFFFFFLL, 6, v79);
      if ((_DWORD)appended)
        goto LABEL_116;
      v51 = (uint64_t)&v13[-v11];
LABEL_78:
      appended = CFPropertyListAppendFormatted(v7, v9, (uint64_t)"%.*ks=%D", v46, v47, v48, v49, v50, v51);
      goto LABEL_79;
    }
LABEL_48:
    v45 = 0;
    while (v24 != v45)
    {
      if (v14[v45] != aS_1[v45])
        goto LABEL_56;
      if (++v45 == 2)
        goto LABEL_61;
    }
    if (!aS_1[v24])
    {
LABEL_61:
      appended = CFPropertyListAppendFormatted(v7, v9, (uint64_t)"%.*ks=%s", v16, v17, v18, v19, v20, (uint64_t)&v13[-v11]);
      goto LABEL_79;
    }
LABEL_56:
    v52 = 0;
    while (v24 != v52)
    {
      if (v14[v52] != aU_0[v52])
        goto LABEL_63;
      if (++v52 == 2)
        goto LABEL_68;
    }
    if (!aU_0[v24])
    {
LABEL_68:
      appended = StringToUUIDEx(v23, 0xFFFFFFFFFFFFFFFFLL, 0, 0, v79, v18, v19, v20);
      if ((_DWORD)appended)
        goto LABEL_116;
      v51 = (uint64_t)&v13[-v11];
      goto LABEL_78;
    }
LABEL_63:
    v53 = 0;
    while (v24 != v53)
    {
      if (v14[v53] != aH[v53])
        goto LABEL_71;
      if (++v53 == 2)
        goto LABEL_76;
    }
    if (!aH[v24])
    {
LABEL_76:
      v76 = 0;
      appended = HexToData(v23, -1, 22, (uint64_t)v79, 0x100uLL, 0, &v76, 0);
      if ((_DWORD)appended)
        goto LABEL_116;
      v51 = (uint64_t)&v13[-v11];
      goto LABEL_78;
    }
LABEL_71:
    v54 = 0;
    while (v24 != v54)
    {
      if (v14[v54] != asc_18D52A276[v54])
        goto LABEL_83;
      if (++v54 == 3)
        goto LABEL_88;
    }
    if (!asc_18D52A276[v24])
    {
LABEL_88:
      *(_QWORD *)&v79[0] = 0;
      appended = CFPropertyListAppendFormatted(v7, v9, (uint64_t)"%.*ks={%@}", v16, v17, v18, v19, v20, (uint64_t)&v13[-v11]);
      if ((_DWORD)appended)
        goto LABEL_116;
      v56 = &__s[strlen(__s)];
      while (!ParseCommaSeparatedNameValuePair((unsigned __int8 *)__s, (unint64_t)v56, v81, 256, 0, v80, 0, &__s))
      {
        appended = CFPropertyListAppendFormatted(0, *(void **)&v79[0], (uint64_t)"%ks=%s", v57, v58, v59, v60, v61, (uint64_t)v81);
        if ((_DWORD)appended)
          goto LABEL_116;
      }
      goto LABEL_80;
    }
LABEL_83:
    v55 = 0;
    while (v24 != v55)
    {
      if (v14[v55] != asc_18D541ED8[v55])
        goto LABEL_94;
      if (++v55 == 3)
        goto LABEL_99;
    }
    if (asc_18D541ED8[v24])
      break;
LABEL_99:
    appended = CFPropertyListAppendFormatted(v7, v9, (uint64_t)"%.*ks=[]", v16, v17, v18, v19, v20, (uint64_t)&v13[-v11]);
LABEL_79:
    if ((_DWORD)appended)
      goto LABEL_116;
LABEL_80:
    if ((_DWORD)v10 == a3)
      goto LABEL_118;
  }
LABEL_94:
  v62 = 0;
  while (v24 != v62)
  {
    if (v14[v62] != aS_2[v62])
      goto LABEL_120;
    if (++v62 == 4)
      goto LABEL_101;
  }
  if (aS_2[v24])
  {
LABEL_120:
    v73 = 4294960540;
    goto LABEL_117;
  }
LABEL_101:
  *(_QWORD *)&v79[0] = 0;
  appended = CFPropertyListAppendFormatted(0, v9, (uint64_t)"%.*ks=[%@]", v16, v17, v18, v19, v20, (uint64_t)&v13[-v11]);
  if ((_DWORD)appended)
    goto LABEL_116;
  v68 = &__s[strlen(__s)];
  while (2)
  {
    v69 = __s;
    if (__s >= v68)
      goto LABEL_80;
    v70 = 0;
    while (1)
    {
      v71 = *v69;
      if (v71 == 92)
      {
        if (v69 + 1 >= v68)
        {
          __s = v69 + 1;
          v73 = 4294960546;
          goto LABEL_117;
        }
        LOBYTE(v71) = v69[1];
        v69 += 2;
        goto LABEL_110;
      }
      if (v71 == 44)
        break;
      ++v69;
LABEL_110:
      if (v70 <= 254)
        v80[v70++] = v71;
      if (v69 >= v68)
      {
        v72 = &v80[v70];
        goto LABEL_115;
      }
    }
    v72 = &v80[v70];
    ++v69;
LABEL_115:
    *v72 = 0;
    __s = v69;
    appended = CFPropertyListAppendFormatted(0, *(void **)&v79[0], (uint64_t)"%s", v63, v64, v65, v66, v67, (uint64_t)v80);
    if (!(_DWORD)appended)
      continue;
    break;
  }
LABEL_116:
  v73 = appended;
LABEL_117:
  CFRelease(v9);
  return v73;
}

uint64_t CFDictionaryGetEmpty()
{
  if (gCFDictionaryGetEmptyOnce != -1)
    dispatch_once_f(&gCFDictionaryGetEmptyOnce, 0, (dispatch_function_t)_CFDictionaryGetEmptyOnce);
  return gCFDictionaryEmpty;
}

CFDictionaryRef _CFDictionaryGetEmptyOnce()
{
  CFDictionaryRef result;

  result = CFDictionaryCreate(0, 0, 0, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  gCFDictionaryEmpty = (uint64_t)result;
  return result;
}

const UInt8 *CFDictionaryGetOrCopyBytes(const __CFDictionary *a1, const void *a2, CFIndex *a3, UInt8 **a4, int *a5)
{
  const __CFData *Value;
  const __CFData *v9;
  CFTypeID v10;
  const UInt8 *BytePtr;
  CFIndex Length;
  UInt8 *v13;
  int v14;
  UInt8 *v16;
  const UInt8 *v17;
  CFIndex v18;

  v18 = 0;
  if (a1 && (Value = (const __CFData *)CFDictionaryGetValue(a1, a2)) != 0)
  {
    v9 = Value;
    v10 = CFGetTypeID(Value);
    if (v10 == CFDataGetTypeID())
    {
      BytePtr = CFDataGetBytePtr(v9);
      Length = CFDataGetLength(v9);
      v13 = 0;
      v18 = Length;
LABEL_5:
      v14 = 0;
      goto LABEL_10;
    }
    if (v10 == CFStringGetTypeID())
    {
      v16 = 0;
      v17 = 0;
      v14 = CFStringGetOrCopyCStringUTF8((const __CFString *)v9, (const char **)&v17, &v16, (size_t *)&v18);
      if (!v14)
      {
        v13 = v16;
        BytePtr = v17;
        goto LABEL_5;
      }
      BytePtr = 0;
      v13 = 0;
    }
    else
    {
      BytePtr = 0;
      v13 = 0;
      v14 = -6732;
    }
  }
  else
  {
    BytePtr = 0;
    v13 = 0;
    v14 = -6727;
  }
LABEL_10:
  *a3 = v18;
  *a4 = v13;
  if (a5)
    *a5 = v14;
  return BytePtr;
}

char *CFDictionaryCopyCString(const __CFDictionary *a1, const void *a2, _DWORD *a3)
{
  const __CFString *Value;
  char *result;
  int v6;

  v6 = 0;
  if (!a1 || (Value = (const __CFString *)CFDictionaryGetValue(a1, a2)) == 0)
  {
    result = 0;
    v6 = -6727;
    if (!a3)
      return result;
    goto LABEL_6;
  }
  result = CFCopyCString(Value, &v6);
  if (a3)
LABEL_6:
    *a3 = v6;
  return result;
}

char *CFDictionaryGetCString(const __CFDictionary *a1, const void *a2, char *a3, size_t a4, int *a5)
{
  const __CFString *Value;
  int v9;

  if (a1)
  {
    Value = (const __CFString *)CFDictionaryGetValue(a1, a2);
    if (Value)
    {
      a3 = (char *)CFGetCString(Value, a3, a4);
      v9 = 0;
      if (!a5)
        return a3;
      goto LABEL_9;
    }
  }
  if (a4)
    *a3 = 0;
  else
    a3 = "";
  v9 = -6727;
  if (a5)
LABEL_9:
    *a5 = v9;
  return a3;
}

const char *CFDictionaryGetData(const __CFDictionary *a1, const void *a2, const char *a3, unint64_t a4, _QWORD *a5, int *a6)
{
  __CFString *Value;

  if (a1)
  {
    Value = (__CFString *)CFDictionaryGetValue(a1, a2);
    if (Value)
      return CFGetData(Value, a3, a4, a5, a6);
  }
  if (a5)
    *a5 = 0;
  if (a6)
    *a6 = -6727;
  return a3;
}

uint64_t CFDictionarySetData(__CFDictionary *a1, const void *a2, UInt8 *bytes, CFIndex length)
{
  CFDataRef v6;
  CFDataRef v7;

  v6 = CFDataCreate(0, bytes, length);
  if (!v6)
    return 4294960596;
  v7 = v6;
  CFDictionarySetValue(a1, a2, v6);
  CFRelease(v7);
  return 0;
}

uint64_t CFDictionarySetDouble(__CFDictionary *a1, const void *a2, double a3)
{
  CFNumberRef v5;
  CFNumberRef v6;
  double valuePtr;

  valuePtr = a3;
  v5 = CFNumberCreate(0, kCFNumberDoubleType, &valuePtr);
  if (!v5)
    return 4294960568;
  v6 = v5;
  CFDictionarySetValue(a1, a2, v5);
  CFRelease(v6);
  return 0;
}

unint64_t CFDictionaryGetHardwareAddress(const __CFDictionary *a1, const void *a2, char *a3, size_t a4, int *a5)
{
  const __CFString *Value;

  if (a1)
  {
    Value = (const __CFString *)CFDictionaryGetValue(a1, a2);
    if (Value)
      return CFGetHardwareAddress(Value, a3, a4, a5);
  }
  if (a3)
    bzero(a3, a4);
  if (a5)
    *a5 = -6727;
  return 0;
}

uint64_t CFDictionarySetHardwareAddress(__CFDictionary *a1, const void *a2, unsigned __int8 *a3, uint64_t a4)
{
  unsigned __int8 *v4;
  char *v5;
  char *v6;
  unsigned int v7;
  char v9[64];
  uint64_t v10;

  v10 = *MEMORY[0x1E0C80C00];
  if (a4 != 8 && a4 != 6)
    return 4294960553;
  v4 = &a3[a4];
  v5 = v9;
  do
  {
    if (v5 == v9)
    {
      v6 = v9;
    }
    else
    {
      *v5 = 58;
      v6 = v5 + 1;
    }
    v7 = *a3++;
    *v6 = a0123456789abcd_0[(unint64_t)v7 >> 4];
    v5 = v6 + 2;
    v6[1] = a0123456789abcd_0[v7 & 0xF];
  }
  while (a3 < v4);
  *v5 = 0;
  return CFDictionarySetCString(a1, a2, v9, -1);
}

uint64_t CFDictionarySetInt64(__CFDictionary *a1, const void *a2, uint64_t a3)
{
  CFNumberRef Int64;
  CFNumberRef v6;

  Int64 = CFNumberCreateInt64(a3);
  if (!Int64)
    return 4294960568;
  v6 = Int64;
  CFDictionarySetValue(a1, a2, Int64);
  CFRelease(v6);
  return 0;
}

uint64_t CFDictionarySetNumber(__CFDictionary *a1, const void *a2, CFNumberType theType, void *valuePtr)
{
  CFNumberRef v6;
  CFNumberRef v7;

  v6 = CFNumberCreate(0, theType, valuePtr);
  if (!v6)
    return 4294960596;
  v7 = v6;
  CFDictionarySetValue(a1, a2, v6);
  CFRelease(v7);
  return 0;
}

uint64_t CFDictionaryGetUUIDEx(const __CFDictionary *a1, const void *a2, _OWORD *a3, uint64_t a4)
{
  __CFString *Value;

  if (!a1)
    return 4294960591;
  Value = (__CFString *)CFDictionaryGetValue(a1, a2);
  if (Value)
    return CFGetUUIDEx(Value, a3, a4);
  else
    return 4294960569;
}

uint64_t CFDictionarySetUUIDString(__CFDictionary *a1, const void *a2, _BYTE *a3, uint64_t a4, __int128 *a5, char a6)
{
  CFStringRef v8;
  CFStringRef v9;
  unsigned int v11;

  v11 = 0;
  v8 = CFCreateUUIDString(a3, a4, a5, a6, &v11);
  if (v8)
  {
    v9 = v8;
    CFDictionarySetValue(a1, a2, v8);
    CFRelease(v9);
  }
  return v11;
}

CFNumberRef CFNumberGetObject(unsigned int a1)
{
  CFNumberRef v2;
  CFNumberRef Int64;

  if (a1 > 0x1F)
    return 0;
  pthread_mutex_lock(&gCFNumberGetObjectLock);
  v2 = (CFNumberRef)gCFNumberArray[a1];
  if (!v2)
  {
    Int64 = CFNumberCreateInt64(a1);
    v2 = Int64;
    if (Int64)
      gCFNumberArray[a1] = Int64;
  }
  pthread_mutex_unlock(&gCFNumberGetObjectLock);
  return v2;
}

void CFSetApplyBlock(const __CFSet *a1, void *context)
{
  CFSetApplyFunction(a1, (CFSetApplierFunction)_CFSetApplyBlockApplier, context);
}

uint64_t _CFSetApplyBlockApplier(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(a2 + 16))(a2, a1);
}

uint64_t CFStringAppendF(__CFString *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  return CFStringAppendV(a1, a2, (uint64_t)&a9);
}

uint64_t CFStringAppendV(__CFString *a1, uint64_t a2, uint64_t a3)
{
  char *v4;
  char *cStr;

  cStr = 0;
  if ((VASPrintF((void **)&cStr, a2, a3) & 0x80000000) != 0)
    return 4294960596;
  v4 = cStr;
  CFStringAppendCString(a1, cStr, 0x8000100u);
  free(v4);
  return 0;
}

uint64_t CFRunLoopRunEx(CFTimeInterval a1)
{
  __CFRunLoop *Current;
  __CFRunLoopSource *v3;
  CFRunLoopMode *v4;
  uint64_t v5;
  CFRunLoopSourceContext v7;

  Current = CFRunLoopGetCurrent();
  memset(&v7, 0, sizeof(v7));
  v3 = CFRunLoopSourceCreate(0, 0, &v7);
  v4 = (CFRunLoopMode *)MEMORY[0x1E0C9B270];
  if (v3)
    CFRunLoopAddSource(Current, v3, (CFRunLoopMode)*MEMORY[0x1E0C9B270]);
  if (a1 < 0.0)
  {
    CFRunLoopRun();
    v5 = 2;
    if (!v3)
      return v5;
    goto LABEL_7;
  }
  v5 = CFRunLoopRunFor(a1);
  if (v3)
  {
LABEL_7:
    CFRunLoopRemoveSource(Current, v3, *v4);
    CFRelease(v3);
  }
  return v5;
}

uint64_t CFRunLoopRunFor(CFTimeInterval a1)
{
  double Current;
  const __CFString *v3;
  uint64_t result;
  double v5;
  double v6;

  Current = CFAbsoluteTimeGetCurrent();
  v3 = (const __CFString *)*MEMORY[0x1E0C9B280];
  result = CFRunLoopRunInMode((CFRunLoopMode)*MEMORY[0x1E0C9B280], a1, 0);
  if ((_DWORD)result == 1)
  {
    v5 = Current + a1;
    while (1)
    {
      v6 = v5 - CFAbsoluteTimeGetCurrent();
      if (v6 < 0.0)
        break;
      usleep(0x4E20u);
      result = CFRunLoopRunInMode(v3, v6, 0);
      if ((_DWORD)result != 1)
        return result;
    }
    return 3;
  }
  return result;
}

CFComparisonResult CFSortLocalizedStandardCompare(const __CFString *a1, const __CFString *a2)
{
  return CFStringCompare(a1, a2, 0x361uLL);
}

uint64_t MapCFStringToValue(CFTypeRef cf1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  const void **v11;
  const void *v12;
  unsigned int *v13;
  uint64_t v14;
  const void **v16;
  unsigned int *v17;

  v16 = (const void **)&a9;
  while (1)
  {
    v11 = v16;
    v17 = (unsigned int *)(v16 + 1);
    v12 = *v11;
    if (!*v11)
      break;
    v13 = v17;
    v16 = (const void **)(v17 + 2);
    v14 = *v13;
    if (CFEqual(cf1, v12))
      return v14;
  }
  return a2;
}

void *NSArrayGetNSNumberAtIndex(void *result, uint64_t a2, int *a3)
{
  void *v4;
  char isKindOfClass;
  BOOL v6;
  int v7;

  if (result)
  {
    result = (void *)objc_msgSend(result, "objectAtIndexedSubscript:", a2);
    if (result)
    {
      v4 = result;
      objc_opt_class();
      isKindOfClass = objc_opt_isKindOfClass();
      v6 = (isKindOfClass & 1) == 0;
      if ((isKindOfClass & 1) != 0)
        result = v4;
      else
        result = 0;
      if (v6)
        v7 = -6756;
      else
        v7 = 0;
    }
    else
    {
      v7 = -6727;
    }
  }
  else
  {
    v7 = -6705;
  }
  if (a3)
    *a3 = v7;
  return result;
}

void *NSDictionaryGetNSNumber(void *result, uint64_t a2, int *a3)
{
  void *v4;
  char isKindOfClass;
  BOOL v6;
  int v7;

  if (result)
  {
    result = (void *)objc_msgSend(result, "objectForKeyedSubscript:", a2);
    if (result)
    {
      v4 = result;
      objc_opt_class();
      isKindOfClass = objc_opt_isKindOfClass();
      v6 = (isKindOfClass & 1) == 0;
      if ((isKindOfClass & 1) != 0)
        result = v4;
      else
        result = 0;
      if (v6)
        v7 = -6756;
      else
        v7 = 0;
    }
    else
    {
      v7 = -6727;
    }
  }
  else
  {
    v7 = -6705;
  }
  if (a3)
    *a3 = v7;
  return result;
}

uint64_t NSGetNSNumber(uint64_t result, int *a2)
{
  uint64_t v3;
  char isKindOfClass;
  BOOL v5;
  int v6;

  if (!result)
  {
    v6 = -6705;
    if (!a2)
      return result;
    goto LABEL_9;
  }
  v3 = result;
  objc_opt_class();
  isKindOfClass = objc_opt_isKindOfClass();
  v5 = (isKindOfClass & 1) == 0;
  if ((isKindOfClass & 1) != 0)
    result = v3;
  else
    result = 0;
  if (v5)
    v6 = -6756;
  else
    v6 = 0;
  if (a2)
LABEL_9:
    *a2 = v6;
  return result;
}

double CFDictionaryGetCGSize(const __CFDictionary *a1, const void *a2, int *a3)
{
  uint64_t v6;
  const void *Value;
  uint64_t v8;
  CFTypeID v9;
  int v10;
  _QWORD v12[2];

  v12[0] = ((double (__cdecl *)())getCGSizeZero[0])();
  v12[1] = v6;
  Value = CFDictionaryGetValue(a1, a2);
  if (Value)
  {
    v8 = (uint64_t)Value;
    v9 = CFGetTypeID(Value);
    if (v9 == CFDictionaryGetTypeID())
    {
      if (softLinkCGSizeMakeWithDictionaryRepresentation(v8, (uint64_t)v12))
        v10 = 0;
      else
        v10 = -6700;
    }
    else
    {
      v10 = -6756;
    }
  }
  else
  {
    v10 = -6727;
  }
  if (a3)
    *a3 = v10;
  return *(double *)v12;
}

double CGSizeZeroFunction()
{
  return *(double *)&constantValCGSizeZero;
}

double initValCGSizeZero()
{
  __int128 *v0;

  if (CoreGraphicsLibrary_sOnce_405 != -1)
    dispatch_once(&CoreGraphicsLibrary_sOnce_405, &__block_literal_global_406);
  v0 = (__int128 *)dlsym((void *)CoreGraphicsLibrary_sLib_407, "CGSizeZero");
  if (v0)
    constantValCGSizeZero = *v0;
  getCGSizeZero[0] = (uint64_t (*)())CGSizeZeroFunction;
  return *(double *)&constantValCGSizeZero;
}

uint64_t initCGSizeMakeWithDictionaryRepresentation(uint64_t a1, uint64_t a2)
{
  if (CoreGraphicsLibrary_sOnce_405 != -1)
    dispatch_once(&CoreGraphicsLibrary_sOnce_405, &__block_literal_global_406);
  softLinkCGSizeMakeWithDictionaryRepresentation = (uint64_t (*)())dlsym((void *)CoreGraphicsLibrary_sLib_407, "CGSizeMakeWithDictionaryRepresentation");
  return ((uint64_t (*)(uint64_t, uint64_t))softLinkCGSizeMakeWithDictionaryRepresentation)(a1, a2);
}

uint64_t CFDictionarySetCGSize(__CFDictionary *a1, const void *a2, double a3, double a4)
{
  const void *v6;
  const void *v7;

  v6 = (const void *)((uint64_t (*)(double, double))softLinkCGSizeCreateDictionaryRepresentation[0])(a3, a4);
  if (!v6)
    return 4294960596;
  v7 = v6;
  CFDictionarySetValue(a1, a2, v6);
  CFRelease(v7);
  return 0;
}

uint64_t initCGSizeCreateDictionaryRepresentation(double a1, double a2)
{
  if (CoreGraphicsLibrary_sOnce_405 != -1)
    dispatch_once(&CoreGraphicsLibrary_sOnce_405, &__block_literal_global_406);
  softLinkCGSizeCreateDictionaryRepresentation[0] = (uint64_t (*)())dlsym((void *)CoreGraphicsLibrary_sLib_407, "CGSizeCreateDictionaryRepresentation");
  return ((uint64_t (*)(double, double))softLinkCGSizeCreateDictionaryRepresentation[0])(a1, a2);
}

double CFDictionaryGetCGRect(const __CFDictionary *a1, const void *a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  const void *Value;
  uint64_t v10;
  CFTypeID v11;
  int v12;
  _QWORD v14[4];

  v14[0] = ((double (__cdecl *)())getCGRectZero[0])();
  v14[1] = v6;
  v14[2] = v7;
  v14[3] = v8;
  Value = CFDictionaryGetValue(a1, a2);
  if (Value)
  {
    v10 = (uint64_t)Value;
    v11 = CFGetTypeID(Value);
    if (v11 == CFDictionaryGetTypeID())
    {
      if (((unsigned int (*)(uint64_t, uint64_t))softLinkCGRectMakeWithDictionaryRepresentation[0])(v10, (uint64_t)v14))
      {
        v12 = 0;
      }
      else
      {
        v12 = -6700;
      }
    }
    else
    {
      v12 = -6756;
    }
  }
  else
  {
    v12 = -6727;
  }
  if (a3)
    *a3 = v12;
  return *(double *)v14;
}

double CGRectZeroFunction()
{
  return *(double *)&constantValCGRectZero;
}

double initValCGRectZero()
{
  __int128 *v0;
  __int128 v1;

  if (CoreGraphicsLibrary_sOnce_405 != -1)
    dispatch_once(&CoreGraphicsLibrary_sOnce_405, &__block_literal_global_406);
  v0 = (__int128 *)dlsym((void *)CoreGraphicsLibrary_sLib_407, "CGRectZero");
  if (v0)
  {
    v1 = v0[1];
    constantValCGRectZero = *v0;
    *(_OWORD *)&qword_1EE0695F0 = v1;
  }
  getCGRectZero[0] = (uint64_t (*)())CGRectZeroFunction;
  return *(double *)&constantValCGRectZero;
}

uint64_t initCGRectMakeWithDictionaryRepresentation(uint64_t a1, uint64_t a2)
{
  if (CoreGraphicsLibrary_sOnce_405 != -1)
    dispatch_once(&CoreGraphicsLibrary_sOnce_405, &__block_literal_global_406);
  softLinkCGRectMakeWithDictionaryRepresentation[0] = (uint64_t (*)())dlsym((void *)CoreGraphicsLibrary_sLib_407, "CGRectMakeWithDictionaryRepresentation");
  return ((uint64_t (*)(uint64_t, uint64_t))softLinkCGRectMakeWithDictionaryRepresentation[0])(a1, a2);
}

uint64_t CFDictionarySetCGRect(__CFDictionary *a1, const void *a2, double a3, double a4, double a5, double a6)
{
  const void *v8;
  const void *v9;

  v8 = (const void *)((uint64_t (*)(double, double, double, double))softLinkCGRectCreateDictionaryRepresentation[0])(a3, a4, a5, a6);
  if (!v8)
    return 4294960596;
  v9 = v8;
  CFDictionarySetValue(a1, a2, v8);
  CFRelease(v9);
  return 0;
}

uint64_t initCGRectCreateDictionaryRepresentation(double a1, double a2, double a3, double a4)
{
  if (CoreGraphicsLibrary_sOnce_405 != -1)
    dispatch_once(&CoreGraphicsLibrary_sOnce_405, &__block_literal_global_406);
  softLinkCGRectCreateDictionaryRepresentation[0] = (uint64_t (*)())dlsym((void *)CoreGraphicsLibrary_sLib_407, "CGRectCreateDictionaryRepresentation");
  return ((uint64_t (*)(double, double, double, double))softLinkCGRectCreateDictionaryRepresentation[0])(a1, a2, a3, a4);
}

uint64_t CGColorSpaceGetGray()
{
  if (CGColorSpaceGetGray_sOnce != -1)
    dispatch_once_f(&CGColorSpaceGetGray_sOnce, &CGColorSpaceGetGray_sColorSpace, (dispatch_function_t)_CGColorSpaceGetGray);
  return CGColorSpaceGetGray_sColorSpace;
}

uint64_t _CGColorSpaceGetGray(uint64_t *a1)
{
  uint64_t result;

  result = softLinkCGColorSpaceCreateDeviceGray[0]();
  *a1 = result;
  return result;
}

uint64_t initCGColorSpaceCreateDeviceGray()
{
  if (CoreGraphicsLibrary_sOnce_405 != -1)
    dispatch_once(&CoreGraphicsLibrary_sOnce_405, &__block_literal_global_406);
  softLinkCGColorSpaceCreateDeviceGray[0] = (uint64_t (*)())dlsym((void *)CoreGraphicsLibrary_sLib_407, "CGColorSpaceCreateDeviceGray");
  return softLinkCGColorSpaceCreateDeviceGray[0]();
}

uint64_t CGColorSpaceGetRGB()
{
  if (CGColorSpaceGetRGB_sOnce != -1)
    dispatch_once_f(&CGColorSpaceGetRGB_sOnce, &CGColorSpaceGetRGB_sColorSpace, (dispatch_function_t)_CGColorSpaceGetRGB);
  return CGColorSpaceGetRGB_sColorSpace;
}

uint64_t _CGColorSpaceGetRGB(uint64_t *a1)
{
  uint64_t result;

  result = softLinkCGColorSpaceCreateDeviceRGB_419[0]();
  *a1 = result;
  return result;
}

uint64_t initCGColorSpaceCreateDeviceRGB_420()
{
  if (CoreGraphicsLibrary_sOnce_405 != -1)
    dispatch_once(&CoreGraphicsLibrary_sOnce_405, &__block_literal_global_406);
  softLinkCGColorSpaceCreateDeviceRGB_419[0] = (uint64_t (*)())dlsym((void *)CoreGraphicsLibrary_sLib_407, "CGColorSpaceCreateDeviceRGB");
  return softLinkCGColorSpaceCreateDeviceRGB_419[0]();
}

uint64_t CGColorCreateWithRGB(float a1, float a2, float a3, float a4)
{
  double v5[5];

  v5[4] = *(double *)MEMORY[0x1E0C80C00];
  v5[0] = a1;
  v5[1] = a2;
  v5[2] = a3;
  v5[3] = a4;
  if (CGColorSpaceGetRGB_sOnce != -1)
    dispatch_once_f(&CGColorSpaceGetRGB_sOnce, &CGColorSpaceGetRGB_sColorSpace, (dispatch_function_t)_CGColorSpaceGetRGB);
  return ((uint64_t (*)(uint64_t, uint64_t))softLinkCGColorCreate[0])(CGColorSpaceGetRGB_sColorSpace, (uint64_t)v5);
}

uint64_t initCGColorCreate(uint64_t a1, uint64_t a2)
{
  if (CoreGraphicsLibrary_sOnce_405 != -1)
    dispatch_once(&CoreGraphicsLibrary_sOnce_405, &__block_literal_global_406);
  softLinkCGColorCreate[0] = (uint64_t (*)())dlsym((void *)CoreGraphicsLibrary_sLib_407, "CGColorCreate");
  return ((uint64_t (*)(uint64_t, uint64_t))softLinkCGColorCreate[0])(a1, a2);
}

uint64_t _CGColorCreateWithRGB(uint64_t a1)
{
  uint64_t result;

  result = CGColorCreateWithRGB(*(float *)a1, *(float *)(a1 + 4), *(float *)(a1 + 8), *(float *)(a1 + 12));
  **(_QWORD **)(a1 + 16) = result;
  return result;
}

uint64_t CGColorGetBlack()
{
  if (CGColorGetBlack_sOnce != -1)
    dispatch_once_f(&CGColorGetBlack_sOnce, &CGColorGetBlack_sContext, (dispatch_function_t)_CGColorCreateWithRGB);
  return CGColorGetBlack_sColor;
}

uint64_t initCGBitmapContextCreateImage(uint64_t a1)
{
  if (CoreGraphicsLibrary_sOnce_405 != -1)
    dispatch_once(&CoreGraphicsLibrary_sOnce_405, &__block_literal_global_406);
  softLinkCGBitmapContextCreateImage[0] = (uint64_t (*)())dlsym((void *)CoreGraphicsLibrary_sLib_407, "CGBitmapContextCreateImage");
  return ((uint64_t (*)(uint64_t))softLinkCGBitmapContextCreateImage[0])(a1);
}

uint64_t initCGContextDrawImage(uint64_t a1, uint64_t a2, double a3, double a4, double a5, double a6)
{
  if (CoreGraphicsLibrary_sOnce_405 != -1)
    dispatch_once(&CoreGraphicsLibrary_sOnce_405, &__block_literal_global_406);
  softLinkCGContextDrawImage[0] = (uint64_t (*)())dlsym((void *)CoreGraphicsLibrary_sLib_407, "CGContextDrawImage");
  return ((uint64_t (*)(uint64_t, uint64_t, double, double, double, double))softLinkCGContextDrawImage[0])(a1, a2, a3, a4, a5, a6);
}

uint64_t initCGBitmapContextCreate(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  if (CoreGraphicsLibrary_sOnce_405 != -1)
    dispatch_once(&CoreGraphicsLibrary_sOnce_405, &__block_literal_global_406);
  softLinkCGBitmapContextCreate[0] = (uint64_t (*)())dlsym((void *)CoreGraphicsLibrary_sLib_407, "CGBitmapContextCreate");
  return ((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))softLinkCGBitmapContextCreate[0])(a1, a2, a3, a4, a5, a6, a7);
}

uint64_t initCGImageGetBitmapInfo(uint64_t a1)
{
  if (CoreGraphicsLibrary_sOnce_405 != -1)
    dispatch_once(&CoreGraphicsLibrary_sOnce_405, &__block_literal_global_406);
  softLinkCGImageGetBitmapInfo[0] = (uint64_t (*)())dlsym((void *)CoreGraphicsLibrary_sLib_407, "CGImageGetBitmapInfo");
  return ((uint64_t (*)(uint64_t))softLinkCGImageGetBitmapInfo[0])(a1);
}

uint64_t initCGImageGetColorSpace(uint64_t a1)
{
  if (CoreGraphicsLibrary_sOnce_405 != -1)
    dispatch_once(&CoreGraphicsLibrary_sOnce_405, &__block_literal_global_406);
  softLinkCGImageGetColorSpace[0] = (uint64_t (*)())dlsym((void *)CoreGraphicsLibrary_sLib_407, "CGImageGetColorSpace");
  return ((uint64_t (*)(uint64_t))softLinkCGImageGetColorSpace[0])(a1);
}

uint64_t initCGImageGetBitsPerComponent(uint64_t a1)
{
  if (CoreGraphicsLibrary_sOnce_405 != -1)
    dispatch_once(&CoreGraphicsLibrary_sOnce_405, &__block_literal_global_406);
  softLinkCGImageGetBitsPerComponent[0] = (uint64_t (*)())dlsym((void *)CoreGraphicsLibrary_sLib_407, "CGImageGetBitsPerComponent");
  return ((uint64_t (*)(uint64_t))softLinkCGImageGetBitsPerComponent[0])(a1);
}

uint64_t initCGBitmapGetAlignedBytesPerRow(uint64_t a1)
{
  if (CoreGraphicsLibrary_sOnce_405 != -1)
    dispatch_once(&CoreGraphicsLibrary_sOnce_405, &__block_literal_global_406);
  softLinkCGBitmapGetAlignedBytesPerRow[0] = (uint64_t (*)())dlsym((void *)CoreGraphicsLibrary_sLib_407, "CGBitmapGetAlignedBytesPerRow");
  return ((uint64_t (*)(uint64_t))softLinkCGBitmapGetAlignedBytesPerRow[0])(a1);
}

uint64_t initCGImageGetBitsPerPixel(uint64_t a1)
{
  if (CoreGraphicsLibrary_sOnce_405 != -1)
    dispatch_once(&CoreGraphicsLibrary_sOnce_405, &__block_literal_global_406);
  softLinkCGImageGetBitsPerPixel[0] = (uint64_t (*)())dlsym((void *)CoreGraphicsLibrary_sLib_407, "CGImageGetBitsPerPixel");
  return ((uint64_t (*)(uint64_t))softLinkCGImageGetBitsPerPixel[0])(a1);
}

CFMutableDataRef CGImageCreateData(uint64_t a1, uint64_t a2, int *a3)
{
  CFMutableDataRef Mutable;
  CFMutableDataRef v7;
  uint64_t v8;
  const void *v9;
  char v10;
  int v11;

  Mutable = CFDataCreateMutable(0, 0);
  v7 = Mutable;
  if (Mutable)
  {
    v8 = ((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))softLinkCGImageDestinationCreateWithData[0])((uint64_t)Mutable, a2, 1, 0);
    if (v8)
    {
      v9 = (const void *)v8;
      ((void (*)(uint64_t, uint64_t, uint64_t))softLinkCGImageDestinationAddImage_433[0])(v8, a1, 0);
      v10 = ((uint64_t (*)(uint64_t))softLinkCGImageDestinationFinalize_434[0])((uint64_t)v9);
      CFRelease(v9);
      if ((v10 & 1) != 0)
      {
        v11 = 0;
        goto LABEL_5;
      }
      v11 = -6747;
    }
    else
    {
      v11 = -6732;
    }
    CFRelease(v7);
    v7 = 0;
  }
  else
  {
    v11 = -6728;
  }
LABEL_5:
  if (a3)
    *a3 = v11;
  return v7;
}

uint64_t initCGImageDestinationFinalize_435(uint64_t a1)
{
  if (ImageIOLibrary_sOnce_436 != -1)
    dispatch_once(&ImageIOLibrary_sOnce_436, &__block_literal_global_27);
  softLinkCGImageDestinationFinalize_434[0] = (uint64_t (*)())dlsym((void *)ImageIOLibrary_sLib_437, "CGImageDestinationFinalize");
  return ((uint64_t (*)(uint64_t))softLinkCGImageDestinationFinalize_434[0])(a1);
}

uint64_t initCGImageDestinationAddImage_441(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (ImageIOLibrary_sOnce_436 != -1)
    dispatch_once(&ImageIOLibrary_sOnce_436, &__block_literal_global_27);
  softLinkCGImageDestinationAddImage_433[0] = (uint64_t (*)())dlsym((void *)ImageIOLibrary_sLib_437, "CGImageDestinationAddImage");
  return ((uint64_t (*)(uint64_t, uint64_t, uint64_t))softLinkCGImageDestinationAddImage_433[0])(a1, a2, a3);
}

uint64_t initCGImageDestinationCreateWithData(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (ImageIOLibrary_sOnce_436 != -1)
    dispatch_once(&ImageIOLibrary_sOnce_436, &__block_literal_global_27);
  softLinkCGImageDestinationCreateWithData[0] = (uint64_t (*)())dlsym((void *)ImageIOLibrary_sLib_437, "CGImageDestinationCreateWithData");
  return ((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))softLinkCGImageDestinationCreateWithData[0])(a1, a2, a3, a4);
}

uint64_t CGImageCreateWithData(uint64_t a1, int *a2)
{
  uint64_t v3;
  const void *v4;
  uint64_t v5;
  int v6;

  v3 = ((uint64_t (*)(uint64_t, uint64_t))softLinkCGImageSourceCreateWithData[0])(a1, 0);
  if (!v3)
  {
    v5 = 0;
    v6 = -6700;
    if (!a2)
      return v5;
    goto LABEL_7;
  }
  v4 = (const void *)v3;
  if (((uint64_t (*)(uint64_t))softLinkCGImageSourceGetCount[0])(v3))
  {
    v5 = ((uint64_t (*)(uint64_t, uint64_t, uint64_t))softLinkCGImageSourceCreateImageAtIndex[0])((uint64_t)v4, 0, 0);
    if (v5)
      v6 = 0;
    else
      v6 = -6700;
  }
  else
  {
    v5 = 0;
    v6 = -6764;
  }
  CFRelease(v4);
  if (a2)
LABEL_7:
    *a2 = v6;
  return v5;
}

uint64_t initCGImageSourceCreateImageAtIndex(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (ImageIOLibrary_sOnce_436 != -1)
    dispatch_once(&ImageIOLibrary_sOnce_436, &__block_literal_global_27);
  softLinkCGImageSourceCreateImageAtIndex[0] = (uint64_t (*)())dlsym((void *)ImageIOLibrary_sLib_437, "CGImageSourceCreateImageAtIndex");
  return ((uint64_t (*)(uint64_t, uint64_t, uint64_t))softLinkCGImageSourceCreateImageAtIndex[0])(a1, a2, a3);
}

uint64_t initCGImageSourceGetCount(uint64_t a1)
{
  if (ImageIOLibrary_sOnce_436 != -1)
    dispatch_once(&ImageIOLibrary_sOnce_436, &__block_literal_global_27);
  softLinkCGImageSourceGetCount[0] = (uint64_t (*)())dlsym((void *)ImageIOLibrary_sLib_437, "CGImageSourceGetCount");
  return ((uint64_t (*)(uint64_t))softLinkCGImageSourceGetCount[0])(a1);
}

uint64_t initCGImageSourceCreateWithData(uint64_t a1, uint64_t a2)
{
  if (ImageIOLibrary_sOnce_436 != -1)
    dispatch_once(&ImageIOLibrary_sOnce_436, &__block_literal_global_27);
  softLinkCGImageSourceCreateWithData[0] = (uint64_t (*)())dlsym((void *)ImageIOLibrary_sLib_437, "CGImageSourceCreateWithData");
  return ((uint64_t (*)(uint64_t, uint64_t))softLinkCGImageSourceCreateWithData[0])(a1, a2);
}

CFDictionaryRef CreateScaledImageDataWithData(const void *a1, int *a2, double a3, double a4)
{
  CFDictionaryRef Data;
  int IOSurfaceFromJPEG;
  double v10;
  double v11;
  double v12;
  double v13;
  int v15;
  uint64_t v16;
  double v17;
  double v18;
  double v19;
  double v20;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  const void *v28;
  const void *v29;
  int v30;
  uint64_t v31;
  const __CFDictionary *v33;
  const UInt8 *v34;
  _DWORD length[3];
  CFTypeRef v36;
  CFTypeRef v37;
  CFTypeRef v38;
  CFTypeRef cf;
  void *values;
  void *keys[2];

  keys[1] = *(void **)MEMORY[0x1E0C80C00];
  v38 = 0;
  cf = 0;
  v36 = 0;
  v37 = 0;
  memset(length, 0, sizeof(length));
  keys[0] = (void *)getkFigJPEGHighSpeedDecode[0]();
  values = (void *)*MEMORY[0x1E0C9AE50];
  Data = CFDictionaryCreate(0, (const void **)keys, (const void **)&values, 1, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  if (!Data)
  {
LABEL_51:
    IOSurfaceFromJPEG = -6728;
    goto LABEL_18;
  }
  IOSurfaceFromJPEG = softLinkFigCreateIOSurfaceFromJPEG((uint64_t)a1, (uint64_t)Data, (uint64_t)&cf);
  CFRelease(Data);
  if (IOSurfaceFromJPEG)
    goto LABEL_16;
  v10 = (double)(unint64_t)((uint64_t (*)(uint64_t))softLinkIOSurfaceGetWidth[0])((uint64_t)cf);
  v11 = (double)(unint64_t)((uint64_t (*)(uint64_t))softLinkIOSurfaceGetHeight[0])((uint64_t)cf);
  v12 = v11;
  v13 = v10;
  if (a3 < v10)
  {
    v13 = a3;
    v12 = a3 * v11 / v10;
  }
  if (v12 > a4)
  {
    v12 = a4;
    v13 = a4 * v10 / v11;
  }
  if (v13 == v10 && v12 == v11)
  {
    CFRelease(cf);
    CFRetain(a1);
    IOSurfaceFromJPEG = 0;
    Data = (CFDictionaryRef)a1;
    goto LABEL_18;
  }
  IOSurfaceFromJPEG = ((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))softLinkCVPixelBufferCreateWithIOSurface[0])(0, (uint64_t)cf, 0, (uint64_t)&v38);
  CFRelease(cf);
  if (IOSurfaceFromJPEG)
  {
LABEL_16:
    Data = 0;
    goto LABEL_18;
  }
  v15 = ((uint64_t (*)(uint64_t, uint64_t))softLinkVTPixelTransferSessionCreate[0])(0, (uint64_t)&v36);
  if (v15
    || (v15 = ((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))softLinkFigCreateIOSurfaceBackedCVPixelBuffer[0])((int)v13, (int)v12, 2037741158, (uint64_t)&v37)) != 0|| (v15 = ((uint64_t (*)(uint64_t, uint64_t, uint64_t))softLinkVTPixelTransferSessionTransferImage[0])((uint64_t)v36, (uint64_t)v38, (uint64_t)v37)) != 0)
  {
    IOSurfaceFromJPEG = v15;
    goto LABEL_16;
  }
  CFRelease(v38);
  v38 = 0;
  CFRelease(v36);
  v36 = 0;
  v33 = (const __CFDictionary *)((uint64_t (*)(uint64_t))softLinkCVPixelBufferGetIOSurface[0])((uint64_t)v37);
  Data = v33;
  if (v33)
  {
    CFRetain(v33);
    CFRelease(v37);
    v37 = 0;
    memset(length, 0, sizeof(length));
    IOSurfaceFromJPEG = ((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))softLinkFigAspenCreateJPEGFromIOSurface[0])((uint64_t)Data, 0, (uint64_t)&length[1], (uint64_t)length);
    CFRelease(Data);
    if (IOSurfaceFromJPEG)
      goto LABEL_16;
    ((void (*)(uint64_t, uint64_t, uint64_t))softLinkIOSurfaceLock_447[0])(*(uint64_t *)&length[1], 1, 0);
    v34 = (const UInt8 *)((uint64_t (*)(uint64_t))softLinkIOSurfaceGetBaseAddress_448[0])(*(uint64_t *)&length[1]);
    Data = CFDataCreate(0, v34, length[0]);
    softLinkIOSurfaceUnlock_449(*(uint64_t *)&length[1], 1, 0);
    CFRelease(*(CFTypeRef *)&length[1]);
    if (Data)
    {
      IOSurfaceFromJPEG = 0;
      goto LABEL_18;
    }
    goto LABEL_51;
  }
  IOSurfaceFromJPEG = -6700;
LABEL_18:
  if (v37)
    CFRelease(v37);
  if (v36)
    CFRelease(v36);
  if (v38)
    CFRelease(v38);
  if (a2)
    *a2 = IOSurfaceFromJPEG;
  if (!Data)
  {
    LODWORD(cf) = 0;
    v16 = CGImageCreateWithData((uint64_t)a1, (int *)&cf);
    Data = (CFDictionaryRef)v16;
    if (v16)
    {
      v17 = (double)(unint64_t)((uint64_t (*)(uint64_t))softLinkCGImageGetWidth[0])(v16);
      v18 = (double)(unint64_t)((uint64_t (*)(uint64_t))softLinkCGImageGetHeight[0])((uint64_t)Data);
      v19 = v18;
      v20 = v17;
      if (a3 < v17)
      {
        v20 = a3;
        v19 = a3 * v18 / v17;
      }
      if (v19 > a4)
      {
        v19 = a4;
        v20 = a4 * v17 / v18;
      }
      if (v20 != v17 || v19 != v18)
      {
        v22 = ((uint64_t (*)(uint64_t))softLinkCGImageGetBitsPerPixel[0])((uint64_t)Data);
        v23 = ((uint64_t (*)(uint64_t))softLinkCGBitmapGetAlignedBytesPerRow[0])((unint64_t)((v20 * (double)v22 + 7.0) * 0.125));
        v24 = ((uint64_t (*)(uint64_t))softLinkCGImageGetBitsPerComponent[0])((uint64_t)Data);
        v25 = ((uint64_t (*)(uint64_t))softLinkCGImageGetColorSpace[0])((uint64_t)Data);
        v26 = ((uint64_t (*)(uint64_t))softLinkCGImageGetBitmapInfo[0])((uint64_t)Data);
        v27 = ((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))softLinkCGBitmapContextCreate[0])(0, (unint64_t)v20, (unint64_t)v19, v24, v23, v25, v26);
        if (v27)
        {
          v28 = (const void *)v27;
          ((void (*)(uint64_t, uint64_t, double, double, double, double))softLinkCGContextDrawImage[0])(v27, (uint64_t)Data, 0.0, 0.0, v20, v19);
          v29 = (const void *)((uint64_t (*)(uint64_t))softLinkCGBitmapContextCreateImage[0])((uint64_t)v28);
          CFRelease(v28);
          if (v29)
            v30 = 0;
          else
            v30 = -6700;
          LODWORD(cf) = v30;
          CFRelease(Data);
          if (v29)
          {
            v31 = getkUTTypeJPEG[0]();
            Data = CGImageCreateData((uint64_t)v29, v31, (int *)&cf);
            CFRelease(v29);
            if (!a2)
              return Data;
            goto LABEL_45;
          }
        }
        else
        {
          LODWORD(cf) = -6700;
          CFRelease(Data);
        }
        Data = 0;
        if (!a2)
          return Data;
LABEL_45:
        *a2 = (int)cf;
        return Data;
      }
      CFRelease(Data);
      CFRetain(a1);
      LODWORD(cf) = 0;
      Data = (CFDictionaryRef)a1;
    }
    if (a2)
      goto LABEL_45;
  }
  return Data;
}

uint64_t initValkFigJPEGHighSpeedDecode()
{
  uint64_t *v0;
  uint64_t result;

  if (CelestialLibrary_sOnce != -1)
    dispatch_once(&CelestialLibrary_sOnce, &__block_literal_global_42);
  v0 = (uint64_t *)dlsym((void *)CelestialLibrary_sLib, "kFigJPEGHighSpeedDecode");
  if (v0)
  {
    result = *v0;
    constantValkFigJPEGHighSpeedDecode = result;
  }
  else
  {
    result = constantValkFigJPEGHighSpeedDecode;
  }
  getkFigJPEGHighSpeedDecode[0] = kFigJPEGHighSpeedDecodeFunction;
  return result;
}

uint64_t kFigJPEGHighSpeedDecodeFunction()
{
  return constantValkFigJPEGHighSpeedDecode;
}

uint64_t initValkUTTypeJPEG()
{
  uint64_t *v0;
  uint64_t result;

  if (MobileCoreServicesLibrary_sOnce != -1)
    dispatch_once(&MobileCoreServicesLibrary_sOnce, &__block_literal_global_38);
  v0 = (uint64_t *)dlsym((void *)MobileCoreServicesLibrary_sLib, "kUTTypeJPEG");
  if (v0)
  {
    result = *v0;
    constantValkUTTypeJPEG = result;
  }
  else
  {
    result = constantValkUTTypeJPEG;
  }
  getkUTTypeJPEG[0] = kUTTypeJPEGFunction;
  return result;
}

uint64_t kUTTypeJPEGFunction()
{
  return constantValkUTTypeJPEG;
}

uint64_t initCGImageGetHeight(uint64_t a1)
{
  if (CoreGraphicsLibrary_sOnce_405 != -1)
    dispatch_once(&CoreGraphicsLibrary_sOnce_405, &__block_literal_global_406);
  softLinkCGImageGetHeight[0] = (uint64_t (*)())dlsym((void *)CoreGraphicsLibrary_sLib_407, "CGImageGetHeight");
  return ((uint64_t (*)(uint64_t))softLinkCGImageGetHeight[0])(a1);
}

uint64_t initCGImageGetWidth(uint64_t a1)
{
  if (CoreGraphicsLibrary_sOnce_405 != -1)
    dispatch_once(&CoreGraphicsLibrary_sOnce_405, &__block_literal_global_406);
  softLinkCGImageGetWidth[0] = (uint64_t (*)())dlsym((void *)CoreGraphicsLibrary_sLib_407, "CGImageGetWidth");
  return ((uint64_t (*)(uint64_t))softLinkCGImageGetWidth[0])(a1);
}

uint64_t initIOSurfaceUnlock_454(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (IOSurfaceLibrary_sOnce_455 != -1)
    dispatch_once(&IOSurfaceLibrary_sOnce_455, &__block_literal_global_47);
  softLinkIOSurfaceUnlock_449 = (uint64_t (*)())dlsym((void *)IOSurfaceLibrary_sLib_456, "IOSurfaceUnlock");
  return ((uint64_t (*)(uint64_t, uint64_t, uint64_t))softLinkIOSurfaceUnlock_449)(a1, a2, a3);
}

uint64_t initIOSurfaceGetBaseAddress_460(uint64_t a1)
{
  if (IOSurfaceLibrary_sOnce_455 != -1)
    dispatch_once(&IOSurfaceLibrary_sOnce_455, &__block_literal_global_47);
  softLinkIOSurfaceGetBaseAddress_448[0] = (uint64_t (*)())dlsym((void *)IOSurfaceLibrary_sLib_456, "IOSurfaceGetBaseAddress");
  return ((uint64_t (*)(uint64_t))softLinkIOSurfaceGetBaseAddress_448[0])(a1);
}

uint64_t initIOSurfaceLock_462(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (IOSurfaceLibrary_sOnce_455 != -1)
    dispatch_once(&IOSurfaceLibrary_sOnce_455, &__block_literal_global_47);
  softLinkIOSurfaceLock_447[0] = (uint64_t (*)())dlsym((void *)IOSurfaceLibrary_sLib_456, "IOSurfaceLock");
  return ((uint64_t (*)(uint64_t, uint64_t, uint64_t))softLinkIOSurfaceLock_447[0])(a1, a2, a3);
}

uint64_t initFigAspenCreateJPEGFromIOSurface(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (CelestialLibrary_sOnce != -1)
    dispatch_once(&CelestialLibrary_sOnce, &__block_literal_global_42);
  softLinkFigAspenCreateJPEGFromIOSurface[0] = (uint64_t (*)())dlsym((void *)CelestialLibrary_sLib, "FigAspenCreateJPEGFromIOSurface");
  return ((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))softLinkFigAspenCreateJPEGFromIOSurface[0])(a1, a2, a3, a4);
}

uint64_t initCVPixelBufferGetIOSurface(uint64_t a1)
{
  if (CoreVideoLibrary_sOnce != -1)
    dispatch_once(&CoreVideoLibrary_sOnce, &__block_literal_global_52);
  softLinkCVPixelBufferGetIOSurface[0] = (uint64_t (*)())dlsym((void *)CoreVideoLibrary_sLib, "CVPixelBufferGetIOSurface");
  return ((uint64_t (*)(uint64_t))softLinkCVPixelBufferGetIOSurface[0])(a1);
}

uint64_t initVTPixelTransferSessionTransferImage(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (VideoToolboxLibrary_sOnce != -1)
    dispatch_once(&VideoToolboxLibrary_sOnce, &__block_literal_global_56);
  softLinkVTPixelTransferSessionTransferImage[0] = (uint64_t (*)())dlsym((void *)VideoToolboxLibrary_sLib, "VTPixelTransferSessionTransferImage");
  return ((uint64_t (*)(uint64_t, uint64_t, uint64_t))softLinkVTPixelTransferSessionTransferImage[0])(a1, a2, a3);
}

uint64_t initFigCreateIOSurfaceBackedCVPixelBuffer(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (VideoToolboxLibrary_sOnce != -1)
    dispatch_once(&VideoToolboxLibrary_sOnce, &__block_literal_global_56);
  softLinkFigCreateIOSurfaceBackedCVPixelBuffer[0] = (uint64_t (*)())dlsym((void *)VideoToolboxLibrary_sLib, "FigCreateIOSurfaceBackedCVPixelBuffer");
  return ((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))softLinkFigCreateIOSurfaceBackedCVPixelBuffer[0])(a1, a2, a3, a4);
}

uint64_t initVTPixelTransferSessionCreate(uint64_t a1, uint64_t a2)
{
  if (VideoToolboxLibrary_sOnce != -1)
    dispatch_once(&VideoToolboxLibrary_sOnce, &__block_literal_global_56);
  softLinkVTPixelTransferSessionCreate[0] = (uint64_t (*)())dlsym((void *)VideoToolboxLibrary_sLib, "VTPixelTransferSessionCreate");
  return ((uint64_t (*)(uint64_t, uint64_t))softLinkVTPixelTransferSessionCreate[0])(a1, a2);
}

uint64_t initCVPixelBufferCreateWithIOSurface(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (CoreVideoLibrary_sOnce != -1)
    dispatch_once(&CoreVideoLibrary_sOnce, &__block_literal_global_52);
  softLinkCVPixelBufferCreateWithIOSurface[0] = (uint64_t (*)())dlsym((void *)CoreVideoLibrary_sLib, "CVPixelBufferCreateWithIOSurface");
  return ((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))softLinkCVPixelBufferCreateWithIOSurface[0])(a1, a2, a3, a4);
}

uint64_t initIOSurfaceGetHeight(uint64_t a1)
{
  if (IOSurfaceLibrary_sOnce_455 != -1)
    dispatch_once(&IOSurfaceLibrary_sOnce_455, &__block_literal_global_47);
  softLinkIOSurfaceGetHeight[0] = (uint64_t (*)())dlsym((void *)IOSurfaceLibrary_sLib_456, "IOSurfaceGetHeight");
  return ((uint64_t (*)(uint64_t))softLinkIOSurfaceGetHeight[0])(a1);
}

uint64_t initIOSurfaceGetWidth(uint64_t a1)
{
  if (IOSurfaceLibrary_sOnce_455 != -1)
    dispatch_once(&IOSurfaceLibrary_sOnce_455, &__block_literal_global_47);
  softLinkIOSurfaceGetWidth[0] = (uint64_t (*)())dlsym((void *)IOSurfaceLibrary_sLib_456, "IOSurfaceGetWidth");
  return ((uint64_t (*)(uint64_t))softLinkIOSurfaceGetWidth[0])(a1);
}

uint64_t initFigCreateIOSurfaceFromJPEG(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (CelestialLibrary_sOnce != -1)
    dispatch_once(&CelestialLibrary_sOnce, &__block_literal_global_42);
  softLinkFigCreateIOSurfaceFromJPEG = (uint64_t (*)())dlsym((void *)CelestialLibrary_sLib, "FigCreateIOSurfaceFromJPEG");
  return ((uint64_t (*)(uint64_t, uint64_t, uint64_t))softLinkFigCreateIOSurfaceFromJPEG)(a1, a2, a3);
}

uint64_t chacha20_all_64x64(int32x4_t *a1, uint64_t *a2, uint64_t a3, int8x16_t *a4, unint64_t a5, int8x16_t *a6)
{
  int32x4_t v6;
  int32x4_t v7;
  uint64_t v8;
  int32x4_t v10[3];
  uint64_t v11;
  uint64_t v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  uint64_t v17;
  uint64_t v18;

  v18 = *MEMORY[0x1E0C80C00];
  v6 = *a1;
  v7 = a1[1];
  v10[0] = (int32x4_t)xmmword_18D51D3E0;
  v10[1] = v6;
  v10[2] = v7;
  v11 = a3;
  if (a2)
    v8 = *a2;
  else
    v8 = 0;
  v15 = 0uLL;
  v16 = 0uLL;
  v13 = 0uLL;
  v14 = 0uLL;
  v12 = v8;
  v17 = 0;
  _chacha20_xor(v10, a6, a4, a5);
  return memset_s(v10, 0x88uLL, 0, 0x88uLL);
}

int32x4_t *_chacha20_xor(int32x4_t *result, int8x16_t *a2, int8x16_t *a3, unint64_t a4)
{
  int32x4_t v4;
  int32x4_t v5;
  int32x4_t v6;
  uint64_t v7;
  unint64_t v8;
  int32x4_t v9;
  __int32 v10;
  __int32 v11;
  __int32 v12;
  __int32 v13;
  __int32 v14;
  __int32 v15;
  __int32 v16;
  __int32 v17;
  int v18;
  __int32 v19;
  int v20;
  uint64_t v21;
  int v22;
  int v23;
  int v24;
  int v25;
  int32x4_t v26;
  int32x4_t v27;
  int32x4_t v28;
  int32x4_t v29;
  int32x4_t v30;
  int32x4_t v31;
  int32x4_t v32;
  int32x4_t v33;
  __int32 v34;
  __int32 v35;
  int32x4_t v36;
  int32x4_t v37;
  int32x4_t v38;
  int32x4_t v39;
  int32x4_t v40;
  int32x4_t v41;
  int32x4_t v42;
  int32x4_t v43;
  int8x16_t v44;
  int32x4_t v45;
  int8x16_t v46;
  int32x4_t v47;
  int32x4_t v48;
  int32x4_t v49;
  int32x4_t v50;
  int32x4_t v51;
  int32x4_t v52;
  int32x4_t v53;
  int32x4_t v54;
  int8x16_t v55;
  int32x4_t v56;
  int8x16_t v57;
  int32x4_t v58;
  int32x4_t v59;
  int32x4_t v60;
  __int32 v61;
  int v62;
  unint64_t v63;
  int v64;
  int v65;
  int32x4_t v66;
  int v67;
  int v68;
  int v69;
  int v70;
  int v71;
  __int32 v72;
  int v73;
  int32x4_t v74;
  int v75;
  int v76;
  int32x4_t v77;
  int v78;
  int v79;
  int32x4_t v80;
  int v81;
  int v82;
  int v83;
  __int32 v84;
  int v85;
  int v86;
  int v87;
  int32x4_t v88;
  int v89;
  int v90;
  int8x16_t v91;
  int v92;
  int v93;
  int v94;
  int32x4_t v95;
  __int32 v96;
  int v97;
  int8x16_t v98;
  int v99;
  int v100;
  int32x4_t v101;
  int v102;
  int v103;
  int32x4_t v104;
  int32x4_t v105;
  int32x4_t v106;
  int32x4_t v107;
  int v108;
  int v109;
  int32x4_t v110;
  int v111;
  int32x4_t v112;
  int v113;
  int v114;
  int32x4_t v115;
  int8x16_t v116;
  int32x4_t v117;
  int8x16_t v118;
  int v119;
  int v120;
  int v121;
  int v122;
  int v123;
  int v124;
  int v125;
  int v126;
  int v127;
  int v128;
  int v129;
  int v130;
  int v131;
  BOOL v132;
  int32x4_t *v133;
  unint64_t v134;
  unint64_t v135;
  uint64_t v136;
  int32x4_t v137;
  int32x4_t v138;
  int32x4_t v139;
  int32x4_t v140;
  int32x4_t v141;
  int32x4_t v142;
  int32x4_t v143;
  int32x4_t v144;
  int32x4_t v145;
  int32x4_t v146;
  int32x4_t v147;
  int32x4_t v148;
  int8x16_t v149;
  int32x4_t v150;
  int8x16_t v151;
  int32x4_t v152;
  int32x4_t v153;
  int32x4_t v154;
  int32x4_t v155;
  int32x4_t v156;
  int32x4_t v157;
  int32x4_t v158;
  int32x4_t v159;
  int8x16_t v160;
  int32x4_t v161;
  int8x16_t v162;
  unint64_t v163;
  int32x4_t v164;
  uint64_t v165;
  int32x4_t v166;
  int32x4_t v167;
  int32x4_t v168;
  int32x4_t v169;
  int32x4_t v170;
  int32x4_t v171;
  int32x4_t v172;
  int32x4_t v173;
  int32x4_t v174;
  int32x4_t v175;
  int32x4_t v176;
  int8x16_t v177;
  int32x4_t v178;
  int8x16_t v179;
  int32x4_t v180;
  int32x4_t v181;
  int32x4_t v182;
  int32x4_t v183;
  int32x4_t v184;
  int32x4_t v185;
  int32x4_t v186;
  int32x4_t v187;
  int8x16_t v188;
  int32x4_t v189;
  int8x16_t v190;
  unint64_t v191;
  unint64_t v192;
  __int8 *v193;
  char *v194;
  __int8 *v195;
  char v196;
  char v197;
  char v198;
  _OWORD v200[4];
  uint64_t v201;

  v201 = *MEMORY[0x1E0C80C00];
  v5 = result[1];
  v4 = result[2];
  v6 = result[3];
  if (a4 >= 0xC0)
  {
    v7 = 0;
    v8 = a4 / 0xC0;
    do
    {
      v9 = vaddq_s32(v6, (int32x4_t)xmmword_18D51D3F0);
      v11 = result[1].i32[0];
      v10 = result[1].i32[1];
      v12 = result[1].i32[2];
      v13 = result[1].i32[3];
      v14 = result[2].i32[0];
      v15 = result[2].i32[1];
      v16 = result[2].i32[2];
      v17 = result[2].i32[3];
      v18 = 3 * v7 + 2;
      v19 = result[3].i32[1];
      v20 = result[3].i32[0] + v18;
      v21 = -10;
      v22 = 1634760805;
      v23 = 857760878;
      v24 = 2036477234;
      v25 = 1797285236;
      v26 = (int32x4_t)xmmword_18D51D3E0;
      v27 = v5;
      v28 = v4;
      v29 = v6;
      v30 = (int32x4_t)xmmword_18D51D3E0;
      v31 = v5;
      v32 = v4;
      v33 = v9;
      v35 = result[3].i32[2];
      v34 = result[3].i32[3];
      do
      {
        v36 = vaddq_s32(v26, v27);
        v37 = (int32x4_t)vrev32q_s16((int16x8_t)veorq_s8((int8x16_t)v36, (int8x16_t)v29));
        v38 = vaddq_s32(v28, v37);
        v39 = (int32x4_t)veorq_s8((int8x16_t)v38, (int8x16_t)v27);
        v40 = (int32x4_t)vorrq_s8((int8x16_t)vshlq_n_s32(v39, 0xCuLL), (int8x16_t)vshrq_n_u32((uint32x4_t)v39, 0x14uLL));
        v41 = vaddq_s32(v40, v36);
        v42 = (int32x4_t)veorq_s8((int8x16_t)v41, (int8x16_t)v37);
        v43 = (int32x4_t)vorrq_s8((int8x16_t)vshlq_n_s32(v42, 8uLL), (int8x16_t)vshrq_n_u32((uint32x4_t)v42, 0x18uLL));
        v44 = (int8x16_t)vaddq_s32(v43, v38);
        v45 = (int32x4_t)veorq_s8(v44, (int8x16_t)v40);
        v46 = vorrq_s8((int8x16_t)vshlq_n_s32(v45, 7uLL), (int8x16_t)vshrq_n_u32((uint32x4_t)v45, 0x19uLL));
        v47 = (int32x4_t)vextq_s8(v46, v46, 4uLL);
        v48 = vaddq_s32(v47, v41);
        v49 = (int32x4_t)vrev32q_s16((int16x8_t)veorq_s8((int8x16_t)v48, vextq_s8((int8x16_t)v43, (int8x16_t)v43, 0xCuLL)));
        v50 = vaddq_s32((int32x4_t)vextq_s8(v44, v44, 8uLL), v49);
        v51 = (int32x4_t)veorq_s8((int8x16_t)v50, (int8x16_t)v47);
        v52 = (int32x4_t)vorrq_s8((int8x16_t)vshlq_n_s32(v51, 0xCuLL), (int8x16_t)vshrq_n_u32((uint32x4_t)v51, 0x14uLL));
        v26 = vaddq_s32(v52, v48);
        v53 = (int32x4_t)veorq_s8((int8x16_t)v26, (int8x16_t)v49);
        v54 = (int32x4_t)vorrq_s8((int8x16_t)vshlq_n_s32(v53, 8uLL), (int8x16_t)vshrq_n_u32((uint32x4_t)v53, 0x18uLL));
        v55 = (int8x16_t)vaddq_s32(v54, v50);
        v56 = (int32x4_t)veorq_s8(v55, (int8x16_t)v52);
        v57 = vorrq_s8((int8x16_t)vshlq_n_s32(v56, 7uLL), (int8x16_t)vshrq_n_u32((uint32x4_t)v56, 0x19uLL));
        v27 = (int32x4_t)vextq_s8(v57, v57, 0xCuLL);
        v28 = (int32x4_t)vextq_s8(v55, v55, 8uLL);
        v29 = (int32x4_t)vextq_s8((int8x16_t)v54, (int8x16_t)v54, 4uLL);
        v58 = vaddq_s32(v30, v31);
        v59 = (int32x4_t)vrev32q_s16((int16x8_t)veorq_s8((int8x16_t)v58, (int8x16_t)v33));
        v60 = vaddq_s32(v32, v59);
        v61 = v22 + v11;
        v62 = (v22 + v11) ^ v20;
        HIDWORD(v63) = v62;
        LODWORD(v63) = v62;
        v64 = (v63 >> 16) + v14;
        v65 = v64 ^ v11;
        HIDWORD(v63) = v65;
        LODWORD(v63) = v65;
        v66 = (int32x4_t)veorq_s8((int8x16_t)v60, (int8x16_t)v31);
        v67 = (v63 >> 20) + v61;
        LODWORD(v63) = v67 ^ __ROR4__(v62, 16);
        v68 = v63;
        HIDWORD(v63) = v63;
        v69 = (v63 >> 24) + v64;
        LODWORD(v63) = v69 ^ __ROR4__(v65, 20);
        v70 = v63;
        HIDWORD(v63) = v63;
        v71 = v63 >> 25;
        v72 = v23 + v10;
        v73 = (v23 + v10) ^ v19;
        HIDWORD(v63) = v73;
        LODWORD(v63) = v73;
        v74 = (int32x4_t)vorrq_s8((int8x16_t)vshlq_n_s32(v66, 0xCuLL), (int8x16_t)vshrq_n_u32((uint32x4_t)v66, 0x14uLL));
        v75 = (v63 >> 16) + v15;
        v76 = v75 ^ v10;
        HIDWORD(v63) = v76;
        LODWORD(v63) = v76;
        v77 = vaddq_s32(v74, v58);
        v78 = (v63 >> 20) + v72;
        LODWORD(v63) = v78 ^ __ROR4__(v73, 16);
        v79 = v63;
        HIDWORD(v63) = v63;
        v80 = (int32x4_t)veorq_s8((int8x16_t)v77, (int8x16_t)v59);
        v81 = (v63 >> 24) + v75;
        LODWORD(v63) = v81 ^ __ROR4__(v76, 20);
        v82 = v63;
        HIDWORD(v63) = v63;
        v83 = v63 >> 25;
        v84 = v24 + v12;
        v85 = (v24 + v12) ^ v35;
        HIDWORD(v63) = v85;
        LODWORD(v63) = v85;
        v86 = (v63 >> 16) + v16;
        v87 = v86 ^ v12;
        HIDWORD(v63) = v87;
        LODWORD(v63) = v87;
        v88 = (int32x4_t)vorrq_s8((int8x16_t)vshlq_n_s32(v80, 8uLL), (int8x16_t)vshrq_n_u32((uint32x4_t)v80, 0x18uLL));
        v89 = (v63 >> 20) + v84;
        LODWORD(v63) = v89 ^ __ROR4__(v85, 16);
        v90 = v63;
        HIDWORD(v63) = v63;
        v91 = (int8x16_t)vaddq_s32(v88, v60);
        v92 = (v63 >> 24) + v86;
        LODWORD(v63) = v92 ^ __ROR4__(v87, 20);
        v93 = v63;
        HIDWORD(v63) = v63;
        v94 = v63 >> 25;
        v95 = (int32x4_t)veorq_s8(v91, (int8x16_t)v74);
        v96 = v25 + v13;
        v97 = v96 ^ v34;
        HIDWORD(v63) = v97;
        LODWORD(v63) = v97;
        v98 = vorrq_s8((int8x16_t)vshlq_n_s32(v95, 7uLL), (int8x16_t)vshrq_n_u32((uint32x4_t)v95, 0x19uLL));
        v99 = (v63 >> 16) + v17;
        v100 = v99 ^ v13;
        HIDWORD(v63) = v99 ^ v13;
        LODWORD(v63) = v99 ^ v13;
        v101 = (int32x4_t)vextq_s8(v98, v98, 4uLL);
        v102 = (v63 >> 20) + v96;
        v104 = vaddq_s32(v101, v77);
        v105 = (int32x4_t)vrev32q_s16((int16x8_t)veorq_s8((int8x16_t)v104, vextq_s8((int8x16_t)v88, (int8x16_t)v88, 0xCuLL)));
        LODWORD(v63) = v102 ^ __ROR4__(v97, 16);
        v103 = v63;
        HIDWORD(v63) = v63;
        v106 = vaddq_s32((int32x4_t)vextq_s8(v91, v91, 8uLL), v105);
        v107 = (int32x4_t)veorq_s8((int8x16_t)v106, (int8x16_t)v101);
        v108 = (v63 >> 24) + v99;
        v110 = (int32x4_t)vorrq_s8((int8x16_t)vshlq_n_s32(v107, 0xCuLL), (int8x16_t)vshrq_n_u32((uint32x4_t)v107, 0x14uLL));
        LODWORD(v63) = v108 ^ __ROR4__(v100, 20);
        v109 = v63;
        HIDWORD(v63) = v63;
        v111 = v63 >> 25;
        v30 = vaddq_s32(v110, v104);
        v112 = (int32x4_t)veorq_s8((int8x16_t)v30, (int8x16_t)v105);
        v113 = v83 + v67;
        v115 = (int32x4_t)vorrq_s8((int8x16_t)vshlq_n_s32(v112, 8uLL), (int8x16_t)vshrq_n_u32((uint32x4_t)v112, 0x18uLL));
        v116 = (int8x16_t)vaddq_s32(v115, v106);
        v117 = (int32x4_t)veorq_s8(v116, (int8x16_t)v110);
        LODWORD(v63) = v113 ^ __ROR4__(v103, 24);
        v114 = v63;
        HIDWORD(v63) = v63;
        v118 = vorrq_s8((int8x16_t)vshlq_n_s32(v117, 7uLL), (int8x16_t)vshrq_n_u32((uint32x4_t)v117, 0x19uLL));
        v119 = (v63 >> 16) + v92;
        v31 = (int32x4_t)vextq_s8(v118, v118, 0xCuLL);
        v32 = (int32x4_t)vextq_s8(v116, v116, 8uLL);
        LODWORD(v63) = v119 ^ __ROR4__(v82, 25);
        v120 = v63;
        HIDWORD(v63) = v63;
        v22 = (v63 >> 20) + v113;
        LODWORD(v63) = v22 ^ __ROR4__(v114, 16);
        HIDWORD(v63) = v63;
        v34 = v63 >> 24;
        v16 = v34 + v119;
        LODWORD(v63) = v16 ^ __ROR4__(v120, 20);
        HIDWORD(v63) = v63;
        v10 = v63 >> 25;
        LODWORD(v63) = (v94 + v78) ^ __ROR4__(v68, 24);
        v121 = v63;
        HIDWORD(v63) = v63;
        v122 = (v63 >> 16) + v108;
        LODWORD(v63) = v122 ^ __ROR4__(v93, 25);
        v123 = v63;
        HIDWORD(v63) = v63;
        v23 = (v63 >> 20) + v94 + v78;
        LODWORD(v63) = v23 ^ __ROR4__(v121, 16);
        HIDWORD(v63) = v63;
        v20 = v63 >> 24;
        v17 = v20 + v122;
        LODWORD(v63) = (v20 + v122) ^ __ROR4__(v123, 20);
        HIDWORD(v63) = v63;
        v12 = v63 >> 25;
        v124 = v111 + v89;
        LODWORD(v63) = (v111 + v89) ^ __ROR4__(v79, 24);
        v125 = v63;
        HIDWORD(v63) = v63;
        v126 = (v63 >> 16) + v69;
        LODWORD(v63) = v126 ^ __ROR4__(v109, 25);
        v127 = v63;
        HIDWORD(v63) = v63;
        v24 = (v63 >> 20) + v124;
        LODWORD(v63) = v24 ^ __ROR4__(v125, 16);
        HIDWORD(v63) = v63;
        v19 = v63 >> 24;
        v14 = v19 + v126;
        LODWORD(v63) = (v19 + v126) ^ __ROR4__(v127, 20);
        HIDWORD(v63) = v63;
        v13 = v63 >> 25;
        v128 = v71 + v102;
        LODWORD(v63) = v128 ^ __ROR4__(v90, 24);
        v129 = v63;
        HIDWORD(v63) = v63;
        v130 = (v63 >> 16) + v81;
        LODWORD(v63) = v130 ^ __ROR4__(v70, 25);
        v131 = v63;
        HIDWORD(v63) = v63;
        v25 = (v63 >> 20) + v128;
        LODWORD(v63) = v25 ^ __ROR4__(v129, 16);
        HIDWORD(v63) = v63;
        v35 = v63 >> 24;
        v33 = (int32x4_t)vextq_s8((int8x16_t)v115, (int8x16_t)v115, 4uLL);
        v15 = v35 + v130;
        LODWORD(v63) = (v35 + v130) ^ __ROR4__(v131, 20);
        HIDWORD(v63) = v63;
        v11 = v63 >> 25;
        v132 = __CFADD__(v21++, 1);
      }
      while (!v132);
      *a2 = veorq_s8(*a3, (int8x16_t)vaddq_s32(v26, (int32x4_t)xmmword_18D51D3E0));
      a2[1] = veorq_s8(a3[1], (int8x16_t)vaddq_s32(v27, v5));
      a2[2] = veorq_s8(a3[2], (int8x16_t)vaddq_s32(v28, v4));
      a2[3] = veorq_s8(a3[3], (int8x16_t)vaddq_s32(v29, v6));
      a2[4] = veorq_s8(a3[4], (int8x16_t)vaddq_s32(v30, (int32x4_t)xmmword_18D51D3E0));
      a2[5] = veorq_s8(a3[5], (int8x16_t)vaddq_s32(v31, v5));
      a2[6] = veorq_s8(a3[6], (int8x16_t)vaddq_s32(v32, v4));
      a2[7] = veorq_s8(a3[7], (int8x16_t)vaddq_s32(v33, v9));
      a2[8].i32[0] = a3[8].i32[0] ^ (v22 + 1634760805);
      a2[8].i32[1] = a3[8].i32[1] ^ (v23 + 857760878);
      a2[8].i32[2] = a3[8].i32[2] ^ (v24 + 2036477234);
      a2[8].i32[3] = a3[8].i32[3] ^ (v25 + 1797285236);
      a2[9].i32[0] = (result[1].i32[0] + v11) ^ a3[9].i32[0];
      a2[9].i32[1] = (result[1].i32[1] + v10) ^ a3[9].i32[1];
      a2[9].i32[2] = (result[1].i32[2] + v12) ^ a3[9].i32[2];
      a2[9].i32[3] = (result[1].i32[3] + v13) ^ a3[9].i32[3];
      a2[10].i32[0] = (result[2].i32[0] + v14) ^ a3[10].i32[0];
      a2[10].i32[1] = (result[2].i32[1] + v15) ^ a3[10].i32[1];
      a2[10].i32[2] = (result[2].i32[2] + v16) ^ a3[10].i32[2];
      a2[10].i32[3] = (result[2].i32[3] + v17) ^ a3[10].i32[3];
      a2[11].i32[0] = (v20 + v18 + result[3].i32[0]) ^ a3[11].i32[0];
      a2[11].i32[1] = (result[3].i32[1] + v19) ^ a3[11].i32[1];
      a2[11].i32[2] = (result[3].i32[2] + v35) ^ a3[11].i32[2];
      a2[11].i32[3] = (result[3].i32[3] + v34) ^ a3[11].i32[3];
      v6 = vaddq_s32(v6, (int32x4_t)xmmword_18D51D400);
      a3 += 12;
      a2 += 12;
      ++v7;
    }
    while (v7 != v8);
  }
  if (a4 % 0xC0 >= 0x40)
  {
    v134 = ((a4 % 0xC0) >> 6) - 1;
    v133 = (int32x4_t *)&off_18D51D000;
    do
    {
      v135 = v134;
      v136 = -10;
      v137 = (int32x4_t)xmmword_18D51D3E0;
      v138 = v5;
      v139 = v4;
      v140 = v6;
      do
      {
        v141 = vaddq_s32(v137, v138);
        v142 = (int32x4_t)vrev32q_s16((int16x8_t)veorq_s8((int8x16_t)v141, (int8x16_t)v140));
        v143 = vaddq_s32(v139, v142);
        v144 = (int32x4_t)veorq_s8((int8x16_t)v143, (int8x16_t)v138);
        v145 = (int32x4_t)vorrq_s8((int8x16_t)vshlq_n_s32(v144, 0xCuLL), (int8x16_t)vshrq_n_u32((uint32x4_t)v144, 0x14uLL));
        v146 = vaddq_s32(v145, v141);
        v147 = (int32x4_t)veorq_s8((int8x16_t)v146, (int8x16_t)v142);
        v148 = (int32x4_t)vorrq_s8((int8x16_t)vshlq_n_s32(v147, 8uLL), (int8x16_t)vshrq_n_u32((uint32x4_t)v147, 0x18uLL));
        v149 = (int8x16_t)vaddq_s32(v148, v143);
        v150 = (int32x4_t)veorq_s8(v149, (int8x16_t)v145);
        v151 = vorrq_s8((int8x16_t)vshlq_n_s32(v150, 7uLL), (int8x16_t)vshrq_n_u32((uint32x4_t)v150, 0x19uLL));
        v152 = (int32x4_t)vextq_s8(v151, v151, 4uLL);
        v153 = vaddq_s32(v152, v146);
        v154 = (int32x4_t)vrev32q_s16((int16x8_t)veorq_s8((int8x16_t)v153, vextq_s8((int8x16_t)v148, (int8x16_t)v148, 0xCuLL)));
        v155 = vaddq_s32((int32x4_t)vextq_s8(v149, v149, 8uLL), v154);
        v156 = (int32x4_t)veorq_s8((int8x16_t)v155, (int8x16_t)v152);
        v157 = (int32x4_t)vorrq_s8((int8x16_t)vshlq_n_s32(v156, 0xCuLL), (int8x16_t)vshrq_n_u32((uint32x4_t)v156, 0x14uLL));
        v137 = vaddq_s32(v157, v153);
        v158 = (int32x4_t)veorq_s8((int8x16_t)v137, (int8x16_t)v154);
        v159 = (int32x4_t)vorrq_s8((int8x16_t)vshlq_n_s32(v158, 8uLL), (int8x16_t)vshrq_n_u32((uint32x4_t)v158, 0x18uLL));
        v160 = (int8x16_t)vaddq_s32(v159, v155);
        v161 = (int32x4_t)veorq_s8(v160, (int8x16_t)v157);
        v162 = vorrq_s8((int8x16_t)vshlq_n_s32(v161, 7uLL), (int8x16_t)vshrq_n_u32((uint32x4_t)v161, 0x19uLL));
        v138 = (int32x4_t)vextq_s8(v162, v162, 0xCuLL);
        v139 = (int32x4_t)vextq_s8(v160, v160, 8uLL);
        v140 = (int32x4_t)vextq_s8((int8x16_t)v159, (int8x16_t)v159, 4uLL);
        v132 = __CFADD__(v136++, 1);
      }
      while (!v132);
      v134 = 0;
      *a2 = veorq_s8(*a3, (int8x16_t)vaddq_s32(v137, (int32x4_t)xmmword_18D51D3E0));
      a2[1] = veorq_s8(a3[1], (int8x16_t)vaddq_s32(v138, v5));
      a2[2] = veorq_s8(a3[2], (int8x16_t)vaddq_s32(v139, v4));
      a2[3] = veorq_s8(a3[3], (int8x16_t)vaddq_s32(v140, v6));
      v6 = vaddq_s32(v6, (int32x4_t)xmmword_18D51D3F0);
      a3 += 4;
      a2 += 4;
    }
    while (v135);
  }
  else
  {
    v133 = (int32x4_t *)&off_18D51D000;
  }
  v163 = a4 & 0x3F;
  if ((a4 & 0x3F) != 0)
  {
    v164 = v133[62];
    v165 = -10;
    v166 = v5;
    v167 = v4;
    v168 = v6;
    do
    {
      v169 = vaddq_s32(v164, v166);
      v170 = (int32x4_t)vrev32q_s16((int16x8_t)veorq_s8((int8x16_t)v169, (int8x16_t)v168));
      v171 = vaddq_s32(v167, v170);
      v172 = (int32x4_t)veorq_s8((int8x16_t)v171, (int8x16_t)v166);
      v173 = (int32x4_t)vorrq_s8((int8x16_t)vshlq_n_s32(v172, 0xCuLL), (int8x16_t)vshrq_n_u32((uint32x4_t)v172, 0x14uLL));
      v174 = vaddq_s32(v173, v169);
      v175 = (int32x4_t)veorq_s8((int8x16_t)v174, (int8x16_t)v170);
      v176 = (int32x4_t)vorrq_s8((int8x16_t)vshlq_n_s32(v175, 8uLL), (int8x16_t)vshrq_n_u32((uint32x4_t)v175, 0x18uLL));
      v177 = (int8x16_t)vaddq_s32(v176, v171);
      v178 = (int32x4_t)veorq_s8(v177, (int8x16_t)v173);
      v179 = vorrq_s8((int8x16_t)vshlq_n_s32(v178, 7uLL), (int8x16_t)vshrq_n_u32((uint32x4_t)v178, 0x19uLL));
      v180 = (int32x4_t)vextq_s8(v179, v179, 4uLL);
      v181 = vaddq_s32(v180, v174);
      v182 = (int32x4_t)vrev32q_s16((int16x8_t)veorq_s8((int8x16_t)v181, vextq_s8((int8x16_t)v176, (int8x16_t)v176, 0xCuLL)));
      v183 = vaddq_s32((int32x4_t)vextq_s8(v177, v177, 8uLL), v182);
      v184 = (int32x4_t)veorq_s8((int8x16_t)v183, (int8x16_t)v180);
      v185 = (int32x4_t)vorrq_s8((int8x16_t)vshlq_n_s32(v184, 0xCuLL), (int8x16_t)vshrq_n_u32((uint32x4_t)v184, 0x14uLL));
      v164 = vaddq_s32(v185, v181);
      v186 = (int32x4_t)veorq_s8((int8x16_t)v164, (int8x16_t)v182);
      v187 = (int32x4_t)vorrq_s8((int8x16_t)vshlq_n_s32(v186, 8uLL), (int8x16_t)vshrq_n_u32((uint32x4_t)v186, 0x18uLL));
      v188 = (int8x16_t)vaddq_s32(v187, v183);
      v189 = (int32x4_t)veorq_s8(v188, (int8x16_t)v185);
      v190 = vorrq_s8((int8x16_t)vshlq_n_s32(v189, 7uLL), (int8x16_t)vshrq_n_u32((uint32x4_t)v189, 0x19uLL));
      v166 = (int32x4_t)vextq_s8(v190, v190, 0xCuLL);
      v167 = (int32x4_t)vextq_s8(v188, v188, 8uLL);
      v168 = (int32x4_t)vextq_s8((int8x16_t)v187, (int8x16_t)v187, 4uLL);
      v132 = __CFADD__(v165++, 1);
    }
    while (!v132);
    if (v163 < 0x10)
    {
      v200[0] = vaddq_s32(v164, v133[62]);
    }
    else
    {
      *a2 = veorq_s8(*a3, (int8x16_t)vaddq_s32(v164, v133[62]));
      if (v163 < 0x20)
      {
        v200[1] = vaddq_s32(v166, v5);
      }
      else
      {
        a2[1] = veorq_s8(a3[1], (int8x16_t)vaddq_s32(v166, v5));
        if (v163 < 0x30)
        {
          v200[2] = vaddq_s32(v167, v4);
        }
        else
        {
          a2[2] = veorq_s8(a3[2], (int8x16_t)vaddq_s32(v167, v4));
          v200[3] = vaddq_s32(v168, v6);
        }
      }
    }
    v191 = a4 & 0x30;
    v192 = v163 - v191;
    if (v163 > v191)
    {
      v193 = &a2->i8[v191];
      v194 = (char *)v200 + v191;
      v195 = &a3->i8[v191];
      do
      {
        v197 = *v195++;
        v196 = v197;
        v198 = *v194++;
        *v193++ = v198 ^ v196;
        --v192;
      }
      while (v192);
    }
  }
  result[3].i64[0] = v6.i64[0];
  return result;
}

uint64_t chacha20_init_64x64(uint64_t result, _DWORD *a2, _DWORD *a3, uint64_t a4)
{
  int v4;

  *(_OWORD *)result = xmmword_18D51D3E0;
  *(_DWORD *)(result + 16) = *a2;
  *(_DWORD *)(result + 20) = a2[1];
  *(_DWORD *)(result + 24) = a2[2];
  *(_DWORD *)(result + 28) = a2[3];
  *(_DWORD *)(result + 32) = a2[4];
  *(_DWORD *)(result + 36) = a2[5];
  *(_DWORD *)(result + 40) = a2[6];
  *(_DWORD *)(result + 44) = a2[7];
  *(_QWORD *)(result + 48) = a4;
  if (a3)
  {
    *(_DWORD *)(result + 56) = *a3;
    v4 = a3[1];
  }
  else
  {
    v4 = 0;
    *(_DWORD *)(result + 56) = 0;
  }
  *(_DWORD *)(result + 60) = v4;
  *(_QWORD *)(result + 128) = 0;
  return result;
}

uint64_t chacha20_all_96x32(int32x4_t *a1, uint64_t *a2, int a3, int8x16_t *a4, unint64_t a5, int8x16_t *a6)
{
  int32x4_t v6;
  int32x4_t v7;
  uint64_t v8;
  int v9;
  int32x4_t v11[3];
  int v12;
  uint64_t v13;
  int v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  uint64_t v19;
  uint64_t v20;

  v20 = *MEMORY[0x1E0C80C00];
  v6 = *a1;
  v7 = a1[1];
  v11[0] = (int32x4_t)xmmword_18D51D3E0;
  v11[1] = v6;
  v11[2] = v7;
  v12 = a3;
  if (a2)
  {
    v8 = *a2;
    v9 = *((_DWORD *)a2 + 2);
  }
  else
  {
    v9 = 0;
    v8 = 0;
  }
  v17 = 0uLL;
  v18 = 0uLL;
  v15 = 0uLL;
  v16 = 0uLL;
  v13 = v8;
  v14 = v9;
  v19 = 0;
  _chacha20_xor(v11, a6, a4, a5);
  return memset_s(v11, 0x88uLL, 0, 0x88uLL);
}

int64_t chacha20_update(uint64_t a1, int8x16_t *a2, unint64_t a3, int8x16_t *a4)
{
  unint64_t v5;
  int8x16_t *v6;
  uint64_t v8;
  unint64_t v9;
  int8x16_t *v10;
  unint64_t v11;
  __int8 v12;
  uint64_t v13;
  int8x16_t *v14;
  uint64_t i;

  v5 = a3;
  v6 = a2;
  v8 = *(_QWORD *)(a1 + 128);
  if (v8)
  {
    if (64 - v8 >= a3)
      v9 = a3;
    else
      v9 = 64 - v8;
    if (v9)
    {
      v10 = a2;
      v11 = v9;
      do
      {
        v12 = v10->i8[0];
        v10 = (int8x16_t *)((char *)v10 + 1);
        v13 = v8 + 1;
        *(_BYTE *)(a1 + 64 + v8++) = v12;
        --v11;
      }
      while (v11);
    }
    else
    {
      v13 = *(_QWORD *)(a1 + 128);
    }
    v6 = (int8x16_t *)((char *)a2 + v9);
    v5 = a3 - v9;
    v14 = a4;
    if (v13 == 64)
    {
      _chacha20_xor((int32x4_t *)a1, a4, (int8x16_t *)(a1 + 64), 0x40uLL);
      v13 = 0;
      v14 = a4 + 4;
    }
    *(_QWORD *)(a1 + 128) = v13;
  }
  else
  {
    v14 = a4;
  }
  if (v5 >= 0x40)
  {
    _chacha20_xor((int32x4_t *)a1, v14, v6, v5 & 0xFFFFFFFFFFFFFFC0);
    v6 = (int8x16_t *)((char *)v6 + (v5 & 0xFFFFFFFFFFFFFFC0));
    v14 = (int8x16_t *)((char *)v14 + (v5 & 0xFFFFFFFFFFFFFFC0));
    v5 &= 0x3Fu;
  }
  if (v5)
  {
    for (i = 0; i != v5; ++i)
      *(_BYTE *)(a1 + 64 + i) = v6->i8[i];
    *(_QWORD *)(a1 + 128) = v5;
  }
  return (char *)v14 - (char *)a4;
}

uint64_t chacha20_final(void *__s, int8x16_t *a2)
{
  uint64_t v3;

  v3 = *((_QWORD *)__s + 16);
  if (v3)
    _chacha20_xor((int32x4_t *)__s, a2, (int8x16_t *)__s + 4, *((_QWORD *)__s + 16));
  memset_s(__s, 0x88uLL, 0, 0x88uLL);
  return v3;
}

uint64_t poly1305_init(uint64_t result, unsigned __int16 *a2)
{
  uint64_t v2;
  int v3;
  int v4;
  int v5;
  int v6;
  int v7;
  unsigned int v8;
  int v9;
  int v10;
  unsigned int v11;
  unint64_t v12;
  int v13;
  int v14;
  unint64_t v15;
  unsigned int v16;

  v2 = 0;
  v3 = *((unsigned __int8 *)a2 + 3);
  v4 = v3 << 24;
  v5 = (*((unsigned __int8 *)a2 + 6) << 16) | (*((unsigned __int8 *)a2 + 7) << 24);
  v6 = *((unsigned __int8 *)a2 + 8) | (*((unsigned __int8 *)a2 + 9) << 8);
  v7 = (*((unsigned __int8 *)a2 + 11) << 24) | (*((unsigned __int8 *)a2 + 10) << 16) | (*((unsigned __int8 *)a2 + 9) << 8);
  v8 = *((unsigned __int8 *)a2 + 12);
  v9 = *((unsigned __int8 *)a2 + 13);
  v10 = *((unsigned __int8 *)a2 + 14) << 8;
  v11 = (*a2 | (*((unsigned __int8 *)a2 + 2) << 16)) & 0xFCFFFFFF | ((v3 & 3) << 24);
  LOBYTE(v3) = *((_BYTE *)a2 + 15);
  HIDWORD(v12) = a2[2] | (*((unsigned __int8 *)a2 + 6) << 16);
  LODWORD(v12) = v4;
  v13 = (v12 >> 26) & 0x3FFFF03;
  *(_DWORD *)result = v11;
  *(_DWORD *)(result + 4) = v13;
  v14 = (__PAIR64__(v6, v5) >> 20) & 0x3FFC0FF;
  v15 = (__PAIR64__(v8, v7) >> 14) & 0x3F03FFF;
  *(_DWORD *)(result + 8) = v14;
  *(_DWORD *)(result + 12) = v15;
  v16 = v10 & 0xFFF0FFFF | ((v3 & 0xF) << 16);
  *(_DWORD *)(result + 16) = v16 | v9;
  *(_DWORD *)(result + 20) = 5 * v13;
  *(_DWORD *)(result + 24) = 5 * v14;
  *(_DWORD *)(result + 28) = 5 * v15;
  *(_DWORD *)(result + 32) = 5 * (v16 | v9);
  *(_QWORD *)(result + 72) = 0;
  *(_QWORD *)(result + 44) = 0;
  *(_QWORD *)(result + 36) = 0;
  *(_DWORD *)(result + 52) = 0;
  do
  {
    *(_BYTE *)(result + 80 + v2) = *((_BYTE *)a2 + v2 + 16);
    ++v2;
  }
  while (v2 != 16);
  return result;
}

unsigned int *poly1305_update(unsigned int *result, unsigned int *a2, unint64_t a3)
{
  unint64_t v3;
  unsigned int *v4;
  unsigned int *v5;
  uint64_t v6;
  unint64_t v7;
  unsigned int *v8;
  unsigned int *v9;
  unint64_t v10;
  char v11;
  uint64_t v12;
  uint64_t i;

  v3 = a3;
  v4 = a2;
  v5 = result;
  v6 = *((_QWORD *)result + 9);
  if (v6)
  {
    v7 = 16 - v6;
    if (16 - v6 >= a3)
      v7 = a3;
    if (v7)
    {
      v8 = result + 14;
      v9 = a2;
      v10 = v7;
      do
      {
        v11 = *(_BYTE *)v9;
        v9 = (unsigned int *)((char *)v9 + 1);
        *((_BYTE *)v8 + *((_QWORD *)result + 9)) = v11;
        v8 = (unsigned int *)((char *)v8 + 1);
        --v10;
      }
      while (v10);
      v6 = *((_QWORD *)result + 9);
    }
    v12 = v6 + v7;
    *((_QWORD *)result + 9) = v12;
    v3 = a3 - v7;
    v4 = (unsigned int *)((char *)a2 + v7);
    if (v12 == 16)
    {
      result = _poly1305_update(result, result + 14, 0x10uLL);
      *((_QWORD *)v5 + 9) = 0;
    }
  }
  if (v3 >= 0x10)
  {
    result = _poly1305_update(v5, v4, v3 & 0xFFFFFFFFFFFFFFF0);
    v4 = (unsigned int *)((char *)v4 + (v3 & 0xFFFFFFFFFFFFFFF0));
    v3 &= 0xFu;
  }
  if (v3)
  {
    for (i = 0; i != v3; ++i)
      *((_BYTE *)v5 + i + 56) = *((_BYTE *)v4 + i);
    *((_QWORD *)v5 + 9) = v3;
  }
  return result;
}

unsigned int *_poly1305_update(unsigned int *result, unsigned int *a2, unint64_t a3)
{
  unsigned int *v4;
  unsigned int v5;
  unsigned int v6;
  unsigned int v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unsigned int v13;
  unsigned int v14;
  unsigned int v15;
  unsigned int v16;
  unsigned int v17;
  unsigned int v18;
  unsigned int v19;
  unsigned int v20;
  unsigned int v21;
  unsigned int v22;
  unsigned int v23;
  unsigned int v24;
  unint64_t v25;
  unsigned int v26;
  unint64_t v27;
  int v28;
  unint64_t v29;
  unint64_t v30;
  unint64_t v31;
  unint64_t v32;
  unint64_t i;
  unint64_t v34;
  char *v35;
  unint64_t v36;
  unint64_t v37;
  unsigned int v38;
  unsigned int v39;
  unsigned __int16 v40;
  unsigned __int8 v41;
  unsigned __int8 v42;
  unsigned int v43;
  uint64_t v44;

  v4 = result;
  v44 = *MEMORY[0x1E0C80C00];
  if (a3 < 0x10)
    goto LABEL_5;
  v5 = result[9];
  v6 = result[10];
  v7 = result[11];
LABEL_3:
  v8 = *a2;
  v9 = a2[1];
  v10 = *((unsigned __int16 *)a2 + 4) | ((unint64_t)*((unsigned __int8 *)a2 + 10) << 16);
  v11 = v10 | ((unint64_t)*((unsigned __int8 *)a2 + 11) << 24);
  v12 = a2[3];
  a2 += 4;
  a3 -= 16;
  v13 = v5 + (v8 & 0x3FFFFFF);
  v14 = v6 + (((v8 | (unint64_t)(v9 << 32)) >> 26) & 0x3FFFFFF);
  v4[9] = v13;
  v4[10] = v14;
  v15 = v7 + (((v9 | (v10 << 32)) >> 20) & 0x3FFFFFF);
  v16 = v4[13];
  v17 = (((v11 | (v12 << 32)) >> 14) & 0x3FFFFFF) + v4[12];
  v4[11] = v15;
  v4[12] = v17;
  v18 = v16 + (v12 >> 8) + 0x1000000;
  for (v4[13] = v18; ; v18 = v4[13] + (v43 >> 8))
  {
    v19 = v4[1];
    v21 = v4[7];
    v20 = v4[8];
    v22 = v4[6];
    v24 = v4[3];
    v23 = v4[4];
    v25 = *v4 * (unint64_t)v13
        + v20 * (unint64_t)v14
        + v21 * (unint64_t)v15
        + v22 * (unint64_t)v17
        + v4[5] * (unint64_t)v18;
    v26 = v4[2];
    v27 = *v4 * (unint64_t)v18;
    v28 = v25 & 0x3FFFFFF;
    v29 = *v4 * (unint64_t)v14
        + v20 * (unint64_t)v15
        + v21 * (unint64_t)v17
        + v22 * (unint64_t)v18
        + v19 * (unint64_t)v13
        + (v25 >> 26);
    v6 = v29 & 0x3FFFFFF;
    result = (unsigned int *)(*v4 * (unint64_t)v15 + v20 * (unint64_t)v17);
    v30 = (unint64_t)result
        + v21 * (unint64_t)v18
        + v19 * (unint64_t)v14
        + v26 * (unint64_t)v13
        + (v29 >> 26);
    v7 = v30 & 0x3FFFFFF;
    v31 = *v4 * (unint64_t)v17
        + v20 * (unint64_t)v18
        + v19 * (unint64_t)v15
        + v26 * (unint64_t)v14
        + v24 * (unint64_t)v13
        + (v30 >> 26);
    v4[11] = v30 & 0x3FFFFFF;
    v4[12] = v31 & 0x3FFFFFF;
    v32 = v27
        + v19 * (unint64_t)v17
        + v26 * (unint64_t)v15
        + v24 * (unint64_t)v14
        + v23 * (unint64_t)v13
        + (v31 >> 26);
    v4[13] = v32 & 0x3FFFFFF;
    v5 = 5 * (v32 >> 26) + v28;
    v4[9] = v5;
    v4[10] = v6;
    if (a3 > 0xF)
      goto LABEL_3;
LABEL_5:
    if (!a3)
      break;
    for (i = 0; i != a3; ++i)
    {
      v34 = i;
      *((_BYTE *)&v38 + i) = *((_BYTE *)a2 + i);
    }
    *((_BYTE *)&v38 + a3) = 1;
    if (v34 <= 0xD)
    {
      v35 = (char *)&v38 + v34 + 2;
      v36 = 14 - a3;
      if (a3 > 0xE)
        v36 = 0;
      bzero(v35, v36 + 1);
    }
    a3 = 0;
    v37 = v40 | ((unint64_t)v41 << 16);
    v13 = v4[9] + (v38 & 0x3FFFFFF);
    v14 = v4[10] + (((v38 | ((unint64_t)v39 << 32)) >> 26) & 0x3FFFFFF);
    v15 = v4[11] + (((v39 | (v37 << 32)) >> 20) & 0x3FFFFFF);
    v17 = (((v37 | ((unint64_t)v42 << 24) | ((unint64_t)v43 << 32)) >> 14) & 0x3FFFFFF) + v4[12];
  }
  return result;
}

uint64_t poly1305_final(uint64_t a1, uint64_t a2)
{
  unint64_t v4;
  unsigned int v5;
  int v6;
  unsigned int v7;
  int v8;
  unsigned int v9;
  int v10;
  unsigned int v11;
  int v12;
  unsigned int v13;
  unsigned int v14;
  unsigned int v15;
  unsigned int v16;
  unsigned int v17;
  signed int v18;
  uint64_t result;
  int v20;
  unsigned int v21;
  unsigned int v22;
  unsigned int v23;
  int v24;
  int v25;
  int v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  unint64_t v30;
  unint64_t v31;
  unint64_t v32;
  unint64_t v33;

  v4 = *(_QWORD *)(a1 + 72);
  if (v4)
    _poly1305_update((unsigned int *)a1, (unsigned int *)(a1 + 56), v4);
  v5 = *(_DWORD *)(a1 + 36);
  v6 = v5 & 0x3FFFFFF;
  v7 = *(_DWORD *)(a1 + 40) + (v5 >> 26);
  v8 = v7 & 0x3FFFFFF;
  v9 = *(_DWORD *)(a1 + 44) + (v7 >> 26);
  v10 = v9 & 0x3FFFFFF;
  v11 = *(_DWORD *)(a1 + 48) + (v9 >> 26);
  v12 = v11 & 0x3FFFFFF;
  v13 = *(_DWORD *)(a1 + 52) + (v11 >> 26);
  v14 = 5 * (v13 >> 26) + v6;
  v15 = v8 + ((v14 + 5) >> 26);
  v16 = v10 + (v15 >> 26);
  v17 = v12 + (v16 >> 26);
  v18 = (v13 | 0xFC000000) + (v17 >> 26);
  result = (v18 >> 31) - 1;
  v20 = v14 & (v18 >> 31) | result & 0x3FFFFFF & (v14 + 5);
  v21 = v8 & (v18 >> 31) | result & 0x3FFFFFF & v15;
  *(_DWORD *)(a1 + 36) = v20;
  *(_DWORD *)(a1 + 40) = v21;
  v22 = v10 & (v18 >> 31) | result & 0x3FFFFFF & v16;
  v23 = v12 & (v18 >> 31) | result & 0x3FFFFFF & v17;
  *(_DWORD *)(a1 + 44) = v22;
  *(_DWORD *)(a1 + 48) = v23;
  v24 = result & v18 | v13 & (v18 >> 31) & 0x3FFFFFF;
  *(_DWORD *)(a1 + 52) = v24;
  v25 = v20 | (v21 << 26);
  v26 = *(_DWORD *)(a1 + 80);
  v27 = *(unsigned int *)(a1 + 84);
  v28 = (v21 >> 6) | (v22 << 20);
  v29 = ((v22 >> 12) | (v23 << 14)) + (unint64_t)*(unsigned int *)(a1 + 88);
  v30 = ((v23 >> 18) | (v24 << 8)) + (unint64_t)*(unsigned int *)(a1 + 92);
  *(_DWORD *)a2 = v25 + v26;
  v31 = v27 + __CFADD__(v25, v26) + v28;
  *(_WORD *)(a2 + 4) = v31;
  *(_BYTE *)(a2 + 6) = BYTE2(v31);
  *(_BYTE *)(a2 + 7) = BYTE3(v31);
  v32 = v29 + HIDWORD(v31);
  *(_WORD *)(a2 + 8) = v32;
  *(_BYTE *)(a2 + 10) = BYTE2(v32);
  *(_BYTE *)(a2 + 11) = BYTE3(v32);
  v33 = v30 + HIDWORD(v32);
  *(_WORD *)(a2 + 12) = v33;
  *(_BYTE *)(a2 + 14) = BYTE2(v33);
  *(_BYTE *)(a2 + 15) = BYTE3(v33);
  return result;
}

uint64_t poly1305(uint64_t a1, unsigned int *a2, unint64_t a3, unsigned __int16 *a4)
{
  _OWORD v8[6];
  uint64_t v9;

  v9 = *MEMORY[0x1E0C80C00];
  memset(v8, 0, sizeof(v8));
  poly1305_init((uint64_t)v8, a4);
  poly1305_update((unsigned int *)v8, a2, a3);
  return poly1305_final((uint64_t)v8, a1);
}

uint64_t chacha20_poly1305_init_64x64(int32x4_t *a1, _DWORD *a2, _DWORD *a3)
{
  uint64_t result;
  int8x16_t v5[4];
  uint64_t v6;

  v6 = *MEMORY[0x1E0C80C00];
  chacha20_init_64x64((uint64_t)a1, a2, a3, 0);
  _chacha20_xor(a1, v5, kZero64, 0x40uLL);
  result = poly1305_init((uint64_t)&a1[8].i64[1], (unsigned __int16 *)v5);
  a1[14].i64[1] = 0;
  a1[15].i64[0] = 0;
  a1[15].i8[8] = 0;
  return result;
}

uint64_t chacha20_poly1305_init_96x32(uint64_t a1, _DWORD *a2, _DWORD *a3)
{
  int v4;
  uint64_t result;
  int8x16_t v6[4];
  uint64_t v7;

  v7 = *MEMORY[0x1E0C80C00];
  *(_OWORD *)a1 = xmmword_18D51D3E0;
  *(_DWORD *)(a1 + 16) = *a2;
  *(_DWORD *)(a1 + 20) = a2[1];
  *(_DWORD *)(a1 + 24) = a2[2];
  *(_DWORD *)(a1 + 28) = a2[3];
  *(_DWORD *)(a1 + 32) = a2[4];
  *(_DWORD *)(a1 + 36) = a2[5];
  *(_DWORD *)(a1 + 40) = a2[6];
  *(_QWORD *)(a1 + 44) = a2[7];
  if (a3)
  {
    *(_DWORD *)(a1 + 52) = *a3;
    *(_DWORD *)(a1 + 56) = a3[1];
    v4 = a3[2];
  }
  else
  {
    v4 = 0;
    *(_DWORD *)(a1 + 52) = 0;
    *(_DWORD *)(a1 + 56) = 0;
  }
  *(_DWORD *)(a1 + 60) = v4;
  *(_QWORD *)(a1 + 128) = 0;
  _chacha20_xor((int32x4_t *)a1, v6, kZero64, 0x40uLL);
  result = poly1305_init(a1 + 136, (unsigned __int16 *)v6);
  *(_QWORD *)(a1 + 232) = 0;
  *(_QWORD *)(a1 + 240) = 0;
  *(_BYTE *)(a1 + 248) = 0;
  return result;
}

unsigned int *chacha20_poly1305_add_aad(uint64_t a1, unsigned int *a2, unint64_t a3)
{
  unsigned int *result;

  result = poly1305_update((unsigned int *)(a1 + 136), a2, a3);
  *(_QWORD *)(a1 + 232) += a3;
  return result;
}

unint64_t chacha20_poly1305_encrypt(uint64_t a1, int8x16_t *a2, unint64_t a3, int8x16_t *a4)
{
  unint64_t v8;

  if (!*(_BYTE *)(a1 + 248))
  {
    if ((*(_QWORD *)(a1 + 232) & 0xFLL) != 0)
      poly1305_update((unsigned int *)(a1 + 136), (unsigned int *)kZero64, 16 - (*(_QWORD *)(a1 + 232) & 0xFLL));
    *(_BYTE *)(a1 + 248) = 1;
  }
  v8 = chacha20_update(a1, a2, a3, a4);
  if (v8)
  {
    poly1305_update((unsigned int *)(a1 + 136), (unsigned int *)a4, v8);
    *(_QWORD *)(a1 + 240) += v8;
  }
  return v8;
}

int64_t chacha20_poly1305_decrypt(uint64_t a1, int8x16_t *a2, unint64_t a3, int8x16_t *a4)
{
  int64_t result;

  if (!*(_BYTE *)(a1 + 248))
  {
    if ((*(_QWORD *)(a1 + 232) & 0xFLL) != 0)
      poly1305_update((unsigned int *)(a1 + 136), (unsigned int *)kZero64, 16 - (*(_QWORD *)(a1 + 232) & 0xFLL));
    *(_BYTE *)(a1 + 248) = 1;
  }
  poly1305_update((unsigned int *)(a1 + 136), (unsigned int *)a2, a3);
  result = chacha20_update(a1, a2, a3, a4);
  *(_QWORD *)(a1 + 240) += result;
  return result;
}

unint64_t chacha20_poly1305_final(unsigned int *__s, int8x16_t *a2, uint64_t a3)
{
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unsigned int *v9;
  unsigned int v11;
  char v12;
  char v13;
  char v14;
  char v15;
  unint64_t v16;
  uint64_t v17;

  v17 = *MEMORY[0x1E0C80C00];
  if (!*((_BYTE *)__s + 248) && (*((_QWORD *)__s + 29) & 0xFLL) != 0)
    poly1305_update(__s + 34, (unsigned int *)kZero64, 16 - (*((_QWORD *)__s + 29) & 0xFLL));
  v6 = chacha20_final(__s, a2);
  if (v6)
  {
    poly1305_update(__s + 34, (unsigned int *)a2, v6);
    v7 = *((_QWORD *)__s + 30) + v6;
    *((_QWORD *)__s + 30) = v7;
  }
  else
  {
    v7 = *((_QWORD *)__s + 30);
  }
  if ((v7 & 0xF) != 0)
  {
    poly1305_update(__s + 34, (unsigned int *)kZero64, 16 - (v7 & 0xF));
    v7 = *((_QWORD *)__s + 30);
  }
  v8 = *((_QWORD *)__s + 29);
  LOWORD(v11) = v8;
  BYTE2(v11) = BYTE2(v8);
  HIBYTE(v11) = BYTE3(v8);
  v12 = BYTE4(v8);
  v13 = BYTE5(v8);
  v14 = BYTE6(v8);
  v15 = HIBYTE(v8);
  v16 = v7;
  v9 = __s + 34;
  poly1305_update(v9, &v11, 0x10uLL);
  poly1305_final((uint64_t)v9, a3);
  return v6;
}

uint64_t chacha20_poly1305_verify(unsigned int *__s, int8x16_t *a2, int8x16_t *a3, int *a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unsigned int *v12;
  int8x16_t v13;
  int v14;
  int8x16_t v16;
  uint64_t v17;

  v17 = *MEMORY[0x1E0C80C00];
  if (!*((_BYTE *)__s + 248) && (*((_QWORD *)__s + 29) & 0xFLL) != 0)
    poly1305_update(__s + 34, (unsigned int *)kZero64, 16 - (*((_QWORD *)__s + 29) & 0xFLL));
  v8 = chacha20_final(__s, a2);
  v9 = v8;
  v10 = *((_QWORD *)__s + 30);
  if (v8)
  {
    v10 += v8;
    *((_QWORD *)__s + 30) = v10;
  }
  if ((v10 & 0xF) != 0)
  {
    poly1305_update(__s + 34, (unsigned int *)kZero64, 16 - (v10 & 0xF));
    v10 = *((_QWORD *)__s + 30);
  }
  v11 = *((_QWORD *)__s + 29);
  v16.i64[0] = v11;
  v16.i64[1] = v10;
  v12 = __s + 34;
  poly1305_update(v12, (unsigned int *)&v16, 0x10uLL);
  poly1305_final((uint64_t)v12, (uint64_t)&v16);
  v13 = veorq_s8(*a3, v16);
  if (vorr_s8(*(int8x8_t *)v13.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v13, v13, 8uLL)))
    v14 = -6754;
  else
    v14 = 0;
  *a4 = v14;
  return v9;
}

uint64_t chacha20_poly1305_encrypt_all_64x64(_DWORD *a1, _DWORD *a2, unsigned int *a3, unint64_t a4, int8x16_t *a5, unint64_t a6, int8x16_t *a7, uint64_t a8)
{
  return _chacha20_poly1305_encrypt_all(a1, a2, 8, a3, a4, a5, a6, a7, a8);
}

uint64_t _chacha20_poly1305_encrypt_all(_DWORD *a1, _DWORD *a2, uint64_t a3, unsigned int *a4, unint64_t a5, int8x16_t *a6, unint64_t a7, int8x16_t *a8, uint64_t a9)
{
  int64_t v14;
  unsigned int v16;
  char v17;
  char v18;
  char v19;
  char v20;
  unint64_t v21;
  int32x4_t __s[16];
  uint64_t v23;

  v23 = *MEMORY[0x1E0C80C00];
  memset(__s, 0, sizeof(__s));
  if (a3 == 12)
  {
    chacha20_poly1305_init_96x32((uint64_t)__s, a1, a2);
  }
  else
  {
    if (a3 != 8)
      FatalErrorF((uint64_t)"Bad nonce (%zu). Must be 8 or 12.", (uint64_t)a1, a3, (uint64_t)a4, a5, (uint64_t)a6, a7, (uint64_t)a8, a3);
    chacha20_poly1305_init_64x64(__s, a1, a2);
  }
  v14 = chacha20_update((uint64_t)__s, a6, a7, a8);
  chacha20_final(__s, (int8x16_t *)((char *)a8 + v14));
  if (a5)
  {
    poly1305_update(&__s[8].u32[2], a4, a5);
    if ((a5 & 0xF) != 0)
      poly1305_update(&__s[8].u32[2], (unsigned int *)kZero64, 16 - (a5 & 0xF));
  }
  if (a7)
  {
    poly1305_update(&__s[8].u32[2], (unsigned int *)a8, a7);
    if ((a7 & 0xF) != 0)
      poly1305_update(&__s[8].u32[2], (unsigned int *)kZero64, 16 - (a7 & 0xF));
  }
  LOWORD(v16) = a5;
  BYTE2(v16) = BYTE2(a5);
  HIBYTE(v16) = BYTE3(a5);
  v17 = BYTE4(a5);
  v18 = BYTE5(a5);
  v19 = BYTE6(a5);
  v20 = HIBYTE(a5);
  v21 = a7;
  poly1305_update(&__s[8].u32[2], &v16, 0x10uLL);
  return poly1305_final((uint64_t)&__s[8].i64[1], a9);
}

uint64_t chacha20_poly1305_encrypt_all_96x32(_DWORD *a1, _DWORD *a2, unsigned int *a3, unint64_t a4, int8x16_t *a5, unint64_t a6, int8x16_t *a7, uint64_t a8)
{
  return _chacha20_poly1305_encrypt_all(a1, a2, 12, a3, a4, a5, a6, a7, a8);
}

uint64_t chacha20_poly1305_decrypt_all_64x64(_DWORD *a1, _DWORD *a2, unsigned int *a3, unint64_t a4, int8x16_t *a5, unint64_t a6, int8x16_t *a7, uint64_t a8)
{
  return _chacha20_poly1305_decrypt_all(a1, a2, 8, a3, a4, a5, a6, a7, a8, 16);
}

uint64_t _chacha20_poly1305_decrypt_all(_DWORD *a1, _DWORD *a2, uint64_t a3, unsigned int *a4, unint64_t a5, int8x16_t *a6, unint64_t a7, int8x16_t *a8, uint64_t a9, uint64_t a10)
{
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  int v23;
  int64_t v24;
  unsigned int v26;
  char v27;
  char v28;
  char v29;
  char v30;
  unint64_t v31;
  int32x4_t __s[16];
  uint64_t v33;

  v33 = *MEMORY[0x1E0C80C00];
  memset(__s, 0, sizeof(__s));
  if (a3 == 12)
  {
    chacha20_poly1305_init_96x32((uint64_t)__s, a1, a2);
  }
  else
  {
    if (a3 != 8)
      FatalErrorF((uint64_t)"Bad nonce (%zu). Must be 8 or 12.", (uint64_t)a1, a3, (uint64_t)a4, a5, (uint64_t)a6, a7, (uint64_t)a8, a3);
    chacha20_poly1305_init_64x64(__s, a1, a2);
  }
  if ((unint64_t)(a10 - 17) <= 0xFFFFFFFFFFFFFFEFLL)
    FatalErrorF((uint64_t)"Auth tag len (%zu) must be 1-16 bytes", v15, v16, v17, v18, v19, v20, v21, a10);
  if (a5)
  {
    poly1305_update(&__s[8].u32[2], a4, a5);
    if ((a5 & 0xF) != 0)
      poly1305_update(&__s[8].u32[2], (unsigned int *)kZero64, 16 - (a5 & 0xF));
  }
  if (a7)
  {
    poly1305_update(&__s[8].u32[2], (unsigned int *)a6, a7);
    if ((a7 & 0xF) != 0)
      poly1305_update(&__s[8].u32[2], (unsigned int *)kZero64, 16 - (a7 & 0xF));
  }
  LOWORD(v26) = a5;
  BYTE2(v26) = BYTE2(a5);
  HIBYTE(v26) = BYTE3(a5);
  v27 = BYTE4(a5);
  v28 = BYTE5(a5);
  v29 = BYTE6(a5);
  v30 = HIBYTE(a5);
  v31 = a7;
  poly1305_update(&__s[8].u32[2], &v26, 0x10uLL);
  poly1305_final((uint64_t)&__s[8].i64[1], (uint64_t)&v26);
  v22 = 0;
  v23 = 0;
  do
  {
    v23 |= *(unsigned __int8 *)(a9 + v22) ^ *((unsigned __int8 *)&v26 + v22);
    ++v22;
  }
  while (a10 != v22);
  if (v23)
    return 4294960542;
  v24 = chacha20_update((uint64_t)__s, a6, a7, a8);
  chacha20_final(__s, (int8x16_t *)((char *)a8 + v24));
  return 0;
}

uint64_t chacha20_poly1305_decrypt_all_64x64_ex(_DWORD *a1, _DWORD *a2, unsigned int *a3, unint64_t a4, int8x16_t *a5, unint64_t a6, int8x16_t *a7, uint64_t a8, uint64_t a9)
{
  return _chacha20_poly1305_decrypt_all(a1, a2, 8, a3, a4, a5, a6, a7, a8, a9);
}

uint64_t chacha20_poly1305_decrypt_all_96x32(_DWORD *a1, _DWORD *a2, unsigned int *a3, unint64_t a4, int8x16_t *a5, unint64_t a6, int8x16_t *a7, uint64_t a8)
{
  return _chacha20_poly1305_decrypt_all(a1, a2, 12, a3, a4, a5, a6, a7, a8, 16);
}

uint64_t chacha20_poly1305_decrypt_all_96x32_ex(_DWORD *a1, _DWORD *a2, unsigned int *a3, unint64_t a4, int8x16_t *a5, unint64_t a6, int8x16_t *a7, uint64_t a8, uint64_t a9)
{
  return _chacha20_poly1305_decrypt_all(a1, a2, 12, a3, a4, a5, a6, a7, a8, a9);
}

uint64_t CRC16_CCITT(uint64_t result, unsigned __int8 *a2, uint64_t a3)
{
  unsigned int v3;
  int v4;
  int v5;

  for (; a3; --a3)
  {
    v3 = bswap32(result);
    v4 = *a2++;
    v5 = ((v4 ^ BYTE2(v3)) >> 4) ^ v4 ^ HIWORD(v3);
    LODWORD(result) = (32 * v5) ^ (v5 << 12) ^ v5;
  }
  return (unsigned __int16)result;
}

uint64_t Parity32(unsigned int a1)
{
  unsigned int v1;
  unsigned int v2;

  v1 = a1 ^ (a1 >> 1) ^ ((a1 ^ (a1 >> 1)) >> 2);
  v2 = v1 ^ (v1 >> 4) ^ ((v1 ^ (v1 >> 4)) >> 8);
  return (v2 ^ HIWORD(v2)) & 1;
}

uint64_t CocoaTextViewAppendUTF8String(void *a1, uint64_t a2, uint64_t a3, int a4)
{
  id v7;
  id v8;
  uint64_t v9;
  void *v10;
  id v11;
  uint64_t v12;
  void *v13;
  id v14;
  uint64_t v15;
  _QWORD block[4];
  id v18;
  id v19;
  int v20;

  v7 = a1;
  if (CocoaTextViewAppendUTF8String_sOnce != -1)
    dispatch_once(&CocoaTextViewAppendUTF8String_sOnce, &__block_literal_global_533);
  v8 = objc_alloc(MEMORY[0x1E0CB3940]);
  if (a3 == -1)
    v9 = objc_msgSend(v8, "initWithUTF8String:", a2);
  else
    v9 = objc_msgSend(v8, "initWithBytes:length:encoding:", a2, a3, 4);
  v10 = (void *)v9;
  if (v9
    && (v11 = objc_alloc(MEMORY[0x1E0CB3498]),
        (v12 = objc_msgSend(v11, "initWithString:attributes:", v10, CocoaTextViewAppendUTF8String_sAttributes)) != 0))
  {
    v13 = (void *)v12;
    block[0] = MEMORY[0x1E0C809B0];
    block[1] = 3221225472;
    block[2] = __CocoaTextViewAppendUTF8String_block_invoke_2;
    block[3] = &unk_1E25DBE08;
    v20 = a4;
    v18 = v7;
    v19 = v13;
    v14 = v13;
    dispatch_async(MEMORY[0x1E0C80D38], block);

    v15 = 0;
  }
  else
  {
    v15 = 4294960596;
  }

  return v15;
}

id NSFontAttributeNameFunction()
{
  return (id)constantValNSFontAttributeName;
}

id initValNSFontAttributeName()
{
  id *v0;

  if (UIKitLibrary_sOnce != -1)
    dispatch_once(&UIKitLibrary_sOnce, &__block_literal_global_4);
  v0 = (id *)dlsym((void *)UIKitLibrary_sLib, "NSFontAttributeName");
  if (v0)
    objc_storeStrong((id *)&constantValNSFontAttributeName, *v0);
  getNSFontAttributeName[0] = (uint64_t (*)())NSFontAttributeNameFunction;
  return (id)constantValNSFontAttributeName;
}

id UIFontFunction()
{
  return (id)classUIFont;
}

Class initUIFont()
{
  Class result;

  if (UIKitLibrary_sOnce != -1)
    dispatch_once(&UIKitLibrary_sOnce, &__block_literal_global_4);
  result = objc_getClass("UIFont");
  classUIFont = (uint64_t)result;
  getUIFontClass[0] = (uint64_t (*)())UIFontFunction;
  return result;
}

char *CLIInit(int a1, char **a2)
{
  char *v2;
  char *result;
  uint64_t v4;

  gArgI = 0;
  gArgC = a1;
  gArgV = (uint64_t)a2;
  if (a1 < 1)
  {
    v2 = "?";
  }
  else
  {
    gArgI = 1;
    v2 = *a2;
  }
  gProgramPath = (uint64_t)v2;
  result = strrchr(v2, 47);
  if (result)
    v4 = (uint64_t)(result + 1);
  else
    v4 = (uint64_t)v2;
  gProgramName = v4;
  return result;
}

uint64_t CLIParse(uint64_t a1, int a2)
{
  int v2;
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  _DWORD *v6;
  int *v7;
  const char *v8;
  uint64_t i;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  unsigned int v13;
  uint64_t v14;
  uint64_t v15;
  unsigned int v16;
  uint64_t *v17;
  int v18;
  _BYTE *v19;
  char *v20;
  int v21;
  BOOL v22;
  uint64_t v23;
  const char *v24;
  char *v25;
  size_t v26;
  int v27;
  const char *v28;
  char v29;
  BOOL v30;
  uint64_t v31;
  int v32;
  uint64_t v33;
  int v34;
  uint64_t v35;
  int v36;
  BOOL v37;
  uint64_t v38;
  uint64_t v39;
  int v40;
  uint64_t v41;
  uint64_t v42;
  int v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  char *v47;
  const char **v48;
  uint64_t v49;
  unsigned __int8 **v50;
  const char **v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  _DWORD *v58;
  int v59;
  char v60;
  int v61;
  int v62;
  int v63;
  uint64_t v64;
  void (*v65)(void);
  unsigned int v67;
  int v68;
  FILE **v69;
  void (__cdecl *v70)(int);
  uint64_t v71;
  char *v72;
  const char *v73;
  uint64_t v74;
  size_t v75;
  char *v76;
  char *v77;
  uid_t v78;
  char *pw_dir;
  size_t v80;
  NSObject *v81;
  id v82;
  FILE **v83;
  int v84;
  dispatch_source_t v85;
  void *v86;
  dispatch_source_t v87;
  void *v88;
  void *v89;
  void *v90;
  uint64_t v91;
  void *v92;
  int v93;
  BOOL v94;
  NSObject *v95;
  void *v96;
  NSObject *v97;
  void *v98;
  NSObject *v99;
  void *v100;
  _DWORD *v101;
  FILE **v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  int v109;
  int v110;
  char v111;
  int v112;
  uint64_t v113;
  uint64_t v114;
  passwd *v115;
  passwd v116;
  char __dst[1024];
  uint64_t v118;

  v2 = a2;
  v3 = a1;
  v118 = *MEMORY[0x1E0C80C00];
  v4 = &ProximityLibrary_sLib;
  v5 = gRootOptions;
  v6 = &unk_1EE06A000;
  v7 = (int *)&unk_1EE06A000;
  if (gRootOptions)
    goto LABEL_22;
  gRootFlags = a2;
  v8 = (const char *)gProgramName;
  for (i = a1; *(_DWORD *)i != 3; i += 104)
  {
    if (!*(_DWORD *)i)
      goto LABEL_21;
LABEL_8:
    ;
  }
  if ((*(_BYTE *)(i + 48) & 0x80) == 0 || strcasecmp(*(const char **)(i + 8), v8))
    goto LABEL_8;
  v10 = malloc_type_malloc(8 * gArgC + 16, 0x50040EE9192B6uLL);
  if (v10)
  {
    v11 = (uint64_t)v10;
    v12 = gArgC;
    if (gArgC < 1)
    {
      v13 = 0;
    }
    else
    {
      *v10 = *(_QWORD *)gArgV;
      v13 = 1;
    }
    v10[v13] = gProgramName;
    if ((int)v13 >= (int)v12)
    {
      v16 = v13 + 1;
    }
    else
    {
      v14 = v13;
      do
      {
        v15 = v14++;
        v10[v15 + 1] = *(_QWORD *)(gArgV + 8 * v15);
      }
      while (v12 != v14);
      v16 = v15 + 2;
    }
    v10[v16] = 0;
    gArgI = (int)v12 > 0;
    gArgC = v16;
    gArgV = (uint64_t)v10;
    if (gArgVAlt)
      free((void *)gArgVAlt);
    gArgVAlt = v11;
  }
LABEL_21:
  gRootOptions = v3;
LABEL_22:
  gOptionPtr = 0;
  v17 = &ProximityLibrary_sLib;
  if ((gEndedOptions & 1) == 0)
  {
    v18 = gArgI;
    while (v18 < v6[43])
    {
      v19 = *(_BYTE **)(gArgV + 8 * v18);
      if (*v19 == 45
        && ((v20 = v19 + 1, v21 = v19[1], v19[1]) ? (v22 = (v21 - 48) > 9) : (v22 = 0),
            v22))
      {
        if (v21 == 45)
        {
          v24 = v19 + 2;
          if (!v19[2])
          {
            v7[42] = v18 + 1;
            *((_BYTE *)v17 + 1792) = 1;
            break;
          }
          v112 = v2;
          v25 = strchr(v19 + 2, 61);
          if (!v25)
            v25 = (char *)&v24[strlen(v19 + 2)];
          v113 = v5;
          v114 = v3;
          v26 = v25 - v24;
          if ((unint64_t)(v25 - v24) < 3)
          {
            v111 = 0;
            v28 = v19 + 2;
          }
          else
          {
            v27 = strncasecmp(v19 + 2, "no-", 3uLL);
            if (v27)
              v28 = v19 + 2;
            else
              v28 = v19 + 5;
            if (v27)
            {
              v29 = 0;
            }
            else
            {
              v26 = v25 - v24 - 3;
              v29 = 2;
            }
            v111 = v29;
          }
          v37 = 0;
          v38 = gRootOptions;
          v39 = v114;
          while (1)
          {
            v40 = *(_DWORD *)v39;
            if (*(_DWORD *)v39)
              break;
LABEL_71:
            if (v37)
            {
              fprintf((FILE *)*MEMORY[0x1E0C80C10], "error: unknown option '%s'.\n", v24);
              v45 = 129;
              v6 = (_DWORD *)&unk_1EE06A000;
              v7 = (_DWORD *)&unk_1EE06A000;
              v5 = v113;
              goto LABEL_113;
            }
            v44 = *(_QWORD *)(v39 + 80);
            v37 = v44 == 0;
            if (v44)
              v39 = *(_QWORD *)(v39 + 80);
            else
              v39 = v38;
          }
          v41 = v39;
          while (1)
          {
            if ((v40 - 6) <= 9)
            {
              v42 = *(_QWORD *)(v41 + 8);
              if (v42)
              {
                if (!strncasecmp(*(const char **)(v41 + 8), v28, v26) && !*(_BYTE *)(v42 + v26))
                  break;
              }
            }
            v43 = *(_DWORD *)(v41 + 104);
            v41 += 104;
            v40 = v43;
            if (!v43)
              goto LABEL_71;
          }
          if (*v25)
            gOptionPtr = (uint64_t)(v25 + 1);
          v23 = _CLIGetValue(v41, v111);
          v6 = (_DWORD *)&unk_1EE06A000;
          v7 = (_DWORD *)&unk_1EE06A000;
          v5 = v113;
          v3 = v114;
          v2 = v112;
          v4 = &ProximityLibrary_sLib;
          v17 = &ProximityLibrary_sLib;
          if ((_DWORD)v23)
            goto LABEL_106;
        }
        else
        {
          gOptionPtr = (uint64_t)(v19 + 1);
          while (2)
          {
            v30 = 0;
            v31 = v3;
            while (1)
            {
              v32 = *(_DWORD *)v31;
              if (*(_DWORD *)v31)
                break;
LABEL_53:
              if (v30)
              {
                fprintf((FILE *)*MEMORY[0x1E0C80C10], "error: unknown option '%c'.\n", *v20);
                goto LABEL_80;
              }
              v31 = *(_QWORD *)(v31 + 80);
              v30 = v31 == 0;
              if (!v31)
                v31 = v4[221];
            }
            v33 = v31;
            while ((v32 - 6) > 9 || *(_DWORD *)(v33 + 4) != *v20)
            {
              v34 = *(_DWORD *)(v33 + 104);
              v33 += 104;
              v32 = v34;
              if (!v34)
                goto LABEL_53;
            }
            v36 = v20[1];
            v35 = (uint64_t)(v20 + 1);
            if (!v36)
              v35 = 0;
            gOptionPtr = v35;
            v23 = _CLIGetValue(v33, 1);
            if ((_DWORD)v23)
              goto LABEL_106;
            v20 = (char *)gOptionPtr;
            if (gOptionPtr)
              continue;
            break;
          }
        }
      }
      else
      {
        if ((v2 & 1) == 0)
          break;
        v23 = _CLIReorderArg(*(_QWORD *)(gArgV + 8 * v18));
        if ((_DWORD)v23)
          goto LABEL_106;
      }
      v18 = v7[42] + 1;
      v7[42] = v18;
      if ((v17[224] & 1) != 0)
        break;
    }
  }
  _CLIReorderArg(0);
  if ((v2 & 2) != 0)
    goto LABEL_112;
  v46 = v7[42];
  if ((int)v46 >= v6[43])
  {
    if (_CLIFindOption((unsigned __int8 **)v3, 3, 0, 0))
    {
      v64 = *(_QWORD *)(v3 + 80);
      if (v64)
      {
        if (!*(_QWORD *)(v64 + 64))
        {
          _CLIHelp_PrintCommand(v64, 0, 0);
          goto LABEL_80;
        }
      }
      else if (!gCLIInteractiveMode)
      {
        _CLIHelp_PrintSummary(0);
        goto LABEL_80;
      }
    }
LABEL_112:
    v45 = 0;
    goto LABEL_113;
  }
  v47 = *(char **)(gArgV + 8 * v46);
  v48 = _CLIFindOption((unsigned __int8 **)v3, 3, 0, v47);
  if (!v48)
  {
    if (_CLIFindOption((unsigned __int8 **)v3, 3, 0, 0))
    {
      _CLIPrintCommandNotFound((uint64_t)v47, *(_QWORD *)(v3 + 80));
      goto LABEL_80;
    }
    goto LABEL_112;
  }
  v49 = (uint64_t)v48;
  gCLICurrentCommand = (uint64_t)v48;
  v48[10] = *(const char **)(v3 + 80);
  ++v7[42];
  v50 = (unsigned __int8 **)v48[9];
  if (!v50)
    goto LABEL_89;
  v51 = _CLIFindOption(v50, 3, 0, 0);
  *(_QWORD *)(*(_QWORD *)(v49 + 72) + 80) = v49;
  v23 = ((uint64_t (*)(void))CLIParse)();
  if ((_DWORD)v23)
    goto LABEL_106;
  if (v51)
  {
LABEL_90:
    v58 = *(_DWORD **)(v49 + 72);
    if (!v58 || !*v58)
    {
LABEL_108:
      gCLICurrentOption = v49;
      v65 = *(void (**)(void))(v49 + 64);
      if (v65)
        v65();
      v45 = 133;
      goto LABEL_113;
    }
    v59 = 0;
    v60 = 1;
    do
    {
      while ((v58[12] & 0x30) == 0x10)
      {
        v62 = _CLIHelp_PrintOptionName((uint64_t)v58, 0, v52, v53, v54, v55, v56, v57);
        v60 = 0;
        if (v62 > v59)
          v59 = v62;
        v63 = v58[26];
        v58 += 26;
        if (!v63)
          goto LABEL_161;
      }
      v61 = v58[26];
      v58 += 26;
    }
    while (v61);
    if ((v60 & 1) != 0)
      goto LABEL_108;
LABEL_161:
    v101 = *(_DWORD **)(v49 + 72);
    if (v101 && *v101)
    {
      v102 = (FILE **)MEMORY[0x1E0C80C10];
      v45 = 129;
      do
      {
        if ((v101[12] & 0x30) == 0x10)
        {
          fwrite("error: ", 7uLL, 1uLL, *v102);
          v109 = _CLIHelp_PrintOptionName((uint64_t)v101, *v102, v103, v104, v105, v106, v107, v108);
          fprintf(*v102, "%*s not specified\n", v59 - v109, "");
        }
        v110 = v101[26];
        v101 += 26;
      }
      while (v110);
      goto LABEL_113;
    }
LABEL_80:
    v45 = 129;
    goto LABEL_113;
  }
LABEL_89:
  v23 = CLIParse(v3, v2 | 3u);
  if (!(_DWORD)v23)
    goto LABEL_90;
LABEL_106:
  v45 = v23;
LABEL_113:
  if (!v5)
  {
    if ((_DWORD)v45 == 133)
      v67 = 0;
    else
      v67 = v45;
    if (!v67)
    {
      v68 = v7[42];
      if (v68 < v6[43])
      {
        v69 = (FILE **)MEMORY[0x1E0C80C10];
        do
        {
          fprintf(*v69, "warning: unused argument '%s'.\n", *(const char **)(gArgV + 8 * v68));
          v68 = v7[42] + 1;
          v7[42] = v68;
        }
        while (v68 < v6[43]);
      }
    }
    v45 = v67 == -6752 ? 0 : v67;
    if (!(_DWORD)v45)
    {
      if (gCLIInteractivePending)
      {
        v45 = 0;
        gCLIInteractivePending = 0;
        if (!gCLIInteractiveInputSource)
        {
          v70 = signal(2, (void (__cdecl *)(int))1);
          v71 = gProgramName;
          *(_QWORD *)var_rl_readline_name[0]() = v71;
          *(_QWORD *)var_rl_attempted_completion_function[0]() = _CLIInteractiveCompleter;
          __dst[0] = 0;
          v72 = getenv("HOME");
          if (v72)
          {
            v73 = v72;
            goto LABEL_130;
          }
          memset(&v116, 0, sizeof(v116));
          v74 = sysconf(71);
          if (v74 >= 1)
            v75 = v74;
          else
            v75 = 4096;
          v76 = (char *)malloc_type_malloc(v75, 0x96F5E23uLL);
          if (v76)
          {
            v77 = v76;
            v115 = 0;
            v78 = getuid();
            if (getpwuid_r(v78, &v116, v77, v75, &v115) || !v115 || (pw_dir = v115->pw_dir) == 0)
            {
              if (getuid())
                pw_dir = ".";
              else
                pw_dir = "/root";
            }
            strlcpy(__dst, pw_dir, 0x400uLL);
            free(v77);
          }
          else
          {
            if (getuid())
              v73 = ".";
            else
              v73 = "/root";
LABEL_130:
            strlcpy(__dst, v73, 0x400uLL);
          }
          v80 = strlen(__dst);
          snprintf(&__dst[v80], 1024 - v80, "/.%s_history", (const char *)gProgramName);
          ((void (*)(uint64_t))softLinkread_history[0])((uint64_t)__dst);
          v81 = MEMORY[0x1E0C80D38];
          v82 = MEMORY[0x1E0C80D38];
          v83 = (FILE **)var_rl_instream[0]();
          v84 = fileno(*v83);
          v85 = dispatch_source_create(MEMORY[0x1E0C80DB8], v84, 0, v81);
          v86 = (void *)gCLIInteractiveInputSource;
          gCLIInteractiveInputSource = (uint64_t)v85;

          if (gCLIInteractiveInputSource
            && (dispatch_source_set_event_handler_f((dispatch_source_t)gCLIInteractiveInputSource, (dispatch_function_t)_CLIInteractiveHandleInput), dispatch_resume((dispatch_object_t)gCLIInteractiveInputSource), v87 = dispatch_source_create(MEMORY[0x1E0C80DC0], 2uLL, 0, MEMORY[0x1E0C80D38]), v88 = (void *)gCLIInteractiveSigIntSignalSource, gCLIInteractiveSigIntSignalSource = (uint64_t)v87, v88, gCLIInteractiveSigIntSignalSource))
          {
            dispatch_source_set_event_handler_f((dispatch_source_t)gCLIInteractiveSigIntSignalSource, (dispatch_function_t)_CLIInteractiveHandleSigIntDirect);
            dispatch_resume((dispatch_object_t)gCLIInteractiveSigIntSignalSource);
            v45 = _CLIInteractiveReset();
            if (!(_DWORD)v45)
            {
              v89 = (void *)MEMORY[0x18D78EB2C]();
              objc_msgSend(MEMORY[0x1E0C99E58], "currentRunLoop");
              v90 = (void *)objc_claimAutoreleasedReturnValue();
              gCLIInteractiveMode = 1;
              v91 = *MEMORY[0x1E0C99748];
              do
              {
                objc_msgSend(MEMORY[0x1E0C99D68], "distantFuture");
                v92 = (void *)objc_claimAutoreleasedReturnValue();
                v93 = objc_msgSend(v90, "runMode:beforeDate:", v91, v92);

                if (v93)
                  v94 = gCLIInteractiveMode == 0;
                else
                  v94 = 1;
              }
              while (!v94);

              objc_autoreleasePoolPop(v89);
              softLinkrl_callback_handler_remove[0]();
              softLinkwrite_history((uint64_t)__dst);
              ((void (*)(uint64_t, uint64_t))softLinkhistory_truncate_file[0])((uint64_t)__dst, 512);
              v45 = 0;
            }
          }
          else
          {
            v45 = 4294960596;
          }
          if (v70 != (void (__cdecl *)(int))-1)
            signal(2, v70);
          if (gCLIInteractiveInputSource)
          {
            v95 = (id)gCLIInteractiveInputSource;
            dispatch_source_cancel(v95);
            v96 = (void *)gCLIInteractiveInputSource;
            gCLIInteractiveInputSource = 0;

          }
          if (gCLIInteractiveSigIntSignalSource)
          {
            v97 = (id)gCLIInteractiveSigIntSignalSource;
            dispatch_source_cancel(v97);
            v98 = (void *)gCLIInteractiveSigIntSignalSource;
            gCLIInteractiveSigIntSignalSource = 0;

          }
          if (gCLIInteractiveSigIntTimerSource)
          {
            v99 = (id)gCLIInteractiveSigIntTimerSource;
            dispatch_source_cancel(v99);
            v100 = (void *)gCLIInteractiveSigIntTimerSource;
            gCLIInteractiveSigIntTimerSource = 0;

          }
        }
      }
    }
  }
  return v45;
}

uint64_t _CLIReorderArg(uint64_t a1)
{
  _QWORD *v2;
  uint64_t result;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  if (a1)
  {
    v2 = (_QWORD *)gMutableArgV;
    if (gMutableArgV
      || (v2 = malloc_type_malloc(8 * gArgC + 8, 0x50040EE9192B6uLL), (gMutableArgV = (uint64_t)v2) != 0))
    {
      result = 0;
      v4 = gMutableArgC++;
      v2[v4] = a1;
    }
    else
    {
      return 130;
    }
  }
  else
  {
    v5 = gMutableArgC;
    if (gMutableArgC < 1)
    {
      return 0;
    }
    else
    {
      v6 = gArgC;
      v7 = gArgI;
      v8 = gMutableArgV;
      if (gArgI < gArgC)
      {
        do
          *(_QWORD *)(v8 + 8 * v5++) = *(_QWORD *)(gArgV + 8 * v7++);
        while (v6 != v7);
      }
      result = 0;
      *(_QWORD *)(v8 + 8 * (int)v5) = 0;
      gArgI = 0;
      gArgC = v5;
      gArgV = v8;
      gMutableArgC = 0;
    }
  }
  return result;
}

uint64_t _CLIGetValue(uint64_t a1, char a2)
{
  uint64_t v3;
  unsigned int v4;
  char v5;
  int v7;
  char v8;
  uint64_t result;
  unint64_t v10;
  const char *v11;
  char v12;
  int *v13;
  int v14;
  char v15;
  CFTypeRef *v16;
  char v17;
  CFStringRef v18;
  CFStringRef v19;
  char v20;
  const void **v21;
  uint64_t *v22;
  char *v23;
  char v24;
  char v25;
  uint64_t (*v26)(void);
  char v27;
  char v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  int v33;
  _QWORD *v34;
  CFTypeRef v35;
  const void *v36;
  char *cStr;
  char *__endptr;
  unsigned int v39;

  v3 = a1;
  v4 = *(_DWORD *)(a1 + 48);
  if ((a2 & 2) != 0)
  {
    if ((v4 & 4) != 0)
    {
      v12 = a2 & 0xFD;
      v11 = "can't be negated";
LABEL_22:
      _CLIOptionError(a1, v11, v12);
      return 129;
    }
    v5 = gOptionPtr;
    if (gOptionPtr)
    {
LABEL_19:
      v11 = "doesn't take a value";
LABEL_20:
      a1 = v3;
      v12 = a2;
      goto LABEL_22;
    }
  }
  else
  {
    v5 = gOptionPtr != 0;
    if ((a2 & 1) == 0 && gOptionPtr && (*(_DWORD *)(a1 + 48) & 1) != 0)
      goto LABEL_19;
  }
  v39 = 0;
  cStr = 0;
  __endptr = 0;
  v7 = *(_DWORD *)a1;
  switch(*(_DWORD *)a1)
  {
    case 6:
      v13 = *(int **)(a1 + 16);
      if ((a2 & 2) != 0)
      {
        v14 = 0;
      }
      else if (*v13 >= 1)
      {
        v14 = *v13 + 1;
      }
      else
      {
        v14 = 1;
      }
      *v13 = v14;
      goto LABEL_118;
    case 7:
      if ((a2 & 2) != 0)
        goto LABEL_86;
      if (((v4 >> 1) & 1) != 0)
        v15 = v5;
      else
        v15 = 1;
      if ((v15 & 1) != 0)
      {
        result = _CLIGetArg(a1, a2, *(_QWORD **)(a1 + 16));
        goto LABEL_117;
      }
      **(_QWORD **)(a1 + 16) = *(_QWORD *)(a1 + 32);
      goto LABEL_118;
    case 8:
      v16 = *(CFTypeRef **)(a1 + 16);
      if ((a2 & 2) != 0)
      {
        if (*v16)
        {
          CFRelease(*v16);
          *v16 = 0;
        }
        goto LABEL_108;
      }
      if (((v4 >> 1) & 1) != 0)
        v17 = v5;
      else
        v17 = 1;
      if ((v17 & 1) == 0)
      {
        v35 = *v16;
        v36 = *(const void **)(a1 + 32);
        if (v36)
          CFRetain(*(CFTypeRef *)(a1 + 32));
        *v16 = v36;
        if (v35)
          CFRelease(v35);
LABEL_108:
        v39 = 0;
        goto LABEL_116;
      }
      result = _CLIGetArg(a1, a2, &cStr);
      v39 = result;
      if ((_DWORD)result)
        return result;
      v18 = CFStringCreateWithCString(0, cStr, 0x8000100u);
      if (!v18)
        return 130;
      v19 = v18;
      if (*v16)
        CFRelease(*v16);
      *v16 = v19;
LABEL_116:
      result = v39;
LABEL_117:
      if (!(_DWORD)result)
      {
LABEL_118:
        result = 0;
        *(_DWORD *)(v3 + 48) |= 0x20u;
      }
      return result;
    case 9:
      if ((a2 & 2) != 0)
      {
        StringArray_Free(**(void ****)(a1 + 16), **(_QWORD **)(a1 + 24));
        v34 = *(_QWORD **)(v3 + 24);
        goto LABEL_97;
      }
      if (((v4 >> 1) & 1) != 0)
        v20 = v5;
      else
        v20 = 1;
      if ((v20 & 1) != 0)
      {
        result = _CLIGetArg(a1, a2, &cStr);
        if ((_DWORD)result)
          return result;
        v21 = *(const void ***)(v3 + 16);
        v22 = *(uint64_t **)(v3 + 24);
        v23 = cStr;
      }
      else
      {
        v21 = *(const void ***)(a1 + 16);
        v22 = *(uint64_t **)(v3 + 24);
        v23 = *(char **)(v3 + 32);
      }
      if (StringArray_Append(v21, v22, v23))
        return 130;
      goto LABEL_118;
    case 0xA:
      if ((a2 & 2) != 0)
      {
        **(_DWORD **)(a1 + 16) = 0;
        goto LABEL_118;
      }
      if (((v4 >> 1) & 1) != 0)
        v24 = v5;
      else
        v24 = 1;
      if ((v24 & 1) == 0)
      {
        **(_DWORD **)(a1 + 16) = *(_QWORD *)(a1 + 32);
        goto LABEL_118;
      }
      result = _CLIGetArg(a1, a2, &cStr);
      v39 = result;
      if ((_DWORD)result)
        return result;
      **(_DWORD **)(v3 + 16) = strtol(cStr, &__endptr, 0);
      if (*__endptr)
      {
        v11 = "expects an integer value";
        goto LABEL_20;
      }
      goto LABEL_116;
    case 0xB:
      gCLICurrentOption = a1;
      if ((a2 & 2) != 0)
      {
        v26 = *(uint64_t (**)(void))(a1 + 56);
      }
      else if ((v4 & 1) != 0 || (((v4 >> 1) & 1) == 0 ? (v25 = 1) : (v25 = v5), (v25 & 1) == 0))
      {
        v26 = *(uint64_t (**)(void))(a1 + 56);
      }
      else
      {
        result = _CLIGetArg(a1, a2, &cStr);
        if ((_DWORD)result)
          return result;
        v26 = *(uint64_t (**)(void))(v3 + 56);
      }
      result = v26();
      goto LABEL_117;
    case 0xC:
      if ((a2 & 2) != 0)
      {
LABEL_86:
        v34 = *(_QWORD **)(a1 + 16);
LABEL_97:
        *v34 = 0;
        goto LABEL_118;
      }
      if (((v4 >> 1) & 1) != 0)
        v27 = v5;
      else
        v27 = 1;
      if ((v27 & 1) == 0)
      {
        **(double **)(a1 + 16) = (double)*(uint64_t *)(a1 + 32);
        goto LABEL_118;
      }
      result = _CLIGetArg(a1, a2, &cStr);
      v39 = result;
      if ((_DWORD)result)
        return result;
      **(double **)(v3 + 16) = strtod(cStr, &__endptr);
      if (*__endptr)
      {
        v11 = "expects a numeric value";
        goto LABEL_20;
      }
      goto LABEL_116;
    case 0xD:
    case 0xE:
      if ((a2 & 2) != 0)
      {
        v10 = 0;
        if (v7 == 13)
          goto LABEL_90;
      }
      else
      {
        if (((v4 >> 1) & 1) != 0)
          v8 = v5;
        else
          v8 = 1;
        if ((v8 & 1) != 0)
        {
          result = _CLIGetArg(a1, a2, &cStr);
          v39 = result;
          if ((_DWORD)result)
            return result;
          v10 = CLIFlagsToValueEx(0, cStr, *(const char **)(v3 + 24), (int *)&v39);
          if (v39)
            return 129;
          v7 = *(_DWORD *)v3;
        }
        else
        {
          v10 = *(_QWORD *)(a1 + 32);
        }
        if (v7 == 13)
        {
          if (HIDWORD(v10))
          {
            fprintf((FILE *)*MEMORY[0x1E0C80C10], "error: flags out-of-range: 0x%llx\n", v10);
            return 129;
          }
LABEL_90:
          **(_DWORD **)(v3 + 16) = v10;
          goto LABEL_116;
        }
      }
      **(_QWORD **)(v3 + 16) = v10;
      goto LABEL_116;
    case 0xF:
      if ((a2 & 2) != 0)
      {
        v33 = 0;
      }
      else
      {
        if (((v4 >> 1) & 1) != 0)
          v28 = v5;
        else
          v28 = 1;
        if ((v28 & 1) != 0)
        {
          result = _CLIGetArg(a1, a2, &cStr);
          v39 = result;
          if ((_DWORD)result)
            return result;
          v33 = CLIArgNameValueParse(*(_QWORD *)(v3 + 40), cStr, (int *)&v39, *(const char ***)(v3 + 24), v29, v30, v31, v32);
          if (v39)
            return 129;
        }
        else
        {
          v33 = *(_DWORD *)(a1 + 32);
        }
      }
      **(_DWORD **)(v3 + 16) = v33;
      goto LABEL_116;
    default:
      fprintf((FILE *)*MEMORY[0x1E0C80C10], "BUG: unknown option type %d\n", *(_DWORD *)a1);
      return 128;
  }
}

const char **_CLIFindOption(unsigned __int8 **a1, int a2, char a3, char *a4)
{
  unsigned __int8 **v4;
  int v5;
  int v9;
  const char **v10;
  int v11;
  int v12;
  const char **v13;
  int v14;

  if (!a1)
    return 0;
  v4 = a1;
  v5 = *(_DWORD *)a1;
  if (!*(_DWORD *)a1)
    return 0;
  v9 = *(_DWORD *)a1;
  v10 = (const char **)a1;
  while (v9 != a2 && (a2 != 5 || (v9 - 6) > 9)
       || (a3 & 1) != 0 && ((_BYTE)v10[6] & 0x40) != 0
       || a4 && strcasecmp(v10[1], a4))
  {
    v11 = *((_DWORD *)v10 + 26);
    v10 += 13;
    v9 = v11;
    if (!v11)
    {
      if ((gRootFlags & 4) == 0)
      {
        v12 = 0;
        v10 = 0;
        do
        {
          if (v5 != a2 && (a2 != 5 || (v5 - 6) > 9)
            || (a3 & 1) != 0 && ((_BYTE)v4[6] & 0x40) != 0
            || a4 && stricmp_prefix(v4[1], (unsigned __int8 *)a4))
          {
            v13 = v10;
          }
          else
          {
            ++v12;
            v13 = (const char **)v4;
            if (v10)
              break;
          }
          v14 = *((_DWORD *)v4 + 26);
          v4 += 13;
          v5 = v14;
          v10 = v13;
        }
        while (v14);
        if (v12 == 1)
          return v10;
      }
      return 0;
    }
  }
  return v10;
}

const char **_CLIHelp_PrintCommand(uint64_t a1, int a2, int a3)
{
  uint64_t v4;
  const char **v5;
  uint64_t v6;
  FILE **v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  int *v14;
  const char **result;
  int v16;
  uint64_t v17;
  const char **i;
  int v19;
  int v20;
  unsigned __int8 **j;
  const char **v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;

  v4 = a1;
  if (!a2)
    goto LABEL_6;
  v5 = *(const char ***)(a1 + 72);
  if (!v5)
    goto LABEL_7;
  v6 = gArgI;
  if (gArgI >= gArgC)
  {
LABEL_6:
    v5 = 0;
    goto LABEL_7;
  }
  ++gArgI;
  v5 = _CLIFindOption((unsigned __int8 **)v5, 3, 0, *(char **)(gArgV + 8 * v6));
  if (!v5)
    return (const char **)fprintf((FILE *)*MEMORY[0x1E0C80C10], "error: unknown %s sub-command '%s'.\n");
  v5[10] = (const char *)v4;
LABEL_7:
  if (v5)
    v4 = (uint64_t)v5;
  v7 = (FILE **)MEMORY[0x1E0C80C20];
  fprintf((FILE *)*MEMORY[0x1E0C80C20], "\n%s\n", *(const char **)(v4 + 88));
  _CLIHelp_PrintUsageLine(v4);
  fputc(10, *v7);
  if (_CLIFindOption((unsigned __int8 **)gRootOptions, 5, 1, 0))
    _CLIHelp_PrintOptions((int *)gRootOptions, "Global options:", a3 | 3u, v8, v9, v10, v11, v12);
  v13 = *(_QWORD *)(v4 + 80);
  if (v13)
  {
    v14 = *(int **)(v13 + 72);
    if (v14)
      _CLIHelp_PrintOptions(v14, "Parent options:", a3 | 1u, v8, v9, v10, v11, v12);
  }
  result = *(const char ***)(v4 + 72);
  if (result)
  {
    _CLIHelp_PrintOptions((int *)result, "Options:", a3 | 1u, v8, v9, v10, v11, v12);
    v16 = 0;
    v17 = *(_QWORD *)(v4 + 72);
    for (i = (const char **)(v17 + 8); ; i += 13)
    {
      v19 = *((_DWORD *)i - 2);
      if (v19 == 3)
      {
        v20 = strlen(*i);
        if (v16 <= v20)
          v16 = v20;
      }
      else if (!v19)
      {
        while (1)
        {
          if (*(_DWORD *)v17 == 3)
          {
            if (!v19)
              fwrite("Commands:\n", 0xAuLL, 1uLL, *v7);
            fprintf(*v7, "%*s%-*s    %s\n", 4, "", v16, *(const char **)(v17 + 8), *(const char **)(v17 + 88));
            ++v19;
          }
          else if (!*(_DWORD *)v17)
          {
            for (j = *(unsigned __int8 ***)(v4 + 72); ; j = (unsigned __int8 **)(v22 + 13))
            {
              result = _CLIFindOption(j, 1, 0, 0);
              if (!result)
                break;
              v22 = result;
              fprintf(*v7, "%s\n", result[11]);
              FPrintF(*v7, "%1{text}", v23, v24, v25, v26, v27, v28, (uint64_t)v22[12]);
              fputc(10, *v7);
            }
            if (v19)
              result = (const char **)fprintf(*v7, "\nSee '%s help %s <command>' for more info about a command.\n\n", (const char *)gProgramName, *(const char **)(v4 + 8));
            goto LABEL_33;
          }
          v17 += 104;
        }
      }
    }
  }
LABEL_33:
  if (*(_QWORD *)(v4 + 96))
    return (const char **)fprintf(*v7, "%s\n");
  return result;
}

size_t _CLIHelp_PrintSummary(int a1)
{
  _BOOL4 v2;
  FILE **v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  size_t result;
  int v10;
  int v11;
  uint64_t i;
  int v13;
  _DWORD *v14;
  int v15;
  int v16;
  int v17;
  int v18;
  const char *v19;
  const char **v20;
  int v21;
  int v22;
  int v23;

  v2 = a1 == 0;
  _CLIHelp_PrintUsageLine(gRootOptions);
  v3 = (FILE **)MEMORY[0x1E0C80C20];
  fputc(10, (FILE *)*MEMORY[0x1E0C80C20]);
  result = _CLIHelp_PrintOptions((int *)gRootOptions, "Global options:", (4 * v2), v4, v5, v6, v7, v8);
  v10 = result;
  v11 = 0;
  for (i = gRootOptions; *(_DWORD *)i == 3; i += 104)
  {
    if (a1 || (*(_BYTE *)(i + 49) & 1) == 0)
    {
      result = strlen(*(const char **)(i + 8));
      if (v11 <= (int)result)
        v11 = result;
    }
LABEL_9:
    ;
  }
  if (*(_DWORD *)i)
    goto LABEL_9;
  v13 = *(_DWORD *)gRootOptions;
  v23 = v10;
  if (*(_DWORD *)gRootOptions)
  {
    v14 = (_DWORD *)(gRootOptions + 104);
    v15 = *(_DWORD *)gRootOptions;
    while (a1 || v15 != 3 || (*((_BYTE *)v14 - 55) & 1) == 0)
    {
      v16 = *v14;
      v14 += 26;
      v15 = v16;
      if (!v16)
        goto LABEL_16;
    }
    v17 = 0;
  }
  else
  {
LABEL_16:
    v17 = 1;
  }
  v18 = 0;
  v22 = v17;
  if (a1)
    v17 = 1;
  if (v17)
    v19 = "Commands";
  else
    v19 = "Commonly used commands";
  v20 = (const char **)(gRootOptions + 104);
  while (2)
  {
    if (v13 == 3)
    {
      if (a1 || (*((_BYTE *)v20 - 55) & 1) == 0)
      {
        if (!v18)
          fprintf(*v3, "%s:\n", v19);
        result = fprintf(*v3, "%*s%-*s    %s\n", 4, "", v11, *(v20 - 12), *(v20 - 2));
        ++v18;
      }
      goto LABEL_32;
    }
    if (v13)
    {
LABEL_32:
      v21 = *(_DWORD *)v20;
      v20 += 13;
      v13 = v21;
      continue;
    }
    break;
  }
  if (v23 | v18)
    result = fputc(10, *v3);
  if (!v22)
  {
    fprintf(*v3, "See '%s help' for a full list of commands.\n", (const char *)gProgramName);
    if (!v18)
      return fputc(10, *v3);
    return fprintf(*v3, "See '%s help <command>' for more info about a command.\n\n", (const char *)gProgramName);
  }
  if (v18)
    return fprintf(*v3, "See '%s help <command>' for more info about a command.\n\n", (const char *)gProgramName);
  return result;
}

uint64_t _CLIHelp_PrintOptionName(uint64_t a1, uint64_t (*a2)(unsigned __int8 *, int64_t, _QWORD), uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v10;
  uint64_t v11;
  int v12;
  int v13;
  _BOOL4 v14;
  const char *v15;
  BOOL v16;
  const char *v17;
  char *v18;
  const char *v19;
  uint64_t v21;

  if (*(_DWORD *)(a1 + 4))
  {
    v10 = FPrintF(a2, "-%c", a3, a4, a5, a6, a7, a8, *(unsigned int *)(a1 + 4));
    if (*(_QWORD *)(a1 + 8))
      v10 = FPrintF(a2, ", ", a3, a4, a5, a6, a7, a8, v21) + v10;
  }
  else
  {
    v10 = 0;
  }
  if (*(_DWORD *)a1 == 4)
  {
    v11 = 91;
    if ((*(_DWORD *)(a1 + 48) & 2) == 0)
      v11 = 60;
    v12 = FPrintF(a2, "%c%s%c", a3, a4, a5, a6, a7, a8, v11);
    return (v12 + v10);
  }
  if (*(_QWORD *)(a1 + 8))
    v10 = FPrintF(a2, "--%s", a3, a4, a5, a6, a7, a8, *(_QWORD *)(a1 + 8)) + v10;
  v13 = *(_DWORD *)(a1 + 48);
  if ((v13 & 1) == 0)
  {
    if ((v13 & 8) != 0)
    {
      v14 = 1;
      if ((v13 & 2) != 0)
        goto LABEL_14;
    }
    else
    {
      v14 = *(_QWORD *)(a1 + 40) == 0;
      if ((v13 & 2) != 0)
      {
LABEL_14:
        v15 = "[<%s>]";
        v16 = !v14;
        v17 = "[=<%s>]";
        if (!v16)
        {
          v15 = "[%s]";
          v17 = "[=%s]";
        }
        if (*(_QWORD *)(a1 + 8))
          v18 = (char *)v17;
        else
          v18 = (char *)v15;
        goto LABEL_23;
      }
    }
    if (v14)
      v18 = " %s";
    else
      v18 = " <%s>";
LABEL_23:
    v19 = *(const char **)(a1 + 40);
    if (!v19)
      v19 = "...";
    v12 = FPrintF(a2, (unsigned __int8 *)v18, a3, a4, a5, a6, a7, a8, (uint64_t)v19);
    return (v12 + v10);
  }
  return v10;
}

uint64_t _CLIPrintCommandNotFound(uint64_t a1, uint64_t a2)
{
  FILE *v2;

  v2 = (FILE *)*MEMORY[0x1E0C80C10];
  if (a2)
    return fprintf(v2, "error: unknown %s command '%s'. See '%s help %s' for a list of commands.\n");
  else
    return fprintf(v2, "error: unknown command '%s'. See '%s help' for a list of commands.\n");
}

void *initValrl_readline_name()
{
  void *result;

  if (editLibrary_sOnce != -1)
    dispatch_once(&editLibrary_sOnce, &__block_literal_global_553);
  result = dlsym((void *)editLibrary_sLib, "rl_readline_name");
  variableValrl_readline_name = (uint64_t)result;
  var_rl_readline_name[0] = rl_readline_nameFunction;
  return result;
}

uint64_t rl_readline_nameFunction()
{
  return variableValrl_readline_name;
}

void *initValrl_attempted_completion_function()
{
  void *result;

  if (editLibrary_sOnce != -1)
    dispatch_once(&editLibrary_sOnce, &__block_literal_global_553);
  result = dlsym((void *)editLibrary_sLib, "rl_attempted_completion_function");
  variableValrl_attempted_completion_function = (uint64_t)result;
  var_rl_attempted_completion_function[0] = rl_attempted_completion_functionFunction;
  return result;
}

uint64_t rl_attempted_completion_functionFunction()
{
  return variableValrl_attempted_completion_function;
}

uint64_t _CLIInteractiveCompleter(uint64_t a1, int a2)
{
  if (a2)
    return 0;
  else
    return ((uint64_t (*)(uint64_t, uint64_t))softLinkrl_completion_matches[0])(a1, (uint64_t)_CLIInteractiveGenerator);
}

void *initValrl_instream()
{
  void *result;

  if (editLibrary_sOnce != -1)
    dispatch_once(&editLibrary_sOnce, &__block_literal_global_553);
  result = dlsym((void *)editLibrary_sLib, "rl_instream");
  variableValrl_instream = (uint64_t)result;
  var_rl_instream[0] = rl_instreamFunction;
  return result;
}

uint64_t rl_instreamFunction()
{
  return variableValrl_instream;
}

uint64_t _CLIInteractiveHandleInput()
{
  gCLIInteractiveSigIntCount = 0;
  return softLinkrl_callback_read_char[0]();
}

void _CLIInteractiveHandleSigIntDirect()
{
  dispatch_source_t v0;
  void *v1;
  NSObject *v2;
  dispatch_time_t v3;

  if (!gCLIInteractiveSigIntTimerSource)
  {
    v0 = dispatch_source_create(MEMORY[0x1E0C80DD0], 0, 0, MEMORY[0x1E0C80D38]);
    v1 = (void *)gCLIInteractiveSigIntTimerSource;
    gCLIInteractiveSigIntTimerSource = (uint64_t)v0;

    if (gCLIInteractiveSigIntTimerSource)
    {
      dispatch_source_set_event_handler_f((dispatch_source_t)gCLIInteractiveSigIntTimerSource, (dispatch_function_t)_CLIInteractiveHandleSigIntDeferred);
      v2 = gCLIInteractiveSigIntTimerSource;
      v3 = dispatch_time(0, 50000000);
      dispatch_source_set_timer(v2, v3, 0xFFFFFFFFFFFFFFFFLL, 0x989680uLL);
      dispatch_resume((dispatch_object_t)gCLIInteractiveSigIntTimerSource);
    }
    else
    {
      _CLIInteractiveHandleSigIntDeferred();
    }
  }
}

uint64_t _CLIInteractiveReset(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  void *v14;
  uint64_t v16;
  void *v17;

  FPrintF((uint64_t (*)(unsigned __int8 *, int64_t, _QWORD))*MEMORY[0x1E0C80C20], "\r", a3, a4, a5, a6, a7, a8, v16);
  if (gCLIInteractivePrompt)
  {
    softLinkrl_callback_handler_remove[0]();
    ((void (*)(uint64_t, uint64_t))softLinkrl_callback_handler_install[0])(gCLIInteractivePrompt, (uint64_t)_CLIInteractiveHandleLine);
  }
  else
  {
    v17 = 0;
    ASPrintF(&v17, (uint64_t)"%s> ", v8, v9, v10, v11, v12, v13, gProgramName);
    v14 = v17;
    if (!v17)
    {
      gCLIInteractiveMode = 0;
      return 4294960568;
    }
    softLinkrl_callback_handler_remove[0]();
    ((void (*)(uint64_t, uint64_t))softLinkrl_callback_handler_install[0])((uint64_t)v14, (uint64_t)_CLIInteractiveHandleLine);
    free(v14);
  }
  return 0;
}

uint64_t inithistory_truncate_file(uint64_t a1, uint64_t a2)
{
  if (editLibrary_sOnce != -1)
    dispatch_once(&editLibrary_sOnce, &__block_literal_global_553);
  softLinkhistory_truncate_file[0] = (uint64_t (*)())dlsym((void *)editLibrary_sLib, "history_truncate_file");
  return ((uint64_t (*)(uint64_t, uint64_t))softLinkhistory_truncate_file[0])(a1, a2);
}

void *__editLibrary_block_invoke()
{
  void *result;

  result = dlopen("/usr/lib/libedit.dylib", 2);
  editLibrary_sLib = (uint64_t)result;
  return result;
}

uint64_t initwrite_history(uint64_t a1)
{
  if (editLibrary_sOnce != -1)
    dispatch_once(&editLibrary_sOnce, &__block_literal_global_553);
  softLinkwrite_history = (uint64_t (*)())dlsym((void *)editLibrary_sLib, "write_history");
  return ((uint64_t (*)(uint64_t))softLinkwrite_history)(a1);
}

uint64_t initrl_callback_handler_remove()
{
  if (editLibrary_sOnce != -1)
    dispatch_once(&editLibrary_sOnce, &__block_literal_global_553);
  softLinkrl_callback_handler_remove[0] = (uint64_t (*)())dlsym((void *)editLibrary_sLib, "rl_callback_handler_remove");
  return softLinkrl_callback_handler_remove[0]();
}

void _CLIInteractiveHandleLine(void *a1)
{
  int v2;
  char *v3;
  int v4;
  int v5;
  FILE **v6;
  _DWORD *v7;
  const char **v8;
  int v9;
  _DWORD *v10;
  const char **v11;
  char *v12;
  void **v13;
  int v14;
  void *v15;
  int v16;
  char *__s2;

  __s2 = 0;
  v16 = 0;
  v15 = 0;
  if (!a1)
    goto LABEL_20;
  v2 = 0;
  if (!_CLIInteractiveLineHook((uint64_t)a1, 0))
  {
    v4 = ((uint64_t (*)(uint64_t, uint64_t))softLinkhistory_expand[0])((uint64_t)a1, (uint64_t)&__s2);
    if (v4 && *__s2)
      fprintf((FILE *)*MEMORY[0x1E0C80C10], "%s\n", __s2);
    v2 = 0;
    if ((v4 & 0x80000000) == 0 && v4 != 2)
    {
      v3 = __s2;
      if (!__s2)
      {
        v2 = 0;
        goto LABEL_23;
      }
      if (!strcasecmp(__s2, "q"))
      {
        v2 = -6752;
LABEL_22:
        free(v3);
        if (!a1)
          goto LABEL_5;
LABEL_23:
        free(a1);
        if (!v2)
          goto LABEL_24;
LABEL_27:
        gCLIInteractiveMode = 0;
        return;
      }
      if (strcasecmp(v3, "quit") && strcasecmp(v3, "exit"))
      {
        v2 = strcasecmp(v3, "history");
        if (v2)
        {
          if (!strcasecmp(v3, "?"))
          {
            free(v3);
            __s2 = strdup("help");
            if (!__s2)
            {
              v2 = -6728;
              goto LABEL_23;
            }
          }
        }
        else if (*(int *)var_history_length[0]() >= 1)
        {
          v5 = 0;
          v6 = (FILE **)MEMORY[0x1E0C80C10];
          do
          {
            v7 = (_DWORD *)var_history_base[0]();
            v8 = (const char **)((uint64_t (*)(uint64_t))softLinkhistory_get[0])((*v7 + v5++));
            if (v8)
              fprintf(*v6, "%d: %s\n", v5, *v8);
          }
          while (v5 < *(_DWORD *)var_history_length[0]());
        }
        if (*(int *)var_history_length[0]() <= 0)
        {
          v12 = __s2;
        }
        else
        {
          v9 = *(_DWORD *)var_history_base[0]();
          v10 = (_DWORD *)var_history_length[0]();
          v11 = (const char **)((uint64_t (*)(uint64_t))softLinkhistory_get[0])((v9 + *v10 - 1));
          v12 = __s2;
          if (v11 && !strcmp(*v11, __s2))
          {
LABEL_40:
            if (v2)
            {
              v2 = ParseCommandLineIntoArgV(__s2, (unsigned int *)&v16, &v15);
              if (!v2)
              {
                gArgC = 0;
                if (gArgVAlt)
                {
                  free((void *)gArgVAlt);
                  gArgVAlt = 0;
                }
                gMutableArgC = 0;
                if (gMutableArgV)
                {
                  free((void *)gMutableArgV);
                  gMutableArgV = 0;
                }
                if (gCLIInteractivePrompt)
                {
                  free((void *)gCLIInteractivePrompt);
                  gCLIInteractivePrompt = 0;
                }
                gArgI = 0;
                gArgC = v16;
                v13 = (void **)v15;
                gArgV = (uint64_t)v15;
                v14 = gRootOptions;
                if (gRootOptions)
                  v14 = CLIParse(gRootOptions, 0);
                FreeCommandLineArgV(v14, v13);
                v2 = 0;
              }
            }
            goto LABEL_3;
          }
        }
        ((void (*)(uint64_t))softLinkadd_history[0])((uint64_t)v12);
        goto LABEL_40;
      }
LABEL_20:
      v2 = -6752;
    }
  }
LABEL_3:
  v3 = __s2;
  if (__s2)
    goto LABEL_22;
  if (a1)
    goto LABEL_23;
LABEL_5:
  if (v2)
    goto LABEL_27;
LABEL_24:
  if (gCLIInteractiveBeginning == 1)
  {
    gCLIInteractiveBeginning = 0;
    return;
  }
  if (_CLIInteractiveReset())
    goto LABEL_27;
}

uint64_t initrl_callback_handler_install(uint64_t a1, uint64_t a2)
{
  if (editLibrary_sOnce != -1)
    dispatch_once(&editLibrary_sOnce, &__block_literal_global_553);
  softLinkrl_callback_handler_install[0] = (uint64_t (*)())dlsym((void *)editLibrary_sLib, "rl_callback_handler_install");
  return ((uint64_t (*)(uint64_t, uint64_t))softLinkrl_callback_handler_install[0])(a1, a2);
}

uint64_t _CLIInteractiveLineHook(uint64_t a1, uint64_t a2)
{
  void (*v4)(uint64_t, uint64_t, uint64_t);
  uint64_t v5;
  uint64_t result;
  void (**v7)(void *, uint64_t, uint64_t);
  void *v8;

  v4 = (void (*)(uint64_t, uint64_t, uint64_t))gCLIInteractiveLineHandler_f;
  if (gCLIInteractiveLineHandler_f)
  {
    v5 = gCLIInteractiveLineHandler_ctx;
    gCLIInteractiveLineHandler_f = 0;
    gCLIInteractiveLineHandler_ctx = 0;
    if (gCLIInteractivePrompt)
    {
      free((void *)gCLIInteractivePrompt);
      gCLIInteractivePrompt = 0;
    }
    v4(a1, a2, v5);
  }
  else
  {
    result = gCLIInteractiveLineHandler_b;
    if (!gCLIInteractiveLineHandler_b)
      return result;
    v7 = (void (**)(void *, uint64_t, uint64_t))_Block_copy((const void *)gCLIInteractiveLineHandler_b);
    v8 = (void *)gCLIInteractiveLineHandler_b;
    gCLIInteractiveLineHandler_b = 0;

    if (gCLIInteractivePrompt)
    {
      free((void *)gCLIInteractivePrompt);
      gCLIInteractivePrompt = 0;
    }
    v7[2](v7, a1, a2);

  }
  return 1;
}

uint64_t history_lengthFunction()
{
  return variableValhistory_length;
}

void *initValhistory_length()
{
  void *result;

  if (editLibrary_sOnce != -1)
    dispatch_once(&editLibrary_sOnce, &__block_literal_global_553);
  result = dlsym((void *)editLibrary_sLib, "history_length");
  variableValhistory_length = (uint64_t)result;
  var_history_length[0] = history_lengthFunction;
  return result;
}

uint64_t history_baseFunction()
{
  return variableValhistory_base;
}

void *initValhistory_base()
{
  void *result;

  if (editLibrary_sOnce != -1)
    dispatch_once(&editLibrary_sOnce, &__block_literal_global_553);
  result = dlsym((void *)editLibrary_sLib, "history_base");
  variableValhistory_base = (uint64_t)result;
  var_history_base[0] = history_baseFunction;
  return result;
}

uint64_t initadd_history(uint64_t a1)
{
  if (editLibrary_sOnce != -1)
    dispatch_once(&editLibrary_sOnce, &__block_literal_global_553);
  softLinkadd_history[0] = (uint64_t (*)())dlsym((void *)editLibrary_sLib, "add_history");
  return ((uint64_t (*)(uint64_t))softLinkadd_history[0])(a1);
}

uint64_t inithistory_get(uint64_t a1)
{
  if (editLibrary_sOnce != -1)
    dispatch_once(&editLibrary_sOnce, &__block_literal_global_553);
  softLinkhistory_get[0] = (uint64_t (*)())dlsym((void *)editLibrary_sLib, "history_get");
  return ((uint64_t (*)(uint64_t))softLinkhistory_get[0])(a1);
}

uint64_t inithistory_expand(uint64_t a1, uint64_t a2)
{
  if (editLibrary_sOnce != -1)
    dispatch_once(&editLibrary_sOnce, &__block_literal_global_553);
  softLinkhistory_expand[0] = (uint64_t (*)())dlsym((void *)editLibrary_sLib, "history_expand");
  return ((uint64_t (*)(uint64_t, uint64_t))softLinkhistory_expand[0])(a1, a2);
}

uint64_t _CLIInteractiveHandleSigIntDeferred()
{
  NSObject *v0;
  void *v1;
  FILE **v2;
  int v3;

  if (gCLIInteractiveSigIntTimerSource)
  {
    v0 = (id)gCLIInteractiveSigIntTimerSource;
    dispatch_source_cancel(v0);
    v1 = (void *)gCLIInteractiveSigIntTimerSource;
    gCLIInteractiveSigIntTimerSource = 0;

  }
  v2 = (FILE **)MEMORY[0x1E0C80C10];
  fputc(10, (FILE *)*MEMORY[0x1E0C80C10]);
  if (!_CLIInteractiveLineHook(0, 1))
  {
    v3 = gCLIInteractiveSigIntCount++;
    if (v3 >= 1)
    {
      fwrite("Enter 'q', 'quit', or 'exit' to exit interactive mode.\n", 0x37uLL, 1uLL, *v2);
      gCLIInteractiveSigIntCount = 0;
    }
  }
  **(_BYTE **)var_rl_line_buffer[0]() = 0;
  return _CLIInteractiveReset();
}

void *initValrl_line_buffer()
{
  void *result;

  if (editLibrary_sOnce != -1)
    dispatch_once(&editLibrary_sOnce, &__block_literal_global_553);
  result = dlsym((void *)editLibrary_sLib, "rl_line_buffer");
  variableValrl_line_buffer = (uint64_t)result;
  var_rl_line_buffer[0] = rl_line_bufferFunction;
  return result;
}

uint64_t rl_line_bufferFunction()
{
  return variableValrl_line_buffer;
}

uint64_t initrl_callback_read_char()
{
  if (editLibrary_sOnce != -1)
    dispatch_once(&editLibrary_sOnce, &__block_literal_global_553);
  softLinkrl_callback_read_char[0] = (uint64_t (*)())dlsym((void *)editLibrary_sLib, "rl_callback_read_char");
  return softLinkrl_callback_read_char[0]();
}

uint64_t initread_history(uint64_t a1)
{
  if (editLibrary_sOnce != -1)
    dispatch_once(&editLibrary_sOnce, &__block_literal_global_553);
  softLinkread_history[0] = (uint64_t (*)())dlsym((void *)editLibrary_sLib, "read_history");
  return ((uint64_t (*)(uint64_t))softLinkread_history[0])(a1);
}

char *_CLIInteractiveGenerator(const char *a1, int a2)
{
  size_t v4;
  uint64_t *v5;
  _DWORD *v6;
  int v7;
  size_t v8;
  _DWORD *i;
  const char *v10;
  int v11;

  v4 = strlen(a1);
  v5 = &gRootOptions;
  if (a2)
    v5 = &gCLIInteractiveNextCommand;
  v6 = (_DWORD *)*v5;
  v7 = *(_DWORD *)*v5;
  if (!v7)
    return 0;
  v8 = v4;
  for (i = v6 + 26; ; i += 26)
  {
    gCLIInteractiveNextCommand = (uint64_t)i;
    if (v7 == 3)
    {
      v10 = (const char *)*((_QWORD *)i - 12);
      if (!strncasecmp(v10, a1, v8))
        break;
    }
    v11 = *i;
    v7 = v11;
    if (!v11)
      return 0;
  }
  return strdup(v10);
}

uint64_t initrl_completion_matches(uint64_t a1, uint64_t a2)
{
  if (editLibrary_sOnce != -1)
    dispatch_once(&editLibrary_sOnce, &__block_literal_global_553);
  softLinkrl_completion_matches[0] = (uint64_t (*)())dlsym((void *)editLibrary_sLib, "rl_completion_matches");
  return ((uint64_t (*)(uint64_t, uint64_t))softLinkrl_completion_matches[0])(a1, a2);
}

uint64_t _CLIHelp_PrintUsageLine(uint64_t a1)
{
  uint64_t v2;
  char v3;
  FILE **v4;
  uint64_t v5;
  unsigned __int8 **v6;
  unsigned __int8 **v7;
  FILE *v8;
  const char *v9;
  size_t v10;
  uint64_t i;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  v2 = gRootOptions;
  v3 = gRootOptions != a1;
  v4 = (FILE **)MEMORY[0x1E0C80C20];
  fprintf((FILE *)*MEMORY[0x1E0C80C20], "%s%*s%s", "\nUsage: ", 0, "", (const char *)gProgramName);
  if (_CLIFindOption((unsigned __int8 **)gRootOptions, 5, v3, 0))
    fwrite(" [global options]", 0x11uLL, 1uLL, *v4);
  if (v2 == a1)
  {
    if (_CLIFindOption((unsigned __int8 **)gRootOptions, 3, 0, 0))
    {
      v8 = *v4;
      v9 = " <command> [options] [args]";
      v10 = 27;
LABEL_13:
      fwrite(v9, v10, 1uLL, v8);
    }
  }
  else
  {
    v5 = *(_QWORD *)(a1 + 80);
    if (v5)
    {
      fprintf(*v4, " %s", *(const char **)(v5 + 8));
      v6 = *(unsigned __int8 ***)(*(_QWORD *)(a1 + 80) + 72);
      if (v6)
      {
        if (_CLIFindOption(v6, 5, 0, 0))
          fwrite(" [parent options]", 0x11uLL, 1uLL, *v4);
      }
    }
    fprintf(*v4, " %s", *(const char **)(a1 + 8));
    v7 = *(unsigned __int8 ***)(a1 + 72);
    if (v7)
    {
      if (!_CLIFindOption(v7, 3, 0, 0))
      {
        if (_CLIFindOption(*(unsigned __int8 ***)(a1 + 72), 5, 0, 0))
          fwrite(" [options]", 0xAuLL, 1uLL, *v4);
        for (i = *(_QWORD *)(a1 + 72); ; i += 104)
        {
          if (*(_DWORD *)i == 4)
          {
            if ((*(_DWORD *)(i + 48) & 2) != 0)
              v13 = 93;
            else
              v13 = 62;
            v15 = v13;
            if ((*(_DWORD *)(i + 48) & 2) != 0)
              v14 = 91;
            else
              v14 = 60;
            fprintf(*v4, " %c%s%c", v14, *(const char **)(i + 8), v15);
          }
          else if (!*(_DWORD *)i)
          {
            return fputc(10, *v4);
          }
        }
      }
      v8 = *v4;
      v9 = " [options] <command> [sub-options] [args]";
      v10 = 41;
      goto LABEL_13;
    }
  }
  return fputc(10, *v4);
}

uint64_t _CLIHelp_PrintOptions(int *a1, char *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v8;
  char v9;
  uint64_t v11;
  int v12;
  int v13;
  FILE **v14;
  uint64_t v15;
  int v16;
  int v17;
  int v18;
  uint64_t v19;
  const char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  int v27;
  FILE *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  FILE *v41;
  const char *v42;
  size_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  int v50;
  uint64_t v52;
  uint64_t v53;

  v8 = *a1;
  if (!*a1)
    return 0;
  v9 = a3;
  v11 = (uint64_t)a1;
  v12 = 0;
  v13 = 0;
  v14 = (FILE **)MEMORY[0x1E0C80C20];
  v15 = (uint64_t)a1;
  do
  {
    if ((v8 == 4 || (v8 - 6) <= 9)
      && ((v9 & 2) == 0 || (*(_BYTE *)(v15 + 48) & 0x40) == 0)
      && ((v9 & 4) == 0 || (*(_BYTE *)(v15 + 49) & 1) == 0))
    {
      if (a2 && !v12)
      {
        fputs(a2, *v14);
        v12 = 1;
      }
      v16 = _CLIHelp_PrintOptionName(v15, 0, a3, a4, a5, a6, a7, a8);
      if (v16 > v13)
        v13 = v16;
    }
    v17 = *(_DWORD *)(v15 + 104);
    v15 += 104;
    v8 = v17;
  }
  while (v17);
  v18 = *(_DWORD *)v11;
  if (!*(_DWORD *)v11)
  {
    v19 = 0;
    if (v12)
      goto LABEL_52;
    return v19;
  }
  v19 = 0;
  do
  {
    if (((v9 & 2) == 0 || (*(_BYTE *)(v11 + 48) & 0x40) == 0) && ((v9 & 4) == 0 || (*(_BYTE *)(v11 + 49) & 1) == 0))
    {
      if (v18 == 2)
      {
        fputc(10, *v14);
        v20 = *(const char **)(v11 + 88);
        if (*v20)
          fprintf(*v14, "%*s%s\n", 4, "", v20);
        goto LABEL_46;
      }
      if (v18 == 4 || (v18 - 6) <= 9)
      {
        if (!(_DWORD)v19)
          fputc(10, *v14);
        fprintf(*v14, "%*s", 4, "");
        v27 = _CLIHelp_PrintOptionName(v11, *v14, v21, v22, v23, v24, v25, v26);
        if ((*(_DWORD *)v11 - 13) >= 2)
        {
          if (*(_DWORD *)v11 == 15)
          {
            fprintf(*v14, "%*s    %s: ", v13 - v27, "", *(const char **)(v11 + 88));
            if ((v9 & 8) == 0)
            {
              v41 = *v14;
              v42 = "Use help <command> to see all values.\n";
              v43 = 38;
              goto LABEL_39;
            }
            _CLIPrintNameValueDescriptors(*(_QWORD **)(v11 + 24), *v14, v35, v36, v37, v38, v39, v40, v53);
            if ((v9 & 1) == 0)
            {
LABEL_46:
              v19 = (v19 + 1);
              goto LABEL_47;
            }
          }
          else
          {
            fprintf(*v14, "%*s    %s\n", v13 - v27, "", *(const char **)(v11 + 88));
            if ((v9 & 1) == 0)
              goto LABEL_46;
          }
        }
        else
        {
          v28 = *v14;
          if (*(_QWORD *)(v11 + 88))
            fprintf(v28, "%*s    %s: ");
          else
            fprintf(v28, "%*s    ");
          if ((v9 & 8) != 0)
          {
            _CLIPrintFlagDescriptors(*(_QWORD *)(v11 + 24), *v14, v29, v30, v31, v32, v33, v34, v52);
            if ((v9 & 1) == 0)
              goto LABEL_46;
          }
          else
          {
            v41 = *v14;
            v42 = "Use help <command> to see all flags.\n";
            v43 = 37;
LABEL_39:
            fwrite(v42, v43, 1uLL, v41);
            if ((v9 & 1) == 0)
              goto LABEL_46;
          }
        }
        if (*(_QWORD *)(v11 + 96))
          FPrintF(*v14, "%*{text}", v44, v45, v46, v47, v48, v49, 2);
        goto LABEL_46;
      }
    }
LABEL_47:
    v50 = *(_DWORD *)(v11 + 104);
    v11 += 104;
    v18 = v50;
  }
  while (v50);
  if (!v12)
    return v19;
LABEL_52:
  fputc(10, *v14);
  return v19;
}

uint64_t _CLIPrintFlagDescriptors(uint64_t a1, uint64_t (*a2)(unsigned __int8 *, int64_t, _QWORD), uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t i;
  size_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  size_t v19;
  const char *v20;

  for (i = a1; ; i += v19 + 1 + 1)
  {
    v12 = strlen((const char *)(i + 1));
    if (!v12)
      break;
    v19 = v12;
    if (i == a1)
      v20 = "all, ";
    else
      v20 = ", ";
    FPrintF(a2, "%s%s", v13, v14, v15, v16, v17, v18, (uint64_t)v20);
  }
  return FPrintF(a2, ".\n", v13, v14, v15, v16, v17, v18, a9);
}

uint64_t _CLIPrintNameValueDescriptors(_QWORD *a1, uint64_t (*a2)(unsigned __int8 *, int64_t, _QWORD), uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t *v10;
  unsigned int v11;
  uint64_t v12;
  int v13;
  uint64_t *v14;
  int v15;
  const char *v16;
  const char *v17;
  uint64_t v18;

  if (*a1)
  {
    v10 = a1 + 2;
    v11 = -1;
    do
    {
      v12 = *v10;
      v10 += 2;
      ++v11;
    }
    while (v12);
    v13 = 0;
    v14 = a1 + 2;
    do
    {
      v15 = v13 + 1;
      if (v11 == v13)
        v16 = ", or ";
      else
        v16 = ", ";
      if (v11 < 2)
        v16 = " or ";
      if (v13)
        v17 = v16;
      else
        v17 = "";
      FPrintF(a2, "%s%s", a3, a4, a5, a6, a7, a8, (uint64_t)v17);
      v18 = *v14;
      v14 += 2;
      v13 = v15;
    }
    while (v18);
  }
  return FPrintF(a2, ".\n", a3, a4, a5, a6, a7, a8, a9);
}

uint64_t _CLIOptionError(uint64_t a1, const char *a2, char a3)
{
  FILE **v5;
  FILE *v6;

  v5 = (FILE **)MEMORY[0x1E0C80C10];
  fwrite("error: option ", 0xEuLL, 1uLL, (FILE *)*MEMORY[0x1E0C80C10]);
  if ((a3 & 1) != 0)
  {
    fprintf(*v5, "'%c' ");
  }
  else
  {
    v6 = *v5;
    if ((a3 & 2) != 0)
      fprintf(v6, "'no-%s' ");
    else
      fprintf(v6, "'%s' ");
  }
  return fprintf(*v5, "%s.\n", a2);
}

uint64_t _CLIGetArg(uint64_t a1, char a2, _QWORD *a3)
{
  uint64_t result;
  uint64_t v4;

  if (gOptionPtr)
  {
    result = 0;
    *a3 = gOptionPtr;
    gOptionPtr = 0;
  }
  else
  {
    v4 = gArgI + 1;
    if ((int)v4 >= gArgC)
    {
      _CLIOptionError(a1, "requires a value", a2);
      return 129;
    }
    else
    {
      result = 0;
      ++gArgI;
      *a3 = *(_QWORD *)(gArgV + 8 * v4);
    }
  }
  return result;
}

uint64_t CLIFlagsToValueEx(uint64_t a1, char *__s, const char *a3, int *a4)
{
  const char *v4;
  char *v5;
  char *v6;
  unsigned __int8 *v7;
  unsigned __int8 *v8;
  uint64_t v9;
  unsigned __int8 v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  int v19;
  unsigned __int8 *v20;
  uint64_t v21;
  _BOOL4 v22;
  uint64_t v23;
  BOOL v24;
  uint64_t v25;
  const char *v26;
  unsigned __int8 *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  int v34;
  unsigned __int8 *v35;
  unsigned __int8 *v36;
  unsigned __int8 *v37;
  int64_t v38;
  unsigned __int8 *v39;
  uint64_t v40;
  uint64_t result;
  int *v42;
  int v43;
  uint64_t (**v44)(unsigned __int8 *, int64_t, _QWORD);
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v53;
  uint64_t v54;
  uint64_t v57;
  uint64_t v58;
  BOOL v59;
  char v60;
  size_t v61;

  v4 = a3;
  v5 = __s;
  v53 = 0;
  v54 = 0;
  v57 = 0;
  v6 = &__s[strlen(__s)];
  while (2)
  {
    v7 = (unsigned __int8 *)v5;
    do
    {
      if (v7 < (unsigned __int8 *)v6)
      {
        v8 = v7;
        while (2)
        {
          v9 = 0;
          v10 = 44;
          do
          {
            if (*v8 == v10)
            {
              v5 = (char *)(v8 + 1);
              goto LABEL_12;
            }
            v10 = asc_18D53BD27[++v9];
          }
          while (v9 != 2);
          if (++v8 != (unsigned __int8 *)v6)
            continue;
          break;
        }
      }
      v8 = (unsigned __int8 *)v6;
      v5 = v6;
      if (v7 == (unsigned __int8 *)v6)
      {
        v40 = a1;
        if (v53)
          v40 = v53;
        result = (v40 | v54) & ~v57;
        v42 = a4;
        if (a4)
        {
          v43 = 0;
          goto LABEL_53;
        }
        return result;
      }
LABEL_12:
      v11 = v8 - v7;
      v18 = strnicmp_prefix(v7, v8 - v7, "+");
      if (v18)
      {
        v19 = strnicmp_prefix(v7, v11, "-");
        if (v19)
          v20 = v7;
        else
          v20 = v7 + 1;
        if (v19)
          v21 = v11;
        else
          v21 = v11 - 1;
        v22 = v19 == 0;
      }
      else
      {
        v22 = 0;
        v20 = v7 + 1;
        v21 = v11 - 1;
      }
      v7 = (unsigned __int8 *)v5;
    }
    while (!v21);
    v23 = *(unsigned __int8 *)v4;
    if (v23 > 0x3F)
      goto LABEL_55;
    v24 = 0;
    v25 = 0;
    v26 = v4;
LABEL_24:
    v59 = v24;
    v60 = v23;
    v27 = (unsigned __int8 *)(v26 + 1);
    v61 = strlen(v26 + 1);
    if (v61)
    {
      v34 = strnicmpx(v20, v21, "all");
      v24 = v34 == 0;
      if (!v34)
      {
        v25 |= 1 << v60;
        goto LABEL_40;
      }
      v58 = v25;
      v35 = &v27[v61];
      v36 = v27;
      while (1)
      {
        v37 = v36;
        if (v36 >= v35)
        {
LABEL_31:
          v39 = &v27[v61];
          v36 = &v27[v61];
          if (v37 == v35)
          {
            v4 = a3;
            v25 = v58;
            v24 = 0;
            if (v59)
              goto LABEL_42;
LABEL_40:
            v26 = (const char *)&v27[v61 + 1];
            v23 = *(unsigned __int8 *)v26;
            if (*(unsigned __int8 *)v26 > 0x3Fu)
            {
LABEL_55:
              FPrintF((uint64_t (*)(unsigned __int8 *, int64_t, _QWORD))*MEMORY[0x1E0C80C10], "error: Flag bit out-of-range: %u\n", v12, v13, v14, v15, v16, v17, v23);
              result = 0;
              v42 = a4;
              if (a4)
              {
                v43 = -6710;
                goto LABEL_53;
              }
              return result;
            }
            goto LABEL_24;
          }
        }
        else
        {
          v38 = v35 - v36;
          v39 = v36;
          while (*v39 != 47)
          {
            ++v39;
            if (!--v38)
              goto LABEL_31;
          }
          v36 = v39 + 1;
        }
        if (v39 - v37 == v21 && !memicmp(v37, v20, v21))
        {
          v25 = (1 << v60) | v58;
          v4 = a3;
          goto LABEL_42;
        }
      }
    }
    if (v59)
    {
LABEL_42:
      if (v18)
      {
        if (v22)
          v57 |= v25;
        else
          v53 |= v25;
      }
      else
      {
        v54 |= v25;
      }
      continue;
    }
    break;
  }
  v44 = (uint64_t (**)(unsigned __int8 *, int64_t, _QWORD))MEMORY[0x1E0C80C10];
  FPrintF((uint64_t (*)(unsigned __int8 *, int64_t, _QWORD))*MEMORY[0x1E0C80C10], "error: Unknown flag '%.*s'. Valid flags: ", v28, v29, v30, v31, v32, v33, v21);
  _CLIPrintFlagDescriptors((uint64_t)v4, *v44, v45, v46, v47, v48, v49, v50, v51);
  result = 0;
  v42 = a4;
  if (a4)
  {
    v43 = -6735;
LABEL_53:
    *v42 = v43;
  }
  return result;
}

uint64_t CLIArgNameValueParse(uint64_t a1, char *a2, int *a3, const char **a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  const char *v10;
  uint64_t v12;
  const char *v13;
  const char **v14;
  const char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t result;
  int v23;
  uint64_t v24;

  v10 = a2;
  if (!a2)
  {
    v12 = gArgI;
    if (gArgI >= gArgC || (++gArgI, (v10 = *(const char **)(gArgV + 8 * v12)) == 0))
    {
      FPrintF((uint64_t (*)(unsigned __int8 *, int64_t, _QWORD))*MEMORY[0x1E0C80C10], "error: No %s specified. Valid values: ", (uint64_t)a3, (uint64_t)a4, a5, a6, a7, a8, a1);
      goto LABEL_12;
    }
  }
  v13 = *a4;
  if (!*a4)
  {
LABEL_8:
    FPrintF((uint64_t (*)(unsigned __int8 *, int64_t, _QWORD))*MEMORY[0x1E0C80C10], "error: Bad %s: '%s'. Valid values: ", (uint64_t)a3, (uint64_t)a4, a5, a6, a7, a8, a1);
LABEL_12:
    _CLIPrintNameValueDescriptors(a4, (uint64_t (*)(unsigned __int8 *, int64_t, _QWORD))*MEMORY[0x1E0C80C10], v16, v17, v18, v19, v20, v21, v24);
    result = 0;
    if (!a3)
      return result;
    v23 = -6705;
    goto LABEL_14;
  }
  v14 = a4;
  while (strcasecmp(v10, v13))
  {
    v15 = v14[2];
    v14 += 2;
    v13 = v15;
    if (!v15)
      goto LABEL_8;
  }
  result = *((unsigned int *)v14 + 2);
  if (a3)
  {
    v23 = 0;
LABEL_14:
    *a3 = v23;
  }
  return result;
}

const char **CLIHelpCommand(char *a1)
{
  const char **v2;

  if (!a1)
    return (const char **)_CLIHelp_PrintSummary(1);
  v2 = _CLIFindOption((unsigned __int8 **)gRootOptions, 3, 0, a1);
  if (v2)
    return _CLIHelp_PrintCommand((uint64_t)v2, 1, 8);
  else
    return (const char **)_CLIPrintCommandNotFound((uint64_t)a1, *(_QWORD *)(gRootOptions + 80));
}

const char **_CLIHelpCommand()
{
  uint64_t v0;

  v0 = gArgI;
  if (gArgI >= gArgC)
    return CLIHelpCommand(0);
  ++gArgI;
  return CLIHelpCommand(*(char **)(gArgV + 8 * v0));
}

uint64_t _CLIHelpOption(int a1, char *a2)
{
  char *v2;
  const char **v3;
  uint64_t v4;

  v2 = a2;
  if (a2 || (v4 = gArgI + 1, (int)v4 < gArgC) && (++gArgI, (v2 = *(char **)(gArgV + 8 * v4)) != 0))
  {
    v3 = _CLIFindOption((unsigned __int8 **)gRootOptions, 3, 0, v2);
    if (!v3)
    {
      _CLIPrintCommandNotFound((uint64_t)v2, *(_QWORD *)(gRootOptions + 80));
      return 4294960544;
    }
  }
  else
  {
    v3 = (const char **)gCLICurrentCommand;
    if (!gCLICurrentCommand || *(const char **(**)())(gCLICurrentCommand + 64) == _CLIHelpCommand)
    {
      _CLIHelp_PrintSummary(1);
      return 4294960544;
    }
  }
  _CLIHelp_PrintCommand((uint64_t)v3, 0, 0);
  return 4294960544;
}

uint64_t _CLIVersionOption(uint64_t a1)
{
  const char *v1;
  BOOL v2;

  v1 = *(const char **)(a1 + 24);
  if (*(_QWORD *)(a1 + 16))
    v2 = v1 == 0;
  else
    v2 = 1;
  if (!v2 && !strcmp(*(const char **)(a1 + 16), v1))
    fprintf((FILE *)*MEMORY[0x1E0C80C20], "%s version %s\n");
  else
    fprintf((FILE *)*MEMORY[0x1E0C80C20], "%s version %s (%s)\n");
  return 4294960544;
}

uint64_t _CLIVersionCommand()
{
  return _CLIVersionOption(gCLICurrentOption);
}

uint64_t _CLIInteractiveOption()
{
  if (!gCLIInteractiveMode)
  {
    gCLIInteractiveMode = 1;
    gCLIInteractivePending = 1;
  }
  return 0;
}

uint64_t CLIInteractiveReadLine(const char *a1, uint64_t a2, void *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  char *v10;
  uint64_t v11;

  if (!a1)
  {
LABEL_6:
    gCLIInteractiveLineHandler_f = a3;
    gCLIInteractiveLineHandler_ctx = a4;
    return _CLIInteractiveReset((uint64_t)a1, a2, (uint64_t)a3, a4, a5, a6, a7, a8);
  }
  v10 = strdup(a1);
  if (v10)
  {
    v11 = (uint64_t)v10;
    a1 = (const char *)gCLIInteractivePrompt;
    if (gCLIInteractivePrompt)
      free((void *)gCLIInteractivePrompt);
    gCLIInteractivePrompt = v11;
    goto LABEL_6;
  }
  return 4294960568;
}

uint64_t CLIInteractiveReadLine_b(const char *a1, uint64_t a2, void *a3)
{
  id v4;
  char *v5;
  uint64_t v6;
  void *v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  v4 = a3;
  if (a1)
  {
    v5 = strdup(a1);
    if (!v5)
    {
      v17 = 4294960568;
      goto LABEL_7;
    }
    v6 = (uint64_t)v5;
    if (gCLIInteractivePrompt)
      free((void *)gCLIInteractivePrompt);
    gCLIInteractivePrompt = v6;
  }
  v7 = _Block_copy(v4);
  v8 = (void *)gCLIInteractiveLineHandler_b;
  gCLIInteractiveLineHandler_b = (uint64_t)v7;

  v17 = _CLIInteractiveReset(v9, v10, v11, v12, v13, v14, v15, v16);
LABEL_7:

  return v17;
}

uint64_t CLIArgToValue(uint64_t a1, unsigned __int8 *a2, _DWORD *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, char *a9, uint64_t a10)
{
  unsigned __int8 *v10;
  uint64_t v11;
  const char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unsigned int *v18;
  const char **v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t result;
  unsigned int v27;
  const char *v28;
  const char *v29;
  const char **v30;
  int v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  const char *v38;
  const char **v39;
  uint64_t v40;
  unsigned int v43;
  const char **v44;

  v10 = a2;
  v44 = 0;
  v43 = 0;
  if (!a2)
  {
    v11 = gArgI;
    if (gArgI >= gArgC || (++gArgI, (v10 = *(unsigned __int8 **)(gArgV + 8 * v11)) == 0))
    {
      FPrintF((uint64_t (*)(unsigned __int8 *, int64_t, _QWORD))*MEMORY[0x1E0C80C10], "error: no %s specified. Valid values: ", (uint64_t)a3, a4, a5, a6, a7, a8, a1);
      goto LABEL_31;
    }
  }
  v44 = (const char **)&a10;
  v12 = a9;
  if (!a9)
  {
LABEL_24:
    FPrintF((uint64_t (*)(unsigned __int8 *, int64_t, _QWORD))*MEMORY[0x1E0C80C10], "error: bad %s: '%s'. Valid values: ", (uint64_t)a3, a4, a5, a6, a7, a8, a1);
LABEL_31:
    v44 = (const char **)&a10;
    v27 = 0;
    v28 = a9;
    if (a9)
    {
      v29 = a9;
      do
      {
        if (strcasecmp(v29, "<any-true-ish>") && strcasecmp(v29, "<any-false-ish>") && strcasecmp(v29, "<any-int>"))
          ++v44;
        ++v27;
        v30 = v44++;
        v29 = *v30;
      }
      while (*v30);
    }
    v44 = (const char **)&a10;
    if (a9)
    {
      v31 = 0;
      do
      {
        if (strcasecmp(v28, "<any-true-ish>") && strcasecmp(v28, "<any-false-ish>") && strcasecmp(v28, "<any-int>"))
          ++v44;
        if (v27 - 1 == v31)
          v38 = ", or ";
        else
          v38 = ", ";
        if (v27 < 3)
          v38 = " or ";
        if (!v31)
          v38 = "";
        FPrintF((uint64_t (*)(unsigned __int8 *, int64_t, _QWORD))*MEMORY[0x1E0C80C10], "%s%s", v32, v33, v34, v35, v36, v37, (uint64_t)v38);
        v39 = v44++;
        v28 = *v39;
        ++v31;
      }
      while (*v39);
    }
    FPrintF((uint64_t (*)(unsigned __int8 *, int64_t, _QWORD))*MEMORY[0x1E0C80C10], "\n", v20, v21, v22, v23, v24, v25, v40);
    result = 0;
    if (a3)
      *a3 = -6705;
    return result;
  }
  while (!strcasecmp(v12, "<any-true-ish>"))
  {
    if (!strnicmpx(v10, -1, "true")
      || !strnicmpx(v10, -1, "yes")
      || !strnicmpx(v10, -1, "y")
      || !strnicmpx(v10, -1, "on")
      || !strnicmpx(v10, -1, "1"))
    {
      v43 = 1;
      goto LABEL_27;
    }
LABEL_23:
    v19 = v44++;
    v12 = *v19;
    if (!*v19)
      goto LABEL_24;
  }
  if (strcasecmp(v12, "<any-false-ish>"))
  {
    if (!strcasecmp(v12, "<any-int>"))
    {
      if (SNScanF((char *)v10, 0xFFFFFFFFFFFFFFFFLL, "%i", v13, v14, v15, v16, v17, (int)&v43) == 1)
        goto LABEL_27;
    }
    else
    {
      v18 = (unsigned int *)v44++;
      v43 = *v18;
      if (!strcasecmp((const char *)v10, v12))
        goto LABEL_27;
    }
    goto LABEL_23;
  }
  if (strnicmpx(v10, -1, "false")
    && strnicmpx(v10, -1, "no")
    && strnicmpx(v10, -1, "n")
    && strnicmpx(v10, -1, "off")
    && strnicmpx(v10, -1, "0"))
  {
    goto LABEL_23;
  }
  v43 = 0;
LABEL_27:
  if (a3)
    *a3 = 0;
  return v43;
}

uint64_t CLIFlagsToValue(char *__s, const char *a2, int *a3)
{
  return CLIFlagsToValueEx(0, __s, a2, a3);
}

void CLIOutputBegin()
{
  if (gCLIInteractiveMode)
    gCLIInteractiveBeginning = 1;
}

uint64_t CLIOutputEnd(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  gCLIInteractiveBeginning = 0;
  if (gCLIInteractiveMode)
    return _CLIInteractiveReset(a1, a2, a3, a4, a5, a6, a7, a8);
  return a1;
}

uint64_t CLIProgressClear(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t result;

  if (gCLIProgressMax >= 1)
  {
    result = FPrintF((uint64_t (*)(unsigned __int8 *, int64_t, _QWORD))*MEMORY[0x1E0C80C10], "\r%*s\r", a3, a4, a5, a6, a7, a8, gCLIProgressMax);
    gCLIProgressMax = 0;
  }
  return result;
}

uint64_t CLIProgressUpdate(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t (**v9)(unsigned __int8 *, int64_t, _QWORD);
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  int v22;
  uint64_t (*v23)(unsigned __int8 *, int64_t, _QWORD);
  uint64_t result;
  uint64_t v25;
  uint64_t v26;

  v9 = (uint64_t (**)(unsigned __int8 *, int64_t, _QWORD))MEMORY[0x1E0C80C10];
  FPrintF((uint64_t (*)(unsigned __int8 *, int64_t, _QWORD))*MEMORY[0x1E0C80C10], "\r", a3, a4, a5, a6, a7, a8, v25);
  v22 = FPrintF(*v9, "%V", v10, v11, v12, v13, v14, v15, a1);
  v23 = *v9;
  if (gCLIProgressMax <= v22)
    result = FPrintF(v23, "\r", v16, v17, v18, v19, v20, v21, v26);
  else
    result = FPrintF(v23, "%*s\r", v16, v17, v18, v19, v20, v21, (gCLIProgressMax - v22));
  gCLIProgressMax = v22;
  return result;
}

void CLIPromptForPIN(int a1, int a2, void *a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  id v11;
  uint64_t (**v12)(unsigned __int8 *, int64_t, _QWORD);
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  NSObject *v16;
  void *v17;
  dispatch_source_t v18;
  void *v19;
  NSObject *v20;
  NSObject *v21;
  dispatch_time_t v22;
  id v23;
  uint64_t v24;
  uint64_t v25;
  _QWORD v26[4];
  id v27;
  _QWORD handler[4];
  id v29;
  uint64_t v30;

  v11 = a3;
  v12 = (uint64_t (**)(unsigned __int8 *, int64_t, _QWORD))MEMORY[0x1E0C80C10];
  if ((a1 & 0x10000) != 0)
    FPrintF((uint64_t (*)(unsigned __int8 *, int64_t, _QWORD))*MEMORY[0x1E0C80C10], "### PIN incorrect.\n", v5, v6, v7, v8, v9, v10, v25);
  v13 = MEMORY[0x1E0C809B0];
  if (a2 >= 1)
  {
    v14 = mach_absolute_time();
    if (SecondsToUpTicks_sOnce != -1)
      dispatch_once_f(&SecondsToUpTicks_sOnce, &SecondsToUpTicks_sMultiplier, (dispatch_function_t)_SecondsToUpTicksInit);
    v15 = v14 + SecondsToUpTicks_sMultiplier * a2;
    if (gCLIPINTimer)
    {
      v16 = (id)gCLIPINTimer;
      dispatch_source_cancel(v16);
      v17 = (void *)gCLIPINTimer;
      gCLIPINTimer = 0;

    }
    v18 = dispatch_source_create(MEMORY[0x1E0C80DD0], 0, 0, MEMORY[0x1E0C80D38]);
    v19 = (void *)gCLIPINTimer;
    gCLIPINTimer = (uint64_t)v18;

    v20 = gCLIPINTimer;
    handler[0] = v13;
    handler[1] = 3221225472;
    handler[2] = __CLIPromptForPIN_block_invoke;
    handler[3] = &unk_1E25DBE50;
    v30 = v15;
    v29 = v11;
    dispatch_source_set_event_handler(v20, handler);
    v21 = gCLIPINTimer;
    v22 = dispatch_time(0, 1000000000);
    dispatch_source_set_timer(v21, v22, 0x3B9ACA00uLL, 0x5F5E100uLL);
    dispatch_resume((dispatch_object_t)gCLIPINTimer);

  }
  if (gCLIProgressMax >= 1)
  {
    FPrintF(*v12, "\r%*s\r", v5, v6, v7, v8, v9, v10, gCLIProgressMax);
    gCLIProgressMax = 0;
  }
  v26[0] = v13;
  v26[1] = 3221225472;
  v26[2] = __CLIPromptForPIN_block_invoke_2;
  v26[3] = &unk_1E25DBE78;
  v27 = v11;
  v23 = v11;
  CLIInteractiveReadLine_b("Enter PIN: ", v24, v26);

}

uint64_t CLIScheduleExit(uint64_t result)
{
  if (!gCLIInteractiveMode)
    exit(result);
  gExitCode = result;
  gCLIInteractiveMode = 0;
  return result;
}

void CUCLIPrefs(void *a1, const char *a2, void *a3)
{
  __CFString *v5;
  id v6;
  int v7;
  int v8;
  uint64_t v9;
  const char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  __CFString *v23;
  _DWORD *v24;
  __CFString *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  __CFString *v32;
  __CFString *v33;
  int v34;
  int v35;
  id v36;
  int v37;
  void *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  __CFString *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  void *v54;
  void *v55;
  id v56;
  uint64_t v57;
  uint64_t v58;
  id v59;
  id v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  void *v64;
  int v65;
  uint64_t v66;
  uint64_t v67;
  __CFString *v68;
  const char *v69;
  const __CFString *v70;
  uint64_t v71;
  __CFString *v72;
  void *v73;
  uint64_t v74;
  uint64_t (**v75)(unsigned __int8 *, int64_t, _QWORD);
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t (*v88)(unsigned __int8 *, int64_t, _QWORD);
  id v89;
  uint64_t v90;
  void *v91;
  uint64_t (*v92)(unsigned __int8 *, int64_t, _QWORD);
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  int v111;
  const __CFString *v112;
  uint64_t v113;
  uint64_t v114;
  __CFString *v115;
  uint64_t v116;
  void *v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t (*v130)(unsigned __int8 *, int64_t, _QWORD);
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  const void *v144;
  const __CFString *v145;
  void *v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  const __CFString *v154;
  const __CFString *v155;
  __CFString *v156;
  uint64_t (**v157)(unsigned __int8 *, int64_t, _QWORD);
  int v158;
  int v159;
  id v160;
  uint64_t v161;
  uint64_t v162;
  id v163;
  uint64_t v164;
  const char *v165;
  uint64_t v166;
  void *v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;
  uint64_t v173;
  void *v174;
  uint64_t v175;
  uint64_t v176;
  __CFString *v177;
  uint64_t v178;
  __CFString *v179;
  const __CFString *v180;
  uint64_t v181;
  __CFString *v182;
  uint64_t v183;
  uint64_t v184;
  id v185;
  id v186;
  __CFString *v187;
  __CFString *v188;
  __CFString *v189;
  const __CFString *applicationID;
  id obj;
  uint64_t v192;
  __int128 v193;
  __int128 v194;
  __int128 v195;
  __int128 v196;
  __int128 v197;
  __int128 v198;
  __int128 v199;
  __int128 v200;
  __int128 v201;
  __int128 v202;
  __int128 v203;
  __int128 v204;
  __int128 v205;
  __int128 v206;
  __int128 v207;
  __int128 v208;
  _BYTE v209[128];
  _BYTE v210[128];
  _BYTE v211[128];
  _BYTE v212[128];
  uint64_t v213;

  v213 = *MEMORY[0x1E0C80C00];
  v5 = a1;
  v6 = a3;
  SwitchToMobileUser();
  v7 = gArgI;
  v8 = gArgC;
  if (gArgI >= gArgC)
  {
    v10 = "";
  }
  else
  {
    v9 = gArgI;
    v7 = ++gArgI;
    v10 = *(const char **)(gArgV + 8 * v9);
  }
  if (!*v10 || !strcasecmp(v10, "read") || !strcasecmp(v10, "get"))
  {
    if (gCUCLIFilePath)
    {
      v23 = (__CFString *)CFPropertyListCreateFromFilePath((const char *)gCUCLIFilePath, 1uLL, 0);
      v24 = &unk_1EE06A000;
      if (v23)
      {
        v25 = v23;
        objc_opt_class();
        v189 = v25;
        if ((objc_opt_isKindOfClass() & 1) == 0)
        {
          FPrintF((uint64_t (*)(unsigned __int8 *, int64_t, _QWORD))*MEMORY[0x1E0C80C10], "error: Prefs file is not a dictionary\n", v26, v27, v28, v29, v30, v31, v183);
          obj = 0;
          v32 = 0;
          v33 = v25;
LABEL_108:
          v36 = 0;
          gExitCode = 1;
          goto LABEL_81;
        }
      }
      else
      {
        objc_msgSend(MEMORY[0x1E0C99E08], "dictionary");
        v189 = (__CFString *)objc_claimAutoreleasedReturnValue();
      }
    }
    else
    {
      v189 = 0;
      v24 = (_DWORD *)&unk_1EE06A000;
    }
    v34 = fileno((FILE *)*MEMORY[0x1E0C80C20]);
    v35 = isatty(v34);
    v187 = v5;
    if (v24[42] >= gArgC)
    {
      v37 = v35;
      if (v189)
      {
        -[__CFString allKeys](v189, "allKeys");
        v38 = (void *)objc_claimAutoreleasedReturnValue();
      }
      else
      {
        v38 = CFPrefs_CopyKeys(v5, 0);
      }
      v54 = v38;
      objc_msgSend(v38, "sortedArrayUsingSelector:", sel_localizedCaseInsensitiveCompare_);
      v55 = (void *)objc_claimAutoreleasedReturnValue();

      v207 = 0u;
      v208 = 0u;
      v205 = 0u;
      v206 = 0u;
      v56 = v55;
      v57 = objc_msgSend(v56, "countByEnumeratingWithState:objects:count:", &v205, v212, 16);
      if (v57)
      {
        v58 = v57;
        v59 = v6;
        v60 = 0;
        LODWORD(v61) = 0;
        v62 = *(_QWORD *)v206;
        do
        {
          v63 = 0;
          v64 = v60;
          do
          {
            if (*(_QWORD *)v206 != v62)
              objc_enumerationMutation(v56);
            v60 = *(id *)(*((_QWORD *)&v205 + 1) + 8 * v63);

            v65 = objc_msgSend(v60, "length");
            if ((int)v61 <= v65)
              v61 = v65;
            else
              v61 = v61;
            ++v63;
            v64 = v60;
          }
          while (v58 != v63);
          v58 = objc_msgSend(v56, "countByEnumeratingWithState:objects:count:", &v205, v212, 16);
        }
        while (v58);

        v6 = v59;
        v24 = (_DWORD *)&unk_1EE06A000;
      }
      else
      {
        v61 = 0;
      }

      v203 = 0u;
      v204 = 0u;
      v201 = 0u;
      v202 = 0u;
      obj = v56;
      v66 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v201, v211, 16);
      if (v66)
      {
        v67 = v66;
        v68 = 0;
        v36 = 0;
        v192 = *(_QWORD *)v202;
        if (v37)
          v69 = "\x1B[0m";
        else
          v69 = "";
        v70 = (const __CFString *)*MEMORY[0x1E0C9B248];
        v33 = v189;
        if (v187)
          v70 = v187;
        applicationID = v70;
        do
        {
          v71 = 0;
          v72 = v68;
          v73 = v36;
          do
          {
            if (*(_QWORD *)v202 != v192)
              objc_enumerationMutation(obj);
            v68 = (__CFString *)*(id *)(*((_QWORD *)&v201 + 1) + 8 * v71);

            if (v33)
            {
              -[__CFString objectForKeyedSubscript:](v33, "objectForKeyedSubscript:", v68);
              v74 = objc_claimAutoreleasedReturnValue();
            }
            else
            {
              v74 = (uint64_t)CFPreferencesCopyAppValue(v68, applicationID);
            }
            v36 = (id)v74;
            v75 = (uint64_t (**)(unsigned __int8 *, int64_t, _QWORD))MEMORY[0x1E0C80C20];

            FPrintF(*v75, "%-*@ : %s", v76, v77, v78, v79, v80, v81, v61);
            objc_opt_class();
            if ((objc_opt_isKindOfClass() & 1) != 0 && (unint64_t)objc_msgSend(v36, "length") <= 0x80)
            {
              v88 = *v75;
              v89 = objc_retainAutorelease(v36);
              v90 = objc_msgSend(v89, "bytes");
              v91 = v89;
              v75 = (uint64_t (**)(unsigned __int8 *, int64_t, _QWORD))MEMORY[0x1E0C80C20];
              objc_msgSend(v91, "length");
              v92 = v88;
              v33 = v189;
              FPrintF(v92, "%.3H", v93, v94, v95, v96, v97, v98, v90);
            }
            else
            {
              FPrintF(*v75, "%@", v82, v83, v84, v85, v86, v87, (uint64_t)v36);
            }
            FPrintF(*v75, "%s\n", v99, v100, v101, v102, v103, v104, (uint64_t)v69);
            ++v71;
            v72 = v68;
            v73 = v36;
          }
          while (v67 != v71);
          v67 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v201, v211, 16);
        }
        while (v67);

        v24 = (_DWORD *)&unk_1EE06A000;
      }
      else
      {
        v36 = 0;
        v33 = v189;
      }

      v5 = v187;
      if (!objc_msgSend(obj, "count"))
        FPrintF((uint64_t (*)(unsigned __int8 *, int64_t, _QWORD))*MEMORY[0x1E0C80C10], "No prefs found\n", v105, v106, v107, v108, v109, v110, v183);
    }
    else
    {
      obj = 0;
      v36 = 0;
      v33 = v189;
    }
    v111 = v24[42];
    if (v111 >= gArgC)
    {
      v32 = 0;
    }
    else
    {
      v185 = v6;
      if (v5)
        v112 = v5;
      else
        v112 = (const __CFString *)*MEMORY[0x1E0C9B248];
      do
      {
        v113 = gArgV;
        v24[42] = v111 + 1;
        v114 = *(_QWORD *)(v113 + 8 * v111);
        objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", v114);
        v115 = (__CFString *)objc_claimAutoreleasedReturnValue();
        if (v189)
        {
          -[__CFString objectForKeyedSubscript:](v189, "objectForKeyedSubscript:", v115);
          v116 = objc_claimAutoreleasedReturnValue();
        }
        else
        {
          v116 = (uint64_t)CFPreferencesCopyAppValue(v115, v112);
        }
        v117 = (void *)v116;

        v36 = v117;
        if (v117)
        {
          objc_opt_class();
          if ((objc_opt_isKindOfClass() & 1) != 0 && (unint64_t)objc_msgSend(v117, "length") <= 0x80)
          {
            v130 = (uint64_t (*)(unsigned __int8 *, int64_t, _QWORD))*MEMORY[0x1E0C80C20];
            v36 = objc_retainAutorelease(v36);
            v131 = objc_msgSend(v36, "bytes");
            objc_msgSend(v36, "length");
            v184 = v131;
            v24 = (_DWORD *)&unk_1EE06A000;
            FPrintF(v130, "%.3H\n", v132, v133, v134, v135, v136, v137, v184);
          }
          else
          {
            FPrintF((uint64_t (*)(unsigned __int8 *, int64_t, _QWORD))*MEMORY[0x1E0C80C20], "%@\n", v124, v125, v126, v127, v128, v129, (uint64_t)v117);
          }
        }
        else
        {
          FPrintF((uint64_t (*)(unsigned __int8 *, int64_t, _QWORD))*MEMORY[0x1E0C80C10], "error: Key '%s' does not exist.\n", v118, v119, v120, v121, v122, v123, v114);
          v36 = 0;
        }

        v111 = v24[42];
      }
      while (v111 < gArgC);
      v32 = 0;
      v6 = v185;
      v5 = v187;
      v33 = v189;
    }
    goto LABEL_81;
  }
  if (!strcasecmp(v10, "write") || !strcasecmp(v10, "set"))
  {
    if (v7 >= v8)
    {
      FPrintF((uint64_t (*)(unsigned __int8 *, int64_t, _QWORD))*MEMORY[0x1E0C80C10], "error: No key specified\n", v11, v12, v13, v14, v15, v16, v183);
      obj = 0;
      v32 = 0;
    }
    else
    {
      gArgI = v7 + 1;
      objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", *(_QWORD *)(gArgV + 8 * v7));
      v32 = (__CFString *)objc_claimAutoreleasedReturnValue();
      v45 = gArgI;
      if (gArgI < gArgC)
      {
        ++gArgI;
        v46 = *(_QWORD *)(gArgV + 8 * v45);
        if (!gCUCLIFilePath)
        {
          v144 = (const void *)objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", v46);
          if (v5)
            v145 = v5;
          else
            v145 = (const __CFString *)*MEMORY[0x1E0C9B248];
          CFPreferencesSetAppValue(v32, v144, v145);
          CFPreferencesAppSynchronize(v5);
          notify_post(a2);
          obj = 0;
LABEL_123:
          v36 = 0;
          v33 = 0;
          goto LABEL_81;
        }
        v47 = (__CFString *)CFPropertyListCreateFromFilePath((const char *)gCUCLIFilePath, 1uLL, 0);
        if (v47)
        {
          v33 = v47;
          objc_opt_class();
          if ((objc_opt_isKindOfClass() & 1) == 0)
          {
            FPrintF((uint64_t (*)(unsigned __int8 *, int64_t, _QWORD))*MEMORY[0x1E0C80C10], "error: Prefs file is not a dictionary\n", v48, v49, v50, v51, v52, v53, v183);
            obj = 0;
            goto LABEL_108;
          }
        }
        else
        {
          objc_msgSend(MEMORY[0x1E0C99E08], "dictionary");
          v33 = (__CFString *)objc_claimAutoreleasedReturnValue();
        }
        objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", v46);
        v146 = (void *)objc_claimAutoreleasedReturnValue();
        -[__CFString setObject:forKeyedSubscript:](v33, "setObject:forKeyedSubscript:", v146, v32);

        v147 = CFPropertyListWriteToFilePath(v33, "binary1", (FILE *)gCUCLIFilePath);
        obj = 0;
        goto LABEL_106;
      }
      FPrintF((uint64_t (*)(unsigned __int8 *, int64_t, _QWORD))*MEMORY[0x1E0C80C10], "error: No value specified\n", v39, v40, v41, v42, v43, v44, v183);
      obj = 0;
    }
    v33 = 0;
    goto LABEL_108;
  }
  if (strcasecmp(v10, "delete") && strcasecmp(v10, "remove"))
  {
    if (!strcasecmp(v10, "keys"))
    {
      v157 = (uint64_t (**)(unsigned __int8 *, int64_t, _QWORD))MEMORY[0x1E0C80C20];
      v158 = fileno((FILE *)*MEMORY[0x1E0C80C20]);
      v159 = isatty(v158);
      v193 = 0u;
      v194 = 0u;
      v195 = 0u;
      v196 = 0u;
      v160 = v6;
      v161 = objc_msgSend(v160, "countByEnumeratingWithState:objects:count:", &v193, v209, 16);
      if (v161)
      {
        v162 = v161;
        v188 = v5;
        v163 = 0;
        v164 = *(_QWORD *)v194;
        if (v159)
          v165 = "\x1B[35m";
        else
          v165 = "";
        do
        {
          v166 = 0;
          v167 = v163;
          do
          {
            if (*(_QWORD *)v194 != v164)
              objc_enumerationMutation(v160);
            v163 = *(id *)(*((_QWORD *)&v193 + 1) + 8 * v166);

            FPrintF(*v157, "%s%@%s\n", v168, v169, v170, v171, v172, v173, (uint64_t)v165);
            ++v166;
            v167 = v163;
          }
          while (v162 != v166);
          v162 = objc_msgSend(v160, "countByEnumeratingWithState:objects:count:", &v193, v209, 16);
        }
        while (v162);

        v5 = v188;
      }

    }
    else
    {
      FPrintF((uint64_t (*)(unsigned __int8 *, int64_t, _QWORD))*MEMORY[0x1E0C80C10], "error: Bad command '%s'. Must be 'read', 'write', 'delete', or 'keys'.\n", v17, v18, v19, v20, v21, v22, (uint64_t)v10);
    }
    obj = 0;
    v32 = 0;
    goto LABEL_123;
  }
  if (gCUCLIFilePath)
  {
    v33 = (__CFString *)CFPropertyListCreateFromFilePath((const char *)gCUCLIFilePath, 1uLL, 0);
    if (!v33)
    {
      obj = 0;
      goto LABEL_110;
    }
    objc_opt_class();
    if ((objc_opt_isKindOfClass() & 1) == 0)
    {
      FPrintF((uint64_t (*)(unsigned __int8 *, int64_t, _QWORD))*MEMORY[0x1E0C80C10], "error: Prefs file is not a dictionary\n", v138, v139, v140, v141, v142, v143, v183);
      obj = 0;
      v32 = 0;
      goto LABEL_108;
    }
    v7 = gArgI;
    v8 = gArgC;
  }
  else
  {
    v33 = 0;
  }
  if (v7 < v8 && !strcasecmp(*(const char **)(gArgV + 8 * v7), "*"))
  {
    gArgI = v7 + 1;
    if (v33)
    {
      -[__CFString allKeys](v33, "allKeys");
      v174 = (void *)objc_claimAutoreleasedReturnValue();
    }
    else
    {
      v174 = CFPrefs_CopyKeys(v5, 0);
    }
    v199 = 0u;
    v200 = 0u;
    v197 = 0u;
    v198 = 0u;
    obj = v174;
    v175 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v197, v210, 16);
    if (v175)
    {
      v176 = v175;
      v186 = v6;
      v177 = 0;
      v178 = *(_QWORD *)v198;
      v179 = v5;
      if (v5)
        v180 = v5;
      else
        v180 = (const __CFString *)*MEMORY[0x1E0C9B248];
      do
      {
        v181 = 0;
        v182 = v177;
        do
        {
          if (*(_QWORD *)v198 != v178)
            objc_enumerationMutation(obj);
          v177 = (__CFString *)*(id *)(*((_QWORD *)&v197 + 1) + 8 * v181);

          if (v33)
            -[__CFString removeObjectForKey:](v33, "removeObjectForKey:", v177);
          else
            CFPreferencesSetAppValue(v177, 0, v180);
          ++v181;
          v182 = v177;
        }
        while (v176 != v181);
        v176 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v197, v210, 16);
      }
      while (v176);

      v5 = v179;
      v6 = v186;
    }

    v7 = gArgI;
    v8 = gArgC;
  }
  else
  {
    obj = 0;
  }
  if (v7 < v8)
  {
    if (v5)
      v154 = v5;
    else
      v154 = (const __CFString *)*MEMORY[0x1E0C9B248];
    do
    {
      gArgI = v7 + 1;
      objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", *(_QWORD *)(gArgV + 8 * v7));
      v155 = (const __CFString *)objc_claimAutoreleasedReturnValue();
      v156 = (__CFString *)v155;
      if (v33)
        -[__CFString setObject:forKeyedSubscript:](v33, "setObject:forKeyedSubscript:", 0, v155);
      else
        CFPreferencesSetAppValue(v155, 0, v154);

      v7 = gArgI;
    }
    while (gArgI < gArgC);
  }
  if (!gCUCLIFilePath)
  {
    CFPreferencesAppSynchronize(v5);
    notify_post(a2);
LABEL_110:
    v32 = 0;
    v36 = 0;
    goto LABEL_81;
  }
  v147 = CFPropertyListWriteToFilePath(v33, "binary1", (FILE *)gCUCLIFilePath);
  v32 = 0;
LABEL_106:
  v36 = 0;
  if ((_DWORD)v147)
  {
    FPrintF((uint64_t (*)(unsigned __int8 *, int64_t, _QWORD))*MEMORY[0x1E0C80C10], "error: %#m\n", v148, v149, v150, v151, v152, v153, v147);
    goto LABEL_108;
  }
LABEL_81:

}

void ErrQuit(int a1, unsigned __int8 *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  VFPrintF((uint64_t (*)(unsigned __int8 *, int64_t, _QWORD))*MEMORY[0x1E0C80C10], a2, (uint64_t)&a9, a4, a5, a6, a7, a8);
  exit(a1);
}

uint64_t CoreAudioCopyDataSourceName(uint64_t a1, int a2, uint64_t a3)
{
  int v4;
  _QWORD v5[4];
  uint64_t v6;
  int v7;
  int v8;

  v7 = 0;
  v8 = a2;
  v6 = 0x6F7574706C73636ELL;
  v5[0] = &v8;
  v5[1] = 4;
  v5[2] = a3;
  v5[3] = 8;
  v4 = 32;
  return softLinkAudioObjectGetPropertyData_685(a1, &v6, 0, 0, &v4, v5);
}

uint64_t initAudioObjectGetPropertyData_686(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  if (CoreAudioLibrary_sOnce_687 != -1)
    dispatch_once(&CoreAudioLibrary_sOnce_687, &__block_literal_global_688);
  softLinkAudioObjectGetPropertyData_685 = (uint64_t (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))dlsym((void *)CoreAudioLibrary_sLib_689, "AudioObjectGetPropertyData");
  return softLinkAudioObjectGetPropertyData_685(a1, a2, a3, a4, a5, a6);
}

uint64_t CoreAudioCopyPropertyData(uint64_t a1, int a2, int a3, int a4, uint64_t a5, uint64_t a6, _QWORD *a7, _QWORD *a8)
{
  void *v13;
  int v14;
  uint64_t v15;
  void *v16;
  uint64_t PropertyData_685;
  uint64_t v18;
  unsigned int size;
  _DWORD size_4[3];

  v13 = 0;
  size_4[0] = a2;
  size_4[1] = a3;
  size_4[2] = a4;
  size = 0;
  v14 = 100;
  while (1)
  {
    v15 = ((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))softLinkAudioObjectGetPropertyDataSize[0])(a1, (uint64_t)size_4, a6, a5, (uint64_t)&size);
    if ((_DWORD)v15)
    {
      v18 = v15;
      goto LABEL_14;
    }
    if (!size)
    {
      if (v13)
      {
        free(v13);
        v13 = 0;
      }
LABEL_10:
      v18 = 0;
      *a7 = v13;
      *a8 = size;
      return v18;
    }
    v16 = malloc_type_realloc(v13, size, 0xC2AF1A96uLL);
    if (!v16)
      break;
    v13 = v16;
    PropertyData_685 = softLinkAudioObjectGetPropertyData_685(a1, size_4, a6, a5, &size, v16);
    if (!(_DWORD)PropertyData_685)
      goto LABEL_10;
    v18 = PropertyData_685;
    if (!--v14)
      goto LABEL_7;
  }
  v18 = 4294960568;
LABEL_14:
  if (v13)
LABEL_7:
    free(v13);
  return v18;
}

uint64_t initAudioObjectGetPropertyDataSize(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  if (CoreAudioLibrary_sOnce_687 != -1)
    dispatch_once(&CoreAudioLibrary_sOnce_687, &__block_literal_global_688);
  softLinkAudioObjectGetPropertyDataSize[0] = (uint64_t (*)())dlsym((void *)CoreAudioLibrary_sLib_689, "AudioObjectGetPropertyDataSize");
  return ((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))softLinkAudioObjectGetPropertyDataSize[0])(a1, a2, a3, a4, a5);
}

uint64_t CoreAudioGetPropertyData(uint64_t a1, int a2, int a3, int a4, uint64_t a5, uint64_t a6, uint64_t a7, unsigned int a8, _QWORD *a9)
{
  uint64_t result;
  BOOL v10;
  unsigned int v11;
  _DWORD v12[3];

  v12[0] = a2;
  v12[1] = a3;
  v12[2] = a4;
  v11 = a8;
  result = softLinkAudioObjectGetPropertyData_685(a1, v12, a6, a5, &v11, a7);
  if (a9)
    v10 = (_DWORD)result == 0;
  else
    v10 = 0;
  if (v10)
    *a9 = v11;
  return result;
}

uint64_t CoreAudioSetPropertyData(uint64_t a1, int a2, int a3, int a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  _DWORD v9[3];

  v9[0] = a2;
  v9[1] = a3;
  v9[2] = a4;
  return softLinkAudioObjectSetPropertyData(a1, v9, a6, a5, a8, a7);
}

uint64_t initAudioObjectSetPropertyData(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  if (CoreAudioLibrary_sOnce_687 != -1)
    dispatch_once(&CoreAudioLibrary_sOnce_687, &__block_literal_global_688);
  softLinkAudioObjectSetPropertyData = (uint64_t (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))dlsym((void *)CoreAudioLibrary_sLib_689, "AudioObjectSetPropertyData");
  return softLinkAudioObjectSetPropertyData(a1, a2, a3, a4, a5, a6);
}

uint64_t CoreAudioFindDeviceByUID(uint64_t a1, uint64_t a2)
{
  int v3;
  uint64_t v4;
  int v5;
  uint64_t v6;

  v6 = a1;
  v4 = 0x676C6F6272756964;
  v5 = 0;
  v3 = 4;
  return softLinkAudioObjectGetPropertyData_685(1, &v4, 8, &v6, &v3, a2);
}

uint64_t CoreAudioGetDefaultAudioDevice(uint64_t a1)
{
  int v2;
  uint64_t v3;
  int v4;

  v3 = 0x676C6F62644F7574;
  v4 = 0;
  v2 = 4;
  return softLinkAudioObjectGetPropertyData_685(1, &v3, 0, 0, &v2, a1);
}

uint64_t CoreAudioSetDefaultAudioDevice(int a1, int a2, _DWORD *a3)
{
  uint64_t v5;
  int *v6;
  int v8;
  int v9;
  uint64_t v10;
  int v11;
  int v12;

  v12 = a1;
  v8 = 0;
  v10 = 0x676C6F62644F7574;
  v11 = 0;
  if (a3)
  {
    v9 = 4;
    if (softLinkAudioObjectGetPropertyData_685(1, &v10, 0, 0, &v9, a3))
      *a3 = 0;
  }
  if (a2)
  {
    v8 = 1;
    v5 = 4;
    v6 = &v8;
  }
  else
  {
    v6 = 0;
    v5 = 0;
  }
  v9 = 4;
  return softLinkAudioObjectSetPropertyData(1, &v10, v5, v6, 4, &v12);
}

uint64_t CoreAudioRampParameterStart(NSObject **a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, int a6, NSObject *a7, uint64_t a8, float a9, double a10)
{
  int v13;
  int v14;
  int v15;
  uint64_t v20;
  float v21;
  NSObject *v22;
  NSObject *v23;
  NSObject *v24;
  unint64_t v25;
  dispatch_time_t v26;
  _QWORD handler[10];
  float v29;
  int v30;
  int v31;
  int v32;
  int v33;
  float v34;
  _QWORD v35[3];
  int v36;
  uint64_t v37;
  float *v38;
  uint64_t v39;
  int v40;

  v13 = a5;
  v14 = a4;
  v15 = a3;
  v37 = 0;
  v38 = (float *)&v37;
  v39 = 0x2000000000;
  v40 = 0;
  v35[0] = 0;
  v35[1] = v35;
  v35[2] = 0x2000000000;
  v36 = 0;
  v20 = ((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))softLinkAudioUnitGetParameter_698[0])(a2, a3, a4, a5, (uint64_t)&v40);
  if (!(_DWORD)v20)
  {
    v21 = v38[6];
    if (a7)
      v22 = a7;
    else
      v22 = MEMORY[0x1E0C80D38];
    v23 = dispatch_source_create(MEMORY[0x1E0C80DD0], 0, 0, v22);
    if (v23)
    {
      v24 = v23;
      v25 = (unint64_t)(a10 * 1000000000.0 / (double)a6);
      handler[0] = MEMORY[0x1E0C809B0];
      handler[1] = 0x40000000;
      handler[2] = __CoreAudioRampParameterStart_block_invoke;
      handler[3] = &unk_1E25DBEC0;
      v29 = (float)(a9 - v21) / (float)a6;
      v30 = v15;
      v31 = v14;
      handler[6] = v35;
      handler[7] = a2;
      v32 = v13;
      v33 = a6;
      v34 = a9;
      handler[4] = a8;
      handler[5] = &v37;
      handler[8] = v23;
      handler[9] = a1;
      dispatch_source_set_event_handler(v23, handler);
      v26 = dispatch_time(0, v25);
      dispatch_source_set_timer(v24, v26, v25, 0x4C4B40uLL);
      if (a1)
        *a1 = v24;
      dispatch_resume(v24);
      v20 = 0;
    }
    else
    {
      v20 = 4294960596;
    }
  }
  _Block_object_dispose(v35, 8);
  _Block_object_dispose(&v37, 8);
  return v20;
}

uint64_t initAudioUnitSetParameter_701(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, float a6)
{
  if (AudioToolboxLibrary_sOnce_702 != -1)
    dispatch_once(&AudioToolboxLibrary_sOnce_702, &__block_literal_global_8);
  softLinkAudioUnitSetParameter_700[0] = (uint64_t (*)())dlsym((void *)AudioToolboxLibrary_sLib_703, "AudioUnitSetParameter");
  return ((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, float))softLinkAudioUnitSetParameter_700[0])(a1, a2, a3, a4, a5, a6);
}

uint64_t initAudioUnitGetParameter_707(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  if (AudioToolboxLibrary_sOnce_702 != -1)
    dispatch_once(&AudioToolboxLibrary_sOnce_702, &__block_literal_global_8);
  softLinkAudioUnitGetParameter_698[0] = (uint64_t (*)())dlsym((void *)AudioToolboxLibrary_sLib_703, "AudioUnitGetParameter");
  return ((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))softLinkAudioUnitGetParameter_698[0])(a1, a2, a3, a4, a5);
}

uint64_t _AESGCMCoreCryptoInitialize(uint64_t a1, int a2, uint64_t a3, uint64_t a4)
{
  size_t *v5;
  uint64_t v6;
  void *v7;

  if (a4 != 32)
    goto LABEL_5;
  if (a2 != 2)
  {
    if (a2 == 1)
    {
      v5 = (size_t *)ccaes_gcm_encrypt_mode();
      goto LABEL_7;
    }
LABEL_5:
    v6 = 4294960591;
    goto LABEL_10;
  }
  v5 = (size_t *)ccaes_gcm_decrypt_mode();
LABEL_7:
  *(_QWORD *)(a1 + 24) = v5;
  if (!*v5)
  {
    v6 = 4294960553;
    goto LABEL_10;
  }
  v7 = malloc_type_calloc(1uLL, *v5, 0xD29341B8uLL);
  *(_QWORD *)(a1 + 32) = v7;
  if (!v7)
  {
    v6 = 4294960568;
    goto LABEL_10;
  }
  v6 = ccgcm_init();
  if ((_DWORD)v6)
LABEL_10:
    _AESGCMCoreCryptoFinalize(a1);
  return v6;
}

void _AESGCMCoreCryptoFinalize(uint64_t a1)
{
  void *v1;
  void **v2;
  rsize_t **v3;

  v2 = (void **)(a1 + 32);
  v1 = *(void **)(a1 + 32);
  v3 = (rsize_t **)(v2 - 1);
  if (!v1)
  {
    --v2;
LABEL_8:
    *v2 = 0;
    return;
  }
  if (!*v3)
  {
    *v3 = 0;
    goto LABEL_7;
  }
  memset_s(v1, **v3, 0, **v3);
  v1 = *v2;
  *v3 = 0;
  if (v1)
  {
LABEL_7:
    free(v1);
    goto LABEL_8;
  }
}

uint64_t _AESGCMCoreCryptoEncryptMessage(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  uint64_t result;

  result = 4294960591;
  if (a3 == 12 && a10 == 16)
  {
    result = ccgcm_reset();
    if (!(_DWORD)result)
    {
      result = ccgcm_set_iv();
      if (!(_DWORD)result)
      {
        if (!a5 || (result = ccgcm_aad(), !(_DWORD)result))
        {
          if (!a7)
            return ccgcm_finalize();
          result = ccgcm_update();
          if (!(_DWORD)result)
            return ccgcm_finalize();
        }
      }
    }
  }
  return result;
}

uint64_t _AESGCMCoreCryptoDecryptMessage(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  uint64_t result;

  result = 4294960591;
  if (a3 == 12 && a10 == 16)
  {
    result = ccgcm_reset();
    if (!(_DWORD)result)
    {
      result = ccgcm_set_iv();
      if (!(_DWORD)result)
      {
        if (!a5 || (result = ccgcm_aad(), !(_DWORD)result))
        {
          if (!a7)
            return ccgcm_finalize();
          result = ccgcm_update();
          if (!(_DWORD)result)
            return ccgcm_finalize();
        }
      }
    }
  }
  return result;
}

uint64_t _AESGCMCoreCryptoEncryptMessageOneShot(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  if (a3 != 32 || a5 != 12 || a12 != 16)
    return 4294960591;
  ccaes_gcm_encrypt_mode();
  return ccgcm_one_shot();
}

uint64_t _AESGCMCoreCryptoDecryptMessageOneShot(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  uint64_t result;

  result = 4294960591;
  if (a3 == 32 && a5 == 12 && a12 == 16)
  {
    ccaes_gcm_decrypt_mode();
    return ccgcm_one_shot();
  }
  return result;
}

uint64_t _ChaCha20Poly1305Initialize(uint64_t a1, uint64_t a2, __int128 *a3, uint64_t a4)
{
  uint64_t result;
  __int128 v6;

  if (a4 != 32)
    return 4294960591;
  result = 0;
  v6 = *a3;
  *(_OWORD *)(a1 + 40) = a3[1];
  *(_OWORD *)(a1 + 24) = v6;
  return result;
}

uint64_t _ChaCha20Poly1305Finalize(uint64_t a1)
{
  return memset_s((void *)(a1 + 24), 0x20uLL, 0, 0x20uLL);
}

uint64_t _ChaCha20Poly1305EncryptMessage(uint64_t a1, _DWORD *a2, uint64_t a3, unsigned int *a4, unint64_t a5, int8x16_t *a6, unint64_t a7, int8x16_t *a8, uint64_t a9, uint64_t a10)
{
  uint64_t result;

  result = 4294960591;
  if (a3 == 12 && a10 == 16)
  {
    _chacha20_poly1305_encrypt_all((_DWORD *)(a1 + 24), a2, 12, a4, a5, a6, a7, a8, a9);
    return 0;
  }
  return result;
}

uint64_t _ChaCha20Poly1305DecryptMessage(uint64_t a1, _DWORD *a2, uint64_t a3, unsigned int *a4, unint64_t a5, int8x16_t *a6, unint64_t a7, int8x16_t *a8, uint64_t a9, uint64_t a10)
{
  if (a3 == 12 && a10 == 16)
    return _chacha20_poly1305_decrypt_all((_DWORD *)(a1 + 24), a2, 12, a4, a5, a6, a7, a8, a9, 16);
  else
    return 4294960591;
}

uint64_t _ChaCha20Poly1305EncryptMessageOneShot(uint64_t a1, _DWORD *a2, uint64_t a3, _DWORD *a4, uint64_t a5, unsigned int *a6, unint64_t a7, int8x16_t *a8, unint64_t a9, int8x16_t *a10, uint64_t a11, uint64_t a12)
{
  uint64_t result;

  result = 4294960591;
  if (a3 == 32 && a5 == 12 && a12 == 16)
  {
    _chacha20_poly1305_encrypt_all(a2, a4, 12, a6, a7, a8, a9, a10, a11);
    return 0;
  }
  return result;
}

uint64_t _ChaCha20Poly1305DecryptMessageOneShot(uint64_t a1, _DWORD *a2, uint64_t a3, _DWORD *a4, uint64_t a5, unsigned int *a6, unint64_t a7, int8x16_t *a8, unint64_t a9, int8x16_t *a10, uint64_t a11, uint64_t a12)
{
  if (a3 == 32 && a5 == 12 && a12 == 16)
    return _chacha20_poly1305_decrypt_all(a2, a4, 12, a6, a7, a8, a9, a10, a11, 16);
  else
    return 4294960591;
}

const void *CryptoAEADCreate(uint64_t (**a1)(uint64_t, uint64_t, uint64_t, uint64_t), uint64_t a2, uint64_t a3, uint64_t a4, int *a5)
{
  uint64_t Instance;
  const void *v11;
  int v12;

  if (gCryptoAEADInitOnce != -1)
    dispatch_once_f(&gCryptoAEADInitOnce, 0, (dispatch_function_t)_CryptoAEADGetTypeID);
  Instance = _CFRuntimeCreateInstance();
  v11 = (const void *)Instance;
  if (!Instance)
  {
    v12 = -6728;
    if (!a5)
      return v11;
    goto LABEL_7;
  }
  *(_OWORD *)(Instance + 248) = 0u;
  *(_OWORD *)(Instance + 232) = 0u;
  *(_OWORD *)(Instance + 216) = 0u;
  *(_OWORD *)(Instance + 200) = 0u;
  *(_OWORD *)(Instance + 184) = 0u;
  *(_OWORD *)(Instance + 168) = 0u;
  *(_OWORD *)(Instance + 152) = 0u;
  *(_OWORD *)(Instance + 136) = 0u;
  *(_OWORD *)(Instance + 120) = 0u;
  *(_OWORD *)(Instance + 104) = 0u;
  *(_OWORD *)(Instance + 88) = 0u;
  *(_OWORD *)(Instance + 72) = 0u;
  *(_OWORD *)(Instance + 56) = 0u;
  *(_OWORD *)(Instance + 24) = 0u;
  *(_OWORD *)(Instance + 40) = 0u;
  *(_OWORD *)(Instance + 280) = 0u;
  *(_OWORD *)(Instance + 296) = 0u;
  *(_OWORD *)(Instance + 264) = 0u;
  *(_QWORD *)(Instance + 16) = a1;
  v12 = (*a1)(Instance, a2, a3, a4);
  if (v12)
  {
    CFRelease(v11);
    v11 = 0;
  }
  if (a5)
LABEL_7:
    *a5 = v12;
  return v11;
}

uint64_t _CryptoAEADGetTypeID()
{
  uint64_t result;

  result = _CFRuntimeRegisterClass();
  gCryptoAEADTypeID = result;
  return result;
}

uint64_t _CryptoAEADFinalize(uint64_t result)
{
  uint64_t (*v1)(void);

  v1 = *(uint64_t (**)(void))(*(_QWORD *)(result + 16) + 8);
  if (v1)
    return v1();
  return result;
}

uint64_t CryptoAEADEncryptMessage(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 16) + 16))();
}

uint64_t CryptoAEADDecryptMessage(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 16) + 24))();
}

uint64_t CryptoAEADEncryptMessageOneShot(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  uint64_t (*v17)(void);
  uint64_t result;
  _QWORD *v19;
  unsigned int v20;

  v17 = *(uint64_t (**)(void))(a1 + 32);
  if (v17)
    return v17();
  v20 = 0;
  v19 = CryptoAEADCreate((uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))a1, 1, a2, a3, (int *)&v20);
  result = v20;
  if (!v20)
  {
    if (!v19)
      return 4294960534;
    v20 = (*(uint64_t (**)(_QWORD *, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(v19[2] + 16))(v19, a4, a5, a6, a7, a8, a9, a10, a11, a12);
LABEL_8:
    CFRelease(v19);
    return v20;
  }
  if (v19)
    goto LABEL_8;
  return result;
}

uint64_t CryptoAEADDecryptMessageOneShot(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  uint64_t (*v17)(void);
  uint64_t result;
  _QWORD *v19;
  unsigned int v20;

  v17 = *(uint64_t (**)(void))(a1 + 40);
  if (v17)
    return v17();
  v20 = 0;
  v19 = CryptoAEADCreate((uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))a1, 2, a2, a3, (int *)&v20);
  result = v20;
  if (!v20)
  {
    if (!v19)
      return 4294960534;
    v20 = (*(uint64_t (**)(_QWORD *, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(v19[2] + 24))(v19, a4, a5, a6, a7, a8, a9, a10, a11, a12);
LABEL_8:
    CFRelease(v19);
    return v20;
  }
  if (v19)
    goto LABEL_8;
  return result;
}

uint64_t _MD5Init(uint64_t a1)
{
  return CC_MD5_Init((CC_MD5_CTX *)(a1 + 8));
}

uint64_t _MD5Update(uint64_t a1, const void *a2, CC_LONG a3)
{
  return CC_MD5_Update((CC_MD5_CTX *)(a1 + 8), a2, a3);
}

uint64_t _MD5Final(uint64_t a1, unsigned __int8 *md)
{
  return CC_MD5_Final(md, (CC_MD5_CTX *)(a1 + 8));
}

uint64_t _SHA1Init(uint64_t a1)
{
  return CC_SHA1_Init((CC_SHA1_CTX *)(a1 + 8));
}

uint64_t _SHA1Update(uint64_t a1, const void *a2, CC_LONG a3)
{
  return CC_SHA1_Update((CC_SHA1_CTX *)(a1 + 8), a2, a3);
}

uint64_t _SHA1Final(uint64_t a1, unsigned __int8 *md)
{
  return CC_SHA1_Final(md, (CC_SHA1_CTX *)(a1 + 8));
}

uint64_t _SHA256Init(uint64_t a1)
{
  return CC_SHA256_Init((CC_SHA256_CTX *)(a1 + 8));
}

uint64_t _SHA256Update(uint64_t a1, const void *a2, CC_LONG a3)
{
  return CC_SHA256_Update((CC_SHA256_CTX *)(a1 + 8), a2, a3);
}

uint64_t _SHA256Final(uint64_t a1, unsigned __int8 *md)
{
  return CC_SHA256_Final(md, (CC_SHA256_CTX *)(a1 + 8));
}

uint64_t _SHA512Init(uint64_t a1)
{
  return CC_SHA512_Init((CC_SHA512_CTX *)(a1 + 8));
}

uint64_t _SHA512Update(uint64_t a1, const void *a2, CC_LONG a3)
{
  return CC_SHA512_Update((CC_SHA512_CTX *)(a1 + 8), a2, a3);
}

uint64_t _SHA512Final(uint64_t a1, unsigned __int8 *md)
{
  return CC_SHA512_Final(md, (CC_SHA512_CTX *)(a1 + 8));
}

uint64_t _SHA3Init(uint64_t a1)
{
  uint64_t result;

  *(_OWORD *)(a1 + 8) = 0u;
  result = a1 + 8;
  *(_QWORD *)(result + 272) = 0;
  *(_OWORD *)(result + 240) = 0u;
  *(_OWORD *)(result + 256) = 0u;
  *(_OWORD *)(result + 208) = 0u;
  *(_OWORD *)(result + 224) = 0u;
  *(_OWORD *)(result + 176) = 0u;
  *(_OWORD *)(result + 192) = 0u;
  *(_OWORD *)(result + 144) = 0u;
  *(_OWORD *)(result + 160) = 0u;
  *(_OWORD *)(result + 112) = 0u;
  *(_OWORD *)(result + 128) = 0u;
  *(_OWORD *)(result + 80) = 0u;
  *(_OWORD *)(result + 96) = 0u;
  *(_OWORD *)(result + 48) = 0u;
  *(_OWORD *)(result + 64) = 0u;
  *(_OWORD *)(result + 16) = 0u;
  *(_OWORD *)(result + 32) = 0u;
  return result;
}

uint64_t *_SHA3Update(uint64_t *result, _QWORD *__src, size_t __n)
{
  size_t v3;
  _QWORD *v4;
  uint64_t *v5;
  uint64_t *v6;
  uint64_t v7;
  size_t v8;
  unint64_t v9;

  v3 = __n;
  v4 = __src;
  v5 = result;
  v6 = result + 1;
  v7 = result[26];
  if (v7)
  {
    if (72 - v7 >= __n)
      v8 = __n;
    else
      v8 = 72 - v7;
    result = (uint64_t *)memcpy((char *)result + v7 + 216, __src, v8);
    v9 = v5[26] + v8;
    v5[26] = v9;
    if (v9 < 0x48)
      return result;
    v4 = (_QWORD *)((char *)v4 + v8);
    v3 -= v8;
    result = (uint64_t *)_SHA3_Block(v6, v5 + 27);
  }
  if (v3 >= 0x48)
  {
    do
    {
      result = (uint64_t *)_SHA3_Block(v6, v4);
      v4 += 9;
      v3 -= 72;
    }
    while (v3 > 0x47);
  }
  v5[26] = v3;
  if (v3)
    return (uint64_t *)memcpy(v5 + 27, v4, v3);
  return result;
}

uint64_t _SHA3Final(uint64_t a1, uint64_t a2)
{
  uint64_t *v4;
  _QWORD *v5;
  uint64_t v6;
  unint64_t v7;

  v4 = (uint64_t *)(a1 + 8);
  v5 = (_QWORD *)(a1 + 216);
  v6 = *(_QWORD *)(a1 + 208);
  *(_QWORD *)(a1 + 208) = v6 + 1;
  *(_BYTE *)(a1 + 216 + v6) = 6;
  bzero((void *)(a1 + 216 + *(_QWORD *)(a1 + 208)), 72 - *(_QWORD *)(a1 + 208));
  *(_BYTE *)(a1 + 287) |= 0x80u;
  _SHA3_Block(v4, v5);
  v7 = 0;
  do
    *(_QWORD *)(a2 + v7 * 8) = v4[v7];
  while (v7++ < 7);
  return memset_s(v4, 0x118uLL, 0, 0x118uLL);
}

uint64_t CryptoHashDescriptorGetDigestSize(uint64_t a1)
{
  return *(_QWORD *)(a1 + 24);
}

uint64_t CryptoHashInit(uint64_t (***a1)(void), uint64_t (**a2)(void))
{
  *a1 = a2;
  return (*a2)();
}

uint64_t CryptoHashUpdate(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 8))(a1);
}

uint64_t CryptoHashFinal(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 16))(a1);
}

uint64_t CryptoHashOneShot(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  uint64_t v27;
  uint64_t v28;

  v28 = *MEMORY[0x1E0C80C00];
  v26 = 0u;
  v27 = 0;
  v25 = 0u;
  v24 = 0u;
  v23 = 0u;
  v22 = 0u;
  v21 = 0u;
  v20 = 0u;
  v19 = 0u;
  v18 = 0u;
  v16 = 0u;
  v17 = 0u;
  v14 = 0u;
  v15 = 0u;
  v12 = 0u;
  v13 = 0u;
  v10 = 0u;
  v11 = 0u;
  v9 = a1;
  (*(void (**)(uint64_t *))a1)(&v9);
  (*(void (**)(uint64_t *, uint64_t, uint64_t))(a1 + 8))(&v9, a2, a3);
  return (*(uint64_t (**)(uint64_t *, uint64_t))(a1 + 16))(&v9, a4);
}

uint64_t CryptoHMACInit(_BYTE *a1, uint64_t a2, char *a3, unint64_t a4)
{
  unint64_t v4;
  _BYTE *v8;
  _BYTE *v9;
  unint64_t v10;
  char v11;
  _BYTE v13[64];
  _BYTE v14[128];
  uint64_t v15;

  v4 = a4;
  v15 = *MEMORY[0x1E0C80C00];
  if (*(_QWORD *)(a2 + 32) < a4)
  {
    *(_QWORD *)a1 = a2;
    (*(void (**)(_BYTE *))a2)(a1);
    (*(void (**)(_BYTE *, char *, unint64_t))(*(_QWORD *)a1 + 8))(a1, a3, v4);
    a3 = v13;
    (*(void (**)(_BYTE *, _BYTE *))(*(_QWORD *)a1 + 16))(a1, v13);
    v4 = *(_QWORD *)(a2 + 24);
  }
  if (v4)
  {
    v8 = a1 + 288;
    v9 = v14;
    v10 = v4;
    do
    {
      v11 = *a3++;
      *v9++ = v11 ^ 0x36;
      *v8++ = v11 ^ 0x5C;
      --v10;
    }
    while (v10);
  }
  for (; v4 < *(_QWORD *)(a2 + 32); ++v4)
  {
    v14[v4] = 54;
    a1[v4 + 288] = 92;
  }
  *(_QWORD *)a1 = a2;
  (*(void (**)(_BYTE *))a2)(a1);
  return (*(uint64_t (**)(_BYTE *, _BYTE *, _QWORD))(*(_QWORD *)a1 + 8))(a1, v14, *(_QWORD *)(a2 + 32));
}

uint64_t CryptoHMACUpdate(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 8))(a1);
}

uint64_t CryptoHMACFinal(uint64_t *a1, uint64_t a2)
{
  uint64_t v4;

  v4 = *a1;
  (*(void (**)(uint64_t *))(*a1 + 16))(a1);
  *a1 = v4;
  (*(void (**)(uint64_t *))v4)(a1);
  (*(void (**)(uint64_t *, uint64_t *, _QWORD))(*a1 + 8))(a1, a1 + 36, *(_QWORD *)(v4 + 32));
  (*(void (**)(uint64_t *, uint64_t, _QWORD))(*a1 + 8))(a1, a2, *(_QWORD *)(v4 + 24));
  return (*(uint64_t (**)(uint64_t *, uint64_t))(*a1 + 16))(a1, a2);
}

uint64_t CryptoHMACOneShot(uint64_t a1, char *a2, unint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  _OWORD v10[26];
  uint64_t v11;

  v11 = *MEMORY[0x1E0C80C00];
  memset(v10, 0, sizeof(v10));
  CryptoHMACInit(v10, a1, a2, a3);
  (*(void (**)(_OWORD *, uint64_t, uint64_t))(*(_QWORD *)&v10[0] + 8))(v10, a4, a5);
  return CryptoHMACFinal((uint64_t *)v10, a6);
}

uint64_t CryptoHKDF(uint64_t a1, uint64_t a2, uint64_t a3, char *a4, unint64_t a5, uint64_t a6, uint64_t a7, unint64_t a8, uint64_t a9)
{
  unint64_t v12;
  uint64_t result;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  unint64_t i;
  size_t v23;
  char v24;
  _OWORD v25[26];
  char v26[64];
  char v27;
  uint64_t __src[54];

  v12 = a5;
  __src[53] = *MEMORY[0x1E0C80C00];
  if (!a5)
  {
    v12 = *(_QWORD *)(a1 + 24);
    a4 = &v27;
    __memset_chk();
  }
  memset(v25, 0, sizeof(v25));
  v24 = 0;
  memset(__src, 0, 416);
  CryptoHMACInit(__src, a1, a4, v12);
  (*(void (**)(uint64_t *, uint64_t, uint64_t))(__src[0] + 8))(__src, a2, a3);
  result = CryptoHMACFinal(__src, (uint64_t)v26);
  v18 = *(_QWORD *)(a1 + 24);
  if (a8 / v18 * v18 == a8)
    v19 = a8 / v18;
  else
    v19 = a8 / v18 + 1;
  if (v19)
  {
    v20 = 0;
    v21 = 0;
    for (i = 1; i <= v19; ++i)
    {
      CryptoHMACInit(v25, a1, v26, v18);
      (*(void (**)(_OWORD *, uint64_t *, unint64_t))(*(_QWORD *)&v25[0] + 8))(v25, __src, v20);
      (*(void (**)(_OWORD *, uint64_t, uint64_t))(*(_QWORD *)&v25[0] + 8))(v25, a6, a7);
      v24 = i;
      (*(void (**)(_OWORD *, char *, uint64_t))(*(_QWORD *)&v25[0] + 8))(v25, &v24, 1);
      CryptoHMACFinal((uint64_t *)v25, (uint64_t)__src);
      if (v19 == i)
        v23 = a8 - v21;
      else
        v23 = *(_QWORD *)(a1 + 24);
      result = (uint64_t)memcpy((void *)(a9 + v21), __src, v23);
      v18 = *(_QWORD *)(a1 + 24);
      v21 += v18;
      v20 = v18;
    }
  }
  return result;
}

void *Cmalloc(size_t a1)
{
  return malloc_type_malloc(a1, 0x150033ACuLL);
}

uint64_t cstr_new()
{
  uint64_t (**v0)();
  uint64_t result;

  v0 = (uint64_t (**)())default_alloc;
  if (!default_alloc)
  {
    v0 = malloc_allocator;
    default_alloc = (uint64_t)malloc_allocator;
  }
  result = ((uint64_t (*)(uint64_t, uint64_t (*)()))*v0)(32, v0[2]);
  if (result)
  {
    *(_QWORD *)result = &cstr_empty_string;
    *(_QWORD *)(result + 8) = 0;
    *(_DWORD *)(result + 16) = 1;
    *(_QWORD *)(result + 24) = v0;
  }
  return result;
}

uint64_t cstr_setn(uint64_t a1, const void *a2, int a3)
{
  uint64_t result;

  result = cstr_alloc(a1, a3 + 1);
  if ((result & 0x80000000) == 0)
  {
    *(_BYTE *)(*(_QWORD *)a1 + a3) = 0;
    if (a2)
    {
      if (a3 >= 1)
        result = (uint64_t)memmove(*(void **)a1, a2, a3);
    }
    *(_DWORD *)(a1 + 8) = a3;
  }
  return result;
}

uint64_t cstr_alloc(uint64_t a1, int a2)
{
  int v2;
  int v4;
  uint64_t v5;
  _BYTE *v6;
  _BYTE *v7;
  size_t v8;

  v2 = *(_DWORD *)(a1 + 12);
  if (v2 >= a2)
    return 0;
  v4 = 2 * v2;
  if (v4 <= a2)
    v4 = a2;
  if (v4 <= 4)
    v5 = 4;
  else
    v5 = v4;
  v6 = (_BYTE *)(**(uint64_t (***)(uint64_t, _QWORD))(a1 + 24))(v5, *(_QWORD *)(*(_QWORD *)(a1 + 24) + 16));
  if (!v6)
    return 0xFFFFFFFFLL;
  v7 = v6;
  if (*(_QWORD *)a1)
  {
    v6[*(int *)(a1 + 8)] = 0;
    if (*(int *)(a1 + 12) >= 1)
    {
      v8 = *(unsigned int *)(a1 + 8);
      if ((int)v8 >= 1)
        memcpy(v6, *(const void **)a1, v8);
      free(*(void **)a1);
    }
  }
  *(_QWORD *)a1 = v7;
  *(_DWORD *)(a1 + 12) = v5;
  return 1;
}

uint64_t cstr_clear_free(uint64_t result)
{
  int v1;
  _QWORD *v2;
  size_t v3;

  v1 = *(_DWORD *)(result + 16) - 1;
  *(_DWORD *)(result + 16) = v1;
  if (!v1)
  {
    v2 = (_QWORD *)result;
    v3 = *(unsigned int *)(result + 12);
    if ((int)v3 >= 1)
    {
      bzero(*(void **)result, v3);
      (*(void (**)(_QWORD, _QWORD))(v2[3] + 8))(*v2, *(_QWORD *)(v2[3] + 16));
    }
    return (*(uint64_t (**)(_QWORD *, _QWORD))(v2[3] + 8))(v2, *(_QWORD *)(v2[3] + 16));
  }
  return result;
}

uint64_t cstr_free(uint64_t result)
{
  int v1;
  uint64_t v2;

  v1 = *(_DWORD *)(result + 16) - 1;
  *(_DWORD *)(result + 16) = v1;
  if (!v1)
  {
    v2 = result;
    if (*(int *)(result + 12) >= 1)
      (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)(result + 24) + 8))(*(_QWORD *)result, *(_QWORD *)(*(_QWORD *)(result + 24) + 16));
    return (*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)(v2 + 24) + 8))(v2, *(_QWORD *)(*(_QWORD *)(v2 + 24) + 16));
  }
  return result;
}

uint64_t cstr_set_length(uint64_t a1, int a2)
{
  int v4;
  int v5;

  v4 = *(_DWORD *)(a1 + 8);
  if (v4 > a2)
  {
    *(_BYTE *)(*(_QWORD *)a1 + a2) = 0;
LABEL_7:
    *(_DWORD *)(a1 + 8) = a2;
    return 1;
  }
  if (v4 >= a2)
    return 0;
  v5 = a2 + 1;
  if ((cstr_alloc(a1, a2 + 1) & 0x80000000) == 0)
  {
    bzero((void *)(*(_QWORD *)a1 + *(int *)(a1 + 8)), v5 - *(_DWORD *)(a1 + 8));
    goto LABEL_7;
  }
  return 0xFFFFFFFFLL;
}

void sub_18D442F9C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  uint64_t v10;
  va_list va;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  va_list va1;

  va_start(va1, a9);
  va_start(va, a9);
  v10 = va_arg(va1, _QWORD);
  v12 = va_arg(va1, _QWORD);
  v13 = va_arg(va1, _QWORD);
  v14 = va_arg(va1, _QWORD);
  _Block_object_dispose(va, 8);
  _Block_object_dispose(va1, 8);
  _Unwind_Resume(a1);
}

id ACAccountStoreFunction()
{
  return (id)classACAccountStore;
}

Class initACAccountStore()
{
  Class result;

  if (AccountsLibrary_sOnce != -1)
    dispatch_once(&AccountsLibrary_sOnce, &__block_literal_global_152);
  result = objc_getClass("ACAccountStore");
  classACAccountStore = (uint64_t)result;
  getACAccountStoreClass[0] = (uint64_t (*)())ACAccountStoreFunction;
  return result;
}

id AKAccountManagerFunction()
{
  return (id)classAKAccountManager;
}

Class initAKAccountManager()
{
  Class result;

  if (AuthKitLibrary_sOnce != -1)
    dispatch_once(&AuthKitLibrary_sOnce, &__block_literal_global_160);
  result = objc_getClass("AKAccountManager");
  classAKAccountManager = (uint64_t)result;
  getAKAccountManagerClass[0] = (uint64_t (*)())AKAccountManagerFunction;
  return result;
}

uint64_t initValkAppleIDValidatedItemsRecordDataCertificateType()
{
  uint64_t *v0;
  uint64_t result;

  if (MobileCoreServicesLibrary_sOnce_876 != -1)
    dispatch_once(&MobileCoreServicesLibrary_sOnce_876, &__block_literal_global_155);
  v0 = (uint64_t *)dlsym((void *)MobileCoreServicesLibrary_sLib_877, "kAppleIDValidatedItemsRecordDataCertificateType");
  if (v0)
  {
    result = *v0;
    constantValkAppleIDValidatedItemsRecordDataCertificateType = result;
  }
  else
  {
    result = constantValkAppleIDValidatedItemsRecordDataCertificateType;
  }
  getkAppleIDValidatedItemsRecordDataCertificateType[0] = kAppleIDValidatedItemsRecordDataCertificateTypeFunction;
  return result;
}

uint64_t kAppleIDValidatedItemsRecordDataCertificateTypeFunction()
{
  return constantValkAppleIDValidatedItemsRecordDataCertificateType;
}

uint64_t init_AppleIDAuthenticationCopyCertificateInfo(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (MobileCoreServicesLibrary_sOnce_876 != -1)
    dispatch_once(&MobileCoreServicesLibrary_sOnce_876, &__block_literal_global_155);
  softLink_AppleIDAuthenticationCopyCertificateInfo[0] = (uint64_t (*)())dlsym((void *)MobileCoreServicesLibrary_sLib_877, "_AppleIDAuthenticationCopyCertificateInfo");
  return ((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))softLink_AppleIDAuthenticationCopyCertificateInfo[0])(a1, a2, a3, a4);
}

uint64_t init_AppleIDCopySecIdentityForAppleIDAccount(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (MobileCoreServicesLibrary_sOnce_876 != -1)
    dispatch_once(&MobileCoreServicesLibrary_sOnce_876, &__block_literal_global_155);
  softLink_AppleIDCopySecIdentityForAppleIDAccount[0] = (uint64_t (*)())dlsym((void *)MobileCoreServicesLibrary_sLib_877, "_AppleIDCopySecIdentityForAppleIDAccount");
  return ((uint64_t (*)(uint64_t, uint64_t, uint64_t))softLink_AppleIDCopySecIdentityForAppleIDAccount[0])(a1, a2, a3);
}

uint64_t __Block_byref_object_copy_(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void __Block_byref_object_dispose_(uint64_t a1)
{

}

void initSFAppleIDParseValidationRecordData(void *a1, void *a2, void *a3)
{
  uint64_t v5;
  id v6;
  id v7;
  id v8;

  v5 = SharingLibrary_sOnce;
  v6 = a3;
  v7 = a2;
  v8 = a1;
  if (v5 != -1)
    dispatch_once(&SharingLibrary_sOnce, &__block_literal_global_914);
  softLinkSFAppleIDParseValidationRecordData[0] = (uint64_t (*)())dlsym((void *)SharingLibrary_sLib, "SFAppleIDParseValidationRecordData");
  ((void (*)(id, id, id))softLinkSFAppleIDParseValidationRecordData[0])(v8, v7, v6);

}

id CUAltDSIDPrimary()
{
  id v0;
  void *v1;
  void *v2;

  if (AppleAccountLibrary_sOnce != -1)
    dispatch_once(&AppleAccountLibrary_sOnce, &__block_literal_global_149);
  v0 = objc_alloc_init((Class)getACAccountStoreClass[0]());
  objc_msgSend(v0, "aa_primaryAppleAccount");
  v1 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v1, "aa_altDSID");
  v2 = (void *)objc_claimAutoreleasedReturnValue();

  return v2;
}

id AVAudioPlayerFunction()
{
  return (id)classAVAudioPlayer;
}

Class initAVAudioPlayer()
{
  Class result;

  if (AVFoundationLibrary_sOnce != -1)
    dispatch_once(&AVFoundationLibrary_sOnce, &__block_literal_global_972);
  result = objc_getClass("AVAudioPlayer");
  classAVAudioPlayer = (uint64_t)result;
  getAVAudioPlayerClass[0] = (uint64_t (*)())AVAudioPlayerFunction;
  return result;
}

id AVAudioSessionInterruptionNotificationFunction()
{
  return (id)constantValAVAudioSessionInterruptionNotification;
}

id initValAVAudioSessionInterruptionNotification()
{
  id *v0;

  if (AVFoundationLibrary_sOnce != -1)
    dispatch_once(&AVFoundationLibrary_sOnce, &__block_literal_global_972);
  v0 = (id *)dlsym((void *)AVFoundationLibrary_sLib, "AVAudioSessionInterruptionNotification");
  if (v0)
    objc_storeStrong((id *)&constantValAVAudioSessionInterruptionNotification, *v0);
  getAVAudioSessionInterruptionNotification[0] = (uint64_t (*)())AVAudioSessionInterruptionNotificationFunction;
  return (id)constantValAVAudioSessionInterruptionNotification;
}

id AVAudioSessionFunction()
{
  return (id)classAVAudioSession;
}

Class initAVAudioSession()
{
  Class result;

  if (AVFoundationLibrary_sOnce != -1)
    dispatch_once(&AVFoundationLibrary_sOnce, &__block_literal_global_972);
  result = objc_getClass("AVAudioSession");
  classAVAudioSession = (uint64_t)result;
  getAVAudioSessionClass[0] = (uint64_t (*)())AVAudioSessionFunction;
  return result;
}

id AVAudioSessionCategoryAmbientFunction()
{
  return (id)constantValAVAudioSessionCategoryAmbient;
}

id initValAVAudioSessionCategoryAmbient()
{
  id *v0;

  if (AVFoundationLibrary_sOnce != -1)
    dispatch_once(&AVFoundationLibrary_sOnce, &__block_literal_global_972);
  v0 = (id *)dlsym((void *)AVFoundationLibrary_sLib, "AVAudioSessionCategoryAmbient");
  if (v0)
    objc_storeStrong((id *)&constantValAVAudioSessionCategoryAmbient, *v0);
  getAVAudioSessionCategoryAmbient[0] = (uint64_t (*)())AVAudioSessionCategoryAmbientFunction;
  return (id)constantValAVAudioSessionCategoryAmbient;
}

void sub_18D446B44(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_18D446CE8(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_18D446E24(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_18D447670(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

id CBAdvertisementDataAppleMfgDataFunction()
{
  return (id)constantValCBAdvertisementDataAppleMfgData;
}

id initValCBAdvertisementDataAppleMfgData()
{
  id *v0;

  if (CoreBluetoothLibrary_sOnce != -1)
    dispatch_once(&CoreBluetoothLibrary_sOnce, &__block_literal_global_1092);
  v0 = (id *)dlsym((void *)CoreBluetoothLibrary_sLib, "CBAdvertisementDataAppleMfgData");
  if (v0)
    objc_storeStrong((id *)&constantValCBAdvertisementDataAppleMfgData, *v0);
  getCBAdvertisementDataAppleMfgData[0] = (uint64_t (*)())CBAdvertisementDataAppleMfgDataFunction;
  return (id)constantValCBAdvertisementDataAppleMfgData;
}

id CBAdvertisementDataIsConnectableFunction()
{
  return (id)constantValCBAdvertisementDataIsConnectable;
}

id initValCBAdvertisementDataIsConnectable()
{
  id *v0;

  if (CoreBluetoothLibrary_sOnce != -1)
    dispatch_once(&CoreBluetoothLibrary_sOnce, &__block_literal_global_1092);
  v0 = (id *)dlsym((void *)CoreBluetoothLibrary_sLib, "CBAdvertisementDataIsConnectable");
  if (v0)
    objc_storeStrong((id *)&constantValCBAdvertisementDataIsConnectable, *v0);
  getCBAdvertisementDataIsConnectable[0] = (uint64_t (*)())CBAdvertisementDataIsConnectableFunction;
  return (id)constantValCBAdvertisementDataIsConnectable;
}

id CBManagerIsPrivilegedDaemonKeyFunction()
{
  return (id)constantValCBManagerIsPrivilegedDaemonKey;
}

id initValCBManagerIsPrivilegedDaemonKey()
{
  id *v0;

  if (CoreBluetoothLibrary_sOnce != -1)
    dispatch_once(&CoreBluetoothLibrary_sOnce, &__block_literal_global_1092);
  v0 = (id *)dlsym((void *)CoreBluetoothLibrary_sLib, "CBManagerIsPrivilegedDaemonKey");
  if (v0)
    objc_storeStrong((id *)&constantValCBManagerIsPrivilegedDaemonKey, *v0);
  getCBManagerIsPrivilegedDaemonKey[0] = (uint64_t (*)())CBManagerIsPrivilegedDaemonKeyFunction;
  return (id)constantValCBManagerIsPrivilegedDaemonKey;
}

id CBPeripheralManagerFunction()
{
  return (id)classCBPeripheralManager;
}

Class initCBPeripheralManager()
{
  Class result;

  if (CoreBluetoothLibrary_sOnce != -1)
    dispatch_once(&CoreBluetoothLibrary_sOnce, &__block_literal_global_1092);
  result = objc_getClass("CBPeripheralManager");
  classCBPeripheralManager = (uint64_t)result;
  getCBPeripheralManagerClass[0] = (uint64_t (*)())CBPeripheralManagerFunction;
  return result;
}

id CBConnectPeripheralOptionClientBundleIDFunction()
{
  return (id)constantValCBConnectPeripheralOptionClientBundleID;
}

id initValCBConnectPeripheralOptionClientBundleID()
{
  id *v0;

  if (CoreBluetoothLibrary_sOnce_1229 != -1)
    dispatch_once(&CoreBluetoothLibrary_sOnce_1229, &__block_literal_global_1230);
  v0 = (id *)dlsym((void *)CoreBluetoothLibrary_sLib_1231, "CBConnectPeripheralOptionClientBundleID");
  if (v0)
    objc_storeStrong((id *)&constantValCBConnectPeripheralOptionClientBundleID, *v0);
  getCBConnectPeripheralOptionClientBundleID[0] = (uint64_t (*)())CBConnectPeripheralOptionClientBundleIDFunction;
  return (id)constantValCBConnectPeripheralOptionClientBundleID;
}

id CBConnectPeripheralOptionConnectionUseCaseFunction()
{
  return (id)constantValCBConnectPeripheralOptionConnectionUseCase;
}

id initValCBConnectPeripheralOptionConnectionUseCase()
{
  id *v0;

  if (CoreBluetoothLibrary_sOnce_1229 != -1)
    dispatch_once(&CoreBluetoothLibrary_sOnce_1229, &__block_literal_global_1230);
  v0 = (id *)dlsym((void *)CoreBluetoothLibrary_sLib_1231, "CBConnectPeripheralOptionConnectionUseCase");
  if (v0)
    objc_storeStrong((id *)&constantValCBConnectPeripheralOptionConnectionUseCase, *v0);
  getCBConnectPeripheralOptionConnectionUseCase[0] = (uint64_t (*)())CBConnectPeripheralOptionConnectionUseCaseFunction;
  return (id)constantValCBConnectPeripheralOptionConnectionUseCase;
}

id CBCentralManagerFunction()
{
  return (id)classCBCentralManager;
}

Class initCBCentralManager()
{
  Class result;

  if (CoreBluetoothLibrary_sOnce_1229 != -1)
    dispatch_once(&CoreBluetoothLibrary_sOnce_1229, &__block_literal_global_1230);
  result = objc_getClass("CBCentralManager");
  classCBCentralManager = (uint64_t)result;
  getCBCentralManagerClass[0] = (uint64_t (*)())CBCentralManagerFunction;
  return result;
}

id CBManagerNeedsRestrictedStateOperationFunction()
{
  return (id)constantValCBManagerNeedsRestrictedStateOperation;
}

id initValCBManagerNeedsRestrictedStateOperation()
{
  id *v0;

  if (CoreBluetoothLibrary_sOnce_1229 != -1)
    dispatch_once(&CoreBluetoothLibrary_sOnce_1229, &__block_literal_global_1230);
  v0 = (id *)dlsym((void *)CoreBluetoothLibrary_sLib_1231, "CBManagerNeedsRestrictedStateOperation");
  if (v0)
    objc_storeStrong((id *)&constantValCBManagerNeedsRestrictedStateOperation, *v0);
  getCBManagerNeedsRestrictedStateOperation[0] = (uint64_t (*)())CBManagerNeedsRestrictedStateOperationFunction;
  return (id)constantValCBManagerNeedsRestrictedStateOperation;
}

void sub_18D44B9C0(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

id CBAdvertisementDataDeviceAddressFunction()
{
  return (id)constantValCBAdvertisementDataDeviceAddress;
}

id initValCBAdvertisementDataDeviceAddress()
{
  id *v0;

  if (CoreBluetoothLibrary_sOnce_1395 != -1)
    dispatch_once(&CoreBluetoothLibrary_sOnce_1395, &__block_literal_global_1396);
  v0 = (id *)dlsym((void *)CoreBluetoothLibrary_sLib_1397, "CBAdvertisementDataDeviceAddress");
  if (v0)
    objc_storeStrong((id *)&constantValCBAdvertisementDataDeviceAddress, *v0);
  getCBAdvertisementDataDeviceAddress[0] = (uint64_t (*)())CBAdvertisementDataDeviceAddressFunction;
  return (id)constantValCBAdvertisementDataDeviceAddress;
}

id CBAdvertisementDataManufacturerDataKeyFunction()
{
  return (id)constantValCBAdvertisementDataManufacturerDataKey;
}

id initValCBAdvertisementDataManufacturerDataKey()
{
  id *v0;

  if (CoreBluetoothLibrary_sOnce_1395 != -1)
    dispatch_once(&CoreBluetoothLibrary_sOnce_1395, &__block_literal_global_1396);
  v0 = (id *)dlsym((void *)CoreBluetoothLibrary_sLib_1397, "CBAdvertisementDataManufacturerDataKey");
  if (v0)
    objc_storeStrong((id *)&constantValCBAdvertisementDataManufacturerDataKey, *v0);
  getCBAdvertisementDataManufacturerDataKey[0] = (uint64_t (*)())CBAdvertisementDataManufacturerDataKeyFunction;
  return (id)constantValCBAdvertisementDataManufacturerDataKey;
}

id CBCentralManagerScanOptionMatchingRuleTypeKeyFunction()
{
  return (id)constantValCBCentralManagerScanOptionMatchingRuleTypeKey;
}

id initValCBCentralManagerScanOptionMatchingRuleTypeKey()
{
  id *v0;

  if (CoreBluetoothLibrary_sOnce_1395 != -1)
    dispatch_once(&CoreBluetoothLibrary_sOnce_1395, &__block_literal_global_1396);
  v0 = (id *)dlsym((void *)CoreBluetoothLibrary_sLib_1397, "CBCentralManagerScanOptionMatchingRuleTypeKey");
  if (v0)
    objc_storeStrong((id *)&constantValCBCentralManagerScanOptionMatchingRuleTypeKey, *v0);
  getCBCentralManagerScanOptionMatchingRuleTypeKey[0] = (uint64_t (*)())CBCentralManagerScanOptionMatchingRuleTypeKeyFunction;
  return (id)constantValCBCentralManagerScanOptionMatchingRuleTypeKey;
}

id CBCentralManagerScanOptionMatchingRuleRSSIKeyFunction()
{
  return (id)constantValCBCentralManagerScanOptionMatchingRuleRSSIKey;
}

id initValCBCentralManagerScanOptionMatchingRuleRSSIKey()
{
  id *v0;

  if (CoreBluetoothLibrary_sOnce_1395 != -1)
    dispatch_once(&CoreBluetoothLibrary_sOnce_1395, &__block_literal_global_1396);
  v0 = (id *)dlsym((void *)CoreBluetoothLibrary_sLib_1397, "CBCentralManagerScanOptionMatchingRuleRSSIKey");
  if (v0)
    objc_storeStrong((id *)&constantValCBCentralManagerScanOptionMatchingRuleRSSIKey, *v0);
  getCBCentralManagerScanOptionMatchingRuleRSSIKey[0] = (uint64_t (*)())CBCentralManagerScanOptionMatchingRuleRSSIKeyFunction;
  return (id)constantValCBCentralManagerScanOptionMatchingRuleRSSIKey;
}

id CBCentralManagerScanOptionMatchingRulePayloadKeyFunction()
{
  return (id)constantValCBCentralManagerScanOptionMatchingRulePayloadKey;
}

id initValCBCentralManagerScanOptionMatchingRulePayloadKey()
{
  id *v0;

  if (CoreBluetoothLibrary_sOnce_1395 != -1)
    dispatch_once(&CoreBluetoothLibrary_sOnce_1395, &__block_literal_global_1396);
  v0 = (id *)dlsym((void *)CoreBluetoothLibrary_sLib_1397, "CBCentralManagerScanOptionMatchingRulePayloadKey");
  if (v0)
    objc_storeStrong((id *)&constantValCBCentralManagerScanOptionMatchingRulePayloadKey, *v0);
  getCBCentralManagerScanOptionMatchingRulePayloadKey[0] = (uint64_t (*)())CBCentralManagerScanOptionMatchingRulePayloadKeyFunction;
  return (id)constantValCBCentralManagerScanOptionMatchingRulePayloadKey;
}

id CBCentralManagerScanOptionMatchingRuleMaskKeyFunction()
{
  return (id)constantValCBCentralManagerScanOptionMatchingRuleMaskKey;
}

id initValCBCentralManagerScanOptionMatchingRuleMaskKey()
{
  id *v0;

  if (CoreBluetoothLibrary_sOnce_1395 != -1)
    dispatch_once(&CoreBluetoothLibrary_sOnce_1395, &__block_literal_global_1396);
  v0 = (id *)dlsym((void *)CoreBluetoothLibrary_sLib_1397, "CBCentralManagerScanOptionMatchingRuleMaskKey");
  if (v0)
    objc_storeStrong((id *)&constantValCBCentralManagerScanOptionMatchingRuleMaskKey, *v0);
  getCBCentralManagerScanOptionMatchingRuleMaskKey[0] = (uint64_t (*)())CBCentralManagerScanOptionMatchingRuleMaskKeyFunction;
  return (id)constantValCBCentralManagerScanOptionMatchingRuleMaskKey;
}

id CBCentralManagerScanOptionScanIntervalFunction()
{
  return (id)constantValCBCentralManagerScanOptionScanInterval;
}

id initValCBCentralManagerScanOptionScanInterval()
{
  id *v0;

  if (CoreBluetoothLibrary_sOnce_1395 != -1)
    dispatch_once(&CoreBluetoothLibrary_sOnce_1395, &__block_literal_global_1396);
  v0 = (id *)dlsym((void *)CoreBluetoothLibrary_sLib_1397, "CBCentralManagerScanOptionScanInterval");
  if (v0)
    objc_storeStrong((id *)&constantValCBCentralManagerScanOptionScanInterval, *v0);
  getCBCentralManagerScanOptionScanInterval[0] = (uint64_t (*)())CBCentralManagerScanOptionScanIntervalFunction;
  return (id)constantValCBCentralManagerScanOptionScanInterval;
}

id CBCentralManagerScanOptionScanWindowFunction()
{
  return (id)constantValCBCentralManagerScanOptionScanWindow;
}

id initValCBCentralManagerScanOptionScanWindow()
{
  id *v0;

  if (CoreBluetoothLibrary_sOnce_1395 != -1)
    dispatch_once(&CoreBluetoothLibrary_sOnce_1395, &__block_literal_global_1396);
  v0 = (id *)dlsym((void *)CoreBluetoothLibrary_sLib_1397, "CBCentralManagerScanOptionScanWindow");
  if (v0)
    objc_storeStrong((id *)&constantValCBCentralManagerScanOptionScanWindow, *v0);
  getCBCentralManagerScanOptionScanWindow[0] = (uint64_t (*)())CBCentralManagerScanOptionScanWindowFunction;
  return (id)constantValCBCentralManagerScanOptionScanWindow;
}

id CBCentralManagerScanOptionMatchingRuleKeyFunction()
{
  return (id)constantValCBCentralManagerScanOptionMatchingRuleKey;
}

id initValCBCentralManagerScanOptionMatchingRuleKey()
{
  id *v0;

  if (CoreBluetoothLibrary_sOnce_1395 != -1)
    dispatch_once(&CoreBluetoothLibrary_sOnce_1395, &__block_literal_global_1396);
  v0 = (id *)dlsym((void *)CoreBluetoothLibrary_sLib_1397, "CBCentralManagerScanOptionMatchingRuleKey");
  if (v0)
    objc_storeStrong((id *)&constantValCBCentralManagerScanOptionMatchingRuleKey, *v0);
  getCBCentralManagerScanOptionMatchingRuleKey[0] = (uint64_t (*)())CBCentralManagerScanOptionMatchingRuleKeyFunction;
  return (id)constantValCBCentralManagerScanOptionMatchingRuleKey;
}

id CBCentralManagerScanOptionAllowDuplicatesKeyFunction()
{
  return (id)constantValCBCentralManagerScanOptionAllowDuplicatesKey;
}

id initValCBCentralManagerScanOptionAllowDuplicatesKey()
{
  id *v0;

  if (CoreBluetoothLibrary_sOnce_1395 != -1)
    dispatch_once(&CoreBluetoothLibrary_sOnce_1395, &__block_literal_global_1396);
  v0 = (id *)dlsym((void *)CoreBluetoothLibrary_sLib_1397, "CBCentralManagerScanOptionAllowDuplicatesKey");
  if (v0)
    objc_storeStrong((id *)&constantValCBCentralManagerScanOptionAllowDuplicatesKey, *v0);
  getCBCentralManagerScanOptionAllowDuplicatesKey[0] = (uint64_t (*)())CBCentralManagerScanOptionAllowDuplicatesKeyFunction;
  return (id)constantValCBCentralManagerScanOptionAllowDuplicatesKey;
}

id CBCentralManagerScanOptionActiveFunction()
{
  return (id)constantValCBCentralManagerScanOptionActive;
}

id initValCBCentralManagerScanOptionActive()
{
  id *v0;

  if (CoreBluetoothLibrary_sOnce_1395 != -1)
    dispatch_once(&CoreBluetoothLibrary_sOnce_1395, &__block_literal_global_1396);
  v0 = (id *)dlsym((void *)CoreBluetoothLibrary_sLib_1397, "CBCentralManagerScanOptionActive");
  if (v0)
    objc_storeStrong((id *)&constantValCBCentralManagerScanOptionActive, *v0);
  getCBCentralManagerScanOptionActive[0] = (uint64_t (*)())CBCentralManagerScanOptionActiveFunction;
  return (id)constantValCBCentralManagerScanOptionActive;
}

id CBManagerIsPrivilegedDaemonKeyFunction_1416()
{
  return (id)constantValCBManagerIsPrivilegedDaemonKey_1418;
}

id initValCBManagerIsPrivilegedDaemonKey_1417()
{
  id *v0;

  if (CoreBluetoothLibrary_sOnce_1395 != -1)
    dispatch_once(&CoreBluetoothLibrary_sOnce_1395, &__block_literal_global_1396);
  v0 = (id *)dlsym((void *)CoreBluetoothLibrary_sLib_1397, "CBManagerIsPrivilegedDaemonKey");
  if (v0)
    objc_storeStrong((id *)&constantValCBManagerIsPrivilegedDaemonKey_1418, *v0);
  getCBManagerIsPrivilegedDaemonKey_1415 = (uint64_t (*)())CBManagerIsPrivilegedDaemonKeyFunction_1416;
  return (id)constantValCBManagerIsPrivilegedDaemonKey_1418;
}

id CBCentralManagerFunction_1420()
{
  return (id)classCBCentralManager_1433;
}

Class initCBCentralManager_1421()
{
  Class result;

  if (CoreBluetoothLibrary_sOnce_1395 != -1)
    dispatch_once(&CoreBluetoothLibrary_sOnce_1395, &__block_literal_global_1396);
  result = objc_getClass("CBCentralManager");
  classCBCentralManager_1433 = (uint64_t)result;
  getCBCentralManagerClass_1419[0] = (uint64_t (*)())CBCentralManagerFunction_1420;
  return result;
}

id CBManagerNeedsRestrictedStateOperationFunction_1423()
{
  return (id)constantValCBManagerNeedsRestrictedStateOperation_1432;
}

id initValCBManagerNeedsRestrictedStateOperation_1424()
{
  id *v0;

  if (CoreBluetoothLibrary_sOnce_1395 != -1)
    dispatch_once(&CoreBluetoothLibrary_sOnce_1395, &__block_literal_global_1396);
  v0 = (id *)dlsym((void *)CoreBluetoothLibrary_sLib_1397, "CBManagerNeedsRestrictedStateOperation");
  if (v0)
    objc_storeStrong((id *)&constantValCBManagerNeedsRestrictedStateOperation_1432, *v0);
  getCBManagerNeedsRestrictedStateOperation_1422[0] = (uint64_t (*)())CBManagerNeedsRestrictedStateOperationFunction_1423;
  return (id)constantValCBManagerNeedsRestrictedStateOperation_1432;
}

id CBPeripheralManagerFunction_1579()
{
  return (id)classCBPeripheralManager_1586;
}

Class initCBPeripheralManager_1580()
{
  Class result;

  if (CoreBluetoothLibrary_sOnce_1583 != -1)
    dispatch_once(&CoreBluetoothLibrary_sOnce_1583, &__block_literal_global_1584);
  result = objc_getClass("CBPeripheralManager");
  classCBPeripheralManager_1586 = (uint64_t)result;
  getCBPeripheralManagerClass_1578 = (uint64_t (*)())CBPeripheralManagerFunction_1579;
  return result;
}

void _btServiceEventHandler(uint64_t a1, uint64_t a2, int a3, int a4, int a5, void *a6)
{
  void *v12;
  id v13;
  int *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  const char *v19;
  int *v20;
  uint64_t v21;
  int *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  int v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  void *v34;
  int v35;
  uint64_t v36;
  int *v37;
  int v38;
  int v39;
  int *v40;
  uint64_t v41;
  char *v42;
  int v43;
  char __s1[32];
  uint64_t v45;

  v45 = *MEMORY[0x1E0C80C00];
  v12 = (void *)MEMORY[0x18D78EB2C]();
  v13 = a6;
  dispatch_assert_queue_V2(*((dispatch_queue_t *)v13 + 23));
  if (!*((_BYTE *)v13 + 67))
    goto LABEL_32;
  if (a3)
  {
    v14 = (int *)*((_QWORD *)v13 + 19);
    if (*v14 <= 30)
    {
      if (*v14 != -1)
      {
LABEL_5:
        BTServiceSpecificEventToString(a4);
        v42 = (char *)a2;
        v19 = "BTService event type: %#{flags}, %d, %d %s, %#m\n";
        v20 = v14;
LABEL_6:
        LogPrintF((uint64_t)v20, (uint64_t)"void _btServiceEventHandler(BTDevice _Nonnull, BTServiceID, BTServiceEventType, BTServiceSpecificEvent, BTResult, void * _Nonnull)", 0x1Eu, (uint64_t)v19, v15, v16, v17, v18, (uint64_t)v42);
        goto LABEL_32;
      }
      if (_LogCategory_Initialize(*((_QWORD *)v13 + 19), 0x1Eu))
      {
        v14 = (int *)*((_QWORD *)v13 + 19);
        goto LABEL_5;
      }
    }
    goto LABEL_32;
  }
  if (a5)
    v21 = (a5 + 310000);
  else
    v21 = 0;
  v22 = (int *)*((_QWORD *)v13 + 19);
  if (*v22 <= 30)
  {
    if (*v22 != -1)
    {
LABEL_13:
      BTServiceSpecificEventToString(a4);
      LogPrintF((uint64_t)v22, (uint64_t)"void _btServiceEventHandler(BTDevice _Nonnull, BTServiceID, BTServiceEventType, BTServiceSpecificEvent, BTResult, void * _Nonnull)", 0x1Eu, (uint64_t)"BTService connect: %#{flags}, %d %s, %#m\n", v23, v24, v25, v26, a2);
      goto LABEL_17;
    }
    if (_LogCategory_Initialize(*((_QWORD *)v13 + 19), 0x1Eu))
    {
      v22 = (int *)*((_QWORD *)v13 + 19);
      goto LABEL_13;
    }
  }
LABEL_17:
  if (a4 != 11)
    goto LABEL_32;
  __s1[0] = 0;
  v27 = ((uint64_t (*)(uint64_t, uint64_t, uint64_t))softLinkBTDeviceGetAddressString[0])(a1, (uint64_t)__s1, 32);
  if (v27)
  {
    v32 = (v27 + 310000);
    if (v27 != -310000)
    {
      v40 = (int *)*((_QWORD *)v13 + 19);
      if (*v40 <= 90)
      {
        if (*v40 == -1)
        {
          if (!_LogCategory_Initialize((uint64_t)v40, 0x5Au))
            goto LABEL_32;
          v40 = (int *)*((_QWORD *)v13 + 19);
        }
        LogPrintF((uint64_t)v40, (uint64_t)"void _btServiceEventHandler(BTDevice _Nonnull, BTServiceID, BTServiceEventType, BTServiceSpecificEvent, BTResult, void * _Nonnull)", 0x5Au, (uint64_t)"### BTDeviceGetAddressString failed: %#m\n", v28, v29, v30, v31, v32);
      }
      goto LABEL_32;
    }
  }
  if (strcmp(__s1, (const char *)v13 + 17))
  {
    v20 = (int *)*((_QWORD *)v13 + 19);
    if (*v20 <= 30)
    {
      if (*v20 == -1)
      {
        if (!_LogCategory_Initialize((uint64_t)v20, 0x1Eu))
          goto LABEL_32;
        v20 = (int *)*((_QWORD *)v13 + 19);
      }
      v42 = __s1;
      v19 = "BTService connect, ignoring device: %s vs %s\n";
      goto LABEL_6;
    }
    goto LABEL_32;
  }
  if ((_DWORD)v21)
  {
    NSErrorF_safe((void *)*MEMORY[0x1E0CB2F90], v21, (uint64_t)"BTService connect failed", v33, v15, v16, v17, v18, v41);
    v34 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v13, "_reportError:", v34);

    goto LABEL_32;
  }
  if (!*((_DWORD *)v13 + 41))
  {
LABEL_31:
    *((_BYTE *)v13 + 16) = 1;
    objc_msgSend(v13, "_run");
    goto LABEL_32;
  }
  v43 = 0;
  v35 = ((uint64_t (*)(uint64_t, uint64_t))softLinkBTDeviceGetConnectedServices[0])(a1, (uint64_t)&v43);
  if (v35)
  {
    v36 = (v35 + 310000);
    if (v35 != -310000)
    {
      v37 = (int *)*((_QWORD *)v13 + 19);
      if (*v37 <= 90)
      {
        if (*v37 == -1)
        {
          if (!_LogCategory_Initialize((uint64_t)v37, 0x5Au))
            goto LABEL_30;
          v37 = (int *)*((_QWORD *)v13 + 19);
        }
        LogPrintF((uint64_t)v37, (uint64_t)"void _btServiceEventHandler(BTDevice _Nonnull, BTServiceID, BTServiceEventType, BTServiceSpecificEvent, BTResult, void * _Nonnull)", 0x5Au, (uint64_t)"### BTDeviceGetConnectedServices failed: %#m\n", v15, v16, v17, v18, v36);
      }
    }
  }
LABEL_30:
  v38 = v43;
  v39 = *((_DWORD *)v13 + 41);
  if ((v39 & ~v43) == 0)
    goto LABEL_31;
  v20 = (int *)*((_QWORD *)v13 + 19);
  if (*v20 <= 30)
  {
    if (*v20 == -1)
    {
      if (!_LogCategory_Initialize((uint64_t)v20, 0x1Eu))
        goto LABEL_32;
      v20 = (int *)*((_QWORD *)v13 + 19);
      v39 = *((_DWORD *)v13 + 41);
      v38 = v43;
    }
    v42 = (char *)(v39 & ~v38);
    v19 = "BTService connect waiting for more services: %#{flags}\n";
    goto LABEL_6;
  }
LABEL_32:

  objc_autoreleasePoolPop(v12);
}

uint64_t initBTSessionDetachWithQueue(uint64_t a1)
{
  if (MobileBluetoothLibrary_sOnce != -1)
    dispatch_once(&MobileBluetoothLibrary_sOnce, &__block_literal_global_1789);
  softLinkBTSessionDetachWithQueue[0] = (uint64_t (*)())dlsym((void *)MobileBluetoothLibrary_sLib, "BTSessionDetachWithQueue");
  return ((uint64_t (*)(uint64_t))softLinkBTSessionDetachWithQueue[0])(a1);
}

uint64_t initBTServiceRemoveCallbacks(uint64_t a1, uint64_t a2)
{
  if (MobileBluetoothLibrary_sOnce != -1)
    dispatch_once(&MobileBluetoothLibrary_sOnce, &__block_literal_global_1789);
  softLinkBTServiceRemoveCallbacks[0] = (uint64_t (*)())dlsym((void *)MobileBluetoothLibrary_sLib, "BTServiceRemoveCallbacks");
  return ((uint64_t (*)(uint64_t, uint64_t))softLinkBTServiceRemoveCallbacks[0])(a1, a2);
}

const char *BTServiceSpecificEventToString(int a1)
{
  const char *result;

  if (a1 > 500)
  {
    if (a1 <= 600)
    {
      switch(a1)
      {
        case 501:
          result = "BT_SERVICE_REMOTE_PLAY";
          break;
        case 502:
          result = "BT_SERVICE_REMOTE_PAUSE";
          break;
        case 503:
          result = "BT_SERVICE_REMOTE_STOP";
          break;
        case 504:
          result = "BT_SERVICE_REMOTE_PREVIOUS";
          break;
        case 505:
          result = "BT_SERVICE_REMOTE_NEXT";
          break;
        case 506:
          result = "BT_SERVICE_REMOTE_VOL_UP";
          break;
        case 507:
          result = "BT_SERVICE_REMOTE_VOL_DOWN";
          break;
        case 508:
          result = "BT_SERVICE_REMOTE_MUTE";
          break;
        case 509:
          result = "BT_SERVICE_REMOTE_FASTFORWARD_START";
          break;
        case 510:
          result = "BT_SERVICE_REMOTE_FASTFORWARD_STOP";
          break;
        case 511:
          result = "BT_SERVICE_REMOTE_REWIND_START";
          break;
        case 512:
          result = "BT_SERVICE_REMOTE_REWIND_STOP";
          break;
        default:
          return "?";
      }
      return result;
    }
    if (a1 <= 702)
    {
      switch(a1)
      {
        case 601:
          return "BT_SERVICE_SENSOR_RSSI";
        case 701:
          return "BT_SERVICE_LMP_NAME_CHANGED";
        case 702:
          return "BT_SERVICE_HIGH_POWER_ENABLED";
      }
    }
    else if (a1 > 801)
    {
      if (a1 == 802)
        return "BT_SERVICE_LEA_AUDIO_DISCONNECTED";
      if (a1 == 901)
        return "BT_UI_INITIATED_CONNECTION_REQUEST";
    }
    else
    {
      if (a1 == 703)
        return "BT_SERVICE_HIGH_POWER_DISABLED";
      if (a1 == 801)
        return "BT_SERVICE_LEA_AUDIO_CONNECTED";
    }
    return "?";
  }
  if (a1 <= 100)
  {
    if (a1 <= 1)
    {
      if (!a1)
        return "BT_SERVICE_SDP";
      if (a1 == 1)
        return "BT_SERVICE_CONNECTION_ATTEMPT";
    }
    else
    {
      switch(a1)
      {
        case 2:
          return "BT_SERVICE_DISCONNECTION_ATTEMPT";
        case 11:
          return "BT_SERVICE_CONNECTION_RESULT";
        case 12:
          return "BT_SERVICE_DISCONNECTION_RESULT";
      }
    }
    return "?";
  }
  if (a1 > 201)
  {
    if (a1 > 301)
    {
      if (a1 == 302)
        return "BT_SERVICE_PHONE_BOOK_SEND_COMPLETE";
      if (a1 == 303)
        return "BT_SERVICE_PHONE_BOOK_SYNC_SUPPORTED";
    }
    else
    {
      if (a1 == 202)
        return "BT_SERVICE_A2DP_AUDIO_DISCONNECTED";
      if (a1 == 301)
        return "BT_SERVICE_PHONE_BOOK_SEND_INITIATED";
    }
    return "?";
  }
  switch(a1)
  {
    case 'e':
      result = "BT_SERVICE_HANDSFREE_AUDIO_CONNECTED";
      break;
    case 'f':
      result = "BT_SERVICE_HANDSFREE_AUDIO_DISCONNECTED";
      break;
    case 'g':
      result = "BT_SERVICE_HANDSFREE_START_VOICE_COMMAND";
      break;
    case 'h':
      result = "BT_SERVICE_HANDSFREE_END_VOICE_COMMAND";
      break;
    default:
      if (a1 != 201)
        return "?";
      result = "BT_SERVICE_A2DP_AUDIO_CONNECTED";
      break;
  }
  return result;
}

uint64_t initBTDeviceGetConnectedServices(uint64_t a1, uint64_t a2)
{
  if (MobileBluetoothLibrary_sOnce != -1)
    dispatch_once(&MobileBluetoothLibrary_sOnce, &__block_literal_global_1789);
  softLinkBTDeviceGetConnectedServices[0] = (uint64_t (*)())dlsym((void *)MobileBluetoothLibrary_sLib, "BTDeviceGetConnectedServices");
  return ((uint64_t (*)(uint64_t, uint64_t))softLinkBTDeviceGetConnectedServices[0])(a1, a2);
}

uint64_t initBTDeviceGetAddressString(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (MobileBluetoothLibrary_sOnce != -1)
    dispatch_once(&MobileBluetoothLibrary_sOnce, &__block_literal_global_1789);
  softLinkBTDeviceGetAddressString[0] = (uint64_t (*)())dlsym((void *)MobileBluetoothLibrary_sLib, "BTDeviceGetAddressString");
  return ((uint64_t (*)(uint64_t, uint64_t, uint64_t))softLinkBTDeviceGetAddressString[0])(a1, a2, a3);
}

uint64_t initBTDeviceFromAddress(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (MobileBluetoothLibrary_sOnce != -1)
    dispatch_once(&MobileBluetoothLibrary_sOnce, &__block_literal_global_1789);
  softLinkBTDeviceFromAddress[0] = (uint64_t (*)())dlsym((void *)MobileBluetoothLibrary_sLib, "BTDeviceFromAddress");
  return ((uint64_t (*)(uint64_t, uint64_t, uint64_t))softLinkBTDeviceFromAddress[0])(a1, a2, a3);
}

uint64_t initBTDeviceFromIdentifier(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (MobileBluetoothLibrary_sOnce != -1)
    dispatch_once(&MobileBluetoothLibrary_sOnce, &__block_literal_global_1789);
  softLinkBTDeviceFromIdentifier[0] = (uint64_t (*)())dlsym((void *)MobileBluetoothLibrary_sLib, "BTDeviceFromIdentifier");
  return ((uint64_t (*)(uint64_t, uint64_t, uint64_t))softLinkBTDeviceFromIdentifier[0])(a1, a2, a3);
}

uint64_t initBTDeviceConnectServices(uint64_t a1, uint64_t a2)
{
  if (MobileBluetoothLibrary_sOnce != -1)
    dispatch_once(&MobileBluetoothLibrary_sOnce, &__block_literal_global_1789);
  softLinkBTDeviceConnectServices[0] = (uint64_t (*)())dlsym((void *)MobileBluetoothLibrary_sLib, "BTDeviceConnectServices");
  return ((uint64_t (*)(uint64_t, uint64_t))softLinkBTDeviceConnectServices[0])(a1, a2);
}

uint64_t initBTDeviceConnectServicesWithParameters(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (MobileBluetoothLibrary_sOnce != -1)
    dispatch_once(&MobileBluetoothLibrary_sOnce, &__block_literal_global_1789);
  softLinkBTDeviceConnectServicesWithParameters[0] = (uint64_t (*)())dlsym((void *)MobileBluetoothLibrary_sLib, "BTDeviceConnectServicesWithParameters");
  return ((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))softLinkBTDeviceConnectServicesWithParameters[0])(a1, a2, a3, a4);
}

uint64_t initBTServiceAddCallbacks(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (MobileBluetoothLibrary_sOnce != -1)
    dispatch_once(&MobileBluetoothLibrary_sOnce, &__block_literal_global_1789);
  softLinkBTServiceAddCallbacks[0] = (uint64_t (*)())dlsym((void *)MobileBluetoothLibrary_sLib, "BTServiceAddCallbacks");
  return ((uint64_t (*)(uint64_t, uint64_t, uint64_t))softLinkBTServiceAddCallbacks[0])(a1, a2, a3);
}

void _btSessionEventCallback(uint64_t a1, uint64_t a2, int a3, void *a4)
{
  void *v8;
  id v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  int *v18;
  void *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  void *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  int *v40;
  int *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  void *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  void *v52;
  void *v53;

  v8 = (void *)MEMORY[0x18D78EB2C]();
  v9 = a4;
  dispatch_assert_queue_V2(*((dispatch_queue_t *)v9 + 23));
  if (a3)
    v17 = (a3 + 310000);
  else
    v17 = 0;
  switch((_DWORD)a2)
  {
    case 2:
      *((_QWORD *)v9 + 7) = 0;
      *((_BYTE *)v9 + 64) = 0;
      objc_msgSend(v9, "_btEnsureStopped");
      CFRelease(v9);
      v19 = (void *)*MEMORY[0x1E0CB2F90];
      NSPrintF((uint64_t)"%#m", v20, v21, v22, v23, v24, v25, v26, v17);
      v27 = (void *)objc_claimAutoreleasedReturnValue();
      NSErrorF_safe(v19, 4294960560, (uint64_t)"BTSession crashed: %@", v28, v29, v30, v31, v32, (uint64_t)v27);
      goto LABEL_19;
    case 1:
      *((_QWORD *)v9 + 7) = 0;
      *((_BYTE *)v9 + 64) = 0;
      objc_msgSend(v9, "_btEnsureStopped");
      CFRelease(v9);
      if (*((_BYTE *)v9 + 68))
      {
        v40 = (int *)*((_QWORD *)v9 + 19);
        if (*v40 <= 30)
        {
          if (*v40 == -1)
          {
            if (!_LogCategory_Initialize((uint64_t)v40, 0x1Eu))
              goto LABEL_27;
            v40 = (int *)*((_QWORD *)v9 + 19);
          }
          LogPrintF((uint64_t)v40, (uint64_t)"void _btSessionEventCallback(BTSession _Nonnull, BTSessionEvent, BTResult, void * _Nonnull)", 0x1Eu, (uint64_t)"BTSession detached: %#m\n", v36, v37, v38, v39, v17);
        }
LABEL_27:
        objc_msgSend(v9, "_invalidated");
        goto LABEL_28;
      }
      v46 = (void *)*MEMORY[0x1E0CB2F90];
      NSPrintF((uint64_t)"%#m", v33, v34, v35, v36, v37, v38, v39, v17);
      v27 = (void *)objc_claimAutoreleasedReturnValue();
      NSErrorF_safe(v46, 4294960560, (uint64_t)"BTSession detached: %@", v47, v48, v49, v50, v51, (uint64_t)v27);
LABEL_19:
      v52 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v9, "_reportError:", v52);

      goto LABEL_28;
    case 0:
      v18 = (int *)*((_QWORD *)v9 + 19);
      if (*v18 <= 30)
      {
        if (*v18 == -1)
        {
          if (!_LogCategory_Initialize((uint64_t)v18, 0x1Eu))
            goto LABEL_21;
          v18 = (int *)*((_QWORD *)v9 + 19);
        }
        LogPrintF((uint64_t)v18, (uint64_t)"void _btSessionEventCallback(BTSession _Nonnull, BTSessionEvent, BTResult, void * _Nonnull)", 0x1Eu, (uint64_t)"BTSession attached: %#m\n", v13, v14, v15, v16, v17);
      }
LABEL_21:
      *((_QWORD *)v9 + 7) = a1;
      *((_BYTE *)v9 + 64) = 0;
      if (!*((_BYTE *)v9 + 66))
        objc_msgSend(v9, "_btEnsureStopped");
      objc_msgSend(v9, "_run");
      goto LABEL_28;
  }
  v41 = (int *)*((_QWORD *)v9 + 19);
  if (*v41 <= 40)
  {
    if (*v41 == -1)
    {
      if (!_LogCategory_Initialize(*((_QWORD *)v9 + 19), 0x28u))
        goto LABEL_28;
      v41 = (int *)*((_QWORD *)v9 + 19);
    }
    NSPrintF((uint64_t)"%#m", v10, v11, v12, v13, v14, v15, v16, v17);
    v53 = (void *)objc_claimAutoreleasedReturnValue();
    LogPrintF((uint64_t)v41, (uint64_t)"void _btSessionEventCallback(BTSession _Nonnull, BTSessionEvent, BTResult, void * _Nonnull)", 0x28u, (uint64_t)"BTSession unknown event %d, result %@", v42, v43, v44, v45, a2);

  }
LABEL_28:

  objc_autoreleasePoolPop(v8);
}

uint64_t initBTSessionAttachWithQueue(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  uint64_t v7;
  id v8;
  uint64_t v9;

  v7 = MobileBluetoothLibrary_sOnce;
  v8 = a4;
  if (v7 != -1)
    dispatch_once(&MobileBluetoothLibrary_sOnce, &__block_literal_global_1789);
  softLinkBTSessionAttachWithQueue[0] = (uint64_t (*)())dlsym((void *)MobileBluetoothLibrary_sLib, "BTSessionAttachWithQueue");
  v9 = ((uint64_t (*)(uint64_t, uint64_t, uint64_t, id))softLinkBTSessionAttachWithQueue[0])(a1, a2, a3, v8);

  return v9;
}

uint64_t initBTDeviceIsWirelessSplitterSupported(uint64_t a1, uint64_t a2)
{
  if (MobileBluetoothLibrary_sOnce_1977 != -1)
    dispatch_once(&MobileBluetoothLibrary_sOnce_1977, &__block_literal_global_623);
  softLinkBTDeviceIsWirelessSplitterSupported[0] = (uint64_t (*)())dlsym((void *)MobileBluetoothLibrary_sLib_1978, "BTDeviceIsWirelessSplitterSupported");
  return ((uint64_t (*)(uint64_t, uint64_t))softLinkBTDeviceIsWirelessSplitterSupported[0])(a1, a2);
}

uint64_t initBTDeviceIsTemporaryPaired(uint64_t a1, uint64_t a2)
{
  if (MobileBluetoothLibrary_sOnce_1977 != -1)
    dispatch_once(&MobileBluetoothLibrary_sOnce_1977, &__block_literal_global_623);
  softLinkBTDeviceIsTemporaryPaired[0] = (uint64_t (*)())dlsym((void *)MobileBluetoothLibrary_sLib_1978, "BTDeviceIsTemporaryPaired");
  return ((uint64_t (*)(uint64_t, uint64_t))softLinkBTDeviceIsTemporaryPaired[0])(a1, a2);
}

uint64_t initBTDeviceGetSupportedServices(uint64_t a1, uint64_t a2)
{
  if (MobileBluetoothLibrary_sOnce_1977 != -1)
    dispatch_once(&MobileBluetoothLibrary_sOnce_1977, &__block_literal_global_623);
  softLinkBTDeviceGetSupportedServices[0] = (uint64_t (*)())dlsym((void *)MobileBluetoothLibrary_sLib_1978, "BTDeviceGetSupportedServices");
  return ((uint64_t (*)(uint64_t, uint64_t))softLinkBTDeviceGetSupportedServices[0])(a1, a2);
}

uint64_t initBTDeviceGetDeviceId(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  if (MobileBluetoothLibrary_sOnce_1977 != -1)
    dispatch_once(&MobileBluetoothLibrary_sOnce_1977, &__block_literal_global_623);
  softLinkBTDeviceGetDeviceId[0] = (uint64_t (*)())dlsym((void *)MobileBluetoothLibrary_sLib_1978, "BTDeviceGetDeviceId");
  return ((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))softLinkBTDeviceGetDeviceId[0])(a1, a2, a3, a4, a5);
}

uint64_t initBTAccessoryManagerGetInEarStatus(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (MobileBluetoothLibrary_sOnce_1977 != -1)
    dispatch_once(&MobileBluetoothLibrary_sOnce_1977, &__block_literal_global_623);
  softLinkBTAccessoryManagerGetInEarStatus[0] = (uint64_t (*)())dlsym((void *)MobileBluetoothLibrary_sLib_1978, "BTAccessoryManagerGetInEarStatus");
  return ((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))softLinkBTAccessoryManagerGetInEarStatus[0])(a1, a2, a3, a4);
}

uint64_t initBTAccessoryManagerGetInEarDetectionEnable(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (MobileBluetoothLibrary_sOnce_1977 != -1)
    dispatch_once(&MobileBluetoothLibrary_sOnce_1977, &__block_literal_global_623);
  softLinkBTAccessoryManagerGetInEarDetectionEnable = (uint64_t (*)())dlsym((void *)MobileBluetoothLibrary_sLib_1978, "BTAccessoryManagerGetInEarDetectionEnable");
  return ((uint64_t (*)(uint64_t, uint64_t, uint64_t))softLinkBTAccessoryManagerGetInEarDetectionEnable)(a1, a2, a3);
}

uint64_t initBTDeviceGetName(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (MobileBluetoothLibrary_sOnce_1977 != -1)
    dispatch_once(&MobileBluetoothLibrary_sOnce_1977, &__block_literal_global_623);
  softLinkBTDeviceGetName[0] = (uint64_t (*)())dlsym((void *)MobileBluetoothLibrary_sLib_1978, "BTDeviceGetName");
  return ((uint64_t (*)(uint64_t, uint64_t, uint64_t))softLinkBTDeviceGetName[0])(a1, a2, a3);
}

uint64_t initBTDeviceGetMagicPairingStatus(uint64_t a1, uint64_t a2)
{
  if (MobileBluetoothLibrary_sOnce_1977 != -1)
    dispatch_once(&MobileBluetoothLibrary_sOnce_1977, &__block_literal_global_623);
  softLinkBTDeviceGetMagicPairingStatus[0] = (uint64_t (*)())dlsym((void *)MobileBluetoothLibrary_sLib_1978, "BTDeviceGetMagicPairingStatus");
  return ((uint64_t (*)(uint64_t, uint64_t))softLinkBTDeviceGetMagicPairingStatus[0])(a1, a2);
}

uint64_t initBTAccessoryManagerGetFeatureCapability(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (MobileBluetoothLibrary_sOnce_1977 != -1)
    dispatch_once(&MobileBluetoothLibrary_sOnce_1977, &__block_literal_global_623);
  softLinkBTAccessoryManagerGetFeatureCapability[0] = (uint64_t (*)())dlsym((void *)MobileBluetoothLibrary_sLib_1978, "BTAccessoryManagerGetFeatureCapability");
  return ((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))softLinkBTAccessoryManagerGetFeatureCapability[0])(a1, a2, a3, a4);
}

uint64_t initBTDeviceGetDeviceType(uint64_t a1, uint64_t a2)
{
  if (MobileBluetoothLibrary_sOnce_1977 != -1)
    dispatch_once(&MobileBluetoothLibrary_sOnce_1977, &__block_literal_global_623);
  softLinkBTDeviceGetDeviceType[0] = (uint64_t (*)())dlsym((void *)MobileBluetoothLibrary_sLib_1978, "BTDeviceGetDeviceType");
  return ((uint64_t (*)(uint64_t, uint64_t))softLinkBTDeviceGetDeviceType[0])(a1, a2);
}

uint64_t initBTAccessoryManagerGetDeviceColor(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (MobileBluetoothLibrary_sOnce_1977 != -1)
    dispatch_once(&MobileBluetoothLibrary_sOnce_1977, &__block_literal_global_623);
  softLinkBTAccessoryManagerGetDeviceColor[0] = (uint64_t (*)())dlsym((void *)MobileBluetoothLibrary_sLib_1978, "BTAccessoryManagerGetDeviceColor");
  return ((uint64_t (*)(uint64_t, uint64_t, uint64_t))softLinkBTAccessoryManagerGetDeviceColor[0])(a1, a2, a3);
}

uint64_t initBTDeviceGetConnectedServices_1982(uint64_t a1, uint64_t a2)
{
  if (MobileBluetoothLibrary_sOnce_1977 != -1)
    dispatch_once(&MobileBluetoothLibrary_sOnce_1977, &__block_literal_global_623);
  softLinkBTDeviceGetConnectedServices_1967 = (uint64_t (*)(_QWORD, _QWORD))dlsym((void *)MobileBluetoothLibrary_sLib_1978, "BTDeviceGetConnectedServices");
  return softLinkBTDeviceGetConnectedServices_1967(a1, a2);
}

uint64_t initBTAccessoryManagerGetAccessoryInfo(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  if (MobileBluetoothLibrary_sOnce_1977 != -1)
    dispatch_once(&MobileBluetoothLibrary_sOnce_1977, &__block_literal_global_623);
  softLinkBTAccessoryManagerGetAccessoryInfo[0] = (uint64_t (*)())dlsym((void *)MobileBluetoothLibrary_sLib_1978, "BTAccessoryManagerGetAccessoryInfo");
  return ((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))softLinkBTAccessoryManagerGetAccessoryInfo[0])(a1, a2, a3, a4, a5);
}

uint64_t initBTAccessoryManagerReadDeviceVersionInfo(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15)
{
  if (MobileBluetoothLibrary_sOnce_1977 != -1)
    dispatch_once(&MobileBluetoothLibrary_sOnce_1977, &__block_literal_global_623);
  softLinkBTAccessoryManagerReadDeviceVersionInfo = (uint64_t (*)(int, int, int, int, int, int, int, int, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))dlsym((void *)MobileBluetoothLibrary_sLib_1978, "BTAccessoryManagerReadDeviceVersionInfo");
  return softLinkBTAccessoryManagerReadDeviceVersionInfo(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15);
}

uint64_t initBTAccessoryManagerGetDefault(uint64_t a1, uint64_t a2)
{
  if (MobileBluetoothLibrary_sOnce_1977 != -1)
    dispatch_once(&MobileBluetoothLibrary_sOnce_1977, &__block_literal_global_623);
  softLinkBTAccessoryManagerGetDefault[0] = (uint64_t (*)())dlsym((void *)MobileBluetoothLibrary_sLib_1978, "BTAccessoryManagerGetDefault");
  return ((uint64_t (*)(uint64_t, uint64_t))softLinkBTAccessoryManagerGetDefault[0])(a1, a2);
}

uint64_t initBTDeviceAddressFromString(uint64_t a1, uint64_t a2)
{
  if (MobileBluetoothLibrary_sOnce_1977 != -1)
    dispatch_once(&MobileBluetoothLibrary_sOnce_1977, &__block_literal_global_623);
  softLinkBTDeviceAddressFromString[0] = (uint64_t (*)())dlsym((void *)MobileBluetoothLibrary_sLib_1978, "BTDeviceAddressFromString");
  return ((uint64_t (*)(uint64_t, uint64_t))softLinkBTDeviceAddressFromString[0])(a1, a2);
}

uint64_t initBTDeviceGetAddressString_2020(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (MobileBluetoothLibrary_sOnce_1977 != -1)
    dispatch_once(&MobileBluetoothLibrary_sOnce_1977, &__block_literal_global_623);
  softLinkBTDeviceGetAddressString_1991[0] = (uint64_t (*)())dlsym((void *)MobileBluetoothLibrary_sLib_1978, "BTDeviceGetAddressString");
  return ((uint64_t (*)(uint64_t, uint64_t, uint64_t))softLinkBTDeviceGetAddressString_1991[0])(a1, a2, a3);
}

uint64_t initBTLocalDeviceGetPairedDevices(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (MobileBluetoothLibrary_sOnce_1977 != -1)
    dispatch_once(&MobileBluetoothLibrary_sOnce_1977, &__block_literal_global_623);
  softLinkBTLocalDeviceGetPairedDevices[0] = (uint64_t (*)())dlsym((void *)MobileBluetoothLibrary_sLib_1978, "BTLocalDeviceGetPairedDevices");
  return ((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))softLinkBTLocalDeviceGetPairedDevices[0])(a1, a2, a3, a4);
}

const char *BTServiceSpecificEventToString_2021(int a1)
{
  const char *result;

  if (a1 > 500)
  {
    if (a1 <= 600)
    {
      switch(a1)
      {
        case 501:
          result = "BT_SERVICE_REMOTE_PLAY";
          break;
        case 502:
          result = "BT_SERVICE_REMOTE_PAUSE";
          break;
        case 503:
          result = "BT_SERVICE_REMOTE_STOP";
          break;
        case 504:
          result = "BT_SERVICE_REMOTE_PREVIOUS";
          break;
        case 505:
          result = "BT_SERVICE_REMOTE_NEXT";
          break;
        case 506:
          result = "BT_SERVICE_REMOTE_VOL_UP";
          break;
        case 507:
          result = "BT_SERVICE_REMOTE_VOL_DOWN";
          break;
        case 508:
          result = "BT_SERVICE_REMOTE_MUTE";
          break;
        case 509:
          result = "BT_SERVICE_REMOTE_FASTFORWARD_START";
          break;
        case 510:
          result = "BT_SERVICE_REMOTE_FASTFORWARD_STOP";
          break;
        case 511:
          result = "BT_SERVICE_REMOTE_REWIND_START";
          break;
        case 512:
          result = "BT_SERVICE_REMOTE_REWIND_STOP";
          break;
        default:
          return "?";
      }
      return result;
    }
    if (a1 <= 702)
    {
      switch(a1)
      {
        case 601:
          return "BT_SERVICE_SENSOR_RSSI";
        case 701:
          return "BT_SERVICE_LMP_NAME_CHANGED";
        case 702:
          return "BT_SERVICE_HIGH_POWER_ENABLED";
      }
    }
    else if (a1 > 801)
    {
      if (a1 == 802)
        return "BT_SERVICE_LEA_AUDIO_DISCONNECTED";
      if (a1 == 901)
        return "BT_UI_INITIATED_CONNECTION_REQUEST";
    }
    else
    {
      if (a1 == 703)
        return "BT_SERVICE_HIGH_POWER_DISABLED";
      if (a1 == 801)
        return "BT_SERVICE_LEA_AUDIO_CONNECTED";
    }
    return "?";
  }
  if (a1 <= 100)
  {
    if (a1 <= 1)
    {
      if (!a1)
        return "BT_SERVICE_SDP";
      if (a1 == 1)
        return "BT_SERVICE_CONNECTION_ATTEMPT";
    }
    else
    {
      switch(a1)
      {
        case 2:
          return "BT_SERVICE_DISCONNECTION_ATTEMPT";
        case 11:
          return "BT_SERVICE_CONNECTION_RESULT";
        case 12:
          return "BT_SERVICE_DISCONNECTION_RESULT";
      }
    }
    return "?";
  }
  if (a1 > 201)
  {
    if (a1 > 301)
    {
      if (a1 == 302)
        return "BT_SERVICE_PHONE_BOOK_SEND_COMPLETE";
      if (a1 == 303)
        return "BT_SERVICE_PHONE_BOOK_SYNC_SUPPORTED";
    }
    else
    {
      if (a1 == 202)
        return "BT_SERVICE_A2DP_AUDIO_DISCONNECTED";
      if (a1 == 301)
        return "BT_SERVICE_PHONE_BOOK_SEND_INITIATED";
    }
    return "?";
  }
  switch(a1)
  {
    case 'e':
      result = "BT_SERVICE_HANDSFREE_AUDIO_CONNECTED";
      break;
    case 'f':
      result = "BT_SERVICE_HANDSFREE_AUDIO_DISCONNECTED";
      break;
    case 'g':
      result = "BT_SERVICE_HANDSFREE_START_VOICE_COMMAND";
      break;
    case 'h':
      result = "BT_SERVICE_HANDSFREE_END_VOICE_COMMAND";
      break;
    default:
      if (a1 != 201)
        return "?";
      result = "BT_SERVICE_A2DP_AUDIO_CONNECTED";
      break;
  }
  return result;
}

uint64_t initBTLocalDeviceGetConnectedDevices(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (MobileBluetoothLibrary_sOnce_1977 != -1)
    dispatch_once(&MobileBluetoothLibrary_sOnce_1977, &__block_literal_global_623);
  softLinkBTLocalDeviceGetConnectedDevices[0] = (uint64_t (*)())dlsym((void *)MobileBluetoothLibrary_sLib_1978, "BTLocalDeviceGetConnectedDevices");
  return ((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))softLinkBTLocalDeviceGetConnectedDevices[0])(a1, a2, a3, a4);
}

uint64_t initBTDeviceFromAddress_2042(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (MobileBluetoothLibrary_sOnce_1977 != -1)
    dispatch_once(&MobileBluetoothLibrary_sOnce_1977, &__block_literal_global_623);
  softLinkBTDeviceFromAddress_2040[0] = (uint64_t (*)())dlsym((void *)MobileBluetoothLibrary_sLib_1978, "BTDeviceFromAddress");
  return ((uint64_t (*)(uint64_t, uint64_t, uint64_t))softLinkBTDeviceFromAddress_2040[0])(a1, a2, a3);
}

uint64_t initBTDeviceFromIdentifier_2043(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (MobileBluetoothLibrary_sOnce_1977 != -1)
    dispatch_once(&MobileBluetoothLibrary_sOnce_1977, &__block_literal_global_623);
  softLinkBTDeviceFromIdentifier_2037[0] = (uint64_t (*)())dlsym((void *)MobileBluetoothLibrary_sLib_1978, "BTDeviceFromIdentifier");
  return ((uint64_t (*)(uint64_t, uint64_t, uint64_t))softLinkBTDeviceFromIdentifier_2037[0])(a1, a2, a3);
}

void _btServiceEventHandler_2064(uint64_t a1, uint64_t a2, int a3, uint64_t a4, int a5, void *a6)
{
  void *v12;
  int **v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  int **v18;
  int *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  int *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  int *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  int *v34;
  uint64_t v35;
  int ConnectedServices_1967;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  int *v42;
  int v43;
  int v44;
  int *v45;
  int v46;

  v12 = (void *)MEMORY[0x18D78EB2C]();
  v13 = a6;
  v18 = v13;
  if (*((_BYTE *)v13 + 216))
    goto LABEL_2;
  if (a3 == 3)
  {
    v24 = v13[28];
    if (*v24 <= 10)
    {
      if (*v24 == -1)
      {
        if (!_LogCategory_Initialize((uint64_t)v13[28], 0xAu))
          goto LABEL_23;
        v24 = v18[28];
      }
      BTServiceSpecificEventToString_2021(a4);
      LogPrintF((uint64_t)v24, (uint64_t)"void _btServiceEventHandler(BTDevice _Nonnull, BTServiceID, BTServiceEventType, BTServiceSpecificEvent, BTResult, void * _Nonnull)", 0xAu, (uint64_t)"BTService independent event: %#{flags}, %d %s, %#m\n", v25, v26, v27, v28, a2);
    }
LABEL_23:
    objc_msgSend(v18, "_handleDeviceEvent:device:", a4, a1);
    goto LABEL_2;
  }
  if (a3 == 1)
  {
    v29 = v13[28];
    if (*v29 <= 10)
    {
      if (*v29 == -1)
      {
        if (!_LogCategory_Initialize((uint64_t)v13[28], 0xAu))
          goto LABEL_25;
        v29 = v18[28];
      }
      BTServiceSpecificEventToString_2021(a4);
      LogPrintF((uint64_t)v29, (uint64_t)"void _btServiceEventHandler(BTDevice _Nonnull, BTServiceID, BTServiceEventType, BTServiceSpecificEvent, BTResult, void * _Nonnull)", 0xAu, (uint64_t)"BTService disconnect: %#{flags}, %d %s, %#m\n", v30, v31, v32, v33, a2);
    }
LABEL_25:
    if (a5)
      v35 = (a5 + 310000);
    else
      v35 = 0;
    objc_msgSend(v18, "_handleDeviceDisconnected:reason:", a1, v35);
    goto LABEL_2;
  }
  if (a3)
    goto LABEL_2;
  v19 = v13[28];
  if (*v19 <= 10)
  {
    if (*v19 != -1)
    {
LABEL_8:
      BTServiceSpecificEventToString_2021(a4);
      LogPrintF((uint64_t)v19, (uint64_t)"void _btServiceEventHandler(BTDevice _Nonnull, BTServiceID, BTServiceEventType, BTServiceSpecificEvent, BTResult, void * _Nonnull)", 0xAu, (uint64_t)"BTService connect: %#{flags}, %d %s, %#m\n", v20, v21, v22, v23, a2);
      goto LABEL_16;
    }
    if (_LogCategory_Initialize((uint64_t)v13[28], 0xAu))
    {
      v19 = v18[28];
      goto LABEL_8;
    }
  }
LABEL_16:
  if ((_DWORD)a4 != 11)
    goto LABEL_2;
  if (!a5)
  {
    if (!*((_DWORD *)v18 + 60))
      goto LABEL_39;
    v46 = 0;
    ConnectedServices_1967 = softLinkBTDeviceGetConnectedServices_1967(a1, &v46);
    if (ConnectedServices_1967)
    {
      v41 = (ConnectedServices_1967 + 310000);
      if (ConnectedServices_1967 != -310000)
      {
        v42 = v18[28];
        if (*v42 <= 90)
        {
          if (*v42 != -1)
          {
LABEL_34:
            LogPrintF((uint64_t)v42, (uint64_t)"void _btServiceEventHandler(BTDevice _Nonnull, BTServiceID, BTServiceEventType, BTServiceSpecificEvent, BTResult, void * _Nonnull)", 0x5Au, (uint64_t)"### BTDeviceGetConnectedServices failed: %#m\n", v37, v38, v39, v40, v41);
            goto LABEL_38;
          }
          if (_LogCategory_Initialize((uint64_t)v42, 0x5Au))
          {
            v42 = v18[28];
            goto LABEL_34;
          }
        }
      }
    }
LABEL_38:
    v43 = v46;
    v44 = *((_DWORD *)v18 + 60);
    if ((v44 & ~v46) != 0)
    {
      v45 = v18[28];
      if (*v45 <= 30)
      {
        if (*v45 == -1)
        {
          if (!_LogCategory_Initialize((uint64_t)v45, 0x1Eu))
            goto LABEL_2;
          v45 = v18[28];
          v44 = *((_DWORD *)v18 + 60);
          v43 = v46;
        }
        LogPrintF((uint64_t)v45, (uint64_t)"void _btServiceEventHandler(BTDevice _Nonnull, BTServiceID, BTServiceEventType, BTServiceSpecificEvent, BTResult, void * _Nonnull)", 0x1Eu, (uint64_t)"BTService connect waiting for more services: %#{flags}\n", v37, v38, v39, v40, v44 & ~v43);
      }
      goto LABEL_2;
    }
LABEL_39:
    objc_msgSend(v18, "_handleDeviceConnected:", a1);
    goto LABEL_2;
  }
  v34 = v18[28];
  if (*v34 <= 60)
  {
    if (*v34 == -1)
    {
      if (!_LogCategory_Initialize((uint64_t)v34, 0x3Cu))
        goto LABEL_2;
      v34 = v18[28];
    }
    LogPrintF((uint64_t)v34, (uint64_t)"void _btServiceEventHandler(BTDevice _Nonnull, BTServiceID, BTServiceEventType, BTServiceSpecificEvent, BTResult, void * _Nonnull)", 0x3Cu, (uint64_t)"### BTService connect failed: %#m\n", v14, v15, v16, v17, (a5 + 310000));
  }
LABEL_2:

  objc_autoreleasePoolPop(v12);
}

uint64_t initBTSessionDetachWithQueue_2069(uint64_t a1)
{
  if (MobileBluetoothLibrary_sOnce_1977 != -1)
    dispatch_once(&MobileBluetoothLibrary_sOnce_1977, &__block_literal_global_623);
  softLinkBTSessionDetachWithQueue_2067[0] = (uint64_t (*)())dlsym((void *)MobileBluetoothLibrary_sLib_1978, "BTSessionDetachWithQueue");
  return ((uint64_t (*)(uint64_t))softLinkBTSessionDetachWithQueue_2067[0])(a1);
}

uint64_t initBTServiceRemoveCallbacks_2070(uint64_t a1, uint64_t a2)
{
  if (MobileBluetoothLibrary_sOnce_1977 != -1)
    dispatch_once(&MobileBluetoothLibrary_sOnce_1977, &__block_literal_global_623);
  softLinkBTServiceRemoveCallbacks_2065[0] = (uint64_t (*)())dlsym((void *)MobileBluetoothLibrary_sLib_1978, "BTServiceRemoveCallbacks");
  return ((uint64_t (*)(uint64_t, uint64_t))softLinkBTServiceRemoveCallbacks_2065[0])(a1, a2);
}

uint64_t initBTPairingAgentDestroy(uint64_t a1)
{
  if (MobileBluetoothLibrary_sOnce_1977 != -1)
    dispatch_once(&MobileBluetoothLibrary_sOnce_1977, &__block_literal_global_623);
  softLinkBTPairingAgentDestroy[0] = (uint64_t (*)())dlsym((void *)MobileBluetoothLibrary_sLib_1978, "BTPairingAgentDestroy");
  return ((uint64_t (*)(uint64_t))softLinkBTPairingAgentDestroy[0])(a1);
}

uint64_t initBTPairingAgentStop(uint64_t a1)
{
  if (MobileBluetoothLibrary_sOnce_1977 != -1)
    dispatch_once(&MobileBluetoothLibrary_sOnce_1977, &__block_literal_global_623);
  softLinkBTPairingAgentStop[0] = (uint64_t (*)())dlsym((void *)MobileBluetoothLibrary_sLib_1978, "BTPairingAgentStop");
  return ((uint64_t (*)(uint64_t))softLinkBTPairingAgentStop[0])(a1);
}

uint64_t initBTLocalDeviceRemoveCallbacks(uint64_t a1, uint64_t a2)
{
  if (MobileBluetoothLibrary_sOnce_1977 != -1)
    dispatch_once(&MobileBluetoothLibrary_sOnce_1977, &__block_literal_global_623);
  softLinkBTLocalDeviceRemoveCallbacks[0] = (uint64_t (*)())dlsym((void *)MobileBluetoothLibrary_sLib_1978, "BTLocalDeviceRemoveCallbacks");
  return ((uint64_t (*)(uint64_t, uint64_t))softLinkBTLocalDeviceRemoveCallbacks[0])(a1, a2);
}

uint64_t initBTAccessoryManagerRemoveCallbacks(uint64_t a1, uint64_t a2)
{
  if (MobileBluetoothLibrary_sOnce_1977 != -1)
    dispatch_once(&MobileBluetoothLibrary_sOnce_1977, &__block_literal_global_623);
  softLinkBTAccessoryManagerRemoveCallbacks[0] = (uint64_t (*)())dlsym((void *)MobileBluetoothLibrary_sLib_1978, "BTAccessoryManagerRemoveCallbacks");
  return ((uint64_t (*)(uint64_t, uint64_t))softLinkBTAccessoryManagerRemoveCallbacks[0])(a1, a2);
}

id CBCentralManagerOptionShowPowerAlertKeyFunction()
{
  return (id)constantValCBCentralManagerOptionShowPowerAlertKey;
}

id initValCBCentralManagerOptionShowPowerAlertKey()
{
  id *v0;

  if (CoreBluetoothLibrary_sOnce_2105 != -1)
    dispatch_once(&CoreBluetoothLibrary_sOnce_2105, &__block_literal_global_527);
  v0 = (id *)dlsym((void *)CoreBluetoothLibrary_sLib_2108, "CBCentralManagerOptionShowPowerAlertKey");
  if (v0)
    objc_storeStrong((id *)&constantValCBCentralManagerOptionShowPowerAlertKey, *v0);
  getCBCentralManagerOptionShowPowerAlertKey[0] = (uint64_t (*)())CBCentralManagerOptionShowPowerAlertKeyFunction;
  return (id)constantValCBCentralManagerOptionShowPowerAlertKey;
}

id CBCentralManagerFunction_2075()
{
  return (id)classCBCentralManager_2109;
}

Class initCBCentralManager_2076()
{
  Class result;

  if (CoreBluetoothLibrary_sOnce_2105 != -1)
    dispatch_once(&CoreBluetoothLibrary_sOnce_2105, &__block_literal_global_527);
  result = objc_getClass("CBCentralManager");
  classCBCentralManager_2109 = (uint64_t)result;
  getCBCentralManagerClass_2074 = (uint64_t (*)())CBCentralManagerFunction_2075;
  return result;
}

id CBPeripheralManagerOptionShowPowerAlertKeyFunction()
{
  return (id)constantValCBPeripheralManagerOptionShowPowerAlertKey;
}

id initValCBPeripheralManagerOptionShowPowerAlertKey()
{
  id *v0;

  if (CoreBluetoothLibrary_sOnce_2105 != -1)
    dispatch_once(&CoreBluetoothLibrary_sOnce_2105, &__block_literal_global_527);
  v0 = (id *)dlsym((void *)CoreBluetoothLibrary_sLib_2108, "CBPeripheralManagerOptionShowPowerAlertKey");
  if (v0)
    objc_storeStrong((id *)&constantValCBPeripheralManagerOptionShowPowerAlertKey, *v0);
  getCBPeripheralManagerOptionShowPowerAlertKey[0] = (uint64_t (*)())CBPeripheralManagerOptionShowPowerAlertKeyFunction;
  return (id)constantValCBPeripheralManagerOptionShowPowerAlertKey;
}

id CBPeripheralManagerFunction_2079()
{
  return (id)classCBPeripheralManager_2106;
}

Class initCBPeripheralManager_2080()
{
  Class result;

  if (CoreBluetoothLibrary_sOnce_2105 != -1)
    dispatch_once(&CoreBluetoothLibrary_sOnce_2105, &__block_literal_global_527);
  result = objc_getClass("CBPeripheralManager");
  classCBPeripheralManager_2106 = (uint64_t)result;
  getCBPeripheralManagerClass_2078 = (uint64_t (*)())CBPeripheralManagerFunction_2079;
  return result;
}

void _btSessionEventCallback_2082(int *a1, uint64_t a2, int a3, void *a4)
{
  void *v8;
  int **v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  int **v14;
  int *v15;
  int *v16;
  int *v17;
  int *v18;
  int *v19;
  int v20;
  uint64_t v21;

  v8 = (void *)MEMORY[0x18D78EB2C]();
  v9 = a4;
  v14 = v9;
  switch((int)a2)
  {
    case 0:
      v15 = v9[28];
      if (*v15 > 30)
        goto LABEL_19;
      if (*v15 != -1)
        goto LABEL_4;
      if (_LogCategory_Initialize((uint64_t)v15, 0x1Eu))
      {
        v15 = v14[28];
LABEL_4:
        LogPrintF((uint64_t)v15, (uint64_t)"void _btSessionEventCallback(BTSession _Nonnull, BTSessionEvent, BTResult, void * _Nonnull)", 0x1Eu, (uint64_t)"BTSession attached: %#m\n", v10, v11, v12, v13, (a3 + 310000));
      }
LABEL_19:
      v14[12] = a1;
      *((_BYTE *)v14 + 105) = 0;
      if (*((_BYTE *)v14 + 107))
        objc_msgSend(v14, "_btEnsureStarted");
      else
        objc_msgSend(v14, "_btEnsureStopped");
      break;
    case 1:
      v17 = v9[28];
      if (*v17 > 30)
        goto LABEL_25;
      if (*v17 != -1)
        goto LABEL_10;
      if (_LogCategory_Initialize((uint64_t)v17, 0x1Eu))
      {
        v17 = v14[28];
LABEL_10:
        LogPrintF((uint64_t)v17, (uint64_t)"void _btSessionEventCallback(BTSession _Nonnull, BTSessionEvent, BTResult, void * _Nonnull)", 0x1Eu, (uint64_t)"BTSession detached: %#m\n", v10, v11, v12, v13, (a3 + 310000));
      }
LABEL_25:
      v14[12] = 0;
      *((_BYTE *)v14 + 105) = 0;
      objc_msgSend(v14, "_btEnsureStopped");
      goto LABEL_29;
    case 2:
      v18 = v9[28];
      if (*v18 > 60)
        goto LABEL_27;
      if (*v18 != -1)
        goto LABEL_13;
      if (_LogCategory_Initialize((uint64_t)v18, 0x3Cu))
      {
        v18 = v14[28];
LABEL_13:
        LogPrintF((uint64_t)v18, (uint64_t)"void _btSessionEventCallback(BTSession _Nonnull, BTSessionEvent, BTResult, void * _Nonnull)", 0x3Cu, (uint64_t)"### BTSession terminated (bluetoothd crash)...re-attaching\n", v10, v11, v12, v13, v21);
      }
LABEL_27:
      v14[12] = 0;
      *((_BYTE *)v14 + 105) = 0;
      v20 = *((unsigned __int8 *)v14 + 107);
      objc_msgSend(v14, "_btEnsureStopped");
      if (v20)
        objc_msgSend(v14, "_btEnsureStarted");
LABEL_29:
      CFRelease(v14);
      break;
    case 3:
      v19 = v9[28];
      if (*v19 > 60)
        break;
      if (*v19 != -1)
        goto LABEL_16;
      if (_LogCategory_Initialize((uint64_t)v19, 0x3Cu))
      {
        v19 = v14[28];
LABEL_16:
        LogPrintF((uint64_t)v19, (uint64_t)"void _btSessionEventCallback(BTSession _Nonnull, BTSessionEvent, BTResult, void * _Nonnull)", 0x3Cu, (uint64_t)"### BTSession failed: %#m\n", v10, v11, v12, v13, (a3 + 310000));
      }
      break;
    default:
      v16 = v9[28];
      if (*v16 > 40)
        break;
      if (*v16 != -1)
        goto LABEL_7;
      if (_LogCategory_Initialize((uint64_t)v16, 0x28u))
      {
        v16 = v14[28];
LABEL_7:
        LogPrintF((uint64_t)v16, (uint64_t)"void _btSessionEventCallback(BTSession _Nonnull, BTSessionEvent, BTResult, void * _Nonnull)", 0x28u, (uint64_t)"BTSession unknown event %d, result %#m\n", v10, v11, v12, v13, a2);
      }
      break;
  }

  objc_autoreleasePoolPop(v8);
}

void _btLocalDeviceStatusCallback(uint64_t a1, int a2, uint64_t a3, void *a4)
{
  void *v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  int *v13;
  const char *v14;
  uint64_t v15;

  v6 = (void *)MEMORY[0x18D78EB2C]();
  v7 = a4;
  v12 = v7;
  if (a2 == 11)
  {
    v13 = (int *)v7[28];
    if (*v13 <= 30)
    {
      if (*v13 == -1)
      {
        if (!_LogCategory_Initialize((uint64_t)v13, 0x1Eu))
          goto LABEL_13;
        v13 = (int *)v12[28];
      }
      v14 = "Bluetooth first unlock completed";
LABEL_9:
      LogPrintF((uint64_t)v13, (uint64_t)"void _btLocalDeviceStatusCallback(BTLocalDevice _Nonnull, BTLocalDeviceEvent, BTResult, void * _Nonnull)", 0x1Eu, (uint64_t)v14, v8, v9, v10, v11, v15);
    }
LABEL_13:
    objc_msgSend(v12, "_handlePairingStatusChanged");
    goto LABEL_14;
  }
  if (a2 == 4)
  {
    v13 = (int *)v7[28];
    if (*v13 <= 30)
    {
      if (*v13 == -1)
      {
        if (!_LogCategory_Initialize((uint64_t)v13, 0x1Eu))
          goto LABEL_13;
        v13 = (int *)v12[28];
      }
      v14 = "Pairing status changed\n";
      goto LABEL_9;
    }
    goto LABEL_13;
  }
LABEL_14:

  objc_autoreleasePoolPop(v6);
}

void _btPairingAgentStatusCallback(uint64_t a1, uint64_t a2, uint64_t a3, int a4, void *a5)
{
  void *v8;
  int **v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  int **v14;
  int *v15;
  int *v16;
  int *v17;
  int *v18;
  int *v19;

  v8 = (void *)MEMORY[0x18D78EB2C]();
  v9 = a5;
  v14 = v9;
  switch((int)a2)
  {
    case 0:
      v15 = v9[28];
      if (*v15 > 30)
        goto LABEL_19;
      if (*v15 != -1)
        goto LABEL_4;
      if (_LogCategory_Initialize((uint64_t)v15, 0x1Eu))
      {
        v15 = v14[28];
LABEL_4:
        LogPrintF((uint64_t)v15, (uint64_t)"void _btPairingAgentStatusCallback(BTPairingAgent _Nonnull, BTPairingEvent, BTDevice _Nonnull, BTResult, void * _Nonnull)", 0x1Eu, (uint64_t)"BTPairingAgent started: %#m\n", v10, v11, v12, v13, (a4 + 310000));
      }
LABEL_19:
      if (*((_BYTE *)v14 + 107))
      {
        *((_BYTE *)v14 + 177) = 1;
        objc_msgSend(v14, "_btEnsureStarted");
      }
      break;
    case 1:
      v17 = v9[28];
      if (*v17 > 30)
        break;
      if (*v17 != -1)
        goto LABEL_10;
      if (_LogCategory_Initialize((uint64_t)v17, 0x1Eu))
      {
        v17 = v14[28];
LABEL_10:
        LogPrintF((uint64_t)v17, (uint64_t)"void _btPairingAgentStatusCallback(BTPairingAgent _Nonnull, BTPairingEvent, BTDevice _Nonnull, BTResult, void * _Nonnull)", 0x1Eu, (uint64_t)"BTPairingAgent stopped: %#m\n", v10, v11, v12, v13, (a4 + 310000));
      }
      break;
    case 2:
      v18 = v9[28];
      if (*v18 > 30)
        break;
      if (*v18 != -1)
        goto LABEL_13;
      if (_LogCategory_Initialize((uint64_t)v18, 0x1Eu))
      {
        v18 = v14[28];
LABEL_13:
        LogPrintF((uint64_t)v18, (uint64_t)"void _btPairingAgentStatusCallback(BTPairingAgent _Nonnull, BTPairingEvent, BTDevice _Nonnull, BTResult, void * _Nonnull)", 0x1Eu, (uint64_t)"BTPairingAgent attempt started: %#m\n", v10, v11, v12, v13, (a4 + 310000));
      }
      break;
    case 3:
      v19 = v9[28];
      if (*v19 > 30)
        break;
      if (*v19 != -1)
        goto LABEL_16;
      if (_LogCategory_Initialize((uint64_t)v19, 0x1Eu))
      {
        v19 = v14[28];
LABEL_16:
        LogPrintF((uint64_t)v19, (uint64_t)"void _btPairingAgentStatusCallback(BTPairingAgent _Nonnull, BTPairingEvent, BTDevice _Nonnull, BTResult, void * _Nonnull)", 0x1Eu, (uint64_t)"BTPairingAgent attempt complete: %#m\n", v10, v11, v12, v13, (a4 + 310000));
        break;
      }
      break;
    default:
      v16 = v9[28];
      if (*v16 > 30)
        break;
      if (*v16 != -1)
        goto LABEL_7;
      if (_LogCategory_Initialize((uint64_t)v16, 0x1Eu))
      {
        v16 = v14[28];
LABEL_7:
        LogPrintF((uint64_t)v16, (uint64_t)"void _btPairingAgentStatusCallback(BTPairingAgent _Nonnull, BTPairingEvent, BTDevice _Nonnull, BTResult, void * _Nonnull)", 0x1Eu, (uint64_t)"BTPairingAgent unknown event: %d, %#m\n", v10, v11, v12, v13, a2);
      }
      break;
  }

  objc_autoreleasePoolPop(v8);
}

void _btAccessoryEventCallback(uint64_t a1, int a2, uint64_t a3, uint64_t a4, void *a5)
{
  void *v9;
  id v10;
  void *v11;
  uint64_t v12;

  v9 = (void *)MEMORY[0x18D78EB2C]();
  v10 = a5;
  v11 = v10;
  switch(a2)
  {
    case 4:
      objc_msgSend(v10, "_btAccessoryNameChanged:", a3);
      break;
    case 6:
    case 12:
      objc_msgSend(v10, "_btAccessoryPlacementChanged:device:", a1, a3);
      break;
    case 9:
      v12 = 1;
      goto LABEL_7;
    case 10:
      v12 = 2;
      goto LABEL_7;
    case 11:
      v12 = 3;
LABEL_7:
      objc_msgSend(v10, "_btAccessoryStreamStateChanged:device:", v12, a3);
      break;
    default:
      break;
  }

  objc_autoreleasePoolPop(v9);
}

uint64_t initBTAccessoryManagerAddCallbacks(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (MobileBluetoothLibrary_sOnce_1977 != -1)
    dispatch_once(&MobileBluetoothLibrary_sOnce_1977, &__block_literal_global_623);
  softLinkBTAccessoryManagerAddCallbacks[0] = (uint64_t (*)())dlsym((void *)MobileBluetoothLibrary_sLib_1978, "BTAccessoryManagerAddCallbacks");
  return ((uint64_t (*)(uint64_t, uint64_t, uint64_t))softLinkBTAccessoryManagerAddCallbacks[0])(a1, a2, a3);
}

uint64_t initBTPairingAgentStart(uint64_t a1)
{
  if (MobileBluetoothLibrary_sOnce_1977 != -1)
    dispatch_once(&MobileBluetoothLibrary_sOnce_1977, &__block_literal_global_623);
  softLinkBTPairingAgentStart[0] = (uint64_t (*)())dlsym((void *)MobileBluetoothLibrary_sLib_1978, "BTPairingAgentStart");
  return ((uint64_t (*)(uint64_t))softLinkBTPairingAgentStart[0])(a1);
}

uint64_t initBTPairingAgentCreate(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (MobileBluetoothLibrary_sOnce_1977 != -1)
    dispatch_once(&MobileBluetoothLibrary_sOnce_1977, &__block_literal_global_623);
  softLinkBTPairingAgentCreate[0] = (uint64_t (*)())dlsym((void *)MobileBluetoothLibrary_sLib_1978, "BTPairingAgentCreate");
  return ((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))softLinkBTPairingAgentCreate[0])(a1, a2, a3, a4);
}

uint64_t initBTLocalDeviceAddCallbacks(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (MobileBluetoothLibrary_sOnce_1977 != -1)
    dispatch_once(&MobileBluetoothLibrary_sOnce_1977, &__block_literal_global_623);
  softLinkBTLocalDeviceAddCallbacks[0] = (uint64_t (*)())dlsym((void *)MobileBluetoothLibrary_sLib_1978, "BTLocalDeviceAddCallbacks");
  return ((uint64_t (*)(uint64_t, uint64_t, uint64_t))softLinkBTLocalDeviceAddCallbacks[0])(a1, a2, a3);
}

uint64_t initBTLocalDeviceGetAddressString(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (MobileBluetoothLibrary_sOnce_1977 != -1)
    dispatch_once(&MobileBluetoothLibrary_sOnce_1977, &__block_literal_global_623);
  softLinkBTLocalDeviceGetAddressString[0] = (uint64_t (*)())dlsym((void *)MobileBluetoothLibrary_sLib_1978, "BTLocalDeviceGetAddressString");
  return ((uint64_t (*)(uint64_t, uint64_t, uint64_t))softLinkBTLocalDeviceGetAddressString[0])(a1, a2, a3);
}

uint64_t initBTLocalDeviceGetDefault(uint64_t a1, uint64_t a2)
{
  if (MobileBluetoothLibrary_sOnce_1977 != -1)
    dispatch_once(&MobileBluetoothLibrary_sOnce_1977, &__block_literal_global_623);
  softLinkBTLocalDeviceGetDefault[0] = (uint64_t (*)())dlsym((void *)MobileBluetoothLibrary_sLib_1978, "BTLocalDeviceGetDefault");
  return ((uint64_t (*)(uint64_t, uint64_t))softLinkBTLocalDeviceGetDefault[0])(a1, a2);
}

uint64_t initBTServiceAddCallbacks_2102(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (MobileBluetoothLibrary_sOnce_1977 != -1)
    dispatch_once(&MobileBluetoothLibrary_sOnce_1977, &__block_literal_global_623);
  softLinkBTServiceAddCallbacks_2086[0] = (uint64_t (*)())dlsym((void *)MobileBluetoothLibrary_sLib_1978, "BTServiceAddCallbacks");
  return ((uint64_t (*)(uint64_t, uint64_t, uint64_t))softLinkBTServiceAddCallbacks_2086[0])(a1, a2, a3);
}

uint64_t initBTSessionAttachWithQueue_2103(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  uint64_t v7;
  id v8;
  uint64_t v9;

  v7 = MobileBluetoothLibrary_sOnce_1977;
  v8 = a4;
  if (v7 != -1)
    dispatch_once(&MobileBluetoothLibrary_sOnce_1977, &__block_literal_global_623);
  softLinkBTSessionAttachWithQueue_2083[0] = (uint64_t (*)())dlsym((void *)MobileBluetoothLibrary_sLib_1978, "BTSessionAttachWithQueue");
  v9 = ((uint64_t (*)(uint64_t, uint64_t, uint64_t, id))softLinkBTSessionAttachWithQueue_2083[0])(a1, a2, a3, v8);

  return v9;
}

id CBScalablePipeManagerFunction()
{
  return (id)classCBScalablePipeManager;
}

Class initCBScalablePipeManager()
{
  Class result;

  if (CoreBluetoothLibrary_sOnce_2360 != -1)
    dispatch_once(&CoreBluetoothLibrary_sOnce_2360, &__block_literal_global_2361);
  result = objc_getClass("CBScalablePipeManager");
  classCBScalablePipeManager = (uint64_t)result;
  getCBScalablePipeManagerClass[0] = (uint64_t (*)())CBScalablePipeManagerFunction;
  return result;
}

id CBScalablePipeOptionTransportFunction()
{
  return (id)constantValCBScalablePipeOptionTransport;
}

id initValCBScalablePipeOptionTransport()
{
  id *v0;

  if (CoreBluetoothLibrary_sOnce_2360 != -1)
    dispatch_once(&CoreBluetoothLibrary_sOnce_2360, &__block_literal_global_2361);
  v0 = (id *)dlsym((void *)CoreBluetoothLibrary_sLib_2362, "CBScalablePipeOptionTransport");
  if (v0)
    objc_storeStrong((id *)&constantValCBScalablePipeOptionTransport, *v0);
  getCBScalablePipeOptionTransport[0] = (uint64_t (*)())CBScalablePipeOptionTransportFunction;
  return (id)constantValCBScalablePipeOptionTransport;
}

void sub_18D45DF70(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_18D45E400(_Unwind_Exception *a1)
{
  uint64_t v1;

  _Block_object_dispose((const void *)(v1 - 88), 8);
  _Unwind_Resume(a1);
}

void sub_18D45E900(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id obj)
{
  objc_sync_exit(obj);
  _Unwind_Resume(a1);
}

void sub_18D45E968(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id obj)
{
  objc_sync_exit(obj);
  _Unwind_Resume(a1);
}

void sub_18D45F11C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, ...)
{
  uint64_t v10;
  va_list va;

  va_start(va, a10);
  _Block_object_dispose(va, 8);
  _Block_object_dispose((const void *)(v10 - 96), 8);
  _Unwind_Resume(a1);
}

void sub_18D45F1F8(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_18D45F3A4(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_18D45F5F8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, id obj)
{
  objc_sync_exit(obj);
  _Unwind_Resume(a1);
}

void sub_18D45F6BC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id obj)
{
  objc_sync_exit(obj);
  _Unwind_Resume(a1);
}

void sub_18D45FDFC(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_18D460030(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

uint64_t __Block_byref_object_copy__2739(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void __Block_byref_object_dispose__2740(uint64_t a1)
{

}

uint64_t CUBonjourDeviceReconfirm(void *a1)
{
  const __CFDictionary *v1;
  const __CFDictionary *v2;
  uint64_t v3;

  objc_msgSend(a1, "deviceInfo");
  v1 = (const __CFDictionary *)objc_claimAutoreleasedReturnValue();
  v2 = v1;
  if (v1)
  {
    BonjourDevice_Reconfirm(v1);
    v3 = 0;
  }
  else
  {
    v3 = 4294960554;
  }

  return v3;
}

void CUMetricsLog(void *a1, void *a2)
{
  CUMetricsLogEx(gLogCategory_CUDashboardUtils, a1, a2);
}

void CUMetricsLogEx(int *a1, void *a2, void *a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  id v9;
  id v10;

  v10 = a2;
  v9 = a3;
  if (*a1 <= 50 && (*a1 != -1 || _LogCategory_Initialize((uint64_t)a1, 0x32u)))
    LogPrintF((uint64_t)a1, (uint64_t)"void CUMetricsLogEx(LogCategory * _Nonnull, NSString * _Nonnull __strong, NSDictionary<NSString *,NSObject *> * _Nonnull __strong)", 0x32u, (uint64_t)"MetricLog '%@' : %##@\n", v5, v6, v7, v8, (uint64_t)v10);
  ((void (*)(void *, void *))softLinkAnalyticsSendEvent[0])(v10, v9);

}

void initAnalyticsSendEvent(void *a1, void *a2)
{
  uint64_t v3;
  id v4;
  id v5;

  v3 = CoreAnalyticsLibrary_sOnce;
  v4 = a2;
  v5 = a1;
  if (v3 != -1)
    dispatch_once(&CoreAnalyticsLibrary_sOnce, &__block_literal_global_2826);
  softLinkAnalyticsSendEvent[0] = (uint64_t (*)())dlsym((void *)CoreAnalyticsLibrary_sLib, "AnalyticsSendEvent");
  ((void (*)(id, id))softLinkAnalyticsSendEvent[0])(v5, v4);

}

void sub_18D4614D0(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_18D461578(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_18D4618D0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_18D462870(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  uint64_t v9;
  va_list va;

  va_start(va, a9);
  (*(void (**)(uint64_t))(v9 + 16))(v9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t __Block_byref_object_copy__2986(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void __Block_byref_object_dispose__2987(uint64_t a1)
{

}

id RPCompanionLinkClientFunction()
{
  return (id)classRPCompanionLinkClient;
}

Class initRPCompanionLinkClient()
{
  Class result;

  if (RapportLibrary_sOnce != -1)
    dispatch_once(&RapportLibrary_sOnce, &__block_literal_global_3000);
  result = objc_getClass("RPCompanionLinkClient");
  classRPCompanionLinkClient = (uint64_t)result;
  getRPCompanionLinkClientClass[0] = (uint64_t (*)())RPCompanionLinkClientFunction;
  return result;
}

id RPCompanionLinkDeviceFunction()
{
  return (id)classRPCompanionLinkDevice;
}

Class initRPCompanionLinkDevice()
{
  Class result;

  if (RapportLibrary_sOnce != -1)
    dispatch_once(&RapportLibrary_sOnce, &__block_literal_global_3000);
  result = objc_getClass("RPCompanionLinkDevice");
  classRPCompanionLinkDevice = (uint64_t)result;
  getRPCompanionLinkDeviceClass[0] = (uint64_t (*)())RPCompanionLinkDeviceFunction;
  return result;
}

id RPOptionTimeoutSecondsFunction()
{
  return (id)constantValRPOptionTimeoutSeconds;
}

id initValRPOptionTimeoutSeconds()
{
  id *v0;

  if (RapportLibrary_sOnce != -1)
    dispatch_once(&RapportLibrary_sOnce, &__block_literal_global_3000);
  v0 = (id *)dlsym((void *)RapportLibrary_sLib, "RPOptionTimeoutSeconds");
  if (v0)
    objc_storeStrong((id *)&constantValRPOptionTimeoutSeconds, *v0);
  getRPOptionTimeoutSeconds[0] = (uint64_t (*)())RPOptionTimeoutSecondsFunction;
  return (id)constantValRPOptionTimeoutSeconds;
}

void sub_18D4642CC(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  (*(void (**)(uint64_t))(v1 + 16))(v1);
  _Block_object_dispose((const void *)(v2 - 144), 8);
  _Unwind_Resume(a1);
}

void sub_18D464D68(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  uint64_t v9;
  va_list va;

  va_start(va, a9);
  (*(void (**)(uint64_t))(v9 + 16))(v9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_18D464FD4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_list va;

  va_start(va, a11);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_18D4653DC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  uint64_t v11;

  (*(void (**)(void))(a11 + 16))();
  _Block_object_dispose((const void *)(v11 - 152), 8);
  _Unwind_Resume(a1);
}

void sub_18D465A28(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14)
{
  uint64_t v14;

  (*(void (**)(void))(a14 + 16))();
  _Block_object_dispose((const void *)(v14 - 152), 8);
  _Unwind_Resume(a1);
}

void sub_18D465CB0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  uint64_t v9;
  va_list va;

  va_start(va, a9);
  (*(void (**)(uint64_t))(v9 + 16))(v9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

id HAPSystemKeychainStoreFunction()
{
  return (id)classHAPSystemKeychainStore;
}

Class initHAPSystemKeychainStore()
{
  Class result;

  if (CoreHAPLibrary_sOnce != -1)
    dispatch_once(&CoreHAPLibrary_sOnce, &__block_literal_global_741);
  result = objc_getClass("HAPSystemKeychainStore");
  classHAPSystemKeychainStore = (uint64_t)result;
  getHAPSystemKeychainStoreClass[0] = (uint64_t (*)())HAPSystemKeychainStoreFunction;
  return result;
}

id HMClientConnectionFunction()
{
  return (id)classHMClientConnection;
}

Class initHMClientConnection()
{
  Class result;

  if (HomeKitLibrary_sOnce != -1)
    dispatch_once(&HomeKitLibrary_sOnce, &__block_literal_global_726);
  result = objc_getClass("HMClientConnection");
  classHMClientConnection = (uint64_t)result;
  getHMClientConnectionClass[0] = (uint64_t (*)())HMClientConnectionFunction;
  return result;
}

id HMHomeManagerConfigurationFunction()
{
  return (id)classHMHomeManagerConfiguration;
}

Class initHMHomeManagerConfiguration()
{
  Class result;

  if (HomeKitLibrary_sOnce != -1)
    dispatch_once(&HomeKitLibrary_sOnce, &__block_literal_global_726);
  result = objc_getClass("HMHomeManagerConfiguration");
  classHMHomeManagerConfiguration = (uint64_t)result;
  getHMHomeManagerConfigurationClass[0] = (uint64_t (*)())HMHomeManagerConfigurationFunction;
  return result;
}

id HMHomeManagerFunction()
{
  return (id)classHMHomeManager;
}

Class initHMHomeManager()
{
  Class result;

  if (HomeKitLibrary_sOnce != -1)
    dispatch_once(&HomeKitLibrary_sOnce, &__block_literal_global_726);
  result = objc_getClass("HMHomeManager");
  classHMHomeManager = (uint64_t)result;
  getHMHomeManagerClass[0] = (uint64_t (*)())HMHomeManagerFunction;
  return result;
}

uint64_t HMHomeManagerPreferencesChangedNotificationFunction()
{
  return constantValHMHomeManagerPreferencesChangedNotification;
}

uint64_t initValHMHomeManagerPreferencesChangedNotification()
{
  uint64_t *v0;
  uint64_t result;

  if (HomeKitLibrary_sOnce != -1)
    dispatch_once(&HomeKitLibrary_sOnce, &__block_literal_global_726);
  v0 = (uint64_t *)dlsym((void *)HomeKitLibrary_sLib, "HMHomeManagerPreferencesChangedNotification");
  if (v0)
  {
    result = *v0;
    constantValHMHomeManagerPreferencesChangedNotification = result;
  }
  else
  {
    result = constantValHMHomeManagerPreferencesChangedNotification;
  }
  getHMHomeManagerPreferencesChangedNotification[0] = HMHomeManagerPreferencesChangedNotificationFunction;
  return result;
}

id WiFiAwareDataSessionFunction()
{
  return (id)classWiFiAwareDataSession;
}

Class initWiFiAwareDataSession()
{
  Class result;

  if (WiFiPeerToPeerLibrary_sOnce != -1)
    dispatch_once(&WiFiPeerToPeerLibrary_sOnce, &__block_literal_global_4630);
  result = objc_getClass("WiFiAwareDataSession");
  classWiFiAwareDataSession = (uint64_t)result;
  getWiFiAwareDataSessionClass[0] = (uint64_t (*)())WiFiAwareDataSessionFunction;
  return result;
}

id WiFiAwareInternetSharingConfigurationFunction()
{
  return (id)classWiFiAwareInternetSharingConfiguration;
}

Class initWiFiAwareInternetSharingConfiguration()
{
  Class result;

  if (WiFiPeerToPeerLibrary_sOnce != -1)
    dispatch_once(&WiFiPeerToPeerLibrary_sOnce, &__block_literal_global_4630);
  result = objc_getClass("WiFiAwareInternetSharingConfiguration");
  classWiFiAwareInternetSharingConfiguration = (uint64_t)result;
  getWiFiAwareInternetSharingConfigurationClass[0] = (uint64_t (*)())WiFiAwareInternetSharingConfigurationFunction;
  return result;
}

void CUNANMockRemovePublisher(void *a1, void *a2)
{
  id v3;
  id v4;
  void *v5;
  void *v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  _BYTE v16[128];
  uint64_t v17;

  v17 = *MEMORY[0x1E0C80C00];
  v3 = a1;
  v4 = a2;
  os_unfair_lock_lock((os_unfair_lock_t)&gCUNANMockLock);
  objc_msgSend((id)gCUNANMockPublishers, "objectForKeyedSubscript:", v3);
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  if ((objc_msgSend(v5, "containsObject:", v4) & 1) != 0)
  {
    objc_msgSend(v5, "removeObject:", v4);
    if (!objc_msgSend(v5, "count"))
      objc_msgSend((id)gCUNANMockPublishers, "setObject:forKeyedSubscript:", 0, v3);
    objc_msgSend(v4, "mockEndpoint");
    v6 = (void *)objc_claimAutoreleasedReturnValue();
    if (v6)
    {
      v14 = 0u;
      v15 = 0u;
      v12 = 0u;
      v13 = 0u;
      objc_msgSend((id)gCUNANMockSubscribers, "objectForKeyedSubscript:", v3, 0);
      v7 = (void *)objc_claimAutoreleasedReturnValue();
      v8 = objc_msgSend(v7, "countByEnumeratingWithState:objects:count:", &v12, v16, 16);
      if (v8)
      {
        v9 = v8;
        v10 = *(_QWORD *)v13;
        do
        {
          v11 = 0;
          do
          {
            if (*(_QWORD *)v13 != v10)
              objc_enumerationMutation(v7);
            objc_msgSend(*(id *)(*((_QWORD *)&v12 + 1) + 8 * v11++), "reportMockEndpointLost:", v6);
          }
          while (v9 != v11);
          v9 = objc_msgSend(v7, "countByEnumeratingWithState:objects:count:", &v12, v16, 16);
        }
        while (v9);
      }

    }
    os_unfair_lock_unlock((os_unfair_lock_t)&gCUNANMockLock);

  }
  else
  {
    os_unfair_lock_unlock((os_unfair_lock_t)&gCUNANMockLock);
  }

}

void CUNANMockRemoveSubscriber(void *a1, void *a2)
{
  id v3;
  void *v4;
  id v5;

  v5 = a1;
  v3 = a2;
  os_unfair_lock_lock((os_unfair_lock_t)&gCUNANMockLock);
  objc_msgSend((id)gCUNANMockSubscribers, "objectForKeyedSubscript:", v5);
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v4, "removeObject:", v3);

  if (!objc_msgSend(v4, "count"))
    objc_msgSend((id)gCUNANMockSubscribers, "setObject:forKeyedSubscript:", 0, v5);
  os_unfair_lock_unlock((os_unfair_lock_t)&gCUNANMockLock);

}

id _WiFiAwareCreateEndpointIdentifier(void *a1)
{
  id v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;

  v1 = a1;
  if (objc_msgSend(v1, "length") == 6)
  {
    v2 = objc_msgSend(objc_retainAutorelease(v1), "bytes");
    NSPrintF((uint64_t)"%.6a-%u", v3, v4, v5, v6, v7, v8, v9, v2);
    v10 = (void *)objc_claimAutoreleasedReturnValue();
  }
  else
  {
    v10 = 0;
  }

  return v10;
}

void sub_18D478CBC(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_18D479F5C(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_18D47A4CC(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_18D47AD40(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  (*(void (**)(uint64_t))(v1 + 16))(v1);
  _Block_object_dispose((const void *)(v2 - 128), 8);
  _Unwind_Resume(a1);
}

uint64_t __Block_byref_object_copy__4850(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void __Block_byref_object_dispose__4851(uint64_t a1)
{

}

id WiFiAwarePublishConfigurationFunction()
{
  return (id)classWiFiAwarePublishConfiguration;
}

Class initWiFiAwarePublishConfiguration()
{
  Class result;

  if (WiFiPeerToPeerLibrary_sOnce_4880 != -1)
    dispatch_once(&WiFiPeerToPeerLibrary_sOnce_4880, &__block_literal_global_246);
  result = objc_getClass("WiFiAwarePublishConfiguration");
  classWiFiAwarePublishConfiguration = (uint64_t)result;
  getWiFiAwarePublishConfigurationClass[0] = (uint64_t (*)())WiFiAwarePublishConfigurationFunction;
  return result;
}

id WiFiAwareInternetSharingConfigurationFunction_4873()
{
  return (id)classWiFiAwareInternetSharingConfiguration_4889;
}

Class initWiFiAwareInternetSharingConfiguration_4874()
{
  Class result;

  if (WiFiPeerToPeerLibrary_sOnce_4880 != -1)
    dispatch_once(&WiFiPeerToPeerLibrary_sOnce_4880, &__block_literal_global_246);
  result = objc_getClass("WiFiAwareInternetSharingConfiguration");
  classWiFiAwareInternetSharingConfiguration_4889 = (uint64_t)result;
  getWiFiAwareInternetSharingConfigurationClass_4872 = (uint64_t (*)())WiFiAwareInternetSharingConfigurationFunction_4873;
  return result;
}

id WiFiAwarePublishServiceSpecificInfoFunction()
{
  return (id)classWiFiAwarePublishServiceSpecificInfo;
}

Class initWiFiAwarePublishServiceSpecificInfo()
{
  Class result;

  if (WiFiPeerToPeerLibrary_sOnce_4880 != -1)
    dispatch_once(&WiFiPeerToPeerLibrary_sOnce_4880, &__block_literal_global_246);
  result = objc_getClass("WiFiAwarePublishServiceSpecificInfo");
  classWiFiAwarePublishServiceSpecificInfo = (uint64_t)result;
  getWiFiAwarePublishServiceSpecificInfoClass[0] = (uint64_t (*)())WiFiAwarePublishServiceSpecificInfoFunction;
  return result;
}

id WiFiAwarePublishDatapathConfigurationFunction()
{
  return (id)classWiFiAwarePublishDatapathConfiguration;
}

Class initWiFiAwarePublishDatapathConfiguration()
{
  Class result;

  if (WiFiPeerToPeerLibrary_sOnce_4880 != -1)
    dispatch_once(&WiFiPeerToPeerLibrary_sOnce_4880, &__block_literal_global_246);
  result = objc_getClass("WiFiAwarePublishDatapathConfiguration");
  classWiFiAwarePublishDatapathConfiguration = (uint64_t)result;
  getWiFiAwarePublishDatapathConfigurationClass[0] = (uint64_t (*)())WiFiAwarePublishDatapathConfigurationFunction;
  return result;
}

id WiFiAwarePublishDatapathServiceSpecificInfoFunction()
{
  return (id)classWiFiAwarePublishDatapathServiceSpecificInfo;
}

Class initWiFiAwarePublishDatapathServiceSpecificInfo()
{
  Class result;

  if (WiFiPeerToPeerLibrary_sOnce_4880 != -1)
    dispatch_once(&WiFiPeerToPeerLibrary_sOnce_4880, &__block_literal_global_246);
  result = objc_getClass("WiFiAwarePublishDatapathServiceSpecificInfo");
  classWiFiAwarePublishDatapathServiceSpecificInfo = (uint64_t)result;
  getWiFiAwarePublishDatapathServiceSpecificInfoClass[0] = (uint64_t (*)())WiFiAwarePublishDatapathServiceSpecificInfoFunction;
  return result;
}

id WiFiAwarePublisherFunction()
{
  return (id)classWiFiAwarePublisher;
}

Class initWiFiAwarePublisher()
{
  Class result;

  if (WiFiPeerToPeerLibrary_sOnce_4880 != -1)
    dispatch_once(&WiFiPeerToPeerLibrary_sOnce_4880, &__block_literal_global_246);
  result = objc_getClass("WiFiAwarePublisher");
  classWiFiAwarePublisher = (uint64_t)result;
  getWiFiAwarePublisherClass[0] = (uint64_t (*)())WiFiAwarePublisherFunction;
  return result;
}

void sub_18D47B8D0(_Unwind_Exception *a1)
{
  uint64_t v1;

  _Block_object_dispose((const void *)(v1 - 80), 8);
  _Unwind_Resume(a1);
}

id WiFiMACAddressFunction()
{
  return (id)classWiFiMACAddress;
}

Class initWiFiMACAddress()
{
  Class result;

  if (WiFiPeerToPeerLibrary_sOnce_5147 != -1)
    dispatch_once(&WiFiPeerToPeerLibrary_sOnce_5147, &__block_literal_global_5148);
  result = objc_getClass("WiFiMACAddress");
  classWiFiMACAddress = (uint64_t)result;
  getWiFiMACAddressClass[0] = (uint64_t (*)())WiFiMACAddressFunction;
  return result;
}

void sub_18D47DDC4(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  (*(void (**)(uint64_t))(v1 + 16))(v1);
  _Block_object_dispose((const void *)(v2 - 128), 8);
  _Unwind_Resume(a1);
}

uint64_t __Block_byref_object_copy__5171(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void __Block_byref_object_dispose__5172(uint64_t a1)
{

}

id WiFiAwareSubscribeConfigurationFunction()
{
  return (id)classWiFiAwareSubscribeConfiguration;
}

Class initWiFiAwareSubscribeConfiguration()
{
  Class result;

  if (WiFiPeerToPeerLibrary_sOnce_5147 != -1)
    dispatch_once(&WiFiPeerToPeerLibrary_sOnce_5147, &__block_literal_global_5148);
  result = objc_getClass("WiFiAwareSubscribeConfiguration");
  classWiFiAwareSubscribeConfiguration = (uint64_t)result;
  getWiFiAwareSubscribeConfigurationClass[0] = (uint64_t (*)())WiFiAwareSubscribeConfigurationFunction;
  return result;
}

id WiFiAwareSubscriberFunction()
{
  return (id)classWiFiAwareSubscriber;
}

Class initWiFiAwareSubscriber()
{
  Class result;

  if (WiFiPeerToPeerLibrary_sOnce_5147 != -1)
    dispatch_once(&WiFiPeerToPeerLibrary_sOnce_5147, &__block_literal_global_5148);
  result = objc_getClass("WiFiAwareSubscriber");
  classWiFiAwareSubscriber = (uint64_t)result;
  getWiFiAwareSubscriberClass[0] = (uint64_t (*)())WiFiAwareSubscriberFunction;
  return result;
}

void sub_18D47ED1C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id location)
{
  id *v14;

  objc_destroyWeak(v14);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_18D47F380(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  (*(void (**)(uint64_t))(v2 + 16))(v2);
  (*(void (**)(uint64_t))(v1 + 16))(v1);
  _Unwind_Resume(a1);
}

void _networkInterfacesChanged(uint64_t a1, uint64_t a2, void *a3)
{
  id v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int *v9;
  _QWORD *v10;

  v4 = a3;
  if (*((_QWORD *)v4 + 3))
  {
    v10 = v4;
    dispatch_assert_queue_V2(*((dispatch_queue_t *)v4 + 6));
    v9 = (int *)v10[4];
    if (*v9 <= 10)
    {
      if (*v9 == -1)
      {
        if (!_LogCategory_Initialize((uint64_t)v9, 0xAu))
          goto LABEL_6;
        v9 = (int *)v10[4];
      }
      LogPrintF((uint64_t)v9, (uint64_t)"void _networkInterfacesChanged(SCDynamicStoreRef, CFArrayRef, void *)", 0xAu, (uint64_t)"Network interfaces changed: %##@\n", v5, v6, v7, v8, a2);
    }
LABEL_6:
    objc_msgSend(v10, "_networkInterfacesChanged:", 0);
    objc_msgSend(v10, "_primaryIPChanged:", 0);
    v4 = v10;
  }

}

void sub_18D4834CC(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_18D4837C0(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_18D483B74(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  uint64_t v9;
  va_list va;

  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Block_object_dispose((const void *)(v9 - 96), 8);
  _Unwind_Resume(a1);
}

void sub_18D48433C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  uint64_t v9;
  va_list va;

  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Block_object_dispose((const void *)(v9 - 96), 8);
  _Unwind_Resume(a1);
}

void sub_18D484C48(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_18D4854D0(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_18D485E88(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_18D486138(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  uint64_t v10;
  va_list va;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  va_list va1;

  va_start(va1, a9);
  va_start(va, a9);
  v10 = va_arg(va1, _QWORD);
  v12 = va_arg(va1, _QWORD);
  v13 = va_arg(va1, _QWORD);
  v14 = va_arg(va1, _QWORD);
  v15 = va_arg(va1, _QWORD);
  v16 = va_arg(va1, _QWORD);
  _Block_object_dispose(va, 8);
  _Block_object_dispose(va1, 8);
  _Unwind_Resume(a1);
}

void sub_18D4868A8(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_18D486928(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_18D4874E0(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_18D487560(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

uint64_t __Block_byref_object_copy__5672(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void __Block_byref_object_dispose__5673(uint64_t a1)
{

}

id HAPSystemKeychainStoreFunction_5706()
{
  return (id)classHAPSystemKeychainStore_5709;
}

Class initHAPSystemKeychainStore_5707()
{
  Class result;

  if (CoreHAPLibrary_sOnce_5708 != -1)
    dispatch_once(&CoreHAPLibrary_sOnce_5708, &__block_literal_global_335);
  result = objc_getClass("HAPSystemKeychainStore");
  classHAPSystemKeychainStore_5709 = (uint64_t)result;
  getHAPSystemKeychainStoreClass_5705 = (uint64_t (*)())HAPSystemKeychainStoreFunction_5706;
  return result;
}

id RPClientFunction()
{
  return (id)classRPClient;
}

Class initRPClient()
{
  Class result;

  if (RapportLibrary_sOnce_5720 != -1)
    dispatch_once(&RapportLibrary_sOnce_5720, &__block_literal_global_5721);
  result = objc_getClass("RPClient");
  classRPClient = (uint64_t)result;
  getRPClientClass[0] = (uint64_t (*)())RPClientFunction;
  return result;
}

void sub_18D48BD6C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,char a33)
{
  _Block_object_dispose(&a33, 8);
  _Unwind_Resume(a1);
}

uint64_t __Block_byref_object_copy__5994(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void __Block_byref_object_dispose__5995(uint64_t a1)
{

}

uint64_t _promptForPIN(uint64_t a1, uint64_t a2, void *a3)
{
  id v5;
  const __CFString *v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  int *v13;
  void *v14;
  void *v15;
  int v17;

  v5 = a3;
  dispatch_assert_queue_V2(*((dispatch_queue_t *)v5 + 14));
  v6 = (const __CFString *)PairingSessionCopyProperty(*((_QWORD *)v5 + 1), CFSTR("setupCodeType"), 0);
  v17 = 0;
  v7 = CFGetInt64(v6, &v17);
  if (v7)
    v12 = v7;
  else
    v12 = 2;
  *((_DWORD *)v5 + 11) = v12;
  if (v6)
    CFRelease(v6);
  v13 = (int *)*((_QWORD *)v5 + 3);
  if (*v13 <= 30)
  {
    if (*v13 == -1)
    {
      if (!_LogCategory_Initialize((uint64_t)v13, 0x1Eu))
        goto LABEL_11;
      v13 = (int *)*((_QWORD *)v5 + 3);
    }
    LogPrintF((uint64_t)v13, (uint64_t)"OSStatus _promptForPIN(PairingFlags, int32_t, void * _Nonnull)", 0x1Eu, (uint64_t)"Prompt for PIN: %#{flags}, Type %s, %d throttle seconds\n", v8, v9, v10, v11, a1);
  }
LABEL_11:
  v14 = _Block_copy(*((const void **)v5 + 27));
  v15 = v14;
  if (v14)
    (*((void (**)(void *, uint64_t, uint64_t))v14 + 2))(v14, a1, a2);

  return 0;
}

uint64_t _showPIN(uint64_t a1, char *a2, unint64_t a3, void *a4)
{
  id v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unsigned int v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  int *v16;
  BOOL v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  int *v23;
  const char *v24;
  uint64_t v25;
  uint64_t v26;
  void *v27;
  const __CFString *v28;
  uint64_t v29;
  uint64_t v30;
  const __CFString *v31;
  uint64_t v32;
  int *v34;

  v7 = a4;
  dispatch_assert_queue_V2(*((dispatch_queue_t *)v7 + 14));
  v12 = *((_DWORD *)v7 + 10);
  if (v12)
    v13 = v12;
  else
    v13 = 2;
  switch((int)v13)
  {
    case 1:
      if (a3 < 5)
        goto LABEL_46;
      v14 = 4;
      v15 = 4;
      goto LABEL_22;
    case 2:
      if (a3 < 7)
        goto LABEL_46;
      v14 = 6;
      v15 = 6;
      goto LABEL_22;
    case 3:
      if (a3 < 9)
        goto LABEL_46;
      v14 = 8;
      v15 = 8;
      goto LABEL_22;
    case 6:
      if (a3 >= 8)
      {
        v14 = 7;
        v15 = 7;
LABEL_22:
        RandomString((uint64_t)"0123456789", 0xAuLL, v14, v15, a2);
        *((_DWORD *)v7 + 11) = v13;
        v23 = (int *)*((_QWORD *)v7 + 3);
        if (*v23 <= 30)
        {
          if (*v23 == -1)
          {
            if (!_LogCategory_Initialize((uint64_t)v23, 0x1Eu))
              goto LABEL_31;
            v23 = (int *)*((_QWORD *)v7 + 3);
          }
          if (IsAppleInternalBuild_sOnce != -1)
          {
            v34 = v23;
            dispatch_once(&IsAppleInternalBuild_sOnce, &__block_literal_global_85);
            v23 = v34;
          }
          if (IsAppleInternalBuild_sIsInternal)
            v24 = a2;
          else
            v24 = "*";
          LogPrintF((uint64_t)v23, (uint64_t)"OSStatus _showPIN(PairingFlags, char * _Nonnull, size_t, void * _Nonnull)", 0x1Eu, (uint64_t)"Show PIN '%s'\n", v19, v20, v21, v22, (uint64_t)v24);
        }
LABEL_31:
        v25 = *((_QWORD *)v7 + 28);
        if (v25)
        {
          objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", a2);
          v26 = objc_claimAutoreleasedReturnValue();
          v27 = (void *)v26;
          if (v26)
            v28 = (const __CFString *)v26;
          else
            v28 = CFSTR("?");
          (*(void (**)(uint64_t, uint64_t, const __CFString *))(v25 + 16))(v25, a1, v28);
        }
        else
        {
          v29 = *((_QWORD *)v7 + 29);
          if (!v29)
          {
LABEL_42:
            v32 = 0;
            goto LABEL_43;
          }
          objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", a2);
          v30 = objc_claimAutoreleasedReturnValue();
          v27 = (void *)v30;
          if (v30)
            v31 = (const __CFString *)v30;
          else
            v31 = CFSTR("?");
          (*(void (**)(uint64_t, const __CFString *))(v29 + 16))(v29, v31);
        }

        goto LABEL_42;
      }
LABEL_46:
      v32 = 4294960553;
LABEL_43:

      return v32;
    case 7:
      v17 = a3 >= 6;
      v18 = 6;
      goto LABEL_18;
    case 8:
      v17 = a3 >= 0x10;
      v18 = 16;
LABEL_18:
      if (v17)
        v14 = v18;
      else
        v14 = a3;
      v15 = v14;
      goto LABEL_22;
    default:
      v16 = (int *)*((_QWORD *)v7 + 3);
      if (*v16 > 90)
        goto LABEL_45;
      if (*v16 != -1)
        goto LABEL_13;
      if (_LogCategory_Initialize((uint64_t)v16, 0x5Au))
      {
        v16 = (int *)*((_QWORD *)v7 + 3);
LABEL_13:
        LogPrintF((uint64_t)v16, (uint64_t)"OSStatus _showPIN(PairingFlags, char * _Nonnull, size_t, void * _Nonnull)", 0x5Au, (uint64_t)"### Unsupported PIN type %u\n", v8, v9, v10, v11, v13);
      }
LABEL_45:
      v32 = 4294960564;
      goto LABEL_43;
  }
}

void _hidePIN(void *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  int *v5;
  dispatch_queue_t v6;
  uint64_t v7;
  dispatch_queue_t *v8;

  v8 = a1;
  dispatch_assert_queue_V2(v8[14]);
  v5 = (int *)v8[3];
  if (*v5 <= 30)
  {
    if (*v5 != -1)
    {
LABEL_3:
      LogPrintF((uint64_t)v5, (uint64_t)"void _hidePIN(void * _Nonnull)", 0x1Eu, (uint64_t)"Hide PIN\n", v1, v2, v3, v4, v7);
      goto LABEL_5;
    }
    if (_LogCategory_Initialize((uint64_t)v5, 0x1Eu))
    {
      v5 = (int *)v8[3];
      goto LABEL_3;
    }
  }
LABEL_5:
  v6 = v8[30];
  if (v6)
    ((void (*)(void))v6[2].isa)();

}

void sub_18D493668(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, id obj)
{
  objc_sync_exit(obj);
  _Unwind_Resume(a1);
}

void sub_18D493760(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id obj)
{
  objc_sync_exit(obj);
  _Unwind_Resume(a1);
}

void sub_18D495744(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_18D4963A4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, id obj)
{
  objc_sync_exit(obj);
  _Unwind_Resume(a1);
}

id PRTrustedContactFunction()
{
  return (id)classPRTrustedContact;
}

Class initPRTrustedContact()
{
  Class result;

  if (ProximityLibrary_sOnce != -1)
    dispatch_once(&ProximityLibrary_sOnce, &__block_literal_global_7132);
  result = objc_getClass("PRTrustedContact");
  classPRTrustedContact = (uint64_t)result;
  getPRTrustedContactClass[0] = (uint64_t (*)())PRTrustedContactFunction;
  return result;
}

id PRContactAllowlistFunction()
{
  return (id)classPRContactAllowlist;
}

Class initPRContactAllowlist()
{
  Class result;

  if (ProximityLibrary_sOnce != -1)
    dispatch_once(&ProximityLibrary_sOnce, &__block_literal_global_7132);
  result = objc_getClass("PRContactAllowlist");
  classPRContactAllowlist = (uint64_t)result;
  getPRContactAllowlistClass[0] = (uint64_t (*)())PRContactAllowlistFunction;
  return result;
}

id PRSharingSessionFunction()
{
  return (id)classPRSharingSession;
}

Class initPRSharingSession()
{
  Class result;

  if (ProximityLibrary_sOnce != -1)
    dispatch_once(&ProximityLibrary_sOnce, &__block_literal_global_7132);
  result = objc_getClass("PRSharingSession");
  classPRSharingSession = (uint64_t)result;
  getPRSharingSessionClass[0] = (uint64_t (*)())PRSharingSessionFunction;
  return result;
}

void sub_18D498E14(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_18D4991F8(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_18D49946C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id obj)
{
  objc_sync_exit(obj);
  _Unwind_Resume(a1);
}

void sub_18D499568(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id obj)
{
  objc_sync_exit(obj);
  _Unwind_Resume(a1);
}

int8x8_t curve25519_donna(uint64_t a1, __int128 *a2, _QWORD *a3)
{
  uint64_t v3;
  __int128 v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t *v11;
  uint64_t *v12;
  uint64_t *v13;
  uint64_t *v14;
  uint64_t *v15;
  uint64_t *v16;
  uint64_t *v17;
  uint64_t *v18;
  int8x16_t v19;
  int v20;
  int v21;
  uint64_t *v22;
  uint64_t *v23;
  uint64_t *v24;
  uint64_t *v25;
  uint64_t v26;
  uint64_t *v27;
  uint64_t *v28;
  uint64_t *v29;
  uint64_t *v30;
  uint64_t *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t i;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  unint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  unint64_t v68;
  unint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  unint64_t v73;
  uint64_t v74;
  uint64_t v75;
  BOOL v76;
  uint64_t v77;
  uint64_t v78;
  unsigned __int128 v79;
  uint64_t v80;
  __int128 v81;
  unsigned __int128 v82;
  uint64_t v83;
  __int128 v84;
  uint64_t v85;
  unsigned __int128 v86;
  uint64_t v87;
  uint64_t v88;
  __int128 v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  unint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  __int128 v99;
  uint64_t v100;
  unsigned __int128 v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  signed __int128 v108;
  unsigned __int128 v109;
  uint64_t v110;
  uint64_t v111;
  unsigned __int128 v112;
  __int128 v113;
  uint64_t v114;
  uint64_t v115;
  __int128 v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  unsigned __int128 v122;
  uint64_t v123;
  __int128 v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  unint64_t v132;
  uint64_t v133;
  uint64_t v134;
  __int128 v135;
  uint64_t v136;
  unint64_t v137;
  unint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  signed __int128 v148;
  uint64_t v149;
  signed __int128 v150;
  unsigned __int128 v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  unint64_t v158;
  uint64_t v159;
  unint64_t v160;
  unint64_t v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  unint64_t v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;
  uint64_t v173;
  uint64_t v174;
  uint64_t v175;
  uint64_t v176;
  uint64_t v177;
  uint64_t v178;
  uint64_t v179;
  unint64_t v180;
  uint64_t v181;
  unint64_t v182;
  uint64_t v183;
  uint64_t v184;
  uint64_t v185;
  uint64_t v186;
  signed __int128 v187;
  uint64_t v188;
  uint64_t v189;
  uint64_t v190;
  uint64_t v191;
  uint64_t v192;
  unint64_t v193;
  uint64_t v194;
  __int128 v195;
  uint64_t v196;
  uint64_t v197;
  uint64_t v198;
  __int128 v199;
  uint64_t v200;
  unsigned __int128 v201;
  uint64_t v202;
  unsigned __int128 v203;
  uint64_t v204;
  uint64_t v205;
  __int128 v206;
  int8x16_t v207;
  __int128 v208;
  unint64_t v209;
  uint64_t v210;
  unint64_t v211;
  uint64_t v212;
  uint64_t v213;
  uint64_t v214;
  unsigned __int128 v215;
  uint64_t v216;
  uint64_t v217;
  uint64_t v218;
  __int128 v219;
  uint64_t v220;
  unint64_t v221;
  uint64_t v222;
  uint64_t v223;
  uint64_t v224;
  __int128 v225;
  unsigned __int128 v226;
  uint64_t v227;
  unsigned __int128 v228;
  uint64_t v229;
  __int128 v230;
  uint64_t v231;
  __int128 v232;
  uint64_t v233;
  uint64_t v234;
  unint64_t v235;
  uint64_t v236;
  uint64_t v237;
  uint64_t v238;
  uint64_t v239;
  uint64_t v240;
  uint64_t v241;
  uint64_t v242;
  uint64_t v243;
  uint64_t v244;
  __int128 v245;
  uint64_t v246;
  unint64_t v247;
  uint64_t v248;
  uint64_t v249;
  uint64_t v250;
  uint64_t v251;
  uint64_t v252;
  __int128 v253;
  uint64_t v254;
  uint64_t v255;
  uint64_t v256;
  uint64_t v257;
  uint64_t v258;
  uint64_t v259;
  uint64_t v260;
  __int128 v261;
  uint64_t v262;
  uint64_t v263;
  __int128 v264;
  uint64_t v265;
  uint64_t v266;
  uint64_t v267;
  unint64_t v268;
  uint64_t v269;
  uint64_t v270;
  uint64_t v271;
  uint64_t v272;
  uint64_t v273;
  uint64_t v274;
  uint64_t v275;
  unint64_t v276;
  uint64_t v277;
  unint64_t v278;
  unint64_t v279;
  unsigned __int128 v280;
  unsigned __int128 v281;
  uint64_t v282;
  unsigned __int128 v283;
  unsigned __int128 v284;
  unsigned __int128 v285;
  uint64_t v286;
  unsigned __int128 v287;
  int16x8_t v288;
  unint64_t v289;
  uint64_t v290;
  unint64_t v291;
  uint64_t v292;
  uint64_t v293;
  uint64_t v294;
  uint64_t v295;
  uint64_t v296;
  uint64_t v297;
  uint64_t v298;
  uint64_t v299;
  uint64_t v300;
  uint64_t v301;
  uint64_t v302;
  __int128 v303;
  uint64_t v304;
  uint64_t v305;
  uint64_t v306;
  __int128 v307;
  uint64_t v308;
  uint64_t v309;
  uint64_t v310;
  uint64_t v311;
  __int128 v312;
  uint64_t v313;
  uint64_t v314;
  __int128 v315;
  unint64_t v316;
  uint64_t v317;
  uint64_t v318;
  unint64_t v319;
  unint64_t v320;
  unsigned __int128 v321;
  unint64_t v322;
  unint64_t v323;
  unsigned __int128 v324;
  unsigned __int128 v325;
  int8x16_t v326;
  unint64_t v327;
  unint64_t v328;
  uint64_t v329;
  uint64_t v330;
  uint64_t v331;
  uint64_t j;
  uint64_t v333;
  uint64_t v334;
  uint64_t v335;
  unint64_t v336;
  unint64_t v337;
  uint64_t v338;
  unint64_t v339;
  uint64_t v340;
  unint64_t v341;
  uint64_t v342;
  uint64_t v343;
  uint64_t v344;
  uint64_t v345;
  uint64_t v346;
  uint64_t v347;
  uint64_t v348;
  uint64_t v349;
  __int128 v350;
  uint64_t v351;
  unint64_t v352;
  uint64_t v353;
  uint64_t v354;
  uint64_t v355;
  __int128 v356;
  unsigned __int128 v357;
  uint64_t v358;
  uint64_t v359;
  unsigned __int128 v360;
  uint64_t v361;
  unsigned __int128 v362;
  uint64_t v363;
  __int128 v364;
  __int128 v365;
  uint64_t v366;
  uint64_t v367;
  uint64_t v368;
  unint64_t v369;
  uint64_t v370;
  uint64_t v371;
  uint64_t v372;
  uint64_t v373;
  uint64_t v374;
  uint64_t v375;
  uint64_t v376;
  uint64_t v377;
  uint64_t v378;
  uint64_t v379;
  uint64_t v380;
  unint64_t v381;
  uint64_t v382;
  uint64_t v383;
  uint64_t v384;
  uint64_t v385;
  uint64_t v386;
  unsigned __int128 v387;
  unint64_t v388;
  unint64_t v389;
  uint64_t v390;
  uint64_t v391;
  uint64_t v392;
  uint64_t v393;
  uint64_t v394;
  uint64_t v395;
  uint64_t v396;
  unsigned __int128 v397;
  uint64_t v398;
  uint64_t v399;
  uint64_t v400;
  uint64_t v401;
  uint64_t v402;
  unsigned __int128 v403;
  uint64_t v404;
  uint64_t v405;
  uint64_t v406;
  __int128 v407;
  uint64_t v408;
  uint64_t v409;
  __int128 v410;
  uint64_t v411;
  uint64_t v412;
  uint64_t v413;
  unsigned __int128 v414;
  uint64_t v415;
  uint64_t v416;
  uint64_t v417;
  __int128 v418;
  uint64_t v419;
  __int128 v420;
  unint64_t v421;
  unint64_t v422;
  unsigned __int128 v423;
  unsigned __int128 v424;
  uint64_t v425;
  unsigned __int128 v426;
  __int128 v427;
  uint64_t v428;
  unsigned __int128 v429;
  __int128 v430;
  uint64_t v431;
  uint64_t v432;
  unsigned __int128 v433;
  __int128 v434;
  uint64_t v435;
  uint64_t v436;
  __int128 v437;
  uint64_t v438;
  unint64_t v439;
  uint64_t v440;
  uint64_t v441;
  uint64_t v442;
  unsigned __int128 v443;
  uint64_t v444;
  unsigned __int128 v445;
  uint64_t v446;
  uint64_t v447;
  unsigned __int128 v448;
  __int128 v449;
  uint64_t v450;
  uint64_t v451;
  unsigned __int128 v452;
  uint64_t v453;
  uint64_t v454;
  __int128 v455;
  unsigned __int128 v456;
  uint64_t v457;
  uint64_t v458;
  unint64_t v459;
  uint64_t v460;
  unint64_t v461;
  unint64_t v462;
  uint64_t v463;
  uint64_t v464;
  uint64_t v465;
  uint64_t v466;
  uint64_t v467;
  uint64_t v468;
  uint64_t v469;
  uint64_t v470;
  uint64_t v471;
  uint64_t v472;
  __int128 v473;
  uint64_t v474;
  uint64_t v475;
  __int128 v476;
  uint64_t v477;
  uint64_t v478;
  uint64_t v479;
  __int128 v480;
  uint64_t v481;
  uint64_t v482;
  __int128 v483;
  uint64_t v484;
  unint64_t v485;
  uint64_t v486;
  unint64_t v487;
  uint64_t v488;
  uint64_t v489;
  uint64_t v490;
  uint64_t v491;
  uint64_t v492;
  uint64_t v493;
  uint64_t v494;
  uint64_t v495;
  unint64_t v496;
  unint64_t v497;
  uint64_t v498;
  unint64_t v499;
  unint64_t v500;
  uint64_t v501;
  unint64_t v502;
  unint64_t v503;
  uint64_t v504;
  uint64_t v505;
  uint64_t v506;
  uint64_t v507;
  uint64_t v508;
  uint64_t v509;
  signed __int128 v510;
  uint64_t v511;
  uint64_t v512;
  unsigned __int128 v513;
  uint64_t v514;
  uint64_t v515;
  signed __int128 v516;
  signed __int128 v517;
  uint64_t v518;
  uint64_t v519;
  uint64_t v520;
  uint64_t v521;
  uint64_t v522;
  unint64_t v523;
  uint64_t v524;
  unint64_t v525;
  unsigned __int128 v526;
  unsigned __int128 v527;
  unsigned __int128 v528;
  unsigned __int128 v529;
  signed __int128 v530;
  uint64_t v531;
  unint64_t v532;
  uint64_t v533;
  unint64_t v534;
  uint64_t v535;
  uint64_t v536;
  uint64_t v537;
  uint64_t v538;
  uint64_t v539;
  uint64_t v540;
  uint64_t v541;
  uint64_t v542;
  signed __int128 v543;
  uint64_t v544;
  uint64_t v545;
  unint64_t v546;
  uint64_t v547;
  uint64_t v548;
  uint64_t v549;
  unsigned __int128 v550;
  uint64_t v551;
  uint64_t v552;
  unint64_t v553;
  uint64_t v554;
  unint64_t v555;
  uint64_t v556;
  uint64_t v557;
  unint64_t v558;
  uint64_t v559;
  uint64_t v560;
  uint64_t v561;
  uint64_t v562;
  uint64_t v563;
  uint64_t v564;
  __int128 v565;
  uint64_t v566;
  uint64_t v567;
  uint64_t v568;
  uint64_t v569;
  __int128 v570;
  uint64_t v571;
  uint64_t v572;
  __int128 v573;
  uint64_t v574;
  uint64_t v575;
  __int128 v576;
  unint64_t v577;
  unint64_t v578;
  uint64_t v579;
  uint64_t v580;
  uint64_t v581;
  uint64_t v582;
  uint64_t v583;
  uint64_t v584;
  uint64_t v585;
  uint64_t v586;
  __int128 v587;
  uint64_t v588;
  uint64_t v589;
  __int128 v590;
  unsigned __int128 v591;
  uint64_t v592;
  uint64_t v593;
  uint64_t v594;
  uint64_t v595;
  uint64_t v596;
  unsigned __int128 v597;
  uint64_t v598;
  __int128 v599;
  uint64_t v600;
  unsigned __int128 v601;
  uint64_t v602;
  __int128 v603;
  unint64_t v604;
  uint64_t v605;
  unint64_t v606;
  uint64_t v607;
  uint64_t v608;
  uint64_t v609;
  uint64_t v610;
  uint64_t v611;
  uint64_t v612;
  uint64_t v613;
  uint64_t v614;
  signed __int128 v615;
  unint64_t v616;
  uint64_t v617;
  uint64_t v618;
  uint64_t v619;
  unsigned __int128 v620;
  uint64_t v621;
  uint64_t v622;
  unint64_t v623;
  uint64_t v624;
  unint64_t v625;
  uint64_t v626;
  uint64_t v627;
  unint64_t v628;
  uint64_t v629;
  uint64_t v630;
  uint64_t v631;
  uint64_t v632;
  uint64_t v633;
  uint64_t v634;
  __int128 v635;
  uint64_t v636;
  uint64_t v637;
  uint64_t v638;
  uint64_t v639;
  __int128 v640;
  uint64_t v641;
  uint64_t v642;
  __int128 v643;
  unsigned __int128 v644;
  uint64_t v645;
  __int128 v646;
  unint64_t v647;
  unint64_t v648;
  uint64_t v649;
  uint64_t v650;
  uint64_t v651;
  uint64_t v652;
  uint64_t v653;
  uint64_t v654;
  uint64_t v655;
  uint64_t v656;
  unsigned __int128 v657;
  uint64_t v658;
  uint64_t v659;
  __int128 v660;
  uint64_t v661;
  uint64_t v662;
  uint64_t v663;
  uint64_t v664;
  uint64_t v665;
  uint64_t v666;
  unint64_t v667;
  uint64_t v668;
  unint64_t v669;
  uint64_t v670;
  __int128 v671;
  uint64_t v672;
  unsigned __int128 v673;
  uint64_t v674;
  uint64_t v675;
  uint64_t v676;
  __int128 v677;
  uint64_t v678;
  unsigned __int128 v679;
  uint64_t v680;
  uint64_t v681;
  __int128 v682;
  unint64_t v683;
  uint64_t v684;
  unint64_t v685;
  uint64_t v686;
  uint64_t v687;
  uint64_t v688;
  uint64_t v689;
  uint64_t v690;
  uint64_t v691;
  uint64_t v692;
  uint64_t v693;
  signed __int128 v694;
  unint64_t v695;
  uint64_t v696;
  unint64_t v697;
  uint64_t v698;
  unsigned __int128 v699;
  unsigned __int128 v700;
  unint64_t v701;
  uint64_t v702;
  unint64_t v703;
  uint64_t v704;
  uint64_t v705;
  uint64_t v706;
  uint64_t v707;
  uint64_t v708;
  uint64_t v709;
  uint64_t v710;
  __int128 v711;
  uint64_t v712;
  uint64_t v713;
  uint64_t v714;
  uint64_t v715;
  __int128 v716;
  uint64_t v717;
  uint64_t v718;
  uint64_t v719;
  __int128 v720;
  unsigned __int128 v721;
  uint64_t v722;
  uint64_t v723;
  __int128 v724;
  unint64_t v725;
  unint64_t v726;
  uint64_t v727;
  uint64_t v728;
  uint64_t v729;
  uint64_t v730;
  uint64_t v731;
  uint64_t v732;
  __int128 v733;
  uint64_t v734;
  uint64_t v735;
  uint64_t v736;
  unsigned __int128 v737;
  uint64_t v738;
  __int128 v739;
  uint64_t v740;
  uint64_t v741;
  uint64_t v742;
  unsigned __int128 v743;
  uint64_t v744;
  uint64_t v745;
  __int128 v746;
  uint64_t v747;
  uint64_t v748;
  __int128 v749;
  unint64_t v750;
  uint64_t v751;
  unint64_t v752;
  uint64_t v753;
  uint64_t v754;
  uint64_t v755;
  uint64_t v756;
  uint64_t v757;
  uint64_t v758;
  uint64_t v759;
  signed __int128 v760;
  uint64_t v761;
  uint64_t v762;
  unint64_t v763;
  uint64_t v764;
  uint64_t v765;
  uint64_t v766;
  uint64_t v767;
  unsigned __int128 v768;
  unsigned __int128 v769;
  unint64_t v770;
  uint64_t v771;
  unint64_t v772;
  uint64_t v773;
  unint64_t v774;
  uint64_t v775;
  uint64_t v776;
  uint64_t v777;
  uint64_t v778;
  uint64_t v779;
  __int128 v780;
  uint64_t v781;
  uint64_t v782;
  uint64_t v783;
  uint64_t v784;
  uint64_t v785;
  __int128 v786;
  uint64_t v787;
  uint64_t v788;
  __int128 v789;
  unsigned __int128 v790;
  uint64_t v791;
  __int128 v792;
  unint64_t v793;
  unint64_t v794;
  uint64_t v795;
  uint64_t v796;
  signed __int128 v797;
  uint64_t v798;
  uint64_t v799;
  uint64_t v800;
  uint64_t v801;
  uint64_t v802;
  __int128 v803;
  uint64_t v804;
  uint64_t v805;
  uint64_t v806;
  uint64_t v807;
  __int128 v808;
  uint64_t v809;
  uint64_t v810;
  uint64_t v811;
  uint64_t v812;
  uint64_t v813;
  uint64_t v814;
  __int128 v815;
  uint64_t v816;
  unsigned __int128 v817;
  uint64_t v818;
  __int128 v819;
  unint64_t v820;
  uint64_t v821;
  unint64_t v822;
  uint64_t v823;
  uint64_t v824;
  uint64_t v825;
  uint64_t v826;
  uint64_t v827;
  uint64_t v828;
  uint64_t v829;
  uint64_t v830;
  signed __int128 v831;
  unint64_t v832;
  uint64_t v833;
  uint64_t v834;
  uint64_t v835;
  unsigned __int128 v836;
  uint64_t v837;
  uint64_t v838;
  unint64_t v839;
  uint64_t v840;
  unint64_t v841;
  uint64_t v842;
  uint64_t v843;
  unint64_t v844;
  uint64_t v845;
  uint64_t v846;
  uint64_t v847;
  uint64_t v848;
  uint64_t v849;
  uint64_t v850;
  __int128 v851;
  uint64_t v852;
  uint64_t v853;
  uint64_t v854;
  uint64_t v855;
  __int128 v856;
  uint64_t v857;
  uint64_t v858;
  __int128 v859;
  unsigned __int128 v860;
  uint64_t v861;
  __int128 v862;
  unint64_t v863;
  unint64_t v864;
  uint64_t v865;
  uint64_t v866;
  uint64_t v867;
  uint64_t v868;
  uint64_t v869;
  uint64_t v870;
  uint64_t v871;
  uint64_t v872;
  unsigned __int128 v873;
  uint64_t v874;
  uint64_t v875;
  __int128 v876;
  uint64_t v877;
  uint64_t v878;
  uint64_t v879;
  uint64_t v880;
  uint64_t v881;
  uint64_t v882;
  unint64_t v883;
  uint64_t v884;
  unint64_t v885;
  uint64_t v886;
  __int128 v887;
  uint64_t v888;
  unsigned __int128 v889;
  uint64_t v890;
  uint64_t v891;
  uint64_t v892;
  __int128 v893;
  uint64_t v894;
  unsigned __int128 v895;
  uint64_t v896;
  uint64_t v897;
  __int128 v898;
  unint64_t v899;
  uint64_t v900;
  unint64_t v901;
  uint64_t v902;
  uint64_t v903;
  uint64_t v904;
  uint64_t v905;
  uint64_t v906;
  uint64_t v907;
  uint64_t v908;
  uint64_t v909;
  signed __int128 v910;
  unint64_t v911;
  uint64_t v912;
  unint64_t v913;
  uint64_t v914;
  unsigned __int128 v915;
  unsigned __int128 v916;
  unint64_t v917;
  uint64_t v918;
  unint64_t v919;
  uint64_t v920;
  uint64_t v921;
  uint64_t v922;
  uint64_t v923;
  uint64_t v924;
  uint64_t v925;
  uint64_t v926;
  __int128 v927;
  uint64_t v928;
  uint64_t v929;
  uint64_t v930;
  uint64_t v931;
  __int128 v932;
  uint64_t v933;
  uint64_t v934;
  uint64_t v935;
  __int128 v936;
  unsigned __int128 v937;
  uint64_t v938;
  uint64_t v939;
  __int128 v940;
  unint64_t v941;
  unint64_t v942;
  uint64_t v943;
  uint64_t v944;
  uint64_t v945;
  uint64_t v946;
  uint64_t v947;
  uint64_t v948;
  __int128 v949;
  uint64_t v950;
  uint64_t v951;
  uint64_t v952;
  unsigned __int128 v953;
  uint64_t v954;
  __int128 v955;
  uint64_t v956;
  uint64_t v957;
  unsigned __int128 v958;
  uint64_t v959;
  uint64_t v960;
  __int128 v961;
  uint64_t v962;
  uint64_t v963;
  uint64_t v964;
  __int128 v965;
  unint64_t v966;
  uint64_t v967;
  unint64_t v968;
  uint64_t v969;
  uint64_t v970;
  uint64_t v971;
  uint64_t v972;
  uint64_t v973;
  uint64_t v974;
  uint64_t v975;
  signed __int128 v976;
  uint64_t v977;
  uint64_t v978;
  unint64_t v979;
  uint64_t v980;
  uint64_t v981;
  uint64_t v982;
  uint64_t v983;
  unsigned __int128 v984;
  unsigned __int128 v985;
  unint64_t v986;
  uint64_t v987;
  unint64_t v988;
  uint64_t v989;
  unint64_t v990;
  uint64_t v991;
  uint64_t v992;
  uint64_t v993;
  uint64_t v994;
  uint64_t v995;
  __int128 v996;
  uint64_t v997;
  uint64_t v998;
  uint64_t v999;
  uint64_t v1000;
  uint64_t v1001;
  __int128 v1002;
  uint64_t v1003;
  uint64_t v1004;
  __int128 v1005;
  unsigned __int128 v1006;
  uint64_t v1007;
  __int128 v1008;
  unint64_t v1009;
  unint64_t v1010;
  uint64_t v1011;
  uint64_t v1012;
  uint64_t v1013;
  uint64_t v1014;
  uint64_t v1015;
  uint64_t v1016;
  uint64_t v1017;
  uint64_t v1018;
  uint64_t v1019;
  uint64_t v1020;
  __int128 v1021;
  uint64_t v1022;
  unsigned __int128 v1023;
  uint64_t v1024;
  __int128 v1025;
  uint64_t v1026;
  uint64_t v1027;
  unsigned __int128 v1028;
  uint64_t v1029;
  uint64_t v1030;
  unsigned __int128 v1031;
  uint64_t v1032;
  uint64_t v1033;
  __int128 v1034;
  uint64_t v1035;
  __int128 v1036;
  unint64_t v1037;
  uint64_t v1038;
  unint64_t v1039;
  uint64_t v1040;
  uint64_t v1041;
  uint64_t v1042;
  uint64_t v1043;
  signed __int128 v1044;
  uint64_t v1045;
  uint64_t v1046;
  unint64_t v1047;
  uint64_t v1048;
  uint64_t v1049;
  uint64_t v1050;
  unsigned __int128 v1051;
  unsigned __int128 v1052;
  unint64_t v1053;
  uint64_t v1054;
  unint64_t v1055;
  uint64_t v1056;
  unint64_t v1057;
  uint64_t v1058;
  uint64_t v1059;
  uint64_t v1060;
  uint64_t v1061;
  uint64_t v1062;
  __int128 v1063;
  uint64_t v1064;
  uint64_t v1065;
  uint64_t v1066;
  uint64_t v1067;
  __int128 v1068;
  uint64_t v1069;
  uint64_t v1070;
  __int128 v1071;
  unsigned __int128 v1072;
  uint64_t v1073;
  __int128 v1074;
  unint64_t v1075;
  unint64_t v1076;
  uint64_t v1077;
  uint64_t v1078;
  uint64_t v1079;
  uint64_t v1080;
  uint64_t v1081;
  uint64_t v1082;
  uint64_t v1083;
  uint64_t v1084;
  uint64_t v1085;
  unsigned __int128 v1086;
  uint64_t v1087;
  signed __int128 v1088;
  uint64_t v1089;
  unint64_t v1090;
  uint64_t v1091;
  unint64_t v1092;
  uint64_t v1093;
  unint64_t v1094;
  uint64_t v1095;
  unint64_t v1096;
  uint64_t v1097;
  unint64_t v1098;
  uint64_t v1099;
  unint64_t v1100;
  uint64_t v1101;
  unint64_t v1102;
  uint64_t v1103;
  unint64_t v1104;
  uint64_t v1105;
  uint64_t v1106;
  uint64_t v1107;
  unint64_t v1108;
  uint64_t v1109;
  unint64_t v1110;
  uint64_t v1111;
  unint64_t v1112;
  uint64_t v1113;
  uint64_t v1114;
  unsigned __int128 v1115;
  uint64_t v1116;
  uint64_t v1117;
  uint64_t v1118;
  uint64_t v1119;
  uint64_t v1120;
  __int128 v1121;
  uint64_t v1122;
  uint64_t v1123;
  uint64_t v1124;
  __int128 v1125;
  uint64_t v1126;
  unsigned __int128 v1127;
  uint64_t v1128;
  uint64_t v1129;
  uint64_t v1130;
  __int128 v1131;
  uint64_t v1132;
  unsigned __int128 v1133;
  uint64_t v1134;
  uint64_t v1135;
  __int128 v1136;
  unint64_t v1137;
  unint64_t v1138;
  uint64_t v1139;
  uint64_t v1140;
  uint64_t v1141;
  uint64_t v1142;
  uint64_t v1143;
  unint64_t v1144;
  unint64_t v1145;
  unsigned __int128 v1146;
  uint64_t v1147;
  unint64_t v1148;
  uint64_t v1149;
  uint64_t v1150;
  unint64_t v1151;
  uint64_t v1152;
  unint64_t v1153;
  uint64_t v1154;
  unint64_t v1155;
  uint64_t v1156;
  unint64_t v1157;
  uint64_t v1158;
  unint64_t v1159;
  uint64_t v1160;
  unint64_t v1161;
  uint64_t v1162;
  unint64_t v1163;
  uint64_t v1164;
  unint64_t v1165;
  uint64_t v1166;
  unint64_t v1167;
  uint64_t v1168;
  unint64_t v1169;
  unint64_t v1170;
  uint64_t v1171;
  uint64_t v1172;
  unsigned __int128 v1173;
  uint64_t v1174;
  uint64_t v1175;
  __int128 v1176;
  unsigned __int128 v1177;
  uint64_t v1178;
  uint64_t v1179;
  uint64_t v1180;
  __int128 v1181;
  unsigned __int128 v1182;
  uint64_t v1183;
  uint64_t v1184;
  uint64_t v1185;
  __int128 v1186;
  uint64_t v1187;
  uint64_t v1188;
  uint64_t v1189;
  uint64_t v1190;
  uint64_t v1191;
  __int128 v1192;
  unint64_t v1193;
  uint64_t v1194;
  unint64_t v1195;
  uint64_t v1196;
  unint64_t v1197;
  uint64_t v1198;
  unint64_t v1199;
  unint64_t v1200;
  unint64_t v1201;
  unint64_t v1202;
  unint64_t v1203;
  unint64_t v1204;
  unint64_t v1205;
  unint64_t v1206;
  unint64_t v1207;
  unint64_t v1208;
  unint64_t v1209;
  unint64_t v1210;
  unint64_t v1211;
  unint64_t v1212;
  unint64_t v1213;
  __int128 v1214;
  uint64_t v1215;
  int8x8_t result;
  uint64_t v1218;
  uint64_t v1219;
  uint64_t v1220;
  uint64_t v1221;
  uint64_t v1222;
  uint64_t v1223;
  uint64_t v1224;
  uint64_t v1225;
  uint64_t v1226;
  uint64_t v1227;
  uint64_t v1228;
  uint64_t v1229;
  uint64_t v1230;
  uint64_t v1231;
  uint64_t v1232;
  uint64_t v1233;
  uint64_t v1234;
  uint64_t v1235;
  uint64_t v1236;
  uint64_t v1237;
  unint64_t v1238;
  unint64_t v1239;
  uint64_t v1240;
  uint64_t v1241;
  uint64_t v1242;
  uint64_t v1243;
  uint64_t v1244;
  uint64_t v1245;
  uint64_t v1246;
  uint64_t v1247;
  uint64_t v1248;
  uint64_t v1249;
  uint64_t v1250;
  unint64_t v1251;
  uint64_t v1252;
  uint64_t v1253;
  unint64_t v1254;
  uint64_t v1255;
  uint64_t v1256;
  uint64_t v1257;
  uint64_t v1258;
  uint64_t v1259;
  uint64_t v1260;
  uint64_t v1261;
  uint64_t v1262;
  uint64_t v1263;
  uint64_t v1264;
  uint64_t v1265;
  uint64_t v1266;
  uint64_t v1267;
  uint64_t v1268;
  uint64_t v1269;
  uint64_t v1270;
  uint64_t v1271;
  unint64_t v1272;
  uint64_t v1273;
  uint64_t v1274;
  unint64_t v1275;
  uint64_t v1276;
  uint64_t v1277;
  uint64_t v1278;
  uint64_t v1279;
  uint64_t v1280;
  uint64_t v1281;
  uint64_t v1282;
  uint64_t v1283;
  uint64_t v1284;
  uint64_t v1285;
  uint64_t v1286;
  uint64_t v1287;
  uint64_t v1288;
  uint64_t v1289;
  uint64_t v1290;
  unint64_t v1291;
  uint64_t v1292;
  uint64_t v1293;
  uint64_t v1294;
  uint64_t v1295;
  uint64_t v1296;
  unint64_t v1297;
  uint64_t v1298;
  unint64_t v1299;
  uint64_t v1300;
  unint64_t v1301;
  uint64_t v1302;
  unint64_t v1303;
  uint64_t v1304;
  uint64_t v1305;
  unsigned __int128 v1306;
  int v1307;
  unint64_t v1308;
  int v1309;
  uint64_t v1310;
  uint64_t v1311;
  uint64_t v1312;
  uint64_t v1313;
  unint64_t v1314;
  unsigned __int128 v1315;
  uint64_t *v1316;
  uint64_t v1317;
  unint64_t v1318;
  unsigned __int128 v1319;
  uint64_t *v1320;
  unint64_t v1321;
  uint64_t v1322;
  uint64_t v1323;
  unsigned __int128 v1324;
  uint64_t *v1325;
  unint64_t v1326;
  uint64_t v1327;
  uint64_t v1328;
  unsigned __int128 v1329;
  uint64_t *v1330;
  unint64_t v1331;
  uint64_t v1332;
  uint64_t v1333;
  unsigned __int128 v1334;
  uint64_t *v1335;
  uint64_t v1336;
  uint64_t v1337;
  unsigned __int128 v1338;
  uint64_t v1339;
  uint64_t v1340;
  uint64_t v1341;
  uint64_t v1342;
  uint64_t v1343;
  uint64_t v1344;
  uint64_t v1345;
  uint64_t v1346;
  uint64_t v1347;
  uint64_t v1348;
  uint64_t v1349;
  uint64_t v1350;
  uint64_t v1351;
  uint64_t v1352;
  uint64_t v1353;
  uint64_t v1354;
  uint64_t v1355;
  unsigned __int128 v1356;
  uint64_t v1357;
  uint64_t v1358;
  uint64_t v1359;
  unint64_t v1360;
  unint64_t v1361;
  unint64_t v1362;
  uint64_t v1363;
  uint64_t v1364;
  uint64_t v1365;
  unint64_t v1366;
  unsigned __int128 v1367;
  uint64_t v1368;
  uint64_t v1369;
  uint64_t v1370;
  uint64_t v1371;
  uint64_t v1372;
  unsigned __int128 v1373;
  uint64_t *v1374;
  uint64_t v1375;
  uint64_t v1376;
  uint64_t v1377;
  __int128 v1378;
  __int128 v1379;
  uint64_t v1380;
  __int128 v1381;
  __int128 v1382;
  _OWORD v1383[2];
  uint64_t v1384;
  uint64_t v1385;
  __int128 v1386;
  __int128 v1387;
  _OWORD v1388[2];
  uint64_t v1389;
  _OWORD v1390[2];
  uint64_t v1391;
  uint64_t v1392;
  __int128 v1393;
  __int128 v1394;
  uint64_t v1395;
  __int128 v1396;
  __int128 v1397;
  _QWORD v1398[8];

  v3 = 0;
  v1398[5] = *MEMORY[0x1E0C80C00];
  v4 = a2[1];
  v1378 = *a2;
  v1379 = v4;
  v5 = &kCurve25519BasePoint;
  if (a3)
    v5 = a3;
  LOBYTE(v1378) = v1378 & 0xF8;
  HIBYTE(v1379) = HIBYTE(v1379) & 0x3F | 0x40;
  v6 = *v5 & 0x7FFFFFFFFFFFFLL;
  v7 = (*(_QWORD *)((char *)v5 + 6) >> 3) & 0x7FFFFFFFFFFFFLL;
  v8 = (*(_QWORD *)((char *)v5 + 12) >> 6) & 0x7FFFFFFFFFFFFLL;
  v9 = (*(_QWORD *)((char *)v5 + 19) >> 1) & 0x7FFFFFFFFFFFFLL;
  v10 = (v5[3] >> 12) & 0x7FFFFFFFFFFFFLL;
  v1397 = 0u;
  v1396 = 0u;
  v1395 = 1;
  v1393 = 0u;
  v1394 = 0u;
  v1392 = 1;
  v1391 = 0;
  memset(v1390, 0, sizeof(v1390));
  v1389 = 0;
  memset(v1388, 0, sizeof(v1388));
  v1387 = 0u;
  v1386 = 0u;
  v1385 = 1;
  v1384 = 0;
  memset(v1383, 0, sizeof(v1383));
  v1221 = 19 * v7;
  v1222 = 19 * v10;
  v1382 = 0u;
  v1219 = 19 * v9;
  v1220 = 19 * v8;
  v11 = &v1395;
  v1381 = 0u;
  v12 = &v1392;
  v13 = (uint64_t *)v1390;
  v1380 = 1;
  v14 = (uint64_t *)v1388;
  v15 = &v1385;
  v16 = (uint64_t *)v1383;
  v17 = &v1380;
  v1226 = v7;
  v1227 = v6;
  v1398[0] = v6;
  v1398[1] = v7;
  v18 = v1398;
  v1224 = v9;
  v1225 = v8;
  v1398[2] = v8;
  v1398[3] = v9;
  v19 = (int8x16_t)vdupq_n_s64(0x7FFFFFFFFFFFFuLL);
  v1223 = v10;
  v1398[4] = v10;
  do
  {
    v20 = 0;
    v1218 = v3;
    v21 = ((unsigned __int8 *)&v1378 - v3)[31];
    v22 = v18;
    v23 = v17;
    v24 = v16;
    v25 = v15;
    do
    {
      v1309 = v20;
      v26 = 0;
      v27 = v12;
      v17 = v13;
      v1374 = v14;
      v28 = v25;
      v29 = v24;
      v30 = v23;
      v31 = v22;
      v32 = (uint64_t)(char)v21 >> 7;
      do
      {
        v33 = v12[v26];
        v34 = v31[v26];
        v35 = (v34 ^ v33) & v32;
        v12[v26] = v35 ^ v33;
        v31[v26++] = v35 ^ v34;
      }
      while (v26 != 5);
      v1307 = v21;
      v1325 = v28;
      v1330 = v30;
      v1335 = v29;
      for (i = 0; i != 5; ++i)
      {
        v37 = v13[i];
        v38 = v11[i];
        v39 = (v38 ^ v37) & v32;
        v13[i] = v39 ^ v37;
        v11[i] = v39 ^ v38;
      }
      v40 = 0;
      v41 = v12[1];
      v42 = *v13;
      v43 = v13[1];
      v44 = *v12 + 0x3FFFFFFFFFFF68 - *v13;
      v45 = v31[1];
      v1273 = *v31;
      v46 = v11[1];
      v47 = *v11 + *v31;
      v48 = v46 + v45;
      v1363 = *v11;
      v1369 = ((unint64_t)(v46 + v45) * (unsigned __int128)(unint64_t)v44) >> 64;
      v1346 = (v46 + v45) * v44;
      v49 = v12[3];
      v50 = v12[4];
      v51 = v13[4];
      v52 = v50 - v51 + 0x3FFFFFFFFFFFF8;
      v1304 = v32;
      v53 = 19 * v52;
      v54 = v12[2];
      v55 = v42 + *v12;
      v1240 = v43 + v41;
      v56 = v41 - v43 + 0x3FFFFFFFFFFFF8;
      v58 = v17[2];
      v57 = v17[3];
      v1358 = v58 + v54;
      v59 = v57 + v49;
      v60 = v51 + v50;
      v61 = v54 - v58 + 0x3FFFFFFFFFFFF8;
      v62 = v49 - v57 + 0x3FFFFFFFFFFFF8;
      v63 = v31[2];
      v64 = v31[3];
      v65 = v31[4];
      v67 = v11[2];
      v66 = v11[3];
      v68 = v67 + v63;
      v1339 = v45 - v46;
      v69 = v66 + v64;
      v70 = v63 - v67;
      v1261 = v70;
      v71 = v11[4];
      v72 = v64 - v66;
      v73 = v71 + v65;
      v1269 = v65 - v71;
      *v31 = v47;
      v31[1] = v48;
      v31[2] = v68;
      v31[3] = v69;
      v1320 = v31;
      v31[4] = v71 + v65;
      v74 = v48 * 19 * v52 + v47 * v44 + v68 * 19 * v62 + v69 * 19 * v61;
      v75 = (v71 + v65) * 19 * v56;
      v76 = __CFADD__(v74, v75);
      v1253 = v74 + v75;
      v77 = v56;
      v1298 = 19 * v52;
      v1300 = v61;
      v79 = __PAIR128__((((unint64_t)v47 * (unsigned __int128)(unint64_t)v56) >> 64)+ __CFADD__(v1346, v47 * v77)+ v1369, v1346 + v47 * v77)+ v68 * (unsigned __int128)(unint64_t)(19 * v52)+ v69 * (unsigned __int128)(unint64_t)(19 * v62)+ (unint64_t)(v71 + v65) * (unsigned __int128)(unint64_t)(19 * v61);
      v78 = *((_QWORD *)&v79 + 1);
      *((_QWORD *)&v81 + 1) = (((unint64_t)(v71 + v65) * (unsigned __int128)(unint64_t)(19 * v56)) >> 64)
                            + v76
                            + ((v48 * (unsigned __int128)(unint64_t)(19 * v52)
                              + (unint64_t)v47 * (unsigned __int128)(unint64_t)v44
                              + v68 * (unsigned __int128)(unint64_t)(19 * v62)
                              + v69 * (unsigned __int128)(unint64_t)(19 * v61)) >> 64);
      *(_QWORD *)&v81 = v1253;
      v80 = v81 >> 51;
      v1248 = v79 + v80;
      if (__CFADD__((_QWORD)v79, v80))
        v78 = *((_QWORD *)&v79 + 1) + 1;
      v1302 = 19 * v62;
      v82 = v48 * (unsigned __int128)(unint64_t)v77
          + (unint64_t)v47 * (unsigned __int128)(unint64_t)v61
          + v68 * (unsigned __int128)(unint64_t)v44
          + v69 * (unsigned __int128)(unint64_t)v53
          + v73 * (unsigned __int128)(unint64_t)(19 * v62);
      *((_QWORD *)&v84 + 1) = v78;
      *(_QWORD *)&v84 = v79 + v80;
      v83 = v84 >> 51;
      v1370 = v82 + v83;
      if (__CFADD__((_QWORD)v82, v83))
        v85 = *((_QWORD *)&v82 + 1) + 1;
      else
        v85 = (v48 * (unsigned __int128)(unint64_t)v77
             + (unint64_t)v47 * (unsigned __int128)(unint64_t)v61
             + v68 * (unsigned __int128)(unint64_t)v44
             + v69 * (unsigned __int128)(unint64_t)v53
             + v73 * (unsigned __int128)(unint64_t)(19 * v62)) >> 64;
      v86 = v48 * (unsigned __int128)(unint64_t)v61
          + (unint64_t)v47 * (unsigned __int128)(unint64_t)v62
          + v68 * (unsigned __int128)(unint64_t)v77
          + v69 * (unsigned __int128)(unint64_t)v44
          + v73 * (unsigned __int128)(unint64_t)v53;
      v1287 = v52;
      v1292 = v62;
      v87 = v47 * v52;
      *((_QWORD *)&v89 + 1) = v85;
      *(_QWORD *)&v89 = v82 + v83;
      v88 = v89 >> 51;
      v90 = v86 + v88;
      v1347 = v86 + v88;
      v91 = v48 * v62;
      if (__CFADD__((_QWORD)v86, v88))
        v92 = *((_QWORD *)&v86 + 1) + 1;
      else
        v92 = *((_QWORD *)&v86 + 1);
      v76 = __CFADD__(v91, v87);
      v93 = v91 + v87;
      v94 = v1273 + 0x3FFFFFFFFFFF68 - v1363;
      v95 = (((unint64_t)v47 * (unsigned __int128)(unint64_t)v52) >> 64)
          + v76
          + ((v48 * (unsigned __int128)(unint64_t)v62) >> 64);
      v96 = v1339 + 0x3FFFFFFFFFFFF8;
      v1281 = v44;
      v1283 = v77;
      v97 = v70 + 0x3FFFFFFFFFFFF8;
      *((_QWORD *)&v99 + 1) = v92;
      *(_QWORD *)&v99 = v90;
      v98 = v99 >> 51;
      v101 = __PAIR128__(v95, v93)
           + v68 * (unsigned __int128)(unint64_t)v61
           + v69 * (unsigned __int128)(unint64_t)v77
           + v73 * (unsigned __int128)(unint64_t)v44;
      v100 = *((_QWORD *)&v101 + 1);
      v102 = v101 + v98;
      if (__CFADD__((_QWORD)v101, v98))
        v100 = *((_QWORD *)&v101 + 1) + 1;
      v1265 = v100;
      v103 = v72;
      v104 = v72 + 0x3FFFFFFFFFFFF8;
      v105 = 19 * (v72 + 0x3FFFFFFFFFFFF8);
      v106 = v1269 + 0x3FFFFFFFFFFFF8;
      v107 = 19 * (v1269 + 0x3FFFFFFFFFFFF8);
      v108 = (unint64_t)(19 * v96) * (unsigned __int128)(unint64_t)v60
           + (unint64_t)v94 * (unsigned __int128)(unint64_t)v55
           + (unint64_t)(19 * v97) * (unsigned __int128)(unint64_t)v59
           + (unint64_t)v105 * (unsigned __int128)(unint64_t)v1358
           + (unint64_t)v107 * (unsigned __int128)(unint64_t)v1240;
      v109 = (unint64_t)v96 * (unsigned __int128)(unint64_t)v55
           + (unint64_t)v94 * (unsigned __int128)(unint64_t)v1240
           + (unint64_t)(19 * v97) * (unsigned __int128)(unint64_t)v60
           + (unint64_t)v105 * (unsigned __int128)(unint64_t)v59
           + (unint64_t)v107 * (unsigned __int128)(unint64_t)v1358;
      v110 = v108 >> 51;
      if (__CFADD__((_QWORD)v109, v110))
        v111 = *((_QWORD *)&v109 + 1) + 1;
      else
        v111 = ((unint64_t)v96 * (unsigned __int128)(unint64_t)v55
              + (unint64_t)v94 * (unsigned __int128)(unint64_t)v1240
              + (unint64_t)(19 * v97) * (unsigned __int128)(unint64_t)v60
              + (unint64_t)v105 * (unsigned __int128)(unint64_t)v59
              + (unint64_t)v107 * (unsigned __int128)(unint64_t)v1358) >> 64;
      v112 = (unint64_t)v96 * (unsigned __int128)(unint64_t)v1240
           + (unint64_t)v94 * (unsigned __int128)(unint64_t)v1358
           + (unint64_t)v97 * (unsigned __int128)(unint64_t)v55
           + (unint64_t)v105 * (unsigned __int128)(unint64_t)v60
           + (unint64_t)v107 * (unsigned __int128)(unint64_t)v59;
      *((_QWORD *)&v113 + 1) = v111;
      *(_QWORD *)&v113 = v109 + v110;
      v1278 = v113 >> 51;
      if (__CFADD__((_QWORD)v112, v1278))
        v114 = *((_QWORD *)&v112 + 1) + 1;
      else
        v114 = ((unint64_t)v96 * (unsigned __int128)(unint64_t)v1240
              + (unint64_t)v94 * (unsigned __int128)(unint64_t)v1358
              + (unint64_t)v97 * (unsigned __int128)(unint64_t)v55
              + (unint64_t)v105 * (unsigned __int128)(unint64_t)v60
              + (unint64_t)v107 * (unsigned __int128)(unint64_t)v59) >> 64;
      *((_QWORD *)&v116 + 1) = v114;
      *(_QWORD *)&v116 = v112 + v1278;
      v115 = v116 >> 51;
      v118 = ((unint64_t)v96 * (unsigned __int128)(unint64_t)v1358
            + (unint64_t)v94 * (unsigned __int128)(unint64_t)v59
            + (unint64_t)v97 * (unsigned __int128)(unint64_t)v1240
            + (unint64_t)v104 * (unsigned __int128)(unint64_t)v55
            + (unint64_t)v107 * (unsigned __int128)(unint64_t)v60) >> 64;
      v117 = v96 * v1358 + v94 * v59 + v97 * v1240 + v104 * v55 + v107 * v60;
      v76 = __CFADD__(v117, v115);
      v119 = v117 + v115;
      if (v76)
        ++v118;
      *v11 = v94;
      v11[1] = v96;
      v11[2] = v97;
      v11[3] = v104;
      v1316 = v11;
      v11[4] = v106;
      v120 = v55;
      v122 = (unint64_t)v96 * (unsigned __int128)(unint64_t)v59
           + (unint64_t)v94 * (unsigned __int128)(unint64_t)v60
           + (unint64_t)v97 * (unsigned __int128)(unint64_t)v1358
           + (unint64_t)v104 * (unsigned __int128)(unint64_t)v1240
           + (unint64_t)v106 * (unsigned __int128)(unint64_t)v55;
      v121 = *((_QWORD *)&v122 + 1);
      *((_QWORD *)&v124 + 1) = v1265;
      *(_QWORD *)&v124 = v102;
      v123 = v124 >> 51;
      *((_QWORD *)&v124 + 1) = v118;
      *(_QWORD *)&v124 = v119;
      v125 = v124 >> 51;
      v126 = v122 + v125;
      v127 = v103 + 0x7FFFFFFFFFFF8;
      v128 = v1269 + 0x7FFFFFFFFFFF8;
      v129 = v1261 + 0x7FFFFFFFFFFF8;
      v130 = v1273 - v1363 + 0x7FFFFFFFFFF68;
      v1364 = v130 * v60
            + (v1339 + 0x7FFFFFFFFFFF8) * v59
            + (v1261 + 0x7FFFFFFFFFFF8) * v1358
            + (v103 + 0x7FFFFFFFFFFF8) * v1240
            + (v1269 + 0x7FFFFFFFFFFF8) * v120
            + v125;
      v131 = v1339 + 0x7FFFFFFFFFFF8;
      v123 *= 19;
      v132 = v123 + (v1253 & 0x7FFFFFFFFFFFFLL);
      v133 = v123 + v1253;
      v134 = v108 & 0x7FFFFFFFFFFFFLL;
      if (__CFADD__((_QWORD)v122, v125))
        v121 = *((_QWORD *)&v122 + 1) + 1;
      *((_QWORD *)&v135 + 1) = v121;
      *(_QWORD *)&v135 = v122 + v125;
      v136 = 19 * (v135 >> 51);
      v137 = v136 + v134;
      v1245 = v136
            + v130 * v120
            + 19
            * ((v1339 + 0x7FFFFFFFFFFF8) * v60
             + (v1261 + 0x7FFFFFFFFFFF8) * v59
             + (v103 + 0x7FFFFFFFFFFF8) * v1358
             + (v1269 + 0x7FFFFFFFFFFF8) * v1240);
      v1257 = v130;
      v1262 = v1339 + 0x7FFFFFFFFFFF8;
      v1266 = v103 + 0x7FFFFFFFFFFF8;
      v1274 = v129;
      v1340 = 19 * v60;
      v1243 = v130 * v59 + v131 * v1358 + v129 * v1240 + v127 * v120 + 19 * v60 * v128 + v115;
      v138 = (v1248 & 0x7FFFFFFFFFFFFLL) + (v132 >> 51);
      v1254 = ((v109 + v110) & 0x7FFFFFFFFFFFFLL) + ((unint64_t)(v136 + v134) >> 51);
      v1234 = v119 & 0x7FFFFFFFFFFFFLL;
      v1237 = v126 & 0x7FFFFFFFFFFFFLL;
      v1232 = ((v112 + v1278) & 0x7FFFFFFFFFFFFLL) + (v1254 >> 51);
      v1229 = (v1370 & 0x7FFFFFFFFFFFFLL) + (v138 >> 51);
      v139 = (v1254 & 0x7FFFFFFFFFFFFLL) + (v138 & 0x7FFFFFFFFFFFFLL);
      v140 = v1232 + v1229;
      v141 = (v119 & 0x7FFFFFFFFFFFFLL) + (v1347 & 0x7FFFFFFFFFFFFLL);
      v142 = (v126 & 0x7FFFFFFFFFFFFLL) + (v102 & 0x7FFFFFFFFFFFFLL);
      v143 = v1248 + (v132 >> 51);
      v1228 = v132 & 0x7FFFFFFFFFFFFLL;
      v144 = v130 * v1240 + v131 * v120 + 19 * (v129 * v60 + v127 * v59 + v128 * v1358) + v110 + (v137 >> 51);
      v145 = (v137 & 0x7FFFFFFFFFFFFLL) + (v132 & 0x7FFFFFFFFFFFFLL);
      v146 = (__int128)(((unint64_t)(v1232 + v1229) * (unsigned __int128)(unint64_t)v141
                       + (unint64_t)v139 * (unsigned __int128)(unint64_t)v142)
                      * 0x26
                      + (unint64_t)v145 * (unsigned __int128)(unint64_t)v145) >> 51;
      v147 = (__int128)((unint64_t)(2 * v145) * (unsigned __int128)(unint64_t)v139
                      + (unint64_t)v141 * (unsigned __int128)(unint64_t)v141 * 0x13
                      + (unint64_t)(38 * v142) * (unsigned __int128)(unint64_t)(v1232 + v1229)
                      + ((((unint64_t)(v1232 + v1229) * (unsigned __int128)(unint64_t)v141
                         + (unint64_t)v139 * (unsigned __int128)(unint64_t)v142)
                        * 0x26
                        + (unint64_t)v145 * (unsigned __int128)(unint64_t)v145) >> 51)) >> 51;
      v148 = (unint64_t)v139 * (unsigned __int128)(unint64_t)v139
           + (unint64_t)(38 * v142) * (unsigned __int128)(unint64_t)v141
           + (unint64_t)(2 * v145) * (unsigned __int128)(unint64_t)(v1232 + v1229)
           + (((unint64_t)(2 * v145) * (unsigned __int128)(unint64_t)v139
             + (unint64_t)v141 * (unsigned __int128)(unint64_t)v141 * 0x13
             + (unint64_t)(38 * v142) * (unsigned __int128)(unint64_t)(v1232 + v1229)
             + ((((unint64_t)(v1232 + v1229) * (unsigned __int128)(unint64_t)v141
                + (unint64_t)v139 * (unsigned __int128)(unint64_t)v142)
               * 0x26
               + (unint64_t)v145 * (unsigned __int128)(unint64_t)v145) >> 51)) >> 51);
      v149 = v143;
      v150 = (unint64_t)v142 * (unsigned __int128)(unint64_t)v142 * 0x13
           + ((unint64_t)(v1232 + v1229) * (unsigned __int128)(unint64_t)v139
            + (unint64_t)v145 * (unsigned __int128)(unint64_t)v141)
           * 2
           + ((unsigned __int128)v148 >> 51);
      v151 = (unint64_t)v139 * (unsigned __int128)(unint64_t)v141
           + (unint64_t)v145 * (unsigned __int128)(unint64_t)v142;
      v152 = v140 * v140 + 2 * ((v1245 + v133) * (v1364 + v102) + (v144 + v143) * (v1243 + v1347));
      v153 = 2 * (v1245 + v133);
      v154 = 19 * (v1243 + v1347) * (v1243 + v1347) + (v144 + v143) * v153 + 38 * (v1364 + v102) * (v1232 + v1229);
      v155 = (v1245 + v133) * (v1245 + v133) + 38 * ((v144 + v143) * (v1364 + v102) + (v1243 + v1347) * (v1232 + v1229));
      v156 = 19
           * ((__int128)((unint64_t)v140 * (unsigned __int128)(unint64_t)v140
                       + v151 * 2
                       + ((unsigned __int128)v150 >> 51)) >> 51);
      v157 = v156 + v155;
      v158 = v156 + (v155 & 0x7FFFFFFFFFFFFLL);
      v159 = v154 + v146 + (v158 >> 51);
      v160 = ((v154 + v146) & 0x7FFFFFFFFFFFFLL) + (v158 >> 51);
      v161 = v1228 + 0x3FFFFFFFFFFF68 - (v137 & 0x7FFFFFFFFFFFFLL);
      v162 = (v1347 & 0x7FFFFFFFFFFFFLL) - v1234;
      *v1374 = v157 & 0x7FFFFFFFFFFFFLL;
      v1374[1] = v159 & 0x7FFFFFFFFFFFFLL;
      v1374[2] = ((38 * (v1364 + v102) * (v1243 + v1347) + (v144 + v143) * (v144 + v143) + v153 * (v1232 + v1229) + v147) & 0x7FFFFFFFFFFFFLL)
               + (v160 >> 51);
      v1374[3] = (19 * (v1364 + v102) * (v1364 + v102)
                + 2 * ((v1245 + v133) * (v1243 + v1347) + (v144 + v143) * (v1232 + v1229))
                + (v148 >> 51)) & 0x7FFFFFFFFFFFFLL;
      v1374[4] = (v152 + (v150 >> 51)) & 0x7FFFFFFFFFFFFLL;
      v163 = (v138 & 0x7FFFFFFFFFFFFLL) - (v1254 & 0x7FFFFFFFFFFFFLL) + 0x3FFFFFFFFFFFF8;
      v164 = v1229 - v1232 + 0x3FFFFFFFFFFFF8;
      v165 = (v102 & 0x7FFFFFFFFFFFFLL) - v1237 + 0x3FFFFFFFFFFFF8;
      v166 = (__int128)(((unint64_t)v164 * (unsigned __int128)(unint64_t)(v162 + 0x3FFFFFFFFFFFF8)
                       + (unint64_t)v163 * (unsigned __int128)(unint64_t)v165)
                      * 0x26
                      + v161 * (unsigned __int128)v161) >> 51;
      *((_QWORD *)&v135 + 1) = (__PAIR128__(v161 >> 63, 2 * v161) * (unint64_t)v163
                              + (unint64_t)(v162 + 0x3FFFFFFFFFFFF8)
                              * (unsigned __int128)(unint64_t)(v162 + 0x3FFFFFFFFFFFF8)
                              * 0x13
                              + (unint64_t)v165 * (unsigned __int128)0x26uLL * (unint64_t)v164
                              + ((((unint64_t)v164
                                 * (unsigned __int128)(unint64_t)(v162 + 0x3FFFFFFFFFFFF8)
                                 + (unint64_t)v163 * (unsigned __int128)(unint64_t)v165)
                                * 0x26
                                + v161 * (unsigned __int128)v161) >> 51)) >> 64;
      *(_QWORD *)&v135 = 2 * v161 * v163
                       + 19 * (v162 + 0x3FFFFFFFFFFFF8) * (v162 + 0x3FFFFFFFFFFFF8)
                       + 38 * v165 * v164
                       + v166;
      v167 = v135 >> 51;
      *((_QWORD *)&v135 + 1) = ((unint64_t)v163 * (unsigned __int128)(unint64_t)v163
                              + (unint64_t)v165
                              * (unsigned __int128)0x26uLL
                              * (unint64_t)(v162 + 0x3FFFFFFFFFFFF8)
                              + __PAIR128__(v161 >> 63, 2 * v161) * (unint64_t)v164
                              + ((unsigned __int128)v135 >> 51)) >> 64;
      *(_QWORD *)&v135 = v163 * v163 + 38 * v165 * (v162 + 0x3FFFFFFFFFFFF8) + 2 * v161 * v164 + v167;
      v168 = ((unint64_t)v165 * (unsigned __int128)(unint64_t)v165 * 0x13
            + ((unint64_t)v164 * (unsigned __int128)(unint64_t)v163
             + v161 * (unsigned __int128)(unint64_t)(v162 + 0x3FFFFFFFFFFFF8))
            * 2
            + ((unsigned __int128)v135 >> 51)) >> 64;
      v169 = 19 * v165 * v165 + 2 * (v164 * v163 + v161 * (v162 + 0x3FFFFFFFFFFFF8)) + ((unsigned __int128)v135 >> 51);
      v170 = v60;
      *v27 = v120;
      v27[1] = v1240;
      v27[2] = v1358;
      v27[3] = v59;
      v27[4] = v60;
      *((_QWORD *)&v135 + 1) = ((unint64_t)v164 * (unsigned __int128)(unint64_t)v164
                              + ((unint64_t)v163
                               * (unsigned __int128)(unint64_t)(v162 + 0x3FFFFFFFFFFFF8)
                               + v161 * (unsigned __int128)(unint64_t)v165)
                              * 2
                              + (((unint64_t)v165 * (unsigned __int128)(unint64_t)v165 * 0x13
                                + ((unint64_t)v164 * (unsigned __int128)(unint64_t)v163
                                 + v161 * (unsigned __int128)(unint64_t)(v162 + 0x3FFFFFFFFFFFF8))
                                * 2
                                + ((unsigned __int128)v135 >> 51)) >> 51)) >> 64;
      *(_QWORD *)&v135 = v164 * v164
                       + 2 * (v163 * (v162 + 0x3FFFFFFFFFFFF8) + v161 * v165)
                       + ((__int128)__PAIR128__(v168, v169) >> 51);
      v171 = v149 - v144 + 0x7FFFFFFFFFFF8;
      v172 = v102 - v1364 + 0x7FFFFFFFFFFF8;
      v173 = 0x7FFFFFFFFFFEDLL * (v1266 * v60 + (v1269 + 0x7FFFFFFFFFFF8) * v59)
           - (v1257 * v1358
            + v1262 * v1240
            + v1274 * v120
            + v1278)
           + v1370
           + (v138 >> 51)
           - (v1254 >> 51)
           + 0x7FFFFFFFFFFF8;
      v174 = v1347 - v1243 + 0x7FFFFFFFFFFF8;
      v175 = v133 - v1245 + 0x7FFFFFFFFFF68;
      v176 = v175 * v175 + 38 * (v171 * v172 + v173 * v174);
      v177 = 19 * (v135 >> 51);
      v178 = v177 + v176;
      v172 *= 38;
      v175 *= 2;
      v179 = 19 * v174 * v174 + v171 * v175 + v172 * v173 + v166;
      v180 = v177 + (v176 & 0x7FFFFFFFFFFFFLL);
      v181 = v179 + (v180 >> 51);
      v182 = ((v172 * v174 + v171 * v171 + v173 * v175 + v167) & 0x7FFFFFFFFFFFFLL)
           + (((v179 & 0x7FFFFFFFFFFFFLL) + (v180 >> 51)) >> 51);
      v183 = v178 & 0x7FFFFFFFFFFFFLL;
      v184 = v181 & 0x7FFFFFFFFFFFFLL;
      v185 = v169 & 0x7FFFFFFFFFFFFLL;
      v186 = v135 & 0x7FFFFFFFFFFFFLL;
      v187 = (v135 & 0x7FFFFFFFFFFFFLL) * (unint64_t)v1221
           + (v169 & 0x7FFFFFFFFFFFFLL) * (unsigned __int128)(unint64_t)v1220
           + (v178 & 0x7FFFFFFFFFFFFLL) * (unsigned __int128)(unint64_t)v1227
           + (v181 & 0x7FFFFFFFFFFFFLL) * (unsigned __int128)(unint64_t)v1222
           + v182 * (unsigned __int128)(unint64_t)v1219;
      v190 = v187 >> 51;
      v189 = ((v135 & 0x7FFFFFFFFFFFFLL) * (unint64_t)v1220
            + (v169 & 0x7FFFFFFFFFFFFLL) * (unsigned __int128)(unint64_t)v1219
            + (v178 & 0x7FFFFFFFFFFFFLL) * (unsigned __int128)(unint64_t)v1226
            + (v181 & 0x7FFFFFFFFFFFFLL) * (unsigned __int128)(unint64_t)v1227
            + v182 * (unsigned __int128)(unint64_t)v1222) >> 64;
      v188 = (v135 & 0x7FFFFFFFFFFFFLL) * v1220
           + (v169 & 0x7FFFFFFFFFFFFLL) * v1219
           + (v178 & 0x7FFFFFFFFFFFFLL) * v1226
           + (v181 & 0x7FFFFFFFFFFFFLL) * v1227
           + v182 * v1222;
      v76 = __CFADD__(v188, v190);
      v191 = v188 + v190;
      if (v76)
        ++v189;
      v192 = ((unint64_t)v186 * (unsigned __int128)(unint64_t)v1219
            + (unint64_t)v185 * (unsigned __int128)(unint64_t)v1222
            + (v178 & 0x7FFFFFFFFFFFFLL) * (unsigned __int128)(unint64_t)v1225
            + (unint64_t)v184 * (unsigned __int128)(unint64_t)v1226
            + v182 * (unsigned __int128)(unint64_t)v1227) >> 64;
      v193 = v186 * v1219 + v185 * v1222 + v183 * v1225 + v184 * v1226 + v182 * v1227;
      *((_QWORD *)&v195 + 1) = v189;
      *(_QWORD *)&v195 = v191;
      v194 = v195 >> 51;
      v76 = __CFADD__(v193, v194);
      v196 = v193 + v194;
      if (v76)
        ++v192;
      v18 = v1374;
      v197 = v191 & 0x7FFFFFFFFFFFFLL;
      *((_QWORD *)&v199 + 1) = v192;
      *(_QWORD *)&v199 = v196;
      v198 = v199 >> 51;
      v200 = v196 & 0x7FFFFFFFFFFFFLL;
      v201 = (unint64_t)v186 * (unsigned __int128)(unint64_t)v1222
           + (unint64_t)v185 * (unsigned __int128)(unint64_t)v1227
           + (unint64_t)v183 * (unsigned __int128)(unint64_t)v1224
           + (unint64_t)v184 * (unsigned __int128)(unint64_t)v1225
           + v182 * (unsigned __int128)(unint64_t)v1226;
      v203 = (unint64_t)v186 * (unsigned __int128)(unint64_t)v1227
           + (unint64_t)v185 * (unsigned __int128)(unint64_t)v1226
           + (unint64_t)v183 * (unsigned __int128)(unint64_t)v1223
           + (unint64_t)v184 * (unsigned __int128)(unint64_t)v1224
           + v182 * (unsigned __int128)(unint64_t)v1225;
      v202 = *((_QWORD *)&v203 + 1);
      if (__CFADD__((_QWORD)v201, v198))
        v204 = *((_QWORD *)&v201 + 1) + 1;
      else
        v204 = *((_QWORD *)&v201 + 1);
      *((_QWORD *)&v206 + 1) = v204;
      *(_QWORD *)&v206 = v201 + v198;
      v205 = v206 >> 51;
      v207.i64[0] = v201 + v198;
      v207.i64[1] = v203 + v205;
      if (__CFADD__((_QWORD)v203, v205))
        v202 = *((_QWORD *)&v203 + 1) + 1;
      *((_QWORD *)&v208 + 1) = v202;
      *(_QWORD *)&v208 = v203 + v205;
      v209 = (v187 & 0x7FFFFFFFFFFFFLL) + 19 * (v208 >> 51);
      v210 = v209 & 0x7FFFFFFFFFFFFLL;
      v211 = v197 + (v209 >> 51);
      v11 = v1325;
      *v1325 = v210;
      v1325[1] = v211 & 0x7FFFFFFFFFFFFLL;
      v1325[2] = v200 + (v211 >> 51);
      v212 = 2 * v120;
      v213 = 38 * v170;
      v214 = (__int128)((unint64_t)v59 * (unsigned __int128)(unint64_t)(38 * v1358)
                      + (unint64_t)v120 * (unsigned __int128)(unint64_t)v120
                      + (unint64_t)(38 * v170) * (unsigned __int128)(unint64_t)v1240) >> 51;
      v215 = (unint64_t)(19 * v59) * (unsigned __int128)(unint64_t)v59
           + (unint64_t)v1240 * (unsigned __int128)(unint64_t)(2 * v120);
      v216 = 38 * v170 * v1358;
      v217 = (v215 + (unint64_t)(38 * v170) * (unsigned __int128)(unint64_t)v1358) >> 64;
      if (__CFADD__(v215 + v216, v214))
        ++v217;
      *((_QWORD *)&v219 + 1) = v217;
      *(_QWORD *)&v219 = v215 + v216 + v214;
      v218 = v219 >> 51;
      v220 = v1358 * v212;
      v221 = ((unint64_t)v213 * (unsigned __int128)(unint64_t)v59) >> 64;
      v222 = v213 * v59;
      v223 = ((unint64_t)v1358 * (unsigned __int128)(unint64_t)(2 * v120)
            + (unint64_t)v1240 * (unsigned __int128)(unint64_t)v1240
            + __PAIR128__(v221, v222)) >> 64;
      if (__CFADD__(v1358 * v212 + v1240 * v1240 + v222, v218))
        ++v223;
      *((_QWORD *)&v225 + 1) = v223;
      *(_QWORD *)&v225 = v1358 * v212 + v1240 * v1240 + v222 + v218;
      v224 = v225 >> 51;
      v226 = (unint64_t)v59 * (unsigned __int128)(unint64_t)(2 * v120)
           + (unint64_t)v1358 * (unsigned __int128)(unint64_t)(2 * v1240)
           + (unint64_t)v1340 * (unsigned __int128)(unint64_t)v170;
      v1279 = v226 + v224;
      if (__CFADD__((_QWORD)v226, v224))
        v227 = *((_QWORD *)&v226 + 1) + 1;
      else
        v227 = ((unint64_t)v59 * (unsigned __int128)(unint64_t)(2 * v120)
              + (unint64_t)v1358 * (unsigned __int128)(unint64_t)(2 * v1240)
              + (unint64_t)v1340 * (unsigned __int128)(unint64_t)v170) >> 64;
      v1371 = v1340 * v170 + 2 * (v1358 * v1240 + v59 * v120) + v224;
      v228 = (unint64_t)v59 * (unsigned __int128)(unint64_t)(2 * v1240)
           + (unint64_t)v1358 * (unsigned __int128)(unint64_t)v1358
           + (unint64_t)v170 * (unsigned __int128)(unint64_t)v212;
      *((_QWORD *)&v230 + 1) = v227;
      *(_QWORD *)&v230 = v226 + v224;
      v229 = v230 >> 51;
      if (__CFADD__((_QWORD)v228, v229))
        v231 = *((_QWORD *)&v228 + 1) + 1;
      else
        v231 = ((unint64_t)v59 * (unsigned __int128)(unint64_t)(2 * v1240)
              + (unint64_t)v1358 * (unsigned __int128)(unint64_t)v1358
              + (unint64_t)v170 * (unsigned __int128)(unint64_t)v212) >> 64;
      v1341 = v228 + v229;
      v1348 = v1358 * v1358 + 2 * (v59 * v1240 + v170 * v120) + v229;
      *((_QWORD *)&v232 + 1) = v231;
      *(_QWORD *)&v232 = v228 + v229;
      v233 = 19 * (v232 >> 51);
      v234 = v120 * v120 + 38 * (v59 * v1358 + v170 * v1240);
      v1270 = v233 + v234;
      v235 = v233 + (v234 & 0x7FFFFFFFFFFFFLL);
      v236 = 19 * v59 * v59 + v1240 * 2 * v120 + v216 + v214;
      v1359 = v236 + (v235 >> 51);
      v1275 = (v236 & 0x7FFFFFFFFFFFFLL) + (v235 >> 51);
      v237 = v220 + v1240 * v1240 + v222 + v218;
      v238 = 2 * v1281;
      v239 = 38 * v1287;
      v240 = (__int128)((unint64_t)v1292 * (unsigned __int128)(unint64_t)(38 * v61)
                      + (unint64_t)v1281 * (unsigned __int128)(unint64_t)v1281
                      + (unint64_t)(38 * v1287) * (unsigned __int128)(unint64_t)v1283) >> 51;
      v242 = ((unint64_t)v1302 * (unsigned __int128)(unint64_t)v1292
            + (unint64_t)v1283 * (unsigned __int128)(unint64_t)(2 * v1281)
            + (unint64_t)(38 * v1287) * (unsigned __int128)(unint64_t)v61) >> 64;
      v241 = v1302 * v1292 + v1283 * 2 * v1281 + 38 * v1287 * v61;
      v76 = __CFADD__(v241, v240);
      v243 = v241 + v240;
      if (v76)
        ++v242;
      *((_QWORD *)&v245 + 1) = v242;
      *(_QWORD *)&v245 = v243;
      v244 = v245 >> 51;
      v246 = v61 * v238;
      v247 = ((unint64_t)v239 * (unsigned __int128)(unint64_t)v1292) >> 64;
      v248 = v239 * v1292;
      v249 = ((unint64_t)v61 * (unsigned __int128)(unint64_t)(2 * v1281)
            + (unint64_t)v1283 * (unsigned __int128)(unint64_t)v1283
            + __PAIR128__(v247, v248)) >> 64;
      v250 = v61 * 2 * v1281 + v1283 * v1283 + v248;
      v76 = __CFADD__(v250, v244);
      v251 = v250 + v244;
      if (v76)
        ++v249;
      *((_QWORD *)&v253 + 1) = v249;
      *(_QWORD *)&v253 = v251;
      v252 = v253 >> 51;
      v255 = ((unint64_t)v1292 * (unsigned __int128)(unint64_t)(2 * v1281)
            + (unint64_t)v61 * (unsigned __int128)(unint64_t)(2 * v1283)
            + (unint64_t)v1298 * (unsigned __int128)(unint64_t)v1287) >> 64;
      v254 = v1292 * 2 * v1281 + v61 * 2 * v1283 + v1298 * v1287;
      v256 = v254 + v252;
      if (__CFADD__(v254, v252))
        ++v255;
      v257 = v1298 * v1287 + 2 * (v1300 * v1283 + v1292 * v1281) + v252;
      v259 = ((unint64_t)v1292 * (unsigned __int128)(unint64_t)(2 * v1283)
            + (unint64_t)v1300 * (unsigned __int128)(unint64_t)v1300
            + (unint64_t)v1287 * (unsigned __int128)(unint64_t)v238) >> 64;
      v258 = v1292 * 2 * v1283 + v1300 * v1300 + v1287 * v238;
      *((_QWORD *)&v261 + 1) = v255;
      *(_QWORD *)&v261 = v256;
      v260 = v261 >> 51;
      v76 = __CFADD__(v258, v260);
      v262 = v258 + v260;
      v263 = v1300 * v1300 + 2 * (v1292 * v1283 + v1287 * v1281) + v260;
      v17[2] = v1300;
      v17[3] = v1292;
      *v17 = v1281;
      v17[1] = v1283;
      if (v76)
        ++v259;
      *((_QWORD *)&v264 + 1) = v259;
      *(_QWORD *)&v264 = v262;
      v265 = 19 * (v264 >> 51);
      v266 = v1281 * v1281 + 38 * (v1292 * v1300 + v1287 * v1283);
      v267 = v265 + v266;
      v268 = v265 + (v266 & 0x7FFFFFFFFFFFFLL);
      v17[4] = v1287;
      v269 = v1302 * v1292 + v1283 * 2 * v1281 + v1287 * 38 * v1300 + v240;
      v270 = (v246 + v1283 * v1283 + v248 + v244) & 0x7FFFFFFFFFFFFLL;
      v271 = (v237 & 0x7FFFFFFFFFFFFLL) + (v1275 >> 51);
      v272 = v257 & 0x7FFFFFFFFFFFFLL;
      v273 = v263 & 0x7FFFFFFFFFFFFLL;
      v274 = v267 & 0x7FFFFFFFFFFFFLL;
      v275 = (v269 + (v268 >> 51)) & 0x7FFFFFFFFFFFFLL;
      v276 = v270 + (((v269 & 0x7FFFFFFFFFFFFLL) + (v268 >> 51)) >> 51);
      v277 = (v1359 & 0x7FFFFFFFFFFFFLL) * 19 * (v263 & 0x7FFFFFFFFFFFFLL)
           + v274 * (v1270 & 0x7FFFFFFFFFFFFLL)
           + v271 * 19 * (v257 & 0x7FFFFFFFFFFFFLL)
           + (v1341 & 0x7FFFFFFFFFFFFLL) * 19 * v275
           + (v1279 & 0x7FFFFFFFFFFFFLL) * 19 * v276;
      v280 = (v1359 & 0x7FFFFFFFFFFFFLL) * (unsigned __int128)(unint64_t)v274
           + (v1279 & 0x7FFFFFFFFFFFFLL) * (unsigned __int128)(19 * (v257 & 0x7FFFFFFFFFFFFuLL))
           + (unint64_t)v275 * (unsigned __int128)(v1270 & 0x7FFFFFFFFFFFFLL)
           + (unint64_t)v271 * (unsigned __int128)(19 * (v263 & 0x7FFFFFFFFFFFFuLL))
           + (v1341 & 0x7FFFFFFFFFFFFLL) * (unsigned __int128)(19 * v276)
           + (((v1359 & 0x7FFFFFFFFFFFFLL) * (unsigned __int128)(19 * (v263 & 0x7FFFFFFFFFFFFuLL))
             + (unint64_t)v274 * (unsigned __int128)(v1270 & 0x7FFFFFFFFFFFFLL)
             + (unint64_t)v271 * (unsigned __int128)(19 * (v257 & 0x7FFFFFFFFFFFFuLL))
             + (v1341 & 0x7FFFFFFFFFFFFLL) * (unsigned __int128)(unint64_t)(19 * v275)
             + (v1279 & 0x7FFFFFFFFFFFFLL) * (unsigned __int128)(19 * v276)) >> 51);
      v278 = v280 >> 64;
      v279 = v280;
      v281 = (v1279 & 0x7FFFFFFFFFFFFLL) * (unsigned __int128)(unint64_t)(19 * v273)
           + (v1341 & 0x7FFFFFFFFFFFFLL) * (unsigned __int128)(19 * (v257 & 0x7FFFFFFFFFFFFuLL))
           + (unint64_t)v275 * (unsigned __int128)(v1359 & 0x7FFFFFFFFFFFFLL);
      v282 = v256 & 0x7FFFFFFFFFFFFLL;
      v283 = v281
           + (unint64_t)v271 * (unsigned __int128)(unint64_t)v274
           + v276 * (unsigned __int128)(v1270 & 0x7FFFFFFFFFFFFLL)
           + (__PAIR128__(v278, v279) >> 51);
      v284 = (unint64_t)v282 * (unsigned __int128)(v1270 & 0x7FFFFFFFFFFFFLL)
           + (v1341 & 0x7FFFFFFFFFFFFLL) * (unsigned __int128)(unint64_t)(19 * v273)
           + (v1279 & 0x7FFFFFFFFFFFFLL) * (unsigned __int128)(unint64_t)v274
           + (unint64_t)v271 * (unsigned __int128)(unint64_t)v275
           + v276 * (unsigned __int128)(v1359 & 0x7FFFFFFFFFFFFLL);
      v285 = (v1341 & 0x7FFFFFFFFFFFFLL) * (unsigned __int128)(unint64_t)v274
           + (v262 & 0x7FFFFFFFFFFFFLL) * (unsigned __int128)(v1270 & 0x7FFFFFFFFFFFFLL)
           + (unint64_t)v282 * (unsigned __int128)(v1359 & 0x7FFFFFFFFFFFFLL);
      v286 = v1371 & 0x7FFFFFFFFFFFFLL;
      v287 = v284 + (v283 >> 51);
      v288.i64[0] = v284 + (v283 >> 51);
      v288.i64[1] = v285 + (v1279 & 0x7FFFFFFFFFFFFLL) * v275 + v276 * v271 + (v287 >> 51);
      v289 = (v277 & 0x7FFFFFFFFFFFFLL)
           + 19
           * ((__int128)(v285
                       + (v1279 & 0x7FFFFFFFFFFFFLL) * (unsigned __int128)(unint64_t)v275
                       + v276 * (unsigned __int128)(unint64_t)v271
                       + (v287 >> 51)) >> 51);
      v290 = v289 & 0x7FFFFFFFFFFFFLL;
      v291 = (v279 & 0x7FFFFFFFFFFFFLL) + (v289 >> 51);
      v292 = v291 & 0x7FFFFFFFFFFFFLL;
      v293 = (v283 & 0x7FFFFFFFFFFFFLL) + (v291 >> 51);
      v12 = v1335;
      *v1335 = v290;
      v1335[1] = v292;
      v294 = (v1270 & 0x7FFFFFFFFFFFFLL) + 0x3FFFFFFFFFFF68 - v274;
      v295 = (v1359 & 0x7FFFFFFFFFFFFLL) - v275 + 0x3FFFFFFFFFFFF8;
      v296 = v271 - v276 + 0x3FFFFFFFFFFFF8;
      v297 = (v1371 & 0x7FFFFFFFFFFFFLL) - v272 + 0x3FFFFFFFFFFFF8;
      v298 = (v1348 & 0x7FFFFFFFFFFFFLL) - v273 + 0x3FFFFFFFFFFFF8;
      v299 = (__int128)((unint64_t)v294 * (unsigned __int128)0x1DB41uLL) >> 51;
      v76 = __CFADD__(121665 * v295, v299);
      v300 = 121665 * v295 + v299;
      if (v76)
        v301 = (((unint64_t)v295 * (unsigned __int128)0x1DB41uLL) >> 64) + 1;
      else
        v301 = ((unint64_t)v295 * (unsigned __int128)0x1DB41uLL) >> 64;
      *((_QWORD *)&v303 + 1) = v301;
      *(_QWORD *)&v303 = v300;
      v302 = v303 >> 51;
      v76 = __CFADD__(v302, 121665 * v296);
      v304 = v302 + 121665 * v296;
      if (v76)
        v305 = (((unint64_t)v296 * (unsigned __int128)0x1DB41uLL) >> 64) + 1;
      else
        v305 = ((unint64_t)v296 * (unsigned __int128)0x1DB41uLL) >> 64;
      *((_QWORD *)&v307 + 1) = v305;
      *(_QWORD *)&v307 = v304;
      v306 = v307 >> 51;
      v76 = __CFADD__(v306, 121665 * v297);
      v308 = v306 + 121665 * v297;
      if (v76)
        v309 = (((unint64_t)v297 * (unsigned __int128)0x1DB41uLL) >> 64) + 1;
      else
        v309 = ((unint64_t)v297 * (unsigned __int128)0x1DB41uLL) >> 64;
      v310 = v308 & 0x7FFFFFFFFFFFFLL;
      *((_QWORD *)&v312 + 1) = v309;
      *(_QWORD *)&v312 = v308;
      v311 = v312 >> 51;
      v76 = __CFADD__(v311, 121665 * v298);
      v313 = v311 + 121665 * v298;
      if (v76)
        v314 = (((unint64_t)v298 * (unsigned __int128)0x1DB41uLL) >> 64) + 1;
      else
        v314 = ((unint64_t)v298 * (unsigned __int128)0x1DB41uLL) >> 64;
      *((_QWORD *)&v315 + 1) = v314;
      *(_QWORD *)&v315 = v313;
      v316 = ((121665 * v294) & 0x7FFFFFFFFFFFFLL) + (v1270 & 0x7FFFFFFFFFFFFLL) + 19 * (v315 >> 51);
      v317 = *((_QWORD *)&v283 + 1) + (v1359 & 0x7FFFFFFFFFFFFLL);
      v318 = (v313 & 0x7FFFFFFFFFFFFLL) + (v1348 & 0x7FFFFFFFFFFFFLL);
      v321 = (unint64_t)(19 * (*((_QWORD *)&v281 + 1) + v271)) * (unsigned __int128)(unint64_t)v298
           + (unint64_t)v317 * (unsigned __int128)(unint64_t)v294
           + (unint64_t)(19 * (v310 + v286)) * (unsigned __int128)(unint64_t)v297
           + (unint64_t)(19 * v318) * (unsigned __int128)(unint64_t)v296
           + v316 * (unsigned __int128)(unint64_t)v295
           + (((unint64_t)(19 * (*((_QWORD *)&v281 + 1) + v271)) * (unsigned __int128)(unint64_t)v297
             + (unint64_t)(19 * v317) * (unsigned __int128)(unint64_t)v298
             + (unint64_t)(19 * (v310 + v286)) * (unsigned __int128)(unint64_t)v296
             + (unint64_t)(19 * v318) * (unsigned __int128)(unint64_t)v295
             + v316 * (unsigned __int128)(unint64_t)v294) >> 51);
      v320 = v321 >> 64;
      v319 = v321;
      v324 = (unint64_t)(*((_QWORD *)&v281 + 1) + v271) * (unsigned __int128)(unint64_t)v294
           + (unint64_t)v317 * (unsigned __int128)(unint64_t)v295
           + (unint64_t)(19 * (v310 + v286)) * (unsigned __int128)(unint64_t)v298
           + (unint64_t)(19 * v318) * (unsigned __int128)(unint64_t)v297
           + v316 * (unsigned __int128)(unint64_t)v296
           + (__PAIR128__(v320, v319) >> 51);
      v323 = v324 >> 64;
      v322 = v324;
      v325 = (unint64_t)(*((_QWORD *)&v281 + 1) + v271) * (unsigned __int128)(unint64_t)v295
           + (unint64_t)v317 * (unsigned __int128)(unint64_t)v296
           + (unint64_t)(v310 + v286) * (unsigned __int128)(unint64_t)v294
           + (unint64_t)(19 * v318) * (unsigned __int128)(unint64_t)v298
           + v316 * (unsigned __int128)(unint64_t)v297;
      *((_QWORD *)&v315 + 1) = (v325 + (__PAIR128__(v323, v322) >> 51)) >> 64;
      *(_QWORD *)&v315 = v325 + ((__int128)__PAIR128__(v323, v322) >> 51);
      v326.i64[0] = v315;
      v326.i64[1] = (*((_QWORD *)&v281 + 1) + v271) * v296
                  + v317 * v297
                  + (v310 + v286) * v295
                  + v318 * v294
                  + v316 * v298
                  + ((unsigned __int128)v315 >> 51);
      v1335[2] = v293;
      v327 = ((19 * (*((_QWORD *)&v281 + 1) + v271) * v297
             + 19 * v317 * v298
             + 19 * (v310 + v286) * v296
             + 19 * v318 * v295
             + v316 * v294) & 0x7FFFFFFFFFFFFLL)
           + 19
           * ((__int128)((unint64_t)(*((_QWORD *)&v281 + 1) + v271) * (unsigned __int128)(unint64_t)v296
                       + (unint64_t)v317 * (unsigned __int128)(unint64_t)v297
                       + (unint64_t)(v310 + v286) * (unsigned __int128)(unint64_t)v295
                       + (unint64_t)v318 * (unsigned __int128)(unint64_t)v294
                       + v316 * (unsigned __int128)(unint64_t)v298
                       + ((unsigned __int128)v315 >> 51)) >> 51);
      v328 = (v319 & 0x7FFFFFFFFFFFFLL) + (v327 >> 51);
      v13 = v1330;
      *v1330 = v327 & 0x7FFFFFFFFFFFFLL;
      v1330[1] = v328 & 0x7FFFFFFFFFFFFLL;
      v1330[2] = (v322 & 0x7FFFFFFFFFFFFLL) + (v328 >> 51);
      *(int8x16_t *)(v1325 + 3) = vandq_s8(v207, v19);
      *(int8x16_t *)(v1335 + 3) = vandq_s8((int8x16_t)v288, v19);
      *(int8x16_t *)(v1330 + 3) = vandq_s8(v326, v19);
      do
      {
        v329 = v1335[v40];
        v330 = v1374[v40];
        v331 = (v330 ^ v329) & v1304;
        v1335[v40] = v331 ^ v329;
        v1374[v40++] = v331 ^ v330;
      }
      while (v40 != 5);
      for (j = 0; j != 5; ++j)
      {
        v333 = v1330[j];
        v334 = v1325[j];
        v335 = (v334 ^ v333) & v1304;
        v1330[j] = v335 ^ v333;
        v1325[j] = v335 ^ v334;
      }
      v21 = 2 * v1307;
      v20 = v1309 + 1;
      v22 = v1374;
      v23 = v17;
      v16 = v27;
      v24 = v27;
      v15 = v1316;
      v14 = v1320;
      v25 = v1316;
    }
    while (v1309 != 7);
    v3 = v1218 + 1;
  }
  while (v1218 != 31);
  v337 = v1330[3];
  v336 = v1330[4];
  v338 = 19 * v336;
  v340 = *v1330;
  v339 = v1330[1];
  v341 = v1330[2];
  v342 = 2 * *v1330;
  v1305 = *v1335;
  v1308 = v1335[1];
  v343 = v339 * v339;
  v344 = 38 * v336;
  v345 = (__int128)(v337 * (unsigned __int128)(38 * v341)
                  + (unint64_t)v340 * (unsigned __int128)(unint64_t)v340
                  + 38 * v336 * (unsigned __int128)v339) >> 51;
  v1260 = 19 * v337;
  v346 = v342 * v339;
  v347 = (19 * v337 * (unsigned __int128)v337
        + v339 * (unsigned __int128)(unint64_t)v342
        + 38 * v336 * (unsigned __int128)v341) >> 64;
  v348 = 19 * v337 * v337 + v339 * v342 + 38 * v336 * v341;
  if (__CFADD__(v348, v345))
    ++v347;
  *((_QWORD *)&v350 + 1) = v347;
  *(_QWORD *)&v350 = v348 + v345;
  v349 = v350 >> 51;
  v351 = v342 * v341;
  v352 = ((unint64_t)v344 * (unsigned __int128)v337) >> 64;
  v353 = v344 * v337;
  v354 = (v341 * (unsigned __int128)(unint64_t)v342 + v339 * (unsigned __int128)v339 + __PAIR128__(v352, v353)) >> 64;
  if (__CFADD__(v342 * v341 + v343 + v353, v349))
    ++v354;
  *((_QWORD *)&v356 + 1) = v354;
  *(_QWORD *)&v356 = v341 * v342 + v339 * v339 + v353 + v349;
  v355 = v356 >> 51;
  v357 = v337 * (unsigned __int128)(unint64_t)v342 + v341 * (unsigned __int128)(2 * v339);
  v1310 = 19 * v336;
  v360 = v357 + 19 * v336 * (unsigned __int128)v336;
  v358 = v360 >> 64;
  v359 = v360;
  if (__CFADD__(v357 + v338 * v336, v355))
    ++v358;
  v1301 = v1335[2];
  v1303 = v1335[3];
  *((_QWORD *)&v364 + 1) = v358;
  *(_QWORD *)&v364 = v359 + v355;
  v363 = v364 >> 51;
  v362 = v337 * (unsigned __int128)(2 * v339)
       + v341 * (unsigned __int128)v341
       + v336 * (unsigned __int128)(unint64_t)v342;
  v361 = *((_QWORD *)&v362 + 1);
  if (__CFADD__((_QWORD)v362, v363))
    v361 = *((_QWORD *)&v362 + 1) + 1;
  v1271 = v362 + v363;
  v1276 = v357 + v338 * v336 + v355;
  *((_QWORD *)&v365 + 1) = v361;
  *(_QWORD *)&v365 = v362 + v363;
  v366 = v340 * v340 + 38 * (v337 * v341 + v336 * v339);
  v367 = 19 * (v365 >> 51);
  v368 = v367 + v366;
  v369 = v367 + (v366 & 0x7FFFFFFFFFFFFLL);
  v1349 = *v1330;
  v1360 = v1330[2];
  v1280 = v341 * v339 + v337 * v340;
  v1288 = v355;
  v1321 = v1330[1];
  v1326 = v1330[4];
  v1331 = v1330[3];
  v1263 = v363;
  v1267 = v341 * v341;
  v1255 = v337 * v339 + v336 * v340;
  v370 = 19 * v337 * v337 + v346 + 38 * v336 * v341 + v345;
  v1249 = v351 + v343 + v353 + v349;
  v1251 = (v370 & 0x7FFFFFFFFFFFFLL) + (v369 >> 51);
  v1282 = v341 * v341 + 2 * v1255 + v363;
  v1284 = v338 * v336 + 2 * v1280 + v355;
  v371 = v1282 & 0x7FFFFFFFFFFFFLL;
  v372 = v368 & 0x7FFFFFFFFFFFFLL;
  v373 = (v370 + (v369 >> 51)) & 0x7FFFFFFFFFFFFLL;
  v374 = (v1249 & 0x7FFFFFFFFFFFFLL) + (v1251 >> 51);
  v375 = -2;
  v1293 = v373;
  v1299 = v1335[4];
  v1336 = v1284 & 0x7FFFFFFFFFFFFLL;
  v1342 = v368 & 0x7FFFFFFFFFFFFLL;
  v1317 = v374;
  v376 = v1284 & 0x7FFFFFFFFFFFFLL;
  v1258 = v1282 & 0x7FFFFFFFFFFFFLL;
  do
  {
    v377 = v371;
    v378 = v376;
    v379 = v374;
    v380 = v373;
    v381 = v372;
    v382 = 2 * v372;
    v383 = 2 * v373;
    v384 = 38 * v374;
    v385 = 38 * v371;
    v386 = v372 * v372;
    v387 = (unint64_t)(38 * v374) * (unsigned __int128)(unint64_t)v376
         + (unint64_t)v372 * (unsigned __int128)(unint64_t)v372;
    v1375 = 38 * v374 * v376 + v372 * v372;
    v389 = (v387 + (unint64_t)(38 * v371) * (unsigned __int128)(unint64_t)v373) >> 64;
    v388 = v387 + 38 * v371 * v373;
    v390 = ((unint64_t)v382 * (unsigned __int128)(unint64_t)v373) >> 64;
    v391 = 38 * v371 * v374;
    v392 = 19 * v376;
    v393 = ((unint64_t)v373 * (unsigned __int128)(unint64_t)v373) >> 64;
    v394 = v373 * v373;
    v397 = (unint64_t)v374 * (unsigned __int128)(unint64_t)v382
         + (unint64_t)v373 * (unsigned __int128)(unint64_t)v373
         + (unint64_t)(38 * v371) * (unsigned __int128)(unint64_t)v376;
    v396 = v397 >> 64;
    v395 = v397;
    v398 = 2 * v373 * v379;
    v399 = ((unint64_t)v376 * (unsigned __int128)(unint64_t)v382
          + (unint64_t)(2 * v373) * (unsigned __int128)(unint64_t)v379
          + (unint64_t)(19 * v371) * (unsigned __int128)(unint64_t)v371) >> 64;
    v400 = v376 * v382 + v398 + 19 * v371 * v371;
    v1365 = v382 * v373;
    v403 = (unint64_t)(19 * v376) * (unsigned __int128)(unint64_t)v376
         + (unint64_t)v382 * (unsigned __int128)(unint64_t)v373
         + __PAIR128__(((unint64_t)v385 * (unsigned __int128)(unint64_t)v379) >> 64, v391);
    v402 = v403 >> 64;
    v401 = v403;
    v404 = (__int128)__PAIR128__(v389, v388) >> 51;
    v76 = __CFADD__(v401, v404);
    v405 = v401 + v404;
    if (v76)
      ++v402;
    *((_QWORD *)&v407 + 1) = v402;
    *(_QWORD *)&v407 = v405;
    v406 = v407 >> 51;
    v76 = __CFADD__(v395, v406);
    v408 = v395 + v406;
    if (v76)
      ++v396;
    *((_QWORD *)&v410 + 1) = v396;
    *(_QWORD *)&v410 = v408;
    v409 = v410 >> 51;
    v76 = __CFADD__(v400, v409);
    v411 = v400 + v409;
    if (v76)
      ++v399;
    v415 = v405 & 0x7FFFFFFFFFFFFLL;
    v416 = v408 & 0x7FFFFFFFFFFFFLL;
    *((_QWORD *)&v418 + 1) = v399;
    *(_QWORD *)&v418 = v411;
    v417 = v418 >> 51;
    v376 = v411 & 0x7FFFFFFFFFFFFLL;
    v414 = (unint64_t)v378 * (unsigned __int128)(unint64_t)v383
         + (unint64_t)v379 * (unsigned __int128)(unint64_t)v379
         + (unint64_t)v377 * (unsigned __int128)(unint64_t)v382;
    v413 = v414 >> 64;
    v412 = v414;
    if (__CFADD__(v412, v417))
      ++v413;
    v371 = (v412 + v417) & 0x7FFFFFFFFFFFFLL;
    *((_QWORD *)&v420 + 1) = v413;
    *(_QWORD *)&v420 = v412 + v417;
    v419 = v420 >> 51;
    v421 = 19 * v419 + (v388 & 0x7FFFFFFFFFFFFLL);
    v422 = v415 + (v421 >> 51);
    v372 = v421 & 0x7FFFFFFFFFFFFLL;
    v374 = v416 + (v422 >> 51);
    v373 = v422 & 0x7FFFFFFFFFFFFLL;
    v76 = __CFADD__(v375++, 1);
  }
  while (!v76);
  v1242 = v379 * v379 + v383 * v378;
  v1268 = v1267 + 2 * v1255 + v1263;
  v1256 = v386 + v384 * v378;
  v1264 = v1249 + (v1251 >> 51);
  v423 = (unint64_t)v371 * (unsigned __int128)(19 * v1321)
       + (unint64_t)v376 * (unsigned __int128)(19 * v1360)
       + (unint64_t)v372 * (unsigned __int128)(unint64_t)v1349
       + (unint64_t)v373 * (unsigned __int128)(unint64_t)v1310;
  v1247 = 19 * v1360;
  v424 = (unint64_t)v371 * (unsigned __int128)(19 * v1360)
       + (unint64_t)v376 * (unsigned __int128)(unint64_t)v1260
       + (unint64_t)v372 * (unsigned __int128)v1321
       + (unint64_t)v373 * (unsigned __int128)(unint64_t)v1349
       + (unint64_t)v374 * (unsigned __int128)(unint64_t)v1310;
  v1252 = (__int128)(v423 + (unint64_t)v374 * (unsigned __int128)(unint64_t)v1260) >> 51;
  if (__CFADD__((_QWORD)v424, v1252))
    v425 = *((_QWORD *)&v424 + 1) + 1;
  else
    v425 = ((unint64_t)v371 * (unsigned __int128)(19 * v1360)
          + (unint64_t)v376 * (unsigned __int128)(unint64_t)v1260
          + (unint64_t)v372 * (unsigned __int128)v1321
          + (unint64_t)v373 * (unsigned __int128)(unint64_t)v1349
          + (unint64_t)v374 * (unsigned __int128)(unint64_t)v1310) >> 64;
  v426 = (unint64_t)v371 * (unsigned __int128)(unint64_t)v1260
       + (unint64_t)v376 * (unsigned __int128)(unint64_t)v1310
       + (unint64_t)v372 * (unsigned __int128)v1360
       + (unint64_t)v373 * (unsigned __int128)v1321
       + (unint64_t)v374 * (unsigned __int128)(unint64_t)v1349;
  *((_QWORD *)&v427 + 1) = v425;
  *(_QWORD *)&v427 = v424 + v1252;
  v1250 = v427 >> 51;
  if (__CFADD__((_QWORD)v426, v1250))
    v428 = *((_QWORD *)&v426 + 1) + 1;
  else
    v428 = ((unint64_t)v371 * (unsigned __int128)(unint64_t)v1260
          + (unint64_t)v376 * (unsigned __int128)(unint64_t)v1310
          + (unint64_t)v372 * (unsigned __int128)v1360
          + (unint64_t)v373 * (unsigned __int128)v1321
          + (unint64_t)v374 * (unsigned __int128)(unint64_t)v1349) >> 64;
  v429 = (unint64_t)v371 * (unsigned __int128)(unint64_t)v1310
       + (unint64_t)v376 * (unsigned __int128)(unint64_t)v1349
       + (unint64_t)v372 * (unsigned __int128)v1331
       + (unint64_t)v373 * (unsigned __int128)v1360
       + (unint64_t)v374 * (unsigned __int128)v1321;
  *((_QWORD *)&v430 + 1) = v428;
  *(_QWORD *)&v430 = v426 + v1250;
  v1244 = v430 >> 51;
  v431 = v429 + v1244;
  if (__CFADD__((_QWORD)v429, v1244))
    v432 = *((_QWORD *)&v429 + 1) + 1;
  else
    v432 = ((unint64_t)v371 * (unsigned __int128)(unint64_t)v1310
          + (unint64_t)v376 * (unsigned __int128)(unint64_t)v1349
          + (unint64_t)v372 * (unsigned __int128)v1331
          + (unint64_t)v373 * (unsigned __int128)v1360
          + (unint64_t)v374 * (unsigned __int128)v1321) >> 64;
  v433 = (unint64_t)v371 * (unsigned __int128)(unint64_t)v1349
       + (unint64_t)v376 * (unsigned __int128)v1321
       + (unint64_t)v372 * (unsigned __int128)v1326
       + (unint64_t)v373 * (unsigned __int128)v1331
       + (unint64_t)v374 * (unsigned __int128)v1360;
  *((_QWORD *)&v434 + 1) = v432;
  *(_QWORD *)&v434 = v429 + v1244;
  v1241 = v434 >> 51;
  v435 = v433 + v1241;
  if (__CFADD__((_QWORD)v433, v1241))
    v436 = *((_QWORD *)&v433 + 1) + 1;
  else
    v436 = ((unint64_t)v371 * (unsigned __int128)(unint64_t)v1349
          + (unint64_t)v376 * (unsigned __int128)v1321
          + (unint64_t)v372 * (unsigned __int128)v1326
          + (unint64_t)v373 * (unsigned __int128)v1331
          + (unint64_t)v374 * (unsigned __int128)v1360) >> 64;
  *((_QWORD *)&v437 + 1) = v436;
  *(_QWORD *)&v437 = v433 + v1241;
  v1235 = v437 >> 51;
  v438 = v435 & 0x7FFFFFFFFFFFFLL;
  v1311 = v431 & 0x7FFFFFFFFFFFFLL;
  v439 = ((v423 + v374 * v1260) & 0x7FFFFFFFFFFFFLL) + 19 * v1235;
  v440 = v439 & 0x7FFFFFFFFFFFFLL;
  v1238 = ((v424 + v1252) & 0x7FFFFFFFFFFFFLL) + (v439 >> 51);
  v1239 = v439;
  v441 = 19 * v1258;
  v442 = v1238 & 0x7FFFFFFFFFFFFLL;
  v443 = (v435 & 0x7FFFFFFFFFFFFLL) * (unsigned __int128)(unint64_t)(19 * v1293)
       + (v431 & 0x7FFFFFFFFFFFFLL) * (unsigned __int128)(unint64_t)(19 * v1317)
       + (v439 & 0x7FFFFFFFFFFFFLL) * (unsigned __int128)(unint64_t)v1342
       + (v1238 & 0x7FFFFFFFFFFFFLL) * (unsigned __int128)(unint64_t)(19 * v1258);
  v444 = ((v426 + v1250) & 0x7FFFFFFFFFFFFLL) + (v1238 >> 51);
  v1233 = v443 + v444 * 19 * v1336;
  v445 = (v435 & 0x7FFFFFFFFFFFFLL) * (unsigned __int128)(unint64_t)(19 * v1317)
       + (unint64_t)v1311 * (unsigned __int128)(unint64_t)(19 * v1336)
       + (v439 & 0x7FFFFFFFFFFFFLL) * (unsigned __int128)(unint64_t)v1293
       + (v1238 & 0x7FFFFFFFFFFFFLL) * (unsigned __int128)(unint64_t)v1342
       + (unint64_t)v444 * (unsigned __int128)(unint64_t)(19 * v1258);
  v1236 = (__int128)(v443 + (unint64_t)v444 * (unsigned __int128)(unint64_t)(19 * v1336)) >> 51;
  if (__CFADD__((_QWORD)v445, v1236))
    v446 = *((_QWORD *)&v445 + 1) + 1;
  else
    v446 = ((v435 & 0x7FFFFFFFFFFFFLL) * (unsigned __int128)(unint64_t)(19 * v1317)
          + (unint64_t)v1311 * (unsigned __int128)(unint64_t)(19 * v1336)
          + (v439 & 0x7FFFFFFFFFFFFLL) * (unsigned __int128)(unint64_t)v1293
          + (v1238 & 0x7FFFFFFFFFFFFLL) * (unsigned __int128)(unint64_t)v1342
          + (unint64_t)v444 * (unsigned __int128)(unint64_t)(19 * v1258)) >> 64;
  v447 = ((v426 + v1250) & 0x7FFFFFFFFFFFFLL) + (v1238 >> 51);
  v448 = (unint64_t)v438 * (unsigned __int128)(unint64_t)(19 * v1336)
       + (unint64_t)v1311 * (unsigned __int128)(unint64_t)v441
       + (unint64_t)v440 * (unsigned __int128)(unint64_t)v1317
       + (unint64_t)v442 * (unsigned __int128)(unint64_t)v1293
       + (unint64_t)v444 * (unsigned __int128)(unint64_t)v1342;
  *((_QWORD *)&v449 + 1) = v446;
  *(_QWORD *)&v449 = v445 + v1236;
  v1246 = v449 >> 51;
  if (__CFADD__((_QWORD)v448, v1246))
    v450 = *((_QWORD *)&v448 + 1) + 1;
  else
    v450 = ((unint64_t)v438 * (unsigned __int128)(unint64_t)(19 * v1336)
          + (unint64_t)v1311 * (unsigned __int128)(unint64_t)v441
          + (unint64_t)v440 * (unsigned __int128)(unint64_t)v1317
          + (unint64_t)v442 * (unsigned __int128)(unint64_t)v1293
          + (unint64_t)v444 * (unsigned __int128)(unint64_t)v1342) >> 64;
  v451 = v1276 & 0x7FFFFFFFFFFFFLL;
  v452 = (unint64_t)v438 * (unsigned __int128)(unint64_t)v441
       + (unint64_t)v1311 * (unsigned __int128)(unint64_t)v1342
       + (v1276 & 0x7FFFFFFFFFFFFLL) * (unsigned __int128)(unint64_t)v440;
  *((_QWORD *)&v455 + 1) = v450;
  *(_QWORD *)&v455 = v448 + v1246;
  v1277 = v455 >> 51;
  v453 = (v452
        + (unint64_t)v442 * (unsigned __int128)(unint64_t)v1317
        + (unint64_t)v447 * (unsigned __int128)(unint64_t)v1293) >> 64;
  v454 = v452 + v442 * v1317 + v447 * v1293;
  v1337 = v454 + v1277;
  if (__CFADD__(v454, v1277))
    ++v453;
  v1230 = v453;
  v1231 = v439 & 0x7FFFFFFFFFFFFLL;
  v1259 = v1238 & 0x7FFFFFFFFFFFFLL;
  v456 = (unint64_t)v438 * (unsigned __int128)(unint64_t)v1342
       + (unint64_t)v1311 * (unsigned __int128)(unint64_t)v1293
       + (v1271 & 0x7FFFFFFFFFFFFLL) * (unsigned __int128)(unint64_t)v440
       + (unint64_t)v451 * (unsigned __int128)(unint64_t)v442
       + (unint64_t)v447 * (unsigned __int128)(unint64_t)v1317;
  v457 = v1242 + v382 * v377 + v417;
  v458 = v378 * v378;
  v1318 = ((unint64_t)v378 * (unsigned __int128)(unint64_t)v378 * 0x13) >> 64;
  v459 = v381 >> 63;
  v460 = (__PAIR128__(v459, v382) * (unint64_t)v379) >> 64;
  v461 = v390 + v459 * v380;
  v1272 = ((unint64_t)v377 * (unsigned __int128)0x26uLL * (unint64_t)v378) >> 64;
  v462 = ((unint64_t)v377 * (unsigned __int128)0x26uLL * (unint64_t)v379) >> 64;
  v463 = ((unint64_t)v377 * (unsigned __int128)0x26uLL * (unint64_t)v380) >> 64;
  v464 = v1256 + v385 * v380;
  v465 = v1365 + v392 * v378 + v385 * v379;
  v466 = v394 + v379 * v382 + v385 * v378;
  v467 = v398 + v382 * v378;
  v468 = 38 * v377 * v378;
  v469 = v382 * v379;
  v470 = 38 * v377 * v379;
  v471 = 38 * v377 * v380;
  *((_QWORD *)&v473 + 1) = v1230;
  *(_QWORD *)&v473 = v1337;
  v472 = v473 >> 51;
  if (__CFADD__((_QWORD)v456, v472))
    v474 = *((_QWORD *)&v456 + 1) + 1;
  else
    v474 = *((_QWORD *)&v456 + 1);
  *((_QWORD *)&v476 + 1) = v463 + __CFADD__(v1375, v471) + *((_QWORD *)&v387 + 1);
  *(_QWORD *)&v476 = v1375 + v471;
  v475 = v476 >> 51;
  v478 = 19 * v458 + v1365 + v470;
  v477 = (__PAIR128__(v1318, 19 * v458) + __PAIR128__(v461, v1365) + __PAIR128__(v462, v470)) >> 64;
  if (__CFADD__(v478, v475))
    ++v477;
  *((_QWORD *)&v480 + 1) = v477;
  *(_QWORD *)&v480 = v478 + v475;
  v479 = v480 >> 51;
  v482 = v469 + v394 + v468;
  v481 = (__PAIR128__(v393 + (unint64_t)__CFADD__(v469, v394) + v460, v469 + v394) + __PAIR128__(v1272, v468)) >> 64;
  if (__CFADD__(v482, v479))
    ++v481;
  *((_QWORD *)&v483 + 1) = v481;
  *(_QWORD *)&v483 = v482 + v479;
  v484 = v467 + 19 * v377 * v377 + (v483 >> 51);
  v485 = 19 * v419 + (v464 & 0x7FFFFFFFFFFFFLL);
  v486 = v465 + v475;
  v487 = v466 + v479 + (((v486 & 0x7FFFFFFFFFFFFLL) + (v485 >> 51)) >> 51);
  v488 = v486 + (v485 >> 51);
  v489 = v464 + 19 * v419;
  v490 = v484 * v1247 + v489 * v1349 + v488 * 19 * v1326 + v487 * 19 * v1331 + 19 * (v1235 + v457 * v1321);
  v491 = v484 * 19 * v1331 + v457 * v1247 + v489 * v1321 + v488 * v1349;
  v492 = v484 * 19 * v1326 + v457 * 19 * v1331 + v489 * v1360 + v488 * v1321 + v487 * v1349;
  v493 = v484 * v1349;
  v494 = v484 * v1321 + v457 * v1349 + v489 * v1326 + v488 * v1331;
  v495 = v493 + v457 * 19 * v1326 + v489 * v1331 + v488 * v1360 + v487 * v1321;
  v496 = v494 + v487 * v1360;
  v497 = v491 + v487 * 19 * v1326;
  v498 = 19 * v1326 * v1326 + 2 * v1280 + v1288;
  v499 = v497 + v1252 + (v1239 >> 51);
  v500 = v492 + v1250 + (v1238 >> 51);
  v1372 = v456 + v472;
  *((_QWORD *)&v483 + 1) = v474;
  *(_QWORD *)&v483 = v456 + v472;
  v501 = v483 >> 51;
  v502 = (v1233 & 0x7FFFFFFFFFFFFLL) + 19 * v501;
  v503 = ((v445 + v1236) & 0x7FFFFFFFFFFFFLL) + (v502 >> 51);
  v504 = ((v448 + v1246) & 0x7FFFFFFFFFFFFLL) + (v503 >> 51);
  v505 = v496 + v1241;
  v1350 = (v495 + v1244) * v1293 + v505 * v1342 + v490 * v1268 + v499 * v498 + v500 * v1264 + v472;
  v506 = (v495 + v1244) * v1342 + v505 * 19 * v1282 + v490 * v498 + v499 * v1264 + v500 * v1293 + v1277;
  v507 = (v495 + v1244) * 19 * v1264 + v490 * v1342 + v499 * 19 * v1282 + v500 * 19 * v1284 + 19 * (v501 + v505 * v1293);
  v1361 = v502;
  v508 = (v495 + v1244) * 19 * v1284
       + v505 * 19 * v1264
       + v490 * v1293
       + v499 * v1342
       + v500 * 19 * v1282
       + v1236
       + (v502 >> 51);
  v509 = 38 * (v1350 & 0x7FFFFFFFFFFFFLL);
  v510 = (unint64_t)v509 * (unsigned __int128)(v508 & 0x7FFFFFFFFFFFFLL)
       + (v507 & 0x7FFFFFFFFFFFFLL) * (unsigned __int128)(v507 & 0x7FFFFFFFFFFFFLL)
       + (v506 & 0x7FFFFFFFFFFFFLL) * (unsigned __int128)(unint64_t)v504 * 0x26;
  v511 = 2 * (v507 & 0x7FFFFFFFFFFFFLL);
  v512 = v510 >> 51;
  v513 = (v508 & 0x7FFFFFFFFFFFFLL) * (unsigned __int128)(v508 & 0x7FFFFFFFFFFFFLL)
       + (unint64_t)v509 * (unsigned __int128)(v506 & 0x7FFFFFFFFFFFFLL)
       + (unint64_t)v511 * (unsigned __int128)(unint64_t)v504;
  *((_QWORD *)&v483 + 1) = ((unint64_t)v511 * (unsigned __int128)(v508 & 0x7FFFFFFFFFFFFLL)
                          + (v506 & 0x7FFFFFFFFFFFFLL) * (unsigned __int128)(v506 & 0x7FFFFFFFFFFFFLL) * 0x13
                          + (unint64_t)v509 * (unsigned __int128)(unint64_t)v504
                          + ((unsigned __int128)v510 >> 51)) >> 64;
  *(_QWORD *)&v483 = v511 * (v508 & 0x7FFFFFFFFFFFFLL)
                   + 19 * (v506 & 0x7FFFFFFFFFFFFLL) * (v506 & 0x7FFFFFFFFFFFFLL)
                   + v509 * v504
                   + v512;
  v514 = v483 >> 51;
  v515 = 2 * (v506 & 0x7FFFFFFFFFFFFLL);
  *((_QWORD *)&v483 + 1) = (v513 + ((unsigned __int128)v483 >> 51)) >> 64;
  *(_QWORD *)&v483 = v513 + v514;
  v516 = (unint64_t)v515 * (unsigned __int128)(v507 & 0x7FFFFFFFFFFFFLL)
       + (v1350 & 0x7FFFFFFFFFFFFLL) * (unsigned __int128)(v1350 & 0x7FFFFFFFFFFFFLL) * 0x13
       + (v508 & 0x7FFFFFFFFFFFFLL) * (unsigned __int128)(unint64_t)v504 * 2
       + ((unsigned __int128)v483 >> 51);
  v517 = (v1350 & 0x7FFFFFFFFFFFFLL) * (unsigned __int128)(v507 & 0x7FFFFFFFFFFFFLL);
  v1376 = v504;
  *((_QWORD *)&v517 + 1) = ((unint64_t)v515 * (unsigned __int128)(v508 & 0x7FFFFFFFFFFFFLL)
                          + v517 * 2
                          + (unint64_t)v504 * (unsigned __int128)(unint64_t)v504
                          + ((unsigned __int128)v516 >> 51)) >> 64;
  *(_QWORD *)&v517 = v515 * (v508 & 0x7FFFFFFFFFFFFLL) + 2 * v517 + v504 * v504 + (v516 >> 51);
  v1366 = v503;
  v518 = (v495 + v1244) * 19 * v1282
       + v505 * 19 * v1284
       + v490 * v1264
       + v499 * v1293
       + v500 * v1342
       + v1246
       + (v503 >> 51);
  v519 = v507 * v507 + v508 * 38 * v1350 + 38 * v506 * v518;
  v520 = 19 * (v517 >> 51);
  v521 = v520 + v519;
  v522 = 19 * v506 * v506 + v508 * 2 * v507 + v518 * 38 * v1350 + v512;
  v523 = v520 + (v519 & 0x7FFFFFFFFFFFFLL);
  v524 = v522 + (v523 >> 51);
  v525 = ((38 * v1350 * v506 + v508 * v508 + v518 * 2 * v507 + v514) & 0x7FFFFFFFFFFFFLL)
       + (((v522 & 0x7FFFFFFFFFFFFLL) + (v523 >> 51)) >> 51);
  v526 = (v517 & 0x7FFFFFFFFFFFFLL) * (unint64_t)(19 * v1259)
       + (v516 & 0x7FFFFFFFFFFFFLL) * (unint64_t)(19 * v447)
       + (v521 & 0x7FFFFFFFFFFFFLL) * (unsigned __int128)(unint64_t)v1231
       + (v524 & 0x7FFFFFFFFFFFFLL) * (unsigned __int128)(unint64_t)(19 * v438)
       + v525 * (unsigned __int128)(unint64_t)(19 * v1311);
  v527 = (v517 & 0x7FFFFFFFFFFFFLL) * (unint64_t)(19 * v447)
       + (v516 & 0x7FFFFFFFFFFFFLL) * (unint64_t)(19 * v1311)
       + (v521 & 0x7FFFFFFFFFFFFLL) * (unsigned __int128)(unint64_t)v1259
       + (v524 & 0x7FFFFFFFFFFFFLL) * (unsigned __int128)(unint64_t)v1231
       + v525 * (unsigned __int128)(unint64_t)(19 * v438);
  v528 = (v517 & 0x7FFFFFFFFFFFFLL) * (unint64_t)(19 * v1311)
       + (v516 & 0x7FFFFFFFFFFFFLL) * (unint64_t)(19 * v438)
       + (v521 & 0x7FFFFFFFFFFFFLL) * (unsigned __int128)(unint64_t)v447
       + (v524 & 0x7FFFFFFFFFFFFLL) * (unsigned __int128)(unint64_t)v1259
       + v525 * (unsigned __int128)(unint64_t)v1231
       + ((v527 + (v526 >> 51)) >> 51);
  v529 = (v517 & 0x7FFFFFFFFFFFFLL) * (unint64_t)(19 * v438)
       + (v516 & 0x7FFFFFFFFFFFFLL) * (unint64_t)v1231
       + (unint64_t)v1311 * (unsigned __int128)(v521 & 0x7FFFFFFFFFFFFLL)
       + (v524 & 0x7FFFFFFFFFFFFLL) * (unsigned __int128)(unint64_t)v447
       + v525 * (unsigned __int128)(unint64_t)v1259
       + (v528 >> 51);
  v530 = (v517 & 0x7FFFFFFFFFFFFLL) * (unint64_t)v1231
       + (v516 & 0x7FFFFFFFFFFFFLL) * (unint64_t)v1259
       + (unint64_t)v438 * (unsigned __int128)(v521 & 0x7FFFFFFFFFFFFLL)
       + (unint64_t)v1311 * (unsigned __int128)(v524 & 0x7FFFFFFFFFFFFLL)
       + v525 * (unsigned __int128)(unint64_t)v447
       + (v529 >> 51);
  v531 = v530 & 0x7FFFFFFFFFFFFLL;
  v532 = (v526 & 0x7FFFFFFFFFFFFLL) + 19 * (v530 >> 51);
  v533 = v532 & 0x7FFFFFFFFFFFFLL;
  v534 = ((v527 + (v526 >> 51)) & 0x7FFFFFFFFFFFFLL) + (v532 >> 51);
  v535 = v534 & 0x7FFFFFFFFFFFFLL;
  v536 = (v528 & 0x7FFFFFFFFFFFFLL) + (v534 >> 51);
  v537 = -5;
  v538 = v533;
  v539 = v535;
  v540 = v536;
  v1351 = v529 & 0x7FFFFFFFFFFFFLL;
  v541 = v529 & 0x7FFFFFFFFFFFFLL;
  v542 = v530 & 0x7FFFFFFFFFFFFLL;
  do
  {
    v543 = (unint64_t)(38 * v540) * (unsigned __int128)(unint64_t)v541
         + (unint64_t)v538 * (unsigned __int128)(unint64_t)v538
         + (unint64_t)(38 * v542) * (unsigned __int128)(unint64_t)v539;
    v544 = ((unint64_t)(2 * v538) * (unsigned __int128)(unint64_t)v539) >> 64;
    v545 = 2 * v538 * v539;
    v546 = ((unint64_t)(38 * v542) * (unsigned __int128)(unint64_t)v540) >> 64;
    v547 = 38 * v542 * v540;
    v548 = ((unint64_t)(19 * v541) * (unsigned __int128)(unint64_t)v541) >> 64;
    v549 = 19 * v541 * v541;
    v550 = (unint64_t)v540 * (unsigned __int128)(unint64_t)(2 * v538)
         + (unint64_t)v539 * (unsigned __int128)(unint64_t)v539
         + (unint64_t)(38 * v542) * (unsigned __int128)(unint64_t)v541;
    v551 = ((unint64_t)v541 * (unsigned __int128)(unint64_t)(2 * v538)
          + (unint64_t)(2 * v539) * (unsigned __int128)(unint64_t)v540
          + (unint64_t)(19 * v542) * (unsigned __int128)(unint64_t)v542) >> 64;
    v552 = v541 * 2 * v538 + 2 * v539 * v540 + 19 * v542 * v542;
    v553 = ((unint64_t)v542 * (unsigned __int128)(unint64_t)(2 * v538)) >> 64;
    v554 = v542 * 2 * v538;
    v555 = ((unint64_t)v541 * (unsigned __int128)(unint64_t)(2 * v539)) >> 64;
    v556 = v541 * 2 * v539;
    v557 = v543 >> 51;
    v558 = ((unint64_t)v540 * (unsigned __int128)(unint64_t)v540) >> 64;
    v560 = v549 + v545 + v547;
    v559 = (__PAIR128__(v544 + (unint64_t)__CFADD__(v549, v545) + v548, v549 + v545) + __PAIR128__(v546, v547)) >> 64;
    v561 = v540 * v540;
    v76 = __CFADD__(v560, v557);
    v562 = v560 + v557;
    if (v76)
      ++v559;
    v563 = v562 & 0x7FFFFFFFFFFFFLL;
    *((_QWORD *)&v565 + 1) = v559;
    *(_QWORD *)&v565 = v562;
    v564 = v565 >> 51;
    v76 = __CFADD__((_QWORD)v550, v564);
    v566 = v550 + v564;
    if (v76)
      v567 = *((_QWORD *)&v550 + 1) + 1;
    else
      v567 = *((_QWORD *)&v550 + 1);
    v568 = v566 & 0x7FFFFFFFFFFFFLL;
    *((_QWORD *)&v570 + 1) = v567;
    *(_QWORD *)&v570 = v566;
    v569 = v570 >> 51;
    v76 = __CFADD__(v552, v569);
    v571 = v552 + v569;
    if (v76)
      ++v551;
    v541 = v571 & 0x7FFFFFFFFFFFFLL;
    *((_QWORD *)&v573 + 1) = v551;
    *(_QWORD *)&v573 = v571;
    v572 = v573 >> 51;
    v575 = v556 + v561 + v554;
    v574 = (__PAIR128__(v555, v556) + __PAIR128__(v558, v561) + __PAIR128__(v553, v554)) >> 64;
    if (__CFADD__(v575, v572))
      ++v574;
    v542 = (v575 + v572) & 0x7FFFFFFFFFFFFLL;
    *((_QWORD *)&v576 + 1) = v574;
    *(_QWORD *)&v576 = v575 + v572;
    v577 = (v543 & 0x7FFFFFFFFFFFFLL) + 19 * (v576 >> 51);
    v538 = v577 & 0x7FFFFFFFFFFFFLL;
    v578 = v563 + (v577 >> 51);
    v539 = v578 & 0x7FFFFFFFFFFFFLL;
    v540 = v568 + (v578 >> 51);
    v76 = __CFADD__(v537++, 1);
  }
  while (!v76);
  v579 = 19 * v531;
  v581 = ((unint64_t)v542 * (unsigned __int128)(unint64_t)(19 * v536)
        + (unint64_t)v541 * (unsigned __int128)(unint64_t)(19 * v1351)
        + (unint64_t)v538 * (unsigned __int128)(unint64_t)v535
        + (unint64_t)v539 * (unsigned __int128)(unint64_t)v533
        + (unint64_t)v540 * (unsigned __int128)(unint64_t)(19 * v531)) >> 64;
  v580 = v542 * 19 * v536 + v541 * 19 * v1351 + v538 * v535 + v539 * v533 + v540 * 19 * v531;
  v582 = (__int128)((unint64_t)v542 * (unsigned __int128)(unint64_t)(19 * v535)
                  + (unint64_t)v541 * (unsigned __int128)(unint64_t)(19 * v536)
                  + (unint64_t)v538 * (unsigned __int128)(unint64_t)v533
                  + (unint64_t)v539 * (unsigned __int128)(unint64_t)(19 * v531)
                  + (unint64_t)v540 * (unsigned __int128)(unint64_t)(19 * v1351)) >> 51;
  v76 = __CFADD__(v580, v582);
  v583 = v580 + v582;
  if (v76)
    ++v581;
  v584 = ((unint64_t)v542 * (unsigned __int128)(unint64_t)(19 * v1351)
        + (unint64_t)v541 * (unsigned __int128)(unint64_t)v579
        + (unint64_t)v538 * (unsigned __int128)(unint64_t)v536
        + (unint64_t)v539 * (unsigned __int128)(unint64_t)v535
        + (unint64_t)v540 * (unsigned __int128)(unint64_t)v533) >> 64;
  v585 = v542 * 19 * v1351 + v541 * v579 + v538 * v536 + v539 * v535 + v540 * v533;
  *((_QWORD *)&v587 + 1) = v581;
  *(_QWORD *)&v587 = v583;
  v586 = v587 >> 51;
  v76 = __CFADD__(v585, v586);
  v588 = v585 + v586;
  if (v76)
    ++v584;
  *((_QWORD *)&v590 + 1) = v584;
  *(_QWORD *)&v590 = v588;
  v589 = v590 >> 51;
  v591 = (unint64_t)v542 * (unsigned __int128)(unint64_t)v579
       + (unint64_t)v541 * (unsigned __int128)(unint64_t)v533
       + (v529 & 0x7FFFFFFFFFFFFLL) * (unint64_t)v538
       + (unint64_t)v539 * (unsigned __int128)(unint64_t)v536
       + (unint64_t)v540 * (unsigned __int128)(unint64_t)v535;
  v592 = v591 + v589;
  if (__CFADD__((_QWORD)v591, v589))
    v593 = *((_QWORD *)&v591 + 1) + 1;
  else
    v593 = ((unint64_t)v542 * (unsigned __int128)(unint64_t)v579
          + (unint64_t)v541 * (unsigned __int128)(unint64_t)v533
          + (v529 & 0x7FFFFFFFFFFFFLL) * (unint64_t)v538
          + (unint64_t)v539 * (unsigned __int128)(unint64_t)v536
          + (unint64_t)v540 * (unsigned __int128)(unint64_t)v535) >> 64;
  v594 = (v542 * 19 * v535 + v541 * 19 * v536 + v538 * v533 + v539 * 19 * v531 + v540 * 19 * v1351) & 0x7FFFFFFFFFFFFLL;
  v595 = v583 & 0x7FFFFFFFFFFFFLL;
  v596 = v588 & 0x7FFFFFFFFFFFFLL;
  *((_QWORD *)&v599 + 1) = v593;
  *(_QWORD *)&v599 = v591 + v589;
  v598 = v599 >> 51;
  v597 = (unint64_t)v542 * (unsigned __int128)(unint64_t)v533
       + (unint64_t)v541 * (unsigned __int128)(unint64_t)v535
       + (v530 & 0x7FFFFFFFFFFFFLL) * (unint64_t)v538;
  v601 = v597
       + (v529 & 0x7FFFFFFFFFFFFLL) * (unint64_t)v539
       + (unint64_t)v540 * (unsigned __int128)(unint64_t)v536;
  v600 = *((_QWORD *)&v601 + 1);
  v602 = v601 + v598;
  if (__CFADD__((_QWORD)v601, v598))
    v600 = *((_QWORD *)&v601 + 1) + 1;
  *((_QWORD *)&v603 + 1) = v600;
  *(_QWORD *)&v603 = v601 + v598;
  v604 = v594 + 19 * (v603 >> 51);
  v605 = v604 & 0x7FFFFFFFFFFFFLL;
  v606 = v595 + (v604 >> 51);
  v607 = v606 & 0x7FFFFFFFFFFFFLL;
  v608 = v596 + (v606 >> 51);
  v609 = -10;
  v610 = v605;
  v611 = v606 & 0x7FFFFFFFFFFFFLL;
  v612 = v608;
  v1352 = v592 & 0x7FFFFFFFFFFFFLL;
  v613 = v592 & 0x7FFFFFFFFFFFFLL;
  v614 = v602 & 0x7FFFFFFFFFFFFLL;
  do
  {
    v615 = (unint64_t)(38 * v612) * (unsigned __int128)(unint64_t)v613
         + (unint64_t)v610 * (unsigned __int128)(unint64_t)v610
         + (unint64_t)(38 * v614) * (unsigned __int128)(unint64_t)v611;
    v616 = ((unint64_t)(38 * v614) * (unsigned __int128)(unint64_t)v612) >> 64;
    v617 = 38 * v614 * v612;
    v618 = ((unint64_t)(19 * v613) * (unsigned __int128)(unint64_t)v613) >> 64;
    v619 = 19 * v613 * v613;
    v620 = (unint64_t)v612 * (unsigned __int128)(unint64_t)(2 * v610)
         + (unint64_t)v611 * (unsigned __int128)(unint64_t)v611
         + (unint64_t)(38 * v614) * (unsigned __int128)(unint64_t)v613;
    v621 = ((unint64_t)v613 * (unsigned __int128)(unint64_t)(2 * v610)
          + (unint64_t)(2 * v611) * (unsigned __int128)(unint64_t)v612
          + (unint64_t)(19 * v614) * (unsigned __int128)(unint64_t)v614) >> 64;
    v622 = v613 * 2 * v610 + 2 * v611 * v612 + 19 * v614 * v614;
    v623 = ((unint64_t)v614 * (unsigned __int128)(unint64_t)(2 * v610)) >> 64;
    v624 = v614 * 2 * v610;
    v625 = ((unint64_t)v613 * (unsigned __int128)(unint64_t)(2 * v611)) >> 64;
    v626 = v613 * 2 * v611;
    v627 = v615 >> 51;
    v628 = ((unint64_t)v612 * (unsigned __int128)(unint64_t)v612) >> 64;
    v630 = v619 + 2 * v610 * v611 + v617;
    v629 = (__PAIR128__((((unint64_t)(2 * v610) * (unsigned __int128)(unint64_t)v611) >> 64)+ __CFADD__(v619, 2 * v610 * v611)+ v618, v619 + 2 * v610 * v611)+ __PAIR128__(v616, v617)) >> 64;
    v631 = v612 * v612;
    v76 = __CFADD__(v630, v627);
    v632 = v630 + v627;
    if (v76)
      ++v629;
    v633 = v632 & 0x7FFFFFFFFFFFFLL;
    *((_QWORD *)&v635 + 1) = v629;
    *(_QWORD *)&v635 = v632;
    v634 = v635 >> 51;
    v76 = __CFADD__((_QWORD)v620, v634);
    v636 = v620 + v634;
    if (v76)
      v637 = *((_QWORD *)&v620 + 1) + 1;
    else
      v637 = *((_QWORD *)&v620 + 1);
    v638 = v636 & 0x7FFFFFFFFFFFFLL;
    *((_QWORD *)&v640 + 1) = v637;
    *(_QWORD *)&v640 = v636;
    v639 = v640 >> 51;
    v76 = __CFADD__(v622, v639);
    v641 = v622 + v639;
    if (v76)
      ++v621;
    v613 = v641 & 0x7FFFFFFFFFFFFLL;
    *((_QWORD *)&v643 + 1) = v621;
    *(_QWORD *)&v643 = v641;
    v642 = v643 >> 51;
    v644 = __PAIR128__(v625, v626) + __PAIR128__(v628, v631) + __PAIR128__(v623, v624);
    if (__CFADD__((_QWORD)v644, v642))
      v645 = *((_QWORD *)&v644 + 1) + 1;
    else
      v645 = (__PAIR128__(v625, v626) + __PAIR128__(v628, v631) + __PAIR128__(v623, v624)) >> 64;
    v614 = (v644 + v642) & 0x7FFFFFFFFFFFFLL;
    *((_QWORD *)&v646 + 1) = v645;
    *(_QWORD *)&v646 = v644 + v642;
    v647 = (v615 & 0x7FFFFFFFFFFFFLL) + 19 * (v646 >> 51);
    v610 = v647 & 0x7FFFFFFFFFFFFLL;
    v648 = v633 + (v647 >> 51);
    v611 = v648 & 0x7FFFFFFFFFFFFLL;
    v612 = v638 + (v648 >> 51);
    v76 = __CFADD__(v609++, 1);
  }
  while (!v76);
  v649 = 19 * (v602 & 0x7FFFFFFFFFFFFLL);
  v1327 = 19 * v608;
  v650 = ((unint64_t)v597 * (unsigned __int128)(unint64_t)(19 * v608)
        + (unint64_t)v613 * (unsigned __int128)(unint64_t)(19 * v1352)
        + (unint64_t)v610 * (unsigned __int128)(unint64_t)v607
        + (unint64_t)v611 * (unsigned __int128)(unint64_t)v605
        + (unint64_t)v612 * (unsigned __int128)(unint64_t)v649) >> 64;
  v651 = v597 * 19 * v608 + v613 * 19 * v1352 + v610 * v607 + v611 * v605 + v612 * v649;
  v652 = (__int128)((unint64_t)v597 * (unsigned __int128)(unint64_t)(19 * v607)
                  + (unint64_t)v613 * (unsigned __int128)(unint64_t)(19 * v608)
                  + (unint64_t)v610 * (unsigned __int128)(unint64_t)v605
                  + (unint64_t)v611 * (unsigned __int128)(unint64_t)v649
                  + (unint64_t)v612 * (unsigned __int128)(unint64_t)(19 * v1352)) >> 51;
  v76 = __CFADD__(v651, v652);
  v653 = v651 + v652;
  if (v76)
    ++v650;
  v1343 = 19 * v1352;
  v654 = v613 * v605;
  v655 = v592 & 0x7FFFFFFFFFFFFLL;
  v656 = ((v592 & 0x7FFFFFFFFFFFFLL) * (unsigned __int128)(unint64_t)v610) >> 64;
  v657 = (unint64_t)v614 * (unsigned __int128)(unint64_t)(19 * v1352)
       + (unint64_t)v613 * (unsigned __int128)(unint64_t)v649
       + (unint64_t)v610 * (unsigned __int128)(unint64_t)v608
       + (unint64_t)v611 * (unsigned __int128)(unint64_t)v607
       + (unint64_t)v612 * (unsigned __int128)(unint64_t)v605;
  v658 = (v592 & 0x7FFFFFFFFFFFFLL) * v610;
  *((_QWORD *)&v660 + 1) = v650;
  *(_QWORD *)&v660 = v653;
  v659 = v660 >> 51;
  v76 = __CFADD__((_QWORD)v657, v659);
  v661 = v657 + v659;
  v662 = v614 * v649;
  if (v76)
    v663 = *((_QWORD *)&v657 + 1) + 1;
  else
    v663 = ((unint64_t)v614 * (unsigned __int128)(unint64_t)(19 * v1352)
          + (unint64_t)v613 * (unsigned __int128)(unint64_t)v649
          + (unint64_t)v610 * (unsigned __int128)(unint64_t)v608
          + (unint64_t)v611 * (unsigned __int128)(unint64_t)v607
          + (unint64_t)v612 * (unsigned __int128)(unint64_t)v605) >> 64;
  v76 = __CFADD__(v662, v654);
  v664 = v662 + v654;
  v665 = v602 & 0x7FFFFFFFFFFFFLL;
  v666 = (v597 * 19 * v607 + v613 * 19 * v608 + v610 * v605 + v611 * v649 + v612 * 19 * v1352) & 0x7FFFFFFFFFFFFLL;
  v667 = v664 + v658;
  v668 = v653 & 0x7FFFFFFFFFFFFLL;
  v669 = v656
       + __CFADD__(v664, v658)
       + (((unint64_t)v613 * (unsigned __int128)(unint64_t)v605) >> 64)
       + v76
       + (((unint64_t)v597 * (unsigned __int128)(unint64_t)v649) >> 64);
  *((_QWORD *)&v671 + 1) = v663;
  *(_QWORD *)&v671 = v661;
  v670 = v671 >> 51;
  v672 = v661 & 0x7FFFFFFFFFFFFLL;
  v673 = __PAIR128__(v669, v667)
       + (unint64_t)v611 * (unsigned __int128)(unint64_t)v608
       + (unint64_t)v612 * (unsigned __int128)(unint64_t)v607;
  v674 = v673 + v670;
  if (__CFADD__((_QWORD)v673, v670))
    v675 = *((_QWORD *)&v673 + 1) + 1;
  else
    v675 = *((_QWORD *)&v673 + 1);
  v1294 = v673 + v670;
  *((_QWORD *)&v677 + 1) = v675;
  *(_QWORD *)&v677 = v673 + v670;
  v676 = v677 >> 51;
  v1322 = v665;
  v1332 = v655;
  v1353 = v608;
  v679 = (unint64_t)v614 * (unsigned __int128)(unint64_t)v605
       + (unint64_t)v613 * (unsigned __int128)(unint64_t)v607
       + (unint64_t)v665 * (unsigned __int128)(unint64_t)v610
       + (unint64_t)v655 * (unsigned __int128)(unint64_t)v611
       + (unint64_t)v612 * (unsigned __int128)(unint64_t)v608;
  v678 = *((_QWORD *)&v679 + 1);
  v76 = __CFADD__((_QWORD)v679, v676);
  v680 = v679 + v676;
  if (v76)
    v678 = *((_QWORD *)&v679 + 1) + 1;
  v681 = v680 & 0x7FFFFFFFFFFFFLL;
  v1312 = v680;
  *((_QWORD *)&v682 + 1) = v678;
  *(_QWORD *)&v682 = v680;
  v683 = v666 + 19 * (v682 >> 51);
  v684 = v683 & 0x7FFFFFFFFFFFFLL;
  v685 = v668 + (v683 >> 51);
  v686 = v685 & 0x7FFFFFFFFFFFFLL;
  v687 = v672 + (v685 >> 51);
  v688 = -20;
  v689 = v684;
  v690 = v686;
  v691 = v687;
  v1285 = v680 & 0x7FFFFFFFFFFFFLL;
  v1289 = v674 & 0x7FFFFFFFFFFFFLL;
  v692 = v674 & 0x7FFFFFFFFFFFFLL;
  do
  {
    v693 = 2 * v689;
    v694 = (unint64_t)(38 * v691) * (unsigned __int128)(unint64_t)v692
         + (unint64_t)v689 * (unsigned __int128)(unint64_t)v689
         + (unint64_t)(38 * v681) * (unsigned __int128)(unint64_t)v690;
    v695 = ((unint64_t)(2 * v689) * (unsigned __int128)(unint64_t)v690) >> 64;
    v696 = 2 * v689 * v690;
    v697 = ((unint64_t)(38 * v681) * (unsigned __int128)(unint64_t)v691) >> 64;
    v698 = 38 * v681 * v691;
    v699 = (unint64_t)v691 * (unsigned __int128)(unint64_t)v693
         + (unint64_t)v690 * (unsigned __int128)(unint64_t)v690
         + (unint64_t)(38 * v681) * (unsigned __int128)(unint64_t)v692;
    v700 = (unint64_t)v692 * (unsigned __int128)(unint64_t)v693
         + (unint64_t)(2 * v690) * (unsigned __int128)(unint64_t)v691
         + (unint64_t)(19 * v681) * (unsigned __int128)(unint64_t)v681;
    v701 = ((unint64_t)v681 * (unsigned __int128)(unint64_t)v693) >> 64;
    v702 = v681 * v693;
    v703 = ((unint64_t)v692 * (unsigned __int128)(unint64_t)(2 * v690)) >> 64;
    v704 = v692 * 2 * v690;
    v705 = v694 >> 51;
    v707 = ((unint64_t)(19 * v692) * (unsigned __int128)(unint64_t)v692
          + __PAIR128__(v695, v696)
          + __PAIR128__(v697, v698)) >> 64;
    v706 = 19 * v692 * v692 + v696 + v698;
    v76 = __CFADD__(v706, v705);
    v708 = v706 + v705;
    if (v76)
      ++v707;
    v709 = v708 & 0x7FFFFFFFFFFFFLL;
    *((_QWORD *)&v711 + 1) = v707;
    *(_QWORD *)&v711 = v708;
    v710 = v711 >> 51;
    v76 = __CFADD__((_QWORD)v699, v710);
    v712 = v699 + v710;
    if (v76)
      v713 = *((_QWORD *)&v699 + 1) + 1;
    else
      v713 = *((_QWORD *)&v699 + 1);
    v714 = v712 & 0x7FFFFFFFFFFFFLL;
    *((_QWORD *)&v716 + 1) = v713;
    *(_QWORD *)&v716 = v712;
    v715 = v716 >> 51;
    v76 = __CFADD__((_QWORD)v700, v715);
    v717 = v700 + v715;
    if (v76)
      v718 = *((_QWORD *)&v700 + 1) + 1;
    else
      v718 = *((_QWORD *)&v700 + 1);
    v692 = v717 & 0x7FFFFFFFFFFFFLL;
    *((_QWORD *)&v720 + 1) = v718;
    *(_QWORD *)&v720 = v717;
    v719 = v720 >> 51;
    v721 = __PAIR128__(v703, v704)
         + (unint64_t)v691 * (unsigned __int128)(unint64_t)v691
         + __PAIR128__(v701, v702);
    v76 = __CFADD__((_QWORD)v721, v719);
    v722 = v721 + v719;
    if (v76)
      v723 = *((_QWORD *)&v721 + 1) + 1;
    else
      v723 = (__PAIR128__(v703, v704)
            + (unint64_t)v691 * (unsigned __int128)(unint64_t)v691
            + __PAIR128__(v701, v702)) >> 64;
    v681 = v722 & 0x7FFFFFFFFFFFFLL;
    *((_QWORD *)&v724 + 1) = v723;
    *(_QWORD *)&v724 = v722;
    v725 = (v694 & 0x7FFFFFFFFFFFFLL) + 19 * (v724 >> 51);
    v689 = v725 & 0x7FFFFFFFFFFFFLL;
    v726 = v709 + (v725 >> 51);
    v690 = v726 & 0x7FFFFFFFFFFFFLL;
    v691 = v714 + (v726 >> 51);
    v76 = __CFADD__(v688++, 1);
  }
  while (!v76);
  v727 = v681 * 19 * v686 + v692 * 19 * v687 + v689 * v684 + v690 * 19 * v1285 + v691 * 19 * v1289;
  v728 = ((unint64_t)v681 * (unsigned __int128)(unint64_t)(19 * v687)
        + (unint64_t)v692 * (unsigned __int128)(unint64_t)(19 * v1289)
        + (unint64_t)v689 * (unsigned __int128)(unint64_t)v686
        + (unint64_t)v690 * (unsigned __int128)(unint64_t)v684
        + (unint64_t)v691 * (unsigned __int128)(unint64_t)(19 * v1285)) >> 64;
  v729 = v681 * 19 * v687 + v692 * 19 * v1289 + v689 * v686 + v690 * v684 + v691 * 19 * v1285;
  v730 = (__int128)((unint64_t)v681 * (unsigned __int128)(unint64_t)(19 * v686)
                  + (unint64_t)v692 * (unsigned __int128)(unint64_t)(19 * v687)
                  + (unint64_t)v689 * (unsigned __int128)(unint64_t)v684
                  + (unint64_t)v690 * (unsigned __int128)(unint64_t)(19 * v1285)
                  + (unint64_t)v691 * (unsigned __int128)(unint64_t)(19 * v1289)) >> 51;
  v76 = __CFADD__(v729, v730);
  v731 = v729 + v730;
  if (v76)
    ++v728;
  *((_QWORD *)&v733 + 1) = v728;
  *(_QWORD *)&v733 = v731;
  v732 = v733 >> 51;
  v735 = ((unint64_t)v681 * (unsigned __int128)(unint64_t)(19 * v1289)
        + (unint64_t)v692 * (unsigned __int128)(unint64_t)(19 * v1285)
        + (unint64_t)v689 * (unsigned __int128)(unint64_t)v687
        + (unint64_t)v690 * (unsigned __int128)(unint64_t)v686
        + (unint64_t)v691 * (unsigned __int128)(unint64_t)v684) >> 64;
  v734 = v681 * 19 * v1289 + v692 * 19 * v1285 + v689 * v687 + v690 * v686 + v691 * v684;
  v76 = __CFADD__(v734, v732);
  v736 = v734 + v732;
  if (v76)
    ++v735;
  v737 = (unint64_t)v681 * (unsigned __int128)(unint64_t)(19 * v1285)
       + (unint64_t)v692 * (unsigned __int128)(unint64_t)v684
       + (v1294 & 0x7FFFFFFFFFFFFLL) * (unsigned __int128)(unint64_t)v689
       + (unint64_t)v690 * (unsigned __int128)(unint64_t)v687
       + (unint64_t)v691 * (unsigned __int128)(unint64_t)v686;
  *((_QWORD *)&v739 + 1) = v735;
  *(_QWORD *)&v739 = v736;
  v738 = v739 >> 51;
  v740 = v737 + v738;
  if (__CFADD__((_QWORD)v737, v738))
    v741 = *((_QWORD *)&v737 + 1) + 1;
  else
    v741 = ((unint64_t)v681 * (unsigned __int128)(unint64_t)(19 * v1285)
          + (unint64_t)v692 * (unsigned __int128)(unint64_t)v684
          + (v1294 & 0x7FFFFFFFFFFFFLL) * (unsigned __int128)(unint64_t)v689
          + (unint64_t)v690 * (unsigned __int128)(unint64_t)v687
          + (unint64_t)v691 * (unsigned __int128)(unint64_t)v686) >> 64;
  v743 = (unint64_t)v681 * (unsigned __int128)(unint64_t)v684
       + (unint64_t)v692 * (unsigned __int128)(unint64_t)v686
       + (v1312 & 0x7FFFFFFFFFFFFLL) * (unsigned __int128)(unint64_t)v689
       + (v1294 & 0x7FFFFFFFFFFFFLL) * (unsigned __int128)(unint64_t)v690
       + (unint64_t)v691 * (unsigned __int128)(unint64_t)v687;
  v742 = *((_QWORD *)&v743 + 1);
  v744 = v731 & 0x7FFFFFFFFFFFFLL;
  *((_QWORD *)&v746 + 1) = v741;
  *(_QWORD *)&v746 = v740;
  v745 = v746 >> 51;
  v747 = v736 & 0x7FFFFFFFFFFFFLL;
  v748 = v743 + v745;
  if (__CFADD__((_QWORD)v743, v745))
    v742 = *((_QWORD *)&v743 + 1) + 1;
  *((_QWORD *)&v749 + 1) = v742;
  *(_QWORD *)&v749 = v743 + v745;
  v750 = (v727 & 0x7FFFFFFFFFFFFLL) + 19 * (v749 >> 51);
  v751 = v750 & 0x7FFFFFFFFFFFFLL;
  v752 = v744 + (v750 >> 51);
  v753 = v752 & 0x7FFFFFFFFFFFFLL;
  v754 = v747 + (v752 >> 51);
  v755 = -10;
  do
  {
    v756 = v748 & 0x7FFFFFFFFFFFFLL;
    v757 = v740 & 0x7FFFFFFFFFFFFLL;
    v758 = 19 * (v748 & 0x7FFFFFFFFFFFFLL);
    v759 = 38 * (v748 & 0x7FFFFFFFFFFFFLL);
    v760 = (v740 & 0x7FFFFFFFFFFFFLL) * (unsigned __int128)(unint64_t)(38 * v754)
         + (unint64_t)v751 * (unsigned __int128)(unint64_t)v751
         + (unint64_t)v759 * (unsigned __int128)(unint64_t)v753;
    v761 = ((unint64_t)(2 * v751) * (unsigned __int128)(unint64_t)v753) >> 64;
    v762 = 2 * v751 * v753;
    v763 = ((unint64_t)v759 * (unsigned __int128)(unint64_t)v754) >> 64;
    v764 = v759 * v754;
    v765 = 19 * (v740 & 0x7FFFFFFFFFFFFLL);
    v766 = ((unint64_t)v765 * (unsigned __int128)(v740 & 0x7FFFFFFFFFFFFLL)) >> 64;
    v767 = v765 * v757;
    v768 = (unint64_t)v754 * (unsigned __int128)(unint64_t)(2 * v751)
         + (unint64_t)v753 * (unsigned __int128)(unint64_t)v753
         + (unint64_t)v759 * (unsigned __int128)(unint64_t)v757;
    v769 = (unint64_t)v757 * (unsigned __int128)(unint64_t)(2 * v751)
         + (unint64_t)(2 * v753) * (unsigned __int128)(unint64_t)v754
         + (unint64_t)v758 * (unsigned __int128)(unint64_t)v756;
    v770 = ((unint64_t)v756 * (unsigned __int128)(unint64_t)(2 * v751)) >> 64;
    v771 = v756 * 2 * v751;
    v772 = ((unint64_t)v757 * (unsigned __int128)(unint64_t)(2 * v753)) >> 64;
    v773 = v757 * 2 * v753;
    v774 = ((unint64_t)v754 * (unsigned __int128)(unint64_t)v754) >> 64;
    v775 = v760 >> 51;
    v776 = v754 * v754;
    v76 = __CFADD__(v767 + v762 + v764, v775);
    v777 = v767 + v762 + v764 + v775;
    if (v76)
      v778 = ((__PAIR128__(v761 + (unint64_t)__CFADD__(v767, v762) + v766, v767 + v762) + __PAIR128__(v763, v764)) >> 64)
           + 1;
    else
      v778 = (__PAIR128__(v761 + (unint64_t)__CFADD__(v767, v762) + v766, v767 + v762) + __PAIR128__(v763, v764)) >> 64;
    *((_QWORD *)&v780 + 1) = v778;
    *(_QWORD *)&v780 = v777;
    v779 = v780 >> 51;
    v781 = v777 & 0x7FFFFFFFFFFFFLL;
    v782 = v768 + v779;
    if (__CFADD__((_QWORD)v768, v779))
      v783 = *((_QWORD *)&v768 + 1) + 1;
    else
      v783 = *((_QWORD *)&v768 + 1);
    v784 = v782 & 0x7FFFFFFFFFFFFLL;
    *((_QWORD *)&v786 + 1) = v783;
    *(_QWORD *)&v786 = v782;
    v785 = v786 >> 51;
    v740 = v769 + v785;
    if (__CFADD__((_QWORD)v769, v785))
      v787 = *((_QWORD *)&v769 + 1) + 1;
    else
      v787 = *((_QWORD *)&v769 + 1);
    *((_QWORD *)&v789 + 1) = v787;
    *(_QWORD *)&v789 = v740;
    v788 = v789 >> 51;
    v790 = __PAIR128__(v772, v773) + __PAIR128__(v774, v776) + __PAIR128__(v770, v771);
    v748 = v790 + v788;
    if (__CFADD__((_QWORD)v790, v788))
      v791 = *((_QWORD *)&v790 + 1) + 1;
    else
      v791 = (__PAIR128__(v772, v773) + __PAIR128__(v774, v776) + __PAIR128__(v770, v771)) >> 64;
    *((_QWORD *)&v792 + 1) = v791;
    *(_QWORD *)&v792 = v790 + v788;
    v793 = (v760 & 0x7FFFFFFFFFFFFLL) + 19 * (v792 >> 51);
    v751 = v793 & 0x7FFFFFFFFFFFFLL;
    v794 = v781 + (v793 >> 51);
    v753 = v794 & 0x7FFFFFFFFFFFFLL;
    v754 = v784 + (v794 >> 51);
    v76 = __CFADD__(v755++, 1);
  }
  while (!v76);
  v795 = v740 & 0x7FFFFFFFFFFFFLL;
  v796 = v748 & 0x7FFFFFFFFFFFFLL;
  v797 = (v748 & 0x7FFFFFFFFFFFFLL) * (unsigned __int128)(unint64_t)(19 * v607)
       + (v740 & 0x7FFFFFFFFFFFFLL) * (unsigned __int128)(unint64_t)v1327
       + (unint64_t)v751 * (unsigned __int128)(unint64_t)v605
       + (unint64_t)v753 * (unsigned __int128)(unint64_t)v649
       + (unint64_t)v754 * (unsigned __int128)(unint64_t)v1343;
  v798 = ((v748 & 0x7FFFFFFFFFFFFLL) * (unsigned __int128)(unint64_t)v1327
        + (v740 & 0x7FFFFFFFFFFFFLL) * (unsigned __int128)(unint64_t)v1343
        + (unint64_t)v751 * (unsigned __int128)(unint64_t)v607
        + (unint64_t)v753 * (unsigned __int128)(unint64_t)v605
        + (unint64_t)v754 * (unsigned __int128)(unint64_t)v649) >> 64;
  v799 = (v748 & 0x7FFFFFFFFFFFFLL) * v1327
       + (v740 & 0x7FFFFFFFFFFFFLL) * v1343
       + v751 * v607
       + v753 * v605
       + v754 * v649;
  v800 = v797 >> 51;
  v76 = __CFADD__(v799, v800);
  v801 = v799 + v800;
  if (v76)
    ++v798;
  *((_QWORD *)&v803 + 1) = v798;
  *(_QWORD *)&v803 = v801;
  v802 = v803 >> 51;
  v805 = (__PAIR128__((((unint64_t)v795 * (unsigned __int128)(unint64_t)v649) >> 64)+ __CFADD__((v748 & 0x7FFFFFFFFFFFFLL) * v1343, (v740 & 0x7FFFFFFFFFFFFLL) * v649)+ (((unint64_t)v796 * (unsigned __int128)(unint64_t)v1343) >> 64), (v748 & 0x7FFFFFFFFFFFFLL) * v1343 + (v740 & 0x7FFFFFFFFFFFFuLL) * v649)+ (unint64_t)v751 * (unsigned __int128)(unint64_t)v1353+ (unint64_t)v753 * (unsigned __int128)(unint64_t)v607+ (unint64_t)v754 * (unsigned __int128)(unint64_t)v605) >> 64;
  v804 = (v748 & 0x7FFFFFFFFFFFFLL) * v1343
       + (v740 & 0x7FFFFFFFFFFFFLL) * v649
       + v751 * v1353
       + v753 * v607
       + v754 * v605;
  v76 = __CFADD__(v804, v802);
  v806 = v804 + v802;
  if (v76)
    ++v805;
  *((_QWORD *)&v808 + 1) = v805;
  *(_QWORD *)&v808 = v806;
  v807 = v808 >> 51;
  v809 = v796 * v649 + v795 * v605 + v1332 * v751 + v753 * v1353 + v754 * v607;
  v76 = __CFADD__(v809, v807);
  v810 = v809 + v807;
  if (v76)
    v811 = (((unint64_t)v796 * (unsigned __int128)(unint64_t)v649
           + (unint64_t)v795 * (unsigned __int128)(unint64_t)v605
           + (unint64_t)v1332 * (unsigned __int128)(unint64_t)v751
           + (unint64_t)v753 * (unsigned __int128)(unint64_t)v1353
           + (unint64_t)v754 * (unsigned __int128)(unint64_t)v607) >> 64)
         + 1;
  else
    v811 = ((unint64_t)v796 * (unsigned __int128)(unint64_t)v649
          + (unint64_t)v795 * (unsigned __int128)(unint64_t)v605
          + (unint64_t)v1332 * (unsigned __int128)(unint64_t)v751
          + (unint64_t)v753 * (unsigned __int128)(unint64_t)v1353
          + (unint64_t)v754 * (unsigned __int128)(unint64_t)v607) >> 64;
  v812 = v801 & 0x7FFFFFFFFFFFFLL;
  v813 = v806 & 0x7FFFFFFFFFFFFLL;
  *((_QWORD *)&v815 + 1) = v811;
  *(_QWORD *)&v815 = v810;
  v814 = v815 >> 51;
  v817 = (unint64_t)v796 * (unsigned __int128)(unint64_t)v605
       + (unint64_t)v795 * (unsigned __int128)(unint64_t)v607
       + (unint64_t)v1322 * (unsigned __int128)(unint64_t)v751
       + (unint64_t)v1332 * (unsigned __int128)(unint64_t)v753
       + (unint64_t)v754 * (unsigned __int128)(unint64_t)v1353;
  v816 = *((_QWORD *)&v817 + 1);
  v818 = v817 + v814;
  if (__CFADD__((_QWORD)v817, v814))
    v816 = *((_QWORD *)&v817 + 1) + 1;
  *((_QWORD *)&v819 + 1) = v816;
  *(_QWORD *)&v819 = v817 + v814;
  v820 = (v797 & 0x7FFFFFFFFFFFFLL) + 19 * (v819 >> 51);
  v821 = v820 & 0x7FFFFFFFFFFFFLL;
  v822 = v812 + (v820 >> 51);
  v823 = v822 & 0x7FFFFFFFFFFFFLL;
  v824 = v813 + (v822 >> 51);
  v825 = -50;
  v826 = v821;
  v827 = v822 & 0x7FFFFFFFFFFFFLL;
  v828 = v824;
  v1354 = v810 & 0x7FFFFFFFFFFFFLL;
  v829 = v810 & 0x7FFFFFFFFFFFFLL;
  v830 = v818 & 0x7FFFFFFFFFFFFLL;
  do
  {
    v831 = (unint64_t)(38 * v828) * (unsigned __int128)(unint64_t)v829
         + (unint64_t)v826 * (unsigned __int128)(unint64_t)v826
         + (unint64_t)(38 * v830) * (unsigned __int128)(unint64_t)v827;
    v832 = ((unint64_t)(38 * v830) * (unsigned __int128)(unint64_t)v828) >> 64;
    v833 = 38 * v830 * v828;
    v834 = ((unint64_t)(19 * v829) * (unsigned __int128)(unint64_t)v829) >> 64;
    v835 = 19 * v829 * v829;
    v836 = (unint64_t)v828 * (unsigned __int128)(unint64_t)(2 * v826)
         + (unint64_t)v827 * (unsigned __int128)(unint64_t)v827
         + (unint64_t)(38 * v830) * (unsigned __int128)(unint64_t)v829;
    v837 = ((unint64_t)v829 * (unsigned __int128)(unint64_t)(2 * v826)
          + (unint64_t)(2 * v827) * (unsigned __int128)(unint64_t)v828
          + (unint64_t)(19 * v830) * (unsigned __int128)(unint64_t)v830) >> 64;
    v838 = v829 * 2 * v826 + 2 * v827 * v828 + 19 * v830 * v830;
    v839 = ((unint64_t)v830 * (unsigned __int128)(unint64_t)(2 * v826)) >> 64;
    v840 = v830 * 2 * v826;
    v841 = ((unint64_t)v829 * (unsigned __int128)(unint64_t)(2 * v827)) >> 64;
    v842 = v829 * 2 * v827;
    v843 = v831 >> 51;
    v844 = ((unint64_t)v828 * (unsigned __int128)(unint64_t)v828) >> 64;
    v846 = v835 + 2 * v826 * v827 + v833;
    v845 = (__PAIR128__((((unint64_t)(2 * v826) * (unsigned __int128)(unint64_t)v827) >> 64)+ __CFADD__(v835, 2 * v826 * v827)+ v834, v835 + 2 * v826 * v827)+ __PAIR128__(v832, v833)) >> 64;
    v847 = v828 * v828;
    v76 = __CFADD__(v846, v843);
    v848 = v846 + v843;
    if (v76)
      ++v845;
    v849 = v848 & 0x7FFFFFFFFFFFFLL;
    *((_QWORD *)&v851 + 1) = v845;
    *(_QWORD *)&v851 = v848;
    v850 = v851 >> 51;
    v76 = __CFADD__((_QWORD)v836, v850);
    v852 = v836 + v850;
    if (v76)
      v853 = *((_QWORD *)&v836 + 1) + 1;
    else
      v853 = *((_QWORD *)&v836 + 1);
    v854 = v852 & 0x7FFFFFFFFFFFFLL;
    *((_QWORD *)&v856 + 1) = v853;
    *(_QWORD *)&v856 = v852;
    v855 = v856 >> 51;
    v76 = __CFADD__(v838, v855);
    v857 = v838 + v855;
    if (v76)
      ++v837;
    v829 = v857 & 0x7FFFFFFFFFFFFLL;
    *((_QWORD *)&v859 + 1) = v837;
    *(_QWORD *)&v859 = v857;
    v858 = v859 >> 51;
    v860 = __PAIR128__(v841, v842) + __PAIR128__(v844, v847) + __PAIR128__(v839, v840);
    if (__CFADD__((_QWORD)v860, v858))
      v861 = *((_QWORD *)&v860 + 1) + 1;
    else
      v861 = (__PAIR128__(v841, v842) + __PAIR128__(v844, v847) + __PAIR128__(v839, v840)) >> 64;
    v830 = (v860 + v858) & 0x7FFFFFFFFFFFFLL;
    *((_QWORD *)&v862 + 1) = v861;
    *(_QWORD *)&v862 = v860 + v858;
    v863 = (v831 & 0x7FFFFFFFFFFFFLL) + 19 * (v862 >> 51);
    v826 = v863 & 0x7FFFFFFFFFFFFLL;
    v864 = v849 + (v863 >> 51);
    v827 = v864 & 0x7FFFFFFFFFFFFLL;
    v828 = v854 + (v864 >> 51);
    v76 = __CFADD__(v825++, 1);
  }
  while (!v76);
  v865 = 19 * (v818 & 0x7FFFFFFFFFFFFLL);
  v1328 = 19 * v824;
  v866 = ((unint64_t)v830 * (unsigned __int128)(unint64_t)(19 * v824)
        + (unint64_t)v829 * (unsigned __int128)(unint64_t)(19 * v1354)
        + (unint64_t)v826 * (unsigned __int128)(unint64_t)v823
        + (unint64_t)v827 * (unsigned __int128)(unint64_t)v821
        + (unint64_t)v828 * (unsigned __int128)(unint64_t)v865) >> 64;
  v867 = v830 * 19 * v824 + v829 * 19 * v1354 + v826 * v823 + v827 * v821 + v828 * v865;
  v868 = (__int128)((unint64_t)v830 * (unsigned __int128)(unint64_t)(19 * v823)
                  + (unint64_t)v829 * (unsigned __int128)(unint64_t)(19 * v824)
                  + (unint64_t)v826 * (unsigned __int128)(unint64_t)v821
                  + (unint64_t)v827 * (unsigned __int128)(unint64_t)v865
                  + (unint64_t)v828 * (unsigned __int128)(unint64_t)(19 * v1354)) >> 51;
  v76 = __CFADD__(v867, v868);
  v869 = v867 + v868;
  if (v76)
    ++v866;
  v1344 = 19 * v1354;
  v870 = v829 * v821;
  v871 = v810 & 0x7FFFFFFFFFFFFLL;
  v872 = ((v810 & 0x7FFFFFFFFFFFFLL) * (unsigned __int128)(unint64_t)v826) >> 64;
  v873 = (unint64_t)v830 * (unsigned __int128)(unint64_t)(19 * v1354)
       + (unint64_t)v829 * (unsigned __int128)(unint64_t)v865
       + (unint64_t)v826 * (unsigned __int128)(unint64_t)v824
       + (unint64_t)v827 * (unsigned __int128)(unint64_t)v823
       + (unint64_t)v828 * (unsigned __int128)(unint64_t)v821;
  v874 = (v810 & 0x7FFFFFFFFFFFFLL) * v826;
  *((_QWORD *)&v876 + 1) = v866;
  *(_QWORD *)&v876 = v869;
  v875 = v876 >> 51;
  v76 = __CFADD__((_QWORD)v873, v875);
  v877 = v873 + v875;
  v878 = v830 * v865;
  if (v76)
    v879 = *((_QWORD *)&v873 + 1) + 1;
  else
    v879 = ((unint64_t)v830 * (unsigned __int128)(unint64_t)(19 * v1354)
          + (unint64_t)v829 * (unsigned __int128)(unint64_t)v865
          + (unint64_t)v826 * (unsigned __int128)(unint64_t)v824
          + (unint64_t)v827 * (unsigned __int128)(unint64_t)v823
          + (unint64_t)v828 * (unsigned __int128)(unint64_t)v821) >> 64;
  v76 = __CFADD__(v878, v870);
  v880 = v878 + v870;
  v881 = v818 & 0x7FFFFFFFFFFFFLL;
  v882 = (v830 * 19 * v823 + v829 * 19 * v824 + v826 * v821 + v827 * v865 + v828 * 19 * v1354) & 0x7FFFFFFFFFFFFLL;
  v883 = v880 + v874;
  v884 = v869 & 0x7FFFFFFFFFFFFLL;
  v885 = v872
       + __CFADD__(v880, v874)
       + (((unint64_t)v829 * (unsigned __int128)(unint64_t)v821) >> 64)
       + v76
       + (((unint64_t)v830 * (unsigned __int128)(unint64_t)v865) >> 64);
  *((_QWORD *)&v887 + 1) = v879;
  *(_QWORD *)&v887 = v877;
  v886 = v887 >> 51;
  v888 = v877 & 0x7FFFFFFFFFFFFLL;
  v889 = __PAIR128__(v885, v883)
       + (unint64_t)v827 * (unsigned __int128)(unint64_t)v824
       + (unint64_t)v828 * (unsigned __int128)(unint64_t)v823;
  v890 = v889 + v886;
  if (__CFADD__((_QWORD)v889, v886))
    v891 = *((_QWORD *)&v889 + 1) + 1;
  else
    v891 = *((_QWORD *)&v889 + 1);
  v1295 = v889 + v886;
  *((_QWORD *)&v893 + 1) = v891;
  *(_QWORD *)&v893 = v889 + v886;
  v892 = v893 >> 51;
  v1323 = v881;
  v1333 = v871;
  v1355 = v824;
  v895 = (unint64_t)v830 * (unsigned __int128)(unint64_t)v821
       + (unint64_t)v829 * (unsigned __int128)(unint64_t)v823
       + (unint64_t)v881 * (unsigned __int128)(unint64_t)v826
       + (unint64_t)v871 * (unsigned __int128)(unint64_t)v827
       + (unint64_t)v828 * (unsigned __int128)(unint64_t)v824;
  v894 = *((_QWORD *)&v895 + 1);
  v76 = __CFADD__((_QWORD)v895, v892);
  v896 = v895 + v892;
  if (v76)
    v894 = *((_QWORD *)&v895 + 1) + 1;
  v897 = v896 & 0x7FFFFFFFFFFFFLL;
  v1313 = v896;
  *((_QWORD *)&v898 + 1) = v894;
  *(_QWORD *)&v898 = v896;
  v899 = v882 + 19 * (v898 >> 51);
  v900 = v899 & 0x7FFFFFFFFFFFFLL;
  v901 = v884 + (v899 >> 51);
  v902 = v901 & 0x7FFFFFFFFFFFFLL;
  v903 = v888 + (v901 >> 51);
  v904 = -100;
  v905 = v900;
  v906 = v902;
  v907 = v903;
  v1286 = v896 & 0x7FFFFFFFFFFFFLL;
  v1290 = v890 & 0x7FFFFFFFFFFFFLL;
  v908 = v890 & 0x7FFFFFFFFFFFFLL;
  do
  {
    v909 = 2 * v905;
    v910 = (unint64_t)(38 * v907) * (unsigned __int128)(unint64_t)v908
         + (unint64_t)v905 * (unsigned __int128)(unint64_t)v905
         + (unint64_t)(38 * v897) * (unsigned __int128)(unint64_t)v906;
    v911 = ((unint64_t)(2 * v905) * (unsigned __int128)(unint64_t)v906) >> 64;
    v912 = 2 * v905 * v906;
    v913 = ((unint64_t)(38 * v897) * (unsigned __int128)(unint64_t)v907) >> 64;
    v914 = 38 * v897 * v907;
    v915 = (unint64_t)v907 * (unsigned __int128)(unint64_t)v909
         + (unint64_t)v906 * (unsigned __int128)(unint64_t)v906
         + (unint64_t)(38 * v897) * (unsigned __int128)(unint64_t)v908;
    v916 = (unint64_t)v908 * (unsigned __int128)(unint64_t)v909
         + (unint64_t)(2 * v906) * (unsigned __int128)(unint64_t)v907
         + (unint64_t)(19 * v897) * (unsigned __int128)(unint64_t)v897;
    v917 = ((unint64_t)v897 * (unsigned __int128)(unint64_t)v909) >> 64;
    v918 = v897 * v909;
    v919 = ((unint64_t)v908 * (unsigned __int128)(unint64_t)(2 * v906)) >> 64;
    v920 = v908 * 2 * v906;
    v921 = v910 >> 51;
    v923 = ((unint64_t)(19 * v908) * (unsigned __int128)(unint64_t)v908
          + __PAIR128__(v911, v912)
          + __PAIR128__(v913, v914)) >> 64;
    v922 = 19 * v908 * v908 + v912 + v914;
    v76 = __CFADD__(v922, v921);
    v924 = v922 + v921;
    if (v76)
      ++v923;
    v925 = v924 & 0x7FFFFFFFFFFFFLL;
    *((_QWORD *)&v927 + 1) = v923;
    *(_QWORD *)&v927 = v924;
    v926 = v927 >> 51;
    v76 = __CFADD__((_QWORD)v915, v926);
    v928 = v915 + v926;
    if (v76)
      v929 = *((_QWORD *)&v915 + 1) + 1;
    else
      v929 = *((_QWORD *)&v915 + 1);
    v930 = v928 & 0x7FFFFFFFFFFFFLL;
    *((_QWORD *)&v932 + 1) = v929;
    *(_QWORD *)&v932 = v928;
    v931 = v932 >> 51;
    v76 = __CFADD__((_QWORD)v916, v931);
    v933 = v916 + v931;
    if (v76)
      v934 = *((_QWORD *)&v916 + 1) + 1;
    else
      v934 = *((_QWORD *)&v916 + 1);
    v908 = v933 & 0x7FFFFFFFFFFFFLL;
    *((_QWORD *)&v936 + 1) = v934;
    *(_QWORD *)&v936 = v933;
    v935 = v936 >> 51;
    v937 = __PAIR128__(v919, v920)
         + (unint64_t)v907 * (unsigned __int128)(unint64_t)v907
         + __PAIR128__(v917, v918);
    v76 = __CFADD__((_QWORD)v937, v935);
    v938 = v937 + v935;
    if (v76)
      v939 = *((_QWORD *)&v937 + 1) + 1;
    else
      v939 = (__PAIR128__(v919, v920)
            + (unint64_t)v907 * (unsigned __int128)(unint64_t)v907
            + __PAIR128__(v917, v918)) >> 64;
    v897 = v938 & 0x7FFFFFFFFFFFFLL;
    *((_QWORD *)&v940 + 1) = v939;
    *(_QWORD *)&v940 = v938;
    v941 = (v910 & 0x7FFFFFFFFFFFFLL) + 19 * (v940 >> 51);
    v905 = v941 & 0x7FFFFFFFFFFFFLL;
    v942 = v925 + (v941 >> 51);
    v906 = v942 & 0x7FFFFFFFFFFFFLL;
    v907 = v930 + (v942 >> 51);
    v76 = __CFADD__(v904++, 1);
  }
  while (!v76);
  v943 = v897 * 19 * v902 + v908 * 19 * v903 + v905 * v900 + v906 * 19 * v1286 + v907 * 19 * v1290;
  v944 = ((unint64_t)v897 * (unsigned __int128)(unint64_t)(19 * v903)
        + (unint64_t)v908 * (unsigned __int128)(unint64_t)(19 * v1290)
        + (unint64_t)v905 * (unsigned __int128)(unint64_t)v902
        + (unint64_t)v906 * (unsigned __int128)(unint64_t)v900
        + (unint64_t)v907 * (unsigned __int128)(unint64_t)(19 * v1286)) >> 64;
  v945 = v897 * 19 * v903 + v908 * 19 * v1290 + v905 * v902 + v906 * v900 + v907 * 19 * v1286;
  v946 = (__int128)((unint64_t)v897 * (unsigned __int128)(unint64_t)(19 * v902)
                  + (unint64_t)v908 * (unsigned __int128)(unint64_t)(19 * v903)
                  + (unint64_t)v905 * (unsigned __int128)(unint64_t)v900
                  + (unint64_t)v906 * (unsigned __int128)(unint64_t)(19 * v1286)
                  + (unint64_t)v907 * (unsigned __int128)(unint64_t)(19 * v1290)) >> 51;
  v76 = __CFADD__(v945, v946);
  v947 = v945 + v946;
  if (v76)
    ++v944;
  *((_QWORD *)&v949 + 1) = v944;
  *(_QWORD *)&v949 = v947;
  v948 = v949 >> 51;
  v951 = ((unint64_t)v897 * (unsigned __int128)(unint64_t)(19 * v1290)
        + (unint64_t)v908 * (unsigned __int128)(unint64_t)(19 * v1286)
        + (unint64_t)v905 * (unsigned __int128)(unint64_t)v903
        + (unint64_t)v906 * (unsigned __int128)(unint64_t)v902
        + (unint64_t)v907 * (unsigned __int128)(unint64_t)v900) >> 64;
  v950 = v897 * 19 * v1290 + v908 * 19 * v1286 + v905 * v903 + v906 * v902 + v907 * v900;
  v76 = __CFADD__(v950, v948);
  v952 = v950 + v948;
  if (v76)
    ++v951;
  v953 = (unint64_t)v897 * (unsigned __int128)(unint64_t)(19 * v1286)
       + (unint64_t)v908 * (unsigned __int128)(unint64_t)v900
       + (v1295 & 0x7FFFFFFFFFFFFLL) * (unsigned __int128)(unint64_t)v905
       + (unint64_t)v906 * (unsigned __int128)(unint64_t)v903
       + (unint64_t)v907 * (unsigned __int128)(unint64_t)v902;
  *((_QWORD *)&v955 + 1) = v951;
  *(_QWORD *)&v955 = v952;
  v954 = v955 >> 51;
  v956 = v953 + v954;
  if (__CFADD__((_QWORD)v953, v954))
    v957 = *((_QWORD *)&v953 + 1) + 1;
  else
    v957 = ((unint64_t)v897 * (unsigned __int128)(unint64_t)(19 * v1286)
          + (unint64_t)v908 * (unsigned __int128)(unint64_t)v900
          + (v1295 & 0x7FFFFFFFFFFFFLL) * (unsigned __int128)(unint64_t)v905
          + (unint64_t)v906 * (unsigned __int128)(unint64_t)v903
          + (unint64_t)v907 * (unsigned __int128)(unint64_t)v902) >> 64;
  v958 = (unint64_t)v897 * (unsigned __int128)(unint64_t)v900
       + (unint64_t)v908 * (unsigned __int128)(unint64_t)v902
       + (v1313 & 0x7FFFFFFFFFFFFLL) * (unsigned __int128)(unint64_t)v905
       + (v1295 & 0x7FFFFFFFFFFFFLL) * (unsigned __int128)(unint64_t)v906
       + (unint64_t)v907 * (unsigned __int128)(unint64_t)v903;
  v959 = v947 & 0x7FFFFFFFFFFFFLL;
  *((_QWORD *)&v961 + 1) = v957;
  *(_QWORD *)&v961 = v956;
  v960 = v961 >> 51;
  v962 = v952 & 0x7FFFFFFFFFFFFLL;
  v963 = v958 + v960;
  if (__CFADD__((_QWORD)v958, v960))
    v964 = *((_QWORD *)&v958 + 1) + 1;
  else
    v964 = *((_QWORD *)&v958 + 1);
  *((_QWORD *)&v965 + 1) = v964;
  *(_QWORD *)&v965 = v958 + v960;
  v966 = (v943 & 0x7FFFFFFFFFFFFLL) + 19 * (v965 >> 51);
  v967 = v966 & 0x7FFFFFFFFFFFFLL;
  v968 = v959 + (v966 >> 51);
  v969 = v968 & 0x7FFFFFFFFFFFFLL;
  v970 = v962 + (v968 >> 51);
  v971 = -50;
  do
  {
    v972 = v963 & 0x7FFFFFFFFFFFFLL;
    v973 = v956 & 0x7FFFFFFFFFFFFLL;
    v974 = 19 * (v963 & 0x7FFFFFFFFFFFFLL);
    v975 = 38 * (v963 & 0x7FFFFFFFFFFFFLL);
    v976 = (v956 & 0x7FFFFFFFFFFFFLL) * (unsigned __int128)(unint64_t)(38 * v970)
         + (unint64_t)v967 * (unsigned __int128)(unint64_t)v967
         + (unint64_t)v975 * (unsigned __int128)(unint64_t)v969;
    v977 = ((unint64_t)(2 * v967) * (unsigned __int128)(unint64_t)v969) >> 64;
    v978 = 2 * v967 * v969;
    v979 = ((unint64_t)v975 * (unsigned __int128)(unint64_t)v970) >> 64;
    v980 = v975 * v970;
    v981 = 19 * (v956 & 0x7FFFFFFFFFFFFLL);
    v982 = ((unint64_t)v981 * (unsigned __int128)(v956 & 0x7FFFFFFFFFFFFLL)) >> 64;
    v983 = v981 * v973;
    v984 = (unint64_t)v970 * (unsigned __int128)(unint64_t)(2 * v967)
         + (unint64_t)v969 * (unsigned __int128)(unint64_t)v969
         + (unint64_t)v975 * (unsigned __int128)(unint64_t)v973;
    v985 = (unint64_t)v973 * (unsigned __int128)(unint64_t)(2 * v967)
         + (unint64_t)(2 * v969) * (unsigned __int128)(unint64_t)v970
         + (unint64_t)v974 * (unsigned __int128)(unint64_t)v972;
    v986 = ((unint64_t)v972 * (unsigned __int128)(unint64_t)(2 * v967)) >> 64;
    v987 = v972 * 2 * v967;
    v988 = ((unint64_t)v973 * (unsigned __int128)(unint64_t)(2 * v969)) >> 64;
    v989 = v973 * 2 * v969;
    v990 = ((unint64_t)v970 * (unsigned __int128)(unint64_t)v970) >> 64;
    v991 = v976 >> 51;
    v992 = v970 * v970;
    v76 = __CFADD__(v983 + v978 + v980, v991);
    v993 = v983 + v978 + v980 + v991;
    if (v76)
      v994 = ((__PAIR128__(v977 + (unint64_t)__CFADD__(v983, v978) + v982, v983 + v978) + __PAIR128__(v979, v980)) >> 64)
           + 1;
    else
      v994 = (__PAIR128__(v977 + (unint64_t)__CFADD__(v983, v978) + v982, v983 + v978) + __PAIR128__(v979, v980)) >> 64;
    *((_QWORD *)&v996 + 1) = v994;
    *(_QWORD *)&v996 = v993;
    v995 = v996 >> 51;
    v997 = v993 & 0x7FFFFFFFFFFFFLL;
    v998 = v984 + v995;
    if (__CFADD__((_QWORD)v984, v995))
      v999 = *((_QWORD *)&v984 + 1) + 1;
    else
      v999 = *((_QWORD *)&v984 + 1);
    v1000 = v998 & 0x7FFFFFFFFFFFFLL;
    *((_QWORD *)&v1002 + 1) = v999;
    *(_QWORD *)&v1002 = v998;
    v1001 = v1002 >> 51;
    v956 = v985 + v1001;
    if (__CFADD__((_QWORD)v985, v1001))
      v1003 = *((_QWORD *)&v985 + 1) + 1;
    else
      v1003 = *((_QWORD *)&v985 + 1);
    *((_QWORD *)&v1005 + 1) = v1003;
    *(_QWORD *)&v1005 = v956;
    v1004 = v1005 >> 51;
    v1006 = __PAIR128__(v988, v989) + __PAIR128__(v990, v992) + __PAIR128__(v986, v987);
    v963 = v1006 + v1004;
    if (__CFADD__((_QWORD)v1006, v1004))
      v1007 = *((_QWORD *)&v1006 + 1) + 1;
    else
      v1007 = (__PAIR128__(v988, v989) + __PAIR128__(v990, v992) + __PAIR128__(v986, v987)) >> 64;
    *((_QWORD *)&v1008 + 1) = v1007;
    *(_QWORD *)&v1008 = v1006 + v1004;
    v1009 = (v976 & 0x7FFFFFFFFFFFFLL) + 19 * (v1008 >> 51);
    v967 = v1009 & 0x7FFFFFFFFFFFFLL;
    v1010 = v997 + (v1009 >> 51);
    v969 = v1010 & 0x7FFFFFFFFFFFFLL;
    v970 = v1000 + (v1010 >> 51);
    v76 = __CFADD__(v971++, 1);
  }
  while (!v76);
  v1011 = v956 & 0x7FFFFFFFFFFFFLL;
  v1012 = v963 & 0x7FFFFFFFFFFFFLL;
  v1013 = (v963 & 0x7FFFFFFFFFFFFLL) * 19 * v823
        + (v956 & 0x7FFFFFFFFFFFFLL) * v1328
        + v967 * v821
        + v969 * v865
        + v970 * v1344;
  v1014 = ((v963 & 0x7FFFFFFFFFFFFLL) * (unsigned __int128)(unint64_t)v1328
         + (v956 & 0x7FFFFFFFFFFFFLL) * (unsigned __int128)(unint64_t)v1344
         + (unint64_t)v967 * (unsigned __int128)(unint64_t)v823
         + (unint64_t)v969 * (unsigned __int128)(unint64_t)v821
         + (unint64_t)v970 * (unsigned __int128)(unint64_t)v865) >> 64;
  v1015 = (v963 & 0x7FFFFFFFFFFFFLL) * v1328
        + (v956 & 0x7FFFFFFFFFFFFLL) * v1344
        + v967 * v823
        + v969 * v821
        + v970 * v865;
  v1016 = (__int128)((v963 & 0x7FFFFFFFFFFFFLL) * (unsigned __int128)(unint64_t)(19 * v823)
                   + (v956 & 0x7FFFFFFFFFFFFLL) * (unsigned __int128)(unint64_t)v1328
                   + (unint64_t)v967 * (unsigned __int128)(unint64_t)v821
                   + (unint64_t)v969 * (unsigned __int128)(unint64_t)v865
                   + (unint64_t)v970 * (unsigned __int128)(unint64_t)v1344) >> 51;
  v76 = __CFADD__(v1015, v1016);
  v1017 = v1015 + v1016;
  if (v76)
    ++v1014;
  v1019 = (__PAIR128__((((unint64_t)v1011 * (unsigned __int128)(unint64_t)v865) >> 64)+ __CFADD__((v963 & 0x7FFFFFFFFFFFFLL) * v1344, (v956 & 0x7FFFFFFFFFFFFLL) * v865)+ (((unint64_t)v1012 * (unsigned __int128)(unint64_t)v1344) >> 64), (v963 & 0x7FFFFFFFFFFFFLL) * v1344 + (v956 & 0x7FFFFFFFFFFFFuLL) * v865)+ (unint64_t)v967 * (unsigned __int128)(unint64_t)v1355+ (unint64_t)v969 * (unsigned __int128)(unint64_t)v823+ (unint64_t)v970 * (unsigned __int128)(unint64_t)v821) >> 64;
  v1018 = (v963 & 0x7FFFFFFFFFFFFLL) * v1344
        + (v956 & 0x7FFFFFFFFFFFFLL) * v865
        + v967 * v1355
        + v969 * v823
        + v970 * v821;
  *((_QWORD *)&v1021 + 1) = v1014;
  *(_QWORD *)&v1021 = v1017;
  v1020 = v1021 >> 51;
  v76 = __CFADD__(v1018, v1020);
  v1022 = v1018 + v1020;
  if (v76)
    ++v1019;
  v1023 = (unint64_t)v1012 * (unsigned __int128)(unint64_t)v865
        + (unint64_t)v1011 * (unsigned __int128)(unint64_t)v821
        + (unint64_t)v1333 * (unsigned __int128)(unint64_t)v967
        + (unint64_t)v969 * (unsigned __int128)(unint64_t)v1355
        + (unint64_t)v970 * (unsigned __int128)(unint64_t)v823;
  *((_QWORD *)&v1025 + 1) = v1019;
  *(_QWORD *)&v1025 = v1022;
  v1024 = v1025 >> 51;
  v1026 = v1023 + v1024;
  if (__CFADD__((_QWORD)v1023, v1024))
    v1027 = *((_QWORD *)&v1023 + 1) + 1;
  else
    v1027 = *((_QWORD *)&v1023 + 1);
  v1028 = (unint64_t)v1012 * (unsigned __int128)(unint64_t)v821
        + (unint64_t)v1011 * (unsigned __int128)(unint64_t)v823
        + (unint64_t)v1323 * (unsigned __int128)(unint64_t)v967
        + (unint64_t)v1333 * (unsigned __int128)(unint64_t)v969;
  v1032 = v1013 & 0x7FFFFFFFFFFFFLL;
  *((_QWORD *)&v1034 + 1) = v1027;
  *(_QWORD *)&v1034 = v1026;
  v1033 = v1034 >> 51;
  v1031 = v1028 + (unint64_t)v970 * (unsigned __int128)(unint64_t)v1355;
  v1029 = v1031 >> 64;
  v1030 = v1031;
  v1035 = v1030 + v1033;
  if (__CFADD__(v1030, v1033))
    ++v1029;
  *((_QWORD *)&v1036 + 1) = v1029;
  *(_QWORD *)&v1036 = v1030 + v1033;
  v1037 = v1032 + 19 * (v1036 >> 51);
  v1038 = v1037 & 0x7FFFFFFFFFFFFLL;
  v1039 = (v1017 & 0x7FFFFFFFFFFFFLL) + (v1037 >> 51);
  v1040 = v1039 & 0x7FFFFFFFFFFFFLL;
  v1041 = (v1022 & 0x7FFFFFFFFFFFFLL) + (v1039 >> 51);
  v1042 = -5;
  do
  {
    v1043 = v1026 & 0x7FFFFFFFFFFFFLL;
    v1044 = (v1026 & 0x7FFFFFFFFFFFFLL) * (unsigned __int128)(unint64_t)(38 * v1041)
          + (unint64_t)v1038 * (unsigned __int128)(unint64_t)v1038
          + 38 * (v1035 & 0x7FFFFFFFFFFFFuLL) * (unsigned __int128)(unint64_t)v1040;
    v1045 = ((unint64_t)(2 * v1038) * (unsigned __int128)(unint64_t)v1040) >> 64;
    v1046 = 2 * v1038 * v1040;
    v1047 = (38 * (v1035 & 0x7FFFFFFFFFFFFuLL) * (unsigned __int128)(unint64_t)v1041) >> 64;
    v1048 = 38 * (v1035 & 0x7FFFFFFFFFFFFLL) * v1041;
    v1049 = ((unint64_t)(19 * v1043) * (unsigned __int128)(unint64_t)v1043) >> 64;
    v1050 = 19 * v1043 * v1043;
    v1051 = (unint64_t)v1041 * (unsigned __int128)(unint64_t)(2 * v1038)
          + (unint64_t)v1040 * (unsigned __int128)(unint64_t)v1040
          + 38 * (v1035 & 0x7FFFFFFFFFFFFuLL) * (unsigned __int128)(unint64_t)v1043;
    v1052 = (unint64_t)v1043 * (unsigned __int128)(unint64_t)(2 * v1038)
          + (unint64_t)(2 * v1040) * (unsigned __int128)(unint64_t)v1041
          + 19 * (v1035 & 0x7FFFFFFFFFFFFuLL) * (unsigned __int128)(v1035 & 0x7FFFFFFFFFFFFLL);
    v1053 = ((v1035 & 0x7FFFFFFFFFFFFLL) * (unsigned __int128)(unint64_t)(2 * v1038)) >> 64;
    v1054 = (v1035 & 0x7FFFFFFFFFFFFLL) * 2 * v1038;
    v1055 = ((unint64_t)v1043 * (unsigned __int128)(unint64_t)(2 * v1040)) >> 64;
    v1056 = v1043 * 2 * v1040;
    v1057 = ((unint64_t)v1041 * (unsigned __int128)(unint64_t)v1041) >> 64;
    v1058 = v1044 >> 51;
    v1059 = v1041 * v1041;
    v76 = __CFADD__(v1050 + v1046 + v1048, v1058);
    v1060 = v1050 + v1046 + v1048 + v1058;
    if (v76)
      v1061 = ((__PAIR128__(v1045 + (unint64_t)__CFADD__(v1050, v1046) + v1049, v1050 + v1046)
              + __PAIR128__(v1047, v1048)) >> 64)
            + 1;
    else
      v1061 = (__PAIR128__(v1045 + (unint64_t)__CFADD__(v1050, v1046) + v1049, v1050 + v1046)
             + __PAIR128__(v1047, v1048)) >> 64;
    *((_QWORD *)&v1063 + 1) = v1061;
    *(_QWORD *)&v1063 = v1060;
    v1062 = v1063 >> 51;
    v1064 = v1060 & 0x7FFFFFFFFFFFFLL;
    if (__CFADD__((_QWORD)v1051, v1062))
      v1065 = *((_QWORD *)&v1051 + 1) + 1;
    else
      v1065 = *((_QWORD *)&v1051 + 1);
    v1066 = (v1051 + v1062) & 0x7FFFFFFFFFFFFLL;
    *((_QWORD *)&v1068 + 1) = v1065;
    *(_QWORD *)&v1068 = v1051 + v1062;
    v1067 = v1068 >> 51;
    v1026 = v1052 + v1067;
    if (__CFADD__((_QWORD)v1052, v1067))
      v1069 = *((_QWORD *)&v1052 + 1) + 1;
    else
      v1069 = *((_QWORD *)&v1052 + 1);
    *((_QWORD *)&v1071 + 1) = v1069;
    *(_QWORD *)&v1071 = v1026;
    v1070 = v1071 >> 51;
    v1072 = __PAIR128__(v1055, v1056) + __PAIR128__(v1057, v1059) + __PAIR128__(v1053, v1054);
    v1035 = v1072 + v1070;
    if (__CFADD__((_QWORD)v1072, v1070))
      v1073 = *((_QWORD *)&v1072 + 1) + 1;
    else
      v1073 = (__PAIR128__(v1055, v1056) + __PAIR128__(v1057, v1059) + __PAIR128__(v1053, v1054)) >> 64;
    *((_QWORD *)&v1074 + 1) = v1073;
    *(_QWORD *)&v1074 = v1072 + v1070;
    v1075 = (v1044 & 0x7FFFFFFFFFFFFLL) + 19 * (v1074 >> 51);
    v1038 = v1075 & 0x7FFFFFFFFFFFFLL;
    v1076 = v1064 + (v1075 >> 51);
    v1040 = v1076 & 0x7FFFFFFFFFFFFLL;
    v1041 = v1066 + (v1076 >> 51);
    v76 = __CFADD__(v1042++, 1);
  }
  while (!v76);
  v1077 = v1372 & 0x7FFFFFFFFFFFFLL;
  v1078 = v1361 & 0x7FFFFFFFFFFFFLL;
  v1079 = v1337 & 0x7FFFFFFFFFFFFLL;
  v1080 = v1366 & 0x7FFFFFFFFFFFFLL;
  v1081 = ((unint64_t)v1038 * (unsigned __int128)(v1361 & 0x7FFFFFFFFFFFFLL)) >> 64;
  v1082 = v1038 * (v1361 & 0x7FFFFFFFFFFFFLL);
  v1338 = (unint64_t)v1040 * (unsigned __int128)(v1361 & 0x7FFFFFFFFFFFFLL);
  v1329 = (unint64_t)v1038 * (unsigned __int128)(v1366 & 0x7FFFFFFFFFFFFLL);
  v1356 = (unint64_t)v1038 * (unsigned __int128)(unint64_t)v1376;
  v1083 = v1026 & 0x7FFFFFFFFFFFFLL;
  v1367 = (unint64_t)v1079 * (unsigned __int128)(unint64_t)v1038;
  v1084 = v1035 & 0x7FFFFFFFFFFFFLL;
  v1085 = 19 * v1376;
  v1086 = (v1035 & 0x7FFFFFFFFFFFFLL) * (unsigned __int128)(unint64_t)(19 * v1080)
        + (unint64_t)v1083 * (unsigned __int128)(unint64_t)(19 * v1376);
  v1319 = (unint64_t)v1077 * (unsigned __int128)(unint64_t)v1038;
  v1077 *= 19;
  v1087 = 19 * v1079;
  v1088 = __PAIR128__(v1081 + (unint64_t)__CFADD__((_QWORD)v1086, v1082) + *((_QWORD *)&v1086 + 1), (uint64_t)v1086 + v1082)+ (unint64_t)v1040 * (unsigned __int128)(unint64_t)v1077+ (unint64_t)v1041 * (unsigned __int128)(unint64_t)(19 * v1079);
  v1314 = ((unint64_t)v1079 * (unsigned __int128)(unint64_t)v1040) >> 64;
  v1089 = v1079 * v1040;
  v1090 = ((unint64_t)v1040 * (unsigned __int128)(unint64_t)v1080) >> 64;
  v1091 = v1040 * v1080;
  v1092 = ((unint64_t)v1040 * (unsigned __int128)(unint64_t)v1376) >> 64;
  v1093 = v1040 * v1376;
  v1094 = ((unint64_t)v1041 * (unsigned __int128)(unint64_t)v1078) >> 64;
  v1095 = v1041 * v1078;
  v1096 = ((unint64_t)v1083 * (unsigned __int128)(unint64_t)v1078) >> 64;
  v1097 = v1083 * v1078;
  v1098 = ((unint64_t)v1084 * (unsigned __int128)(unint64_t)v1078) >> 64;
  v1099 = v1084 * v1078;
  v1100 = ((unint64_t)v1041 * (unsigned __int128)(unint64_t)v1080) >> 64;
  v1101 = v1041 * v1080;
  v1102 = ((unint64_t)v1083 * (unsigned __int128)(unint64_t)v1080) >> 64;
  v1103 = v1083 * v1080;
  v1291 = ((unint64_t)v1041 * (unsigned __int128)(unint64_t)v1376) >> 64;
  v1296 = v1089;
  v1377 = v1041 * v1376;
  v1104 = ((unint64_t)v1041 * (unsigned __int128)(unint64_t)v1077) >> 64;
  v1105 = v1041 * v1077;
  v1106 = ((unint64_t)v1083 * (unsigned __int128)(unint64_t)v1087) >> 64;
  v1107 = v1083 * v1087;
  v1108 = ((unint64_t)v1083 * (unsigned __int128)(unint64_t)v1077) >> 64;
  v1109 = v1083 * v1077;
  v1110 = ((unint64_t)v1084 * (unsigned __int128)(unint64_t)v1087) >> 64;
  v1111 = v1084 * v1087;
  v1112 = ((unint64_t)v1084 * (unsigned __int128)(unint64_t)v1077) >> 64;
  v1113 = v1084 * v1077;
  v1115 = __PAIR128__(v1106+ __CFADD__(v1084 * v1085, v1107)+ (((unint64_t)v1084 * (unsigned __int128)(unint64_t)v1085) >> 64), v1084 * v1085 + v1107)+ v1329+ v1338+ __PAIR128__(v1104, v1105);
  v1114 = *((_QWORD *)&v1115 + 1);
  v1116 = v1088 >> 51;
  v1117 = v1115 + v1116;
  if (__CFADD__((_QWORD)v1115, v1116))
    v1114 = *((_QWORD *)&v1115 + 1) + 1;
  v1119 = (__PAIR128__(v1110, v1111)
         + __PAIR128__(v1108, v1109)
         + v1356
         + __PAIR128__(v1090, v1091)
         + __PAIR128__(v1094, v1095)) >> 64;
  v1118 = v1111 + v1109 + v1356 + v1091 + v1095;
  *((_QWORD *)&v1121 + 1) = v1114;
  *(_QWORD *)&v1121 = v1117;
  v1120 = v1121 >> 51;
  v76 = __CFADD__(v1118, v1120);
  v1122 = v1118 + v1120;
  v1123 = v1117 & 0x7FFFFFFFFFFFFLL;
  if (v76)
    ++v1119;
  *((_QWORD *)&v1125 + 1) = v1119;
  *(_QWORD *)&v1125 = v1122;
  v1124 = v1125 >> 51;
  v1126 = v1122 & 0x7FFFFFFFFFFFFLL;
  v1127 = __PAIR128__(v1112, v1113)
        + __PAIR128__(v1096, v1097)
        + v1367
        + __PAIR128__(v1092, v1093)
        + __PAIR128__(v1100, v1101);
  v76 = __CFADD__((_QWORD)v1127, v1124);
  v1128 = v1127 + v1124;
  if (v76)
    v1129 = *((_QWORD *)&v1127 + 1) + 1;
  else
    v1129 = (__PAIR128__(v1112, v1113)
           + __PAIR128__(v1096, v1097)
           + v1367
           + __PAIR128__(v1092, v1093)
           + __PAIR128__(v1100, v1101)) >> 64;
  *((_QWORD *)&v1131 + 1) = v1129;
  *(_QWORD *)&v1131 = v1128;
  v1130 = v1131 >> 51;
  v1132 = v1128 & 0x7FFFFFFFFFFFFLL;
  v1133 = __PAIR128__(v1098, v1099)
        + __PAIR128__(v1102, v1103)
        + v1319
        + __PAIR128__(v1314, v1296)
        + __PAIR128__(v1291, v1377);
  v1134 = v1133 + v1130;
  if (__CFADD__((_QWORD)v1133, v1130))
    v1135 = *((_QWORD *)&v1133 + 1) + 1;
  else
    v1135 = (__PAIR128__(v1098, v1099)
           + __PAIR128__(v1102, v1103)
           + v1319
           + __PAIR128__(v1314, v1296)
           + __PAIR128__(v1291, v1377)) >> 64;
  *((_QWORD *)&v1136 + 1) = v1135;
  *(_QWORD *)&v1136 = v1134;
  v1137 = (v1088 & 0x7FFFFFFFFFFFFLL) + 19 * (v1136 >> 51);
  v1138 = v1123 + (v1137 >> 51);
  v1139 = v1126 + (v1138 >> 51);
  v1315 = v1308 * (unsigned __int128)(v1137 & 0x7FFFFFFFFFFFFLL);
  v1297 = ((unint64_t)v1305 * (unsigned __int128)(v1138 & 0x7FFFFFFFFFFFFLL)) >> 64;
  v1140 = v1305 * (v1138 & 0x7FFFFFFFFFFFFLL);
  v1362 = (v1301 * (unsigned __int128)(v1137 & 0x7FFFFFFFFFFFFLL)) >> 64;
  v1345 = v1301 * (v1137 & 0x7FFFFFFFFFFFFLL);
  v1334 = (unint64_t)v1305 * (unsigned __int128)(unint64_t)v1139;
  v1324 = v1308 * (unsigned __int128)(v1138 & 0x7FFFFFFFFFFFFLL);
  v1368 = ((unint64_t)v1132 * (unsigned __int128)(unint64_t)v1305) >> 64;
  v1357 = v1132 * v1305;
  v1373 = (v1134 & 0x7FFFFFFFFFFFFLL) * (unsigned __int128)(unint64_t)v1305;
  v1141 = 19 * (v1134 & 0x7FFFFFFFFFFFFLL);
  v1142 = 19 * v1139;
  v1143 = 19 * v1132;
  v1147 = (v1308 * (unsigned __int128)(unint64_t)v1139) >> 64;
  v1146 = v1308 * (unsigned __int128)(unint64_t)v1141
        + (unint64_t)v1305 * (unsigned __int128)(v1137 & 0x7FFFFFFFFFFFFLL)
        + v1301 * (unsigned __int128)(unint64_t)(19 * v1132)
        + v1303 * (unsigned __int128)(unint64_t)(19 * v1139)
        + v1299 * (unsigned __int128)(19 * (v1138 & 0x7FFFFFFFFFFFFLL));
  v1145 = v1146 >> 64;
  v1144 = v1146;
  v1148 = ((unint64_t)v1132 * (unsigned __int128)v1308) >> 64;
  v1149 = v1132 * v1308;
  v1150 = v1308 * v1139;
  v1151 = (v1303 * (unsigned __int128)(v1137 & 0x7FFFFFFFFFFFFLL)) >> 64;
  v1152 = v1303 * (v1137 & 0x7FFFFFFFFFFFFLL);
  v1306 = v1299 * (unsigned __int128)(v1137 & 0x7FFFFFFFFFFFFLL);
  v1153 = (v1301 * (unsigned __int128)(v1138 & 0x7FFFFFFFFFFFFLL)) >> 64;
  v1154 = v1301 * (v1138 & 0x7FFFFFFFFFFFFLL);
  v1155 = (v1303 * (unsigned __int128)(v1138 & 0x7FFFFFFFFFFFFLL)) >> 64;
  v1156 = v1303 * (v1138 & 0x7FFFFFFFFFFFFLL);
  v1157 = (v1301 * (unsigned __int128)(unint64_t)v1139) >> 64;
  v1158 = v1301 * v1139;
  v1159 = (v1301 * (unsigned __int128)(unint64_t)v1141) >> 64;
  v1160 = v1301 * v1141;
  v1161 = (v1303 * (unsigned __int128)(unint64_t)(19 * v1132)) >> 64;
  v1162 = v1303 * 19 * v1132;
  v1163 = (v1303 * (unsigned __int128)(unint64_t)v1141) >> 64;
  v1164 = v1303 * v1141;
  v1165 = (v1299 * (unsigned __int128)(unint64_t)(19 * v1132)) >> 64;
  v1166 = v1299 * v1143;
  v1167 = (v1299 * (unsigned __int128)(unint64_t)v1141) >> 64;
  v1168 = v1299 * v1141;
  v1169 = (v1315 + __PAIR128__(v1297, v1140) + __PAIR128__(v1159, v1160) + __PAIR128__(v1161, v1162)) >> 64;
  v1170 = v1315 + v1140 + v1160 + v1162;
  v1171 = (__int128)__PAIR128__(v1145, v1144) >> 51;
  v1173 = __PAIR128__(v1169, v1170) + v1299 * (unsigned __int128)(unint64_t)v1142;
  v1172 = *((_QWORD *)&v1173 + 1);
  v1174 = v1173 + v1171;
  if (__CFADD__((_QWORD)v1173, v1171))
    v1172 = *((_QWORD *)&v1173 + 1) + 1;
  *((_QWORD *)&v1176 + 1) = v1172;
  *(_QWORD *)&v1176 = v1173 + v1171;
  v1175 = v1176 >> 51;
  v1177 = v1324 + v1334 + __PAIR128__(v1362, v1345) + __PAIR128__(v1163, v1164) + __PAIR128__(v1165, v1166);
  v76 = __CFADD__((_QWORD)v1177, v1175);
  v1178 = v1177 + v1175;
  if (v76)
    v1179 = *((_QWORD *)&v1177 + 1) + 1;
  else
    v1179 = (v1324 + v1334 + __PAIR128__(v1362, v1345) + __PAIR128__(v1163, v1164) + __PAIR128__(v1165, v1166)) >> 64;
  *((_QWORD *)&v1181 + 1) = v1179;
  *(_QWORD *)&v1181 = v1178;
  v1180 = v1181 >> 51;
  v1182 = __PAIR128__(v1368 + (unint64_t)__CFADD__(v1150, v1357) + v1147, v1150 + v1357)
        + __PAIR128__(v1153, v1154)
        + __PAIR128__(v1151, v1152)
        + __PAIR128__(v1167, v1168);
  v76 = __CFADD__((_QWORD)v1182, v1180);
  v1183 = v1182 + v1180;
  if (v76)
    v1184 = *((_QWORD *)&v1182 + 1) + 1;
  else
    v1184 = (__PAIR128__(v1368 + (unint64_t)__CFADD__(v1150, v1357) + v1147, v1150 + v1357)
           + __PAIR128__(v1153, v1154)
           + __PAIR128__(v1151, v1152)
           + __PAIR128__(v1167, v1168)) >> 64;
  *((_QWORD *)&v1186 + 1) = v1184;
  *(_QWORD *)&v1186 = v1183;
  v1185 = v1186 >> 51;
  v1188 = (__PAIR128__(v1148, v1149) + v1373 + __PAIR128__(v1157, v1158) + __PAIR128__(v1155, v1156) + v1306) >> 64;
  v1187 = v1149 + v1373 + v1158 + v1156 + v1306;
  v76 = __CFADD__(v1187, v1185);
  v1189 = v1187 + v1185;
  v1190 = v1174 & 0x7FFFFFFFFFFFFLL;
  v1191 = v1178 & 0x7FFFFFFFFFFFFLL;
  if (v76)
    ++v1188;
  *((_QWORD *)&v1192 + 1) = v1188;
  *(_QWORD *)&v1192 = v1189;
  v1193 = (v1144 & 0x7FFFFFFFFFFFFLL) + 19 * (v1192 >> 51);
  v1194 = v1193 & 0x7FFFFFFFFFFFFLL;
  v1195 = v1190 + (v1193 >> 51);
  v1196 = v1195 & 0x7FFFFFFFFFFFFLL;
  v1197 = v1191 + (v1195 >> 51);
  v1198 = (v1183 & 0x7FFFFFFFFFFFFLL) + (v1197 >> 51);
  v1199 = ((__int128)(unint64_t)v1198 >> 51) + (v1189 & 0x7FFFFFFFFFFFFLL);
  v1200 = v1194 + 19 * ((__int128)v1199 >> 51);
  v1201 = ((__int128)v1200 >> 51) + v1196;
  v1202 = ((__int128)v1201 >> 51) + (v1197 & 0x7FFFFFFFFFFFFLL);
  v1203 = ((__int128)v1202 >> 51) + (v1198 & 0x7FFFFFFFFFFFFLL);
  v1204 = ((__int128)v1203 >> 51) + (v1199 & 0x7FFFFFFFFFFFFLL);
  v1205 = (v1200 & 0x7FFFFFFFFFFFFLL) + 19 * ((__int128)v1204 >> 51) + 19;
  v1206 = ((__int128)v1205 >> 51) + (v1201 & 0x7FFFFFFFFFFFFLL);
  v1207 = ((__int128)v1206 >> 51) + (v1202 & 0x7FFFFFFFFFFFFLL);
  v1208 = ((__int128)v1207 >> 51) + (v1203 & 0x7FFFFFFFFFFFFLL);
  v1209 = ((__int128)v1208 >> 51) + (v1204 & 0x7FFFFFFFFFFFFLL);
  v1210 = (v1205 & 0x7FFFFFFFFFFFFLL) + 19 * ((__int128)v1209 >> 51) + 0x7FFFFFFFFFFEDLL;
  v1211 = (v1206 & 0x7FFFFFFFFFFFFLL) + 0x7FFFFFFFFFFFFLL + ((__int128)v1210 >> 51);
  v1212 = (v1207 & 0x7FFFFFFFFFFFFLL) + 0x7FFFFFFFFFFFFLL + ((__int128)v1211 >> 51);
  *(_QWORD *)&v1192 = (v1208 & 0x7FFFFFFFFFFFFLL) + 0x7FFFFFFFFFFFFLL + ((__int128)v1212 >> 51);
  v1213 = v1209 + 0x7FFFFFFFFFFFFLL + ((__int128)(unint64_t)v1192 >> 51);
  LOWORD(v1214) = v1210;
  BYTE2(v1214) = BYTE2(v1210);
  BYTE3(v1214) = BYTE3(v1210);
  BYTE4(v1214) = BYTE4(v1210);
  BYTE5(v1214) = BYTE5(v1210);
  BYTE6(v1214) = (v1210 & 0x7000000000000 | (v1211 << 51)) >> 48;
  BYTE7(v1214) = v1211 >> 5;
  BYTE8(v1214) = v1211 >> 13;
  BYTE9(v1214) = v1211 >> 21;
  BYTE10(v1214) = v1211 >> 29;
  BYTE11(v1214) = v1211 >> 37;
  BYTE12(v1214) = ((v1211 >> 13) & 0x3FFFFFFFFFLL | (v1212 << 38)) >> 32;
  BYTE13(v1214) = v1212 >> 2;
  BYTE14(v1214) = v1212 >> 10;
  HIBYTE(v1214) = v1212 >> 18;
  LOBYTE(v1215) = v1212 >> 26;
  BYTE1(v1215) = v1212 >> 34;
  BYTE2(v1215) = v1212 >> 42;
  BYTE3(v1215) = ((v1212 >> 26) & 0x1FFFFFF | (((_DWORD)v1208 - 1 + ((__int128)v1212 >> 51)) << 25)) >> 24;
  BYTE4(v1215) = (unint64_t)v1192 >> 7;
  BYTE5(v1215) = (unint64_t)v1192 >> 15;
  BYTE6(v1215) = (unint64_t)v1192 >> 23;
  HIBYTE(v1215) = (unint64_t)v1192 >> 31;
  v288.i16[0] = ((unint64_t)v1192 >> 39) & 0xFFF;
  v288.i16[1] = (((unint64_t)v1192 >> 39) & 0xFFF | (((_DWORD)v1209
                                                           - 1
                                                           + ((__int128)(unint64_t)v1192 >> 51)) << 12)) >> 8;
  v288.i16[2] = ((_DWORD)v1209 - 1 + ((__int128)(unint64_t)v1192 >> 51)) >> 4;
  v288.i16[3] = ((_DWORD)v1209 - 1 + ((__int128)(unint64_t)v1192 >> 51)) >> 12;
  *(_BYTE *)(a1 + 28) = ((_DWORD)v1209 - 1 + ((__int128)(unint64_t)v1192 >> 51)) >> 20;
  *(_BYTE *)(a1 + 29) = v1213 >> 28;
  *(_BYTE *)(a1 + 30) = v1213 >> 36;
  *(_OWORD *)a1 = v1214;
  *(_QWORD *)(a1 + 16) = v1215;
  result = vmovn_s16(v288);
  *(_DWORD *)(a1 + 24) = result.i32[0];
  *(_BYTE *)(a1 + 31) = (v1213 >> 44) & 0x7F;
  return result;
}

uint64_t _sleepWakeCallback(void *a1, const char *a2, uint64_t a3, uint64_t a4)
{
  return objc_msgSend(a1, "_sleepWakeHandlerForService:type:arg:", a2, a3, a4);
}

id FBSDisplayLayoutElementControlCenterIdentifierFunction()
{
  return (id)constantValFBSDisplayLayoutElementControlCenterIdentifier;
}

id initValFBSDisplayLayoutElementControlCenterIdentifier()
{
  id *v0;

  if (FrontBoardServicesLibrary_sOnce != -1)
    dispatch_once(&FrontBoardServicesLibrary_sOnce, &__block_literal_global_1109);
  v0 = (id *)dlsym((void *)FrontBoardServicesLibrary_sLib, "FBSDisplayLayoutElementControlCenterIdentifier");
  if (v0)
    objc_storeStrong((id *)&constantValFBSDisplayLayoutElementControlCenterIdentifier, *v0);
  getFBSDisplayLayoutElementControlCenterIdentifier[0] = (uint64_t (*)())FBSDisplayLayoutElementControlCenterIdentifierFunction;
  return (id)constantValFBSDisplayLayoutElementControlCenterIdentifier;
}

id FBSDisplayLayoutElementLockScreenIdentifierFunction()
{
  return (id)constantValFBSDisplayLayoutElementLockScreenIdentifier;
}

id initValFBSDisplayLayoutElementLockScreenIdentifier()
{
  id *v0;

  if (FrontBoardServicesLibrary_sOnce != -1)
    dispatch_once(&FrontBoardServicesLibrary_sOnce, &__block_literal_global_1109);
  v0 = (id *)dlsym((void *)FrontBoardServicesLibrary_sLib, "FBSDisplayLayoutElementLockScreenIdentifier");
  if (v0)
    objc_storeStrong((id *)&constantValFBSDisplayLayoutElementLockScreenIdentifier, *v0);
  getFBSDisplayLayoutElementLockScreenIdentifier[0] = (uint64_t (*)())FBSDisplayLayoutElementLockScreenIdentifierFunction;
  return (id)constantValFBSDisplayLayoutElementLockScreenIdentifier;
}

id FBSDisplayLayoutElementNotificationCenterIdentifierFunction()
{
  return (id)constantValFBSDisplayLayoutElementNotificationCenterIdentifier;
}

id initValFBSDisplayLayoutElementNotificationCenterIdentifier()
{
  id *v0;

  if (FrontBoardServicesLibrary_sOnce != -1)
    dispatch_once(&FrontBoardServicesLibrary_sOnce, &__block_literal_global_1109);
  v0 = (id *)dlsym((void *)FrontBoardServicesLibrary_sLib, "FBSDisplayLayoutElementNotificationCenterIdentifier");
  if (v0)
    objc_storeStrong((id *)&constantValFBSDisplayLayoutElementNotificationCenterIdentifier, *v0);
  getFBSDisplayLayoutElementNotificationCenterIdentifier[0] = (uint64_t (*)())FBSDisplayLayoutElementNotificationCenterIdentifierFunction;
  return (id)constantValFBSDisplayLayoutElementNotificationCenterIdentifier;
}

id FBSDisplayLayoutElementSiriIdentifierFunction()
{
  return (id)constantValFBSDisplayLayoutElementSiriIdentifier;
}

id initValFBSDisplayLayoutElementSiriIdentifier()
{
  id *v0;

  if (FrontBoardServicesLibrary_sOnce != -1)
    dispatch_once(&FrontBoardServicesLibrary_sOnce, &__block_literal_global_1109);
  v0 = (id *)dlsym((void *)FrontBoardServicesLibrary_sLib, "FBSDisplayLayoutElementSiriIdentifier");
  if (v0)
    objc_storeStrong((id *)&constantValFBSDisplayLayoutElementSiriIdentifier, *v0);
  getFBSDisplayLayoutElementSiriIdentifier[0] = (uint64_t (*)())FBSDisplayLayoutElementSiriIdentifierFunction;
  return (id)constantValFBSDisplayLayoutElementSiriIdentifier;
}

id SBSDisplayLayoutElementAppSwitcherIdentifierFunction()
{
  return (id)constantValSBSDisplayLayoutElementAppSwitcherIdentifier;
}

id initValSBSDisplayLayoutElementAppSwitcherIdentifier()
{
  id *v0;

  if (SpringBoardServicesLibrary_sOnce != -1)
    dispatch_once(&SpringBoardServicesLibrary_sOnce, &__block_literal_global_1106);
  v0 = (id *)dlsym((void *)SpringBoardServicesLibrary_sLib, "SBSDisplayLayoutElementAppSwitcherIdentifier");
  if (v0)
    objc_storeStrong((id *)&constantValSBSDisplayLayoutElementAppSwitcherIdentifier, *v0);
  getSBSDisplayLayoutElementAppSwitcherIdentifier[0] = (uint64_t (*)())SBSDisplayLayoutElementAppSwitcherIdentifierFunction;
  return (id)constantValSBSDisplayLayoutElementAppSwitcherIdentifier;
}

id SBSDisplayLayoutElementCarPlayOEMIdentifierFunction()
{
  return (id)constantValSBSDisplayLayoutElementCarPlayOEMIdentifier;
}

id initValSBSDisplayLayoutElementCarPlayOEMIdentifier()
{
  id *v0;

  if (SpringBoardServicesLibrary_sOnce != -1)
    dispatch_once(&SpringBoardServicesLibrary_sOnce, &__block_literal_global_1106);
  v0 = (id *)dlsym((void *)SpringBoardServicesLibrary_sLib, "SBSDisplayLayoutElementCarPlayOEMIdentifier");
  if (v0)
    objc_storeStrong((id *)&constantValSBSDisplayLayoutElementCarPlayOEMIdentifier, *v0);
  getSBSDisplayLayoutElementCarPlayOEMIdentifier[0] = (uint64_t (*)())SBSDisplayLayoutElementCarPlayOEMIdentifierFunction;
  return (id)constantValSBSDisplayLayoutElementCarPlayOEMIdentifier;
}

id SBSDisplayLayoutElementHomeScreenIdentifierFunction()
{
  return (id)constantValSBSDisplayLayoutElementHomeScreenIdentifier;
}

id initValSBSDisplayLayoutElementHomeScreenIdentifier()
{
  id *v0;

  if (SpringBoardServicesLibrary_sOnce != -1)
    dispatch_once(&SpringBoardServicesLibrary_sOnce, &__block_literal_global_1106);
  v0 = (id *)dlsym((void *)SpringBoardServicesLibrary_sLib, "SBSDisplayLayoutElementHomeScreenIdentifier");
  if (v0)
    objc_storeStrong((id *)&constantValSBSDisplayLayoutElementHomeScreenIdentifier, *v0);
  getSBSDisplayLayoutElementHomeScreenIdentifier[0] = (uint64_t (*)())SBSDisplayLayoutElementHomeScreenIdentifierFunction;
  return (id)constantValSBSDisplayLayoutElementHomeScreenIdentifier;
}

id SBSDisplayLayoutElementLockScreenNavigationIdentifierFunction()
{
  return (id)constantValSBSDisplayLayoutElementLockScreenNavigationIdentifier;
}

id initValSBSDisplayLayoutElementLockScreenNavigationIdentifier()
{
  id *v0;

  if (SpringBoardServicesLibrary_sOnce != -1)
    dispatch_once(&SpringBoardServicesLibrary_sOnce, &__block_literal_global_1106);
  v0 = (id *)dlsym((void *)SpringBoardServicesLibrary_sLib, "SBSDisplayLayoutElementLockScreenNavigationIdentifier");
  if (v0)
    objc_storeStrong((id *)&constantValSBSDisplayLayoutElementLockScreenNavigationIdentifier, *v0);
  getSBSDisplayLayoutElementLockScreenNavigationIdentifier[0] = (uint64_t (*)())SBSDisplayLayoutElementLockScreenNavigationIdentifierFunction;
  return (id)constantValSBSDisplayLayoutElementLockScreenNavigationIdentifier;
}

id SBSDisplayLayoutElementLoginIdentifierFunction()
{
  return (id)constantValSBSDisplayLayoutElementLoginIdentifier;
}

id initValSBSDisplayLayoutElementLoginIdentifier()
{
  id *v0;

  if (SpringBoardServicesLibrary_sOnce != -1)
    dispatch_once(&SpringBoardServicesLibrary_sOnce, &__block_literal_global_1106);
  v0 = (id *)dlsym((void *)SpringBoardServicesLibrary_sLib, "SBSDisplayLayoutElementLoginIdentifier");
  if (v0)
    objc_storeStrong((id *)&constantValSBSDisplayLayoutElementLoginIdentifier, *v0);
  getSBSDisplayLayoutElementLoginIdentifier[0] = (uint64_t (*)())SBSDisplayLayoutElementLoginIdentifierFunction;
  return (id)constantValSBSDisplayLayoutElementLoginIdentifier;
}

id SBSDisplayLayoutElementNowPlayingIdentifierFunction()
{
  return (id)constantValSBSDisplayLayoutElementNowPlayingIdentifier;
}

id initValSBSDisplayLayoutElementNowPlayingIdentifier()
{
  id *v0;

  if (SpringBoardServicesLibrary_sOnce != -1)
    dispatch_once(&SpringBoardServicesLibrary_sOnce, &__block_literal_global_1106);
  v0 = (id *)dlsym((void *)SpringBoardServicesLibrary_sLib, "SBSDisplayLayoutElementNowPlayingIdentifier");
  if (v0)
    objc_storeStrong((id *)&constantValSBSDisplayLayoutElementNowPlayingIdentifier, *v0);
  getSBSDisplayLayoutElementNowPlayingIdentifier[0] = (uint64_t (*)())SBSDisplayLayoutElementNowPlayingIdentifierFunction;
  return (id)constantValSBSDisplayLayoutElementNowPlayingIdentifier;
}

id SBSDisplayLayoutElementPasscodeIdentifierFunction()
{
  return (id)constantValSBSDisplayLayoutElementPasscodeIdentifier;
}

id initValSBSDisplayLayoutElementPasscodeIdentifier()
{
  id *v0;

  if (SpringBoardServicesLibrary_sOnce != -1)
    dispatch_once(&SpringBoardServicesLibrary_sOnce, &__block_literal_global_1106);
  v0 = (id *)dlsym((void *)SpringBoardServicesLibrary_sLib, "SBSDisplayLayoutElementPasscodeIdentifier");
  if (v0)
    objc_storeStrong((id *)&constantValSBSDisplayLayoutElementPasscodeIdentifier, *v0);
  getSBSDisplayLayoutElementPasscodeIdentifier[0] = (uint64_t (*)())SBSDisplayLayoutElementPasscodeIdentifierFunction;
  return (id)constantValSBSDisplayLayoutElementPasscodeIdentifier;
}

id SBSDisplayLayoutElementSpotlightIdentifierFunction()
{
  return (id)constantValSBSDisplayLayoutElementSpotlightIdentifier;
}

id initValSBSDisplayLayoutElementSpotlightIdentifier()
{
  id *v0;

  if (SpringBoardServicesLibrary_sOnce != -1)
    dispatch_once(&SpringBoardServicesLibrary_sOnce, &__block_literal_global_1106);
  v0 = (id *)dlsym((void *)SpringBoardServicesLibrary_sLib, "SBSDisplayLayoutElementSpotlightIdentifier");
  if (v0)
    objc_storeStrong((id *)&constantValSBSDisplayLayoutElementSpotlightIdentifier, *v0);
  getSBSDisplayLayoutElementSpotlightIdentifier[0] = (uint64_t (*)())SBSDisplayLayoutElementSpotlightIdentifierFunction;
  return (id)constantValSBSDisplayLayoutElementSpotlightIdentifier;
}

id SBSDisplayLayoutElementTodayViewIdentifierFunction()
{
  return (id)constantValSBSDisplayLayoutElementTodayViewIdentifier;
}

id initValSBSDisplayLayoutElementTodayViewIdentifier()
{
  id *v0;

  if (SpringBoardServicesLibrary_sOnce != -1)
    dispatch_once(&SpringBoardServicesLibrary_sOnce, &__block_literal_global_1106);
  v0 = (id *)dlsym((void *)SpringBoardServicesLibrary_sLib, "SBSDisplayLayoutElementTodayViewIdentifier");
  if (v0)
    objc_storeStrong((id *)&constantValSBSDisplayLayoutElementTodayViewIdentifier, *v0);
  getSBSDisplayLayoutElementTodayViewIdentifier[0] = (uint64_t (*)())SBSDisplayLayoutElementTodayViewIdentifierFunction;
  return (id)constantValSBSDisplayLayoutElementTodayViewIdentifier;
}

id FBSDisplayLayoutMonitorConfigurationFunction()
{
  return (id)classFBSDisplayLayoutMonitorConfiguration;
}

Class initFBSDisplayLayoutMonitorConfiguration()
{
  Class result;

  if (FrontBoardServicesLibrary_sOnce != -1)
    dispatch_once(&FrontBoardServicesLibrary_sOnce, &__block_literal_global_1109);
  result = objc_getClass("FBSDisplayLayoutMonitorConfiguration");
  classFBSDisplayLayoutMonitorConfiguration = (uint64_t)result;
  getFBSDisplayLayoutMonitorConfigurationClass[0] = (uint64_t (*)())FBSDisplayLayoutMonitorConfigurationFunction;
  return result;
}

id FBSDisplayLayoutMonitorFunction()
{
  return (id)classFBSDisplayLayoutMonitor;
}

Class initFBSDisplayLayoutMonitor()
{
  Class result;

  if (FrontBoardServicesLibrary_sOnce != -1)
    dispatch_once(&FrontBoardServicesLibrary_sOnce, &__block_literal_global_1109);
  result = objc_getClass("FBSDisplayLayoutMonitor");
  classFBSDisplayLayoutMonitor = (uint64_t)result;
  getFBSDisplayLayoutMonitorClass[0] = (uint64_t (*)())FBSDisplayLayoutMonitorFunction;
  return result;
}

uint64_t _systemConfigChanged(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  uint64_t result;

  if (a3[65])
    return objc_msgSend(a3, "_systemConfigChanged:initial:", a2, 0);
  return result;
}

uint64_t initSBSGetScreenLockStatus(uint64_t a1)
{
  if (SpringBoardServicesLibrary_sOnce != -1)
    dispatch_once(&SpringBoardServicesLibrary_sOnce, &__block_literal_global_1106);
  softLinkSBSGetScreenLockStatus = (uint64_t (*)())dlsym((void *)SpringBoardServicesLibrary_sLib, "SBSGetScreenLockStatus");
  return ((uint64_t (*)(uint64_t))softLinkSBSGetScreenLockStatus)(a1);
}

uint64_t initValkCTCellMonitorMCC()
{
  uint64_t *v0;
  uint64_t result;

  if (CoreCDPLibrary_sOnce != -1)
    dispatch_once(&CoreCDPLibrary_sOnce, &__block_literal_global_1061);
  v0 = (uint64_t *)dlsym((void *)CoreCDPLibrary_sLib, "kCTCellMonitorMCC");
  if (v0)
  {
    result = *v0;
    constantValkCTCellMonitorMCC = result;
  }
  else
  {
    result = constantValkCTCellMonitorMCC;
  }
  getkCTCellMonitorMCC[0] = kCTCellMonitorMCCFunction;
  return result;
}

uint64_t kCTCellMonitorMCCFunction()
{
  return constantValkCTCellMonitorMCC;
}

uint64_t init_CTServerConnectionCopyISOForMCC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (CoreTelephonyLibrary_sOnce != -1)
    dispatch_once(&CoreTelephonyLibrary_sOnce, &__block_literal_global_1098);
  softLink_CTServerConnectionCopyISOForMCC[0] = (uint64_t (*)())dlsym((void *)CoreTelephonyLibrary_sLib, "_CTServerConnectionCopyISOForMCC");
  return ((uint64_t (*)(uint64_t, uint64_t, uint64_t))softLink_CTServerConnectionCopyISOForMCC[0])(a1, a2, a3);
}

uint64_t init_CTServerConnectionCreateOnTargetQueue(uint64_t a1, uint64_t a2, void *a3, void *a4)
{
  uint64_t v7;
  id v8;
  id v9;
  uint64_t v10;

  v7 = CoreTelephonyLibrary_sOnce;
  v8 = a4;
  v9 = a3;
  if (v7 != -1)
    dispatch_once(&CoreTelephonyLibrary_sOnce, &__block_literal_global_1098);
  softLink_CTServerConnectionCreateOnTargetQueue[0] = (uint64_t (*)())dlsym((void *)CoreTelephonyLibrary_sLib, "_CTServerConnectionCreateOnTargetQueue");
  v10 = ((uint64_t (*)(uint64_t, uint64_t, id, id))softLink_CTServerConnectionCreateOnTargetQueue[0])(a1, a2, v9, v8);

  return v10;
}

id CoreTelephonyClientFunction()
{
  return (id)classCoreTelephonyClient;
}

Class initCoreTelephonyClient()
{
  Class result;

  if (CoreTelephonyLibrary_sOnce != -1)
    dispatch_once(&CoreTelephonyLibrary_sOnce, &__block_literal_global_1098);
  result = objc_getClass("CoreTelephonyClient");
  classCoreTelephonyClient = (uint64_t)result;
  getCoreTelephonyClientClass[0] = (uint64_t (*)())CoreTelephonyClientFunction;
  return result;
}

id RTRoutineManagerFunction()
{
  return (id)classRTRoutineManager;
}

Class initRTRoutineManager()
{
  Class result;

  if (CoreRoutineLibrary_sOnce != -1)
    dispatch_once(&CoreRoutineLibrary_sOnce, &__block_literal_global_1101);
  result = objc_getClass("RTRoutineManager");
  classRTRoutineManager = (uint64_t)result;
  getRTRoutineManagerClass[0] = (uint64_t (*)())RTRoutineManagerFunction;
  return result;
}

id AKAccountManagerFunction_8080()
{
  return (id)classAKAccountManager_8087;
}

Class initAKAccountManager_8081()
{
  Class result;

  if (AuthKitLibrary_sOnce_8086 != -1)
    dispatch_once(&AuthKitLibrary_sOnce_8086, &__block_literal_global_1095);
  result = objc_getClass("AKAccountManager");
  classAKAccountManager_8087 = (uint64_t)result;
  getAKAccountManagerClass_8079 = (uint64_t (*)())AKAccountManagerFunction_8080;
  return result;
}

id ACAccountStoreFunction_8092()
{
  return (id)classACAccountStore_8096;
}

Class initACAccountStore_8093()
{
  Class result;

  if (AccountsLibrary_sOnce_8094 != -1)
    dispatch_once(&AccountsLibrary_sOnce_8094, &__block_literal_global_1092_8095);
  result = objc_getClass("ACAccountStore");
  classACAccountStore_8096 = (uint64_t)result;
  getACAccountStoreClass_8091 = (uint64_t (*)())ACAccountStoreFunction_8092;
  return result;
}

id logger()
{
  if (sCUOSLogCreateOnce_logger != -1)
    dispatch_once(&sCUOSLogCreateOnce_logger, &__block_literal_global_1088);
  return (id)sCUOSLogHandle_logger;
}

void __logger_block_invoke()
{
  os_log_t v0;
  void *v1;

  v0 = os_log_create("com.apple.CoreUtils", "CUSystemMonitor");
  v1 = (void *)sCUOSLogHandle_logger;
  sCUOSLogHandle_logger = (uint64_t)v0;

}

id CMMotionActivityManagerFunction()
{
  return (id)classCMMotionActivityManager;
}

Class initCMMotionActivityManager()
{
  Class result;

  if (CoreMotionLibrary_sOnce != -1)
    dispatch_once(&CoreMotionLibrary_sOnce, &__block_literal_global_1076);
  result = objc_getClass("CMMotionActivityManager");
  classCMMotionActivityManager = (uint64_t)result;
  getCMMotionActivityManagerClass[0] = (uint64_t (*)())CMMotionActivityManagerFunction;
  return result;
}

id CMDeviceOrientationManagerFunction()
{
  return (id)classCMDeviceOrientationManager;
}

Class initCMDeviceOrientationManager()
{
  Class result;

  if (CoreMotionLibrary_sOnce != -1)
    dispatch_once(&CoreMotionLibrary_sOnce, &__block_literal_global_1076);
  result = objc_getClass("CMDeviceOrientationManager");
  classCMDeviceOrientationManager = (uint64_t)result;
  getCMDeviceOrientationManagerClass[0] = (uint64_t (*)())CMDeviceOrientationManagerFunction;
  return result;
}

id FMFSessionFunction()
{
  return (id)classFMFSession;
}

Class initFMFSession()
{
  Class result;

  if (FMFLibrary_sOnce != -1)
    dispatch_once(&FMFLibrary_sOnce, &__block_literal_global_1071);
  result = objc_getClass("FMFSession");
  classFMFSession = (uint64_t)result;
  getFMFSessionClass[0] = (uint64_t (*)())FMFSessionFunction;
  return result;
}

id CUFindMyLocateMeDeviceMonitorFunction()
{
  return (id)classCUFindMyLocateMeDeviceMonitor;
}

Class initCUFindMyLocateMeDeviceMonitor()
{
  Class result;

  if (CoreUtilsUILibrary_sOnce != -1)
    dispatch_once(&CoreUtilsUILibrary_sOnce, &__block_literal_global_1068);
  result = objc_getClass("CUFindMyLocateMeDeviceMonitor");
  classCUFindMyLocateMeDeviceMonitor = (uint64_t)result;
  getCUFindMyLocateMeDeviceMonitorClass[0] = (uint64_t (*)())CUFindMyLocateMeDeviceMonitorFunction;
  return result;
}

id FMFMeDeviceChangedNotificationFunction()
{
  return (id)constantValFMFMeDeviceChangedNotification;
}

id initValFMFMeDeviceChangedNotification()
{
  id *v0;

  if (FMFLibrary_sOnce != -1)
    dispatch_once(&FMFLibrary_sOnce, &__block_literal_global_1071);
  v0 = (id *)dlsym((void *)FMFLibrary_sLib, "FMFMeDeviceChangedNotification");
  if (v0)
    objc_storeStrong((id *)&constantValFMFMeDeviceChangedNotification, *v0);
  getFMFMeDeviceChangedNotification = (uint64_t (*)())FMFMeDeviceChangedNotificationFunction;
  return (id)constantValFMFMeDeviceChangedNotification;
}

id FMFDevicesChangedNotificationFunction()
{
  return (id)constantValFMFDevicesChangedNotification;
}

id initValFMFDevicesChangedNotification()
{
  id *v0;

  if (FMFLibrary_sOnce != -1)
    dispatch_once(&FMFLibrary_sOnce, &__block_literal_global_1071);
  v0 = (id *)dlsym((void *)FMFLibrary_sLib, "FMFDevicesChangedNotification");
  if (v0)
    objc_storeStrong((id *)&constantValFMFDevicesChangedNotification, *v0);
  getFMFDevicesChangedNotification[0] = (uint64_t (*)())FMFDevicesChangedNotificationFunction;
  return (id)constantValFMFDevicesChangedNotification;
}

Class initCDPStateController()
{
  Class result;

  if (CoreCDPLibrary_sOnce != -1)
    dispatch_once(&CoreCDPLibrary_sOnce, &__block_literal_global_1061);
  result = objc_getClass("CDPStateController");
  classCDPStateController = (uint64_t)result;
  getCDPStateControllerClass[0] = (uint64_t (*)())CDPStateControllerFunction;
  return result;
}

Class initCDPContext()
{
  Class result;

  if (CoreCDPLibrary_sOnce != -1)
    dispatch_once(&CoreCDPLibrary_sOnce, &__block_literal_global_1061);
  result = objc_getClass("CDPContext");
  classCDPContext = (uint64_t)result;
  getCDPContextClass[0] = (uint64_t (*)())CDPContextFunction;
  return result;
}

uint64_t CDPManateeAvailabilityNotificationFunction()
{
  return constantValCDPManateeAvailabilityNotification;
}

uint64_t initValCDPManateeAvailabilityNotification()
{
  uint64_t *v0;
  uint64_t result;

  if (CoreCDPLibrary_sOnce != -1)
    dispatch_once(&CoreCDPLibrary_sOnce, &__block_literal_global_1061);
  v0 = (uint64_t *)dlsym((void *)CoreCDPLibrary_sLib, "CDPManateeAvailabilityNotification");
  if (v0)
  {
    result = *v0;
    constantValCDPManateeAvailabilityNotification = result;
  }
  else
  {
    result = constantValCDPManateeAvailabilityNotification;
  }
  getCDPManateeAvailabilityNotification[0] = CDPManateeAvailabilityNotificationFunction;
  return result;
}

uint64_t *initValkCLLocationAccuracyHundredMeters()
{
  uint64_t *result;

  if (CoreLocationLibrary_sOnce != -1)
    dispatch_once(&CoreLocationLibrary_sOnce, &__block_literal_global_1051);
  result = (uint64_t *)dlsym((void *)CoreLocationLibrary_sLib, "kCLLocationAccuracyHundredMeters");
  if (result)
    constantValkCLLocationAccuracyHundredMeters = *result;
  getkCLLocationAccuracyHundredMeters[0] = (uint64_t (*)())kCLLocationAccuracyHundredMetersFunction;
  return result;
}

double kCLLocationAccuracyHundredMetersFunction()
{
  return *(double *)&constantValkCLLocationAccuracyHundredMeters;
}

id CLLocationManagerFunction()
{
  return (id)classCLLocationManager;
}

Class initCLLocationManager()
{
  Class result;

  if (CoreLocationLibrary_sOnce != -1)
    dispatch_once(&CoreLocationLibrary_sOnce, &__block_literal_global_1051);
  result = objc_getClass("CLLocationManager");
  classCLLocationManager = (uint64_t)result;
  getCLLocationManagerClass[0] = (uint64_t (*)())CLLocationManagerFunction;
  return result;
}

id FAFetchFamilyCircleRequestFunction()
{
  return (id)classFAFetchFamilyCircleRequest;
}

Class initFAFetchFamilyCircleRequest()
{
  Class result;

  if (FamilyCircleLibrary_sOnce != -1)
    dispatch_once(&FamilyCircleLibrary_sOnce, &__block_literal_global_1047);
  result = objc_getClass("FAFetchFamilyCircleRequest");
  classFAFetchFamilyCircleRequest = (uint64_t)result;
  getFAFetchFamilyCircleRequestClass[0] = (uint64_t (*)())FAFetchFamilyCircleRequestFunction;
  return result;
}

id FAFamilyMemberFunction()
{
  return (id)classFAFamilyMember;
}

Class initFAFamilyMember()
{
  Class result;

  if (FamilyCircleLibrary_sOnce != -1)
    dispatch_once(&FamilyCircleLibrary_sOnce, &__block_literal_global_1047);
  result = objc_getClass("FAFamilyMember");
  classFAFamilyMember = (uint64_t)result;
  getFAFamilyMemberClass[0] = (uint64_t (*)())FAFamilyMemberFunction;
  return result;
}

uint64_t initBYSetupAssistantNeedsToRun()
{
  if (SetupAssistantLibrary_sOnce != -1)
    dispatch_once(&SetupAssistantLibrary_sOnce, &__block_literal_global_1044);
  softLinkBYSetupAssistantNeedsToRun[0] = (uint64_t (*)())dlsym((void *)SetupAssistantLibrary_sLib, "BYSetupAssistantNeedsToRun");
  return softLinkBYSetupAssistantNeedsToRun[0]();
}

uint64_t BYSetupAssistantFinishedDarwinNotificationFunction()
{
  return constantValBYSetupAssistantFinishedDarwinNotification;
}

uint64_t initValBYSetupAssistantFinishedDarwinNotification()
{
  uint64_t *v0;
  uint64_t result;

  if (SetupAssistantLibrary_sOnce != -1)
    dispatch_once(&SetupAssistantLibrary_sOnce, &__block_literal_global_1044);
  v0 = (uint64_t *)dlsym((void *)SetupAssistantLibrary_sLib, "BYSetupAssistantFinishedDarwinNotification");
  if (v0)
  {
    result = *v0;
    constantValBYSetupAssistantFinishedDarwinNotification = result;
  }
  else
  {
    result = constantValBYSetupAssistantFinishedDarwinNotification;
  }
  getBYSetupAssistantFinishedDarwinNotification[0] = BYSetupAssistantFinishedDarwinNotificationFunction;
  return result;
}

id TUCallCenterCallStatusChangedNotificationFunction()
{
  return (id)constantValTUCallCenterCallStatusChangedNotification;
}

id initValTUCallCenterCallStatusChangedNotification()
{
  id *v0;

  if (TelephonyUtilitiesLibrary_sOnce != -1)
    dispatch_once(&TelephonyUtilitiesLibrary_sOnce, &__block_literal_global_1035);
  v0 = (id *)dlsym((void *)TelephonyUtilitiesLibrary_sLib, "TUCallCenterCallStatusChangedNotification");
  if (v0)
    objc_storeStrong((id *)&constantValTUCallCenterCallStatusChangedNotification, *v0);
  getTUCallCenterCallStatusChangedNotification[0] = (uint64_t (*)())TUCallCenterCallStatusChangedNotificationFunction;
  return (id)constantValTUCallCenterCallStatusChangedNotification;
}

id TUCallCenterCallConnectedNotificationFunction()
{
  return (id)constantValTUCallCenterCallConnectedNotification;
}

id initValTUCallCenterCallConnectedNotification()
{
  id *v0;

  if (TelephonyUtilitiesLibrary_sOnce != -1)
    dispatch_once(&TelephonyUtilitiesLibrary_sOnce, &__block_literal_global_1035);
  v0 = (id *)dlsym((void *)TelephonyUtilitiesLibrary_sLib, "TUCallCenterCallConnectedNotification");
  if (v0)
    objc_storeStrong((id *)&constantValTUCallCenterCallConnectedNotification, *v0);
  getTUCallCenterCallConnectedNotification[0] = (uint64_t (*)())TUCallCenterCallConnectedNotificationFunction;
  return (id)constantValTUCallCenterCallConnectedNotification;
}

id TUCallCenterVideoCallStatusChangedNotificationFunction()
{
  return (id)constantValTUCallCenterVideoCallStatusChangedNotification;
}

id initValTUCallCenterVideoCallStatusChangedNotification()
{
  id *v0;

  if (TelephonyUtilitiesLibrary_sOnce != -1)
    dispatch_once(&TelephonyUtilitiesLibrary_sOnce, &__block_literal_global_1035);
  v0 = (id *)dlsym((void *)TelephonyUtilitiesLibrary_sLib, "TUCallCenterVideoCallStatusChangedNotification");
  if (v0)
    objc_storeStrong((id *)&constantValTUCallCenterVideoCallStatusChangedNotification, *v0);
  getTUCallCenterVideoCallStatusChangedNotification = (uint64_t (*)())TUCallCenterVideoCallStatusChangedNotificationFunction;
  return (id)constantValTUCallCenterVideoCallStatusChangedNotification;
}

id TUCallCenterFunction()
{
  return (id)classTUCallCenter;
}

Class initTUCallCenter()
{
  Class result;

  if (TelephonyUtilitiesLibrary_sOnce != -1)
    dispatch_once(&TelephonyUtilitiesLibrary_sOnce, &__block_literal_global_1035);
  result = objc_getClass("TUCallCenter");
  classTUCallCenter = (uint64_t)result;
  getTUCallCenterClass[0] = (uint64_t (*)())TUCallCenterFunction;
  return result;
}

id CXCallObserverFunction()
{
  return (id)classCXCallObserver;
}

Class initCXCallObserver()
{
  Class result;

  if (CallKitLibrary_sOnce != -1)
    dispatch_once(&CallKitLibrary_sOnce, &__block_literal_global_1041);
  result = objc_getClass("CXCallObserver");
  classCXCallObserver = (uint64_t)result;
  getCXCallObserverClass[0] = (uint64_t (*)())CXCallObserverFunction;
  return result;
}

void initAnalyticsSendEvent_8507(void *a1, void *a2)
{
  uint64_t v3;
  id v4;
  id v5;

  v3 = CoreAnalyticsLibrary_sOnce_8496;
  v4 = a2;
  v5 = a1;
  if (v3 != -1)
    dispatch_once(&CoreAnalyticsLibrary_sOnce_8496, &__block_literal_global_8497);
  softLinkAnalyticsSendEvent_8506 = (uint64_t (*)())dlsym((void *)CoreAnalyticsLibrary_sLib_8498, "AnalyticsSendEvent");
  ((void (*)(id, id))softLinkAnalyticsSendEvent_8506)(v5, v4);

}

void _connectHandler(int a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  dispatch_queue_t *v11;
  id v12;
  uint64_t v13;
  void *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  int *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  int *v26;
  uint64_t v27;
  uint64_t v28;
  id v29;

  if (!*(_BYTE *)(a3 + 112))
  {
    v11 = *(dispatch_queue_t **)(a3 + 8);
    if (!v11)
      goto LABEL_5;
    dispatch_async_f(v11[13], v11, (dispatch_function_t)_AsyncConnection_UserRelease);
  }
  *(_QWORD *)(a3 + 8) = 0;
LABEL_5:
  if (!(_DWORD)a2)
  {
    if (*(_BYTE *)(a3 + 112))
    {
      NSErrorWithOSStatusF(4294960573, (uint64_t)"Invalidated (C)", a3, a4, a5, a6, a7, a8, v27);
      v12 = (id)objc_claimAutoreleasedReturnValue();
    }
    else
    {
      *(_DWORD *)(a3 + 304) = a1;
      v29 = 0;
      objc_msgSend((id)a3, "_setupIOAndReturnError:", &v29);
      v12 = v29;
      a1 = -1;
    }
    goto LABEL_8;
  }
  NSErrorWithOSStatusF(a2, (uint64_t)"Connect failed", a3, a4, a5, a6, a7, a8, v27);
  v12 = (id)objc_claimAutoreleasedReturnValue();
  if (!*(_BYTE *)(a3 + 112) && *(_QWORD *)(a3 + 328))
  {
    v19 = *(int **)(a3 + 216);
    if (*v19 <= 30)
    {
      if (*v19 == -1)
      {
        if (!_LogCategory_Initialize((uint64_t)v19, 0x1Eu))
          goto LABEL_26;
        v19 = *(int **)(a3 + 216);
      }
      LogPrintF((uint64_t)v19, (uint64_t)"void _connectHandler(SocketRef, OSStatus, void * _Nonnull)", 0x1Eu, (uint64_t)"Connect failed. Reconfirming with Bonjour\n", v15, v16, v17, v18, v28);
    }
LABEL_26:
    v20 = CUBonjourDeviceReconfirm(*(void **)(a3 + 328));
    if ((_DWORD)v20)
    {
      v25 = v20;
      v26 = *(int **)(a3 + 216);
      if (*v26 <= 60)
      {
        if (*v26 == -1)
        {
          if (!_LogCategory_Initialize((uint64_t)v26, 0x3Cu))
            goto LABEL_8;
          v26 = *(int **)(a3 + 216);
        }
        LogPrintF((uint64_t)v26, (uint64_t)"void _connectHandler(SocketRef, OSStatus, void * _Nonnull)", 0x3Cu, (uint64_t)"### Reconfirming with Bonjour failed: %#m\n", v21, v22, v23, v24, v25);
      }
    }
  }
LABEL_8:
  v13 = *(_QWORD *)(a3 + 88);
  if (v13)
  {
    (*(void (**)(uint64_t, id))(v13 + 16))(v13, v12);
    v14 = *(void **)(a3 + 88);
    *(_QWORD *)(a3 + 88) = 0;

  }
  if (!v12)
  {
    objc_msgSend((id)a3, "_processReads:", 0);
    objc_msgSend((id)a3, "_processWrites:", 0);
  }
  if (*(_BYTE *)(a3 + 112))
    objc_msgSend((id)a3, "_invalidated");
  if ((a1 & 0x80000000) == 0 && close(a1) && *__error())
    __error();

}

void _connectCompletion(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9;
  uint64_t v10;
  const char *v11;
  dispatch_queue_t *v12;
  int v13;
  unsigned int *v14;
  int *v15;
  uint64_t v16;
  uint64_t v17;
  int *v18;
  id v19;
  uint64_t v20;
  void *v21;
  int v22;
  uint64_t v23;
  id v24;

  v9 = *(_QWORD *)(a1 + 16);
  if (*(_BYTE *)(v9 + 112))
  {
    *(_QWORD *)(v9 + 8) = 0;
    v10 = *(unsigned int *)(a1 + 12);
    if ((_DWORD)v10)
    {
LABEL_3:
      v11 = "Connect failed";
      goto LABEL_23;
    }
LABEL_22:
    v11 = "Invalidated (C)";
    v10 = 4294960573;
LABEL_23:
    NSErrorWithOSStatusF(v10, (uint64_t)v11, a3, a4, a5, a6, a7, a8, v23);
    v19 = (id)objc_claimAutoreleasedReturnValue();
    if (v19)
      goto LABEL_26;
    goto LABEL_24;
  }
  v12 = *(dispatch_queue_t **)(v9 + 8);
  if (v12)
  {
    dispatch_async_f(v12[13], v12, (dispatch_function_t)_AsyncConnection_UserRelease);
    *(_QWORD *)(v9 + 8) = 0;
    v13 = *(unsigned __int8 *)(v9 + 112);
    v14 = (unsigned int *)(a1 + 12);
    v10 = *(unsigned int *)(a1 + 12);
    if (!(_DWORD)v10)
      goto LABEL_21;
    if (*(_BYTE *)(v9 + 112))
      goto LABEL_3;
  }
  else
  {
    v14 = (unsigned int *)(a1 + 12);
    v10 = *(unsigned int *)(a1 + 12);
    if (!(_DWORD)v10)
      goto LABEL_24;
  }
  if (!*(_QWORD *)(v9 + 328))
    goto LABEL_19;
  v15 = *(int **)(v9 + 216);
  if (*v15 <= 30)
  {
    if (*v15 != -1)
    {
LABEL_12:
      LogPrintF((uint64_t)v15, (uint64_t)"void _connectCompletion(AsyncConnectionCompletionInfo * _Nonnull)", 0x1Eu, (uint64_t)"Connect failed. Reconfirming with Bonjour: %#m\n", a5, a6, a7, a8, v10);
      goto LABEL_14;
    }
    if (_LogCategory_Initialize(*(_QWORD *)(v9 + 216), 0x1Eu))
    {
      v15 = *(int **)(v9 + 216);
      v10 = *v14;
      goto LABEL_12;
    }
  }
LABEL_14:
  v16 = CUBonjourDeviceReconfirm(*(void **)(v9 + 328));
  if (!(_DWORD)v16)
    goto LABEL_19;
  v17 = v16;
  v18 = *(int **)(v9 + 216);
  if (*v18 > 60)
    goto LABEL_19;
  if (*v18 == -1)
  {
    if (!_LogCategory_Initialize((uint64_t)v18, 0x3Cu))
      goto LABEL_19;
    v18 = *(int **)(v9 + 216);
  }
  LogPrintF((uint64_t)v18, (uint64_t)"void _connectCompletion(AsyncConnectionCompletionInfo * _Nonnull)", 0x3Cu, (uint64_t)"### Reconfirming with Bonjour failed: %#m\n", a5, a6, a7, a8, v17);
LABEL_19:
  v10 = *v14;
  if ((_DWORD)v10)
    goto LABEL_3;
  v13 = *(unsigned __int8 *)(v9 + 112);
LABEL_21:
  if (v13)
    goto LABEL_22;
LABEL_24:
  *(_DWORD *)(v9 + 304) = *(_DWORD *)(a1 + 8);
  *(_DWORD *)(a1 + 8) = -1;
  objc_storeStrong((id *)(v9 + 392), *(id *)(a1 + 24));
  *(_QWORD *)(a1 + 24) = 0;
  v24 = 0;
  objc_msgSend((id)v9, "_setupIOAndReturnError:", &v24);
  v19 = v24;
  if (!v19)
  {
    objc_msgSend((id)v9, "_processReads:", 0);
    objc_msgSend((id)v9, "_processWrites:", 0);
  }
LABEL_26:
  v20 = *(_QWORD *)(v9 + 88);
  if (v20)
  {
    (*(void (**)(uint64_t, id))(v20 + 16))(v20, v19);
    v21 = *(void **)(v9 + 88);
    *(_QWORD *)(v9 + 88) = 0;

  }
  if (*(_BYTE *)(v9 + 112))
    objc_msgSend((id)v9, "_invalidated");
  v22 = *(_DWORD *)(a1 + 8);
  if ((v22 & 0x80000000) == 0)
  {
    if (close(v22) && *__error())
      __error();
    *(_DWORD *)(a1 + 8) = -1;
  }

}

void sub_18D4B34F8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  uint64_t v11;
  va_list va;

  va_start(va, a11);
  (*(void (**)(uint64_t))(v11 + 16))(v11);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t __Block_byref_object_copy__8818(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void __Block_byref_object_dispose__8819(uint64_t a1)
{

}

void _responseCallback(uint64_t a1, uint64_t a2)
{
  void *v4;
  void *v5;
  id v6;

  pthread_mutex_lock(&gCUUserAlertMutex);
  v4 = (void *)gCUUserAlertMap;
  objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithLong:", a1);
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v4, "objectForKeyedSubscript:", v5);
  v6 = (id)objc_claimAutoreleasedReturnValue();

  pthread_mutex_unlock(&gCUUserAlertMutex);
  objc_msgSend(v6, "_responseCallback:responseFlags:", a1, a2);

}

id UNNotificationDefaultActionIdentifierFunction()
{
  return (id)constantValUNNotificationDefaultActionIdentifier;
}

id initValUNNotificationDefaultActionIdentifier()
{
  id *v0;

  if (UserNotificationsLibrary_sOnce != -1)
    dispatch_once(&UserNotificationsLibrary_sOnce, &__block_literal_global_9061);
  v0 = (id *)dlsym((void *)UserNotificationsLibrary_sLib, "UNNotificationDefaultActionIdentifier");
  if (v0)
    objc_storeStrong((id *)&constantValUNNotificationDefaultActionIdentifier, *v0);
  getUNNotificationDefaultActionIdentifier[0] = (uint64_t (*)())UNNotificationDefaultActionIdentifierFunction;
  return (id)constantValUNNotificationDefaultActionIdentifier;
}

id UNNotificationDismissActionIdentifierFunction()
{
  return (id)constantValUNNotificationDismissActionIdentifier;
}

id initValUNNotificationDismissActionIdentifier()
{
  id *v0;

  if (UserNotificationsLibrary_sOnce != -1)
    dispatch_once(&UserNotificationsLibrary_sOnce, &__block_literal_global_9061);
  v0 = (id *)dlsym((void *)UserNotificationsLibrary_sLib, "UNNotificationDismissActionIdentifier");
  if (v0)
    objc_storeStrong((id *)&constantValUNNotificationDismissActionIdentifier, *v0);
  getUNNotificationDismissActionIdentifier[0] = (uint64_t (*)())UNNotificationDismissActionIdentifierFunction;
  return (id)constantValUNNotificationDismissActionIdentifier;
}

id UNMutableNotificationContentFunction()
{
  return (id)classUNMutableNotificationContent;
}

Class initUNMutableNotificationContent()
{
  Class result;

  if (UserNotificationsLibrary_sOnce != -1)
    dispatch_once(&UserNotificationsLibrary_sOnce, &__block_literal_global_9061);
  result = objc_getClass("UNMutableNotificationContent");
  classUNMutableNotificationContent = (uint64_t)result;
  getUNMutableNotificationContentClass[0] = (uint64_t (*)())UNMutableNotificationContentFunction;
  return result;
}

id UNNotificationIconFunction()
{
  return (id)classUNNotificationIcon;
}

Class initUNNotificationIcon()
{
  Class result;

  if (UserNotificationsLibrary_sOnce != -1)
    dispatch_once(&UserNotificationsLibrary_sOnce, &__block_literal_global_9061);
  result = objc_getClass("UNNotificationIcon");
  classUNNotificationIcon = (uint64_t)result;
  getUNNotificationIconClass[0] = (uint64_t (*)())UNNotificationIconFunction;
  return result;
}

id UNNotificationSoundFunction()
{
  return (id)classUNNotificationSound;
}

Class initUNNotificationSound()
{
  Class result;

  if (UserNotificationsLibrary_sOnce != -1)
    dispatch_once(&UserNotificationsLibrary_sOnce, &__block_literal_global_9061);
  result = objc_getClass("UNNotificationSound");
  classUNNotificationSound = (uint64_t)result;
  getUNNotificationSoundClass[0] = (uint64_t (*)())UNNotificationSoundFunction;
  return result;
}

id UNNotificationRequestFunction()
{
  return (id)classUNNotificationRequest;
}

Class initUNNotificationRequest()
{
  Class result;

  if (UserNotificationsLibrary_sOnce != -1)
    dispatch_once(&UserNotificationsLibrary_sOnce, &__block_literal_global_9061);
  result = objc_getClass("UNNotificationRequest");
  classUNNotificationRequest = (uint64_t)result;
  getUNNotificationRequestClass[0] = (uint64_t (*)())UNNotificationRequestFunction;
  return result;
}

id UNUserNotificationCenterFunction()
{
  return (id)classUNUserNotificationCenter;
}

Class initUNUserNotificationCenter()
{
  Class result;

  if (UserNotificationsLibrary_sOnce != -1)
    dispatch_once(&UserNotificationsLibrary_sOnce, &__block_literal_global_9061);
  result = objc_getClass("UNUserNotificationCenter");
  classUNUserNotificationCenter = (uint64_t)result;
  getUNUserNotificationCenterClass[0] = (uint64_t (*)())UNUserNotificationCenterFunction;
  return result;
}

id UNNotificationCategoryFunction()
{
  return (id)classUNNotificationCategory;
}

Class initUNNotificationCategory()
{
  Class result;

  if (UserNotificationsLibrary_sOnce != -1)
    dispatch_once(&UserNotificationsLibrary_sOnce, &__block_literal_global_9061);
  result = objc_getClass("UNNotificationCategory");
  classUNNotificationCategory = (uint64_t)result;
  getUNNotificationCategoryClass[0] = (uint64_t (*)())UNNotificationCategoryFunction;
  return result;
}

id UNNotificationActionFunction()
{
  return (id)classUNNotificationAction;
}

Class initUNNotificationAction()
{
  Class result;

  if (UserNotificationsLibrary_sOnce != -1)
    dispatch_once(&UserNotificationsLibrary_sOnce, &__block_literal_global_9061);
  result = objc_getClass("UNNotificationAction");
  classUNNotificationAction = (uint64_t)result;
  getUNNotificationActionClass[0] = (uint64_t (*)())UNNotificationActionFunction;
  return result;
}

id AVAudioSessionFunction_9249()
{
  return (id)classAVAudioSession_9262;
}

Class initAVAudioSession_9250()
{
  Class result;

  if (AVFoundationLibrary_sOnce_9260 != -1)
    dispatch_once(&AVFoundationLibrary_sOnce_9260, &__block_literal_global_116);
  result = objc_getClass("AVAudioSession");
  classAVAudioSession_9262 = (uint64_t)result;
  getAVAudioSessionClass_9248 = (uint64_t (*)())AVAudioSessionFunction_9249;
  return result;
}

id SiriTTSDaemonSessionFunction()
{
  return (id)classSiriTTSDaemonSession;
}

Class initSiriTTSDaemonSession()
{
  Class result;

  if (SiriTTSServiceLibrary_sOnce != -1)
    dispatch_once(&SiriTTSServiceLibrary_sOnce, &__block_literal_global_9274);
  result = objc_getClass("SiriTTSDaemonSession");
  classSiriTTSDaemonSession = (uint64_t)result;
  getSiriTTSDaemonSessionClass[0] = (uint64_t (*)())SiriTTSDaemonSessionFunction;
  return result;
}

id SiriTTSSynthesisVoiceFunction()
{
  return (id)classSiriTTSSynthesisVoice;
}

Class initSiriTTSSynthesisVoice()
{
  Class result;

  if (SiriTTSServiceLibrary_sOnce != -1)
    dispatch_once(&SiriTTSServiceLibrary_sOnce, &__block_literal_global_9274);
  result = objc_getClass("SiriTTSSynthesisVoice");
  classSiriTTSSynthesisVoice = (uint64_t)result;
  getSiriTTSSynthesisVoiceClass = (uint64_t (*)())SiriTTSSynthesisVoiceFunction;
  return result;
}

id SiriTTSSpeechRequestFunction()
{
  return (id)classSiriTTSSpeechRequest;
}

Class initSiriTTSSpeechRequest()
{
  Class result;

  if (SiriTTSServiceLibrary_sOnce != -1)
    dispatch_once(&SiriTTSServiceLibrary_sOnce, &__block_literal_global_9274);
  result = objc_getClass("SiriTTSSpeechRequest");
  classSiriTTSSpeechRequest = (uint64_t)result;
  getSiriTTSSpeechRequestClass[0] = (uint64_t (*)())SiriTTSSpeechRequestFunction;
  return result;
}

uint64_t initVSPreferencesCopyDefaultOutputLanguageIdentifierForUserPreferences()
{
  if (VoiceServicesLibrary_sOnce != -1)
    dispatch_once(&VoiceServicesLibrary_sOnce, &__block_literal_global_111);
  softLinkVSPreferencesCopyDefaultOutputLanguageIdentifierForUserPreferences[0] = (uint64_t (*)())dlsym((void *)VoiceServicesLibrary_sLib, "VSPreferencesCopyDefaultOutputLanguageIdentifierForUserPreferences");
  return softLinkVSPreferencesCopyDefaultOutputLanguageIdentifierForUserPreferences[0]();
}

id EasyConfigKey_ReasonErrorFunction()
{
  return (id)constantValEasyConfigKey_ReasonError;
}

id initValEasyConfigKey_ReasonError()
{
  id *v0;

  if (EasyConfigLibrary_sOnce != -1)
    dispatch_once(&EasyConfigLibrary_sOnce, &__block_literal_global_9408);
  v0 = (id *)dlsym((void *)EasyConfigLibrary_sLib, "EasyConfigKey_ReasonError");
  if (v0)
    objc_storeStrong((id *)&constantValEasyConfigKey_ReasonError, *v0);
  getEasyConfigKey_ReasonError[0] = (uint64_t (*)())EasyConfigKey_ReasonErrorFunction;
  return (id)constantValEasyConfigKey_ReasonError;
}

id EasyConfigKey_DeviceIDFunction()
{
  return (id)constantValEasyConfigKey_DeviceID;
}

id initValEasyConfigKey_DeviceID()
{
  id *v0;

  if (EasyConfigLibrary_sOnce != -1)
    dispatch_once(&EasyConfigLibrary_sOnce, &__block_literal_global_9408);
  v0 = (id *)dlsym((void *)EasyConfigLibrary_sLib, "EasyConfigKey_DeviceID");
  if (v0)
    objc_storeStrong((id *)&constantValEasyConfigKey_DeviceID, *v0);
  getEasyConfigKey_DeviceID[0] = (uint64_t (*)())EasyConfigKey_DeviceIDFunction;
  return (id)constantValEasyConfigKey_DeviceID;
}

id EasyConfigKey_FlagsFunction()
{
  return (id)constantValEasyConfigKey_Flags;
}

id initValEasyConfigKey_Flags()
{
  id *v0;

  if (EasyConfigLibrary_sOnce != -1)
    dispatch_once(&EasyConfigLibrary_sOnce, &__block_literal_global_9408);
  v0 = (id *)dlsym((void *)EasyConfigLibrary_sLib, "EasyConfigKey_Flags");
  if (v0)
    objc_storeStrong((id *)&constantValEasyConfigKey_Flags, *v0);
  getEasyConfigKey_Flags[0] = (uint64_t (*)())EasyConfigKey_FlagsFunction;
  return (id)constantValEasyConfigKey_Flags;
}

id EasyConfigDeviceFunction()
{
  return (id)classEasyConfigDevice;
}

Class initEasyConfigDevice()
{
  Class result;

  if (EasyConfigLibrary_sOnce != -1)
    dispatch_once(&EasyConfigLibrary_sOnce, &__block_literal_global_9408);
  result = objc_getClass("EasyConfigDevice");
  classEasyConfigDevice = (uint64_t)result;
  getEasyConfigDeviceClass[0] = (uint64_t (*)())EasyConfigDeviceFunction;
  return result;
}

void sub_18D4BA4C0(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_18D4BA794(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id obj)
{
  objc_sync_exit(obj);
  _Unwind_Resume(a1);
}

void sub_18D4BB76C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, id location)
{
  id *v16;

  objc_destroyWeak(v16);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void _wifiCriticalCallback(uint64_t a1, char a2, void *a3)
{
  _QWORD *v4;
  NSObject *v5;
  _QWORD *v6;
  _QWORD v7[4];
  id v8;
  char v9;

  v4 = a3;
  v5 = v4[19];
  v7[0] = MEMORY[0x1E0C809B0];
  v7[1] = 3221225472;
  v7[2] = ___wifiCriticalCallback_block_invoke;
  v7[3] = &unk_1E25DE528;
  v8 = v4;
  v9 = a2;
  v6 = v4;
  dispatch_async(v5, v7);

}

void _wifiDeviceAttached(uint64_t a1, uint64_t a2, void *a3)
{
  _QWORD *v3;
  NSObject *v4;
  _QWORD *v5;
  _QWORD block[4];
  id v7;

  v3 = a3;
  v4 = v3[19];
  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 3221225472;
  block[2] = ___wifiDeviceAttached_block_invoke;
  block[3] = &unk_1E25DF2A0;
  v7 = v3;
  v5 = v3;
  dispatch_async(v4, block);

}

void _wifiRestartedCallback(uint64_t a1, _QWORD *a2)
{
  NSObject *v2;
  _QWORD *v3;
  _QWORD block[5];

  v2 = a2[19];
  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 3221225472;
  block[2] = ___wifiRestartedCallback_block_invoke;
  block[3] = &unk_1E25DF2A0;
  block[4] = a2;
  v3 = a2;
  dispatch_async(v2, block);

}

void _wifiDeviceDetached(uint64_t a1, void *a2)
{
  _QWORD *v2;
  NSObject *v3;
  _QWORD *v4;
  _QWORD block[4];
  id v6;

  v2 = a2;
  v3 = v2[19];
  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 3221225472;
  block[2] = ___wifiDeviceDetached_block_invoke;
  block[3] = &unk_1E25DF2A0;
  v6 = v2;
  v4 = v2;
  dispatch_async(v3, block);

}

void _wifiAutoJoinNotification(uint64_t a1, void *a2, void *a3)
{
  _QWORD *v4;
  id v5;
  NSObject *v6;
  id v7;
  _QWORD *v8;
  _QWORD v9[4];
  id v10;
  id v11;

  v4 = a3;
  v5 = a2;
  v6 = v4[19];
  v9[0] = MEMORY[0x1E0C809B0];
  v9[1] = 3221225472;
  v9[2] = ___wifiAutoJoinNotification_block_invoke;
  v9[3] = &unk_1E25DE628;
  v10 = v4;
  v11 = v5;
  v7 = v5;
  v8 = v4;
  dispatch_async(v6, v9);

}

void _wifiHostAPStateChangedCallback(uint64_t a1, void *a2, _QWORD *a3)
{
  NSObject *v4;
  id v5;
  _QWORD *v6;
  _QWORD v7[6];

  v4 = a3[19];
  v7[0] = MEMORY[0x1E0C809B0];
  v7[1] = 3221225472;
  v7[2] = ___wifiHostAPStateChangedCallback_block_invoke;
  v7[3] = &unk_1E25DE628;
  v7[4] = a3;
  v7[5] = a2;
  v5 = a2;
  v6 = a3;
  dispatch_async(v4, v7);

}

void _wifiPowerCallback(uint64_t a1, _QWORD *a2)
{
  char Power;
  NSObject *v4;
  _QWORD *v5;
  _QWORD v6[5];
  char v7;

  Power = WiFiDeviceClientGetPower();
  v4 = a2[19];
  v6[0] = MEMORY[0x1E0C809B0];
  v6[1] = 3221225472;
  v6[2] = ___wifiPowerCallback_block_invoke;
  v6[3] = &unk_1E25DE528;
  v6[4] = a2;
  v7 = Power;
  v5 = a2;
  dispatch_async(v4, v6);

}

uint64_t ___wifiPowerCallback_block_invoke(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  uint64_t v9;
  int *v10;
  const char *v11;
  _BOOL4 v12;

  v8 = *(_QWORD *)(result + 32);
  if (!*(_BYTE *)(v8 + 10))
  {
    v9 = result;
    v10 = *(int **)(v8 + 16);
    if (*v10 <= 30)
    {
      if (*v10 != -1)
      {
LABEL_4:
        if (*(_BYTE *)(v9 + 40))
          v11 = "yes";
        else
          v11 = "no";
        LogPrintF((uint64_t)v10, (uint64_t)"void _wifiPowerCallback(WiFiDeviceClientRef, void *)_block_invoke", 0x1Eu, (uint64_t)"WiFi power changed: %s", a5, a6, a7, a8, (uint64_t)v11);
        v8 = *(_QWORD *)(v9 + 32);
        return objc_msgSend((id)v8, "_wifiStateChanged");
      }
      v12 = _LogCategory_Initialize((uint64_t)v10, 0x1Eu);
      v8 = *(_QWORD *)(v9 + 32);
      if (v12)
      {
        v10 = *(int **)(v8 + 16);
        goto LABEL_4;
      }
    }
    return objc_msgSend((id)v8, "_wifiStateChanged");
  }
  return result;
}

uint64_t ___wifiHostAPStateChangedCallback_block_invoke(uint64_t result)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t Int64;
  _QWORD *v7;
  int *v8;
  const char *v9;
  _BOOL4 v10;

  if (*(_QWORD *)(*(_QWORD *)(result + 32) + 48))
  {
    v1 = result;
    Int64 = CFDictionaryGetInt64(*(const __CFDictionary **)(result + 40), CFSTR("HostApEnabled"), 0);
    v7 = *(_QWORD **)(v1 + 32);
    v8 = (int *)v7[2];
    if (*v8 <= 30)
    {
      if (*v8 != -1)
      {
LABEL_4:
        v9 = "yes";
        if (!Int64)
          v9 = "no";
        LogPrintF((uint64_t)v8, (uint64_t)"void _wifiHostAPStateChangedCallback(WiFiDeviceClientRef, CFDictionaryRef, void *)_block_invoke", 0x1Eu, (uint64_t)"WiFi HostAP state changed: HostAP %s\n", v2, v3, v4, v5, (uint64_t)v9);
        v7 = *(_QWORD **)(v1 + 32);
        return objc_msgSend(v7, "_update");
      }
      v10 = _LogCategory_Initialize((uint64_t)v8, 0x1Eu);
      v7 = *(_QWORD **)(v1 + 32);
      if (v10)
      {
        v8 = (int *)v7[2];
        goto LABEL_4;
      }
    }
    return objc_msgSend(v7, "_update");
  }
  return result;
}

_BYTE *___wifiAutoJoinNotification_block_invoke(uint64_t a1)
{
  _BYTE *result;

  result = *(_BYTE **)(a1 + 32);
  if (!result[10])
    return (_BYTE *)objc_msgSend(result, "_wifiAutoJoinNotification:", *(_QWORD *)(a1 + 40));
  return result;
}

uint64_t ___wifiDeviceDetached_block_invoke(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  uint64_t v9;
  int *v10;
  _BOOL4 v11;
  uint64_t v12;

  v8 = *(_QWORD *)(result + 32);
  if (!*(_BYTE *)(v8 + 10))
  {
    v9 = result;
    v10 = *(int **)(v8 + 16);
    if (*v10 <= 30)
    {
      if (*v10 == -1)
      {
        v11 = _LogCategory_Initialize((uint64_t)v10, 0x1Eu);
        v8 = *(_QWORD *)(v9 + 32);
        if (!v11)
          goto LABEL_6;
        v10 = *(int **)(v8 + 16);
      }
      LogPrintF((uint64_t)v10, (uint64_t)"void _wifiDeviceDetached(WiFiDeviceClientRef, void *)_block_invoke", 0x1Eu, (uint64_t)"WiFi Device Detached\n", a5, a6, a7, a8, v12);
      v8 = *(_QWORD *)(v9 + 32);
    }
LABEL_6:
    *(_BYTE *)(v8 + 96) = 0;
    *(_BYTE *)(*(_QWORD *)(v9 + 32) + 72) = 0;
    *(_QWORD *)(*(_QWORD *)(v9 + 32) + 64) = 0;
    return objc_msgSend(*(id *)(v9 + 32), "_update");
  }
  return result;
}

uint64_t ___wifiRestartedCallback_block_invoke(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t result;
  int *v10;
  _BOOL4 v11;
  void *v12;
  uint64_t v13;

  result = *(_QWORD *)(a1 + 32);
  if (!*(_QWORD *)(result + 48))
    return result;
  v10 = *(int **)(result + 16);
  if (*v10 <= 60)
  {
    if (*v10 == -1)
    {
      v11 = _LogCategory_Initialize(*(_QWORD *)(result + 16), 0x3Cu);
      result = *(_QWORD *)(a1 + 32);
      if (!v11)
        goto LABEL_6;
      v10 = *(int **)(result + 16);
    }
    LogPrintF((uint64_t)v10, (uint64_t)"void _wifiRestartedCallback(WiFiManagerClientRef, void *)_block_invoke", 0x3Cu, (uint64_t)"### WiFi crashed...retrying\n", a5, a6, a7, a8, v13);
    result = *(_QWORD *)(a1 + 32);
  }
LABEL_6:
  if (*(_BYTE *)(result + 128))
  {
    *(_BYTE *)(result + 125) = 1;
    result = *(_QWORD *)(a1 + 32);
  }
  if (*(_BYTE *)(result + 130))
  {
    *(_BYTE *)(result + 127) = 1;
    result = *(_QWORD *)(a1 + 32);
  }
  if (*(_QWORD *)(result + 184))
  {
    v12 = *(void **)(result + 32);
    *(_QWORD *)(result + 32) = 0;

    *(_BYTE *)(*(_QWORD *)(a1 + 32) + 126) = 1;
    result = *(_QWORD *)(a1 + 32);
  }
  objc_msgSend((id)result, "_update");
  result = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 160);
  if (result)
    return (*(uint64_t (**)(void))(result + 16))();
  return result;
}

uint64_t ___wifiDeviceAttached_block_invoke(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  uint64_t v9;
  int *v10;
  _BOOL4 v11;
  uint64_t v12;

  v8 = *(_QWORD *)(result + 32);
  if (!*(_BYTE *)(v8 + 10))
  {
    v9 = result;
    v10 = *(int **)(v8 + 16);
    if (*v10 <= 30)
    {
      if (*v10 == -1)
      {
        v11 = _LogCategory_Initialize((uint64_t)v10, 0x1Eu);
        v8 = *(_QWORD *)(v9 + 32);
        if (!v11)
          return objc_msgSend((id)v8, "_update");
        v10 = *(int **)(v8 + 16);
      }
      LogPrintF((uint64_t)v10, (uint64_t)"void _wifiDeviceAttached(WiFiManagerClientRef, WiFiDeviceClientRef, void *)_block_invoke", 0x1Eu, (uint64_t)"WiFi Device Attached\n", a5, a6, a7, a8, v12);
      v8 = *(_QWORD *)(v9 + 32);
    }
    return objc_msgSend((id)v8, "_update");
  }
  return result;
}

uint64_t ___wifiCriticalCallback_block_invoke(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  uint64_t v9;
  int *v10;
  const char *v11;
  _BOOL4 v12;

  v8 = *(_QWORD *)(result + 32);
  if (!*(_BYTE *)(v8 + 10))
  {
    v9 = result;
    v10 = *(int **)(v8 + 16);
    if (*v10 <= 30)
    {
      if (*v10 != -1)
      {
LABEL_4:
        if (*(_BYTE *)(v8 + 42))
          v11 = "yes";
        else
          v11 = "no";
        LogPrintF((uint64_t)v10, (uint64_t)"void _wifiCriticalCallback(WiFiDeviceClientRef, _Bool, void *)_block_invoke", 0x1Eu, (uint64_t)"WiFi critical changed: %s -> %s\n", a5, a6, a7, a8, (uint64_t)v11);
        v8 = *(_QWORD *)(v9 + 32);
        goto LABEL_9;
      }
      v12 = _LogCategory_Initialize((uint64_t)v10, 0x1Eu);
      v8 = *(_QWORD *)(v9 + 32);
      if (v12)
      {
        v10 = *(int **)(v8 + 16);
        goto LABEL_4;
      }
    }
LABEL_9:
    *(_BYTE *)(v8 + 42) = *(_BYTE *)(v9 + 40);
    return objc_msgSend(*(id *)(v9 + 32), "_wifiStateChanged");
  }
  return result;
}

id AWDLTrafficRegistrationServiceAirPlayFunction()
{
  return (id)constantValAWDLTrafficRegistrationServiceAirPlay;
}

id initValAWDLTrafficRegistrationServiceAirPlay()
{
  id *v0;

  if (WiFiPeerToPeerLibrary_sOnce_9651 != -1)
    dispatch_once(&WiFiPeerToPeerLibrary_sOnce_9651, &__block_literal_global_9652);
  v0 = (id *)dlsym((void *)WiFiPeerToPeerLibrary_sLib_9653, "AWDLTrafficRegistrationServiceAirPlay");
  if (v0)
    objc_storeStrong((id *)&constantValAWDLTrafficRegistrationServiceAirPlay, *v0);
  getAWDLTrafficRegistrationServiceAirPlay[0] = (uint64_t (*)())AWDLTrafficRegistrationServiceAirPlayFunction;
  return (id)constantValAWDLTrafficRegistrationServiceAirPlay;
}

id AWDLTrafficRegistrationServiceSidecarFunction()
{
  return (id)constantValAWDLTrafficRegistrationServiceSidecar;
}

id initValAWDLTrafficRegistrationServiceSidecar()
{
  id *v0;

  if (WiFiPeerToPeerLibrary_sOnce_9651 != -1)
    dispatch_once(&WiFiPeerToPeerLibrary_sOnce_9651, &__block_literal_global_9652);
  v0 = (id *)dlsym((void *)WiFiPeerToPeerLibrary_sLib_9653, "AWDLTrafficRegistrationServiceSidecar");
  if (v0)
    objc_storeStrong((id *)&constantValAWDLTrafficRegistrationServiceSidecar, *v0);
  getAWDLTrafficRegistrationServiceSidecar[0] = (uint64_t (*)())AWDLTrafficRegistrationServiceSidecarFunction;
  return (id)constantValAWDLTrafficRegistrationServiceSidecar;
}

id AWDLTrafficRegistrationServiceDeviceToDeviceMigrationFunction()
{
  return (id)constantValAWDLTrafficRegistrationServiceDeviceToDeviceMigration;
}

id initValAWDLTrafficRegistrationServiceDeviceToDeviceMigration()
{
  id *v0;

  if (WiFiPeerToPeerLibrary_sOnce_9651 != -1)
    dispatch_once(&WiFiPeerToPeerLibrary_sOnce_9651, &__block_literal_global_9652);
  v0 = (id *)dlsym((void *)WiFiPeerToPeerLibrary_sLib_9653, "AWDLTrafficRegistrationServiceDeviceToDeviceMigration");
  if (v0)
    objc_storeStrong((id *)&constantValAWDLTrafficRegistrationServiceDeviceToDeviceMigration, *v0);
  getAWDLTrafficRegistrationServiceDeviceToDeviceMigration[0] = (uint64_t (*)())AWDLTrafficRegistrationServiceDeviceToDeviceMigrationFunction;
  return (id)constantValAWDLTrafficRegistrationServiceDeviceToDeviceMigration;
}

id AWDLTrafficRegistrationServiceUniversalControlFunction()
{
  return (id)constantValAWDLTrafficRegistrationServiceUniversalControl;
}

id initValAWDLTrafficRegistrationServiceUniversalControl()
{
  id *v0;

  if (WiFiPeerToPeerLibrary_sOnce_9651 != -1)
    dispatch_once(&WiFiPeerToPeerLibrary_sOnce_9651, &__block_literal_global_9652);
  v0 = (id *)dlsym((void *)WiFiPeerToPeerLibrary_sLib_9653, "AWDLTrafficRegistrationServiceUniversalControl");
  if (v0)
    objc_storeStrong((id *)&constantValAWDLTrafficRegistrationServiceUniversalControl, *v0);
  getAWDLTrafficRegistrationServiceUniversalControl[0] = (uint64_t (*)())AWDLTrafficRegistrationServiceUniversalControlFunction;
  return (id)constantValAWDLTrafficRegistrationServiceUniversalControl;
}

id AWDLTrafficRegistrationServiceMPRemoteCameraFunction()
{
  return (id)constantValAWDLTrafficRegistrationServiceMPRemoteCamera;
}

id initValAWDLTrafficRegistrationServiceMPRemoteCamera()
{
  id *v0;

  if (WiFiPeerToPeerLibrary_sOnce_9651 != -1)
    dispatch_once(&WiFiPeerToPeerLibrary_sOnce_9651, &__block_literal_global_9652);
  v0 = (id *)dlsym((void *)WiFiPeerToPeerLibrary_sLib_9653, "AWDLTrafficRegistrationServiceMPRemoteCamera");
  if (v0)
    objc_storeStrong((id *)&constantValAWDLTrafficRegistrationServiceMPRemoteCamera, *v0);
  getAWDLTrafficRegistrationServiceMPRemoteCamera[0] = (uint64_t (*)())AWDLTrafficRegistrationServiceMPRemoteCameraFunction;
  return (id)constantValAWDLTrafficRegistrationServiceMPRemoteCamera;
}

id AWDLTrafficRegistrationServiceRemoteCameraFunction()
{
  return (id)constantValAWDLTrafficRegistrationServiceRemoteCamera;
}

id initValAWDLTrafficRegistrationServiceRemoteCamera()
{
  id *v0;

  if (WiFiPeerToPeerLibrary_sOnce_9651 != -1)
    dispatch_once(&WiFiPeerToPeerLibrary_sOnce_9651, &__block_literal_global_9652);
  v0 = (id *)dlsym((void *)WiFiPeerToPeerLibrary_sLib_9653, "AWDLTrafficRegistrationServiceRemoteCamera");
  if (v0)
    objc_storeStrong((id *)&constantValAWDLTrafficRegistrationServiceRemoteCamera, *v0);
  getAWDLTrafficRegistrationServiceRemoteCamera[0] = (uint64_t (*)())AWDLTrafficRegistrationServiceRemoteCameraFunction;
  return (id)constantValAWDLTrafficRegistrationServiceRemoteCamera;
}

id AWDLTrafficRegistrationServiceTVRemoteCameraFunction()
{
  return (id)constantValAWDLTrafficRegistrationServiceTVRemoteCamera;
}

id initValAWDLTrafficRegistrationServiceTVRemoteCamera()
{
  id *v0;

  if (WiFiPeerToPeerLibrary_sOnce_9651 != -1)
    dispatch_once(&WiFiPeerToPeerLibrary_sOnce_9651, &__block_literal_global_9652);
  v0 = (id *)dlsym((void *)WiFiPeerToPeerLibrary_sLib_9653, "AWDLTrafficRegistrationServiceTVRemoteCamera");
  if (v0)
    objc_storeStrong((id *)&constantValAWDLTrafficRegistrationServiceTVRemoteCamera, *v0);
  getAWDLTrafficRegistrationServiceTVRemoteCamera[0] = (uint64_t (*)())AWDLTrafficRegistrationServiceTVRemoteCameraFunction;
  return (id)constantValAWDLTrafficRegistrationServiceTVRemoteCamera;
}

id AWDLTrafficRegistrationServiceRemoteScreenFunction()
{
  return (id)constantValAWDLTrafficRegistrationServiceRemoteScreen;
}

id initValAWDLTrafficRegistrationServiceRemoteScreen()
{
  id *v0;

  if (WiFiPeerToPeerLibrary_sOnce_9651 != -1)
    dispatch_once(&WiFiPeerToPeerLibrary_sOnce_9651, &__block_literal_global_9652);
  v0 = (id *)dlsym((void *)WiFiPeerToPeerLibrary_sLib_9653, "AWDLTrafficRegistrationServiceRemoteScreen");
  if (v0)
    objc_storeStrong((id *)&constantValAWDLTrafficRegistrationServiceRemoteScreen, *v0);
  getAWDLTrafficRegistrationServiceRemoteScreen[0] = (uint64_t (*)())AWDLTrafficRegistrationServiceRemoteScreenFunction;
  return (id)constantValAWDLTrafficRegistrationServiceRemoteScreen;
}

id WiFiP2PAWDLStateMonitorFunction()
{
  return (id)classWiFiP2PAWDLStateMonitor;
}

Class initWiFiP2PAWDLStateMonitor()
{
  Class result;

  if (WiFiPeerToPeerLibrary_sOnce_9651 != -1)
    dispatch_once(&WiFiPeerToPeerLibrary_sOnce_9651, &__block_literal_global_9652);
  result = objc_getClass("WiFiP2PAWDLStateMonitor");
  classWiFiP2PAWDLStateMonitor = (uint64_t)result;
  getWiFiP2PAWDLStateMonitorClass = (uint64_t (*)())WiFiP2PAWDLStateMonitorFunction;
  return result;
}

BOOL CUXPCDecodeSInt64Ranged(void *a1, const char *a2, int64_t a3, int64_t a4, int64_t *a5, _QWORD *a6)
{
  return CUXPCDecodeSInt64RangedEx(a1, a2, a3, a4, a5, a6) != 5;
}

BOOL CUXPCDecodeUInt64Ranged(void *a1, const char *a2, uint64_t a3, uint64_t a4, uint64_t *a5, _QWORD *a6)
{
  return CUXPCDecodeUInt64RangedEx(a1, a2, a3, a4, a5, a6) != 5;
}

uint64_t __Block_byref_object_copy__10155(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void __Block_byref_object_dispose__10156(uint64_t a1)
{

}

uint64_t CUXPCDecodeNSArrayOfInteger(void *a1, const char *a2, uint64_t a3, uint64_t a4, id *a5, _QWORD *a6)
{
  id v11;
  uint64_t v12;
  void *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  id v20;
  void *v21;
  _QWORD applier[9];
  uint64_t v24;
  uint64_t *v25;
  uint64_t v26;
  uint64_t (*v27)(uint64_t, uint64_t);
  void (*v28)(uint64_t);
  id v29;

  v11 = a1;
  xpc_dictionary_get_value(v11, a2);
  v12 = objc_claimAutoreleasedReturnValue();
  v13 = (void *)v12;
  if (!v12)
    goto LABEL_9;
  if (MEMORY[0x18D78F504](v12) == MEMORY[0x1E0C812C8])
  {
    v24 = 0;
    v25 = &v24;
    v26 = 0x3032000000;
    v27 = __Block_byref_object_copy__10155;
    v28 = __Block_byref_object_dispose__10156;
    v29 = 0;
    v20 = objc_alloc_init(MEMORY[0x1E0C99DE8]);
    applier[0] = MEMORY[0x1E0C809B0];
    applier[1] = 3221225472;
    applier[2] = __CUXPCDecodeNSArrayOfInteger_block_invoke;
    applier[3] = &unk_1E25DE678;
    applier[6] = a2;
    applier[7] = a3;
    applier[8] = a4;
    applier[4] = v20;
    applier[5] = &v24;
    xpc_array_apply(v13, applier);
    v21 = (void *)v25[5];
    if (v21)
    {
      if (a6)
        *a6 = objc_retainAutorelease(v21);
    }
    else
    {
      objc_storeStrong(a5, v20);
    }

    _Block_object_dispose(&v24, 8);
    if (v21)
      goto LABEL_8;
LABEL_9:
    v19 = 1;
    goto LABEL_10;
  }
  if (!a6)
  {
LABEL_8:
    v19 = 0;
    goto LABEL_10;
  }
  NSErrorF_safe((void *)*MEMORY[0x1E0CB2F90], 4294960540, (uint64_t)"XPC non-array type: '%s'", v14, v15, v16, v17, v18, (uint64_t)a2);
  v19 = 0;
  *a6 = (id)objc_claimAutoreleasedReturnValue();
LABEL_10:

  return v19;
}

void sub_18D4C1418(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_list va;

  va_start(va, a11);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t CUXPCDecodeNSUUID(void *a1, const char *a2, void **a3, _QWORD *a4)
{
  id v7;
  const uint8_t *uuid;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  v7 = a1;
  uuid = xpc_dictionary_get_uuid(v7, a2);
  if (uuid)
  {
    v9 = objc_msgSend(objc_alloc(MEMORY[0x1E0CB3A28]), "initWithUUIDBytes:", uuid);
    v10 = *a3;
    *a3 = (void *)v9;
LABEL_5:
    v17 = 1;
    goto LABEL_6;
  }
  xpc_dictionary_get_value(v7, a2);
  v11 = objc_claimAutoreleasedReturnValue();
  v10 = (void *)v11;
  if (!v11 || MEMORY[0x18D78F504](v11) == MEMORY[0x1E0C813A0])
    goto LABEL_5;
  if (a4)
  {
    NSErrorF_safe((void *)*MEMORY[0x1E0CB2F90], 4294960540, (uint64_t)"XPC non-UUID type: '%s'", v12, v13, v14, v15, v16, (uint64_t)a2);
    v17 = 0;
    *a4 = (id)objc_claimAutoreleasedReturnValue();
  }
  else
  {
    v17 = 0;
  }
LABEL_6:

  return v17;
}

void CUXPCEncodeNSArrayOfNSNumber(void *a1, const char *a2, void *a3)
{
  id v5;
  id v6;
  xpc_object_t v7;
  id v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t i;
  void *v13;
  double v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  _BYTE v19[128];
  uint64_t v20;

  v20 = *MEMORY[0x1E0C80C00];
  v5 = a1;
  v6 = a3;
  if (v6)
  {
    v7 = xpc_array_create(0, 0);
    v15 = 0u;
    v16 = 0u;
    v17 = 0u;
    v18 = 0u;
    v8 = v6;
    v9 = objc_msgSend(v8, "countByEnumeratingWithState:objects:count:", &v15, v19, 16);
    if (v9)
    {
      v10 = v9;
      v11 = *(_QWORD *)v16;
      do
      {
        for (i = 0; i != v10; ++i)
        {
          if (*(_QWORD *)v16 != v11)
            objc_enumerationMutation(v8);
          v13 = *(void **)(*((_QWORD *)&v15 + 1) + 8 * i);
          if (CFNumberIsFloatType((CFNumberRef)v13))
          {
            objc_msgSend(v13, "doubleValue");
            xpc_array_set_double(v7, 0xFFFFFFFFFFFFFFFFLL, v14);
          }
          else
          {
            xpc_array_set_int64(v7, 0xFFFFFFFFFFFFFFFFLL, objc_msgSend(v13, "longLongValue", (_QWORD)v15));
          }
        }
        v10 = objc_msgSend(v8, "countByEnumeratingWithState:objects:count:", &v15, v19, 16);
      }
      while (v10);
    }

    xpc_dictionary_set_value(v5, a2, v7);
  }

}

void CUXPCEncodeNSError(void *a1, void *a2, const char *a3, const char *a4, const char *a5, const char *a6, const char *a7)
{
  id v13;
  id v14;

  if (a1)
  {
    v13 = a2;
    _CUXPCEncodeNSError(a1, a4, a5, a6, a7, 1u);
    v14 = (id)objc_claimAutoreleasedReturnValue();
    xpc_dictionary_set_value(v13, a3, v14);

  }
}

id _CUXPCEncodeNSError(void *a1, const char *a2, const char *a3, const char *a4, const char *a5, unsigned int a6)
{
  id v11;
  xpc_object_t v12;
  void *v13;
  void *v14;
  const char *v15;
  const __CFDictionary *v16;
  CFTypeID TypeID;
  void *v18;
  const char *v19;
  const void *v20;
  CFTypeID v21;
  uint64_t v22;
  void *v23;
  void *v24;
  const char *v26;

  v11 = a1;
  v12 = xpc_dictionary_create(0, 0, 0);
  xpc_dictionary_set_int64(v12, a2, objc_msgSend(v11, "code"));
  objc_msgSend(v11, "domain");
  v13 = (void *)objc_claimAutoreleasedReturnValue();
  v14 = v13;
  if (v13)
  {
    if ((objc_msgSend(v13, "isEqual:", *MEMORY[0x1E0CB2F90]) & 1) == 0)
    {
      v15 = (const char *)objc_msgSend(objc_retainAutorelease(v14), "UTF8String");
      if (v15)
        xpc_dictionary_set_string(v12, a3, v15);
    }
  }
  objc_msgSend(v11, "userInfo");
  v16 = (const __CFDictionary *)objc_claimAutoreleasedReturnValue();
  TypeID = CFStringGetTypeID();
  CFDictionaryGetTypedValue(v16, CFSTR("cuErrorMsg"), TypeID, 0);
  v18 = (void *)objc_claimAutoreleasedReturnValue();
  if (objc_msgSend(v18, "length"))
  {
    v19 = (const char *)objc_msgSend(objc_retainAutorelease(v18), "UTF8String");
    if (v19)
      xpc_dictionary_set_string(v12, a4, v19);
  }
  if (a6 <= 3)
  {
    v26 = a5;
    v20 = (const void *)*MEMORY[0x1E0CB3388];
    v21 = CFErrorGetTypeID();
    CFDictionaryGetTypedValue(v16, v20, v21, 0);
    v22 = objc_claimAutoreleasedReturnValue();
    v23 = (void *)v22;
    if (v22)
    {
      _CUXPCEncodeNSError(v22, a2, a3, a4, v26, a6 + 1);
      v24 = (void *)objc_claimAutoreleasedReturnValue();
      if (v24)
        xpc_dictionary_set_value(v12, v26, v24);

    }
  }

  return v12;
}

uint64_t _CUXPCDecodeNSError(void *a1, const char *a2, const char *a3, const char *a4, const char *a5, unsigned int a6, int a7, _QWORD *a8, _QWORD *a9)
{
  id v15;
  int64_t int64;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  void *v23;
  const char *string;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  id v30;
  uint64_t v31;
  const char *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  void *v39;
  id v40;
  uint64_t v41;
  void *v42;
  uint64_t v43;
  int v44;
  id v45;
  _QWORD *v46;
  void *v47;
  void *v49;
  const char *v50;
  uint64_t v51;
  uint64_t v52;
  id v54;

  v15 = a1;
  int64 = xpc_dictionary_get_int64(v15, a2);
  if (!int64)
  {
    xpc_dictionary_get_value(v15, a2);
    v17 = objc_claimAutoreleasedReturnValue();
    v23 = (void *)v17;
    if (v17)
    {
      if (MEMORY[0x18D78F504](v17) == MEMORY[0x1E0C81328])
      {

        goto LABEL_5;
      }
      if (a9)
      {
        v49 = (void *)*MEMORY[0x1E0CB2F90];
        v50 = "XPC non-integer error code type";
        v51 = 4294960540;
        goto LABEL_31;
      }
    }
    else
    {
      if (!a7)
      {
        v31 = 1;
        goto LABEL_39;
      }
      if (a9)
      {
        v49 = (void *)*MEMORY[0x1E0CB2F90];
        v50 = "XPC error object missing error code";
        v51 = 4294960569;
LABEL_31:
        NSErrorF_safe(v49, v51, (uint64_t)v50, v18, v19, v20, v21, v22, v52);
        v31 = 0;
        *a9 = (id)objc_claimAutoreleasedReturnValue();
LABEL_39:

        goto LABEL_27;
      }
    }
    v31 = 0;
    goto LABEL_39;
  }
LABEL_5:
  string = xpc_dictionary_get_string(v15, a3);
  if (!string)
  {
    v30 = (id)*MEMORY[0x1E0CB2F90];
LABEL_10:
    v32 = xpc_dictionary_get_string(v15, a4);
    if (v32)
    {
      v33 = objc_msgSend(objc_alloc(MEMORY[0x1E0CB3940]), "initWithUTF8String:", v32);
      if (!v33)
      {
        if (a9)
        {
          NSErrorF_safe((void *)*MEMORY[0x1E0CB2F90], 4294960554, (uint64_t)"XPC error message bad-UTF-8", v34, v35, v36, v37, v38, v52);
          v31 = 0;
          *a9 = (id)objc_claimAutoreleasedReturnValue();
        }
        else
        {
          v31 = 0;
        }
        goto LABEL_26;
      }
      v39 = (void *)v33;
      v40 = objc_alloc_init(MEMORY[0x1E0C99E08]);
      objc_msgSend(v40, "setObject:forKeyedSubscript:", v39, CFSTR("cuErrorMsg"));

    }
    else
    {
      v40 = 0;
    }
    xpc_dictionary_get_value(v15, a5);
    v41 = objc_claimAutoreleasedReturnValue();
    v42 = (void *)v41;
    if (v41 && (v43 = MEMORY[0x18D78F504](v41), a6 <= 3) && v43 == MEMORY[0x1E0C812F8])
    {
      v54 = 0;
      v44 = _CUXPCDecodeNSError(v42, a2, a3, a4, a5, a6 + 1, 1, &v54, a9);
      v45 = v54;
      if (!v44)
      {
        v31 = 0;
LABEL_25:

LABEL_26:
        goto LABEL_27;
      }
      v46 = a8;
      if (!v40)
        v40 = objc_alloc_init(MEMORY[0x1E0C99E08]);
      objc_msgSend(v40, "setObject:forKeyedSubscript:", v45, *MEMORY[0x1E0CB3388]);

    }
    else
    {
      v46 = a8;
    }
    v47 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0CB35C8]), "initWithDomain:code:userInfo:", v30, int64, v40);
    v45 = v47;
    if (v46)
    {
      v45 = objc_retainAutorelease(v47);
      *v46 = v45;
    }
    v31 = 1;
    goto LABEL_25;
  }
  v30 = (id)objc_msgSend(objc_alloc(MEMORY[0x1E0CB3940]), "initWithUTF8String:", string);
  if (v30)
    goto LABEL_10;
  if (a9)
  {
    NSErrorF_safe((void *)*MEMORY[0x1E0CB2F90], 4294960554, (uint64_t)"XPC error domain bad-UTF-8", v25, v26, v27, v28, v29, v52);
    v31 = 0;
    *a9 = (id)objc_claimAutoreleasedReturnValue();
  }
  else
  {
    v31 = 0;
  }
LABEL_27:

  return v31;
}

id CUXPCObjectGetResponseHandler(void *a1)
{
  return objc_getAssociatedObject(a1, &sCUXPCResponseHandlerKey);
}

void CUXPCObjectSetResponseHandler(void *a1, id value)
{
  objc_setAssociatedObject(a1, &sCUXPCResponseHandlerKey, value, (void *)0x301);
}

BOOL CUXPCDictionaryExpectsReply(void *a1)
{
  id v1;
  _BOOL8 v2;
  void *v3;

  v1 = a1;
  if ((xpc_dictionary_expects_reply() & 1) != 0)
  {
    v2 = 1;
  }
  else
  {
    objc_getAssociatedObject(v1, &sCUXPCResponseHandlerKey);
    v3 = (void *)objc_claimAutoreleasedReturnValue();
    v2 = v3 != 0;

  }
  return v2;
}

CFDictionaryRef CUXPCCreateCFObjectFromXPCObject(void *a1)
{
  id v1;
  uint64_t v2;
  size_t count;
  CFIndex v4;
  unint64_t v5;
  const void **p_valuePtr;
  CFTypeRef *v7;
  _BOOL4 value;
  const __CFDictionary *v9;
  CFDictionaryRef v10;
  const char *string_ptr;
  size_t length;
  CFIndex v14;
  const UInt8 *bytes_ptr;
  int64_t v16;
  size_t v17;
  CFIndex v18;
  const void **v19;
  uint64_t *v20;
  uint64_t v21;
  unint64_t v22;
  const void *v23;
  const void **v24;
  uint64_t v25;
  CFTypeRef *v26;
  _QWORD v27[7];
  _QWORD applier[6];
  uint64_t v29;
  uint64_t *v30;
  uint64_t v31;
  uint64_t v32;
  __int128 valuePtr;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  __int128 v55;
  __int128 v56;
  __int128 v57;
  __int128 v58;
  __int128 v59;
  __int128 v60;
  __int128 v61;
  __int128 v62;
  __int128 v63;
  __int128 v64;
  uint64_t v65;
  CFUUIDBytes v66;

  v65 = *MEMORY[0x1E0C80C00];
  v1 = a1;
  v2 = MEMORY[0x18D78F504]();
  if (v2 == MEMORY[0x1E0C81350])
  {
    v7 = (CFTypeRef *)MEMORY[0x1E0C9B0D0];
LABEL_18:
    v9 = (const __CFDictionary *)CFRetain(*v7);
    goto LABEL_19;
  }
  if (v2 == MEMORY[0x1E0C812D0])
  {
    value = xpc_BOOL_get_value(v1);
    v7 = (CFTypeRef *)MEMORY[0x1E0C9AE50];
    if (!value)
      v7 = (CFTypeRef *)MEMORY[0x1E0C9AE40];
    goto LABEL_18;
  }
  if (v2 == MEMORY[0x1E0C81390])
  {
    string_ptr = xpc_string_get_string_ptr(v1);
    v9 = (const __CFDictionary *)CFStringCreateWithCString(0, string_ptr, 0x8000100u);
  }
  else if (v2 == MEMORY[0x1E0C812E8])
  {
    length = xpc_data_get_length(v1);
    if ((length & 0x8000000000000000) != 0)
      goto LABEL_46;
    v14 = length;
    bytes_ptr = (const UInt8 *)xpc_data_get_bytes_ptr(v1);
    v9 = CFDataCreate(0, bytes_ptr, v14);
  }
  else if (v2 == MEMORY[0x1E0C81328])
  {
    *(_QWORD *)&valuePtr = xpc_int64_get_value(v1);
    v9 = CFNumberCreate(0, kCFNumberSInt64Type, &valuePtr);
  }
  else if (v2 == MEMORY[0x1E0C81398])
  {
    *(_QWORD *)&valuePtr = xpc_uint64_get_value(v1);
    v9 = CFNumberCreate(0, kCFNumberSInt64Type, &valuePtr);
  }
  else if (v2 == MEMORY[0x1E0C81300])
  {
    *(_QWORD *)&valuePtr = xpc_double_get_value(v1);
    v9 = CFNumberCreate(0, kCFNumberDoubleType, &valuePtr);
  }
  else if (v2 == MEMORY[0x1E0C812F0])
  {
    v16 = xpc_date_get_value(v1);
    v9 = CFDateCreate(0, (double)v16 / 1000000000.0 - *MEMORY[0x1E0C9ADF8]);
  }
  else
  {
    if (v2 != MEMORY[0x1E0C813A0])
    {
      if (v2 != MEMORY[0x1E0C812C8])
      {
        if (v2 == MEMORY[0x1E0C812F8])
        {
          count = xpc_dictionary_get_count(v1);
          if (!(count >> 62))
          {
            v4 = count;
            v5 = 2 * count;
            v63 = 0u;
            v64 = 0u;
            v61 = 0u;
            v62 = 0u;
            v59 = 0u;
            v60 = 0u;
            v57 = 0u;
            v58 = 0u;
            v55 = 0u;
            v56 = 0u;
            v53 = 0u;
            v54 = 0u;
            v51 = 0u;
            v52 = 0u;
            v49 = 0u;
            v50 = 0u;
            v47 = 0u;
            v48 = 0u;
            v45 = 0u;
            v46 = 0u;
            v43 = 0u;
            v44 = 0u;
            v41 = 0u;
            v42 = 0u;
            v39 = 0u;
            v40 = 0u;
            v37 = 0u;
            v38 = 0u;
            v35 = 0u;
            v36 = 0u;
            valuePtr = 0u;
            v34 = 0u;
            if (count < 0x81)
            {
              p_valuePtr = (const void **)&valuePtr;
LABEL_44:
              v29 = 0;
              v30 = &v29;
              v31 = 0x2020000000;
              v32 = 0;
              v27[0] = MEMORY[0x1E0C809B0];
              v27[1] = 3221225472;
              v27[2] = __CUXPCCreateCFObjectFromXPCObject_block_invoke_2;
              v27[3] = &unk_1E25DE710;
              v27[4] = &v29;
              v27[5] = p_valuePtr;
              v27[6] = v4;
              xpc_dictionary_apply(v1, v27);
              if (v30[3] == v4)
                v10 = CFDictionaryCreate(0, p_valuePtr, &p_valuePtr[v4], v4, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
              else
                v10 = 0;
              if (v4)
              {
                if (v5 <= 1)
                  v25 = 1;
                else
                  v25 = v5;
                v26 = p_valuePtr;
                do
                {
                  if (*v26)
                    CFRelease(*v26);
                  ++v26;
                  --v25;
                }
                while (v25);
              }
              if (p_valuePtr == (const void **)&valuePtr)
                goto LABEL_59;
              v24 = p_valuePtr;
LABEL_58:
              free(v24);
LABEL_59:
              _Block_object_dispose(&v29, 8);
              goto LABEL_20;
            }
            p_valuePtr = (const void **)malloc_type_calloc(2 * count, 8uLL, 0xC0040B8AA526DuLL);
            if (p_valuePtr)
              goto LABEL_44;
          }
        }
        goto LABEL_46;
      }
      v17 = xpc_array_get_count(v1);
      if ((v17 & 0x8000000000000000) == 0)
      {
        v18 = v17;
        v63 = 0u;
        v64 = 0u;
        v61 = 0u;
        v62 = 0u;
        v59 = 0u;
        v60 = 0u;
        v57 = 0u;
        v58 = 0u;
        v55 = 0u;
        v56 = 0u;
        v53 = 0u;
        v54 = 0u;
        v51 = 0u;
        v52 = 0u;
        v49 = 0u;
        v50 = 0u;
        v47 = 0u;
        v48 = 0u;
        v45 = 0u;
        v46 = 0u;
        v43 = 0u;
        v44 = 0u;
        v41 = 0u;
        v42 = 0u;
        v39 = 0u;
        v40 = 0u;
        v37 = 0u;
        v38 = 0u;
        v35 = 0u;
        v36 = 0u;
        valuePtr = 0u;
        v34 = 0u;
        if (v17 < 0x101)
        {
          v19 = (const void **)&valuePtr;
LABEL_33:
          v29 = 0;
          v30 = &v29;
          v31 = 0x2020000000;
          v32 = 0;
          applier[0] = MEMORY[0x1E0C809B0];
          applier[1] = 3221225472;
          applier[2] = __CUXPCCreateCFObjectFromXPCObject_block_invoke;
          applier[3] = &unk_1E25DE6E8;
          applier[4] = &v29;
          applier[5] = v19;
          xpc_array_apply(v1, applier);
          v20 = v30;
          v21 = v30[3];
          if (v21 == v18)
          {
            v10 = CFArrayCreate(0, v19, v18, MEMORY[0x1E0C9B378]);
            v20 = v30;
            v21 = v30[3];
          }
          else
          {
            v10 = 0;
          }
          if (v21)
          {
            v22 = 0;
            do
            {
              v23 = v19[v22];
              if (v23)
              {
                CFRelease(v23);
                v20 = v30;
              }
              ++v22;
            }
            while (v22 < v20[3]);
          }
          if (v19 == (const void **)&valuePtr)
            goto LABEL_59;
          v24 = v19;
          goto LABEL_58;
        }
        v19 = (const void **)malloc_type_calloc(v17, 8uLL, 0xC0040B8AA526DuLL);
        if (v19)
          goto LABEL_33;
      }
LABEL_46:
      v10 = 0;
      goto LABEL_20;
    }
    v66 = *(CFUUIDBytes *)xpc_uuid_get_bytes(v1);
    v9 = CFUUIDCreateFromUUIDBytes(0, v66);
  }
LABEL_19:
  v10 = v9;
LABEL_20:

  return v10;
}

void sub_18D4C2330(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, ...)
{
  va_list va;

  va_start(va, a15);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint8_t *CUXPCObjectGetUUID(void *a1, const char *a2)
{
  uint8_t *uuid;

  uuid = (uint8_t *)xpc_dictionary_get_uuid(a1, a2);
  if (uuid)
    uuid = (uint8_t *)objc_msgSend(objc_alloc(MEMORY[0x1E0CB3A28]), "initWithUUIDBytes:", uuid);
  return uuid;
}

void CUXPCObjectSetUUID(void *a1, const char *a2, void *a3)
{
  id v5;
  unsigned __int8 uuid[16];
  uint64_t v7;

  v7 = *MEMORY[0x1E0C80C00];
  v5 = a1;
  objc_msgSend(a3, "getUUIDBytes:", uuid);
  xpc_dictionary_set_uuid(v5, a2, uuid);

}

uint64_t DACPServer_Create(_QWORD *a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  __int128 v8;
  uint64_t (*v9)(_QWORD *, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t (*v10)(uint64_t);
  void (*v11)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t);
  __int128 v12;
  _BYTE v13[28];
  int v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  v17 = 0;
  if (!*a2)
    return 4294960591;
  v15 = 0;
  v16 = 0;
  *(_QWORD *)v13 = 0;
  *(_OWORD *)&v13[12] = 0u;
  v12 = 0u;
  v14 = -524288;
  v8 = xmmword_18D51D450;
  v9 = __DACPServer_ServerFree;
  v10 = __DACPServer_ServerStart;
  v11 = __DACPServer_ServerStop;
  *(_QWORD *)&v13[8] = __DACPServer_ProcessRequest;
  v4 = HTTPServer_Create(&v17, &v8);
  v5 = v17;
  if ((_DWORD)v4)
  {
    v6 = v4;
    if (!v17)
      return v6;
  }
  else
  {
    *(_OWORD *)(v17 + 224) = *(_OWORD *)a2;
    RandomBytes((void *)(v5 + 240), 8uLL);
    *(_QWORD *)(v5 + 320) = 0;
    *(_QWORD *)(v5 + 328) = 0;
    v6 = pthread_mutex_init((pthread_mutex_t *)(v5 + 248), 0);
    if (!(_DWORD)v6)
    {
      *(_QWORD *)(v5 + 312) = v5 + 248;
      *a1 = v5;
      return v6;
    }
  }
  HTTPServer_Delete((_QWORD *)v5);
  return v6;
}

uint64_t __DACPServer_ServerFree(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  _DNSServiceRef_t *v10;
  void *v11;
  uint64_t result;

  v10 = (_DNSServiceRef_t *)a1[42];
  if (v10)
  {
    DNSServiceRefDeallocate(v10);
    a1[42] = 0;
  }
  v11 = (void *)a1[40];
  if (v11)
  {
    free(v11);
    a1[40] = 0;
  }
  a1[41] = 0;
  result = a1[39];
  if (result)
  {
    result = pthread_mutex_destroy((pthread_mutex_t *)result);
    a1[39] = 0;
  }
  if (gLogCategory_DACPServer <= 40)
  {
    if (gLogCategory_DACPServer != -1)
      return LogPrintF((uint64_t)&gLogCategory_DACPServer, (uint64_t)"void __DACPServer_ServerFree(HTTPServerOldRef)", 0x28u, (uint64_t)"Deleted\n", a5, a6, a7, a8, a9);
    result = _LogCategory_Initialize((uint64_t)&gLogCategory_DACPServer, 0x28u);
    if ((_DWORD)result)
      return LogPrintF((uint64_t)&gLogCategory_DACPServer, (uint64_t)"void __DACPServer_ServerFree(HTTPServerOldRef)", 0x28u, (uint64_t)"Deleted\n", a5, a6, a7, a8, a9);
  }
  return result;
}

uint64_t __DACPServer_ServerStart(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char __str[64];
  uint64_t v9;

  v9 = *MEMORY[0x1E0C80C00];
  snprintf(__str, 0x40uLL, "%s%016llX", "iTunes_Ctrl_", *(_QWORD *)(a1 + 240));
  v6 = DNSServiceRegister((DNSServiceRef *)(a1 + 336), 0, 0, __str, "_dacp._tcp", "local.", 0, bswap32(*(_DWORD *)(a1 + 128)) >> 16, 0, 0, 0, 0);
  if (!(_DWORD)v6
    && gLogCategory_DACPServer <= 40
    && (gLogCategory_DACPServer != -1 || _LogCategory_Initialize((uint64_t)&gLogCategory_DACPServer, 0x28u)))
  {
    LogPrintF((uint64_t)&gLogCategory_DACPServer, (uint64_t)"OSStatus __DACPServer_ServerStart(HTTPServerOldRef)", 0x28u, (uint64_t)"Registered %s.%s port %d\n", v2, v3, v4, v5, (uint64_t)__str);
  }
  return v6;
}

void __DACPServer_ServerStop(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  _DNSServiceRef_t *v10;

  v10 = *(_DNSServiceRef_t **)(a1 + 336);
  if (v10)
  {
    DNSServiceRefDeallocate(v10);
    *(_QWORD *)(a1 + 336) = 0;
  }
  if (gLogCategory_DACPServer <= 40
    && (gLogCategory_DACPServer != -1 || _LogCategory_Initialize((uint64_t)&gLogCategory_DACPServer, 0x28u)))
  {
    LogPrintF((uint64_t)&gLogCategory_DACPServer, (uint64_t)"void __DACPServer_ServerStop(HTTPServerOldRef)", 0x28u, (uint64_t)"Stopped\n", a5, a6, a7, a8, a9);
  }
}

uint64_t __DACPServer_ProcessRequest(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9;
  unsigned __int8 *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  const char *v22;
  uint64_t v23;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  unsigned int v28;
  size_t v29;
  char *v30;
  unsigned int v31;

  v9 = *(_QWORD *)(a1 + 8);
  v31 = 0;
  v29 = 0;
  v30 = 0;
  v28 = 0;
  if (HTTPServer_GetNextURLSegment((uint64_t *)a1, (unint64_t *)&v30, &v29, &v31, a5, a6, a7, a8))
  {
    v11 = v29;
    v10 = (unsigned __int8 *)v30;
    if (strnicmpx((unsigned __int8 *)v30, v29, "ctrl-int"))
    {
      if (!strnicmpx(v10, v11, "server-info"))
      {
LABEL_15:
        v23 = 404;
        return HTTPServer_SendStatusResponse(a1, v23, v16, v17, v18, v19, v20, v21);
      }
LABEL_7:
      if (gLogCategory_DACPServer <= 60
        && (gLogCategory_DACPServer != -1 || _LogCategory_Initialize((uint64_t)&gLogCategory_DACPServer, 0x3Cu)))
      {
        LogPrintF((uint64_t)&gLogCategory_DACPServer, (uint64_t)"OSStatus __DACPServer_ProcessRequest(HTTPServerConnectionRef)", 0x3Cu, (uint64_t)"### Bad URL: '%.*s'\n", v18, v19, v20, v21, *(_QWORD *)(a1 + 8408));
      }
      goto LABEL_15;
    }
    if (HTTPServer_GetNextURLSegment((uint64_t *)a1, (unint64_t *)&v30, &v29, &v31, v12, v13, v14, v15))
    {
      if (strnicmpx((unsigned __int8 *)v30, v29, "1"))
        goto LABEL_7;
      v31 = HTTPGetHeaderField((char *)(a1 + 160), *(_QWORD *)(a1 + 8352), "Active-Remote", 0, 0, (const char **)&v30, &v29, 0);
      if (v31)
      {
        if (gLogCategory_DACPServer > 60
          || gLogCategory_DACPServer == -1 && !_LogCategory_Initialize((uint64_t)&gLogCategory_DACPServer, 0x3Cu))
        {
          goto LABEL_40;
        }
        v22 = "### No Active-Remote in headers\n";
      }
      else
      {
        if (SNScanF(v30, v29, "%u", v17, v18, v19, v20, v21, (int)&v28) == 1)
        {
          pthread_mutex_lock(*(pthread_mutex_t **)(v9 + 312));
          v25 = *(_QWORD *)(v9 + 328);
          if (v25)
          {
            v26 = 0;
            while (*(_DWORD *)(*(_QWORD *)(v9 + 320) + 4 * v26) != v28)
            {
              if (v25 == ++v26)
              {
                v26 = *(_QWORD *)(v9 + 328);
                break;
              }
            }
          }
          else
          {
            v26 = 0;
          }
          pthread_mutex_unlock(*(pthread_mutex_t **)(v9 + 312));
          if (v26 >= *(_QWORD *)(v9 + 328))
          {
            if (gLogCategory_DACPServer <= 50
              && (gLogCategory_DACPServer != -1 || _LogCategory_Initialize((uint64_t)&gLogCategory_DACPServer, 0x32u)))
            {
              LogPrintF((uint64_t)&gLogCategory_DACPServer, (uint64_t)"OSStatus __DACPServer_ProcessRequest(HTTPServerConnectionRef)", 0x32u, (uint64_t)"### Remote ID %u not authorized\n", v18, v19, v20, v21, v28);
            }
            v23 = 403;
          }
          else
          {
            if (!HTTPServer_GetNextURLSegment((uint64_t *)a1, (unint64_t *)&v30, &v29, &v31, v18, v19, v20, v21))return v31;
            v29 = *(_QWORD *)(a1 + 8400) - (_QWORD)v30 + *(_QWORD *)(a1 + 8408);
            if ((*(unsigned int (**)(uint64_t))(v9 + 224))(v9))
              v23 = 400;
            else
              v23 = 200;
          }
          return HTTPServer_SendStatusResponse(a1, v23, v16, v17, v18, v19, v20, v21);
        }
        if (gLogCategory_DACPServer > 60
          || gLogCategory_DACPServer == -1 && !_LogCategory_Initialize((uint64_t)&gLogCategory_DACPServer, 0x3Cu))
        {
          goto LABEL_40;
        }
        v27 = v29;
        v22 = "### Bad Active-Remote '%.*s\n";
      }
      LogPrintF((uint64_t)&gLogCategory_DACPServer, (uint64_t)"OSStatus __DACPServer_ProcessRequest(HTTPServerConnectionRef)", 0x3Cu, (uint64_t)v22, v18, v19, v20, v21, v27);
LABEL_40:
      v23 = 400;
      return HTTPServer_SendStatusResponse(a1, v23, v16, v17, v18, v19, v20, v21);
    }
  }
  return v31;
}

uint64_t DACPServer_GetRemoteCount(uint64_t a1)
{
  return *(_QWORD *)(a1 + 328);
}

uint64_t DACPServer_AddRemote(uint64_t a1, int a2, unsigned int *a3)
{
  void *v6;
  uint64_t *v7;
  uint64_t v8;
  int *v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t appended;
  unsigned int bytes;

  pthread_mutex_lock(*(pthread_mutex_t **)(a1 + 312));
  if (a2)
  {
    v6 = *(void **)(a1 + 320);
    if (v6)
    {
      free(v6);
      *(_QWORD *)(a1 + 320) = 0;
    }
    *(_QWORD *)(a1 + 328) = 0;
  }
  bytes = 0;
  v7 = (uint64_t *)(a1 + 328);
  while (1)
  {
    RandomBytes(&bytes, 4uLL);
    v8 = *v7;
    if (!*v7)
      break;
    v9 = *(int **)(a1 + 320);
    while (1)
    {
      v10 = *v9++;
      if (v10 == bytes)
        break;
      if (!--v8)
        goto LABEL_10;
    }
  }
LABEL_10:
  appended = SimpleArrayAppendItem((void **)(a1 + 320), (uint64_t *)(a1 + 328), 4uLL, &bytes);
  if (!(_DWORD)appended)
  {
    if (gLogCategory_DACPServer <= 40
      && (gLogCategory_DACPServer != -1 || _LogCategory_Initialize((uint64_t)&gLogCategory_DACPServer, 0x28u)))
    {
      LogPrintF((uint64_t)&gLogCategory_DACPServer, (uint64_t)"OSStatus DACPServer_AddRemote(DACPServerRef, Boolean, uint32_t *)", 0x28u, (uint64_t)"Added remote %u\n", v11, v12, v13, v14, bytes);
    }
    appended = 0;
    *a3 = bytes;
  }
  pthread_mutex_unlock(*(pthread_mutex_t **)(a1 + 312));
  return appended;
}

uint64_t DACPServer_RemoveRemote(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;

  pthread_mutex_lock(*(pthread_mutex_t **)(a1 + 312));
  v8 = *(_QWORD *)(a1 + 328);
  if (v8)
  {
    v9 = 0;
    v10 = *(_QWORD *)(a1 + 320);
    while (*(_DWORD *)(v10 + 4 * v9) != (_DWORD)a2)
    {
      if (v8 == ++v9)
        goto LABEL_5;
    }
    if (v8 > v9)
    {
      v12 = v8 - 1;
      if (v8 - 1 > v9)
        memcpy((void *)(v10 + 4 * v9), (const void *)(v10 + 4 * v9 + 4), 4 * v8 - (4 * v9 + 4));
      *(_QWORD *)(a1 + 328) = v12;
    }
    if (gLogCategory_DACPServer <= 40
      && (gLogCategory_DACPServer != -1 || _LogCategory_Initialize((uint64_t)&gLogCategory_DACPServer, 0x28u)))
    {
      LogPrintF((uint64_t)&gLogCategory_DACPServer, (uint64_t)"OSStatus DACPServer_RemoveRemote(DACPServerRef, uint32_t)", 0x28u, (uint64_t)"Removed remote %u\n", v4, v5, v6, v7, a2);
    }
    v11 = 0;
  }
  else
  {
LABEL_5:
    v11 = 4294960569;
  }
  pthread_mutex_unlock(*(pthread_mutex_t **)(a1 + 312));
  return v11;
}

uint64_t DataBuffer_Commit(uint64_t a1, _QWORD *a2, _QWORD *a3)
{
  uint64_t result;

  result = *(unsigned int *)(a1 + 52);
  if (!(_DWORD)result)
  {
    *(_DWORD *)(a1 + 52) = -6721;
    if (a2)
      *a2 = *(_QWORD *)(a1 + 24);
    if (a3)
      *a3 = *(_QWORD *)(a1 + 32);
  }
  return result;
}

uint64_t DataBuffer_AppendANSIFile(uint64_t a1, FILE *a2)
{
  void *v4;
  void *v5;
  size_t v6;
  uint64_t v7;
  uint64_t v8;

  v4 = malloc_type_malloc(0x8000uLL, 0xFF2AD84AuLL);
  if (!v4)
    return 4294960568;
  v5 = v4;
  while (1)
  {
    v6 = fread(v5, 1uLL, 0x8000uLL, a2);
    if (!v6)
      break;
    v7 = DataBuffer_Append(a1, (char *)v5, v6);
    if ((_DWORD)v7)
    {
      v8 = v7;
      goto LABEL_7;
    }
  }
  v8 = 0;
LABEL_7:
  free(v5);
  return v8;
}

uint64_t DataBuffer_AppendFile(uint64_t a1, char *__filename)
{
  FILE *v3;
  uint64_t v4;
  FILE *v5;
  uint64_t appended;

  v3 = fopen(__filename, "rb");
  if (v3)
  {
    v4 = a1;
    v5 = v3;
LABEL_6:
    appended = DataBuffer_AppendANSIFile(v4, v5);
    fclose(v3);
    return appended;
  }
  if (!*__error())
    return 4294960596;
  appended = *__error();
  if (!(_DWORD)appended)
  {
    v4 = a1;
    v5 = 0;
    goto LABEL_6;
  }
  return appended;
}

uint64_t DataBuffer_RunProcessAndAppendOutput(uint64_t a1, char *a2)
{
  FILE *v3;
  FILE *v4;
  uint64_t appended;
  uint64_t result;

  v3 = popen(a2, "r");
  if (v3)
  {
    v4 = v3;
    appended = DataBuffer_AppendANSIFile(a1, v3);
    pclose(v4);
    return appended;
  }
  else if (*__error())
  {
    result = *__error();
    if (!(_DWORD)result)
      return DataBuffer_AppendANSIFile(a1, 0);
  }
  else
  {
    return 4294960596;
  }
  return result;
}

uint64_t IPCAgent_Create(_QWORD *a1)
{
  char *v2;
  _BYTE *v3;
  NSObject *v4;
  uint64_t result;

  v2 = (char *)malloc_type_calloc(1uLL, 0x70uLL, 0x10A0040688857C7uLL);
  if (v2)
  {
    v3 = v2;
    *((_DWORD *)v2 + 8) = -1;
    RandomBytes(v2 + 16, 0x10uLL);
    v3[22] = v3[22] & 0xF | 0x40;
    v3[24] = v3[24] & 0x3F | 0x80;
    v4 = dispatch_queue_create("IPCAgent", 0);
    *(_QWORD *)v3 = v4;
    if (v4)
    {
      dispatch_set_context(v4, v3);
      dispatch_set_finalizer_f(*(dispatch_object_t *)v3, (dispatch_function_t)_IPCAgent_Finalize);
      result = 0;
      *a1 = v3;
      return result;
    }
    _IPCAgent_Finalize(v3);
  }
  return 4294960568;
}

void _IPCAgent_Finalize(_QWORD *a1)
{
  NSObject *v2;

  *a1 = 0;
  v2 = a1[1];
  if (v2)
    dispatch_semaphore_signal(v2);
  free(a1);
}

void _IPCAgent_Delete(uint64_t a1)
{
  NSObject *v2;
  int v3;
  _QWORD *v4;

  *(_QWORD *)(a1 + 96) = 0;
  v2 = *(NSObject **)(a1 + 40);
  if (v2)
  {
    dispatch_source_cancel(v2);
    dispatch_release(*(dispatch_object_t *)(a1 + 40));
  }
  else
  {
    v3 = *(_DWORD *)(a1 + 32);
    if ((v3 & 0x80000000) == 0)
    {
      if (close(v3) && *__error())
        __error();
      *(_DWORD *)(a1 + 32) = -1;
    }
  }
  while (1)
  {
    v4 = *(_QWORD **)(a1 + 56);
    if (!v4)
      break;
    *(_QWORD *)(a1 + 56) = *v4;
    _IPCAgent_FreeMessage(v4);
  }
  dispatch_release(*(dispatch_object_t *)a1);
}

void _IPCAgent_FreeMessage(_QWORD *a1)
{
  _QWORD *i;

  for (i = (_QWORD *)a1[2]; i; i = (_QWORD *)a1[2])
  {
    a1[2] = *i;
    free(i);
  }
  free(a1);
}

void IPCAgent_DeleteSync(uint64_t a1)
{
  NSObject *v2;

  v2 = dispatch_semaphore_create(0);
  *(_QWORD *)(a1 + 8) = v2;
  dispatch_async_f(*(dispatch_queue_t *)a1, (void *)a1, (dispatch_function_t)_IPCAgent_Delete);
  if (v2)
  {
    dispatch_semaphore_wait(v2, 0xFFFFFFFFFFFFFFFFLL);
    dispatch_release(v2);
  }
}

void _IPCAgent_Start(uint64_t a1)
{
  int v2;
  int v3;
  ifaddrs *v4;
  const char *ifa_name;
  NSObject *v6;
  NSObject *v7;
  int v8;
  ifaddrs *v9;
  char __dst[20];
  uint64_t v11;

  v11 = *MEMORY[0x1E0C80C00];
  v8 = -1;
  v2 = ServerSocketOpenEx2(2, 2, 17, 0, 0, 3721, 0, -1, 0, &v8);
  v3 = v8;
  if (!v2)
  {
    *(_DWORD *)__dst = 1;
    if (!setsockopt(v8, 0, 20, __dst, 4u) || *__error() && !*__error())
    {
      v9 = 0;
      if (!getifaddrs(&v9))
      {
        if (v9)
        {
          v4 = v9;
          while (1)
          {
            ifa_name = v4->ifa_name;
            if (ifa_name)
            {
              if ((v4->ifa_flags & 8) != 0)
                break;
            }
            v4 = v4->ifa_next;
            if (!v4)
              goto LABEL_16;
          }
          strlcpy(__dst, ifa_name, 0x11uLL);
          *(_DWORD *)(a1 + 48) = if_nametoindex(v4->ifa_name);
          MEMORY[0x18D78E7C0](v9);
          if (!SocketSetMulticastInterface(v3, __dst, *(_DWORD *)(a1 + 48))
            && !SocketSetMulticastLoop(v3))
          {
            *(_QWORD *)(a1 + 68) = 0x490F05E8890E0210;
            *(_QWORD *)(a1 + 76) = 0;
            if (!_SocketJoinOrLeaveMulticast(v3, a1 + 68, __dst, *(_DWORD *)(a1 + 48), 1))
            {
              v6 = dispatch_source_create(MEMORY[0x1E0C80DB8], v3, 0, *(dispatch_queue_t *)a1);
              if (v6)
              {
                v7 = v6;
                dispatch_set_context(v6, (void *)a1);
                dispatch_source_set_event_handler_f(v7, (dispatch_function_t)_IPCAgent_ReadHandler);
                dispatch_source_set_cancel_handler_f(v7, (dispatch_function_t)_IPCAgent_CancelHandler);
                dispatch_resume(v7);
                *(_DWORD *)(a1 + 32) = v3;
                *(_QWORD *)(a1 + 40) = v7;
                return;
              }
            }
          }
        }
        else
        {
LABEL_16:
          MEMORY[0x18D78E7C0]();
        }
      }
    }
  }
  if ((v3 & 0x80000000) == 0 && close(v3))
  {
    if (*__error())
      __error();
  }
}

void _IPCAgent_ReadHandler(uint64_t a1)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t *v4;
  unint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  _DWORD *v8;
  unsigned __int8 *v9;
  _DWORD *v10;
  unint64_t v11;
  int v12;
  int v13;
  NSObject *v14;
  CFIndex v15;
  unsigned int *msg_control;
  int v18;
  unsigned int v19;
  unsigned int v20;
  const __CFData *v22;
  const __CFData *v23;
  CFPropertyListRef v24;
  CFTypeID v25;
  void (*v26)(CFPropertyListRef, _QWORD);
  _QWORD *v27;
  uint64_t *v28;
  unint64_t v29;
  unint64_t v30;
  int v31;
  _QWORD *v32;
  _QWORD *v33;
  const UInt8 **v34;
  unsigned int v35;
  _QWORD *v36;
  int v37;
  CFMutableDataRef Mutable;
  __CFData *v39;
  const UInt8 *i;
  CFPropertyListRef v41;
  CFTypeID v42;
  void (*v43)(CFPropertyListRef, _QWORD);
  _QWORD v44[3];
  int v45;
  msghdr v46;
  char *v47;
  uint64_t v48;
  socklen_t v49;
  int v50;
  char v51;
  uint64_t v52;

  v52 = *MEMORY[0x1E0C80C00];
  v2 = mach_absolute_time();
  if (UpTicksPerSecond_sOnce != -1)
    dispatch_once_f(&UpTicksPerSecond_sOnce, &UpTicksPerSecond_sTicksPerSecond, (dispatch_function_t)_UpTicksPerSecondInit);
  v47 = 0;
  v48 = 0;
  memset(&v46, 0, sizeof(v46));
  memset(v44, 0, sizeof(v44));
  v45 = 0;
  v4 = (uint64_t *)(a1 + 56);
  v3 = *(_QWORD **)(a1 + 56);
  if (v3)
  {
    v5 = 5 * UpTicksPerSecond_sTicksPerSecond;
    v6 = (_QWORD *)(a1 + 56);
    do
    {
      v7 = v6;
      v6 = v3;
      while (v2 - v6[1] > v5)
      {
        --*(_DWORD *)(a1 + 64);
        *v7 = *v6;
        _IPCAgent_FreeMessage(v6);
        v6 = (_QWORD *)*v7;
        if (!*v7)
          goto LABEL_10;
      }
      v3 = (_QWORD *)*v6;
    }
    while (*v6);
  }
LABEL_10:
  v8 = malloc_type_malloc(0x5D0uLL, 0x1020040D6206B1BuLL);
  if (v8)
  {
    v9 = (unsigned __int8 *)v8;
    v10 = v8 + 2;
    v47 = (char *)(v8 + 2);
    v48 = 1472;
    v46.msg_name = v44;
    v46.msg_namelen = 28;
    v46.msg_iov = (iovec *)&v47;
    v46.msg_iovlen = 1;
    v46.msg_control = &v51;
    *(_QWORD *)&v46.msg_controllen = 256;
    while (1)
    {
      v11 = recvmsg(*(_DWORD *)(a1 + 32), &v46, 0);
      if ((v11 & 0x8000000000000000) == 0)
        break;
      if (!*__error())
        goto LABEL_16;
      v12 = *__error();
      if (v12 != 4)
      {
        if (v12)
        {
LABEL_16:
          v13 = *(_DWORD *)(a1 + 32);
          v49 = 4;
          v50 = 0;
          if (getsockopt(v13, 0xFFFF, 4353, &v50, &v49) && *__error())
            __error();
          if (v50)
          {
            v14 = *(NSObject **)(a1 + 40);
            if (v14)
            {
              dispatch_source_cancel(v14);
              dispatch_release(*(dispatch_object_t *)(a1 + 40));
            }
            else
            {
              v18 = *(_DWORD *)(a1 + 32);
              if ((v18 & 0x80000000) == 0)
              {
                if (close(v18))
                {
                  if (*__error())
                    __error();
                }
                *(_DWORD *)(a1 + 32) = -1;
              }
            }
          }
        }
        goto LABEL_53;
      }
    }
    v15 = v11 - 38;
    if (v11 >= 0x26 && v46.msg_controllen >= 0xC)
    {
      msg_control = (unsigned int *)v46.msg_control;
      if (v46.msg_control)
      {
        while (msg_control[1] || msg_control[2] != 20)
        {
          msg_control = (unsigned int *)((char *)msg_control + ((*msg_control + 3) & 0x1FFFFFFFCLL));
          if ((char *)(msg_control + 3) > (char *)v46.msg_control + v46.msg_controllen)
          {
            LODWORD(msg_control) = 0;
            goto LABEL_38;
          }
        }
        LODWORD(msg_control) = *((unsigned __int16 *)msg_control + 7);
      }
LABEL_38:
      if ((_DWORD)msg_control == *(_DWORD *)(a1 + 48) && *v10 == 828600425)
      {
        v19 = v9[44];
        v20 = v9[45];
        if (v19 < v20 && v20 != 255)
        {
          *((_QWORD *)v9 + 185) = v15;
          if (*(_QWORD *)(v9 + 28) != *(_QWORD *)(a1 + 16) || *(_QWORD *)(v9 + 36) != *(_QWORD *)(a1 + 24))
          {
            if (v20 == 1)
            {
              v22 = CFDataCreate(0, v9 + 46, v15);
              if (v22)
              {
                v23 = v22;
                v24 = CFPropertyListCreateWithData(0, v22, 0, 0, 0);
                CFRelease(v23);
                if (v24)
                {
                  v25 = CFGetTypeID(v24);
                  if (v25 == CFDictionaryGetTypeID())
                  {
                    v26 = *(void (**)(CFPropertyListRef, _QWORD))(a1 + 96);
                    if (v26)
                      v26(v24, *(_QWORD *)(a1 + 104));
                  }
                  CFRelease(v24);
                }
              }
              goto LABEL_53;
            }
            while (1)
            {
              v27 = v4;
              v4 = (uint64_t *)*v4;
              if (!v4)
                goto LABEL_64;
              v28 = (uint64_t *)v4[2];
              v29 = bswap64(*(uint64_t *)((char *)v28 + 12));
              v30 = bswap64(*(_QWORD *)(v9 + 12));
              if (v29 == v30)
              {
                v29 = bswap64(*(uint64_t *)((char *)v28 + 20));
                v30 = bswap64(*(_QWORD *)(v9 + 20));
                if (v29 == v30)
                  break;
              }
              if (v29 < v30)
                v31 = -1;
              else
                v31 = 1;
              if ((v31 & 0x80000000) == 0)
                goto LABEL_63;
            }
            v31 = 0;
LABEL_63:
            if (!v31)
            {
              if (v20 != *((unsigned __int8 *)v28 + 45))
                goto LABEL_53;
              v34 = (const UInt8 **)(v4 + 2);
              v35 = *((unsigned __int8 *)v28 + 44);
              if (v35 >= v19)
              {
                v36 = v4 + 2;
LABEL_73:
                if (v35 == v19)
                  goto LABEL_53;
              }
              else
              {
                while (1)
                {
                  v36 = v28;
                  v28 = (uint64_t *)*v28;
                  if (!v28)
                    break;
                  v35 = *((unsigned __int8 *)v28 + 44);
                  if (v35 >= v19)
                    goto LABEL_73;
                }
              }
              *(_QWORD *)v9 = v28;
              *v36 = v9;
              v37 = *((_DWORD *)v4 + 6) + 1;
              *((_DWORD *)v4 + 6) = v37;
              if (v37 == v20)
              {
                --*(_DWORD *)(a1 + 64);
                *v27 = *v4;
                Mutable = CFDataCreateMutable(0, 0);
                if (Mutable)
                {
                  v39 = Mutable;
                  for (i = *v34; i; i = *(const UInt8 **)i)
                    CFDataAppendBytes(v39, i + 46, *((_QWORD *)i + 185));
                  v41 = CFPropertyListCreateWithData(0, v39, 0, 0, 0);
                  CFRelease(v39);
                  if (v41)
                  {
                    v42 = CFGetTypeID(v41);
                    if (v42 == CFDictionaryGetTypeID())
                    {
                      v43 = *(void (**)(CFPropertyListRef, _QWORD))(a1 + 96);
                      if (v43)
                        v43(v41, *(_QWORD *)(a1 + 104));
                    }
                    CFRelease(v41);
                  }
                }
                _IPCAgent_FreeMessage(v4);
              }
              return;
            }
LABEL_64:
            if (*(int *)(a1 + 64) <= 19)
            {
              v32 = malloc_type_malloc(0x20uLL, 0x10200402CFBC8ADuLL);
              if (v32)
              {
                v33 = v32;
                *(_QWORD *)v9 = 0;
                v32[1] = mach_absolute_time();
                v33[2] = v9;
                *((_DWORD *)v33 + 6) = 1;
                *v33 = *v27;
                *v27 = v33;
                ++*(_DWORD *)(a1 + 64);
                return;
              }
            }
          }
        }
      }
    }
LABEL_53:
    free(v9);
  }
}

int *_IPCAgent_CancelHandler(uint64_t a1)
{
  int *result;

  result = (int *)*(unsigned int *)(a1 + 32);
  if ((result & 0x80000000) == 0)
  {
    result = (int *)close((int)result);
    if ((_DWORD)result)
    {
      result = __error();
      if (*result)
        result = __error();
    }
    *(_DWORD *)(a1 + 32) = -1;
  }
  *(_QWORD *)(a1 + 40) = 0;
  return result;
}

uint64_t IPCAgent_SendMessage(dispatch_queue_t *a1, const void *a2)
{
  _QWORD *v4;
  void *v5;

  v4 = malloc_type_malloc(0x10uLL, 0x60040FAFB2B2FuLL);
  if (!v4)
    return 4294960568;
  v5 = v4;
  *v4 = a1;
  v4[1] = a2;
  CFRetain(a2);
  dispatch_async_f(*a1, v5, (dispatch_function_t)_IPCAgent_SendMessage);
  return 0;
}

void _IPCAgent_SendMessage(CFPropertyListRef *a1)
{
  char *v2;
  const __CFData *Data;
  const __CFData *v4;
  const UInt8 *BytePtr;
  unint64_t Length;
  uint64_t v7;
  _OWORD v8[92];
  uint64_t v9;

  v9 = *MEMORY[0x1E0C80C00];
  memset(v8, 0, 512);
  v2 = (char *)*a1;
  Data = CFPropertyListCreateData(0, a1[1], kCFPropertyListBinaryFormat_v1_0, 0, 0);
  if (Data)
  {
    v4 = Data;
    BytePtr = CFDataGetBytePtr(Data);
    Length = CFDataGetLength(v4);
    LODWORD(v8[0]) = 828600425;
    RandomBytes((char *)v8 + 4, 0x10uLL);
    BYTE10(v8[0]) = BYTE10(v8[0]) & 0xF | 0x40;
    BYTE12(v8[0]) = BYTE12(v8[0]) & 0x3F | 0x80;
    *(_OWORD *)((char *)&v8[1] + 4) = *((_OWORD *)v2 + 1);
    BYTE4(v8[2]) = 0;
    BYTE5(v8[2]) = (Length + 1433) / 0x59A;
    do
    {
      if (Length >= 0x59A)
        v7 = 1434;
      else
        v7 = Length;
      __memcpy_chk();
      if (sendto(*((_DWORD *)v2 + 8), v8, v7 + 38, 0, (const sockaddr *)(v2 + 68), 0x10u) != v7 + 38
        && (!*__error() || *__error()))
      {
        break;
      }
      BytePtr += v7;
      Length -= v7;
      ++BYTE4(v8[2]);
    }
    while (BYTE5(v8[2]) > BYTE4(v8[2]));
    CFRelease(v4);
  }
  CFRelease(a1[1]);
  free(a1);
}

intptr_t _IPCAgent_PerformHandler(const void *a1, uint64_t a2)
{
  CFIndex Count;
  intptr_t result;

  dispatch_semaphore_wait(*(dispatch_semaphore_t *)(a2 + 8), 0xFFFFFFFFFFFFFFFFLL);
  Count = CFArrayGetCount(*(CFArrayRef *)(a2 + 24));
  CFArrayAppendValue(*(CFMutableArrayRef *)(a2 + 24), a1);
  result = dispatch_semaphore_signal(*(dispatch_semaphore_t *)(a2 + 8));
  if (!Count)
    return dispatch_semaphore_signal(*(dispatch_semaphore_t *)(a2 + 16));
  return result;
}

uint64_t DebugIPC_EnsureInitialized(uint64_t (*a1)(_QWORD, _QWORD, _QWORD), uint64_t a2)
{
  uint64_t result;
  uint64_t v3;

  gDebugIPCHandlerFunc = a1;
  gDebugIPCHandlerContext = a2;
  if (gDebugIPCAgent)
    return 0;
  result = IPCAgent_Create(&gDebugIPCAgent);
  if (!(_DWORD)result)
  {
    v3 = gDebugIPCAgent;
    *(_QWORD *)(gDebugIPCAgent + 96) = _DebugIPC_MessageHandler;
    *(_QWORD *)(v3 + 104) = v3;
    dispatch_async_f(*(dispatch_queue_t *)v3, (void *)v3, (dispatch_function_t)_IPCAgent_Start);
    return 0;
  }
  return result;
}

void _DebugIPC_MessageHandler(CFDictionaryRef theDict, dispatch_queue_t *a2)
{
  int v4;
  const __CFString *Value;
  const __CFString *v6;
  CFTypeID v7;
  const __CFString *v8;
  const __CFString *v9;
  CFTypeID v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  int Formatted;
  void *v17;
  CFMutableDictionaryRef theDicta;
  CFTypeRef cf;

  v17 = 0;
  theDicta = 0;
  cf = 0;
  if (!gDebugIPCHandlerFunc)
    goto LABEL_4;
  v4 = gDebugIPCHandlerFunc(theDict, &cf, gDebugIPCHandlerContext);
  if (!v4)
  {
LABEL_7:
    if (!cf)
      return;
    IPCAgent_SendMessage(a2, cf);
    goto LABEL_9;
  }
  if (v4 == -6714)
  {
LABEL_4:
    Value = (const __CFString *)CFDictionaryGetValue(theDict, CFSTR("command"));
    if (Value)
    {
      v6 = Value;
      v7 = CFGetTypeID(Value);
      if (v7 == CFStringGetTypeID())
      {
        if (CFStringCompare(v6, CFSTR("logging"), 0))
          goto LABEL_7;
        v8 = (const __CFString *)CFDictionaryGetValue(theDict, CFSTR("value"));
        if (!v8 || (v9 = v8, v10 = CFGetTypeID(v8), v10 == CFStringGetTypeID()) && !LogControlCF(v9))
        {
          v17 = 0;
          if (!LogShow(&v17))
          {
            Formatted = CFPropertyListCreateFormatted(0, (CFTypeRef *)&theDicta, (uint64_t)"{%kO=%s}", v11, v12, v13, v14, v15, (uint64_t)CFSTR("value"));
            free(v17);
            if (!Formatted)
            {
              cf = theDicta;
              if (!theDicta)
                return;
              CFDictionarySetValue(theDicta, CFSTR("responseType"), v6);
              goto LABEL_7;
            }
          }
        }
      }
    }
  }
LABEL_9:
  if (cf)
    CFRelease(cf);
}

void DebugIPC_EnsureFinalized()
{
  if (gDebugIPCAgent)
  {
    IPCAgent_DeleteSync(gDebugIPCAgent);
    gDebugIPCAgent = 0;
  }
}

uint64_t DebugIPC_LogControl(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  return DebugIPC_PerformF(_DebugIPC_ShowHandler, 0, (uint64_t)"{%kO=%O%kO=%s}", a4, a5, a6, a7, a8, (uint64_t)CFSTR("command"));
}

uint64_t _DebugIPC_ShowHandler(const __CFDictionary *a1)
{
  uint64_t (*v1)(unsigned __int8 *, int64_t, _QWORD);
  const void *Value;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v1 = (uint64_t (*)(unsigned __int8 *, int64_t, _QWORD))*MEMORY[0x1E0C80C20];
  Value = CFDictionaryGetValue(a1, CFSTR("value"));
  return FPrintF(v1, "%@\n", v3, v4, v5, v6, v7, v8, (uint64_t)Value);
}

uint64_t DebugIPC_PerformF(uint64_t (*a1)(const __CFDictionary *a1), uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v11;
  uint64_t (*v12)(const __CFDictionary *);
  CFTypeRef v13;
  dispatch_queue_t *v14;
  const void *ValueAtIndex;
  NSObject *v16;
  dispatch_time_t v17;
  CFTypeRef cf;
  void *context[2];
  CFArrayRef theArray[2];

  cf = 0;
  v11 = CFPropertyListBuildFormatted(0, 0, &cf, a3, (uint64_t)&a9, a6, a7, a8);
  if (!(_DWORD)v11)
  {
    if (a1)
      v12 = a1;
    else
      v12 = _DebugIPC_ShowHandler;
    v13 = cf;
    *(_OWORD *)context = 0u;
    *(_OWORD *)theArray = 0u;
    context[1] = dispatch_semaphore_create(1);
    if (context[1] && (theArray[0] = (CFArrayRef)dispatch_semaphore_create(0)) != 0)
    {
      theArray[1] = CFArrayCreateMutable(0, 0, MEMORY[0x1E0C9B378]);
      if (theArray[1])
      {
        v11 = IPCAgent_Create(context);
        if (!(_DWORD)v11)
        {
          v14 = (dispatch_queue_t *)context[0];
          *((_QWORD *)context[0] + 12) = _IPCAgent_PerformHandler;
          v14[13] = (dispatch_queue_t)context;
          dispatch_async_f(*v14, v14, (dispatch_function_t)_IPCAgent_Start);
          v11 = IPCAgent_SendMessage((dispatch_queue_t *)context[0], v13);
          if (!(_DWORD)v11)
          {
            while (1)
            {
              v16 = theArray[0];
              v17 = dispatch_time(0, 300000000);
              if (dispatch_semaphore_wait(v16, v17))
                break;
              while (1)
              {
                dispatch_semaphore_wait((dispatch_semaphore_t)context[1], 0xFFFFFFFFFFFFFFFFLL);
                if (!CFArrayGetCount(theArray[1]))
                  break;
                ValueAtIndex = CFArrayGetValueAtIndex(theArray[1], 0);
                CFRetain(ValueAtIndex);
                CFArrayRemoveValueAtIndex(theArray[1], 0);
                dispatch_semaphore_signal((dispatch_semaphore_t)context[1]);
                ((void (*)(const void *, uint64_t))v12)(ValueAtIndex, a2);
                CFRelease(ValueAtIndex);
              }
              dispatch_semaphore_signal((dispatch_semaphore_t)context[1]);
            }
            v11 = 0;
          }
        }
      }
      else
      {
        v11 = 4294960568;
      }
    }
    else
    {
      v11 = 4294960596;
    }
    if (context[0])
      IPCAgent_DeleteSync((uint64_t)context[0]);
    if (context[1])
      dispatch_release((dispatch_object_t)context[1]);
    if (theArray[0])
      dispatch_release((dispatch_object_t)theArray[0]);
    if (theArray[1])
      CFRelease(theArray[1]);
    CFRelease(cf);
  }
  return v11;
}

uint64_t DebugPrintAssert(uint64_t result, int a2, uint64_t a3, const char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  char v10;
  const char *i;
  int v12;

  if (gLogCategory_DebugServicesAssert > 70)
    return result;
  v10 = result;
  if (gLogCategory_DebugServicesAssert == -1)
  {
    result = _LogCategory_Initialize((uint64_t)&gLogCategory_DebugServicesAssert, 0x46u);
    if (!(_DWORD)result)
      return result;
  }
  if (a4)
  {
    for (i = a4 + 1; ; ++i)
    {
      v12 = *((unsigned __int8 *)i - 1);
      if (v12 == 47 || v12 == 92)
      {
        a4 = i;
      }
      else if (!*(i - 1))
      {
        break;
      }
    }
  }
  if (!a4)
    a4 = "";
  if (a2)
  {
    if (gLogCategory_DebugServicesLogging <= 70)
    {
      if (gLogCategory_DebugServicesLogging != -1
        || (result = _LogCategory_Initialize((uint64_t)&gLogCategory_DebugServicesLogging, 0x46u), (_DWORD)result))
      {
        result = LogPrintF((uint64_t)&gLogCategory_DebugServicesLogging, (uint64_t)"void DebugPrintAssert(DebugAssertFlags, OSStatus, const char *, const char *, long, const char *, const char *, ...)", 0x46u, (uint64_t)"### [ASSERT] %s:%ld \"%###s\", %#m %V\n%s", a5, a6, a7, a8, (uint64_t)a4);
      }
    }
  }
  else if (gLogCategory_DebugServicesLogging <= 70)
  {
    if (gLogCategory_DebugServicesLogging != -1
      || (result = _LogCategory_Initialize((uint64_t)&gLogCategory_DebugServicesLogging, 0x46u), (_DWORD)result))
    {
      result = LogPrintF((uint64_t)&gLogCategory_DebugServicesLogging, (uint64_t)"void DebugPrintAssert(DebugAssertFlags, OSStatus, const char *, const char *, long, const char *, const char *, ...)", 0x46u, (uint64_t)"### [ASSERT] %s:%ld \"%###s\", \"%s\" %V\n%s", a5, a6, a7, a8, (uint64_t)a4);
    }
  }
  if ((v10 & 1) != 0)
  {
    if (!DebugIsDebuggerPresent())
    {
      while (1)
        ;
    }
LABEL_33:
    __debugbreak();
    JUMPOUT(0x18D4C41F0);
  }
  if (gLogCategory_DebugServicesBreak <= 70)
  {
    if (gLogCategory_DebugServicesBreak != -1
      || (result = _LogCategory_Initialize((uint64_t)&gLogCategory_DebugServicesBreak, 0x46u), (_DWORD)result))
    {
      result = DebugIsDebuggerPresent();
      if ((_DWORD)result)
      {
        result = (uint64_t)getenv("USERBREAK");
        if (result)
        {
          if (*(_BYTE *)result == 49)
            goto LABEL_33;
        }
      }
    }
  }
  return result;
}

uint64_t DebugIsDebuggerPresent()
{
  size_t v1;
  _OWORD v2[2];
  __int128 v3;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  int v33[2];
  int v34;
  pid_t v35;
  uint64_t v36;

  v36 = *MEMORY[0x1E0C80C00];
  v31 = 0u;
  v32 = 0u;
  v29 = 0u;
  v30 = 0u;
  v27 = 0u;
  v28 = 0u;
  v25 = 0u;
  v26 = 0u;
  v23 = 0u;
  v24 = 0u;
  v21 = 0u;
  v22 = 0u;
  v19 = 0u;
  v20 = 0u;
  v17 = 0u;
  v18 = 0u;
  v15 = 0u;
  v16 = 0u;
  v13 = 0u;
  v14 = 0u;
  v11 = 0u;
  v12 = 0u;
  v9 = 0u;
  v10 = 0u;
  v7 = 0u;
  v8 = 0u;
  v5 = 0u;
  v6 = 0u;
  v3 = 0u;
  v4 = 0u;
  memset(v2, 0, sizeof(v2));
  *(_QWORD *)v33 = 0xE00000001;
  v34 = 1;
  v35 = getpid();
  v1 = 648;
  LODWORD(v3) = 0;
  sysctl(v33, 4u, v2, &v1, 0, 0);
  return (v3 >> 11) & 1;
}

const char *DebugGetErrorString(int a1, char *a2, uint64_t a3)
{
  return DebugGetErrorStringEx(0, a1, a2, a3);
}

const char *HTTPGetReasonPhrase(int a1)
{
  const char *result;
  int v2;

  if (a1 <= 299)
  {
    switch(a1)
    {
      case 200:
        result = "OK";
        break;
      case 201:
        result = "Created";
        break;
      case 202:
        result = "Accepted";
        break;
      case 203:
        result = "Non-Authoritative Information";
        break;
      case 204:
        result = "No Content";
        break;
      case 205:
        result = "Reset Content";
        break;
      case 206:
        result = "Partial Content";
        break;
      case 207:
        result = "Multi-Status";
        break;
      case 208:
        result = "Already Reported";
        break;
      case 209:
      case 211:
      case 212:
      case 213:
      case 214:
      case 215:
      case 216:
      case 217:
      case 218:
      case 219:
      case 220:
      case 221:
      case 222:
      case 223:
      case 224:
      case 225:
        return "";
      case 210:
        result = "Content Different";
        break;
      case 226:
        result = "IM Used";
        break;
      default:
        v2 = a1 - 100;
        result = "Continue";
        switch(v2)
        {
          case 0:
            return result;
          case 1:
            result = "Switching Protocols";
            break;
          case 2:
            result = "Processing";
            break;
          case 3:
            result = "Checkpoint";
            break;
          default:
            if ("Continue" != 250)
              return "";
            result = "Low on Storage Space";
            break;
        }
        break;
    }
  }
  else if (a1 > 550)
  {
    if (a1 <= 597)
    {
      if (a1 == 551)
        return "Option Not Supported";
      if (a1 == 553)
        return "Proxy Unavailable";
    }
    else
    {
      switch(a1)
      {
        case 598:
          return "Network Read Timeout";
        case 599:
          return "Network Connect Timeout";
        case 999:
          return "Request Denied";
      }
    }
    return "";
  }
  else
  {
    switch(a1)
    {
      case 300:
        result = "Multiple Choices";
        break;
      case 301:
        result = "Moved Permanently";
        break;
      case 302:
        result = "Found";
        break;
      case 303:
        result = "See Other";
        break;
      case 304:
        result = "Not Modified";
        break;
      case 305:
        result = "Use Proxy";
        break;
      case 306:
        result = "Switch Proxy";
        break;
      case 307:
        result = "Temporary Redirect";
        break;
      case 308:
        result = "Permanent Redirect";
        break;
      case 330:
        result = "Moved Location";
        break;
      case 350:
        result = "Going Away";
        break;
      case 351:
        result = "Load Balancing";
        break;
      case 400:
        result = "Bad Request";
        break;
      case 401:
        result = "Unauthorized";
        break;
      case 402:
        result = "Payment Required";
        break;
      case 403:
        result = "Forbidden";
        break;
      case 404:
        result = "Not Found";
        break;
      case 405:
        result = "Method Not Allowed";
        break;
      case 406:
        result = "Not Acceptable";
        break;
      case 407:
        result = "Proxy Authentication Required";
        break;
      case 408:
        result = "Request Timeout";
        break;
      case 409:
        result = "Conflict";
        break;
      case 410:
        result = "Gone";
        break;
      case 411:
        result = "Length Required";
        break;
      case 412:
        result = "Precondition Failed";
        break;
      case 413:
        result = "Request Entity Too Large";
        break;
      case 414:
        result = "Request URI Too Long";
        break;
      case 415:
        result = "Unsupported Media Type";
        break;
      case 416:
        result = "Requested Range Not Satisfiable";
        break;
      case 417:
      case 423:
        result = "Expectation Failed";
        break;
      case 418:
        result = "I'm a teapot";
        break;
      case 419:
        result = "Authentication Timeout";
        break;
      case 420:
        result = "Enhance Your Calm";
        break;
      case 421:
        result = "Not Authoritative";
        break;
      case 422:
        result = "Unprocessable Entity";
        break;
      case 424:
        result = "Failed Dependency";
        break;
      case 425:
        result = "Unordered Collection";
        break;
      case 426:
        result = "Upgrade Required";
        break;
      case 428:
        result = "Precondition Required";
        break;
      case 429:
        result = "Too Many Requests";
        break;
      case 431:
        result = "Request Header Fields Too Large";
        break;
      case 440:
        result = "Login Timeout";
        break;
      case 444:
        result = "No Response";
        break;
      case 449:
        result = "Retry With";
        break;
      case 450:
        result = "Blocked by Parental Controls";
        break;
      case 451:
        result = "Parameter Not Understood";
        break;
      case 452:
        result = "Conference Not Found";
        break;
      case 453:
        result = "Not Enough Bandwidth";
        break;
      case 454:
        result = "Session Not Found";
        break;
      case 455:
        result = "Method Not Valid In This State";
        break;
      case 456:
        result = "Header Field Not Valid";
        break;
      case 457:
        result = "Invalid Range";
        break;
      case 458:
        result = "Parameter Is Read-Only";
        break;
      case 459:
        result = "Aggregate Operation Not Allowed";
        break;
      case 460:
        result = "Only Aggregate Operation Allowed";
        break;
      case 461:
        result = "Unsupported Transport";
        break;
      case 462:
        result = "Destination Unreachable";
        break;
      case 463:
        result = "Destination Prohibited";
        break;
      case 464:
        result = "Data Transport Not Ready Yet";
        break;
      case 465:
        result = "Notification Reason Unknown";
        break;
      case 466:
        result = "Key Management Error";
        break;
      case 470:
        result = "Connection Authorization Required";
        break;
      case 471:
        result = "Connection Credentials not accepted";
        break;
      case 472:
        result = "Failure to establish secure connection";
        break;
      case 475:
        result = "Invalid collblob";
        break;
      case 494:
        result = "Request Header Too Large";
        break;
      case 495:
        result = "Cert Error";
        break;
      case 496:
        result = "No Cert";
        break;
      case 497:
        result = "HTTP to HTTPS";
        break;
      case 498:
        result = "Token expired/invalid";
        break;
      case 499:
        result = "Client Closed Request";
        break;
      case 500:
        result = "Internal Server Error";
        break;
      case 501:
        result = "Not Implemented";
        break;
      case 502:
        result = "Bad Gateway";
        break;
      case 503:
        result = "Service Unavailable";
        break;
      case 504:
        result = "Gateway Timeout";
        break;
      case 505:
        result = "Version Not Supported";
        break;
      case 506:
        result = "Variant Also Negotiates";
        break;
      case 507:
        result = "Insufficient Storage";
        break;
      case 508:
        result = "Loop Detected";
        break;
      case 509:
        result = "Bandwidth Limit Exceeded";
        break;
      case 510:
        result = "Not Extended";
        break;
      case 511:
        result = "Network Authentication Required";
        break;
      case 520:
        result = "Origin Error";
        break;
      case 521:
        result = "Web Server Is Down";
        break;
      case 522:
        result = "Connection timed out";
        break;
      case 523:
        result = "Proxy Declined Request";
        break;
      case 524:
        result = "Timeout occurred";
        break;
      case 525:
        result = "SSL Handshake Failed";
        break;
      case 526:
        result = "Invalid SSL Certificate";
        break;
      default:
        return "";
    }
  }
  return result;
}

BOOL DebugIsCurrentDispatchQueue(void *a1)
{
  void *v2;
  _BOOL8 v3;

  dispatch_get_current_queue();
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  v3 = v2 == a1;

  return v3;
}

void CUFatalErrorF(int *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  CUFatalErrorV(a1, a2, (uint64_t)&a9);
}

void CUFatalErrorV(int *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v3 = a2;
  v9 = 0;
  VASPrintF((void **)&v9, a2, a3);
  if (v9)
    v3 = v9;
  if (*a1 <= 90 && (*a1 != -1 || _LogCategory_Initialize((uint64_t)a1, 0x5Au)))
    LogPrintF((uint64_t)a1, (uint64_t)"void CUFatalErrorV(LogCategory *, const char *, va_list)", 0x5Au, (uint64_t)"### Fatal Error: %s", v5, v6, v7, v8, v3);
  _os_crash();
  __break(1u);
}

void FatalErrorF(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  FatalErrorV(a1, (uint64_t)&a9);
}

void FatalErrorV(uint64_t a1, uint64_t a2)
{
  const char *v2;
  const char *v3;

  v2 = (const char *)a1;
  v3 = 0;
  VASPrintF((void **)&v3, a1, a2);
  if (v3)
    v2 = v3;
  syslog(3, "### Fatal error: %s", v2);
  fprintf((FILE *)*MEMORY[0x1E0C80C10], "### Fatal error: %s\n", v2);
  _os_crash();
  __break(1u);
}

const char *DMAPFindEntryByContentCode(int a1)
{
  const char *result;
  int v3;
  int v4;

  result = "hsac";
  v3 = 1667330920;
  while (v3 != a1)
  {
    v4 = *((_DWORD *)result + 6);
    result += 24;
    v3 = v4;
    if (!v4)
      return 0;
  }
  return result;
}

uint64_t DMAPContentBlock_Init(uint64_t result, uint64_t a2, uint64_t a3)
{
  *(_QWORD *)result = a2;
  *(_QWORD *)(result + 8) = a3;
  *(_QWORD *)(result + 16) = a2;
  *(_QWORD *)(result + 24) = a3;
  *(_QWORD *)(result + 32) = 0;
  *(_BYTE *)(result + 40) = 0;
  *(_QWORD *)(result + 176) = 0;
  return result;
}

void DMAPContentBlock_Free(uint64_t a1)
{
  uint64_t v2;

  if (*(_BYTE *)(a1 + 40))
    free(*(void **)(a1 + 16));
  v2 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)a1;
  *(_QWORD *)(a1 + 24) = v2;
  *(_QWORD *)(a1 + 32) = 0;
  *(_BYTE *)(a1 + 40) = 0;
  *(_QWORD *)(a1 + 176) = 0;
}

uint64_t DMAPContentBlock_Commit(uint64_t a1, _QWORD *a2, _QWORD *a3)
{
  uint64_t result;

  result = *(unsigned int *)(a1 + 180);
  if (!(_DWORD)result)
  {
    if (*(_DWORD *)(a1 + 176))
    {
      return 4294960587;
    }
    else
    {
      result = 0;
      *(_DWORD *)(a1 + 180) = -6721;
      *a2 = *(_QWORD *)(a1 + 16);
      *a3 = *(_QWORD *)(a1 + 32);
    }
  }
  return result;
}

uint64_t DMAPContentBlock_OpenContainer(uint64_t a1, int a2)
{
  uint64_t result;
  uint64_t v4;
  uint64_t v5;
  _BYTE v6[4];
  int v7;
  uint64_t v8;

  v8 = *MEMORY[0x1E0C80C00];
  if (*(_DWORD *)(a1 + 176) > 0xFu)
    return 4294960567;
  v6[0] = HIBYTE(a2);
  v6[1] = BYTE2(a2);
  v6[2] = BYTE1(a2);
  v6[3] = a2;
  v7 = 0;
  result = DMAPContentBlock_AddData(a1, v6, 8uLL);
  if (!(_DWORD)result)
  {
    v4 = *(_QWORD *)(a1 + 32) - 4;
    v5 = *(unsigned int *)(a1 + 176);
    *(_DWORD *)(a1 + 176) = v5 + 1;
    *(_QWORD *)(a1 + 8 * v5 + 48) = v4;
  }
  return result;
}

uint64_t DMAPContentBlock_AddData(uint64_t a1, void *__src, size_t __n)
{
  uint64_t result;
  uint64_t v7;
  unint64_t v8;
  size_t v9;
  void *v10;
  void *v11;
  size_t v12;

  result = *(unsigned int *)(a1 + 180);
  if ((_DWORD)result)
    return result;
  v7 = *(_QWORD *)(a1 + 32);
  v8 = v7 + __n;
  if (v7 + __n <= *(_QWORD *)(a1 + 24))
    goto LABEL_12;
  if (v8 >= 0x800)
    v9 = 2 * v8;
  else
    v9 = 4096;
  v10 = malloc_type_malloc(v9, 0x4827B7DEuLL);
  if (v10)
  {
    v11 = v10;
    v12 = *(_QWORD *)(a1 + 32);
    if (v12)
      memcpy(v10, *(const void **)(a1 + 16), v12);
    if (*(_BYTE *)(a1 + 40))
      free(*(void **)(a1 + 16));
    *(_QWORD *)(a1 + 16) = v11;
    *(_QWORD *)(a1 + 24) = v9;
    *(_BYTE *)(a1 + 40) = 1;
    v7 = *(_QWORD *)(a1 + 32);
LABEL_12:
    if (__src)
    {
      memcpy((void *)(*(_QWORD *)(a1 + 16) + v7), __src, __n);
      v7 = *(_QWORD *)(a1 + 32);
    }
    result = 0;
    *(_QWORD *)(a1 + 32) = v7 + __n;
    return result;
  }
  result = 4294960568;
  if (!*(_DWORD *)(a1 + 180))
    *(_DWORD *)(a1 + 180) = -6728;
  return result;
}

uint64_t DMAPContentBlock_CloseContainer(uint64_t a1)
{
  int v1;
  unsigned int v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t result;

  v1 = *(_DWORD *)(a1 + 176);
  if (!v1)
    return 4294960576;
  v3 = v1 - 1;
  *(_DWORD *)(a1 + 176) = v3;
  v4 = *(_QWORD *)(a1 + 8 * v3 + 48);
  v5 = *(_QWORD *)(a1 + 32);
  if (v5 < v4 + 4)
    return 4294960534;
  result = 0;
  *(_DWORD *)(*(_QWORD *)(a1 + 16) + v4) = bswap32(v5 - (v4 + 4));
  return result;
}

uint64_t DMAPContentBlock_AddInt8(uint64_t a1, int a2, char a3)
{
  _BYTE __src[4];
  int v5;
  char v6;
  uint64_t v7;

  v7 = *MEMORY[0x1E0C80C00];
  __src[0] = HIBYTE(a2);
  __src[1] = BYTE2(a2);
  __src[2] = BYTE1(a2);
  __src[3] = a2;
  v5 = 0x1000000;
  v6 = a3;
  return DMAPContentBlock_AddData(a1, __src, 9uLL);
}

uint64_t DMAPContentBlock_AddInt32(uint64_t a1, int a2, int a3)
{
  _BYTE __src[4];
  int v5;
  char v6;
  char v7;
  char v8;
  char v9;
  uint64_t v10;

  v10 = *MEMORY[0x1E0C80C00];
  __src[0] = HIBYTE(a2);
  __src[1] = BYTE2(a2);
  __src[2] = BYTE1(a2);
  __src[3] = a2;
  v5 = 0x4000000;
  v6 = HIBYTE(a3);
  v7 = BYTE2(a3);
  v8 = BYTE1(a3);
  v9 = a3;
  return DMAPContentBlock_AddData(a1, __src, 0xCuLL);
}

uint64_t DMAPContentBlock_AddCFObjectByKey(uint64_t a1, unsigned int a2, int a3, CFDictionaryRef theDict, void *key)
{
  uint64_t result;
  uint64_t v9;
  const char *v10;
  int v11;
  int v12;
  char v13;
  uint64_t v14;
  size_t v15;
  __int16 v16;
  int v17;
  unint64_t v18;
  char *v19;
  size_t v20;
  unsigned int v21;
  CFTypeID v22;
  double v23;
  unsigned int v24;
  unsigned int __src;
  unsigned int v26;
  char v27;
  char v28;
  char v29;
  char v30;
  char v31;
  char v32;
  char v33;
  char v34;
  uint64_t v35;

  v35 = *MEMORY[0x1E0C80C00];
  result = (uint64_t)CFDictionaryGetValue(theDict, key);
  if (result)
  {
    v9 = result;
    if (!a3)
    {
      v10 = "hsac";
      v11 = 1667330920;
      while (v11 != a2)
      {
        v12 = *((_DWORD *)v10 + 6);
        v10 += 24;
        v11 = v12;
        if (!v12)
          return 4294960540;
      }
      a3 = *((unsigned __int8 *)v10 + 16);
    }
    v24 = 0;
    switch(a3)
    {
      case 1:
      case 2:
        v13 = CFGetInt64((const __CFString *)result, (int *)&v24);
        result = v24;
        if (!v24)
        {
          LOBYTE(__src) = HIBYTE(a2);
          BYTE1(__src) = BYTE2(a2);
          BYTE2(__src) = BYTE1(a2);
          HIBYTE(__src) = a2;
          v26 = 0x1000000;
          v27 = v13;
          v14 = a1;
          v15 = 9;
          goto LABEL_17;
        }
        break;
      case 3:
      case 4:
        v16 = CFGetInt64((const __CFString *)result, (int *)&v24);
        result = v24;
        if (!v24)
        {
          LOBYTE(__src) = HIBYTE(a2);
          BYTE1(__src) = BYTE2(a2);
          BYTE2(__src) = BYTE1(a2);
          HIBYTE(__src) = a2;
          v26 = 0x2000000;
          v27 = HIBYTE(v16);
          v28 = v16;
          v14 = a1;
          v15 = 10;
          goto LABEL_17;
        }
        break;
      case 5:
      case 6:
        v17 = CFGetInt64((const __CFString *)result, (int *)&v24);
        result = v24;
        if (!v24)
          result = DMAPContentBlock_AddInt32(a1, a2, v17);
        break;
      case 7:
      case 8:
        v18 = CFGetInt64((const __CFString *)result, (int *)&v24);
        result = v24;
        if (!v24)
        {
          LOBYTE(__src) = HIBYTE(a2);
          BYTE1(__src) = BYTE2(a2);
          BYTE2(__src) = BYTE1(a2);
          HIBYTE(__src) = a2;
          v26 = 0x8000000;
          v27 = HIBYTE(v18);
          v28 = BYTE6(v18);
          v29 = BYTE5(v18);
          v30 = BYTE4(v18);
          v31 = BYTE3(v18);
          v32 = BYTE2(v18);
          v33 = BYTE1(v18);
          v34 = v18;
          v14 = a1;
          v15 = 16;
LABEL_17:
          result = DMAPContentBlock_AddData(v14, &__src, v15);
        }
        break;
      case 9:
        v19 = CFCopyCString((const __CFString *)result, (int *)&v24);
        result = v24;
        if (!v24)
        {
          __src = bswap32(a2);
          v20 = strlen(v19);
          v26 = bswap32(v20);
          v21 = DMAPContentBlock_AddData(a1, &__src, 8uLL);
          if (!v21)
            v21 = DMAPContentBlock_AddData(a1, v19, v20);
          v24 = v21;
          free(v19);
          result = v24;
        }
        break;
      case 10:
        v22 = CFGetTypeID((CFTypeRef)result);
        if (v22 != CFDateGetTypeID())
          return 4294960540;
        MEMORY[0x18D78D644](v9);
        result = DMAPContentBlock_AddInt32(a1, a2, (*MEMORY[0x1E0C9ADF8] + v23));
        break;
      default:
        result = 4294960561;
        break;
    }
  }
  return result;
}

uint64_t DMAPContentBlock_GetNextChunk(unsigned int *a1, unint64_t a2, _DWORD *a3, unint64_t *a4, unsigned int **a5, _QWORD *a6)
{
  unint64_t v6;
  unsigned int *v7;
  uint64_t result;

  if ((unint64_t)a1 >= a2)
    return 4294960569;
  if ((uint64_t)(a2 - (_QWORD)a1) < 8)
    return 4294960546;
  v6 = bswap32(a1[1]);
  v7 = a1 + 2;
  if (a2 - (unint64_t)(a1 + 2) < v6)
    return 4294960546;
  *a3 = bswap32(*a1);
  *a4 = v6;
  *a5 = v7;
  result = 0;
  if (a6)
    *a6 = (char *)v7 + v6;
  return result;
}

uint64_t GetFairPlayHWInfo(_DWORD *a1)
{
  return GetFairPlayHWInfoEx(a1, 0, 0);
}

uint64_t GetFairPlayHWInfoEx(_DWORD *a1, char *a2, size_t a3)
{
  const __CFString *v6;
  const __CFString *v7;
  CFTypeID v8;
  unint64_t v9;
  char *v10;
  int v11;
  uint64_t v12;
  char buffer[64];
  uint64_t v15;

  v15 = *MEMORY[0x1E0C80C00];
  v6 = (const __CFString *)MGCopyAnswer();
  if (!v6)
    return 4294960569;
  v7 = v6;
  v8 = CFGetTypeID(v6);
  if (v8 == CFStringGetTypeID())
  {
    if (CFStringGetCString(v7, buffer, 64, 0x600u))
    {
      LODWORD(v9) = (_DWORD)a1 + 4;
      if (buffer[0])
      {
        v10 = buffer;
        v9 = (unint64_t)(a1 + 1);
        while (v10[1])
        {
          if (v9 >= (unint64_t)(a1 + 6))
          {
            v12 = 4294960553;
            goto LABEL_13;
          }
          if (sscanf(v10, "%2hhx", v9) != 1)
          {
            v12 = 4294960554;
            goto LABEL_13;
          }
          ++v9;
          v11 = v10[2];
          v10 += 2;
          if (!v11)
            break;
        }
      }
      *a1 = v9 - ((_DWORD)a1 + 4);
      if (a2)
        strlcpy(a2, buffer, a3);
      v12 = 0;
    }
    else
    {
      v12 = 4294960596;
    }
  }
  else
  {
    v12 = 4294960540;
  }
LABEL_13:
  CFRelease(v7);
  return v12;
}

void sub_18D4C5398(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_18D4C5498(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_18D4C56F4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_18D4C57B0(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_18D4C586C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_18D4C595C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_18D4C5A1C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_18D4C5D54(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_18D4C5E28(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_18D4C60F4(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_18D4C61E4(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_18D4C6310(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

id CUAddSuffixForCurrentDeviceClass(void *a1)
{
  id v1;
  void *v2;

  v1 = a1;
  if (GestaltGetDeviceClass_sOnce != -1)
    dispatch_once(&GestaltGetDeviceClass_sOnce, &__block_literal_global_13066);
  CUAddSuffixForDeviceClass(v1, GestaltGetDeviceClass_deviceClass);
  v2 = (void *)objc_claimAutoreleasedReturnValue();

  return v2;
}

void sub_18D4C6388(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

id CUAddSuffixForDeviceClass(void *a1, int a2)
{
  id v3;
  void *v4;
  const __CFString *v5;
  void *v6;

  v3 = a1;
  v4 = v3;
  v5 = CFSTR("_APPLETV");
  switch(a2)
  {
    case 1:
    case 5:
      goto LABEL_5;
    case 2:
      v5 = CFSTR("_IPOD");
      break;
    case 3:
      v5 = CFSTR("_IPAD");
      break;
    case 4:
      break;
    case 6:
      v5 = CFSTR("_WATCH");
      break;
    case 7:
      v5 = CFSTR("_HOMEPOD");
      break;
    default:
      if (a2 == 100)
        v5 = CFSTR("_MAC");
      else
LABEL_5:
        v5 = CFSTR("_IPHONE");
      break;
  }
  objc_msgSend(v3, "stringByAppendingString:", v5);
  v6 = (void *)objc_claimAutoreleasedReturnValue();

  return v6;
}

void sub_18D4C644C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

CoreUtilsNSSubrangeData *CFDataCreateSubdataWithRangeNoCopy(uint64_t a1, uint64_t a2, uint64_t a3, int *a4)
{
  CoreUtilsNSSubrangeData *v5;
  CoreUtilsNSSubrangeData *v6;
  CoreUtilsNSSubrangeData *v7;
  int v8;

  v5 = -[CoreUtilsNSSubrangeData initWithData:range:]([CoreUtilsNSSubrangeData alloc], "initWithData:range:", a1, a2, a3);
  v6 = v5;
  if (!v5)
  {
    v8 = -6728;
    if (!a4)
      goto LABEL_4;
    goto LABEL_3;
  }
  v7 = v5;
  v8 = 0;
  if (a4)
LABEL_3:
    *a4 = v8;
LABEL_4:

  return v6;
}

void CUEncodeNSErrorDictionary(void *a1, void *a2, void *a3, void *a4, void *a5, void *a6)
{
  id v11;
  id v12;
  id v13;
  uint64_t v14;
  const void *v15;
  int i;
  void *v17;
  uint64_t v18;
  uint64_t v19;
  void *v20;
  void *v21;
  void *v22;
  const __CFDictionary *v23;
  CFTypeID TypeID;
  void *v25;
  CFTypeID v26;
  uint64_t v27;
  id v28;
  id v29;
  id v30;
  id v31;

  v11 = a1;
  v31 = a2;
  v12 = a3;
  v29 = a4;
  v30 = a5;
  v13 = a6;
  if (v11)
  {
    v14 = *MEMORY[0x1E0CB2F90];
    v15 = (const void *)*MEMORY[0x1E0CB3388];
    for (i = 3; ; --i)
    {
      v17 = (void *)MEMORY[0x1E0CB37E8];
      v18 = objc_msgSend(v11, "code");
      if (v18)
        v19 = v18;
      else
        v19 = -6700;
      objc_msgSend(v17, "numberWithInteger:", v19);
      v20 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v31, "setObject:forKeyedSubscript:", v20, v12);

      objc_msgSend(v11, "domain");
      v21 = (void *)objc_claimAutoreleasedReturnValue();
      v22 = v21;
      if (v21 && (objc_msgSend(v21, "isEqual:", v14) & 1) == 0)
        objc_msgSend(v31, "setObject:forKeyedSubscript:", v22, v29);
      objc_msgSend(v11, "userInfo");
      v23 = (const __CFDictionary *)objc_claimAutoreleasedReturnValue();
      TypeID = CFStringGetTypeID();
      CFDictionaryGetTypedValue(v23, CFSTR("cuErrorMsg"), TypeID, 0);
      v25 = (void *)objc_claimAutoreleasedReturnValue();
      if (objc_msgSend(v25, "length"))
        objc_msgSend(v31, "setObject:forKeyedSubscript:", v25, v30);
      if (!i)
        break;
      v26 = CFErrorGetTypeID();
      CFDictionaryGetTypedValue(v23, v15, v26, 0);
      v27 = objc_claimAutoreleasedReturnValue();

      if (!v27)
      {
        v11 = 0;
        break;
      }
      v28 = objc_alloc_init(MEMORY[0x1E0C99E08]);
      objc_msgSend(v31, "setObject:forKeyedSubscript:", v28, v13);

      v31 = v28;
      v11 = (id)v27;
    }

  }
}

void sub_18D4C66D4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, void *a11, id a12)
{
  void *v12;
  void *v13;
  void *v14;
  void *v15;

  _Unwind_Resume(a1);
}

id CUDecodeNSErrorDictionary(void *a1, void *a2, void *a3, void *a4, void *a5)
{
  const __CFDictionary *v9;
  id v10;
  id v11;
  void *v12;
  const __CFDictionary *v13;
  CFTypeID TypeID;
  const __CFDictionary *TypedValue;
  const __CFDictionary *v16;
  CFTypeID v17;
  const __CFDictionary *v18;
  const __CFDictionary *v19;
  CFTypeID v20;
  const __CFDictionary *v21;
  uint64_t i;
  const __CFDictionary *v23;
  const __CFDictionary *v24;
  const __CFString *Value;
  int v26;
  CFTypeID v27;
  void *v28;
  CFTypeID v29;
  void *v30;
  id v31;
  void *v32;
  int v33;
  int v34;
  int v35;
  void *v36;
  uint64_t v37;
  uint64_t j;
  const void *v40;
  const __CFDictionary *v41;
  uint64_t v42;
  void *v43;
  void *v44;
  void *v45;
  id v46;
  id v47;
  void *key;
  void *v49;
  void *v50;
  int v51;
  int v52;
  const __CFString *v53;
  void *v54;
  uint64_t v55;
  void *v56;
  _QWORD v57[2];
  _QWORD v58[2];
  const __CFDictionary *v59;
  const __CFDictionary *v60;
  const __CFDictionary *v61;
  id v62[3];

  v62[1] = *(id *)MEMORY[0x1E0C80C00];
  v9 = a1;
  v10 = a2;
  v47 = a3;
  v46 = a4;
  v11 = a5;
  v51 = 0;
  v41 = v9;
  key = v10;
  CFDictionaryGetInt64Ranged(v9, v10, 0xFFFFFFFF80000000, 0x7FFFFFFFLL, &v51);
  if (v51)
  {
    v12 = 0;
  }
  else
  {
    v40 = v11;
    v60 = 0;
    v61 = 0;
    v62[0] = 0;
    v59 = v9;
    v13 = v59;
    if (v59)
    {
      TypeID = CFDictionaryGetTypeID();
      TypedValue = CFDictionaryGetTypedValue(v13, v40, TypeID, 0);
    }
    else
    {
      TypedValue = 0;
    }
    objc_storeStrong((id *)&v60, TypedValue);
    v16 = v60;
    if (v60)
    {
      v17 = CFDictionaryGetTypeID();
      v18 = CFDictionaryGetTypedValue(v16, v40, v17, 0);
    }
    else
    {
      v18 = 0;
    }
    objc_storeStrong((id *)&v61, v18);
    v19 = v61;
    if (v61)
    {
      v20 = CFDictionaryGetTypeID();
      v21 = CFDictionaryGetTypedValue(v19, v40, v20, 0);
    }
    else
    {
      v21 = 0;
    }
    objc_storeStrong(v62, v21);
    v12 = 0;
    v45 = (void *)*MEMORY[0x1E0CB2F90];
    v42 = *MEMORY[0x1E0CB3388];
    for (i = 24; i != -8; i -= 8)
    {
      v23 = *(const __CFDictionary **)((char *)&v59 + i);
      v24 = v23;
      if (v23)
      {
        v50 = v12;
        Value = (const __CFString *)CFDictionaryGetValue(v23, key);
        if (Value)
        {
          v52 = 0;
          v26 = CFGetInt64(Value, &v52);
        }
        else
        {
          v26 = 0;
        }
        v27 = CFStringGetTypeID();
        CFDictionaryGetTypedValue(v24, v47, v27, 0);
        v28 = (void *)objc_claimAutoreleasedReturnValue();
        v29 = CFStringGetTypeID();
        CFDictionaryGetTypedValue(v24, v46, v29, 0);
        v30 = (void *)objc_claimAutoreleasedReturnValue();
        v31 = objc_alloc(MEMORY[0x1E0CB35C8]);
        if (v28)
          v32 = v28;
        else
          v32 = v45;
        if (v12)
        {
          if (objc_msgSend(v30, "length"))
          {
            v57[0] = v42;
            v57[1] = CFSTR("cuErrorMsg");
            v58[0] = v12;
            v58[1] = v30;
            objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", v58, v57, 2);
            v49 = (void *)objc_claimAutoreleasedReturnValue();
            v33 = 0;
            v34 = 0;
            v35 = 1;
            v36 = v49;
          }
          else
          {
            v55 = v42;
            v56 = v12;
            v33 = 1;
            objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", &v56, &v55, 1);
            v35 = 0;
            v34 = 0;
            v43 = (void *)objc_claimAutoreleasedReturnValue();
            v36 = v43;
          }
        }
        else if (objc_msgSend(v30, "length"))
        {
          v53 = CFSTR("cuErrorMsg");
          v54 = v30;
          v34 = 1;
          objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", &v54, &v53, 1);
          v44 = (void *)objc_claimAutoreleasedReturnValue();
          v35 = 0;
          v33 = 0;
          v36 = v44;
        }
        else
        {
          v35 = 0;
          v33 = 0;
          v34 = 0;
          v36 = 0;
        }
        v37 = objc_msgSend(v31, "initWithDomain:code:userInfo:", v32, v26, v36, v40);

        if (v34)
        if (v33)

        if (v35)
        v12 = (void *)v37;
      }

    }
    for (j = 24; j != -8; j -= 8)

    v11 = (id)v40;
  }

  return v12;
}

void sub_18D4C6B4C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15, void *a16, void *a17)
{
  void *v17;

  _Unwind_Resume(a1);
}

id CULocalizedStringEx(void *a1, void *a2, void *a3)
{
  id v5;
  id v6;
  id v7;
  void *v8;
  void *v9;
  void *v10;
  uint64_t v11;
  void *v12;
  id v13;

  v5 = a1;
  v6 = a2;
  v7 = a3;
  if (CUIsGreenTeaDevice_sOnce != -1)
    dispatch_once(&CUIsGreenTeaDevice_sOnce, &__block_literal_global_57);
  if (!CUIsGreenTeaDevice_sResult)
    goto LABEL_6;
  objc_msgSend(v7, "stringByAppendingString:", CFSTR("_GT"));
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v5, "localizedStringForKey:value:table:", v8, CFSTR("_GT"), v6);
  v9 = (void *)objc_claimAutoreleasedReturnValue();

  if (objc_msgSend(v9, "isEqual:", CFSTR("_GT")))
  {

LABEL_6:
    v10 = 0;
    goto LABEL_8;
  }
  v10 = v9;
LABEL_8:
  if (!objc_msgSend(v10, "length"))
  {
    objc_msgSend(v5, "localizedStringForKey:value:table:", v7, &stru_1E25DF9F8, v6);
    v11 = objc_claimAutoreleasedReturnValue();

    v10 = (void *)v11;
  }
  if (v10)
    v12 = v10;
  else
    v12 = v7;
  v13 = v12;

  return v13;
}

void sub_18D4C6D68(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  _Unwind_Resume(a1);
}

id CUNormalizeEmailAddress(void *a1, int a2)
{
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  id v8;

  objc_msgSend(a1, "lowercaseString");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  v4 = v3;
  if (a2
    && ((objc_msgSend(v3, "hasSuffix:", CFSTR("@me.com")) & 1) != 0
     || objc_msgSend(v4, "hasSuffix:", CFSTR("@mac.com"))))
  {
    objc_msgSend(v4, "componentsSeparatedByString:", CFSTR("@"));
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    if (objc_msgSend(v5, "count"))
    {
      v6 = (void *)MEMORY[0x1E0CB3940];
      objc_msgSend(v5, "objectAtIndexedSubscript:", 0);
      v7 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v6, "stringWithFormat:", CFSTR("%@@icloud.com"), v7);
      v8 = (id)objc_claimAutoreleasedReturnValue();

    }
    else
    {
      v8 = v4;
    }

  }
  else
  {
    v8 = v4;
  }

  return v8;
}

void sub_18D4C6E68(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

id CUNormalizePhoneNumber(void *a1)
{
  id v1;
  void *v2;
  void *v3;
  uint64_t v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  id v9;

  v1 = a1;
  v2 = (void *)softLinkCPPhoneNumberCopyActiveCountryCode[0]();
  v3 = (void *)((uint64_t (*)(uint64_t, uint64_t))softLinkPNCopyBestGuessNormalizedNumberForCountry[0])((uint64_t)v1, (uint64_t)v2);
  if (!v3)
    goto LABEL_9;
  v4 = objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", v3);
  v5 = (void *)((uint64_t (*)(uint64_t, uint64_t, uint64_t))softLinkCFPhoneNumberCreate[0])(0, v4, (uint64_t)v2);
  free(v3);
  if (!v5)
    goto LABEL_5;
  v6 = (void *)((uint64_t (*)(uint64_t, uint64_t, uint64_t))softLinkCFPhoneNumberCreateString[0])(0, (uint64_t)v5, 2);
  CFRelease(v5);
  if (v6)
  {
    objc_msgSend(MEMORY[0x1E0CB3500], "characterSetWithCharactersInString:", CFSTR("+"));
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v6, "stringByTrimmingCharactersInSet:", v7);
    v5 = (void *)objc_claimAutoreleasedReturnValue();

  }
  else
  {
LABEL_9:
    v5 = 0;
  }
LABEL_5:
  if (v5)
    v8 = v5;
  else
    v8 = v1;
  v9 = v8;

  return v9;
}

void sub_18D4C6FC8(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  _Unwind_Resume(a1);
}

uint64_t initCFPhoneNumberCreateString(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (CorePhoneNumbersLibrary_sOnce != -1)
    dispatch_once(&CorePhoneNumbersLibrary_sOnce, &__block_literal_global_218);
  softLinkCFPhoneNumberCreateString[0] = (uint64_t (*)())dlsym((void *)CorePhoneNumbersLibrary_sLib, "CFPhoneNumberCreateString");
  return ((uint64_t (*)(uint64_t, uint64_t, uint64_t))softLinkCFPhoneNumberCreateString[0])(a1, a2, a3);
}

uint64_t initCFPhoneNumberCreate(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (CorePhoneNumbersLibrary_sOnce != -1)
    dispatch_once(&CorePhoneNumbersLibrary_sOnce, &__block_literal_global_218);
  softLinkCFPhoneNumberCreate[0] = (uint64_t (*)())dlsym((void *)CorePhoneNumbersLibrary_sLib, "CFPhoneNumberCreate");
  return ((uint64_t (*)(uint64_t, uint64_t, uint64_t))softLinkCFPhoneNumberCreate[0])(a1, a2, a3);
}

uint64_t initPNCopyBestGuessNormalizedNumberForCountry(uint64_t a1, uint64_t a2)
{
  if (CorePhoneNumbersLibrary_sOnce != -1)
    dispatch_once(&CorePhoneNumbersLibrary_sOnce, &__block_literal_global_218);
  softLinkPNCopyBestGuessNormalizedNumberForCountry[0] = (uint64_t (*)())dlsym((void *)CorePhoneNumbersLibrary_sLib, "PNCopyBestGuessNormalizedNumberForCountry");
  return ((uint64_t (*)(uint64_t, uint64_t))softLinkPNCopyBestGuessNormalizedNumberForCountry[0])(a1, a2);
}

uint64_t initCPPhoneNumberCopyActiveCountryCode()
{
  if (AppSupportLibrary_sOnce != -1)
    dispatch_once(&AppSupportLibrary_sOnce, &__block_literal_global_215_10663);
  softLinkCPPhoneNumberCopyActiveCountryCode[0] = (uint64_t (*)())dlsym((void *)AppSupportLibrary_sLib, "CPPhoneNumberCopyActiveCountryCode");
  return softLinkCPPhoneNumberCopyActiveCountryCode[0]();
}

CFMutableStringRef CUStateDumpWithObject(uint64_t a1, void *a2, int *a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  id v11;
  __CFString *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  void *v20;
  CFMutableStringRef v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  __CFString *v35;
  __CFString *v36;
  void *v37;
  void *v38;
  size_t v39;
  __CFString *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v47;
  uint64_t v48;
  CFMutableStringRef v49;
  CFMutableStringRef v50;
  CFMutableStringRef v51;
  CFMutableStringRef v52;
  CFRange v53;

  v11 = a2;
  if (a3 && *a3 <= 50 && (*a3 != -1 || _LogCategory_Initialize((uint64_t)a3, 0x32u)))
    LogPrintF((uint64_t)a3, (uint64_t)"struct os_state_data_s *CUStateDumpWithObject(const char *, __strong id, LogCategory *)", 0x32u, (uint64_t)"State dump: %s\n", v7, v8, v9, v10, a1);
  v52 = 0;
  NSAppendPrintF(&v52, (uint64_t)"\n", v5, v6, v7, v8, v9, v10, v47);
  v12 = v52;
  CUDescriptionWithLevel(v11, 0);
  v13 = objc_claimAutoreleasedReturnValue();
  v20 = (void *)v13;
  if (v13)
  {
    v51 = v12;
    NSAppendPrintF(&v51, (uint64_t)"%@\n", v14, v15, v16, v17, v18, v19, v13);
    v21 = v51;

    if (!v21)
      goto LABEL_21;
  }
  else
  {
    v21 = v12;
    if (!v12)
      goto LABEL_21;
  }
  v28 = -[__CFString length](v21, "length");
  if (v28 >= 0x7C19)
  {
    if (a3 && *a3 <= 90 && (*a3 != -1 || _LogCategory_Initialize((uint64_t)a3, 0x5Au)))
      LogPrintF((uint64_t)a3, (uint64_t)"struct os_state_data_s *CUStateDumpWithObject(const char *, __strong id, LogCategory *)", 0x5Au, (uint64_t)"### Statedump truncate: %s, %zu -> %zu\n", v24, v25, v26, v27, a1);
    v53.length = v28 - 31768;
    v53.location = 31768;
    CFStringDelete(v21, v53);
    v50 = v21;
    NSAppendPrintF(&v50, (uint64_t)"\n...\n", v29, v30, v31, v32, v33, v34, v48);
    v35 = v50;

    v21 = v35;
  }
  v49 = v21;
  NSAppendPrintF(&v49, (uint64_t)"%s State End\n", v22, v23, v24, v25, v26, v27, a1);
  v36 = v49;

  objc_msgSend(MEMORY[0x1E0CB38B0], "dataWithPropertyList:format:options:error:", v36, 100, 0, 0);
  v37 = (void *)objc_claimAutoreleasedReturnValue();
  v38 = v37;
  if (v37)
  {
    v39 = objc_msgSend(v37, "length");
    v40 = (__CFString *)malloc_type_calloc(1uLL, v39 + 200, 0xFC6B3687uLL);
    v21 = v40;
    if (v40)
    {
      LODWORD(v40->isa) = 1;
      HIDWORD(v40->isa) = v39;
      SNPrintF((uint64_t)&v40[4].info, 64, (uint64_t)"%s State", v41, v42, v43, v44, v45, a1);
      memcpy(&v21[6].info, (const void *)objc_msgSend(objc_retainAutorelease(v38), "bytes"), v39);
    }
  }
  else
  {
    v21 = 0;
  }

LABEL_21:
  return v21;
}

void sub_18D4C7488(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

uint64_t CUTXTDataCreateWithDictionary(void *a1, uint64_t a2, _QWORD *a3)
{
  id v4;
  id v5;
  void *v6;
  uint64_t v7;
  _QWORD v9[6];
  uint64_t v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t (*v13)(uint64_t, uint64_t);
  void (*v14)(uint64_t);
  id v15;

  v4 = a1;
  v5 = objc_alloc_init(MEMORY[0x1E0C99DF0]);
  v10 = 0;
  v11 = &v10;
  v12 = 0x3032000000;
  v13 = __Block_byref_object_copy__10677;
  v14 = __Block_byref_object_dispose__10678;
  v15 = 0;
  v9[0] = MEMORY[0x1E0C809B0];
  v9[1] = 3221225472;
  v9[2] = __CUTXTDataCreateWithDictionary_block_invoke;
  v9[3] = &unk_1E25DE9E0;
  v9[4] = v5;
  v9[5] = &v10;
  objc_msgSend(v4, "enumerateKeysAndObjectsUsingBlock:", v9);
  v6 = (void *)v11[5];
  if (a3 && v6)
  {
    *a3 = objc_retainAutorelease(v6);
    v6 = (void *)v11[5];
  }
  if (v6)
    v7 = 0;
  else
    v7 = objc_msgSend(v5, "copy");
  _Block_object_dispose(&v10, 8);

  return v7;
}

void sub_18D4C75DC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, id a20)
{
  void *v20;
  void *v21;

  _Block_object_dispose(&a15, 8);

  _Unwind_Resume(a1);
}

uint64_t __Block_byref_object_copy__10677(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void __Block_byref_object_dispose__10678(uint64_t a1)
{

}

void sub_18D4C78D8(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

uint64_t CUTXTDictionaryCreateWithTXTData(void *a1, uint64_t a2, _QWORD *a3)
{
  id v4;
  _BYTE *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  id v13;
  _BYTE *v14;
  uint64_t v15;
  uint64_t v16;
  _BYTE *v17;
  uint64_t v18;
  int v19;
  BOOL v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  void *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  void *v34;
  uint64_t v35;
  void *v37;
  uint64_t v38;

  v4 = objc_retainAutorelease(a1);
  v5 = (_BYTE *)objc_msgSend(v4, "bytes");
  v6 = objc_msgSend(v4, "length");
  v13 = objc_alloc_init(MEMORY[0x1E0C99E08]);
  if (v6)
  {
    v14 = &v5[v6];
    v15 = MEMORY[0x1E0C9AAB0];
    while (1)
    {
      v17 = v5 + 1;
      v16 = *v5;
      if (v14 - (v5 + 1) < v16)
        break;
      v18 = (uint64_t)&v5[v16 + 1];
      if (*v5)
      {
        ++v5;
        while (1)
        {
          v19 = *v5;
          v20 = v19 != 61;
          if (v19 == 61)
            break;
          ++v5;
          if (!--v16)
          {
            v20 = 1;
            v5 = (_BYTE *)v18;
            break;
          }
        }
      }
      else
      {
        v20 = 1;
        ++v5;
      }
      v27 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0CB3940]), "initWithBytes:length:encoding:", v17, v5 - v17, 4);
      if (!v27)
      {
        if (a3)
        {
          NSErrorWithOSStatusF(4294960554, (uint64_t)"Invalid UTF-8 TXT key", v21, v22, v23, v24, v25, v26, v38);
          v37 = (void *)objc_claimAutoreleasedReturnValue();
          v27 = 0;
          goto LABEL_24;
        }
        v27 = 0;
LABEL_26:

        goto LABEL_27;
      }
      if (v20)
      {
        objc_msgSend(v13, "setObject:forKeyedSubscript:", v15, v27);
      }
      else
      {
        v34 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0CB3940]), "initWithBytes:length:encoding:", v5 + 1, v18 - (_QWORD)(v5 + 1), 4);
        if (!v34)
        {
          if (a3)
          {
            NSErrorWithOSStatusF(4294960554, (uint64_t)"Invalid UTF-8 TXT value", v28, v29, v30, v31, v32, v33, v38);
            v37 = (void *)objc_claimAutoreleasedReturnValue();
LABEL_24:
            *a3 = v37;
          }
          goto LABEL_26;
        }
        objc_msgSend(v13, "setObject:forKeyedSubscript:", v34, v27);

        v5 = (_BYTE *)v18;
      }

      if (v5 == v14)
        goto LABEL_16;
    }
    if (a3)
    {
      NSErrorWithOSStatusF(4294960546, (uint64_t)"TXT item truncated", v7, v8, v9, v10, v11, v12, v38);
      v35 = 0;
      *a3 = (id)objc_claimAutoreleasedReturnValue();
      goto LABEL_17;
    }
LABEL_27:
    v35 = 0;
  }
  else
  {
LABEL_16:
    v35 = objc_msgSend(v13, "copy");
  }
LABEL_17:

  return v35;
}

void sub_18D4C7B04(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

id NSArrayGetNSUUIDAtIndex(void *a1, uint64_t a2, int *a3)
{
  id v5;
  void *v6;
  id v7;
  int v8;
  void *v9;
  CFTypeID v10;
  CFUUIDBytes v12;
  uint64_t v13;

  v13 = *MEMORY[0x1E0C80C00];
  v5 = a1;
  v6 = v5;
  if (v5)
  {
    objc_msgSend(v5, "objectAtIndexedSubscript:", a2);
    v7 = (id)objc_claimAutoreleasedReturnValue();
    if (v7)
    {
      objc_opt_class();
      if ((objc_opt_isKindOfClass() & 1) != 0)
      {
        v7 = v7;
        v8 = 0;
        v9 = v7;
      }
      else
      {
        v10 = CFGetTypeID(v7);
        if (v10 == CFUUIDGetTypeID())
        {
          v12 = CFUUIDGetUUIDBytes((CFUUIDRef)v7);
          v9 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0CB3A28]), "initWithUUIDBytes:", &v12);
          v8 = 0;
        }
        else
        {
          v9 = 0;
          v8 = -6756;
        }
      }
    }
    else
    {
      v9 = 0;
      v8 = -6727;
    }
  }
  else
  {
    v7 = 0;
    v9 = 0;
    v8 = -6705;
  }
  if (a3)
    *a3 = v8;

  return v9;
}

void sub_18D4C7CA8(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

id NSArrayGetValueAtIndexOfClass(void *a1, uint64_t a2, uint64_t a3, int *a4)
{
  id v6;
  void *v7;
  id v8;
  int v9;
  void *v10;

  v6 = a1;
  v7 = v6;
  if (v6)
  {
    objc_msgSend(v6, "objectAtIndexedSubscript:", a2);
    v8 = (id)objc_claimAutoreleasedReturnValue();
    if (v8)
    {
      if ((objc_opt_isKindOfClass() & 1) != 0)
      {
        v8 = v8;
        v9 = 0;
        v10 = v8;
      }
      else
      {
        v10 = 0;
        v9 = -6756;
      }
    }
    else
    {
      v10 = 0;
      v9 = -6727;
    }
  }
  else
  {
    v8 = 0;
    v10 = 0;
    v9 = -6705;
  }
  if (a4)
    *a4 = v9;

  return v10;
}

void sub_18D4C7D90(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

uint64_t NSArrayValidateClasses(void *a1, int a2, void *a3, void *a4)
{
  id v7;
  id v8;
  id v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  id v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  void *v18;
  objc_class *v19;
  void *v20;
  void *v21;
  void *v22;
  int v24;
  id v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  _BYTE v34[128];
  _BYTE v35[128];
  uint64_t v36;

  v36 = *MEMORY[0x1E0C80C00];
  v7 = a1;
  v25 = a3;
  v8 = a4;
  v30 = 0u;
  v31 = 0u;
  v32 = 0u;
  v33 = 0u;
  v9 = v7;
  v10 = objc_msgSend(v9, "countByEnumeratingWithState:objects:count:", &v30, v35, 16);
  if (v10)
  {
    v24 = a2;
    v11 = *(_QWORD *)v31;
    while (1)
    {
      v12 = 0;
LABEL_4:
      if (*(_QWORD *)v31 != v11)
        objc_enumerationMutation(v9);
      v26 = 0u;
      v27 = 0u;
      v28 = 0u;
      v29 = 0u;
      v13 = v8;
      v14 = objc_msgSend(v13, "countByEnumeratingWithState:objects:count:", &v26, v34, 16);
      if (!v14)
        break;
      v15 = *(_QWORD *)v27;
LABEL_8:
      v16 = 0;
      while (1)
      {
        if (*(_QWORD *)v27 != v15)
          objc_enumerationMutation(v13);
        if ((objc_opt_isKindOfClass() & 1) != 0)
          break;
        if (v14 == ++v16)
        {
          v14 = objc_msgSend(v13, "countByEnumeratingWithState:objects:count:", &v26, v34, 16);
          if (v14)
            goto LABEL_8;
          goto LABEL_18;
        }
      }

      if (++v12 != v10)
        goto LABEL_4;
      v10 = objc_msgSend(v9, "countByEnumeratingWithState:objects:count:", &v30, v35, 16);
      v17 = 1;
      if (!v10)
        goto LABEL_22;
    }
LABEL_18:

    if (v24)
    {
      v18 = (void *)MEMORY[0x1E0C99DA0];
      v19 = (objc_class *)objc_opt_class();
      NSStringFromClass(v19);
      v20 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v13, "allObjects");
      v21 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v21, "componentsJoinedByString:", CFSTR(", "));
      v22 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v18, "raise:format:", *MEMORY[0x1E0C99778], CFSTR("'%@' array contained unexpected type %@, allowed types: %@"), v25, v20, v22);

    }
    v17 = 0;
  }
  else
  {
    v17 = 1;
  }
LABEL_22:

  return v17;
}

void sub_18D4C7FFC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  void *v14;
  void *v15;
  void *v16;
  void *v17;
  void *v18;

  _Unwind_Resume(a1);
}

id NSDataCompress(void *a1, char a2, _QWORD *a3)
{
  id v5;
  uint64_t v6;
  uInt v7;
  void *v8;
  id v9;
  int v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uLong total_out;
  id v20;
  uint64_t v21;
  int v22;
  id v23;
  id v24;
  void *v26;
  z_stream v27;

  v5 = a1;
  v6 = objc_msgSend(v5, "length");
  v7 = v6;
  if (v6)
  {
    v8 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0C99DF0]), "initWithLength:", 0x4000);
    memset(&v27.avail_in, 0, 104);
    v27.avail_in = v7;
    v27.avail_out = v7;
    v27.next_in = (Bytef *)objc_msgSend(objc_retainAutorelease(v5), "bytes");
    v9 = objc_retainAutorelease(v8);
    v27.next_out = (Bytef *)objc_msgSend(v9, "mutableBytes");
    if ((a2 & 2) != 0)
      v10 = 9;
    else
      v10 = -1;
    if ((a2 & 1) != 0)
      v11 = 15;
    else
      v11 = 31;
    v12 = deflateInit2_(&v27, v10, 8, v11, 8, 0, "1.2.12", 112);
    if ((_DWORD)v12)
    {
      NSErrorWithOSStatusF(v12, (uint64_t)"deflateInit2 failed", v13, v14, v15, v16, v17, v18, (uint64_t)v27.next_in);
      v26 = (void *)objc_claimAutoreleasedReturnValue();
      v24 = v26;
      v23 = 0;
      if (a3 && v26)
      {
        v24 = objc_retainAutorelease(v26);
        v23 = 0;
        *a3 = v24;
      }
    }
    else
    {
      do
      {
        total_out = v27.total_out;
        if (total_out >= objc_msgSend(v9, "length", v27.next_in, *(_OWORD *)&v27.avail_in, *(_OWORD *)&v27.next_out))
          objc_msgSend(v9, "increaseLengthBy:", 0x4000);
        v20 = objc_retainAutorelease(v9);
        v21 = objc_msgSend(v20, "mutableBytes");
        v27.next_out = (Bytef *)(v21 + v27.total_out);
        v22 = objc_msgSend(v20, "length");
        v27.avail_out = v22 - LODWORD(v27.total_out);
        deflate(&v27, 4);
      }
      while (!v27.avail_out);
      deflateEnd(&v27);
      objc_msgSend(v20, "setLength:", v27.total_out);
      v23 = (id)objc_msgSend(objc_alloc(MEMORY[0x1E0C99D50]), "initWithData:", v20);
      v24 = 0;
      v9 = v20;
    }
  }
  else
  {
    v9 = 0;
    v23 = objc_alloc_init(MEMORY[0x1E0C99D50]);
    v24 = 0;
  }

  return v23;
}

void sub_18D4C8270(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

id NSDataDecompress(void *a1, uint64_t a2, _QWORD *a3)
{
  id v4;
  unint64_t v5;
  uint64_t v6;
  void *v7;
  id v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uLong total_out;
  id v17;
  uint64_t v18;
  int v19;
  const char *v20;
  id v21;
  id v22;
  void *v24;
  z_stream v25;

  v4 = a1;
  v5 = objc_msgSend(v4, "length");
  if (!v5)
  {
    v17 = 0;
    v21 = objc_alloc_init(MEMORY[0x1E0C99D50]);
    v22 = 0;
    goto LABEL_14;
  }
  if (v5 >= 0x8000)
    v6 = 0x4000;
  else
    v6 = v5 >> 1;
  v7 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0C99DF0]), "initWithLength:", v5);
  memset(&v25.avail_in, 0, 104);
  v8 = objc_retainAutorelease(v4);
  v25.next_in = (Bytef *)objc_msgSend(v8, "bytes");
  v25.avail_in = objc_msgSend(v8, "length");
  v9 = inflateInit2_(&v25, 47, "1.2.12", 112);
  if ((_DWORD)v9)
  {
    v20 = "inflateInit2 failed";
  }
  else
  {
    while (1)
    {
      total_out = v25.total_out;
      if (total_out >= objc_msgSend(v7, "length"))
        objc_msgSend(v7, "increaseLengthBy:", v6);
      v17 = objc_retainAutorelease(v7);
      v18 = objc_msgSend(v17, "mutableBytes");
      v25.next_out = (Bytef *)(v18 + v25.total_out);
      v19 = objc_msgSend(v17, "length");
      v25.avail_out = v19 - LODWORD(v25.total_out);
      v9 = inflate(&v25, 2);
      if ((_DWORD)v9 == 1)
        break;
      if ((_DWORD)v9)
      {
        v20 = "inflate failed";
        goto LABEL_17;
      }
    }
    v9 = inflateEnd(&v25);
    if (!(_DWORD)v9)
    {
      objc_msgSend(v17, "setLength:", v25.total_out);
      v21 = (id)objc_msgSend(objc_alloc(MEMORY[0x1E0C99D50]), "initWithData:", v17);
      v22 = 0;
      goto LABEL_14;
    }
    v20 = "inflateEnd failed";
  }
LABEL_17:
  NSErrorWithOSStatusF(v9, (uint64_t)v20, v10, v11, v12, v13, v14, v15, (uint64_t)v25.next_in);
  v24 = (void *)objc_claimAutoreleasedReturnValue();
  v22 = v24;
  v21 = 0;
  if (a3 && v24)
  {
    v22 = objc_retainAutorelease(v24);
    v21 = 0;
    *a3 = v22;
  }
  v17 = v7;
LABEL_14:

  return v21;
}

void sub_18D4C8498(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

id NSDataWithHex(char *a1, int64_t a2, char a3, char **a4, int *a5)
{
  int v6;
  void *v7;
  void *v8;
  int v9;
  unint64_t v11;
  void *v12;

  v11 = 0;
  v12 = 0;
  v6 = HexToDataCopy(a1, a2, a3, &v12, &v11, a4);
  if (v6)
  {
    v9 = v6;
    v7 = v12;
    goto LABEL_8;
  }
  v7 = v12;
  objc_msgSend(MEMORY[0x1E0C99D50], "dataWithBytesNoCopy:length:", v12, v11);
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  if (!v8)
  {
    v9 = -6728;
LABEL_8:
    if (v7)
      free(v7);
    v8 = 0;
    if (a5)
      goto LABEL_4;
    return v8;
  }
  v9 = 0;
  if (a5)
LABEL_4:
    *a5 = v9;
  return v8;
}

void sub_18D4C863C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, id a12)
{
  void *v12;

  _Unwind_Resume(a1);
}

void NSDecodeNSSetOfClassIfPresent(void *a1, void *a2, uint64_t a3, void **a4)
{
  id v6;
  id v7;
  uint64_t v8;
  void *v9;
  char isKindOfClass;
  uint64_t *v11;
  void *v12;
  objc_class *v13;
  void *v14;
  id v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t i;
  uint64_t v20;
  void *v21;
  id v22;
  void *v23;
  void *v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  _BYTE v30[128];
  uint64_t v31;

  v31 = *MEMORY[0x1E0C80C00];
  v6 = a1;
  v7 = a2;
  v25 = v6;
  if ((objc_msgSend(v6, "containsValueForKey:", v7) & 1) != 0)
  {
    objc_msgSend(MEMORY[0x1E0C99E60], "setWithObjects:", objc_opt_class(), a3, 0);
    v8 = objc_claimAutoreleasedReturnValue();
    objc_msgSend(v25, "decodeObjectOfClasses:forKey:", v8, v7);
    v9 = (void *)objc_claimAutoreleasedReturnValue();
    objc_opt_class();
    isKindOfClass = objc_opt_isKindOfClass();
    v23 = (void *)v8;
    v11 = (uint64_t *)MEMORY[0x1E0C99778];
    if ((isKindOfClass & 1) == 0)
    {
      v12 = (void *)MEMORY[0x1E0C99DA0];
      v13 = (objc_class *)objc_opt_class();
      NSStringFromClass(v13);
      v14 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v12, "raise:format:", *v11, CFSTR("bad set type for key %@, %@"), v7, v14);

    }
    v28 = 0u;
    v29 = 0u;
    v26 = 0u;
    v27 = 0u;
    v15 = v9;
    v16 = objc_msgSend(v15, "countByEnumeratingWithState:objects:count:", &v26, v30, 16);
    if (v16)
    {
      v17 = *(_QWORD *)v27;
      v18 = *v11;
      do
      {
        for (i = 0; i != v16; ++i)
        {
          if (*(_QWORD *)v27 != v17)
            objc_enumerationMutation(v15);
          v20 = *(_QWORD *)(*((_QWORD *)&v26 + 1) + 8 * i);
          if ((objc_opt_isKindOfClass() & 1) == 0)
            objc_msgSend(MEMORY[0x1E0C99DA0], "raise:format:", v18, CFSTR("bad set element type for key %@ : %@"), v7, v20);
        }
        v16 = objc_msgSend(v15, "countByEnumeratingWithState:objects:count:", &v26, v30, 16);
      }
      while (v16);
    }

    v21 = *a4;
    *a4 = v15;
    v22 = v15;

  }
}

void sub_18D4C88B4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, void *a14)
{
  void *v14;
  void *v15;
  void *v16;

  _Unwind_Resume(a1);
}

id NSDictionaryGetNSArrayOfClass(void *a1, void *a2, uint64_t a3, int *a4)
{
  id v6;
  id v7;
  void *v8;
  id v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t i;
  id v13;
  int v14;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  _BYTE v20[128];
  uint64_t v21;

  v21 = *MEMORY[0x1E0C80C00];
  v6 = a1;
  v7 = a2;
  objc_msgSend(v6, "objectForKeyedSubscript:", v7);
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  if (!v8)
  {
    v13 = 0;
    v14 = -6727;
    if (!a4)
      goto LABEL_16;
    goto LABEL_15;
  }
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) == 0)
  {
LABEL_14:
    v13 = 0;
    v14 = -6756;
    if (!a4)
      goto LABEL_16;
LABEL_15:
    *a4 = v14;
    goto LABEL_16;
  }
  v18 = 0u;
  v19 = 0u;
  v16 = 0u;
  v17 = 0u;
  v9 = v8;
  v10 = objc_msgSend(v9, "countByEnumeratingWithState:objects:count:", &v16, v20, 16);
  if (v10)
  {
    v11 = *(_QWORD *)v17;
    while (2)
    {
      for (i = 0; i != v10; ++i)
      {
        if (*(_QWORD *)v17 != v11)
          objc_enumerationMutation(v9);
        if ((objc_opt_isKindOfClass() & 1) == 0)
        {

          goto LABEL_14;
        }
      }
      v10 = objc_msgSend(v9, "countByEnumeratingWithState:objects:count:", &v16, v20, 16);
      if (v10)
        continue;
      break;
    }
  }

  v13 = v9;
  v14 = 0;
  if (a4)
    goto LABEL_15;
LABEL_16:

  return v13;
}

void sub_18D4C8AA8(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

id NSDictionaryGetNSUUID(void *a1, void *a2, int *a3)
{
  id v5;
  id v6;
  id v7;
  int v8;
  void *v9;
  CFTypeID v10;
  CFUUIDBytes v12;
  uint64_t v13;

  v13 = *MEMORY[0x1E0C80C00];
  v5 = a1;
  v6 = a2;
  if (v5)
  {
    objc_msgSend(v5, "objectForKeyedSubscript:", v6);
    v7 = (id)objc_claimAutoreleasedReturnValue();
    if (v7)
    {
      objc_opt_class();
      if ((objc_opt_isKindOfClass() & 1) != 0)
      {
        v7 = v7;
        v8 = 0;
        v9 = v7;
      }
      else
      {
        v10 = CFGetTypeID(v7);
        if (v10 == CFUUIDGetTypeID())
        {
          v12 = CFUUIDGetUUIDBytes((CFUUIDRef)v7);
          v9 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0CB3A28]), "initWithUUIDBytes:", &v12);
          v8 = 0;
        }
        else
        {
          v9 = 0;
          v8 = -6756;
        }
      }
    }
    else
    {
      v9 = 0;
      v8 = -6727;
    }
  }
  else
  {
    v7 = 0;
    v9 = 0;
    v8 = -6705;
  }
  if (a3)
    *a3 = v8;

  return v9;
}

void sub_18D4C8C34(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

id NSDictionaryGetValueOfClass(void *a1, void *a2, uint64_t a3, int *a4)
{
  id v6;
  id v7;
  id v8;
  int v9;
  void *v10;

  v6 = a1;
  v7 = a2;
  if (v6)
  {
    objc_msgSend(v6, "objectForKeyedSubscript:", v7);
    v8 = (id)objc_claimAutoreleasedReturnValue();
    if (v8)
    {
      if ((objc_opt_isKindOfClass() & 1) != 0)
      {
        v8 = v8;
        v9 = 0;
        v10 = v8;
      }
      else
      {
        v10 = 0;
        v9 = -6756;
      }
    }
    else
    {
      v10 = 0;
      v9 = -6727;
    }
  }
  else
  {
    v8 = 0;
    v10 = 0;
    v9 = -6705;
  }
  if (a4)
    *a4 = v9;

  return v10;
}

void sub_18D4C8D2C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

uint64_t NSDictionaryValidateClasses(void *a1, int a2, void *a3, void *a4, void *a5)
{
  id v9;
  id v10;
  id v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  id v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  void *v20;
  id v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  void *v26;
  objc_class *v27;
  void *v28;
  void *v29;
  void *v30;
  void *v31;
  objc_class *v32;
  int v34;
  id v35;
  id v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  _BYTE v49[128];
  _BYTE v50[128];
  _BYTE v51[128];
  uint64_t v52;

  v52 = *MEMORY[0x1E0C80C00];
  v9 = a1;
  v35 = a3;
  v10 = a4;
  v36 = a5;
  v45 = 0u;
  v46 = 0u;
  v47 = 0u;
  v48 = 0u;
  v11 = v9;
  v12 = objc_msgSend(v11, "countByEnumeratingWithState:objects:count:", &v45, v51, 16);
  if (!v12)
  {
    v25 = 1;
    goto LABEL_35;
  }
  v34 = a2;
  v13 = *(_QWORD *)v46;
  while (2)
  {
    v14 = 0;
    while (2)
    {
      if (*(_QWORD *)v46 != v13)
        objc_enumerationMutation(v11);
      v15 = *(_QWORD *)(*((_QWORD *)&v45 + 1) + 8 * v14);
      v41 = 0u;
      v42 = 0u;
      v43 = 0u;
      v44 = 0u;
      v16 = v10;
      v17 = objc_msgSend(v16, "countByEnumeratingWithState:objects:count:", &v41, v50, 16);
      if (!v17)
      {
LABEL_28:

        if (!v34)
        {
          v20 = 0;
          goto LABEL_34;
        }
        v26 = (void *)MEMORY[0x1E0C99DA0];
        v27 = (objc_class *)objc_opt_class();
        NSStringFromClass(v27);
        v28 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v16, "allObjects");
        v29 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v29, "componentsJoinedByString:", CFSTR(", "));
        v30 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v26, "raise:format:", *MEMORY[0x1E0C99778], CFSTR("'%@' dictionary contained unexpected key type %@, allowed types: %@"), v35, v28, v30);
        v20 = 0;
LABEL_32:

LABEL_34:
        v25 = 0;
        goto LABEL_35;
      }
      v18 = *(_QWORD *)v42;
LABEL_8:
      v19 = 0;
      while (1)
      {
        if (*(_QWORD *)v42 != v18)
          objc_enumerationMutation(v16);
        if ((objc_opt_isKindOfClass() & 1) != 0)
          break;
        if (v17 == ++v19)
        {
          v17 = objc_msgSend(v16, "countByEnumeratingWithState:objects:count:", &v41, v50, 16);
          if (v17)
            goto LABEL_8;
          goto LABEL_28;
        }
      }

      objc_msgSend(v11, "objectForKeyedSubscript:", v15);
      v20 = (void *)objc_claimAutoreleasedReturnValue();
      v39 = 0u;
      v40 = 0u;
      v37 = 0u;
      v38 = 0u;
      v21 = v36;
      v22 = objc_msgSend(v21, "countByEnumeratingWithState:objects:count:", &v37, v49, 16);
      if (!v22)
      {
LABEL_30:

        if (!v34)
          goto LABEL_34;
        v31 = (void *)MEMORY[0x1E0C99DA0];
        v32 = (objc_class *)objc_opt_class();
        NSStringFromClass(v32);
        v28 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v21, "allObjects");
        v29 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v29, "componentsJoinedByString:", CFSTR(", "));
        v30 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v31, "raise:format:", *MEMORY[0x1E0C99778], CFSTR("'%@' dictionary contained unexpected value type %@, allowed types: %@"), v35, v28, v30);
        goto LABEL_32;
      }
      v23 = *(_QWORD *)v38;
LABEL_17:
      v24 = 0;
      while (1)
      {
        if (*(_QWORD *)v38 != v23)
          objc_enumerationMutation(v21);
        if ((objc_opt_isKindOfClass() & 1) != 0)
          break;
        if (v22 == ++v24)
        {
          v22 = objc_msgSend(v21, "countByEnumeratingWithState:objects:count:", &v37, v49, 16);
          if (v22)
            goto LABEL_17;
          goto LABEL_30;
        }
      }

      if (++v14 != v12)
        continue;
      break;
    }
    v12 = objc_msgSend(v11, "countByEnumeratingWithState:objects:count:", &v45, v51, 16);
    v25 = 1;
    if (v12)
      continue;
    break;
  }
LABEL_35:

  return v25;
}

void sub_18D4C90EC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, void *a14)
{
  void *v14;
  void *v15;
  void *v16;
  void *v17;
  void *v18;
  void *v19;

  _Unwind_Resume(a1);
}

id NSErrorF(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  id v11;
  void *v12;
  void *v13;

  v11 = a1;
  v12 = v11;
  if ((_DWORD)a2)
  {
    NSErrorV(v11, a2, a3, (uint64_t)&a9);
    v13 = (void *)objc_claimAutoreleasedReturnValue();
  }
  else
  {
    v13 = 0;
  }

  return v13;
}

void sub_18D4C921C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

id NSErrorF_safe(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  id v11;
  void *v12;
  void *v13;

  v11 = a1;
  v12 = v11;
  if ((_DWORD)a2)
  {
    NSErrorV(v11, a2, a3, (uint64_t)&a9);
    v13 = (void *)objc_claimAutoreleasedReturnValue();
  }
  else
  {
    v13 = 0;
  }

  return v13;
}

void sub_18D4C929C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

id NSErrorV_safe(void *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  NSErrorV(a1, a2, a3, a4);
  return (id)objc_claimAutoreleasedReturnValue();
}

id NSErrorNestedF(void *a1, uint64_t a2, void *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  id v12;
  id v13;
  void *v14;

  v12 = a1;
  v13 = a3;
  if ((_DWORD)a2)
  {
    NSErrorNestedV(v12, a2, v13, a4, (uint64_t)&a9);
    v14 = (void *)objc_claimAutoreleasedReturnValue();
  }
  else
  {
    v14 = 0;
  }

  return v14;
}

void sub_18D4C9348(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

id NSErrorNestedV(void *a1, uint64_t a2, void *a3, uint64_t a4, uint64_t a5)
{
  __CFString *v9;
  id v10;
  const char *ErrorString;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  __CFString *v19;
  void *v20;
  void *v21;
  id v22;
  __CFString *v23;
  const __CFString *v24;
  uint64_t v25;
  uint64_t v26;
  void *v27;
  _QWORD v29[3];
  _QWORD v30[3];
  _QWORD v31[4];
  _QWORD v32[5];

  v32[4] = *MEMORY[0x1E0C80C00];
  v9 = a1;
  v10 = a3;
  if ((_DWORD)a2)
  {
    ErrorString = DebugGetErrorStringEx(v9, a2, 0, 0);
    NSPrintV(a4, a5);
    v19 = (__CFString *)objc_claimAutoreleasedReturnValue();
    if (*ErrorString)
      NSPrintF((uint64_t)"%s (%@)", v12, v13, v14, v15, v16, v17, v18, (uint64_t)ErrorString);
    else
      NSPrintF((uint64_t)"%d (%@)", v12, v13, v14, v15, v16, v17, v18, a2);
    v21 = (void *)objc_claimAutoreleasedReturnValue();
    v22 = objc_alloc(MEMORY[0x1E0CB35C8]);
    if (v9)
      v23 = v9;
    else
      v23 = (__CFString *)*MEMORY[0x1E0CB2F90];
    v24 = &stru_1E25DF9F8;
    if (v19)
      v24 = v19;
    if (v10)
    {
      v31[0] = CFSTR("cuErrorDesc");
      v31[1] = CFSTR("cuErrorMsg");
      v32[0] = v21;
      v32[1] = v24;
      v25 = *MEMORY[0x1E0CB3388];
      v31[2] = *MEMORY[0x1E0CB2D50];
      v31[3] = v25;
      v32[2] = v21;
      v32[3] = v10;
      objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", v32, v31, 4);
      v26 = objc_claimAutoreleasedReturnValue();
    }
    else
    {
      v29[0] = CFSTR("cuErrorDesc");
      v29[1] = CFSTR("cuErrorMsg");
      v30[0] = v21;
      v30[1] = v24;
      v29[2] = *MEMORY[0x1E0CB2D50];
      v30[2] = v21;
      objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", v30, v29, 3);
      v26 = objc_claimAutoreleasedReturnValue();
    }
    v27 = (void *)v26;
    v20 = (void *)objc_msgSend(v22, "initWithDomain:code:userInfo:", v23, (int)a2, v26);

  }
  else
  {
    v20 = 0;
  }

  return v20;
}

void sub_18D4C9550(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  _Unwind_Resume(a1);
}

id NSErrorNestedF_safe(void *a1, uint64_t a2, void *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  id v12;
  id v13;
  void *v14;

  v12 = a1;
  v13 = a3;
  if ((_DWORD)a2)
  {
    NSErrorNestedV(v12, a2, v13, a4, (uint64_t)&a9);
    v14 = (void *)objc_claimAutoreleasedReturnValue();
  }
  else
  {
    v14 = 0;
  }

  return v14;
}

void sub_18D4C9638(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

id NSErrorNestedV_safe(void *a1, uint64_t a2, void *a3, uint64_t a4, uint64_t a5)
{
  NSErrorNestedV(a1, a2, a3, a4, a5);
  return (id)objc_claimAutoreleasedReturnValue();
}

uint64_t NSPredicateMatches(void *a1, void *a2, void *a3)
{
  id v5;
  id v6;
  id v7;
  uint64_t v8;
  uint64_t v9;

  v5 = a1;
  v6 = a2;
  v7 = a3;
  if (v7)
    v8 = objc_msgSend(v5, "evaluateWithObject:substitutionVariables:", v6, v7);
  else
    v8 = objc_msgSend(v5, "evaluateWithObject:", v6);
  v9 = v8;

  return v9;
}

id NSRandomData(size_t a1, _QWORD *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  void *v10;
  void *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  void *v19;
  id v20;
  const char *v22;
  uint64_t v23;

  if (!a1)
  {
    v22 = "Requested 0 random bytes";
LABEL_8:
    NSErrorWithOSStatusF(4294960553, (uint64_t)v22, a3, a4, a5, a6, a7, a8, v23);
    v20 = (id)objc_claimAutoreleasedReturnValue();
    goto LABEL_10;
  }
  v10 = malloc_type_malloc(a1, 0xBFCDF190uLL);
  if (!v10)
  {
    v23 = a1;
    v22 = "malloc %zu bytes failed";
    goto LABEL_8;
  }
  v11 = v10;
  RandomBytes(v10, a1);
  v12 = objc_msgSend(MEMORY[0x1E0C99D50], "_newZeroingDataWithBytesNoCopy:length:deallocator:", v11, a1, *MEMORY[0x1E0CB2908]);
  if (v12)
  {
    v19 = (void *)v12;
    v20 = 0;
    goto LABEL_5;
  }
  NSErrorWithOSStatusF(4294960553, (uint64_t)"Alloc NSData %zu bytes failed", v13, v14, v15, v16, v17, v18, a1);
  v20 = (id)objc_claimAutoreleasedReturnValue();
  free(v11);
LABEL_10:
  v19 = 0;
  if (a2 && v20)
  {
    v20 = objc_retainAutorelease(v20);
    v19 = 0;
    *a2 = v20;
  }
LABEL_5:

  return v19;
}

id NSStringWithMACAddress(uint64_t a1)
{
  uint64_t v1;
  _BYTE *v2;
  _BYTE *v3;
  unint64_t v4;
  uint64_t v5;
  char v6;
  _BYTE v8[18];
  uint64_t v9;

  v1 = 0;
  v9 = *MEMORY[0x1E0C80C00];
  v2 = v8;
  do
  {
    if (v2 == v8)
    {
      v3 = v8;
    }
    else
    {
      *v2 = 58;
      v3 = v2 + 1;
    }
    v4 = *(unsigned __int8 *)(a1 + v1);
    v5 = v1 + 1;
    *v3 = a0123456789abcd_0[v4 >> 4];
    v6 = a0123456789abcd_0[v4 & 0xF];
    v2 = v3 + 2;
    v3[1] = v6;
    v1 = v5;
  }
  while (v5 != 6);
  *v2 = 0;
  return (id)objc_msgSend(objc_alloc(MEMORY[0x1E0CB3940]), "initWithCString:encoding:", v8, 1);
}

uint64_t HIDButtonsCreateDescriptor(_QWORD *a1, _QWORD *a2)
{
  _OWORD *v4;
  _OWORD *v5;
  uint64_t result;

  v4 = malloc_type_malloc(0x28uLL, 0x5237CC68uLL);
  if (!v4)
    return 4294960568;
  v5 = v4;
  result = 0;
  *v5 = HIDButtonsCreateDescriptor_kDescriptorTemplate;
  v5[1] = unk_18D51E957;
  *((_QWORD *)v5 + 4) = 0xC000810195087500;
  *a1 = v5;
  *a2 = 40;
  return result;
}

uint64_t HIDDPadCreateDescriptor(_QWORD *a1, _QWORD *a2)
{
  char *v4;
  char *v5;
  uint64_t result;

  v4 = (char *)malloc_type_malloc(0x27uLL, 0xAD6ECC2EuLL);
  if (!v4)
    return 4294960568;
  v5 = v4;
  result = 0;
  *(_OWORD *)v5 = HIDDPadCreateDescriptor_kDescriptorTemplate;
  *((_OWORD *)v5 + 1) = unk_18D51E97F;
  *(_QWORD *)(v5 + 31) = 0xC001810195028107;
  *a1 = v5;
  *a2 = 39;
  return result;
}

_BYTE *HIDDPadFillReport(_BYTE *result, char a2, char a3, char a4, char a5, char a6, char a7, char a8, char a9)
{
  *result = a7 | (2 * a9);
  result[1] = (8 * a3) | (4 * a2) | (16 * a4) | (32 * a5) | (2 * a6) | a8 | (a9 << 6);
  return result;
}

uint64_t HIDKnobCreateDescriptor(_QWORD *a1, _QWORD *a2)
{
  char *v4;
  char *v5;
  uint64_t result;

  v4 = (char *)malloc_type_malloc(0x46uLL, 0x687F54E7uLL);
  if (!v4)
    return 4294960568;
  v5 = v4;
  result = 0;
  *((_OWORD *)v5 + 2) = xmmword_18D51E9B6;
  *((_OWORD *)v5 + 3) = unk_18D51E9C6;
  *(_QWORD *)(v5 + 62) = 0xC00681019508757FLL;
  *(_OWORD *)v5 = HIDKnobCreateDescriptor_kDescriptorTemplate;
  *((_OWORD *)v5 + 1) = unk_18D51E9A6;
  *a1 = v5;
  *a2 = 70;
  return result;
}

_BYTE *HIDKnobFillReport(_BYTE *result, char a2, char a3, char a4, char a5, char a6, char a7)
{
  *result = a2 | (2 * a3) | (4 * a4);
  result[1] = a5;
  result[2] = a6;
  result[3] = a7;
  return result;
}

uint64_t HIDPointingCreateDescriptor(_QWORD *a1, _QWORD *a2)
{
  _OWORD *v4;
  _OWORD *v5;
  uint64_t result;

  v4 = malloc_type_malloc(0x3EuLL, 0xA7805EE9uLL);
  if (!v4)
    return 4294960568;
  v5 = v4;
  result = 0;
  *v5 = HIDPointingCreateDescriptor_kDescriptorTemplate;
  v5[1] = unk_18D51E9EC;
  v5[2] = xmmword_18D51E9FC;
  *(_OWORD *)((char *)v5 + 46) = *(__int128 *)((char *)&xmmword_18D51E9FC + 14);
  *a1 = v5;
  *a2 = 62;
  return result;
}

double HIDPointingFillReport(uint64_t a1, char a2, double a3, double a4)
{
  int v4;
  double result;

  v4 = (int)(a3 * 32767.0 + 0.0);
  result = a4 * 32767.0 + 0.0;
  *(_BYTE *)a1 = a2;
  *(_WORD *)(a1 + 1) = v4;
  *(_WORD *)(a1 + 3) = (int)result;
  return result;
}

uint64_t HIDSimpleFillReport(char *a1, int a2, int a3, int a4)
{
  uint64_t v4;
  char v5;

  v4 = 4294960591;
  if (a2 == 12)
  {
    switch(a3)
    {
      case 176:
        goto LABEL_16;
      case 177:
        goto LABEL_14;
      case 178:
      case 179:
      case 180:
        return v4;
      case 181:
LABEL_7:
        v5 = 5;
        goto LABEL_27;
      case 182:
LABEL_15:
        v5 = 6;
        goto LABEL_27;
      default:
        if (a3 == 205)
        {
LABEL_17:
          v5 = 4;
          goto LABEL_27;
        }
        if (a3 == 547)
          goto LABEL_18;
        break;
    }
  }
  else if (a2 == 11)
  {
    if (a3 <= 175)
    {
      switch(a3)
      {
        case ' ':
LABEL_18:
          v5 = 1;
          break;
        case '!':
LABEL_16:
          v5 = 2;
          break;
        case '&':
LABEL_14:
          v5 = 3;
          break;
        default:
          return v4;
      }
LABEL_27:
      v4 = 0;
      if (!a4)
        v5 = 0;
      *a1 = v5;
    }
    else
    {
      switch(a3)
      {
        case 176:
          goto LABEL_17;
        case 177:
          goto LABEL_7;
        case 178:
          goto LABEL_15;
        case 179:
          v5 = 7;
          goto LABEL_27;
        case 180:
          v5 = 8;
          goto LABEL_27;
        case 181:
          v5 = 9;
          goto LABEL_27;
        case 182:
          v5 = 10;
          goto LABEL_27;
        case 183:
          v5 = 11;
          goto LABEL_27;
        case 184:
          v5 = 12;
          goto LABEL_27;
        case 185:
          v5 = 13;
          goto LABEL_27;
        case 186:
          v5 = 14;
          goto LABEL_27;
        case 187:
          v5 = 15;
          goto LABEL_27;
        default:
          return v4;
      }
    }
  }
  return v4;
}

uint64_t HIDTelephonyCreateDescriptor(_QWORD *a1, _QWORD *a2)
{
  char *v4;
  char *v5;
  uint64_t result;

  v4 = (char *)malloc_type_malloc(0x33uLL, 0xB0491513uLL);
  if (!v4)
    return 4294960568;
  v5 = v4;
  result = 0;
  *(_DWORD *)(v5 + 47) = -1073708799;
  *(_OWORD *)v5 = HIDTelephonyCreateDescriptor_kDescriptorTemplate;
  *((_OWORD *)v5 + 1) = unk_18D51EA2A;
  *((_OWORD *)v5 + 2) = xmmword_18D51EA3A;
  *a1 = v5;
  *a2 = 51;
  return result;
}

uint64_t HIDTrackpadCreateDescriptor(_QWORD *a1, _QWORD *a2)
{
  _OWORD *v4;
  _OWORD *v5;
  uint64_t result;

  v4 = malloc_type_malloc(0x8EuLL, 0x135490F4uLL);
  if (!v4)
    return 4294960568;
  v5 = v4;
  result = 0;
  v5[6] = xmmword_18D51EAAD;
  v5[7] = unk_18D51EABD;
  *(_OWORD *)((char *)v5 + 126) = unk_18D51EACB;
  v5[2] = xmmword_18D51EA6D;
  v5[3] = unk_18D51EA7D;
  v5[4] = xmmword_18D51EA8D;
  v5[5] = unk_18D51EA9D;
  *v5 = HIDTrackpadCreateDescriptor_kDescriptorTemplate;
  v5[1] = unk_18D51EA5D;
  *a1 = v5;
  *a2 = 142;
  return result;
}

void HIDTrackpadFillReport(uint64_t a1, size_t __n, void *__src, char a4, unsigned int a5, const void *a6, char a7, char a8, __int16 a9, __int16 a10)
{
  int v14;

  v14 = __n;
  *(_BYTE *)a1 = a8;
  *(_WORD *)(a1 + 1) = a9;
  *(_WORD *)(a1 + 3) = a10;
  memcpy((void *)(a1 + 5), __src, __n);
  bzero((void *)(a1 + (v14 + 5)), 4 - v14);
  *(_BYTE *)(a1 + 9) = 1;
  *(_BYTE *)(a1 + 10) = v14;
  *(_BYTE *)(a1 + 11) = a4;
  memcpy((void *)(a1 + 12), a6, a5);
  bzero((void *)(a1 + a5 + 12), (int)(4 - a5));
  *(_BYTE *)(a1 + 16) = 1;
  *(_BYTE *)(a1 + 17) = a5;
  *(_BYTE *)(a1 + 18) = a7;
}

uint64_t HIDRegisterOverrideDescriptor(unsigned __int16 *a1, const UInt8 *a2, CFIndex a3)
{
  int v6;
  unint64_t v7;
  CFDataRef v8;
  CFDataRef v9;
  uint64_t v10;

  pthread_mutex_lock(&gHIDOverrideLock);
  if ((gHIDOverrides || (gHIDOverrides = (uint64_t)CFDictionaryCreateMutable(0, 0, 0, MEMORY[0x1E0C9B3A0])) != 0)
    && (v6 = *a1, v7 = a1[1], (v8 = CFDataCreate(0, a2, a3)) != 0))
  {
    v9 = v8;
    CFDictionarySetValue((CFMutableDictionaryRef)gHIDOverrides, (const void *)((v6 << 16) | v7), v8);
    CFRelease(v9);
    v10 = 0;
  }
  else
  {
    v10 = 4294960568;
  }
  pthread_mutex_unlock(&gHIDOverrideLock);
  return v10;
}

uint64_t HIDDeregisterOverrideDescriptor(unsigned __int16 *a1)
{
  pthread_mutex_lock(&gHIDOverrideLock);
  if (gHIDOverrides)
    CFDictionaryRemoveValue((CFMutableDictionaryRef)gHIDOverrides, (const void *)((*a1 << 16) | (unint64_t)a1[1]));
  pthread_mutex_unlock(&gHIDOverrideLock);
  return 0;
}

uint64_t HIDCopyOverrideDescriptor(unsigned __int16 *a1, _QWORD *a2, _QWORD *a3)
{
  const __CFData *Value;
  void *v7;
  size_t v9;
  unsigned int v10;

  v10 = 0;
  v9 = 0;
  pthread_mutex_lock(&gHIDOverrideLock);
  if (!gHIDOverrides)
  {
    v7 = 0;
    goto LABEL_5;
  }
  Value = (const __CFData *)CFDictionaryGetValue((CFDictionaryRef)gHIDOverrides, (const void *)((*a1 << 16) | (unint64_t)a1[1]));
  if (!Value)
  {
    v7 = 0;
    v9 = 0;
LABEL_5:
    v10 = -6727;
    goto LABEL_6;
  }
  v7 = CFCopyData(Value, &v9, &v10);
LABEL_6:
  pthread_mutex_unlock(&gHIDOverrideLock);
  *a2 = v7;
  *a3 = v9;
  return v10;
}

uint64_t _HIDBrowserGetTypeID()
{
  uint64_t result;

  result = _CFRuntimeRegisterClass();
  gHIDBrowserTypeID = result;
  return result;
}

void _HIDBrowserFinalize(uint64_t a1)
{
  pthread_mutex_t *v2;
  NSObject *v3;

  v2 = *(pthread_mutex_t **)(a1 + 96);
  if (v2)
  {
    pthread_mutex_destroy(v2);
    *(_QWORD *)(a1 + 96) = 0;
  }
  v3 = *(NSObject **)(a1 + 16);
  if (v3)
  {
    dispatch_release(v3);
    *(_QWORD *)(a1 + 16) = 0;
  }
}

uint64_t HIDBrowserCreate(uint64_t *a1)
{
  uint64_t Instance;
  uint64_t v3;
  NSObject *v4;
  uint64_t v5;

  if (gHIDBrowserInitOnce != -1)
    dispatch_once_f(&gHIDBrowserInitOnce, 0, (dispatch_function_t)_HIDBrowserGetTypeID);
  Instance = _CFRuntimeCreateInstance();
  if (!Instance)
    return 4294960568;
  v3 = Instance;
  *(_QWORD *)(Instance + 136) = 0;
  *(_OWORD *)(Instance + 120) = 0u;
  *(_OWORD *)(Instance + 104) = 0u;
  *(_OWORD *)(Instance + 88) = 0u;
  *(_OWORD *)(Instance + 72) = 0u;
  *(_OWORD *)(Instance + 56) = 0u;
  *(_OWORD *)(Instance + 40) = 0u;
  *(_OWORD *)(Instance + 24) = 0u;
  v4 = MEMORY[0x1E0C80D38];
  *(_QWORD *)(v3 + 16) = MEMORY[0x1E0C80D38];
  dispatch_retain(v4);
  v5 = pthread_mutex_init((pthread_mutex_t *)(v3 + 32), 0);
  if ((_DWORD)v5)
  {
    CFRelease((CFTypeRef)v3);
  }
  else
  {
    *(_QWORD *)(v3 + 96) = v3 + 32;
    *(_BYTE *)(v3 + 104) = 1;
    *a1 = v3;
  }
  return v5;
}

void *HIDBrowserCopyProperty(uint64_t a1, CFTypeRef cf1, uint64_t a3, int *a4)
{
  const __CFArray *v7;
  void *Copy;
  CFTypeRef *v9;
  int v10;

  if (!CFEqual(cf1, CFSTR("devices")))
  {
    if (!CFEqual(cf1, CFSTR("hidRaw")))
    {
      Copy = 0;
      v10 = -6727;
      goto LABEL_11;
    }
    v9 = (CFTypeRef *)MEMORY[0x1E0C9AE50];
    if (!*(_BYTE *)(a1 + 104))
      v9 = (CFTypeRef *)MEMORY[0x1E0C9AE40];
    Copy = (void *)*v9;
    CFRetain(*v9);
    goto LABEL_10;
  }
  pthread_mutex_lock(*(pthread_mutex_t **)(a1 + 96));
  v7 = *(const __CFArray **)(a1 + 24);
  if (v7)
  {
    Copy = CFArrayCreateCopy(0, v7);
    pthread_mutex_unlock(*(pthread_mutex_t **)(a1 + 96));
    if (!Copy)
      goto LABEL_15;
LABEL_10:
    v10 = 0;
    goto LABEL_11;
  }
  pthread_mutex_unlock(*(pthread_mutex_t **)(a1 + 96));
  Copy = CFArrayCreate(0, 0, 0, MEMORY[0x1E0C9B378]);
  if (Copy)
    goto LABEL_10;
LABEL_15:
  v10 = -6728;
LABEL_11:
  if (a4)
    *a4 = v10;
  return Copy;
}

uint64_t HIDBrowserSetProperty(uint64_t a1, CFTypeRef cf1, uint64_t a3, const __CFString *a4)
{
  unint64_t v6;
  uint64_t result;
  unsigned int v8;

  if (!CFEqual(cf1, CFSTR("hidRaw")))
    return 4294960582;
  v8 = 0;
  v6 = CFGetInt64(a4, (int *)&v8);
  result = v8;
  if (!v8)
    *(_BYTE *)(a1 + 104) = v6 != 0;
  return result;
}

void HIDBrowserSetDispatchQueue(uint64_t a1, NSObject *a2)
{
  NSObject *v3;
  NSObject *v4;

  if (a2)
    v3 = a2;
  else
    v3 = MEMORY[0x1E0C80D38];
  dispatch_retain(v3);
  v4 = *(NSObject **)(a1 + 16);
  if (v4)
    dispatch_release(v4);
  *(_QWORD *)(a1 + 16) = v3;
}

uint64_t HIDBrowserSetEventHandler(uint64_t result, uint64_t a2, uint64_t a3)
{
  *(_QWORD *)(result + 128) = a2;
  *(_QWORD *)(result + 136) = a3;
  return result;
}

uint64_t HIDBrowserStart(dispatch_queue_t *a1)
{
  CFRetain(a1);
  dispatch_async_f(a1[2], a1, (dispatch_function_t)_HIDBrowserStart);
  return 0;
}

void _HIDBrowserStart(uint64_t a1)
{
  IONotificationPort *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  IONotificationPort *v7;
  const __CFDictionary *v8;
  uint64_t v9;
  const void *v10;
  CFIndex Count;
  CFIndex v12;
  CFIndex i;
  const void *ValueAtIndex;
  CFIndex v15;
  CFIndex v16;
  CFIndex j;
  const void *v18;
  io_iterator_t v19;
  void (*v20)(uint64_t, _QWORD, _QWORD);

  if (*(_BYTE *)(a1 + 104))
  {
    v2 = IONotificationPortCreate(*MEMORY[0x1E0CBBAA8]);
    *(_QWORD *)(a1 + 112) = v2;
    if (!v2)
    {
      v9 = 4294960596;
      goto LABEL_4;
    }
    IONotificationPortSetDispatchQueue(v2, *(dispatch_queue_t *)(a1 + 16));
    v7 = *(IONotificationPort **)(a1 + 112);
    v8 = IOServiceMatching("IOHIDDevice");
    v9 = IOServiceAddMatchingNotification(v7, "IOServiceFirstMatch", v8, (IOServiceMatchingCallback)_HIDBrowserAttachHandler, (void *)a1, (io_iterator_t *)(a1 + 120));
    if ((_DWORD)v9)
      goto LABEL_4;
  }
  pthread_mutex_lock(*(pthread_mutex_t **)(a1 + 96));
  v10 = *(const void **)(a1 + 24);
  if (v10)
  {
    CFRelease(v10);
    *(_QWORD *)(a1 + 24) = 0;
  }
  *(_QWORD *)(a1 + 24) = CFArrayCreateMutable(0, 0, MEMORY[0x1E0C9B378]);
  pthread_mutex_unlock(*(pthread_mutex_t **)(a1 + 96));
  if (!*(_QWORD *)(a1 + 24))
  {
    v9 = 4294960568;
LABEL_4:
    if (gLogCategory_HIDUtils <= 50
      && (gLogCategory_HIDUtils != -1 || _LogCategory_Initialize((uint64_t)&gLogCategory_HIDUtils, 0x32u)))
    {
      LogPrintF((uint64_t)&gLogCategory_HIDUtils, (uint64_t)"void _HIDBrowserStart(void *)", 0x32u, (uint64_t)"### HID browser start failed: %#m\n", v3, v4, v5, v6, v9);
    }
    _HIDBrowserStop(a1);
    return;
  }
  pthread_mutex_lock(&gVirtualHIDLock);
  if (gVirtualHIDDevices)
  {
    Count = CFArrayGetCount((CFArrayRef)gVirtualHIDDevices);
    if (Count >= 1)
    {
      v12 = Count;
      for (i = 0; i != v12; ++i)
      {
        ValueAtIndex = CFArrayGetValueAtIndex((CFArrayRef)gVirtualHIDDevices, i);
        pthread_mutex_lock(*(pthread_mutex_t **)(a1 + 96));
        CFArrayAppendValue(*(CFMutableArrayRef *)(a1 + 24), ValueAtIndex);
        pthread_mutex_unlock(*(pthread_mutex_t **)(a1 + 96));
      }
    }
  }
  pthread_mutex_unlock(&gVirtualHIDLock);
  if (*(_QWORD *)(a1 + 128))
  {
    v15 = CFArrayGetCount(*(CFArrayRef *)(a1 + 24));
    if (v15 >= 1)
    {
      v16 = v15;
      for (j = 0; j != v16; ++j)
      {
        v18 = CFArrayGetValueAtIndex(*(CFArrayRef *)(a1 + 24), j);
        (*(void (**)(uint64_t, const void *, _QWORD))(a1 + 128))(2, v18, *(_QWORD *)(a1 + 136));
      }
    }
  }
  v19 = *(_DWORD *)(a1 + 120);
  if (v19)
    _HIDBrowserAttachHandler(a1, v19);
  v20 = *(void (**)(uint64_t, _QWORD, _QWORD))(a1 + 128);
  if (v20)
    v20(4, 0, *(_QWORD *)(a1 + 136));
  CFRelease((CFTypeRef)a1);
}

uint64_t _HIDBrowserAttachHandler(uint64_t a1, io_iterator_t iterator)
{
  NSObject *v4;
  uint64_t result;
  io_service_t v6;
  uint64_t Instance;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  __IOHIDDevice *v13;
  uint64_t v14;
  const __CFString *Property;
  const __CFString *v16;
  int64_t v17;
  void *v18;
  CFTypeRef v19;
  CFTypeRef v20;
  __IOHIDDevice *v21;
  __CFRunLoop *Main;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  void (*v27)(uint64_t, uint64_t, _QWORD);
  const __CFString *runLoopMode;

  runLoopMode = (const __CFString *)*MEMORY[0x1E0C9B270];
  v4 = MEMORY[0x1E0C80D38];
  while (1)
  {
    result = IOIteratorNext(iterator);
    if (!(_DWORD)result)
      return result;
    v6 = result;
    if (gHIDDeviceInitOnce != -1)
      dispatch_once_f(&gHIDDeviceInitOnce, 0, (dispatch_function_t)_HIDDeviceGetTypeID);
    Instance = _CFRuntimeCreateInstance();
    v12 = Instance;
    if (!Instance)
    {
LABEL_33:
      v14 = 4294960568;
      goto LABEL_10;
    }
    *(_QWORD *)(Instance + 152) = 0;
    *(_OWORD *)(Instance + 136) = 0u;
    *(_OWORD *)(Instance + 120) = 0u;
    *(_OWORD *)(Instance + 104) = 0u;
    *(_OWORD *)(Instance + 88) = 0u;
    *(_OWORD *)(Instance + 72) = 0u;
    *(_OWORD *)(Instance + 56) = 0u;
    *(_OWORD *)(Instance + 40) = 0u;
    *(_OWORD *)(Instance + 24) = 0u;
    *(_QWORD *)(Instance + 16) = v4;
    dispatch_retain(v4);
    if (a1)
      CFRetain((CFTypeRef)a1);
    *(_QWORD *)(v12 + 24) = a1;
    v13 = IOHIDDeviceCreate(0, v6);
    *(_QWORD *)(v12 + 32) = v13;
    if (!v13)
    {
      v14 = 4294960596;
      goto LABEL_10;
    }
    v14 = IOHIDDeviceOpen(v13, 0);
    if ((_DWORD)v14)
    {
LABEL_10:
      if (gLogCategory_HIDUtils <= 50
        && (gLogCategory_HIDUtils != -1 || _LogCategory_Initialize((uint64_t)&gLogCategory_HIDUtils, 0x32u)))
      {
        LogPrintF((uint64_t)&gLogCategory_HIDUtils, (uint64_t)"OSStatus _HIDDeviceCreateWithService(HIDDeviceRef *, HIDBrowserRef, io_object_t)", 0x32u, (uint64_t)"### Add HID device failed: %#m\n", v8, v9, v10, v11, v14);
      }
      CFRelease((CFTypeRef)v12);
      IOObjectRelease(v6);
    }
    else
    {
      *(_BYTE *)(v12 + 40) = 1;
      Property = (const __CFString *)IOHIDDeviceGetProperty(*(IOHIDDeviceRef *)(v12 + 32), CFSTR("Product"));
      if (!Property)
        Property = CFSTR("?");
      *(_QWORD *)(v12 + 104) = Property;
      CFRetain(Property);
      v16 = (const __CFString *)IOHIDDeviceGetProperty(*(IOHIDDeviceRef *)(v12 + 32), CFSTR("MaxInputReportSize"));
      if (v16)
      {
        v17 = CFGetInt64(v16, 0);
        *(_QWORD *)(v12 + 56) = v17;
      }
      else
      {
        v17 = *(_QWORD *)(v12 + 56);
      }
      if (v17 <= 0)
      {
        *(_QWORD *)(v12 + 56) = 32;
        v17 = 32;
      }
      v18 = malloc_type_malloc(v17, 0x52488B57uLL);
      *(_QWORD *)(v12 + 48) = v18;
      if (!v18)
        goto LABEL_33;
      v19 = IOHIDDeviceGetProperty(*(IOHIDDeviceRef *)(v12 + 32), CFSTR("ReportDescriptor"));
      if (!v19)
      {
        v14 = 4294960551;
        goto LABEL_10;
      }
      v20 = v19;
      CFRetain(v19);
      *(_QWORD *)(v12 + 120) = v20;
      RandomBytes((void *)(v12 + 136), 0x10uLL);
      *(_BYTE *)(v12 + 142) = *(_BYTE *)(v12 + 142) & 0xF | 0x40;
      *(_BYTE *)(v12 + 144) = *(_BYTE *)(v12 + 144) & 0x3F | 0x80;
      v21 = *(__IOHIDDevice **)(v12 + 32);
      Main = CFRunLoopGetMain();
      IOHIDDeviceScheduleWithRunLoop(v21, Main, runLoopMode);
      if (a1)
        IOHIDDeviceRegisterRemovalCallback(*(IOHIDDeviceRef *)(v12 + 32), (IOHIDCallback)_HIDBrowserDetachHandler, (void *)v12);
      IOObjectRelease(v6);
      if (gLogCategory_HIDUtils <= 30
        && (gLogCategory_HIDUtils != -1 || _LogCategory_Initialize((uint64_t)&gLogCategory_HIDUtils, 0x1Eu)))
      {
        LogPrintF((uint64_t)&gLogCategory_HIDUtils, (uint64_t)"void _HIDBrowserAttachHandler(void *, io_iterator_t)", 0x1Eu, (uint64_t)"Attached HID device %#U (%-3d byte reports): %@\n", v23, v24, v25, v26, v12 + 136);
      }
      pthread_mutex_lock(*(pthread_mutex_t **)(a1 + 96));
      CFArrayAppendValue(*(CFMutableArrayRef *)(a1 + 24), (const void *)v12);
      pthread_mutex_unlock(*(pthread_mutex_t **)(a1 + 96));
      v27 = *(void (**)(uint64_t, uint64_t, _QWORD))(a1 + 128);
      if (v27)
        v27(2, v12, *(_QWORD *)(a1 + 136));
      CFRelease((CFTypeRef)v12);
    }
  }
}

void _HIDBrowserStop(uint64_t a1)
{
  io_object_t v2;
  IONotificationPort *v3;
  void (*v4)(uint64_t, _QWORD, _QWORD);
  const void *v5;

  v2 = *(_DWORD *)(a1 + 120);
  if (v2)
  {
    IOObjectRelease(v2);
    *(_DWORD *)(a1 + 120) = 0;
  }
  v3 = *(IONotificationPort **)(a1 + 112);
  if (v3)
  {
    IONotificationPortDestroy(v3);
    *(_QWORD *)(a1 + 112) = 0;
  }
  v4 = *(void (**)(uint64_t, _QWORD, _QWORD))(a1 + 128);
  if (v4)
    v4(1, 0, *(_QWORD *)(a1 + 136));
  pthread_mutex_lock(*(pthread_mutex_t **)(a1 + 96));
  v5 = *(const void **)(a1 + 24);
  if (v5)
  {
    CFRelease(v5);
    *(_QWORD *)(a1 + 24) = 0;
  }
  pthread_mutex_unlock(*(pthread_mutex_t **)(a1 + 96));
  CFRelease((CFTypeRef)a1);
}

uint64_t _HIDDeviceGetTypeID()
{
  uint64_t result;

  result = _CFRuntimeRegisterClass();
  gHIDDeviceTypeID = result;
  return result;
}

CFIndex _HIDBrowserDetachHandler(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9;
  void (*v10)(uint64_t, _QWORD *, _QWORD);
  const __CFArray *v11;
  CFIndex result;
  CFIndex v13;
  CFRange v14;

  v9 = a1[3];
  if (gLogCategory_HIDUtils <= 30
    && (gLogCategory_HIDUtils != -1 || _LogCategory_Initialize((uint64_t)&gLogCategory_HIDUtils, 0x1Eu)))
  {
    LogPrintF((uint64_t)&gLogCategory_HIDUtils, (uint64_t)"void _HIDBrowserDetachHandler(void *, IOReturn, void *)", 0x1Eu, (uint64_t)"Detached HID device %#U: %@\n", a5, a6, a7, a8, (uint64_t)(a1 + 17));
  }
  v10 = *(void (**)(uint64_t, _QWORD *, _QWORD))(v9 + 128);
  if (v10)
    v10(3, a1, *(_QWORD *)(v9 + 136));
  v11 = *(const __CFArray **)(v9 + 24);
  v14.length = CFArrayGetCount(v11);
  v14.location = 0;
  result = CFArrayGetFirstIndexOfValue(v11, v14, a1);
  if ((result & 0x8000000000000000) == 0)
  {
    v13 = result;
    pthread_mutex_lock(*(pthread_mutex_t **)(v9 + 96));
    CFArrayRemoveValueAtIndex(*(CFMutableArrayRef *)(v9 + 24), v13);
    return pthread_mutex_unlock(*(pthread_mutex_t **)(v9 + 96));
  }
  return result;
}

void _HIDDeviceFinalize(uint64_t a1)
{
  const void *v2;
  __IOHIDDevice *v3;
  __CFRunLoop *Main;
  const void *v5;
  void *v6;
  const void *v7;
  const void *v8;
  const void *v9;
  const void *v10;
  const void *v11;
  const void *v12;
  const void *v13;
  NSObject *v14;

  v2 = *(const void **)(a1 + 24);
  if (v2)
  {
    CFRelease(v2);
    *(_QWORD *)(a1 + 24) = 0;
  }
  if (*(_BYTE *)(a1 + 40))
  {
    v3 = *(__IOHIDDevice **)(a1 + 32);
    Main = CFRunLoopGetMain();
    IOHIDDeviceUnscheduleFromRunLoop(v3, Main, (CFStringRef)*MEMORY[0x1E0C9B270]);
    IOHIDDeviceRegisterRemovalCallback(*(IOHIDDeviceRef *)(a1 + 32), 0, (void *)a1);
    IOHIDDeviceClose(*(IOHIDDeviceRef *)(a1 + 32), 0);
    *(_BYTE *)(a1 + 40) = 0;
  }
  v5 = *(const void **)(a1 + 32);
  if (v5)
  {
    CFRelease(v5);
    *(_QWORD *)(a1 + 32) = 0;
  }
  v6 = *(void **)(a1 + 48);
  if (v6)
  {
    free(v6);
    *(_QWORD *)(a1 + 48) = 0;
  }
  *(_QWORD *)(a1 + 56) = 0;
  v7 = *(const void **)(a1 + 88);
  if (v7)
  {
    CFRelease(v7);
    *(_QWORD *)(a1 + 88) = 0;
  }
  v8 = *(const void **)(a1 + 96);
  if (v8)
  {
    CFRelease(v8);
    *(_QWORD *)(a1 + 96) = 0;
  }
  v9 = *(const void **)(a1 + 104);
  if (v9)
  {
    CFRelease(v9);
    *(_QWORD *)(a1 + 104) = 0;
  }
  v10 = *(const void **)(a1 + 112);
  if (v10)
  {
    CFRelease(v10);
    *(_QWORD *)(a1 + 112) = 0;
  }
  v11 = *(const void **)(a1 + 120);
  if (v11)
  {
    CFRelease(v11);
    *(_QWORD *)(a1 + 120) = 0;
  }
  v12 = *(const void **)(a1 + 128);
  if (v12)
  {
    CFRelease(v12);
    *(_QWORD *)(a1 + 128) = 0;
  }
  v13 = *(const void **)(a1 + 152);
  if (v13)
  {
    CFRelease(v13);
    *(_QWORD *)(a1 + 152) = 0;
  }
  v14 = *(NSObject **)(a1 + 16);
  if (v14)
  {
    dispatch_release(v14);
    *(_QWORD *)(a1 + 16) = 0;
  }
}

void HIDBrowserStop(dispatch_queue_t *a1)
{
  CFRetain(a1);
  dispatch_async_f(a1[2], a1, (dispatch_function_t)_HIDBrowserStop);
}

void HIDBrowserStopDevices(dispatch_queue_t *a1)
{
  CFRetain(a1);
  dispatch_async_f(a1[2], a1, (dispatch_function_t)_HIDBrowserStopDevices);
}

void _HIDBrowserStopDevices(CFTypeRef cf)
{
  const __CFArray *v2;
  CFIndex Count;
  CFIndex v4;
  CFIndex i;
  dispatch_queue_t *ValueAtIndex;

  v2 = (const __CFArray *)*((_QWORD *)cf + 3);
  if (v2)
  {
    Count = CFArrayGetCount(v2);
    if (Count >= 1)
    {
      v4 = Count;
      for (i = 0; i != v4; ++i)
      {
        ValueAtIndex = (dispatch_queue_t *)CFArrayGetValueAtIndex(*((CFArrayRef *)cf + 3), i);
        CFRetain(ValueAtIndex);
        dispatch_async_f(ValueAtIndex[2], ValueAtIndex, (dispatch_function_t)_HIDDeviceStop);
      }
    }
  }
  CFRelease(cf);
}

void _HIDDeviceStop(void *context)
{
  __IOHIDDevice *v2;
  void (*v3)(_QWORD, uint64_t, _QWORD, _QWORD, _QWORD, _QWORD);

  if (*((_BYTE *)context + 64))
  {
    *((_BYTE *)context + 64) = 0;
    v2 = (__IOHIDDevice *)*((_QWORD *)context + 4);
    if (v2)
      IOHIDDeviceRegisterInputReportCallback(v2, *((uint8_t **)context + 6), *((_QWORD *)context + 7), 0, context);
    v3 = (void (*)(_QWORD, uint64_t, _QWORD, _QWORD, _QWORD, _QWORD))*((_QWORD *)context + 9);
    if (v3)
      v3(0, 1, 0, 0, 0, *((_QWORD *)context + 10));
    CFRelease(context);
  }
  CFRelease(context);
}

uint64_t HIDDeviceCreateVirtual(_QWORD *a1, const __CFDictionary *a2)
{
  uint64_t Instance;
  _QWORD *v5;
  _BYTE *v6;
  NSObject *v7;
  unint64_t Int64;
  __CFString *Value;
  CFStringRef v10;
  CFTypeID TypeID;
  const __CFDictionary *TypedValue;
  const __CFDictionary *v13;
  unint64_t v14;
  const __CFData *v15;
  const UInt8 *v16;
  UInt8 *v17;
  CFDataRef v18;
  unint64_t v19;
  CFNumberRef v20;
  __CFString *v21;
  unint64_t v22;
  uint64_t result;
  unsigned int v24;
  CFIndex length;
  int v26;
  char __str[128];
  _BYTE v28[16];
  uint64_t v29;

  v29 = *MEMORY[0x1E0C80C00];
  if (gHIDDeviceInitOnce != -1)
    dispatch_once_f(&gHIDDeviceInitOnce, 0, (dispatch_function_t)_HIDDeviceGetTypeID);
  Instance = _CFRuntimeCreateInstance();
  if (!Instance)
    return 4294960568;
  v5 = (_QWORD *)Instance;
  *(_OWORD *)(Instance + 136) = 0u;
  v6 = (_BYTE *)(Instance + 136);
  *(_QWORD *)(Instance + 152) = 0;
  *(_OWORD *)(Instance + 104) = 0u;
  *(_OWORD *)(Instance + 120) = 0u;
  *(_OWORD *)(Instance + 72) = 0u;
  *(_OWORD *)(Instance + 88) = 0u;
  *(_OWORD *)(Instance + 40) = 0u;
  *(_OWORD *)(Instance + 56) = 0u;
  *(_OWORD *)(Instance + 24) = 0u;
  v7 = MEMORY[0x1E0C80D38];
  *((_QWORD *)v6 - 15) = MEMORY[0x1E0C80D38];
  dispatch_retain(v7);
  RandomBytes(v6, 0x10uLL);
  v6[6] = v6[6] & 0xF | 0x40;
  v6[8] = v6[8] & 0x3F | 0x80;
  if (!a2)
  {
LABEL_24:
    result = 0;
    *a1 = v5;
    return result;
  }
  v24 = 0;
  Int64 = CFDictionaryGetInt64(a2, CFSTR("countryCode"), (int *)&v24);
  if (!v24)
    v5[11] = CFNumberCreateInt64(Int64);
  Value = (__CFString *)CFDictionaryGetValue(a2, CFSTR("displayUUID"));
  if (!Value)
  {
    v24 = -6727;
    goto LABEL_10;
  }
  v24 = CFGetUUIDEx(Value, 0, (uint64_t)v28);
  if (v24
    || (snprintf(__str, 0x25uLL, "%02x%02x%02x%02x-%02x%02x-%02x%02x-%02x%02x-%02x%02x%02x%02x%02x%02x", v28[0], v28[1], v28[2], v28[3], v28[4], v28[5], v28[6], v28[7], v28[8], v28[9], v28[10], v28[11], v28[12], v28[13], v28[14], v28[15]),
        v10 = CFStringCreateWithCString(0, __str, 0x8000100u),
        (v5[12] = v10) != 0))
  {
LABEL_10:
    TypeID = CFStringGetTypeID();
    TypedValue = CFDictionaryGetTypedValue(a2, CFSTR("name"), TypeID, 0);
    if (TypedValue)
    {
      v13 = TypedValue;
      CFRetain(TypedValue);
      v5[13] = v13;
    }
    v14 = CFDictionaryGetInt64(a2, CFSTR("productID"), (int *)&v24);
    if (!v24)
      v5[14] = CFNumberCreateInt64(v14);
    v15 = (const __CFData *)CFDictionaryGetValue(a2, CFSTR("hidDescriptor"));
    if (v15)
    {
      v26 = 0;
      length = 0;
      v16 = (const UInt8 *)CFCopyData(v15, (size_t *)&length, &v26);
      if (!v26)
      {
        v17 = (UInt8 *)v16;
        v18 = CFDataCreate(0, v16, length);
        free(v17);
        if (v18)
          v5[15] = v18;
      }
    }
    v19 = CFDictionaryGetInt64(a2, CFSTR("sampleRate"), (int *)&v24);
    if (v24 || (v20 = CFNumberCreateInt64(v19), (v5[16] = v20) != 0))
    {
      v21 = (__CFString *)CFDictionaryGetValue(a2, CFSTR("uuid"));
      if (v21)
        CFGetUUIDEx(v21, 0, (uint64_t)v6);
      v22 = CFDictionaryGetInt64(a2, CFSTR("vendorID"), (int *)&v24);
      if (!v24)
        v5[19] = CFNumberCreateInt64(v22);
      goto LABEL_24;
    }
  }
  v24 = -6700;
  CFRelease(v5);
  return v24;
}

void HIDDeviceSetDispatchQueue(uint64_t a1, NSObject *a2)
{
  NSObject *v3;
  NSObject *v4;

  if (a2)
    v3 = a2;
  else
    v3 = MEMORY[0x1E0C80D38];
  dispatch_retain(v3);
  v4 = *(NSObject **)(a1 + 16);
  if (v4)
    dispatch_release(v4);
  *(_QWORD *)(a1 + 16) = v3;
}

uint64_t HIDDeviceSetEventHandler(uint64_t result, uint64_t a2, uint64_t a3)
{
  *(_QWORD *)(result + 72) = a2;
  *(_QWORD *)(result + 80) = a3;
  return result;
}

CFStringRef HIDDeviceCopyProperty(uint64_t a1, CFTypeRef cf1, uint64_t a3, int *a4)
{
  CFStringRef v7;
  int v8;
  char cStr[128];
  uint64_t v11;

  v11 = *MEMORY[0x1E0C80C00];
  if (CFEqual(cf1, CFSTR("countryCode")))
  {
    v7 = *(CFStringRef *)(a1 + 88);
    if (!v7)
      goto LABEL_10;
    goto LABEL_9;
  }
  if (CFEqual(cf1, CFSTR("displayUUID")))
  {
    v7 = *(CFStringRef *)(a1 + 96);
    if (!v7)
      goto LABEL_30;
    goto LABEL_9;
  }
  if (CFEqual(cf1, CFSTR("name")))
  {
    v7 = *(CFStringRef *)(a1 + 104);
    goto LABEL_9;
  }
  if (CFEqual(cf1, CFSTR("productID")))
  {
    v7 = *(CFStringRef *)(a1 + 112);
    if (!v7)
      goto LABEL_10;
    goto LABEL_9;
  }
  if (CFEqual(cf1, CFSTR("hidDescriptor")))
  {
    v7 = *(CFStringRef *)(a1 + 120);
    if (!v7)
      goto LABEL_10;
    goto LABEL_9;
  }
  if (CFEqual(cf1, CFSTR("sampleRate")))
  {
    v7 = *(CFStringRef *)(a1 + 128);
    if (!v7)
      goto LABEL_10;
    goto LABEL_9;
  }
  if (!CFEqual(cf1, CFSTR("uuid")))
  {
    if (!CFEqual(cf1, CFSTR("vendorID")))
    {
      v7 = 0;
LABEL_30:
      v8 = -6727;
      goto LABEL_11;
    }
    v7 = *(CFStringRef *)(a1 + 152);
    if (!v7)
      goto LABEL_10;
LABEL_9:
    CFRetain(v7);
LABEL_10:
    v8 = 0;
    goto LABEL_11;
  }
  UUIDtoCStringFlags((_BYTE *)(a1 + 136), 16, 0, 0, cStr, 0);
  v7 = CFStringCreateWithCString(0, cStr, 0x8000100u);
  if (v7)
    goto LABEL_10;
  v8 = -6728;
LABEL_11:
  if (a4)
    *a4 = v8;
  return v7;
}

uint64_t HIDDeviceSetProperty(_QWORD *a1, CFTypeRef cf1, uint64_t a3, const __CFString *a4)
{
  unint64_t v7;
  uint64_t result;
  CFNumberRef Int64;
  CFNumberRef v10;
  const void *v11;
  CFTypeID v12;
  const void *v13;
  CFTypeID v14;
  const void *v15;
  unint64_t v16;
  CFNumberRef v17;
  CFNumberRef v18;
  const void *v19;
  CFTypeID v20;
  const void *v21;
  unint64_t v22;
  CFNumberRef v23;
  CFNumberRef v24;
  const void *v25;
  unint64_t v26;
  CFNumberRef v27;
  CFNumberRef v28;
  const void *v29;
  unsigned int v30;

  v30 = 0;
  if (CFEqual(cf1, CFSTR("countryCode")))
  {
    v7 = CFGetInt64(a4, (int *)&v30);
    result = v30;
    if (v30)
      return result;
    Int64 = CFNumberCreateInt64(v7);
    if (Int64)
    {
      v10 = Int64;
      v11 = (const void *)a1[11];
      if (v11)
        CFRelease(v11);
      result = 0;
      a1[11] = v10;
      return result;
    }
    return 4294960596;
  }
  if (CFEqual(cf1, CFSTR("displayUUID")))
  {
    if (!a4)
    {
LABEL_11:
      v13 = (const void *)a1[12];
      if (v13)
        CFRelease(v13);
      result = 0;
      a1[12] = a4;
      return result;
    }
    v12 = CFGetTypeID(a4);
    if (v12 == CFStringGetTypeID())
    {
      CFRetain(a4);
      goto LABEL_11;
    }
    return 4294960540;
  }
  if (CFEqual(cf1, CFSTR("name")))
  {
    if (a4)
    {
      v14 = CFGetTypeID(a4);
      if (v14 != CFStringGetTypeID())
        return 4294960540;
      CFRetain(a4);
    }
    v15 = (const void *)a1[13];
    if (v15)
      CFRelease(v15);
    result = 0;
    a1[13] = a4;
  }
  else if (CFEqual(cf1, CFSTR("productID")))
  {
    v16 = CFGetInt64(a4, (int *)&v30);
    result = v30;
    if (v30)
      return result;
    v17 = CFNumberCreateInt64(v16);
    if (!v17)
      return 4294960596;
    v18 = v17;
    v19 = (const void *)a1[14];
    if (v19)
      CFRelease(v19);
    result = 0;
    a1[14] = v18;
  }
  else if (CFEqual(cf1, CFSTR("hidDescriptor")))
  {
    if (a4)
    {
      v20 = CFGetTypeID(a4);
      if (v20 != CFDataGetTypeID())
        return 4294960540;
      CFRetain(a4);
    }
    v21 = (const void *)a1[15];
    if (v21)
      CFRelease(v21);
    result = 0;
    a1[15] = a4;
  }
  else if (CFEqual(cf1, CFSTR("sampleRate")))
  {
    v22 = CFGetInt64(a4, (int *)&v30);
    result = v30;
    if (v30)
      return result;
    v23 = CFNumberCreateInt64(v22);
    if (!v23)
      return 4294960596;
    v24 = v23;
    v25 = (const void *)a1[16];
    if (v25)
      CFRelease(v25);
    result = 0;
    a1[16] = v24;
  }
  else
  {
    if (!CFEqual(cf1, CFSTR("vendorID")))
      return 4294960582;
    v26 = CFGetInt64(a4, (int *)&v30);
    result = v30;
    if (!v30)
    {
      v27 = CFNumberCreateInt64(v26);
      if (!v27)
        return 4294960596;
      v28 = v27;
      v29 = (const void *)a1[19];
      if (v29)
        CFRelease(v29);
      result = 0;
      a1[19] = v28;
    }
  }
  return result;
}

uint64_t HIDDevicePostReport(dispatch_queue_t *a1, const void *a2, size_t a3)
{
  dispatch_queue_t **v6;
  dispatch_queue_t **v7;

  v6 = (dispatch_queue_t **)malloc_type_malloc(a3 + 16, 0x5DC08097uLL);
  if (!v6)
    return 4294960568;
  v7 = v6;
  CFRetain(a1);
  *v7 = a1;
  v7[1] = (dispatch_queue_t *)a3;
  memcpy(v7 + 2, a2, a3);
  dispatch_async_f(a1[2], v7, (dispatch_function_t)_HIDDevicePostReport);
  return 0;
}

void _HIDDevicePostReport(_QWORD *a1)
{
  _QWORD *v2;
  void (*v3)(_QWORD, uint64_t, _QWORD, _QWORD *, _QWORD, _QWORD);

  v2 = (_QWORD *)*a1;
  v3 = *(void (**)(_QWORD, uint64_t, _QWORD, _QWORD *, _QWORD, _QWORD))(*a1 + 72);
  if (v3)
    v3(*a1, 2, 0, a1 + 2, a1[1], v2[10]);
  CFRelease(v2);
  free(a1);
}

uint64_t HIDDeviceStart(dispatch_queue_t *a1)
{
  CFRetain(a1);
  dispatch_async_f(a1[2], a1, (dispatch_function_t)_HIDDeviceStart);
  return 0;
}

void _HIDDeviceStart(void *context)
{
  if (*((_BYTE *)context + 40))
    IOHIDDeviceRegisterInputReportCallback(*((IOHIDDeviceRef *)context + 4), *((uint8_t **)context + 6), *((_QWORD *)context + 7), (IOHIDReportCallback)_HIDDeviceHandleReport, context);
  *((_BYTE *)context + 64) = 1;
}

uint64_t _HIDDeviceHandleReport(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v11;
  uint64_t (*v12)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, _QWORD);

  v11 = result;
  if (gLogCategory_HIDUtils <= 9)
  {
    if (gLogCategory_HIDUtils != -1
      || (result = _LogCategory_Initialize((uint64_t)&gLogCategory_HIDUtils, 9u), (_DWORD)result))
    {
      result = LogPrintF((uint64_t)&gLogCategory_HIDUtils, (uint64_t)"void _HIDDeviceHandleReport(void *, IOReturn, void *, IOHIDReportType, uint32_t, uint8_t *, CFIndex)", 9u, (uint64_t)"HID report for %#U: %.3H\n", a5, a6, a7, a8, v11 + 136);
    }
  }
  v12 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, _QWORD))(v11 + 72);
  if (v12)
    return v12(v11, 2, a2, a6, a7, *(_QWORD *)(v11 + 80));
  return result;
}

void HIDDeviceStop(dispatch_queue_t *a1)
{
  CFRetain(a1);
  dispatch_async_f(a1[2], a1, (dispatch_function_t)_HIDDeviceStop);
}

uint64_t HIDRegisterDevice(uint64_t *a1)
{
  __CFArray *Mutable;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  pthread_mutex_lock(&gVirtualHIDLock);
  Mutable = (__CFArray *)gVirtualHIDDevices;
  if (gVirtualHIDDevices
    || (Mutable = CFArrayCreateMutable(0, 0, MEMORY[0x1E0C9B378]), (gVirtualHIDDevices = (uint64_t)Mutable) != 0))
  {
    CFArrayAppendValue(Mutable, a1);
    if (gLogCategory_HIDUtils <= 50
      && (gLogCategory_HIDUtils != -1 || _LogCategory_Initialize((uint64_t)&gLogCategory_HIDUtils, 0x32u)))
    {
      LogPrintF((uint64_t)&gLogCategory_HIDUtils, (uint64_t)"OSStatus HIDRegisterDevice(HIDDeviceRef)", 0x32u, (uint64_t)"Registered HID %''@, %#U\n", v3, v4, v5, v6, a1[13]);
    }
    v7 = 0;
  }
  else
  {
    v7 = 4294960568;
  }
  pthread_mutex_unlock(&gVirtualHIDLock);
  return v7;
}

uint64_t HIDDeregisterDevice(uint64_t *a1)
{
  CFIndex Count;
  CFIndex i;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  pthread_mutex_lock(&gVirtualHIDLock);
  if (!gVirtualHIDDevices)
    goto LABEL_12;
  Count = CFArrayGetCount((CFArrayRef)gVirtualHIDDevices);
  if (Count >= 1)
  {
    for (i = 0; i < Count; ++i)
    {
      if (CFArrayGetValueAtIndex((CFArrayRef)gVirtualHIDDevices, i) == a1)
      {
        if (gLogCategory_HIDUtils <= 50
          && (gLogCategory_HIDUtils != -1 || _LogCategory_Initialize((uint64_t)&gLogCategory_HIDUtils, 0x32u)))
        {
          LogPrintF((uint64_t)&gLogCategory_HIDUtils, (uint64_t)"OSStatus HIDDeregisterDevice(HIDDeviceRef)", 0x32u, (uint64_t)"Deregistered HID %''@, %#U\n", v4, v5, v6, v7, a1[13]);
        }
        CFArrayRemoveValueAtIndex((CFMutableArrayRef)gVirtualHIDDevices, i--);
        --Count;
      }
    }
  }
  if (!Count)
  {
LABEL_12:
    if (gVirtualHIDDevices)
    {
      CFRelease((CFTypeRef)gVirtualHIDDevices);
      gVirtualHIDDevices = 0;
    }
  }
  pthread_mutex_unlock(&gVirtualHIDLock);
  return 0;
}

uint64_t HIDPostReport(__CFString *a1, const void *a2, size_t a3)
{
  uint64_t result;
  CFIndex Count;
  CFIndex v8;
  CFIndex v9;
  dispatch_queue_t *ValueAtIndex;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD v16[3];

  v16[2] = *MEMORY[0x1E0C80C00];
  result = CFGetUUIDEx(a1, 0, (uint64_t)v16);
  if (!(_DWORD)result)
  {
    pthread_mutex_lock(&gVirtualHIDLock);
    if (gVirtualHIDDevices && (Count = CFArrayGetCount((CFArrayRef)gVirtualHIDDevices), Count >= 1))
    {
      v8 = Count;
      v9 = 0;
      while (1)
      {
        ValueAtIndex = (dispatch_queue_t *)CFArrayGetValueAtIndex((CFArrayRef)gVirtualHIDDevices, v9);
        if ((dispatch_queue_t)v16[0] == ValueAtIndex[17] && v16[1] == (_QWORD)ValueAtIndex[18])
          break;
        if (v8 == ++v9)
          goto LABEL_10;
      }
      HIDDevicePostReport(ValueAtIndex, a2, a3);
      pthread_mutex_unlock(&gVirtualHIDLock);
      return 0;
    }
    else
    {
LABEL_10:
      pthread_mutex_unlock(&gVirtualHIDLock);
      if (gLogCategory_HIDUtils <= 50
        && (gLogCategory_HIDUtils != -1 || _LogCategory_Initialize((uint64_t)&gLogCategory_HIDUtils, 0x32u)))
      {
        LogPrintF((uint64_t)&gLogCategory_HIDUtils, (uint64_t)"OSStatus HIDPostReport(CFStringRef, const void *, size_t)", 0x32u, (uint64_t)"### Post HID report for %@ not found\n", v12, v13, v14, v15, (uint64_t)a1);
      }
      return 4294960569;
    }
  }
  return result;
}

uint64_t _HTTPClientGetTypeID()
{
  uint64_t result;

  result = _CFRuntimeRegisterClass();
  gHTTPClientTypeID = result;
  return result;
}

void _HTTPClientFinalize(uint64_t a1)
{
  NSObject *v2;
  void *v3;
  void *v4;
  void *v5;
  void (*v6)(_QWORD);
  int v7;
  void *v8;

  v2 = *(NSObject **)(a1 + 16);
  if (v2)
  {
    dispatch_release(v2);
    *(_QWORD *)(a1 + 16) = 0;
  }
  v3 = *(void **)(a1 + 72);
  if (v3)
  {
    free(v3);
    *(_QWORD *)(a1 + 72) = 0;
  }
  v4 = *(void **)(a1 + 128);
  if (v4)
  {
    free(v4);
    *(_QWORD *)(a1 + 128) = 0;
  }
  v5 = *(void **)(a1 + 152);
  if (v5)
  {
    free(v5);
    *(_QWORD *)(a1 + 152) = 0;
  }
  v6 = *(void (**)(_QWORD))(a1 + 472);
  if (v6)
    v6(*(_QWORD *)(a1 + 456));
  v7 = *(_DWORD *)(a1 + 176);
  if ((v7 & 0x80000000) == 0)
  {
    if (close(v7) && *__error())
      __error();
    *(_DWORD *)(a1 + 176) = -1;
  }
  v8 = *(void **)(a1 + 232);
  if (v8)
  {
    free(v8);
    *(_QWORD *)(a1 + 232) = 0;
  }
  HTTPClientAuthorization_Free((_QWORD *)(a1 + 248));
}

uint64_t HTTPClientCreate(uint64_t *a1)
{
  uint64_t Instance;
  uint64_t v3;
  NSObject *v4;
  uint64_t result;

  if (gHTTPClientInitOnce != -1)
    dispatch_once_f(&gHTTPClientInitOnce, 0, (dispatch_function_t)_HTTPClientGetTypeID);
  Instance = _CFRuntimeCreateInstance();
  if (!Instance)
    return 4294960568;
  v3 = Instance;
  bzero((void *)(Instance + 24), 0x210uLL);
  *(_DWORD *)(v3 + 176) = -1;
  v4 = MEMORY[0x1E0C80D38];
  *(_QWORD *)(v3 + 16) = MEMORY[0x1E0C80D38];
  dispatch_retain(v4);
  RandomBytes((void *)(v3 + 160), 4uLL);
  result = 0;
  *(_DWORD *)(v3 + 160) = *(unsigned __int16 *)(v3 + 162) << 16;
  *(_BYTE *)(v3 + 136) = 1;
  *(_QWORD *)(v3 + 96) = &gLogCategory_HTTPClientCore;
  *(_QWORD *)(v3 + 480) = SocketTransportRead;
  *(_QWORD *)(v3 + 488) = SocketTransportWriteV;
  *(_QWORD *)(v3 + 544) = v3 + 536;
  *(_DWORD *)(v3 + 248) = 0;
  *(_BYTE *)(v3 + 252) = 0;
  *(_OWORD *)(v3 + 256) = 0u;
  *(_OWORD *)(v3 + 272) = 0u;
  *(_OWORD *)(v3 + 288) = 0u;
  *(_OWORD *)(v3 + 304) = 0u;
  *(_OWORD *)(v3 + 320) = 0u;
  *(_OWORD *)(v3 + 336) = 0u;
  *(_OWORD *)(v3 + 352) = 0u;
  *(_OWORD *)(v3 + 368) = 0u;
  *(_OWORD *)(v3 + 384) = 0u;
  *(_OWORD *)(v3 + 400) = 0u;
  *(_DWORD *)(v3 + 416) = 0;
  *a1 = v3;
  return result;
}

uint64_t HTTPClientCreateWithSocket(uint64_t *a1, int a2)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;

  v6 = 0;
  result = HTTPClientCreate(&v6);
  if (!(_DWORD)result)
  {
    v5 = v6;
    *(_DWORD *)(v6 + 176) = a2;
    *a1 = v5;
  }
  return result;
}

void HTTPClientInvalidate(dispatch_queue_t *a1)
{
  CFRetain(a1);
  dispatch_async_f(a1[2], a1, (dispatch_function_t)_HTTPClientInvalidate);
}

void _HTTPClientInvalidate(const void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  _HTTPClientErrorHandler((uint64_t)a1, 4294960573, a3, a4, a5, a6, a7, a8);
  CFRelease(a1);
}

void _HTTPClientErrorHandler(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int *v10;
  dispatch_queue_t *v11;
  NSObject *v12;
  NSObject *v13;
  NSObject *v14;
  NSObject *v15;
  const void *v16;
  uint64_t v17;
  uint64_t *v18;
  uint64_t v19;
  void (*v20)(uint64_t);
  void (*v21)(uint64_t, _QWORD);

  if (*(_DWORD *)(a1 + 164) != 9)
  {
    v10 = *(int **)(a1 + 96);
    if (*v10 <= 90)
    {
      if (*v10 != -1)
      {
LABEL_4:
        LogPrintF((uint64_t)v10, (uint64_t)"void _HTTPClientErrorHandler(HTTPClientRef, OSStatus)", 0x5Au, (uint64_t)"### Error: CID 0x%08X, Peer %s, %#m\n", a5, a6, a7, a8, *(unsigned int *)(a1 + 160));
        goto LABEL_6;
      }
      if (_LogCategory_Initialize((uint64_t)v10, 0x5Au))
      {
        v10 = *(int **)(a1 + 96);
        goto LABEL_4;
      }
    }
  }
LABEL_6:
  *(_DWORD *)(a1 + 164) = 9;
  v11 = *(dispatch_queue_t **)(a1 + 168);
  if (v11)
  {
    dispatch_async_f(v11[13], v11, (dispatch_function_t)_AsyncConnection_UserRelease);
    *(_QWORD *)(a1 + 168) = 0;
  }
  v12 = *(NSObject **)(a1 + 184);
  if (v12)
  {
    dispatch_source_cancel(v12);
    if (*(_BYTE *)(a1 + 192))
    {
      dispatch_resume(*(dispatch_object_t *)(a1 + 184));
      *(_BYTE *)(a1 + 192) = 0;
    }
    dispatch_release(*(dispatch_object_t *)(a1 + 184));
    *(_QWORD *)(a1 + 184) = 0;
  }
  v13 = *(NSObject **)(a1 + 200);
  if (v13)
  {
    dispatch_source_cancel(v13);
    if (*(_BYTE *)(a1 + 208))
    {
      dispatch_resume(*(dispatch_object_t *)(a1 + 200));
      *(_BYTE *)(a1 + 208) = 0;
    }
    dispatch_release(*(dispatch_object_t *)(a1 + 200));
    *(_QWORD *)(a1 + 200) = 0;
  }
  v14 = *(NSObject **)(a1 + 216);
  if (v14)
  {
    dispatch_source_cancel(*(dispatch_source_t *)(a1 + 216));
    dispatch_release(v14);
    *(_QWORD *)(a1 + 216) = 0;
  }
  v15 = *(NSObject **)(a1 + 224);
  if (v15)
  {
    dispatch_source_cancel(*(dispatch_source_t *)(a1 + 224));
    dispatch_release(v15);
    *(_QWORD *)(a1 + 224) = 0;
  }
  v16 = *(const void **)(a1 + 424);
  if (v16)
  {
    CFRelease(v16);
    *(_QWORD *)(a1 + 424) = 0;
  }
  v17 = *(_QWORD *)(a1 + 536);
  if (v17)
  {
    v18 = (uint64_t *)(a1 + 536);
    do
    {
      v19 = *(_QWORD *)(v17 + 16);
      *v18 = v19;
      if (!v19)
        *(_QWORD *)(a1 + 544) = v18;
      *(_DWORD *)(v17 + 9648) = a2;
      v20 = *(void (**)(uint64_t))(v17 + 9712);
      if (v20)
        v20(v17);
      CFRelease((CFTypeRef)v17);
      v17 = *v18;
    }
    while (*v18);
  }
  v21 = *(void (**)(uint64_t, _QWORD))(a1 + 40);
  *(_QWORD *)(a1 + 40) = 0;
  if (v21)
    v21(a2, *(_QWORD *)(a1 + 32));
}

uint64_t HTTPClientGetClientID(uint64_t a1)
{
  return *(unsigned int *)(a1 + 160);
}

uint64_t HTTPClientGetPeerAddress(uint64_t a1, sockaddr *a2, socklen_t a3, _QWORD *a4)
{
  uint64_t result;
  socklen_t v6;

  v6 = a3;
  if (getpeername(*(_DWORD *)(a1 + 176), a2, &v6))
  {
    if (!*__error())
      return 4294960596;
    result = *__error();
    if ((_DWORD)result)
      return result;
  }
  result = 0;
  if (a4)
    *a4 = v6;
  return result;
}

uint64_t HTTPClientGetSelfAddress(uint64_t a1, sockaddr *a2, socklen_t a3, _QWORD *a4)
{
  uint64_t result;
  socklen_t v6;

  v6 = a3;
  if (getsockname(*(_DWORD *)(a1 + 176), a2, &v6))
  {
    if (!*__error())
      return 4294960596;
    result = *__error();
    if ((_DWORD)result)
      return result;
  }
  result = 0;
  if (a4)
    *a4 = v6;
  return result;
}

__n128 HTTPClientSetDebugDelegate(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = *a2;
  a1[28].n128_u64[0] = a2[1].n128_u64[0];
  a1[27] = result;
  return result;
}

uint64_t HTTPClientGetDelegateContext(uint64_t a1)
{
  return *(_QWORD *)(a1 + 32);
}

__n128 HTTPClientSetDelegate(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;

  result = *(__n128 *)a2;
  v3 = *(_OWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 32);
  *(__n128 *)(a1 + 32) = result;
  *(_OWORD *)(a1 + 48) = v3;
  return result;
}

uint64_t HTTPClientSetDestination(uint64_t a1, char *__s1, int a3)
{
  char *v5;
  char *v6;
  void *v7;
  uint64_t result;

  v5 = strdup(__s1);
  if (!v5)
    return 4294960568;
  v6 = v5;
  v7 = *(void **)(a1 + 72);
  if (v7)
    free(v7);
  result = 0;
  *(_QWORD *)(a1 + 72) = v6;
  *(_DWORD *)(a1 + 80) = a3;
  return result;
}

void HTTPClientSetDispatchQueue(uint64_t a1, NSObject *a2)
{
  NSObject *v3;
  NSObject *v4;

  if (a2)
    v3 = a2;
  else
    v3 = MEMORY[0x1E0C80D38];
  dispatch_retain(v3);
  v4 = *(NSObject **)(a1 + 16);
  if (v4)
    dispatch_release(v4);
  *(_QWORD *)(a1 + 16) = v3;
}

uint64_t HTTPClientSetFlags(uint64_t result, int a2, int a3)
{
  *(_DWORD *)(result + 84) = *(_DWORD *)(result + 84) & ~a3 | a3 & a2;
  return result;
}

_DWORD *HTTPClientSetKeepAlive(_DWORD *result, int a2, int a3)
{
  result[28] = a2;
  result[29] = a2;
  result[30] = a3;
  return result;
}

_DWORD *HTTPClientSetKeepAliveEx(_DWORD *result, int a2, int a3, int a4)
{
  result[28] = a2;
  result[29] = a3;
  result[30] = a4;
  return result;
}

uint64_t HTTPClientSetConnectionLogging(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 104) = a2;
  return result;
}

uint64_t HTTPClientSetLogging(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 96) = a2;
  return result;
}

uint64_t _HTTPClientSetProperty(uint64_t a1, CFTypeRef cf1, const __CFString *a3)
{
  int v6;
  uint64_t result;
  unint64_t v8;
  CFTypeID v9;
  unint64_t v10;
  void *v11;
  CFTypeID v12;
  void *v13;
  char *v14;

  if (CFEqual(cf1, CFSTR("allowedAuthSchemes")))
  {
    v6 = CFGetInt64(a3, 0);
    result = 0;
    *(_DWORD *)(a1 + 24) = v6;
    return result;
  }
  if (CFEqual(cf1, CFSTR("ipv6DelayNanos")))
  {
    v8 = CFGetInt64(a3, 0);
    result = 0;
    *(_QWORD *)(a1 + 88) = v8;
    return result;
  }
  if (CFEqual(cf1, CFSTR("password")))
  {
    if (!a3)
    {
      v14 = 0;
LABEL_14:
      v11 = *(void **)(a1 + 128);
      if (v11)
        free(v11);
      result = 0;
      *(_QWORD *)(a1 + 128) = v14;
      return result;
    }
    v9 = CFGetTypeID(a3);
    if (v9 == CFStringGetTypeID())
    {
      v14 = 0;
      if (CFStringGetLength(a3) >= 1)
      {
        result = CFStringCopyUTF8CString(a3, &v14);
        if ((_DWORD)result)
          return result;
      }
      goto LABEL_14;
    }
    return 4294960540;
  }
  if (CFEqual(cf1, CFSTR("rfc2617DigestAuth")))
  {
    v10 = CFGetInt64(a3, 0);
    result = 0;
    *(_BYTE *)(a1 + 136) = v10 != 0;
    return result;
  }
  if (!CFEqual(cf1, CFSTR("username")))
    return 4294960582;
  if (a3)
  {
    v12 = CFGetTypeID(a3);
    if (v12 != CFStringGetTypeID())
      return 4294960540;
    v14 = 0;
    if (CFStringGetLength(a3) >= 1)
    {
      result = CFStringCopyUTF8CString(a3, &v14);
      if ((_DWORD)result)
        return result;
    }
  }
  else
  {
    v14 = 0;
  }
  v13 = *(void **)(a1 + 152);
  if (v13)
    free(v13);
  result = 0;
  *(_QWORD *)(a1 + 152) = v14;
  return result;
}

uint64_t HTTPClientSetQoS(uint64_t result, int a2)
{
  *(_DWORD *)(result + 140) = a2;
  return result;
}

uint64_t HTTPClientSetTimeout(uint64_t a1, uint64_t a2)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  *(_DWORD *)(a1 + 144) = a2;
  result = *(unsigned int *)(a1 + 176);
  if ((result & 0x80000000) == 0)
  {
    result = SocketSetTCPTimeout(result, a2);
    if ((_DWORD)result)
    {
      result = *(_QWORD *)(a1 + 96);
      if (*(int *)result <= 60)
      {
        if (*(_DWORD *)result != -1)
          return LogPrintF(result, (uint64_t)"void HTTPClientSetTimeout(HTTPClientRef, int)", 0x3Cu, (uint64_t)"### Set TCP timeout to %d seconds failed: %#m\n", v5, v6, v7, v8, a2);
        result = _LogCategory_Initialize(result, 0x3Cu);
        if ((_DWORD)result)
        {
          result = *(_QWORD *)(a1 + 96);
          return LogPrintF(result, (uint64_t)"void HTTPClientSetTimeout(HTTPClientRef, int)", 0x3Cu, (uint64_t)"### Set TCP timeout to %d seconds failed: %#m\n", v5, v6, v7, v8, a2);
        }
      }
    }
  }
  return result;
}

uint64_t HTTPClientSetTransportDelegate(uint64_t a1, __int128 *a2)
{
  uint64_t v4;
  void (*v5)(_QWORD);
  __int128 v6;
  __int128 v7;
  uint64_t result;
  uint64_t (*v9)(void);

  v4 = a1 + 456;
  v5 = *(void (**)(_QWORD))(a1 + 472);
  if (v5)
    v5(*(_QWORD *)v4);
  v6 = *a2;
  v7 = a2[1];
  *(_QWORD *)(v4 + 32) = *((_QWORD *)a2 + 4);
  *(_OWORD *)v4 = v6;
  *(_OWORD *)(v4 + 16) = v7;
  *(_BYTE *)(a1 + 496) = 1;
  ++*(_DWORD *)(a1 + 500);
  result = *(unsigned int *)(a1 + 176);
  if ((result & 0x80000000) == 0)
  {
    v9 = *(uint64_t (**)(void))(a1 + 464);
    if (v9)
      return v9();
  }
  return result;
}

uint64_t HTTPClientDetach(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int *v9;
  uint64_t result;

  if (a1[63])
    return 4294960575;
  a1[63] = a2;
  a1[64] = a3;
  a1[65] = a4;
  a1[66] = a5;
  v9 = (int *)a1[12];
  if (*v9 > 30)
    return 0;
  if (*v9 != -1)
  {
LABEL_4:
    LogPrintF((uint64_t)v9, (uint64_t)"OSStatus HTTPClientDetach(HTTPClientRef, HTTPClientDetachHandler_f, void *, void *, void *)", 0x1Eu, (uint64_t)"Detaching client for %s\n", a5, a6, a7, a8, a1[9]);
    return 0;
  }
  result = _LogCategory_Initialize((uint64_t)v9, 0x1Eu);
  if ((_DWORD)result)
  {
    v9 = (int *)a1[12];
    goto LABEL_4;
  }
  return result;
}

uint64_t HTTPClientSendBinaryBytes(dispatch_queue_t *a1, char a2, char a3, const void *a4, size_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  CFTypeRef v21;
  CFTypeRef cf;

  cf = 0;
  if (a5 >> 16)
    return 4294960553;
  v20 = HTTPMessageCreate((uint64_t *)&cf);
  v21 = cf;
  if ((_DWORD)v20)
    goto LABEL_3;
  if ((a2 & 1) != 0)
  {
    *((_QWORD *)cf + 1065) = a4;
    *((_QWORD *)v21 + 1066) = a5;
  }
  else
  {
    v20 = HTTPMessageSetBodyLength(cf, a5);
    if ((_DWORD)v20)
    {
LABEL_3:
      if (!v21)
        return v20;
      goto LABEL_13;
    }
    if (a5)
      memmove(*((void **)v21 + 1065), a4, a5);
  }
  *((_BYTE *)v21 + 24) = 36;
  *((_BYTE *)v21 + 25) = a3;
  *((_BYTE *)v21 + 26) = BYTE1(a5);
  *((_BYTE *)v21 + 27) = a5;
  *((_QWORD *)v21 + 1027) = 4;
  if (a6)
  {
    *((_QWORD *)v21 + 1213) = a6;
    *((_QWORD *)v21 + 1209) = a7;
    *((_QWORD *)v21 + 1214) = _HTTPClientSendBinaryCompletion;
  }
  v20 = HTTPClientSendMessage(a1, (uint64_t)v21, v14, v15, v16, v17, v18, v19);
LABEL_13:
  CFRelease(v21);
  return v20;
}

uint64_t _HTTPClientSendBinaryCompletion(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD, _QWORD))(a1 + 9704))(*(unsigned int *)(a1 + 9648), *(_QWORD *)(a1 + 9672));
}

uint64_t HTTPClientSendMessage(dispatch_queue_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v10;
  uint64_t result;
  uint64_t v12;
  char v13;

  if (!*(_QWORD *)(a2 + 8216))
  {
    *(_DWORD *)(a2 + 9624) = 0;
LABEL_9:
    CFRetain((CFTypeRef)a2);
    CFRetain(a1);
    *(_QWORD *)(a2 + 9656) = a1;
    dispatch_async_f(a1[2], (void *)a2, (dispatch_function_t)_HTTPClientSendMessage);
    return 0;
  }
  v10 = a2 + 24;
  if (*(_BYTE *)(a2 + 8512))
    HTTPHeader_SetField((char *)(a2 + 24), "Connection", (uint64_t)"close", a4, a5, a6, a7, a8, v13);
  result = HTTPHeader_Commit(a2 + 24);
  if (!(_DWORD)result)
  {
    *(_QWORD *)(a2 + 9584) = v10;
    *(_QWORD *)(a2 + 9592) = *(_QWORD *)(a2 + 8216);
    *(_DWORD *)(a2 + 9624) = 1;
    v12 = *(_QWORD *)(a2 + 8528);
    if (v12)
    {
      *(_QWORD *)(a2 + 9600) = *(_QWORD *)(a2 + 8520);
      *(_QWORD *)(a2 + 9608) = v12;
      *(_DWORD *)(a2 + 9624) = 2;
    }
    *(_QWORD *)(a2 + 9616) = a2 + 9584;
    goto LABEL_9;
  }
  return result;
}

void _HTTPClientSendMessage(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;

  v8 = *(_QWORD *)(a1 + 9656);
  *(_QWORD *)(a1 + 16) = 0;
  **(_QWORD **)(v8 + 544) = a1;
  *(_QWORD *)(v8 + 544) = a1 + 16;
  _HTTPClientRunStateMachine((char *)v8, a2, a3, a4, a5, a6, a7, a8);
  CFRelease((CFTypeRef)v8);
}

void _HTTPClientRunStateMachine(char *cf, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t *v9;
  uint64_t *v10;
  char *v11;
  int i;
  NSObject *v13;
  uint64_t v14;
  uint64_t v15;
  void (*v16)(uint64_t);
  uint64_t v17;
  int v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  int *v27;
  uint64_t Message;
  uint64_t v29;
  uint64_t v30;
  _BYTE *v31;
  void (*v32)(uint64_t, _QWORD, _QWORD, _QWORD, _QWORD);
  int *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  int *v38;
  uint64_t v39;
  uint64_t v40;
  int *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  void (*v45)(uint64_t, _QWORD, _QWORD, _QWORD, _QWORD);
  int *v46;
  int v47;
  uint64_t v48;
  int *v49;
  uint64_t v50;
  void (*v51)(uint64_t);
  int *v52;
  int *v53;
  NSObject *v54;
  dispatch_source_t v55;
  NSObject *v56;
  dispatch_time_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  dispatch_source_t v62;
  NSObject *v63;
  dispatch_time_t v64;
  int *v65;
  void (*v66)(uint64_t, _QWORD, _QWORD, _QWORD, _QWORD);
  size_t v67;
  int v68;
  void *v69;
  void *v70;
  size_t v71;
  uint64_t v72;
  void *v73;
  uint64_t v74;
  uint64_t v75;
  void (*v76)(uint64_t);
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  int *v83;
  int *v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  void (*v89)(_QWORD, _QWORD, _QWORD, _QWORD);
  void (*v90)(_QWORD, _QWORD, _QWORD, _QWORD);
  void (*v91)(uint64_t, _QWORD);
  void (*v92)(uint64_t, _QWORD);
  NSObject *v93;
  uint64_t v94;
  void *v95;
  uint64_t v96;
  uint64_t v97;
  int *v98;
  int *v99;
  int *v100;
  NSObject *v101;
  uint64_t v102;
  int v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  int v109;
  BOOL v110;
  uint64_t v111;
  unsigned int v112;
  int *v113;
  uint64_t v114;
  uint64_t v115;
  _QWORD *v116;
  uint64_t v117;
  uint64_t v118;
  int v119;
  unsigned int v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  void (*v125)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t);
  char *v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  __int128 v131;
  __int128 v132;
  __int128 v133;
  uint64_t v134;
  uint64_t v135;

  v9 = (uint64_t *)(cf + 536);
  v10 = (uint64_t *)(cf + 424);
  v11 = cf + 248;
  v135 = *MEMORY[0x1E0C80C00];
  v116 = cf + 168;
LABEL_2:
  while (2)
  {
    for (i = *((_DWORD *)cf + 41); ; i = 0)
    {
      if (i != 2)
      {
        switch(i)
        {
          case 0:
            v17 = *v9;
            if (!*v9)
            {
              if (*((_QWORD *)cf + 63))
              {
                v22 = 4294960573;
                goto LABEL_205;
              }
              if ((cf[84] & 0x10) != 0)
              {
                if (*((_QWORD *)cf + 30))
                {
                  v18 = 7;
                  goto LABEL_153;
                }
                if (cf[192])
                {
                  cf[192] = 0;
                  dispatch_resume(*((dispatch_object_t *)cf + 23));
                }
              }
              return;
            }
            if ((*((_DWORD *)cf + 44) & 0x80000000) == 0)
            {
              if (*((_QWORD *)cf + 23))
              {
                v18 = 2;
                goto LABEL_153;
              }
              CFRetain(cf);
              _HTTPClientConnectHandler(*((unsigned int *)cf + 44), 0, (uint64_t)cf, v104, v105, v106, v107, v108);
              return;
            }
            v102 = *(_QWORD *)(v17 + 9632);
            if (v102 == -1)
            {
              v103 = *(_DWORD *)(v17 + 9640);
              if (v103 < 1)
              {
                v109 = *((_DWORD *)cf + 36);
                v110 = v109 < 1;
                v111 = 1000000000 * v109;
                if (v110)
                  v102 = -1;
                else
                  v102 = v111;
              }
              else
              {
                v102 = 1000000000 * v103;
              }
            }
            v112 = *((_DWORD *)cf + 21) & 0xF | (16 * ((*((_DWORD *)cf + 21) >> 5) & 0x1F)) & 0xFFFFE7FF | (((*((_DWORD *)cf + 21) >> 10) & 3) << 11);
            v113 = (int *)*((_QWORD *)cf + 12);
            if (*v113 > 50)
              goto LABEL_224;
            if (*v113 != -1)
              goto LABEL_222;
            if (_LogCategory_Initialize((uint64_t)v113, 0x32u))
            {
              v113 = (int *)*((_QWORD *)cf + 12);
LABEL_222:
              LogPrintF((uint64_t)v113, (uint64_t)"void _HTTPClientRunStateMachine(HTTPClientRef)", 0x32u, (uint64_t)"Connect start: CID 0x%08X, Peer %s, Flags 0x%X, TimeoutNs %llu\n", a5, a6, a7, a8, *((unsigned int *)cf + 40));
            }
LABEL_224:
            v134 = 0;
            v133 = 0u;
            v132 = 0u;
            v131 = 0u;
            v118 = *((_QWORD *)cf + 9);
            v119 = *((_DWORD *)cf + 20);
            v120 = v112;
            v121 = v102;
            v122 = -1;
            v123 = 0;
            v124 = 0;
            v125 = _HTTPClientConnectHandler;
            v126 = cf;
            v114 = *((_QWORD *)cf + 13);
            v127 = *((_QWORD *)cf + 2);
            v128 = v114;
            v129 = *((_QWORD *)cf + 11);
            v130 = 152;
            v29 = AsyncConnection_ConnectEx(v116, (uint64_t)&v118);
            if ((_DWORD)v29)
              goto LABEL_225;
            CFRetain(cf);
            *((_DWORD *)cf + 41) = 1;
            return;
          case 1:
            return;
          case 3:
            v19 = *v9;
            if (!*v9)
              goto LABEL_204;
            v20 = HTTPMessageWriteMessage(*v9, *((uint64_t (**)(uint64_t, uint64_t))cf + 61), *((_QWORD *)cf + 57));
            v21 = _HTTPClientHandleIOError((uint64_t)cf, v20, 0);
            if ((_DWORD)v21 == 35)
              return;
            v22 = v21;
            if ((_DWORD)v21)
              goto LABEL_205;
            LogHTTP(*((_QWORD *)cf + 12), *((int **)cf + 12), (unsigned __int8 *)(v19 + 24), *(_QWORD *)(v19 + 8216), *(_QWORD *)(v19 + 8520), *(_QWORD *)(v19 + 8528), a7, a8);
            v27 = (int *)*((_QWORD *)cf + 12);
            if (*v27 > 50)
              goto LABEL_109;
            if (*v27 != -1)
              goto LABEL_23;
            if (_LogCategory_Initialize((uint64_t)v27, 0x32u))
            {
              v27 = (int *)*((_QWORD *)cf + 12);
LABEL_23:
              LogPrintF((uint64_t)v27, (uint64_t)"void _HTTPClientRunStateMachine(HTTPClientRef)", 0x32u, (uint64_t)"Request written: CID 0x%08X, Header %zu bytes, Body %zu bytes\n", v23, v24, v25, v26, *((unsigned int *)cf + 40));
            }
LABEL_109:
            v66 = (void (*)(uint64_t, _QWORD, _QWORD, _QWORD, _QWORD))*((_QWORD *)cf + 55);
            if (v66)
              v66(v19 + 24, *(_QWORD *)(v19 + 8216), *(_QWORD *)(v19 + 8520), *(_QWORD *)(v19 + 8528), *((_QWORD *)cf + 54));
            v67 = *(_QWORD *)(v19 + 8216);
            if (v67 == 4)
            {
              if (*(_BYTE *)(v19 + 24) == 36)
                v68 = 6;
              else
                v68 = 4;
            }
            else
            {
              v68 = 4;
            }
            *((_DWORD *)cf + 41) = v68;
            if (!*((_DWORD *)cf + 6) || !*((_QWORD *)cf + 19) || !*((_QWORD *)cf + 16))
              goto LABEL_167;
            v69 = *(void **)(v19 + 9560);
            if (v69)
              goto LABEL_122;
            v69 = malloc_type_calloc(1uLL, 0x2120uLL, 0x10500401E8B2D2AuLL);
            *(_QWORD *)(v19 + 9560) = v69;
            if (!v69)
              goto LABEL_231;
            v67 = *(_QWORD *)(v19 + 8216);
LABEL_122:
            memcpy(v69, (const void *)(v19 + 24), v67);
            *(_QWORD *)(*(_QWORD *)(v19 + 9560) + 0x2000) = *(_QWORD *)(v19 + 8216);
            v70 = *(void **)(v19 + 9568);
            if (v70)
            {
              free(v70);
              *(_QWORD *)(v19 + 9568) = 0;
            }
            *(_QWORD *)(v19 + 9576) = 0;
            v71 = *(_QWORD *)(v19 + 8528);
            if (!v71)
              goto LABEL_167;
            v72 = *(_QWORD *)(v19 + 8520);
            if (v72 == *(_QWORD *)(v19 + 9552))
            {
              *(_QWORD *)(v19 + 9568) = v72;
              *(_QWORD *)(v19 + 8520) = 0;
              *(_QWORD *)(v19 + 9552) = 0;
            }
            else
            {
              v73 = malloc_type_malloc(v71, 0xE6DFFD42uLL);
              *(_QWORD *)(v19 + 9568) = v73;
              if (!v73)
              {
LABEL_231:
                v22 = 4294960568;
                goto LABEL_205;
              }
              memcpy(v73, *(const void **)(v19 + 8520), *(_QWORD *)(v19 + 8528));
              v71 = *(_QWORD *)(v19 + 8528);
            }
            *(_QWORD *)(v19 + 9576) = v71;
            goto LABEL_167;
          case 4:
            v19 = *v9;
            if (!*v9)
              goto LABEL_204;
            *(_QWORD *)(v19 + 8224) = *((_QWORD *)cf + 29);
            *(_QWORD *)(v19 + 8232) = *((_QWORD *)cf + 30);
            Message = HTTPMessageReadMessageEx(v19, *((uint64_t (**)(void *, size_t, unint64_t *, uint64_t))cf + 60), *((_QWORD *)cf + 57));
            v29 = _HTTPUpdateExtraData((uint64_t)cf, *(void **)(v19 + 8224), *(_QWORD *)(v19 + 8232));
            if ((_DWORD)v29)
              goto LABEL_225;
            *(_QWORD *)(v19 + 8232) = 0;
            v30 = _HTTPClientHandleIOError((uint64_t)cf, Message, 1);
            if ((_DWORD)v30 == 35)
              return;
            v22 = v30;
            if ((_DWORD)v30)
              goto LABEL_205;
            v31 = (_BYTE *)(v19 + 24);
            LogHTTP(*((_QWORD *)cf + 12), *((int **)cf + 12), (unsigned __int8 *)(v19 + 24), *(_QWORD *)(v19 + 8216), *(_QWORD *)(v19 + 8520), *(_QWORD *)(v19 + 8528), a7, a8);
            v32 = (void (*)(uint64_t, _QWORD, _QWORD, _QWORD, _QWORD))*((_QWORD *)cf + 56);
            if (v32)
              v32(v19 + 24, *(_QWORD *)(v19 + 8216), *(_QWORD *)(v19 + 8520), *(_QWORD *)(v19 + 8528), *((_QWORD *)cf + 54));
            if (*(_QWORD *)(v19 + 8216) == 4 && *v31 == 36)
            {
              v33 = (int *)*((_QWORD *)cf + 12);
              if (*v33 > 50)
                goto LABEL_159;
              if (*v33 == -1)
              {
                if (!_LogCategory_Initialize((uint64_t)v33, 0x32u))
                {
LABEL_159:
                  v89 = (void (*)(_QWORD, _QWORD, _QWORD, _QWORD))*((_QWORD *)cf + 6);
                  if (v89)
                    v89(*(unsigned __int8 *)(v19 + 8480), *(_QWORD *)(v19 + 8520), *(_QWORD *)(v19 + 8528), *((_QWORD *)cf + 4));
LABEL_167:
                  HTTPMessageReset(v19);
                  goto LABEL_2;
                }
                v33 = (int *)*((_QWORD *)cf + 12);
              }
              LogPrintF((uint64_t)v33, (uint64_t)"void _HTTPClientRunStateMachine(HTTPClientRef)", 0x32u, (uint64_t)"Binary received 1: CID 0x%08X, Header %zu bytes, Body %zu bytes\n", a5, a6, a7, a8, *((unsigned int *)cf + 40));
              goto LABEL_159;
            }
            if ((cf[84] & 0x10) != 0)
            {
              v58 = 0;
              v59 = *(_QWORD *)(v19 + 8448);
              while (v59 != v58)
              {
                if (*(unsigned __int8 *)(*(_QWORD *)(v19 + 8440) + v58) != aEvent10[v58])
                  goto LABEL_74;
                if (++v58 == 10)
                  goto LABEL_136;
              }
              if (!aEvent10[v59])
              {
LABEL_136:
                v83 = (int *)*((_QWORD *)cf + 12);
                if (*v83 <= 50)
                {
                  if (*v83 != -1)
                    goto LABEL_138;
                  if (_LogCategory_Initialize((uint64_t)v83, 0x32u))
                  {
                    v83 = (int *)*((_QWORD *)cf + 12);
LABEL_138:
                    LogPrintF((uint64_t)v83, (uint64_t)"void _HTTPClientRunStateMachine(HTTPClientRef)", 0x32u, (uint64_t)"Event received 1: CID 0x%08X, Header %zu bytes, Body %zu bytes\n", a5, a6, a7, a8, *((unsigned int *)cf + 40));
                  }
                }
                v91 = (void (*)(uint64_t, _QWORD))*((_QWORD *)cf + 7);
                if (v91)
                  v91(v19, *((_QWORD *)cf + 4));
                goto LABEL_167;
              }
            }
LABEL_74:
            v52 = (int *)*((_QWORD *)cf + 12);
            if (*v52 > 50)
              goto LABEL_144;
            if (*v52 != -1)
              goto LABEL_76;
            if (_LogCategory_Initialize((uint64_t)v52, 0x32u))
            {
              v52 = (int *)*((_QWORD *)cf + 12);
LABEL_76:
              LogPrintF((uint64_t)v52, (uint64_t)"void _HTTPClientRunStateMachine(HTTPClientRef)", 0x32u, (uint64_t)"Response received: CID 0x%08X, Header %zu bytes, Body %zu bytes, Status %d\n", a5, a6, a7, a8, *((unsigned int *)cf + 40));
            }
LABEL_144:
            if (*(_DWORD *)(v19 + 8456) != 401)
              goto LABEL_152;
            if (!*((_DWORD *)cf + 6))
              goto LABEL_152;
            if (!*((_QWORD *)cf + 19))
              goto LABEL_152;
            if (!*((_QWORD *)cf + 16))
              goto LABEL_152;
            v85 = *(_QWORD *)(v19 + 9560);
            if (!v85)
              goto LABEL_152;
            if (HTTPHeader_Parse(v85))
              goto LABEL_152;
            v87 = *(_QWORD *)(v19 + 9560);
            *(_DWORD *)(v87 + 8476) = -6721;
            *((_DWORD *)cf + 62) = *((_DWORD *)cf + 6);
            *((_QWORD *)cf + 34) = v87;
            *((_QWORD *)cf + 35) = v31;
            cf[252] = cf[136] == 0;
            v88 = *((_QWORD *)cf + 16);
            *((_QWORD *)cf + 32) = *((_QWORD *)cf + 19);
            *((_QWORD *)cf + 33) = v88;
            if (HTTPClientAuthorization_Apply((uint64_t)v11, v86, a3, a4, a5, a6, a7, a8)
              || HTTPHeader_Commit(*(_QWORD *)(v19 + 9560)))
            {
LABEL_152:
              v18 = 6;
              goto LABEL_153;
            }
            memcpy((void *)(v19 + 24), *(const void **)(v19 + 9560), *(_QWORD *)(*(_QWORD *)(v19 + 9560) + 0x2000));
            v94 = *(_QWORD *)(*(_QWORD *)(v19 + 9560) + 0x2000);
            *(_QWORD *)(v19 + 8216) = v94;
            v95 = *(void **)(v19 + 9552);
            if (v95)
            {
              free(v95);
              v94 = *(_QWORD *)(v19 + 8216);
            }
            v96 = *(_QWORD *)(v19 + 9568);
            *(_QWORD *)(v19 + 9552) = v96;
            *(_QWORD *)(v19 + 8520) = v96;
            v97 = *(_QWORD *)(v19 + 9576);
            *(_QWORD *)(v19 + 8528) = v97;
            *(_OWORD *)(v19 + 9568) = 0u;
            *(_QWORD *)(v19 + 9584) = v31;
            *(_QWORD *)(v19 + 9592) = v94;
            *(_DWORD *)(v19 + 9624) = 1;
            if (v97)
            {
              *(_QWORD *)(v19 + 9600) = v96;
              *(_QWORD *)(v19 + 9608) = v97;
              *(_DWORD *)(v19 + 9624) = 2;
            }
            *(_QWORD *)(v19 + 9616) = v19 + 9584;
            *((_DWORD *)cf + 41) = 2;
            break;
          case 5:
            v117 = 0;
            v34 = (*((uint64_t (**)(uint64_t *, uint64_t, uint64_t *, _QWORD))cf + 60))(&v118, 16, &v117, *((_QWORD *)cf + 57));
            v35 = _HTTPClientHandleIOError((uint64_t)cf, v34, 1);
            if ((_DWORD)v35 == 35)
              return;
            v36 = v35;
            v37 = v117;
            if (!v117)
              goto LABEL_104;
            v38 = (int *)*((_QWORD *)cf + 12);
            if (*v38 > 50)
              goto LABEL_104;
            if (*v38 != -1)
              goto LABEL_39;
            if (_LogCategory_Initialize((uint64_t)v38, 0x32u))
            {
              v38 = (int *)*((_QWORD *)cf + 12);
              v37 = v117;
LABEL_39:
              LogPrintF((uint64_t)v38, (uint64_t)"void _HTTPClientRunStateMachine(HTTPClientRef)", 0x32u, (uint64_t)"### Read %zu bytes after connection close\n", a5, a6, a7, a8, v37);
            }
LABEL_104:
            if ((_DWORD)v36 == -6753)
              goto LABEL_129;
            v65 = (int *)*((_QWORD *)cf + 12);
            if (*v65 > 50)
              goto LABEL_129;
            if (*v65 != -1)
              goto LABEL_107;
            if (_LogCategory_Initialize((uint64_t)v65, 0x32u))
            {
              v65 = (int *)*((_QWORD *)cf + 12);
LABEL_107:
              LogPrintF((uint64_t)v65, (uint64_t)"void _HTTPClientRunStateMachine(HTTPClientRef)", 0x32u, (uint64_t)"### Error on wait for close: %#m\n", a5, a6, a7, a8, v36);
            }
LABEL_129:
            v74 = *v9;
            if (!*v9)
              goto LABEL_204;
            v75 = *(_QWORD *)(v74 + 16);
            *v9 = v75;
            if (!v75)
              *((_QWORD *)cf + 68) = v9;
            *(_DWORD *)(v74 + 9648) = 0;
            v76 = *(void (**)(uint64_t))(v74 + 9712);
            if (v76)
              v76(v74);
            CFRelease((CFTypeRef)v74);
            _HTTPClientErrorHandler((uint64_t)cf, 4294960544, v77, v78, v79, v80, v81, v82);
            goto LABEL_175;
          case 6:
            v39 = *v9;
            if (!*v9)
              goto LABEL_204;
            if (*(_BYTE *)(v39 + 8512))
            {
              shutdown(*((_DWORD *)cf + 44), 1);
              v18 = 5;
              goto LABEL_153;
            }
            v50 = *(_QWORD *)(v39 + 16);
            *v9 = v50;
            if (!v50)
              *((_QWORD *)cf + 68) = v9;
            *(_DWORD *)(v39 + 9648) = 0;
            v51 = *(void (**)(uint64_t))(v39 + 9712);
            if (v51)
              v51(v39);
            CFRelease((CFTypeRef)v39);
            goto LABEL_173;
          case 7:
            v40 = (*((_DWORD *)cf + 40) + 1);
            *((_DWORD *)cf + 40) = v40;
            v41 = (int *)*((_QWORD *)cf + 12);
            if (*v41 > 50)
              goto LABEL_82;
            if (*v41 != -1)
              goto LABEL_45;
            if (_LogCategory_Initialize((uint64_t)v41, 0x32u))
            {
              v41 = (int *)*((_QWORD *)cf + 12);
              v40 = *((unsigned int *)cf + 40);
LABEL_45:
              LogPrintF((uint64_t)v41, (uint64_t)"void _HTTPClientRunStateMachine(HTTPClientRef)", 0x32u, (uint64_t)"Event start: CID 0x%08X, Peer %s\n", a5, a6, a7, a8, v40);
            }
LABEL_82:
            v54 = *((_QWORD *)cf + 28);
            if (v54)
            {
              dispatch_source_cancel(*((dispatch_source_t *)cf + 28));
              dispatch_release(v54);
              *((_QWORD *)cf + 28) = 0;
            }
            if (*((int *)cf + 36) < 1)
              goto LABEL_87;
            v55 = dispatch_source_create(MEMORY[0x1E0C80DD0], 0, 0, *((dispatch_queue_t *)cf + 2));
            *((_QWORD *)cf + 28) = v55;
            if (!v55)
              goto LABEL_227;
            CFRetain(cf);
            dispatch_set_context(*((dispatch_object_t *)cf + 28), cf);
            dispatch_source_set_event_handler_f(*((dispatch_source_t *)cf + 28), (dispatch_function_t)_HTTPClientTimerFiredHandler);
            dispatch_source_set_cancel_handler_f(*((dispatch_source_t *)cf + 28), (dispatch_function_t)_HTTPClientTimerCanceledHandler);
            v56 = *((_QWORD *)cf + 28);
            v57 = dispatch_time(0, 1000000000 * *((int *)cf + 36));
            dispatch_source_set_timer(v56, v57, 0xFFFFFFFFFFFFFFFFLL, 0x1DCD6500uLL);
            dispatch_resume(*((dispatch_object_t *)cf + 28));
LABEL_87:
            v18 = 8;
            goto LABEL_153;
          case 8:
            v42 = *v10;
            if (*v10)
              goto LABEL_49;
            v29 = HTTPMessageCreate(v10);
            if ((_DWORD)v29)
              goto LABEL_225;
            v42 = *((_QWORD *)cf + 53);
            *(_DWORD *)(v42 + 9768) = *((_DWORD *)cf + 125);
LABEL_49:
            *(_QWORD *)(v42 + 8224) = *((_QWORD *)cf + 29);
            *(_QWORD *)(v42 + 8232) = *((_QWORD *)cf + 30);
            v43 = HTTPMessageReadMessageEx(v42, *((uint64_t (**)(void *, size_t, unint64_t *, uint64_t))cf + 60), *((_QWORD *)cf + 57));
            v29 = _HTTPUpdateExtraData((uint64_t)cf, *(void **)(v42 + 8224), *(_QWORD *)(v42 + 8232));
            if ((_DWORD)v29)
            {
LABEL_225:
              v22 = v29;
              goto LABEL_205;
            }
            *(_QWORD *)(v42 + 8232) = 0;
            v44 = _HTTPClientHandleIOError((uint64_t)cf, v43, 1);
            if ((_DWORD)v44 == 35)
            {
              if (*(_QWORD *)(v42 + 8216))
                return;
              v100 = (int *)*((_QWORD *)cf + 12);
              if (*v100 <= 40)
              {
                if (*v100 != -1)
                  goto LABEL_200;
                if (_LogCategory_Initialize((uint64_t)v100, 0x28u))
                {
                  v100 = (int *)*((_QWORD *)cf + 12);
LABEL_200:
                  LogPrintF((uint64_t)v100, (uint64_t)"void _HTTPClientRunStateMachine(HTTPClientRef)", 0x28u, (uint64_t)"### Ignoring spurious readability notification\n", a5, a6, a7, a8, v115);
                }
              }
              v101 = *((_QWORD *)cf + 28);
              if (v101)
              {
                dispatch_source_cancel(*((dispatch_source_t *)cf + 28));
                dispatch_release(v101);
                *((_QWORD *)cf + 28) = 0;
              }
              *((_DWORD *)cf + 41) = 0;
              return;
            }
            v22 = v44;
            if ((_DWORD)v44)
              goto LABEL_205;
            LogHTTP(*((_QWORD *)cf + 12), *((int **)cf + 12), (unsigned __int8 *)(v42 + 24), *(_QWORD *)(v42 + 8216), *(_QWORD *)(v42 + 8520), *(_QWORD *)(v42 + 8528), a7, a8);
            v45 = (void (*)(uint64_t, _QWORD, _QWORD, _QWORD, _QWORD))*((_QWORD *)cf + 56);
            if (v45)
              v45(v42 + 24, *(_QWORD *)(v42 + 8216), *(_QWORD *)(v42 + 8520), *(_QWORD *)(v42 + 8528), *((_QWORD *)cf + 54));
            if (*(_QWORD *)(v42 + 8216) == 4 && *(_BYTE *)(v42 + 24) == 36)
            {
              v46 = (int *)*((_QWORD *)cf + 12);
              if (*v46 <= 50)
              {
                if (*v46 != -1)
                  goto LABEL_58;
                if (_LogCategory_Initialize((uint64_t)v46, 0x32u))
                {
                  v46 = (int *)*((_QWORD *)cf + 12);
LABEL_58:
                  LogPrintF((uint64_t)v46, (uint64_t)"void _HTTPClientRunStateMachine(HTTPClientRef)", 0x32u, (uint64_t)"Binary received 2: CID 0x%08X, Header %zu bytes, Body %zu bytes\n", a5, a6, a7, a8, *((unsigned int *)cf + 40));
                }
              }
              v90 = (void (*)(_QWORD, _QWORD, _QWORD, _QWORD))*((_QWORD *)cf + 6);
              if (v90)
                v90(*(unsigned __int8 *)(v42 + 8480), *(_QWORD *)(v42 + 8520), *(_QWORD *)(v42 + 8528), *((_QWORD *)cf + 4));
              goto LABEL_171;
            }
            if ((cf[84] & 0x10) != 0)
            {
              v60 = 0;
              v61 = *(_QWORD *)(v42 + 8448);
              while (v61 != v60)
              {
                if (*(unsigned __int8 *)(*(_QWORD *)(v42 + 8440) + v60) != aEvent10[v60])
                  goto LABEL_78;
                if (++v60 == 10)
                  goto LABEL_140;
              }
              if (aEvent10[v61])
                goto LABEL_78;
LABEL_140:
              v84 = (int *)*((_QWORD *)cf + 12);
              if (*v84 <= 50)
              {
                if (*v84 != -1)
                  goto LABEL_142;
                if (_LogCategory_Initialize((uint64_t)v84, 0x32u))
                {
                  v84 = (int *)*((_QWORD *)cf + 12);
LABEL_142:
                  LogPrintF((uint64_t)v84, (uint64_t)"void _HTTPClientRunStateMachine(HTTPClientRef)", 0x32u, (uint64_t)"Event received 2: CID 0x%08X, Header %zu bytes, Body %zu bytes\n", a5, a6, a7, a8, *((unsigned int *)cf + 40));
                }
              }
              v92 = (void (*)(uint64_t, _QWORD))*((_QWORD *)cf + 7);
              if (v92)
                v92(v42, *((_QWORD *)cf + 4));
              goto LABEL_171;
            }
LABEL_78:
            v53 = (int *)*((_QWORD *)cf + 12);
            if (*v53 > 50)
              goto LABEL_171;
            if (*v53 != -1)
              goto LABEL_80;
            if (_LogCategory_Initialize((uint64_t)v53, 0x32u))
            {
              v53 = (int *)*((_QWORD *)cf + 12);
LABEL_80:
              LogPrintF((uint64_t)v53, (uint64_t)"void _HTTPClientRunStateMachine(HTTPClientRef)", 0x32u, (uint64_t)"Event received 3: CID 0x%08X, Header %zu bytes, Body %zu bytes, ignored\n", a5, a6, a7, a8, *((unsigned int *)cf + 40));
            }
LABEL_171:
            if (*v10)
            {
              CFRelease((CFTypeRef)*v10);
              *v10 = 0;
            }
LABEL_173:
            v93 = *((_QWORD *)cf + 28);
            if (v93)
            {
              dispatch_source_cancel(*((dispatch_source_t *)cf + 28));
              dispatch_release(v93);
              *((_QWORD *)cf + 28) = 0;
            }
LABEL_175:
            *((_DWORD *)cf + 41) = 0;
            goto LABEL_2;
          case 9:
            v98 = (int *)*((_QWORD *)cf + 12);
            if (*v98 > 90)
              goto LABEL_202;
            if (*v98 != -1)
              goto LABEL_193;
            if (_LogCategory_Initialize((uint64_t)v98, 0x5Au))
            {
              v98 = (int *)*((_QWORD *)cf + 12);
LABEL_193:
              LogPrintF((uint64_t)v98, (uint64_t)"void _HTTPClientRunStateMachine(HTTPClientRef)", 0x5Au, (uint64_t)"### Error state: CID 0x%08X\n", a5, a6, a7, a8, *((unsigned int *)cf + 40));
            }
LABEL_202:
            v22 = 4294960587;
            goto LABEL_205;
          default:
            v99 = (int *)*((_QWORD *)cf + 12);
            if (*v99 > 90)
              goto LABEL_204;
            if (*v99 != -1)
              goto LABEL_196;
            if (_LogCategory_Initialize((uint64_t)v99, 0x5Au))
            {
              v99 = (int *)*((_QWORD *)cf + 12);
LABEL_196:
              LogPrintF((uint64_t)v99, (uint64_t)"void _HTTPClientRunStateMachine(HTTPClientRef)", 0x5Au, (uint64_t)"### Bad state: CID 0x%08X, State %d\n", a5, a6, a7, a8, *((unsigned int *)cf + 40));
            }
            goto LABEL_204;
        }
        goto LABEL_2;
      }
      v13 = *((_QWORD *)cf + 28);
      if (v13)
      {
        dispatch_source_cancel(*((dispatch_source_t *)cf + 28));
        dispatch_release(v13);
        *((_QWORD *)cf + 28) = 0;
      }
      v14 = *v9;
      if (!*v9)
      {
LABEL_204:
        v22 = 4294960534;
        goto LABEL_205;
      }
      if (*(_DWORD *)(v14 + 9624))
        break;
      *(_DWORD *)(v14 + 8456) = 200;
      v15 = *(_QWORD *)(v14 + 16);
      *v9 = v15;
      if (!v15)
        *((_QWORD *)cf + 68) = v9;
      *(_DWORD *)(v14 + 9648) = 0;
      v16 = *(void (**)(uint64_t))(v14 + 9712);
      if (v16)
        v16(v14);
      CFRelease((CFTypeRef)v14);
      *((_DWORD *)cf + 41) = 0;
    }
    *(_DWORD *)(v14 + 9768) = *((_DWORD *)cf + 125);
    v47 = *(_DWORD *)(v14 + 9644);
    if (v47 <= 0)
      v47 = *((_DWORD *)cf + 36);
    v48 = (*((_DWORD *)cf + 40) + 1);
    *((_DWORD *)cf + 40) = v48;
    v49 = (int *)*((_QWORD *)cf + 12);
    if (*v49 <= 50)
    {
      if (*v49 != -1)
        goto LABEL_63;
      if (_LogCategory_Initialize((uint64_t)v49, 0x32u))
      {
        v49 = (int *)*((_QWORD *)cf + 12);
        v48 = *((unsigned int *)cf + 40);
LABEL_63:
        LogPrintF((uint64_t)v49, (uint64_t)"void _HTTPClientRunStateMachine(HTTPClientRef)", 0x32u, (uint64_t)"Request start: CID 0x%08X, Peer %s, TimeoutSecs %d\n", a5, a6, a7, a8, v48);
      }
    }
    if (v47 < 1)
    {
LABEL_102:
      v18 = 3;
LABEL_153:
      *((_DWORD *)cf + 41) = v18;
      continue;
    }
    break;
  }
  v62 = dispatch_source_create(MEMORY[0x1E0C80DD0], 0, 0, *((dispatch_queue_t *)cf + 2));
  *((_QWORD *)cf + 28) = v62;
  if (v62)
  {
    CFRetain(cf);
    dispatch_set_context(*((dispatch_object_t *)cf + 28), cf);
    dispatch_source_set_event_handler_f(*((dispatch_source_t *)cf + 28), (dispatch_function_t)_HTTPClientTimerFiredHandler);
    dispatch_source_set_cancel_handler_f(*((dispatch_source_t *)cf + 28), (dispatch_function_t)_HTTPClientTimerCanceledHandler);
    v63 = *((_QWORD *)cf + 28);
    v64 = dispatch_time(0, 1000000000 * v47);
    dispatch_source_set_timer(v63, v64, 0xFFFFFFFFFFFFFFFFLL, 0x1DCD6500uLL);
    dispatch_resume(*((dispatch_object_t *)cf + 28));
    goto LABEL_102;
  }
LABEL_227:
  v22 = 4294960596;
LABEL_205:
  _HTTPClientErrorHandler((uint64_t)cf, v22, a3, a4, a5, a6, a7, a8);
}

void _HTTPClientConnectHandler(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9;
  int v10;
  uint64_t (*v11)(uint64_t, _QWORD);
  int *v12;
  int v13;
  int v14;
  int v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  int *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  int *v27;
  dispatch_source_t v28;
  dispatch_source_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uintptr_t v34;
  int *v35;
  dispatch_source_t v36;
  int *v37;
  int v38;

  v9 = a2;
  v10 = a1;
  if (!(_DWORD)a2)
  {
    if (*(_QWORD *)(a3 + 536))
    {
      v11 = *(uint64_t (**)(uint64_t, _QWORD))(a3 + 464);
      if (v11)
      {
        v9 = v11(a1, *(_QWORD *)(a3 + 456));
        if ((_DWORD)v9)
          goto LABEL_5;
      }
      else if (!*(_BYTE *)(a3 + 496))
      {
        *(_QWORD *)(a3 + 456) = (int)a1;
      }
      v13 = *(_DWORD *)(a3 + 112);
      if (v13 >= 1)
      {
        v14 = *(_DWORD *)(a3 + 120);
        if (v14 >= 1)
          SocketSetKeepAliveEx(v10, v13, *(_DWORD *)(a3 + 116), v14);
      }
      v15 = *(_DWORD *)(a3 + 140);
      if (v15)
        SocketSetQoS(v10, v15);
      v16 = *(_DWORD *)(a3 + 144);
      if (v16 < 1)
        goto LABEL_28;
      if (!SocketSetTCPTimeout(v10, v16))
        goto LABEL_28;
      v21 = *(int **)(a3 + 96);
      if (*v21 > 60)
        goto LABEL_28;
      if (*v21 == -1)
      {
        if (!_LogCategory_Initialize((uint64_t)v21, 0x3Cu))
        {
LABEL_28:
          if ((*(_BYTE *)(a3 + 85) & 0x10) != 0)
          {
            v38 = 1;
            if (setsockopt(v10, 0xFFFF, 4131, &v38, 4u))
            {
              if (*__error())
              {
                v26 = *__error();
                if (!(_DWORD)v26)
                  goto LABEL_38;
              }
              else
              {
                v26 = 4294960596;
              }
              v27 = *(int **)(a3 + 96);
              if (*v27 <= 60)
              {
                if (*v27 == -1)
                {
                  if (!_LogCategory_Initialize((uint64_t)v27, 0x3Cu))
                    goto LABEL_38;
                  v27 = *(int **)(a3 + 96);
                }
                LogPrintF((uint64_t)v27, (uint64_t)"void _HTTPClientConnectHandler(SocketRef, OSStatus, void *)", 0x3Cu, (uint64_t)"### Set SO_NOADDRERR failed: %#m", v22, v23, v24, v25, v26);
              }
            }
          }
LABEL_38:
          v28 = dispatch_source_create(MEMORY[0x1E0C80DB8], v10, 0, *(dispatch_queue_t *)(a3 + 16));
          *(_QWORD *)(a3 + 184) = v28;
          if (!v28)
            goto LABEL_53;
          ++*(_DWORD *)(a3 + 180);
          CFRetain((CFTypeRef)a3);
          dispatch_set_context(*(dispatch_object_t *)(a3 + 184), (void *)a3);
          dispatch_source_set_event_handler_f(*(dispatch_source_t *)(a3 + 184), (dispatch_function_t)_HTTPClientReadHandler);
          dispatch_source_set_cancel_handler_f(*(dispatch_source_t *)(a3 + 184), (dispatch_function_t)_HTTPClientCancelHandler);
          dispatch_resume(*(dispatch_object_t *)(a3 + 184));
          v29 = dispatch_source_create(MEMORY[0x1E0C80DF0], v10, 0, *(dispatch_queue_t *)(a3 + 16));
          *(_QWORD *)(a3 + 200) = v29;
          if (!v29)
          {
LABEL_53:
            v9 = 4294960596;
            goto LABEL_5;
          }
          ++*(_DWORD *)(a3 + 180);
          CFRetain((CFTypeRef)a3);
          dispatch_set_context(*(dispatch_object_t *)(a3 + 200), (void *)a3);
          dispatch_source_set_event_handler_f(*(dispatch_source_t *)(a3 + 200), (dispatch_function_t)_HTTPClientWriteHandler);
          dispatch_source_set_cancel_handler_f(*(dispatch_source_t *)(a3 + 200), (dispatch_function_t)_HTTPClientCancelHandler);
          *(_BYTE *)(a3 + 208) = 1;
          v34 = (*(_DWORD *)(a3 + 84) >> 5) & 0x100 | (((*(_DWORD *)(a3 + 84) >> 14) & 1u) << 15);
          if (!(_DWORD)v34)
            goto LABEL_47;
          v35 = *(int **)(a3 + 96);
          if (*v35 <= 50)
          {
            if (*v35 != -1)
            {
LABEL_43:
              LogPrintF((uint64_t)v35, (uint64_t)"void _HTTPClientConnectHandler(SocketRef, OSStatus, void *)", 0x32u, (uint64_t)"Configure socket events: CID 0x%08X, events 0x%X", v30, v31, v32, v33, *(unsigned int *)(a3 + 160));
              goto LABEL_45;
            }
            if (_LogCategory_Initialize((uint64_t)v35, 0x32u))
            {
              v35 = *(int **)(a3 + 96);
              goto LABEL_43;
            }
          }
LABEL_45:
          v36 = dispatch_source_create(MEMORY[0x1E0C80DC8], v10, v34, *(dispatch_queue_t *)(a3 + 16));
          *(_QWORD *)(a3 + 216) = v36;
          if (v36)
          {
            ++*(_DWORD *)(a3 + 180);
            CFRetain((CFTypeRef)a3);
            dispatch_set_context(*(dispatch_object_t *)(a3 + 216), (void *)a3);
            dispatch_source_set_event_handler_f(*(dispatch_source_t *)(a3 + 216), (dispatch_function_t)_HTTPClientSocketEventsHandler);
            dispatch_source_set_cancel_handler_f(*(dispatch_source_t *)(a3 + 216), (dispatch_function_t)_HTTPClientCancelHandler);
            dispatch_activate(*(dispatch_object_t *)(a3 + 216));
LABEL_47:
            v37 = *(int **)(a3 + 96);
            if (*v37 <= 50)
            {
              if (*v37 == -1)
              {
                if (!_LogCategory_Initialize((uint64_t)v37, 0x32u))
                  goto LABEL_51;
                v37 = *(int **)(a3 + 96);
              }
              LogPrintF((uint64_t)v37, (uint64_t)"void _HTTPClientConnectHandler(SocketRef, OSStatus, void *)", 0x32u, (uint64_t)"Connect success: CID 0x%08X, Peer %s\n", v30, v31, v32, v33, *(unsigned int *)(a3 + 160));
            }
LABEL_51:
            *(_DWORD *)(a3 + 176) = v10;
            *(_DWORD *)(a3 + 164) = 2;
            _HTTPClientRunStateMachine((CFTypeRef)a3);
            goto LABEL_52;
          }
          goto LABEL_53;
        }
        v21 = *(int **)(a3 + 96);
      }
      LogPrintF((uint64_t)v21, (uint64_t)"void _HTTPClientConnectHandler(SocketRef, OSStatus, void *)", 0x3Cu, (uint64_t)"### Set TCP timeout to %d seconds failed: %#m\n", v17, v18, v19, v20, *(unsigned int *)(a3 + 144));
      goto LABEL_28;
    }
    v9 = 4294960572;
  }
LABEL_5:
  v12 = *(int **)(a3 + 96);
  if (*v12 > 90)
    goto LABEL_21;
  if (*v12 != -1)
    goto LABEL_7;
  if (_LogCategory_Initialize((uint64_t)v12, 0x5Au))
  {
    v12 = *(int **)(a3 + 96);
LABEL_7:
    LogPrintF((uint64_t)v12, (uint64_t)"void _HTTPClientConnectHandler(SocketRef, OSStatus, void *)", 0x5Au, (uint64_t)"Connect failed: CID 0x%08X, Peer %s, %#m\n", a5, a6, a7, a8, *(unsigned int *)(a3 + 160));
  }
LABEL_21:
  if ((v10 & 0x80000000) == 0 && !*(_DWORD *)(a3 + 180) && close(v10) && *__error())
    __error();
  _HTTPClientErrorHandler(a3, v9, a3, a4, a5, a6, a7, a8);
LABEL_52:
  CFRelease((CFTypeRef)a3);
}

void _HTTPClientTimerFiredHandler(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  _HTTPClientErrorHandler(a1, 4294960574, a3, a4, a5, a6, a7, a8);
}

uint64_t _HTTPClientHandleIOError(uint64_t a1, uint64_t a2, int a3)
{
  dispatch_object_t *v4;

  if ((int)a2 <= -6767)
  {
    if ((_DWORD)a2 != -6775)
    {
      if ((_DWORD)a2 != -6774)
        return a2;
LABEL_8:
      if (*(_BYTE *)(a1 + 192))
      {
        *(_BYTE *)(a1 + 192) = 0;
        v4 = (dispatch_object_t *)(a1 + 184);
LABEL_14:
        dispatch_resume(*v4);
        return 35;
      }
      return 35;
    }
LABEL_12:
    if (*(_BYTE *)(a1 + 208))
    {
      *(_BYTE *)(a1 + 208) = 0;
      v4 = (dispatch_object_t *)(a1 + 200);
      goto LABEL_14;
    }
    return 35;
  }
  if ((_DWORD)a2 == -6766)
  {
    if (*(_BYTE *)(a1 + 192))
    {
      *(_BYTE *)(a1 + 192) = 0;
      dispatch_resume(*(dispatch_object_t *)(a1 + 184));
    }
    goto LABEL_12;
  }
  if ((_DWORD)a2 == 35)
  {
    if (a3)
      goto LABEL_8;
    goto LABEL_12;
  }
  return a2;
}

uint64_t _HTTPUpdateExtraData(uint64_t a1, void *__src, size_t __len)
{
  void *v6;
  uint64_t result;
  void *v8;

  if (__len)
  {
    v6 = *(void **)(a1 + 232);
    if (*(_QWORD *)(a1 + 240) == __len)
    {
LABEL_5:
      memmove(v6, __src, __len);
      result = 0;
      *(_QWORD *)(a1 + 240) = __len;
      return result;
    }
    v6 = malloc_type_realloc(v6, __len, 0xB11B9485uLL);
    if (v6)
    {
      *(_QWORD *)(a1 + 232) = v6;
      goto LABEL_5;
    }
    return 4294960568;
  }
  else
  {
    v8 = *(void **)(a1 + 232);
    if (v8)
    {
      free(v8);
      *(_QWORD *)(a1 + 232) = 0;
    }
    result = 0;
    *(_QWORD *)(a1 + 240) = 0;
  }
  return result;
}

uint64_t _HTTPClientReadHandler(uint64_t a1)
{
  uint64_t v2;
  int v3;
  NSObject *v4;
  dispatch_time_t v5;

  dispatch_suspend(*(dispatch_object_t *)(a1 + 184));
  *(_BYTE *)(a1 + 192) = 1;
  v2 = *(_QWORD *)(a1 + 536);
  if (v2)
  {
    v3 = *(_DWORD *)(v2 + 9644);
    if (v3 >= 1)
    {
      v4 = *(NSObject **)(a1 + 224);
      if (v4)
      {
        v5 = dispatch_time(0, 1000000000 * v3);
        dispatch_source_set_timer(v4, v5, 0xFFFFFFFFFFFFFFFFLL, 0x1DCD6500uLL);
      }
    }
  }
  if ((*(_BYTE *)(a1 + 84) & 0x10) != 0 && !v2 && !*(_DWORD *)(a1 + 164))
    *(_DWORD *)(a1 + 164) = 7;
  return _HTTPClientRunStateMachine((CFTypeRef)a1);
}

void _HTTPClientCancelHandler(_DWORD *cf)
{
  int v2;
  void (*v3)(uint64_t, _QWORD, _QWORD, _QWORD);
  uint64_t v4;

  v2 = cf[45] - 1;
  cf[45] = v2;
  if (!v2)
  {
    v3 = (void (*)(uint64_t, _QWORD, _QWORD, _QWORD))*((_QWORD *)cf + 63);
    v4 = cf[44];
    if (v3)
    {
      v3(v4, *((_QWORD *)cf + 64), *((_QWORD *)cf + 65), *((_QWORD *)cf + 66));
    }
    else
    {
      if ((v4 & 0x80000000) != 0)
        goto LABEL_5;
      if (close(v4) && *__error())
        __error();
    }
    cf[44] = -1;
  }
LABEL_5:
  CFRelease(cf);
}

uint64_t _HTTPClientWriteHandler(uint64_t a1)
{
  uint64_t v2;
  int v3;
  NSObject *v4;
  dispatch_time_t v5;

  dispatch_suspend(*(dispatch_object_t *)(a1 + 200));
  *(_BYTE *)(a1 + 208) = 1;
  v2 = *(_QWORD *)(a1 + 536);
  if (v2)
  {
    v3 = *(_DWORD *)(v2 + 9644);
    if (v3 >= 1)
    {
      v4 = *(NSObject **)(a1 + 224);
      if (v4)
      {
        v5 = dispatch_time(0, 1000000000 * v3);
        dispatch_source_set_timer(v4, v5, 0xFFFFFFFFFFFFFFFFLL, 0x1DCD6500uLL);
      }
    }
  }
  return _HTTPClientRunStateMachine((CFTypeRef)a1);
}

uint64_t _HTTPClientSocketEventsHandler(_QWORD *a1)
{
  uint64_t result;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uintptr_t data;
  uint64_t (*v8)(_QWORD, _QWORD);

  result = a1[27];
  if (!result)
    return result;
  data = dispatch_source_get_data((dispatch_source_t)result);
  result = a1[12];
  if (*(int *)result <= 50)
  {
    if (*(_DWORD *)result != -1)
    {
LABEL_4:
      result = LogPrintF(result, (uint64_t)"void _HTTPClientSocketEventsHandler(void *)", 0x32u, (uint64_t)"Socket events: raw 0x%llX, flags %#{flags}", v3, v4, v5, v6, data);
      goto LABEL_6;
    }
    result = _LogCategory_Initialize(result, 0x32u);
    if ((_DWORD)result)
    {
      result = a1[12];
      goto LABEL_4;
    }
  }
LABEL_6:
  if ((data >> 4) & 0x800 | (((data >> 8) & 1) << 10))
  {
    v8 = (uint64_t (*)(_QWORD, _QWORD))a1[8];
    if (v8)
      return v8((data >> 4) & 0x800 | (((data >> 8) & 1) << 10), a1[4]);
  }
  return result;
}

uint64_t HTTPClientSendMessageSync(dispatch_queue_t *a1, uint64_t a2)
{
  dispatch_semaphore_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  NSObject *v11;
  uint64_t v12;
  int v13;
  unsigned int v14;
  unsigned int v15;

  v4 = dispatch_semaphore_create(0);
  if (!v4)
    return 4294960568;
  v11 = v4;
  *(_QWORD *)(a2 + 9664) = v4;
  *(_QWORD *)(a2 + 9712) = _HTTPClientSendMessageSyncCompletion;
  v12 = HTTPClientSendMessage(a1, a2, v5, v6, v7, v8, v9, v10);
  if (!(_DWORD)v12)
  {
    dispatch_semaphore_wait(v11, 0xFFFFFFFFFFFFFFFFLL);
    v12 = *(unsigned int *)(a2 + 9648);
    if (!(_DWORD)v12)
    {
      v13 = *(_DWORD *)(a2 + 8456);
      v14 = v13 - 200;
      v15 = v13 + 200000;
      if (v14 >= 0x64)
        v12 = v15;
      else
        v12 = 0;
    }
  }
  dispatch_release(v11);
  return v12;
}

intptr_t _HTTPClientSendMessageSyncCompletion(uint64_t a1)
{
  return dispatch_semaphore_signal(*(dispatch_semaphore_t *)(a1 + 9664));
}

uint64_t _HTTPMessageGetTypeID()
{
  uint64_t result;

  result = _CFRuntimeRegisterClass();
  gHTTPMessageTypeID = result;
  return result;
}

void _HTTPMessageFinalize(_QWORD *a1)
{
  void *v2;
  void *v3;
  const void *v4;
  void *v5;

  HTTPMessageReset((uint64_t)a1);
  v2 = (void *)a1[1195];
  if (v2)
  {
    free(v2);
    a1[1195] = 0;
  }
  v3 = (void *)a1[1196];
  if (v3)
  {
    free(v3);
    a1[1196] = 0;
  }
  a1[1197] = 0;
  v4 = (const void *)a1[1215];
  if (v4)
  {
    _Block_release(v4);
    a1[1215] = 0;
  }
  v5 = (void *)a1[1218];
  if (v5)
  {
    free(v5);
    a1[1218] = 0;
  }
}

int *HTTPMessageReset(uint64_t a1)
{
  uint64_t v2;
  void *v3;
  int v4;
  int *result;

  v2 = a1 + 8504;
  *(_QWORD *)(a1 + 8216) = 0;
  *(_BYTE *)(a1 + 8504) = 0;
  *(_DWORD *)(a1 + 8508) = 0;
  *(_QWORD *)(a1 + 8520) = a1 + 8552;
  *(_QWORD *)(a1 + 8528) = 0;
  *(_QWORD *)(a1 + 8544) = 0;
  v3 = *(void **)(a1 + 9552);
  if (v3)
  {
    free(v3);
    *(_QWORD *)(a1 + 9552) = 0;
  }
  *(_QWORD *)(a1 + 9632) = -1;
  if (*(_BYTE *)(v2 + 1228))
  {
    v4 = *(_DWORD *)(a1 + 9728);
    if ((v4 & 0x80000000) == 0 && close(v4) && *__error())
      __error();
  }
  *(_DWORD *)(a1 + 9728) = -1;
  *(_BYTE *)(v2 + 1228) = 0;
  result = (int *)*(unsigned int *)(a1 + 9752);
  if ((result & 0x80000000) == 0)
  {
    result = (int *)close((int)result);
    if ((_DWORD)result)
    {
      result = __error();
      if (*result)
        result = __error();
    }
    *(_DWORD *)(a1 + 9752) = -1;
  }
  return result;
}

uint64_t HTTPMessageCreate(uint64_t *a1)
{
  uint64_t Instance;
  uint64_t v3;
  uint64_t result;

  if (gHTTPMessageInitOnce != -1)
    dispatch_once_f(&gHTTPMessageInitOnce, 0, (dispatch_function_t)_HTTPMessageGetTypeID);
  Instance = _CFRuntimeCreateInstance();
  if (!Instance)
    return 4294960568;
  v3 = Instance;
  bzero((void *)(Instance + 16), 0x2620uLL);
  *(_DWORD *)(v3 + 9728) = -1;
  *(_DWORD *)(v3 + 9752) = -1;
  *(_QWORD *)(v3 + 8536) = 16000000;
  HTTPMessageReset(v3);
  result = 0;
  *a1 = v3;
  return result;
}

_QWORD *HTTPMessageCopy(uint64_t a1, _DWORD *a2)
{
  int v4;
  _QWORD *v5;
  int v6;
  CFTypeRef cf;

  cf = 0;
  v4 = HTTPMessageCreate((uint64_t *)&cf);
  v5 = cf;
  if (!v4)
  {
    memcpy((char *)cf + 24, (const void *)(a1 + 24), *(_QWORD *)(a1 + 8216));
    v5[1027] = *(_QWORD *)(a1 + 8216);
    v6 = HTTPHeader_Parse((uint64_t)(v5 + 3));
    if (!v6)
    {
      v6 = HTTPMessageSetBodyLength(v5, *(_QWORD *)(a1 + 8528));
      if (!v6)
      {
        memcpy((void *)v5[1065], *(const void **)(a1 + 8520), *(_QWORD *)(a1 + 8528));
        if (!a2)
          return v5;
        goto LABEL_8;
      }
    }
    goto LABEL_6;
  }
  v6 = v4;
  if (cf)
  {
LABEL_6:
    CFRelease(v5);
    v5 = 0;
  }
  if (a2)
LABEL_8:
    *a2 = v6;
  return v5;
}

uint64_t HTTPMessageSetBodyLength(_QWORD *a1, size_t size)
{
  void *v4;
  void *v5;
  uint64_t result;

  v4 = (void *)a1[1194];
  if (v4)
  {
    free(v4);
    a1[1194] = 0;
  }
  if (size <= 0x3E8)
  {
    v5 = a1 + 1069;
LABEL_6:
    result = 0;
    a1[1065] = v5;
    a1[1066] = size;
    return result;
  }
  v5 = malloc_type_malloc(size, 0xB77DEE7BuLL);
  a1[1194] = v5;
  if (v5)
    goto LABEL_6;
  return 4294960568;
}

uint64_t HTTPMessageInitRequest(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  return HTTPHeader_InitRequestV(a1 + 24, a2, a3, a4, (uint64_t)&a9, a6, a7, a8);
}

uint64_t HTTPMessageInitResponse(uint64_t a1, const char *a2, int a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  return HTTPHeader_InitResponseEx(a1 + 24, a2, a3, 0, a4, a6, a7, a8);
}

uint64_t HTTPMessageGetHeaderField(uint64_t a1, char *a2, const char **a3, size_t *a4, const char **a5, _QWORD *a6)
{
  return HTTPGetHeaderField((char *)(a1 + 24), *(_QWORD *)(a1 + 8216), a2, a3, a4, a5, a6, 0);
}

uint64_t HTTPMessageSetHeaderField(uint64_t a1, char *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, char a9)
{
  return HTTPHeader_SetFieldV((char *)(a1 + 24), a2, a3, &a9);
}

uint64_t HTTPMessageSetHeaderField_safe(uint64_t a1, char *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, char a9)
{
  return HTTPHeader_SetFieldV((char *)(a1 + 24), a2, a3, &a9);
}

uint64_t HTTPMessageReadMessageEx(uint64_t a1, uint64_t (*a2)(void *, size_t, unint64_t *, uint64_t), uint64_t a3)
{
  char *v6;
  _BYTE *v7;
  int v8;
  uint64_t result;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  size_t v16;
  int v17;
  int v18;
  size_t v19;
  size_t v20;
  size_t v21;
  size_t v22;
  size_t v23;
  uint64_t v24;
  BOOL v25;
  size_t v26;
  unint64_t v27;
  size_t v28;
  size_t v29;
  size_t v30;
  unint64_t v31;
  size_t v32;
  void *v33;
  void *v34;
  size_t v35;
  int v36;
  int v37;
  size_t v38;
  int v39;
  char *v40;
  char *v41;
  char *v42;
  uint64_t v43;
  int64_t v44;
  char *v45;
  uint64_t v46;
  char *v47;
  int v48;
  uint64_t v49;
  char *v50;
  uint64_t v51;
  size_t v52;
  int v53;
  size_t v54;
  size_t v55;
  size_t v56;
  size_t v57;
  uint64_t v58;
  int v59;
  size_t v60;
  size_t v61;
  unint64_t v62;
  size_t v63;
  unint64_t v64;
  size_t __nbyte;
  int64_t v66;
  char *v67;

  v6 = (char *)(a1 + 24);
  v63 = 0;
  v7 = (_BYTE *)(a1 + 8504);
  if (*(_BYTE *)(a1 + 8504))
    goto LABEL_2;
  result = HTTPReadHeader(a1 + 24, a2, a3);
  if ((_DWORD)result)
    return result;
  *v7 = 1;
  if (*(_QWORD *)(a1 + 9744))
  {
    v36 = *(_DWORD *)(a1 + 9752);
    if ((v36 & 0x80000000) == 0)
    {
      if (close(v36) && *__error())
        __error();
      *(_DWORD *)(a1 + 9752) = -1;
    }
    while (1)
    {
      v37 = open(*(const char **)(a1 + 9744), 1538, 384);
      *(_DWORD *)(a1 + 9752) = v37;
      if ((v37 & 0x80000000) == 0)
        break;
      if (!*__error())
        return 4294960596;
      result = *__error();
      if ((_DWORD)result != 4)
      {
        if ((_DWORD)result)
          return result;
        break;
      }
    }
  }
  v38 = *(_QWORD *)(a1 + 8216);
  if (v38 == -1)
    v38 = strlen(v6);
  v66 = 0;
  v67 = 0;
  LOBYTE(__nbyte) = 0;
  v39 = HTTPGetHeaderField(v6, v38, "Transfer-Encoding", 0, 0, (const char **)&v67, &v66, 0);
  if (v39)
  {
LABEL_115:
    *(_DWORD *)(a1 + 8508) = v39 == 0;
    v52 = *(_QWORD *)(a1 + 8488);
    if ((*(_DWORD *)(a1 + 9752) & 0x80000000) != 0)
    {
      if (v52 > *(_QWORD *)(a1 + 8536))
        return 4294960553;
      v63 = *(_QWORD *)(a1 + 8488);
    }
    else
    {
      *(_QWORD *)(a1 + 9760) = v52;
      if (v52 >= 0x100000)
        v52 = 0x100000;
      v63 = v52;
      *(_QWORD *)(a1 + 8536) = v52;
    }
    result = HTTPMessageSetBodyLength((_QWORD *)a1, v52);
    if (!(_DWORD)result)
      goto LABEL_2;
    return result;
  }
  if (v66 < 1)
    goto LABEL_114;
  v40 = v67;
  v41 = &v67[v66];
  v42 = &v67[v66];
  v43 = MEMORY[0x1E0C80978];
  while (2)
  {
    if (v40 >= v41)
      goto LABEL_85;
    v44 = v42 - v40;
    v45 = v40 + 1;
    while (1)
    {
      v46 = *(v45 - 1);
      if (*(v45 - 1) < 0)
        break;
      if ((*(_DWORD *)(v43 + 4 * v46 + 60) & 0x4000) == 0)
        goto LABEL_84;
LABEL_82:
      v67 = v45++;
      if (!--v44)
      {
        v40 = v42;
        goto LABEL_85;
      }
    }
    if (__maskrune(v46, 0x4000uLL))
      goto LABEL_82;
LABEL_84:
    v40 = v67;
LABEL_85:
    v47 = v40;
    if (v40 < v41)
    {
      v47 = v40;
      do
      {
        LOBYTE(__nbyte) = *v47;
        if (__nbyte == 44 || __nbyte == 59)
          break;
        if ((__nbyte & 0x80) != 0)
        {
          v48 = __maskrune(__nbyte, 0x4000uLL);
          v47 = v67;
          if (v48)
            break;
        }
        else if ((*(_DWORD *)(v43 + 4 * __nbyte + 60) & 0x4000) != 0)
        {
          break;
        }
        v67 = ++v47;
      }
      while (v47 < v41);
    }
    if (strnicmpx((unsigned __int8 *)v40, v47 - v40, "chunked"))
    {
      v40 = v67;
      if (v67 < v41)
      {
        v49 = v42 - v67;
        v50 = v67 + 1;
        while (1)
        {
          v51 = *(v50 - 1);
          if (*(v50 - 1) < 0)
          {
            if (!__maskrune(v51, 0x4000uLL))
            {
LABEL_103:
              v40 = v67;
              break;
            }
          }
          else if ((*(_DWORD *)(v43 + 4 * v51 + 60) & 0x4000) == 0)
          {
            goto LABEL_103;
          }
          v67 = v50++;
          if (!--v49)
          {
            v40 = v42;
            break;
          }
        }
      }
      if (v40 < v41 && *v40 == 59)
      {
        v67 = v40 + 1;
        while (!HTTPParseParameter(v67, v41, 0, 0, 0, 0, (char *)&__nbyte, &v67)
             && __nbyte == 59)
          ;
        v40 = v67;
      }
      if (v40 < v41 && *v40 == 44)
        v67 = ++v40;
      if (v40 >= v41)
      {
LABEL_114:
        v39 = -6727;
        goto LABEL_115;
      }
      continue;
    }
    break;
  }
  *(_DWORD *)(a1 + 8508) = 1;
LABEL_2:
  v8 = *(_DWORD *)(a1 + 8508);
  if (v8)
  {
    v66 = 0;
    v67 = 0;
    __nbyte = 0;
    while (1)
    {
      switch(v8)
      {
        case 1:
          v64 = 0;
          result = HTTPReadLine(v6, (uint64_t (*)(void))a2, a3, &v67, &v66);
          if ((_DWORD)result)
            return result;
          if (SNScanF(v67, v66, "%llx", v10, v11, v12, v13, v14, (int)&v64) != 1)
            return 4294960554;
          v15 = v64;
          if (v64)
          {
            if ((*(_DWORD *)(a1 + 9752) & 0x80000000) != 0)
            {
              v31 = *(_QWORD *)(a1 + 8528);
              v32 = v31 + v64;
              if (v31 + v64 <= v31)
                return 4294960553;
              v33 = (void *)(a1 + 8552);
              if (v32 >= 0x3E9)
              {
                v34 = malloc_type_realloc(*(void **)(a1 + 9552), v32, 0x97B3A75AuLL);
                if (!v34)
                  return 4294960568;
                v33 = v34;
                if (!*(_QWORD *)(a1 + 9552))
                {
                  v35 = *(_QWORD *)(a1 + 8544);
                  if (v35)
                    memmove(v34, *(const void **)(a1 + 8520), v35);
                }
                *(_QWORD *)(a1 + 9552) = v33;
              }
              *(_QWORD *)(a1 + 8520) = v33;
              *(_QWORD *)(a1 + 8528) = v32;
            }
            else
            {
              if (v64 >= 0x100000)
                v16 = 0x100000;
              else
                v16 = v64;
              if (v16 > *(_QWORD *)(a1 + 8536))
              {
                result = HTTPMessageSetBodyLength((_QWORD *)a1, v16);
                if ((_DWORD)result)
                  return result;
                *(_QWORD *)(a1 + 8536) = v16;
              }
              *(_QWORD *)(a1 + 9760) = v15;
            }
            v17 = 2;
          }
          else
          {
            v17 = 4;
          }
LABEL_58:
          *(_DWORD *)(a1 + 8508) = v17;
LABEL_59:
          v8 = *(_DWORD *)(a1 + 8508);
          break;
        case 2:
          v18 = *(_DWORD *)(a1 + 9752);
          v19 = *(_QWORD *)(a1 + 8232);
          if (v18 < 0)
          {
            v26 = *(_QWORD *)(a1 + 8544);
            v27 = *(_QWORD *)(a1 + 8528);
            if (v19)
            {
              v28 = v27 - v26;
              if (v28 >= v19)
                v29 = *(_QWORD *)(a1 + 8232);
              else
                v29 = v28;
              __nbyte = v29;
              memmove((void *)(*(_QWORD *)(a1 + 8520) + v26), *(const void **)(a1 + 8224), v29);
              v30 = __nbyte;
              *(_QWORD *)(a1 + 8224) += __nbyte;
              *(_QWORD *)(a1 + 8232) -= v30;
              v26 = *(_QWORD *)(a1 + 8544) + v30;
              *(_QWORD *)(a1 + 8544) = v26;
              v27 = *(_QWORD *)(a1 + 8528);
            }
            __nbyte = v26;
            if (v27 > v26)
            {
              result = a2((void *)(*(_QWORD *)(a1 + 8520) + v26), v27 - v26, &__nbyte, a3);
              if ((_DWORD)result)
                return result;
              v26 = *(_QWORD *)(a1 + 8544) + __nbyte;
              *(_QWORD *)(a1 + 8544) = v26;
              v27 = *(_QWORD *)(a1 + 8528);
            }
            if (v26 == v27)
              goto LABEL_47;
          }
          else
          {
            v20 = *(_QWORD *)(a1 + 9760);
            if (v19)
            {
              if (!v20)
                goto LABEL_47;
              if (v19 >= v20)
                v21 = *(_QWORD *)(a1 + 9760);
              else
                v21 = *(_QWORD *)(a1 + 8232);
              __nbyte = v21;
              result = FDWriteAll(v18, *(char **)(a1 + 8224), v21);
              if ((_DWORD)result)
                return result;
              v22 = __nbyte;
              *(_QWORD *)(a1 + 8224) += __nbyte;
              *(_QWORD *)(a1 + 8232) -= v22;
              v20 = *(_QWORD *)(a1 + 9760) - v22;
              *(_QWORD *)(a1 + 9760) = v20;
            }
            if (!v20)
              goto LABEL_47;
            if (*(_QWORD *)(a1 + 8536) >= v20)
              v23 = v20;
            else
              v23 = *(_QWORD *)(a1 + 8536);
            __nbyte = v23;
            result = ((uint64_t (*)(_QWORD))a2)(*(_QWORD *)(a1 + 8520));
            if ((_DWORD)result)
              return result;
            result = FDWriteAll(*(_DWORD *)(a1 + 9752), *(char **)(a1 + 8520), __nbyte);
            if ((_DWORD)result)
              return result;
            v24 = *(_QWORD *)(a1 + 9760);
            v25 = v24 == __nbyte;
            *(_QWORD *)(a1 + 9760) = v24 - __nbyte;
            if (v25)
            {
LABEL_47:
              v17 = 3;
              goto LABEL_58;
            }
          }
          goto LABEL_59;
        case 3:
          result = HTTPReadLine(v6, (uint64_t (*)(void))a2, a3, &v67, &v66);
          if ((_DWORD)result)
            return result;
          if (v66)
            return 4294960554;
          *(_DWORD *)(a1 + 8508) = 1;
          goto LABEL_59;
        case 4:
          result = HTTPReadLine(v6, (uint64_t (*)(void))a2, a3, &v67, &v66);
          if ((_DWORD)result)
            return result;
          if (v66)
            goto LABEL_59;
          v17 = 5;
          goto LABEL_58;
        case 5:
          goto LABEL_135;
        default:
          return 4294960587;
      }
    }
  }
  v53 = *(_DWORD *)(a1 + 9752);
  v54 = *(_QWORD *)(a1 + 8232);
  if (v53 < 0)
  {
    if (v54)
    {
      if (v54 >= *(_QWORD *)(a1 + 8528))
        v60 = *(_QWORD *)(a1 + 8528);
      else
        v60 = *(_QWORD *)(a1 + 8232);
      memmove(*(void **)(a1 + 8520), *(const void **)(a1 + 8224), v60);
      *(_QWORD *)(a1 + 8224) += v60;
      *(_QWORD *)(a1 + 8232) -= v60;
      v61 = *(_QWORD *)(a1 + 8544) + v60;
      *(_QWORD *)(a1 + 8544) = v61;
    }
    else
    {
      v61 = *(_QWORD *)(a1 + 8544);
    }
    v63 = v61;
    v62 = *(_QWORD *)(a1 + 8528);
    if (v62 > v61)
    {
      result = a2((void *)(*(_QWORD *)(a1 + 8520) + v61), v62 - v61, &v63, a3);
      if ((_DWORD)result)
        return result;
      v61 = *(_QWORD *)(a1 + 8544) + v63;
      *(_QWORD *)(a1 + 8544) = v61;
      v62 = *(_QWORD *)(a1 + 8528);
    }
    if (v61 == v62)
      return 0;
    else
      return 35;
  }
  else
  {
    v55 = *(_QWORD *)(a1 + 9760);
    if (!v54)
      goto LABEL_127;
    if (!v55)
      goto LABEL_135;
    if (v54 >= v55)
      v56 = *(_QWORD *)(a1 + 9760);
    else
      v56 = *(_QWORD *)(a1 + 8232);
    v63 = v56;
    result = FDWriteAll(v53, *(char **)(a1 + 8224), v56);
    if ((_DWORD)result)
      return result;
    *(_QWORD *)(a1 + 8224) += v56;
    *(_QWORD *)(a1 + 8232) -= v56;
    v55 = *(_QWORD *)(a1 + 9760) - v56;
    *(_QWORD *)(a1 + 9760) = v55;
LABEL_127:
    if (v55)
    {
      if (*(_QWORD *)(a1 + 8536) >= v55)
        v57 = v55;
      else
        v57 = *(_QWORD *)(a1 + 8536);
      v63 = v57;
      result = ((uint64_t (*)(_QWORD))a2)(*(_QWORD *)(a1 + 8520));
      if (!(_DWORD)result)
      {
        result = FDWriteAll(*(_DWORD *)(a1 + 9752), *(char **)(a1 + 8520), v63);
        if (!(_DWORD)result)
        {
          v58 = *(_QWORD *)(a1 + 9760);
          v25 = v58 == v63;
          *(_QWORD *)(a1 + 9760) = v58 - v63;
          if (!v25)
            return 35;
          goto LABEL_135;
        }
      }
    }
    else
    {
LABEL_135:
      v59 = *(_DWORD *)(a1 + 9752);
      if (v59 < 0)
      {
        return 0;
      }
      else
      {
        if (close(v59) && *__error())
          __error();
        result = 0;
        *(_DWORD *)(a1 + 9752) = -1;
      }
    }
  }
  return result;
}

uint64_t HTTPMessageWriteMessage(uint64_t a1, uint64_t (*a2)(uint64_t, uint64_t), uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t result;
  uint64_t v9;
  size_t v10;
  ssize_t v11;

  v6 = a1 + 9616;
  v7 = a1 + 9624;
  result = a2(a1 + 9616, a1 + 9624);
  if ((_DWORD)result)
    return result;
  if ((*(_DWORD *)(a1 + 9728) & 0x80000000) != 0)
    return 0;
  while (2)
  {
    v9 = *(_QWORD *)(a1 + 9736);
    if (v9 < 1)
      return 0;
    if (v9 >= *(_QWORD *)(a1 + 8536))
      v10 = *(_QWORD *)(a1 + 8536);
    else
      v10 = *(_QWORD *)(a1 + 9736);
    while (1)
    {
      v11 = read(*(_DWORD *)(a1 + 9728), *(void **)(a1 + 8520), v10);
      if (v11 > 0)
        break;
      if (!*__error())
        return 4294960596;
      result = *__error();
      if ((_DWORD)result != 4)
      {
        if ((_DWORD)result)
          return result;
        break;
      }
    }
    *(_QWORD *)(a1 + 9736) -= v11;
    *(_QWORD *)(a1 + 9584) = *(_QWORD *)(a1 + 8520);
    *(_QWORD *)(a1 + 9592) = v11;
    *(_DWORD *)(a1 + 9624) = 1;
    *(_QWORD *)(a1 + 9616) = a1 + 9584;
    result = ((uint64_t (*)(uint64_t, uint64_t, uint64_t))a2)(v6, v7, a3);
    if (!(_DWORD)result)
      continue;
    break;
  }
  return result;
}

uint64_t HTTPMessageSetBody(uint64_t a1, uint64_t a2, const void *a3, size_t size)
{
  uint64_t result;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  void *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;

  result = *(unsigned int *)(a1 + 8500);
  if (!(_DWORD)result)
  {
    result = HTTPMessageSetBodyLength((_QWORD *)a1, size);
    if ((_DWORD)result)
    {
      if (!*(_DWORD *)(a1 + 8500))
        *(_DWORD *)(a1 + 8500) = result;
    }
    else
    {
      if (a3)
      {
        v14 = *(void **)(a1 + 8520);
        if (v14 != a3)
          memmove(v14, a3, size);
      }
      HTTPHeader_SetField((char *)(a1 + 24), "Content-Length", (uint64_t)"%zu", v9, v10, v11, v12, v13, size);
      if (a2)
        HTTPHeader_SetField((char *)(a1 + 24), "Content-Type", (uint64_t)"%s", v15, v16, v17, v18, v19, a2);
      return 0;
    }
  }
  return result;
}

uint64_t HTTPMessageSetBodyFileDescriptor(uint64_t a1, int a2, unint64_t a3, uint64_t a4, char a5)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t result;
  off_t v16;
  uint64_t v17;
  size_t v18;
  void *v19;
  void *v20;
  ssize_t v21;
  int v22;
  stat v23;

  memset(&v23, 0, sizeof(v23));
  if (fstat(a2, &v23))
  {
    if (!*__error())
      return 4294960596;
    result = *__error();
    if ((_DWORD)result)
      return result;
  }
  if (a3 || (v23.st_mode & 0xF000) == 0x8000)
  {
    v16 = lseek(a2, a3, (a3 >> 62) & 2);
    if (v16 == -1)
    {
      if (!*__error())
        return 4294960596;
      result = *__error();
      if ((_DWORD)result)
        return result;
      v16 = -1;
    }
  }
  else
  {
    v16 = 0;
  }
  if (a4 >= 0)
    v17 = a4;
  else
    v17 = v23.st_size - v16;
  HTTPHeader_SetField((char *)(a1 + 24), "Content-Length", (uint64_t)"%lld", v10, v11, v12, v13, v14, v17);
  if (v17 >= 0x100000)
    v18 = 0x100000;
  else
    v18 = v17;
  if (v18 > 0x3E8)
  {
    v20 = malloc_type_realloc(*(void **)(a1 + 9552), v18, 0xA0A49243uLL);
    if (!v20)
      return 4294960568;
    v19 = v20;
    *(_QWORD *)(a1 + 9552) = v20;
  }
  else
  {
    v19 = (void *)(a1 + 8552);
  }
  *(_QWORD *)(a1 + 8520) = v19;
  *(_QWORD *)(a1 + 8536) = v18;
  if (v18)
  {
    v21 = read(a2, v19, v18);
    if (v21 > 0)
    {
LABEL_25:
      *(_QWORD *)(a1 + 8528) = v21;
      v17 -= v21;
      goto LABEL_28;
    }
    if (*__error())
    {
      result = *__error();
      if ((_DWORD)result)
        return result;
      goto LABEL_25;
    }
    return 4294960596;
  }
  *(_QWORD *)(a1 + 8528) = 0;
LABEL_28:
  if (*(_BYTE *)(a1 + 9732))
  {
    v22 = *(_DWORD *)(a1 + 9728);
    if ((v22 & 0x80000000) == 0)
    {
      if (close(v22))
      {
        if (*__error())
          __error();
      }
    }
  }
  result = 0;
  *(_DWORD *)(a1 + 9728) = a2;
  *(_BYTE *)(a1 + 9732) = a5;
  *(_QWORD *)(a1 + 9736) = v17;
  return result;
}

uint64_t HTTPMessageSetBodyFilePath(uint64_t a1, char *a2, unint64_t a3, uint64_t a4)
{
  int v8;
  uint64_t v9;

  do
  {
    v8 = open(a2, 0);
    if ((v8 & 0x80000000) == 0)
    {
      v9 = HTTPMessageSetBodyFileDescriptor(a1, v8, a3, a4, 1);
      if ((_DWORD)v9 && close(v8))
      {
        if (*__error())
          __error();
      }
      return v9;
    }
    if (!*__error())
      return 4294960596;
    v9 = *__error();
  }
  while ((_DWORD)v9 == 4);
  if (!(_DWORD)v9)
    return HTTPMessageSetBodyFileDescriptor(a1, v8, a3, a4, 1);
  return v9;
}

void HTTPMessageSetCompletionBlock(uint64_t a1, void *aBlock)
{
  void *v4;
  const void *v5;
  void (*v6)(uint64_t);

  if (aBlock)
    v4 = _Block_copy(aBlock);
  else
    v4 = 0;
  v5 = *(const void **)(a1 + 9720);
  if (v5)
    _Block_release(v5);
  *(_QWORD *)(a1 + 9720) = v4;
  v6 = _HTTPMessageCompletionHandler;
  if (!aBlock)
    v6 = 0;
  *(_QWORD *)(a1 + 9712) = v6;
}

void _HTTPMessageCompletionHandler(uint64_t a1)
{
  void (**v1)(_QWORD, _QWORD);

  v1 = *(void (***)(_QWORD, _QWORD))(a1 + 9720);
  *(_QWORD *)(a1 + 9720) = 0;
  v1[2](v1, a1);
  _Block_release(v1);
}

uint64_t HTTPMessageSetReceiveFilePath(uint64_t a1, char *__s1)
{
  char *v3;
  char *v4;
  void *v5;
  int v6;
  uint64_t result;

  v3 = strdup(__s1);
  if (!v3)
    return 4294960568;
  v4 = v3;
  v5 = *(void **)(a1 + 9744);
  if (v5)
    free(v5);
  *(_QWORD *)(a1 + 9744) = v4;
  v6 = *(_DWORD *)(a1 + 9752);
  if (v6 < 0)
    return 0;
  if (close(v6))
  {
    if (*__error())
      __error();
  }
  result = 0;
  *(_DWORD *)(a1 + 9752) = -1;
  return result;
}

CFMutableDictionaryRef HTTPMessageCreateDictionary(uint64_t a1, char a2, int *a3)
{
  CFMutableDictionaryRef Mutable;
  int v7;
  char *v9;
  uint64_t v10;
  CFStringRef v11;
  CFStringRef v12;
  CFIndex v13;
  const char *v14;
  CFIndex v15;
  const UInt8 *v16;
  char *v17;

  Mutable = CFDictionaryCreateMutable(0, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  if (Mutable)
  {
    if ((a2 & 2) != 0)
    {
      v15 = 0;
      v16 = 0;
      v13 = 0;
      v14 = 0;
      v9 = (char *)(a1 + 24);
      v17 = (char *)(a1 + 24);
      v10 = a1 + 24 + *(_QWORD *)(a1 + 8216);
      while (!HTTPGetHeaderField(v9, v10 - (_QWORD)v9, 0, (const char **)&v16, (size_t *)&v15, &v14, &v13, &v17))
      {
        v11 = CFStringCreateWithBytes(0, v16, v15, 0x8000100u, 0);
        if (!v11)
        {
          CFRelease(Mutable);
          Mutable = 0;
          v7 = -6742;
          goto LABEL_4;
        }
        v12 = v11;
        CFDictionarySetCString(Mutable, v11, v14, v13);
        CFRelease(v12);
        v9 = v17;
      }
    }
    v7 = 0;
  }
  else
  {
    v7 = -6728;
  }
LABEL_4:
  if (a3)
    *a3 = v7;
  return Mutable;
}

uint64_t HTTPMessageGetOrCopyFormVariable(unint64_t *a1, unsigned __int8 *a2, _QWORD *a3, _QWORD *a4, char **a5)
{
  uint64_t result;

  result = URLGetOrCopyVariable(a1[1045], (_BYTE *)(a1[1045] + a1[1046]), a2, a3, a4, a5, 0);
  if ((_DWORD)result)
    return URLGetOrCopyVariable(a1[1065], (_BYTE *)(a1[1065] + a1[1066]), a2, a3, a4, a5, 0);
  return result;
}

uint64_t _HTTPServerGetTypeID()
{
  uint64_t result;

  result = _CFRuntimeRegisterClass();
  gHTTPServerTypeID = result;
  return result;
}

void _HTTPServerFinalize(_QWORD *a1)
{
  void (*v2)(_QWORD *, _QWORD);
  NSObject *v3;
  void *v4;
  void *v5;

  v2 = (void (*)(_QWORD *, _QWORD))a1[17];
  if (v2)
    v2(a1, a1[15]);
  v3 = a1[2];
  if (v3)
  {
    dispatch_release(v3);
    a1[2] = 0;
  }
  v4 = (void *)a1[10];
  if (v4)
  {
    free(v4);
    a1[10] = 0;
  }
  v5 = (void *)a1[11];
  if (v5)
  {
    free(v5);
    a1[11] = 0;
  }
}

uint64_t HTTPServerCreate(_QWORD *a1, _OWORD *a2)
{
  _OWORD *Instance;
  _OWORD *v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  uint64_t (*v11)(_OWORD *, _QWORD);
  uint64_t v12;
  uint64_t v13;

  if (gHTTPServerInitOnce != -1)
    dispatch_once_f(&gHTTPServerInitOnce, 0, (dispatch_function_t)_HTTPServerGetTypeID);
  Instance = (_OWORD *)_CFRuntimeCreateInstance();
  if (!Instance)
    return 4294960568;
  v5 = Instance;
  Instance[14] = 0u;
  Instance[15] = 0u;
  Instance[12] = 0u;
  Instance[13] = 0u;
  Instance[10] = 0u;
  Instance[11] = 0u;
  Instance[8] = 0u;
  Instance[9] = 0u;
  Instance[6] = 0u;
  Instance[7] = 0u;
  Instance[4] = 0u;
  Instance[5] = 0u;
  Instance[2] = 0u;
  Instance[3] = 0u;
  Instance[1] = 0u;
  HTTPServerSetDispatchQueue((uint64_t)Instance, 0);
  *((_QWORD *)v5 + 3) = &gLogCategory_HTTPServerCore;
  v7 = a2[1];
  v6 = a2[2];
  *(_OWORD *)((char *)v5 + 120) = *a2;
  *(_OWORD *)((char *)v5 + 152) = v6;
  *(_OWORD *)((char *)v5 + 136) = v7;
  v8 = a2[3];
  v9 = a2[4];
  v10 = a2[5];
  *(_OWORD *)((char *)v5 + 216) = a2[6];
  *(_OWORD *)((char *)v5 + 200) = v10;
  *(_OWORD *)((char *)v5 + 184) = v9;
  *(_OWORD *)((char *)v5 + 168) = v8;
  v11 = (uint64_t (*)(_OWORD *, _QWORD))*((_QWORD *)v5 + 16);
  if (v11 && (v12 = v11(v5, *((_QWORD *)v5 + 15)), (_DWORD)v12))
  {
    v13 = v12;
    CFRelease(v5);
  }
  else
  {
    v13 = 0;
    *a1 = v5;
  }
  return v13;
}

void HTTPServerSetDispatchQueue(uint64_t a1, NSObject *a2)
{
  NSObject *v3;
  NSObject *v4;

  if (a2)
    v3 = a2;
  else
    v3 = MEMORY[0x1E0C80D38];
  dispatch_retain(v3);
  v4 = *(NSObject **)(a1 + 16);
  if (v4)
    dispatch_release(v4);
  *(_QWORD *)(a1 + 16) = v3;
}

uint64_t HTTPServerSetLogging(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 24) = a2;
  return result;
}

uint64_t _HTTPServerControl(uint64_t a1, uint64_t a2, CFTypeRef cf1, uint64_t a4, uint64_t a5)
{
  uint64_t v10;
  uint64_t v11;
  int v13;
  _DWORD *v14;
  _DWORD *v15;
  dispatch_source_t v16;
  NSObject *v17;
  int v18;
  _DWORD *v19;
  dispatch_source_t v20;
  NSObject *v21;
  uint64_t (*v22)(uint64_t, _QWORD, const __CFString *, _QWORD, _QWORD, _QWORD);
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  int *v27;
  uint64_t (*v28)(uint64_t, uint64_t, CFTypeRef, uint64_t, uint64_t, _QWORD);
  __int128 v29;

  if (CFEqual(cf1, CFSTR("startServer")))
  {
    *(_QWORD *)((char *)&v29 + 4) = -1;
    if (*(_BYTE *)(a1 + 240))
    {
      LODWORD(v29) = 16777343;
      v10 = ServerSocketOpenEx2(2, 1, 6, &v29, 0, *(_DWORD *)(a1 + 236), (unsigned int *)(a1 + 48), -1, 0, (int *)&v29 + 2);
    }
    else
    {
      v10 = ServerSocketPairOpen(1, 6, *(_DWORD *)(a1 + 236), (int *)(a1 + 48), -1, (int *)&v29 + 2, (int *)&v29 + 1);
    }
    v11 = v10;
    if ((_DWORD)v10)
      goto LABEL_8;
    v13 = DWORD2(v29);
    if ((DWORD2(v29) & 0x80000000) == 0)
    {
      if (*(_DWORD *)(a1 + 232))
        SocketSetP2P(SDWORD2(v29), 1);
      v14 = malloc_type_calloc(1uLL, 0x18uLL, 0x102004093CA8EA1uLL);
      if (!v14)
        goto LABEL_42;
      v15 = v14;
      v16 = dispatch_source_create(MEMORY[0x1E0C80DB8], v13, 0, *(dispatch_queue_t *)(a1 + 16));
      if (!v16)
        goto LABEL_38;
      v17 = v16;
      CFRetain((CFTypeRef)a1);
      *(_QWORD *)v15 = v17;
      v15[2] = v13;
      *((_QWORD *)v15 + 2) = a1;
      *(_QWORD *)(a1 + 32) = v15;
      dispatch_set_context(v17, v15);
      dispatch_source_set_event_handler_f(v17, (dispatch_function_t)_HTTPServerAcceptConnection);
      dispatch_source_set_cancel_handler_f(v17, (dispatch_function_t)_HTTPServerListenerCanceled);
      dispatch_resume(v17);
      DWORD2(v29) = -1;
    }
    v18 = DWORD1(v29);
    if ((DWORD1(v29) & 0x80000000) != 0)
    {
LABEL_31:
      v22 = *(uint64_t (**)(uint64_t, _QWORD, const __CFString *, _QWORD, _QWORD, _QWORD))(a1 + 144);
      if (v22)
      {
        v11 = v22(a1, 0, CFSTR("startServer"), 0, 0, *(_QWORD *)(a1 + 120));
        if ((_DWORD)v11)
          goto LABEL_8;
      }
      CFRetain((CFTypeRef)a1);
      *(_BYTE *)(a1 + 64) = 1;
      v27 = *(int **)(a1 + 24);
      if (*v27 > 40)
        goto LABEL_41;
      if (*v27 == -1)
      {
        if (!_LogCategory_Initialize((uint64_t)v27, 0x28u))
          goto LABEL_41;
        v27 = *(int **)(a1 + 24);
      }
      LogPrintF((uint64_t)v27, (uint64_t)"OSStatus _HTTPServerStart(HTTPServerRef)", 0x28u, (uint64_t)"Listening on port %d\n", v23, v24, v25, v26, *(unsigned int *)(a1 + 48));
LABEL_41:
      v11 = 0;
      goto LABEL_8;
    }
    if (*(_DWORD *)(a1 + 232))
      SocketSetP2P(SDWORD1(v29), 1);
    v19 = malloc_type_calloc(1uLL, 0x18uLL, 0x102004093CA8EA1uLL);
    if (v19)
    {
      v15 = v19;
      v20 = dispatch_source_create(MEMORY[0x1E0C80DB8], v18, 0, *(dispatch_queue_t *)(a1 + 16));
      if (v20)
      {
        v21 = v20;
        CFRetain((CFTypeRef)a1);
        *(_QWORD *)v15 = v21;
        v15[2] = v18;
        *((_QWORD *)v15 + 2) = a1;
        *(_QWORD *)(a1 + 40) = v15;
        dispatch_set_context(v21, v15);
        dispatch_source_set_event_handler_f(v21, (dispatch_function_t)_HTTPServerAcceptConnection);
        dispatch_source_set_cancel_handler_f(v21, (dispatch_function_t)_HTTPServerListenerCanceled);
        dispatch_resume(v21);
        DWORD1(v29) = -1;
        goto LABEL_31;
      }
LABEL_38:
      free(v15);
      v11 = 4294960596;
      goto LABEL_8;
    }
LABEL_42:
    v11 = 4294960568;
LABEL_8:
    if ((DWORD2(v29) & 0x80000000) == 0 && close(SDWORD2(v29)) && *__error())
      __error();
    if ((DWORD1(v29) & 0x80000000) == 0 && close(SDWORD1(v29)) && *__error())
      __error();
    if ((_DWORD)v11)
      _HTTPServerStop((CFTypeRef)a1);
    return v11;
  }
  if (CFEqual(cf1, CFSTR("stopServer")))
  {
    _HTTPServerStop((CFTypeRef)a1);
    return 0;
  }
  v28 = *(uint64_t (**)(uint64_t, uint64_t, CFTypeRef, uint64_t, uint64_t, _QWORD))(a1 + 144);
  if (!v28)
    return 4294960582;
  return v28(a1, a2, cf1, a4, a5, *(_QWORD *)(a1 + 120));
}

void _HTTPServerAcceptConnection(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9;
  int *v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  int *v20;
  int *v21;
  uint64_t v22;
  _QWORD v23[2];
  __int128 v24;
  uint64_t v25;
  _BYTE v26[32];
  uint64_t v27;

  v9 = *(_QWORD *)(a1 + 16);
  v22 = 0;
  v10 = *(int **)(v9 + 24);
  if (*v10 <= 30)
  {
    if (*v10 != -1)
    {
LABEL_3:
      LogPrintF((uint64_t)v10, (uint64_t)"void _HTTPServerAcceptConnection(void *)", 0x1Eu, (uint64_t)"Accepting connection: socket=%d", a5, a6, a7, a8, *(unsigned int *)(a1 + 8));
      goto LABEL_5;
    }
    if (_LogCategory_Initialize((uint64_t)v10, 0x1Eu))
    {
      v10 = *(int **)(v9 + 24);
      goto LABEL_3;
    }
  }
LABEL_5:
  v11 = accept(*(_DWORD *)(a1 + 8), 0, 0);
  if (v11 < 0)
  {
    if (!*__error())
    {
      v18 = 4294960596;
      goto LABEL_19;
    }
    v18 = *__error();
    if ((_DWORD)v18)
      goto LABEL_19;
  }
  *(_OWORD *)&v26[16] = 0u;
  *(_OWORD *)v26 = 0u;
  v12 = *(_QWORD *)(v9 + 120);
  v23[0] = *(_QWORD *)(v9 + 176);
  v23[1] = v12;
  v24 = *(_OWORD *)(v9 + 184);
  v25 = *(_QWORD *)(v9 + 200);
  *(_OWORD *)&v26[8] = *(_OWORD *)(v9 + 208);
  *(_QWORD *)&v26[24] = *(_QWORD *)(v9 + 224);
  v27 = 0;
  v13 = HTTPConnectionCreate(&v22, (uint64_t)v23, v11, (_QWORD *)v9);
  if (!(_DWORD)v13)
  {
    v19 = v22;
    *(_QWORD *)(v22 + 112) = _HTTPServerCloseConnection;
    HTTPConnectionSetDispatchQueue(v19, *(NSObject **)(v9 + 16));
    *(_QWORD *)(v19 + 16) = *(_QWORD *)(v9 + 56);
    *(_QWORD *)(v9 + 56) = v19;
    v18 = HTTPConnectionStart(v19);
    if ((_DWORD)v18)
      goto LABEL_19;
    v20 = *(int **)(v9 + 24);
    if (*v20 <= 30)
    {
      if (*v20 == -1)
      {
        if (!_LogCategory_Initialize((uint64_t)v20, 0x1Eu))
          goto LABEL_27;
        v20 = *(int **)(v9 + 24);
      }
      LogPrintF((uint64_t)v20, (uint64_t)"void _HTTPServerAcceptConnection(void *)", 0x1Eu, (uint64_t)"Accepted connection from %##a to %##a\n", v14, v15, v16, v17, v19 + 256);
    }
LABEL_27:
    _HTTPServerUpdateTimeoutTimer(v9);
    return;
  }
  v18 = v13;
  if ((v11 & 0x80000000) == 0 && close(v11) && *__error())
    __error();
LABEL_19:
  if (v22)
    _HTTPServerCloseConnection(v22);
  v21 = *(int **)(v9 + 24);
  if (*v21 <= 60)
  {
    if (*v21 != -1)
    {
LABEL_23:
      LogPrintF((uint64_t)v21, (uint64_t)"void _HTTPServerAcceptConnection(void *)", 0x3Cu, (uint64_t)"### Accept connection failed: %#m\n", v14, v15, v16, v17, v18);
      return;
    }
    if (_LogCategory_Initialize((uint64_t)v21, 0x3Cu))
    {
      v21 = *(int **)(v9 + 24);
      goto LABEL_23;
    }
  }
}

void _HTTPServerListenerCanceled(uint64_t a1)
{
  int v2;

  v2 = *(_DWORD *)(a1 + 8);
  if ((v2 & 0x80000000) == 0)
  {
    if (close(v2) && *__error())
      __error();
    *(_DWORD *)(a1 + 8) = -1;
  }
  CFRelease(*(CFTypeRef *)(a1 + 16));
  free((void *)a1);
}

void _HTTPServerStop(CFTypeRef cf)
{
  NSObject *v2;
  dispatch_source_t *v3;
  NSObject *v4;
  dispatch_source_t *v5;
  NSObject *v6;
  uint64_t v7;
  void (*v8)(CFTypeRef, _QWORD, const __CFString *, _QWORD, _QWORD, _QWORD);

  v2 = *((_QWORD *)cf + 9);
  if (v2)
  {
    dispatch_source_cancel(*((dispatch_source_t *)cf + 9));
    dispatch_release(v2);
    *((_QWORD *)cf + 9) = 0;
  }
  v3 = (dispatch_source_t *)*((_QWORD *)cf + 4);
  if (v3)
  {
    v4 = *v3;
    if (*v3)
    {
      dispatch_source_cancel(*v3);
      dispatch_release(v4);
      **((_QWORD **)cf + 4) = 0;
    }
    *((_QWORD *)cf + 4) = 0;
  }
  v5 = (dispatch_source_t *)*((_QWORD *)cf + 5);
  if (v5)
  {
    v6 = *v5;
    if (*v5)
    {
      dispatch_source_cancel(*v5);
      dispatch_release(v6);
      **((_QWORD **)cf + 5) = 0;
    }
    *((_QWORD *)cf + 5) = 0;
  }
  while (1)
  {
    v7 = *((_QWORD *)cf + 7);
    if (!v7)
      break;
    _HTTPServerCloseConnection(v7);
  }
  if (*((_BYTE *)cf + 64))
  {
    v8 = (void (*)(CFTypeRef, _QWORD, const __CFString *, _QWORD, _QWORD, _QWORD))*((_QWORD *)cf + 18);
    if (v8)
      v8(cf, 0, CFSTR("stopServer"), 0, 0, *((_QWORD *)cf + 15));
    *((_BYTE *)cf + 64) = 0;
    CFRelease(cf);
  }
}

void _HTTPServerCloseConnection(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int *v10;

  v2 = *(_QWORD *)(a1 + 24);
  v4 = (_QWORD *)(v2 + 56);
  v3 = *(_QWORD *)(v2 + 56);
  if (v3)
  {
    if (v3 == a1)
    {
LABEL_6:
      *v4 = *(_QWORD *)(a1 + 16);
    }
    else
    {
      while (1)
      {
        v5 = v3;
        v3 = *(_QWORD *)(v3 + 16);
        if (!v3)
          break;
        if (v3 == a1)
        {
          v4 = (_QWORD *)(v5 + 16);
          goto LABEL_6;
        }
      }
    }
  }
  HTTPConnectionStop(a1);
  if (*(_BYTE *)(a1 + 229))
  {
    if (!*(_QWORD *)(a1 + 376))
    {
      v10 = *(int **)(v2 + 24);
      if (*v10 <= 30)
      {
        if (*v10 == -1)
        {
          if (!_LogCategory_Initialize((uint64_t)v10, 0x1Eu))
            goto LABEL_13;
          v10 = *(int **)(v2 + 24);
        }
        LogPrintF((uint64_t)v10, (uint64_t)"void _HTTPServerCloseConnection(HTTPConnectionRef, void *)", 0x1Eu, (uint64_t)"Closing  connection from %##a to %##a\n", v6, v7, v8, v9, a1 + 256);
      }
    }
  }
LABEL_13:
  _HTTPServerUpdateTimeoutTimer(v2);
  CFRelease((CFTypeRef)a1);
}

void HTTPConnectionStop(uint64_t a1)
{
  NSObject *v2;
  _BOOL4 v3;
  NSObject *v4;
  void (*v5)(uint64_t, _QWORD);

  v2 = *(NSObject **)(a1 + 200);
  if (v2)
    v3 = *(_QWORD *)(a1 + 216) != 0;
  else
    v3 = 0;
  if ((*(_DWORD *)(a1 + 136) & 0x80000000) != 0 || *(_QWORD *)(a1 + 376))
  {
    if (!v2)
      goto LABEL_10;
  }
  else
  {
    shutdown(*(_DWORD *)(a1 + 136), 1);
    v2 = *(NSObject **)(a1 + 200);
    if (!v2)
      goto LABEL_10;
  }
  dispatch_source_cancel(v2);
  if (*(_BYTE *)(a1 + 208))
  {
    dispatch_resume(*(dispatch_object_t *)(a1 + 200));
    *(_BYTE *)(a1 + 208) = 0;
  }
  dispatch_release(*(dispatch_object_t *)(a1 + 200));
  *(_QWORD *)(a1 + 200) = 0;
LABEL_10:
  v4 = *(NSObject **)(a1 + 216);
  if (v4)
  {
    dispatch_source_cancel(v4);
    if (*(_BYTE *)(a1 + 224))
    {
      dispatch_resume(*(dispatch_object_t *)(a1 + 216));
      *(_BYTE *)(a1 + 224) = 0;
    }
    dispatch_release(*(dispatch_object_t *)(a1 + 216));
    *(_QWORD *)(a1 + 216) = 0;
  }
  if (v3)
  {
    v5 = *(void (**)(uint64_t, _QWORD))(a1 + 72);
    if (v5)
      v5(a1, *(_QWORD *)(a1 + 40));
  }
}

void _HTTPServerUpdateTimeoutTimer(uint64_t a1)
{
  dispatch_source_t v2;
  unsigned int v3;
  NSObject *v4;
  dispatch_time_t v5;
  NSObject *v6;

  if (*(_DWORD *)(a1 + 244) && *(_QWORD *)(a1 + 56))
  {
    if (!*(_QWORD *)(a1 + 72))
    {
      v2 = dispatch_source_create(MEMORY[0x1E0C80DD0], 0, 0, *(dispatch_queue_t *)(a1 + 16));
      *(_QWORD *)(a1 + 72) = v2;
      if (v2)
      {
        CFRetain((CFTypeRef)a1);
        dispatch_set_context(*(dispatch_object_t *)(a1 + 72), (void *)a1);
        dispatch_source_set_event_handler_f(*(dispatch_source_t *)(a1 + 72), (dispatch_function_t)_HTTPServerTimeoutHandler);
        dispatch_source_set_cancel_handler_f(*(dispatch_source_t *)(a1 + 72), (dispatch_function_t)_HTTPServerTimeoutCanceled);
        v3 = *(_DWORD *)(a1 + 244);
        v4 = *(NSObject **)(a1 + 72);
        v5 = dispatch_time(0, 1000000000 * v3);
        dispatch_source_set_timer(v4, v5, 1000000000 * v3, 250000000 * v3);
        dispatch_resume(*(dispatch_object_t *)(a1 + 72));
      }
    }
  }
  else
  {
    v6 = *(NSObject **)(a1 + 72);
    if (v6)
    {
      dispatch_source_cancel(*(dispatch_source_t *)(a1 + 72));
      dispatch_release(v6);
      *(_QWORD *)(a1 + 72) = 0;
    }
  }
}

uint64_t _HTTPServerTimeoutHandler(_QWORD *a1)
{
  uint64_t result;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int *v10;

  result = mach_absolute_time();
  v7 = a1[7];
  if (v7)
  {
    v8 = result;
    while (1)
    {
      v9 = *(_QWORD *)(v7 + 16);
      if (v8 - *(_QWORD *)(v7 + 408) >= a1[31])
        break;
LABEL_9:
      v7 = v9;
      if (!v9)
        return result;
    }
    v10 = (int *)a1[3];
    if (*v10 <= 50)
    {
      if (*v10 == -1)
      {
        if (!_LogCategory_Initialize((uint64_t)v10, 0x32u))
          goto LABEL_8;
        v10 = (int *)a1[3];
      }
      LogPrintF((uint64_t)v10, (uint64_t)"void _HTTPServerTimeoutHandler(void *)", 0x32u, (uint64_t)"Timing out connection %##a -> %##a\n", v3, v4, v5, v6, v7 + 256);
    }
LABEL_8:
    result = _HTTPServerCloseConnection(v7);
    goto LABEL_9;
  }
  return result;
}

uint64_t HTTPConnectionCreate(uint64_t *a1, uint64_t a2, int a3, _QWORD *a4)
{
  size_t v8;
  uint64_t Instance;
  uint64_t v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  uint64_t v14;
  _DWORD *v15;
  uint64_t v16;
  void (*v18)(_QWORD *, uint64_t, uint64_t, _QWORD);
  uint64_t v19;
  uint64_t (*v20)(uint64_t, _QWORD);
  uint64_t v21;

  v8 = *(_QWORD *)a2 + 400;
  if (gHTTPConnectionInitOnce != -1)
    dispatch_once_f(&gHTTPConnectionInitOnce, 0, (dispatch_function_t)_HTTPConnectionGetTypeID);
  Instance = _CFRuntimeCreateInstance();
  if (!Instance)
    return 4294960568;
  v10 = Instance;
  bzero((void *)(Instance + 16), v8);
  v11 = *(_OWORD *)(a2 + 48);
  v12 = *(_OWORD *)(a2 + 64);
  v13 = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(v10 + 48) = *(_OWORD *)(a2 + 16);
  *(_OWORD *)(v10 + 32) = *(_OWORD *)a2;
  *(_OWORD *)(v10 + 80) = v11;
  *(_OWORD *)(v10 + 96) = v12;
  *(_OWORD *)(v10 + 64) = v13;
  if (!*(_QWORD *)(v10 + 48))
    *(_QWORD *)(v10 + 48) = "HTTP/1.1";
  *(_QWORD *)(v10 + 408) = mach_absolute_time();
  if (a4)
  {
    v14 = a4[3];
    *(_DWORD *)(v10 + 136) = -1;
    v15 = (_DWORD *)(v10 + 136);
    *(_QWORD *)(v10 + 128) = v14;
    *(_QWORD *)(v10 + 352) = SocketTransportRead;
    *(_QWORD *)(v10 + 360) = SocketTransportWriteV;
    CFRetain(a4);
    *(_QWORD *)(v10 + 24) = a4;
  }
  else
  {
    *(_DWORD *)(v10 + 136) = -1;
    v15 = (_DWORD *)(v10 + 136);
    *(_QWORD *)(v10 + 128) = &gLogCategory_HTTPServerCore;
    *(_QWORD *)(v10 + 352) = SocketTransportRead;
    *(_QWORD *)(v10 + 360) = SocketTransportWriteV;
  }
  v16 = HTTPMessageCreate((uint64_t *)(v10 + 296));
  if (!(_DWORD)v16)
  {
    v16 = HTTPMessageCreate((uint64_t *)(v10 + 304));
    if (!(_DWORD)v16)
    {
      *(_QWORD *)(v10 + 320) = v10 + 312;
      *(_DWORD *)(v10 + 136) = a3;
      if (a4)
      {
        v18 = (void (*)(_QWORD *, uint64_t, uint64_t, _QWORD))a4[21];
        if (v18)
        {
          if (*(_QWORD *)(v10 + 32))
            v19 = v10 + 416;
          else
            v19 = 0;
          v18(a4, v10, v19, a4[15]);
        }
      }
      v20 = *(uint64_t (**)(uint64_t, _QWORD))(v10 + 56);
      if (!v20 || (v21 = v20(v10, *(_QWORD *)(v10 + 40)), !(_DWORD)v21))
      {
        v16 = 0;
        *a1 = v10;
        return v16;
      }
      v16 = v21;
      *v15 = -1;
    }
  }
  CFRelease((CFTypeRef)v10);
  return v16;
}

void HTTPConnectionSetDispatchQueue(uint64_t a1, NSObject *a2)
{
  NSObject *v3;
  NSObject *v4;

  if (a2)
    v3 = a2;
  else
    v3 = MEMORY[0x1E0C80D38];
  dispatch_retain(v3);
  v4 = *(NSObject **)(a1 + 120);
  if (v4)
    dispatch_release(v4);
  *(_QWORD *)(a1 + 120) = v3;
}

uint64_t HTTPConnectionStart(uint64_t a1)
{
  int v2;
  int v3;
  uint64_t v4;
  uint64_t (*v5)(_QWORD, _QWORD);
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  dispatch_source_t v11;
  dispatch_source_t v12;
  int *v13;
  int v15;
  int v16;
  socklen_t v17;

  if (!*(_QWORD *)(a1 + 120))
    HTTPConnectionSetDispatchQueue(a1, MEMORY[0x1E0C80D38]);
  v2 = *(_DWORD *)(a1 + 136);
  v15 = 1;
  v16 = 0;
  setsockopt(v2, 0xFFFF, 4130, &v15, 4u);
  SocketSetNonBlocking(*(_DWORD *)(a1 + 136), 1);
  v17 = 28;
  if (getsockname(*(_DWORD *)(a1 + 136), (sockaddr *)(a1 + 228), &v17) && *__error())
    __error();
  v17 = 28;
  if (getpeername(*(_DWORD *)(a1 + 136), (sockaddr *)(a1 + 256), &v17) && *__error())
    __error();
  SocketGetInterfaceInfo(*(_DWORD *)(a1 + 136), 0, (char *)(a1 + 140), (unsigned int *)(a1 + 160), a1 + 164, (_DWORD *)(a1 + 172), (int *)(a1 + 176), (_QWORD *)(a1 + 184), 0, a1 + 192);
  v3 = *(_DWORD *)(a1 + 192);
  if (v3 != 4 && v3 != 64 && v3 != 128)
    SocketSetP2P(*(_DWORD *)(a1 + 136), 0);
  v16 = 1;
  if (setsockopt(*(_DWORD *)(a1 + 136), 6, 1, &v16, 4u))
  {
    if (*__error())
      v4 = *__error();
    else
      v4 = 4294960596;
  }
  else
  {
    v4 = 0;
  }
  v5 = *(uint64_t (**)(_QWORD, _QWORD))(a1 + 336);
  if (v5)
  {
    v4 = v5(*(unsigned int *)(a1 + 136), *(_QWORD *)(a1 + 328));
    if ((_DWORD)v4)
      goto LABEL_26;
    v10 = *(_DWORD *)(a1 + 136);
  }
  else
  {
    v10 = *(_DWORD *)(a1 + 136);
    if (!*(_BYTE *)(a1 + 368))
      *(_QWORD *)(a1 + 328) = v10;
  }
  v11 = dispatch_source_create(MEMORY[0x1E0C80DB8], v10, 0, *(dispatch_queue_t *)(a1 + 120));
  *(_QWORD *)(a1 + 200) = v11;
  if (!v11
    || (CFRetain((CFTypeRef)a1),
        dispatch_set_context(*(dispatch_object_t *)(a1 + 200), (void *)a1),
        dispatch_source_set_event_handler_f(*(dispatch_source_t *)(a1 + 200), (dispatch_function_t)_HTTPConnectionReadHandler), dispatch_source_set_cancel_handler_f(*(dispatch_source_t *)(a1 + 200), (dispatch_function_t)_HTTPConnectionCancelHandler), dispatch_resume(*(dispatch_object_t *)(a1 + 200)), v12 = dispatch_source_create(MEMORY[0x1E0C80DF0], *(int *)(a1 + 136), 0, *(dispatch_queue_t *)(a1 + 120)), (*(_QWORD *)(a1 + 216) = v12) == 0))
  {
    v4 = 4294960596;
    goto LABEL_26;
  }
  CFRetain((CFTypeRef)a1);
  dispatch_set_context(*(dispatch_object_t *)(a1 + 216), (void *)a1);
  dispatch_source_set_event_handler_f(*(dispatch_source_t *)(a1 + 216), (dispatch_function_t)_HTTPConnectionWriteHandler);
  dispatch_source_set_cancel_handler_f(*(dispatch_source_t *)(a1 + 216), (dispatch_function_t)_HTTPConnectionCancelHandler);
  *(_BYTE *)(a1 + 224) = 1;
  if ((_DWORD)v4)
  {
LABEL_26:
    v13 = *(int **)(a1 + 128);
    if (!v13 || *v13 > 90)
      goto LABEL_31;
    if (*v13 == -1)
    {
      if (!_LogCategory_Initialize((uint64_t)v13, 0x5Au))
        goto LABEL_31;
      v13 = *(int **)(a1 + 128);
    }
    LogPrintF((uint64_t)v13, (uint64_t)"OSStatus HTTPConnectionStart(HTTPConnectionRef)", 0x5Au, (uint64_t)"### HTTP connection start failed: %#m\n", v6, v7, v8, v9, v4);
LABEL_31:
    HTTPConnectionStop(a1);
  }
  return v4;
}

void _HTTPConnectionReadHandler(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  dispatch_suspend(*(dispatch_object_t *)(a1 + 200));
  *(_BYTE *)(a1 + 208) = 1;
  _HTTPConnectionRunStateMachine(a1, v2, v3, v4, v5, v6, v7, v8);
}

void _HTTPConnectionWriteHandler(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  dispatch_suspend(*(dispatch_object_t *)(a1 + 216));
  *(_BYTE *)(a1 + 224) = 1;
  _HTTPConnectionRunStateMachine(a1, v2, v3, v4, v5, v6, v7, v8);
}

void _HTTPConnectionRunStateMachine(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t Message;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t (*v16)(uint64_t, _QWORD, _QWORD, _QWORD, _QWORD);
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  void (*v20)(void);
  uint64_t v21;
  _QWORD *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  void (*v27)(_QWORD *);
  int *v28;
  void (*v29)(uint64_t, _QWORD);

  v9 = a1 + 312;
  while (2)
  {
    switch(*(_DWORD *)(a1 + 288))
    {
      case 0:
        v10 = *(_QWORD *)(a1 + 296);
        Message = HTTPMessageReadMessageEx(v10, *(uint64_t (**)(void *, size_t, unint64_t *, uint64_t))(a1 + 352), *(_QWORD *)(a1 + 328));
        v12 = _HTTPConnectionHandleIOError(a1, Message, 1);
        if ((_DWORD)v12 == 35)
          return;
        v13 = v12;
        if ((_DWORD)v12)
          goto LABEL_33;
        *(_QWORD *)(a1 + 408) = mach_absolute_time();
        LogHTTP(*(_QWORD *)(a1 + 128), *(int **)(a1 + 128), (unsigned __int8 *)(v10 + 24), *(_QWORD *)(v10 + 8216), *(_QWORD *)(v10 + 8520), *(_QWORD *)(v10 + 8528), v14, v15);
        if (*(_QWORD *)(v10 + 8216) == 4
          && *(_BYTE *)(v10 + 24) == 36
          && (v16 = *(uint64_t (**)(uint64_t, _QWORD, _QWORD, _QWORD, _QWORD))(a1 + 104)) != 0)
        {
          v17 = v16(a1, *(unsigned __int8 *)(v10 + 8480), *(_QWORD *)(v10 + 8520), *(_QWORD *)(v10 + 8528), *(_QWORD *)(a1 + 40));
          if ((_DWORD)v17)
            goto LABEL_42;
          HTTPMessageReset(*(_QWORD *)(a1 + 296));
        }
        else
        {
          v17 = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(a1 + 88))(a1, v10, *(_QWORD *)(a1 + 40));
          if ((_DWORD)v17)
          {
LABEL_42:
            v13 = v17;
            goto LABEL_33;
          }
          if (!*(_DWORD *)(a1 + 288))
          {
            *(_DWORD *)(a1 + 288) = 1;
            return;
          }
        }
        continue;
      case 1:
        return;
      case 2:
        v18 = HTTPMessageWriteMessage(*(_QWORD *)(a1 + 304), *(uint64_t (**)(uint64_t, uint64_t))(a1 + 360), *(_QWORD *)(a1 + 328));
        v19 = _HTTPConnectionHandleIOError(a1, v18, 0);
        if ((_DWORD)v19 == 35)
          return;
        v13 = v19;
        if ((_DWORD)v19)
          goto LABEL_33;
        *(_QWORD *)(a1 + 408) = mach_absolute_time();
        v20 = *(void (**)(void))(*(_QWORD *)(a1 + 304) + 9712);
        if (v20)
        {
          v20();
          *(_QWORD *)(*(_QWORD *)(a1 + 304) + 9712) = 0;
        }
        v21 = *(_QWORD *)(a1 + 296);
        if (*(_BYTE *)(v21 + 8496) && !*(_QWORD *)(a1 + 376))
        {
          HTTPMessageReset(v21);
          HTTPMessageReset(*(_QWORD *)(a1 + 304));
          *(_DWORD *)(a1 + 288) = 3;
          continue;
        }
        v13 = 4294960544;
LABEL_33:
        v28 = *(int **)(a1 + 128);
        if (v28 && *v28 <= 50)
        {
          if (*v28 != -1)
            goto LABEL_36;
          if (_LogCategory_Initialize((uint64_t)v28, 0x32u))
          {
            v28 = *(int **)(a1 + 128);
LABEL_36:
            LogPrintF((uint64_t)v28, (uint64_t)"void _HTTPConnectionRunStateMachine(HTTPConnectionRef)", 0x32u, (uint64_t)"HTTP connection closing: %#m\n", a5, a6, a7, a8, v13);
          }
        }
        HTTPConnectionStop(a1);
        v29 = *(void (**)(uint64_t, _QWORD))(a1 + 112);
        if (v29)
          v29(a1, *(_QWORD *)(a1 + 40));
        return;
      case 3:
        if (*(_QWORD *)v9)
        {
          LogHTTP(*(_QWORD *)(a1 + 128), *(int **)(a1 + 128), (unsigned __int8 *)(*(_QWORD *)v9 + 24), *(_QWORD *)(*(_QWORD *)v9 + 8216), *(_QWORD *)(*(_QWORD *)v9 + 8520), *(_QWORD *)(*(_QWORD *)v9 + 8528), a7, a8);
          *(_DWORD *)(a1 + 288) = 4;
        }
        else
        {
          *(_DWORD *)(a1 + 288) = 0;
        }
        continue;
      case 4:
        v22 = *(_QWORD **)(a1 + 312);
        v23 = HTTPMessageWriteMessage((uint64_t)v22, *(uint64_t (**)(uint64_t, uint64_t))(a1 + 360), *(_QWORD *)(a1 + 328));
        v24 = _HTTPConnectionHandleIOError(a1, v23, 0);
        if ((_DWORD)v24 == 35)
          return;
        v13 = v24;
        if ((_DWORD)v24)
          goto LABEL_33;
        *(_QWORD *)(a1 + 408) = mach_absolute_time();
        v25 = v22[2];
        *(_QWORD *)(a1 + 312) = v25;
        if (!v25)
          *(_QWORD *)(a1 + 320) = v9;
        v26 = v22[1215];
        if (v26)
        {
          (*(void (**)(uint64_t, _QWORD *))(v26 + 16))(v26, v22);
        }
        else
        {
          v27 = (void (*)(_QWORD *))v22[1214];
          if (v27)
            v27(v22);
        }
        HTTPMessageReset((uint64_t)v22);
        CFRelease(v22);
        *(_DWORD *)(a1 + 288) = 3;
        continue;
      default:
        v13 = 4294960534;
        goto LABEL_33;
    }
  }
}

uint64_t _HTTPConnectionHandleIOError(uint64_t a1, uint64_t a2, int a3)
{
  dispatch_object_t *v4;

  if ((int)a2 <= -6767)
  {
    if ((_DWORD)a2 != -6775)
    {
      if ((_DWORD)a2 != -6774)
        return a2;
LABEL_8:
      if (*(_BYTE *)(a1 + 208))
      {
        *(_BYTE *)(a1 + 208) = 0;
        v4 = (dispatch_object_t *)(a1 + 200);
LABEL_14:
        dispatch_resume(*v4);
        return 35;
      }
      return 35;
    }
LABEL_12:
    if (*(_BYTE *)(a1 + 224))
    {
      *(_BYTE *)(a1 + 224) = 0;
      v4 = (dispatch_object_t *)(a1 + 216);
      goto LABEL_14;
    }
    return 35;
  }
  if ((_DWORD)a2 == -6766)
  {
    if (*(_BYTE *)(a1 + 208))
    {
      *(_BYTE *)(a1 + 208) = 0;
      dispatch_resume(*(dispatch_object_t *)(a1 + 200));
    }
    goto LABEL_12;
  }
  if ((_DWORD)a2 == 35)
  {
    if (a3)
      goto LABEL_8;
    goto LABEL_12;
  }
  return a2;
}

uint64_t _HTTPConnectionGetTypeID()
{
  uint64_t result;

  result = _CFRuntimeRegisterClass();
  gHTTPConnectionTypeID = result;
  return result;
}

int *_HTTPConnectionFinalize(uint64_t a1)
{
  void (*v2)(uint64_t, _QWORD);
  const void *v3;
  NSObject *v4;
  const void *v5;
  const void *v6;
  _QWORD *v7;
  void (*v8)(_QWORD);
  uint64_t (*v9)(int *, _QWORD, _QWORD, _QWORD);
  int *result;

  v2 = *(void (**)(uint64_t, _QWORD))(a1 + 64);
  if (v2)
    v2(a1, *(_QWORD *)(a1 + 40));
  v3 = *(const void **)(a1 + 24);
  if (v3)
  {
    CFRelease(v3);
    *(_QWORD *)(a1 + 24) = 0;
  }
  v4 = *(NSObject **)(a1 + 120);
  if (v4)
  {
    dispatch_release(v4);
    *(_QWORD *)(a1 + 120) = 0;
  }
  v5 = *(const void **)(a1 + 296);
  if (v5)
  {
    CFRelease(v5);
    *(_QWORD *)(a1 + 296) = 0;
  }
  v6 = *(const void **)(a1 + 304);
  if (v6)
  {
    CFRelease(v6);
    *(_QWORD *)(a1 + 304) = 0;
  }
  while (1)
  {
    v7 = *(_QWORD **)(a1 + 312);
    if (!v7)
      break;
    *(_QWORD *)(a1 + 312) = v7[2];
    CFRelease(v7);
  }
  v8 = *(void (**)(_QWORD))(a1 + 344);
  if (v8)
    v8(*(_QWORD *)(a1 + 328));
  v9 = *(uint64_t (**)(int *, _QWORD, _QWORD, _QWORD))(a1 + 376);
  result = (int *)*(unsigned int *)(a1 + 136);
  if (v9)
  {
    result = (int *)v9(result, *(_QWORD *)(a1 + 384), *(_QWORD *)(a1 + 392), *(_QWORD *)(a1 + 400));
LABEL_17:
    *(_DWORD *)(a1 + 136) = -1;
    return result;
  }
  if ((result & 0x80000000) == 0)
  {
    result = (int *)close((int)result);
    if ((_DWORD)result)
    {
      result = __error();
      if (*result)
        result = __error();
    }
    goto LABEL_17;
  }
  return result;
}

uint64_t _HTTPServerSetProperty(uint64_t a1, uint64_t a2, CFTypeRef cf1, uint64_t a4, const __CFString *a5)
{
  unint64_t v10;
  uint64_t result;
  _BOOL4 v12;
  uint64_t v13;
  int v14;
  uint64_t v15;
  int v16;
  CFTypeID v17;
  CFTypeID v18;
  void *v19;
  unsigned int v20;
  uint64_t v21;
  void *v22;
  uint64_t (*v23)(uint64_t, uint64_t, CFTypeRef, uint64_t, const __CFString *, _QWORD);
  char *v24;
  int v25;

  if (CFEqual(cf1, CFSTR("loopbackOnly")))
  {
    v10 = CFGetInt64(a5, 0);
    result = 0;
    *(_BYTE *)(a1 + 240) = v10 != 0;
    return result;
  }
  if (CFEqual(cf1, CFSTR("p2p")))
  {
    v12 = CFGetInt64(a5, 0) != 0;
    *(_DWORD *)(a1 + 232) = v12;
    v13 = *(_QWORD *)(a1 + 32);
    if (v13)
    {
      v14 = *(_DWORD *)(v13 + 8);
      if ((v14 & 0x80000000) == 0)
        SocketSetP2P(v14, v12);
    }
    v15 = *(_QWORD *)(a1 + 40);
    if (v15)
    {
      v16 = *(_DWORD *)(v15 + 8);
      if ((v16 & 0x80000000) == 0)
        SocketSetP2P(v16, *(_DWORD *)(a1 + 232));
    }
    return 0;
  }
  if (CFEqual(cf1, CFSTR("password")))
  {
    if (!a5)
    {
      v24 = 0;
LABEL_24:
      v19 = *(void **)(a1 + 80);
      if (v19)
        free(v19);
      result = 0;
      *(_QWORD *)(a1 + 80) = v24;
      return result;
    }
    v17 = CFGetTypeID(a5);
    if (v17 == CFStringGetTypeID())
    {
      v24 = 0;
      if (CFStringGetLength(a5) >= 1)
      {
        result = CFStringCopyUTF8CString(a5, &v24);
        if ((_DWORD)result)
          return result;
      }
      goto LABEL_24;
    }
    return 4294960540;
  }
  if (CFEqual(cf1, CFSTR("realm")))
  {
    if (a5)
    {
      v18 = CFGetTypeID(a5);
      if (v18 != CFStringGetTypeID())
        return 4294960540;
      v24 = 0;
      if (CFStringGetLength(a5) >= 1)
      {
        result = CFStringCopyUTF8CString(a5, &v24);
        if ((_DWORD)result)
          return result;
      }
    }
    else
    {
      v24 = 0;
    }
    v22 = *(void **)(a1 + 88);
    if (v22)
      free(v22);
    result = 0;
    *(_QWORD *)(a1 + 88) = v24;
  }
  else if (CFEqual(cf1, CFSTR("timeoutSecs")))
  {
    v25 = 0;
    v20 = CFGetInt64(a5, &v25);
    *(_DWORD *)(a1 + 244) = v20;
    v21 = v20;
    if (SecondsToUpTicks_sOnce != -1)
      dispatch_once_f(&SecondsToUpTicks_sOnce, &SecondsToUpTicks_sMultiplier, (dispatch_function_t)_SecondsToUpTicksInit);
    result = 0;
    *(_QWORD *)(a1 + 248) = SecondsToUpTicks_sMultiplier * v21;
  }
  else
  {
    v23 = *(uint64_t (**)(uint64_t, uint64_t, CFTypeRef, uint64_t, const __CFString *, _QWORD))(a1 + 160);
    if (v23)
      return v23(a1, a2, cf1, a4, a5, *(_QWORD *)(a1 + 120));
    else
      return 4294960582;
  }
  return result;
}

_OWORD *HTTPConnectionSetDelegate(_OWORD *result, _OWORD *a2)
{
  __int128 v2;
  __int128 v3;
  __int128 v4;

  v2 = a2[3];
  v3 = a2[4];
  v4 = a2[2];
  result[3] = a2[1];
  result[2] = *a2;
  result[5] = v2;
  result[6] = v3;
  result[4] = v4;
  if (!*((_QWORD *)result + 6))
    *((_QWORD *)result + 6) = "HTTP/1.1";
  return result;
}

uint64_t HTTPConnectionSetTimeout(uint64_t a1, uint64_t a2)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  result = *(unsigned int *)(a1 + 136);
  if ((result & 0x80000000) == 0)
  {
    result = SocketSetTCPTimeout(result, a2);
    if ((_DWORD)result)
    {
      result = *(_QWORD *)(a1 + 128);
      if (*(int *)result <= 60)
      {
        if (*(_DWORD *)result != -1)
          return LogPrintF(result, (uint64_t)"void HTTPConnectionSetTimeout(HTTPConnectionRef, int)", 0x3Cu, (uint64_t)"### Set TCP timeout to %d seconds failed: %#m\n", v5, v6, v7, v8, a2);
        result = _LogCategory_Initialize(result, 0x3Cu);
        if ((_DWORD)result)
        {
          result = *(_QWORD *)(a1 + 128);
          return LogPrintF(result, (uint64_t)"void HTTPConnectionSetTimeout(HTTPConnectionRef, int)", 0x3Cu, (uint64_t)"### Set TCP timeout to %d seconds failed: %#m\n", v5, v6, v7, v8, a2);
        }
      }
    }
  }
  return result;
}

void HTTPConnectionStopAsync(dispatch_queue_t *a1)
{
  CFRetain(a1);
  dispatch_async_f(a1[15], a1, (dispatch_function_t)_HTTPConnectionStopAsync);
}

void _HTTPConnectionStopAsync(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int *v9;
  uint64_t v10;

  v9 = (int *)a1[16];
  if (v9 && *v9 <= 30)
  {
    if (*v9 == -1)
    {
      if (!_LogCategory_Initialize((uint64_t)v9, 0x1Eu))
        goto LABEL_6;
      v9 = (int *)a1[16];
    }
    LogPrintF((uint64_t)v9, (uint64_t)"void _HTTPConnectionStopAsync(void *)", 0x1Eu, (uint64_t)"HTTP connection stop async\n", a5, a6, a7, a8, v10);
  }
LABEL_6:
  HTTPConnectionStop((uint64_t)a1);
  CFRelease(a1);
}

uint64_t HTTPConnectionDetach(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int *v9;
  uint64_t result;

  if (a1[47])
    return 4294960575;
  a1[47] = a2;
  a1[48] = a3;
  a1[49] = a4;
  a1[50] = a5;
  v9 = *(int **)(a1[3] + 24);
  if (*v9 > 30)
    return 0;
  if (*v9 != -1)
  {
LABEL_4:
    LogPrintF((uint64_t)v9, (uint64_t)"OSStatus HTTPConnectionDetach(HTTPConnectionRef, HTTPConnectionDetachHandler_f, void *, void *, void *)", 0x1Eu, (uint64_t)"Detaching connection %##a -> %##a\n", a5, a6, a7, a8, (uint64_t)(a1 + 32));
    return 0;
  }
  result = _LogCategory_Initialize((uint64_t)v9, 0x1Eu);
  if ((_DWORD)result)
  {
    v9 = *(int **)(a1[3] + 24);
    goto LABEL_4;
  }
  return result;
}

uint64_t HTTPConnectionSetTransportDelegate(uint64_t a1, __int128 *a2)
{
  uint64_t v4;
  void (*v5)(_QWORD);
  __int128 v6;
  __int128 v7;
  uint64_t result;
  uint64_t (*v9)(void);

  v4 = a1 + 328;
  v5 = *(void (**)(_QWORD))(a1 + 344);
  if (v5)
    v5(*(_QWORD *)v4);
  v6 = *a2;
  v7 = a2[1];
  *(_QWORD *)(v4 + 32) = *((_QWORD *)a2 + 4);
  *(_OWORD *)v4 = v6;
  *(_OWORD *)(v4 + 16) = v7;
  *(_BYTE *)(a1 + 368) = 1;
  result = *(unsigned int *)(a1 + 136);
  if ((result & 0x80000000) == 0)
  {
    v9 = *(uint64_t (**)(void))(a1 + 336);
    if (v9)
      return v9();
  }
  return result;
}

uint64_t HTTPConnectionGetNextURLSegmentEx(uint64_t a1, uint64_t *a2, int a3, unint64_t *a4, _QWORD *a5, _DWORD *a6, uint64_t a7, uint64_t a8)
{
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  _BYTE *v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  uint64_t v19;
  int *v21;

  v11 = a2[1049];
  v12 = a2[1050];
  if (v11 < v12 && *(_BYTE *)v11 != 47)
  {
    v13 = 0;
    v14 = (_BYTE *)a2[1050];
    while (~v11 + v12 != v13)
    {
      v15 = *(unsigned __int8 *)(v11 + v13++ + 1);
      if (v15 == 47)
      {
        v14 = (_BYTE *)(v11 + v13);
        break;
      }
    }
    if (v14 != (_BYTE *)v11)
    {
      *a4 = v11;
      *a5 = &v14[-v11];
      if ((unint64_t)v14 >= v12)
        v16 = (uint64_t)v14;
      else
        v16 = (uint64_t)(v14 + 1);
      a2[1049] = v16;
      v17 = 1;
      goto LABEL_14;
    }
  }
  if (!a3)
  {
    v21 = *(int **)(a1 + 128);
    if (*v21 > 60)
      goto LABEL_20;
    if (*v21 == -1)
    {
      if (!_LogCategory_Initialize((uint64_t)v21, 0x3Cu))
      {
LABEL_20:
        v18 = HTTPConnectionSendSimpleResponseEx2(a1, 400, 4294960592, 0, 0, 0, a7, a8);
        v17 = 0;
        v19 = 0;
        if (v18)
          goto LABEL_15;
        goto LABEL_14;
      }
      v21 = *(int **)(a1 + 128);
    }
    LogPrintF((uint64_t)v21, (uint64_t)"Boolean HTTPConnectionGetNextURLSegmentEx(HTTPConnectionRef, HTTPMessageRef, Boolean, const char **, size_t *, OSStatus *)", 0x3Cu, (uint64_t)"### Bad URL segment: '%.*s'\n", (uint64_t)a5, (uint64_t)a6, a7, a8, a2[1034]);
    goto LABEL_20;
  }
  v17 = 0;
LABEL_14:
  v18 = 0;
  v19 = v17;
LABEL_15:
  *a6 = v18;
  return v19;
}

uint64_t HTTPConnectionSendSimpleResponseEx2(uint64_t a1, int a2, uint64_t a3, uint64_t a4, const void *a5, size_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t inited;
  int *v17;

  inited = HTTPConnectionInitResponseEx(a1, a2, a3, a4, (uint64_t)a5, a6, a7, a8);
  if ((_DWORD)inited
    || (inited = HTTPMessageSetBody(*(_QWORD *)(a1 + 304), a4, a5, a6), (_DWORD)inited)
    || (inited = HTTPConnectionSendResponse(a1), (_DWORD)inited))
  {
    v17 = *(int **)(a1 + 128);
    if (*v17 <= 60)
    {
      if (*v17 == -1)
      {
        if (!_LogCategory_Initialize((uint64_t)v17, 0x3Cu))
          return inited;
        v17 = *(int **)(a1 + 128);
      }
      LogPrintF((uint64_t)v17, (uint64_t)"OSStatus HTTPConnectionSendSimpleResponseEx2(HTTPConnectionRef, const char *, HTTPStatus, OSStatus, const char *, const void *, size_t)", 0x3Cu, (uint64_t)"### Response failed: %#m\n", v12, v13, v14, v15, inited);
    }
  }
  return inited;
}

uint64_t HTTPConnectionInitResponseEx(uint64_t a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  time_t v9;
  const char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t (*v16)(uint64_t, _QWORD, _QWORD);
  uint64_t result;
  char v18[64];
  uint64_t v19;

  v19 = *MEMORY[0x1E0C80C00];
  HTTPHeader_InitResponseEx(*(_QWORD *)(a1 + 304) + 24, *(const char **)(a1 + 48), a2, 0, a3, a6, a7, a8);
  v9 = time(0);
  v10 = HTTPMakeDateString(v9, v18, 0x40uLL);
  if (*v10)
    HTTPHeader_SetField((char *)(*(_QWORD *)(a1 + 304) + 24), "Date", (uint64_t)"%s", v11, v12, v13, v14, v15, (char)v10);
  v16 = *(uint64_t (**)(uint64_t, _QWORD, _QWORD))(a1 + 96);
  if (!v16 || (result = v16(a1, *(_QWORD *)(a1 + 304), *(_QWORD *)(a1 + 40)), !(_DWORD)result))
  {
    result = 0;
    *(_QWORD *)(*(_QWORD *)(a1 + 304) + 8528) = 0;
  }
  return result;
}

uint64_t HTTPConnectionSendResponse(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  int v14;

  v2 = *(_QWORD *)(a1 + 304);
  v5 = HTTPHeader_Commit(v2 + 24);
  if (!(_DWORD)v5)
  {
    LogHTTP(*(_QWORD *)(a1 + 128), *(int **)(a1 + 128), (unsigned __int8 *)(v2 + 24), *(_QWORD *)(v2 + 8216), *(_QWORD *)(v2 + 8520), *(_QWORD *)(v2 + 8528), v3, v4);
    *(_QWORD *)(v2 + 9584) = v2 + 24;
    *(_QWORD *)(v2 + 9592) = *(_QWORD *)(v2 + 8216);
    *(_DWORD *)(v2 + 9624) = 1;
    v13 = *(_QWORD *)(v2 + 8528);
    if (v13)
    {
      *(_QWORD *)(v2 + 9600) = *(_QWORD *)(v2 + 8520);
      *(_QWORD *)(v2 + 9608) = v13;
      *(_DWORD *)(v2 + 9624) = 2;
    }
    *(_QWORD *)(v2 + 9616) = v2 + 9584;
    v14 = *(_DWORD *)(a1 + 288);
    *(_DWORD *)(a1 + 288) = 2;
    if (v14 == 1)
      _HTTPConnectionRunStateMachine(a1, v6, v7, v8, v9, v10, v11, v12);
  }
  return v5;
}

uint64_t HTTPConnectionSendBinaryBytes(dispatch_queue_t *a1, char a2, char a3, const void *a4, size_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v14;
  _QWORD *v15;
  CFTypeRef cf;

  cf = 0;
  if (a5 >> 16)
    return 4294960553;
  v14 = HTTPMessageCreate((uint64_t *)&cf);
  v15 = cf;
  if ((_DWORD)v14)
    goto LABEL_3;
  if ((a2 & 1) != 0)
  {
    *((_QWORD *)cf + 1065) = a4;
    v15[1066] = a5;
  }
  else
  {
    v14 = HTTPMessageSetBodyLength(cf, a5);
    if ((_DWORD)v14)
    {
LABEL_3:
      if (!v15)
        return v14;
      goto LABEL_13;
    }
    if (a5)
      memmove((void *)v15[1065], a4, a5);
  }
  *((_BYTE *)v15 + 24) = 36;
  *((_BYTE *)v15 + 25) = a3;
  *((_BYTE *)v15 + 26) = BYTE1(a5);
  *((_BYTE *)v15 + 27) = a5;
  v15[1027] = 4;
  if (a6)
  {
    v15[1213] = a6;
    v15[1209] = a7;
    v15[1214] = _HTTPConnectionSendBinaryCompletion;
  }
  v14 = HTTPConnectionSendEvent(a1, v15);
LABEL_13:
  CFRelease(v15);
  return v14;
}

uint64_t _HTTPConnectionSendBinaryCompletion(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD, _QWORD))(a1 + 9704))(*(unsigned int *)(a1 + 9648), *(_QWORD *)(a1 + 9672));
}

uint64_t HTTPConnectionSendEvent(dispatch_queue_t *a1, _QWORD *a2)
{
  uint64_t v4;

  v4 = HTTPHeader_Commit((uint64_t)(a2 + 3));
  if (!(_DWORD)v4)
  {
    a2[1207] = a1;
    CFRetain(a1);
    CFRetain(a2);
    dispatch_async_f(a1[15], a2, (dispatch_function_t)_HTTPConnectionSendEvent);
  }
  return v4;
}

void _HTTPConnectionSendEvent(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  uint64_t v9;

  *(_QWORD *)(a1 + 16) = 0;
  v8 = *(_QWORD *)(a1 + 9656);
  *(_QWORD *)(a1 + 9584) = a1 + 24;
  *(_QWORD *)(a1 + 9592) = *(_QWORD *)(a1 + 8216);
  *(_DWORD *)(a1 + 9624) = 1;
  v9 = *(_QWORD *)(a1 + 8528);
  if (v9)
  {
    *(_QWORD *)(a1 + 9600) = *(_QWORD *)(a1 + 8520);
    *(_QWORD *)(a1 + 9608) = v9;
    *(_DWORD *)(a1 + 9624) = 2;
  }
  *(_QWORD *)(a1 + 9616) = a1 + 9584;
  **(_QWORD **)(v8 + 320) = a1;
  *(_QWORD *)(v8 + 320) = a1 + 16;
  if (!*(_DWORD *)(v8 + 288))
  {
    *(_DWORD *)(v8 + 288) = 3;
    _HTTPConnectionRunStateMachine(v8, a2, a3, a4, a5, a6, a7, a8);
  }
  CFRelease((CFTypeRef)v8);
}

uint64_t HTTPServer_Create(_QWORD *a1, __int128 *a2)
{
  size_t v3;
  _OWORD *v5;
  _OWORD *v6;
  uint64_t result;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;

  v3 = *(_QWORD *)a2;
  if (v3 < 0xE0 || *((_QWORD *)a2 + 1) >> 8 < 0x443uLL)
    return 4294960553;
  if (!*((_QWORD *)a2 + 8))
    return 4294960591;
  v5 = malloc_type_calloc(1uLL, v3, 0x5D44B60EuLL);
  if (!v5)
    return 4294960568;
  v6 = v5;
  result = 0;
  v8 = *a2;
  v9 = a2[2];
  v6[1] = a2[1];
  v6[2] = v9;
  *v6 = v8;
  v10 = a2[3];
  v11 = a2[4];
  v12 = a2[5];
  *((_QWORD *)v6 + 12) = *((_QWORD *)a2 + 12);
  *((_DWORD *)v6 + 36) = -1;
  *((_DWORD *)v6 + 42) = -1;
  *((_QWORD *)v6 + 27) = &gLogCategory_HTTPServerConnections;
  v6[4] = v11;
  v6[5] = v12;
  v6[3] = v10;
  *a1 = v6;
  return result;
}

void HTTPServer_Delete(_QWORD *a1)
{
  void (*v2)(_QWORD *);

  HTTPServer_Stop((uint64_t)a1);
  v2 = (void (*)(_QWORD *))a1[2];
  if (v2)
    v2(a1);
  free(a1);
}

uint64_t HTTPServer_Stop(uint64_t a1)
{
  NSObject *v2;
  NSObject *v3;
  NSObject *v4;
  void (*v5)(uint64_t);

  v2 = *(NSObject **)(a1 + 136);
  if (v2)
  {
    dispatch_source_cancel(*(dispatch_source_t *)(a1 + 136));
    dispatch_release(v2);
    *(_QWORD *)(a1 + 136) = 0;
  }
  v3 = *(NSObject **)(a1 + 160);
  if (v3)
  {
    dispatch_source_cancel(*(dispatch_source_t *)(a1 + 160));
    dispatch_release(v3);
    *(_QWORD *)(a1 + 160) = 0;
  }
  if (*(_QWORD *)(a1 + 112))
  {
    *(_QWORD *)(a1 + 120) = dispatch_semaphore_create(0);
    dispatch_async_f(*(dispatch_queue_t *)(a1 + 112), (void *)a1, (dispatch_function_t)__HTTPServer_StopAllConnections);
    dispatch_release(*(dispatch_object_t *)(a1 + 112));
    v4 = *(NSObject **)(a1 + 120);
    if (v4)
    {
      dispatch_semaphore_wait(v4, 0xFFFFFFFFFFFFFFFFLL);
      dispatch_release(*(dispatch_object_t *)(a1 + 120));
      *(_QWORD *)(a1 + 120) = 0;
    }
    *(_QWORD *)(a1 + 112) = 0;
  }
  v5 = *(void (**)(uint64_t))(a1 + 32);
  if (v5)
    v5(a1);
  return 0;
}

void __HTTPServer_StopAllConnections(uint64_t a1)
{
  uint64_t **i;

  for (i = *(uint64_t ***)(a1 + 184); i; i = (uint64_t **)*i)
  {
    NetSocket_Cancel((uint64_t)i[3]);
    dispatch_source_cancel((dispatch_source_t)i[19]);
  }
}

uint64_t HTTPServer_Start(uint64_t a1)
{
  NSObject *v2;
  int v3;
  int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  uint64_t (*v13)(uint64_t);
  uintptr_t handle[2];

  handle[0] = -1;
  v2 = dispatch_queue_create("HTTPServer", 0);
  *(_QWORD *)(a1 + 112) = v2;
  if (!v2)
  {
    v12 = 4294960568;
LABEL_31:
    HTTPServer_Stop(a1);
    return v12;
  }
  dispatch_set_context(v2, (void *)a1);
  dispatch_set_finalizer_f(*(dispatch_object_t *)(a1 + 112), (dispatch_function_t)__HTTPServer_Finalizer);
  v3 = *(_DWORD *)(a1 + 128);
  if (*(int *)(a1 + 80) >= 0 || v3 <= 0)
    v5 = *(_DWORD *)(a1 + 80);
  else
    v5 = -v3;
  v6 = ServerSocketPairOpen(1, 6, v5, (int *)(a1 + 128), *(_DWORD *)(a1 + 84), (int *)handle + 1, (int *)handle);
  v11 = HIDWORD(handle[0]);
  if ((_DWORD)v6)
  {
    v12 = v6;
    if ((handle[0] & 0x8000000000000000) != 0)
      goto LABEL_26;
    goto LABEL_13;
  }
  if ((handle[0] & 0x8000000000000000) == 0)
  {
    v12 = __HTTPServer_SetupListener(a1, HIDWORD(handle[0]), (_DWORD *)(a1 + 136));
    if ((_DWORD)v12)
    {
LABEL_13:
      if (close(v11) && *__error())
        __error();
      goto LABEL_26;
    }
  }
  if ((handle[0] & 0x80000000) == 0)
  {
    v12 = __HTTPServer_SetupListener(a1, LODWORD(handle[0]), (_DWORD *)(a1 + 160));
    if ((_DWORD)v12)
      goto LABEL_26;
    LODWORD(handle[0]) = -1;
  }
  if (gLogCategory_HTTPServer <= 40
    && (gLogCategory_HTTPServer != -1 || _LogCategory_Initialize((uint64_t)&gLogCategory_HTTPServer, 0x28u)))
  {
    LogPrintF((uint64_t)&gLogCategory_HTTPServer, (uint64_t)"OSStatus HTTPServer_Start(HTTPServerOldRef)", 0x28u, (uint64_t)"Listening on port %d\n", v7, v8, v9, v10, *(unsigned int *)(a1 + 128));
  }
  v13 = *(uint64_t (**)(uint64_t))(a1 + 24);
  if (v13)
    v12 = v13(a1);
  else
    v12 = 0;
LABEL_26:
  if ((handle[0] & 0x80000000) == 0 && close(handle[0]) && *__error())
    __error();
  if ((_DWORD)v12)
    goto LABEL_31;
  return v12;
}

NSObject *__HTTPServer_Finalizer(uint64_t a1)
{
  NSObject *result;

  result = *(NSObject **)(a1 + 120);
  if (result)
    return dispatch_semaphore_signal(result);
  return result;
}

uint64_t __HTTPServer_SetupListener(uint64_t a1, uintptr_t handle, _DWORD *a3)
{
  unsigned int v4;
  int v6;
  NSObject *v7;

  v4 = handle;
  v6 = *(_DWORD *)(a1 + 88);
  if (v6)
    SocketSetQoS(v4, v6);
  if (*(_BYTE *)(a1 + 104))
    SocketSetP2P(v4, 1);
  v7 = dispatch_source_create(MEMORY[0x1E0C80DB8], v4, 0, *(dispatch_queue_t *)(a1 + 112));
  *(_QWORD *)a3 = v7;
  if (!v7)
    return 4294960596;
  a3[2] = v4;
  *((_QWORD *)a3 + 2) = a1;
  dispatch_set_context(v7, a3);
  dispatch_set_finalizer_f(*(dispatch_object_t *)a3, (dispatch_function_t)__HTTPServer_ListenerFinalizer);
  dispatch_source_set_event_handler_f(*(dispatch_source_t *)a3, (dispatch_function_t)__HTTPServer_AcceptConnection);
  dispatch_resume(*(dispatch_object_t *)a3);
  return 0;
}

int *__HTTPServer_ListenerFinalizer(uint64_t a1)
{
  int *result;

  result = (int *)*(unsigned int *)(a1 + 8);
  if ((result & 0x80000000) == 0)
  {
    result = (int *)close((int)result);
    if ((_DWORD)result)
    {
      result = __error();
      if (*result)
        result = __error();
    }
    *(_DWORD *)(a1 + 8) = -1;
  }
  return result;
}

void __HTTPServer_AcceptConnection(uint64_t a1)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  char *v5;
  int v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  uint64_t *v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  NSObject *v24;
  unsigned int (*v25)(uint64_t);
  NSObject *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  int *v31;
  int v32;
  int v33;
  socklen_t v34;
  uint64_t v35;

  v2 = *(_QWORD *)(a1 + 16);
  v3 = malloc_type_calloc(1uLL, *(_QWORD *)(v2 + 8), 0x478BE47uLL);
  if (v3)
  {
    v4 = (uint64_t)v3;
    v5 = (char *)(v3 + 34910);
    v3[1] = v2;
    v6 = *(_DWORD *)(v2 + 192);
    *(_DWORD *)(v2 + 192) = v6 + 1;
    *((_DWORD *)v3 + 4) = v6 + 1;
    if (v6 == -1)
      *(_DWORD *)(v2 + 192) = 1;
    v33 = 0;
    dispatch_retain(*(dispatch_object_t *)(v2 + 112));
    *(_OWORD *)v5 = *(_OWORD *)(v2 + 200);
    v34 = 28;
    v7 = accept(*(_DWORD *)(a1 + 8), (sockaddr *)(v4 + 60), &v34);
    if ((v7 & 0x80000000) != 0 && (!*__error() || *__error()))
      goto LABEL_32;
    v32 = 1;
    setsockopt(v7, 0xFFFF, 4130, &v32, 4u);
    SocketSetNonBlocking(v7, 1);
    v8 = *(_DWORD *)(v2 + 88);
    if (v8)
      SocketSetQoS(v7, v8);
    if ((v7 & 0x80000000) != 0 || (v35 = 0, NetSocket_Create(&v35)))
    {
      close(v7);
LABEL_32:
      __HTTPServer_RemoveConnection(v4, v9, v10, v11, v12, v13, v14, v15);
      return;
    }
    v16 = v35;
    *(_DWORD *)(v35 + 4) = v7;
    *(_QWORD *)(v4 + 24) = v16;
    *(_QWORD *)(v16 + 112) = *((_QWORD *)v5 + 1);
    v34 = 28;
    if (getsockname(v7, (sockaddr *)(v4 + 32), &v34) && (!*__error() || *__error()))
      goto LABEL_32;
    SocketGetInterfaceInfo(v7, 0, (char *)(v4 + 88), (unsigned int *)(v4 + 108), v4 + 116, (_DWORD *)(v4 + 112), (int *)(v4 + 124), (_QWORD *)(v4 + 128), 0, v4 + 136);
    v17 = *(_DWORD *)(v4 + 136);
    if (v17 != 4 && v17 != 64 && v17 != 128)
      SocketSetP2P(v7, 0);
    v18 = (uint64_t *)(v2 + 184);
    do
    {
      v19 = v18;
      v18 = (uint64_t *)*v18;
    }
    while (v18);
    *v19 = v4;
    v33 = 1;
    if (setsockopt(v7, 6, 1, &v33, 4u)
      && (!*__error() || *__error())
      && gLogCategory_HTTPServer <= 60
      && (gLogCategory_HTTPServer != -1 || _LogCategory_Initialize((uint64_t)&gLogCategory_HTTPServer, 0x3Cu)))
    {
      LogPrintF((uint64_t)&gLogCategory_HTTPServer, (uint64_t)"void __HTTPServer_AcceptConnection(void *)", 0x3Cu, (uint64_t)"### set TCP_NODELAY failed on sock %d: %#m\n", v20, v21, v22, v23, v7);
    }
    v24 = dispatch_queue_create("HTTPServerConnection", 0);
    *(_QWORD *)(v4 + 144) = v24;
    if (!v24)
      goto LABEL_32;
    dispatch_set_context(v24, (void *)v4);
    dispatch_set_finalizer_f(*(dispatch_object_t *)(v4 + 144), (dispatch_function_t)__HTTPServer_FinalizeConnection);
    v25 = *(unsigned int (**)(uint64_t))(v2 + 40);
    if (v25)
    {
      if (v25(v4))
        goto LABEL_32;
    }
    *(_BYTE *)(v4 + 20) = 1;
    v26 = dispatch_source_create(MEMORY[0x1E0C80DB8], (int)v7, 0, *(dispatch_queue_t *)(v4 + 144));
    *(_QWORD *)(v4 + 152) = v26;
    if (!v26)
      goto LABEL_32;
    dispatch_set_context(v26, (void *)v4);
    dispatch_source_set_event_handler_f(*(dispatch_source_t *)(v4 + 152), (dispatch_function_t)__HTTPServer_ReadHandler);
    dispatch_source_set_cancel_handler_f(*(dispatch_source_t *)(v4 + 152), (dispatch_function_t)__HTTPServer_CancelHandler);
    dispatch_resume(*(dispatch_object_t *)(v4 + 152));
    v31 = *(int **)(v2 + 216);
    if (*v31 <= 40)
    {
      if (*v31 != -1)
      {
LABEL_37:
        LogPrintF((uint64_t)v31, (uint64_t)"void __HTTPServer_AcceptConnection(void *)", 0x28u, (uint64_t)"Accepted connection from %##a to %##a \n", v27, v28, v29, v30, v4 + 60);
        return;
      }
      if (_LogCategory_Initialize((uint64_t)v31, 0x28u))
      {
        v31 = *(int **)(v2 + 216);
        goto LABEL_37;
      }
    }
  }
}

void __HTTPServer_FinalizeConnection(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9;
  int *v10;
  _QWORD *v11;
  void (*v12)(uint64_t);

  v9 = *(_QWORD *)(a1 + 8);
  if (*(_BYTE *)(a1 + 33))
  {
    v10 = *(int **)(v9 + 216);
    if (*v10 <= 40)
    {
      if (*v10 != -1)
      {
LABEL_4:
        LogPrintF((uint64_t)v10, (uint64_t)"void __HTTPServer_FinalizeConnection(void *)", 0x28u, (uint64_t)"Closing  connection from %##a to %##a\n", a5, a6, a7, a8, a1 + 60);
        goto LABEL_6;
      }
      if (_LogCategory_Initialize((uint64_t)v10, 0x28u))
      {
        v10 = *(int **)(v9 + 216);
        goto LABEL_4;
      }
    }
  }
LABEL_6:
  v11 = *(_QWORD **)(a1 + 24);
  if (v11)
  {
    NetSocket_Delete(v11);
    *(_QWORD *)(a1 + 24) = 0;
  }
  v12 = *(void (**)(uint64_t))(v9 + 48);
  if (v12 && *(_BYTE *)(a1 + 20))
    v12(a1);
  dispatch_release(*(dispatch_object_t *)(v9 + 112));
  free((void *)a1);
}

void __HTTPServer_ReadHandler(uint64_t a1)
{
  _DWORD *v2;
  int v3;
  int v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  int *v12;
  timeval v13;
  fd_set v14;

  if (*(_BYTE *)(a1 + 21))
  {
    *(_QWORD *)&v13.tv_usec = 0;
    v2 = *(_DWORD **)(a1 + 24);
    if (v2 && *v2 == 1853058915)
      v3 = v2[1];
    else
      v3 = -1;
    memset(&v14, 0, sizeof(v14));
    if (__darwin_check_fd_set_overflow(v3, &v14, 0))
      *(__int32_t *)((char *)v14.fds_bits + (((unint64_t)v3 >> 3) & 0x1FFFFFFFFFFFFFFCLL)) |= 1 << v3;
    v13.tv_sec = 0;
    v4 = v3 + 1;
    while (1)
    {
      v5 = select(v4, &v14, 0, 0, &v13);
      if (v5 > 0)
        break;
      if (!v5)
        return;
      if (!*__error())
      {
        v10 = 4294960596;
        goto LABEL_21;
      }
      v10 = *__error();
      if ((_DWORD)v10 != 4)
      {
        if ((_DWORD)v10 == -6722)
          return;
        if ((_DWORD)v10)
          goto LABEL_21;
        break;
      }
    }
  }
  v10 = NetSocket_HTTPReadHeader(*(_QWORD *)(a1 + 24), a1 + 160, 0xFFFFFFFFLL);
  if (!(_DWORD)v10)
  {
    LogHTTP(*(_QWORD *)(a1 + 279280), *(int **)(a1 + 279288), (unsigned __int8 *)(a1 + 160), *(_QWORD *)(a1 + 8352), 0, 0, v8, v9);
    v11 = *(unsigned __int8 *)(a1 + 8632);
    v10 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)(a1 + 8) + 64))(a1);
    if (!(_DWORD)v10)
    {
      if (!v11)
      {
LABEL_19:
        NetSocket_Disconnect(*(_QWORD *)(a1 + 24), 3u);
        goto LABEL_25;
      }
      v10 = HTTPHeader_Parse(a1 + 139720);
      if (!(_DWORD)v10)
      {
        if (*(_BYTE *)(a1 + 148192))
          return;
        goto LABEL_19;
      }
    }
  }
LABEL_21:
  v12 = *(int **)(*(_QWORD *)(a1 + 8) + 216);
  if (*v12 <= 20)
  {
    if (*v12 == -1)
    {
      if (!_LogCategory_Initialize((uint64_t)v12, 0x14u))
        goto LABEL_25;
      v12 = *(int **)(*(_QWORD *)(a1 + 8) + 216);
    }
    LogPrintF((uint64_t)v12, (uint64_t)"void __HTTPServer_ReadHandler(void *)", 0x14u, (uint64_t)"### Connection read error: %#m\n", v6, v7, v8, v9, v10);
  }
LABEL_25:
  dispatch_source_cancel(*(dispatch_source_t *)(a1 + 152));
}

void __HTTPServer_CancelHandler(_QWORD *context)
{
  uint64_t v2;
  void (*v3)(_QWORD *);

  v2 = context[1];
  v3 = *(void (**)(_QWORD *))(v2 + 56);
  if (v3)
  {
    v3(context);
    v2 = context[1];
  }
  dispatch_async_f(*(dispatch_queue_t *)(v2 + 112), context, (dispatch_function_t)__HTTPServer_RemoveConnection);
}

void __HTTPServer_RemoveConnection(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  _QWORD *v9;
  _QWORD *v10;
  NSObject *v11;
  NSObject *v12;

  v9 = (_QWORD *)(*(_QWORD *)(a1 + 8) + 184);
  while (1)
  {
    v10 = v9;
    v9 = (_QWORD *)*v9;
    if (!v9)
      break;
    if (v9 == (_QWORD *)a1)
    {
      *v10 = *(_QWORD *)a1;
      break;
    }
  }
  v11 = *(NSObject **)(a1 + 144);
  if (v11)
  {
    dispatch_release(v11);
    v12 = *(NSObject **)(a1 + 152);
    if (v12)
    {
      dispatch_source_cancel(v12);
      dispatch_release(*(dispatch_object_t *)(a1 + 152));
    }
  }
  else
  {
    __HTTPServer_FinalizeConnection(a1, a2, a3, a4, a5, a6, a7, a8);
  }
}

uint64_t HTTPServer_GetNextURLSegment(uint64_t *a1, unint64_t *a2, _QWORD *a3, _DWORD *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  _BYTE *v13;
  int v14;
  int v15;
  uint64_t v16;
  uint64_t v17;

  v10 = a1[1066];
  v11 = a1[1067];
  if (v10 >= v11 || *(_BYTE *)v10 == 47)
    goto LABEL_26;
  v12 = 0;
  v13 = (_BYTE *)a1[1067];
  while (~v10 + v11 != v12)
  {
    v14 = *(unsigned __int8 *)(v10 + v12++ + 1);
    if (v14 == 47)
    {
      v13 = (_BYTE *)(v10 + v12);
      break;
    }
  }
  if (v13 == (_BYTE *)v10)
  {
LABEL_26:
    if (a1[1051])
    {
      if (gLogCategory_HTTPServer <= 50
        && (gLogCategory_HTTPServer != -1 || _LogCategory_Initialize((uint64_t)&gLogCategory_HTTPServer, 0x32u)))
      {
        LogPrintF((uint64_t)&gLogCategory_HTTPServer, (uint64_t)"Boolean HTTPServer_GetNextURLSegment(HTTPServerConnectionRef, const char **, size_t *, OSStatus *)", 0x32u, (uint64_t)"### HTTP URL segment not found: '%.*s %.*s'\n", a5, a6, a7, a8, a1[1048]);
      }
    }
    else if (gLogCategory_HTTPServer <= 60
           && (gLogCategory_HTTPServer != -1 || _LogCategory_Initialize((uint64_t)&gLogCategory_HTTPServer, 0x3Cu)))
    {
      LogPrintF((uint64_t)&gLogCategory_HTTPServer, (uint64_t)"Boolean HTTPServer_GetNextURLSegment(HTTPServerConnectionRef, const char **, size_t *, OSStatus *)", 0x3Cu, (uint64_t)"### Corrupt HTTP request:\n%.*s\n", a5, a6, a7, a8, a1[1044]);
    }
    v15 = HTTPServer_SendStatusResponse((uint64_t)a1, 400, (uint64_t)a3, (uint64_t)a4, a5, a6, a7, a8);
    v17 = 0;
  }
  else
  {
    v15 = 0;
    *a2 = v10;
    *a3 = &v13[-v10];
    if ((unint64_t)v13 >= v11)
      v16 = (uint64_t)v13;
    else
      v16 = (uint64_t)(v13 + 1);
    a1[1066] = v16;
    v17 = 1;
  }
  *a4 = v15;
  return v17;
}

uint64_t HTTPServer_SendStatusResponse(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t result;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char v17;

  result = HTTPServer_InitResponse(a1, a2, a3, a4, a5, a6, a7, a8);
  if (!(_DWORD)result)
  {
    HTTPHeader_SetField((char *)(a1 + 139720), "Content-Length", (uint64_t)"0", v10, v11, v12, v13, v14, v17);
    result = HTTPHeader_Commit(a1 + 139720);
    if (!(_DWORD)result)
    {
      LogHTTP(*(_QWORD *)(a1 + 279280), *(int **)(a1 + 279288), (unsigned __int8 *)(a1 + 139720), *(_QWORD *)(a1 + 147912), 0, 0, v15, v16);
      return (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 24) + 32))();
    }
  }
  return result;
}

uint64_t HTTPServer_InitResponse(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  char *v10;
  time_t v11;
  const char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t (*v18)(uint64_t, uint64_t);
  uint64_t result;
  char v20[64];
  uint64_t v21;

  v21 = *MEMORY[0x1E0C80C00];
  v10 = (char *)(a1 + 139720);
  HTTPHeader_InitResponseEx(a1 + 139720, "HTTP/1.1", a2, 0, 0, a6, a7, a8);
  v11 = time(0);
  v12 = HTTPMakeDateString(v11, v20, 0x40uLL);
  if (*v12)
    HTTPHeader_SetField(v10, "Date", (uint64_t)"%s", v13, v14, v15, v16, v17, (char)v12);
  v18 = *(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(a1 + 8) + 72);
  if (!v18)
    return 0;
  result = v18(a1, a2);
  if (!(_DWORD)result)
    return 0;
  return result;
}

uint64_t HTTPServer_GetOrCopyFormVariable(unint64_t *a1, unsigned __int8 *a2, _QWORD *a3, _QWORD *a4, char **a5)
{
  uint64_t result;

  result = URLGetOrCopyVariable(a1[1062], (_BYTE *)(a1[1062] + a1[1063]), a2, a3, a4, a5, 0);
  if ((_DWORD)result)
    return URLGetOrCopyVariable((unint64_t)(a1 + 1080), (_BYTE *)a1 + a1[17464] + 8640, a2, a3, a4, a5, 0);
  return result;
}

uint64_t HTTPServer_SendSimpleResponse(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t result;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;

  result = HTTPServer_InitResponse(a1, a2, a3, a4, a5, a6, a7, a8);
  if (!(_DWORD)result)
  {
    if (a3)
      HTTPHeader_SetField((char *)(a1 + 139720), "Content-Type", (uint64_t)"%s", v13, v14, v15, v16, v17, a3);
    HTTPHeader_SetField((char *)(a1 + 139720), "Content-Length", (uint64_t)"%zu", v13, v14, v15, v16, v17, a5);
    result = HTTPHeader_Commit(a1 + 139720);
    if (!(_DWORD)result)
    {
      LogHTTP(*(_QWORD *)(a1 + 279280), *(int **)(a1 + 279288), (unsigned __int8 *)(a1 + 139720), *(_QWORD *)(a1 + 147912), a4, a5, v18, v19);
      return (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 24) + 40))();
    }
  }
  return result;
}

uint64_t HTTPServer_SendUnauthorizedResponse(uint64_t a1, char a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t result;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char v23;

  result = HTTPServer_InitResponse(a1, 401, a3, a4, a5, a6, a7, a8);
  if (!(_DWORD)result)
  {
    HTTPHeader_SetField((char *)(a1 + 139720), "Content-Length", (uint64_t)"0", v11, v12, v13, v14, v15, v23);
    HTTPHeader_SetField((char *)(a1 + 139720), "WWW-Authenticate", (uint64_t)"Digest realm=\"%s\", nonce=\"%s\"%s", v16, v17, v18, v19, v20, a2);
    result = HTTPHeader_Commit(a1 + 139720);
    if (!(_DWORD)result)
    {
      LogHTTP(*(_QWORD *)(a1 + 279280), *(int **)(a1 + 279288), (unsigned __int8 *)(a1 + 139720), *(_QWORD *)(a1 + 147912), 0, 0, v21, v22);
      return (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 24) + 32))();
    }
  }
  return result;
}

uint64_t HTTPHeader_InitRequest(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  return HTTPHeader_InitRequestF(a1, a4, a2, (uint64_t)"%s", a5, a6, a7, a8, a3);
}

uint64_t HTTPHeader_InitRequestF(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  return HTTPHeader_InitRequestV(a1, a2, a3, a4, (uint64_t)&a9, a6, a7, a8);
}

uint64_t HTTPHeader_InitRequestV(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned int v9;
  unsigned int v10;
  uint64_t result;

  v9 = SNPrintF(a1, 0x2000, (uint64_t)"%s%n %n%V%n %s\r\n", a4, a5, a6, a7, a8, a3);
  if (v9 - 0x2000 < 0xFFFFE001)
  {
    result = 4294960545;
  }
  else
  {
    v10 = v9;
    result = 0;
    *(_QWORD *)(a1 + 8216) = a1;
    *(_QWORD *)(a1 + 8224) = 0;
    *(_QWORD *)(a1 + 8240) = a1;
    *(_QWORD *)(a1 + 8248) = 0;
    *(_QWORD *)(a1 + 0x2000) = v10;
  }
  *(_DWORD *)(a1 + 8476) = result;
  return result;
}

uint64_t HTTPHeader_InitResponse(uint64_t a1, const char *a2, int a3, const char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  return HTTPHeader_InitResponseEx(a1, a2, a3, a4, 0, a6, a7, a8);
}

uint64_t HTTPHeader_InitResponseEx(uint64_t a1, const char *a2, int a3, const char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v8;
  const char *v10;
  unsigned int v11;
  uint64_t v12;

  v8 = a5;
  if (a2)
    v10 = a2;
  else
    v10 = "HTTP/1.1";
  if (a4)
  {
    if ((_DWORD)a5)
    {
LABEL_6:
      v11 = SNPrintF(a1, 0x2000, (uint64_t)"%s %u %s (%d)\r\n", (uint64_t)a4, a5, a6, a7, a8, (uint64_t)v10);
      goto LABEL_9;
    }
  }
  else
  {
    a4 = HTTPGetReasonPhrase(a3);
    if (v8)
      goto LABEL_6;
  }
  v11 = SNPrintF(a1, 0x2000, (uint64_t)"%s %u %s\r\n", (uint64_t)a4, a5, a6, a7, a8, (uint64_t)v10);
LABEL_9:
  if (v11 - 0x2000 < 0xFFFFE001)
  {
    v12 = 4294960545;
  }
  else
  {
    v12 = 0;
    *(_QWORD *)(a1 + 0x2000) = v11;
  }
  *(_DWORD *)(a1 + 8476) = v12;
  return v12;
}

uint64_t HTTPHeader_Commit(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v1 = *(unsigned int *)(a1 + 8476);
  if (!(_DWORD)v1)
  {
    v2 = *(_QWORD *)(a1 + 0x2000);
    if (v2 == 4)
    {
      if (*(_BYTE *)a1 == 36)
      {
LABEL_8:
        v1 = 0;
        *(_DWORD *)(a1 + 8476) = -6721;
        return v1;
      }
    }
    else
    {
      if (!v2)
        return 4294960551;
      if ((unint64_t)(v2 - 8190) < 0xFFFFFFFFFFFFE000)
        return 4294960545;
    }
    *(_WORD *)(a1 + v2) = 2573;
    v3 = v2 + 2;
    *(_BYTE *)(a1 + v3) = 0;
    *(_QWORD *)(a1 + 0x2000) = v3;
    goto LABEL_8;
  }
  return v1;
}

uint64_t HTTPHeader_Uncommit(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  if (*(_DWORD *)(a1 + 8476) != -6721)
    return 4294960587;
  v1 = *(_QWORD *)(a1 + 0x2000);
  if ((unint64_t)(v1 - 0x2000) < 0xFFFFFFFFFFFFE005)
    return 4294960553;
  if (*(_BYTE *)(v1 + a1 - 4) != 13)
    return 4294960554;
  if (*(_BYTE *)(v1 + a1 - 3) != 10)
    return 4294960554;
  v2 = v1 - 2;
  if (*(_BYTE *)(a1 + v1 - 2) != 13 || *(_BYTE *)(v1 + a1 - 1) != 10)
    return 4294960554;
  v3 = 0;
  *(_QWORD *)(a1 + 0x2000) = v2;
  *(_DWORD *)(a1 + 8476) = 0;
  return v3;
}

uint64_t HTTPHeader_SetField(char *a1, char *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, char a9)
{
  return HTTPHeader_SetFieldV(a1, a2, a3, &a9);
}

uint64_t HTTPHeader_SetFieldV(char *__s, char *a2, uint64_t a3, const char *a4)
{
  uint64_t result;
  int64_t v6;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  unsigned int v15;
  unsigned int v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t (*v23)(unsigned __int8 *, int64_t, _QWORD);
  int64_t v24;
  char *v25;
  const char *v26[2];

  v26[1] = a4;
  result = *((unsigned int *)__s + 2119);
  if (!(_DWORD)result)
  {
    v6 = *((_QWORD *)__s + 1024);
    if ((unint64_t)(v6 - 0x2000) < 0xFFFFFFFFFFFFE003)
    {
      result = 4294960551;
      goto LABEL_19;
    }
    v25 = 0;
    v26[0] = 0;
    if (HTTPGetHeaderField(__s, v6, a2, v26, 0, 0, 0, &v25))
    {
      v13 = SNPrintF((uint64_t)&__s[v6], 0x2000 - v6, (uint64_t)"%s: %V\r\n", v8, v9, v10, v11, v12, (uint64_t)a2);
      if (v13 >= 1 && v13 < 0x2000 - (int)v6)
      {
        v15 = v13;
        result = 0;
        *((_QWORD *)__s + 1024) += v15;
        return result;
      }
      goto LABEL_17;
    }
    v16 = MemPrintF(0, 0, "%s: %V\r\n", v8, v9, v10, v11, v12, (uint64_t)a2);
    if ((int)v16 < 1)
    {
      result = 4294960579;
LABEL_19:
      if (!*((_DWORD *)__s + 2119))
        *((_DWORD *)__s + 2119) = result;
      return result;
    }
    v22 = v6 - (v25 - v26[0]) + v16;
    if (v22 >> 13)
    {
LABEL_17:
      result = 4294960545;
      goto LABEL_19;
    }
    v23 = (uint64_t (*)(unsigned __int8 *, int64_t, _QWORD))v16;
    v24 = v26[0] - (const char *)__s;
    if ((char *)(v25 - v26[0]) != (char *)v16)
      memmove((void *)&v26[0][v16], v25, v6 - (v25 - __s) + 1);
    MemPrintF((uint64_t (*)(unsigned __int8 *, int64_t, _QWORD))&__s[v24], v23, "%s: %V\r\n", v17, v18, v19, v20, v21, (uint64_t)a2);
    result = 0;
    *((_QWORD *)__s + 1024) = v22;
  }
  return result;
}

uint64_t HTTPGetHeaderField(char *__s, int64_t a2, char *a3, const char **a4, size_t *a5, const char **a6, _QWORD *a7, char **a8)
{
  int64_t v14;
  char *v15;
  size_t v16;
  char *v17;
  uint64_t v18;
  const char *v19;
  char *v20;
  int v21;
  const char *v23;
  uint64_t result;
  const char *v25;
  int v26;
  int v28;
  char *v30;
  int v31;
  char **v33;

  v14 = a2;
  v15 = __s;
  if (a2 == -1)
  {
    v14 = strlen(__s);
    if (a3)
      goto LABEL_3;
LABEL_5:
    v16 = 0;
    goto LABEL_6;
  }
  if (!a3)
    goto LABEL_5;
LABEL_3:
  v16 = strlen(a3);
LABEL_6:
  if (v14 < 1)
    return 4294960569;
  v33 = a8;
  v17 = &v15[v14];
  while (1)
  {
    v18 = 0;
    v19 = v15;
    v20 = v15;
    while (1)
    {
      v21 = *v20;
      if (v21 == 10 || v21 == 13)
        break;
      ++v20;
      ++v18;
      if (v20 >= v17)
        return 4294960569;
    }
    if (v21 == 13)
      v15 = v20 + 1;
    else
      v15 = v20;
    if (v15 < v17 && *v15 == 10)
      ++v15;
    if (!a3)
      break;
    if (v20 - v19 > v16 && v19[v16] == 58 && !strncasecmp(v19, a3, v16))
      goto LABEL_34;
LABEL_30:
    if (v15 >= v17)
      return 4294960569;
  }
  if (v19 >= v20)
    goto LABEL_30;
  v23 = v19;
  while (*v23 != 58)
  {
    ++v23;
    if (!--v18)
      goto LABEL_30;
  }
  v16 = v23 - v19;
LABEL_34:
  v25 = &v19[v16 + 1];
  if (v25 < v20)
  {
    while (1)
    {
      v26 = *(unsigned __int8 *)v25;
      if (v26 != 32 && v26 != 9)
        break;
      if (++v25 >= v20)
      {
        v25 = v20;
        break;
      }
    }
  }
  while (v15 < v17)
  {
    v28 = *v15;
    if (v28 != 32 && v28 != 9)
      break;
    v30 = v15 + 1;
    do
    {
      v20 = v30;
      if (v30 >= v17)
      {
        v15 = v30;
        goto LABEL_58;
      }
      v31 = *v30++;
    }
    while (v31 != 13 && v31 != 10);
    if (v31 == 13)
      v15 = v20 + 1;
    else
      v15 = v20;
LABEL_58:
    if (v15 < v17 && *v15 == 10)
      ++v15;
  }
  if (a4)
    *a4 = v19;
  if (a5)
    *a5 = v16;
  if (a6)
    *a6 = v25;
  if (a7)
    *a7 = v20 - v25;
  result = 0;
  if (v33)
    *v33 = v15;
  return result;
}

uint64_t HTTPHeader_SetField_safe(char *a1, char *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, char a9)
{
  return HTTPHeader_SetFieldV(a1, a2, a3, &a9);
}

uint64_t HTTPHeader_Parse(uint64_t a1)
{
  unint64_t v1;
  _BYTE *v3;
  _QWORD *v4;
  uint64_t result;
  uint64_t v6;
  _QWORD *v7;
  int v8;
  unint64_t v9;
  unint64_t v10;
  int v11;
  char *v12;
  int v13;
  unsigned __int8 *v14;
  int v15;
  unsigned __int8 *v16;
  unsigned __int8 *v17;
  unsigned __int8 v18;
  int v19;
  unsigned __int8 v20;
  unint64_t v21;
  char *v22;
  unsigned __int8 *v23;
  int v24;
  unsigned __int8 *v26;
  uint64_t v27;
  int v28;
  unsigned __int8 *v30;
  uint64_t v31;
  char *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  int v37;
  char *v38;
  uint64_t v39;

  v1 = *(_QWORD *)(a1 + 0x2000);
  if (v1 >> 13)
    return 4294960591;
  *(_QWORD *)(a1 + 8216) = "";
  *(_QWORD *)(a1 + 8224) = 0;
  v3 = (_BYTE *)(a1 + 8456);
  *(_DWORD *)(a1 + 8232) = 0;
  *(_QWORD *)(a1 + 8240) = "";
  v4 = (_QWORD *)(a1 + 8248);
  *(_QWORD *)(a1 + 8408) = 0;
  *(_OWORD *)(a1 + 8248) = 0u;
  *(_OWORD *)(a1 + 8264) = 0u;
  *(_OWORD *)(a1 + 8280) = 0u;
  *(_OWORD *)(a1 + 8296) = 0u;
  *(_OWORD *)(a1 + 8312) = 0u;
  *(_OWORD *)(a1 + 8328) = 0u;
  *(_OWORD *)(a1 + 8344) = 0u;
  *(_OWORD *)(a1 + 8360) = 0u;
  *(_OWORD *)(a1 + 8376) = 0u;
  *(_OWORD *)(a1 + 8392) = 0u;
  *(_QWORD *)(a1 + 8416) = "";
  *(_QWORD *)(a1 + 8424) = 0;
  *(_DWORD *)(a1 + 8432) = -1;
  *(_QWORD *)(a1 + 8440) = "";
  *(_QWORD *)(a1 + 8448) = 0;
  *(_BYTE *)(a1 + 8456) = 0;
  *(_QWORD *)(a1 + 8464) = 0;
  *(_BYTE *)(a1 + 8472) = 0;
  if (!v1)
    return 4294960554;
  if (v1 == 4 && *(_BYTE *)a1 == 36)
  {
    result = 0;
    *v3 = *(_BYTE *)(a1 + 1);
    *(_QWORD *)(a1 + 8464) = __rev16(*(unsigned __int16 *)(a1 + 2));
    *(_QWORD *)(a1 + 8216) = a1;
    *(_QWORD *)(a1 + 8224) = 1;
    return result;
  }
  v6 = 0;
  v7 = (_QWORD *)(a1 + 8424);
  v38 = 0;
  v39 = 0;
  v8 = a1 + 8464;
  v9 = a1 + v1;
  v10 = v1 - 1;
  while (1)
  {
    v11 = *(unsigned __int8 *)(a1 + v6);
    if (v11 == 32)
      break;
    if (v11 == 47)
    {
      *(_QWORD *)(a1 + 8416) = a1;
      v14 = (unsigned __int8 *)(a1 + v6 + 2);
      do
      {
        if ((unint64_t)(v14 - 1) >= v9)
        {
          *(_QWORD *)(a1 + 8424) = &v14[-a1 - 1];
          return 4294960554;
        }
        v16 = v14 - 1;
        v15 = *(v14++ - 1);
      }
      while (v15 != 32);
      *(_QWORD *)(a1 + 8424) = &v16[-a1];
      v17 = v16 + 1;
      if ((unint64_t)(v16 + 1) >= v9)
      {
        *(_DWORD *)(a1 + 8432) = 0;
      }
      else
      {
        v18 = *v17;
        if ((*v17 - 48) <= 9u)
        {
          v19 = 0;
          while (1)
          {
            v19 = 10 * v19 + v18 - 48;
            if ((unint64_t)v14 >= v9)
              break;
            v20 = *v14++;
            v18 = v20;
            if ((v20 - 48) > 9u)
            {
              v16 = v14 - 2;
              v17 = v14 - 1;
              goto LABEL_49;
            }
          }
          *(_DWORD *)(a1 + 8432) = v19;
          *(_QWORD *)(a1 + 8440) = v9;
          v17 = (unsigned __int8 *)(a1 + v1);
          v26 = (unsigned __int8 *)(a1 + v1);
          goto LABEL_66;
        }
        v19 = 0;
LABEL_49:
        *(_DWORD *)(a1 + 8432) = v19;
        if (v18 == 32)
          v17 = v16 + 2;
      }
      *(_QWORD *)(a1 + 8440) = v17;
      v26 = v17;
      if ((unint64_t)v17 >= v9)
      {
LABEL_66:
        *(_QWORD *)(a1 + 8448) = v26 - v17;
        return 4294960554;
      }
      v26 = (unsigned __int8 *)(v1 + a1);
      v27 = v1 + a1 - (_QWORD)v17;
      v23 = v17;
      while (1)
      {
        v28 = *v23;
        if (v28 == 10 || v28 == 13)
          break;
        ++v23;
        if (!--v27)
          goto LABEL_66;
      }
      v7 = (_QWORD *)(a1 + 8448);
      goto LABEL_60;
    }
    ++v6;
    if (a1 + v6 >= v9)
      return 4294960554;
  }
  v37 = a1 + 8464;
  *(_QWORD *)(a1 + 8216) = a1;
  v39 = v6;
  *(_QWORD *)(a1 + 8224) = v6;
  v12 = (char *)(a1 + v6 + 1);
  if (strnicmpx((unsigned __int8 *)a1, v6, "GET"))
  {
    if (strnicmpx((unsigned __int8 *)a1, v6, "POST"))
    {
      if (strnicmpx((unsigned __int8 *)a1, v6, "PUT"))
      {
        if (strnicmpx((unsigned __int8 *)a1, v6, "DELETE"))
          goto LABEL_31;
        v13 = 4;
      }
      else
      {
        v13 = 3;
      }
    }
    else
    {
      v13 = 2;
    }
  }
  else
  {
    v13 = 1;
  }
  *(_DWORD *)(a1 + 8232) = v13;
LABEL_31:
  *(_QWORD *)(a1 + 8240) = v12;
  if ((unint64_t)v12 >= v9)
  {
    v9 = (unint64_t)v12;
LABEL_37:
    *v4 = v9 - (_QWORD)v12;
    return 4294960554;
  }
  v21 = v10 - v6;
  v22 = v12;
  while (*v22 != 32)
  {
    ++v22;
    if (!--v21)
      goto LABEL_37;
  }
  *(_QWORD *)(a1 + 8248) = v22 - v12;
  v17 = (unsigned __int8 *)(v22 + 1);
  URLParseComponents(v12, v22, (char **)(a1 + 8256), 0);
  *(_QWORD *)(a1 + 8416) = v17;
  if ((unint64_t)v17 >= v9)
  {
    v9 = (unint64_t)v17;
LABEL_47:
    *v7 = v9 - (_QWORD)v17;
    return 4294960554;
  }
  v23 = v17;
  v8 = v37;
  while (1)
  {
    v24 = *v23;
    if (v24 == 10 || v24 == 13)
      break;
    if ((unint64_t)++v23 >= v9)
      goto LABEL_47;
  }
LABEL_60:
  *v7 = v23 - v17;
  if ((unint64_t)(v23 + 1) >= v9)
    return 4294960554;
  if (HTTPGetHeaderField((char *)a1, *(_QWORD *)(a1 + 0x2000), "Connection", 0, 0, (const char **)&v38, &v39, 0))
  {
    v30 = *(unsigned __int8 **)(a1 + 8416);
    v31 = *(_QWORD *)(a1 + 8424);
    v32 = "HTTP/1.0";
  }
  else
  {
    v30 = (unsigned __int8 *)v38;
    v31 = v39;
    v32 = "close";
  }
  v3[16] = strnicmpx(v30, v31, v32) != 0;
  HTTPScanFHeaderValue((char *)a1, *(_QWORD *)(a1 + 0x2000), "Content-Length", "%llu", v33, v34, v35, v36, v8);
  return 0;
}

uint64_t HTTPScanFHeaderValue(char *a1, int64_t a2, char *a3, unsigned __int8 *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, int a9)
{
  uint64_t result;
  size_t v11;
  char *v12;

  v11 = 0;
  v12 = 0;
  result = HTTPGetHeaderField(a1, a2, a3, 0, 0, (const char **)&v12, &v11, 0);
  if (!(_DWORD)result)
    return VSNScanF(v12, v11, a4, &a9);
  return result;
}

uint64_t HTTPParseParameter(char *a1, char *a2, char **a3, _QWORD *a4, char **a5, _QWORD *a6, char *a7, char **a8)
{
  char *v11;
  int64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  int v16;
  char *v17;
  char *v18;
  uint64_t v19;
  char *v20;
  char *v21;
  uint64_t v22;
  int v23;
  uint64_t result;
  int v25;
  int64_t v26;
  uint64_t v27;
  char v28;
  char *v29;
  uint64_t v30;
  int v31;

  if (a1 >= a2)
    return 4294960544;
  v11 = a1;
  v12 = a2 - a1;
  v13 = MEMORY[0x1E0C80978];
  do
  {
    v14 = *v11;
    if (*v11 < 0)
    {
      if (!__maskrune(v14, 0x4000uLL))
      {
LABEL_9:
        v15 = v11;
        while (1)
        {
          v16 = *v15;
          if ((v16 - 127) < 0xFFFFFFA1 || memchr("()<>@,;:\\\"[]?={} \t", v16, 0x13uLL))
            goto LABEL_14;
          ++v15;
          if (!--v12)
            goto LABEL_13;
        }
      }
    }
    else if ((*(_DWORD *)(v13 + 4 * v14 + 60) & 0x4000) == 0)
    {
      goto LABEL_9;
    }
    ++v11;
    --v12;
  }
  while (v12);
  v11 = a2;
LABEL_13:
  v15 = a2;
LABEL_14:
  if (v15 >= a2)
  {
    v20 = 0;
    v17 = 0;
    v18 = v15;
    goto LABEL_55;
  }
  v17 = (char *)(a2 - v15);
  v18 = v15;
  while (1)
  {
    v19 = *v18;
    if ((*v18 & 0x80000000) == 0)
    {
      if ((*(_DWORD *)(v13 + 4 * v19 + 60) & 0x4000) == 0)
        break;
      goto LABEL_20;
    }
    if (!__maskrune(v19, 0x4000uLL))
      break;
LABEL_20:
    ++v18;
    if (!--v17)
    {
      v20 = 0;
LABEL_22:
      v18 = a2;
      goto LABEL_55;
    }
  }
  v21 = v18 + 1;
  if (*v18 == 61)
  {
    do
    {
      v20 = v21;
      if (v21 >= a2)
      {
        v18 = v21;
        v17 = v21;
        goto LABEL_47;
      }
      v22 = *v21;
      if (*v21 < 0)
        v23 = __maskrune(v22, 0x4000uLL);
      else
        v23 = *(_DWORD *)(v13 + 4 * v22 + 60) & 0x4000;
      --v17;
      v21 = v20 + 1;
    }
    while (v23);
    if (*v20 == 34)
    {
      if (++v20 >= a2)
        return 4294960554;
      v17 = v20;
      result = 4294960554;
      while (*v17 != 34 || *(v17 - 1) == 92)
      {
        if (++v17 >= a2)
          return result;
      }
      v18 = v17 + 1;
    }
    else
    {
      v18 = v20;
      while (1)
      {
        v25 = *v18;
        if ((v25 - 127) < 0xFFFFFFA1 || memchr("()<>@,;:\\\"[]?={} \t", v25, 0x13uLL))
          break;
        ++v18;
        if (!--v17)
        {
          v18 = a2;
          v17 = a2;
          goto LABEL_47;
        }
      }
      v17 = v18;
    }
LABEL_47:
    if (v18 < a2)
    {
      v26 = a2 - v18;
      do
      {
        v27 = *v18;
        if (*v18 < 0)
        {
          if (!__maskrune(v27, 0x4000uLL))
            goto LABEL_55;
        }
        else if ((*(_DWORD *)(v13 + 4 * v27 + 60) & 0x4000) == 0)
        {
          goto LABEL_55;
        }
        ++v18;
        --v26;
      }
      while (v26);
      goto LABEL_22;
    }
  }
  else
  {
    v20 = 0;
    v17 = 0;
  }
LABEL_55:
  if (v18 < a2 && (v28 = *v18, memchr("()<>@,;:\\\"[]?={} \t", *v18, 0x13uLL)))
  {
    v29 = v18 + 1;
    do
    {
      v18 = v29;
      if (v29 >= a2)
        break;
      v30 = *v29;
      v31 = *v29 < 0 ? __maskrune(v30, 0x4000uLL) : *(_DWORD *)(v13 + 4 * v30 + 60) & 0x4000;
      v29 = v18 + 1;
    }
    while (v31);
  }
  else
  {
    v28 = 0;
  }
  if (a3)
    *a3 = v11;
  if (a4)
    *a4 = v15 - v11;
  if (a5)
    *a5 = v20;
  if (a6)
    *a6 = v17 - v20;
  if (a7)
    *a7 = v28;
  result = 0;
  if (a8)
    *a8 = v18;
  return result;
}

const char *HTTPMakeDateString(time_t a1, char *a2, size_t a3)
{
  tm *v5;
  tm v7;
  time_t v8;

  v8 = a1;
  memset(&v7, 0, sizeof(v7));
  v5 = gmtime_r(&v8, &v7);
  if (!v5)
    return "";
  *a2 = 0;
  strftime(a2, a3, "%a, %d %b %Y %H:%M:%S GMT", v5);
  return a2;
}

uint64_t HTTPParseByteRangeRequest(char *__s, int64_t a2, uint64_t *a3, uint64_t *a4)
{
  uint64_t v8;
  unint64_t v9;
  int v10;
  uint64_t v11;
  unint64_t v12;
  int v13;
  unint64_t v14;
  uint64_t v15;
  int v16;
  uint64_t v17;
  uint64_t result;

  if (a2 == -1)
    a2 = strlen(__s);
  if ((unint64_t)a2 < 6)
    return 4294960546;
  if (*(_DWORD *)__s != 1702132066 || *((_WORD *)__s + 2) != 15731)
    return 4294960540;
  if (a2 < 7)
    return 4294960546;
  if (__s[6] == 45)
  {
    if ((unint64_t)a2 >= 8)
    {
      v8 = 0;
      v9 = 7;
      while (1)
      {
        v10 = __s[v9];
        if ((v10 - 48) > 9)
          break;
        v8 = (v10 - 48) + 10 * v8;
        if (a2 == ++v9)
        {
          v9 = a2;
          break;
        }
      }
      if (v9 >= 8)
      {
        v11 = -v8;
LABEL_32:
        v17 = -1;
        goto LABEL_33;
      }
    }
    return 4294960559;
  }
  v11 = 0;
  v12 = 6;
  while (1)
  {
    v13 = __s[v12];
    if ((v13 - 48) > 9)
      break;
    v11 = (v13 - 48) + 10 * v11;
    if (a2 == ++v12)
    {
      v12 = a2;
      break;
    }
  }
  if (v12 < 7)
    return 4294960559;
  if (v13 != 45)
    return 4294960554;
  v14 = v12 + 1;
  if ((uint64_t)(v12 + 1) >= a2)
    goto LABEL_32;
  v15 = 0;
  while (1)
  {
    v16 = __s[v14];
    if ((v16 - 48) > 9)
      break;
    v15 = (v16 - 48) + 10 * v15;
    if (a2 == ++v14)
    {
      v14 = a2;
      break;
    }
  }
  if (v14 < 7)
    return 4294960559;
  if (v11 <= v15)
  {
    v17 = v15 + 1;
LABEL_33:
    result = 0;
    *a3 = v11;
    *a4 = v17;
    return result;
  }
  return 4294960586;
}

uint64_t HTTPParseCacheControlHeader(char *__s, size_t a2, uint64_t a3)
{
  char *v5;
  uint64_t result;
  size_t v7;
  char *v8;
  char *__sa;

  __sa = __s;
  if (a2 == -1)
    a2 = strlen(__s);
  v5 = &__s[a2];
  v7 = 0;
  v8 = 0;
  while (!HTTPGetHeaderField(__sa, v5 - __sa, "Cache-Control", 0, 0, (const char **)&v8, &v7, &__sa))
  {
    result = HTTPParseCacheControlValue(v8, v7, a3);
    if ((_DWORD)result)
      return result;
  }
  return 0;
}

uint64_t HTTPParseCacheControlValue(char *__s, size_t a2, uint64_t a3)
{
  char *v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v17;
  size_t v18;
  char *v19;
  uint64_t v20;
  char *v21;
  char *v22;

  v4 = __s;
  v22 = __s;
  if (a2 == -1)
    a2 = strlen(__s);
  v5 = &v4[a2];
  v20 = 0;
  v21 = 0;
  v18 = 0;
  v19 = 0;
  v17 = 0;
  while (1)
  {
    if (HTTPParseParameter(v4, v5, &v21, &v20, &v19, &v18, 0, &v22))
      return 0;
    if (!strnicmpx((unsigned __int8 *)v21, v20, "no-cache"))
    {
      *(_BYTE *)a3 = 1;
      goto LABEL_13;
    }
    if (!strnicmpx((unsigned __int8 *)v21, v20, "max-age"))
      break;
    if (!strnicmpx((unsigned __int8 *)v21, v20, "s-maxage"))
    {
      if (SNScanF(v19, v18, "%lld", v11, v12, v13, v14, v15, (int)&v17) != 1)
        return 4294960559;
      *(_QWORD *)(a3 + 16) = v17;
    }
LABEL_13:
    v4 = v22;
  }
  if (SNScanF(v19, v18, "%lld", v6, v7, v8, v9, v10, (int)&v17) == 1)
  {
    *(_QWORD *)(a3 + 8) = v17;
    goto LABEL_13;
  }
  return 4294960559;
}

uint64_t HTTPParseRTPInfo(char *a1, int64_t a2, _WORD *a3, _DWORD *a4)
{
  uint64_t result;
  char v7;
  char v8;
  __int16 v9;
  int v10;
  char *v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  int v23;
  size_t v24;
  char *v25;
  uint64_t v26;
  char *v27;
  uint64_t v28;
  char *v29;

  v28 = 0;
  v29 = 0;
  v26 = 0;
  v27 = 0;
  v24 = 0;
  v25 = 0;
  v23 = 0;
  result = HTTPGetHeaderField(a1, a2, "RTP-Info", 0, 0, (const char **)&v29, &v28, 0);
  if (!(_DWORD)result)
  {
    v7 = 0;
    v8 = 0;
    v9 = 0;
    v10 = 0;
    v11 = v29;
    v12 = &v29[v28];
    while (!HTTPParseParameter(v11, v12, &v27, &v26, &v25, &v24, 0, &v29))
    {
      if (strnicmpx((unsigned __int8 *)v27, v26, "seq"))
      {
        if (!strnicmpx((unsigned __int8 *)v27, v26, "rtptime"))
        {
          if (SNScanF(v25, v24, "%u", v18, v19, v20, v21, v22, (int)&v23) != 1)
            return 4294960554;
          v8 = 1;
          v10 = v23;
        }
      }
      else
      {
        if (SNScanF(v25, v24, "%u", v13, v14, v15, v16, v17, (int)&v23) != 1)
          return 4294960554;
        v9 = v23;
        v7 = 1;
      }
      v11 = v29;
    }
    if (a3)
    {
      if ((v7 & 1) == 0)
        return 4294960569;
      *a3 = v9;
    }
    if (a4)
      result = 4294960569;
    else
      result = 0;
    if (((a4 != 0) & v8) == 1)
    {
      result = 0;
      *a4 = v10;
    }
  }
  return result;
}

uint64_t HTTPMakeTimedNonce(const void *a1, CC_LONG a2, const void *a3, CC_LONG a4, _BYTE *a5, unint64_t a6, _QWORD *a7)
{
  time_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  CC_LONG v20;
  char *v21;
  uint64_t result;
  uint64_t v23;
  uint64_t v24;
  CC_MD5_CTX c;
  char data[64];
  uint64_t v27;

  v27 = *MEMORY[0x1E0C80C00];
  if (!a6)
    return 4294960591;
  memset(&c, 0, sizeof(c));
  v24 = 0;
  v14 = time(0);
  v20 = SNPrintF((uint64_t)data, 64, (uint64_t)"%u", v15, v16, v17, v18, v19, v14);
  CC_MD5_Init(&c);
  CC_MD5_Update(&c, data, v20);
  CC_MD5_Update(&c, ":", 1u);
  CC_MD5_Update(&c, a1, a2);
  CC_MD5_Update(&c, ":", 1u);
  CC_MD5_Update(&c, a3, a4);
  v21 = &data[v20];
  *v21 = 32;
  CC_MD5_Final((unsigned __int8 *)v21 + 1, &c);
  result = Base64EncodeEx(data, (int)(v20 + 17), 0, a5, a6, &v24);
  if (!(_DWORD)result)
  {
    v23 = v24;
    a5[v24] = 0;
    result = 0;
    if (a7)
      *a7 = v23;
  }
  return result;
}

uint64_t HTTPVerifyTimedNonce(char *a1, size_t a2, unsigned int a3, const void *a4, CC_LONG a5, const void *a6, CC_LONG a7)
{
  uint64_t result;
  int v13;
  int v14;
  unsigned __int8 *v15;
  unsigned __int8 *v16;
  int v17;
  _QWORD *v18;
  uint64_t v19;
  CC_MD5_CTX v21;
  uint64_t v22;
  unsigned __int8 md[8];
  uint64_t v24;
  _BYTE data[64];
  uint64_t v26;

  v26 = *MEMORY[0x1E0C80C00];
  v22 = 0;
  memset(&v21, 0, sizeof(v21));
  result = Base64Decode(a1, a2, data, 64, &v22);
  if (!(_DWORD)result)
  {
    v13 = time(0);
    if (v22 < 1)
      return 4294960554;
    v14 = 0;
    v15 = &data[v22];
    v16 = data;
    while (1)
    {
      v17 = *v16;
      if ((v17 - 48) > 9)
        break;
      v14 = v17 - 48 + 10 * v14;
      if (++v16 >= v15)
        return 4294960554;
    }
    if (v17 == 32)
    {
      if (v13 - v14 > a3)
      {
        return 4294960574;
      }
      else
      {
        v18 = v16 + 1;
        v22 = v15 - (v16 + 1);
        if (v22 == 16)
        {
          v19 = v16 - data;
          CC_MD5_Init(&v21);
          CC_MD5_Update(&v21, data, v19);
          CC_MD5_Update(&v21, ":", 1u);
          CC_MD5_Update(&v21, a4, a5);
          CC_MD5_Update(&v21, ":", 1u);
          CC_MD5_Update(&v21, a6, a7);
          CC_MD5_Final(md, &v21);
          if (*(_QWORD *)md == *v18 && v24 == v18[1])
            return 0;
          else
            return 4294960563;
        }
        else
        {
          return 4294960553;
        }
      }
    }
    else
    {
      return 4294960554;
    }
  }
  return result;
}

double HTTPClientAuthorization_Init(uint64_t a1)
{
  double result;

  *(_DWORD *)a1 = 0;
  *(_BYTE *)(a1 + 4) = 0;
  result = 0.0;
  *(_OWORD *)(a1 + 8) = 0u;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_OWORD *)(a1 + 72) = 0u;
  *(_OWORD *)(a1 + 88) = 0u;
  *(_OWORD *)(a1 + 104) = 0u;
  *(_OWORD *)(a1 + 120) = 0u;
  *(_OWORD *)(a1 + 136) = 0u;
  *(_OWORD *)(a1 + 152) = 0u;
  *(_DWORD *)(a1 + 168) = 0;
  return result;
}

void HTTPClientAuthorization_Free(_QWORD *a1)
{
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;

  v2 = (void *)a1[5];
  if (v2)
  {
    free(v2);
    a1[5] = 0;
  }
  a1[6] = 0;
  v3 = (void *)a1[7];
  if (v3)
  {
    free(v3);
    a1[7] = 0;
  }
  a1[8] = 0;
  v4 = (void *)a1[9];
  if (v4)
  {
    free(v4);
    a1[9] = 0;
  }
  a1[10] = 0;
  v5 = (void *)a1[11];
  if (v5)
  {
    free(v5);
    a1[11] = 0;
  }
  a1[12] = 0;
  v6 = (void *)a1[13];
  if (v6)
  {
    free(v6);
    a1[13] = 0;
  }
  a1[14] = 0;
  v7 = (void *)a1[15];
  if (v7)
  {
    free(v7);
    a1[15] = 0;
  }
  a1[16] = 0;
  v8 = (void *)a1[17];
  if (v8)
  {
    free(v8);
    a1[17] = 0;
  }
  a1[18] = 0;
  v9 = (void *)a1[19];
  if (v9)
  {
    free(v9);
    a1[19] = 0;
  }
  a1[20] = 0;
}

uint64_t HTTPClientAuthorization_Apply(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  uint64_t v10;
  uint64_t result;
  const char *v12;
  int64_t v13;
  char *v14;
  char *v15;
  int v16;
  char *v17;
  char *v18;
  char *v19;
  int64_t v20;
  int64_t v21;
  int64_t v22;
  int64_t v23;
  int64_t v24;
  int64_t v25;
  int64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  char *v35;
  char *v36;
  int64_t v37;
  char *v38;

  v8 = *(_QWORD *)(a1 + 24);
  if (!v8)
    return 4294960591;
  v10 = *(_QWORD *)(a1 + 32);
  if (!v10 || !*(_QWORD *)(v8 + 8224) || !*(_QWORD *)(v8 + 8248))
    return 4294960591;
  if (*(_DWORD *)(v10 + 8432) != 401)
  {
    result = *(unsigned int *)(a1 + 168);
    switch((_DWORD)result)
    {
      case 0:
        return result;
      case 1:
        return _HTTPAddBasicAuth(a1, a2, a3, a4, a5, a6, a7, a8);
      case 2:
        return _HTTPAddDigestAuth(a1);
    }
    return 4294960591;
  }
  v37 = 0;
  v38 = 0;
  v34 = 0;
  v35 = 0;
  HTTPClientAuthorization_Free((_QWORD *)a1);
  if (HTTPGetHeaderField(*(char **)(a1 + 32), *(_QWORD *)(*(_QWORD *)(a1 + 32) + 0x2000), "WWW-Authenticate", 0, 0, (const char **)&v38, &v37, 0))return 4294960554;
  v13 = v37;
  v12 = v38;
  v14 = &v38[v37];
  v15 = v38;
  if (v37 >= 1)
  {
    v15 = v38;
    while (1)
    {
      v16 = *v15;
      if ((v16 - 127) < 0xFFFFFFA1 || memchr("()<>@,;:\\\"[]?={} \t", v16, 0x13uLL))
        break;
      ++v15;
      if (!--v13)
      {
        v15 = v14;
        break;
      }
    }
  }
  v36 = v15;
  v17 = strndup(v12, v15 - v12);
  if (!v17)
    return 4294960568;
  *(_QWORD *)(a1 + 56) = v17;
  *(_QWORD *)(a1 + 64) = v15 - v12;
  while (!HTTPParseParameter(v15, v14, &v35, &v34, &v38, &v37, 0, &v36))
  {
    v18 = strndup(v38, v37);
    if (!v18)
      return 4294960568;
    v19 = v18;
    if (strnicmpx((unsigned __int8 *)v35, v34, "realm"))
    {
      if (strnicmpx((unsigned __int8 *)v35, v34, "nonce"))
      {
        if (strnicmpx((unsigned __int8 *)v35, v34, "qop"))
        {
          if (strnicmpx((unsigned __int8 *)v35, v34, "algorithm"))
          {
            if (strnicmpx((unsigned __int8 *)v35, v34, "domain"))
            {
              if (strnicmpx((unsigned __int8 *)v35, v34, "opaque"))
              {
                if (strnicmpx((unsigned __int8 *)v35, v34, "stale"))
                {
                  free(v19);
                }
                else
                {
                  v26 = v37;
                  *(_QWORD *)(a1 + 152) = v19;
                  *(_QWORD *)(a1 + 160) = v26;
                }
              }
              else
              {
                v25 = v37;
                *(_QWORD *)(a1 + 104) = v19;
                *(_QWORD *)(a1 + 112) = v25;
              }
            }
            else
            {
              v24 = v37;
              *(_QWORD *)(a1 + 72) = v19;
              *(_QWORD *)(a1 + 80) = v24;
            }
          }
          else
          {
            v23 = v37;
            *(_QWORD *)(a1 + 40) = v19;
            *(_QWORD *)(a1 + 48) = v23;
          }
        }
        else
        {
          v22 = v37;
          *(_QWORD *)(a1 + 136) = v19;
          *(_QWORD *)(a1 + 144) = v22;
        }
      }
      else
      {
        v21 = v37;
        *(_QWORD *)(a1 + 88) = v19;
        *(_QWORD *)(a1 + 96) = v21;
      }
    }
    else
    {
      v20 = v37;
      *(_QWORD *)(a1 + 120) = v19;
      *(_QWORD *)(a1 + 128) = v20;
    }
    v15 = v36;
  }
  if (!strnicmpx(*(unsigned __int8 **)(a1 + 56), *(_QWORD *)(a1 + 64), "Basic"))
    return _HTTPAddBasicAuth(a1, v27, v28, v29, v30, v31, v32, v33);
  if (strnicmpx(*(unsigned __int8 **)(a1 + 56), *(_QWORD *)(a1 + 64), "Digest"))
    return 4294960561;
  return _HTTPAddDigestAuth(a1);
}

uint64_t _HTTPAddDigestAuth(uint64_t a1)
{
  const char *v2;
  const char *v3;
  uint64_t result;
  CC_LONG v5;
  CC_LONG v6;
  const char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  const char *v14[6];

  v14[5] = *(const char **)MEMORY[0x1E0C80C00];
  if ((*(_BYTE *)a1 & 2) == 0)
    return 4294960561;
  v2 = *(const char **)(a1 + 8);
  if (!v2)
    return 4294960542;
  v3 = *(const char **)(a1 + 16);
  if (!v3)
    return 4294960542;
  if (*(_DWORD *)(*(_QWORD *)(a1 + 32) + 8432) != 401)
    goto LABEL_10;
  v13 = 0;
  v14[0] = 0;
  HTTPGetHeaderField(*(char **)(a1 + 24), *(_QWORD *)(*(_QWORD *)(a1 + 24) + 0x2000), "Authorization", 0, 0, v14, &v13, 0);
  if (v13 && strnicmpx(*(unsigned __int8 **)(a1 + 152), *(_QWORD *)(a1 + 160), "true"))
    return 4294960542;
  result = HTTPHeader_Uncommit(*(_QWORD *)(a1 + 24));
  if (!(_DWORD)result)
  {
    v2 = *(const char **)(a1 + 8);
    v3 = *(const char **)(a1 + 16);
LABEL_10:
    v5 = strlen(v2);
    v6 = strlen(v3);
    if (*(_BYTE *)(a1 + 4))
      v7 = "0123456789ABCDEF";
    else
      v7 = "0123456789abcdef";
    _HTTPMakeAuthDigest(v2, v5, v3, v6, *(const void **)(*(_QWORD *)(a1 + 24) + 8216), *(_QWORD *)(*(_QWORD *)(a1 + 24) + 8224), *(const void **)(*(_QWORD *)(a1 + 24) + 8240), *(_QWORD *)(*(_QWORD *)(a1 + 24) + 8248), *(const void **)(a1 + 120), *(_QWORD *)(a1 + 128), *(const void **)(a1 + 88), *(_QWORD *)(a1 + 96), (uint64_t)v7, v14);
    result = HTTPHeader_SetField(*(char **)(a1 + 24), "Authorization", (uint64_t)"Digest username=\"%s\", realm=\"%.*s\", nonce=\"%.*s\", uri=\"%.*s\", response=\"%s\"", v8, v9, v10, v11, v12, *(_QWORD *)(a1 + 8));
    if (!(_DWORD)result)
      *(_DWORD *)(a1 + 168) = 2;
  }
  return result;
}

uint64_t _HTTPAddBasicAuth(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  void *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  _BYTE *v25;
  uint64_t v26;
  int v27;
  uint64_t v28;
  const char *v29;
  _BYTE *v30;
  void *v31;
  char *v32;

  if ((*(_BYTE *)a1 & 1) == 0)
    return 4294960561;
  v9 = *(_QWORD *)(a1 + 8);
  if (!v9 || !*(_QWORD *)(a1 + 16))
    return 4294960542;
  v31 = 0;
  v32 = 0;
  ASPrintF((void **)&v32, (uint64_t)"%s:%s", a3, a4, a5, a6, a7, a8, v9);
  v10 = v32;
  if (!v32)
    return 4294960568;
  v11 = Base64EncodeCopyEx(v32, 0xFFFFFFFFFFFFFFFFLL, 0, &v31, 0);
  free(v10);
  if ((_DWORD)v11)
    return v11;
  v30 = 0;
  v19 = v31;
  ASPrintF((void **)&v30, (uint64_t)"Basic %s", v12, v13, v14, v15, v16, v17, (uint64_t)v31);
  free(v19);
  v25 = v30;
  if (!v30)
    return 4294960568;
  if (*(_DWORD *)(*(_QWORD *)(a1 + 32) + 8432) == 401)
  {
    v28 = 0;
    v29 = 0;
    HTTPGetHeaderField(*(char **)(a1 + 24), *(_QWORD *)(*(_QWORD *)(a1 + 24) + 0x2000), "Authorization", 0, 0, &v29, &v28, 0);
    v26 = 0;
    while (v28 != v26)
    {
      v27 = v25[v26];
      if (v29[v26] != v27)
        goto LABEL_15;
      ++v26;
      if (!v27)
        goto LABEL_18;
    }
    if (!v25[v28])
    {
LABEL_18:
      v11 = 4294960542;
      goto LABEL_19;
    }
LABEL_15:
    v11 = HTTPHeader_Uncommit(*(_QWORD *)(a1 + 24));
    if (!(_DWORD)v11)
      goto LABEL_16;
LABEL_19:
    free(v25);
  }
  else
  {
LABEL_16:
    v11 = HTTPHeader_SetField(*(char **)(a1 + 24), "Authorization", (uint64_t)"%s", v20, v21, v22, v23, v24, (char)v25);
    free(v25);
    if (!(_DWORD)v11)
      *(_DWORD *)(a1 + 168) = 1;
  }
  return v11;
}

uint64_t _HTTPMakeAuthDigest(const void *a1, CC_LONG a2, const void *a3, CC_LONG a4, const void *a5, CC_LONG a6, const void *a7, CC_LONG a8, const void *a9, CC_LONG a10, const void *a11, CC_LONG a12, uint64_t a13, _BYTE *a14)
{
  uint64_t v21;
  char *v22;
  unint64_t v23;
  uint64_t v24;
  char *v25;
  unint64_t v26;
  CC_LONG v27;
  CC_LONG v28;
  uint64_t result;
  uint64_t i;
  unint64_t v31;
  CC_MD5_CTX c;
  char data[33];
  char __s[33];
  unsigned __int8 md[16];
  uint64_t v38;

  v38 = *MEMORY[0x1E0C80C00];
  memset(&c, 0, sizeof(c));
  CC_MD5_Init(&c);
  CC_MD5_Update(&c, a1, a2);
  CC_MD5_Update(&c, ":", 1u);
  CC_MD5_Update(&c, a9, a10);
  CC_MD5_Update(&c, ":", 1u);
  CC_MD5_Update(&c, a3, a4);
  CC_MD5_Final(md, &c);
  v21 = 0;
  v22 = __s;
  do
  {
    v23 = md[v21];
    *v22 = *(_BYTE *)(a13 + (v23 >> 4));
    v22[1] = *(_BYTE *)(a13 + (v23 & 0xF));
    v22 += 2;
    ++v21;
  }
  while (v21 != 16);
  *v22 = 0;
  CC_MD5_Init(&c);
  CC_MD5_Update(&c, a5, a6);
  CC_MD5_Update(&c, ":", 1u);
  CC_MD5_Update(&c, a7, a8);
  CC_MD5_Final(md, &c);
  v24 = 0;
  v25 = data;
  do
  {
    v26 = md[v24];
    *v25 = *(_BYTE *)(a13 + (v26 >> 4));
    v25[1] = *(_BYTE *)(a13 + (v26 & 0xF));
    v25 += 2;
    ++v24;
  }
  while (v24 != 16);
  *v25 = 0;
  CC_MD5_Init(&c);
  v27 = strlen(__s);
  CC_MD5_Update(&c, __s, v27);
  CC_MD5_Update(&c, ":", 1u);
  CC_MD5_Update(&c, a11, a12);
  CC_MD5_Update(&c, ":", 1u);
  v28 = strlen(data);
  CC_MD5_Update(&c, data, v28);
  result = CC_MD5_Final(md, &c);
  for (i = 0; i != 16; ++i)
  {
    v31 = md[i];
    *a14 = *(_BYTE *)(a13 + (v31 >> 4));
    a14[1] = *(_BYTE *)(a13 + (v31 & 0xF));
    a14 += 2;
  }
  *a14 = 0;
  return result;
}

uint64_t HTTPVerifyAuthorization(uint64_t a1)
{
  unsigned __int8 *v2;
  uint64_t v3;
  char *v4;
  char *v5;
  int v6;
  uint64_t v7;
  int v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  size_t v20;
  unsigned int (*v21)(uint64_t);
  char *v22;
  unsigned __int8 *v23;
  size_t v24;
  unsigned __int8 *v25;
  size_t v26;
  void *v27;
  const void *v28;
  uint64_t v29;
  int v30;
  const char *v31;
  uint64_t (*v32)(uint64_t, void **);
  uint64_t v33;
  CC_LONG v34;
  uint64_t (*v35)(uint64_t, void **);
  uint64_t v36;
  size_t v37;
  unsigned __int8 *v38;
  int v39;
  BOOL v40;
  uint64_t v42;
  char *v43;
  void *v44;
  char *__s;
  char *v46;
  uint64_t v47;
  char *v48;
  _BYTE v49[33];
  uint64_t v50;

  v50 = *MEMORY[0x1E0C80C00];
  __s = 0;
  if (!*(_DWORD *)a1)
    return 200;
  v47 = 0;
  v48 = 0;
  v46 = 0;
  v44 = 0;
  if (HTTPGetHeaderField(*(char **)(a1 + 64), *(_QWORD *)(a1 + 72), "Authorization", 0, 0, (const char **)&v48, &v47, 0))return 401;
  v3 = v47;
  v2 = (unsigned __int8 *)v48;
  v4 = &v48[v47];
  v5 = v48;
  if (v47 >= 1)
  {
    v5 = v48;
    while (1)
    {
      v6 = *v5;
      if ((v6 - 127) < 0xFFFFFFA1 || memchr("()<>@,;:\\\"[]?={} \t", v6, 0x13uLL))
        break;
      ++v5;
      if (!--v3)
      {
        v5 = v4;
        break;
      }
    }
  }
  v46 = v5;
  if (strnicmpx(v2, v5 - (char *)v2, "Basic"))
  {
    if (strnicmpx(v2, v5 - (char *)v2, "Digest"))
      return 400;
    v42 = 0;
    v43 = 0;
    if ((*(_BYTE *)a1 & 2) != 0)
    {
      *(_QWORD *)(a1 + 112) = 0;
      *(_QWORD *)(a1 + 120) = 0;
      *(_OWORD *)(a1 + 144) = 0u;
      *(_OWORD *)(a1 + 160) = 0u;
      *(_OWORD *)(a1 + 176) = 0u;
      *(_OWORD *)(a1 + 192) = 0u;
      *(_OWORD *)(a1 + 208) = 0u;
      *(_OWORD *)(a1 + 224) = 0u;
      *(_OWORD *)(a1 + 240) = 0u;
      *(_OWORD *)(a1 + 256) = 0u;
      *(_OWORD *)(a1 + 272) = 0u;
      while (!HTTPParseParameter(v46, v4, &v43, &v42, &v48, &v47, 0, &v46))
      {
        if (strnicmpx((unsigned __int8 *)v43, v42, "username"))
        {
          if (strnicmpx((unsigned __int8 *)v43, v42, "realm"))
          {
            if (strnicmpx((unsigned __int8 *)v43, v42, "nonce"))
            {
              if (strnicmpx((unsigned __int8 *)v43, v42, "uri"))
              {
                if (strnicmpx((unsigned __int8 *)v43, v42, "response"))
                {
                  if (strnicmpx((unsigned __int8 *)v43, v42, "algorithm"))
                  {
                    if (strnicmpx((unsigned __int8 *)v43, v42, "cnonce"))
                    {
                      if (strnicmpx((unsigned __int8 *)v43, v42, "opaque"))
                      {
                        if (strnicmpx((unsigned __int8 *)v43, v42, "qop"))
                        {
                          if (!strnicmpx((unsigned __int8 *)v43, v42, "nc"))
                          {
                            v10 = v47;
                            *(_QWORD *)(a1 + 272) = v48;
                            *(_QWORD *)(a1 + 280) = v10;
                          }
                        }
                        else
                        {
                          v19 = v47;
                          *(_QWORD *)(a1 + 256) = v48;
                          *(_QWORD *)(a1 + 264) = v19;
                        }
                      }
                      else
                      {
                        v18 = v47;
                        *(_QWORD *)(a1 + 240) = v48;
                        *(_QWORD *)(a1 + 248) = v18;
                      }
                    }
                    else
                    {
                      v17 = v47;
                      *(_QWORD *)(a1 + 224) = v48;
                      *(_QWORD *)(a1 + 232) = v17;
                    }
                  }
                  else
                  {
                    v16 = v47;
                    *(_QWORD *)(a1 + 208) = v48;
                    *(_QWORD *)(a1 + 216) = v16;
                  }
                }
                else
                {
                  v15 = v47;
                  *(_QWORD *)(a1 + 192) = v48;
                  *(_QWORD *)(a1 + 200) = v15;
                }
              }
              else
              {
                v14 = v47;
                *(_QWORD *)(a1 + 176) = v48;
                *(_QWORD *)(a1 + 184) = v14;
              }
            }
            else
            {
              v13 = v47;
              *(_QWORD *)(a1 + 160) = v48;
              *(_QWORD *)(a1 + 168) = v13;
            }
          }
          else
          {
            v12 = v47;
            *(_QWORD *)(a1 + 144) = v48;
            *(_QWORD *)(a1 + 152) = v12;
          }
        }
        else
        {
          v11 = v47;
          *(_QWORD *)(a1 + 112) = v48;
          *(_QWORD *)(a1 + 120) = v11;
        }
      }
      v20 = *(_QWORD *)(a1 + 168);
      if (!v20)
        return 400;
      v21 = *(unsigned int (**)(uint64_t))(a1 + 48);
      if (v21)
      {
        if (!v21(a1))
          return 401;
      }
      else
      {
        v28 = *(const void **)(a1 + 16);
        if (!v28)
          return 500;
        v29 = *(_QWORD *)(a1 + 24);
        if (!v29)
          return 500;
        v30 = HTTPVerifyTimedNonce(*(char **)(a1 + 160), v20, 0x78u, "YjM5ODQ4MDE0MmI3YTI4ZmQ1MzdjNGIxMDVmNzYxMDg=", 0x2Cu, v28, v29);
        if (v30)
        {
          if (v30 == -6722)
            *(_BYTE *)(a1 + 288) = 1;
          return 401;
        }
      }
      v44 = 0;
      v31 = *(const char **)(a1 + 8);
      if (v31)
        goto LABEL_54;
      v32 = *(uint64_t (**)(uint64_t, void **))(a1 + 32);
      if (v32)
      {
        v33 = v32(a1, &v44);
        if ((_DWORD)v33 != 200)
          return v33;
        v31 = (const char *)v44;
LABEL_54:
        v34 = strlen(v31);
        _HTTPMakeAuthDigest(*(const void **)(a1 + 112), *(_QWORD *)(a1 + 120), v31, v34, *(const void **)(a1 + 80), *(_QWORD *)(a1 + 88), *(const void **)(a1 + 96), *(_QWORD *)(a1 + 104), *(const void **)(a1 + 144), *(_QWORD *)(a1 + 152), *(const void **)(a1 + 160), *(_QWORD *)(a1 + 168), (uint64_t)"0123456789abcdef", v49);
        if (v44)
          free(v44);
        if (strnicmpx(*(unsigned __int8 **)(a1 + 192), *(_QWORD *)(a1 + 200), v49))
        {
          *(_BYTE *)(a1 + 289) = 1;
          return 401;
        }
        return 200;
      }
      return 500;
    }
    return 401;
  }
  if ((*(_BYTE *)a1 & 1) == 0)
    return 401;
  v8 = Base64DecodeCopy(v46, v4 - v5, &__s, 0);
  v9 = __s;
  if (v8 || (v22 = strchr(__s, 58)) == 0)
  {
    v7 = 400;
  }
  else
  {
    *v22 = 0;
    v23 = (unsigned __int8 *)(v22 + 1);
    *(_QWORD *)(a1 + 112) = v9;
    *(_QWORD *)(a1 + 120) = v22 + 1 - v9;
    *(_QWORD *)(a1 + 128) = v22 + 1;
    v24 = strlen(v22 + 1);
    *(_QWORD *)(a1 + 136) = v24;
    v44 = 0;
    v25 = *(unsigned __int8 **)(a1 + 8);
    if (v25)
    {
      v26 = v24;
      v27 = 0;
      goto LABEL_62;
    }
    v35 = *(uint64_t (**)(uint64_t, void **))(a1 + 32);
    if (v35)
    {
      v36 = v35(a1, &v44);
      if ((_DWORD)v36 == 200)
      {
        v27 = v44;
        v23 = *(unsigned __int8 **)(a1 + 128);
        v26 = *(_QWORD *)(a1 + 136);
        v25 = (unsigned __int8 *)v44;
LABEL_62:
        v37 = v26;
        v38 = v25;
        while (1)
        {
          if (!v37)
          {
            v40 = v25[v26] == 0;
            goto LABEL_69;
          }
          v39 = *v38;
          if (*v23 != v39)
            break;
          ++v38;
          ++v23;
          --v37;
          if (!v39)
          {
            v40 = 1;
            goto LABEL_69;
          }
        }
        v40 = 0;
LABEL_69:
        if (v27)
          free(v27);
        if (v40)
        {
          v7 = 200;
        }
        else
        {
          *(_BYTE *)(a1 + 289) = 1;
          v7 = 401;
        }
        goto LABEL_74;
      }
      v7 = v36;
    }
    else
    {
      v7 = 500;
    }
  }
LABEL_74:
  if (v9)
    free(v9);
  return v7;
}

uint64_t HTTPReadHeader(uint64_t a1, uint64_t (*a2)(void *, size_t, unint64_t *, uint64_t), uint64_t a3)
{
  unint64_t v6;
  _BYTE *v7;
  void *v8;
  size_t v9;
  size_t v10;
  uint64_t result;
  _BYTE *v12;
  int v13;
  unint64_t v14;
  _BYTE *v15;
  unint64_t v16;

  v6 = *(_QWORD *)(a1 + 0x2000);
  v7 = (_BYTE *)a1;
  do
  {
    while (1)
    {
LABEL_2:
      v8 = (void *)(a1 + v6);
      v9 = *(_QWORD *)(a1 + 8208);
      v16 = v9;
      v10 = 0x2000 - v6;
      if (v9)
      {
        if (v9 > v10)
          return 4294960591;
        memmove(v8, *(const void **)(a1 + 8200), v9);
        *(_QWORD *)(a1 + 8208) = 0;
      }
      else
      {
        v16 = 0x2000 - v6;
        if (v6 == 0x2000)
          return 4294960533;
        result = a2(v8, v10, &v16, a3);
        if ((_DWORD)result)
          return result;
        v9 = v16;
      }
      *(_QWORD *)(a1 + 0x2000) += v9;
      v6 += v9;
      v16 = v6;
      if (v6)
      {
        if (*(_BYTE *)a1 == 36)
          break;
      }
      v14 = a1 + v6;
LABEL_13:
      if ((unint64_t)v7 < v14)
      {
        while (1)
        {
          if (*v7 != 10)
          {
            ++v7;
            goto LABEL_13;
          }
          v16 = v14 - (_QWORD)v7;
          if (v14 - (unint64_t)v7 < 3)
            break;
          v12 = v7 + 1;
          v13 = v7[1];
          if (v13 == 13)
          {
            if (v7[2] == 10)
            {
              v15 = v7 + 3;
              goto LABEL_26;
            }
          }
          else if (v13 == 10)
          {
            goto LABEL_29;
          }
          ++v7;
          if ((unint64_t)v12 >= v14)
          {
            v7 = v12;
            goto LABEL_2;
          }
        }
        if (v14 - (_QWORD)v7 == 2 && v7[1] == 10)
        {
LABEL_29:
          v15 = v7 + 2;
          goto LABEL_26;
        }
      }
    }
  }
  while (v6 < 4);
  v14 = a1 + v6;
  v15 = (_BYTE *)(a1 + 4);
LABEL_26:
  *(_QWORD *)(a1 + 0x2000) = &v15[-a1];
  result = HTTPHeader_Parse(a1);
  if (!(_DWORD)result)
  {
    *(_QWORD *)(a1 + 8200) = v15;
    *(_QWORD *)(a1 + 8208) = v14 - (_QWORD)v15;
  }
  return result;
}

uint64_t HTTPReadLine(_QWORD *a1, uint64_t (*a2)(void), uint64_t a3, _QWORD *a4, _QWORD *a5)
{
  char *v9;
  int64_t i;
  char *v11;
  char *v12;
  char *v13;
  uint64_t v14;
  char *v15;
  uint64_t result;
  char *v17;
  _BYTE *v18;
  int64_t v19;

  v9 = (char *)(a1 + 1024);
  for (i = a1[1026]; ; a1[1026] = i)
  {
    v11 = (char *)a1[1025];
    if (i >= 1)
      break;
LABEL_6:
    v14 = a1[1024];
    if (i > (unint64_t)(0x2000 - v14))
      return 4294960553;
    v15 = (char *)a1 + v14;
    if ((char *)a1 + v14 != v11)
    {
      memmove((char *)a1 + v14, v11, i);
      a1[1025] = v15;
      i = a1[1026];
    }
    v19 = v9 - &v15[i];
    if (v9 == &v15[i])
      return 4294960533;
    result = a2();
    if ((_DWORD)result)
      return result;
    i = a1[1026] + v19;
  }
  v12 = &v11[i];
  v13 = (char *)a1[1025];
  while (*v13 != 10)
  {
    if (++v13 >= v12)
      goto LABEL_6;
  }
  if (v13 <= v11 || (v17 = v13 - 1, *(v13 - 1) != 13))
    v17 = v13;
  result = 0;
  *a4 = v11;
  *a5 = v17 - v11;
  v18 = v13 + 1;
  a1[1025] = v18;
  a1[1026] = v12 - v18;
  return result;
}

uint64_t NetSocket_HTTPReadHeader(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  _BYTE *v8;
  uint64_t result;
  unint64_t v10;
  int v12;
  _BYTE *v13;
  uint64_t v14;

  v6 = 0;
  v14 = 0x2000;
  v7 = 0x2000;
  v8 = (_BYTE *)a2;
LABEL_2:
  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t *, _QWORD, uint64_t))(a1 + 24))(a1, 1, v7, a2 + v6, &v14, 0, a3);
  if ((_DWORD)result)
    return result;
  v6 += v14;
  v10 = a2 + v6;
  if (*(_BYTE *)a2 != 36 || v6 <= 3)
  {
    while (1)
    {
      if ((unint64_t)v8 >= v10)
      {
LABEL_18:
        v7 = 0x2000 - v6;
        v14 = 0x2000 - v6;
        if (v6 != 0x2000)
          goto LABEL_2;
        return 4294960533;
      }
      if (*v8 == 10)
      {
        if (v10 - (unint64_t)v8 < 3)
        {
          if (v10 - (_QWORD)v8 != 2)
            goto LABEL_18;
          v12 = v8[1];
        }
        else
        {
          v12 = v8[1];
          if (v12 == 13)
          {
            if (v8[2] == 10)
            {
              v13 = v8 + 3;
              goto LABEL_21;
            }
            goto LABEL_17;
          }
        }
        if (v12 == 10)
        {
          v13 = v8 + 2;
          goto LABEL_21;
        }
      }
LABEL_17:
      ++v8;
    }
  }
  v13 = (_BYTE *)(a2 + 4);
LABEL_21:
  *(_QWORD *)(a2 + 0x2000) = &v13[-a2];
  result = HTTPHeader_Parse(a2);
  if (!(_DWORD)result)
  {
    *(_QWORD *)(a1 + 64) = v13;
    *(_QWORD *)(a1 + 72) = v10;
  }
  return result;
}

uint64_t LogHTTP(uint64_t result, int *a2, unsigned __int8 *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int *v12;
  int *v13;
  unint64_t v14;
  unsigned __int8 *v15;
  int v16;
  unsigned __int8 *v18;
  int v19;
  int *v21;
  int v22;
  const char *v23;
  const char *v24;
  unsigned __int8 *v25;
  int v26;
  const char *v27;
  uint64_t v28;

  if (result)
    v12 = (int *)result;
  else
    v12 = (int *)&gLogCategory_HTTPRequests;
  if (a2)
    v13 = a2;
  else
    v13 = (int *)&gLogCategory_HTTPResponses;
  if (*v12 > 40 || *v12 == -1 && (result = _LogCategory_Initialize((uint64_t)v12, 0x28u), !(_DWORD)result))
  {
    if (*v13 > 40)
      return result;
    if (*v13 == -1)
    {
      result = _LogCategory_Initialize((uint64_t)v13, 0x28u);
      if (!(_DWORD)result)
        return result;
    }
  }
  if (a4 < 1)
  {
    v19 = 0;
    v15 = a3;
  }
  else
  {
    v14 = (unint64_t)&a3[a4];
    v15 = a3;
    do
    {
      v16 = *v15;
      if (v16 == 10 || v16 == 13)
        break;
      ++v15;
    }
    while ((unint64_t)v15 < v14);
    v18 = a3;
    do
    {
      v19 = *v18;
      if (v19 == 32)
        break;
      ++v18;
    }
    while (v19 != 47 && (unint64_t)v18 < v14);
  }
  if (v19 == 32)
    v21 = v12;
  else
    v21 = v13;
  v22 = *v21;
  if (*v21 > 20)
    goto LABEL_50;
  if (v22 == -1)
  {
    result = _LogCategory_Initialize((uint64_t)v21, 0x14u);
    if (!(_DWORD)result)
    {
      v22 = *v21;
LABEL_50:
      if (v22 <= 40)
      {
        if (v22 != -1 || (result = _LogCategory_Initialize((uint64_t)v21, 0x28u), (_DWORD)result))
        {
          if (a3)
          {
            if (v19 == 32)
            {
              if (*v12 <= 50)
              {
                if (*v12 != -1)
                  return LogPrintF((uint64_t)v12, (uint64_t)"void LogHTTP(LogCategory *, LogCategory *, const void *, size_t, const void *, size_t)", 0x32u, (uint64_t)"HTTP Request:  %.*s\n", a5, a6, a7, a8, v15 - a3);
                result = _LogCategory_Initialize((uint64_t)v12, 0x32u);
                if ((_DWORD)result)
                  return LogPrintF((uint64_t)v12, (uint64_t)"void LogHTTP(LogCategory *, LogCategory *, const void *, size_t, const void *, size_t)", 0x32u, (uint64_t)"HTTP Request:  %.*s\n", a5, a6, a7, a8, v15 - a3);
              }
            }
            else if (*v13 <= 50)
            {
              if (*v13 != -1)
                return LogPrintF((uint64_t)v13, (uint64_t)"void LogHTTP(LogCategory *, LogCategory *, const void *, size_t, const void *, size_t)", 0x32u, (uint64_t)"HTTP Response: %.*s\n\n", a5, a6, a7, a8, v15 - a3);
              result = _LogCategory_Initialize((uint64_t)v13, 0x32u);
              if ((_DWORD)result)
                return LogPrintF((uint64_t)v13, (uint64_t)"void LogHTTP(LogCategory *, LogCategory *, const void *, size_t, const void *, size_t)", 0x32u, (uint64_t)"HTTP Response: %.*s\n\n", a5, a6, a7, a8, v15 - a3);
            }
          }
        }
      }
      return result;
    }
  }
  v23 = "-------------------- HTTP RESPONSE --------------------\n";
  if (v19 == 32)
    v23 = "==================== HTTP REQUEST  ====================\n";
  if (a3)
    v24 = v23;
  else
    v24 = "";
  if (a6 <= 0)
  {
LABEL_43:
    if (*v21 > 50)
      return result;
    if (*v21 == -1)
    {
      result = _LogCategory_Initialize((uint64_t)v21, 0x32u);
      if (!(_DWORD)result)
        return result;
    }
    v28 = (uint64_t)v24;
    v27 = "%s%{text}%{text}%s";
    return LogPrintF((uint64_t)v21, (uint64_t)"void LogHTTP(LogCategory *, LogCategory *, const void *, size_t, const void *, size_t)", 0x32u, (uint64_t)v27, a5, a6, a7, a8, v28);
  }
  v25 = (unsigned __int8 *)a5;
  while (1)
  {
    v26 = *v25;
    if ((v26 - 9) >= 5 && (v26 - 32) >= 0x5F)
      break;
    if ((unint64_t)++v25 >= a5 + a6)
      goto LABEL_43;
  }
  if (*v21 <= 50)
  {
    if (*v21 != -1 || (result = _LogCategory_Initialize((uint64_t)v21, 0x32u), (_DWORD)result))
    {
      v28 = (uint64_t)v24;
      v27 = "%s%{text}<< BINARY DATA >>\n%.1H\n";
      return LogPrintF((uint64_t)v21, (uint64_t)"void LogHTTP(LogCategory *, LogCategory *, const void *, size_t, const void *, size_t)", 0x32u, (uint64_t)v27, a5, a6, a7, a8, v28);
    }
  }
  return result;
}

uint64_t IEGetNext(_BYTE *a1, _BYTE *a2, _BYTE *a3, _QWORD *a4, _QWORD *a5, _QWORD *a6)
{
  uint64_t v6;
  _BYTE *v7;
  uint64_t result;

  if (a1 == a2)
    return 4294960569;
  if (a1 >= a2)
    return 4294960591;
  if ((unint64_t)(a2 - a1) < 2)
    return 4294960569;
  v6 = a1[1];
  v7 = &a1[v6 + 2];
  if (v7 > a2)
    return 4294960546;
  *a3 = *a1;
  *a4 = a1 + 2;
  *a5 = v6;
  result = 0;
  if (a6)
    *a6 = v7;
  return result;
}

uint64_t IEGetVendorSpecific(unsigned __int8 *a1, unint64_t a2, int a3, _QWORD *a4, _QWORD *a5, _QWORD *a6)
{
  unsigned __int8 *v6;
  unsigned __int8 *v7;
  int v8;
  uint64_t v9;
  uint64_t result;

  if ((uint64_t)(a2 - (_QWORD)a1) < 2)
    return 4294960569;
  v6 = a1;
  while (1)
  {
    v7 = v6;
    v8 = *v6;
    v9 = v6[1];
    v6 += v9 + 2;
    if (v8 == 221)
    {
      if (v6 < a1 || (unint64_t)v6 > a2)
        return 4294960553;
      if (v9 >= 4 && bswap32(*(_DWORD *)(v7 + 2)) == a3)
        break;
    }
    if ((uint64_t)(a2 - (_QWORD)v6) <= 1)
      return 4294960569;
  }
  *a4 = v7 + 6;
  *a5 = v9 - 4;
  result = 0;
  if (a6)
    *a6 = v6;
  return result;
}

uint64_t IEGetAppleGeneral(unsigned __int8 *a1, unint64_t a2, _BYTE *a3, _WORD *a4)
{
  uint64_t result;
  _BYTE *v7;
  unint64_t v8;
  _BYTE *v9;

  v8 = 0;
  v9 = 0;
  result = IEGetVendorSpecific(a1, a2, 234241, &v9, &v8, 0);
  if (!(_DWORD)result)
  {
    if (v8 >= 3)
    {
      result = 0;
      v7 = v9;
      *a3 = *v9;
      *a4 = bswap32(*(unsigned __int16 *)(v7 + 1)) >> 16;
    }
    else
    {
      return 4294960553;
    }
  }
  return result;
}

uint64_t IEBufferAppendIE(uint64_t a1, char a2, char *__s, size_t a4)
{
  uint64_t result;
  char *v6;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  char v11;
  uint64_t v12;

  result = *(unsigned int *)(a1 + 264);
  if (!(_DWORD)result)
  {
    v6 = __s;
    if (a4 == -1)
      a4 = strlen(__s);
    if (a4 > 0xFF || (v8 = *(_QWORD *)(a1 + 256), a4 + v8 + 2 > 0xFF))
    {
      result = 4294960553;
    }
    else
    {
      *(_QWORD *)(a1 + 256) = v8 + 1;
      *(_BYTE *)(a1 + v8) = a2;
      v9 = *(_QWORD *)(a1 + 256);
      *(_QWORD *)(a1 + 256) = v9 + 1;
      *(_BYTE *)(a1 + v9) = a4;
      if (a4)
      {
        v10 = &v6[a4];
        do
        {
          v11 = *v6++;
          v12 = *(_QWORD *)(a1 + 256);
          *(_QWORD *)(a1 + 256) = v12 + 1;
          *(_BYTE *)(a1 + v12) = v11;
        }
        while (v6 < v10);
      }
      result = 0;
    }
    if (!*(_DWORD *)(a1 + 264))
      *(_DWORD *)(a1 + 264) = result;
  }
  return result;
}

uint64_t IEBufferStartVendorIE(uint64_t a1, int a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v2 = *(unsigned int *)(a1 + 264);
  if (!(_DWORD)v2)
  {
    v3 = *(_QWORD *)(a1 + 256);
    if ((unint64_t)(v3 - 250) < 0xFFFFFFFFFFFFFF00)
    {
      v4 = 4294960553;
      goto LABEL_4;
    }
    v4 = 0;
    v2 = 0;
    *(_QWORD *)(a1 + 256) = v3 + 1;
    *(_BYTE *)(a1 + v3) = -35;
    v5 = *(_QWORD *)(a1 + 256);
    *(_QWORD *)(a1 + 272) = v5;
    *(_QWORD *)(a1 + 256) = v5 + 1;
    *(_BYTE *)(a1 + v5) = 0;
    v6 = *(_QWORD *)(a1 + 256);
    *(_QWORD *)(a1 + 256) = v6 + 1;
    *(_BYTE *)(a1 + v6) = HIBYTE(a2);
    v7 = *(_QWORD *)(a1 + 256);
    *(_QWORD *)(a1 + 256) = v7 + 1;
    *(_BYTE *)(a1 + v7) = BYTE2(a2);
    v8 = *(_QWORD *)(a1 + 256);
    *(_QWORD *)(a1 + 256) = v8 + 1;
    *(_BYTE *)(a1 + v8) = BYTE1(a2);
    v9 = *(_QWORD *)(a1 + 256);
    *(_QWORD *)(a1 + 256) = v9 + 1;
    *(_BYTE *)(a1 + v9) = a2;
    if (!*(_DWORD *)(a1 + 264))
    {
LABEL_4:
      *(_DWORD *)(a1 + 264) = v4;
      return v4;
    }
  }
  return v2;
}

uint64_t IEBufferEndVendorIE(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v1 = *(unsigned int *)(a1 + 264);
  if (!(_DWORD)v1)
  {
    v2 = *(_QWORD *)(a1 + 272);
    if (!v2)
    {
      v3 = 4294960551;
      goto LABEL_4;
    }
    v3 = 0;
    v1 = 0;
    *(_BYTE *)(a1 + v2) = *(_BYTE *)(a1 + 256) + ~(_BYTE)v2;
    *(_QWORD *)(a1 + 272) = 0;
    if (!*(_DWORD *)(a1 + 264))
    {
LABEL_4:
      *(_DWORD *)(a1 + 264) = v3;
      return v3;
    }
  }
  return v1;
}

uint64_t DataBuffer_AppendIE(uint64_t a1, char a2, char *__s, size_t a4)
{
  size_t v4;
  char *v5;
  uint64_t result;
  _BYTE *v9;
  _BYTE *v10;
  char *v11;
  char v12;
  _BYTE *v13;
  _BYTE *v14;

  v4 = a4;
  v5 = __s;
  if (a4 == -1)
    v4 = strlen(__s);
  if (v4 > 0xFF)
  {
    result = 4294960553;
  }
  else
  {
    v14 = 0;
    result = DataBuffer_Resize(a1, v4 + *(_QWORD *)(a1 + 32) + 2, (unint64_t *)&v14);
    if (!(_DWORD)result)
    {
      v9 = v14++;
      *v9 = a2;
      v10 = v14++;
      *v10 = v4;
      if (v4)
      {
        v11 = &v5[v4];
        do
        {
          v12 = *v5++;
          v13 = v14++;
          *v13 = v12;
        }
        while (v5 < v11);
      }
      result = 0;
    }
  }
  if (!*(_DWORD *)(a1 + 52))
    *(_DWORD *)(a1 + 52) = result;
  return result;
}

const void *CFCreateWithJSONBytes(char *__s, size_t a2, char a3, uint64_t a4, int *a5)
{
  size_t v8;
  void *v10;
  void *v11;
  uint64_t v12;
  const void *v13;
  int v14;
  CFDictionaryRef Mutable;

  v8 = a2;
  if (a2 != -1)
  {
    if (a2)
      goto LABEL_3;
LABEL_12:
    if (CFDictionaryGetTypeID() == a4)
    {
      if ((a3 & 3) != 0)
        Mutable = CFDictionaryCreate(0, 0, 0, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
      else
        Mutable = CFDictionaryCreateMutable(0, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
    }
    else
    {
      if (CFArrayGetTypeID() != a4)
      {
        v10 = 0;
        v13 = 0;
        v14 = -6732;
        goto LABEL_23;
      }
      if ((a3 & 3) != 0)
        Mutable = CFArrayCreate(0, 0, 0, MEMORY[0x1E0C9B378]);
      else
        Mutable = CFArrayCreateMutable(0, 0, MEMORY[0x1E0C9B378]);
    }
    v13 = Mutable;
    v10 = 0;
    if (Mutable)
      goto LABEL_22;
    v14 = -6728;
    v13 = 0;
    goto LABEL_23;
  }
  v8 = strlen(__s);
  if (!v8)
    goto LABEL_12;
LABEL_3:
  v10 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0C99D50]), "initWithBytes:length:", __s, v8);
  if (v10)
  {
    v11 = (void *)MEMORY[0x18D78EB2C]();
    if ((a3 & 2) != 0)
      v12 = 7;
    else
      v12 = a3 & 1 | 4;
    objc_msgSend(MEMORY[0x1E0CB36D8], "JSONObjectWithData:options:error:", v10, v12, 0);
    v13 = (const void *)objc_claimAutoreleasedReturnValue();
    objc_autoreleasePoolPop(v11);
    if (v13)
    {
      if (a4 && CFGetTypeID(v13) != a4)
      {
        CFRelease(v13);
        v13 = 0;
        v14 = -6756;
        goto LABEL_23;
      }
LABEL_22:
      v14 = 0;
      goto LABEL_23;
    }
    v14 = -6717;
  }
  else
  {
    v13 = 0;
    v14 = -6728;
  }
LABEL_23:
  if (a5)
    *a5 = v14;

  return v13;
}

uint64_t CFCreateJSONData(uint64_t a1, char a2, int *a3)
{
  void *v6;
  uint64_t v7;
  uint64_t v8;
  int v9;

  v6 = (void *)MEMORY[0x18D78EB2C]();
  if ((a2 & 1) != 0)
    v7 = 4;
  else
    v7 = 5;
  objc_msgSend(MEMORY[0x1E0CB36D8], "dataWithJSONObject:options:error:", a1, v7, 0);
  v8 = objc_claimAutoreleasedReturnValue();
  objc_autoreleasePoolPop(v6);
  if (a3)
  {
    if (v8)
      v9 = 0;
    else
      v9 = -6732;
    *a3 = v9;
  }
  return v8;
}

uint64_t KeychainAddFormatted(CFTypeRef *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v10;
  CFDictionaryRef attributes;

  attributes = 0;
  v10 = CFPropertyListBuildFormatted(0, 0, (CFTypeRef *)&attributes, a2, (uint64_t)&a9, a6, a7, a8);
  if (!(_DWORD)v10)
  {
    v10 = SecItemAdd(attributes, a1);
    CFRelease(attributes);
  }
  return v10;
}

CFTypeRef KeychainCopyMatchingFormatted(_DWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  int v10;
  CFDictionaryRef query;
  CFTypeRef result;

  query = 0;
  result = 0;
  v10 = CFPropertyListBuildFormatted(0, 0, (CFTypeRef *)&query, a2, (uint64_t)&a9, a6, a7, a8);
  if (!v10)
  {
    v10 = SecItemCopyMatching(query, &result);
    CFRelease(query);
    if (!a1)
      return result;
    goto LABEL_3;
  }
  if (a1)
LABEL_3:
    *a1 = v10;
  return result;
}

uint64_t KeychainDeleteFormatted(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  CFDictionaryRef query;

  query = 0;
  v9 = CFPropertyListBuildFormatted(0, 0, (CFTypeRef *)&query, a1, (uint64_t)&a9, a6, a7, a8);
  if (!(_DWORD)v9)
  {
    v9 = SecItemDelete(query);
    CFRelease(query);
  }
  return v9;
}

uint64_t KeychainDeleteItemByPersistentRef(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  return KeychainDeleteFormatted((uint64_t)"{%kO=%O}", a2, a3, a4, a5, a6, a7, a8, *MEMORY[0x1E0CD70E0]);
}

uint64_t KeychainUpdateFormatted(const __CFDictionary *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v10;
  CFDictionaryRef attributesToUpdate;

  attributesToUpdate = 0;
  v10 = CFPropertyListBuildFormatted(0, 0, (CFTypeRef *)&attributesToUpdate, a2, (uint64_t)&a9, a6, a7, a8);
  if (!(_DWORD)v10)
  {
    v10 = SecItemUpdate(a1, attributesToUpdate);
    CFRelease(attributesToUpdate);
  }
  return v10;
}

void _LogUtils_ReadCFPreferences(int a1)
{
  const __CFString *v2;
  const __CFString *v3;
  const __CFString *v4;
  CFTypeID v5;
  const void *v6;

  if (gLogCFPrefsAppID)
    v2 = (const __CFString *)gLogCFPrefsAppID;
  else
    v2 = (const __CFString *)*MEMORY[0x1E0C9B248];
  CFPreferencesAppSynchronize(v2);
  v3 = (const __CFString *)CFPreferencesCopyAppValue(CFSTR("logconfig"), v2);
  if (v3)
  {
    v4 = v3;
    v5 = CFGetTypeID(v3);
    if (v5 == CFStringGetTypeID()
      && ((a1 & 4) != 0
       || v4 != (const __CFString *)gLogCFLastControlPref
       && (!gLogCFLastControlPref || !CFEqual(v4, (CFTypeRef)gLogCFLastControlPref))))
    {
      _LogControlLockedCF(v4, a1 | 2);
      v6 = (const void *)gLogCFLastControlPref;
      CFRetain(v4);
      gLogCFLastControlPref = (uint64_t)v4;
      if (v6)
        CFRelease(v6);
    }
    CFRelease(v4);
  }
}

uint64_t _LogControlLockedCF(const __CFString *a1, int a2)
{
  CFIndex Length;
  CFIndex MaximumSizeForEncoding;
  UInt8 *v6;
  unsigned __int8 *v7;
  uint64_t v8;
  CFIndex usedBufLen;
  CFRange v11;

  Length = CFStringGetLength(a1);
  MaximumSizeForEncoding = CFStringGetMaximumSizeForEncoding(Length, 0x8000100u);
  usedBufLen = MaximumSizeForEncoding;
  v6 = (UInt8 *)malloc_type_malloc(MaximumSizeForEncoding + 1, 0x757C1AEEuLL);
  if (!v6)
    return 4294960568;
  v7 = v6;
  v11.location = 0;
  v11.length = Length;
  if (CFStringGetBytes(a1, v11, 0x8000100u, 0, 0, v6, MaximumSizeForEncoding, &usedBufLen) == Length)
  {
    if (usedBufLen < 1)
    {
      v8 = 0;
    }
    else
    {
      v7[usedBufLen] = 0;
      v8 = _LogControlLocked(v7, a2);
    }
  }
  else
  {
    v8 = 4294960596;
  }
  free(v7);
  return v8;
}

uint64_t _LogControlLocked(unsigned __int8 *a1, int a2)
{
  unsigned __int8 *v2;
  int v3;
  BOOL v4;
  int v5;
  _BOOL4 v6;
  int v7;
  _BOOL8 v8;
  const __CFString *v9;
  unsigned __int8 *v10;
  int v11;
  void **p_cache;
  uint64_t *v13;
  unsigned __int8 *v14;
  int v15;
  uint64_t v16;
  unsigned __int8 *v17;
  unsigned __int8 *i;
  unsigned int v19;
  int v21;
  unsigned __int8 *v22;
  int v23;
  uint64_t *v24;
  _BOOL8 v25;
  uint64_t *v26;
  size_t v27;
  unsigned __int8 *v28;
  _BYTE *j;
  unsigned __int8 *v30;
  unsigned __int8 *k;
  int v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t *v35;
  uint64_t *v36;
  uint64_t *v37;
  uint64_t v38;
  _QWORD *v39;
  uint64_t v40;
  const __CFString *v41;
  size_t v43;
  char *v44;
  size_t v45;
  BOOL v47;

  if (a1)
  {
    v2 = a1 + 1;
    v3 = *a1;
    v4 = (a2 & 2) == 0;
    if (v3 != 63)
      v2 = a1;
    v5 = *v2;
    v6 = v3 == 63 && (a2 & 2) == 0;
    if (v5 == 43)
      ++v2;
    v7 = *v2;
    v8 = v5 == 43 && (a2 & 2) == 0;
    if (v7 != 126)
      v4 = 0;
    if (v6 && v5 == 43)
    {
      if (gLogCFPrefsAppID)
        v9 = (const __CFString *)gLogCFPrefsAppID;
      else
        v9 = (const __CFString *)*MEMORY[0x1E0C9B248];
      CFPreferencesSetAppValue(CFSTR("logconfig"), 0, v9);
      return 0;
    }
    if (v7 == 126)
      v10 = v2 + 1;
    else
      v10 = v2;
    v11 = *v10;
    if (*v10)
    {
      p_cache = &OBJC_METACLASS___CUPairingIdentity.cache;
      v13 = &gLogActionList;
      v47 = v4;
      while (1)
      {
        v14 = v10;
        if (!v4)
          break;
        if (v11)
        {
          do
          {
            if (v11 == 58)
              break;
            v15 = *++v14;
            v11 = v15;
          }
          while (v15);
        }
        v16 = v14 - v10;
        if (v11)
          v17 = v14 + 1;
        else
          v17 = v14;
        for (i = v17; ; ++i)
        {
          v19 = *i;
          if (v19 <= 0x3D && ((1 << v19) & 0x2000100000000001) != 0)
            break;
        }
        if (*i)
          v22 = i + 1;
        else
          v22 = i;
        do
        {
          v23 = *v22;
          if (!*v22)
            break;
          ++v22;
        }
        while (v23 != 44);
        v24 = (uint64_t *)p_cache[117];
        if (v24)
        {
          v25 = v8;
          do
          {
            v26 = v13;
            v13 = v24;
            while (!strnicmpx(v10, v16, (_BYTE *)v13[1])
                 && (i == v17 || !strnicmpx(v17, i - v17, (_BYTE *)v13[2])))
            {
              *v26 = *v13;
              _LogUtils_FreeAction(v13);
              v13 = (uint64_t *)*v26;
              if (!*v26)
                goto LABEL_57;
            }
            v24 = (uint64_t *)*v13;
          }
          while (*v13);
LABEL_57:
          v8 = v25;
          v4 = v47;
          p_cache = (void **)(&OBJC_METACLASS___CUPairingIdentity + 16);
LABEL_58:
          v13 = &gLogActionList;
        }
LABEL_59:
        v11 = *v22;
        v10 = v22;
        if (!*v22)
        {
          _LogCategory_ApplyActions(0);
          if ((a2 & 2) == 0)
          {
            if (v6)
            {
              _LogUtils_ReadCFPreferences(a2 | 4u);
            }
            else if (v8)
            {
              _LogUtils_WriteCFPreferences();
            }
          }
          return 0;
        }
      }
      while (v11)
      {
        if (v11 == 58)
        {
          v27 = v14 - v10;
          v28 = v14 + 1;
          for (j = v14 + 1; *j; ++j)
          {
            if (*j == 61)
            {
              v45 = j - v28;
              v30 = j + 1;
              for (k = j + 1; ; ++k)
              {
                v32 = *k;
                if (!*k || v32 == 44)
                  break;
              }
              v33 = k - v30;
              if (v32 == 44)
                v22 = k + 1;
              else
                v22 = k;
              if ((a2 & 1) == 0
                && (!strnicmpx(v28, v45, "output") || !strnicmpx(v28, v45, "output2"))
                && !strnicmp_prefix(v30, v33, "callback"))
              {
                v4 = v47;
                goto LABEL_59;
              }
              v43 = v33;
              v44 = (char *)v30;
              v34 = gLogActionList;
              if (gLogActionList)
              {
                v35 = &gLogActionList;
                while (1)
                {
                  v36 = (uint64_t *)v34;
                  if (!strnicmpx(v10, v27, *(_BYTE **)(v34 + 8))
                    && !strnicmpx(v28, v45, (_BYTE *)v36[2]))
                  {
                    break;
                  }
                  v34 = *v36;
                  v35 = v36;
                  if (!*v36)
                    goto LABEL_83;
                }
                v37 = 0;
              }
              else
              {
                v36 = &gLogActionList;
LABEL_83:
                v37 = (uint64_t *)malloc_type_calloc(1uLL, 0x20uLL, 0x30040E3C0B0CCuLL);
                v35 = v36;
                v36 = v37;
                if (!v37)
                  return 4294960568;
              }
              v38 = ReplaceString((void **)v36 + 1, 0, (char *)v10, v27);
              if (!(_DWORD)v38)
              {
                v38 = ReplaceString((void **)v36 + 2, 0, (char *)v28, v45);
                if (!(_DWORD)v38)
                {
                  v38 = ReplaceString((void **)v36 + 3, 0, v44, v43);
                  if (!(_DWORD)v38)
                  {
                    v4 = v47;
                    if (v37)
                      *v35 = (uint64_t)v37;
                    goto LABEL_58;
                  }
                }
              }
              v40 = v38;
              if (v37)
                _LogUtils_FreeAction(v37);
              return v40;
            }
          }
          return 4294960554;
        }
        v21 = *++v14;
        v11 = v21;
      }
      return 4294960554;
    }
  }
  else
  {
    LODWORD(v8) = 0;
    v6 = 0;
  }
  while (1)
  {
    v39 = (_QWORD *)gLogActionList;
    if (!gLogActionList)
      break;
    gLogActionList = *(_QWORD *)gLogActionList;
    _LogUtils_FreeAction(v39);
  }
  v40 = 0;
  if (v8 && !v6)
  {
    if (gLogCFPrefsAppID)
      v41 = (const __CFString *)gLogCFPrefsAppID;
    else
      v41 = (const __CFString *)*MEMORY[0x1E0C9B248];
    CFPreferencesSetAppValue(CFSTR("logconfig"), 0, v41);
    CFPreferencesAppSynchronize(v41);
    return 0;
  }
  return v40;
}

void _LogUtils_FreeAction(_QWORD *a1)
{
  void *v2;
  void *v3;
  void *v4;

  v2 = (void *)a1[1];
  if (v2)
  {
    free(v2);
    a1[1] = 0;
  }
  v3 = (void *)a1[2];
  if (v3)
  {
    free(v3);
    a1[2] = 0;
  }
  v4 = (void *)a1[3];
  if (v4)
    free(v4);
  free(a1);
}

void _LogUtils_WriteCFPreferences()
{
  uint64_t v0;
  const char *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  const char *v8;
  char *v9;
  CFStringRef v10;
  CFStringRef v11;
  const __CFString *v12;
  const void *v13;
  char *cStr;

  cStr = 0;
  v0 = gLogActionList;
  if (gLogActionList)
  {
    do
    {
      v1 = *(const char **)(v0 + 16);
      if (strcasecmp(v1, "output") && strcasecmp(v1, "output2")
        || stricmp_prefix(*(unsigned __int8 **)(v0 + 24), "callback"))
      {
        if (v0 == gLogActionList)
          v8 = "";
        else
          v8 = ",";
        AppendPrintF((void **)&cStr, (uint64_t)"%s%s:%s=%s", v2, v3, v4, v5, v6, v7, (uint64_t)v8);
      }
      v0 = *(_QWORD *)v0;
    }
    while (v0);
    v9 = cStr;
    if (cStr)
    {
      v10 = CFStringCreateWithCString(0, cStr, 0x8000100u);
      if (v10)
      {
        v11 = v10;
        if (gLogCFPrefsAppID)
          v12 = (const __CFString *)gLogCFPrefsAppID;
        else
          v12 = (const __CFString *)*MEMORY[0x1E0C9B248];
        CFPreferencesSetAppValue(CFSTR("logconfig"), v10, v12);
        CFPreferencesAppSynchronize(v12);
        v13 = (const void *)gLogCFLastControlPref;
        CFRetain(v11);
        gLogCFLastControlPref = (uint64_t)v11;
        if (v13)
          CFRelease(v13);
        CFRelease(v11);
      }
      free(v9);
    }
  }
}

void _LogOutputDelete(_DWORD *a1)
{
  int v2;
  void *v3;
  FILE *v4;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;

  v2 = a1[10];
  if (v2 == 2)
  {
    v3 = (void *)*((_QWORD *)a1 + 6);
    if (v3)
    {
      free(v3);
      *((_QWORD *)a1 + 6) = 0;
    }
    v4 = (FILE *)*((_QWORD *)a1 + 7);
    if (v4)
    {
      if (v4 != (FILE *)*MEMORY[0x1E0C80C10] && v4 != (FILE *)*MEMORY[0x1E0C80C20])
        fclose(v4);
      *((_QWORD *)a1 + 7) = 0;
    }
    v6 = (void *)*((_QWORD *)a1 + 11);
    if (v6)
    {
      free(v6);
      *((_QWORD *)a1 + 11) = 0;
    }
    v2 = a1[10];
  }
  if (v2 == 14)
  {
    v7 = (void *)*((_QWORD *)a1 + 9);
    if (v7)
    {
      free(v7);
      *((_QWORD *)a1 + 9) = 0;
    }
    v8 = (void *)*((_QWORD *)a1 + 6);
    if (v8)
    {
      free(v8);
      *((_QWORD *)a1 + 6) = 0;
    }
    v9 = (void *)*((_QWORD *)a1 + 7);
    if (v9)
    {

      *((_QWORD *)a1 + 7) = 0;
    }
  }
  v10 = (void *)*((_QWORD *)a1 + 2);
  if (v10)
    free(v10);
  free(a1);
}

uint64_t _LogOutputCallBack_Writer(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t (*v4)(uint64_t, uint64_t, uint64_t, _QWORD);

  v4 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, _QWORD))(a2 + 48);
  if (v4)
    return v4(result, a3, a4, *(_QWORD *)(a2 + 56));
  return result;
}

uint64_t _LogOutputOSLog_Setup(uint64_t a1, unsigned __int8 *a2)
{
  void *v4;
  void *v5;
  void *v6;
  int v7;
  unsigned __int8 *v8;
  int v9;
  uint64_t v10;
  unsigned __int8 *v11;
  unsigned __int8 *i;
  size_t v13;
  unsigned __int8 *v14;
  char v15;
  _BYTE *v16;
  _BYTE *v17;
  void *v18;
  BOOL v19;
  BOOL v20;
  _BYTE *v21;
  _BYTE *v22;
  void *v23;
  const char *v24;
  const char *v25;
  os_log_t v26;

  *(_QWORD *)(a1 + 32) = _LogOutputOSLog_Writer;
  *(_DWORD *)(a1 + 40) = 14;
  v4 = *(void **)(a1 + 48);
  if (v4)
  {
    free(v4);
    *(_QWORD *)(a1 + 48) = 0;
  }
  v5 = *(void **)(a1 + 56);
  if (v5)
  {

    *(_QWORD *)(a1 + 56) = 0;
  }
  *(_DWORD *)(a1 + 64) = 0;
  v6 = *(void **)(a1 + 72);
  if (v6)
  {
    free(v6);
    *(_QWORD *)(a1 + 72) = 0;
  }
  v7 = *a2;
  if (!*a2)
    return 0;
  do
  {
    v8 = a2;
    if (!v7)
      return 4294960554;
    while (v7 != 61)
    {
      v9 = *++v8;
      v7 = v9;
      if (!v9)
        return 4294960554;
    }
    v10 = v8 - a2;
    v11 = v8 + 1;
    for (i = v8 + 1; *i && *i != 59; ++i)
      ;
    v13 = i - v11;
    if (*i)
      v14 = i + 1;
    else
      v14 = i;
    if (strnicmpx(a2, v10, "category"))
    {
      if (strnicmpx(a2, v10, "public"))
      {
        if (strnicmpx(a2, v10, "sensitive"))
        {
          if (strnicmpx(a2, v10, "subsystem"))
          {
            if (strnicmpx(a2, v10, "type"))
              goto LABEL_57;
            if (strnicmpx(v11, v13, "debug"))
            {
              if (strnicmpx(v11, v13, "default"))
              {
                if (strnicmpx(v11, v13, "error"))
                {
                  if (strnicmpx(v11, v13, "fault"))
                  {
                    if (strnicmpx(v11, v13, "info"))
                      goto LABEL_57;
                    v15 = 1;
                  }
                  else
                  {
                    v15 = 17;
                  }
                }
                else
                {
                  v15 = 16;
                }
              }
              else
              {
                v15 = 0;
              }
            }
            else
            {
              v15 = 2;
            }
            *(_BYTE *)(a1 + 64) = 1;
            *(_BYTE *)(a1 + 65) = v15;
          }
          else
          {
            v21 = malloc_type_malloc(v13 + 1, 0x85B137EDuLL);
            if (!v21)
              return 4294960568;
            v22 = v21;
            memcpy(v21, v11, v13);
            v22[v13] = 0;
            v23 = *(void **)(a1 + 72);
            if (v23)
              free(v23);
            *(_QWORD *)(a1 + 72) = v22;
          }
        }
        else
        {
          v20 = !strnicmpx(v11, v13, "true")
             || !strnicmpx(v11, v13, "yes")
             || !strnicmpx(v11, v13, "y")
             || !strnicmpx(v11, v13, "on")
             || strnicmpx(v11, v13, "1") == 0;
          *(_BYTE *)(a1 + 67) = v20;
        }
      }
      else
      {
        v19 = !strnicmpx(v11, v13, "true")
           || !strnicmpx(v11, v13, "yes")
           || !strnicmpx(v11, v13, "y")
           || !strnicmpx(v11, v13, "on")
           || strnicmpx(v11, v13, "1") == 0;
        *(_BYTE *)(a1 + 66) = v19;
      }
    }
    else
    {
      v16 = malloc_type_malloc(v13 + 1, 0xDEC0AEE0uLL);
      if (!v16)
        return 4294960568;
      v17 = v16;
      memcpy(v16, v11, v13);
      v17[v13] = 0;
      v18 = *(void **)(a1 + 48);
      if (v18)
        free(v18);
      *(_QWORD *)(a1 + 48) = v17;
    }
LABEL_57:
    v7 = *v14;
    a2 = v14;
  }
  while (*v14);
  v24 = *(const char **)(a1 + 72);
  if (v24)
  {
    v25 = *(const char **)(a1 + 48);
    if (v25)
    {
      v26 = os_log_create(v24, v25);
      *(_QWORD *)(a1 + 56) = v26;
      if (!v26)
        return 4294960568;
    }
  }
  return 0;
}

uint64_t _LogOutputSysLog_Setup(uint64_t a1, unsigned __int8 *a2)
{
  int v3;
  unsigned __int8 *v4;
  int v5;
  unsigned __int8 *v6;
  unsigned __int8 *i;
  unsigned __int8 *v8;
  uint64_t v9;
  int v10;
  int v11;
  uint64_t result;
  char __s1[32];
  uint64_t v14;

  v14 = *MEMORY[0x1E0C80C00];
  *(_DWORD *)(a1 + 48) = 5;
  v3 = *a2;
  if (*a2)
  {
    while (1)
    {
      v4 = a2;
      if (!v3)
        return 4294960554;
      while (v3 != 61)
      {
        v5 = *++v4;
        v3 = v5;
        if (!v5)
          return 4294960554;
      }
      v6 = v4 + 1;
      for (i = v4 + 1; *i && *i != 59; ++i)
        ;
      if (*i)
        v8 = i + 1;
      else
        v8 = i;
      if (!strnicmpx(a2, v4 - a2, "level"))
      {
        v9 = (unint64_t)(i - v6) >= 0x1F ? 31 : i - v6;
        __memcpy_chk();
        __s1[v9] = 0;
        v10 = LUStringToLevel(__s1);
        if (v10 != -1)
        {
          if (v10 <= 119)
          {
            if (v10 <= 109)
            {
              if (v10 <= 99)
              {
                if (v10 <= 89)
                {
                  if (v10 <= 59)
                  {
                    if (v10 <= 49)
                    {
                      if (v10 > 39)
                        v11 = 6;
                      else
                        v11 = 7;
                    }
                    else
                    {
                      v11 = 5;
                    }
                  }
                  else
                  {
                    v11 = 4;
                  }
                }
                else
                {
                  v11 = 3;
                }
              }
              else
              {
                v11 = 2;
              }
            }
            else
            {
              v11 = 1;
            }
          }
          else
          {
            v11 = 0;
          }
          *(_DWORD *)(a1 + 48) = v11;
        }
      }
      v3 = *v8;
      a2 = v8;
      if (!*v8)
        goto LABEL_35;
    }
  }
  else
  {
LABEL_35:
    result = 0;
    *(_QWORD *)(a1 + 32) = _LogOutputSysLog_Writer;
    *(_DWORD *)(a1 + 40) = 6;
  }
  return result;
}

void _LogOutputFile_Writer(int a1, uint64_t a2, void *__ptr, size_t __nitems, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  FILE *v10;
  FILE **v11;
  uint64_t v14;
  uint64_t v15;
  std::error_code *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  int v23;
  int v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  std::error_code *v30;
  BOOL v31;
  std::error_code *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  const char *v38;
  void *v39;
  void *v40;
  FILE *v41;
  FILE *v42;
  size_t v43;
  std::__fs::filesystem::path __to;
  std::__fs::filesystem::path __p;
  uint64_t v46;

  v46 = *MEMORY[0x1E0C80C00];
  v11 = (FILE **)(a2 + 56);
  v10 = *(FILE **)(a2 + 56);
  if (v10 != (FILE *)*MEMORY[0x1E0C80C10] && v10 != (FILE *)*MEMORY[0x1E0C80C20])
  {
    v14 = *(_QWORD *)(a2 + 72);
    v15 = *(_QWORD *)(a2 + 64) + __nitems;
    *(_QWORD *)(a2 + 64) = v15;
    if (v14 >= 1 && v15 > v14)
    {
      if (*(_QWORD *)(a2 + 88) && *(int *)(a2 + 96) >= 1)
      {
        SNPrintF((uint64_t)&__p, 1025, (uint64_t)"%s.%d", (uint64_t)v10, a5, a6, a7, a8, *(_QWORD *)(a2 + 88));
        remove(&__p, v17);
        v23 = *(_DWORD *)(a2 + 96);
        if (v23 >= 3)
        {
          v24 = v23 - 2;
          do
          {
            SNPrintF((uint64_t)&__p, 1025, (uint64_t)"%s.%d", v18, v19, v20, v21, v22, *(_QWORD *)(a2 + 88));
            SNPrintF((uint64_t)&__to, 1025, (uint64_t)"%s.%d", v25, v26, v27, v28, v29, *(_QWORD *)(a2 + 88));
            rename(&__p, &__to, v30);
            v31 = v24-- != 0;
          }
          while (v24 != 0 && v31);
        }
        SNPrintF((uint64_t)&__to, 1025, (uint64_t)"%s.1", v18, v19, v20, v21, v22, *(_QWORD *)(a2 + 88));
        rename(*(const std::__fs::filesystem::path **)(a2 + 88), &__to, v32);
        SNPrintF((uint64_t)&__to, 1025, (uint64_t)"%s", v33, v34, v35, v36, v37, *(_QWORD *)(a2 + 88));
        v38 = *(const char **)(a2 + 48);
        v39 = malloc_type_malloc(0x1000uLL, 0x145B9E32uLL);
        if (v39)
        {
          v40 = v39;
          v41 = fopen(v38, "r");
          if (v41 || *__error() && !*__error())
          {
            v42 = fopen((const char *)&__to, "w");
            if (v42 || *__error() && !*__error())
            {
              do
                v43 = fread(v40, 1uLL, 0x1000uLL, v41);
              while (v43 && (fwrite(v40, 1uLL, v43, v42) == v43 || *__error() && !*__error()));
            }
            if (v41)
              fclose(v41);
            if (v42)
              fclose(v42);
          }
          free(v40);
        }
      }
      RollLogFiles(v11, "\nLOG ENDED, CONTINUES IN NEXT LOG FILE\n", *(const std::__fs::filesystem::path **)(a2 + 48), *(_DWORD *)(a2 + 80));
      *(_QWORD *)(a2 + 64) = __nitems;
      v10 = *(FILE **)(a2 + 56);
    }
  }
  if (v10)
  {
    fwrite(__ptr, 1uLL, __nitems, v10);
    fflush(*v11);
  }
}

void _LogOutputSysLog_Writer(uint64_t a1, uint64_t a2, const char *a3, uint64_t a4)
{
  int v4;

  if (a4)
  {
    v4 = a4 - 1;
    if (a3[a4 - 1] != 10)
      v4 = a4;
  }
  else
  {
    v4 = 0;
  }
  syslog(*(_DWORD *)(a2 + 48), "%.*s", v4, a3);
}

uint64_t LogControl(char *a1)
{
  uint64_t v2;
  _QWORD *v3;

  if (a1)
  {
    if (!strcmp(a1, "?:output=syslog"))
      return 0;
    LogUtils_EnsureInitialized();
    pthread_mutex_lock(&gLogUtilsLock);
    v2 = _LogControlLocked((unsigned __int8 *)a1, 0);
  }
  else
  {
    LogUtils_EnsureInitialized();
    pthread_mutex_lock(&gLogUtilsLock);
    while (1)
    {
      v3 = (_QWORD *)gLogActionList;
      if (!gLogActionList)
        break;
      gLogActionList = *(_QWORD *)gLogActionList;
      _LogUtils_FreeAction(v3);
    }
    v2 = 0;
  }
  pthread_mutex_unlock(&gLogUtilsLock);
  return v2;
}

uint64_t LogControlCF(const __CFString *a1)
{
  uint64_t locked;

  LogUtils_EnsureInitialized();
  pthread_mutex_lock(&gLogUtilsLock);
  locked = _LogControlLockedCF(a1, 0);
  pthread_mutex_unlock(&gLogUtilsLock);
  return locked;
}

uint64_t LogSetAppID(CFTypeRef cf1)
{
  uint64_t result;
  const void *v3;

  if (cf1)
  {
    result = CFEqual(cf1, CFSTR("com.apple.CoreRC"));
    if ((_DWORD)result)
      return result;
    pthread_mutex_lock(&gLogUtilsLock);
    v3 = (const void *)gLogCFPrefsAppID;
    CFRetain(cf1);
  }
  else
  {
    pthread_mutex_lock(&gLogUtilsLock);
    v3 = (const void *)gLogCFPrefsAppID;
  }
  gLogCFPrefsAppID = (uint64_t)cf1;
  if (v3)
    CFRelease(v3);
  return pthread_mutex_unlock(&gLogUtilsLock);
}

uint64_t LogSetOutputCallback(const char *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  const char *v8;
  unsigned __int8 *v9;
  uint64_t v10;
  unsigned __int8 *v12;

  v12 = 0;
  v8 = ".*";
  if (a1)
    v8 = a1;
  ASPrintF((void **)&v12, (uint64_t)"%s:output%?d=callback;func=%p;arg=%p", a3, a4, a5, a6, a7, a8, (uint64_t)v8);
  v9 = v12;
  if (!v12)
    return 4294960568;
  LogUtils_EnsureInitialized();
  pthread_mutex_lock(&gLogUtilsLock);
  v10 = _LogControlLocked(v9, 1);
  pthread_mutex_unlock(&gLogUtilsLock);
  free(v9);
  return v10;
}

uint64_t LogShow(void **a1)
{
  const char *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  size_t v10;
  unint64_t v11;
  size_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  size_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unsigned __int8 *v28;
  int v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  unsigned __int8 *v37;
  int v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  const char *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  void *v64;
  uint64_t v66;
  void **v67;
  void *v68;
  _BYTE v69[64];
  _BYTE v70[64];
  char __s[64];
  uint64_t v72;

  v72 = *MEMORY[0x1E0C80C00];
  pthread_mutex_lock(&gLogUtilsLock);
  v68 = 0;
  v2 = getprogname();
  getpid();
  if ((int)ASPrintF(&v68, (uint64_t)"=== LogUtils (%s, PID %llu) ===\n", v3, v4, v5, v6, v7, v8, (uint64_t)v2) < 1)
  {
    v51 = 4294960568;
  }
  else
  {
    v9 = gLogCategoryList;
    if (!gLogCategoryList)
      goto LABEL_32;
    v10 = 0;
    v11 = 0;
    do
    {
      v12 = strlen(*(const char **)(v9 + 24));
      if (v12 > v11)
        v11 = v12;
      _LULevelToString(*(_DWORD *)v9, (uint64_t)__s, v13, v14, v15, v16, v17, v18);
      v19 = strlen(__s);
      if (v19 > v10)
        v10 = v19;
      v9 = *(_QWORD *)(v9 + 48);
    }
    while (v9);
    v26 = gLogCategoryList;
    if (gLogCategoryList)
    {
      v67 = a1;
      do
      {
        v70[0] = 0;
        v27 = *(_QWORD *)(v26 + 56);
        if (v27)
        {
          v28 = *(unsigned __int8 **)(v27 + 16);
          v29 = *(_DWORD *)(v27 + 24);
          if (v29 != -1)
            _LULevelToString(v29, (uint64_t)v70, v20, v21, v22, v23, v24, v25);
        }
        else
        {
          v28 = 0;
        }
        if (!v28)
          v28 = "";
        stricmp_prefix(v28, "callback");
        v69[0] = 0;
        v36 = *(_QWORD *)(v26 + 64);
        if (v36)
        {
          v37 = *(unsigned __int8 **)(v36 + 16);
          v38 = *(_DWORD *)(v36 + 24);
          if (v38 != -1)
            _LULevelToString(v38, (uint64_t)v69, v30, v31, v32, v33, v34, v35);
        }
        else
        {
          v37 = 0;
        }
        if (!v37)
          v37 = "";
        stricmp_prefix(v37, "callback");
        _LULevelToString(*(_DWORD *)v26, (uint64_t)__s, v39, v40, v41, v42, v43, v44);
        UpTicksToMilliseconds(*(_QWORD *)(v26 + 72));
        if ((int)AppendPrintF(&v68, (uint64_t)"  %-*s  L=%-*s  R=%u/%-5llu  O1=%s  O1L=%s  O2=%s  O2L=%s\n", v45, v46, v47, v48, v49, v50, v11) <= 0)
        {
          v51 = 4294960568;
          a1 = v67;
          goto LABEL_43;
        }
        v26 = *(_QWORD *)(v26 + 48);
      }
      while (v26);
      v51 = 0;
      v52 = gLogActionList;
      if (gLogCategoryList)
      {
        a1 = v67;
        if (!gLogActionList)
          goto LABEL_33;
        if ((int)AppendPrintF(&v68, (uint64_t)"\n", v20, v21, v22, v23, v24, v25, v66) <= 0)
          v51 = 4294960568;
        else
          v51 = 0;
        v52 = gLogActionList;
        if (gLogActionList)
          goto LABEL_34;
      }
      else
      {
        a1 = v67;
        if (gLogActionList)
          goto LABEL_34;
      }
    }
    else
    {
LABEL_32:
      v51 = 0;
      v52 = gLogActionList;
LABEL_33:
      if (v52)
      {
LABEL_34:
        while (1)
        {
          if ((v53 = *(const char **)(v52 + 16), strcasecmp(v53, "output")) && strcasecmp(v53, "output2")
            || stricmp_prefix(*(unsigned __int8 **)(v52 + 24), "callback"))
          {
            if ((int)AppendPrintF(&v68, (uint64_t)"  Action: %s:%s=%s\n", v54, v55, v56, v57, v58, v59, *(_QWORD *)(v52 + 8)) < 1)break;
          }
          v52 = *(_QWORD *)v52;
          if (!v52)
            goto LABEL_43;
        }
        v51 = 4294960568;
      }
    }
  }
LABEL_43:
  pthread_mutex_unlock(&gLogUtilsLock);
  v64 = v68;
  if (v68)
  {
    if (a1)
    {
      *a1 = v68;
    }
    else
    {
      if (gLogCategory_LogUtils <= 254
        && (gLogCategory_LogUtils != -1 || _LogCategory_Initialize((uint64_t)&gLogCategory_LogUtils, 0xFEu)))
      {
        LogPrintF((uint64_t)&gLogCategory_LogUtils, (uint64_t)"OSStatus LogShow(char **)", 0xFEu, (uint64_t)"%s", v60, v61, v62, v63, (uint64_t)v64);
      }
      free(v64);
    }
  }
  else if (!a1
         && gLogCategory_LogUtils <= 90
         && (gLogCategory_LogUtils != -1 || _LogCategory_Initialize((uint64_t)&gLogCategory_LogUtils, 0x5Au)))
  {
    LogPrintF((uint64_t)&gLogCategory_LogUtils, (uint64_t)"OSStatus LogShow(char **)", 0x5Au, (uint64_t)"### ERROR: %#m\n", v60, v61, v62, v63, v51);
  }
  return v51;
}

uint64_t _LULevelToString(unsigned __int8 a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9;
  int v10;
  int v11;
  int *v12;
  int v13;
  int v14;
  int *v15;
  int v16;

  v9 = 0;
  v10 = 0;
  v11 = 0x7FFFFFFF;
  v12 = kLogLevelToStringTable;
  do
  {
    v13 = *v12;
    v12 += 4;
    v14 = a1 - v13;
    if (v14 < 0)
      v14 = -v14;
    if (v14 < v11)
    {
      v11 = v14;
      v10 = v9;
    }
    ++v9;
  }
  while (v9 != 18);
  v15 = &kLogLevelToStringTable[4 * v10];
  v16 = a1 - *v15;
  if (v16 < 1)
  {
    if (v16 < 0)
      SNPrintF(a2, 64, (uint64_t)"%s-%u", a4, a5, a6, a7, a8, *((_QWORD *)v15 + 1));
    else
      SNPrintF(a2, 64, (uint64_t)"%s", a4, a5, a6, a7, a8, *((_QWORD *)v15 + 1));
  }
  else
  {
    SNPrintF(a2, 64, (uint64_t)"%s+%u", a4, a5, a6, a7, a8, *((_QWORD *)v15 + 1));
  }
  return a2;
}

_DWORD *LogCategoryCreate(const char *a1, int a2, int a3, const char *a4, int *a5)
{
  return LogCategoryCreateEx(0, a1, a2, a3, a4, a5);
}

uint64_t LogCategoryReplaceF(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  return LogCategoryReplaceV(a1, a2, (uint64_t)&a9);
}

uint64_t LogCategoryReplaceV(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  char *v5;
  _DWORD *v6;
  const char *v9;
  unsigned int v10;

  v3 = *a1;
  v10 = 0;
  v9 = 0;
  if (!v3)
    return -6705;
  VASPrintF((void **)&v9, a2, a3);
  v5 = (char *)v9;
  if (!v9)
    return -6700;
  v6 = LogCategoryCreateEx(*(const char **)(v3 + 96), v9, *(_DWORD *)(v3 + 4), *(_DWORD *)(v3 + 16), *(const char **)(v3 + 8), (int *)&v10);
  free(v5);
  if (v6)
  {
    if ((*(_BYTE *)(v3 + 18) & 4) != 0)
      LogCategory_Remove((void *)v3);
    *a1 = (uint64_t)v6;
  }
  return v10;
}

os_log_t LogCategoryCopyOSLogHandle(uint64_t a1)
{
  os_log_t OSLogHandle;
  os_log_t v3;
  NSObject *v4;

  LogUtils_EnsureInitialized();
  pthread_mutex_lock(&gLogUtilsLock);
  OSLogHandle = _LogCategoryGetOSLogHandle(a1, 0);
  v3 = OSLogHandle;
  if (OSLogHandle)
    v4 = OSLogHandle;
  pthread_mutex_unlock(&gLogUtilsLock);
  return v3;
}

BOOL CUFloatsNearlyEqualWithinTolerance(float a1, float a2, float a3)
{
  return vabds_f32(a1, a2) < (float)((float)(fmaxf(fmaxf(fabsf(a1), fabsf(a2)), 1.1755e-38) * a3) + 0.00000011921);
}

BOOL CUDoublesNearlyEqualWithinTolerance(double a1, double a2, double a3)
{
  return vabdd_f64(a1, a2) < fmax(fmax(fabs(a1), fabs(a2)), 2.22507386e-308) * a3 + 2.22044605e-16;
}

BOOL CUFloatsNearlyEqualWithinULPs(int a1, float a2, float a3)
{
  unsigned int v3;
  unsigned int v4;
  int v5;

  v3 = LODWORD(a2);
  if (a2 < 0.0)
    v3 = 0x80000000 - LODWORD(a2);
  v4 = 0x80000000 - LODWORD(a3);
  if (a3 >= 0.0)
    v4 = LODWORD(a3);
  v5 = v3 - v4;
  if (v5 < 0)
    v5 = -v5;
  return v5 <= a1;
}

uint64_t iceil2(int a1)
{
  unsigned int v1;
  unsigned int v2;

  v1 = (a1 - 1) | ((a1 - 1) >> 1) | (((a1 - 1) | ((a1 - 1) >> 1)) >> 2);
  v2 = v1 | (v1 >> 4) | ((v1 | (v1 >> 4)) >> 8);
  return (v2 | HIWORD(v2)) + 1;
}

unint64_t ifloor2_64(unint64_t a1)
{
  unint64_t v1;
  unint64_t v2;
  unint64_t v3;

  v1 = a1 | (a1 >> 1) | ((a1 | (a1 >> 1)) >> 2);
  v2 = v1 | (v1 >> 4) | ((v1 | (v1 >> 4)) >> 8);
  v3 = v2 | (v2 >> 16) | ((v2 | (v2 >> 16)) >> 32);
  return v3 - (v3 >> 1);
}

uint64_t ilog2_64(unint64_t a1)
{
  int v1;
  BOOL v2;

  if (HIDWORD(a1))
  {
    LOBYTE(v1) = 0;
    do
    {
      LOBYTE(v1) = v1 + 1;
      v2 = a1 > 3;
      a1 >>= 1;
    }
    while (v2);
  }
  else
  {
    return (__clz(a1 | 1) ^ 0x1F);
  }
  return v1;
}

uint64_t CUFibonacci32(uint64_t result)
{
  int v1;
  int v2;
  int v3;

  if ((_DWORD)result)
  {
    if (result <= 0x2E)
    {
      if (result >= 2)
      {
        v1 = 0;
        v2 = result - 1;
        LODWORD(result) = 1;
        do
        {
          v3 = result;
          result = (result + v1);
          v1 = v3;
          --v2;
        }
        while (v2);
      }
      else
      {
        return 1;
      }
    }
    else
    {
      return 2971215073;
    }
  }
  return result;
}

double TranslateValue(double a1, double a2, double a3, double a4, double a5)
{
  return a4 + (a1 - a2) / (a3 - a2) * (a5 - a4);
}

uint64_t ValueSmootherInit(uint64_t a1, int a2, unsigned int a3)
{
  void *v6;
  BOOL v7;
  uint64_t result;

  *(_QWORD *)a1 = malloc_type_calloc(a3 * a2, 8uLL, 0x100004000313F17uLL);
  v6 = malloc_type_calloc(a3, 8uLL, 0x100004000313F17uLL);
  *(_QWORD *)(a1 + 8) = v6;
  if (*(_QWORD *)a1)
    v7 = v6 == 0;
  else
    v7 = 1;
  if (v7)
  {
    ValueSmootherFree(a1);
    return 4294960568;
  }
  else
  {
    result = 0;
    *(_DWORD *)(a1 + 16) = a2;
    *(_DWORD *)(a1 + 20) = a3;
    *(_DWORD *)(a1 + 24) = 0;
    *(_BYTE *)(a1 + 28) = 0;
  }
  return result;
}

void ValueSmootherFree(uint64_t a1)
{
  void *v2;
  void *v3;

  v2 = *(void **)a1;
  if (v2)
  {
    free(v2);
    *(_QWORD *)a1 = 0;
  }
  v3 = *(void **)(a1 + 8);
  if (v3)
  {
    free(v3);
    *(_QWORD *)(a1 + 8) = 0;
  }
}

double ValueSmootherGet(uint64_t a1)
{
  return *(double *)(*(_QWORD *)(a1 + 8) + 8 * (*(_DWORD *)(a1 + 20) - 1));
}

double ValueSmootherUpdate(uint64_t a1, double a2)
{
  int v2;
  uint64_t v3;
  unsigned int v4;
  int v5;
  uint64_t v6;
  double *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  double *v11;
  double *v12;
  uint64_t v13;

  if (*(_BYTE *)(a1 + 28))
  {
    v3 = *(unsigned int *)(a1 + 20);
    v2 = *(_DWORD *)(a1 + 24);
    v4 = *(_DWORD *)(a1 + 16);
    if (v2 + 1 < v4)
      v5 = v2 + 1;
    else
      v5 = 0;
    *(_DWORD *)(a1 + 24) = v5;
    if ((_DWORD)v3)
    {
      v6 = 0;
      v7 = *(double **)a1;
      v8 = *(_QWORD *)(a1 + 8);
      do
      {
        *(double *)(v8 + 8 * v6) = a2 / (double)v4 + *(double *)(v8 + 8 * v6) - v7[v2] / (double)v4;
        v7[v2] = a2;
        v2 += v4;
        a2 = *(double *)(v8 + 8 * v6++);
      }
      while (v3 != v6);
      LODWORD(v9) = v3;
    }
    else
    {
      LODWORD(v9) = 0;
    }
  }
  else
  {
    v9 = *(unsigned int *)(a1 + 20);
    v10 = (v9 * *(_DWORD *)(a1 + 16));
    if ((_DWORD)v10)
    {
      v11 = *(double **)a1;
      do
      {
        *v11++ = a2;
        --v10;
      }
      while (v10);
    }
    if ((_DWORD)v9)
    {
      v12 = *(double **)(a1 + 8);
      v13 = v9;
      do
      {
        *v12++ = a2;
        --v13;
      }
      while (v13);
    }
    *(_BYTE *)(a1 + 28) = 1;
  }
  return *(double *)(*(_QWORD *)(a1 + 8) + 8 * (v9 - 1));
}

uint64_t MFiPlatform_VerifySignature(const UInt8 *a1, uint64_t a2, const UInt8 *a3, CFIndex a4, const UInt8 *a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  return MFiPlatform_VerifySignatureEx(a1, a2, a3, a4, a5, a6, 0, a8);
}

uint64_t MFiPlatform_VerifySignatureEx(const UInt8 *a1, uint64_t a2, const UInt8 *a3, CFIndex a4, const UInt8 *a5, uint64_t a6, CFDictionaryRef theDict, uint64_t a8)
{
  CFMutableArrayRef Mutable;
  CFDataRef v16;
  SecCertificateRef v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  CFDataRef v22;
  __SecKey *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  __SecKey *v28;
  int v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  CFErrorRef v34;
  CFTypeID TypeID;
  const __CFData *TypedValue;
  SecCertificateRef v37;
  SecCertificateRef v38;
  const void *AppleBasicAttestationUser;
  const void *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  const __CFData *v46;
  const __CFData *v47;
  const __CFArray *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  _BOOL4 v54;
  CFErrorRef v55;
  uint64_t v56;
  __CFArray *v57;
  const __CFData *v58;
  const __CFArray *v59;
  const __CFArray *v60;
  void *ValueAtIndex;
  CFTypeID v62;
  const void *v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  CFIndex Count;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  SecCertificateRef v78;
  const __CFArray *v79;
  const void *v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  _BOOL4 v95;
  CFErrorRef v96;
  unsigned int Code;
  uint64_t v98;
  void *v99;
  CFDataRef v100;
  SecTrustRef v101;
  const __CFString **v102;
  CFDataRef v103;
  const __CFString *v104;
  const __CFData *v105;
  const __CFData *v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  const __CFData *v121;
  const __CFData *v122;
  const UInt8 *BytePtr;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  CFIndex Length;
  BOOL v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  const char *v135;
  unsigned int v136;
  const char *v137;
  uint64_t v138;
  const void *v139;
  const __CFArray *theArray;
  CFErrorRef err;
  SecTrustRef v142;
  void *values;
  unsigned int v144;
  SecTrustRef trust;
  CFErrorRef error[5];

  error[4] = *(CFErrorRef *)MEMORY[0x1E0C80C00];
  v142 = 0;
  if (gLogCategory_MFiClientCore <= 30)
  {
    if (gLogCategory_MFiClientCore != -1 || _LogCategory_Initialize((uint64_t)&gLogCategory_MFiClientCore, 0x1Eu))
      LogPrintF((uint64_t)&gLogCategory_MFiClientCore, (uint64_t)"OSStatus MFiPlatform_VerifySignatureEx(const void *, size_t, const void *, size_t, const void *, size_t, CFDictionaryRef)", 0x1Eu, (uint64_t)"MFi verify signature: %zu data bytes, %zu sig bytes, %zu cert bytes, extraInfo %s\n", (uint64_t)a5, a6, (uint64_t)theDict, a8, a2);
    if (gLogCategory_MFiClientCore <= 9)
    {
      if (gLogCategory_MFiClientCore != -1 || _LogCategory_Initialize((uint64_t)&gLogCategory_MFiClientCore, 9u))
        LogPrintF((uint64_t)&gLogCategory_MFiClientCore, (uint64_t)"OSStatus MFiPlatform_VerifySignatureEx(const void *, size_t, const void *, size_t, const void *, size_t, CFDictionaryRef)", 9u, (uint64_t)"MFi challenge:\n%1.2H\n", (uint64_t)a5, a6, (uint64_t)theDict, a8, (uint64_t)a1);
      if (gLogCategory_MFiClientCore <= 9)
      {
        if (gLogCategory_MFiClientCore != -1 || _LogCategory_Initialize((uint64_t)&gLogCategory_MFiClientCore, 9u))
          LogPrintF((uint64_t)&gLogCategory_MFiClientCore, (uint64_t)"OSStatus MFiPlatform_VerifySignatureEx(const void *, size_t, const void *, size_t, const void *, size_t, CFDictionaryRef)", 9u, (uint64_t)"MFi certificate:\n%1.2H\n", (uint64_t)a5, a6, (uint64_t)theDict, a8, (uint64_t)a5);
        if (gLogCategory_MFiClientCore <= 9)
        {
          if (gLogCategory_MFiClientCore != -1 || _LogCategory_Initialize((uint64_t)&gLogCategory_MFiClientCore, 9u))
            LogPrintF((uint64_t)&gLogCategory_MFiClientCore, (uint64_t)"OSStatus MFiPlatform_VerifySignatureEx(const void *, size_t, const void *, size_t, const void *, size_t, CFDictionaryRef)", 9u, (uint64_t)"MFi signature:\n%1.2H\n", (uint64_t)a5, a6, (uint64_t)theDict, a8, (uint64_t)a3);
          if (gLogCategory_MFiClientCore <= 9
            && (gLogCategory_MFiClientCore != -1 || _LogCategory_Initialize((uint64_t)&gLogCategory_MFiClientCore, 9u)))
          {
            LogPrintF((uint64_t)&gLogCategory_MFiClientCore, (uint64_t)"OSStatus MFiPlatform_VerifySignatureEx(const void *, size_t, const void *, size_t, const void *, size_t, CFDictionaryRef)", 9u, (uint64_t)"MFi extra info: %##@", (uint64_t)a5, a6, (uint64_t)theDict, a8, (uint64_t)theDict);
          }
        }
      }
    }
  }
  if (theDict && CFDictionaryGetValue(theDict, CFSTR("baIC")))
  {
    v144 = 0;
    trust = 0;
    error[0] = 0;
    Mutable = CFArrayCreateMutable(0, 0, MEMORY[0x1E0C9B378]);
    if (!Mutable)
    {
      v22 = 0;
      v16 = 0;
      v144 = -6728;
LABEL_43:
      if (error[0])
        CFRelease(error[0]);
      if (v22)
        CFRelease(v22);
      if (v16)
        CFRelease(v16);
      if (Mutable)
        CFRelease(Mutable);
      return v144;
    }
    v16 = CFDataCreate(0, a5, a6);
    if (!v16)
      goto LABEL_170;
    v17 = SecCertificateCreateWithData(0, v16);
    CFRelease(v16);
    if (!v17)
    {
      v144 = -6742;
      if (gLogCategory_MFiClientCore <= 90
        && (gLogCategory_MFiClientCore != -1 || _LogCategory_Initialize((uint64_t)&gLogCategory_MFiClientCore, 0x5Au)))
      {
        LogPrintF((uint64_t)&gLogCategory_MFiClientCore, (uint64_t)"OSStatus _MFiPlatform_VerifySignatureBAA(const void *, size_t, const void *, size_t, const void *, size_t, CFDictionaryRef)", 0x5Au, (uint64_t)"### Decode BAA intermediate cert failed", v18, v19, v20, v21, v138);
      }
      v16 = 0;
      v22 = 0;
      goto LABEL_41;
    }
    CFArrayAppendValue(Mutable, v17);
    CFRelease(v17);
    v16 = CFDataCreate(0, a1, a2);
    if (!v16)
    {
LABEL_170:
      v22 = 0;
      goto LABEL_171;
    }
    v22 = CFDataCreate(0, a3, a4);
    if (v22)
    {
      v23 = SecCertificateCopyKey(v17);
      if (v23)
      {
        v28 = v23;
        v29 = SecKeyVerifySignature(v23, (SecKeyAlgorithm)*MEMORY[0x1E0CD6DF8], v16, v22, error);
        CFRelease(v28);
        v34 = error[0];
        if (!v29 || error[0])
        {
          v144 = -6716;
          if (gLogCategory_MFiClientCore > 90)
            goto LABEL_41;
          if (gLogCategory_MFiClientCore == -1)
          {
            if (!_LogCategory_Initialize((uint64_t)&gLogCategory_MFiClientCore, 0x5Au))
              goto LABEL_41;
            v34 = error[0];
          }
          LogPrintF((uint64_t)&gLogCategory_MFiClientCore, (uint64_t)"OSStatus _MFiPlatform_VerifySignatureBAA(const void *, size_t, const void *, size_t, const void *, size_t, CFDictionaryRef)", 0x5Au, (uint64_t)"### Verify BAA signature failed: %@", v30, v31, v32, v33, (uint64_t)v34);
          goto LABEL_41;
        }
        TypeID = CFDataGetTypeID();
        TypedValue = CFDictionaryGetTypedValue(theDict, CFSTR("baIC"), TypeID, (int *)&v144);
        if (TypedValue)
        {
          v37 = SecCertificateCreateWithData(0, TypedValue);
          if (v37)
          {
            v38 = v37;
            CFArrayAppendValue(Mutable, v37);
            CFRelease(v38);
            AppleBasicAttestationUser = (const void *)SecPolicyCreateAppleBasicAttestationUser();
            if (AppleBasicAttestationUser)
            {
              v40 = AppleBasicAttestationUser;
              v144 = SecTrustCreateWithCertificates(Mutable, AppleBasicAttestationUser, &trust);
              CFRelease(v40);
              v45 = v144;
              if (v144)
              {
                if (gLogCategory_MFiClientCore > 90)
                  goto LABEL_41;
                if (gLogCategory_MFiClientCore == -1)
                {
                  if (!_LogCategory_Initialize((uint64_t)&gLogCategory_MFiClientCore, 0x5Au))
                    goto LABEL_41;
                  v45 = v144;
                }
                LogPrintF((uint64_t)&gLogCategory_MFiClientCore, (uint64_t)"OSStatus _MFiPlatform_VerifySignatureBAA(const void *, size_t, const void *, size_t, const void *, size_t, CFDictionaryRef)", 0x5Au, (uint64_t)"### Create BAA trust failed: %#m", v41, v42, v43, v44, v45);
                goto LABEL_41;
              }
              v46 = CFDataCreateWithBytesNoCopy(0, BAARootCert, 542, (CFAllocatorRef)*MEMORY[0x1E0C9AE20]);
              if (!v46)
                goto LABEL_171;
              v47 = v46;
              values = SecCertificateCreateWithData(0, v46);
              CFRelease(v47);
              if (values)
              {
                v48 = CFArrayCreate(0, (const void **)&values, 1, MEMORY[0x1E0C9B378]);
                CFRelease(values);
                if (v48)
                {
                  v144 = SecTrustSetAnchorCertificates(trust, v48);
                  CFRelease(v48);
                  v53 = v144;
                  if (v144)
                  {
                    if (gLogCategory_MFiClientCore > 90)
                      goto LABEL_41;
                    if (gLogCategory_MFiClientCore == -1)
                    {
                      if (!_LogCategory_Initialize((uint64_t)&gLogCategory_MFiClientCore, 0x5Au))
                        goto LABEL_41;
                      v53 = v144;
                    }
                    LogPrintF((uint64_t)&gLogCategory_MFiClientCore, (uint64_t)"OSStatus _MFiPlatform_VerifySignatureBAA(const void *, size_t, const void *, size_t, const void *, size_t, CFDictionaryRef)", 0x5Au, (uint64_t)"### Set BAA anchors failed: %#m", v49, v50, v51, v52, v53);
                    goto LABEL_41;
                  }
                  v54 = SecTrustEvaluateWithError(trust, error);
                  v55 = error[0];
                  if (!v54 || error[0])
                  {
                    v144 = -71164;
                    if (gLogCategory_MFiClientCore <= 90)
                    {
                      if (gLogCategory_MFiClientCore != -1)
                      {
LABEL_211:
                        v138 = (uint64_t)v55;
                        v137 = "### Verify BAA trust failed: %@";
                        goto LABEL_212;
                      }
                      if (_LogCategory_Initialize((uint64_t)&gLogCategory_MFiClientCore, 0x5Au))
                      {
                        v55 = error[0];
                        goto LABEL_211;
                      }
                    }
                  }
LABEL_41:
                  if (trust)
                    CFRelease(trust);
                  goto LABEL_43;
                }
                goto LABEL_171;
              }
              if (gLogCategory_MFiClientCore > 90
                || gLogCategory_MFiClientCore == -1
                && !_LogCategory_Initialize((uint64_t)&gLogCategory_MFiClientCore, 0x5Au))
              {
                goto LABEL_41;
              }
              v137 = "### Create BAA root cert failed";
            }
            else
            {
              v144 = -6700;
              if (gLogCategory_MFiClientCore > 90
                || gLogCategory_MFiClientCore == -1
                && !_LogCategory_Initialize((uint64_t)&gLogCategory_MFiClientCore, 0x5Au))
              {
                goto LABEL_41;
              }
              v137 = "### Get BAA policy failed";
            }
          }
          else
          {
            v144 = -6742;
            if (gLogCategory_MFiClientCore > 90
              || gLogCategory_MFiClientCore == -1
              && !_LogCategory_Initialize((uint64_t)&gLogCategory_MFiClientCore, 0x5Au))
            {
              goto LABEL_41;
            }
            v137 = "### Bad BAA intermediate cert";
          }
        }
        else
        {
          if (gLogCategory_MFiClientCore > 90
            || gLogCategory_MFiClientCore == -1 && !_LogCategory_Initialize((uint64_t)&gLogCategory_MFiClientCore, 0x5Au))
          {
            goto LABEL_41;
          }
          v137 = "### No BAA intermediate cert";
        }
      }
      else
      {
        v144 = -71155;
        if (gLogCategory_MFiClientCore > 90
          || gLogCategory_MFiClientCore == -1 && !_LogCategory_Initialize((uint64_t)&gLogCategory_MFiClientCore, 0x5Au))
        {
          goto LABEL_41;
        }
        v137 = "### No BAA leaf public key";
      }
LABEL_212:
      LogPrintF((uint64_t)&gLogCategory_MFiClientCore, (uint64_t)"OSStatus _MFiPlatform_VerifySignatureBAA(const void *, size_t, const void *, size_t, const void *, size_t, CFDictionaryRef)", 0x5Au, (uint64_t)v137, v24, v25, v26, v27, v138);
      goto LABEL_41;
    }
LABEL_171:
    v144 = -6728;
    goto LABEL_41;
  }
  v57 = CFArrayCreateMutable(0, 0, MEMORY[0x1E0C9B378]);
  if (!v57)
  {
    v58 = 0;
    goto LABEL_173;
  }
  v58 = CFDataCreate(0, a5, a6);
  if (!v58)
  {
LABEL_173:
    v79 = 0;
    v60 = 0;
    v80 = 0;
    v56 = 4294960568;
    goto LABEL_130;
  }
  v59 = (const __CFArray *)SecCMSCertificatesOnlyMessageCopyCertificates();
  v60 = v59;
  if (v59)
  {
    if (CFArrayGetCount(v59) < 1)
    {
      v79 = 0;
      v80 = 0;
      v56 = 4294960532;
      goto LABEL_130;
    }
    ValueAtIndex = (void *)CFArrayGetValueAtIndex(v60, 0);
    v62 = CFGetTypeID(ValueAtIndex);
    if (v62 != SecCertificateGetTypeID())
    {
      v79 = 0;
      v80 = 0;
      v56 = 4294960540;
      goto LABEL_130;
    }
    CFArrayAppendValue(v57, ValueAtIndex);
    v63 = (const void *)SecPolicyCreateiAP();
    v139 = 0;
    if (v63)
      goto LABEL_58;
    goto LABEL_68;
  }
  v78 = SecCertificateCreateWithData(0, v58);
  if (v78)
  {
    ValueAtIndex = v78;
    CFArrayAppendValue(v57, v78);
    v63 = (const void *)SecPolicyCreateiAPSWAuth();
    v139 = ValueAtIndex;
    if (v63)
    {
LABEL_58:
      v56 = SecTrustCreateWithCertificates(v57, v63, &v142);
      CFRelease(v63);
      if (!(_DWORD)v56)
      {
        if (a4 == 128)
          v68 = 1;
        else
          v68 = 6;
        theArray = (const __CFArray *)((uint64_t (*)(uint64_t))softLinkmfaa_certificateManager_copyAnchorCertificates[0])(v68);
        if (theArray)
        {
          if (gLogCategory_MFiClientCore <= 30
            && (gLogCategory_MFiClientCore != -1 || _LogCategory_Initialize((uint64_t)&gLogCategory_MFiClientCore, 0x1Eu)))
          {
            Count = CFArrayGetCount(theArray);
            LogPrintF((uint64_t)&gLogCategory_MFiClientCore, (uint64_t)"OSStatus MFiPlatform_VerifySignatureEx(const void *, size_t, const void *, size_t, const void *, size_t, CFDictionaryRef)", 0x1Eu, (uint64_t)"MFi verify signature: %d anchor certs\n", v74, v75, v76, v77, Count);
          }
          v81 = SecTrustSetAnchorCertificates(v142, theArray);
          if ((_DWORD)v81)
          {
            v56 = v81;
            if (gLogCategory_MFiClientCore <= 90
              && (gLogCategory_MFiClientCore != -1
               || _LogCategory_Initialize((uint64_t)&gLogCategory_MFiClientCore, 0x5Au)))
            {
              LogPrintF((uint64_t)&gLogCategory_MFiClientCore, (uint64_t)"OSStatus MFiPlatform_VerifySignatureEx(const void *, size_t, const void *, size_t, const void *, size_t, CFDictionaryRef)", 0x5Au, (uint64_t)"### MFi set anchor certs failed: %#m\n", v82, v83, v84, v85, v56);
            }
            goto LABEL_129;
          }
          v86 = SecTrustSetAnchorCertificatesOnly(v142, 1u);
          if ((_DWORD)v86)
          {
            v56 = v86;
            if (gLogCategory_MFiClientCore <= 90
              && (gLogCategory_MFiClientCore != -1
               || _LogCategory_Initialize((uint64_t)&gLogCategory_MFiClientCore, 0x5Au)))
            {
              LogPrintF((uint64_t)&gLogCategory_MFiClientCore, (uint64_t)"OSStatus MFiPlatform_VerifySignatureEx(const void *, size_t, const void *, size_t, const void *, size_t, CFDictionaryRef)", 0x5Au, (uint64_t)"### MFi set anchor certs only failed: %#m\n", v87, v88, v89, v90, v56);
            }
            goto LABEL_129;
          }
        }
        else if (gLogCategory_MFiClientCore <= 90
               && (gLogCategory_MFiClientCore != -1
                || _LogCategory_Initialize((uint64_t)&gLogCategory_MFiClientCore, 0x5Au)))
        {
          LogPrintF((uint64_t)&gLogCategory_MFiClientCore, (uint64_t)"OSStatus MFiPlatform_VerifySignatureEx(const void *, size_t, const void *, size_t, const void *, size_t, CFDictionaryRef)", 0x5Au, (uint64_t)"### MFi no certificates from MFA\n", v69, v70, v71, v72, v138);
        }
        err = 0;
        v95 = SecTrustEvaluateWithError(v142, &err);
        if (v95)
          v56 = 0;
        else
          v56 = 4294960563;
        v96 = err;
        if (!v95 && err)
        {
          Code = CFErrorGetCode(err);
          if (Code)
            v56 = Code;
          else
            v56 = 4294960563;
          v96 = err;
        }
        if (v96)
          CFRelease(v96);
        if ((_DWORD)v56)
        {
          v80 = v139;
          v79 = theArray;
          if (gLogCategory_MFiClientCore <= 90
            && (gLogCategory_MFiClientCore != -1 || _LogCategory_Initialize((uint64_t)&gLogCategory_MFiClientCore, 0x5Au)))
          {
            LogPrintF((uint64_t)&gLogCategory_MFiClientCore, (uint64_t)"OSStatus MFiPlatform_VerifySignatureEx(const void *, size_t, const void *, size_t, const void *, size_t, CFDictionaryRef)", 0x5Au, (uint64_t)"### MFi SecTrustEvaluate failed: %#m\n", v91, v92, v93, v94, v56);
          }
          goto LABEL_130;
        }
        v98 = MEMORY[0x18D78DED8](v142);
        if (!v98)
        {
          v56 = 4294960596;
          goto LABEL_129;
        }
        v99 = (void *)v98;
        trust = 0;
        if (a4 == 128)
        {
          CC_SHA1(a1, a2, (unsigned __int8 *)error);
          v100 = CFDataCreate(0, (const UInt8 *)error, 20);
          if (v100)
          {
            v101 = v100;
            v102 = (const __CFString **)MEMORY[0x1E0CD6E58];
            goto LABEL_94;
          }
        }
        else
        {
          CC_SHA256(a1, a2, (unsigned __int8 *)error);
          v103 = CFDataCreate(0, (const UInt8 *)error, 32);
          if (v103)
          {
            v101 = v103;
            v102 = (const __CFString **)MEMORY[0x1E0CD6D90];
LABEL_94:
            v104 = *v102;
            v105 = CFDataCreate(0, a3, a4);
            if (!v105)
            {
              v56 = 4294960568;
LABEL_109:
              CFRelease(v101);
LABEL_110:
              CFRelease(v99);
              if (!(_DWORD)v56)
              {
                if (MFAAuthenticationLibrary_sOnce != -1)
                  dispatch_once(&MFAAuthenticationLibrary_sOnce, &__block_literal_global_11318);
                if (MFAAuthenticationLibrary_sLib
                  && dlsym((void *)MFAAuthenticationLibrary_sLib, "mfaa_certificateManager_validateCertificate"))
                {
                  v115 = ((uint64_t (*)(uint64_t, uint64_t))softLinkmfaa_certificateManager_validateCertificate[0])((uint64_t)v58, 0);
                  if ((_DWORD)v115 != 1)
                  {
                    v56 = 4294896132;
                    v80 = v139;
                    v79 = theArray;
                    if (gLogCategory_MFiClientCore <= 60)
                    {
                      v120 = v115;
                      if (gLogCategory_MFiClientCore != -1
                        || _LogCategory_Initialize((uint64_t)&gLogCategory_MFiClientCore, 0x3Cu))
                      {
                        LogPrintF((uint64_t)&gLogCategory_MFiClientCore, (uint64_t)"OSStatus MFiPlatform_VerifySignatureEx(const void *, size_t, const void *, size_t, const void *, size_t, CFDictionaryRef)", 0x3Cu, (uint64_t)"### MFi cert rejected (%d)\n", v116, v117, v118, v119, v120);
                      }
                    }
                    goto LABEL_130;
                  }
                  goto LABEL_128;
                }
                if (gLogCategory_MFiClientCore <= 60
                  && (gLogCategory_MFiClientCore != -1
                   || _LogCategory_Initialize((uint64_t)&gLogCategory_MFiClientCore, 0x3Cu)))
                {
                  LogPrintF((uint64_t)&gLogCategory_MFiClientCore, (uint64_t)"OSStatus MFiPlatform_VerifySignatureEx(const void *, size_t, const void *, size_t, const void *, size_t, CFDictionaryRef)", 0x3Cu, (uint64_t)"### MFi cert manager not available\n", v111, v112, v113, v114, v138);
                }
                if (a4 != 128
                  || (v121 = SecCertificateCopySerialNumberData((SecCertificateRef)ValueAtIndex, 0)) == 0)
                {
LABEL_128:
                  v56 = 0;
                  goto LABEL_129;
                }
                v122 = v121;
                BytePtr = CFDataGetBytePtr(v121);
                Length = CFDataGetLength(v122);
                if (gLogCategory_MFiClientCore <= 40
                  && (gLogCategory_MFiClientCore != -1
                   || _LogCategory_Initialize((uint64_t)&gLogCategory_MFiClientCore, 0x28u)))
                {
                  LogPrintF((uint64_t)&gLogCategory_MFiClientCore, (uint64_t)"OSStatus _VerifySerialNumber(const uint8_t *, size_t)", 0x28u, (uint64_t)"MFi certificate serial number: %.3H\n", v124, v125, v126, v127, (uint64_t)BytePtr);
                }
                if (Length == 15
                  && (*(_QWORD *)BytePtr == 0x7AA191212AA3333
                    ? (v130 = *(_QWORD *)(BytePtr + 7) == 0x10000AA0600AA07)
                    : (v130 = 0),
                      v130))
                {
                  if (gLogCategory_MFiClientCore > 40)
                  {
                    v56 = 0;
LABEL_156:
                    v80 = v139;
                    v79 = theArray;
LABEL_169:
                    CFRelease(v122);
                    goto LABEL_130;
                  }
                  v80 = v139;
                  v79 = theArray;
                  if (gLogCategory_MFiClientCore != -1
                    || _LogCategory_Initialize((uint64_t)&gLogCategory_MFiClientCore, 0x28u))
                  {
                    v135 = "Allowing MFi test certificate serial number\n";
                    v136 = 40;
                    goto LABEL_163;
                  }
                }
                else
                {
                  if (IAPAuthenticationLibrary_sOnce != -1)
                    dispatch_once(&IAPAuthenticationLibrary_sOnce, &__block_literal_global_41_11325);
                  if (IAPAuthenticationLibrary_sLib
                    && dlsym((void *)IAPAuthenticationLibrary_sLib, "MFiVerifyCertificateSerialNumber"))
                  {
                    v56 = ((uint64_t (*)(uint64_t, uint64_t))softLinkMFiVerifyCertificateSerialNumber[0])((uint64_t)BytePtr, Length);
                    if ((_DWORD)v56
                      && gLogCategory_MFiClientCore <= 60
                      && (gLogCategory_MFiClientCore != -1
                       || _LogCategory_Initialize((uint64_t)&gLogCategory_MFiClientCore, 0x3Cu)))
                    {
                      LogPrintF((uint64_t)&gLogCategory_MFiClientCore, (uint64_t)"OSStatus _VerifySerialNumber(const uint8_t *, size_t)", 0x3Cu, (uint64_t)"### Bad MFi certificate SN <%.3H>: %#m\n", v131, v132, v133, v134, (uint64_t)BytePtr);
                    }
                    goto LABEL_156;
                  }
                  v80 = v139;
                  v79 = theArray;
                  if (gLogCategory_MFiClientCore <= 90
                    && (gLogCategory_MFiClientCore != -1
                     || _LogCategory_Initialize((uint64_t)&gLogCategory_MFiClientCore, 0x5Au)))
                  {
                    v135 = "Skipping MFi certificate serial number check (no func)\n";
                    v136 = 90;
LABEL_163:
                    LogPrintF((uint64_t)&gLogCategory_MFiClientCore, (uint64_t)"OSStatus _VerifySerialNumber(const uint8_t *, size_t)", v136, (uint64_t)v135, v124, v125, v126, v127, v138);
                  }
                }
                v56 = 0;
                goto LABEL_169;
              }
LABEL_129:
              v80 = v139;
              v79 = theArray;
              goto LABEL_130;
            }
            v106 = v105;
            if (SecKeyVerifySignature((SecKeyRef)v99, v104, v101, v105, &trust))
            {
              v56 = 0;
              goto LABEL_108;
            }
            if (trust)
            {
              v56 = CFErrorGetCode(trust);
              if (!(_DWORD)v56)
                goto LABEL_108;
            }
            else
            {
              v56 = 4294960596;
            }
            if (gLogCategory_MFiClientCore <= 90
              && (gLogCategory_MFiClientCore != -1
               || _LogCategory_Initialize((uint64_t)&gLogCategory_MFiClientCore, 0x5Au)))
            {
              LogPrintF((uint64_t)&gLogCategory_MFiClientCore, (uint64_t)"OSStatus _SecKeyVerifySignature(SecKeyRef, const uint8_t *, size_t, const uint8_t *, size_t)", 0x5Au, (uint64_t)"### MFi SecKeyVerifySignature failed: %#m, %@\n", v107, v108, v109, v110, v56);
            }
LABEL_108:
            CFRelease(v101);
            CFRelease(v106);
            v101 = trust;
            if (!trust)
              goto LABEL_110;
            goto LABEL_109;
          }
        }
        CFRelease(v99);
        v56 = 4294960568;
        goto LABEL_129;
      }
      if (gLogCategory_MFiClientCore <= 90)
      {
        v80 = v139;
        if (gLogCategory_MFiClientCore != -1 || _LogCategory_Initialize((uint64_t)&gLogCategory_MFiClientCore, 0x5Au))
          LogPrintF((uint64_t)&gLogCategory_MFiClientCore, (uint64_t)"OSStatus MFiPlatform_VerifySignatureEx(const void *, size_t, const void *, size_t, const void *, size_t, CFDictionaryRef)", 0x5Au, (uint64_t)"### MFi create trust failed: %#m\n", v64, v65, v66, v67, v56);
        v79 = 0;
        goto LABEL_130;
      }
      v79 = 0;
LABEL_223:
      v80 = v139;
      goto LABEL_130;
    }
LABEL_68:
    v79 = 0;
    v56 = 4294960596;
    goto LABEL_223;
  }
  v79 = 0;
  v60 = 0;
  v80 = 0;
  v56 = 4294960554;
LABEL_130:
  if (v142)
    CFRelease(v142);
  if (v60)
    CFRelease(v60);
  if (v79)
    CFRelease(v79);
  if (v57)
    CFRelease(v57);
  if (v80)
    CFRelease(v80);
  if (v58)
    CFRelease(v58);
  return v56;
}

uint64_t initMFiVerifyCertificateSerialNumber(uint64_t a1, uint64_t a2)
{
  if (IAPAuthenticationLibrary_sOnce != -1)
    dispatch_once(&IAPAuthenticationLibrary_sOnce, &__block_literal_global_41_11325);
  softLinkMFiVerifyCertificateSerialNumber[0] = (uint64_t (*)())dlsym((void *)IAPAuthenticationLibrary_sLib, "MFiVerifyCertificateSerialNumber");
  return ((uint64_t (*)(uint64_t, uint64_t))softLinkMFiVerifyCertificateSerialNumber[0])(a1, a2);
}

uint64_t initmfaa_certificateManager_validateCertificate(uint64_t a1, uint64_t a2)
{
  if (MFAAuthenticationLibrary_sOnce != -1)
    dispatch_once(&MFAAuthenticationLibrary_sOnce, &__block_literal_global_11318);
  softLinkmfaa_certificateManager_validateCertificate[0] = (uint64_t (*)())dlsym((void *)MFAAuthenticationLibrary_sLib, "mfaa_certificateManager_validateCertificate");
  return ((uint64_t (*)(uint64_t, uint64_t))softLinkmfaa_certificateManager_validateCertificate[0])(a1, a2);
}

uint64_t initmfaa_certificateManager_copyAnchorCertificates(uint64_t a1)
{
  if (MFAAuthenticationLibrary_sOnce != -1)
    dispatch_once(&MFAAuthenticationLibrary_sOnce, &__block_literal_global_11318);
  softLinkmfaa_certificateManager_copyAnchorCertificates[0] = (uint64_t (*)())dlsym((void *)MFAAuthenticationLibrary_sLib, "mfaa_certificateManager_copyAnchorCertificates");
  return ((uint64_t (*)(uint64_t))softLinkmfaa_certificateManager_copyAnchorCertificates[0])(a1);
}

uint64_t MFiSAP_Create(_QWORD *a1, int a2)
{
  _WORD *v3;
  _WORD *v4;
  uint64_t result;

  if (a2 != 1)
    return 4294960581;
  v3 = malloc_type_calloc(1uLL, 0xB8uLL, 0x1070040EAFE2D55uLL);
  if (!v3)
    return 4294960568;
  v4 = v3;
  result = 0;
  *v4 = 257;
  *a1 = v4;
  return result;
}

void MFiSAP_Delete(_CCCryptor **__s)
{
  _CCCryptor *v2;
  _CCCryptor *v3;

  if (*((_BYTE *)__s + 168))
  {
    AES_CTR_Final(__s + 15);
    *((_BYTE *)__s + 168) = 0;
  }
  v2 = __s[13];
  if (v2)
  {
    free(v2);
    __s[13] = 0;
  }
  __s[14] = 0;
  v3 = __s[22];
  if (v3)
  {
    CFRelease(v3);
    __s[22] = 0;
  }
  memset_s(__s, 0xB8uLL, 0, 0xB8uLL);
  free(__s);
}

uint64_t MFiSAP_CopyCertificate(uint64_t a1, _QWORD *a2, _QWORD *a3)
{
  size_t v4;
  void *v7;
  void *v8;
  uint64_t result;

  if (*(_BYTE *)a1 != 4)
    return 4294960587;
  if (!*(_QWORD *)(a1 + 104))
    return 4294960569;
  v4 = *(_QWORD *)(a1 + 112);
  if (!v4)
    return 4294960553;
  v7 = malloc_type_malloc(v4, 0x3AF98461uLL);
  if (!v7)
    return 4294960568;
  v8 = v7;
  memcpy(v7, *(const void **)(a1 + 104), *(_QWORD *)(a1 + 112));
  result = 0;
  *a2 = v8;
  *a3 = *(_QWORD *)(a1 + 112);
  return result;
}

uint64_t MFiSAP_CopyCertificateSerialNumber(uint64_t a1, _QWORD *a2, _QWORD *a3)
{
  const UInt8 *v4;
  CFIndex v6;
  CFDataRef v7;
  CFDataRef v8;
  const __CFArray *v9;
  void *ValueAtIndex;
  CFTypeID v11;
  const __CFData *v12;
  const __CFData *v13;
  _BYTE *v14;
  int v16;
  size_t v17;
  unsigned int v18;

  if (*(_BYTE *)a1 != 4)
    return 4294960587;
  v4 = *(const UInt8 **)(a1 + 104);
  if (!v4)
    return 4294960569;
  v6 = *(_QWORD *)(a1 + 112);
  if (!v6)
    return 4294960553;
  v7 = CFDataCreate(0, v4, v6);
  if (!v7)
    return 4294960568;
  v8 = v7;
  v9 = (const __CFArray *)SecCMSCertificatesOnlyMessageCopyCertificates();
  CFRelease(v8);
  if (v9)
  {
    v18 = 0;
    v17 = 0;
    if (CFArrayGetCount(v9) <= 0)
    {
      v16 = -6764;
    }
    else
    {
      ValueAtIndex = (void *)CFArrayGetValueAtIndex(v9, 0);
      v11 = CFGetTypeID(ValueAtIndex);
      if (v11 == SecCertificateGetTypeID())
      {
        v12 = SecCertificateCopySerialNumberData((SecCertificateRef)ValueAtIndex, 0);
        if (v12)
        {
          v13 = v12;
          v14 = CFCopyData(v12, &v17, &v18);
          CFRelease(v13);
          if (!v18)
          {
            if (v17 >= 8 && v17 != 16)
            {
              if (IsAppleInternalBuild_sOnce != -1)
                dispatch_once(&IsAppleInternalBuild_sOnce, &__block_literal_global_85);
              if (IsAppleInternalBuild_sIsInternal)
                v14[7] &= ~0x80u;
            }
            *a2 = v14;
            *a3 = v17;
            v18 = 0;
          }
          goto LABEL_12;
        }
        v16 = -6727;
      }
      else
      {
        v16 = -6756;
      }
    }
    v18 = v16;
LABEL_12:
    CFRelease(v9);
    return v18;
  }
  return 4294960554;
}

uint64_t MFiSAP_Exchange(unsigned __int8 *a1, uint64_t a2, uint64_t a3, _QWORD *a4, _QWORD *a5, char *a6)
{
  char *v6;
  _QWORD *v7;
  int v11;
  char *v12;
  char v13;
  __int128 v14;
  unint64_t v15;
  uint64_t result;
  unsigned int *v17;
  unsigned int *v18;
  char *v19;
  unsigned int v20;
  size_t v21;
  unsigned int *v23;
  UInt8 *v24;
  unsigned int v25;
  unint64_t v26;
  const __CFString *v28;
  const __CFString *v29;
  CFTypeID v30;
  const void *v31;
  int8x16_t v32;
  UInt8 *v33;
  UInt8 *v34;
  CCCryptorStatus v35;
  uint64_t v36;
  __int128 v37;
  __int128 v38;
  void *v39;
  void *v40;
  unint64_t v41;
  const UInt8 *__src;
  CC_SHA1_CTX c;
  unsigned int v46;
  _OWORD v47[4];
  unsigned __int8 v48[20];
  unsigned __int8 md[20];
  uint64_t v50;

  v6 = a6;
  v7 = a5;
  v50 = *MEMORY[0x1E0C80C00];
  v11 = *a1;
  if (v11 == 1)
  {
    if (a2)
      v11 = 5;
    else
      v11 = 2;
    *a1 = v11;
  }
  if (v11 == 3)
  {
    v46 = 0;
    if (a3 >= 36)
    {
      v15 = bswap32(*(_DWORD *)(a2 + 32));
      result = 4294960553;
      if (!(_DWORD)v15)
        goto LABEL_36;
      if (a3 - 36 < v15)
        goto LABEL_36;
      v17 = (unsigned int *)(a2 + a3);
      __src = (const UInt8 *)(a2 + 36);
      v18 = (unsigned int *)(a2 + 36 + v15);
      if ((uint64_t)(a3 - (v15 + 36)) < 4)
        goto LABEL_36;
      v20 = *v18;
      v19 = (char *)(v18 + 1);
      v21 = bswap32(v20);
      if (!(_DWORD)v21 || (char *)v17 - v19 < v21)
        goto LABEL_36;
      memset(&c, 0, sizeof(c));
      v23 = (unsigned int *)&v19[v21];
      if ((char *)v17 - &v19[v21] >= 4)
      {
        v41 = v15;
        v25 = *v23;
        v24 = (UInt8 *)(v23 + 1);
        v26 = bswap32(v25);
        if ((char *)v17 - (char *)v24 < v26)
          goto LABEL_36;
        v28 = _OPACKDecodeBytes(0, v24, v26, 0, &v46);
        if (!v28)
        {
          if (v46)
            result = v46;
          else
            result = 4294960554;
          goto LABEL_36;
        }
        v29 = v28;
        v30 = CFGetTypeID(v28);
        if (v30 != CFDictionaryGetTypeID())
        {
          v46 = -6756;
          CFRelease(v29);
          v6 = a6;
LABEL_32:
          result = v46;
          if (!v46)
          {
            v13 = 1;
            goto LABEL_34;
          }
          goto LABEL_36;
        }
        v23 = (unsigned int *)&v24[v26];
        v31 = (const void *)*((_QWORD *)a1 + 22);
        v6 = a6;
        if (v31)
          CFRelease(v31);
        *((_QWORD *)a1 + 22) = v29;
        v15 = v41;
        v7 = a5;
      }
      if (v23 == v17)
      {
        cccurve25519();
        v32 = vorrq_s8(*(int8x16_t *)(a1 + 82), *(int8x16_t *)(a1 + 66));
        if (!*(_QWORD *)&vorr_s8(*(int8x8_t *)v32.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v32, v32, 8uLL)))
        {
          result = 4294960554;
          goto LABEL_36;
        }
        CC_SHA1_Init(&c);
        CC_SHA1_Update(&c, "AES-KEY", 7u);
        CC_SHA1_Update(&c, a1 + 66, 0x20u);
        CC_SHA1_Final(md, &c);
        CC_SHA1_Init(&c);
        CC_SHA1_Update(&c, "AES-IV", 6u);
        CC_SHA1_Update(&c, a1 + 66, 0x20u);
        CC_SHA1_Final(v48, &c);
        v33 = (UInt8 *)malloc_type_malloc(v21, 0xF553D6B5uLL);
        if (!v33)
          goto LABEL_46;
        v34 = v33;
        memcpy(v33, v19, v21);
        *((_QWORD *)a1 + 15) = 0;
        v35 = CCCryptorCreate(0, 0, 2u, md, 0x10uLL, 0, (CCCryptorRef *)a1 + 15);
        if (v35)
        {
          v46 = v35;
        }
        else
        {
          *((_OWORD *)a1 + 8) = *(_OWORD *)v48;
          *((_QWORD *)a1 + 20) = 0;
          v46 = 0;
          v46 = AES_CTR_Update((uint64_t)(a1 + 120), v19, v21, v34);
          if (!v46 || (AES_CTR_Final((_CCCryptor **)a1 + 15), !v46))
          {
            a1[168] = 1;
            v37 = *(_OWORD *)(a2 + 16);
            v47[0] = *(_OWORD *)a2;
            v47[1] = v37;
            v38 = *(_OWORD *)(a1 + 50);
            v47[2] = *(_OWORD *)(a1 + 34);
            v47[3] = v38;
            v46 = MFiPlatform_VerifySignatureEx((const UInt8 *)v47, 64, v34, v21, __src, v15, *((CFDictionaryRef *)a1 + 22), v36);
            if (!v46)
            {
              v39 = (void *)*((_QWORD *)a1 + 13);
              if (v39)
              {
                free(v39);
                *((_QWORD *)a1 + 13) = 0;
              }
              *((_QWORD *)a1 + 14) = 0;
              v40 = malloc_type_malloc(v15, 0x7D19E9FBuLL);
              *((_QWORD *)a1 + 13) = v40;
              if (v40)
              {
                memcpy(v40, __src, v15);
                *((_QWORD *)a1 + 14) = v15;
              }
              *a4 = 0;
              *v7 = 0;
            }
          }
        }
        free(v34);
        goto LABEL_32;
      }
    }
    result = 4294960553;
    goto LABEL_36;
  }
  if (v11 == 2)
  {
    RandomBytes(a1 + 2, 0x20uLL);
    CryptoHKDF((uint64_t)kCryptoHashDescriptor_SHA512, (uint64_t)(a1 + 2), 32, "MFiSAP-ECDH-Salt", 0x10uLL, (uint64_t)"MFiSAP-ECDH-Info", 16, 0x20uLL, (uint64_t)(a1 + 2));
    cccurve25519_make_pub();
    v12 = (char *)malloc_type_malloc(0x21uLL, 0x498033D0uLL);
    if (v12)
    {
      v13 = 0;
      *v12 = a1[1];
      v14 = *(_OWORD *)(a1 + 34);
      *(_OWORD *)(v12 + 17) = *(_OWORD *)(a1 + 50);
      *(_OWORD *)(v12 + 1) = v14;
      *a4 = v12;
      *v7 = 33;
LABEL_34:
      result = 0;
      ++*a1;
      *v6 = v13;
      return result;
    }
LABEL_46:
    result = 4294960568;
    goto LABEL_36;
  }
  result = 4294960587;
LABEL_36:
  *a1 = 0;
  return result;
}

uint64_t MFiSAP_Encrypt(_BYTE *a1, char *a2, unint64_t a3, _BYTE *a4)
{
  if ((*a1 & 0xFD) == 4)
    return AES_CTR_Update((uint64_t)(a1 + 120), a2, a3, a4);
  else
    return 4294960587;
}

uint64_t MFiSAP_Decrypt(_BYTE *a1, char *a2, unint64_t a3, _BYTE *a4)
{
  if ((*a1 & 0xFD) == 4)
    return AES_CTR_Update((uint64_t)(a1 + 120), a2, a3, a4);
  else
    return 4294960587;
}

uint64_t MFiPlatform_Initialize()
{
  return 0;
}

uint64_t MFiPlatform_CreateSignature(unsigned __int8 *a1, size_t a2, _QWORD *a3, size_t *a4)
{
  return MFiPlatform_CreateSignatureEx(1, a1, a2, a3, a4);
}

uint64_t MFiPlatform_CreateSignatureEx(char a1, unsigned __int8 *data, size_t len, _QWORD *a4, size_t *a5)
{
  uint64_t v10;
  void *v11;
  int v12;
  void *v13;
  void *v14;
  uint64_t v15;
  uint64_t v16;
  dispatch_queue_t *v17;
  NSObject *v18;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  CFTypeRef v25;
  uint64_t v26;
  size_t v27;
  void *v28;
  void *v29;
  int64_t v30;
  unsigned int v31;
  size_t size;
  CFTypeRef cf;
  unsigned __int8 md[32];
  uint64_t __src[33];

  __src[32] = *MEMORY[0x1E0C80C00];
  if (IsAppleInternalBuild_sOnce != -1)
    dispatch_once(&IsAppleInternalBuild_sOnce, &__block_literal_global_85);
  if (!IsAppleInternalBuild_sIsInternal)
    return 4294960561;
  v31 = 0;
  if ((a1 & 1) == 0)
  {
    CC_SHA1(data, len, md);
    len = 20;
    data = md;
  }
  v30 = 0;
  v10 = _CopyKey(&v30, &v31);
  if (v10)
  {
    v11 = (void *)v10;
    cf = 0;
    v12 = CCRSACryptorImport();
    if (!v12)
    {
      size = 256;
      v12 = CCRSACryptorSign();
      MEMORY[0x18D78D410](cf);
      if (!v12)
      {
        if (size)
        {
          v13 = malloc_type_malloc(size, 0x7FE2A769uLL);
          if (v13)
          {
            v14 = v13;
            memcpy(v13, __src, size);
            v12 = 0;
            *a4 = v14;
            *a5 = size;
          }
          else
          {
            v12 = -6728;
          }
        }
        else
        {
          v12 = -6762;
        }
      }
    }
    v31 = v12;
    free(v11);
    return v31;
  }
  else
  {
    __src[0] = 0;
    cf = 0;
    v16 = HTTPClientCreate(__src);
    v17 = (dispatch_queue_t *)__src[0];
    if ((_DWORD)v16 || (v16 = HTTPClientSetDestination(__src[0], "spc.apple.com", 14000), (_DWORD)v16))
    {
      v15 = v16;
      v18 = 0;
    }
    else
    {
      HTTPClientSetTimeout((uint64_t)v17, 30);
      v18 = dispatch_queue_create("MFiProxy", 0);
      if (v18)
      {
        HTTPClientSetDispatchQueue((uint64_t)v17, v18);
        v20 = HTTPMessageCreate((uint64_t *)&cf);
        if ((_DWORD)v20
          || (v25 = cf,
              HTTPHeader_InitRequestF((uint64_t)cf + 24, (uint64_t)"HTTP/1.1", (uint64_t)"POST", (uint64_t)"%s", v21, v22, v23, v24, (uint64_t)"/mfi-create-signature"), v20 = HTTPMessageSetBody((uint64_t)v25, (uint64_t)"application/octet-stream", data, len), (_DWORD)v20))
        {
          v15 = v20;
        }
        else
        {
          v26 = HTTPClientSendMessageSync(v17, (uint64_t)v25);
          if (!(_DWORD)v26 || (v15 = v26, (v26 - 200100) <= 0x1F3))
          {
            v27 = *((_QWORD *)v25 + 1066);
            if (v27)
            {
              v28 = malloc_type_malloc(v27, 0xAE629488uLL);
              if (v28)
              {
                v29 = v28;
                memcpy(v28, *((const void **)v25 + 1065), *((_QWORD *)v25 + 1066));
                v15 = 0;
                *a4 = v29;
                *a5 = *((_QWORD *)v25 + 1066);
              }
              else
              {
                v15 = 4294960568;
              }
            }
            else
            {
              v15 = 4294960553;
            }
          }
        }
      }
      else
      {
        v15 = 4294960596;
      }
    }
    if (v17)
    {
      CFRetain(v17);
      dispatch_async_f(v17[2], v17, (dispatch_function_t)_HTTPClientInvalidate);
      CFRelease(v17);
      __src[0] = 0;
    }
    if (cf)
      CFRelease(cf);

  }
  return v15;
}

uint64_t _CopyKey(int64_t *a1, _DWORD *a2)
{
  char *v4;
  int v5;
  char *v6;
  int v7;
  uint64_t result;
  int64_t v9;
  uint64_t v10;
  char *v11;

  v11 = 0;
  v9 = 0;
  v4 = getenv("MFI_KEY_PATH");
  if (!v4)
    v4 = "mfi-key.txt";
  v5 = CopyFileDataByPath(v4, &v11, (unint64_t *)&v9);
  if (v5)
  {
    v7 = v5;
  }
  else
  {
    v10 = 0;
    v6 = v11;
    v7 = HexToDataCopy(v11, v9, 22, &v10, (unint64_t *)&v9, 0);
    free(v6);
    if (!v7)
    {
      result = v10;
      *a1 = v9;
      if (!a2)
        return result;
      goto LABEL_6;
    }
  }
  result = 0;
  if (!a2)
    return result;
LABEL_6:
  *a2 = v7;
  return result;
}

uint64_t MFiPlatform_CopyCertificate(_QWORD *a1, _QWORD *a2)
{
  uint64_t v4;
  void *v5;
  void *v6;
  void *v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  dispatch_queue_t *v11;
  NSObject *v12;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  CFTypeRef v19;
  uint64_t v20;
  size_t v21;
  void *v22;
  void *v23;
  int64_t v24;
  unsigned int v25;
  CFTypeRef v26;
  CFTypeRef cf;

  if (IsAppleInternalBuild_sOnce != -1)
    dispatch_once(&IsAppleInternalBuild_sOnce, &__block_literal_global_85);
  if (!IsAppleInternalBuild_sIsInternal)
    return 4294960561;
  v25 = 0;
  v4 = _CopyKey(&v24, &v25);
  if (v4)
  {
    v5 = (void *)v4;
    if (a1)
    {
      v6 = malloc_type_malloc(0x3B1uLL, 0x1000040AA8296CDuLL);
      if (!v6)
      {
        v8 = -6728;
LABEL_10:
        v25 = v8;
        free(v5);
        return v25;
      }
      v7 = v6;
      memcpy(v6, &kPublicCertificate, 0x3B1uLL);
      *a1 = v7;
    }
    v8 = 0;
    if (a2)
      *a2 = 945;
    goto LABEL_10;
  }
  v26 = 0;
  cf = 0;
  v10 = HTTPClientCreate((uint64_t *)&cf);
  v11 = (dispatch_queue_t *)cf;
  if ((_DWORD)v10 || (v10 = HTTPClientSetDestination((uint64_t)cf, "spc.apple.com", 14000), (_DWORD)v10))
  {
    v9 = v10;
    v12 = 0;
  }
  else
  {
    HTTPClientSetTimeout((uint64_t)v11, 30);
    v12 = dispatch_queue_create("MFiProxy", 0);
    if (v12)
    {
      HTTPClientSetDispatchQueue((uint64_t)v11, v12);
      v14 = HTTPMessageCreate((uint64_t *)&v26);
      if ((_DWORD)v14)
      {
        v9 = v14;
      }
      else
      {
        v19 = v26;
        HTTPHeader_InitRequestF((uint64_t)v26 + 24, (uint64_t)"HTTP/1.1", (uint64_t)"GET", (uint64_t)"%s", v15, v16, v17, v18, (uint64_t)"/mfi-certificate");
        v20 = HTTPClientSendMessageSync(v11, (uint64_t)v19);
        if (!(_DWORD)v20 || (v9 = v20, (v20 - 200100) <= 0x1F3))
        {
          v21 = *((_QWORD *)v19 + 1066);
          if (v21)
          {
            v22 = malloc_type_malloc(v21, 0x4DCF8111uLL);
            if (v22)
            {
              v23 = v22;
              memcpy(v22, *((const void **)v19 + 1065), *((_QWORD *)v19 + 1066));
              v9 = 0;
              *a1 = v23;
              *a2 = *((_QWORD *)v19 + 1066);
            }
            else
            {
              v9 = 4294960568;
            }
          }
          else
          {
            v9 = 4294960553;
          }
        }
      }
    }
    else
    {
      v9 = 4294960596;
    }
  }
  if (v11)
  {
    CFRetain(v11);
    dispatch_async_f(v11[2], v11, (dispatch_function_t)_HTTPClientInvalidate);
    CFRelease(v11);
    cf = 0;
  }
  if (v26)
    CFRelease(v26);

  return v9;
}

uint64_t CUNextID32()
{
  unsigned int v0;
  unsigned int v1;
  uint64_t result;
  BOOL v3;

  if (CUNextID32_sOnce != -1)
    dispatch_once(&CUNextID32_sOnce, &__block_literal_global_11376);
  do
  {
    do
    {
      v0 = __ldaxr((unsigned int *)&CUNextID32_sNextID);
      v1 = __stlxr(v0 + 1, (unsigned int *)&CUNextID32_sNextID);
      result = v0 + 1;
      v3 = v0 == -1;
    }
    while (v1);
  }
  while (v3);
  return result;
}

unint64_t CUNextID64()
{
  unint64_t v0;
  unsigned int v1;
  unint64_t result;
  BOOL v3;

  if (CUNextID64_sOnce != -1)
    dispatch_once(&CUNextID64_sOnce, &__block_literal_global_4_11381);
  do
  {
    do
    {
      v0 = __ldaxr((unint64_t *)&CUNextID64_sNextID);
      v1 = __stlxr(v0 + 1, (unint64_t *)&CUNextID64_sNextID);
      result = v0 + 1;
      v3 = v0 == -1;
    }
    while (v1);
  }
  while (v3);
  return result;
}

unsigned __int16 *Swap16Mem(unsigned __int16 *result, unint64_t a2, _WORD *a3)
{
  unsigned __int16 *v3;
  unsigned int v4;

  if (a2 >= 2)
  {
    v3 = (unsigned __int16 *)((char *)result + (a2 & 0xFFFFFFFFFFFFFFFELL));
    do
    {
      v4 = *result++;
      *a3++ = bswap32(v4) >> 16;
    }
    while (result != v3);
  }
  return result;
}

unint64_t VarIntEncode64(unint64_t result, _BYTE *a2, _QWORD *a3)
{
  _BYTE *v3;
  unint64_t v4;
  unint64_t v5;

  if (result < 0x80)
  {
    LOBYTE(v4) = result;
    v3 = a2;
  }
  else
  {
    v3 = a2;
    do
    {
      *v3++ = result | 0x80;
      v4 = result >> 7;
      v5 = result >> 14;
      result >>= 7;
    }
    while (v5);
  }
  *v3 = v4;
  *a3 = v3 - a2 + 1;
  return result;
}

uint64_t VarIntDecode64(_BYTE *a1, uint64_t a2, _QWORD *a3, int *a4)
{
  unint64_t v5;
  uint64_t result;
  _BYTE *v7;
  char v9;
  unint64_t v10;
  BOOL v11;
  int v12;

  LOBYTE(v5) = 0;
  result = 0;
  v7 = a1 + 10;
  while (1)
  {
    if (a2-- < 1)
    {
      result = 0;
      v12 = -6750;
      goto LABEL_9;
    }
    v9 = *a1;
    v10 = (unint64_t)(*a1 & 0x7F) << v5;
    if (v10 >> v5 != (*a1 & 0x7F))
      break;
    ++a1;
    v11 = __CFADD__(v10, result);
    result += v10;
    if (v11)
    {
      result = 0;
      v12 = -6710;
      goto LABEL_9;
    }
    if ((v9 & 0x80000000) == 0)
    {
      v12 = 0;
LABEL_9:
      v7 = a1;
      if (!a3)
        goto LABEL_11;
LABEL_10:
      *a3 = v7;
      goto LABEL_11;
    }
    v5 = (v5 + 7);
    if (v5 > 0x3F)
    {
      result = 0;
      goto LABEL_16;
    }
  }
  result = 0;
  v7 = a1 + 1;
LABEL_16:
  v12 = -6710;
  if (a3)
    goto LABEL_10;
LABEL_11:
  if (a4)
    *a4 = v12;
  return result;
}

uint64_t CopyFileDataByFile(FILE *__stream, _QWORD *a2, unint64_t *a3)
{
  char *v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  char *v9;
  uint64_t v10;
  size_t v11;
  _BYTE *v12;
  uint64_t v13;

  v5 = 0;
  v6 = 0;
  v7 = 0;
  do
  {
    v8 = v7;
    if (v7 >= v6)
    {
      v10 = 160000;
      if (v6 >= 0x27100)
      {
        if (v6 >= 0x3D0900)
        {
          if (v6 > 0xFFFFFFFFFFC2F6FELL)
          {
            v13 = 4294960553;
            goto LABEL_16;
          }
          v10 = v6 + 4000000;
        }
        else
        {
          v10 = 2 * v6;
        }
      }
      v9 = (char *)malloc_type_realloc(v5, v10 + 1, 0x80904352uLL);
      v6 = v10;
      if (!v9)
      {
        v13 = 4294960568;
        goto LABEL_16;
      }
    }
    else
    {
      v9 = v5;
    }
    v11 = fread(&v9[v8], 1uLL, v6 - v8, __stream);
    v7 = v11 + v8;
    v5 = v9;
  }
  while (v11);
  v12 = malloc_type_realloc(v9, v8 + 1, 0x75B5152DuLL);
  if (v12)
  {
    v12[v8] = 0;
    *a2 = v12;
    v13 = 0;
    if (a3)
      *a3 = v8;
    return v13;
  }
  v13 = 4294960568;
  v5 = v9;
LABEL_16:
  if (v5)
    free(v5);
  return v13;
}

uint64_t CopyFileDataByPath(const char *a1, _QWORD *a2, unint64_t *a3)
{
  FILE *v5;
  FILE *v6;
  uint64_t v7;

  v5 = fopen(a1, "rb");
  v6 = v5;
  if (v5)
    goto LABEL_5;
  if (!*__error())
    return 4294960596;
  v7 = *__error();
  if (!(_DWORD)v7)
  {
    v5 = 0;
LABEL_5:
    v7 = CopyFileDataByFile(v5, a2, a3);
    fclose(v6);
  }
  return v7;
}

uint64_t CUSystem(char *a1)
{
  char ***v1;
  uint64_t result;
  pid_t v3;
  int v4;
  int v5;
  int v6;
  unsigned int v7;
  unsigned int v8;
  unsigned int v9;
  pid_t v10;
  char *__argv[5];

  __argv[4] = *(char **)MEMORY[0x1E0C80C00];
  v10 = 0;
  __argv[0] = "/bin/sh";
  __argv[1] = "-c";
  __argv[2] = a1;
  __argv[3] = 0;
  v1 = _NSGetEnviron();
  result = posix_spawn(&v10, "/bin/sh", 0, 0, __argv, *v1);
  if (!(_DWORD)result)
  {
    v9 = 0;
    while (1)
    {
      v3 = waitpid(v10, (int *)&v9, 0);
      if (v3 != -1)
        break;
      if (*__error() != 4)
        return *__error();
    }
    if (v3)
    {
      v4 = v9 & 0x7F;
      v5 = (int)v9 >> 8;
      if (v9 >> 8 == 19)
        v6 = 312719;
      else
        v6 = -6700;
      if (v5 == 19)
        v7 = v6;
      else
        v7 = v5 + 312700;
      v8 = BYTE1(v9);
      if ((v9 & 0x7F) != 0)
        v8 = v4 + 312700;
      if (v4 == 127)
        return v7;
      else
        return v8;
    }
    else
    {
      return 4294960560;
    }
  }
  return result;
}

uint64_t ReadANSIFile(FILE *__stream, char *__ptr, size_t __nitems, _QWORD *a4)
{
  char *v6;
  size_t v7;
  size_t v9;

  v6 = __ptr;
  if (__nitems)
  {
    v7 = __nitems;
    v6 = __ptr;
    do
    {
      v9 = fread(v6, 1uLL, v7, __stream);
      if (!v9)
        break;
      v6 += v9;
      v7 -= v9;
    }
    while (v7);
  }
  if (a4)
    *a4 = v6 - __ptr;
  return 0;
}

uint64_t WriteANSIFile(FILE *__stream, char *__ptr, size_t __nitems)
{
  size_t v3;
  size_t v6;

  if (__nitems)
  {
    v3 = __nitems;
    do
    {
      v6 = fwrite(__ptr, 1uLL, v3, __stream);
      if (!v6)
        break;
      __ptr += v6;
      v3 -= v6;
    }
    while (v3);
  }
  return 0;
}

__CFDictionary *CFDictionaryCreateWithTXTRecordBytes(const char *a1, uint64_t a2, int *a3)
{
  __CFDictionary *Mutable;
  unsigned __int8 *v7;
  const UInt8 *v8;
  unint64_t v9;
  const char *v10;
  CFStringRef v11;
  CFStringRef v12;
  const char *v13;
  int v14;

  Mutable = CFDictionaryCreateMutable(0, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  if (Mutable)
  {
    v7 = (unsigned __int8 *)&a1[a2];
    while (1)
    {
      if (v7 - (unsigned __int8 *)a1 < 1
        || (v8 = (const UInt8 *)(a1 + 1), v9 = *(unsigned __int8 *)a1, v7 - (unsigned __int8 *)(a1 + 1) < v9))
      {
        v14 = 0;
        goto LABEL_16;
      }
      a1 += v9 + 1;
      v10 = (const char *)v8;
      if ((_DWORD)v9)
      {
        while (*v10 != 61)
        {
          ++v10;
          if (!--v9)
          {
            v10 = a1;
            break;
          }
        }
      }
      v11 = CFStringCreateWithBytes(0, v8, v10 - (const char *)v8, 0x8000100u, 0);
      if (!v11)
        break;
      v12 = v11;
      if (v10 >= a1)
        v13 = v10;
      else
        v13 = v10 + 1;
      v14 = CFDictionarySetCString(Mutable, v11, v13, a1 - v13);
      CFRelease(v12);
      if (v14)
        goto LABEL_20;
    }
    v14 = -6728;
LABEL_20:
    CFRelease(Mutable);
    Mutable = 0;
  }
  else
  {
    v14 = -6728;
  }
LABEL_16:
  if (a3)
    *a3 = v14;
  return Mutable;
}

uint64_t TXTRecordGetNextItem(_BYTE *a1, uint64_t a2, _QWORD *a3, _QWORD *a4, _QWORD *a5, _QWORD *a6, unint64_t *a7)
{
  _BYTE *v7;
  unint64_t v8;
  unint64_t v10;
  _BYTE *v11;
  _BYTE *v12;

  if (a2 - (uint64_t)a1 < 1)
    return 0;
  v7 = a1 + 1;
  v8 = *a1;
  if (a2 - (uint64_t)(a1 + 1) < v8)
    return 0;
  v10 = (unint64_t)&a1[v8 + 1];
  v11 = a1 + 1;
  if (*a1)
  {
    while (*v11 != 61)
    {
      ++v11;
      if (!--v8)
      {
        v11 = (_BYTE *)v10;
        break;
      }
    }
  }
  *a3 = v7;
  if ((unint64_t)v11 >= v10)
    v12 = v11;
  else
    v12 = v11 + 1;
  *a4 = v11 - v7;
  *a6 = v10 - (_QWORD)v12;
  *a5 = v12;
  *a7 = v10;
  return 1;
}

uint64_t CreateTXTRecordWithCString(const char *a1, _QWORD *a2, size_t *a3)
{
  const char *v6;
  uint64_t v7;
  const char *v8;
  unsigned __int8 *v9;
  int64_t v10;
  uint64_t v11;
  int64_t v12;
  uint64_t v13;
  int v14;
  const char *v15;
  uint64_t v16;
  unsigned int v17;
  uint64_t v18;
  uint64_t v19;
  unsigned __int8 v20;
  unsigned __int8 v21;
  uint64_t v22;
  uint64_t v23;
  unsigned __int8 v24;
  unsigned __int8 v25;
  char v26;
  char v27;
  char v28;
  unsigned int v29;
  char v30;
  char v31;
  unsigned int v32;
  char v33;
  uint64_t v34;
  _BYTE *v35;
  size_t v36;
  void *v37;
  size_t v38;
  void *v39;
  uint64_t v40;
  void *__dst;
  _QWORD v43[3];
  void *v44;
  unint64_t v45;
  uint64_t v46;
  uint64_t v47;
  _BYTE __src[256];
  uint64_t v49;

  v49 = *MEMORY[0x1E0C80C00];
  v46 = 0;
  __dst = 0;
  v43[0] = 0;
  v44 = 0;
  v45 = 0;
  v43[1] = 0;
  v43[2] = -1;
  v47 = 0;
  v6 = &a1[strlen(a1)];
  v7 = MEMORY[0x1E0C80978];
  v8 = a1;
LABEL_2:
  v9 = (unsigned __int8 *)v6;
  if (!a1)
    v9 = (unsigned __int8 *)&v8[strlen(v8)];
  v10 = v9 - (unsigned __int8 *)v8;
  if (v9 > (unsigned __int8 *)v8)
  {
    do
    {
      v11 = *(unsigned __int8 *)v8;
      if (*v8 < 0)
      {
        if (!__maskrune(v11, 0x4000uLL))
        {
LABEL_11:
          v12 = 0;
          v13 = 0;
          v14 = 0;
          v15 = v8;
          while (2)
          {
            while (2)
            {
              v8 = v15;
              v16 = v13;
              while (1)
              {
                if (v8 >= (const char *)v9)
                  goto LABEL_95;
                v13 = v16;
                v15 = v8 + 1;
                v17 = *(unsigned __int8 *)v8;
                if (!(_DWORD)v16)
                  break;
                v16 = 0;
                ++v8;
                if (v17 != 39)
                  goto LABEL_64;
              }
              if (!v14)
              {
                if ((v17 & 0xFFFFFFDF) == 0)
                {
                  ++v8;
LABEL_95:
                  v34 = DataBuffer_Resize((uint64_t)v43, v45 + v12 + 1, (unint64_t *)&__dst);
                  if (!(_DWORD)v34)
                  {
                    v35 = __dst;
                    __dst = (char *)__dst + 1;
                    *v35 = v12;
                    memcpy(__dst, __src, v12);
                    goto LABEL_2;
                  }
                  v40 = v34;
                  if ((_BYTE)v47 && v44)
                    free(v44);
                  return v40;
                }
                if (v17 == 34)
                {
                  v13 = 0;
LABEL_29:
                  v14 = 1;
                  continue;
                }
                v14 = 0;
                v13 = 1;
                if (v17 == 39)
                  continue;
                if (v17 != 92)
                {
                  v13 = 0;
                  goto LABEL_64;
                }
                if (v15 < (const char *)v9)
                {
                  v17 = *(unsigned __int8 *)v15;
                  if (v17 == 10)
                  {
                    v13 = 0;
                    v14 = 0;
                    v15 = v8 + 2;
                    continue;
                  }
                  if ((v17 & 0xFFFFFFDF) == 0x58)
                  {
                    v15 = v8 + 2;
                    if (v9 - (unsigned __int8 *)(v8 + 2) < 2
                      || (v18 = *(unsigned __int8 *)v15, (*(_DWORD *)(v7 + 4 * v18 + 60) & 0x10000) == 0)
                      || (v19 = *((unsigned __int8 *)v8 + 3), (*(_DWORD *)(v7 + 4 * v19 + 60) & 0x10000) == 0))
                    {
                      v13 = 0;
                      v14 = 0;
                      goto LABEL_64;
                    }
                    v26 = v18 - 48;
                    if ((v18 - 48) >= 0xA)
                    {
                      if ((v18 - 65) > 5)
                      {
                        if ((v18 - 97) >= 6)
                          v26 = 0;
                        else
                          v26 = v18 - 87;
                      }
                      else
                      {
                        v26 = v18 - 55;
                      }
                    }
                    v28 = v19 - 48;
                    if ((v19 - 48) >= 0xA)
                    {
                      if ((v19 - 65) > 5)
                      {
                        v29 = v19 - 97;
                        v30 = v19 - 87;
                        if (v29 >= 6)
                          v28 = 0;
                        else
                          v28 = v30;
                      }
                      else
                      {
                        v28 = v19 - 55;
                      }
                    }
                    v13 = 0;
                    v14 = 0;
                    LOBYTE(v17) = v28 | (16 * v26);
LABEL_82:
                    v15 = v8 + 4;
                  }
                  else
                  {
                    if ((v17 & 0xF8) == 0x30 && v9 - (unsigned __int8 *)v15 >= 3 && v17 <= 0x33)
                    {
                      v20 = v8[2];
                      if ((v20 & 0xF8) == 0x30)
                      {
                        v21 = v8[3];
                        if ((v21 & 0xF8) == 0x30)
                        {
                          v13 = 0;
                          v14 = 0;
                          LOBYTE(v17) = (8 * v20) ^ 0x80 | ((_BYTE)v17 << 6) | (v21 - 48);
                          goto LABEL_82;
                        }
                      }
                    }
                    v13 = 0;
                    v14 = 0;
                    v15 = v8 + 2;
                  }
LABEL_64:
                  if (v12 <= 255)
                    __src[v12++] = v17;
                  continue;
                }
                v13 = 0;
                v14 = 0;
LABEL_37:
                LOBYTE(v17) = 92;
                goto LABEL_64;
              }
              break;
            }
            if (v17 != 92)
            {
              v13 = 0;
              v14 = 0;
              if (v17 == 34)
                continue;
              goto LABEL_63;
            }
            break;
          }
          if (v15 < (const char *)v9)
          {
            v17 = *(unsigned __int8 *)v15;
            if (v17 == 10)
            {
              v13 = 0;
              v15 = v8 + 2;
              goto LABEL_29;
            }
            if (v17 == 92 || v17 == 34)
            {
              v13 = 0;
              v15 = v8 + 2;
LABEL_63:
              v14 = 1;
              goto LABEL_64;
            }
            if ((v17 & 0xFFFFFFDF) == 0x58)
            {
              v15 = v8 + 2;
              if (v9 - (unsigned __int8 *)(v8 + 2) < 2
                || (v22 = *(unsigned __int8 *)v15, (*(_DWORD *)(v7 + 4 * v22 + 60) & 0x10000) == 0)
                || (v23 = *((unsigned __int8 *)v8 + 3), (*(_DWORD *)(v7 + 4 * v23 + 60) & 0x10000) == 0))
              {
                v13 = 0;
                goto LABEL_63;
              }
              v27 = v22 - 48;
              if ((v22 - 48) >= 0xA)
              {
                if ((v22 - 65) > 5)
                {
                  if ((v22 - 97) >= 6)
                    v27 = 0;
                  else
                    v27 = v22 - 87;
                }
                else
                {
                  v27 = v22 - 55;
                }
              }
              v31 = v23 - 48;
              if ((v23 - 48) >= 0xA)
              {
                if ((v23 - 65) > 5)
                {
                  v32 = v23 - 97;
                  v33 = v23 - 87;
                  if (v32 >= 6)
                    v31 = 0;
                  else
                    v31 = v33;
                }
                else
                {
                  v31 = v23 - 55;
                }
              }
              v13 = 0;
              LOBYTE(v17) = v31 | (16 * v27);
LABEL_93:
              v15 = v8 + 4;
              goto LABEL_63;
            }
            v13 = 0;
            v14 = 1;
            if (v17 > 0x33 || (v17 & 0xF8) != 0x30 || v9 - (unsigned __int8 *)v15 < 3)
              goto LABEL_37;
            v24 = v8[2];
            if ((v24 & 0xF8) == 0x30)
            {
              v25 = v8[3];
              if ((v25 & 0xF8) == 0x30)
              {
                v13 = 0;
                LOBYTE(v17) = (8 * v24) ^ 0x80 | ((_BYTE)v17 << 6) | (v25 - 48);
                goto LABEL_93;
              }
            }
          }
          v13 = 0;
          LOBYTE(v17) = 92;
          goto LABEL_63;
        }
      }
      else if ((*(_DWORD *)(v7 + 4 * v11 + 60) & 0x4000) == 0)
      {
        goto LABEL_11;
      }
      ++v8;
      --v10;
    }
    while (v10);
  }
  v36 = v45;
  if ((_BYTE)v47)
  {
    v37 = v44;
  }
  else
  {
    if (v45 <= 1)
      v38 = 1;
    else
      v38 = v45;
    v39 = malloc_type_malloc(v38, 0xDEADC368uLL);
    if (!v39)
      return 4294960568;
    v37 = v39;
    if (v36)
      memcpy(v39, v44, v36);
  }
  v40 = 0;
  v44 = (void *)v43[0];
  *a2 = v37;
  *a3 = v36;
  return v40;
}

void *TXTRecordCreateWithDictionary(const __CFDictionary *a1, size_t *a2, _DWORD *a3)
{
  size_t v6;
  size_t v7;
  void *v8;
  const void *BytesPtr;
  size_t v10;
  uint64_t v12;
  TXTRecordRef txtRecord;
  uint64_t v14;
  uint64_t v15;

  v15 = *MEMORY[0x1E0C80C00];
  txtRecord = 0uLL;
  v14 = 0;
  TXTRecordCreate(&txtRecord, 0x100u, &v12);
  LODWORD(v14) = 0;
  CFDictionaryApplyFunction(a1, (CFDictionaryApplierFunction)_TXTRecordCreateWithDictionaryApplier, &txtRecord);
  LODWORD(v6) = TXTRecordGetLength(&txtRecord);
  v7 = v6;
  if ((_DWORD)v6)
    v6 = v6;
  else
    v6 = 1;
  v8 = malloc_type_malloc(v6, 0xF4DD382uLL);
  if (v8)
  {
    if ((_DWORD)v7)
    {
      BytesPtr = TXTRecordGetBytesPtr(&txtRecord);
      memcpy(v8, BytesPtr, v7);
    }
  }
  else
  {
    LODWORD(v14) = -6728;
  }
  TXTRecordDeallocate(&txtRecord);
  if (a2)
  {
    if ((_DWORD)v14)
      v10 = 0;
    else
      v10 = v7;
    *a2 = v10;
  }
  if (a3)
    *a3 = v14;
  return v8;
}

void _TXTRecordCreateWithDictionaryApplier(const __CFString *a1, const __CFString *a2, uint64_t a3)
{
  CFTypeID v6;
  int v7;
  const char *v8;
  CFTypeID v9;
  const char *v10;
  uint8_t v11;
  TXTRecordRef *v12;
  const char *v13;
  int v14;
  size_t v15;
  void *v16;
  const char *v17;
  void *v18;
  const char *v19;

  v18 = 0;
  v16 = 0;
  if (*(_DWORD *)(a3 + 16))
    return;
  v19 = 0;
  v17 = 0;
  v15 = 0;
  v6 = CFGetTypeID(a1);
  if (v6 != CFStringGetTypeID())
    goto LABEL_20;
  v7 = CFStringGetOrCopyCStringUTF8(a1, &v19, (UInt8 **)&v18, 0);
  v8 = v19;
  if (!v19)
    goto LABEL_12;
  v9 = CFGetTypeID(a2);
  if (v9 != CFStringGetTypeID())
  {
    if ((const __CFString *)*MEMORY[0x1E0C9AE50] == a2 || v9 == CFNullGetTypeID())
    {
      v12 = (TXTRecordRef *)a3;
      v13 = v8;
      v11 = 0;
      v10 = 0;
LABEL_11:
      v7 = TXTRecordSetValue(v12, v13, v11, v10);
      goto LABEL_12;
    }
LABEL_20:
    v14 = -6756;
    goto LABEL_13;
  }
  v7 = CFStringGetOrCopyCStringUTF8(a2, &v17, (UInt8 **)&v16, &v15);
  v10 = v17;
  if (v17)
  {
    if (v15 > 0xFF)
    {
      v14 = -6743;
      goto LABEL_13;
    }
    v11 = v15;
    v12 = (TXTRecordRef *)a3;
    v13 = v8;
    goto LABEL_11;
  }
LABEL_12:
  v14 = v7;
LABEL_13:
  if (v18)
    free(v18);
  if (v16)
    free(v16);
  if (v14)
    *(_DWORD *)(a3 + 16) = v14;
}

uint64_t fcopyline(FILE *a1, unint64_t *a2, _QWORD *a3)
{
  void *v6;
  unint64_t v7;
  _BYTE *v8;
  uint64_t i;
  _BYTE *v10;
  void *v11;
  uint64_t v12;

  if (feof(a1))
    return 4294960544;
  v6 = malloc_type_malloc(0x80uLL, 0x70EE8C9AuLL);
  if (!v6)
    return 4294960568;
  v7 = (unint64_t)v6;
  v8 = 0;
  for (i = 128; ; i *= 2)
  {
    memset(&v8[v7], 10, i - (_QWORD)v8);
    if (!fgets(&v8[v7], (int)i - (int)v8, a1))
    {
      if (!feof(a1))
      {
        if (*__error())
          v12 = *__error();
        else
          v12 = 4294960596;
        goto LABEL_20;
      }
      if (!v8)
      {
        v12 = 4294960544;
LABEL_20:
        free((void *)v7);
        return v12;
      }
      goto LABEL_15;
    }
    v10 = memchr(&v8[v7], 10, i - (_QWORD)v8);
    if (v10)
      break;
    if (i < 0)
    {
      v12 = 4294960553;
      goto LABEL_20;
    }
    v11 = malloc_type_realloc((void *)v7, 2 * i, 0xA45B605CuLL);
    if (!v11)
    {
      v12 = 4294960568;
      goto LABEL_20;
    }
    v8 = (_BYTE *)(i - 1);
    v7 = (unint64_t)v11;
  }
  if ((unint64_t)(v10 + 1) >= v7 + i || v10[1])
  {
    v8 = &v10[~v7];
LABEL_15:
    if (!a2)
      goto LABEL_17;
LABEL_16:
    *a2 = v7;
    v7 = 0;
    goto LABEL_17;
  }
  v8 = &v10[-v7];
  *v10 = 0;
  if (a2)
    goto LABEL_16;
LABEL_17:
  if (a3)
    *a3 = v8;
  v12 = 0;
  if (v7)
    goto LABEL_20;
  return v12;
}

uint64_t FDWriteAll(int __fd, char *__buf, size_t __nbyte)
{
  size_t v3;
  ssize_t v6;
  uint64_t result;

  if (!__nbyte)
    return 0;
  v3 = __nbyte;
  while (1)
  {
    v6 = write(__fd, __buf, v3);
    if (v6 <= 0)
      break;
LABEL_6:
    __buf += v6;
    v3 -= v6;
    if (!v3)
      return 0;
  }
  if (*__error())
  {
    result = *__error();
    if ((_DWORD)result)
      return result;
    goto LABEL_6;
  }
  return 4294960596;
}

uint64_t IOKitCopyParentOfClass(io_registry_entry_t entry, const char *a2, kern_return_t *a3)
{
  uint64_t v6;
  kern_return_t ParentEntry;
  io_registry_entry_t parent;

  parent = 0;
  LODWORD(v6) = entry;
  while (1)
  {
    ParentEntry = IORegistryEntryGetParentEntry(v6, "IOService", &parent);
    if ((_DWORD)v6 != entry)
      IOObjectRelease(v6);
    if (ParentEntry)
      break;
    v6 = parent;
    if (IOObjectConformsTo(parent, a2))
    {
      ParentEntry = 0;
      if (!a3)
        return v6;
      goto LABEL_9;
    }
  }
  v6 = 0;
  if (!a3)
    return v6;
LABEL_9:
  *a3 = ParentEntry;
  return v6;
}

uint64_t mkparent(const char *a1, unsigned int a2)
{
  const char *v4;
  int v5;
  int64_t v6;
  uint64_t result;
  char __dst[1024];
  uint64_t v9;

  v9 = *MEMORY[0x1E0C80C00];
  v4 = &a1[strlen(a1)];
  do
  {
    if (v4 <= a1)
    {
      v6 = 0;
      goto LABEL_8;
    }
    v5 = *(unsigned __int8 *)--v4;
  }
  while (v5 != 47);
  v6 = v4 - a1;
  if ((unint64_t)(v4 - a1) > 0x3FF)
    return 4294960553;
  if (v6)
    memcpy(__dst, a1, v4 - a1);
LABEL_8:
  result = 0;
  __dst[v6] = 0;
  if (__dst[0])
    return mkpath(__dst, a2, a2);
  return result;
}

uint64_t mkpath(const char *a1, unsigned int a2, __int16 a3)
{
  size_t v5;
  uint64_t v6;
  char *v7;
  const char *v8;
  int v9;
  mode_t v10;
  unsigned int v11;
  int v12;
  unsigned int v14;
  stat v15;
  char v16[1024];
  uint64_t v17;

  v17 = *MEMORY[0x1E0C80C00];
  memset(&v15, 0, sizeof(v15));
  v5 = strlen(a1);
  if (v5 >= 0x3FF)
    v6 = 1023;
  else
    v6 = v5;
  v7 = v16;
  __memcpy_chk();
  v16[v6] = 0;
  while (1)
  {
    v8 = &v7[strspn(v7, "/")];
    v7 = (char *)&v8[strcspn(v8, "/")];
    v9 = *v7;
    *v7 = 0;
    v10 = v9 ? a3 : a2;
    if ((mkdir(v16, v10) & 0x80000000) == 0 || *__error() == 17)
      break;
    v11 = *__error();
    if (stat(v16, &v15) < 0)
    {
      if (v11)
        return v11;
      else
        return 0xFFFFFFFFLL;
    }
    v12 = v15.st_mode & 0xF000;
    if (!v9 || v12 != 0x4000)
    {
      if (v12 == 0x4000)
        return 0;
      else
        return 20;
    }
LABEL_13:
    *v7 = 47;
  }
  if (a2 < 0x200 || v9)
  {
    if (!v9)
      return 0;
    goto LABEL_13;
  }
  if (chmod(v16, a2) != -1)
    return 0;
  v14 = *__error();
  if (v14)
    return v14;
  else
    return 0xFFFFFFFFLL;
}

const char *NormalizePath(char *__s, int64_t a2, char *a3, size_t a4, char a5)
{
  char *v8;
  unint64_t v9;
  char *v10;
  uint64_t v11;
  int64_t v12;
  int v13;
  char *v14;
  char *v15;
  char *v16;
  char *pw_dir;
  size_t v18;
  uint64_t v19;
  uint64_t v20;
  size_t v21;
  int v22;
  unint64_t v23;
  unint64_t v24;
  char *v25;
  char *v26;
  unint64_t v27;
  char *v29;
  passwd *v31;
  passwd v32;
  char v33[1024];
  char v34[1024];
  uint64_t v35;

  v8 = __s;
  v35 = *MEMORY[0x1E0C80C00];
  if (a2 == -1)
    a2 = strlen(__s);
  v9 = 0;
  v10 = &v8[a2];
  memset(&v32, 0, sizeof(v32));
  v31 = 0;
  if ((a5 & 1) != 0 || a2 < 1)
  {
    v15 = 0;
    goto LABEL_35;
  }
  if (*v8 != 126)
    goto LABEL_15;
  v11 = 1;
  while (a2 != v11)
  {
    v12 = v11;
    v13 = v8[v11++];
    if (v13 == 47)
    {
      v14 = &v8[v12];
      a2 = v12;
      goto LABEL_12;
    }
  }
  v14 = &v8[a2];
LABEL_12:
  if (a2 == 1)
  {
    v16 = getenv("HOME");
    if (v16)
    {
      pw_dir = v16;
      v18 = strlen(v16);
      v15 = 0;
      goto LABEL_27;
    }
LABEL_15:
    v9 = 0;
    v15 = 0;
    goto LABEL_35;
  }
  if ((unint64_t)(a2 - 1) >= 0x3FF)
    v19 = 1023;
  else
    v19 = a2 - 1;
  __memcpy_chk();
  v33[v19] = 0;
  v20 = sysconf(71);
  if (v20 >= 1)
    v21 = v20;
  else
    v21 = 4096;
  v15 = (char *)malloc_type_calloc(1uLL, v21, 0x6BEE4151uLL);
  if (!v15)
    goto LABEL_32;
  v22 = getpwnam_r(v33, &v32, v15, v21, &v31);
  v9 = 0;
  if (v22 || !v31)
    goto LABEL_35;
  pw_dir = v31->pw_dir;
  if (!pw_dir)
  {
LABEL_32:
    v9 = 0;
    goto LABEL_35;
  }
  v18 = strlen(v31->pw_dir);
LABEL_27:
  if (pw_dir >= &pw_dir[v18])
  {
    v9 = 0;
  }
  else
  {
    v9 = 0;
    do
    {
      v23 = v9;
      v24 = (unint64_t)&pw_dir[v9 + 1];
      v34[v9] = pw_dir[v9];
      ++v9;
    }
    while (v23 <= 0x3FD && v24 < (unint64_t)&pw_dir[v18]);
  }
  v8 = v14;
LABEL_35:
  v25 = &v34[v9];
  if (v9 <= 0x3FE && v8 < v10)
  {
    v26 = v8 + 1;
    do
    {
      v27 = v9 + 1;
      v34[v9] = *(v26 - 1);
      if (v9 > 0x3FD)
        break;
      ++v9;
    }
    while (v26++ < v10);
    v25 = &v34[v27];
  }
  *v25 = 0;
  if ((a5 & 2) != 0)
  {
    v29 = v34;
  }
  else
  {
    v29 = v34;
    if (a4 < 0x400)
    {
      if (realpath_DARWIN_EXTSN(v34, v33))
        v29 = v33;
    }
    else if (realpath_DARWIN_EXTSN(v34, a3))
    {
      if (!v15)
        goto LABEL_47;
      goto LABEL_46;
    }
  }
  strlcpy(a3, v29, a4);
  if (v15)
LABEL_46:
    free(v15);
LABEL_47:
  if (a4)
    return a3;
  else
    return "";
}

uint64_t RemovePath(const std::__fs::filesystem::path *a1)
{
  uint64_t result;
  std::error_code *v3;

  result = nftw((const char *)a1, (int (__cdecl *)(const char *, const stat *, int, FTW *))_RemovePathCallBack, 64, 15);
  if ((_DWORD)result)
  {
    if (!*__error())
      return 4294960596;
    result = *__error();
    if ((_DWORD)result == 20)
    {
      result = remove(a1, v3);
      if ((_DWORD)result)
      {
        if (*__error())
          return *__error();
        return 4294960596;
      }
    }
  }
  return result;
}

uint64_t _RemovePathCallBack(const std::__fs::filesystem::path *a1, std::error_code *a2)
{
  uint64_t result;

  result = remove(a1, a2);
  if ((_DWORD)result)
  {
    if (*__error())
      return *__error();
    else
      return 4294960596;
  }
  return result;
}

uint64_t RollLogFiles(FILE **a1, char *a2, const std::__fs::filesystem::path *a3, int a4)
{
  FILE *v7;
  std::error_code *v8;
  int v9;
  std::error_code *v10;
  BOOL v11;
  std::error_code *v12;
  FILE *v13;
  uint64_t result;
  std::__fs::filesystem::path __to;
  std::__fs::filesystem::path __str[42];
  uint64_t v17;

  v17 = *MEMORY[0x1E0C80C00];
  if (a1)
  {
    v7 = *a1;
    if (*a1)
    {
      if (a2)
      {
        fputs(a2, *a1);
        v7 = *a1;
      }
      fclose(v7);
      *a1 = 0;
    }
  }
  snprintf((char *)__str, 0x401uLL, "%s.%d", (const char *)a3, a4 - 1);
  remove(__str, v8);
  v9 = a4 - 2;
  if (a4 > 2)
  {
    do
    {
      snprintf((char *)__str, 0x401uLL, "%s.%d", (const char *)a3, v9);
      snprintf((char *)&__to, 0x401uLL, "%s.%d", (const char *)a3, v9 + 1);
      rename(__str, &__to, v10);
      v11 = v9-- != 0;
    }
    while (v9 != 0 && v11);
  }
  if (a4 >= 2)
  {
    snprintf((char *)&__to, 0x401uLL, "%s.%d", (const char *)a3, 1);
    rename(a3, &__to, v12);
  }
  if (!a1)
    return 0;
  v13 = fopen((const char *)a3, "w");
  *a1 = v13;
  if (v13)
    return 0;
  if (!*__error())
    return 4294960596;
  result = *__error();
  if (!(_DWORD)result)
    return 0;
  return result;
}

uint64_t RunProcessAndCaptureOutput(char *a1, void **a2)
{
  return RunProcessAndCaptureOutputEx(a1, a2, 0);
}

uint64_t RunProcessAndCaptureOutputEx(char *a1, void **a2, _QWORD *a3)
{
  uint64_t appended;
  uint64_t v6;
  __int128 v8;
  void *v9[2];
  __int128 v10;
  uint64_t v11;
  _BYTE *v12;

  v8 = 0u;
  v9[0] = (void *)-1;
  v9[1] = 0;
  v10 = 0uLL;
  v11 = 0;
  appended = DataBuffer_RunProcessAndAppendOutput((uint64_t)&v8, a1);
  if ((_DWORD)appended
    || (v12 = 0, appended = DataBuffer_Resize((uint64_t)&v8, v10 + 1, (unint64_t *)&v12), (_DWORD)appended))
  {
    v6 = appended;
  }
  else
  {
    *v12 = 0;
    *a2 = v9[1];
    if (a3)
      *a3 = v10;
    v6 = 0;
    v9[1] = 0;
  }
  if ((_BYTE)v11 && v9[1])
    free(v9[1]);
  return v6;
}

uint64_t SwitchToMobileUser()
{
  passwd *v0;
  passwd *v1;
  uid_t v2;
  uint64_t result;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t (*v11)(unsigned __int8 *, int64_t, _QWORD);
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  v0 = getpwnam("mobile");
  if (!v0)
  {
    v11 = (uint64_t (*)(unsigned __int8 *, int64_t, _QWORD))*MEMORY[0x1E0C80C10];
    v18 = *__error();
    return FPrintF(v11, "error: lookup mobile user failed: %#m\n", v12, v13, v14, v15, v16, v17, v18);
  }
  v1 = v0;
  v2 = getuid();
  result = v1->pw_uid;
  if (v2 != (_DWORD)result)
  {
    result = setuid(result);
    if ((_DWORD)result)
    {
      if (*__error())
      {
        result = (uint64_t)__error();
        v10 = *(unsigned int *)result;
        if (!(_DWORD)v10)
          return result;
      }
      else
      {
        v10 = 4294960596;
      }
      return FPrintF((uint64_t (*)(unsigned __int8 *, int64_t, _QWORD))*MEMORY[0x1E0C80C10], "error: setuid failed: %#m\n", v4, v5, v6, v7, v8, v9, v10);
    }
  }
  return result;
}

void *sysctl_copy(int *a1, size_t *a2, int *a3)
{
  int v6;
  int v7;
  size_t v8;
  void *v9;
  size_t v11;

  v6 = 10;
  while (1)
  {
    v11 = 0;
    if (sysctl(a1, 6u, 0, &v11, 0, 0))
    {
      if (!*__error())
        goto LABEL_14;
      v7 = *__error();
      if (v7)
      {
        v9 = 0;
        goto LABEL_17;
      }
    }
    if (v11 <= 1)
      v8 = 1;
    else
      v8 = v11;
    v9 = malloc_type_malloc(v8, 0xE46C97E8uLL);
    if (!v9)
    {
      v7 = -6728;
      goto LABEL_17;
    }
    if (!v11 || !sysctl(a1, 6u, v9, &v11, 0, 0) || *__error() && !*__error())
      break;
    free(v9);
    if (!--v6)
    {
LABEL_14:
      v9 = 0;
      v7 = -6700;
      goto LABEL_17;
    }
  }
  v7 = 0;
  if (a2)
    *a2 = v11;
LABEL_17:
  if (a3)
    *a3 = v7;
  return v9;
}

uint64_t systemf(const char *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  void *v10;
  char ***v11;
  uint64_t v12;
  pid_t v13;
  int v14;
  pid_t v15;
  int v16;
  unsigned int v17;
  unsigned int v18;
  pid_t v20[2];
  void *v21[2];
  char *__argv[2];
  __int128 v23;
  uint64_t v24;

  v24 = *MEMORY[0x1E0C80C00];
  v21[0] = 0;
  *(_OWORD *)__argv = xmmword_1E25DECF8;
  v23 = unk_1E25DED08;
  *(_QWORD *)v20 = 0;
  v21[1] = &a9;
  VASPrintF(v21, a2, (uint64_t)&a9);
  v10 = v21[0];
  if (!v21[0])
    return 4294960596;
  if (a1)
    fprintf((FILE *)*MEMORY[0x1E0C80C10], "%s%s\n", a1, (const char *)v21[0]);
  *(_QWORD *)&v23 = v10;
  v11 = _NSGetEnviron();
  v12 = posix_spawn(&v20[1], "/bin/sh", 0, 0, __argv, *v11);
  free(v10);
  if (!(_DWORD)v12)
  {
    do
    {
      v13 = waitpid(v20[1], v20, 0);
      if (v13 != -1)
      {
        if (!v13)
          return 4294960560;
        v14 = v20[0] & 0x7F;
        v15 = v20[0] >> 8;
        if (v20[0] >> 8 == 19)
          v16 = 312719;
        else
          v16 = -6700;
        if (v15 == 19)
          v17 = v16;
        else
          v17 = v15 + 312700;
        v18 = BYTE1(v20[0]);
        if ((v20[0] & 0x7F) != 0)
          v18 = v14 + 312700;
        if (v14 == 127)
          return v17;
        else
          return v18;
      }
    }
    while (*__error() == 4);
    if (!*__error())
      return 4294960596;
    return *__error();
  }
  return v12;
}

__CFDictionary *CopyEDIDbyUUID(const void *a1, kern_return_t *a2)
{
  __CFDictionary *CFProperty;
  __CFDictionary *Mutable;
  __CFDictionary *v6;
  kern_return_t MatchingServices;
  io_object_t v8;
  io_object_t v9;
  CFTypeID v10;
  io_iterator_t existing;

  CFProperty = IOServiceMatching("IOAVService");
  if (CFProperty)
  {
    Mutable = CFDictionaryCreateMutable(0, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
    if (Mutable)
    {
      v6 = Mutable;
      existing = 0;
      CFDictionarySetValue(Mutable, CFSTR("EDID UUID"), a1);
      CFDictionarySetValue(CFProperty, CFSTR("IOPropertyMatch"), v6);
      CFRelease(v6);
      MatchingServices = IOServiceGetMatchingServices(*MEMORY[0x1E0CBBAA8], CFProperty, &existing);
      if (MatchingServices)
      {
        CFProperty = 0;
      }
      else
      {
        while (1)
        {
          v8 = IOIteratorNext(existing);
          if (!v8)
            break;
          v9 = v8;
          CFProperty = (__CFDictionary *)IORegistryEntryCreateCFProperty(v8, CFSTR("EDID"), 0, 0);
          IOObjectRelease(v9);
          if (!CFProperty)
            goto LABEL_10;
          v10 = CFGetTypeID(CFProperty);
          if (v10 == CFDataGetTypeID())
            goto LABEL_10;
          CFRelease(CFProperty);
        }
        CFProperty = 0;
LABEL_10:
        IOObjectRelease(existing);
        if (CFProperty)
          MatchingServices = 0;
        else
          MatchingServices = -6727;
      }
    }
    else
    {
      CFRelease(CFProperty);
      CFProperty = 0;
      MatchingServices = -6728;
    }
  }
  else
  {
    MatchingServices = -6700;
  }
  if (a2)
    *a2 = MatchingServices;
  return CFProperty;
}

uint64_t H264ConvertAVCCtoAnnexBHeader(_BYTE *a1, uint64_t a2, char *a3, uint64_t a4, _QWORD *a5, _QWORD *a6, char **a7)
{
  _BYTE *v10;
  char *v11;
  char *v12;
  char *v13;
  int v14;
  char *v15;
  unsigned int v16;
  int64_t v17;
  int64_t v18;
  int v19;
  int v20;
  char *v21;
  unsigned int v22;
  int64_t v23;
  int64_t v24;
  uint64_t result;
  char v26;

  if (a2 < 6)
    return 4294960553;
  v10 = &a1[a2];
  v11 = &a3[a4];
  v26 = a1[4];
  v12 = a1 + 6;
  v13 = a3;
  v14 = a1[5] & 0x1F;
  if ((a1[5] & 0x1F) != 0)
  {
    while (v10 - v12 >= 2)
    {
      v16 = *(unsigned __int16 *)v12;
      v15 = v12 + 2;
      v17 = __rev16(v16);
      if (v10 - v15 < v17)
        break;
      if (a3)
      {
        v18 = v17 + 4;
        if (v11 - v13 < v17 + 4)
          return 4294960545;
        *(_DWORD *)v13 = 0x1000000;
        memcpy(v13 + 4, v15, v17);
      }
      else
      {
        v18 = v17 + 4;
      }
      v12 = &v15[v17];
      v13 += v18;
      if (!--v14)
        goto LABEL_10;
    }
    return 4294960546;
  }
LABEL_10:
  if (v10 - v12 >= 1)
  {
    v20 = *v12++;
    v19 = v20;
    if (v20)
    {
      while (v10 - v12 >= 2)
      {
        v22 = *(unsigned __int16 *)v12;
        v21 = v12 + 2;
        v23 = __rev16(v22);
        if (v10 - v21 < v23)
          break;
        if (a3)
        {
          v24 = v23 + 4;
          if (v11 - v13 < v23 + 4)
            return 4294960545;
          *(_DWORD *)v13 = 0x1000000;
          memcpy(v13 + 4, v21, v23);
        }
        else
        {
          v24 = v23 + 4;
        }
        v12 = &v21[v23];
        v13 += v24;
        if (!--v19)
          goto LABEL_19;
      }
      return 4294960546;
    }
  }
LABEL_19:
  if (a5)
    *a5 = v13 - a3;
  if (a6)
    *a6 = (v26 & 3) + 1;
  result = 0;
  if (a7)
    *a7 = v12;
  return result;
}

BOOL H264EscapeEmulationPrevention(_BYTE *a1, _BYTE *a2, _QWORD *a3, _QWORD *a4, const char **a5, uint64_t *a6, _QWORD *a7)
{
  unint64_t v7;
  _BYTE *v8;
  unsigned int v9;
  const char *v10;
  uint64_t v11;
  _BOOL8 result;
  const char *v13;
  const char *v14;
  _BYTE *v15;

  if (a2 - a1 < 3)
  {
LABEL_9:
    *a3 = a1;
    *a4 = a2 - a1;
    if (a1 == a2 || *(a2 - 1))
    {
      v10 = 0;
      v11 = 0;
    }
    else
    {
      v10 = "\x03";
      v11 = 1;
    }
    *a5 = v10;
    result = a1 != a2;
    *a6 = v11;
    *a7 = a2;
    return result;
  }
  v7 = a2 - a1;
  v8 = a1;
  while (1)
  {
    if (*v8 || v8[1])
      goto LABEL_8;
    v9 = v8[2];
    if (v9 <= 2)
      break;
    if (v7 >= 4 && v9 == 3)
    {
      *a3 = a1;
      v15 = v8 + 3;
      *a4 = v15 - a1;
      *a5 = "\x03";
      result = 1;
      *a6 = 1;
      *a7 = v15;
      return result;
    }
LABEL_8:
    ++v8;
    if ((uint64_t)--v7 <= 2)
      goto LABEL_9;
  }
  *a3 = a1;
  *a4 = v8 + 2 - a1;
  v13 = "\x03\x02";
  if (v8[2] == 1)
    v13 = "\x03\x01";
  if (v8[2])
    v14 = v13;
  else
    v14 = (const char *)&unk_18D51F130;
  *a5 = v14;
  *a6 = 2;
  *a7 = v8 + 3;
  return 1;
}

uint64_t H264GetNextNALUnit(unsigned int *a1, unsigned int *a2, unint64_t a3, unsigned int **a4, unint64_t *a5, _QWORD *a6)
{
  unsigned int *v6;
  unint64_t v7;
  unsigned int v8;
  unsigned int v9;
  unsigned int v10;
  uint64_t v11;

  if (a1 == a2)
    return 4294960544;
  if ((char *)a2 - (char *)a1 < a3)
    return 4294960546;
  switch(a3)
  {
    case 4uLL:
      v9 = *a1;
      v6 = a1 + 1;
      v7 = bswap32(v9);
      break;
    case 2uLL:
      v10 = *(unsigned __int16 *)a1;
      v6 = (unsigned int *)((char *)a1 + 2);
      v7 = __rev16(v10);
      break;
    case 1uLL:
      v8 = *(unsigned __int8 *)a1;
      v6 = (unsigned int *)((char *)a1 + 1);
      v7 = v8;
      break;
    default:
      return 4294960591;
  }
  if ((char *)a2 - (char *)v6 < v7)
    return 4294960546;
  v11 = 0;
  *a4 = v6;
  *a5 = v7;
  *a6 = (char *)v6 + v7;
  return v11;
}

uint64_t MirroredRingBufferInit(uint64_t a1, uint64_t a2, int a3)
{
  vm_map_t v4;
  uint64_t v5;
  mach_vm_size_t v6;
  unsigned int v7;
  unsigned int v8;
  uint64_t v9;
  mach_vm_address_t v10;
  uint64_t v11;
  vm_prot_t cur_protection[2];
  mach_vm_address_t target_address;
  mach_vm_address_t address;

  v4 = *MEMORY[0x1E0C83DA0];
  address = 0;
  v5 = ~*MEMORY[0x1E0C85AC0];
  v6 = v5 & (*MEMORY[0x1E0C85AC0] + a2);
  if (a3)
  {
    v7 = (v6 - 1) | ((v6 - 1) >> 1) | ((((_DWORD)v6 - 1) | ((v6 - 1) >> 1)) >> 2);
    v8 = v7 | (v7 >> 4) | ((v7 | (v7 >> 4)) >> 8);
    v6 = (v8 | HIWORD(v8)) + 1;
  }
  if (v6 != (v5 & (*MEMORY[0x1E0C85AC0] + v6)))
    return 4294960534;
  *(_QWORD *)cur_protection = 0;
  target_address = 0;
  v9 = mach_vm_allocate(v4, &address, 2 * v6, 1);
  v10 = address;
  if ((_DWORD)v9)
  {
    v11 = v9;
  }
  else
  {
    target_address = address + v6;
    v11 = mach_vm_remap(v4, &target_address, v6, 0, 0x4000, v4, address, 0, &cur_protection[1], cur_protection, 1u);
    v10 = address;
    if (!(_DWORD)v11)
    {
      *(_QWORD *)a1 = address;
      *(_QWORD *)(a1 + 8) = v10 + v6;
      *(_DWORD *)(a1 + 16) = v6;
      *(_DWORD *)(a1 + 20) = v6 - 1;
      *(_QWORD *)(a1 + 24) = 0;
      return v11;
    }
  }
  if (v10)
    mach_vm_deallocate(v4, v10, 2 * v6);
  return v11;
}

double MirroredRingBufferFree(uint64_t a1)
{
  double result;

  if (*(_QWORD *)a1)
    mach_vm_deallocate(*MEMORY[0x1E0C83DA0], *(_QWORD *)a1, (2 * *(_DWORD *)(a1 + 16)));
  result = 0.0;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  return result;
}

uint64_t MorseCode(uint64_t result, int a2, unsigned int a3, uint64_t (*a4)(uint64_t, unint64_t), unint64_t a5)
{
  char v7;
  unsigned __int8 *v8;
  int v9;
  unsigned int v10;
  BOOL v11;
  unsigned int v12;
  unsigned int v13;
  unsigned __int8 v14;
  _BYTE *v15;
  uint64_t v16;
  __darwin_ct_rune_t v17;
  unsigned int v18;
  unsigned __int8 *v19;
  int v20;
  _QWORD v21[2];
  __int128 v22;

  v7 = a3;
  v8 = (unsigned __int8 *)result;
  v21[0] = a3;
  v21[1] = a4;
  v22 = a5;
  if (a2)
    v9 = a2;
  else
    v9 = 10;
  v10 = 0x5B8D80u / -v9;
  v11 = v9 < 1;
  v12 = 0x124F80u / v9;
  if (v11)
    v13 = v10;
  else
    v13 = v12;
  DWORD2(v22) = v13;
  if ((a3 & 1) == 0)
  {
    a4(0, a5);
    result = usleep(7 * v13);
  }
  v14 = *v8;
  if (*v8)
  {
    v15 = v8 + 1;
    v16 = MEMORY[0x1E0C80978];
    do
    {
      v17 = (char)v14;
      v18 = v14;
      if ((v14 & 0x80) != 0)
      {
        if (__maskrune(v14, 0x100uLL))
        {
LABEL_13:
          v19 = (unsigned __int8 *)&kMorseCodeAlpha + 8 * __toupper(v17) - 520;
LABEL_17:
          result = _MorseCodeDoChar((uint64_t)v21, v19);
          goto LABEL_18;
        }
      }
      else if ((*(_DWORD *)(v16 + 4 * v14 + 60) & 0x100) != 0)
      {
        goto LABEL_13;
      }
      if (v18 - 48 <= 9)
      {
        v19 = (unsigned __int8 *)&kMorseCodeDigit + 8 * (char)v18 - 384;
        goto LABEL_17;
      }
      switch((char)v17)
      {
        case '!':
          v19 = (unsigned __int8 *)&unk_18D51F2AB;
          goto LABEL_17;
        case '"':
          v19 = (unsigned __int8 *)&kMorseCodePunct;
          goto LABEL_17;
        case '#':
        case '%':
        case '*':
        case '0':
        case '1':
        case '2':
        case '3':
        case '4':
        case '5':
        case '6':
        case '7':
        case '8':
        case '9':
        case '<':
        case '>':
          goto LABEL_32;
        case '$':
          v19 = (unsigned __int8 *)&unk_18D51F2DB;
          goto LABEL_17;
        case '&':
          v19 = (unsigned __int8 *)&unk_18D51F2B3;
          goto LABEL_17;
        case '\'':
          v19 = (unsigned __int8 *)&unk_18D51F25B;
          goto LABEL_17;
        case '(':
          v19 = (unsigned __int8 *)&unk_18D51F263;
          goto LABEL_17;
        case ')':
          v19 = (unsigned __int8 *)&unk_18D51F26B;
          goto LABEL_17;
        case '+':
          v19 = (unsigned __int8 *)&unk_18D51F2CB;
          goto LABEL_17;
        case ',':
          v19 = (unsigned __int8 *)&unk_18D51F273;
          goto LABEL_17;
        case '-':
          v19 = (unsigned __int8 *)&unk_18D51F27B;
          goto LABEL_17;
        case '.':
          v19 = (unsigned __int8 *)&unk_18D51F283;
          goto LABEL_17;
        case '/':
          v19 = (unsigned __int8 *)&unk_18D51F28B;
          goto LABEL_17;
        case ':':
          v19 = (unsigned __int8 *)&unk_18D51F293;
          goto LABEL_17;
        case ';':
          v19 = (unsigned __int8 *)&unk_18D51F2BB;
          goto LABEL_17;
        case '=':
          v19 = (unsigned __int8 *)&unk_18D51F2C3;
          goto LABEL_17;
        case '?':
          v19 = (unsigned __int8 *)&unk_18D51F29B;
          goto LABEL_17;
        case '@':
          v19 = (unsigned __int8 *)&unk_18D51F2A3;
          goto LABEL_17;
        default:
          if (v17 == 95)
          {
            v19 = (unsigned __int8 *)&unk_18D51F2D3;
            goto LABEL_17;
          }
LABEL_32:
          if (v17 < 0)
          {
            result = __maskrune(v18, 0x4000uLL);
            if (!(_DWORD)result)
              break;
          }
          else
          {
            result = *(_DWORD *)(v16 + 4 * v18 + 60) & 0x4000;
            if (!(_DWORD)result)
              break;
          }
          if ((v7 & 1) != 0)
            result = a4(6, a5);
          else
            result = usleep(7 * v13);
          break;
      }
LABEL_18:
      if (!*v15)
        return result;
      if ((v18 & 0x80) != 0)
      {
        result = __maskrune(v18, 0x4000uLL);
        if (!(_DWORD)result)
        {
LABEL_23:
          if ((v7 & 1) != 0)
            result = a4(5, a5);
          else
            result = usleep(3 * v13);
        }
      }
      else
      {
        result = *(_DWORD *)(v16 + 4 * v17 + 60) & 0x4000;
        if (!(_DWORD)result)
          goto LABEL_23;
      }
      v20 = *v15++;
      v14 = v20;
    }
    while (v20);
  }
  return result;
}

uint64_t _MorseCodeDoChar(uint64_t result, unsigned __int8 *a2)
{
  unsigned __int8 v2;
  uint64_t v3;
  _BYTE *v4;
  useconds_t v5;
  useconds_t v6;
  int v7;

  v2 = *a2;
  if (*a2)
  {
    v3 = result;
    v4 = a2 + 1;
    do
    {
      if ((*(_BYTE *)v3 & 1) != 0)
      {
        result = (*(uint64_t (**)(_QWORD, _QWORD))(v3 + 8))(v2, *(_QWORD *)(v3 + 16));
      }
      else
      {
        switch(v2)
        {
          case 1u:
            result = (*(uint64_t (**)(uint64_t, _QWORD))(v3 + 8))(1, *(_QWORD *)(v3 + 16));
            break;
          case 2u:
            (*(void (**)(uint64_t, _QWORD))(v3 + 8))(1, *(_QWORD *)(v3 + 16));
            v5 = *(_DWORD *)(v3 + 24);
            goto LABEL_9;
          case 3u:
            (*(void (**)(uint64_t, _QWORD))(v3 + 8))(1, *(_QWORD *)(v3 + 16));
            v5 = 3 * *(_DWORD *)(v3 + 24);
LABEL_9:
            usleep(v5);
            result = (*(uint64_t (**)(_QWORD, _QWORD))(v3 + 8))(0, *(_QWORD *)(v3 + 16));
            break;
          case 4u:
            v6 = *(_DWORD *)(v3 + 24);
            goto LABEL_14;
          case 5u:
            v6 = 3 * *(_DWORD *)(v3 + 24);
            goto LABEL_14;
          case 6u:
            v6 = 7 * *(_DWORD *)(v3 + 24);
LABEL_14:
            result = usleep(v6);
            break;
          default:
            break;
        }
      }
      if (!*v4)
        break;
      result = (*(_BYTE *)v3 & 1) != 0
             ? (*(uint64_t (**)(uint64_t, _QWORD))(v3 + 8))(4, *(_QWORD *)(v3 + 16))
             : usleep(*(_DWORD *)(v3 + 24));
      v7 = *v4++;
      v2 = v7;
    }
    while (v7);
  }
  return result;
}

uint64_t PIDInit(uint64_t result, double a2, double a3, double a4, double a5, double a6, double a7)
{
  *(_QWORD *)(result + 8) = 0;
  *(double *)(result + 16) = a6;
  *(double *)(result + 24) = a7;
  *(double *)(result + 32) = a3;
  *(_QWORD *)(result + 40) = 0;
  *(double *)(result + 48) = 1.0 - a5;
  *(double *)(result + 56) = (1.0 - a5) * a4;
  *(double *)result = a2;
  return result;
}

double PIDUpdate(double *a1, double a2)
{
  double v2;
  double v3;
  double v4;
  double v5;
  double v6;
  double v7;

  v2 = *a1 * a2;
  v3 = a1[3];
  v4 = a1[1] + a1[4] * a2;
  a1[1] = v4;
  v5 = v2 + v4;
  if (v5 > v3 || (v3 = a1[2], v5 < v3))
  {
    a1[1] = v3 - v2;
    v5 = v3;
  }
  v6 = a1[5];
  v7 = a2 - v6;
  a1[5] = v6 + a1[6] * v7;
  return v5 + v7 * a1[7];
}

uint64_t cced25519_make_key_pair_compat()
{
  ccsha512_di();
  ccrng();
  return cced25519_make_key_pair();
}

uint64_t cced25519_sign_compat()
{
  ccsha512_di();
  return cced25519_sign();
}

uint64_t cced25519_verify_compat()
{
  ccsha512_di();
  return cced25519_verify();
}

uint64_t Curve25519MakeKeyPair(uint64_t a1, void *a2)
{
  RandomBytes(a2, 0x20uLL);
  CryptoHKDF((uint64_t)kCryptoHashDescriptor_SHA512, (uint64_t)a2, 32, "Salt", 4uLL, (uint64_t)"Info", 4, 0x20uLL, (uint64_t)a2);
  return cccurve25519_make_pub();
}

uint64_t TDSBloomFilterAddHash(uint64_t result, uint64_t a2, unint64_t a3)
{
  unsigned int v3;
  unint64_t v4;

  v3 = 0;
  v4 = 8 * a2;
  do
  {
    *(_BYTE *)(result + ((a3 % v4) >> 3)) |= 1 << (~(_BYTE)a3 & 7);
    a3 /= v4;
  }
  while (v3++ < 3);
  return result;
}

unint64_t TDSBloomFilterAddString(uint64_t a1, uint64_t a2, char *__s, size_t a4)
{
  unint64_t result;
  unsigned int v8;
  unint64_t v9;

  if (a4 == -1)
    a4 = strlen(__s);
  result = SipHash(qword_18D51F32E, (unsigned __int8 *)__s, a4);
  v8 = 0;
  v9 = 8 * a2;
  do
  {
    *(_BYTE *)(a1 + ((result % v9) >> 3)) |= 1 << (~(_BYTE)result & 7);
    result /= v9;
  }
  while (v8++ < 3);
  return result;
}

BOOL TDSBloomFilterContainsHash(uint64_t a1, uint64_t a2, unint64_t a3)
{
  unsigned int v3;
  unint64_t v4;
  int v5;
  BOOL v6;

  v3 = 0;
  v4 = 8 * a2;
  do
  {
    v5 = (1 << (~(_BYTE)a3 & 7)) & *(unsigned __int8 *)(a1 + ((a3 % v4) >> 3));
    if (v5)
      v6 = v3 >= 3;
    else
      v6 = 1;
    ++v3;
    a3 /= v4;
  }
  while (!v6);
  return v5 != 0;
}

BOOL TDSBloomFilterContainsString(uint64_t a1, uint64_t a2, char *__s, size_t a4)
{
  unint64_t v7;
  unsigned int v8;
  unint64_t v9;
  int v10;
  BOOL v11;

  if (a4 == -1)
    a4 = strlen(__s);
  v7 = SipHash(qword_18D51F32E, (unsigned __int8 *)__s, a4);
  v8 = 0;
  v9 = 8 * a2;
  do
  {
    v10 = (1 << (~(_BYTE)v7 & 7)) & *(unsigned __int8 *)(a1 + ((v7 % v9) >> 3));
    if (v10)
      v11 = v8 >= 3;
    else
      v11 = 1;
    ++v8;
    v7 /= v9;
  }
  while (!v11);
  return v10 != 0;
}

uint64_t _NetPerfGetTypeID()
{
  uint64_t result;

  result = _CFRuntimeRegisterClass();
  gNetPerfTypeID = result;
  return result;
}

void _NetPerfFinalize(_QWORD *a1)
{
  NSObject *v2;
  NSObject *v3;
  const void *v4;

  v2 = a1[2];
  if (v2)
  {
    dispatch_release(v2);
    a1[2] = 0;
  }
  v3 = a1[5];
  if (v3)
  {
    dispatch_release(v3);
    a1[5] = 0;
  }
  v4 = (const void *)a1[6];
  if (v4)
  {
    CFRelease(v4);
    a1[6] = 0;
  }
}

uint64_t NetPerfCreate(_QWORD *a1)
{
  uint64_t Instance;
  _QWORD *v3;
  dispatch_queue_t v4;
  uint64_t v5;
  NSObject *v6;
  uint64_t result;

  if (gNetPerfInitOnce != -1)
    dispatch_once_f(&gNetPerfInitOnce, 0, (dispatch_function_t)_NetPerfGetTypeID);
  Instance = _CFRuntimeCreateInstance();
  if (!Instance)
    return 4294960568;
  v3 = (_QWORD *)Instance;
  *(_OWORD *)(Instance + 144) = 0u;
  *(_OWORD *)(Instance + 160) = 0u;
  *(_OWORD *)(Instance + 224) = 0u;
  *(_OWORD *)(Instance + 240) = 0u;
  *(_OWORD *)(Instance + 192) = 0u;
  *(_OWORD *)(Instance + 208) = 0u;
  *(_OWORD *)(Instance + 176) = 0u;
  *(_OWORD *)(Instance + 112) = 0u;
  *(_OWORD *)(Instance + 128) = 0u;
  *(_OWORD *)(Instance + 80) = 0u;
  *(_OWORD *)(Instance + 96) = 0u;
  *(_OWORD *)(Instance + 48) = 0u;
  *(_OWORD *)(Instance + 64) = 0u;
  *(_OWORD *)(Instance + 16) = 0u;
  *(_OWORD *)(Instance + 32) = 0u;
  *(_QWORD *)(Instance + 84) = -1;
  *(_QWORD *)(Instance + 152) = -1;
  *(_DWORD *)(Instance + 160) = -1;
  v4 = dispatch_queue_create("NetPerfControl", 0);
  v3[2] = v4;
  if (!v4)
  {
    CFRelease(v3);
    return 4294960568;
  }
  v5 = MEMORY[0x1E0C80D38];
  dispatch_retain(MEMORY[0x1E0C80D38]);
  v6 = v3[5];
  if (v6)
    dispatch_release(v6);
  result = 0;
  v3[5] = v5;
  *a1 = v3;
  return result;
}

void NetPerfSetEventHandler(_QWORD *a1, uint64_t a2, uint64_t a3, NSObject *a4)
{
  NSObject *v5;
  NSObject *v6;

  a1[3] = a2;
  a1[4] = a3;
  if (a4)
    v5 = a4;
  else
    v5 = MEMORY[0x1E0C80D38];
  dispatch_retain(v5);
  v6 = a1[5];
  if (v6)
    dispatch_release(v6);
  a1[5] = v5;
}

uint64_t _NetPerfControl(unint64_t a1, int a2, CFStringRef theString1, uint64_t a4, const __CFDictionary *a5, __CFDictionary **a6)
{
  uint64_t v10;
  void *v11;
  char *v12;
  char *v13;
  void *v14;
  int *v15;
  int *v16;
  __CFDictionary *Mutable;
  __CFDictionary *v19;
  uint64_t v20;
  int v21;
  unsigned int v22;
  int v23;

  if (CFStringCompare(theString1, CFSTR("startClientSession"), 0) == kCFCompareEqualTo)
  {
    if (*(_DWORD *)(a1 + 80))
      return 4294960575;
    if (a5)
    {
      *(_OWORD *)(a1 + 232) = xmmword_18D51D460;
      *(_QWORD *)(a1 + 248) = 0xBFF0000000000000;
      *(_QWORD *)(a1 + 216) = 0;
      *(_QWORD *)(a1 + 192) = 0;
      if (SecondsToUpTicks_sOnce != -1)
        dispatch_once_f(&SecondsToUpTicks_sOnce, &SecondsToUpTicks_sMultiplier, (dispatch_function_t)_SecondsToUpTicksInit);
      *(_QWORD *)(a1 + 224) = SecondsToUpTicks_sMultiplier;
      *(_QWORD *)(a1 + 176) = 1500;
      v11 = malloc_type_calloc(1uLL, 0x5DCuLL, 0x6D70E0A7uLL);
      *(_QWORD *)(a1 + 168) = v11;
      if (v11)
      {
        v22 = HTTPClientCreate((uint64_t *)(a1 + 56));
        if (!v22)
        {
          HTTPClientSetDispatchQueue(*(_QWORD *)(a1 + 56), *(NSObject **)(a1 + 16));
          *(_DWORD *)(*(_QWORD *)(a1 + 56) + 84) |= 0x81u;
          v12 = CFDictionaryCopyCString(a5, CFSTR("destination"), &v22);
          if (!v22)
          {
            v13 = v12;
            v22 = HTTPClientSetDestination(*(_QWORD *)(a1 + 56), v12, 5000);
            free(v13);
            if (!v22)
            {
              v22 = HTTPMessageCreate((uint64_t *)(a1 + 64));
              if (!v22)
              {
                v20 = *(_QWORD *)(a1 + 64);
                *(_QWORD *)(v20 + 9672) = a1;
                *(_QWORD *)(v20 + 9712) = _NetPerfClientHandleControlCompletion;
                CFRetain((CFTypeRef)a1);
                *(_DWORD *)(a1 + 80) = 1;
                _NetPerfClientRunStateMachine(a1);
                return 0;
              }
            }
          }
        }
        goto LABEL_16;
      }
      v21 = -6728;
    }
    else
    {
      v21 = -6705;
    }
    v22 = v21;
LABEL_16:
    _NetPerfClientStop((char *)a1);
    v10 = v22;
    if (v22)
      return v10;
    return 0;
  }
  if (CFStringCompare(theString1, CFSTR("stopClientSession"), 0) == kCFCompareEqualTo)
  {
    _NetPerfClientStop((char *)a1);
    return 0;
  }
  if (CFStringCompare(theString1, CFSTR("setUpServerSession"), 0) == kCFCompareEqualTo)
  {
    v23 = 0;
    if (*(_BYTE *)(a1 + 128))
    {
      v10 = 4294960577;
    }
    else
    {
      *(_DWORD *)(a1 + 184) = 0;
      *(_QWORD *)(a1 + 192) = 0;
      *(_QWORD *)(a1 + 200) = 0;
      *(_DWORD *)(a1 + 208) = 0;
      *(_QWORD *)(a1 + 176) = 1500;
      v14 = malloc_type_calloc(1uLL, 0x5DCuLL, 0xFCB3032AuLL);
      *(_QWORD *)(a1 + 168) = v14;
      if (v14)
      {
        v15 = (int *)(a1 + 156);
        v16 = (int *)(a1 + 160);
        v10 = ServerSocketPairOpen(2, 17, 0, &v23, -1, (int *)(a1 + 156), (int *)(a1 + 160));
        if ((_DWORD)v10)
          goto LABEL_28;
        if ((*v15 & 0x80000000) == 0)
        {
          SocketSetP2P(*v15, 1);
          SocketSetPacketTimestamps(*v15, 1);
        }
        if ((*v16 & 0x80000000) == 0)
        {
          SocketSetP2P(*v16, 1);
          SocketSetPacketTimestamps(*v16, 1);
        }
        v10 = OpenSelfConnectedLoopbackSocket((int *)(a1 + 152));
        if ((_DWORD)v10)
          goto LABEL_28;
        v10 = pthread_create((pthread_t *)(a1 + 136), 0, (void *(__cdecl *)(void *))_NetPerfServerDataThread, (void *)a1);
        if ((_DWORD)v10)
          goto LABEL_28;
        *(_QWORD *)(a1 + 144) = a1 + 136;
        Mutable = CFDictionaryCreateMutable(0, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
        if (Mutable)
        {
          v19 = Mutable;
          CFDictionarySetInt64(Mutable, CFSTR("port"), v23);
          *(_BYTE *)(a1 + 128) = 1;
          CFRetain((CFTypeRef)a1);
          *a6 = v19;
          return 0;
        }
      }
      v10 = 4294960568;
    }
LABEL_28:
    _NetPerfServerSessionTearDown((CFTypeRef)a1);
    return v10;
  }
  if (CFStringCompare(theString1, CFSTR("tearDownServerSession"), 0) == kCFCompareEqualTo)
  {
    _NetPerfServerSessionTearDown((CFTypeRef)a1);
    return 0;
  }
  if (CFStringCompare(theString1, CFSTR("startServerSession"), 0) == kCFCompareEqualTo)
  {
    if (!*(_BYTE *)(a1 + 128))
      return 4294960551;
    if (!*(_BYTE *)(a1 + 129))
    {
      *(_BYTE *)(a1 + 129) = 1;
      return 0;
    }
    return 4294960575;
  }
  return 4294960582;
}

CFTypeID _NetPerfClientHandleControlCompletion(CFTypeID result)
{
  CFTypeID v1;
  unint64_t v2;
  const void *v3;
  CFIndex v4;
  const void *v5;
  CFTypeID v6;

  if (!*(_DWORD *)(result + 9648))
  {
    v1 = result;
    v2 = *(_QWORD *)(result + 9672);
    v3 = *(const void **)(v2 + 72);
    if (v3)
    {
      CFRelease(v3);
      *(_QWORD *)(v2 + 72) = 0;
    }
    v4 = *(_QWORD *)(v1 + 8528);
    if (!v4)
      return _NetPerfClientRunStateMachine(v2);
    result = (CFTypeID)CFDataCreate(0, *(const UInt8 **)(v1 + 8520), v4);
    if (result)
    {
      v5 = (const void *)result;
      *(_QWORD *)(v2 + 72) = CFPropertyListCreateWithData(0, (CFDataRef)result, 0, 0, 0);
      CFRelease(v5);
      result = *(_QWORD *)(v2 + 72);
      if (result)
      {
        v6 = CFGetTypeID((CFTypeRef)result);
        result = CFDictionaryGetTypeID();
        if (v6 == result)
          return _NetPerfClientRunStateMachine(v2);
      }
    }
  }
  return result;
}

unint64_t _NetPerfClientRunStateMachine(unint64_t result)
{
  uint64_t v1;
  int *v2;
  pthread_t *v3;
  pthread_t *v4;
  int i;
  int v6;
  const __CFDictionary *v7;
  int *v8;
  socklen_t v9[2];
  sockaddr v10;
  uint64_t v11;
  int v12;
  int v13;

  v1 = result;
  v2 = (int *)(result + 84);
  v3 = (pthread_t *)(result + 112);
  v4 = (pthread_t *)(result + 96);
  for (i = *(_DWORD *)(result + 80); i == 3; i = 4)
  {
    result = OpenSelfConnectedLoopbackSocket(v2);
    if ((_DWORD)result)
      return result;
    result = pthread_create(v3, 0, (void *(__cdecl *)(void *))_NetPerfClientReceiveThread, (void *)v1);
    if ((_DWORD)result)
      return result;
    *(_QWORD *)(v1 + 120) = v3;
    result = pthread_create(v4, 0, (void *(__cdecl *)(void *))_NetPerfClientSendThread, (void *)v1);
    if ((_DWORD)result)
      return result;
    *(_QWORD *)(v1 + 104) = v4;
    *(_DWORD *)(v1 + 80) = 4;
  }
  if (i == 2)
  {
    v7 = *(const __CFDictionary **)(v1 + 72);
    *(_QWORD *)&v10.sa_len = 0;
    *(_QWORD *)&v10.sa_data[6] = 0;
    v12 = 0;
    v11 = 0;
    *(_QWORD *)v9 = 0;
    result = HTTPClientGetPeerAddress(*(_QWORD *)(v1 + 56), &v10, 0x1Cu, v9);
    if (!(_DWORD)result)
    {
      v8 = (int *)(v1 + 88);
      result = ServerSocketOpenEx2(v10.sa_family, 2, 17, 0, 0, -6100, 0, -1, 0, (int *)(v1 + 88));
      v13 = result;
      if (!(_DWORD)result)
      {
        SocketSetP2P(*v8, 1);
        result = SocketSetPacketTimestamps(*v8, 1);
        if (v7)
        {
          result = CFDictionaryGetInt64(v7, CFSTR("port"), &v13);
          if (!v13)
          {
            if (v10.sa_family == 30 || v10.sa_family == 2)
              *(_WORD *)v10.sa_data = bswap32(result) >> 16;
            v13 = connect(*v8, &v10, v9[0]);
            if (!v13
              || (result = (unint64_t)__error(), *(_DWORD *)result)
              && (result = (unint64_t)__error(), !*(_DWORD *)result))
            {
              result = _NetPerfClientSendControlMessage(v1, CFSTR("startServerSession"));
              if (!(_DWORD)result)
              {
                v6 = 3;
                goto LABEL_11;
              }
            }
          }
        }
      }
    }
  }
  else if (i == 1)
  {
    result = _NetPerfClientSendControlMessage(v1, CFSTR("setUpServerSession"));
    if (!(_DWORD)result)
    {
      v6 = 2;
LABEL_11:
      *(_DWORD *)(v1 + 80) = v6;
    }
  }
  return result;
}

void _NetPerfClientStop(char *cf)
{
  dispatch_queue_t *v2;
  const void *v3;
  const void *v4;
  int v5;
  int v6;
  void *v7;
  _QWORD *v8;

  if (*((_QWORD *)cf + 13))
  {
    SendSelfConnectedLoopbackMessage(*((_DWORD *)cf + 21), "q", 1uLL);
    pthread_join(*((pthread_t *)cf + 12), 0);
    *((_QWORD *)cf + 13) = 0;
  }
  if (*((_QWORD *)cf + 15))
  {
    SendSelfConnectedLoopbackMessage(*((_DWORD *)cf + 21), "q", 1uLL);
    pthread_join(*((pthread_t *)cf + 14), 0);
    *((_QWORD *)cf + 15) = 0;
  }
  v2 = (dispatch_queue_t *)*((_QWORD *)cf + 7);
  if (v2)
  {
    CFRetain(*((CFTypeRef *)cf + 7));
    dispatch_async_f(v2[2], v2, (dispatch_function_t)_HTTPClientInvalidate);
    CFRelease(*((CFTypeRef *)cf + 7));
    *((_QWORD *)cf + 7) = 0;
  }
  v3 = (const void *)*((_QWORD *)cf + 8);
  if (v3)
  {
    CFRelease(v3);
    *((_QWORD *)cf + 8) = 0;
  }
  v4 = (const void *)*((_QWORD *)cf + 9);
  if (v4)
  {
    CFRelease(v4);
    *((_QWORD *)cf + 9) = 0;
  }
  v5 = *((_DWORD *)cf + 21);
  if ((v5 & 0x80000000) == 0)
  {
    if (close(v5) && *__error())
      __error();
    *((_DWORD *)cf + 21) = -1;
  }
  v6 = *((_DWORD *)cf + 22);
  if ((v6 & 0x80000000) == 0)
  {
    if (close(v6) && *__error())
      __error();
    *((_DWORD *)cf + 22) = -1;
  }
  v7 = (void *)*((_QWORD *)cf + 21);
  if (v7)
  {
    free(v7);
    *((_QWORD *)cf + 21) = 0;
  }
  if (*((_DWORD *)cf + 20))
  {
    if (*((_QWORD *)cf + 3))
    {
      v8 = malloc_type_malloc(0x20uLL, 0x10E0040E15455BBuLL);
      if (v8)
      {
        *(_DWORD *)v8 = 4;
        v8[1] = 0;
        *((_OWORD *)v8 + 1) = *(_OWORD *)(cf + 24);
        dispatch_async_f(*((dispatch_queue_t *)cf + 5), v8, (dispatch_function_t)_PostEventOnEventQueue);
      }
    }
    *((_DWORD *)cf + 20) = 0;
    CFRelease(cf);
  }
}

uint64_t _NetPerfServerDataThread(_DWORD *a1)
{
  unint64_t v1;
  unint64_t v2;
  int v3;
  int v4;
  unint64_t v5;
  int v6;
  unint64_t v7;
  int v8;
  int v9;
  unint64_t v10;
  int v11;
  int v12;
  int v15;
  fd_set v16;

  v2 = a1[39];
  v1 = a1[40];
  v3 = a1[38];
  SetCurrentThreadPriority(62);
  memset(&v16, 0, sizeof(v16));
  if ((int)v2 <= (int)v1)
    v4 = v1;
  else
    v4 = v2;
  v15 = 1 << v2;
  if (v4 <= v3)
    v4 = v3;
  v5 = v2 >> 5;
  v6 = 1 << v1;
  v7 = v1 >> 5;
  if (v4 < 0)
    v4 = -1;
  v8 = v4 + 1;
  v9 = 1 << v3;
  v10 = (unint64_t)v3 >> 5;
  do
  {
    while (1)
    {
      if ((v2 & 0x80000000) == 0 && __darwin_check_fd_set_overflow(v2, &v16, 0))
        v16.fds_bits[v5] |= v15;
      if ((v1 & 0x80000000) == 0 && __darwin_check_fd_set_overflow(v1, &v16, 0))
        v16.fds_bits[v7] |= v6;
      if (__darwin_check_fd_set_overflow(v3, &v16, 0))
        v16.fds_bits[v10] |= v9;
      v11 = select(v8, &v16, 0, 0, 0);
      if (v11 > 0)
        break;
      if (v11 && *__error())
      {
        v12 = *__error();
        if (!v12)
          break;
        if (v12 == 4)
          continue;
      }
      sleep(1u);
    }
    if ((v2 & 0x80000000) == 0 && __darwin_check_fd_set_overflow(v2, &v16, 0) && (v16.fds_bits[v5] & v15) != 0)
      _NetPerfServerDataHandler((uint64_t)a1, v2);
    if ((v1 & 0x80000000) == 0 && __darwin_check_fd_set_overflow(v1, &v16, 0) && (v16.fds_bits[v7] & v6) != 0)
      _NetPerfServerDataHandler((uint64_t)a1, v1);
  }
  while (!__darwin_check_fd_set_overflow(v3, &v16, 0) || (v16.fds_bits[v10] & v9) == 0);
  return 0;
}

void _NetPerfServerSessionTearDown(CFTypeRef cf)
{
  int v2;
  int v3;
  int v4;
  void *v5;

  if (*((_QWORD *)cf + 18))
  {
    SendSelfConnectedLoopbackMessage(*((_DWORD *)cf + 38), "q", 1uLL);
    pthread_join(*((pthread_t *)cf + 17), 0);
    *((_QWORD *)cf + 18) = 0;
  }
  v2 = *((_DWORD *)cf + 38);
  if ((v2 & 0x80000000) == 0)
  {
    if (close(v2) && *__error())
      __error();
    *((_DWORD *)cf + 38) = -1;
  }
  v3 = *((_DWORD *)cf + 39);
  if ((v3 & 0x80000000) == 0)
  {
    if (close(v3) && *__error())
      __error();
    *((_DWORD *)cf + 39) = -1;
  }
  v4 = *((_DWORD *)cf + 40);
  if ((v4 & 0x80000000) == 0)
  {
    if (close(v4) && *__error())
      __error();
    *((_DWORD *)cf + 40) = -1;
  }
  v5 = (void *)*((_QWORD *)cf + 21);
  if (v5)
  {
    free(v5);
    *((_QWORD *)cf + 21) = 0;
  }
  if (*((_BYTE *)cf + 128))
  {
    *((_BYTE *)cf + 128) = 0;
    CFRelease(cf);
  }
}

int *_NetPerfServerDataHandler(uint64_t a1, int a2)
{
  int32x2_t *v4;
  int *result;
  unint64_t v6;
  unsigned int v7;
  int v8;
  int v9;
  uint64_t v10;
  unint64_t v11;
  socklen_t v12[2];
  sockaddr v13;
  uint64_t v14;
  int v15;
  ssize_t v16;

  v16 = 0;
  *(_QWORD *)&v13.sa_len = 0;
  *(_QWORD *)&v13.sa_data[6] = 0;
  v15 = 0;
  v14 = 0;
  v11 = 0;
  *(_QWORD *)v12 = 0;
  v4 = *(int32x2_t **)(a1 + 168);
  result = (int *)SocketRecvFrom(a2, (uint64_t)v4, *(_QWORD *)(a1 + 176), &v16, &v13, 0x1Cu, v12, &v11, 0, 0);
  if ((_DWORD)result)
    return result;
  v6 = UpTicksToNTP(v11);
  v7 = bswap32(v4->i32[0]);
  v8 = *(_DWORD *)(a1 + 184);
  v9 = v7 - (v8 + 1);
  if (v7 == v8 + 1)
    goto LABEL_5;
  if (v9 >= 1)
  {
    *(_DWORD *)(a1 + 204) += v9;
LABEL_5:
    *(_DWORD *)(a1 + 184) = v7;
    goto LABEL_6;
  }
  if (v7 == v8)
    ++*(_DWORD *)(a1 + 208);
  else
    ++*(_DWORD *)(a1 + 200);
LABEL_6:
  ++*(_QWORD *)(a1 + 192);
  v4[1] = v4[3];
  v4[2] = (int32x2_t)bswap64(v6);
  v10 = mach_absolute_time();
  v4[3] = (int32x2_t)bswap64(UpTicksToNTP(v10));
  v4[4] = vrev64_s32((int32x2_t)vrev32_s8(*(int8x8_t *)(a1 + 200)));
  v4[5].i32[0] = bswap32(*(_DWORD *)(a1 + 208));
  result = (int *)sendto(a2, v4, 0x30uLL, 0, &v13, v12[0]);
  if (result != (int *)48)
  {
    result = __error();
    if (*result)
      return __error();
  }
  return result;
}

void _PostEventOnEventQueue(unsigned int *a1)
{
  const void *v2;

  (*((void (**)(_QWORD, _QWORD, _QWORD))a1 + 2))(*a1, *((_QWORD *)a1 + 1), *((_QWORD *)a1 + 3));
  v2 = (const void *)*((_QWORD *)a1 + 1);
  if (v2)
    CFRelease(v2);
  free(a1);
}

uint64_t _NetPerfClientSendControlMessage(uint64_t a1, const void *a2)
{
  uint64_t v4;
  __CFDictionary *Mutable;
  __CFDictionary *v6;
  const __CFData *Data;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  const UInt8 *BytePtr;
  size_t Length;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;

  v4 = *(_QWORD *)(a1 + 64);
  Mutable = CFDictionaryCreateMutable(0, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  if (!Mutable)
    return 4294960568;
  v6 = Mutable;
  CFDictionarySetValue(Mutable, CFSTR("controlCommand"), a2);
  Data = CFPropertyListCreateData(0, v6, kCFPropertyListBinaryFormat_v1_0, 0, 0);
  CFRelease(v6);
  if (!Data)
    return 4294960596;
  HTTPHeader_InitRequestF(v4 + 24, (uint64_t)"HTTP/1.1", (uint64_t)"POST", (uint64_t)"%s", v8, v9, v10, v11, (uint64_t)"/perf");
  BytePtr = CFDataGetBytePtr(Data);
  Length = CFDataGetLength(Data);
  v14 = HTTPMessageSetBody(v4, (uint64_t)"application/x-apple-binary-plist", BytePtr, Length);
  CFRelease(Data);
  if ((_DWORD)v14)
    return v14;
  return HTTPClientSendMessage(*(dispatch_queue_t **)(a1 + 56), v4, v15, v16, v17, v18, v19, v20);
}

uint64_t _NetPerfClientReceiveThread(uint64_t a1)
{
  int v2;
  int v3;
  int v4;
  int v5;
  int v6;
  unint64_t v7;
  int v8;
  unint64_t v9;
  int v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  double v16;
  double v17;
  double v18;
  double v19;
  double v20;
  int v21;
  int v23;
  fd_set v24;
  unint64_t v25;
  ssize_t v26[2];

  v3 = *(_DWORD *)(a1 + 84);
  v2 = *(_DWORD *)(a1 + 88);
  SetCurrentThreadPriority(62);
  memset(&v24, 0, 32);
  if (v2 <= v3)
    v4 = v3;
  else
    v4 = v2;
  if (v4 < 0)
    v4 = -1;
  memset(&v24.fds_bits[8], 0, 96);
  v5 = v4 + 1;
  v6 = 1 << v2;
  v7 = (unint64_t)v2 >> 5;
  v8 = 1 << v3;
  v9 = (unint64_t)v3 >> 5;
  v23 = v4 + 1;
  do
  {
    while (1)
    {
      if (__darwin_check_fd_set_overflow(v2, &v24, 0))
        v24.fds_bits[v7] |= v6;
      if (__darwin_check_fd_set_overflow(v3, &v24, 0))
        v24.fds_bits[v9] |= v8;
      v10 = select(v5, &v24, 0, 0, 0);
      if (v10 > 0)
        break;
      if (v10 && *__error())
      {
        v21 = *__error();
        if (!v21)
          break;
        if (v21 == 4)
          continue;
      }
      sleep(1u);
    }
    if (__darwin_check_fd_set_overflow(v2, &v24, 0))
    {
      if ((v24.fds_bits[v7] & v6) != 0)
      {
        v25 = 0;
        v26[0] = 0;
        v11 = *(_QWORD *)(a1 + 168);
        if (!SocketRecvFrom(v2, v11, *(_QWORD *)(a1 + 176), v26, 0, 0, 0, &v25, 0, 0))
        {
          ++*(_QWORD *)(a1 + 192);
          v12 = bswap64(*(_QWORD *)(v11 + 8));
          v13 = bswap64(*(_QWORD *)(v11 + 16));
          v14 = bswap64(*(_QWORD *)(v11 + 24));
          v15 = UpTicksToNTP(v25);
          v16 = (double)(uint64_t)(v15 - v12) * 2.32830644e-10 - (double)(uint64_t)(v14 - v13) * 2.32830644e-10;
          v17 = *(double *)(a1 + 232);
          if (v16 < v17)
          {
            *(double *)(a1 + 232) = v16;
            v17 = (double)(uint64_t)(v15 - v12) * 2.32830644e-10 - (double)(uint64_t)(v14 - v13) * 2.32830644e-10;
          }
          v18 = *(double *)(a1 + 240);
          if (v16 > v18)
          {
            *(double *)(a1 + 240) = v16;
            v18 = (double)(uint64_t)(v15 - v12) * 2.32830644e-10 - (double)(uint64_t)(v14 - v13) * 2.32830644e-10;
          }
          v19 = *(double *)(a1 + 248);
          if (v19 >= 0.0)
            v20 = v16 * 0.1 + v19 * 0.9;
          else
            v20 = (double)(uint64_t)(v15 - v12) * 2.32830644e-10 - (double)(uint64_t)(v14 - v13) * 2.32830644e-10;
          *(double *)(a1 + 248) = v20;
          v6 = 1 << v2;
          v5 = v23;
          v8 = 1 << v3;
          if (v16 <= v20 * 3.0)
          {
            if (v25 >= *(_QWORD *)(a1 + 216))
            {
              fprintf((FILE *)*MEMORY[0x1E0C80C20], "%4llu: Min RTT %10f ms, Max RTT %10f, Avg RTT %10f, Recent RTT %10f Lost %u%s\n", *(_QWORD *)(a1 + 192), v17 * 1000.0, v18 * 1000.0, v20 * 1000.0, v16 * 1000.0, bswap32(*(_DWORD *)(v11 + 32)), "");
              *(_QWORD *)(a1 + 216) = *(_QWORD *)(a1 + 224) + v25;
            }
          }
          else
          {
            fprintf((FILE *)*MEMORY[0x1E0C80C20], "%4llu: Min RTT %10f ms, Max RTT %10f, Avg RTT %10f, Recent RTT %10f Lost %u%s\n", *(_QWORD *)(a1 + 192), v17 * 1000.0, v18 * 1000.0, v20 * 1000.0, v16 * 1000.0, bswap32(*(_DWORD *)(v11 + 32)), " (bad)");
          }
        }
      }
    }
  }
  while (!__darwin_check_fd_set_overflow(v3, &v24, 0) || (v24.fds_bits[v9] & v8) == 0);
  return 0;
}

uint64_t _NetPerfClientSendThread(uint64_t a1)
{
  int v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unsigned int i;
  uint64_t v6;
  unsigned int v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v1 = *(_DWORD *)(a1 + 88);
  SetCurrentThreadPriority(62);
  v2 = mach_absolute_time();
  if (UpTicksPerSecond_sOnce != -1)
    dispatch_once_f(&UpTicksPerSecond_sOnce, &UpTicksPerSecond_sTicksPerSecond, (dispatch_function_t)_UpTicksPerSecondInit);
  v3 = UpTicksPerSecond_sTicksPerSecond / 0x3CuLL;
  v13 = 0;
  v14 = 0;
  v12 = 0;
  v4 = v2 + UpTicksPerSecond_sTicksPerSecond / 0x3CuLL;
  for (i = 1; ; ++i)
  {
    v8 = bswap32(i);
    v9 = 0;
    v10 = 0;
    v11 = 0;
    v6 = mach_absolute_time();
    v12 = bswap64(UpTicksToNTP(v6));
    if (send(v1, &v8, 0x30uLL, 0) != 48 && (!*__error() || *__error()))
      break;
    SleepUntilUpTicks(v4);
    v4 += v3;
  }
  return 0;
}

uint64_t NetSocketChaCha20Poly1305Configure(_QWORD *a1, _OWORD *a2, _QWORD *a3, _OWORD *a4, _QWORD *a5)
{
  _OWORD *v10;
  __int128 v11;
  __int128 v12;
  uint64_t result;

  v10 = (_OWORD *)a1[12];
  if (!v10)
  {
    v10 = malloc_type_calloc(1uLL, 0x8278uLL, 0x10100408667D46EuLL);
    if (!v10)
      return 4294960568;
    a1[12] = v10;
  }
  v11 = a2[1];
  v10[16] = *a2;
  v10[17] = v11;
  if (a3)
    *((_QWORD *)v10 + 36) = *a3;
  v12 = a4[1];
  *(_OWORD *)((char *)v10 + 16936) = *a4;
  *(_OWORD *)((char *)v10 + 16952) = v12;
  if (a5)
    *((_QWORD *)v10 + 2121) = *a5;
  result = 0;
  a1[3] = _NetSocketTransportRead;
  a1[4] = _NetSocketTransportWrite;
  a1[5] = _NetSocketTransportWriteV;
  a1[6] = NetSocket_WriteFileSlow;
  a1[7] = _NetSocketTransportFree;
  return result;
}

uint64_t _NetSocketTransportRead(uint64_t a1, size_t a2, size_t a3, char *__dst, size_t *a5, uint64_t a6, unsigned int a7)
{
  char *v9;
  size_t v10;
  uint64_t v11;
  const void *v12;
  size_t v13;
  size_t v14;
  size_t v15;
  const void *v17;
  size_t v18;
  size_t v19;
  size_t v20;
  BOOL v21;
  unsigned int v22;
  uint64_t v23;
  uint64_t Internal;
  unint64_t v25;
  int64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  __int16 v35;
  size_t v36;
  _QWORD *v38;
  size_t v41;
  unsigned __int16 __dsta;
  unsigned int v43;
  int8x16_t v44;
  uint64_t v45;

  v45 = *MEMORY[0x1E0C80C00];
  if (*(_DWORD *)a1 != 1853058915)
  {
    v15 = 0;
    v32 = 4294960556;
    goto LABEL_42;
  }
  if (*(_BYTE *)(a1 + 8))
  {
    v15 = 0;
    v32 = 4294960573;
    goto LABEL_42;
  }
  if ((*(_DWORD *)(a1 + 4) & 0x80000000) != 0)
  {
    v15 = 0;
    v32 = 4294960551;
    goto LABEL_42;
  }
  v9 = __dst;
  v10 = a3;
  v11 = *(_QWORD *)(a1 + 96);
  v12 = *(const void **)(a1 + 64);
  v13 = *(_QWORD *)(a1 + 72) - (_QWORD)v12;
  if (v13)
  {
    if (v13 >= a3)
      v14 = a3;
    else
      v14 = *(_QWORD *)(a1 + 72) - (_QWORD)v12;
    memcpy(__dst, v12, v14);
    v15 = v14;
    *(_QWORD *)(a1 + 64) += v14;
    v10 -= v14;
    if (v14 >= a2 || v10 == 0)
      goto LABEL_40;
    v9 += v14;
  }
  else
  {
    v15 = 0;
  }
  v17 = *(const void **)(v11 + 33384);
  v18 = *(_QWORD *)(v11 + 33392) - (_QWORD)v17;
  if (v18)
  {
    if (v18 >= v10)
      v19 = v10;
    else
      v19 = *(_QWORD *)(v11 + 33392) - (_QWORD)v17;
    v20 = v15;
    memcpy(v9, v17, v19);
    *(_QWORD *)(v11 + 33384) += v19;
    v15 = v19 + v20;
    v10 -= v19;
    if (v10)
      v21 = v15 >= a2;
    else
      v21 = 1;
    if (!v21)
    {
      v38 = (_QWORD *)(v11 + 33384);
      v22 = a7;
      v9 += v19;
      goto LABEL_25;
    }
LABEL_40:
    v32 = 0;
    goto LABEL_42;
  }
  if (!v10)
    goto LABEL_40;
  v38 = (_QWORD *)(v11 + 33384);
  v22 = a7;
LABEL_25:
  v23 = v11 + 288;
  while (1)
  {
    v41 = v15;
    Internal = NetSocket_ReadInternal(a1, 2uLL, 2, (char *)&__dsta, 0, 0, v22);
    if ((_DWORD)Internal)
    {
LABEL_45:
      v32 = Internal;
      goto LABEL_57;
    }
    v25 = __dsta;
    if (__dsta > 0x4000u)
    {
      v32 = 4294960553;
      goto LABEL_57;
    }
    Internal = NetSocket_ReadInternal(a1, __dsta, __dsta, (char *)(v11 + 296), 0, 0, v22);
    if ((_DWORD)Internal)
      goto LABEL_45;
    Internal = NetSocket_ReadInternal(a1, 0x10uLL, 16, v44.i8, 0, 0, v22);
    v43 = Internal;
    if ((_DWORD)Internal)
      goto LABEL_45;
    chacha20_poly1305_init_64x64((int32x4_t *)v11, (_DWORD *)(v11 + 256), (_DWORD *)(v11 + 288));
    poly1305_update((unsigned int *)(v11 + 136), (unsigned int *)&__dsta, 2uLL);
    *(_QWORD *)(v11 + 232) += 2;
    v26 = chacha20_poly1305_decrypt(v11, (int8x16_t *)(v11 + 296), v25, (int8x16_t *)(v11 + 296));
    v27 = chacha20_poly1305_verify((unsigned int *)v11, (int8x16_t *)(v11 + v26 + 296), &v44, (int *)&v43);
    v32 = v43;
    if (v43)
      break;
    v33 = v27 + v26;
    if (v33 != v25)
    {
      if (gLogCategory_NetSocketChaCha20Poly1305 <= 60
        && (gLogCategory_NetSocketChaCha20Poly1305 != -1
         || _LogCategory_Initialize((uint64_t)&gLogCategory_NetSocketChaCha20Poly1305, 0x3Cu)))
      {
        LogPrintF((uint64_t)&gLogCategory_NetSocketChaCha20Poly1305, (uint64_t)"OSStatus _NetSocketTransportRead(NetSocketRef, size_t, size_t, void *, size_t *, int, int32_t)", 0x3Cu, (uint64_t)"### NSTCP verify len failed: %zu vs %zu\n", v28, v29, v30, v31, v33);
      }
      v32 = 4294960534;
      goto LABEL_57;
    }
    v34 = 0;
    do
    {
      v35 = (*(_BYTE *)(v23 + v34))++ + 1;
      if ((v35 & 0x100) == 0)
        break;
      v21 = v34++ >= 7;
    }
    while (!v21);
    v36 = v10 - v25;
    if (v10 < v25)
    {
      memcpy(v9, (const void *)(v11 + 296), v10);
      v32 = 0;
      *v38 = v11 + 296 + v10;
      v38[1] = v11 + 296 + v25;
      v15 = v10 + v41;
      goto LABEL_42;
    }
    memcpy(v9, (const void *)(v11 + 296), v25);
    v32 = 0;
    v15 = v41 + v25;
    if (v41 + v25 < a2)
    {
      v9 += v25;
      v10 -= v25;
      if (v36)
        continue;
    }
    goto LABEL_42;
  }
  if (gLogCategory_NetSocketChaCha20Poly1305 <= 60
    && (gLogCategory_NetSocketChaCha20Poly1305 != -1
     || _LogCategory_Initialize((uint64_t)&gLogCategory_NetSocketChaCha20Poly1305, 0x3Cu)))
  {
    LogPrintF((uint64_t)&gLogCategory_NetSocketChaCha20Poly1305, (uint64_t)"OSStatus _NetSocketTransportRead(NetSocketRef, size_t, size_t, void *, size_t *, int, int32_t)", 0x3Cu, (uint64_t)"### NSTCP verify failed: %#m\n", v28, v29, v30, v31, v32);
  }
LABEL_57:
  v15 = v41;
LABEL_42:
  if (a5)
    *a5 = v15;
  return v32;
}

uint64_t _NetSocketTransportWrite(uint64_t a1, unint64_t a2, unint64_t a3, unsigned int a4)
{
  unint64_t v5[3];

  v5[2] = *MEMORY[0x1E0C80C00];
  v5[0] = a2;
  v5[1] = a3;
  return _NetSocketTransportWriteV(a1, v5, 1, a4);
}

uint64_t _NetSocketTransportWriteV(uint64_t a1, unint64_t *a2, int a3, unsigned int a4)
{
  unint64_t *v4;
  uint64_t v5;
  unsigned int *v6;
  int8x16_t *v7;
  unint64_t v8;
  unint64_t v9;
  int32x4_t *v10;
  _DWORD *v11;
  uint64_t v12;
  int8x16_t *v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t *v16;
  int8x16_t *v17;
  int8x16_t *v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t *v21;
  BOOL v22;
  unint64_t v23;
  char *v24;
  unint64_t v26;
  __int16 v27;
  uint64_t result;
  char *v29;
  unsigned int *v32;
  _DWORD *v33;
  int8x16_t *v34;
  uint64_t v35;
  __int128 v36;
  uint64_t v37;

  v37 = *MEMORY[0x1E0C80C00];
  if (*(_DWORD *)a1 != 1853058915)
    return 4294960556;
  if (*(_BYTE *)(a1 + 8))
    return 4294960573;
  if ((*(_DWORD *)(a1 + 4) & 0x80000000) != 0)
    return 4294960551;
  v4 = a2;
  v5 = *(_QWORD *)(a1 + 96);
  v6 = (unsigned int *)(v5 + 16976);
  v7 = (int8x16_t *)(v5 + 16978);
  v8 = v5 + 33362;
  v9 = (unint64_t)&a2[2 * a3];
  v10 = (int32x4_t *)(v5 + 16680);
  v33 = (_DWORD *)(v5 + 16936);
  v34 = (int8x16_t *)(v5 + 16978);
  v11 = (_DWORD *)(v5 + 16968);
  v35 = v5;
  v32 = (unsigned int *)(v5 + 16816);
  v29 = (char *)(v5 + 16976);
  while (1)
  {
    if ((unint64_t)v4 >= v9)
      return 0;
    v12 = 0;
    v13 = v7;
    v14 = (unint64_t)v4;
    while (1)
    {
      v15 = *(_QWORD *)(v14 + 8);
      if (v8 - (unint64_t)v13 < v15)
        break;
      v12 += v15;
      v13 = (int8x16_t *)((char *)v13 + v15);
      v14 += 16;
      if (v14 >= v9)
      {
        if (!v12)
          return 0;
        goto LABEL_12;
      }
    }
    v12 += v8 - (_QWORD)v13;
    if (!v12)
      return 0;
LABEL_12:
    chacha20_poly1305_init_64x64(v10, v33, v11);
    *(_WORD *)v6 = v12;
    poly1305_update(v32, v6, 2uLL);
    *(_QWORD *)(v35 + 16912) += 2;
    v16 = v4 + 1;
    v17 = v7;
    while (1)
    {
      v4 = v16 - 1;
      v18 = (int8x16_t *)*(v16 - 1);
      v19 = v8 - (_QWORD)v17;
      if (v8 - (unint64_t)v17 < *v16)
        break;
      v20 = chacha20_poly1305_encrypt((uint64_t)v10, v18, *v16, v7);
      v21 = v16 + 2;
      v17 = (int8x16_t *)((char *)v17 + *v16);
      v7 = (int8x16_t *)((char *)v7 + v20);
      v22 = (unint64_t)(v16 + 1) >= v9;
      v16 += 2;
      if (v22)
      {
        v4 = v21 - 1;
        goto LABEL_18;
      }
    }
    v23 = chacha20_poly1305_encrypt((uint64_t)v10, v18, v8 - (_QWORD)v17, v7);
    *(v16 - 1) += v19;
    *v16 -= v19;
    v7 = (int8x16_t *)((char *)v7 + v23);
LABEL_18:
    v24 = &v7->i8[chacha20_poly1305_final((unsigned int *)v10, v7, (uint64_t)&v36)];
    v7 = v34;
    if (v24 != &v34->i8[v12] || (unint64_t)v24 > v8)
      return 4294960534;
    v26 = 0;
    *(_OWORD *)v24 = v36;
    do
    {
      v27 = (*((_BYTE *)v11 + v26))++ + 1;
      if ((v27 & 0x100) == 0)
        break;
      v22 = v26++ >= 7;
    }
    while (!v22);
    v6 = (unsigned int *)v29;
    result = NetSocket_WriteInternal(a1, v29, v24 - v29 + 16, a4);
    if ((_DWORD)result)
      return result;
  }
}

void _NetSocketTransportFree(uint64_t a1)
{
  void *v1;

  v1 = *(void **)(a1 + 96);
  if (v1)
  {
    memset_s(*(void **)(a1 + 96), 0x8278uLL, 0, 0x8278uLL);
    free(v1);
    *(_QWORD *)(a1 + 96) = 0;
  }
}

void NetSocketGCM_Configure(_QWORD *a1, void *a2, __n128 *a3, void *a4, __n128 *a5)
{
  _CCCryptor **v10;
  _CCCryptor **v11;
  int v12;
  int v13;

  v10 = (_CCCryptor **)a1[12];
  if (!v10)
  {
    v11 = (_CCCryptor **)malloc_type_calloc(1uLL, 0x40040uLL, 0x1030040D575C2F1uLL);
    if (!v11)
      return;
    v10 = v11;
    a1[12] = v11;
  }
  AES_GCM_Final(v10);
  AES_GCM_InitEx(v10, 1u, a2, a3);
  if (!v12)
  {
    AES_GCM_Final(v10 + 3);
    AES_GCM_InitEx(v10 + 3, 0, a4, a5);
    if (!v13)
    {
      a1[3] = _NetSocketGCM_Read;
      a1[4] = _NetSocketGCM_Write;
      a1[5] = _NetSocketGCM_WriteV;
      a1[6] = NetSocket_WriteFileSlow;
      a1[7] = _NetSocketGCM_Free;
    }
  }
}

uint64_t _NetSocketGCM_Read(uint64_t a1, size_t a2, size_t a3, char *__dst, size_t *a5, uint64_t a6, unsigned int a7)
{
  char *v9;
  size_t v10;
  uint64_t v11;
  const void *v12;
  size_t v13;
  size_t v14;
  _QWORD *v16;
  const void *v17;
  size_t v18;
  size_t v19;
  BOOL v20;
  uint64_t v21;
  uint64_t result;
  size_t v23;
  uint64_t v24;
  uint64_t v25;
  size_t v26;
  unsigned int __dsta;
  char v30[16];
  uint64_t v31;

  v31 = *MEMORY[0x1E0C80C00];
  if (*(_DWORD *)a1 != 1853058915)
  {
    v14 = 0;
    result = 4294960556;
    goto LABEL_42;
  }
  if (*(_BYTE *)(a1 + 8))
  {
    v14 = 0;
    result = 4294960573;
    goto LABEL_42;
  }
  if ((*(_DWORD *)(a1 + 4) & 0x80000000) != 0)
  {
    v14 = 0;
    result = 4294960551;
    goto LABEL_42;
  }
  v9 = __dst;
  v10 = a3;
  v11 = *(_QWORD *)(a1 + 96);
  v12 = *(const void **)(a1 + 64);
  v13 = *(_QWORD *)(a1 + 72) - (_QWORD)v12;
  if (v13)
  {
    if (v13 >= a3)
      v14 = a3;
    else
      v14 = *(_QWORD *)(a1 + 72) - (_QWORD)v12;
    memcpy(__dst, v12, v14);
    *(_QWORD *)(a1 + 64) += v14;
    v10 -= v14;
    if (v14 >= a2 || v10 == 0)
      goto LABEL_41;
    v9 += v14;
  }
  else
  {
    v14 = 0;
  }
  v16 = (_QWORD *)(v11 + 262192);
  v17 = *(const void **)(v11 + 262192);
  v18 = *(_QWORD *)(v11 + 262200) - (_QWORD)v17;
  if (v18)
  {
    if (v18 >= v10)
      v19 = v10;
    else
      v19 = *(_QWORD *)(v11 + 262200) - (_QWORD)v17;
    memcpy(v9, v17, v19);
    *v16 += v19;
    v14 += v19;
    v10 -= v19;
    if (v10)
      v20 = v14 >= a2;
    else
      v20 = 1;
    if (!v20)
    {
      v9 += v19;
      goto LABEL_24;
    }
LABEL_41:
    result = 0;
    goto LABEL_42;
  }
  if (!v10)
    goto LABEL_41;
LABEL_24:
  __dsta = 0;
  v21 = v11 + 48;
  while (1)
  {
    result = NetSocket_ReadInternal(a1, 4uLL, 4, (char *)&__dsta, 0, 0, a7);
    if ((_DWORD)result)
      break;
    v23 = bswap32(__dsta);
    if (v23 > 0x40000)
    {
      result = 4294960553;
      break;
    }
    result = NetSocket_ReadInternal(a1, v23, v23, (char *)(v11 + 48), 0, 0, a7);
    if ((_DWORD)result)
      break;
    result = NetSocket_ReadInternal(a1, 0x10uLL, 16, v30, 0, 0, a7);
    if ((_DWORD)result)
      break;
    result = AES_GCM_InitMessage(v11, 0);
    if ((_DWORD)result)
      break;
    result = CCCryptorGCMAddAAD();
    if ((_DWORD)result)
      break;
    v24 = *(_QWORD *)v11;
    v25 = v11 + 48;
    v26 = v10 - v23;
    if (v10 >= v23)
    {
      result = MEMORY[0x18D78D3A4](v24, v25, v23, v9);
      if ((_DWORD)result)
        break;
      v14 += v23;
    }
    else
    {
      result = MEMORY[0x18D78D3A4](v24, v25, v10, v9);
      if ((_DWORD)result)
        break;
      result = MEMORY[0x18D78D3A4](*(_QWORD *)v11, v21 + v10, v23 - v10, v21 + v10);
      if ((_DWORD)result)
      {
        v14 += v10;
        break;
      }
      v26 = 0;
      *v16 = v21 + v10;
      *(_QWORD *)(v11 + 262200) = v21 + v23;
      v23 = v10;
      v14 += v10;
    }
    result = CCCryptorGCMFinalize();
    if (!(_DWORD)result && v14 < a2)
    {
      v9 += v23;
      v10 = v26;
      if (v26)
        continue;
    }
    break;
  }
LABEL_42:
  if (a5)
    *a5 = v14;
  return result;
}

uint64_t _NetSocketGCM_Write(uint64_t a1, uint64_t a2, uint64_t a3, unsigned int a4)
{
  _QWORD v5[3];

  v5[2] = *MEMORY[0x1E0C80C00];
  v5[0] = a2;
  v5[1] = a3;
  return _NetSocketGCM_WriteV(a1, v5, 1, a4);
}

uint64_t _NetSocketGCM_WriteV(uint64_t a1, _QWORD *a2, int a3, unsigned int a4)
{
  uint64_t v4;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t *v10;
  unint64_t v11;
  unsigned int v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t result;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  BOOL v23;
  unsigned int v24;
  char v25;
  iovec v26;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  uint64_t v30;
  uint64_t v31;

  v31 = *MEMORY[0x1E0C80C00];
  v4 = *(_QWORD *)(a1 + 96);
  v24 = 0;
  if (*(_DWORD *)a1 != 1853058915)
    return 4294960556;
  if (*(_BYTE *)(a1 + 8))
    return 4294960573;
  if ((*(_DWORD *)(a1 + 4) & 0x80000000) != 0)
    return 4294960551;
  v7 = a2;
  v8 = v4 + 48;
  v9 = v4 + 262192;
  v10 = (uint64_t *)(v4 + 24);
  v11 = (unint64_t)&a2[2 * a3];
  while ((unint64_t)v7 < v11)
  {
    v12 = 0;
    v13 = v8;
    v14 = (unint64_t)v7;
    while (1)
    {
      v15 = *(_QWORD *)(v14 + 8);
      if (v9 - v13 < v15)
        break;
      v12 += v15;
      v13 += v15;
      v14 += 16;
      if (v14 >= v11)
        goto LABEL_11;
    }
    v12 += v9 - v13;
LABEL_11:
    result = AES_GCM_InitMessage((uint64_t)v10, 0);
    if (!(_DWORD)result)
    {
      v24 = bswap32(v12);
      result = CCCryptorGCMAddAAD();
      if (!(_DWORD)result)
      {
        v17 = v7 + 1;
        v18 = v8;
        while (1)
        {
          v7 = v17 - 1;
          v19 = *(v17 - 1);
          v20 = v9 - v18;
          v21 = *v10;
          if ((unint64_t)(v9 - v18) < *v17)
            break;
          result = MEMORY[0x18D78D3B0](v21, v19);
          if ((_DWORD)result)
            return result;
          v22 = v17 + 2;
          v18 += *v17;
          v23 = (unint64_t)(v17 + 1) >= v11;
          v17 += 2;
          if (v23)
          {
            v7 = v22 - 1;
            goto LABEL_21;
          }
        }
        result = MEMORY[0x18D78D3B0](v21, v19, v9 - v18, v18);
        if ((_DWORD)result)
          return result;
        *(v17 - 1) += v20;
        *v17 -= v20;
        v18 = v9;
LABEL_21:
        result = CCCryptorGCMFinalize();
        if (!(_DWORD)result)
        {
          v26.iov_base = &v24;
          v26.iov_len = 4;
          v27 = v8;
          v28 = v18 - v8;
          v29 = &v25;
          v30 = 16;
          result = NetSocket_WriteVInternal(a1, &v26, 3, a4);
          if (!(_DWORD)result)
            continue;
        }
      }
    }
    return result;
  }
  return 0;
}

void _NetSocketGCM_Free(uint64_t a1)
{
  _CCCryptor **v1;

  v1 = *(_CCCryptor ***)(a1 + 96);
  if (v1)
  {
    AES_GCM_Final(*(_CCCryptor ***)(a1 + 96));
    AES_GCM_Final(v1 + 3);
    free(v1);
    *(_QWORD *)(a1 + 96) = 0;
  }
}

uint64_t NetSocketTLS_Configure(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  CFTypeRef *v6;
  CFTypeRef *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  SSLContext *v12;
  uint64_t v13;
  SSLContext *v15;
  SSLCipherSuite ciphers[2];

  v6 = (CFTypeRef *)a1[12];
  if (!v6)
  {
    v7 = (CFTypeRef *)malloc_type_calloc(1uLL, 0x10uLL, 0x10200405F07FB98uLL);
    if (!v7)
    {
      v13 = 4294960568;
      goto LABEL_11;
    }
    v6 = v7;
    a1[12] = v7;
  }
  if (*v6)
    CFRelease(*v6);
  v12 = SSLCreateContext(0, (SSLProtocolSide)(a4 == 0), kSSLStreamType);
  *v6 = v12;
  if (v12)
  {
    v13 = SSLSetConnection(v12, a1);
    if (!(_DWORD)v13)
    {
      v13 = SSLSetIOFuncs((SSLContextRef)*v6, (SSLReadFunc)_TLSRead, (SSLWriteFunc)_TLSWrite);
      if (!(_DWORD)v13)
      {
        v13 = SSLSetProtocolVersionMin((SSLContextRef)*v6, kTLSProtocol12);
        if (!(_DWORD)v13)
        {
          v13 = SSLSetPSKSharedSecret();
          if (!(_DWORD)v13)
          {
            if (!a4 || (v13 = SSLSetPSKIdentity(), !(_DWORD)v13))
            {
              v15 = (SSLContext *)*v6;
              *(_DWORD *)ciphers = 11403432;
              v13 = SSLSetEnabledCiphers(v15, ciphers, 2uLL);
              if (!(_DWORD)v13)
              {
                a1[3] = _NetSocketTLSRead;
                a1[4] = _NetSocketTLSWrite;
                a1[5] = NetSocket_WriteVSlow;
                a1[6] = NetSocket_WriteFileSlow;
                a1[7] = _NetSocketTLSFree;
                return v13;
              }
            }
          }
        }
      }
    }
  }
  else
  {
    v13 = 4294960596;
  }
LABEL_11:
  if (gLogCategory_NetSocketTLS <= 60
    && (gLogCategory_NetSocketTLS != -1 || _LogCategory_Initialize((uint64_t)&gLogCategory_NetSocketTLS, 0x3Cu)))
  {
    LogPrintF((uint64_t)&gLogCategory_NetSocketTLS, (uint64_t)"OSStatus NetSocketTLS_Configure(NetSocketRef, const void *, size_t, const void *, size_t)", 0x3Cu, (uint64_t)"### Configure TLS failed: %#m\n", v8, v9, v10, v11, v13);
  }
  _NetSocketTLSFree((uint64_t)a1);
  return v13;
}

uint64_t _TLSRead(uint64_t a1, char *__dst, uint64_t *a3)
{
  uint64_t result;

  LODWORD(result) = NetSocket_ReadInternal(a1, 1uLL, *a3, __dst, (size_t *)a3, 0, *(_DWORD *)(a1 + 104));
  if ((_DWORD)result == 35)
    return 4294957493;
  else
    return result;
}

uint64_t _TLSWrite(uint64_t a1, char *a2, size_t *a3)
{
  uint64_t result;

  LODWORD(result) = NetSocket_WriteInternal(a1, a2, *a3, *(_DWORD *)(a1 + 104));
  if ((_DWORD)result == 35)
    return 4294957493;
  else
    return result;
}

uint64_t _NetSocketTLSRead(uint64_t a1, int a2, size_t dataLength, void *data, size_t *processed, uint64_t a6, int a7)
{
  uint64_t v7;
  uint64_t result;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;

  if (*(_DWORD *)a1 != 1853058915)
    return 4294960556;
  v7 = *(_QWORD *)(a1 + 96);
  if (!v7)
    return 4294960551;
  if (*(_BYTE *)(a1 + 8))
    return 4294960573;
  if ((*(_DWORD *)(a1 + 4) & 0x80000000) != 0)
    return 4294960551;
  *(_DWORD *)(a1 + 104) = a7;
  if (!*(_BYTE *)(v7 + 8))
  {
    result = SSLHandshake(*(SSLContextRef *)v7);
    if ((_DWORD)result)
      return result;
    *(_BYTE *)(v7 + 8) = 1;
    if (gLogCategory_NetSocketTLS <= 20
      && (gLogCategory_NetSocketTLS != -1 || _LogCategory_Initialize((uint64_t)&gLogCategory_NetSocketTLS, 0x14u)))
    {
      LogPrintF((uint64_t)&gLogCategory_NetSocketTLS, (uint64_t)"OSStatus _NetSocketTLSRead(NetSocketRef, size_t, size_t, void *, size_t *, int, int32_t)", 0x14u, (uint64_t)"TLS handshake completed for read\n", v12, v13, v14, v15, v20);
    }
  }
  result = SSLRead(*(SSLContextRef *)v7, data, dataLength, processed);
  if (!(_DWORD)result)
  {
    if (gLogCategory_NetSocketTLS > 9)
      return 0;
    if (gLogCategory_NetSocketTLS != -1
      || (result = _LogCategory_Initialize((uint64_t)&gLogCategory_NetSocketTLS, 9u), (_DWORD)result))
    {
      LogPrintF((uint64_t)&gLogCategory_NetSocketTLS, (uint64_t)"OSStatus _NetSocketTLSRead(NetSocketRef, size_t, size_t, void *, size_t *, int, int32_t)", 9u, (uint64_t)"TLS read %zu bytes\n", v16, v17, v18, v19, *processed);
      return 0;
    }
  }
  return result;
}

uint64_t _NetSocketTLSWrite(uint64_t a1, void *data, size_t dataLength, int a4)
{
  uint64_t v4;
  uint64_t result;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  size_t processed;

  if (*(_DWORD *)a1 != 1853058915)
    return 4294960556;
  v4 = *(_QWORD *)(a1 + 96);
  if (!v4)
    return 4294960551;
  if (*(_BYTE *)(a1 + 8))
    return 4294960573;
  if ((*(_DWORD *)(a1 + 4) & 0x80000000) != 0)
    return 4294960551;
  processed = 0;
  *(_DWORD *)(a1 + 104) = a4;
  if (!*(_BYTE *)(v4 + 8))
  {
    result = SSLHandshake(*(SSLContextRef *)v4);
    if ((_DWORD)result)
      return result;
    *(_BYTE *)(v4 + 8) = 1;
    if (gLogCategory_NetSocketTLS <= 20
      && (gLogCategory_NetSocketTLS != -1 || _LogCategory_Initialize((uint64_t)&gLogCategory_NetSocketTLS, 0x14u)))
    {
      LogPrintF((uint64_t)&gLogCategory_NetSocketTLS, (uint64_t)"OSStatus _NetSocketTLSWrite(NetSocketRef, const void *, size_t, int32_t)", 0x14u, (uint64_t)"TLS handshake completed for write\n", v8, v9, v10, v11, v16);
    }
  }
  result = SSLWrite(*(SSLContextRef *)v4, data, dataLength, &processed);
  if (!(_DWORD)result)
  {
    if (gLogCategory_NetSocketTLS > 9)
      return 0;
    if (gLogCategory_NetSocketTLS != -1
      || (result = _LogCategory_Initialize((uint64_t)&gLogCategory_NetSocketTLS, 9u), (_DWORD)result))
    {
      LogPrintF((uint64_t)&gLogCategory_NetSocketTLS, (uint64_t)"OSStatus _NetSocketTLSWrite(NetSocketRef, const void *, size_t, int32_t)", 9u, (uint64_t)"TLS wrote %zu bytes\n", v12, v13, v14, v15, processed);
      return 0;
    }
  }
  return result;
}

void _NetSocketTLSFree(uint64_t a1)
{
  CFTypeRef *v1;

  v1 = *(CFTypeRef **)(a1 + 96);
  if (v1)
  {
    if (*v1)
      CFRelease(*v1);
    free(v1);
    *(_QWORD *)(a1 + 96) = 0;
  }
}

uint64_t NetTransportChaCha20Poly1305Configure(_QWORD *a1, int *a2, __int128 *a3, _QWORD *a4, __int128 *a5, _QWORD *a6)
{
  _QWORD *v12;
  int *v13;
  __int128 v14;
  __int128 v15;
  uint64_t v16;

  v12 = malloc_type_calloc(1uLL, 0x46C8uLL, 0x103004090BEDF2EuLL);
  if (!v12)
    return 4294960568;
  *(_DWORD *)v12 = -1;
  v13 = &gLogCategory_NetTransportChaCha20Poly1305;
  if (a2)
    v13 = a2;
  v12[1] = v13;
  *((_DWORD *)v12 + 4) = 1;
  v14 = *a3;
  *((_OWORD *)v12 + 1046) = a3[1];
  *((_OWORD *)v12 + 1045) = v14;
  if (a4)
    v12[2094] = *a4;
  v15 = *a5;
  *((_OWORD *)v12 + 1131) = a5[1];
  *((_OWORD *)v12 + 1130) = v15;
  if (a6)
    v12[2264] = *a6;
  v16 = 0;
  *a1 = v12;
  a1[1] = _NetTransportInitialize;
  a1[2] = _NetTransportFinalize;
  a1[3] = _NetTransportRead;
  a1[4] = _NetTransportWriteV;
  return v16;
}

uint64_t _NetTransportInitialize(int a1, _DWORD *a2)
{
  *a2 = a1;
  return 0;
}

void _NetTransportFinalize(void *a1)
{
  if (a1)
  {
    memset_s(a1, 0x46C8uLL, 0, 0x46C8uLL);
    free(a1);
  }
}

uint64_t _NetTransportRead(char *__dst, size_t a2, _QWORD *a3, uint64_t a4)
{
  char *v6;
  uint64_t *v7;
  int8x16_t *v8;
  int8x16_t *v9;
  int32x4_t *v10;
  _DWORD *v11;
  int8x16_t *v12;
  size_t v13;
  size_t v14;
  int v15;
  unint64_t v16;
  unsigned int Data;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  int64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  __int16 v31;
  unsigned int *v38;
  _DWORD *v39;
  unsigned int *v40;
  unsigned int v41;

  v6 = __dst;
  v7 = (uint64_t *)(a4 + 32);
  v8 = (int8x16_t *)(a4 + 42);
  v9 = (int8x16_t *)(a4 + 16426);
  v10 = (int32x4_t *)(a4 + 16464);
  v39 = (_DWORD *)(a4 + 16720);
  v40 = (unsigned int *)(a4 + 40);
  v11 = (_DWORD *)(a4 + 16752);
  v12 = *(int8x16_t **)(a4 + 16448);
  v38 = (unsigned int *)(a4 + 16600);
  while (1)
  {
    while (1)
    {
      v13 = *(_QWORD *)(a4 + 16456) - (_QWORD)v12;
      if (v13)
      {
        if (v13 >= a2)
          v14 = a2;
        else
          v14 = *(_QWORD *)(a4 + 16456) - (_QWORD)v12;
        memcpy(v6, v12, v14);
        v12 = (int8x16_t *)(*(_QWORD *)(a4 + 16448) + v14);
        *(_QWORD *)(a4 + 16448) = v12;
        v6 += v14;
        a2 -= v14;
      }
      if (!a2)
      {
        LODWORD(v28) = 0;
        goto LABEL_26;
      }
      v15 = *(_DWORD *)(a4 + 16);
      if (v15 == 1)
      {
        Data = SocketReadData(*(_DWORD *)a4, (uint64_t)v40, 2uLL, v7);
        if (Data)
          goto LABEL_37;
        v16 = *(unsigned __int16 *)(a4 + 40);
        *(_QWORD *)(a4 + 24) = v16;
        if (v16 <= 0x4000)
        {
          *(_QWORD *)(a4 + 32) = 0;
          *(_DWORD *)(a4 + 16) = 2;
          goto LABEL_15;
        }
        if (gLogCategory_NetTransportChaCha20Poly1305 <= 60)
        {
          if (gLogCategory_NetTransportChaCha20Poly1305 == -1)
          {
            if (!_LogCategory_Initialize((uint64_t)&gLogCategory_NetTransportChaCha20Poly1305, 0x3Cu))
              goto LABEL_52;
            v16 = *(_QWORD *)(a4 + 24);
          }
          LogPrintF((uint64_t)&gLogCategory_NetTransportChaCha20Poly1305, (uint64_t)"OSStatus _NetTransportRead(void *, size_t, size_t *, void *)", 0x3Cu, (uint64_t)"### NTCP bad size: %zu / %H\n", v18, v19, v20, v21, v16);
        }
LABEL_52:
        LODWORD(v28) = -6743;
        goto LABEL_26;
      }
      if (v15 == 3)
        break;
      if (v15 == 2)
      {
        v16 = *(_QWORD *)(a4 + 24);
LABEL_15:
        Data = SocketReadData(*(_DWORD *)a4, (uint64_t)v8, v16, v7);
        if (Data)
          goto LABEL_37;
        *(_QWORD *)(a4 + 32) = 0;
        *(_DWORD *)(a4 + 16) = 3;
        break;
      }
    }
    Data = SocketReadData(*(_DWORD *)a4, (uint64_t)v9, 0x10uLL, v7);
    v41 = Data;
    if (Data)
    {
LABEL_37:
      LODWORD(v28) = Data;
      goto LABEL_26;
    }
    chacha20_poly1305_init_64x64(v10, v39, v11);
    poly1305_update(v38, v40, 2uLL);
    *(_QWORD *)(a4 + 16696) += 2;
    v22 = chacha20_poly1305_decrypt((uint64_t)v10, v8, *(_QWORD *)(a4 + 24), v8);
    v23 = chacha20_poly1305_verify((unsigned int *)v10, (int8x16_t *)(a4 + v22 + 42), v9, (int *)&v41);
    v28 = v41;
    if (v41)
      break;
    v29 = v23 + v22;
    if (v23 + v22 != *(_QWORD *)(a4 + 24))
    {
      if (gLogCategory_NetTransportChaCha20Poly1305 <= 60
        && (gLogCategory_NetTransportChaCha20Poly1305 != -1
         || _LogCategory_Initialize((uint64_t)&gLogCategory_NetTransportChaCha20Poly1305, 0x3Cu)))
      {
        LogPrintF((uint64_t)&gLogCategory_NetTransportChaCha20Poly1305, (uint64_t)"OSStatus _NetTransportRead(void *, size_t, size_t *, void *)", 0x3Cu, (uint64_t)"### NTCP verify len failed: %zu vs %zu\n", v24, v25, v26, v27, v29);
      }
      LODWORD(v28) = -6762;
      goto LABEL_26;
    }
    v30 = 0;
    do
    {
      v31 = (*((_BYTE *)v11 + v30))++ + 1;
      if ((v31 & 0x100) == 0)
        break;
    }
    while (v30++ < 7);
    *(_QWORD *)(a4 + 16448) = v8;
    *(_QWORD *)(a4 + 16456) = (char *)v8 + v29;
    *(_QWORD *)(a4 + 32) = 0;
    *(_DWORD *)(a4 + 16) = 1;
    v12 = v8;
  }
  if (gLogCategory_NetTransportChaCha20Poly1305 <= 60
    && (gLogCategory_NetTransportChaCha20Poly1305 != -1
     || _LogCategory_Initialize((uint64_t)&gLogCategory_NetTransportChaCha20Poly1305, 0x3Cu)))
  {
    LogPrintF((uint64_t)&gLogCategory_NetTransportChaCha20Poly1305, (uint64_t)"OSStatus _NetTransportRead(void *, size_t, size_t *, void *)", 0x3Cu, (uint64_t)"### NTCP verify failed: %#m\n", v24, v25, v26, v27, v28);
  }
LABEL_26:
  if (a3)
    *a3 = v6 - __dst;
  if ((_DWORD)v28 != -6753 && (_DWORD)v28 != 35 || v6 == __dst)
    return v28;
  else
    return 0;
}

uint64_t _NetTransportWriteV(const iovec **a1, int *a2, int32x4_t *a3)
{
  unsigned int *v4;
  int8x16_t *v5;
  unint64_t v6;
  const iovec *v7;
  unint64_t v8;
  int32x4_t *v9;
  int32x4_t *v10;
  unsigned int *v11;
  unsigned int *v12;
  int64_t v13;
  uint64_t result;
  uint64_t v15;
  int8x16_t *v16;
  const iovec *v17;
  size_t iov_len;
  unint64_t v19;
  unint64_t *p_iov_len;
  int8x16_t *v21;
  unint64_t v22;
  int8x16_t *v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t *v26;
  BOOL v27;
  unint64_t v28;
  __int8 *v29;
  unint64_t v31;
  __int16 v32;
  int32x4_t *v35;
  int8x16_t *v36;
  unsigned int *v37;
  unsigned int *v38;
  int32x4_t *__s;
  const iovec *v40;
  int v41;
  __int128 v42;
  unsigned int *v43;
  int64_t v44;
  uint64_t v45;

  v45 = *MEMORY[0x1E0C80C00];
  v4 = &a3[1047].u32[2];
  v5 = (int8x16_t *)((char *)&a3[1047].u64[1] + 2);
  v6 = (unint64_t)&a3[1111].u64[1] + 2;
  v41 = 0;
  v7 = *a1;
  v8 = (unint64_t)&(*a1)[*a2];
  __s = a3 + 1114;
  v9 = a3 + 1130;
  v10 = a3 + 1132;
  v11 = (unsigned int *)a3[1113].i64[0];
  v37 = &a3[1047].u32[2];
  v38 = &a3[1122].u32[2];
  v35 = a3 + 1130;
  v36 = (int8x16_t *)((char *)&a3[1047].u64[1] + 2);
  while (1)
  {
    while (1)
    {
      v12 = (unsigned int *)a3[1113].i64[1];
      v13 = (char *)v12 - (char *)v11;
      if (v12 == v11)
        break;
      v43 = v11;
      v44 = (char *)v12 - (char *)v11;
      v40 = (const iovec *)&v43;
      v41 = 1;
      result = SocketWriteData(a3->i32[0], &v40, &v41);
      v11 = (unsigned int *)(a3[1113].i64[0] + v13 - v44);
      a3[1113].i64[0] = (uint64_t)v11;
      if ((_DWORD)result)
        goto LABEL_33;
    }
    if ((unint64_t)v7 >= v8)
    {
      v15 = 0;
      v17 = v7;
LABEL_11:
      v40 = v17;
      if (!v15)
      {
LABEL_32:
        result = 0;
        goto LABEL_33;
      }
    }
    else
    {
      v15 = 0;
      v16 = v5;
      v17 = v7;
      while (1)
      {
        iov_len = v17->iov_len;
        if (v6 - (unint64_t)v16 < iov_len)
          break;
        v15 += iov_len;
        v16 = (int8x16_t *)((char *)v16 + iov_len);
        if ((unint64_t)++v17 >= v8)
          goto LABEL_11;
      }
      v40 = v17;
      v15 += v6 - (_QWORD)v16;
      if (!v15)
        goto LABEL_32;
    }
    chacha20_poly1305_init_64x64(__s, v9, v10);
    *(_WORD *)v4 = v15;
    poly1305_update(v38, v4, 2uLL);
    a3[1128].i64[1] += 2;
    if ((unint64_t)v7 >= v8)
    {
      v21 = v5;
    }
    else
    {
      v19 = v6;
      p_iov_len = &v7->iov_len;
      v21 = v5;
      while (1)
      {
        v22 = v8;
        v7 = (const iovec *)(p_iov_len - 1);
        v23 = (int8x16_t *)*(p_iov_len - 1);
        v24 = v19 - (_QWORD)v5;
        if (v19 - (unint64_t)v5 < *p_iov_len)
          break;
        v25 = chacha20_poly1305_encrypt((uint64_t)__s, v23, *p_iov_len, v21);
        v26 = p_iov_len + 2;
        v5 = (int8x16_t *)((char *)v5 + *p_iov_len);
        v21 = (int8x16_t *)((char *)v21 + v25);
        v8 = v22;
        v27 = (unint64_t)(p_iov_len + 1) >= v22;
        p_iov_len += 2;
        if (v27)
        {
          v7 = (const iovec *)(v26 - 1);
          goto LABEL_22;
        }
      }
      v28 = chacha20_poly1305_encrypt((uint64_t)__s, v23, v19 - (_QWORD)v5, v21);
      *(p_iov_len - 1) += v24;
      *p_iov_len -= v24;
      v21 = (int8x16_t *)((char *)v21 + v28);
      v8 = v22;
LABEL_22:
      v5 = v36;
      v4 = v37;
      v6 = v19;
      v9 = v35;
    }
    v29 = &v21->i8[chacha20_poly1305_final((unsigned int *)__s, v21, (uint64_t)&v42)];
    if (v29 != &v5->i8[v15] || (unint64_t)v29 > v6)
      break;
    v31 = 0;
    *(_OWORD *)v29 = v42;
    do
    {
      v32 = v10->i8[v31]++ + 1;
      if ((v32 & 0x100) == 0)
        break;
      v27 = v31++ >= 7;
    }
    while (!v27);
    a3[1113].i64[0] = (uint64_t)v4;
    a3[1113].i64[1] = (uint64_t)(v29 + 16);
    v11 = v4;
  }
  result = 4294960534;
LABEL_33:
  *a1 = v7;
  *a2 = (v8 - (unint64_t)v7) >> 4;
  return result;
}

uint64_t NetTransportGCMConfigure(_CCCryptor ***a1, int *a2, void *a3, __n128 *a4, void *a5, __n128 *a6)
{
  _CCCryptor **v12;
  _CCCryptor **v13;
  int *v14;
  _CCCryptor **v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  v12 = (_CCCryptor **)malloc_type_calloc(1uLL, 0x800A8uLL, 0x1030040F23A3433uLL);
  if (!v12)
    return 4294960568;
  v13 = v12;
  *(_DWORD *)v12 = -1;
  v14 = &gLogCategory_NetTransportGCM;
  if (a2)
    v14 = a2;
  v12[1] = (_CCCryptor *)v14;
  *((_DWORD *)v12 + 4) = 1;
  v15 = v12 + 32778;
  AES_GCM_InitEx(v12 + 32778, 1u, a3, a4);
  v17 = v16;
  if ((_DWORD)v16 || (AES_GCM_InitEx(v13 + 65554, 0, a5, a6), v17 = v18, (_DWORD)v18))
  {
    AES_GCM_Final(v15);
    AES_GCM_Final(v13 + 65554);
    free(v13);
  }
  else
  {
    *a1 = v13;
    a1[1] = (_CCCryptor **)_NetTransportInitialize_11594;
    a1[2] = (_CCCryptor **)_NetTransportFinalize_11595;
    a1[3] = (_CCCryptor **)_NetTransportRead_11596;
    a1[4] = (_CCCryptor **)_NetTransportWriteV_11597;
  }
  return v17;
}

uint64_t _NetTransportInitialize_11594(int a1, _DWORD *a2)
{
  *a2 = a1;
  return 0;
}

void _NetTransportFinalize_11595(_CCCryptor **a1)
{
  if (a1)
  {
    AES_GCM_Final(a1 + 32778);
    AES_GCM_Final(a1 + 65554);
    free(a1);
  }
}

uint64_t _NetTransportRead_11596(char *__dst, size_t a2, _QWORD *a3, uint64_t a4)
{
  char *v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  const void *i;
  size_t v14;
  size_t v15;
  int v16;
  unint64_t v17;
  int Data;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  _QWORD *v27;

  v6 = __dst;
  v7 = (uint64_t *)(a4 + 262208);
  v8 = a4 + 40;
  v9 = (uint64_t *)(a4 + 32);
  v10 = a4 + 44;
  v11 = a4 + 262188;
  v12 = (_QWORD *)(a4 + 262224);
  for (i = *(const void **)(a4 + 262208); ; i = (const void *)v10)
  {
    do
    {
      v14 = v7[1] - (_QWORD)i;
      if (v14)
      {
        if (v14 >= a2)
          v15 = a2;
        else
          v15 = v7[1] - (_QWORD)i;
        memcpy(v6, i, v15);
        i = (const void *)(*v7 + v15);
        *v7 = (uint64_t)i;
        v6 += v15;
        a2 -= v15;
      }
      if (!a2)
      {
        LODWORD(v25) = 0;
        goto LABEL_25;
      }
      v16 = *(_DWORD *)(a4 + 16);
      if (v16 == 1)
      {
        Data = SocketReadData(*(_DWORD *)a4, v8, 4uLL, v9);
        if (Data)
          goto LABEL_23;
        v17 = bswap32(*(_DWORD *)(a4 + 40));
        *(_QWORD *)(a4 + 24) = v17;
        if (v17 > 0x40000)
        {
          LODWORD(v25) = -6743;
          goto LABEL_25;
        }
        *(_QWORD *)(a4 + 32) = 0;
        *(_DWORD *)(a4 + 16) = 2;
        goto LABEL_15;
      }
      if (v16 == 3)
        goto LABEL_17;
    }
    while (v16 != 2);
    v17 = *(_QWORD *)(a4 + 24);
LABEL_15:
    Data = SocketReadData(*(_DWORD *)a4, v10, v17, v9);
    if (Data)
      goto LABEL_23;
    *(_QWORD *)(a4 + 32) = 0;
    *(_DWORD *)(a4 + 16) = 3;
LABEL_17:
    Data = SocketReadData(*(_DWORD *)a4, v11, 0x10uLL, v9);
    if (Data
      || (Data = AES_GCM_InitMessage((uint64_t)v12, 0)) != 0
      || (Data = CCCryptorGCMAddAAD()) != 0
      || (Data = MEMORY[0x18D78D3A4](*v12, v10, *(_QWORD *)(a4 + 24), v10)) != 0)
    {
LABEL_23:
      LODWORD(v25) = Data;
LABEL_25:
      v27 = a3;
      v26 = __dst;
      goto LABEL_26;
    }
    v19 = CCCryptorGCMFinalize();
    if ((_DWORD)v19)
      break;
    v24 = v10 + *(_QWORD *)(a4 + 24);
    *v7 = v10;
    v7[1] = v24;
    *(_QWORD *)(a4 + 32) = 0;
    *(_DWORD *)(a4 + 16) = 1;
  }
  v25 = v19;
  v27 = a3;
  v26 = __dst;
  if (gLogCategory_NetTransportGCM <= 60
    && (gLogCategory_NetTransportGCM != -1 || _LogCategory_Initialize((uint64_t)&gLogCategory_NetTransportGCM, 0x3Cu)))
  {
    LogPrintF((uint64_t)&gLogCategory_NetTransportGCM, (uint64_t)"OSStatus _NetTransportRead(void *, size_t, size_t *, void *)", 0x3Cu, (uint64_t)"### GCM verify failed: %#m\n", v20, v21, v22, v23, v25);
  }
LABEL_26:
  if (v27)
    *v27 = v6 - v26;
  if ((_DWORD)v25 != -6753 && (_DWORD)v25 != 35 || v6 == v26)
    return v25;
  else
    return 0;
}

uint64_t _NetTransportWriteV_11597(const iovec **a1, int *a2, uint64_t a3)
{
  char **v4;
  uint64_t v5;
  uint64_t v6;
  const iovec *v7;
  unint64_t v8;
  char *v9;
  char *v10;
  int64_t v11;
  uint64_t result;
  uint64_t v13;
  uint64_t v14;
  const iovec *v15;
  size_t iov_len;
  size_t *p_iov_len;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  BOOL v23;
  uint64_t v26;
  char *v27;
  uint64_t *v28;
  const iovec *v29;
  int v30;
  char *v31;
  int64_t v32;
  uint64_t v33;

  v33 = *MEMORY[0x1E0C80C00];
  v4 = (char **)(a3 + 524416);
  v5 = a3 + 262252;
  v6 = a3 + 524396;
  v30 = 0;
  v7 = *a1;
  v8 = (unint64_t)&(*a1)[*a2];
  v27 = (char *)(a3 + 262248);
  v28 = (uint64_t *)(a3 + 524432);
  v9 = *(char **)(a3 + 524416);
  v26 = a3 + 262252;
  while (1)
  {
    while (1)
    {
      v10 = v4[1];
      v11 = v10 - v9;
      if (v10 == v9)
        break;
      v31 = v9;
      v32 = v10 - v9;
      v29 = (const iovec *)&v31;
      v30 = 1;
      result = SocketWriteData(*(_DWORD *)a3, &v29, &v30);
      v9 = &(*v4)[v11 - v32];
      *v4 = v9;
      if ((_DWORD)result)
        goto LABEL_30;
    }
    if ((unint64_t)v7 >= v8)
    {
      v13 = 0;
      v15 = v7;
LABEL_11:
      v29 = v15;
      if (!v13)
      {
LABEL_31:
        result = 0;
        goto LABEL_30;
      }
    }
    else
    {
      v13 = 0;
      v14 = v5;
      v15 = v7;
      while (1)
      {
        iov_len = v15->iov_len;
        if (v6 - v14 < iov_len)
          break;
        v13 += iov_len;
        v14 += iov_len;
        if ((unint64_t)++v15 >= v8)
          goto LABEL_11;
      }
      v29 = v15;
      v13 += v6 - v14;
      if (!v13)
        goto LABEL_31;
    }
    result = AES_GCM_InitMessage((uint64_t)v28, 0);
    if ((_DWORD)result)
      goto LABEL_30;
    *(_DWORD *)v27 = bswap32(v13);
    result = CCCryptorGCMAddAAD();
    if ((_DWORD)result)
      goto LABEL_30;
    if ((unint64_t)v7 < v8)
      break;
    v18 = v5;
LABEL_27:
    result = CCCryptorGCMFinalize();
    if ((_DWORD)result)
      goto LABEL_30;
    *v4 = v27;
    v4[1] = (char *)(v18 + 16);
    v9 = v27;
  }
  p_iov_len = &v7->iov_len;
  v18 = v5;
  while (1)
  {
    v7 = (const iovec *)(p_iov_len - 1);
    v19 = *(p_iov_len - 1);
    v20 = v6 - v18;
    v21 = *v28;
    if (v6 - v18 < *p_iov_len)
    {
      result = MEMORY[0x18D78D3B0](v21, v19, v6 - v18, v18);
      if ((_DWORD)result)
        goto LABEL_30;
      *(p_iov_len - 1) += v20;
      *p_iov_len -= v20;
      v18 = v6;
      goto LABEL_26;
    }
    result = MEMORY[0x18D78D3B0](v21, v19);
    if ((_DWORD)result)
      break;
    v22 = p_iov_len + 2;
    v18 += *p_iov_len;
    v23 = (unint64_t)(p_iov_len + 1) >= v8;
    p_iov_len += 2;
    if (v23)
    {
      v7 = (const iovec *)(v22 - 1);
LABEL_26:
      v5 = v26;
      goto LABEL_27;
    }
  }
  v7 = (const iovec *)(p_iov_len - 1);
LABEL_30:
  *a1 = v7;
  *a2 = (v8 - (unint64_t)v7) >> 4;
  return result;
}

uint64_t NetTransportTLSConfigure(SSLContext ***a1, int a2)
{
  SSLContext **v4;
  SSLContext **v5;
  SSLContext *v6;
  uint64_t v7;

  v4 = (SSLContext **)malloc_type_calloc(1uLL, 0x60uLL, 0x10F004024CDB9A6uLL);
  if (!v4)
    return 4294960568;
  v5 = v4;
  v6 = SSLCreateContext(0, (SSLProtocolSide)(a2 != 0), kSSLStreamType);
  *v5 = v6;
  if (v6)
  {
    v7 = SSLSetConnection(v6, v5);
    if (!(_DWORD)v7)
    {
      v7 = SSLSetIOFuncs(*v5, (SSLReadFunc)_SecureTransportRead, (SSLWriteFunc)_SecureTransportWrite);
      if (!(_DWORD)v7)
      {
        v7 = SSLSetProtocolVersionMin(*v5, kTLSProtocol12);
        if (!(_DWORD)v7)
        {
          *a1 = v5;
          a1[1] = (SSLContext **)_NetTransportInitialize_11602;
          a1[2] = (SSLContext **)_NetTransportFinalize_11603;
          a1[3] = (SSLContext **)_NetTransportRead_11604;
          a1[4] = (SSLContext **)_NetTransportWriteV_11605;
          return v7;
        }
      }
    }
  }
  else
  {
    v7 = 4294960596;
  }
  _NetTransportFinalize_11603((CFTypeRef *)v5);
  return v7;
}

uint64_t _SecureTransportRead(uint64_t a1, void *a2, size_t *a3)
{
  unint64_t v6;
  uint64_t v7;

  do
  {
    v6 = read(*(_DWORD *)(a1 + 8), a2, *a3);
    if ((v6 & 0x8000000000000000) == 0)
    {
      if (v6)
      {
        if (v6 < *a3)
          goto LABEL_8;
        v7 = 0;
      }
      else
      {
        v7 = 4294957491;
      }
      goto LABEL_13;
    }
    if (!*__error())
    {
      v6 = 0;
      v7 = 4294960596;
      goto LABEL_13;
    }
    v7 = *__error();
  }
  while ((_DWORD)v7 == 4);
  if ((_DWORD)v7 == 35)
  {
    v6 = 0;
LABEL_8:
    *(_BYTE *)(a1 + 13) = 1;
    v7 = 4294957493;
    goto LABEL_13;
  }
  v6 = 0;
LABEL_13:
  *a3 = v6;
  return v7;
}

size_t _SecureTransportWrite(uint64_t a1, void *__buf, size_t *a3)
{
  size_t v4;
  unint64_t v7;

  v4 = *a3;
  if (*a3)
  {
    while (1)
    {
      v7 = write(*(_DWORD *)(a1 + 8), __buf, *a3);
      if ((v7 & 0x8000000000000000) == 0)
        break;
      if (!*__error())
      {
        v7 = 0;
        v4 = 4294960596;
        goto LABEL_14;
      }
      v4 = *__error();
      if ((_DWORD)v4 != 4)
      {
        if ((_DWORD)v4 != 35)
          goto LABEL_11;
        v7 = 0;
        goto LABEL_9;
      }
    }
    if (v7)
    {
      if (v7 < *a3)
      {
LABEL_9:
        *(_BYTE *)(a1 + 14) = 1;
        v4 = 4294957493;
        goto LABEL_14;
      }
      v4 = 0;
    }
    else
    {
      v4 = 4294957491;
    }
  }
  else
  {
LABEL_11:
    v7 = 0;
  }
LABEL_14:
  *a3 = v7;
  return v4;
}

uint64_t _NetTransportInitialize_11602(int a1, uint64_t a2)
{
  *(_DWORD *)(a2 + 8) = a1;
  return 0;
}

void _NetTransportFinalize_11603(CFTypeRef *a1)
{
  void (*v2)(CFTypeRef);
  CFTypeRef v3;

  if (a1)
  {
    v2 = (void (*)(CFTypeRef))a1[5];
    if (v2)
      v2(a1[3]);
    v3 = a1[4];
    if (v3)
    {
      CFRelease(v3);
      a1[4] = 0;
    }
    if (*a1)
      CFRelease(*a1);
    free(a1);
  }
}

uint64_t _NetTransportRead_11604(void *data, size_t dataLength, size_t *a3, uint64_t a4)
{
  uint64_t result;
  size_t v9;
  int v10;
  OSStatus v11;
  unsigned int v12;
  int v13;
  size_t processed;

  processed = 0;
  if (!*(_BYTE *)(a4 + 12))
  {
    while (1)
    {
      result = SSLHandshake(*(SSLContextRef *)a4);
      if (!(_DWORD)result)
      {
        *(_BYTE *)(a4 + 12) = 1;
        goto LABEL_11;
      }
      if ((_DWORD)result == -9803)
        break;
      if ((_DWORD)result != -9841)
      {
        v9 = 0;
        goto LABEL_33;
      }
      result = _HandlePeerAuth(a4);
      v9 = 0;
      if ((_DWORD)result)
        goto LABEL_33;
    }
    v10 = *(unsigned __int8 *)(a4 + 14);
    if (*(_BYTE *)(a4 + 13))
    {
      *(_BYTE *)(a4 + 13) = 0;
      if (v10)
      {
        result = 4294960530;
LABEL_27:
        v9 = 0;
        goto LABEL_28;
      }
      v9 = 0;
      goto LABEL_30;
    }
    if (*(_BYTE *)(a4 + 14))
    {
      result = 4294960521;
      goto LABEL_27;
    }
    v9 = 0;
LABEL_32:
    result = 35;
    goto LABEL_33;
  }
LABEL_11:
  v11 = SSLRead(*(SSLContextRef *)a4, data, dataLength, &processed);
  v9 = processed;
  if (processed)
    v12 = 0;
  else
    v12 = v11;
  switch(v12)
  {
    case 0xFFFFD9B3:
      result = 4294960543;
      break;
    case 0xFFFFD9B5:
      v13 = *(unsigned __int8 *)(a4 + 14);
      if (*(_BYTE *)(a4 + 13))
      {
        *(_BYTE *)(a4 + 13) = 0;
        if (!v13)
        {
LABEL_30:
          result = 4294960522;
          break;
        }
        result = 4294960530;
      }
      else
      {
        if (!*(_BYTE *)(a4 + 14))
          goto LABEL_32;
        result = 4294960521;
      }
LABEL_28:
      *(_BYTE *)(a4 + 14) = 0;
      break;
    case 0xFFFFD9B2:
      result = 4294960543;
      break;
    default:
      result = v12;
      break;
  }
LABEL_33:
  *a3 = v9;
  return result;
}

uint64_t _NetTransportWriteV_11605(const void ***a1, int *a2, uint64_t a3)
{
  uint64_t result;
  int v7;
  size_t processed;

  if (*(_BYTE *)(a3 + 12))
  {
    while (1)
    {
LABEL_8:
      if (*a2 < 1)
        return 0;
      processed = 0;
      LODWORD(result) = SSLWrite(*(SSLContextRef *)a3, **a1, (size_t)(*a1)[1], &processed);
      if (processed)
        result = 0;
      else
        result = result;
      if ((result + 9806) < 2)
        return 4294960543;
      if ((_DWORD)result)
        break;
      result = UpdateIOVec((uint64_t **)a1, a2, processed);
      if (!(_DWORD)result)
        return result;
    }
    if ((_DWORD)result != -9803)
      return result;
  }
  else
  {
    while (1)
    {
      result = SSLHandshake(*(SSLContextRef *)a3);
      if (!(_DWORD)result)
      {
        *(_BYTE *)(a3 + 12) = 1;
        goto LABEL_8;
      }
      if ((_DWORD)result == -9803)
        break;
      if ((_DWORD)result == -9841)
      {
        result = _HandlePeerAuth(a3);
        if (!(_DWORD)result)
          continue;
      }
      return result;
    }
  }
  v7 = *(unsigned __int8 *)(a3 + 14);
  if (*(_BYTE *)(a3 + 13))
  {
    *(_BYTE *)(a3 + 13) = 0;
    if (v7)
    {
      result = 4294960530;
LABEL_23:
      *(_BYTE *)(a3 + 14) = 0;
      return result;
    }
    return 4294960522;
  }
  else
  {
    if (*(_BYTE *)(a3 + 14))
    {
      result = 4294960521;
      goto LABEL_23;
    }
    return 35;
  }
}

uint64_t _HandlePeerAuth(uint64_t a1)
{
  uint64_t (*v2)(SecTrustRef, _QWORD);
  uint64_t v3;
  SecTrustRef trust;

  v2 = *(uint64_t (**)(SecTrustRef, _QWORD))(a1 + 80);
  if (!v2)
  {
    if (!*(_BYTE *)(a1 + 56))
      return 0;
    v2 = *(uint64_t (**)(SecTrustRef, _QWORD))(a1 + 48);
    if (!v2)
      return 0;
  }
  trust = 0;
  v3 = SSLCopyPeerTrust(*(SSLContextRef *)a1, &trust);
  if (!(_DWORD)v3)
  {
    v3 = v2(trust, *(_QWORD *)(a1 + 24));
    CFRelease(trust);
    if (!(_DWORD)v3)
      return 0;
  }
  return v3;
}

uint64_t NetTransportTLSConfigureEx(_QWORD *a1, _QWORD *a2)
{
  void *v3;
  void *v4;
  SSLContext *v5;
  uint64_t v6;
  const __CFArray *v8;
  SSLProtocol v9;
  const char *v10;
  size_t v11;
  const void *v12;

  if (*a2 > 0x50uLL)
    return 4294960553;
  v3 = malloc_type_calloc(1uLL, 0x60uLL, 0x10F004024CDB9A6uLL);
  if (!v3)
    return 4294960568;
  v4 = v3;
  __memcpy_chk();
  v5 = SSLCreateContext(0, (SSLProtocolSide)(*((_BYTE *)v4 + 56) != 0), kSSLStreamType);
  *(_QWORD *)v4 = v5;
  if (!v5)
  {
    v6 = 4294960596;
    goto LABEL_5;
  }
  v6 = SSLSetConnection(v5, v4);
  if ((_DWORD)v6)
    goto LABEL_5;
  v8 = (const __CFArray *)*((_QWORD *)v4 + 11);
  if (v8)
  {
    v6 = SSLSetCertificate(*(SSLContextRef *)v4, v8);
    if ((_DWORD)v6)
      goto LABEL_5;
  }
  v6 = SSLSetIOFuncs(*(SSLContextRef *)v4, (SSLReadFunc)_SecureTransportRead, (SSLWriteFunc)_SecureTransportWrite);
  if ((_DWORD)v6)
    goto LABEL_5;
  v9 = *((_DWORD *)v4 + 15);
  if (v9)
  {
    v6 = SSLSetProtocolVersionMin(*(SSLContextRef *)v4, v9);
    if ((_DWORD)v6)
      goto LABEL_5;
  }
  v10 = (const char *)*((_QWORD *)v4 + 8);
  if (v10)
  {
    v11 = *((_QWORD *)v4 + 9);
    if (v11 == -1)
      v11 = strlen(*((const char **)v4 + 8));
    v6 = SSLSetPeerDomainName(*(SSLContextRef *)v4, v10, v11);
    if ((_DWORD)v6)
      goto LABEL_5;
  }
  if (!*((_BYTE *)v4 + 56))
    goto LABEL_31;
  if (!*((_QWORD *)v4 + 6) && !*((_QWORD *)v4 + 10))
    goto LABEL_23;
  v6 = SSLSetSessionOption(*(SSLContextRef *)v4, kSSLSessionOptionBreakOnServerAuth, 1u);
  if ((_DWORD)v6)
    goto LABEL_5;
  if (!*((_BYTE *)v4 + 56))
  {
LABEL_31:
    if (!*((_QWORD *)v4 + 10))
      goto LABEL_23;
    v6 = SSLSetSessionOption(*(SSLContextRef *)v4, kSSLSessionOptionBreakOnClientAuth, 1u);
    if (!(_DWORD)v6)
      goto LABEL_23;
LABEL_5:
    _NetTransportFinalize_11603((CFTypeRef *)v4);
    return v6;
  }
LABEL_23:
  *a1 = v4;
  a1[1] = _NetTransportInitialize_11602;
  a1[2] = _NetTransportFinalize_11603;
  a1[3] = _NetTransportRead_11604;
  a1[4] = _NetTransportWriteV_11605;
  v12 = (const void *)*((_QWORD *)v4 + 4);
  if (v12)
    CFRetain(v12);
  v6 = 0;
  *((_QWORD *)v4 + 8) = 0;
  *((_QWORD *)v4 + 9) = 0;
  return v6;
}

uint64_t NetTransportTLSPSKConfigure(SSLContext ***a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, int a6)
{
  SSLContext **v9;
  SSLContext **v10;
  SSLContext *v11;
  uint64_t v12;
  SSLContext *v14;
  SSLCipherSuite ciphers[2];

  v9 = (SSLContext **)malloc_type_calloc(1uLL, 0x60uLL, 0x10F004024CDB9A6uLL);
  if (!v9)
    return 4294960568;
  v10 = v9;
  v11 = SSLCreateContext(0, (SSLProtocolSide)(a6 != 0), kSSLStreamType);
  *v10 = v11;
  if (v11)
  {
    v12 = SSLSetConnection(v11, v10);
    if (!(_DWORD)v12)
    {
      v12 = SSLSetIOFuncs(*v10, (SSLReadFunc)_SecureTransportRead, (SSLWriteFunc)_SecureTransportWrite);
      if (!(_DWORD)v12)
      {
        v12 = SSLSetProtocolVersionMin(*v10, kTLSProtocol12);
        if (!(_DWORD)v12)
        {
          v12 = SSLSetPSKSharedSecret();
          if (!(_DWORD)v12)
          {
            if (!a4 || (v12 = SSLSetPSKIdentity(), !(_DWORD)v12))
            {
              v14 = *v10;
              *(_DWORD *)ciphers = 11403432;
              v12 = SSLSetEnabledCiphers(v14, ciphers, 2uLL);
              if (!(_DWORD)v12)
              {
                *a1 = v10;
                a1[1] = (SSLContext **)_NetTransportInitialize_11602;
                a1[2] = (SSLContext **)_NetTransportFinalize_11603;
                a1[3] = (SSLContext **)_NetTransportRead_11604;
                a1[4] = (SSLContext **)_NetTransportWriteV_11605;
                return v12;
              }
            }
          }
        }
      }
    }
  }
  else
  {
    v12 = 4294960596;
  }
  _NetTransportFinalize_11603((CFTypeRef *)v10);
  return v12;
}

uint64_t CreateUsableInterfaceList(const char *a1, int a2, _QWORD *a3)
{
  int v6;
  uint64_t v7;
  ifaddrs *v8;
  void **v9;
  sockaddr *ifa_addr;
  const char *ifa_name;
  int sa_family;
  BOOL v13;
  int i;
  sockaddr *v15;
  __int128 v16;
  _QWORD *v17;
  _QWORD *v18;
  char *v19;
  size_t v20;
  void *v21;
  uint64_t v22;
  _QWORD *v23;
  void *v25;
  ifaddrs *v26;
  _OWORD v27[18];
  uint64_t v28;

  v28 = *MEMORY[0x1E0C80C00];
  v25 = 0;
  v26 = 0;
  v6 = socket(30, 2, 0);
  if (v6 < 0 && *__error())
    __error();
  if (getifaddrs(&v26))
  {
    if (!*__error())
    {
      v7 = 4294960596;
      goto LABEL_56;
    }
    v7 = *__error();
    if ((_DWORD)v7)
      goto LABEL_56;
  }
  v8 = v26;
  if (v26)
  {
    v9 = &v25;
    while (1)
    {
      if ((v8->ifa_flags & 1) != 0)
      {
        ifa_addr = v8->ifa_addr;
        if (ifa_addr)
        {
          ifa_name = v8->ifa_name;
          if (ifa_name)
          {
            sa_family = ifa_addr->sa_family;
            v13 = sa_family == 30 || sa_family == 2;
            if (v13
              && (!a2 || sa_family == a2)
              && (sa_family != 2 || *(_DWORD *)&ifa_addr->sa_data[2])
              && (!a1 || !strcmp(ifa_name, a1)))
            {
              if (v6 < 0 || sa_family != 30)
              {
LABEL_33:
                if (a3)
                {
                  v17 = malloc_type_calloc(1uLL, 0x38uLL, 0x10B0040815C8216uLL);
                  if (!v17)
                    goto LABEL_53;
                  v18 = v17;
                  *v9 = v17;
                  v19 = strdup(v8->ifa_name);
                  v18[1] = v19;
                  if (!v19)
                    goto LABEL_53;
                  *((_DWORD *)v18 + 4) = v8->ifa_flags;
                  v20 = sa_family == 2 ? 16 : 28;
                  v21 = malloc_type_malloc(v20, 0x2E575C6CuLL);
                  v18[3] = v21;
                  if (!v21)
                  {
LABEL_53:
                    v7 = 4294960568;
                    v23 = v25;
                    goto LABEL_54;
                  }
                  memcpy(v21, v8->ifa_addr, v20);
                  if (sa_family == 30)
                  {
                    v22 = v18[3];
                    if (*(unsigned __int8 *)(v22 + 8) == 254 && (*(_BYTE *)(v22 + 9) & 0xC0) == 0x80)
                    {
                      if (!*(_DWORD *)(v22 + 24))
                        *(_DWORD *)(v22 + 24) = __rev16(*(unsigned __int16 *)(v22 + 10));
                      *(_WORD *)(v22 + 10) = 0;
                    }
                  }
                  v9 = (void **)v18;
                }
              }
              else
              {
                for (i = 49; ; --i)
                {
                  memset(v27, 0, sizeof(v27));
                  __strlcpy_chk();
                  v15 = v8->ifa_addr;
                  v16 = *(_OWORD *)&v15->sa_data[10];
                  v27[1] = *v15;
                  *(_OWORD *)((char *)&v27[1] + 12) = v16;
                  if (ioctl(v6, 0xC1206949uLL, v27) == -1 && (!*__error() || *__error()))
                    break;
                  if ((v27[1] & 0x9C) != 0)
                    break;
                  if ((v27[1] & 2) == 0)
                    goto LABEL_33;
                  if (!i)
                    break;
                  usleep(0x186A0u);
                }
              }
            }
          }
        }
      }
      v8 = v8->ifa_next;
      if (!v8)
      {
        v23 = v25;
        goto LABEL_51;
      }
    }
  }
  v23 = 0;
LABEL_51:
  v7 = 0;
  if (a3)
  {
    *a3 = v23;
  }
  else
  {
LABEL_54:
    if (v23)
      ReleaseUsableInterfaceList(v23);
  }
LABEL_56:
  if (v26)
    MEMORY[0x18D78E7C0]();
  if ((v6 & 0x80000000) == 0)
    close(v6);
  return v7;
}

void ReleaseUsableInterfaceList(_QWORD *a1)
{
  _QWORD *v1;
  void *v2;
  _QWORD *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;

  if (a1)
  {
    v1 = a1;
    do
    {
      v3 = (_QWORD *)*v1;
      v2 = (void *)v1[1];
      if (v2)
      {
        free(v2);
        v1[1] = 0;
      }
      v4 = (void *)v1[3];
      if (v4)
      {
        free(v4);
        v1[3] = 0;
      }
      v5 = (void *)v1[4];
      if (v5)
      {
        free(v5);
        v1[4] = 0;
      }
      v6 = (void *)v1[5];
      if (v6)
      {
        free(v6);
        v1[5] = 0;
      }
      v7 = (void *)v1[6];
      if (v7)
        free(v7);
      free(v1);
      v1 = v3;
    }
    while (v3);
  }
}

_DWORD *CUDispatchSocketAllocate(int *a1)
{
  _DWORD *result;
  int v3;

  result = malloc_type_calloc(1uLL, 0x38uLL, 0x10E00406CD77940uLL);
  if (result)
  {
    v3 = 0;
    *result = -1;
    if (!a1)
      return result;
  }
  else
  {
    v3 = -6728;
    if (!a1)
      return result;
  }
  *a1 = v3;
  return result;
}

void CUDispatchSocketCancelAll(_QWORD *a1)
{
  NSObject *v2;
  NSObject *v3;

  if (a1)
  {
    v2 = a1[1];
    if (v2)
    {
      dispatch_source_cancel(v2);
      if (*((_BYTE *)a1 + 16))
      {
        *((_BYTE *)a1 + 16) = 0;
        dispatch_resume((dispatch_object_t)a1[1]);
      }
    }
    v3 = a1[3];
    if (v3)
    {
      dispatch_source_cancel(v3);
      if (*((_BYTE *)a1 + 32))
      {
        *((_BYTE *)a1 + 32) = 0;
        dispatch_resume((dispatch_object_t)a1[3]);
      }
    }
    _CUDispatchSocketCleanupIfDone(a1);
  }
}

void _CUDispatchSocketCleanupIfDone(_QWORD *a1)
{
  int v2;
  void (*v3)(_QWORD *);
  const void *v4;

  if (!a1[1] && !a1[3])
  {
    v2 = *(_DWORD *)a1;
    if ((v2 & 0x80000000) == 0)
    {
      if (close(v2) && *__error())
        __error();
      *(_DWORD *)a1 = -1;
    }
    v3 = (void (*)(_QWORD *))a1[6];
    if (v3)
      v3(a1);
    a1[6] = 0;
    v4 = (const void *)a1[5];
    if (v4)
      CFRelease(v4);
    free(a1);
  }
}

void CUDispatchSocketReadCanceled(_QWORD *a1)
{
  NSObject *v2;

  if (a1)
  {
    v2 = a1[1];
    if (v2)
    {
      dispatch_release(v2);
      a1[1] = 0;
    }
    _CUDispatchSocketCleanupIfDone(a1);
  }
}

void CUDispatchSocketWriteCanceled(_QWORD *a1)
{
  NSObject *v2;

  if (a1)
  {
    v2 = a1[3];
    if (v2)
    {
      dispatch_release(v2);
      a1[3] = 0;
    }
    _CUDispatchSocketCleanupIfDone(a1);
  }
}

__CFArray *CUCopyMACAddresses(uint64_t a1, int *a2)
{
  __CFArray *Mutable;
  int v4;
  ifaddrs *v5;
  sockaddr *ifa_addr;
  int appended;
  ifaddrs *v9;

  v9 = 0;
  Mutable = CFArrayCreateMutable(0, 0, MEMORY[0x1E0C9B378]);
  if (!Mutable)
  {
    v4 = -6728;
    if (!a2)
      return Mutable;
    goto LABEL_20;
  }
  if (!getifaddrs(&v9))
    goto LABEL_5;
  if (!*__error())
  {
    v4 = -6700;
    goto LABEL_14;
  }
  v4 = *__error();
  if (!v4)
  {
LABEL_5:
    v5 = v9;
    if (!v9)
    {
      v4 = 0;
      goto LABEL_19;
    }
    while (1)
    {
      if ((v5->ifa_flags & 1) != 0)
      {
        ifa_addr = v5->ifa_addr;
        if (ifa_addr)
        {
          if (ifa_addr->sa_family == 18 && ifa_addr->sa_data[4] == 6)
          {
            appended = CFArrayAppendBytes(Mutable, (const UInt8 *)&ifa_addr->sa_data[ifa_addr->sa_data[3] + 6], 6);
            if (appended)
              break;
          }
        }
      }
      v5 = v5->ifa_next;
      if (!v5)
      {
        v4 = 0;
        goto LABEL_15;
      }
    }
    v4 = appended;
  }
LABEL_14:
  CFRelease(Mutable);
  Mutable = 0;
LABEL_15:
  if (v9)
  {
    MEMORY[0x18D78E7C0]();
    if (!a2)
      return Mutable;
    goto LABEL_20;
  }
LABEL_19:
  if (a2)
LABEL_20:
    *a2 = v4;
  return Mutable;
}

uint64_t CUGetInterfaceAddresses(char a1, const char *a2, sockaddr *a3, uint64_t a4, uint64_t a5)
{
  BOOL v10;
  BOOL v11;
  BOOL v12;
  uint64_t v13;
  ifaddrs *i;
  sockaddr *ifa_addr;
  const char *ifa_name;
  int sa_family;
  sockaddr v18;
  uint64_t v19;
  __uint8_t *v20;
  int v21;
  ifaddrs *v23;

  v10 = a3 != 0;
  v11 = a4 != 0;
  v12 = a5 != 0;
  v23 = 0;
  if (getifaddrs(&v23))
  {
    if (!*__error())
    {
      v13 = 4294960596;
      goto LABEL_43;
    }
    v13 = *__error();
    if ((_DWORD)v13)
      goto LABEL_43;
  }
  for (i = v23; i; i = i->ifa_next)
  {
    if ((i->ifa_flags & 1) == 0)
      continue;
    ifa_addr = i->ifa_addr;
    if (!ifa_addr)
      continue;
    ifa_name = i->ifa_name;
    if (!ifa_name || strcmp(ifa_name, a2))
      continue;
    sa_family = ifa_addr->sa_family;
    switch(sa_family)
    {
      case 30:
        if (!v11)
        {
          v11 = 0;
          continue;
        }
        if ((a1 & 1) != 0 && (ifa_addr->sa_data[6] != 254 || (ifa_addr->sa_data[7] & 0xC0) != 0x80))
        {
          v11 = 1;
          continue;
        }
        v11 = 0;
        v18 = *ifa_addr;
        v19 = *(_QWORD *)&ifa_addr[1].sa_len;
        *(_DWORD *)(a4 + 24) = *(_DWORD *)&ifa_addr[1].sa_data[6];
        *(_QWORD *)(a4 + 16) = v19;
        *(sockaddr *)a4 = v18;
        break;
      case 18:
        if (!v12)
        {
          v12 = 0;
          continue;
        }
        if (ifa_addr->sa_data[4] != 6)
        {
          v12 = 1;
          continue;
        }
        v12 = 0;
        v20 = &ifa_addr->sa_len + ifa_addr->sa_data[3];
        v21 = *((_DWORD *)v20 + 2);
        *(_WORD *)(a5 + 4) = *((_WORD *)v20 + 6);
        *(_DWORD *)a5 = v21;
        break;
      case 2:
        if (!v10)
        {
          v10 = 0;
          continue;
        }
        if ((a1 & 2) != 0
          && ifa_addr->sa_data[2] == 169
          && ifa_addr->sa_data[3] == 254)
        {
          v10 = 1;
          continue;
        }
        v10 = 0;
        *a3 = *ifa_addr;
        break;
    }
    if (!v10 && !v11 && !v12)
    {
      v12 = 0;
      v11 = 0;
LABEL_40:
      if (v11 || v12)
        v13 = 4294960569;
      else
        v13 = 0;
      goto LABEL_43;
    }
  }
  if (!v10)
    goto LABEL_40;
  v13 = 4294960569;
LABEL_43:
  if (v23)
    MEMORY[0x18D78E7C0]();
  return v13;
}

__int128 *SockAddrCopy(__int128 *result, uint64_t a2)
{
  int v2;
  __int128 v3;
  uint64_t v4;

  v2 = *((unsigned __int8 *)result + 1);
  if (*((_BYTE *)result + 1))
  {
    if (v2 == 30)
    {
      v3 = *result;
      v4 = *((_QWORD *)result + 2);
      *(_DWORD *)(a2 + 24) = *((_DWORD *)result + 6);
      *(_QWORD *)(a2 + 16) = v4;
      goto LABEL_8;
    }
    if (v2 == 2)
    {
      v3 = *result;
LABEL_8:
      *(_OWORD *)a2 = v3;
    }
  }
  else
  {
    *(_BYTE *)(a2 + 1) = 0;
  }
  return result;
}

uint64_t DrainUDPSocket(int a1, int a2, _DWORD *a3)
{
  uint64_t v5;
  int v6;
  uint64_t v7;
  uint64_t result;
  socklen_t v10;
  sockaddr v11;
  uint64_t v12;
  int v13;
  timeval v14;
  fd_set v15;
  _BYTE v16[32];
  uint64_t v17;

  v17 = *MEMORY[0x1E0C80C00];
  v14.tv_sec = 0;
  *(_QWORD *)&v14.tv_usec = 0;
  *(_QWORD *)&v11.sa_len = 0;
  *(_QWORD *)&v11.sa_data[6] = 0;
  v13 = 0;
  v12 = 0;
  v10 = 0;
  v5 = mach_absolute_time();
  v6 = 0;
  v7 = MillisecondsToUpTicks(a2) + v5;
  memset(&v15, 0, sizeof(v15));
  while (1)
  {
    if (__darwin_check_fd_set_overflow(a1, &v15, 0))
      v15.fds_bits[(unint64_t)a1 >> 5] |= 1 << a1;
    v14.tv_sec = a2 / 1000;
    v14.tv_usec = 1000 * (a2 % 1000);
    result = select(a1 + 1, &v15, 0, 0, &v14);
    if ((_DWORD)result == 1)
      goto LABEL_8;
    if (!(_DWORD)result)
      goto LABEL_14;
    if (!*__error())
      break;
    result = *__error();
    if ((_DWORD)result)
      goto LABEL_14;
LABEL_8:
    v10 = 28;
    if (recvfrom(a1, v16, 0x20uLL, 0, &v11, &v10) < 0)
    {
      if (!*__error())
        break;
      result = *__error();
      if ((_DWORD)result)
        goto LABEL_14;
    }
    ++v6;
    if (mach_absolute_time() >= v7)
    {
      result = 0;
      goto LABEL_14;
    }
  }
  result = 4294960596;
LABEL_14:
  if (a3)
    *a3 = v6;
  return result;
}

uint64_t GetPrimaryMACAddress(char *a1, int *a2)
{
  char *v3;
  int v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char v12;
  int v13;

  if (a1)
    v3 = a1;
  else
    v3 = &v12;
  *((_WORD *)v3 + 2) = 0;
  *(_DWORD *)v3 = 0;
  v13 = 0;
  GestaltGetData(CFSTR("EthernetMacAddress"), 0, v3, 6uLL, 0, &v13);
  v4 = v13;
  if (v13)
  {
    GestaltGetData(CFSTR("WifiAddressData"), 0, v3, 6uLL, 0, &v13);
    v4 = v13;
    if (v13)
    {
      GestaltGetData(CFSTR("WifiAddress"), 0, v3, 6uLL, 0, &v13);
      v4 = v13;
    }
  }
  v5 = *v3;
  v6 = v3[1];
  v7 = v3[2];
  v8 = v3[3];
  v9 = v3[4];
  v10 = v3[5];
  if (a2)
    *a2 = v4;
  return (v5 << 40) | (v6 << 32) | (v7 << 24) | (v8 << 16) | (v9 << 8) | v10;
}

uint64_t OpenSelfConnectedLoopbackSocket(int *a1)
{
  int v2;
  uint64_t v3;
  socklen_t v5;
  sockaddr v6;
  uint64_t v7;
  int v8;

  v8 = 0;
  v7 = 0;
  v5 = 0;
  v2 = socket(2, 2, 17);
  if ((v2 & 0x80000000) == 0)
    goto LABEL_2;
  if (!*__error())
    return 4294960596;
  v3 = *__error();
  if (!(_DWORD)v3)
  {
LABEL_2:
    *(_DWORD *)&v6.sa_len = 512;
    *(_QWORD *)&v6.sa_data[6] = 0;
    *(_DWORD *)&v6.sa_data[2] = 16777343;
    if (bind(v2, &v6, 0x10u))
    {
      if (!*__error())
        goto LABEL_15;
      v3 = *__error();
      if ((_DWORD)v3)
        goto LABEL_16;
    }
    v5 = 28;
    if (!getsockname(v2, &v6, &v5))
      goto LABEL_8;
    if (*__error())
    {
      v3 = *__error();
      if (!(_DWORD)v3)
      {
LABEL_8:
        if (!connect(v2, &v6, v5))
        {
LABEL_11:
          v3 = 0;
          *a1 = v2;
          return v3;
        }
        if (*__error())
        {
          v3 = *__error();
          if (!(_DWORD)v3)
            goto LABEL_11;
          goto LABEL_16;
        }
        goto LABEL_15;
      }
LABEL_16:
      if ((v2 & 0x80000000) == 0 && close(v2) && *__error())
        __error();
      return v3;
    }
LABEL_15:
    v3 = 4294960596;
    goto LABEL_16;
  }
  return v3;
}

uint64_t SendSelfConnectedLoopbackMessage(int a1, const void *a2, size_t a3)
{
  uint64_t result;
  ssize_t v7;
  ssize_t v8;
  socklen_t v9;
  sockaddr v10;
  uint64_t v11;
  int v12;

  *(_QWORD *)&v10.sa_len = 0;
  *(_QWORD *)&v10.sa_data[6] = 0;
  v12 = 0;
  v11 = 0;
  v9 = 28;
  if (getsockname(a1, &v10, &v9))
  {
    if (!*__error())
      return 4294960596;
    result = *__error();
    if ((_DWORD)result)
      return result;
  }
  v7 = sendto(a1, a2, a3, 0, &v10, 0x10u);
  result = 0;
  if (v7 == a3)
    return result;
  if (!*__error())
    return 4294960596;
  result = *__error();
  if ((_DWORD)result == 56)
  {
    v8 = send(a1, a2, a3, 0);
    result = 0;
    if (v8 != a3)
    {
      if (*__error())
        return *__error();
      return 4294960596;
    }
  }
  return result;
}

uint64_t ServerSocketPairOpen(int a1, int a2, int a3, int *a4, int a5, int *a6, int *a7)
{
  uint64_t v13;
  int v14;
  int v16;
  int v17;
  int v18;

  v17 = -1;
  v18 = a3;
  v16 = -1;
  v13 = ServerSocketOpenEx2(2, a1, a2, 0, 0, a3, (unsigned int *)&v18, a5, 0, &v17);
  v14 = ServerSocketOpenEx2(30, a1, a2, 0, 0, v18, (unsigned int *)&v18, a5, 0, &v16);
  if ((_DWORD)v13 && v14)
  {
    if ((v17 & 0x80000000) == 0 && close(v17) && *__error())
      __error();
    if ((v16 & 0x80000000) == 0 && close(v16) && *__error())
      __error();
  }
  else
  {
    if (a4)
      *a4 = v18;
    v13 = 0;
    *a6 = v17;
    *a7 = v16;
  }
  return v13;
}

uint64_t ServerSocketOpenEx2(int a1, int a2, int a3, __int128 *a4, int a5, int a6, unsigned int *a7, int a8, char a9, int *a10)
{
  unsigned int v17;
  int v18;
  uint64_t v19;
  int v20;
  int v21;
  __int128 v22;
  int v23;
  socklen_t v24;
  unsigned int *v25;
  unsigned int v26;
  int v28;
  socklen_t v29;
  _BYTE v30[24];
  uint64_t v31;

  v31 = 0;
  memset(v30, 0, sizeof(v30));
  v29 = 0;
  if (a6 >= 0)
    v17 = a6;
  else
    v17 = -a6;
  v18 = socket(a1, a2, a3);
  if ((v18 & 0x80000000) == 0)
    goto LABEL_7;
  if (!*__error())
    return 4294960596;
  v19 = *__error();
  if (!(_DWORD)v19)
  {
LABEL_7:
    v28 = 1;
    setsockopt(v18, 0xFFFF, 4130, &v28, 4u);
    v19 = SocketSetNonBlocking(v18, 1);
    if ((_DWORD)v19)
    {
LABEL_8:
      if ((v18 & 0x80000000) == 0 && close(v18) && *__error())
        __error();
      return v19;
    }
    SocketSetBufferSize(v18, 4098, a8);
    HIDWORD(v31) = 1;
    if (a2 == 2)
      v20 = 512;
    else
      v20 = 4;
    if (setsockopt(v18, 0xFFFF, v20, (char *)&v31 + 4, 4u))
    {
      if (!*__error())
        goto LABEL_66;
      v19 = *__error();
      if ((_DWORD)v19)
        goto LABEL_8;
    }
    if (a1 == 30)
    {
      if ((a9 & 2) == 0)
      {
        HIDWORD(v31) = 1;
        if (setsockopt(v18, 41, 27, (char *)&v31 + 4, 4u))
        {
          if (!*__error())
            goto LABEL_66;
          v19 = *__error();
          if ((_DWORD)v19)
            goto LABEL_8;
        }
      }
      *(_QWORD *)&v30[12] = 0;
      *(_WORD *)&v30[10] = 0;
      *(_DWORD *)&v30[20] = 0;
      *(_WORD *)v30 = 7708;
      *(_QWORD *)&v30[2] = bswap32(v17) >> 16;
      if (a4)
        v22 = *a4;
      else
        v22 = *MEMORY[0x1E0C83920];
      *(_OWORD *)&v30[8] = v22;
      LODWORD(v31) = a5;
      if (!bind(v18, (const sockaddr *)v30, 0x1Cu))
        goto LABEL_50;
      if (*__error())
        v19 = *__error();
      else
        v19 = 4294960596;
      if ((a6 & 0x80000000) == 0 || !(_DWORD)v19)
        goto LABEL_49;
      *(_WORD *)&v30[2] = 0;
      v23 = v18;
      v24 = 28;
    }
    else
    {
      if (a1 != 2)
      {
        v19 = 4294960561;
        goto LABEL_8;
      }
      *(_QWORD *)&v30[8] = 0;
      *(_WORD *)v30 = 528;
      *(_WORD *)&v30[2] = bswap32(v17) >> 16;
      if (a4)
        v21 = *(_DWORD *)a4;
      else
        v21 = 0;
      *(_DWORD *)&v30[4] = v21;
      if (!bind(v18, (const sockaddr *)v30, 0x10u))
        goto LABEL_50;
      if (*__error())
        v19 = *__error();
      else
        v19 = 4294960596;
      if ((a6 & 0x80000000) == 0 || !(_DWORD)v19)
        goto LABEL_49;
      *(_WORD *)&v30[2] = 0;
      v23 = v18;
      v24 = 16;
    }
    if (!bind(v23, (const sockaddr *)v30, v24))
    {
LABEL_50:
      if (a2 == 1 && listen(v18, 128) && (!*__error() || *__error()) && listen(v18, 5))
      {
        if (!*__error())
          goto LABEL_66;
        v19 = *__error();
        if ((_DWORD)v19)
          goto LABEL_8;
      }
      if ((a9 & 1) != 0)
        SocketSetP2P(v18, 1);
      if (!a7)
        goto LABEL_70;
      v29 = 28;
      if (!getsockname(v18, (sockaddr *)v30, &v29))
      {
LABEL_63:
        if (v30[1] == 30)
        {
          v25 = a7;
        }
        else
        {
          v25 = a7;
          if (v30[1] != 2)
          {
            v26 = -1;
LABEL_69:
            *v25 = v26;
LABEL_70:
            v19 = 0;
            *a10 = v18;
            return v19;
          }
        }
        v26 = bswap32(*(unsigned __int16 *)&v30[2]) >> 16;
        goto LABEL_69;
      }
      if (*__error())
      {
        v19 = *__error();
        if ((_DWORD)v19)
          goto LABEL_8;
        goto LABEL_63;
      }
LABEL_66:
      v19 = 4294960596;
      goto LABEL_8;
    }
    if (!*__error())
      goto LABEL_66;
    v19 = *__error();
LABEL_49:
    if ((_DWORD)v19)
      goto LABEL_8;
    goto LABEL_50;
  }
  return v19;
}

uint64_t SocketSetNonBlocking(int a1, int a2)
{
  BOOL v3;
  int v4;

  v3 = a2 != 0;
  v4 = fcntl(a1, 3, 0);
  if (fcntl(a1, 4, v4 & 0xFFFFFFFB | (4 * v3)) != -1)
    return 0;
  if (*__error())
    return *__error();
  return 4294960596;
}

uint64_t SocketSetBufferSize(int a1, int a2, int a3)
{
  uint64_t result;
  int v7;
  signed int v8;
  int v10;
  size_t v11;
  int v12;
  int v13;

  v13 = a3;
  result = 4294960591;
  if ((a1 & 0x80000000) == 0 && (a2 - 4099) >= 0xFFFFFFFE)
  {
    v12 = 0;
    if (a3 < 1)
    {
      if (a3 == -1)
      {
        return 0;
      }
      else
      {
        v7 = -a3;
        v11 = 4;
        if (sysctlbyname("kern.ipc.maxsockbuf", &v12, &v11, 0, 0) && (!*__error() || *__error()))
          v12 = 0x40000;
        v8 = (85 * v12 / 100 + 4095) & 0xFFFFF000;
        if (v8 > v7 && a3 < 0)
          v8 = v7;
        v12 = v8;
        do
        {
          result = setsockopt(a1, 0xFFFF, a2, &v12, 4u);
          if (!(_DWORD)result)
            break;
          if (*__error())
          {
            result = *__error();
            if (!(_DWORD)result)
              return result;
          }
          else
          {
            result = 4294960596;
          }
          v10 = v12;
          v12 -= 1024;
        }
        while (v10 > 33791);
      }
    }
    else
    {
      result = setsockopt(a1, 0xFFFF, a2, &v13, 4u);
      if ((_DWORD)result)
      {
        if (*__error())
          return *__error();
        else
          return 4294960596;
      }
    }
  }
  return result;
}

uint64_t SocketSetP2P(int a1, int a2)
{
  uint64_t result;
  int v3;

  v3 = a2;
  result = setsockopt(a1, 0xFFFF, 4356, &v3, 4u);
  if ((_DWORD)result)
  {
    if (*__error())
      return *__error();
    else
      return 4294960596;
  }
  return result;
}

uint64_t ServerSocketOpen(int a1, int a2, int a3, int a4, unsigned int *a5, int a6, int *a7)
{
  return ServerSocketOpenEx2(a1, a2, a3, 0, 0, a4, a5, a6, 0, a7);
}

uint64_t ServerSocketOpenEx(int a1, int a2, int a3, __int128 *a4, int a5, unsigned int *a6, int a7, int *a8)
{
  return ServerSocketOpenEx2(a1, a2, a3, a4, 0, a5, a6, a7, 0, a8);
}

uint64_t SockAddrGetPort(uint64_t a1)
{
  int v1;

  v1 = *(unsigned __int8 *)(a1 + 1);
  if (v1 == 30 || v1 == 2)
    return bswap32(*(unsigned __int16 *)(a1 + 2)) >> 16;
  else
    return 0xFFFFFFFFLL;
}

uint64_t UDPClientSocketOpen(int a1, __int128 *a2, signed int a3, int a4, unsigned int *a5, int *a6)
{
  int sa_family;
  uint64_t v11;
  sockaddr *v12;
  int v13;
  unsigned int v14;
  int *v15;
  socklen_t v16;
  socklen_t v17;
  int v18;
  unsigned int v19;
  int v21;
  socklen_t v22;
  _BYTE v23[24];
  int v24;
  sockaddr v25;
  uint64_t v26;
  int v27;

  sa_family = a1;
  *(_QWORD *)&v25.sa_len = 0;
  *(_QWORD *)&v25.sa_data[6] = 0;
  v27 = 0;
  v26 = 0;
  if (a2)
  {
    v11 = SockAddrSimplify(a2, (uint64_t)&v25);
    if ((_DWORD)v11)
      return v11;
    if (!sa_family)
      sa_family = v25.sa_family;
    v12 = &v25;
  }
  else
  {
    if (!a1)
      return 4294960591;
    v12 = 0;
  }
  memset(v23, 0, sizeof(v23));
  v24 = 0;
  v22 = 0;
  v13 = socket(sa_family, 2, 17);
  if ((v13 & 0x80000000) == 0)
    goto LABEL_9;
  if (!*__error())
    return 4294960596;
  v11 = *__error();
  if (!(_DWORD)v11)
  {
LABEL_9:
    v21 = 1;
    setsockopt(v13, 0xFFFF, 4130, &v21, 4u);
    SocketSetNonBlocking(v13, 1);
    if (a4 == -1)
    {
      if (!v12)
        goto LABEL_56;
      goto LABEL_21;
    }
    if (a4 >= 0)
      v14 = a4;
    else
      v14 = -a4;
    if (sa_family == 30)
    {
      *(_WORD *)v23 = 7708;
      *(_WORD *)&v23[2] = bswap32(v14) >> 16;
      *(_DWORD *)&v23[4] = 0;
      *(_OWORD *)&v23[8] = *MEMORY[0x1E0C83920];
      v15 = &v24;
      v16 = 28;
    }
    else
    {
      if (sa_family != 2)
      {
        v11 = 4294960561;
        goto LABEL_64;
      }
      *(_QWORD *)&v23[8] = 0;
      *(_WORD *)v23 = 528;
      *(_WORD *)&v23[2] = bswap32(v14) >> 16;
      v15 = (int *)&v23[4];
      v16 = 16;
    }
    *v15 = 0;
    v22 = v16;
    if (bind(v13, (const sockaddr *)v23, v16))
    {
      if (*__error())
      {
        v11 = *__error();
        if ((a4 & 0x80000000) == 0)
        {
LABEL_43:
          if ((_DWORD)v11)
            goto LABEL_64;
          goto LABEL_44;
        }
      }
      else
      {
        v11 = 4294960596;
        if ((a4 & 0x80000000) == 0)
          goto LABEL_43;
      }
      if (!(_DWORD)v11)
        goto LABEL_43;
      if (v23[1] == 30 || v23[1] == 2)
        *(_WORD *)&v23[2] = 0;
      if (bind(v13, (const sockaddr *)v23, v16))
      {
        if (!*__error())
          goto LABEL_63;
        v11 = *__error();
        goto LABEL_43;
      }
    }
LABEL_44:
    if (!v12)
      goto LABEL_56;
    v18 = v12->sa_family;
    if (v18 == 30)
    {
      if (v12->sa_data[6] == 255)
        goto LABEL_56;
    }
    else if (v18 == 2 && (v12->sa_data[2] & 0xF0) == 0xE0)
    {
      goto LABEL_56;
    }
LABEL_21:
    if (a3 < 1)
    {
      if (v25.sa_family == 30)
        v17 = 28;
      else
        v17 = 16 * (v25.sa_family == 2);
    }
    else if (v25.sa_family == 30)
    {
      *(_WORD *)v25.sa_data = bswap32(a3) >> 16;
      v17 = 28;
    }
    else if (v25.sa_family == 2)
    {
      *(_WORD *)v25.sa_data = bswap32(a3) >> 16;
      v17 = 16;
    }
    else
    {
      v17 = 0;
    }
    if (!connect(v13, &v25, v17))
    {
LABEL_56:
      if (!a5)
      {
LABEL_70:
        v11 = 0;
        *a6 = v13;
        return v11;
      }
      v22 = 28;
      if (!getsockname(v13, (sockaddr *)v23, &v22))
      {
LABEL_60:
        if (v23[1] == 30 || v23[1] == 2)
          v19 = bswap32(*(unsigned __int16 *)&v23[2]) >> 16;
        else
          v19 = -1;
        *a5 = v19;
        goto LABEL_70;
      }
      if (*__error())
      {
        v11 = *__error();
        if (!(_DWORD)v11)
          goto LABEL_60;
        goto LABEL_64;
      }
      goto LABEL_63;
    }
    if (*__error())
    {
      v11 = *__error();
      if (!(_DWORD)v11)
        goto LABEL_56;
LABEL_64:
      if ((v13 & 0x80000000) == 0 && close(v13) && *__error())
        __error();
      return v11;
    }
LABEL_63:
    v11 = 4294960596;
    goto LABEL_64;
  }
  return v11;
}

uint64_t SockAddrSimplify(__int128 *a1, uint64_t a2)
{
  int v2;
  uint64_t v3;
  __int128 v4;
  unsigned int v5;
  uint64_t v6;
  int v7;
  int v8;
  unsigned __int16 v9;
  uint64_t v10;
  int v12;
  int v13;
  __int16 v14;

  v2 = *((unsigned __int8 *)a1 + 1);
  if (v2 == 30)
  {
    v5 = *((_DWORD *)a1 + 2);
    if (v5)
    {
      if ((*((_DWORD *)a1 + 2) & 0xC0FF) == 0x80FE)
      {
        v3 = 0;
        v6 = *(_QWORD *)((char *)a1 + 12);
        v7 = (v5 >> 8) & 0xFF00 | HIBYTE(v5);
        v8 = *((_DWORD *)a1 + 5);
        if (*((_DWORD *)a1 + 6))
          v7 = *((_DWORD *)a1 + 6);
        v9 = *((_WORD *)a1 + 4);
        *(_QWORD *)a2 = *(_QWORD *)a1;
        *(_DWORD *)(a2 + 8) = v9;
        *(_QWORD *)(a2 + 12) = v6;
        *(_DWORD *)(a2 + 20) = v8;
        *(_DWORD *)(a2 + 24) = v7;
        return v3;
      }
LABEL_12:
      if (a1 != (__int128 *)a2)
      {
        v3 = 0;
        v4 = *a1;
        v10 = *((_QWORD *)a1 + 2);
        *(_DWORD *)(a2 + 24) = *((_DWORD *)a1 + 6);
        *(_QWORD *)(a2 + 16) = v10;
        goto LABEL_14;
      }
      return 0;
    }
    if (*((_DWORD *)a1 + 3))
      goto LABEL_12;
    v12 = *((_DWORD *)a1 + 4);
    if (v12)
    {
      if (v12 != -65536)
        goto LABEL_12;
      v13 = *((_DWORD *)a1 + 5);
    }
    else
    {
      v13 = *((_DWORD *)a1 + 5);
      if ((v13 | 0x1000000) == 0x1000000)
        goto LABEL_12;
    }
    v3 = 0;
    v14 = *((_WORD *)a1 + 1);
    *(_QWORD *)(a2 + 8) = 0;
    *(_WORD *)a2 = 528;
    *(_WORD *)(a2 + 2) = v14;
    *(_DWORD *)(a2 + 4) = v13;
    return v3;
  }
  if (v2 == 2)
  {
    if (a1 != (__int128 *)a2)
    {
      v3 = 0;
      v4 = *a1;
LABEL_14:
      *(_OWORD *)a2 = v4;
      return v3;
    }
    return 0;
  }
  return 4294960561;
}

uint64_t SockAddrSetPort(uint64_t result, unsigned int a2)
{
  int v2;

  v2 = *(unsigned __int8 *)(result + 1);
  if (v2 == 30 || v2 == 2)
    *(_WORD *)(result + 2) = bswap32(a2) >> 16;
  return result;
}

uint64_t SockAddrGetSize(uint64_t a1)
{
  int v1;
  unsigned int v2;

  v1 = *(unsigned __int8 *)(a1 + 1);
  if (v1 == 30)
    v2 = 28;
  else
    v2 = 0;
  if (v1 == 2)
    return 16;
  else
    return v2;
}

uint64_t UpdateIOVec(uint64_t **a1, int *a2, unint64_t a3)
{
  uint64_t v3;
  unint64_t v4;
  uint64_t *i;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  _QWORD *v10;

  v3 = *a2;
  if ((int)v3 < 1)
    return 0;
  v4 = (unint64_t)&(*a1)[2 * v3];
  for (i = *a1 + 1; ; i += 2)
  {
    v6 = i - 1;
    v7 = *(i - 1);
    v8 = *i;
    v9 = a3 - *i;
    if (a3 < *i)
      break;
    *(i - 1) = v7 + v8;
    *i = 0;
    v10 = i + 1;
    a3 = v9;
    if ((unint64_t)v10 >= v4)
      return 0;
  }
  *(i - 1) = v7 + a3;
  *i = (v8 - a3);
  *a1 = v6;
  *a2 = (v4 - (unint64_t)v6) >> 4;
  return 35;
}

uint64_t NetSocket_Create(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;
  int v5;
  int v6;
  int v8;
  int v9;
  uint64_t v10;

  v10 = *MEMORY[0x1E0C80C00];
  v2 = malloc_type_calloc(1uLL, 0x78uLL, 0x10B0040AF8E8938uLL);
  if (!v2)
    return 4294960568;
  v3 = v2;
  *v2 = -2441908381;
  *(_QWORD *)((char *)v2 + 12) = -1;
  if (!pipe(&v8))
    goto LABEL_5;
  if (!*__error())
  {
    v4 = 4294960596;
    goto LABEL_7;
  }
  v4 = *__error();
  if ((_DWORD)v4)
  {
LABEL_7:
    NetSocket_Delete(v3);
    return v4;
  }
LABEL_5:
  v6 = v8;
  v5 = v9;
  *((_DWORD *)v3 + 3) = v9;
  *((_DWORD *)v3 + 4) = v6;
  SocketSetNonBlocking(v5, 1);
  SocketSetNonBlocking(*((_DWORD *)v3 + 4), 1);
  v4 = 0;
  v3[3] = NetSocket_ReadInternal;
  v3[4] = NetSocket_WriteInternal;
  v3[5] = NetSocket_WriteVInternal;
  v3[6] = NetSocket_WriteFileSlow;
  *a1 = v3;
  return v4;
}

uint64_t NetSocket_ReadInternal(uint64_t a1, size_t a2, uint64_t a3, char *__dst, size_t *a5, int a6, unsigned int a7)
{
  char *v11;
  int64_t v12;
  const void *v14;
  uint64_t v15;
  size_t v16;
  ssize_t v17;
  uint64_t result;

  if (a1 && *(_DWORD *)a1 == 1853058915)
  {
    if (*(_BYTE *)(a1 + 8))
    {
      v16 = 0;
      result = 4294960573;
    }
    else if ((*(_DWORD *)(a1 + 4) & 0x80000000) != 0)
    {
      v16 = 0;
      result = 4294960551;
    }
    else
    {
      v11 = __dst;
      v12 = a3;
      v14 = *(const void **)(a1 + 64);
      v15 = *(_QWORD *)(a1 + 72) - (_QWORD)v14;
      if (v15 < 1)
      {
        v16 = 0;
      }
      else
      {
        if (v15 >= a3)
          v16 = a3;
        else
          v16 = *(_QWORD *)(a1 + 72) - (_QWORD)v14;
        memcpy(__dst, v14, v16);
        *(_QWORD *)(a1 + 64) += v16;
        v11 += v16;
        v12 -= v16;
      }
      if (v12 >= 1)
      {
        while (1)
        {
          v17 = recv(*(_DWORD *)(a1 + 4), v11, v12, a6);
          if (v17 >= 1)
            break;
          if (!v17)
          {
            if (v16 >= a2)
              result = 0;
            else
              result = 4294960543;
            goto LABEL_28;
          }
          if (!*__error())
          {
            result = 4294960596;
            goto LABEL_28;
          }
          result = *__error();
          if ((_DWORD)result != 4)
          {
            if ((_DWORD)result != 35)
              goto LABEL_28;
            if (v16 >= a2)
              goto LABEL_23;
            result = NetSocket_Wait(a1, *(_DWORD *)(a1 + 4), 0, a7);
            if ((_DWORD)result)
              goto LABEL_28;
LABEL_21:
            result = 0;
            if (v12 <= 0)
              goto LABEL_28;
          }
        }
        v11 += v17;
        v12 -= v17;
        v16 += v17;
        goto LABEL_21;
      }
LABEL_23:
      result = 0;
    }
  }
  else
  {
    v16 = 0;
    result = 4294960556;
  }
LABEL_28:
  if (a5)
    *a5 = v16;
  return result;
}

uint64_t NetSocket_WriteInternal(uint64_t a1, char *__buf, size_t __nbyte, unsigned int a4)
{
  size_t v5;
  ssize_t v8;
  uint64_t result;

  if (!a1)
    return 4294960556;
  if (*(_DWORD *)a1 != 1853058915)
    return 4294960556;
  if (*(_BYTE *)(a1 + 8))
    return 4294960573;
  if ((*(_DWORD *)(a1 + 4) & 0x80000000) != 0)
    return 4294960551;
  v5 = __nbyte;
  while (v5)
  {
    v8 = write(*(_DWORD *)(a1 + 4), __buf, v5);
    if (v8 < 1)
    {
      if (!*__error())
        return 4294960596;
      result = *__error();
      if ((_DWORD)result != 4)
      {
        if ((_DWORD)result != 35)
          return result;
        result = NetSocket_Wait(a1, *(_DWORD *)(a1 + 4), 1, a4);
        if ((_DWORD)result)
          return result;
      }
    }
    else
    {
      __buf += v8;
      v5 -= v8;
    }
  }
  return 0;
}

uint64_t NetSocket_WriteVInternal(uint64_t a1, iovec *a2, int a3, unsigned int a4)
{
  int v5;
  ssize_t v8;
  uint64_t result;
  int64_t iov_len;
  BOOL v11;

  if (!a1)
    return 4294960556;
  if (*(_DWORD *)a1 != 1853058915)
    return 4294960556;
  if (*(_BYTE *)(a1 + 8))
    return 4294960573;
  if ((*(_DWORD *)(a1 + 4) & 0x80000000) != 0)
    return 4294960551;
  v5 = a3;
  if (!a3)
    return 0;
  while (1)
  {
    while (1)
    {
      v8 = writev(*(_DWORD *)(a1 + 4), a2, v5);
      if (v8 < 1)
        break;
      if (v5 < 1)
      {
        if (!v5)
          return 0;
        iov_len = a2->iov_len;
      }
      else
      {
        while (1)
        {
          iov_len = a2->iov_len;
          if (v8 < iov_len)
            break;
          ++a2;
          v8 -= iov_len;
          v11 = __OFSUB__(v5--, 1);
          if ((v5 < 0) ^ v11 | (v5 == 0))
            return 0;
        }
      }
      a2->iov_base = (char *)a2->iov_base + v8;
      a2->iov_len = iov_len - v8;
    }
    if (!v8)
      return 4294960591;
    if (!*__error())
      break;
    result = *__error();
    if ((_DWORD)result != 4)
    {
      if ((_DWORD)result != 35)
        return result;
      result = NetSocket_Wait(a1, *(_DWORD *)(a1 + 4), 1, a4);
      if ((_DWORD)result)
        return result;
    }
  }
  return 4294960596;
}

uint64_t NetSocket_WriteFileSlow(uint64_t a1, const void *a2, uint64_t a3, uint64_t a4, unsigned int a5, int a6, off_t a7, uint64_t a8, unsigned int a9)
{
  int *v16;
  void *v17;
  void *v18;
  uint64_t v19;
  uint64_t v20;
  char v21;
  size_t v22;
  ssize_t v23;
  ssize_t v24;
  int v25;
  uint64_t v26;
  _QWORD *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  BOOL v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  unsigned int v42;
  uint64_t v43;
  int *v45;
  uint64_t v46;
  _OWORD __dst[8];
  uint64_t v48;

  v48 = *MEMORY[0x1E0C80C00];
  if (*(_QWORD *)(a1 + 112))
    v16 = *(int **)(a1 + 112);
  else
    v16 = (int *)&gLogCategory_NetSocket;
  mach_absolute_time();
  if (SecondsToUpTicks_sOnce != -1)
    dispatch_once_f(&SecondsToUpTicks_sOnce, &SecondsToUpTicks_sMultiplier, (dispatch_function_t)_SecondsToUpTicksInit);
  v46 = SecondsToUpTicks_sMultiplier;
  if (UpTicksPerSecond_sOnce != -1)
    dispatch_once_f(&UpTicksPerSecond_sOnce, &UpTicksPerSecond_sTicksPerSecond, (dispatch_function_t)_UpTicksPerSecondInit);
  if (*(_DWORD *)a1 != 1853058915)
  {
    v19 = 0;
    v35 = 4294960556;
    goto LABEL_52;
  }
  if (*(_BYTE *)(a1 + 8))
  {
    v19 = 0;
    v35 = 4294960573;
    goto LABEL_52;
  }
  if ((*(_DWORD *)(a1 + 4) & 0x80000000) != 0)
  {
    v19 = 0;
    v35 = 4294960551;
    goto LABEL_52;
  }
  if (lseek(a6, a7, 0) == -1)
  {
    if (!*__error())
    {
      v19 = 0;
      v35 = 4294960596;
      goto LABEL_52;
    }
    v35 = *__error();
    if ((_DWORD)v35)
      goto LABEL_40;
  }
  if (a8 >= 1)
  {
    v43 = a4;
    v17 = malloc_type_malloc(0x100000uLL, 0xC71F94CuLL);
    if (!v17)
    {
      v19 = 0;
      v35 = 4294960568;
      goto LABEL_52;
    }
    v18 = v17;
    v42 = a5;
    v45 = v16;
    v19 = 0;
    v20 = 0;
    v21 = 1;
    while (1)
    {
      v22 = a8 >= 0x100000 ? 0x100000 : a8;
      v23 = read(a6, v18, v22);
      v24 = v23;
      if (v23 < 1)
        break;
      if ((v21 & 1) != 0)
      {
        if ((int)a3 < 1)
        {
          v25 = 0;
        }
        else
        {
          memcpy(__dst, a2, 16 * a3);
          v25 = a3;
        }
        v27 = &__dst[v25];
        *v27 = v18;
        v27[1] = v24;
        v26 = (*(uint64_t (**)(uint64_t, _OWORD *, _QWORD, _QWORD))(a1 + 40))(a1, __dst, (v25 + 1), a9);
        if ((_DWORD)v26)
        {
LABEL_44:
          v35 = v26;
LABEL_50:
          v16 = v45;
          goto LABEL_51;
        }
      }
      else
      {
        v26 = (*(uint64_t (**)(uint64_t, void *, ssize_t, _QWORD))(a1 + 32))(a1, v18, v23, a9);
        if ((_DWORD)v26)
          goto LABEL_44;
      }
      v19 += v24;
      v28 = mach_absolute_time();
      if (v28 >= v20)
      {
        v33 = v28;
        if (*v45 <= 40 && (*v45 != -1 || _LogCategory_Initialize((uint64_t)v45, 0x28u)))
          LogPrintF((uint64_t)v45, (uint64_t)"OSStatus NetSocket_WriteFileSlow(NetSocketRef, iovec_t *, int, iovec_t *, int, FDRef, int64_t, int64_t, int32_t)", 0x28u, (uint64_t)"Wrote %10lld of %10lld, %6.2f%%, %6.2f Mbit/sec\n", v29, v30, v31, v32, v19);
        v20 = v33 + v46;
      }
      v21 = 0;
      v34 = a8 <= v24;
      a8 -= v24;
      if (v34)
      {
        v16 = v45;
        goto LABEL_47;
      }
    }
    if (!v23)
    {
      v35 = 4294960546;
      goto LABEL_50;
    }
    v16 = v45;
    if (*__error())
      v35 = *__error();
    else
      v35 = 4294960596;
    goto LABEL_51;
  }
  v36 = (*(uint64_t (**)(uint64_t, const void *, uint64_t, _QWORD))(a1 + 40))(a1, a2, a3, a9);
  if ((_DWORD)v36)
  {
    v35 = v36;
LABEL_40:
    v19 = 0;
    goto LABEL_52;
  }
  v43 = a4;
  v42 = a5;
  v18 = 0;
  v19 = 0;
LABEL_47:
  v35 = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, _QWORD))(a1 + 40))(a1, v43, v42, a9);
  if (v18)
LABEL_51:
    free(v18);
LABEL_52:
  mach_absolute_time();
  if (*v16 <= 40 && (*v16 != -1 || _LogCategory_Initialize((uint64_t)v16, 0x28u)))
    LogPrintF((uint64_t)v16, (uint64_t)"OSStatus NetSocket_WriteFileSlow(NetSocketRef, iovec_t *, int, iovec_t *, int, FDRef, int64_t, int64_t, int32_t)", 0x28u, (uint64_t)"Wrote %lld of %lld, %6.2f Mbit/sec: %#m\n", v37, v38, v39, v40, v19);
  return v35;
}

uint64_t NetSocket_Delete(_QWORD *a1)
{
  void (*v2)(_QWORD *);
  int v3;
  int v4;
  int v5;
  void *v6;

  if (!a1)
    return 4294960556;
  if (*(_DWORD *)a1 != 1853058915)
    return 4294960556;
  v2 = (void (*)(_QWORD *))a1[7];
  if (v2)
    v2(a1);
  v3 = *((_DWORD *)a1 + 1);
  if ((v3 & 0x80000000) == 0)
  {
    if (close(v3) && *__error())
      __error();
    *((_DWORD *)a1 + 1) = -1;
  }
  v4 = *((_DWORD *)a1 + 3);
  if ((v4 & 0x80000000) == 0)
  {
    if (close(v4) && *__error())
      __error();
    *((_DWORD *)a1 + 3) = -1;
  }
  v5 = *((_DWORD *)a1 + 4);
  if ((v5 & 0x80000000) == 0)
  {
    if (close(v5) && *__error())
      __error();
    *((_DWORD *)a1 + 4) = -1;
  }
  v6 = (void *)a1[10];
  if (v6)
    free(v6);
  free(a1);
  return 0;
}

uint64_t NetSocket_Wait(uint64_t a1, unsigned int a2, int a3, unsigned int a4)
{
  int v8;
  fd_set *v9;
  fd_set *v10;
  timeval *v11;
  signed int v12;
  int v13;
  int v14;
  uint64_t result;
  int v16;
  uint64_t v17;
  uint64_t v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  fd_set v27;

  if (!a1)
    return 4294960556;
  if (*(_DWORD *)a1 != 1853058915)
    return 4294960556;
  if (*(_BYTE *)(a1 + 8))
    return 4294960573;
  if ((a2 & 0x80000000) != 0)
    return 4294960551;
  v25 = 0u;
  v26 = 0u;
  v23 = 0u;
  v24 = 0u;
  v21 = 0u;
  v22 = 0u;
  v19 = 0u;
  v20 = 0u;
  v17 = 0;
  v18 = 0;
  memset(&v27, 0, sizeof(v27));
  v8 = *(_DWORD *)(a1 + 16);
  if (__darwin_check_fd_set_overflow(v8, &v27, 0))
    *(__int32_t *)((char *)v27.fds_bits + (((unint64_t)v8 >> 3) & 0x1FFFFFFFFFFFFFFCLL)) |= 1 << v8;
  if (a3 == 2)
  {
    if (__darwin_check_fd_set_overflow(a2, &v27, 0))
      v27.fds_bits[a2 >> 5] |= 1 << a2;
  }
  else if (a3 != 1)
  {
    if (a3)
      return 4294960591;
    v9 = &v27;
    v10 = 0;
    if (!__darwin_check_fd_set_overflow(a2, &v27, 0))
      goto LABEL_16;
    goto LABEL_15;
  }
  v25 = 0u;
  v26 = 0u;
  v23 = 0u;
  v24 = 0u;
  v21 = 0u;
  v22 = 0u;
  v19 = 0u;
  v20 = 0u;
  v9 = (fd_set *)&v19;
  v10 = (fd_set *)&v19;
  if (__darwin_check_fd_set_overflow(a2, &v19, 0))
LABEL_15:
    v9->fds_bits[a2 >> 5] |= 1 << a2;
LABEL_16:
  if ((a4 & 0x80000000) != 0)
  {
    v11 = 0;
  }
  else
  {
    v17 = a4;
    LODWORD(v18) = 0;
    v11 = (timeval *)&v17;
  }
  v12 = *(_DWORD *)(a1 + 16);
  if (v12 <= (int)a2)
    v12 = a2;
  v13 = v12 + 1;
  while (1)
  {
    v14 = select(v13, &v27, v10, 0, v11);
    if ((v14 & 0x80000000) == 0)
      break;
    if (!*__error())
      return 4294960596;
    result = *__error();
    if ((_DWORD)result != 4)
      return result;
  }
  if (!v14)
    return 4294960574;
  v16 = *(_DWORD *)(a1 + 16);
  if (__darwin_check_fd_set_overflow(v16, &v27, 0)
    && ((*(unsigned int *)((char *)v27.fds_bits + (((unint64_t)v16 >> 3) & 0x1FFFFFFFFFFFFFFCLL)) >> v16) & 1) != 0)
  {
    return 4294960573;
  }
  return 0;
}

uint64_t NetSocket_CreateWithNative(_QWORD *a1, int a2)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;

  if (a2 < 0)
    return 4294960591;
  v6 = 0;
  result = NetSocket_Create(&v6);
  if (!(_DWORD)result)
  {
    v5 = v6;
    *(_DWORD *)(v6 + 4) = a2;
    *a1 = v5;
  }
  return result;
}

uint64_t NetSocket_GetNative(_DWORD *a1)
{
  if (a1 && *a1 == 1853058915)
    return a1[1];
  else
    return 0xFFFFFFFFLL;
}

uint64_t NetSocket_Cancel(uint64_t a1)
{
  if (!a1)
    return 4294960556;
  if (*(_DWORD *)a1 != 1853058915)
    return 4294960556;
  if (*(_BYTE *)(a1 + 8))
    return 0;
  *(_BYTE *)(a1 + 8) = 1;
  if (write(*(_DWORD *)(a1 + 12), "Q", 1uLL) == 1)
    return 0;
  if (*__error())
    return *__error();
  return 4294960596;
}

uint64_t NetSocket_Reset(uint64_t a1)
{
  uint64_t v2;
  uint64_t result;
  _BYTE v5[16];
  uint64_t v6;

  v6 = *MEMORY[0x1E0C80C00];
  if (!a1 || *(_DWORD *)a1 != 1853058915)
    return 4294960556;
  v2 = 99;
  while (read(*(_DWORD *)(a1 + 16), v5, 0x10uLL) >= 1 && v2-- != 0)
    ;
  result = 0;
  *(_BYTE *)(a1 + 8) = 0;
  return result;
}

uint64_t NetSocket_TCPConnect(uint64_t a1, _BYTE *a2, unsigned int a3, unsigned int a4)
{
  _BYTE *v5;
  int v8;
  _BYTE *v9;
  char *i;
  int v11;
  int v12;
  uint64_t result;
  int v14;
  addrinfo *v15;
  int v16;
  int v17;
  unsigned int v18;
  addrinfo *v19;
  addrinfo v20;
  uint64_t v21;
  sockaddr v22;
  uint64_t v23;
  int v24;
  char __str[32];
  char v26[272];
  uint64_t v27;

  v27 = *MEMORY[0x1E0C80C00];
  if (!a1 || *(_DWORD *)a1 != 1853058915)
    return 4294960556;
  if (*(_BYTE *)(a1 + 8))
    return 4294960573;
  v5 = a2;
  if (!*a2)
    return 4294960543;
  v18 = bswap32(a3) >> 16;
  v8 = -1;
  while (1)
  {
    *(_QWORD *)&v22.sa_len = 0;
    *(_QWORD *)&v22.sa_data[6] = 0;
    v24 = 0;
    v23 = 0;
    v9 = v5;
    v21 = 0;
    while (*v9 && *v9 != 44)
      ++v9;
    if ((unint64_t)(v9 - v5) > 0x10F)
      return 4294960553;
    __memcpy_chk();
    v26[v9 - v5] = 0;
    if (*v9)
      v5 = v9 + 1;
    else
      v5 = v9;
    if (!StringToSockAddr((unsigned __int8 *)v26, (uint64_t)&v22, 0x1CuLL, &v21))
    {
      v8 = socket(v22.sa_family, 1, 6);
      if ((v8 & 0x80000000) == 0)
      {
        if ((v22.sa_family == 30 || v22.sa_family == 2)
          && !*(_WORD *)v22.sa_data
          && (v22.sa_family == 30 || v22.sa_family == 2))
        {
          *(_WORD *)v22.sa_data = v18;
        }
        v11 = _NetSocket_Connect(a1, v8, &v22, a4);
        if (!v11)
          return 0;
        v12 = v11;
        close(v8);
        result = 4294960573;
        if (v12 == -6723)
          return result;
        v8 = -1;
      }
      goto LABEL_40;
    }
    for (i = v26; *i; ++i)
    {
      if (*i == 58)
      {
        *i = 0;
        v14 = strtoul(i + 1, 0, 10);
        if (v14)
          goto LABEL_31;
        break;
      }
    }
    v14 = a3;
LABEL_31:
    if (v14 >= 1)
    {
      memset(&v20, 0, sizeof(v20));
      v19 = 0;
      snprintf(__str, 0x20uLL, "%u", v14);
      memset(&v20, 0, sizeof(v20));
      v20.ai_socktype = 1;
      if (!getaddrinfo(v26, __str, &v20, &v19))
      {
        v15 = v19;
        if (v19)
          break;
      }
    }
LABEL_40:
    if (!*v5)
    {
      if ((v8 & 0x80000000) == 0)
        return 0;
      return 4294960543;
    }
  }
  while (1)
  {
    v8 = socket(v15->ai_family, v15->ai_socktype, v15->ai_protocol);
    if ((v8 & 0x80000000) == 0)
      break;
LABEL_38:
    v15 = v15->ai_next;
    if (!v15)
    {
      freeaddrinfo(v19);
      goto LABEL_40;
    }
  }
  v16 = _NetSocket_Connect(a1, v8, v15->ai_addr, a4);
  if (!v16)
  {
    freeaddrinfo(v19);
    return 0;
  }
  v17 = v16;
  close(v8);
  if (v17 != -6723)
  {
    v8 = -1;
    goto LABEL_38;
  }
  freeaddrinfo(v19);
  return 4294960573;
}

uint64_t StringToSockAddr(unsigned __int8 *a1, uint64_t a2, unint64_t a3, _QWORD *a4)
{
  unsigned __int8 *v8;
  int v9;
  unint64_t v10;
  char *v11;
  unsigned int v12;
  unsigned __int8 *v13;
  char *v14;
  char v15;
  int v16;
  uint64_t v19;
  int v21;
  int v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  char *v27;
  char *v28;
  uint64_t result;
  unsigned int v31;
  int v32;
  int v33;
  int v34;
  int v35;
  unsigned int v36;
  int v37;
  unsigned __int8 *v38;
  int v39;
  int v40;
  int v41;
  int v42;
  int v43;
  uint64_t i;
  int v45;
  BOOL v46;
  BOOL v47;
  int v48;
  char *v49;
  int v50;
  __int128 v51;
  unsigned int v52;
  unsigned int v53;
  _QWORD *v54;
  uint64_t v55;
  __int128 v56;
  char v57[16];
  uint64_t v58;

  v58 = *MEMORY[0x1E0C80C00];
  v55 = 0;
  if (!StringToIPv4Address(a1, (_DWORD *)&v55 + 1, (int *)&v55))
  {
    if (a3 >= 0x10)
    {
      *(_QWORD *)(a2 + 8) = 0;
      *(_WORD *)a2 = 528;
      *(_WORD *)(a2 + 2) = bswap32((unsigned __int16)v55) >> 16;
      *(_DWORD *)(a2 + 4) = bswap32(HIDWORD(v55));
      result = 0;
      if (a4)
        *a4 = 16;
      return result;
    }
    return 4294960553;
  }
  if (a3 < 0x1C)
    return 4294960553;
  if (!a1)
    return 4294960591;
  if (*a1 == 91)
    v8 = a1 + 1;
  else
    v8 = a1;
  *(_QWORD *)v57 = v8;
  v56 = 0uLL;
  if (*v8 == 58)
  {
    v9 = *++v8;
    *(_QWORD *)v57 = v8;
    if (v9 != 58)
      return 4294960554;
  }
  v10 = 0;
  v11 = 0;
LABEL_10:
  v12 = 0;
  v13 = v8;
  v14 = v11;
  while (2)
  {
    v11 = v14;
    v8 = v13 + 1;
    v15 = 1;
    while (1)
    {
      v16 = *(v8 - 1);
      if ((v16 - 37) <= 0x38 && ((1 << (v16 - 37)) & 0x100000000000401) != 0
        || v16 == 0)
      {
        *(_QWORD *)v57 = v8;
        goto LABEL_35;
      }
      v16 = (char)v16;
      if (((char)v16 - 97) < 6)
        v16 = (char)v16 - 32;
      v19 = v16 - 48;
      if (v19 >= 0xA && (v16 - 65) > 5)
        break;
      v15 = 0;
      ++v8;
      v21 = ParseIPv6Address_kASCIItoHexTable[v19];
      v22 = (unsigned __int16)(v12 >> 12);
      v12 = v21 | (16 * v12);
      if (v22)
        return 4294960586;
    }
    if (v16 == 58)
    {
      if ((v15 & 1) != 0)
      {
        v13 = v8;
        v14 = &v57[v10 - 16];
        if (!v11)
          continue;
        return 4294960554;
      }
      *(_QWORD *)v57 = v8;
      if (*v8)
      {
        if (v10 <= 0xE)
        {
          v23 = v10 | 1;
          v57[v10 - 16] = BYTE1(v12);
          v10 += 2;
          v57[v23 - 16] = v12;
          goto LABEL_10;
        }
        return 4294960545;
      }
      return 4294960546;
    }
    break;
  }
  *(_QWORD *)v57 = v8;
  if (v16 == 46 && v10 <= 0xC)
  {
    result = ParseIPv4Address(v13, &v57[v10 - 16], (unsigned __int8 **)v57);
    if ((_DWORD)result)
      return result;
    v10 += 4;
    v8 = (unsigned __int8 *)++*(_QWORD *)v57;
    if (!v11)
      goto LABEL_53;
LABEL_39:
    if ((uint64_t)v10 <= 15)
    {
      v25 = (char *)(&v57[v10 - 16] - v11);
      if ((int)(&v57[v10 - 16] - (_DWORD)v11) >= 1)
      {
        v26 = ((_DWORD)v25 + 1) - 1;
        v27 = (char *)&v56 + 15;
        v28 = &v11[(int)v25 - 1];
        do
        {
          *v27-- = *v28;
          *v28-- = 0;
          --v26;
        }
        while (v26);
        v8 = *(unsigned __int8 **)v57;
      }
      goto LABEL_54;
    }
    return 4294960545;
  }
LABEL_35:
  if ((v15 & 1) == 0)
  {
    if (v10 > 0xE)
      return 4294960545;
    v24 = v10 | 1;
    v57[v10 - 16] = BYTE1(v12);
    v10 += 2;
    v57[v24 - 16] = v12;
  }
  if (v11)
    goto LABEL_39;
LABEL_53:
  if (v10 != 16)
    return 4294960546;
LABEL_54:
  v54 = a4;
  v31 = 0;
  v32 = 0;
  v33 = 0;
  v34 = 0;
  v35 = 0;
  v36 = 0;
  v37 = 0;
  v38 = v8 - 1;
LABEL_55:
  while (2)
  {
    v39 = (char)*v38;
    while (1)
    {
      while (v39 == 47)
      {
        if (v35)
          return 4294960554;
        v40 = (char)*++v38;
        v39 = v40;
        if ((v40 - 48) <= 9)
        {
          do
          {
            v36 = v39 + 10 * v36 - 48;
            v41 = (char)*++v38;
            v39 = v41;
          }
          while ((v41 - 48) < 0xA);
        }
        v35 = 1;
        if (v36 > 0x80)
          return 4294960586;
      }
      if (v39 == 93)
      {
        if (v37)
          return 4294960554;
        ++v38;
        v37 = 1;
        goto LABEL_55;
      }
      if (v39 != 58)
        break;
      if (v33)
        return 4294960554;
      v42 = (char)*++v38;
      v39 = v42;
      if ((v42 - 48) <= 9)
      {
        do
        {
          v34 = v39 + 10 * v34 - 48;
          v43 = (char)*++v38;
          v39 = v43;
        }
        while ((v43 - 48) < 0xA);
      }
      v33 = 1;
      if (v34 >= 0x10000)
        return 4294960586;
    }
    if (v39 == 37)
    {
      if (!v32)
      {
        for (i = 0; ; ++i)
        {
          v45 = v38[i + 1];
          v46 = (v45 - 47) > 0x2E || ((1 << (v45 - 47)) & 0x400000000801) == 0;
          v47 = !v46 || v45 == 0;
          if (v47 || i == 63)
            break;
          v57[i] = v45;
        }
        v38 += i + 1;
        v57[i] = 0;
        v31 = if_nametoindex(v57);
        if (v31)
          goto LABEL_92;
        v48 = v57[0];
        if (v57[0] - 48 > 9)
        {
          v31 = 0;
          v49 = v57;
        }
        else
        {
          v31 = 0;
          v49 = v57;
          do
          {
            v31 = v48 + 10 * v31 - 48;
            v50 = *++v49;
            v48 = v50;
          }
          while ((v50 - 48) < 0xA);
        }
        if (!v48 && v49 != v57 && (int)((_DWORD)v49 - v57) < 11)
        {
LABEL_92:
          v32 = 1;
          continue;
        }
      }
      return 4294960554;
    }
    break;
  }
  v51 = v56;
  *(_OWORD *)v57 = v56;
  if (v32)
    v52 = v31;
  else
    v52 = 0;
  v53 = (unsigned __int16)v55;
  *(_DWORD *)(a2 + 4) = 0;
  *(_WORD *)a2 = 7708;
  if (v33)
    v53 = v34;
  *(_WORD *)(a2 + 2) = bswap32(v53) >> 16;
  *(_OWORD *)(a2 + 8) = v51;
  *(_DWORD *)(a2 + 24) = v52;
  if (!v54)
    return 0;
  result = 0;
  *v54 = 28;
  return result;
}

uint64_t _NetSocket_Connect(uint64_t a1, unsigned int a2, const sockaddr *a3, unsigned int a4)
{
  uint64_t result;
  int sa_family;
  int v10;
  socklen_t v11;
  int v12;
  socklen_t v13[2];

  if (*(_DWORD *)a1 != 1853058915)
    return 4294960556;
  if (*(_BYTE *)(a1 + 8))
    return 4294960573;
  if ((*(_DWORD *)(a1 + 4) & 0x80000000) == 0)
    return 4294960575;
  result = SocketSetNonBlocking(a2, 1);
  if (!(_DWORD)result)
  {
    *(_QWORD *)v13 = 0;
    sa_family = a3->sa_family;
    v10 = sa_family == 30 ? 28 : 0;
    v11 = sa_family == 2 ? 16 : v10;
    if (!connect(a2, a3, v11)
      || (result = NetSocket_Wait(a1, a2, 2, a4), !(_DWORD)result)
      && ((v13[0] = 4, v13[1] = 0, LODWORD(result) = getsockopt(a2, 0xFFFF, 4103, &v13[1], v13), (_DWORD)result)
        ? (result = result)
        : (result = v13[1]),
          !(_DWORD)result))
    {
      v12 = 1;
      setsockopt(a2, 0xFFFF, 4130, &v12, 4u);
      v13[1] = 1;
      setsockopt(a2, 6, 1, &v13[1], 4u);
      result = 0;
      *(_DWORD *)(a1 + 4) = a2;
    }
  }
  return result;
}

uint64_t NetSocket_Disconnect(uint64_t a1, unsigned int a2)
{
  int v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  ssize_t v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  _BYTE v13[32];
  uint64_t v14;

  v14 = *MEMORY[0x1E0C80C00];
  if (!a1 || *(_DWORD *)a1 != 1853058915)
    return 4294960556;
  if ((a2 & 0x80000000) != 0)
  {
    v5 = 4294960591;
    goto LABEL_21;
  }
  if (*(_BYTE *)(a1 + 8))
  {
    v5 = 4294960573;
    goto LABEL_21;
  }
  v4 = *(_DWORD *)(a1 + 4);
  if (v4 < 0)
  {
    v5 = 4294960551;
    goto LABEL_21;
  }
  if (!shutdown(v4, 1))
    goto LABEL_9;
  if (*__error())
  {
    v5 = *__error();
    if (!(_DWORD)v5)
    {
LABEL_9:
      v6 = mach_absolute_time();
      v7 = UpTicksToMicroseconds(v6) + 1000000 * a2;
      while (1)
      {
        v8 = recv(*(_DWORD *)(a1 + 4), v13, 0x20uLL, 0);
        if (v8 > 0)
          goto LABEL_16;
        if (!v8)
        {
          v5 = 0;
          break;
        }
        if (!*__error())
          goto LABEL_18;
        v5 = *__error();
        if ((_DWORD)v5 != 4)
        {
          if ((_DWORD)v5 != 35)
            break;
          v9 = NetSocket_Wait(a1, *(_DWORD *)(a1 + 4), 0, a2);
          if ((_DWORD)v9)
          {
            v5 = v9;
            break;
          }
LABEL_16:
          v10 = mach_absolute_time();
          if (UpTicksToMicroseconds(v10) > v7)
          {
            v5 = 4294960574;
            break;
          }
        }
      }
    }
  }
  else
  {
LABEL_18:
    v5 = 4294960596;
  }
LABEL_21:
  v11 = *(_DWORD *)(a1 + 4);
  if ((v11 & 0x80000000) == 0)
  {
    if (close(v11) && *__error())
      __error();
    *(_DWORD *)(a1 + 4) = -1;
  }
  return v5;
}

uint64_t NetSocket_WriteVSlow(uint64_t a1, _QWORD *a2, int a3, uint64_t a4)
{
  _QWORD *v6;
  unint64_t v7;
  uint64_t result;

  if (!a1)
    return 4294960556;
  if (*(_DWORD *)a1 != 1853058915)
    return 4294960556;
  if (a3 < 1)
    return 0;
  v6 = a2;
  v7 = (unint64_t)&a2[2 * a3];
  while (1)
  {
    result = (*(uint64_t (**)(uint64_t, _QWORD, _QWORD, uint64_t))(a1 + 32))(a1, *v6, v6[1], a4);
    if ((_DWORD)result)
      break;
    v6 += 2;
    if ((unint64_t)v6 >= v7)
      return 0;
  }
  return result;
}

uint64_t NetSocket_ReadFile(uint64_t a1, uint64_t a2, int a3, off_t a4, uint64_t a5)
{
  uint64_t v8;
  size_t v10;
  void *v11;
  void *v12;
  uint64_t v13;
  size_t v14;
  uint64_t v15;
  size_t v16;
  char *v17;
  size_t v18;
  ssize_t v19;
  uint64_t v20;
  void *v21;
  size_t __nbyte;

  v8 = a2;
  if (a2 >= 0x400000)
    v10 = 0x400000;
  else
    v10 = a2;
  __nbyte = v10;
  if (v10 > *(_QWORD *)(a1 + 88))
  {
    v11 = *(void **)(a1 + 80);
    if (v11)
    {
      free(v11);
      *(_QWORD *)(a1 + 80) = 0;
    }
    v12 = malloc_type_malloc(v10, 0x83FC56EEuLL);
    *(_QWORD *)(a1 + 80) = v12;
    if (!v12)
    {
      v20 = 4294960568;
      goto LABEL_27;
    }
    *(_QWORD *)(a1 + 88) = v10;
  }
  if (lseek(a3, a4, 0) != -1)
    goto LABEL_10;
  if (*__error())
  {
    v20 = *__error();
    if (!(_DWORD)v20)
    {
      while (1)
      {
LABEL_10:
        if (v8 < 1)
        {
          v20 = 0;
          goto LABEL_27;
        }
        v13 = *(_QWORD *)(a1 + 80);
        if (v8 >= *(_QWORD *)(a1 + 88))
          v14 = *(_QWORD *)(a1 + 88);
        else
          v14 = v8;
        __nbyte = v14;
        v15 = (*(uint64_t (**)(uint64_t, size_t, size_t, uint64_t, size_t *, _QWORD, uint64_t))(a1 + 24))(a1, v14, v14, v13, &__nbyte, 0, a5);
        if ((_DWORD)v15)
        {
          v20 = v15;
          goto LABEL_27;
        }
        v16 = __nbyte;
        if (__nbyte)
          break;
LABEL_21:
        v8 -= v16;
      }
      v17 = *(char **)(a1 + 80);
      v18 = __nbyte;
      while (1)
      {
        v19 = write(a3, v17, v18);
        if (v19 <= 0)
        {
          if (!*__error())
            goto LABEL_25;
          v20 = *__error();
          if ((_DWORD)v20)
            break;
        }
        v17 += v19;
        v18 = __nbyte - v19;
        __nbyte -= v19;
        if (!__nbyte)
          goto LABEL_21;
      }
    }
  }
  else
  {
LABEL_25:
    v20 = 4294960596;
  }
LABEL_27:
  if (*(_QWORD *)(a1 + 88) > 0x100000uLL)
  {
    v21 = *(void **)(a1 + 80);
    if (v21)
    {
      free(v21);
      *(_QWORD *)(a1 + 80) = 0;
    }
    *(_QWORD *)(a1 + 88) = 0;
  }
  return v20;
}

uint64_t TCPConnect(_BYTE *a1, char *__str, int a3, int *a4)
{
  unsigned int v7;
  unsigned int v8;
  _BYTE *v9;
  char *i;
  int v11;
  int v12;
  int v13;
  addrinfo *v14;
  int v15;
  uint64_t result;
  addrinfo *v17;
  addrinfo v18;
  uint64_t v19;
  sockaddr v20;
  uint64_t v21;
  int v22;
  char __stra[32];
  char v24[272];
  uint64_t v25;

  v25 = *MEMORY[0x1E0C80C00];
  if (__str)
    v7 = strtoul(__str, 0, 10);
  else
    v7 = 0;
  if (!*a1)
    return 4294960543;
  v8 = bswap32(v7) >> 16;
  while (1)
  {
    *(_QWORD *)&v20.sa_len = 0;
    *(_QWORD *)&v20.sa_data[6] = 0;
    v22 = 0;
    v21 = 0;
    v9 = a1;
    v19 = 0;
    while (*v9 && *v9 != 44)
      ++v9;
    if ((unint64_t)(v9 - a1) >= 0x110)
      return 4294960553;
    __memcpy_chk();
    v24[v9 - a1] = 0;
    if (*v9)
      a1 = v9 + 1;
    else
      a1 = v9;
    if (StringToSockAddr((unsigned __int8 *)v24, (uint64_t)&v20, 0x1CuLL, &v19))
    {
      for (i = v24; *i; ++i)
      {
        if (*i == 58)
        {
          *i = 0;
          v13 = strtoul(i + 1, 0, 10);
          if (v13)
            goto LABEL_30;
          break;
        }
      }
      v13 = v7;
LABEL_30:
      if (v13 >= 1)
      {
        memset(&v18, 0, sizeof(v18));
        v17 = 0;
        snprintf(__stra, 0x20uLL, "%u", v13);
        memset(&v18, 0, sizeof(v18));
        v18.ai_socktype = 1;
        if (!getaddrinfo(v24, __stra, &v18, &v17))
        {
          v14 = v17;
          if (v17)
          {
            while (1)
            {
              v15 = socket(v14->ai_family, v14->ai_socktype, v14->ai_protocol);
              if ((v15 & 0x80000000) == 0)
              {
                v12 = v15;
                if (!SocketConnect(v15, v14->ai_addr, a3))
                {
                  freeaddrinfo(v17);
                  goto LABEL_41;
                }
                close(v12);
              }
              v14 = v14->ai_next;
              if (!v14)
              {
                freeaddrinfo(v17);
                break;
              }
            }
          }
        }
      }
    }
    else
    {
      v11 = socket(v20.sa_family, 1, 6);
      if ((v11 & 0x80000000) == 0)
      {
        v12 = v11;
        if ((v20.sa_family == 30 || v20.sa_family == 2)
          && !*(_WORD *)v20.sa_data
          && (v20.sa_family == 30 || v20.sa_family == 2))
        {
          *(_WORD *)v20.sa_data = v8;
        }
        if (!SocketConnect(v11, &v20, a3))
        {
LABEL_41:
          result = 0;
          *a4 = v12;
          return result;
        }
        close(v12);
      }
    }
    if (!*a1)
      return 4294960543;
  }
}

uint64_t SocketConnect(int a1, const sockaddr *a2, int a3)
{
  uint64_t result;
  int sa_family;
  int v8;
  socklen_t v9;
  int v10;
  int v11;
  socklen_t v12;
  unsigned int v13;
  timeval v14;
  fd_set v15;
  fd_set v16;

  result = SocketSetNonBlocking(a1, 1);
  if ((_DWORD)result)
    return result;
  *(_QWORD *)&v14.tv_usec = 0;
  v11 = 1;
  setsockopt(a1, 0xFFFF, 4130, &v11, 4u);
  v13 = 1;
  setsockopt(a1, 6, 1, &v13, 4u);
  sa_family = a2->sa_family;
  v8 = sa_family == 30 ? 28 : 0;
  v9 = sa_family == 2 ? 16 : v8;
  result = connect(a1, a2, v9);
  if (!(_DWORD)result)
    return result;
  memset(&v16, 0, sizeof(v16));
  memset(&v15, 0, sizeof(v15));
  if (__darwin_check_fd_set_overflow(a1, &v16, 0))
    *(__int32_t *)((char *)v16.fds_bits + (((unint64_t)a1 >> 3) & 0x1FFFFFFFFFFFFFFCLL)) |= 1 << a1;
  if (__darwin_check_fd_set_overflow(a1, &v15, 0))
    *(__int32_t *)((char *)v15.fds_bits + (((unint64_t)a1 >> 3) & 0x1FFFFFFFFFFFFFFCLL)) |= 1 << a1;
  v14.tv_sec = a3;
  v10 = select(a1 + 1, &v16, &v15, 0, &v14);
  if (v10 <= 0)
  {
    if (!v10)
      return 4294960574;
    if (!*__error())
      return 4294960596;
    result = *__error();
    if ((_DWORD)result)
      return result;
  }
  if ((!__darwin_check_fd_set_overflow(a1, &v16, 0)
     || ((*(unsigned int *)((char *)v16.fds_bits + (((unint64_t)a1 >> 3) & 0x1FFFFFFFFFFFFFFCLL)) >> a1) & 1) == 0)
    && (!__darwin_check_fd_set_overflow(a1, &v15, 0)
     || ((*(unsigned int *)((char *)v15.fds_bits + (((unint64_t)a1 >> 3) & 0x1FFFFFFFFFFFFFFCLL)) >> a1) & 1) == 0))
  {
    return 4294960596;
  }
  v12 = 4;
  v13 = 0;
  if (!getsockopt(a1, 0xFFFF, 4103, &v13, &v12))
    return v13;
  if (!*__error())
    return 4294960596;
  result = *__error();
  if (!(_DWORD)result)
    return v13;
  return result;
}

uint64_t SocketAccept(int a1, unsigned int a2, int *a3, sockaddr *a4)
{
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  timeval *v10;
  int v11;
  uint64_t result;
  socklen_t *v13;
  int v14;
  uint64_t v15;
  unint64_t v16;
  int v18;
  int v19;
  int v20;
  uint64_t v21;
  uint64_t v22;
  fd_set v23;

  v7 = a2;
  SocketSetNonBlocking(a1, 1);
  if ((a2 & 0x80000000) != 0)
  {
    v9 = -1;
  }
  else
  {
    v8 = mach_absolute_time();
    if (SecondsToUpTicks_sOnce != -1)
      dispatch_once_f(&SecondsToUpTicks_sOnce, &SecondsToUpTicks_sMultiplier, (dispatch_function_t)_SecondsToUpTicksInit);
    v9 = v8 + SecondsToUpTicks_sMultiplier * v7;
  }
  v21 = 0;
  v22 = 0;
  v20 = 0;
  memset(&v23, 0, sizeof(v23));
  while (1)
  {
    if (__darwin_check_fd_set_overflow(a1, &v23, 0))
      v23.fds_bits[(unint64_t)a1 >> 5] |= 1 << a1;
    if ((v7 & 0x80000000) != 0)
    {
      v10 = 0;
    }
    else
    {
      v21 = v7;
      LODWORD(v22) = 0;
      v10 = (timeval *)&v21;
    }
    v11 = select(a1 + 1, &v23, 0, 0, v10);
    if (v11 > 0)
      goto LABEL_16;
    if (!v11)
      return 4294960574;
    if (!*__error())
      return 4294960596;
    result = *__error();
    if ((_DWORD)result)
      return result;
LABEL_16:
    if (a4)
    {
      v20 = 28;
      v13 = (socklen_t *)&v20;
    }
    else
    {
      v13 = 0;
    }
    v14 = accept(a1, a4, v13);
    if ((v14 & 0x80000000) == 0 || *__error() && !*__error())
    {
      v18 = 1;
      setsockopt(v14, 0xFFFF, 4130, &v18, 4u);
      SocketSetNonBlocking(v14, 1);
      v19 = 1;
      setsockopt(v14, 6, 1, &v19, 4u);
      result = 0;
      *a3 = v14;
      return result;
    }
    if ((v7 & 0x80000000) == 0)
    {
      v15 = mach_absolute_time();
      v7 = 0;
      v16 = v9 - v15;
      if (v9 > v15)
      {
        if (UpTicksPerSecond_sOnce != -1)
          dispatch_once_f(&UpTicksPerSecond_sOnce, &UpTicksPerSecond_sTicksPerSecond, (dispatch_function_t)_UpTicksPerSecondInit);
        v7 = (v16 / UpTicksPerSecond_sTicksPerSecond);
      }
    }
  }
}

uint64_t SocketCloseGracefully(int a1, int a2)
{
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  __darwin_time_t v9;
  __darwin_suseconds_t v10;
  int v11;
  uint64_t result;
  fd_set v13;
  timeval v14;
  _BYTE v15[32];
  uint64_t v16;

  v16 = *MEMORY[0x1E0C80C00];
  v14.tv_sec = 0;
  *(_QWORD *)&v14.tv_usec = 0;
  v4 = mach_absolute_time();
  memset(&v13, 0, sizeof(v13));
  v5 = UpTicksToMicroseconds(v4) + 1000000 * a2;
  shutdown(a1, 1);
  do
  {
    v6 = mach_absolute_time();
    v7 = UpTicksToMicroseconds(v6);
    v8 = v5 - v7;
    if (v5 <= v7)
    {
      v9 = 0;
      v10 = 0;
    }
    else
    {
      v9 = (int)(v8 / 0xF4240);
      v10 = v8 % 0xF4240;
    }
    v14.tv_sec = v9;
    v14.tv_usec = v10;
    if (__darwin_check_fd_set_overflow(a1, &v13, 0))
      v13.fds_bits[(unint64_t)a1 >> 5] |= 1 << a1;
    v11 = select(a1 + 1, &v13, 0, 0, &v14);
    if (!v11)
      break;
    if (v11 < 0)
    {
      if (*__error())
        __error();
      break;
    }
  }
  while (recv(a1, v15, 0x20uLL, 0) > 0);
  result = close(a1);
  if ((_DWORD)result)
  {
    if (*__error())
      return *__error();
    else
      return 4294960596;
  }
  return result;
}

uint64_t SocketRecvFrom(int a1, uint64_t a2, uint64_t a3, ssize_t *a4, void *a5, socklen_t a6, _QWORD *a7, unint64_t *a8, _DWORD *a9, void *a10)
{
  ssize_t v14;
  uint64_t result;
  int PacketReceiveInterface;
  msghdr v17;
  _QWORD v18[2];
  char v19;
  uint64_t v20;

  v20 = *MEMORY[0x1E0C80C00];
  *(&v17.msg_iovlen + 1) = 0;
  v18[0] = a2;
  v18[1] = a3;
  v17.msg_name = a5;
  *(&v17.msg_namelen + 1) = 0;
  v17.msg_namelen = a6;
  v17.msg_iov = (iovec *)v18;
  v17.msg_iovlen = 1;
  v17.msg_control = &v19;
  *(_QWORD *)&v17.msg_controllen = 256;
  while (1)
  {
    v14 = recvmsg(a1, &v17, 0);
    if ((v14 & 0x8000000000000000) == 0)
      break;
    if (!*__error())
      return 4294960596;
    result = *__error();
    if ((_DWORD)result != 4)
    {
      if ((_DWORD)result)
        return result;
      break;
    }
  }
  if (a4)
    *a4 = v14;
  if (a7)
    *a7 = v17.msg_namelen;
  if (a8)
    *a8 = SocketGetPacketUpTicks((unsigned int *)v17.msg_control, v17.msg_controllen);
  if (a9)
  {
    PacketReceiveInterface = SocketGetPacketReceiveInterface((unsigned int *)v17.msg_control, v17.msg_controllen, a10);
    result = 0;
    *a9 = PacketReceiveInterface;
  }
  else
  {
    if (a10)
      SocketGetPacketReceiveInterface((unsigned int *)v17.msg_control, v17.msg_controllen, a10);
    return 0;
  }
  return result;
}

unint64_t SocketGetPacketUpTicks(unsigned int *a1, unsigned int a2)
{
  unsigned int *v2;
  unsigned int v3;
  uint64_t v5;
  __darwin_time_t v6;
  uint64_t v7;
  unint64_t v8;
  __darwin_time_t v9;
  uint64_t v10;
  unsigned __int128 v11;

  if (a2 < 0xC)
    return mach_absolute_time();
  v2 = a1;
  if (!a1)
    return mach_absolute_time();
  while (1)
  {
    if (v2[1] != 0xFFFF)
      goto LABEL_6;
    v3 = v2[2];
    if (v3 == 2)
      break;
    if (v3 == 4)
      return *(_QWORD *)(v2 + 3);
LABEL_6:
    v2 = (unsigned int *)((char *)v2 + ((*v2 + 3) & 0x1FFFFFFFCLL));
    if (v2 + 3 > (unsigned int *)((char *)a1 + a2))
      return mach_absolute_time();
  }
  v11 = 0uLL;
  gettimeofday((timeval *)&v11, 0);
  v5 = mach_absolute_time();
  v6 = v11;
  if (SecondsToUpTicks_sOnce != -1)
    dispatch_once_f(&SecondsToUpTicks_sOnce, &SecondsToUpTicks_sMultiplier, (dispatch_function_t)_SecondsToUpTicksInit);
  v7 = SecondsToUpTicks_sMultiplier * v6;
  v8 = MicrosecondsToUpTicks(DWORD2(v11));
  v11 = *(_OWORD *)(v2 + 3);
  v9 = v11;
  if (SecondsToUpTicks_sOnce != -1)
    dispatch_once_f(&SecondsToUpTicks_sOnce, &SecondsToUpTicks_sMultiplier, (dispatch_function_t)_SecondsToUpTicksInit);
  v10 = SecondsToUpTicks_sMultiplier;
  return v5 - v8 - v7 + v10 * v9 + MicrosecondsToUpTicks(DWORD2(v11));
}

uint64_t SocketGetPacketReceiveInterface(unsigned int *a1, unsigned int a2, void *__dst)
{
  uint64_t result;
  unint64_t v6;
  size_t v7;

  result = 0;
  if (a2 >= 0xC && a1)
  {
    v6 = (unint64_t)a1 + a2;
    while (a1[1] || a1[2] != 20)
    {
      a1 = (unsigned int *)((char *)a1 + ((*a1 + 3) & 0x1FFFFFFFCLL));
      if ((unint64_t)(a1 + 3) > v6)
        return 0;
    }
    if (__dst)
    {
      v7 = *((unsigned __int8 *)a1 + 17);
      if (v7 <= 0xF)
      {
        memcpy(__dst, a1 + 5, v7);
        *((_BYTE *)__dst + *((unsigned __int8 *)a1 + 17)) = 0;
      }
    }
    return *((unsigned __int16 *)a1 + 7);
  }
  return result;
}

uint64_t SocketReadAll(int a1, char *a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  size_t v5;
  char *v6;
  char *v8;
  int v9;
  unint64_t v10;
  int v11;
  ssize_t v12;
  uint64_t result;
  int v14;
  fd_set v15;
  uint64_t v16;
  uint64_t v17;

  if (a3 < 1)
    return 0;
  v16 = v3;
  v17 = v4;
  v5 = a3;
  v6 = a2;
  v8 = &a2[a3];
  v9 = 1 << a1;
  v10 = (unint64_t)a1 >> 5;
  v11 = a1 + 1;
  while (1)
  {
    do
    {
      v12 = recv(a1, v6, v5, 0);
      if (v12 >= 1)
      {
        v6 += v12;
        goto LABEL_16;
      }
      if (!v12)
        return 4294960543;
      if (!*__error())
        return 4294960596;
      result = *__error();
    }
    while ((_DWORD)result == 4);
    if ((_DWORD)result != 35)
      return result;
    memset(&v15, 0, sizeof(v15));
    if (__darwin_check_fd_set_overflow(a1, &v15, 0))
      v15.fds_bits[v10] |= v9;
    v14 = select(v11, &v15, 0, 0, 0);
    if (!v14)
      return 4294960574;
    if (v14 <= 0)
    {
      if (!*__error())
        return 4294960596;
      result = *__error();
      if ((_DWORD)result)
        return result;
    }
LABEL_16:
    v5 = v8 - v6;
    if (v8 <= v6)
      return 0;
  }
}

uint64_t SocketWriteAll(int a1, char *a2, uint64_t a3, int a4)
{
  size_t v4;
  char *v5;
  unint64_t v7;
  int v8;
  unint64_t v9;
  __darwin_time_t v10;
  int v11;
  int v12;
  uint64_t result;
  ssize_t v14;
  timeval v15;
  fd_set v16;

  v15.tv_sec = 0;
  *(_QWORD *)&v15.tv_usec = 0;
  memset(&v16, 0, sizeof(v16));
  if (a3 < 1)
    return 0;
  v4 = a3;
  v5 = a2;
  v7 = (unint64_t)&a2[a3];
  v8 = 1 << a1;
  v9 = (unint64_t)a1 >> 5;
  v10 = a4;
  v11 = a1 + 1;
  while (1)
  {
    if (__darwin_check_fd_set_overflow(a1, &v16, 0))
      v16.fds_bits[v9] |= v8;
    v15.tv_sec = v10;
    v15.tv_usec = 0;
    v12 = select(v11, 0, &v16, 0, &v15);
    if (!v12)
      return 4294960574;
    if (v12 <= 0)
    {
      if (!*__error())
        return 4294960596;
      result = *__error();
      if ((_DWORD)result)
        return result;
    }
    v14 = write(a1, v5, v4);
    if (v14 < 0)
    {
      if (!*__error())
        return 4294960596;
      result = *__error();
      if ((_DWORD)result != 4)
      {
        if ((_DWORD)result)
          return result;
        goto LABEL_13;
      }
    }
    else
    {
LABEL_13:
      result = 0;
      v5 += v14;
      v4 = v7 - (_QWORD)v5;
      if (v7 <= (unint64_t)v5)
        return result;
    }
  }
}

uint64_t SocketReadData(int a1, uint64_t a2, unint64_t a3, uint64_t *a4)
{
  uint64_t v4;
  size_t v5;
  void *v9;
  ssize_t v10;
  uint64_t result;

  v4 = *a4;
  v5 = a3 - *a4;
  if (a3 == *a4)
    return 0;
  if (a3 <= *a4)
    return 4294960533;
  v9 = (void *)(a2 + v4);
  while (1)
  {
    v10 = read(a1, v9, v5);
    if ((v10 & 0x8000000000000000) == 0)
      break;
    if (!*__error())
      return 4294960596;
    result = *__error();
    if ((_DWORD)result != 4)
      return result;
  }
  if (!v10)
    return 4294960543;
  *a4 = v10 + v4;
  if (v10 + v4 == a3)
    return 0;
  else
    return 35;
}

uint64_t SocketReadDataEx(uint64_t a1, uint64_t a2, unint64_t a3, unint64_t a4, uint64_t *a5)
{
  uint64_t v5;
  size_t v6;
  void *v10;
  ssize_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v17;

  v5 = *a5;
  v6 = a4 - *a5;
  if (a4 == *a5)
    return 0;
  if (a4 <= *a5)
    return 4294960533;
  v10 = (void *)(a2 + v5);
  do
  {
    v11 = read(a1, v10, v6);
    if ((v11 & 0x8000000000000000) == 0)
    {
      if (!v11)
        return 4294960543;
      *a5 = v11 + v5;
      if (v11 + v5 >= a3)
        return 0;
      else
        return 35;
    }
    if (!*__error())
    {
      v17 = 4294960596;
      goto LABEL_15;
    }
    v17 = *__error();
  }
  while ((_DWORD)v17 == 4);
  if ((_DWORD)v17 == 35)
    return v17;
LABEL_15:
  if (gLogCategory_NetUtils <= 60
    && (gLogCategory_NetUtils != -1 || _LogCategory_Initialize((uint64_t)&gLogCategory_NetUtils, 0x3Cu)))
  {
    LogPrintF((uint64_t)&gLogCategory_NetUtils, (uint64_t)"OSStatus SocketReadDataEx(SocketRef, void *, size_t, size_t, size_t *)", 0x3Cu, (uint64_t)"SocketReadDataEx, fd %d, min %zu, failed: %#m\n", v12, v13, v14, v15, a1);
  }
  return v17;
}

uint64_t SocketWriteData(int a1, const iovec **a2, int *a3)
{
  ssize_t v6;
  uint64_t result;

  if (!*a3)
    return 0;
  while (1)
  {
    v6 = writev(a1, *a2, *a3);
    if ((v6 & 0x8000000000000000) == 0)
      break;
    if (!*__error())
      return 4294960596;
    result = *__error();
    if ((_DWORD)result != 4)
      return result;
  }
  if (!v6)
    return 0;
  return UpdateIOVec((uint64_t **)a2, a3, v6);
}

uint64_t SocketTransportRead(void *a1, size_t a2, ssize_t *a3, int a4)
{
  ssize_t v8;
  uint64_t result;
  ssize_t v10;

  while (1)
  {
    v8 = read(a4, a1, a2);
    if ((v8 & 0x8000000000000000) == 0)
      break;
    if (!*__error())
      return 4294960596;
    result = *__error();
    if ((_DWORD)result != 4)
      return result;
  }
  v10 = v8;
  if (!v8)
    return 4294960543;
  result = 0;
  *a3 = v10;
  return result;
}

uint64_t SocketTransportWriteV(const iovec **a1, int *a2, int a3)
{
  return SocketWriteData(a3, a1, a2);
}

uint64_t SocketSetBoundInterface(int a1, int a2, int a3)
{
  int v3;
  int v4;
  uint64_t result;
  int v6;

  v6 = a3;
  if (a2 == 2)
  {
    v3 = 0;
    v4 = 25;
  }
  else
  {
    if (a2 != 30)
      return 4294960561;
    v3 = 41;
    v4 = 125;
  }
  result = setsockopt(a1, v3, v4, &v6, 4u);
  if ((_DWORD)result)
  {
    if (*__error())
      return *__error();
    else
      return 4294960596;
  }
  return result;
}

uint64_t SocketGetFamily(int a1)
{
  socklen_t v2;
  sockaddr v3;
  uint64_t v4;
  int v5;

  *(_QWORD *)&v3.sa_len = 0;
  *(_QWORD *)&v3.sa_data[6] = 0;
  v5 = 0;
  v4 = 0;
  v2 = 28;
  if (getsockname(a1, &v3, &v2) && (!*__error() || *__error()))
    return 0;
  else
    return v3.sa_family;
}

uint64_t SocketGetInterfaceInfo(int a1, char *ifa_name, char *a3, unsigned int *a4, uint64_t a5, _DWORD *a6, int *a7, _QWORD *a8, _BOOL8 *a9, uint64_t a10)
{
  int v17;
  _QWORD *v18;
  int v19;
  int v20;
  ifaddrs *v21;
  unint64_t v22;
  int v23;
  _BOOL8 v24;
  uint64_t v25;
  uint64_t v26;
  int ifa_flags;
  uint64_t v28;
  int v29;
  sockaddr *ifa_addr;
  sockaddr *v32;
  const char *v33;
  __uint8_t *v34;
  int v35;
  int v36;
  ifaddrs *v37;
  socklen_t v38;
  sockaddr v39;
  uint64_t v40;
  int v41;
  _OWORD v42[3];
  __int128 v43;
  __int128 v44;
  uint64_t v45;

  v45 = *MEMORY[0x1E0C80C00];
  *(_QWORD *)&v39.sa_len = 0;
  *(_QWORD *)&v39.sa_data[6] = 0;
  v41 = 0;
  v40 = 0;
  v38 = 0;
  v37 = 0;
  v43 = 0u;
  v44 = 0u;
  if (a1 < 0)
  {
    v20 = socket(2, 2, 0);
    if (v20 < 0)
    {
      v17 = v20;
      if (!*__error())
      {
        v25 = 4294960596;
        v19 = v17;
        goto LABEL_64;
      }
      v18 = a8;
      v25 = *__error();
      v19 = v17;
      if ((_DWORD)v25)
        goto LABEL_64;
    }
    else
    {
      v18 = a8;
      v17 = v20;
      v19 = v20;
    }
  }
  else
  {
    v17 = a1;
    v18 = a8;
    v19 = -1;
  }
  if (ifa_name)
  {
    v36 = v19;
    if (a5)
    {
      *(_WORD *)(a5 + 4) = 0;
      *(_DWORD *)a5 = 0;
      GetInterfaceMACAddress(ifa_name, a5);
    }
    v21 = 0;
    v22 = (unint64_t)v18;
  }
  else
  {
    v38 = 28;
    if (getsockname(v17, &v39, &v38))
    {
      if (!*__error())
      {
        v25 = 4294960596;
        goto LABEL_64;
      }
      v25 = *__error();
      if ((_DWORD)v25)
        goto LABEL_64;
    }
    v26 = SockAddrSimplify((__int128 *)&v39, (uint64_t)&v39);
    if ((_DWORD)v26 || (v26 = getifaddrs(&v37), (_DWORD)v26))
    {
      v25 = v26;
      goto LABEL_64;
    }
    v36 = v19;
    v21 = v37;
    if (!v37)
    {
      v25 = 4294960569;
      v19 = v36;
      if (v36 < 0)
        return v25;
      goto LABEL_67;
    }
    v25 = 4294960569;
    while (1)
    {
      ifa_addr = v21->ifa_addr;
      if (ifa_addr)
      {
        if (!SockAddrCompareAddrEx(ifa_addr, (uint64_t)&v39, 1))
          break;
      }
      v21 = v21->ifa_next;
      if (!v21)
        goto LABEL_59;
    }
    ifa_name = v21->ifa_name;
    if (a3)
      strlcpy(a3, v21->ifa_name, 0x11uLL);
    if (!ifa_name)
    {
      v25 = 4294960569;
      goto LABEL_59;
    }
    v22 = (unint64_t)v18;
    if (a5)
    {
      *(_WORD *)(a5 + 4) = 0;
      *(_DWORD *)a5 = 0;
      v21 = v37;
      if (v37)
      {
        while (1)
        {
          v32 = v21->ifa_addr;
          if (v32)
          {
            if (v32->sa_family == 18)
            {
              v33 = v21->ifa_name;
              if (v33)
              {
                if (!strcmp(v33, ifa_name) && v32->sa_data[4] == 6)
                  break;
              }
            }
          }
          v21 = v21->ifa_next;
          if (!v21)
            goto LABEL_9;
        }
        v34 = &v32->sa_len + v32->sa_data[3];
        v35 = *((_DWORD *)v34 + 2);
        *(_WORD *)(a5 + 4) = *((_WORD *)v34 + 6);
        *(_DWORD *)a5 = v35;
      }
    }
  }
LABEL_9:
  if (a4)
    *a4 = if_nametoindex(ifa_name);
  if (a6 || a9 || a10)
  {
    memset(v42, 0, 44);
    __strlcpy_chk();
    if (ioctl(v17, 0xC02C6938uLL, v42) && (!*__error() || *__error()))
    {
      v23 = 0;
      if (!a6)
      {
LABEL_29:
        v24 = (BYTE8(v42[1]) & 3) == 1;
        if (!a7)
          goto LABEL_42;
LABEL_30:
        if (v21)
        {
          ifa_flags = v21->ifa_flags;
LABEL_41:
          *a7 = ifa_flags;
          goto LABEL_42;
        }
        v43 = 0u;
        v44 = 0u;
        __strlcpy_chk();
        if (ioctl(v17, 0xC0206911uLL, &v43))
        {
          ifa_flags = *__error();
          if (!ifa_flags)
            goto LABEL_41;
          if (*__error())
          {
            ifa_flags = 0;
            goto LABEL_41;
          }
        }
        ifa_flags = (__int16)v44;
        goto LABEL_41;
      }
    }
    else
    {
      v23 = v42[1];
      if (!a6)
        goto LABEL_29;
    }
    *a6 = v23;
    goto LABEL_29;
  }
  LOBYTE(v23) = 0;
  v24 = 0;
  if (a7)
    goto LABEL_30;
LABEL_42:
  if (!(v22 | a10))
  {
    LODWORD(v28) = 0;
    goto LABEL_51;
  }
  v43 = 0u;
  v44 = 0u;
  __strlcpy_chk();
  if (!ioctl(v17, 0xC020698EuLL, &v43) || *__error() && !*__error())
  {
    v28 = v44;
    if (!v22)
      goto LABEL_51;
    goto LABEL_50;
  }
  v28 = 0;
  if (v22)
LABEL_50:
    *(_QWORD *)v22 = v28;
LABEL_51:
  if (a9)
    *a9 = v24;
  if (!a10)
  {
    v25 = 0;
LABEL_59:
    v19 = v36;
    goto LABEL_64;
  }
  if (!stricmp_prefix((unsigned __int8 *)ifa_name, "nan"))
  {
    v29 = 128;
    goto LABEL_62;
  }
  if ((v28 & 0x100000) != 0)
  {
    v29 = 4;
    goto LABEL_62;
  }
  if ((v23 & 0xE0) == 0x80)
  {
    v29 = 2;
LABEL_62:
    v19 = v36;
LABEL_63:
    v25 = 0;
    *(_DWORD *)a10 = v29;
    goto LABEL_64;
  }
  if ((v28 & 0x20000000) != 0)
  {
    v29 = 16;
    goto LABEL_62;
  }
  *(_DWORD *)a10 = 1;
  v43 = 0u;
  v44 = 0u;
  __strlcpy_chk();
  ioctl(v17, 0xC020699FuLL, &v43);
  if (DWORD1(v44) == 18)
  {
    v19 = v36;
    if (DWORD2(v44) == 2)
    {
      v29 = 256;
      goto LABEL_63;
    }
    if (DWORD2(v44) == 3)
    {
      v29 = 512;
      goto LABEL_63;
    }
  }
  else
  {
    v19 = v36;
    if (DWORD2(v44) == 1)
    {
      v29 = 8;
      goto LABEL_63;
    }
  }
  v25 = 0;
LABEL_64:
  if (v37)
    MEMORY[0x18D78E7C0]();
  if ((v19 & 0x80000000) == 0)
  {
LABEL_67:
    if (close(v19) && *__error())
      __error();
  }
  return v25;
}

uint64_t SockAddrCompareAddrEx(_QWORD *a1, uint64_t a2, int a3)
{
  uint64_t v3;
  __int128 *v5;
  unsigned int v6;
  unsigned int v7;
  BOOL v8;
  _BOOL4 v9;
  int v10;
  unint64_t v12;
  unint64_t v13;
  unsigned int v14;
  _QWORD v15[3];
  int v16;
  _QWORD v17[3];
  int v18;

  v3 = *((unsigned __int8 *)a1 + 1);
  if ((_DWORD)v3 != *(unsigned __int8 *)(a2 + 1))
    return v3 - *(unsigned __int8 *)(a2 + 1);
  if (*((_BYTE *)a1 + 1))
  {
    v5 = (__int128 *)a2;
    if ((_DWORD)v3 == 30)
    {
      memset(v17, 0, sizeof(v17));
      v18 = 0;
      memset(v15, 0, sizeof(v15));
      v16 = 0;
      if (*((unsigned __int8 *)a1 + 8) == 254
        && (*((_BYTE *)a1 + 9) & 0xC0) == 0x80
        && *(unsigned __int8 *)(a2 + 8) == 254
        && (*(_BYTE *)(a2 + 9) & 0xC0) == 0x80)
      {
        SockAddrSimplify((__int128 *)a1, (uint64_t)v17);
        SockAddrSimplify(v5, (uint64_t)v15);
        if (a3)
        {
          LODWORD(v3) = v18 - v16;
          v5 = (__int128 *)v15;
          a1 = v17;
        }
        else
        {
          LODWORD(v3) = 0;
          a1 = v17;
          v5 = (__int128 *)v15;
        }
      }
      else
      {
        LODWORD(v3) = 0;
      }
      v12 = bswap64(a1[1]);
      v13 = bswap64(*((_QWORD *)v5 + 1));
      if (v12 == v13 && (v12 = bswap64(a1[2]), v13 = bswap64(*((_QWORD *)v5 + 2)), v12 == v13))
      {
        v14 = 0;
      }
      else if (v12 < v13)
      {
        v14 = -1;
      }
      else
      {
        v14 = 1;
      }
      if (v14)
        return v14;
      else
        return v3;
    }
    else if ((_DWORD)v3 == 2)
    {
      v6 = bswap32(*((_DWORD *)a1 + 1));
      v7 = bswap32(*(_DWORD *)(a2 + 4));
      v8 = v6 >= v7;
      v9 = v6 > v7;
      v10 = !v8;
      return (v9 - v10);
    }
    else
    {
      return 0xFFFFFFFFLL;
    }
  }
  return v3;
}

uint64_t GetInterfaceMACAddress(const char *a1, uint64_t a2)
{
  uint64_t v4;
  ifaddrs *v5;
  ifaddrs *v6;
  sockaddr *ifa_addr;
  __uint8_t *v9;
  int v10;
  ifaddrs *v11;

  v11 = 0;
  if (getifaddrs(&v11))
  {
    if (*__error())
    {
      v4 = *__error();
      v5 = v11;
      if (!(_DWORD)v4)
      {
        if (v11)
          goto LABEL_5;
        return 4294960569;
      }
    }
    else
    {
      v4 = 4294960596;
      v5 = v11;
    }
    if (v5)
LABEL_16:
      MEMORY[0x18D78E7C0](v5);
    return v4;
  }
  v5 = v11;
  if (!v11)
    return 4294960569;
LABEL_5:
  v6 = v5;
  while (1)
  {
    ifa_addr = v6->ifa_addr;
    if (ifa_addr->sa_family == 18 && !strcmp(v6->ifa_name, a1) && ifa_addr->sa_data[4] == 6)
      break;
    v6 = v6->ifa_next;
    if (!v6)
    {
      v4 = 4294960569;
      if (v5)
        goto LABEL_16;
      return v4;
    }
  }
  v4 = 0;
  v9 = &ifa_addr->sa_len + ifa_addr->sa_data[3];
  v10 = *((_DWORD *)v9 + 2);
  *(_WORD *)(a2 + 4) = *((_WORD *)v9 + 6);
  *(_DWORD *)a2 = v10;
  if (v5)
    goto LABEL_16;
  return v4;
}

uint64_t SocketSetKeepAlive(int a1, int a2, int a3)
{
  return SocketSetKeepAliveEx(a1, a2, a2, a3);
}

uint64_t SocketSetKeepAliveEx(int a1, int a2, int a3, int a4)
{
  _BOOL4 v9;
  uint64_t result;
  int v11;
  int v12;
  int v13;
  int v14;

  v9 = a2 > 0 && a4 > 0;
  v14 = v9;
  if (setsockopt(a1, 0xFFFF, 8, &v14, 4u))
  {
    if (!*__error())
      return 4294960596;
    result = *__error();
    if ((_DWORD)result)
      return result;
  }
  if (!v14)
    return 0;
  if (a2 <= 1)
    v11 = 1;
  else
    v11 = a2;
  v14 = v11;
  if (setsockopt(a1, 6, 16, &v14, 4u) && *__error())
    __error();
  if (a3 <= 1)
    v12 = 1;
  else
    v12 = a3;
  v14 = v12;
  if (setsockopt(a1, 6, 257, &v14, 4u) && *__error())
    __error();
  if (a4 <= 1)
    v13 = 1;
  else
    v13 = a4;
  v14 = v13;
  result = setsockopt(a1, 6, 258, &v14, 4u);
  if ((_DWORD)result)
  {
    if (*__error())
      __error();
    return 0;
  }
  return result;
}

uint64_t SocketSetNotSentLowWatermark(int a1, unint64_t a2)
{
  uint64_t result;
  int v3;

  if (a2 >> 31)
    return 4294960586;
  v3 = a2;
  result = setsockopt(a1, 6, 513, &v3, 4u);
  if ((_DWORD)result)
  {
    if (*__error())
      return *__error();
    else
      return 4294960596;
  }
  return result;
}

uint64_t SocketSetPacketTimestamps(int a1, int a2)
{
  uint64_t result;
  int v3;

  v3 = a2;
  result = setsockopt(a1, 0xFFFF, 2048, &v3, 4u);
  if ((_DWORD)result)
  {
    if (*__error())
      return *__error();
    else
      return 4294960596;
  }
  return result;
}

uint64_t SocketSetQoS(int a1, int a2)
{
  uint64_t result;
  int v5;
  int Family;
  int v7;
  int v8;
  int v9;
  int v10;
  int v11;
  int v12;

  if (a2)
  {
    result = 4294960591;
    switch(a2)
    {
      case 1:
        v5 = 32;
        goto LABEL_8;
      case 2:
      case 10:
      case 12:
        v5 = 128;
        goto LABEL_8;
      case 3:
      case 11:
        goto LABEL_6;
      case 4:
      case 5:
      case 6:
      case 7:
      case 8:
      case 9:
        return result;
      default:
        if (a2 != 20)
          return result;
LABEL_6:
        v5 = 192;
LABEL_8:
        v12 = v5;
        break;
    }
  }
  else
  {
    v12 = 0;
  }
  Family = SocketGetFamily(a1);
  if (Family == 30)
  {
    v7 = a1;
    v8 = 41;
    v9 = 36;
    goto LABEL_13;
  }
  if (Family == 2)
  {
    v7 = a1;
    v8 = 0;
    v9 = 3;
LABEL_13:
    if (setsockopt(v7, v8, v9, &v12, 4u) && *__error())
      __error();
  }
  if (a2)
  {
    switch(a2)
    {
      case 1:
        v10 = 200;
        goto LABEL_26;
      case 2:
      case 12:
        v10 = 700;
        goto LABEL_26;
      case 3:
      case 11:
        v10 = 800;
        goto LABEL_26;
      case 4:
      case 5:
      case 6:
      case 7:
      case 8:
      case 9:
        return 4294960591;
      case 10:
        v10 = 500;
        goto LABEL_26;
      default:
        if (a2 != 20)
          return 4294960591;
        v10 = 900;
LABEL_26:
        v11 = v10;
        break;
    }
  }
  else
  {
    v11 = 0;
  }
  if (setsockopt(a1, 0xFFFF, 4230, &v11, 4u))
  {
    if (*__error())
      __error();
  }
  return 0;
}

uint64_t SocketSetTCPTimeout(int a1, int a2)
{
  uint64_t result;
  int v4;

  v4 = a2;
  if (setsockopt(a1, 6, 533, &v4, 4u) && *__error())
    __error();
  result = setsockopt(a1, 6, 128, &v4, 4u);
  if ((_DWORD)result)
  {
    if (*__error())
      return *__error();
    else
      return 4294960596;
  }
  return result;
}

uint64_t SocketJoinMulticast(int a1, uint64_t a2, char *a3, unsigned int a4)
{
  return _SocketJoinOrLeaveMulticast(a1, a2, a3, a4, 1);
}

uint64_t _SocketJoinOrLeaveMulticast(int a1, uint64_t a2, char *a3, unsigned int a4, int a5)
{
  int v7;
  uint64_t result;
  char *v9;
  int v10;
  int v11;
  socklen_t v12;
  uint64_t v13;
  char v14[16];
  __int128 v15;
  uint64_t v16;

  v16 = *MEMORY[0x1E0C80C00];
  v7 = *(unsigned __int8 *)(a2 + 1);
  if (v7 != 30)
  {
    if (v7 != 2)
      return 4294960561;
    v13 = 0;
    LODWORD(v13) = *(_DWORD *)(a2 + 4);
    if (a3)
    {
      *(_OWORD *)v14 = 0u;
      v15 = 0u;
      __strlcpy_chk();
      goto LABEL_15;
    }
    if (!a4)
    {
      HIDWORD(v13) = 0;
      goto LABEL_20;
    }
    *(_OWORD *)v14 = 0u;
    v15 = 0u;
    if (if_indextoname(a4, v14))
    {
LABEL_15:
      if (ioctl(a1, 0xC0206921uLL, v14, v13))
      {
        if (!*__error())
          return 4294960596;
        result = *__error();
        if ((_DWORD)result)
          return result;
      }
      HIDWORD(v13) = DWORD1(v15);
LABEL_20:
      result = setsockopt(a1, 0, 13, &v13, 8u);
      if (a5)
      {
        v9 = (char *)&v13;
        v10 = a1;
        v11 = 0;
        v12 = 8;
        goto LABEL_22;
      }
      goto LABEL_23;
    }
    return 4294960552;
  }
  *(_OWORD *)v14 = *(_OWORD *)(a2 + 8);
  if (!a3 || a4)
  {
    LODWORD(v15) = a4;
  }
  else
  {
    LODWORD(v15) = if_nametoindex(a3);
    if (!(_DWORD)v15)
      return 4294960552;
  }
  result = setsockopt(a1, 41, 13, v14, 0x14u);
  if (a5)
  {
    v9 = v14;
    v10 = a1;
    v11 = 41;
    v12 = 20;
LABEL_22:
    result = setsockopt(v10, v11, 12, v9, v12);
  }
LABEL_23:
  if (!(_DWORD)result)
    return result;
  if (*__error())
    return *__error();
  return 4294960596;
}

uint64_t SocketLeaveMulticast(int a1, uint64_t a2, char *a3, unsigned int a4)
{
  return _SocketJoinOrLeaveMulticast(a1, a2, a3, a4, 0);
}

uint64_t SocketSetMulticastInterface(int a1, const char *a2, int a3)
{
  int Family;
  uint64_t result;
  char *v8;
  int v9;
  int v10;
  uint64_t v11;
  char v12[16];
  __int128 v13;
  uint64_t v14;

  v14 = *MEMORY[0x1E0C80C00];
  HIDWORD(v11) = a3;
  Family = SocketGetFamily(a1);
  if (Family != 30)
  {
    if (Family != 2)
      return 4294960561;
    *(_OWORD *)v12 = 0u;
    v13 = 0u;
    LODWORD(v11) = 0;
    if (!a2 || a3 || (HIDWORD(v11) = if_nametoindex(a2)) != 0)
    {
      result = setsockopt(a1, 0, 66, (char *)&v11 + 4, 4u);
      if (!(_DWORD)result)
        return result;
      if (*__error() && !*__error())
        return 0;
      if (a2)
      {
        *(_OWORD *)v12 = 0u;
        v13 = 0u;
        __strlcpy_chk();
        if (ioctl(a1, 0xC0206921uLL, v12))
        {
          if (!*__error())
            return 4294960596;
          result = *__error();
          if ((_DWORD)result)
            return result;
        }
        v8 = (char *)&v13 + 4;
        goto LABEL_27;
      }
      if (!HIDWORD(v11))
      {
        LODWORD(v11) = 0;
        v8 = (char *)&v11;
LABEL_27:
        v9 = a1;
        v10 = 0;
        goto LABEL_28;
      }
      *(_OWORD *)v12 = 0u;
      v13 = 0u;
      if (if_indextoname(HIDWORD(v11), v12))
      {
        if (ioctl(a1, 0xC0206921uLL, v12, v11))
        {
          if (!*__error())
            return 4294960596;
          result = *__error();
          if ((_DWORD)result)
            return result;
        }
        v8 = (char *)&v13 + 4;
        goto LABEL_27;
      }
    }
    return 4294960552;
  }
  if (a2)
  {
    if (!a3)
    {
      HIDWORD(v11) = if_nametoindex(a2);
      if (!HIDWORD(v11))
        return 4294960552;
    }
  }
  v8 = (char *)&v11 + 4;
  v9 = a1;
  v10 = 41;
LABEL_28:
  result = setsockopt(v9, v10, 9, v8, 4u);
  if (!(_DWORD)result)
    return result;
  if (*__error())
    return *__error();
  return 4294960596;
}

uint64_t SocketSetMulticastLoop(int a1)
{
  int Family;
  char *v3;
  int v4;
  int v5;
  socklen_t v6;
  uint64_t result;
  int v8;
  char v9;

  Family = SocketGetFamily(a1);
  if (Family == 30)
  {
    v8 = 1;
    v3 = (char *)&v8;
    v4 = a1;
    v5 = 41;
    v6 = 4;
  }
  else
  {
    if (Family != 2)
      return 4294960561;
    v9 = 1;
    v3 = &v9;
    v4 = a1;
    v5 = 0;
    v6 = 1;
  }
  result = setsockopt(v4, v5, 11, v3, v6);
  if ((_DWORD)result)
  {
    if (*__error())
      return *__error();
    else
      return 4294960596;
  }
  return result;
}

uint64_t SockAddrToString(uint64_t a1, char a2, char *a3)
{
  int v4;
  unsigned int v5;
  signed int v6;
  int v9;
  unsigned int v10;

  v4 = *(unsigned __int8 *)(a1 + 1);
  if (v4 == 30)
  {
    if ((a2 & 1) != 0)
      v6 = -1;
    else
      v6 = bswap32(*(unsigned __int16 *)(a1 + 2)) >> 16;
    if (v6 > 0 || (a2 & 4) == 0)
      v9 = v6;
    else
      v9 = -2;
    if ((a2 & 2) != 0)
      v10 = 0;
    else
      v10 = *(_DWORD *)(a1 + 24);
    IPv6AddressToCString((_BYTE *)(a1 + 8), v10, v9, 0xFFFFFFFF, a3, (a2 & 8) != 0);
  }
  else
  {
    if (v4 != 2)
      return 4294960561;
    if ((a2 & 1) != 0)
      v5 = 0;
    else
      v5 = bswap32(*(unsigned __int16 *)(a1 + 2)) >> 16;
    IPv4AddressToCString(bswap32(*(_DWORD *)(a1 + 4)), v5, a3);
  }
  return 0;
}

uint64_t SockAddrCompareAddr(_QWORD *a1, uint64_t a2)
{
  return SockAddrCompareAddrEx(a1, a2, 0);
}

uint64_t SockAddrConvertToIPv6(__int128 *a1, uint64_t a2)
{
  int v3;
  uint64_t result;
  unsigned int v5;
  __int16 v6;
  __int128 v7;
  uint64_t v8;

  v3 = *((unsigned __int8 *)a1 + 1);
  if (v3 == 30)
  {
    if (a1 == (__int128 *)a2)
    {
      return 0;
    }
    else
    {
      result = 0;
      v7 = *a1;
      v8 = *((_QWORD *)a1 + 2);
      *(_DWORD *)(a2 + 24) = *((_DWORD *)a1 + 6);
      *(_QWORD *)(a2 + 16) = v8;
      *(_OWORD *)a2 = v7;
    }
  }
  else if (v3 == 2)
  {
    result = 0;
    v5 = *((_DWORD *)a1 + 1);
    v6 = *((_WORD *)a1 + 1);
    *(_QWORD *)(a2 + 8) = 0;
    *(_WORD *)a2 = 7708;
    *(_WORD *)(a2 + 2) = v6;
    *(_DWORD *)(a2 + 4) = 0;
    *(_DWORD *)(a2 + 16) = -65536;
    *(_QWORD *)(a2 + 20) = v5;
  }
  else
  {
    return 4294960561;
  }
  return result;
}

unint64_t SockAddrToDeviceID(__int128 *a1)
{
  unint64_t result;
  _QWORD v2[2];
  uint64_t v3;
  int v4;

  v2[0] = 0;
  v2[1] = 0;
  v4 = 0;
  v3 = 0;
  SockAddrSimplify(a1, (uint64_t)v2);
  if (BYTE1(v2[0]) == 30)
    return ((unint64_t)BYTE2(v3) << 40) | ((unint64_t)BYTE1(v3) << 48) | ((unint64_t)BYTE3(v3) << 32) | ((unint64_t)BYTE4(v3) << 24) | ((unint64_t)BYTE5(v3) << 16) | ((unint64_t)BYTE6(v3) << 8) | HIBYTE(v3) | 0x600000000000000;
  result = 0;
  if (BYTE1(v2[0]) == 2)
    return bswap32(HIDWORD(v2[0])) | 0x400000000000000;
  return result;
}

uint64_t IsIPv4MartianAddress(int a1)
{
  unsigned __int8 *v1;
  int v3;

  v3 = a1;
  v1 = (unsigned __int8 *)&IsIPv4MartianAddress_kMartianRules;
  while (!_EqualBits((unsigned __int8 *)&v3, v1, v1[4]))
  {
    v1 += 5;
    if (v1 >= (unsigned __int8 *)qword_18D51F32E)
      return 0;
  }
  return 1;
}

BOOL _EqualBits(unsigned __int8 *a1, unsigned __int8 *a2, unsigned int a3)
{
  uint64_t v3;
  unsigned __int8 *v4;
  unsigned __int8 *v5;

  if (a3 >= 8)
  {
    v3 = ((a3 - 8) >> 3) + 1;
    v4 = &a2[v3];
    v5 = &a1[v3];
    while (*a1 == *a2)
    {
      ++a2;
      ++a1;
      LOBYTE(a3) = a3 - 8;
      if (a3 <= 7u)
      {
        a1 = v5;
        a2 = v4;
        return !(_BYTE)a3 || ((-256 >> a3) & (*a2 ^ *a1)) == 0;
      }
    }
    return 0;
  }
  return !(_BYTE)a3 || ((-256 >> a3) & (*a2 ^ *a1)) == 0;
}

BOOL IsIPv6MartianAddress(unsigned __int8 *a1)
{
  return IsIPv6MartianAddressEx(a1, 0);
}

BOOL IsIPv6MartianAddressEx(unsigned __int8 *a1, char a2)
{
  uint64_t v4;
  char *i;

  v4 = 0;
  for (i = &byte_1E25DED20; !_EqualBits(a1, *((unsigned __int8 **)i - 1), *i); i += 16)
  {
    if (++v4 == 23)
      return 0;
  }
  if ((a2 & 1) != 0 && !v4 || (a2 & 2) != 0 && v4 == 20)
    return 0;
  return (a2 & 4) == 0 || v4 != 19;
}

BOOL IsGlobalIPv4Address(unsigned int a1)
{
  unsigned int v1;
  unsigned int v2;
  _BOOL4 v6;

  v1 = bswap32(a1);
  v2 = v1 & 0xFF000000;
  if ((v1 & 0xFFFF0000) == 0xC0A80000 || v2 == 167772160 || (v1 & 0xFFF00000) == -1408237568)
    return 0;
  v6 = v2 != 2130706432 && v2 >> 29 != 7;
  if ((v1 & 0xFFFF0000) == 0xA9FE0000)
    v6 = 0;
  return v1 >= 0x10000 && v6;
}

BOOL IsPrivateIPv4Address(unsigned int a1)
{
  unsigned int v1;
  BOOL v2;
  unsigned int v3;

  v1 = bswap32(a1);
  v2 = HIBYTE(v1) == 10 || v1 >> 20 == 2753;
  v3 = HIWORD(v1);
  return v2 || v3 == 49320;
}

BOOL IsRoutableIPv4Address(unsigned int a1)
{
  unsigned int v1;
  BOOL v2;

  v1 = bswap32(a1) >> 16;
  if (v1)
    v2 = v1 == 43518;
  else
    v2 = 1;
  return !v2;
}

uint64_t CompareMACAddresses(uint64_t a1, uint64_t a2)
{
  unsigned int v2;
  unsigned int v3;
  unsigned int v4;

  v2 = bswap32(*(_DWORD *)a1);
  v3 = bswap32(*(_DWORD *)a2);
  if (v2 == v3)
  {
    v2 = bswap32(*(unsigned __int16 *)(a1 + 4)) >> 16;
    v4 = bswap32(*(unsigned __int16 *)(a2 + 4));
    if (v2 == HIWORD(v4))
      return 0;
    v3 = HIWORD(v4);
  }
  if (v2 < v3)
    return 0xFFFFFFFFLL;
  else
    return 1;
}

BOOL IsWiFiNetworkInterface(char *a1)
{
  _BOOL8 result;
  int v3;

  v3 = 0;
  SocketGetInterfaceInfo(-1, a1, 0, 0, 0, 0, 0, 0, 0, (uint64_t)&v3);
  result = 1;
  if ((v3 - 2) > 0x3E || ((1 << (v3 - 2)) & 0x4000000000000005) == 0)
    return v3 == 128;
  return result;
}

uint64_t GetPrimaryIPAddress(uint64_t a1, uint64_t a2)
{
  return GetPrimaryIPAddressEx(0, a1, a2);
}

uint64_t GetPrimaryIPAddressEx(const __SCDynamicStore *a1, uint64_t a2, uint64_t a3)
{
  const __SCDynamicStore *v5;
  const __SCDynamicStore *v6;
  const __CFString *v7;
  const __CFString *v8;
  const __CFString *NetworkGlobalEntity;
  CFStringRef *v10;
  const __CFString *v11;
  const __CFDictionary *v12;
  const __CFDictionary *v13;
  CFTypeID v14;
  const void *v15;
  CFTypeID TypeID;
  const __CFDictionary *TypedValue;
  const __CFString *v18;
  const __CFString *v19;
  const __CFString *v20;
  const __CFDictionary *v21;
  const __CFDictionary *v22;
  CFTypeID v23;
  const void *v24;
  CFTypeID v25;
  const __CFDictionary *v26;
  uint64_t result;
  const __CFString *NetworkInterfaceEntity;
  const __CFString *v29;
  const __CFDictionary *v30;
  const __CFDictionary *v31;
  CFTypeID v32;
  const void *v33;
  CFTypeID v34;
  const __CFDictionary *v35;
  const __CFArray *v36;
  CFTypeID v37;
  const __CFString *TypedValueAtIndex;
  const __CFString *v39;
  const __CFString *v40;
  const __CFDictionary *v41;
  const __CFDictionary *v42;
  CFTypeID v43;
  const void *v44;
  CFTypeID v45;
  const __CFDictionary *v46;
  const __CFArray *v47;
  CFTypeID v48;
  const __CFString *v49;
  char buffer[128];
  uint64_t v51;

  v51 = *MEMORY[0x1E0C80C00];
  if (a1)
  {
    v5 = a1;
LABEL_3:
    v6 = 0;
    goto LABEL_5;
  }
  v5 = SCDynamicStoreCreate(0, CFSTR("NetUtils:GetPrimaryIPAddress"), 0, 0);
  v6 = v5;
  if (!v5)
  {
    if (!SCError())
      return 4294960596;
    result = SCError();
    if ((_DWORD)result)
      return result;
    v5 = 0;
    goto LABEL_3;
  }
LABEL_5:
  v7 = (const __CFString *)*MEMORY[0x1E0CE8B30];
  v8 = (const __CFString *)*MEMORY[0x1E0CE8B78];
  NetworkGlobalEntity = SCDynamicStoreKeyCreateNetworkGlobalEntity(0, (CFStringRef)*MEMORY[0x1E0CE8B30], (CFStringRef)*MEMORY[0x1E0CE8B78]);
  v10 = (CFStringRef *)MEMORY[0x1E0CE8B80];
  if (NetworkGlobalEntity)
  {
    v11 = NetworkGlobalEntity;
    v12 = (const __CFDictionary *)SCDynamicStoreCopyValue(v5, NetworkGlobalEntity);
    if (v12)
    {
      v13 = v12;
      v14 = CFGetTypeID(v12);
      if (v14 == CFDictionaryGetTypeID())
      {
        v15 = (const void *)*MEMORY[0x1E0CE8B40];
        TypeID = CFStringGetTypeID();
        TypedValue = CFDictionaryGetTypedValue(v13, v15, TypeID, 0);
        v18 = (const __CFString *)TypedValue;
        if (TypedValue)
          CFRetain(TypedValue);
      }
      else
      {
        v18 = 0;
      }
      CFRelease(v13);
      CFRelease(v11);
      if (v18)
        goto LABEL_25;
    }
    else
    {
      CFRelease(v11);
    }
  }
  v19 = SCDynamicStoreKeyCreateNetworkGlobalEntity(0, v7, *v10);
  if (v19)
  {
    v20 = v19;
    v21 = (const __CFDictionary *)SCDynamicStoreCopyValue(v5, v19);
    if (v21)
    {
      v22 = v21;
      v23 = CFGetTypeID(v21);
      if (v23 == CFDictionaryGetTypeID())
      {
        v24 = (const void *)*MEMORY[0x1E0CE8B40];
        v25 = CFStringGetTypeID();
        v26 = CFDictionaryGetTypedValue(v22, v24, v25, 0);
        v18 = (const __CFString *)v26;
        if (v26)
          CFRetain(v26);
      }
      else
      {
        v18 = 0;
      }
      CFRelease(v22);
      CFRelease(v20);
      if (v18)
        goto LABEL_25;
    }
    else
    {
      CFRelease(v20);
    }
  }
  v18 = CFSTR("en0");
  CFRetain(CFSTR("en0"));
LABEL_25:
  if (a2)
  {
    *(_BYTE *)(a2 + 1) = 0;
    NetworkInterfaceEntity = SCDynamicStoreKeyCreateNetworkInterfaceEntity(0, v7, v18, v8);
    if (NetworkInterfaceEntity)
    {
      v29 = NetworkInterfaceEntity;
      v30 = (const __CFDictionary *)SCDynamicStoreCopyValue(v5, NetworkInterfaceEntity);
      if (v30)
      {
        v31 = v30;
        v32 = CFGetTypeID(v30);
        if (v32 == CFDictionaryGetTypeID())
        {
          v33 = (const void *)*MEMORY[0x1E0CE8CC8];
          v34 = CFArrayGetTypeID();
          v35 = CFDictionaryGetTypedValue(v31, v33, v34, 0);
          if (v35)
          {
            v36 = v35;
            if (CFArrayGetCount(v35) >= 1)
            {
              v37 = CFStringGetTypeID();
              TypedValueAtIndex = (const __CFString *)CFArrayGetTypedValueAtIndex(v36, 0, v37, 0);
              if (TypedValueAtIndex)
              {
                buffer[0] = 0;
                CFStringGetCString(TypedValueAtIndex, buffer, 128, 0x8000100u);
                StringToSockAddr((unsigned __int8 *)buffer, a2, 0x1CuLL, 0);
                if (*(_BYTE *)(a2 + 1) != 2)
                  *(_BYTE *)(a2 + 1) = 0;
              }
            }
          }
        }
        CFRelease(v31);
      }
      CFRelease(v29);
    }
  }
  if (a3)
  {
    *(_BYTE *)(a3 + 1) = 0;
    v39 = SCDynamicStoreKeyCreateNetworkInterfaceEntity(0, v7, v18, *v10);
    if (v39)
    {
      v40 = v39;
      v41 = (const __CFDictionary *)SCDynamicStoreCopyValue(v5, v39);
      if (v41)
      {
        v42 = v41;
        v43 = CFGetTypeID(v41);
        if (v43 == CFDictionaryGetTypeID())
        {
          v44 = (const void *)*MEMORY[0x1E0CE8D28];
          v45 = CFArrayGetTypeID();
          v46 = CFDictionaryGetTypedValue(v42, v44, v45, 0);
          if (v46)
          {
            v47 = v46;
            if (CFArrayGetCount(v46) >= 1)
            {
              v48 = CFStringGetTypeID();
              v49 = (const __CFString *)CFArrayGetTypedValueAtIndex(v47, 0, v48, 0);
              if (v49)
              {
                buffer[0] = 0;
                CFStringGetCString(v49, buffer, 128, 0x8000100u);
                StringToSockAddr((unsigned __int8 *)buffer, a3, 0x1CuLL, 0);
                if (*(_BYTE *)(a3 + 1) == 30)
                {
                  if (*(unsigned __int8 *)(a3 + 8) == 254 && (*(_BYTE *)(a3 + 9) & 0xC0) == 0x80)
                  {
                    buffer[0] = 0;
                    CFStringGetCString(v18, buffer, 128, 0x8000100u);
                    *(_DWORD *)(a3 + 24) = if_nametoindex(buffer);
                  }
                }
                else
                {
                  *(_BYTE *)(a3 + 1) = 0;
                }
              }
            }
          }
        }
        CFRelease(v42);
      }
      CFRelease(v40);
    }
  }
  if (v18)
    CFRelease(v18);
  if (v6)
    CFRelease(v6);
  return 0;
}

uint64_t GetLocalHostName(char *a1, size_t a2)
{
  const __CFString *v4;
  const __CFString *v5;
  int CString;

  v4 = SCDynamicStoreCopyLocalHostName(0);
  if (!v4)
    return 4294960596;
  v5 = v4;
  CString = CFStringGetCString(v4, a1, a2, 0x8000100u);
  CFRelease(v5);
  if (!CString)
    return 4294960596;
  if (strlcat(a1, ".local", a2) >= a2)
    return 4294960553;
  return 0;
}

uint64_t GetPeerMACAddress(uint64_t a1, void *a2)
{
  int v4;
  int v5;
  uint64_t v6;
  unsigned __int16 *v7;
  unsigned __int16 *v8;
  unint64_t v9;
  unsigned __int16 *v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  size_t size;
  int v18[2];
  int v19;
  int v20;
  uint64_t v21;
  uint64_t v22;

  v22 = *MEMORY[0x1E0C80C00];
  size = 0;
  v4 = 100;
  while (1)
  {
    *(_QWORD *)v18 = 0x1100000004;
    v5 = *(unsigned __int8 *)(a1 + 1);
    v19 = 0;
    v20 = v5;
    v21 = 0x40000000002;
    if (sysctl(v18, 6u, 0, &size, 0, 0))
    {
      if (!*__error())
        return 4294960596;
      v6 = *__error();
      if ((_DWORD)v6)
        return v6;
    }
    if (!size)
      return 4294960569;
    v7 = (unsigned __int16 *)malloc_type_malloc(size, 0xA1BE9854uLL);
    if (!v7)
      return 4294960568;
    v8 = v7;
    if (!sysctl(v18, 6u, v7, &size, 0, 0))
      break;
    if (*__error())
    {
      v6 = *__error();
      if (!(_DWORD)v6)
        break;
    }
    else
    {
      v6 = 4294960596;
    }
    free(v8);
    if (!--v4)
      return v6;
  }
  if ((uint64_t)size < 1)
  {
LABEL_27:
    v6 = 4294960569;
  }
  else
  {
    v9 = (unint64_t)v8 + size;
    v10 = v8;
    while (1)
    {
      v11 = v10 + 46;
      v12 = *((unsigned __int8 *)v10 + 92);
      v13 = (v12 & 3) != 0 ? (v12 | 3) + 1 : *((unsigned __int8 *)v10 + 92);
      v14 = *((_BYTE *)v10 + 92) ? v13 : 4;
      v15 = (char *)v11 + v14;
      if (*((_BYTE *)v11 + v14 + 1) == 18
        && v15[6] == 6
        && *((_WORD *)v15 + 1)
        && !SockAddrCompareAddrEx(v11, a1, 0))
      {
        break;
      }
      v10 = (unsigned __int16 *)((char *)v10 + *v10);
      if ((unint64_t)v10 >= v9)
        goto LABEL_27;
    }
    memcpy(a2, &v15[v15[5] + 8], v15[6]);
    v6 = 0;
  }
  free(v8);
  return v6;
}

uint64_t _NTPClockGetTypeID()
{
  uint64_t result;

  result = _CFRuntimeRegisterClass();
  gNTPClockTypeID = result;
  return result;
}

void _NTPClockFinalize(uint64_t a1)
{
  void *v2;

  v2 = *(void **)(a1 + 80);
  if (v2)
  {
    free(v2);
    *(_QWORD *)(a1 + 80) = 0;
  }
}

uint64_t NTPClockCreate(uint64_t *a1)
{
  uint64_t Instance;
  uint64_t v3;
  unint64_t v4;
  unsigned int v5;
  char v6;
  BOOL v7;
  uint64_t result;

  if (gNTPClockInitOnce != -1)
    dispatch_once_f(&gNTPClockInitOnce, 0, (dispatch_function_t)_NTPClockGetTypeID);
  Instance = _CFRuntimeCreateInstance();
  if (!Instance)
    return 4294960568;
  v3 = Instance;
  bzero((void *)(Instance + 16), 0xED0uLL);
  *(_QWORD *)(v3 + 56) = &gLogCategory_NTPClockCore;
  if (UpTicksPerSecond_sOnce != -1)
    dispatch_once_f(&UpTicksPerSecond_sOnce, &UpTicksPerSecond_sTicksPerSecond, (dispatch_function_t)_UpTicksPerSecondInit);
  v4 = UpTicksPerSecond_sTicksPerSecond;
  *(_QWORD *)(v3 + 96) = UpTicksPerSecond_sTicksPerSecond;
  if (HIDWORD(v4))
  {
    v6 = -1;
    do
    {
      ++v6;
      v7 = v4 > 3;
      v4 >>= 1;
    }
    while (v7);
    LOBYTE(v5) = ~v6;
  }
  else
  {
    v5 = __clz(v4 | 1) - 31;
  }
  result = 0;
  *(_BYTE *)(v3 + 76) = v5;
  *(_QWORD *)(v3 + 224) = -1;
  *(_QWORD *)(v3 + 232) = -1;
  *a1 = v3;
  return result;
}

uint64_t NTPClockStop(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9;
  int v10;
  int v11;
  int v12;
  int v13;
  int v14;
  uint64_t result;
  const char *v16;

  v9 = *(_QWORD *)(a1 + 216);
  v10 = *(_DWORD *)(a1 + 228);
  if (v9)
  {
    SendSelfConnectedLoopbackMessage(*(_DWORD *)(a1 + 224), "q", 1uLL);
    pthread_join(*(pthread_t *)(a1 + 208), 0);
    *(_QWORD *)(a1 + 216) = 0;
  }
  v11 = *(_DWORD *)(a1 + 224);
  if ((v11 & 0x80000000) == 0)
  {
    if (close(v11) && *__error())
      __error();
    *(_DWORD *)(a1 + 224) = -1;
  }
  v12 = *(_DWORD *)(a1 + 228);
  if ((v12 & 0x80000000) == 0)
  {
    if (close(v12) && *__error())
      __error();
    *(_DWORD *)(a1 + 228) = -1;
  }
  v13 = *(_DWORD *)(a1 + 232);
  if ((v13 & 0x80000000) == 0)
  {
    if (close(v13) && *__error())
      __error();
    *(_DWORD *)(a1 + 232) = -1;
  }
  v14 = *(_DWORD *)(a1 + 236);
  if ((v14 & 0x80000000) == 0)
  {
    if (close(v14) && *__error())
      __error();
    *(_DWORD *)(a1 + 236) = -1;
  }
  result = *(_QWORD *)(a1 + 200);
  if (result)
  {
    result = pthread_mutex_destroy((pthread_mutex_t *)result);
    *(_QWORD *)(a1 + 200) = 0;
  }
  *(_DWORD *)(a1 + 52) = 0;
  if (v9)
  {
    result = *(_QWORD *)(a1 + 56);
    if (*(int *)result <= 30)
    {
      if (*(_DWORD *)result == -1)
      {
        result = _LogCategory_Initialize(result, 0x1Eu);
        if (!(_DWORD)result)
          return result;
        result = *(_QWORD *)(a1 + 56);
      }
      v16 = "server";
      if (v10 >= 0)
        v16 = "client";
      return LogPrintF(result, (uint64_t)"void NTPClockStop(NTPClockRef)", 0x1Eu, (uint64_t)"NTP %s stopped\n", a5, a6, a7, a8, (uint64_t)v16);
    }
  }
  return result;
}

uint64_t NTPClockSetEpoch(uint64_t result, int a2)
{
  *(_DWORD *)(result + 16) = a2;
  return result;
}

uint64_t NTPClockSetLogging(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 56) = a2;
  return result;
}

uint64_t NTPClockSetP2P(uint64_t result, char a2)
{
  *(_BYTE *)(result + 64) = a2;
  return result;
}

uint64_t NTPClockSetPeer(uint64_t result, __int128 *a2, signed int a3)
{
  int v3;
  __int128 v4;
  uint64_t v5;
  int v6;
  int v7;

  v3 = *((unsigned __int8 *)a2 + 1);
  if (*((_BYTE *)a2 + 1))
  {
    if (v3 == 30)
    {
      v4 = *a2;
      v5 = *((_QWORD *)a2 + 2);
      *(_DWORD *)(result + 44) = *((_DWORD *)a2 + 6);
      *(_QWORD *)(result + 36) = v5;
      goto LABEL_7;
    }
    if (v3 == 2)
    {
      v4 = *a2;
LABEL_7:
      *(_OWORD *)(result + 20) = v4;
    }
  }
  else
  {
    *(_BYTE *)(result + 21) = 0;
  }
  if (a3 >= 1)
  {
    v6 = *((unsigned __int8 *)a2 + 1);
    if ((v6 == 30 || v6 == 2) && !*((_WORD *)a2 + 1))
    {
      v7 = *(unsigned __int8 *)(result + 21);
      if (v7 == 30 || v7 == 2)
        *(_WORD *)(result + 22) = bswap32(a3) >> 16;
    }
  }
  return result;
}

uint64_t NTPClockGetListenPort(uint64_t a1)
{
  return *(unsigned int *)(a1 + 52);
}

uint64_t NTPClockSetListenPort(uint64_t result, int a2)
{
  *(_DWORD *)(result + 48) = a2;
  return result;
}

uint64_t NTPClockSetQoSDisabled(uint64_t result, char a2)
{
  *(_BYTE *)(result + 77) = a2;
  return result;
}

uint64_t NTPClockSetRTCP(uint64_t result, char a2)
{
  *(_BYTE *)(result + 78) = a2;
  return result;
}

uint64_t NTPClockSetThreadName(uint64_t a1, char *__s1)
{
  char *v3;
  uint64_t result;
  void *v5;

  if (__s1)
  {
    v3 = strdup(__s1);
    if (!v3)
      return 4294960568;
  }
  else
  {
    v3 = 0;
  }
  v5 = *(void **)(a1 + 80);
  if (v5)
    free(v5);
  result = 0;
  *(_QWORD *)(a1 + 80) = v3;
  return result;
}

uint64_t NTPClockSetThreadPriority(uint64_t result, int a2)
{
  *(_DWORD *)(result + 88) = a2;
  *(_BYTE *)(result + 92) = 1;
  return result;
}

uint64_t NTPClockSetUpTicksConvertHandler(uint64_t result, uint64_t a2, uint64_t a3)
{
  *(_QWORD *)(result + 104) = a2;
  *(_QWORD *)(result + 112) = a3;
  return result;
}

uint64_t NTPClockSetUpTicksPerSecondHandler(uint64_t result, uint64_t a2, uint64_t a3)
{
  *(_QWORD *)(result + 120) = a2;
  *(_QWORD *)(result + 128) = a3;
  return result;
}

uint64_t NTPClockStartClient(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char v13;
  uint64_t v14;
  unint64_t v15;
  int v16;
  int v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  int *v22;
  uint64_t v23;
  unsigned int v24;
  uint64_t v25;
  int v26;
  int v27;
  int v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  int *v33;
  signed int v34;
  signed int *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  const char *v41;
  int *v42;
  int *v44;
  int v45;
  timeval v46;
  fd_set v47;

  v2 = a1 + 136;
  v10 = pthread_mutex_init((pthread_mutex_t *)(a1 + 136), 0);
  if ((_DWORD)v10)
    goto LABEL_56;
  *(_QWORD *)(a1 + 200) = v2;
  if (*(_BYTE *)(a1 + 78))
  {
    *(_BYTE *)(a1 + 241) = -46;
    *(_WORD *)(a1 + 242) = 1792;
    v11 = a1 + 264;
    v12 = a1 + 268;
    v13 = 0x80;
    v14 = 32;
  }
  else
  {
    v11 = a1 + 280;
    v12 = a1 + 284;
    v13 = 35;
    v14 = 48;
  }
  *(_BYTE *)(a1 + 240) = v13;
  *(_QWORD *)(a1 + 288) = v11;
  *(_QWORD *)(a1 + 296) = v12;
  *(_QWORD *)(a1 + 304) = v14;
  *(_DWORD *)(a1 + 376) = 0;
  *(_QWORD *)(a1 + 1024) = 0;
  *(_QWORD *)(a1 + 3592) = 0;
  *(_QWORD *)(a1 + 68) = 0x44C000003E8;
  *(_QWORD *)(a1 + 3624) = 0;
  *(_OWORD *)(a1 + 3600) = 0u;
  *(_BYTE *)(a1 + 3616) = 0;
  *(_OWORD *)(a1 + 3632) = xmmword_18D51D460;
  *(_OWORD *)(a1 + 3648) = 0u;
  *(_OWORD *)(a1 + 3664) = xmmword_18D51D460;
  *(_QWORD *)(a1 + 3680) = 0;
  *(_DWORD *)(a1 + 3688) = 0;
  *(_OWORD *)(a1 + 3696) = xmmword_18D51D470;
  *(_QWORD *)(a1 + 3712) = 0x10000000000000;
  *(_QWORD *)(a1 + 3736) = 0;
  *(_OWORD *)(a1 + 3720) = 0u;
  *(_QWORD *)(a1 + 3744) = mach_absolute_time();
  v15 = *(_QWORD *)(a1 + 96);
  *(_QWORD *)(a1 + 3752) = 0xFFFFFFFFFFFFFFFFLL / v15;
  *(_QWORD *)(a1 + 3760) = v15;
  *(_OWORD *)(a1 + 3768) = 0u;
  *(_QWORD *)(a1 + 3784) = 0xFFFFFFFFFFFFFFFFLL / v15;
  *(_OWORD *)(a1 + 3792) = 0u;
  v16 = *(unsigned __int8 *)(a1 + 21);
  if ((v16 == 30 || v16 == 2) && !*(_WORD *)(a1 + 22))
    *(_WORD *)(a1 + 22) = 25115;
  v45 = 0;
  v10 = UDPClientSocketOpen(0, (__int128 *)(a1 + 20), 0, *(_DWORD *)(a1 + 48), (unsigned int *)(a1 + 52), &v45);
  if ((_DWORD)v10)
    goto LABEL_56;
  v17 = v45;
  *(_DWORD *)(a1 + 228) = v45;
  if (*(_BYTE *)(a1 + 64))
    SocketSetP2P(v17, 1);
  if (!*(_BYTE *)(a1 + 77))
    SocketSetQoS(v17, 20);
  SocketSetPacketTimestamps(v17, 1);
  v46.tv_sec = 0;
  *(_QWORD *)&v46.tv_usec = 0;
  v22 = *(int **)(a1 + 56);
  if (*v22 > 30)
    goto LABEL_18;
  if (*v22 == -1)
  {
    if (!_LogCategory_Initialize((uint64_t)v22, 0x1Eu))
      goto LABEL_18;
    v22 = *(int **)(a1 + 56);
  }
  LogPrintF((uint64_t)v22, (uint64_t)"OSStatus _NTPClockClientNegotiate(NTPClockRef)", 0x1Eu, (uint64_t)"NTP client negotiating with %##a\n", v18, v19, v20, v21, a1 + 20);
LABEL_18:
  v23 = mach_absolute_time();
  memset(&v47, 0, sizeof(v47));
  if (SecondsToUpTicks_sOnce != -1)
    dispatch_once_f(&SecondsToUpTicks_sOnce, &SecondsToUpTicks_sMultiplier, (dispatch_function_t)_SecondsToUpTicksInit);
  v24 = 0;
  LODWORD(v10) = 0;
  v25 = v23 + 10 * SecondsToUpTicks_sMultiplier;
  do
  {
    while (1)
    {
LABEL_21:
      if (mach_absolute_time() >= v25)
      {
        v10 = 4294960574;
        goto LABEL_44;
      }
      if ((_DWORD)v10 == -6757)
        break;
      v26 = _NTPClockClientSendRequest(a1);
      if (!v26)
        break;
      LODWORD(v10) = v26;
      usleep(0x186A0u);
    }
    do
    {
      v27 = *(_DWORD *)(a1 + 228);
      if (__darwin_check_fd_set_overflow(v27, &v47, 0))
        *(__int32_t *)((char *)v47.fds_bits + (((unint64_t)v27 >> 3) & 0x1FFFFFFFFFFFFFFCLL)) |= 1 << v27;
      v46.tv_sec = 0;
      v46.tv_usec = 200000;
      v28 = select(*(_DWORD *)(a1 + 228) + 1, &v47, 0, 0, &v46);
      if (v28 > 0)
        goto LABEL_32;
      if (!v28)
      {
        LODWORD(v10) = -6722;
        goto LABEL_38;
      }
      if (!*__error())
      {
        LODWORD(v10) = -6700;
LABEL_38:
        ++*(_DWORD *)(a1 + 3800);
        v33 = *(int **)(a1 + 56);
        if (*v33 > 50)
          goto LABEL_21;
        if (*v33 != -1)
          goto LABEL_40;
        if (_LogCategory_Initialize((uint64_t)v33, 0x32u))
        {
          v33 = *(int **)(a1 + 56);
LABEL_40:
          LogPrintF((uint64_t)v33, (uint64_t)"OSStatus _NTPClockClientNegotiate(NTPClockRef)", 0x32u, (uint64_t)"### NTP client negotiate wait for %##a failed (%u total): %#m\n", v29, v30, v31, v32, a1 + 20);
          goto LABEL_21;
        }
        goto LABEL_21;
      }
      LODWORD(v10) = *__error();
    }
    while ((_DWORD)v10 == 4);
    if ((_DWORD)v10)
      goto LABEL_38;
LABEL_32:
    v10 = _NTPClockClientProcessResponse(a1);
    if (!(_DWORD)v10)
      ++v24;
  }
  while (v24 < 4);
LABEL_44:
  if ((_DWORD)v10)
    v34 = 60;
  else
    v34 = 30;
  v35 = *(signed int **)(a1 + 56);
  if (v34 >= *v35)
  {
    if (*v35 != -1)
      goto LABEL_49;
    if (_LogCategory_Initialize(*(_QWORD *)(a1 + 56), v34))
    {
      v35 = *(signed int **)(a1 + 56);
LABEL_49:
      v36 = mach_absolute_time();
      UpTicksToMilliseconds(v36 - v23);
      v41 = "### ";
      if (!(_DWORD)v10)
        v41 = "";
      LogPrintF((uint64_t)v35, (uint64_t)"OSStatus _NTPClockClientNegotiate(NTPClockRef)", v34, (uint64_t)"%sNTP client negotiation with %##a %s: Good=%d, Serr=%u, Tout=%u, Rerr=%u Dur=%llu ms%s%?#m\n", v37, v38, v39, v40, (uint64_t)v41);
    }
  }
  if (!(_DWORD)v10)
  {
    v10 = OpenSelfConnectedLoopbackSocket((int *)(a1 + 224));
    if (!(_DWORD)v10)
    {
      v10 = pthread_create((pthread_t *)(a1 + 208), 0, (void *(__cdecl *)(void *))_NTPClockClientThread, (void *)a1);
      if (!(_DWORD)v10)
      {
        *(_QWORD *)(a1 + 216) = a1 + 208;
        v44 = *(int **)(a1 + 56);
        if (*v44 <= 30)
        {
          if (*v44 == -1)
          {
            if (!_LogCategory_Initialize((uint64_t)v44, 0x1Eu))
              return 0;
            v44 = *(int **)(a1 + 56);
          }
          LogPrintF((uint64_t)v44, (uint64_t)"OSStatus NTPClockStartClient(NTPClockRef)", 0x1Eu, (uint64_t)"NTP client started with %##a on port %d\n", v6, v7, v8, v9, a1 + 20);
        }
        return 0;
      }
    }
  }
LABEL_56:
  v42 = *(int **)(a1 + 56);
  if (*v42 <= 60)
  {
    if (*v42 != -1)
      goto LABEL_58;
    if (_LogCategory_Initialize((uint64_t)v42, 0x3Cu))
    {
      v42 = *(int **)(a1 + 56);
LABEL_58:
      LogPrintF((uint64_t)v42, (uint64_t)"OSStatus NTPClockStartClient(NTPClockRef)", 0x3Cu, (uint64_t)"### NTP client start failed: %#m\n", v6, v7, v8, v9, v10);
    }
  }
  NTPClockStop(a1, v3, v4, v5, v6, v7, v8, v9);
  return v10;
}

uint64_t _NTPClockClientSendRequest(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  _DWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  int *v14;
  int *v15;

  v2 = mach_absolute_time();
  v3 = *(_QWORD *)(a1 + 96);
  v4 = *(_DWORD *)(a1 + 16) + (v2 / v3);
  v5 = ((unint64_t)(v2 % v3) << 32) / v3;
  v6 = *(_DWORD **)(a1 + 296);
  **(_DWORD **)(a1 + 288) = bswap32(v4);
  *v6 = bswap32(v5);
  if (send(*(_DWORD *)(a1 + 228), (const void *)(a1 + 240), *(_QWORD *)(a1 + 304), 0) == *(_QWORD *)(a1 + 304))
  {
LABEL_4:
    v12 = *(_DWORD *)(a1 + 376);
    *(_DWORD *)(a1 + 376) = v12 + 1;
    v13 = a1 + 4 * (v12 & 7);
    *(_DWORD *)(v13 + 312) = v4;
    *(_DWORD *)(v13 + 344) = v5;
    v14 = *(int **)(a1 + 56);
    if (*v14 <= 10)
    {
      if (*v14 == -1)
      {
        if (!_LogCategory_Initialize((uint64_t)v14, 0xAu))
          return 0;
        v14 = *(int **)(a1 + 56);
      }
      LogPrintF((uint64_t)v14, (uint64_t)"OSStatus _NTPClockClientSendRequest(NTPClockRef)", 0xAu, (uint64_t)"NTP client request: 0x%08X%08X\n", v7, v8, v9, v10, v4);
    }
    return 0;
  }
  if (*__error())
  {
    v11 = *__error();
    if (!(_DWORD)v11)
      goto LABEL_4;
  }
  else
  {
    v11 = 4294960596;
  }
  ++*(_DWORD *)(a1 + 3792);
  v15 = *(int **)(a1 + 56);
  if (*v15 <= 50)
  {
    if (*v15 == -1)
    {
      if (!_LogCategory_Initialize((uint64_t)v15, 0x32u))
        return v11;
      v15 = *(int **)(a1 + 56);
    }
    LogPrintF((uint64_t)v15, (uint64_t)"OSStatus _NTPClockClientSendRequest(NTPClockRef)", 0x32u, (uint64_t)"### NTP client send to %##a failed (%u total): %#m\n", v7, v8, v9, v10, a1 + 20);
  }
  return v11;
}

uint64_t _NTPClockClientProcessResponse(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unsigned int v9;
  uint64_t v10;
  unsigned int v11;
  uint64_t v12;
  unsigned int *v13;
  uint64_t v14;
  int v15;
  int *v16;
  unsigned int v17;
  unsigned int v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  _DWORD *v29;
  int *v30;
  unint64_t v32;
  unint64_t v33;
  unint64_t v34;
  uint64_t v35;
  double v36;
  double v37;
  uint64_t v38;
  unint64_t v39;
  unint64_t v40;
  char v41;
  double v42;
  double v43;
  _DWORD *v44;
  uint64_t v45;
  unint64_t v46;
  uint64_t v47;
  uint64_t v48;
  unint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  unint64_t v53;
  unint64_t v54;
  BOOL v55;
  unint64_t v56;
  int v57;
  uint64_t v58;
  __int128 v59;
  unint64_t v60;
  uint64_t v61;
  unint64_t v62;
  int v63;
  uint64_t v64;
  __int128 v65;
  unint64_t v66;
  uint64_t v67;
  unint64_t v68;
  unint64_t v69;
  BOOL v70;
  unint64_t v71;
  char v72;
  int v73;
  int v74;
  int *v75;
  BOOL v76;
  unsigned int v77;
  const char *v78;
  uint64_t v79;
  _BOOL4 v80;
  double v81;
  int v82;
  double v83;
  int v84;
  uint64_t v85;
  unint64_t v86;
  uint64_t v87;
  uint64_t v88;
  __int128 v89;
  __int128 v90;
  unint64_t v91;
  unint64_t v92;
  unint64_t v93;
  unint64_t v94;
  uint64_t v95;
  unint64_t v96;
  unint64_t v97;
  uint64_t v98;
  unint64_t v99;
  unint64_t v100;
  uint64_t v101;
  unint64_t v102;
  unint64_t v103;
  uint64_t v104;
  double v105;
  double v106;
  double v107;
  double v108;
  double v109;
  int *v110;
  _BOOL4 v111;
  int *v112;
  int *v113;
  uint64_t v114;
  unint64_t v115;
  ssize_t v116;
  __int128 v117;
  __int128 v118;
  __int128 v119;

  v118 = 0u;
  v119 = 0u;
  v117 = 0u;
  v115 = 0;
  v116 = 0;
  v2 = SocketRecvFrom(*(_DWORD *)(a1 + 228), (uint64_t)&v117, 48, &v116, 0, 0, 0, &v115, 0, 0);
  if ((_DWORD)v2)
  {
    v7 = v2;
  }
  else
  {
    if (v116 == 32)
    {
      v8 = bswap32(DWORD2(v117));
      v9 = bswap32(HIDWORD(v117));
      v10 = bswap32(v118) + *(_DWORD *)(a1 + 16);
      v11 = bswap32(DWORD1(v118));
      v12 = bswap32(DWORD2(v118));
      v13 = (unsigned int *)&v118 + 3;
      goto LABEL_19;
    }
    if (v116 == 48)
    {
      if (!BYTE1(v117) && HIDWORD(v117) == 1313294680)
        return 4294960539;
      v8 = bswap32(DWORD2(v118));
      v9 = bswap32(HIDWORD(v118));
      v10 = bswap32(v119) + *(_DWORD *)(a1 + 16);
      v11 = bswap32(DWORD1(v119));
      v12 = bswap32(DWORD2(v119));
      v13 = (unsigned int *)&v119 + 3;
LABEL_19:
      v18 = *v13;
      v19 = v9 | (unint64_t)(v8 << 32);
      v20 = UpTicksToNTP(v115);
      if (v8 | v9)
      {
        LODWORD(v25) = *(_DWORD *)(a1 + 376);
        v25 = v25 >= 8 ? 8 : v25;
        if ((_DWORD)v25)
        {
          v26 = bswap32(v18);
          v27 = v11 | (unint64_t)(v10 << 32);
          v28 = v26 | (v12 << 32);
          v29 = (_DWORD *)(a1 + 344);
          while (*(v29 - 8) != (_DWORD)v8 || *v29 != v9)
          {
            ++v29;
            if (!--v25)
              goto LABEL_28;
          }
          *(v29 - 8) = 0;
          *v29 = 0;
          v32 = *(_QWORD *)(a1 + 1024);
          v33 = v32 + 1;
          *(_QWORD *)(a1 + 1024) = v32 + 1;
          v34 = v32 & 0xF;
          v35 = a1 + 40 * v34;
          *(_QWORD *)(v35 + 384) = v19;
          *(_QWORD *)(v35 + 392) = v27;
          *(_QWORD *)(v35 + 400) = v28;
          *(_QWORD *)(v35 + 408) = v20;
          v36 = (double)(uint64_t)(v28 - v27) * -2.32830644e-10;
          v37 = v36 + (double)(uint64_t)(v20 - v19) * 2.32830644e-10;
          *(double *)(v35 + 416) = v37;
          v38 = v32 - 12;
          if (v32 <= 0xF)
            v38 = 4;
          if (v32 <= 0x1B)
            v39 = v38;
          else
            v39 = 16;
          v40 = v33 - v39;
          if (v32 < v39)
            v40 = 0;
          v41 = 1;
          if (v40 < v32)
          {
            v42 = v36 + (double)(uint64_t)(v20 - v19) * 2.32830644e-10;
            do
            {
              if (*(double *)(a1 + 40 * (v40 & 0xF) + 416) < v42)
              {
                v42 = *(double *)(a1 + 40 * (v40 & 0xF) + 416);
                v34 = v40 & 0xF;
                v41 = 0;
              }
              ++v40;
            }
            while (v32 != v40);
          }
          if (v32)
          {
            v43 = *(double *)(a1 + 3656);
            *(double *)(a1 + 3680) = vabdd_f64(v37, v43) * 0.125 + *(double *)(a1 + 3680) * 0.875;
            *(double *)(a1 + 3656) = v37 * 0.125 + v43 * 0.875;
          }
          else
          {
            *(double *)(a1 + 3656) = v37;
          }
          if (v37 < *(double *)(a1 + 3664))
            *(double *)(a1 + 3664) = v37;
          if (v37 > *(double *)(a1 + 3672))
            *(double *)(a1 + 3672) = v37;
          v44 = &unk_1EE068000;
          if (v33 < 4)
          {
            if (!v32)
            {
              if (gLogCategory_NTPClockRaw > 40)
                goto LABEL_112;
              if (gLogCategory_NTPClockRaw != -1
                || (v111 = _LogCategory_Initialize((uint64_t)&gLogCategory_NTPClockRaw, 0x28u),
                    v44 = (_DWORD *)&unk_1EE068000,
                    v111))
              {
                LogPrintF((uint64_t)&gLogCategory_NTPClockRaw, (uint64_t)"OSStatus _NTPClockClientProcessResponse(NTPClockRef)", 0x28u, (uint64_t)"NTP Raw: #\tT1\tT2\tT3\tT4\tOffset ms\tOffsetAvg\tOffsetMin\tOffsetMax\tOffsetJitter\tRTT ms\tRTTavg\tRTTmin\tRTTmax\tRTTjitter\n", v21, v22, v23, v24, v114);
                v44 = (_DWORD *)&unk_1EE068000;
              }
            }
          }
          else if (v41 || !*(_DWORD *)(a1 + 3600))
          {
            v45 = a1 + 40 * v34;
            v46 = *(_QWORD *)(v45 + 384);
            v47 = *(_QWORD *)(a1 + 3608);
            v48 = *(_QWORD *)(v45 + 408);
            if (*(_BYTE *)(a1 + 3616))
              v47 = -v47;
            v49 = v46 + v47;
            v50 = v48 + v47;
            v51 = *(_QWORD *)(a1 + 3728);
            v52 = *(_QWORD *)(a1 + 3768);
            if (v51 > v52)
            {
              v53 = *(_QWORD *)(a1 + 3736);
              v54 = *(_QWORD *)(a1 + 3776);
LABEL_68:
              v55 = v53 >= v54;
              v56 = v53 - v54;
              v57 = !v55;
              *((_QWORD *)&v59 + 1) = (v51 - v52 - v57);
              *(_QWORD *)&v59 = v56;
              v58 = v59 >> 32;
              v60 = v49 - v58;
              v61 = v50 - v58;
              goto LABEL_78;
            }
            if (v51 == v52)
            {
              v53 = *(_QWORD *)(a1 + 3736);
              v54 = *(_QWORD *)(a1 + 3776);
              if (v53 > v54)
                goto LABEL_68;
            }
            else
            {
              v54 = *(_QWORD *)(a1 + 3776);
              v53 = *(_QWORD *)(a1 + 3736);
            }
            v55 = v54 >= v53;
            v62 = v54 - v53;
            v63 = !v55;
            *((_QWORD *)&v65 + 1) = (v52 - v51 - v63);
            *(_QWORD *)&v65 = v62;
            v64 = v65 >> 32;
            v60 = v64 + v49;
            v61 = v64 + v50;
LABEL_78:
            v66 = *(_QWORD *)(a1 + 40 * v34 + 392);
            v67 = v66 - v60;
            v55 = v60 >= v66;
            v68 = v60 - v66;
            if (!v55)
              v68 = v67;
            if (v68 <= 0x100000000)
            {
              v79 = *(_QWORD *)(a1 + 40 * v34 + 400);
LABEL_101:
              v81 = ((double)(v79 - v61) * 2.32830644e-10 + (double)v67 * 2.32830644e-10) * 0.5;
              v82 = *(_DWORD *)(a1 + 3600);
              *(_DWORD *)(a1 + 3600) = v82 + 1;
              if (v82)
              {
                v83 = *(double *)(a1 + 3624);
                *(double *)(a1 + 3648) = vabdd_f64(v81, v83) * 0.125 + *(double *)(a1 + 3648) * 0.875;
                *(double *)(a1 + 3624) = v81 * 0.125 + v83 * 0.875;
              }
              else
              {
                *(_QWORD *)(a1 + 3624) = 0;
              }
              if (v81 < *(double *)(a1 + 3632))
                *(double *)(a1 + 3632) = v81;
              if (v81 > *(double *)(a1 + 3640))
                *(double *)(a1 + 3640) = v81;
              goto LABEL_108;
            }
            v69 = v66 - v46;
            v70 = v46 > v66;
            v71 = v46 - v66;
            v72 = v70;
            *(_BYTE *)(a1 + 3616) = v72;
            if (v70)
              v69 = v71;
            *(_QWORD *)(a1 + 3608) = v69;
            v73 = *(_DWORD *)(a1 + 3604);
            if (v73)
              v74 = 50;
            else
              v74 = 40;
            v75 = *(int **)(a1 + 56);
            if (v74 < *v75)
            {
LABEL_100:
              v67 = 0;
              *(_DWORD *)(a1 + 3604) = v73 + 1;
              v79 = *(_QWORD *)(a1 + 40 * v34 + 400);
              v61 = v79;
              goto LABEL_101;
            }
            if (*v75 == -1)
            {
              v80 = _LogCategory_Initialize((uint64_t)v75, v74);
              v73 = *(_DWORD *)(a1 + 3604);
              if (!v80)
              {
LABEL_99:
                v44 = &unk_1EE068000;
                goto LABEL_100;
              }
              v75 = *(int **)(a1 + 56);
            }
            v76 = v73 == 0;
            if (v73)
              v77 = 50;
            else
              v77 = 40;
            v78 = "### ";
            if (v76)
              v78 = "";
            LogPrintF((uint64_t)v75, (uint64_t)"OSStatus _NTPClockClientProcessResponse(NTPClockRef)", v77, (uint64_t)"%sNTP client clock reset: %s%{dur}\n", v21, v22, v23, v24, (uint64_t)v78);
            v73 = *(_DWORD *)(a1 + 3604);
            goto LABEL_99;
          }
LABEL_108:
          v84 = v44[670];
          if (v84 <= 40 && (v84 != -1 || _LogCategory_Initialize((uint64_t)&gLogCategory_NTPClockRaw, 0x28u)))
            LogPrintF((uint64_t)&gLogCategory_NTPClockRaw, (uint64_t)"OSStatus _NTPClockClientProcessResponse(NTPClockRef)", 0x28u, (uint64_t)"NTP Raw: %zu\t%llu\t%llu\t%llu\t%llu\t%.9f\t%.9f\t%.9f\t%.9f\t%.9f\t%.3f\t%.3f\t%.3f\t%.3f\t%.3f\t%s\n", v21, v22, v23, v24, v32 + 1);
LABEL_112:
          if (v33 % v39)
            goto LABEL_141;
          v85 = *(_QWORD *)(a1 + 3592);
          v86 = v85 + 1;
          v87 = a1 + 1032 + 40 * (v85 & 0x3F);
          v88 = a1 + 40 * v34;
          v89 = *(_OWORD *)(v88 + 384);
          v90 = *(_OWORD *)(v88 + 400);
          *(_QWORD *)(v87 + 32) = *(_QWORD *)(v88 + 416);
          *(_OWORD *)v87 = v89;
          *(_OWORD *)(v87 + 16) = v90;
          *(_QWORD *)(a1 + 3592) = v85 + 1;
          v91 = (unint64_t)(v85 + 1) < 0x40 ? v85 + 1 : 64;
          v92 = v86 % v91;
          v93 = *(_QWORD *)(v88 + 384);
          v94 = *(_QWORD *)(a1 + 1032 + 40 * v92);
          v55 = v93 >= v94;
          v95 = v93 - v94;
          if (v95 == 0 || !v55)
            goto LABEL_141;
          v96 = *(_QWORD *)(a1 + 40 * v34 + 392);
          v97 = *(_QWORD *)(a1 + 40 * v92 + 1040);
          v55 = v96 >= v97;
          v98 = v96 - v97;
          if (v98 == 0 || !v55)
            goto LABEL_141;
          v99 = *(_QWORD *)(a1 + 40 * v34 + 400);
          v100 = *(_QWORD *)(a1 + 40 * v92 + 1048);
          v55 = v99 >= v100;
          v101 = v99 - v100;
          if (v101 == 0
            || !v55
            || (v102 = *(_QWORD *)(a1 + 40 * v34 + 408),
                v103 = *(_QWORD *)(a1 + 40 * v92 + 1056),
                v55 = v102 >= v103,
                v104 = v102 - v103,
                v104 == 0 || !v55))
          {
LABEL_141:
            if (v32 == 31)
            {
              *(_QWORD *)(a1 + 68) = 0x834000007D0;
            }
            else if (v32)
            {
              return 0;
            }
            v113 = *(int **)(a1 + 56);
            if (*v113 <= 20)
            {
              if (*v113 == -1)
              {
                if (!_LogCategory_Initialize((uint64_t)v113, 0x14u))
                  return 0;
                v113 = *(int **)(a1 + 56);
              }
              LogPrintF((uint64_t)v113, (uint64_t)"OSStatus _NTPClockClientProcessResponse(NTPClockRef)", 0x14u, (uint64_t)"NTP client poll updated: %u-%u ms\n", v21, v22, v23, v24, *(unsigned int *)(a1 + 68));
            }
            return 0;
          }
          v105 = ((double)v98 / (double)v95 + (double)v101 / (double)v104) * 0.5;
          v106 = *(double *)(a1 + 3696);
          *(double *)(a1 + 3720) = vabdd_f64(v105, v106) * 0.125 + *(double *)(a1 + 3720) * 0.875;
          v107 = v105 * 0.25 + v106 * 0.75;
          *(double *)(a1 + 3696) = v107;
          v108 = *(double *)(a1 + 3704);
          if (v105 < v108)
            *(double *)(a1 + 3704) = v105;
          if (v105 > *(double *)(a1 + 3712))
            *(double *)(a1 + 3712) = v105;
          v109 = v107 * (double)*(unint64_t *)(a1 + 96);
          *(_QWORD *)(a1 + 3760) = (unint64_t)v109;
          *(_QWORD *)(a1 + 3752) = 0xFFFFFFFFFFFFFFFFLL / (unint64_t)v109;
          if (!*(_DWORD *)(a1 + 3688))
          {
            v110 = *(int **)(a1 + 56);
            if (*v110 <= 20)
            {
              if (*v110 != -1)
              {
LABEL_131:
                LogPrintF((uint64_t)v110, (uint64_t)"OSStatus _NTPClockClientProcessResponse(NTPClockRef)", 0x14u, (uint64_t)"NTP client update: #\tRTT ms\tRTT ! \tRateNew    \tRateAvg    \tRateHz    \tJitHz\tOffset ms\tOffset Avg\tFlags\n", v21, v22, v23, v24, v114);
                goto LABEL_136;
              }
              if (_LogCategory_Initialize((uint64_t)v110, 0x14u))
              {
                v110 = *(int **)(a1 + 56);
                goto LABEL_131;
              }
            }
          }
LABEL_136:
          v112 = *(int **)(a1 + 56);
          if (*v112 <= 20)
          {
            if (*v112 == -1)
            {
              if (!_LogCategory_Initialize((uint64_t)v112, 0x14u))
                goto LABEL_140;
              v112 = *(int **)(a1 + 56);
            }
            LogPrintF((uint64_t)v112, (uint64_t)"OSStatus _NTPClockClientProcessResponse(NTPClockRef)", 0x14u, (uint64_t)"NTP client update: %zu\t%.3f\t%.3f\t%.9f\t%.9f\t%llu\t%llu\t%+.9f\t%+.9f%s%s%s%s\n", v21, v22, v23, v24, v32 + 1);
          }
LABEL_140:
          ++*(_DWORD *)(a1 + 3688);
          goto LABEL_141;
        }
      }
LABEL_28:
      ++*(_DWORD *)(a1 + 3804);
      v30 = *(int **)(a1 + 56);
      if (*v30 <= 50)
      {
        if (*v30 == -1)
        {
          if (!_LogCategory_Initialize((uint64_t)v30, 0x32u))
            return 4294960560;
          v30 = *(int **)(a1 + 56);
        }
        LogPrintF((uint64_t)v30, (uint64_t)"OSStatus _NTPClockClientProcessResponse(NTPClockRef)", 0x32u, (uint64_t)"### NTP client received unexpected response: originated 0x%016llX, received 0x%016llX (%u total)\n", v21, v22, v23, v24, v9 | (unint64_t)(v8 << 32));
      }
      return 4294960560;
    }
    v7 = 4294960553;
  }
  ++*(_DWORD *)(a1 + 3796);
  v14 = *(_QWORD *)(a1 + 216);
  if (v14)
    v15 = 40;
  else
    v15 = 50;
  v16 = *(int **)(a1 + 56);
  if (v15 >= *v16)
  {
    if (*v16 == -1)
    {
      if (!_LogCategory_Initialize((uint64_t)v16, v15))
        return v7;
      v16 = *(int **)(a1 + 56);
      v14 = *(_QWORD *)(a1 + 216);
    }
    if (v14)
      v17 = 40;
    else
      v17 = 50;
    LogPrintF((uint64_t)v16, (uint64_t)"OSStatus _NTPClockClientProcessResponse(NTPClockRef)", v17, (uint64_t)"### NTP client received bad response from %##a (%u total): %#m\n", v3, v4, v5, v6, a1 + 20);
  }
  return v7;
}

uint64_t _NTPClockClientThread(uint64_t a1)
{
  unint64_t v2;
  unint64_t v3;
  unint64_t v4;
  const char *v5;
  int v6;
  int v7;
  uint64_t v8;
  int v9;
  uint32_t v10;
  unint64_t v11;
  uint64_t v12;
  int v13;
  unint64_t v14;
  int v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  BOOL v19;
  unint64_t v20;
  unint64_t v21;
  timeval *v22;
  __darwin_time_t v23;
  __darwin_suseconds_t v24;
  int v25;
  int v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  int v35;
  uint32_t v36;
  unint64_t v37;
  unint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  timeval v45;
  fd_set v46;

  v2 = *(int *)(a1 + 224);
  v3 = *(int *)(a1 + 228);
  v4 = *(_QWORD *)(a1 + 96) / 0xAuLL;
  v45.tv_sec = 0;
  *(_QWORD *)&v45.tv_usec = 0;
  if (*(_QWORD *)(a1 + 80))
    v5 = *(const char **)(a1 + 80);
  else
    v5 = "NTPClockClient";
  pthread_setname_np(v5);
  if (*(_BYTE *)(a1 + 92))
    SetCurrentThreadPriority(*(_DWORD *)(a1 + 88));
  if ((int)v2 <= (int)v3)
    v6 = v3;
  else
    v6 = v2;
  memset(&v46.fds_bits[24], 0, 32);
  if (v6 < 0)
    v6 = -1;
  v7 = v6 + 1;
  memset(&v46, 0, 96);
  v8 = mach_absolute_time();
  v9 = *(_DWORD *)(a1 + 68);
  v10 = arc4random();
  v11 = MillisecondsToUpTicks(v10 % (*(_DWORD *)(a1 + 72) - *(_DWORD *)(a1 + 68) + 1) + v9) + v8;
  v39 = v4;
  v12 = v8 + v4;
  v13 = 1 << v2;
  v14 = v2 >> 5;
  v15 = 1 << v3;
  v16 = v3 >> 5;
LABEL_12:
  v40 = v11;
LABEL_13:
  v42 = v12;
  if (v12 >= v11)
    v17 = v11;
  else
    v17 = v12;
  do
  {
    while (1)
    {
      if (__darwin_check_fd_set_overflow(v2, &v46, 0))
        v46.fds_bits[v14] |= v13;
      if (__darwin_check_fd_set_overflow(v3, &v46, 0))
        v46.fds_bits[v16] |= v15;
      if (v17 == -1)
      {
        v22 = 0;
      }
      else
      {
        v18 = mach_absolute_time();
        v19 = v17 >= v18;
        v20 = v17 - v18;
        if (v20 != 0 && v19)
        {
          v21 = UpTicksToMicroseconds(v20);
          v23 = (int)(v21 / 0xF4240);
          v24 = v21 % 0xF4240;
        }
        else
        {
          v23 = 0;
          v24 = 0;
        }
        v45.tv_sec = v23;
        v45.tv_usec = v24;
        v22 = &v45;
      }
      v25 = select(v7, &v46, 0, 0, v22);
      if (v25 > 0)
        break;
      if (!v25)
        goto LABEL_39;
      if (*__error())
      {
        v26 = *__error();
        if (!v26)
          break;
        if (v26 != 4)
        {
          if (v26 == -6722)
          {
LABEL_39:
            v27 = mach_absolute_time();
            v12 = v42;
            if (v27 >= v42)
            {
              v43 = mach_absolute_time();
              pthread_mutex_lock(*(pthread_mutex_t **)(a1 + 200));
              v28 = (v43 - *(_DWORD *)(a1 + 3744));
              v29 = v28 * *(_QWORD *)(a1 + 3752);
              v30 = *(_QWORD *)(a1 + 3736);
              v19 = __CFADD__(v29, v30);
              *(_QWORD *)(a1 + 3736) = v29 + v30;
              v31 = *(_QWORD *)(a1 + 3728);
              if (v19)
                ++v31;
              *(_QWORD *)(a1 + 3728) = v31;
              v32 = *(_QWORD *)(a1 + 3784) * v28;
              v33 = *(_QWORD *)(a1 + 3776);
              v19 = __CFADD__(v33, v32);
              *(_QWORD *)(a1 + 3776) = v33 + v32;
              v34 = *(_QWORD *)(a1 + 3768);
              if (v19)
                ++v34;
              *(_QWORD *)(a1 + 3768) = v34;
              *(_QWORD *)(a1 + 3744) = v43;
              pthread_mutex_unlock(*(pthread_mutex_t **)(a1 + 200));
              v12 = v27 + v39;
            }
            v11 = v40;
            if (v27 >= v40)
            {
              v44 = v12;
              _NTPClockClientSendRequest(a1);
              v41 = v27;
              v35 = *(_DWORD *)(a1 + 68);
              v36 = arc4random();
              v37 = MillisecondsToUpTicks(v36 % (*(_DWORD *)(a1 + 72) - *(_DWORD *)(a1 + 68) + 1) + v35);
              v12 = v44;
              v11 = v37 + v41;
              goto LABEL_12;
            }
            goto LABEL_13;
          }
          goto LABEL_38;
        }
      }
      else
      {
LABEL_38:
        usleep(0x186A0u);
      }
    }
    if (__darwin_check_fd_set_overflow(v3, &v46, 0) && (v46.fds_bits[v16] & v15) != 0)
      _NTPClockClientProcessResponse(a1);
  }
  while (!__darwin_check_fd_set_overflow(v2, &v46, 0) || (v46.fds_bits[v14] & v13) == 0);
  return 0;
}

uint64_t NTPClockGetSynchronizedNTPTime(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  BOOL v4;
  uint64_t v5;
  unsigned int v6;
  uint64_t v7;
  __int128 v9;

  pthread_mutex_lock(*(pthread_mutex_t **)(a1 + 200));
  v2 = (mach_absolute_time() - *(_QWORD *)(a1 + 3744)) * *(_QWORD *)(a1 + 3752);
  v3 = *(_QWORD *)(a1 + 3736);
  v4 = __CFADD__(v3, v2);
  v5 = v3 + v2;
  v6 = *(_DWORD *)(a1 + 3728);
  if (v4)
    v7 = v6 + 1;
  else
    v7 = v6;
  pthread_mutex_unlock(*(pthread_mutex_t **)(a1 + 200));
  *((_QWORD *)&v9 + 1) = v7;
  *(_QWORD *)&v9 = v5;
  return v9 >> 32;
}

uint64_t NTPClockGetSynchronizedNTPTimeNearUpTicks(uint64_t a1, unint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  BOOL v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  __int128 v20;

  v4 = mach_absolute_time();
  v5 = v4;
  if (v4 >= a2)
    v6 = v4 - a2;
  else
    v6 = a2 - v4;
  pthread_mutex_lock(*(pthread_mutex_t **)(a1 + 200));
  v7 = *(_QWORD *)(a1 + 3752);
  v8 = *(_QWORD *)(a1 + 3760);
  v9 = (v5 - *(_QWORD *)(a1 + 3744)) * v7;
  v10 = *(_QWORD *)(a1 + 3736);
  v11 = v9 + v10;
  if (__CFADD__(v9, v10))
    v12 = *(_QWORD *)(a1 + 3728) + 1;
  else
    v12 = *(_QWORD *)(a1 + 3728);
  pthread_mutex_unlock(*(pthread_mutex_t **)(a1 + 200));
  v13 = v6 / v8;
  v14 = v6 % v8 * v7;
  if (v5 >= a2)
  {
    v15 = v11 >= v14;
    v16 = v11 - v14;
    v18 = !v15;
    v17 = v12 - v13 - v18;
  }
  else
  {
    v15 = __CFADD__(v14, v11);
    v16 = v14 + v11;
    v17 = v13 + v15 + v12;
  }
  *((_QWORD *)&v20 + 1) = v17;
  *(_QWORD *)&v20 = v16;
  return v20 >> 32;
}

unint64_t NTPClockGetUpTicksNearSynchronizedNTPTime(uint64_t a1, unint64_t a2)
{
  unint64_t SynchronizedNTPTime;
  uint64_t v4;

  SynchronizedNTPTime = NTPClockGetSynchronizedNTPTime(a1);
  v4 = mach_absolute_time();
  if (SynchronizedNTPTime >= a2)
    return v4 - NTPtoUpTicks(SynchronizedNTPTime - a2);
  else
    return NTPtoUpTicks(a2 - SynchronizedNTPTime) + v4;
}

uint64_t NTPClockStartServer(uint64_t a1)
{
  uint64_t (*v2)(_QWORD);
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  int v13;
  int *v14;
  int *v16;
  uint64_t v17;

  v2 = *(uint64_t (**)(_QWORD))(a1 + 120);
  if (v2)
  {
    v3 = v2(*(_QWORD *)(a1 + 128));
  }
  else
  {
    if (UpTicksPerSecond_sOnce != -1)
      dispatch_once_f(&UpTicksPerSecond_sOnce, &UpTicksPerSecond_sTicksPerSecond, (dispatch_function_t)_UpTicksPerSecondInit);
    v3 = UpTicksPerSecond_sTicksPerSecond;
  }
  v17 = 0;
  *(_QWORD *)(a1 + 96) = v3;
  v11 = ServerSocketPairOpen(2, 17, *(_DWORD *)(a1 + 48), (int *)(a1 + 52), -1, (int *)&v17 + 1, (int *)&v17);
  if (!(_DWORD)v11)
  {
    v12 = v17;
    v13 = HIDWORD(v17);
    *(_DWORD *)(a1 + 232) = HIDWORD(v17);
    *(_DWORD *)(a1 + 236) = v12;
    if ((v13 & 0x80000000) == 0)
    {
      if (*(_BYTE *)(a1 + 64))
        SocketSetP2P(v13, 1);
      if (!*(_BYTE *)(a1 + 77))
        SocketSetQoS(v13, 20);
      SocketSetPacketReceiveInfo(v13);
      SocketSetPacketTimestamps(v13, 1);
    }
    if ((v12 & 0x80000000) == 0)
    {
      if (*(_BYTE *)(a1 + 64))
        SocketSetP2P(v12, 1);
      if (!*(_BYTE *)(a1 + 77))
        SocketSetQoS(v12, 20);
      SocketSetPacketReceiveInfo(v12);
      SocketSetPacketTimestamps(v12, 1);
    }
    v11 = OpenSelfConnectedLoopbackSocket((int *)(a1 + 224));
    if (!(_DWORD)v11)
    {
      v11 = pthread_create((pthread_t *)(a1 + 208), 0, (void *(__cdecl *)(void *))_NTPClockServerThread, (void *)a1);
      if (!(_DWORD)v11)
      {
        *(_QWORD *)(a1 + 216) = a1 + 208;
        v16 = *(int **)(a1 + 56);
        if (*v16 <= 30)
        {
          if (*v16 == -1)
          {
            if (!_LogCategory_Initialize((uint64_t)v16, 0x1Eu))
              return 0;
            v16 = *(int **)(a1 + 56);
          }
          LogPrintF((uint64_t)v16, (uint64_t)"OSStatus NTPClockStartServer(NTPClockRef)", 0x1Eu, (uint64_t)"NTP server started on port %d\n", v7, v8, v9, v10, *(unsigned int *)(a1 + 52));
        }
        return 0;
      }
    }
  }
  v14 = *(int **)(a1 + 56);
  if (*v14 <= 60)
  {
    if (*v14 == -1)
    {
      if (!_LogCategory_Initialize((uint64_t)v14, 0x3Cu))
        goto LABEL_25;
      v14 = *(int **)(a1 + 56);
    }
    LogPrintF((uint64_t)v14, (uint64_t)"OSStatus NTPClockStartServer(NTPClockRef)", 0x3Cu, (uint64_t)"### NTP server start failed: %#m\n", v7, v8, v9, v10, v11);
  }
LABEL_25:
  NTPClockStop(a1, v4, v5, v6, v7, v8, v9, v10);
  return v11;
}

uint64_t SocketSetPacketReceiveInfo(int a1)
{
  uint64_t result;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unsigned int v16;

  v16 = 1;
  result = SocketGetFamily(a1);
  if ((_DWORD)result == 30)
  {
    result = setsockopt(a1, 41, 61, &v16, 4u);
    if ((_DWORD)result)
    {
      result = (uint64_t)__error();
      if (*(_DWORD *)result)
        result = (uint64_t)__error();
    }
    if (gLogCategory_NTPClockCore <= 30)
    {
      if (gLogCategory_NTPClockCore != -1)
        return LogPrintF((uint64_t)&gLogCategory_NTPClockCore, (uint64_t)"OSStatus SocketSetPacketReceiveInfo(SocketRef, int)", 0x1Eu, (uint64_t)"Set IPV6_RECVPKTINFO: enable %d, %#m", v12, v13, v14, v15, v16);
      result = _LogCategory_Initialize((uint64_t)&gLogCategory_NTPClockCore, 0x1Eu);
      if ((_DWORD)result)
        return LogPrintF((uint64_t)&gLogCategory_NTPClockCore, (uint64_t)"OSStatus SocketSetPacketReceiveInfo(SocketRef, int)", 0x1Eu, (uint64_t)"Set IPV6_RECVPKTINFO: enable %d, %#m", v12, v13, v14, v15, v16);
    }
  }
  else
  {
    v7 = result;
    if ((_DWORD)result == 2)
    {
      result = setsockopt(a1, 0, 26, &v16, 4u);
      if ((_DWORD)result)
      {
        result = (uint64_t)__error();
        if (*(_DWORD *)result)
          result = (uint64_t)__error();
      }
      if (gLogCategory_NTPClockCore <= 30)
      {
        if (gLogCategory_NTPClockCore != -1)
          return LogPrintF((uint64_t)&gLogCategory_NTPClockCore, (uint64_t)"OSStatus SocketSetPacketReceiveInfo(SocketRef, int)", 0x1Eu, (uint64_t)"Set IP_PKTINFO: enable %d, %#m", v8, v9, v10, v11, v16);
        result = _LogCategory_Initialize((uint64_t)&gLogCategory_NTPClockCore, 0x1Eu);
        if ((_DWORD)result)
          return LogPrintF((uint64_t)&gLogCategory_NTPClockCore, (uint64_t)"OSStatus SocketSetPacketReceiveInfo(SocketRef, int)", 0x1Eu, (uint64_t)"Set IP_PKTINFO: enable %d, %#m", v8, v9, v10, v11, v16);
      }
    }
    else if (gLogCategory_NTPClockCore <= 90)
    {
      if (gLogCategory_NTPClockCore != -1)
        return LogPrintF((uint64_t)&gLogCategory_NTPClockCore, (uint64_t)"OSStatus SocketSetPacketReceiveInfo(SocketRef, int)", 0x5Au, (uint64_t)"### IP_PKTINFO/IPV6_RECVPKTINFO not supported for this socket family: %d", v3, v4, v5, v6, v7);
      result = _LogCategory_Initialize((uint64_t)&gLogCategory_NTPClockCore, 0x5Au);
      if ((_DWORD)result)
        return LogPrintF((uint64_t)&gLogCategory_NTPClockCore, (uint64_t)"OSStatus SocketSetPacketReceiveInfo(SocketRef, int)", 0x5Au, (uint64_t)"### IP_PKTINFO/IPV6_RECVPKTINFO not supported for this socket family: %d", v3, v4, v5, v6, v7);
    }
  }
  return result;
}

uint64_t _NTPClockServerThread(uint64_t a1)
{
  unint64_t v2;
  unint64_t v3;
  unint64_t v4;
  const char *v5;
  int v6;
  int v7;
  unint64_t v8;
  unint64_t v9;
  int v10;
  int v11;
  unint64_t v12;
  int v13;
  int v14;
  uint64_t v16;
  int v17;
  fd_set v18;

  v2 = *(int *)(a1 + 224);
  v3 = *(unsigned int *)(a1 + 232);
  v4 = *(unsigned int *)(a1 + 236);
  if (*(_QWORD *)(a1 + 80))
    v5 = *(const char **)(a1 + 80);
  else
    v5 = "NTPClockServer";
  pthread_setname_np(v5);
  if (*(_BYTE *)(a1 + 92))
    SetCurrentThreadPriority(*(_DWORD *)(a1 + 88));
  v16 = a1;
  memset(&v18, 0, sizeof(v18));
  if ((int)v2 <= (int)v3)
    v6 = v3;
  else
    v6 = v2;
  if (v6 <= (int)v4)
    v6 = v4;
  v7 = 1 << v2;
  v8 = v2 >> 5;
  v17 = 1 << v3;
  v9 = v3 >> 5;
  if (v6 < 0)
    v6 = -1;
  v10 = v6 + 1;
  v11 = 1 << v4;
  v12 = v4 >> 5;
  do
  {
    while (1)
    {
      if (__darwin_check_fd_set_overflow(v2, &v18, 0))
        v18.fds_bits[v8] |= v7;
      if ((v3 & 0x80000000) == 0 && __darwin_check_fd_set_overflow(v3, &v18, 0))
        v18.fds_bits[v9] |= v17;
      if ((v4 & 0x80000000) == 0 && __darwin_check_fd_set_overflow(v4, &v18, 0))
        v18.fds_bits[v12] |= v11;
      v13 = select(v10, &v18, 0, 0, 0);
      if (v13 > 0)
        break;
      if (v13 && *__error())
      {
        v14 = *__error();
        if (!v14)
          break;
        if (v14 == 4)
          continue;
      }
      usleep(0x186A0u);
    }
    if ((v3 & 0x80000000) == 0 && __darwin_check_fd_set_overflow(v3, &v18, 0) && (v18.fds_bits[v9] & v17) != 0)
      _NTPClockServerProcessPacket(v16, v3);
    if ((v4 & 0x80000000) == 0 && __darwin_check_fd_set_overflow(v4, &v18, 0) && (v18.fds_bits[v12] & v11) != 0)
      _NTPClockServerProcessPacket(v16, v4);
  }
  while (!__darwin_check_fd_set_overflow(v2, &v18, 0) || (v18.fds_bits[v8] & v7) == 0);
  return 0;
}

uint64_t _NTPClockServerProcessPacket(uint64_t a1, int a2)
{
  unint64_t v4;
  ssize_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  socklen_t msg_namelen;
  unint64_t PacketUpTicks;
  unsigned int *msg_control;
  unsigned int v14;
  int v15;
  uint64_t (*v16)(unint64_t, _QWORD);
  char *v17;
  char *v18;
  __int128 *v19;
  char *v20;
  uint64_t (*v21)(uint64_t, _QWORD);
  uint64_t v22;
  unsigned int v23;
  unsigned int v24;
  socklen_t v25;
  ssize_t v26;
  uint64_t result;
  const char *v28;
  const char *v29;
  unsigned int v30;
  unsigned int v31;
  int v32;
  unsigned int v33;
  uint64_t v34;
  unsigned int v35;
  unsigned int v36;
  unsigned int v37;
  uint64_t v38;
  int v39;
  sockaddr v40;
  uint64_t v41;
  int v42;
  _OWORD v43[2];
  __int128 v44;
  msghdr v45;
  _OWORD *v46;
  uint64_t v47;
  uint64_t v48;
  int v49;
  unsigned int v50;
  unsigned int v51;
  unsigned int v52;
  uint64_t v53;
  uint64_t v54;

  v54 = *MEMORY[0x1E0C80C00];
  v4 = *(_QWORD *)(a1 + 96);
  v44 = 0u;
  memset(v43, 0, sizeof(v43));
  *(_QWORD *)&v40.sa_len = 0;
  *(_QWORD *)&v40.sa_data[6] = 0;
  v42 = 0;
  v41 = 0;
  *(&v45.msg_iovlen + 1) = 0;
  v46 = v43;
  v47 = 48;
  v45.msg_name = &v40;
  *(&v45.msg_namelen + 1) = 0;
  v45.msg_namelen = 28;
  v45.msg_iov = (iovec *)&v46;
  v45.msg_iovlen = 1;
  v45.msg_control = &v48;
  *(_QWORD *)&v45.msg_controllen = 256;
  do
  {
    v5 = recvmsg(a2, &v45, 0);
    if ((v5 & 0x8000000000000000) == 0)
      goto LABEL_6;
    if (!*__error())
      goto LABEL_17;
    v10 = *__error();
  }
  while (v10 == 4);
  if (v10)
  {
LABEL_17:
    v15 = 0;
LABEL_49:
    result = *(_QWORD *)(a1 + 56);
    if (*(int *)result > 50)
      return result;
    if (*(_DWORD *)result == -1)
    {
      result = _LogCategory_Initialize(result, 0x32u);
      if (!(_DWORD)result)
        return result;
      result = *(_QWORD *)(a1 + 56);
    }
    v29 = " RTCP";
    if (!v15)
      v29 = "";
    return LogPrintF(result, (uint64_t)"void _NTPClockServerProcessPacket(NTPClockRef, SocketRef)", 0x32u, (uint64_t)"### NTP server send%s to %##a failed: %#m\n", v6, v7, v8, v9, (uint64_t)v29);
  }
LABEL_6:
  msg_namelen = v45.msg_namelen;
  PacketUpTicks = SocketGetPacketUpTicks((unsigned int *)v45.msg_control, v45.msg_controllen);
  if (v45.msg_controllen >= 0xC)
  {
    msg_control = (unsigned int *)v45.msg_control;
    if (v45.msg_control)
    {
      do
      {
        v14 = msg_control[1];
        if (v14 == 41)
        {
          if (msg_control[2] == 46)
          {
            v39 = 0;
            v30 = msg_control[3];
            v31 = msg_control[4];
            v33 = msg_control[5];
            v32 = 30;
            v38 = *((_QWORD *)msg_control + 3);
            goto LABEL_20;
          }
        }
        else if (!v14 && msg_control[2] == 26)
        {
          v38 = 0;
          v30 = msg_control[3];
          v31 = msg_control[4];
          v32 = 2;
          v39 = 1;
          v33 = msg_control[5];
          goto LABEL_20;
        }
        msg_control = (unsigned int *)((char *)msg_control + ((*msg_control + 3) & 0x1FFFFFFFCLL));
      }
      while ((char *)(msg_control + 3) <= (char *)v45.msg_control + v45.msg_controllen);
    }
  }
  if (gLogCategory_NTPClockCore <= 90
    && (gLogCategory_NTPClockCore != -1 || _LogCategory_Initialize((uint64_t)&gLogCategory_NTPClockCore, 0x5Au)))
  {
    LogPrintF((uint64_t)&gLogCategory_NTPClockCore, (uint64_t)"OSStatus SocketGetPacketReceiveInfo(struct msghdr *, CUIPPacketInfo *)", 0x5Au, (uint64_t)"### Receive address not found. Did you enable it with setsockopt?", v6, v7, v8, v9, v34);
  }
  v39 = 0;
  v32 = 0;
  v30 = 0;
  v31 = 0;
  v33 = 0;
  v38 = 0;
LABEL_20:
  v16 = *(uint64_t (**)(unint64_t, _QWORD))(a1 + 104);
  if (v16)
    PacketUpTicks = v16(PacketUpTicks, *(_QWORD *)(a1 + 112));
  if (v5 == 48)
  {
    v35 = v33;
    v36 = v31;
    v37 = v30;
    v15 = 0;
    LOBYTE(v43[0]) = v43[0] & 0x38 | 4;
    BYTE1(v43[0]) = 1;
    BYTE3(v43[0]) = *(_BYTE *)(a1 + 76);
    *(_OWORD *)((char *)v43 + 4) = xmmword_18D51D480;
    DWORD1(v43[1]) = 0;
    v17 = (char *)&v44 + 8;
    v18 = (char *)&v44 + 12;
    *((_QWORD *)&v43[1] + 1) = *((_QWORD *)&v44 + 1);
    v19 = &v44;
    v20 = (char *)&v44 + 4;
    goto LABEL_28;
  }
  if (v5 != 32)
  {
    v15 = 0;
    goto LABEL_49;
  }
  if ((v43[0] & 0xC0) != 0x80 || (v35 = v33, v36 = v31, v37 = v30, BYTE1(v43[0]) != 210))
  {
    v15 = 1;
    goto LABEL_49;
  }
  *(_QWORD *)&v43[0] = 117494656;
  v17 = (char *)&v43[1] + 8;
  v18 = (char *)&v43[1] + 12;
  *((_QWORD *)&v43[0] + 1) = *((_QWORD *)&v43[1] + 1);
  v19 = &v43[1];
  v20 = (char *)&v43[1] + 4;
  v15 = 1;
LABEL_28:
  *(_DWORD *)v19 = bswap32(*(_DWORD *)(a1 + 16) + PacketUpTicks / v4);
  *(_DWORD *)v20 = bswap32(((unint64_t)(PacketUpTicks % v4) << 32) / v4);
  v21 = *(uint64_t (**)(uint64_t, _QWORD))(a1 + 104);
  v22 = mach_absolute_time();
  if (v21)
    v22 = v21(v22, *(_QWORD *)(a1 + 112));
  *(_DWORD *)v17 = bswap32(*(_DWORD *)(a1 + 16) + v22 / v4);
  *(_DWORD *)v18 = bswap32(((unint64_t)(v22 % v4) << 32) / v4);
  if (v32 == 30 || v32 == 2)
  {
    v46 = v43;
    v47 = v5;
    v45.msg_name = &v40;
    *(&v45.msg_namelen + 1) = 0;
    v45.msg_namelen = msg_namelen;
    v45.msg_iov = (iovec *)&v46;
    *(&v45.msg_iovlen + 1) = 0;
    v45.msg_iovlen = 1;
    v45.msg_control = &v48;
    v45.msg_flags = 0;
    if (v39)
    {
      v24 = v36;
      v23 = v37;
      if (v36 || (v24 = v35) != 0)
        v23 = 0;
      v48 = 24;
      v49 = 26;
      v50 = v23;
      v51 = v24;
      v52 = v35;
      v25 = 24;
    }
    else
    {
      v48 = 0x2900000020;
      v49 = 46;
      v50 = v37;
      v51 = v36;
      v52 = v35;
      v53 = v38;
      v25 = 32;
    }
    v45.msg_controllen = v25;
    v26 = sendmsg(a2, &v45, 0);
  }
  else
  {
    v26 = sendto(a2, v43, v5, 0, &v40, msg_namelen);
  }
  if (v26 != v5 && (!*__error() || *__error()))
    goto LABEL_49;
  result = *(_QWORD *)(a1 + 56);
  if (*(int *)result > 10)
    return result;
  if (*(_DWORD *)result == -1)
  {
    result = _LogCategory_Initialize(result, 0xAu);
    if (!(_DWORD)result)
      return result;
    result = *(_QWORD *)(a1 + 56);
  }
  v28 = "RTCP ";
  if (v5 == 48)
    v28 = "";
  return LogPrintF(result, (uint64_t)"void _NTPClockServerProcessPacket(NTPClockRef, SocketRef)", 0xAu, (uint64_t)"NTP server sent %sresponse to %##a, RAF %d", v6, v7, v8, v9, (uint64_t)v28);
}

uint64_t OPACKEstimateEncodedSize(const __CFString *a1, char a2, _DWORD *a3)
{
  int v4;
  uint64_t v6;

  v6 = 0;
  v4 = OPACKEncodeObject(a1, a2, (uint64_t)_OPACKEncoderEstimateCallback, (uint64_t)&v6);
  if (a3)
    *a3 = v4;
  return v6;
}

uint64_t _OPACKEncoderEstimateCallback(uint64_t a1, uint64_t a2, uint64_t a3, _QWORD *a4)
{
  *a4 += a2;
  return 0;
}

uint64_t _OPACKEncodeData(uint64_t a1, CFDataRef theData)
{
  unint64_t Length;
  uint64_t result;
  uint64_t v6;
  uint64_t (*v7)(const UInt8 *, unint64_t, _QWORD, _QWORD);
  const UInt8 *BytePtr;
  char v9;
  unint64_t v10;
  uint64_t v11;

  v11 = *MEMORY[0x1E0C80C00];
  Length = CFDataGetLength(theData);
  if (Length <= 1)
    goto LABEL_6;
  if (*(_QWORD *)(a1 + 16))
  {
    v9 = 0;
    result = _OPACKEncodeUID(a1, theData, &v9);
    if ((_DWORD)result || v9)
      return result;
  }
  if (Length > 0x20)
  {
    if (Length > 0xFF)
    {
      if (Length >> 16)
      {
        if (HIDWORD(Length))
        {
          v9 = -108;
          v10 = Length;
          v6 = 9;
        }
        else
        {
          v9 = -109;
          LOWORD(v10) = Length;
          BYTE2(v10) = BYTE2(Length);
          v6 = 5;
          BYTE3(v10) = BYTE3(Length);
        }
      }
      else
      {
        v9 = -110;
        LOWORD(v10) = Length;
        v6 = 3;
      }
    }
    else
    {
      v9 = -111;
      LOBYTE(v10) = Length;
      v6 = 2;
    }
  }
  else
  {
LABEL_6:
    v9 = Length + 112;
    v6 = 1;
  }
  result = (*(uint64_t (**)(char *, uint64_t, _QWORD, _QWORD))a1)(&v9, v6, 0, *(_QWORD *)(a1 + 8));
  if (Length)
  {
    if (!(_DWORD)result)
    {
      v7 = *(uint64_t (**)(const UInt8 *, unint64_t, _QWORD, _QWORD))a1;
      BytePtr = CFDataGetBytePtr(theData);
      return v7(BytePtr, Length, 0, *(_QWORD *)(a1 + 8));
    }
  }
  return result;
}

uint64_t _OPACKEncodeUUID(uint64_t a1, CFUUIDRef uuid, int a3)
{
  uint64_t result;
  char v7;
  char v8;
  CFUUIDBytes v9;

  *(_QWORD *)&v9.byte0 = 0;
  *(_QWORD *)&v9.byte8 = 0;
  if (!*(_QWORD *)(a1 + 16))
    goto LABEL_5;
  v7 = 0;
  result = _OPACKEncodeUID(a1, uuid, &v7);
  if ((_DWORD)result)
    return result;
  if (v7)
    return 0;
LABEL_5:
  v8 = 5;
  if (a3)
    -[__CFUUID getUUIDBytes:](uuid, "getUUIDBytes:", &v9);
  else
    v9 = CFUUIDGetUUIDBytes(uuid);
  return (*(uint64_t (**)(char *, uint64_t, _QWORD, _QWORD))a1)(&v8, 17, 0, *(_QWORD *)(a1 + 8));
}

uint64_t _OPACKEncodeDate(uint64_t a1, const void *a2)
{
  uint64_t result;
  char v5;
  double v6;
  uint64_t v7;

  v7 = *MEMORY[0x1E0C80C00];
  if (!*(_QWORD *)(a1 + 16) || (v5 = 0, result = _OPACKEncodeUID(a1, a2, &v5), !(_DWORD)result) && !v5)
  {
    v5 = 6;
    v6 = MEMORY[0x18D78D644](a2);
    return (*(uint64_t (**)(char *, uint64_t, _QWORD, _QWORD))a1)(&v5, 9, 0, *(_QWORD *)(a1 + 8));
  }
  return result;
}

const __CFString *OPACKDecodeBytes(UInt8 *a1, uint64_t a2, unsigned int a3, _DWORD *a4)
{
  return _OPACKDecodeBytes(0, a1, a2, a3, a4);
}

CFDataRef _OPACKDecodeDataChunks(uint64_t a1, char *a2, uint64_t a3, char **a4, int *a5)
{
  unint64_t v8;
  void *v9;
  int v10;
  char *v11;
  size_t v12;
  char *v13;
  void *v14;
  CFDataRef v15;
  CFDataRef v16;
  __CFDictionary *v17;
  char *v18;
  int v20;
  char **v21;

  if (a3 - (uint64_t)a2 < 1)
  {
    v16 = 0;
    v20 = -6750;
  }
  else
  {
    v21 = a4;
    v8 = 0;
    v9 = 0;
    while (1)
    {
      v11 = a2 + 1;
      v10 = *a2;
      if ((v10 - 112) > 0x20)
        break;
      v12 = (v10 - 112);
LABEL_5:
      if (v12)
      {
        if (a3 - (uint64_t)v11 < v12)
        {
LABEL_39:
          v20 = -6750;
          goto LABEL_28;
        }
        if (__CFADD__(v12, v8))
        {
          v20 = -6710;
          goto LABEL_28;
        }
        v13 = (char *)malloc_type_realloc(v9, v12 + v8, 0x96C41328uLL);
        if (!v13)
        {
LABEL_40:
          v20 = -6728;
          goto LABEL_28;
        }
        v14 = v13;
        memcpy(&v13[v8], v11, v12);
        a2 = &v11[v12];
        v9 = v14;
        v8 += v12;
      }
      else
      {
        a2 = v11;
      }
      if (a3 - (uint64_t)a2 < 1)
      {
        v20 = -6750;
        v11 = a2;
LABEL_28:
        if (v9)
          free(v9);
        v16 = 0;
        goto LABEL_37;
      }
    }
    switch(*a2)
    {
      case -111:
        if (a3 - (uint64_t)v11 < 1)
          goto LABEL_39;
        v11 = a2 + 2;
        v12 = a2[1];
        goto LABEL_5;
      case -110:
        if (a3 - (uint64_t)v11 < 2)
          goto LABEL_39;
        v12 = *(unsigned __int16 *)(a2 + 1);
        v11 = a2 + 3;
        goto LABEL_5;
      case -109:
        if (a3 - (uint64_t)v11 < 4)
          goto LABEL_39;
        v12 = *(unsigned int *)(a2 + 1);
        v11 = a2 + 5;
        goto LABEL_5;
      case -108:
        if (a3 - (uint64_t)v11 < 8)
          goto LABEL_39;
        v12 = *(_QWORD *)(a2 + 1);
        v11 = a2 + 9;
        if ((v12 & 0x8000000000000000) == 0)
          goto LABEL_5;
        goto LABEL_22;
      default:
        if (v10 != 3)
        {
          v20 = -6742;
          goto LABEL_28;
        }
        if ((v8 & 0x8000000000000000) != 0)
        {
LABEL_22:
          v20 = -6743;
          goto LABEL_28;
        }
        if (v9)
          v15 = CFDataCreateWithBytesNoCopy(0, (const UInt8 *)v9, v8, (CFAllocatorRef)*MEMORY[0x1E0C9AE10]);
        else
          v15 = CFDataCreate(0, (const UInt8 *)"", 0);
        v16 = v15;
        if (!v15)
          goto LABEL_40;
        if (v8 >= 2)
        {
          v17 = *(__CFDictionary **)(a1 + 24);
          if (v17)
          {
            v18 = *(char **)(a1 + 32);
            *(_QWORD *)(a1 + 32) = v18 + 1;
            CFDictionaryAddValue(v17, v18, v16);
          }
        }
        v20 = 0;
        break;
    }
LABEL_37:
    a2 = v11;
    a4 = v21;
  }
  *a4 = a2;
  *a5 = v20;
  return v16;
}

uint64_t _PairingSessionGetTypeID()
{
  uint64_t result;

  result = _CFRuntimeRegisterClass();
  gPairingSessionTypeID = result;
  return result;
}

uint64_t _PairingSessionFinalize(uint64_t a1)
{
  void (*v2)(_QWORD);
  const void *v3;
  const void *v4;
  const void *v5;
  const void *v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  const void *v11;
  const void *v12;
  const void *v13;
  const void *v14;
  void *v15;
  void *v16;
  const void *v17;
  const void *v18;
  const void *v19;
  const void *v20;
  const void *v21;
  const void *v22;
  const void *v23;
  const void *v24;
  const void *v25;
  const void *v26;
  const void *v27;
  const void *v28;
  const void *v29;
  const void *v30;
  const void *v31;
  const void *v32;
  const void *v33;
  const void *v34;

  if (*(_BYTE *)(a1 + 413))
  {
    v2 = *(void (**)(_QWORD))(a1 + 40);
    if (v2)
      v2(*(_QWORD *)(a1 + 24));
    *(_BYTE *)(a1 + 413) = 0;
  }
  _PairingSessionReset(a1);
  v3 = *(const void **)(a1 + 176);
  if (v3)
  {
    CFRelease(v3);
    *(_QWORD *)(a1 + 176) = 0;
  }
  v4 = *(const void **)(a1 + 264);
  if (v4)
  {
    CFRelease(v4);
    *(_QWORD *)(a1 + 264) = 0;
  }
  v5 = *(const void **)(a1 + 272);
  if (v5)
  {
    CFRelease(v5);
    *(_QWORD *)(a1 + 272) = 0;
  }
  v6 = *(const void **)(a1 + 280);
  if (v6)
  {
    CFRelease(v6);
    *(_QWORD *)(a1 + 280) = 0;
  }
  v7 = *(void **)(a1 + 216);
  if (v7)
  {
    free(v7);
    *(_QWORD *)(a1 + 216) = 0;
  }
  *(_QWORD *)(a1 + 224) = 0;
  v8 = *(void **)(a1 + 232);
  if (v8)
  {
    free(v8);
    *(_QWORD *)(a1 + 232) = 0;
  }
  *(_QWORD *)(a1 + 240) = 0;
  v9 = *(void **)(a1 + 248);
  if (v9)
  {
    free(v9);
    *(_QWORD *)(a1 + 248) = 0;
  }
  *(_QWORD *)(a1 + 256) = 0;
  v10 = *(void **)(a1 + 296);
  if (v10)
  {
    free(v10);
    *(_QWORD *)(a1 + 296) = 0;
  }
  *(_QWORD *)(a1 + 304) = 0;
  v11 = *(const void **)(a1 + 312);
  if (v11)
  {
    CFRelease(v11);
    *(_QWORD *)(a1 + 312) = 0;
  }
  v12 = *(const void **)(a1 + 320);
  if (v12)
  {
    CFRelease(v12);
    *(_QWORD *)(a1 + 320) = 0;
  }
  v13 = *(const void **)(a1 + 328);
  if (v13)
  {
    CFRelease(v13);
    *(_QWORD *)(a1 + 328) = 0;
  }
  v14 = *(const void **)(a1 + 336);
  if (v14)
  {
    CFRelease(v14);
    *(_QWORD *)(a1 + 336) = 0;
  }
  v15 = *(void **)(a1 + 384);
  if (v15)
  {
    free(v15);
    *(_QWORD *)(a1 + 384) = 0;
  }
  *(_QWORD *)(a1 + 392) = 0;
  v16 = *(void **)(a1 + 352);
  if (v16)
  {
    free(v16);
    *(_QWORD *)(a1 + 352) = 0;
  }
  *(_QWORD *)(a1 + 360) = 0;
  v17 = *(const void **)(a1 + 672);
  if (v17)
  {
    CFRelease(v17);
    *(_QWORD *)(a1 + 672) = 0;
  }
  v18 = *(const void **)(a1 + 344);
  if (v18)
  {
    CFRelease(v18);
    *(_QWORD *)(a1 + 344) = 0;
  }
  v19 = *(const void **)(a1 + 752);
  if (v19)
  {
    CFRelease(v19);
    *(_QWORD *)(a1 + 752) = 0;
  }
  v20 = *(const void **)(a1 + 760);
  if (v20)
  {
    CFRelease(v20);
    *(_QWORD *)(a1 + 760) = 0;
  }
  v21 = *(const void **)(a1 + 776);
  if (v21)
  {
    CFRelease(v21);
    *(_QWORD *)(a1 + 776) = 0;
  }
  v22 = *(const void **)(a1 + 784);
  if (v22)
  {
    CFRelease(v22);
    *(_QWORD *)(a1 + 784) = 0;
  }
  v23 = *(const void **)(a1 + 800);
  if (v23)
  {
    CFRelease(v23);
    *(_QWORD *)(a1 + 800) = 0;
  }
  v24 = *(const void **)(a1 + 816);
  if (v24)
  {
    CFRelease(v24);
    *(_QWORD *)(a1 + 816) = 0;
  }
  v25 = *(const void **)(a1 + 824);
  if (v25)
  {
    CFRelease(v25);
    *(_QWORD *)(a1 + 824) = 0;
  }
  v26 = *(const void **)(a1 + 832);
  if (v26)
  {
    CFRelease(v26);
    *(_QWORD *)(a1 + 832) = 0;
  }
  v27 = *(const void **)(a1 + 840);
  if (v27)
  {
    CFRelease(v27);
    *(_QWORD *)(a1 + 840) = 0;
  }
  v28 = *(const void **)(a1 + 848);
  if (v28)
  {
    CFRelease(v28);
    *(_QWORD *)(a1 + 848) = 0;
  }
  v29 = *(const void **)(a1 + 856);
  if (v29)
  {
    CFRelease(v29);
    *(_QWORD *)(a1 + 856) = 0;
  }
  v30 = *(const void **)(a1 + 944);
  if (v30)
  {
    CFRelease(v30);
    *(_QWORD *)(a1 + 944) = 0;
  }
  v31 = *(const void **)(a1 + 952);
  if (v31)
  {
    CFRelease(v31);
    *(_QWORD *)(a1 + 952) = 0;
  }
  v32 = *(const void **)(a1 + 960);
  if (v32)
  {
    CFRelease(v32);
    *(_QWORD *)(a1 + 960) = 0;
  }
  v33 = *(const void **)(a1 + 968);
  if (v33)
  {
    CFRelease(v33);
    *(_QWORD *)(a1 + 968) = 0;
  }
  v34 = *(const void **)(a1 + 976);
  if (v34)
  {
    CFRelease(v34);
    *(_QWORD *)(a1 + 976) = 0;
  }
  return memset_s((void *)(a1 + 16), 0x3C8uLL, 0, 0x3C8uLL);
}

void _PairingSessionReset(uint64_t a1)
{
  void *v2;
  void *v3;
  void *v4;
  _QWORD *v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  const void *v10;
  const void *v11;

  *(_BYTE *)(a1 + 120) = 0;
  v2 = *(void **)(a1 + 128);
  if (v2)
  {
    free(v2);
    *(_QWORD *)(a1 + 128) = 0;
  }
  *(_QWORD *)(a1 + 136) = 0;
  v3 = *(void **)(a1 + 144);
  if (v3)
  {
    free(v3);
    *(_QWORD *)(a1 + 144) = 0;
  }
  *(_QWORD *)(a1 + 152) = 0;
  *(_QWORD *)(a1 + 160) = 0;
  *(_BYTE *)(a1 + 168) = 0;
  v4 = *(void **)(a1 + 184);
  if (v4)
  {
    free(v4);
    *(_QWORD *)(a1 + 184) = 0;
  }
  *(_QWORD *)(a1 + 192) = 0;
  memset_s((void *)(a1 + 414), 0x20uLL, 0, 0x20uLL);
  v5 = *(_QWORD **)(a1 + 696);
  if (v5)
  {
    SRPDelete_libsrp(v5);
    *(_QWORD *)(a1 + 696) = 0;
  }
  v6 = *(void **)(a1 + 704);
  if (v6)
  {
    free(v6);
    *(_QWORD *)(a1 + 704) = 0;
  }
  *(_QWORD *)(a1 + 712) = 0;
  v7 = *(void **)(a1 + 720);
  if (v7)
  {
    free(v7);
    *(_QWORD *)(a1 + 720) = 0;
  }
  *(_QWORD *)(a1 + 728) = 0;
  v8 = *(void **)(a1 + 736);
  if (v8)
  {
    memset_s(v8, *(_QWORD *)(a1 + 744), 0, *(_QWORD *)(a1 + 744));
    v9 = *(void **)(a1 + 736);
    if (v9)
    {
      free(v9);
      *(_QWORD *)(a1 + 736) = 0;
    }
  }
  *(_QWORD *)(a1 + 744) = 0;
  memset_s((void *)(a1 + 478), 0x20uLL, 0, 0x20uLL);
  memset_s((void *)(a1 + 542), 0x20uLL, 0, 0x20uLL);
  memset_s((void *)(a1 + 638), 0x20uLL, 0, 0x20uLL);
  v10 = *(const void **)(a1 + 672);
  if (v10)
  {
    CFRelease(v10);
    *(_QWORD *)(a1 + 672) = 0;
  }
  v11 = *(const void **)(a1 + 848);
  if (v11)
  {
    CFRelease(v11);
    *(_QWORD *)(a1 + 848) = 0;
  }
}

uint64_t PairingSessionCreate(uint64_t *a1, uint64_t a2, int a3)
{
  uint64_t Instance;
  uint64_t v7;
  _OWORD *v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  uint64_t result;

  if (gPairingSessionInitOnce != -1)
    dispatch_once_f(&gPairingSessionInitOnce, 0, (dispatch_function_t)_PairingSessionGetTypeID);
  Instance = _CFRuntimeCreateInstance();
  if (!Instance)
    return 4294960568;
  v7 = Instance;
  bzero((void *)(Instance + 24), 0x3C0uLL);
  *(_QWORD *)(v7 + 16) = &gLogCategory_Pairing;
  *(_DWORD *)(v7 + 96) = a3;
  *(_OWORD *)(v7 + 104) = xmmword_18D51D490;
  if (SecondsToUpTicks_sOnce != -1)
    dispatch_once_f(&SecondsToUpTicks_sOnce, &SecondsToUpTicks_sMultiplier, (dispatch_function_t)_SecondsToUpTicksInit);
  *(_QWORD *)(v7 + 368) = 172800 * SecondsToUpTicks_sMultiplier;
  v8 = (_OWORD *)(v7 + 24);
  if (a2)
  {
    *v8 = *(_OWORD *)a2;
    v9 = *(_OWORD *)(a2 + 16);
    v10 = *(_OWORD *)(a2 + 32);
    v11 = *(_OWORD *)(a2 + 48);
    *(_QWORD *)(v7 + 88) = *(_QWORD *)(a2 + 64);
    *(_OWORD *)(v7 + 56) = v10;
    *(_OWORD *)(v7 + 72) = v11;
    *(_OWORD *)(v7 + 40) = v9;
  }
  else
  {
    *(_QWORD *)(v7 + 88) = 0;
    *(_OWORD *)(v7 + 56) = 0u;
    *(_OWORD *)(v7 + 72) = 0u;
    *v8 = 0u;
    *(_OWORD *)(v7 + 40) = 0u;
  }
  PairingSessionSetKeychainInfo(v7, CFSTR("com.apple.pairing"), 1886538084, CFSTR("Pairing Identity"), CFSTR("Pairing Identity"), 1886539877, CFSTR("Paired Peer"), CFSTR("Paired Peer"), 0);
  result = 0;
  *a1 = v7;
  return result;
}

void PairingSessionSetKeychainInfo(uint64_t a1, CFTypeRef cf1, int a3, CFTypeRef cf, CFTypeRef a5, int a6, CFTypeRef a7, CFTypeRef a8, int a9)
{
  int v17;
  const void *v18;
  const void *v19;
  const void *v20;
  const void *v21;
  const void *v22;

  if (cf1)
  {
    v17 = CFEqual(cf1, &stru_1E25DF9F8);
    v18 = *(const void **)(a1 + 752);
    if (v17)
    {
      if (v18)
      {
        CFRelease(*(CFTypeRef *)(a1 + 752));
        *(_QWORD *)(a1 + 752) = 0;
      }
    }
    else
    {
      CFRetain(cf1);
      *(_QWORD *)(a1 + 752) = cf1;
      if (v18)
        CFRelease(v18);
    }
  }
  if (a3)
    *(_DWORD *)(a1 + 768) = a3;
  if (cf)
  {
    v19 = *(const void **)(a1 + 760);
    CFRetain(cf);
    *(_QWORD *)(a1 + 760) = cf;
    if (v19)
      CFRelease(v19);
  }
  if (a5)
  {
    v20 = *(const void **)(a1 + 776);
    CFRetain(a5);
    *(_QWORD *)(a1 + 776) = a5;
    if (v20)
      CFRelease(v20);
  }
  if (a6)
    *(_DWORD *)(a1 + 792) = a6;
  if (a7)
  {
    v21 = *(const void **)(a1 + 784);
    CFRetain(a7);
    *(_QWORD *)(a1 + 784) = a7;
    if (v21)
      CFRelease(v21);
  }
  if (a8)
  {
    v22 = *(const void **)(a1 + 800);
    CFRetain(a8);
    *(_QWORD *)(a1 + 800) = a8;
    if (v22)
      CFRelease(v22);
  }
  *(_DWORD *)(a1 + 808) = a9;
}

void PairingSessionInvalidate(_QWORD *a1)
{
  void *v1;
  NSObject *queue;

  v1 = (void *)a1[107];
  if (v1)
  {
    queue = v1;
    CFRetain(a1);
    dispatch_async_f(queue, a1, (dispatch_function_t)_PairingSessionInvalidate);

  }
}

void _PairingSessionInvalidate(_QWORD *cf)
{
  const void *v2;
  const void *v3;
  const void *v4;
  const void *v5;
  const void *v6;
  void (*v7)(uint64_t, _QWORD, _QWORD);

  v2 = (const void *)cf[118];
  if (v2)
  {
    CFRelease(v2);
    cf[118] = 0;
  }
  v3 = (const void *)cf[119];
  if (v3)
  {
    CFRelease(v3);
    cf[119] = 0;
  }
  v4 = (const void *)cf[120];
  if (v4)
  {
    CFRelease(v4);
    cf[120] = 0;
  }
  v5 = (const void *)cf[121];
  if (v5)
  {
    CFRelease(v5);
    cf[121] = 0;
  }
  v6 = (const void *)cf[122];
  if (v6)
  {
    CFRelease(v6);
    cf[122] = 0;
  }
  v7 = (void (*)(uint64_t, _QWORD, _QWORD))cf[108];
  if (v7)
  {
    v7(1, 0, cf[109]);
    cf[108] = 0;
  }
  CFRelease(cf);
}

uint64_t PairingSessionCopyPeerACL(uint64_t a1)
{
  uint64_t v1;

  v1 = *(_QWORD *)(a1 + 272);
  if (v1)
    CFRetain(*(CFTypeRef *)(a1 + 272));
  return v1;
}

uint64_t PairingSessionSetACL(uint64_t a1, CFTypeRef cf)
{
  const void *v4;

  v4 = *(const void **)(a1 + 176);
  if (cf)
    CFRetain(cf);
  *(_QWORD *)(a1 + 176) = cf;
  if (v4)
    CFRelease(v4);
  return 0;
}

uint64_t PairingSessionGetPeerAppFlags(uint64_t a1)
{
  return *(_QWORD *)(a1 + 200);
}

uint64_t PairingSessionSetSelfAppFlags(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 208) = a2;
  return result;
}

void *PairingSessionCopyExtraData(uint64_t a1, size_t *a2, int *a3)
{
  size_t v6;
  void *v7;
  void *v8;
  size_t v9;
  int v10;

  if (*(_QWORD *)(a1 + 232))
  {
    if (*(_QWORD *)(a1 + 240) <= 1uLL)
      v6 = 1;
    else
      v6 = *(_QWORD *)(a1 + 240);
    v7 = malloc_type_malloc(v6, 0xF2C83834uLL);
    v8 = v7;
    if (v7)
    {
      v9 = *(_QWORD *)(a1 + 240);
      memcpy(v7, *(const void **)(a1 + 232), v9);
      v10 = 0;
    }
    else
    {
      v9 = 0;
      v10 = -6728;
    }
  }
  else
  {
    v8 = 0;
    v9 = 0;
    v10 = -6727;
  }
  if (a2)
    *a2 = v9;
  if (a3)
    *a3 = v10;
  return v8;
}

uint64_t PairingSessionSetExtraData(uint64_t a1, const void *a2, size_t a3)
{
  size_t v6;
  void *v7;
  void *v8;
  void *v9;
  uint64_t result;

  if (a2)
  {
    if (a3 <= 1)
      v6 = 1;
    else
      v6 = a3;
    v7 = malloc_type_malloc(v6, 0xE65E393CuLL);
    if (!v7)
      return 4294960568;
    v8 = v7;
    if (a3)
      memcpy(v7, a2, a3);
  }
  else
  {
    v8 = 0;
  }
  v9 = *(void **)(a1 + 216);
  if (v9)
    free(v9);
  result = 0;
  *(_QWORD *)(a1 + 216) = v8;
  *(_QWORD *)(a1 + 224) = a3;
  return result;
}

uint64_t PairingSessionGetPeerFlags(uint64_t a1)
{
  return *(unsigned int *)(a1 + 288);
}

uint64_t PairingSessionSetFlags(uint64_t result, int a2)
{
  *(_DWORD *)(result + 100) = a2;
  return result;
}

uint64_t PairingSessionSetIdentifier(uint64_t a1, char *__s, size_t a3)
{
  return ReplaceString((void **)(a1 + 248), (size_t *)(a1 + 256), __s, a3);
}

CFMutableDictionaryRef PairingSessionCopyPeerInfo(_QWORD *a1, int *a2)
{
  const __CFDictionary *v4;
  CFMutableDictionaryRef MutableCopy;
  const __CFDictionary *v6;
  const __CFDictionary *v7;
  const __CFDictionary *v8;
  CFTypeID TypeID;
  const __CFDictionary *TypedValue;
  const __CFDictionary *v11;
  int v12;

  v4 = (const __CFDictionary *)a1[39];
  if (!v4)
  {
    v7 = (const __CFDictionary *)a1[40];
    if (!v7)
    {
      MutableCopy = 0;
      goto LABEL_9;
    }
    MutableCopy = CFDictionaryCreateMutableCopy(0, 0, v7);
    if (MutableCopy)
      goto LABEL_9;
LABEL_18:
    v12 = -6728;
    goto LABEL_15;
  }
  MutableCopy = CFDictionaryCreateMutableCopy(0, 0, v4);
  if (!MutableCopy)
    goto LABEL_18;
  v6 = (const __CFDictionary *)a1[40];
  if (v6)
    CFDictionaryApplyFunction(v6, (CFDictionaryApplierFunction)_CFDictionaryMergeDictionaryApplier, MutableCopy);
LABEL_9:
  v8 = (const __CFDictionary *)a1[43];
  TypeID = CFDictionaryGetTypeID();
  TypedValue = CFDictionaryGetTypedValue(v8, CFSTR("groupInfoPeer"), TypeID, 0);
  if (TypedValue)
  {
    v11 = TypedValue;
    if (MutableCopy || (MutableCopy = CFDictionaryCreateMutableCopy(0, 0, TypedValue)) != 0)
    {
      CFDictionarySetValue(MutableCopy, CFSTR("groupInfo"), v11);
LABEL_14:
      CFDictionaryRemoveValue(MutableCopy, CFSTR("altIRK"));
      v12 = 0;
      goto LABEL_15;
    }
    goto LABEL_18;
  }
  if (MutableCopy)
    goto LABEL_14;
  v12 = -6727;
LABEL_15:
  if (a2)
    *a2 = v12;
  return MutableCopy;
}

uint64_t PairingSessionSetAdditionalPeerInfo(uint64_t a1, CFTypeRef cf)
{
  const void *v4;

  v4 = *(const void **)(a1 + 320);
  if (cf)
    CFRetain(cf);
  *(_QWORD *)(a1 + 320) = cf;
  if (v4)
    CFRelease(v4);
  return 0;
}

uint64_t PairingSessionSetAdditionalSelfInfo(uint64_t a1, CFTypeRef cf)
{
  const void *v4;

  v4 = *(const void **)(a1 + 336);
  if (cf)
    CFRetain(cf);
  *(_QWORD *)(a1 + 336) = cf;
  if (v4)
    CFRelease(v4);
  return 0;
}

uint64_t PairingSessionSetLogging(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 16) = a2;
  return result;
}

void PairingSessionSetMaxTries(uint64_t a1, int a2)
{
  gPairingMaxTries = a2;
}

uint64_t PairingSessionSetMTU(uint64_t a1, unint64_t a2)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;

  if (a2 < 2)
    return 4294960553;
  v3 = a2 - 2 * (a2 / 0x101);
  v4 = a2 % 0x101 ? -1 : 0;
  v5 = -2;
  if (a2 % 0x101 <= 1)
    v5 = v4;
  v6 = v3 + v5;
  if (!(v3 + v5))
    return 4294960553;
  v2 = 0;
  *(_QWORD *)(a1 + 104) = v6;
  *(_QWORD *)(a1 + 112) = a2;
  return v2;
}

id PairingSessionCopyPairedPeer(uint64_t a1, int *a2)
{
  void *v3;
  id v4;
  int v5;

  v3 = *(void **)(a1 + 264);
  if (!v3)
  {
    v5 = -6727;
    if (!a2)
      return v3;
    goto LABEL_3;
  }
  v4 = v3;
  v5 = 0;
  if (a2)
LABEL_3:
    *a2 = v5;
  return v3;
}

id PairingSessionGetPairedPeer(uint64_t a1, int *a2)
{
  void *v3;
  id v4;
  int v5;

  v3 = *(void **)(a1 + 264);
  if (!v3)
  {
    v5 = -6727;
    if (!a2)
      return v3;
    goto LABEL_3;
  }
  v4 = v3;
  v5 = 0;
  if (a2)
LABEL_3:
    *a2 = v5;
  return v3;
}

char *PairingSessionCopyPeerIdentifier(uint64_t a1, size_t *a2, int *a3)
{
  char *result;
  size_t v7;
  BOOL v8;
  size_t v9;
  int v10;

  result = *(char **)(a1 + 296);
  if (result)
  {
    v7 = *(_QWORD *)(a1 + 304);
    result = strndup(result, v7);
    v8 = result == 0;
    if (result)
    {
      v9 = v7;
    }
    else
    {
      result = 0;
      v9 = 0;
    }
    if (v8)
      v10 = -6728;
    else
      v10 = 0;
    if (a2)
      goto LABEL_9;
  }
  else
  {
    v9 = 0;
    v10 = -6727;
    if (a2)
LABEL_9:
      *a2 = v9;
  }
  if (a3)
    *a3 = v10;
  return result;
}

const void *PairingSessionCopyProperty(uint64_t a1, const void *a2, int *a3)
{
  const __CFDictionary *v4;
  const void *Value;
  const void *v6;
  int v7;

  v4 = *(const __CFDictionary **)(a1 + 344);
  if (!v4)
  {
    v6 = 0;
LABEL_7:
    v7 = -6727;
    if (!a3)
      return v6;
    goto LABEL_4;
  }
  Value = CFDictionaryGetValue(v4, a2);
  v6 = Value;
  if (!Value)
    goto LABEL_7;
  CFRetain(Value);
  v7 = 0;
  if (a3)
LABEL_4:
    *a3 = v7;
  return v6;
}

uint64_t PairingSessionSetProperty(uint64_t a1, void *key, void *value)
{
  __CFDictionary *Mutable;

  Mutable = *(__CFDictionary **)(a1 + 344);
  if (!Mutable)
  {
    Mutable = CFDictionaryCreateMutable(0, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
    *(_QWORD *)(a1 + 344) = Mutable;
    if (!Mutable)
      return 4294960568;
  }
  if (value)
    CFDictionarySetValue(Mutable, key, value);
  else
    CFDictionaryRemoveValue(Mutable, key);
  return 0;
}

uint64_t PairingSessionGetResumeInfo(uint64_t a1, _QWORD *a2)
{
  int v3;
  uint64_t result;

  v3 = *(_DWORD *)(a1 + 96);
  if ((v3 - 3) > 1)
  {
    if ((v3 - 5) > 1 || *(_BYTE *)(a1 + 120) != 3)
      return 4294960587;
LABEL_6:
    result = 0;
    *a2 = *(_QWORD *)(a1 + 376);
    return result;
  }
  if (*(_BYTE *)(a1 + 120) == 5)
    goto LABEL_6;
  return 4294960587;
}

uint64_t PairingSessionSetResumeInfo(_QWORD *a1, uint64_t a2, const void *a3, size_t a4)
{
  size_t v8;
  void *v9;
  void *v10;
  void *v11;
  uint64_t result;

  if (a4 <= 1)
    v8 = 1;
  else
    v8 = a4;
  v9 = malloc_type_malloc(v8, 0xECB049C0uLL);
  if (!v9)
    return 4294960568;
  v10 = v9;
  if (a4)
    memcpy(v9, a3, a4);
  v11 = (void *)a1[44];
  if (v11)
    free(v11);
  result = 0;
  a1[44] = v10;
  a1[45] = a4;
  a1[47] = a2;
  return result;
}

uint64_t PairingSessionSetMaxResumeSessions(uint64_t a1, int a2)
{
  gPairingMaxResumeSessions = a2;
  return 0;
}

uint64_t PairingSessionSetResumeTTL(uint64_t a1, unsigned int a2)
{
  if (SecondsToUpTicks_sOnce != -1)
    dispatch_once_f(&SecondsToUpTicks_sOnce, &SecondsToUpTicks_sMultiplier, (dispatch_function_t)_SecondsToUpTicksInit);
  *(_QWORD *)(a1 + 368) = SecondsToUpTicks_sMultiplier * a2;
  return 0;
}

uint64_t PairingSessionSetSetupCode(uint64_t a1, char *__s, size_t a3)
{
  return ReplaceString((void **)(a1 + 384), (size_t *)(a1 + 392), __s, a3);
}

uint64_t PairingSessionGenerateTranscriptResultMFi4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  const __CFData *v9;
  const UInt8 *BytePtr;
  CFIndex Length;
  CFIndex v13;
  uint64_t v14;
  uint64_t v15;
  int *v17;
  char v18[32];
  char v19[32];
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  uint64_t v46;

  v46 = *MEMORY[0x1E0C80C00];
  v9 = *(const __CFData **)(a1 + 672);
  if (v9)
  {
    BytePtr = CFDataGetBytePtr(v9);
    Length = CFDataGetLength(*(CFDataRef *)(a1 + 672));
    if (Length)
    {
      v13 = Length;
      v14 = PairingSessionDeriveKey(a1, "MFi4-KT1-Salt", 0xDuLL, (uint64_t)"MFi4-KT1-Info", 13, 0x20uLL, (uint64_t)v19);
      if ((_DWORD)v14)
      {
        v15 = v14;
      }
      else
      {
        v44 = 0u;
        v45 = 0u;
        v42 = 0u;
        v43 = 0u;
        v40 = 0u;
        v41 = 0u;
        v38 = 0u;
        v39 = 0u;
        v36 = 0u;
        v37 = 0u;
        v34 = 0u;
        v35 = 0u;
        v32 = 0u;
        v33 = 0u;
        v30 = 0u;
        v31 = 0u;
        v28 = 0u;
        v29 = 0u;
        v26 = 0u;
        v27 = 0u;
        v24 = 0u;
        v25 = 0u;
        v22 = 0u;
        v23 = 0u;
        v20 = 0u;
        v21 = 0u;
        CryptoHMACInit(&v20, kCryptoHashDescriptor_SHA256, v19, 0x20uLL);
        (*(void (**)(__int128 *, const UInt8 *, CFIndex))(v20 + 8))(&v20, BytePtr, v13);
        CryptoHMACFinal((uint64_t *)&v20, a2);
        v15 = PairingSessionDeriveKey(a1, "MFi4-KT2-Salt", 0xDuLL, (uint64_t)"MFi4-KT2-Info", 13, 0x20uLL, (uint64_t)v18);
        if (!(_DWORD)v15)
        {
          v44 = 0u;
          v45 = 0u;
          v42 = 0u;
          v43 = 0u;
          v40 = 0u;
          v41 = 0u;
          v38 = 0u;
          v39 = 0u;
          v36 = 0u;
          v37 = 0u;
          v34 = 0u;
          v35 = 0u;
          v32 = 0u;
          v33 = 0u;
          v30 = 0u;
          v31 = 0u;
          v28 = 0u;
          v29 = 0u;
          v26 = 0u;
          v27 = 0u;
          v24 = 0u;
          v25 = 0u;
          v22 = 0u;
          v23 = 0u;
          v20 = 0u;
          v21 = 0u;
          CryptoHMACInit(&v20, kCryptoHashDescriptor_SHA256, v18, 0x20uLL);
          (*(void (**)(__int128 *, const UInt8 *, CFIndex))(v20 + 8))(&v20, BytePtr, v13);
          CryptoHMACFinal((uint64_t *)&v20, a2 + 32);
          return v15;
        }
      }
    }
    else
    {
      v15 = 4294960553;
    }
  }
  else
  {
    v15 = 4294960551;
  }
  v17 = *(int **)(a1 + 16);
  if (*v17 <= 90)
  {
    if (*v17 == -1)
    {
      if (!_LogCategory_Initialize((uint64_t)v17, 0x5Au))
        return v15;
      v17 = *(int **)(a1 + 16);
    }
    LogPrintF((uint64_t)v17, (uint64_t)"OSStatus PairingSessionGenerateTranscriptResultMFi4(PairingSessionRef, CUPairingTranscriptResultMFi4 *)", 0x5Au, (uint64_t)"### Generate MFi4 transcript result failed: %#m", a5, a6, a7, a8, v15);
  }
  return v15;
}

uint64_t PairingSessionDeriveKey(uint64_t a1, char *a2, unint64_t a3, uint64_t a4, uint64_t a5, unint64_t a6, uint64_t a7)
{
  unsigned int v8;
  uint64_t result;
  uint64_t v15;
  uint64_t v16;

  v8 = *(_DWORD *)(a1 + 96);
  result = 4294960561;
  if (v8 <= 6)
  {
    if (((1 << v8) & 6) != 0)
    {
      if (*(_BYTE *)(a1 + 120) != 7)
        return 4294960587;
      v15 = *(_QWORD *)(a1 + 736);
      if (!v15)
        return 4294960587;
      v16 = *(_QWORD *)(a1 + 744);
      if (!v16)
        return 4294960587;
      CryptoHKDF((uint64_t)kCryptoHashDescriptor_SHA512, v15, v16, a2, a3, a4, a5, a6, a7);
    }
    else
    {
      if (((1 << v8) & 0x18) != 0)
      {
        if (*(_BYTE *)(a1 + 120) != 5)
          return 4294960587;
      }
      else
      {
        if (((1 << v8) & 0x60) == 0)
          return result;
        if (*(_BYTE *)(a1 + 120) != 3)
          return 4294960587;
      }
      CryptoHKDF((uint64_t)kCryptoHashDescriptor_SHA512, a1 + 638, 32, a2, a3, a4, a5, a6, a7);
    }
    return 0;
  }
  return result;
}

uint64_t PairingSessionSetTranscriptType(uint64_t a1, int a2)
{
  *(_DWORD *)(a1 + 680) = a2;
  return 0;
}

uint64_t PairingSessionSetEventHandler(uint64_t result, uint64_t a2, uint64_t a3)
{
  *(_QWORD *)(result + 864) = a2;
  *(_QWORD *)(result + 872) = a3;
  return result;
}

uint64_t PairingSessionSetAddPairingHandler(uint64_t result, uint64_t a2, uint64_t a3)
{
  *(_QWORD *)(result + 880) = a2;
  *(_QWORD *)(result + 888) = a3;
  return result;
}

uint64_t PairingSessionSetRemovePairingHandler(uint64_t result, uint64_t a2, uint64_t a3)
{
  *(_QWORD *)(result + 896) = a2;
  *(_QWORD *)(result + 904) = a3;
  return result;
}

uint64_t PairingSessionSetListPairingsHandler(uint64_t result, uint64_t a2, uint64_t a3)
{
  *(_QWORD *)(result + 912) = a2;
  *(_QWORD *)(result + 920) = a3;
  return result;
}

uint64_t PairingSessionSetSignBytesHandler(uint64_t result, uint64_t a2, uint64_t a3)
{
  *(_QWORD *)(result + 928) = a2;
  *(_QWORD *)(result + 936) = a3;
  return result;
}

void PairingSessionSetSignBytesHandler_b(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  uint64_t v5;
  const void *v6;
  const void *v7;
  id v8;

  v3 = a2;
  v4 = v3;
  if (v3)
  {
    v8 = v3;
    v5 = objc_msgSend(v3, "copy");
    v6 = *(const void **)(a1 + 944);
    if (v6)
      CFRelease(v6);
    *(_QWORD *)(a1 + 944) = v5;
    v4 = v8;
  }
  else
  {
    v7 = *(const void **)(a1 + 944);
    if (v7)
    {
      CFRelease(v7);
      v4 = 0;
      *(_QWORD *)(a1 + 944) = 0;
    }
  }

}

void PairingSessionSetVerifySignatureHandler_b(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  uint64_t v5;
  const void *v6;
  const void *v7;
  id v8;

  v3 = a2;
  v4 = v3;
  if (v3)
  {
    v8 = v3;
    v5 = objc_msgSend(v3, "copy");
    v6 = *(const void **)(a1 + 952);
    if (v6)
      CFRelease(v6);
    *(_QWORD *)(a1 + 952) = v5;
    v4 = v8;
  }
  else
  {
    v7 = *(const void **)(a1 + 952);
    if (v7)
    {
      CFRelease(v7);
      v4 = 0;
      *(_QWORD *)(a1 + 952) = 0;
    }
  }

}

uint64_t PairingSessionExchange(uint64_t a1, unsigned __int8 *a2, CFIndex a3, char **a4, size_t *a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  char *v8;
  int *v14;
  uint64_t v15;
  const char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  const void *v21;
  uint64_t v22;
  int v23;
  void *v24;
  unint64_t v25;
  char *v26;
  unsigned __int8 *v27;
  unsigned __int8 *v28;
  char *v29;
  size_t v30;
  char v31;
  uint64_t v32;
  uint64_t v33;
  size_t v34;
  size_t v35;
  char v36;
  uint64_t v37;
  size_t v38;
  char *v39;
  uint64_t v41;
  uint64_t v42;
  unint64_t v43;
  unsigned __int8 *v44;
  unsigned __int8 *v45;
  uint64_t v46;
  unsigned __int8 *v47;
  int v48;
  size_t v49;
  char *v50;
  unsigned __int8 *v51;
  unsigned __int8 *v52;
  _BYTE *v53;
  uint64_t v54;
  int v55;
  uint64_t v56;
  int *v57;
  __CFDictionary *v58;
  uint64_t v59;
  size_t v60;
  char *v61;
  size_t v62;
  uint64_t v63;
  void *v64;
  size_t v65;
  size_t v66;
  void *v67;
  int *v68;
  int *v69;
  int v70;
  uint64_t v71;
  int *v72;
  uint64_t v73;
  unint64_t UInt64;
  uint64_t (*v75)(__CFDictionary *, uint64_t);
  uint64_t v76;
  uint64_t v77;
  char *v78;
  const __CFDictionary *v79;
  CFTypeID TypeID;
  const __CFData *TypedValue;
  const __CFData *v82;
  const UInt8 *BytePtr;
  size_t Length;
  char *v85;
  unsigned int Int64Ranged;
  int appended;
  uint64_t (*v88)(unsigned int *, _QWORD);
  __CFArray *v89;
  unsigned int v90;
  int v91;
  int *v92;
  int *v93;
  int v94;
  uint64_t v95;
  size_t v96;
  char *v97;
  size_t v98;
  char *v99;
  int *v100;
  int v101;
  uint64_t v102;
  char *v103;
  int *v104;
  __CFArray *v105;
  __CFArray *v106;
  CFIndex v107;
  CFTypeID v108;
  const __CFArray *TypedValueAtIndex;
  const __CFDictionary *v110;
  CFMutableDictionaryRef v111;
  CFMutableDictionaryRef v112;
  CFTypeID v113;
  const __CFDictionary *v114;
  CFTypeID v115;
  const __CFDictionary *v116;
  unsigned int v117;
  char *v118;
  uint64_t v119;
  int *v120;
  const UInt8 *v121;
  char *v122;
  CFTypeID v123;
  const __CFData *v124;
  const __CFData *v125;
  unsigned int v126;
  void *v127;
  unsigned __int8 *v128;
  unsigned __int8 *v129;
  unsigned __int8 *v130;
  uint64_t v131;
  int v132;
  uint64_t v133;
  int *v134;
  int *v135;
  int v136;
  uint64_t v137;
  CFMutableDictionaryRef v138;
  unsigned __int8 *v139;
  char *v140;
  CFIndex v141;
  unsigned __int8 v142;
  uint64_t v143;
  int v144;
  uint64_t v145;
  _BOOL4 v146;
  unint64_t v147;
  unsigned int v148;
  size_t v149;
  char *v150;
  size_t v151;
  char *v152;
  int *v153;
  int v154;
  uint64_t v155;
  _BOOL4 v156;
  int v157;
  int *v158;
  CFIndex v159;
  unsigned int v160;
  CFTypeID v161;
  const __CFArray *v162;
  const __CFDictionary *v163;
  CFTypeID v164;
  const __CFString *v165;
  CFTypeID v166;
  const __CFData *v167;
  const __CFData *v168;
  char *v169;
  size_t v170;
  unsigned int v171;
  uint64_t v172;
  CFIndex Count;
  CFIndex theArray;
  __CFArray *Mutable;
  char *__s;
  CFIndex v177;
  unsigned __int8 *v178;
  char **v179;
  size_t *v180;
  char *v181;
  size_t v182;
  char *v183;
  void *v184;
  CFIndex v185;
  UInt8 *v186;
  char __dst;
  unsigned int Bytes;
  void *v189;
  UInt8 *__src;
  unsigned int v191;
  void *v192;
  __int128 v193;
  void *v194;
  __int128 v195;
  __int128 v196;
  __int128 v197;
  __int128 v198;
  __int128 v199;
  __int128 v200;
  __int128 v201;
  __int128 v202;
  __int128 v203;
  __int128 v204;
  __int128 v205;
  __int128 v206;
  __int128 v207;
  __int128 v208;
  __int128 v209;
  __int128 v210;
  __int128 v211;
  __int128 v212;
  __int128 v213;
  char v214[8];
  uint64_t v215;

  v215 = *MEMORY[0x1E0C80C00];
  v182 = 0;
  v183 = 0;
  if (!a1)
    return 4294960556;
  v8 = (char *)a6;
  __s = (char *)(a1 + 120);
  if (!*(_BYTE *)(a1 + 120))
  {
    v14 = *(int **)(a1 + 16);
    if (*v14 <= 30)
    {
      if (*v14 == -1)
      {
        if (!_LogCategory_Initialize((uint64_t)v14, 0x1Eu))
          goto LABEL_12;
        v14 = *(int **)(a1 + 16);
      }
      v15 = *(unsigned int *)(a1 + 96);
      if (v15 > 0xE)
        v16 = "?";
      else
        v16 = off_1E25DEF00[v15];
      LogPrintF((uint64_t)v14, (uint64_t)"OSStatus PairingSessionExchange(PairingSessionRef, const void *, size_t, uint8_t **, size_t *, Boolean *)", 0x1Eu, (uint64_t)"PairStart, %s, %#{flags}\n", (uint64_t)a5, a6, a7, a8, (uint64_t)v16);
    }
  }
LABEL_12:
  v179 = a4;
  v180 = a5;
  *(_QWORD *)v214 = 0;
  v189 = 0;
  __src = 0;
  v212 = 0u;
  v213 = 0u;
  v210 = 0u;
  v211 = 0u;
  v208 = 0u;
  v209 = 0u;
  v206 = 0u;
  v207 = 0u;
  v204 = 0u;
  v205 = 0u;
  v202 = 0u;
  v203 = 0u;
  v200 = 0u;
  v201 = 0u;
  v198 = 0u;
  v199 = 0u;
  v197 = 0u;
  v196 = 0u;
  v195 = 0u;
  v192 = &v195;
  v193 = xmmword_18D51D4A0;
  v194 = 0;
  v18 = TLV8GetOrCopyCoalesced(a2, &a2[a3], 12, &__src, (size_t *)&v189, v214, 0);
  v23 = v18;
  v17 = v18;
  if ((_DWORD)v18 == -6727)
    v17 = TLV8GetOrCopyCoalesced(a2, &a2[a3], 13, &__src, (size_t *)&v189, v214, 0);
  v181 = v8;
  if ((_DWORD)v17)
  {
    v177 = a3;
    v178 = a2;
    v29 = 0;
    v30 = 0;
    v31 = 0;
    if ((_DWORD)v17 == -6727)
      v17 = 0;
    v28 = 0;
    goto LABEL_43;
  }
  v24 = v189;
  if (!v189)
  {
    v33 = *(_QWORD *)(a1 + 152);
    v32 = *(_QWORD *)(a1 + 160);
    if ((unint64_t)(v33 - v32) >= *(_QWORD *)(a1 + 104))
      v34 = *(_QWORD *)(a1 + 104);
    else
      v34 = v33 - v32;
    v177 = a3;
    v178 = a2;
    if (!v34)
    {
      v29 = 0;
      v30 = 0;
      v31 = 0;
      v28 = 0;
      v17 = 4294960534;
      goto LABEL_42;
    }
    v35 = v34 + v32;
    if (v34 + v32 == v33)
      v36 = 13;
    else
      v36 = 12;
    v37 = TLV8BufferAppend((uint64_t)&v192, v36, (char *)(*(_QWORD *)(a1 + 144) + v32), v34);
    if ((_DWORD)v37)
      goto LABEL_41;
    v30 = v193;
    v29 = (char *)v194;
    if (!v194)
    {
      if ((unint64_t)v193 <= 1)
        v38 = 1;
      else
        v38 = v193;
      v39 = (char *)malloc_type_malloc(v38, 0xF62D7A9CuLL);
      v29 = v39;
      if (!v39)
      {
        v30 = 0;
        v31 = 0;
        v28 = 0;
        goto LABEL_390;
      }
      if (v30)
        memcpy(v39, v192, v30);
    }
    v192 = &v195;
    *(_QWORD *)&v193 = 0;
    v194 = 0;
    if (v35 == v33)
    {
      v31 = *(_BYTE *)(a1 + 168);
      free(*(void **)(a1 + 144));
      v17 = 0;
      v28 = 0;
      *(_QWORD *)(a1 + 144) = 0;
      *(_QWORD *)(a1 + 152) = 0;
      *(_BYTE *)(a1 + 168) = 0;
      *(_QWORD *)(a1 + 160) = 0;
    }
    else
    {
      v31 = 0;
      v17 = 0;
      v28 = 0;
      *(_QWORD *)(a1 + 160) += v34;
    }
    goto LABEL_42;
  }
  v25 = *(_QWORD *)(a1 + 136);
  v26 = (char *)v189 + v25;
  if ((unint64_t)v189 + v25 <= v25)
  {
    v177 = a3;
    v178 = a2;
    v29 = 0;
    v30 = 0;
    v31 = 0;
    v28 = 0;
    v17 = 4294960545;
    goto LABEL_42;
  }
  if ((unint64_t)v26 > 0x3E80)
  {
    v177 = a3;
    v178 = a2;
    v29 = 0;
    v30 = 0;
    v31 = 0;
    v28 = 0;
    v17 = 4294960553;
    goto LABEL_42;
  }
  v27 = (unsigned __int8 *)malloc_type_realloc(*(void **)(a1 + 128), (size_t)v26, 0x4D1B8E83uLL);
  v28 = v27;
  if (!v27)
  {
    v177 = a3;
    v178 = a2;
    v29 = 0;
    v30 = 0;
    v31 = 0;
LABEL_390:
    v17 = 4294960568;
    goto LABEL_42;
  }
  memcpy(&v27[*(_QWORD *)(a1 + 136)], __src, (size_t)v24);
  if (*(_QWORD *)v214)
  {
    free(*(void **)v214);
    *(_QWORD *)v214 = 0;
  }
  if (v23 == -6727)
  {
    v29 = 0;
    v30 = 0;
    v31 = 0;
    v17 = 0;
    *(_QWORD *)(a1 + 128) = 0;
    *(_QWORD *)(a1 + 136) = 0;
    v177 = (CFIndex)v26;
    v178 = v28;
LABEL_42:
    v8 = v181;
    goto LABEL_43;
  }
  v177 = a3;
  v178 = a2;
  *(_QWORD *)(a1 + 128) = v28;
  *(_QWORD *)(a1 + 136) = v26;
  v37 = TLV8BufferAppend((uint64_t)&v192, 12, 0, 0);
  if ((_DWORD)v37)
  {
LABEL_41:
    v17 = v37;
    v29 = 0;
    v30 = 0;
    v31 = 0;
    v28 = 0;
    goto LABEL_42;
  }
  v30 = v193;
  v29 = (char *)v194;
  v8 = v181;
  if (v194)
    goto LABEL_79;
  if ((unint64_t)v193 <= 1)
    v49 = 1;
  else
    v49 = v193;
  v50 = (char *)malloc_type_malloc(v49, 0xF62D7A9CuLL);
  v29 = v50;
  if (v50)
  {
    if (v30)
      memcpy(v50, v192, v30);
LABEL_79:
    v31 = 0;
    v17 = 0;
    v28 = 0;
    v192 = &v195;
    *(_QWORD *)&v193 = 0;
    v194 = 0;
    goto LABEL_43;
  }
  v30 = 0;
  v31 = 0;
  v28 = 0;
  v17 = 4294960568;
LABEL_43:
  if (v194)
  {
    free(v194);
    v194 = 0;
  }
  if (*(_QWORD *)v214)
    free(*(void **)v214);
  v182 = v30;
  v183 = v29;
  *v8 = v31;
  if ((_DWORD)v17)
    goto LABEL_51;
  if (!v29)
  {
    v41 = *(unsigned int *)(a1 + 96);
    switch((int)v41)
    {
      case 1:
        v59 = _SetupClientExchange(a1, v178, v177, (UInt8 **)&v183, (const char *)&v182, (uint64_t)v8, v21, v22);
        goto LABEL_123;
      case 2:
        v59 = _SetupServerExchange(a1, v178, v177, (UInt8 **)&v183, &v182, (uint64_t)v8, (uint64_t)v21, v22);
        goto LABEL_123;
      case 3:
        v59 = _VerifyClientExchange(a1, v178, v177, &v183, (uint64_t)&v182, (uint64_t)v8, (uint64_t)v21, v22);
        goto LABEL_123;
      case 4:
        v59 = _VerifyServerExchange(a1, v178, v177, (UInt8 **)&v183, &v182, (uint64_t)v8, (uint64_t)v21, v22);
        goto LABEL_123;
      case 5:
        v59 = _ResumePairingClientExchange(a1, v178, v177, &v183, &v182, v8, (uint64_t)v21, v22);
        goto LABEL_123;
      case 6:
        v59 = _ResumePairingServerExchange(a1, v178, v177, &v183, &v182, v8, (uint64_t)v21, v22);
LABEL_123:
        v17 = v59;
        goto LABEL_124;
      case 9:
      case 11:
      case 13:
        v42 = *__s;
        if (!*__s)
        {
          v42 = 1;
          *__s = 1;
        }
        v43 = (unint64_t)&v178[v177];
        if (v177)
        {
          v44 = v178;
          do
          {
            if (v44 == (unsigned __int8 *)v43)
              goto LABEL_268;
            if ((unint64_t)v44 >= v43)
            {
              v17 = 4294960591;
              goto LABEL_286;
            }
            if (v43 - (unint64_t)v44 < 2)
            {
LABEL_268:
              v17 = 4294960569;
              goto LABEL_286;
            }
            v45 = v44 + 2;
            v46 = v44[1];
            v47 = &v44[v46 + 2];
            if ((unint64_t)v47 > v43)
            {
              v17 = 4294960546;
              goto LABEL_286;
            }
            v48 = *v44;
            v44 += v46 + 2;
          }
          while (v48 != 6);
          if ((_DWORD)v46 != 1)
            goto LABEL_404;
          if (*v45 != (_DWORD)v42)
            goto LABEL_205;
        }
        else
        {
          v47 = 0;
        }
        if ((_DWORD)v42 != 2)
        {
          if ((_DWORD)v42 != 1)
          {
            v72 = *(int **)(a1 + 16);
            if (*v72 <= 60)
            {
              if (*v72 == -1)
              {
                if (!_LogCategory_Initialize((uint64_t)v72, 0x3Cu))
                  goto LABEL_205;
                v72 = *(int **)(a1 + 16);
                v42 = *(unsigned __int8 *)(a1 + 120);
              }
              LogPrintF((uint64_t)v72, (uint64_t)"OSStatus _AdminPairingClientExchange(PairingSessionRef, const void *, size_t, uint8_t **, size_t *, Boolean *)", 0x3Cu, (uint64_t)"### AdminPairing client bad state: %d\n", v19, v20, (uint64_t)v21, v22, v42);
            }
LABEL_205:
            v17 = 4294960587;
            goto LABEL_286;
          }
          LODWORD(v186) = 0;
          v212 = 0u;
          v213 = 0u;
          v210 = 0u;
          v211 = 0u;
          v208 = 0u;
          v209 = 0u;
          v206 = 0u;
          v207 = 0u;
          v204 = 0u;
          v205 = 0u;
          v202 = 0u;
          v203 = 0u;
          v200 = 0u;
          v201 = 0u;
          v198 = 0u;
          v199 = 0u;
          v197 = 0u;
          v196 = 0u;
          v195 = 0u;
          v189 = 0;
          __src = 0;
          v192 = &v195;
          v193 = xmmword_18D51D4A0;
          v194 = 0;
          if (!v177)
          {
            LODWORD(v186) = TLV8BufferAppend((uint64_t)&v192, 6, __s, 1uLL);
            if ((_DWORD)v186)
              goto LABEL_101;
            v77 = *(unsigned int *)(a1 + 96);
            switch((_DWORD)v77)
            {
              case 0xD:
                v214[0] = 5;
                appended = TLV8BufferAppend((uint64_t)&v192, 0, v214, 1uLL);
LABEL_220:
                LODWORD(v186) = appended;
                if (appended)
                  goto LABEL_101;
LABEL_221:
                v96 = v193;
                v97 = (char *)v194;
                if (!v194)
                {
                  if ((unint64_t)v193 <= 1)
                    v98 = 1;
                  else
                    v98 = v193;
                  v99 = (char *)malloc_type_malloc(v98, 0xF62D7A9CuLL);
                  if (!v99)
                  {
                    LODWORD(v186) = -6728;
                    v8 = v181;
                    goto LABEL_101;
                  }
                  v97 = v99;
                  if (v96)
                    memcpy(v99, v192, v96);
                }
                v192 = &v195;
                *(_QWORD *)&v193 = 0;
                v194 = 0;
                v182 = v96;
                v183 = v97;
                LODWORD(v186) = 0;
                *(_BYTE *)(a1 + 120) = 2;
                v100 = *(int **)(a1 + 16);
                v101 = *v100;
                v8 = v181;
                if (*v100 > 30)
                  goto LABEL_101;
                if (v101 == -1)
                {
                  if (!_LogCategory_Initialize(*(_QWORD *)(a1 + 16), 0x1Eu))
                    goto LABEL_101;
                  v100 = *(int **)(a1 + 16);
                  v101 = *v100;
                }
                if (v101 > 10)
                  v102 = 1;
                else
                  v102 = v101 == -1 && !_LogCategory_Initialize((uint64_t)v100, 0xAu);
                LogPrintF((uint64_t)v100, (uint64_t)"OSStatus _AdminPairingClientM1(PairingSessionRef, const uint8_t *const, const uint8_t *const, uint8_t **, size_t *)", 0x1Eu, (uint64_t)"AdminPairing client M1 -- request\n%?{end}%1{tlv8}\n", v19, v20, (uint64_t)v21, v22, v102);
LABEL_101:
                if (v189)
                  free(v189);
                if (v194)
                  free(v194);
                v17 = v186;
                *v8 = 0;
                if (!(_DWORD)v17)
                  goto LABEL_125;
LABEL_287:
                v135 = *(int **)(a1 + 16);
                v136 = *v135;
                if (*v135 > 50)
                  goto LABEL_124;
                if (v136 == -1)
                {
                  if (!_LogCategory_Initialize(*(_QWORD *)(a1 + 16), 0x32u))
                    goto LABEL_124;
                  v135 = *(int **)(a1 + 16);
                  v136 = *v135;
                }
                v137 = *__s;
                if (v136 == -1)
                  _LogCategory_Initialize((uint64_t)v135, 0x28u);
                LogPrintF((uint64_t)v135, (uint64_t)"OSStatus _AdminPairingClientExchange(PairingSessionRef, const void *, size_t, uint8_t **, size_t *, Boolean *)", 0x32u, (uint64_t)"### AdminPairing client state %d failed: %#m\n%?{end}%1{tlv8}\n", v19, v20, (uint64_t)v21, v22, v137);
LABEL_124:
                if ((_DWORD)v17)
                  goto LABEL_51;
LABEL_125:
                v60 = v182;
                v212 = 0u;
                v213 = 0u;
                v210 = 0u;
                v211 = 0u;
                v208 = 0u;
                v209 = 0u;
                v206 = 0u;
                v207 = 0u;
                v204 = 0u;
                v205 = 0u;
                v202 = 0u;
                v203 = 0u;
                v200 = 0u;
                v201 = 0u;
                v198 = 0u;
                v199 = 0u;
                v197 = 0u;
                v196 = 0u;
                v195 = 0u;
                v192 = &v195;
                v193 = xmmword_18D51D4A0;
                v194 = 0;
                if (*(_QWORD *)(a1 + 112) >= v182)
                {
                  v17 = 0;
                  *v179 = v183;
                  *v180 = v60;
                  goto LABEL_50;
                }
                if (*(_QWORD *)(a1 + 144) || *(_QWORD *)(a1 + 152))
                {
                  v17 = 4294960593;
                  goto LABEL_51;
                }
                v61 = v183;
                *(_QWORD *)(a1 + 144) = v183;
                *(_QWORD *)(a1 + 152) = v60;
                v62 = *(_QWORD *)(a1 + 104);
                *(_QWORD *)(a1 + 160) = v62;
                *(_BYTE *)(a1 + 168) = *v8;
                v63 = TLV8BufferAppend((uint64_t)&v192, 12, v61, v62);
                v183 = 0;
                v64 = v194;
                if ((_DWORD)v63)
                {
                  v17 = v63;
                  if (!v194)
                    goto LABEL_51;
LABEL_130:
                  free(v64);
                  goto LABEL_51;
                }
                v65 = v193;
                if (!v194)
                {
                  if ((unint64_t)v193 <= 1)
                    v66 = 1;
                  else
                    v66 = v193;
                  v67 = malloc_type_malloc(v66, 0xF62D7A9CuLL);
                  if (!v67)
                  {
                    v17 = 4294960568;
                    v64 = v194;
                    if (!v194)
                      goto LABEL_51;
                    goto LABEL_130;
                  }
                  v64 = v67;
                  if (v65)
                    memcpy(v67, v192, v65);
                }
                v17 = 0;
                v192 = &v195;
                *(_QWORD *)&v193 = 0;
                v194 = 0;
                *v179 = (char *)v64;
                *v180 = v65;
                *v181 = 0;
                goto LABEL_51;
              case 0xB:
                v214[0] = 4;
                LODWORD(v186) = TLV8BufferAppend((uint64_t)&v192, 0, v214, 1uLL);
                if ((_DWORD)v186)
                  goto LABEL_101;
                v103 = (char *)CFDictionaryGetOrCopyBytes(*(const __CFDictionary **)(a1 + 344), CFSTR("controllerIdentifier"), (CFIndex *)&__src, (UInt8 **)&v189, (int *)&v186);
                if (!v103)
                  goto LABEL_101;
                LODWORD(v186) = TLV8BufferAppend((uint64_t)&v192, 1, v103, (size_t)__src);
                if ((_DWORD)v186)
                  goto LABEL_101;
                if (v189)
                {
                  free(v189);
                  v189 = 0;
                }
                goto LABEL_221;
              case 9:
                v214[0] = 3;
                LODWORD(v186) = TLV8BufferAppend((uint64_t)&v192, 0, v214, 1uLL);
                if ((_DWORD)v186)
                  goto LABEL_101;
                v78 = (char *)CFDictionaryGetOrCopyBytes(*(const __CFDictionary **)(a1 + 344), CFSTR("controllerIdentifier"), (CFIndex *)&__src, (UInt8 **)&v189, (int *)&v186);
                if (!v78)
                  goto LABEL_101;
                LODWORD(v186) = TLV8BufferAppend((uint64_t)&v192, 1, v78, (size_t)__src);
                if ((_DWORD)v186)
                  goto LABEL_101;
                if (v189)
                {
                  free(v189);
                  v189 = 0;
                }
                v79 = *(const __CFDictionary **)(a1 + 344);
                TypeID = CFDataGetTypeID();
                TypedValue = CFDictionaryGetTypedValue(v79, CFSTR("controllerPK"), TypeID, (int *)&v186);
                if (!TypedValue)
                  goto LABEL_101;
                v82 = TypedValue;
                BytePtr = CFDataGetBytePtr(TypedValue);
                Length = CFDataGetLength(v82);
                v85 = (char *)BytePtr;
                v8 = v181;
                LODWORD(v186) = TLV8BufferAppend((uint64_t)&v192, 3, v85, Length);
                if ((_DWORD)v186)
                  goto LABEL_101;
                Int64Ranged = CFDictionaryGetInt64Ranged(*(const __CFDictionary **)(a1 + 344), CFSTR("permissions"), 0, 0xFFFFFFFFLL, (int *)&v186);
                if ((_DWORD)v186)
                  goto LABEL_101;
                appended = TLV8BufferAppendUInt64((uint64_t)&v192, 11, Int64Ranged);
                goto LABEL_220;
            }
            v104 = *(int **)(a1 + 16);
            if (*v104 <= 60)
            {
              if (*v104 == -1)
              {
                if (!_LogCategory_Initialize((uint64_t)v104, 0x3Cu))
                  goto LABEL_371;
                v104 = *(int **)(a1 + 16);
                v77 = *(unsigned int *)(a1 + 96);
              }
              LogPrintF((uint64_t)v104, (uint64_t)"OSStatus _AdminPairingClientM1(PairingSessionRef, const uint8_t *const, const uint8_t *const, uint8_t **, size_t *)", 0x3Cu, (uint64_t)"### AdminPairing client bad session type %d\n", v19, v20, (uint64_t)v21, v22, v77);
            }
          }
LABEL_371:
          LODWORD(v186) = -6705;
          goto LABEL_101;
        }
        v69 = *(int **)(a1 + 16);
        v70 = *v69;
        if (*v69 > 30)
          goto LABEL_271;
        if (v70 != -1)
          goto LABEL_145;
        if (_LogCategory_Initialize(*(_QWORD *)(a1 + 16), 0x1Eu))
        {
          v69 = *(int **)(a1 + 16);
          v70 = *v69;
LABEL_145:
          if (v70 > 10)
            v71 = 1;
          else
            v71 = v70 == -1 && !_LogCategory_Initialize((uint64_t)v69, 0xAu);
          LogPrintF((uint64_t)v69, (uint64_t)"OSStatus _AdminPairingClientM2(PairingSessionRef, const uint8_t *const, const uint8_t *const, const uint8_t *const)", 0x1Eu, (uint64_t)"AdminPairing client M2 -- response\n%?{end}%1{tlv8}\n", v19, v20, (uint64_t)v21, v22, v71);
        }
LABEL_271:
        v129 = v178;
        while (v43 > (unint64_t)v129)
        {
          if (v43 - (unint64_t)v129 < 2)
            break;
          v130 = v129 + 2;
          v131 = v129[1];
          if ((unint64_t)&v129[v131 + 2] > v43)
            break;
          v132 = *v129;
          v129 += v131 + 2;
          if (v132 == 7)
          {
            if ((_DWORD)v131 == 1)
            {
              v133 = *v130;
              if (v133 >= 9)
              {
                if ((_DWORD)v133 == 9)
                  v17 = 4294960520;
                else
                  v17 = 4294960596;
              }
              else
              {
                v17 = dword_18D51F670[v133];
              }
              v134 = *(int **)(a1 + 16);
              if (*v134 <= 50)
              {
                if (*v134 != -1)
                  goto LABEL_284;
                if (_LogCategory_Initialize((uint64_t)v134, 0x32u))
                {
                  v134 = *(int **)(a1 + 16);
                  v133 = *v130;
LABEL_284:
                  LogPrintF((uint64_t)v134, (uint64_t)"OSStatus _AdminPairingClientM2(PairingSessionRef, const uint8_t *const, const uint8_t *const, const uint8_t *const)", 0x32u, (uint64_t)"### AdminPairing client M2 bad status: 0x%X, %#m\n", v19, v20, (uint64_t)v21, v22, v133);
                }
              }
              goto LABEL_286;
            }
LABEL_404:
            v17 = 4294960553;
            goto LABEL_286;
          }
        }
        if (*(_DWORD *)(a1 + 96) == 13)
        {
          Mutable = CFArrayCreateMutable(0, 0, MEMORY[0x1E0C9B378]);
          if (!Mutable)
          {
            v17 = 4294960568;
            goto LABEL_286;
          }
          while (2)
          {
            v138 = 0;
LABEL_298:
            if (v43 > (unint64_t)v47 && v43 - (unint64_t)v47 >= 2)
            {
              v139 = v47;
              v140 = (char *)(v47 + 2);
              v141 = v47[1];
              v47 += v141 + 2;
              if ((unint64_t)v47 <= v43)
              {
                v142 = *v139;
                if (v138
                  || (v138 = CFDictionaryCreateMutable(0, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0])) != 0)
                {
                  switch(((v142 + 1) >> 1) | ((v142 + 1) << 7))
                  {
                    case 0:
                      if (CFDictionaryGetCount(v138) >= 1)
                        CFArrayAppendValue(Mutable, v138);
                      CFRelease(v138);
                      continue;
                    case 1:
                      v143 = CFDictionarySetCString(v138, CFSTR("identifier"), v140, v141);
                      if (!(_DWORD)v143)
                        goto LABEL_298;
                      break;
                    case 2:
                      v143 = CFDictionarySetData(v138, CFSTR("pk"), (UInt8 *)v140, v141);
                      if (!(_DWORD)v143)
                        goto LABEL_298;
                      break;
                    case 6:
                      v17 = 4294960553;
                      v144 = v141 - 1;
                      v8 = v181;
                      switch(v144)
                      {
                        case 0:
                          v145 = *v140;
                          break;
                        case 1:
                          v145 = *((unsigned __int16 *)v139 + 1);
                          break;
                        case 2:
                        case 4:
                        case 5:
                        case 6:
                          goto LABEL_402;
                        case 3:
                          v145 = *(unsigned int *)v140;
                          break;
                        case 7:
                          v145 = *(_QWORD *)v140;
                          break;
                        default:
                          goto LABEL_401;
                      }
                      v143 = CFDictionarySetInt64(v138, CFSTR("permissions"), v145);
                      if (!(_DWORD)v143)
                        goto LABEL_298;
                      break;
                    default:
                      goto LABEL_298;
                  }
                  v17 = v143;
LABEL_401:
                  v8 = v181;
LABEL_402:
                  CFRelease(v138);
                  CFRelease(Mutable);
                }
                else
                {
                  CFRelease(Mutable);
                  v17 = 4294960568;
                  v8 = v181;
                }
                goto LABEL_286;
              }
            }
            break;
          }
          v8 = v181;
          if (v138)
          {
            if (CFDictionaryGetCount(v138) >= 1)
              CFArrayAppendValue(Mutable, v138);
            CFRelease(v138);
          }
          v17 = PairingSessionSetProperty(a1, CFSTR("pairings"), Mutable);
          CFRelease(Mutable);
          if ((_DWORD)v17)
          {
LABEL_286:
            *v8 = 0;
            goto LABEL_287;
          }
        }
        *(_BYTE *)(a1 + 120) = 3;
        v158 = *(int **)(a1 + 16);
        if (*v158 > 30)
          goto LABEL_394;
        if (*v158 != -1)
          goto LABEL_386;
        if (_LogCategory_Initialize((uint64_t)v158, 0x1Eu))
        {
          v158 = *(int **)(a1 + 16);
LABEL_386:
          LogPrintF((uint64_t)v158, (uint64_t)"OSStatus _AdminPairingClientM2(PairingSessionRef, const uint8_t *const, const uint8_t *const, const uint8_t *const)", 0x1Eu, (uint64_t)"AdminPairing client done\n", v19, v20, (uint64_t)v21, v22, v172);
        }
LABEL_394:
        v182 = 0;
        v183 = 0;
        *v8 = 1;
        goto LABEL_125;
      case 10:
      case 12:
      case 14:
        v51 = &v178[v177];
        v52 = v178;
        do
        {
          if (v52 == v51)
          {
LABEL_218:
            v17 = 4294960569;
            goto LABEL_208;
          }
          if (v52 >= v51)
          {
            v17 = 4294960591;
            goto LABEL_208;
          }
          if ((unint64_t)(v51 - v52) < 2)
            goto LABEL_218;
          v53 = v52 + 2;
          v54 = v52[1];
          if (&v52[v54 + 2] > v51)
          {
            v17 = 4294960546;
            goto LABEL_208;
          }
          v55 = *v52;
          v52 += v54 + 2;
        }
        while (v55 != 6);
        if ((_DWORD)v54 != 1)
        {
          v17 = 4294960553;
          goto LABEL_208;
        }
        if (*v53 == 1)
          _PairingSessionReset(a1);
        v56 = *__s;
        if (*__s)
        {
          if (*v53 != (_DWORD)v56)
            goto LABEL_207;
          if ((_DWORD)v56 != 1)
          {
            v57 = *(int **)(a1 + 16);
            if (*v57 <= 60)
            {
              if (*v57 != -1)
                goto LABEL_94;
              if (_LogCategory_Initialize((uint64_t)v57, 0x3Cu))
              {
                v57 = *(int **)(a1 + 16);
                v56 = *(unsigned __int8 *)(a1 + 120);
LABEL_94:
                LogPrintF((uint64_t)v57, (uint64_t)"OSStatus _AdminPairingServerExchange(PairingSessionRef, const void *, size_t, uint8_t **, size_t *, Boolean *)", 0x3Cu, (uint64_t)"### AdminPairing server bad state: %d\n", v19, v20, (uint64_t)v21, v22, v56);
              }
            }
LABEL_207:
            v17 = 4294960587;
LABEL_208:
            *v8 = 0;
            goto LABEL_209;
          }
        }
        else
        {
          *__s = 1;
          if (*v53 != 1)
            goto LABEL_207;
        }
        v212 = 0u;
        v213 = 0u;
        v210 = 0u;
        v211 = 0u;
        v208 = 0u;
        v209 = 0u;
        v206 = 0u;
        v207 = 0u;
        v204 = 0u;
        v205 = 0u;
        v202 = 0u;
        v203 = 0u;
        v200 = 0u;
        v201 = 0u;
        v198 = 0u;
        v199 = 0u;
        v197 = 0u;
        v196 = 0u;
        v195 = 0u;
        __dst = 0;
        v185 = 0;
        v186 = 0;
        v184 = 0;
        v192 = &v195;
        v193 = xmmword_18D51D4A0;
        v194 = 0;
        *__s = 2;
        v58 = 0;
        Bytes = TLV8BufferAppend((uint64_t)&v192, 6, __s, 1uLL);
        if (Bytes)
          goto LABEL_109;
        v73 = *(unsigned int *)(a1 + 96);
        switch((_DWORD)v73)
        {
          case 0xE:
            Bytes = TLV8GetBytes(v178, v51, 0, 1uLL, 1uLL, &__dst, 0, 0);
            if (Bytes)
              goto LABEL_411;
            if (__dst == 5)
            {
              v58 = CFDictionaryCreateMutable(0, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
              if (v58)
              {
                v88 = *(uint64_t (**)(unsigned int *, _QWORD))(a1 + 912);
                if (v88)
                {
                  v89 = (__CFArray *)v88(&Bytes, *(_QWORD *)(a1 + 920));
                  v90 = Bytes;
                }
                else
                {
                  *(_DWORD *)v214 = 0;
                  v89 = CFArrayCreateMutable(0, 0, MEMORY[0x1E0C9B378]);
                  if (v89)
                  {
                    v105 = _PairingSessionCopyPeers(a1, 0, 0, v214);
                    if (v105)
                    {
                      v106 = v105;
                      Count = CFArrayGetCount(v105);
                      if (Count < 1)
                      {
LABEL_250:
                        CFRelease(v106);
                        v8 = v181;
                      }
                      else
                      {
                        v107 = 0;
                        while (1)
                        {
                          v108 = CFDictionaryGetTypeID();
                          TypedValueAtIndex = CFArrayGetTypedValueAtIndex(v106, v107, v108, (int *)v214);
                          if (*(_DWORD *)v214)
                            break;
                          v110 = TypedValueAtIndex;
                          v111 = CFDictionaryCreateMutable(0, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
                          if (!v111)
                          {
                            *(_DWORD *)v214 = -6728;
                            break;
                          }
                          v112 = v111;
                          v113 = CFStringGetTypeID();
                          v114 = CFDictionaryGetTypedValue(v110, CFSTR("identifier"), v113, (int *)v214);
                          if (!v114
                            || (CFDictionarySetValue(v112, CFSTR("identifier"), v114),
                                v115 = CFDataGetTypeID(),
                                (v116 = CFDictionaryGetTypedValue(v110, CFSTR("pk"), v115, (int *)v214)) == 0))
                          {
                            CFRelease(v112);
                            break;
                          }
                          CFDictionarySetValue(v112, CFSTR("pk"), v116);
                          v117 = CFDictionaryGetInt64Ranged(v110, CFSTR("permissions"), 0, 0xFFFFFFFFLL, 0);
                          CFDictionarySetInt64(v112, CFSTR("permissions"), v117);
                          CFArrayAppendValue(v89, v112);
                          CFRelease(v112);
                          if (Count == ++v107)
                            goto LABEL_250;
                        }
                        CFRelease(v106);
                        CFRelease(v89);
                        v89 = 0;
                        v8 = v181;
                      }
                    }
                  }
                  else
                  {
                    *(_DWORD *)v214 = -6728;
                  }
                  v90 = *(_DWORD *)v214;
                  Bytes = *(_DWORD *)v214;
                }
                if (!v89 || v90)
                  goto LABEL_435;
                theArray = CFArrayGetCount(v89);
                if (theArray < 1)
                {
LABEL_432:
                  Bytes = 0;
                }
                else
                {
                  v159 = 0;
                  v191 = 0;
                  while (1)
                  {
                    *(_QWORD *)v214 = 0;
                    v189 = 0;
                    __src = 0;
                    if (v159)
                    {
                      v160 = TLV8BufferAppend((uint64_t)&v192, 255, 0, 0);
                      v191 = v160;
                      if (v160)
                        goto LABEL_434;
                    }
                    v161 = CFDictionaryGetTypeID();
                    v162 = CFArrayGetTypedValueAtIndex(v89, v159, v161, (int *)&v191);
                    if (!v162)
                      break;
                    v163 = v162;
                    v164 = CFStringGetTypeID();
                    v165 = (const __CFString *)CFDictionaryGetTypedValue(v163, CFSTR("identifier"), v164, (int *)&v191);
                    if (!v165)
                      break;
                    v160 = CFStringGetOrCopyCStringUTF8(v165, (const char **)v214, &__src, (size_t *)&v189);
                    v191 = v160;
                    if (v160)
                      goto LABEL_433;
                    v160 = TLV8BufferAppend((uint64_t)&v192, 1, *(char **)v214, (size_t)v189);
                    v191 = v160;
                    if (__src)
                    {
                      free(__src);
                      v160 = v191;
                    }
                    v8 = v181;
                    if (v160)
                      goto LABEL_434;
                    v166 = CFDataGetTypeID();
                    v167 = CFDictionaryGetTypedValue(v163, CFSTR("pk"), v166, (int *)&v191);
                    if (!v167)
                      break;
                    v168 = v167;
                    v169 = (char *)CFDataGetBytePtr(v167);
                    v170 = CFDataGetLength(v168);
                    v160 = TLV8BufferAppend((uint64_t)&v192, 3, v169, v170);
                    v191 = v160;
                    if (v160)
                    {
LABEL_433:
                      v8 = v181;
LABEL_434:
                      Bytes = v160;
                      goto LABEL_435;
                    }
                    v171 = CFDictionaryGetInt64Ranged(v163, CFSTR("permissions"), 0, 0xFFFFFFFFLL, 0);
                    v160 = TLV8BufferAppendUInt64((uint64_t)&v192, 11, v171);
                    v191 = v160;
                    v8 = v181;
                    if (v160)
                      goto LABEL_434;
                    if (theArray == ++v159)
                      goto LABEL_432;
                  }
                  Bytes = v191;
                  v8 = v181;
                  if (v191)
                    goto LABEL_435;
                }
LABEL_352:
                v149 = v193;
                v150 = (char *)v194;
                if (!v194)
                {
                  if ((unint64_t)v193 <= 1)
                    v151 = 1;
                  else
                    v151 = v193;
                  v152 = (char *)malloc_type_malloc(v151, 0xF62D7A9CuLL);
                  if (!v152)
                  {
                    Bytes = -6728;
                    goto LABEL_365;
                  }
                  v150 = v152;
                  if (v149)
                    memcpy(v152, v192, v149);
                }
                v192 = &v195;
                *(_QWORD *)&v193 = 0;
                v194 = 0;
                v182 = v149;
                v183 = v150;
                Bytes = 0;
                v153 = *(int **)(a1 + 16);
                v154 = *v153;
                if (*v153 < 31)
                {
                  v8 = v181;
                  if (v154 == -1)
                  {
                    v156 = _LogCategory_Initialize(*(_QWORD *)(a1 + 16), 0x1Eu);
                    v153 = *(int **)(a1 + 16);
                    if (!v156)
                      goto LABEL_374;
                    v154 = *v153;
                  }
                  if (v154 > 10)
                    v155 = 1;
                  else
                    v155 = v154 == -1 && !_LogCategory_Initialize((uint64_t)v153, 0xAu);
                  LogPrintF((uint64_t)v153, (uint64_t)"OSStatus _AdminPairingServerM1(PairingSessionRef, const uint8_t *const, const uint8_t *const, uint8_t **, size_t *)", 0x1Eu, (uint64_t)"AdminPairing server M4 -- response\n%?{end}%1{tlv8}\n", v19, v20, (uint64_t)v21, v22, v155);
                  v153 = *(int **)(a1 + 16);
LABEL_374:
                  v157 = *v153;
                  *__s = 3;
                  if (v157 > 30)
                    goto LABEL_435;
                  if (v157 == -1)
                  {
                    if (!_LogCategory_Initialize((uint64_t)v153, 0x1Eu))
                    {
LABEL_435:
                      if (v89)
                        CFRelease(v89);
                      goto LABEL_109;
                    }
                    v153 = *(int **)(a1 + 16);
                  }
                  LogPrintF((uint64_t)v153, (uint64_t)"OSStatus _AdminPairingServerM1(PairingSessionRef, const uint8_t *const, const uint8_t *const, uint8_t **, size_t *)", 0x1Eu, (uint64_t)"AdminPairing server done\n", v19, v20, (uint64_t)v21, v22, v172);
                  goto LABEL_435;
                }
                *__s = 3;
LABEL_365:
                v8 = v181;
                goto LABEL_435;
              }
              goto LABEL_412;
            }
            break;
          case 0xC:
            Bytes = TLV8GetBytes(v178, v51, 0, 1uLL, 1uLL, &__dst, 0, 0);
            if (!Bytes)
            {
              if (__dst == 4)
              {
                v58 = CFDictionaryCreateMutable(0, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
                if (v58)
                {
                  Bytes = TLV8GetOrCopyCoalesced(v178, v51, 1, &v186, (size_t *)&v185, &v184, 0);
                  if (Bytes)
                    goto LABEL_109;
                  Bytes = CFDictionarySetCString(v58, CFSTR("identifier"), (const char *)v186, v185);
                  if (Bytes)
                    goto LABEL_109;
                  if (v184)
                  {
                    free(v184);
                    v184 = 0;
                  }
                  v75 = *(uint64_t (**)(__CFDictionary *, uint64_t))(a1 + 896);
                  if (!v75)
                  {
                    LODWORD(v189) = 0;
                    *(_QWORD *)v214 = 0;
                    __src = 0;
                    v118 = (char *)CFDictionaryGetOrCopyBytes(v58, CFSTR("identifier"), (CFIndex *)v214, &__src, (int *)&v189);
                    if (v118)
                    {
                      _PairingSessionDeletePeer(a1, v118, *(uint64_t *)v214, v119, v19, v20, (uint64_t)v21, v22);
                      LODWORD(v189) = 0;
                    }
                    if (__src)
                      free(__src);
                    v91 = (int)v189;
LABEL_256:
                    Bytes = v91;
                    if (!v91)
                    {
LABEL_351:
                      v89 = 0;
                      goto LABEL_352;
                    }
LABEL_257:
                    v120 = *(int **)(a1 + 16);
                    if (*v120 > 50)
                      goto LABEL_321;
                    if (*v120 == -1)
                    {
                      v146 = _LogCategory_Initialize(*(_QWORD *)(a1 + 16), 0x32u);
                      v91 = Bytes;
                      if (!v146)
                      {
LABEL_321:
                        if (v91 > -6761)
                        {
                          if (v91 > -6728)
                          {
                            if (v91 == -6727)
                            {
                              v147 = 4;
                              goto LABEL_350;
                            }
                            if (v91 == -6700)
                            {
                              v147 = 1;
                              goto LABEL_350;
                            }
                          }
                          else
                          {
                            if (v91 == -6760)
                            {
                              v147 = 3;
                              goto LABEL_350;
                            }
                            if (v91 == -6754)
                            {
                              v147 = 2;
                              goto LABEL_350;
                            }
                          }
                        }
                        else if (v91 > -6765)
                        {
                          if (v91 == -6764)
                          {
                            v147 = 6;
                            goto LABEL_350;
                          }
                          if (v91 == -6763)
                          {
                            v147 = 5;
                            goto LABEL_350;
                          }
                        }
                        else
                        {
                          if (v91 == -71144)
                          {
                            v147 = 8;
                            goto LABEL_350;
                          }
                          if (v91 == -6773)
                          {
                            v147 = 7;
                            goto LABEL_350;
                          }
                        }
                        if (v91 == -6776)
                          v147 = 9;
                        else
                          v147 = 1;
LABEL_350:
                        Bytes = TLV8BufferAppendUInt64((uint64_t)&v192, 7, v147);
                        if (!Bytes)
                          goto LABEL_351;
LABEL_109:
                        if (v184)
                          free(v184);
                        if (v58)
                          CFRelease(v58);
                        if (v194)
                          free(v194);
                        v17 = Bytes;
                        *v8 = Bytes == 0;
                        if (!(_DWORD)v17)
                          goto LABEL_125;
LABEL_209:
                        v93 = *(int **)(a1 + 16);
                        v94 = *v93;
                        if (*v93 > 50)
                          goto LABEL_51;
                        if (v94 == -1)
                        {
                          if (!_LogCategory_Initialize(*(_QWORD *)(a1 + 16), 0x32u))
                            goto LABEL_51;
                          v93 = *(int **)(a1 + 16);
                          v94 = *v93;
                        }
                        v95 = *__s;
                        if (v94 == -1)
                          _LogCategory_Initialize((uint64_t)v93, 0x28u);
                        LogPrintF((uint64_t)v93, (uint64_t)"OSStatus _AdminPairingServerExchange(PairingSessionRef, const void *, size_t, uint8_t **, size_t *, Boolean *)", 0x32u, (uint64_t)"### AdminPairing server state %d failed: %#m\n%?{end}%1{tlv8}\n", v19, v20, (uint64_t)v21, v22, v95);
                        goto LABEL_51;
                      }
                      v120 = *(int **)(a1 + 16);
                    }
                    LogPrintF((uint64_t)v120, (uint64_t)"OSStatus _AdminPairingServerM1(PairingSessionRef, const uint8_t *const, const uint8_t *const, uint8_t **, size_t *)", 0x32u, (uint64_t)"### AdminPairing server failed for %##@: %#m\n", v19, v20, (uint64_t)v21, v22, (uint64_t)v58);
                    v91 = Bytes;
                    goto LABEL_321;
                  }
                  v76 = *(_QWORD *)(a1 + 904);
LABEL_198:
                  v91 = v75(v58, v76);
                  goto LABEL_256;
                }
                goto LABEL_412;
              }
              break;
            }
            goto LABEL_411;
          case 0xA:
            Bytes = TLV8GetBytes(v178, v51, 0, 1uLL, 1uLL, &__dst, 0, 0);
            if (!Bytes)
            {
              if (__dst == 3)
              {
                v58 = CFDictionaryCreateMutable(0, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
                if (v58)
                {
                  Bytes = TLV8GetOrCopyCoalesced(v178, v51, 1, &v186, (size_t *)&v185, &v184, 0);
                  if (Bytes)
                    goto LABEL_109;
                  Bytes = CFDictionarySetCString(v58, CFSTR("identifier"), (const char *)v186, v185);
                  if (Bytes)
                    goto LABEL_109;
                  if (v184)
                  {
                    free(v184);
                    v184 = 0;
                  }
                  Bytes = TLV8GetOrCopyCoalesced(v178, v51, 3, &v186, (size_t *)&v185, &v184, 0);
                  if (Bytes)
                    goto LABEL_109;
                  Bytes = CFDictionarySetData(v58, CFSTR("pk"), v186, v185);
                  if (Bytes)
                    goto LABEL_109;
                  if (v184)
                  {
                    free(v184);
                    v184 = 0;
                  }
                  UInt64 = TLV8GetUInt64(v178, v51, 11, (int *)&Bytes, 0);
                  if (Bytes)
                    goto LABEL_109;
                  if (!HIDWORD(UInt64))
                  {
                    Bytes = CFDictionarySetInt64(v58, CFSTR("permissions"), UInt64);
                    if (Bytes)
                      goto LABEL_109;
                    v75 = *(uint64_t (**)(__CFDictionary *, uint64_t))(a1 + 880);
                    if (!v75)
                    {
                      LODWORD(v189) = 0;
                      *(_QWORD *)v214 = 0;
                      __src = 0;
                      v121 = CFDictionaryGetOrCopyBytes(v58, CFSTR("identifier"), (CFIndex *)v214, &__src, (int *)&v189);
                      if (v121)
                      {
                        v122 = (char *)v121;
                        v123 = CFDataGetTypeID();
                        v124 = CFDictionaryGetTypedValue(v58, CFSTR("pk"), v123, (int *)&v189);
                        if (v124)
                        {
                          v125 = v124;
                          if (CFDataGetLength(v124) == 32)
                          {
                            v126 = CFDictionaryGetInt64Ranged(v58, CFSTR("permissions"), 0, 0xFFFFFFFFLL, 0);
                            v127 = *(void **)v214;
                            v128 = (unsigned __int8 *)CFDataGetBytePtr(v125);
                            LODWORD(v189) = _PairingSessionSavePeerKeychain(a1, v122, (uint64_t)v127, v128, v126);
                          }
                          else
                          {
                            LODWORD(v189) = -6743;
                          }
                        }
                      }
                      if (__src)
                        free(__src);
                      v91 = (int)v189;
                      Bytes = v189;
                      v8 = v181;
                      if (!(_DWORD)v189)
                        goto LABEL_351;
                      goto LABEL_257;
                    }
                    v76 = *(_QWORD *)(a1 + 888);
                    goto LABEL_198;
                  }
                  v148 = -6710;
LABEL_340:
                  Bytes = v148;
                  goto LABEL_109;
                }
LABEL_412:
                v148 = -6728;
                goto LABEL_340;
              }
              break;
            }
LABEL_411:
            v58 = 0;
            goto LABEL_109;
          default:
            v92 = *(int **)(a1 + 16);
            if (*v92 <= 60)
            {
              if (*v92 == -1)
              {
                if (!_LogCategory_Initialize((uint64_t)v92, 0x3Cu))
                  break;
                v92 = *(int **)(a1 + 16);
                v73 = *(unsigned int *)(a1 + 96);
              }
              LogPrintF((uint64_t)v92, (uint64_t)"OSStatus _AdminPairingServerM1(PairingSessionRef, const uint8_t *const, const uint8_t *const, uint8_t **, size_t *)", 0x3Cu, (uint64_t)"### AdminPairing server bad session type %d\n", v19, v20, (uint64_t)v21, v22, v73);
            }
            break;
        }
        v58 = 0;
        v148 = -6705;
        goto LABEL_340;
      default:
        v68 = *(int **)(a1 + 16);
        if (*v68 > 60)
          goto LABEL_183;
        if (*v68 != -1)
          goto LABEL_142;
        if (_LogCategory_Initialize((uint64_t)v68, 0x3Cu))
        {
          v68 = *(int **)(a1 + 16);
          v41 = *(unsigned int *)(a1 + 96);
LABEL_142:
          LogPrintF((uint64_t)v68, (uint64_t)"OSStatus PairingSessionExchange(PairingSessionRef, const void *, size_t, uint8_t **, size_t *, Boolean *)", 0x3Cu, (uint64_t)"### Bad pair type: %d\n", v19, v20, (uint64_t)v21, v22, v41);
        }
LABEL_183:
        v17 = 4294960587;
        goto LABEL_51;
    }
  }
  v17 = 0;
  *v179 = v29;
  *a5 = v30;
LABEL_50:
  v183 = 0;
LABEL_51:
  if (v28)
    free(v28);
  if (v183)
    free(v183);
  if ((_DWORD)v17 != -6771 && (_DWORD)v17)
    _PairingSessionReset(a1);
  return v17;
}

uint64_t _SetupClientExchange(uint64_t a1, unsigned __int8 *a2, CFIndex a3, UInt8 **a4, const char *a5, uint64_t a6, const void *a7, uint64_t a8)
{
  _BYTE *v8;
  size_t *v9;
  uint64_t v14;
  char *v15;
  unint64_t v16;
  unsigned __int8 *v17;
  unsigned __int8 *v18;
  uint64_t v19;
  int v20;
  int v21;
  int *v22;
  int v23;
  uint64_t v24;
  int *v25;
  uint64_t *v26;
  uint64_t v27;
  uint64_t v28;
  void *v29;
  void *v30;
  char *Int64;
  char *v32;
  int *v33;
  int v34;
  _BOOL4 v35;
  int *v36;
  int v37;
  _BOOL4 v38;
  int *v39;
  int v40;
  _BOOL4 v41;
  unsigned int v42;
  unsigned __int8 *v43;
  _BYTE *v44;
  uint64_t v45;
  int v46;
  uint64_t v47;
  unsigned int v48;
  unint64_t v49;
  unint64_t v50;
  uint64_t (*v51)(uint64_t, uint64_t, uint64_t);
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  int *v55;
  unsigned __int8 *v56;
  unsigned __int8 *v57;
  uint64_t v58;
  int v59;
  uint64_t v60;
  unsigned int v61;
  int *v62;
  unsigned __int8 *v63;
  _BYTE *v64;
  uint64_t v65;
  int v66;
  uint64_t v67;
  unsigned int v68;
  int *v69;
  int *v70;
  uint64_t v71;
  int *v72;
  int v73;
  uint64_t v74;
  _BOOL4 v75;
  unsigned int v77;
  unsigned int v78;
  unsigned int v79;
  void *v80;
  unsigned int v81;
  _QWORD *v82;
  void *v83;
  void *v84;
  void *v85;
  uint64_t UInt64;
  uint64_t (*v87)(uint64_t, uint64_t, _QWORD);
  unsigned int v88;
  uint64_t v89;
  int8x16_t *v90;
  size_t v91;
  unsigned __int8 *v92;
  void *v93;
  const void *v94;
  UInt8 *v95;
  UInt8 *v96;
  const void *v97;
  CFTypeID v98;
  const __CFDictionary *v99;
  CFTypeID v100;
  const __CFDictionary *v101;
  unsigned int v102;
  _QWORD *v103;
  unsigned int v104;
  unsigned int v106;
  int v107;
  void (*v108)(uint64_t, _QWORD, _QWORD);
  void *v109;
  size_t v110;
  size_t v111;
  char *v112;
  __int128 v113;
  void (*v114)(_QWORD, char *, size_t, char *, _QWORD);
  int *v115;
  const char *v116;
  int *v117;
  int v118;
  uint64_t v119;
  void *v120;
  _QWORD *v121;
  char *v122;
  __int128 v123;
  uint64_t v124;
  void *v125;
  unsigned int v126;
  const __CFString *v127;
  const __CFData *DataMutable;
  char *BytePtr;
  size_t Length;
  char *v131;
  int v132;
  __CFDictionary *SelfInfo;
  const __CFData *v134;
  char *v135;
  size_t v136;
  const __CFDictionary *v137;
  CFTypeID TypeID;
  const __CFData *TypedValue;
  const __CFData *v140;
  char *v141;
  size_t v142;
  int8x16_t *v143;
  int *v144;
  int v145;
  uint64_t v146;
  const void *v147;
  uint64_t v148;
  int *v149;
  uint64_t v150;
  uint64_t v151;
  char *v152;
  unsigned __int8 *v153;
  size_t v154;
  void *v155;
  size_t v156;
  void *v157;
  size_t v158;
  void *v159;
  uint64_t v160;
  unsigned __int8 *v161;
  unsigned int appended;
  char __dst[64];
  int8x16_t *v164;
  __int128 v165;
  void *v166;
  _BYTE v167[304];
  _BYTE *v168;
  __int128 v169;
  void *v170;
  _BYTE v171[304];
  uint64_t v172;

  v8 = (_BYTE *)a6;
  v9 = (size_t *)a5;
  v172 = *MEMORY[0x1E0C80C00];
  memset(v171, 0, sizeof(v171));
  memset(v167, 0, sizeof(v167));
  v160 = 0;
  v161 = 0;
  v158 = 0;
  v159 = 0;
  v156 = 0;
  v157 = 0;
  v154 = 0;
  v155 = 0;
  v168 = v171;
  v169 = xmmword_18D51D4A0;
  v170 = 0;
  v165 = xmmword_18D51D4A0;
  v164 = (int8x16_t *)v167;
  v166 = 0;
  v15 = (char *)(a1 + 120);
  v14 = *(unsigned __int8 *)(a1 + 120);
  if (!*(_BYTE *)(a1 + 120))
  {
    v14 = 1;
    *v15 = 1;
  }
  v16 = (unint64_t)&a2[a3];
  appended = 0;
  if (!a3)
    goto LABEL_12;
  v17 = a2;
  do
  {
    if (v17 == (unsigned __int8 *)v16)
    {
LABEL_80:
      v42 = -6727;
LABEL_83:
      Int64 = 0;
      LOBYTE(v32) = 0;
      goto LABEL_70;
    }
    if ((unint64_t)v17 >= v16)
    {
      v42 = -6705;
      goto LABEL_83;
    }
    if (v16 - (unint64_t)v17 < 2)
      goto LABEL_80;
    v18 = v17 + 2;
    v19 = v17[1];
    if ((unint64_t)&v17[v19 + 2] > v16)
    {
      v42 = -6750;
      goto LABEL_83;
    }
    v20 = *v17;
    v17 += v19 + 2;
  }
  while (v20 != 6);
  v160 = v19;
  v161 = v18;
  appended = 0;
  if ((_DWORD)v19 != 1)
    goto LABEL_279;
  if (*v18 != (_DWORD)v14)
  {
LABEL_69:
    Int64 = 0;
    LOBYTE(v32) = 0;
    v42 = -6709;
    goto LABEL_70;
  }
LABEL_12:
  switch((int)v14)
  {
    case 1:
      if (a3)
        goto LABEL_337;
      appended = TLV8BufferAppendUInt64((uint64_t)&v168, 0, *(_DWORD *)(a1 + 100) & 1);
      if (appended)
        goto LABEL_47;
      appended = TLV8BufferAppend((uint64_t)&v168, 6, v15, 1uLL);
      if (appended)
        goto LABEL_47;
      v21 = *(_DWORD *)(a1 + 100);
      if ((v21 & 0x5770FF34) != 0 && (v21 & 0x7770FF10) != 0)
      {
        appended = TLV8BufferAppendUInt64((uint64_t)&v168, 19, v21 & 0x7770FF10);
        if (appended)
          goto LABEL_47;
      }
      appended = TLV8BufferDetach((uint64_t)&v168, a4, v9);
      if (appended)
        goto LABEL_47;
      *(_BYTE *)(a1 + 120) = 2;
      v22 = *(int **)(a1 + 16);
      v23 = *v22;
      if (*v22 > 30)
        goto LABEL_305;
      if (v23 == -1)
      {
        if (!_LogCategory_Initialize(*(_QWORD *)(a1 + 16), 0x1Eu))
          goto LABEL_305;
        v22 = *(int **)(a1 + 16);
        v23 = *v22;
      }
      if (v23 > 10)
        v24 = 1;
      else
        v24 = v23 == -1 && !_LogCategory_Initialize((uint64_t)v22, 0xAu);
      LogPrintF((uint64_t)v22, (uint64_t)"OSStatus _SetupClientExchange(PairingSessionRef, const void *, size_t, uint8_t **, size_t *, Boolean *)", 0x1Eu, (uint64_t)"Pair-setup client M1 -- start request\n%?{end}%1{tlv8}\n", (uint64_t)a5, a6, (uint64_t)a7, a8, v24);
      goto LABEL_305;
    case 2:
      v33 = *(int **)(a1 + 16);
      v34 = *v33;
      if (*v33 > 30)
        goto LABEL_86;
      if (v34 != -1)
        goto LABEL_50;
      if (_LogCategory_Initialize(*(_QWORD *)(a1 + 16), 0x1Eu))
      {
        v33 = *(int **)(a1 + 16);
        v34 = *v33;
LABEL_50:
        if (v34 > 10)
          v35 = 0;
        else
          v35 = v34 != -1 || _LogCategory_Initialize((uint64_t)v33, 0xAu);
        LogPrintF((uint64_t)v33, (uint64_t)"OSStatus _SetupClientExchange(PairingSessionRef, const void *, size_t, uint8_t **, size_t *, Boolean *)", 0x1Eu, (uint64_t)"Pair-setup client M2 -- start response\n%?{end}%1{tlv8}\n", (uint64_t)a5, a6, (uint64_t)a7, a8, !v35);
      }
LABEL_86:
      v43 = a2;
      do
      {
        if (v43 == (unsigned __int8 *)v16)
        {
LABEL_189:
          v77 = -6727;
          goto LABEL_203;
        }
        if ((unint64_t)v43 >= v16)
        {
          v77 = -6705;
          goto LABEL_203;
        }
        if (v16 - (unint64_t)v43 < 2)
          goto LABEL_189;
        v44 = v43 + 2;
        v45 = v43[1];
        if ((unint64_t)&v43[v45 + 2] > v16)
        {
          v77 = -6750;
LABEL_203:
          appended = v77;
          v82 = *(_QWORD **)(a1 + 696);
          if (v82)
          {
            SRPDelete_libsrp(v82);
            *(_QWORD *)(a1 + 696) = 0;
          }
          v83 = malloc_type_calloc(1uLL, 0x38uLL, 0x103004063A0F53DuLL);
          if (v83)
          {
            *(_QWORD *)(a1 + 696) = v83;
            appended = 0;
            v84 = *(void **)(a1 + 720);
            if (v84)
            {
              free(v84);
              *(_QWORD *)(a1 + 720) = 0;
            }
            *(_QWORD *)(a1 + 728) = 0;
            *(_QWORD *)(a1 + 720) = TLV8CopyCoalesced(a2, &a2[a3], 2, (size_t *)(a1 + 728), (int *)&appended);
            if (appended)
              goto LABEL_158;
            if (*(_QWORD *)(a1 + 728) <= 0xFuLL)
              goto LABEL_279;
            v85 = *(void **)(a1 + 704);
            if (v85)
            {
              free(v85);
              *(_QWORD *)(a1 + 704) = 0;
            }
            *(_QWORD *)(a1 + 712) = 0;
            *(_QWORD *)(a1 + 704) = TLV8CopyCoalesced(a2, &a2[a3], 3, (size_t *)(a1 + 712), (int *)&appended);
            if (appended)
              goto LABEL_158;
            if (!*(_QWORD *)(a1 + 712))
              goto LABEL_279;
            *(_DWORD *)(a1 + 288) = TLV8GetUInt64(a2, &a2[a3], 19, 0, 0);
            UInt64 = TLV8GetUInt64(a2, &a2[a3], 27, 0, 0);
            if (UInt64)
            {
              Int64 = (char *)CFNumberCreateInt64(UInt64);
              if (!Int64)
                goto LABEL_345;
              PairingSessionSetProperty(a1, CFSTR("setupCodeType"), Int64);
              CFRelease(Int64);
            }
            *(_BYTE *)(a1 + 120) = 3;
            a5 = *(const char **)(a1 + 384);
            if (!a5 || (a6 = *(_QWORD *)(a1 + 392)) == 0)
            {
              v87 = *(uint64_t (**)(uint64_t, uint64_t, _QWORD))(a1 + 48);
              if (!v87)
              {
LABEL_343:
                Int64 = 0;
                LOBYTE(v32) = 0;
                v42 = -6745;
                goto LABEL_70;
              }
              v88 = *(_DWORD *)(a1 + 100);
              if (*(_BYTE *)(a1 + 400))
                v89 = v88 | 0x10000;
              else
                v89 = v88;
              appended = v87(v89, 0xFFFFFFFFLL, *(_QWORD *)(a1 + 24));
              if (appended)
                goto LABEL_158;
              a5 = *(const char **)(a1 + 384);
              if (!a5 || (a6 = *(_QWORD *)(a1 + 392)) == 0)
              {
                Int64 = 0;
                LOBYTE(v32) = 0;
                v42 = -6771;
                goto LABEL_70;
              }
            }
LABEL_31:
            v26 = *(uint64_t **)(a1 + 696);
            if (!v26
              || (v27 = *(_QWORD *)(a1 + 704)) == 0
              || (v28 = *(_QWORD *)(a1 + 712)) == 0
              || (a7 = *(const void **)(a1 + 720)) == 0
              || (a8 = *(_QWORD *)(a1 + 728)) == 0)
            {
              Int64 = 0;
              LOBYTE(v32) = 0;
              v126 = -6703;
LABEL_336:
              appended = v126;
              goto LABEL_160;
            }
            if (*(_QWORD *)(a1 + 736))
            {
              free(*(void **)(a1 + 736));
              *(_QWORD *)(a1 + 736) = 0;
              v26 = *(uint64_t **)(a1 + 696);
              a5 = *(const char **)(a1 + 384);
              a6 = *(_QWORD *)(a1 + 392);
              a7 = *(const void **)(a1 + 720);
              a8 = *(_QWORD *)(a1 + 728);
              v27 = *(_QWORD *)(a1 + 704);
              v28 = *(_QWORD *)(a1 + 712);
            }
            *(_QWORD *)(a1 + 744) = 0;
            appended = SRPClientStart_libsrp(v26, &_kSRPParameters_3072_SHA512, "Pair-Setup", 10, a5, a6, a7, a8, v27, v28, &v157, &v156, (_QWORD *)(a1 + 736), (_QWORD *)(a1 + 744), &v155, &v154);
            if (appended)
              goto LABEL_47;
            v29 = *(void **)(a1 + 704);
            if (v29)
            {
              free(v29);
              *(_QWORD *)(a1 + 704) = 0;
            }
            *(_QWORD *)(a1 + 712) = 0;
            v30 = *(void **)(a1 + 720);
            if (v30)
            {
              free(v30);
              *(_QWORD *)(a1 + 720) = 0;
            }
            *(_QWORD *)(a1 + 728) = 0;
            appended = TLV8BufferAppend((uint64_t)&v168, 6, v15, 1uLL);
            if (appended
              || (appended = TLV8BufferAppend((uint64_t)&v168, 3, (char *)v157, v156)) != 0
              || (appended = TLV8BufferAppend((uint64_t)&v168, 4, (char *)v155, v154)) != 0
              || (appended = TLV8BufferDetach((uint64_t)&v168, a4, v9)) != 0)
            {
LABEL_47:
              Int64 = 0;
              LOBYTE(v32) = 0;
              goto LABEL_160;
            }
            *(_BYTE *)(a1 + 120) = 4;
            v117 = *(int **)(a1 + 16);
            v118 = *v117;
            if (*v117 <= 30)
            {
              if (v118 != -1)
              {
LABEL_275:
                if (v118 > 10)
                  v119 = 1;
                else
                  v119 = v118 == -1 && !_LogCategory_Initialize((uint64_t)v117, 0xAu);
                LogPrintF((uint64_t)v117, (uint64_t)"OSStatus _SetupClientExchange(PairingSessionRef, const void *, size_t, uint8_t **, size_t *, Boolean *)", 0x1Eu, (uint64_t)"Pair-setup  client M3 -- verify request\n%?{end}%1{tlv8}\n", (uint64_t)a5, a6, (uint64_t)a7, a8, v119);
                goto LABEL_305;
              }
              if (_LogCategory_Initialize(*(_QWORD *)(a1 + 16), 0x1Eu))
              {
                v117 = *(int **)(a1 + 16);
                v118 = *v117;
                goto LABEL_275;
              }
            }
LABEL_305:
            LOBYTE(v32) = 0;
            goto LABEL_306;
          }
          Int64 = 0;
LABEL_345:
          LOBYTE(v32) = 0;
LABEL_346:
          v42 = -6728;
          goto LABEL_70;
        }
        v46 = *v43;
        v43 += v45 + 2;
      }
      while (v46 != 7);
      appended = 0;
      if ((_DWORD)v45 != 1)
        goto LABEL_279;
      v47 = *v44;
      v48 = -6737;
      switch(*v44)
      {
        case 0:
          goto LABEL_108;
        case 1:
          v48 = -6700;
          goto LABEL_108;
        case 2:
          v48 = -6754;
          goto LABEL_108;
        case 3:
          v49 = TLV8GetUInt64(a2, &a2[a3], 8, (int *)&appended, 0);
          if (appended)
            goto LABEL_158;
          v50 = v49;
          if (v49 >> 31)
          {
            Int64 = 0;
            LOBYTE(v32) = 0;
            v42 = -6710;
            goto LABEL_70;
          }
          _PairingSessionReset(a1);
          v51 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(a1 + 48);
          if (!v51)
            goto LABEL_343;
          v52 = *(_DWORD *)(a1 + 100) | 0x20000u;
          v53 = *(_QWORD *)(a1 + 24);
          v54 = v50;
          break;
        case 4:
          v48 = -6727;
          goto LABEL_108;
        case 5:
          v48 = -6763;
          goto LABEL_108;
        case 6:
          v48 = -6764;
          goto LABEL_108;
        case 7:
          v48 = -6773;
          goto LABEL_108;
        case 8:
          v48 = -71144;
          goto LABEL_108;
        default:
          if ((_DWORD)v47 == 9)
            v48 = -6776;
          else
            v48 = -6700;
LABEL_108:
          appended = v48;
          v55 = *(int **)(a1 + 16);
          if (*v55 > 50)
            goto LABEL_158;
          if (*v55 != -1)
            goto LABEL_110;
          if (_LogCategory_Initialize((uint64_t)v55, 0x32u))
          {
            v55 = *(int **)(a1 + 16);
            v47 = *v44;
LABEL_110:
            LogPrintF((uint64_t)v55, (uint64_t)"OSStatus _SetupClientExchange(PairingSessionRef, const void *, size_t, uint8_t **, size_t *, Boolean *)", 0x32u, (uint64_t)"### Pair-setup client M2 bad status: 0x%X, %#m\n", (uint64_t)a5, a6, (uint64_t)a7, a8, v47);
          }
          goto LABEL_158;
      }
LABEL_197:
      v81 = v51(v52, v54, v53);
      Int64 = 0;
      LOBYTE(v32) = 0;
      if (v81)
        v42 = v81;
      else
        v42 = -6771;
LABEL_70:
      appended = v42;
LABEL_160:
      if (v9 && a4 && !appended)
        _PairingSessionUpdateTranscript(a1, a2, a3, *a4, *v9);
      *v8 = (_BYTE)v32;
      if (v170)
      {
        free(v170);
        v170 = 0;
      }
      if (v166)
      {
        free(v166);
        v166 = 0;
      }
      if (v159)
        free(v159);
      if (Int64)
        free(Int64);
      if (v157)
        free(v157);
      if (v155)
        free(v155);
      v71 = appended;
      if (appended != -6771)
      {
        if (appended)
        {
          v72 = *(int **)(a1 + 16);
          v73 = *v72;
          if (*v72 <= 50)
          {
            if (v73 != -1)
              goto LABEL_180;
            v75 = _LogCategory_Initialize(*(_QWORD *)(a1 + 16), 0x32u);
            v71 = appended;
            if (v75)
            {
              v72 = *(int **)(a1 + 16);
              v73 = *v72;
LABEL_180:
              v74 = *v15;
              if (v73 == -1)
                _LogCategory_Initialize((uint64_t)v72, 0x28u);
              LogPrintF((uint64_t)v72, (uint64_t)"OSStatus _SetupClientExchange(PairingSessionRef, const void *, size_t, uint8_t **, size_t *, Boolean *)", 0x32u, (uint64_t)"### Pair-setup client state %d failed: %#m\n%?{end}%1{tlv8}\n", (uint64_t)a5, a6, (uint64_t)a7, a8, v74);
              return appended;
            }
          }
        }
      }
      return v71;
    case 3:
      if (a3)
      {
LABEL_337:
        Int64 = 0;
        LOBYTE(v32) = 0;
        v42 = -6705;
        goto LABEL_70;
      }
      a5 = *(const char **)(a1 + 384);
      if (!a5 || (a6 = *(_QWORD *)(a1 + 392)) == 0)
      {
        Int64 = 0;
        LOBYTE(v32) = 0;
        v126 = -6745;
        goto LABEL_336;
      }
      goto LABEL_31;
    case 4:
      if (!*(_QWORD *)(a1 + 696) || !*(_QWORD *)(a1 + 736) || !*(_QWORD *)(a1 + 744))
        goto LABEL_302;
      v36 = *(int **)(a1 + 16);
      v37 = *v36;
      if (*v36 > 30)
        goto LABEL_134;
      if (v37 != -1)
        goto LABEL_58;
      if (_LogCategory_Initialize(*(_QWORD *)(a1 + 16), 0x1Eu))
      {
        v36 = *(int **)(a1 + 16);
        v37 = *v36;
LABEL_58:
        if (v37 > 10)
          v38 = 0;
        else
          v38 = v37 != -1 || _LogCategory_Initialize((uint64_t)v36, 0xAu);
        LogPrintF((uint64_t)v36, (uint64_t)"OSStatus _SetupClientExchange(PairingSessionRef, const void *, size_t, uint8_t **, size_t *, Boolean *)", 0x1Eu, (uint64_t)"Pair-setup client M4 -- verify response\n%?{end}%1{tlv8}\n", (uint64_t)a5, a6, (uint64_t)a7, a8, !v38);
      }
LABEL_134:
      v63 = a2;
      while (1)
      {
        if (v63 == (unsigned __int8 *)v16)
        {
LABEL_191:
          v79 = -6727;
          goto LABEL_241;
        }
        if ((unint64_t)v63 >= v16)
        {
          v79 = -6705;
          goto LABEL_241;
        }
        if (v16 - (unint64_t)v63 < 2)
          goto LABEL_191;
        v64 = v63 + 2;
        v65 = v63[1];
        if ((unint64_t)&v63[v65 + 2] > v16)
          break;
        v66 = *v63;
        v63 += v65 + 2;
        if (v66 == 7)
        {
          appended = 0;
          if ((_DWORD)v65 == 1)
          {
            v67 = *v64;
            v68 = -6737;
            switch(*v64)
            {
              case 0:
                goto LABEL_155;
              case 1:
                v68 = -6700;
                goto LABEL_155;
              case 2:
                v69 = *(int **)(a1 + 16);
                if (*v69 > 30)
                  goto LABEL_193;
                if (*v69 != -1)
                  goto LABEL_146;
                if (_LogCategory_Initialize((uint64_t)v69, 0x1Eu))
                {
                  v69 = *(int **)(a1 + 16);
LABEL_146:
                  LogPrintF((uint64_t)v69, (uint64_t)"OSStatus _SetupClientExchange(PairingSessionRef, const void *, size_t, uint8_t **, size_t *, Boolean *)", 0x1Eu, (uint64_t)"### Pair-setup client wrong setup code\n", (uint64_t)a5, a6, (uint64_t)a7, a8, v150);
                }
LABEL_193:
                _PairingSessionReset(a1);
                v80 = *(void **)(a1 + 384);
                if (v80)
                {
                  free(v80);
                  *(_QWORD *)(a1 + 384) = 0;
                }
                *(_QWORD *)(a1 + 392) = 0;
                *(_BYTE *)(a1 + 400) = 1;
                v51 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(a1 + 48);
                if (!v51)
                  goto LABEL_343;
                v52 = *(_DWORD *)(a1 + 100) | 0x10000u;
                v53 = *(_QWORD *)(a1 + 24);
                v54 = 0xFFFFFFFFLL;
                goto LABEL_197;
              case 3:
                v68 = -6760;
                goto LABEL_155;
              case 4:
                v68 = -6727;
                goto LABEL_155;
              case 5:
                v68 = -6763;
                goto LABEL_155;
              case 6:
                v68 = -6764;
                goto LABEL_155;
              case 7:
                v68 = -6773;
                goto LABEL_155;
              case 8:
                v68 = -71144;
                goto LABEL_155;
              default:
                if ((_DWORD)v67 == 9)
                  v68 = -6776;
                else
                  v68 = -6700;
LABEL_155:
                appended = v68;
                v70 = *(int **)(a1 + 16);
                if (*v70 > 50)
                  goto LABEL_158;
                if (*v70 != -1)
                  goto LABEL_157;
                if (_LogCategory_Initialize((uint64_t)v70, 0x32u))
                {
                  v70 = *(int **)(a1 + 16);
                  v67 = *v64;
LABEL_157:
                  LogPrintF((uint64_t)v70, (uint64_t)"OSStatus _SetupClientExchange(PairingSessionRef, const void *, size_t, uint8_t **, size_t *, Boolean *)", 0x32u, (uint64_t)"### Pair-setup client M4 bad status: 0x%X, %#m\n", (uint64_t)a5, a6, (uint64_t)a7, a8, v67);
                }
                goto LABEL_158;
            }
          }
LABEL_279:
          Int64 = 0;
LABEL_280:
          LOBYTE(v32) = 0;
          v42 = -6743;
          goto LABEL_70;
        }
      }
      v79 = -6750;
LABEL_241:
      appended = v79;
      appended = TLV8GetOrCopyCoalesced(a2, &a2[a3], 4, &v161, (size_t *)&v160, &v159, 0);
      if (appended)
        goto LABEL_158;
      v102 = SRPClientVerify_libsrp(*(_QWORD ***)(a1 + 696));
      appended = v102;
      if (v159)
      {
        free(v159);
        v159 = 0;
        v102 = appended;
      }
      if (v102)
      {
        Int64 = 0;
LABEL_349:
        LOBYTE(v32) = 0;
        v42 = -6754;
        goto LABEL_70;
      }
      v103 = *(_QWORD **)(a1 + 696);
      if (v103)
      {
        SRPDelete_libsrp(v103);
        *(_QWORD *)(a1 + 696) = 0;
      }
      CryptoHKDF((uint64_t)kCryptoHashDescriptor_SHA512, *(_QWORD *)(a1 + 736), *(_QWORD *)(a1 + 744), "Pair-Setup-Encrypt-Salt", 0x17uLL, (uint64_t)"Pair-Setup-Encrypt-Info", 23, 0x20uLL, a1 + 414);
      if ((*(_BYTE *)(a1 + 100) & 1) != 0)
      {
        v104 = _MFiClientVerify(a1, a2, a3, "PS-Msg04", *(_QWORD *)(a1 + 736), *(_QWORD *)(a1 + 744), "MFi-Pair-Setup-Salt", 0x13uLL, (uint64_t)"MFi-Pair-Setup-Info", 19, 0);
        if (v104 == -71164 || v104 == 0)
          v106 = v104;
        else
          v106 = -71145;
        appended = v106;
        if (v106)
          goto LABEL_158;
      }
      else
      {
        _ClientDecryptExtra(a1, a2, a3);
      }
      v107 = *(_DWORD *)(a1 + 100);
      if ((v107 & 0x10) == 0 && ((*(_DWORD *)(a1 + 288) ^ v107) & 0x200) == 0)
      {
        v108 = *(void (**)(uint64_t, _QWORD, _QWORD))(a1 + 864);
        if (v108)
          v108(3, 0, *(_QWORD *)(a1 + 872));
        v109 = *(void **)(a1 + 184);
        *(_BYTE *)(a1 + 120) = 5;
        if (v109)
        {
          free(v109);
          *(_QWORD *)(a1 + 184) = 0;
        }
        *(_QWORD *)(a1 + 192) = 0;
        v152 = (char *)(a1 + 510);
        appended = PairingSessionCopyIdentity(a1, 1, (char **)(a1 + 184), (_OWORD *)(a1 + 510), a1 + 542);
        if (appended)
          goto LABEL_158;
        v110 = strlen(*(const char **)(a1 + 184));
        *(_QWORD *)(a1 + 192) = v110;
        if (!v110)
        {
          Int64 = 0;
          LOBYTE(v32) = 0;
          v42 = -6708;
          goto LABEL_70;
        }
        v111 = v110 + 64;
        v160 = v110 + 64;
        Int64 = (char *)malloc_type_malloc(v110 + 64, 0xEA38B4F3uLL);
        v159 = Int64;
        if (!Int64)
          goto LABEL_345;
        CryptoHKDF((uint64_t)kCryptoHashDescriptor_SHA512, *(_QWORD *)(a1 + 736), *(_QWORD *)(a1 + 744), "Pair-Setup-Controller-Sign-Salt", 0x1FuLL, (uint64_t)"Pair-Setup-Controller-Sign-Info", 31, 0x20uLL, (uint64_t)Int64);
        memcpy(Int64 + 32, *(const void **)(a1 + 184), *(_QWORD *)(a1 + 192));
        v112 = &Int64[*(_QWORD *)(a1 + 192) + 32];
        v113 = *(_OWORD *)(a1 + 526);
        *(_OWORD *)v112 = *(_OWORD *)v152;
        *((_OWORD *)v112 + 1) = v113;
        v114 = *(void (**)(_QWORD, char *, size_t, char *, _QWORD))(a1 + 928);
        if (v114)
        {
          v114(*(unsigned int *)(a1 + 100), Int64, v111, __dst, *(_QWORD *)(a1 + 936));
        }
        else
        {
          ccsha512_di();
          cced25519_sign();
        }
        free(Int64);
        v159 = 0;
        appended = TLV8BufferAppend((uint64_t)&v164, 1, *(char **)(a1 + 184), *(_QWORD *)(a1 + 192));
        if (appended)
          goto LABEL_158;
        appended = TLV8BufferAppend((uint64_t)&v164, 3, v152, 0x20uLL);
        if (appended)
          goto LABEL_158;
        appended = TLV8BufferAppend((uint64_t)&v164, 10, __dst, 0x40uLL);
        if (appended)
          goto LABEL_158;
        v127 = *(const __CFString **)(a1 + 176);
        if (v127)
        {
          DataMutable = OPACKEncoderCreateDataMutable(v127, 0, (int *)&appended);
          Int64 = (char *)DataMutable;
          if (!DataMutable)
            goto LABEL_159;
          BytePtr = (char *)CFDataGetBytePtr(DataMutable);
          Length = CFDataGetLength((CFDataRef)Int64);
          appended = TLV8BufferAppend((uint64_t)&v164, 18, BytePtr, Length);
          CFRelease(Int64);
          if (appended)
            goto LABEL_158;
        }
        v131 = *(char **)(a1 + 216);
        if (v131)
        {
          appended = TLV8BufferAppend((uint64_t)&v164, 16, v131, *(_QWORD *)(a1 + 224));
          if (appended)
            goto LABEL_158;
        }
        v132 = *(_DWORD *)(a1 + 100);
        if ((v132 & 0x5770FF34) != 0 && (v132 & 0x1000E001) == 0)
        {
          SelfInfo = _PairingSessionGetSelfInfo(a1);
          if (SelfInfo)
          {
            v134 = OPACKEncoderCreateDataMutable((const __CFString *)SelfInfo, 0, (int *)&appended);
            Int64 = (char *)v134;
            if (!v134)
              goto LABEL_159;
            v135 = (char *)CFDataGetBytePtr(v134);
            v136 = CFDataGetLength((CFDataRef)Int64);
            appended = TLV8BufferAppend((uint64_t)&v164, 17, v135, v136);
            CFRelease(Int64);
            if (appended)
              goto LABEL_158;
          }
        }
        v137 = *(const __CFDictionary **)(a1 + 344);
        TypeID = CFDataGetTypeID();
        TypedValue = CFDictionaryGetTypedValue(v137, CFSTR("ownershipProof"), TypeID, 0);
        if (TypedValue)
        {
          v140 = TypedValue;
          v141 = (char *)CFDataGetBytePtr(TypedValue);
          v142 = CFDataGetLength(v140);
          appended = TLV8BufferAppend((uint64_t)&v164, 26, v141, v142);
          if (appended)
            goto LABEL_158;
        }
        v143 = (int8x16_t *)malloc_type_malloc(v165 + 16, 0xC55C6B30uLL);
        Int64 = (char *)v143;
        v159 = v143;
        if (!v143)
          goto LABEL_345;
        _chacha20_poly1305_encrypt_all((_DWORD *)(a1 + 414), "PS-Msg05", 8, 0, 0, v164, v165, v143, (uint64_t)v143->i64 + v165);
        appended = TLV8BufferAppend((uint64_t)&v168, 5, Int64, v165 + 16);
        if (appended)
          goto LABEL_158;
        free(Int64);
        v159 = 0;
        appended = TLV8BufferAppend((uint64_t)&v168, 6, v15, 1uLL);
        if (appended)
          goto LABEL_158;
        appended = TLV8BufferDetach((uint64_t)&v168, a4, v9);
        if (appended)
          goto LABEL_158;
        *(_BYTE *)(a1 + 120) = 6;
        v144 = *(int **)(a1 + 16);
        v145 = *v144;
        if (*v144 > 30)
          goto LABEL_360;
        if (v145 == -1)
        {
          if (!_LogCategory_Initialize(*(_QWORD *)(a1 + 16), 0x1Eu))
          {
LABEL_360:
            LOBYTE(v32) = 0;
            goto LABEL_306;
          }
          v144 = *(int **)(a1 + 16);
          v145 = *v144;
        }
        if (v145 > 10)
          v146 = 1;
        else
          v146 = v145 == -1 && !_LogCategory_Initialize((uint64_t)v144, 0xAu);
        LogPrintF((uint64_t)v144, (uint64_t)"OSStatus _SetupClientExchange(PairingSessionRef, const void *, size_t, uint8_t **, size_t *, Boolean *)", 0x1Eu, (uint64_t)"Pair-setup client M5 -- exchange request\n%?{end}%1{tlv8}\n", (uint64_t)a5, a6, (uint64_t)a7, a8, v146);
        goto LABEL_360;
      }
      *(_BYTE *)(a1 + 120) = 7;
      *a4 = 0;
      *v9 = 0;
      v115 = *(int **)(a1 + 16);
      if (*v115 > 30)
        goto LABEL_300;
      if (*v115 != -1)
        goto LABEL_269;
      if (_LogCategory_Initialize((uint64_t)v115, 0x1Eu))
      {
        v115 = *(int **)(a1 + 16);
LABEL_269:
        v116 = "Pair-setup transient client done -- server authenticated\n";
LABEL_270:
        LogPrintF((uint64_t)v115, (uint64_t)"OSStatus _SetupClientExchange(PairingSessionRef, const void *, size_t, uint8_t **, size_t *, Boolean *)", 0x1Eu, (uint64_t)v116, (uint64_t)a5, a6, (uint64_t)a7, a8, v151);
      }
LABEL_300:
      LOBYTE(v32) = 1;
LABEL_306:
      Int64 = 0;
      appended = 0;
      goto LABEL_160;
    case 6:
      if (!*(_QWORD *)(a1 + 736) || !*(_QWORD *)(a1 + 744))
      {
LABEL_302:
        Int64 = 0;
        LOBYTE(v32) = 0;
        v42 = -6703;
        goto LABEL_70;
      }
      v39 = *(int **)(a1 + 16);
      v40 = *v39;
      if (*v39 > 30)
        goto LABEL_115;
      if (v40 != -1)
        goto LABEL_65;
      if (_LogCategory_Initialize(*(_QWORD *)(a1 + 16), 0x1Eu))
      {
        v39 = *(int **)(a1 + 16);
        v40 = *v39;
LABEL_65:
        if (v40 > 10)
          v41 = 0;
        else
          v41 = v40 != -1 || _LogCategory_Initialize((uint64_t)v39, 0xAu);
        LogPrintF((uint64_t)v39, (uint64_t)"OSStatus _SetupClientExchange(PairingSessionRef, const void *, size_t, uint8_t **, size_t *, Boolean *)", 0x1Eu, (uint64_t)"Pair-setup client M6 -- exchange response\n%?{end}%1{tlv8}\n", (uint64_t)a5, a6, (uint64_t)a7, a8, !v41);
      }
LABEL_115:
      v56 = a2;
      while (1)
      {
        if (v56 == (unsigned __int8 *)v16)
        {
LABEL_190:
          v78 = -6727;
          goto LABEL_229;
        }
        if ((unint64_t)v56 >= v16)
          break;
        if (v16 - (unint64_t)v56 < 2)
          goto LABEL_190;
        v57 = v56 + 2;
        v58 = v56[1];
        if ((unint64_t)&v56[v58 + 2] > v16)
        {
          v78 = -6750;
          goto LABEL_229;
        }
        v59 = *v56;
        v56 += v58 + 2;
        if (v59 == 7)
        {
          if ((_DWORD)v58 != 1)
            goto LABEL_279;
          v60 = *v57;
          if (v60 >= 9)
          {
            if ((_DWORD)v60 == 9)
              v61 = -6776;
            else
              v61 = -6700;
          }
          else
          {
            v61 = dword_18D51F670[v60];
          }
          appended = v61;
          v62 = *(int **)(a1 + 16);
          if (*v62 <= 50)
          {
            if (*v62 != -1)
            {
LABEL_129:
              LogPrintF((uint64_t)v62, (uint64_t)"OSStatus _SetupClientExchange(PairingSessionRef, const void *, size_t, uint8_t **, size_t *, Boolean *)", 0x32u, (uint64_t)"### Pair-setup client M6 bad status: 0x%X, %#m\n", (uint64_t)a5, a6, (uint64_t)a7, a8, v60);
              goto LABEL_158;
            }
            if (_LogCategory_Initialize((uint64_t)v62, 0x32u))
            {
              v62 = *(int **)(a1 + 16);
              v60 = *v57;
              goto LABEL_129;
            }
          }
LABEL_158:
          Int64 = 0;
          goto LABEL_159;
        }
      }
      v78 = -6705;
LABEL_229:
      appended = v78;
      v90 = (int8x16_t *)TLV8CopyCoalesced(a2, &a2[a3], 5, &v158, (int *)&appended);
      Int64 = (char *)v90;
      if (appended)
        goto LABEL_159;
      v91 = v158;
      if (v158 <= 0xF)
        goto LABEL_280;
      v158 -= 16;
      v92 = &v90[-1].u8[v91];
      appended = _chacha20_poly1305_decrypt_all((_DWORD *)(a1 + 414), "PS-Msg06", 8, 0, 0, v90, v158, v90, (uint64_t)v92, 16);
      if (appended)
        goto LABEL_159;
      v93 = *(void **)(a1 + 232);
      if (v93)
        free(v93);
      *(_QWORD *)(a1 + 240) = 0;
      *(_QWORD *)(a1 + 232) = TLV8CopyCoalesced((unsigned __int8 *)Int64, v92, 16, (size_t *)(a1 + 240), 0);
      v94 = *(const void **)(a1 + 312);
      if (v94)
      {
        CFRelease(v94);
        *(_QWORD *)(a1 + 312) = 0;
      }
      v95 = (UInt8 *)TLV8CopyCoalesced((unsigned __int8 *)Int64, v92, 17, (size_t *)&v160, 0);
      if (v95)
      {
        v96 = v95;
        *(_QWORD *)(a1 + 312) = _OPACKDecodeBytes(0, v95, v160, 0, &appended);
        free(v96);
        v97 = *(const void **)(a1 + 312);
        if (!v97)
          goto LABEL_159;
        v98 = CFGetTypeID(v97);
        if (v98 != CFDictionaryGetTypeID())
        {
          appended = -6756;
          v147 = *(const void **)(a1 + 312);
          if (v147)
          {
            CFRelease(v147);
            LOBYTE(v32) = 0;
            *(_QWORD *)(a1 + 312) = 0;
            goto LABEL_160;
          }
          goto LABEL_159;
        }
        v99 = *(const __CFDictionary **)(a1 + 312);
        v100 = CFDictionaryGetTypeID();
        v101 = CFDictionaryGetTypedValue(v99, CFSTR("groupInfo"), v100, 0);
      }
      else
      {
        v101 = 0;
      }
      PairingSessionSetProperty(a1, CFSTR("groupInfoPeer"), v101);
      v120 = *(void **)(a1 + 296);
      if (v120)
      {
        free(v120);
        *(_QWORD *)(a1 + 296) = 0;
      }
      v121 = (_QWORD *)(a1 + 304);
      *(_QWORD *)(a1 + 304) = 0;
      *(_QWORD *)(a1 + 296) = TLV8CopyCoalesced((unsigned __int8 *)Int64, v92, 1, (size_t *)(a1 + 304), (int *)&appended);
      if (appended)
        goto LABEL_159;
      if (!*v121)
        goto LABEL_280;
      v153 = (unsigned __int8 *)(a1 + 606);
      appended = TLV8GetBytes((unsigned __int8 *)Int64, v92, 3, 0x20uLL, 0x20uLL, (char *)(a1 + 606), 0, 0);
      if (appended
        || (appended = TLV8GetBytes((unsigned __int8 *)Int64, v92, 10, 0x40uLL, 0x40uLL, __dst, 0, 0)) != 0)
      {
LABEL_159:
        LOBYTE(v32) = 0;
        goto LABEL_160;
      }
      v32 = (char *)malloc_type_malloc(*v121 + 64, 0x280458D9uLL);
      v159 = v32;
      if (!v32)
        goto LABEL_346;
      CryptoHKDF((uint64_t)kCryptoHashDescriptor_SHA512, *(_QWORD *)(a1 + 736), *(_QWORD *)(a1 + 744), "Pair-Setup-Accessory-Sign-Salt", 0x1EuLL, (uint64_t)"Pair-Setup-Accessory-Sign-Info", 30, 0x20uLL, (uint64_t)v32);
      memcpy(v32 + 32, *(const void **)(a1 + 296), *(_QWORD *)(a1 + 304));
      v122 = &v32[*(_QWORD *)(a1 + 304) + 32];
      v123 = *(_OWORD *)(a1 + 622);
      *(_OWORD *)v122 = *(_OWORD *)v153;
      *((_OWORD *)v122 + 1) = v123;
      ccsha512_di();
      appended = cced25519_verify();
      if (appended)
        goto LABEL_349;
      free(v32);
      v159 = 0;
      if (Int64)
        free(Int64);
      v124 = _PairingSessionVerifyAllowed(a1);
      appended = v124;
      if ((_DWORD)v124)
      {
        v148 = v124;
        v149 = *(int **)(a1 + 16);
        if (*v149 > 50)
          goto LABEL_158;
        if (*v149 == -1)
        {
          if (!_LogCategory_Initialize((uint64_t)v149, 0x32u))
            goto LABEL_158;
          v149 = *(int **)(a1 + 16);
          v148 = appended;
        }
        LogPrintF((uint64_t)v149, (uint64_t)"OSStatus _SetupClientExchange(PairingSessionRef, const void *, size_t, uint8_t **, size_t *, Boolean *)", 0x32u, (uint64_t)"### Pair-setup client: server not allowed: %#m\n", (uint64_t)a5, a6, (uint64_t)a7, a8, v148);
        goto LABEL_158;
      }
      appended = PairingSessionSavePeer(a1, *(char **)(a1 + 296), *(_QWORD *)(a1 + 304), v153, (uint64_t)a5, a6, (uint64_t)a7, a8);
      if (appended)
        goto LABEL_158;
      v125 = *(void **)(a1 + 384);
      if (v125)
      {
        free(v125);
        *(_QWORD *)(a1 + 384) = 0;
      }
      *(_QWORD *)(a1 + 392) = 0;
      *(_BYTE *)(a1 + 400) = 0;
      *(_BYTE *)(a1 + 120) = 7;
      *a4 = 0;
      *v9 = 0;
      v115 = *(int **)(a1 + 16);
      if (*v115 > 30)
        goto LABEL_300;
      if (*v115 != -1)
        goto LABEL_298;
      if (!_LogCategory_Initialize((uint64_t)v115, 0x1Eu))
        goto LABEL_300;
      v115 = *(int **)(a1 + 16);
LABEL_298:
      v116 = "Pair-setup client done -- server authenticated\n";
      goto LABEL_270;
    default:
      v25 = *(int **)(a1 + 16);
      if (*v25 > 60)
        goto LABEL_69;
      if (*v25 != -1)
        goto LABEL_27;
      if (_LogCategory_Initialize((uint64_t)v25, 0x3Cu))
      {
        v25 = *(int **)(a1 + 16);
        v14 = *(unsigned __int8 *)(a1 + 120);
LABEL_27:
        LogPrintF((uint64_t)v25, (uint64_t)"OSStatus _SetupClientExchange(PairingSessionRef, const void *, size_t, uint8_t **, size_t *, Boolean *)", 0x3Cu, (uint64_t)"### Pair-setup client bad state: %d\n", (uint64_t)a5, a6, (uint64_t)a7, a8, v14);
      }
      goto LABEL_69;
  }
}

uint64_t _SetupServerExchange(uint64_t a1, unsigned __int8 *a2, CFIndex a3, UInt8 **a4, size_t *a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  _BYTE *v8;
  size_t *v9;
  CFIndex v10;
  unsigned __int8 *v13;
  unsigned __int8 *v14;
  _BYTE *v15;
  CFIndex v16;
  int v17;
  uint64_t v18;
  _BYTE *v19;
  CFIndex v20;
  _BYTE *v21;
  int *v22;
  int v23;
  _BOOL4 v24;
  int *v25;
  int v26;
  _BOOL4 v27;
  int *v28;
  int v29;
  _BOOL4 v30;
  int *v31;
  unsigned __int8 *v32;
  char *v33;
  CFDataRef v34;
  unsigned int v35;
  unsigned int v36;
  int *v37;
  uint64_t v38;
  uint64_t v39;
  int *v40;
  void *v41;
  void *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  int *v47;
  int8x16_t *v48;
  size_t v49;
  unsigned __int8 *v50;
  UInt8 **v51;
  const void *v52;
  UInt8 *v53;
  UInt8 *v54;
  const __CFString *v55;
  CFTypeID v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  int *v62;
  void (*v63)(_QWORD);
  void *v64;
  _QWORD *v65;
  uint64_t v66;
  int *v67;
  int v68;
  uint64_t v69;
  _BOOL4 v70;
  void *v72;
  const void *v73;
  UInt8 *v74;
  UInt8 *v75;
  const void *v76;
  CFTypeID v77;
  const __CFDictionary *v78;
  CFTypeID TypeID;
  const __CFDictionary *TypedValue;
  const UInt8 *v81;
  UInt8 *v82;
  void *v83;
  _QWORD *v84;
  char *v85;
  __int128 v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  int *v93;
  int *v94;
  uint64_t (*v95)(_QWORD, char *, uint64_t, _QWORD);
  _QWORD *v96;
  uint64_t *v97;
  unint64_t v98;
  unsigned int v99;
  unsigned int v100;
  int *v101;
  int v102;
  _BOOL4 v103;
  unsigned int v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  int *v111;
  unint64_t v112;
  unint64_t Int64Ranged;
  int *v114;
  int v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  int *v122;
  void *v123;
  size_t v124;
  size_t v125;
  char *v126;
  char *v127;
  char *v128;
  __int128 v129;
  void (*v130)(_QWORD, char *, size_t, char *, _QWORD);
  int v131;
  int *v132;
  _BOOL4 v133;
  unint64_t v134;
  unsigned int v135;
  const void *v136;
  unsigned int v137;
  unsigned int v138;
  char *v139;
  __CFDictionary *SelfInfo;
  const __CFData *DataMutable;
  const __CFData *v142;
  char *BytePtr;
  size_t v144;
  int8x16_t *v145;
  int *v146;
  int v147;
  uint64_t v148;
  unsigned int v149;
  _BOOL4 v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  unsigned __int8 *v155;
  _BYTE *v156;
  unsigned __int8 __dst;
  size_t v160;
  void *v161;
  void *v162;
  uint64_t v163;
  uint64_t v164;
  void *v165;
  uint64_t v166;
  uint64_t v167;
  size_t v168;
  void *v169;
  size_t v170;
  CFIndex length;
  unsigned int appended;
  char v173[16];
  char __s[64];
  int8x16_t *v175;
  __int128 v176;
  void *v177;
  _BYTE v178[304];
  _BYTE *v179;
  __int128 v180;
  void *v181;
  _BYTE v182[304];
  uint64_t v183;

  v8 = (_BYTE *)a6;
  v9 = a5;
  v10 = a3;
  v183 = *MEMORY[0x1E0C80C00];
  v13 = &a2[a3];
  memset(v182, 0, sizeof(v182));
  memset(v178, 0, sizeof(v178));
  v170 = 0;
  length = 0;
  v168 = 0;
  v169 = 0;
  v166 = 0;
  v167 = 0;
  v164 = 0;
  v165 = 0;
  v162 = 0;
  v163 = 0;
  v160 = 0;
  v161 = 0;
  __dst = 0;
  v179 = v182;
  v180 = xmmword_18D51D4A0;
  v181 = 0;
  v175 = (int8x16_t *)v178;
  v176 = xmmword_18D51D4A0;
  v14 = a2;
  v177 = 0;
  do
  {
    if (v14 == v13)
    {
LABEL_48:
      v35 = -6727;
      goto LABEL_51;
    }
    if (v14 >= v13)
    {
      v35 = -6705;
      goto LABEL_51;
    }
    if ((unint64_t)(v13 - v14) < 2)
      goto LABEL_48;
    v15 = v14 + 2;
    v16 = v14[1];
    if (&v14[v16 + 2] > v13)
    {
      v35 = -6750;
LABEL_51:
      v32 = 0;
      v33 = 0;
      LOBYTE(v34) = 0;
      goto LABEL_108;
    }
    v17 = *v14;
    v14 += v16 + 2;
  }
  while (v17 != 6);
  length = v16;
  appended = 0;
  if ((_DWORD)v16 != 1)
  {
    v32 = 0;
    v33 = 0;
    LOBYTE(v34) = 0;
    v35 = -6743;
    goto LABEL_108;
  }
  if (*v15 == 1)
    _PairingSessionReset(a1);
  v19 = (_BYTE *)(a1 + 120);
  v18 = *(unsigned __int8 *)(a1 + 120);
  if (!*(_BYTE *)(a1 + 120))
  {
    v18 = 1;
    *v19 = 1;
  }
  if (*v15 != (_DWORD)v18)
  {
    v32 = 0;
    v33 = 0;
    LOBYTE(v34) = 0;
    v104 = -6709;
LABEL_238:
    appended = v104;
    goto LABEL_86;
  }
  if ((_DWORD)v18 == 5)
  {
    if (!*(_QWORD *)(a1 + 736) || !*(_QWORD *)(a1 + 744))
    {
LABEL_237:
      v32 = 0;
      v33 = 0;
      LOBYTE(v34) = 0;
      v104 = -6703;
      goto LABEL_238;
    }
    v156 = v8;
    v28 = *(int **)(a1 + 16);
    v29 = *v28;
    if (*v28 <= 30)
    {
      if (v29 == -1)
      {
        if (!_LogCategory_Initialize(*(_QWORD *)(a1 + 16), 0x1Eu))
          goto LABEL_80;
        v28 = *(int **)(a1 + 16);
        v29 = *v28;
      }
      if (v29 > 10)
        v30 = 0;
      else
        v30 = v29 != -1 || _LogCategory_Initialize((uint64_t)v28, 0xAu);
      LogPrintF((uint64_t)v28, (uint64_t)"OSStatus _SetupServerExchange(PairingSessionRef, const void *, size_t, uint8_t **, size_t *, Boolean *)", 0x1Eu, (uint64_t)"Pair-setup server M5 -- exchange request\n%?{end}%1{tlv8}\n", (uint64_t)a5, a6, a7, a8, !v30);
    }
LABEL_80:
    v48 = (int8x16_t *)TLV8CopyCoalesced(a2, v13, 5, &v170, (int *)&appended);
    v32 = (unsigned __int8 *)v48;
    if (appended)
    {
LABEL_81:
      v33 = 0;
      LOBYTE(v34) = 0;
LABEL_82:
      v8 = v156;
      goto LABEL_86;
    }
    v49 = v170;
    v8 = v156;
    if (v170 <= 0xF)
    {
      v33 = 0;
      LOBYTE(v34) = 0;
      v104 = -6743;
      goto LABEL_238;
    }
    v170 -= 16;
    v50 = &v48[-1].u8[v49];
    appended = _chacha20_poly1305_decrypt_all((_DWORD *)(a1 + 414), "PS-Msg05", 8, 0, 0, v48, v170, v48, (uint64_t)v50, 16);
    if (appended)
    {
LABEL_85:
      v33 = 0;
      LOBYTE(v34) = 0;
      goto LABEL_86;
    }
    v52 = *(const void **)(a1 + 280);
    if (v52)
    {
      CFRelease(v52);
      *(_QWORD *)(a1 + 280) = 0;
    }
    v53 = (UInt8 *)TLV8CopyCoalesced(v32, v50, 18, (size_t *)&length, 0);
    if (v53)
    {
      v54 = v53;
      v55 = _OPACKDecodeBytes(0, v53, length, 0, &appended);
      free(v54);
      if (!v55)
        goto LABEL_81;
      v56 = CFGetTypeID(v55);
      if (v56 != CFDictionaryGetTypeID())
      {
        appended = -6756;
        CFRelease(v55);
        goto LABEL_81;
      }
      *(_QWORD *)(a1 + 280) = _PairingSessionIntersectACL(a1, (CFDictionaryRef)v55, &appended);
      v61 = appended;
      if (appended)
      {
        v62 = *(int **)(a1 + 16);
        v9 = a5;
        if (*v62 > 50)
          goto LABEL_189;
        if (*v62 == -1)
        {
          if (!_LogCategory_Initialize((uint64_t)v62, 0x32u))
          {
LABEL_189:
            CFRelease(v55);
            if ((int)appended > -6761)
            {
              v8 = v156;
              if ((int)appended > -6728)
              {
                if (appended == -6727)
                {
                  v98 = 4;
                }
                else
                {
                  if (appended != -6700)
                    goto LABEL_211;
                  v98 = 1;
                }
              }
              else if (appended == -6760)
              {
                v98 = 3;
              }
              else
              {
                if (appended != -6754)
                  goto LABEL_211;
                v98 = 2;
              }
            }
            else
            {
              v8 = v156;
              if ((int)appended > -6765)
              {
                if (appended == -6764)
                {
                  v98 = 6;
                }
                else
                {
                  if (appended != -6763)
                    goto LABEL_211;
                  v98 = 5;
                }
              }
              else
              {
                if (appended != -71144)
                {
                  if (appended == -6773)
                  {
                    v98 = 7;
                    goto LABEL_214;
                  }
LABEL_211:
                  if (appended == -6776)
                    v98 = 9;
                  else
                    v98 = 1;
                  goto LABEL_214;
                }
                v98 = 8;
              }
            }
LABEL_214:
            appended = TLV8BufferAppendUInt64((uint64_t)&v179, 7, v98);
            if (appended)
              goto LABEL_227;
            __s[0] = 6;
            appended = TLV8BufferAppend((uint64_t)&v179, 6, __s, 1uLL);
            if (appended)
              goto LABEL_227;
            v100 = TLV8BufferDetach((uint64_t)&v179, a4, a5);
            v51 = a4;
            goto LABEL_230;
          }
          v62 = *(int **)(a1 + 16);
          v61 = appended;
        }
        LogPrintF((uint64_t)v62, (uint64_t)"OSStatus _SetupServerExchange(PairingSessionRef, const void *, size_t, uint8_t **, size_t *, Boolean *)", 0x32u, (uint64_t)"### Pair-verify server M5 requested ACL not allowed: %#m, %@\n", v57, v58, v59, v60, v61);
        goto LABEL_189;
      }
      CFRelease(v55);
      v8 = v156;
    }
    v72 = *(void **)(a1 + 232);
    if (v72)
      free(v72);
    *(_QWORD *)(a1 + 240) = 0;
    *(_QWORD *)(a1 + 232) = TLV8CopyCoalesced(v32, v50, 16, (size_t *)(a1 + 240), 0);
    v73 = *(const void **)(a1 + 312);
    if (v73)
    {
      CFRelease(v73);
      *(_QWORD *)(a1 + 312) = 0;
    }
    v74 = (UInt8 *)TLV8CopyCoalesced(v32, v50, 17, (size_t *)&length, 0);
    if (v74)
    {
      v75 = v74;
      *(_QWORD *)(a1 + 312) = _OPACKDecodeBytes(0, v74, length, 0, &appended);
      free(v75);
      v76 = *(const void **)(a1 + 312);
      if (!v76)
        goto LABEL_85;
      v77 = CFGetTypeID(v76);
      if (v77 != CFDictionaryGetTypeID())
      {
        appended = -6756;
        v136 = *(const void **)(a1 + 312);
        if (v136)
        {
          CFRelease(v136);
          v33 = 0;
          LOBYTE(v34) = 0;
          *(_QWORD *)(a1 + 312) = 0;
          goto LABEL_320;
        }
LABEL_319:
        v33 = 0;
        LOBYTE(v34) = 0;
LABEL_320:
        v8 = v156;
        goto LABEL_86;
      }
      v78 = *(const __CFDictionary **)(a1 + 312);
      TypeID = CFDictionaryGetTypeID();
      TypedValue = CFDictionaryGetTypedValue(v78, CFSTR("groupInfo"), TypeID, 0);
    }
    else
    {
      TypedValue = 0;
    }
    PairingSessionSetProperty(a1, CFSTR("groupInfoPeer"), TypedValue);
    v81 = (const UInt8 *)TLV8CopyCoalesced(v32, v50, 26, (size_t *)&length, 0);
    if (v81)
    {
      v82 = (UInt8 *)v81;
      v34 = CFDataCreate(0, v81, length);
      free(v82);
      if (!v34)
      {
        v33 = 0;
        goto LABEL_326;
      }
      appended = PairingSessionSetProperty(a1, CFSTR("ownershipProof"), v34);
      CFRelease(v34);
      if (appended)
        goto LABEL_81;
    }
    v83 = *(void **)(a1 + 296);
    if (v83)
    {
      free(v83);
      *(_QWORD *)(a1 + 296) = 0;
    }
    v84 = (_QWORD *)(a1 + 304);
    *(_QWORD *)(a1 + 304) = 0;
    *(_QWORD *)(a1 + 296) = TLV8CopyCoalesced(v32, v50, 1, (size_t *)(a1 + 304), (int *)&appended);
    if (appended)
      goto LABEL_81;
    if (!*v84)
    {
      v33 = 0;
      LOBYTE(v34) = 0;
      v137 = -6743;
      goto LABEL_336;
    }
    appended = TLV8GetBytes(v32, v50, 3, 0x20uLL, 0x20uLL, (char *)(a1 + 606), 0, 0);
    if (appended)
      goto LABEL_81;
    appended = TLV8GetBytes(v32, v50, 10, 0x40uLL, 0x40uLL, __s, 0, 0);
    if (appended)
      goto LABEL_81;
    v155 = (unsigned __int8 *)(a1 + 606);
    length = *v84 + 64;
    v33 = (char *)malloc_type_malloc(length, 0x86AA0F64uLL);
    if (v33)
    {
      CryptoHKDF((uint64_t)kCryptoHashDescriptor_SHA512, *(_QWORD *)(a1 + 736), *(_QWORD *)(a1 + 744), "Pair-Setup-Controller-Sign-Salt", 0x1FuLL, (uint64_t)"Pair-Setup-Controller-Sign-Info", 31, 0x20uLL, (uint64_t)v33);
      memcpy(v33 + 32, *(const void **)(a1 + 296), *(_QWORD *)(a1 + 304));
      v85 = &v33[*(_QWORD *)(a1 + 304) + 32];
      v86 = *(_OWORD *)(a1 + 622);
      *(_OWORD *)v85 = *(_OWORD *)v155;
      *((_OWORD *)v85 + 1) = v86;
      ccsha512_di();
      v87 = cced25519_verify();
      appended = v87;
      if ((_DWORD)v87)
      {
        v92 = v87;
        v93 = *(int **)(a1 + 16);
        v8 = v156;
        v9 = a5;
        if (*v93 <= 50)
        {
          if (*v93 == -1)
          {
            if (!_LogCategory_Initialize((uint64_t)v93, 0x32u))
              goto LABEL_254;
            v93 = *(int **)(a1 + 16);
            v92 = appended;
          }
          LogPrintF((uint64_t)v93, (uint64_t)"OSStatus _SetupServerExchange(PairingSessionRef, const void *, size_t, uint8_t **, size_t *, Boolean *)", 0x32u, (uint64_t)"### Pair-setup server bad signature: %#m\n", v88, v89, v90, v91, v92);
        }
LABEL_254:
        v173[0] = 2;
        appended = TLV8BufferAppend((uint64_t)&v179, 7, v173, 1uLL);
        if (!appended)
        {
          v173[0] = 6;
          appended = TLV8BufferAppend((uint64_t)&v179, 6, v173, 1uLL);
          if (!appended)
          {
            appended = TLV8BufferDetach((uint64_t)&v179, a4, a5);
            if (!appended)
              _PairingSessionReset(a1);
          }
        }
        goto LABEL_228;
      }
      free(v33);
      v105 = _PairingSessionVerifyAllowed(a1);
      appended = v105;
      v8 = v156;
      if ((_DWORD)v105)
      {
        v110 = v105;
        v111 = *(int **)(a1 + 16);
        v9 = a5;
        if (*v111 > 50)
          goto LABEL_269;
        if (*v111 == -1)
        {
          if (!_LogCategory_Initialize((uint64_t)v111, 0x32u))
          {
LABEL_269:
            v173[0] = 9;
            appended = TLV8BufferAppend((uint64_t)&v179, 7, v173, 1uLL);
            if (appended)
              goto LABEL_227;
            v173[0] = 6;
            appended = TLV8BufferAppend((uint64_t)&v179, 6, v173, 1uLL);
            if (appended)
              goto LABEL_227;
            appended = TLV8BufferDetach((uint64_t)&v179, a4, a5);
            if (!appended)
              _PairingSessionReset(a1);
            goto LABEL_319;
          }
          v111 = *(int **)(a1 + 16);
          v110 = appended;
        }
        LogPrintF((uint64_t)v111, (uint64_t)"OSStatus _SetupServerExchange(PairingSessionRef, const void *, size_t, uint8_t **, size_t *, Boolean *)", 0x32u, (uint64_t)"### Pair-setup server: client not allowed: %#m\n", v106, v107, v108, v109, v110);
        goto LABEL_269;
      }
      v117 = PairingSessionSavePeer(a1, *(char **)(a1 + 296), *(_QWORD *)(a1 + 304), v155, v106, v107, v108, v109);
      appended = v117;
      if ((_DWORD)v117)
      {
        v122 = *(int **)(a1 + 16);
        if (*v122 > 60)
          goto LABEL_295;
        if (*v122 == -1)
        {
          v133 = _LogCategory_Initialize(*(_QWORD *)(a1 + 16), 0x3Cu);
          v117 = appended;
          if (!v133)
          {
LABEL_295:
            if ((int)v117 > -6761)
            {
              if ((int)v117 > -6728)
              {
                if ((_DWORD)v117 == -6727)
                {
                  v134 = 4;
                  goto LABEL_317;
                }
                if ((_DWORD)v117 == -6700)
                {
                  v134 = 1;
                  goto LABEL_317;
                }
              }
              else
              {
                if ((_DWORD)v117 == -6760)
                {
                  v134 = 3;
                  goto LABEL_317;
                }
                if ((_DWORD)v117 == -6754)
                {
                  v134 = 2;
                  goto LABEL_317;
                }
              }
            }
            else if ((int)v117 > -6765)
            {
              if ((_DWORD)v117 == -6764)
              {
                v134 = 6;
                goto LABEL_317;
              }
              if ((_DWORD)v117 == -6763)
              {
                v134 = 5;
                goto LABEL_317;
              }
            }
            else
            {
              if ((_DWORD)v117 == -71144)
              {
                v134 = 8;
                goto LABEL_317;
              }
              if ((_DWORD)v117 == -6773)
              {
                v134 = 7;
                goto LABEL_317;
              }
            }
            if ((_DWORD)v117 == -6776)
              v134 = 9;
            else
              v134 = 1;
LABEL_317:
            appended = TLV8BufferAppendUInt64((uint64_t)&v179, 7, v134);
            if (!appended)
            {
              v173[0] = 6;
              appended = TLV8BufferAppend((uint64_t)&v179, 6, v173, 1uLL);
              if (!appended)
              {
                v9 = a5;
                v135 = TLV8BufferDetach((uint64_t)&v179, a4, a5);
                v51 = a4;
                v33 = 0;
                LOBYTE(v34) = 0;
                appended = v135;
                v8 = v156;
                goto LABEL_110;
              }
            }
            goto LABEL_319;
          }
          v122 = *(int **)(a1 + 16);
        }
        LogPrintF((uint64_t)v122, (uint64_t)"OSStatus _SetupServerExchange(PairingSessionRef, const void *, size_t, uint8_t **, size_t *, Boolean *)", 0x3Cu, (uint64_t)"### Pair-setup server save peer failed: %#m\n", v118, v119, v120, v121, v117);
        LODWORD(v117) = appended;
        goto LABEL_295;
      }
      v123 = *(void **)(a1 + 184);
      *(_BYTE *)(a1 + 120) = 6;
      if (v123)
      {
        free(v123);
        *(_QWORD *)(a1 + 184) = 0;
      }
      *(_QWORD *)(a1 + 192) = 0;
      appended = PairingSessionCopyIdentity(a1, 1, (char **)(a1 + 184), (_OWORD *)(a1 + 510), a1 + 542);
      if (appended)
        goto LABEL_291;
      v124 = strlen(*(const char **)(a1 + 184));
      *(_QWORD *)(a1 + 192) = v124;
      if (v124)
      {
        v125 = v124 + 64;
        length = v124 + 64;
        v126 = (char *)malloc_type_malloc(v124 + 64, 0x3BEBA813uLL);
        if (v126)
        {
          v127 = v126;
          CryptoHKDF((uint64_t)kCryptoHashDescriptor_SHA512, *(_QWORD *)(a1 + 736), *(_QWORD *)(a1 + 744), "Pair-Setup-Accessory-Sign-Salt", 0x1EuLL, (uint64_t)"Pair-Setup-Accessory-Sign-Info", 30, 0x20uLL, (uint64_t)v126);
          memcpy(v127 + 32, *(const void **)(a1 + 184), *(_QWORD *)(a1 + 192));
          v128 = &v127[*(_QWORD *)(a1 + 192) + 32];
          v129 = *(_OWORD *)(a1 + 526);
          *(_OWORD *)v128 = *(_OWORD *)(a1 + 510);
          *((_OWORD *)v128 + 1) = v129;
          v130 = *(void (**)(_QWORD, char *, size_t, char *, _QWORD))(a1 + 928);
          if (v130)
          {
            v130(*(unsigned int *)(a1 + 100), v127, v125, __s, *(_QWORD *)(a1 + 936));
          }
          else
          {
            ccsha512_di();
            cced25519_sign();
          }
          free(v127);
          appended = TLV8BufferAppend((uint64_t)&v175, 1, *(char **)(a1 + 184), *(_QWORD *)(a1 + 192));
          if (appended)
            goto LABEL_291;
          appended = TLV8BufferAppend((uint64_t)&v175, 3, (char *)(a1 + 510), 0x20uLL);
          if (appended)
            goto LABEL_291;
          appended = TLV8BufferAppend((uint64_t)&v175, 10, __s, 0x40uLL);
          if (appended)
            goto LABEL_291;
          v139 = *(char **)(a1 + 216);
          if (v139)
          {
            appended = TLV8BufferAppend((uint64_t)&v175, 16, v139, *(_QWORD *)(a1 + 224));
            if (appended)
              goto LABEL_291;
          }
          if ((*(_DWORD *)(a1 + 100) & 0x5770FF34) != 0)
          {
            SelfInfo = _PairingSessionGetSelfInfo(a1);
            if (SelfInfo)
            {
              DataMutable = OPACKEncoderCreateDataMutable((const __CFString *)SelfInfo, 0, (int *)&appended);
              if (!DataMutable)
                goto LABEL_291;
              v142 = DataMutable;
              BytePtr = (char *)CFDataGetBytePtr(DataMutable);
              v144 = CFDataGetLength(v142);
              appended = TLV8BufferAppend((uint64_t)&v175, 17, BytePtr, v144);
              CFRelease(v142);
              if (appended)
                goto LABEL_291;
            }
          }
          v145 = (int8x16_t *)malloc_type_malloc(v176 + 16, 0x7587F95EuLL);
          v33 = (char *)v145;
          if (v145)
          {
            _chacha20_poly1305_encrypt_all((_DWORD *)(a1 + 414), "PS-Msg06", 8, 0, 0, v175, v176, v145, (uint64_t)v145->i64 + v176);
            appended = TLV8BufferAppend((uint64_t)&v179, 5, v33, v176 + 16);
            if (appended)
              goto LABEL_292;
            free(v33);
            appended = TLV8BufferAppend((uint64_t)&v179, 6, (char *)(a1 + 120), 1uLL);
            if (!appended)
            {
              appended = TLV8BufferDetach((uint64_t)&v179, a4, a5);
              if (!appended)
              {
                *(_BYTE *)(a1 + 120) = 7;
                v146 = *(int **)(a1 + 16);
                v147 = *v146;
                if (*v146 > 30)
                  goto LABEL_376;
                if (v147 == -1)
                {
                  v150 = _LogCategory_Initialize(*(_QWORD *)(a1 + 16), 0x1Eu);
                  v146 = *(int **)(a1 + 16);
                  if (!v150)
                    goto LABEL_372;
                  v147 = *v146;
                }
                if (v147 > 10)
                  v148 = 1;
                else
                  v148 = v147 == -1 && !_LogCategory_Initialize((uint64_t)v146, 0xAu);
                LogPrintF((uint64_t)v146, (uint64_t)"OSStatus _SetupServerExchange(PairingSessionRef, const void *, size_t, uint8_t **, size_t *, Boolean *)", 0x1Eu, (uint64_t)"Pair-setup server M6 -- exchange response\n%?{end}%1{tlv8}\n", (uint64_t)a5, a6, a7, a8, v148);
                v146 = *(int **)(a1 + 16);
LABEL_372:
                if (*v146 <= 30)
                {
                  if (*v146 == -1)
                  {
                    if (!_LogCategory_Initialize((uint64_t)v146, 0x1Eu))
                      goto LABEL_376;
                    v146 = *(int **)(a1 + 16);
                  }
                  LogPrintF((uint64_t)v146, (uint64_t)"OSStatus _SetupServerExchange(PairingSessionRef, const void *, size_t, uint8_t **, size_t *, Boolean *)", 0x1Eu, (uint64_t)"Pair-setup server done -- client authenticated\n", (uint64_t)a5, a6, a7, a8, v154);
                }
LABEL_376:
                LOBYTE(v34) = 1;
                v8 = v156;
                goto LABEL_284;
              }
            }
LABEL_291:
            v33 = 0;
LABEL_292:
            LOBYTE(v34) = 0;
LABEL_293:
            v8 = v156;
            goto LABEL_86;
          }
        }
        else
        {
          v33 = 0;
        }
        LOBYTE(v34) = 0;
        v149 = -6728;
      }
      else
      {
        v33 = 0;
        LOBYTE(v34) = 0;
        v149 = -6708;
      }
      appended = v149;
      goto LABEL_293;
    }
    LOBYTE(v34) = 0;
LABEL_326:
    v137 = -6728;
LABEL_336:
    appended = v137;
    goto LABEL_82;
  }
  if ((_DWORD)v18 == 3)
  {
    if (*(_QWORD *)(a1 + 696))
    {
      v20 = v10;
      v21 = v8;
      v25 = *(int **)(a1 + 16);
      v26 = *v25;
      if (*v25 > 30)
        goto LABEL_66;
      if (v26 == -1)
      {
        if (!_LogCategory_Initialize(*(_QWORD *)(a1 + 16), 0x1Eu))
          goto LABEL_66;
        v25 = *(int **)(a1 + 16);
        v26 = *v25;
      }
      if (v26 > 10)
        v27 = 0;
      else
        v27 = v26 != -1 || _LogCategory_Initialize((uint64_t)v25, 0xAu);
      LogPrintF((uint64_t)v25, (uint64_t)"OSStatus _SetupServerExchange(PairingSessionRef, const void *, size_t, uint8_t **, size_t *, Boolean *)", 0x1Eu, (uint64_t)"Pair-setup server M3 -- verify request\n%?{end}%1{tlv8}\n", (uint64_t)a5, a6, a7, a8, !v27);
LABEL_66:
      appended = TLV8GetOrCopyCoalesced(a2, v13, 3, &v167, (size_t *)&v166, &v165, 0);
      if (appended)
      {
LABEL_67:
        v32 = 0;
        v33 = 0;
        LOBYTE(v34) = 0;
        v8 = v21;
LABEL_68:
        v10 = v20;
LABEL_86:
        v9 = a5;
        v51 = a4;
        goto LABEL_110;
      }
      appended = TLV8GetOrCopyCoalesced(a2, v13, 4, &v164, (size_t *)&v163, &v162, 0);
      v8 = v21;
      if (appended)
        goto LABEL_70;
      v41 = *(void **)(a1 + 736);
      v10 = v20;
      if (v41)
      {
        memset_s(v41, *(_QWORD *)(a1 + 744), 0, *(_QWORD *)(a1 + 744));
        v42 = *(void **)(a1 + 736);
        if (v42)
        {
          free(v42);
          *(_QWORD *)(a1 + 736) = 0;
        }
      }
      *(_QWORD *)(a1 + 744) = 0;
      appended = SRPServerVerify_libsrp(*(_QWORD ***)(a1 + 696), v167, v166, v164, v163, (_QWORD *)(a1 + 736), (_QWORD *)(a1 + 744), &v161, &v160);
      if (appended)
      {
        v47 = *(int **)(a1 + 16);
        v9 = a5;
        if (*v47 <= 30)
        {
          if (*v47 == -1)
          {
            if (!_LogCategory_Initialize((uint64_t)v47, 0x1Eu))
              goto LABEL_184;
            v47 = *(int **)(a1 + 16);
          }
          LogPrintF((uint64_t)v47, (uint64_t)"OSStatus _SetupServerExchange(PairingSessionRef, const void *, size_t, uint8_t **, size_t *, Boolean *)", 0x1Eu, (uint64_t)"### Pair-setup server wrong setup code\n", v43, v44, v45, v46, v152);
        }
LABEL_184:
        __s[0] = 2;
        appended = TLV8BufferAppend((uint64_t)&v179, 7, __s, 1uLL);
        if (!appended)
        {
          __s[0] = 4;
          appended = TLV8BufferAppend((uint64_t)&v179, 6, __s, 1uLL);
          if (!appended)
          {
            appended = TLV8BufferDetach((uint64_t)&v179, a4, a5);
            if (!appended)
              _PairingSessionReset(a1);
          }
        }
        goto LABEL_226;
      }
      v63 = *(void (**)(_QWORD))(a1 + 40);
      if (v63)
        v63(*(_QWORD *)(a1 + 24));
      *(_BYTE *)(a1 + 413) = 0;
      v64 = *(void **)(a1 + 384);
      if (v64)
      {
        free(v64);
        *(_QWORD *)(a1 + 384) = 0;
      }
      *(_QWORD *)(a1 + 392) = 0;
      PairingResetThrottle();
      *(_BYTE *)(a1 + 120) = 4;
      appended = TLV8BufferAppend((uint64_t)&v179, 6, (char *)(a1 + 120), 1uLL);
      if (appended)
        goto LABEL_105;
      appended = TLV8BufferAppend((uint64_t)&v179, 4, (char *)v161, v160);
      if (appended)
        goto LABEL_105;
      v65 = *(_QWORD **)(a1 + 696);
      if (v65)
      {
        SRPDelete_libsrp(v65);
        *(_QWORD *)(a1 + 696) = 0;
      }
      CryptoHKDF((uint64_t)kCryptoHashDescriptor_SHA512, *(_QWORD *)(a1 + 736), *(_QWORD *)(a1 + 744), "Pair-Setup-Encrypt-Salt", 0x17uLL, (uint64_t)"Pair-Setup-Encrypt-Info", 23, 0x20uLL, a1 + 414);
      _ServerEncryptExtra(a1, (uint64_t)&v179);
      appended = TLV8BufferDetach((uint64_t)&v179, a4, a5);
      if (appended)
      {
LABEL_105:
        v32 = 0;
        goto LABEL_85;
      }
      v101 = *(int **)(a1 + 16);
      v102 = *v101;
      if (*v101 <= 30)
      {
        if (v102 == -1)
        {
          if (!_LogCategory_Initialize(*(_QWORD *)(a1 + 16), 0x1Eu))
            goto LABEL_276;
          v101 = *(int **)(a1 + 16);
          v102 = *v101;
        }
        if (v102 > 10)
          v103 = 0;
        else
          v103 = v102 != -1 || _LogCategory_Initialize((uint64_t)v101, 0xAu);
        LogPrintF((uint64_t)v101, (uint64_t)"OSStatus _SetupServerExchange(PairingSessionRef, const void *, size_t, uint8_t **, size_t *, Boolean *)", 0x1Eu, (uint64_t)"Pair-setup server M4 -- verify response\n%?{end}%1{tlv8}\n", (uint64_t)a5, a6, a7, a8, !v103);
      }
LABEL_276:
      v131 = *(_DWORD *)(a1 + 100);
      if ((v131 & 0x10) == 0 && ((*(_DWORD *)(a1 + 684) ^ v131) & 0x200) == 0)
      {
        v32 = 0;
        LOBYTE(v34) = 0;
        *v19 = 5;
LABEL_284:
        v9 = a5;
        v51 = a4;
        goto LABEL_285;
      }
      *(_BYTE *)(a1 + 120) = 7;
      v132 = *(int **)(a1 + 16);
      if (*v132 <= 30)
      {
        if (*v132 != -1)
        {
LABEL_281:
          v9 = a5;
          LogPrintF((uint64_t)v132, (uint64_t)"OSStatus _SetupServerExchange(PairingSessionRef, const void *, size_t, uint8_t **, size_t *, Boolean *)", 0x1Eu, (uint64_t)"Pair-setup transient server done -- client authenticated\n", (uint64_t)a5, a6, a7, a8, v153);
          v32 = 0;
          LOBYTE(v34) = 1;
          v51 = a4;
LABEL_285:
          v33 = 0;
          appended = 0;
          goto LABEL_110;
        }
        if (_LogCategory_Initialize((uint64_t)v132, 0x1Eu))
        {
          v132 = *(int **)(a1 + 16);
          goto LABEL_281;
        }
      }
      v32 = 0;
      LOBYTE(v34) = 1;
      goto LABEL_284;
    }
    goto LABEL_237;
  }
  if ((_DWORD)v18 != 1)
  {
    v31 = *(int **)(a1 + 16);
    v9 = a5;
    if (*v31 <= 60)
    {
      if (*v31 == -1)
      {
        if (!_LogCategory_Initialize((uint64_t)v31, 0x3Cu))
          goto LABEL_40;
        v31 = *(int **)(a1 + 16);
        v18 = *(unsigned __int8 *)(a1 + 120);
      }
      LogPrintF((uint64_t)v31, (uint64_t)"OSStatus _SetupServerExchange(PairingSessionRef, const void *, size_t, uint8_t **, size_t *, Boolean *)", 0x3Cu, (uint64_t)"### Pair-setup server bad state: %d\n", (uint64_t)a5, a6, a7, a8, v18);
    }
LABEL_40:
    v32 = 0;
    v33 = 0;
    LOBYTE(v34) = 0;
    v35 = -6709;
    goto LABEL_108;
  }
  v20 = v10;
  v21 = v8;
  v22 = *(int **)(a1 + 16);
  v23 = *v22;
  if (*v22 <= 30)
  {
    if (v23 != -1)
      goto LABEL_18;
    if (_LogCategory_Initialize(*(_QWORD *)(a1 + 16), 0x1Eu))
    {
      v22 = *(int **)(a1 + 16);
      v23 = *v22;
LABEL_18:
      if (v23 > 10)
        v24 = 0;
      else
        v24 = v23 != -1 || _LogCategory_Initialize((uint64_t)v22, 0xAu);
      LogPrintF((uint64_t)v22, (uint64_t)"OSStatus _SetupServerExchange(PairingSessionRef, const void *, size_t, uint8_t **, size_t *, Boolean *)", 0x1Eu, (uint64_t)"Pair-setup server M1 -- start request\n%?{end}%1{tlv8}\n", (uint64_t)a5, a6, a7, a8, !v24);
    }
  }
  appended = TLV8GetBytes(a2, v13, 0, 1uLL, 1uLL, (char *)&__dst, 0, 0);
  if (appended)
    goto LABEL_67;
  v36 = __dst;
  v8 = v21;
  if (__dst)
  {
    v37 = *(int **)(a1 + 16);
    v10 = v20;
    v9 = a5;
    if (*v37 <= 50)
    {
      if (*v37 != -1)
        goto LABEL_58;
      if (_LogCategory_Initialize((uint64_t)v37, 0x32u))
      {
        v37 = *(int **)(a1 + 16);
        v36 = __dst;
LABEL_58:
        LogPrintF((uint64_t)v37, (uint64_t)"OSStatus _SetupServerExchange(PairingSessionRef, const void *, size_t, uint8_t **, size_t *, Boolean *)", 0x32u, (uint64_t)"### Pair-setup server unsupported method: %u\n", (uint64_t)a5, a6, a7, a8, v36);
      }
    }
    v32 = 0;
    v33 = 0;
    LOBYTE(v34) = 0;
    v35 = -6735;
LABEL_108:
    appended = v35;
    goto LABEL_109;
  }
  *(_BYTE *)(a1 + 688) = 0;
  *(_DWORD *)(a1 + 684) = TLV8GetUInt64(a2, v13, 19, 0, 0) & 0x7770FF10;
  if ((*(_BYTE *)(a1 + 103) & 8) == 0)
  {
    v38 = _PairingThrottle();
    v39 = v38;
    if ((v38 & 0x80000000) == 0)
    {
      v40 = *(int **)(a1 + 16);
      v10 = v20;
      v9 = a5;
      if (*v40 <= 50)
      {
        if (*v40 == -1)
        {
          if (!_LogCategory_Initialize((uint64_t)v40, 0x32u))
            goto LABEL_205;
          v40 = *(int **)(a1 + 16);
        }
        LogPrintF((uint64_t)v40, (uint64_t)"OSStatus _SetupServerExchange(PairingSessionRef, const void *, size_t, uint8_t **, size_t *, Boolean *)", 0x32u, (uint64_t)"Pair-setup server throttling for %d second(s)\n", (uint64_t)a5, a6, a7, a8, v39);
      }
LABEL_205:
      __s[0] = 3;
      appended = TLV8BufferAppend((uint64_t)&v179, 7, __s, 1uLL);
      if (appended)
      {
LABEL_226:
        v32 = 0;
LABEL_227:
        v33 = 0;
LABEL_228:
        LOBYTE(v34) = 0;
        goto LABEL_109;
      }
      v99 = TLV8BufferAppendUInt64((uint64_t)&v179, 8, v39);
      goto LABEL_224;
    }
    if ((_DWORD)v38 == -6764)
    {
      v94 = *(int **)(a1 + 16);
      v10 = v20;
      v9 = a5;
      if (*v94 <= 50)
      {
        if (*v94 == -1)
        {
          if (!_LogCategory_Initialize((uint64_t)v94, 0x32u))
            goto LABEL_223;
          v94 = *(int **)(a1 + 16);
        }
        LogPrintF((uint64_t)v94, (uint64_t)"OSStatus _SetupServerExchange(PairingSessionRef, const void *, size_t, uint8_t **, size_t *, Boolean *)", 0x32u, (uint64_t)"### Pair-setup server disabled after too many attempts\n", (uint64_t)a5, a6, a7, a8, v151);
      }
LABEL_223:
      __s[0] = 6;
      v99 = TLV8BufferAppend((uint64_t)&v179, 7, __s, 1uLL);
LABEL_224:
      appended = v99;
      if (v99)
        goto LABEL_226;
      __s[0] = 2;
      appended = TLV8BufferAppend((uint64_t)&v179, 6, __s, 1uLL);
      if (appended)
        goto LABEL_226;
      v100 = TLV8BufferDetach((uint64_t)&v179, a4, v9);
      v51 = a4;
      v32 = 0;
LABEL_230:
      v33 = 0;
      LOBYTE(v34) = 0;
      appended = v100;
      goto LABEL_110;
    }
  }
  *(_BYTE *)(a1 + 120) = 2;
  if (!*(_QWORD *)(a1 + 384) || !*(_QWORD *)(a1 + 392))
  {
    v95 = *(uint64_t (**)(_QWORD, char *, uint64_t, _QWORD))(a1 + 32);
    if (!v95)
    {
      v32 = 0;
      v33 = 0;
      LOBYTE(v34) = 0;
      v138 = -6745;
      goto LABEL_332;
    }
    appended = v95(*(unsigned int *)(a1 + 684), __s, 64, *(_QWORD *)(a1 + 24));
    if (appended)
      goto LABEL_70;
    *(_BYTE *)(a1 + 413) = 1;
    if (strlen(__s) <= 3)
    {
      v32 = 0;
      v33 = 0;
      LOBYTE(v34) = 0;
      v138 = -6743;
      goto LABEL_332;
    }
    appended = ReplaceString((void **)(a1 + 384), (size_t *)(a1 + 392), __s, 0xFFFFFFFFFFFFFFFFLL);
    if (appended)
    {
LABEL_70:
      v32 = 0;
      v33 = 0;
      LOBYTE(v34) = 0;
      goto LABEL_68;
    }
  }
  v96 = *(_QWORD **)(a1 + 696);
  if (v96)
  {
    SRPDelete_libsrp(v96);
    *(_QWORD *)(a1 + 696) = 0;
  }
  v97 = (uint64_t *)malloc_type_calloc(1uLL, 0x38uLL, 0x103004063A0F53DuLL);
  if (!v97)
  {
    v32 = 0;
    v33 = 0;
    LOBYTE(v34) = 0;
    v138 = -6728;
LABEL_332:
    appended = v138;
    goto LABEL_68;
  }
  *(_QWORD *)(a1 + 696) = v97;
  appended = 0;
  appended = SRPServerStart_libsrp(v97, &_kSRPParameters_3072_SHA512, "Pair-Setup", 10, *(const char **)(a1 + 384), *(_QWORD *)(a1 + 392), 0x10uLL, v173, &v169, &v168);
  if (appended)
    goto LABEL_70;
  appended = TLV8BufferAppend((uint64_t)&v179, 6, (char *)(a1 + 120), 1uLL);
  if (appended)
    goto LABEL_70;
  appended = TLV8BufferAppend((uint64_t)&v179, 2, v173, 0x10uLL);
  v9 = a5;
  if (!appended)
  {
    appended = TLV8BufferAppend((uint64_t)&v179, 3, (char *)v169, v168);
    if (!appended)
    {
      v112 = *(_DWORD *)(a1 + 100) & 0x40000200;
      if (!(_DWORD)v112 || (appended = TLV8BufferAppendUInt64((uint64_t)&v179, 19, v112)) == 0)
      {
        Int64Ranged = CFDictionaryGetInt64Ranged(*(const __CFDictionary **)(a1 + 344), CFSTR("setupCodeType"), 0, 0xFFFFFFFFLL, 0);
        if (!Int64Ranged || (appended = TLV8BufferAppendUInt64((uint64_t)&v179, 27, Int64Ranged)) == 0)
        {
          appended = TLV8BufferDetach((uint64_t)&v179, a4, a5);
          if (!appended)
          {
            *(_BYTE *)(a1 + 120) = 3;
            v114 = *(int **)(a1 + 16);
            v115 = *v114;
            if (*v114 <= 30)
            {
              if (v115 != -1)
              {
LABEL_246:
                if (v115 > 10)
                  v116 = 1;
                else
                  v116 = v115 == -1 && !_LogCategory_Initialize((uint64_t)v114, 0xAu);
                v9 = a5;
                LogPrintF((uint64_t)v114, (uint64_t)"OSStatus _SetupServerExchange(PairingSessionRef, const void *, size_t, uint8_t **, size_t *, Boolean *)", 0x1Eu, (uint64_t)"Pair-setup server M2 -- start response\n%?{end}%1{tlv8}\n", (uint64_t)a5, a6, a7, a8, v116);
                v51 = a4;
                v32 = 0;
                LOBYTE(v34) = 0;
                v8 = v21;
                v10 = v20;
                goto LABEL_285;
              }
              if (_LogCategory_Initialize(*(_QWORD *)(a1 + 16), 0x1Eu))
              {
                v114 = *(int **)(a1 + 16);
                v115 = *v114;
                goto LABEL_246;
              }
            }
            v32 = 0;
            LOBYTE(v34) = 0;
            v8 = v21;
            v10 = v20;
            goto LABEL_284;
          }
        }
      }
    }
  }
  v32 = 0;
  v33 = 0;
  LOBYTE(v34) = 0;
  v10 = v20;
LABEL_109:
  v51 = a4;
LABEL_110:
  if (v9 && v51 && !appended)
    _PairingSessionUpdateTranscript(a1, a2, v10, *v51, *v9);
  *v8 = (_BYTE)v34;
  if (v181)
  {
    free(v181);
    v181 = 0;
  }
  if (v177)
  {
    free(v177);
    v177 = 0;
  }
  if (v32)
    free(v32);
  if (v33)
    free(v33);
  if (v169)
    free(v169);
  if (v165)
    free(v165);
  if (v162)
    free(v162);
  if (v161)
    free(v161);
  v66 = appended;
  if (appended != -6771)
  {
    if (appended)
    {
      v67 = *(int **)(a1 + 16);
      v68 = *v67;
      if (*v67 <= 50)
      {
        if (v68 == -1)
        {
          v70 = _LogCategory_Initialize(*(_QWORD *)(a1 + 16), 0x32u);
          v66 = appended;
          if (!v70)
            return v66;
          v67 = *(int **)(a1 + 16);
          v68 = *v67;
        }
        v69 = *(unsigned __int8 *)(a1 + 120);
        if (v68 == -1)
          _LogCategory_Initialize((uint64_t)v67, 0x28u);
        LogPrintF((uint64_t)v67, (uint64_t)"OSStatus _SetupServerExchange(PairingSessionRef, const void *, size_t, uint8_t **, size_t *, Boolean *)", 0x32u, (uint64_t)"### Pair-setup server state %d failed: %#m\n%?{end}%1{tlv8}\n", (uint64_t)a5, a6, a7, a8, v69);
        return appended;
      }
    }
  }
  return v66;
}

