uint64_t *__swift_assign_boxed_opaque_existential_1(uint64_t *result, uint64_t *a2)
{
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  _BYTE v11[24];

  if (result != a2)
  {
    v3 = result;
    v4 = result[3];
    v5 = a2[3];
    if (v4 == v5)
    {
      v9 = *(_QWORD *)(v4 - 8);
      if ((*(_BYTE *)(v9 + 82) & 2) != 0)
      {
        v10 = *a2;
        swift_retain();
        result = (uint64_t *)swift_release();
        *v3 = v10;
      }
      else
      {
        return (uint64_t *)(*(uint64_t (**)(uint64_t *, uint64_t *, uint64_t))(v9 + 24))(result, a2, result[3]);
      }
    }
    else
    {
      result[3] = v5;
      result[4] = a2[4];
      v6 = *(_QWORD *)(v4 - 8);
      v7 = *(_QWORD *)(v5 - 8);
      v8 = *(_DWORD *)(v7 + 80);
      if ((*(_BYTE *)(v6 + 82) & 2) != 0)
      {
        if ((v8 & 0x20000) != 0)
        {
          *result = *a2;
          swift_retain();
        }
        else
        {
          (*(void (**)(uint64_t *, uint64_t *, uint64_t))(v7 + 16))(result, a2, v5);
        }
        return (uint64_t *)swift_release();
      }
      else
      {
        (*(void (**)(_BYTE *, uint64_t *, uint64_t))(v6 + 32))(v11, result, v4);
        if ((v8 & 0x20000) != 0)
        {
          *v3 = *a2;
          swift_retain();
        }
        else
        {
          (*(void (**)(uint64_t *, uint64_t *, uint64_t))(v7 + 16))(v3, a2, v5);
        }
        return (uint64_t *)(*(uint64_t (**)(_BYTE *, uint64_t))(v6 + 8))(v11, v4);
      }
    }
  }
  return result;
}

uint64_t __swift_destroy_boxed_opaque_existential_0(uint64_t a1)
{
  uint64_t v1;

  v1 = *(_QWORD *)(*(_QWORD *)(a1 + 24) - 8);
  if ((*(_BYTE *)(v1 + 82) & 2) != 0)
    return swift_release();
  else
    return (*(uint64_t (**)(void))(v1 + 8))();
}

uint64_t *__swift_allocate_boxed_opaque_existential_0Tm(uint64_t *a1)
{
  uint64_t *v1;
  uint64_t v2;

  v1 = a1;
  if ((*(_BYTE *)(*(_QWORD *)(a1[3] - 8) + 82) & 2) != 0)
  {
    *a1 = swift_allocBox();
    return (uint64_t *)v2;
  }
  return v1;
}

__n128 __swift_memcpy16_8(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = *a2;
  *a1 = *a2;
  return result;
}

uint64_t __swift_instantiateConcreteTypeFromMangledName(uint64_t *a1)
{
  uint64_t result;

  result = *a1;
  if (result < 0)
  {
    result = MEMORY[0x1CAA4BB18]((char *)a1 + (int)result, -(result >> 32), 0, 0);
    *a1 = result;
  }
  return result;
}

uint64_t block_copy_helper(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_copy_helper_0(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_copy_helper_1(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain();
}

_QWORD *__swift_project_boxed_opaque_existential_1(_QWORD *result, uint64_t a2)
{
  if ((*(_DWORD *)(*(_QWORD *)(a2 - 8) + 80) & 0x20000) != 0)
    return (_QWORD *)(*result
                    + ((*(_DWORD *)(*(_QWORD *)(a2 - 8) + 80) + 16) & ~(unint64_t)*(_DWORD *)(*(_QWORD *)(a2 - 8) + 80)));
  return result;
}

__n128 __swift_memcpy32_8(_OWORD *a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;

  result = *(__n128 *)a2;
  v3 = *(_OWORD *)(a2 + 16);
  *a1 = *(_OWORD *)a2;
  a1[1] = v3;
  return result;
}

__n128 __swift_memcpy64_8(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;
  __int128 v4;

  result = *(__n128 *)a2;
  v3 = *(_OWORD *)(a2 + 16);
  v4 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 48) = v4;
  *(__n128 *)a1 = result;
  *(_OWORD *)(a1 + 16) = v3;
  return result;
}

__n128 __swift_memcpy24_8(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = *a2;
  a1[1].n128_u64[0] = a2[1].n128_u64[0];
  *a1 = result;
  return result;
}

uint64_t block_destroy_helper()
{
  return swift_release();
}

uint64_t block_destroy_helper_0()
{
  return swift_release();
}

uint64_t block_destroy_helper_1()
{
  return swift_release();
}

void std::__tree<unsigned long long>::destroy(_QWORD *a1)
{
  if (a1)
  {
    std::__tree<unsigned long long>::destroy(*a1);
    std::__tree<unsigned long long>::destroy(a1[1]);
    operator delete(a1);
  }
}

_BYTE *__swift_memcpy1_1(_BYTE *result, _BYTE *a2)
{
  *result = *a2;
  return result;
}

void std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy(_QWORD *a1)
{
  if (a1)
  {
    std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy(*a1);
    std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy(a1[1]);
    std::__destroy_at[abi:ne180100]<std::pair<std::string const,std::string>,0>((uint64_t)(a1 + 4));
    operator delete(a1);
  }
}

uint64_t __swift_instantiateGenericMetadata(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  _QWORD v6[3];

  v6[0] = a2;
  v6[1] = a3;
  v6[2] = a4;
  return MEMORY[0x1CAA4BAC4](a1, v6, a5);
}

uint64_t *__swift_assign_boxed_opaque_existential_0(uint64_t *result, uint64_t *a2)
{
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  _BYTE v11[24];

  if (result != a2)
  {
    v3 = result;
    v4 = result[3];
    v5 = a2[3];
    if (v4 == v5)
    {
      v9 = *(_QWORD *)(v4 - 8);
      if ((*(_BYTE *)(v9 + 82) & 2) != 0)
      {
        v10 = *a2;
        swift_retain();
        result = (uint64_t *)swift_release();
        *v3 = v10;
      }
      else
      {
        return (uint64_t *)(*(uint64_t (**)(uint64_t *, uint64_t *, uint64_t))(v9 + 24))(result, a2, result[3]);
      }
    }
    else
    {
      result[3] = v5;
      v6 = *(_QWORD *)(v4 - 8);
      v7 = *(_QWORD *)(v5 - 8);
      v8 = *(_DWORD *)(v7 + 80);
      if ((*(_BYTE *)(v6 + 82) & 2) != 0)
      {
        if ((v8 & 0x20000) != 0)
        {
          *result = *a2;
          swift_retain();
        }
        else
        {
          (*(void (**)(uint64_t *, uint64_t *, uint64_t))(v7 + 16))(result, a2, v5);
        }
        return (uint64_t *)swift_release();
      }
      else
      {
        (*(void (**)(_BYTE *, uint64_t *, uint64_t))(v6 + 32))(v11, result, v4);
        if ((v8 & 0x20000) != 0)
        {
          *v3 = *a2;
          swift_retain();
        }
        else
        {
          (*(void (**)(uint64_t *, uint64_t *, uint64_t))(v7 + 16))(v3, a2, v5);
        }
        return (uint64_t *)(*(uint64_t (**)(_BYTE *, uint64_t))(v6 + 8))(v11, v4);
      }
    }
  }
  return result;
}

__n128 __swift_memcpy48_8(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;

  result = *(__n128 *)a2;
  v3 = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  *(_OWORD *)(a1 + 32) = v3;
  *(__n128 *)a1 = result;
  return result;
}

uint64_t __swift_instantiateConcreteTypeFromMangledNameAbstract(uint64_t *a1)
{
  uint64_t result;

  result = *a1;
  if (result < 0)
  {
    result = MEMORY[0x1CAA4BB24](255, (char *)a1 + (int)result, -(result >> 32), 0, 0);
    *a1 = result;
  }
  return result;
}

__n128 __swift_memcpy17_8(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = *a2;
  a1[1].n128_u8[0] = a2[1].n128_u8[0];
  *a1 = result;
  return result;
}

uint64_t __swift_memcpy9_8(uint64_t result, uint64_t *a2)
{
  uint64_t v2;

  v2 = *a2;
  *(_BYTE *)(result + 8) = *((_BYTE *)a2 + 8);
  *(_QWORD *)result = v2;
  return result;
}

__n128 __swift_memcpy18_8(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = *a2;
  a1[1].n128_u16[0] = a2[1].n128_u16[0];
  *a1 = result;
  return result;
}

uint64_t SparseValues.init(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(a2 - 8) + 32))(a3, a1);
}

uint64_t SparseValues.startIndex.getter(uint64_t a1)
{
  (*(void (**)(_QWORD))(*(_QWORD *)(a1 + 24) + 32))(*(_QWORD *)(a1 + 16));
  swift_bridgeObjectRelease();
  return 0;
}

uint64_t SparseValues.endIndex.getter(uint64_t a1)
{
  return sub_1CA0A77B8(a1, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEAE98]);
}

uint64_t SparseValues.isEmpty.getter(uint64_t a1)
{
  uint64_t v1;
  char v2;

  (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)(a1 + 24) + 32))(*(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24));
  swift_getAssociatedTypeWitness();
  v1 = sub_1CA1F0BE0();
  MEMORY[0x1CAA4BB30](MEMORY[0x1E0DEAF50], v1);
  v2 = sub_1CA1F0D90();
  swift_bridgeObjectRelease();
  return v2 & 1;
}

uint64_t SparseValues.count.getter(uint64_t a1)
{
  return sub_1CA0A77B8(a1, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEAE60]);
}

uint64_t sub_1CA0A77B8(uint64_t a1, uint64_t (*a2)(uint64_t, uint64_t))
{
  uint64_t v3;
  uint64_t AssociatedTypeWitness;
  uint64_t v5;

  v3 = (*(uint64_t (**)(_QWORD, _QWORD))(*(_QWORD *)(a1 + 24) + 32))(*(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24));
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v5 = a2(v3, AssociatedTypeWitness);
  swift_bridgeObjectRelease();
  return v5;
}

Swift::Int __swiftcall SparseValues.index(after:)(Swift::Int after)
{
  return after + 1;
}

Swift::Int __swiftcall SparseValues.index(before:)(Swift::Int before)
{
  return before - 1;
}

Swift::Int __swiftcall SparseValues.index(_:offsetBy:)(Swift::Int _, Swift::Int offsetBy)
{
  uint64_t v2;
  Swift::Int result;

  (*(void (**)(_QWORD))(*(_QWORD *)(v2 + 24) + 32))(*(_QWORD *)(v2 + 16));
  swift_bridgeObjectRelease();
  result = _ + offsetBy;
  if (__OFADD__(_, offsetBy))
    __break(1u);
  return result;
}

Swift::Int_optional __swiftcall SparseValues.index(_:offsetBy:limitedBy:)(Swift::Int _, Swift::Int offsetBy, Swift::Int limitedBy)
{
  uint64_t v3;
  Swift::Int v7;
  Swift::Bool v8;
  Swift::Int v9;
  Swift::Int_optional result;

  (*(void (**)(_QWORD))(*(_QWORD *)(v3 + 24) + 32))(*(_QWORD *)(v3 + 16));
  v7 = swift_bridgeObjectRelease();
  v9 = limitedBy - _;
  if (__OFSUB__(limitedBy, _))
  {
    __break(1u);
    goto LABEL_12;
  }
  if (offsetBy < 1)
  {
    if (v9 > 0 || v9 <= offsetBy)
    {
LABEL_9:
      v7 = _ + offsetBy;
      if (!__OFADD__(_, offsetBy))
      {
        v8 = 0;
        goto LABEL_13;
      }
LABEL_12:
      __break(1u);
      goto LABEL_13;
    }
  }
  else if (v9 < 0 || v9 >= (unint64_t)offsetBy)
  {
    goto LABEL_9;
  }
  v7 = 0;
  v8 = 1;
LABEL_13:
  result.value = v7;
  result.is_nil = v8;
  return result;
}

uint64_t SparseValues.subscript.getter(uint64_t a1, unint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t result;
  uint64_t v12;
  uint64_t v13;

  v5 = *(_QWORD *)(a3 + 16);
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x1E0C80A78]();
  v8 = (char *)&v13 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t))(v6 + 16))(v8, v9, v5);
  v10 = *(_QWORD *)(a3 + 24);
  result = (*(uint64_t (**)(uint64_t, uint64_t))(v10 + 40))(v5, v10);
  if ((a2 & 0x8000000000000000) != 0)
  {
    __break(1u);
  }
  else if (*(_QWORD *)(result + 16) > a2)
  {
    v12 = *(_QWORD *)(result + 8 * a2 + 32);
    swift_bridgeObjectRelease();
    (*(void (**)(uint64_t, uint64_t))(v10 + 32))(v5, v10);
    swift_getAssociatedTypeWitness();
    sub_1CA1F0C28();
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
    return v12;
  }
  __break(1u);
  return result;
}

uint64_t sub_1CA0A7A30()
{
  return sub_1CA1F0D0C();
}

_QWORD *sub_1CA0A7A3C@<X0>(_QWORD *result@<X0>, _QWORD *a2@<X8>)
{
  *a2 = *result - 1;
  return result;
}

_QWORD *sub_1CA0A7A4C(_QWORD *result)
{
  --*result;
  return result;
}

Swift::Int sub_1CA0A7A5C@<X0>(Swift::Int *a1@<X0>, Swift::Int a2@<X1>, Swift::Int *a3@<X8>)
{
  Swift::Int result;

  result = SparseValues.index(_:offsetBy:)(*a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_1CA0A7A84(uint64_t a1, uint64_t a2, uint64_t a3)
{
  MEMORY[0x1CAA4BB30](&protocol conformance descriptor for SparseValues<A>, a3);
  return sub_1CA1F0D0C();
}

uint64_t sub_1CA0A7AD8@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t result;

  result = SparseValues.startIndex.getter(a1);
  *a2 = 0;
  return result;
}

uint64_t sub_1CA0A7AFC@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result;

  result = SparseValues.endIndex.getter(a1);
  *a2 = result;
  return result;
}

void (*sub_1CA0A7B20(uint64_t **a1, unint64_t *a2, uint64_t a3))(uint64_t *a1, uint64_t a2)
{
  uint64_t *v6;
  uint64_t AssociatedTypeWitness;
  uint64_t TupleTypeMetadata2;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;

  v6 = (uint64_t *)malloc(0x40uLL);
  *a1 = v6;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  v6[4] = TupleTypeMetadata2;
  v9 = *(_QWORD *)(TupleTypeMetadata2 - 8);
  v6[5] = v9;
  v10 = (char *)malloc(*(_QWORD *)(v9 + 64));
  v6[6] = (uint64_t)v10;
  v6[7] = (uint64_t)sub_1CA0A7C5C(v6, *a2, a3);
  *(_QWORD *)v10 = v11;
  (*(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(AssociatedTypeWitness - 8) + 16))(&v10[*(int *)(TupleTypeMetadata2 + 48)], v12, AssociatedTypeWitness);
  return sub_1CA0A7C08;
}

void sub_1CA0A7C08(uint64_t *a1, uint64_t a2)
{
  uint64_t v3;
  void *v4;

  v3 = *a1;
  (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)(*a1 + 40) + 8))(*(_QWORD *)(*a1 + 48), *(_QWORD *)(*a1 + 32));
  v4 = *(void **)(v3 + 48);
  (*(void (**)(uint64_t, uint64_t))(v3 + 56))(v3, a2);
  free(v4);
  free((void *)v3);
}

void (*sub_1CA0A7C5C(uint64_t *a1, unint64_t a2, uint64_t a3))(_QWORD *a1)
{
  uint64_t TupleTypeMetadata2;
  uint64_t v7;
  _QWORD *v8;

  swift_getAssociatedTypeWitness();
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  *a1 = TupleTypeMetadata2;
  v7 = *(_QWORD *)(TupleTypeMetadata2 - 8);
  a1[1] = v7;
  v8 = malloc(*(_QWORD *)(v7 + 64));
  a1[2] = (uint64_t)v8;
  *v8 = SparseValues.subscript.getter((uint64_t)v8 + *(int *)(TupleTypeMetadata2 + 48), a2, a3);
  return sub_1CA0A7D14;
}

void sub_1CA0A7D14(_QWORD *a1)
{
  void *v1;

  v1 = (void *)a1[2];
  (*(void (**)(void *, _QWORD))(a1[1] + 8))(v1, *a1);
  free(v1);
}

uint64_t sub_1CA0A7D48(uint64_t a1)
{
  MEMORY[0x1CAA4BB30](&protocol conformance descriptor for SparseValues<A>, a1);
  return sub_1CA1F0D00();
}

void sub_1CA0A7D9C(uint64_t a1@<X8>)
{
  *(_QWORD *)a1 = 0;
  *(_WORD *)(a1 + 8) = 256;
}

Swift::Int sub_1CA0A7DAC@<X0>(Swift::Int *a1@<X0>, Swift::Int a2@<X1>, Swift::Int *a3@<X2>, uint64_t a4@<X8>)
{
  Swift::Int_optional v6;

  v6 = SparseValues.index(_:offsetBy:limitedBy:)(*a1, a2, *a3);
  *(_QWORD *)a4 = v6.value;
  *(_BYTE *)(a4 + 8) = v6.is_nil;
  return v6.value;
}

_QWORD *sub_1CA0A7DEC@<X0>(_QWORD *result@<X0>, _QWORD *a2@<X8>)
{
  *a2 = *result + 1;
  return result;
}

_QWORD *sub_1CA0A7DFC(_QWORD *result)
{
  ++*result;
  return result;
}

uint64_t sub_1CA0A7E0C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t result;

  v5 = *(_QWORD *)(a1 - 8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v5 + 16))(a2, v2, a1);
  SparseValues.startIndex.getter(a1);
  (*(void (**)(uint64_t, uint64_t))(v5 + 8))(v2, a1);
  MEMORY[0x1CAA4BB30](&protocol conformance descriptor for SparseValues<A>, a1);
  result = sub_1CA1F118C();
  *(_QWORD *)(a2 + *(int *)(result + 36)) = 0;
  return result;
}

uint64_t sub_1CA0A7E8C(uint64_t a1)
{
  MEMORY[0x1CAA4BB30](&protocol conformance descriptor for SparseValues<A>, a1);
  return sub_1CA1F0D3C();
}

uint64_t sub_1CA0A7EC0()
{
  return 2;
}

uint64_t sub_1CA0A7EC8(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = MEMORY[0x1CAA4BB30](&protocol conformance descriptor for SparseValues<A>, a1);
  v4 = sub_1CA0AB8CC(v1, a1, v3);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(a1 - 8) + 8))(v1, a1);
  return v4;
}

uint64_t sub_1CA0A7F2C()
{
  return sub_1CA1F0A9C();
}

uint64_t SparseArrayProtocol.reduce<A>(into:update:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  _QWORD v8[10];

  v8[2] = a4;
  v8[3] = a5;
  v8[4] = a6;
  v8[5] = a7;
  v8[6] = a1;
  v8[7] = a2;
  v8[8] = a3;
  return (*(uint64_t (**)(_QWORD *(*)@<X0>(uint64_t@<X8>), _QWORD *, uint64_t, uint64_t, uint64_t))(a6 + 24))(sub_1CA0A808C, v8, a5, a4, a6);
}

_QWORD *sub_1CA0A7F9C@<X0>(uint64_t a1@<X1>, void (*a2)(uint64_t, char *)@<X2>, uint64_t a3@<X8>)
{
  uint64_t AssociatedTypeWitness;
  uint64_t AssociatedConformanceWitness;
  uint64_t v8;
  uint64_t v9;

  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  v9 = type metadata accessor for SparseBuffer(0, AssociatedTypeWitness, AssociatedConformanceWitness, v8);
  return SparseBuffer.reduce<A>(into:update:)(a1, a2, v9, a3);
}

_QWORD *sub_1CA0A808C@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return sub_1CA0A7F9C(*(_QWORD *)(v1 + 48), *(void (**)(uint64_t, char *))(v1 + 56), a1);
}

uint64_t SparseArrayProtocol.union<A>(with:combine:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t (*v9)(uint64_t (*)(_OWORD *), _QWORD *, uint64_t, uint64_t, uint64_t);
  uint64_t AssociatedTypeWitness;
  uint64_t AssociatedConformanceWitness;
  uint64_t v12;
  uint64_t v13;
  _QWORD v15[10];

  v15[2] = a4;
  v15[3] = a5;
  v15[4] = a6;
  v15[5] = a7;
  v15[6] = a1;
  v15[7] = a2;
  v15[8] = a3;
  v9 = *(uint64_t (**)(uint64_t (*)(_OWORD *), _QWORD *, uint64_t, uint64_t, uint64_t))(a6 + 24);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  v13 = type metadata accessor for SparseArray(0, AssociatedTypeWitness, AssociatedConformanceWitness, v12);
  return v9(sub_1CA0A8278, v15, v13, a4, a6);
}

uint64_t sub_1CA0A8178(_OWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  __int128 v10;
  __int128 v11;
  uint64_t (*v12)(uint64_t (*)@<X0>(_OWORD *@<X0>, _QWORD *@<X8>), _QWORD *, uint64_t, uint64_t, uint64_t);
  uint64_t AssociatedTypeWitness;
  uint64_t AssociatedConformanceWitness;
  uint64_t v15;
  uint64_t v16;
  _QWORD v18[10];
  _OWORD v19[4];

  v10 = a1[1];
  v19[0] = *a1;
  v19[1] = v10;
  v11 = a1[3];
  v19[2] = a1[2];
  v19[3] = v11;
  v18[2] = a5;
  v18[3] = a6;
  v18[4] = a7;
  v18[5] = a8;
  v18[6] = v19;
  v18[7] = a3;
  v18[8] = a4;
  v12 = *(uint64_t (**)(uint64_t (*)@<X0>(_OWORD *@<X0>, _QWORD *@<X8>), _QWORD *, uint64_t, uint64_t, uint64_t))(a8 + 24);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  v16 = type metadata accessor for SparseArray(0, AssociatedTypeWitness, AssociatedConformanceWitness, v15);
  return v12(sub_1CA0ABA98, v18, v16, a6, a8);
}

uint64_t sub_1CA0A8278(_OWORD *a1)
{
  uint64_t *v1;

  return sub_1CA0A8178(a1, v1[6], v1[7], v1[8], v1[2], v1[3], v1[4], v1[5]);
}

uint64_t sub_1CA0A829C@<X0>(_OWORD *a1@<X0>, _OWORD *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, _QWORD *a5@<X8>)
{
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  uint64_t AssociatedTypeWitness;
  uint64_t AssociatedConformanceWitness;
  uint64_t v14;
  uint64_t v15;
  _OWORD v17[8];

  v8 = a2[1];
  v17[4] = *a2;
  v17[5] = v8;
  v9 = a2[3];
  v17[6] = a2[2];
  v17[7] = v9;
  v10 = a1[1];
  v17[0] = *a1;
  v17[1] = v10;
  v11 = a1[3];
  v17[2] = a1[2];
  v17[3] = v11;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  v15 = type metadata accessor for SparseBuffer(0, AssociatedTypeWitness, AssociatedConformanceWitness, v14);
  return SparseBuffer.union(with:combine:)((uint64_t)v17, a3, a4, v15, a5);
}

uint64_t SparseArrayProtocol.intersection<A, B>(with:combine:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t (*v11)(uint64_t (*)(_OWORD *, uint64_t, uint64_t, uint64_t), _QWORD *, uint64_t, uint64_t, uint64_t);
  uint64_t v12;
  _QWORD v14[12];

  v14[2] = a4;
  v14[3] = a5;
  v14[4] = a6;
  v14[5] = a7;
  v14[6] = a8;
  v14[7] = a9;
  v14[8] = a1;
  v14[9] = a2;
  v14[10] = a3;
  v11 = *(uint64_t (**)(uint64_t (*)(_OWORD *, uint64_t, uint64_t, uint64_t), _QWORD *, uint64_t, uint64_t, uint64_t))(a7 + 24);
  v12 = type metadata accessor for SparseArray(0, a6, a9, a4);
  return v11(sub_1CA0A840C, v14, v12, a4, a7);
}

uint64_t sub_1CA0A840C(_OWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  __int128 v9;
  __int128 v10;
  uint64_t (*v11)(uint64_t (*)(uint64_t), _QWORD *, uint64_t, uint64_t, uint64_t);
  uint64_t v12;
  _QWORD v14[4];
  __int128 v15;
  uint64_t v16;
  uint64_t v17;
  _OWORD *v18;
  __int128 v19;
  _OWORD v20[4];

  v5 = *(_QWORD *)(v4 + 16);
  v6 = *(_QWORD *)(v4 + 24);
  v8 = *(_QWORD *)(v4 + 48);
  v7 = *(_QWORD *)(v4 + 56);
  v9 = a1[1];
  v20[0] = *a1;
  v20[1] = v9;
  v10 = a1[3];
  v20[2] = a1[2];
  v20[3] = v10;
  v14[2] = v5;
  v14[3] = v6;
  v15 = *(_OWORD *)(v4 + 32);
  v16 = v8;
  v17 = v7;
  v18 = v20;
  v19 = *(_OWORD *)(v4 + 72);
  v11 = *(uint64_t (**)(uint64_t (*)(uint64_t), _QWORD *, uint64_t, uint64_t, uint64_t))(v8 + 24);
  v12 = type metadata accessor for SparseArray(0, v15, v7, a4);
  return v11(sub_1CA0ABA44, v14, v12, v6, v8);
}

uint64_t sub_1CA0A84C0@<X0>(_OWORD *a1@<X0>, _OWORD *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X6>, _QWORD *a6@<X8>, uint64_t a7, uint64_t a8)
{
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  uint64_t AssociatedTypeWitness;
  uint64_t AssociatedConformanceWitness;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _OWORD v23[9];

  v9 = a2[1];
  v23[4] = *a2;
  v23[5] = v9;
  v10 = a2[3];
  v23[6] = a2[2];
  v23[7] = v10;
  v11 = a1[1];
  v23[0] = *a1;
  v23[1] = v11;
  v12 = a1[3];
  v23[2] = a1[2];
  v23[3] = v12;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  v16 = type metadata accessor for SparseBuffer(0, AssociatedTypeWitness, AssociatedConformanceWitness, v15);
  v17 = swift_getAssociatedTypeWitness();
  v18 = swift_getAssociatedConformanceWitness();
  return SparseBuffer.intersection<A, B>(with:combine:)((uint64_t)v23, a3, a4, v16, v17, a5, v18, a8, a6);
}

uint64_t SparseArrayProtocol.mapSparseValues<A>(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t (*v8)(uint64_t (*)@<X0>(_QWORD *@<X8>), _QWORD *, uint64_t, uint64_t, uint64_t);
  uint64_t v9;
  _QWORD v11[8];

  v11[7] = a2;
  v11[2] = a3;
  v11[3] = a4;
  v11[4] = a5;
  v11[5] = a6;
  v11[6] = a1;
  v8 = *(uint64_t (**)(uint64_t (*)@<X0>(_QWORD *@<X8>), _QWORD *, uint64_t, uint64_t, uint64_t))(a5 + 24);
  v9 = type metadata accessor for SparseArray(0, a4, a6, a4);
  return v8(sub_1CA0A8770, v11, v9, a3, a5);
}

uint64_t sub_1CA0A868C@<X0>(uint64_t a1@<X4>, _QWORD *a2@<X8>)
{
  uint64_t AssociatedTypeWitness;
  uint64_t AssociatedConformanceWitness;
  uint64_t v6;

  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  type metadata accessor for SparseBuffer(0, AssociatedTypeWitness, AssociatedConformanceWitness, v6);
  return sub_1CA0FF180(a1, a2);
}

uint64_t sub_1CA0A8770@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v1;

  return sub_1CA0A868C(*(_QWORD *)(v1 + 24), a1);
}

uint64_t SparseArrayProtocol<>.transposed()@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t *a4@<X8>)
{
  uint64_t AssociatedTypeWitness;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  char *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  char *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  char *v48;
  uint64_t v49;
  uint64_t v50;
  char *v51;
  uint64_t AssociatedConformanceWitness;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  char *v57;
  uint64_t v58;
  unint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t result;
  uint64_t v63;
  uint64_t v64;
  uint64_t *v65;
  uint64_t v66;
  char *v67;
  double (*v68)@<D0>(_OWORD *@<X8>);
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t *v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  char *v79;
  uint64_t v80;
  uint64_t *v81;
  uint64_t v82;
  void (*v83)(char *, char *, uint64_t);
  char *v84;
  char *v85;
  uint64_t v86;
  char *v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  unint64_t v91;
  uint64_t v92;
  uint64_t v93;
  char *v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t *v100;
  uint64_t v101;
  char *v102;
  uint64_t v103;
  uint64_t *v104;
  char *v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  _QWORD *v109;
  uint64_t v110;
  uint64_t v111;
  char v112;
  char v113;
  uint64_t v114;
  uint64_t v115;
  char v116;
  uint64_t v117;
  uint64_t v118;
  char v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t *v122;
  char *v123;
  uint64_t v124;
  char *v125;
  uint64_t v126;
  char *v127;
  uint64_t *v128;
  uint64_t v129;
  char *v130;
  char *v131;
  uint64_t v132;
  char *v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t *v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t *v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  char *v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t *v150;
  uint64_t TupleTypeMetadata2;
  uint64_t v152;
  char *v153;
  uint64_t v154;
  _QWORD *v155;
  uint64_t v156;
  double (*v157)@<D0>(_OWORD *@<X8>);
  uint64_t v158;
  __int128 v159;

  v122 = a4;
  swift_getAssociatedTypeWitness();
  v146 = a3;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v148 = *(_QWORD *)(AssociatedTypeWitness - 8);
  MEMORY[0x1E0C80A78](AssociatedTypeWitness, v8);
  v123 = (char *)&v120 - v9;
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  v141 = *(_QWORD *)(TupleTypeMetadata2 - 8);
  v11 = MEMORY[0x1E0C80A78](TupleTypeMetadata2, v10);
  v140 = (uint64_t *)((char *)&v120 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0));
  MEMORY[0x1E0C80A78](v11, v13);
  v150 = (uint64_t *)((char *)&v120 - v14);
  v15 = swift_checkMetadataState();
  v134 = *(_QWORD *)(v15 - 8);
  MEMORY[0x1E0C80A78](v15, v16);
  v133 = (char *)&v120 - v17;
  v19 = type metadata accessor for SparseValues(0, v15, a3, v18);
  v132 = *(_QWORD *)(v19 - 8);
  MEMORY[0x1E0C80A78](v19, v20);
  v131 = (char *)&v120 - v21;
  MEMORY[0x1CAA4BB30](&protocol conformance descriptor for SparseValues<A>, v19);
  v143 = v19;
  v139 = sub_1CA1F118C();
  v138 = *(_QWORD *)(v139 - 8);
  v23 = MEMORY[0x1E0C80A78](v139, v22);
  v130 = (char *)&v120 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v23, v25);
  v153 = (char *)&v120 - v26;
  v137 = swift_getTupleTypeMetadata2();
  v129 = *(_QWORD *)(v137 - 8);
  v28 = MEMORY[0x1E0C80A78](v137, v27);
  v128 = (uint64_t *)((char *)&v120 - ((v29 + 15) & 0xFFFFFFFFFFFFFFF0));
  v31 = MEMORY[0x1E0C80A78](v28, v30);
  v136 = (uint64_t *)((char *)&v120 - v32);
  v33 = a1;
  v145 = a1;
  v34 = *(_QWORD *)(a1 - 8);
  MEMORY[0x1E0C80A78](v31, v33);
  v36 = (char *)&v120 - ((v35 + 15) & 0xFFFFFFFFFFFFFFF0);
  v142 = a2;
  v39 = type metadata accessor for SparseValues(0, v37, a2, v38);
  v156 = *(_QWORD *)(v39 - 8);
  MEMORY[0x1E0C80A78](v39, v40);
  v42 = (char *)&v120 - v41;
  MEMORY[0x1CAA4BB30](&protocol conformance descriptor for SparseValues<A>, v39);
  v43 = sub_1CA1F118C();
  v44 = *(_QWORD *)(v43 - 8);
  v46 = MEMORY[0x1E0C80A78](v43, v45);
  v48 = (char *)&v120 - ((v47 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v46, v49);
  v51 = (char *)&v120 - v50;
  v135 = v15;
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  v149 = AssociatedTypeWitness;
  v54 = type metadata accessor for SparseArray(255, AssociatedTypeWitness, AssociatedConformanceWitness, v53);
  swift_getTupleTypeMetadata2();
  sub_1CA1F0B50();
  v144 = v54;
  v155 = (_QWORD *)sub_1CA1F08EC();
  v55 = v145;
  (*(void (**)(char *, double (*)@<D0>(_OWORD *@<X8>), uint64_t))(v34 + 16))(v36, v157, v145);
  (*(void (**)(char *, char *, uint64_t))(v34 + 32))(v42, v36, v55);
  v56 = v156;
  (*(void (**)(char *, char *, uint64_t))(v156 + 16))(v48, v42, v39);
  (*(void (**)(_QWORD))(*(_QWORD *)(v39 + 24) + 32))(*(_QWORD *)(v39 + 16));
  swift_bridgeObjectRelease();
  (*(void (**)(char *, uint64_t))(v56 + 8))(v42, v39);
  *(_QWORD *)&v48[*(int *)(v43 + 36)] = 0;
  v120 = v44;
  v57 = v51;
  (*(void (**)(char *, char *, uint64_t))(v44 + 32))(v51, v48, v43);
  v121 = v43;
  v58 = *(int *)(v43 + 36);
  v59 = *(_QWORD *)&v51[v58];
  if (v59 == SparseValues.endIndex.getter(v39))
  {
    v157 = 0;
LABEL_3:
    (*(void (**)(char *, uint64_t))(v120 + 8))(v57, v121);
    v60 = v144;
    v61 = MEMORY[0x1CAA4BB30](&protocol conformance descriptor for SparseArray<A>, v144);
    SparseArray.init(_:)((uint64_t)v155, v60, v61, v122);
    return sub_1CA0AAE34((uint64_t)v157);
  }
  else
  {
    v157 = 0;
    v63 = 0;
    v64 = v137;
    v65 = v136;
    v127 = (char *)v136 + *(int *)(v137 + 48);
    v66 = v143;
    v67 = v153;
    v126 = v39;
    v125 = v57;
    v124 = v58;
    while (1)
    {
      v156 = v63;
      v72 = v39;
      v73 = v128;
      v74 = v58;
      v75 = (uint64_t)v128 + *(int *)(v64 + 48);
      v76 = v64;
      v77 = SparseValues.subscript.getter(v75, v59, v72);
      *v73 = v77;
      *v65 = v77;
      v78 = v134;
      v79 = v127;
      v80 = v75;
      v81 = v65;
      v82 = v135;
      (*(void (**)(char *, uint64_t, uint64_t))(v134 + 16))(v127, v80, v135);
      (*(void (**)(uint64_t *, uint64_t))(v129 + 8))(v73, v76);
      ++*(_QWORD *)&v57[v74];
      v152 = *v81;
      v83 = *(void (**)(char *, char *, uint64_t))(v78 + 32);
      v84 = v133;
      v83(v133, v79, v82);
      v85 = v131;
      v83(v131, v84, v82);
      v86 = v132;
      v87 = v130;
      (*(void (**)(char *, char *, uint64_t))(v132 + 16))(v130, v85, v66);
      (*(void (**)(_QWORD))(*(_QWORD *)(v66 + 24) + 32))(*(_QWORD *)(v66 + 16));
      swift_bridgeObjectRelease();
      (*(void (**)(char *, uint64_t))(v86 + 8))(v85, v66);
      v88 = v139;
      *(_QWORD *)&v87[*(int *)(v139 + 36)] = 0;
      v89 = v88;
      (*(void (**)(char *, char *))(v138 + 32))(v67, v87);
      v90 = *(int *)(v89 + 36);
      v91 = *(_QWORD *)&v67[v90];
      if (v91 != SparseValues.endIndex.getter(v66))
        break;
      v69 = v156;
      v68 = v157;
      v67 = v153;
      v70 = (uint64_t)v155;
LABEL_6:
      v155 = (_QWORD *)v70;
      v157 = v68;
      (*(void (**)(char *, uint64_t))(v138 + 8))(v67, v139);
      v57 = v125;
      v58 = v124;
      v59 = *(_QWORD *)&v125[v124];
      v39 = v126;
      v71 = SparseValues.endIndex.getter(v126);
      v63 = v69;
      v64 = v137;
      v65 = v136;
      if (v59 == v71)
        goto LABEL_3;
    }
    v147 = (char *)v150 + *(int *)(TupleTypeMetadata2 + 48);
    v93 = v148;
    v92 = v149;
    v94 = v123;
    v67 = v153;
    v95 = v156;
    v68 = v157;
    v70 = (uint64_t)v155;
    v154 = v90;
    while (1)
    {
      v156 = v95;
      v157 = v68;
      v98 = TupleTypeMetadata2;
      v99 = v66;
      v100 = v140;
      v101 = (uint64_t)v140 + *(int *)(TupleTypeMetadata2 + 48);
      v102 = v67;
      v103 = SparseValues.subscript.getter(v101, v91, v99);
      *v100 = v103;
      v104 = v150;
      *v150 = v103;
      v105 = v147;
      (*(void (**)(char *, uint64_t, uint64_t))(v93 + 16))(v147, v101, v92);
      v106 = v98;
      v107 = v154;
      (*(void (**)(uint64_t *, uint64_t))(v141 + 8))(v100, v106);
      ++*(_QWORD *)&v102[v107];
      v108 = *v104;
      (*(void (**)(char *, char *, uint64_t))(v93 + 32))(v94, v105, v92);
      v109 = (_QWORD *)swift_allocObject();
      v110 = v142;
      v109[2] = v145;
      v109[3] = v110;
      v155 = v109;
      v109[4] = v146;
      sub_1CA0AAE34((uint64_t)v157);
      swift_isUniquelyReferenced_nonNull_native();
      *(_QWORD *)&v159 = v70;
      v111 = v108;
      sub_1CA0AA68C(v108);
      if (__OFADD__(*(_QWORD *)(v70 + 16), (v112 & 1) == 0))
        break;
      v113 = v112;
      v114 = (uint64_t)v94;
      v115 = v144;
      sub_1CA1F11B0();
      v116 = sub_1CA1F1198();
      v70 = v159;
      v117 = v149;
      v66 = v143;
      if ((v116 & 1) != 0)
      {
        v118 = v149;
        sub_1CA0AA68C(v111);
        if ((v113 & 1) != (v119 & 1))
          goto LABEL_18;
        v117 = v118;
        v107 = v154;
      }
      swift_bridgeObjectRelease();
      if ((v113 & 1) != 0)
      {
        v96 = v117;
        swift_bridgeObjectRetain();
        v69 = (uint64_t)v155;
      }
      else
      {
        v96 = v117;
        swift_bridgeObjectRetain();
        v69 = (uint64_t)v155;
        sub_1CA0A9180(&v159);
        v158 = v111;
        sub_1CA1F11A4();
      }
      swift_bridgeObjectRelease();
      SparseArray.append(offset:value:)(v152, v114, v115);
      v94 = (char *)v114;
      v93 = v148;
      v92 = v96;
      (*(void (**)(char *, uint64_t))(v148 + 8))(v94, v96);
      v91 = *(_QWORD *)&v153[v107];
      v67 = v153;
      v97 = SparseValues.endIndex.getter(v66);
      v68 = sub_1CA0AAE28;
      v95 = v69;
      if (v91 == v97)
        goto LABEL_6;
    }
    __break(1u);
LABEL_18:
    result = sub_1CA1F1360();
    __break(1u);
  }
  return result;
}

uint64_t type metadata accessor for SparseValues(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for SparseValues);
}

double sub_1CA0A9180@<D0>(_OWORD *a1@<X8>)
{
  uint64_t AssociatedTypeWitness;
  uint64_t v3;
  uint64_t AssociatedConformanceWitness;

  swift_getAssociatedTypeWitness();
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v3 = sub_1CA1F0B50();
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  return SparseArray.init(arrayLiteral:)(v3, AssociatedTypeWitness, AssociatedConformanceWitness, a1);
}

uint64_t + infix<A, B>(_:_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  return sub_1CA0A9248(a1, a2, a3, a4, a5, a6, a7, (uint64_t)sub_1CA0AAE44);
}

uint64_t - infix<A, B>(_:_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  return sub_1CA0A9248(a1, a2, a3, a4, a5, a6, a7, (uint64_t)sub_1CA0AAE50);
}

uint64_t sub_1CA0A9248(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t AssociatedTypeWitness;

  v12 = a3;
  v13 = a4;
  v14 = a5;
  v15 = a6;
  v16 = a7;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  return SparseArrayProtocol.union<A>(with:combine:)(a2, a8, (uint64_t)&v11, v12, v13, v14, v15);
}

uint64_t SparseArrayProtocol<>.sum()(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t AssociatedTypeWitness;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _BYTE *v11;
  uint64_t AssociatedConformanceWitness;
  _BYTE v14[16];
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _BYTE v19[16];
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  _BYTE *v24;
  uint64_t (*v25)();
  _BYTE *v26;

  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v7 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v9 = MEMORY[0x1E0C80A78](AssociatedTypeWitness, v8);
  v11 = &v14[-v10];
  v15 = a1;
  v16 = a2;
  v17 = a3;
  v18 = v9;
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  (*(void (**)(uint64_t, uint64_t))(AssociatedConformanceWitness + 16))(AssociatedTypeWitness, AssociatedConformanceWitness);
  v20 = a1;
  v21 = AssociatedTypeWitness;
  v22 = a2;
  v23 = AssociatedConformanceWitness;
  v24 = v11;
  v25 = sub_1CA0AAE5C;
  v26 = v14;
  (*(void (**)(_QWORD *(*)@<X0>(uint64_t@<X8>), _BYTE *, uint64_t, uint64_t, uint64_t))(a2 + 24))(sub_1CA0A808C, v19, AssociatedTypeWitness, a1, a2);
  return (*(uint64_t (**)(_BYTE *, uint64_t))(v7 + 8))(v11, AssociatedTypeWitness);
}

uint64_t SparseArrayProtocol<>.sum(along:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t (*v9)(uint64_t (*)@<X0>(_QWORD *@<X8>), uint64_t *, uint64_t, uint64_t, uint64_t);
  uint64_t v10;
  uint64_t v11;
  uint64_t result;
  uint64_t AssociatedTypeWitness;
  uint64_t AssociatedConformanceWitness;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD v22[10];
  uint64_t v23[3];
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t (*v27)();
  _QWORD *v28;

  if (a1)
  {
    if (a1 == 1)
    {
      SparseArrayProtocol<>.transposed()(a2, a3, a4, v23);
      v22[7] = v23[0];
      v22[8] = v23[1];
      swift_getAssociatedTypeWitness();
      AssociatedTypeWitness = swift_getAssociatedTypeWitness();
      AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
      v16 = type metadata accessor for SparseArray(255, AssociatedTypeWitness, AssociatedConformanceWitness, v15);
      v17 = MEMORY[0x1CAA4BB30](&protocol conformance descriptor for SparseArray<A>, v16);
      v19 = type metadata accessor for SparseArray(0, v16, v17, v18);
      v20 = MEMORY[0x1CAA4BB30](&protocol conformance descriptor for SparseArray<A>, v19);
      v21 = MEMORY[0x1CAA4BB30](&protocol conformance descriptor for SparseArray<A>, v16);
      SparseArrayProtocol<>.sum(along:)(0, v19, v20, v21, a5);
      swift_bridgeObjectRelease();
      return swift_bridgeObjectRelease();
    }
    else
    {
      type metadata accessor for MatrixAxis(0);
      result = sub_1CA1F130C();
      __break(1u);
    }
  }
  else
  {
    MEMORY[0x1E0C80A78](0, a2);
    v22[2] = a2;
    v22[3] = a3;
    v22[4] = a4;
    v22[5] = a5;
    swift_getAssociatedTypeWitness();
    v23[2] = a2;
    v24 = swift_getAssociatedTypeWitness();
    v25 = a3;
    v26 = swift_getAssociatedConformanceWitness();
    v27 = sub_1CA0AAECC;
    v28 = v22;
    v9 = *(uint64_t (**)(uint64_t (*)@<X0>(_QWORD *@<X8>), uint64_t *, uint64_t, uint64_t, uint64_t))(a3 + 24);
    v11 = type metadata accessor for SparseArray(0, v24, v26, v10);
    return v9(sub_1CA0A8770, v23, v11, a2, a3);
  }
  return result;
}

uint64_t * infix<A, B>(_:_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t (*v10)(uint64_t (*)(_OWORD *, uint64_t, uint64_t, uint64_t), _BYTE *, uint64_t, uint64_t, uint64_t);
  uint64_t v11;
  uint64_t v12;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t AssociatedTypeWitness;
  _BYTE v21[16];
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t AssociatedConformanceWitness;
  uint64_t v28;
  uint64_t (*v29)();
  uint64_t *v30;

  v15 = a3;
  v16 = a4;
  v17 = a5;
  v18 = a6;
  v19 = a7;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v22 = v15;
  v23 = v16;
  v24 = AssociatedTypeWitness;
  v25 = v17;
  v26 = v18;
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  v28 = a2;
  v29 = sub_1CA0AAF38;
  v30 = &v14;
  v10 = *(uint64_t (**)(uint64_t (*)(_OWORD *, uint64_t, uint64_t, uint64_t), _BYTE *, uint64_t, uint64_t, uint64_t))(v17 + 24);
  v12 = type metadata accessor for SparseArray(0, AssociatedTypeWitness, AssociatedConformanceWitness, v11);
  return v10(sub_1CA0A840C, v21, v12, a3, a5);
}

void * infix<A>(_:_:)(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, _QWORD *a6@<X8>)
{
  uint64_t AssociatedTypeWitness;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t AssociatedConformanceWitness;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23[2];
  _QWORD *v24;
  uint64_t v25;

  v23[1] = a1;
  v24 = a6;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v11 = *(_QWORD *)(AssociatedTypeWitness - 8);
  MEMORY[0x1E0C80A78](AssociatedTypeWitness, v12);
  v14 = (char *)v23 - v13;
  v23[0] = a5;
  v15 = swift_getAssociatedTypeWitness();
  MEMORY[0x1E0C80A78](v15, v16);
  v17 = a2;
  swift_getAssociatedConformanceWitness();
  sub_1CA1F1318();
  sub_1CA1F12D0();
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  LOBYTE(a5) = sub_1CA1F09D0();
  (*(void (**)(char *, uint64_t))(v11 + 8))(v14, AssociatedTypeWitness);
  if ((a5 & 1) != 0)
  {
    v19 = sub_1CA1F0B50();
    SparseArray.init(arrayLiteral:)(v19, AssociatedTypeWitness, AssociatedConformanceWitness, v24);
  }
  else
  {
    v20 = (*(uint64_t (**)(uint64_t, uint64_t))(a4 + 32))(a3, a4);
    Vector.init(elements:)(v20, &v25);
    static Vector<A>.*= infix(_:_:)(&v25, v17, AssociatedTypeWitness, v23[0]);
    v21 = v25;
    v22 = (*(uint64_t (**)(uint64_t, uint64_t))(a4 + 40))(a3, a4);
    SparseArray.init(values:offsets:)(v21, v22, AssociatedTypeWitness, v24);
  }
}

double *= infix<A>(_:_:)(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v10;
  uint64_t AssociatedTypeWitness;
  uint64_t AssociatedConformanceWitness;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  double result;
  _QWORD v17[2];
  __int128 v18;

  v10 = a1[1];
  v17[0] = *a1;
  v17[1] = v10;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  v14 = type metadata accessor for SparseArray(0, AssociatedTypeWitness, AssociatedConformanceWitness, v13);
  v15 = MEMORY[0x1CAA4BB30](&protocol conformance descriptor for SparseArray<A>, v14);
  * infix<A, B>(_:_:)((uint64_t)v17, a2, v14, a3, v15, a4, a5);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  result = *(double *)&v18;
  *(_OWORD *)a1 = v18;
  return result;
}

uint64_t SparseArrayProtocol<>.scalingRows(with:)(__int128 *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t AssociatedTypeWitness;
  uint64_t AssociatedConformanceWitness;
  uint64_t v9;
  uint64_t (*v10)(uint64_t (*)(_OWORD *, uint64_t, uint64_t, uint64_t), _BYTE *, uint64_t, uint64_t, uint64_t);
  uint64_t v11;
  uint64_t v12;
  _QWORD v14[6];
  __int128 v15;
  _BYTE v16[16];
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  __int128 *v23;
  void (*v24)(uint64_t@<X0>, uint64_t@<X1>, _QWORD *@<X8>);
  _QWORD *v25;

  v15 = *a1;
  v14[2] = a2;
  v14[3] = a3;
  v14[4] = a4;
  v14[5] = a5;
  swift_getAssociatedTypeWitness();
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  v17 = a2;
  v18 = type metadata accessor for SparseArray(0, AssociatedTypeWitness, AssociatedConformanceWitness, v9);
  v19 = v18;
  v20 = a3;
  v21 = MEMORY[0x1CAA4BB30](&protocol conformance descriptor for SparseArray<A>, v18);
  v22 = MEMORY[0x1CAA4BB30](&protocol conformance descriptor for SparseArray<A>, v18);
  v23 = &v15;
  v24 = sub_1CA0AAF3C;
  v25 = v14;
  v10 = *(uint64_t (**)(uint64_t (*)(_OWORD *, uint64_t, uint64_t, uint64_t), _BYTE *, uint64_t, uint64_t, uint64_t))(a3 + 24);
  v12 = type metadata accessor for SparseArray(0, v18, v22, v11);
  return v10(sub_1CA0A840C, v16, v12, a2, a3);
}

uint64_t SparseArrayProtocol<>.scalingColumns(with:)@<X0>(__int128 *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t *a6@<X8>)
{
  uint64_t AssociatedTypeWitness;
  uint64_t AssociatedConformanceWitness;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  __int128 v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;

  SparseArrayProtocol<>.transposed()(a2, a3, a4, &v22);
  v20 = v22;
  v21 = v23;
  v19 = *a1;
  swift_getAssociatedTypeWitness();
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  v12 = type metadata accessor for SparseArray(255, AssociatedTypeWitness, AssociatedConformanceWitness, v11);
  v13 = MEMORY[0x1CAA4BB30](&protocol conformance descriptor for SparseArray<A>, v12);
  v15 = type metadata accessor for SparseArray(0, v12, v13, v14);
  v16 = MEMORY[0x1CAA4BB30](&protocol conformance descriptor for SparseArray<A>, v15);
  v17 = MEMORY[0x1CAA4BB30](&protocol conformance descriptor for SparseArray<A>, v12);
  SparseArrayProtocol<>.scalingRows(with:)(&v19, v15, v16, v17, a5);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v22 = v24;
  v23 = v25;
  SparseArrayProtocol<>.transposed()(v15, v16, v17, a6);
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

uint64_t SparseArrayProtocol.mapIntersection<A, B>(with:initialValue:update:combine:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  _QWORD v12[14];

  v12[2] = a7;
  v12[3] = a8;
  v12[4] = a9;
  v12[5] = a10;
  v12[6] = a11;
  v12[7] = a1;
  v12[8] = a2;
  v12[9] = a3;
  v12[10] = a4;
  v12[11] = a5;
  v12[12] = a6;
  return (*(uint64_t (**)(uint64_t (*)(_OWORD *), _QWORD *, uint64_t, uint64_t, uint64_t))(a10 + 24))(sub_1CA0AAFA8, v12, a9, a7, a10);
}

uint64_t sub_1CA0A9DD4(_OWORD *a1, _OWORD *a2, uint64_t a3, void (*a4)(uint64_t, char *), uint64_t a5, void (*a6)(char *, char *), uint64_t a7)
{
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  uint64_t AssociatedTypeWitness;
  uint64_t AssociatedConformanceWitness;
  uint64_t v16;
  uint64_t v17;
  _OWORD v21[9];

  v10 = a2[1];
  v21[4] = *a2;
  v21[5] = v10;
  v11 = a2[3];
  v21[6] = a2[2];
  v21[7] = v11;
  v12 = a1[1];
  v21[0] = *a1;
  v21[1] = v12;
  v13 = a1[3];
  v21[2] = a1[2];
  v21[3] = v13;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  v17 = type metadata accessor for SparseBuffer(0, AssociatedTypeWitness, AssociatedConformanceWitness, v16);
  return SparseBuffer.mapIntersection<A>(with:initialValue:update:combine:)((uint64_t)v21, a3, a4, a5, a6, a7, v17);
}

uint64_t SparseArrayProtocol.dotProduct<A>(with:add:multiply:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t (*v11)(uint64_t (*)(_OWORD *), _QWORD *, uint64_t, uint64_t, uint64_t);
  uint64_t AssociatedTypeWitness;
  _QWORD v14[12];

  v14[2] = a6;
  v14[3] = a7;
  v14[4] = a8;
  v14[5] = a9;
  v14[6] = a1;
  v14[7] = a2;
  v14[8] = a3;
  v14[9] = a4;
  v14[10] = a5;
  v11 = *(uint64_t (**)(uint64_t (*)(_OWORD *), _QWORD *, uint64_t, uint64_t, uint64_t))(a8 + 24);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  return v11(sub_1CA0AB020, v14, AssociatedTypeWitness, a6, a8);
}

uint64_t sub_1CA0A9F6C(_OWORD *a1, _OWORD *a2, void (*a3)(uint64_t, char *), uint64_t a4, void (*a5)(char *, char *), uint64_t a6)
{
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  uint64_t AssociatedTypeWitness;
  uint64_t AssociatedConformanceWitness;
  uint64_t v16;
  uint64_t v17;
  _OWORD v19[8];

  v10 = a2[1];
  v19[4] = *a2;
  v19[5] = v10;
  v11 = a2[3];
  v19[6] = a2[2];
  v19[7] = v11;
  v12 = a1[1];
  v19[0] = *a1;
  v19[1] = v12;
  v13 = a1[3];
  v19[2] = a1[2];
  v19[3] = v13;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  v17 = type metadata accessor for SparseBuffer(0, AssociatedTypeWitness, AssociatedConformanceWitness, v16);
  return SparseBuffer.dotProduct(with:add:multiply:)((uint64_t)v19, a3, a4, a5, a6, v17);
}

uint64_t SparseArrayProtocol<>.dotProduct<A>(with:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  _BYTE v8[16];
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _BYTE v15[16];
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t AssociatedTypeWitness;

  v16 = a2;
  v17 = a3;
  v18 = a4;
  v19 = a5;
  v20 = a6;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v9 = v16;
  v10 = v17;
  v11 = v18;
  v12 = v19;
  v13 = v20;
  v14 = AssociatedTypeWitness;
  return SparseArrayProtocol.dotProduct<A>(with:add:multiply:)(a1, (uint64_t)sub_1CA0AAE44, (uint64_t)v15, (uint64_t)sub_1CA0AAF38, (uint64_t)v8, v16, v17, v18, v19);
}

uint64_t SparseArrayProtocol.sparseKroneckerMap<A, B>(with:combine:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t (*v11)(uint64_t (*)(_OWORD *), _QWORD *, uint64_t, uint64_t, uint64_t);
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD v17[12];

  v17[2] = a4;
  v17[3] = a5;
  v17[4] = a6;
  v17[5] = a7;
  v17[6] = a8;
  v17[7] = a9;
  v17[8] = a1;
  v17[9] = a2;
  v17[10] = a3;
  v11 = *(uint64_t (**)(uint64_t (*)(_OWORD *), _QWORD *, uint64_t, uint64_t, uint64_t))(a7 + 24);
  v12 = type metadata accessor for SparseArray(255, a6, a9, a4);
  v13 = MEMORY[0x1CAA4BB30](&protocol conformance descriptor for SparseArray<A>, v12);
  v15 = type metadata accessor for SparseArray(0, v12, v13, v14);
  return v11(sub_1CA0AB1BC, v17, v15, a4, a7);
}

uint64_t sub_1CA0AA1D8(_OWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  __int128 v11;
  __int128 v12;
  uint64_t (*v13)(uint64_t (*)(uint64_t), _QWORD *, uint64_t, uint64_t, uint64_t);
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD v19[12];
  _OWORD v20[4];

  v11 = a1[1];
  v20[0] = *a1;
  v20[1] = v11;
  v12 = a1[3];
  v20[2] = a1[2];
  v20[3] = v12;
  v19[2] = a5;
  v19[3] = a6;
  v19[4] = a7;
  v19[5] = a8;
  v19[6] = a9;
  v19[7] = a10;
  v19[8] = v20;
  v19[9] = a3;
  v19[10] = a4;
  v13 = *(uint64_t (**)(uint64_t (*)(uint64_t), _QWORD *, uint64_t, uint64_t, uint64_t))(a9 + 24);
  v14 = type metadata accessor for SparseArray(255, a7, a10, a4);
  v15 = MEMORY[0x1CAA4BB30](&protocol conformance descriptor for SparseArray<A>, v14);
  v17 = type metadata accessor for SparseArray(0, v14, v15, v16);
  return v13(sub_1CA0AB9B8, v19, v17, a6, a9);
}

uint64_t sub_1CA0AA2A8@<X0>(uint64_t a1@<X6>, _QWORD *a2@<X8>, uint64_t a3, uint64_t a4)
{
  uint64_t AssociatedTypeWitness;
  uint64_t AssociatedConformanceWitness;
  uint64_t v7;
  uint64_t v8;

  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  v8 = type metadata accessor for SparseBuffer(0, AssociatedTypeWitness, AssociatedConformanceWitness, v7);
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  return SparseBuffer.sparseKroneckerMap<A, B>(with:combine:)(v8, a1, a4, a2);
}

uint64_t *sub_1CA0AA3F0(uint64_t *result, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v2 = *result;
  v3 = *a2;
  v4 = *a2 - *result;
  if (*a2 >= (unint64_t)*result)
  {
    if (*a2 - *result >= 0)
      return (uint64_t *)(v4 == 0);
  }
  else
  {
    if (v2 - v3 >= 0)
    {
      v4 = v3 - v2;
      return (uint64_t *)(v4 == 0);
    }
    __break(1u);
  }
  __break(1u);
  return result;
}

_QWORD *sub_1CA0AA428@<X0>(_QWORD *result@<X0>, uint64_t a2@<X8>)
{
  *(_QWORD *)a2 = *result;
  *(_BYTE *)(a2 + 8) = 0;
  return result;
}

void sub_1CA0AA438(_QWORD *a1@<X8>)
{
  _QWORD *v1;

  *a1 = *v1;
}

unint64_t sub_1CA0AA444(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_1CA1F1000();
  return sub_1CA0AA750(a1, v2);
}

unint64_t sub_1CA0AA474(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  sub_1CA1F13F0();
  sub_1CA1F0A30();
  v4 = sub_1CA1F1438();
  return sub_1CA0AA814(a1, a2, v4);
}

unint64_t sub_1CA0AA4D8(uint64_t a1)
{
  uint64_t v2;

  sub_1CA1F13F0();
  sub_1CA1F13FC();
  v2 = sub_1CA1F1438();
  return sub_1CA0AA8F4(a1, v2);
}

unint64_t sub_1CA0AA530(uint64_t a1)
{
  uint64_t v2;

  sub_1CA1F0808();
  sub_1CA0AB8D0((unint64_t *)&qword_1EF936F50, MEMORY[0x1E0CB0018]);
  v2 = sub_1CA1F0958();
  return sub_1CA0AA990(a1, v2);
}

unint64_t sub_1CA0AA594(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_1CA1F0E5C();
  return sub_1CA0AABE0(a1, v2, (unint64_t *)&qword_1EF93A320);
}

unint64_t sub_1CA0AA5E0(uint64_t a1)
{
  uint64_t v2;
  _BYTE v4[72];

  sub_1CA1F13F0();
  (*(void (**)(_BYTE *))(*(_QWORD *)a1 + 272))(v4);
  v2 = sub_1CA1F1438();
  return sub_1CA0AAAC8(a1, v2);
}

unint64_t sub_1CA0AA640(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_1CA1F0E5C();
  return sub_1CA0AABE0(a1, v2, (unint64_t *)&qword_1EF936F60);
}

unint64_t sub_1CA0AA68C(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_1CA1F13E4();
  return sub_1CA0AA8F4(a1, v2);
}

unint64_t sub_1CA0AA6C4(double a1)
{
  uint64_t v2;

  v2 = sub_1CA1F13E4();
  return sub_1CA0AACF0(v2, a1);
}

unint64_t sub_1CA0AA6F8(unint64_t a1)
{
  uint64_t v2;

  sub_1CA1F13F0();
  sub_1CA1F13FC();
  v2 = sub_1CA1F1438();
  return sub_1CA0AAD88(a1, v2);
}

unint64_t sub_1CA0AA750(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v6;
  char v7;
  _BYTE v9[40];

  v3 = -1 << *(_BYTE *)(v2 + 32);
  v4 = a2 & ~v3;
  if (((*(_QWORD *)(v2 + 64 + ((v4 >> 3) & 0xFFFFFFFFFFFFF8)) >> v4) & 1) != 0)
  {
    v6 = ~v3;
    do
    {
      sub_1CA0AB948(*(_QWORD *)(v2 + 48) + 40 * v4, (uint64_t)v9);
      v7 = MEMORY[0x1CAA4A714](v9, a1);
      sub_1CA0AB984((uint64_t)v9);
      if ((v7 & 1) != 0)
        break;
      v4 = (v4 + 1) & v6;
    }
    while (((*(_QWORD *)(v2 + 64 + ((v4 >> 3) & 0xFFFFFFFFFFFFF8)) >> v4) & 1) != 0);
  }
  return v4;
}

unint64_t sub_1CA0AA814(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v9;
  _QWORD *v10;
  BOOL v11;
  uint64_t v12;
  _QWORD *v13;
  BOOL v14;

  v4 = v3 + 64;
  v5 = -1 << *(_BYTE *)(v3 + 32);
  v6 = a3 & ~v5;
  if (((*(_QWORD *)(v3 + 64 + ((v6 >> 3) & 0xFFFFFFFFFFFFF8)) >> v6) & 1) != 0)
  {
    v9 = *(_QWORD *)(v3 + 48);
    v10 = (_QWORD *)(v9 + 16 * v6);
    v11 = *v10 == a1 && v10[1] == a2;
    if (!v11 && (sub_1CA1F12E8() & 1) == 0)
    {
      v12 = ~v5;
      do
      {
        v6 = (v6 + 1) & v12;
        if (((*(_QWORD *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFF8)) >> v6) & 1) == 0)
          break;
        v13 = (_QWORD *)(v9 + 16 * v6);
        v14 = *v13 == a1 && v13[1] == a2;
      }
      while (!v14 && (sub_1CA1F12E8() & 1) == 0);
    }
  }
  return v6;
}

unint64_t sub_1CA0AA8F4(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  unint64_t result;
  uint64_t v7;
  uint64_t v8;

  v4 = v2 + 64;
  v5 = -1 << *(_BYTE *)(v2 + 32);
  result = a2 & ~v5;
  if (((*(_QWORD *)(v2 + 64 + ((result >> 3) & 0xFFFFFFFFFFFFF8)) >> result) & 1) != 0)
  {
    v7 = *(_QWORD *)(v2 + 48);
    if (*(_QWORD *)(v7 + 8 * result) != a1)
    {
      v8 = ~v5;
      for (result = (result + 1) & v8;
            ((*(_QWORD *)(v4 + ((result >> 3) & 0xFFFFFFFFFFFFF8)) >> result) & 1) != 0;
            result = (result + 1) & v8)
      {
        if (*(_QWORD *)(v7 + 8 * result) == a1)
          break;
      }
    }
  }
  return result;
}

unint64_t sub_1CA0AA990(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  __n128 v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  void (*v15)(char *, unint64_t, uint64_t, __n128);
  char v16;
  _QWORD v18[2];

  v3 = v2;
  v18[1] = a1;
  v5 = sub_1CA1F0808();
  v6 = *(_QWORD *)(v5 - 8);
  v8.n128_f64[0] = MEMORY[0x1E0C80A78](v5, v7);
  v10 = (char *)v18 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = -1 << *(_BYTE *)(v3 + 32);
  v12 = a2 & ~v11;
  if (((*(_QWORD *)(v3 + 64 + ((v12 >> 3) & 0xFFFFFFFFFFFFF8)) >> v12) & 1) != 0)
  {
    v13 = ~v11;
    v14 = *(_QWORD *)(v6 + 72);
    v15 = *(void (**)(char *, unint64_t, uint64_t, __n128))(v6 + 16);
    do
    {
      v15(v10, *(_QWORD *)(v3 + 48) + v14 * v12, v5, v8);
      sub_1CA0AB8D0(&qword_1EF9374F0, MEMORY[0x1E0CB0028]);
      v16 = sub_1CA1F09D0();
      (*(void (**)(char *, uint64_t))(v6 + 8))(v10, v5);
      if ((v16 & 1) != 0)
        break;
      v12 = (v12 + 1) & v13;
    }
    while (((*(_QWORD *)(v3 + 64 + ((v12 >> 3) & 0xFFFFFFFFFFFFF8)) >> v12) & 1) != 0);
  }
  return v12;
}

unint64_t sub_1CA0AAAC8(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t i;
  uint64_t v6;
  uint64_t (*v8)(uint64_t);
  uint64_t v9;
  uint64_t (*v10)(uint64_t);
  char v11;

  v3 = v2 + 64;
  v4 = -1 << *(_BYTE *)(v2 + 32);
  i = a2 & ~v4;
  if (((*(_QWORD *)(v2 + 64 + ((i >> 3) & 0xFFFFFFFFFFFFF8)) >> i) & 1) != 0)
  {
    v6 = v2;
    v8 = *(uint64_t (**)(uint64_t))(**(_QWORD **)(*(_QWORD *)(v2 + 48) + 8 * i) + 280);
    swift_retain();
    LOBYTE(v8) = v8(a1);
    swift_release();
    if ((v8 & 1) == 0)
    {
      v9 = ~v4;
      for (i = (i + 1) & v9; ((*(_QWORD *)(v3 + ((i >> 3) & 0xFFFFFFFFFFFFF8)) >> i) & 1) != 0; i = (i + 1) & v9)
      {
        v10 = *(uint64_t (**)(uint64_t))(**(_QWORD **)(*(_QWORD *)(v6 + 48) + 8 * i) + 280);
        swift_retain();
        v11 = v10(a1);
        swift_release();
        if ((v11 & 1) != 0)
          break;
      }
    }
  }
  return i;
}

unint64_t sub_1CA0AABE0(uint64_t a1, uint64_t a2, unint64_t *a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t i;
  id v7;
  char v8;
  uint64_t v9;
  id v10;
  char v11;

  v4 = v3 + 64;
  v5 = -1 << *(_BYTE *)(v3 + 32);
  i = a2 & ~v5;
  if (((*(_QWORD *)(v3 + 64 + ((i >> 3) & 0xFFFFFFFFFFFFF8)) >> i) & 1) != 0)
  {
    sub_1CA0AB910(0, a3);
    v7 = *(id *)(*(_QWORD *)(v3 + 48) + 8 * i);
    v8 = sub_1CA1F0E68();

    if ((v8 & 1) == 0)
    {
      v9 = ~v5;
      for (i = (i + 1) & v9; ((*(_QWORD *)(v4 + ((i >> 3) & 0xFFFFFFFFFFFFF8)) >> i) & 1) != 0; i = (i + 1) & v9)
      {
        v10 = *(id *)(*(_QWORD *)(v3 + 48) + 8 * i);
        v11 = sub_1CA1F0E68();

        if ((v11 & 1) != 0)
          break;
      }
    }
  }
  return i;
}

unint64_t sub_1CA0AACF0(uint64_t a1, double a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t result;
  uint64_t v6;
  uint64_t v7;

  v3 = v2 + 64;
  v4 = -1 << *(_BYTE *)(v2 + 32);
  result = a1 & ~v4;
  if (((*(_QWORD *)(v2 + 64 + ((result >> 3) & 0xFFFFFFFFFFFFF8)) >> result) & 1) != 0)
  {
    v6 = *(_QWORD *)(v2 + 48);
    if (*(double *)(v6 + 8 * result) != a2)
    {
      v7 = ~v4;
      for (result = (result + 1) & v7;
            ((*(_QWORD *)(v3 + ((result >> 3) & 0xFFFFFFFFFFFFF8)) >> result) & 1) != 0;
            result = (result + 1) & v7)
      {
        if (*(double *)(v6 + 8 * result) == a2)
          break;
      }
    }
  }
  return result;
}

unint64_t sub_1CA0AAD88(unint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  unint64_t result;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;

  v4 = -1 << *(_BYTE *)(v2 + 32);
  result = a2 & ~v4;
  if (((*(_QWORD *)(v2 + 64 + ((result >> 3) & 0xFFFFFFFFFFFFF8)) >> result) & 1) == 0)
    return result;
  v6 = ~v4;
  while (1)
  {
    v7 = *(_QWORD *)(*(_QWORD *)(v2 + 48) + 8 * result);
    if (v7 > a1)
      break;
    v8 = a1 - v7;
    if ((uint64_t)(a1 - v7) < 0)
      goto LABEL_12;
LABEL_7:
    if (v8)
    {
      result = (result + 1) & v6;
      if (((*(_QWORD *)(v2 + 64 + ((result >> 3) & 0xFFFFFFFFFFFFF8)) >> result) & 1) != 0)
        continue;
    }
    return result;
  }
  if ((uint64_t)(v7 - a1) >= 0)
  {
    v8 = a1 - v7;
    goto LABEL_7;
  }
  __break(1u);
LABEL_12:
  __break(1u);
  return result;
}

uint64_t sub_1CA0AAE18()
{
  return swift_deallocObject();
}

double sub_1CA0AAE28@<D0>(_OWORD *a1@<X8>)
{
  return sub_1CA0A9180(a1);
}

uint64_t sub_1CA0AAE34(uint64_t result)
{
  if (result)
    return swift_release();
  return result;
}

uint64_t sub_1CA0AAE44(uint64_t a1, uint64_t a2)
{
  return sub_1CA0AB0E0(a1, a2, (uint64_t (*)(uint64_t, uint64_t, uint64_t, _QWORD))MEMORY[0x1E0DECC20]);
}

uint64_t sub_1CA0AAE50(uint64_t a1, uint64_t a2)
{
  return sub_1CA0AB0E0(a1, a2, MEMORY[0x1E0DECC28]);
}

uint64_t sub_1CA0AAE5C()
{
  swift_getAssociatedTypeWitness();
  return sub_1CA1F11EC();
}

void type metadata accessor for MatrixAxis(uint64_t a1)
{
  sub_1CA0AB888(a1, (unint64_t *)&unk_1EF936F40);
}

uint64_t sub_1CA0AAECC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t AssociatedTypeWitness;

  v2 = *(_QWORD *)(v0 + 32);
  v1 = *(_QWORD *)(v0 + 40);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  return SparseArrayProtocol<>.sum()(AssociatedTypeWitness, v2, v1);
}

void sub_1CA0AAF3C(uint64_t a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  uint64_t v3;
  uint64_t v7;
  uint64_t v8;
  uint64_t AssociatedTypeWitness;

  v8 = *(_QWORD *)(v3 + 32);
  v7 = *(_QWORD *)(v3 + 40);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  * infix<A>(_:_:)(a1, a2, AssociatedTypeWitness, v8, v7, a3);
}

uint64_t sub_1CA0AAFA8(_OWORD *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  _QWORD v10[4];
  __int128 v11;
  uint64_t v12;
  _OWORD *v13;
  __int128 v14;
  __int128 v15;
  uint64_t v16;
  _OWORD v17[4];

  v3 = *(_QWORD *)(v1 + 16);
  v2 = *(_QWORD *)(v1 + 24);
  v4 = *(_QWORD *)(v1 + 48);
  v5 = *(_QWORD *)(v1 + 96);
  v6 = a1[1];
  v17[0] = *a1;
  v17[1] = v6;
  v7 = a1[3];
  v17[2] = a1[2];
  v17[3] = v7;
  v10[2] = v3;
  v10[3] = v2;
  v11 = *(_OWORD *)(v1 + 32);
  v12 = v4;
  v13 = v17;
  v8 = *(_OWORD *)(v1 + 80);
  v14 = *(_OWORD *)(v1 + 64);
  v15 = v8;
  v16 = v5;
  return (*(uint64_t (**)(uint64_t (*)(_OWORD *), _QWORD *, _QWORD))(v4 + 24))(sub_1CA0ABA08, v10, v11);
}

uint64_t sub_1CA0AB020(_OWORD *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  __int128 v6;
  __int128 v7;
  uint64_t (*v8)(uint64_t (*)(_OWORD *), _QWORD *, uint64_t, uint64_t, uint64_t);
  uint64_t AssociatedTypeWitness;
  _QWORD v11[7];
  __int128 v12;
  __int128 v13;
  _OWORD v14[4];

  v2 = *(_QWORD *)(v1 + 16);
  v3 = *(_QWORD *)(v1 + 24);
  v4 = *(_QWORD *)(v1 + 32);
  v5 = *(_QWORD *)(v1 + 40);
  v6 = a1[1];
  v14[0] = *a1;
  v14[1] = v6;
  v7 = a1[3];
  v14[2] = a1[2];
  v14[3] = v7;
  v11[2] = v2;
  v11[3] = v3;
  v11[4] = v4;
  v11[5] = v5;
  v11[6] = v14;
  v12 = *(_OWORD *)(v1 + 56);
  v13 = *(_OWORD *)(v1 + 72);
  v8 = *(uint64_t (**)(uint64_t (*)(_OWORD *), _QWORD *, uint64_t, uint64_t, uint64_t))(v5 + 24);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  return v8(sub_1CA0AB9D4, v11, AssociatedTypeWitness, v3, v5);
}

uint64_t sub_1CA0AB0E0(uint64_t a1, uint64_t a2, uint64_t (*a3)(uint64_t, uint64_t, uint64_t, _QWORD))
{
  uint64_t v3;
  uint64_t v7;
  uint64_t AssociatedTypeWitness;

  v7 = *(_QWORD *)(v3 + 48);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  return a3(a1, a2, AssociatedTypeWitness, *(_QWORD *)(v7 + 8));
}

uint64_t sub_1CA0AB14C()
{
  swift_getAssociatedTypeWitness();
  return sub_1CA1F0CE8();
}

uint64_t sub_1CA0AB1BC(_OWORD *a1)
{
  uint64_t *v1;

  return sub_1CA0AA1D8(a1, v1[8], v1[9], v1[10], v1[2], v1[3], v1[4], v1[5], v1[6], v1[7]);
}

void sub_1CA0AB1F0()
{
  JUMPOUT(0x1CAA4BB30);
}

uint64_t sub_1CA0AB200(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1CA0AB324(a1, a2, a3, MEMORY[0x1E0DEB8B8]);
}

unint64_t sub_1CA0AB20C()
{
  unint64_t result;

  result = qword_1EF936EA8[0];
  if (!qword_1EF936EA8[0])
  {
    result = MEMORY[0x1CAA4BB30](MEMORY[0x1E0DEB440], MEMORY[0x1E0DEB418]);
    atomic_store(result, qword_1EF936EA8);
  }
  return result;
}

uint64_t sub_1CA0AB250(uint64_t a1)
{
  uint64_t v3;

  v3 = MEMORY[0x1CAA4BB30](&protocol conformance descriptor for SparseValues<A>);
  return MEMORY[0x1CAA4BB30](MEMORY[0x1E0DEDE40], a1, &v3);
}

void sub_1CA0AB298()
{
  JUMPOUT(0x1CAA4BB30);
}

uint64_t sub_1CA0AB2A8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1CA0AB324(a1, a2, a3, MEMORY[0x1E0DEB890]);
}

uint64_t sub_1CA0AB2B4(uint64_t a1)
{
  uint64_t v3;

  v3 = MEMORY[0x1CAA4BB30](&protocol conformance descriptor for SparseValues<A>);
  return MEMORY[0x1CAA4BB30](MEMORY[0x1E0DEDE28], a1, &v3);
}

void sub_1CA0AB2FC()
{
  JUMPOUT(0x1CAA4BB30);
}

uint64_t sub_1CA0AB30C()
{
  return MEMORY[0x1E0DEB430];
}

uint64_t sub_1CA0AB318(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1CA0AB324(a1, a2, a3, MEMORY[0x1E0DEB8C0]);
}

uint64_t sub_1CA0AB324(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  unint64_t v6;
  _QWORD v8[2];

  v6 = sub_1CA0AB20C();
  v8[0] = MEMORY[0x1E0DEB458];
  v8[1] = v6;
  return MEMORY[0x1CAA4BB30](a4, a1, v8);
}

void sub_1CA0AB36C()
{
  JUMPOUT(0x1CAA4BB30);
}

void sub_1CA0AB37C()
{
  JUMPOUT(0x1CAA4BB30);
}

uint64_t dispatch thunk of SparseArrayProtocol.withBuffer<A>(transform:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return (*(uint64_t (**)(void))(a5 + 24))();
}

uint64_t dispatch thunk of SparseArrayProtocol.sparseValues.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 32))();
}

uint64_t dispatch thunk of SparseArrayProtocol.sparseValueIndices.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 40))();
}

uint64_t sub_1CA0AB3B4()
{
  return swift_allocateGenericValueMetadata();
}

uint64_t sub_1CA0AB3BC()
{
  uint64_t result;
  unint64_t v1;

  result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t *sub_1CA0AB428(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v8;

  v3 = a1;
  v4 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v5 = *(_DWORD *)(v4 + 80);
  if (v5 <= 7 && *(_QWORD *)(v4 + 64) <= 0x18uLL && (*(_DWORD *)(v4 + 80) & 0x100000) == 0)
  {
    (*(void (**)(uint64_t *))(v4 + 16))(a1);
  }
  else
  {
    v8 = *a2;
    *v3 = *a2;
    v3 = (uint64_t *)(v8 + ((v5 + 16) & ~v5));
    swift_retain();
  }
  return v3;
}

uint64_t sub_1CA0AB498(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(*(_QWORD *)(*(_QWORD *)(a2 + 16) - 8) + 8))();
}

uint64_t sub_1CA0AB4A8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  (*(void (**)(void))(*(_QWORD *)(*(_QWORD *)(a3 + 16) - 8) + 16))();
  return a1;
}

uint64_t sub_1CA0AB4D8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  (*(void (**)(void))(*(_QWORD *)(*(_QWORD *)(a3 + 16) - 8) + 24))();
  return a1;
}

uint64_t sub_1CA0AB508(uint64_t a1, uint64_t a2, uint64_t a3)
{
  (*(void (**)(void))(*(_QWORD *)(*(_QWORD *)(a3 + 16) - 8) + 32))();
  return a1;
}

uint64_t sub_1CA0AB538(uint64_t a1, uint64_t a2, uint64_t a3)
{
  (*(void (**)(void))(*(_QWORD *)(*(_QWORD *)(a3 + 16) - 8) + 40))();
  return a1;
}

uint64_t sub_1CA0AB568(uint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4;
  unsigned int v5;
  unsigned int v6;
  uint64_t v7;
  char v8;
  int v9;
  unsigned int v10;
  int v11;

  if (!a2)
    return 0;
  v4 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v5 = *(_DWORD *)(v4 + 84);
  v6 = a2 - v5;
  if (a2 <= v5)
    goto LABEL_18;
  v7 = *(_QWORD *)(v4 + 64);
  v8 = 8 * v7;
  if (v7 <= 3)
  {
    v10 = ((v6 + ~(-1 << v8)) >> v8) + 1;
    if (HIWORD(v10))
    {
      v9 = *(_DWORD *)(a1 + v7);
      if (!v9)
        goto LABEL_18;
      goto LABEL_11;
    }
    if (v10 > 0xFF)
    {
      v9 = *(unsigned __int16 *)(a1 + v7);
      if (!*(_WORD *)(a1 + v7))
        goto LABEL_18;
      goto LABEL_11;
    }
    if (v10 < 2)
    {
LABEL_18:
      if (v5)
        return (*(uint64_t (**)(void))(v4 + 48))();
      return 0;
    }
  }
  v9 = *(unsigned __int8 *)(a1 + v7);
  if (!*(_BYTE *)(a1 + v7))
    goto LABEL_18;
LABEL_11:
  v11 = (v9 - 1) << v8;
  if (v7 > 3)
    v11 = 0;
  if (!(_DWORD)v7)
    return v5 + v11 + 1;
  if (v7 > 3)
    LODWORD(v7) = 4;
  return ((uint64_t (*)(void))((char *)&loc_1CA0AB618 + 4 * byte_1CA1F8CC0[(v7 - 1)]))();
}

void sub_1CA0AB668(_WORD *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v6;
  unsigned int v7;
  size_t v8;
  BOOL v9;
  unsigned int v10;
  unsigned int v11;
  unsigned int v12;
  unsigned int v13;
  int v14;

  v6 = *(_QWORD *)(*(_QWORD *)(a4 + 16) - 8);
  v7 = *(_DWORD *)(v6 + 84);
  v8 = *(_QWORD *)(v6 + 64);
  v9 = a3 >= v7;
  v10 = a3 - v7;
  if (v10 != 0 && v9)
  {
    if (v8 <= 3)
    {
      v13 = ((v10 + ~(-1 << (8 * v8))) >> (8 * v8)) + 1;
      if (HIWORD(v13))
      {
        v11 = 4u;
      }
      else if (v13 >= 0x100)
      {
        v11 = 2;
      }
      else
      {
        v11 = v13 > 1;
      }
    }
    else
    {
      v11 = 1u;
    }
  }
  else
  {
    v11 = 0u;
  }
  if (v7 < a2)
  {
    v12 = ~v7 + a2;
    if (v8 < 4)
    {
      if ((_DWORD)v8)
      {
        v14 = v12 & ~(-1 << (8 * v8));
        bzero(a1, v8);
        if ((_DWORD)v8 == 3)
        {
          *a1 = v14;
          *((_BYTE *)a1 + 2) = BYTE2(v14);
        }
        else if ((_DWORD)v8 == 2)
        {
          *a1 = v14;
        }
        else
        {
          *(_BYTE *)a1 = v14;
        }
      }
    }
    else
    {
      bzero(a1, *(_QWORD *)(v6 + 64));
      *(_DWORD *)a1 = v12;
    }
    __asm { BR              X10 }
  }
  __asm { BR              X11 }
}

uint64_t getEnumTagSinglePayload for SeededRandomNumberGenerator(uint64_t a1, int a2)
{
  if (a2 && *(_BYTE *)(a1 + 16))
    return (*(_DWORD *)a1 + 1);
  else
    return 0;
}

uint64_t storeEnumTagSinglePayload for SeededRandomNumberGenerator(uint64_t result, int a2, int a3)
{
  char v3;

  if (a2)
  {
    *(_QWORD *)result = (a2 - 1);
    *(_QWORD *)(result + 8) = 0;
    if (!a3)
      return result;
    v3 = 1;
  }
  else
  {
    if (!a3)
      return result;
    v3 = 0;
  }
  *(_BYTE *)(result + 16) = v3;
  return result;
}

void type metadata accessor for KGElementIdentifierSetIndex(uint64_t a1)
{
  sub_1CA0AB888(a1, (unint64_t *)&unk_1EF936F30);
}

void type metadata accessor for KGElementIdentifier(uint64_t a1)
{
  sub_1CA0AB888(a1, &qword_1ED852B08);
}

void sub_1CA0AB888(uint64_t a1, unint64_t *a2)
{
  unint64_t ForeignTypeMetadata;
  uint64_t v4;

  if (!*a2)
  {
    ForeignTypeMetadata = swift_getForeignTypeMetadata();
    if (!v4)
      atomic_store(ForeignTypeMetadata, a2);
  }
}

uint64_t sub_1CA0AB8D0(unint64_t *a1, uint64_t a2)
{
  uint64_t result;
  uint64_t v5;

  result = *a1;
  if (!result)
  {
    v5 = sub_1CA1F0808();
    result = MEMORY[0x1CAA4BB30](a2, v5);
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_1CA0AB910(uint64_t a1, unint64_t *a2)
{
  uint64_t result;

  result = *a2;
  if (!*a2)
  {
    objc_opt_self();
    result = swift_getObjCClassMetadata();
    atomic_store(result, a2);
  }
  return result;
}

uint64_t sub_1CA0AB948(uint64_t a1, uint64_t a2)
{
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(MEMORY[0x1E0DEC198] - 8) + 16))(a2, a1);
  return a2;
}

uint64_t sub_1CA0AB984(uint64_t a1)
{
  (*(void (**)(void))(*(_QWORD *)(MEMORY[0x1E0DEC198] - 8) + 8))();
  return a1;
}

uint64_t sub_1CA0AB9B8(uint64_t a1)
{
  return sub_1CA0ABA60(a1, (uint64_t (*)(uint64_t, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_1CA0AA2A8);
}

uint64_t sub_1CA0AB9D4(_OWORD *a1)
{
  uint64_t v1;

  return sub_1CA0A9F6C(a1, *(_OWORD **)(v1 + 48), *(void (**)(uint64_t, char *))(v1 + 56), *(_QWORD *)(v1 + 64), *(void (**)(char *, char *))(v1 + 72), *(_QWORD *)(v1 + 80));
}

uint64_t sub_1CA0ABA08(_OWORD *a1)
{
  uint64_t v1;

  return sub_1CA0A9DD4(a1, *(_OWORD **)(v1 + 56), *(_QWORD *)(v1 + 64), *(void (**)(uint64_t, char *))(v1 + 72), *(_QWORD *)(v1 + 80), *(void (**)(char *, char *))(v1 + 88), *(_QWORD *)(v1 + 96));
}

uint64_t sub_1CA0ABA44(uint64_t a1)
{
  return sub_1CA0ABA60(a1, (uint64_t (*)(uint64_t, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_1CA0A84C0);
}

uint64_t sub_1CA0ABA60(uint64_t a1, uint64_t (*a2)(uint64_t, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))
{
  _QWORD *v2;

  return a2(a1, v2[8], v2[9], v2[10], v2[2], v2[3], v2[4], v2[5], v2[6], v2[7]);
}

uint64_t sub_1CA0ABA98@<X0>(_OWORD *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;

  return sub_1CA0A829C(a1, *(_OWORD **)(v2 + 48), *(_QWORD *)(v2 + 56), *(_QWORD *)(v2 + 64), a2);
}

ValueMetadata *type metadata accessor for AnyNode()
{
  return &type metadata for AnyNode;
}

unint64_t sub_1CA0ABAE0(uint64_t a1)
{
  return sub_1CA0ABC20(a1, &qword_1EF936FE8);
}

unint64_t sub_1CA0ABAEC(uint64_t a1)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t result;
  char v10;
  uint64_t *v11;
  uint64_t v12;
  BOOL v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  __int128 v17;

  if (!*(_QWORD *)(a1 + 16))
  {
    v3 = (_QWORD *)MEMORY[0x1E0DEE9E0];
    goto LABEL_9;
  }
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EF936FD0);
  v2 = sub_1CA1F1264();
  v3 = (_QWORD *)v2;
  v4 = *(_QWORD *)(a1 + 16);
  if (!v4)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v3;
  }
  v5 = v2 + 64;
  v6 = a1 + 32;
  swift_retain();
  while (1)
  {
    sub_1CA0AFC78(v6, (uint64_t)&v15);
    v7 = v15;
    v8 = v16;
    result = sub_1CA0AA474(v15, v16);
    if ((v10 & 1) != 0)
      break;
    *(_QWORD *)(v5 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << result;
    v11 = (uint64_t *)(v3[6] + 16 * result);
    *v11 = v7;
    v11[1] = v8;
    result = (unint64_t)sub_1CA0AFCC0(&v17, (_OWORD *)(v3[7] + 32 * result));
    v12 = v3[2];
    v13 = __OFADD__(v12, 1);
    v14 = v12 + 1;
    if (v13)
      goto LABEL_11;
    v3[2] = v14;
    v6 += 48;
    if (!--v4)
    {
      swift_release();
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

unint64_t sub_1CA0ABC14(uint64_t a1)
{
  return sub_1CA0ABC20(a1, (uint64_t *)&unk_1EF937050);
}

unint64_t sub_1CA0ABC20(uint64_t a1, uint64_t *a2)
{
  _QWORD *v3;
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t result;
  char v10;
  uint64_t *v11;
  uint64_t v12;
  BOOL v13;
  uint64_t v14;

  if (!*(_QWORD *)(a1 + 16))
  {
    v3 = (_QWORD *)MEMORY[0x1E0DEE9E0];
    goto LABEL_9;
  }
  __swift_instantiateConcreteTypeFromMangledName(a2);
  v3 = (_QWORD *)sub_1CA1F1264();
  v4 = *(_QWORD *)(a1 + 16);
  if (!v4)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v3;
  }
  swift_retain();
  v5 = (uint64_t *)(a1 + 48);
  while (1)
  {
    v6 = *(v5 - 2);
    v7 = *(v5 - 1);
    v8 = *v5;
    swift_bridgeObjectRetain();
    swift_unknownObjectRetain();
    result = sub_1CA0AA474(v6, v7);
    if ((v10 & 1) != 0)
      break;
    *(_QWORD *)((char *)v3 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
    v11 = (uint64_t *)(v3[6] + 16 * result);
    *v11 = v6;
    v11[1] = v7;
    *(_QWORD *)(v3[7] + 8 * result) = v8;
    v12 = v3[2];
    v13 = __OFADD__(v12, 1);
    v14 = v12 + 1;
    if (v13)
      goto LABEL_11;
    v3[2] = v14;
    v5 += 3;
    if (!--v4)
    {
      swift_release();
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

unint64_t sub_1CA0ABD34(uint64_t a1)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t result;
  char v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  BOOL v16;
  uint64_t v17;
  __int128 v18;

  if (!*(_QWORD *)(a1 + 16))
  {
    v2 = (_QWORD *)MEMORY[0x1E0DEE9E0];
    goto LABEL_9;
  }
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EF937070);
  v2 = (_QWORD *)sub_1CA1F1264();
  v3 = *(_QWORD *)(a1 + 16);
  if (!v3)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v2;
  }
  swift_retain();
  v4 = (uint64_t *)(a1 + 48);
  while (1)
  {
    v5 = *(v4 - 2);
    v6 = *(v4 - 1);
    v7 = *v4;
    v18 = *(_OWORD *)(v4 + 1);
    v8 = *((_BYTE *)v4 + 24);
    v9 = v4[4];
    v10 = v4[5];
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_retain();
    sub_1CA0AFF28(v9);
    result = sub_1CA0AA474(v5, v6);
    if ((v12 & 1) != 0)
      break;
    *(_QWORD *)((char *)v2 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
    v13 = (uint64_t *)(v2[6] + 16 * result);
    *v13 = v5;
    v13[1] = v6;
    v14 = v2[7] + 48 * result;
    *(_QWORD *)v14 = v7;
    *(_OWORD *)(v14 + 8) = v18;
    *(_BYTE *)(v14 + 24) = v8;
    *(_QWORD *)(v14 + 32) = v9;
    *(_QWORD *)(v14 + 40) = v10;
    v15 = v2[2];
    v16 = __OFADD__(v15, 1);
    v17 = v15 + 1;
    if (v16)
      goto LABEL_11;
    v2[2] = v17;
    v4 += 8;
    if (!--v3)
    {
      swift_release();
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

unint64_t sub_1CA0ABEA0(uint64_t a1)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t result;
  char v9;
  uint64_t *v10;
  uint64_t v11;
  BOOL v12;
  uint64_t v13;

  if (!*(_QWORD *)(a1 + 16))
  {
    v2 = (_QWORD *)MEMORY[0x1E0DEE9E0];
    goto LABEL_9;
  }
  __swift_instantiateConcreteTypeFromMangledName(&qword_1ED8528E0);
  v2 = (_QWORD *)sub_1CA1F1264();
  v3 = *(_QWORD *)(a1 + 16);
  if (!v3)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v2;
  }
  swift_retain();
  v4 = (uint64_t *)(a1 + 48);
  while (1)
  {
    v5 = *(v4 - 2);
    v6 = *(v4 - 1);
    v7 = *v4;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    result = sub_1CA0AA474(v5, v6);
    if ((v9 & 1) != 0)
      break;
    *(_QWORD *)((char *)v2 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
    v10 = (uint64_t *)(v2[6] + 16 * result);
    *v10 = v5;
    v10[1] = v6;
    *(_QWORD *)(v2[7] + 8 * result) = v7;
    v11 = v2[2];
    v12 = __OFADD__(v11, 1);
    v13 = v11 + 1;
    if (v12)
      goto LABEL_11;
    v2[2] = v13;
    v4 += 3;
    if (!--v3)
    {
      swift_release();
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

unint64_t sub_1CA0ABFB8(uint64_t a1)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  id v6;
  unint64_t result;
  char v8;
  uint64_t v9;
  uint64_t v10;
  BOOL v11;
  uint64_t v12;

  if (!*(_QWORD *)(a1 + 16))
  {
    v2 = (_QWORD *)MEMORY[0x1E0DEE9E0];
    goto LABEL_9;
  }
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EF93A330);
  v2 = (_QWORD *)sub_1CA1F1264();
  v3 = *(_QWORD *)(a1 + 16);
  if (!v3)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v2;
  }
  swift_retain();
  v4 = (uint64_t *)(a1 + 40);
  while (1)
  {
    v5 = *v4;
    v6 = (id)*(v4 - 1);
    result = sub_1CA0ABABC((uint64_t)v6);
    if ((v8 & 1) != 0)
      break;
    *(_QWORD *)((char *)v2 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
    v9 = 8 * result;
    *(_QWORD *)(v2[6] + v9) = v6;
    *(_QWORD *)(v2[7] + v9) = v5;
    v10 = v2[2];
    v11 = __OFADD__(v10, 1);
    v12 = v10 + 1;
    if (v11)
      goto LABEL_11;
    v2[2] = v12;
    v4 += 2;
    if (!--v3)
    {
      swift_release();
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

unint64_t sub_1CA0AC0C0(uint64_t a1)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  id v6;
  unint64_t result;
  char v8;
  uint64_t v9;
  uint64_t v10;
  BOOL v11;
  uint64_t v12;

  if (!*(_QWORD *)(a1 + 16))
  {
    v2 = (_QWORD *)MEMORY[0x1E0DEE9E0];
    goto LABEL_9;
  }
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_1EF937060);
  v2 = (_QWORD *)sub_1CA1F1264();
  v3 = *(_QWORD *)(a1 + 16);
  if (!v3)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v2;
  }
  swift_retain();
  v4 = (uint64_t *)(a1 + 40);
  while (1)
  {
    v5 = *v4;
    v6 = (id)*(v4 - 1);
    swift_bridgeObjectRetain();
    result = sub_1CA0AA594((uint64_t)v6);
    if ((v8 & 1) != 0)
      break;
    *(_QWORD *)((char *)v2 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
    v9 = 8 * result;
    *(_QWORD *)(v2[6] + v9) = v6;
    *(_QWORD *)(v2[7] + v9) = v5;
    v10 = v2[2];
    v11 = __OFADD__(v10, 1);
    v12 = v10 + 1;
    if (v11)
      goto LABEL_11;
    v2[2] = v12;
    v4 += 2;
    if (!--v3)
    {
      swift_release();
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

uint64_t DirectedBinaryAdjacency.adjacency.getter@<X0>(_QWORD *a1@<X8>)
{
  _QWORD *v1;

  *a1 = *v1;
  return swift_bridgeObjectRetain();
}

KnowledgeGraphKit::DirectedBinaryAdjacency __swiftcall DirectedBinaryAdjacency.init()()
{
  KnowledgeGraphKit::DirectedBinaryAdjacency *v0;
  KnowledgeGraphKit::DirectedBinaryAdjacency *v1;
  KnowledgeGraphKit::DirectedBinaryAdjacency result;

  v1 = v0;
  result.adjacency.targetsBySource._rawValue = (void *)sub_1CA0AECA8(MEMORY[0x1E0DEE9D8]);
  v1->adjacency.targetsBySource._rawValue = result.adjacency.targetsBySource._rawValue;
  return result;
}

KnowledgeGraphKit::DirectedBinaryAdjacency __swiftcall DirectedBinaryAdjacency.init(adjacency:)(KnowledgeGraphKit::DirectedBinaryAdjacency adjacency)
{
  _QWORD *v1;

  *v1 = *(_QWORD *)adjacency.adjacency.targetsBySource._rawValue;
  return adjacency;
}

void DirectedBinaryAdjacency.sources.getter(uint64_t *a1@<X8>)
{
  uint64_t v2;

  v2 = swift_bridgeObjectRetain();
  sub_1CA0ADC38(v2, a1);
}

uint64_t DirectedBinaryAdjacency.targets.getter@<X0>(uint64_t *a1@<X8>)
{
  uint64_t *v1;
  uint64_t v3;
  id v4;
  uint64_t v5;
  uint64_t result;
  uint64_t v7;
  uint64_t v8;

  v3 = *v1;
  v4 = objc_msgSend(objc_allocWithZone((Class)KGMutableElementIdentifierSet), sel_init);
  __swift_instantiateConcreteTypeFromMangledName(&qword_1ED852AF0);
  v5 = swift_allocObject();
  *(_QWORD *)(v5 + 16) = v4;
  v7 = v3;
  v8 = v5;
  result = sub_1CA0AC2B4(&v7, (uint64_t)&v8);
  *a1 = v8;
  return result;
}

uint64_t sub_1CA0AC2B4(uint64_t *a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  int64_t v8;
  uint64_t result;
  int64_t v10;
  unint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  int64_t v15;
  uint64_t v16;
  id v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;

  v3 = *a1;
  v4 = *a1 + 64;
  v5 = 1 << *(_BYTE *)(*a1 + 32);
  v6 = -1;
  if (v5 < 64)
    v6 = ~(-1 << v5);
  v7 = v6 & *(_QWORD *)(*a1 + 64);
  v8 = (unint64_t)(v5 + 63) >> 6;
  result = swift_bridgeObjectRetain();
  v10 = 0;
  v19 = MEMORY[0x1E0DEE9B8] + 8;
  while (1)
  {
    if (v7)
    {
      v11 = __clz(__rbit64(v7));
      v7 &= v7 - 1;
      v12 = v11 | (v10 << 6);
      goto LABEL_21;
    }
    v13 = v10 + 1;
    if (__OFADD__(v10, 1))
    {
      __break(1u);
      goto LABEL_25;
    }
    if (v13 >= v8)
      return swift_release();
    v14 = *(_QWORD *)(v4 + 8 * v13);
    ++v10;
    if (!v14)
    {
      v10 = v13 + 1;
      if (v13 + 1 >= v8)
        return swift_release();
      v14 = *(_QWORD *)(v4 + 8 * v10);
      if (!v14)
      {
        v10 = v13 + 2;
        if (v13 + 2 >= v8)
          return swift_release();
        v14 = *(_QWORD *)(v4 + 8 * v10);
        if (!v14)
          break;
      }
    }
LABEL_20:
    v7 = (v14 - 1) & v14;
    v12 = __clz(__rbit64(v14)) + (v10 << 6);
LABEL_21:
    v16 = *(_QWORD *)(*(_QWORD *)(v3 + 56) + 8 * v12);
    swift_retain();
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    {
      v17 = *(id *)(*(_QWORD *)a2 + 16);
      objc_msgSend(v17, sel_mutableCopy);
      sub_1CA1F0F04();
      swift_unknownObjectRelease();
      sub_1CA0AB910(0, (unint64_t *)&qword_1ED852B18);
      swift_dynamicCast();

      __swift_instantiateConcreteTypeFromMangledName(&qword_1ED852AF0);
      v18 = swift_allocObject();
      *(_QWORD *)(v18 + 16) = v20;
      *(_QWORD *)a2 = v18;
      swift_release();
    }
    objc_msgSend(*(id *)(*(_QWORD *)a2 + 16), sel_unionWithIdentifierSet_, *(_QWORD *)(v16 + 16), v19);
    result = swift_release();
  }
  v15 = v13 + 3;
  if (v15 >= v8)
    return swift_release();
  v14 = *(_QWORD *)(v4 + 8 * v15);
  if (v14)
  {
    v10 = v15;
    goto LABEL_20;
  }
  while (1)
  {
    v10 = v15 + 1;
    if (__OFADD__(v15, 1))
      break;
    if (v10 >= v8)
      return swift_release();
    v14 = *(_QWORD *)(v4 + 8 * v10);
    ++v15;
    if (v14)
      goto LABEL_20;
  }
LABEL_25:
  __break(1u);
  return result;
}

uint64_t DirectedBinaryAdjacency.enumerateTargetsBySource(with:)(void (*a1)(uint64_t *, uint64_t *, char *))
{
  uint64_t *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  int64_t v8;
  int64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  int64_t v14;
  unint64_t v15;
  int64_t v16;
  uint64_t v18;
  uint64_t v19;
  char v20;
  uint64_t v21;

  v21 = *MEMORY[0x1E0C80C00];
  v3 = *v1;
  v20 = 0;
  v4 = v3 + 64;
  v5 = 1 << *(_BYTE *)(v3 + 32);
  v6 = -1;
  if (v5 < 64)
    v6 = ~(-1 << v5);
  v7 = v6 & *(_QWORD *)(v3 + 64);
  v8 = (unint64_t)(v5 + 63) >> 6;
  swift_bridgeObjectRetain();
  v9 = 0;
  while (v7)
  {
    v10 = __clz(__rbit64(v7));
    v7 &= v7 - 1;
    v11 = v10 | (v9 << 6);
LABEL_5:
    v12 = 8 * v11;
    v13 = *(_QWORD *)(*(_QWORD *)(v3 + 48) + v12);
    v18 = *(_QWORD *)(*(_QWORD *)(v3 + 56) + v12);
    v19 = v13;
    swift_retain();
    a1(&v19, &v18, &v20);
    swift_release();
    if (v20 == 1)
      return swift_release();
  }
  v14 = v9 + 1;
  if (__OFADD__(v9, 1))
  {
    __break(1u);
    goto LABEL_23;
  }
  if (v14 >= v8)
    return swift_release();
  v15 = *(_QWORD *)(v4 + 8 * v14);
  ++v9;
  if (v15)
    goto LABEL_20;
  v9 = v14 + 1;
  if (v14 + 1 >= v8)
    return swift_release();
  v15 = *(_QWORD *)(v4 + 8 * v9);
  if (v15)
    goto LABEL_20;
  v9 = v14 + 2;
  if (v14 + 2 >= v8)
    return swift_release();
  v15 = *(_QWORD *)(v4 + 8 * v9);
  if (v15)
  {
LABEL_20:
    v7 = (v15 - 1) & v15;
    v11 = __clz(__rbit64(v15)) + (v9 << 6);
    goto LABEL_5;
  }
  v16 = v14 + 3;
  if (v16 < v8)
  {
    v15 = *(_QWORD *)(v4 + 8 * v16);
    if (!v15)
    {
      while (1)
      {
        v9 = v16 + 1;
        if (__OFADD__(v16, 1))
          break;
        if (v9 >= v8)
          return swift_release();
        v15 = *(_QWORD *)(v4 + 8 * v9);
        ++v16;
        if (v15)
          goto LABEL_20;
      }
LABEL_23:
      __break(1u);
    }
    v9 = v16;
    goto LABEL_20;
  }
  return swift_release();
}

uint64_t DirectedBinaryAdjacency.sourcesCount.getter()
{
  uint64_t v0;

  return *(_QWORD *)(*(_QWORD *)v0 + 16);
}

uint64_t sub_1CA0AC69C@<X0>(uint64_t *a1@<X0>, unint64_t *a2@<X8>)
{
  uint64_t v3;
  unint64_t v4;
  void *v5;
  id v6;
  uint64_t v7;
  uint64_t v8;
  id v9;
  uint64_t v10;
  uint64_t result;
  id v12;
  id v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;

  v3 = *a1;
  v4 = sub_1CA0AECA8(MEMORY[0x1E0DEE9D8]);
  v16 = v4;
  v5 = *(void **)(v3 + 16);
  swift_retain();
  v6 = objc_msgSend(v5, sel_startIndex);
  v8 = v7;
  if (v6 != objc_msgSend(*(id *)(v3 + 16), sel_endIndex))
  {
    do
    {
      v9 = objc_msgSend(*(id *)(v3 + 16), sel_indexAfterIndex_, v6, v8);
      v8 = v10;
      v12 = v6;
      v13 = v6;
      ElementIdentifierTupleSet.insert(_:)(&v15, &v14, (uint64_t *)&v13, (uint64_t *)&v12);
      v6 = v9;
    }
    while (v9 != objc_msgSend(*(id *)(v3 + 16), sel_endIndex));
    v4 = v16;
  }
  result = swift_release();
  *a2 = v4;
  return result;
}

uint64_t DirectedBinaryAdjacency.intersectingTargets(with:)@<X0>(uint64_t *a1@<X0>, unint64_t *a2@<X8>)
{
  return sub_1CA0ACC28(a1, (void (*)(uint64_t *, unint64_t *, uint64_t))sub_1CA0AEDA4, a2);
}

unint64_t DirectedBinaryAdjacency.setTargets(_:for:)(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;

  v2 = *a1;
  v4 = *a2;
  v5 = v2;
  swift_retain();
  return ElementIdentifierTupleSet.subscript.setter(&v5, &v4);
}

uint64_t DirectedBinaryAdjacency.intersectingSources(with:)@<X0>(uint64_t *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t *v2;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  void *v7;
  id v8;
  uint64_t v9;
  uint64_t v10;
  char **v11;
  uint64_t result;
  char **v13;
  id v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  char v18;
  uint64_t v19;
  id v20;
  id v21;
  unsigned __int8 v22;
  unsigned __int8 v23;
  char v24;
  char v25;
  unint64_t v26;
  char v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  char **v31;
  char isUniquelyReferenced_nonNull_native;
  char v33;
  unint64_t v34;
  uint64_t v35;
  _BOOL8 v36;
  uint64_t v37;
  char v38;
  unint64_t v39;
  char v40;
  uint64_t v41;
  uint64_t v42;
  BOOL v43;
  uint64_t v44;
  _QWORD *v45;
  uint64_t v46;
  id v47;
  _QWORD *v48;
  _QWORD *v49;

  v4 = *a1;
  v5 = *v2;
  v6 = (_QWORD *)sub_1CA0AECA8(MEMORY[0x1E0DEE9D8]);
  v49 = v6;
  if ((uint64_t)objc_msgSend(*(id *)(v4 + 16), sel_count) >= *(_QWORD *)(v5 + 16))
  {
    v48 = (_QWORD *)v5;
    swift_retain();
    sub_1CA0AF024((uint64_t *)&v48, v4, (uint64_t *)&v49);
    result = swift_release();
    v6 = v49;
    goto LABEL_5;
  }
  v45 = a2;
  v7 = *(void **)(v4 + 16);
  swift_retain();
  v8 = objc_msgSend(v7, sel_startIndex);
  v10 = v9;
  v11 = &selRef_visualStringWithName_;
  if (v8 == objc_msgSend(*(id *)(v4 + 16), sel_endIndex))
  {
LABEL_3:
    result = swift_release();
    a2 = v45;
LABEL_5:
    *a2 = v6;
    return result;
  }
  v13 = &selRef_visualStringWithName_;
  v14 = v8;
  while (1)
  {
    v47 = objc_msgSend(*(id *)(v4 + 16), v13[375], v14, v10);
    v10 = v16;
    if (*(_QWORD *)(v5 + 16) && (v17 = sub_1CA0AA4D8((uint64_t)v8), (v18 & 1) != 0))
    {
      v19 = *(_QWORD *)(*(_QWORD *)(v5 + 56) + 8 * v17);
      swift_retain();
    }
    else
    {
      v20 = objc_allocWithZone((Class)KGMutableElementIdentifierSet);
      swift_bridgeObjectRetain();
      v21 = objc_msgSend(v20, sel_init);
      __swift_instantiateConcreteTypeFromMangledName(&qword_1ED852AF0);
      v19 = swift_allocObject();
      *(_QWORD *)(v19 + 16) = v21;
      swift_bridgeObjectRelease();
    }
    v22 = objc_msgSend(*(id *)(v19 + 16), sel_isEmpty);
    v23 = v22;
    if (v6[2])
    {
      sub_1CA0AA4D8((uint64_t)v8);
      if ((v23 & 1) != 0)
      {
        v25 = v24;
        swift_release();
        if ((v25 & 1) != 0)
        {
          v26 = sub_1CA0AA4D8((uint64_t)v8);
          if ((v27 & 1) != 0)
          {
            v28 = v26;
            v48 = v6;
            if (!swift_isUniquelyReferenced_nonNull_native())
            {
              sub_1CA0EF024();
              v6 = v48;
            }
            sub_1CA0F18F4(v28, (uint64_t)v6);
            swift_release();
            swift_bridgeObjectRelease();
          }
        }
        goto LABEL_9;
      }
    }
    else if ((v22 & 1) != 0)
    {
      swift_release();
      goto LABEL_9;
    }
    v46 = v10;
    v29 = v5;
    v30 = v4;
    v31 = v11;
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    v48 = v6;
    v34 = sub_1CA0AA4D8((uint64_t)v8);
    v35 = v6[2];
    v36 = (v33 & 1) == 0;
    v37 = v35 + v36;
    if (__OFADD__(v35, v36))
      break;
    v38 = v33;
    if (v6[3] >= v37)
    {
      if ((isUniquelyReferenced_nonNull_native & 1) != 0)
      {
        v6 = v48;
        if ((v33 & 1) == 0)
          goto LABEL_30;
      }
      else
      {
        sub_1CA0EF024();
        v6 = v48;
        if ((v38 & 1) == 0)
          goto LABEL_30;
      }
    }
    else
    {
      sub_1CA0EAC60(v37, isUniquelyReferenced_nonNull_native);
      v39 = sub_1CA0AA4D8((uint64_t)v8);
      if ((v38 & 1) != (v40 & 1))
        goto LABEL_36;
      v34 = v39;
      v6 = v48;
      if ((v38 & 1) == 0)
      {
LABEL_30:
        v6[(v34 >> 6) + 8] |= 1 << v34;
        v41 = 8 * v34;
        *(_QWORD *)(v6[6] + v41) = v8;
        *(_QWORD *)(v6[7] + v41) = v19;
        v42 = v6[2];
        v43 = __OFADD__(v42, 1);
        v44 = v42 + 1;
        if (v43)
          goto LABEL_35;
        v6[2] = v44;
        goto LABEL_8;
      }
    }
    v15 = v6[7];
    swift_release();
    *(_QWORD *)(v15 + 8 * v34) = v19;
LABEL_8:
    swift_bridgeObjectRelease();
    v11 = v31;
    v4 = v30;
    v5 = v29;
    v10 = v46;
    v13 = &selRef_visualStringWithName_;
LABEL_9:
    v14 = v47;
    v8 = v47;
    if (v47 == objc_msgSend(*(id *)(v4 + 16), v11[374]))
      goto LABEL_3;
  }
  __break(1u);
LABEL_35:
  __break(1u);
LABEL_36:
  result = sub_1CA1F1360();
  __break(1u);
  return result;
}

uint64_t DirectedBinaryAdjacency.targets(forSourceIdentifier:)@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t *v2;
  uint64_t v4;
  unint64_t v5;
  char v6;
  uint64_t result;
  id v8;
  id v9;
  uint64_t v10;

  v4 = *v2;
  if (*(_QWORD *)(v4 + 16) && (v5 = sub_1CA0AA4D8(*a1), (v6 & 1) != 0))
  {
    *a2 = *(_QWORD *)(*(_QWORD *)(v4 + 56) + 8 * v5);
    return swift_retain();
  }
  else
  {
    v8 = objc_allocWithZone((Class)KGMutableElementIdentifierSet);
    swift_bridgeObjectRetain();
    v9 = objc_msgSend(v8, sel_init);
    __swift_instantiateConcreteTypeFromMangledName(&qword_1ED852AF0);
    v10 = swift_allocObject();
    *(_QWORD *)(v10 + 16) = v9;
    result = swift_bridgeObjectRelease();
    *a2 = v10;
  }
  return result;
}

uint64_t DirectedBinaryAdjacency.subtractingTargets(with:)@<X0>(uint64_t *a1@<X0>, unint64_t *a2@<X8>)
{
  return sub_1CA0ACC28(a1, (void (*)(uint64_t *, unint64_t *, uint64_t))sub_1CA0AF3DC, a2);
}

uint64_t sub_1CA0ACC28@<X0>(uint64_t *a1@<X0>, void (*a2)(uint64_t *, unint64_t *, uint64_t)@<X1>, unint64_t *a3@<X8>)
{
  uint64_t *v3;
  uint64_t v6;
  uint64_t result;
  uint64_t v8;
  unint64_t v9;

  v6 = *a1;
  v8 = *v3;
  v9 = sub_1CA0AECA8(MEMORY[0x1E0DEE9D8]);
  swift_retain();
  a2(&v8, &v9, v6);
  result = swift_release();
  *a3 = v9;
  return result;
}

uint64_t DirectedBinaryAdjacency.subtractingSources(with:)@<X0>(uint64_t *a1@<X0>, unint64_t *a2@<X8>)
{
  uint64_t *v2;
  uint64_t v4;
  uint64_t result;
  uint64_t v6;
  unint64_t v7;

  v4 = *a1;
  v6 = *v2;
  v7 = sub_1CA0AECA8(MEMORY[0x1E0DEE9D8]);
  swift_retain();
  sub_1CA0AF650(&v6, v4, (uint64_t *)&v7);
  result = swift_release();
  *a2 = v7;
  return result;
}

KnowledgeGraphKit::DirectedBinaryAdjacency __swiftcall DirectedBinaryAdjacency.joinOnTargets(_:)(KnowledgeGraphKit::DirectedBinaryAdjacency a1)
{
  _QWORD *v1;
  uint64_t *v2;
  _QWORD *v3;
  uint64_t v4;
  KnowledgeGraphKit::DirectedBinaryAdjacency result;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;

  v3 = v1;
  v4 = *v2;
  v6 = *(_QWORD *)a1.adjacency.targetsBySource._rawValue;
  v7 = v4;
  static ElementIdentifierTupleSet.joinOnTargets(_:_:)(&v7, &v6, &v8);
  *v3 = v8;
  return result;
}

Swift::Bool __swiftcall DirectedBinaryAdjacency.contains(source:target:)(KnowledgeGraphKit::ElementIdentifier source, KnowledgeGraphKit::ElementIdentifier target)
{
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  char v6;

  v3 = *v2;
  if (*(_QWORD *)(v3 + 16)
    && (v4 = *(_QWORD *)target.rawValue, v5 = sub_1CA0AA4D8(*(_QWORD *)source.rawValue), (v6 & 1) != 0))
  {
    return objc_msgSend(*(id *)(*(_QWORD *)(*(_QWORD *)(v3 + 56) + 8 * v5) + 16), sel_containsIdentifier_, v4);
  }
  else
  {
    return 0;
  }
}

uint64_t DirectedBinaryAdjacency.targets(forSources:)@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t *v2;
  uint64_t v4;
  uint64_t v5;
  void *v6;
  id v7;
  id v8;
  uint64_t result;
  unint64_t v10;
  char v11;
  id v12;
  uint64_t v13;
  void *v14;
  id v15;
  uint64_t v16;
  uint64_t v17;
  id v18;
  id v19;
  uint64_t v20;
  id v21;
  id v22;
  uint64_t v23;
  unint64_t v24;
  char v25;
  uint64_t v26;
  uint64_t *v27;
  uint64_t v28;
  uint64_t v29[4];
  uint64_t v30;

  v4 = *a1;
  v5 = *v2;
  if (objc_msgSend(*(id *)(*a1 + 16), sel_count) == (id)1)
  {
    v6 = *(void **)(v4 + 16);
    swift_retain();
    v7 = objc_msgSend(v6, sel_startIndex);
    v8 = objc_msgSend(*(id *)(v4 + 16), sel_endIndex);
    result = swift_release();
    if (v7 == v8)
    {
      __break(1u);
    }
    else if (*(_QWORD *)(v5 + 16) && (v10 = sub_1CA0AA4D8((uint64_t)v7), (v11 & 1) != 0))
    {
      *a2 = *(_QWORD *)(*(_QWORD *)(v5 + 56) + 8 * v10);
      return swift_retain();
    }
    else
    {
      v18 = objc_allocWithZone((Class)KGMutableElementIdentifierSet);
      swift_bridgeObjectRetain();
      v19 = objc_msgSend(v18, sel_init);
      __swift_instantiateConcreteTypeFromMangledName(&qword_1ED852AF0);
      v20 = swift_allocObject();
      *(_QWORD *)(v20 + 16) = v19;
      result = swift_bridgeObjectRelease();
      *a2 = v20;
    }
  }
  else
  {
    v12 = objc_msgSend(objc_allocWithZone((Class)KGMutableElementIdentifierSet), sel_init);
    __swift_instantiateConcreteTypeFromMangledName(&qword_1ED852AF0);
    v13 = swift_allocObject();
    *(_QWORD *)(v13 + 16) = v12;
    v30 = v13;
    if ((uint64_t)objc_msgSend(*(id *)(v4 + 16), sel_count) >= *(_QWORD *)(v5 + 16))
    {
      v29[0] = v5;
      swift_retain();
      sub_1CA0AFA08(v29, v4, (uint64_t)&v30);
      result = swift_release();
      v13 = v30;
    }
    else
    {
      v27 = a2;
      v14 = *(void **)(v4 + 16);
      swift_retain();
      v15 = objc_msgSend(v14, sel_startIndex);
      v17 = v16;
      if (v15 != objc_msgSend(*(id *)(v4 + 16), sel_endIndex))
      {
        v21 = v15;
        do
        {
          v21 = objc_msgSend(*(id *)(v4 + 16), sel_indexAfterIndex_, v21, v17);
          v17 = v23;
          if (*(_QWORD *)(v5 + 16))
          {
            v24 = sub_1CA0AA4D8((uint64_t)v15);
            if ((v25 & 1) != 0)
            {
              v26 = *(_QWORD *)(*(_QWORD *)(v5 + 56) + 8 * v24);
              swift_retain_n();
              if (swift_isUniquelyReferenced_nonNull_native())
              {
                v13 = v30;
              }
              else
              {
                v22 = *(id *)(v13 + 16);
                objc_msgSend(v22, sel_mutableCopy);
                sub_1CA1F0F04();
                swift_unknownObjectRelease();
                sub_1CA0AB910(0, (unint64_t *)&qword_1ED852B18);
                swift_dynamicCast();

                v13 = swift_allocObject();
                *(_QWORD *)(v13 + 16) = v28;
                v30 = v13;
                swift_release();
              }
              objc_msgSend(*(id *)(v13 + 16), sel_unionWithIdentifierSet_, *(_QWORD *)(v26 + 16));
              swift_release_n();
            }
          }
          v15 = v21;
        }
        while (v21 != objc_msgSend(*(id *)(v4 + 16), sel_endIndex));
      }
      result = swift_release();
      a2 = v27;
    }
    *a2 = v13;
  }
  return result;
}

KnowledgeGraphKit::DirectedBinaryAdjacency __swiftcall DirectedBinaryAdjacency.transposed()()
{
  unint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  KnowledgeGraphKit::DirectedBinaryAdjacency result;
  int64_t v7;
  unint64_t v8;
  unint64_t v9;
  int64_t v10;
  unint64_t v11;
  int64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;
  id v17;
  uint64_t v18;
  uint64_t v19;
  id v20;
  uint64_t v21;
  unint64_t *v22;
  uint64_t v23;
  int64_t v24;
  uint64_t v25;
  id v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;

  v22 = v0;
  v2 = *v1;
  v29 = sub_1CA0AECA8(MEMORY[0x1E0DEE9D8]);
  v23 = v2 + 64;
  v3 = 1 << *(_BYTE *)(v2 + 32);
  v4 = -1;
  if (v3 < 64)
    v4 = ~(-1 << v3);
  v5 = v4 & *(_QWORD *)(v2 + 64);
  v24 = (unint64_t)(v3 + 63) >> 6;
  result.adjacency.targetsBySource._rawValue = (void *)swift_bridgeObjectRetain();
  v7 = 0;
  while (1)
  {
    if (v5)
    {
      v8 = __clz(__rbit64(v5));
      v5 &= v5 - 1;
      v9 = v8 | (v7 << 6);
      goto LABEL_21;
    }
    v10 = v7 + 1;
    if (__OFADD__(v7, 1))
    {
      __break(1u);
      goto LABEL_26;
    }
    if (v10 >= v24)
      goto LABEL_24;
    v11 = *(_QWORD *)(v23 + 8 * v10);
    ++v7;
    if (!v11)
    {
      v7 = v10 + 1;
      if (v10 + 1 >= v24)
        goto LABEL_24;
      v11 = *(_QWORD *)(v23 + 8 * v7);
      if (!v11)
      {
        v7 = v10 + 2;
        if (v10 + 2 >= v24)
          goto LABEL_24;
        v11 = *(_QWORD *)(v23 + 8 * v7);
        if (!v11)
          break;
      }
    }
LABEL_20:
    v5 = (v11 - 1) & v11;
    v9 = __clz(__rbit64(v11)) + (v7 << 6);
LABEL_21:
    v13 = 8 * v9;
    v14 = *(_QWORD *)(*(_QWORD *)(v2 + 48) + v13);
    v15 = *(_QWORD *)(*(_QWORD *)(v2 + 56) + v13);
    v16 = *(void **)(v15 + 16);
    swift_retain();
    v17 = objc_msgSend(v16, sel_startIndex);
    v19 = v18;
    if (v17 != objc_msgSend(*(id *)(v15 + 16), sel_endIndex))
    {
      do
      {
        v20 = objc_msgSend(*(id *)(v15 + 16), sel_indexAfterIndex_, v17, v19, v22);
        v19 = v21;
        v25 = v14;
        v26 = v17;
        ElementIdentifierTupleSet.insert(_:)(&v28, &v27, (uint64_t *)&v26, &v25);
        v17 = v20;
      }
      while (v20 != objc_msgSend(*(id *)(v15 + 16), sel_endIndex));
    }
    result.adjacency.targetsBySource._rawValue = (void *)swift_release();
  }
  v12 = v10 + 3;
  if (v12 >= v24)
  {
LABEL_24:
    result.adjacency.targetsBySource._rawValue = (void *)swift_release();
    *v22 = v29;
    return result;
  }
  v11 = *(_QWORD *)(v23 + 8 * v12);
  if (v11)
  {
    v7 = v12;
    goto LABEL_20;
  }
  while (1)
  {
    v7 = v12 + 1;
    if (__OFADD__(v12, 1))
      break;
    if (v7 >= v24)
      goto LABEL_24;
    v11 = *(_QWORD *)(v23 + 8 * v7);
    ++v12;
    if (v11)
      goto LABEL_20;
  }
LABEL_26:
  __break(1u);
  return result;
}

KnowledgeGraphKit::DirectedBinaryAdjacency __swiftcall DirectedBinaryAdjacency.subtracting(_:)(KnowledgeGraphKit::DirectedBinaryAdjacency a1)
{
  _QWORD *v1;
  uint64_t *v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  KnowledgeGraphKit::DirectedBinaryAdjacency result;
  uint64_t v7;
  uint64_t v8;

  v3 = v1;
  v4 = *(_QWORD *)a1.adjacency.targetsBySource._rawValue;
  v5 = *v2;
  v7 = v4;
  v8 = v5;
  swift_bridgeObjectRetain();
  ElementIdentifierTupleSet.subtract(_:)((KnowledgeGraphKit::ElementIdentifierTupleSet)&v7);
  *v3 = v8;
  return result;
}

KnowledgeGraphKit::DirectedBinaryAdjacency __swiftcall DirectedBinaryAdjacency.union(with:)(KnowledgeGraphKit::DirectedBinaryAdjacency with)
{
  _QWORD *v1;
  uint64_t *v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  KnowledgeGraphKit::DirectedBinaryAdjacency result;
  uint64_t v7;
  uint64_t v8;

  v3 = v1;
  v4 = *(_QWORD *)with.adjacency.targetsBySource._rawValue;
  v5 = *v2;
  v7 = v4;
  v8 = v5;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  result.adjacency.targetsBySource._rawValue = (void *)ElementIdentifierTupleSet.formUnion(_:)(&v7);
  *v3 = v8;
  return result;
}

uint64_t DirectedBinaryAdjacency.targets(minCount:)@<X0>(unint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  void (*v7)(_QWORD *@<X8>);
  int64_t v8;
  uint64_t v9;
  char **v10;
  unint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  int64_t v15;
  uint64_t v16;
  void *v17;
  id v18;
  uint64_t v19;
  uint64_t v20;
  id v21;
  uint64_t v22;
  uint64_t v23;
  char isUniquelyReferenced_nonNull_native;
  char v25;
  unint64_t v26;
  uint64_t v27;
  _BOOL8 v28;
  uint64_t v29;
  char v30;
  unint64_t v31;
  char v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  BOOL v36;
  uint64_t v37;
  uint64_t v38;
  BOOL v39;
  uint64_t v40;
  id v41;
  uint64_t v42;
  char v43;
  char v44;
  unint64_t v45;
  uint64_t v46;
  _BOOL8 v47;
  uint64_t v48;
  char v49;
  unint64_t v50;
  char v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  BOOL v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  id v59;
  uint64_t v60;
  int64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  unint64_t v65;
  int64_t v66;
  __objc2_prot_list **p_base_prots;
  unint64_t v68;
  unint64_t v69;
  int64_t v70;
  unint64_t v71;
  int64_t v72;
  uint64_t v73;
  id v74;
  uint64_t v75;
  id v76;
  uint64_t result;
  uint64_t v80;
  uint64_t v81;
  int64_t v82;
  int64_t v83;
  uint64_t v84;

  v3 = *v2;
  v81 = *v2 + 64;
  v4 = 1 << *(_BYTE *)(*v2 + 32);
  v5 = -1;
  if (v4 < 64)
    v5 = ~(-1 << v4);
  v6 = v5 & *(_QWORD *)(*v2 + 64);
  v82 = (unint64_t)(v4 + 63) >> 6;
  swift_bridgeObjectRetain();
  v7 = 0;
  v8 = 0;
  v9 = MEMORY[0x1E0DEE9E0];
  v10 = &selRef_visualStringWithName_;
  v80 = v3;
  while (1)
  {
    if (v6)
    {
      v11 = __clz(__rbit64(v6));
      v6 &= v6 - 1;
      v12 = v11 | (v8 << 6);
    }
    else
    {
      v13 = v8 + 1;
      if (__OFADD__(v8, 1))
        goto LABEL_84;
      if (v13 >= v82)
      {
LABEL_57:
        swift_release();
        v59 = objc_msgSend(objc_allocWithZone((Class)KGMutableElementIdentifierSet), sel_init);
        __swift_instantiateConcreteTypeFromMangledName(&qword_1ED852AF0);
        v60 = swift_allocObject();
        v61 = 0;
        *(_QWORD *)(v60 + 16) = v59;
        v62 = v9 + 64;
        v63 = 1 << *(_BYTE *)(v9 + 32);
        v64 = -1;
        if (v63 < 64)
          v64 = ~(-1 << v63);
        v65 = v64 & *(_QWORD *)(v9 + 64);
        v66 = (unint64_t)(v63 + 63) >> 6;
        p_base_prots = (__objc2_prot_list **)(&KGStoredGraph__metaData + 40);
        while (1)
        {
          if (v65)
          {
            v68 = __clz(__rbit64(v65));
            v65 &= v65 - 1;
            v69 = v68 | (v61 << 6);
          }
          else
          {
            v70 = v61 + 1;
            if (__OFADD__(v61, 1))
              goto LABEL_85;
            if (v70 >= v66)
            {
LABEL_80:
              swift_release();
              result = sub_1CA0AAE34((uint64_t)v7);
              *a2 = v60;
              return result;
            }
            v71 = *(_QWORD *)(v62 + 8 * v70);
            ++v61;
            if (!v71)
            {
              v61 = v70 + 1;
              if (v70 + 1 >= v66)
                goto LABEL_80;
              v71 = *(_QWORD *)(v62 + 8 * v61);
              if (!v71)
              {
                v61 = v70 + 2;
                if (v70 + 2 >= v66)
                  goto LABEL_80;
                v71 = *(_QWORD *)(v62 + 8 * v61);
                if (!v71)
                {
                  v72 = v70 + 3;
                  if (v72 >= v66)
                    goto LABEL_80;
                  v71 = *(_QWORD *)(v62 + 8 * v72);
                  if (!v71)
                  {
                    while (1)
                    {
                      v61 = v72 + 1;
                      if (__OFADD__(v72, 1))
                        goto LABEL_86;
                      if (v61 >= v66)
                        goto LABEL_80;
                      v71 = *(_QWORD *)(v62 + 8 * v61);
                      ++v72;
                      if (v71)
                        goto LABEL_76;
                    }
                  }
                  v61 = v72;
                }
              }
            }
LABEL_76:
            v65 = (v71 - 1) & v71;
            v69 = __clz(__rbit64(v71)) + (v61 << 6);
          }
          if (*(_QWORD *)(*(_QWORD *)(v9 + 56) + 8 * v69) >= a1)
          {
            v73 = *(_QWORD *)(*(_QWORD *)(v9 + 48) + 8 * v69);
            if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
            {
              v74 = *(id *)(v60 + 16);
              objc_msgSend(v74, sel_mutableCopy);
              sub_1CA1F0F04();
              swift_unknownObjectRelease();
              sub_1CA0AB910(0, (unint64_t *)&qword_1ED852B18);
              swift_dynamicCast();

              v75 = swift_allocObject();
              *(_QWORD *)(v75 + 16) = v84;
              p_base_prots = &KGStoredGraph__metaData.base_prots;
              swift_release();
              v60 = v75;
            }
            v76 = *(id *)(v60 + 16);
            objc_msgSend(v76, (SEL)p_base_prots[230], v73);
            objc_msgSend(v76, sel_addIdentifier_, v73);

          }
        }
      }
      v14 = *(_QWORD *)(v81 + 8 * v13);
      ++v8;
      if (!v14)
      {
        v8 = v13 + 1;
        if (v13 + 1 >= v82)
          goto LABEL_57;
        v14 = *(_QWORD *)(v81 + 8 * v8);
        if (!v14)
        {
          v8 = v13 + 2;
          if (v13 + 2 >= v82)
            goto LABEL_57;
          v14 = *(_QWORD *)(v81 + 8 * v8);
          if (!v14)
          {
            v8 = v13 + 3;
            if (v13 + 3 >= v82)
              goto LABEL_57;
            v14 = *(_QWORD *)(v81 + 8 * v8);
            if (!v14)
            {
              v15 = v13 + 4;
              if (v15 >= v82)
                goto LABEL_57;
              v14 = *(_QWORD *)(v81 + 8 * v15);
              if (!v14)
              {
                while (1)
                {
                  v8 = v15 + 1;
                  if (__OFADD__(v15, 1))
                    goto LABEL_87;
                  if (v8 >= v82)
                    goto LABEL_57;
                  v14 = *(_QWORD *)(v81 + 8 * v8);
                  ++v15;
                  if (v14)
                    goto LABEL_23;
                }
              }
              v8 = v15;
            }
          }
        }
      }
LABEL_23:
      v6 = (v14 - 1) & v14;
      v12 = __clz(__rbit64(v14)) + (v8 << 6);
    }
    v16 = *(_QWORD *)(*(_QWORD *)(v3 + 56) + 8 * v12);
    v17 = *(void **)(v16 + 16);
    swift_retain_n();
    v18 = objc_msgSend(v17, v10[373]);
    v20 = v19;
    if (v18 != objc_msgSend(*(id *)(v16 + 16), sel_endIndex))
      break;
LABEL_5:
    swift_release_n();
  }
  v83 = v8;
  v21 = objc_msgSend(*(id *)(v16 + 16), sel_indexAfterIndex_, v18, v20);
  v23 = v22;
  sub_1CA0AAE34((uint64_t)v7);
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  v26 = sub_1CA0AA4D8((uint64_t)v18);
  v27 = *(_QWORD *)(v9 + 16);
  v28 = (v25 & 1) == 0;
  v29 = v27 + v28;
  if (__OFADD__(v27, v28))
    goto LABEL_81;
  v30 = v25;
  if (*(_QWORD *)(v9 + 24) >= v29)
  {
    if ((isUniquelyReferenced_nonNull_native & 1) == 0)
      sub_1CA0EF1C4();
  }
  else
  {
    sub_1CA0EAF38(v29, isUniquelyReferenced_nonNull_native);
    v31 = sub_1CA0AA4D8((uint64_t)v18);
    if ((v30 & 1) != (v32 & 1))
      goto LABEL_88;
    v26 = v31;
  }
  swift_bridgeObjectRelease();
  if ((v30 & 1) != 0)
  {
    swift_bridgeObjectRetain();
  }
  else
  {
    *(_QWORD *)(v9 + 8 * (v26 >> 6) + 64) |= 1 << v26;
    v33 = 8 * v26;
    *(_QWORD *)(*(_QWORD *)(v9 + 48) + v33) = v18;
    *(_QWORD *)(*(_QWORD *)(v9 + 56) + v33) = 0;
    v34 = *(_QWORD *)(v9 + 16);
    v35 = v34 + 1;
    v36 = __OFADD__(v34, 1);
    swift_bridgeObjectRetain();
    if (v36)
      goto LABEL_83;
    *(_QWORD *)(v9 + 16) = v35;
  }
  v37 = *(_QWORD *)(v9 + 56);
  swift_bridgeObjectRelease();
  v38 = *(_QWORD *)(v37 + 8 * v26);
  v39 = __CFADD__(v38, 1);
  v40 = v38 + 1;
  if (v39)
    goto LABEL_82;
  *(_QWORD *)(v37 + 8 * v26) = v40;
  if (v21 == objc_msgSend(*(id *)(v16 + 16), sel_endIndex))
  {
LABEL_4:
    v7 = sub_1CA0ADAD8;
    v3 = v80;
    v10 = &selRef_visualStringWithName_;
    v8 = v83;
    goto LABEL_5;
  }
  v41 = v21;
  while (1)
  {
    v41 = objc_msgSend(*(id *)(v16 + 16), sel_indexAfterIndex_, v41, v23);
    v23 = v42;
    sub_1CA0AAE34((uint64_t)sub_1CA0ADAD8);
    v43 = swift_isUniquelyReferenced_nonNull_native();
    v45 = sub_1CA0AA4D8((uint64_t)v21);
    v46 = *(_QWORD *)(v9 + 16);
    v47 = (v44 & 1) == 0;
    v48 = v46 + v47;
    if (__OFADD__(v46, v47))
      break;
    v49 = v44;
    if (*(_QWORD *)(v9 + 24) >= v48)
    {
      if ((v43 & 1) == 0)
        sub_1CA0EF1C4();
    }
    else
    {
      sub_1CA0EAF38(v48, v43);
      v50 = sub_1CA0AA4D8((uint64_t)v21);
      if ((v49 & 1) != (v51 & 1))
        goto LABEL_88;
      v45 = v50;
    }
    swift_bridgeObjectRelease();
    if ((v49 & 1) != 0)
    {
      swift_bridgeObjectRetain();
    }
    else
    {
      *(_QWORD *)(v9 + 8 * (v45 >> 6) + 64) |= 1 << v45;
      v52 = 8 * v45;
      *(_QWORD *)(*(_QWORD *)(v9 + 48) + v52) = v21;
      *(_QWORD *)(*(_QWORD *)(v9 + 56) + v52) = 0;
      v53 = *(_QWORD *)(v9 + 16);
      v54 = v53 + 1;
      v55 = __OFADD__(v53, 1);
      swift_bridgeObjectRetain();
      if (v55)
        goto LABEL_83;
      *(_QWORD *)(v9 + 16) = v54;
    }
    v56 = *(_QWORD *)(v9 + 56);
    swift_bridgeObjectRelease();
    v57 = *(_QWORD *)(v56 + 8 * v45);
    v39 = __CFADD__(v57, 1);
    v58 = v57 + 1;
    if (v39)
      goto LABEL_82;
    *(_QWORD *)(v56 + 8 * v45) = v58;
    v21 = v41;
    if (v41 == objc_msgSend(*(id *)(v16 + 16), sel_endIndex))
      goto LABEL_4;
  }
LABEL_81:
  __break(1u);
LABEL_82:
  __break(1u);
LABEL_83:
  __break(1u);
LABEL_84:
  __break(1u);
LABEL_85:
  __break(1u);
LABEL_86:
  __break(1u);
LABEL_87:
  __break(1u);
LABEL_88:
  result = sub_1CA1F1360();
  __break(1u);
  return result;
}

void sub_1CA0ADAD8(_QWORD *a1@<X8>)
{
  *a1 = 0;
}

Swift::Void __swiftcall DirectedBinaryAdjacency.insert(source:target:)(KnowledgeGraphKit::ElementIdentifier source, KnowledgeGraphKit::ElementIdentifier target)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v2 = *(_QWORD *)source.rawValue;
  v3 = *(_QWORD *)target.rawValue;
  v4 = v2;
  ElementIdentifierTupleSet.insert(_:)(&v6, &v5, &v4, &v3);
}

Swift::Void __swiftcall DirectedBinaryAdjacency.remove(source:target:)(KnowledgeGraphKit::ElementIdentifier source, KnowledgeGraphKit::ElementIdentifier target)
{
  uint64_t v2;
  Swift::tuple_KnowledgeGraphKit_ElementIdentifier_KnowledgeGraphKit_ElementIdentifier v3;
  uint64_t v4;
  uint64_t v5;

  v2 = *(_QWORD *)source.rawValue;
  v4 = *(_QWORD *)target.rawValue;
  v5 = v2;
  v3._0.rawValue = (Swift::UInt)&v5;
  v3._1.rawValue = (Swift::UInt)&v4;
  ElementIdentifierTupleSet.remove(_:)(v3);
}

Swift::Void __swiftcall DirectedBinaryAdjacency.formUnion(_:)(KnowledgeGraphKit::DirectedBinaryAdjacency a1)
{
  uint64_t v1;

  v1 = *(_QWORD *)a1.adjacency.targetsBySource._rawValue;
  swift_bridgeObjectRetain();
  ElementIdentifierTupleSet.formUnion(_:)(&v1);
}

Swift::Void __swiftcall DirectedBinaryAdjacency.subtract(_:)(KnowledgeGraphKit::DirectedBinaryAdjacency a1)
{
  uint64_t v1;

  v1 = *(_QWORD *)a1.adjacency.targetsBySource._rawValue;
  ElementIdentifierTupleSet.subtract(_:)((KnowledgeGraphKit::ElementIdentifierTupleSet)&v1);
}

Swift::Void __swiftcall DirectedBinaryAdjacency.removeTargets(for:)(KnowledgeGraphKit::ElementIdentifier a1)
{
  uint64_t *v1;
  uint64_t *v2;
  unint64_t v3;
  char v4;
  unint64_t v5;
  int isUniquelyReferenced_nonNull_native;
  uint64_t v7;
  uint64_t v8;

  v2 = v1;
  v3 = sub_1CA0AA4D8(*(_QWORD *)a1.rawValue);
  if ((v4 & 1) != 0)
  {
    v5 = v3;
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    v7 = *v1;
    v8 = *v2;
    *v2 = 0x8000000000000000;
    if (!isUniquelyReferenced_nonNull_native)
    {
      sub_1CA0EF024();
      v7 = v8;
    }
    sub_1CA0F18F4(v5, v7);
    *v2 = v7;
    swift_release();
    swift_bridgeObjectRelease();
  }
}

void sub_1CA0ADC38(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  id v3;
  uint64_t v4;
  int64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  id v10;
  unint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  int64_t v15;
  uint64_t v16;
  id v17;
  uint64_t v18;
  int64_t v20;
  uint64_t v21;

  v3 = objc_msgSend(objc_allocWithZone((Class)KGMutableElementIdentifierSet), sel_init);
  __swift_instantiateConcreteTypeFromMangledName(&qword_1ED852AF0);
  v4 = swift_allocObject();
  v5 = 0;
  *(_QWORD *)(v4 + 16) = v3;
  v6 = a1 + 64;
  v7 = 1 << *(_BYTE *)(a1 + 32);
  v8 = -1;
  if (v7 < 64)
    v8 = ~(-1 << v7);
  v9 = v8 & *(_QWORD *)(a1 + 64);
  v20 = (unint64_t)(v7 + 63) >> 6;
  while (1)
  {
    if (v9)
    {
      v11 = __clz(__rbit64(v9));
      v9 &= v9 - 1;
      v12 = v11 | (v5 << 6);
      goto LABEL_23;
    }
    v13 = v5 + 1;
    if (__OFADD__(v5, 1))
    {
      __break(1u);
      goto LABEL_27;
    }
    if (v13 >= v20)
      goto LABEL_25;
    v14 = *(_QWORD *)(v6 + 8 * v13);
    ++v5;
    if (!v14)
    {
      v5 = v13 + 1;
      if (v13 + 1 >= v20)
        goto LABEL_25;
      v14 = *(_QWORD *)(v6 + 8 * v5);
      if (!v14)
      {
        v5 = v13 + 2;
        if (v13 + 2 >= v20)
          goto LABEL_25;
        v14 = *(_QWORD *)(v6 + 8 * v5);
        if (!v14)
        {
          v5 = v13 + 3;
          if (v13 + 3 >= v20)
            goto LABEL_25;
          v14 = *(_QWORD *)(v6 + 8 * v5);
          if (!v14)
            break;
        }
      }
    }
LABEL_22:
    v9 = (v14 - 1) & v14;
    v12 = __clz(__rbit64(v14)) + (v5 << 6);
LABEL_23:
    v16 = *(_QWORD *)(*(_QWORD *)(a1 + 48) + 8 * v12);
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    {
      v17 = *(id *)(v4 + 16);
      objc_msgSend(v17, sel_mutableCopy);
      sub_1CA1F0F04();
      swift_unknownObjectRelease();
      sub_1CA0AB910(0, (unint64_t *)&qword_1ED852B18);
      swift_dynamicCast();

      v18 = swift_allocObject();
      *(_QWORD *)(v18 + 16) = v21;
      swift_release();
      v4 = v18;
    }
    v10 = *(id *)(v4 + 16);
    objc_msgSend(v10, sel_containsIdentifier_, v16);
    objc_msgSend(v10, sel_addIdentifier_, v16);

  }
  v15 = v13 + 4;
  if (v15 >= v20)
  {
LABEL_25:
    swift_release();
    *a2 = v4;
    return;
  }
  v14 = *(_QWORD *)(v6 + 8 * v15);
  if (v14)
  {
    v5 = v15;
    goto LABEL_22;
  }
  while (1)
  {
    v5 = v15 + 1;
    if (__OFADD__(v15, 1))
      break;
    if (v5 >= v20)
      goto LABEL_25;
    v14 = *(_QWORD *)(v6 + 8 * v5);
    ++v15;
    if (v14)
      goto LABEL_22;
  }
LABEL_27:
  __break(1u);
}

uint64_t sub_1CA0ADED8(uint64_t a1, uint64_t a2, char a3)
{
  _QWORD *v3;
  _QWORD **v4;
  _QWORD *v8;
  char v9;
  unint64_t v10;
  uint64_t v11;
  _BOOL8 v12;
  uint64_t v13;
  char v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t result;
  unint64_t v19;
  char v20;

  v4 = (_QWORD **)v3;
  v8 = (_QWORD *)*v3;
  v10 = sub_1CA0AA4D8(a2);
  v11 = v8[2];
  v12 = (v9 & 1) == 0;
  v13 = v11 + v12;
  if (__OFADD__(v11, v12))
  {
    __break(1u);
  }
  else
  {
    v14 = v9;
    v15 = v8[3];
    if (v15 >= v13 && (a3 & 1) != 0)
    {
LABEL_7:
      v16 = *v4;
      if ((v14 & 1) != 0)
      {
LABEL_8:
        v17 = v16[7];
        result = swift_release();
        *(_QWORD *)(v17 + 8 * v10) = a1;
        return result;
      }
      return sub_1CA0EED70(v10, a2, a1, v16);
    }
    if (v15 >= v13 && (a3 & 1) == 0)
    {
      sub_1CA0EF024();
      goto LABEL_7;
    }
    sub_1CA0EAC60(v13, a3 & 1);
    v19 = sub_1CA0AA4D8(a2);
    if ((v14 & 1) == (v20 & 1))
    {
      v10 = v19;
      v16 = *v4;
      if ((v14 & 1) != 0)
        goto LABEL_8;
      return sub_1CA0EED70(v10, a2, a1, v16);
    }
  }
  result = sub_1CA1F1360();
  __break(1u);
  return result;
}

uint64_t sub_1CA0ADFEC(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  _QWORD *v4;
  _QWORD **v5;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  _QWORD *v14;
  char v15;
  unint64_t v16;
  uint64_t v17;
  _BOOL8 v18;
  uint64_t v19;
  char v20;
  uint64_t v21;
  _QWORD *v22;
  uint64_t *v23;
  uint64_t result;
  uint64_t v25;
  unint64_t v26;
  char v27;
  uint64_t v28;
  uint64_t v29;

  v5 = (_QWORD **)v4;
  v29 = a2;
  v9 = sub_1CA1F0808();
  v10 = *(_QWORD *)(v9 - 8);
  MEMORY[0x1E0C80A78](v9, v11);
  v13 = (char *)&v28 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = (_QWORD *)*v4;
  v16 = sub_1CA0AA530(a3);
  v17 = v14[2];
  v18 = (v15 & 1) == 0;
  v19 = v17 + v18;
  if (__OFADD__(v17, v18))
  {
    __break(1u);
    goto LABEL_14;
  }
  v20 = v15;
  v21 = v14[3];
  if (v21 >= v19 && (a4 & 1) != 0)
  {
LABEL_7:
    v22 = *v5;
    if ((v20 & 1) != 0)
    {
LABEL_8:
      v23 = (uint64_t *)(v22[7] + 16 * v16);
      result = swift_release();
      v25 = v29;
      *v23 = a1;
      v23[1] = v25;
      return result;
    }
    goto LABEL_11;
  }
  if (v21 >= v19 && (a4 & 1) == 0)
  {
    sub_1CA0EF350();
    goto LABEL_7;
  }
  sub_1CA0EB204(v19, a4 & 1);
  v26 = sub_1CA0AA530(a3);
  if ((v20 & 1) != (v27 & 1))
  {
LABEL_14:
    result = sub_1CA1F1360();
    __break(1u);
    return result;
  }
  v16 = v26;
  v22 = *v5;
  if ((v20 & 1) != 0)
    goto LABEL_8;
LABEL_11:
  (*(void (**)(char *, uint64_t, uint64_t))(v10 + 16))(v13, a3, v9);
  return sub_1CA0EEDB8(v16, (uint64_t)v13, a1, v29, v22);
}

_OWORD *sub_1CA0AE158(_OWORD *a1, uint64_t a2, char a3)
{
  _QWORD *v3;
  _QWORD **v4;
  _QWORD *v8;
  char v9;
  unint64_t v10;
  uint64_t v11;
  _BOOL8 v12;
  uint64_t v13;
  char v14;
  uint64_t v15;
  _QWORD *v16;
  _OWORD *v17;
  _OWORD *result;
  unint64_t v19;
  char v20;
  _BYTE v21[40];

  v4 = (_QWORD **)v3;
  v8 = (_QWORD *)*v3;
  v10 = sub_1CA0AA444(a2);
  v11 = v8[2];
  v12 = (v9 & 1) == 0;
  v13 = v11 + v12;
  if (__OFADD__(v11, v12))
  {
    __break(1u);
  }
  else
  {
    v14 = v9;
    v15 = v8[3];
    if (v15 >= v13 && (a3 & 1) != 0)
    {
LABEL_7:
      v16 = *v4;
      if ((v14 & 1) != 0)
      {
LABEL_8:
        v17 = (_OWORD *)(v16[7] + 32 * v10);
        __swift_destroy_boxed_opaque_existential_0((uint64_t)v17);
        return sub_1CA0AFCC0(a1, v17);
      }
      goto LABEL_11;
    }
    if (v15 >= v13 && (a3 & 1) == 0)
    {
      sub_1CA0EF760();
      goto LABEL_7;
    }
    sub_1CA0EB854(v13, a3 & 1);
    v19 = sub_1CA0AA444(a2);
    if ((v14 & 1) == (v20 & 1))
    {
      v10 = v19;
      v16 = *v4;
      if ((v14 & 1) != 0)
        goto LABEL_8;
LABEL_11:
      sub_1CA0AB948(a2, (uint64_t)v21);
      return sub_1CA0EEE58(v10, (uint64_t)v21, a1, v16);
    }
  }
  result = (_OWORD *)sub_1CA1F1360();
  __break(1u);
  return result;
}

id sub_1CA0AE290(void *a1, char a2, double a3)
{
  _QWORD *v3;
  _QWORD **v4;
  _QWORD *v7;
  char v8;
  unint64_t v9;
  uint64_t v10;
  _BOOL8 v11;
  id result;
  char v13;
  uint64_t v14;
  _QWORD *v15;
  char v16;

  v4 = (_QWORD **)v3;
  v7 = (_QWORD *)*v3;
  v9 = sub_1CA0AA594((uint64_t)a1);
  v10 = v7[2];
  v11 = (v8 & 1) == 0;
  result = (id)(v10 + v11);
  if (__OFADD__(v10, v11))
  {
    __break(1u);
  }
  else
  {
    v13 = v8;
    v14 = v7[3];
    if (v14 >= (uint64_t)result && (a2 & 1) != 0)
    {
LABEL_7:
      v15 = *v4;
      if ((v13 & 1) != 0)
      {
LABEL_8:
        *(double *)(v15[7] + 8 * v9) = a3;
        return result;
      }
      goto LABEL_11;
    }
    if (v14 >= (uint64_t)result && (a2 & 1) == 0)
    {
      result = sub_1CA0EF5C0();
      goto LABEL_7;
    }
    sub_1CA0EB588((uint64_t)result, a2 & 1);
    result = (id)sub_1CA0AA594((uint64_t)a1);
    if ((v13 & 1) == (v16 & 1))
    {
      v9 = (unint64_t)result;
      v15 = *v4;
      if ((v13 & 1) != 0)
        goto LABEL_8;
LABEL_11:
      sub_1CA0EEED0(v9, (uint64_t)a1, v15, a3);
      return a1;
    }
  }
  sub_1CA0AB910(0, (unint64_t *)&qword_1EF93A320);
  result = (id)sub_1CA1F1360();
  __break(1u);
  return result;
}

id sub_1CA0AE3B8(uint64_t a1, void *a2, char a3)
{
  _QWORD *v3;
  _QWORD **v4;
  _QWORD *v7;
  char v8;
  unint64_t v9;
  uint64_t v10;
  _BOOL8 v11;
  uint64_t v12;
  char v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  id result;
  unint64_t v18;
  char v19;

  v4 = (_QWORD **)v3;
  v7 = (_QWORD *)*v3;
  v9 = sub_1CA0AA594((uint64_t)a2);
  v10 = v7[2];
  v11 = (v8 & 1) == 0;
  v12 = v10 + v11;
  if (__OFADD__(v10, v11))
  {
    __break(1u);
  }
  else
  {
    v13 = v8;
    v14 = v7[3];
    if (v14 >= v12 && (a3 & 1) != 0)
    {
LABEL_7:
      v15 = *v4;
      if ((v13 & 1) != 0)
      {
LABEL_8:
        v16 = v15[7];
        result = (id)swift_bridgeObjectRelease();
        *(_QWORD *)(v16 + 8 * v9) = a1;
        return result;
      }
      goto LABEL_11;
    }
    if (v14 >= v12 && (a3 & 1) == 0)
    {
      sub_1CA0EF944();
      goto LABEL_7;
    }
    sub_1CA0EBB68(v12, a3 & 1);
    v18 = sub_1CA0AA594((uint64_t)a2);
    if ((v13 & 1) == (v19 & 1))
    {
      v9 = v18;
      v15 = *v4;
      if ((v13 & 1) != 0)
        goto LABEL_8;
LABEL_11:
      sub_1CA0EEF18(v9, (uint64_t)a2, a1, v15);
      return a2;
    }
  }
  sub_1CA0AB910(0, (unint64_t *)&qword_1EF93A320);
  result = (id)sub_1CA1F1360();
  __break(1u);
  return result;
}

uint64_t sub_1CA0AE4E4(uint64_t a1, uint64_t a2, char a3)
{
  _QWORD *v3;
  _QWORD **v4;
  _QWORD *v8;
  char v9;
  unint64_t v10;
  uint64_t v11;
  _BOOL8 v12;
  uint64_t v13;
  char v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t result;
  unint64_t v19;
  char v20;

  v4 = (_QWORD **)v3;
  v8 = (_QWORD *)*v3;
  v10 = sub_1CA0AA5E0(a2);
  v11 = v8[2];
  v12 = (v9 & 1) == 0;
  v13 = v11 + v12;
  if (__OFADD__(v11, v12))
  {
    __break(1u);
  }
  else
  {
    v14 = v9;
    v15 = v8[3];
    if (v15 >= v13 && (a3 & 1) != 0)
    {
LABEL_7:
      v16 = *v4;
      if ((v14 & 1) != 0)
      {
LABEL_8:
        v17 = v16[7];
        result = swift_bridgeObjectRelease();
        *(_QWORD *)(v17 + 8 * v10) = a1;
        return result;
      }
      goto LABEL_11;
    }
    if (v15 >= v13 && (a3 & 1) == 0)
    {
      sub_1CA0EF950();
      goto LABEL_7;
    }
    sub_1CA0EBB74(v13, a3 & 1);
    v19 = sub_1CA0AA5E0(a2);
    if ((v14 & 1) == (v20 & 1))
    {
      v10 = v19;
      v16 = *v4;
      if ((v14 & 1) != 0)
        goto LABEL_8;
LABEL_11:
      sub_1CA0EEF18(v10, a2, a1, v16);
      return swift_retain();
    }
  }
  type metadata accessor for MASlice();
  result = sub_1CA1F1360();
  __break(1u);
  return result;
}

uint64_t sub_1CA0AE600(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  _QWORD *v4;
  _QWORD **v5;
  _QWORD *v10;
  char v11;
  unint64_t v12;
  uint64_t v13;
  _BOOL8 v14;
  uint64_t v15;
  char v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t *v19;
  uint64_t result;
  unint64_t v21;
  char v22;

  v5 = (_QWORD **)v4;
  v10 = (_QWORD *)*v4;
  v12 = sub_1CA0AA5E0(a3);
  v13 = v10[2];
  v14 = (v11 & 1) == 0;
  v15 = v13 + v14;
  if (__OFADD__(v13, v14))
  {
    __break(1u);
  }
  else
  {
    v16 = v11;
    v17 = v10[3];
    if (v17 >= v15 && (a4 & 1) != 0)
    {
LABEL_7:
      v18 = *v5;
      if ((v16 & 1) != 0)
      {
LABEL_8:
        v19 = (uint64_t *)(v18[7] + 16 * v12);
        result = swift_release();
        *v19 = a1;
        v19[1] = a2;
        return result;
      }
      goto LABEL_11;
    }
    if (v17 >= v15 && (a4 & 1) == 0)
    {
      sub_1CA0EFD0C();
      goto LABEL_7;
    }
    sub_1CA0EC1F8(v15, a4 & 1);
    v21 = sub_1CA0AA5E0(a3);
    if ((v16 & 1) == (v22 & 1))
    {
      v12 = v21;
      v18 = *v5;
      if ((v16 & 1) != 0)
        goto LABEL_8;
LABEL_11:
      sub_1CA0EEF1C(v12, a3, a1, a2, v18);
      return swift_retain();
    }
  }
  type metadata accessor for MASlice();
  result = sub_1CA1F1360();
  __break(1u);
  return result;
}

id sub_1CA0AE724(uint64_t a1, void *a2, char a3)
{
  _QWORD *v3;
  _QWORD **v4;
  _QWORD *v7;
  char v8;
  unint64_t v9;
  uint64_t v10;
  _BOOL8 v11;
  id result;
  char v13;
  uint64_t v14;
  _QWORD *v15;
  char v16;

  v4 = (_QWORD **)v3;
  v7 = (_QWORD *)*v3;
  v9 = sub_1CA0AA640((uint64_t)a2);
  v10 = v7[2];
  v11 = (v8 & 1) == 0;
  result = (id)(v10 + v11);
  if (__OFADD__(v10, v11))
  {
    __break(1u);
  }
  else
  {
    v13 = v8;
    v14 = v7[3];
    if (v14 >= (uint64_t)result && (a3 & 1) != 0)
    {
LABEL_7:
      v15 = *v4;
      if ((v13 & 1) != 0)
      {
LABEL_8:
        *(_QWORD *)(v15[7] + 8 * v9) = a1;
        return result;
      }
      goto LABEL_11;
    }
    if (v14 >= (uint64_t)result && (a3 & 1) == 0)
    {
      result = sub_1CA0F024C();
      goto LABEL_7;
    }
    sub_1CA0ECB0C((uint64_t)result, a3 & 1);
    result = (id)sub_1CA0AA640((uint64_t)a2);
    if ((v13 & 1) == (v16 & 1))
    {
      v9 = (unint64_t)result;
      v15 = *v4;
      if ((v13 & 1) != 0)
        goto LABEL_8;
LABEL_11:
      sub_1CA0EED70(v9, (uint64_t)a2, a1, v15);
      return a2;
    }
  }
  sub_1CA0AB910(0, (unint64_t *)&qword_1EF936F60);
  result = (id)sub_1CA1F1360();
  __break(1u);
  return result;
}

uint64_t sub_1CA0AE844(uint64_t a1, char a2, double a3)
{
  _QWORD *v3;
  _QWORD **v4;
  _QWORD *v8;
  char v9;
  unint64_t v10;
  uint64_t v11;
  _BOOL8 v12;
  uint64_t result;
  char v14;
  uint64_t v15;
  _QWORD *v16;
  char v17;
  _BYTE v18[40];

  v4 = (_QWORD **)v3;
  v8 = (_QWORD *)*v3;
  v10 = sub_1CA0AA444(a1);
  v11 = v8[2];
  v12 = (v9 & 1) == 0;
  result = v11 + v12;
  if (__OFADD__(v11, v12))
  {
    __break(1u);
  }
  else
  {
    v14 = v9;
    v15 = v8[3];
    if (v15 >= result && (a2 & 1) != 0)
    {
LABEL_7:
      v16 = *v4;
      if ((v14 & 1) != 0)
      {
LABEL_8:
        *(double *)(v16[7] + 8 * v10) = a3;
        return result;
      }
      goto LABEL_11;
    }
    if (v15 >= result && (a2 & 1) == 0)
    {
      result = (uint64_t)sub_1CA0F057C();
      goto LABEL_7;
    }
    sub_1CA0ED084(result, a2 & 1);
    result = sub_1CA0AA444(a1);
    if ((v14 & 1) == (v17 & 1))
    {
      v10 = result;
      v16 = *v4;
      if ((v14 & 1) != 0)
        goto LABEL_8;
LABEL_11:
      sub_1CA0AB948(a1, (uint64_t)v18);
      return sub_1CA0EEF64(v10, (uint64_t)v18, v16, a3);
    }
  }
  result = sub_1CA1F1360();
  __break(1u);
  return result;
}

_OWORD *sub_1CA0AE950(_OWORD *a1, uint64_t a2, uint64_t a3, char a4)
{
  _QWORD *v4;
  _QWORD **v5;
  _QWORD *v10;
  char v11;
  unint64_t v12;
  uint64_t v13;
  _BOOL8 v14;
  uint64_t v15;
  char v16;
  uint64_t v17;
  _QWORD *v18;
  _OWORD *v19;
  _OWORD *result;
  unint64_t v21;
  char v22;

  v5 = (_QWORD **)v4;
  v10 = (_QWORD *)*v4;
  v12 = sub_1CA0AA474(a2, a3);
  v13 = v10[2];
  v14 = (v11 & 1) == 0;
  v15 = v13 + v14;
  if (__OFADD__(v13, v14))
  {
    __break(1u);
  }
  else
  {
    v16 = v11;
    v17 = v10[3];
    if (v17 >= v15 && (a4 & 1) != 0)
    {
LABEL_7:
      v18 = *v5;
      if ((v16 & 1) != 0)
      {
LABEL_8:
        v19 = (_OWORD *)(v18[7] + 32 * v12);
        __swift_destroy_boxed_opaque_existential_0((uint64_t)v19);
        return sub_1CA0AFCC0(a1, v19);
      }
      goto LABEL_11;
    }
    if (v17 >= v15 && (a4 & 1) == 0)
    {
      sub_1CA0F0DFC();
      goto LABEL_7;
    }
    sub_1CA0EDF00(v15, a4 & 1);
    v21 = sub_1CA0AA474(a2, a3);
    if ((v16 & 1) == (v22 & 1))
    {
      v12 = v21;
      v18 = *v5;
      if ((v16 & 1) != 0)
        goto LABEL_8;
LABEL_11:
      sub_1CA0EEFBC(v12, a2, a3, a1, v18);
      return (_OWORD *)swift_bridgeObjectRetain();
    }
  }
  result = (_OWORD *)sub_1CA1F1360();
  __break(1u);
  return result;
}

uint64_t sub_1CA0AEA80(uint64_t a1, uint64_t a2, char a3)
{
  _QWORD *v3;
  _QWORD **v4;
  _QWORD *v8;
  char v9;
  unint64_t v10;
  uint64_t v11;
  _BOOL8 v12;
  uint64_t v13;
  char v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t result;
  unint64_t v19;
  char v20;

  v4 = (_QWORD **)v3;
  v8 = (_QWORD *)*v3;
  v10 = sub_1CA0AA68C(a2);
  v11 = v8[2];
  v12 = (v9 & 1) == 0;
  v13 = v11 + v12;
  if (__OFADD__(v11, v12))
  {
    __break(1u);
  }
  else
  {
    v14 = v9;
    v15 = v8[3];
    if (v15 >= v13 && (a3 & 1) != 0)
    {
LABEL_7:
      v16 = *v4;
      if ((v14 & 1) != 0)
      {
LABEL_8:
        v17 = v16[7];
        result = swift_bridgeObjectRelease();
        *(_QWORD *)(v17 + 8 * v10) = a1;
        return result;
      }
      return sub_1CA0EED70(v10, a2, a1, v16);
    }
    if (v15 >= v13 && (a3 & 1) == 0)
    {
      sub_1CA0F0FE0();
      goto LABEL_7;
    }
    sub_1CA0EE1FC(v13, a3 & 1);
    v19 = sub_1CA0AA68C(a2);
    if ((v14 & 1) == (v20 & 1))
    {
      v10 = v19;
      v16 = *v4;
      if ((v14 & 1) != 0)
        goto LABEL_8;
      return sub_1CA0EED70(v10, a2, a1, v16);
    }
  }
  result = sub_1CA1F1360();
  __break(1u);
  return result;
}

void sub_1CA0AEB94(uint64_t a1, unint64_t a2, char a3)
{
  _QWORD *v3;
  _QWORD **v4;
  _QWORD *v8;
  char v9;
  unint64_t v10;
  uint64_t v11;
  _BOOL8 v12;
  uint64_t v13;
  char v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  unint64_t v18;
  char v19;

  v4 = (_QWORD **)v3;
  v8 = (_QWORD *)*v3;
  v10 = sub_1CA0AA6F8(a2);
  v11 = v8[2];
  v12 = (v9 & 1) == 0;
  v13 = v11 + v12;
  if (__OFADD__(v11, v12))
  {
    __break(1u);
  }
  else
  {
    v14 = v9;
    v15 = v8[3];
    if (v15 >= v13 && (a3 & 1) != 0)
    {
LABEL_7:
      v16 = *v4;
      if ((v14 & 1) != 0)
      {
LABEL_8:
        v17 = v16[7];

        *(_QWORD *)(v17 + 8 * v10) = a1;
        return;
      }
      goto LABEL_11;
    }
    if (v15 >= v13 && (a3 & 1) == 0)
    {
      sub_1CA0F14E0();
      goto LABEL_7;
    }
    sub_1CA0EEAA0(v13, a3 & 1);
    v18 = sub_1CA0AA6F8(a2);
    if ((v14 & 1) == (v19 & 1))
    {
      v10 = v18;
      v16 = *v4;
      if ((v14 & 1) != 0)
        goto LABEL_8;
LABEL_11:
      sub_1CA0EED70(v10, a2, a1, v16);
      return;
    }
  }
  type metadata accessor for KGElementIdentifier(0);
  sub_1CA1F1360();
  __break(1u);
}

unint64_t sub_1CA0AECA8(_QWORD *a1)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t result;
  char v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  BOOL v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t v14;
  char v15;

  v1 = a1[2];
  if (!v1)
    return MEMORY[0x1E0DEE9E0];
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_1ED852B30);
  v3 = (_QWORD *)sub_1CA1F1264();
  v5 = a1[4];
  v4 = a1[5];
  result = sub_1CA0AA4D8(v5);
  if ((v7 & 1) != 0)
  {
LABEL_7:
    __break(1u);
LABEL_8:
    swift_retain();
    return (unint64_t)v3;
  }
  v8 = a1 + 7;
  while (1)
  {
    *(_QWORD *)((char *)v3 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
    v9 = 8 * result;
    *(_QWORD *)(v3[6] + v9) = v5;
    *(_QWORD *)(v3[7] + v9) = v4;
    v10 = v3[2];
    v11 = __OFADD__(v10, 1);
    v12 = v10 + 1;
    if (v11)
      break;
    v3[2] = v12;
    if (!--v1)
      goto LABEL_8;
    v13 = v8 + 2;
    v5 = *(v8 - 1);
    v14 = *v8;
    swift_retain();
    result = sub_1CA0AA4D8(v5);
    v8 = v13;
    v4 = v14;
    if ((v15 & 1) != 0)
      goto LABEL_7;
  }
  __break(1u);
  return result;
}

uint64_t sub_1CA0AEDA4(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t result;
  int64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void *v13;
  void *v14;
  id v15;
  id v16;
  id v17;
  uint64_t v18;
  uint64_t v19;
  int64_t v20;
  unint64_t v21;
  int64_t v22;
  uint64_t v23;
  int64_t v24;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28[4];

  v3 = *a1;
  v23 = v3 + 64;
  v4 = 1 << *(_BYTE *)(v3 + 32);
  v5 = -1;
  if (v4 < 64)
    v5 = ~(-1 << v4);
  v6 = v5 & *(_QWORD *)(v3 + 64);
  v24 = (unint64_t)(v4 + 63) >> 6;
  v26 = v3;
  result = swift_bridgeObjectRetain();
  v8 = 0;
  while (1)
  {
    if (v6)
    {
      v9 = __clz(__rbit64(v6));
      v6 &= v6 - 1;
      v10 = v9 | (v8 << 6);
      goto LABEL_5;
    }
    v20 = v8 + 1;
    if (__OFADD__(v8, 1))
    {
      __break(1u);
      goto LABEL_23;
    }
    if (v20 >= v24)
      return swift_release();
    v21 = *(_QWORD *)(v23 + 8 * v20);
    ++v8;
    if (!v21)
    {
      v8 = v20 + 1;
      if (v20 + 1 >= v24)
        return swift_release();
      v21 = *(_QWORD *)(v23 + 8 * v8);
      if (!v21)
      {
        v8 = v20 + 2;
        if (v20 + 2 >= v24)
          return swift_release();
        v21 = *(_QWORD *)(v23 + 8 * v8);
        if (!v21)
          break;
      }
    }
LABEL_20:
    v6 = (v21 - 1) & v21;
    v10 = __clz(__rbit64(v21)) + (v8 << 6);
LABEL_5:
    v11 = 8 * v10;
    v12 = *(_QWORD *)(*(_QWORD *)(v26 + 48) + v11);
    v13 = *(void **)(*(_QWORD *)(*(_QWORD *)(v26 + 56) + v11) + 16);
    v14 = *(void **)(a3 + 16);
    swift_retain_n();
    v15 = v13;
    v16 = v14;
    v17 = objc_msgSend(v15, sel_identifierSetByIntersectingIdentifierSet_, v16);
    objc_msgSend(v17, sel_mutableCopy);
    sub_1CA1F0F04();
    swift_unknownObjectRelease();
    sub_1CA0AB910(0, (unint64_t *)&qword_1ED852B18);
    swift_dynamicCast();
    v18 = v27;
    __swift_instantiateConcreteTypeFromMangledName(&qword_1ED852AF0);
    v19 = swift_allocObject();
    *(_QWORD *)(v19 + 16) = v18;
    swift_release();

    v27 = v12;
    v28[0] = v19;
    ElementIdentifierTupleSet.subscript.setter(v28, &v27);
    result = swift_release();
  }
  v22 = v20 + 3;
  if (v22 >= v24)
    return swift_release();
  v21 = *(_QWORD *)(v23 + 8 * v22);
  if (v21)
  {
    v8 = v22;
    goto LABEL_20;
  }
  while (1)
  {
    v8 = v22 + 1;
    if (__OFADD__(v22, 1))
      break;
    if (v8 >= v24)
      return swift_release();
    v21 = *(_QWORD *)(v23 + 8 * v8);
    ++v22;
    if (v21)
      goto LABEL_20;
  }
LABEL_23:
  __break(1u);
  return result;
}

uint64_t sub_1CA0AF024(uint64_t *a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  int64_t v10;
  unint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  int64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  void *v19;
  void *v20;
  unsigned __int8 v21;
  unsigned __int8 v22;
  char v23;
  char v24;
  unint64_t v25;
  char v26;
  unint64_t v27;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v29;
  uint64_t v30;
  char v31;
  uint64_t *v32;
  char v33;
  _QWORD *v34;
  uint64_t *v35;
  char v36;
  unint64_t v37;
  uint64_t v38;
  _BOOL8 v39;
  uint64_t v40;
  char v41;
  unint64_t v42;
  char v43;
  _QWORD *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  BOOL v48;
  uint64_t v49;
  uint64_t result;
  uint64_t v51;
  uint64_t v52;
  int64_t v53;
  uint64_t v54;
  _QWORD *v55;

  v5 = *a1;
  v6 = *a1 + 64;
  v7 = 1 << *(_BYTE *)(*a1 + 32);
  v8 = -1;
  if (v7 < 64)
    v8 = ~(-1 << v7);
  v9 = v8 & *(_QWORD *)(*a1 + 64);
  v53 = (unint64_t)(v7 + 63) >> 6;
  swift_bridgeObjectRetain();
  v10 = 0;
  v51 = v6;
  v52 = v5;
  while (v9)
  {
    v11 = __clz(__rbit64(v9));
    v9 &= v9 - 1;
    v12 = v11 | (v10 << 6);
LABEL_21:
    v16 = 8 * v12;
    v17 = *(_QWORD *)(*(_QWORD *)(v5 + 48) + v16);
    v18 = *(_QWORD *)(*(_QWORD *)(v5 + 56) + v16);
    v19 = *(void **)(a2 + 16);
    swift_retain();
    if (!objc_msgSend(v19, sel_containsIdentifier_, v17))
      goto LABEL_4;
    v20 = *(void **)(v18 + 16);
    swift_retain();
    v21 = objc_msgSend(v20, sel_isEmpty);
    v22 = v21;
    if (*(_QWORD *)(*a3 + 16))
    {
      sub_1CA0AA4D8(v17);
      if ((v22 & 1) == 0)
        goto LABEL_31;
      v24 = v23;
      swift_release();
      if ((v24 & 1) != 0 && (v25 = sub_1CA0AA4D8(v17), (v26 & 1) != 0))
      {
        v27 = v25;
        isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
        v29 = *a3;
        v54 = *a3;
        *a3 = 0x8000000000000000;
        if ((isUniquelyReferenced_nonNull_native & 1) == 0)
        {
          sub_1CA0EF024();
          v29 = v54;
        }
        sub_1CA0F18F4(v27, v29);
        *a3 = v29;
        swift_release();
        swift_release();
        swift_bridgeObjectRelease();
      }
      else
      {
LABEL_4:
        swift_release();
      }
    }
    else if ((v21 & 1) != 0)
    {
      swift_release_n();
    }
    else
    {
LABEL_31:
      v30 = a2;
      v31 = swift_isUniquelyReferenced_nonNull_native();
      v32 = a3;
      v33 = v31;
      v34 = (_QWORD *)*v32;
      v55 = (_QWORD *)*v32;
      v35 = v32;
      *v32 = 0x8000000000000000;
      v37 = sub_1CA0AA4D8(v17);
      v38 = v34[2];
      v39 = (v36 & 1) == 0;
      v40 = v38 + v39;
      if (__OFADD__(v38, v39))
        goto LABEL_45;
      v41 = v36;
      if (v34[3] >= v40)
      {
        if ((v33 & 1) != 0)
        {
          v44 = v55;
          if ((v36 & 1) != 0)
            goto LABEL_38;
        }
        else
        {
          sub_1CA0EF024();
          v44 = v55;
          if ((v41 & 1) != 0)
            goto LABEL_38;
        }
      }
      else
      {
        sub_1CA0EAC60(v40, v33);
        v42 = sub_1CA0AA4D8(v17);
        if ((v41 & 1) != (v43 & 1))
          goto LABEL_48;
        v37 = v42;
        v44 = v55;
        if ((v41 & 1) != 0)
        {
LABEL_38:
          v45 = v44[7];
          swift_release();
          *(_QWORD *)(v45 + 8 * v37) = v18;
          goto LABEL_42;
        }
      }
      v44[(v37 >> 6) + 8] |= 1 << v37;
      v46 = 8 * v37;
      *(_QWORD *)(v44[6] + v46) = v17;
      *(_QWORD *)(v44[7] + v46) = v18;
      v47 = v44[2];
      v48 = __OFADD__(v47, 1);
      v49 = v47 + 1;
      if (v48)
        goto LABEL_46;
      v44[2] = v49;
LABEL_42:
      *v35 = (uint64_t)v44;
      a3 = v35;
      swift_release();
      swift_bridgeObjectRelease();
      a2 = v30;
      v6 = v51;
      v5 = v52;
    }
  }
  v13 = v10 + 1;
  if (__OFADD__(v10, 1))
  {
    __break(1u);
LABEL_45:
    __break(1u);
LABEL_46:
    __break(1u);
    goto LABEL_47;
  }
  if (v13 >= v53)
    return swift_release();
  v14 = *(_QWORD *)(v6 + 8 * v13);
  ++v10;
  if (v14)
    goto LABEL_20;
  v10 = v13 + 1;
  if (v13 + 1 >= v53)
    return swift_release();
  v14 = *(_QWORD *)(v6 + 8 * v10);
  if (v14)
    goto LABEL_20;
  v10 = v13 + 2;
  if (v13 + 2 >= v53)
    return swift_release();
  v14 = *(_QWORD *)(v6 + 8 * v10);
  if (v14)
  {
LABEL_20:
    v9 = (v14 - 1) & v14;
    v12 = __clz(__rbit64(v14)) + (v10 << 6);
    goto LABEL_21;
  }
  v15 = v13 + 3;
  if (v15 >= v53)
    return swift_release();
  v14 = *(_QWORD *)(v6 + 8 * v15);
  if (v14)
  {
    v10 = v15;
    goto LABEL_20;
  }
  while (1)
  {
    v10 = v15 + 1;
    if (__OFADD__(v15, 1))
      break;
    if (v10 >= v53)
      return swift_release();
    v14 = *(_QWORD *)(v6 + 8 * v10);
    ++v15;
    if (v14)
      goto LABEL_20;
  }
LABEL_47:
  __break(1u);
LABEL_48:
  result = sub_1CA1F1360();
  __break(1u);
  return result;
}

uint64_t sub_1CA0AF3DC(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t result;
  int64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void *v13;
  void *v14;
  id v15;
  id v16;
  id v17;
  uint64_t v18;
  uint64_t v19;
  int64_t v20;
  unint64_t v21;
  int64_t v22;
  uint64_t v23;
  int64_t v24;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28[4];

  v3 = *a1;
  v23 = v3 + 64;
  v4 = 1 << *(_BYTE *)(v3 + 32);
  v5 = -1;
  if (v4 < 64)
    v5 = ~(-1 << v4);
  v6 = v5 & *(_QWORD *)(v3 + 64);
  v24 = (unint64_t)(v4 + 63) >> 6;
  v26 = v3;
  result = swift_bridgeObjectRetain();
  v8 = 0;
  while (1)
  {
    if (v6)
    {
      v9 = __clz(__rbit64(v6));
      v6 &= v6 - 1;
      v10 = v9 | (v8 << 6);
      goto LABEL_5;
    }
    v20 = v8 + 1;
    if (__OFADD__(v8, 1))
    {
      __break(1u);
      goto LABEL_23;
    }
    if (v20 >= v24)
      return swift_release();
    v21 = *(_QWORD *)(v23 + 8 * v20);
    ++v8;
    if (!v21)
    {
      v8 = v20 + 1;
      if (v20 + 1 >= v24)
        return swift_release();
      v21 = *(_QWORD *)(v23 + 8 * v8);
      if (!v21)
      {
        v8 = v20 + 2;
        if (v20 + 2 >= v24)
          return swift_release();
        v21 = *(_QWORD *)(v23 + 8 * v8);
        if (!v21)
          break;
      }
    }
LABEL_20:
    v6 = (v21 - 1) & v21;
    v10 = __clz(__rbit64(v21)) + (v8 << 6);
LABEL_5:
    v11 = 8 * v10;
    v12 = *(_QWORD *)(*(_QWORD *)(v26 + 48) + v11);
    v13 = *(void **)(*(_QWORD *)(*(_QWORD *)(v26 + 56) + v11) + 16);
    v14 = *(void **)(a3 + 16);
    swift_retain();
    v15 = v13;
    v16 = v14;
    v17 = objc_msgSend(v15, sel_identifierSetBySubtractingIdentifierSet_, v16);
    objc_msgSend(v17, sel_mutableCopy);
    sub_1CA1F0F04();
    swift_unknownObjectRelease();
    sub_1CA0AB910(0, (unint64_t *)&qword_1ED852B18);
    swift_dynamicCast();
    v18 = v27;
    __swift_instantiateConcreteTypeFromMangledName(&qword_1ED852AF0);
    v19 = swift_allocObject();
    *(_QWORD *)(v19 + 16) = v18;

    v27 = v12;
    v28[0] = v19;
    ElementIdentifierTupleSet.subscript.setter(v28, &v27);
    result = swift_release();
  }
  v22 = v20 + 3;
  if (v22 >= v24)
    return swift_release();
  v21 = *(_QWORD *)(v23 + 8 * v22);
  if (v21)
  {
    v8 = v22;
    goto LABEL_20;
  }
  while (1)
  {
    v8 = v22 + 1;
    if (__OFADD__(v22, 1))
      break;
    if (v8 >= v24)
      return swift_release();
    v21 = *(_QWORD *)(v23 + 8 * v8);
    ++v22;
    if (v21)
      goto LABEL_20;
  }
LABEL_23:
  __break(1u);
  return result;
}

uint64_t sub_1CA0AF650(uint64_t *a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  int64_t v10;
  unint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  int64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  void *v19;
  void *v20;
  unsigned __int8 v21;
  unsigned __int8 v22;
  char v23;
  char v24;
  unint64_t v25;
  char v26;
  unint64_t v27;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v29;
  uint64_t v30;
  char v31;
  uint64_t *v32;
  char v33;
  _QWORD *v34;
  uint64_t *v35;
  char v36;
  unint64_t v37;
  uint64_t v38;
  _BOOL8 v39;
  uint64_t v40;
  char v41;
  unint64_t v42;
  char v43;
  _QWORD *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  BOOL v48;
  uint64_t v49;
  uint64_t result;
  uint64_t v51;
  uint64_t v52;
  int64_t v53;
  uint64_t v54;
  _QWORD *v55;

  v5 = *a1;
  v6 = *a1 + 64;
  v7 = 1 << *(_BYTE *)(*a1 + 32);
  v8 = -1;
  if (v7 < 64)
    v8 = ~(-1 << v7);
  v9 = v8 & *(_QWORD *)(*a1 + 64);
  v53 = (unint64_t)(v7 + 63) >> 6;
  swift_bridgeObjectRetain();
  v10 = 0;
  v51 = v6;
  v52 = v5;
  while (v9)
  {
    v11 = __clz(__rbit64(v9));
    v9 &= v9 - 1;
    v12 = v11 | (v10 << 6);
LABEL_21:
    v16 = 8 * v12;
    v17 = *(_QWORD *)(*(_QWORD *)(v5 + 48) + v16);
    v18 = *(_QWORD *)(*(_QWORD *)(v5 + 56) + v16);
    v19 = *(void **)(a2 + 16);
    swift_retain();
    if (objc_msgSend(v19, sel_containsIdentifier_, v17))
      goto LABEL_4;
    v20 = *(void **)(v18 + 16);
    swift_retain();
    v21 = objc_msgSend(v20, sel_isEmpty);
    v22 = v21;
    if (*(_QWORD *)(*a3 + 16))
    {
      sub_1CA0AA4D8(v17);
      if ((v22 & 1) == 0)
        goto LABEL_31;
      v24 = v23;
      swift_release();
      if ((v24 & 1) != 0 && (v25 = sub_1CA0AA4D8(v17), (v26 & 1) != 0))
      {
        v27 = v25;
        isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
        v29 = *a3;
        v54 = *a3;
        *a3 = 0x8000000000000000;
        if ((isUniquelyReferenced_nonNull_native & 1) == 0)
        {
          sub_1CA0EF024();
          v29 = v54;
        }
        sub_1CA0F18F4(v27, v29);
        *a3 = v29;
        swift_release();
        swift_release();
        swift_bridgeObjectRelease();
      }
      else
      {
LABEL_4:
        swift_release();
      }
    }
    else if ((v21 & 1) != 0)
    {
      swift_release_n();
    }
    else
    {
LABEL_31:
      v30 = a2;
      v31 = swift_isUniquelyReferenced_nonNull_native();
      v32 = a3;
      v33 = v31;
      v34 = (_QWORD *)*v32;
      v55 = (_QWORD *)*v32;
      v35 = v32;
      *v32 = 0x8000000000000000;
      v37 = sub_1CA0AA4D8(v17);
      v38 = v34[2];
      v39 = (v36 & 1) == 0;
      v40 = v38 + v39;
      if (__OFADD__(v38, v39))
        goto LABEL_45;
      v41 = v36;
      if (v34[3] >= v40)
      {
        if ((v33 & 1) != 0)
        {
          v44 = v55;
          if ((v36 & 1) != 0)
            goto LABEL_38;
        }
        else
        {
          sub_1CA0EF024();
          v44 = v55;
          if ((v41 & 1) != 0)
            goto LABEL_38;
        }
      }
      else
      {
        sub_1CA0EAC60(v40, v33);
        v42 = sub_1CA0AA4D8(v17);
        if ((v41 & 1) != (v43 & 1))
          goto LABEL_48;
        v37 = v42;
        v44 = v55;
        if ((v41 & 1) != 0)
        {
LABEL_38:
          v45 = v44[7];
          swift_release();
          *(_QWORD *)(v45 + 8 * v37) = v18;
          goto LABEL_42;
        }
      }
      v44[(v37 >> 6) + 8] |= 1 << v37;
      v46 = 8 * v37;
      *(_QWORD *)(v44[6] + v46) = v17;
      *(_QWORD *)(v44[7] + v46) = v18;
      v47 = v44[2];
      v48 = __OFADD__(v47, 1);
      v49 = v47 + 1;
      if (v48)
        goto LABEL_46;
      v44[2] = v49;
LABEL_42:
      *v35 = (uint64_t)v44;
      a3 = v35;
      swift_release();
      swift_bridgeObjectRelease();
      a2 = v30;
      v6 = v51;
      v5 = v52;
    }
  }
  v13 = v10 + 1;
  if (__OFADD__(v10, 1))
  {
    __break(1u);
LABEL_45:
    __break(1u);
LABEL_46:
    __break(1u);
    goto LABEL_47;
  }
  if (v13 >= v53)
    return swift_release();
  v14 = *(_QWORD *)(v6 + 8 * v13);
  ++v10;
  if (v14)
    goto LABEL_20;
  v10 = v13 + 1;
  if (v13 + 1 >= v53)
    return swift_release();
  v14 = *(_QWORD *)(v6 + 8 * v10);
  if (v14)
    goto LABEL_20;
  v10 = v13 + 2;
  if (v13 + 2 >= v53)
    return swift_release();
  v14 = *(_QWORD *)(v6 + 8 * v10);
  if (v14)
  {
LABEL_20:
    v9 = (v14 - 1) & v14;
    v12 = __clz(__rbit64(v14)) + (v10 << 6);
    goto LABEL_21;
  }
  v15 = v13 + 3;
  if (v15 >= v53)
    return swift_release();
  v14 = *(_QWORD *)(v6 + 8 * v15);
  if (v14)
  {
    v10 = v15;
    goto LABEL_20;
  }
  while (1)
  {
    v10 = v15 + 1;
    if (__OFADD__(v15, 1))
      break;
    if (v10 >= v53)
      return swift_release();
    v14 = *(_QWORD *)(v6 + 8 * v10);
    ++v15;
    if (v14)
      goto LABEL_20;
  }
LABEL_47:
  __break(1u);
LABEL_48:
  result = sub_1CA1F1360();
  __break(1u);
  return result;
}

uint64_t sub_1CA0AFA08(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  int64_t v10;
  uint64_t result;
  int64_t v12;
  unint64_t v13;
  unint64_t v14;
  int64_t v15;
  unint64_t v16;
  int64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  void *v21;
  id v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;

  v5 = *a1;
  v6 = *a1 + 64;
  v7 = 1 << *(_BYTE *)(*a1 + 32);
  v8 = -1;
  if (v7 < 64)
    v8 = ~(-1 << v7);
  v9 = v8 & *(_QWORD *)(*a1 + 64);
  v10 = (unint64_t)(v7 + 63) >> 6;
  result = swift_bridgeObjectRetain();
  v12 = 0;
  v24 = MEMORY[0x1E0DEE9B8] + 8;
  while (1)
  {
    if (v9)
    {
      v13 = __clz(__rbit64(v9));
      v9 &= v9 - 1;
      v14 = v13 | (v12 << 6);
      goto LABEL_22;
    }
    v15 = v12 + 1;
    if (__OFADD__(v12, 1))
    {
      __break(1u);
      goto LABEL_27;
    }
    if (v15 >= v10)
      return swift_release();
    v16 = *(_QWORD *)(v6 + 8 * v15);
    ++v12;
    if (!v16)
    {
      v12 = v15 + 1;
      if (v15 + 1 >= v10)
        return swift_release();
      v16 = *(_QWORD *)(v6 + 8 * v12);
      if (!v16)
      {
        v12 = v15 + 2;
        if (v15 + 2 >= v10)
          return swift_release();
        v16 = *(_QWORD *)(v6 + 8 * v12);
        if (!v16)
          break;
      }
    }
LABEL_21:
    v9 = (v16 - 1) & v16;
    v14 = __clz(__rbit64(v16)) + (v12 << 6);
LABEL_22:
    v18 = 8 * v14;
    v19 = *(_QWORD *)(*(_QWORD *)(v5 + 48) + v18);
    v20 = *(_QWORD *)(*(_QWORD *)(v5 + 56) + v18);
    v21 = *(void **)(a2 + 16);
    swift_retain();
    if (objc_msgSend(v21, sel_containsIdentifier_, v19))
    {
      swift_retain();
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        v22 = *(id *)(*(_QWORD *)a3 + 16);
        objc_msgSend(v22, sel_mutableCopy);
        sub_1CA1F0F04();
        swift_unknownObjectRelease();
        sub_1CA0AB910(0, (unint64_t *)&qword_1ED852B18);
        swift_dynamicCast();

        __swift_instantiateConcreteTypeFromMangledName(&qword_1ED852AF0);
        v23 = swift_allocObject();
        *(_QWORD *)(v23 + 16) = v25;
        *(_QWORD *)a3 = v23;
        swift_release();
      }
      objc_msgSend(*(id *)(*(_QWORD *)a3 + 16), sel_unionWithIdentifierSet_, *(_QWORD *)(v20 + 16), v24);
      swift_release();
    }
    result = swift_release();
  }
  v17 = v15 + 3;
  if (v17 >= v10)
    return swift_release();
  v16 = *(_QWORD *)(v6 + 8 * v17);
  if (v16)
  {
    v12 = v17;
    goto LABEL_21;
  }
  while (1)
  {
    v12 = v17 + 1;
    if (__OFADD__(v17, 1))
      break;
    if (v12 >= v10)
      return swift_release();
    v16 = *(_QWORD *)(v6 + 8 * v12);
    ++v17;
    if (v16)
      goto LABEL_21;
  }
LABEL_27:
  __break(1u);
  return result;
}

ValueMetadata *type metadata accessor for DirectedBinaryAdjacency()
{
  return &type metadata for DirectedBinaryAdjacency;
}

uint64_t sub_1CA0AFC78(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_1EF936FD8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

_OWORD *sub_1CA0AFCC0(_OWORD *a1, _OWORD *a2)
{
  __int128 v2;

  v2 = a1[1];
  *a2 = *a1;
  a2[1] = v2;
  return a2;
}

uint64_t sub_1CA0AFCD0(uint64_t *a1, void (*a2)(uint64_t, void *, char *))
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  int64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;
  id v13;
  int64_t v14;
  unint64_t v15;
  int64_t v16;
  uint64_t v18;
  int64_t v19;
  void *v20;
  char v21;
  uint64_t v22;

  v22 = *MEMORY[0x1E0C80C00];
  v3 = *a1;
  v21 = 0;
  v18 = v3 + 64;
  v4 = 1 << *(_BYTE *)(v3 + 32);
  v5 = -1;
  if (v4 < 64)
    v5 = ~(-1 << v4);
  v6 = v5 & *(_QWORD *)(v3 + 64);
  v19 = (unint64_t)(v4 + 63) >> 6;
  swift_bridgeObjectRetain();
  v7 = 0;
  while (v6)
  {
    v8 = __clz(__rbit64(v6));
    v6 &= v6 - 1;
    v9 = v8 | (v7 << 6);
LABEL_5:
    v10 = 8 * v9;
    v11 = *(_QWORD *)(*(_QWORD *)(v3 + 48) + v10);
    v12 = *(void **)(*(_QWORD *)(*(_QWORD *)(v3 + 56) + v10) + 16);
    swift_retain();
    v13 = v12;
    objc_msgSend(v13, sel_copy);
    sub_1CA1F0F04();
    swift_unknownObjectRelease();
    sub_1CA0AB910(0, &qword_1ED852B10);
    swift_dynamicCast();

    a2(v11, v20, &v21);
    swift_release();

    if (v21 == 1)
      return swift_release();
  }
  v14 = v7 + 1;
  if (__OFADD__(v7, 1))
  {
    __break(1u);
    goto LABEL_23;
  }
  if (v14 >= v19)
    return swift_release();
  v15 = *(_QWORD *)(v18 + 8 * v14);
  ++v7;
  if (v15)
    goto LABEL_20;
  v7 = v14 + 1;
  if (v14 + 1 >= v19)
    return swift_release();
  v15 = *(_QWORD *)(v18 + 8 * v7);
  if (v15)
    goto LABEL_20;
  v7 = v14 + 2;
  if (v14 + 2 >= v19)
    return swift_release();
  v15 = *(_QWORD *)(v18 + 8 * v7);
  if (v15)
  {
LABEL_20:
    v6 = (v15 - 1) & v15;
    v9 = __clz(__rbit64(v15)) + (v7 << 6);
    goto LABEL_5;
  }
  v16 = v14 + 3;
  if (v16 < v19)
  {
    v15 = *(_QWORD *)(v18 + 8 * v16);
    if (!v15)
    {
      while (1)
      {
        v7 = v16 + 1;
        if (__OFADD__(v16, 1))
          break;
        if (v7 >= v19)
          return swift_release();
        v15 = *(_QWORD *)(v18 + 8 * v7);
        ++v16;
        if (v15)
          goto LABEL_20;
      }
LABEL_23:
      __break(1u);
    }
    v7 = v16;
    goto LABEL_20;
  }
  return swift_release();
}

uint64_t sub_1CA0AFF28(uint64_t result)
{
  if (result)
    return swift_retain();
  return result;
}

uint64_t _s17KnowledgeGraphKit27MAMutableFloatVectorWrapperC05floatF0AA0F0VySfGvg_0@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v1;

  *a1 = *(_QWORD *)(v1 + OBJC_IVAR____TtC17KnowledgeGraphKit20MAFloatVectorWrapper__floatVector);
  return swift_bridgeObjectRetain();
}

id MAFloatVectorWrapper.__allocating_init(floatVector:)(_QWORD *a1)
{
  objc_class *v1;
  char *v3;
  objc_super v5;

  v3 = (char *)objc_allocWithZone(v1);
  *(_QWORD *)&v3[OBJC_IVAR____TtC17KnowledgeGraphKit20MAFloatVectorWrapper__floatVector] = *a1;
  v5.receiver = v3;
  v5.super_class = v1;
  return objc_msgSendSuper2(&v5, sel_init);
}

id MAFloatVectorWrapper.init(floatVector:)(_QWORD *a1)
{
  char *v1;
  objc_super v3;

  *(_QWORD *)&v1[OBJC_IVAR____TtC17KnowledgeGraphKit20MAFloatVectorWrapper__floatVector] = *a1;
  v3.receiver = v1;
  v3.super_class = (Class)type metadata accessor for MAFloatVectorWrapper();
  return objc_msgSendSuper2(&v3, sel_init);
}

uint64_t type metadata accessor for MAFloatVectorWrapper()
{
  return objc_opt_self();
}

id MAFloatVectorWrapper.__allocating_init(array:)(uint64_t a1)
{
  objc_class *v1;
  char *v3;
  objc_super v5;

  v3 = (char *)objc_allocWithZone(v1);
  *(_QWORD *)&v3[OBJC_IVAR____TtC17KnowledgeGraphKit20MAFloatVectorWrapper__floatVector] = a1;
  v5.receiver = v3;
  v5.super_class = v1;
  return objc_msgSendSuper2(&v5, sel_init);
}

id MAFloatVectorWrapper.init(array:)(uint64_t a1)
{
  char *v1;
  objc_super v3;

  *(_QWORD *)&v1[OBJC_IVAR____TtC17KnowledgeGraphKit20MAFloatVectorWrapper__floatVector] = a1;
  v3.receiver = v1;
  v3.super_class = (Class)type metadata accessor for MAFloatVectorWrapper();
  return objc_msgSendSuper2(&v3, sel_init);
}

id MAFloatVectorWrapper.__allocating_init()()
{
  objc_class *v0;

  return objc_msgSend(objc_allocWithZone(v0), sel_init);
}

id MAFloatVectorWrapper.init()()
{
  char *v0;
  objc_super v2;

  *(_QWORD *)&v0[OBJC_IVAR____TtC17KnowledgeGraphKit20MAFloatVectorWrapper__floatVector] = MEMORY[0x1E0DEE9D8];
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for MAFloatVectorWrapper();
  return objc_msgSendSuper2(&v2, sel_init);
}

id MAFloatVectorWrapper.__deallocating_deinit()
{
  void *v0;
  objc_super v2;

  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for MAFloatVectorWrapper();
  return objc_msgSendSuper2(&v2, sel_dealloc);
}

uint64_t MAMutableFloatVectorWrapper.floatVector.setter(_QWORD *a1)
{
  uint64_t v1;

  *(_QWORD *)(v1 + OBJC_IVAR____TtC17KnowledgeGraphKit20MAFloatVectorWrapper__floatVector) = *a1;
  return swift_bridgeObjectRelease();
}

uint64_t (*MAMutableFloatVectorWrapper.floatVector.modify(_QWORD *a1))(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;

  v2 = OBJC_IVAR____TtC17KnowledgeGraphKit20MAFloatVectorWrapper__floatVector;
  a1[2] = OBJC_IVAR____TtC17KnowledgeGraphKit20MAFloatVectorWrapper__floatVector;
  *a1 = *(_QWORD *)(v1 + v2);
  a1[1] = v1;
  swift_bridgeObjectRetain();
  return sub_1CA0B022C;
}

uint64_t sub_1CA0B022C(_QWORD *a1)
{
  *(_QWORD *)(a1[1] + a1[2]) = *a1;
  return swift_bridgeObjectRelease();
}

id MAMutableFloatVectorWrapper.__allocating_init(floatVector:)(_QWORD *a1)
{
  objc_class *v1;
  char *v3;
  objc_super v5;

  v3 = (char *)objc_allocWithZone(v1);
  *(_QWORD *)&v3[OBJC_IVAR____TtC17KnowledgeGraphKit20MAFloatVectorWrapper__floatVector] = *a1;
  v5.receiver = v3;
  v5.super_class = (Class)type metadata accessor for MAFloatVectorWrapper();
  return objc_msgSendSuper2(&v5, sel_init);
}

id MAMutableFloatVectorWrapper.init(floatVector:)(_QWORD *a1)
{
  char *v1;
  objc_super v3;

  *(_QWORD *)&v1[OBJC_IVAR____TtC17KnowledgeGraphKit20MAFloatVectorWrapper__floatVector] = *a1;
  v3.receiver = v1;
  v3.super_class = (Class)type metadata accessor for MAFloatVectorWrapper();
  return objc_msgSendSuper2(&v3, sel_init);
}

id MAMutableFloatVectorWrapper.__allocating_init(array:)(uint64_t a1)
{
  objc_class *v1;
  char *v3;
  objc_super v5;

  v3 = (char *)objc_allocWithZone(v1);
  *(_QWORD *)&v3[OBJC_IVAR____TtC17KnowledgeGraphKit20MAFloatVectorWrapper__floatVector] = a1;
  v5.receiver = v3;
  v5.super_class = (Class)type metadata accessor for MAFloatVectorWrapper();
  return objc_msgSendSuper2(&v5, sel_init);
}

id MAMutableFloatVectorWrapper.init(array:)(uint64_t a1)
{
  char *v1;
  objc_super v3;

  *(_QWORD *)&v1[OBJC_IVAR____TtC17KnowledgeGraphKit20MAFloatVectorWrapper__floatVector] = a1;
  v3.receiver = v1;
  v3.super_class = (Class)type metadata accessor for MAFloatVectorWrapper();
  return objc_msgSendSuper2(&v3, sel_init);
}

id MAMutableFloatVectorWrapper.init()()
{
  void *v0;
  objc_super v2;

  v2.receiver = v0;
  v2.super_class = (Class)swift_getObjectType();
  return objc_msgSendSuper2(&v2, sel_init);
}

id MAMutableFloatVectorWrapper.__deallocating_deinit()
{
  void *v0;
  objc_super v2;

  v2.receiver = v0;
  v2.super_class = (Class)swift_getObjectType();
  return objc_msgSendSuper2(&v2, sel_dealloc);
}

id MAFloatVectorWrapper.__allocating_init(floats:count:)(uint64_t a1, uint64_t a2)
{
  objc_class *v2;

  return objc_msgSend(objc_allocWithZone(v2), sel_initWithFloats_count_, a1, a2);
}

uint64_t MAFloatVectorWrapper.init(floats:count:)(char *a1, uint64_t a2)
{
  uint64_t ObjectType;
  uint64_t v5;
  uint64_t v7;

  ObjectType = swift_getObjectType();
  v7 = sub_1CA0B550C(a1, a2);
  v5 = (*(uint64_t (**)(uint64_t *))(ObjectType + 120))(&v7);
  swift_deallocPartialClassInstance();
  return v5;
}

uint64_t static MAFloatVectorWrapper.zeros(count:)(unint64_t a1, int32x2_t a2)
{
  uint64_t v2;
  uint64_t v4;

  a2.i32[0] = 0;
  v4 = sub_1CA0B4560(a1, a2);
  return (*(uint64_t (**)(uint64_t *))(v2 + 120))(&v4);
}

uint64_t static MAFloatVectorWrapper.ones(count:)(unint64_t a1, int32x2_t a2)
{
  uint64_t v2;
  uint64_t v4;

  a2.i32[0] = 1.0;
  v4 = sub_1CA0B4560(a1, a2);
  return (*(uint64_t (**)(uint64_t *))(v2 + 120))(&v4);
}

uint64_t static MAFloatVectorWrapper.repeating(float:count:)(unint64_t a1, int32x2_t a2)
{
  uint64_t v2;
  uint64_t v4;

  v4 = sub_1CA0B4560(a1, a2);
  return (*(uint64_t (**)(uint64_t *))(v2 + 120))(&v4);
}

id MAFloatVectorWrapper.copy(with:)@<X0>(_QWORD *a1@<X8>)
{
  id v3;

  a1[3] = type metadata accessor for MAFloatVectorWrapper();
  *a1 = v3;
  return v3;
}

id MAFloatVectorWrapper.mutableCopy(with:)@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  objc_class *v4;
  char *v5;
  id result;
  objc_super v7;

  v3 = *(_QWORD *)(v1 + OBJC_IVAR____TtC17KnowledgeGraphKit20MAFloatVectorWrapper__floatVector);
  v4 = (objc_class *)type metadata accessor for MAMutableFloatVectorWrapper();
  v5 = (char *)objc_allocWithZone(v4);
  *(_QWORD *)&v5[OBJC_IVAR____TtC17KnowledgeGraphKit20MAFloatVectorWrapper__floatVector] = v3;
  v7.receiver = v5;
  v7.super_class = (Class)type metadata accessor for MAFloatVectorWrapper();
  swift_bridgeObjectRetain();
  result = objc_msgSendSuper2(&v7, sel_init);
  a1[3] = v4;
  *a1 = result;
  return result;
}

id MAMutableFloatVectorWrapper.copy(with:)@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  objc_class *v4;
  char *v5;
  id result;
  objc_super v7;

  v3 = *(_QWORD *)(v1 + OBJC_IVAR____TtC17KnowledgeGraphKit20MAFloatVectorWrapper__floatVector);
  v4 = (objc_class *)type metadata accessor for MAFloatVectorWrapper();
  v5 = (char *)objc_allocWithZone(v4);
  *(_QWORD *)&v5[OBJC_IVAR____TtC17KnowledgeGraphKit20MAFloatVectorWrapper__floatVector] = v3;
  v7.receiver = v5;
  v7.super_class = v4;
  swift_bridgeObjectRetain();
  result = objc_msgSendSuper2(&v7, sel_init);
  a1[3] = v4;
  *a1 = result;
  return result;
}

Swift::Float __swiftcall MAFloatVectorWrapper.float(at:)(Swift::Int at)
{
  _QWORD *v1;
  Swift::Float result;
  float v4;
  uint64_t v5;

  (*(void (**)(uint64_t *__return_ptr))((*MEMORY[0x1E0DEEDD8] & *v1) + 0x70))(&v5);
  if (at < 0)
  {
    __break(1u);
  }
  else if (*(_QWORD *)(v5 + 16) > (unint64_t)at)
  {
    v4 = *(float *)(v5 + 4 * at + 32);
    swift_bridgeObjectRelease();
    return v4;
  }
  __break(1u);
  return result;
}

_QWORD *MAFloatVectorWrapper.vectorBySubtractingVector(_:)(_QWORD *a1)
{
  return sub_1CA0B0DF0(a1, (uint64_t (*)(_QWORD *, uint64_t *))sub_1CA0B65F8);
}

_QWORD *MAFloatVectorWrapper.vectorByAddingVector(_:)(_QWORD *a1)
{
  return sub_1CA0B0DF0(a1, (uint64_t (*)(_QWORD *, uint64_t *))sub_1CA0B6618);
}

id MAFloatVectorWrapper.vectorBySubtractingScalar(_:)()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  id result;
  objc_class *v6;
  char *v7;
  objc_super v8;
  uint64_t v9;
  uint64_t v10;

  (*(void (**)(uint64_t *__return_ptr))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x70))(&v10);
  v1 = v10;
  v9 = v10;
  v2 = sub_1CA0B5D38(*(_QWORD *)(v10 + 16), (uint64_t (*)(_QWORD *, uint64_t *))sub_1CA0B6640);
  v3 = *(_QWORD *)(v1 + 16);
  v4 = *(_QWORD *)(v2 + 16);
  result = (id)swift_bridgeObjectRelease();
  if (v3 == v4)
  {
    v6 = (objc_class *)type metadata accessor for MAFloatVectorWrapper();
    v7 = (char *)objc_allocWithZone(v6);
    *(_QWORD *)&v7[OBJC_IVAR____TtC17KnowledgeGraphKit20MAFloatVectorWrapper__floatVector] = v2;
    v8.receiver = v7;
    v8.super_class = v6;
    return objc_msgSendSuper2(&v8, sel_init);
  }
  else
  {
    __break(1u);
  }
  return result;
}

id MAFloatVectorWrapper.vectorByAddingScalar(_:)()
{
  return sub_1CA0B0BCC((uint64_t (*)(_QWORD *, uint64_t *))sub_1CA0B6B2C);
}

id MAFloatVectorWrapper.vectorByMultiplyingByScalar(_:)()
{
  return sub_1CA0B0BCC((uint64_t (*)(_QWORD *, uint64_t *))sub_1CA0B6660);
}

id sub_1CA0B0BCC(uint64_t (*a1)(_QWORD *, uint64_t *))
{
  _QWORD *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  id result;
  objc_class *v8;
  char *v9;
  objc_super v10;
  uint64_t v11;
  uint64_t v12;

  (*(void (**)(uint64_t *__return_ptr))((*MEMORY[0x1E0DEEDD8] & *v1) + 0x70))(&v12);
  v3 = v12;
  v11 = v12;
  v4 = sub_1CA0B5D38(*(_QWORD *)(v12 + 16), a1);
  v5 = *(_QWORD *)(v3 + 16);
  v6 = *(_QWORD *)(v4 + 16);
  result = (id)swift_bridgeObjectRelease();
  if (v5 == v6)
  {
    v8 = (objc_class *)type metadata accessor for MAFloatVectorWrapper();
    v9 = (char *)objc_allocWithZone(v8);
    *(_QWORD *)&v9[OBJC_IVAR____TtC17KnowledgeGraphKit20MAFloatVectorWrapper__floatVector] = v4;
    v10.receiver = v9;
    v10.super_class = v8;
    return objc_msgSendSuper2(&v10, sel_init);
  }
  else
  {
    __break(1u);
  }
  return result;
}

id MAFloatVectorWrapper.vectorByDividingByScalar(_:)()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  id result;
  objc_class *v6;
  char *v7;
  objc_super v8;
  uint64_t v9;
  uint64_t v10;

  (*(void (**)(uint64_t *__return_ptr))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x70))(&v10);
  v1 = v10;
  v9 = v10;
  v2 = sub_1CA0B5D38(*(_QWORD *)(v10 + 16), (uint64_t (*)(_QWORD *, uint64_t *))sub_1CA0B6680);
  v3 = *(_QWORD *)(v1 + 16);
  v4 = *(_QWORD *)(v2 + 16);
  result = (id)swift_bridgeObjectRelease();
  if (v3 == v4)
  {
    v6 = (objc_class *)type metadata accessor for MAFloatVectorWrapper();
    v7 = (char *)objc_allocWithZone(v6);
    *(_QWORD *)&v7[OBJC_IVAR____TtC17KnowledgeGraphKit20MAFloatVectorWrapper__floatVector] = v2;
    v8.receiver = v7;
    v8.super_class = v6;
    return objc_msgSendSuper2(&v8, sel_init);
  }
  else
  {
    __break(1u);
  }
  return result;
}

_QWORD *MAFloatVectorWrapper.vectorByElementwiseMultiplyingByWrapper(_:)(_QWORD *a1)
{
  return sub_1CA0B0DF0(a1, (uint64_t (*)(_QWORD *, uint64_t *))sub_1CA0B66A0);
}

_QWORD *sub_1CA0B0DF0(_QWORD *a1, uint64_t (*a2)(_QWORD *, uint64_t *))
{
  _QWORD *v2;
  _QWORD *v5;
  _QWORD *v6;
  uint64_t v7;
  _QWORD *result;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  objc_class *v13;
  char *v14;
  objc_super v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;

  v5 = (_QWORD *)MEMORY[0x1E0DEEDD8];
  v6 = (*(_QWORD *(**)(uint64_t *__return_ptr))((*MEMORY[0x1E0DEEDD8] & *v2) + 0x70))(&v19);
  v7 = v19;
  result = (*(_QWORD *(**)(uint64_t *__return_ptr, _QWORD *))((*v5 & *a1) + 0x70))(&v18, v6);
  v10 = *(_QWORD *)(v7 + 16);
  if (v10 == *(_QWORD *)(v18 + 16))
  {
    v16 = v18;
    v17 = v7;
    MEMORY[0x1E0C80A78](result, v9);
    v11 = sub_1CA0B5D38(v10, a2);
    v12 = *(_QWORD *)(v11 + 16);
    swift_bridgeObjectRelease();
    result = (_QWORD *)swift_bridgeObjectRelease();
    if (v10 == v12)
    {
      v13 = (objc_class *)type metadata accessor for MAFloatVectorWrapper();
      v14 = (char *)objc_allocWithZone(v13);
      *(_QWORD *)&v14[OBJC_IVAR____TtC17KnowledgeGraphKit20MAFloatVectorWrapper__floatVector] = v11;
      v15.receiver = v14;
      v15.super_class = v13;
      return objc_msgSendSuper2(&v15, sel_init);
    }
  }
  else
  {
    __break(1u);
  }
  __break(1u);
  return result;
}

id MAFloatVectorWrapper.vectorByElementwiseRaisingToExponent(_:)(float a1)
{
  _QWORD *v1;
  uint64_t v3;
  char *v4;
  objc_class *v5;
  char *v6;
  objc_super v8;
  float v9;
  int v10;
  _QWORD v11[2];

  v11[1] = *MEMORY[0x1E0C80C00];
  (*(void (**)(_QWORD *__return_ptr))((*MEMORY[0x1E0DEEDD8] & *v1) + 0x70))(v11);
  v3 = v11[0];
  if (*(_QWORD *)(v11[0] + 16) >> 31)
  {
    __break(1u);
    goto LABEL_5;
  }
  v10 = *(_QWORD *)(v11[0] + 16);
  v9 = a1;
  swift_bridgeObjectRetain();
  v4 = (char *)v3;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
LABEL_5:
    v4 = sub_1CA0B6080(v3);
  vvpowsf((float *)v4 + 8, &v9, (const float *)v4 + 8, &v10);
  swift_bridgeObjectRelease();
  v5 = (objc_class *)type metadata accessor for MAFloatVectorWrapper();
  v6 = (char *)objc_allocWithZone(v5);
  *(_QWORD *)&v6[OBJC_IVAR____TtC17KnowledgeGraphKit20MAFloatVectorWrapper__floatVector] = v4;
  v8.receiver = v6;
  v8.super_class = v5;
  return objc_msgSendSuper2(&v8, sel_init);
}

float MAFloatVectorWrapper.dotProductWithWrapper(_:)(_QWORD *a1)
{
  _QWORD *v1;
  _QWORD *v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  vDSP_Length v7;
  float __C;
  uint64_t v10;
  _QWORD v11[2];

  v11[1] = *MEMORY[0x1E0C80C00];
  v3 = (_QWORD *)MEMORY[0x1E0DEEDD8];
  v4 = (*(_QWORD *(**)(_QWORD *__return_ptr))((*MEMORY[0x1E0DEEDD8] & *v1) + 0x70))(v11);
  v5 = v11[0];
  (*(void (**)(uint64_t *__return_ptr, _QWORD *))((*v3 & *a1) + 0x70))(&v10, v4);
  v6 = v10;
  v7 = *(_QWORD *)(v5 + 16);
  if (v7 != *(_QWORD *)(v10 + 16))
    __break(1u);
  __C = NAN;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  vDSP_dotpr((const float *)(v5 + 32), 1, (const float *)(v6 + 32), 1, &__C, v7);
  swift_bridgeObjectRelease_n();
  swift_bridgeObjectRelease_n();
  return __C;
}

id MAFloatVectorWrapper.slice(from:to:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v3;
  unint64_t v6;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  objc_class *v11;
  char *v12;
  objc_super v14;
  uint64_t v15;

  (*(void (**)(uint64_t *__return_ptr))((*MEMORY[0x1E0DEEDD8] & *v3) + 0x70))(&v15);
  if (a2 < a1)
  {
    __break(1u);
    goto LABEL_14;
  }
  if (a1 < 0)
  {
LABEL_14:
    __break(1u);
LABEL_15:
    __break(1u);
LABEL_16:
    swift_bridgeObjectRelease();
    v10 = sub_1CA0B5660(v2, v2 + 32, a1, (2 * a2) | 1);
    goto LABEL_12;
  }
  v2 = v15;
  v6 = *(_QWORD *)(v15 + 16);
  if (v6 < a1 || (uint64_t)v6 < a2)
    goto LABEL_15;
  sub_1CA1F12F4();
  swift_unknownObjectRetain_n();
  v8 = swift_dynamicCastClass();
  if (!v8)
  {
    swift_bridgeObjectRelease();
    v8 = MEMORY[0x1E0DEE9D8];
  }
  v9 = *(_QWORD *)(v8 + 16);
  swift_release();
  if (v9 != a2 - a1)
    goto LABEL_16;
  v10 = swift_dynamicCastClass();
  if (!v10)
  {
    swift_bridgeObjectRelease();
    v10 = MEMORY[0x1E0DEE9D8];
  }
LABEL_12:
  swift_bridgeObjectRelease();
  v11 = (objc_class *)type metadata accessor for MAFloatVectorWrapper();
  v12 = (char *)objc_allocWithZone(v11);
  *(_QWORD *)&v12[OBJC_IVAR____TtC17KnowledgeGraphKit20MAFloatVectorWrapper__floatVector] = v10;
  v14.receiver = v12;
  v14.super_class = v11;
  return objc_msgSendSuper2(&v14, sel_init);
}

uint64_t MAFloatVectorWrapper.count.getter()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v3;

  (*(void (**)(uint64_t *__return_ptr))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x70))(&v3);
  v1 = *(_QWORD *)(v3 + 16);
  swift_bridgeObjectRelease();
  return v1;
}

Swift::Float __swiftcall MAFloatVectorWrapper.sum()()
{
  return sub_1CA0B15C0(MEMORY[0x1E0C8C2E8]);
}

Swift::Float __swiftcall MAFloatVectorWrapper.sumOfSquares()()
{
  return sub_1CA0B15C0(MEMORY[0x1E0C8C328]);
}

Swift::Float __swiftcall MAFloatVectorWrapper.mean()()
{
  return sub_1CA0B15C0(MEMORY[0x1E0C8C1E8]);
}

float sub_1CA0B15C0(void (*a1)(uint64_t, uint64_t, float *, uint64_t))
{
  _QWORD *v1;
  uint64_t v3;
  uint64_t v4;
  float v6;
  _QWORD v7[2];

  v7[1] = *MEMORY[0x1E0C80C00];
  (*(void (**)(_QWORD *__return_ptr))((*MEMORY[0x1E0DEEDD8] & *v1) + 0x70))(v7);
  v3 = *(_QWORD *)(v7[0] + 16);
  v6 = NAN;
  v4 = v7[0] + 32;
  swift_bridgeObjectRetain();
  a1(v4, 1, &v6, v3);
  swift_bridgeObjectRelease_n();
  return v6;
}

float sub_1CA0B16C4(_QWORD *a1, uint64_t a2, void (*a3)(uint64_t, uint64_t, float *, uint64_t))
{
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  float v9;
  _QWORD v10[2];

  v10[1] = *MEMORY[0x1E0C80C00];
  (*(void (**)(_QWORD *__return_ptr))((*MEMORY[0x1E0DEEDD8] & *a1) + 0x70))(v10);
  v5 = *(_QWORD *)(v10[0] + 16);
  v9 = NAN;
  v6 = v10[0] + 32;
  v7 = a1;
  swift_bridgeObjectRetain();
  a3(v6, 1, &v9, v5);

  swift_bridgeObjectRelease_n();
  return v9;
}

Swift::Float __swiftcall MAFloatVectorWrapper.standardDeviation()()
{
  _QWORD *v0;
  const float *v1;
  vDSP_Length v2;
  uint64_t __StandardDeviation;
  _QWORD v5[2];

  v5[1] = *MEMORY[0x1E0C80C00];
  (*(void (**)(_QWORD *__return_ptr))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x70))(v5);
  __StandardDeviation = 0;
  v1 = (const float *)(v5[0] + 32);
  v2 = *(_QWORD *)(v5[0] + 16);
  swift_bridgeObjectRetain();
  vDSP_normalize(v1, 1, 0, 1, (float *)&__StandardDeviation + 1, (float *)&__StandardDeviation, v2);
  swift_bridgeObjectRelease_n();
  return *(float *)&__StandardDeviation;
}

uint64_t MAFloatVectorWrapper.array()()
{
  _QWORD *v0;
  uint64_t v2;

  (*(void (**)(uint64_t *__return_ptr))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x70))(&v2);
  return v2;
}

_QWORD *MAFloatVectorWrapper.data()()
{
  _QWORD *v0;
  _QWORD *result;
  unint64_t v2;
  uint64_t v3;
  uint64_t v4;

  result = (*(_QWORD *(**)(uint64_t *__return_ptr))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x70))(&v4);
  v2 = *(_QWORD *)(v4 + 16);
  if (v2 >> 61)
  {
    __break(1u);
  }
  else
  {
    v3 = sub_1CA0B19AC(v4 + 32, v4 + 32 + 4 * v2);
    swift_bridgeObjectRelease();
    return (_QWORD *)v3;
  }
  return result;
}

uint64_t sub_1CA0B19AC(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  _BYTE *v3;
  _BYTE *v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD v8[5];

  v8[3] = MEMORY[0x1E0DEAC20];
  v8[4] = MEMORY[0x1E0CB1AA8];
  v8[0] = a1;
  v8[1] = a2;
  v2 = __swift_project_boxed_opaque_existential_1(v8, MEMORY[0x1E0DEAC20]);
  v3 = (_BYTE *)*v2;
  if (*v2 && (v4 = (_BYTE *)v2[1], v5 = v4 - v3, v4 != v3))
  {
    if (v5 <= 14)
    {
      v6 = sub_1CA0B66F4(v3, v4);
    }
    else if ((unint64_t)v5 >= 0x7FFFFFFF)
    {
      v6 = sub_1CA0B6834((uint64_t)v3, (uint64_t)v4);
    }
    else
    {
      v6 = sub_1CA0B67B4((uint64_t)v3, (uint64_t)v4);
    }
  }
  else
  {
    v6 = 0;
  }
  __swift_destroy_boxed_opaque_existential_0((uint64_t)v8);
  return v6;
}

uint64_t MAFloatVectorWrapper.description.getter()
{
  return sub_1CA0B1B88((uint64_t (*)(uint64_t, _QWORD))MEMORY[0x1E0DEADB0]);
}

id sub_1CA0B1AE0(_QWORD *a1, uint64_t a2, void (*a3)(uint64_t, _QWORD))
{
  uint64_t v5;
  _QWORD *v6;
  void *v7;
  uint64_t v9;

  (*(void (**)(uint64_t *__return_ptr))((*MEMORY[0x1E0DEEDD8] & *a1) + 0x70))(&v9);
  v5 = v9;
  v6 = a1;
  a3(v5, MEMORY[0x1E0DEB188]);

  swift_bridgeObjectRelease();
  v7 = (void *)sub_1CA1F0A00();
  swift_bridgeObjectRelease();
  return v7;
}

uint64_t MAFloatVectorWrapper.debugDescription.getter()
{
  return sub_1CA0B1B88((uint64_t (*)(uint64_t, _QWORD))MEMORY[0x1E0DEADF0]);
}

uint64_t sub_1CA0B1B88(uint64_t (*a1)(uint64_t, _QWORD))
{
  _QWORD *v1;
  uint64_t v3;
  uint64_t v5;

  (*(void (**)(uint64_t *__return_ptr))((*MEMORY[0x1E0DEEDD8] & *v1) + 0x70))(&v5);
  v3 = a1(v5, MEMORY[0x1E0DEB188]);
  swift_bridgeObjectRelease();
  return v3;
}

id MAFloatVectorWrapper.naturalLogarithm()()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  id result;
  objc_class *v7;
  char *v8;
  objc_super v9;
  uint64_t v10;

  (*(void (**)(uint64_t *__return_ptr))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x70))(&v10);
  v1 = v10;
  v2 = swift_bridgeObjectRetain();
  v3 = sub_1CA0B4918(v2);
  swift_bridgeObjectRelease();
  v4 = *(_QWORD *)(v1 + 16);
  v5 = *(_QWORD *)(v3 + 16);
  result = (id)swift_bridgeObjectRelease();
  if (v4 == v5)
  {
    v7 = (objc_class *)type metadata accessor for MAFloatVectorWrapper();
    v8 = (char *)objc_allocWithZone(v7);
    *(_QWORD *)&v8[OBJC_IVAR____TtC17KnowledgeGraphKit20MAFloatVectorWrapper__floatVector] = v3;
    v9.receiver = v8;
    v9.super_class = v7;
    return objc_msgSendSuper2(&v9, sel_init);
  }
  else
  {
    __break(1u);
  }
  return result;
}

id MAFloatVectorWrapper.naturalLogarithmIfPositive()()
{
  _QWORD *v0;
  void (*v1)(_QWORD **__return_ptr);
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _DWORD *v12;
  _DWORD *v13;
  _BYTE *v14;
  objc_class *v15;
  char *v16;
  objc_super v18;
  _QWORD *v19;

  v1 = *(void (**)(_QWORD **__return_ptr))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x70);
  v1(&v19);
  v2 = v19;
  v3 = swift_bridgeObjectRetain();
  v4 = 0;
  v5 = sub_1CA0B4918(v3);
  swift_bridgeObjectRelease();
  v6 = v2[2];
  v7 = *(_QWORD *)(v5 + 16);
  swift_bridgeObjectRelease();
  if (v6 != v7)
  {
    __break(1u);
    goto LABEL_11;
  }
  v8 = swift_bridgeObjectRetain();
  v4 = sub_1CA0B4AF8(v8);
  v9 = swift_bridgeObjectRelease();
  ((void (*)(_QWORD **__return_ptr, uint64_t))v1)(&v19, v9);
  v10 = *(_QWORD *)(v4 + 16);
  if (v10 != *(_QWORD *)(v5 + 16))
  {
LABEL_11:
    __break(1u);
    goto LABEL_12;
  }
  v0 = v19;
  if (v19[2] != v10)
  {
LABEL_12:
    __break(1u);
    goto LABEL_13;
  }
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) != 0)
  {
    v11 = *(_QWORD *)(v4 + 16);
    if (!v11)
      goto LABEL_14;
    goto LABEL_6;
  }
LABEL_13:
  v5 = (uint64_t)sub_1CA0B6080(v5);
  v11 = *(_QWORD *)(v4 + 16);
  if (!v11)
    goto LABEL_14;
LABEL_6:
  v12 = (_DWORD *)(v5 + 32);
  v13 = v0 + 4;
  v14 = (_BYTE *)(v4 + 32);
  do
  {
    if (*v14 == 1)
      *v12 = *v13;
    ++v12;
    ++v13;
    ++v14;
    --v11;
  }
  while (v11);
LABEL_14:
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v15 = (objc_class *)type metadata accessor for MAFloatVectorWrapper();
  v16 = (char *)objc_allocWithZone(v15);
  *(_QWORD *)&v16[OBJC_IVAR____TtC17KnowledgeGraphKit20MAFloatVectorWrapper__floatVector] = v5;
  v18.receiver = v16;
  v18.super_class = v15;
  return objc_msgSendSuper2(&v18, sel_init);
}

Swift::Void __swiftcall MAMutableFloatVectorWrapper.append(float:)(Swift::Float a1)
{
  uint64_t v1;
  uint64_t v3;
  char *v4;
  unint64_t v5;
  unint64_t v6;

  v3 = OBJC_IVAR____TtC17KnowledgeGraphKit20MAFloatVectorWrapper__floatVector;
  v4 = *(char **)(v1 + OBJC_IVAR____TtC17KnowledgeGraphKit20MAFloatVectorWrapper__floatVector);
  swift_bridgeObjectRetain();
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    v4 = sub_1CA0E59AC(0, *((_QWORD *)v4 + 2) + 1, 1, v4);
  v6 = *((_QWORD *)v4 + 2);
  v5 = *((_QWORD *)v4 + 3);
  if (v6 >= v5 >> 1)
    v4 = sub_1CA0E59AC((char *)(v5 > 1), v6 + 1, 1, v4);
  *((_QWORD *)v4 + 2) = v6 + 1;
  *(Swift::Float *)&v4[4 * v6 + 32] = a1;
  *(_QWORD *)(v1 + v3) = v4;
  swift_bridgeObjectRelease();
}

uint64_t MAMutableFloatVectorWrapper.append(floats:count:)(char *a1, char *a2)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v7;

  v5 = OBJC_IVAR____TtC17KnowledgeGraphKit20MAFloatVectorWrapper__floatVector;
  v7 = *(_QWORD *)(v2 + OBJC_IVAR____TtC17KnowledgeGraphKit20MAFloatVectorWrapper__floatVector);
  swift_bridgeObjectRetain();
  sub_1CA0B2080(a1, a2);
  *(_QWORD *)(v2 + v5) = v7;
  return swift_bridgeObjectRelease();
}

char *sub_1CA0B2080(char *result, char *a2)
{
  char **v2;
  char *v3;
  int64_t v4;
  int64_t v5;
  uint64_t v6;
  char *v7;
  char *isUniquelyReferenced_nonNull_native;
  int64_t v9;
  int64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  BOOL v15;
  uint64_t v16;
  BOOL v17;
  int v18;
  int v19;
  unint64_t v20;
  char *v21;
  char *v22;
  char *v23;
  int v24;
  int v25;
  char *v26;
  char *v27;
  char *v28;

  v3 = *v2;
  v4 = *((_QWORD *)*v2 + 2);
  v5 = (int64_t)&a2[v4];
  if (__OFADD__(v4, a2))
  {
    __break(1u);
LABEL_15:
    __break(1u);
    goto LABEL_16;
  }
  v6 = (uint64_t)a2;
  v7 = result;
  isUniquelyReferenced_nonNull_native = (char *)swift_isUniquelyReferenced_nonNull_native();
  if (!(_DWORD)isUniquelyReferenced_nonNull_native || (v9 = *((_QWORD *)v3 + 3) >> 1, v9 < v5))
  {
    if (v4 <= v5)
      v10 = v5;
    else
      v10 = v4;
    v3 = sub_1CA0E59AC(isUniquelyReferenced_nonNull_native, v10, 1, v3);
    v9 = *((_QWORD *)v3 + 3) >> 1;
  }
  v11 = *((_QWORD *)v3 + 2);
  v12 = v9 - v11;
  result = sub_1CA0B64EC(&v3[4 * v11 + 32], v9 - v11, v7, v6);
  if (v13 < v6)
    goto LABEL_15;
  if (v13 >= 1)
  {
    v14 = *((_QWORD *)v3 + 2);
    v15 = __OFADD__(v14, v13);
    v16 = v14 + v13;
    if (v15)
    {
      __break(1u);
LABEL_33:
      v22 = v7 + 1;
LABEL_34:
      *((_QWORD *)v3 + 2) = v22;
      goto LABEL_13;
    }
    *((_QWORD *)v3 + 2) = v16;
  }
  if (v13 != v12)
    goto LABEL_13;
LABEL_16:
  if (result)
    v17 = result == a2;
  else
    v17 = 1;
  if (!v17)
  {
    v7 = (char *)*((_QWORD *)v3 + 2);
    v19 = *(_DWORD *)result;
    result += 4;
    v18 = v19;
    while (1)
    {
      v20 = *((_QWORD *)v3 + 3);
      v21 = (char *)(v20 >> 1);
      v22 = v7 + 1;
      if ((uint64_t)(v20 >> 1) < (uint64_t)(v7 + 1))
      {
        v28 = result;
        v26 = a2;
        v27 = sub_1CA0E59AC((char *)(v20 > 1), (int64_t)(v7 + 1), 1, v3);
        a2 = v26;
        v3 = v27;
        result = v28;
        v21 = (char *)(*((_QWORD *)v3 + 3) >> 1);
        if ((uint64_t)v7 >= (uint64_t)v21)
          goto LABEL_21;
LABEL_24:
        *(_DWORD *)&v3[4 * (_QWORD)v7 + 32] = v18;
        if (result == a2)
          goto LABEL_34;
        v23 = result;
        result += 4;
        while (1)
        {
          v24 = *(_DWORD *)v23;
          v23 += 4;
          v25 = v24;
          if (v21 - 1 == v7)
            break;
          *(_DWORD *)&v3[4 * (_QWORD)v7++ + 36] = v25;
          result += 4;
          if (v23 == a2)
            goto LABEL_33;
        }
        v18 = v25;
        v7 = v21;
        *((_QWORD *)v3 + 2) = v21;
      }
      else
      {
        if ((uint64_t)v7 < (uint64_t)v21)
          goto LABEL_24;
LABEL_21:
        *((_QWORD *)v3 + 2) = v7;
      }
    }
  }
LABEL_13:
  *v2 = v3;
  return result;
}

uint64_t sub_1CA0B223C(uint64_t a1)
{
  char **v1;
  uint64_t v2;
  char *v3;
  int64_t v4;
  int64_t v5;
  char *isUniquelyReferenced_nonNull_native;
  uint64_t v8;
  char *v9;
  uint64_t v11;
  BOOL v12;
  uint64_t v13;
  int64_t v14;
  uint64_t result;

  v2 = *(_QWORD *)(a1 + 16);
  v3 = *v1;
  v4 = *((_QWORD *)*v1 + 2);
  v5 = v4 + v2;
  if (__OFADD__(v4, v2))
  {
    __break(1u);
LABEL_21:
    __break(1u);
    goto LABEL_22;
  }
  isUniquelyReferenced_nonNull_native = (char *)swift_isUniquelyReferenced_nonNull_native();
  if ((_DWORD)isUniquelyReferenced_nonNull_native && v5 <= *((_QWORD *)v3 + 3) >> 1)
  {
    if (*(_QWORD *)(a1 + 16))
      goto LABEL_5;
    goto LABEL_18;
  }
  if (v4 <= v5)
    v14 = v4 + v2;
  else
    v14 = v4;
  v3 = sub_1CA0E59AC(isUniquelyReferenced_nonNull_native, v14, 1, v3);
  if (!*(_QWORD *)(a1 + 16))
  {
LABEL_18:
    if (!v2)
      goto LABEL_19;
    goto LABEL_21;
  }
LABEL_5:
  v8 = *((_QWORD *)v3 + 2);
  if ((*((_QWORD *)v3 + 3) >> 1) - v8 < v2)
  {
LABEL_22:
    __break(1u);
    goto LABEL_23;
  }
  v9 = &v3[4 * v8 + 32];
  if (a1 + 32 < (unint64_t)&v9[4 * v2] && (unint64_t)v9 < a1 + 32 + 4 * v2)
    goto LABEL_24;
  memcpy(v9, (const void *)(a1 + 32), 4 * v2);
  if (!v2)
  {
LABEL_19:
    result = swift_bridgeObjectRelease();
    *v1 = v3;
    return result;
  }
  v11 = *((_QWORD *)v3 + 2);
  v12 = __OFADD__(v11, v2);
  v13 = v11 + v2;
  if (!v12)
  {
    *((_QWORD *)v3 + 2) = v13;
    goto LABEL_19;
  }
LABEL_23:
  __break(1u);
LABEL_24:
  result = sub_1CA1F1270();
  __break(1u);
  return result;
}

uint64_t sub_1CA0B2380(uint64_t result)
{
  int64_t v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  int isUniquelyReferenced_nonNull_bridgeObject;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  BOOL v18;
  uint64_t v19;
  uint64_t v20;
  int64_t v21;
  unint64_t v22;
  unint64_t v23;
  void *v24;
  id v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  int64_t v29;
  unint64_t v30;
  unint64_t v31;
  id v32;
  int64_t v33;
  int64_t v34;
  unint64_t v35;
  int64_t v36;
  uint64_t v37;
  int64_t v38;
  int64_t v39;
  unint64_t v40;
  int64_t v41;
  uint64_t v42;
  void *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  int64_t v47;
  unint64_t v48;

  v4 = v2;
  v5 = result;
  if ((result & 0xC000000000000001) != 0)
  {
    result = sub_1CA1F0FA0();
    v6 = result;
  }
  else
  {
    v6 = *(_QWORD *)(result + 16);
  }
  if ((unint64_t)*v4 >> 62)
  {
    swift_bridgeObjectRetain();
    v20 = sub_1CA1F1234();
    result = swift_bridgeObjectRelease();
    v8 = v20 + v6;
    if (!__OFADD__(v20, v6))
      goto LABEL_6;
LABEL_24:
    __break(1u);
    goto LABEL_25;
  }
  v7 = *(_QWORD *)((*v4 & 0xFFFFFFFFFFFFF8) + 0x10);
  v8 = v7 + v6;
  if (__OFADD__(v7, v6))
    goto LABEL_24;
LABEL_6:
  v9 = *v4;
  isUniquelyReferenced_nonNull_bridgeObject = swift_isUniquelyReferenced_nonNull_bridgeObject();
  *v4 = v9;
  v11 = 0;
  if (isUniquelyReferenced_nonNull_bridgeObject && (v9 & 0x8000000000000000) == 0 && (v9 & 0x4000000000000000) == 0)
  {
    v12 = v9 & 0xFFFFFFFFFFFFFF8;
    if (v8 <= *(_QWORD *)((v9 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1)
      goto LABEL_16;
    v11 = 1;
  }
  if (v9 >> 62)
  {
    swift_bridgeObjectRetain();
    v13 = sub_1CA1F1234();
    swift_bridgeObjectRelease();
  }
  else
  {
    v13 = *(_QWORD *)((v9 & 0xFFFFFFFFFFFFF8) + 0x10);
  }
  if (v13 <= v8)
    v13 = v8;
  swift_bridgeObjectRetain();
  v14 = MEMORY[0x1CAA4A7B0](v11, v13, 1, v9);
  swift_bridgeObjectRelease();
  *v4 = v14;
  v12 = v14 & 0xFFFFFFFFFFFFFF8;
LABEL_16:
  v15 = *(_QWORD *)(v12 + 16);
  v16 = (*(_QWORD *)(v12 + 24) >> 1) - v15;
  result = (uint64_t)sub_1CA1388F0(&v44, (_QWORD *)(v12 + 8 * v15 + 32), v16, v5);
  if (result < v6)
  {
LABEL_25:
    __break(1u);
    goto LABEL_26;
  }
  if (result >= 1)
  {
    v17 = *(_QWORD *)((*v4 & 0xFFFFFFFFFFFFFF8) + 0x10);
    v18 = __OFADD__(v17, result);
    v19 = v17 + result;
    if (v18)
    {
      __break(1u);
LABEL_33:
      if (!sub_1CA1F0FD0())
        goto LABEL_21;
      sub_1CA0B6A1C();
      swift_unknownObjectRetain();
      swift_dynamicCast();
      v24 = v43;
      swift_unknownObjectRelease();
      while (2)
      {
        if (!v24)
          goto LABEL_21;
        while (1)
        {
          v26 = *v4 & 0xFFFFFFFFFFFFFF8;
          if (v3 + 1 > *(_QWORD *)(v26 + 0x18) >> 1)
          {
            sub_1CA1F0B2C();
            v26 = *v4 & 0xFFFFFFFFFFFFFF8;
          }
          v27 = *(_QWORD *)(v26 + 24) >> 1;
          if (v3 < v27)
            break;
LABEL_37:
          *(_QWORD *)(v26 + 16) = v3;
        }
        v28 = v26 + 32;
        while (1)
        {
          *(_QWORD *)(v28 + 8 * v3++) = v24;
          v29 = v47;
          if (v44 < 0)
          {
            if (!sub_1CA1F0FD0())
              goto LABEL_74;
            sub_1CA0B6A1C();
            swift_unknownObjectRetain();
            swift_dynamicCast();
            v24 = v43;
            swift_unknownObjectRelease();
            goto LABEL_49;
          }
          if (!v48)
            break;
          v30 = (v48 - 1) & v48;
          v31 = __clz(__rbit64(v48)) | (v47 << 6);
LABEL_45:
          v24 = *(void **)(*(_QWORD *)(v44 + 48) + 8 * v31);
          v32 = v24;
LABEL_46:
          v47 = v29;
          v48 = v30;
LABEL_49:
          if (!v24)
          {
LABEL_74:
            *(_QWORD *)((*v4 & 0xFFFFFFFFFFFFF8) + 0x10) = v3;
            goto LABEL_21;
          }
          if (v3 >= v27)
          {
            v26 = *v4 & 0xFFFFFFFFFFFFFF8;
            goto LABEL_37;
          }
        }
        v33 = v47 + 1;
        if (__OFADD__(v47, 1))
        {
          __break(1u);
LABEL_98:
          v24 = 0;
          v22 = 0;
          v21 = v1;
LABEL_30:
          v47 = v21;
          v48 = v22;
          continue;
        }
        break;
      }
      v34 = (unint64_t)(v46 + 64) >> 6;
      if (v33 >= v34)
      {
        v24 = 0;
        v30 = 0;
        goto LABEL_46;
      }
      v35 = *(_QWORD *)(v45 + 8 * v33);
      if (!v35)
      {
        v36 = v47 + 2;
        if (v47 + 2 >= v34)
          goto LABEL_71;
        v35 = *(_QWORD *)(v45 + 8 * v36);
        if (!v35)
        {
          v1 = v47 + 3;
          if (v47 + 3 >= v34)
            goto LABEL_72;
          v35 = *(_QWORD *)(v45 + 8 * v1);
          if (v35)
          {
            v33 = v47 + 3;
            goto LABEL_55;
          }
          v36 = v47 + 4;
          if (v47 + 4 >= v34)
          {
            v24 = 0;
            v30 = 0;
            v29 = v47 + 3;
            goto LABEL_46;
          }
          v35 = *(_QWORD *)(v45 + 8 * v36);
          if (!v35)
          {
            v33 = v47 + 5;
            if (v47 + 5 >= v34)
            {
LABEL_72:
              v24 = 0;
              v30 = 0;
              v29 = v36;
              goto LABEL_46;
            }
            v35 = *(_QWORD *)(v45 + 8 * v33);
            if (!v35)
            {
              v33 = v34 - 1;
              v37 = v47 + 6;
              while (v34 != v37)
              {
                v35 = *(_QWORD *)(v45 + 8 * v37++);
                if (v35)
                {
                  v33 = v37 - 1;
                  goto LABEL_55;
                }
              }
LABEL_71:
              v24 = 0;
              v30 = 0;
              v29 = v33;
              goto LABEL_46;
            }
            goto LABEL_55;
          }
        }
        v33 = v36;
      }
LABEL_55:
      v30 = (v35 - 1) & v35;
      v31 = __clz(__rbit64(v35)) + (v33 << 6);
      v29 = v33;
      goto LABEL_45;
    }
    *(_QWORD *)((*v4 & 0xFFFFFFFFFFFFFF8) + 0x10) = v19;
  }
  if (result != v16)
  {
LABEL_21:
    sub_1CA0B6A14();
    return sub_1CA1F0B14();
  }
LABEL_26:
  v3 = *(_QWORD *)((*v4 & 0xFFFFFFFFFFFFF8) + 0x10);
  v21 = v47;
  if (v44 < 0)
    goto LABEL_33;
  if (v48)
  {
    v22 = (v48 - 1) & v48;
    v23 = __clz(__rbit64(v48)) | (v47 << 6);
LABEL_29:
    v24 = *(void **)(*(_QWORD *)(v44 + 48) + 8 * v23);
    v25 = v24;
    goto LABEL_30;
  }
  v38 = v47 + 1;
  if (!__OFADD__(v47, 1))
  {
    v39 = (unint64_t)(v46 + 64) >> 6;
    if (v38 >= v39)
    {
      v24 = 0;
      v22 = 0;
      goto LABEL_30;
    }
    v40 = *(_QWORD *)(v45 + 8 * v38);
    if (v40)
      goto LABEL_79;
    v41 = v47 + 2;
    if (v47 + 2 >= v39)
    {
LABEL_95:
      v24 = 0;
      v22 = 0;
      v21 = v38;
      goto LABEL_30;
    }
    v40 = *(_QWORD *)(v45 + 8 * v41);
    if (v40)
      goto LABEL_83;
    v1 = v47 + 3;
    if (v47 + 3 < v39)
    {
      v40 = *(_QWORD *)(v45 + 8 * v1);
      if (v40)
      {
        v38 = v47 + 3;
        goto LABEL_79;
      }
      v41 = v47 + 4;
      if (v47 + 4 >= v39)
        goto LABEL_98;
      v40 = *(_QWORD *)(v45 + 8 * v41);
      if (v40)
      {
LABEL_83:
        v38 = v41;
LABEL_79:
        v22 = (v40 - 1) & v40;
        v23 = __clz(__rbit64(v40)) + (v38 << 6);
        v21 = v38;
        goto LABEL_29;
      }
      v38 = v47 + 5;
      if (v47 + 5 < v39)
      {
        v40 = *(_QWORD *)(v45 + 8 * v38);
        if (!v40)
        {
          v38 = v39 - 1;
          v42 = v47 + 6;
          do
          {
            if (v39 == v42)
              goto LABEL_95;
            v40 = *(_QWORD *)(v45 + 8 * v42++);
          }
          while (!v40);
          v38 = v42 - 1;
        }
        goto LABEL_79;
      }
    }
    v24 = 0;
    v22 = 0;
    v21 = v41;
    goto LABEL_30;
  }
  __break(1u);
  return result;
}

uint64_t sub_1CA0B295C(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  int64_t v4;
  int64_t v5;
  _QWORD *isUniquelyReferenced_nonNull_native;
  int64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v12;
  BOOL v13;
  uint64_t v14;
  int64_t v15;
  uint64_t result;

  v2 = *(_QWORD *)(a1 + 16);
  v3 = *(_QWORD **)v1;
  v4 = *(_QWORD *)(*(_QWORD *)v1 + 16);
  v5 = v4 + v2;
  if (__OFADD__(v4, v2))
  {
    __break(1u);
LABEL_21:
    __break(1u);
    goto LABEL_22;
  }
  isUniquelyReferenced_nonNull_native = (_QWORD *)swift_isUniquelyReferenced_nonNull_native();
  if ((_DWORD)isUniquelyReferenced_nonNull_native)
  {
    v8 = v3[3] >> 1;
    if (v8 >= v5)
    {
      if (*(_QWORD *)(a1 + 16))
        goto LABEL_5;
      goto LABEL_18;
    }
  }
  if (v4 <= v5)
    v15 = v4 + v2;
  else
    v15 = v4;
  v3 = sub_1CA0E5BCC(isUniquelyReferenced_nonNull_native, v15, 1, v3);
  v8 = v3[3] >> 1;
  if (!*(_QWORD *)(a1 + 16))
  {
LABEL_18:
    if (!v2)
      goto LABEL_19;
    goto LABEL_21;
  }
LABEL_5:
  v9 = v3[2];
  if (v8 - v9 < v2)
  {
LABEL_22:
    __break(1u);
    goto LABEL_23;
  }
  v10 = (unint64_t)&v3[2 * v9 + 4];
  if (a1 + 32 < v10 + 16 * v2 && v10 < a1 + 32 + 16 * v2)
    goto LABEL_24;
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EF937148);
  swift_arrayInitWithCopy();
  if (!v2)
  {
LABEL_19:
    result = swift_bridgeObjectRelease();
    *(_QWORD *)v1 = v3;
    return result;
  }
  v12 = v3[2];
  v13 = __OFADD__(v12, v2);
  v14 = v12 + v2;
  if (!v13)
  {
    v3[2] = v14;
    goto LABEL_19;
  }
LABEL_23:
  __break(1u);
LABEL_24:
  result = sub_1CA1F1270();
  __break(1u);
  return result;
}

uint64_t sub_1CA0B2AC4(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  int64_t v4;
  int64_t v5;
  _QWORD *isUniquelyReferenced_nonNull_native;
  uint64_t v8;
  unint64_t v9;
  uint64_t v11;
  BOOL v12;
  uint64_t v13;
  int64_t v14;
  uint64_t result;

  v2 = *(_QWORD *)(a1 + 16);
  v3 = *(_QWORD **)v1;
  v4 = *(_QWORD *)(*(_QWORD *)v1 + 16);
  v5 = v4 + v2;
  if (__OFADD__(v4, v2))
  {
    __break(1u);
LABEL_21:
    __break(1u);
    goto LABEL_22;
  }
  isUniquelyReferenced_nonNull_native = (_QWORD *)swift_isUniquelyReferenced_nonNull_native();
  if ((_DWORD)isUniquelyReferenced_nonNull_native && v5 <= v3[3] >> 1)
  {
    if (*(_QWORD *)(a1 + 16))
      goto LABEL_5;
    goto LABEL_18;
  }
  if (v4 <= v5)
    v14 = v4 + v2;
  else
    v14 = v4;
  v3 = sub_1CA0E5CD8(isUniquelyReferenced_nonNull_native, v14, 1, v3);
  if (!*(_QWORD *)(a1 + 16))
  {
LABEL_18:
    if (!v2)
      goto LABEL_19;
    goto LABEL_21;
  }
LABEL_5:
  v8 = v3[2];
  if ((v3[3] >> 1) - v8 < v2)
  {
LABEL_22:
    __break(1u);
    goto LABEL_23;
  }
  v9 = (unint64_t)&v3[5 * v8 + 4];
  if (a1 + 32 < v9 + 40 * v2 && v9 < a1 + 32 + 40 * v2)
    goto LABEL_24;
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EF937140);
  swift_arrayInitWithCopy();
  if (!v2)
  {
LABEL_19:
    result = swift_bridgeObjectRelease();
    *(_QWORD *)v1 = v3;
    return result;
  }
  v11 = v3[2];
  v12 = __OFADD__(v11, v2);
  v13 = v11 + v2;
  if (!v12)
  {
    v3[2] = v13;
    goto LABEL_19;
  }
LABEL_23:
  __break(1u);
LABEL_24:
  result = sub_1CA1F1270();
  __break(1u);
  return result;
}

uint64_t sub_1CA0B2C2C(uint64_t a1)
{
  uint64_t v1;
  unint64_t v2;
  _QWORD *v3;
  int64_t v4;
  int64_t v5;
  _QWORD *isUniquelyReferenced_nonNull_native;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v12;
  BOOL v13;
  uint64_t v14;
  int64_t v15;
  uint64_t result;

  v2 = *(_QWORD *)(a1 + 16);
  v3 = *(_QWORD **)v1;
  v4 = *(_QWORD *)(*(_QWORD *)v1 + 16);
  v5 = v4 + v2;
  if (__OFADD__(v4, v2))
  {
    __break(1u);
    goto LABEL_21;
  }
  isUniquelyReferenced_nonNull_native = (_QWORD *)swift_isUniquelyReferenced_nonNull_native();
  if ((_DWORD)isUniquelyReferenced_nonNull_native && v5 <= v3[3] >> 1)
  {
    v8 = *(_QWORD *)(a1 + 16);
    if (v8)
      goto LABEL_5;
LABEL_18:
    if (!v2)
      goto LABEL_19;
    goto LABEL_21;
  }
  if (v4 <= v5)
    v15 = v4 + v2;
  else
    v15 = v4;
  v3 = sub_1CA0E5DF8(isUniquelyReferenced_nonNull_native, v15, 1, v3);
  v8 = *(_QWORD *)(a1 + 16);
  if (!v8)
    goto LABEL_18;
LABEL_5:
  v9 = v3[2];
  if ((v3[3] >> 1) - v9 < (uint64_t)v8)
  {
LABEL_22:
    __break(1u);
    goto LABEL_23;
  }
  v10 = (unint64_t)&v3[2 * v9 + 4];
  if (a1 + 32 < v10 + 16 * v8 && v10 < a1 + 32 + 16 * v8)
    goto LABEL_24;
  swift_arrayInitWithCopy();
  if (v8 < v2)
  {
LABEL_21:
    __break(1u);
    goto LABEL_22;
  }
  v12 = v3[2];
  v13 = __OFADD__(v12, v8);
  v14 = v12 + v8;
  if (!v13)
  {
    v3[2] = v14;
LABEL_19:
    result = swift_bridgeObjectRelease();
    *(_QWORD *)v1 = v3;
    return result;
  }
LABEL_23:
  __break(1u);
LABEL_24:
  result = sub_1CA1F1270();
  __break(1u);
  return result;
}

uint64_t sub_1CA0B2D80(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  int64_t v4;
  int64_t v5;
  _QWORD *isUniquelyReferenced_nonNull_native;
  uint64_t v8;
  unint64_t v9;
  uint64_t v11;
  BOOL v12;
  uint64_t v13;
  int64_t v14;
  uint64_t result;

  v2 = *(_QWORD *)(a1 + 16);
  v3 = *(_QWORD **)v1;
  v4 = *(_QWORD *)(*(_QWORD *)v1 + 16);
  v5 = v4 + v2;
  if (__OFADD__(v4, v2))
  {
    __break(1u);
LABEL_21:
    __break(1u);
    goto LABEL_22;
  }
  isUniquelyReferenced_nonNull_native = (_QWORD *)swift_isUniquelyReferenced_nonNull_native();
  if ((_DWORD)isUniquelyReferenced_nonNull_native && v5 <= v3[3] >> 1)
  {
    if (*(_QWORD *)(a1 + 16))
      goto LABEL_5;
    goto LABEL_18;
  }
  if (v4 <= v5)
    v14 = v4 + v2;
  else
    v14 = v4;
  v3 = sub_1CA0E5F04(isUniquelyReferenced_nonNull_native, v14, 1, v3);
  if (!*(_QWORD *)(a1 + 16))
  {
LABEL_18:
    if (!v2)
      goto LABEL_19;
    goto LABEL_21;
  }
LABEL_5:
  v8 = v3[2];
  if ((v3[3] >> 1) - v8 < v2)
  {
LABEL_22:
    __break(1u);
    goto LABEL_23;
  }
  v9 = (unint64_t)&v3[5 * v8 + 4];
  if (a1 + 32 < v9 + 40 * v2 && v9 < a1 + 32 + 40 * v2)
    goto LABEL_24;
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EF93A380);
  swift_arrayInitWithCopy();
  if (!v2)
  {
LABEL_19:
    result = swift_bridgeObjectRelease();
    *(_QWORD *)v1 = v3;
    return result;
  }
  v11 = v3[2];
  v12 = __OFADD__(v11, v2);
  v13 = v11 + v2;
  if (!v12)
  {
    v3[2] = v13;
    goto LABEL_19;
  }
LABEL_23:
  __break(1u);
LABEL_24:
  result = sub_1CA1F1270();
  __break(1u);
  return result;
}

uint64_t sub_1CA0B2EE8(unint64_t a1)
{
  return sub_1CA0B2F00(a1, (uint64_t (*)(uint64_t, _QWORD, unint64_t))sub_1CA0B60E4);
}

uint64_t sub_1CA0B2EF4(unint64_t a1)
{
  return sub_1CA0B2F00(a1, (uint64_t (*)(uint64_t, _QWORD, unint64_t))sub_1CA0B62E8);
}

uint64_t sub_1CA0B2F00(unint64_t a1, uint64_t (*a2)(uint64_t, _QWORD, unint64_t))
{
  unint64_t *v2;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int isUniquelyReferenced_nonNull_bridgeObject;
  uint64_t v10;
  uint64_t v11;
  uint64_t result;
  uint64_t v13;
  uint64_t v14;
  BOOL v15;
  uint64_t v16;

  if (a1 >> 62)
  {
    swift_bridgeObjectRetain();
    v5 = sub_1CA1F1234();
    swift_bridgeObjectRelease();
  }
  else
  {
    v5 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
  }
  v6 = *v2;
  if (*v2 >> 62)
  {
    swift_bridgeObjectRetain();
    v7 = sub_1CA1F1234();
    swift_bridgeObjectRelease();
    v8 = v7 + v5;
    if (!__OFADD__(v7, v5))
      goto LABEL_5;
LABEL_23:
    __break(1u);
    goto LABEL_24;
  }
  v7 = *(_QWORD *)((v6 & 0xFFFFFFFFFFFFF8) + 0x10);
  v8 = v7 + v5;
  if (__OFADD__(v7, v5))
    goto LABEL_23;
LABEL_5:
  v6 = *v2;
  isUniquelyReferenced_nonNull_bridgeObject = swift_isUniquelyReferenced_nonNull_bridgeObject();
  *v2 = v6;
  v7 = 0;
  if (isUniquelyReferenced_nonNull_bridgeObject && (v6 & 0x8000000000000000) == 0 && (v6 & 0x4000000000000000) == 0)
  {
    v10 = v6 & 0xFFFFFFFFFFFFFF8;
    if (v8 <= *(_QWORD *)((v6 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1)
      goto LABEL_15;
    v7 = 1;
  }
  if (v6 >> 62)
    goto LABEL_25;
  v11 = *(_QWORD *)((v6 & 0xFFFFFFFFFFFFF8) + 0x10);
  while (1)
  {
    if (v11 <= v8)
      v11 = v8;
    swift_bridgeObjectRetain();
    v6 = MEMORY[0x1CAA4A7B0](v7, v11, 1, v6);
    swift_bridgeObjectRelease();
    *v2 = v6;
    v10 = v6 & 0xFFFFFFFFFFFFFF8;
LABEL_15:
    result = a2(v10 + 8 * *(_QWORD *)(v10 + 16) + 32, (*(_QWORD *)(v10 + 24) >> 1) - *(_QWORD *)(v10 + 16), a1);
    if (v13 >= v5)
      break;
LABEL_24:
    __break(1u);
LABEL_25:
    swift_bridgeObjectRetain();
    v11 = sub_1CA1F1234();
    swift_bridgeObjectRelease();
  }
  if (v13 < 1)
    goto LABEL_19;
  v14 = *(_QWORD *)((*v2 & 0xFFFFFFFFFFFFFF8) + 0x10);
  v15 = __OFADD__(v14, v13);
  v16 = v14 + v13;
  if (!v15)
  {
    *(_QWORD *)((*v2 & 0xFFFFFFFFFFFFFF8) + 0x10) = v16;
LABEL_19:
    swift_bridgeObjectRelease();
    return sub_1CA1F0B14();
  }
  __break(1u);
  return result;
}

uint64_t MAMutableFloatVectorWrapper.append(doubles:count:)(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  int64_t v5;
  int64_t v6;
  double *v8;
  char *isUniquelyReferenced_nonNull_native;
  int64_t v10;
  uint64_t v11;
  double v12;
  char *v13;
  unint64_t v14;
  unint64_t v15;
  float v16;

  v3 = OBJC_IVAR____TtC17KnowledgeGraphKit20MAFloatVectorWrapper__floatVector;
  v4 = *(char **)(v2 + OBJC_IVAR____TtC17KnowledgeGraphKit20MAFloatVectorWrapper__floatVector);
  v5 = *((_QWORD *)v4 + 2);
  v6 = v5 + a2;
  if (__OFADD__(v5, a2))
  {
    __break(1u);
  }
  else
  {
    v8 = (double *)result;
    swift_bridgeObjectRetain();
    isUniquelyReferenced_nonNull_native = (char *)swift_isUniquelyReferenced_nonNull_native();
    if (!(_DWORD)isUniquelyReferenced_nonNull_native || v6 > *((_QWORD *)v4 + 3) >> 1)
    {
      if (v5 <= v6)
        v10 = v6;
      else
        v10 = v5;
      v4 = sub_1CA0E59AC(isUniquelyReferenced_nonNull_native, v10, 0, v4);
    }
    *(_QWORD *)(v2 + v3) = v4;
    result = swift_bridgeObjectRelease();
    if (a2)
    {
      v11 = 8 * a2;
      do
      {
        v12 = *v8;
        v13 = *(char **)(v2 + v3);
        swift_bridgeObjectRetain();
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
          v13 = sub_1CA0E59AC(0, *((_QWORD *)v13 + 2) + 1, 1, v13);
        v15 = *((_QWORD *)v13 + 2);
        v14 = *((_QWORD *)v13 + 3);
        if (v15 >= v14 >> 1)
          v13 = sub_1CA0E59AC((char *)(v14 > 1), v15 + 1, 1, v13);
        ++v8;
        v16 = v12;
        *((_QWORD *)v13 + 2) = v15 + 1;
        *(float *)&v13[4 * v15 + 32] = v16;
        *(_QWORD *)(v2 + v3) = v13;
        result = swift_bridgeObjectRelease();
        v11 -= 8;
      }
      while (v11);
    }
  }
  return result;
}

uint64_t MAMutableFloatVectorWrapper.append(vector:)(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;

  (*(void (**)(uint64_t *__return_ptr))((*MEMORY[0x1E0DEEDD8] & *a1) + 0x70))(&v6);
  v2 = v6;
  v3 = OBJC_IVAR____TtC17KnowledgeGraphKit20MAFloatVectorWrapper__floatVector;
  v5 = *(_QWORD *)(v1 + OBJC_IVAR____TtC17KnowledgeGraphKit20MAFloatVectorWrapper__floatVector);
  swift_bridgeObjectRetain();
  sub_1CA0B223C(v2);
  *(_QWORD *)(v1 + v3) = v5;
  return swift_bridgeObjectRelease();
}

Swift::Void __swiftcall MAMutableFloatVectorWrapper.append(array:)(Swift::OpaquePointer array)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = OBJC_IVAR____TtC17KnowledgeGraphKit20MAFloatVectorWrapper__floatVector;
  v4 = *(_QWORD *)(v1 + OBJC_IVAR____TtC17KnowledgeGraphKit20MAFloatVectorWrapper__floatVector);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  sub_1CA0B223C((uint64_t)array._rawValue);
  *(_QWORD *)(v1 + v3) = v4;
  swift_bridgeObjectRelease();
}

Swift::Void __swiftcall MAMutableFloatVectorWrapper.setFloat(_:at:)(Swift::Float _, Swift::Int at)
{
  uint64_t v2;
  uint64_t v5;
  char *v6;

  v5 = OBJC_IVAR____TtC17KnowledgeGraphKit20MAFloatVectorWrapper__floatVector;
  v6 = *(char **)(v2 + OBJC_IVAR____TtC17KnowledgeGraphKit20MAFloatVectorWrapper__floatVector);
  swift_bridgeObjectRetain();
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) != 0)
  {
    if ((at & 0x8000000000000000) == 0)
      goto LABEL_3;
LABEL_6:
    __break(1u);
    goto LABEL_7;
  }
  v6 = sub_1CA0B6080((uint64_t)v6);
  if (at < 0)
    goto LABEL_6;
LABEL_3:
  if (*((_QWORD *)v6 + 2) > (unint64_t)at)
  {
    *(Swift::Float *)&v6[4 * at + 32] = _;
    *(_QWORD *)(v2 + v5) = v6;
    swift_bridgeObjectRelease();
    return;
  }
LABEL_7:
  __break(1u);
}

uint64_t MAMutableFloatVectorWrapper.subtract(_:)(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  vDSP_Length v6;
  char *v7;
  uint64_t v9;

  v2 = v1;
  (*(void (**)(uint64_t *__return_ptr))((*MEMORY[0x1E0DEEDD8] & *a1) + 0x70))(&v9);
  v3 = v9;
  v4 = OBJC_IVAR____TtC17KnowledgeGraphKit20MAFloatVectorWrapper__floatVector;
  v5 = *(_QWORD *)(v1 + OBJC_IVAR____TtC17KnowledgeGraphKit20MAFloatVectorWrapper__floatVector);
  v6 = *(_QWORD *)(v5 + 16);
  if (v6 != *(_QWORD *)(v9 + 16))
  {
    __break(1u);
    goto LABEL_5;
  }
  swift_bridgeObjectRetain_n();
  v7 = (char *)v5;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
LABEL_5:
    v7 = sub_1CA0B6080(v5);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  vDSP_vsub((const float *)(v3 + 32), 1, (const float *)(v5 + 32), 1, (float *)v7 + 8, 1, v6);
  swift_bridgeObjectRelease_n();
  swift_bridgeObjectRelease_n();
  *(_QWORD *)(v2 + v4) = v7;
  return swift_bridgeObjectRelease();
}

uint64_t MAMutableFloatVectorWrapper.add(_:)(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  vDSP_Length v6;
  char *v7;
  uint64_t v9;

  v2 = v1;
  (*(void (**)(uint64_t *__return_ptr))((*MEMORY[0x1E0DEEDD8] & *a1) + 0x70))(&v9);
  v3 = v9;
  v4 = OBJC_IVAR____TtC17KnowledgeGraphKit20MAFloatVectorWrapper__floatVector;
  v5 = *(_QWORD *)(v2 + OBJC_IVAR____TtC17KnowledgeGraphKit20MAFloatVectorWrapper__floatVector);
  v6 = *(_QWORD *)(v5 + 16);
  if (v6 != *(_QWORD *)(v9 + 16))
  {
    __break(1u);
    goto LABEL_5;
  }
  swift_bridgeObjectRetain_n();
  v7 = (char *)v5;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
LABEL_5:
    v7 = sub_1CA0B6080(v5);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  vDSP_vadd((const float *)(v5 + 32), 1, (const float *)(v3 + 32), 1, (float *)v7 + 8, 1, v6);
  swift_bridgeObjectRelease_n();
  swift_bridgeObjectRelease_n();
  *(_QWORD *)(v2 + v4) = v7;
  return swift_bridgeObjectRelease();
}

Swift::Void __swiftcall MAMutableFloatVectorWrapper.subtract(_:)(Swift::Float a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  vDSP_Length v5;
  char *v6;
  float __B;
  uint64_t v8;

  v8 = *MEMORY[0x1E0C80C00];
  v3 = OBJC_IVAR____TtC17KnowledgeGraphKit20MAFloatVectorWrapper__floatVector;
  v4 = *(_QWORD *)(v1 + OBJC_IVAR____TtC17KnowledgeGraphKit20MAFloatVectorWrapper__floatVector);
  v5 = *(_QWORD *)(v4 + 16);
  swift_bridgeObjectRetain_n();
  v6 = (char *)v4;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    v6 = sub_1CA0B6080(v4);
  __B = -a1;
  swift_bridgeObjectRetain();
  vDSP_vsadd((const float *)(v4 + 32), 1, &__B, (float *)v6 + 8, 1, v5);
  swift_bridgeObjectRelease_n();
  *(_QWORD *)(v1 + v3) = v6;
  swift_bridgeObjectRelease();
}

Swift::Void __swiftcall MAMutableFloatVectorWrapper.add(_:)(Swift::Float a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  vDSP_Length v5;
  char *v6;
  Swift::Float __B;
  uint64_t v8;

  v8 = *MEMORY[0x1E0C80C00];
  v3 = OBJC_IVAR____TtC17KnowledgeGraphKit20MAFloatVectorWrapper__floatVector;
  v4 = *(_QWORD *)(v1 + OBJC_IVAR____TtC17KnowledgeGraphKit20MAFloatVectorWrapper__floatVector);
  v5 = *(_QWORD *)(v4 + 16);
  swift_bridgeObjectRetain_n();
  v6 = (char *)v4;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    v6 = sub_1CA0B6080(v4);
  __B = a1;
  swift_bridgeObjectRetain();
  vDSP_vsadd((const float *)(v4 + 32), 1, &__B, (float *)v6 + 8, 1, v5);
  swift_bridgeObjectRelease_n();
  *(_QWORD *)(v1 + v3) = v6;
  swift_bridgeObjectRelease();
}

Swift::Void __swiftcall MAMutableFloatVectorWrapper.multiply(_:)(Swift::Float a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD v5[3];
  Swift::Float v6;

  v2 = OBJC_IVAR____TtC17KnowledgeGraphKit20MAFloatVectorWrapper__floatVector;
  v3 = *(_QWORD *)(v1 + OBJC_IVAR____TtC17KnowledgeGraphKit20MAFloatVectorWrapper__floatVector);
  v6 = a1;
  v5[2] = &v6;
  swift_bridgeObjectRetain();
  v4 = sub_1CA0B49E4((void (*)(int *__return_ptr, int *))sub_1CA0B66DC, (uint64_t)v5, v3);
  swift_bridgeObjectRelease();
  *(_QWORD *)(v1 + v2) = v4;
  swift_bridgeObjectRelease();
}

Swift::Void __swiftcall MAMutableFloatVectorWrapper.divide(_:)(Swift::Float a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  vDSP_Length v5;
  char *v6;
  Swift::Float v7;

  v3 = OBJC_IVAR____TtC17KnowledgeGraphKit20MAFloatVectorWrapper__floatVector;
  v4 = *(_QWORD *)(v1 + OBJC_IVAR____TtC17KnowledgeGraphKit20MAFloatVectorWrapper__floatVector);
  v5 = *(_QWORD *)(v4 + 16);
  swift_bridgeObjectRetain_n();
  v6 = (char *)v4;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    v6 = sub_1CA0B6080(v4);
  v7 = a1;
  swift_bridgeObjectRetain();
  vDSP_vsdiv((const float *)(v4 + 32), 1, &v7, (float *)v6 + 8, 1, v5);
  swift_bridgeObjectRelease_n();
  *(_QWORD *)(v1 + v3) = v6;
  swift_bridgeObjectRelease();
}

uint64_t MAMutableFloatVectorWrapper.elementwiseMultiplyByWrapper(_:)(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  vDSP_Length v6;
  char *v7;
  uint64_t v9;

  v2 = v1;
  (*(void (**)(uint64_t *__return_ptr))((*MEMORY[0x1E0DEEDD8] & *a1) + 0x70))(&v9);
  v3 = v9;
  v4 = OBJC_IVAR____TtC17KnowledgeGraphKit20MAFloatVectorWrapper__floatVector;
  v5 = *(_QWORD *)(v2 + OBJC_IVAR____TtC17KnowledgeGraphKit20MAFloatVectorWrapper__floatVector);
  v6 = *(_QWORD *)(v5 + 16);
  if (*(_QWORD *)(v9 + 16) != v6)
  {
    __break(1u);
    goto LABEL_5;
  }
  swift_bridgeObjectRetain_n();
  v7 = (char *)v5;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
LABEL_5:
    v7 = sub_1CA0B6080(v5);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  vDSP_vmul((const float *)(v5 + 32), 1, (const float *)(v3 + 32), 1, (float *)v7 + 8, 1, v6);
  swift_bridgeObjectRelease_n();
  swift_bridgeObjectRelease_n();
  *(_QWORD *)(v2 + v4) = v7;
  return swift_bridgeObjectRelease();
}

Swift::Void __swiftcall MAMutableFloatVectorWrapper.elementwiseRaiseToExponent(_:)(Swift::Float a1)
{
  uint64_t v1;
  uint64_t v2;
  char *v3;
  Swift::Float v4;
  int v5;
  uint64_t v6;

  v6 = *MEMORY[0x1E0C80C00];
  v2 = OBJC_IVAR____TtC17KnowledgeGraphKit20MAFloatVectorWrapper__floatVector;
  v3 = *(char **)(v1 + OBJC_IVAR____TtC17KnowledgeGraphKit20MAFloatVectorWrapper__floatVector);
  if (*((_QWORD *)v3 + 2) >> 31)
  {
    __break(1u);
    goto LABEL_5;
  }
  v5 = *((_QWORD *)v3 + 2);
  v4 = a1;
  swift_bridgeObjectRetain();
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
LABEL_5:
    v3 = sub_1CA0B6080((uint64_t)v3);
  vvpowsf((float *)v3 + 8, &v4, (const float *)v3 + 8, &v5);
  *(_QWORD *)(v1 + v2) = v3;
  swift_bridgeObjectRelease();
}

uint64_t MAFloatVectorWrapper.isApproximatelyEqual(to:)(_QWORD *a1)
{
  _QWORD *v1;
  _QWORD *v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  unsigned __int8 v7;
  uint64_t v9;
  uint64_t v10;

  v3 = (_QWORD *)MEMORY[0x1E0DEEDD8];
  v4 = (*(_QWORD *(**)(uint64_t *__return_ptr))((*MEMORY[0x1E0DEEDD8] & *v1) + 0x70))(&v10);
  v5 = v10;
  (*(void (**)(uint64_t *__return_ptr, _QWORD *))((*v3 & *a1) + 0x70))(&v9, v4);
  v6 = *(_QWORD *)(v5 + 16);
  if (v6 == *(_QWORD *)(v9 + 16))
    v7 = sub_1CA0B68AC((float *)(v9 + 32), v6, (float *)(v5 + 32), 0.00000011921, 0.00000011921);
  else
    v7 = 0;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v7 & 1;
}

uint64_t MAFloatVectorWrapper.isApproximatelyEqual(to:epsilon:)(_QWORD *a1, float a2)
{
  _QWORD *v2;
  _QWORD *v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  unsigned __int8 v9;
  uint64_t v11;
  uint64_t v12;

  v5 = (_QWORD *)MEMORY[0x1E0DEEDD8];
  v6 = (*(_QWORD *(**)(uint64_t *__return_ptr))((*MEMORY[0x1E0DEEDD8] & *v2) + 0x70))(&v12);
  v7 = v12;
  (*(void (**)(uint64_t *__return_ptr, _QWORD *))((*v5 & *a1) + 0x70))(&v11, v6);
  v8 = *(_QWORD *)(v7 + 16);
  if (v8 == *(_QWORD *)(v11 + 16))
    v9 = sub_1CA0B68AC((float *)(v11 + 32), v8, (float *)(v7 + 32), 0.0, a2);
  else
    v9 = 0;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v9 & 1;
}

BOOL MAFloatVectorWrapper.isEqual(_:)(uint64_t a1)
{
  _QWORD *v1;
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v4;
  uint64_t v5;
  BOOL v6;
  _QWORD *v8;
  _QWORD v9[4];

  sub_1CA0B6950(a1, (uint64_t)v9);
  if (!v9[3])
  {
    sub_1CA0B6AD4((uint64_t)v9, &qword_1ED8528F8);
    return 0;
  }
  type metadata accessor for MAFloatVectorWrapper();
  if ((swift_dynamicCast() & 1) == 0)
    return 0;
  v2 = v8;
  if (v8 == v1)
  {

    return 1;
  }
  else
  {
    v3 = (_QWORD *)MEMORY[0x1E0DEEDD8];
    v4 = (*(_QWORD *(**)(_QWORD *__return_ptr))((*MEMORY[0x1E0DEEDD8] & *v1) + 0x70))(v9);
    v5 = v9[0];
    (*(void (**)(_QWORD **__return_ptr, _QWORD *))((*v3 & *v8) + 0x70))(&v8, v4);
    v6 = sub_1CA0B5368(v5, (uint64_t)v8);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();

  }
  return v6;
}

uint64_t MAFloatVectorWrapper.hash.getter()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;

  (*(void (**)(uint64_t *__return_ptr))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x70))(&v5);
  v1 = v5;
  sub_1CA1F13F0();
  sub_1CA0B53DC((uint64_t)&v4, v1);
  v2 = sub_1CA1F1438();
  swift_bridgeObjectRelease();
  return v2;
}

uint64_t sub_1CA0B4464(unint64_t a1, double a2)
{
  uint64_t result;
  double *v4;
  unint64_t v5;
  double v6;
  int64x2_t v7;
  int64x2_t *v8;
  unint64_t v9;
  unint64_t v10;

  if ((a1 & 0x8000000000000000) != 0)
  {
    result = sub_1CA1F11BC();
    __break(1u);
    return result;
  }
  if (!a1)
    return MEMORY[0x1E0DEE9D8];
  result = sub_1CA1F0B68();
  *(_QWORD *)(result + 16) = a1;
  v4 = (double *)(result + 32);
  if (a1 < 4)
  {
    v5 = 0;
    v6 = a2;
LABEL_9:
    v10 = a1 - v5;
    do
    {
      *v4++ = v6;
      --v10;
    }
    while (v10);
    return result;
  }
  v5 = a1 & 0xFFFFFFFFFFFFFFFCLL;
  v4 += a1 & 0xFFFFFFFFFFFFFFFCLL;
  v6 = a2;
  v7 = vdupq_lane_s64(*(uint64_t *)&a2, 0);
  v8 = (int64x2_t *)(result + 48);
  v9 = a1 & 0xFFFFFFFFFFFFFFFCLL;
  do
  {
    v8[-1] = v7;
    *v8 = v7;
    v8 += 2;
    v9 -= 4;
  }
  while (v9);
  if (v5 != a1)
    goto LABEL_9;
  return result;
}

uint64_t sub_1CA0B4554(unint64_t a1, unint64_t a2)
{
  return sub_1CA0B465C(a1, a2);
}

uint64_t sub_1CA0B4560(unint64_t a1, int32x2_t a2)
{
  uint64_t result;
  __int32 *v4;
  unint64_t v5;
  __int32 v6;
  int32x4_t v7;
  int32x4_t *v8;
  unint64_t v9;
  unint64_t v10;

  if ((a1 & 0x8000000000000000) != 0)
  {
    result = sub_1CA1F11BC();
    __break(1u);
    return result;
  }
  if (!a1)
    return MEMORY[0x1E0DEE9D8];
  result = sub_1CA1F0B68();
  *(_QWORD *)(result + 16) = a1;
  v4 = (__int32 *)(result + 32);
  if (a1 < 8)
  {
    v5 = 0;
    v6 = a2.i32[0];
LABEL_9:
    v10 = a1 - v5;
    do
    {
      *v4++ = v6;
      --v10;
    }
    while (v10);
    return result;
  }
  v5 = a1 & 0xFFFFFFFFFFFFFFF8;
  v4 += a1 & 0xFFFFFFFFFFFFFFF8;
  v6 = a2.i32[0];
  v7 = vdupq_lane_s32(a2, 0);
  v8 = (int32x4_t *)(result + 48);
  v9 = a1 & 0xFFFFFFFFFFFFFFF8;
  do
  {
    v8[-1] = v7;
    *v8 = v7;
    v8 += 2;
    v9 -= 8;
  }
  while (v9);
  if (v5 != a1)
    goto LABEL_9;
  return result;
}

uint64_t sub_1CA0B4650(unint64_t a1, unint64_t a2)
{
  return sub_1CA0B465C(a1, a2);
}

uint64_t sub_1CA0B465C(unint64_t a1, unint64_t a2)
{
  uint64_t result;
  unint64_t *v5;
  unint64_t v6;
  int64x2_t v7;
  int64x2_t *v8;
  unint64_t v9;
  unint64_t v10;

  if ((a2 & 0x8000000000000000) != 0)
  {
    result = sub_1CA1F11BC();
    __break(1u);
    return result;
  }
  if (!a2)
    return MEMORY[0x1E0DEE9D8];
  result = sub_1CA1F0B68();
  *(_QWORD *)(result + 16) = a2;
  v5 = (unint64_t *)(result + 32);
  if (a2 < 4)
  {
    v6 = 0;
LABEL_9:
    v10 = a2 - v6;
    do
    {
      *v5++ = a1;
      --v10;
    }
    while (v10);
    return result;
  }
  v6 = a2 & 0xFFFFFFFFFFFFFFFCLL;
  v5 += a2 & 0xFFFFFFFFFFFFFFFCLL;
  v7 = vdupq_n_s64(a1);
  v8 = (int64x2_t *)(result + 48);
  v9 = a2 & 0xFFFFFFFFFFFFFFFCLL;
  do
  {
    v8[-1] = v7;
    *v8 = v7;
    v8 += 2;
    v9 -= 4;
  }
  while (v9);
  if (v6 != a2)
    goto LABEL_9;
  return result;
}

uint64_t sub_1CA0B4740(unsigned int a1, unint64_t a2)
{
  uint64_t result;
  unsigned int *v5;
  unint64_t v6;
  int32x4_t v7;
  int32x4_t *v8;
  unint64_t v9;
  unint64_t v10;

  if ((a2 & 0x8000000000000000) != 0)
  {
    result = sub_1CA1F11BC();
    __break(1u);
    return result;
  }
  if (!a2)
    return MEMORY[0x1E0DEE9D8];
  result = sub_1CA1F0B68();
  *(_QWORD *)(result + 16) = a2;
  v5 = (unsigned int *)(result + 32);
  if (a2 < 8)
  {
    v6 = 0;
LABEL_9:
    v10 = a2 - v6;
    do
    {
      *v5++ = a1;
      --v10;
    }
    while (v10);
    return result;
  }
  v6 = a2 & 0xFFFFFFFFFFFFFFF8;
  v5 += a2 & 0xFFFFFFFFFFFFFFF8;
  v7 = vdupq_n_s32(a1);
  v8 = (int32x4_t *)(result + 48);
  v9 = a2 & 0xFFFFFFFFFFFFFFF8;
  do
  {
    v8[-1] = v7;
    *v8 = v7;
    v8 += 2;
    v9 -= 8;
  }
  while (v9);
  if (v6 != a2)
    goto LABEL_9;
  return result;
}

uint64_t sub_1CA0B4828(uint64_t a1, uint64_t a2)
{
  _QWORD *v4;
  _QWORD *v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t result;

  if (a2 < 0)
  {
    result = sub_1CA1F11BC();
    __break(1u);
  }
  else
  {
    if (a2)
    {
      __swift_instantiateConcreteTypeFromMangledName(&qword_1EF937158);
      v4 = (_QWORD *)sub_1CA1F0B68();
      v5 = v4;
      v4[2] = a2;
      v4[4] = a1;
      if (a2 != 1)
      {
        v4[5] = a1;
        v6 = a2 - 2;
        if (v6)
        {
          v7 = v4 + 6;
          do
          {
            *v7++ = a1;
            swift_bridgeObjectRetain();
            --v6;
          }
          while (v6);
        }
        swift_bridgeObjectRetain();
      }
    }
    else
    {
      swift_bridgeObjectRelease();
      return MEMORY[0x1E0DEE9D8];
    }
    return (uint64_t)v5;
  }
  return result;
}

uint64_t sub_1CA0B4918(uint64_t a1)
{
  int64_t v1;
  uint64_t v2;
  float *v4;
  float v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v9;

  v1 = *(_QWORD *)(a1 + 16);
  v2 = MEMORY[0x1E0DEE9D8];
  if (v1)
  {
    v9 = MEMORY[0x1E0DEE9D8];
    sub_1CA0CD4B4(0, v1, 0);
    v2 = v9;
    v4 = (float *)(a1 + 32);
    do
    {
      v5 = logf(*v4);
      v7 = *(_QWORD *)(v9 + 16);
      v6 = *(_QWORD *)(v9 + 24);
      if (v7 >= v6 >> 1)
        sub_1CA0CD4B4(v6 > 1, v7 + 1, 1);
      *(_QWORD *)(v9 + 16) = v7 + 1;
      *(float *)(v9 + 4 * v7 + 32) = v5;
      ++v4;
      --v1;
    }
    while (v1);
  }
  return v2;
}

uint64_t sub_1CA0B49E4(void (*a1)(int *__return_ptr, int *), uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  int64_t v5;
  uint64_t v6;
  int *i;
  int v10;
  unint64_t v11;
  unint64_t v12;
  int v14;
  int v15;
  uint64_t v16;

  v4 = v3;
  v5 = *(_QWORD *)(a3 + 16);
  v6 = MEMORY[0x1E0DEE9D8];
  if (v5)
  {
    v16 = MEMORY[0x1E0DEE9D8];
    sub_1CA0CD4B4(0, v5, 0);
    v6 = v16;
    for (i = (int *)(a3 + 32); ; ++i)
    {
      v14 = *i;
      a1(&v15, &v14);
      if (v4)
        break;
      v4 = 0;
      v10 = v15;
      v16 = v6;
      v12 = *(_QWORD *)(v6 + 16);
      v11 = *(_QWORD *)(v6 + 24);
      if (v12 >= v11 >> 1)
      {
        sub_1CA0CD4B4(v11 > 1, v12 + 1, 1);
        v6 = v16;
      }
      *(_QWORD *)(v6 + 16) = v12 + 1;
      *(_DWORD *)(v6 + 4 * v12 + 32) = v10;
      if (!--v5)
        return v6;
    }
    swift_release();
  }
  return v6;
}

uint64_t sub_1CA0B4AF8(uint64_t a1)
{
  int64_t v2;
  uint64_t result;
  int *v4;
  int v5;
  int v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v2 = *(_QWORD *)(a1 + 16);
  result = MEMORY[0x1E0DEE9D8];
  if (v2)
  {
    v9 = MEMORY[0x1E0DEE9D8];
    sub_1CA0CD4D0(0, v2, 0);
    result = v9;
    v4 = (int *)(a1 + 32);
    do
    {
      v6 = *v4++;
      v5 = v6;
      v10 = result;
      v8 = *(_QWORD *)(result + 16);
      v7 = *(_QWORD *)(result + 24);
      if (v8 >= v7 >> 1)
      {
        sub_1CA0CD4D0(v7 > 1, v8 + 1, 1);
        result = v10;
      }
      *(_QWORD *)(result + 16) = v8 + 1;
      *(_BYTE *)(result + v8 + 32) = (~v5 & 0x7F800000) == 0;
      --v2;
    }
    while (v2);
  }
  return result;
}

uint64_t sub_1CA0B4BC8(void (*a1)(uint64_t *__return_ptr, _OWORD *), uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  int64_t v4;
  uint64_t v5;
  uint64_t result;
  int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char v12;
  unint64_t v13;
  int64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  int64_t v25;
  int v26;
  uint64_t v27;
  _OWORD v30[2];
  uint64_t v31;
  _OWORD v32[2];
  uint64_t v33;
  uint64_t v34;
  _BYTE v35[32];
  uint64_t v36;
  uint64_t v37;

  v4 = *(_QWORD *)(a3 + 16);
  v5 = MEMORY[0x1E0DEE9D8];
  if (!v4)
    return v5;
  v37 = MEMORY[0x1E0DEE9D8];
  sub_1CA0CD56C(0, v4, 0);
  result = sub_1CA0CF958(a3);
  v9 = result;
  v10 = 0;
  v11 = a3 + 64;
  v12 = *(_BYTE *)(a3 + 32);
  v25 = v4;
  v26 = v8;
  v27 = a3 + 64;
  while ((v9 & 0x8000000000000000) == 0 && v9 < 1 << v12)
  {
    v15 = (unint64_t)v9 >> 6;
    if ((*(_QWORD *)(v11 + 8 * ((unint64_t)v9 >> 6)) & (1 << v9)) == 0)
      goto LABEL_27;
    if (*(_DWORD *)(a3 + 36) != v8)
      goto LABEL_28;
    v16 = *(_QWORD *)(*(_QWORD *)(a3 + 48) + 8 * v9);
    sub_1CA0B6A98(*(_QWORD *)(a3 + 56) + 32 * v9, (uint64_t)v35);
    v34 = v16;
    *(_QWORD *)&v32[0] = v16;
    sub_1CA0B6A98((uint64_t)v35, (uint64_t)v32 + 8);
    v30[0] = v32[0];
    v30[1] = v32[1];
    v31 = v33;
    sub_1CA0B6AD4((uint64_t)&v34, &qword_1EF937188);
    v5 = a2;
    a1(&v36, v30);
    sub_1CA0B6AD4((uint64_t)v30, &qword_1EF937188);
    if (v3)
    {
      swift_release();
      return v5;
    }
    v17 = v36;
    v5 = v37;
    result = swift_isUniquelyReferenced_nonNull_native();
    if ((result & 1) == 0)
    {
      result = sub_1CA0CD56C(0, *(_QWORD *)(v5 + 16) + 1, 1);
      v5 = v37;
    }
    v19 = *(_QWORD *)(v5 + 16);
    v18 = *(_QWORD *)(v5 + 24);
    if (v19 >= v18 >> 1)
    {
      result = sub_1CA0CD56C(v18 > 1, v19 + 1, 1);
      v5 = v37;
    }
    *(_QWORD *)(v5 + 16) = v19 + 1;
    *(_QWORD *)(v5 + 8 * v19 + 32) = v17;
    v12 = *(_BYTE *)(a3 + 32);
    v13 = 1 << v12;
    if (v9 >= 1 << v12)
      goto LABEL_29;
    v11 = a3 + 64;
    v20 = *(_QWORD *)(v27 + 8 * v15);
    if ((v20 & (1 << v9)) == 0)
      goto LABEL_30;
    v8 = v26;
    if (*(_DWORD *)(a3 + 36) != v26)
      goto LABEL_31;
    v21 = v20 & (-2 << (v9 & 0x3F));
    if (v21)
    {
      v13 = __clz(__rbit64(v21)) | v9 & 0xFFFFFFFFFFFFFFC0;
      v14 = v25;
    }
    else
    {
      v22 = v15 + 1;
      v23 = (v13 + 63) >> 6;
      v14 = v25;
      if (v15 + 1 < v23)
      {
        v24 = *(_QWORD *)(v27 + 8 * v22);
        if (v24)
        {
LABEL_23:
          v13 = __clz(__rbit64(v24)) + (v22 << 6);
        }
        else
        {
          while (v23 - 2 != v15)
          {
            v24 = *(_QWORD *)(a3 + 80 + 8 * v15++);
            if (v24)
            {
              v22 = v15 + 1;
              goto LABEL_23;
            }
          }
        }
      }
    }
    ++v10;
    v9 = v13;
    if (v10 == v14)
      return v5;
  }
  __break(1u);
LABEL_27:
  __break(1u);
LABEL_28:
  __break(1u);
LABEL_29:
  __break(1u);
LABEL_30:
  __break(1u);
LABEL_31:
  __break(1u);
  return result;
}

uint64_t sub_1CA0B4E84(void (*a1)(uint64_t *__return_ptr, uint64_t *), uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  int64_t v5;
  uint64_t v6;
  uint64_t *i;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  v4 = v3;
  v5 = *(_QWORD *)(a3 + 16);
  v6 = MEMORY[0x1E0DEE9D8];
  if (v5)
  {
    v16 = MEMORY[0x1E0DEE9D8];
    sub_1CA0CD56C(0, v5, 0);
    v6 = v16;
    for (i = (uint64_t *)(a3 + 32); ; ++i)
    {
      v14 = *i;
      a1(&v15, &v14);
      if (v4)
        break;
      v4 = 0;
      v10 = v15;
      v16 = v6;
      v12 = *(_QWORD *)(v6 + 16);
      v11 = *(_QWORD *)(v6 + 24);
      if (v12 >= v11 >> 1)
      {
        sub_1CA0CD56C(v11 > 1, v12 + 1, 1);
        v6 = v16;
      }
      *(_QWORD *)(v6 + 16) = v12 + 1;
      *(_QWORD *)(v6 + 8 * v12 + 32) = v10;
      if (!--v5)
        return v6;
    }
    swift_release();
  }
  return v6;
}

unint64_t sub_1CA0B4F98(unint64_t result, unint64_t a2)
{
  unint64_t v2;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  char v15;
  uint64_t v16;
  uint64_t i;
  uint64_t v18;
  char v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;

  v4 = result;
  v5 = result >> 62;
  if (!(result >> 62))
  {
    v6 = *(_QWORD *)((result & 0xFFFFFFFFFFFFF8) + 0x10);
    v7 = a2 >> 62;
    if (!(a2 >> 62))
      goto LABEL_3;
LABEL_34:
    swift_bridgeObjectRetain();
    v22 = sub_1CA1F1234();
    result = swift_bridgeObjectRelease();
    if (v6 == v22)
      goto LABEL_4;
    return 0;
  }
  swift_bridgeObjectRetain();
  v6 = sub_1CA1F1234();
  result = swift_bridgeObjectRelease();
  v7 = a2 >> 62;
  if (a2 >> 62)
    goto LABEL_34;
LABEL_3:
  if (v6 != *(_QWORD *)((a2 & 0xFFFFFFFFFFFFF8) + 0x10))
    return 0;
LABEL_4:
  if (!v6)
    return 1;
  v8 = v4 & 0xFFFFFFFFFFFFFF8;
  v9 = (v4 & 0xFFFFFFFFFFFFFF8) + 32;
  if (v4 < 0)
    v8 = v4;
  if (v5)
    v9 = v8;
  v10 = a2 & 0xFFFFFFFFFFFFFF8;
  v11 = (a2 & 0xFFFFFFFFFFFFFF8) + 32;
  if ((a2 & 0x8000000000000000) != 0)
    v10 = a2;
  if (v7)
    v11 = v10;
  if (v9 == v11)
    return 1;
  if (v6 < 0)
  {
LABEL_39:
    __break(1u);
LABEL_40:
    result = MEMORY[0x1CAA4A7A4](0, v4);
    v12 = result;
    v13 = a2 & 0xC000000000000001;
    if ((a2 & 0xC000000000000001) == 0)
      goto LABEL_18;
LABEL_41:
    v14 = MEMORY[0x1CAA4A7A4](0, a2);
LABEL_20:
    v15 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v12 + 280))(v14);
    swift_release();
    swift_release();
    if ((v15 & 1) != 0)
    {
      v16 = 1 - v6;
      for (i = 5; ; ++i)
      {
        v6 = v16 + i == 5;
        if (v16 + i == 5)
          return v6;
        v20 = i - 4;
        if (v2)
        {
          v21 = MEMORY[0x1CAA4A7A4](i - 4, v4);
          if (v13)
            goto LABEL_22;
        }
        else
        {
          if (v20 >= *(_QWORD *)((v4 & 0xFFFFFFFFFFFFFF8) + 0x10))
          {
            __break(1u);
LABEL_38:
            __break(1u);
            goto LABEL_39;
          }
          v21 = *(_QWORD *)(v4 + 8 * i);
          swift_retain();
          if (v13)
          {
LABEL_22:
            v18 = MEMORY[0x1CAA4A7A4](i - 4, a2);
            goto LABEL_23;
          }
        }
        if (v20 >= *(_QWORD *)((a2 & 0xFFFFFFFFFFFFFF8) + 0x10))
          goto LABEL_38;
        v18 = *(_QWORD *)(a2 + 8 * i);
        swift_retain();
LABEL_23:
        v19 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v21 + 280))(v18);
        swift_release();
        swift_release();
        if ((v19 & 1) == 0)
          return v6;
      }
    }
    return 0;
  }
  v2 = v4 & 0xC000000000000001;
  if ((v4 & 0xC000000000000001) != 0)
    goto LABEL_40;
  if (!*(_QWORD *)((v4 & 0xFFFFFFFFFFFFFF8) + 0x10))
  {
    __break(1u);
    goto LABEL_43;
  }
  v12 = *(_QWORD *)(v4 + 32);
  result = swift_retain();
  v13 = a2 & 0xC000000000000001;
  if ((a2 & 0xC000000000000001) != 0)
    goto LABEL_41;
LABEL_18:
  if (*(_QWORD *)((a2 & 0xFFFFFFFFFFFFFF8) + 0x10))
  {
    v14 = *(_QWORD *)(a2 + 32);
    swift_retain();
    goto LABEL_20;
  }
LABEL_43:
  __break(1u);
  return result;
}

BOOL sub_1CA0B5224(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  unsigned __int16 *v3;
  unsigned __int16 *v4;
  uint64_t v5;
  _BOOL8 result;
  int v7;
  int v8;
  int v9;

  v2 = *(_QWORD *)(a1 + 16);
  if (v2 != *(_QWORD *)(a2 + 16))
    return 0;
  if (!v2 || a1 == a2)
    return 1;
  if (*(unsigned __int16 *)(a1 + 32) != *(unsigned __int16 *)(a2 + 32))
    return 0;
  v3 = (unsigned __int16 *)(a1 + 34);
  v4 = (unsigned __int16 *)(a2 + 34);
  v5 = v2 - 1;
  do
  {
    result = v5 == 0;
    if (!v5)
      break;
    v8 = *v3++;
    v7 = v8;
    v9 = *v4++;
    --v5;
  }
  while (v7 == v9);
  return result;
}

BOOL sub_1CA0B5290(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  double *v3;
  double *v4;
  uint64_t v5;
  _BOOL8 result;
  double v7;
  double v8;
  double v9;

  v2 = *(_QWORD *)(a1 + 16);
  if (v2 != *(_QWORD *)(a2 + 16))
    return 0;
  if (!v2 || a1 == a2)
    return 1;
  if (*(double *)(a1 + 32) != *(double *)(a2 + 32))
    return 0;
  v3 = (double *)(a1 + 40);
  v4 = (double *)(a2 + 40);
  v5 = v2 - 1;
  do
  {
    result = v5 == 0;
    if (!v5)
      break;
    v7 = *v3++;
    v8 = v7;
    v9 = *v4++;
    --v5;
  }
  while (v8 == v9);
  return result;
}

BOOL sub_1CA0B52FC(_QWORD *a1, _QWORD *a2)
{
  uint64_t v2;
  uint64_t *v3;
  uint64_t *v4;
  uint64_t v5;
  _BOOL8 result;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v2 = a1[2];
  if (v2 != a2[2])
    return 0;
  if (!v2 || a1 == a2)
    return 1;
  if (a1[4] != a2[4])
    return 0;
  v3 = a1 + 5;
  v4 = a2 + 5;
  v5 = v2 - 1;
  do
  {
    result = v5 == 0;
    if (!v5)
      break;
    v8 = *v3++;
    v7 = v8;
    v9 = *v4++;
    --v5;
  }
  while (v7 == v9);
  return result;
}

BOOL sub_1CA0B5368(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _BOOL8 result;
  uint64_t v4;
  float *v5;
  float *v6;
  float v7;
  float v8;
  float v9;
  float v10;
  BOOL v12;

  v2 = *(_QWORD *)(a1 + 16);
  if (v2 != *(_QWORD *)(a2 + 16))
    return 0;
  if (!v2 || a1 == a2)
    return 1;
  if (*(float *)(a1 + 32) != *(float *)(a2 + 32))
    return 0;
  if (v2 == 1)
    return 1;
  v4 = v2 - 2;
  v5 = (float *)(a1 + 36);
  v6 = (float *)(a2 + 36);
  do
  {
    v7 = *v5++;
    v8 = v7;
    v9 = *v6++;
    v10 = v9;
    v12 = v4-- != 0;
    result = v8 == v10;
  }
  while (v8 == v10 && v12);
  return result;
}

uint64_t sub_1CA0B53DC(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t result;
  uint64_t v5;

  v3 = *(_QWORD *)(a2 + 16);
  result = sub_1CA1F13FC();
  if (v3)
  {
    v5 = a2 + 32;
    do
    {
      v5 += 4;
      result = sub_1CA1F1420();
      --v3;
    }
    while (v3);
  }
  return result;
}

uint64_t sub_1CA0B5430(uint64_t a1)
{
  id v2;
  uint64_t v3;
  _QWORD *v4;
  int64_t v5;
  uint64_t v6;
  id v7;
  uint64_t result;
  _QWORD v9[3];

  v2 = objc_msgSend(*(id *)(a1 + 16), sel_count);
  if (!v2)
    return MEMORY[0x1E0DEE9D8];
  v3 = (uint64_t)v2;
  if ((uint64_t)v2 <= 0)
  {
    v4 = (_QWORD *)MEMORY[0x1E0DEE9D8];
  }
  else
  {
    __swift_instantiateConcreteTypeFromMangledName(&qword_1EF937180);
    v4 = (_QWORD *)swift_allocObject();
    v5 = _swift_stdlib_malloc_size(v4);
    v6 = v5 - 32;
    if (v5 < 32)
      v6 = v5 - 25;
    v4[2] = v3;
    v4[3] = 2 * (v6 >> 3);
  }
  swift_retain();
  v7 = sub_1CA138274(v9, (uint64_t)(v4 + 4), v3, a1);
  result = swift_release();
  if (v7 == (id)v3)
    return (uint64_t)v4;
  __break(1u);
  return result;
}

uint64_t sub_1CA0B550C(char *a1, uint64_t a2)
{
  uint64_t v4;
  char *v5;
  int64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t result;

  if (!a2)
    return MEMORY[0x1E0DEE9D8];
  if (a2 > 0)
  {
    __swift_instantiateConcreteTypeFromMangledName(&qword_1ED8527F0);
    v4 = 4 * a2;
    v5 = (char *)swift_allocObject();
    v6 = _swift_stdlib_malloc_size(v5);
    v7 = v6 - 32;
    if (v6 < 32)
      v7 = v6 - 29;
    *((_QWORD *)v5 + 2) = a2;
    *((_QWORD *)v5 + 3) = 2 * (v7 >> 2);
    v8 = v5 + 32;
    if (&v5[v4 + 32] <= a1 || v8 >= &a1[v4])
    {
      memcpy(v8, a1, 4 * a2);
      return (uint64_t)v5;
    }
  }
  result = sub_1CA1F1270();
  __break(1u);
  return result;
}

uint64_t type metadata accessor for MAMutableFloatVectorWrapper()
{
  return objc_opt_self();
}

uint64_t sub_1CA0B5660(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  unint64_t v4;
  uint64_t v5;
  uint64_t v8;
  char *v9;
  int64_t v10;
  uint64_t v11;
  char *v12;
  char *v13;
  uint64_t result;

  v4 = a4 >> 1;
  v5 = (a4 >> 1) - a3;
  if (!__OFSUB__(a4 >> 1, a3))
  {
    if (!v5)
      return MEMORY[0x1E0DEE9D8];
    v8 = 4 * v5;
    if (v5 <= 0)
    {
      v9 = (char *)MEMORY[0x1E0DEE9D8];
      if (v4 != a3)
      {
LABEL_7:
        if (v5 < 0)
          goto LABEL_19;
        v12 = v9 + 32;
        v13 = (char *)(a2 + 4 * a3);
        if (v13 < &v9[v8 + 32] && v12 < &v13[v8])
          goto LABEL_19;
        memcpy(v12, v13, 4 * v5);
        return (uint64_t)v9;
      }
    }
    else
    {
      __swift_instantiateConcreteTypeFromMangledName(&qword_1ED8527F0);
      v9 = (char *)swift_allocObject();
      v10 = _swift_stdlib_malloc_size(v9);
      v11 = v10 - 32;
      if (v10 < 32)
        v11 = v10 - 29;
      *((_QWORD *)v9 + 2) = v5;
      *((_QWORD *)v9 + 3) = 2 * (v11 >> 2);
      if (v4 != a3)
        goto LABEL_7;
    }
    __break(1u);
  }
  __break(1u);
LABEL_19:
  result = sub_1CA1F1270();
  __break(1u);
  return result;
}

uint64_t sub_1CA0B57C8(uint64_t a1)
{
  uint64_t v2;
  _QWORD *v3;
  int64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t result;
  uint64_t v8;

  if ((a1 & 0xC000000000000001) != 0)
  {
    v2 = sub_1CA1F0FA0();
    if (v2)
      goto LABEL_3;
    return MEMORY[0x1E0DEE9D8];
  }
  v2 = *(_QWORD *)(a1 + 16);
  if (!v2)
    return MEMORY[0x1E0DEE9D8];
LABEL_3:
  if (v2 <= 0)
  {
    v3 = (_QWORD *)MEMORY[0x1E0DEE9D8];
  }
  else
  {
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_1ED852A58);
    v3 = (_QWORD *)swift_allocObject();
    v4 = _swift_stdlib_malloc_size(v3);
    v5 = v4 - 32;
    if (v4 < 32)
      v5 = v4 - 25;
    v3[2] = v2;
    v3[3] = (2 * (v5 >> 3)) | 1;
  }
  swift_bridgeObjectRetain();
  v6 = sub_1CA1388F0(&v8, v3 + 4, v2, a1);
  result = sub_1CA0B6A14();
  if (v6 == (_QWORD *)v2)
    return (uint64_t)v3;
  __break(1u);
  return result;
}

_QWORD *sub_1CA0B58C0(uint64_t a1)
{
  return sub_1CA0B5C50(a1, (uint64_t *)&unk_1EF937190, (uint64_t (*)(_QWORD *, _QWORD *, uint64_t, uint64_t))sub_1CA13890C, (void (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))sub_1CA0B6B24);
}

int64_t *sub_1CA0B58DC(int64_t *result, int64_t a2)
{
  int64_t v2;
  int64_t v4;
  int64_t *v5;
  int64_t v6;
  uint64_t v7;
  int64_t v8[3];

  v2 = a2 - (_QWORD)result;
  if (__OFSUB__(a2, result))
  {
    __break(1u);
  }
  else
  {
    if (!v2)
      return (int64_t *)MEMORY[0x1E0DEE9D8];
    v4 = (int64_t)result;
    if (v2 <= 0)
    {
      v5 = (int64_t *)MEMORY[0x1E0DEE9D8];
    }
    else
    {
      __swift_instantiateConcreteTypeFromMangledName(&qword_1ED8528F0);
      v5 = (int64_t *)swift_allocObject();
      v6 = _swift_stdlib_malloc_size(v5);
      v7 = v6 - 32;
      if (v6 < 32)
        v7 = v6 - 25;
      v5[2] = v2;
      v5[3] = 2 * (v7 >> 3);
    }
    result = sub_1CA138B08(v8, v5 + 4, v2, v4, a2);
    if (result == (int64_t *)v2)
      return v5;
  }
  __break(1u);
  return result;
}

uint64_t sub_1CA0B59A0(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  unint64_t v4;
  uint64_t v5;
  uint64_t v8;
  _QWORD *v9;
  int64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t result;

  v4 = a4 >> 1;
  v5 = (a4 >> 1) - a3;
  if (!__OFSUB__(a4 >> 1, a3))
  {
    if (!v5)
      return MEMORY[0x1E0DEE9D8];
    v8 = v5;
    if (v5 <= 0)
    {
      v9 = (_QWORD *)MEMORY[0x1E0DEE9D8];
      if (v4 != a3)
      {
LABEL_7:
        if (v5 < 0)
          goto LABEL_19;
        v12 = a2 + 8 * a3;
        if (v12 < (unint64_t)&v9[v8 + 4] && (unint64_t)(v9 + 4) < v12 + v8 * 8)
          goto LABEL_19;
        sub_1CA0B6A1C();
        swift_arrayInitWithCopy();
        return (uint64_t)v9;
      }
    }
    else
    {
      __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_1ED852A58);
      v9 = (_QWORD *)swift_allocObject();
      v10 = _swift_stdlib_malloc_size(v9);
      v11 = v10 - 32;
      if (v10 < 32)
        v11 = v10 - 25;
      v9[2] = v5;
      v9[3] = (2 * (v11 >> 3)) | 1;
      if (v4 != a3)
        goto LABEL_7;
    }
    __break(1u);
  }
  __break(1u);
LABEL_19:
  result = sub_1CA1F1270();
  __break(1u);
  return result;
}

uint64_t sub_1CA0B5B20(uint64_t a1)
{
  uint64_t v2;
  _QWORD *v3;
  int64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t result;
  uint64_t v8;

  if ((a1 & 0xC000000000000001) != 0)
  {
    v2 = sub_1CA1F0FA0();
    if (v2)
      goto LABEL_3;
    return MEMORY[0x1E0DEE9D8];
  }
  v2 = *(_QWORD *)(a1 + 16);
  if (!v2)
    return MEMORY[0x1E0DEE9D8];
LABEL_3:
  if (v2 <= 0)
  {
    v3 = (_QWORD *)MEMORY[0x1E0DEE9D8];
  }
  else
  {
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_1ED852A58);
    v3 = (_QWORD *)swift_allocObject();
    v4 = _swift_stdlib_malloc_size(v3);
    v5 = v4 - 32;
    if (v4 < 32)
      v5 = v4 - 25;
    v3[2] = v2;
    v3[3] = (2 * (v5 >> 3)) | 1;
  }
  swift_bridgeObjectRetain();
  v6 = sub_1CA138C38(&v8, v3 + 4, v2, a1);
  result = sub_1CA0B6A14();
  if (v6 == (_QWORD *)v2)
    return (uint64_t)v3;
  __break(1u);
  return result;
}

_QWORD *sub_1CA0B5C18(uint64_t a1)
{
  return sub_1CA0B5C50(a1, &qword_1EF937160, (uint64_t (*)(_QWORD *, _QWORD *, uint64_t, uint64_t))sub_1CA138F4C, (void (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))sub_1CA0B6A14);
}

_QWORD *sub_1CA0B5C34(uint64_t a1)
{
  return sub_1CA0B5C50(a1, &qword_1EF937150, (uint64_t (*)(_QWORD *, _QWORD *, uint64_t, uint64_t))sub_1CA139160, (void (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))sub_1CA0B6A14);
}

_QWORD *sub_1CA0B5C50(uint64_t a1, uint64_t *a2, uint64_t (*a3)(_QWORD *, _QWORD *, uint64_t, uint64_t), void (*a4)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))
{
  uint64_t v4;
  _QWORD *v8;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD v18[5];

  v4 = *(_QWORD *)(a1 + 16);
  if (!v4)
    return (_QWORD *)MEMORY[0x1E0DEE9D8];
  __swift_instantiateConcreteTypeFromMangledName(a2);
  v8 = (_QWORD *)swift_allocObject();
  v9 = _swift_stdlib_malloc_size(v8);
  v10 = v9 - 32;
  if (v9 < 32)
    v10 = v9 - 17;
  v8[2] = v4;
  v8[3] = 2 * (v10 >> 4);
  v11 = a3(v18, v8 + 4, v4, a1);
  v12 = v18[0];
  v13 = v18[1];
  v14 = v18[2];
  v15 = v18[3];
  v16 = v18[4];
  swift_bridgeObjectRetain();
  a4(v12, v13, v14, v15, v16);
  if (v11 != v4)
  {
    __break(1u);
    return (_QWORD *)MEMORY[0x1E0DEE9D8];
  }
  return v8;
}

uint64_t sub_1CA0B5D38(uint64_t result, uint64_t (*a2)(_QWORD *, uint64_t *))
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD v7[2];
  uint64_t v8;

  if (result < 0)
  {
    __break(1u);
    goto LABEL_16;
  }
  v4 = result;
  if (result)
  {
    v5 = sub_1CA1F0B68();
    *(_QWORD *)(v5 + 16) = v4;
  }
  else
  {
    v5 = MEMORY[0x1E0DEE9D8];
  }
  v6 = v5 + 32;
  v7[1] = v4;
  v8 = 0;
  v7[0] = v5 + 32;
  result = a2(v7, &v8);
  if (v2)
  {
    if (v8 <= v4)
    {
      if (!v7[0])
      {
LABEL_20:
        __break(1u);
        goto LABEL_21;
      }
      if (v6 == v7[0])
      {
        *(_QWORD *)(v5 + 16) = v8;
        swift_bridgeObjectRelease();
        return v5;
      }
      goto LABEL_17;
    }
LABEL_16:
    __break(1u);
LABEL_17:
    __break(1u);
    goto LABEL_18;
  }
  if (v8 > v4)
  {
LABEL_18:
    __break(1u);
LABEL_19:
    __break(1u);
    goto LABEL_20;
  }
  if (v7[0])
  {
    if (v6 == v7[0])
    {
      *(_QWORD *)(v5 + 16) = v8;
      return v5;
    }
    goto LABEL_19;
  }
LABEL_21:
  __break(1u);
  return result;
}

uint64_t sub_1CA0B5E30(uint64_t a1, vDSP_Length *a2, uint64_t a3, float a4)
{
  vDSP_Length v4;
  float *v5;
  const float *v7;
  uint64_t result;
  float __B;
  uint64_t v10;

  v10 = *MEMORY[0x1E0C80C00];
  v4 = *(_QWORD *)(a1 + 8);
  if (*(_QWORD *)(a3 + 16) != v4)
  {
    __break(1u);
LABEL_5:
    __break(1u);
  }
  __B = a4;
  v5 = *(float **)a1;
  if (!*(_QWORD *)a1)
    goto LABEL_5;
  v7 = (const float *)(a3 + 32);
  swift_bridgeObjectRetain();
  vDSP_vsmul(v7, 1, &__B, v5, 1, v4);
  result = swift_bridgeObjectRelease();
  *a2 = v4;
  return result;
}

uint64_t sub_1CA0B5EF4(uint64_t result, vDSP_Length *a2, uint64_t a3, float a4)
{
  vDSP_Length v4;
  float *v5;
  const float *v7;
  float v8;

  v4 = *(_QWORD *)(result + 8);
  if (*(_QWORD *)(a3 + 16) == v4)
  {
    v8 = a4;
    v5 = *(float **)result;
    if (*(_QWORD *)result)
    {
      v7 = (const float *)(a3 + 32);
      swift_bridgeObjectRetain();
      vDSP_vsdiv(v7, 1, &v8, v5, 1, v4);
      result = swift_bridgeObjectRelease();
      *a2 = v4;
      return result;
    }
  }
  else
  {
    __break(1u);
  }
  __break(1u);
  return result;
}

uint64_t *sub_1CA0B5F94(uint64_t *result, _QWORD *a2, uint64_t a3, uint64_t a4, void (*a5)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))
{
  uint64_t v5;
  uint64_t v7;
  uint64_t v10;

  v5 = result[1];
  if (*(_QWORD *)(a3 + 16) != v5)
  {
    __break(1u);
    goto LABEL_6;
  }
  if (*(_QWORD *)(a4 + 16) != v5)
  {
LABEL_6:
    __break(1u);
    goto LABEL_7;
  }
  v7 = *result;
  if (*result)
  {
    v10 = a3 + 32;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    a5(v10, 1, a4 + 32, 1, v7, 1, v5);
    swift_bridgeObjectRelease();
    result = (uint64_t *)swift_bridgeObjectRelease();
    *a2 = v5;
    return result;
  }
LABEL_7:
  __break(1u);
  return result;
}

_QWORD *sub_1CA0B6058(_QWORD *a1)
{
  return sub_1CA0E5894(0, a1[2], 0, a1);
}

_QWORD *sub_1CA0B606C(_QWORD *a1)
{
  return sub_1CA0E59A0(0, a1[2], 0, a1);
}

char *sub_1CA0B6080(uint64_t a1)
{
  return sub_1CA0E59AC(0, *(_QWORD *)(a1 + 16), 0, (char *)a1);
}

_QWORD *sub_1CA0B6094(_QWORD *a1)
{
  return sub_1CA0E5AB8(0, a1[2], 0, a1);
}

_QWORD *sub_1CA0B60A8(_QWORD *a1)
{
  return sub_1CA0E6130(0, a1[2], 0, a1);
}

_QWORD *sub_1CA0B60BC(_QWORD *a1)
{
  return sub_1CA0E6144(0, a1[2], 0, a1);
}

_QWORD *sub_1CA0B60D0(_QWORD *a1)
{
  return sub_1CA0E637C(0, a1[2], 0, a1);
}

uint64_t sub_1CA0B60E4(unint64_t a1, uint64_t a2, unint64_t a3)
{
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t i;
  void (*v12)(_QWORD *);
  id *v13;
  id v14;
  uint64_t result;
  void (*v16[4])(id *);

  v6 = a3 >> 62;
  if (a3 >> 62)
  {
    swift_bridgeObjectRetain();
    v7 = sub_1CA1F1234();
    swift_bridgeObjectRelease();
    if (!v7)
      return a3;
  }
  else
  {
    v7 = *(_QWORD *)((a3 & 0xFFFFFFFFFFFFF8) + 0x10);
    if (!v7)
      return a3;
  }
  if (!a1)
    goto LABEL_19;
  v8 = a3 & 0xFFFFFFFFFFFFFF8;
  if (v6)
  {
    swift_bridgeObjectRetain();
    v10 = sub_1CA1F1234();
    swift_bridgeObjectRelease();
    if (v10 <= a2)
    {
      if (v7 >= 1)
      {
        sub_1CA0B6A58(&qword_1EF937178, (uint64_t *)&unk_1EF93A3A0);
        swift_bridgeObjectRetain();
        for (i = 0; i != v7; ++i)
        {
          __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_1EF93A3A0);
          v12 = sub_1CA0C671C(v16, i, a3);
          v14 = *v13;
          ((void (*)(void (**)(id *), _QWORD))v12)(v16, 0);
          *(_QWORD *)(a1 + 8 * i) = v14;
        }
        swift_bridgeObjectRelease();
        return a3;
      }
      goto LABEL_18;
    }
LABEL_17:
    __break(1u);
LABEL_18:
    __break(1u);
LABEL_19:
    __break(1u);
    goto LABEL_20;
  }
  v9 = *(_QWORD *)((a3 & 0xFFFFFFFFFFFFFF8) + 0x10);
  if (v9 > a2)
  {
    __break(1u);
    goto LABEL_17;
  }
  if (v8 + 32 >= a1 + 8 * v9 || v8 + 32 + 8 * v9 <= a1)
  {
    sub_1CA0B6A1C();
    swift_arrayInitWithCopy();
    return a3;
  }
LABEL_20:
  result = sub_1CA1F1270();
  __break(1u);
  return result;
}

uint64_t sub_1CA0B62E8(unint64_t a1, uint64_t a2, unint64_t a3)
{
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t i;
  void (*v12)(_QWORD *);
  uint64_t *v13;
  uint64_t v14;
  uint64_t result;
  uint64_t (*v16[4])();

  v6 = a3 >> 62;
  if (a3 >> 62)
  {
    swift_bridgeObjectRetain();
    v7 = sub_1CA1F1234();
    swift_bridgeObjectRelease();
    if (!v7)
      return a3;
  }
  else
  {
    v7 = *(_QWORD *)((a3 & 0xFFFFFFFFFFFFF8) + 0x10);
    if (!v7)
      return a3;
  }
  if (!a1)
    goto LABEL_19;
  v8 = a3 & 0xFFFFFFFFFFFFFF8;
  if (v6)
  {
    swift_bridgeObjectRetain();
    v10 = sub_1CA1F1234();
    swift_bridgeObjectRelease();
    if (v10 <= a2)
    {
      if (v7 >= 1)
      {
        sub_1CA0B6A58(&qword_1EF937170, &qword_1EF937168);
        swift_bridgeObjectRetain();
        for (i = 0; i != v7; ++i)
        {
          __swift_instantiateConcreteTypeFromMangledName(&qword_1EF937168);
          v12 = sub_1CA0C6774(v16, i, a3);
          v14 = *v13;
          swift_retain();
          ((void (*)(uint64_t (**)(), _QWORD))v12)(v16, 0);
          *(_QWORD *)(a1 + 8 * i) = v14;
        }
        swift_bridgeObjectRelease();
        return a3;
      }
      goto LABEL_18;
    }
LABEL_17:
    __break(1u);
LABEL_18:
    __break(1u);
LABEL_19:
    __break(1u);
    goto LABEL_20;
  }
  v9 = *(_QWORD *)((a3 & 0xFFFFFFFFFFFFFF8) + 0x10);
  if (v9 > a2)
  {
    __break(1u);
    goto LABEL_17;
  }
  if (v8 + 32 >= a1 + 8 * v9 || v8 + 32 + 8 * v9 <= a1)
  {
    type metadata accessor for MADistribution();
    swift_arrayInitWithCopy();
    return a3;
  }
LABEL_20:
  result = sub_1CA1F1270();
  __break(1u);
  return result;
}

char *sub_1CA0B64EC(char *a1, uint64_t a2, char *__src, uint64_t a4)
{
  char *v4;
  uint64_t v5;
  char *result;

  v4 = __src;
  if (!a4 || !a2)
    return v4;
  if (a4 >= a2)
    v5 = a2;
  else
    v5 = a4;
  if ((v5 & 0x8000000000000000) == 0 && (&a1[4 * v5] <= __src || &__src[4 * v5] <= a1))
  {
    memcpy(a1, __src, 4 * v5);
    v4 += 4 * v5;
    return v4;
  }
  result = (char *)sub_1CA1F1270();
  __break(1u);
  return result;
}

uint64_t sub_1CA0B65F8(uint64_t a1, vDSP_Length *a2)
{
  uint64_t v2;

  return sub_1CA0F81C4(a1, a2, **(_QWORD **)(v2 + 16), **(_QWORD **)(v2 + 24));
}

uint64_t *sub_1CA0B6618(uint64_t *a1, _QWORD *a2)
{
  uint64_t v2;

  return sub_1CA0B5F94(a1, a2, **(_QWORD **)(v2 + 16), **(_QWORD **)(v2 + 24), (void (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))MEMORY[0x1E0C8C368]);
}

uint64_t sub_1CA0B6640(uint64_t a1, vDSP_Length *a2)
{
  uint64_t v2;

  return sub_1CA0F8344(a1, a2, **(_QWORD **)(v2 + 24), *(float *)(v2 + 16));
}

uint64_t sub_1CA0B6660(uint64_t a1, vDSP_Length *a2)
{
  uint64_t v2;

  return sub_1CA0B5E30(a1, a2, **(_QWORD **)(v2 + 24), *(float *)(v2 + 16));
}

uint64_t sub_1CA0B6680(uint64_t a1, vDSP_Length *a2)
{
  uint64_t v2;

  return sub_1CA0B5EF4(a1, a2, **(_QWORD **)(v2 + 16), *(float *)(v2 + 24));
}

uint64_t *sub_1CA0B66A0(uint64_t *a1, _QWORD *a2)
{
  uint64_t v2;

  return sub_1CA0B5F94(a1, a2, **(_QWORD **)(v2 + 16), **(_QWORD **)(v2 + 24), (void (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))MEMORY[0x1E0C8C740]);
}

float sub_1CA0B66C8@<S0>(float *a1@<X0>, float *a2@<X1>, float *a3@<X8>)
{
  float result;

  result = *a1 * *a2;
  *a3 = result;
  return result;
}

float sub_1CA0B66DC@<S0>(float *a1@<X0>, float *a2@<X8>)
{
  uint64_t v2;
  float result;

  result = *a1 * **(float **)(v2 + 16);
  *a2 = result;
  return result;
}

uint64_t sub_1CA0B66F4(_BYTE *__src, _BYTE *a2)
{
  unint64_t v2;
  _BYTE __dst[14];
  char v5;
  uint64_t v6;

  v6 = *MEMORY[0x1E0C80C00];
  if (__src)
    v2 = a2 - __src;
  else
    v2 = 0;
  if ((v2 & 0x8000000000000000) != 0)
  {
    __break(1u);
LABEL_11:
    __break(1u);
  }
  if (v2 > 0xFF)
    goto LABEL_11;
  memset(__dst, 0, sizeof(__dst));
  v5 = v2;
  if (__src && a2 != __src)
    memcpy(__dst, __src, a2 - __src);
  return *(_QWORD *)__dst;
}

uint64_t sub_1CA0B67B4(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t result;

  if (a1)
    v2 = a2 - a1;
  else
    v2 = 0;
  sub_1CA1F07C0();
  swift_allocObject();
  result = sub_1CA1F0790();
  if (v2 < (uint64_t)0xFFFFFFFF80000000)
  {
    __break(1u);
    goto LABEL_9;
  }
  if (v2 > 0x7FFFFFFF)
  {
LABEL_9:
    __break(1u);
    goto LABEL_10;
  }
  if ((v2 & 0x80000000) == 0)
    return v2 << 32;
LABEL_10:
  __break(1u);
  return result;
}

uint64_t sub_1CA0B6834(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t result;

  if (a1)
    v2 = a2 - a1;
  else
    v2 = 0;
  sub_1CA1F07C0();
  swift_allocObject();
  result = sub_1CA1F0790();
  if (v2 < 0)
  {
    __break(1u);
  }
  else
  {
    sub_1CA1F0814();
    result = swift_allocObject();
    *(_QWORD *)(result + 16) = 0;
    *(_QWORD *)(result + 24) = v2;
  }
  return result;
}

float *sub_1CA0B68AC(float *result, uint64_t a2, float *a3, float a4, float a5)
{
  float v5;
  float v7;

  if (a2 < 0)
  {
    __break(1u);
  }
  else
  {
    for (; a2; --a2)
    {
      v5 = vabds_f32(*a3, *result);
      if (*a3 == *result || v5 <= a4)
        goto LABEL_5;
      v7 = fabsf(*a3) + fabsf(*result);
      if (v7 <= 3.4028e38)
      {
        if (v7 <= 1.1755e-38)
        {
          if ((float)(v5 * 8.5071e37) > a5)
            return 0;
          goto LABEL_5;
        }
      }
      else
      {
        v7 = 3.4028e38;
      }
      if ((float)(v5 / v7) > a5)
        return 0;
LABEL_5:
      ++a3;
      ++result;
    }
    return (float *)1;
  }
  return result;
}

uint64_t sub_1CA0B6950(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_1ED8528F8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t method lookup function for MAFloatVectorWrapper()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of MAFloatVectorWrapper.floatVector.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x70))();
}

uint64_t dispatch thunk of MAFloatVectorWrapper.__allocating_init(floatVector:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 120))();
}

uint64_t dispatch thunk of MAFloatVectorWrapper.__allocating_init(array:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 128))();
}

uint64_t sub_1CA0B69D0(uint64_t a1, unint64_t a2)
{
  uint64_t result;

  if (a2 >> 62 != 1)
  {
    if (a2 >> 62 != 2)
      return result;
    swift_release();
  }
  return swift_release();
}

uint64_t sub_1CA0B6A14()
{
  return swift_release();
}

unint64_t sub_1CA0B6A1C()
{
  unint64_t result;

  result = qword_1EF93A320;
  if (!qword_1EF93A320)
  {
    objc_opt_self();
    result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&qword_1EF93A320);
  }
  return result;
}

uint64_t sub_1CA0B6A58(unint64_t *a1, uint64_t *a2)
{
  uint64_t result;
  uint64_t v4;

  result = *a1;
  if (!result)
  {
    v4 = __swift_instantiateConcreteTypeFromMangledNameAbstract(a2);
    result = MEMORY[0x1CAA4BB30](MEMORY[0x1E0DEAF50], v4);
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_1CA0B6A98(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  v3 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)(a2 + 24) = v3;
  (**(void (***)(uint64_t, uint64_t))(v3 - 8))(a2, a1);
  return a2;
}

uint64_t sub_1CA0B6AD4(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;

  v3 = __swift_instantiateConcreteTypeFromMangledName(a2);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

float sub_1CA0B6B10@<S0>(float *a1@<X0>, float *a2@<X8>)
{
  return sub_1CA0B66DC(a1, a2);
}

uint64_t sub_1CA0B6B2C(uint64_t a1, vDSP_Length *a2)
{
  return sub_1CA0B6640(a1, a2);
}

uint64_t sub_1CA0B6B44()
{
  uint64_t v0;
  uint64_t result;

  type metadata accessor for GraphStoreManager.GraphStoreManagerRepository();
  v0 = swift_allocObject();
  result = swift_defaultActor_initialize();
  *(_QWORD *)(v0 + 112) = MEMORY[0x1E0DEE9E0];
  qword_1EF9371A0 = v0;
  return result;
}

BOOL sub_1CA0B6B8C(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return *a1 == *a2;
}

uint64_t sub_1CA0B6BA0()
{
  sub_1CA1F13F0();
  sub_1CA1F13FC();
  return sub_1CA1F1438();
}

uint64_t sub_1CA0B6BE4()
{
  return sub_1CA1F13FC();
}

uint64_t sub_1CA0B6C0C()
{
  sub_1CA1F13F0();
  sub_1CA1F13FC();
  return sub_1CA1F1438();
}

uint64_t sub_1CA0B6C5C(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t (*v11)(uint64_t);
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  void (*v25)(char *);
  NSObject *v26;
  uint64_t v27;
  NSObject *v28;
  __int128 v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  void (*v34)(char *);
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  dispatch_object_t v38;
  char *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  unsigned int v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  char *v48;
  uint64_t v49;

  v2 = v1;
  v41 = a1;
  v4 = sub_1CA1F088C();
  MEMORY[0x1E0C80A78](v4, v5);
  v48 = (char *)&v30 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v47 = sub_1CA1F0E38();
  v7 = *(_QWORD *)(v47 - 8);
  MEMORY[0x1E0C80A78](v47, v8);
  v39 = (char *)&v30 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = sub_1CA1F0E20();
  v11 = (uint64_t (*)(uint64_t))MEMORY[0x1E0DEF810];
  v12 = *(_QWORD *)(v10 - 8);
  MEMORY[0x1E0C80A78](v10, v13);
  swift_defaultActor_initialize();
  *(_QWORD *)(v2 + OBJC_IVAR____TtC17KnowledgeGraphKit17GraphStoreManager_readRunningCount) = 0;
  *(_BYTE *)(v2 + OBJC_IVAR____TtC17KnowledgeGraphKit17GraphStoreManager_readFeeding) = 1;
  *(_BYTE *)(v2 + OBJC_IVAR____TtC17KnowledgeGraphKit17GraphStoreManager_closed) = 0;
  v14 = OBJC_IVAR____TtC17KnowledgeGraphKit17GraphStoreManager_readStoreBooking;
  v15 = sub_1CA1F0B68();
  *(_QWORD *)(v15 + 16) = 4;
  *(_OWORD *)(v15 + 32) = 0u;
  *(_OWORD *)(v15 + 48) = 0u;
  *(_QWORD *)(v2 + v14) = v15;
  *(_QWORD *)(v2 + OBJC_IVAR____TtC17KnowledgeGraphKit17GraphStoreManager_readOnlyStores) = MEMORY[0x1E0DEE9D8];
  *(_QWORD *)(v2 + OBJC_IVAR____TtC17KnowledgeGraphKit17GraphStoreManager_readWriteStore) = 0;
  v16 = v2 + OBJC_IVAR____TtC17KnowledgeGraphKit17GraphStoreManager_url;
  v40 = sub_1CA1F0808();
  v42 = *(_QWORD *)(v40 - 8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v42 + 16))(v16, a1, v40);
  v44 = sub_1CA0AB910(0, &qword_1EF937558);
  v17 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EF937560);
  v18 = *(_QWORD *)(v12 + 72);
  v19 = *(unsigned __int8 *)(v12 + 80);
  v20 = (v19 + 32) & ~v19;
  v45 = v19 | 7;
  v46 = v17;
  v21 = swift_allocObject();
  *(_OWORD *)(v21 + 16) = xmmword_1CA1F90F0;
  sub_1CA1F0E08();
  sub_1CA1F0E14();
  v49 = v21;
  v37 = sub_1CA0BB950(&qword_1EF937568, v11, MEMORY[0x1E0DEF828]);
  v36 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EF937570);
  v32 = sub_1CA0BB910(&qword_1EF937578, &qword_1EF937570);
  v35 = v10;
  sub_1CA1F0F34();
  v43 = *MEMORY[0x1E0DEF8D8];
  v34 = *(void (**)(char *))(v7 + 104);
  v22 = v39;
  v23 = v47;
  v34(v39);
  sub_1CA1F0880();
  v38 = (dispatch_object_t)sub_1CA1F0E50();
  *(_QWORD *)(v2 + OBJC_IVAR____TtC17KnowledgeGraphKit17GraphStoreManager_executionQueue) = v38;
  v31 = v20;
  v33 = v20 + v18;
  v24 = swift_allocObject();
  v30 = xmmword_1CA1F9100;
  *(_OWORD *)(v24 + 16) = xmmword_1CA1F9100;
  sub_1CA1F0E14();
  v49 = v24;
  sub_1CA1F0F34();
  v25 = v34;
  ((void (*)(char *, _QWORD, uint64_t))v34)(v22, v43, v23);
  sub_1CA1F0880();
  v26 = sub_1CA1F0E50();
  *(_QWORD *)(v2 + OBJC_IVAR____TtC17KnowledgeGraphKit17GraphStoreManager_readFeederQueue) = v26;
  v27 = swift_allocObject();
  *(_OWORD *)(v27 + 16) = v30;
  sub_1CA1F0E14();
  v49 = v27;
  sub_1CA1F0F34();
  ((void (*)(char *, _QWORD, uint64_t))v25)(v22, v43, v47);
  sub_1CA1F0880();
  v28 = sub_1CA1F0E50();
  *(_QWORD *)(v2 + OBJC_IVAR____TtC17KnowledgeGraphKit17GraphStoreManager_writeFeederQueue) = v28;
  dispatch_activate(v38);
  dispatch_activate(v26);
  dispatch_activate(v28);
  (*(void (**)(uint64_t, uint64_t))(v42 + 8))(v41, v40);
  return v2;
}

uint64_t sub_1CA0B7108()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  if ((*(_BYTE *)(v0 + OBJC_IVAR____TtC17KnowledgeGraphKit17GraphStoreManager_readFeeding) & 1) == 0)
    dispatch_resume(*(dispatch_object_t *)(v0 + OBJC_IVAR____TtC17KnowledgeGraphKit17GraphStoreManager_readFeederQueue));
  v1 = v0 + OBJC_IVAR____TtC17KnowledgeGraphKit17GraphStoreManager_url;
  v2 = sub_1CA1F0808();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(v1, v2);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  swift_defaultActor_destroy();
  return v0;
}

uint64_t sub_1CA0B71D8()
{
  sub_1CA0B7108();
  return swift_defaultActor_deallocate();
}

uint64_t sub_1CA0B71F0()
{
  return type metadata accessor for GraphStoreManager();
}

uint64_t type metadata accessor for GraphStoreManager()
{
  uint64_t result;

  result = qword_1EF937280;
  if (!qword_1EF937280)
    return swift_getSingletonMetadata();
  return result;
}

uint64_t sub_1CA0B7234()
{
  uint64_t result;
  unint64_t v1;

  result = sub_1CA1F0808();
  if (v1 <= 0x3F)
  {
    result = swift_updateClassMetadata2();
    if (!result)
      return 0;
  }
  return result;
}

id sub_1CA0B72F0()
{
  uint64_t v0;
  uint64_t v1;
  id v2;
  uint64_t v3;
  int v4;
  _QWORD *p_prots;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  unint64_t v10;
  _BYTE *v11;
  unint64_t v12;
  uint64_t v13;
  id i;
  void *v15;
  id v16;
  unsigned int v17;
  id v18;
  char isUniquelyReferenced_nonNull_native;
  _BYTE *v20;
  id v21;
  id v23[2];

  v3 = v0;
  v23[1] = *(id *)MEMORY[0x1E0C80C00];
  v4 = *(unsigned __int8 *)(v0 + OBJC_IVAR____TtC17KnowledgeGraphKit17GraphStoreManager_closed);
  p_prots = &OBJC_PROTOCOL___MAElement.prots;
  v6 = (uint64_t)&OBJC_PROTOCOL___MAElement.prots;
  if (v4 == 1)
  {
    *(_BYTE *)(v3 + OBJC_IVAR____TtC17KnowledgeGraphKit17GraphStoreManager_closed) = 0;
    *(_QWORD *)(v3 + OBJC_IVAR____TtC17KnowledgeGraphKit17GraphStoreManager_readOnlyStores) = MEMORY[0x1E0DEE9D8];
    swift_bridgeObjectRelease();
    v1 = 4;
    v7 = sub_1CA1F0B68();
    *(_QWORD *)(v7 + 16) = 4;
    *(_OWORD *)(v7 + 32) = 0u;
    *(_OWORD *)(v7 + 48) = 0u;
    *(_QWORD *)(v3 + OBJC_IVAR____TtC17KnowledgeGraphKit17GraphStoreManager_readStoreBooking) = v7;
    swift_bridgeObjectRelease();
  }
  v8 = OBJC_IVAR____TtC17KnowledgeGraphKit17GraphStoreManager_readStoreBooking;
  v9 = *(_QWORD **)(v3 + OBJC_IVAR____TtC17KnowledgeGraphKit17GraphStoreManager_readStoreBooking);
  v10 = v9[2];
  if (v10)
  {
    if (v9[4])
    {
      if (v10 < 2)
      {
        __break(1u);
        goto LABEL_36;
      }
      if (v9[5])
      {
        if (v10 < 3)
        {
LABEL_40:
          __break(1u);
          goto LABEL_41;
        }
        if (v9[6])
        {
          if (v10 < 4)
          {
LABEL_41:
            __break(1u);
            goto LABEL_42;
          }
          if (v9[7])
          {
            sub_1CA0BB3B8();
            swift_allocError();
            *v11 = 0;
LABEL_32:
            swift_willThrow();
            return v2;
          }
          v6 = 3;
        }
        else
        {
          v6 = 2;
        }
      }
      else
      {
        v6 = 1;
      }
    }
    else
    {
      v6 = 0;
    }
    v1 = v3 + OBJC_IVAR____TtC17KnowledgeGraphKit17GraphStoreManager_readOnlyStores;
    v12 = *(_QWORD *)(v3 + OBJC_IVAR____TtC17KnowledgeGraphKit17GraphStoreManager_readOnlyStores);
    if (!(v12 >> 62))
    {
      v2 = *(id *)((v12 & 0xFFFFFFFFFFFFF8) + 0x10);
      if (v6 < (uint64_t)v2)
        goto LABEL_18;
LABEL_24:
      v2 = objc_allocWithZone((Class)KGDegasGraphStore);
      v15 = (void *)sub_1CA1F07F0();
      v16 = objc_msgSend(v2, sel_initWithURL_, v15);

      if (!v16)
      {
        sub_1CA0BB3B8();
        swift_allocError();
        *v20 = 1;
        goto LABEL_32;
      }
      v23[0] = 0;
      v17 = objc_msgSend(v16, sel_openWithMode_error_, 1, v23);
      v2 = v23[0];
      if (!v17)
      {
        v21 = v23[0];
        sub_1CA1F07CC();

        swift_willThrow();
        return v2;
      }
      v18 = v23[0];
      v2 = v16;
      MEMORY[0x1CAA4A1E0]();
      if (*(_QWORD *)((*(_QWORD *)v1 & 0xFFFFFFFFFFFFFF8) + 0x10) < *(_QWORD *)((*(_QWORD *)v1 & 0xFFFFFFFFFFFFFF8)
                                                                                 + 0x18) >> 1)
      {
LABEL_27:
        sub_1CA1F0B8C();
        sub_1CA1F0B14();
        goto LABEL_28;
      }
LABEL_42:
      sub_1CA1F0B2C();
      goto LABEL_27;
    }
  }
  else
  {
    __break(1u);
  }
  swift_bridgeObjectRetain();
  v2 = (id)sub_1CA1F1234();
  swift_bridgeObjectRelease();
  if (v6 >= (uint64_t)v2)
    goto LABEL_24;
LABEL_18:
  v13 = *(_QWORD *)v1;
  if ((*(_QWORD *)v1 & 0xC000000000000001) != 0)
    goto LABEL_38;
  if ((unint64_t)v6 >= *(_QWORD *)((v13 & 0xFFFFFFFFFFFFF8) + 0x10))
  {
    __break(1u);
    goto LABEL_40;
  }
  for (i = *(id *)(v13 + 8 * v6 + 32); ; i = (id)MEMORY[0x1CAA4A7A4](v6))
  {
    v2 = i;
LABEL_28:
    p_prots = *(_QWORD **)(v3 + v8);
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    *(_QWORD *)(v3 + v8) = p_prots;
    if ((isUniquelyReferenced_nonNull_native & 1) == 0)
LABEL_36:
      p_prots = sub_1CA0B6094(p_prots);
    if ((unint64_t)v6 < p_prots[2])
      break;
    __break(1u);
LABEL_38:
    ;
  }
  p_prots[v6 + 4] = 1;
  *(_QWORD *)(v3 + v8) = p_prots;
  return v2;
}

uint64_t sub_1CA0B7668(unint64_t a1)
{
  uint64_t v1;
  unint64_t v3;
  uint64_t v4;
  id v5;
  unint64_t v6;
  char v7;
  char v8;
  uint64_t result;

  v3 = *(_QWORD *)(v1 + OBJC_IVAR____TtC17KnowledgeGraphKit17GraphStoreManager_readOnlyStores);
  if (v3 >> 62)
  {
    swift_bridgeObjectRetain();
    v4 = sub_1CA1F1234();
    swift_bridgeObjectRelease();
    if (v4 < 0)
    {
      __break(1u);
      goto LABEL_10;
    }
  }
  else
  {
    v4 = *(_QWORD *)((v3 & 0xFFFFFFFFFFFFF8) + 0x10);
  }
  swift_retain();
  v5 = (id)a1;
  sub_1CA0BB630(0, v4, v1);
  a1 = v6;
  v8 = v7;
  swift_release();

  if ((v8 & 1) == 0)
  {
    v3 = OBJC_IVAR____TtC17KnowledgeGraphKit17GraphStoreManager_readStoreBooking;
    v4 = *(_QWORD *)(v1 + OBJC_IVAR____TtC17KnowledgeGraphKit17GraphStoreManager_readStoreBooking);
    result = swift_isUniquelyReferenced_nonNull_native();
    *(_QWORD *)(v1 + v3) = v4;
    if ((result & 1) != 0)
    {
      if ((a1 & 0x8000000000000000) == 0)
        goto LABEL_6;
      goto LABEL_11;
    }
LABEL_10:
    result = (uint64_t)sub_1CA0B6094((_QWORD *)v4);
    v4 = result;
    if ((a1 & 0x8000000000000000) == 0)
    {
LABEL_6:
      if (a1 < *(_QWORD *)(v4 + 16))
      {
        *(_QWORD *)(v4 + 8 * a1 + 32) = 0;
        *(_QWORD *)(v1 + v3) = v4;
        return result;
      }
      goto LABEL_12;
    }
LABEL_11:
    __break(1u);
LABEL_12:
    __break(1u);
  }
  result = sub_1CA1F11C8();
  __break(1u);
  return result;
}

uint64_t sub_1CA0B77BC()
{
  uint64_t v0;
  uint64_t v1;
  void *v2;
  void *v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t result;
  uint64_t i;
  id v9;
  void *v10;
  uint64_t v11;
  _QWORD *v12;
  unint64_t v13;

  v1 = OBJC_IVAR____TtC17KnowledgeGraphKit17GraphStoreManager_readWriteStore;
  v2 = *(void **)(v0 + OBJC_IVAR____TtC17KnowledgeGraphKit17GraphStoreManager_readWriteStore);
  if (v2)
  {
    objc_msgSend(v2, sel_close);
    v3 = *(void **)(v0 + v1);
    *(_QWORD *)(v0 + v1) = 0;

  }
  v4 = OBJC_IVAR____TtC17KnowledgeGraphKit17GraphStoreManager_readOnlyStores;
  v5 = *(_QWORD *)(v0 + OBJC_IVAR____TtC17KnowledgeGraphKit17GraphStoreManager_readOnlyStores);
  if (v5 >> 62)
  {
    swift_bridgeObjectRetain();
    result = sub_1CA1F1234();
    v6 = result;
    if (!result)
      goto LABEL_12;
  }
  else
  {
    v6 = *(_QWORD *)((v5 & 0xFFFFFFFFFFFFF8) + 0x10);
    result = swift_bridgeObjectRetain();
    if (!v6)
      goto LABEL_12;
  }
  if (v6 >= 1)
  {
    for (i = 0; i != v6; ++i)
    {
      if ((v5 & 0xC000000000000001) != 0)
        v9 = (id)MEMORY[0x1CAA4A7A4](i, v5);
      else
        v9 = *(id *)(v5 + 8 * i + 32);
      v10 = v9;
      objc_msgSend(v9, sel_close);

    }
LABEL_12:
    swift_bridgeObjectRelease();
    *(_QWORD *)(v0 + v4) = MEMORY[0x1E0DEE9D8];
    swift_bridgeObjectRelease();
    v11 = OBJC_IVAR____TtC17KnowledgeGraphKit17GraphStoreManager_readStoreBooking;
    v12 = *(_QWORD **)(v0 + OBJC_IVAR____TtC17KnowledgeGraphKit17GraphStoreManager_readStoreBooking);
    result = swift_isUniquelyReferenced_nonNull_native();
    *(_QWORD *)(v0 + v11) = v12;
    if ((result & 1) != 0)
    {
      v13 = v12[2];
      if (v13)
        goto LABEL_14;
    }
    else
    {
      result = (uint64_t)sub_1CA0B6094(v12);
      v12 = (_QWORD *)result;
      v13 = *(_QWORD *)(result + 16);
      if (v13)
      {
LABEL_14:
        v12[4] = 0;
        if (v13 != 1)
        {
          v12[5] = 0;
          if (v13 >= 3)
          {
            v12[6] = 0;
            if (v13 != 3)
            {
              v12[7] = 0;
              *(_QWORD *)(v0 + v11) = v12;
              *(_BYTE *)(v0 + OBJC_IVAR____TtC17KnowledgeGraphKit17GraphStoreManager_closed) = 1;
              return result;
            }
            goto LABEL_22;
          }
LABEL_21:
          __break(1u);
LABEL_22:
          __break(1u);
          goto LABEL_23;
        }
LABEL_20:
        __break(1u);
        goto LABEL_21;
      }
    }
    __break(1u);
    goto LABEL_20;
  }
LABEL_23:
  __break(1u);
  return result;
}

uint64_t sub_1CA0B7950(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  *(_QWORD *)(v2 + 16) = a2;
  return swift_task_switch();
}

uint64_t sub_1CA0B7964()
{
  uint64_t v0;

  sub_1CA0B77BC();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1CA0B7998(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  _QWORD *v6;

  v6[6] = a5;
  v6[7] = v5;
  v6[4] = a3;
  v6[5] = a4;
  v6[2] = a1;
  v6[3] = a2;
  return swift_task_switch();
}

uint64_t sub_1CA0B79B8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v1 = *(_QWORD *)(v0 + 48);
  v2 = swift_allocObject();
  *(_QWORD *)(v0 + 64) = v2;
  *(_QWORD *)(v2 + 16) = v1;
  *(_OWORD *)(v2 + 24) = *(_OWORD *)(v0 + 32);
  v3 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v0 + 72) = v3;
  *v3 = v0;
  v3[1] = sub_1CA0B7A58;
  v5 = *(_QWORD *)(v0 + 48);
  v4 = *(_QWORD *)(v0 + 56);
  v6 = *(_QWORD *)(v0 + 16);
  v3[7] = *(_QWORD *)(v0 + 24);
  v3[8] = v5;
  v3[5] = v2;
  v3[6] = v4;
  v3[3] = v6;
  v3[4] = &unk_1EF937428;
  return swift_task_switch();
}

uint64_t sub_1CA0B7A58()
{
  uint64_t v0;
  uint64_t v1;

  *(_QWORD *)(*(_QWORD *)v1 + 80) = v0;
  swift_task_dealloc();
  return swift_task_switch();
}

uint64_t sub_1CA0B7ABC()
{
  uint64_t v0;
  char isEscapingClosureAtFileLocation;
  uint64_t result;

  isEscapingClosureAtFileLocation = swift_isEscapingClosureAtFileLocation();
  result = swift_release();
  if ((isEscapingClosureAtFileLocation & 1) == 0)
    return (*(uint64_t (**)(void))(v0 + 8))();
  __break(1u);
  return result;
}

uint64_t sub_1CA0B7B20()
{
  uint64_t v0;

  swift_release();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1CA0B7B54(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;

  *(_QWORD *)(v3 + 24) = a2;
  *(_QWORD *)(v3 + 32) = a3;
  return swift_task_switch();
}

uint64_t sub_1CA0B7BB4()
{
  sub_1CA0B77BC();
  return swift_task_switch();
}

uint64_t sub_1CA0B7C1C()
{
  _QWORD *v0;
  void *v1;
  void *v2;
  void *v3;
  id v4;
  uint64_t (*v5)(void);
  id v6;
  uint64_t (*v8)(void);

  v1 = (void *)v0[4];
  v2 = (void *)sub_1CA1F07F0();
  v0[2] = 0;
  LODWORD(v1) = objc_msgSend(v1, sel_copyToURL_error_, v2, v0 + 2);

  v3 = (void *)v0[2];
  if ((_DWORD)v1)
  {
    v8 = (uint64_t (*)(void))v0[1];
    v4 = v3;
    v5 = v8;
  }
  else
  {
    v6 = v3;
    sub_1CA1F07CC();

    swift_willThrow();
    v5 = (uint64_t (*)(void))v0[1];
  }
  return v5();
}

uint64_t sub_1CA0B7D10(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;

  v5[5] = a4;
  v5[6] = v4;
  v5[3] = a2;
  v5[4] = a3;
  v5[2] = a1;
  v6 = sub_1CA1F0874();
  v5[7] = v6;
  v5[8] = *(_QWORD *)(v6 - 8);
  v5[9] = swift_task_alloc();
  return swift_task_switch();
}

uint64_t sub_1CA0B7D78()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  __int128 v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;

  v2 = *(_QWORD *)(v0 + 40);
  v1 = *(_QWORD *)(v0 + 48);
  v3 = *(_QWORD *)(v1 + OBJC_IVAR____TtC17KnowledgeGraphKit17GraphStoreManager_readFeederQueue);
  v4 = swift_task_alloc();
  *(_QWORD *)(v0 + 80) = v4;
  v5 = *(_OWORD *)(v0 + 24);
  *(_QWORD *)(v4 + 16) = v2;
  *(_QWORD *)(v4 + 24) = v1;
  *(_OWORD *)(v4 + 32) = v5;
  sub_1CA0B85D8();
  v6 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v0 + 88) = v6;
  *v6 = v0;
  v6[1] = sub_1CA0B7E38;
  v7 = *(_QWORD *)(v0 + 72);
  v8 = *(_QWORD *)(v0 + 16);
  v6[6] = *(_QWORD *)(v0 + 40);
  v6[7] = v3;
  v6[4] = &unk_1EF9374B8;
  v6[5] = v4;
  v6[2] = v8;
  v6[3] = v7;
  return swift_task_switch();
}

uint64_t sub_1CA0B7E38()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v3 = *(_QWORD *)(*v1 + 64);
  v2 = *(_QWORD *)(*v1 + 72);
  v4 = *(_QWORD *)(*v1 + 56);
  v5 = *v1;
  *(_QWORD *)(v5 + 96) = v0;
  swift_task_dealloc();
  (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v2, v4);
  if (v0)
    return swift_task_switch();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v5 + 8))();
}

uint64_t sub_1CA0B7EE8()
{
  uint64_t v0;

  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1CA0B7F24(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  _QWORD *v8;

  v8 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v4 + 16) = v8;
  *v8 = v4;
  v8[1] = sub_1CA0BBBA8;
  return sub_1CA0B8014(a1, a3, a4);
}

uint64_t sub_1CA0B7F94(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  _QWORD *v10;

  v10 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v5 + 16) = v10;
  *v10 = v5;
  v10[1] = sub_1CA0BBBA8;
  return sub_1CA0B82A4(a1, a3, a4, a5);
}

uint64_t sub_1CA0B8014(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;

  v4[5] = a3;
  v4[6] = v3;
  v4[3] = a1;
  v4[4] = a2;
  v5 = sub_1CA1F0874();
  v4[7] = v5;
  v4[8] = *(_QWORD *)(v5 - 8);
  v4[9] = swift_task_alloc();
  return swift_task_switch();
}

void sub_1CA0B8078()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  BOOL v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  __int128 v8;
  _QWORD *v9;
  char *v10;

  v1 = *(_QWORD *)(v0 + 48);
  v2 = OBJC_IVAR____TtC17KnowledgeGraphKit17GraphStoreManager_readRunningCount;
  *(_QWORD *)(v0 + 80) = OBJC_IVAR____TtC17KnowledgeGraphKit17GraphStoreManager_readRunningCount;
  v3 = *(_QWORD *)(v1 + v2);
  v4 = __OFADD__(v3, 1);
  v5 = v3 + 1;
  if (v4)
  {
    __break(1u);
  }
  else
  {
    *(_QWORD *)(v1 + v2) = v5;
    v6 = *(_QWORD *)(v0 + 48);
    if (v5 == 4 && *(_BYTE *)(v6 + OBJC_IVAR____TtC17KnowledgeGraphKit17GraphStoreManager_readFeeding) == 1)
    {
      *(_BYTE *)(v6 + OBJC_IVAR____TtC17KnowledgeGraphKit17GraphStoreManager_readFeeding) = 0;
      dispatch_suspend(*(dispatch_object_t *)(v6 + OBJC_IVAR____TtC17KnowledgeGraphKit17GraphStoreManager_readFeederQueue));
      v6 = *(_QWORD *)(v0 + 48);
    }
    v7 = swift_task_alloc();
    *(_QWORD *)(v0 + 88) = v7;
    v8 = *(_OWORD *)(v0 + 32);
    *(_QWORD *)(v7 + 16) = v6;
    *(_OWORD *)(v7 + 24) = v8;
    *(_QWORD *)(v0 + 16) = MEMORY[0x1E0DEE9D8];
    sub_1CA0BB950(&qword_1EF937480, (uint64_t (*)(uint64_t))MEMORY[0x1E0DEF4F8], MEMORY[0x1E0DEF510]);
    __swift_instantiateConcreteTypeFromMangledName(&qword_1EF937488);
    sub_1CA0BB910(&qword_1EF937490, &qword_1EF937488);
    sub_1CA1F0F34();
    v10 = (char *)&dword_1EF938B10 + dword_1EF938B10;
    v9 = (_QWORD *)swift_task_alloc();
    *(_QWORD *)(v0 + 96) = v9;
    *v9 = v0;
    v9[1] = sub_1CA0B8208;
    ((void (*)(_QWORD, _QWORD, void *, uint64_t))v10)(*(_QWORD *)(v0 + 24), *(_QWORD *)(v0 + 72), &unk_1EF937538, v7);
  }
}

uint64_t sub_1CA0B8208()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v3 = *(_QWORD *)(*(_QWORD *)v1 + 64);
  v2 = *(_QWORD *)(*(_QWORD *)v1 + 72);
  v4 = *(_QWORD *)(*(_QWORD *)v1 + 56);
  *(_QWORD *)(*(_QWORD *)v1 + 104) = v0;
  swift_task_dealloc();
  (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v2, v4);
  if (!v0)
    swift_task_dealloc();
  return swift_task_switch();
}

uint64_t sub_1CA0B82A4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;

  v5[5] = a4;
  v5[6] = v4;
  v5[3] = a2;
  v5[4] = a3;
  v5[2] = a1;
  v6 = sub_1CA1F0874();
  v5[7] = v6;
  v5[8] = *(_QWORD *)(v6 - 8);
  v5[9] = swift_task_alloc();
  return swift_task_switch();
}

void sub_1CA0B830C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  BOOL v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  __int128 v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;

  v1 = *(_QWORD *)(v0 + 48);
  v2 = OBJC_IVAR____TtC17KnowledgeGraphKit17GraphStoreManager_readRunningCount;
  *(_QWORD *)(v0 + 80) = OBJC_IVAR____TtC17KnowledgeGraphKit17GraphStoreManager_readRunningCount;
  v3 = *(_QWORD *)(v1 + v2);
  v4 = __OFADD__(v3, 1);
  v5 = v3 + 1;
  if (v4)
  {
    __break(1u);
  }
  else
  {
    *(_QWORD *)(v1 + v2) = v5;
    v6 = *(_QWORD *)(v0 + 48);
    if (v5 == 4 && *(_BYTE *)(v6 + OBJC_IVAR____TtC17KnowledgeGraphKit17GraphStoreManager_readFeeding) == 1)
    {
      *(_BYTE *)(v6 + OBJC_IVAR____TtC17KnowledgeGraphKit17GraphStoreManager_readFeeding) = 0;
      dispatch_suspend(*(dispatch_object_t *)(v6 + OBJC_IVAR____TtC17KnowledgeGraphKit17GraphStoreManager_readFeederQueue));
      v6 = *(_QWORD *)(v0 + 48);
    }
    v7 = *(_QWORD *)(v0 + 40);
    v8 = *(_QWORD *)(v6 + OBJC_IVAR____TtC17KnowledgeGraphKit17GraphStoreManager_executionQueue);
    v9 = swift_task_alloc();
    *(_QWORD *)(v0 + 88) = v9;
    v10 = *(_OWORD *)(v0 + 24);
    *(_QWORD *)(v9 + 16) = v7;
    *(_QWORD *)(v9 + 24) = v6;
    *(_OWORD *)(v9 + 32) = v10;
    sub_1CA0B85D8();
    v11 = (_QWORD *)swift_task_alloc();
    *(_QWORD *)(v0 + 96) = v11;
    *v11 = v0;
    v11[1] = sub_1CA0B8428;
    v12 = *(_QWORD *)(v0 + 72);
    v13 = *(_QWORD *)(v0 + 16);
    v11[6] = *(_QWORD *)(v0 + 40);
    v11[7] = v8;
    v11[4] = &unk_1EF9374D0;
    v11[5] = v9;
    v11[2] = v13;
    v11[3] = v12;
    swift_task_switch();
  }
}

uint64_t sub_1CA0B8428()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v3 = *(_QWORD *)(*(_QWORD *)v1 + 64);
  v2 = *(_QWORD *)(*(_QWORD *)v1 + 72);
  v4 = *(_QWORD *)(*(_QWORD *)v1 + 56);
  *(_QWORD *)(*(_QWORD *)v1 + 104) = v0;
  swift_task_dealloc();
  (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v2, v4);
  if (!v0)
    swift_task_dealloc();
  return swift_task_switch();
}

uint64_t sub_1CA0B84C4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  BOOL v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t result;

  v1 = *(_QWORD *)(v0 + 80);
  v2 = *(_QWORD *)(v0 + 48);
  v3 = *(_QWORD *)(v2 + v1);
  v4 = __OFSUB__(v3, 1);
  v5 = v3 - 1;
  if (v4)
  {
    __break(1u);
  }
  else
  {
    *(_QWORD *)(v2 + v1) = v5;
    if ((*(_BYTE *)(v2 + OBJC_IVAR____TtC17KnowledgeGraphKit17GraphStoreManager_readFeeding) & 1) == 0 && v5 < 4)
    {
      v6 = *(_QWORD *)(v0 + 48);
      *(_BYTE *)(v2 + OBJC_IVAR____TtC17KnowledgeGraphKit17GraphStoreManager_readFeeding) = 1;
      dispatch_resume(*(dispatch_object_t *)(v6 + OBJC_IVAR____TtC17KnowledgeGraphKit17GraphStoreManager_readFeederQueue));
    }
    swift_task_dealloc();
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
  return result;
}

uint64_t sub_1CA0B8548()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t result;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v1 = *(_QWORD *)(v0 + 80);
  v2 = *(_QWORD *)(v0 + 48);
  result = swift_task_dealloc();
  v4 = *(_QWORD *)(v2 + v1);
  v5 = v4 - 1;
  if (__OFSUB__(v4, 1))
  {
    __break(1u);
  }
  else
  {
    v6 = *(_QWORD *)(v0 + 48);
    *(_QWORD *)(v6 + *(_QWORD *)(v0 + 80)) = v5;
    if ((*(_BYTE *)(v6 + OBJC_IVAR____TtC17KnowledgeGraphKit17GraphStoreManager_readFeeding) & 1) == 0 && v5 < 4)
    {
      v7 = *(_QWORD *)(v0 + 48);
      *(_BYTE *)(v6 + OBJC_IVAR____TtC17KnowledgeGraphKit17GraphStoreManager_readFeeding) = 1;
      dispatch_resume(*(dispatch_object_t *)(v7 + OBJC_IVAR____TtC17KnowledgeGraphKit17GraphStoreManager_readFeederQueue));
    }
    swift_task_dealloc();
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
  return result;
}

uint64_t sub_1CA0B85D8()
{
  sub_1CA1F0874();
  sub_1CA0BB950(&qword_1EF937480, (uint64_t (*)(uint64_t))MEMORY[0x1E0DEF4F8], MEMORY[0x1E0DEF510]);
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EF937488);
  sub_1CA0BB910(&qword_1EF937490, &qword_1EF937488);
  return sub_1CA1F0F34();
}

uint64_t sub_1CA0B8684(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  _QWORD *v4;

  v4[6] = a3;
  v4[7] = v3;
  v4[5] = a2;
  return swift_task_switch();
}

uint64_t sub_1CA0B86EC()
{
  uint64_t v0;
  id v1;
  void *v2;
  unsigned int v3;
  void *v4;
  int *v5;
  uint64_t v6;
  id v7;
  id v8;
  _QWORD *v9;
  id v11;

  v1 = sub_1CA0B72F0();
  *(_QWORD *)(v0 + 64) = v1;
  v2 = v1;
  *(_QWORD *)(v0 + 16) = 0;
  v3 = objc_msgSend(v1, sel_beginTransactionWithError_, v0 + 16);
  v4 = *(void **)(v0 + 16);
  if (v3)
  {
    v5 = *(int **)(v0 + 40);
    v6 = *v5;
    v7 = v4;
    v8 = v2;
    v9 = (_QWORD *)swift_task_alloc();
    *(_QWORD *)(v0 + 72) = v9;
    *v9 = v0;
    v9[1] = sub_1CA0B882C;
    return ((uint64_t (*)(void))((char *)v5 + v6))();
  }
  else
  {
    v11 = v4;
    sub_1CA1F07CC();

    swift_willThrow();
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
}

uint64_t sub_1CA0B882C()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;

  v2 = *v1;
  *(_QWORD *)(*v1 + 80) = v0;
  swift_task_dealloc();
  if (!v0)

  return swift_task_switch();
}

uint64_t sub_1CA0B88E8()
{
  uint64_t v0;
  unsigned int v1;
  void *v2;
  void *v3;
  id v4;
  id v5;

  *(_QWORD *)(v0 + 32) = 0;
  v1 = objc_msgSend(*(id *)(v0 + 64), sel_commitTransactionWithError_, v0 + 32);
  v2 = *(void **)(v0 + 32);
  v3 = *(void **)(v0 + 64);
  if (v1)
  {
    v4 = v2;
  }
  else
  {
    v5 = v2;
    sub_1CA1F07CC();

    swift_willThrow();
  }
  sub_1CA0B7668((unint64_t)v3);

  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1CA0B89D8()
{
  uint64_t v0;
  void *v1;
  unsigned __int8 v2;
  void *v3;
  void *v4;
  void *v5;
  id v6;
  id v7;

  v1 = *(void **)(v0 + 64);

  *(_QWORD *)(v0 + 24) = 0;
  v2 = objc_msgSend(v1, sel_rollbackTransactionWithError_, v0 + 24);
  v3 = *(void **)(v0 + 24);
  v4 = *(void **)(v0 + 80);
  v5 = *(void **)(v0 + 64);
  if ((v2 & 1) != 0)
  {
    v6 = v3;
    swift_willThrow();
  }
  else
  {
    v7 = v3;
    sub_1CA1F07CC();

    swift_willThrow();
  }
  sub_1CA0B7668((unint64_t)v5);

  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1CA0B8AD4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  _QWORD *v5;

  v5[8] = a4;
  v5[9] = v4;
  v5[6] = a2;
  v5[7] = a3;
  v5[5] = a1;
  v5[10] = *(_QWORD *)(a4 - 8);
  v5[11] = swift_task_alloc();
  v5[12] = swift_task_alloc();
  return swift_task_switch();
}

uint64_t sub_1CA0B8B74()
{
  uint64_t v0;
  id v1;
  void *v2;
  unsigned int v3;
  void *v4;
  int *v5;
  uint64_t v6;
  id v7;
  id v8;
  _QWORD *v9;
  id v11;

  v1 = sub_1CA0B72F0();
  *(_QWORD *)(v0 + 104) = v1;
  v2 = v1;
  *(_QWORD *)(v0 + 16) = 0;
  v3 = objc_msgSend(v1, sel_beginTransactionWithError_, v0 + 16);
  v4 = *(void **)(v0 + 16);
  if (v3)
  {
    v5 = *(int **)(v0 + 48);
    v6 = *v5;
    v7 = v4;
    v8 = v2;
    v9 = (_QWORD *)swift_task_alloc();
    *(_QWORD *)(v0 + 112) = v9;
    *v9 = v0;
    v9[1] = sub_1CA0B8CCC;
    return ((uint64_t (*)(_QWORD, id, _UNKNOWN **))((char *)v5 + v6))(*(_QWORD *)(v0 + 88), v8, &off_1E83DEAF0);
  }
  else
  {
    v11 = v4;
    sub_1CA1F07CC();

    swift_willThrow();
    swift_task_dealloc();
    swift_task_dealloc();
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
}

uint64_t sub_1CA0B8CCC()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;

  v2 = *v1;
  *(_QWORD *)(*v1 + 120) = v0;
  swift_task_dealloc();
  if (!v0)

  return swift_task_switch();
}

uint64_t sub_1CA0B8D8C()
{
  uint64_t v0;
  void *v1;
  void (*v2)(_QWORD, _QWORD, _QWORD);
  unsigned int v3;
  void *v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  id v8;
  uint64_t v9;
  id v10;

  v1 = *(void **)(v0 + 104);
  v2 = *(void (**)(_QWORD, _QWORD, _QWORD))(*(_QWORD *)(v0 + 80) + 32);
  v2(*(_QWORD *)(v0 + 96), *(_QWORD *)(v0 + 88), *(_QWORD *)(v0 + 64));
  *(_QWORD *)(v0 + 32) = 0;
  v3 = objc_msgSend(v1, sel_commitTransactionWithError_, v0 + 32);
  v4 = *(void **)(v0 + 32);
  v6 = *(_QWORD *)(v0 + 96);
  v5 = *(void **)(v0 + 104);
  v7 = *(_QWORD *)(v0 + 64);
  if (v3)
  {
    v2(*(_QWORD *)(v0 + 40), *(_QWORD *)(v0 + 96), *(_QWORD *)(v0 + 64));
    v8 = v4;
  }
  else
  {
    v9 = *(_QWORD *)(v0 + 80);
    v10 = v4;
    sub_1CA1F07CC();

    swift_willThrow();
    (*(void (**)(uint64_t, uint64_t))(v9 + 8))(v6, v7);
  }
  sub_1CA0B7668((unint64_t)v5);

  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1CA0B8EF0()
{
  uint64_t v0;
  void *v1;
  unsigned int v2;
  void *v3;
  void *v4;
  void *v5;
  id v6;
  id v7;

  v1 = *(void **)(v0 + 104);

  *(_QWORD *)(v0 + 24) = 0;
  v2 = objc_msgSend(v1, sel_rollbackTransactionWithError_, v0 + 24);
  v3 = *(void **)(v0 + 24);
  v4 = *(void **)(v0 + 120);
  v5 = *(void **)(v0 + 104);
  if (v2)
  {
    v6 = v3;
    swift_willThrow();
  }
  else
  {
    v7 = v3;
    sub_1CA1F07CC();

    swift_willThrow();
  }
  sub_1CA0B7668((unint64_t)v5);

  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1CA0B8FFC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  _QWORD *v8;

  v8 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v4 + 16) = v8;
  *v8 = v4;
  v8[1] = sub_1CA0BBBA8;
  v8[6] = a4;
  v8[7] = a2;
  v8[5] = a3;
  return swift_task_switch();
}

uint64_t sub_1CA0B9070(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  _QWORD *v10;

  v10 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v5 + 16) = v10;
  *v10 = v5;
  v10[1] = sub_1CA0B90F0;
  return sub_1CA0B8AD4(a1, a3, a4, a5);
}

uint64_t sub_1CA0B90F0()
{
  uint64_t *v0;
  uint64_t v2;

  v2 = *v0;
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v2 + 8))();
}

uint64_t sub_1CA0B9138(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;

  v5[5] = a4;
  v5[6] = v4;
  v5[3] = a2;
  v5[4] = a3;
  v5[2] = a1;
  v6 = sub_1CA1F0874();
  v5[7] = v6;
  v5[8] = *(_QWORD *)(v6 - 8);
  v5[9] = swift_task_alloc();
  return swift_task_switch();
}

uint64_t sub_1CA0B91A0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  __int128 v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;

  v2 = *(_QWORD *)(v0 + 40);
  v1 = *(_QWORD *)(v0 + 48);
  v3 = *(_QWORD *)(v1 + OBJC_IVAR____TtC17KnowledgeGraphKit17GraphStoreManager_writeFeederQueue);
  v4 = swift_task_alloc();
  *(_QWORD *)(v0 + 80) = v4;
  v5 = *(_OWORD *)(v0 + 24);
  *(_QWORD *)(v4 + 16) = v2;
  *(_QWORD *)(v4 + 24) = v1;
  *(_OWORD *)(v4 + 32) = v5;
  sub_1CA0B85D8();
  v6 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v0 + 88) = v6;
  *v6 = v0;
  v6[1] = sub_1CA0B9260;
  v7 = *(_QWORD *)(v0 + 72);
  v8 = *(_QWORD *)(v0 + 16);
  v6[6] = *(_QWORD *)(v0 + 40);
  v6[7] = v3;
  v6[4] = &unk_1EF937478;
  v6[5] = v4;
  v6[2] = v8;
  v6[3] = v7;
  return swift_task_switch();
}

uint64_t sub_1CA0B9260()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v3 = *(_QWORD *)(*v1 + 64);
  v2 = *(_QWORD *)(*v1 + 72);
  v4 = *(_QWORD *)(*v1 + 56);
  v5 = *v1;
  *(_QWORD *)(v5 + 96) = v0;
  swift_task_dealloc();
  (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v2, v4);
  if (v0)
    return swift_task_switch();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v5 + 8))();
}

uint64_t sub_1CA0B9310(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  _QWORD *v5;
  uint64_t v6;

  v5[5] = a4;
  v5[6] = a5;
  v5[3] = a2;
  v5[4] = a3;
  v5[2] = a1;
  v6 = sub_1CA1F0874();
  v5[7] = v6;
  v5[8] = *(_QWORD *)(v6 - 8);
  v5[9] = swift_task_alloc();
  return swift_task_switch();
}

uint64_t sub_1CA0B9378()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  __int128 v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;

  v2 = *(_QWORD *)(v0 + 40);
  v1 = *(_QWORD *)(v0 + 48);
  v3 = OBJC_IVAR____TtC17KnowledgeGraphKit17GraphStoreManager_executionQueue;
  v4 = swift_task_alloc();
  v5 = *(_OWORD *)(v0 + 24);
  v6 = *(_QWORD *)(*(_QWORD *)(v0 + 24) + v3);
  *(_QWORD *)(v0 + 80) = v4;
  *(_QWORD *)(v4 + 16) = v1;
  *(_OWORD *)(v4 + 24) = v5;
  *(_QWORD *)(v4 + 40) = v2;
  sub_1CA0B85D8();
  v7 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v0 + 88) = v7;
  *v7 = v0;
  v7[1] = sub_1CA0B9440;
  v8 = *(_QWORD *)(v0 + 72);
  v9 = *(_QWORD *)(v0 + 16);
  v7[6] = *(_QWORD *)(v0 + 48);
  v7[7] = v6;
  v7[4] = &unk_1EF9374A0;
  v7[5] = v4;
  v7[2] = v9;
  v7[3] = v8;
  return swift_task_switch();
}

uint64_t sub_1CA0B9440()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v3 = *(_QWORD *)(*v1 + 64);
  v2 = *(_QWORD *)(*v1 + 72);
  v4 = *(_QWORD *)(*v1 + 56);
  v5 = *v1;
  *(_QWORD *)(v5 + 96) = v0;
  swift_task_dealloc();
  (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v2, v4);
  if (v0)
    return swift_task_switch();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v5 + 8))();
}

uint64_t sub_1CA0B94F0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  _QWORD *v10;

  v10 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v5 + 16) = v10;
  *v10 = v5;
  v10[1] = sub_1CA0BBBA8;
  return sub_1CA0B9570(a1, a3, a4, a5);
}

uint64_t sub_1CA0B9570(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  _QWORD *v5;

  v5[9] = a4;
  v5[10] = v4;
  v5[7] = a2;
  v5[8] = a3;
  v5[6] = a1;
  v5[11] = *(_QWORD *)(a4 - 8);
  v5[12] = swift_task_alloc();
  return swift_task_switch();
}

uint64_t sub_1CA0B95F8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  void *v3;
  id v4;
  id v5;
  unsigned __int8 v6;
  void *v7;
  int *v8;
  uint64_t v9;
  id v10;
  id v11;
  _QWORD *v12;
  id v14;
  void *v15;
  unsigned __int8 v16;
  void *v17;
  id v18;
  id v19;
  _BYTE *v20;

  v1 = *(_QWORD *)(v0 + 80);
  if (*(_BYTE *)(v1 + OBJC_IVAR____TtC17KnowledgeGraphKit17GraphStoreManager_closed) == 1)
  {
    *(_BYTE *)(v1 + OBJC_IVAR____TtC17KnowledgeGraphKit17GraphStoreManager_closed) = 0;
    v1 = *(_QWORD *)(v0 + 80);
  }
  v2 = OBJC_IVAR____TtC17KnowledgeGraphKit17GraphStoreManager_readWriteStore;
  v3 = *(void **)(v1 + OBJC_IVAR____TtC17KnowledgeGraphKit17GraphStoreManager_readWriteStore);
  if (v3)
  {
    v4 = *(id *)(v1 + OBJC_IVAR____TtC17KnowledgeGraphKit17GraphStoreManager_readWriteStore);
    goto LABEL_5;
  }
  v14 = objc_allocWithZone((Class)KGDegasGraphStore);
  v15 = (void *)sub_1CA1F07F0();
  v4 = objc_msgSend(v14, sel_initWithURL_, v15);

  if (!v4)
  {
    sub_1CA0BB3B8();
    swift_allocError();
    *v20 = 1;
    swift_willThrow();
    goto LABEL_12;
  }
  *(_QWORD *)(v0 + 16) = 0;
  v16 = objc_msgSend(v4, sel_openWithMode_error_, 134, v0 + 16);
  v7 = *(void **)(v0 + 16);
  if ((v16 & 1) != 0)
  {
    v17 = *(void **)(v1 + v2);
    *(_QWORD *)(v1 + v2) = v4;
    v18 = v7;
    v4 = v4;

    v3 = 0;
LABEL_5:
    *(_QWORD *)(v0 + 104) = v4;
    *(_QWORD *)(v0 + 24) = 0;
    v5 = v3;
    v6 = objc_msgSend(v4, sel_beginTransactionWithError_, v0 + 24);
    v7 = *(void **)(v0 + 24);
    if ((v6 & 1) != 0)
    {
      v8 = *(int **)(v0 + 56);
      v9 = *v8;
      v10 = v7;
      v11 = v4;
      v12 = (_QWORD *)swift_task_alloc();
      *(_QWORD *)(v0 + 112) = v12;
      *v12 = v0;
      v12[1] = sub_1CA0B982C;
      return ((uint64_t (*)(_QWORD, id, _UNKNOWN **))((char *)v8 + v9))(*(_QWORD *)(v0 + 96), v11, &off_1E83DEAF0);
    }
  }
  v19 = v7;
  sub_1CA1F07CC();

  swift_willThrow();
LABEL_12:
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1CA0B982C()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;

  v2 = *v1;
  *(_QWORD *)(*v1 + 120) = v0;
  swift_task_dealloc();
  if (!v0)

  return swift_task_switch();
}

uint64_t sub_1CA0B98EC()
{
  uint64_t v0;
  void *v1;
  unsigned int v2;
  void *v3;
  void *v4;
  id v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  id v9;

  v1 = *(void **)(v0 + 104);
  (*(void (**)(_QWORD, _QWORD, _QWORD))(*(_QWORD *)(v0 + 88) + 32))(*(_QWORD *)(v0 + 48), *(_QWORD *)(v0 + 96), *(_QWORD *)(v0 + 72));
  *(_QWORD *)(v0 + 40) = 0;
  v2 = objc_msgSend(v1, sel_commitTransactionWithError_, v0 + 40);
  v3 = *(void **)(v0 + 40);
  v4 = *(void **)(v0 + 104);
  if (v2)
  {
    v5 = v3;

  }
  else
  {
    v6 = *(_QWORD *)(v0 + 88);
    v7 = *(_QWORD *)(v0 + 72);
    v8 = *(_QWORD *)(v0 + 48);
    v9 = v3;
    sub_1CA1F07CC();

    swift_willThrow();
    (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v8, v7);
  }
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1CA0B9A18()
{
  uint64_t v0;
  void *v1;
  unsigned int v2;
  void *v3;
  void *v4;
  void *v5;
  id v6;
  id v7;

  v1 = *(void **)(v0 + 104);

  *(_QWORD *)(v0 + 32) = 0;
  v2 = objc_msgSend(v1, sel_rollbackTransactionWithError_, v0 + 32);
  v3 = *(void **)(v0 + 32);
  v4 = *(void **)(v0 + 120);
  v5 = *(void **)(v0 + 104);
  if (v2)
  {
    v6 = v3;
    swift_willThrow();

  }
  else
  {
    v7 = v3;
    sub_1CA1F07CC();

    swift_willThrow();
  }
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1CA0B9AFC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;

  v5[5] = a4;
  v5[6] = v4;
  v5[3] = a2;
  v5[4] = a3;
  v5[2] = a1;
  v6 = sub_1CA1F0874();
  v5[7] = v6;
  v5[8] = *(_QWORD *)(v6 - 8);
  v5[9] = swift_task_alloc();
  return swift_task_switch();
}

uint64_t sub_1CA0B9B64()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  __int128 v9;

  v2 = *(_QWORD *)(v0 + 40);
  v1 = *(_QWORD *)(v0 + 48);
  v3 = *(_QWORD *)(v1 + OBJC_IVAR____TtC17KnowledgeGraphKit17GraphStoreManager_executionQueue);
  v9 = *(_OWORD *)(v0 + 24);
  sub_1CA1F0868();
  v4 = swift_task_alloc();
  *(_QWORD *)(v0 + 80) = v4;
  *(_QWORD *)(v4 + 16) = v2;
  *(_QWORD *)(v4 + 24) = v1;
  *(_OWORD *)(v4 + 32) = v9;
  v5 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v0 + 88) = v5;
  *v5 = v0;
  v5[1] = sub_1CA0B9C28;
  v6 = *(_QWORD *)(v0 + 72);
  v7 = *(_QWORD *)(v0 + 16);
  v5[6] = *(_QWORD *)(v0 + 40);
  v5[7] = v3;
  v5[4] = &unk_1EF937410;
  v5[5] = v4;
  v5[2] = v7;
  v5[3] = v6;
  return swift_task_switch();
}

uint64_t sub_1CA0B9C28()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v3 = *(_QWORD *)(*v1 + 64);
  v2 = *(_QWORD *)(*v1 + 72);
  v4 = *(_QWORD *)(*v1 + 56);
  v5 = *v1;
  *(_QWORD *)(v5 + 96) = v0;
  swift_task_dealloc();
  (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v2, v4);
  swift_task_dealloc();
  if (v0)
    return swift_task_switch();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v5 + 8))();
}

uint64_t sub_1CA0B9CD4()
{
  uint64_t v0;

  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

unint64_t sub_1CA0B9D08(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  __n128 v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  unint64_t result;
  char v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  void (*v17)(char *, uint64_t, uint64_t, __n128);
  char isUniquelyReferenced_nonNull_native;
  uint64_t v19;
  uint64_t v20;

  v2 = v1;
  v4 = sub_1CA1F0808();
  v5 = *(_QWORD *)(v4 - 8);
  v7.n128_f64[0] = MEMORY[0x1E0C80A78](v4, v6);
  v9 = (char *)&v19 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = *(_QWORD *)(v1 + 112);
  if (!*(_QWORD *)(v10 + 16) || (result = sub_1CA0AA530(a1), (v12 & 1) == 0))
  {
    v17 = *(void (**)(char *, uint64_t, uint64_t, __n128))(v5 + 16);
    v17(v9, a1, v4, v7);
    type metadata accessor for GraphStoreManager();
    swift_allocObject();
    v16 = sub_1CA0B6C5C((uint64_t)v9);
    v15 = 1;
    goto LABEL_6;
  }
  v13 = *(_QWORD *)(v10 + 56);
  v14 = *(_QWORD *)(v13 + 16 * result + 8);
  v15 = v14 + 1;
  if (!__OFADD__(v14, 1))
  {
    v16 = *(_QWORD *)(v13 + 16 * result);
    v17 = *(void (**)(char *, uint64_t, uint64_t, __n128))(v5 + 16);
    swift_retain_n();
LABEL_6:
    ((void (*)(char *, uint64_t, uint64_t))v17)(v9, a1, v4);
    swift_retain();
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    v20 = *(_QWORD *)(v2 + 112);
    *(_QWORD *)(v2 + 112) = 0x8000000000000000;
    sub_1CA0ADFEC(v16, v15, (uint64_t)v9, isUniquelyReferenced_nonNull_native);
    *(_QWORD *)(v2 + 112) = v20;
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v5 + 8))(v9, v4);
    swift_release();
    return v16;
  }
  __break(1u);
  return result;
}

uint64_t sub_1CA0B9E8C(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;

  v2[2] = a1;
  v2[3] = v1;
  v3 = sub_1CA1F0874();
  v2[4] = v3;
  v2[5] = *(_QWORD *)(v3 - 8);
  v2[6] = swift_task_alloc();
  v4 = sub_1CA1F0808();
  v2[7] = v4;
  v2[8] = *(_QWORD *)(v4 - 8);
  v2[9] = swift_task_alloc();
  v2[10] = swift_task_alloc();
  return swift_task_switch();
}

uint64_t sub_1CA0B9F24()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t *v3;
  uint64_t v4;
  unint64_t v5;
  char v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v15;
  uint64_t v16;

  v1 = *(_QWORD *)(v0 + 24);
  v4 = *(_QWORD *)(v1 + 112);
  v3 = (uint64_t *)(v1 + 112);
  v2 = v4;
  if (*(_QWORD *)(v4 + 16) && (v5 = sub_1CA0AA530(*(_QWORD *)(v0 + 16)), (v6 & 1) != 0))
  {
    v7 = (uint64_t *)(*(_QWORD *)(v2 + 56) + 16 * v5);
    v8 = *v7;
    *(_QWORD *)(v0 + 88) = *v7;
    v9 = v7[1];
    if (v9 < 2)
    {
      v15 = *(_QWORD *)(v0 + 16);
      swift_retain();
      sub_1CA0F1718(v15);
      swift_release();
      return swift_task_switch();
    }
    else
    {
      v10 = *(_QWORD *)(v0 + 80);
      v11 = *(_QWORD *)(v0 + 56);
      v12 = *(_QWORD *)(v0 + 64);
      (*(void (**)(uint64_t, _QWORD, uint64_t))(v12 + 16))(v10, *(_QWORD *)(v0 + 16), v11);
      swift_retain_n();
      isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      v16 = *v3;
      *v3 = 0x8000000000000000;
      sub_1CA0ADFEC(v8, v9 - 1, v10, isUniquelyReferenced_nonNull_native);
      *v3 = v16;
      swift_bridgeObjectRelease();
      (*(void (**)(uint64_t, uint64_t))(v12 + 8))(v10, v11);
      swift_release();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      return (*(uint64_t (**)(void))(v0 + 8))();
    }
  }
  else
  {
    (*(void (**)(_QWORD, _QWORD, _QWORD))(*(_QWORD *)(v0 + 64) + 16))(*(_QWORD *)(v0 + 72), *(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 56));
    sub_1CA1F1054();
    swift_bridgeObjectRelease();
    sub_1CA0BB950(&qword_1EF937580, (uint64_t (*)(uint64_t))MEMORY[0x1E0CAFFF8], MEMORY[0x1E0CB0048]);
    sub_1CA1F12AC();
    sub_1CA1F0A3C();
    swift_bridgeObjectRelease();
    return sub_1CA1F11C8();
  }
}

uint64_t sub_1CA0BA168()
{
  _QWORD *v0;
  _QWORD *v1;
  uint64_t (*v3)(uint64_t, uint64_t, uint64_t, uint64_t);

  sub_1CA1F0868();
  v3 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))((char *)&dword_1EF938B10 + dword_1EF938B10);
  v1 = (_QWORD *)swift_task_alloc();
  v0[12] = v1;
  *v1 = v0;
  v1[1] = sub_1CA0BA1E8;
  return v3((uint64_t)v3, v0[6], (uint64_t)&unk_1EF937590, v0[11]);
}

uint64_t sub_1CA0BA1E8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v2 = *(_QWORD *)(*(_QWORD *)v0 + 40);
  v1 = *(_QWORD *)(*(_QWORD *)v0 + 48);
  v3 = *(_QWORD *)(*(_QWORD *)v0 + 32);
  swift_task_dealloc();
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v1, v3);
  return swift_task_switch();
}

uint64_t sub_1CA0BA25C()
{
  return swift_task_switch();
}

uint64_t sub_1CA0BA270()
{
  uint64_t v0;

  swift_release();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1CA0BA2BC(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;

  v3[5] = a2;
  v3[6] = v2;
  v3[4] = a1;
  v4 = sub_1CA1F0808();
  v3[7] = v4;
  v3[8] = *(_QWORD *)(v4 - 8);
  v3[9] = swift_task_alloc();
  v5 = sub_1CA1F0874();
  v3[10] = v5;
  v3[11] = *(_QWORD *)(v5 - 8);
  v3[12] = swift_task_alloc();
  return swift_task_switch();
}

uint64_t sub_1CA0BA348()
{
  uint64_t v0;
  NSObject *v1;
  os_log_type_t v2;
  _BOOL4 v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint8_t *v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v13;
  uint64_t v14;

  sub_1CA0BB950(&qword_1EF9374F0, (uint64_t (*)(uint64_t))MEMORY[0x1E0CAFFF8], MEMORY[0x1E0CB0028]);
  if ((sub_1CA1F09D0() & 1) != 0)
  {
    (*(void (**)(_QWORD, _QWORD, _QWORD))(*(_QWORD *)(v0 + 64) + 16))(*(_QWORD *)(v0 + 72), *(_QWORD *)(v0 + 32), *(_QWORD *)(v0 + 56));
    sub_1CA0AB910(0, &qword_1EF937520);
    v1 = sub_1CA1F0E98();
    v2 = sub_1CA1F0DFC();
    v3 = os_log_type_enabled(v1, v2);
    v5 = *(_QWORD *)(v0 + 64);
    v4 = *(_QWORD *)(v0 + 72);
    v6 = *(_QWORD *)(v0 + 56);
    if (v3)
    {
      v13 = *(_QWORD *)(v0 + 56);
      v7 = (uint8_t *)swift_slowAlloc();
      v8 = swift_slowAlloc();
      v14 = v8;
      *(_DWORD *)v7 = 136315138;
      v9 = sub_1CA1F07FC();
      *(_QWORD *)(v0 + 24) = sub_1CA1093F0(v9, v10, &v14);
      sub_1CA1F0ED4();
      swift_bridgeObjectRelease();
      (*(void (**)(uint64_t, uint64_t))(v5 + 8))(v4, v13);
      _os_log_impl(&dword_1CA0A5000, v1, v2, "Swapping graph store from %s to same location, doing nothing", v7, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x1CAA4BBE4](v8, -1, -1);
      MEMORY[0x1CAA4BBE4](v7, -1, -1);

    }
    else
    {

      (*(void (**)(uint64_t, uint64_t))(v5 + 8))(v4, v6);
    }
    swift_task_dealloc();
    swift_task_dealloc();
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
  else
  {
    v11 = *(_QWORD *)(v0 + 40);
    *(_QWORD *)(v0 + 104) = sub_1CA0B9D08(*(_QWORD *)(v0 + 32));
    *(_QWORD *)(v0 + 112) = sub_1CA0B9D08(v11);
    return swift_task_switch();
  }
}

uint64_t sub_1CA0BA5A0()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  _QWORD *v4;
  uint64_t (*v6)(void);

  v2 = v0[13];
  v1 = v0[14];
  v3 = (_QWORD *)swift_task_alloc();
  v0[15] = v3;
  v3[2] = v2;
  v3[3] = &unk_1EF937500;
  v3[4] = v1;
  v0[2] = MEMORY[0x1E0DEE9D8];
  sub_1CA0BB950(&qword_1EF937480, (uint64_t (*)(uint64_t))MEMORY[0x1E0DEF4F8], MEMORY[0x1E0DEF510]);
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EF937488);
  sub_1CA0BB910(&qword_1EF937490, &qword_1EF937488);
  sub_1CA1F0F34();
  v6 = (uint64_t (*)(void))((char *)&dword_1EF938B10 + dword_1EF938B10);
  v4 = (_QWORD *)swift_task_alloc();
  v0[16] = v4;
  *v4 = v0;
  v4[1] = sub_1CA0BA6D4;
  return v6();
}

uint64_t sub_1CA0BA6D4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v3 = *(_QWORD *)(*(_QWORD *)v1 + 88);
  v2 = *(_QWORD *)(*(_QWORD *)v1 + 96);
  v4 = *(_QWORD *)(*(_QWORD *)v1 + 80);
  *(_QWORD *)(*(_QWORD *)v1 + 136) = v0;
  swift_task_dealloc();
  (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v2, v4);
  if (!v0)
    swift_task_dealloc();
  return swift_task_switch();
}

uint64_t sub_1CA0BA770()
{
  uint64_t v0;
  _QWORD *v1;

  v1 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v0 + 144) = v1;
  *v1 = v0;
  v1[1] = sub_1CA0BA7C0;
  return sub_1CA0B9E8C(*(_QWORD *)(v0 + 32));
}

uint64_t sub_1CA0BA7C0()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;

  v1 = *v0;
  v2 = *v0;
  swift_task_dealloc();
  v3 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v1 + 152) = v3;
  *v3 = v2;
  v3[1] = sub_1CA0BA828;
  return sub_1CA0B9E8C(*(_QWORD *)(v1 + 40));
}

uint64_t sub_1CA0BA828()
{
  swift_task_dealloc();
  return swift_task_switch();
}

uint64_t sub_1CA0BA880()
{
  uint64_t v0;

  swift_release();
  swift_release();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1CA0BA8D0()
{
  swift_task_dealloc();
  return swift_task_switch();
}

uint64_t sub_1CA0BA910()
{
  uint64_t v0;

  swift_release();
  swift_release();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1CA0BA96C(uint64_t a1, int *a2)
{
  uint64_t v2;
  _QWORD *v4;
  uint64_t (*v6)(uint64_t);

  v6 = (uint64_t (*)(uint64_t))((char *)a2 + *a2);
  v4 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v2 + 16) = v4;
  *v4 = v2;
  v4[1] = sub_1CA0BBBA8;
  return v6(a1);
}

uint64_t sub_1CA0BA9D0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  _QWORD *v6;

  v6[7] = a5;
  v6[8] = a6;
  v6[5] = a3;
  v6[6] = a4;
  v6[3] = a1;
  v6[4] = a2;
  return swift_task_switch();
}

uint64_t sub_1CA0BA9F0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  __int128 v4;
  _QWORD *v5;

  v1 = *(_QWORD *)(v0 + 64);
  v2 = *(_QWORD *)(v0 + 48);
  v3 = swift_task_alloc();
  v4 = *(_OWORD *)(v0 + 32);
  *(_QWORD *)(v3 + 16) = v1;
  *(_QWORD *)(v3 + 24) = v2;
  *(_OWORD *)(v3 + 32) = v4;
  __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_1EF937438);
  sub_1CA1F0C70();
  sub_1CA1F0E44();
  swift_task_dealloc();
  *(_QWORD *)(v0 + 72) = *(_QWORD *)(v0 + 16);
  v5 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v0 + 80) = v5;
  *v5 = v0;
  v5[1] = sub_1CA0BAAE8;
  return sub_1CA1F0C64();
}

uint64_t sub_1CA0BAAE8()
{
  uint64_t v0;
  uint64_t v1;

  *(_QWORD *)(*(_QWORD *)v1 + 88) = v0;
  swift_task_dealloc();
  return swift_task_switch();
}

uint64_t sub_1CA0BAB4C()
{
  uint64_t v0;

  swift_release();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1CA0BAB80()
{
  uint64_t v0;

  swift_release();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1CA0BABB4@<X0>(NSObject *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t *a5@<X8>)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  _QWORD *v15;
  NSObject *v16;
  uint64_t result;
  uint64_t v18;

  v10 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EF937440);
  MEMORY[0x1E0C80A78](v10, v11);
  v13 = (char *)&v18 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  dispatch_suspend(a1);
  v14 = sub_1CA1F0C58();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v14 - 8) + 56))(v13, 1, 1, v14);
  v15 = (_QWORD *)swift_allocObject();
  v15[2] = 0;
  v15[3] = 0;
  v15[4] = a4;
  v15[5] = a1;
  v15[6] = a2;
  v15[7] = a3;
  v16 = a1;
  swift_retain();
  result = sub_1CA0BADE8((uint64_t)v13, (uint64_t)&unk_1EF937450, (uint64_t)v15);
  *a5 = result;
  return result;
}

uint64_t sub_1CA0BACB4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int *a5)
{
  uint64_t v5;
  _QWORD *v7;
  uint64_t (*v9)(uint64_t);

  *(_QWORD *)(v5 + 16) = a4;
  v9 = (uint64_t (*)(uint64_t))((char *)a5 + *a5);
  v7 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v5 + 24) = v7;
  *v7 = v5;
  v7[1] = sub_1CA0BAD1C;
  return v9(a1);
}

uint64_t sub_1CA0BAD1C()
{
  uint64_t v0;
  uint64_t v1;

  *(_QWORD *)(*(_QWORD *)v1 + 32) = v0;
  swift_task_dealloc();
  return swift_task_switch();
}

uint64_t sub_1CA0BAD80()
{
  uint64_t v0;

  dispatch_resume(*(dispatch_object_t *)(v0 + 16));
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1CA0BADB4()
{
  uint64_t v0;

  dispatch_resume(*(dispatch_object_t *)(v0 + 16));
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1CA0BADE8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;

  v5 = sub_1CA1F0C58();
  v6 = *(_QWORD *)(v5 - 8);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v6 + 48))(a1, 1, v5) != 1)
  {
    sub_1CA1F0C4C();
    (*(void (**)(uint64_t, uint64_t))(v6 + 8))(a1, v5);
    if (!*(_QWORD *)(a3 + 16))
      return swift_task_create();
    goto LABEL_3;
  }
  sub_1CA0BB378(a1);
  if (*(_QWORD *)(a3 + 16))
  {
LABEL_3:
    swift_getObjectType();
    swift_unknownObjectRetain();
    sub_1CA1F0C34();
    swift_unknownObjectRelease();
  }
  return swift_task_create();
}

uint64_t sub_1CA0BAF10(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v4;
  uint64_t v5;

  v4[3] = a3;
  v4[4] = a4;
  v4[2] = a2;
  v5 = sub_1CA1F0874();
  v4[5] = v5;
  v4[6] = *(_QWORD *)(v5 - 8);
  v4[7] = swift_task_alloc();
  return swift_task_switch();
}

uint64_t sub_1CA0BAF78()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  __int128 v5;

  v1 = *(_QWORD *)(v0 + 32);
  v5 = *(_OWORD *)(v0 + 16);
  sub_1CA1F0868();
  v2 = swift_task_alloc();
  *(_QWORD *)(v0 + 64) = v2;
  *(_QWORD *)(v2 + 16) = v1;
  *(_OWORD *)(v2 + 24) = v5;
  *(_QWORD *)&v5 = (char *)&dword_1EF938B10 + dword_1EF938B10;
  v3 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v0 + 72) = v3;
  *v3 = v0;
  v3[1] = sub_1CA0BB024;
  return ((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))v5)(v5, *(_QWORD *)(v0 + 56), (uint64_t)&unk_1EF937550, v2);
}

uint64_t sub_1CA0BB024()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v3 = *(_QWORD *)(*(_QWORD *)v1 + 48);
  v2 = *(_QWORD *)(*(_QWORD *)v1 + 56);
  v4 = *(_QWORD *)(*(_QWORD *)v1 + 40);
  *(_QWORD *)(*(_QWORD *)v1 + 80) = v0;
  swift_task_dealloc();
  (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v2, v4);
  swift_task_dealloc();
  return swift_task_switch();
}

uint64_t sub_1CA0BB0B8()
{
  uint64_t v0;

  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1CA0BB0EC()
{
  uint64_t v0;

  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1CA0BB120()
{
  swift_bridgeObjectRelease();
  swift_defaultActor_destroy();
  return swift_defaultActor_deallocate();
}

uint64_t type metadata accessor for GraphStoreManager.GraphStoreManagerRepository()
{
  return objc_opt_self();
}

uint64_t sub_1CA0BB164()
{
  uint64_t v0;

  return v0;
}

uint64_t sub_1CA0BB170(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  _QWORD *v8;

  v4 = v1[2];
  v6 = v1[4];
  v5 = v1[5];
  v7 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v2 + 16) = v7;
  *v7 = v2;
  v7[1] = sub_1CA0BBBA8;
  v8 = (_QWORD *)swift_task_alloc();
  v7[2] = v8;
  *v8 = v7;
  v8[1] = sub_1CA0BBBA8;
  return sub_1CA0B9570(a1, v6, v5, v4);
}

uint64_t sub_1CA0BB204()
{
  return swift_deallocObject();
}

uint64_t sub_1CA0BB214(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  int *v4;
  _QWORD *v5;

  v4 = *(int **)(v1 + 24);
  v5 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v2 + 16) = v5;
  *v5 = v2;
  v5[1] = sub_1CA0BBBA8;
  return ((uint64_t (*)(uint64_t, int *))((char *)&dword_1EF937420 + dword_1EF937420))(a1, v4);
}

uint64_t sub_1CA0BB294@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v1;

  return sub_1CA0BABB4(*(NSObject **)(v1 + 24), *(_QWORD *)(v1 + 32), *(_QWORD *)(v1 + 40), *(_QWORD *)(v1 + 16), a1);
}

uint64_t sub_1CA0BB2B0()
{
  uint64_t v0;

  swift_unknownObjectRelease();

  swift_release();
  return swift_deallocObject();
}

uint64_t sub_1CA0BB2E4(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  int *v5;
  _QWORD *v6;
  _QWORD *v7;
  uint64_t (*v9)(uint64_t);

  v4 = *(_QWORD *)(v1 + 40);
  v5 = *(int **)(v1 + 48);
  v6 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v2 + 16) = v6;
  *v6 = v2;
  v6[1] = sub_1CA0BBBA8;
  v6[2] = v4;
  v9 = (uint64_t (*)(uint64_t))((char *)v5 + *v5);
  v7 = (_QWORD *)swift_task_alloc();
  v6[3] = v7;
  *v7 = v6;
  v7[1] = sub_1CA0BAD1C;
  return v9(a1);
}

uint64_t sub_1CA0BB378(uint64_t a1)
{
  uint64_t v2;

  v2 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EF937440);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

unint64_t sub_1CA0BB3B8()
{
  unint64_t result;

  result = qword_1EF937460;
  if (!qword_1EF937460)
  {
    result = MEMORY[0x1CAA4BB30](&unk_1CA1F92BC, &type metadata for GraphStoreManager.Error);
    atomic_store(result, &qword_1EF937460);
  }
  return result;
}

uint64_t sub_1CA0BB3FC(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;

  v4 = v1[2];
  v5 = v1[3];
  v7 = v1[4];
  v6 = v1[5];
  v8 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v2 + 16) = v8;
  *v8 = v2;
  v8[1] = sub_1CA0BBBA8;
  return sub_1CA0B9310(a1, v5, v7, v6, v4);
}

uint64_t sub_1CA0BB474(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  _QWORD *v8;

  v4 = v1[2];
  v6 = v1[4];
  v5 = v1[5];
  v7 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v2 + 16) = v7;
  *v7 = v2;
  v7[1] = sub_1CA0BBBA8;
  v8 = (_QWORD *)swift_task_alloc();
  v7[2] = v8;
  *v8 = v7;
  v8[1] = sub_1CA0BBBA8;
  return sub_1CA0B9570(a1, v6, v5, v4);
}

uint64_t sub_1CA0BB508(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  _QWORD *v8;

  v4 = v1[2];
  v6 = v1[4];
  v5 = v1[5];
  v7 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v2 + 16) = v7;
  *v7 = v2;
  v7[1] = sub_1CA0BBBA8;
  v8 = (_QWORD *)swift_task_alloc();
  v7[2] = v8;
  *v8 = v7;
  v8[1] = sub_1CA0BBBA8;
  return sub_1CA0B82A4(a1, v6, v5, v4);
}

uint64_t sub_1CA0BB59C(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  _QWORD *v8;

  v4 = v1[2];
  v6 = v1[4];
  v5 = v1[5];
  v7 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v2 + 16) = v7;
  *v7 = v2;
  v7[1] = sub_1CA0BBBA8;
  v8 = (_QWORD *)swift_task_alloc();
  v7[2] = v8;
  *v8 = v7;
  v8[1] = sub_1CA0B90F0;
  return sub_1CA0B8AD4(a1, v6, v5, v4);
}

void sub_1CA0BB630(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v4;
  uint64_t v6;
  uint64_t v7;
  id v8;
  void *v9;
  char v10;

  if (a1 != a2)
  {
    v4 = a1;
    if (a2 >= a1)
    {
      sub_1CA0AB910(0, &qword_1EF9374E0);
      v6 = OBJC_IVAR____TtC17KnowledgeGraphKit17GraphStoreManager_readOnlyStores;
      while ((uint64_t)v4 < a2)
      {
        v7 = *(_QWORD *)(a3 + v6);
        if ((v7 & 0xC000000000000001) != 0)
        {
          v8 = (id)MEMORY[0x1CAA4A7A4](v4);
        }
        else
        {
          if ((v4 & 0x8000000000000000) != 0)
            goto LABEL_15;
          if (v4 >= *(_QWORD *)((v7 & 0xFFFFFFFFFFFFF8) + 0x10))
            goto LABEL_16;
          v8 = *(id *)(v7 + 8 * v4 + 32);
        }
        v9 = v8;
        v10 = sub_1CA1F0E68();

        if ((v10 & 1) == 0 && a2 != ++v4)
          continue;
        return;
      }
      __break(1u);
LABEL_15:
      __break(1u);
LABEL_16:
      __break(1u);
    }
    __break(1u);
  }
}

uint64_t sub_1CA0BB748(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  _QWORD *v8;

  v8 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v4 + 16) = v8;
  *v8 = v4;
  v8[1] = sub_1CA0BBBA8;
  return sub_1CA0BAF10(a1, a2, a3, v3);
}

uint64_t sub_1CA0BB7B4(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  _QWORD *v7;

  v4 = *(_QWORD *)(v1 + 24);
  v5 = *(_QWORD *)(v1 + 32);
  v6 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v2 + 16) = v6;
  *v6 = v2;
  v6[1] = sub_1CA0BBBA8;
  v7 = (_QWORD *)swift_task_alloc();
  v6[2] = v7;
  *v7 = v6;
  v7[1] = sub_1CA0BBBA8;
  return sub_1CA0B8014(a1, v4, v5);
}

uint64_t sub_1CA0BB844(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;

  v4 = v1[2];
  v5 = v1[3];
  v6 = v1[4];
  v7 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v2 + 16) = v7;
  *v7 = v2;
  v7[1] = sub_1CA0BBBA8;
  return sub_1CA0B8FFC(a1, v4, v5, v6);
}

uint64_t sub_1CA0BB8B0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  __int128 v3;

  v2 = swift_task_alloc();
  v3 = *(_OWORD *)(v0 + 16);
  *(_QWORD *)(v1 + 16) = v2;
  *(_QWORD *)v2 = v1;
  *(_QWORD *)(v2 + 8) = sub_1CA0B90F0;
  *(_OWORD *)(v2 + 24) = v3;
  return swift_task_switch();
}

uint64_t sub_1CA0BB910(unint64_t *a1, uint64_t *a2)
{
  uint64_t result;
  uint64_t v4;

  result = *a1;
  if (!result)
  {
    v4 = __swift_instantiateConcreteTypeFromMangledNameAbstract(a2);
    result = MEMORY[0x1CAA4BB30](MEMORY[0x1E0DEAF38], v4);
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_1CA0BB950(unint64_t *a1, uint64_t (*a2)(uint64_t), uint64_t a3)
{
  uint64_t result;
  uint64_t v6;

  result = *a1;
  if (!result)
  {
    v6 = a2(255);
    result = MEMORY[0x1CAA4BB30](a3, v6);
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_1CA0BB990()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;

  v2 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v1 + 16) = v2;
  *v2 = v1;
  v2[1] = sub_1CA0BBBA8;
  v2[2] = v0;
  return swift_task_switch();
}

uint64_t getEnumTagSinglePayload for GraphStoreManager.Error(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v4;
  unsigned int v6;
  BOOL v7;
  int v8;

  if (!a2)
    return 0;
  if (a2 < 0xFC)
    goto LABEL_17;
  if (a2 + 4 >= 0xFFFF00)
    v2 = 4;
  else
    v2 = 2;
  if ((a2 + 4) >> 8 < 0xFF)
    v3 = 1;
  else
    v3 = v2;
  if (v3 == 4)
  {
    v4 = *(_DWORD *)(a1 + 1);
    if (v4)
      return (*a1 | (v4 << 8)) - 4;
  }
  else
  {
    if (v3 == 2)
    {
      v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1))
        goto LABEL_17;
      return (*a1 | (v4 << 8)) - 4;
    }
    v4 = a1[1];
    if (a1[1])
      return (*a1 | (v4 << 8)) - 4;
  }
LABEL_17:
  v6 = *a1;
  v7 = v6 >= 5;
  v8 = v6 - 5;
  if (!v7)
    v8 = -1;
  return (v8 + 1);
}

uint64_t storeEnumTagSinglePayload for GraphStoreManager.Error(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 4 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 4) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFC)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFB)
    return ((uint64_t (*)(void))((char *)&loc_1CA0BBAC8 + 4 * byte_1CA1F9125[v4]))();
  *a1 = a2 + 4;
  return ((uint64_t (*)(void))((char *)sub_1CA0BBAFC + 4 * byte_1CA1F9120[v4]))();
}

uint64_t sub_1CA0BBAFC(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1CA0BBB04(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1CA0BBB0CLL);
  return result;
}

uint64_t sub_1CA0BBB18(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1CA0BBB20);
  *(_BYTE *)result = a2 + 4;
  return result;
}

uint64_t sub_1CA0BBB24(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1CA0BBB2C(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1CA0BBB38(unsigned __int8 *a1)
{
  return *a1;
}

_BYTE *sub_1CA0BBB44(_BYTE *result, char a2)
{
  *result = a2;
  return result;
}

ValueMetadata *type metadata accessor for GraphStoreManager.Error()
{
  return &type metadata for GraphStoreManager.Error;
}

unint64_t sub_1CA0BBB60()
{
  unint64_t result;

  result = qword_1EF937598;
  if (!qword_1EF937598)
  {
    result = MEMORY[0x1CAA4BB30](&unk_1CA1F9294, &type metadata for GraphStoreManager.Error);
    atomic_store(result, (unint64_t *)&qword_1EF937598);
  }
  return result;
}

uint64_t sub_1CA0BBC6C()
{
  uint64_t v0;
  id v1;
  uint64_t v3;
  uint64_t v4;

  v0 = swift_bridgeObjectRetain();
  sub_1CA0ADC38(v0, &v4);
  v1 = *(id *)(v4 + 16);
  objc_msgSend(v1, sel_copy);
  sub_1CA1F0F04();
  swift_unknownObjectRelease();
  sub_1CA0AB910(0, &qword_1ED852B10);
  swift_dynamicCast();

  swift_release();
  return v3;
}

uint64_t sub_1CA0BBD58()
{
  uint64_t v0;
  uint64_t v1;
  id v2;
  id v3;
  uint64_t v4;
  id v5;
  uint64_t v6;
  uint64_t v8[4];
  uint64_t v9;

  v1 = *(_QWORD *)(v0 + OBJC_IVAR____TtC17KnowledgeGraphKit32KGWrapperDirectedBinaryAdjacency_wrappedValue);
  v2 = objc_allocWithZone((Class)KGMutableElementIdentifierSet);
  swift_bridgeObjectRetain();
  v3 = objc_msgSend(v2, sel_init);
  __swift_instantiateConcreteTypeFromMangledName(&qword_1ED852AF0);
  v4 = swift_allocObject();
  *(_QWORD *)(v4 + 16) = v3;
  v8[0] = v4;
  v9 = v1;
  sub_1CA0AC2B4(&v9, (uint64_t)v8);
  swift_bridgeObjectRelease();
  v5 = *(id *)(v8[0] + 16);
  objc_msgSend(v5, sel_copy);
  sub_1CA1F0F04();
  swift_unknownObjectRelease();
  sub_1CA0AB910(0, &qword_1ED852B10);
  swift_dynamicCast();

  v6 = v9;
  swift_release();
  return v6;
}

id sub_1CA0BBE80(void *a1)
{
  return sub_1CA0BC044(a1, (void (*)(uint64_t *, unint64_t *, uint64_t))sub_1CA0AEDA4);
}

id sub_1CA0BBED8(void *a1)
{
  uint64_t v1;
  id v3;
  uint64_t inited;
  uint64_t v5;
  objc_class *v6;
  char *v7;
  objc_super v9;
  uint64_t v10;
  _QWORD v11[5];

  v11[4] = *(_QWORD *)(v1 + OBJC_IVAR____TtC17KnowledgeGraphKit32KGWrapperDirectedBinaryAdjacency_wrappedValue);
  swift_bridgeObjectRetain();
  v3 = a1;
  objc_msgSend(v3, sel_mutableCopy);
  sub_1CA1F0F04();
  swift_unknownObjectRelease();
  sub_1CA0AB910(0, (unint64_t *)&qword_1ED852B18);
  swift_dynamicCast();

  __swift_instantiateConcreteTypeFromMangledName(&qword_1ED852AF0);
  inited = swift_initStackObject();
  *(_QWORD *)(inited + 16) = v10;
  v10 = inited;
  DirectedBinaryAdjacency.intersectingSources(with:)(&v10, v11);
  swift_release();
  swift_bridgeObjectRelease();
  v5 = v11[0];
  v6 = (objc_class *)type metadata accessor for KGWrapperDirectedBinaryAdjacency();
  v7 = (char *)objc_allocWithZone(v6);
  *(_QWORD *)&v7[OBJC_IVAR____TtC17KnowledgeGraphKit32KGWrapperDirectedBinaryAdjacency_wrappedValue] = v5;
  v9.receiver = v7;
  v9.super_class = v6;
  return objc_msgSendSuper2(&v9, sel_init);
}

id sub_1CA0BC038(void *a1)
{
  return sub_1CA0BC044(a1, (void (*)(uint64_t *, unint64_t *, uint64_t))sub_1CA0AF3DC);
}

id sub_1CA0BC044(void *a1, void (*a2)(uint64_t *, unint64_t *, uint64_t))
{
  uint64_t v2;
  uint64_t v5;
  id v6;
  uint64_t inited;
  unint64_t v8;
  objc_class *v9;
  char *v10;
  objc_super v12;
  uint64_t v13;
  unint64_t v14[4];

  v5 = *(_QWORD *)(v2 + OBJC_IVAR____TtC17KnowledgeGraphKit32KGWrapperDirectedBinaryAdjacency_wrappedValue);
  swift_bridgeObjectRetain();
  v6 = a1;
  objc_msgSend(v6, sel_mutableCopy);
  sub_1CA1F0F04();
  swift_unknownObjectRelease();
  sub_1CA0AB910(0, (unint64_t *)&qword_1ED852B18);
  swift_dynamicCast();

  __swift_instantiateConcreteTypeFromMangledName(&qword_1ED852AF0);
  inited = swift_initStackObject();
  *(_QWORD *)(inited + 16) = v13;
  v13 = v5;
  v14[0] = sub_1CA0AECA8(MEMORY[0x1E0DEE9D8]);
  a2(&v13, v14, inited);
  swift_bridgeObjectRelease();
  swift_release();
  v8 = v14[0];
  v9 = (objc_class *)type metadata accessor for KGWrapperDirectedBinaryAdjacency();
  v10 = (char *)objc_allocWithZone(v9);
  *(_QWORD *)&v10[OBJC_IVAR____TtC17KnowledgeGraphKit32KGWrapperDirectedBinaryAdjacency_wrappedValue] = v8;
  v12.receiver = v10;
  v12.super_class = v9;
  return objc_msgSendSuper2(&v12, sel_init);
}

id sub_1CA0BC1BC(void *a1)
{
  uint64_t v1;
  uint64_t v3;
  id v4;
  uint64_t inited;
  unint64_t v6;
  objc_class *v7;
  char *v8;
  objc_super v10;
  uint64_t v11;
  unint64_t v12[4];

  v3 = *(_QWORD *)(v1 + OBJC_IVAR____TtC17KnowledgeGraphKit32KGWrapperDirectedBinaryAdjacency_wrappedValue);
  swift_bridgeObjectRetain();
  v4 = a1;
  objc_msgSend(v4, sel_mutableCopy);
  sub_1CA1F0F04();
  swift_unknownObjectRelease();
  sub_1CA0AB910(0, (unint64_t *)&qword_1ED852B18);
  swift_dynamicCast();

  __swift_instantiateConcreteTypeFromMangledName(&qword_1ED852AF0);
  inited = swift_initStackObject();
  *(_QWORD *)(inited + 16) = v11;
  v11 = v3;
  v12[0] = sub_1CA0AECA8(MEMORY[0x1E0DEE9D8]);
  sub_1CA0AF650(&v11, inited, (uint64_t *)v12);
  swift_bridgeObjectRelease();
  swift_release();
  v6 = v12[0];
  v7 = (objc_class *)type metadata accessor for KGWrapperDirectedBinaryAdjacency();
  v8 = (char *)objc_allocWithZone(v7);
  *(_QWORD *)&v8[OBJC_IVAR____TtC17KnowledgeGraphKit32KGWrapperDirectedBinaryAdjacency_wrappedValue] = v6;
  v10.receiver = v8;
  v10.super_class = v7;
  return objc_msgSendSuper2(&v10, sel_init);
}

id sub_1CA0BC328(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;
  objc_class *v4;
  char *v5;
  objc_super v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;

  v2 = *(_QWORD *)(v1 + OBJC_IVAR____TtC17KnowledgeGraphKit32KGWrapperDirectedBinaryAdjacency_wrappedValue);
  v8 = *(_QWORD *)(a1 + OBJC_IVAR____TtC17KnowledgeGraphKit32KGWrapperDirectedBinaryAdjacency_wrappedValue);
  v9 = v2;
  static ElementIdentifierTupleSet.joinOnTargets(_:_:)(&v9, &v8, &v10);
  v3 = v10;
  v4 = (objc_class *)type metadata accessor for KGWrapperDirectedBinaryAdjacency();
  v5 = (char *)objc_allocWithZone(v4);
  *(_QWORD *)&v5[OBJC_IVAR____TtC17KnowledgeGraphKit32KGWrapperDirectedBinaryAdjacency_wrappedValue] = v3;
  v7.receiver = v5;
  v7.super_class = v4;
  return objc_msgSendSuper2(&v7, sel_init);
}

id sub_1CA0BC46C(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v5;
  char v6;

  v3 = *(_QWORD *)(v2 + OBJC_IVAR____TtC17KnowledgeGraphKit32KGWrapperDirectedBinaryAdjacency_wrappedValue);
  if (*(_QWORD *)(v3 + 16) && (v5 = sub_1CA0AA4D8(a1), (v6 & 1) != 0))
    return objc_msgSend(*(id *)(*(_QWORD *)(*(_QWORD *)(v3 + 56) + 8 * v5) + 16), sel_containsIdentifier_, a2);
  else
    return 0;
}

uint64_t sub_1CA0BC514(void *a1)
{
  uint64_t v1;
  id v3;
  uint64_t inited;
  id v5;
  uint64_t v6;
  uint64_t v8[4];
  uint64_t v9;
  uint64_t v10;

  v9 = *(_QWORD *)(v1 + OBJC_IVAR____TtC17KnowledgeGraphKit32KGWrapperDirectedBinaryAdjacency_wrappedValue);
  swift_bridgeObjectRetain();
  v3 = a1;
  objc_msgSend(v3, sel_mutableCopy);
  sub_1CA1F0F04();
  swift_unknownObjectRelease();
  sub_1CA0AB910(0, (unint64_t *)&qword_1ED852B18);
  swift_dynamicCast();

  __swift_instantiateConcreteTypeFromMangledName(&qword_1ED852AF0);
  inited = swift_initStackObject();
  *(_QWORD *)(inited + 16) = v10;
  v8[0] = inited;
  DirectedBinaryAdjacency.targets(forSources:)(v8, &v10);
  swift_release();
  swift_bridgeObjectRelease();
  v5 = *(id *)(v10 + 16);
  objc_msgSend(v5, sel_copy);
  sub_1CA1F0F04();
  swift_unknownObjectRelease();
  sub_1CA0AB910(0, &qword_1ED852B10);
  swift_dynamicCast();

  v6 = v9;
  swift_release();
  return v6;
}

uint64_t sub_1CA0BC6C0(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;
  char v4;
  id v5;
  id v6;
  uint64_t v8;

  v2 = *(_QWORD *)(v1 + OBJC_IVAR____TtC17KnowledgeGraphKit32KGWrapperDirectedBinaryAdjacency_wrappedValue);
  if (*(_QWORD *)(v2 + 16) && (v3 = sub_1CA0AA4D8(a1), (v4 & 1) != 0))
  {
    v5 = *(id *)(*(_QWORD *)(*(_QWORD *)(v2 + 56) + 8 * v3) + 16);
    swift_retain();
  }
  else
  {
    v5 = objc_msgSend(objc_allocWithZone((Class)KGMutableElementIdentifierSet), sel_init);
    __swift_instantiateConcreteTypeFromMangledName(&qword_1ED852AF0);
    *(_QWORD *)(swift_allocObject() + 16) = v5;
  }
  v6 = v5;
  objc_msgSend(v6, sel_copy);
  sub_1CA1F0F04();
  swift_unknownObjectRelease();
  sub_1CA0AB910(0, &qword_1ED852B10);
  swift_dynamicCast();

  swift_release();
  return v8;
}

id sub_1CA0BC930(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  objc_class *v4;
  char *v5;
  objc_super v7;
  uint64_t v8;
  uint64_t v9;

  v2 = *(_QWORD *)(v1 + OBJC_IVAR____TtC17KnowledgeGraphKit32KGWrapperDirectedBinaryAdjacency_wrappedValue);
  v8 = *(_QWORD *)(a1 + OBJC_IVAR____TtC17KnowledgeGraphKit32KGWrapperDirectedBinaryAdjacency_wrappedValue);
  v9 = v2;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  ElementIdentifierTupleSet.formUnion(_:)(&v8);
  v3 = v9;
  v4 = (objc_class *)type metadata accessor for KGWrapperDirectedBinaryAdjacency();
  v5 = (char *)objc_allocWithZone(v4);
  *(_QWORD *)&v5[OBJC_IVAR____TtC17KnowledgeGraphKit32KGWrapperDirectedBinaryAdjacency_wrappedValue] = v3;
  v7.receiver = v5;
  v7.super_class = v4;
  return objc_msgSendSuper2(&v7, sel_init);
}

uint64_t sub_1CA0BCA00(unint64_t a1)
{
  uint64_t v1;
  id v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v4 = *(_QWORD *)(v1 + OBJC_IVAR____TtC17KnowledgeGraphKit32KGWrapperDirectedBinaryAdjacency_wrappedValue);
  DirectedBinaryAdjacency.targets(minCount:)(a1, &v6);
  v2 = *(id *)(v6 + 16);
  objc_msgSend(v2, sel_copy, v4);
  sub_1CA1F0F04();
  swift_unknownObjectRelease();
  sub_1CA0AB910(0, &qword_1ED852B10);
  swift_dynamicCast();

  swift_release();
  return v5;
}

uint64_t sub_1CA0BCAF8(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char v4;
  char *v6;
  _BYTE v7[24];
  uint64_t v8;

  sub_1CA0B6950(a1, (uint64_t)v7);
  if (!v8)
  {
    sub_1CA0BD158((uint64_t)v7);
    goto LABEL_5;
  }
  type metadata accessor for KGWrapperDirectedBinaryAdjacency();
  if ((swift_dynamicCast() & 1) == 0)
  {
LABEL_5:
    v4 = 0;
    return v4 & 1;
  }
  v2 = *(_QWORD *)(v1 + OBJC_IVAR____TtC17KnowledgeGraphKit32KGWrapperDirectedBinaryAdjacency_wrappedValue);
  v3 = *(_QWORD *)&v6[OBJC_IVAR____TtC17KnowledgeGraphKit32KGWrapperDirectedBinaryAdjacency_wrappedValue];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v4 = sub_1CA0E8E5C(v2, v3);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  return v4 & 1;
}

id sub_1CA0BCDA0()
{
  void *v0;
  objc_super v2;

  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for KGWrapperDirectedBinaryAdjacency();
  return objc_msgSendSuper2(&v2, sel_dealloc);
}

uint64_t type metadata accessor for KGWrapperDirectedBinaryAdjacency()
{
  return objc_opt_self();
}

unint64_t sub_1CA0BCF04(void *a1, uint64_t a2)
{
  id v3;
  uint64_t v4;
  uint64_t v6;
  uint64_t v7[4];

  v3 = a1;
  objc_msgSend(v3, sel_mutableCopy);
  sub_1CA1F0F04();
  swift_unknownObjectRelease();
  sub_1CA0AB910(0, (unint64_t *)&qword_1ED852B18);
  swift_dynamicCast();

  __swift_instantiateConcreteTypeFromMangledName(&qword_1ED852AF0);
  v4 = swift_allocObject();
  *(_QWORD *)(v4 + 16) = v6;
  v6 = a2;
  v7[0] = v4;
  return ElementIdentifierTupleSet.subscript.setter(v7, &v6);
}

id sub_1CA0BD0C0()
{
  void *v0;
  objc_super v2;

  v2.receiver = v0;
  v2.super_class = (Class)swift_getObjectType();
  return objc_msgSendSuper2(&v2, sel_dealloc);
}

uint64_t type metadata accessor for KGWrapperMutableDirectedBinaryAdjacency()
{
  return objc_opt_self();
}

unint64_t sub_1CA0BD114()
{
  unint64_t result;

  result = qword_1EF938430;
  if (!qword_1EF938430)
  {
    result = MEMORY[0x1CAA4BB30](&protocol conformance descriptor for ElementIdentifier, &type metadata for ElementIdentifier);
    atomic_store(result, (unint64_t *)&qword_1EF938430);
  }
  return result;
}

uint64_t sub_1CA0BD158(uint64_t a1)
{
  uint64_t v2;

  v2 = __swift_instantiateConcreteTypeFromMangledName(&qword_1ED8528F8);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_1CA0BD198()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)(v0 + 16) + 16))();
}

id sub_1CA0BD1B0(void *a1)
{
  id v1;
  void *v2;
  uint64_t inited;
  unint64_t v4;
  objc_class *v5;
  char *v6;
  objc_super v8;
  void *v9;
  unint64_t v10[4];

  v1 = a1;
  objc_msgSend(v1, sel_mutableCopy);
  sub_1CA1F0F04();
  swift_unknownObjectRelease();
  sub_1CA0AB910(0, (unint64_t *)&qword_1ED852B18);
  swift_dynamicCast();
  v2 = v9;

  __swift_instantiateConcreteTypeFromMangledName(&qword_1ED852AF0);
  inited = swift_initStackObject();
  *(_QWORD *)(inited + 16) = v9;
  v9 = (void *)inited;
  sub_1CA0AC69C((uint64_t *)&v9, v10);

  v4 = v10[0];
  v5 = (objc_class *)type metadata accessor for KGWrapperDirectedBinaryAdjacency();
  v6 = (char *)objc_allocWithZone(v5);
  *(_QWORD *)&v6[OBJC_IVAR____TtC17KnowledgeGraphKit32KGWrapperDirectedBinaryAdjacency_wrappedValue] = v4;
  v8.receiver = v6;
  v8.super_class = v5;
  return objc_msgSendSuper2(&v8, sel_init);
}

uint64_t MAGraphMatrix.mcl(directed:iterations:power:inflation:tolerance:selfLoop:progressClosure:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void (*a5)(uint64_t *, double), vDSP_Stride a6, uint64_t a7, uint64_t a8, double a9, double a10)
{
  uint64_t v17;

  (*(void (**)(uint64_t, uint64_t, uint64_t))(a8 + 8))(a1, a7, a8);
  v17 = MASquareMatrixRepresentation.mcl(iterations:power:inflation:tolerance:selfLoop:progressClosure:)(a2, a3, a4, a5, a6, a9, a10);
  swift_release();
  return v17;
}

uint64_t MASquareMatrixRepresentation.mcl(iterations:power:inflation:tolerance:selfLoop:progressClosure:)(uint64_t a1, uint64_t a2, uint64_t a3, void (*a4)(uint64_t *, double), vDSP_Stride a5, double a6, double a7)
{
  _QWORD *v7;
  uint64_t v8;
  uint64_t v11;
  int64_t v12;
  vDSP_Stride v13;
  unint64_t v14;
  const double *v15;
  double *v16;
  uint64_t v17;
  uint64_t v18;
  int64_t v19;
  _QWORD *v20;
  double *v21;
  BOOL v23;
  uint64_t v24;
  uint64_t v25;
  char isUniquelyReferenced_nonNull_native;
  double *v27;
  vDSP_Length v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  vDSP_Stride v32;
  _QWORD *v33;
  KnowledgeGraphKit::MAMatrixAxes v34;
  double v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  id v41;
  void *v42;
  uint64_t v43;
  id v44;
  void *v45;
  uint64_t v46;
  char v47;
  uint64_t v48;
  uint64_t v49;
  unint64_t v50;
  id v51;
  char v52;
  unint64_t v53;
  id v54;
  char v55;
  unint64_t i;
  unint64_t v57;
  id v58;
  char v59;
  _BYTE *v60;
  uint64_t result;
  uint64_t v62;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  _QWORD *v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  char v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  _QWORD *v80;
  int v81[2];
  vDSP_Stride v82;
  _QWORD *v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  KnowledgeGraphKit::MAMatrix v88;
  KnowledgeGraphKit::MAMatrix v89;

  v8 = (uint64_t)v7;
  v87 = *MEMORY[0x1E0C80C00];
  v12 = v7[2];
  v11 = v7[3];
  v13 = v7[4];
  v78 = v12;
  v79 = v11;
  v80 = (_QWORD *)v13;
  swift_bridgeObjectRetain();
  if (a7 != 0.0)
  {
    v84 = 1;
    v85 = v11;
    v86 = sub_1CA0B4464(v11, a7);
    v88.rows = (Swift::Int)&v84;
    MAMatrix.setDiag(vector:)(v88);
    swift_bridgeObjectRelease();
    v12 = v78;
    v11 = v79;
    v13 = (vDSP_Stride)v80;
  }
  swift_bridgeObjectRetain();
  v14 = sub_1CA0B4464(v11, 0.0);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    goto LABEL_107;
  if (v11 < 0)
  {
LABEL_108:
    __break(1u);
LABEL_109:
    __break(1u);
LABEL_110:
    __break(1u);
LABEL_111:
    __break(1u);
  }
  while (1)
  {
    if (v11)
    {
      v15 = (const double *)(v13 + 32);
      v16 = (double *)(v14 + 32);
      v17 = v11;
      do
      {
        if (v12 < 0)
          goto LABEL_112;
        vDSP_sveD(v15++, v11, v16++, v12);
        --v17;
      }
      while (v17);
    }
    swift_bridgeObjectRelease();
    v84 = 1;
    v85 = v11;
    v86 = v14;
    /= infix(_:_:)((vDSP_Length *)&v78, (uint64_t)&v84);
    swift_bridgeObjectRelease();
    v67 = v8;
    if (a1 < 1 || a6 + 1.0 <= a6)
      break;
    if (a2 < 1)
      goto LABEL_110;
    v18 = 0;
    v19 = v78;
    v13 = v79;
    v20 = v80;
    v14 = 0x7FFFFFFFLL;
LABEL_13:
    v72 = v20;
    v74 = v18;
    if (a2 == 1)
    {
      v21 = (double *)swift_bridgeObjectRetain();
      goto LABEL_33;
    }
    v12 = v19 * v13;
    v23 = v19 < (uint64_t)0xFFFFFFFF80000000 || v13 < (uint64_t)0xFFFFFFFF80000000;
    v24 = swift_bridgeObjectRetain();
    if (v13 != v19)
      goto LABEL_101;
    if ((unsigned __int128)(v19 * (__int128)v13) >> 64 != (v19 * v13) >> 63)
      goto LABEL_102;
    if (v12 < 0)
      goto LABEL_113;
    v8 = 8 * v13 * v13;
    v25 = a2 - 1;
    v11 = v24;
    do
    {
      swift_bridgeObjectRetain();
      if (v12)
      {
        v21 = (double *)sub_1CA1F0B68();
        *((_QWORD *)v21 + 2) = v12;
        bzero(v21 + 4, 8 * v13 * v13);
        if (v19 > 0x7FFFFFFF)
          goto LABEL_95;
      }
      else
      {
        v21 = (double *)MEMORY[0x1E0DEE9D8];
        if (v19 > 0x7FFFFFFF)
          goto LABEL_95;
      }
      if (v23)
      {
LABEL_96:
        __break(1u);
LABEL_97:
        __break(1u);
LABEL_98:
        __break(1u);
        __break(1u);
LABEL_99:
        __break(1u);
        goto LABEL_100;
      }
      if (v13 > 0x7FFFFFFF)
        goto LABEL_97;
      cblas_dgemm_NEWLAPACK();
      swift_bridgeObjectRelease_n();
      v11 = (uint64_t)v21;
      --v25;
    }
    while (v25);
    v78 = v13;
    v79 = v13;
    v8 = v67;
LABEL_33:
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    v80 = v21;
    if ((isUniquelyReferenced_nonNull_native & 1) == 0)
    {
      v21 = (double *)sub_1CA0B6058(v21);
      v80 = v21;
    }
    v27 = v21 + 4;
    if (a3 == 2)
    {
      v28 = v19 * v13;
      if ((unsigned __int128)(v19 * (__int128)v13) >> 64 == (v19 * v13) >> 63)
      {
        if ((v28 & 0x8000000000000000) == 0)
        {
          vDSP_vsqD(v27, 1, v21 + 4, 1, v28);
          goto LABEL_43;
        }
LABEL_112:
        sub_1CA1F11BC();
        __break(1u);
LABEL_113:
        result = sub_1CA1F11BC();
        __break(1u);
        return result;
      }
LABEL_103:
      __break(1u);
LABEL_104:
      __break(1u);
      goto LABEL_105;
    }
    v29 = v19 * v13;
    if ((unsigned __int128)(v19 * (__int128)v13) >> 64 != (v19 * v13) >> 63)
      goto LABEL_104;
    if (v29 >= (uint64_t)0xFFFFFFFF80000000)
    {
      if (v29 > 0x7FFFFFFF)
        goto LABEL_106;
      v81[0] = v19 * v13;
      *(double *)&v84 = (double)a3;
      vvpows(v27, (const double *)&v84, v21 + 4, v81);
LABEL_43:
      v80 = v21;
      if (v13 < 0)
        goto LABEL_113;
      swift_bridgeObjectRetain();
      if (v13)
      {
        v30 = sub_1CA1F0B68();
        *(_QWORD *)(v30 + 16) = v13;
        bzero((void *)(v30 + 32), 8 * v13);
        v31 = 4;
        v32 = v13;
        while ((v19 & 0x8000000000000000) == 0)
        {
          vDSP_sveD(&v21[v31], v13, (double *)(v30 + v31 * 8), v19);
          ++v31;
          if (!--v32)
            goto LABEL_50;
        }
        goto LABEL_112;
      }
      v30 = MEMORY[0x1E0DEE9D8];
LABEL_50:
      swift_bridgeObjectRelease();
      v84 = 1;
      v85 = v13;
      v86 = v30;
      /= infix(_:_:)((vDSP_Length *)&v78, (uint64_t)&v84);
      swift_bridgeObjectRelease();
      v12 = v78;
      v11 = v79;
      v33 = v80;
      v84 = v78;
      v85 = v79;
      v86 = (uint64_t)v80;
      *(_QWORD *)v81 = v19;
      v82 = v13;
      v83 = v72;
      LOBYTE(v77) = 1;
      v89.rows = (Swift::Int)v81;
      v89.columns = (Swift::Int)&v77;
      v35 = MAMatrix.euclideanDistance(matrix:axe:)(v89, v34);
      swift_bridgeObjectRelease();
      LOBYTE(v84) = 0;
      v18 = v74 + 1;
      v13 = a5;
      a4(&v84, (double)(v74 + 1) / (double)a1 * 0.8);
      if (v84 == 1)
        goto LABEL_90;
      if (v18 >= a1)
        break;
      v20 = v33;
      v13 = v11;
      v19 = v12;
      if (v35 <= a6)
        break;
      goto LABEL_13;
    }
LABEL_105:
    __break(1u);
LABEL_106:
    __break(1u);
LABEL_107:
    v14 = (unint64_t)sub_1CA0B6058((_QWORD *)v14);
    if (v11 < 0)
      goto LABEL_108;
  }
  v77 = MEMORY[0x1E0DEE9E8];
  if (v12 < 0)
    goto LABEL_109;
  v62 = MEMORY[0x1E0DEE9E8];
  if (!v12)
    goto LABEL_88;
  if (v11 < 0)
    goto LABEL_111;
  v36 = 0;
  v37 = 0;
  a6 = (double)v12;
  a3 = v12;
  do
  {
    if (v37 == v12)
      goto LABEL_99;
    v65 = v37;
    *(double *)&v84 = MEMORY[0x1E0DEE9E8];
    v85 = 0;
    if (v11)
    {
      v38 = v37 * v11;
      if ((unsigned __int128)(v37 * (__int128)v11) >> 64 != (v37 * v11) >> 63)
      {
LABEL_100:
        __break(1u);
LABEL_101:
        __break(1u);
LABEL_102:
        __break(1u);
        goto LABEL_103;
      }
      v14 = 0;
      v39 = (uint64_t)v80;
      v40 = (uint64_t)(v80 + 4);
      a1 = (uint64_t)v80;
      v73 = v37 * v11;
      a2 = (uint64_t)(v80 + 4);
      v75 = v36;
      while (1)
      {
        if (v14 == v11)
        {
          __break(1u);
LABEL_93:
          __break(1u);
LABEL_94:
          __break(1u);
LABEL_95:
          __break(1u);
          goto LABEL_96;
        }
        if (v36 < 0)
          goto LABEL_93;
        if (v38 + v14 >= *(_QWORD *)(v39 + 16))
          goto LABEL_94;
        if (*(double *)(v40 + 8 * (v38 + v14)) > 0.0)
          break;
LABEL_63:
        if (++v14 == v11)
          goto LABEL_85;
      }
      v43 = *(_QWORD *)(v8 + 40);
      if ((v43 & 0xC000000000000001) != 0)
      {
        v44 = (id)MEMORY[0x1CAA4A7A4](v14);
      }
      else
      {
        if (v14 >= *(_QWORD *)((v43 & 0xFFFFFFFFFFFFF8) + 0x10))
          goto LABEL_98;
        v44 = *(id *)(v43 + 8 * v14 + 32);
      }
      v45 = v44;
      v46 = v84;
      if ((v84 & 0xC000000000000001) != 0)
      {
        v13 = (vDSP_Stride)v44;
        v47 = sub_1CA1F0FDC();

        if ((v47 & 1) != 0)
        {

          goto LABEL_62;
        }
LABEL_61:
        v41 = v45;
        v13 = (vDSP_Stride)&v84;
        sub_1CA0BDD74(v81, v41);
        v42 = *(void **)v81;

LABEL_62:
        v12 = a3;
        v40 = a2;
        v38 = v73;
        v36 = v75;
        v39 = a1;
        goto LABEL_63;
      }
      if (!*(_QWORD *)(v84 + 16))
        goto LABEL_61;
      v48 = sub_1CA1F0E5C();
      v49 = -1 << *(_BYTE *)(v46 + 32);
      v50 = v48 & ~v49;
      v68 = v46 + 56;
      if (((*(_QWORD *)(v46 + 56 + ((v50 >> 3) & 0xFFFFFFFFFFFFF8)) >> v50) & 1) == 0)
        goto LABEL_61;
      v13 = sub_1CA0B6A1C();
      v51 = *(id *)(*(_QWORD *)(v46 + 48) + 8 * v50);
      v52 = sub_1CA1F0E68();

      if ((v52 & 1) == 0)
      {
        v66 = ~v49;
        v53 = (v50 + 1) & ~v49;
        v8 = v67;
        if (((*(_QWORD *)(v68 + ((v53 >> 3) & 0xFFFFFFFFFFFFF8)) >> v53) & 1) == 0)
          goto LABEL_61;
        v54 = *(id *)(*(_QWORD *)(v46 + 48) + 8 * v53);
        v55 = sub_1CA1F0E68();

        if ((v55 & 1) == 0)
        {
          for (i = v53 + 1; ; i = v57 + 1)
          {
            v8 = v67;
            v57 = i & v66;
            if (((*(_QWORD *)(v68 + (((i & v66) >> 3) & 0xFFFFFFFFFFFFF8)) >> (i & v66)) & 1) == 0)
              break;
            v58 = *(id *)(*(_QWORD *)(v46 + 48) + 8 * v57);
            v59 = sub_1CA1F0E68();

            if ((v59 & 1) != 0)
              goto LABEL_79;
          }
          goto LABEL_61;
        }
      }
LABEL_79:

      v8 = v67;
      goto LABEL_62;
    }
LABEL_85:
    v37 = v65 + 1;
    v76 = 0;
    a4((uint64_t *)&v76, (double)(v65 + 1) / a6 * 0.2 + 0.8);
    if (v76 == 1)
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
LABEL_90:
      sub_1CA0BE35C();
      swift_allocError();
      *v60 = 0;
      swift_willThrow();
      swift_bridgeObjectRelease();
      return v62;
    }
    sub_1CA0BE168((uint64_t *)v81, v84, v85);
    v13 = v82;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v36 += v11;
  }
  while (v37 != v12);
  v62 = v77;
LABEL_88:
  swift_bridgeObjectRelease();
  return v62;
}

uint64_t sub_1CA0BDC28(void *a1, uint64_t a2)
{
  id v3;
  char v4;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  id v10;
  char v11;
  char v12;
  uint64_t v13;
  unint64_t v14;
  id v15;

  if ((a2 & 0xC000000000000001) != 0)
  {
    v3 = a1;
    v4 = sub_1CA1F0FDC();

    return v4 & 1;
  }
  if (!*(_QWORD *)(a2 + 16)
    || (v6 = sub_1CA1F0E5C(),
        v7 = -1 << *(_BYTE *)(a2 + 32),
        v8 = v6 & ~v7,
        v9 = a2 + 56,
        ((*(_QWORD *)(a2 + 56 + ((v8 >> 3) & 0xFFFFFFFFFFFFF8)) >> v8) & 1) == 0))
  {
LABEL_11:
    v12 = 0;
    return v12 & 1;
  }
  sub_1CA0B6A1C();
  v10 = *(id *)(*(_QWORD *)(a2 + 48) + 8 * v8);
  v11 = sub_1CA1F0E68();

  if ((v11 & 1) == 0)
  {
    v13 = ~v7;
    v14 = (v8 + 1) & v13;
    if (((*(_QWORD *)(v9 + ((v14 >> 3) & 0xFFFFFFFFFFFFF8)) >> v14) & 1) != 0)
    {
      do
      {
        v15 = *(id *)(*(_QWORD *)(a2 + 48) + 8 * v14);
        v12 = sub_1CA1F0E68();

        if ((v12 & 1) != 0)
          break;
        v14 = (v14 + 1) & v13;
      }
      while (((*(_QWORD *)(v9 + ((v14 >> 3) & 0xFFFFFFFFFFFFF8)) >> v14) & 1) != 0);
      return v12 & 1;
    }
    goto LABEL_11;
  }
  v12 = 1;
  return v12 & 1;
}

uint64_t sub_1CA0BDD74(_QWORD *a1, void *a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v6;
  uint64_t v7;
  id v8;
  uint64_t v9;
  uint64_t result;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  id v14;
  char v15;
  uint64_t v16;
  id v17;
  char v18;
  void *v19;
  id v20;
  uint64_t v21;
  uint64_t v22;
  id v23;
  char isUniquelyReferenced_nonNull_native;
  id v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;

  v3 = v2;
  v6 = *v2;
  if ((*v2 & 0xC000000000000001) != 0)
  {
    if (v6 < 0)
      v7 = *v2;
    else
      v7 = v6 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain();
    v8 = a2;
    v9 = sub_1CA1F0FAC();

    if (v9)
    {
      swift_bridgeObjectRelease();

      sub_1CA0B6A1C();
      swift_unknownObjectRetain();
      swift_dynamicCast();
      *a1 = v26;
      swift_unknownObjectRelease();
      return 0;
    }
    result = sub_1CA1F0FA0();
    if (__OFADD__(result, 1))
    {
      __break(1u);
      return result;
    }
    v21 = sub_1CA0BE8F8(v7, result + 1);
    v27 = v21;
    if (*(_QWORD *)(v21 + 24) <= *(_QWORD *)(v21 + 16))
    {
      v25 = v8;
      sub_1CA13DBD0();
      v22 = v27;
    }
    else
    {
      v22 = v21;
      v23 = v8;
    }
    sub_1CA0BECE8((uint64_t)v8, v22);
    *v3 = v22;
  }
  else
  {
    swift_bridgeObjectRetain();
    v11 = sub_1CA1F0E5C();
    v12 = -1 << *(_BYTE *)(v6 + 32);
    v13 = v11 & ~v12;
    if (((*(_QWORD *)(v6 + 56 + ((v13 >> 3) & 0xFFFFFFFFFFFFF8)) >> v13) & 1) != 0)
    {
      sub_1CA0B6A1C();
      v14 = *(id *)(*(_QWORD *)(v6 + 48) + 8 * v13);
      v15 = sub_1CA1F0E68();

      if ((v15 & 1) != 0)
      {
LABEL_12:

        swift_bridgeObjectRelease();
        v19 = *(void **)(*(_QWORD *)(*v2 + 48) + 8 * v13);
        *a1 = v19;
        v20 = v19;
        return 0;
      }
      v16 = ~v12;
      while (1)
      {
        v13 = (v13 + 1) & v16;
        if (((*(_QWORD *)(v6 + 56 + ((v13 >> 3) & 0xFFFFFFFFFFFFF8)) >> v13) & 1) == 0)
          break;
        v17 = *(id *)(*(_QWORD *)(v6 + 48) + 8 * v13);
        v18 = sub_1CA1F0E68();

        if ((v18 & 1) != 0)
          goto LABEL_12;
      }
    }
    swift_bridgeObjectRelease();
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    v28 = *v2;
    *v2 = 0x8000000000000000;
    v8 = a2;
    sub_1CA0CB3E4((uint64_t)v8, v13, isUniquelyReferenced_nonNull_native);
    *v2 = v28;
  }
  swift_bridgeObjectRelease();
  *a1 = v8;
  return 1;
}

uint64_t sub_1CA0BDFF0(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  char v11;
  char isUniquelyReferenced_nonNull_native;
  __int128 v13;
  uint64_t v15;
  _BYTE v16[40];

  v3 = v2;
  v6 = *v2;
  swift_bridgeObjectRetain();
  v7 = sub_1CA1F1000();
  v8 = -1 << *(_BYTE *)(v6 + 32);
  v9 = v7 & ~v8;
  if (((*(_QWORD *)(v6 + 56 + ((v9 >> 3) & 0xFFFFFFFFFFFFF8)) >> v9) & 1) != 0)
  {
    v10 = ~v8;
    while (1)
    {
      sub_1CA0AB948(*(_QWORD *)(v6 + 48) + 40 * v9, (uint64_t)v16);
      v11 = MEMORY[0x1CAA4A714](v16, a2);
      sub_1CA0AB984((uint64_t)v16);
      if ((v11 & 1) != 0)
        break;
      v9 = (v9 + 1) & v10;
      if (((*(_QWORD *)(v6 + 56 + ((v9 >> 3) & 0xFFFFFFFFFFFFF8)) >> v9) & 1) == 0)
        goto LABEL_5;
    }
    swift_bridgeObjectRelease();
    sub_1CA0AB984(a2);
    sub_1CA0AB948(*(_QWORD *)(*v3 + 48) + 40 * v9, a1);
    return 0;
  }
  else
  {
LABEL_5:
    swift_bridgeObjectRelease();
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    sub_1CA0AB948(a2, (uint64_t)v16);
    v15 = *v3;
    *v3 = 0x8000000000000000;
    sub_1CA0CB568((uint64_t)v16, v9, isUniquelyReferenced_nonNull_native);
    *v3 = v15;
    swift_bridgeObjectRelease();
    v13 = *(_OWORD *)(a2 + 16);
    *(_OWORD *)a1 = *(_OWORD *)a2;
    *(_OWORD *)(a1 + 16) = v13;
    *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
    return 1;
  }
}

uint64_t sub_1CA0BE168(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t *v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  char v11;
  char v12;
  uint64_t v13;
  uint64_t v14;
  char v15;
  char v16;
  uint64_t *v17;
  uint64_t v18;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v21;
  uint64_t v23[9];

  v6 = *v3;
  sub_1CA1F13F0();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  sub_1CA0C0D60((uint64_t)v23, a2);
  swift_bridgeObjectRelease();
  v7 = sub_1CA1F1438();
  v8 = -1 << *(_BYTE *)(v6 + 32);
  v9 = v7 & ~v8;
  if (((*(_QWORD *)(v6 + 56 + ((v9 >> 3) & 0xFFFFFFFFFFFFF8)) >> v9) & 1) != 0)
  {
    swift_bridgeObjectRetain();
    v10 = swift_bridgeObjectRetain();
    sub_1CA0BF4E0(v10, a2);
    v12 = v11;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if ((v12 & 1) != 0)
    {
LABEL_6:
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      v17 = (uint64_t *)(*(_QWORD *)(*v3 + 48) + 16 * v9);
      v18 = v17[1];
      *a1 = *v17;
      a1[1] = v18;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      return 0;
    }
    v13 = ~v8;
    while (1)
    {
      v9 = (v9 + 1) & v13;
      if (((*(_QWORD *)(v6 + 56 + ((v9 >> 3) & 0xFFFFFFFFFFFFF8)) >> v9) & 1) == 0)
        break;
      swift_bridgeObjectRetain();
      v14 = swift_bridgeObjectRetain();
      sub_1CA0BF4E0(v14, a2);
      v16 = v15;
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      if ((v16 & 1) != 0)
        goto LABEL_6;
    }
  }
  swift_bridgeObjectRelease();
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  v23[0] = *v3;
  *v3 = 0x8000000000000000;
  swift_bridgeObjectRetain();
  v21 = swift_bridgeObjectRetain();
  sub_1CA0CB6D0(v21, a3, v9, isUniquelyReferenced_nonNull_native);
  *v3 = v23[0];
  swift_bridgeObjectRelease();
  *a1 = a2;
  a1[1] = a3;
  return 1;
}

unint64_t sub_1CA0BE35C()
{
  unint64_t result;

  result = qword_1EF93A350;
  if (!qword_1EF93A350)
  {
    result = MEMORY[0x1CAA4BB30](&protocol conformance descriptor for MAError, &type metadata for MAError);
    atomic_store(result, (unint64_t *)&qword_1EF93A350);
  }
  return result;
}

uint64_t sub_1CA0BE3A0(uint64_t *a1, uint64_t a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t result;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v14;

  v3 = v2;
  v6 = *v2;
  v7 = sub_1CA1F13E4();
  v8 = -1 << *(_BYTE *)(v6 + 32);
  v9 = v7 & ~v8;
  if (((*(_QWORD *)(v6 + 56 + ((v9 >> 3) & 0xFFFFFFFFFFFFF8)) >> v9) & 1) == 0)
  {
LABEL_7:
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    v14 = *v3;
    *v3 = 0x8000000000000000;
    sub_1CA0CB8A0(a2, v9, isUniquelyReferenced_nonNull_native);
    *v3 = v14;
    swift_bridgeObjectRelease();
    result = 1;
    goto LABEL_8;
  }
  v10 = *(_QWORD *)(v6 + 48);
  if (*(_QWORD *)(v10 + 8 * v9) != a2)
  {
    v11 = ~v8;
    do
    {
      v9 = (v9 + 1) & v11;
      if (((*(_QWORD *)(v6 + 56 + ((v9 >> 3) & 0xFFFFFFFFFFFFF8)) >> v9) & 1) == 0)
        goto LABEL_7;
    }
    while (*(_QWORD *)(v10 + 8 * v9) != a2);
  }
  result = 0;
LABEL_8:
  *a1 = a2;
  return result;
}

uint64_t sub_1CA0BE498(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t *v3;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  BOOL v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v17;
  _QWORD *v18;
  BOOL v19;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v21;

  v7 = *v3;
  sub_1CA1F13F0();
  swift_bridgeObjectRetain();
  sub_1CA1F0A30();
  v8 = sub_1CA1F1438();
  v9 = -1 << *(_BYTE *)(v7 + 32);
  v10 = v8 & ~v9;
  if (((*(_QWORD *)(v7 + 56 + ((v10 >> 3) & 0xFFFFFFFFFFFFF8)) >> v10) & 1) != 0)
  {
    v11 = *(_QWORD *)(v7 + 48);
    v12 = (_QWORD *)(v11 + 16 * v10);
    v13 = *v12 == a2 && v12[1] == a3;
    if (v13 || (sub_1CA1F12E8() & 1) != 0)
    {
LABEL_7:
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      v14 = (uint64_t *)(*(_QWORD *)(*v3 + 48) + 16 * v10);
      v15 = v14[1];
      *a1 = *v14;
      a1[1] = v15;
      swift_bridgeObjectRetain();
      return 0;
    }
    v17 = ~v9;
    while (1)
    {
      v10 = (v10 + 1) & v17;
      if (((*(_QWORD *)(v7 + 56 + ((v10 >> 3) & 0xFFFFFFFFFFFFF8)) >> v10) & 1) == 0)
        break;
      v18 = (_QWORD *)(v11 + 16 * v10);
      v19 = *v18 == a2 && v18[1] == a3;
      if (v19 || (sub_1CA1F12E8() & 1) != 0)
        goto LABEL_7;
    }
  }
  swift_bridgeObjectRelease();
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  v21 = *v3;
  *v3 = 0x8000000000000000;
  swift_bridgeObjectRetain();
  sub_1CA0CB9C0(a2, a3, v10, isUniquelyReferenced_nonNull_native);
  *v3 = v21;
  swift_bridgeObjectRelease();
  *a1 = a2;
  a1[1] = a3;
  return 1;
}

uint64_t sub_1CA0BE644(uint64_t *a1, uint64_t a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t result;
  void (*v10)(_QWORD *);
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t (*v14)(uint64_t);
  uint64_t v15;
  uint64_t (*v16)(uint64_t);
  uint64_t v17;
  uint64_t v18;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v20;
  _QWORD v21[10];

  v3 = v2;
  v6 = *v2;
  if ((*v2 & 0xC000000000000001) != 0)
  {
    if (v6 < 0)
      v7 = *v2;
    else
      v7 = v6 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain();
    swift_retain();
    v8 = sub_1CA1F0FAC();
    swift_release();
    if (v8)
    {
      swift_bridgeObjectRelease();
      swift_release();
      v21[9] = v8;
      type metadata accessor for MASlice();
      swift_unknownObjectRetain();
      swift_dynamicCast();
      *a1 = v21[0];
      swift_unknownObjectRelease();
      return 0;
    }
    result = sub_1CA1F0FA0();
    if (__OFADD__(result, 1))
    {
      __break(1u);
      return result;
    }
    v17 = sub_1CA0BEADC(v7, result + 1);
    v21[0] = v17;
    if (*(_QWORD *)(v17 + 24) <= *(_QWORD *)(v17 + 16))
    {
      swift_retain();
      sub_1CA13E8F0();
      v18 = v21[0];
    }
    else
    {
      v18 = v17;
      swift_retain();
    }
    sub_1CA0BED68(a2, v18);
    *v3 = v18;
  }
  else
  {
    sub_1CA1F13F0();
    v10 = *(void (**)(_QWORD *))(*(_QWORD *)a2 + 272);
    swift_bridgeObjectRetain();
    v10(v21);
    v11 = sub_1CA1F1438();
    v12 = -1 << *(_BYTE *)(v6 + 32);
    v13 = v11 & ~v12;
    if (((*(_QWORD *)(v6 + 56 + ((v13 >> 3) & 0xFFFFFFFFFFFFF8)) >> v13) & 1) != 0)
    {
      v14 = *(uint64_t (**)(uint64_t))(**(_QWORD **)(*(_QWORD *)(v6 + 48) + 8 * v13) + 280);
      swift_retain();
      LOBYTE(v14) = v14(a2);
      swift_release();
      if ((v14 & 1) != 0)
      {
LABEL_12:
        swift_release();
        swift_bridgeObjectRelease();
        *a1 = *(_QWORD *)(*(_QWORD *)(*v2 + 48) + 8 * v13);
        swift_retain();
        return 0;
      }
      v15 = ~v12;
      while (1)
      {
        v13 = (v13 + 1) & v15;
        if (((*(_QWORD *)(v6 + 56 + ((v13 >> 3) & 0xFFFFFFFFFFFFF8)) >> v13) & 1) == 0)
          break;
        v16 = *(uint64_t (**)(uint64_t))(**(_QWORD **)(*(_QWORD *)(v6 + 48) + 8 * v13) + 280);
        swift_retain();
        LOBYTE(v16) = v16(a2);
        swift_release();
        if ((v16 & 1) != 0)
          goto LABEL_12;
      }
    }
    swift_bridgeObjectRelease();
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    v21[0] = *v2;
    *v2 = 0x8000000000000000;
    v20 = swift_retain();
    sub_1CA0CBB58(v20, v13, isUniquelyReferenced_nonNull_native);
    *v2 = v21[0];
  }
  swift_bridgeObjectRelease();
  *a1 = a2;
  return 1;
}

uint64_t sub_1CA0BE8F8(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t result;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  char v9;
  unint64_t v10;
  BOOL v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  if (a2)
  {
    __swift_instantiateConcreteTypeFromMangledName(&qword_1EF937670);
    v2 = sub_1CA1F103C();
    v14 = v2;
    sub_1CA1F0F64();
    if (sub_1CA1F0FD0())
    {
      sub_1CA0B6A1C();
      do
      {
        swift_dynamicCast();
        v2 = v14;
        if (*(_QWORD *)(v14 + 24) <= *(_QWORD *)(v14 + 16))
        {
          sub_1CA13DBD0();
          v2 = v14;
        }
        result = sub_1CA1F0E5C();
        v4 = v2 + 56;
        v5 = -1 << *(_BYTE *)(v2 + 32);
        v6 = result & ~v5;
        v7 = v6 >> 6;
        if (((-1 << v6) & ~*(_QWORD *)(v2 + 56 + 8 * (v6 >> 6))) != 0)
        {
          v8 = __clz(__rbit64((-1 << v6) & ~*(_QWORD *)(v2 + 56 + 8 * (v6 >> 6)))) | v6 & 0x7FFFFFFFFFFFFFC0;
        }
        else
        {
          v9 = 0;
          v10 = (unint64_t)(63 - v5) >> 6;
          do
          {
            if (++v7 == v10 && (v9 & 1) != 0)
            {
              __break(1u);
              return result;
            }
            v11 = v7 == v10;
            if (v7 == v10)
              v7 = 0;
            v9 |= v11;
            v12 = *(_QWORD *)(v4 + 8 * v7);
          }
          while (v12 == -1);
          v8 = __clz(__rbit64(~v12)) + (v7 << 6);
        }
        *(_QWORD *)(v4 + ((v8 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v8;
        *(_QWORD *)(*(_QWORD *)(v2 + 48) + 8 * v8) = v13;
        ++*(_QWORD *)(v2 + 16);
      }
      while (sub_1CA1F0FD0());
    }
    swift_release();
  }
  else
  {
    swift_unknownObjectRelease();
    return MEMORY[0x1E0DEE9E8];
  }
  return v2;
}

uint64_t sub_1CA0BEADC(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t result;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  char v12;
  unint64_t v13;
  BOOL v14;
  uint64_t v15;
  _QWORD v16[10];
  uint64_t v17;

  if (a2)
  {
    __swift_instantiateConcreteTypeFromMangledName(&qword_1EF937668);
    v2 = sub_1CA1F103C();
    v17 = v2;
    sub_1CA1F0F64();
    v3 = sub_1CA1F0FD0();
    if (v3)
    {
      v4 = v3;
      type metadata accessor for MASlice();
      do
      {
        v16[0] = v4;
        swift_dynamicCast();
        v2 = v17;
        if (*(_QWORD *)(v17 + 24) <= *(_QWORD *)(v17 + 16))
        {
          sub_1CA13E8F0();
          v2 = v17;
        }
        v5 = v16[9];
        sub_1CA1F13F0();
        (*(void (**)(_QWORD *))(*(_QWORD *)v5 + 272))(v16);
        result = sub_1CA1F1438();
        v7 = v2 + 56;
        v8 = -1 << *(_BYTE *)(v2 + 32);
        v9 = result & ~v8;
        v10 = v9 >> 6;
        if (((-1 << v9) & ~*(_QWORD *)(v2 + 56 + 8 * (v9 >> 6))) != 0)
        {
          v11 = __clz(__rbit64((-1 << v9) & ~*(_QWORD *)(v2 + 56 + 8 * (v9 >> 6)))) | v9 & 0x7FFFFFFFFFFFFFC0;
        }
        else
        {
          v12 = 0;
          v13 = (unint64_t)(63 - v8) >> 6;
          do
          {
            if (++v10 == v13 && (v12 & 1) != 0)
            {
              __break(1u);
              return result;
            }
            v14 = v10 == v13;
            if (v10 == v13)
              v10 = 0;
            v12 |= v14;
            v15 = *(_QWORD *)(v7 + 8 * v10);
          }
          while (v15 == -1);
          v11 = __clz(__rbit64(~v15)) + (v10 << 6);
        }
        *(_QWORD *)(v7 + ((v11 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v11;
        *(_QWORD *)(*(_QWORD *)(v2 + 48) + 8 * v11) = v5;
        ++*(_QWORD *)(v2 + 16);
        v4 = sub_1CA1F0FD0();
      }
      while (v4);
    }
    swift_release();
  }
  else
  {
    swift_unknownObjectRelease();
    return MEMORY[0x1E0DEE9E8];
  }
  return v2;
}

unint64_t sub_1CA0BECE8(uint64_t a1, uint64_t a2)
{
  unint64_t result;

  sub_1CA1F0E5C();
  result = sub_1CA1F0F4C();
  *(_QWORD *)(a2 + 56 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << result;
  *(_QWORD *)(*(_QWORD *)(a2 + 48) + 8 * result) = a1;
  ++*(_QWORD *)(a2 + 16);
  return result;
}

unint64_t sub_1CA0BED68(uint64_t a1, uint64_t a2)
{
  unint64_t result;
  _BYTE v5[72];

  sub_1CA1F13F0();
  (*(void (**)(_BYTE *))(*(_QWORD *)a1 + 272))(v5);
  sub_1CA1F1438();
  result = sub_1CA1F0F4C();
  *(_QWORD *)(a2 + 56 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << result;
  *(_QWORD *)(*(_QWORD *)(a2 + 48) + 8 * result) = a1;
  ++*(_QWORD *)(a2 + 16);
  return result;
}

BOOL static ElementIdentifier.== infix(_:_:)(_QWORD *a1, _QWORD *a2)
{
  return *a1 == *a2;
}

uint64_t ElementIdentifier.hash(into:)()
{
  return sub_1CA1F13FC();
}

uint64_t ElementIdentifier.hashValue.getter()
{
  sub_1CA1F13F0();
  sub_1CA1F13FC();
  return sub_1CA1F1438();
}

BOOL sub_1CA0BEE90(_QWORD *a1, _QWORD *a2)
{
  return *a1 == *a2;
}

uint64_t sub_1CA0BEEA4()
{
  sub_1CA1F13F0();
  sub_1CA1F13FC();
  return sub_1CA1F1438();
}

uint64_t sub_1CA0BEEE8()
{
  return sub_1CA1F13FC();
}

uint64_t sub_1CA0BEF10()
{
  sub_1CA1F13F0();
  sub_1CA1F13FC();
  return sub_1CA1F1438();
}

unint64_t sub_1CA0BEF54()
{
  unint64_t result;

  result = qword_1ED852B20;
  if (!qword_1ED852B20)
  {
    result = MEMORY[0x1CAA4BB30](&protocol conformance descriptor for ElementIdentifier, &type metadata for ElementIdentifier);
    atomic_store(result, (unint64_t *)&qword_1ED852B20);
  }
  return result;
}

ValueMetadata *type metadata accessor for ElementIdentifier()
{
  return &type metadata for ElementIdentifier;
}

void MACluster.init()(_QWORD *a1@<X8>)
{
  *a1 = MEMORY[0x1E0DEE9E8];
  a1[1] = 0;
}

Swift::Void __swiftcall MACluster.add(node:)(MANode node)
{
  uint64_t *v1;
  Class isa;
  id v3;

  isa = node.super.isa;
  if ((sub_1CA0BDC28(node.super.isa, *v1) & 1) == 0)
  {
    sub_1CA0BDD74(&v3, isa);

  }
}

uint64_t MACluster.nodes.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t MACluster.descriptionNodes.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t MACluster.descriptionNodes.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t result;

  result = swift_bridgeObjectRelease();
  *(_QWORD *)(v1 + 8) = a1;
  return result;
}

uint64_t (*MACluster.descriptionNodes.modify())()
{
  return nullsub_1;
}

uint64_t MACluster.init(nodes:descriptionNodes:)@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  *a3 = result;
  a3[1] = a2;
  return result;
}

void MACluster.subset(slices:)(unint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  id v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  int64_t v16;
  unint64_t v17;
  uint64_t v18;
  id v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v28;
  int64_t v29;
  uint64_t v30;
  id v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;

  v4 = *v2;
  v32 = MEMORY[0x1E0DEE9E8];
  if ((v4 & 0xC000000000000001) != 0)
  {
    swift_bridgeObjectRetain();
    sub_1CA1F0F64();
    sub_1CA0B6A1C();
    sub_1CA0C0614();
    sub_1CA1F0CC4();
    v4 = v33;
    v30 = v34;
    v5 = v35;
    v6 = v36;
    v7 = v37;
  }
  else
  {
    v8 = -1 << *(_BYTE *)(v4 + 32);
    v30 = v4 + 56;
    v5 = ~v8;
    v9 = -v8;
    if (v9 < 64)
      v10 = ~(-1 << v9);
    else
      v10 = -1;
    v7 = v10 & *(_QWORD *)(v4 + 56);
    swift_bridgeObjectRetain();
    v6 = 0;
  }
  v29 = (unint64_t)(v5 + 64) >> 6;
  v26 = v5;
  v11 = a1 & 0xC000000000000001;
  v28 = v4;
  if ((v4 & 0x8000000000000000) == 0)
    goto LABEL_12;
LABEL_30:
  if (!sub_1CA1F0FD0())
    goto LABEL_54;
  sub_1CA0B6A1C();
  swift_unknownObjectRetain();
  swift_dynamicCast();
  v19 = v31;
  swift_unknownObjectRelease();
  v15 = v6;
  v13 = v7;
  if (!v19)
    goto LABEL_54;
  while (1)
  {
    if (a1 >> 62)
    {
      swift_bridgeObjectRetain();
      v20 = sub_1CA1F1234();
      if (!v20)
      {
LABEL_51:

        swift_bridgeObjectRelease();
LABEL_11:
        v6 = v15;
        v7 = v13;
        if (v4 < 0)
          goto LABEL_30;
        goto LABEL_12;
      }
    }
    else
    {
      v20 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
      swift_bridgeObjectRetain();
      if (!v20)
        goto LABEL_51;
    }
    if (v11)
    {
      v21 = MEMORY[0x1CAA4A7A4](0, a1);
    }
    else
    {
      if (!*(_QWORD *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10))
        goto LABEL_57;
      v21 = *(_QWORD *)(a1 + 32);
      swift_retain();
    }
    if (((*(uint64_t (**)(id))(*(_QWORD *)v21 + 248))(v19) & 1) != 0)
    {
LABEL_10:
      swift_bridgeObjectRelease();
      v12 = v19;
      sub_1CA0BDD74(&v31, v12);

      swift_release();
      goto LABEL_11;
    }
    swift_release();
    if (v20 != 1)
      break;
LABEL_48:

    swift_bridgeObjectRelease();
    v6 = v15;
    v7 = v13;
    v4 = v28;
    if (v28 < 0)
      goto LABEL_30;
LABEL_12:
    if (v7)
    {
      v13 = (v7 - 1) & v7;
      v14 = __clz(__rbit64(v7)) | (v6 << 6);
      v15 = v6;
    }
    else
    {
      v16 = v6 + 1;
      if (__OFADD__(v6, 1))
        goto LABEL_58;
      if (v16 >= v29)
        goto LABEL_53;
      v17 = *(_QWORD *)(v30 + 8 * v16);
      v15 = v6 + 1;
      if (!v17)
      {
        v15 = v6 + 2;
        if (v6 + 2 >= v29)
          goto LABEL_53;
        v17 = *(_QWORD *)(v30 + 8 * v15);
        if (!v17)
        {
          v15 = v6 + 3;
          if (v6 + 3 >= v29)
            goto LABEL_53;
          v17 = *(_QWORD *)(v30 + 8 * v15);
          if (!v17)
          {
            v15 = v6 + 4;
            if (v6 + 4 >= v29)
              goto LABEL_53;
            v17 = *(_QWORD *)(v30 + 8 * v15);
            if (!v17)
            {
              v18 = v6 + 5;
              while (v29 != v18)
              {
                v17 = *(_QWORD *)(v30 + 8 * v18++);
                if (v17)
                {
                  v15 = v18 - 1;
                  goto LABEL_27;
                }
              }
LABEL_53:
              v7 = 0;
LABEL_54:
              sub_1CA0B6B24(v4, v30, v26, v6, v7);
              *a2 = v32;
              a2[1] = 0;
              return;
            }
          }
        }
      }
LABEL_27:
      v13 = (v17 - 1) & v17;
      v14 = __clz(__rbit64(v17)) + (v15 << 6);
    }
    v19 = *(id *)(*(_QWORD *)(v4 + 48) + 8 * v14);
    if (!v19)
      goto LABEL_54;
  }
  v22 = 5;
  while (1)
  {
    v23 = v22 - 4;
    if (!v11)
      break;
    v24 = MEMORY[0x1CAA4A7A4](v22 - 4, a1);
    v25 = v22 - 3;
    if (__OFADD__(v23, 1))
      goto LABEL_55;
LABEL_46:
    if (((*(uint64_t (**)(id))(*(_QWORD *)v24 + 248))(v19) & 1) != 0)
    {
      v4 = v28;
      goto LABEL_10;
    }
    swift_release();
    ++v22;
    if (v25 == v20)
      goto LABEL_48;
  }
  if (v23 >= *(_QWORD *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10))
    goto LABEL_56;
  v24 = *(_QWORD *)(a1 + 8 * v22);
  swift_retain();
  v25 = v22 - 3;
  if (!__OFADD__(v23, 1))
    goto LABEL_46;
LABEL_55:
  __break(1u);
LABEL_56:
  __break(1u);
LABEL_57:
  __break(1u);
LABEL_58:
  __break(1u);
}

uint64_t MACluster.count.getter()
{
  uint64_t v0;

  if ((*(_QWORD *)v0 & 0xC000000000000001) != 0)
    return sub_1CA1F0FA0();
  else
    return *(_QWORD *)(*(_QWORD *)v0 + 16);
}

uint64_t MACluster.hash(into:)(uint64_t a1)
{
  uint64_t *v1;
  uint64_t v3;

  v3 = *v1;
  swift_bridgeObjectRetain();
  sub_1CA0C0D60(a1, v3);
  return swift_bridgeObjectRelease();
}

void static MACluster.== infix(_:_:)(uint64_t *a1, uint64_t *a2)
{
  sub_1CA0BF4E0(*a1, *a2);
}

void sub_1CA0BF4E0(uint64_t a1, uint64_t a2)
{
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  int64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  int64_t v15;
  unint64_t v16;
  int64_t v17;
  id v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  id v22;
  char v23;
  uint64_t v24;
  id v25;
  char v26;
  uint64_t v27;
  int64_t v28;
  int64_t v29;

  v4 = a2 & 0xC000000000000001;
  if ((a1 & 0xC000000000000001) != 0)
  {
    if (a1 < 0)
      v5 = a1;
    else
      v5 = a1 & 0xFFFFFFFFFFFFFF8;
    if (v4)
    {
      sub_1CA1F0FC4();
      return;
    }
    v6 = v5;
    v7 = a2;
    goto LABEL_13;
  }
  if (v4)
  {
    if (a2 < 0)
      v6 = a2;
    else
      v6 = a2 & 0xFFFFFFFFFFFFFF8;
    v7 = a1;
LABEL_13:
    sub_1CA0C0C10(v6, v7);
    return;
  }
  if (a1 == a2 || *(_QWORD *)(a1 + 16) != *(_QWORD *)(a2 + 16))
    return;
  v27 = a1 + 56;
  v8 = 1 << *(_BYTE *)(a1 + 32);
  if (v8 < 64)
    v9 = ~(-1 << v8);
  else
    v9 = -1;
  v10 = v9 & *(_QWORD *)(a1 + 56);
  sub_1CA0B6A1C();
  v11 = 0;
  v28 = (unint64_t)(v8 + 63) >> 6;
  v12 = a2 + 56;
  while (1)
  {
    if (v10)
    {
      v13 = __clz(__rbit64(v10));
      v10 &= v10 - 1;
      v14 = v13 | (v11 << 6);
      goto LABEL_37;
    }
    v15 = v11 + 1;
    if (__OFADD__(v11, 1))
    {
      __break(1u);
      goto LABEL_47;
    }
    if (v15 >= v28)
      return;
    v16 = *(_QWORD *)(v27 + 8 * v15);
    ++v11;
    if (!v16)
    {
      v11 = v15 + 1;
      if (v15 + 1 >= v28)
        return;
      v16 = *(_QWORD *)(v27 + 8 * v11);
      if (!v16)
      {
        v11 = v15 + 2;
        if (v15 + 2 >= v28)
          return;
        v16 = *(_QWORD *)(v27 + 8 * v11);
        if (!v16)
          break;
      }
    }
LABEL_36:
    v10 = (v16 - 1) & v16;
    v14 = __clz(__rbit64(v16)) + (v11 << 6);
LABEL_37:
    v18 = *(id *)(*(_QWORD *)(a1 + 48) + 8 * v14);
    v19 = sub_1CA1F0E5C();
    v20 = -1 << *(_BYTE *)(a2 + 32);
    v21 = v19 & ~v20;
    if (((*(_QWORD *)(v12 + ((v21 >> 3) & 0xFFFFFFFFFFFFF8)) >> v21) & 1) == 0)
      goto LABEL_44;
    v29 = v11;
    v22 = *(id *)(*(_QWORD *)(a2 + 48) + 8 * v21);
    v23 = sub_1CA1F0E68();

    if ((v23 & 1) == 0)
    {
      v24 = ~v20;
      while (1)
      {
        v21 = (v21 + 1) & v24;
        if (((*(_QWORD *)(v12 + ((v21 >> 3) & 0xFFFFFFFFFFFFF8)) >> v21) & 1) == 0)
          break;
        v25 = *(id *)(*(_QWORD *)(a2 + 48) + 8 * v21);
        v26 = sub_1CA1F0E68();

        if ((v26 & 1) != 0)
          goto LABEL_20;
      }
LABEL_44:

      return;
    }
LABEL_20:

    v11 = v29;
  }
  v17 = v15 + 3;
  if (v17 >= v28)
    return;
  v16 = *(_QWORD *)(v27 + 8 * v17);
  if (v16)
  {
    v11 = v17;
    goto LABEL_36;
  }
  while (1)
  {
    v11 = v17 + 1;
    if (__OFADD__(v17, 1))
      break;
    if (v11 >= v28)
      return;
    v16 = *(_QWORD *)(v27 + 8 * v11);
    ++v17;
    if (v16)
      goto LABEL_36;
  }
LABEL_47:
  __break(1u);
}

uint64_t MACluster.makeIterator()@<X0>(uint64_t a1@<X8>)
{
  uint64_t *v1;
  uint64_t v3;
  uint64_t result;
  uint64_t v5;
  __int128 v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  __int128 v14;
  uint64_t v15;

  v3 = *v1;
  if ((*v1 & 0xC000000000000001) != 0)
  {
    swift_bridgeObjectRetain();
    sub_1CA1F0F64();
    sub_1CA0B6A1C();
    sub_1CA0C0614();
    sub_1CA1F0CC4();
    result = v12;
    v5 = v13;
    v6 = v14;
    v7 = v15;
  }
  else
  {
    v8 = -1 << *(_BYTE *)(v3 + 32);
    v5 = v3 + 56;
    v9 = ~v8;
    v10 = -v8;
    if (v10 < 64)
      v11 = ~(-1 << v10);
    else
      v11 = -1;
    v7 = v11 & *(_QWORD *)(v3 + 56);
    result = swift_bridgeObjectRetain();
    v6 = (unint64_t)v9;
  }
  *(_QWORD *)a1 = result;
  *(_QWORD *)(a1 + 8) = v5;
  *(_OWORD *)(a1 + 16) = v6;
  *(_QWORD *)(a1 + 32) = v7;
  return result;
}

BOOL MACluster.singleton.getter()
{
  uint64_t v0;
  uint64_t v1;

  if ((*(_QWORD *)v0 & 0xC000000000000001) != 0)
  {
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v1 = sub_1CA1F0FA0();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  else
  {
    v1 = *(_QWORD *)(*(_QWORD *)v0 + 16);
  }
  return v1 == 1;
}

Swift::Bool __swiftcall MACluster.covers(slices:)(Swift::OpaquePointer slices)
{
  uint64_t *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t i;
  uint64_t j;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  BOOL v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  id v25;
  int64_t v26;
  unint64_t v27;
  uint64_t v28;
  char v29;
  unint64_t v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  uint64_t v35;
  int64_t v36;
  uint64_t v37;
  void *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  unint64_t v43;

  v3 = *v1;
  v39 = MEMORY[0x1E0DEE9D8];
  if ((unint64_t)slices._rawValue >> 62)
  {
    swift_bridgeObjectRetain();
    v5 = sub_1CA1F1234();
    v4 = v5;
    if (!v5)
      goto LABEL_15;
  }
  else
  {
    v4 = *(_QWORD *)(((unint64_t)slices._rawValue & 0xFFFFFFFFFFFFF8) + 0x10);
    LOBYTE(v5) = swift_bridgeObjectRetain();
    if (!v4)
      goto LABEL_15;
  }
  if (v4 < 1)
  {
LABEL_65:
    __break(1u);
    goto LABEL_66;
  }
  if (((unint64_t)slices._rawValue & 0xC000000000000001) != 0)
  {
    for (i = 0; i != v4; ++i)
    {
      MEMORY[0x1CAA4A7A4](i, slices._rawValue);
      type metadata accessor for MASlices();
      if (swift_dynamicCastClass())
      {
        sub_1CA1F10CC();
        sub_1CA1F10FC();
        sub_1CA1F1108();
        sub_1CA1F10D8();
      }
      else
      {
        swift_unknownObjectRelease();
      }
    }
  }
  else
  {
    type metadata accessor for MASlices();
    for (j = 0; j != v4; ++j)
    {
      if (swift_dynamicCastClass())
      {
        swift_retain();
        sub_1CA1F10CC();
        sub_1CA1F10FC();
        sub_1CA1F1108();
        sub_1CA1F10D8();
      }
    }
  }
LABEL_15:
  swift_bridgeObjectRelease();
  if (v39 < 0 || (v39 & 0x4000000000000000) != 0)
  {
LABEL_62:
    swift_bridgeObjectRetain();
    v8 = sub_1CA1F1234();
    swift_release();
  }
  else
  {
    v8 = *(_QWORD *)(v39 + 16);
  }
  LOBYTE(v5) = swift_release();
  if (v8)
  {
    __break(1u);
LABEL_64:
    __break(1u);
    goto LABEL_65;
  }
  if (v4)
  {
    v9 = v3 & 0xC000000000000001;
    v10 = (unint64_t)slices._rawValue & 0xC000000000000001;
    v33 = v3 + 56;
    LOBYTE(v5) = swift_bridgeObjectRetain();
    v11 = 0;
    v31 = v3 & 0xC000000000000001;
    v32 = v3;
    while (2)
    {
      if (v10)
      {
        v5 = MEMORY[0x1CAA4A7A4](v11, slices._rawValue);
        v12 = v5;
        v13 = __OFADD__(v11, 1);
        v14 = v11 + 1;
        if (!v13)
        {
LABEL_27:
          v34 = v14;
          if (v9)
          {
            swift_bridgeObjectRetain();
            sub_1CA1F0F64();
            sub_1CA0B6A1C();
            sub_1CA0C0614();
            sub_1CA1F0CC4();
            v3 = v39;
            v37 = v40;
            v15 = v41;
            v16 = v42;
            v17 = v43;
          }
          else
          {
            v18 = -1 << *(_BYTE *)(v3 + 32);
            v15 = ~v18;
            v19 = -v18;
            if (v19 < 64)
              v20 = ~(-1 << v19);
            else
              v20 = -1;
            v17 = v20 & *(_QWORD *)(v3 + 56);
            swift_bridgeObjectRetain();
            v16 = 0;
            v37 = v33;
          }
          v35 = v15;
          v36 = (unint64_t)(v15 + 64) >> 6;
          do
          {
            v21 = v17;
            v22 = v16;
            if (v3 < 0)
            {
              if (!sub_1CA1F0FD0())
                goto LABEL_60;
              sub_1CA0B6A1C();
              swift_unknownObjectRetain();
              swift_dynamicCast();
              v25 = v38;
              swift_unknownObjectRelease();
              if (!v38)
                goto LABEL_60;
            }
            else
            {
              if (v17)
              {
                v23 = __clz(__rbit64(v17));
                v17 &= v17 - 1;
                v24 = v23 | (v16 << 6);
              }
              else
              {
                v26 = v16 + 1;
                if (__OFADD__(v16, 1))
                {
                  __break(1u);
                  goto LABEL_62;
                }
                if (v26 >= v36)
                  goto LABEL_59;
                v27 = *(_QWORD *)(v37 + 8 * v26);
                ++v16;
                if (!v27)
                {
                  v16 = v22 + 2;
                  if (v22 + 2 >= v36)
                    goto LABEL_59;
                  v27 = *(_QWORD *)(v37 + 8 * v16);
                  if (!v27)
                  {
                    v16 = v22 + 3;
                    if (v22 + 3 >= v36)
                      goto LABEL_59;
                    v27 = *(_QWORD *)(v37 + 8 * v16);
                    if (!v27)
                    {
                      v16 = v22 + 4;
                      if (v22 + 4 >= v36)
                        goto LABEL_59;
                      v27 = *(_QWORD *)(v37 + 8 * v16);
                      if (!v27)
                      {
                        v28 = v22 + 5;
                        while (v36 != v28)
                        {
                          v27 = *(_QWORD *)(v37 + 8 * v28++);
                          if (v27)
                          {
                            v16 = v28 - 1;
                            goto LABEL_53;
                          }
                        }
LABEL_59:
                        v21 = 0;
LABEL_60:
                        sub_1CA0B6B24(v3, v37, v35, v22, v21);
                        swift_bridgeObjectRelease();
                        swift_release();
                        LOBYTE(v5) = 0;
                        return v5;
                      }
                    }
                  }
                }
LABEL_53:
                v17 = (v27 - 1) & v27;
                v24 = __clz(__rbit64(v27)) + (v16 << 6);
              }
              v25 = *(id *)(*(_QWORD *)(v3 + 48) + 8 * v24);
              if (!v25)
                goto LABEL_60;
            }
            v29 = (*(uint64_t (**)(id))(*(_QWORD *)v12 + 248))(v25);

          }
          while ((v29 & 1) == 0);
          sub_1CA0B6B24(v3, v37, v35, v22, v21);
          LOBYTE(v5) = swift_release();
          v11 = v34;
          v9 = v31;
          v3 = v32;
          v10 = (unint64_t)slices._rawValue & 0xC000000000000001;
          if (v34 != v4)
            continue;
          swift_bridgeObjectRelease();
          break;
        }
      }
      else
      {
        if (v11 >= *(_QWORD *)(((unint64_t)slices._rawValue & 0xFFFFFFFFFFFFFF8) + 0x10))
        {
LABEL_66:
          __break(1u);
          return v5;
        }
        v12 = *((_QWORD *)slices._rawValue + v11 + 4);
        LOBYTE(v5) = swift_retain();
        v13 = __OFADD__(v11, 1);
        v14 = v11 + 1;
        if (!v13)
          goto LABEL_27;
      }
      goto LABEL_64;
    }
  }
  LOBYTE(v5) = 1;
  return v5;
}

uint64_t MACluster.hashValue.getter()
{
  uint64_t *v0;
  uint64_t v1;
  _BYTE v3[72];

  v1 = *v0;
  sub_1CA1F13F0();
  swift_bridgeObjectRetain();
  sub_1CA0C0D60((uint64_t)v3, v1);
  swift_bridgeObjectRelease();
  return sub_1CA1F1438();
}

uint64_t sub_1CA0BFE6C()
{
  uint64_t *v0;
  uint64_t v1;
  _BYTE v3[72];

  v1 = *v0;
  sub_1CA1F13F0();
  swift_bridgeObjectRetain();
  sub_1CA0C0D60((uint64_t)v3, v1);
  swift_bridgeObjectRelease();
  return sub_1CA1F1438();
}

uint64_t sub_1CA0BFEC0(uint64_t a1)
{
  uint64_t *v1;
  uint64_t v3;

  v3 = *v1;
  swift_bridgeObjectRetain();
  sub_1CA0C0D60(a1, v3);
  return swift_bridgeObjectRelease();
}

uint64_t sub_1CA0BFEF8()
{
  uint64_t *v0;
  uint64_t v1;
  _BYTE v3[72];

  v1 = *v0;
  sub_1CA1F13F0();
  swift_bridgeObjectRetain();
  sub_1CA0C0D60((uint64_t)v3, v1);
  swift_bridgeObjectRelease();
  return sub_1CA1F1438();
}

void sub_1CA0BFF48(uint64_t *a1, uint64_t *a2)
{
  sub_1CA0BF4E0(*a1, *a2);
}

double sub_1CA0BFF54@<D0>(uint64_t a1@<X8>)
{
  double result;
  __int128 v3;
  _OWORD v4[2];
  uint64_t v5;

  MACluster.makeIterator()((uint64_t)v4);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  result = *(double *)v4;
  v3 = v4[1];
  *(_OWORD *)a1 = v4[0];
  *(_OWORD *)(a1 + 16) = v3;
  *(_QWORD *)(a1 + 32) = v5;
  return result;
}

uint64_t sub_1CA0BFFA4()
{
  return 0;
}

id sub_1CA0BFFAC()
{
  void **v0;
  id v1;

  v1 = sub_1CA0DE250(*v0);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v1;
}

id sub_1CA0BFFF4(uint64_t a1, _QWORD *a2, uint64_t a3)
{
  return sub_1CA13836C(a1, a2, a3);
}

void MACluster.description.getter()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  id v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  id v11;
  int64_t v12;
  unint64_t v13;
  uint64_t v14;
  void *v15;
  id v16;
  id v17;
  uint64_t v18;
  int64_t v19;
  unint64_t v20;
  __int128 v21;
  _OWORD v22[2];
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;

  v1 = *v0;
  v2 = v0[1];
  sub_1CA1F1054();
  swift_bridgeObjectRelease();
  v25 = 0xD000000000000013;
  v26 = 0x80000001CA206FD0;
  if ((v1 & 0xC000000000000001) != 0)
  {
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    sub_1CA1F0FA0();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  sub_1CA1F12AC();
  sub_1CA1F0A3C();
  swift_bridgeObjectRelease();
  sub_1CA1F0A3C();
  v23 = v25;
  v24 = v26;
  *(_QWORD *)&v22[0] = v1;
  *((_QWORD *)&v22[0] + 1) = v2;
  MACluster.makeIterator()((uint64_t)&v25);
  v3 = v25;
  v4 = v28;
  v5 = v29;
  v18 = v27;
  v19 = (unint64_t)(v27 + 64) >> 6;
  v20 = v26;
  while ((v3 & 0x8000000000000000) != 0)
  {
    v10 = sub_1CA1F0FD0();
    if (!v10)
      goto LABEL_30;
    *(_QWORD *)&v21 = v10;
    sub_1CA0B6A1C();
    swift_unknownObjectRetain();
    swift_dynamicCast();
    v11 = *(id *)&v22[0];
    swift_unknownObjectRelease();
    v9 = v4;
    v7 = v5;
    if (!v11)
      goto LABEL_30;
LABEL_27:
    v15 = (void *)sub_1CA1F0A00();
    v16 = objc_msgSend(v11, sel_propertyForKey_, v15);

    if (v16)
    {
      sub_1CA1F0F04();
      swift_unknownObjectRelease();
      sub_1CA0AFCC0(&v21, v22);
      *(_QWORD *)&v21 = 0;
      *((_QWORD *)&v21 + 1) = 0xE000000000000000;
      sub_1CA1F0A3C();
      sub_1CA1F1180();
      sub_1CA1F0A3C();
      v17 = objc_msgSend(v11, sel_visualString);
      sub_1CA1F0A0C();

      sub_1CA1F0A3C();
      swift_bridgeObjectRelease();
      sub_1CA1F0A3C();

      swift_bridgeObjectRelease();
      __swift_destroy_boxed_opaque_existential_0((uint64_t)v22);
    }
    else
    {
      *(_QWORD *)&v22[0] = 2314;
      *((_QWORD *)&v22[0] + 1) = 0xE200000000000000;
      v6 = objc_msgSend(v11, sel_visualString);
      sub_1CA1F0A0C();

      sub_1CA1F0A3C();
      swift_bridgeObjectRelease();
      sub_1CA1F0A3C();
      swift_bridgeObjectRelease();

    }
    v4 = v9;
    v5 = v7;
  }
  if (v5)
  {
    v7 = (v5 - 1) & v5;
    v8 = __clz(__rbit64(v5)) | (v4 << 6);
    v9 = v4;
LABEL_26:
    v11 = *(id *)(*(_QWORD *)(v3 + 48) + 8 * v8);
    if (!v11)
      goto LABEL_30;
    goto LABEL_27;
  }
  v12 = v4 + 1;
  if (!__OFADD__(v4, 1))
  {
    if (v12 >= v19)
      goto LABEL_29;
    v13 = *(_QWORD *)(v20 + 8 * v12);
    v9 = v4 + 1;
    if (!v13)
    {
      v9 = v4 + 2;
      if (v4 + 2 >= v19)
        goto LABEL_29;
      v13 = *(_QWORD *)(v20 + 8 * v9);
      if (!v13)
      {
        v9 = v4 + 3;
        if (v4 + 3 >= v19)
          goto LABEL_29;
        v13 = *(_QWORD *)(v20 + 8 * v9);
        if (!v13)
        {
          v9 = v4 + 4;
          if (v4 + 4 >= v19)
            goto LABEL_29;
          v13 = *(_QWORD *)(v20 + 8 * v9);
          if (!v13)
          {
            v14 = v4 + 5;
            while (v19 != v14)
            {
              v13 = *(_QWORD *)(v20 + 8 * v14++);
              if (v13)
              {
                v9 = v14 - 1;
                goto LABEL_25;
              }
            }
LABEL_29:
            v5 = 0;
LABEL_30:
            sub_1CA0B6B24(v3, v20, v18, v4, v5);
            return;
          }
        }
      }
    }
LABEL_25:
    v7 = (v13 - 1) & v13;
    v8 = __clz(__rbit64(v13)) + (v9 << 6);
    goto LABEL_26;
  }
  __break(1u);
}

uint64_t _s17KnowledgeGraphKit9MAClusterV6remove4nodeSo6MANodeCSgAG_tF_0(void *a1)
{
  uint64_t *v1;
  uint64_t v3;
  id v4;
  char v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  id v10;
  char v11;
  uint64_t v12;
  id v13;
  char v14;
  int isUniquelyReferenced_nonNull_native;
  uint64_t v16;
  uint64_t v18;

  v3 = *v1;
  if ((*v1 & 0xC000000000000001) != 0)
  {
    swift_bridgeObjectRetain();
    v4 = a1;
    v5 = sub_1CA1F0FDC();

    if ((v5 & 1) != 0)
    {
      v6 = sub_1CA0C0764();
      swift_bridgeObjectRelease();
      return v6;
    }
LABEL_12:
    swift_bridgeObjectRelease();
    return 0;
  }
  swift_bridgeObjectRetain();
  v7 = sub_1CA1F0E5C();
  v8 = -1 << *(_BYTE *)(v3 + 32);
  v9 = v7 & ~v8;
  if (((*(_QWORD *)(v3 + 56 + ((v9 >> 3) & 0xFFFFFFFFFFFFF8)) >> v9) & 1) == 0)
    goto LABEL_12;
  sub_1CA0B6A1C();
  v10 = *(id *)(*(_QWORD *)(v3 + 48) + 8 * v9);
  v11 = sub_1CA1F0E68();

  if ((v11 & 1) == 0)
  {
    v12 = ~v8;
    do
    {
      v9 = (v9 + 1) & v12;
      if (((*(_QWORD *)(v3 + 56 + ((v9 >> 3) & 0xFFFFFFFFFFFFF8)) >> v9) & 1) == 0)
        goto LABEL_12;
      v13 = *(id *)(*(_QWORD *)(v3 + 48) + 8 * v9);
      v14 = sub_1CA1F0E68();

    }
    while ((v14 & 1) == 0);
  }
  swift_bridgeObjectRelease();
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  v16 = *v1;
  v18 = *v1;
  *v1 = 0x8000000000000000;
  if (!isUniquelyReferenced_nonNull_native)
  {
    sub_1CA13EBB0();
    v16 = v18;
  }
  v6 = *(_QWORD *)(*(_QWORD *)(v16 + 48) + 8 * v9);
  sub_1CA0C08EC(v9);
  *v1 = v18;
  swift_bridgeObjectRelease();
  return v6;
}

unint64_t sub_1CA0C0614()
{
  unint64_t result;
  unint64_t v1;

  result = qword_1EF937678;
  if (!qword_1EF937678)
  {
    v1 = sub_1CA0B6A1C();
    result = MEMORY[0x1CAA4BB30](MEMORY[0x1E0DEFCF8], v1);
    atomic_store(result, (unint64_t *)&qword_1EF937678);
  }
  return result;
}

uint64_t sub_1CA0C065C(uint64_t a1)
{
  uint64_t *v1;
  uint64_t *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int isUniquelyReferenced_nonNull_native;
  uint64_t v11;
  uint64_t v12;
  uint64_t v14;

  v2 = v1;
  v4 = *v2;
  v5 = sub_1CA1F13E4();
  v6 = -1 << *(_BYTE *)(v4 + 32);
  v7 = v5 & ~v6;
  if (((*(_QWORD *)(v4 + 56 + ((v7 >> 3) & 0xFFFFFFFFFFFFF8)) >> v7) & 1) == 0)
    return 0;
  v8 = *(_QWORD *)(v4 + 48);
  if (*(_QWORD *)(v8 + 8 * v7) != a1)
  {
    v9 = ~v6;
    do
    {
      v7 = (v7 + 1) & v9;
      if (((*(_QWORD *)(v4 + 56 + ((v7 >> 3) & 0xFFFFFFFFFFFFF8)) >> v7) & 1) == 0)
        return 0;
    }
    while (*(_QWORD *)(v8 + 8 * v7) != a1);
  }
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  v11 = *v2;
  v14 = *v2;
  *v2 = 0x8000000000000000;
  if (!isUniquelyReferenced_nonNull_native)
  {
    sub_1CA13F0DC();
    v11 = v14;
  }
  v12 = *(_QWORD *)(*(_QWORD *)(v11 + 48) + 8 * v7);
  sub_1CA0C0A8C(v7);
  *v2 = v14;
  swift_bridgeObjectRelease();
  return v12;
}

uint64_t sub_1CA0C0764()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  id v8;
  char v9;
  uint64_t v10;
  id v11;
  char v12;
  uint64_t v13;
  uint64_t result;
  uint64_t v15;

  v1 = v0;
  swift_bridgeObjectRelease();
  v2 = sub_1CA1F0FA0();
  v3 = swift_unknownObjectRetain();
  v4 = sub_1CA0BE8F8(v3, v2);
  v15 = v4;
  swift_retain();
  v5 = sub_1CA1F0E5C();
  v6 = -1 << *(_BYTE *)(v4 + 32);
  v7 = v5 & ~v6;
  if (((*(_QWORD *)(v4 + 56 + ((v7 >> 3) & 0xFFFFFFFFFFFFF8)) >> v7) & 1) != 0)
  {
    sub_1CA0B6A1C();
    v8 = *(id *)(*(_QWORD *)(v4 + 48) + 8 * v7);
    v9 = sub_1CA1F0E68();

    if ((v9 & 1) != 0)
    {
LABEL_6:
      swift_release();
      v13 = *(_QWORD *)(*(_QWORD *)(v4 + 48) + 8 * v7);
      sub_1CA0C08EC(v7);
      if ((sub_1CA1F0E68() & 1) != 0)
      {
        *v1 = v15;
        return v13;
      }
      __break(1u);
    }
    else
    {
      v10 = ~v6;
      while (1)
      {
        v7 = (v7 + 1) & v10;
        if (((*(_QWORD *)(v4 + 56 + ((v7 >> 3) & 0xFFFFFFFFFFFFF8)) >> v7) & 1) == 0)
          break;
        v11 = *(id *)(*(_QWORD *)(v4 + 48) + 8 * v7);
        v12 = sub_1CA1F0E68();

        if ((v12 & 1) != 0)
          goto LABEL_6;
      }
    }
    swift_release();
    __break(1u);
  }
  result = swift_release();
  __break(1u);
  return result;
}

unint64_t sub_1CA0C08EC(unint64_t result)
{
  uint64_t *v1;
  int64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  id v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v15;
  _QWORD *v16;
  _QWORD *v17;
  uint64_t v18;
  BOOL v19;
  uint64_t v20;

  v2 = result;
  v3 = *v1;
  v4 = *v1 + 56;
  v5 = -1 << *(_BYTE *)(*v1 + 32);
  v6 = (result + 1) & ~v5;
  if (((1 << v6) & *(_QWORD *)(v4 + 8 * (v6 >> 6))) != 0)
  {
    v7 = ~v5;
    swift_retain();
    v8 = sub_1CA1F0F40();
    if ((*(_QWORD *)(v4 + 8 * (v6 >> 6)) & (1 << v6)) != 0)
    {
      v9 = (v8 + 1) & v7;
      do
      {
        v10 = *(id *)(*(_QWORD *)(v3 + 48) + 8 * v6);
        v11 = sub_1CA1F0E5C();

        v12 = v11 & v7;
        if (v2 >= (uint64_t)v9)
        {
          if (v12 >= v9 && v2 >= (uint64_t)v12)
          {
LABEL_16:
            v15 = *(_QWORD *)(v3 + 48);
            v16 = (_QWORD *)(v15 + 8 * v2);
            v17 = (_QWORD *)(v15 + 8 * v6);
            if (v2 != v6 || (v2 = v6, v16 >= v17 + 1))
            {
              *v16 = *v17;
              v2 = v6;
            }
          }
        }
        else if (v12 >= v9 || v2 >= (uint64_t)v12)
        {
          goto LABEL_16;
        }
        v6 = (v6 + 1) & v7;
      }
      while (((*(_QWORD *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFF8)) >> v6) & 1) != 0);
    }
    *(_QWORD *)(v4 + (((unint64_t)v2 >> 3) & 0x1FFFFFFFFFFFFFF8)) &= (-1 << v2) - 1;
    result = swift_release();
  }
  else
  {
    *(_QWORD *)(v4 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8)) &= (-1 << result) - 1;
  }
  v18 = *(_QWORD *)(v3 + 16);
  v19 = __OFSUB__(v18, 1);
  v20 = v18 - 1;
  if (v19)
  {
    __break(1u);
  }
  else
  {
    *(_QWORD *)(v3 + 16) = v20;
    ++*(_DWORD *)(v3 + 36);
  }
  return result;
}

unint64_t sub_1CA0C0A8C(unint64_t result)
{
  uint64_t *v1;
  int64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  _QWORD *v15;
  uint64_t v16;
  BOOL v17;
  uint64_t v18;

  v2 = result;
  v3 = *v1;
  v4 = *v1 + 56;
  v5 = -1 << *(_BYTE *)(v3 + 32);
  v6 = (result + 1) & ~v5;
  if (((1 << v6) & *(_QWORD *)(v4 + 8 * (v6 >> 6))) != 0)
  {
    v7 = ~v5;
    swift_retain();
    v8 = sub_1CA1F0F40();
    if ((*(_QWORD *)(v4 + 8 * (v6 >> 6)) & (1 << v6)) != 0)
    {
      v9 = (v8 + 1) & v7;
      do
      {
        v10 = *(_QWORD *)(v3 + 48);
        v11 = (_QWORD *)(v10 + 8 * v6);
        v12 = sub_1CA1F13E4() & v7;
        if (v2 >= (uint64_t)v9)
        {
          if (v12 >= v9 && v2 >= v12)
          {
LABEL_16:
            v15 = (_QWORD *)(v10 + 8 * v2);
            if (v2 != v6 || (v2 = v6, v15 >= v11 + 1))
            {
              *v15 = *v11;
              v2 = v6;
            }
          }
        }
        else if (v12 >= v9 || v2 >= v12)
        {
          goto LABEL_16;
        }
        v6 = (v6 + 1) & v7;
      }
      while (((*(_QWORD *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFF8)) >> v6) & 1) != 0);
    }
    *(_QWORD *)(v4 + (((unint64_t)v2 >> 3) & 0x1FFFFFFFFFFFFFF8)) &= (-1 << v2) - 1;
    result = swift_release();
  }
  else
  {
    *(_QWORD *)(v4 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8)) &= (-1 << result) - 1;
  }
  v16 = *(_QWORD *)(v3 + 16);
  v17 = __OFSUB__(v16, 1);
  v18 = v16 - 1;
  if (v17)
  {
    __break(1u);
  }
  else
  {
    *(_QWORD *)(v3 + 16) = v18;
    ++*(_DWORD *)(v3 + 36);
  }
  return result;
}

void sub_1CA0C0C10(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  int64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  int64_t v9;
  unint64_t v10;
  unint64_t v11;
  id v12;
  char v13;
  int64_t v14;
  unint64_t v15;
  int64_t v16;

  v3 = *(_QWORD *)(a2 + 16);
  if (v3 != sub_1CA1F0FA0())
    return;
  v4 = 0;
  v5 = a2 + 56;
  v6 = 1 << *(_BYTE *)(a2 + 32);
  v7 = -1;
  if (v6 < 64)
    v7 = ~(-1 << v6);
  v8 = v7 & *(_QWORD *)(a2 + 56);
  v9 = (unint64_t)(v6 + 63) >> 6;
  while (v8)
  {
    v10 = __clz(__rbit64(v8));
    v8 &= v8 - 1;
    v11 = v10 | (v4 << 6);
LABEL_6:
    v12 = *(id *)(*(_QWORD *)(a2 + 48) + 8 * v11);
    v13 = sub_1CA1F0FDC();

    if ((v13 & 1) == 0)
      return;
  }
  v14 = v4 + 1;
  if (__OFADD__(v4, 1))
  {
    __break(1u);
    goto LABEL_23;
  }
  if (v14 >= v9)
    return;
  v15 = *(_QWORD *)(v5 + 8 * v14);
  ++v4;
  if (v15)
    goto LABEL_19;
  v4 = v14 + 1;
  if (v14 + 1 >= v9)
    return;
  v15 = *(_QWORD *)(v5 + 8 * v4);
  if (v15)
  {
LABEL_19:
    v8 = (v15 - 1) & v15;
    v11 = __clz(__rbit64(v15)) + (v4 << 6);
    goto LABEL_6;
  }
  v16 = v14 + 2;
  if (v16 >= v9)
    return;
  v15 = *(_QWORD *)(v5 + 8 * v16);
  if (v15)
  {
    v4 = v16;
    goto LABEL_19;
  }
  while (1)
  {
    v4 = v16 + 1;
    if (__OFADD__(v16, 1))
      break;
    if (v4 >= v9)
      return;
    v15 = *(_QWORD *)(v5 + 8 * v4);
    ++v16;
    if (v15)
      goto LABEL_19;
  }
LABEL_23:
  __break(1u);
}

void sub_1CA0C0D60(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  int64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int64_t v11;
  uint64_t v12;
  unint64_t v13;
  int64_t v14;
  void *v15;
  id v16;
  uint64_t v17;
  unint64_t v18;
  int64_t v19;
  uint64_t v20;
  void *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  int64_t v25;
  unint64_t v26;

  sub_1CA1F1438();
  if ((a2 & 0xC000000000000001) != 0)
  {
    swift_bridgeObjectRetain();
    sub_1CA1F0F64();
    sub_1CA0B6A1C();
    sub_1CA0C0614();
    sub_1CA1F0CC4();
    a2 = v22;
    v3 = v23;
    v4 = v24;
    v5 = v25;
    v6 = v26;
  }
  else
  {
    v7 = -1 << *(_BYTE *)(a2 + 32);
    v3 = a2 + 56;
    v4 = ~v7;
    v8 = -v7;
    if (v8 < 64)
      v9 = ~(-1 << v8);
    else
      v9 = -1;
    v6 = v9 & *(_QWORD *)(a2 + 56);
    swift_bridgeObjectRetain();
    v5 = 0;
  }
  v10 = 0;
  v20 = v4;
  v11 = (unint64_t)(v4 + 64) >> 6;
  while (a2 < 0)
  {
    if (!sub_1CA1F0FD0())
      goto LABEL_27;
    sub_1CA0B6A1C();
    swift_dynamicCast();
    v15 = v21;
    if (!v21)
      goto LABEL_27;
    v14 = v5;
    v12 = v6;
LABEL_10:
    v17 = sub_1CA1F0E5C();

    v10 ^= v17;
    v5 = v14;
    v6 = v12;
  }
  if (v6)
  {
    v12 = (v6 - 1) & v6;
    v13 = __clz(__rbit64(v6)) | (v5 << 6);
    v14 = v5;
LABEL_9:
    v15 = *(void **)(*(_QWORD *)(a2 + 48) + 8 * v13);
    v21 = v15;
    v16 = v15;
    if (!v15)
      goto LABEL_27;
    goto LABEL_10;
  }
  v14 = v5 + 1;
  if (!__OFADD__(v5, 1))
  {
    if (v14 >= v11)
      goto LABEL_26;
    v18 = *(_QWORD *)(v3 + 8 * v14);
    if (!v18)
    {
      v14 = v5 + 2;
      if (v5 + 2 >= v11)
        goto LABEL_26;
      v18 = *(_QWORD *)(v3 + 8 * v14);
      if (!v18)
      {
        v19 = v5 + 3;
        while (v11 != v19)
        {
          v18 = *(_QWORD *)(v3 + 8 * v19++);
          if (v18)
          {
            v14 = v19 - 1;
            goto LABEL_22;
          }
        }
LABEL_26:
        v6 = 0;
LABEL_27:
        sub_1CA0B6B24(a2, v3, v20, v5, v6);
        sub_1CA1F13FC();
        return;
      }
    }
LABEL_22:
    v12 = (v18 - 1) & v18;
    v13 = __clz(__rbit64(v18)) + (v14 << 6);
    goto LABEL_9;
  }
  __break(1u);
}

unint64_t sub_1CA0C0FB4()
{
  unint64_t result;

  result = qword_1EF937680;
  if (!qword_1EF937680)
  {
    result = MEMORY[0x1CAA4BB30](&protocol conformance descriptor for MACluster, &type metadata for MACluster);
    atomic_store(result, (unint64_t *)&qword_1EF937680);
  }
  return result;
}

unint64_t sub_1CA0C0FFC()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1EF937688;
  if (!qword_1EF937688)
  {
    v1 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_1EF937690);
    result = MEMORY[0x1CAA4BB30](MEMORY[0x1E0DEB328], v1);
    atomic_store(result, (unint64_t *)&qword_1EF937688);
  }
  return result;
}

uint64_t destroy for MACluster()
{
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

_QWORD *_s17KnowledgeGraphKit9MAClusterVwCP_0(_QWORD *a1, _QWORD *a2)
{
  uint64_t v3;

  v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

_QWORD *assignWithCopy for MACluster(_QWORD *a1, _QWORD *a2)
{
  *a1 = *a2;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

_OWORD *assignWithTake for MACluster(_OWORD *a1, _OWORD *a2)
{
  swift_bridgeObjectRelease();
  *a1 = *a2;
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for MACluster(uint64_t *a1, int a2)
{
  uint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *((_BYTE *)a1 + 16))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for MACluster(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)result = a2 ^ 0x80000000;
    *(_QWORD *)(result + 8) = 0;
    if (a3 < 0)
      *(_BYTE *)(result + 16) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)result = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 16) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for MACluster()
{
  return &type metadata for MACluster;
}

uint64_t AccelerateBuffer<>.approximatelyEqual<A>(to:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t AssociatedTypeWitness;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  char v14;
  void (*v15)(char *, uint64_t);
  uint64_t v17;

  v17 = a5;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v6 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v8 = MEMORY[0x1E0C80A78](AssociatedTypeWitness, v7);
  v10 = (char *)&v17 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v8, v11);
  v13 = (char *)&v17 - v12;
  _sSF17KnowledgeGraphKitE23absoluteDifferenceBoundxvgZ_0();
  _sSF17KnowledgeGraphKitE23absoluteDifferenceBoundxvgZ_0();
  v14 = AccelerateBuffer<>.approximatelyEqual<A>(to:maxAbsoluteDifference:maxRelativeDifference:)();
  v15 = *(void (**)(char *, uint64_t))(v6 + 8);
  v15(v10, AssociatedTypeWitness);
  v15(v13, AssociatedTypeWitness);
  return v14 & 1;
}

uint64_t AccelerateBuffer<>.approximatelyEqual<A>(to:maxAbsoluteDifference:maxRelativeDifference:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  unsigned __int8 v4;

  v0 = sub_1CA1F06A0();
  if (v0 != sub_1CA1F06A0())
    return 0;
  v1 = sub_1CA1F06A0();
  MEMORY[0x1E0C80A78](v1, v2);
  sub_1CA1F0694();
  return v4;
}

uint64_t sub_1CA0C1410@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  void (*v17)(char *, uint64_t);
  void (*v18)(char *, char *, uint64_t);
  _QWORD v20[2];

  v20[0] = a5;
  v20[1] = a3;
  v6 = *(_QWORD *)(a4 - 8);
  v7 = MEMORY[0x1E0C80A78](a1, a2);
  v9 = (char *)v20 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = MEMORY[0x1E0C80A78](v7, v10);
  v13 = (char *)v20 - v12;
  MEMORY[0x1E0C80A78](v11, v14);
  v16 = (char *)v20 - v15;
  sub_1CA1F1324();
  sub_1CA1F1324();
  sub_1CA1F11D4();
  v17 = *(void (**)(char *, uint64_t))(v6 + 8);
  v17(v9, a4);
  v17(v13, a4);
  sub_1CA1F0940();
  sub_1CA1F133C();
  v17(v9, a4);
  v17(v16, a4);
  v18 = *(void (**)(char *, char *, uint64_t))(v6 + 32);
  v18(v16, v13, a4);
  sub_1CA1F0934();
  sub_1CA1F1330();
  v17(v9, a4);
  v17(v16, a4);
  v18(v16, v13, a4);
  sub_1CA1F0928();
  return ((uint64_t (*)(char *, uint64_t))v17)(v16, a4);
}

uint64_t static FloatingPoint.approximatelyEqual(_:_:maxAbsoluteDifference:maxRelativeDifference:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  char v17;
  void (*v18)(char *, uint64_t);
  _QWORD v20[4];

  v20[3] = a3;
  v10 = *(_QWORD *)(a5 - 8);
  v11 = MEMORY[0x1E0C80A78](a1, a2);
  v13 = (char *)v20 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v11, v14);
  v16 = (char *)v20 - v15;
  if ((sub_1CA1F09D0() & 1) != 0)
  {
    v17 = 1;
  }
  else
  {
    v20[1] = v5;
    v20[2] = a4;
    sub_1CA1F11E0();
    sub_1CA1F1324();
    v18 = *(void (**)(char *, uint64_t))(v10 + 8);
    v18(v13, a5);
    if ((sub_1CA1F097C() & 1) != 0)
    {
      sub_1CA0C1410(a1, a2, (uint64_t)v16, a5, (uint64_t)v13);
      v17 = sub_1CA1F0994();
      v18(v13, a5);
    }
    else
    {
      v17 = 1;
    }
    v18(v16, a5);
  }
  return v17 & 1;
}

uint64_t static FloatingPoint.approximatelyEqual(_:_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  char v13;
  void (*v14)(char *, uint64_t);
  uint64_t v16;

  v6 = *(_QWORD *)(a3 - 8);
  v7 = MEMORY[0x1E0C80A78](a1, a2);
  v9 = (char *)&v16 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v7, v10);
  v12 = (char *)&v16 - v11;
  _sSF17KnowledgeGraphKitE23absoluteDifferenceBoundxvgZ_0();
  _sSF17KnowledgeGraphKitE23absoluteDifferenceBoundxvgZ_0();
  v13 = static FloatingPoint.approximatelyEqual(_:_:maxAbsoluteDifference:maxRelativeDifference:)(a1, a2, (uint64_t)v12, (uint64_t)v9, a3);
  v14 = *(void (**)(char *, uint64_t))(v6 + 8);
  v14(v9, a3);
  v14(v12, a3);
  return v13 & 1;
}

uint64_t sub_1CA0C1884()
{
  return sub_1CA1F0694();
}

uint64_t sub_1CA0C18F4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X2>, uint64_t a3@<X3>, uint64_t a4@<X5>, uint64_t a5@<X6>, char *a6@<X8>, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  uint64_t v10;
  uint64_t AssociatedTypeWitness;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t result;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  void (*v24)(char *, uint64_t, uint64_t);
  char v25;
  void (*v26)(char *, uint64_t);
  char v27;
  uint64_t v28;
  char *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  _QWORD *v36;

  v34 = a4;
  v35 = a5;
  v32 = a1;
  v33 = a3;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v36 = *(_QWORD **)(AssociatedTypeWitness - 8);
  v15 = MEMORY[0x1E0C80A78](AssociatedTypeWitness, v14);
  v17 = (char *)&v28 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  result = MEMORY[0x1E0C80A78](v15, v18);
  v21 = (char *)&v28 - v20;
  if (a2 < 0)
  {
    __break(1u);
  }
  else
  {
    if (a2)
    {
      v29 = a6;
      v30 = v10;
      v22 = 0;
      v31 = a10;
      v23 = v36[9];
      v24 = (void (*)(char *, uint64_t, uint64_t))v36[2];
      while (1)
      {
        v24(v21, v33 + v22, AssociatedTypeWitness);
        v24(v17, v32 + v22, AssociatedTypeWitness);
        v25 = static FloatingPoint.approximatelyEqual(_:_:maxAbsoluteDifference:maxRelativeDifference:)((uint64_t)v21, (uint64_t)v17, v34, v35, AssociatedTypeWitness);
        v26 = (void (*)(char *, uint64_t))v36[1];
        v26(v17, AssociatedTypeWitness);
        result = ((uint64_t (*)(char *, uint64_t))v26)(v21, AssociatedTypeWitness);
        if ((v25 & 1) == 0)
          break;
        v22 += v23;
        if (!--a2)
        {
          v27 = 1;
          goto LABEL_9;
        }
      }
      v27 = 0;
LABEL_9:
      a6 = v29;
    }
    else
    {
      v27 = 1;
    }
    *a6 = v27;
  }
  return result;
}

uint64_t sub_1CA0C1A7C@<X0>(uint64_t a1@<X0>, char *a2@<X8>)
{
  uint64_t *v2;

  return sub_1CA0C18F4(a1, v2[7], v2[8], v2[10], v2[11], a2, v2[3], v2[4], v2[5], v2[6]);
}

BOOL static MAFeatureDefinitionType.== infix(_:_:)(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return ((*a1 ^ *a2) & 1) == 0;
}

uint64_t MAFeatureDefinitionType.hash(into:)()
{
  return sub_1CA1F13FC();
}

uint64_t MAFeatureDefinitionType.hashValue.getter()
{
  sub_1CA1F13F0();
  sub_1CA1F13FC();
  return sub_1CA1F1438();
}

BOOL sub_1CA0C1B40(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return ((*a1 ^ *a2) & 1) == 0;
}

uint64_t MAGraph.featureDefinition(source:targets:)(uint64_t a1, uint64_t a2)
{
  void *v2;
  id v5;
  uint64_t v6;

  type metadata accessor for MAFeatureDefinition();
  swift_allocObject();
  v5 = v2;
  swift_retain();
  swift_bridgeObjectRetain();
  v6 = sub_1CA0C6A24(v5, a1, a2);
  swift_bridgeObjectRelease();
  return v6;
}

uint64_t type metadata accessor for MAFeatureDefinition()
{
  return objc_opt_self();
}

uint64_t MANode.featureExtraction(definition:target:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  void *v4;

  return sub_1CA150140(v4, a4, 0);
}

uint64_t sub_1CA0C1C20(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  void **v4;

  return sub_1CA150140(*v4, a4, 0);
}

uint64_t Dictionary<>.featureExtraction(definition:target:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  return sub_1CA0C6DEC(a2, a3, a4, a5, a6, a7, a8);
}

uint64_t sub_1CA0C1C80(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t *v7;

  return sub_1CA0C6DEC(a2, a3, a4, a5, a6, a7, *v7);
}

uint64_t Array<A>.featureExtraction(definition:target:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v6;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  char v17;
  uint64_t v18;
  uint64_t v19;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v21;
  uint64_t v22;
  __int128 v24;
  uint64_t v25;

  type metadata accessor for MASlice();
  v10 = swift_bridgeObjectRetain();
  v11 = sub_1CA0C68DC(v10);
  swift_bridgeObjectRelease();
  v12 = sub_1CA140888(v11, 1.0);
  if (!v12)
    return 0;
  v13 = (_QWORD *)v12;
  v14 = *(_QWORD *)(a1 + 24);
  swift_bridgeObjectRetain();
  swift_retain();
  sub_1CA0AFF28(a6);
  sub_1CA0AAE34(a6);
  swift_bridgeObjectRelease();
  v15 = *(_QWORD *)(v14 + 40);
  if (*(_QWORD *)(v15 + 16))
  {
    swift_bridgeObjectRetain();
    v16 = sub_1CA0AA5E0(a4);
    if ((v17 & 1) != 0)
    {
      v24 = *(_OWORD *)(*(_QWORD *)(v15 + 56) + 16 * v16);
      swift_retain();
      swift_release();
      swift_bridgeObjectRelease();
      v18 = swift_allocObject();
      *(_OWORD *)(v18 + 16) = v24;
      v19 = swift_allocObject();
      *(_QWORD *)(v19 + 16) = sub_1CA0C6ECC;
      *(_QWORD *)(v19 + 24) = v18;
      swift_retain();
      swift_retain();
      isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      v25 = v13[5];
      v13[5] = 0x8000000000000000;
      sub_1CA0AE600((uint64_t)sub_1CA0C6F0C, v19, a4, isUniquelyReferenced_nonNull_native);
      v21 = v13[5];
      v13[5] = v25;
      swift_release();
      swift_bridgeObjectRelease();
      sub_1CA142204(a4, 0, v13, 1.0);
      if (v6)
      {
        swift_release();
        swift_release();
      }
      else
      {
        v22 = swift_bridgeObjectRetain();
        v21 = sub_1CA0C2784(v22);
        swift_release();
        swift_release();
        swift_release();
        swift_bridgeObjectRelease();
      }
    }
    else
    {
      swift_release();
      swift_release();
      swift_bridgeObjectRelease();
      return 0;
    }
  }
  else
  {
    swift_release();
    swift_release();
    return 0;
  }
  return v21;
}

void sub_1CA0C1F1C(uint64_t a1)
{
  int64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  int64_t v7;
  unint64_t v8;
  unint64_t v9;
  int64_t v10;
  unint64_t v11;
  int64_t v12;
  id v13[2];

  sub_1CA0B6A1C();
  sub_1CA0C0614();
  v2 = 0;
  v13[1] = (id)sub_1CA1F0CA0();
  v3 = a1 + 64;
  v4 = 1 << *(_BYTE *)(a1 + 32);
  v5 = -1;
  if (v4 < 64)
    v5 = ~(-1 << v4);
  v6 = v5 & *(_QWORD *)(a1 + 64);
  v7 = (unint64_t)(v4 + 63) >> 6;
  while (1)
  {
    if (v6)
    {
      v8 = __clz(__rbit64(v6));
      v6 &= v6 - 1;
      v9 = v8 | (v2 << 6);
      goto LABEL_5;
    }
    v10 = v2 + 1;
    if (__OFADD__(v2, 1))
    {
      __break(1u);
      goto LABEL_25;
    }
    if (v10 >= v7)
      goto LABEL_23;
    v11 = *(_QWORD *)(v3 + 8 * v10);
    ++v2;
    if (!v11)
    {
      v2 = v10 + 1;
      if (v10 + 1 >= v7)
        goto LABEL_23;
      v11 = *(_QWORD *)(v3 + 8 * v2);
      if (!v11)
      {
        v2 = v10 + 2;
        if (v10 + 2 >= v7)
          goto LABEL_23;
        v11 = *(_QWORD *)(v3 + 8 * v2);
        if (!v11)
        {
          v2 = v10 + 3;
          if (v10 + 3 >= v7)
            goto LABEL_23;
          v11 = *(_QWORD *)(v3 + 8 * v2);
          if (!v11)
            break;
        }
      }
    }
LABEL_22:
    v6 = (v11 - 1) & v11;
    v9 = __clz(__rbit64(v11)) + (v2 << 6);
LABEL_5:
    sub_1CA0BDD74(v13, *(id *)(*(_QWORD *)(a1 + 48) + 8 * v9));

  }
  v12 = v10 + 4;
  if (v12 >= v7)
  {
LABEL_23:
    swift_release();
    return;
  }
  v11 = *(_QWORD *)(v3 + 8 * v12);
  if (v11)
  {
    v2 = v12;
    goto LABEL_22;
  }
  while (1)
  {
    v2 = v12 + 1;
    if (__OFADD__(v12, 1))
      break;
    if (v2 >= v7)
      goto LABEL_23;
    v11 = *(_QWORD *)(v3 + 8 * v2);
    ++v12;
    if (v11)
      goto LABEL_22;
  }
LABEL_25:
  __break(1u);
}

uint64_t sub_1CA0C20A8(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t result;
  int64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  int64_t v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  char v21;
  unint64_t v22;
  BOOL v23;
  uint64_t v24;
  uint64_t v25;
  int64_t v26;
  __int128 v27;
  __int128 v28;
  uint64_t v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  uint64_t v33;
  _OWORD v34[2];
  _OWORD v35[2];

  if (*(_QWORD *)(a1 + 16))
  {
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_1EF938460);
    v2 = sub_1CA1F1264();
  }
  else
  {
    v2 = MEMORY[0x1E0DEE9E0];
  }
  v25 = a1 + 64;
  v3 = 1 << *(_BYTE *)(a1 + 32);
  if (v3 < 64)
    v4 = ~(-1 << v3);
  else
    v4 = -1;
  v5 = v4 & *(_QWORD *)(a1 + 64);
  v26 = (unint64_t)(v3 + 63) >> 6;
  v6 = v2 + 64;
  swift_bridgeObjectRetain();
  result = swift_retain();
  v8 = 0;
  while (1)
  {
    if (v5)
    {
      v11 = __clz(__rbit64(v5));
      v5 &= v5 - 1;
      v12 = v11 | (v8 << 6);
      goto LABEL_26;
    }
    v13 = v8 + 1;
    if (__OFADD__(v8, 1))
    {
LABEL_36:
      __break(1u);
      goto LABEL_37;
    }
    if (v13 >= v26)
      goto LABEL_35;
    v14 = *(_QWORD *)(v25 + 8 * v13);
    ++v8;
    if (!v14)
    {
      v8 = v13 + 1;
      if (v13 + 1 >= v26)
        goto LABEL_35;
      v14 = *(_QWORD *)(v25 + 8 * v8);
      if (!v14)
      {
        v8 = v13 + 2;
        if (v13 + 2 >= v26)
          goto LABEL_35;
        v14 = *(_QWORD *)(v25 + 8 * v8);
        if (!v14)
          break;
      }
    }
LABEL_25:
    v5 = (v14 - 1) & v14;
    v12 = __clz(__rbit64(v14)) + (v8 << 6);
LABEL_26:
    v16 = (_QWORD *)(*(_QWORD *)(a1 + 48) + 16 * v12);
    v17 = v16[1];
    *(_QWORD *)&v35[0] = *v16;
    *((_QWORD *)&v35[0] + 1) = v17;
    swift_bridgeObjectRetain();
    swift_unknownObjectRetain();
    swift_dynamicCast();
    swift_dynamicCast();
    v31 = v27;
    v32 = v28;
    v33 = v29;
    sub_1CA0AFCC0(&v30, v34);
    v27 = v31;
    v28 = v32;
    v29 = v33;
    sub_1CA0AFCC0(v34, v35);
    sub_1CA0AFCC0(v35, &v31);
    result = sub_1CA1F1000();
    v18 = -1 << *(_BYTE *)(v2 + 32);
    v19 = result & ~v18;
    v20 = v19 >> 6;
    if (((-1 << v19) & ~*(_QWORD *)(v6 + 8 * (v19 >> 6))) != 0)
    {
      v9 = __clz(__rbit64((-1 << v19) & ~*(_QWORD *)(v6 + 8 * (v19 >> 6)))) | v19 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v21 = 0;
      v22 = (unint64_t)(63 - v18) >> 6;
      do
      {
        if (++v20 == v22 && (v21 & 1) != 0)
        {
          __break(1u);
          goto LABEL_36;
        }
        v23 = v20 == v22;
        if (v20 == v22)
          v20 = 0;
        v21 |= v23;
        v24 = *(_QWORD *)(v6 + 8 * v20);
      }
      while (v24 == -1);
      v9 = __clz(__rbit64(~v24)) + (v20 << 6);
    }
    *(_QWORD *)(v6 + ((v9 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v9;
    v10 = *(_QWORD *)(v2 + 48) + 40 * v9;
    *(_OWORD *)v10 = v27;
    *(_OWORD *)(v10 + 16) = v28;
    *(_QWORD *)(v10 + 32) = v29;
    result = (uint64_t)sub_1CA0AFCC0(&v31, (_OWORD *)(*(_QWORD *)(v2 + 56) + 32 * v9));
    ++*(_QWORD *)(v2 + 16);
  }
  v15 = v13 + 3;
  if (v15 >= v26)
  {
LABEL_35:
    swift_release();
    swift_release();
    return v2;
  }
  v14 = *(_QWORD *)(v25 + 8 * v15);
  if (v14)
  {
    v8 = v15;
    goto LABEL_25;
  }
  while (1)
  {
    v8 = v15 + 1;
    if (__OFADD__(v15, 1))
      break;
    if (v8 >= v26)
      goto LABEL_35;
    v14 = *(_QWORD *)(v25 + 8 * v8);
    ++v15;
    if (v14)
      goto LABEL_25;
  }
LABEL_37:
  __break(1u);
  return result;
}

unint64_t sub_1CA0C2420(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t *v6;
  uint64_t *v7;
  unint64_t result;
  int64_t i;
  uint64_t v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  _OWORD *v18;
  unint64_t v19;
  int64_t v20;
  unint64_t v21;
  int64_t v22;
  int64_t v23;
  uint64_t *v24;
  unint64_t v25;
  char v26;
  uint64_t *v27;
  uint64_t v28;
  BOOL v29;
  uint64_t v30;
  int64_t v31;
  uint64_t v32;
  int64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  __int128 v38;
  uint64_t v39;
  _OWORD v40[2];

  v1 = a1;
  if (*(_QWORD *)(a1 + 16))
  {
    __swift_instantiateConcreteTypeFromMangledName(&qword_1EF936FD0);
    v2 = (_QWORD *)sub_1CA1F1264();
  }
  else
  {
    v2 = (_QWORD *)MEMORY[0x1E0DEE9E0];
  }
  v32 = v1 + 64;
  v3 = -1 << *(_BYTE *)(v1 + 32);
  if (-v3 < 64)
    v4 = ~(-1 << -(char)v3);
  else
    v4 = -1;
  v5 = v4 & *(_QWORD *)(v1 + 64);
  v31 = (unint64_t)(63 - v3) >> 6;
  v6 = &v37;
  v7 = &v39;
  result = swift_bridgeObjectRetain();
  i = 0;
  v10 = MEMORY[0x1E0DEE9B0] + 8;
  v11 = MEMORY[0x1E0DEE9B8] + 8;
  if (v5)
    goto LABEL_10;
LABEL_11:
  v20 = i + 1;
  if (__OFADD__(i, 1))
    goto LABEL_35;
  if (v20 >= v31)
    goto LABEL_32;
  v21 = *(_QWORD *)(v32 + 8 * v20);
  v22 = i + 1;
  if (!v21)
  {
    v22 = i + 2;
    if (i + 2 >= v31)
      goto LABEL_32;
    v21 = *(_QWORD *)(v32 + 8 * v22);
    if (!v21)
    {
      v22 = i + 3;
      if (i + 3 >= v31)
        goto LABEL_32;
      v21 = *(_QWORD *)(v32 + 8 * v22);
      if (!v21)
      {
        v22 = i + 4;
        if (i + 4 >= v31)
          goto LABEL_32;
        v21 = *(_QWORD *)(v32 + 8 * v22);
        if (!v21)
        {
          v23 = i + 5;
          if (i + 5 < v31)
          {
            v21 = *(_QWORD *)(v32 + 8 * v23);
            if (v21)
            {
              v22 = i + 5;
              goto LABEL_26;
            }
            while (1)
            {
              v22 = v23 + 1;
              if (__OFADD__(v23, 1))
                goto LABEL_36;
              if (v22 >= v31)
                break;
              v21 = *(_QWORD *)(v32 + 8 * v22);
              ++v23;
              if (v21)
                goto LABEL_26;
            }
          }
LABEL_32:
          sub_1CA0B6A14();
          return (unint64_t)v2;
        }
      }
    }
  }
LABEL_26:
  v34 = (v21 - 1) & v21;
  v19 = __clz(__rbit64(v21)) + (v22 << 6);
  for (i = v22; ; v19 = __clz(__rbit64(v5)) | (i << 6))
  {
    v24 = (uint64_t *)(*(_QWORD *)(v1 + 48) + 16 * v19);
    v35 = *v24;
    v36 = v24[1];
    swift_bridgeObjectRetain();
    swift_unknownObjectRetain();
    swift_dynamicCast();
    sub_1CA0AFCC0(v6, v7);
    sub_1CA0AFCC0(v7, v40);
    sub_1CA0AFCC0(v40, &v38);
    result = sub_1CA0AA474(v35, v36);
    v25 = result;
    if ((v26 & 1) != 0)
    {
      v33 = i;
      v12 = v7;
      v13 = v6;
      v14 = v1;
      v15 = v11;
      v16 = v10;
      v17 = (uint64_t *)(v2[6] + 16 * result);
      swift_bridgeObjectRelease();
      *v17 = v35;
      v17[1] = v36;
      v10 = v16;
      v11 = v15;
      v1 = v14;
      v6 = v13;
      v7 = v12;
      i = v33;
      v18 = (_OWORD *)(v2[7] + 32 * v25);
      __swift_destroy_boxed_opaque_existential_0((uint64_t)v18);
      result = (unint64_t)sub_1CA0AFCC0(&v38, v18);
      v5 = v34;
      if (!v34)
        goto LABEL_11;
      goto LABEL_10;
    }
    if (v2[2] >= v2[3])
      break;
    *(_QWORD *)((char *)v2 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
    v27 = (uint64_t *)(v2[6] + 16 * result);
    *v27 = v35;
    v27[1] = v36;
    result = (unint64_t)sub_1CA0AFCC0(&v38, (_OWORD *)(v2[7] + 32 * result));
    v28 = v2[2];
    v29 = __OFADD__(v28, 1);
    v30 = v28 + 1;
    if (v29)
      goto LABEL_34;
    v2[2] = v30;
    v5 = v34;
    if (!v34)
      goto LABEL_11;
LABEL_10:
    v34 = (v5 - 1) & v5;
  }
  __break(1u);
LABEL_34:
  __break(1u);
LABEL_35:
  __break(1u);
LABEL_36:
  __break(1u);
  return result;
}

uint64_t sub_1CA0C2784(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  int64_t v6;
  uint64_t v7;
  uint64_t result;
  int64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  int64_t v14;
  unint64_t v15;
  int64_t v16;
  int64_t v17;
  void *v18;
  uint64_t v19;
  id v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  char v24;
  unint64_t v25;
  BOOL v26;
  uint64_t v27;
  uint64_t v28;
  __int128 v29;
  __int128 v30;
  uint64_t v31;

  if (*(_QWORD *)(a1 + 16))
  {
    __swift_instantiateConcreteTypeFromMangledName(&qword_1EF937830);
    v2 = sub_1CA1F1264();
  }
  else
  {
    v2 = MEMORY[0x1E0DEE9E0];
  }
  v28 = a1 + 64;
  v3 = -1 << *(_BYTE *)(a1 + 32);
  if (-v3 < 64)
    v4 = ~(-1 << -(char)v3);
  else
    v4 = -1;
  v5 = v4 & *(_QWORD *)(a1 + 64);
  v6 = (unint64_t)(63 - v3) >> 6;
  v7 = v2 + 64;
  swift_bridgeObjectRetain();
  result = swift_retain();
  v9 = 0;
  while (1)
  {
    if (v5)
    {
      v12 = __clz(__rbit64(v5));
      v5 &= v5 - 1;
      v13 = v12 | (v9 << 6);
      goto LABEL_28;
    }
    v14 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
LABEL_38:
      __break(1u);
      goto LABEL_39;
    }
    if (v14 >= v6)
      goto LABEL_37;
    v15 = *(_QWORD *)(v28 + 8 * v14);
    v16 = v9 + 1;
    if (!v15)
    {
      v16 = v9 + 2;
      if (v9 + 2 >= v6)
        goto LABEL_37;
      v15 = *(_QWORD *)(v28 + 8 * v16);
      if (!v15)
      {
        v16 = v9 + 3;
        if (v9 + 3 >= v6)
          goto LABEL_37;
        v15 = *(_QWORD *)(v28 + 8 * v16);
        if (!v15)
        {
          v16 = v9 + 4;
          if (v9 + 4 >= v6)
            goto LABEL_37;
          v15 = *(_QWORD *)(v28 + 8 * v16);
          if (!v15)
            break;
        }
      }
    }
LABEL_27:
    v5 = (v15 - 1) & v15;
    v13 = __clz(__rbit64(v15)) + (v16 << 6);
    v9 = v16;
LABEL_28:
    v18 = *(void **)(*(_QWORD *)(a1 + 48) + 8 * v13);
    v19 = *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8 * v13);
    sub_1CA0B6A1C();
    v20 = v18;
    swift_bridgeObjectRetain();
    swift_dynamicCast();
    result = sub_1CA1F1000();
    v21 = -1 << *(_BYTE *)(v2 + 32);
    v22 = result & ~v21;
    v23 = v22 >> 6;
    if (((-1 << v22) & ~*(_QWORD *)(v7 + 8 * (v22 >> 6))) != 0)
    {
      v10 = __clz(__rbit64((-1 << v22) & ~*(_QWORD *)(v7 + 8 * (v22 >> 6)))) | v22 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v24 = 0;
      v25 = (unint64_t)(63 - v21) >> 6;
      do
      {
        if (++v23 == v25 && (v24 & 1) != 0)
        {
          __break(1u);
          goto LABEL_38;
        }
        v26 = v23 == v25;
        if (v23 == v25)
          v23 = 0;
        v24 |= v26;
        v27 = *(_QWORD *)(v7 + 8 * v23);
      }
      while (v27 == -1);
      v10 = __clz(__rbit64(~v27)) + (v23 << 6);
    }
    *(_QWORD *)(v7 + ((v10 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v10;
    v11 = *(_QWORD *)(v2 + 48) + 40 * v10;
    *(_OWORD *)v11 = v29;
    *(_OWORD *)(v11 + 16) = v30;
    *(_QWORD *)(v11 + 32) = v31;
    *(_QWORD *)(*(_QWORD *)(v2 + 56) + 8 * v10) = v19;
    ++*(_QWORD *)(v2 + 16);
  }
  v17 = v9 + 5;
  if (v9 + 5 >= v6)
  {
LABEL_37:
    swift_release();
    sub_1CA0B6A14();
    return v2;
  }
  v15 = *(_QWORD *)(v28 + 8 * v17);
  if (v15)
  {
    v16 = v9 + 5;
    goto LABEL_27;
  }
  while (1)
  {
    v16 = v17 + 1;
    if (__OFADD__(v17, 1))
      break;
    if (v16 >= v6)
      goto LABEL_37;
    v15 = *(_QWORD *)(v28 + 8 * v16);
    ++v17;
    if (v15)
      goto LABEL_27;
  }
LABEL_39:
  __break(1u);
  return result;
}

uint64_t sub_1CA0C2AB0(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t result;
  int64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  int64_t v15;
  int64_t v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  char v23;
  unint64_t v24;
  BOOL v25;
  uint64_t v26;
  int64_t v27;
  uint64_t v28;
  __int128 v29;
  __int128 v30;
  uint64_t v31;
  _OWORD v32[2];
  __int128 v33;
  __int128 v34;
  uint64_t v35;
  _OWORD v36[2];
  _OWORD v37[3];
  _OWORD v38[2];
  __int128 v39;
  _OWORD v40[2];

  if (*(_QWORD *)(a1 + 16))
  {
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_1EF938460);
    v2 = sub_1CA1F1264();
  }
  else
  {
    v2 = MEMORY[0x1E0DEE9E0];
  }
  v28 = a1 + 64;
  v3 = -1 << *(_BYTE *)(a1 + 32);
  if (-v3 < 64)
    v4 = ~(-1 << -(char)v3);
  else
    v4 = -1;
  v5 = v4 & *(_QWORD *)(a1 + 64);
  v27 = (unint64_t)(63 - v3) >> 6;
  v6 = v2 + 64;
  swift_bridgeObjectRetain();
  result = swift_retain();
  v8 = 0;
  while (1)
  {
    if (v5)
    {
      v11 = __clz(__rbit64(v5));
      v5 &= v5 - 1;
      v12 = v11 | (v8 << 6);
      goto LABEL_28;
    }
    v13 = v8 + 1;
    if (__OFADD__(v8, 1))
    {
LABEL_38:
      __break(1u);
      goto LABEL_39;
    }
    if (v13 >= v27)
      goto LABEL_37;
    v14 = *(_QWORD *)(v28 + 8 * v13);
    v15 = v8 + 1;
    if (!v14)
    {
      v15 = v8 + 2;
      if (v8 + 2 >= v27)
        goto LABEL_37;
      v14 = *(_QWORD *)(v28 + 8 * v15);
      if (!v14)
      {
        v15 = v8 + 3;
        if (v8 + 3 >= v27)
          goto LABEL_37;
        v14 = *(_QWORD *)(v28 + 8 * v15);
        if (!v14)
        {
          v15 = v8 + 4;
          if (v8 + 4 >= v27)
            goto LABEL_37;
          v14 = *(_QWORD *)(v28 + 8 * v15);
          if (!v14)
            break;
        }
      }
    }
LABEL_27:
    v5 = (v14 - 1) & v14;
    v12 = __clz(__rbit64(v14)) + (v15 << 6);
    v8 = v15;
LABEL_28:
    v17 = (uint64_t *)(*(_QWORD *)(a1 + 48) + 16 * v12);
    v19 = *v17;
    v18 = v17[1];
    sub_1CA0B6A98(*(_QWORD *)(a1 + 56) + 32 * v12, (uint64_t)v40);
    *(_QWORD *)&v39 = v19;
    *((_QWORD *)&v39 + 1) = v18;
    v37[2] = v39;
    v38[0] = v40[0];
    v38[1] = v40[1];
    *(_QWORD *)&v37[0] = v19;
    *((_QWORD *)&v37[0] + 1) = v18;
    swift_bridgeObjectRetain();
    swift_dynamicCast();
    sub_1CA0AFCC0(v38, v32);
    v33 = v29;
    v34 = v30;
    v35 = v31;
    sub_1CA0AFCC0(v32, v36);
    v29 = v33;
    v30 = v34;
    v31 = v35;
    sub_1CA0AFCC0(v36, v37);
    sub_1CA0AFCC0(v37, &v33);
    result = sub_1CA1F1000();
    v20 = -1 << *(_BYTE *)(v2 + 32);
    v21 = result & ~v20;
    v22 = v21 >> 6;
    if (((-1 << v21) & ~*(_QWORD *)(v6 + 8 * (v21 >> 6))) != 0)
    {
      v9 = __clz(__rbit64((-1 << v21) & ~*(_QWORD *)(v6 + 8 * (v21 >> 6)))) | v21 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v23 = 0;
      v24 = (unint64_t)(63 - v20) >> 6;
      do
      {
        if (++v22 == v24 && (v23 & 1) != 0)
        {
          __break(1u);
          goto LABEL_38;
        }
        v25 = v22 == v24;
        if (v22 == v24)
          v22 = 0;
        v23 |= v25;
        v26 = *(_QWORD *)(v6 + 8 * v22);
      }
      while (v26 == -1);
      v9 = __clz(__rbit64(~v26)) + (v22 << 6);
    }
    *(_QWORD *)(v6 + ((v9 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v9;
    v10 = *(_QWORD *)(v2 + 48) + 40 * v9;
    *(_OWORD *)v10 = v29;
    *(_OWORD *)(v10 + 16) = v30;
    *(_QWORD *)(v10 + 32) = v31;
    result = (uint64_t)sub_1CA0AFCC0(&v33, (_OWORD *)(*(_QWORD *)(v2 + 56) + 32 * v9));
    ++*(_QWORD *)(v2 + 16);
  }
  v16 = v8 + 5;
  if (v8 + 5 >= v27)
  {
LABEL_37:
    swift_release();
    sub_1CA0B6A14();
    return v2;
  }
  v14 = *(_QWORD *)(v28 + 8 * v16);
  if (v14)
  {
    v15 = v8 + 5;
    goto LABEL_27;
  }
  while (1)
  {
    v15 = v16 + 1;
    if (__OFADD__(v16, 1))
      break;
    if (v15 >= v27)
      goto LABEL_37;
    v14 = *(_QWORD *)(v28 + 8 * v15);
    ++v16;
    if (v14)
      goto LABEL_27;
  }
LABEL_39:
  __break(1u);
  return result;
}

uint64_t Array<A>.featureExtraction(definition:target:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  uint64_t v10;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  unsigned __int8 *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t result;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char *v30;
  uint64_t v31;
  char v32;
  uint64_t v33;
  void (*v34)(char *, unint64_t, uint64_t);
  uint64_t v35;
  char *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  char isUniquelyReferenced_nonNull_native;
  char v43;
  unint64_t v44;
  uint64_t v45;
  _BOOL8 v46;
  uint64_t v47;
  char v48;
  unint64_t v49;
  char v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  BOOL v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  int v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  char *v69;
  char *v70;
  uint64_t v71;
  uint64_t v72;
  char *v73;
  __int128 v74;
  __int128 v75;
  uint64_t v76;
  _OWORD v77[2];
  uint64_t v78;
  uint64_t v79;

  v65 = a7;
  v66 = a6;
  v64 = a4;
  v63 = a3;
  v61 = a2;
  v62 = a1;
  v12 = *(_QWORD *)(a9 - 8);
  v13 = *(_QWORD *)(v12 + 64);
  v14 = MEMORY[0x1E0C80A78](a1, a2);
  v16 = MEMORY[0x1E0C80A78](v14, v15);
  v18 = (char *)&v58 - v17;
  MEMORY[0x1E0C80A78](v16, v19);
  v21 = (char *)&v58 - v20;
  v60 = *v22;
  sub_1CA0B6A1C();
  if (sub_1CA1F1288())
  {
    v25 = Array<A>.featureExtraction(definition:target:)(v62, v23, v63, v64, v24, v66);
    result = swift_bridgeObjectRelease();
    if (!v10)
      return v25;
  }
  else
  {
    v69 = (char *)&v58 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
    v70 = v21;
    v72 = v12;
    v73 = v18;
    v71 = v13;
    v27 = swift_bridgeObjectRetain();
    if (MEMORY[0x1CAA4A2DC](v27, a9))
    {
      v68 = v10;
      v28 = 0;
      v59 = a10;
      v67 = MEMORY[0x1E0DEE9E0];
      v30 = v70;
      v29 = v71;
      v31 = v66;
      while (1)
      {
        v32 = sub_1CA1F0B80();
        sub_1CA1F0B20();
        if ((v32 & 1) != 0)
        {
          v33 = v72;
          v34 = *(void (**)(char *, unint64_t, uint64_t))(v72 + 16);
          v34(v30, a8+ ((*(unsigned __int8 *)(v33 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v33 + 80))+ *(_QWORD *)(v72 + 72) * v28, a9);
        }
        else
        {
          v56 = sub_1CA1F1090();
          if (v29 != 8)
            goto LABEL_36;
          *(_QWORD *)&v77[0] = v56;
          v57 = v72;
          v34 = *(void (**)(char *, unint64_t, uint64_t))(v72 + 16);
          v34(v30, (unint64_t)v77, a9);
          v33 = v57;
          swift_unknownObjectRelease();
        }
        v35 = v28 + 1;
        v36 = v73;
        if (__OFADD__(v28, 1))
          break;
        (*(void (**)(char *, char *, uint64_t))(v33 + 32))(v73, v30, a9);
        v34(v69, (unint64_t)v36, a9);
        if ((swift_dynamicCast() & 1) != 0)
        {
          v77[0] = v74;
          v77[1] = v75;
          v78 = v76;
          LOBYTE(v74) = v60;
          v37 = v68;
          v38 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, __int128 *, uint64_t, uint64_t, uint64_t, uint64_t))(v59 + 8))(v62, v61, v63, v64, &v74, v31, v65, a9, v59);
          if (v37)
          {
            sub_1CA0AB984((uint64_t)v77);
            (*(void (**)(char *, uint64_t))(v33 + 8))(v73, a9);
            swift_bridgeObjectRelease();
            return swift_bridgeObjectRelease();
          }
          v39 = v38;
          v68 = 0;
          if (v38)
          {
            v40 = a8;
            sub_1CA0AB948((uint64_t)v77, (uint64_t)&v74);
            v41 = v67;
            isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
            v79 = v41;
            v44 = sub_1CA0AA444((uint64_t)&v74);
            v45 = *(_QWORD *)(v41 + 16);
            v46 = (v43 & 1) == 0;
            v47 = v45 + v46;
            if (__OFADD__(v45, v46))
              goto LABEL_34;
            v48 = v43;
            if (*(_QWORD *)(v41 + 24) >= v47)
            {
              if ((isUniquelyReferenced_nonNull_native & 1) == 0)
                sub_1CA0EFEC8();
            }
            else
            {
              sub_1CA0EC4F4(v47, isUniquelyReferenced_nonNull_native);
              v49 = sub_1CA0AA444((uint64_t)&v74);
              if ((v48 & 1) != (v50 & 1))
                goto LABEL_37;
              v44 = v49;
            }
            a8 = v40;
            v67 = v79;
            if ((v48 & 1) != 0)
            {
              v51 = *(_QWORD *)(v79 + 56);
              swift_bridgeObjectRelease();
              *(_QWORD *)(v51 + 8 * v44) = v39;
            }
            else
            {
              *(_QWORD *)(v79 + 8 * (v44 >> 6) + 64) |= 1 << v44;
              sub_1CA0AB948((uint64_t)&v74, *(_QWORD *)(v67 + 48) + 40 * v44);
              v52 = v67;
              *(_QWORD *)(*(_QWORD *)(v67 + 56) + 8 * v44) = v39;
              v53 = *(_QWORD *)(v52 + 16);
              v54 = __OFADD__(v53, 1);
              v55 = v53 + 1;
              if (v54)
                goto LABEL_35;
              *(_QWORD *)(v52 + 16) = v55;
            }
            swift_bridgeObjectRelease();
            sub_1CA0AB984((uint64_t)&v74);
            sub_1CA0AB984((uint64_t)v77);
            (*(void (**)(char *, uint64_t))(v72 + 8))(v73, a9);
          }
          else
          {
            sub_1CA0AB984((uint64_t)v77);
            (*(void (**)(char *, uint64_t))(v33 + 8))(v73, a9);
          }
          v31 = v66;
        }
        else
        {
          v76 = 0;
          v74 = 0u;
          v75 = 0u;
          (*(void (**)(char *, uint64_t))(v33 + 8))(v36, a9);
          sub_1CA0B6AD4((uint64_t)&v74, &qword_1EF937698);
        }
        v30 = v70;
        v29 = v71;
        ++v28;
        if (v35 == MEMORY[0x1CAA4A2DC](a8, a9))
        {
          swift_bridgeObjectRelease();
          return v67;
        }
      }
      __break(1u);
LABEL_34:
      __break(1u);
LABEL_35:
      __break(1u);
LABEL_36:
      __break(1u);
LABEL_37:
      result = sub_1CA1F1360();
      __break(1u);
    }
    else
    {
      swift_bridgeObjectRelease();
      return MEMORY[0x1E0DEE9E0];
    }
  }
  return result;
}

id MAFeatureDefinition.graph.getter()
{
  uint64_t v0;

  return *(id *)(v0 + 16);
}

uint64_t MAFeatureDefinition.source.getter()
{
  return swift_retain();
}

uint64_t MAFeatureDefinition.targets.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t sub_1CA0C3384@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  uint64_t v3;
  uint64_t v5;
  uint64_t (*v6)(uint64_t);
  unint64_t v9;
  char v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t result;

  v5 = *(_QWORD *)(v3 + 40);
  v6 = *(uint64_t (**)(uint64_t))(v5 + 16);
  if (!v6)
  {
    v13 = 0;
    v12 = 0;
    v14 = 0;
    v15 = 0;
LABEL_8:
    result = 0;
    goto LABEL_9;
  }
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v9 = sub_1CA0AA474(a1, a2);
  if ((v10 & 1) == 0)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v13 = 0;
    v12 = 0;
    v14 = 0;
    v15 = 0;
    goto LABEL_7;
  }
  v11 = *(_QWORD *)(v5 + 56) + 48 * v9;
  v13 = *(_QWORD *)v11;
  v12 = *(_QWORD *)(v11 + 8);
  v14 = *(_QWORD *)(v11 + 16);
  v15 = *(unsigned __int8 *)(v11 + 24);
  v16 = *(_QWORD *)(v11 + 32);
  v17 = *(_QWORD *)(v11 + 40);
  swift_bridgeObjectRetain();
  swift_retain();
  sub_1CA0AFF28(v16);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (!v16)
  {
LABEL_7:
    v6 = 0;
    goto LABEL_8;
  }
  result = swift_allocObject();
  *(_QWORD *)(result + 16) = v16;
  *(_QWORD *)(result + 24) = v17;
  v6 = sub_1CA0C6F44;
LABEL_9:
  *a3 = v13;
  a3[1] = v12;
  a3[2] = v14;
  a3[3] = v15;
  a3[4] = v6;
  a3[5] = result;
  return result;
}

uint64_t sub_1CA0C34B0(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v9;
  char v10;
  _QWORD *v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t (*v16)(uint64_t);
  uint64_t v17;
  unint64_t v18;
  char v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v24;
  char v25;
  uint64_t v27;
  uint64_t v28;

  v4 = v3;
  v5 = v2;
  v6 = *(_QWORD *)(v2 + 40);
  if (*(_QWORD *)(v6 + 16))
  {
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v9 = sub_1CA0AA474(a1, a2);
    if ((v10 & 1) != 0)
    {
      v11 = (_QWORD *)(*(_QWORD *)(v6 + 56) + 48 * v9);
      v12 = (_QWORD *)v11[2];
      v14 = v11[4];
      v13 = v11[5];
      swift_bridgeObjectRetain();
      swift_retain();
      sub_1CA0AFF28(v14);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      if (v14)
      {
        v15 = swift_allocObject();
        *(_QWORD *)(v15 + 16) = v14;
        *(_QWORD *)(v15 + 24) = v13;
        v16 = sub_1CA0C6F44;
      }
      else
      {
        v16 = 0;
      }
      swift_bridgeObjectRetain();
      swift_retain();
      sub_1CA0AFF28((uint64_t)v16);
      sub_1CA0AAE34((uint64_t)v16);
      swift_bridgeObjectRelease();
      v17 = *(_QWORD *)(v5 + 48);
      if (*(_QWORD *)(v17 + 16))
      {
        swift_bridgeObjectRetain();
        v18 = sub_1CA0AA5E0((uint64_t)v12);
        if ((v19 & 1) != 0)
        {
          v14 = *(_QWORD *)(*(_QWORD *)(v17 + 56) + 8 * v18);
          swift_bridgeObjectRetain();
LABEL_20:
          swift_bridgeObjectRelease();
          swift_release_n();
          swift_bridgeObjectRelease();
          goto LABEL_21;
        }
        swift_release();
        swift_bridgeObjectRelease();
      }
      else
      {
        swift_release();
      }
      swift_bridgeObjectRetain();
      swift_retain();
      sub_1CA0AFF28((uint64_t)v16);
      swift_bridgeObjectRelease();
      v20 = swift_release();
      if (v14)
      {
        sub_1CA142204(*(_QWORD *)(v5 + 24), 0, v12, 1.0);
        if (v4)
        {
          sub_1CA0AAE34((uint64_t)v16);
          swift_release();
          swift_bridgeObjectRelease();
          sub_1CA0AAE34((uint64_t)v16);
          return v14;
        }
        v22 = v16(v21);
        if (v22)
        {
          v14 = sub_1CA0B57C8(v22);
          swift_bridgeObjectRelease();
          swift_bridgeObjectRetain();
          swift_retain();
          sub_1CA0AFF28((uint64_t)v16);
          sub_1CA0AAE34((uint64_t)v16);
          swift_bridgeObjectRelease();
          swift_retain();
          isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
          v27 = *(_QWORD *)(v5 + 48);
          *(_QWORD *)(v5 + 48) = 0x8000000000000000;
          sub_1CA0AE4E4(v14, (uint64_t)v12, isUniquelyReferenced_nonNull_native);
          *(_QWORD *)(v5 + 48) = v27;
          swift_release();
          swift_bridgeObjectRelease();
          sub_1CA0AAE34((uint64_t)v16);
          swift_release();
          swift_bridgeObjectRelease();
          swift_release();
LABEL_21:
          sub_1CA0AAE34((uint64_t)v16);
          return v14;
        }
        swift_release();
        v20 = sub_1CA0AAE34((uint64_t)v16);
      }
      v24 = (*(uint64_t (**)(uint64_t))(*v12 + 216))(v20);
      v14 = sub_1CA0B57C8(v24);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRetain();
      swift_retain();
      sub_1CA0AFF28((uint64_t)v16);
      sub_1CA0AAE34((uint64_t)v16);
      swift_bridgeObjectRelease();
      swift_retain();
      v25 = swift_isUniquelyReferenced_nonNull_native();
      v28 = *(_QWORD *)(v5 + 48);
      *(_QWORD *)(v5 + 48) = 0x8000000000000000;
      sub_1CA0AE4E4(v14, (uint64_t)v12, v25);
      *(_QWORD *)(v5 + 48) = v28;
      goto LABEL_20;
    }
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  return MEMORY[0x1E0DEE9D8];
}

uint64_t sub_1CA0C3854()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  BOOL v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t (*v12)(uint64_t);
  char isUniquelyReferenced_nonNull_native;
  uint64_t v14;
  char v15;
  unint64_t v16;
  uint64_t v17;
  _BOOL8 v18;
  uint64_t v19;
  char v20;
  unint64_t v21;
  char v22;
  uint64_t v23;
  uint64_t *v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t result;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  char v34;
  uint64_t v35;

  if (*(_QWORD *)(v0 + 56))
  {
    v1 = *(_QWORD **)(v0 + 56);
LABEL_32:
    swift_bridgeObjectRetain();
    return (uint64_t)v1;
  }
  if (!objc_msgSend(*(id *)(v0 + 16), sel_hasPendingRead))
    goto LABEL_37;
  v2 = *(_QWORD *)(*(_QWORD *)(v0 + 32) + 16);
  if (!v2)
  {
    v1 = (_QWORD *)MEMORY[0x1E0DEE9E0];
LABEL_31:
    *(_QWORD *)(v0 + 56) = v1;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    goto LABEL_32;
  }
  v30 = v0;
  v3 = swift_bridgeObjectRetain();
  v4 = 0;
  v1 = (_QWORD *)MEMORY[0x1E0DEE9E0];
  v5 = (_QWORD *)(v3 + 72);
  while (1)
  {
    v31 = v2;
    v7 = *(v5 - 5);
    v8 = *(v5 - 4);
    v34 = *((_BYTE *)v5 - 16);
    v10 = *(v5 - 1);
    v9 = *v5;
    v35 = v4;
    if (v10)
    {
      v11 = swift_allocObject();
      *(_QWORD *)(v11 + 16) = v10;
      *(_QWORD *)(v11 + 24) = v9;
      v12 = sub_1CA0C6F44;
    }
    else
    {
      v12 = 0;
    }
    swift_bridgeObjectRetain();
    swift_retain();
    sub_1CA0AFF28(v10);
    swift_bridgeObjectRetain();
    swift_retain();
    v33 = v10;
    sub_1CA0AFF28(v10);
    swift_bridgeObjectRetain();
    swift_retain();
    sub_1CA0AFF28((uint64_t)v12);
    v32 = (uint64_t)v12;
    sub_1CA0AAE34((uint64_t)v12);
    swift_release();
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    v14 = v7;
    v16 = sub_1CA0AA474(v7, v8);
    v17 = v1[2];
    v18 = (v15 & 1) == 0;
    v19 = v17 + v18;
    if (__OFADD__(v17, v18))
      break;
    v20 = v15;
    if (v1[3] >= v19)
    {
      if ((isUniquelyReferenced_nonNull_native & 1) != 0)
      {
        if ((v15 & 1) != 0)
          goto LABEL_18;
      }
      else
      {
        sub_1CA0F00A0();
        if ((v20 & 1) != 0)
          goto LABEL_18;
      }
    }
    else
    {
      sub_1CA0EC804(v19, isUniquelyReferenced_nonNull_native);
      v21 = sub_1CA0AA474(v14, v8);
      if ((v20 & 1) != (v22 & 1))
        goto LABEL_38;
      v16 = v21;
      if ((v20 & 1) != 0)
      {
LABEL_18:
        v23 = v35;
        *(_QWORD *)(v1[7] + 8 * v16) = v35;
        goto LABEL_22;
      }
    }
    v1[(v16 >> 6) + 8] |= 1 << v16;
    v24 = (uint64_t *)(v1[6] + 16 * v16);
    *v24 = v14;
    v24[1] = v8;
    v23 = v35;
    *(_QWORD *)(v1[7] + 8 * v16) = v35;
    v25 = v1[2];
    v6 = __OFADD__(v25, 1);
    v26 = v25 + 1;
    if (v6)
      goto LABEL_34;
    v1[2] = v26;
    swift_bridgeObjectRetain();
LABEL_22:
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if ((v34 & 1) != 0)
    {
      v27 = sub_1CA0C34B0(v14, v8);
      if (v27 >> 62)
      {
        swift_bridgeObjectRetain();
        v28 = sub_1CA1F1234();
        swift_release();
        swift_bridgeObjectRelease();
      }
      else
      {
        v28 = *(_QWORD *)((v27 & 0xFFFFFFFFFFFFF8) + 0x10);
        swift_release();
      }
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      sub_1CA0AAE34(v32);
      swift_release();
      swift_bridgeObjectRelease();
      sub_1CA0AAE34(v33);
      v6 = __OFADD__(v23, v28);
      v4 = v23 + v28;
      if (v6)
        goto LABEL_36;
    }
    else
    {
      swift_release();
      swift_bridgeObjectRelease();
      sub_1CA0AAE34(v32);
      swift_release();
      swift_bridgeObjectRelease();
      sub_1CA0AAE34(v10);
      v6 = __OFADD__(v23, 1);
      v4 = v23 + 1;
      if (v6)
        goto LABEL_35;
    }
    v5 += 6;
    v2 = v31 - 1;
    if (v31 == 1)
    {
      swift_bridgeObjectRelease();
      v0 = v30;
      goto LABEL_31;
    }
  }
  __break(1u);
LABEL_34:
  __break(1u);
LABEL_35:
  __break(1u);
LABEL_36:
  __break(1u);
LABEL_37:
  __break(1u);
LABEL_38:
  result = sub_1CA1F1360();
  __break(1u);
  return result;
}

id sub_1CA0C3C70()
{
  uint64_t v0;
  id result;
  uint64_t v2;
  uint64_t *v3;
  BOOL v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t (*v15)(uint64_t);

  if (*(_BYTE *)(v0 + 72) != 1)
    return *(id *)(v0 + 64);
  result = objc_msgSend(*(id *)(v0 + 16), sel_hasPendingRead);
  if (!(_DWORD)result)
    goto LABEL_23;
  v2 = *(_QWORD *)(*(_QWORD *)(v0 + 32) + 16);
  if (!v2)
  {
    result = 0;
LABEL_20:
    *(_QWORD *)(v0 + 64) = result;
    *(_BYTE *)(v0 + 72) = 0;
    return result;
  }
  v13 = v0;
  v14 = 0;
  v3 = (uint64_t *)(swift_bridgeObjectRetain() + 72);
  while (1)
  {
    v5 = *(v3 - 5);
    v6 = *(v3 - 4);
    v7 = *((unsigned __int8 *)v3 - 16);
    v8 = *(v3 - 1);
    v9 = *v3;
    if (v8)
    {
      v10 = swift_allocObject();
      *(_QWORD *)(v10 + 16) = v8;
      *(_QWORD *)(v10 + 24) = v9;
      v15 = sub_1CA0C6F44;
    }
    else
    {
      v15 = 0;
    }
    swift_bridgeObjectRetain();
    swift_retain();
    sub_1CA0AFF28(v8);
    if (!v7)
      break;
    swift_bridgeObjectRetain();
    swift_retain();
    sub_1CA0AFF28(v8);
    v11 = sub_1CA0C34B0(v5, v6);
    if (v11 >> 62)
    {
      swift_bridgeObjectRetain();
      v12 = sub_1CA1F1234();
      swift_release();
      swift_bridgeObjectRelease();
    }
    else
    {
      v12 = *(_QWORD *)((v11 & 0xFFFFFFFFFFFFF8) + 0x10);
      swift_release();
    }
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    sub_1CA0AAE34((uint64_t)v15);
    swift_release();
    swift_bridgeObjectRelease();
    result = (id)sub_1CA0AAE34(v8);
    v4 = __OFADD__(v14, v12);
    v14 += v12;
    if (v4)
      goto LABEL_22;
LABEL_6:
    v3 += 6;
    if (!--v2)
    {
      swift_bridgeObjectRelease();
      v0 = v13;
      result = v14;
      goto LABEL_20;
    }
  }
  swift_release();
  swift_bridgeObjectRelease();
  result = (id)sub_1CA0AAE34((uint64_t)v15);
  v4 = __OFADD__(v14++, 1);
  if (!v4)
    goto LABEL_6;
  __break(1u);
LABEL_22:
  __break(1u);
LABEL_23:
  __break(1u);
  return result;
}

uint64_t sub_1CA0C3EE0(uint64_t result)
{
  uint64_t v1;

  *(_QWORD *)(v1 + 64) = result;
  *(_BYTE *)(v1 + 72) = 0;
  return result;
}

_QWORD *(*sub_1CA0C3EEC(id *a1))(_QWORD *result)
{
  void *v1;

  a1[1] = v1;
  *a1 = sub_1CA0C3C70();
  return sub_1CA0C3F20;
}

_QWORD *sub_1CA0C3F20(_QWORD *result)
{
  uint64_t v1;

  v1 = result[1];
  *(_QWORD *)(v1 + 64) = *result;
  *(_BYTE *)(v1 + 72) = 0;
  return result;
}

uint64_t sub_1CA0C3F30()
{
  uint64_t v0;
  uint64_t v1;

  if (*(_QWORD *)(v0 + 80))
  {
    v1 = *(_QWORD *)(v0 + 80);
  }
  else
  {
    v1 = sub_1CA0C3F8C(v0);
    *(_QWORD *)(v0 + 80) = v1;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
  }
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t sub_1CA0C3F8C(uint64_t a1)
{
  uint64_t v1;
  int64_t v2;
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v12;

  v1 = *(_QWORD *)(a1 + 32);
  v2 = *(_QWORD *)(v1 + 16);
  v3 = MEMORY[0x1E0DEE9D8];
  if (v2)
  {
    v12 = MEMORY[0x1E0DEE9D8];
    swift_bridgeObjectRetain();
    sub_1CA0CD4EC(0, v2, 0);
    v3 = v12;
    v4 = (uint64_t *)(v1 + 40);
    do
    {
      v6 = *(v4 - 1);
      v5 = *v4;
      v7 = v4[3];
      swift_bridgeObjectRetain();
      swift_retain();
      if (v7)
      {
        sub_1CA0AFF28(v7);
        swift_bridgeObjectRetain();
        swift_retain();
        sub_1CA0AFF28(v7);
        sub_1CA0AAE34(v7);
      }
      else
      {
        sub_1CA0AFF28(0);
        swift_bridgeObjectRetain();
        swift_retain();
        sub_1CA0AFF28(0);
      }
      swift_bridgeObjectRelease();
      swift_release_n();
      sub_1CA0AAE34(v7);
      v9 = *(_QWORD *)(v12 + 16);
      v8 = *(_QWORD *)(v12 + 24);
      if (v9 >= v8 >> 1)
        sub_1CA0CD4EC(v8 > 1, v9 + 1, 1);
      v4 += 6;
      *(_QWORD *)(v12 + 16) = v9 + 1;
      v10 = v12 + 16 * v9;
      *(_QWORD *)(v10 + 32) = v6;
      *(_QWORD *)(v10 + 40) = v5;
      --v2;
    }
    while (v2);
    swift_bridgeObjectRelease();
  }
  return v3;
}

uint64_t sub_1CA0C4104(uint64_t a1)
{
  uint64_t v1;

  *(_QWORD *)(v1 + 80) = a1;
  return swift_bridgeObjectRelease();
}

uint64_t (*sub_1CA0C4114(uint64_t *a1))(_QWORD *a1)
{
  uint64_t v1;

  a1[1] = v1;
  *a1 = sub_1CA0C3F30();
  return sub_1CA0C4148;
}

uint64_t sub_1CA0C4148(_QWORD *a1)
{
  *(_QWORD *)(a1[1] + 80) = *a1;
  return swift_bridgeObjectRelease();
}

_QWORD *sub_1CA0C4158(unint64_t a1, void (*a2)(char *, double), uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  _QWORD *result;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char v18;
  uint64_t v19;
  uint64_t v20;
  void (*v21)(char *, uint64_t, uint64_t, uint64_t);
  _QWORD *v22;
  unint64_t v23;
  unint64_t v24;
  uint64_t v25;
  double v26;
  _QWORD **v27;
  double v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  _QWORD *v32;
  uint64_t v33;
  uint64_t (*v34)(uint64_t);
  uint64_t v35;
  void *v36;
  uint64_t v37;
  char v38;
  _QWORD *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  unint64_t v44;
  unint64_t v45;
  _QWORD *v46;
  uint64_t v47;
  unint64_t v48;
  void (*v49)(char *, double);
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  _QWORD v56[3];
  char v57;
  uint64_t (*v58)(uint64_t);
  uint64_t v59;
  id v60;
  _QWORD *v61;
  char v62;

  v50 = a3;
  v51 = a5;
  v49 = a2;
  v8 = sub_1CA1F0EB0();
  v54 = *(_QWORD *)(v8 - 8);
  v55 = v8;
  MEMORY[0x1E0C80A78](v8, v9);
  v11 = (char *)&v47 - v10;
  result = objc_msgSend(*(id *)(v5 + 16), sel_hasPendingRead);
  if (!(_DWORD)result)
    goto LABEL_39;
  v52 = v5;
  v13 = *(_QWORD *)(v5 + 32);
  v14 = *(_QWORD *)(v13 + 16);
  v62 = 0;
  v61 = (_QWORD *)MEMORY[0x1E0DEE9D8];
  v15 = swift_bridgeObjectRetain();
  v16 = MEMORY[0x1CAA4A2DC](v15, a4);
  v47 = v13;
  if (!v16)
  {
    v21 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(a4 - 8) + 56);
LABEL_17:
    v21(v11, 1, 1, a4);
    swift_bridgeObjectRelease();
    v25 = *(_QWORD *)(v13 + 16);
    if (v25)
    {
      v48 = a1;
      v26 = (double)v14;
      swift_bridgeObjectRetain();
      v27 = (_QWORD **)(v13 + 72);
      v28 = 0.0;
      while (1)
      {
        v29 = (uint64_t)*(v27 - 4);
        v55 = (uint64_t)*(v27 - 5);
        v30 = (uint64_t)*(v27 - 3);
        LODWORD(v54) = *((unsigned __int8 *)v27 - 16);
        v31 = (uint64_t)*(v27 - 1);
        v32 = *v27;
        if (v31)
        {
          v33 = swift_allocObject();
          *(_QWORD *)(v33 + 16) = v31;
          *(_QWORD *)(v33 + 24) = v32;
          v34 = sub_1CA0C6F44;
        }
        else
        {
          v34 = 0;
          v33 = 0;
        }
        swift_bridgeObjectRetain();
        swift_retain();
        v35 = sub_1CA0AFF28(v31);
        v36 = (void *)MEMORY[0x1CAA4AE94](v35);
        v56[0] = v55;
        v56[1] = v29;
        v56[2] = v30;
        v57 = v54;
        v58 = v34;
        v59 = v33;
        v37 = v53;
        sub_1CA0C4644(v52, (uint64_t)v56, v48, (uint64_t)&v61, a4, v51);
        v53 = v37;
        if (v37)
        {
          objc_autoreleasePoolPop(v36);
          swift_release();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          sub_1CA0AAE34((uint64_t)v34);
          swift_bridgeObjectRelease();
          return v32;
        }
        objc_autoreleasePoolPop(v36);
        v28 = v28 + 1.0;
        v49(&v62, v28 / v26);
        v38 = v62;
        swift_release();
        swift_bridgeObjectRelease();
        if ((v38 & 1) != 0)
          break;
        v27 += 6;
        sub_1CA0AAE34((uint64_t)v34);
        if (!--v25)
        {
          swift_bridgeObjectRelease();
          goto LABEL_26;
        }
      }
      swift_bridgeObjectRelease();
      sub_1CA0AAE34((uint64_t)v34);
      swift_bridgeObjectRelease();
      return (_QWORD *)MEMORY[0x1E0DEE9D8];
    }
    else
    {
LABEL_26:
      v39 = v61;
      v40 = v61[2];
      v41 = v52;
      if (v40)
      {
        swift_bridgeObjectRetain();
        v42 = 0;
        v32 = (_QWORD *)MEMORY[0x1E0DEE9D8];
        do
        {
          v43 = v39[v42 + 4];
          swift_bridgeObjectRetain();
          swift_retain();
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
            v32 = sub_1CA0E6024(0, v32[2] + 1, 1, v32);
          v45 = v32[2];
          v44 = v32[3];
          if (v45 >= v44 >> 1)
            v32 = sub_1CA0E6024((_QWORD *)(v44 > 1), v45 + 1, 1, v32);
          ++v42;
          v32[2] = v45 + 1;
          v46 = &v32[4 * v45];
          v46[4] = v41;
          v46[5] = v43;
          v46[6] = 0;
          v46[7] = 0;
        }
        while (v40 != v42);
        swift_bridgeObjectRelease_n();
      }
      else
      {
        swift_bridgeObjectRelease();
        return (_QWORD *)MEMORY[0x1E0DEE9D8];
      }
    }
    return v32;
  }
  v17 = 0;
  while (1)
  {
    v18 = sub_1CA1F0B80();
    sub_1CA1F0B20();
    if ((v18 & 1) == 0)
      break;
    v19 = *(_QWORD *)(a4 - 8);
    result = (_QWORD *)(*(uint64_t (**)(char *, unint64_t, uint64_t))(v19 + 16))(v11, a1+ ((*(unsigned __int8 *)(v19 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v19 + 80))+ *(_QWORD *)(v19 + 72) * v17, a4);
    v20 = v17 + 1;
    if (__OFADD__(v17, 1))
      goto LABEL_38;
LABEL_6:
    v21 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v19 + 56);
    v21(v11, 0, 1, a4);
    v22 = v61;
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      v22 = sub_1CA0E6130(0, v22[2] + 1, 1, v22);
    v24 = v22[2];
    v23 = v22[3];
    if (v24 >= v23 >> 1)
      v22 = sub_1CA0E6130((_QWORD *)(v23 > 1), v24 + 1, 1, v22);
    v22[2] = v24 + 1;
    v22[v24 + 4] = MEMORY[0x1E0DEE9D8];
    v61 = v22;
    (*(void (**)(char *, uint64_t))(v54 + 8))(v11, v55);
    ++v17;
    if (v20 == MEMORY[0x1CAA4A2DC](a1, a4))
    {
      v13 = v47;
      goto LABEL_17;
    }
  }
  result = (_QWORD *)sub_1CA1F1090();
  v19 = *(_QWORD *)(a4 - 8);
  if (*(_QWORD *)(v19 + 64) != 8)
    goto LABEL_40;
  v60 = result;
  (*(void (**)(char *, id *, uint64_t))(v19 + 16))(v11, &v60, a4);
  result = (_QWORD *)swift_unknownObjectRelease();
  v20 = v17 + 1;
  if (!__OFADD__(v17, 1))
    goto LABEL_6;
LABEL_38:
  __break(1u);
LABEL_39:
  __break(1u);
LABEL_40:
  __break(1u);
  return result;
}

uint64_t sub_1CA0C4644(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t TupleTypeMetadata2;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t *v23;
  char *v24;
  uint64_t result;
  unint64_t v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v38;
  char *v39;
  uint64_t *v40;
  uint64_t v41;
  int v42;
  char *v43;
  _QWORD *v44;
  unint64_t v45;
  char v46;
  unint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  unint64_t v52;
  unint64_t v53;
  uint64_t v54;
  uint64_t v55;
  unint64_t v56;
  id v57;
  char v58;
  unint64_t v59;
  id v60;
  char v61;
  id v62;
  char v63;
  unint64_t v64;
  uint64_t v65;
  unint64_t v66;
  unint64_t v67;
  unint64_t v68;
  unint64_t v69;
  unint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  char v75;
  uint64_t v76;
  uint64_t v77;
  id v78;
  unint64_t v79;
  unint64_t v80;
  char v81;
  unint64_t v82;
  uint64_t v83;
  void *v84;
  void *v85;
  id v86;
  void *v87;
  char v88;
  unint64_t v89;
  char v90;
  unint64_t v91;
  unint64_t v92;
  uint64_t v93;
  id v94;
  unint64_t v95;
  unint64_t v96;
  id v97;
  uint64_t v98;
  uint64_t v99;
  unint64_t v100;
  id v101;
  char v102;
  id v103;
  unint64_t v104;
  id v105;
  char v106;
  id v107;
  char v108;
  unint64_t v109;
  id v110;
  void *v111;
  id v112;
  uint64_t v113;
  unint64_t v114;
  unint64_t v115;
  char v116;
  unint64_t v117;
  unint64_t v118;
  char v119;
  uint64_t v120;
  _QWORD v121[2];
  uint64_t v122;
  uint64_t v123;
  unint64_t v124;
  uint64_t v125;
  unint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t *v130;
  uint64_t v131;
  int v132;
  id *v133;
  uint64_t v134;
  unint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  char *v139;
  uint64_t v140;
  uint64_t v141;
  unint64_t v142;
  char *v143;
  uint64_t v144;
  unint64_t v145;
  char *v146;
  _QWORD v147[11];

  v134 = a6;
  v125 = a4;
  v142 = a3;
  v8 = *(_QWORD *)a2;
  v9 = *(_QWORD *)(a2 + 8);
  v135 = *(_QWORD *)(a2 + 16);
  v132 = *(unsigned __int8 *)(a2 + 24);
  v133 = *(id **)(a2 + 32);
  v129 = *(_QWORD *)(a2 + 40);
  v140 = *(_QWORD *)(a5 - 8);
  v10 = MEMORY[0x1E0C80A78](a1, a2);
  v143 = (char *)v121 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v10, v12);
  v139 = (char *)v121 - v13;
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  v15 = sub_1CA1F0EB0();
  v16 = *(_QWORD *)(v15 - 8);
  v18 = MEMORY[0x1E0C80A78](v15, v17);
  v20 = (char *)v121 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v18, v21);
  v23 = (_QWORD *)((char *)v121 - v22);
  v137 = a1;
  v138 = v8;
  v136 = v9;
  v24 = v146;
  result = sub_1CA0C34B0(v8, v9);
  if (v24)
    return result;
  v141 = result;
  v130 = v23;
  v145 = v16;
  v146 = v20;
  v144 = v15;
  v131 = TupleTypeMetadata2;
  LOBYTE(v147[0]) = v132;
  v123 = a5;
  v120 = a5;
  v26 = v142;
  v27 = Array<A>.featureExtraction(definition:target:)(v137, v138, v136, v135, (uint64_t)v147, (uint64_t)v133, v129, v142, v120, v134);
  v28 = v26;
  v121[1] = 0;
  v29 = v125;
  v30 = v144;
  v31 = v145;
  v32 = (uint64_t)v146;
  v33 = v141;
  v129 = v27;
  if (!v27)
    return swift_bridgeObjectRelease();
  v147[5] = v28;
  v34 = v123;
  v35 = sub_1CA1F0BE0();
  MEMORY[0x1CAA4BB30](MEMORY[0x1E0DEAF38], v35);
  sub_1CA1F0A84();
  v147[10] = v147[0];
  sub_1CA1F1228();
  sub_1CA1F1204();
  v36 = *(_QWORD *)v29;
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  *(_QWORD *)v29 = v36;
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
    goto LABEL_175;
  while (1)
  {
    *(_QWORD *)v29 = v36;
    v128 = sub_1CA1F121C();
    v38 = v33 & 0xFFFFFFFFFFFFFF8;
    v137 = v33 & 0xFFFFFFFFFFFFFF8;
    if (v33 < 0)
      v38 = v33;
    v121[0] = v38;
    v124 = v33 & 0xC000000000000001;
    v133 = (id *)(v33 + 32);
    v126 = (unint64_t)v33 >> 62;
    v39 = v143;
LABEL_7:
    sub_1CA1F1210();
    v40 = v130;
    (*(void (**)(uint64_t *, uint64_t, uint64_t))(v31 + 32))(v130, v32, v30);
    v41 = v131;
    v42 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*(_QWORD *)(v131 - 8) + 48))(v40, 1, v131);
    v36 = (uint64_t)v139;
    v32 = v140;
    if (v42 == 1)
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      return swift_bridgeObjectRelease();
    }
    v43 = (char *)v40 + *(int *)(v41 + 48);
    v33 = *v40;
    (*(void (**)(char *, char *, uint64_t))(v140 + 32))(v139, v43, v34);
    if (v33 < 0)
      goto LABEL_169;
    if ((unint64_t)v33 >= *(_QWORD *)(*(_QWORD *)v29 + 16))
    {
LABEL_170:
      __break(1u);
      goto LABEL_171;
    }
    v44 = *(_QWORD **)(*(_QWORD *)v29 + 8 * v33 + 32);
    (*(void (**)(char *, uint64_t, uint64_t))(v32 + 16))(v39, v36, v34);
    swift_bridgeObjectRetain();
    swift_dynamicCast();
    v36 = v129;
    if (!*(_QWORD *)(v129 + 16) || (v45 = sub_1CA0AA444((uint64_t)v147), (v46 & 1) == 0))
    {
      sub_1CA0AB984((uint64_t)v147);
      if ((v132 & 1) != 0)
      {
        v134 = v33;
        v32 = (uint64_t)v146;
        v33 = v141;
        if (v126)
        {
          swift_bridgeObjectRetain();
          v36 = sub_1CA1F1234();
          if (v36)
          {
LABEL_46:
            if (v36 >= 1)
            {
              if (v124)
              {
                v65 = 0;
                do
                {
                  MEMORY[0x1CAA4A7A4](v65, v33);
                  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
                    v44 = sub_1CA0E5AB8(0, v44[2] + 1, 1, v44);
                  v67 = v44[2];
                  v66 = v44[3];
                  if (v67 >= v66 >> 1)
                    v44 = sub_1CA0E5AB8((_QWORD *)(v66 > 1), v67 + 1, 1, v44);
                  ++v65;
                  v44[2] = v67 + 1;
                  v44[v67 + 4] = 0;
                  swift_unknownObjectRelease();
                  v31 = v145;
                  v32 = (uint64_t)v146;
                }
                while (v36 != v65);
                swift_bridgeObjectRelease();
                v39 = v143;
                v30 = v144;
              }
              else
              {
                v77 = 0;
                do
                {
                  v78 = *(id *)(v33 + 8 * v77 + 32);
                  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
                    v44 = sub_1CA0E5AB8(0, v44[2] + 1, 1, v44);
                  v80 = v44[2];
                  v79 = v44[3];
                  if (v80 >= v79 >> 1)
                    v44 = sub_1CA0E5AB8((_QWORD *)(v79 > 1), v80 + 1, 1, v44);
                  ++v77;
                  v44[2] = v80 + 1;
                  v44[v80 + 4] = 0;

                  v30 = v144;
                  v31 = v145;
                }
                while (v36 != v77);
                swift_bridgeObjectRelease();
                v39 = v143;
                v32 = (uint64_t)v146;
              }
              goto LABEL_156;
            }
            goto LABEL_172;
          }
        }
        else
        {
          v36 = *(_QWORD *)(v137 + 16);
          swift_bridgeObjectRetain();
          if (v36)
            goto LABEL_46;
        }
        swift_bridgeObjectRelease();
        goto LABEL_156;
      }
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        v44 = sub_1CA0E5AB8(0, v44[2] + 1, 1, v44);
LABEL_57:
      v69 = v44[2];
      v68 = v44[3];
      if (v69 >= v68 >> 1)
        v44 = sub_1CA0E5AB8((_QWORD *)(v68 > 1), v69 + 1, 1, v44);
      v44[2] = v69 + 1;
      v44[v69 + 4] = 0;
LABEL_60:
      v32 = (uint64_t)v146;
      goto LABEL_157;
    }
    v134 = v33;
    v33 = *(_QWORD *)(*(_QWORD *)(v36 + 56) + 8 * v45);
    swift_bridgeObjectRetain();
    sub_1CA0AB984((uint64_t)v147);
    if ((v132 & 1) == 0)
      break;
    if (v126)
    {
      swift_bridgeObjectRetain();
      v29 = sub_1CA1F1234();
      v32 = (uint64_t)v146;
      if (!v29)
      {
LABEL_155:
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        v34 = v123;
        v29 = v125;
        goto LABEL_156;
      }
    }
    else
    {
      v29 = *(_QWORD *)(v137 + 16);
      swift_bridgeObjectRetain();
      v32 = (uint64_t)v146;
      if (!v29)
        goto LABEL_155;
    }
    v47 = sub_1CA0B6A1C();
    v142 = v33 & 0xC000000000000001;
    v48 = v33 & 0xFFFFFFFFFFFFFF8;
    if (v33 < 0)
      v48 = v33;
    v138 = v48;
    v135 = v47;
    v136 = v33 + 56;
    v127 = v29;
    if (v124)
    {
      v30 = 0;
      while (1)
      {
        v50 = MEMORY[0x1CAA4A7A4](v30, v141);
        if (__OFADD__(v30++, 1))
        {
          __break(1u);
LABEL_168:
          __break(1u);
LABEL_169:
          __break(1u);
          goto LABEL_170;
        }
        v31 = v50;
        if (v142)
        {
          if ((sub_1CA1F0FDC() & 1) == 0)
            goto LABEL_38;
        }
        else
        {
          if (!*(_QWORD *)(v33 + 16))
            goto LABEL_38;
          v54 = sub_1CA1F0E5C();
          v55 = -1 << *(_BYTE *)(v33 + 32);
          v56 = v54 & ~v55;
          if (((*(_QWORD *)(v136 + ((v56 >> 3) & 0xFFFFFFFFFFFFF8)) >> v56) & 1) == 0)
          {
LABEL_37:
            v29 = v127;
LABEL_38:
            if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
              v44 = sub_1CA0E5AB8(0, v44[2] + 1, 1, v44);
            v39 = v143;
            v53 = v44[2];
            v64 = v44[3];
            v36 = v53 + 1;
            if (v53 >= v64 >> 1)
              v44 = sub_1CA0E5AB8((_QWORD *)(v64 > 1), v53 + 1, 1, v44);
            v49 = 0;
            goto LABEL_20;
          }
          v57 = *(id *)(*(_QWORD *)(v33 + 48) + 8 * v56);
          v58 = sub_1CA1F0E68();

          if ((v58 & 1) != 0)
          {
            v29 = v127;
          }
          else
          {
            v34 = ~v55;
            v59 = (v56 + 1) & ~v55;
            if (((*(_QWORD *)(v136 + ((v59 >> 3) & 0xFFFFFFFFFFFFF8)) >> v59) & 1) == 0)
              goto LABEL_37;
            v60 = *(id *)(*(_QWORD *)(v33 + 48) + 8 * v59);
            v61 = sub_1CA1F0E68();

            v29 = v127;
            if ((v61 & 1) == 0)
            {
              do
              {
                v59 = (v59 + 1) & v34;
                if (((*(_QWORD *)(v136 + ((v59 >> 3) & 0xFFFFFFFFFFFFF8)) >> v59) & 1) == 0)
                  goto LABEL_38;
                v62 = *(id *)(*(_QWORD *)(v33 + 48) + 8 * v59);
                v63 = sub_1CA1F0E68();

              }
              while ((v63 & 1) == 0);
            }
          }
        }
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
          v44 = sub_1CA0E5AB8(0, v44[2] + 1, 1, v44);
        v39 = v143;
        v53 = v44[2];
        v52 = v44[3];
        v36 = v53 + 1;
        if (v53 >= v52 >> 1)
          v44 = sub_1CA0E5AB8((_QWORD *)(v52 > 1), v53 + 1, 1, v44);
        v49 = 1;
LABEL_20:
        v44[2] = v36;
        v44[v53 + 4] = v49;
        swift_unknownObjectRelease();
        v32 = (uint64_t)v146;
        if (v30 == v29)
        {
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          v34 = v123;
          v29 = v125;
          v30 = v144;
          goto LABEL_115;
        }
      }
    }
    v31 = 0;
    do
    {
      if (v31 >= *(_QWORD *)(v137 + 16))
        goto LABEL_168;
      v34 = (uint64_t)v133[v31];
      if (v142)
      {
        v94 = (id)v34;
        if ((sub_1CA1F0FDC() & 1) != 0)
          goto LABEL_94;
      }
      else if (*(_QWORD *)(v33 + 16))
      {
        v97 = (id)v34;
        v98 = sub_1CA1F0E5C();
        v99 = -1 << *(_BYTE *)(v33 + 32);
        v100 = v98 & ~v99;
        if (((*(_QWORD *)(v136 + ((v100 >> 3) & 0xFFFFFFFFFFFFF8)) >> v100) & 1) == 0)
          goto LABEL_109;
        v101 = *(id *)(*(_QWORD *)(v33 + 48) + 8 * v100);
        v102 = sub_1CA1F0E68();

        if ((v102 & 1) != 0)
        {
          v29 = v127;
LABEL_94:
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
            v44 = sub_1CA0E5AB8(0, v44[2] + 1, 1, v44);
          v39 = v143;
          v30 = v144;
          v96 = v44[2];
          v95 = v44[3];
          v36 = v96 + 1;
          if (v96 >= v95 >> 1)
            v44 = sub_1CA0E5AB8((_QWORD *)(v95 > 1), v96 + 1, 1, v44);
          v93 = 1;
          goto LABEL_90;
        }
        v122 = ~v99;
        v104 = (v100 + 1) & ~v99;
        if (((*(_QWORD *)(v136 + ((v104 >> 3) & 0xFFFFFFFFFFFFF8)) >> v104) & 1) != 0)
        {
          v105 = *(id *)(*(_QWORD *)(v33 + 48) + 8 * v104);
          v106 = sub_1CA1F0E68();

          v29 = v127;
          if ((v106 & 1) != 0)
            goto LABEL_94;
          while (1)
          {
            v104 = (v104 + 1) & v122;
            if (((*(_QWORD *)(v136 + ((v104 >> 3) & 0xFFFFFFFFFFFFF8)) >> v104) & 1) == 0)
              break;
            v107 = *(id *)(*(_QWORD *)(v33 + 48) + 8 * v104);
            v108 = sub_1CA1F0E68();

            if ((v108 & 1) != 0)
              goto LABEL_94;
          }
        }
        else
        {
LABEL_109:
          v29 = v127;
        }
      }
      else
      {
        v103 = (id)v34;
      }
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        v44 = sub_1CA0E5AB8(0, v44[2] + 1, 1, v44);
      v39 = v143;
      v30 = v144;
      v96 = v44[2];
      v109 = v44[3];
      v36 = v96 + 1;
      if (v96 >= v109 >> 1)
        v44 = sub_1CA0E5AB8((_QWORD *)(v109 > 1), v96 + 1, 1, v44);
      v93 = 0;
LABEL_90:
      ++v31;
      v44[2] = v36;
      v44[v96 + 4] = v93;

      v32 = (uint64_t)v146;
    }
    while (v31 != v29);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v34 = v123;
    v29 = v125;
LABEL_115:
    v31 = v145;
LABEL_156:
    v33 = v134;
LABEL_157:
    v36 = *(_QWORD *)v29;
    swift_bridgeObjectRetain();
    v119 = swift_isUniquelyReferenced_nonNull_native();
    *(_QWORD *)v29 = v36;
    if ((v119 & 1) == 0)
    {
      v36 = (uint64_t)sub_1CA0B60A8((_QWORD *)v36);
      *(_QWORD *)v29 = v36;
    }
    if (v33 < *(_QWORD *)(v36 + 16))
    {
      *(_QWORD *)(v36 + 8 * v33 + 32) = v44;
      swift_bridgeObjectRelease();
      (*(void (**)(char *, uint64_t))(v140 + 8))(v139, v34);
      swift_bridgeObjectRelease();
      goto LABEL_7;
    }
LABEL_171:
    __break(1u);
LABEL_172:
    __break(1u);
LABEL_173:
    __break(1u);
LABEL_174:
    __break(1u);
LABEL_175:
    v36 = (uint64_t)sub_1CA0B60A8((_QWORD *)v36);
  }
  v70 = v33 & 0xC000000000000001;
  if ((v33 & 0xC000000000000001) == 0)
  {
    v81 = *(_BYTE *)(v33 + 32);
    v36 = 1 << v81;
    v82 = *(_QWORD *)(v33 + 56);
    if (v82)
    {
      v83 = 0;
    }
    else
    {
      if ((v81 & 0x3Fu) < 7)
      {
LABEL_141:
        v72 = *(unsigned int *)(v33 + 36);
        goto LABEL_142;
      }
      v82 = *(_QWORD *)(v33 + 64);
      if (v82)
      {
        v83 = 1;
      }
      else
      {
        v113 = 0;
        v114 = (unint64_t)(v36 + 63) >> 6;
        if (v114 <= 2)
          v114 = 2;
        v115 = v114 - 2;
        do
        {
          if (v115 == v113)
            goto LABEL_141;
          v82 = *(_QWORD *)(v33 + 72 + 8 * v113++);
        }
        while (!v82);
        v83 = v113 + 1;
      }
    }
    v76 = __clz(__rbit64(v82)) + (v83 << 6);
    v72 = *(unsigned int *)(v33 + 36);
    if (v76 != v36)
      goto LABEL_75;
LABEL_142:
    sub_1CA0C7548(v36, v72, v70 != 0);
    swift_bridgeObjectRelease();
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      v44 = sub_1CA0E5AB8(0, v44[2] + 1, 1, v44);
    v34 = v123;
    v29 = v125;
    v39 = v143;
    v30 = v144;
    v31 = v145;
    v33 = v134;
    goto LABEL_57;
  }
  v36 = sub_1CA1F0F58();
  v72 = v71;
  v73 = sub_1CA1F0FE8();
  v75 = MEMORY[0x1CAA4A684](v36, v72, v73, v74);
  swift_bridgeObjectRelease();
  v76 = v36;
  if ((v75 & 1) != 0)
    goto LABEL_142;
LABEL_75:
  v32 = v70 != 0;
  sub_1CA14F840(v76, v72, v70 != 0, v33);
  v85 = v84;
  sub_1CA0C7548(v76, v72, v70 != 0);
  swift_bridgeObjectRelease();
  if (!v126)
  {
    v30 = *(_QWORD *)(v137 + 16);
    v34 = v123;
    v29 = v125;
    v31 = v145;
    v33 = v141;
    if (v30)
      goto LABEL_77;
LABEL_147:
    v116 = swift_isUniquelyReferenced_nonNull_native();
    v30 = v144;
    v33 = v134;
    if ((v116 & 1) == 0)
      v44 = sub_1CA0E5AB8(0, v44[2] + 1, 1, v44);
    v118 = v44[2];
    v117 = v44[3];
    if (v118 >= v117 >> 1)
      v44 = sub_1CA0E5AB8((_QWORD *)(v117 > 1), v118 + 1, 1, v44);
    v44[2] = v118 + 1;
    v44[v118 + 4] = 0;

    v39 = v143;
    goto LABEL_60;
  }
  v33 = v141;
  swift_bridgeObjectRetain();
  v30 = sub_1CA1F1234();
  swift_bridgeObjectRelease();
  v34 = v123;
  v29 = v125;
  v31 = v145;
  if (!v30)
    goto LABEL_147;
LABEL_77:
  if (v124)
  {
    v86 = (id)MEMORY[0x1CAA4A7A4](0, v33);
  }
  else
  {
    if (!*(_QWORD *)(v137 + 16))
      goto LABEL_174;
    v86 = *v133;
  }
  v87 = v86;
  v36 = sub_1CA0B6A1C();
  v88 = sub_1CA1F0E68();

  if ((v88 & 1) != 0)
  {
    v31 = 0;
LABEL_82:
    v89 = v31 + 1;
    if (__OFADD__(v31, 1))
      goto LABEL_178;
    v90 = swift_isUniquelyReferenced_nonNull_native();
    v34 = v123;
    v29 = v125;
    v31 = v145;
    v33 = v134;
    if ((v90 & 1) == 0)
      v44 = sub_1CA0E5AB8(0, v44[2] + 1, 1, v44);
    v92 = v44[2];
    v91 = v44[3];
    if (v92 >= v91 >> 1)
      v44 = sub_1CA0E5AB8((_QWORD *)(v91 > 1), v92 + 1, 1, v44);
    v44[2] = v92 + 1;
    v44[v92 + 4] = v89;

    v39 = v143;
    v30 = v144;
    goto LABEL_60;
  }
  if (v30 == 1)
  {
LABEL_146:
    v31 = v145;
    goto LABEL_147;
  }
  if (v124)
  {
    v110 = (id)MEMORY[0x1CAA4A7A4](1, v33);
  }
  else
  {
    if (*(_QWORD *)(v137 + 16) < 2uLL)
      goto LABEL_179;
    v110 = *(id *)(v33 + 40);
  }
  v111 = v110;
  v32 = sub_1CA1F0E68();

  if ((v32 & 1) != 0)
  {
    v31 = 1;
    goto LABEL_82;
  }
  v33 = 1;
  while (2)
  {
    v31 = v33 + 1;
    if (__OFADD__(v33, 1))
      goto LABEL_173;
    if (v31 == v30)
    {
      v34 = v123;
      v29 = v125;
      goto LABEL_146;
    }
    if (v124)
    {
      v112 = (id)MEMORY[0x1CAA4A7A4](v33 + 1, v141);
LABEL_128:
      v34 = (uint64_t)v112;
      v32 = sub_1CA1F0E68();

      ++v33;
      if ((v32 & 1) != 0)
        goto LABEL_82;
      continue;
    }
    break;
  }
  if ((v31 & 0x8000000000000000) == 0)
  {
    if (v31 >= *(_QWORD *)(v137 + 16))
      goto LABEL_177;
    v112 = v133[v31];
    goto LABEL_128;
  }
  __break(1u);
LABEL_177:
  __break(1u);
LABEL_178:
  __break(1u);
LABEL_179:
  __break(1u);
  result = swift_unexpectedError();
  __break(1u);
  return result;
}

id sub_1CA0C5768(unint64_t a1)
{
  uint64_t v1;
  id v3;
  id result;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  char v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD v13[3];
  char v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;

  v3 = *(id *)(a1 + 16);
  result = sub_1CA0C3C70();
  if (v3 == result)
  {
    result = (id)MEMORY[0x1E0DEE9D8];
    v17 = 0;
    v18 = MEMORY[0x1E0DEE9D8];
    v5 = *(_QWORD *)(v1 + 32);
    v6 = *(_QWORD *)(v5 + 16);
    if (v6)
    {
      swift_bridgeObjectRetain();
      v7 = (_QWORD *)(v5 + 72);
      do
      {
        v8 = *(v7 - 4);
        v9 = *(v7 - 3);
        v10 = *((_BYTE *)v7 - 16);
        v11 = *(v7 - 1);
        v12 = *v7;
        v13[0] = *(v7 - 5);
        v13[1] = v8;
        v13[2] = v9;
        v14 = v10;
        v15 = v11;
        v16 = v12;
        swift_bridgeObjectRetain();
        swift_retain();
        sub_1CA0AFF28(v11);
        sub_1CA0C5870((uint64_t)v13, v1, a1, &v17, &v18);
        swift_release();
        swift_bridgeObjectRelease();
        sub_1CA0AAE34(v11);
        v7 += 6;
        --v6;
      }
      while (v6);
      swift_bridgeObjectRelease();
      return (id)v18;
    }
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t sub_1CA0C5870(uint64_t a1, uint64_t a2, unint64_t a3, unint64_t *a4, unint64_t *a5)
{
  void *v5;
  void *v6;
  unint64_t v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  int64_t v15;
  uint64_t result;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  id v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  id v24;
  _QWORD *v25;
  unint64_t v26;
  uint64_t v27;
  unint64_t *v28;
  char v29;
  unint64_t v30;
  unint64_t v31;
  _QWORD *v32;
  _QWORD *v33;
  unint64_t *v34;
  char v35;
  unint64_t v36;
  unint64_t v37;
  _QWORD *v38;
  unint64_t *v39;
  char v40;
  unint64_t v41;
  _QWORD *v42;
  unint64_t v43;
  uint64_t v44;
  void *v45;
  id v46;
  _QWORD *v47;
  void *v48;
  id v49;
  id v50;
  void *v51;
  _QWORD *v52;
  unint64_t *v53;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v55;
  unint64_t v56;
  unint64_t v57;
  uint64_t v58;
  unint64_t *v59;
  char v60;
  unint64_t v61;
  unint64_t v62;
  _QWORD *v63;
  void *v64;
  uint64_t (*v65)(uint64_t);
  uint64_t v66;
  unint64_t v67;
  _QWORD *v69;
  __int128 v70;
  __int128 v71;
  uint64_t v72;
  unint64_t v73;
  uint64_t v74;
  unint64_t *v75;

  v6 = v5;
  v75 = a5;
  v8 = *(_QWORD *)a1;
  v9 = *(_QWORD *)(a1 + 8);
  v10 = *(unsigned __int8 *)(a1 + 24);
  v11 = *(_QWORD *)(a1 + 32);
  v12 = *(_QWORD *)(a1 + 40);
  if (v11)
  {
    v13 = swift_allocObject();
    *(_QWORD *)(v13 + 16) = v11;
    *(_QWORD *)(v13 + 24) = v12;
    v65 = sub_1CA0C6F44;
  }
  else
  {
    v65 = 0;
  }
  swift_bridgeObjectRetain();
  swift_retain();
  sub_1CA0AFF28(v11);
  v14 = sub_1CA0C34B0(v8, v9);
  v15 = v9;
  if (v5)
  {

    swift_release();
    swift_bridgeObjectRelease();
    return sub_1CA0AAE34((uint64_t)v65);
  }
  v17 = v14;
  if (!v10)
  {
    v43 = *a4;
    if ((*a4 & 0x8000000000000000) != 0)
    {
      __break(1u);
    }
    else if (v43 < *(_QWORD *)(a3 + 16))
    {
      v44 = *(_QWORD *)(a3 + 8 * v43 + 32);
      v15 = v44 - 1;
      if (!__OFSUB__(v44, 1))
      {
        if (v15 < 0)
          goto LABEL_77;
        if (!(v14 >> 62))
        {
          v45 = *(void **)((v14 & 0xFFFFFFFFFFFFF8) + 0x10);
          if (v15 < (uint64_t)v45)
            goto LABEL_51;
          goto LABEL_77;
        }
LABEL_76:
        swift_bridgeObjectRetain();
        v45 = (void *)sub_1CA1F1234();
        swift_bridgeObjectRelease();
        if (v15 < (uint64_t)v45)
        {
LABEL_51:
          if ((v17 & 0xC000000000000001) != 0)
          {
            v46 = (id)MEMORY[0x1CAA4A7A4](v15, v17);
          }
          else
          {
            if ((unint64_t)v15 >= *(_QWORD *)((v17 & 0xFFFFFFFFFFFFF8) + 0x10))
            {
              __break(1u);
              goto LABEL_87;
            }
            v46 = *(id *)(v17 + 8 * v15 + 32);
          }
          v45 = v46;
          swift_bridgeObjectRelease();
          v72 = (uint64_t)objc_msgSend(v45, sel_identifier);
          v6 = (void *)sub_1CA1F12AC();
          v15 = (int64_t)v47;
          v48 = (void *)sub_1CA1F0A00();
          v49 = objc_msgSend(v45, sel_propertyForKey_, v48);

          if (v49)
          {
            sub_1CA1F0F04();
            swift_unknownObjectRelease();
          }
          else
          {
            v70 = 0u;
            v71 = 0u;
          }
          sub_1CA0C74BC((uint64_t)&v70, (uint64_t)&v72);
          if (v74)
          {
            if ((swift_dynamicCast() & 1) != 0)
            {
              swift_bridgeObjectRelease();
              goto LABEL_63;
            }
          }
          else
          {
            sub_1CA0B6AD4((uint64_t)&v72, &qword_1ED8528F8);
          }
          v50 = objc_msgSend(v45, sel_label, v64);
          if (!v50)
            goto LABEL_64;
          v51 = v50;
          swift_bridgeObjectRelease();
          sub_1CA1F0A0C();

LABEL_63:
          v6 = (void *)sub_1CA1F0A24();
          v15 = (int64_t)v52;
          swift_bridgeObjectRelease();
LABEL_64:
          v53 = v75;
          v8 = *v75;
          isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
          *v53 = v8;
          if ((isUniquelyReferenced_nonNull_native & 1) != 0)
          {
LABEL_65:
            v56 = *(_QWORD *)(v8 + 16);
            v55 = *(_QWORD *)(v8 + 24);
            if (v56 >= v55 >> 1)
            {
              v8 = (unint64_t)sub_1CA0E5DF8((_QWORD *)(v55 > 1), v56 + 1, 1, (_QWORD *)v8);
              *v75 = v8;
            }
            *(_QWORD *)(v8 + 16) = v56 + 1;
            v57 = v8 + 16 * v56;
            *(_QWORD *)(v57 + 32) = v6;
            *(_QWORD *)(v57 + 40) = v15;
            swift_release();
            swift_bridgeObjectRelease();

            v58 = (uint64_t)v65;
            goto LABEL_81;
          }
LABEL_87:
          v8 = (unint64_t)sub_1CA0E5DF8(0, *(_QWORD *)(v8 + 16) + 1, 1, (_QWORD *)v8);
          *v75 = v8;
          goto LABEL_65;
        }
LABEL_77:
        swift_bridgeObjectRelease();
        v59 = v75;
        v15 = *v75;
        v60 = swift_isUniquelyReferenced_nonNull_native();
        *v59 = v15;
        if ((v60 & 1) == 0)
          goto LABEL_84;
        while (1)
        {
          v62 = *(_QWORD *)(v15 + 16);
          v61 = *(_QWORD *)(v15 + 24);
          if (v62 >= v61 >> 1)
          {
            v15 = (int64_t)sub_1CA0E5DF8((_QWORD *)(v61 > 1), v62 + 1, 1, (_QWORD *)v15);
            *v75 = v15;
          }
          *(_QWORD *)(v15 + 16) = v62 + 1;
          v63 = (_QWORD *)(v15 + 16 * v62);
          v63[4] = 1701736302;
          v63[5] = 0xE400000000000000;
          swift_release();
          swift_bridgeObjectRelease();
          v58 = (uint64_t)v65;
LABEL_81:
          result = sub_1CA0AAE34(v58);
          if (!__OFADD__(*a4, 1))
            break;
          __break(1u);
LABEL_84:
          v15 = (int64_t)sub_1CA0E5DF8(0, *(_QWORD *)(v15 + 16) + 1, 1, (_QWORD *)v15);
          *v75 = v15;
        }
        ++*a4;
        return result;
      }
LABEL_74:
      __break(1u);
LABEL_75:
      __break(1u);
      goto LABEL_76;
    }
    __break(1u);
    goto LABEL_74;
  }
  if (v14 >> 62)
    goto LABEL_70;
  v18 = *(_QWORD *)((v14 & 0xFFFFFFFFFFFFF8) + 0x10);
  while (v18)
  {
    v64 = v6;
    if (v18 < 1)
      goto LABEL_75;
    v19 = 0;
    v67 = a3 + 32;
    a3 = *(_QWORD *)(a3 + 16);
    v66 = v18;
    while (1)
    {
      v20 = (v17 & 0xC000000000000001) != 0
          ? (id)MEMORY[0x1CAA4A7A4](v19, v17)
          : *(id *)(v17 + 8 * v19 + 32);
      v6 = v20;
      v72 = (uint64_t)objc_msgSend(v20, sel_identifier, v64);
      sub_1CA0C7504();
      v21 = sub_1CA1F0EF8();
      v23 = v22;
      v8 = sub_1CA1F0A00();
      v15 = (int64_t)objc_msgSend(v6, sel_propertyForKey_, v8);

      if (v15)
      {
        sub_1CA1F0F04();
        swift_unknownObjectRelease();
      }
      else
      {
        v70 = 0u;
        v71 = 0u;
      }
      sub_1CA0C74BC((uint64_t)&v70, (uint64_t)&v72);
      if (v74)
      {
        if ((swift_dynamicCast() & 1) != 0)
        {
          swift_bridgeObjectRelease();
          v15 = (int64_t)v69;
          goto LABEL_23;
        }
      }
      else
      {
        sub_1CA0B6AD4((uint64_t)&v72, &qword_1ED8528F8);
      }
      v24 = objc_msgSend(v6, sel_label);
      if (!v24)
        goto LABEL_24;
      v8 = (unint64_t)v24;
      swift_bridgeObjectRelease();
      sub_1CA1F0A0C();
      v15 = (int64_t)v25;

LABEL_23:
      v21 = sub_1CA1F0A24();
      v23 = v26;
      swift_bridgeObjectRelease();
LABEL_24:
      if (*a4 >= a3)
        break;
      v27 = *(_QWORD *)(v67 + 8 * *a4);
      if (v27 == 1)
      {
        v34 = v75;
        v15 = *v75;
        v35 = swift_isUniquelyReferenced_nonNull_native();
        *v34 = v15;
        if ((v35 & 1) == 0)
        {
          v15 = (int64_t)sub_1CA0E5DF8(0, *(_QWORD *)(v15 + 16) + 1, 1, (_QWORD *)v15);
          *v75 = v15;
        }
        v37 = *(_QWORD *)(v15 + 16);
        v36 = *(_QWORD *)(v15 + 24);
        v8 = v37 + 1;
        if (v37 >= v36 >> 1)
        {
          v15 = (int64_t)sub_1CA0E5DF8((_QWORD *)(v36 > 1), v37 + 1, 1, (_QWORD *)v15);
          *v75 = v15;
        }
        *(_QWORD *)(v15 + 16) = v8;
        v38 = (_QWORD *)(v15 + 16 * v37);
        v38[4] = v21;
        v33 = v38 + 4;
        v18 = v66;
      }
      else if (v27)
      {
        swift_bridgeObjectRelease();
        v39 = v75;
        v15 = *v75;
        v40 = swift_isUniquelyReferenced_nonNull_native();
        *v39 = v15;
        if ((v40 & 1) == 0)
        {
          v15 = (int64_t)sub_1CA0E5DF8(0, *(_QWORD *)(v15 + 16) + 1, 1, (_QWORD *)v15);
          *v75 = v15;
        }
        v8 = *(_QWORD *)(v15 + 16);
        v41 = *(_QWORD *)(v15 + 24);
        if (v8 >= v41 >> 1)
        {
          v15 = (int64_t)sub_1CA0E5DF8((_QWORD *)(v41 > 1), v8 + 1, 1, (_QWORD *)v15);
          *v75 = v15;
        }
        *(_QWORD *)(v15 + 16) = v8 + 1;
        v42 = (_QWORD *)(v15 + 16 * v8);
        v42[4] = 1701736302;
        v33 = v42 + 4;
        v23 = 0xE400000000000000;
      }
      else
      {
        v72 = 542396238;
        v73 = 0xE400000000000000;
        sub_1CA1F0A3C();
        swift_bridgeObjectRelease();
        v8 = v72;
        v23 = v73;
        v28 = v75;
        v15 = *v75;
        v29 = swift_isUniquelyReferenced_nonNull_native();
        *v28 = v15;
        if ((v29 & 1) == 0)
        {
          v15 = (int64_t)sub_1CA0E5DF8(0, *(_QWORD *)(v15 + 16) + 1, 1, (_QWORD *)v15);
          *v75 = v15;
        }
        v31 = *(_QWORD *)(v15 + 16);
        v30 = *(_QWORD *)(v15 + 24);
        if (v31 >= v30 >> 1)
        {
          v15 = (int64_t)sub_1CA0E5DF8((_QWORD *)(v30 > 1), v31 + 1, 1, (_QWORD *)v15);
          *v75 = v15;
        }
        *(_QWORD *)(v15 + 16) = v31 + 1;
        v32 = (_QWORD *)(v15 + 16 * v31);
        v32[4] = v8;
        v33 = v32 + 4;
        v18 = v66;
      }
      v33[1] = v23;

      if (__OFADD__(*a4, 1))
        goto LABEL_69;
      ++v19;
      ++*a4;
      if (v18 == v19)
        goto LABEL_44;
    }
    __break(1u);
LABEL_69:
    __break(1u);
LABEL_70:
    swift_bridgeObjectRetain();
    v18 = sub_1CA1F1234();
    swift_bridgeObjectRelease();
  }
LABEL_44:
  swift_release();
  swift_bridgeObjectRelease();
  sub_1CA0AAE34((uint64_t)v65);
  return swift_bridgeObjectRelease();
}

uint64_t sub_1CA0C6170(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v9;
  char v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t (*v17)(uint64_t);
  uint64_t v18;
  unint64_t v19;
  char v20;
  unint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t result;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  BOOL v31;
  unint64_t v32;
  unint64_t v33;
  _QWORD *v34;
  uint64_t v35;
  _QWORD *v36;
  uint64_t v37;
  uint64_t v38;
  id v39;
  id v40;
  uint64_t v41;
  int v42;
  unint64_t v43;
  uint64_t v44;

  v4 = v3;
  v5 = *(_QWORD *)(v3 + 40);
  if (!*(_QWORD *)(v5 + 16))
    return 0;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v9 = sub_1CA0AA474(a2, a3);
  if ((v10 & 1) == 0)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    return 0;
  }
  v11 = *(_QWORD *)(v5 + 56) + 48 * v9;
  v12 = *(_QWORD *)v11;
  v42 = *(unsigned __int8 *)(v11 + 24);
  v14 = *(_QWORD *)(v11 + 32);
  v13 = *(_QWORD *)(v11 + 40);
  v15 = *(_QWORD *)(v11 + 8);
  swift_bridgeObjectRetain();
  swift_retain();
  sub_1CA0AFF28(v14);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (v14)
  {
    v16 = swift_allocObject();
    *(_QWORD *)(v16 + 16) = v14;
    *(_QWORD *)(v16 + 24) = v13;
    v17 = sub_1CA0C6F44;
  }
  else
  {
    v17 = 0;
  }
  swift_bridgeObjectRetain();
  v18 = sub_1CA0C3854();
  if (!*(_QWORD *)(v18 + 16) || (v19 = sub_1CA0AA474(a2, a3), (v20 & 1) == 0))
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_release();
LABEL_11:
    swift_bridgeObjectRelease();
    v24 = (uint64_t)v17;
LABEL_12:
    sub_1CA0AAE34(v24);
    return 0;
  }
  v21 = *(_QWORD *)(*(_QWORD *)(v18 + 56) + 8 * v19);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v22 = v4;
  v23 = sub_1CA0C34B0(v12, v15);
  v27 = v23;
  if (v42)
  {
    v44 = MEMORY[0x1E0DEE9D8];
    if (v23 >> 62)
      goto LABEL_46;
    v28 = *(_QWORD *)((v23 & 0xFFFFFFFFFFFFF8) + 0x10);
    while (v28)
    {
      v29 = 0;
      v30 = a1[2];
      v31 = v30 >= v21;
      v32 = v30 - v21;
      if (v31)
        v33 = v32;
      else
        v33 = 0;
      v21 = (unint64_t)&a1[v21 + 4];
      v43 = v21;
      while (1)
      {
        v34 = (v27 & 0xC000000000000001) != 0
            ? (_QWORD *)MEMORY[0x1CAA4A7A4](v29, v27)
            : *(id *)(v27 + 8 * v29 + 32);
        a1 = v34;
        if (v33 == v29)
          break;
        v35 = *(_QWORD *)(v21 + 8 * v29);
        if (v35)
        {
          if (v35 != 1)
          {
            swift_release();
            swift_bridgeObjectRelease();
            sub_1CA0AAE34((uint64_t)v17);
            swift_bridgeObjectRelease();

            swift_bridgeObjectRelease();
            return 0;
          }
          v36 = v34;
          MEMORY[0x1CAA4A1E0]();
          if (*(_QWORD *)((v44 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(_QWORD *)((v44 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1)
            sub_1CA1F0B2C();
          sub_1CA1F0B8C();
          sub_1CA1F0B14();
          v21 = v43;
        }
        ++v29;

        if (v28 == v29)
        {
          swift_release();
          swift_bridgeObjectRelease();
          sub_1CA0AAE34((uint64_t)v17);
          swift_bridgeObjectRelease();
          return v44;
        }
      }
      __break(1u);
LABEL_46:
      swift_bridgeObjectRetain();
      v28 = sub_1CA1F1234();
      swift_bridgeObjectRelease();
    }
    swift_release();
    swift_bridgeObjectRelease();
    sub_1CA0AAE34((uint64_t)v17);
    swift_bridgeObjectRelease();
    return MEMORY[0x1E0DEE9D8];
  }
  if ((v21 & 0x8000000000000000) != 0)
  {
    __break(1u);
    goto LABEL_49;
  }
  if (v21 >= a1[2])
  {
LABEL_49:
    __break(1u);
    goto LABEL_50;
  }
  v37 = a1[v21 + 4];
  v22 = v37 - 1;
  if (__OFSUB__(v37, 1))
  {
LABEL_50:
    __break(1u);
    goto LABEL_51;
  }
  if (v22 < 0)
  {
    swift_release();
    swift_bridgeObjectRelease();
    goto LABEL_11;
  }
  v15 = (uint64_t)v17;
  if (!(v23 >> 62))
  {
    if (v22 < *(_QWORD *)((v23 & 0xFFFFFFFFFFFFF8) + 0x10))
      goto LABEL_38;
    goto LABEL_52;
  }
LABEL_51:
  swift_bridgeObjectRetain();
  v41 = sub_1CA1F1234();
  swift_bridgeObjectRelease();
  if (v22 >= v41)
  {
LABEL_52:
    swift_release();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v24 = v15;
    goto LABEL_12;
  }
LABEL_38:
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_1ED852A58);
  result = swift_allocObject();
  v38 = result;
  *(_OWORD *)(result + 16) = xmmword_1CA1F9520;
  if ((v27 & 0xC000000000000001) != 0)
  {
    v39 = (id)MEMORY[0x1CAA4A7A4](v22, v27);
    goto LABEL_41;
  }
  if ((unint64_t)v22 < *(_QWORD *)((v27 & 0xFFFFFFFFFFFFF8) + 0x10))
  {
    v39 = *(id *)(v27 + 8 * v22 + 32);
LABEL_41:
    v40 = v39;
    swift_bridgeObjectRelease();
    *(_QWORD *)(v38 + 32) = v40;
    sub_1CA1F0B14();
    v25 = v38;
    swift_release();
    swift_bridgeObjectRelease();
    sub_1CA0AAE34(v15);
    return v25;
  }
  __break(1u);
  return result;
}

uint64_t MAFeatureDefinition.deinit()
{
  uint64_t v0;

  swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v0;
}

uint64_t MAFeatureDefinition.__deallocating_deinit()
{
  MAFeatureDefinition.deinit();
  return swift_deallocClassInstance();
}

uint64_t sub_1CA0C66E0@<X0>(_QWORD *a1@<X0>, _QWORD *a2@<X1>, uint64_t (*a3)(_QWORD, _QWORD, _QWORD, _QWORD)@<X2>, uint64_t *a4@<X8>)
{
  uint64_t result;

  result = a3(*a1, a1[1], *a2, a2[1]);
  *a4 = result;
  return result;
}

void (*sub_1CA0C671C(void (**a1)(id *a1), unint64_t a2, uint64_t a3))(_QWORD *)
{
  void (*v6)(id *);

  v6 = (void (*)(id *))malloc(0x28uLL);
  *a1 = v6;
  *((_QWORD *)v6 + 4) = sub_1CA0C67F4(v6, a2, a3);
  return sub_1CA0C6770;
}

void (*sub_1CA0C6774(uint64_t (**a1)(), unint64_t a2, uint64_t a3))(_QWORD *)
{
  uint64_t (*v6)();

  v6 = (uint64_t (*)())malloc(0x28uLL);
  *a1 = v6;
  *((_QWORD *)v6 + 4) = sub_1CA0C6868(v6, a2, a3);
  return sub_1CA0C6770;
}

void sub_1CA0C67C8(_QWORD *a1)
{
  void *v1;

  v1 = (void *)*a1;
  (*(void (**)(_QWORD))(*a1 + 32))(*a1);
  free(v1);
}

void (*sub_1CA0C67F4(void (*result)(id *a1), unint64_t a2, uint64_t a3))(id *a1)
{
  void (*v3)(id *);
  id v4;

  v3 = result;
  if ((a3 & 0xC000000000000001) != 0)
  {
    v4 = (id)MEMORY[0x1CAA4A7A4](a2, a3);
    goto LABEL_5;
  }
  if ((a2 & 0x8000000000000000) != 0)
  {
    __break(1u);
  }
  else if (*(_QWORD *)((a3 & 0xFFFFFFFFFFFFF8) + 0x10) > a2)
  {
    v4 = *(id *)(a3 + 8 * a2 + 32);
LABEL_5:
    *(_QWORD *)v3 = v4;
    return sub_1CA0C6860;
  }
  __break(1u);
  return result;
}

void sub_1CA0C6860(id *a1)
{

}

uint64_t (*sub_1CA0C6868(uint64_t (*result)(), unint64_t a2, uint64_t a3))()
{
  uint64_t *v3;
  uint64_t v4;

  v3 = (uint64_t *)result;
  if ((a3 & 0xC000000000000001) != 0)
  {
    v4 = MEMORY[0x1CAA4A7A4](a2, a3);
    goto LABEL_5;
  }
  if ((a2 & 0x8000000000000000) != 0)
  {
    __break(1u);
  }
  else if (*(_QWORD *)((a3 & 0xFFFFFFFFFFFFF8) + 0x10) > a2)
  {
    v4 = swift_retain();
LABEL_5:
    *v3 = v4;
    return sub_1CA0C68D4;
  }
  __break(1u);
  return result;
}

uint64_t sub_1CA0C68D4()
{
  return swift_release();
}

uint64_t sub_1CA0C68DC(unint64_t a1)
{
  unint64_t v2;
  uint64_t result;
  uint64_t v4;
  uint64_t i;
  void *v6;
  void **v7;
  void *v8;
  id v9;
  uint64_t v10;

  v2 = a1 >> 62;
  if (a1 >> 62)
  {
    swift_bridgeObjectRetain();
    sub_1CA1F1234();
    swift_bridgeObjectRelease();
  }
  sub_1CA0B6A1C();
  sub_1CA0C0614();
  result = sub_1CA1F0CA0();
  v10 = result;
  if (v2)
  {
    swift_bridgeObjectRetain();
    v4 = sub_1CA1F1234();
    result = swift_bridgeObjectRelease();
    if (!v4)
      return v10;
  }
  else
  {
    v4 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
    if (!v4)
      return v10;
  }
  if (v4 >= 1)
  {
    if ((a1 & 0xC000000000000001) != 0)
    {
      for (i = 0; i != v4; ++i)
      {
        v6 = (void *)MEMORY[0x1CAA4A7A4](i, a1);
        sub_1CA0BDD74(&v9, v6);

      }
    }
    else
    {
      v7 = (void **)(a1 + 32);
      do
      {
        v8 = *v7++;
        sub_1CA0BDD74(&v9, v8);

        --v4;
      }
      while (v4);
    }
    return v10;
  }
  __break(1u);
  return result;
}

uint64_t sub_1CA0C6A24(void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  id v5;
  unint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t (*v15)(uint64_t);
  uint64_t v16;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v18;
  char v19;
  unint64_t v20;
  uint64_t v21;
  _BOOL8 v22;
  uint64_t v23;
  char v24;
  unint64_t v25;
  char v26;
  _QWORD *v27;
  uint64_t *v28;
  uint64_t v29;
  uint64_t v30;
  BOOL v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t result;
  void *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t (*v39)@<X0>(_QWORD *@<X0>, uint64_t *@<X8>);
  uint64_t v40;
  char v41;
  __int128 v42;

  *(_QWORD *)(v3 + 56) = 0;
  *(_QWORD *)(v3 + 64) = 0;
  *(_BYTE *)(v3 + 72) = 1;
  *(_QWORD *)(v3 + 80) = 0;
  *(_QWORD *)(v3 + 16) = a1;
  *(_QWORD *)(v3 + 24) = a2;
  *(_QWORD *)(v3 + 32) = a3;
  v5 = a1;
  swift_retain();
  swift_bridgeObjectRetain();
  v6 = sub_1CA0ABD34(MEMORY[0x1E0DEE9D8]);
  v7 = *(_QWORD *)(a3 + 16);
  if (!v7)
  {
    swift_bridgeObjectRetain();

    swift_release();
    v27 = (_QWORD *)v6;
LABEL_24:
    swift_bridgeObjectRelease();
    v33 = MEMORY[0x1E0DEE9E0];
    *(_QWORD *)(v3 + 40) = v27;
    *(_QWORD *)(v3 + 48) = v33;
    return v3;
  }
  v35 = v5;
  v36 = v3;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v8 = (_QWORD *)(a3 + 72);
  while (1)
  {
    v11 = *(v8 - 5);
    v42 = *((_OWORD *)v8 - 2);
    v41 = *((_BYTE *)v8 - 16);
    v13 = *(v8 - 1);
    v12 = *v8;
    if (v13)
    {
      v14 = swift_allocObject();
      *(_QWORD *)(v14 + 16) = v13;
      *(_QWORD *)(v14 + 24) = v12;
      v15 = sub_1CA0C6F44;
    }
    else
    {
      v15 = 0;
      v14 = 0;
    }
    swift_bridgeObjectRetain();
    swift_retain();
    sub_1CA0AFF28(v13);
    swift_bridgeObjectRetain();
    swift_retain();
    sub_1CA0AFF28(v13);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_retain();
    sub_1CA0AFF28((uint64_t)v15);
    sub_1CA0AAE34((uint64_t)v15);
    swift_release();
    v37 = v13;
    v38 = v7;
    if (v13)
    {
      v16 = swift_allocObject();
      *(_QWORD *)(v16 + 16) = v15;
      *(_QWORD *)(v16 + 24) = v14;
      v39 = sub_1CA0C7554;
      v40 = v16;
    }
    else
    {
      v39 = 0;
      v40 = 0;
    }
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    v18 = v11;
    v20 = sub_1CA0AA474(v11, v42);
    v21 = *(_QWORD *)(v6 + 16);
    v22 = (v19 & 1) == 0;
    v23 = v21 + v22;
    if (__OFADD__(v21, v22))
      break;
    v24 = v19;
    if (*(_QWORD *)(v6 + 24) >= v23)
    {
      if ((isUniquelyReferenced_nonNull_native & 1) != 0)
      {
        v27 = (_QWORD *)v6;
        if ((v19 & 1) != 0)
          goto LABEL_3;
      }
      else
      {
        sub_1CA0EFB04();
        v27 = (_QWORD *)v6;
        if ((v24 & 1) != 0)
          goto LABEL_3;
      }
    }
    else
    {
      sub_1CA0EBE88(v23, isUniquelyReferenced_nonNull_native);
      v25 = sub_1CA0AA474(v18, v42);
      if ((v24 & 1) != (v26 & 1))
        goto LABEL_27;
      v20 = v25;
      v27 = (_QWORD *)v6;
      if ((v24 & 1) != 0)
      {
LABEL_3:
        v9 = v27[7] + 48 * v20;
        v10 = *(_QWORD *)(v9 + 32);
        swift_release();
        swift_bridgeObjectRelease();
        sub_1CA0AAE34(v10);
        *(_QWORD *)v9 = v18;
        *(_OWORD *)(v9 + 8) = v42;
        *(_BYTE *)(v9 + 24) = v41;
        *(_QWORD *)(v9 + 32) = v39;
        *(_QWORD *)(v9 + 40) = v40;
        goto LABEL_4;
      }
    }
    v27[(v20 >> 6) + 8] |= 1 << v20;
    v28 = (uint64_t *)(v27[6] + 16 * v20);
    *v28 = v18;
    v28[1] = v42;
    v29 = v27[7] + 48 * v20;
    *(_QWORD *)v29 = v18;
    *(_OWORD *)(v29 + 8) = v42;
    *(_BYTE *)(v29 + 24) = v41;
    *(_QWORD *)(v29 + 32) = v39;
    *(_QWORD *)(v29 + 40) = v40;
    v30 = v27[2];
    v31 = __OFADD__(v30, 1);
    v32 = v30 + 1;
    if (v31)
      goto LABEL_26;
    v27[2] = v32;
    swift_bridgeObjectRetain();
LABEL_4:
    v8 += 6;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_release();
    swift_bridgeObjectRelease();
    sub_1CA0AAE34(v37);
    swift_bridgeObjectRelease();
    v6 = (unint64_t)v27;
    v7 = v38 - 1;
    if (v38 == 1)
    {

      swift_release();
      swift_bridgeObjectRelease();
      v3 = v36;
      goto LABEL_24;
    }
  }
  __break(1u);
LABEL_26:
  __break(1u);
LABEL_27:
  result = sub_1CA1F1360();
  __break(1u);
  return result;
}

uint64_t sub_1CA0C6DEC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  unint64_t v11;
  char v12;
  uint64_t v13;

  swift_bridgeObjectRetain();
  swift_retain();
  sub_1CA0AFF28(a5);
  sub_1CA0AAE34(a5);
  swift_release();
  if (*(_QWORD *)(a7 + 16) && (v11 = sub_1CA0AA474(a1, a2), (v12 & 1) != 0))
  {
    v13 = *(_QWORD *)(*(_QWORD *)(a7 + 56) + 8 * v11);
    swift_bridgeObjectRetain();
  }
  else
  {
    v13 = 0;
  }
  swift_bridgeObjectRelease();
  return v13;
}

uint64_t sub_1CA0C6EA8()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_1CA0C6ECC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  void (*v5)(uint64_t *__return_ptr, _QWORD *, _QWORD *);
  uint64_t v7;
  _QWORD v8[2];
  _QWORD v9[2];

  v5 = *(void (**)(uint64_t *__return_ptr, _QWORD *, _QWORD *))(v4 + 16);
  v9[0] = a1;
  v9[1] = a2;
  v8[0] = a3;
  v8[1] = a4;
  v5(&v7, v9, v8);
  return v7;
}

uint64_t sub_1CA0C6F0C@<X0>(_QWORD *a1@<X0>, _QWORD *a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v3;
  uint64_t result;

  result = (*(uint64_t (**)(_QWORD, _QWORD, _QWORD, _QWORD))(v3 + 16))(*a1, a1[1], *a2, a2[1]);
  *a3 = result;
  return result;
}

unint64_t sub_1CA0C6F4C()
{
  unint64_t result;

  result = qword_1EF9376A0;
  if (!qword_1EF9376A0)
  {
    result = MEMORY[0x1CAA4BB30](&protocol conformance descriptor for MAFeatureDefinitionType, &type metadata for MAFeatureDefinitionType);
    atomic_store(result, (unint64_t *)&qword_1EF9376A0);
  }
  return result;
}

id sub_1CA0C6F90@<X0>(_QWORD *a1@<X8>)
{
  id result;

  result = sub_1CA0C3C70();
  *a1 = result;
  return result;
}

_QWORD *sub_1CA0C6FB8(_QWORD *result, uint64_t *a2)
{
  uint64_t v2;

  v2 = *a2;
  *(_QWORD *)(v2 + 64) = *result;
  *(_BYTE *)(v2 + 72) = 0;
  return result;
}

uint64_t sub_1CA0C6FCC@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;

  result = sub_1CA0C3F30();
  *a1 = result;
  return result;
}

uint64_t sub_1CA0C6FF4(_QWORD *a1, uint64_t a2)
{
  *(_QWORD *)(*(_QWORD *)a2 + 80) = *a1;
  swift_bridgeObjectRetain();
  return swift_bridgeObjectRelease();
}

uint64_t getEnumTagSinglePayload for MAFeatureDefinitionType(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v4;
  unsigned int v6;
  BOOL v7;
  int v8;

  if (!a2)
    return 0;
  if (a2 < 0xFF)
    goto LABEL_17;
  if (a2 + 1 >= 0xFFFF00)
    v2 = 4;
  else
    v2 = 2;
  if ((a2 + 1) >> 8 < 0xFF)
    v3 = 1;
  else
    v3 = v2;
  if (v3 == 4)
  {
    v4 = *(_DWORD *)(a1 + 1);
    if (v4)
      return (*a1 | (v4 << 8)) - 1;
  }
  else
  {
    if (v3 == 2)
    {
      v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1))
        goto LABEL_17;
      return (*a1 | (v4 << 8)) - 1;
    }
    v4 = a1[1];
    if (a1[1])
      return (*a1 | (v4 << 8)) - 1;
  }
LABEL_17:
  v6 = *a1;
  v7 = v6 >= 2;
  v8 = v6 - 2;
  if (!v7)
    v8 = -1;
  return (v8 + 1);
}

uint64_t storeEnumTagSinglePayload for MAFeatureDefinitionType(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 1 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_1CA0C7100 + 4 * byte_1CA1F9535[v4]))();
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_1CA0C7134 + 4 * byte_1CA1F9530[v4]))();
}

uint64_t sub_1CA0C7134(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1CA0C713C(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1CA0C7144);
  return result;
}

uint64_t sub_1CA0C7150(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1CA0C7158);
  *(_BYTE *)result = a2 + 1;
  return result;
}

uint64_t sub_1CA0C715C(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1CA0C7164(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

_BYTE *sub_1CA0C7170(_BYTE *result, char a2)
{
  *result = a2 & 1;
  return result;
}

ValueMetadata *type metadata accessor for MAFeatureDefinitionType()
{
  return &type metadata for MAFeatureDefinitionType;
}

uint64_t dispatch thunk of MAFeatureDefinitionExtraction.featureExtraction(definition:target:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  return (*(uint64_t (**)(uint64_t))(a9 + 8))(a1);
}

uint64_t method lookup function for MAFeatureDefinition()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of MAFeatureDefinition.target(for:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 200))();
}

uint64_t dispatch thunk of MAFeatureDefinition.space.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 240))();
}

uint64_t dispatch thunk of MAFeatureDefinition.space.setter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 248))();
}

uint64_t dispatch thunk of MAFeatureDefinition.space.modify()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 256))();
}

uint64_t dispatch thunk of MAFeatureDefinition.keys.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 264))();
}

uint64_t dispatch thunk of MAFeatureDefinition.keys.setter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 272))();
}

uint64_t dispatch thunk of MAFeatureDefinition.keys.modify()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 280))();
}

uint64_t dispatch thunk of MAFeatureDefinition.extract<A>(items:progress:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 288))();
}

uint64_t dispatch thunk of MAFeatureDefinition.stringValues(from:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 296))();
}

uint64_t dispatch thunk of MAFeatureDefinition.nodes(from:forKey:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 304))();
}

uint64_t sub_1CA0C7248(uint64_t a1)
{
  uint64_t v2;
  uint64_t result;
  uint64_t v4;
  _BYTE v5[40];
  _BYTE v6[40];
  uint64_t v7;

  v2 = *(_QWORD *)(a1 + 16);
  result = sub_1CA1F0CA0();
  v7 = result;
  if (v2)
  {
    v4 = a1 + 32;
    do
    {
      sub_1CA0AB948(v4, (uint64_t)v5);
      sub_1CA0BDFF0((uint64_t)v6, (uint64_t)v5);
      sub_1CA0AB984((uint64_t)v6);
      v4 += 40;
      --v2;
    }
    while (v2);
    return v7;
  }
  return result;
}

uint64_t sub_1CA0C72D0(uint64_t a1)
{
  uint64_t v2;
  uint64_t result;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v2 = *(_QWORD *)(a1 + 16);
  result = sub_1CA1F0CA0();
  v7 = result;
  if (v2)
  {
    v4 = (uint64_t *)(a1 + 32);
    do
    {
      v5 = *v4++;
      sub_1CA0BE3A0(&v6, v5);
      --v2;
    }
    while (v2);
    return v7;
  }
  return result;
}

uint64_t sub_1CA0C7340(uint64_t a1)
{
  uint64_t v2;
  uint64_t result;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v2 = *(_QWORD *)(a1 + 16);
  result = sub_1CA1F0CA0();
  v8 = result;
  if (v2)
  {
    v4 = (uint64_t *)(a1 + 40);
    do
    {
      v5 = *(v4 - 1);
      v6 = *v4;
      swift_bridgeObjectRetain();
      sub_1CA0BE498(&v7, v5, v6);
      swift_bridgeObjectRelease();
      v4 += 2;
      --v2;
    }
    while (v2);
    return v8;
  }
  return result;
}

uint64_t sub_1CA0C73D4(uint64_t a1)
{
  uint64_t v2;
  uint64_t result;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v2 = *(_QWORD *)(a1 + 16);
  sub_1CA0C7478();
  result = sub_1CA1F0CA0();
  v8 = result;
  if (v2)
  {
    v4 = (uint64_t *)(a1 + 40);
    do
    {
      v5 = *(v4 - 1);
      v6 = *v4;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      sub_1CA0BE168(&v7, v5, v6);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      v4 += 2;
      --v2;
    }
    while (v2);
    return v8;
  }
  return result;
}

unint64_t sub_1CA0C7478()
{
  unint64_t result;

  result = qword_1EF937820;
  if (!qword_1EF937820)
  {
    result = MEMORY[0x1CAA4BB30](&protocol conformance descriptor for MACluster, &type metadata for MACluster);
    atomic_store(result, (unint64_t *)&qword_1EF937820);
  }
  return result;
}

uint64_t sub_1CA0C74BC(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_1ED8528F8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

unint64_t sub_1CA0C7504()
{
  unint64_t result;

  result = qword_1EF937828;
  if (!qword_1EF937828)
  {
    result = MEMORY[0x1CAA4BB30](MEMORY[0x1E0DEBBD8], MEMORY[0x1E0DEBB98]);
    atomic_store(result, (unint64_t *)&qword_1EF937828);
  }
  return result;
}

uint64_t sub_1CA0C7548(uint64_t a1, uint64_t a2, char a3)
{
  uint64_t result;

  if ((a3 & 1) != 0)
    return swift_bridgeObjectRelease();
  return result;
}

uint64_t sub_1CA0C7554@<X0>(_QWORD *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v2;
  uint64_t result;

  result = (*(uint64_t (**)(_QWORD))(v2 + 16))(*a1);
  *a2 = result;
  return result;
}

uint64_t sub_1CA0C7580(uint64_t a1)
{
  uint64_t v1;
  void (*v2)(uint64_t *__return_ptr, uint64_t *);
  uint64_t v4;
  uint64_t v5;

  v2 = *(void (**)(uint64_t *__return_ptr, uint64_t *))(v1 + 16);
  v5 = a1;
  v2(&v4, &v5);
  return v4;
}

KnowledgeGraphKit::BernoulliSampledIndexSequence __swiftcall BernoulliSampledIndexSequence.init(p:max:)(Swift::Double p, Swift::Int max)
{
  uint64_t v2;
  double v4;
  BOOL v5;
  uint64_t v7;
  Swift::Int v8;
  double v9;
  KnowledgeGraphKit::BernoulliSampledIndexSequence result;

  v5 = p <= 0.0;
  v4 = 1.0;
  v5 = v5 || p > 1.0;
  if (v5 || max < 0)
  {
    __break(1u);
  }
  else
  {
    v7 = v2;
    v4 = 0.0;
    if (p != 1.0)
      v4 = 1.0 / log(1.0 - p);
    *(_QWORD *)v7 = -1;
    *(Swift::Double *)(v7 + 8) = p;
    *(_QWORD *)(v7 + 16) = max;
    *(double *)(v7 + 24) = v4;
  }
  result.cachedDenominator = v9;
  result.p = v4;
  result.max = v8;
  result.currentElement = max;
  return result;
}

Swift::Int_optional __swiftcall BernoulliSampledIndexSequence.next()()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  double v3;
  Swift::Int v4;
  Swift::Bool v5;
  double v6;
  uint64_t v7;
  Swift::Int_optional result;

  if (*((double *)v1 + 1) != 1.0)
  {
LABEL_5:
    sub_1CA0C778C(v0, 0.0, 1.0);
    v6 = ceil(*((double *)v1 + 3) * log(1.0 - v3));
    if ((~*(_QWORD *)&v6 & 0x7FF0000000000000) != 0)
    {
      if (v6 > -9.22337204e18)
      {
        if (v6 < 9.22337204e18)
        {
          v2 = *v1 + (uint64_t)v6;
          if (!__OFADD__(*v1, (uint64_t)v6))
            goto LABEL_9;
LABEL_15:
          __break(1u);
          goto LABEL_16;
        }
LABEL_14:
        __break(1u);
        goto LABEL_15;
      }
    }
    else
    {
      __break(1u);
    }
    __break(1u);
    goto LABEL_14;
  }
  v2 = *v1 + 1;
  if (__OFADD__(*v1, 1))
  {
    __break(1u);
    goto LABEL_5;
  }
LABEL_9:
  *v1 = v2;
  v7 = v1[2];
  v5 = v7 < v2;
  if (v7 >= v2)
    v4 = v2;
  else
    v4 = 0;
LABEL_16:
  result.value = v4;
  result.is_nil = v5;
  return result;
}

double sub_1CA0C7714@<D0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  double result;
  uint64_t v3;
  uint64_t v4;

  result = *(double *)(v1 + 8);
  v3 = *(_QWORD *)(v1 + 16);
  v4 = *(_QWORD *)(v1 + 24);
  *(_QWORD *)a1 = *(_QWORD *)v1;
  *(double *)(a1 + 8) = result;
  *(_QWORD *)(a1 + 16) = v3;
  *(_QWORD *)(a1 + 24) = v4;
  return result;
}

void sub_1CA0C7738()
{
  uint64_t v0;

  sub_1CA0DE74C(*(_QWORD *)v0, *(_QWORD *)(v0 + 16), *(double *)(v0 + 8), *(double *)(v0 + 24));
}

void sub_1CA0C774C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;

  sub_1CA138638(a1, a2, a3, *(_QWORD *)v3, *(_QWORD *)(v3 + 16), *(double *)(v3 + 8), *(double *)(v3 + 24));
}

Swift::Int sub_1CA0C7760@<X0>(uint64_t a1@<X8>)
{
  Swift::Int_optional v3;

  v3 = BernoulliSampledIndexSequence.next()();
  *(_QWORD *)a1 = v3.value;
  *(_BYTE *)(a1 + 8) = v3.is_nil;
  return v3.value;
}

uint64_t sub_1CA0C778C(uint64_t result, double a2, double a3)
{
  double v5;
  uint64_t v6;
  uint64_t v7;

  if (a2 == a3)
  {
    __break(1u);
    goto LABEL_7;
  }
  v5 = a3 - a2;
  if ((~COERCE__INT64(a3 - a2) & 0x7FF0000000000000) == 0)
  {
LABEL_7:
    __break(1u);
    return result;
  }
  v6 = result;
  v7 = 0;
  result = MEMORY[0x1CAA4BBFC](&v7, 8);
  if (v5 * ((double)(v7 & 0x1FFFFFFFFFFFFFLL) * 1.11022302e-16) + a2 == a3)
    return sub_1CA0C778C(v6, a2, a3);
  return result;
}

unint64_t sub_1CA0C7838()
{
  unint64_t result;

  result = qword_1EF937838;
  if (!qword_1EF937838)
  {
    result = MEMORY[0x1CAA4BB30](&protocol conformance descriptor for BernoulliSampledIndexSequence, &type metadata for BernoulliSampledIndexSequence);
    atomic_store(result, (unint64_t *)&qword_1EF937838);
  }
  return result;
}

uint64_t initializeBufferWithCopyOfBuffer for BernoulliSampledIndexSequence(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;

  v2 = *a2;
  *a1 = *a2;
  v3 = v2 + 16;
  swift_retain();
  return v3;
}

uint64_t getEnumTagSinglePayload for BernoulliSampledIndexSequence(uint64_t a1, int a2)
{
  if (a2 && *(_BYTE *)(a1 + 32))
    return (*(_DWORD *)a1 + 1);
  else
    return 0;
}

uint64_t storeEnumTagSinglePayload for BernoulliSampledIndexSequence(uint64_t result, int a2, int a3)
{
  char v3;

  if (a2)
  {
    *(_QWORD *)(result + 16) = 0;
    *(_QWORD *)(result + 24) = 0;
    *(_QWORD *)result = (a2 - 1);
    *(_QWORD *)(result + 8) = 0;
    if (!a3)
      return result;
    v3 = 1;
  }
  else
  {
    if (!a3)
      return result;
    v3 = 0;
  }
  *(_BYTE *)(result + 32) = v3;
  return result;
}

ValueMetadata *type metadata accessor for BernoulliSampledIndexSequence()
{
  return &type metadata for BernoulliSampledIndexSequence;
}

uint64_t sub_1CA0C7908@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return sub_1CA0B6A98(v1, a1);
}

_OWORD *BinaryPredicate.init(comparator:value:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, _OWORD *a4@<X8>)
{
  id v7;
  __int128 v9;
  unint64_t v10;

  v7 = objc_msgSend(objc_allocWithZone((Class)KGBinaryPredicate), sel_initWithComparator_value_, a1, sub_1CA1F12DC());
  swift_unknownObjectRelease();
  v10 = sub_1CA0C79C8();
  *(_QWORD *)&v9 = v7;
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(a3 - 8) + 8))(a2, a3);
  return sub_1CA0AFCC0(&v9, a4);
}

unint64_t sub_1CA0C79C8()
{
  unint64_t result;

  result = qword_1EF937840[0];
  if (!qword_1EF937840[0])
  {
    objc_opt_self();
    result = swift_getObjCClassMetadata();
    atomic_store(result, qword_1EF937840);
  }
  return result;
}

_OWORD *< infix<A>(_:_:)(uint64_t a1, _OWORD *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  return sub_1CA0C7A7C(a1, a2, a3, a4, a5, a6, 3);
}

uint64_t sub_1CA0C7A10(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  v3 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)(a2 + 24) = v3;
  *(_QWORD *)(a2 + 32) = *(_QWORD *)(a1 + 32);
  (**(void (***)(uint64_t, uint64_t))(v3 - 8))(a2, a1);
  return a2;
}

_OWORD *<= infix<A>(_:_:)(uint64_t a1, _OWORD *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  return sub_1CA0C7A7C(a1, a2, a3, a4, a5, a6, 4);
}

_OWORD *== infix<A>(_:_:)(uint64_t a1, _OWORD *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  return sub_1CA0C7A7C(a1, a2, a3, a4, a5, a6, 1);
}

_OWORD *!= infix<A>(_:_:)(uint64_t a1, _OWORD *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  return sub_1CA0C7A7C(a1, a2, a3, a4, a5, a6, 2);
}

_OWORD *> infix<A>(_:_:)(uint64_t a1, _OWORD *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  return sub_1CA0C7A7C(a1, a2, a3, a4, a5, a6, 5);
}

_OWORD *>= infix<A>(_:_:)(uint64_t a1, _OWORD *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  return sub_1CA0C7A7C(a1, a2, a3, a4, a5, a6, 6);
}

_OWORD *sub_1CA0C7A7C(uint64_t a1, _OWORD *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v17;

  v11 = *(_QWORD *)(a5 - 8);
  MEMORY[0x1E0C80A78](a1, a1);
  v13 = (char *)&v17 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1CA0C7A10(v15, v14);
  (*(void (**)(char *, uint64_t, uint64_t))(v11 + 16))(v13, a4, a5);
  return BinaryPredicate.init(comparator:value:)(a7, (uint64_t)v13, a5, a2);
}

_OWORD *< infix<A, B>(_:_:)(uint64_t a1, _OWORD *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  return sub_1CA0C7B48(a1, a2, a3, a4, a5, a6, a7, 3);
}

_OWORD *<= infix<A, B>(_:_:)(uint64_t a1, _OWORD *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  return sub_1CA0C7B48(a1, a2, a3, a4, a5, a6, a7, 4);
}

_OWORD *== infix<A, B>(_:_:)(uint64_t a1, _OWORD *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  return sub_1CA0C7B48(a1, a2, a3, a4, a5, a6, a7, 1);
}

_OWORD *!= infix<A, B>(_:_:)(uint64_t a1, _OWORD *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  return sub_1CA0C7B48(a1, a2, a3, a4, a5, a6, a7, 2);
}

_OWORD *> infix<A, B>(_:_:)(uint64_t a1, _OWORD *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  return sub_1CA0C7B48(a1, a2, a3, a4, a5, a6, a7, 5);
}

_OWORD *>= infix<A, B>(_:_:)(uint64_t a1, _OWORD *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  return sub_1CA0C7B48(a1, a2, a3, a4, a5, a6, a7, 6);
}

_OWORD *sub_1CA0C7B48(uint64_t a1, _OWORD *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  _QWORD *v11;
  uint64_t v12;
  char *v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v20;

  v11 = (_QWORD *)MEMORY[0x1E0C80A78](a1, a2);
  v13 = (char *)&v20 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = v14[1];
  *v11 = *v14;
  v11[1] = v15;
  (*(void (**)(char *, uint64_t, uint64_t))(v16 + 16))(v13, v17, v18);
  swift_bridgeObjectRetain();
  return BinaryPredicate.init(comparator:value:)(a8, (uint64_t)v13, a6, a2);
}

uint64_t sub_1CA0C7BE8(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  v3 = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 24) = v3;
  (**(void (***)(void))(v3 - 8))();
  return a1;
}

uint64_t *sub_1CA0C7C1C(uint64_t *a1, uint64_t *a2)
{
  __swift_assign_boxed_opaque_existential_0(a1, a2);
  return a1;
}

_OWORD *sub_1CA0C7C40(_OWORD *a1, _OWORD *a2)
{
  __int128 v4;

  __swift_destroy_boxed_opaque_existential_0((uint64_t)a1);
  v4 = a2[1];
  *a1 = *a2;
  a1[1] = v4;
  return a1;
}

uint64_t sub_1CA0C7C70(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 32))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 24);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t sub_1CA0C7CB8(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)(result + 16) = 0;
    *(_QWORD *)(result + 24) = 0;
    *(_QWORD *)result = a2 ^ 0x80000000;
    *(_QWORD *)(result + 8) = 0;
    if (a3 < 0)
      *(_BYTE *)(result + 32) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 24) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 32) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

uint64_t type metadata accessor for BinaryPredicate(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for BinaryPredicate);
}

uint64_t UniqueSortedBuffer.elements.getter()
{
  uint64_t v0;

  return *(_QWORD *)v0;
}

uint64_t UniqueSortedBuffer.count.getter()
{
  uint64_t v0;
  uint64_t v1;

  v0 = sub_1CA1F09F4();
  MEMORY[0x1CAA4BB30](MEMORY[0x1E0DEA5E8], v0);
  v1 = sub_1CA1F13C0();
  MEMORY[0x1CAA4BB30](MEMORY[0x1E0DEDE48], v1);
  return sub_1CA1F0D54();
}

uint64_t static UniqueSortedBuffer.SearchResult.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  if (*(_QWORD *)a1 == *(_QWORD *)a2)
    return (*(unsigned __int8 *)(a2 + 8) ^ *(unsigned __int8 *)(a1 + 8) ^ 1) & 1;
  else
    return 0;
}

uint64_t UniqueSortedBuffer.binarySearchSeek(_:startOffset:endOffset:)(uint64_t a1, _QWORD *a2, _QWORD *a3, uint64_t a4)
{
  __int128 *v4;
  uint64_t v7;
  uint64_t v8;
  uint64_t result;
  _QWORD *v10;
  _QWORD *v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  __int128 v17;
  uint64_t v18;
  char v19;
  char v20;
  _QWORD v21[2];
  __int128 v22;
  __int128 v23;

  v7 = *(_QWORD *)(a4 + 16);
  v8 = *(_QWORD *)(v7 - 8);
  result = MEMORY[0x1E0C80A78](a1, a2);
  v13 = (char *)v21 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = *v10;
  if (__OFSUB__(*v11, *v10))
  {
    __break(1u);
    goto LABEL_11;
  }
  v15 = *v11 - *v10 + ((uint64_t)(*v11 - *v10) < 0);
  v16 = v14 + (*v11 - *v10) / 2;
  if (__OFADD__(v14, (*v11 - *v10) / 2))
  {
LABEL_11:
    __break(1u);
    goto LABEL_12;
  }
  v17 = v4[1];
  v22 = *v4;
  v23 = v17;
  v21[1] = v14 + (v15 >> 1);
  v18 = sub_1CA1F09F4();
  MEMORY[0x1CAA4BB30](MEMORY[0x1E0DEA5E8], v18);
  sub_1CA1F13C0();
  sub_1CA1F13CC();
  v19 = sub_1CA1F09D0();
  if ((v19 & 1) != 0)
  {
    (*(void (**)(char *, uint64_t))(v8 + 8))(v13, v7);
    *a2 = v16;
    return v19 & 1;
  }
  v20 = sub_1CA1F0988();
  result = (*(uint64_t (**)(char *, uint64_t))(v8 + 8))(v13, v7);
  if ((v20 & 1) != 0)
  {
    *a3 = v16;
    return v19 & 1;
  }
  if (!__OFADD__(v16, 1))
  {
    *a2 = v16 + 1;
    return v19 & 1;
  }
LABEL_12:
  __break(1u);
  return result;
}

uint64_t UniqueSortedBuffer.linearSearch(_:startOffset:endOffset:)(uint64_t a1, uint64_t *a2, uint64_t *a3, uint64_t a4)
{
  __int128 *v4;
  uint64_t v7;
  uint64_t v8;
  uint64_t result;
  uint64_t v10;
  char *v11;
  uint64_t *v12;
  uint64_t *v13;
  uint64_t v14;
  __int128 v15;
  uint64_t v16;
  char v17;
  __int128 v18;
  __int128 v19;
  uint64_t v20;
  __int128 v21;
  __int128 v22;

  v7 = *(_QWORD *)(a4 + 16);
  v8 = *(_QWORD *)(v7 - 8);
  result = MEMORY[0x1E0C80A78](a1, a2);
  v11 = (char *)&v18 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = *v13;
  if (*v13 < *v12)
  {
    v15 = *v4;
    v18 = v4[1];
    v19 = v15;
    v16 = sub_1CA1F09F4();
    while (1)
    {
      v21 = v19;
      v22 = v18;
      v20 = v14;
      MEMORY[0x1CAA4BB30](MEMORY[0x1E0DEA5E8], v16);
      sub_1CA1F13C0();
      sub_1CA1F13CC();
      if ((sub_1CA1F097C() & 1) == 0)
        break;
      result = (*(uint64_t (**)(char *, uint64_t))(v8 + 8))(v11, v7);
      v14 = *a2 + 1;
      if (__OFADD__(*a2, 1))
      {
        __break(1u);
        return result;
      }
      *a2 = v14;
      if (v14 >= *a3)
        return result;
    }
    v17 = sub_1CA1F0988();
    result = (*(uint64_t (**)(char *, uint64_t))(v8 + 8))(v11, v7);
    if ((v17 & 1) != 0)
      *a3 = *a2;
  }
  return result;
}

uint64_t UniqueSortedBuffer.binarySearch(_:startOffset:endOffset:)(uint64_t result, uint64_t *a2, uint64_t *a3, uint64_t a4)
{
  uint64_t v7;

  if (__OFSUB__(*a3, *a2))
  {
LABEL_9:
    __break(1u);
  }
  else
  {
    v7 = result;
    if (*a3 - *a2 < 129)
    {
      return UniqueSortedBuffer.linearSearch(_:startOffset:endOffset:)(v7, a2, a3, a4);
    }
    else
    {
      while (1)
      {
        result = UniqueSortedBuffer.binarySearchSeek(_:startOffset:endOffset:)(v7, a2, a3, a4);
        if ((result & 1) != 0)
          break;
        if (__OFSUB__(*a3, *a2))
        {
          __break(1u);
          goto LABEL_9;
        }
        if (*a3 - *a2 <= 128)
          return UniqueSortedBuffer.linearSearch(_:startOffset:endOffset:)(v7, a2, a3, a4);
      }
    }
  }
  return result;
}

uint64_t UniqueSortedBuffer.find(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t *v3;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t result;
  BOOL v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;

  v7 = *v3;
  v8 = v3[1];
  v9 = v3[2];
  v10 = v3[3];
  v11 = sub_1CA1F09F4();
  MEMORY[0x1CAA4BB30](MEMORY[0x1E0DEA5E8], v11);
  v12 = sub_1CA1F13C0();
  sub_1CA1F139C();
  v16 = v7;
  v17 = v8;
  v18 = v9;
  v19 = v10;
  MEMORY[0x1CAA4AAB0](&v15, v12);
  v16 = v7;
  v17 = v8;
  v18 = v9;
  v19 = v10;
  result = UniqueSortedBuffer.binarySearch(_:startOffset:endOffset:)(a1, &v20, &v15, a2);
  v14 = v20 != v15;
  *(_QWORD *)a3 = v20;
  *(_BYTE *)(a3 + 8) = v14;
  return result;
}

uint64_t UniqueSortedBuffer.contains(_:)(uint64_t a1, uint64_t a2)
{
  _BYTE v3[16];

  UniqueSortedBuffer.find(_:)(a1, a2, (uint64_t)v3);
  return v3[8];
}

uint64_t type metadata accessor for UniqueSortedBuffer(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for UniqueSortedBuffer);
}

uint64_t sub_1CA0C82C0(uint64_t a1, unsigned int a2)
{
  unsigned int v3;
  BOOL v4;
  int v5;

  if (!a2)
    return 0;
  if (a2 >= 0xFF && *(_BYTE *)(a1 + 9))
    return (*(_DWORD *)a1 + 255);
  v3 = *(unsigned __int8 *)(a1 + 8);
  v4 = v3 >= 2;
  v5 = (v3 + 2147483646) & 0x7FFFFFFF;
  if (!v4)
    v5 = -1;
  return (v5 + 1);
}

uint64_t sub_1CA0C8314(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFE)
  {
    *(_BYTE *)(result + 8) = 0;
    *(_QWORD *)result = a2 - 255;
    if (a3 >= 0xFF)
      *(_BYTE *)(result + 9) = 1;
  }
  else
  {
    if (a3 >= 0xFF)
      *(_BYTE *)(result + 9) = 0;
    if (a2)
      *(_BYTE *)(result + 8) = a2 + 1;
  }
  return result;
}

uint64_t type metadata accessor for UniqueSortedBuffer.SearchResult(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for UniqueSortedBuffer.SearchResult);
}

void sub_1CA0C8364(uint64_t a1, unint64_t a2)
{
  sub_1CA0C8378(a1, a2, (unint64_t *)&qword_1EF93A320);
}

void sub_1CA0C8378(uint64_t a1, unint64_t a2, unint64_t *a3)
{
  uint64_t v5;
  id v6;
  void *v7;
  char v8;
  uint64_t i;
  id v10;
  void *v11;
  char v12;

  if (a2 >> 62)
    goto LABEL_20;
  v5 = *(_QWORD *)((a2 & 0xFFFFFFFFFFFFF8) + 0x10);
  if (v5)
  {
    while (1)
    {
      if ((a2 & 0xC000000000000001) != 0)
      {
        v6 = (id)MEMORY[0x1CAA4A7A4](0, a2);
      }
      else
      {
        if (!*(_QWORD *)((a2 & 0xFFFFFFFFFFFFF8) + 0x10))
        {
          __break(1u);
          return;
        }
        v6 = *(id *)(a2 + 32);
      }
      v7 = v6;
      sub_1CA0AB910(0, a3);
      v8 = sub_1CA1F0E68();

      if ((v8 & 1) == 0)
      {
        for (i = 0; ; ++i)
        {
          a3 = (unint64_t *)(i + 1);
          if (__OFADD__(i, 1))
            break;
          if (a3 == (unint64_t *)v5)
            return;
          if ((a2 & 0xC000000000000001) != 0)
          {
            v10 = (id)MEMORY[0x1CAA4A7A4](i + 1, a2);
          }
          else
          {
            if (((unint64_t)a3 & 0x8000000000000000) != 0)
              goto LABEL_18;
            if ((unint64_t)a3 >= *(_QWORD *)((a2 & 0xFFFFFFFFFFFFFF8) + 0x10))
              goto LABEL_19;
            v10 = *(id *)(a2 + 32 + 8 * (_QWORD)a3);
          }
          v11 = v10;
          v12 = sub_1CA1F0E68();

          if ((v12 & 1) != 0)
            return;
        }
        __break(1u);
LABEL_18:
        __break(1u);
LABEL_19:
        __break(1u);
LABEL_20:
        swift_bridgeObjectRetain();
        v5 = sub_1CA1F1234();
        swift_bridgeObjectRelease();
        if (v5)
          continue;
      }
      return;
    }
  }
}

BOOL static MATensorMode.== infix(_:_:)(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return *a1 == *a2;
}

uint64_t MATensorMode.hash(into:)()
{
  return sub_1CA1F13FC();
}

uint64_t MATensorMode.hashValue.getter()
{
  sub_1CA1F13F0();
  sub_1CA1F13FC();
  return sub_1CA1F1438();
}

uint64_t MAGraph.adjencyTensor(directed:weighted:)(char a1, char a2)
{
  void *v2;
  void *v3;
  id v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  id v10;
  char isUniquelyReferenced_nonNull_native;
  char v12;
  unint64_t v13;
  uint64_t v14;
  _BOOL8 v15;
  uint64_t v16;
  char v17;
  unint64_t v18;
  char v19;
  uint64_t v20;
  uint64_t v21;
  BOOL v22;
  uint64_t v23;
  id v24;
  id v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  int64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  void *v34;
  unint64_t v35;
  uint64_t v36;
  unint64_t v37;
  int64_t v38;
  unint64_t v39;
  int64_t v40;
  uint64_t v41;
  void *v42;
  unint64_t v43;
  uint64_t v44;
  id v45;
  uint64_t v46;
  char **v47;
  uint64_t v48;
  uint64_t v49;
  unint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  id v55;
  unint64_t v56;
  char v57;
  id v58;
  id v59;
  uint64_t v60;
  unint64_t v61;
  unint64_t v62;
  id v63;
  int64_t v64;
  unint64_t v65;
  uint64_t v66;
  unint64_t v67;
  char v68;
  uint64_t v69;
  uint64_t v70;
  double v71;
  float v72;
  _QWORD *v73;
  uint64_t v74;
  unint64_t v75;
  _QWORD *v76;
  double v77;
  float v78;
  uint64_t v79;
  unint64_t v80;
  _QWORD *v81;
  uint64_t v82;
  id v83;
  id v84;
  char v85;
  id v86;
  _QWORD *v87;
  uint64_t result;
  uint64_t v90;
  uint64_t v92;
  int64_t v93;
  uint64_t v94;
  int64_t v95;
  uint64_t v96;
  unint64_t v97;
  uint64_t v98;
  void *v99;
  void *v100;
  uint64_t v101;
  _QWORD *v102;
  _QWORD *v103;
  int64_t v104;
  id v105;
  _QWORD *v106;
  void *v107;
  uint64_t v108;
  uint64_t v109;
  unint64_t v110;
  _QWORD *v111;
  _QWORD *v112;
  uint64_t v113;
  uint64_t v114;
  unint64_t v115;

  v3 = v2;
  v109 = MEMORY[0x1E0DEE9D8];
  v110 = MEMORY[0x1E0DEE9D8];
  v108 = MEMORY[0x1E0DEE9D8];
  v4 = objc_msgSend(v2, sel_allNodes);
  sub_1CA0AB910(0, (unint64_t *)&qword_1EF93A320);
  sub_1CA0CBCF8((unint64_t *)&qword_1EF937678, (unint64_t *)&qword_1EF93A320);
  v5 = sub_1CA1F0C94();

  sub_1CA0B2380(v5);
  v6 = v110;
  if (v110 >> 62)
    goto LABEL_22;
  v7 = *(_QWORD *)((v110 & 0xFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain();
  while (v7)
  {
    v105 = v3;
    v8 = 0;
    v9 = (_QWORD *)MEMORY[0x1E0DEE9E0];
    while (1)
    {
      v3 = (void *)(v8 + 1);
      if (__OFADD__(v8, 1))
        break;
      v10 = *(id *)(v110 + 8 * v8 + 32);
      isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      v111 = v9;
      v13 = sub_1CA0AA594((uint64_t)v10);
      v14 = v9[2];
      v15 = (v12 & 1) == 0;
      v16 = v14 + v15;
      if (__OFADD__(v14, v15))
        goto LABEL_20;
      v17 = v12;
      if (v9[3] >= v16)
      {
        if ((isUniquelyReferenced_nonNull_native & 1) != 0)
        {
          if ((v12 & 1) != 0)
            goto LABEL_4;
        }
        else
        {
          sub_1CA0EFAF8();
          if ((v17 & 1) != 0)
            goto LABEL_4;
        }
      }
      else
      {
        sub_1CA0EBE7C(v16, isUniquelyReferenced_nonNull_native);
        v18 = sub_1CA0AA594((uint64_t)v10);
        if ((v17 & 1) != (v19 & 1))
          goto LABEL_122;
        v13 = v18;
        if ((v17 & 1) != 0)
        {
LABEL_4:
          *(_QWORD *)(v9[7] + 8 * v13) = v8;
          goto LABEL_5;
        }
      }
      v9[(v13 >> 6) + 8] |= 1 << v13;
      v20 = 8 * v13;
      *(_QWORD *)(v9[6] + v20) = v10;
      *(_QWORD *)(v9[7] + v20) = v8;
      v21 = v9[2];
      v22 = __OFADD__(v21, 1);
      v23 = v21 + 1;
      if (v22)
        goto LABEL_21;
      v9[2] = v23;
      v24 = v10;
LABEL_5:

      swift_bridgeObjectRelease();
      ++v8;
      if (v3 == (void *)v7)
      {
        swift_bridgeObjectRelease();
        v3 = v105;
        goto LABEL_24;
      }
    }
    __break(1u);
LABEL_20:
    __break(1u);
LABEL_21:
    __break(1u);
LABEL_22:
    swift_bridgeObjectRetain_n();
    v7 = sub_1CA1F1234();
    swift_bridgeObjectRelease();
  }
  swift_bridgeObjectRelease();
  v9 = (_QWORD *)MEMORY[0x1E0DEE9E0];
LABEL_24:
  v25 = objc_msgSend(v3, sel_abstractEdges);
  v26 = sub_1CA0AB910(0, (unint64_t *)&qword_1EF936F60);
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EF9379C8);
  sub_1CA0CBCF8(&qword_1EF9379D0, (unint64_t *)&qword_1EF936F60);
  v27 = sub_1CA1F08D4();

  v28 = 0;
  v29 = 0;
  v30 = *(_QWORD *)(v27 + 64);
  v92 = v27 + 64;
  v31 = 1 << *(_BYTE *)(v27 + 32);
  if (v31 < 64)
    v32 = ~(-1 << v31);
  else
    v32 = -1;
  v33 = v32 & v30;
  v93 = (unint64_t)(v31 + 63) >> 6;
  v94 = v27;
  v34 = (void *)MEMORY[0x1E0DEE9E0];
  if ((v32 & v30) == 0)
    goto LABEL_29;
  while (2)
  {
    v35 = __clz(__rbit64(v33));
    v36 = (v33 - 1) & v33;
    v37 = v35 | (v29 << 6);
LABEL_43:
    v41 = 8 * v37;
    v42 = *(void **)(*(_QWORD *)(v94 + 48) + v41);
    v43 = *(_QWORD *)(*(_QWORD *)(v94 + 56) + v41);
    v100 = v42;
    if (v6 >> 62)
    {
      v86 = v42;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      v46 = sub_1CA1F1234();
      v44 = sub_1CA1F1234();
      swift_bridgeObjectRelease();
    }
    else
    {
      v44 = *(_QWORD *)((v6 & 0xFFFFFFFFFFFFF8) + 0x10);
      v45 = v42;
      swift_bridgeObjectRetain();
      v46 = v44;
    }
    v47 = &selRef_initWithElementIdentifier_;
    if ((unsigned __int128)(v46 * (__int128)v44) >> 64 != (v46 * v44) >> 63)
    {
LABEL_110:
      __break(1u);
LABEL_111:
      __break(1u);
LABEL_112:
      __break(1u);
      goto LABEL_113;
    }
    v96 = v46;
    v101 = v44;
    v98 = v28;
    v99 = v34;
    v102 = (_QWORD *)sub_1CA0B4464(v46 * v44, 0.0);
    v95 = v29;
    if ((v43 & 0xC000000000000001) != 0)
    {
      sub_1CA1F0F64();
      sub_1CA1F0CC4();
      v43 = (unint64_t)v111;
      v106 = v112;
      v48 = v113;
      v49 = v114;
      v50 = v115;
    }
    else
    {
      v49 = 0;
      v51 = -1 << *(_BYTE *)(v43 + 32);
      v106 = (_QWORD *)(v43 + 56);
      v48 = ~v51;
      v52 = -v51;
      if (v52 < 64)
        v53 = ~(-1 << v52);
      else
        v53 = -1;
      v50 = v53 & *(_QWORD *)(v43 + 56);
    }
    v97 = v36;
    v104 = (unint64_t)(v48 + 64) >> 6;
    v103 = (_QWORD *)v43;
    while (1)
    {
      v60 = v49;
      if ((v43 & 0x8000000000000000) == 0)
        break;
      if (!sub_1CA1F0FD0())
        goto LABEL_100;
      swift_unknownObjectRetain();
      swift_dynamicCast();
      v63 = v107;
      swift_unknownObjectRelease();
      if (!v107)
        goto LABEL_100;
LABEL_78:
      v59 = objc_msgSend(v63, v47[406]);
      v58 = objc_msgSend(v63, sel_targetNode);
      if (!v9[2])
        goto LABEL_56;
      v59 = v59;
      v67 = sub_1CA0AA594((uint64_t)v59);
      if ((v68 & 1) == 0)
        goto LABEL_55;
      v69 = *(_QWORD *)(v9[7] + 8 * v67);

      if (v9[2])
      {
        v54 = v26;
        v55 = v58;
        v56 = sub_1CA0AA594((uint64_t)v55);
        if ((v57 & 1) == 0)
        {
          v58 = v59;
          v59 = v55;
          v26 = v54;
          v47 = &selRef_initWithElementIdentifier_;
          v43 = (unint64_t)v103;
LABEL_55:

          v58 = v59;
          goto LABEL_56;
        }
        v70 = *(_QWORD *)(v9[7] + 8 * v56);

        v71 = 1.0;
        if ((a2 & 1) != 0)
        {
          objc_msgSend(v63, sel_weight);
          v71 = v72;
        }
        v73 = v102;
        v74 = v69 * v101;
        if ((unsigned __int128)(v69 * (__int128)v101) >> 64 != (v69 * v101) >> 63)
          goto LABEL_114;
        v90 = v70;
        v22 = __OFADD__(v74, v70);
        v75 = v74 + v70;
        if (v22)
          goto LABEL_115;
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) != 0)
        {
          if ((v75 & 0x8000000000000000) != 0)
            goto LABEL_116;
        }
        else
        {
          v73 = sub_1CA0B6058(v102);
          if ((v75 & 0x8000000000000000) != 0)
            goto LABEL_116;
        }
        if (v75 >= v73[2])
          goto LABEL_117;
        v102 = v73;
        v76 = v73 + 4;
        *(double *)&v76[v75] = v71;
        if ((a1 & 1) == 0)
        {
          v77 = 1.0;
          if ((a2 & 1) != 0)
          {
            objc_msgSend(v63, sel_weight, 1.0);
            v77 = v78;
          }
          v79 = v90 * v101;
          if ((unsigned __int128)(v90 * (__int128)v101) >> 64 != (v90 * v101) >> 63)
            goto LABEL_118;
          v22 = __OFADD__(v79, v69);
          v80 = v79 + v69;
          if (v22)
            goto LABEL_119;
          if ((v80 & 0x8000000000000000) != 0)
            goto LABEL_120;
          if (v80 >= v102[2])
            goto LABEL_121;
          *(double *)&v76[v80] = v77;
        }

        v26 = v54;
        v47 = &selRef_initWithElementIdentifier_;
        v43 = (unint64_t)v103;
      }
      else
      {
        v43 = (unint64_t)v103;
LABEL_56:

      }
    }
    if (v50)
    {
      v61 = __clz(__rbit64(v50));
      v50 &= v50 - 1;
      v62 = v61 | (v49 << 6);
      goto LABEL_77;
    }
    v64 = v49 + 1;
    if (__OFADD__(v49, 1))
    {
      __break(1u);
      goto LABEL_110;
    }
    if (v64 >= v104)
      goto LABEL_100;
    v65 = v106[v64];
    ++v49;
    if (v65)
      goto LABEL_76;
    v49 = v60 + 2;
    if (v60 + 2 >= v104)
      goto LABEL_100;
    v65 = v106[v49];
    if (v65)
      goto LABEL_76;
    v49 = v60 + 3;
    if (v60 + 3 >= v104)
      goto LABEL_100;
    v65 = v106[v49];
    if (v65)
      goto LABEL_76;
    v49 = v60 + 4;
    if (v60 + 4 >= v104)
      goto LABEL_100;
    v65 = v106[v49];
    if (v65)
    {
LABEL_76:
      v50 = (v65 - 1) & v65;
      v62 = __clz(__rbit64(v65)) + (v49 << 6);
LABEL_77:
      v63 = *(id *)(*(_QWORD *)(v43 + 48) + 8 * v62);
      if (!v63)
        goto LABEL_100;
      goto LABEL_78;
    }
    v66 = v60 + 5;
    while (v104 != v66)
    {
      v65 = v106[v66++];
      if (v65)
      {
        v49 = v66 - 1;
        goto LABEL_76;
      }
    }
LABEL_100:
    sub_1CA0B6A14();
    v6 = v110;
    type metadata accessor for MASquareMatrixRepresentation();
    v81 = (_QWORD *)swift_allocObject();
    v81[2] = v96;
    v81[3] = v101;
    v81[4] = v102;
    v81[5] = v110;
    swift_bridgeObjectRetain();
    v82 = swift_retain();
    MEMORY[0x1CAA4A1E0](v82);
    if (*(_QWORD *)((v108 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(_QWORD *)((v108 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1)
      sub_1CA1F0B2C();
    sub_1CA1F0B8C();
    sub_1CA1F0B14();
    v83 = v100;
    MEMORY[0x1CAA4A1E0]();
    v33 = v97;
    if (*(_QWORD *)((v109 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(_QWORD *)((v109 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1)
      sub_1CA1F0B2C();
    sub_1CA1F0B8C();
    sub_1CA1F0B14();
    v84 = v83;
    v85 = swift_isUniquelyReferenced_nonNull_native();
    v107 = v99;
    sub_1CA0AE724(v98, v84, v85);
    v34 = v99;
    swift_release();

    swift_bridgeObjectRelease();
    v28 = v98 + 1;
    if (__OFADD__(v98, 1))
      goto LABEL_111;
    v29 = v95;
    if (v97)
      continue;
    break;
  }
LABEL_29:
  v38 = v29 + 1;
  if (__OFADD__(v29, 1))
    goto LABEL_112;
  if (v38 >= v93)
    goto LABEL_108;
  v39 = *(_QWORD *)(v92 + 8 * v38);
  ++v29;
  if (v39)
    goto LABEL_42;
  v29 = v38 + 1;
  if (v38 + 1 >= v93)
    goto LABEL_108;
  v39 = *(_QWORD *)(v92 + 8 * v29);
  if (v39)
    goto LABEL_42;
  v29 = v38 + 2;
  if (v38 + 2 >= v93)
    goto LABEL_108;
  v39 = *(_QWORD *)(v92 + 8 * v29);
  if (v39)
    goto LABEL_42;
  v40 = v38 + 3;
  if (v40 >= v93)
  {
LABEL_108:
    swift_release();
    swift_bridgeObjectRelease();
    type metadata accessor for MATensor();
    v87 = (_QWORD *)swift_allocObject();
    v87[2] = v108;
    v87[3] = v6;
    v87[4] = v109;
    swift_bridgeObjectRelease();
    return (uint64_t)v87;
  }
  v39 = *(_QWORD *)(v92 + 8 * v40);
  if (v39)
  {
    v29 = v40;
LABEL_42:
    v36 = (v39 - 1) & v39;
    v37 = __clz(__rbit64(v39)) + (v29 << 6);
    goto LABEL_43;
  }
  while (1)
  {
    v29 = v40 + 1;
    if (__OFADD__(v40, 1))
      break;
    if (v29 >= v93)
      goto LABEL_108;
    v39 = *(_QWORD *)(v92 + 8 * v29);
    ++v40;
    if (v39)
      goto LABEL_42;
  }
LABEL_113:
  __break(1u);
LABEL_114:
  __break(1u);
LABEL_115:
  __break(1u);
LABEL_116:
  __break(1u);
LABEL_117:
  __break(1u);
LABEL_118:
  __break(1u);
LABEL_119:
  __break(1u);
LABEL_120:
  __break(1u);
LABEL_121:
  __break(1u);
LABEL_122:
  result = sub_1CA1F1360();
  __break(1u);
  return result;
}

uint64_t sub_1CA0C8FC8(char a1, char a2)
{
  return MAGraph.adjencyTensor(directed:weighted:)(a1, a2);
}

uint64_t MATensor.distributions.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t MATensor.entities.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t MATensor.relations.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t sub_1CA0C9000()
{
  uint64_t v0;
  unint64_t v1;
  uint64_t v2;

  v1 = *(_QWORD *)(v0 + 24);
  if (v1 >> 62)
  {
    swift_bridgeObjectRetain();
    v2 = sub_1CA1F1234();
    swift_bridgeObjectRelease();
  }
  else
  {
    v2 = *(_QWORD *)((v1 & 0xFFFFFFFFFFFFF8) + 0x10);
  }
  if (*(_QWORD *)(v0 + 32) >> 62)
  {
    swift_bridgeObjectRetain();
    sub_1CA1F1234();
    swift_bridgeObjectRelease();
  }
  return v2;
}

uint64_t sub_1CA0C90A8(uint64_t result, int64_t a2, uint64_t a3)
{
  _QWORD *v3;
  void *v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  id v15;

  v6 = (void *)result;
  v7 = v3[3];
  if (v7 >> 62)
  {
    swift_bridgeObjectRetain();
    v11 = sub_1CA1F1234();
    result = swift_bridgeObjectRelease();
    if (v11 <= (uint64_t)v6)
      goto LABEL_26;
    swift_bridgeObjectRetain();
    v12 = sub_1CA1F1234();
    swift_bridgeObjectRelease();
    if (v12 > a2)
      goto LABEL_4;
LABEL_17:
    __break(1u);
    goto LABEL_18;
  }
  v8 = *(_QWORD *)((v7 & 0xFFFFFFFFFFFFF8) + 0x10);
  if (v8 <= result)
    goto LABEL_26;
  if (v8 <= a2)
    goto LABEL_17;
LABEL_4:
  v7 = v3[4];
  if (!(v7 >> 62))
  {
    if (*(_QWORD *)((v7 & 0xFFFFFFFFFFFFF8) + 0x10) > a3)
      goto LABEL_6;
LABEL_19:
    __break(1u);
    goto LABEL_20;
  }
LABEL_18:
  swift_bridgeObjectRetain();
  v13 = sub_1CA1F1234();
  swift_bridgeObjectRelease();
  if (v13 <= a3)
    goto LABEL_19;
LABEL_6:
  v9 = v3[2];
  if ((v9 & 0xC000000000000001) == 0)
  {
    if (a3 < 0)
    {
      __break(1u);
    }
    else if (*(_QWORD *)((v9 & 0xFFFFFFFFFFFFF8) + 0x10) > (unint64_t)a3)
    {
      swift_retain();
      goto LABEL_10;
    }
    __break(1u);
    goto LABEL_23;
  }
LABEL_20:
  MEMORY[0x1CAA4A7A4](a3);
LABEL_10:
  v6 = (void *)sub_1CA0D5748((unint64_t)v6, a2);
  v3 = v10;
  result = swift_release();
  if ((v7 & 0xC000000000000001) != 0)
  {
LABEL_23:
    v14 = v3;
    v15 = v6;
    MEMORY[0x1CAA4A7A4](a3, v7);

    return (uint64_t)v6;
  }
  if (a3 < 0)
  {
    __break(1u);
  }
  else if (*(_QWORD *)((v7 & 0xFFFFFFFFFFFFF8) + 0x10) > (unint64_t)a3)
  {
    *(id *)(v7 + 8 * a3 + 32);
    return (uint64_t)v6;
  }
  __break(1u);
LABEL_26:
  __break(1u);
  return result;
}

uint64_t sub_1CA0C9298@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v4;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  char v12;
  char v13;
  uint64_t result;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char v21;
  char v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  BOOL v27;

  v9 = *(_QWORD *)(v4 + 32);
  swift_bridgeObjectRetain();
  sub_1CA0C8378(a3, v9, (unint64_t *)&qword_1EF936F60);
  v11 = v10;
  v13 = v12;
  result = swift_bridgeObjectRelease();
  if ((v13 & 1) != 0)
  {
    v23 = 0;
    v24 = 0;
    v25 = 0;
    v26 = 0;
    v27 = 1;
LABEL_20:
    *(_QWORD *)a4 = v23;
    *(_QWORD *)(a4 + 8) = v24;
    *(_QWORD *)(a4 + 16) = v25;
    *(_QWORD *)(a4 + 24) = v26;
    *(_BYTE *)(a4 + 32) = v27;
    return result;
  }
  v15 = *(_QWORD *)(v4 + 16);
  if ((v15 & 0xC000000000000001) != 0)
  {
    MEMORY[0x1CAA4A7A4](v11);
    goto LABEL_6;
  }
  if ((v11 & 0x8000000000000000) != 0)
  {
    __break(1u);
  }
  else if (v11 < *(_QWORD *)((v15 & 0xFFFFFFFFFFFFF8) + 0x10))
  {
    swift_retain();
LABEL_6:
    v16 = sub_1CA0D584C(a1, a2);
    v18 = v17;
    v20 = v19;
    v22 = v21;
    result = swift_release();
    if ((v22 & 1) != 0)
      v23 = 0;
    else
      v23 = v16;
    if ((v22 & 1) != 0)
      v24 = 0;
    else
      v24 = v18;
    if ((v22 & 1) != 0)
      v25 = 0;
    else
      v25 = v20;
    if ((v22 & 1) != 0)
      v26 = 0;
    else
      v26 = v11;
    v27 = (v22 & 1) != 0;
    goto LABEL_20;
  }
  __break(1u);
  return result;
}

uint64_t sub_1CA0C93C0(uint64_t result)
{
  uint64_t v1;
  unint64_t v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  id v6;
  uint64_t v7;

  v2 = result;
  v3 = *(_QWORD *)(v1 + 32);
  if (!(v3 >> 62))
  {
    if (*(_QWORD *)((v3 & 0xFFFFFFFFFFFFF8) + 0x10) > result)
      goto LABEL_3;
LABEL_12:
    __break(1u);
    goto LABEL_13;
  }
  swift_bridgeObjectRetain();
  v7 = sub_1CA1F1234();
  result = swift_bridgeObjectRelease();
  if (v7 <= (uint64_t)v2)
    goto LABEL_12;
LABEL_3:
  v4 = *(_QWORD *)(v1 + 16);
  if ((v4 & 0xC000000000000001) == 0)
  {
    if ((v2 & 0x8000000000000000) != 0)
    {
      __break(1u);
    }
    else if (*(_QWORD *)((v4 & 0xFFFFFFFFFFFFF8) + 0x10) > v2)
    {
      v5 = *(_QWORD *)(v4 + 8 * v2 + 32);
      result = swift_retain();
      if ((v3 & 0xC000000000000001) == 0)
        goto LABEL_7;
LABEL_14:
      MEMORY[0x1CAA4A7A4](v2, v3);
      return v5;
    }
    __break(1u);
    goto LABEL_17;
  }
LABEL_13:
  result = MEMORY[0x1CAA4A7A4](v2);
  v5 = result;
  if ((v3 & 0xC000000000000001) != 0)
    goto LABEL_14;
LABEL_7:
  if ((v2 & 0x8000000000000000) != 0)
  {
LABEL_17:
    __break(1u);
    goto LABEL_18;
  }
  if (*(_QWORD *)((v3 & 0xFFFFFFFFFFFFF8) + 0x10) > v2)
  {
    v6 = *(id *)(v3 + 8 * v2 + 32);
    return v5;
  }
LABEL_18:
  __break(1u);
  return result;
}

uint64_t sub_1CA0C94C8(uint64_t a1)
{
  uint64_t v1;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  char v6;
  char v7;
  uint64_t result;
  uint64_t v9;

  v3 = *(_QWORD *)(v1 + 32);
  swift_bridgeObjectRetain();
  sub_1CA0C8378(a1, v3, (unint64_t *)&qword_1EF936F60);
  v5 = v4;
  v7 = v6;
  result = swift_bridgeObjectRelease();
  if ((v7 & 1) != 0)
    return 0;
  v9 = *(_QWORD *)(v1 + 16);
  if ((v9 & 0xC000000000000001) != 0)
    return MEMORY[0x1CAA4A7A4](v5);
  if ((v5 & 0x8000000000000000) != 0)
  {
    __break(1u);
  }
  else if (v5 < *(_QWORD *)((v9 & 0xFFFFFFFFFFFFF8) + 0x10))
  {
    return swift_retain();
  }
  __break(1u);
  return result;
}

uint64_t sub_1CA0C9578@<X0>(_BYTE *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v3;
  _QWORD *v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t result;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  _QWORD *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t *v33;
  uint64_t *v34;
  uint64_t v35;
  unint64_t v36;
  uint64_t v37;
  uint64_t v38;

  v6 = a2;
  if (!*a1)
  {
    v8 = *(_QWORD *)(v3 + 24);
    v4 = (_QWORD *)(v8 >> 62);
    if (!(v8 >> 62))
    {
      v9 = *(_QWORD *)((v8 & 0xFFFFFFFFFFFFF8) + 0x10);
      if ((uint64_t)v9 <= a2)
      {
LABEL_22:
        __break(1u);
        goto LABEL_23;
      }
LABEL_10:
      v12 = *(_QWORD *)(v3 + 32);
      v13 = v12 >> 62;
      if (v12 >> 62)
        goto LABEL_62;
      v14 = *(_QWORD *)((v12 & 0xFFFFFFFFFFFFF8) + 0x10);
      if (!v4)
        goto LABEL_12;
LABEL_63:
      swift_bridgeObjectRetain();
      v15 = sub_1CA1F1234();
      swift_bridgeObjectRelease();
LABEL_64:
      if ((unsigned __int128)(v14 * (__int128)v15) >> 64 != (v14 * v15) >> 63)
        goto LABEL_95;
      v38 = v6;
      result = sub_1CA0B4464(v14 * v15, 0.0);
      v6 = result;
      if (v13)
      {
        swift_bridgeObjectRetain();
        v25 = sub_1CA1F1234();
        result = swift_bridgeObjectRelease();
        if (v25 < 0)
        {
LABEL_98:
          __break(1u);
LABEL_99:
          __break(1u);
LABEL_100:
          __break(1u);
LABEL_101:
          __break(1u);
LABEL_102:
          swift_bridgeObjectRetain();
LABEL_103:
          result = sub_1CA1F11BC();
          __break(1u);
          return result;
        }
      }
      else
      {
        v25 = *(_QWORD *)((v12 & 0xFFFFFFFFFFFFF8) + 0x10);
      }
      v34 = (uint64_t *)a3;
      if (!v25)
      {
LABEL_87:
        *v34 = v14;
        v34[1] = v15;
        v34[2] = v6;
        return result;
      }
      v26 = *(_QWORD *)(v3 + 16);
      if ((v26 & 0xC000000000000001) == 0
        && (unint64_t)(v25 - 1) >= *(_QWORD *)((v26 & 0xFFFFFFFFFFFFF8) + 0x10))
      {
        goto LABEL_101;
      }
      a3 = 0;
      while (1)
      {
        if ((v26 & 0xC000000000000001) != 0)
        {
          v27 = *(_QWORD *)(MEMORY[0x1CAA4A7A4](a3, v26) + 24);
          swift_bridgeObjectRetain();
          swift_unknownObjectRelease();
          if ((v27 & 0x8000000000000000) != 0)
            goto LABEL_103;
        }
        else
        {
          v27 = *(_QWORD *)(*(_QWORD *)(v26 + 8 * a3 + 32) + 24);
          swift_bridgeObjectRetain();
          if ((v27 & 0x8000000000000000) != 0)
            goto LABEL_103;
        }
        if (v27)
        {
          v28 = sub_1CA1F0B68();
          *(_QWORD *)(v28 + 16) = v27;
          bzero((void *)(v28 + 32), 8 * v27);
          if (v27 >> 31)
            break;
        }
        if ((unsigned __int128)(v38 * (__int128)(uint64_t)v27) >> 64 != (uint64_t)(v38 * v27) >> 63)
          goto LABEL_88;
        cblas_dcopy_NEWLAPACK();
        swift_bridgeObjectRelease();
        if (v27 != v15)
          goto LABEL_89;
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
          v6 = (uint64_t)sub_1CA0B6058((_QWORD *)v6);
        if (v15 < (uint64_t)0xFFFFFFFF80000000)
          goto LABEL_90;
        if (v15 > 0x7FFFFFFF)
          goto LABEL_91;
        if ((unsigned __int128)(a3 * (__int128)v15) >> 64 != (a3 * v15) >> 63)
          goto LABEL_92;
        ++a3;
        cblas_dcopy_NEWLAPACK();
        result = swift_bridgeObjectRelease();
        if (v25 == a3)
          goto LABEL_87;
      }
      __break(1u);
LABEL_88:
      __break(1u);
LABEL_89:
      __break(1u);
LABEL_90:
      __break(1u);
LABEL_91:
      __break(1u);
LABEL_92:
      __break(1u);
LABEL_93:
      v29 = (_QWORD *)MEMORY[0x1CAA4A7A4](v6);
      v30 = v29[2];
      v31 = v29[3];
      v32 = v29[4];
      swift_bridgeObjectRetain();
      result = swift_unknownObjectRelease();
      *(_QWORD *)a3 = v30;
      *(_QWORD *)(a3 + 8) = v31;
      *(_QWORD *)(a3 + 16) = v32;
      return result;
    }
LABEL_21:
    swift_bridgeObjectRetain();
    v9 = sub_1CA1F1234();
    swift_bridgeObjectRelease();
    if ((uint64_t)v9 <= v6)
      goto LABEL_22;
    goto LABEL_10;
  }
  if (*a1 != 1)
  {
    v9 = *(_QWORD *)(v3 + 32);
    if (!(v9 >> 62))
    {
      v8 = *(_QWORD *)((v9 & 0xFFFFFFFFFFFFF8) + 0x10);
      if ((uint64_t)v8 <= a2)
      {
LABEL_24:
        __break(1u);
LABEL_25:
        swift_bridgeObjectRetain();
        v10 = sub_1CA1F1234();
        swift_bridgeObjectRelease();
        if (!v4)
          goto LABEL_7;
        goto LABEL_26;
      }
      goto LABEL_15;
    }
LABEL_23:
    swift_bridgeObjectRetain();
    v8 = sub_1CA1F1234();
    swift_bridgeObjectRelease();
    if ((uint64_t)v8 <= v6)
      goto LABEL_24;
LABEL_15:
    v16 = *(_QWORD *)(v3 + 16);
    if ((v16 & 0xC000000000000001) == 0)
    {
      if ((v6 & 0x8000000000000000) == 0)
      {
        if (*(_QWORD *)((v16 & 0xFFFFFFFFFFFFF8) + 0x10) > (unint64_t)v6)
        {
          v17 = *(_QWORD *)(v16 + 8 * v6 + 32);
          v18 = *(_QWORD *)(v17 + 32);
          *(_OWORD *)a3 = *(_OWORD *)(v17 + 16);
          *(_QWORD *)(a3 + 16) = v18;
          return swift_bridgeObjectRetain();
        }
        goto LABEL_99;
      }
      goto LABEL_96;
    }
    goto LABEL_93;
  }
  v8 = *(_QWORD *)(v3 + 24);
  v4 = (_QWORD *)(v8 >> 62);
  if (!(v8 >> 62))
  {
    if (*(_QWORD *)((v8 & 0xFFFFFFFFFFFFF8) + 0x10) > a2)
      goto LABEL_5;
    goto LABEL_20;
  }
  swift_bridgeObjectRetain();
  v20 = sub_1CA1F1234();
  swift_bridgeObjectRelease();
  if (v20 <= v6)
  {
LABEL_20:
    __break(1u);
    goto LABEL_21;
  }
LABEL_5:
  v9 = *(_QWORD *)(v3 + 32);
  v5 = v9 >> 62;
  if (v9 >> 62)
    goto LABEL_25;
  v10 = *(_QWORD *)((v9 & 0xFFFFFFFFFFFFF8) + 0x10);
  if (!v4)
  {
LABEL_7:
    v11 = *(_QWORD *)((v8 & 0xFFFFFFFFFFFFF8) + 0x10);
    goto LABEL_27;
  }
LABEL_26:
  swift_bridgeObjectRetain();
  v11 = sub_1CA1F1234();
  swift_bridgeObjectRelease();
LABEL_27:
  v37 = v11;
  if ((unsigned __int128)(v10 * (__int128)v11) >> 64 != (v10 * v11) >> 63)
  {
    __break(1u);
LABEL_95:
    __break(1u);
LABEL_96:
    __break(1u);
LABEL_97:
    __break(1u);
    goto LABEL_98;
  }
  result = sub_1CA0B4464(v10 * v11, 0.0);
  v4 = (_QWORD *)result;
  if (!v5)
  {
    v6 = *(_QWORD *)((v9 & 0xFFFFFFFFFFFFF8) + 0x10);
    goto LABEL_31;
  }
  swift_bridgeObjectRetain();
  v6 = sub_1CA1F1234();
  result = swift_bridgeObjectRelease();
  if (v6 < 0)
    goto LABEL_97;
LABEL_31:
  v33 = (uint64_t *)a3;
  if (v6)
  {
    v21 = *(_QWORD *)(v3 + 16);
    v36 = v21 & 0xC000000000000001;
    if ((v21 & 0xC000000000000001) != 0
      || (unint64_t)(v6 - 1) < *(_QWORD *)((v21 & 0xFFFFFFFFFFFFF8) + 0x10))
    {
      a3 = 0;
      v3 = 32;
      v35 = v21;
      while (1)
      {
        if (v36)
        {
          v22 = MEMORY[0x1CAA4A7A4](a3);
          v23 = *(_QWORD *)(v22 + 16);
          v13 = *(_QWORD *)(v22 + 24);
          swift_bridgeObjectRetain();
          swift_unknownObjectRelease();
          if ((v23 & 0x8000000000000000) != 0)
            goto LABEL_103;
          if (!v23)
            goto LABEL_42;
        }
        else
        {
          v24 = *(_QWORD *)(v21 + 8 * a3 + 32);
          v23 = *(_QWORD *)(v24 + 16);
          if ((v23 & 0x8000000000000000) != 0)
            goto LABEL_102;
          v13 = *(_QWORD *)(v24 + 24);
          swift_bridgeObjectRetain();
          if (!v23)
          {
LABEL_42:
            v12 = MEMORY[0x1E0DEE9D8];
            v8 = MEMORY[0x1E0DEE9D8] + 32;
            goto LABEL_43;
          }
        }
        v12 = sub_1CA1F0B68();
        *(_QWORD *)(v12 + 16) = v23;
        v8 = v12 + 32;
        bzero((void *)(v12 + 32), 8 * v23);
        if (v23 >> 31)
        {
          __break(1u);
LABEL_56:
          __break(1u);
LABEL_57:
          __break(1u);
LABEL_58:
          __break(1u);
LABEL_59:
          __break(1u);
LABEL_60:
          __break(1u);
LABEL_61:
          __break(1u);
LABEL_62:
          swift_bridgeObjectRetain();
          v14 = sub_1CA1F1234();
          swift_bridgeObjectRelease();
          if (v4)
            goto LABEL_63;
LABEL_12:
          v15 = *(_QWORD *)((v8 & 0xFFFFFFFFFFFFF8) + 0x10);
          goto LABEL_64;
        }
LABEL_43:
        if (v13 < (uint64_t)0xFFFFFFFF80000000)
          goto LABEL_56;
        if (v13 > 0x7FFFFFFF)
          goto LABEL_57;
        cblas_dcopy_NEWLAPACK();
        swift_bridgeObjectRelease();
        v13 = v37;
        if (a3 >= v37 || v23 != v10)
          goto LABEL_58;
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
          v4 = sub_1CA0B6058(v4);
        if (v10 > 0x7FFFFFFF)
          goto LABEL_59;
        if (v10 < (uint64_t)0xFFFFFFFF80000000)
          goto LABEL_60;
        if (v37 > 0x7FFFFFFF)
          goto LABEL_61;
        ++a3;
        cblas_dcopy_NEWLAPACK();
        result = swift_bridgeObjectRelease();
        v3 += 8;
        v21 = v35;
        if (v6 == a3)
          goto LABEL_55;
      }
    }
    goto LABEL_100;
  }
  v13 = v37;
LABEL_55:
  *v33 = v10;
  v33[1] = v13;
  v33[2] = (uint64_t)v4;
  return result;
}

uint64_t sub_1CA0C9CCC@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, _QWORD *a4@<X8>)
{
  int64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;

  v6 = a3;
  v7 = a2;
  if (!*(_BYTE *)result)
  {
    v9 = *(_QWORD *)(v4 + 24);
    if (v9 >> 62)
      goto LABEL_69;
    if (*(_QWORD *)((v9 & 0xFFFFFFFFFFFFF8) + 0x10) <= a2)
      goto LABEL_70;
LABEL_18:
    v9 = *(_QWORD *)(v4 + 32);
    if (!(v9 >> 62))
    {
      v10 = *(_QWORD *)((v9 & 0xFFFFFFFFFFFFF8) + 0x10);
      if (v10 <= v6)
      {
LABEL_78:
        __break(1u);
        goto LABEL_79;
      }
LABEL_20:
      v13 = *(_QWORD *)(v4 + 16);
      if ((v13 & 0xC000000000000001) != 0)
      {
        v14 = (_QWORD *)MEMORY[0x1CAA4A7A4](v7);
      }
      else
      {
        if (v7 < 0)
        {
LABEL_84:
          __break(1u);
          goto LABEL_85;
        }
        if (*(_QWORD *)((v13 & 0xFFFFFFFFFFFFF8) + 0x10) <= (unint64_t)v7)
        {
LABEL_90:
          __break(1u);
LABEL_91:
          __break(1u);
          goto LABEL_92;
        }
        v14 = *(_QWORD **)(v13 + 8 * v7 + 32);
        swift_retain();
      }
      v4 = v14[2];
      v10 = v14[3];
      v7 = v14[4];
      swift_bridgeObjectRetain();
      swift_release();
      v9 = sub_1CA0B4464(v4, 0.0);
      result = swift_isUniquelyReferenced_nonNull_native();
      if ((result & 1) != 0)
        goto LABEL_25;
      goto LABEL_87;
    }
LABEL_77:
    swift_bridgeObjectRetain();
    v10 = sub_1CA1F1234();
    result = swift_bridgeObjectRelease();
    if (v10 <= v6)
      goto LABEL_78;
    goto LABEL_20;
  }
  if (*(_BYTE *)result == 1)
  {
    v9 = *(_QWORD *)(v4 + 24);
    if (v9 >> 62)
      goto LABEL_67;
    if (*(_QWORD *)((v9 & 0xFFFFFFFFFFFFF8) + 0x10) <= a2)
      goto LABEL_68;
LABEL_5:
    v9 = *(_QWORD *)(v4 + 32);
    if (!(v9 >> 62))
    {
      v10 = *(_QWORD *)((v9 & 0xFFFFFFFFFFFFF8) + 0x10);
      if (v10 > v6)
        goto LABEL_7;
      goto LABEL_76;
    }
  }
  else
  {
    v9 = *(_QWORD *)(v4 + 24);
    if (v9 >> 62)
      goto LABEL_71;
    v15 = *(_QWORD *)((v9 & 0xFFFFFFFFFFFFF8) + 0x10);
    if (v15 > a2)
    {
      if (v15 > a3)
        goto LABEL_33;
LABEL_73:
      __break(1u);
    }
LABEL_74:
    __break(1u);
  }
  swift_bridgeObjectRetain();
  v10 = sub_1CA1F1234();
  result = swift_bridgeObjectRelease();
  if (v10 <= v6)
  {
LABEL_76:
    __break(1u);
    goto LABEL_77;
  }
LABEL_7:
  v11 = *(_QWORD *)(v4 + 16);
  if ((v11 & 0xC000000000000001) != 0)
  {
LABEL_79:
    v12 = MEMORY[0x1CAA4A7A4](v6);
    goto LABEL_11;
  }
  if (v6 < 0)
  {
LABEL_83:
    __break(1u);
    goto LABEL_84;
  }
  if (*(_QWORD *)((v11 & 0xFFFFFFFFFFFFF8) + 0x10) <= (unint64_t)v6)
  {
LABEL_89:
    __break(1u);
    goto LABEL_90;
  }
  v12 = *(_QWORD *)(v11 + 8 * v6 + 32);
  swift_retain();
LABEL_11:
  v4 = *(_QWORD *)(v12 + 24);
  v6 = *(_QWORD *)(v12 + 32);
  swift_bridgeObjectRetain();
  swift_release();
  v9 = sub_1CA0B4464(v4, 0.0);
  result = swift_isUniquelyReferenced_nonNull_native();
  if ((result & 1) == 0)
  {
LABEL_85:
    result = (uint64_t)sub_1CA0B6058((_QWORD *)v9);
    v9 = result;
  }
  if (v4 >= (uint64_t)0xFFFFFFFF80000000)
  {
    if (v4 <= 0x7FFFFFFF)
    {
      if ((unsigned __int128)(v7 * (__int128)v4) >> 64 == (v7 * v4) >> 63)
      {
        cblas_dcopy_NEWLAPACK();
        result = swift_bridgeObjectRelease();
        *a4 = 1;
        a4[1] = v4;
        a4[2] = v9;
        return result;
      }
      goto LABEL_94;
    }
    goto LABEL_91;
  }
  __break(1u);
LABEL_87:
  result = (uint64_t)sub_1CA0B6058((_QWORD *)v9);
  v9 = result;
LABEL_25:
  if (v4 > 0x7FFFFFFF)
  {
    __break(1u);
    goto LABEL_89;
  }
  if (v4 >= (uint64_t)0xFFFFFFFF80000000 && v10 >= (uint64_t)0xFFFFFFFF80000000)
  {
    if (v10 <= 0x7FFFFFFF)
    {
      cblas_dcopy_NEWLAPACK();
      swift_bridgeObjectRelease();
      MAMatrix.transpose()();
      return swift_bridgeObjectRelease();
    }
    goto LABEL_93;
  }
LABEL_92:
  __break(1u);
LABEL_93:
  __break(1u);
LABEL_94:
  __break(1u);
  while (1)
  {
    __break(1u);
LABEL_96:
    v29 = v9;
    if (!v5)
      break;
    while (1)
    {
      v4 = *(_QWORD *)(v4 + 16);
      v9 = v4 & 0xC000000000000001;
      if ((v4 & 0xC000000000000001) == 0
        && (unint64_t)(v5 - 1) >= *(_QWORD *)((v4 & 0xFFFFFFFFFFFFF8) + 0x10))
      {
        break;
      }
      v17 = 0;
      while (1)
      {
        if (v9)
        {
          v18 = (_QWORD *)MEMORY[0x1CAA4A7A4](v17, v4);
        }
        else
        {
          v18 = *(_QWORD **)(v4 + 8 * v17 + 32);
          swift_retain();
        }
        if (v18[2] < v7)
          break;
        v19 = v18[3];
        if (v19 < v6)
          goto LABEL_58;
        v20 = v7 * v19;
        if ((unsigned __int128)(v7 * (__int128)v19) >> 64 != (v7 * v19) >> 63)
          goto LABEL_59;
        v21 = v20 + v6;
        if (__OFADD__(v20, v6))
          goto LABEL_60;
        if ((v21 & 0x8000000000000000) != 0)
          goto LABEL_61;
        v22 = v18[4];
        if (v21 >= *(_QWORD *)(v22 + 16))
          goto LABEL_62;
        v23 = *(_QWORD *)(v22 + 8 * v21 + 32);
        v24 = v18[5];
        if ((v24 & 0xC000000000000001) != 0)
        {
          MEMORY[0x1CAA4A7A4](v7, v18[5]);
          MEMORY[0x1CAA4A7A4](v6, v24);
          swift_unknownObjectRelease();
          swift_unknownObjectRelease();
          swift_release();
        }
        else
        {
          if (v7 < 0)
            goto LABEL_63;
          v25 = *(_QWORD *)((v24 & 0xFFFFFFFFFFFFF8) + 0x10);
          swift_release();
          if (v25 <= v7)
            goto LABEL_64;
          if (v25 <= v6)
            goto LABEL_66;
        }
        result = swift_isUniquelyReferenced_nonNull_native();
        if ((result & 1) == 0)
        {
          result = (uint64_t)sub_1CA0B6058((_QWORD *)v10);
          v10 = result;
        }
        if (v17 >= *(_QWORD *)(v10 + 16))
          goto LABEL_65;
        *(_QWORD *)(v10 + 8 * v17++ + 32) = v23;
        if (v5 == v17)
          goto LABEL_97;
      }
      __break(1u);
LABEL_58:
      __break(1u);
LABEL_59:
      __break(1u);
LABEL_60:
      __break(1u);
LABEL_61:
      __break(1u);
LABEL_62:
      __break(1u);
LABEL_63:
      __break(1u);
LABEL_64:
      __break(1u);
LABEL_65:
      __break(1u);
LABEL_66:
      __break(1u);
LABEL_67:
      swift_bridgeObjectRetain();
      v26 = sub_1CA1F1234();
      result = swift_bridgeObjectRelease();
      if (v26 > v7)
        goto LABEL_5;
LABEL_68:
      __break(1u);
LABEL_69:
      swift_bridgeObjectRetain();
      v27 = sub_1CA1F1234();
      result = swift_bridgeObjectRelease();
      if (v27 > v7)
        goto LABEL_18;
LABEL_70:
      __break(1u);
LABEL_71:
      swift_bridgeObjectRetain();
      v5 = sub_1CA1F1234();
      swift_bridgeObjectRelease();
      if (v5 <= v7)
        goto LABEL_74;
      swift_bridgeObjectRetain();
      v28 = sub_1CA1F1234();
      swift_bridgeObjectRelease();
      if (v28 <= v6)
        goto LABEL_73;
LABEL_33:
      v16 = *(_QWORD *)(v4 + 32);
      if (v16 >> 62)
      {
        swift_bridgeObjectRetain();
        v9 = sub_1CA1F1234();
        swift_bridgeObjectRelease();
        v10 = sub_1CA0B4464(v9, 0.0);
        swift_bridgeObjectRetain();
        v5 = sub_1CA1F1234();
        result = swift_bridgeObjectRelease();
        if ((v5 & 0x8000000000000000) == 0)
          goto LABEL_96;
        __break(1u);
        goto LABEL_83;
      }
      v29 = *(_QWORD *)((v16 & 0xFFFFFFFFFFFFFF8) + 0x10);
      result = sub_1CA0B4464(v29, 0.0);
      v10 = result;
      v5 = *(_QWORD *)((v16 & 0xFFFFFFFFFFFFFF8) + 0x10);
      if (!v5)
        goto LABEL_97;
    }
  }
LABEL_97:
  *a4 = 1;
  a4[1] = v29;
  a4[2] = v10;
  return result;
}

uint64_t sub_1CA0CA2F8@<X0>(_BYTE *a1@<X0>, _QWORD *a2@<X8>)
{
  int v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t result;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  vDSP_Length v13;
  vDSP_Length v14;
  int64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v19;
  uint64_t v20;
  int v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char v26;
  int64_t v27;
  int64_t v28;
  uint64_t v29;

  v2 = *a1;
  if (!*a1 || v2 == 1)
  {
    v3 = *(_QWORD *)(v23 + 24);
    if (v3 >> 62)
      goto LABEL_44;
    v4 = *(_QWORD *)((v3 & 0xFFFFFFFFFFFFF8) + 0x10);
    goto LABEL_5;
  }
  v7 = *(_QWORD *)(v23 + 24);
  if (v7 >> 62)
    goto LABEL_47;
  v6 = *(_QWORD *)((v7 & 0xFFFFFFFFFFFFF8) + 0x10);
  v4 = v6;
  while (1)
  {
    if ((unsigned __int128)(v4 * (__int128)v6) >> 64 != (v4 * v6) >> 63)
    {
LABEL_42:
      __break(1u);
      goto LABEL_43;
    }
    v22 = v4 * v6;
    result = sub_1CA0B4464(v4 * v6, 0.0);
    if ((v4 & 0x8000000000000000) == 0)
      break;
LABEL_43:
    __break(1u);
LABEL_44:
    swift_bridgeObjectRetain();
    v4 = sub_1CA1F1234();
    swift_bridgeObjectRelease();
LABEL_5:
    v5 = *(_QWORD *)(v23 + 32);
    if (v5 >> 62)
    {
LABEL_48:
      swift_bridgeObjectRetain();
      v6 = sub_1CA1F1234();
      swift_bridgeObjectRelease();
    }
    else
    {
      v6 = *(_QWORD *)((v5 & 0xFFFFFFFFFFFFF8) + 0x10);
    }
  }
  v9 = (_QWORD *)result;
  if (!v4)
  {
LABEL_35:
    *a2 = 1;
    a2[1] = v22;
    a2[2] = v9;
    return result;
  }
  if (v6 < 0)
  {
    __break(1u);
LABEL_47:
    swift_bridgeObjectRetain();
    v4 = sub_1CA1F1234();
    swift_bridgeObjectRelease();
    goto LABEL_48;
  }
  v25 = 0;
  v10 = 0;
  v19 = v4;
  v11 = 32;
  v21 = v2;
  while (1)
  {
    if (v10 == v4)
    {
LABEL_40:
      __break(1u);
      goto LABEL_41;
    }
    v20 = v11;
    if (v6)
      break;
LABEL_14:
    ++v10;
    v25 += v6;
    v4 = v19;
    v11 = v20 + 8 * v6;
    if (v10 == v19)
      goto LABEL_35;
  }
  if ((unsigned __int128)(v10 * (__int128)v6) >> 64 != (v10 * v6) >> 63)
  {
LABEL_41:
    __break(1u);
    goto LABEL_42;
  }
  v12 = 0;
  v24 = v10;
  while (1)
  {
    v26 = v2;
    sub_1CA0C9CCC((uint64_t)&v26, v10, v12, &v27);
    v14 = v27;
    v13 = v28;
    v15 = v28 * v27;
    if ((unsigned __int128)(v28 * (__int128)v27) >> 64 != (v28 * v27) >> 63)
    {
      __break(1u);
LABEL_37:
      __break(1u);
LABEL_38:
      __break(1u);
LABEL_39:
      __break(1u);
      goto LABEL_40;
    }
    if (v15 < 0)
      goto LABEL_50;
    v16 = v29;
    if (v15)
    {
      v17 = sub_1CA1F0B68();
      *(_QWORD *)(v17 + 16) = v15;
      bzero((void *)(v17 + 32), 8 * v15);
      if ((v13 & 0x8000000000000000) != 0)
        break;
    }
    else
    {
      v17 = MEMORY[0x1E0DEE9D8];
      if (v28 < 0)
        break;
    }
    if ((v14 & 0x8000000000000000) != 0)
      break;
    vDSP_mtransD((const double *)(v16 + 32), 1, (double *)(v17 + 32), 1, v13, v14);
    swift_bridgeObjectRelease();
    v2 = v22;
    if (v25 + v12 >= v22 || v14 != 1 || v13 != 1)
      goto LABEL_37;
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      v9 = sub_1CA0B6058(v9);
    if (v22 < (uint64_t)0xFFFFFFFF80000000)
      goto LABEL_38;
    if (v22 > 0x7FFFFFFF)
      goto LABEL_39;
    ++v12;
    cblas_dcopy_NEWLAPACK();
    result = swift_bridgeObjectRelease();
    v11 += 8;
    v2 = v21;
    v10 = v24;
    if (v6 == v12)
      goto LABEL_14;
  }
  sub_1CA1F11BC();
  __break(1u);
LABEL_50:
  result = sub_1CA1F11BC();
  __break(1u);
  return result;
}

unint64_t sub_1CA0CA6BC()
{
  unint64_t v0;
  unint64_t v1;
  unint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t result;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  vDSP_Length v10;
  uint64_t v11;
  _QWORD *v12;
  _QWORD *v13;
  _QWORD *v14;
  __int128 v15;
  uint64_t v16;
  vDSP_Length v17;
  uint64_t v18;
  uint64_t v19;

  v2 = *(_QWORD *)(v0 + 24);
  if (v2 >> 62)
  {
    swift_bridgeObjectRetain();
    v4 = sub_1CA1F1234();
    v3 = sub_1CA1F1234();
    swift_bridgeObjectRelease();
  }
  else
  {
    v3 = *(_QWORD *)((v2 & 0xFFFFFFFFFFFFF8) + 0x10);
    v4 = v3;
  }
  if ((unsigned __int128)(v4 * (__int128)v3) >> 64 == (v4 * v3) >> 63)
  {
    v17 = v4;
    v18 = v3;
    v19 = sub_1CA0B4464(v4 * v3, 0.0);
    v0 = *(_QWORD *)(v0 + 16);
    v1 = v0 >> 62;
    if (!(v0 >> 62))
    {
      v5 = *(_QWORD *)((v0 & 0xFFFFFFFFFFFFF8) + 0x10);
      result = swift_bridgeObjectRetain();
      if (!v5)
        goto LABEL_15;
      goto LABEL_6;
    }
  }
  else
  {
    __break(1u);
  }
  swift_bridgeObjectRetain();
  result = sub_1CA1F1234();
  v5 = result;
  if (!result)
    goto LABEL_15;
LABEL_6:
  if (v5 < 1)
    goto LABEL_22;
  v7 = 0;
  do
  {
    if ((v0 & 0xC000000000000001) != 0)
    {
      v8 = MEMORY[0x1CAA4A7A4](v7, v0);
    }
    else
    {
      v8 = *(_QWORD *)(v0 + 8 * v7 + 32);
      swift_retain();
    }
    ++v7;
    v9 = *(_QWORD *)(v8 + 32);
    v15 = *(_OWORD *)(v8 + 16);
    v16 = v9;
    swift_bridgeObjectRetain();
    += infix(_:_:)(&v17, (uint64_t)&v15);
    swift_bridgeObjectRelease();
    swift_release();
  }
  while (v5 != v7);
LABEL_15:
  swift_bridgeObjectRelease();
  if (v1)
  {
    swift_bridgeObjectRetain();
    sub_1CA1F1234();
    swift_bridgeObjectRelease();
  }
  v10 = v17;
  v11 = v18;
  v12 = (_QWORD *)v19;
  swift_bridgeObjectRetain();
  v13 = v12;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    v13 = sub_1CA0B6058(v12);
  result = v12[2];
  if (!(result >> 31))
  {
    cblas_dscal_NEWLAPACK();
    swift_bridgeObjectRelease();
    type metadata accessor for MASquareMatrixRepresentation();
    v14 = (_QWORD *)swift_allocObject();
    v14[2] = v10;
    v14[3] = v11;
    v14[4] = v13;
    v14[5] = v2;
    swift_bridgeObjectRetain();
    return (unint64_t)v14;
  }
  __break(1u);
LABEL_22:
  __break(1u);
  return result;
}

uint64_t MATensor.deinit()
{
  uint64_t v0;

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v0;
}

uint64_t MATensor.__deallocating_deinit()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_deallocClassInstance();
}

uint64_t MATensor.description.getter()
{
  uint64_t v0;
  uint64_t v1;
  unint64_t v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  id v10;
  id v11;
  BOOL v12;
  uint64_t v13;
  uint64_t i;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  char v19;
  uint64_t v20;
  void *v21;
  id v22;
  id v23;
  uint64_t v24;
  uint64_t j;
  char v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  char v31;
  unint64_t v33;
  unint64_t v34;
  unint64_t v35;
  _QWORD *v36;
  uint64_t v37;
  id v38;
  id v39;
  _QWORD v40[15];
  uint64_t v41;
  _QWORD v42[5];
  _QWORD v43[5];
  __int128 v44;
  _QWORD v45[15];
  uint64_t v46;
  unint64_t v47;
  uint64_t v48;
  uint64_t v49;

  v1 = v0;
  sub_1CA1F1054();
  swift_bridgeObjectRelease();
  strcpy((char *)v43, "[MATensor] [");
  BYTE5(v43[1]) = 0;
  HIWORD(v43[1]) = -5120;
  v2 = *(_QWORD *)(v0 + 24);
  v3 = v2 >> 62;
  if (v2 >> 62)
    goto LABEL_61;
  v4 = *(_QWORD *)((v2 & 0xFFFFFFFFFFFFF8) + 0x10);
LABEL_3:
  v42[0] = v4;
  sub_1CA1F12AC();
  sub_1CA1F0A3C();
  swift_bridgeObjectRelease();
  sub_1CA1F0A3C();
  if (v3)
  {
    swift_bridgeObjectRetain();
    v5 = sub_1CA1F1234();
    swift_bridgeObjectRelease();
  }
  else
  {
    v5 = *(_QWORD *)((v2 & 0xFFFFFFFFFFFFF8) + 0x10);
  }
  v42[0] = v5;
  sub_1CA1F12AC();
  sub_1CA1F0A3C();
  swift_bridgeObjectRelease();
  sub_1CA1F0A3C();
  v6 = *(_QWORD *)(v1 + 32);
  v33 = v6 >> 62;
  if (v6 >> 62)
  {
    swift_bridgeObjectRetain();
    v7 = sub_1CA1F1234();
    swift_bridgeObjectRelease();
  }
  else
  {
    v7 = *(_QWORD *)((v6 & 0xFFFFFFFFFFFFF8) + 0x10);
  }
  v42[0] = v7;
  sub_1CA1F12AC();
  sub_1CA1F0A3C();
  swift_bridgeObjectRelease();
  sub_1CA1F0A3C();
  v48 = v43[0];
  v49 = v43[1];
  v43[0] = 0;
  v43[1] = 0xE000000000000000;
  sub_1CA1F1054();
  swift_bridgeObjectRelease();
  strcpy((char *)v43, "\n\t[Entities] (");
  HIBYTE(v43[1]) = -18;
  if (v3)
  {
    swift_bridgeObjectRetain();
    v8 = sub_1CA1F1234();
    swift_bridgeObjectRelease();
  }
  else
  {
    v8 = *(_QWORD *)((v2 & 0xFFFFFFFFFFFFF8) + 0x10);
  }
  v35 = v6;
  v42[0] = v8;
  sub_1CA1F12AC();
  sub_1CA1F0A3C();
  swift_bridgeObjectRelease();
  sub_1CA1F0A3C();
  sub_1CA1F0A3C();
  swift_bridgeObjectRelease();
  v34 = v2;
  if (v3)
  {
    swift_bridgeObjectRetain();
    v1 = sub_1CA1F1234();
    if (!v1)
      goto LABEL_32;
LABEL_15:
    v2 = 0;
    v36 = (_QWORD *)v1;
    while (1)
    {
      if ((v34 & 0xC000000000000001) != 0)
      {
        v11 = (id)MEMORY[0x1CAA4A7A4](v2, v34);
        v12 = __OFADD__(v2++, 1);
        if (v12)
          goto LABEL_57;
      }
      else
      {
        if (v2 >= *(_QWORD *)((v34 & 0xFFFFFFFFFFFFFF8) + 0x10))
          goto LABEL_59;
        v11 = *(id *)(v34 + 32 + 8 * v2);
        v12 = __OFADD__(v2++, 1);
        if (v12)
        {
LABEL_57:
          __break(1u);
LABEL_58:
          __break(1u);
LABEL_59:
          __break(1u);
LABEL_60:
          __break(1u);
LABEL_61:
          swift_bridgeObjectRetain();
          v4 = sub_1CA1F1234();
          swift_bridgeObjectRelease();
          goto LABEL_3;
        }
      }
      v38 = v11;

      v46 = 592138;
      v47 = 0xE300000000000000;
      v44 = xmmword_1CA1F9860;
      v43[0] = 1701667182;
      v43[1] = 0xE400000000000000;
      sub_1CA1F1018();
      v43[0] = 25705;
      v43[1] = 0xE200000000000000;
      sub_1CA1F1018();
      v43[0] = 1684632949;
      v43[1] = 0xE400000000000000;
      sub_1CA1F1018();
      v13 = sub_1CA1F0CA0();
      for (i = 0; i != 3; ++i)
      {
        sub_1CA0AB948((uint64_t)&v45[5 * i], (uint64_t)v43);
        swift_bridgeObjectRetain();
        v16 = sub_1CA1F1000();
        v17 = -1 << *(_BYTE *)(v13 + 32);
        v18 = v16 & ~v17;
        if (((*(_QWORD *)(v13 + 56 + ((v18 >> 3) & 0xFFFFFFFFFFFFF8)) >> v18) & 1) != 0)
        {
          v3 = ~v17;
          while (1)
          {
            sub_1CA0AB948(*(_QWORD *)(v13 + 48) + 40 * v18, (uint64_t)v42);
            v19 = MEMORY[0x1CAA4A714](v42, v43);
            sub_1CA0AB984((uint64_t)v42);
            if ((v19 & 1) != 0)
              break;
            v18 = (v18 + 1) & v3;
            if (((*(_QWORD *)(v13 + 56 + ((v18 >> 3) & 0xFFFFFFFFFFFFF8)) >> v18) & 1) == 0)
              goto LABEL_24;
          }
        }
        else
        {
LABEL_24:
          swift_bridgeObjectRelease();
          isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
          sub_1CA0AB948((uint64_t)v43, (uint64_t)v42);
          v41 = v13;
          sub_1CA0CB568((uint64_t)v42, v18, isUniquelyReferenced_nonNull_native);
          v13 = v41;
        }
        swift_bridgeObjectRelease();
        sub_1CA0AB984((uint64_t)v43);
      }
      swift_arrayDestroy();
      v9 = (void *)sub_1CA1F0C88();
      swift_bridgeObjectRelease();
      v10 = objc_msgSend(v38, sel_visualStringWithName_andPropertyKeys_, 0, v9);

      sub_1CA1F0A0C();
      sub_1CA1F0A3C();
      swift_bridgeObjectRelease();
      sub_1CA1F0A3C();

      swift_bridgeObjectRelease();
      v1 = (uint64_t)v36;
      if ((_QWORD *)v2 == v36)
        goto LABEL_32;
    }
  }
  v1 = *(_QWORD *)((v2 & 0xFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain();
  if (v1)
    goto LABEL_15;
LABEL_32:
  swift_bridgeObjectRelease();
  v43[0] = 0;
  v43[1] = 0xE000000000000000;
  sub_1CA1F1054();
  swift_bridgeObjectRelease();
  v43[0] = 0x74616C65525B090ALL;
  v43[1] = 0xEF28205D736E6F69;
  if (v33)
  {
    swift_bridgeObjectRetain();
    v20 = sub_1CA1F1234();
    swift_bridgeObjectRelease();
  }
  else
  {
    v20 = *(_QWORD *)((v35 & 0xFFFFFFFFFFFFF8) + 0x10);
  }
  v42[0] = v20;
  sub_1CA1F12AC();
  sub_1CA1F0A3C();
  swift_bridgeObjectRelease();
  sub_1CA1F0A3C();
  sub_1CA1F0A3C();
  swift_bridgeObjectRelease();
  if (!v33)
  {
    v1 = *(_QWORD *)((v35 & 0xFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain();
    if (!v1)
      goto LABEL_56;
LABEL_39:
    v3 = 0;
    v2 = (unint64_t)v40;
    v37 = v1;
    while (1)
    {
      if ((v35 & 0xC000000000000001) != 0)
      {
        v23 = (id)MEMORY[0x1CAA4A7A4](v3, v35);
        v12 = __OFADD__(v3++, 1);
        if (v12)
          goto LABEL_58;
      }
      else
      {
        if (v3 >= *(_QWORD *)((v35 & 0xFFFFFFFFFFFFFF8) + 0x10))
          goto LABEL_60;
        v23 = *(id *)(v35 + 32 + 8 * v3);
        v12 = __OFADD__(v3++, 1);
        if (v12)
          goto LABEL_58;
      }
      v39 = v23;
      v46 = 592138;
      v47 = 0xE300000000000000;
      v43[0] = 1701667182;
      v43[1] = 0xE400000000000000;
      sub_1CA1F1018();
      v43[0] = 25705;
      v43[1] = 0xE200000000000000;
      sub_1CA1F1018();
      v43[0] = 1684632949;
      v43[1] = 0xE400000000000000;
      sub_1CA1F1018();
      v24 = sub_1CA1F0CA0();
      for (j = 0; j != 3; ++j)
      {
        sub_1CA0AB948((uint64_t)&v40[5 * j], (uint64_t)v43);
        swift_bridgeObjectRetain();
        v27 = sub_1CA1F1000();
        v28 = -1 << *(_BYTE *)(v24 + 32);
        v29 = v27 & ~v28;
        if (((*(_QWORD *)(v24 + 56 + ((v29 >> 3) & 0xFFFFFFFFFFFFF8)) >> v29) & 1) != 0)
        {
          v30 = ~v28;
          while (1)
          {
            sub_1CA0AB948(*(_QWORD *)(v24 + 48) + 40 * v29, (uint64_t)v42);
            v31 = MEMORY[0x1CAA4A714](v42, v43);
            sub_1CA0AB984((uint64_t)v42);
            if ((v31 & 1) != 0)
              break;
            v29 = (v29 + 1) & v30;
            if (((*(_QWORD *)(v24 + 56 + ((v29 >> 3) & 0xFFFFFFFFFFFFF8)) >> v29) & 1) == 0)
              goto LABEL_48;
          }
        }
        else
        {
LABEL_48:
          swift_bridgeObjectRelease();
          v26 = swift_isUniquelyReferenced_nonNull_native();
          sub_1CA0AB948((uint64_t)v43, (uint64_t)v42);
          v41 = v24;
          sub_1CA0CB568((uint64_t)v42, v29, v26);
          v24 = v41;
        }
        swift_bridgeObjectRelease();
        sub_1CA0AB984((uint64_t)v43);
      }
      swift_arrayDestroy();
      v21 = (void *)sub_1CA1F0C88();
      swift_bridgeObjectRelease();
      v22 = objc_msgSend(v39, sel_visualStringWithName_andPropertyKeys_, 0, v21);

      sub_1CA1F0A0C();
      sub_1CA1F0A3C();
      swift_bridgeObjectRelease();
      sub_1CA1F0A3C();

      swift_bridgeObjectRelease();
      v1 = v37;
      if (v3 == v37)
        goto LABEL_56;
    }
  }
  swift_bridgeObjectRetain();
  v1 = sub_1CA1F1234();
  if (v1)
    goto LABEL_39;
LABEL_56:
  swift_bridgeObjectRelease();
  return v48;
}

uint64_t sub_1CA0CB3C4()
{
  return MATensor.description.getter();
}

void sub_1CA0CB3E4(uint64_t a1, unint64_t a2, char a3)
{
  uint64_t *v3;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  id v11;
  char v12;
  uint64_t v13;
  id v14;
  char v15;
  uint64_t v16;
  uint64_t v17;
  BOOL v18;
  uint64_t v19;

  v6 = *(_QWORD *)(*v3 + 16);
  v7 = *(_QWORD *)(*v3 + 24);
  if (v7 > v6 && (a3 & 1) != 0)
    goto LABEL_14;
  if ((a3 & 1) != 0)
  {
    sub_1CA13DBD0();
  }
  else
  {
    if (v7 > v6)
    {
      sub_1CA13EBB0();
      goto LABEL_14;
    }
    sub_1CA13F5C8();
  }
  v8 = *v3;
  v9 = sub_1CA1F0E5C();
  v10 = -1 << *(_BYTE *)(v8 + 32);
  a2 = v9 & ~v10;
  if (((*(_QWORD *)(v8 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFF8)) >> a2) & 1) != 0)
  {
    sub_1CA0AB910(0, (unint64_t *)&qword_1EF93A320);
    v11 = *(id *)(*(_QWORD *)(v8 + 48) + 8 * a2);
    v12 = sub_1CA1F0E68();

    if ((v12 & 1) != 0)
    {
LABEL_13:
      sub_1CA1F1354();
      __break(1u);
    }
    else
    {
      v13 = ~v10;
      while (1)
      {
        a2 = (a2 + 1) & v13;
        if (((*(_QWORD *)(v8 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFF8)) >> a2) & 1) == 0)
          break;
        v14 = *(id *)(*(_QWORD *)(v8 + 48) + 8 * a2);
        v15 = sub_1CA1F0E68();

        if ((v15 & 1) != 0)
          goto LABEL_13;
      }
    }
  }
LABEL_14:
  v16 = *v3;
  *(_QWORD *)(*v3 + 8 * (a2 >> 6) + 56) |= 1 << a2;
  *(_QWORD *)(*(_QWORD *)(v16 + 48) + 8 * a2) = a1;
  v17 = *(_QWORD *)(v16 + 16);
  v18 = __OFADD__(v17, 1);
  v19 = v17 + 1;
  if (v18)
    __break(1u);
  else
    *(_QWORD *)(v16 + 16) = v19;
}

uint64_t sub_1CA0CB568(uint64_t result, unint64_t a2, char a3)
{
  uint64_t *v3;
  uint64_t *v4;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char v12;
  uint64_t v13;
  uint64_t v14;
  __int128 v15;
  uint64_t v16;
  BOOL v17;
  uint64_t v18;
  _BYTE v19[40];

  v4 = v3;
  v6 = result;
  v7 = *(_QWORD *)(*v3 + 16);
  v8 = *(_QWORD *)(*v3 + 24);
  if (v8 > v7 && (a3 & 1) != 0)
    goto LABEL_12;
  if ((a3 & 1) != 0)
  {
    sub_1CA13DE6C();
  }
  else
  {
    if (v8 > v7)
    {
      result = (uint64_t)sub_1CA13ED58();
      goto LABEL_12;
    }
    sub_1CA13F840();
  }
  v9 = *v3;
  result = sub_1CA1F1000();
  v10 = -1 << *(_BYTE *)(v9 + 32);
  a2 = result & ~v10;
  if (((*(_QWORD *)(v9 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFF8)) >> a2) & 1) != 0)
  {
    v11 = ~v10;
    do
    {
      sub_1CA0AB948(*(_QWORD *)(v9 + 48) + 40 * a2, (uint64_t)v19);
      v12 = MEMORY[0x1CAA4A714](v19, v6);
      result = sub_1CA0AB984((uint64_t)v19);
      if ((v12 & 1) != 0)
        goto LABEL_15;
      a2 = (a2 + 1) & v11;
    }
    while (((*(_QWORD *)(v9 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFF8)) >> a2) & 1) != 0);
  }
LABEL_12:
  v13 = *v4;
  *(_QWORD *)(*v4 + 8 * (a2 >> 6) + 56) |= 1 << a2;
  v14 = *(_QWORD *)(v13 + 48) + 40 * a2;
  v15 = *(_OWORD *)(v6 + 16);
  *(_OWORD *)v14 = *(_OWORD *)v6;
  *(_OWORD *)(v14 + 16) = v15;
  *(_QWORD *)(v14 + 32) = *(_QWORD *)(v6 + 32);
  v16 = *(_QWORD *)(v13 + 16);
  v17 = __OFADD__(v16, 1);
  v18 = v16 + 1;
  if (!v17)
  {
    *(_QWORD *)(v13 + 16) = v18;
    return result;
  }
  __break(1u);
LABEL_15:
  result = sub_1CA1F1354();
  __break(1u);
  return result;
}

uint64_t sub_1CA0CB6D0(uint64_t result, uint64_t a2, unint64_t a3, char a4)
{
  uint64_t *v4;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char v13;
  char v14;
  uint64_t v15;
  uint64_t v16;
  char v17;
  char v18;
  uint64_t v19;
  uint64_t *v20;
  uint64_t v21;
  BOOL v22;
  uint64_t v23;
  char v24[72];

  v7 = result;
  v8 = *(_QWORD *)(*v4 + 16);
  v9 = *(_QWORD *)(*v4 + 24);
  if (v9 > v8 && (a4 & 1) != 0)
    goto LABEL_14;
  if ((a4 & 1) != 0)
  {
    sub_1CA13E134();
  }
  else
  {
    if (v9 > v8)
    {
      result = (uint64_t)sub_1CA13EF24();
      goto LABEL_14;
    }
    sub_1CA13FAD0();
  }
  v10 = *v4;
  sub_1CA1F13F0();
  swift_bridgeObjectRetain();
  sub_1CA0C0D60((uint64_t)v24, v7);
  swift_bridgeObjectRelease();
  result = sub_1CA1F1438();
  v11 = -1 << *(_BYTE *)(v10 + 32);
  a3 = result & ~v11;
  if (((*(_QWORD *)(v10 + 56 + ((a3 >> 3) & 0xFFFFFFFFFFFFF8)) >> a3) & 1) != 0)
  {
    swift_bridgeObjectRetain();
    v12 = swift_bridgeObjectRetain();
    sub_1CA0BF4E0(v12, v7);
    v14 = v13;
    swift_bridgeObjectRelease();
    result = swift_bridgeObjectRelease();
    if ((v14 & 1) != 0)
    {
LABEL_13:
      result = sub_1CA1F1354();
      __break(1u);
    }
    else
    {
      v15 = ~v11;
      while (1)
      {
        a3 = (a3 + 1) & v15;
        if (((*(_QWORD *)(v10 + 56 + ((a3 >> 3) & 0xFFFFFFFFFFFFF8)) >> a3) & 1) == 0)
          break;
        swift_bridgeObjectRetain();
        v16 = swift_bridgeObjectRetain();
        sub_1CA0BF4E0(v16, v7);
        v18 = v17;
        swift_bridgeObjectRelease();
        result = swift_bridgeObjectRelease();
        if ((v18 & 1) != 0)
          goto LABEL_13;
      }
    }
  }
LABEL_14:
  v19 = *v4;
  *(_QWORD *)(*v4 + 8 * (a3 >> 6) + 56) |= 1 << a3;
  v20 = (uint64_t *)(*(_QWORD *)(v19 + 48) + 16 * a3);
  *v20 = v7;
  v20[1] = a2;
  v21 = *(_QWORD *)(v19 + 16);
  v22 = __OFADD__(v21, 1);
  v23 = v21 + 1;
  if (v22)
    __break(1u);
  else
    *(_QWORD *)(v19 + 16) = v23;
  return result;
}

uint64_t sub_1CA0CB8A0(uint64_t result, unint64_t a2, char a3)
{
  uint64_t *v3;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  BOOL v14;
  uint64_t v15;

  v5 = result;
  v6 = *(_QWORD *)(*v3 + 16);
  v7 = *(_QWORD *)(*v3 + 24);
  if (v7 > v6 && (a3 & 1) != 0)
    goto LABEL_14;
  if ((a3 & 1) != 0)
  {
    sub_1CA13E394();
  }
  else
  {
    if (v7 > v6)
    {
      result = (uint64_t)sub_1CA13F0DC();
      goto LABEL_14;
    }
    sub_1CA13FD00();
  }
  v8 = *v3;
  result = sub_1CA1F13E4();
  v9 = -1 << *(_BYTE *)(v8 + 32);
  a2 = result & ~v9;
  if (((*(_QWORD *)(v8 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFF8)) >> a2) & 1) != 0)
  {
    v10 = *(_QWORD *)(v8 + 48);
    if (*(_QWORD *)(v10 + 8 * a2) == v5)
    {
LABEL_13:
      result = sub_1CA1F1354();
      __break(1u);
    }
    else
    {
      v11 = ~v9;
      while (1)
      {
        a2 = (a2 + 1) & v11;
        if (((*(_QWORD *)(v8 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFF8)) >> a2) & 1) == 0)
          break;
        if (*(_QWORD *)(v10 + 8 * a2) == v5)
          goto LABEL_13;
      }
    }
  }
LABEL_14:
  v12 = *v3;
  *(_QWORD *)(*v3 + 8 * (a2 >> 6) + 56) |= 1 << a2;
  *(_QWORD *)(*(_QWORD *)(v12 + 48) + 8 * a2) = v5;
  v13 = *(_QWORD *)(v12 + 16);
  v14 = __OFADD__(v13, 1);
  v15 = v13 + 1;
  if (v14)
    __break(1u);
  else
    *(_QWORD *)(v12 + 16) = v15;
  return result;
}

uint64_t sub_1CA0CB9C0(uint64_t result, uint64_t a2, unint64_t a3, char a4)
{
  uint64_t *v4;
  uint64_t *v5;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  BOOL v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v20;
  uint64_t *v21;
  uint64_t v22;
  BOOL v23;
  uint64_t v24;

  v5 = v4;
  v8 = result;
  v9 = *(_QWORD *)(*v4 + 16);
  v10 = *(_QWORD *)(*v4 + 24);
  if (v10 > v9 && (a4 & 1) != 0)
    goto LABEL_22;
  if ((a4 & 1) != 0)
  {
    sub_1CA13E614();
  }
  else
  {
    if (v10 > v9)
    {
      result = (uint64_t)sub_1CA13F270();
      goto LABEL_22;
    }
    sub_1CA13FF60();
  }
  v11 = *v4;
  sub_1CA1F13F0();
  sub_1CA1F0A30();
  result = sub_1CA1F1438();
  v12 = -1 << *(_BYTE *)(v11 + 32);
  a3 = result & ~v12;
  v13 = v11 + 56;
  if (((*(_QWORD *)(v11 + 56 + ((a3 >> 3) & 0xFFFFFFFFFFFFF8)) >> a3) & 1) != 0)
  {
    v14 = *(_QWORD *)(v11 + 48);
    v15 = (_QWORD *)(v14 + 16 * a3);
    v16 = *v15 == v8 && v15[1] == a2;
    if (v16 || (result = sub_1CA1F12E8(), (result & 1) != 0))
    {
LABEL_21:
      result = sub_1CA1F1354();
      __break(1u);
    }
    else
    {
      v17 = ~v12;
      while (1)
      {
        a3 = (a3 + 1) & v17;
        if (((*(_QWORD *)(v13 + ((a3 >> 3) & 0xFFFFFFFFFFFFF8)) >> a3) & 1) == 0)
          break;
        v18 = (_QWORD *)(v14 + 16 * a3);
        if (*v18 != v8 || v18[1] != a2)
        {
          result = sub_1CA1F12E8();
          if ((result & 1) == 0)
            continue;
        }
        goto LABEL_21;
      }
    }
  }
LABEL_22:
  v20 = *v5;
  *(_QWORD *)(*v5 + 8 * (a3 >> 6) + 56) |= 1 << a3;
  v21 = (uint64_t *)(*(_QWORD *)(v20 + 48) + 16 * a3);
  *v21 = v8;
  v21[1] = a2;
  v22 = *(_QWORD *)(v20 + 16);
  v23 = __OFADD__(v22, 1);
  v24 = v22 + 1;
  if (v23)
    __break(1u);
  else
    *(_QWORD *)(v20 + 16) = v24;
  return result;
}

uint64_t sub_1CA0CBB58(uint64_t result, unint64_t a2, char a3)
{
  uint64_t *v3;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t (*v10)(uint64_t);
  uint64_t v11;
  uint64_t (*v12)(uint64_t);
  uint64_t v13;
  uint64_t v14;
  BOOL v15;
  uint64_t v16;
  _BYTE v17[72];

  v5 = result;
  v6 = *(_QWORD *)(*v3 + 16);
  v7 = *(_QWORD *)(*v3 + 24);
  if (v7 > v6 && (a3 & 1) != 0)
    goto LABEL_14;
  if ((a3 & 1) != 0)
  {
    sub_1CA13E8F0();
  }
  else
  {
    if (v7 > v6)
    {
      result = (uint64_t)sub_1CA13F420();
      goto LABEL_14;
    }
    sub_1CA14020C();
  }
  v8 = *v3;
  sub_1CA1F13F0();
  (*(void (**)(_BYTE *))(*(_QWORD *)v5 + 272))(v17);
  result = sub_1CA1F1438();
  v9 = -1 << *(_BYTE *)(v8 + 32);
  a2 = result & ~v9;
  if (((*(_QWORD *)(v8 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFF8)) >> a2) & 1) != 0)
  {
    v10 = *(uint64_t (**)(uint64_t))(**(_QWORD **)(*(_QWORD *)(v8 + 48) + 8 * a2) + 280);
    swift_retain();
    LOBYTE(v10) = v10(v5);
    result = swift_release();
    if ((v10 & 1) != 0)
    {
LABEL_13:
      type metadata accessor for MASlice();
      result = sub_1CA1F1354();
      __break(1u);
    }
    else
    {
      v11 = ~v9;
      while (1)
      {
        a2 = (a2 + 1) & v11;
        if (((*(_QWORD *)(v8 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFF8)) >> a2) & 1) == 0)
          break;
        v12 = *(uint64_t (**)(uint64_t))(**(_QWORD **)(*(_QWORD *)(v8 + 48) + 8 * a2) + 280);
        swift_retain();
        LOBYTE(v12) = v12(v5);
        result = swift_release();
        if ((v12 & 1) != 0)
          goto LABEL_13;
      }
    }
  }
LABEL_14:
  v13 = *v3;
  *(_QWORD *)(*v3 + 8 * (a2 >> 6) + 56) |= 1 << a2;
  *(_QWORD *)(*(_QWORD *)(v13 + 48) + 8 * a2) = v5;
  v14 = *(_QWORD *)(v13 + 16);
  v15 = __OFADD__(v14, 1);
  v16 = v14 + 1;
  if (v15)
    __break(1u);
  else
    *(_QWORD *)(v13 + 16) = v16;
  return result;
}

uint64_t sub_1CA0CBCF8(unint64_t *a1, unint64_t *a2)
{
  uint64_t result;
  uint64_t v4;

  result = *a1;
  if (!result)
  {
    v4 = sub_1CA0AB910(255, a2);
    result = MEMORY[0x1CAA4BB30](MEMORY[0x1E0DEFCF8], v4);
    atomic_store(result, a1);
  }
  return result;
}

uint64_t type metadata accessor for MATensor()
{
  return objc_opt_self();
}

unint64_t sub_1CA0CBD5C()
{
  unint64_t result;

  result = qword_1EF9379D8;
  if (!qword_1EF9379D8)
  {
    result = MEMORY[0x1CAA4BB30](&protocol conformance descriptor for MATensorMode, &type metadata for MATensorMode);
    atomic_store(result, (unint64_t *)&qword_1EF9379D8);
  }
  return result;
}

uint64_t getEnumTagSinglePayload for MATensorMode(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v4;
  unsigned int v6;
  BOOL v7;
  int v8;

  if (!a2)
    return 0;
  if (a2 < 0xFE)
    goto LABEL_17;
  if (a2 + 2 >= 0xFFFF00)
    v2 = 4;
  else
    v2 = 2;
  if ((a2 + 2) >> 8 < 0xFF)
    v3 = 1;
  else
    v3 = v2;
  if (v3 == 4)
  {
    v4 = *(_DWORD *)(a1 + 1);
    if (v4)
      return (*a1 | (v4 << 8)) - 2;
  }
  else
  {
    if (v3 == 2)
    {
      v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1))
        goto LABEL_17;
      return (*a1 | (v4 << 8)) - 2;
    }
    v4 = a1[1];
    if (a1[1])
      return (*a1 | (v4 << 8)) - 2;
  }
LABEL_17:
  v6 = *a1;
  v7 = v6 >= 3;
  v8 = v6 - 3;
  if (!v7)
    v8 = -1;
  return (v8 + 1);
}

uint64_t storeEnumTagSinglePayload for MATensorMode(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 2 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 2) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFE)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFD)
    return ((uint64_t (*)(void))((char *)&loc_1CA0CBE7C + 4 * byte_1CA1F9875[v4]))();
  *a1 = a2 + 2;
  return ((uint64_t (*)(void))((char *)sub_1CA0CBEB0 + 4 * byte_1CA1F9870[v4]))();
}

uint64_t sub_1CA0CBEB0(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1CA0CBEB8(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1CA0CBEC0);
  return result;
}

uint64_t sub_1CA0CBECC(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1CA0CBED4);
  *(_BYTE *)result = a2 + 2;
  return result;
}

uint64_t sub_1CA0CBED8(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1CA0CBEE0(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for MATensorMode()
{
  return &type metadata for MATensorMode;
}

uint64_t dispatch thunk of MAGraphTensor.adjencyTensor(directed:weighted:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(void))(a4 + 8))();
}

uint64_t method lookup function for MATensor()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of MATensor.size.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 112))();
}

uint64_t dispatch thunk of MATensor.subscript.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 120))();
}

{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 128))();
}

{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 136))();
}

{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 144))();
}

uint64_t dispatch thunk of MATensor.slice(mode:index:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 152))();
}

uint64_t dispatch thunk of MATensor.fiber(mode:indexI:indexJ:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 160))();
}

uint64_t dispatch thunk of MATensor.unfoldedFiber(mode:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 168))();
}

uint64_t dispatch thunk of MATensor.flatten()()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 176))();
}

int64_t MASquareMatrixRepresentation.kmedoid(k:iterations:progressClosure:)(uint64_t a1, uint64_t a2, void (*a3)(uint64_t *, double), uint64_t a4)
{
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  unint64_t v8;
  int64_t v9;
  uint64_t v10;
  int64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  double v16;
  uint64_t v17;
  uint64_t v18;
  int64_t v19;
  uint64_t v20;
  int64_t v21;
  uint64_t v22;
  double v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;
  double v28;
  unint64_t v29;
  char v30;
  _BOOL8 v31;
  char isUniquelyReferenced_nonNull_native;
  char v33;
  unint64_t v34;
  uint64_t v35;
  _BOOL8 v36;
  uint64_t v37;
  char v38;
  unint64_t v39;
  char v40;
  uint64_t v41;
  uint64_t v42;
  BOOL v43;
  uint64_t v44;
  unint64_t v45;
  uint64_t v46;
  char v47;
  unsigned int v48;
  unint64_t v49;
  size_t v50;
  uint64_t isStackAllocationSafe;
  uint64_t v52;
  uint64_t v53;
  int64_t v54;
  uint64_t v55;
  uint64_t v56;
  unint64_t v57;
  int64_t v58;
  unint64_t v59;
  unint64_t v60;
  unint64_t v61;
  int64_t v62;
  unint64_t v63;
  uint64_t v64;
  uint64_t v65;
  int64_t v66;
  uint64_t v67;
  uint64_t v68;
  unint64_t v69;
  int64_t v70;
  unint64_t v71;
  unint64_t v72;
  unint64_t v73;
  int64_t v74;
  unint64_t v75;
  int64_t v76;
  uint64_t v77;
  uint64_t v78;
  unsigned int v79;
  int v80;
  uint64_t v81;
  uint64_t v82;
  char v83;
  unint64_t v84;
  uint64_t v85;
  uint64_t v86;
  unint64_t v87;
  uint64_t v88;
  uint64_t v89;
  unint64_t v90;
  unint64_t v91;
  uint64_t v92;
  unint64_t v93;
  unint64_t v94;
  unint64_t v95;
  unint64_t v96;
  unint64_t v97;
  uint64_t v98;
  uint64_t v99;
  int64_t v100;
  uint64_t v101;
  double v102;
  uint64_t v103;
  double v104;
  unint64_t v105;
  uint64_t v106;
  int64_t v107;
  unint64_t v108;
  uint64_t v109;
  double v110;
  unint64_t v111;
  unint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  unint64_t v120;
  unint64_t v121;
  int64_t v122;
  unint64_t v123;
  int64_t v124;
  unint64_t *v125;
  uint64_t v126;
  unint64_t *v127;
  uint64_t v128;
  int64_t v129;
  uint64_t v130;
  unint64_t v131;
  int64_t v132;
  unsigned int v133;
  int v134;
  uint64_t v135;
  unint64_t v136;
  char v137;
  unint64_t v138;
  unint64_t v139;
  unint64_t v140;
  unint64_t v141;
  uint64_t v142;
  unint64_t v143;
  uint64_t v144;
  unint64_t v145;
  unint64_t v146;
  unint64_t v147;
  unint64_t v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  unint64_t v157;
  uint64_t v158;
  uint64_t v159;
  char v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  unint64_t v164;
  unint64_t v165;
  unint64_t v166;
  int64_t v167;
  unint64_t v168;
  int64_t v169;
  unint64_t v170;
  uint64_t v171;
  id v172;
  id v173;
  char v174;
  uint64_t v175;
  uint64_t v176;
  unint64_t v177;
  id v178;
  char v179;
  uint64_t v180;
  id v181;
  char v182;
  uint64_t v184;
  _BYTE *v185;
  uint64_t v186;
  uint64_t v187;
  uint64_t v188;
  unint64_t v189;
  uint64_t v190;
  uint64_t v191;
  void (*v192)(uint64_t *, double);
  uint64_t v193;
  uint64_t v194;
  uint64_t v195;
  uint64_t v196;
  uint64_t v197;
  int64_t v198;
  uint64_t v199;
  uint64_t v200;
  uint64_t v201;
  _QWORD *v202;
  uint64_t v203;
  unint64_t v204;
  uint64_t v205;
  _QWORD *v206;
  int64_t v207;
  unint64_t v208;
  int64_t v209;
  void *v210;
  uint64_t v211;
  uint64_t v212;
  uint64_t v213;

  v193 = a4;
  v192 = a3;
  v194 = a2;
  v213 = *MEMORY[0x1E0C80C00];
  if (a1 < 0)
    goto LABEL_320;
  v5 = (uint64_t)v4;
  v6 = a1;
  v7 = (_QWORD *)MEMORY[0x1E0DEE9D8];
  if (!a1)
    goto LABEL_10;
  v8 = v4[5];
  if (v8 >> 62)
    goto LABEL_322;
  v9 = *(_QWORD *)((v8 & 0xFFFFFFFFFFFFF8) + 0x10);
LABEL_5:
  v7 = sub_1CA0E5AB8(0, 1, 1, MEMORY[0x1E0DEE9D8]);
  v10 = 0;
  do
  {
    v11 = v10 * v9;
    if ((unsigned __int128)(v10 * (__int128)v9) >> 64 != (v10 * v9) >> 63)
      goto LABEL_300;
    v13 = v7[2];
    v12 = v7[3];
    if (v13 >= v12 >> 1)
      v7 = sub_1CA0E5AB8((_QWORD *)(v12 > 1), v13 + 1, 1, v7);
    ++v10;
    v7[2] = v13 + 1;
    v7[v13 + 4] = v11 / v6;
  }
  while (v6 != v10);
LABEL_10:
  v202 = (_QWORD *)v5;
  if (v194 < 1)
  {
    v17 = MEMORY[0x1E0DEE9E0];
    goto LABEL_175;
  }
  v14 = *(_QWORD *)(v5 + 40);
  if (v14 >> 62)
  {
    v34 = (unint64_t)v7;
    v17 = v14 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain();
    v15 = sub_1CA1F1234();
    swift_bridgeObjectRelease();
    if (v15 < 0)
    {
      __break(1u);
LABEL_325:
      __break(1u);
LABEL_326:
      __break(1u);
LABEL_327:
      __break(1u);
      goto LABEL_328;
    }
LABEL_332:
    v203 = v17;
    v7 = (_QWORD *)v34;
  }
  else
  {
    v203 = v14 & 0xFFFFFFFFFFFFFF8;
    v15 = *(_QWORD *)((v14 & 0xFFFFFFFFFFFFFF8) + 0x10);
  }
  v190 = 0;
  v16 = (double)v194;
  v17 = MEMORY[0x1E0DEE9E0];
  v204 = v14;
  v208 = v14 & 0xC000000000000001;
  v198 = 1;
  v191 = v6 & ~(v6 >> 63);
  v195 = v6;
  v196 = v15;
  do
  {
    if (v15)
    {
      v18 = 0;
      v206 = v7;
      do
      {
        if (v18 == v15)
          goto LABEL_311;
        v205 = v7[2];
        if (!v205)
        {
          v15 = v18;
          if (!*(_QWORD *)(v17 + 16))
            goto LABEL_42;
          goto LABEL_40;
        }
        if (*(_QWORD *)(v5 + 16) < v18)
          goto LABEL_313;
        v19 = *(_QWORD *)(v5 + 24);
        v20 = v5;
        v5 = v18 * v19;
        if ((unsigned __int128)(v18 * (__int128)v19) >> 64 != (v18 * v19) >> 63)
          goto LABEL_314;
        v201 = v17;
        v207 = *(_QWORD *)(v20 + 32);
        if (!v208 && (unint64_t)v18 >= *(_QWORD *)(v203 + 16))
          goto LABEL_315;
        v21 = v207 + 32;
        swift_bridgeObjectRetain();
        v22 = 0;
        v23 = INFINITY;
        v15 = v18;
        do
        {
          v9 = v7[v22 + 4];
          if (v19 < v9)
          {
            __break(1u);
LABEL_278:
            __break(1u);
LABEL_279:
            __break(1u);
LABEL_280:
            __break(1u);
LABEL_281:
            __break(1u);
LABEL_282:
            __break(1u);
LABEL_283:
            __break(1u);
LABEL_284:
            __break(1u);
LABEL_285:
            __break(1u);
LABEL_286:
            __break(1u);
LABEL_287:
            __break(1u);
LABEL_288:
            __break(1u);
LABEL_289:
            __break(1u);
LABEL_290:
            __break(1u);
LABEL_291:
            __break(1u);
LABEL_292:
            __break(1u);
LABEL_293:
            __break(1u);
LABEL_294:
            __break(1u);
LABEL_295:
            __break(1u);
LABEL_296:
            __break(1u);
LABEL_297:
            __break(1u);
LABEL_298:
            __break(1u);
LABEL_299:
            __break(1u);
LABEL_300:
            __break(1u);
LABEL_301:
            sub_1CA0BE35C();
            v184 = swift_allocError();
            *v185 = 0;
            v197 = v184;
            swift_willThrow();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            return v9;
          }
          v27 = v5 + v9;
          if (__OFADD__(v5, v9))
            goto LABEL_278;
          if ((v27 & 0x8000000000000000) != 0)
            goto LABEL_279;
          if (v27 >= *(_QWORD *)(v207 + 16))
            goto LABEL_280;
          v28 = *(double *)(v21 + 8 * v27);
          if (v208)
          {
            v24 = v18;
            v25 = v18;
            v26 = v204;
            MEMORY[0x1CAA4A7A4](v24, v204);
            MEMORY[0x1CAA4A7A4](v9, v26);
            swift_unknownObjectRelease();
            v18 = v25;
            swift_unknownObjectRelease();
          }
          else
          {
            if (v9 < 0)
              goto LABEL_297;
            if ((unint64_t)v9 >= *(_QWORD *)(v203 + 16))
              goto LABEL_298;
          }
          ++v22;
          if (v28 < v23)
          {
            v15 = v9;
            v23 = v28;
          }
          v7 = v206;
        }
        while (v205 != v22);
        swift_bridgeObjectRelease();
        v17 = v201;
        v5 = (uint64_t)v202;
        v6 = v195;
        if (!*(_QWORD *)(v201 + 16))
        {
LABEL_42:
          v31 = 1;
          goto LABEL_43;
        }
LABEL_40:
        v29 = sub_1CA0AA68C(v18);
        if ((v30 & 1) == 0)
          goto LABEL_42;
        v31 = *(_QWORD *)(*(_QWORD *)(v17 + 56) + 8 * v29) != v15;
LABEL_43:
        v198 = v31;
        isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
        v211 = v17;
        v34 = sub_1CA0AA68C(v18);
        v35 = *(_QWORD *)(v17 + 16);
        v36 = (v33 & 1) == 0;
        v37 = v35 + v36;
        if (__OFADD__(v35, v36))
          goto LABEL_312;
        v38 = v33;
        if (*(_QWORD *)(v17 + 24) >= v37)
        {
          if ((isUniquelyReferenced_nonNull_native & 1) != 0)
          {
            v17 = v211;
            if ((v33 & 1) == 0)
              goto LABEL_50;
          }
          else
          {
            sub_1CA0F03F0();
            v17 = v211;
            if ((v38 & 1) == 0)
              goto LABEL_50;
          }
LABEL_16:
          *(_QWORD *)(*(_QWORD *)(v17 + 56) + 8 * v34) = v15;
          goto LABEL_17;
        }
        sub_1CA0ECDE0(v37, isUniquelyReferenced_nonNull_native);
        v14 = v211;
        v39 = sub_1CA0AA68C(v18);
        if ((v38 & 1) != (v40 & 1))
        {
          sub_1CA1F1360();
          __break(1u);
          goto LABEL_332;
        }
        v34 = v39;
        v17 = v211;
        if ((v38 & 1) != 0)
          goto LABEL_16;
LABEL_50:
        *(_QWORD *)(v17 + 8 * (v34 >> 6) + 64) |= 1 << v34;
        v41 = 8 * v34;
        *(_QWORD *)(*(_QWORD *)(v17 + 48) + v41) = v18;
        *(_QWORD *)(*(_QWORD *)(v17 + 56) + v41) = v15;
        v42 = *(_QWORD *)(v17 + 16);
        v43 = __OFADD__(v42, 1);
        v44 = v42 + 1;
        if (v43)
          goto LABEL_316;
        *(_QWORD *)(v17 + 16) = v44;
LABEL_17:
        ++v18;
        swift_bridgeObjectRelease();
        v15 = v196;
        v7 = v206;
      }
      while (v18 != v196);
    }
    if (v6 && v198)
    {
      v45 = 0;
      v46 = v17 + 64;
      v187 = v17 + 64;
      while (1)
      {
        if (v45 == v191)
          goto LABEL_326;
        if (v45 >= v7[2])
          goto LABEL_327;
        v206 = v7;
        v189 = v45;
        v6 = v7[v45 + 4];
        v47 = *(_BYTE *)(v17 + 32);
        v48 = v47 & 0x3F;
        v49 = (unint64_t)((1 << v47) + 63) >> 6;
        v50 = 8 * v49;
        isStackAllocationSafe = swift_bridgeObjectRetain();
        if (v48 <= 0xD
          || (isStackAllocationSafe = swift_stdlib_isStackAllocationSafe(), (isStackAllocationSafe & 1) != 0))
        {
          MEMORY[0x1E0C80A78](isStackAllocationSafe, v52);
          v9 = (int64_t)&v186 - ((v50 + 15) & 0x3FFFFFFFFFFFFFF0);
          bzero((void *)v9, v50);
          v53 = 0;
          v54 = 0;
          v55 = 1 << *(_BYTE *)(v17 + 32);
          if (v55 < 64)
            v56 = ~(-1 << v55);
          else
            v56 = -1;
          v57 = v56 & *(_QWORD *)(v17 + 64);
          v58 = (unint64_t)(v55 + 63) >> 6;
          while (1)
          {
            if (v57)
            {
              v59 = __clz(__rbit64(v57));
              v57 &= v57 - 1;
              v60 = v59 | (v54 << 6);
            }
            else
            {
              v43 = __OFADD__(v54++, 1);
              if (v43)
              {
                __break(1u);
LABEL_311:
                __break(1u);
LABEL_312:
                __break(1u);
LABEL_313:
                __break(1u);
LABEL_314:
                __break(1u);
LABEL_315:
                __break(1u);
LABEL_316:
                __break(1u);
LABEL_317:
                __break(1u);
                goto LABEL_318;
              }
              if (v54 >= v58)
                goto LABEL_86;
              v61 = *(_QWORD *)(v46 + 8 * v54);
              if (!v61)
              {
                v62 = v54 + 1;
                if (v54 + 1 >= v58)
                  goto LABEL_86;
                v61 = *(_QWORD *)(v46 + 8 * v62);
                if (!v61)
                {
                  v62 = v54 + 2;
                  if (v54 + 2 >= v58)
                    goto LABEL_86;
                  v61 = *(_QWORD *)(v46 + 8 * v62);
                  if (!v61)
                  {
                    v62 = v54 + 3;
                    if (v54 + 3 >= v58)
                    {
LABEL_86:
                      v64 = sub_1CA0CEF2C((unint64_t *)((char *)&v186 - ((v50 + 15) & 0x3FFFFFFFFFFFFFF0)), v49, v53, v17);
                      goto LABEL_113;
                    }
                    v61 = *(_QWORD *)(v46 + 8 * v62);
                    if (!v61)
                    {
                      while (1)
                      {
                        v54 = v62 + 1;
                        if (__OFADD__(v62, 1))
                          break;
                        if (v54 >= v58)
                          goto LABEL_86;
                        v61 = *(_QWORD *)(v46 + 8 * v54);
                        ++v62;
                        if (v61)
                          goto LABEL_78;
                      }
LABEL_318:
                      __break(1u);
LABEL_319:
                      __break(1u);
LABEL_320:
                      __break(1u);
LABEL_321:
                      __break(1u);
LABEL_322:
                      swift_bridgeObjectRetain();
                      v9 = sub_1CA1F1234();
                      swift_bridgeObjectRelease();
                      goto LABEL_5;
                    }
                  }
                }
                v54 = v62;
              }
LABEL_78:
              v63 = __clz(__rbit64(v61));
              v57 = (v61 - 1) & v61;
              v60 = v63 + (v54 << 6);
            }
            if (*(_QWORD *)(*(_QWORD *)(v17 + 56) + 8 * v60) == v6)
            {
              *(_QWORD *)(v9 + ((v60 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v60;
              v43 = __OFADD__(v53++, 1);
              if (v43)
                goto LABEL_325;
            }
          }
        }
        v9 = swift_slowAlloc();
        bzero((void *)v9, v50);
        v65 = 0;
        v66 = 0;
        v67 = 1 << *(_BYTE *)(v17 + 32);
        if (v67 < 64)
          v68 = ~(-1 << v67);
        else
          v68 = -1;
        v69 = v68 & *(_QWORD *)(v17 + 64);
        v70 = (unint64_t)(v67 + 63) >> 6;
        while (1)
        {
          if (v69)
          {
            v71 = __clz(__rbit64(v69));
            v69 &= v69 - 1;
            v72 = v71 | (v66 << 6);
            goto LABEL_92;
          }
          v43 = __OFADD__(v66++, 1);
          if (v43)
            goto LABEL_317;
          if (v66 >= v70)
            goto LABEL_112;
          v73 = *(_QWORD *)(v46 + 8 * v66);
          if (!v73)
            break;
LABEL_104:
          v75 = __clz(__rbit64(v73));
          v69 = (v73 - 1) & v73;
          v72 = v75 + (v66 << 6);
LABEL_92:
          if (*(_QWORD *)(*(_QWORD *)(v17 + 56) + 8 * v72) == v6)
          {
            *(_QWORD *)(v9 + ((v72 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v72;
            v43 = __OFADD__(v65++, 1);
            if (v43)
              goto LABEL_329;
          }
        }
        v74 = v66 + 1;
        if (v66 + 1 >= v70)
          goto LABEL_112;
        v73 = *(_QWORD *)(v46 + 8 * v74);
        if (v73)
          goto LABEL_103;
        v74 = v66 + 2;
        if (v66 + 2 >= v70)
          goto LABEL_112;
        v73 = *(_QWORD *)(v46 + 8 * v74);
        if (v73)
          goto LABEL_103;
        v74 = v66 + 3;
        if (v66 + 3 >= v70)
          goto LABEL_112;
        v73 = *(_QWORD *)(v46 + 8 * v74);
        if (v73)
        {
LABEL_103:
          v66 = v74;
          goto LABEL_104;
        }
        while (1)
        {
          v66 = v74 + 1;
          if (__OFADD__(v74, 1))
            goto LABEL_321;
          if (v66 >= v70)
            break;
          v73 = *(_QWORD *)(v46 + 8 * v66);
          ++v74;
          if (v73)
            goto LABEL_104;
        }
LABEL_112:
        v64 = sub_1CA0CEF2C((unint64_t *)v9, v49, v65, v17);
        MEMORY[0x1CAA4BBE4](v9, -1, -1);
LABEL_113:
        v6 = 1;
        swift_bridgeObjectRelease();
        v76 = *(_QWORD *)(v64 + 16);
        if (v76)
          break;
        swift_release();
        v89 = MEMORY[0x1E0DEE9D8];
LABEL_143:
        v98 = *(_QWORD *)(v89 + 16);
        v99 = v203;
        if (v98)
        {
          v207 = v89 + 32;
          swift_bridgeObjectRetain();
          v100 = 0;
          v101 = 0;
          v102 = INFINITY;
          do
          {
            v9 = *(_QWORD *)(v207 + 8 * v101++);
            swift_bridgeObjectRetain();
            v103 = 0;
            v104 = 0.0;
            do
            {
              v105 = *(_QWORD *)(v89 + 8 * v103 + 32);
              if (v9 != v105)
              {
                if (*(_QWORD *)(v5 + 16) < v9)
                  goto LABEL_289;
                v106 = *(_QWORD *)(v5 + 24);
                if (v106 < (uint64_t)v105)
                  goto LABEL_290;
                v107 = v9 * v106;
                if ((unsigned __int128)(v9 * (__int128)v106) >> 64 != (v9 * v106) >> 63)
                  goto LABEL_291;
                v108 = v107 + v105;
                if (__OFADD__(v107, v105))
                  goto LABEL_292;
                if ((v108 & 0x8000000000000000) != 0)
                  goto LABEL_293;
                v109 = *(_QWORD *)(v5 + 32);
                if (v108 >= *(_QWORD *)(v109 + 16))
                  goto LABEL_294;
                v110 = *(double *)(v109 + 8 * v108 + 32);
                if (v208)
                {
                  v205 = MEMORY[0x1CAA4A7A4](v9, v204);
                  MEMORY[0x1CAA4A7A4](v105, v204);
                  swift_unknownObjectRelease();
                  swift_unknownObjectRelease();
                  v99 = v203;
                }
                else
                {
                  if (v9 < 0)
                    goto LABEL_295;
                  v111 = *(_QWORD *)(v99 + 16);
                  if (v9 >= v111 || v105 >= v111)
                    goto LABEL_296;
                }
                v104 = v104 + v110;
              }
              ++v103;
            }
            while (v98 != v103);
            swift_bridgeObjectRelease();
            v99 = v203;
            if (v104 < v102)
            {
              v102 = v104;
              v100 = v9;
            }
          }
          while (v101 != v98);
          swift_bridgeObjectRelease_n();
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
            v206 = sub_1CA0B6094(v206);
          v6 = v195;
          v112 = v189;
          v46 = v187;
          v7 = v206;
          if (v189 >= v206[2])
            goto LABEL_330;
          v206[v189 + 4] = v100;
        }
        else
        {
          swift_bridgeObjectRelease();
          v7 = v206;
          v6 = v195;
          v112 = v189;
        }
        v45 = v112 + 1;
        if (v45 == v6)
          goto LABEL_170;
      }
      v211 = MEMORY[0x1E0DEE9D8];
      v201 = v64;
      sub_1CA0CD534(0, v76, 0);
      v77 = sub_1CA0CF95C(v201);
      v78 = v201;
      v80 = v79;
      v81 = 0;
      v82 = v201 + 64;
      v83 = *(_BYTE *)(v201 + 32);
      v199 = v79;
      v188 = v201 + 88;
      v200 = v76;
      while (1)
      {
        if (v77 < 0 || v77 >= 1 << v83)
        {
          __break(1u);
LABEL_303:
          __break(1u);
LABEL_304:
          __break(1u);
LABEL_305:
          __break(1u);
LABEL_306:
          __break(1u);
LABEL_307:
          __break(1u);
          goto LABEL_308;
        }
        v5 = v17;
        v87 = (unint64_t)v77 >> 6;
        v17 = 1 << v77;
        if ((*(_QWORD *)(v82 + 8 * ((unint64_t)v77 >> 6)) & (1 << v77)) == 0)
          goto LABEL_303;
        if (*(_DWORD *)(v78 + 36) != v80)
          goto LABEL_304;
        v205 = v81;
        v88 = v82;
        v207 = *(_QWORD *)(*(_QWORD *)(v78 + 48) + 8 * v77);
        v89 = v211;
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        {
          sub_1CA0CD534(0, *(_QWORD *)(v89 + 16) + 1, 1);
          v89 = v211;
        }
        v91 = *(_QWORD *)(v89 + 16);
        v90 = *(_QWORD *)(v89 + 24);
        v9 = v91 + 1;
        v78 = v201;
        v82 = v88;
        if (v91 >= v90 >> 1)
        {
          sub_1CA0CD534(v90 > 1, v91 + 1, 1);
          v82 = v88;
          v78 = v201;
          v89 = v211;
        }
        *(_QWORD *)(v89 + 16) = v9;
        *(_QWORD *)(v89 + 8 * v91 + 32) = v207;
        v83 = *(_BYTE *)(v78 + 32);
        v6 = 1;
        v84 = 1 << v83;
        if (v77 >= 1 << v83)
          goto LABEL_305;
        v92 = *(_QWORD *)(v82 + 8 * v87);
        if ((v92 & v17) == 0)
          goto LABEL_306;
        if (*(_DWORD *)(v78 + 36) != v80)
          goto LABEL_307;
        v93 = v92 & (-2 << (v77 & 0x3F));
        if (v93)
        {
          v84 = __clz(__rbit64(v93)) | v77 & 0xFFFFFFFFFFFFFFC0;
          v9 = (int64_t)v202;
          v17 = v5;
        }
        else
        {
          v94 = v87 + 1;
          v95 = (v84 + 63) >> 6;
          v9 = (int64_t)v202;
          v17 = v5;
          if (v87 + 1 < v95)
          {
            v96 = *(_QWORD *)(v82 + 8 * v94);
            if (v96)
              goto LABEL_132;
            v94 = v87 + 2;
            if (v87 + 2 < v95)
            {
              v96 = *(_QWORD *)(v82 + 8 * v94);
              if (!v96)
              {
                v97 = v95 - 3;
                v86 = v205;
                while (v97 != v87)
                {
                  v96 = *(_QWORD *)(v188 + 8 * v87++);
                  if (v96)
                  {
                    v94 = v87 + 2;
                    v85 = v200;
                    goto LABEL_133;
                  }
                }
                v85 = v200;
                goto LABEL_117;
              }
LABEL_132:
              v85 = v200;
              v86 = v205;
LABEL_133:
              v84 = __clz(__rbit64(v96)) + (v94 << 6);
              goto LABEL_117;
            }
          }
        }
        v85 = v200;
        v86 = v205;
LABEL_117:
        v81 = v86 + 1;
        v80 = v199;
        v77 = v84;
        if (v81 == v85)
        {
          swift_release();
          v5 = v9;
          v46 = v187;
          goto LABEL_143;
        }
      }
    }
LABEL_170:
    v9 = (int64_t)v7;
    LOBYTE(v211) = 0;
    v113 = v190 + 1;
    v192(&v211, (double)(v190 + 1) / v16);
    if ((v211 & 1) != 0)
      goto LABEL_301;
    if (v113 >= v194)
      goto LABEL_309;
    v190 = v113;
    v15 = v196;
  }
  while (v198);
LABEL_175:
  while (2)
  {
    v209 = MEMORY[0x1E0DEE9E8];
    v114 = swift_bridgeObjectRetain();
    v115 = sub_1CA0C72D0(v114);
    v206 = v7;
    swift_bridgeObjectRelease();
    v116 = 0;
    v117 = *(_QWORD *)(v115 + 56);
    v196 = v115 + 56;
    v118 = 1 << *(_BYTE *)(v115 + 32);
    if (v118 < 64)
      v119 = ~(-1 << v118);
    else
      v119 = -1;
    v120 = v119 & v117;
    v198 = (unint64_t)(v118 + 63) >> 6;
    v199 = v115;
    v201 = v17;
LABEL_181:
    if (v120)
    {
      v200 = (v120 - 1) & v120;
      v203 = v116;
      v121 = __clz(__rbit64(v120)) | (v116 << 6);
LABEL_194:
      v125 = *(unint64_t **)(*(_QWORD *)(v199 + 48) + 8 * v121);
      v126 = swift_bridgeObjectRetain();
      v127 = v125;
      v128 = v197;
      v9 = (int64_t)sub_1CA0CEC78(v126, v127);
      v197 = v128;
      swift_bridgeObjectRelease();
      v129 = *(_QWORD *)(v9 + 16);
      if (v129)
      {
        v211 = MEMORY[0x1E0DEE9D8];
        v207 = v129;
        v208 = v9;
        sub_1CA0CD534(0, v129, 0);
        v130 = v211;
        v6 = sub_1CA0CF95C(v208);
        v132 = v207;
        v131 = v208;
        v134 = v133;
        v135 = 0;
        v136 = v208 + 64;
        v137 = *(_BYTE *)(v208 + 32);
        v138 = v133;
        v139 = v208 + 88;
        while (1)
        {
          if (v6 < 0 || v6 >= 1 << v137)
            goto LABEL_283;
          v141 = (unint64_t)v6 >> 6;
          if ((*(_QWORD *)(v136 + 8 * ((unint64_t)v6 >> 6)) & (1 << v6)) == 0)
            goto LABEL_284;
          if (*(_DWORD *)(v131 + 36) != v134)
            goto LABEL_285;
          v142 = *(_QWORD *)(*(_QWORD *)(v131 + 48) + 8 * v6);
          v211 = v130;
          v9 = *(_QWORD *)(v130 + 16);
          v143 = *(_QWORD *)(v130 + 24);
          if (v9 >= v143 >> 1)
          {
            v204 = v138;
            v205 = v136;
            v195 = v139;
            sub_1CA0CD534(v143 > 1, v9 + 1, 1);
            v139 = v195;
            v138 = v204;
            v136 = v205;
            v132 = v207;
            v131 = v208;
            v130 = v211;
          }
          *(_QWORD *)(v130 + 16) = v9 + 1;
          *(_QWORD *)(v130 + 8 * v9 + 32) = v142;
          v137 = *(_BYTE *)(v131 + 32);
          v140 = 1 << v137;
          if (v6 >= 1 << v137)
            goto LABEL_286;
          v144 = *(_QWORD *)(v136 + 8 * v141);
          if ((v144 & (1 << v6)) == 0)
            goto LABEL_287;
          if (*(_DWORD *)(v131 + 36) != v134)
            goto LABEL_288;
          v145 = v144 & (-2 << (v6 & 0x3F));
          if (v145)
          {
            v140 = __clz(__rbit64(v145)) | v6 & 0xFFFFFFFFFFFFFFC0;
          }
          else
          {
            v146 = v141 + 1;
            v147 = (v140 + 63) >> 6;
            if (v141 + 1 < v147)
            {
              v148 = *(_QWORD *)(v136 + 8 * v146);
              if (!v148)
              {
                v146 = v141 + 2;
                if (v141 + 2 >= v147)
                  goto LABEL_197;
                v148 = *(_QWORD *)(v136 + 8 * v146);
                if (!v148)
                {
                  while (v147 - 3 != v141)
                  {
                    v148 = *(_QWORD *)(v139 + 8 * v141++);
                    if (v148)
                    {
                      v146 = v141 + 2;
                      goto LABEL_210;
                    }
                  }
                  goto LABEL_197;
                }
              }
LABEL_210:
              v140 = __clz(__rbit64(v148)) + (v146 << 6);
            }
          }
LABEL_197:
          ++v135;
          v134 = v138;
          v6 = v140;
          if (v135 == v132)
          {
            swift_release();
            v5 = (uint64_t)v202;
            goto LABEL_218;
          }
        }
      }
      swift_release();
      v130 = MEMORY[0x1E0DEE9D8];
LABEL_218:
      v149 = sub_1CA1F0CA0();
      v150 = v149;
      v151 = *(_QWORD *)(v130 + 16);
      if (v151)
      {
        v152 = 0;
        v6 = v130;
        v153 = v130 + 32;
        v154 = v149 + 56;
        while (1)
        {
          v9 = *(_QWORD *)(v153 + 8 * v152++);
          v155 = sub_1CA1F13E4();
          v156 = -1 << *(_BYTE *)(v150 + 32);
          v157 = v155 & ~v156;
          if (((*(_QWORD *)(v154 + ((v157 >> 3) & 0xFFFFFFFFFFFFF8)) >> v157) & 1) == 0)
            goto LABEL_227;
          v158 = *(_QWORD *)(v150 + 48);
          if (*(_QWORD *)(v158 + 8 * v157) == v9)
          {
LABEL_220:
            if (v152 == v151)
              goto LABEL_229;
          }
          else
          {
            v159 = ~v156;
            while (1)
            {
              v157 = (v157 + 1) & v159;
              if (((*(_QWORD *)(v154 + ((v157 >> 3) & 0xFFFFFFFFFFFFF8)) >> v157) & 1) == 0)
                break;
              if (*(_QWORD *)(v158 + 8 * v157) == v9)
                goto LABEL_220;
            }
LABEL_227:
            v160 = swift_isUniquelyReferenced_nonNull_native();
            v211 = v150;
            sub_1CA0CB8A0(v9, v157, v160);
            v150 = v211;
            swift_bridgeObjectRelease();
            if (v152 == v151)
            {
LABEL_229:
              swift_bridgeObjectRelease();
              v5 = (uint64_t)v202;
              if (*(_QWORD *)(v150 + 16))
                goto LABEL_230;
LABEL_180:
              swift_bridgeObjectRelease();
              v120 = v200;
              v116 = v203;
              goto LABEL_181;
            }
            v154 = v150 + 56;
          }
        }
      }
      swift_bridgeObjectRelease();
      if (!*(_QWORD *)(v150 + 16))
        goto LABEL_180;
LABEL_230:
      v17 = 0;
      v211 = MEMORY[0x1E0DEE9E8];
      v212 = 0;
      v161 = *(_QWORD *)(v150 + 56);
      v205 = v150 + 56;
      v162 = 1 << *(_BYTE *)(v150 + 32);
      if (v162 < 64)
        v163 = ~(-1 << v162);
      else
        v163 = -1;
      v164 = v163 & v161;
      v207 = (unint64_t)(v162 + 63) >> 6;
      v208 = v150;
      if ((v163 & v161) == 0)
      {
LABEL_237:
        v167 = v17 + 1;
        if (__OFADD__(v17, 1))
          goto LABEL_299;
        if (v167 >= v207)
          goto LABEL_179;
        v168 = *(_QWORD *)(v205 + 8 * v167);
        ++v17;
        if (v168)
          goto LABEL_250;
        v17 = v167 + 1;
        if (v167 + 1 >= v207)
          goto LABEL_179;
        v168 = *(_QWORD *)(v205 + 8 * v17);
        if (v168)
          goto LABEL_250;
        v17 = v167 + 2;
        if (v167 + 2 >= v207)
          goto LABEL_179;
        v168 = *(_QWORD *)(v205 + 8 * v17);
        if (v168)
          goto LABEL_250;
        v169 = v167 + 3;
        if (v169 >= v207)
        {
LABEL_179:
          swift_release();
          sub_1CA0BE168((uint64_t *)&v210, v211, v212);
          swift_bridgeObjectRelease();
          goto LABEL_180;
        }
        v168 = *(_QWORD *)(v205 + 8 * v169);
        if (v168)
        {
          v17 = v169;
LABEL_250:
          v164 = (v168 - 1) & v168;
          v166 = __clz(__rbit64(v168)) + (v17 << 6);
          goto LABEL_251;
        }
        while (1)
        {
          v17 = v169 + 1;
          if (__OFADD__(v169, 1))
            break;
          if (v17 >= v207)
            goto LABEL_179;
          v168 = *(_QWORD *)(v205 + 8 * v17);
          ++v169;
          if (v168)
            goto LABEL_250;
        }
LABEL_308:
        __break(1u);
LABEL_309:
        v7 = (_QWORD *)v9;
        continue;
      }
      while (1)
      {
        while (1)
        {
          v165 = __clz(__rbit64(v164));
          v164 &= v164 - 1;
          v166 = v165 | (v17 << 6);
LABEL_251:
          v170 = *(_QWORD *)(*(_QWORD *)(v150 + 48) + 8 * v166);
          v171 = *(_QWORD *)(v5 + 40);
          if ((v171 & 0xC000000000000001) != 0)
          {
            v172 = (id)MEMORY[0x1CAA4A7A4](v170);
          }
          else
          {
            if ((v170 & 0x8000000000000000) != 0)
              goto LABEL_281;
            if (v170 >= *(_QWORD *)((v171 & 0xFFFFFFFFFFFFF8) + 0x10))
              goto LABEL_282;
            v172 = *(id *)(v171 + 8 * v170 + 32);
          }
          v9 = (int64_t)v172;
          v6 = v211;
          if ((v211 & 0xC000000000000001) != 0)
          {
            v173 = v172;
            v174 = sub_1CA1F0FDC();

            if ((v174 & 1) != 0)
              goto LABEL_266;
            goto LABEL_265;
          }
          if (*(_QWORD *)(v211 + 16))
          {
            v175 = sub_1CA1F0E5C();
            v176 = -1 << *(_BYTE *)(v6 + 32);
            v177 = v175 & ~v176;
            v204 = v6 + 56;
            if (((*(_QWORD *)(v6 + 56 + ((v177 >> 3) & 0xFFFFFFFFFFFFF8)) >> v177) & 1) != 0)
              break;
          }
LABEL_265:
          v9 = (int64_t)(id)v9;
          sub_1CA0BDD74(&v210, (void *)v9);
          v173 = v210;

LABEL_266:
          v150 = v208;
          if (!v164)
            goto LABEL_237;
        }
        sub_1CA0B6A1C();
        v178 = *(id *)(*(_QWORD *)(v6 + 48) + 8 * v177);
        v179 = sub_1CA1F0E68();

        if ((v179 & 1) == 0)
        {
          v180 = ~v176;
          do
          {
            v177 = (v177 + 1) & v180;
            v5 = (uint64_t)v202;
            if (((*(_QWORD *)(v204 + ((v177 >> 3) & 0xFFFFFFFFFFFFF8)) >> v177) & 1) == 0)
              goto LABEL_265;
            v181 = *(id *)(*(_QWORD *)(v6 + 48) + 8 * v177);
            v182 = sub_1CA1F0E68();

          }
          while ((v182 & 1) == 0);
        }

        v5 = (uint64_t)v202;
        v150 = v208;
        if (!v164)
          goto LABEL_237;
      }
    }
    break;
  }
  v43 = __OFADD__(v116, 1);
  v122 = v116 + 1;
  if (v43)
    goto LABEL_319;
  if (v122 < v198)
  {
    v123 = *(_QWORD *)(v196 + 8 * v122);
    if (!v123)
    {
      v124 = v122 + 1;
      if (v122 + 1 >= v198)
        goto LABEL_275;
      v123 = *(_QWORD *)(v196 + 8 * v124);
      if (!v123)
      {
        v124 = v122 + 2;
        if (v122 + 2 >= v198)
          goto LABEL_275;
        v123 = *(_QWORD *)(v196 + 8 * v124);
        if (!v123)
        {
          v124 = v122 + 3;
          if (v122 + 3 >= v198)
            goto LABEL_275;
          v123 = *(_QWORD *)(v196 + 8 * v124);
          if (!v123)
          {
            while (1)
            {
              v122 = v124 + 1;
              if (__OFADD__(v124, 1))
                break;
              if (v122 >= v198)
                goto LABEL_275;
              v123 = *(_QWORD *)(v196 + 8 * v122);
              ++v124;
              if (v123)
                goto LABEL_193;
            }
LABEL_328:
            __break(1u);
LABEL_329:
            __break(1u);
LABEL_330:
            __break(1u);
          }
        }
      }
      v122 = v124;
    }
LABEL_193:
    v200 = (v123 - 1) & v123;
    v203 = v122;
    v121 = __clz(__rbit64(v123)) + (v122 << 6);
    goto LABEL_194;
  }
LABEL_275:
  swift_release();
  v9 = v209;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v9;
}

uint64_t sub_1CA0CD4B4(char a1, int64_t a2, char a3)
{
  char **v3;
  uint64_t result;

  result = sub_1CA0CD680(a1, a2, a3, *v3);
  *v3 = (char *)result;
  return result;
}

uint64_t sub_1CA0CD4D0(char a1, int64_t a2, char a3)
{
  char **v3;
  uint64_t result;

  result = sub_1CA0CD7DC(a1, a2, a3, *v3);
  *v3 = (char *)result;
  return result;
}

uint64_t sub_1CA0CD4EC(char a1, int64_t a2, char a3)
{
  char **v3;
  uint64_t result;

  result = sub_1CA0CD928(a1, a2, a3, *v3);
  *v3 = (char *)result;
  return result;
}

uint64_t sub_1CA0CD508(char a1, int64_t a2, char a3)
{
  uint64_t *v3;
  uint64_t result;

  result = sub_1CA0CE1AC(a1, a2, a3, (_QWORD *)*v3, &qword_1EF937AD8, &qword_1EF937148);
  *v3 = result;
  return result;
}

uint64_t sub_1CA0CD534(char a1, int64_t a2, char a3)
{
  char **v3;
  uint64_t result;

  result = sub_1CA0CDA90(a1, a2, a3, *v3);
  *v3 = (char *)result;
  return result;
}

uint64_t sub_1CA0CD550(char a1, int64_t a2, char a3)
{
  char **v3;
  uint64_t result;

  result = sub_1CA0CDBEC(a1, a2, a3, *v3);
  *v3 = (char *)result;
  return result;
}

uint64_t sub_1CA0CD56C(char a1, int64_t a2, char a3)
{
  char **v3;
  uint64_t result;

  result = sub_1CA0CDD48(a1, a2, a3, *v3);
  *v3 = (char *)result;
  return result;
}

uint64_t sub_1CA0CD588(char a1, int64_t a2, char a3)
{
  char **v3;
  uint64_t result;

  result = sub_1CA0CDEA4(a1, a2, a3, *v3);
  *v3 = (char *)result;
  return result;
}

uint64_t sub_1CA0CD5A4(char a1, int64_t a2, char a3)
{
  uint64_t *v3;
  uint64_t result;

  result = sub_1CA0CE024(a1, a2, a3, (_QWORD *)*v3);
  *v3 = result;
  return result;
}

uint64_t sub_1CA0CD5C0(char a1, int64_t a2, char a3)
{
  uint64_t *v3;
  uint64_t result;

  result = sub_1CA0CE1AC(a1, a2, a3, (_QWORD *)*v3, &qword_1EF937B30, &qword_1EF937B38);
  *v3 = result;
  return result;
}

uint64_t sub_1CA0CD5EC(char a1, int64_t a2, char a3)
{
  char **v3;
  uint64_t result;

  result = sub_1CA0CEB20(a1, a2, a3, *v3, &qword_1EF937B28);
  *v3 = (char *)result;
  return result;
}

uint64_t sub_1CA0CD610(char a1, int64_t a2, char a3)
{
  uint64_t *v3;
  uint64_t result;

  result = sub_1CA0CE338(a1, a2, a3, (_QWORD *)*v3);
  *v3 = result;
  return result;
}

uint64_t sub_1CA0CD62C(char a1, int64_t a2, char a3)
{
  uint64_t *v3;
  uint64_t result;

  result = sub_1CA0CE4C0(a1, a2, a3, (_QWORD *)*v3);
  *v3 = result;
  return result;
}

uint64_t sub_1CA0CD648(char a1, int64_t a2, char a3)
{
  uint64_t *v3;
  uint64_t result;

  result = sub_1CA0CE664(a1, a2, a3, (_QWORD *)*v3);
  *v3 = result;
  return result;
}

uint64_t sub_1CA0CD664(char a1, int64_t a2, char a3)
{
  uint64_t *v3;
  uint64_t result;

  result = sub_1CA0CE7EC(a1, a2, a3, (_QWORD *)*v3);
  *v3 = result;
  return result;
}

uint64_t sub_1CA0CD680(char a1, int64_t a2, char a3, char *a4)
{
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  int64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v6 = *((_QWORD *)a4 + 3);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_32;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *((_QWORD *)a4 + 2);
  if (v7 <= v8)
    v9 = *((_QWORD *)a4 + 2);
  else
    v9 = v7;
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName(&qword_1ED8527F0);
    v10 = (char *)swift_allocObject();
    v11 = _swift_stdlib_malloc_size(v10);
    v12 = v11 - 32;
    if (v11 < 32)
      v12 = v11 - 29;
    *((_QWORD *)v10 + 2) = v8;
    *((_QWORD *)v10 + 3) = 2 * (v12 >> 2);
  }
  else
  {
    v10 = (char *)MEMORY[0x1E0DEE9D8];
  }
  v13 = v10 + 32;
  v14 = a4 + 32;
  if ((a1 & 1) != 0)
  {
    if (v10 != a4 || v13 >= &v14[4 * v8])
      memmove(v13, v14, 4 * v8);
    *((_QWORD *)a4 + 2) = 0;
    goto LABEL_30;
  }
  if (v14 >= &v13[4 * v8] || v13 >= &v14[4 * v8])
  {
    memcpy(v13, v14, 4 * v8);
LABEL_30:
    swift_release();
    return (uint64_t)v10;
  }
LABEL_32:
  result = sub_1CA1F1270();
  __break(1u);
  return result;
}

uint64_t sub_1CA0CD7DC(char a1, int64_t a2, char a3, char *a4)
{
  unint64_t v6;
  int64_t v7;
  int64_t v8;
  int64_t v9;
  char *v10;
  size_t v11;
  char *v12;
  char *v13;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v6 = *((_QWORD *)a4 + 3);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_30;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *((_QWORD *)a4 + 2);
  if (v7 <= v8)
    v9 = *((_QWORD *)a4 + 2);
  else
    v9 = v7;
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName(&qword_1EF937B58);
    v10 = (char *)swift_allocObject();
    v11 = _swift_stdlib_malloc_size(v10);
    *((_QWORD *)v10 + 2) = v8;
    *((_QWORD *)v10 + 3) = 2 * v11 - 64;
  }
  else
  {
    v10 = (char *)MEMORY[0x1E0DEE9D8];
  }
  v12 = v10 + 32;
  v13 = a4 + 32;
  if ((a1 & 1) != 0)
  {
    if (v10 != a4 || v12 >= &v13[v8])
      memmove(v12, v13, v8);
    *((_QWORD *)a4 + 2) = 0;
    goto LABEL_28;
  }
  if (v13 >= &v12[v8] || v12 >= &v13[v8])
  {
    memcpy(v12, v13, v8);
LABEL_28:
    swift_release();
    return (uint64_t)v10;
  }
LABEL_30:
  result = sub_1CA1F1270();
  __break(1u);
  return result;
}

uint64_t sub_1CA0CD928(char a1, int64_t a2, char a3, char *a4)
{
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  int64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v6 = *((_QWORD *)a4 + 3);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_32;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *((_QWORD *)a4 + 2);
  if (v7 <= v8)
    v9 = *((_QWORD *)a4 + 2);
  else
    v9 = v7;
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_1EF937190);
    v10 = (char *)swift_allocObject();
    v11 = _swift_stdlib_malloc_size(v10);
    v12 = v11 - 32;
    if (v11 < 32)
      v12 = v11 - 17;
    *((_QWORD *)v10 + 2) = v8;
    *((_QWORD *)v10 + 3) = 2 * (v12 >> 4);
  }
  else
  {
    v10 = (char *)MEMORY[0x1E0DEE9D8];
  }
  v13 = v10 + 32;
  v14 = a4 + 32;
  if ((a1 & 1) != 0)
  {
    if (v10 != a4 || v13 >= &v14[16 * v8])
      memmove(v13, v14, 16 * v8);
    *((_QWORD *)a4 + 2) = 0;
    goto LABEL_30;
  }
  if (v14 >= &v13[16 * v8] || v13 >= &v14[16 * v8])
  {
    swift_arrayInitWithCopy();
LABEL_30:
    swift_release();
    return (uint64_t)v10;
  }
LABEL_32:
  result = sub_1CA1F1270();
  __break(1u);
  return result;
}

uint64_t sub_1CA0CDA90(char a1, int64_t a2, char a3, char *a4)
{
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  int64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v6 = *((_QWORD *)a4 + 3);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_32;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *((_QWORD *)a4 + 2);
  if (v7 <= v8)
    v9 = *((_QWORD *)a4 + 2);
  else
    v9 = v7;
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName(&qword_1ED8528F0);
    v10 = (char *)swift_allocObject();
    v11 = _swift_stdlib_malloc_size(v10);
    v12 = v11 - 32;
    if (v11 < 32)
      v12 = v11 - 25;
    *((_QWORD *)v10 + 2) = v8;
    *((_QWORD *)v10 + 3) = 2 * (v12 >> 3);
  }
  else
  {
    v10 = (char *)MEMORY[0x1E0DEE9D8];
  }
  v13 = v10 + 32;
  v14 = a4 + 32;
  if ((a1 & 1) != 0)
  {
    if (v10 != a4 || v13 >= &v14[8 * v8])
      memmove(v13, v14, 8 * v8);
    *((_QWORD *)a4 + 2) = 0;
    goto LABEL_30;
  }
  if (v14 >= &v13[8 * v8] || v13 >= &v14[8 * v8])
  {
    memcpy(v13, v14, 8 * v8);
LABEL_30:
    swift_release();
    return (uint64_t)v10;
  }
LABEL_32:
  result = sub_1CA1F1270();
  __break(1u);
  return result;
}

uint64_t sub_1CA0CDBEC(char a1, int64_t a2, char a3, char *a4)
{
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  int64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v6 = *((_QWORD *)a4 + 3);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_32;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *((_QWORD *)a4 + 2);
  if (v7 <= v8)
    v9 = *((_QWORD *)a4 + 2);
  else
    v9 = v7;
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName(&qword_1EF937AE0);
    v10 = (char *)swift_allocObject();
    v11 = _swift_stdlib_malloc_size(v10);
    v12 = v11 - 32;
    if (v11 < 32)
      v12 = v11 - 17;
    *((_QWORD *)v10 + 2) = v8;
    *((_QWORD *)v10 + 3) = 2 * (v12 >> 4);
  }
  else
  {
    v10 = (char *)MEMORY[0x1E0DEE9D8];
  }
  v13 = v10 + 32;
  v14 = a4 + 32;
  if ((a1 & 1) != 0)
  {
    if (v10 != a4 || v13 >= &v14[16 * v8])
      memmove(v13, v14, 16 * v8);
    *((_QWORD *)a4 + 2) = 0;
    goto LABEL_30;
  }
  if (v14 >= &v13[16 * v8] || v13 >= &v14[16 * v8])
  {
    memcpy(v13, v14, 16 * v8);
LABEL_30:
    swift_release();
    return (uint64_t)v10;
  }
LABEL_32:
  result = sub_1CA1F1270();
  __break(1u);
  return result;
}

uint64_t sub_1CA0CDD48(char a1, int64_t a2, char a3, char *a4)
{
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  int64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v6 = *((_QWORD *)a4 + 3);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_32;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *((_QWORD *)a4 + 2);
  if (v7 <= v8)
    v9 = *((_QWORD *)a4 + 2);
  else
    v9 = v7;
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName(qword_1ED852848);
    v10 = (char *)swift_allocObject();
    v11 = _swift_stdlib_malloc_size(v10);
    v12 = v11 - 32;
    if (v11 < 32)
      v12 = v11 - 25;
    *((_QWORD *)v10 + 2) = v8;
    *((_QWORD *)v10 + 3) = 2 * (v12 >> 3);
  }
  else
  {
    v10 = (char *)MEMORY[0x1E0DEE9D8];
  }
  v13 = v10 + 32;
  v14 = a4 + 32;
  if ((a1 & 1) != 0)
  {
    if (v10 != a4 || v13 >= &v14[8 * v8])
      memmove(v13, v14, 8 * v8);
    *((_QWORD *)a4 + 2) = 0;
    goto LABEL_30;
  }
  if (v14 >= &v13[8 * v8] || v13 >= &v14[8 * v8])
  {
    memcpy(v13, v14, 8 * v8);
LABEL_30:
    swift_release();
    return (uint64_t)v10;
  }
LABEL_32:
  result = sub_1CA1F1270();
  __break(1u);
  return result;
}

uint64_t sub_1CA0CDEA4(char a1, int64_t a2, char a3, char *a4)
{
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  size_t v11;
  char *v12;
  char *v13;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v6 = *((_QWORD *)a4 + 3);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_30;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *((_QWORD *)a4 + 2);
  if (v7 <= v8)
    v9 = *((_QWORD *)a4 + 2);
  else
    v9 = v7;
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName(&qword_1EF937B40);
    v10 = (char *)swift_allocObject();
    v11 = _swift_stdlib_malloc_size(v10);
    *((_QWORD *)v10 + 2) = v8;
    *((_QWORD *)v10 + 3) = 2 * ((uint64_t)(v11 - 32) / 40);
  }
  else
  {
    v10 = (char *)MEMORY[0x1E0DEE9D8];
  }
  v12 = v10 + 32;
  v13 = a4 + 32;
  if ((a1 & 1) != 0)
  {
    if (v10 != a4 || v12 >= &v13[40 * v8])
      memmove(v12, v13, 40 * v8);
    *((_QWORD *)a4 + 2) = 0;
    goto LABEL_28;
  }
  if (v13 >= &v12[40 * v8] || v12 >= &v13[40 * v8])
  {
    swift_arrayInitWithCopy();
LABEL_28:
    swift_release();
    return (uint64_t)v10;
  }
LABEL_30:
  result = sub_1CA1F1270();
  __break(1u);
  return result;
}

uint64_t sub_1CA0CE024(char a1, int64_t a2, char a3, _QWORD *a4)
{
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  int64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v6 = a4[3];
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_32;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = a4[2];
  if (v7 <= v8)
    v9 = a4[2];
  else
    v9 = v7;
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName(&qword_1EF937B48);
    v10 = (_QWORD *)swift_allocObject();
    v11 = _swift_stdlib_malloc_size(v10);
    v12 = v11 - 32;
    if (v11 < 32)
      v12 = v11 - 17;
    v10[2] = v8;
    v10[3] = 2 * (v12 >> 4);
  }
  else
  {
    v10 = (_QWORD *)MEMORY[0x1E0DEE9D8];
  }
  v13 = (unint64_t)(v10 + 4);
  v14 = (unint64_t)(a4 + 4);
  if ((a1 & 1) != 0)
  {
    if (v10 != a4 || v13 >= v14 + 16 * v8)
      memmove(v10 + 4, a4 + 4, 16 * v8);
    a4[2] = 0;
    goto LABEL_30;
  }
  if (v14 >= v13 + 16 * v8 || v13 >= v14 + 16 * v8)
  {
    __swift_instantiateConcreteTypeFromMangledName(&qword_1EF937B50);
    swift_arrayInitWithCopy();
LABEL_30:
    swift_release();
    return (uint64_t)v10;
  }
LABEL_32:
  result = sub_1CA1F1270();
  __break(1u);
  return result;
}

uint64_t sub_1CA0CE1AC(char a1, int64_t a2, char a3, _QWORD *a4, uint64_t *a5, uint64_t *a6)
{
  unint64_t v9;
  int64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  int64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v9 = a4[3];
    v10 = v9 >> 1;
    if ((uint64_t)(v9 >> 1) < a2)
    {
      if (v10 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_32;
      }
      v10 = v9 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v9 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v10 = a2;
    }
  }
  else
  {
    v10 = a2;
  }
  v11 = a4[2];
  if (v10 <= v11)
    v12 = a4[2];
  else
    v12 = v10;
  if (v12)
  {
    __swift_instantiateConcreteTypeFromMangledName(a5);
    v13 = (_QWORD *)swift_allocObject();
    v14 = _swift_stdlib_malloc_size(v13);
    v15 = v14 - 32;
    if (v14 < 32)
      v15 = v14 - 17;
    v13[2] = v11;
    v13[3] = 2 * (v15 >> 4);
  }
  else
  {
    v13 = (_QWORD *)MEMORY[0x1E0DEE9D8];
  }
  v16 = (unint64_t)(v13 + 4);
  v17 = (unint64_t)(a4 + 4);
  if ((a1 & 1) != 0)
  {
    if (v13 != a4 || v16 >= v17 + 16 * v11)
      memmove(v13 + 4, a4 + 4, 16 * v11);
    a4[2] = 0;
    goto LABEL_30;
  }
  if (v17 >= v16 + 16 * v11 || v16 >= v17 + 16 * v11)
  {
    __swift_instantiateConcreteTypeFromMangledName(a6);
    swift_arrayInitWithCopy();
LABEL_30:
    swift_release();
    return (uint64_t)v13;
  }
LABEL_32:
  result = sub_1CA1F1270();
  __break(1u);
  return result;
}

uint64_t sub_1CA0CE338(char a1, int64_t a2, char a3, _QWORD *a4)
{
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  int64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v6 = a4[3];
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_32;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = a4[2];
  if (v7 <= v8)
    v9 = a4[2];
  else
    v9 = v7;
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName(&qword_1EF937B18);
    v10 = (_QWORD *)swift_allocObject();
    v11 = _swift_stdlib_malloc_size(v10);
    v12 = v11 - 32;
    if (v11 < 32)
      v12 = v11 - 17;
    v10[2] = v8;
    v10[3] = 2 * (v12 >> 4);
  }
  else
  {
    v10 = (_QWORD *)MEMORY[0x1E0DEE9D8];
  }
  v13 = (unint64_t)(v10 + 4);
  v14 = (unint64_t)(a4 + 4);
  if ((a1 & 1) != 0)
  {
    if (v10 != a4 || v13 >= v14 + 16 * v8)
      memmove(v10 + 4, a4 + 4, 16 * v8);
    a4[2] = 0;
    goto LABEL_30;
  }
  if (v14 >= v13 + 16 * v8 || v13 >= v14 + 16 * v8)
  {
    __swift_instantiateConcreteTypeFromMangledName(&qword_1EF937B20);
    swift_arrayInitWithCopy();
LABEL_30:
    swift_release();
    return (uint64_t)v10;
  }
LABEL_32:
  result = sub_1CA1F1270();
  __break(1u);
  return result;
}

uint64_t sub_1CA0CE4C0(char a1, int64_t a2, char a3, _QWORD *a4)
{
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  size_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v6 = a4[3];
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_30;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = a4[2];
  if (v7 <= v8)
    v9 = a4[2];
  else
    v9 = v7;
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName(&qword_1EF937B08);
    v10 = (_QWORD *)swift_allocObject();
    v11 = _swift_stdlib_malloc_size(v10);
    v10[2] = v8;
    v10[3] = 2 * ((uint64_t)(v11 - 32) / 24);
  }
  else
  {
    v10 = (_QWORD *)MEMORY[0x1E0DEE9D8];
  }
  v12 = (unint64_t)(v10 + 4);
  v13 = (unint64_t)(a4 + 4);
  if ((a1 & 1) != 0)
  {
    if (v10 != a4 || v12 >= v13 + 24 * v8)
      memmove(v10 + 4, a4 + 4, 24 * v8);
    a4[2] = 0;
    goto LABEL_28;
  }
  if (v13 >= v12 + 24 * v8 || v12 >= v13 + 24 * v8)
  {
    __swift_instantiateConcreteTypeFromMangledName(&qword_1EF937B10);
    swift_arrayInitWithCopy();
LABEL_28:
    swift_release();
    return (uint64_t)v10;
  }
LABEL_30:
  result = sub_1CA1F1270();
  __break(1u);
  return result;
}

uint64_t sub_1CA0CE664(char a1, int64_t a2, char a3, _QWORD *a4)
{
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  int64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v6 = a4[3];
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_32;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = a4[2];
  if (v7 <= v8)
    v9 = a4[2];
  else
    v9 = v7;
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName(&qword_1EF937B00);
    v10 = (_QWORD *)swift_allocObject();
    v11 = _swift_stdlib_malloc_size(v10);
    v12 = v11 - 32;
    if (v11 < 32)
      v12 = v11 - 25;
    v10[2] = v8;
    v10[3] = 2 * (v12 >> 3);
  }
  else
  {
    v10 = (_QWORD *)MEMORY[0x1E0DEE9D8];
  }
  v13 = (unint64_t)(v10 + 4);
  v14 = (unint64_t)(a4 + 4);
  if ((a1 & 1) != 0)
  {
    if (v10 != a4 || v13 >= v14 + 8 * v8)
      memmove(v10 + 4, a4 + 4, 8 * v8);
    a4[2] = 0;
    goto LABEL_30;
  }
  if (v14 >= v13 + 8 * v8 || v13 >= v14 + 8 * v8)
  {
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_1ED8528D0);
    swift_arrayInitWithCopy();
LABEL_30:
    swift_release();
    return (uint64_t)v10;
  }
LABEL_32:
  result = sub_1CA1F1270();
  __break(1u);
  return result;
}

uint64_t sub_1CA0CE7EC(char a1, int64_t a2, char a3, _QWORD *a4)
{
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  size_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v6 = a4[3];
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_30;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = a4[2];
  if (v7 <= v8)
    v9 = a4[2];
  else
    v9 = v7;
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName(&qword_1EF937AF0);
    v10 = (_QWORD *)swift_allocObject();
    v11 = _swift_stdlib_malloc_size(v10);
    v10[2] = v8;
    v10[3] = 2 * ((uint64_t)(v11 - 32) / 40);
  }
  else
  {
    v10 = (_QWORD *)MEMORY[0x1E0DEE9D8];
  }
  v12 = (unint64_t)(v10 + 4);
  v13 = (unint64_t)(a4 + 4);
  if ((a1 & 1) != 0)
  {
    if (v10 != a4 || v12 >= v13 + 40 * v8)
      memmove(v10 + 4, a4 + 4, 40 * v8);
    a4[2] = 0;
    goto LABEL_28;
  }
  if (v13 >= v12 + 40 * v8 || v12 >= v13 + 40 * v8)
  {
    __swift_instantiateConcreteTypeFromMangledName(&qword_1EF937AF8);
    swift_arrayInitWithCopy();
LABEL_28:
    swift_release();
    return (uint64_t)v10;
  }
LABEL_30:
  result = sub_1CA1F1270();
  __break(1u);
  return result;
}

uint64_t sub_1CA0CE98C(char a1, int64_t a2, char a3, _QWORD *a4)
{
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  int64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v6 = a4[3];
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_32;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = a4[2];
  if (v7 <= v8)
    v9 = a4[2];
  else
    v9 = v7;
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName(&qword_1EF937160);
    v10 = (_QWORD *)swift_allocObject();
    v11 = _swift_stdlib_malloc_size(v10);
    v12 = v11 - 32;
    if (v11 < 32)
      v12 = v11 - 17;
    v10[2] = v8;
    v10[3] = 2 * (v12 >> 4);
  }
  else
  {
    v10 = (_QWORD *)MEMORY[0x1E0DEE9D8];
  }
  v13 = (unint64_t)(v10 + 4);
  v14 = (unint64_t)(a4 + 4);
  if ((a1 & 1) != 0)
  {
    if (v10 != a4 || v13 >= v14 + 16 * v8)
      memmove(v10 + 4, a4 + 4, 16 * v8);
    a4[2] = 0;
    goto LABEL_30;
  }
  if (v14 >= v13 + 16 * v8 || v13 >= v14 + 16 * v8)
  {
    __swift_instantiateConcreteTypeFromMangledName(&qword_1EF937AE8);
    swift_arrayInitWithCopy();
LABEL_30:
    swift_release();
    return (uint64_t)v10;
  }
LABEL_32:
  result = sub_1CA1F1270();
  __break(1u);
  return result;
}

uint64_t sub_1CA0CEB14(char a1, int64_t a2, char a3, char *a4)
{
  return sub_1CA0CEB20(a1, a2, a3, a4, &qword_1EF937150);
}

uint64_t sub_1CA0CEB20(char a1, int64_t a2, char a3, char *a4, uint64_t *a5)
{
  unint64_t v7;
  int64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  int64_t v12;
  uint64_t v13;
  char *v14;
  char *v15;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v7 = *((_QWORD *)a4 + 3);
    v8 = v7 >> 1;
    if ((uint64_t)(v7 >> 1) < a2)
    {
      if (v8 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_32;
      }
      v8 = v7 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v7 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v8 = a2;
    }
  }
  else
  {
    v8 = a2;
  }
  v9 = *((_QWORD *)a4 + 2);
  if (v8 <= v9)
    v10 = *((_QWORD *)a4 + 2);
  else
    v10 = v8;
  if (v10)
  {
    __swift_instantiateConcreteTypeFromMangledName(a5);
    v11 = (char *)swift_allocObject();
    v12 = _swift_stdlib_malloc_size(v11);
    v13 = v12 - 32;
    if (v12 < 32)
      v13 = v12 - 17;
    *((_QWORD *)v11 + 2) = v9;
    *((_QWORD *)v11 + 3) = 2 * (v13 >> 4);
  }
  else
  {
    v11 = (char *)MEMORY[0x1E0DEE9D8];
  }
  v14 = v11 + 32;
  v15 = a4 + 32;
  if ((a1 & 1) != 0)
  {
    if (v11 != a4 || v14 >= &v15[16 * v9])
      memmove(v14, v15, 16 * v9);
    *((_QWORD *)a4 + 2) = 0;
    goto LABEL_30;
  }
  if (v15 >= &v14[16 * v9] || v14 >= &v15[16 * v9])
  {
    memcpy(v14, v15, 16 * v9);
LABEL_30:
    swift_release();
    return (uint64_t)v11;
  }
LABEL_32:
  result = sub_1CA1F1270();
  __break(1u);
  return result;
}

unint64_t *sub_1CA0CEC78(uint64_t isStackAllocationSafe, unint64_t *a2)
{
  uint64_t v2;
  unint64_t *v3;
  uint64_t v4;
  char v5;
  unint64_t v6;
  size_t v7;
  unint64_t *v8;
  void *v9;
  _QWORD v11[2];

  v3 = a2;
  v4 = isStackAllocationSafe;
  v11[1] = *MEMORY[0x1E0C80C00];
  v5 = *(_BYTE *)(isStackAllocationSafe + 32);
  v6 = (unint64_t)((1 << v5) + 63) >> 6;
  v7 = 8 * v6;
  if ((v5 & 0x3Fu) <= 0xD
    || (isStackAllocationSafe = swift_stdlib_isStackAllocationSafe(), (isStackAllocationSafe & 1) != 0))
  {
    MEMORY[0x1E0C80A78](isStackAllocationSafe, a2);
    bzero((char *)v11 - ((v7 + 15) & 0x3FFFFFFFFFFFFFF0), v7);
    v8 = sub_1CA0CEDDC((_QWORD *)((char *)v11 - ((v7 + 15) & 0x3FFFFFFFFFFFFFF0)), v6, v4, (uint64_t)v3);
    if (v2)
      swift_willThrow();
    else
      return v8;
  }
  else
  {
    v9 = (void *)swift_slowAlloc();
    bzero(v9, v7);
    v3 = sub_1CA0CEDDC((unint64_t *)v9, v6, v4, (uint64_t)v3);
    MEMORY[0x1CAA4BBE4](v9, -1, -1);
  }
  return v3;
}

unint64_t *sub_1CA0CEDDC(unint64_t *result, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  int64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  int64_t v11;
  unint64_t v12;
  unint64_t v13;
  int64_t v14;
  unint64_t v15;
  int64_t v16;

  v5 = 0;
  v6 = 0;
  v7 = a3 + 64;
  v8 = 1 << *(_BYTE *)(a3 + 32);
  v9 = -1;
  if (v8 < 64)
    v9 = ~(-1 << v8);
  v10 = v9 & *(_QWORD *)(a3 + 64);
  v11 = (unint64_t)(v8 + 63) >> 6;
  while (1)
  {
    if (v10)
    {
      v12 = __clz(__rbit64(v10));
      v10 &= v10 - 1;
      v13 = v12 | (v6 << 6);
      goto LABEL_5;
    }
    v14 = v6 + 1;
    if (__OFADD__(v6, 1))
    {
      __break(1u);
      goto LABEL_26;
    }
    if (v14 >= v11)
      return (unint64_t *)sub_1CA0CEF2C(result, a2, v5, a3);
    v15 = *(_QWORD *)(v7 + 8 * v14);
    ++v6;
    if (!v15)
    {
      v6 = v14 + 1;
      if (v14 + 1 >= v11)
        return (unint64_t *)sub_1CA0CEF2C(result, a2, v5, a3);
      v15 = *(_QWORD *)(v7 + 8 * v6);
      if (!v15)
      {
        v6 = v14 + 2;
        if (v14 + 2 >= v11)
          return (unint64_t *)sub_1CA0CEF2C(result, a2, v5, a3);
        v15 = *(_QWORD *)(v7 + 8 * v6);
        if (!v15)
          break;
      }
    }
LABEL_20:
    v10 = (v15 - 1) & v15;
    v13 = __clz(__rbit64(v15)) + (v6 << 6);
LABEL_5:
    if (*(_QWORD *)(*(_QWORD *)(a3 + 56) + 8 * v13) == a4)
    {
      *(unint64_t *)((char *)result + ((v13 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v13;
      if (__OFADD__(v5++, 1))
      {
        __break(1u);
        return (unint64_t *)sub_1CA0CEF2C(result, a2, v5, a3);
      }
    }
  }
  v16 = v14 + 3;
  if (v16 >= v11)
    return (unint64_t *)sub_1CA0CEF2C(result, a2, v5, a3);
  v15 = *(_QWORD *)(v7 + 8 * v16);
  if (v15)
  {
    v6 = v16;
    goto LABEL_20;
  }
  while (1)
  {
    v6 = v16 + 1;
    if (__OFADD__(v16, 1))
      break;
    if (v6 >= v11)
      return (unint64_t *)sub_1CA0CEF2C(result, a2, v5, a3);
    v15 = *(_QWORD *)(v7 + 8 * v6);
    ++v16;
    if (v15)
      goto LABEL_20;
  }
LABEL_26:
  __break(1u);
  return result;
}

uint64_t sub_1CA0CEF2C(unint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t result;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  char v25;
  unint64_t v26;
  BOOL v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t *v31;

  if (!a3)
    return MEMORY[0x1E0DEE9E0];
  v4 = a4;
  v5 = a3;
  if (*(_QWORD *)(a4 + 16) == a3)
  {
    swift_retain();
    return v4;
  }
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EF9384B0);
  result = sub_1CA1F1264();
  v9 = result;
  v31 = a1;
  if (a2 < 1)
    v10 = 0;
  else
    v10 = *a1;
  v11 = 0;
  v12 = result + 64;
  while (1)
  {
    if (v10)
    {
      v13 = __clz(__rbit64(v10));
      v10 &= v10 - 1;
      v14 = v13 | (v11 << 6);
    }
    else
    {
      v15 = v11 + 1;
      if (__OFADD__(v11, 1))
        goto LABEL_40;
      if (v15 >= a2)
        return v9;
      v16 = v31[v15];
      ++v11;
      if (!v16)
      {
        v11 = v15 + 1;
        if (v15 + 1 >= a2)
          return v9;
        v16 = v31[v11];
        if (!v16)
        {
          v11 = v15 + 2;
          if (v15 + 2 >= a2)
            return v9;
          v16 = v31[v11];
          if (!v16)
          {
            v17 = v15 + 3;
            if (v17 >= a2)
              return v9;
            v16 = v31[v17];
            if (!v16)
            {
              while (1)
              {
                v11 = v17 + 1;
                if (__OFADD__(v17, 1))
                  goto LABEL_41;
                if (v11 >= a2)
                  return v9;
                v16 = v31[v11];
                ++v17;
                if (v16)
                  goto LABEL_24;
              }
            }
            v11 = v17;
          }
        }
      }
LABEL_24:
      v10 = (v16 - 1) & v16;
      v14 = __clz(__rbit64(v16)) + (v11 << 6);
    }
    v18 = 8 * v14;
    v19 = *(_QWORD *)(*(_QWORD *)(v4 + 48) + v18);
    v20 = *(_QWORD *)(*(_QWORD *)(v4 + 56) + v18);
    result = sub_1CA1F13E4();
    v21 = -1 << *(_BYTE *)(v9 + 32);
    v22 = result & ~v21;
    v23 = v22 >> 6;
    if (((-1 << v22) & ~*(_QWORD *)(v12 + 8 * (v22 >> 6))) != 0)
    {
      v24 = __clz(__rbit64((-1 << v22) & ~*(_QWORD *)(v12 + 8 * (v22 >> 6)))) | v22 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v25 = 0;
      v26 = (unint64_t)(63 - v21) >> 6;
      do
      {
        if (++v23 == v26 && (v25 & 1) != 0)
        {
          __break(1u);
          goto LABEL_39;
        }
        v27 = v23 == v26;
        if (v23 == v26)
          v23 = 0;
        v25 |= v27;
        v28 = *(_QWORD *)(v12 + 8 * v23);
      }
      while (v28 == -1);
      v24 = __clz(__rbit64(~v28)) + (v23 << 6);
    }
    *(_QWORD *)(v12 + ((v24 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v24;
    v29 = 8 * v24;
    *(_QWORD *)(*(_QWORD *)(v9 + 48) + v29) = v19;
    *(_QWORD *)(*(_QWORD *)(v9 + 56) + v29) = v20;
    ++*(_QWORD *)(v9 + 16);
    if (__OFSUB__(v5--, 1))
      break;
    if (!v5)
      return v9;
  }
LABEL_39:
  __break(1u);
LABEL_40:
  __break(1u);
LABEL_41:
  __break(1u);
  return result;
}

uint64_t sub_1CA0CF198(unint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t result;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  id v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  char v24;
  unint64_t v25;
  BOOL v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v30;

  if (!a3)
    return MEMORY[0x1E0DEE9E0];
  v4 = a4;
  v5 = a3;
  if (*(_QWORD *)(a4 + 16) == a3)
  {
    swift_retain();
    return v4;
  }
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_1EF937060);
  result = sub_1CA1F1264();
  v8 = result;
  v30 = a2;
  if (a2 < 1)
    v9 = 0;
  else
    v9 = *a1;
  v10 = 0;
  v11 = result + 64;
  while (1)
  {
    if (v9)
    {
      v12 = __clz(__rbit64(v9));
      v9 &= v9 - 1;
      v13 = v12 | (v10 << 6);
    }
    else
    {
      v14 = v10 + 1;
      if (__OFADD__(v10, 1))
        goto LABEL_40;
      if (v14 >= v30)
        return v8;
      v15 = a1[v14];
      ++v10;
      if (!v15)
      {
        v10 = v14 + 1;
        if (v14 + 1 >= v30)
          return v8;
        v15 = a1[v10];
        if (!v15)
        {
          v10 = v14 + 2;
          if (v14 + 2 >= v30)
            return v8;
          v15 = a1[v10];
          if (!v15)
          {
            v16 = v14 + 3;
            if (v16 >= v30)
              return v8;
            v15 = a1[v16];
            if (!v15)
            {
              while (1)
              {
                v10 = v16 + 1;
                if (__OFADD__(v16, 1))
                  goto LABEL_41;
                if (v10 >= v30)
                  return v8;
                v15 = a1[v10];
                ++v16;
                if (v15)
                  goto LABEL_24;
              }
            }
            v10 = v16;
          }
        }
      }
LABEL_24:
      v9 = (v15 - 1) & v15;
      v13 = __clz(__rbit64(v15)) + (v10 << 6);
    }
    v17 = 8 * v13;
    v18 = *(_QWORD *)(*(_QWORD *)(v4 + 56) + v17);
    v19 = *(id *)(*(_QWORD *)(v4 + 48) + v17);
    swift_bridgeObjectRetain();
    result = sub_1CA1F0E5C();
    v20 = -1 << *(_BYTE *)(v8 + 32);
    v21 = result & ~v20;
    v22 = v21 >> 6;
    if (((-1 << v21) & ~*(_QWORD *)(v11 + 8 * (v21 >> 6))) != 0)
    {
      v23 = __clz(__rbit64((-1 << v21) & ~*(_QWORD *)(v11 + 8 * (v21 >> 6)))) | v21 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v24 = 0;
      v25 = (unint64_t)(63 - v20) >> 6;
      do
      {
        if (++v22 == v25 && (v24 & 1) != 0)
        {
          __break(1u);
          goto LABEL_39;
        }
        v26 = v22 == v25;
        if (v22 == v25)
          v22 = 0;
        v24 |= v26;
        v27 = *(_QWORD *)(v11 + 8 * v22);
      }
      while (v27 == -1);
      v23 = __clz(__rbit64(~v27)) + (v22 << 6);
    }
    *(_QWORD *)(v11 + ((v23 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v23;
    v28 = 8 * v23;
    *(_QWORD *)(*(_QWORD *)(v8 + 48) + v28) = v19;
    *(_QWORD *)(*(_QWORD *)(v8 + 56) + v28) = v18;
    ++*(_QWORD *)(v8 + 16);
    if (__OFSUB__(v5--, 1))
      break;
    if (!v5)
      return v8;
  }
LABEL_39:
  __break(1u);
LABEL_40:
  __break(1u);
LABEL_41:
  __break(1u);
  return result;
}

uint64_t sub_1CA0CF42C(unint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t result;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  id v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  char v25;
  unint64_t v26;
  BOOL v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t *v31;

  if (!a3)
    return MEMORY[0x1E0DEE9E0];
  v4 = a4;
  v5 = a3;
  if (*(_QWORD *)(a4 + 16) == a3)
  {
    swift_retain();
    return v4;
  }
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EF93A330);
  result = sub_1CA1F1264();
  v9 = result;
  v31 = a1;
  if (a2 < 1)
    v10 = 0;
  else
    v10 = *a1;
  v11 = 0;
  v12 = result + 64;
  while (1)
  {
    if (v10)
    {
      v13 = __clz(__rbit64(v10));
      v10 &= v10 - 1;
      v14 = v13 | (v11 << 6);
    }
    else
    {
      v15 = v11 + 1;
      if (__OFADD__(v11, 1))
        goto LABEL_40;
      if (v15 >= a2)
        return v9;
      v16 = v31[v15];
      ++v11;
      if (!v16)
      {
        v11 = v15 + 1;
        if (v15 + 1 >= a2)
          return v9;
        v16 = v31[v11];
        if (!v16)
        {
          v11 = v15 + 2;
          if (v15 + 2 >= a2)
            return v9;
          v16 = v31[v11];
          if (!v16)
          {
            v17 = v15 + 3;
            if (v17 >= a2)
              return v9;
            v16 = v31[v17];
            if (!v16)
            {
              while (1)
              {
                v11 = v17 + 1;
                if (__OFADD__(v17, 1))
                  goto LABEL_41;
                if (v11 >= a2)
                  return v9;
                v16 = v31[v11];
                ++v17;
                if (v16)
                  goto LABEL_24;
              }
            }
            v11 = v17;
          }
        }
      }
LABEL_24:
      v10 = (v16 - 1) & v16;
      v14 = __clz(__rbit64(v16)) + (v11 << 6);
    }
    v18 = 8 * v14;
    v19 = *(_QWORD *)(*(_QWORD *)(v4 + 56) + v18);
    v20 = *(id *)(*(_QWORD *)(v4 + 48) + v18);
    result = sub_1CA1F0E5C();
    v21 = -1 << *(_BYTE *)(v9 + 32);
    v22 = result & ~v21;
    v23 = v22 >> 6;
    if (((-1 << v22) & ~*(_QWORD *)(v12 + 8 * (v22 >> 6))) != 0)
    {
      v24 = __clz(__rbit64((-1 << v22) & ~*(_QWORD *)(v12 + 8 * (v22 >> 6)))) | v22 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v25 = 0;
      v26 = (unint64_t)(63 - v21) >> 6;
      do
      {
        if (++v23 == v26 && (v25 & 1) != 0)
        {
          __break(1u);
          goto LABEL_39;
        }
        v27 = v23 == v26;
        if (v23 == v26)
          v23 = 0;
        v25 |= v27;
        v28 = *(_QWORD *)(v12 + 8 * v23);
      }
      while (v28 == -1);
      v24 = __clz(__rbit64(~v28)) + (v23 << 6);
    }
    *(_QWORD *)(v12 + ((v24 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v24;
    v29 = 8 * v24;
    *(_QWORD *)(*(_QWORD *)(v9 + 48) + v29) = v20;
    *(_QWORD *)(*(_QWORD *)(v9 + 56) + v29) = v19;
    ++*(_QWORD *)(v9 + 16);
    if (__OFSUB__(v5--, 1))
      break;
    if (!v5)
      return v9;
  }
LABEL_39:
  __break(1u);
LABEL_40:
  __break(1u);
LABEL_41:
  __break(1u);
  return result;
}

uint64_t sub_1CA0CF6A8(unint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t result;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  char v22;
  unint64_t v23;
  BOOL v24;
  uint64_t v25;
  uint64_t v26;
  __int128 v27;
  unint64_t *v29;
  _OWORD v30[2];
  __int128 v31;
  __int128 v32;
  uint64_t v33;
  _OWORD v34[2];
  _OWORD v35[2];
  uint64_t v36;

  if (!a3)
    return MEMORY[0x1E0DEE9E0];
  v4 = a4;
  v5 = a3;
  if (*(_QWORD *)(a4 + 16) == a3)
  {
    swift_retain();
    return v4;
  }
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_1EF938460);
  result = sub_1CA1F1264();
  v9 = result;
  v29 = a1;
  if (a2 < 1)
    v10 = 0;
  else
    v10 = *a1;
  v11 = 0;
  v12 = result + 64;
  while (1)
  {
    if (v10)
    {
      v13 = __clz(__rbit64(v10));
      v10 &= v10 - 1;
      v14 = v13 | (v11 << 6);
    }
    else
    {
      v15 = v11 + 1;
      if (__OFADD__(v11, 1))
        goto LABEL_40;
      if (v15 >= a2)
        return v9;
      v16 = v29[v15];
      ++v11;
      if (!v16)
      {
        v11 = v15 + 1;
        if (v15 + 1 >= a2)
          return v9;
        v16 = v29[v11];
        if (!v16)
        {
          v11 = v15 + 2;
          if (v15 + 2 >= a2)
            return v9;
          v16 = v29[v11];
          if (!v16)
          {
            v17 = v15 + 3;
            if (v17 >= a2)
              return v9;
            v16 = v29[v17];
            if (!v16)
            {
              while (1)
              {
                v11 = v17 + 1;
                if (__OFADD__(v17, 1))
                  goto LABEL_41;
                if (v11 >= a2)
                  return v9;
                v16 = v29[v11];
                ++v17;
                if (v16)
                  goto LABEL_24;
              }
            }
            v11 = v17;
          }
        }
      }
LABEL_24:
      v10 = (v16 - 1) & v16;
      v14 = __clz(__rbit64(v16)) + (v11 << 6);
    }
    sub_1CA0AB948(*(_QWORD *)(v4 + 48) + 40 * v14, (uint64_t)v35);
    sub_1CA0B6A98(*(_QWORD *)(v4 + 56) + 32 * v14, (uint64_t)v34);
    v31 = v35[0];
    v32 = v35[1];
    v33 = v36;
    sub_1CA0AFCC0(v34, v30);
    result = sub_1CA1F1000();
    v18 = -1 << *(_BYTE *)(v9 + 32);
    v19 = result & ~v18;
    v20 = v19 >> 6;
    if (((-1 << v19) & ~*(_QWORD *)(v12 + 8 * (v19 >> 6))) != 0)
    {
      v21 = __clz(__rbit64((-1 << v19) & ~*(_QWORD *)(v12 + 8 * (v19 >> 6)))) | v19 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v22 = 0;
      v23 = (unint64_t)(63 - v18) >> 6;
      do
      {
        if (++v20 == v23 && (v22 & 1) != 0)
        {
          __break(1u);
          goto LABEL_39;
        }
        v24 = v20 == v23;
        if (v20 == v23)
          v20 = 0;
        v22 |= v24;
        v25 = *(_QWORD *)(v12 + 8 * v20);
      }
      while (v25 == -1);
      v21 = __clz(__rbit64(~v25)) + (v20 << 6);
    }
    *(_QWORD *)(v12 + ((v21 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v21;
    v26 = *(_QWORD *)(v9 + 48) + 40 * v21;
    v27 = v32;
    *(_OWORD *)v26 = v31;
    *(_OWORD *)(v26 + 16) = v27;
    *(_QWORD *)(v26 + 32) = v33;
    result = (uint64_t)sub_1CA0AFCC0(v30, (_OWORD *)(*(_QWORD *)(v9 + 56) + 32 * v21));
    ++*(_QWORD *)(v9 + 16);
    if (__OFSUB__(v5--, 1))
      break;
    if (!v5)
      return v9;
  }
LABEL_39:
  __break(1u);
LABEL_40:
  __break(1u);
LABEL_41:
  __break(1u);
  return result;
}

uint64_t sub_1CA0CF95C(uint64_t a1)
{
  unint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char v5;
  unsigned int v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t *v9;
  unint64_t v10;

  v1 = *(_QWORD *)(a1 + 64);
  if (v1)
  {
    v2 = 0;
    return __clz(__rbit64(v1)) + v2;
  }
  v5 = *(_BYTE *)(a1 + 32);
  v6 = v5 & 0x3F;
  v3 = 1 << v5;
  if (v6 < 7)
    return v3;
  v1 = *(_QWORD *)(a1 + 72);
  if (v1)
  {
    v2 = 64;
    return __clz(__rbit64(v1)) + v2;
  }
  v7 = (unint64_t)(v3 + 63) >> 6;
  if (v7 <= 2)
    v7 = 2;
  v8 = v7 - 2;
  v9 = (unint64_t *)(a1 + 80);
  v2 = 64;
  while (v8)
  {
    v10 = *v9++;
    v1 = v10;
    --v8;
    v2 += 64;
    if (v10)
      return __clz(__rbit64(v1)) + v2;
  }
  return v3;
}

uint64_t static NodeCollection<>.fetch(in:)@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, _QWORD *a4@<X8>)
{
  uint64_t v8;
  uint64_t v9;
  void (*v10)(__int128 *__return_ptr, uint64_t, uint64_t);
  uint64_t v11;
  uint64_t v12;
  uint64_t v14;
  uint64_t v15;
  __int128 v16;
  uint64_t v17;
  uint64_t v18;

  v8 = a1[3];
  v9 = a1[4];
  __swift_project_boxed_opaque_existential_1(a1, v8);
  v10 = *(void (**)(__int128 *__return_ptr, uint64_t, uint64_t))(a3 + 16);
  v17 = type metadata accessor for Filter(0, a2, v11, v12);
  v15 = *(_QWORD *)(a3 + 8);
  v18 = MEMORY[0x1CAA4BB30](&protocol conformance descriptor for <A> Filter<A>, v17, &v15);
  v10(&v16, a2, a3);
  AbstractGraph.nodeIdentifiers(matching:)(&v16, v8, v9, &v14);
  __swift_destroy_boxed_opaque_existential_0((uint64_t)&v16);
  sub_1CA0C7A10((uint64_t)a1, (uint64_t)&v16);
  return NodeCollection.init(with:in:)(&v14, &v16, a4);
}

uint64_t static NodeCollection<>.fetch(with:in:)@<X0>(_QWORD *a1@<X0>, _QWORD *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, _QWORD *a5@<X8>)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v13;
  __n128 v14[2];

  v10 = a2[3];
  v11 = a2[4];
  __swift_project_boxed_opaque_existential_1(a2, v10);
  sub_1CA0CFB88(a1, a3, a4, v14);
  AbstractGraph.nodeIdentifiers(matching:)(v14, v10, v11, &v13);
  __swift_destroy_boxed_opaque_existential_0((uint64_t)v14);
  sub_1CA0C7A10((uint64_t)a2, (uint64_t)v14);
  return NodeCollection.init(with:in:)(&v13, (__int128 *)v14, a5);
}

__n128 sub_1CA0CFB88@<Q0>(_QWORD *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, __n128 *a4@<X8>)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  __n128 result;
  __n128 v28;
  uint64_t v29;
  uint64_t v30;
  __int128 v31;
  unint64_t v32;

  (*(void (**)(__int128 *__return_ptr, uint64_t, uint64_t))(a3 + 16))(&v31, a2, a3);
  v8 = v31;
  v9 = a1[3];
  v10 = a1[4];
  __swift_project_boxed_opaque_existential_1(a1, v9);
  v11 = (*(uint64_t (**)(uint64_t, uint64_t))(v10 + 8))(v9, v10);
  *(_QWORD *)&v31 = v8;
  swift_bridgeObjectRetain();
  sub_1CA0B2C2C(v11);
  v12 = sub_1CA0C7340(v31);
  swift_bridgeObjectRelease();
  v13 = sub_1CA0B58C0(v12);
  swift_bridgeObjectRelease();
  v14 = swift_bridgeObjectRetain();
  v15 = sub_1CA0C7340(v14);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease_n();
  v16 = a1[3];
  v17 = a1[4];
  __swift_project_boxed_opaque_existential_1(a1, v16);
  v18 = (*(uint64_t (**)(uint64_t, uint64_t))(v17 + 16))(v16, v17);
  v19 = sub_1CA113DA0(v18, v15);
  swift_bridgeObjectRelease();
  v20 = sub_1CA0B58C0(v19);
  swift_release();
  v21 = a1[3];
  v22 = a1[4];
  __swift_project_boxed_opaque_existential_1(a1, v21);
  (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t))(v22 + 24))(&v30, v21, v22);
  Filter.init(with:anyOfLabels:properties:)((uint64_t)v13, (uint64_t)v20, &v30, &v31);
  v23 = v32;
  v26 = type metadata accessor for Filter(0, a2, v24, v25);
  v28 = (__n128)v31;
  a4[1].n128_u64[1] = v26;
  v29 = *(_QWORD *)(a3 + 8);
  a4[2].n128_u64[0] = MEMORY[0x1CAA4BB30](&protocol conformance descriptor for <A> Filter<A>, v26, &v29);
  result = v28;
  *a4 = v28;
  a4[1].n128_u64[0] = v23;
  return result;
}

uint64_t static NodeCollection<>.fetch(with:in:)@<X0>(uint64_t *a1@<X0>, _QWORD *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, _QWORD *a5@<X8>)
{
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  id v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  char v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  id v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t *v38;
  char v39;
  uint64_t result;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  id v49;
  uint64_t v50;
  _QWORD *v51;
  _QWORD *v52;
  _QWORD *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  __n128 v73[3];

  v7 = (uint64_t)a2;
  v8 = a5;
  v9 = *a1;
  if ((a1[1] & 1) == 0)
  {
    v53 = a5;
    v66 = *a1;
    v31 = a2[3];
    v30 = a2[4];
    __swift_project_boxed_opaque_existential_1(a2, v31);
    v34 = type metadata accessor for Filter(0, a3, v32, v33);
    v71 = v34;
    v64 = *(_QWORD *)(a4 + 8);
    v58 = MEMORY[0x1CAA4BB30](&protocol conformance descriptor for <A> Filter<A>, v34, &v64);
    v72 = v58;
    v35 = sub_1CA1F0BE0();
    swift_bridgeObjectRetain();
    MEMORY[0x1CAA4BB30](MEMORY[0x1E0DEAF58], v35);
    sub_1CA1F0DD8();
    sub_1CA0CFB88(&v68, a3, a4, v73);
    __swift_destroy_boxed_opaque_existential_0((uint64_t)&v68);
    AbstractGraph.nodeIdentifiers(matching:)(v73, v31, v30, &v65);
    __swift_destroy_boxed_opaque_existential_0((uint64_t)v73);
    v36 = v66;
    if (MEMORY[0x1CAA4A2DC](v66, v34))
    {
      v60 = a3;
      v37 = 0;
      v38 = (uint64_t *)(v36 + 48);
      v56 = v36;
      while (1)
      {
        v39 = sub_1CA1F0B80();
        result = sub_1CA1F0B20();
        if ((v39 & 1) == 0)
          goto LABEL_25;
        v41 = v37 + 1;
        if (__OFADD__(v37, 1))
          goto LABEL_26;
        v43 = *(v38 - 1);
        v42 = *v38;
        v44 = *(v38 - 2);
        v45 = a2[3];
        v46 = a2[4];
        __swift_project_boxed_opaque_existential_1(a2, v45);
        v71 = v34;
        v72 = v58;
        v68 = v44;
        v69 = v43;
        v70 = v42;
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        sub_1CA0CFB88(&v68, v60, a4, v73);
        __swift_destroy_boxed_opaque_existential_0((uint64_t)&v68);
        v47 = v65;
        v63 = v65;
        AbstractGraph.nodeIdentifiers(matching:in:)(v73, (uint64_t)&v63, v45, v46, &v68);
        __swift_destroy_boxed_opaque_existential_0((uint64_t)v73);
        v48 = v68;
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        {
          v49 = *(id *)(v47 + 16);
          objc_msgSend(v49, sel_mutableCopy);
          sub_1CA1F0F04();
          swift_unknownObjectRelease();
          sub_1CA0D0350();
          swift_dynamicCast();
          v50 = v68;

          __swift_instantiateConcreteTypeFromMangledName(&qword_1ED852AF0);
          v47 = swift_allocObject();
          *(_QWORD *)(v47 + 16) = v50;
          v65 = v47;
          swift_release();
        }
        objc_msgSend(*(id *)(v47 + 16), sel_intersectWithIdentifierSet_, *(_QWORD *)(v48 + 16), v53);
        swift_release();
        ++v37;
        v38 += 3;
        if (v41 == MEMORY[0x1CAA4A2DC](v56, v34))
        {
          swift_bridgeObjectRelease();
          goto LABEL_21;
        }
      }
    }
    swift_bridgeObjectRelease();
LABEL_21:
    v68 = v65;
    sub_1CA0C7A10((uint64_t)a2, (uint64_t)v73);
    v51 = v53;
    return NodeCollection.init(with:in:)(&v68, (__int128 *)v73, v51);
  }
  v10 = objc_msgSend(objc_allocWithZone((Class)KGMutableElementIdentifierSet), sel_init);
  __swift_instantiateConcreteTypeFromMangledName(&qword_1ED852AF0);
  v11 = swift_allocObject();
  *(_QWORD *)(v11 + 16) = v10;
  v14 = type metadata accessor for Filter(0, a3, v12, v13);
  v15 = swift_bridgeObjectRetain();
  if (!MEMORY[0x1CAA4A2DC](v15, v14))
  {
    swift_bridgeObjectRelease();
LABEL_19:
    v68 = v11;
    sub_1CA0C7A10(v7, (uint64_t)v73);
    v51 = v8;
    return NodeCollection.init(with:in:)(&v68, (__int128 *)v73, v51);
  }
  v52 = v8;
  v59 = a3;
  v16 = 0;
  v17 = (uint64_t *)(v9 + 48);
  v54 = v14;
  while (1)
  {
    v18 = sub_1CA1F0B80();
    sub_1CA1F0B20();
    if ((v18 & 1) == 0)
      break;
    if (__OFADD__(v16, 1))
      goto LABEL_24;
    v55 = v16 + 1;
    v57 = v11;
    v20 = *(v17 - 1);
    v19 = *v17;
    v21 = *(v17 - 2);
    v22 = a2[3];
    v23 = a2[4];
    __swift_project_boxed_opaque_existential_1(a2, v22);
    v71 = v14;
    v67 = *(_QWORD *)(a4 + 8);
    v24 = MEMORY[0x1CAA4BB30](&protocol conformance descriptor for <A> Filter<A>, v14, &v67);
    v68 = v21;
    v69 = v20;
    v72 = v24;
    v70 = v19;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    sub_1CA0CFB88(&v68, v59, a4, v73);
    __swift_destroy_boxed_opaque_existential_0((uint64_t)&v68);
    v25 = v23;
    v11 = v57;
    AbstractGraph.nodeIdentifiers(matching:)(v73, v22, v25, &v68);
    __swift_destroy_boxed_opaque_existential_0((uint64_t)v73);
    v26 = v68;
    swift_retain();
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    {
      v27 = *(id *)(v57 + 16);
      objc_msgSend(v27, sel_mutableCopy);
      sub_1CA1F0F04();
      swift_unknownObjectRelease();
      sub_1CA0D0350();
      swift_dynamicCast();
      v28 = v68;

      v29 = swift_allocObject();
      *(_QWORD *)(v29 + 16) = v28;
      swift_release();
      v11 = v29;
    }
    objc_msgSend(*(id *)(v11 + 16), sel_unionWithIdentifierSet_, *(_QWORD *)(v26 + 16), v52);
    swift_release_n();
    v14 = v54;
    ++v16;
    v17 += 3;
    if (v55 == MEMORY[0x1CAA4A2DC](v9, v54))
    {
      swift_bridgeObjectRelease();
      v8 = v52;
      v7 = (uint64_t)a2;
      goto LABEL_19;
    }
  }
  sub_1CA1F1090();
  __break(1u);
LABEL_24:
  __break(1u);
LABEL_25:
  result = sub_1CA1F1090();
  __break(1u);
LABEL_26:
  __break(1u);
  return result;
}

unint64_t sub_1CA0D0350()
{
  unint64_t result;

  result = qword_1ED852B18;
  if (!qword_1ED852B18)
  {
    objc_opt_self();
    result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&qword_1ED852B18);
  }
  return result;
}

uint64_t dispatch thunk of static FilterableEdge.filter.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 16))();
}

uint64_t sub_1CA0D0398(uint64_t result, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t (*v7)(_OWORD *);
  unint64_t v8;
  uint64_t v9;
  char v10;
  uint64_t (*v11)(_OWORD *);
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  __int128 v17;
  __int128 v18;
  uint64_t v19;
  _OWORD v20[2];
  uint64_t v21;
  uint64_t v22;

  v4 = a3;
  v5 = MEMORY[0x1E0DEE9D8];
  v22 = MEMORY[0x1E0DEE9D8];
  v6 = *(_QWORD *)(a3 + 16);
  if (v6)
  {
    v7 = (uint64_t (*)(_OWORD *))result;
    v8 = 0;
    v9 = a3 + 32;
    v15 = *(_QWORD *)(a3 + 16);
    while (v8 < *(_QWORD *)(v4 + 16))
    {
      sub_1CA0AB948(v9, (uint64_t)v20);
      v10 = v7(v20);
      if (v3)
      {
        sub_1CA0AB984((uint64_t)v20);
        swift_release();
        swift_bridgeObjectRelease();
        return v5;
      }
      if ((v10 & 1) != 0)
      {
        v11 = v7;
        v17 = v20[0];
        v18 = v20[1];
        v19 = v21;
        result = swift_isUniquelyReferenced_nonNull_native();
        if ((result & 1) == 0)
          result = sub_1CA0CD588(0, *(_QWORD *)(v5 + 16) + 1, 1);
        v5 = v22;
        v13 = *(_QWORD *)(v22 + 16);
        v12 = *(_QWORD *)(v22 + 24);
        if (v13 >= v12 >> 1)
        {
          result = sub_1CA0CD588(v12 > 1, v13 + 1, 1);
          v5 = v22;
        }
        *(_QWORD *)(v5 + 16) = v13 + 1;
        v14 = v5 + 40 * v13;
        *(_OWORD *)(v14 + 32) = v17;
        *(_OWORD *)(v14 + 48) = v18;
        *(_QWORD *)(v14 + 64) = v19;
        v7 = v11;
        v6 = v15;
        v4 = a3;
      }
      else
      {
        result = sub_1CA0AB984((uint64_t)v20);
      }
      ++v8;
      v9 += 40;
      if (v6 == v8)
        goto LABEL_13;
    }
    __break(1u);
  }
  else
  {
LABEL_13:
    swift_bridgeObjectRelease();
    return v5;
  }
  return result;
}

uint64_t sub_1CA0D0524(uint64_t a1)
{
  int64_t v2;
  uint64_t v3;
  uint64_t i;
  unint64_t v5;
  unint64_t v6;
  uint64_t v8;
  _BYTE v9[40];
  uint64_t v10;

  v2 = *(_QWORD *)(a1 + 16);
  v10 = MEMORY[0x1E0DEE9D8];
  sub_1CA0CD56C(0, v2, 0);
  v3 = v10;
  if (v2)
  {
    for (i = a1 + 32; ; i += 40)
    {
      sub_1CA0AB948(i, (uint64_t)v9);
      if (!swift_dynamicCast())
        break;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        sub_1CA0CD56C(0, *(_QWORD *)(v3 + 16) + 1, 1);
        v3 = v10;
      }
      v6 = *(_QWORD *)(v3 + 16);
      v5 = *(_QWORD *)(v3 + 24);
      if (v6 >= v5 >> 1)
      {
        sub_1CA0CD56C(v5 > 1, v6 + 1, 1);
        v3 = v10;
      }
      *(_QWORD *)(v3 + 16) = v6 + 1;
      *(_QWORD *)(v3 + 8 * v6 + 32) = v8;
      if (!--v2)
        return v3;
    }
    swift_release();
    return 0;
  }
  return v3;
}

uint64_t MANaiveBayesClassifier.__allocating_init(classes:data:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = swift_allocObject();
  MANaiveBayesClassifier.init(classes:data:)(a1, a2);
  return v4;
}

_QWORD *MANaiveBayesClassifier.init(classes:data:)(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;

  v2[2] = a1;
  v2[3] = a2;
  __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_1EF937B60);
  swift_getTupleTypeMetadata2();
  sub_1CA1F0B50();
  v2[4] = sub_1CA1F08EC();
  return v2;
}

uint64_t sub_1CA0D0728(void (*a1)(char *, double), uint64_t a2)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t TupleTypeMetadata2;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t result;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  uint64_t *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  int64_t v32;
  _QWORD *v33;
  _OWORD *v34;
  uint64_t v35;
  uint64_t v36;
  int64_t v37;
  unint64_t v38;
  unint64_t v39;
  uint64_t v40;
  __int128 v41;
  __int128 v42;
  char isUniquelyReferenced_nonNull_native;
  char v44;
  unint64_t v45;
  uint64_t v46;
  _BOOL8 v47;
  uint64_t v48;
  char v49;
  unint64_t v50;
  char v51;
  uint64_t v52;
  BOOL v53;
  uint64_t v54;
  double v55;
  uint64_t v56;
  _BYTE *v57;
  _QWORD v58[3];
  char *v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  char *v63;
  void (*v64)(char *, double);
  uint64_t v65;
  uint64_t v66;
  char *v67;
  uint64_t v68;
  char *v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  _QWORD *v75;
  uint64_t v76;
  int64_t v77;
  void (*v78)(_OWORD *__return_ptr, uint64_t);
  uint64_t v79;
  _QWORD *v80;
  _OWORD v81[2];
  _OWORD v82[2];
  uint64_t v83;
  uint64_t v84;
  char v85;

  v4 = v3;
  v5 = v2;
  v65 = a2;
  v64 = a1;
  v6 = *v2;
  v7 = *(_QWORD *)(*v2 + 80);
  v8 = *(_QWORD *)(v7 - 8);
  v9 = MEMORY[0x1E0C80A78](a1, a2);
  v63 = (char *)v58 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v9, v11);
  v13 = (char *)v58 - v12;
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  v71 = sub_1CA1F0EB0();
  v70 = *(_QWORD *)(v71 - 8);
  v16 = MEMORY[0x1E0C80A78](v71, v15);
  v69 = (char *)v58 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  result = MEMORY[0x1E0C80A78](v16, v18);
  if (!*(_QWORD *)(v2[3] + 16))
    return result;
  v67 = (char *)v58 - v20;
  v68 = TupleTypeMetadata2;
  v85 = 0;
  v84 = v2[2];
  v21 = sub_1CA1F0BE0();
  v22 = *(_QWORD *)(v6 + 88);
  swift_bridgeObjectRetain();
  MEMORY[0x1CAA4BB30](MEMORY[0x1E0DEAF38], v21);
  v62 = sub_1CA1F0CDC();
  *(_QWORD *)&v81[0] = v62;
  v58[2] = v22;
  v23 = sub_1CA1F0CD0();
  MEMORY[0x1CAA4BB30](MEMORY[0x1E0DEB3D0], v23);
  sub_1CA1F0A84();
  *(_QWORD *)&v81[0] = *(_QWORD *)&v82[0];
  sub_1CA1F1228();
  sub_1CA1F1204();
  v58[1] = v5 + 4;
  v66 = sub_1CA1F121C();
  v61 = v7;
  v60 = v8;
  v59 = v13;
  v75 = v5;
  while (1)
  {
    v24 = v69;
    sub_1CA1F1210();
    v25 = (uint64_t *)v67;
    (*(void (**)(char *, char *, uint64_t))(v70 + 32))(v67, v24, v71);
    v26 = v68;
    if ((*(unsigned int (**)(uint64_t *, uint64_t, uint64_t))(*(_QWORD *)(v68 - 8) + 48))(v25, 1, v68) == 1)
      goto LABEL_32;
    v73 = *v25;
    v27 = (*(uint64_t (**)(char *, char *, uint64_t))(v8 + 32))(v13, (char *)v25 + *(int *)(v26 + 48), v7);
    MEMORY[0x1E0C80A78](v27, v28);
    v58[-2] = v5;
    v58[-1] = v13;
    v29 = swift_bridgeObjectRetain();
    v74 = sub_1CA0D2170(v29, (uint64_t (*)(unint64_t, uint64_t))sub_1CA0D2168);
    swift_bridgeObjectRelease();
    v30 = v5[3];
    if (!*(_QWORD *)(v30 + 16))
    {
LABEL_37:
      __break(1u);
LABEL_38:
      result = sub_1CA1F1360();
      __break(1u);
      return result;
    }
    v72 = v4;
    v79 = *(_QWORD *)(*(_QWORD *)(v30 + 32) + 16);
    if (v79)
      break;
    v33 = (_QWORD *)MEMORY[0x1E0DEE9E0];
LABEL_29:
    swift_bridgeObjectRelease();
    v8 = v60;
    v13 = v59;
    v7 = v61;
    (*(void (**)(char *, char *, uint64_t))(v60 + 16))(v63, v59, v61);
    *(_QWORD *)&v82[0] = v33;
    __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_1EF937B60);
    sub_1CA1F0904();
    sub_1CA1F091C();
    v55 = (double)v73;
    v56 = sub_1CA1F0CB8();
    v64(&v85, v55 / (double)v56);
    if ((v85 & 1) != 0)
    {
      swift_bridgeObjectRelease();
      sub_1CA0BE35C();
      swift_allocError();
      *v57 = 0;
      swift_willThrow();
      sub_1CA0B6A14();
      return (*(uint64_t (**)(char *, uint64_t))(v8 + 8))(v13, v7);
    }
    (*(void (**)(char *, uint64_t))(v8 + 8))(v13, v7);
    v4 = v72;
  }
  v31 = 0;
  v32 = *(_QWORD *)(v74 + 16);
  v78 = *(void (**)(_OWORD *__return_ptr, uint64_t))(*v5 + 224);
  v76 = v74 + 40;
  v33 = (_QWORD *)MEMORY[0x1E0DEE9E0];
  v77 = v32;
  while (!v32)
  {
    v35 = MEMORY[0x1E0DEE9D8];
LABEL_17:
    v78(v82, v35);
    swift_bridgeObjectRelease();
    sub_1CA0AFCC0(v82, v81);
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    v80 = v33;
    v45 = sub_1CA0AA68C(v31);
    v46 = v33[2];
    v47 = (v44 & 1) == 0;
    v48 = v46 + v47;
    if (__OFADD__(v46, v47))
    {
      __break(1u);
LABEL_36:
      __break(1u);
      goto LABEL_37;
    }
    v49 = v44;
    if (v33[3] >= v48)
    {
      if ((isUniquelyReferenced_nonNull_native & 1) != 0)
      {
        v33 = v80;
        if ((v44 & 1) != 0)
          goto LABEL_7;
      }
      else
      {
        sub_1CA0F0750();
        v33 = v80;
        if ((v49 & 1) != 0)
          goto LABEL_7;
      }
    }
    else
    {
      sub_1CA0ED380(v48, isUniquelyReferenced_nonNull_native);
      v50 = sub_1CA0AA68C(v31);
      if ((v49 & 1) != (v51 & 1))
        goto LABEL_38;
      v45 = v50;
      v33 = v80;
      if ((v49 & 1) != 0)
      {
LABEL_7:
        v34 = (_OWORD *)(v33[7] + 32 * v45);
        __swift_destroy_boxed_opaque_existential_0((uint64_t)v34);
        sub_1CA0AFCC0(v81, v34);
        goto LABEL_8;
      }
    }
    v33[(v45 >> 6) + 8] |= 1 << v45;
    *(_QWORD *)(v33[6] + 8 * v45) = v31;
    sub_1CA0AFCC0(v81, (_OWORD *)(v33[7] + 32 * v45));
    v52 = v33[2];
    v53 = __OFADD__(v52, 1);
    v54 = v52 + 1;
    if (v53)
      goto LABEL_36;
    v33[2] = v54;
LABEL_8:
    ++v31;
    swift_bridgeObjectRelease();
    v32 = v77;
    if (v31 == v79)
      goto LABEL_29;
  }
  *(_QWORD *)&v81[0] = MEMORY[0x1E0DEE9D8];
  sub_1CA0CD588(0, v32, 0);
  v35 = *(_QWORD *)&v81[0];
  v36 = v76;
  v37 = v32;
  while (v31 < *(_QWORD *)(*(_QWORD *)v36 + 16))
  {
    sub_1CA0AB948(*(_QWORD *)v36 + 40 * v31 + 32, (uint64_t)v82);
    *(_QWORD *)&v81[0] = v35;
    v39 = *(_QWORD *)(v35 + 16);
    v38 = *(_QWORD *)(v35 + 24);
    if (v39 >= v38 >> 1)
    {
      sub_1CA0CD588(v38 > 1, v39 + 1, 1);
      v35 = *(_QWORD *)&v81[0];
    }
    *(_QWORD *)(v35 + 16) = v39 + 1;
    v40 = v35 + 40 * v39;
    v41 = v82[0];
    v42 = v82[1];
    *(_QWORD *)(v40 + 64) = v83;
    *(_OWORD *)(v40 + 32) = v41;
    *(_OWORD *)(v40 + 48) = v42;
    v36 += 16;
    if (!--v37)
    {
      v5 = v75;
      goto LABEL_17;
    }
  }
  __break(1u);
LABEL_32:
  sub_1CA0B6A14();
  return swift_bridgeObjectRelease();
}

uint64_t sub_1CA0D0E6C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  char v7;
  uint64_t v9;

  v3 = *(_QWORD *)(*(_QWORD *)a3 + 80);
  v4 = *(_QWORD *)(v3 - 8);
  MEMORY[0x1E0C80A78](a1, a2);
  v6 = (char *)&v9 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  swift_bridgeObjectRetain();
  sub_1CA1F0C28();
  swift_bridgeObjectRelease();
  v7 = sub_1CA1F09D0();
  (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v3);
  return v7 & 1;
}

uint64_t sub_1CA0D0F38(uint64_t a1)
{
  uint64_t v1;
  uint64_t result;
  uint64_t v3;

  result = sub_1CA0D0FDC(a1, 1);
  if (!v1)
  {
    swift_getTupleTypeMetadata2();
    v3 = sub_1CA1F0BE0();
    MEMORY[0x1CAA4BB30](MEMORY[0x1E0DEAF50], v3);
    sub_1CA1F0D60();
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t sub_1CA0D0FDC(uint64_t result, uint64_t a2)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  void *v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t TupleTypeMetadata2;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  double v43;
  uint64_t v44;
  uint64_t v45;
  __int128 v46;
  uint64_t v47;
  double *v48;
  uint64_t v49;
  uint64_t v50;
  double *v51;
  double v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t *v56;
  uint64_t v57;
  uint64_t *v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  _BYTE v64[16];
  void *v65;
  uint64_t *v66;
  void *v67;
  uint64_t *v68;
  uint64_t (*v69)(uint64_t, uint64_t, uint64_t);
  uint64_t v70;
  _QWORD *v71;
  uint64_t *v72;
  uint64_t *v73;
  uint64_t *v74;
  uint64_t v75;
  uint64_t *v76;
  uint64_t v77;
  uint64_t v78;
  __int128 v79;
  __int128 v80;
  __int128 v81;
  __int128 v82;
  uint64_t v83;
  uint64_t v84;

  v4 = v2[3];
  if (*(_QWORD *)(v4 + 16))
  {
    v5 = (uint64_t *)result;
    v6 = *v2;
    if (*(_QWORD *)(result + 16) == *(_QWORD *)(*(_QWORD *)(v4 + 32) + 16))
    {
      v78 = a2;
      v7 = *(void **)(v6 + 80);
      v8 = *(uint64_t **)(v6 + 88);
      v84 = sub_1CA1F0898();
      v9 = swift_bridgeObjectRetain();
      v10 = MEMORY[0x1CAA4A2A0](v9, v7);
      v11 = swift_bridgeObjectRelease();
      *(_QWORD *)&v81 = v2[2];
      MEMORY[0x1E0C80A78](v11, v12);
      v71 = v2;
      v72 = &v84;
      v73 = (uint64_t *)v10;
      v13 = sub_1CA1F0BE0();
      swift_bridgeObjectRetain();
      MEMORY[0x1CAA4BB30](MEMORY[0x1E0DEAF38], v13);
      sub_1CA1F0AB4();
      swift_bridgeObjectRelease();
      *(_QWORD *)&v81 = v2[4];
      v15 = MEMORY[0x1E0C80A78](v81, v14);
      v73 = v5;
      v74 = v2;
      MEMORY[0x1E0C80A78](v15, v16);
      v67 = v7;
      v68 = v8;
      v69 = sub_1CA0D22EC;
      v70 = v17;
      swift_bridgeObjectRetain();
      __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_1EF937B60);
      v18 = sub_1CA1F0904();
      __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_1EF937158);
      TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
      v20 = MEMORY[0x1CAA4BB30](MEMORY[0x1E0DEA0E0], v18);
      v22 = sub_1CA0E3CE8((void (*)(char *, char *))sub_1CA0D22F4, (uint64_t)&v65, v18, TupleTypeMetadata2, MEMORY[0x1E0DEDCE8], v20, MEMORY[0x1E0DEDD18], v21);
      v23 = swift_bridgeObjectRelease();
      *(_QWORD *)&v81 = v22;
      v25 = MEMORY[0x1E0C80A78](v23, v24);
      v71 = v7;
      v72 = v8;
      v73 = &v84;
      MEMORY[0x1E0C80A78](v25, v26);
      v65 = v7;
      v66 = v8;
      v67 = sub_1CA0D2314;
      v68 = v27;
      v28 = sub_1CA1F0BE0();
      v29 = swift_getTupleTypeMetadata2();
      v30 = MEMORY[0x1CAA4BB30](MEMORY[0x1E0DEAF50], v28);
      v32 = sub_1CA0E3CE8((void (*)(char *, char *))sub_1CA0D2320, (uint64_t)v64, v28, v29, MEMORY[0x1E0DEDCE8], v30, MEMORY[0x1E0DEDD18], v31);
      v33 = swift_bridgeObjectRelease();
      *(_QWORD *)&v81 = v32;
      MEMORY[0x1E0C80A78](v33, v34);
      v73 = (uint64_t *)v7;
      v74 = v8;
      v76 = v8;
      v77 = v29;
      v35 = sub_1CA1F0BE0();
      v36 = MEMORY[0x1CAA4BB30](MEMORY[0x1E0DEAF50], v35);
      v38 = sub_1CA0E3CE8((void (*)(char *, char *))sub_1CA0D2340, (uint64_t)&v71, v35, MEMORY[0x1E0DEB070], MEMORY[0x1E0DEDCE8], v36, MEMORY[0x1E0DEDD18], v37);
      v39 = *(_QWORD *)(v38 + 16);
      if (v39)
      {
        v40 = v32;
        if (v39 == 1)
        {
          v41 = v36;
          v42 = 0;
          v43 = 0.0;
        }
        else
        {
          v42 = v39 & 0x7FFFFFFFFFFFFFFELL;
          v48 = (double *)(v38 + 40);
          v43 = 0.0;
          v49 = v39 & 0x7FFFFFFFFFFFFFFELL;
          do
          {
            v43 = v43 + *(v48 - 1) + *v48;
            v48 += 2;
            v49 -= 2;
          }
          while (v49);
          v41 = v36;
          if (v39 == v42)
            goto LABEL_14;
        }
        v50 = v39 - v42;
        v51 = (double *)(v38 + 8 * v42 + 32);
        do
        {
          v52 = *v51++;
          v43 = v43 + v52;
          --v50;
        }
        while (v50);
      }
      else
      {
        v40 = v32;
        v41 = v36;
        v43 = 0.0;
      }
LABEL_14:
      v53 = swift_bridgeObjectRelease();
      *(_QWORD *)&v81 = v40;
      v55 = MEMORY[0x1E0C80A78](v53, v54);
      v56 = v76;
      v71 = v7;
      v72 = v76;
      v73 = *(uint64_t **)&v43;
      MEMORY[0x1E0C80A78](v55, v57);
      v65 = v7;
      v66 = v56;
      v67 = sub_1CA0D235C;
      v68 = v58;
      v60 = sub_1CA0E3CE8((void (*)(char *, char *))sub_1CA0D2390, (uint64_t)v64, v35, v77, MEMORY[0x1E0DEDCE8], v41, MEMORY[0x1E0DEDD18], v59);
      v75 = v3;
      v61 = swift_bridgeObjectRelease();
      v83 = v60;
      MEMORY[0x1E0C80A78](v61, v62);
      v73 = (uint64_t *)v7;
      v74 = v56;
      MEMORY[0x1CAA4BB30](MEMORY[0x1E0DEAF28], v35);
      MEMORY[0x1CAA4BB30](MEMORY[0x1E0DEAF48], v35);
      sub_1CA1F09C4();
      *(_QWORD *)&v79 = v83;
      sub_1CA1F0D84();
      v79 = v81;
      v80 = v82;
      v63 = sub_1CA1F0F1C();
      MEMORY[0x1CAA4BB30](MEMORY[0x1E0DEBF78], v63);
      v47 = sub_1CA1F0C04();
      swift_bridgeObjectRelease();
      return v47;
    }
    __swift_instantiateConcreteTypeFromMangledName(qword_1EF937B68);
    v44 = swift_allocObject();
    *(_OWORD *)(v44 + 16) = xmmword_1CA1F9100;
    sub_1CA1F1054();
    result = swift_bridgeObjectRelease();
    *(_QWORD *)&v81 = 0xD00000000000001FLL;
    *((_QWORD *)&v81 + 1) = 0x80000001CA207170;
    v45 = v2[3];
    if (*(_QWORD *)(v45 + 16))
    {
      *(_QWORD *)&v79 = *(_QWORD *)(*(_QWORD *)(v45 + 32) + 16);
      sub_1CA1F12AC();
      sub_1CA1F0A3C();
      swift_bridgeObjectRelease();
      v46 = v81;
      *(_QWORD *)(v44 + 56) = MEMORY[0x1E0DEA968];
      *(_OWORD *)(v44 + 32) = v46;
      sub_1CA1F13D8();
      swift_bridgeObjectRelease();
      swift_getTupleTypeMetadata2();
      return sub_1CA1F0B50();
    }
  }
  else
  {
    __break(1u);
  }
  __break(1u);
  return result;
}

uint64_t sub_1CA0D16AC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _BYTE *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _BYTE v17[16];
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  double v21;
  char v22;
  uint64_t v23;

  v23 = a3;
  v6 = *(_QWORD *)(*(_QWORD *)a2 + 80);
  v7 = *(_QWORD *)(v6 - 8);
  v8 = MEMORY[0x1E0C80A78](a1, a2);
  v10 = &v17[-((v9 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v21 = *(double *)(v11 + 16);
  v13 = *(_QWORD *)(v12 + 88);
  v18 = v6;
  v19 = v13;
  v20 = v8;
  v14 = sub_1CA1F0BE0();
  swift_bridgeObjectRetain();
  MEMORY[0x1CAA4BB30](MEMORY[0x1E0DEAF60], v14);
  sub_1CA1F10C0();
  v15 = MEMORY[0x1CAA4A2A0]();
  swift_bridgeObjectRelease();
  (*(void (**)(_BYTE *, uint64_t, uint64_t))(v7 + 16))(v10, a1, v6);
  v21 = (double)v15 / (double)a4;
  v22 = 0;
  sub_1CA1F0904();
  return sub_1CA1F091C();
}

uint64_t sub_1CA0D1800(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t *a5)
{
  uint64_t v7;
  uint64_t v8;
  _QWORD v10[4];

  v7 = *a5;
  v10[2] = a4;
  v10[3] = a5;
  v8 = sub_1CA0B4BC8((void (*)(uint64_t *__return_ptr, _OWORD *))sub_1CA0D259C, (uint64_t)v10, a3);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(*(_QWORD *)(v7 + 80) - 8) + 16))(a1, a2);
  return v8;
}

uint64_t sub_1CA0D1870@<X0>(unint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t *a4@<X8>)
{
  unint64_t v7;
  uint64_t result;
  uint64_t v9;
  char v10;
  uint64_t v11;
  __int128 v12;
  __int128 v13;
  uint64_t v14;
  _OWORD v15[2];
  uint64_t v16;
  _OWORD v17[2];

  v7 = *a1;
  sub_1CA0B6A98((uint64_t)(a1 + 1), (uint64_t)v15 + 8);
  result = (uint64_t)sub_1CA0AFCC0((_OWORD *)((char *)v15 + 8), v17);
  if ((v7 & 0x8000000000000000) != 0)
  {
    __break(1u);
    goto LABEL_11;
  }
  if (v7 >= *(_QWORD *)(a2 + 16))
  {
LABEL_11:
    __break(1u);
    return result;
  }
  sub_1CA0D25B8(a2 + 40 * v7 + 32, (uint64_t)&v12);
  if (*((_QWORD *)&v13 + 1))
  {
    v15[0] = v12;
    v15[1] = v13;
    v16 = v14;
    v9 = (*(uint64_t (**)(_OWORD *, _OWORD *))(*(_QWORD *)a3 + 232))(v17, v15);
    if ((v10 & 1) != 0)
      v11 = 0x3CB0000000000000;
    else
      v11 = v9;
    sub_1CA0AB984((uint64_t)v15);
    result = __swift_destroy_boxed_opaque_existential_0((uint64_t)v17);
    *a4 = v11;
  }
  else
  {
    sub_1CA0D2600((uint64_t)&v12);
    result = __swift_destroy_boxed_opaque_existential_0((uint64_t)v17);
    *a4 = 0x3CB0000000000000;
  }
  return result;
}

uint64_t sub_1CA0D196C@<X0>(uint64_t a1@<X0>, uint64_t (*a2)(uint64_t, uint64_t, uint64_t)@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t result;

  __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_1EF937B60);
  v6 = *(_QWORD *)(a1 + *(int *)(swift_getTupleTypeMetadata2() + 48));
  __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_1EF937158);
  v7 = *(int *)(swift_getTupleTypeMetadata2() + 48);
  result = a2(a3, a1, v6);
  *(_QWORD *)(a3 + v7) = result;
  return result;
}

double sub_1CA0D1A28(uint64_t a1, uint64_t a2, uint64_t a3, _QWORD *a4, uint64_t a5, uint64_t a6)
{
  uint64_t v11;
  double *v12;
  double v13;
  double v14;
  double v15;
  double v17;
  char v18;

  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(a5 - 8) + 16))(a1, a2, a5);
  v11 = *(_QWORD *)(a3 + 16);
  if (v11)
  {
    v12 = (double *)(a3 + 32);
    v13 = 1.0;
    do
    {
      v14 = *v12++;
      v13 = v13 * v14;
      --v11;
    }
    while (v11);
  }
  else
  {
    v13 = 1.0;
  }
  MEMORY[0x1CAA4A018](&v17, a2, *a4, a5, MEMORY[0x1E0DEB070], a6);
  v15 = v17;
  if (v18)
    v15 = 0.0;
  return v13 * v15;
}

void sub_1CA0D1AE4(uint64_t a1@<X0>, double (*a2)(uint64_t, uint64_t, uint64_t)@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;

  __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_1EF937158);
  v6 = *(_QWORD *)(a1 + *(int *)(swift_getTupleTypeMetadata2() + 48));
  v7 = *(int *)(swift_getTupleTypeMetadata2() + 48);
  *(double *)(a3 + v7) = a2(a3, a1, v6);
}

uint64_t sub_1CA0D1B94@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  uint64_t TupleTypeMetadata2;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD v15[2];

  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  v8 = MEMORY[0x1E0C80A78](TupleTypeMetadata2, v7);
  v10 = (char *)v15 - v9;
  v11 = *(int *)(v8 + 48);
  v12 = *(_QWORD *)(a2 - 8);
  (*(void (**)(char *, uint64_t, uint64_t))(v12 + 16))((char *)v15 - v9, a1, a2);
  v13 = *(_QWORD *)(a1 + v11);
  *(_QWORD *)&v10[v11] = v13;
  *a3 = v13;
  return (*(uint64_t (**)(char *, uint64_t))(v12 + 8))(v10, a2);
}

uint64_t MANaiveBayesClassifier.deinit()
{
  uint64_t v0;

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v0;
}

uint64_t MANaiveBayesClassifier.__deallocating_deinit()
{
  MANaiveBayesClassifier.deinit();
  return swift_deallocClassInstance();
}

uint64_t sub_1CA0D1CA4@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  double v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t result;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  int64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v22;
  int64_t v23;
  _QWORD *v24;
  _QWORD v25[4];
  _QWORD *v26;
  _OWORD v27[2];
  uint64_t v28;
  _BYTE v29[40];
  _OWORD v30[2];
  uint64_t v31;

  v26 = a2;
  v3 = (double)*(uint64_t *)(a1 + 16);
  v4 = swift_bridgeObjectRetain();
  v5 = sub_1CA0C7248(v4);
  result = swift_bridgeObjectRelease();
  v7 = 0;
  v8 = v5 + 56;
  v9 = 1 << *(_BYTE *)(v5 + 32);
  v10 = -1;
  if (v9 < 64)
    v10 = ~(-1 << v9);
  v11 = v10 & *(_QWORD *)(v5 + 56);
  v12 = (unint64_t)(v9 + 63) >> 6;
  v13 = MEMORY[0x1E0DEE9E0];
  while (1)
  {
    if (v11)
    {
      v14 = __clz(__rbit64(v11));
      v11 &= v11 - 1;
      v15 = v14 | (v7 << 6);
      goto LABEL_5;
    }
    if (__OFADD__(v7++, 1))
    {
      __break(1u);
      goto LABEL_24;
    }
    if (v7 >= v12)
      goto LABEL_22;
    v22 = *(_QWORD *)(v8 + 8 * v7);
    if (!v22)
      break;
LABEL_17:
    v11 = (v22 - 1) & v22;
    v15 = __clz(__rbit64(v22)) + (v7 << 6);
LABEL_5:
    sub_1CA0AB948(*(_QWORD *)(v5 + 48) + 40 * v15, (uint64_t)v30);
    v16 = sub_1CA0AB948((uint64_t)v30, (uint64_t)v29);
    v27[0] = v30[0];
    v27[1] = v30[1];
    v28 = v31;
    MEMORY[0x1E0C80A78](v16, v17);
    v25[2] = v27;
    swift_bridgeObjectRetain();
    v18 = sub_1CA0D0398((uint64_t)sub_1CA0D2570, (uint64_t)v25, a1);
    sub_1CA0AB984((uint64_t)v27);
    v19 = *(_QWORD *)(v18 + 16);
    swift_bridgeObjectRelease();
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    *(_QWORD *)&v27[0] = v13;
    sub_1CA0AE844((uint64_t)v29, isUniquelyReferenced_nonNull_native, (double)v19 / v3);
    v13 = *(_QWORD *)&v27[0];
    swift_bridgeObjectRelease();
    result = sub_1CA0AB984((uint64_t)v29);
  }
  v23 = v7 + 1;
  if (v7 + 1 >= v12)
    goto LABEL_22;
  v22 = *(_QWORD *)(v8 + 8 * v23);
  if (v22)
    goto LABEL_16;
  v23 = v7 + 2;
  if (v7 + 2 >= v12)
    goto LABEL_22;
  v22 = *(_QWORD *)(v8 + 8 * v23);
  if (v22)
    goto LABEL_16;
  v23 = v7 + 3;
  if (v7 + 3 >= v12)
  {
LABEL_22:
    swift_release();
    result = __swift_instantiateConcreteTypeFromMangledName(&qword_1EF937D18);
    v24 = v26;
    v26[3] = result;
    *v24 = v13;
    return result;
  }
  v22 = *(_QWORD *)(v8 + 8 * v23);
  if (v22)
  {
LABEL_16:
    v7 = v23;
    goto LABEL_17;
  }
  while (1)
  {
    v7 = v23 + 1;
    if (__OFADD__(v23, 1))
      break;
    if (v7 >= v12)
      goto LABEL_22;
    v22 = *(_QWORD *)(v8 + 8 * v7);
    ++v23;
    if (v22)
      goto LABEL_17;
  }
LABEL_24:
  __break(1u);
  return result;
}

uint64_t sub_1CA0D1EF0(uint64_t a1, uint64_t a2)
{
  uint64_t result;
  unint64_t v4;
  char v5;
  uint64_t v6;
  uint64_t v7;
  _BYTE v8[32];

  sub_1CA0B6A98(a1, (uint64_t)v8);
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EF937D18);
  result = swift_dynamicCast();
  if ((_DWORD)result)
  {
    if (*(_QWORD *)(v7 + 16) && (v4 = sub_1CA0AA444(a2), (v5 & 1) != 0))
      v6 = *(_QWORD *)(*(_QWORD *)(v7 + 56) + 8 * v4);
    else
      v6 = 0;
    swift_bridgeObjectRelease();
    return v6;
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t sub_1CA0D1F9C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t result;
  Swift::tuple_mean_Double_deviation_Double v4;

  result = sub_1CA0D0524(a1);
  if (result)
  {
    *(_QWORD *)(a2 + 24) = __swift_instantiateConcreteTypeFromMangledName(&qword_1EF937D10);
    v4 = MAMatrix.sstddev()();
    result = swift_bridgeObjectRelease();
    *(Swift::tuple_mean_Double_deviation_Double *)a2 = v4;
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t sub_1CA0D201C(uint64_t a1, uint64_t a2)
{
  uint64_t result;
  double v4;
  double v5;
  _BYTE v6[40];
  double v7;
  double v8;

  sub_1CA0B6A98(a1, (uint64_t)v6);
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EF937D10);
  *(double *)&result = COERCE_DOUBLE(swift_dynamicCast());
  if ((_DWORD)result)
  {
    v5 = v7;
    v4 = v8;
    sub_1CA0AB948(a2, (uint64_t)v6);
    *(double *)&result = COERCE_DOUBLE(swift_dynamicCast());
    if ((_DWORD)result)
    {
      *(double *)&result = exp(-((v7 - v5) * (v7 - v5)) / (v4 * v4 + v4 * v4)) / 2.50662827 / v4;
      return result;
    }
  }
  else
  {
    __break(1u);
  }
  __break(1u);
  return result;
}

uint64_t _s17KnowledgeGraphKit33MAMultinomialNaiveBayesClassifierC7classes4dataACyxGSayxG_SaySays11AnyHashableVGGtcfC_0(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = swift_allocObject();
  MANaiveBayesClassifier.init(classes:data:)(a1, a2);
  return v4;
}

uint64_t MAGaussianNaiveBayesClassifier.__deallocating_deinit()
{
  MANaiveBayesClassifier.deinit();
  return swift_deallocClassInstance();
}

uint64_t sub_1CA0D2168(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  return sub_1CA0D0E6C(a1, a2, *(_QWORD *)(v2 + 16));
}

uint64_t sub_1CA0D2170(uint64_t result, uint64_t (*a2)(unint64_t, uint64_t))
{
  unint64_t v2;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t i;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;

  v2 = *(_QWORD *)(result + 16);
  if (!v2)
    return MEMORY[0x1E0DEE9D8];
  v4 = 0;
  v5 = result + 32;
  v6 = MEMORY[0x1E0DEE9D8];
  do
  {
    if (v4 <= v2)
      v7 = v2;
    else
      v7 = v4;
    for (i = v4; ; ++i)
    {
      if (v7 == i)
      {
        __break(1u);
        return result;
      }
      v9 = *(_QWORD *)(v5 + 8 * i);
      v4 = i + 1;
      swift_bridgeObjectRetain();
      if ((a2(i, v9) & 1) != 0)
        break;
      result = swift_bridgeObjectRelease();
      if (v2 == v4)
        return v6;
    }
    result = swift_isUniquelyReferenced_nonNull_native();
    if ((result & 1) == 0)
      result = sub_1CA0CD5A4(0, *(_QWORD *)(v6 + 16) + 1, 1);
    v11 = *(_QWORD *)(v6 + 16);
    v10 = *(_QWORD *)(v6 + 24);
    v12 = v11 + 1;
    if (v11 >= v10 >> 1)
    {
      result = sub_1CA0CD5A4(v10 > 1, v11 + 1, 1);
      v12 = v11 + 1;
    }
    *(_QWORD *)(v6 + 16) = v12;
    v13 = v6 + 16 * v11;
    *(_QWORD *)(v13 + 32) = i;
    *(_QWORD *)(v13 + 40) = v9;
  }
  while (v2 - 1 != i);
  return v6;
}

uint64_t sub_1CA0D22D0(uint64_t a1)
{
  uint64_t *v1;

  return sub_1CA0D16AC(a1, v1[2], v1[3], v1[4]);
}

uint64_t sub_1CA0D22EC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;

  return sub_1CA0D1800(a1, a2, a3, *(_QWORD *)(v3 + 16), *(uint64_t **)(v3 + 24));
}

uint64_t sub_1CA0D22F4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;

  return sub_1CA0D196C(a1, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v2 + 32), a2);
}

double sub_1CA0D2314(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;

  return sub_1CA0D1A28(a1, a2, a3, *(_QWORD **)(v3 + 32), *(_QWORD *)(v3 + 16), *(_QWORD *)(v3 + 24));
}

void sub_1CA0D2320(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;

  sub_1CA0D1AE4(a1, *(double (**)(uint64_t, uint64_t, uint64_t))(v2 + 32), a2);
}

uint64_t sub_1CA0D2340@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;

  return sub_1CA0D1B94(a1, *(_QWORD *)(v2 + 16), a2);
}

double sub_1CA0D235C(double a1)
{
  uint64_t v1;
  double v3;

  v3 = *(double *)(v1 + 32);
  (*(void (**)(void))(*(_QWORD *)(*(_QWORD *)(v1 + 16) - 8) + 16))();
  return a1 / v3;
}

void sub_1CA0D2390(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  double (*v5)(uint64_t, uint64_t, double);
  uint64_t v6;

  v5 = *(double (**)(uint64_t, uint64_t, double))(v2 + 32);
  v6 = *(int *)(swift_getTupleTypeMetadata2() + 48);
  *(double *)(a2 + v6) = v5(a2, a1, *(double *)(a1 + v6));
}

BOOL sub_1CA0D2400(uint64_t a1, uint64_t a2)
{
  uint64_t TupleTypeMetadata2;

  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  return *(double *)(a2 + *(int *)(TupleTypeMetadata2 + 48)) < *(double *)(a1 + *(int *)(TupleTypeMetadata2 + 48));
}

uint64_t sub_1CA0D2464()
{
  return swift_initClassMetadata2();
}

uint64_t type metadata accessor for MANaiveBayesClassifier(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for MANaiveBayesClassifier);
}

uint64_t method lookup function for MANaiveBayesClassifier()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of MANaiveBayesClassifier.__allocating_init(classes:data:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 192))();
}

uint64_t dispatch thunk of MANaiveBayesClassifier.train(progress:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 200))();
}

uint64_t dispatch thunk of MANaiveBayesClassifier.classify(with:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 208))();
}

uint64_t dispatch thunk of MANaiveBayesClassifier.classify(with:limit:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 216))();
}

uint64_t type metadata accessor for MAMultinomialNaiveBayesClassifier(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for MAMultinomialNaiveBayesClassifier);
}

uint64_t sub_1CA0D2530()
{
  return swift_initClassMetadata2();
}

uint64_t type metadata accessor for MAGaussianNaiveBayesClassifier(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for MAGaussianNaiveBayesClassifier);
}

uint64_t sub_1CA0D2570(uint64_t a1)
{
  uint64_t v1;

  return MEMORY[0x1CAA4A714](a1, *(_QWORD *)(v1 + 16)) & 1;
}

uint64_t sub_1CA0D259C@<X0>(unint64_t *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v2;

  return sub_1CA0D1870(a1, *(_QWORD *)(v2 + 16), *(_QWORD *)(v2 + 24), a2);
}

uint64_t sub_1CA0D25B8(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EF937698);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_1CA0D2600(uint64_t a1)
{
  uint64_t v2;

  v2 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EF937698);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_1CA0D2640()
{
  return sub_1CA1F09D0() & 1;
}

uint64_t sub_1CA0D2688(uint64_t *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t result;
  _QWORD v5[2];

  v2 = *a1;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    v2 = sub_1CA13B4A0(v2);
  v3 = *(_QWORD *)(v2 + 16);
  v5[0] = v2 + 32;
  v5[1] = v3;
  result = sub_1CA0DCDD8(v5);
  *a1 = v2;
  return result;
}

uint64_t sub_1CA0D26F0(uint64_t *a1)
{
  uint64_t v2;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v4;
  uint64_t v6[2];

  v2 = *a1;
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  *a1 = v2;
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
    sub_1CA13B4C8();
  v4 = *(_QWORD *)(v2 + 16);
  v6[0] = v2 + 32;
  v6[1] = v4;
  sub_1CA0DD460(v6);
  return sub_1CA1F10D8();
}

uint64_t MAVectorRepresentation.__allocating_init<A>(_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1CA0D278C(a1, a2, a3, (uint64_t (*)(uint64_t, uint64_t, uint64_t))sub_1CA0E1924);
}

{
  return sub_1CA0D278C(a1, a2, a3, (uint64_t (*)(uint64_t, uint64_t, uint64_t))sub_1CA0E1B78);
}

uint64_t MAVectorRepresentation.init<A>(_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1CA0D2810(a1, a2, a3, (uint64_t (*)(void))sub_1CA0E1924);
}

{
  return sub_1CA0D2810(a1, a2, a3, (uint64_t (*)(void))sub_1CA0E1B78);
}

uint64_t sub_1CA0D278C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(uint64_t, uint64_t, uint64_t))
{
  uint64_t v8;

  swift_allocObject();
  v8 = a4(a1, a2, a3);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(a2 - 8) + 8))(a1, a2);
  return v8;
}

uint64_t sub_1CA0D2810(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(void))
{
  uint64_t v6;

  v6 = a4();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(a2 - 8) + 8))(a1, a2);
  return v6;
}

__n128 _s17KnowledgeGraphKit28MASquareMatrixRepresentationC6matrix5nodesAcA8MAMatrixV_SaySo6MANodeCGtcfC_0(__n128 *a1, uint64_t a2)
{
  uint64_t v4;
  unint64_t v5;
  __n128 result;

  v4 = swift_allocObject();
  v5 = a1[1].n128_u64[0];
  result = *a1;
  *(__n128 *)(v4 + 16) = *a1;
  *(_QWORD *)(v4 + 32) = v5;
  *(_QWORD *)(v4 + 40) = a2;
  return result;
}

unint64_t sub_1CA0D28A8(unint64_t result)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v2 = v1[2];
  v3 = v1[3];
  if ((unsigned __int128)(v2 * (__int128)v3) >> 64 != (v2 * v3) >> 63)
  {
    __break(1u);
    goto LABEL_9;
  }
  if (v2 * v3 < (uint64_t)result)
  {
LABEL_9:
    __break(1u);
    goto LABEL_10;
  }
  if ((result & 0x8000000000000000) != 0)
  {
LABEL_10:
    __break(1u);
    goto LABEL_11;
  }
  if (*(_QWORD *)(v1[4] + 16) <= result)
  {
LABEL_11:
    __break(1u);
    return MEMORY[0x1CAA4A7A4]();
  }
  v4 = v1[5];
  if ((v4 & 0xC000000000000001) != 0)
    return MEMORY[0x1CAA4A7A4]();
  if (*(_QWORD *)((v4 & 0xFFFFFFFFFFFFF8) + 0x10) > result)
    return (unint64_t)*(id *)(v4 + 8 * result + 32);
  __break(1u);
  return result;
}

uint64_t sub_1CA0D2940(uint64_t a1)
{
  uint64_t v1;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  char v6;
  uint64_t result;
  uint64_t v8;

  v3 = *(_QWORD *)(v1 + 40);
  swift_bridgeObjectRetain();
  sub_1CA0C8364(a1, v3);
  v5 = v4;
  LOBYTE(a1) = v6;
  result = swift_bridgeObjectRelease();
  if ((a1 & 1) != 0)
    return 0;
  if ((v5 & 0x8000000000000000) != 0)
  {
    __break(1u);
  }
  else
  {
    v8 = *(_QWORD *)(v1 + 32);
    if (v5 < *(_QWORD *)(v8 + 16))
      return *(_QWORD *)(v8 + 8 * v5 + 32);
  }
  __break(1u);
  return result;
}

uint64_t sub_1CA0D29C8()
{
  return sub_1CA0D5B54((void (*)(Swift::Int, Swift::Int, void *))type metadata accessor for MASquareMatrixRepresentation);
}

uint64_t sub_1CA0D29D4(__int128 *a1)
{
  return sub_1CA0D5D58(a1, (void (*)(void))type metadata accessor for MAVectorRepresentation);
}

unint64_t sub_1CA0D29E0()
{
  return sub_1CA0D5DFC((void (*)(uint64_t))type metadata accessor for MAVectorRepresentation);
}

unint64_t sub_1CA0D29EC(__int128 *a1)
{
  return sub_1CA0D5ED0(a1, (void (*)(_QWORD *__return_ptr, __int128 *, __int128 *))* infix(_:_:), (void (*)(uint64_t))type metadata accessor for MAVectorRepresentation);
}

uint64_t sub_1CA0D2A00()
{
  return sub_1CA0D5FC4((void (*)(uint64_t))type metadata accessor for MAVectorRepresentation);
}

unint64_t sub_1CA0D2A0C()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  _QWORD *v4;
  unint64_t result;
  uint64_t v6;
  _QWORD *v7;

  v1 = v0[2];
  v2 = v0[3];
  v3 = (_QWORD *)v0[4];
  swift_bridgeObjectRetain_n();
  v4 = v3;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    v4 = sub_1CA0B6058(v3);
  result = v3[2];
  if (result >> 31)
  {
    __break(1u);
  }
  else
  {
    cblas_dscal_NEWLAPACK();
    swift_bridgeObjectRelease();
    v6 = v0[5];
    type metadata accessor for MAVectorRepresentation();
    v7 = (_QWORD *)swift_allocObject();
    v7[2] = v1;
    v7[3] = v2;
    v7[4] = v4;
    v7[5] = v6;
    swift_bridgeObjectRetain();
    return (unint64_t)v7;
  }
  return result;
}

unint64_t sub_1CA0D2ACC()
{
  return sub_1CA0D60A0((void (*)(uint64_t))type metadata accessor for MAVectorRepresentation);
}

uint64_t sub_1CA0D2AD8(double a1)
{
  unint64_t v1;
  unint64_t v2;
  unint64_t v4;
  uint64_t v5;
  uint64_t result;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  id v11;
  id v12;
  double v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;

  v2 = v1;
  v19 = MEMORY[0x1E0DEE9D8];
  v4 = *(_QWORD *)(v1 + 40);
  if (v4 >> 62)
    goto LABEL_24;
  v5 = *(_QWORD *)((v4 & 0xFFFFFFFFFFFFF8) + 0x10);
  swift_retain();
  while (1)
  {
    result = swift_allocObject();
    v7 = result;
    *(_QWORD *)(result + 16) = 0;
    if (!v5)
      break;
    if (v5 < 1)
    {
      __break(1u);
      return result;
    }
    v8 = *(_QWORD *)(v2 + 32);
    swift_retain();
    v18 = v7;
    swift_retain();
    v9 = 0;
    v10 = MEMORY[0x1E0DEE9D8];
    while (1)
    {
      if ((v4 & 0xC000000000000001) != 0)
      {
        v11 = (id)MEMORY[0x1CAA4A7A4](v9, v4);
      }
      else
      {
        if (v9 >= *(_QWORD *)((v4 & 0xFFFFFFFFFFFFFF8) + 0x10))
          goto LABEL_23;
        v11 = *(id *)(v4 + 8 * v9 + 32);
      }
      v12 = v11;
      if (v9 >= *(_QWORD *)(v8 + 16))
        break;
      v13 = *(double *)(v8 + 32 + 8 * v9);
      if (v13 <= a1)
      {

      }
      else
      {
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        {
          sub_1CA0CD5C0(0, *(_QWORD *)(v10 + 16) + 1, 1);
          v10 = v19;
        }
        v2 = *(_QWORD *)(v10 + 16);
        v14 = *(_QWORD *)(v10 + 24);
        if (v2 >= v14 >> 1)
        {
          sub_1CA0CD5C0(v14 > 1, v2 + 1, 1);
          v10 = v19;
        }
        *(_QWORD *)(v10 + 16) = v2 + 1;
        v15 = v10 + 16 * v2;
        *(_QWORD *)(v15 + 32) = v12;
        *(double *)(v15 + 40) = v13;
      }
      if (v5 == ++v9)
      {
        *(_QWORD *)(v18 + 16) = v5;
        swift_release_n();
        swift_release_n();
        v16 = v19;
        goto LABEL_21;
      }
    }
    __break(1u);
LABEL_23:
    __break(1u);
LABEL_24:
    swift_retain();
    swift_bridgeObjectRetain();
    v5 = sub_1CA1F1234();
    swift_bridgeObjectRelease();
  }
  swift_release();
  swift_release();
  v16 = MEMORY[0x1E0DEE9D8];
LABEL_21:
  type metadata accessor for MAVectorRepresentation();
  swift_allocObject();
  v17 = sub_1CA0E1E1C(v16);
  swift_release();
  return (uint64_t)v17;
}

_QWORD *sub_1CA0D2D20()
{
  return sub_1CA0D6208((void (*)(void))type metadata accessor for MAVectorRepresentation);
}

uint64_t sub_1CA0D2D70(unint64_t a1, unint64_t a2)
{
  unint64_t v2;
  int64_t *v3;
  uint64_t v4;
  uint64_t v5;
  double v6;
  unint64_t v7;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  char v14;
  uint64_t v15;
  double v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  int64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  id v27;
  uint64_t v28;
  uint64_t result;
  id v30;
  void *v31;
  void *v33;
  id v34;
  void *v35;
  char v36;
  _QWORD *v37;
  unint64_t v38;
  _QWORD *v39;
  unint64_t v40;
  _QWORD *v41;
  id v42;
  void *v43;
  char v44;
  id v45;
  void *v46;
  uint64_t v47;
  uint64_t v48;
  int64_t v49;
  unint64_t v50;
  unint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  unint64_t v57;
  unint64_t v58;
  unint64_t v59[3];

  v7 = v2;
  v9 = *(_QWORD *)(v2 + 40);
  v10 = v9 >> 62;
  if (v9 >> 62)
    goto LABEL_94;
  v11 = *(_QWORD *)((v9 & 0xFFFFFFFFFFFFF8) + 0x10);
LABEL_3:
  v3 = sub_1CA0B58DC(0, v11);
  swift_bridgeObjectRetain();
  sub_1CA0C8364(a2, v9);
  v11 = v12;
  v14 = v13;
  swift_bridgeObjectRelease();
  if ((v14 & 1) != 0)
  {
    swift_retain();
    swift_release();
    return v7;
  }
  if ((v11 & 0x8000000000000000) == 0)
  {
    v4 = *(_QWORD *)(v7 + 32);
    if (v11 < *(_QWORD *)(v4 + 16))
    {
      v49 = v11;
      v5 = *(_QWORD *)(v7 + 16);
      v47 = *(_QWORD *)(v7 + 24);
      v11 = a1;
      if (!(a1 >> 62))
      {
        v15 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
        swift_bridgeObjectRetain();
        goto LABEL_8;
      }
      goto LABEL_99;
    }
    goto LABEL_98;
  }
  while (1)
  {
    __break(1u);
LABEL_98:
    __break(1u);
LABEL_99:
    swift_bridgeObjectRetain();
    v15 = sub_1CA1F1234();
LABEL_8:
    v7 = MEMORY[0x1E0DEE9D8];
    v55 = v5;
    if (v15)
    {
      if (v10)
      {
        swift_bridgeObjectRetain();
        v10 = sub_1CA1F1234();
        swift_bridgeObjectRelease();
      }
      else
      {
        v10 = *(_QWORD *)((v9 & 0xFFFFFFFFFFFFFF8) + 0x10);
      }
      a2 = 0;
      v57 = v11 & 0xC000000000000001;
      v51 = v11 + 32;
      v52 = v11 & 0xFFFFFFFFFFFFFF8;
      v58 = v9 & 0xC000000000000001;
      v53 = v4 + 32;
      v16 = 0.0;
      v54 = v15;
      v48 = v4;
      while (1)
      {
        if (v57)
        {
          v30 = (id)MEMORY[0x1CAA4A7A4](a2, v11);
        }
        else
        {
          if (a2 >= *(_QWORD *)(v52 + 16))
            goto LABEL_93;
          v30 = *(id *)(v51 + 8 * a2);
        }
        v31 = v30;
        if (__OFADD__(a2++, 1))
          goto LABEL_87;
        if (v10)
        {
          if (v58)
          {
            swift_bridgeObjectRetain();
            v34 = (id)MEMORY[0x1CAA4A7A4](0, v9);
          }
          else
          {
            if (!*(_QWORD *)((v9 & 0xFFFFFFFFFFFFFF8) + 0x10))
              goto LABEL_88;
            v33 = *(void **)(v9 + 32);
            swift_bridgeObjectRetain();
            v34 = v33;
          }
          v35 = v34;
          v11 = sub_1CA0AB910(0, (unint64_t *)&qword_1EF93A320);
          v36 = sub_1CA1F0E68();

          v5 = 0;
          if ((v36 & 1) == 0)
          {
            if (v10 == 1)
            {

              swift_bridgeObjectRelease();
              v5 = v55;
LABEL_81:
              v11 = a1;
              v15 = v54;
              goto LABEL_45;
            }
            if (v58)
            {
              v42 = (id)MEMORY[0x1CAA4A7A4](1, v9);
            }
            else
            {
              if (*(_QWORD *)((v9 & 0xFFFFFFFFFFFFFF8) + 0x10) < 2uLL)
                goto LABEL_96;
              v42 = *(id *)(v9 + 40);
            }
            v43 = v42;
            v44 = sub_1CA1F0E68();

            if ((v44 & 1) == 0)
            {
              v50 = v7;
              v7 = 1;
              do
              {
                v5 = v7 + 1;
                if (__OFADD__(v7, 1))
                {
                  __break(1u);
                  goto LABEL_86;
                }
                if (v5 == v10)
                {

                  swift_bridgeObjectRelease();
                  v5 = v55;
                  v4 = v48;
                  v7 = v50;
                  goto LABEL_81;
                }
                if (v58)
                {
                  v45 = (id)MEMORY[0x1CAA4A7A4](v7 + 1, v9);
                }
                else
                {
                  if (v5 < 0)
                    goto LABEL_89;
                  if ((unint64_t)v5 >= *(_QWORD *)((v9 & 0xFFFFFFFFFFFFFF8) + 0x10))
                    goto LABEL_90;
                  v45 = *(id *)(v9 + 32 + 8 * v5);
                }
                v46 = v45;
                v4 = sub_1CA1F0E68();

                ++v7;
              }
              while ((v4 & 1) == 0);
              swift_bridgeObjectRelease();
              v4 = v48;
              v7 = v50;
              if ((v5 & 0x8000000000000000) == 0)
                goto LABEL_57;
              goto LABEL_91;
            }
            v5 = 1;
          }
          swift_bridgeObjectRelease();
LABEL_57:
          if ((unint64_t)v5 >= *(_QWORD *)(v4 + 16))
            goto LABEL_92;
          v6 = *(double *)(v53 + 8 * v5);
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
            v7 = (unint64_t)sub_1CA0E5AB8(0, *(_QWORD *)(v7 + 16) + 1, 1, (_QWORD *)v7);
          v15 = v54;
          v37 = (_QWORD *)v7;
          v38 = *(_QWORD *)(v7 + 16);
          v39 = v37;
          v40 = v37[3];
          if (v38 >= v40 >> 1)
            v39 = sub_1CA0E5AB8((_QWORD *)(v40 > 1), v38 + 1, 1, v39);
          v16 = v16 + v6;
          v39[2] = v38 + 1;
          v41 = &v39[v38];
          v7 = (unint64_t)v39;
          v41[4] = v5;

          v5 = v55;
          v11 = a1;
        }
        else
        {

        }
LABEL_45:
        if (a2 == v15)
          goto LABEL_13;
      }
    }
    v16 = 0.0;
LABEL_13:
    swift_bridgeObjectRelease();
    swift_bridgeObjectRetain();
    v17 = swift_retain();
    a2 = sub_1CA0DFA18(v17, v11);
    swift_bridgeObjectRelease();
    swift_release();
    v59[0] = v7;
    swift_bridgeObjectRetain_n();
    sub_1CA0D2688((uint64_t *)v59);
    swift_bridgeObjectRelease();
    v18 = v59[0];
    v9 = *(_QWORD *)(v59[0] + 16);
    if (!v9)
      break;
    v15 = v7;
    swift_retain();
    v10 = 0;
    while (1)
    {
      v7 = *(_QWORD *)(v18 + 8 * v10 + 32);
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        v3 = sub_1CA0B6094(v3);
      v19 = v3[2];
      if (v7 >= v19)
        break;
      v20 = v19 - 1;
      v21 = v19 - 1 - v7;
      if (v21 < 0)
        goto LABEL_109;
      memmove(&v3[v7 + 4], &v3[v7 + 5], 8 * v21);
      ++v10;
      v3[2] = v20;
      if (v9 == v10)
      {
        swift_release();
        goto LABEL_21;
      }
    }
LABEL_86:
    __break(1u);
LABEL_87:
    __break(1u);
LABEL_88:
    __break(1u);
LABEL_89:
    __break(1u);
LABEL_90:
    __break(1u);
LABEL_91:
    __break(1u);
LABEL_92:
    __break(1u);
LABEL_93:
    __break(1u);
LABEL_94:
    swift_bridgeObjectRetain();
    v11 = sub_1CA1F1234();
    swift_bridgeObjectRelease();
    if ((v11 & 0x8000000000000000) == 0)
      goto LABEL_3;
    __break(1u);
LABEL_96:
    __break(1u);
  }
LABEL_21:
  swift_release();
  if (v49 >= *(_QWORD *)(v4 + 16))
  {
    __break(1u);
  }
  else
  {
    v6 = *(double *)(v4 + 8 * v49 + 32);
    swift_bridgeObjectRetain();
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) != 0)
      goto LABEL_23;
  }
  v4 = (uint64_t)sub_1CA0B6058((_QWORD *)v4);
LABEL_23:
  if (v49 >= *(_QWORD *)(v4 + 16))
  {
    __break(1u);
  }
  else
  {
    *(double *)(v4 + 32 + 8 * v49) = v16 + v6;
    v15 = v3[2];
    if ((unsigned __int128)(v5 * (__int128)v15) >> 64 == (v5 * v15) >> 63)
    {
      swift_bridgeObjectRetain();
      v9 = sub_1CA0B4464(v5 * v15, 0.0);
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) != 0)
        goto LABEL_26;
      goto LABEL_104;
    }
  }
  __break(1u);
LABEL_104:
  v9 = (unint64_t)sub_1CA0B6058((_QWORD *)v9);
LABEL_26:
  v22 = v3[2];
  if (!v22)
  {
LABEL_35:
    swift_bridgeObjectRelease();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    v25 = *(_QWORD *)(a2 + 16);
    if (v25)
    {
      v59[0] = MEMORY[0x1E0DEE9D8];
      sub_1CA1F10F0();
      v26 = 32;
      do
      {
        v27 = *(id *)(a2 + v26);
        sub_1CA1F10CC();
        sub_1CA1F10FC();
        sub_1CA1F1108();
        sub_1CA1F10D8();
        v26 += 16;
        --v25;
      }
      while (v25);
      v28 = v59[0];
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      v5 = v55;
    }
    else
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      v28 = MEMORY[0x1E0DEE9D8];
    }
    type metadata accessor for MAVectorRepresentation();
    v7 = swift_allocObject();
    *(_QWORD *)(v7 + 16) = v5;
    *(_QWORD *)(v7 + 24) = v15;
    *(_QWORD *)(v7 + 32) = v9;
    *(_QWORD *)(v7 + 40) = v28;
    return v7;
  }
  if (v5 > 0x7FFFFFFF)
  {
    __break(1u);
    goto LABEL_106;
  }
  if (v47 > 0x7FFFFFFF)
  {
LABEL_106:
    __break(1u);
LABEL_107:
    __break(1u);
    goto LABEL_108;
  }
  if (v5 < (uint64_t)0xFFFFFFFF80000000 || v47 < (uint64_t)0xFFFFFFFF80000000)
    goto LABEL_107;
  if (!(v22 >> 31))
  {
    swift_bridgeObjectRetain();
    v23 = 32;
    v24 = v22;
    do
    {
      cblas_dcopy_NEWLAPACK();
      v23 += 8;
      --v24;
    }
    while (v24);
    swift_bridgeObjectRelease();
    goto LABEL_35;
  }
LABEL_108:
  __break(1u);
LABEL_109:
  sub_1CA1F1270();
  __break(1u);
  result = swift_release();
  __break(1u);
  return result;
}

_QWORD *+ infix(_:_:)(uint64_t a1, uint64_t *a2)
{
  unint64_t v3;
  unint64_t v4;
  void *v5;
  uint64_t *v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t *v10;
  _QWORD *v11;
  unint64_t v12;
  uint64_t v13;
  _QWORD *result;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t *v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t *v21;
  unint64_t v22;
  uint64_t *v23;
  void *v24;
  id v25;
  void *v26;
  unint64_t v27;
  uint64_t v28;
  double v29;
  double v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t *v33;
  id v34;
  void *v35;
  uint64_t v36;
  id v37;
  char v38;
  uint64_t v39;
  uint64_t *v40;
  unint64_t v41;
  uint64_t *v42;
  uint64_t *v44;
  unint64_t v45;
  unint64_t v46;
  uint64_t v47;
  uint64_t v48;

  v3 = *(_QWORD *)(a1 + 40);
  v4 = swift_bridgeObjectRetain();
  v5 = (void *)sub_1CA0C68DC(v4);
  swift_bridgeObjectRelease();
  v6 = (uint64_t *)a2[5];
  v7 = swift_bridgeObjectRetain();
  v8 = sub_1CA0C68DC(v7);
  swift_bridgeObjectRelease();
  sub_1CA0D3C08(v8, v5);
  if ((v9 & 0xC000000000000001) != 0)
    v10 = (uint64_t *)sub_1CA1F0FA0();
  else
    v10 = *(uint64_t **)(v9 + 16);
  swift_bridgeObjectRelease();
  v11 = (_QWORD *)sub_1CA0B4464((unint64_t)v10, 0.0);
  v48 = MEMORY[0x1E0DEE9D8];
  v12 = v3 >> 62;
  if (v3 >> 62)
    goto LABEL_92;
  v13 = *(_QWORD *)((v3 & 0xFFFFFFFFFFFFF8) + 0x10);
  for (result = (_QWORD *)swift_bridgeObjectRetain(); ; v13 = (uint64_t)result)
  {
    v41 = (unint64_t)v6;
    v42 = a2;
    v40 = v10;
    if (!v13)
    {
LABEL_19:
      swift_bridgeObjectRelease();
      if (v12)
      {
        swift_bridgeObjectRetain();
        v10 = (uint64_t *)sub_1CA1F1234();
        swift_bridgeObjectRelease();
      }
      else
      {
        v10 = *(uint64_t **)((v3 & 0xFFFFFFFFFFFFF8) + 0x10);
      }
      v20 = v41;
      if (v41 >> 62)
      {
        swift_bridgeObjectRetain();
        a2 = (uint64_t *)sub_1CA1F1234();
        v21 = v42;
        if (a2)
          goto LABEL_24;
      }
      else
      {
        a2 = *(uint64_t **)((v41 & 0xFFFFFFFFFFFFF8) + 0x10);
        swift_bridgeObjectRetain();
        v21 = v42;
        if (a2)
        {
LABEL_24:
          if (v12)
          {
            swift_bridgeObjectRetain();
            v47 = sub_1CA1F1234();
            swift_bridgeObjectRelease();
          }
          else
          {
            v47 = *(_QWORD *)((v3 & 0xFFFFFFFFFFFFFF8) + 0x10);
          }
          v22 = 0;
          v44 = a2;
          v46 = v3 & 0xC000000000000001;
          v12 = (unint64_t)v10;
          do
          {
            if ((v41 & 0xC000000000000001) != 0)
            {
              v23 = (uint64_t *)MEMORY[0x1CAA4A7A4](v22, v20);
            }
            else
            {
              if (v22 >= *(_QWORD *)((v41 & 0xFFFFFFFFFFFFFF8) + 0x10))
                goto LABEL_90;
              v23 = (uint64_t *)*(id *)(v41 + 32 + 8 * v22);
            }
            a2 = v23;
            v6 = (uint64_t *)(v22 + 1);
            if (__OFADD__(v22, 1))
              goto LABEL_78;
            if (!v47)
              goto LABEL_50;
            v45 = v12;
            if (v46)
            {
              swift_bridgeObjectRetain();
              v25 = (id)MEMORY[0x1CAA4A7A4](0, v3);
            }
            else
            {
              if (!*(_QWORD *)((v3 & 0xFFFFFFFFFFFFFF8) + 0x10))
                goto LABEL_79;
              v24 = *(void **)(v3 + 32);
              swift_bridgeObjectRetain();
              v25 = v24;
            }
            v26 = v25;
            v10 = (uint64_t *)sub_1CA0AB910(0, (unint64_t *)&qword_1EF93A320);
            v12 = sub_1CA1F0E68();

            v27 = 0;
            if ((v12 & 1) == 0)
            {
              if (v47 == 1)
              {
LABEL_49:
                swift_bridgeObjectRelease();
                v20 = v41;
                v21 = v42;
                v12 = v45;
LABEL_50:
                v31 = v21[4];
                if (v22 >= *(_QWORD *)(v31 + 16))
                  goto LABEL_80;
                v32 = *(_QWORD *)(v31 + 8 * v22 + 32);
                if ((swift_isUniquelyReferenced_nonNull_native() & 1) != 0)
                {
                  if ((v12 & 0x8000000000000000) != 0)
                    goto LABEL_82;
                }
                else
                {
                  v11 = sub_1CA0B6058(v11);
                  if ((v12 & 0x8000000000000000) != 0)
                    goto LABEL_82;
                }
                if (v12 >= v11[2])
                  goto LABEL_81;
                v11[v12 + 4] = v32;
                v33 = a2;
                MEMORY[0x1CAA4A1E0]();
                if (*(_QWORD *)((v48 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(_QWORD *)((v48 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1)
                  sub_1CA1F0B2C();
                sub_1CA1F0B8C();
                v10 = &v48;
                sub_1CA1F0B14();

                ++v12;
                goto LABEL_29;
              }
              if (v46)
              {
                v34 = (id)MEMORY[0x1CAA4A7A4](1, v3);
              }
              else
              {
                if (*(_QWORD *)((v3 & 0xFFFFFFFFFFFFFF8) + 0x10) < 2uLL)
                  goto LABEL_91;
                v34 = *(id *)(v3 + 40);
              }
              v35 = v34;
              v12 = sub_1CA1F0E68();

              if ((v12 & 1) == 0)
              {
                v36 = 1;
                do
                {
                  v27 = v36 + 1;
                  if (__OFADD__(v36, 1))
                  {
                    __break(1u);
                    goto LABEL_77;
                  }
                  if (v27 == v47)
                    goto LABEL_49;
                  if (v46)
                  {
                    v37 = (id)MEMORY[0x1CAA4A7A4](v36 + 1, v3);
                  }
                  else
                  {
                    if ((v27 & 0x8000000000000000) != 0)
                      goto LABEL_83;
                    if (v27 >= *(_QWORD *)((v3 & 0xFFFFFFFFFFFFFF8) + 0x10))
                      goto LABEL_84;
                    v37 = *(id *)(v3 + 32 + 8 * v27);
                  }
                  v12 = (unint64_t)v37;
                  v38 = sub_1CA1F0E68();

                  ++v36;
                }
                while ((v38 & 1) == 0);
                swift_bridgeObjectRelease();
                v20 = v41;
                v21 = v42;
                if ((v27 & 0x8000000000000000) == 0)
                  goto LABEL_41;
                goto LABEL_89;
              }
              v27 = 1;
              v20 = v41;
              v21 = v42;
            }
            swift_bridgeObjectRelease();
LABEL_41:
            if (v27 >= *(_QWORD *)(*(_QWORD *)(a1 + 32) + 16))
              goto LABEL_85;
            v28 = v21[4];
            if (v22 >= *(_QWORD *)(v28 + 16))
              goto LABEL_86;
            if (v27 >= v11[2])
              goto LABEL_87;
            v29 = *(double *)(v28 + 8 * v22 + 32);
            v30 = *(double *)&v11[v27 + 4];
            if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
              v11 = sub_1CA0B6058(v11);
            v12 = v45;
            if (v27 >= v11[2])
              goto LABEL_88;
            *(double *)&v11[v27 + 4] = v29 + v30;

LABEL_29:
            ++v22;
          }
          while (v6 != v44);
        }
      }
      swift_bridgeObjectRelease();
      v39 = v48;
      type metadata accessor for MAVectorRepresentation();
      result = (_QWORD *)swift_allocObject();
      result[2] = 1;
      result[3] = v40;
      result[4] = v11;
      result[5] = v39;
      return result;
    }
    if (v13 < 1)
      break;
    v15 = *(_QWORD *)(a1 + 32);
    if ((unint64_t)(v13 - 1) >= *(_QWORD *)(v15 + 16))
      goto LABEL_96;
    v16 = 0;
    v17 = v15 + 32;
    while (1)
    {
      if ((v3 & 0xC000000000000001) != 0)
        v18 = (uint64_t *)MEMORY[0x1CAA4A7A4](v16, v3);
      else
        v18 = (uint64_t *)*(id *)(v3 + 8 * v16 + 32);
      v10 = v18;
      v19 = *(_QWORD *)(v17 + 8 * v16);
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        v11 = sub_1CA0B6058(v11);
      if (v16 >= v11[2])
        break;
      v11[v16 + 4] = v19;
      a2 = v10;
      MEMORY[0x1CAA4A1E0]();
      v6 = *(uint64_t **)((v48 & 0xFFFFFFFFFFFFFF8) + 0x10);
      if ((unint64_t)v6 >= *(_QWORD *)((v48 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1)
        sub_1CA1F0B2C();
      ++v16;
      sub_1CA1F0B8C();
      sub_1CA1F0B14();

      if (v13 == v16)
        goto LABEL_19;
    }
LABEL_77:
    __break(1u);
LABEL_78:
    __break(1u);
LABEL_79:
    __break(1u);
LABEL_80:
    __break(1u);
LABEL_81:
    __break(1u);
LABEL_82:
    __break(1u);
LABEL_83:
    __break(1u);
LABEL_84:
    __break(1u);
LABEL_85:
    __break(1u);
LABEL_86:
    __break(1u);
LABEL_87:
    __break(1u);
LABEL_88:
    __break(1u);
LABEL_89:
    __break(1u);
LABEL_90:
    __break(1u);
LABEL_91:
    __break(1u);
LABEL_92:
    swift_bridgeObjectRetain();
    result = (_QWORD *)sub_1CA1F1234();
  }
  __break(1u);
LABEL_96:
  __break(1u);
  return result;
}

void sub_1CA0D3C08(unint64_t a1, void *a2)
{
  unint64_t v2;
  uint64_t v3;
  id v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int64_t v9;
  uint64_t v10;
  unint64_t v11;
  char *v12;
  id v13;
  uint64_t v14;
  unint64_t v15;
  char *v16;
  uint64_t v17;
  _QWORD *v18;
  id v19[7];

  v2 = a1;
  v19[1] = a2;
  if ((a1 & 0xC000000000000001) != 0)
  {
    sub_1CA1F0F64();
    sub_1CA0AB910(0, (unint64_t *)&qword_1EF93A320);
    sub_1CA0CBCF8((unint64_t *)&qword_1EF937678, (unint64_t *)&qword_1EF93A320);
    sub_1CA1F0CC4();
    v2 = (unint64_t)v19[2];
    v18 = v19[3];
    v3 = (uint64_t)v19[4];
    v4 = v19[5];
    v5 = (unint64_t)v19[6];
  }
  else
  {
    v4 = 0;
    v6 = -1 << *(_BYTE *)(a1 + 32);
    v18 = (_QWORD *)(a1 + 56);
    v3 = ~v6;
    v7 = -v6;
    if (v7 < 64)
      v8 = ~(-1 << v7);
    else
      v8 = -1;
    v5 = v8 & *(_QWORD *)(a1 + 56);
  }
  v17 = v3;
  v9 = (unint64_t)(v3 + 64) >> 6;
  if ((v2 & 0x8000000000000000) != 0)
    goto LABEL_10;
  while (1)
  {
    if (v5)
    {
      v10 = (v5 - 1) & v5;
      v11 = __clz(__rbit64(v5)) | ((_QWORD)v4 << 6);
      v12 = (char *)v4;
      goto LABEL_29;
    }
    v14 = (uint64_t)v4 + 1;
    if (__OFADD__(v4, 1))
      break;
    if (v14 >= v9)
      goto LABEL_32;
    v15 = v18[v14];
    v12 = (char *)v4 + 1;
    if (!v15)
    {
      v12 = (char *)v4 + 2;
      if ((uint64_t)v4 + 2 >= v9)
        goto LABEL_32;
      v15 = v18[(_QWORD)v12];
      if (!v15)
      {
        v12 = (char *)v4 + 3;
        if ((uint64_t)v4 + 3 >= v9)
          goto LABEL_32;
        v15 = v18[(_QWORD)v12];
        if (!v15)
        {
          v12 = (char *)v4 + 4;
          if ((uint64_t)v4 + 4 >= v9)
            goto LABEL_32;
          v15 = v18[(_QWORD)v12];
          if (!v15)
          {
            v12 = (char *)v4 + 5;
            if ((uint64_t)v4 + 5 >= v9)
              goto LABEL_32;
            v15 = v18[(_QWORD)v12];
            if (!v15)
            {
              v16 = (char *)v4 + 6;
              while ((char *)v9 != v16)
              {
                v15 = v18[(_QWORD)v16++];
                if (v15)
                {
                  v12 = v16 - 1;
                  goto LABEL_28;
                }
              }
LABEL_32:
              v5 = 0;
LABEL_33:
              sub_1CA0B6B24(v2, v18, v17, v4, v5);
              return;
            }
          }
        }
      }
    }
LABEL_28:
    v10 = (v15 - 1) & v15;
    v11 = __clz(__rbit64(v15)) + ((_QWORD)v12 << 6);
LABEL_29:
    v13 = *(id *)(*(_QWORD *)(v2 + 48) + 8 * v11);
    if (!v13)
      goto LABEL_33;
    while (1)
    {
      sub_1CA0BDD74(v19, v13);

      v4 = v12;
      v5 = v10;
      if ((v2 & 0x8000000000000000) == 0)
        break;
LABEL_10:
      if (sub_1CA1F0FD0())
      {
        sub_1CA0AB910(0, (unint64_t *)&qword_1EF93A320);
        swift_unknownObjectRetain();
        swift_dynamicCast();
        v13 = v19[0];
        swift_unknownObjectRelease();
        v12 = (char *)v4;
        v10 = v5;
        if (v13)
          continue;
      }
      goto LABEL_33;
    }
  }
  __break(1u);
}

_QWORD *- infix(_:_:)(uint64_t a1, uint64_t a2)
{
  unint64_t v3;
  unint64_t v4;
  void *v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t *v10;
  _QWORD *v11;
  void *v12;
  uint64_t v13;
  _QWORD *result;
  uint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t *v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  id v23;
  uint64_t *v24;
  void *v25;
  id v26;
  void *v27;
  unint64_t v28;
  uint64_t v29;
  double *v30;
  double v31;
  double v32;
  id v33;
  id v34;
  void *v35;
  uint64_t v36;
  id v37;
  char v38;
  uint64_t v39;
  uint64_t *v40;
  unint64_t v41;
  uint64_t v42;
  unint64_t v44;
  uint64_t *v45;
  unint64_t v46;
  uint64_t v47;
  uint64_t v48;

  v3 = *(_QWORD *)(a1 + 40);
  v4 = swift_bridgeObjectRetain();
  v5 = (void *)sub_1CA0C68DC(v4);
  swift_bridgeObjectRelease();
  v42 = a2;
  v6 = *(_QWORD *)(a2 + 40);
  v7 = swift_bridgeObjectRetain();
  v8 = sub_1CA0C68DC(v7);
  swift_bridgeObjectRelease();
  sub_1CA0D3C08(v8, v5);
  if ((v9 & 0xC000000000000001) != 0)
    v10 = (uint64_t *)sub_1CA1F0FA0();
  else
    v10 = *(uint64_t **)(v9 + 16);
  swift_bridgeObjectRelease();
  v11 = (_QWORD *)sub_1CA0B4464((unint64_t)v10, 0.0);
  v48 = MEMORY[0x1E0DEE9D8];
  v12 = (void *)(v3 >> 62);
  if (v3 >> 62)
    goto LABEL_93;
  v13 = *(_QWORD *)((v3 & 0xFFFFFFFFFFFFF8) + 0x10);
  for (result = (_QWORD *)swift_bridgeObjectRetain(); ; v13 = (uint64_t)result)
  {
    v41 = v6;
    v40 = v10;
    if (!v13)
    {
LABEL_19:
      swift_bridgeObjectRelease();
      if (v12)
      {
        swift_bridgeObjectRetain();
        v20 = sub_1CA1F1234();
        swift_bridgeObjectRelease();
      }
      else
      {
        v20 = *(_QWORD *)((v3 & 0xFFFFFFFFFFFFF8) + 0x10);
      }
      v21 = v41;
      if (v41 >> 62)
      {
        swift_bridgeObjectRetain();
        v10 = (uint64_t *)sub_1CA1F1234();
        if (v10)
          goto LABEL_24;
      }
      else
      {
        v10 = *(uint64_t **)((v41 & 0xFFFFFFFFFFFFF8) + 0x10);
        swift_bridgeObjectRetain();
        if (v10)
        {
LABEL_24:
          if (v12)
          {
            swift_bridgeObjectRetain();
            v47 = sub_1CA1F1234();
            swift_bridgeObjectRelease();
          }
          else
          {
            v47 = *(_QWORD *)((v3 & 0xFFFFFFFFFFFFFF8) + 0x10);
          }
          v22 = 0;
          v45 = v10;
          v46 = v3 & 0xC000000000000001;
          do
          {
            if ((v41 & 0xC000000000000001) != 0)
            {
              v23 = (id)MEMORY[0x1CAA4A7A4](v22, v21);
            }
            else
            {
              if (v22 >= *(_QWORD *)((v41 & 0xFFFFFFFFFFFFFF8) + 0x10))
                goto LABEL_91;
              v23 = *(id *)(v41 + 32 + 8 * v22);
            }
            v6 = (unint64_t)v23;
            v24 = (uint64_t *)(v22 + 1);
            if (__OFADD__(v22, 1))
              goto LABEL_80;
            if (!v47)
              goto LABEL_53;
            if (v46)
            {
              swift_bridgeObjectRetain();
              v26 = (id)MEMORY[0x1CAA4A7A4](0, v3);
            }
            else
            {
              if (!*(_QWORD *)((v3 & 0xFFFFFFFFFFFFFF8) + 0x10))
                goto LABEL_81;
              v25 = *(void **)(v3 + 32);
              swift_bridgeObjectRetain();
              v26 = v25;
            }
            v27 = v26;
            v10 = (uint64_t *)sub_1CA0AB910(0, (unint64_t *)&qword_1EF93A320);
            v12 = (void *)sub_1CA1F0E68();

            v28 = 0;
            if ((v12 & 1) == 0)
            {
              v44 = v20;
              if (v47 == 1)
              {
LABEL_52:
                swift_bridgeObjectRelease();
                v21 = v41;
                v20 = v44;
LABEL_53:
                if ((swift_isUniquelyReferenced_nonNull_native() & 1) != 0)
                {
                  if ((v20 & 0x8000000000000000) != 0)
                    goto LABEL_83;
                }
                else
                {
                  v11 = sub_1CA0B6058(v11);
                  if ((v20 & 0x8000000000000000) != 0)
                    goto LABEL_83;
                }
                if (v20 >= v11[2])
                  goto LABEL_82;
                v11[v20 + 4] = 0;
                v33 = (id)v6;
                MEMORY[0x1CAA4A1E0]();
                v6 = *(_QWORD *)((v48 & 0xFFFFFFFFFFFFFF8) + 0x10);
                if (v6 >= *(_QWORD *)((v48 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1)
                  sub_1CA1F0B2C();
                sub_1CA1F0B8C();
                v10 = &v48;
                sub_1CA1F0B14();

                ++v20;
                goto LABEL_29;
              }
              if (v46)
              {
                v34 = (id)MEMORY[0x1CAA4A7A4](1, v3);
              }
              else
              {
                if (*(_QWORD *)((v3 & 0xFFFFFFFFFFFFFF8) + 0x10) < 2uLL)
                  goto LABEL_92;
                v34 = *(id *)(v3 + 40);
              }
              v35 = v34;
              v12 = (void *)sub_1CA1F0E68();

              if ((v12 & 1) == 0)
              {
                v36 = 1;
                do
                {
                  v28 = v36 + 1;
                  if (__OFADD__(v36, 1))
                  {
                    __break(1u);
                    goto LABEL_79;
                  }
                  if (v28 == v47)
                    goto LABEL_52;
                  if (v46)
                  {
                    v37 = (id)MEMORY[0x1CAA4A7A4](v36 + 1, v3);
                  }
                  else
                  {
                    if ((v28 & 0x8000000000000000) != 0)
                      goto LABEL_84;
                    if (v28 >= *(_QWORD *)((v3 & 0xFFFFFFFFFFFFFF8) + 0x10))
                      goto LABEL_85;
                    v37 = *(id *)(v3 + 32 + 8 * v28);
                  }
                  v12 = v37;
                  v38 = sub_1CA1F0E68();

                  ++v36;
                }
                while ((v38 & 1) == 0);
                swift_bridgeObjectRelease();
                v21 = v41;
                v20 = v44;
                if ((v28 & 0x8000000000000000) == 0)
                  goto LABEL_41;
                goto LABEL_90;
              }
              v28 = 1;
              v21 = v41;
            }
            swift_bridgeObjectRelease();
LABEL_41:
            if (v28 >= *(_QWORD *)(*(_QWORD *)(a1 + 32) + 16))
              goto LABEL_86;
            if (v28 >= v11[2])
              goto LABEL_87;
            v29 = *(_QWORD *)(v42 + 32);
            if (v22 >= *(_QWORD *)(v29 + 16))
              goto LABEL_88;
            v30 = (double *)&v11[v28];
            v31 = *(double *)(v29 + 8 * v22 + 32);
            if (v30[4] - v31 > 0.0)
              v32 = v30[4] - v31;
            else
              v32 = 0.0;
            if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
              v11 = sub_1CA0B6058(v11);
            if (v28 >= v11[2])
              goto LABEL_89;
            *(double *)&v11[v28 + 4] = v32;

LABEL_29:
            ++v22;
          }
          while (v24 != v45);
        }
      }
      swift_bridgeObjectRelease();
      v39 = v48;
      type metadata accessor for MAVectorRepresentation();
      result = (_QWORD *)swift_allocObject();
      result[2] = 1;
      result[3] = v40;
      result[4] = v11;
      result[5] = v39;
      return result;
    }
    if (v13 < 1)
      break;
    v15 = *(_QWORD *)(a1 + 32);
    if ((unint64_t)(v13 - 1) >= *(_QWORD *)(v15 + 16))
      goto LABEL_97;
    v6 = 0;
    v16 = v15 + 32;
    while (1)
    {
      if ((v3 & 0xC000000000000001) != 0)
        v17 = (uint64_t *)MEMORY[0x1CAA4A7A4](v6, v3);
      else
        v17 = (uint64_t *)*(id *)(v3 + 8 * v6 + 32);
      v10 = v17;
      v18 = *(_QWORD *)(v16 + 8 * v6);
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        v11 = sub_1CA0B6058(v11);
      if (v6 >= v11[2])
        break;
      v11[v6 + 4] = v18;
      v19 = v10;
      MEMORY[0x1CAA4A1E0]();
      if (*(_QWORD *)((v48 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(_QWORD *)((v48 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1)
        sub_1CA1F0B2C();
      ++v6;
      sub_1CA1F0B8C();
      sub_1CA1F0B14();

      if (v13 == v6)
        goto LABEL_19;
    }
LABEL_79:
    __break(1u);
LABEL_80:
    __break(1u);
LABEL_81:
    __break(1u);
LABEL_82:
    __break(1u);
LABEL_83:
    __break(1u);
LABEL_84:
    __break(1u);
LABEL_85:
    __break(1u);
LABEL_86:
    __break(1u);
LABEL_87:
    __break(1u);
LABEL_88:
    __break(1u);
LABEL_89:
    __break(1u);
LABEL_90:
    __break(1u);
LABEL_91:
    __break(1u);
LABEL_92:
    __break(1u);
LABEL_93:
    swift_bridgeObjectRetain();
    result = (_QWORD *)sub_1CA1F1234();
  }
  __break(1u);
LABEL_97:
  __break(1u);
  return result;
}

uint64_t MAVectorRepresentation.makeIterator()()
{
  uint64_t v0;
  unint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;

  v1 = *(_QWORD *)(v0 + 40);
  if (v1 >> 62)
  {
    swift_bridgeObjectRetain();
    v2 = sub_1CA1F1234();
    swift_bridgeObjectRelease();
  }
  else
  {
    v2 = *(_QWORD *)((v1 & 0xFFFFFFFFFFFFF8) + 0x10);
  }
  v3 = swift_allocObject();
  *(_QWORD *)(v3 + 16) = 0;
  v4 = (_QWORD *)swift_allocObject();
  v4[2] = v3;
  v4[3] = v2;
  v4[4] = v0;
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EF937D20);
  v5 = swift_allocObject();
  *(_QWORD *)(v5 + 16) = sub_1CA0E1FAC;
  *(_QWORD *)(v5 + 24) = v4;
  swift_retain();
  return v5;
}

_QWORD *sub_1CA0D4604@<X0>(_QWORD *result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, _QWORD *a4@<X8>)
{
  uint64_t v4;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v6 = result[2];
  if (v6 == a2)
  {
    *a4 = 0;
    a4[1] = 0;
    return result;
  }
  if (__OFADD__(v6, 1))
  {
    __break(1u);
  }
  else
  {
    v4 = a3;
    result[2] = v6 + 1;
    v7 = *(_QWORD *)(a3 + 40);
    if ((v7 & 0xC000000000000001) == 0)
    {
      if ((v6 & 0x8000000000000000) == 0)
      {
        if (v6 < *(_QWORD *)((v7 & 0xFFFFFFFFFFFFF8) + 0x10))
        {
          result = *(id *)(v7 + 8 * v6 + 32);
          goto LABEL_8;
        }
LABEL_14:
        __break(1u);
        goto LABEL_15;
      }
LABEL_13:
      __break(1u);
      goto LABEL_14;
    }
  }
  result = (_QWORD *)MEMORY[0x1CAA4A7A4](v6);
  if ((v6 & 0x8000000000000000) != 0)
  {
    __break(1u);
    goto LABEL_13;
  }
LABEL_8:
  v8 = *(_QWORD *)(v4 + 32);
  if (v6 < *(_QWORD *)(v8 + 16))
  {
    v9 = *(_QWORD *)(v8 + 8 * v6 + 32);
    *a4 = result;
    a4[1] = v9;
    return result;
  }
LABEL_15:
  __break(1u);
  return result;
}

uint64_t sub_1CA0D46B4@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v2;
  uint64_t result;

  v2 = MAVectorRepresentation.makeIterator()();
  result = swift_release();
  *a1 = v2;
  return result;
}

uint64_t sub_1CA0D46F0()
{
  uint64_t *v0;
  uint64_t v1;

  v1 = sub_1CA0DE934(*v0);
  swift_release();
  return v1;
}

uint64_t sub_1CA0D4724(uint64_t *a1, _QWORD *a2, uint64_t a3)
{
  return sub_1CA138778(a1, a2, a3);
}

uint64_t sub_1CA0D4744()
{
  type metadata accessor for MAVectorRepresentation();
  return sub_1CA1F0A9C();
}

Swift::Double __swiftcall MAVectorRepresentation.sum()()
{
  Swift::Double result;

  sub_1CA0D7864((void (*)(uint64_t, uint64_t, _QWORD *, uint64_t))MEMORY[0x1E0C8C2F8]);
  return result;
}

Swift::Double __swiftcall MAVectorRepresentation.mean()()
{
  Swift::Double result;

  sub_1CA0D7864((void (*)(uint64_t, uint64_t, _QWORD *, uint64_t))MEMORY[0x1E0C8C1F0]);
  return result;
}

Swift::Double __swiftcall MAVectorRepresentation.pstddev()()
{
  Swift::Double result;

  sub_1CA0D79D4();
  return result;
}

uint64_t MAVectorRepresentation.min()()
{
  return sub_1CA0D4938((void (*)(uint64_t, uint64_t, _QWORD *, _QWORD *, uint64_t))MEMORY[0x1E0C8C240], (uint64_t (*)(uint64_t, _QWORD *, _BYTE *))sub_1CA0DF648);
}

uint64_t MAVectorRepresentation.max()()
{
  return sub_1CA0D4938((void (*)(uint64_t, uint64_t, _QWORD *, _QWORD *, uint64_t))MEMORY[0x1E0C8C1D0], (uint64_t (*)(uint64_t, _QWORD *, _BYTE *))sub_1CA0DF648);
}

uint64_t sub_1CA0D4938(void (*a1)(uint64_t, uint64_t, _QWORD *, _QWORD *, uint64_t), uint64_t (*a2)(uint64_t, _QWORD *, _BYTE *))
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  double v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t result;
  _BYTE v14[16];
  _QWORD v15[3];
  _QWORD v16[2];

  v3 = v2;
  v16[1] = *MEMORY[0x1E0C80C00];
  v4 = v2[2];
  v5 = v2[3];
  v6 = v2[4];
  v15[0] = 0;
  v16[0] = 0;
  if ((unsigned __int128)(v4 * (__int128)v5) >> 64 != (v4 * v5) >> 63)
  {
    __break(1u);
    goto LABEL_6;
  }
  if (((v4 * v5) & 0x8000000000000000) == 0)
  {
    swift_bridgeObjectRetain();
    a1(v6 + 32, 1, v15, v16, v4 * v5);
    swift_bridgeObjectRelease();
    if ((v16[0] & 0x8000000000000000) == 0)
    {
      v9 = *(double *)v15;
      v15[0] = v4;
      v15[1] = v5;
      v15[2] = v6;
      v10 = MAMatrix.indices(of:)(v9);
      swift_retain();
      v11 = a2(v10, v3, v14);
      swift_bridgeObjectRelease();
      swift_release();
      v12 = sub_1CA0C68DC(v11);
      swift_bridgeObjectRelease();
      return v12;
    }
LABEL_6:
    __break(1u);
  }
  result = sub_1CA1F11BC();
  __break(1u);
  return result;
}

uint64_t MAVectorRepresentation.min(length:)(uint64_t a1)
{
  return sub_1CA0D4AD8(a1, (void (*)(_QWORD *, uint64_t))sub_1CA0E030C);
}

uint64_t MAVectorRepresentation.max(length:)(uint64_t a1)
{
  return sub_1CA0D4AD8(a1, (void (*)(_QWORD *, uint64_t))sub_1CA0E0EB8);
}

uint64_t sub_1CA0D4AD8(uint64_t a1, void (*a2)(_QWORD *, uint64_t))
{
  uint64_t v2;
  unint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  id v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD *v23;

  v5 = *(_QWORD *)(v2 + 40);
  swift_bridgeObjectRetain_n();
  swift_retain();
  v6 = (_QWORD *)sub_1CA0DEBB0(v5);
  swift_bridgeObjectRelease();
  v23 = v6;
  sub_1CA0E16D0(&v23, v2, a2);
  swift_bridgeObjectRelease();
  swift_release();
  v7 = v23;
  v8 = v23[2];
  if (v8)
  {
    v23 = (_QWORD *)MEMORY[0x1E0DEE9D8];
    sub_1CA1F10F0();
    v9 = 5;
    do
    {
      v10 = (id)v7[v9];
      sub_1CA1F10CC();
      sub_1CA1F10FC();
      sub_1CA1F1108();
      sub_1CA1F10D8();
      v9 += 2;
      --v8;
    }
    while (v8);
    v11 = v23;
    swift_release();
  }
  else
  {
    swift_release();
    v11 = (_QWORD *)MEMORY[0x1E0DEE9D8];
  }
  v12 = sub_1CA0E177C(a1, (unint64_t)v11);
  v14 = v13;
  v16 = v15;
  v18 = v17;
  swift_bridgeObjectRelease();
  if ((v18 & 1) == 0)
    goto LABEL_7;
  sub_1CA1F12F4();
  swift_unknownObjectRetain_n();
  v20 = swift_dynamicCastClass();
  if (!v20)
  {
    swift_unknownObjectRelease();
    v20 = MEMORY[0x1E0DEE9D8];
  }
  v21 = *(_QWORD *)(v20 + 16);
  swift_release();
  if (__OFSUB__(v18 >> 1, v16))
  {
    __break(1u);
    goto LABEL_16;
  }
  if (v21 != (v18 >> 1) - v16)
  {
LABEL_16:
    swift_unknownObjectRelease();
LABEL_7:
    v19 = sub_1CA0B59A0(v12, v14, v16, v18);
    goto LABEL_14;
  }
  v19 = swift_dynamicCastClass();
  if (!v19)
  {
    swift_unknownObjectRelease();
    v19 = MEMORY[0x1E0DEE9D8];
  }
LABEL_14:
  swift_unknownObjectRelease();
  return v19;
}

uint64_t MAVectorRepresentation.linearDeviation(lowerBound:upperBound:inverse:)(int a1, double a2, double a3)
{
  uint64_t v3;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  id v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v15;

  swift_retain();
  v7 = swift_bridgeObjectRetain();
  v8 = sub_1CA0DFD8C(v7, v3, a1, a2, a3);
  swift_bridgeObjectRelease();
  swift_release();
  v9 = *(_QWORD *)(v8 + 16);
  if (v9)
  {
    v15 = MEMORY[0x1E0DEE9D8];
    sub_1CA1F10F0();
    v10 = 40;
    do
    {
      v11 = *(id *)(v8 + v10);
      sub_1CA1F10CC();
      sub_1CA1F10FC();
      sub_1CA1F1108();
      sub_1CA1F10D8();
      v10 += 16;
      --v9;
    }
    while (v9);
    v12 = v15;
    swift_bridgeObjectRelease();
  }
  else
  {
    swift_bridgeObjectRelease();
    v12 = MEMORY[0x1E0DEE9D8];
  }
  v13 = sub_1CA0C68DC(v12);
  swift_bridgeObjectRelease();
  return v13;
}

uint64_t MAVectorRepresentation.linearDeviation(innerRange:)(double a1, double a2)
{
  return MAVectorRepresentation.linearDeviation(lowerBound:upperBound:inverse:)(0, a1, a2);
}

uint64_t MAVectorRepresentation.linearDeviation(outerRange:)(double a1, double a2)
{
  return MAVectorRepresentation.linearDeviation(lowerBound:upperBound:inverse:)(1, a1, a2);
}

uint64_t MAVectorRepresentation.linearDeviation(mid:innerDeviation:)(double a1, double a2)
{
  return MAVectorRepresentation.linearDeviation(lowerBound:upperBound:inverse:)(0, a1 - a2, a1 + a2);
}

uint64_t MAVectorRepresentation.linearDeviation(mid:outerDeviation:)(double a1, double a2)
{
  return MAVectorRepresentation.linearDeviation(lowerBound:upperBound:inverse:)(1, a1 - a2, a1 + a2);
}

uint64_t MAVectorRepresentation.linearDeviation(lowerBound:)(double a1)
{
  return MAVectorRepresentation.linearDeviation(lowerBound:upperBound:inverse:)(0, a1, INFINITY);
}

uint64_t MAVectorRepresentation.linearDeviation(upperBound:)(double a1)
{
  return MAVectorRepresentation.linearDeviation(lowerBound:upperBound:inverse:)(0, -INFINITY, a1);
}

uint64_t MAVectorRepresentation.gaussianCumulative(lowerBoundPercent:upperBoundPercent:inverse:)(char a1, double a2, double a3)
{
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  vDSP_Length v7;
  double v11;
  double v12;
  uint64_t result;
  double __C[2];

  __C[1] = *(double *)MEMORY[0x1E0C80C00];
  v4 = v3[2];
  v5 = v3[3];
  v6 = v3[4];
  __C[0] = 0.0;
  v7 = v4 * v5;
  if ((unsigned __int128)(v4 * (__int128)v5) >> 64 != (v4 * v5) >> 63)
    __break(1u);
  if ((v7 & 0x8000000000000000) != 0)
  {
    result = sub_1CA1F11BC();
    __break(1u);
  }
  else
  {
    swift_bridgeObjectRetain();
    vDSP_meanvD((const double *)(v6 + 32), 1, __C, v7);
    swift_bridgeObjectRelease();
    v11 = __C[0];
    v12 = MAMatrixRepresentation.pstddev()();
    return MAVectorRepresentation.gaussianCumulative(lowerBoundPercent:upperBoundPercent:inverse:mu:sigma:)(a1 & 1, a2, a3, v11, v12);
  }
  return result;
}

uint64_t MAVectorRepresentation.gaussianCumulative(lowerBoundPercent:upperBoundPercent:inverse:mu:sigma:)(char a1, double a2, double a3, double a4, double a5)
{
  uint64_t v5;
  unint64_t v6;
  uint64_t v11;
  uint64_t result;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  BOOL v17;
  char v18;
  id v19;
  void *v20;
  double v21;
  BOOL v22;
  unint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  id v29;
  uint64_t v30;
  char v31;
  BOOL v33;
  unint64_t v34;

  v6 = *(_QWORD *)(v5 + 40);
  if (a5 == 0.0)
  {
    swift_bridgeObjectRetain();
LABEL_44:
    v30 = sub_1CA0C68DC(v6);
    swift_bridgeObjectRelease();
    return v30;
  }
  if (v6 >> 62)
  {
    swift_bridgeObjectRetain();
    result = sub_1CA1F1234();
    v11 = result;
  }
  else
  {
    v11 = *(_QWORD *)((v6 & 0xFFFFFFFFFFFFF8) + 0x10);
    result = swift_bridgeObjectRetain();
  }
  v13 = MEMORY[0x1E0DEE9D8];
  if (!v11)
  {
LABEL_39:
    swift_bridgeObjectRelease();
    v27 = *(_QWORD *)(v13 + 16);
    if (v27)
    {
      v34 = MEMORY[0x1E0DEE9D8];
      sub_1CA1F10F0();
      v28 = 40;
      do
      {
        v29 = *(id *)(v13 + v28);
        sub_1CA1F10CC();
        sub_1CA1F10FC();
        sub_1CA1F1108();
        sub_1CA1F10D8();
        v28 += 16;
        --v27;
      }
      while (v27);
      v6 = v34;
      swift_release();
    }
    else
    {
      swift_release();
      v6 = MEMORY[0x1E0DEE9D8];
    }
    goto LABEL_44;
  }
  if (v11 < 1)
  {
    __break(1u);
  }
  else
  {
    v14 = *(_QWORD *)(v5 + 32);
    if ((unint64_t)(v11 - 1) < *(_QWORD *)(v14 + 16))
    {
      v15 = 0;
      v16 = v14 + 32;
      v17 = a3 <= 1.0 || a2 >= 1.0;
      v18 = a1;
      v33 = v17;
      v31 = v17 | a1 ^ 1;
      while (1)
      {
        if ((v6 & 0xC000000000000001) != 0)
          v19 = (id)MEMORY[0x1CAA4A7A4](v15, v6);
        else
          v19 = *(id *)(v6 + 8 * v15 + 32);
        v20 = v19;
        v21 = erfc((a4 - *(double *)(v16 + 8 * v15)) / a5 * 0.707106781) * 0.5;
        if (v21 <= 1.0)
        {
          v22 = v21 < a2 || v21 > a3;
          if (!v22 && (v18 & 1) == 0)
          {
LABEL_34:
            if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
            {
              sub_1CA0CD610(0, *(_QWORD *)(v13 + 16) + 1, 1);
              v18 = a1;
            }
            v25 = *(_QWORD *)(v13 + 16);
            v24 = *(_QWORD *)(v13 + 24);
            if (v25 >= v24 >> 1)
            {
              sub_1CA0CD610(v24 > 1, v25 + 1, 1);
              v18 = a1;
            }
            *(_QWORD *)(v13 + 16) = v25 + 1;
            v26 = v13 + 16 * v25;
            *(_QWORD *)(v26 + 32) = v15;
            *(_QWORD *)(v26 + 40) = v20;
            goto LABEL_13;
          }
          if (v21 <= a2 || v21 >= a3)
            goto LABEL_31;
        }
        else
        {
          if (a2 > 1.0 || a3 < 1.0)
          {
            if (!v33)
              goto LABEL_12;
LABEL_31:
            if ((v18 & 1) != 0)
              goto LABEL_34;
            goto LABEL_12;
          }
          if ((v31 & 1) != 0)
            goto LABEL_34;
        }
LABEL_12:

LABEL_13:
        if (v11 == ++v15)
          goto LABEL_39;
      }
    }
  }
  __break(1u);
  return result;
}

uint64_t MAVectorRepresentation.gaussianCumulative(lowerBoundPercent:inverse:)(char a1, double a2)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  vDSP_Length v6;
  double v9;
  double v10;
  uint64_t result;
  double __C[2];

  __C[1] = *(double *)MEMORY[0x1E0C80C00];
  v3 = v2[2];
  v4 = v2[3];
  v5 = v2[4];
  __C[0] = 0.0;
  v6 = v3 * v4;
  if ((unsigned __int128)(v3 * (__int128)v4) >> 64 != (v3 * v4) >> 63)
    __break(1u);
  if ((v6 & 0x8000000000000000) != 0)
  {
    result = sub_1CA1F11BC();
    __break(1u);
  }
  else
  {
    swift_bridgeObjectRetain();
    vDSP_meanvD((const double *)(v5 + 32), 1, __C, v6);
    swift_bridgeObjectRelease();
    v9 = __C[0];
    v10 = MAMatrixRepresentation.pstddev()();
    return MAVectorRepresentation.gaussianCumulative(lowerBoundPercent:upperBoundPercent:inverse:mu:sigma:)(a1 & 1, a2, 1.0, v9, v10);
  }
  return result;
}

uint64_t MAVectorRepresentation.gaussianCumulative(upperBoundPercent:inverse:)(char a1, double a2)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  vDSP_Length v6;
  double v9;
  double v10;
  uint64_t result;
  double __C[2];

  __C[1] = *(double *)MEMORY[0x1E0C80C00];
  v3 = v2[2];
  v4 = v2[3];
  v5 = v2[4];
  __C[0] = 0.0;
  v6 = v3 * v4;
  if ((unsigned __int128)(v3 * (__int128)v4) >> 64 != (v3 * v4) >> 63)
    __break(1u);
  if ((v6 & 0x8000000000000000) != 0)
  {
    result = sub_1CA1F11BC();
    __break(1u);
  }
  else
  {
    swift_bridgeObjectRetain();
    vDSP_meanvD((const double *)(v5 + 32), 1, __C, v6);
    swift_bridgeObjectRelease();
    v9 = __C[0];
    v10 = MAMatrixRepresentation.pstddev()();
    return MAVectorRepresentation.gaussianCumulative(lowerBoundPercent:upperBoundPercent:inverse:mu:sigma:)(a1 & 1, 0.0, a2, v9, v10);
  }
  return result;
}

uint64_t MAVectorRepresentation.gaussianCumulative(innerRange:mu:sigma:)(double a1, double a2, double a3, double a4)
{
  return MAVectorRepresentation.gaussianCumulative(lowerBoundPercent:upperBoundPercent:inverse:mu:sigma:)(0, a1, a2, a3, a4);
}

uint64_t MAVectorRepresentation.gaussianCumulative(outerRange:mu:sigma:)(double a1, double a2, double a3, double a4)
{
  return MAVectorRepresentation.gaussianCumulative(lowerBoundPercent:upperBoundPercent:inverse:mu:sigma:)(1, a1, a2, a3, a4);
}

uint64_t MAVectorRepresentation.gaussianCumulative(mid:innerDeviation:mu:sigma:)(double a1, double a2, double a3, double a4)
{
  return sub_1CA0D54F4(0, a1, a2, a3, a4);
}

uint64_t MAVectorRepresentation.gaussianCumulative(mid:outerDeviation:mu:sigma:)(double a1, double a2, double a3, double a4)
{
  return sub_1CA0D54F4(1, a1, a2, a3, a4);
}

uint64_t sub_1CA0D54F4(char a1, double a2, double a3, double a4, double a5)
{
  return MAVectorRepresentation.gaussianCumulative(lowerBoundPercent:upperBoundPercent:inverse:mu:sigma:)(a1, a2 - a3, a2 + a3, a4, a5);
}

uint64_t MAVectorRepresentation.gaussianCumulative(lowerBoundPercent:mu:sigma:)(double a1, double a2, double a3)
{
  return MAVectorRepresentation.gaussianCumulative(lowerBoundPercent:upperBoundPercent:inverse:mu:sigma:)(1, a1, 1.0, a2, a3);
}

uint64_t MAVectorRepresentation.gaussianCumulative(upperBoundPercent:mu:sigma:)(double a1, double a2, double a3)
{
  return MAVectorRepresentation.gaussianCumulative(lowerBoundPercent:upperBoundPercent:inverse:mu:sigma:)(1, 0.0, a1, a2, a3);
}

uint64_t MAVectorRepresentation.description.getter()
{
  return sub_1CA0D6E80(32, 0xD00000000000001ALL, 0x80000001CA207200, (uint64_t (*)(uint64_t, double *, char *))sub_1CA0DF648, (void (*)(uint64_t))MAVectorRepresentation.pstddev());
}

uint64_t sub_1CA0D55A0()
{
  return MAVectorRepresentation.description.getter();
}

uint64_t _s17KnowledgeGraphKit22MAVectorRepresentationC6vector5nodesAcA8MAMatrixV_SaySo6MANodeCGtcfc_0(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;

  v3 = *(_QWORD *)(a1 + 16);
  *(_OWORD *)(v2 + 16) = *(_OWORD *)a1;
  *(_QWORD *)(v2 + 32) = v3;
  *(_QWORD *)(v2 + 40) = a2;
  return v2;
}

uint64_t sub_1CA0D55DC(uint64_t result)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;

  v3 = v1[2];
  v2 = v1[3];
  if ((unsigned __int128)(v3 * (__int128)v2) >> 64 != (v3 * v2) >> 63)
  {
    __break(1u);
    goto LABEL_12;
  }
  if (v3 * v2 < result)
  {
LABEL_12:
    __break(1u);
    goto LABEL_13;
  }
  v4 = result * v2;
  if ((unsigned __int128)(result * (__int128)v2) >> 64 != (result * v2) >> 63)
  {
LABEL_13:
    __break(1u);
    goto LABEL_14;
  }
  v5 = v4 + result;
  if (__OFADD__(v4, result))
  {
LABEL_14:
    __break(1u);
    goto LABEL_15;
  }
  if ((v5 & 0x8000000000000000) != 0)
  {
LABEL_15:
    __break(1u);
    goto LABEL_16;
  }
  if (v5 >= *(_QWORD *)(v1[4] + 16))
  {
LABEL_16:
    __break(1u);
    return MEMORY[0x1CAA4A7A4]();
  }
  v6 = v1[5];
  if ((v6 & 0xC000000000000001) != 0)
    return MEMORY[0x1CAA4A7A4]();
  if (result < 0)
  {
    __break(1u);
  }
  else if (*(_QWORD *)((v6 & 0xFFFFFFFFFFFFF8) + 0x10) > (unint64_t)result)
  {
    return (uint64_t)*(id *)(v6 + 8 * result + 32);
  }
  __break(1u);
  return result;
}

uint64_t sub_1CA0D569C(uint64_t a1)
{
  _QWORD *v1;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char v6;
  uint64_t result;
  uint64_t v8;
  uint64_t v9;
  BOOL v10;
  unint64_t v11;
  uint64_t v12;

  v3 = v1[5];
  swift_bridgeObjectRetain();
  sub_1CA0C8364(a1, v3);
  v5 = v4;
  LOBYTE(a1) = v6;
  result = swift_bridgeObjectRelease();
  if ((a1 & 1) != 0)
    return 0;
  v8 = v1[3];
  v9 = v5 * v8;
  if ((unsigned __int128)(v5 * (__int128)v8) >> 64 != (v5 * v8) >> 63)
  {
    __break(1u);
    goto LABEL_9;
  }
  v10 = __OFADD__(v9, v5);
  v11 = v9 + v5;
  if (v10)
  {
LABEL_9:
    __break(1u);
    goto LABEL_10;
  }
  if ((v11 & 0x8000000000000000) == 0)
  {
    v12 = v1[4];
    if (v11 < *(_QWORD *)(v12 + 16))
      return *(_QWORD *)(v12 + 8 * v11 + 32);
    goto LABEL_11;
  }
LABEL_10:
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

unint64_t sub_1CA0D5748(unint64_t result, unint64_t a2)
{
  unint64_t v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  void *v8;
  id v9;
  id v10;

  if (*(_QWORD *)(v3 + 16) < (int64_t)result)
  {
    __break(1u);
    goto LABEL_14;
  }
  v2 = a2;
  v4 = *(_QWORD *)(v3 + 24);
  if (v4 < (uint64_t)a2)
  {
LABEL_14:
    __break(1u);
    goto LABEL_15;
  }
  v5 = result * v4;
  if ((unsigned __int128)((uint64_t)result * (__int128)v4) >> 64 != (uint64_t)(result * v4) >> 63)
  {
LABEL_15:
    __break(1u);
    goto LABEL_16;
  }
  v6 = v5 + a2;
  if (__OFADD__(v5, a2))
  {
LABEL_16:
    __break(1u);
    goto LABEL_17;
  }
  if ((v6 & 0x8000000000000000) != 0)
  {
LABEL_17:
    __break(1u);
    goto LABEL_18;
  }
  if (v6 >= *(_QWORD *)(*(_QWORD *)(v3 + 32) + 16))
  {
LABEL_18:
    __break(1u);
    goto LABEL_19;
  }
  v3 = *(_QWORD *)(v3 + 40);
  if ((v3 & 0xC000000000000001) != 0)
  {
LABEL_19:
    v9 = (id)MEMORY[0x1CAA4A7A4]();
    MEMORY[0x1CAA4A7A4](v2, v3);
    return (unint64_t)v9;
  }
  if ((result & 0x8000000000000000) != 0)
  {
    __break(1u);
    goto LABEL_21;
  }
  v7 = *(_QWORD *)((v3 & 0xFFFFFFFFFFFFF8) + 0x10);
  if (v7 <= result)
  {
LABEL_21:
    __break(1u);
    goto LABEL_22;
  }
  if (v7 > a2)
  {
    v8 = *(void **)(v3 + 32 + 8 * a2);
    v9 = *(id *)(v3 + 32 + 8 * result);
    v10 = v8;
    return (unint64_t)v9;
  }
LABEL_22:
  __break(1u);
  return result;
}

uint64_t sub_1CA0D584C(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char v8;
  char v9;
  uint64_t v10;
  uint64_t v11;
  char v12;
  char v13;
  uint64_t result;
  uint64_t v15;
  uint64_t v16;
  BOOL v17;
  unint64_t v18;
  uint64_t v19;

  v5 = v2[5];
  swift_bridgeObjectRetain();
  sub_1CA0C8364(a1, v5);
  v7 = v6;
  v9 = v8;
  swift_bridgeObjectRelease();
  if ((v9 & 1) != 0)
    return 0;
  swift_bridgeObjectRetain();
  sub_1CA0C8364(a2, v5);
  v11 = v10;
  v13 = v12;
  result = swift_bridgeObjectRelease();
  if ((v13 & 1) != 0)
    return 0;
  v15 = v2[3];
  v16 = v7 * v15;
  if ((unsigned __int128)(v7 * (__int128)v15) >> 64 != (v7 * v15) >> 63)
  {
    __break(1u);
    goto LABEL_10;
  }
  v17 = __OFADD__(v16, v11);
  v18 = v16 + v11;
  if (v17)
  {
LABEL_10:
    __break(1u);
    goto LABEL_11;
  }
  if ((v18 & 0x8000000000000000) == 0)
  {
    v19 = v2[4];
    if (v18 < *(_QWORD *)(v19 + 16))
      return *(_QWORD *)(v19 + 8 * v18 + 32);
    goto LABEL_12;
  }
LABEL_11:
  __break(1u);
LABEL_12:
  __break(1u);
  return result;
}

uint64_t sub_1CA0D5938@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char v8;
  uint64_t result;
  int64_t v10;
  _QWORD *v11;

  v5 = *(_QWORD *)(v2 + 40);
  swift_bridgeObjectRetain();
  sub_1CA0C8364(a1, v5);
  v7 = v6;
  LOBYTE(a1) = v8;
  result = swift_bridgeObjectRelease();
  if ((a1 & 1) != 0)
  {
    *(_OWORD *)a2 = 0u;
    *(_OWORD *)(a2 + 16) = 0u;
    return result;
  }
  v10 = *(_QWORD *)(v2 + 24);
  swift_bridgeObjectRetain();
  v11 = (_QWORD *)sub_1CA0B4464(v10, 0.0);
  result = swift_isUniquelyReferenced_nonNull_native();
  if ((result & 1) == 0)
  {
    result = (uint64_t)sub_1CA0B6058(v11);
    v11 = (_QWORD *)result;
  }
  if (v10 < (uint64_t)0xFFFFFFFF80000000)
  {
    __break(1u);
  }
  else if (v10 <= 0x7FFFFFFF)
  {
    if ((unsigned __int128)(v7 * (__int128)v10) >> 64 == (v7 * v10) >> 63)
    {
      cblas_dcopy_NEWLAPACK();
      result = swift_bridgeObjectRelease();
      *(_QWORD *)a2 = 1;
      *(_QWORD *)(a2 + 8) = v10;
      *(_QWORD *)(a2 + 16) = v11;
      *(_QWORD *)(a2 + 24) = v7;
      return result;
    }
    goto LABEL_11;
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

uint64_t sub_1CA0D5A38@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  _QWORD *v2;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char v8;
  uint64_t result;
  int64_t v10;
  uint64_t v11;
  _QWORD *v12;

  v5 = v2[5];
  swift_bridgeObjectRetain();
  sub_1CA0C8364(a1, v5);
  v7 = v6;
  LOBYTE(a1) = v8;
  result = swift_bridgeObjectRelease();
  if ((a1 & 1) != 0)
  {
    *(_OWORD *)a2 = 0u;
    *(_OWORD *)(a2 + 16) = 0u;
    return result;
  }
  v10 = v2[2];
  v11 = v2[3];
  swift_bridgeObjectRetain();
  v12 = (_QWORD *)sub_1CA0B4464(v10, 0.0);
  result = swift_isUniquelyReferenced_nonNull_native();
  if ((result & 1) == 0)
  {
    result = (uint64_t)sub_1CA0B6058(v12);
    v12 = (_QWORD *)result;
  }
  if (v10 > 0x7FFFFFFF)
  {
    __break(1u);
  }
  else if (v10 >= (uint64_t)0xFFFFFFFF80000000 && v11 >= (uint64_t)0xFFFFFFFF80000000)
  {
    if (v11 <= 0x7FFFFFFF)
    {
      cblas_dcopy_NEWLAPACK();
      result = swift_bridgeObjectRelease();
      *(_QWORD *)a2 = v10;
      *(_QWORD *)(a2 + 8) = 1;
      *(_QWORD *)(a2 + 16) = v12;
      *(_QWORD *)(a2 + 24) = v7;
      return result;
    }
    goto LABEL_12;
  }
  __break(1u);
LABEL_12:
  __break(1u);
  return result;
}

uint64_t sub_1CA0D5B48()
{
  return sub_1CA0D5B54((void (*)(Swift::Int, Swift::Int, void *))type metadata accessor for MAVectorRepresentation);
}

uint64_t sub_1CA0D5B54(void (*a1)(Swift::Int, Swift::Int, void *))
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  __int128 v6;
  uint64_t v7;
  KnowledgeGraphKit::MAMatrix v8;

  v8 = MAMatrix.diag()();
  v3 = *(_QWORD *)(v1 + 40);
  a1(v8.rows, v8.columns, v8.elements._rawValue);
  v4 = swift_allocObject();
  *(_OWORD *)(v4 + 16) = v6;
  *(_QWORD *)(v4 + 32) = v7;
  *(_QWORD *)(v4 + 40) = v3;
  swift_bridgeObjectRetain();
  return v4;
}

_QWORD *sub_1CA0D5BDC()
{
  _QWORD *v0;
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v10[2];

  v5 = v0[3];
  if (v5 < 0)
  {
    __break(1u);
    goto LABEL_5;
  }
  v1 = v0[2];
  v3 = v0[4];
  v2 = (_QWORD *)sub_1CA0B4464(v0[3], 0.0);
  v4 = *(_QWORD *)(v3 + 16);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
LABEL_5:
    v2 = sub_1CA0B6058(v2);
  v6 = v2[2];
  v10[0] = (uint64_t)(v2 + 4);
  v10[1] = v6;
  sub_1CA1339AC(v10, v3 + 32, v4, 0, v5, v1, v5, v3);
  v7 = v0[5];
  type metadata accessor for MAVectorRepresentation();
  v8 = (_QWORD *)swift_allocObject();
  v8[2] = 1;
  v8[3] = v5;
  v8[4] = v2;
  v8[5] = v7;
  swift_bridgeObjectRetain();
  return v8;
}

void sub_1CA0D5CB0()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  __int128 v6;
  char v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  __int128 v11;
  uint64_t v12;

  v1 = v0[3];
  v2 = v0[4];
  v8 = v0[2];
  v9 = v1;
  v10 = v2;
  if (v1 < 0)
  {
    __break(1u);
  }
  else
  {
    v7 = 1;
    MAMatrix.median(range:axe:)(0, v1, &v7, (uint64_t *)&v11);
    v6 = v11;
    v3 = v12;
    v4 = v0[5];
    type metadata accessor for MAVectorRepresentation();
    v5 = swift_allocObject();
    *(_OWORD *)(v5 + 16) = v6;
    *(_QWORD *)(v5 + 32) = v3;
    *(_QWORD *)(v5 + 40) = v4;
    swift_bridgeObjectRetain();
  }
}

uint64_t sub_1CA0D5D4C(__int128 *a1)
{
  return sub_1CA0D5D58(a1, (void (*)(void))type metadata accessor for MASquareMatrixRepresentation);
}

uint64_t sub_1CA0D5D58(__int128 *a1, void (*a2)(void))
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  __int128 v10;
  __int128 v11;
  uint64_t v12;
  __int128 v13;
  uint64_t v14;
  __int128 v15;
  uint64_t v16;

  v4 = *((_QWORD *)a1 + 2);
  v5 = *(_QWORD *)(v2 + 32);
  v13 = *(_OWORD *)(v2 + 16);
  v14 = v5;
  v11 = *a1;
  v12 = v4;
  * infix(_:_:)((int64_t *)&v13, (vDSP_Length *)&v11, (int64_t *)&v15);
  v10 = v15;
  v6 = v16;
  v7 = *(_QWORD *)(v2 + 40);
  a2();
  v8 = swift_allocObject();
  *(_OWORD *)(v8 + 16) = v10;
  *(_QWORD *)(v8 + 32) = v6;
  *(_QWORD *)(v8 + 40) = v7;
  swift_bridgeObjectRetain();
  return v8;
}

unint64_t sub_1CA0D5DF0()
{
  return sub_1CA0D5DFC((void (*)(uint64_t))type metadata accessor for MASquareMatrixRepresentation);
}

unint64_t sub_1CA0D5DFC(void (*a1)(uint64_t))
{
  _QWORD *v1;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  _QWORD *v6;
  unint64_t result;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;

  v3 = v1[2];
  v4 = v1[3];
  v5 = (_QWORD *)v1[4];
  swift_bridgeObjectRetain_n();
  v6 = v5;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    v6 = sub_1CA0B6058(v5);
  result = v5[2];
  if (result >> 31)
  {
    __break(1u);
  }
  else
  {
    cblas_dscal_NEWLAPACK();
    v8 = swift_bridgeObjectRelease();
    v9 = v1[5];
    a1(v8);
    v10 = (_QWORD *)swift_allocObject();
    v10[2] = v3;
    v10[3] = v4;
    v10[4] = v6;
    v10[5] = v9;
    swift_bridgeObjectRetain();
    return (unint64_t)v10;
  }
  return result;
}

unint64_t sub_1CA0D5EBC(__int128 *a1)
{
  return sub_1CA0D5ED0(a1, (void (*)(_QWORD *__return_ptr, __int128 *, __int128 *))+ infix(_:_:), (void (*)(uint64_t))type metadata accessor for MASquareMatrixRepresentation);
}

unint64_t sub_1CA0D5ED0(__int128 *a1, void (*a2)(_QWORD *__return_ptr, __int128 *, __int128 *), void (*a3)(uint64_t))
{
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  _QWORD *v10;
  unint64_t result;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  __int128 v15;
  uint64_t v16;
  __int128 v17;
  uint64_t v18;
  _QWORD v19[3];

  v5 = *((_QWORD *)a1 + 2);
  v6 = *(_QWORD *)(v3 + 32);
  v17 = *(_OWORD *)(v3 + 16);
  v18 = v6;
  v15 = *a1;
  v16 = v5;
  a2(v19, &v17, &v15);
  v7 = v19[0];
  v8 = v19[1];
  v9 = (_QWORD *)v19[2];
  swift_bridgeObjectRetain();
  v10 = v9;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    v10 = sub_1CA0B6058(v9);
  result = v9[2];
  if (result >> 31)
  {
    __break(1u);
  }
  else
  {
    cblas_dscal_NEWLAPACK();
    v12 = swift_bridgeObjectRelease();
    v13 = *(_QWORD *)(v3 + 40);
    a3(v12);
    v14 = (_QWORD *)swift_allocObject();
    v14[2] = v7;
    v14[3] = v8;
    v14[4] = v10;
    v14[5] = v13;
    swift_bridgeObjectRetain();
    return (unint64_t)v14;
  }
  return result;
}

uint64_t sub_1CA0D5FB8()
{
  return sub_1CA0D5FC4((void (*)(uint64_t))type metadata accessor for MASquareMatrixRepresentation);
}

uint64_t sub_1CA0D5FC4(void (*a1)(uint64_t))
{
  _QWORD *v1;
  int64_t v3;
  int64_t v4;
  uint64_t v5;
  int64_t v6;
  uint64_t v7;
  uint64_t v8;
  __int128 v10;
  __int128 v11;
  uint64_t v12;
  __int128 v13;
  uint64_t v14;
  int64_t v15[3];
  __int128 v16;
  int64_t v17;

  v3 = v1[3];
  v4 = v1[4];
  v15[0] = v1[2];
  v15[1] = v3;
  v15[2] = v4;
  *(_QWORD *)&v16 = v15[0];
  *((_QWORD *)&v16 + 1) = v3;
  v17 = v4;
  LOBYTE(v11) = 0;
  swift_bridgeObjectRetain();
  MAMatrix.max(axe:)((KnowledgeGraphKit::MAMatrixAxes)&v11);
  v11 = v13;
  v12 = v14;
  / infix(_:_:)(v15, (vDSP_Length *)&v11, (int64_t *)&v16);
  swift_bridgeObjectRelease();
  v5 = swift_bridgeObjectRelease();
  v10 = v16;
  v6 = v17;
  v7 = v1[5];
  a1(v5);
  v8 = swift_allocObject();
  *(_OWORD *)(v8 + 16) = v10;
  *(_QWORD *)(v8 + 32) = v6;
  *(_QWORD *)(v8 + 40) = v7;
  swift_bridgeObjectRetain();
  return v8;
}

unint64_t sub_1CA0D6094()
{
  return sub_1CA0D60A0((void (*)(uint64_t))type metadata accessor for MASquareMatrixRepresentation);
}

unint64_t sub_1CA0D60A0(void (*a1)(uint64_t))
{
  _QWORD *v1;
  _QWORD *v3;
  int64_t v4;
  int64_t v5;
  int64_t v6;
  int64_t v7;
  _QWORD *v8;
  _QWORD *v9;
  unint64_t result;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  __int128 v14;
  uint64_t v15;
  __int128 v16;
  uint64_t v17;
  int64_t v18[3];
  int64_t v19;
  int64_t v20;
  _QWORD *v21;

  v3 = v1;
  v4 = v1[3];
  v5 = v1[4];
  v18[0] = v1[2];
  v18[1] = v4;
  v18[2] = v5;
  v19 = v18[0];
  v20 = v4;
  v21 = (_QWORD *)v5;
  LOBYTE(v14) = 0;
  swift_bridgeObjectRetain();
  MAMatrix.max(axe:)((KnowledgeGraphKit::MAMatrixAxes)&v14);
  v14 = v16;
  v15 = v17;
  - infix(_:_:)(v18, (uint64_t *)&v14, &v19);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v6 = v19;
  v7 = v20;
  v8 = v21;
  swift_bridgeObjectRetain();
  v9 = v8;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    v9 = sub_1CA0B6058(v8);
  result = v8[2];
  if (result >> 31)
  {
    __break(1u);
  }
  else
  {
    cblas_dscal_NEWLAPACK();
    v11 = swift_bridgeObjectRelease();
    v12 = v3[5];
    a1(v11);
    v13 = (_QWORD *)swift_allocObject();
    v13[2] = v6;
    v13[3] = v7;
    v13[4] = v9;
    v13[5] = v12;
    swift_bridgeObjectRetain();
    return (unint64_t)v13;
  }
  return result;
}

_QWORD *sub_1CA0D61BC()
{
  return sub_1CA0D6208((void (*)(void))type metadata accessor for MASquareMatrixRepresentation);
}

_QWORD *sub_1CA0D6208(void (*a1)(void))
{
  _QWORD *v1;
  uint64_t v3;
  uint64_t v4;
  double *v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  int v10;
  uint64_t v11;

  v11 = *MEMORY[0x1E0C80C00];
  v3 = v1[2];
  v4 = v1[3];
  v5 = (double *)v1[4];
  swift_bridgeObjectRetain();
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    v5 = (double *)sub_1CA0B6058(v5);
  v6 = v3 * v4;
  if ((unsigned __int128)(v3 * (__int128)v4) >> 64 != (v3 * v4) >> 63)
  {
    __break(1u);
    goto LABEL_8;
  }
  if (v6 < (uint64_t)0xFFFFFFFF80000000)
  {
LABEL_8:
    __break(1u);
LABEL_9:
    __break(1u);
  }
  if (v6 > 0x7FFFFFFF)
    goto LABEL_9;
  v10 = v3 * v4;
  vvfabs(v5 + 4, v5 + 4, &v10);
  v7 = v1[5];
  a1();
  v8 = (_QWORD *)swift_allocObject();
  v8[2] = v3;
  v8[3] = v4;
  v8[4] = v5;
  v8[5] = v7;
  swift_bridgeObjectRetain();
  return v8;
}

uint64_t sub_1CA0D6304()
{
  uint64_t v0;
  unint64_t v1;
  uint64_t v3;

  v1 = *(_QWORD *)(v0 + 40);
  if (!(v1 >> 62))
    return *(_QWORD *)((v1 & 0xFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain();
  v3 = sub_1CA1F1234();
  swift_bridgeObjectRelease();
  return v3;
}

uint64_t sub_1CA0D6360()
{
  uint64_t v0;
  unint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  __int128 v8;
  uint64_t v9;

  v1 = *(_QWORD *)(v0 + 40);
  if (v1 >> 62)
  {
    swift_bridgeObjectRetain();
    v3 = sub_1CA1F1234();
    v2 = sub_1CA1F1234();
    swift_bridgeObjectRelease();
  }
  else
  {
    v2 = *(_QWORD *)((v1 & 0xFFFFFFFFFFFFF8) + 0x10);
    v3 = v2;
  }
  if ((unsigned __int128)(v3 * (__int128)v2) >> 64 != (v3 * v2) >> 63)
    __break(1u);
  *(_QWORD *)&v8 = v3;
  *((_QWORD *)&v8 + 1) = v2;
  v9 = sub_1CA0B4464(v3 * v2, 0.0);
  if (v1 >> 62)
  {
    swift_bridgeObjectRetain();
    sub_1CA1F1234();
    swift_bridgeObjectRelease();
  }
  v4 = sub_1CA0AB910(0, &qword_1EF937558);
  MEMORY[0x1E0C80A78](v4, v5);
  sub_1CA1F0E2C();
  type metadata accessor for MASquareMatrixRepresentation();
  v6 = swift_allocObject();
  *(_OWORD *)(v6 + 16) = v8;
  *(_QWORD *)(v6 + 32) = v9;
  *(_QWORD *)(v6 + 40) = v1;
  swift_bridgeObjectRetain();
  return v6;
}

void sub_1CA0D6510(uint64_t a1, uint64_t a2, char a3, double *a4, unint64_t a5)
{
  uint64_t v7;
  uint64_t v9;
  unint64_t v10;
  _QWORD *v11;
  unint64_t v12;
  int64_t v13;
  int64_t v14;
  uint64_t v15;
  double v16;
  double v17;
  double v18;
  double v19;
  double v20;
  double v21;
  double v22;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  unint64_t v27;
  double *v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  BOOL v32;
  unint64_t v33;
  double __C[3];

  v7 = a2;
  __C[1] = *(double *)MEMORY[0x1E0C80C00];
  v9 = *(_QWORD *)(a2 + 40);
  if ((unint64_t)v9 >> 62)
    goto LABEL_57;
  v10 = *(_QWORD *)((v9 & 0xFFFFFFFFFFFFFF8) + 0x10);
  v11 = (_QWORD *)sub_1CA0B4464(v10, 0.0);
  v12 = *(_QWORD *)((v9 & 0xFFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain();
  v31 = v12;
  if (!v12)
  {
LABEL_58:
    swift_bridgeObjectRelease();
    goto LABEL_59;
  }
LABEL_3:
  v25 = v10;
  v26 = a1;
  v27 = a5;
  v28 = a4;
  v12 = 0;
  v13 = *(_QWORD *)(v7 + 16);
  v14 = *(_QWORD *)(v7 + 24);
  v30 = v9;
  v33 = v9 & 0xC000000000000001;
  v9 = v13 * v14;
  v32 = (unsigned __int128)(a1 * (__int128)v14) >> 64 != (a1 * v14) >> 63;
  v15 = *(_QWORD *)(v7 + 32) + 32;
  a4 = (double *)(v15 + 8 * a1 * v14);
  v29 = 8 * v13 * v14;
  a1 = v31;
  while (1)
  {
    if (v33)
    {
      MEMORY[0x1CAA4A7A4](v12, v30);
      swift_unknownObjectRelease();
      a5 = v12 + 1;
      if (__OFADD__(v12, 1))
        goto LABEL_47;
    }
    else
    {
      a5 = v12 + 1;
      if (__OFADD__(v12, 1))
        goto LABEL_48;
    }
    if (a3)
      break;
    if (v13 != v14)
      goto LABEL_51;
    __C[0] = 0.0;
    if (v32)
      goto LABEL_53;
    if (v14 < 0)
      goto LABEL_70;
    v7 = v15 + 8 * v12;
    vDSP_dotprD(a4, 1, (const double *)v7, v13, __C, v13);
    if ((unint64_t)v14 >> 31)
      goto LABEL_55;
    cblas_dnrm2_NEWLAPACK();
    v17 = v16;
    cblas_dnrm2_NEWLAPACK();
    v19 = __C[0] / (v17 * v18);
    if (v19 > 1.0)
      v19 = 1.0;
    if (v19 > 0.0)
      v20 = v19;
    else
      v20 = 0.0;
LABEL_38:
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    {
      v11 = sub_1CA0B6058(v11);
      if ((v12 & 0x8000000000000000) == 0)
        goto LABEL_40;
LABEL_44:
      __break(1u);
LABEL_45:
      swift_bridgeObjectRelease();
      a5 = v27;
      a4 = v28;
      v10 = v25;
      a1 = v26;
LABEL_59:
      os_unfair_lock_lock((os_unfair_lock_t)a4);
      if (v10 == *(_QWORD *)(a5 + 8))
      {
        v12 = *(_QWORD *)(a5 + 16);
        isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
        *(_QWORD *)(a5 + 16) = v12;
        if ((isUniquelyReferenced_nonNull_native & 1) != 0)
          goto LABEL_61;
      }
      else
      {
        __break(1u);
      }
      v12 = (unint64_t)sub_1CA0B6058((_QWORD *)v12);
      *(_QWORD *)(a5 + 16) = v12;
LABEL_61:
      v24 = *(_QWORD *)(a5 + 8);
      if (v24 < (uint64_t)0xFFFFFFFF80000000)
      {
        __break(1u);
      }
      else if (v24 <= 0x7FFFFFFF)
      {
        if ((unsigned __int128)(a1 * (__int128)v24) >> 64 == (a1 * v24) >> 63)
        {
          cblas_dcopy_NEWLAPACK();
          *(_QWORD *)(a5 + 16) = v12;
          swift_bridgeObjectRelease();
          os_unfair_lock_unlock((os_unfair_lock_t)a4);
          return;
        }
LABEL_69:
        __break(1u);
      }
      __break(1u);
      goto LABEL_69;
    }
    if ((v12 & 0x8000000000000000) != 0)
      goto LABEL_44;
LABEL_40:
    if (v12 >= v11[2])
    {
      __break(1u);
LABEL_47:
      __break(1u);
LABEL_48:
      __break(1u);
LABEL_49:
      __break(1u);
LABEL_50:
      __break(1u);
LABEL_51:
      __break(1u);
LABEL_52:
      __break(1u);
LABEL_53:
      __break(1u);
LABEL_54:
      __break(1u);
LABEL_55:
      __break(1u);
LABEL_56:
      __break(1u);
LABEL_57:
      swift_bridgeObjectRetain();
      v10 = sub_1CA1F1234();
      swift_bridgeObjectRelease();
      v11 = (_QWORD *)sub_1CA0B4464(v10, 0.0);
      swift_bridgeObjectRetain();
      v12 = sub_1CA1F1234();
      v31 = v12;
      if (!v12)
        goto LABEL_58;
      goto LABEL_3;
    }
    *(double *)&v11[v12 + 4] = v20;
    v12 = a5;
    if (a5 == a1)
      goto LABEL_45;
  }
  if (a3 == 1)
  {
    if ((unsigned __int128)(v13 * (__int128)v14) >> 64 != (v13 * v14) >> 63)
      goto LABEL_49;
    if (v9 < 0)
      goto LABEL_71;
    if (v9)
    {
      v7 = sub_1CA1F0B68();
      *(_QWORD *)(v7 + 16) = v9;
      bzero((void *)(v7 + 32), v29);
    }
    else
    {
      v7 = MEMORY[0x1E0DEE9D8];
    }
    __C[0] = 1.0;
    if (v32)
      goto LABEL_52;
    if (v14 < 0)
      goto LABEL_70;
    vDSP_vsmsbD(a4, 1, __C, (const double *)(v15 + 8 * v12), v14, (double *)(v7 + 32), 1, v14);
    vDSP_vsqD((const double *)(v7 + 32), 1, (double *)(v7 + 32), 1, v14);
    __C[0] = 0.0;
    swift_bridgeObjectRetain();
    vDSP_sveD((const double *)(v7 + 32), 1, __C, v13 * v14);
    swift_bridgeObjectRelease();
    v21 = __C[0];
    swift_bridgeObjectRelease();
    v20 = sqrt(v21);
    goto LABEL_37;
  }
  if ((unsigned __int128)(v13 * (__int128)v14) >> 64 != (v13 * v14) >> 63)
    goto LABEL_50;
  if (v9 < 0)
    goto LABEL_71;
  if (v9)
  {
    v7 = sub_1CA1F0B68();
    *(_QWORD *)(v7 + 16) = v9;
    bzero((void *)(v7 + 32), v29);
  }
  else
  {
    v7 = MEMORY[0x1E0DEE9D8];
  }
  __C[0] = 1.0;
  if (v32)
    goto LABEL_54;
  if ((v14 & 0x8000000000000000) == 0)
  {
    a1 = v7 + 32;
    vDSP_vsmsbD(a4, 1, __C, (const double *)(v15 + 8 * v12), v14, (double *)(v7 + 32), 1, v14);
    if (v9 > 0x7FFFFFFF)
      goto LABEL_56;
    swift_bridgeObjectRetain();
    cblas_dasum_NEWLAPACK();
    v20 = v22;
    swift_bridgeObjectRelease_n();
LABEL_37:
    a1 = v31;
    goto LABEL_38;
  }
LABEL_70:
  sub_1CA1F11BC();
  __break(1u);
LABEL_71:
  sub_1CA1F11BC();
  __break(1u);
}

uint64_t _s17KnowledgeGraphKit22MAVectorRepresentationCfd_0()
{
  uint64_t v0;

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v0;
}

uint64_t _s17KnowledgeGraphKit22MAVectorRepresentationCfD_0()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_deallocClassInstance();
}

Swift::Double __swiftcall MASquareMatrixRepresentation.sum()()
{
  Swift::Double result;

  sub_1CA0D7864((void (*)(uint64_t, uint64_t, _QWORD *, uint64_t))MEMORY[0x1E0C8C2F8]);
  return result;
}

Swift::Double __swiftcall MASquareMatrixRepresentation.mean()()
{
  Swift::Double result;

  sub_1CA0D7864((void (*)(uint64_t, uint64_t, _QWORD *, uint64_t))MEMORY[0x1E0C8C1F0]);
  return result;
}

Swift::Double __swiftcall MASquareMatrixRepresentation.pstddev()()
{
  Swift::Double result;

  sub_1CA0D79D4();
  return result;
}

uint64_t MASquareMatrixRepresentation.min()()
{
  return sub_1CA0D4938((void (*)(uint64_t, uint64_t, _QWORD *, _QWORD *, uint64_t))MEMORY[0x1E0C8C240], (uint64_t (*)(uint64_t, _QWORD *, _BYTE *))sub_1CA0DF510);
}

uint64_t MASquareMatrixRepresentation.max()()
{
  return sub_1CA0D4938((void (*)(uint64_t, uint64_t, _QWORD *, _QWORD *, uint64_t))MEMORY[0x1E0C8C1D0], (uint64_t (*)(uint64_t, _QWORD *, _BYTE *))sub_1CA0DF510);
}

uint64_t MASquareMatrixRepresentation.linearDeviation(lowerBound:upperBound:inverse:)(uint64_t a1, double a2, double a3)
{
  return sub_1CA0D7DAC(a1, (uint64_t (*)(_QWORD, _QWORD, _QWORD))sub_1CA0DF748, a2, a3);
}

void MASquareMatrixRepresentation.linearDeviation(innerRange:)(double a1, double a2)
{
  sub_1CA0D7FD0(a1, a2, (uint64_t)&unk_1E83DF6B8, (uint64_t)sub_1CA0E1FCC, (void (*)(uint64_t, _QWORD *, _BYTE *))sub_1CA0DF748);
}

void MASquareMatrixRepresentation.linearDeviation(outerRange:)(double a1, double a2)
{
  sub_1CA0D8230(a1, a2, (uint64_t)&unk_1E83DF6E0, (uint64_t)sub_1CA0E1FCC, (void (*)(uint64_t, _QWORD *, _BYTE *))sub_1CA0DF748);
}

void MASquareMatrixRepresentation.linearDeviation(mid:innerDeviation:)(double a1, double a2)
{
  sub_1CA0D8490(a1, a2, (uint64_t)&unk_1E83DF708, (uint64_t)sub_1CA0E1FCC, (void (*)(uint64_t, _QWORD *, _BYTE *))sub_1CA0DF748);
}

void MASquareMatrixRepresentation.linearDeviation(mid:outerDeviation:)(double a1, double a2)
{
  sub_1CA0D86F8(a1, a2, (uint64_t)&unk_1E83DF730, (uint64_t)sub_1CA0E1FCC, (void (*)(uint64_t, _QWORD *, _BYTE *))sub_1CA0DF748);
}

void MASquareMatrixRepresentation.linearDeviation(lowerBound:)(double a1)
{
  sub_1CA0D8960(a1, (uint64_t)&unk_1E83DF758, (uint64_t)sub_1CA0E1FCC, (void (*)(uint64_t, _QWORD *, _BYTE *))sub_1CA0DF748);
}

void MASquareMatrixRepresentation.linearDeviation(upperBound:)(double a1)
{
  sub_1CA0D8BBC(a1, (uint64_t)&unk_1E83DF780, (uint64_t)sub_1CA0E1FCC, (void (*)(uint64_t, _QWORD *, _BYTE *))sub_1CA0DF748);
}

uint64_t MASquareMatrixRepresentation.gaussianCumulative(lowerBoundPercent:upperBoundPercent:inverse:)(char a1, double a2, double a3)
{
  return sub_1CA0D8E50(a1, (double (*)(uint64_t))MASquareMatrixRepresentation.pstddev(), (uint64_t (*)(_QWORD, double, double, double, double))MASquareMatrixRepresentation.gaussianCumulative(lowerBoundPercent:upperBoundPercent:inverse:mu:sigma:), a2, a3);
}

void MASquareMatrixRepresentation.gaussianCumulative(lowerBoundPercent:upperBoundPercent:inverse:mu:sigma:)(int a1, double a2, double a3, double a4, double a5)
{
  sub_1CA0D8FA0(a1, (void (*)(uint64_t, uint64_t, uint64_t, uint64_t, _BYTE *))sub_1CA0E1FE4, (void (*)(uint64_t, uint64_t, _BYTE *))sub_1CA0DF748, a2, a3, a4, a5);
}

void MASquareMatrixRepresentation.gaussianCumulative(innerRange:mu:sigma:)(double a1, double a2, double a3, double a4)
{
  MASquareMatrixRepresentation.gaussianCumulative(lowerBoundPercent:upperBoundPercent:inverse:mu:sigma:)(0, a1, a2, a3, a4);
}

void MASquareMatrixRepresentation.gaussianCumulative(outerRange:mu:sigma:)(double a1, double a2, double a3, double a4)
{
  MASquareMatrixRepresentation.gaussianCumulative(lowerBoundPercent:upperBoundPercent:inverse:mu:sigma:)(1, a1, a2, a3, a4);
}

uint64_t MASquareMatrixRepresentation.gaussianCumulative(mid:innerDeviation:mu:sigma:)(double a1, double a2)
{
  return sub_1CA0D6DD4(a1, a2, 0, (uint64_t (*)(double, double))MASquareMatrixRepresentation.gaussianCumulative(lowerBoundPercent:upperBoundPercent:inverse:mu:sigma:));
}

uint64_t MASquareMatrixRepresentation.gaussianCumulative(mid:outerDeviation:mu:sigma:)(double a1, double a2)
{
  return sub_1CA0D6DD4(a1, a2, 1, (uint64_t (*)(double, double))MASquareMatrixRepresentation.gaussianCumulative(lowerBoundPercent:upperBoundPercent:inverse:mu:sigma:));
}

uint64_t sub_1CA0D6DD4(double a1, double a2, uint64_t a3, uint64_t (*a4)(double, double))
{
  return a4(a1 - a2, a1 + a2);
}

void MASquareMatrixRepresentation.gaussianCumulative(lowerBoundPercent:mu:sigma:)(double a1, double a2, double a3)
{
  MASquareMatrixRepresentation.gaussianCumulative(lowerBoundPercent:upperBoundPercent:inverse:mu:sigma:)(1, a1, 1.0, a2, a3);
}

void MASquareMatrixRepresentation.gaussianCumulative(upperBoundPercent:mu:sigma:)(double a1, double a2, double a3)
{
  MASquareMatrixRepresentation.gaussianCumulative(lowerBoundPercent:upperBoundPercent:inverse:mu:sigma:)(1, 0.0, a1, a2, a3);
}

uint64_t MASquareMatrixRepresentation.description.getter()
{
  return sub_1CA0D6E80(38, 0xD000000000000020, 0x80000001CA207220, (uint64_t (*)(uint64_t, double *, char *))sub_1CA0DF510, (void (*)(uint64_t))MASquareMatrixRepresentation.pstddev());
}

uint64_t sub_1CA0D6E80(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t (*a4)(uint64_t, double *, char *), void (*a5)(uint64_t))
{
  double *v5;
  double v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  id v15;
  void *v16;
  id v17;
  vDSP_Length v18;
  const double *v19;
  double v20;
  uint64_t v21;
  unint64_t v22;
  double v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t result;
  uint64_t (*v29)(uint64_t, double *, char *);
  uint64_t v30;
  double *v31;
  int64_t v32;
  char v33[8];
  char v34[16];
  vDSP_Length __I;
  uint64_t __C;
  unint64_t v37;
  uint64_t v38;
  uint64_t v39;
  unint64_t v40;
  double v41;
  unint64_t v42;
  uint64_t v43;

  v43 = *MEMORY[0x1E0C80C00];
  sub_1CA1F1054();
  swift_bridgeObjectRelease();
  __C = a2;
  v37 = a3;
  v41 = v5[2];
  v9 = v41;
  sub_1CA1F12AC();
  sub_1CA1F0A3C();
  swift_bridgeObjectRelease();
  sub_1CA1F0A3C();
  v10 = *((_QWORD *)v5 + 3);
  sub_1CA1F12AC();
  sub_1CA1F0A3C();
  swift_bridgeObjectRelease();
  sub_1CA1F0A3C();
  v41 = *(double *)&a2;
  v42 = a3;
  v39 = 10;
  v40 = 0xE100000000000000;
  v11 = *((_QWORD *)v5 + 4);
  *(double *)&__C = v9;
  v37 = v10;
  v30 = v11;
  v38 = v11;
  MAMatrix.description(integerPrecision:doublePrecision:)(5, 5);
  sub_1CA1F0A3C();
  swift_bridgeObjectRelease();
  sub_1CA1F0A3C();
  swift_bridgeObjectRelease();
  sub_1CA1F0A3C();
  v12 = *((_QWORD *)v5 + 5);
  v31 = v5;
  v32 = v10;
  v29 = a4;
  if (v12 >> 62)
  {
    swift_bridgeObjectRetain();
    v13 = sub_1CA1F1234();
    if (!v13)
      goto LABEL_10;
  }
  else
  {
    v13 = *(_QWORD *)((v12 & 0xFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain();
    if (!v13)
      goto LABEL_10;
  }
  if (v13 < 1)
    goto LABEL_18;
  v14 = 0;
  do
  {
    if ((v12 & 0xC000000000000001) != 0)
      v15 = (id)MEMORY[0x1CAA4A7A4](v14, v12);
    else
      v15 = *(id *)(v12 + 8 * v14 + 32);
    v16 = v15;
    ++v14;
    __C = 2314;
    v37 = 0xE200000000000000;
    v17 = objc_msgSend(v15, sel_visualString);
    sub_1CA1F0A0C();

    sub_1CA1F0A3C();
    swift_bridgeObjectRelease();
    sub_1CA1F0A3C();

    swift_bridgeObjectRelease();
  }
  while (v13 != v14);
LABEL_10:
  swift_bridgeObjectRelease();
  sub_1CA1F0A3C();
  v37 = 0xE000000000000000;
  sub_1CA1F1054();
  v39 = 0;
  v40 = 0xE000000000000000;
  sub_1CA1F0A3C();
  __I = 0;
  *(double *)&__C = 0.0;
  v18 = *(_QWORD *)&v9 * v32;
  if ((unsigned __int128)(*(uint64_t *)&v9 * (__int128)v32) >> 64 != (*(_QWORD *)&v9 * v32) >> 63)
  {
    __break(1u);
    goto LABEL_16;
  }
  if ((v18 & 0x8000000000000000) == 0)
  {
    v19 = (const double *)(v30 + 32);
    swift_bridgeObjectRetain();
    vDSP_minviD((const double *)(v30 + 32), 1, (double *)&__C, &__I, v18);
    swift_bridgeObjectRelease();
    if ((__I & 0x8000000000000000) == 0)
    {
      v20 = *(double *)&__C;
      *(double *)&__C = v9;
      v37 = v32;
      v38 = v30;
      v21 = MAMatrix.indices(of:)(v20);
      swift_retain();
      v22 = v29(v21, v31, v34);
      swift_bridgeObjectRelease();
      swift_release();
      sub_1CA0C68DC(v22);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      sub_1CA1F0C7C();
      sub_1CA1F0A3C();
      __I = 0;
      *(double *)&__C = 0.0;
      swift_bridgeObjectRetain();
      vDSP_maxviD(v19, 1, (double *)&__C, &__I, v18);
      swift_bridgeObjectRelease();
      if ((__I & 0x8000000000000000) == 0)
      {
        v23 = *(double *)&__C;
        *(double *)&__C = v9;
        v37 = v32;
        v38 = v30;
        v24 = MAMatrix.indices(of:)(v23);
        swift_retain();
        v25 = v29(v24, v31, v33);
        swift_bridgeObjectRelease();
        swift_release();
        sub_1CA0C68DC(v25);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        sub_1CA1F0C7C();
        sub_1CA1F0A3C();
        *(double *)&__C = 0.0;
        swift_bridgeObjectRetain();
        vDSP_meanvD(v19, 1, (double *)&__C, v18);
        swift_bridgeObjectRelease();
        sub_1CA1F0C7C();
        sub_1CA1F0A3C();
        *(double *)&__C = v9;
        v37 = v32;
        v38 = v30;
        MAMatrix.median()();
        sub_1CA1F0C7C();
        v26 = sub_1CA1F0A3C();
        a5(v26);
        sub_1CA1F0C7C();
        sub_1CA1F0A3C();
        *(double *)&__C = v9;
        v37 = v32;
        v38 = v30;
        MAMatrix.sstddev()();
        sub_1CA1F0C7C();
        sub_1CA1F0A3C();
        swift_bridgeObjectRelease();
        return *(_QWORD *)&v41;
      }
      goto LABEL_17;
    }
LABEL_16:
    __break(1u);
LABEL_17:
    __break(1u);
LABEL_18:
    __break(1u);
  }
  result = sub_1CA1F11BC();
  __break(1u);
  return result;
}

uint64_t sub_1CA0D74B0()
{
  return MASquareMatrixRepresentation.description.getter();
}

uint64_t MAMatrixRepresentation.matrix.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;

  v2 = *(_QWORD *)(v1 + 32);
  *(_OWORD *)a1 = *(_OWORD *)(v1 + 16);
  *(_QWORD *)(a1 + 16) = v2;
  return swift_bridgeObjectRetain();
}

uint64_t MAMatrixRepresentation.rnodes.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t MAMatrixRepresentation.cnodes.getter()
{
  return swift_bridgeObjectRetain();
}

__n128 MAMatrixRepresentation.__allocating_init(matrix:rnodes:cnodes:)(__n128 *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  unint64_t v7;
  __n128 result;

  v6 = swift_allocObject();
  v7 = a1[1].n128_u64[0];
  result = *a1;
  *(__n128 *)(v6 + 16) = *a1;
  *(_QWORD *)(v6 + 32) = v7;
  *(_QWORD *)(v6 + 40) = a2;
  *(_QWORD *)(v6 + 48) = a3;
  return result;
}

uint64_t MAMatrixRepresentation.init(matrix:rnodes:cnodes:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;

  v4 = *(_QWORD *)(a1 + 16);
  *(_OWORD *)(v3 + 16) = *(_OWORD *)a1;
  *(_QWORD *)(v3 + 32) = v4;
  *(_QWORD *)(v3 + 40) = a2;
  *(_QWORD *)(v3 + 48) = a3;
  return v3;
}

id sub_1CA0D7560(unint64_t a1, uint64_t a2)
{
  unint64_t v2;
  _QWORD *v3;
  id v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  id result;
  uint64_t v10;
  id v11;

  if (v3[2] < (int64_t)a1)
  {
    __break(1u);
    goto LABEL_17;
  }
  v2 = a2;
  v5 = v3[3];
  if (v5 < a2)
  {
LABEL_17:
    __break(1u);
    goto LABEL_18;
  }
  v6 = a1 * v5;
  if ((unsigned __int128)((uint64_t)a1 * (__int128)v5) >> 64 != (uint64_t)(a1 * v5) >> 63)
  {
LABEL_18:
    __break(1u);
    goto LABEL_19;
  }
  v7 = v6 + a2;
  if (__OFADD__(v6, a2))
  {
LABEL_19:
    __break(1u);
    goto LABEL_20;
  }
  if ((v7 & 0x8000000000000000) != 0)
  {
LABEL_20:
    __break(1u);
    goto LABEL_21;
  }
  if (v7 >= *(_QWORD *)(v3[4] + 16))
  {
LABEL_21:
    __break(1u);
    goto LABEL_22;
  }
  v8 = v3[5];
  if ((v8 & 0xC000000000000001) == 0)
  {
    if ((a1 & 0x8000000000000000) != 0)
    {
      __break(1u);
    }
    else if (*(_QWORD *)((v8 & 0xFFFFFFFFFFFFF8) + 0x10) > a1)
    {
      result = *(id *)(v8 + 8 * a1 + 32);
      goto LABEL_11;
    }
    __break(1u);
    goto LABEL_25;
  }
LABEL_22:
  result = (id)MEMORY[0x1CAA4A7A4]();
LABEL_11:
  v4 = result;
  v10 = v3[6];
  if ((v10 & 0xC000000000000001) != 0)
  {
LABEL_25:
    MEMORY[0x1CAA4A7A4](v2);
    return v4;
  }
  if ((v2 & 0x8000000000000000) != 0)
  {
    __break(1u);
  }
  else if (*(_QWORD *)((v10 & 0xFFFFFFFFFFFFF8) + 0x10) > v2)
  {
    v11 = *(id *)(v10 + 8 * v2 + 32);
    return v4;
  }
  __break(1u);
  return result;
}

uint64_t sub_1CA0D767C(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char v8;
  char v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char v13;
  char v14;
  uint64_t result;
  uint64_t v16;
  uint64_t v17;
  BOOL v18;
  unint64_t v19;
  uint64_t v20;

  v5 = v2[5];
  swift_bridgeObjectRetain();
  sub_1CA0C8364(a1, v5);
  v7 = v6;
  v9 = v8;
  swift_bridgeObjectRelease();
  if ((v9 & 1) != 0)
    return 0;
  v10 = v2[6];
  swift_bridgeObjectRetain();
  sub_1CA0C8364(a2, v10);
  v12 = v11;
  v14 = v13;
  result = swift_bridgeObjectRelease();
  if ((v14 & 1) != 0)
    return 0;
  v16 = v2[3];
  v17 = v7 * v16;
  if ((unsigned __int128)(v7 * (__int128)v16) >> 64 != (v7 * v16) >> 63)
  {
    __break(1u);
    goto LABEL_10;
  }
  v18 = __OFADD__(v17, v12);
  v19 = v17 + v12;
  if (v18)
  {
LABEL_10:
    __break(1u);
    goto LABEL_11;
  }
  if ((v19 & 0x8000000000000000) == 0)
  {
    v20 = v2[4];
    if (v19 < *(_QWORD *)(v20 + 16))
      return *(_QWORD *)(v20 + 8 * v19 + 32);
    goto LABEL_12;
  }
LABEL_11:
  __break(1u);
LABEL_12:
  __break(1u);
  return result;
}

uint64_t MAMatrixRepresentation.deinit()
{
  uint64_t v0;

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v0;
}

uint64_t MAMatrixRepresentation.__deallocating_deinit()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_deallocClassInstance();
}

Swift::Double __swiftcall MAMatrixRepresentation.sum()()
{
  Swift::Double result;

  sub_1CA0D7864((void (*)(uint64_t, uint64_t, _QWORD *, uint64_t))MEMORY[0x1E0C8C2F8]);
  return result;
}

Swift::Double __swiftcall MAMatrixRepresentation.mean()()
{
  Swift::Double result;

  sub_1CA0D7864((void (*)(uint64_t, uint64_t, _QWORD *, uint64_t))MEMORY[0x1E0C8C1F0]);
  return result;
}

uint64_t sub_1CA0D7864(void (*a1)(uint64_t, uint64_t, _QWORD *, uint64_t))
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t result;
  _QWORD v8[2];

  v8[1] = *MEMORY[0x1E0C80C00];
  v2 = v1[2];
  v3 = v1[3];
  v4 = v1[4];
  v8[0] = 0;
  v5 = v2 * v3;
  if ((unsigned __int128)(v2 * (__int128)v3) >> 64 != (v2 * v3) >> 63)
    __break(1u);
  if (v5 < 0)
  {
    result = sub_1CA1F11BC();
    __break(1u);
  }
  else
  {
    swift_bridgeObjectRetain();
    a1(v4 + 32, 1, v8, v5);
    return swift_bridgeObjectRelease();
  }
  return result;
}

Swift::Double _s17KnowledgeGraphKit22MAVectorRepresentationC6medianSdyF_0()
{
  return MAMatrix.median()();
}

Swift::Double __swiftcall MAMatrixRepresentation.pstddev()()
{
  Swift::Double result;

  sub_1CA0D79D4();
  return result;
}

uint64_t sub_1CA0D79D4()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  vDSP_Length v4;
  uint64_t result;
  double __StandardDeviation;
  double __Mean[2];

  __Mean[1] = *(double *)MEMORY[0x1E0C80C00];
  v1 = v0[2];
  v2 = v0[3];
  v3 = v0[4];
  __StandardDeviation = 0.0;
  __Mean[0] = 0.0;
  v4 = v1 * v2;
  if ((unsigned __int128)(v1 * (__int128)v2) >> 64 != (v1 * v2) >> 63)
    __break(1u);
  if ((v4 & 0x8000000000000000) != 0)
  {
    result = sub_1CA1F11BC();
    __break(1u);
  }
  else
  {
    swift_bridgeObjectRetain();
    vDSP_normalizeD((const double *)(v3 + 32), 1, 0, 1, __Mean, &__StandardDeviation, v4);
    return swift_bridgeObjectRelease();
  }
  return result;
}

Swift::Double _s17KnowledgeGraphKit22MAVectorRepresentationC7sstddevSdyF_0()
{
  return MAMatrix.sstddev()().deviation;
}

uint64_t _s17KnowledgeGraphKit22MAVectorRepresentationC11frequenciesSDySdSiGyF_0()
{
  return MAMatrix.frequencies()();
}

uint64_t MAMatrixRepresentation.min()()
{
  return sub_1CA0D7BE0((void (*)(uint64_t, uint64_t, _QWORD *, _QWORD *, uint64_t))MEMORY[0x1E0C8C240]);
}

uint64_t MAMatrixRepresentation.max()()
{
  return sub_1CA0D7BE0((void (*)(uint64_t, uint64_t, _QWORD *, _QWORD *, uint64_t))MEMORY[0x1E0C8C1D0]);
}

uint64_t sub_1CA0D7BE0(void (*a1)(uint64_t, uint64_t, _QWORD *, _QWORD *, uint64_t))
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  double v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t result;
  _QWORD v13[3];
  _QWORD v14[2];

  v2 = (uint64_t)v1;
  v14[1] = *MEMORY[0x1E0C80C00];
  v3 = v1[2];
  v4 = v1[3];
  v5 = v1[4];
  v13[0] = 0;
  v14[0] = 0;
  if ((unsigned __int128)(v3 * (__int128)v4) >> 64 != (v3 * v4) >> 63)
  {
    __break(1u);
    goto LABEL_6;
  }
  if (((v3 * v4) & 0x8000000000000000) == 0)
  {
    swift_bridgeObjectRetain();
    a1(v5 + 32, 1, v13, v14, v3 * v4);
    swift_bridgeObjectRelease();
    if ((v14[0] & 0x8000000000000000) == 0)
    {
      v7 = *(double *)v13;
      v13[0] = v3;
      v13[1] = v4;
      v13[2] = v5;
      v8 = MAMatrix.indices(of:)(v7);
      swift_retain();
      v9 = sub_1CA0DF510(v8, v2);
      swift_release();
      v10 = sub_1CA0C68DC(v9);
      swift_bridgeObjectRelease();
      swift_retain();
      v11 = sub_1CA0DF3D4(v8, v2);
      swift_bridgeObjectRelease();
      swift_release();
      sub_1CA0C68DC(v11);
      swift_bridgeObjectRelease();
      return v10;
    }
LABEL_6:
    __break(1u);
  }
  result = sub_1CA1F11BC();
  __break(1u);
  return result;
}

uint64_t MAMatrixRepresentation.linearDeviation(lowerBound:upperBound:inverse:)(uint64_t a1, double a2, double a3)
{
  return sub_1CA0D7DAC(a1, (uint64_t (*)(_QWORD, _QWORD, _QWORD))sub_1CA0DF8F4, a2, a3);
}

uint64_t sub_1CA0D7DAC(uint64_t result, uint64_t (*a2)(_QWORD, _QWORD, _QWORD), double a3, double a4)
{
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v10;
  int v11;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  double v20;
  BOOL v21;
  _BOOL4 v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t (*v25)(_QWORD, _QWORD, _QWORD);
  _BYTE v26[16];
  uint64_t v27;

  v5 = v4[2];
  v6 = v4[3];
  v7 = v4[4];
  v27 = MEMORY[0x1E0DEE9D8];
  v8 = v5 * v6;
  if ((unsigned __int128)(v5 * (__int128)v6) >> 64 != (v5 * v6) >> 63)
    goto LABEL_24;
  v10 = v4;
  v11 = result;
  result = swift_allocObject();
  v14 = result;
  *(_QWORD *)(result + 16) = 0;
  if (v8)
  {
    if (v8 < 1)
    {
LABEL_25:
      __break(1u);
      return result;
    }
    v25 = a2;
    swift_bridgeObjectRetain_n();
    result = swift_retain();
    v15 = 0;
    v16 = MEMORY[0x1E0DEE9D8];
    while (v15 < *(_QWORD *)(v7 + 16))
    {
      v20 = *(double *)(v7 + 8 * v15 + 32);
      v21 = v20 < a3 || v20 > a4;
      if (!v21 && (v11 & 1) == 0)
        goto LABEL_18;
      v22 = v20 > a3;
      if (v20 >= a4)
        v22 = 0;
      if (((v22 | v11 ^ 1) & 1) == 0)
      {
LABEL_18:
        result = swift_isUniquelyReferenced_nonNull_native();
        if ((result & 1) == 0)
        {
          result = sub_1CA0CD550(0, *(_QWORD *)(v16 + 16) + 1, 1);
          v16 = v27;
        }
        v18 = *(_QWORD *)(v16 + 16);
        v17 = *(_QWORD *)(v16 + 24);
        if (v18 >= v17 >> 1)
        {
          result = sub_1CA0CD550(v17 > 1, v18 + 1, 1);
          v16 = v27;
        }
        *(_QWORD *)(v16 + 16) = v18 + 1;
        v19 = v16 + 16 * v18;
        *(_QWORD *)(v19 + 32) = v15;
        *(double *)(v19 + 40) = v20;
      }
      if (v8 == ++v15)
      {
        *(_QWORD *)(v14 + 16) = v8;
        swift_bridgeObjectRelease_n();
        swift_release_n();
        v23 = v27;
        a2 = v25;
        goto LABEL_22;
      }
    }
    __break(1u);
LABEL_24:
    __break(1u);
    goto LABEL_25;
  }
  swift_release();
  v23 = MEMORY[0x1E0DEE9D8];
LABEL_22:
  swift_retain();
  v24 = a2(v23, v10, v26);
  swift_release();
  swift_release();
  return v24;
}

void MAMatrixRepresentation.linearDeviation(innerRange:)(double a1, double a2)
{
  sub_1CA0D7FD0(a1, a2, (uint64_t)&unk_1E83DF7A8, (uint64_t)sub_1CA0E1FCC, (void (*)(uint64_t, _QWORD *, _BYTE *))sub_1CA0DF8F4);
}

void sub_1CA0D7FD0(double a1, double a2, uint64_t a3, uint64_t a4, void (*a5)(uint64_t, _QWORD *, _BYTE *))
{
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v11;
  uint64_t v14;
  _QWORD *v15;
  uint64_t inited;
  uint64_t v17;
  BOOL v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  uint64_t v24;
  double v25;
  uint64_t v27;
  _BYTE v29[16];
  uint64_t v30;

  v6 = v5[2];
  v7 = v5[3];
  v8 = v5[4];
  v30 = MEMORY[0x1E0DEE9D8];
  v9 = v6 * v7;
  if ((unsigned __int128)(v6 * (__int128)v7) >> 64 != (v6 * v7) >> 63)
    goto LABEL_22;
  v11 = v5;
  v14 = swift_allocObject();
  *(_QWORD *)(v14 + 16) = 0;
  v15 = (_QWORD *)swift_allocObject();
  v15[2] = v14;
  v15[3] = v9;
  v15[4] = v6;
  v15[5] = v7;
  v15[6] = v8;
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EF937D28);
  inited = swift_initStackObject();
  *(_QWORD *)(inited + 16) = a4;
  *(_QWORD *)(inited + 24) = v15;
  v17 = *(_QWORD *)(v14 + 16);
  v27 = v6 * v7;
  v18 = __OFSUB__(v9, v17);
  v19 = v9 - v17;
  if (v19)
  {
    if ((v19 < 0) ^ v18 | (v19 == 0))
    {
LABEL_23:
      __break(1u);
      return;
    }
    swift_bridgeObjectRetain_n();
    swift_retain();
    v21 = 0;
    v20 = MEMORY[0x1E0DEE9D8];
    while ((v17 & 0x8000000000000000) == 0)
    {
      if ((unint64_t)(v17 + v21) >= *(_QWORD *)(v8 + 16))
        goto LABEL_21;
      v25 = *(double *)(v8 + 8 * v17 + 32 + 8 * v21);
      if (v25 >= a1 && v25 <= a2)
      {
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
          sub_1CA0CD550(0, *(_QWORD *)(v20 + 16) + 1, 1);
        v20 = v30;
        v23 = *(_QWORD *)(v30 + 16);
        v22 = *(_QWORD *)(v30 + 24);
        if (v23 >= v22 >> 1)
        {
          sub_1CA0CD550(v22 > 1, v23 + 1, 1);
          v20 = v30;
        }
        *(_QWORD *)(v20 + 16) = v23 + 1;
        v24 = v20 + 16 * v23;
        *(_QWORD *)(v24 + 32) = v21;
        *(double *)(v24 + 40) = v25;
      }
      if (v19 == ++v21)
      {
        *(_QWORD *)(v14 + 16) = v27;
        swift_release();
        swift_bridgeObjectRelease();
        swift_release();
        goto LABEL_19;
      }
    }
    __break(1u);
LABEL_21:
    __break(1u);
LABEL_22:
    __break(1u);
    goto LABEL_23;
  }
  swift_bridgeObjectRetain();
  swift_release();
  v20 = MEMORY[0x1E0DEE9D8];
LABEL_19:
  swift_retain();
  a5(v20, v11, v29);
  swift_release();
  swift_release();
}

void MAMatrixRepresentation.linearDeviation(outerRange:)(double a1, double a2)
{
  sub_1CA0D8230(a1, a2, (uint64_t)&unk_1E83DF7D0, (uint64_t)sub_1CA0E1FCC, (void (*)(uint64_t, _QWORD *, _BYTE *))sub_1CA0DF8F4);
}

void sub_1CA0D8230(double a1, double a2, uint64_t a3, uint64_t a4, void (*a5)(uint64_t, _QWORD *, _BYTE *))
{
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v11;
  uint64_t v14;
  _QWORD *v15;
  uint64_t inited;
  uint64_t v17;
  BOOL v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  uint64_t v24;
  double v25;
  uint64_t v27;
  _BYTE v29[16];
  uint64_t v30;

  v6 = v5[2];
  v7 = v5[3];
  v8 = v5[4];
  v30 = MEMORY[0x1E0DEE9D8];
  v9 = v6 * v7;
  if ((unsigned __int128)(v6 * (__int128)v7) >> 64 != (v6 * v7) >> 63)
    goto LABEL_22;
  v11 = v5;
  v14 = swift_allocObject();
  *(_QWORD *)(v14 + 16) = 0;
  v15 = (_QWORD *)swift_allocObject();
  v15[2] = v14;
  v15[3] = v9;
  v15[4] = v6;
  v15[5] = v7;
  v15[6] = v8;
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EF937D28);
  inited = swift_initStackObject();
  *(_QWORD *)(inited + 16) = a4;
  *(_QWORD *)(inited + 24) = v15;
  v17 = *(_QWORD *)(v14 + 16);
  v27 = v6 * v7;
  v18 = __OFSUB__(v9, v17);
  v19 = v9 - v17;
  if (v19)
  {
    if ((v19 < 0) ^ v18 | (v19 == 0))
    {
LABEL_23:
      __break(1u);
      return;
    }
    swift_bridgeObjectRetain_n();
    swift_retain();
    v21 = 0;
    v20 = MEMORY[0x1E0DEE9D8];
    while ((v17 & 0x8000000000000000) == 0)
    {
      if ((unint64_t)(v17 + v21) >= *(_QWORD *)(v8 + 16))
        goto LABEL_21;
      v25 = *(double *)(v8 + 8 * v17 + 32 + 8 * v21);
      if (v25 <= a1 || v25 >= a2)
      {
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
          sub_1CA0CD550(0, *(_QWORD *)(v20 + 16) + 1, 1);
        v20 = v30;
        v23 = *(_QWORD *)(v30 + 16);
        v22 = *(_QWORD *)(v30 + 24);
        if (v23 >= v22 >> 1)
        {
          sub_1CA0CD550(v22 > 1, v23 + 1, 1);
          v20 = v30;
        }
        *(_QWORD *)(v20 + 16) = v23 + 1;
        v24 = v20 + 16 * v23;
        *(_QWORD *)(v24 + 32) = v21;
        *(double *)(v24 + 40) = v25;
      }
      if (v19 == ++v21)
      {
        *(_QWORD *)(v14 + 16) = v27;
        swift_release();
        swift_bridgeObjectRelease();
        swift_release();
        goto LABEL_19;
      }
    }
    __break(1u);
LABEL_21:
    __break(1u);
LABEL_22:
    __break(1u);
    goto LABEL_23;
  }
  swift_bridgeObjectRetain();
  swift_release();
  v20 = MEMORY[0x1E0DEE9D8];
LABEL_19:
  swift_retain();
  a5(v20, v11, v29);
  swift_release();
  swift_release();
}

void MAMatrixRepresentation.linearDeviation(mid:innerDeviation:)(double a1, double a2)
{
  sub_1CA0D8490(a1, a2, (uint64_t)&unk_1E83DF7F8, (uint64_t)sub_1CA0E1FCC, (void (*)(uint64_t, _QWORD *, _BYTE *))sub_1CA0DF8F4);
}

void sub_1CA0D8490(double a1, double a2, uint64_t a3, uint64_t a4, void (*a5)(uint64_t, _QWORD *, _BYTE *))
{
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v11;
  uint64_t v14;
  _QWORD *v15;
  uint64_t inited;
  uint64_t v17;
  BOOL v18;
  uint64_t v19;
  uint64_t v20;
  double v21;
  double v22;
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;
  uint64_t v26;
  double v27;
  uint64_t v29;
  _BYTE v31[16];
  uint64_t v32;

  v6 = v5[2];
  v7 = v5[3];
  v8 = v5[4];
  v32 = MEMORY[0x1E0DEE9D8];
  v9 = v6 * v7;
  if ((unsigned __int128)(v6 * (__int128)v7) >> 64 != (v6 * v7) >> 63)
    goto LABEL_22;
  v11 = v5;
  v14 = swift_allocObject();
  *(_QWORD *)(v14 + 16) = 0;
  v15 = (_QWORD *)swift_allocObject();
  v15[2] = v14;
  v15[3] = v9;
  v15[4] = v6;
  v15[5] = v7;
  v15[6] = v8;
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EF937D28);
  inited = swift_initStackObject();
  *(_QWORD *)(inited + 16) = a4;
  *(_QWORD *)(inited + 24) = v15;
  v17 = *(_QWORD *)(v14 + 16);
  v29 = v6 * v7;
  v18 = __OFSUB__(v9, v17);
  v19 = v9 - v17;
  if (v19)
  {
    if ((v19 < 0) ^ v18 | (v19 == 0))
    {
LABEL_23:
      __break(1u);
      return;
    }
    v21 = a1 - a2;
    v22 = a1 + a2;
    swift_bridgeObjectRetain_n();
    swift_retain();
    v23 = 0;
    v20 = MEMORY[0x1E0DEE9D8];
    while ((v17 & 0x8000000000000000) == 0)
    {
      if ((unint64_t)(v17 + v23) >= *(_QWORD *)(v8 + 16))
        goto LABEL_21;
      v27 = *(double *)(v8 + 8 * v17 + 32 + 8 * v23);
      if (v21 <= v27 && v27 <= v22)
      {
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
          sub_1CA0CD550(0, *(_QWORD *)(v20 + 16) + 1, 1);
        v20 = v32;
        v25 = *(_QWORD *)(v32 + 16);
        v24 = *(_QWORD *)(v32 + 24);
        if (v25 >= v24 >> 1)
        {
          sub_1CA0CD550(v24 > 1, v25 + 1, 1);
          v20 = v32;
        }
        *(_QWORD *)(v20 + 16) = v25 + 1;
        v26 = v20 + 16 * v25;
        *(_QWORD *)(v26 + 32) = v23;
        *(double *)(v26 + 40) = v27;
      }
      if (v19 == ++v23)
      {
        *(_QWORD *)(v14 + 16) = v29;
        swift_release();
        swift_bridgeObjectRelease();
        swift_release();
        goto LABEL_19;
      }
    }
    __break(1u);
LABEL_21:
    __break(1u);
LABEL_22:
    __break(1u);
    goto LABEL_23;
  }
  swift_bridgeObjectRetain();
  swift_release();
  v20 = MEMORY[0x1E0DEE9D8];
LABEL_19:
  swift_retain();
  a5(v20, v11, v31);
  swift_release();
  swift_release();
}

void MAMatrixRepresentation.linearDeviation(mid:outerDeviation:)(double a1, double a2)
{
  sub_1CA0D86F8(a1, a2, (uint64_t)&unk_1E83DF820, (uint64_t)sub_1CA0E1FCC, (void (*)(uint64_t, _QWORD *, _BYTE *))sub_1CA0DF8F4);
}

void sub_1CA0D86F8(double a1, double a2, uint64_t a3, uint64_t a4, void (*a5)(uint64_t, _QWORD *, _BYTE *))
{
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v11;
  uint64_t v14;
  _QWORD *v15;
  uint64_t inited;
  uint64_t v17;
  BOOL v18;
  uint64_t v19;
  uint64_t v20;
  double v21;
  double v22;
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;
  uint64_t v26;
  double v27;
  uint64_t v29;
  _BYTE v31[16];
  uint64_t v32;

  v6 = v5[2];
  v7 = v5[3];
  v8 = v5[4];
  v32 = MEMORY[0x1E0DEE9D8];
  v9 = v6 * v7;
  if ((unsigned __int128)(v6 * (__int128)v7) >> 64 != (v6 * v7) >> 63)
    goto LABEL_22;
  v11 = v5;
  v14 = swift_allocObject();
  *(_QWORD *)(v14 + 16) = 0;
  v15 = (_QWORD *)swift_allocObject();
  v15[2] = v14;
  v15[3] = v9;
  v15[4] = v6;
  v15[5] = v7;
  v15[6] = v8;
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EF937D28);
  inited = swift_initStackObject();
  *(_QWORD *)(inited + 16) = a4;
  *(_QWORD *)(inited + 24) = v15;
  v17 = *(_QWORD *)(v14 + 16);
  v29 = v6 * v7;
  v18 = __OFSUB__(v9, v17);
  v19 = v9 - v17;
  if (v19)
  {
    if ((v19 < 0) ^ v18 | (v19 == 0))
    {
LABEL_23:
      __break(1u);
      return;
    }
    v21 = a1 - a2;
    v22 = a1 + a2;
    swift_bridgeObjectRetain_n();
    swift_retain();
    v23 = 0;
    v20 = MEMORY[0x1E0DEE9D8];
    while ((v17 & 0x8000000000000000) == 0)
    {
      if ((unint64_t)(v17 + v23) >= *(_QWORD *)(v8 + 16))
        goto LABEL_21;
      v27 = *(double *)(v8 + 8 * v17 + 32 + 8 * v23);
      if (v27 <= v21 || v22 <= v27)
      {
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
          sub_1CA0CD550(0, *(_QWORD *)(v20 + 16) + 1, 1);
        v20 = v32;
        v25 = *(_QWORD *)(v32 + 16);
        v24 = *(_QWORD *)(v32 + 24);
        if (v25 >= v24 >> 1)
        {
          sub_1CA0CD550(v24 > 1, v25 + 1, 1);
          v20 = v32;
        }
        *(_QWORD *)(v20 + 16) = v25 + 1;
        v26 = v20 + 16 * v25;
        *(_QWORD *)(v26 + 32) = v23;
        *(double *)(v26 + 40) = v27;
      }
      if (v19 == ++v23)
      {
        *(_QWORD *)(v14 + 16) = v29;
        swift_release();
        swift_bridgeObjectRelease();
        swift_release();
        goto LABEL_19;
      }
    }
    __break(1u);
LABEL_21:
    __break(1u);
LABEL_22:
    __break(1u);
    goto LABEL_23;
  }
  swift_bridgeObjectRetain();
  swift_release();
  v20 = MEMORY[0x1E0DEE9D8];
LABEL_19:
  swift_retain();
  a5(v20, v11, v31);
  swift_release();
  swift_release();
}

void MAMatrixRepresentation.linearDeviation(lowerBound:)(double a1)
{
  sub_1CA0D8960(a1, (uint64_t)&unk_1E83DF848, (uint64_t)sub_1CA0E1FCC, (void (*)(uint64_t, _QWORD *, _BYTE *))sub_1CA0DF8F4);
}

void sub_1CA0D8960(double a1, uint64_t a2, uint64_t a3, void (*a4)(uint64_t, _QWORD *, _BYTE *))
{
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v11;
  _QWORD *v12;
  uint64_t inited;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  double v21;
  uint64_t v23;
  _QWORD *v25;
  _BYTE v26[16];
  uint64_t v27;

  v5 = v4[2];
  v6 = v4[3];
  v7 = v4[4];
  v27 = MEMORY[0x1E0DEE9D8];
  v8 = v5 * v6;
  if ((unsigned __int128)(v5 * (__int128)v6) >> 64 != (v5 * v6) >> 63)
    goto LABEL_22;
  v25 = v4;
  v11 = swift_allocObject();
  *(_QWORD *)(v11 + 16) = 0;
  v12 = (_QWORD *)swift_allocObject();
  v12[2] = v11;
  v12[3] = v8;
  v12[4] = v5;
  v12[5] = v6;
  v12[6] = v7;
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EF937D28);
  inited = swift_initStackObject();
  *(_QWORD *)(inited + 16) = a3;
  *(_QWORD *)(inited + 24) = v12;
  v14 = *(_QWORD *)(v11 + 16);
  v23 = v5 * v6;
  v15 = v8 - v14;
  if (v8 != v14)
  {
    if (v8 <= v14)
    {
LABEL_23:
      __break(1u);
      return;
    }
    swift_bridgeObjectRetain_n();
    swift_retain();
    v17 = 0;
    v16 = MEMORY[0x1E0DEE9D8];
    while ((v14 & 0x8000000000000000) == 0)
    {
      if ((unint64_t)(v14 + v17) >= *(_QWORD *)(v7 + 16))
        goto LABEL_21;
      v21 = *(double *)(v7 + 8 * v14 + 32 + 8 * v17);
      if (v21 >= a1 && v21 <= INFINITY)
      {
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
          sub_1CA0CD550(0, *(_QWORD *)(v16 + 16) + 1, 1);
        v16 = v27;
        v19 = *(_QWORD *)(v27 + 16);
        v18 = *(_QWORD *)(v27 + 24);
        if (v19 >= v18 >> 1)
        {
          sub_1CA0CD550(v18 > 1, v19 + 1, 1);
          v16 = v27;
        }
        *(_QWORD *)(v16 + 16) = v19 + 1;
        v20 = v16 + 16 * v19;
        *(_QWORD *)(v20 + 32) = v17;
        *(double *)(v20 + 40) = v21;
      }
      if (v15 == ++v17)
      {
        *(_QWORD *)(v11 + 16) = v23;
        swift_release();
        swift_bridgeObjectRelease();
        swift_release();
        goto LABEL_19;
      }
    }
    __break(1u);
LABEL_21:
    __break(1u);
LABEL_22:
    __break(1u);
    goto LABEL_23;
  }
  swift_bridgeObjectRetain();
  swift_release();
  v16 = MEMORY[0x1E0DEE9D8];
LABEL_19:
  swift_retain();
  a4(v16, v25, v26);
  swift_release();
  swift_release();
}

void MAMatrixRepresentation.linearDeviation(upperBound:)(double a1)
{
  sub_1CA0D8BBC(a1, (uint64_t)&unk_1E83DF870, (uint64_t)sub_1CA0E1FCC, (void (*)(uint64_t, _QWORD *, _BYTE *))sub_1CA0DF8F4);
}

void sub_1CA0D8BBC(double a1, uint64_t a2, uint64_t a3, void (*a4)(uint64_t, _QWORD *, _BYTE *))
{
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v11;
  _QWORD *v12;
  uint64_t inited;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  double v21;
  uint64_t v23;
  _QWORD *v25;
  _BYTE v26[16];
  uint64_t v27;

  v5 = v4[2];
  v6 = v4[3];
  v7 = v4[4];
  v27 = MEMORY[0x1E0DEE9D8];
  v8 = v5 * v6;
  if ((unsigned __int128)(v5 * (__int128)v6) >> 64 != (v5 * v6) >> 63)
    goto LABEL_22;
  v25 = v4;
  v11 = swift_allocObject();
  *(_QWORD *)(v11 + 16) = 0;
  v12 = (_QWORD *)swift_allocObject();
  v12[2] = v11;
  v12[3] = v8;
  v12[4] = v5;
  v12[5] = v6;
  v12[6] = v7;
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EF937D28);
  inited = swift_initStackObject();
  *(_QWORD *)(inited + 16) = a3;
  *(_QWORD *)(inited + 24) = v12;
  v14 = *(_QWORD *)(v11 + 16);
  v23 = v5 * v6;
  v15 = v8 - v14;
  if (v8 != v14)
  {
    if (v8 <= v14)
    {
LABEL_23:
      __break(1u);
      return;
    }
    swift_bridgeObjectRetain_n();
    swift_retain();
    v17 = 0;
    v16 = MEMORY[0x1E0DEE9D8];
    while ((v14 & 0x8000000000000000) == 0)
    {
      if ((unint64_t)(v14 + v17) >= *(_QWORD *)(v7 + 16))
        goto LABEL_21;
      v21 = *(double *)(v7 + 8 * v14 + 32 + 8 * v17);
      if (v21 >= -INFINITY && v21 <= a1)
      {
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
          sub_1CA0CD550(0, *(_QWORD *)(v16 + 16) + 1, 1);
        v16 = v27;
        v19 = *(_QWORD *)(v27 + 16);
        v18 = *(_QWORD *)(v27 + 24);
        if (v19 >= v18 >> 1)
        {
          sub_1CA0CD550(v18 > 1, v19 + 1, 1);
          v16 = v27;
        }
        *(_QWORD *)(v16 + 16) = v19 + 1;
        v20 = v16 + 16 * v19;
        *(_QWORD *)(v20 + 32) = v17;
        *(double *)(v20 + 40) = v21;
      }
      if (v15 == ++v17)
      {
        *(_QWORD *)(v11 + 16) = v23;
        swift_release();
        swift_bridgeObjectRelease();
        swift_release();
        goto LABEL_19;
      }
    }
    __break(1u);
LABEL_21:
    __break(1u);
LABEL_22:
    __break(1u);
    goto LABEL_23;
  }
  swift_bridgeObjectRetain();
  swift_release();
  v16 = MEMORY[0x1E0DEE9D8];
LABEL_19:
  swift_retain();
  a4(v16, v25, v26);
  swift_release();
  swift_release();
}

uint64_t MAMatrixRepresentation.gaussianCumulative(lowerBoundPercent:upperBoundPercent:inverse:)(char a1, double a2, double a3)
{
  return sub_1CA0D8E50(a1, (double (*)(uint64_t))MAMatrixRepresentation.pstddev(), (uint64_t (*)(_QWORD, double, double, double, double))MAMatrixRepresentation.gaussianCumulative(lowerBoundPercent:upperBoundPercent:inverse:mu:sigma:), a2, a3);
}

uint64_t sub_1CA0D8E50(char a1, double (*a2)(uint64_t), uint64_t (*a3)(_QWORD, double, double, double, double), double a4, double a5)
{
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  vDSP_Length v9;
  uint64_t v15;
  double v16;
  double v17;
  uint64_t result;
  double __C[2];

  __C[1] = *(double *)MEMORY[0x1E0C80C00];
  v6 = v5[2];
  v7 = v5[3];
  v8 = v5[4];
  __C[0] = 0.0;
  v9 = v6 * v7;
  if ((unsigned __int128)(v6 * (__int128)v7) >> 64 != (v6 * v7) >> 63)
    __break(1u);
  if ((v9 & 0x8000000000000000) != 0)
  {
    result = sub_1CA1F11BC();
    __break(1u);
  }
  else
  {
    swift_bridgeObjectRetain();
    vDSP_meanvD((const double *)(v8 + 32), 1, __C, v9);
    v15 = swift_bridgeObjectRelease();
    v16 = __C[0];
    v17 = a2(v15);
    return a3(a1 & 1, a4, a5, v16, v17);
  }
  return result;
}

void MAMatrixRepresentation.gaussianCumulative(lowerBoundPercent:upperBoundPercent:inverse:mu:sigma:)(int a1, double a2, double a3, double a4, double a5)
{
  sub_1CA0D8FA0(a1, (void (*)(uint64_t, uint64_t, uint64_t, uint64_t, _BYTE *))sub_1CA0E21EC, (void (*)(uint64_t, uint64_t, _BYTE *))sub_1CA0DF8F4, a2, a3, a4, a5);
}

void sub_1CA0D8FA0(int a1, void (*a2)(uint64_t, uint64_t, uint64_t, uint64_t, _BYTE *), void (*a3)(uint64_t, uint64_t, _BYTE *), double a4, double a5, double a6, double a7)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v13;
  uint64_t v20;
  int v21;
  BOOL v22;
  char v23;
  unint64_t v24;
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;
  uint64_t v28;
  double v29;
  double v30;
  BOOL v31;
  _BOOL4 v32;
  uint64_t v33;
  uint64_t v34;
  void (*v35)(uint64_t, uint64_t, _BYTE *);
  _BYTE v36[8];
  _BYTE v37[16];
  uint64_t v38;

  v8 = v7;
  v9 = *(_QWORD *)(v7 + 16);
  v11 = *(_QWORD *)(v8 + 24);
  v10 = *(_QWORD *)(v8 + 32);
  if (a7 == 0.0)
  {
    swift_retain();
    swift_bridgeObjectRetain();
    a2(v9, v11, v10, v8, v36);
    swift_bridgeObjectRelease();
LABEL_34:
    swift_release();
    return;
  }
  v38 = MEMORY[0x1E0DEE9D8];
  v13 = v9 * v11;
  if ((unsigned __int128)(v9 * (__int128)v11) >> 64 != (v9 * v11) >> 63)
    goto LABEL_36;
  v20 = swift_allocObject();
  *(_QWORD *)(v20 + 16) = 0;
  if (!v13)
  {
    swift_release();
    v33 = MEMORY[0x1E0DEE9D8];
LABEL_33:
    swift_retain();
    a3(v33, v8, v37);
    swift_release();
    goto LABEL_34;
  }
  if (v13 < 1)
    goto LABEL_37;
  v35 = a3;
  v21 = a1 ^ 1;
  v22 = a4 < 1.0;
  if (a5 <= 1.0)
    v22 = 0;
  v23 = v22 | v21;
  swift_bridgeObjectRetain_n();
  v34 = v20;
  swift_retain();
  v24 = 0;
  v25 = MEMORY[0x1E0DEE9D8];
  while (v24 < *(_QWORD *)(v10 + 16))
  {
    v29 = *(double *)(v10 + 8 * v24 + 32);
    v30 = erfc((a6 - v29) / a7 * 0.707106781) * 0.5;
    if (v30 <= 1.0)
    {
      v31 = v30 < a4 || v30 > a5;
      if (v31 || (a1 & 1) != 0)
      {
        v32 = v30 > a4;
        if (v30 >= a5)
          v32 = 0;
        if (((v32 | v21) & 1) != 0)
          goto LABEL_12;
      }
LABEL_29:
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        sub_1CA0CD550(0, *(_QWORD *)(v25 + 16) + 1, 1);
        v25 = v38;
      }
      v27 = *(_QWORD *)(v25 + 16);
      v26 = *(_QWORD *)(v25 + 24);
      if (v27 >= v26 >> 1)
      {
        sub_1CA0CD550(v26 > 1, v27 + 1, 1);
        v25 = v38;
      }
      *(_QWORD *)(v25 + 16) = v27 + 1;
      v28 = v25 + 16 * v27;
      *(_QWORD *)(v28 + 32) = v24;
      *(double *)(v28 + 40) = v29;
      goto LABEL_12;
    }
    if (a4 <= 1.0 && a5 >= 1.0)
    {
      if (v21 & 1 | (a4 >= 1.0) | (a5 <= 1.0))
        goto LABEL_29;
    }
    else if ((v23 & 1) == 0)
    {
      goto LABEL_29;
    }
LABEL_12:
    if (v13 == ++v24)
    {
      *(_QWORD *)(v34 + 16) = v13;
      swift_bridgeObjectRelease_n();
      swift_release_n();
      v33 = v38;
      a3 = v35;
      goto LABEL_33;
    }
  }
  __break(1u);
LABEL_36:
  __break(1u);
LABEL_37:
  __break(1u);
}

unint64_t sub_1CA0D9288@<X0>(unint64_t result@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  _QWORD *v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v10;
  id v11;
  uint64_t v12;

  v8 = *(_QWORD *)(a2 + 24);
  if (v8)
  {
    v3 = a3;
    v6 = *(_QWORD *)result;
    if (*(_QWORD *)result == 0x8000000000000000 && v8 == -1)
      goto LABEL_22;
    v4 = a2;
    v7 = *(_QWORD *)(result + 8);
    v10 = *(_QWORD *)(a2 + 40);
    v5 = v6 / v8;
    if ((v10 & 0xC000000000000001) == 0)
    {
      if ((v5 & 0x8000000000000000) != 0)
      {
        __break(1u);
      }
      else if (v5 < *(_QWORD *)((v10 & 0xFFFFFFFFFFFFF8) + 0x10))
      {
        v11 = *(id *)(v10 + 8 * v5 + 32);
        goto LABEL_10;
      }
      __break(1u);
      goto LABEL_19;
    }
  }
  else
  {
    __break(1u);
  }
  v11 = (id)MEMORY[0x1CAA4A7A4](v5);
LABEL_10:
  *v3 = v11;
  v12 = *(_QWORD *)(v4 + 48);
  result = v6 - v5 * v8;
  if ((v12 & 0xC000000000000001) != 0)
  {
LABEL_19:
    result = MEMORY[0x1CAA4A7A4](result);
    goto LABEL_14;
  }
  if ((result & 0x8000000000000000) != 0)
  {
    __break(1u);
  }
  else if (result < *(_QWORD *)((v12 & 0xFFFFFFFFFFFFF8) + 0x10))
  {
    result = (unint64_t)*(id *)(v12 + 8 * result + 32);
LABEL_14:
    v3[1] = result;
    v3[2] = v7;
    return result;
  }
  __break(1u);
LABEL_22:
  __break(1u);
  return result;
}

void MAMatrixRepresentation.gaussianCumulative(innerRange:mu:sigma:)(double a1, double a2, double a3, double a4)
{
  MAMatrixRepresentation.gaussianCumulative(lowerBoundPercent:upperBoundPercent:inverse:mu:sigma:)(0, a1, a2, a3, a4);
}

void MAMatrixRepresentation.gaussianCumulative(outerRange:mu:sigma:)(double a1, double a2, double a3, double a4)
{
  MAMatrixRepresentation.gaussianCumulative(lowerBoundPercent:upperBoundPercent:inverse:mu:sigma:)(1, a1, a2, a3, a4);
}

uint64_t MAMatrixRepresentation.gaussianCumulative(mid:innerDeviation:mu:sigma:)(double a1, double a2)
{
  return sub_1CA0D6DD4(a1, a2, 0, (uint64_t (*)(double, double))MAMatrixRepresentation.gaussianCumulative(lowerBoundPercent:upperBoundPercent:inverse:mu:sigma:));
}

uint64_t MAMatrixRepresentation.gaussianCumulative(mid:outerDeviation:mu:sigma:)(double a1, double a2)
{
  return sub_1CA0D6DD4(a1, a2, 1, (uint64_t (*)(double, double))MAMatrixRepresentation.gaussianCumulative(lowerBoundPercent:upperBoundPercent:inverse:mu:sigma:));
}

void MAMatrixRepresentation.gaussianCumulative(lowerBoundPercent:mu:sigma:)(double a1, double a2, double a3)
{
  MAMatrixRepresentation.gaussianCumulative(lowerBoundPercent:upperBoundPercent:inverse:mu:sigma:)(1, a1, 1.0, a2, a3);
}

void MAMatrixRepresentation.gaussianCumulative(upperBoundPercent:mu:sigma:)(double a1, double a2, double a3)
{
  MAMatrixRepresentation.gaussianCumulative(lowerBoundPercent:upperBoundPercent:inverse:mu:sigma:)(1, 0.0, a1, a2, a3);
}

uint64_t MAMatrixRepresentation.similarityMatrix(axe:distance:identity:)(_BYTE *a1)
{
  uint64_t v1;
  unint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  __int128 v14;
  uint64_t v15;

  if (*a1 == 1)
  {
    v3 = *(_QWORD *)(v1 + 40);
    if (v3 >> 62)
    {
      swift_bridgeObjectRetain();
      v4 = sub_1CA1F1234();
      swift_bridgeObjectRelease();
    }
    else
    {
      v4 = *(_QWORD *)((v3 & 0xFFFFFFFFFFFFF8) + 0x10);
    }
    v5 = *(_QWORD *)(v1 + 48);
    if (v5 >> 62)
    {
      swift_bridgeObjectRetain();
      v6 = sub_1CA1F1234();
      swift_bridgeObjectRelease();
    }
    else
    {
      v6 = *(_QWORD *)((v5 & 0xFFFFFFFFFFFFF8) + 0x10);
    }
    if ((unsigned __int128)(v4 * (__int128)v6) >> 64 == (v4 * v6) >> 63)
    {
      *(_QWORD *)&v14 = v4;
      *((_QWORD *)&v14 + 1) = v6;
      v15 = sub_1CA0B4464(v4 * v6, 0.0);
      if (!(v5 >> 62))
        goto LABEL_16;
      goto LABEL_15;
    }
    __break(1u);
  }
  else
  {
    v5 = *(_QWORD *)(v1 + 40);
    v2 = v5 >> 62;
    if (!(v5 >> 62))
    {
      v7 = *(_QWORD *)((v5 & 0xFFFFFFFFFFFFF8) + 0x10);
      goto LABEL_11;
    }
  }
  swift_bridgeObjectRetain();
  v7 = sub_1CA1F1234();
  swift_bridgeObjectRelease();
LABEL_11:
  v8 = *(_QWORD *)(v1 + 48);
  if (v8 >> 62)
  {
    swift_bridgeObjectRetain();
    v9 = sub_1CA1F1234();
    swift_bridgeObjectRelease();
  }
  else
  {
    v9 = *(_QWORD *)((v8 & 0xFFFFFFFFFFFFF8) + 0x10);
  }
  if ((unsigned __int128)(v7 * (__int128)v9) >> 64 != (v7 * v9) >> 63)
    __break(1u);
  *(_QWORD *)&v14 = v7;
  *((_QWORD *)&v14 + 1) = v9;
  v15 = sub_1CA0B4464(v7 * v9, 0.0);
  if (v2)
  {
LABEL_15:
    swift_bridgeObjectRetain();
    sub_1CA1F1234();
    swift_bridgeObjectRelease();
  }
LABEL_16:
  v10 = sub_1CA0AB910(0, &qword_1EF937558);
  MEMORY[0x1E0C80A78](v10, v11);
  sub_1CA1F0E2C();
  type metadata accessor for MASquareMatrixRepresentation();
  v12 = swift_allocObject();
  *(_OWORD *)(v12 + 16) = v14;
  *(_QWORD *)(v12 + 32) = v15;
  *(_QWORD *)(v12 + 40) = v5;
  swift_bridgeObjectRetain();
  return v12;
}

uint64_t sub_1CA0D971C(Swift::Int a1, double *a2, char a3, char a4, uint64_t a5, uint64_t *a6)
{
  unint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  vDSP_Length v15;
  double v16;
  double v17;
  double v18;
  double v19;
  double v20;
  double v21;
  double v22;
  _QWORD *v23;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v25;
  unint64_t v26;
  uint64_t result;
  const double *v28;
  uint64_t v29;
  uint64_t v31;
  unint64_t v34;
  unint64_t v35;
  double __C[5];

  __C[3] = *(double *)MEMORY[0x1E0C80C00];
  v9 = *((_QWORD *)a2 + 5);
  if (v9 >> 62)
  {
LABEL_62:
    swift_bridgeObjectRetain();
    v26 = sub_1CA1F1234();
    swift_bridgeObjectRelease();
    v35 = v26;
    v10 = (_QWORD *)sub_1CA0B4464(v26, 0.0);
    swift_bridgeObjectRetain();
    v11 = sub_1CA1F1234();
    if (v11)
      goto LABEL_3;
LABEL_63:
    swift_bridgeObjectRelease();
    return swift_bridgeObjectRelease();
  }
  v35 = *(_QWORD *)((v9 & 0xFFFFFFFFFFFFFF8) + 0x10);
  v10 = (_QWORD *)sub_1CA0B4464(v35, 0.0);
  v11 = *(_QWORD *)((v9 & 0xFFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain();
  if (!v11)
    goto LABEL_63;
LABEL_3:
  v12 = 0;
  v34 = v9 & 0xC000000000000001;
  v28 = (const double *)v9;
  v29 = a5;
  v31 = v11;
  while (1)
  {
    if (v34)
    {
      MEMORY[0x1CAA4A7A4](v12, v9);
      swift_unknownObjectRelease();
      v13 = v12 + 1;
      if (__OFADD__(v12, 1))
        goto LABEL_55;
    }
    else
    {
      v13 = v12 + 1;
      if (__OFADD__(v12, 1))
        goto LABEL_56;
    }
    if (v12 == a1 && (a3 & 1) == 0)
      goto LABEL_36;
    v15 = *((_QWORD *)a2 + 2);
    v14 = *((_QWORD *)a2 + 3);
    v16 = a2[4];
    if (!a4)
    {
      __C[0] = 0.0;
      if ((v15 & 0x8000000000000000) != 0)
        goto LABEL_64;
      v9 = *(_QWORD *)&v16 + 32 + 8 * a1;
      a5 = *(_QWORD *)&v16 + 32 + 8 * v12;
      vDSP_dotprD((const double *)v9, v14, (const double *)a5, v14, __C, v15);
      if (v15 >> 31)
        goto LABEL_57;
      if (v14 < (uint64_t)0xFFFFFFFF80000000)
        goto LABEL_59;
      if (v14 > 0x7FFFFFFF)
        goto LABEL_61;
      cblas_dnrm2_NEWLAPACK();
      v19 = v18;
      cblas_dnrm2_NEWLAPACK();
      v21 = __C[0] / (v19 * v20);
      if (v21 > 1.0)
        v21 = 1.0;
      if (v21 > 0.0)
        v17 = v21;
      else
        v17 = 0.0;
      v9 = (unint64_t)v28;
      a5 = v29;
      goto LABEL_32;
    }
    if (a4 != 1)
      break;
    __C[0] = a2[2];
    *(_QWORD *)&__C[1] = v14;
    __C[2] = v16;
    v17 = MAMatrix.euclideanDistance(columnA:columnB:)(a1, v12);
LABEL_32:
    v11 = v31;
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) != 0)
    {
      if ((v12 & 0x8000000000000000) != 0)
        goto LABEL_47;
    }
    else
    {
      v10 = sub_1CA0B6058(v10);
      if ((v12 & 0x8000000000000000) != 0)
      {
LABEL_47:
        __break(1u);
LABEL_48:
        __break(1u);
LABEL_49:
        __break(1u);
LABEL_50:
        __break(1u);
LABEL_51:
        __break(1u);
LABEL_52:
        __break(1u);
LABEL_53:
        __break(1u);
LABEL_54:
        __break(1u);
LABEL_55:
        __break(1u);
LABEL_56:
        __break(1u);
LABEL_57:
        __break(1u);
LABEL_58:
        __break(1u);
LABEL_59:
        __break(1u);
LABEL_60:
        __break(1u);
LABEL_61:
        __break(1u);
        goto LABEL_62;
      }
    }
    if (v12 >= v10[2])
      goto LABEL_54;
    *(double *)&v10[v12 + 4] = v17;
LABEL_36:
    v12 = v13;
    os_unfair_lock_lock((os_unfair_lock_t)a5);
    if (v35 != *a6)
      goto LABEL_48;
    if (a6[1] <= a1)
      goto LABEL_49;
    v23 = (_QWORD *)a6[2];
    swift_bridgeObjectRetain();
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    a6[2] = (uint64_t)v23;
    if ((isUniquelyReferenced_nonNull_native & 1) == 0)
    {
      v23 = sub_1CA0B6058(v23);
      a6[2] = (uint64_t)v23;
    }
    if (*a6 < (uint64_t)0xFFFFFFFF80000000)
      goto LABEL_50;
    if (*a6 > 0x7FFFFFFF)
      goto LABEL_51;
    v25 = a6[1];
    if (v25 < (uint64_t)0xFFFFFFFF80000000)
      goto LABEL_52;
    if (v25 > 0x7FFFFFFF)
      goto LABEL_53;
    cblas_dcopy_NEWLAPACK();
    a6[2] = (uint64_t)v23;
    swift_bridgeObjectRelease();
    os_unfair_lock_unlock((os_unfair_lock_t)a5);
    if (v13 == v11)
      goto LABEL_63;
  }
  v9 = v15 * v14;
  if ((unsigned __int128)((uint64_t)v15 * (__int128)v14) >> 64 != (uint64_t)(v15 * v14) >> 63)
    goto LABEL_58;
  if ((v9 & 0x8000000000000000) != 0)
    goto LABEL_65;
  if (v9)
  {
    a5 = sub_1CA1F0B68();
    *(_QWORD *)(a5 + 16) = v9;
    bzero((void *)(a5 + 32), 8 * v14 * v15);
  }
  else
  {
    a5 = MEMORY[0x1E0DEE9D8];
  }
  __C[0] = 1.0;
  if ((v14 & 0x8000000000000000) == 0)
  {
    vDSP_vsmsbD((const double *)(*(_QWORD *)&v16 + 32 + 8 * a1), v14, __C, (const double *)(*(_QWORD *)&v16 + 32 + 8 * v12), v14, (double *)(a5 + 32), 1, v14);
    if (v9 >> 31)
      goto LABEL_60;
    swift_bridgeObjectRetain();
    cblas_dasum_NEWLAPACK();
    v17 = v22;
    swift_bridgeObjectRelease_n();
    v9 = (unint64_t)v28;
    a5 = v29;
    goto LABEL_32;
  }
LABEL_64:
  sub_1CA1F11BC();
  __break(1u);
LABEL_65:
  result = sub_1CA1F11BC();
  __break(1u);
  return result;
}

uint64_t sub_1CA0D9BF8(Swift::Int a1, uint64_t a2, char a3, char a4, uint64_t a5, uint64_t a6)
{
  double v8;
  unint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  Swift::Int v13;
  Swift::Int v14;
  int64_t v15;
  double v16;
  double v17;
  double v18;
  double v19;
  double v20;
  double v21;
  double v22;
  _QWORD *v23;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v25;
  unint64_t v26;
  uint64_t result;
  uint64_t v28;
  const double *v29;
  uint64_t v30;
  uint64_t v32;
  unint64_t v34;
  unint64_t v35;
  double __C[5];

  v8 = *(double *)&a2;
  __C[3] = *(double *)MEMORY[0x1E0C80C00];
  v10 = *(_QWORD *)(a2 + 48);
  if (v10 >> 62)
  {
LABEL_62:
    swift_bridgeObjectRetain();
    v26 = sub_1CA1F1234();
    swift_bridgeObjectRelease();
    v35 = v26;
    v11 = (_QWORD *)sub_1CA0B4464(v26, 0.0);
    swift_bridgeObjectRetain();
    v12 = sub_1CA1F1234();
    if (v12)
      goto LABEL_3;
LABEL_63:
    swift_bridgeObjectRelease();
    return swift_bridgeObjectRelease();
  }
  v35 = *(_QWORD *)((v10 & 0xFFFFFFFFFFFFFF8) + 0x10);
  v11 = (_QWORD *)sub_1CA0B4464(v35, 0.0);
  v12 = *(_QWORD *)((v10 & 0xFFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain();
  if (!v12)
    goto LABEL_63;
LABEL_3:
  v13 = 0;
  v34 = v10 & 0xC000000000000001;
  v28 = a5;
  v29 = (const double *)v10;
  v30 = a6;
  v32 = v12;
  while (1)
  {
    if (v34)
    {
      MEMORY[0x1CAA4A7A4](v13, v10);
      swift_unknownObjectRelease();
      v14 = v13 + 1;
      if (__OFADD__(v13, 1))
        goto LABEL_53;
    }
    else
    {
      v14 = v13 + 1;
      if (__OFADD__(v13, 1))
        goto LABEL_54;
    }
    if (v13 == a1 && (a3 & 1) == 0)
      goto LABEL_38;
    v15 = *(_QWORD *)(*(_QWORD *)&v8 + 24);
    v16 = *(double *)(*(_QWORD *)&v8 + 32);
    if (!a4)
    {
      __C[0] = 0.0;
      if ((unsigned __int128)(a1 * (__int128)v15) >> 64 != (a1 * v15) >> 63)
        goto LABEL_55;
      if ((unsigned __int128)(v13 * (__int128)v15) >> 64 != (v13 * v15) >> 63)
        goto LABEL_57;
      if (v15 < 0)
        goto LABEL_64;
      v10 = *(_QWORD *)&v16 + 32 + 8 * a1 * v15;
      vDSP_dotprD((const double *)v10, 1, (const double *)(*(_QWORD *)&v16 + 32 + 8 * v13 * v15), 1, __C, v15);
      if ((unint64_t)v15 >> 31)
        goto LABEL_59;
      cblas_dnrm2_NEWLAPACK();
      v19 = v18;
      cblas_dnrm2_NEWLAPACK();
      v21 = __C[0] / (v19 * v20);
      if (v21 > 1.0)
        v21 = 1.0;
      if (v21 > 0.0)
        v17 = v21;
      else
        v17 = 0.0;
      goto LABEL_33;
    }
    a6 = *(_QWORD *)&v8;
    v8 = *(double *)(*(_QWORD *)&v8 + 16);
    if (a4 != 1)
      break;
    __C[0] = v8;
    *(_QWORD *)&__C[1] = v15;
    __C[2] = v16;
    v17 = MAMatrix.euclideanDistance(rowA:rowB:)(a1, v13);
    v8 = *(double *)&a6;
    a6 = v30;
LABEL_34:
    v12 = v32;
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) != 0)
    {
      if (v13 < 0)
        goto LABEL_47;
    }
    else
    {
      v11 = sub_1CA0B6058(v11);
      if (v13 < 0)
      {
LABEL_47:
        __break(1u);
LABEL_48:
        __break(1u);
LABEL_49:
        __break(1u);
LABEL_50:
        __break(1u);
LABEL_51:
        __break(1u);
LABEL_52:
        __break(1u);
LABEL_53:
        __break(1u);
LABEL_54:
        __break(1u);
LABEL_55:
        __break(1u);
LABEL_56:
        __break(1u);
LABEL_57:
        __break(1u);
LABEL_58:
        __break(1u);
LABEL_59:
        __break(1u);
LABEL_60:
        __break(1u);
LABEL_61:
        __break(1u);
        goto LABEL_62;
      }
    }
    if ((unint64_t)v13 >= v11[2])
      goto LABEL_52;
    *(double *)&v11[v13 + 4] = v17;
LABEL_38:
    v13 = v14;
    os_unfair_lock_lock((os_unfair_lock_t)a5);
    if (v35 != *(_QWORD *)(a6 + 8))
      goto LABEL_48;
    v23 = *(_QWORD **)(a6 + 16);
    swift_bridgeObjectRetain();
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    *(_QWORD *)(a6 + 16) = v23;
    if ((isUniquelyReferenced_nonNull_native & 1) == 0)
    {
      v23 = sub_1CA0B6058(v23);
      *(_QWORD *)(a6 + 16) = v23;
    }
    v25 = *(_QWORD *)(a6 + 8);
    if (v25 < (uint64_t)0xFFFFFFFF80000000)
      goto LABEL_49;
    if (v25 > 0x7FFFFFFF)
      goto LABEL_50;
    if ((unsigned __int128)(a1 * (__int128)v25) >> 64 != (a1 * v25) >> 63)
      goto LABEL_51;
    cblas_dcopy_NEWLAPACK();
    *(_QWORD *)(a6 + 16) = v23;
    swift_bridgeObjectRelease();
    os_unfair_lock_unlock((os_unfair_lock_t)a5);
    if (v14 == v12)
      goto LABEL_63;
  }
  v10 = *(_QWORD *)&v8 * v15;
  if ((unsigned __int128)(*(uint64_t *)&v8 * (__int128)v15) >> 64 != (*(_QWORD *)&v8 * v15) >> 63)
    goto LABEL_56;
  if ((v10 & 0x8000000000000000) != 0)
    goto LABEL_65;
  if (v10)
  {
    a5 = sub_1CA1F0B68();
    *(_QWORD *)(a5 + 16) = v10;
    bzero((void *)(a5 + 32), 8 * v15 * *(_QWORD *)&v8);
  }
  else
  {
    a5 = MEMORY[0x1E0DEE9D8];
  }
  v8 = *(double *)&a6;
  __C[0] = 1.0;
  a6 = v30;
  if ((unsigned __int128)(a1 * (__int128)v15) >> 64 != (a1 * v15) >> 63)
    goto LABEL_58;
  if ((unsigned __int128)(v13 * (__int128)v15) >> 64 != (v13 * v15) >> 63)
    goto LABEL_60;
  if ((v15 & 0x8000000000000000) == 0)
  {
    vDSP_vsmsbD((const double *)(*(_QWORD *)&v16 + 32 + 8 * a1 * v15), 1, __C, (const double *)(*(_QWORD *)&v16 + 32 + 8 * v13 * v15), 1, (double *)(a5 + 32), 1, v15);
    if (v10 >> 31)
      goto LABEL_61;
    swift_bridgeObjectRetain();
    cblas_dasum_NEWLAPACK();
    v17 = v22;
    swift_bridgeObjectRelease_n();
    a5 = v28;
LABEL_33:
    v10 = (unint64_t)v29;
    goto LABEL_34;
  }
LABEL_64:
  sub_1CA1F11BC();
  __break(1u);
LABEL_65:
  result = sub_1CA1F11BC();
  __break(1u);
  return result;
}

uint64_t MAMatrixRepresentation.description.getter()
{
  _QWORD *v0;
  uint64_t v1;
  unint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  id v7;
  void *v8;
  id v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  id v13;
  void *v14;
  id v15;
  vDSP_Length v16;
  const double *v17;
  double v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  double v22;
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;
  uint64_t result;
  int64_t v27;
  double v28;
  uint64_t v29;
  vDSP_Length __I;
  uint64_t __C;
  unint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  unint64_t v36;
  unint64_t v37;
  uint64_t v38;

  v38 = *MEMORY[0x1E0C80C00];
  sub_1CA1F1054();
  swift_bridgeObjectRelease();
  __C = 0xD00000000000001ALL;
  v32 = 0x80000001CA207250;
  v36 = v0[2];
  v1 = v36;
  sub_1CA1F12AC();
  sub_1CA1F0A3C();
  swift_bridgeObjectRelease();
  sub_1CA1F0A3C();
  v2 = v0[3];
  sub_1CA1F12AC();
  sub_1CA1F0A3C();
  swift_bridgeObjectRelease();
  sub_1CA1F0A3C();
  v36 = 0xD00000000000001ALL;
  v37 = 0x80000001CA207250;
  v34 = 10;
  v35 = 0xE100000000000000;
  v3 = v0[4];
  __C = v1;
  v32 = v2;
  v33 = v3;
  MAMatrix.description(integerPrecision:doublePrecision:)(5, 5);
  sub_1CA1F0A3C();
  swift_bridgeObjectRelease();
  sub_1CA1F0A3C();
  swift_bridgeObjectRelease();
  sub_1CA1F0A3C();
  v4 = v0[5];
  v27 = v2;
  v28 = *(double *)&v1;
  if (v4 >> 62)
  {
    swift_bridgeObjectRetain();
    v5 = sub_1CA1F1234();
    if (!v5)
      goto LABEL_10;
  }
  else
  {
    v5 = *(_QWORD *)((v4 & 0xFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain();
    if (!v5)
      goto LABEL_10;
  }
  if (v5 < 1)
  {
LABEL_27:
    __break(1u);
LABEL_28:
    __break(1u);
  }
  v6 = 0;
  do
  {
    if ((v4 & 0xC000000000000001) != 0)
      v7 = (id)MEMORY[0x1CAA4A7A4](v6, v4);
    else
      v7 = *(id *)(v4 + 8 * v6 + 32);
    v8 = v7;
    ++v6;
    __C = 2314;
    v32 = 0xE200000000000000;
    v9 = objc_msgSend(v7, sel_visualString);
    sub_1CA1F0A0C();

    sub_1CA1F0A3C();
    swift_bridgeObjectRelease();
    sub_1CA1F0A3C();

    swift_bridgeObjectRelease();
  }
  while (v5 != v6);
LABEL_10:
  swift_bridgeObjectRelease();
  sub_1CA1F0A3C();
  v10 = *(_QWORD *)(v29 + 48);
  if (v10 >> 62)
  {
    swift_bridgeObjectRetain();
    v11 = sub_1CA1F1234();
    if (!v11)
      goto LABEL_19;
  }
  else
  {
    v11 = *(_QWORD *)((v10 & 0xFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain();
    if (!v11)
      goto LABEL_19;
  }
  if (v11 < 1)
    goto LABEL_28;
  v12 = 0;
  do
  {
    if ((v10 & 0xC000000000000001) != 0)
      v13 = (id)MEMORY[0x1CAA4A7A4](v12, v10);
    else
      v13 = *(id *)(v10 + 8 * v12 + 32);
    v14 = v13;
    ++v12;
    __C = 2314;
    v32 = 0xE200000000000000;
    v15 = objc_msgSend(v13, sel_visualString);
    sub_1CA1F0A0C();

    sub_1CA1F0A3C();
    swift_bridgeObjectRelease();
    sub_1CA1F0A3C();

    swift_bridgeObjectRelease();
  }
  while (v11 != v12);
LABEL_19:
  swift_bridgeObjectRelease();
  sub_1CA1F0A3C();
  v32 = 0xE000000000000000;
  sub_1CA1F1054();
  v34 = 0;
  v35 = 0xE000000000000000;
  sub_1CA1F0A3C();
  __I = 0;
  __C = 0;
  v16 = *(_QWORD *)&v28 * v27;
  if ((unsigned __int128)(*(uint64_t *)&v28 * (__int128)v27) >> 64 != (*(_QWORD *)&v28 * v27) >> 63)
  {
    __break(1u);
    goto LABEL_25;
  }
  if ((v16 & 0x8000000000000000) == 0)
  {
    v17 = (const double *)(v3 + 32);
    swift_bridgeObjectRetain();
    vDSP_minviD((const double *)(v3 + 32), 1, (double *)&__C, &__I, v16);
    swift_bridgeObjectRelease();
    if ((__I & 0x8000000000000000) == 0)
    {
      v18 = *(double *)&__C;
      __C = *(_QWORD *)&v28;
      v32 = v27;
      v33 = v3;
      v19 = MAMatrix.indices(of:)(v18);
      swift_retain();
      v20 = sub_1CA0DF510(v19, v29);
      swift_release();
      sub_1CA0C68DC(v20);
      swift_bridgeObjectRelease();
      swift_retain();
      v21 = sub_1CA0DF3D4(v19, v29);
      swift_bridgeObjectRelease();
      swift_release();
      sub_1CA0C68DC(v21);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      sub_1CA1F0C7C();
      sub_1CA1F0A3C();
      __I = 0;
      __C = 0;
      swift_bridgeObjectRetain();
      vDSP_maxviD(v17, 1, (double *)&__C, &__I, v16);
      swift_bridgeObjectRelease();
      if ((__I & 0x8000000000000000) == 0)
      {
        v22 = *(double *)&__C;
        __C = *(_QWORD *)&v28;
        v32 = v27;
        v33 = v3;
        v23 = MAMatrix.indices(of:)(v22);
        swift_retain();
        v24 = sub_1CA0DF510(v23, v29);
        swift_release();
        sub_1CA0C68DC(v24);
        swift_bridgeObjectRelease();
        swift_retain();
        v25 = sub_1CA0DF3D4(v23, v29);
        swift_bridgeObjectRelease();
        swift_release();
        sub_1CA0C68DC(v25);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        sub_1CA1F0C7C();
        sub_1CA1F0A3C();
        __C = 0;
        swift_bridgeObjectRetain();
        vDSP_meanvD(v17, 1, (double *)&__C, v16);
        swift_bridgeObjectRelease();
        sub_1CA1F0C7C();
        sub_1CA1F0A3C();
        __C = *(_QWORD *)&v28;
        v32 = v27;
        v33 = v3;
        MAMatrix.median()();
        sub_1CA1F0C7C();
        sub_1CA1F0A3C();
        MAMatrixRepresentation.pstddev()();
        sub_1CA1F0C7C();
        sub_1CA1F0A3C();
        __C = *(_QWORD *)&v28;
        v32 = v27;
        v33 = v3;
        MAMatrix.sstddev()();
        sub_1CA1F0C7C();
        sub_1CA1F0A3C();
        swift_bridgeObjectRelease();
        return v36;
      }
      goto LABEL_26;
    }
LABEL_25:
    __break(1u);
LABEL_26:
    __break(1u);
    goto LABEL_27;
  }
  result = sub_1CA1F11BC();
  __break(1u);
  return result;
}

uint64_t sub_1CA0DA8D8()
{
  return MAMatrixRepresentation.description.getter();
}

void sub_1CA0DA900(int64_t a1, int64_t a2)
{
  int64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int64_t v10;
  double *v11;
  unint64_t v12;
  id v13;
  void *v14;
  int64_t v15;
  char v16;
  char v17;
  uint64_t v18;
  double v19;
  double v20;
  double v21;
  double v22;
  double v23;
  id v24;
  double v25;
  double v26;
  void *v27;
  id v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  double *v32;
  int64_t v33;
  uint64_t v34;
  double *v35;
  uint64_t v36;
  int64_t v37;
  uint64_t v38;

  v7 = v3;
  v10 = *(_QWORD *)(v7 + 40);
  if ((unint64_t)v10 >> 62)
    goto LABEL_62;
  v11 = *(double **)((v10 & 0xFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain();
  if (!v11)
  {
LABEL_31:
    swift_bridgeObjectRelease();
    return;
  }
  while (1)
  {
    v12 = v10 & 0xC000000000000001;
    v29 = a2;
    if ((v10 & 0xC000000000000001) != 0)
    {
      v13 = (id)MEMORY[0x1CAA4A7A4](0, v10);
    }
    else
    {
      if (!*(_QWORD *)((v10 & 0xFFFFFFFFFFFFF8) + 0x10))
      {
        __break(1u);
LABEL_69:
        __break(1u);
LABEL_70:
        __break(1u);
LABEL_71:
        v7 = (uint64_t)sub_1CA0B6058((_QWORD *)v7);
LABEL_10:
        if (a1 >= (uint64_t)0xFFFFFFFF80000000)
        {
          if (a1 <= 0x7FFFFFFF)
          {
            if ((unsigned __int128)(v2 * (__int128)a1) >> 64 == (v2 * a1) >> 63)
            {
              cblas_dcopy_NEWLAPACK();
              swift_bridgeObjectRelease();
              v33 = 1;
              v34 = a1;
              v35 = (double *)v7;
              swift_bridgeObjectRetain();
              v11 = (double *)sub_1CA0B4464(a1, 0.0);
              if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
                goto LABEL_79;
              goto LABEL_14;
            }
LABEL_77:
            __break(1u);
            goto LABEL_78;
          }
          goto LABEL_75;
        }
        __break(1u);
LABEL_73:
        v7 = (uint64_t)sub_1CA0B6058((_QWORD *)v7);
        goto LABEL_36;
      }
      v13 = *(id *)(v10 + 32);
    }
    v14 = v13;
    a2 = sub_1CA0AB910(0, (unint64_t *)&qword_1EF93A320);
    v5 = sub_1CA1F0E68();

    v2 = 0;
    if ((v5 & 1) != 0)
      goto LABEL_7;
    if (v11 == (double *)1)
      goto LABEL_31;
    if (v12)
    {
      v24 = (id)MEMORY[0x1CAA4A7A4](1, v10);
    }
    else
    {
      if (*(_QWORD *)((v10 & 0xFFFFFFFFFFFFF8) + 0x10) < 2uLL)
        goto LABEL_102;
      v24 = *(id *)(v10 + 40);
    }
    v27 = v24;
    v5 = sub_1CA1F0E68();

    if ((v5 & 1) != 0)
      break;
    v4 = 1;
    while (1)
    {
      v2 = v4 + 1;
      if (__OFADD__(v4, 1))
        break;
      if ((double *)v2 == v11)
        goto LABEL_31;
      if (v12)
      {
        v28 = (id)MEMORY[0x1CAA4A7A4](v4 + 1, v10);
      }
      else
      {
        if (v2 < 0)
          goto LABEL_69;
        if ((unint64_t)v2 >= *(_QWORD *)((v10 & 0xFFFFFFFFFFFFFF8) + 0x10))
          goto LABEL_70;
        v28 = *(id *)(v10 + 32 + 8 * v2);
      }
      v5 = (uint64_t)v28;
      v6 = sub_1CA1F0E68();

      ++v4;
      if ((v6 & 1) != 0)
        goto LABEL_7;
    }
    __break(1u);
LABEL_62:
    if (v10 < 0)
      v2 = v10;
    else
      v2 = v10 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain();
    v11 = (double *)sub_1CA1F1234();
    if (!v11)
      goto LABEL_31;
  }
  v2 = 1;
LABEL_7:
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  sub_1CA0C8364(v29, v10);
  a2 = v15;
  v17 = v16;
  swift_bridgeObjectRelease();
  if ((v17 & 1) != 0)
    return;
  if (*(_BYTE *)(v7 + 48) == 1)
  {
    v10 = *(_QWORD *)(v7 + 16);
    a1 = *(_QWORD *)(v7 + 24);
    v4 = *(_QWORD *)(v7 + 32);
    swift_bridgeObjectRetain();
    v7 = sub_1CA0B4464(a1, 0.0);
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) != 0)
      goto LABEL_10;
    goto LABEL_71;
  }
  v10 = *(_QWORD *)(v7 + 16);
  a1 = *(_QWORD *)(v7 + 24);
  v4 = *(_QWORD *)(v7 + 32);
  swift_bridgeObjectRetain();
  v7 = sub_1CA0B4464(a1, 0.0);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    goto LABEL_73;
LABEL_36:
  if (a1 < (uint64_t)0xFFFFFFFF80000000)
  {
    __break(1u);
LABEL_75:
    __break(1u);
    goto LABEL_76;
  }
  if (a1 > 0x7FFFFFFF)
  {
LABEL_76:
    __break(1u);
    goto LABEL_77;
  }
  if ((unsigned __int128)(v2 * (__int128)a1) >> 64 == (v2 * a1) >> 63)
  {
    v5 = v4 + 32;
    cblas_dcopy_NEWLAPACK();
    swift_bridgeObjectRelease();
    v36 = 1;
    v37 = a1;
    v38 = v7;
    swift_bridgeObjectRetain();
    v2 = sub_1CA0B4464(v10, 0.0);
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) != 0)
      goto LABEL_40;
    goto LABEL_81;
  }
LABEL_78:
  __break(1u);
LABEL_79:
  v11 = (double *)sub_1CA0B6058(v11);
LABEL_14:
  if ((unsigned __int128)(a2 * (__int128)a1) >> 64 == (a2 * a1) >> 63)
  {
    cblas_dcopy_NEWLAPACK();
    swift_bridgeObjectRelease();
    v30 = 1;
    v31 = a1;
    v32 = v11;
    * infix(_:_:)(&v33, (vDSP_Length *)&v30, &v36);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v5 = v36;
    v6 = v37;
    v7 = v38;
    swift_bridgeObjectRetain();
    v11 = (double *)sub_1CA0B4464(v10, 0.0);
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) != 0)
      goto LABEL_16;
    goto LABEL_83;
  }
  __break(1u);
LABEL_81:
  v2 = (int64_t)sub_1CA0B6058((_QWORD *)v2);
LABEL_40:
  if (v10 < (uint64_t)0xFFFFFFFF80000000)
  {
    __break(1u);
LABEL_83:
    v11 = (double *)sub_1CA0B6058(v11);
LABEL_16:
    if (v10 >= (uint64_t)0xFFFFFFFF80000000)
    {
      if (v10 <= 0x7FFFFFFF)
      {
        cblas_dcopy_NEWLAPACK();
        swift_bridgeObjectRelease();
        v33 = v10;
        v34 = 1;
        v35 = v11;
        swift_bridgeObjectRetain();
        a2 = sub_1CA0B4464(v10, 0.0);
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
          goto LABEL_90;
        goto LABEL_19;
      }
LABEL_86:
      __break(1u);
      goto LABEL_87;
    }
    __break(1u);
LABEL_85:
    __break(1u);
    goto LABEL_86;
  }
  if (v10 > 0x7FFFFFFF)
    goto LABEL_85;
  v11 = (double *)(v2 + 32);
  cblas_dcopy_NEWLAPACK();
  swift_bridgeObjectRelease();
  a2 = sub_1CA0B4464(v10, 0.0);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) != 0)
  {
    if ((v10 & 0x8000000000000000) == 0)
      goto LABEL_44;
LABEL_94:
    sub_1CA1F11BC();
    __break(1u);
LABEL_95:
    __break(1u);
LABEL_96:
    __break(1u);
LABEL_97:
    __break(1u);
    goto LABEL_98;
  }
LABEL_87:
  a2 = (int64_t)sub_1CA0B6058((_QWORD *)a2);
  if (v10 < 0)
    goto LABEL_94;
LABEL_44:
  v4 = 1;
  vDSP_mtransD(v11, 1, (double *)(a2 + 32), 1, 1uLL, v10);
  swift_bridgeObjectRelease();
  v33 = 1;
  v34 = v10;
  v35 = (double *)a2;
  ⋅ infix(_:_:)(&v36, &v33);
  v26 = v25;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if ((~*(_QWORD *)&v26 & 0x7FF0000000000000) != 0)
  {
    if (v26 > -9.22337204e18)
    {
      if (v26 < 9.22337204e18)
        return;
      goto LABEL_96;
    }
LABEL_92:
    __break(1u);
    goto LABEL_93;
  }
  __break(1u);
LABEL_90:
  a2 = (int64_t)sub_1CA0B6058((_QWORD *)a2);
LABEL_19:
  cblas_dcopy_NEWLAPACK();
  swift_bridgeObjectRelease();
  v30 = v10;
  v31 = 1;
  v32 = (double *)a2;
  * infix(_:_:)(&v33, (vDSP_Length *)&v30, &v36);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v2 = v36;
  a2 = v37;
  if ((unsigned __int128)(v37 * (__int128)v36) >> 64 != (v37 * v36) >> 63)
  {
    __break(1u);
    goto LABEL_92;
  }
  v4 = v38;
  v10 = sub_1CA0B4464(v37 * v36, 0.0);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) != 0)
  {
    if (a2 < 0)
      goto LABEL_94;
  }
  else
  {
LABEL_93:
    v10 = (int64_t)sub_1CA0B6058((_QWORD *)v10);
    if (a2 < 0)
      goto LABEL_94;
  }
  if (v2 < 0)
    goto LABEL_94;
  vDSP_mtransD((const double *)(v4 + 32), 1, (double *)(v10 + 32), 1, a2, v2);
  swift_bridgeObjectRelease();
  v33 = v5;
  v34 = v6;
  v35 = (double *)v7;
  v30 = a2;
  v31 = v2;
  v32 = (double *)v10;
  - infix(_:_:)(&v33, &v30, &v36);
  v18 = v36 * v37;
  if ((unsigned __int128)(v36 * (__int128)v37) >> 64 != (v36 * v37) >> 63)
    goto LABEL_95;
  if (v18 < (uint64_t)0xFFFFFFFF80000000)
    goto LABEL_97;
  if (v18 > 0x7FFFFFFF)
  {
LABEL_98:
    __break(1u);
    goto LABEL_99;
  }
  cblas_dasum_NEWLAPACK();
  v20 = v19;
  swift_bridgeObjectRelease();
  v36 = v5;
  v37 = v6;
  v38 = v7;
  v33 = a2;
  v34 = v2;
  v35 = (double *)v10;
  ⋅ infix(_:_:)(&v36, &v33);
  v22 = v21;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v23 = v20 + v22;
  if ((~COERCE__INT64(v20 + v22) & 0x7FF0000000000000) == 0)
  {
LABEL_99:
    __break(1u);
    goto LABEL_100;
  }
  if (v23 <= -9.22337204e18)
  {
LABEL_100:
    __break(1u);
    goto LABEL_101;
  }
  if (v23 < 9.22337204e18)
    return;
LABEL_101:
  __break(1u);
LABEL_102:
  __break(1u);
}

uint64_t sub_1CA0DB0D4(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  double *v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char v11;
  char v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char v16;
  char v17;
  int64_t v18;
  int64_t v19;
  double *v20;
  int64_t v21;
  uint64_t v22;
  __int128 v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t result;
  uint64_t v31;
  int64_t v32;
  uint64_t v33;
  double *v34;
  int64_t v35;
  uint64_t v36;
  double *v37;
  __int128 v38;
  int64_t v39;

  v5 = v2;
  v8 = *(_QWORD *)(v5 + 40);
  swift_bridgeObjectRetain();
  sub_1CA0C8364(a1, v8);
  v10 = v9;
  v12 = v11;
  swift_bridgeObjectRelease();
  v13 = 0;
  if ((v12 & 1) != 0)
    return v13;
  swift_bridgeObjectRetain();
  sub_1CA0C8364(a2, v8);
  v15 = v14;
  v17 = v16;
  swift_bridgeObjectRelease();
  if ((v17 & 1) != 0)
    return 0;
  if (*(_BYTE *)(v5 + 48) == 1)
  {
    v18 = *(_QWORD *)(v5 + 16);
    v19 = *(_QWORD *)(v5 + 24);
    v20 = *(double **)(v5 + 32);
    swift_bridgeObjectRetain();
    v21 = sub_1CA0B4464(v19, 0.0);
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      v21 = (int64_t)sub_1CA0B6058((_QWORD *)v21);
    if (v19 >= (uint64_t)0xFFFFFFFF80000000)
    {
      if (v19 <= 0x7FFFFFFF)
      {
        if ((unsigned __int128)(v10 * (__int128)v19) >> 64 == (v10 * v19) >> 63)
        {
          cblas_dcopy_NEWLAPACK();
          swift_bridgeObjectRelease();
          v35 = 1;
          v36 = v19;
          v37 = (double *)v21;
          swift_bridgeObjectRetain();
          v3 = (double *)sub_1CA0B4464(v19, 0.0);
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) != 0)
          {
LABEL_10:
            if ((unsigned __int128)(v15 * (__int128)v19) >> 64 == (v15 * v19) >> 63)
            {
              cblas_dcopy_NEWLAPACK();
              swift_bridgeObjectRelease();
              v32 = 1;
              v33 = v19;
              v34 = v3;
              * infix(_:_:)(&v35, (vDSP_Length *)&v32, (int64_t *)&v38);
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              v4 = *((_QWORD *)&v38 + 1);
              v31 = v38;
              v21 = v39;
              swift_bridgeObjectRetain();
              v3 = (double *)sub_1CA0B4464(v18, 0.0);
              if ((swift_isUniquelyReferenced_nonNull_native() & 1) != 0)
                goto LABEL_12;
              goto LABEL_44;
            }
            __break(1u);
            goto LABEL_42;
          }
LABEL_40:
          v3 = (double *)sub_1CA0B6058(v3);
          goto LABEL_10;
        }
        goto LABEL_38;
      }
      goto LABEL_36;
    }
    __break(1u);
  }
  else
  {
    v18 = *(_QWORD *)(v5 + 16);
    v21 = *(_QWORD *)(v5 + 24);
    v19 = *(_QWORD *)(v5 + 32);
    swift_bridgeObjectRetain();
    v20 = (double *)sub_1CA0B4464(v21, 0.0);
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) != 0)
      goto LABEL_23;
  }
  v20 = (double *)sub_1CA0B6058(v20);
LABEL_23:
  if (v21 < (uint64_t)0xFFFFFFFF80000000)
  {
    __break(1u);
LABEL_36:
    __break(1u);
    goto LABEL_37;
  }
  if (v21 > 0x7FFFFFFF)
  {
LABEL_37:
    __break(1u);
LABEL_38:
    __break(1u);
    goto LABEL_39;
  }
  if ((unsigned __int128)(v10 * (__int128)v21) >> 64 != (v10 * v21) >> 63)
  {
LABEL_39:
    __break(1u);
    goto LABEL_40;
  }
  cblas_dcopy_NEWLAPACK();
  swift_bridgeObjectRelease();
  v35 = 1;
  v36 = v21;
  v37 = v20;
  swift_bridgeObjectRetain();
  v10 = sub_1CA0B4464(v18, 0.0);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
LABEL_42:
    v10 = (uint64_t)sub_1CA0B6058((_QWORD *)v10);
  if (v18 >= (uint64_t)0xFFFFFFFF80000000)
  {
    if (v18 <= 0x7FFFFFFF)
    {
      v3 = (double *)(v10 + 32);
      cblas_dcopy_NEWLAPACK();
      swift_bridgeObjectRelease();
      v15 = sub_1CA0B4464(v18, 0.0);
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) != 0)
      {
        if (v18 < 0)
          goto LABEL_52;
LABEL_31:
        vDSP_mtransD(v3, 1, (double *)(v15 + 32), 1, 1uLL, v18);
        swift_bridgeObjectRelease();
        v32 = 1;
        v33 = v18;
        v34 = (double *)v15;
        * infix(_:_:)(&v35, (vDSP_Length *)&v32, (int64_t *)&v38);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        v28 = MAMatrix.indices(of:)(1.0);
        swift_bridgeObjectRelease();
        swift_retain();
        v29 = sub_1CA0DF648(v28, v5);
        swift_bridgeObjectRelease();
        swift_release();
        v13 = sub_1CA0C68DC(v29);
        swift_bridgeObjectRelease();
        return v13;
      }
LABEL_48:
      v15 = (uint64_t)sub_1CA0B6058((_QWORD *)v15);
      if (v18 < 0)
        goto LABEL_52;
      goto LABEL_31;
    }
    goto LABEL_46;
  }
  __break(1u);
LABEL_44:
  v3 = (double *)sub_1CA0B6058(v3);
LABEL_12:
  if (v18 < (uint64_t)0xFFFFFFFF80000000)
  {
    __break(1u);
LABEL_46:
    __break(1u);
    goto LABEL_47;
  }
  if (v18 > 0x7FFFFFFF)
  {
LABEL_47:
    __break(1u);
    goto LABEL_48;
  }
  cblas_dcopy_NEWLAPACK();
  swift_bridgeObjectRelease();
  v35 = v18;
  v36 = 1;
  v37 = v3;
  swift_bridgeObjectRetain();
  v22 = sub_1CA0B4464(v18, 0.0);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    v22 = (uint64_t)sub_1CA0B6058((_QWORD *)v22);
  cblas_dcopy_NEWLAPACK();
  swift_bridgeObjectRelease();
  v32 = v18;
  v33 = 1;
  v34 = (double *)v22;
  * infix(_:_:)(&v35, (vDSP_Length *)&v32, (int64_t *)&v38);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v23 = v38;
  if ((unsigned __int128)(*((uint64_t *)&v38 + 1) * (__int128)(uint64_t)v38) >> 64 == (uint64_t)(*((_QWORD *)&v38 + 1)
                                                                                             * v38) >> 63)
  {
    v22 = v39;
    v19 = sub_1CA0B4464(*((_QWORD *)&v38 + 1) * v38, 0.0);
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) != 0)
    {
      if ((*((_QWORD *)&v23 + 1) & 0x8000000000000000) != 0)
        goto LABEL_52;
      goto LABEL_19;
    }
  }
  else
  {
    __break(1u);
  }
  v19 = (int64_t)sub_1CA0B6058((_QWORD *)v19);
  if ((*((_QWORD *)&v23 + 1) & 0x8000000000000000) != 0)
    goto LABEL_52;
LABEL_19:
  if ((v23 & 0x8000000000000000) == 0)
  {
    vDSP_mtransD((const double *)(v22 + 32), 1, (double *)(v19 + 32), 1, *((vDSP_Length *)&v23 + 1), v23);
    swift_bridgeObjectRelease();
    v35 = MEMORY[0x1E0DEE9E8];
    *(_QWORD *)&v38 = v31;
    *((_QWORD *)&v38 + 1) = v4;
    v39 = v21;
    v24 = MAMatrix.indices(of:)(1.0);
    swift_bridgeObjectRelease();
    swift_retain();
    v25 = sub_1CA0DF648(v24, v5);
    swift_bridgeObjectRelease();
    swift_release();
    sub_1CA0E2470(v25);
    swift_bridgeObjectRelease();
    *(_QWORD *)&v38 = *((_QWORD *)&v23 + 1);
    *((_QWORD *)&v38 + 1) = v23;
    v39 = v19;
    v26 = MAMatrix.indices(of:)(1.0);
    swift_bridgeObjectRelease();
    swift_retain();
    v27 = sub_1CA0DF648(v26, v5);
    swift_bridgeObjectRelease();
    swift_release();
    sub_1CA0E2470(v27);
    swift_bridgeObjectRelease();
    return v35;
  }
LABEL_52:
  result = sub_1CA1F11BC();
  __break(1u);
  return result;
}

uint64_t sub_1CA0DB74C(uint64_t result)
{
  uint64_t v1;
  int64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  int64_t v7;
  unint64_t v8;
  unint64_t v9;
  int64_t v10;
  unint64_t v11;
  int64_t v12;
  uint64_t v13;

  v1 = result;
  v2 = 0;
  v3 = result + 56;
  v4 = 1 << *(_BYTE *)(result + 32);
  v5 = -1;
  if (v4 < 64)
    v5 = ~(-1 << v4);
  v6 = v5 & *(_QWORD *)(result + 56);
  v7 = (unint64_t)(v4 + 63) >> 6;
  while (1)
  {
    if (v6)
    {
      v8 = __clz(__rbit64(v6));
      v6 &= v6 - 1;
      v9 = v8 | (v2 << 6);
      goto LABEL_5;
    }
    v10 = v2 + 1;
    if (__OFADD__(v2, 1))
    {
      __break(1u);
      goto LABEL_25;
    }
    if (v10 >= v7)
      return swift_release();
    v11 = *(_QWORD *)(v3 + 8 * v10);
    ++v2;
    if (!v11)
    {
      v2 = v10 + 1;
      if (v10 + 1 >= v7)
        return swift_release();
      v11 = *(_QWORD *)(v3 + 8 * v2);
      if (!v11)
      {
        v2 = v10 + 2;
        if (v10 + 2 >= v7)
          return swift_release();
        v11 = *(_QWORD *)(v3 + 8 * v2);
        if (!v11)
        {
          v2 = v10 + 3;
          if (v10 + 3 >= v7)
            return swift_release();
          v11 = *(_QWORD *)(v3 + 8 * v2);
          if (!v11)
            break;
        }
      }
    }
LABEL_22:
    v6 = (v11 - 1) & v11;
    v9 = __clz(__rbit64(v11)) + (v2 << 6);
LABEL_5:
    result = sub_1CA0BE3A0(&v13, *(_QWORD *)(*(_QWORD *)(v1 + 48) + 8 * v9));
  }
  v12 = v10 + 4;
  if (v12 >= v7)
    return swift_release();
  v11 = *(_QWORD *)(v3 + 8 * v12);
  if (v11)
  {
    v2 = v12;
    goto LABEL_22;
  }
  while (1)
  {
    v2 = v12 + 1;
    if (__OFADD__(v12, 1))
      break;
    if (v2 >= v7)
      return swift_release();
    v11 = *(_QWORD *)(v3 + 8 * v2);
    ++v12;
    if (v11)
      goto LABEL_22;
  }
LABEL_25:
  __break(1u);
  return result;
}

void sub_1CA0DB894(unint64_t a1)
{
  unint64_t v1;
  uint64_t v2;
  id v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int64_t v8;
  uint64_t v9;
  unint64_t v10;
  char *v11;
  id v12;
  uint64_t v13;
  unint64_t v14;
  char *v15;
  uint64_t v16;
  _QWORD *v17;
  id v18[6];

  v1 = a1;
  if ((a1 & 0xC000000000000001) != 0)
  {
    sub_1CA1F0F64();
    sub_1CA0AB910(0, (unint64_t *)&qword_1EF93A320);
    sub_1CA0CBCF8((unint64_t *)&qword_1EF937678, (unint64_t *)&qword_1EF93A320);
    sub_1CA1F0CC4();
    v1 = (unint64_t)v18[1];
    v17 = v18[2];
    v2 = (uint64_t)v18[3];
    v3 = v18[4];
    v4 = (unint64_t)v18[5];
  }
  else
  {
    v3 = 0;
    v5 = -1 << *(_BYTE *)(a1 + 32);
    v17 = (_QWORD *)(a1 + 56);
    v2 = ~v5;
    v6 = -v5;
    if (v6 < 64)
      v7 = ~(-1 << v6);
    else
      v7 = -1;
    v4 = v7 & *(_QWORD *)(a1 + 56);
  }
  v16 = v2;
  v8 = (unint64_t)(v2 + 64) >> 6;
  if ((v1 & 0x8000000000000000) != 0)
    goto LABEL_10;
  while (1)
  {
    if (v4)
    {
      v9 = (v4 - 1) & v4;
      v10 = __clz(__rbit64(v4)) | ((_QWORD)v3 << 6);
      v11 = (char *)v3;
      goto LABEL_29;
    }
    v13 = (uint64_t)v3 + 1;
    if (__OFADD__(v3, 1))
      break;
    if (v13 >= v8)
      goto LABEL_32;
    v14 = v17[v13];
    v11 = (char *)v3 + 1;
    if (!v14)
    {
      v11 = (char *)v3 + 2;
      if ((uint64_t)v3 + 2 >= v8)
        goto LABEL_32;
      v14 = v17[(_QWORD)v11];
      if (!v14)
      {
        v11 = (char *)v3 + 3;
        if ((uint64_t)v3 + 3 >= v8)
          goto LABEL_32;
        v14 = v17[(_QWORD)v11];
        if (!v14)
        {
          v11 = (char *)v3 + 4;
          if ((uint64_t)v3 + 4 >= v8)
            goto LABEL_32;
          v14 = v17[(_QWORD)v11];
          if (!v14)
          {
            v11 = (char *)v3 + 5;
            if ((uint64_t)v3 + 5 >= v8)
              goto LABEL_32;
            v14 = v17[(_QWORD)v11];
            if (!v14)
            {
              v15 = (char *)v3 + 6;
              while ((char *)v8 != v15)
              {
                v14 = v17[(_QWORD)v15++];
                if (v14)
                {
                  v11 = v15 - 1;
                  goto LABEL_28;
                }
              }
LABEL_32:
              v4 = 0;
LABEL_33:
              sub_1CA0B6B24(v1, v17, v16, v3, v4);
              return;
            }
          }
        }
      }
    }
LABEL_28:
    v9 = (v14 - 1) & v14;
    v10 = __clz(__rbit64(v14)) + ((_QWORD)v11 << 6);
LABEL_29:
    v12 = *(id *)(*(_QWORD *)(v1 + 48) + 8 * v10);
    if (!v12)
      goto LABEL_33;
    while (1)
    {
      sub_1CA0BDD74(v18, v12);

      v3 = v11;
      v4 = v9;
      if ((v1 & 0x8000000000000000) == 0)
        break;
LABEL_10:
      if (sub_1CA1F0FD0())
      {
        sub_1CA0AB910(0, (unint64_t *)&qword_1EF93A320);
        swift_unknownObjectRetain();
        swift_dynamicCast();
        v12 = v18[0];
        swift_unknownObjectRelease();
        v11 = (char *)v3;
        v9 = v4;
        if (v12)
          continue;
      }
      goto LABEL_33;
    }
  }
  __break(1u);
}

uint64_t sub_1CA0DBB48()
{
  uint64_t v0;
  unint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  __int128 v8;
  uint64_t v9;

  v1 = *(_QWORD *)(v0 + 40);
  if (v1 >> 62)
  {
    swift_bridgeObjectRetain();
    v3 = sub_1CA1F1234();
    v2 = sub_1CA1F1234();
    swift_bridgeObjectRelease();
  }
  else
  {
    v2 = *(_QWORD *)((v1 & 0xFFFFFFFFFFFFF8) + 0x10);
    v3 = v2;
  }
  if ((unsigned __int128)(v3 * (__int128)v2) >> 64 != (v3 * v2) >> 63)
    __break(1u);
  *(_QWORD *)&v8 = v3;
  *((_QWORD *)&v8 + 1) = v2;
  v9 = sub_1CA0B4464(v3 * v2, 0.0);
  if (v1 >> 62)
  {
    swift_bridgeObjectRetain();
    sub_1CA1F1234();
    swift_bridgeObjectRelease();
  }
  v4 = sub_1CA0AB910(0, &qword_1EF937558);
  MEMORY[0x1E0C80A78](v4, v5);
  sub_1CA1F0E2C();
  type metadata accessor for MASquareMatrixRepresentation();
  v6 = swift_allocObject();
  *(_OWORD *)(v6 + 16) = v8;
  *(_QWORD *)(v6 + 32) = v9;
  *(_QWORD *)(v6 + 40) = v1;
  swift_bridgeObjectRetain();
  return v6;
}

void sub_1CA0DBD0C(Swift::Int a1, uint64_t a2, char a3, char a4, int64_t p_C, uint64_t a6)
{
  uint64_t v10;
  _QWORD *v11;
  unint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  Swift::Int v15;
  double v16;
  double v17;
  uint64_t v18;
  double v19;
  double v20;
  uint64_t v21;
  Swift::Int v22;
  uint64_t v23;
  double v24;
  double v25;
  double v26;
  double v27;
  double v28;
  double v29;
  double v30;
  double v31;
  double v32;
  double v33;
  double v34;
  double v35;
  double v36;
  double v37;
  double v38;
  Swift::Int v39;
  double v40;
  uint64_t v41;
  double v42;
  double v43;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v45;
  unint64_t v46;
  uint64_t v47;
  int64_t v48;
  Swift::Int v49;
  uint64_t v50;
  uint64_t v52;
  unint64_t v54;
  double __C;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;

  v58 = *MEMORY[0x1E0C80C00];
  v10 = *(_QWORD *)(a2 + 40);
  if ((unint64_t)v10 >> 62)
    goto LABEL_113;
  v11 = (_QWORD *)(v10 & 0xFFFFFFFFFFFFFF8);
  v12 = *(_QWORD *)((v10 & 0xFFFFFFFFFFFFFF8) + 0x10);
  v13 = (_QWORD *)sub_1CA0B4464(v12, 0.0);
  v14 = *(_QWORD *)((v10 & 0xFFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain();
  if (!v14)
  {
LABEL_117:
    swift_bridgeObjectRelease();
    goto LABEL_118;
  }
LABEL_3:
  v46 = v12;
  v47 = a6;
  v48 = p_C;
  v49 = a1;
  v15 = 0;
  v54 = v10 & 0xC000000000000001;
  v50 = v10;
  v52 = v14;
  while (1)
  {
    if (v54)
    {
      MEMORY[0x1CAA4A7A4](v15, v10);
      swift_unknownObjectRelease();
      v11 = (_QWORD *)(v15 + 1);
      if (__OFADD__(v15, 1))
      {
        __break(1u);
LABEL_93:
        __break(1u);
LABEL_94:
        __break(1u);
LABEL_95:
        __break(1u);
LABEL_96:
        __break(1u);
LABEL_97:
        __break(1u);
LABEL_98:
        __break(1u);
LABEL_99:
        __break(1u);
LABEL_100:
        __break(1u);
LABEL_101:
        __break(1u);
LABEL_102:
        __break(1u);
LABEL_103:
        __break(1u);
LABEL_104:
        __break(1u);
LABEL_105:
        __break(1u);
LABEL_106:
        __break(1u);
LABEL_107:
        __break(1u);
LABEL_108:
        __break(1u);
LABEL_109:
        __break(1u);
LABEL_110:
        __break(1u);
LABEL_111:
        __break(1u);
LABEL_112:
        __break(1u);
LABEL_113:
        if (v10 < 0)
          v11 = (_QWORD *)v10;
        else
          v11 = (_QWORD *)(v10 & 0xFFFFFFFFFFFFFF8);
        swift_bridgeObjectRetain();
        v12 = sub_1CA1F1234();
        swift_bridgeObjectRelease();
        v13 = (_QWORD *)sub_1CA0B4464(v12, 0.0);
        swift_bridgeObjectRetain();
        v14 = sub_1CA1F1234();
        if (!v14)
          goto LABEL_117;
        goto LABEL_3;
      }
    }
    else
    {
      v11 = (_QWORD *)(v15 + 1);
      if (__OFADD__(v15, 1))
        goto LABEL_93;
    }
    if (v15 == a1 && (a3 & 1) == 0)
      goto LABEL_6;
    v17 = *(double *)(a2 + 16);
    a6 = *(_QWORD *)(a2 + 24);
    v18 = *(_QWORD *)(a2 + 32);
    if (*(_BYTE *)(a2 + 48) == 1)
      break;
    if (a4)
    {
      p_C = *(_QWORD *)&v17 * a6;
      v21 = (unsigned __int128)(*(uint64_t *)&v17 * (__int128)a6) >> 64;
      if (a4 == 1)
      {
        if (v21 != p_C >> 63)
          goto LABEL_97;
        if (p_C < 0)
          goto LABEL_130;
        if (p_C)
        {
          v10 = sub_1CA1F0B68();
          *(_QWORD *)(v10 + 16) = p_C;
          bzero((void *)(v10 + 32), 8 * a6 * *(_QWORD *)&v17);
        }
        else
        {
          v10 = MEMORY[0x1E0DEE9D8];
        }
        __C = 1.0;
        if ((unsigned __int128)(a1 * (__int128)a6) >> 64 != (a1 * a6) >> 63)
          goto LABEL_104;
        if (a6 < 0)
          goto LABEL_129;
        vDSP_vsmsbD((const double *)(v18 + 32 + 8 * a1 * a6), 1, &__C, (const double *)(v18 + 32 + 8 * v15), a6, (double *)(v10 + 32), 1, a6);
        vDSP_vsqD((const double *)(v10 + 32), 1, (double *)(v10 + 32), 1, a6);
        __C = 0.0;
        swift_bridgeObjectRetain();
        vDSP_sveD((const double *)(v10 + 32), 1, &__C, p_C);
        swift_bridgeObjectRelease();
        v38 = __C;
        swift_bridgeObjectRelease();
        v16 = sqrt(v38);
      }
      else
      {
        if (v21 != p_C >> 63)
          goto LABEL_101;
        if (p_C < 0)
          goto LABEL_130;
        if (p_C)
        {
          v10 = sub_1CA1F0B68();
          *(_QWORD *)(v10 + 16) = p_C;
          bzero((void *)(v10 + 32), 8 * a6 * *(_QWORD *)&v17);
        }
        else
        {
          v10 = MEMORY[0x1E0DEE9D8];
        }
        __C = 1.0;
        if ((unsigned __int128)(a1 * (__int128)a6) >> 64 != (a1 * a6) >> 63)
          goto LABEL_106;
        if (a6 < 0)
          goto LABEL_129;
        vDSP_vsmsbD((const double *)(v18 + 32 + 8 * a1 * a6), 1, &__C, (const double *)(v18 + 32 + 8 * v15), a6, (double *)(v10 + 32), 1, a6);
        if ((unint64_t)p_C >> 31)
          goto LABEL_110;
        swift_bridgeObjectRetain();
        cblas_dasum_NEWLAPACK();
        v16 = v42;
        swift_bridgeObjectRelease_n();
      }
      v10 = v50;
    }
    else
    {
      if (*(_QWORD *)&v17 != a6)
        goto LABEL_99;
      __C = 0.0;
      if ((unsigned __int128)(a1 * (__int128)*(uint64_t *)&v17) >> 64 != (a1 * *(_QWORD *)&v17) >> 63)
        goto LABEL_103;
      if ((*(_QWORD *)&v17 & 0x8000000000000000) != 0)
        goto LABEL_129;
      a6 = v18 + 32 + 8 * a1 * *(_QWORD *)&v17;
      p_C = v18 + 32 + 8 * v15;
      vDSP_dotprD((const double *)a6, 1, (const double *)p_C, *(vDSP_Stride *)&v17, &__C, *(vDSP_Length *)&v17);
      if (*(_QWORD *)&v17 >> 31)
        goto LABEL_108;
      cblas_dnrm2_NEWLAPACK();
      v35 = v34;
      cblas_dnrm2_NEWLAPACK();
      v37 = __C / (v35 * v36);
      if (v37 > 1.0)
        v37 = 1.0;
      if (v37 > 0.0)
        v16 = v37;
      else
        v16 = 0.0;
    }
    v14 = v52;
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    {
      v13 = sub_1CA0B6058(v13);
      if ((v15 & 0x8000000000000000) == 0)
        goto LABEL_79;
LABEL_91:
      __break(1u);
LABEL_92:
      swift_bridgeObjectRelease();
      a6 = v47;
      p_C = v48;
      v12 = v46;
LABEL_118:
      os_unfair_lock_lock((os_unfair_lock_t)p_C);
      if (v12 == *(_QWORD *)(a6 + 8))
      {
        v11 = *(_QWORD **)(a6 + 16);
        isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
        *(_QWORD *)(a6 + 16) = v11;
        if ((isUniquelyReferenced_nonNull_native & 1) != 0)
          goto LABEL_120;
      }
      else
      {
        __break(1u);
      }
      v11 = sub_1CA0B6058(v11);
      *(_QWORD *)(a6 + 16) = v11;
LABEL_120:
      v45 = *(_QWORD *)(a6 + 8);
      if (v45 < (uint64_t)0xFFFFFFFF80000000)
      {
        __break(1u);
      }
      else if (v45 <= 0x7FFFFFFF)
      {
        if ((unsigned __int128)(a1 * (__int128)v45) >> 64 == (a1 * v45) >> 63)
        {
          cblas_dcopy_NEWLAPACK();
          *(_QWORD *)(a6 + 16) = v11;
          swift_bridgeObjectRelease();
          os_unfair_lock_unlock((os_unfair_lock_t)p_C);
          return;
        }
LABEL_128:
        __break(1u);
      }
      __break(1u);
      goto LABEL_128;
    }
    if (v15 < 0)
      goto LABEL_91;
LABEL_79:
    if ((unint64_t)v15 >= v13[2])
      goto LABEL_96;
LABEL_5:
    *(double *)&v13[v15 + 4] = v16;
LABEL_6:
    v15 = (Swift::Int)v11;
    if (v11 == (_QWORD *)v14)
      goto LABEL_92;
  }
  if (!a4)
  {
    __C = 0.0;
    v22 = a1 * a6;
    if ((unsigned __int128)(a1 * (__int128)a6) >> 64 != (a1 * a6) >> 63)
      goto LABEL_98;
    if ((unsigned __int128)(v15 * (__int128)a6) >> 64 != (v15 * a6) >> 63)
      goto LABEL_102;
    if (a6 < 0)
      goto LABEL_129;
    a1 = (Swift::Int)v13;
    v23 = v18 + 32;
    v10 = v18 + 32 + 8 * v22;
    p_C = v18 + 32 + 8 * v15 * a6;
    vDSP_dotprD((const double *)v10, 1, (const double *)p_C, 1, &__C, a6);
    if ((unint64_t)a6 >> 31)
      goto LABEL_107;
    cblas_dnrm2_NEWLAPACK();
    v25 = v24;
    cblas_dnrm2_NEWLAPACK();
    v27 = __C / (v25 * v26);
    if (v27 > 0.0)
      v28 = v27;
    else
      v28 = 0.0;
    if (v27 <= 1.0)
      v19 = v28;
    else
      v19 = 1.0;
    __C = 0.0;
    if ((*(_QWORD *)&v17 & 0x8000000000000000) != 0)
      goto LABEL_129;
    v10 = v23 + 8 * v15;
    p_C = v23 + 8 * v49;
    vDSP_dotprD((const double *)v10, a6, (const double *)p_C, a6, &__C, *(vDSP_Length *)&v17);
    v14 = v52;
    if (*(_QWORD *)&v17 >> 31)
      goto LABEL_111;
    cblas_dnrm2_NEWLAPACK();
    v30 = v29;
    cblas_dnrm2_NEWLAPACK();
    v32 = __C / (v30 * v31);
    if (v32 > 0.0)
      v33 = v32;
    else
      v33 = 0.0;
    if (v32 <= 1.0)
      v20 = v33;
    else
      v20 = 1.0;
    v13 = (_QWORD *)a1;
    a1 = v49;
    v10 = v50;
    goto LABEL_84;
  }
  if (a4 == 1)
  {
    __C = *(double *)(a2 + 16);
    v56 = a6;
    v57 = v18;
    v19 = MAMatrix.euclideanDistance(rowA:rowB:)(a1, v15);
    __C = v17;
    v56 = a6;
    v57 = v18;
    p_C = (int64_t)&__C;
    v20 = MAMatrix.euclideanDistance(columnA:columnB:)(v15, a1);
    goto LABEL_83;
  }
  p_C = *(_QWORD *)&v17 * a6;
  if ((unsigned __int128)(*(uint64_t *)&v17 * (__int128)a6) >> 64 != (*(_QWORD *)&v17 * a6) >> 63)
    goto LABEL_100;
  if (p_C < 0)
    goto LABEL_130;
  if (p_C)
  {
    v10 = sub_1CA1F0B68();
    *(_QWORD *)(v10 + 16) = p_C;
    bzero((void *)(v10 + 32), 8 * a6 * *(_QWORD *)&v17);
  }
  else
  {
    v10 = MEMORY[0x1E0DEE9D8];
  }
  __C = 1.0;
  v39 = a1 * a6;
  if ((unsigned __int128)(a1 * (__int128)a6) >> 64 != (a1 * a6) >> 63)
    goto LABEL_105;
  if ((unsigned __int128)(v15 * (__int128)a6) >> 64 != (v15 * a6) >> 63)
    goto LABEL_109;
  if ((a6 & 0x8000000000000000) == 0)
  {
    a1 = (Swift::Int)v13;
    vDSP_vsmsbD((const double *)(v18 + 32 + 8 * v39), 1, &__C, (const double *)(v18 + 32 + 8 * v15 * a6), 1, (double *)(v10 + 32), 1, a6);
    if ((unint64_t)p_C >> 31)
      goto LABEL_112;
    swift_bridgeObjectRetain();
    cblas_dasum_NEWLAPACK();
    v19 = v40;
    swift_bridgeObjectRelease_n();
    if (p_C)
    {
      v41 = sub_1CA1F0B68();
      *(_QWORD *)(v41 + 16) = p_C;
      bzero((void *)(v41 + 32), 8 * a6 * *(_QWORD *)&v17);
    }
    else
    {
      v41 = MEMORY[0x1E0DEE9D8];
    }
    __C = 1.0;
    vDSP_vsmsbD((const double *)(v18 + 32 + 8 * v15), a6, &__C, (const double *)(v18 + 32 + 8 * v49), a6, (double *)(v41 + 32), 1, a6);
    swift_bridgeObjectRetain();
    cblas_dasum_NEWLAPACK();
    v20 = v43;
    swift_bridgeObjectRelease_n();
    a1 = v49;
    v10 = v50;
LABEL_83:
    v14 = v52;
LABEL_84:
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) != 0)
    {
      if (v15 < 0)
        goto LABEL_94;
    }
    else
    {
      v13 = sub_1CA0B6058(v13);
      if (v15 < 0)
        goto LABEL_94;
    }
    if ((unint64_t)v15 >= v13[2])
      goto LABEL_95;
    v16 = (v20 + v19) * 0.5;
    goto LABEL_5;
  }
LABEL_129:
  sub_1CA1F11BC();
  __break(1u);
LABEL_130:
  sub_1CA1F11BC();
  __break(1u);
}

void MAAdjacencyMatrixRepresentation.__allocating_init(matrix:nodes:)()
{
  _swift_stdlib_reportUnimplementedInitializer();
  __break(1u);
}

void MAAdjacencyMatrixRepresentation.init(matrix:nodes:)()
{
  _swift_stdlib_reportUnimplementedInitializer();
  __break(1u);
}

__n128 _s17KnowledgeGraphKit31MAAdjacencyMatrixRepresentationC6matrix5nodes8directedAcA8MAMatrixV_SaySo6MANodeCGSbtcfC_0(__n128 *a1, uint64_t a2, char a3)
{
  uint64_t v6;
  unint64_t v7;
  __n128 result;

  v6 = swift_allocObject();
  v7 = a1[1].n128_u64[0];
  *(_BYTE *)(v6 + 48) = a3;
  result = *a1;
  *(__n128 *)(v6 + 16) = *a1;
  *(_QWORD *)(v6 + 32) = v7;
  *(_QWORD *)(v6 + 40) = a2;
  return result;
}

uint64_t _s17KnowledgeGraphKit31MAAdjacencyMatrixRepresentationC6matrix5nodes8directedAcA8MAMatrixV_SaySo6MANodeCGSbtcfc_0(uint64_t a1, uint64_t a2, char a3)
{
  uint64_t v3;
  uint64_t v4;

  v4 = *(_QWORD *)(a1 + 16);
  *(_BYTE *)(v3 + 48) = a3;
  *(_OWORD *)(v3 + 16) = *(_OWORD *)a1;
  *(_QWORD *)(v3 + 32) = v4;
  *(_QWORD *)(v3 + 40) = a2;
  return v3;
}

uint64_t sub_1CA0DC6E8(void *a1, uint64_t a2)
{
  _QWORD *v2;
  unint64_t v3;
  _QWORD *v4;
  id v6;
  id v7;
  id v8;
  unint64_t v9;
  unint64_t v10;
  char v11;
  char v12;
  uint64_t v13;
  char v14;
  char v15;
  id i;
  void *v17;
  _QWORD *v18;
  id v19;
  uint64_t result;
  uint64_t v21;
  unint64_t v22;
  BOOL v23;
  unint64_t v24;
  double v25;
  _QWORD *v26;
  id v27;
  uint64_t v28;
  id v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  id v36;
  uint64_t v37;
  char v38;
  uint64_t v39;
  uint64_t v40;
  void *v41;
  int v42;
  uint64_t v43;
  unint64_t v44;
  uint64_t v45;
  uint64_t v47;
  uint64_t v48;

  v4 = v2;
  v6 = objc_msgSend(a1, sel_graph);
  if (!v6)
    goto LABEL_75;
  v7 = objc_msgSend(v6, sel_graphReference);
  swift_unknownObjectRelease();
  v8 = objc_msgSend(v7, sel_concreteGraph);

  if (!v8)
    goto LABEL_76;
  v9 = (unint64_t)objc_msgSend(v8, sel_hasPendingRead);

  if ((v9 & 1) == 0)
    goto LABEL_67;
  v48 = MEMORY[0x1E0DEE9D8];
  v9 = v4[5];
  swift_bridgeObjectRetain();
  sub_1CA0C8364((uint64_t)a1, v9);
  v3 = v10;
  v12 = v11;
  swift_bridgeObjectRelease();
  if ((v12 & 1) != 0
    || (swift_bridgeObjectRetain(),
        sub_1CA0C8364(a2, v9),
        v45 = v13,
        v15 = v14,
        swift_bridgeObjectRelease(),
        (v15 & 1) != 0))
  {
LABEL_12:
    swift_bridgeObjectRelease();
    return 0;
  }
  v44 = v9 & 0xC000000000000001;
  if ((v9 & 0xC000000000000001) != 0)
    goto LABEL_72;
  if ((v3 & 0x8000000000000000) != 0)
  {
    __break(1u);
    goto LABEL_74;
  }
  if (v3 >= *(_QWORD *)((v9 & 0xFFFFFFFFFFFFF8) + 0x10))
  {
LABEL_74:
    __break(1u);
LABEL_75:
    __break(1u);
LABEL_76:
    __break(1u);
LABEL_77:
    swift_release();
    __break(1u);
    result = swift_release();
    __break(1u);
    return result;
  }
  for (i = *(id *)(v9 + 8 * v3 + 32); ; i = (id)MEMORY[0x1CAA4A7A4](v3, v9))
  {
    v17 = i;
    sub_1CA0AB910(0, (unint64_t *)&qword_1EF93A320);
    v18 = v17;
    LOBYTE(v17) = sub_1CA1F0E68();

    if ((v17 & 1) != 0)
      break;
    v21 = v4[3];
    v43 = v4[4];
    v42 = *((unsigned __int8 *)v4 + 48);
    while (1)
    {
      v22 = v3 * v21;
      if ((unsigned __int128)((uint64_t)v3 * (__int128)v21) >> 64 != (uint64_t)(v3 * v21) >> 63)
        break;
      v23 = __OFADD__(v22, v45);
      v24 = v22 + v45;
      if (v23)
        goto LABEL_61;
      if ((v24 & 0x8000000000000000) != 0)
        goto LABEL_62;
      if (v24 >= *(_QWORD *)(v43 + 16))
        goto LABEL_63;
      v25 = *(double *)(v43 + 32 + 8 * v24);
      if ((~*(_QWORD *)&v25 & 0x7FF0000000000000) == 0)
        goto LABEL_64;
      if (v25 <= -9.22337204e18)
        goto LABEL_65;
      if (v25 >= 9.22337204e18)
        goto LABEL_66;
      v3 = (uint64_t)v25;
      if (v44)
      {
        v26 = (_QWORD *)MEMORY[0x1CAA4A7A4]((uint64_t)v25, v9);
      }
      else
      {
        if ((v3 & 0x8000000000000000) != 0)
          goto LABEL_70;
        if (*(_QWORD *)((v9 & 0xFFFFFFFFFFFFFF8) + 0x10) <= v3)
          goto LABEL_71;
        v26 = *(id *)(v9 + 32 + 8 * v3);
      }
      v4 = v26;
      if (v42)
      {
        v27 = objc_msgSend(v18, sel_edgesTowardNode_, v26);
        sub_1CA0AB910(0, (unint64_t *)&qword_1EF936F60);
        sub_1CA0CBCF8(&qword_1EF9379D0, (unint64_t *)&qword_1EF936F60);
        v28 = sub_1CA1F0C94();

        if ((v28 & 0xC000000000000001) != 0)
        {
          if (sub_1CA1F0FA0() < 1)
            goto LABEL_58;
        }
        else if (*(uint64_t *)(v28 + 16) < 1)
        {
LABEL_58:

          swift_bridgeObjectRelease();
          goto LABEL_12;
        }
        v31 = swift_bridgeObjectRetain();
        v32 = sub_1CA0B5B20(v31);
        swift_bridgeObjectRelease();
        v47 = v32;
        sub_1CA0D26F0(&v47);
        swift_bridgeObjectRelease();
        v33 = v47;
        if (v47 < 0 || (v47 & 0x4000000000000000) != 0)
        {
          swift_bridgeObjectRetain();
          v39 = sub_1CA1F1234();
          swift_release();
          if (!v39)
            goto LABEL_77;
        }
        else if (!*(_QWORD *)(v47 + 16))
        {
          goto LABEL_77;
        }
        if ((v33 & 0xC000000000000001) != 0)
          goto LABEL_52;
        if (!*(_QWORD *)(v33 + 16))
          goto LABEL_68;
      }
      else
      {
        v29 = objc_msgSend(v18, sel_edgesWithNode_, v26);
        sub_1CA0AB910(0, (unint64_t *)&qword_1EF936F60);
        sub_1CA0CBCF8(&qword_1EF9379D0, (unint64_t *)&qword_1EF936F60);
        v30 = sub_1CA1F0C94();

        if ((v30 & 0xC000000000000001) != 0)
        {
          if (sub_1CA1F0FA0() < 1)
            goto LABEL_59;
        }
        else if (*(uint64_t *)(v30 + 16) < 1)
        {
LABEL_59:

          swift_bridgeObjectRelease();
          goto LABEL_12;
        }
        v34 = swift_bridgeObjectRetain();
        v35 = sub_1CA0B5B20(v34);
        swift_bridgeObjectRelease();
        v47 = v35;
        sub_1CA0D26F0(&v47);
        swift_bridgeObjectRelease();
        v33 = v47;
        if (v47 < 0 || (v47 & 0x4000000000000000) != 0)
        {
          swift_bridgeObjectRetain();
          v40 = sub_1CA1F1234();
          swift_release();
          if (!v40)
          {
LABEL_56:
            swift_release();
            __break(1u);
            goto LABEL_57;
          }
        }
        else if (!*(_QWORD *)(v47 + 16))
        {
          goto LABEL_56;
        }
        if ((v33 & 0xC000000000000001) != 0)
        {
LABEL_52:
          MEMORY[0x1CAA4A7A4](0, v33);
          goto LABEL_48;
        }
        if (!*(_QWORD *)(v33 + 16))
          goto LABEL_69;
      }
      v36 = *(id *)(v33 + 32);
LABEL_48:
      v37 = swift_release();
      MEMORY[0x1CAA4A1E0](v37);
      if (*(_QWORD *)((v48 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(_QWORD *)((v48 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1)
        sub_1CA1F0B2C();
      sub_1CA1F0B8C();
      sub_1CA1F0B14();

      v18 = v4;
      v38 = sub_1CA1F0E68();

      if ((v38 & 1) != 0)
        goto LABEL_57;
    }
    __break(1u);
LABEL_61:
    __break(1u);
LABEL_62:
    __break(1u);
LABEL_63:
    __break(1u);
LABEL_64:
    __break(1u);
LABEL_65:
    __break(1u);
LABEL_66:
    __break(1u);
LABEL_67:
    __break(1u);
LABEL_68:
    __break(1u);
LABEL_69:
    __break(1u);
LABEL_70:
    __break(1u);
LABEL_71:
    __break(1u);
LABEL_72:
    ;
  }
LABEL_57:
  sub_1CA0AB910(0, (unint64_t *)&qword_1EF936F60);
  v41 = (void *)sub_1CA1F0AE4();
  swift_bridgeObjectRelease();
  v19 = objc_msgSend((id)objc_opt_self(), sel_pathWithEdges_, v41);

  return (uint64_t)v19;
}

void MAPathMatrixRepresentation.__allocating_init(matrix:nodes:)()
{
  _swift_stdlib_reportUnimplementedInitializer();
  __break(1u);
}

void MAPathMatrixRepresentation.init(matrix:nodes:)()
{
  _swift_stdlib_reportUnimplementedInitializer();
  __break(1u);
}

uint64_t _s17KnowledgeGraphKit31MAAdjacencyMatrixRepresentationCfD_0()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_deallocClassInstance();
}

uint64_t sub_1CA0DCDD8(_QWORD *a1)
{
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t *v25;
  uint64_t v26;
  unint64_t v27;
  unint64_t v28;
  char *v29;
  char *v30;
  unint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  char v35;
  char *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  BOOL v42;
  unint64_t v43;
  char *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  char *v49;
  uint64_t v50;
  uint64_t v51;
  BOOL v52;
  uint64_t v53;
  char v54;
  char *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  BOOL v59;
  uint64_t v60;
  uint64_t v61;
  char *v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  char *v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  unint64_t v70;
  char *v71;
  uint64_t v72;
  char *v73;
  char *v74;
  uint64_t v75;
  unint64_t v76;
  char *v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t i;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  unint64_t v85;
  char *v86;
  char *v87;
  uint64_t v88;
  uint64_t v89;
  char *v90;
  unint64_t v91;
  _QWORD *v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  char *__dst;

  v2 = a1;
  v3 = a1[1];
  result = sub_1CA1F12A0();
  if (result >= v3)
  {
    if (v3 < 0)
      goto LABEL_137;
    if ((unint64_t)v3 >= 2)
    {
      v78 = 0;
      v79 = *v2;
      for (i = 1; i != v3; ++i)
      {
        v81 = *(_QWORD *)(v79 + 8 * i);
        v82 = v78;
        do
        {
          v83 = *(_QWORD *)(v79 + v82);
          if (v83 >= v81)
            break;
          if (!v79)
            goto LABEL_141;
          *(_QWORD *)(v79 + v82 + 8) = v83;
          *(_QWORD *)(v79 + v82) = v81;
          v82 -= 8;
        }
        while (v82 != -8);
        v78 += 8;
      }
    }
    return result;
  }
  if (v3 >= 0)
    v5 = v3;
  else
    v5 = v3 + 1;
  if (v3 < -1)
    goto LABEL_146;
  v95 = result;
  v96 = v3;
  if (v3 < 2)
  {
    v8 = MEMORY[0x1E0DEE9D8];
    __dst = (char *)(MEMORY[0x1E0DEE9D8] + 32);
    if (v3 != 1)
    {
      v12 = *(_QWORD *)(MEMORY[0x1E0DEE9D8] + 16);
      v11 = (char *)MEMORY[0x1E0DEE9D8];
LABEL_103:
      v94 = v8;
      if (v12 >= 2)
      {
        v84 = *v2;
        do
        {
          v85 = v12 - 2;
          if (v12 < 2)
            goto LABEL_132;
          if (!v84)
            goto LABEL_145;
          v86 = v11;
          v87 = v11 + 32;
          v88 = *(_QWORD *)&v11[16 * v85 + 32];
          v89 = *(_QWORD *)&v11[16 * v12 + 24];
          sub_1CA0DDCBC((char *)(v84 + 8 * v88), (char *)(v84 + 8 * *(_QWORD *)&v87[16 * v12 - 16]), v84 + 8 * v89, __dst);
          if (v1)
            break;
          if (v89 < v88)
            goto LABEL_133;
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
            v86 = sub_1CA13B478((uint64_t)v86);
          if (v85 >= *((_QWORD *)v86 + 2))
            goto LABEL_134;
          v90 = &v86[16 * v85 + 32];
          *(_QWORD *)v90 = v88;
          *((_QWORD *)v90 + 1) = v89;
          v91 = *((_QWORD *)v86 + 2);
          if (v12 > v91)
            goto LABEL_135;
          memmove(&v86[16 * v12 + 16], &v86[16 * v12 + 32], 16 * (v91 - v12));
          v11 = v86;
          *((_QWORD *)v86 + 2) = v91 - 1;
          v12 = v91 - 1;
        }
        while (v91 > 2);
      }
LABEL_114:
      swift_bridgeObjectRelease();
      *(_QWORD *)(v94 + 16) = 0;
      return swift_bridgeObjectRelease();
    }
    v94 = MEMORY[0x1E0DEE9D8];
  }
  else
  {
    v6 = v5 >> 1;
    v7 = sub_1CA1F0B68();
    *(_QWORD *)(v7 + 16) = v6;
    v3 = v96;
    v94 = v7;
    __dst = (char *)(v7 + 32);
  }
  v9 = 0;
  v10 = *v2;
  v92 = v2;
  v93 = *v2 - 8;
  v11 = (char *)MEMORY[0x1E0DEE9D8];
  v97 = *v2;
  while (1)
  {
    v13 = v9++;
    if (v9 < v3)
    {
      v14 = *(_QWORD *)(v10 + 8 * v9);
      v15 = *(_QWORD *)(v10 + 8 * v13);
      v9 = v13 + 2;
      if (v13 + 2 < v3)
      {
        v16 = v14;
        while (1)
        {
          v17 = *(_QWORD *)(v10 + 8 * v9);
          if (v15 < v14 == v16 >= v17)
            break;
          ++v9;
          v16 = v17;
          if (v3 == v9)
          {
            v9 = v3;
            break;
          }
        }
      }
      if (v15 < v14)
      {
        if (v9 < v13)
          goto LABEL_138;
        if (v13 < v9)
        {
          v18 = v9 - 1;
          v19 = v13;
          do
          {
            if (v19 != v18)
            {
              if (!v10)
                goto LABEL_144;
              v20 = *(_QWORD *)(v10 + 8 * v19);
              *(_QWORD *)(v10 + 8 * v19) = *(_QWORD *)(v10 + 8 * v18);
              *(_QWORD *)(v10 + 8 * v18) = v20;
            }
            v59 = ++v19 < v18--;
          }
          while (v59);
        }
      }
    }
    if (v9 >= v3)
      goto LABEL_47;
    if (__OFSUB__(v9, v13))
      goto LABEL_136;
    if (v9 - v13 >= v95)
      goto LABEL_47;
    v21 = v13 + v95;
    if (__OFADD__(v13, v95))
      goto LABEL_139;
    if (v21 >= v3)
      v21 = v3;
    if (v21 < v13)
      break;
    if (v9 != v21)
    {
      v22 = (uint64_t *)(v93 + 8 * v9);
      do
      {
        v23 = *(_QWORD *)(v10 + 8 * v9);
        v24 = v13;
        v25 = v22;
        do
        {
          v26 = *v25;
          if (*v25 >= v23)
            break;
          if (!v10)
            goto LABEL_142;
          *v25 = v23;
          v25[1] = v26;
          --v25;
          ++v24;
        }
        while (v9 != v24);
        ++v9;
        ++v22;
      }
      while (v9 != v21);
      v9 = v21;
    }
LABEL_47:
    if (v9 < v13)
      goto LABEL_131;
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      v11 = sub_1CA13B230(0, *((_QWORD *)v11 + 2) + 1, 1, v11);
    v28 = *((_QWORD *)v11 + 2);
    v27 = *((_QWORD *)v11 + 3);
    v12 = v28 + 1;
    v10 = v97;
    if (v28 >= v27 >> 1)
    {
      v77 = sub_1CA13B230((char *)(v27 > 1), v28 + 1, 1, v11);
      v10 = v97;
      v11 = v77;
    }
    *((_QWORD *)v11 + 2) = v12;
    v29 = v11 + 32;
    v30 = &v11[16 * v28 + 32];
    *(_QWORD *)v30 = v13;
    *((_QWORD *)v30 + 1) = v9;
    if (v28)
    {
      while (1)
      {
        v31 = v12 - 1;
        if (v12 >= 4)
        {
          v36 = &v29[16 * v12];
          v37 = *((_QWORD *)v36 - 8);
          v38 = *((_QWORD *)v36 - 7);
          v42 = __OFSUB__(v38, v37);
          v39 = v38 - v37;
          if (v42)
            goto LABEL_120;
          v41 = *((_QWORD *)v36 - 6);
          v40 = *((_QWORD *)v36 - 5);
          v42 = __OFSUB__(v40, v41);
          v34 = v40 - v41;
          v35 = v42;
          if (v42)
            goto LABEL_121;
          v43 = v12 - 2;
          v44 = &v29[16 * v12 - 32];
          v46 = *(_QWORD *)v44;
          v45 = *((_QWORD *)v44 + 1);
          v42 = __OFSUB__(v45, v46);
          v47 = v45 - v46;
          if (v42)
            goto LABEL_123;
          v42 = __OFADD__(v34, v47);
          v48 = v34 + v47;
          if (v42)
            goto LABEL_126;
          if (v48 >= v39)
          {
            v66 = &v29[16 * v31];
            v68 = *(_QWORD *)v66;
            v67 = *((_QWORD *)v66 + 1);
            v42 = __OFSUB__(v67, v68);
            v69 = v67 - v68;
            if (v42)
              goto LABEL_130;
            v59 = v34 < v69;
            goto LABEL_84;
          }
        }
        else
        {
          if (v12 != 3)
          {
            v60 = *((_QWORD *)v11 + 4);
            v61 = *((_QWORD *)v11 + 5);
            v42 = __OFSUB__(v61, v60);
            v53 = v61 - v60;
            v54 = v42;
            goto LABEL_78;
          }
          v33 = *((_QWORD *)v11 + 4);
          v32 = *((_QWORD *)v11 + 5);
          v42 = __OFSUB__(v32, v33);
          v34 = v32 - v33;
          v35 = v42;
        }
        if ((v35 & 1) != 0)
          goto LABEL_122;
        v43 = v12 - 2;
        v49 = &v29[16 * v12 - 32];
        v51 = *(_QWORD *)v49;
        v50 = *((_QWORD *)v49 + 1);
        v52 = __OFSUB__(v50, v51);
        v53 = v50 - v51;
        v54 = v52;
        if (v52)
          goto LABEL_125;
        v55 = &v29[16 * v31];
        v57 = *(_QWORD *)v55;
        v56 = *((_QWORD *)v55 + 1);
        v42 = __OFSUB__(v56, v57);
        v58 = v56 - v57;
        if (v42)
          goto LABEL_128;
        if (__OFADD__(v53, v58))
          goto LABEL_129;
        if (v53 + v58 >= v34)
        {
          v59 = v34 < v58;
LABEL_84:
          if (v59)
            v31 = v43;
          goto LABEL_86;
        }
LABEL_78:
        if ((v54 & 1) != 0)
          goto LABEL_124;
        v62 = &v29[16 * v31];
        v64 = *(_QWORD *)v62;
        v63 = *((_QWORD *)v62 + 1);
        v42 = __OFSUB__(v63, v64);
        v65 = v63 - v64;
        if (v42)
          goto LABEL_127;
        if (v65 < v53)
          goto LABEL_15;
LABEL_86:
        v70 = v31 - 1;
        if (v31 - 1 >= v12)
        {
          __break(1u);
LABEL_117:
          __break(1u);
LABEL_118:
          __break(1u);
LABEL_119:
          __break(1u);
LABEL_120:
          __break(1u);
LABEL_121:
          __break(1u);
LABEL_122:
          __break(1u);
LABEL_123:
          __break(1u);
LABEL_124:
          __break(1u);
LABEL_125:
          __break(1u);
LABEL_126:
          __break(1u);
LABEL_127:
          __break(1u);
LABEL_128:
          __break(1u);
LABEL_129:
          __break(1u);
LABEL_130:
          __break(1u);
LABEL_131:
          __break(1u);
LABEL_132:
          __break(1u);
LABEL_133:
          __break(1u);
LABEL_134:
          __break(1u);
LABEL_135:
          __break(1u);
LABEL_136:
          __break(1u);
LABEL_137:
          __break(1u);
LABEL_138:
          __break(1u);
LABEL_139:
          __break(1u);
          goto LABEL_140;
        }
        if (!v10)
          goto LABEL_143;
        v71 = &v29[16 * v70];
        v72 = *(_QWORD *)v71;
        v73 = v29;
        v74 = &v29[16 * v31];
        v75 = *((_QWORD *)v74 + 1);
        sub_1CA0DDCBC((char *)(v10 + 8 * *(_QWORD *)v71), (char *)(v10 + 8 * *(_QWORD *)v74), v10 + 8 * v75, __dst);
        if (v1)
          goto LABEL_114;
        if (v75 < v72)
          goto LABEL_117;
        if (v31 > *((_QWORD *)v11 + 2))
          goto LABEL_118;
        *(_QWORD *)v71 = v72;
        *(_QWORD *)&v73[16 * v70 + 8] = v75;
        v76 = *((_QWORD *)v11 + 2);
        if (v31 >= v76)
          goto LABEL_119;
        v12 = v76 - 1;
        memmove(v74, v74 + 16, 16 * (v76 - 1 - v31));
        v29 = v73;
        *((_QWORD *)v11 + 2) = v76 - 1;
        v10 = v97;
        if (v76 <= 2)
          goto LABEL_15;
      }
    }
    v12 = 1;
LABEL_15:
    v3 = v96;
    if (v9 >= v96)
    {
      v8 = v94;
      v2 = v92;
      goto LABEL_103;
    }
  }
LABEL_140:
  __break(1u);
LABEL_141:
  __break(1u);
LABEL_142:
  __break(1u);
LABEL_143:
  __break(1u);
LABEL_144:
  __break(1u);
LABEL_145:
  __break(1u);
LABEL_146:
  result = sub_1CA1F11BC();
  __break(1u);
  return result;
}

void sub_1CA0DD460(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  void *v15;
  id v16;
  id v17;
  float v18;
  float v19;
  float v20;
  float v21;
  id *v22;
  void *v23;
  id v24;
  id v25;
  float v26;
  float v27;
  float v28;
  float v29;
  uint64_t *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  void *v37;
  uint64_t v38;
  uint64_t v39;
  void *v40;
  id v41;
  id v42;
  float v43;
  float v44;
  float v45;
  float v46;
  void *v47;
  unint64_t v48;
  unint64_t v49;
  char *v50;
  char *v51;
  unint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  char v56;
  char *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  BOOL v63;
  unint64_t v64;
  char *v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  char *v70;
  uint64_t v71;
  uint64_t v72;
  BOOL v73;
  uint64_t v74;
  char v75;
  char *v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  BOOL v80;
  uint64_t v81;
  uint64_t v82;
  char *v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  char *v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  unint64_t v91;
  uint64_t v92;
  char *v93;
  char *v94;
  uint64_t v95;
  char *v96;
  unint64_t v97;
  char *v98;
  uint64_t v99;
  uint64_t v100;
  unint64_t v101;
  char *v102;
  uint64_t v103;
  unint64_t v104;
  char *v105;
  uint64_t v106;
  uint64_t v107;
  char *v108;
  unint64_t v109;
  uint64_t *v110;
  uint64_t v111;
  uint64_t v112;
  char *v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  void **v118;
  uint64_t v119;

  v2 = v1;
  v4 = a1[1];
  v5 = sub_1CA1F12A0();
  if (v5 >= v4)
  {
    if (v4 < 0)
      goto LABEL_132;
    if (v4)
      sub_1CA0DDBC8(0, v4, 1, a1);
    return;
  }
  if (v4 >= 0)
    v6 = v4;
  else
    v6 = v4 + 1;
  if (v4 < -1)
    goto LABEL_140;
  v7 = v5;
  v110 = a1;
  if (v4 < 2)
  {
    v10 = (char *)MEMORY[0x1E0DEE9D8];
    v119 = MEMORY[0x1E0DEE9D8];
    v118 = (void **)((MEMORY[0x1E0DEE9D8] & 0xFFFFFFFFFFFFFF8) + 32);
    if (v4 != 1)
    {
      v13 = *(_QWORD *)(MEMORY[0x1E0DEE9D8] + 16);
LABEL_98:
      v102 = v10;
      if (v13 >= 2)
      {
        v103 = *v110;
        do
        {
          v104 = v13 - 2;
          if (v13 < 2)
            goto LABEL_127;
          if (!v103)
            goto LABEL_139;
          v105 = v102;
          v106 = *(_QWORD *)&v102[16 * v104 + 32];
          v107 = *(_QWORD *)&v102[16 * v13 + 24];
          sub_1CA0DDF28((void **)(v103 + 8 * v106), (id *)(v103 + 8 * *(_QWORD *)&v102[16 * v13 + 16]), v103 + 8 * v107, v118);
          if (v2)
            break;
          if (v107 < v106)
            goto LABEL_128;
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
            v105 = sub_1CA13B478((uint64_t)v105);
          if (v104 >= *((_QWORD *)v105 + 2))
            goto LABEL_129;
          v108 = &v105[16 * v104 + 32];
          *(_QWORD *)v108 = v106;
          *((_QWORD *)v108 + 1) = v107;
          v109 = *((_QWORD *)v105 + 2);
          if (v13 > v109)
            goto LABEL_130;
          memmove(&v105[16 * v13 + 16], &v105[16 * v13 + 32], 16 * (v109 - v13));
          v102 = v105;
          *((_QWORD *)v105 + 2) = v109 - 1;
          v13 = v109 - 1;
        }
        while (v109 > 2);
      }
LABEL_95:
      swift_bridgeObjectRelease();
      *(_QWORD *)((v119 & 0xFFFFFFFFFFFFF8) + 0x10) = 0;
      sub_1CA1F0B14();
      swift_bridgeObjectRelease();
      return;
    }
  }
  else
  {
    v8 = v6 >> 1;
    sub_1CA0AB910(0, (unint64_t *)&qword_1EF936F60);
    v9 = sub_1CA1F0B68();
    *(_QWORD *)((v9 & 0xFFFFFFFFFFFFFF8) + 0x10) = v8;
    v118 = (void **)((v9 & 0xFFFFFFFFFFFFFF8) + 32);
    v119 = v9;
  }
  v114 = v7;
  v11 = 0;
  v12 = *a1;
  v111 = *a1 - 8;
  v112 = *a1 + 16;
  v10 = (char *)MEMORY[0x1E0DEE9D8];
  v115 = v4;
  while (1)
  {
    v14 = v11++;
    v116 = v14;
    if (v11 < v4)
    {
      v15 = *(void **)(v12 + 8 * v14);
      v16 = *(id *)(v12 + 8 * v11);
      v17 = v15;
      objc_msgSend(v16, sel_weight);
      v19 = v18;
      objc_msgSend(v17, sel_weight);
      v21 = v20;

      v11 = v14 + 2;
      if (v14 + 2 < v4)
      {
        v22 = (id *)(v112 + 8 * v14);
        while (1)
        {
          v23 = *(v22 - 1);
          v24 = *v22;
          v25 = v23;
          objc_msgSend(v24, sel_weight);
          v27 = v26;
          objc_msgSend(v25, sel_weight);
          v29 = v28;

          if (v19 < v21 == v27 >= v29)
            break;
          ++v11;
          ++v22;
          if (v4 == v11)
          {
            v11 = v4;
            break;
          }
        }
        v14 = v116;
      }
      if (v19 < v21)
      {
        if (v11 < v14)
          goto LABEL_133;
        if (v14 < v11)
        {
          v30 = (uint64_t *)(v111 + 8 * v11);
          v31 = v11;
          v32 = v14;
          v33 = (uint64_t *)(v12 + 8 * v14);
          do
          {
            if (v32 != --v31)
            {
              if (!v12)
                goto LABEL_138;
              v34 = *v33;
              *v33 = *v30;
              *v30 = v34;
            }
            ++v32;
            --v30;
            ++v33;
          }
          while (v32 < v31);
        }
      }
    }
    if (v11 >= v4)
      goto LABEL_47;
    if (__OFSUB__(v11, v14))
      goto LABEL_131;
    if (v11 - v14 >= v114)
      goto LABEL_47;
    if (__OFADD__(v14, v114))
      goto LABEL_134;
    v35 = v14 + v114 >= v4 ? v4 : v14 + v114;
    if (v35 < v14)
      break;
    if (v11 != v35)
    {
      v113 = v10;
      v36 = v111 + 8 * v11;
      do
      {
        v37 = *(void **)(v12 + 8 * v11);
        v38 = v14;
        v39 = v36;
        do
        {
          v40 = *(void **)v39;
          v41 = v37;
          v42 = v40;
          objc_msgSend(v41, sel_weight);
          v44 = v43;
          objc_msgSend(v42, sel_weight);
          v46 = v45;

          if (v44 >= v46)
            break;
          if (!v12)
            goto LABEL_136;
          v47 = *(void **)v39;
          v37 = *(void **)(v39 + 8);
          *(_QWORD *)v39 = v37;
          *(_QWORD *)(v39 + 8) = v47;
          v39 -= 8;
          ++v38;
        }
        while (v11 != v38);
        ++v11;
        v36 += 8;
        v14 = v116;
      }
      while (v11 != v35);
      v11 = v35;
      v10 = v113;
    }
LABEL_47:
    if (v11 < v14)
      goto LABEL_126;
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      v10 = sub_1CA13B230(0, *((_QWORD *)v10 + 2) + 1, 1, v10);
    v49 = *((_QWORD *)v10 + 2);
    v48 = *((_QWORD *)v10 + 3);
    v13 = v49 + 1;
    if (v49 >= v48 >> 1)
      v10 = sub_1CA13B230((char *)(v48 > 1), v49 + 1, 1, v10);
    *((_QWORD *)v10 + 2) = v13;
    v50 = v10 + 32;
    v51 = &v10[16 * v49 + 32];
    *(_QWORD *)v51 = v14;
    *((_QWORD *)v51 + 1) = v11;
    if (v49)
    {
      v117 = v11;
      while (1)
      {
        v52 = v13 - 1;
        if (v13 >= 4)
        {
          v57 = &v50[16 * v13];
          v58 = *((_QWORD *)v57 - 8);
          v59 = *((_QWORD *)v57 - 7);
          v63 = __OFSUB__(v59, v58);
          v60 = v59 - v58;
          if (v63)
            goto LABEL_115;
          v62 = *((_QWORD *)v57 - 6);
          v61 = *((_QWORD *)v57 - 5);
          v63 = __OFSUB__(v61, v62);
          v55 = v61 - v62;
          v56 = v63;
          if (v63)
            goto LABEL_116;
          v64 = v13 - 2;
          v65 = &v50[16 * v13 - 32];
          v67 = *(_QWORD *)v65;
          v66 = *((_QWORD *)v65 + 1);
          v63 = __OFSUB__(v66, v67);
          v68 = v66 - v67;
          if (v63)
            goto LABEL_118;
          v63 = __OFADD__(v55, v68);
          v69 = v55 + v68;
          if (v63)
            goto LABEL_121;
          if (v69 >= v60)
          {
            v87 = &v50[16 * v52];
            v89 = *(_QWORD *)v87;
            v88 = *((_QWORD *)v87 + 1);
            v63 = __OFSUB__(v88, v89);
            v90 = v88 - v89;
            if (v63)
              goto LABEL_125;
            v80 = v55 < v90;
            goto LABEL_85;
          }
        }
        else
        {
          if (v13 != 3)
          {
            v81 = *((_QWORD *)v10 + 4);
            v82 = *((_QWORD *)v10 + 5);
            v63 = __OFSUB__(v82, v81);
            v74 = v82 - v81;
            v75 = v63;
            goto LABEL_79;
          }
          v54 = *((_QWORD *)v10 + 4);
          v53 = *((_QWORD *)v10 + 5);
          v63 = __OFSUB__(v53, v54);
          v55 = v53 - v54;
          v56 = v63;
        }
        if ((v56 & 1) != 0)
          goto LABEL_117;
        v64 = v13 - 2;
        v70 = &v50[16 * v13 - 32];
        v72 = *(_QWORD *)v70;
        v71 = *((_QWORD *)v70 + 1);
        v73 = __OFSUB__(v71, v72);
        v74 = v71 - v72;
        v75 = v73;
        if (v73)
          goto LABEL_120;
        v76 = &v50[16 * v52];
        v78 = *(_QWORD *)v76;
        v77 = *((_QWORD *)v76 + 1);
        v63 = __OFSUB__(v77, v78);
        v79 = v77 - v78;
        if (v63)
          goto LABEL_123;
        if (__OFADD__(v74, v79))
          goto LABEL_124;
        if (v74 + v79 >= v55)
        {
          v80 = v55 < v79;
LABEL_85:
          if (v80)
            v52 = v64;
          goto LABEL_87;
        }
LABEL_79:
        if ((v75 & 1) != 0)
          goto LABEL_119;
        v83 = &v50[16 * v52];
        v85 = *(_QWORD *)v83;
        v84 = *((_QWORD *)v83 + 1);
        v63 = __OFSUB__(v84, v85);
        v86 = v84 - v85;
        if (v63)
          goto LABEL_122;
        if (v86 < v74)
          goto LABEL_14;
LABEL_87:
        v91 = v52 - 1;
        if (v52 - 1 >= v13)
        {
          __break(1u);
LABEL_112:
          __break(1u);
LABEL_113:
          __break(1u);
LABEL_114:
          __break(1u);
LABEL_115:
          __break(1u);
LABEL_116:
          __break(1u);
LABEL_117:
          __break(1u);
LABEL_118:
          __break(1u);
LABEL_119:
          __break(1u);
LABEL_120:
          __break(1u);
LABEL_121:
          __break(1u);
LABEL_122:
          __break(1u);
LABEL_123:
          __break(1u);
LABEL_124:
          __break(1u);
LABEL_125:
          __break(1u);
LABEL_126:
          __break(1u);
LABEL_127:
          __break(1u);
LABEL_128:
          __break(1u);
LABEL_129:
          __break(1u);
LABEL_130:
          __break(1u);
LABEL_131:
          __break(1u);
LABEL_132:
          __break(1u);
LABEL_133:
          __break(1u);
LABEL_134:
          __break(1u);
          goto LABEL_135;
        }
        v92 = v12;
        if (!v12)
          goto LABEL_137;
        v93 = v10;
        v94 = &v50[16 * v91];
        v95 = *(_QWORD *)v94;
        v96 = v50;
        v97 = v52;
        v98 = &v50[16 * v52];
        v99 = *((_QWORD *)v98 + 1);
        v100 = v92;
        sub_1CA0DDF28((void **)(v92 + 8 * *(_QWORD *)v94), (id *)(v92 + 8 * *(_QWORD *)v98), v92 + 8 * v99, v118);
        if (v1)
          goto LABEL_95;
        if (v99 < v95)
          goto LABEL_112;
        if (v97 > *((_QWORD *)v93 + 2))
          goto LABEL_113;
        *(_QWORD *)v94 = v95;
        *(_QWORD *)&v96[16 * v91 + 8] = v99;
        v101 = *((_QWORD *)v93 + 2);
        if (v97 >= v101)
          goto LABEL_114;
        v10 = v93;
        v13 = v101 - 1;
        memmove(v98, v98 + 16, 16 * (v101 - 1 - v97));
        v50 = v96;
        *((_QWORD *)v93 + 2) = v101 - 1;
        v12 = v100;
        v11 = v117;
        if (v101 <= 2)
          goto LABEL_14;
      }
    }
    v13 = 1;
LABEL_14:
    v4 = v115;
    if (v11 >= v115)
    {
      v2 = v1;
      goto LABEL_98;
    }
  }
LABEL_135:
  __break(1u);
LABEL_136:
  __break(1u);
LABEL_137:
  __break(1u);
LABEL_138:
  __break(1u);
LABEL_139:
  __break(1u);
LABEL_140:
  sub_1CA1F11BC();
  __break(1u);
}

void sub_1CA0DDBC8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  id v12;
  id v13;
  float v14;
  float v15;
  float v16;
  float v17;
  void *v18;

  if (a3 != a2)
  {
    v4 = a3;
    v6 = *a4;
    v7 = *a4 + 8 * a3 - 8;
LABEL_5:
    v8 = *(void **)(v6 + 8 * v4);
    v9 = a1;
    v10 = v7;
    while (1)
    {
      v11 = *(void **)v10;
      v12 = v8;
      v13 = v11;
      objc_msgSend(v12, sel_weight);
      v15 = v14;
      objc_msgSend(v13, sel_weight);
      v17 = v16;

      if (v15 >= v17)
      {
LABEL_4:
        ++v4;
        v7 += 8;
        if (v4 == a2)
          return;
        goto LABEL_5;
      }
      if (!v6)
        break;
      v18 = *(void **)v10;
      v8 = *(void **)(v10 + 8);
      *(_QWORD *)v10 = v8;
      *(_QWORD *)(v10 + 8) = v18;
      v10 -= 8;
      if (v4 == ++v9)
        goto LABEL_4;
    }
    __break(1u);
  }
}

uint64_t sub_1CA0DDCBC(char *__src, char *a2, unint64_t a3, char *__dst)
{
  char *v4;
  char *v6;
  char *v7;
  int64_t v8;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  char *v15;
  char *v16;
  char *v17;
  char *v18;
  char *v19;
  uint64_t v20;
  uint64_t result;
  char *v22;
  char *v23;
  char *v24;

  v4 = __dst;
  v6 = a2;
  v7 = __src;
  v8 = a2 - __src;
  v9 = a2 - __src + 7;
  if (a2 - __src >= 0)
    v9 = a2 - __src;
  v10 = v9 >> 3;
  v11 = a3 - (_QWORD)a2;
  v12 = a3 - (_QWORD)a2 + 7;
  if ((uint64_t)(a3 - (_QWORD)a2) >= 0)
    v12 = a3 - (_QWORD)a2;
  v13 = v12 >> 3;
  v24 = __src;
  v23 = __dst;
  if (v10 >= v12 >> 3)
  {
    if (v11 >= -7)
    {
      if (__dst != a2 || &a2[8 * v13] <= __dst)
        memmove(__dst, a2, 8 * v13);
      v16 = &v4[8 * v13];
      v22 = v16;
      v24 = v6;
      if (v7 < v6 && v11 >= 8)
      {
        v17 = (char *)(a3 - 8);
        while (1)
        {
          v18 = v17 + 8;
          v19 = v6 - 8;
          v20 = *((_QWORD *)v6 - 1);
          if (v20 >= *((_QWORD *)v16 - 1))
          {
            v22 = v16 - 8;
            if (v18 < v16 || v17 >= v16 || v18 != v16)
              *(_QWORD *)v17 = *((_QWORD *)v16 - 1);
            v16 -= 8;
            if (v6 <= v7)
              goto LABEL_42;
          }
          else
          {
            if (v18 != v6 || v17 >= v6)
              *(_QWORD *)v17 = v20;
            v24 = v6 - 8;
            v6 -= 8;
            if (v19 <= v7)
              goto LABEL_42;
          }
          v17 -= 8;
          if (v16 <= v4)
            goto LABEL_42;
        }
      }
      goto LABEL_42;
    }
  }
  else if (v8 >= -7)
  {
    if (__dst != __src || &__src[8 * v10] <= __dst)
      memmove(__dst, __src, 8 * v10);
    v14 = &v4[8 * v10];
    v22 = v14;
    if ((unint64_t)v6 < a3 && v8 >= 8)
    {
      do
      {
        if (*(_QWORD *)v4 >= *(_QWORD *)v6)
        {
          if (v7 != v4)
            *(_QWORD *)v7 = *(_QWORD *)v4;
          v4 += 8;
          v23 = v4;
          v15 = v6;
        }
        else
        {
          v15 = v6 + 8;
          if (v7 < v6 || v7 >= v15 || v7 != v6)
            *(_QWORD *)v7 = *(_QWORD *)v6;
        }
        v7 += 8;
        if (v4 >= v14)
          break;
        v6 = v15;
      }
      while ((unint64_t)v15 < a3);
      v24 = v7;
    }
LABEL_42:
    sub_1CA13B328((void **)&v24, (const void **)&v23, &v22);
    return 1;
  }
  result = sub_1CA1F1270();
  __break(1u);
  return result;
}

uint64_t sub_1CA0DDF28(void **__src, id *a2, unint64_t a3, void **a4)
{
  id *v5;
  void **v6;
  int64_t v7;
  int64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void **v13;
  void **v14;
  void *v15;
  id v16;
  id v17;
  float v18;
  float v19;
  float v20;
  float v21;
  id *v22;
  id *v23;
  id *v24;
  void **v25;
  id *v26;
  id *v27;
  void *v28;
  id v29;
  id v30;
  float v31;
  float v32;
  float v33;
  float v34;
  uint64_t result;
  char *v37;
  void **v38;
  id *v39;

  v5 = a2;
  v6 = __src;
  v7 = (char *)a2 - (char *)__src;
  v8 = (char *)a2 - (char *)__src + 7;
  if ((char *)a2 - (char *)__src >= 0)
    v8 = (char *)a2 - (char *)__src;
  v9 = v8 >> 3;
  v10 = a3 - (_QWORD)a2;
  v11 = a3 - (_QWORD)a2 + 7;
  if ((uint64_t)(a3 - (_QWORD)a2) >= 0)
    v11 = a3 - (_QWORD)a2;
  v12 = v11 >> 3;
  v39 = __src;
  v38 = a4;
  if (v9 >= v11 >> 3)
  {
    if (v10 < -7)
      goto LABEL_46;
    if (a4 != a2 || &a2[v12] <= a4)
      memmove(a4, a2, 8 * v12);
    v23 = &a4[v12];
    v37 = (char *)v23;
    v39 = v5;
    if (v6 >= v5 || v10 < 8)
      goto LABEL_45;
    v24 = (id *)(a3 - 8);
    v25 = v5;
    while (1)
    {
      v26 = v24 + 1;
      v27 = v23 - 1;
      v28 = *--v25;
      v29 = *(v23 - 1);
      v30 = v28;
      objc_msgSend(v29, sel_weight);
      v32 = v31;
      objc_msgSend(v30, sel_weight);
      v34 = v33;

      if (v32 < v34)
        break;
      v37 = (char *)(v23 - 1);
      if (v26 < v23 || v24 >= v23)
      {
        *v24 = *v27;
        v25 = v5;
        --v23;
        goto LABEL_43;
      }
      if (v26 != v23)
        *v24 = *v27;
      v25 = v5;
      --v23;
      if (v5 <= v6)
        goto LABEL_45;
LABEL_44:
      --v24;
      v5 = v25;
      if (v23 <= a4)
        goto LABEL_45;
    }
    if (v26 != v5 || v24 >= v5)
      *v24 = *v25;
    v39 = v25;
LABEL_43:
    if (v25 <= v6)
      goto LABEL_45;
    goto LABEL_44;
  }
  if (v7 >= -7)
  {
    if (a4 != __src || &__src[v9] <= a4)
      memmove(a4, __src, 8 * v9);
    v13 = &a4[v9];
    v37 = (char *)v13;
    if ((unint64_t)v5 < a3 && v7 >= 8)
    {
      v14 = a4;
      do
      {
        v15 = *v14;
        v16 = *v5;
        v17 = v15;
        objc_msgSend(v16, sel_weight);
        v19 = v18;
        objc_msgSend(v17, sel_weight);
        v21 = v20;

        if (v19 >= v21)
        {
          if (v6 != v14)
            *v6 = *v14;
          v38 = ++v14;
          v22 = v5;
        }
        else
        {
          v22 = v5 + 1;
          if (v6 < v5 || v6 >= v22 || v6 != v5)
            *v6 = *v5;
        }
        ++v6;
        if (v14 >= v13)
          break;
        v5 = v22;
      }
      while ((unint64_t)v22 < a3);
      v39 = v6;
    }
LABEL_45:
    sub_1CA13B328((void **)&v39, (const void **)&v38, &v37);
    return 1;
  }
LABEL_46:
  result = sub_1CA1F1270();
  __break(1u);
  return result;
}

id sub_1CA0DE250(void *a1)
{
  id result;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  id v10;
  int64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  int64_t v15;
  uint64_t v16;
  _QWORD *v17;
  int64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  const void *v23;
  BOOL v24;
  unint64_t v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  int64_t v29;
  uint64_t v30;
  _QWORD *v31;
  _QWORD v33[2];
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;

  result = (id)MACluster.makeIterator()((uint64_t)v33);
  v2 = 0;
  v3 = v33[0];
  v30 = v33[1];
  v4 = v35;
  v5 = v36;
  v28 = v34;
  v31 = (_QWORD *)MEMORY[0x1E0DEE9D8];
  v6 = (_QWORD *)(MEMORY[0x1E0DEE9D8] + 32);
  v29 = (unint64_t)(v34 + 64) >> 6;
  if ((v33[0] & 0x8000000000000000) != 0)
    goto LABEL_4;
LABEL_2:
  if (v5)
  {
    v7 = (v5 - 1) & v5;
    v8 = __clz(__rbit64(v5)) | (v4 << 6);
    v9 = v4;
    goto LABEL_23;
  }
  v11 = v4 + 1;
  if (__OFADD__(v4, 1))
  {
LABEL_47:
    __break(1u);
    goto LABEL_48;
  }
  if (v11 >= v29)
    goto LABEL_40;
  v12 = *(_QWORD *)(v30 + 8 * v11);
  v9 = v4 + 1;
  if (v12)
    goto LABEL_22;
  v9 = v4 + 2;
  if (v4 + 2 >= v29)
    goto LABEL_40;
  v12 = *(_QWORD *)(v30 + 8 * v9);
  if (v12)
    goto LABEL_22;
  v9 = v4 + 3;
  if (v4 + 3 >= v29)
    goto LABEL_40;
  v12 = *(_QWORD *)(v30 + 8 * v9);
  if (v12)
    goto LABEL_22;
  v9 = v4 + 4;
  if (v4 + 4 >= v29)
    goto LABEL_40;
  v12 = *(_QWORD *)(v30 + 8 * v9);
  if (v12)
    goto LABEL_22;
  v9 = v4 + 5;
  if (v4 + 5 >= v29)
  {
LABEL_40:
    v5 = 0;
    goto LABEL_41;
  }
  v12 = *(_QWORD *)(v30 + 8 * v9);
  if (!v12)
  {
    v13 = v4 + 6;
    while (v29 != v13)
    {
      v12 = *(_QWORD *)(v30 + 8 * v13++);
      if (v12)
      {
        v9 = v13 - 1;
        goto LABEL_22;
      }
    }
    goto LABEL_40;
  }
LABEL_22:
  v7 = (v12 - 1) & v12;
  v8 = __clz(__rbit64(v12)) + (v9 << 6);
LABEL_23:
  result = *(id *)(*(_QWORD *)(v3 + 48) + 8 * v8);
  v10 = result;
  if (result)
  {
    while (1)
    {
      if (!v2)
      {
        v14 = v31[3];
        if ((uint64_t)((v14 >> 1) + 0x4000000000000000) < 0)
          goto LABEL_46;
        v15 = v14 & 0xFFFFFFFFFFFFFFFELL;
        if (v15 <= 1)
          v16 = 1;
        else
          v16 = v15;
        __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_1ED852A58);
        v17 = (_QWORD *)swift_allocObject();
        v18 = _swift_stdlib_malloc_size(v17);
        v19 = v18 - 32;
        if (v18 < 32)
          v19 = v18 - 25;
        v20 = v19 >> 3;
        v17[2] = v16;
        v17[3] = (2 * (v19 >> 3)) | 1;
        v21 = (unint64_t)(v17 + 4);
        v22 = v31[3] >> 1;
        if (v31[2])
        {
          v23 = v31 + 4;
          if (v17 != v31 || v21 >= (unint64_t)v23 + 8 * v22)
            memmove(v17 + 4, v23, 8 * v22);
          v31[2] = 0;
        }
        v6 = (_QWORD *)(v21 + 8 * v22);
        v2 = (v20 & 0x7FFFFFFFFFFFFFFFLL) - v22;
        result = (id)swift_release();
        v31 = v17;
      }
      v24 = __OFSUB__(v2--, 1);
      if (v24)
        break;
      *v6++ = v10;
      v4 = v9;
      v5 = v7;
      if ((v3 & 0x8000000000000000) == 0)
        goto LABEL_2;
LABEL_4:
      if (sub_1CA1F0FD0())
      {
        sub_1CA0AB910(0, (unint64_t *)&qword_1EF93A320);
        swift_unknownObjectRetain();
        swift_dynamicCast();
        v10 = a1;
        result = (id)swift_unknownObjectRelease();
        v9 = v4;
        v7 = v5;
        if (a1)
          continue;
      }
      goto LABEL_41;
    }
    __break(1u);
LABEL_46:
    __break(1u);
    goto LABEL_47;
  }
LABEL_41:
  sub_1CA0B6B24(v3, v30, v28, v4, v5);
  result = v31;
  v25 = v31[3];
  if (v25 >= 2)
  {
    v26 = v25 >> 1;
    v24 = __OFSUB__(v26, v2);
    v27 = v26 - v2;
    if (v24)
    {
LABEL_48:
      __break(1u);
      return result;
    }
    v31[2] = v27;
  }
  return result;
}

uint64_t sub_1CA0DE570(uint64_t result, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v5;
  _QWORD *v6;
  unint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  unint64_t v11;
  int64_t v12;
  uint64_t v13;
  _QWORD *v14;
  int64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  const void *v20;
  BOOL v21;
  unint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;

  v3 = result * a2;
  if ((unsigned __int128)(result * (__int128)a2) >> 64 != (result * a2) >> 63)
  {
LABEL_29:
    __break(1u);
    goto LABEL_30;
  }
  v5 = swift_allocObject();
  *(_QWORD *)(v5 + 16) = 0;
  swift_bridgeObjectRetain_n();
  v25 = v5;
  result = swift_retain();
  v6 = (_QWORD *)MEMORY[0x1E0DEE9D8];
  if (v3)
  {
    v7 = 0;
    v8 = 0;
    v9 = (_QWORD *)(MEMORY[0x1E0DEE9D8] + 32);
    while (v7 < *(_QWORD *)(a3 + 16))
    {
      v10 = *(_QWORD *)(a3 + 32 + 8 * v7);
      if (!v8)
      {
        v11 = v6[3];
        if ((uint64_t)((v11 >> 1) + 0x4000000000000000) < 0)
          goto LABEL_28;
        v12 = v11 & 0xFFFFFFFFFFFFFFFELL;
        if (v12 <= 1)
          v13 = 1;
        else
          v13 = v12;
        __swift_instantiateConcreteTypeFromMangledName(qword_1ED852848);
        v14 = (_QWORD *)swift_allocObject();
        v15 = _swift_stdlib_malloc_size(v14);
        v16 = v15 - 32;
        if (v15 < 32)
          v16 = v15 - 25;
        v17 = v16 >> 3;
        v14[2] = v13;
        v14[3] = 2 * (v16 >> 3);
        v18 = (unint64_t)(v14 + 4);
        v19 = v6[3] >> 1;
        if (v6[2])
        {
          v20 = v6 + 4;
          if (v14 != v6 || v18 >= (unint64_t)v20 + 8 * v19)
            memmove(v14 + 4, v20, 8 * v19);
          v6[2] = 0;
        }
        v9 = (_QWORD *)(v18 + 8 * v19);
        v8 = (v17 & 0x7FFFFFFFFFFFFFFFLL) - v19;
        result = swift_release();
        v6 = v14;
      }
      v21 = __OFSUB__(v8--, 1);
      if (v21)
        goto LABEL_27;
      ++v7;
      *v9++ = v10;
      if (v3 == v7)
        goto LABEL_22;
    }
    __break(1u);
LABEL_27:
    __break(1u);
LABEL_28:
    __break(1u);
    goto LABEL_29;
  }
  v8 = 0;
LABEL_22:
  *(_QWORD *)(v25 + 16) = v3;
  swift_bridgeObjectRelease_n();
  result = swift_release_n();
  v22 = v6[3];
  if (v22 < 2)
    return (uint64_t)v6;
  v23 = v22 >> 1;
  v21 = __OFSUB__(v23, v8);
  v24 = v23 - v8;
  if (!v21)
  {
    v6[2] = v24;
    return (uint64_t)v6;
  }
LABEL_30:
  __break(1u);
  return result;
}

void sub_1CA0DE74C(uint64_t a1, uint64_t a2, double a3, double a4)
{
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t *v10;
  BOOL v11;
  double v12;
  double v13;
  unint64_t v14;
  int64_t v15;
  uint64_t v16;
  _QWORD *v17;
  int64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  const void *v23;
  unint64_t v24;
  unint64_t v25;
  uint64_t v26;

  v7 = a1;
  v8 = 0;
  v9 = (_QWORD *)MEMORY[0x1E0DEE9D8];
  v10 = (uint64_t *)(MEMORY[0x1E0DEE9D8] + 32);
  if (a3 != 1.0)
    goto LABEL_5;
LABEL_2:
  v11 = __OFADD__(v7++, 1);
  if (v11)
  {
LABEL_31:
    __break(1u);
LABEL_32:
    __break(1u);
LABEL_33:
    __break(1u);
LABEL_34:
    __break(1u);
LABEL_35:
    __break(1u);
LABEL_36:
    __break(1u);
  }
  else
  {
    while (v7 <= a2)
    {
      if (!v8)
      {
        v14 = v9[3];
        if ((uint64_t)((v14 >> 1) + 0x4000000000000000) < 0)
          goto LABEL_36;
        v15 = v14 & 0xFFFFFFFFFFFFFFFELL;
        if (v15 <= 1)
          v16 = 1;
        else
          v16 = v15;
        __swift_instantiateConcreteTypeFromMangledName(&qword_1ED8528F0);
        v17 = (_QWORD *)swift_allocObject();
        v18 = _swift_stdlib_malloc_size(v17);
        v19 = v18 - 32;
        if (v18 < 32)
          v19 = v18 - 25;
        v20 = v19 >> 3;
        v17[2] = v16;
        v17[3] = 2 * (v19 >> 3);
        v21 = (unint64_t)(v17 + 4);
        v22 = v9[3] >> 1;
        if (v9[2])
        {
          v23 = v9 + 4;
          if (v17 != v9 || v21 >= (unint64_t)v23 + 8 * v22)
            memmove(v17 + 4, v23, 8 * v22);
          v9[2] = 0;
        }
        v10 = (uint64_t *)(v21 + 8 * v22);
        v8 = (v20 & 0x7FFFFFFFFFFFFFFFLL) - v22;
        a1 = swift_release();
        v9 = v17;
      }
      v11 = __OFSUB__(v8--, 1);
      if (v11)
      {
        __break(1u);
        goto LABEL_31;
      }
      *v10++ = v7;
      if (a3 == 1.0)
        goto LABEL_2;
LABEL_5:
      sub_1CA0C778C(a1, 0.0, 1.0);
      v13 = ceil(log(1.0 - v12) * a4);
      if ((~*(_QWORD *)&v13 & 0x7FF0000000000000) == 0)
        goto LABEL_32;
      if (v13 <= -9.22337204e18)
        goto LABEL_33;
      if (v13 >= 9.22337204e18)
        goto LABEL_34;
      v11 = __OFADD__(v7, (uint64_t)v13);
      v7 += (uint64_t)v13;
      if (v11)
        goto LABEL_35;
    }
    v24 = v9[3];
    if (v24 < 2)
      return;
    v25 = v24 >> 1;
    v11 = __OFSUB__(v25, v8);
    v26 = v25 - v8;
    if (!v11)
    {
      v9[2] = v26;
      return;
    }
  }
  __break(1u);
}

uint64_t sub_1CA0DE934(uint64_t a1)
{
  uint64_t v1;
  unint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  id v11;
  id v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  int64_t v18;
  uint64_t v19;
  _QWORD *v20;
  int64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  const void *v26;
  BOOL v27;
  uint64_t result;
  unint64_t v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  uint64_t v35;

  v1 = a1;
  v2 = *(_QWORD *)(a1 + 40);
  if (v2 >> 62)
    goto LABEL_35;
  v3 = *(_QWORD *)((v2 & 0xFFFFFFFFFFFFF8) + 0x10);
  swift_retain();
LABEL_3:
  v4 = swift_allocObject();
  *(_QWORD *)(v4 + 16) = 0;
  swift_retain();
  v32 = v4;
  swift_retain();
  v5 = (_QWORD *)MEMORY[0x1E0DEE9D8];
  if (v3)
  {
    v6 = 0;
    v7 = 0;
    v8 = v2 & 0xC000000000000001;
    v9 = (_QWORD *)(MEMORY[0x1E0DEE9D8] + 32);
    v10 = v2 & 0xFFFFFFFFFFFFFF8;
    v34 = v2 & 0xC000000000000001;
    v35 = v3;
    v33 = v2 & 0xFFFFFFFFFFFFFF8;
    while (1)
    {
      if (v8)
      {
        v11 = (id)MEMORY[0x1CAA4A7A4](v6, v2);
      }
      else
      {
        if (v6 >= *(_QWORD *)(v10 + 16))
        {
          __break(1u);
LABEL_32:
          __break(1u);
LABEL_33:
          __break(1u);
LABEL_34:
          __break(1u);
LABEL_35:
          swift_retain();
          swift_bridgeObjectRetain();
          v3 = sub_1CA1F1234();
          swift_bridgeObjectRelease();
          goto LABEL_3;
        }
        v11 = *(id *)(v2 + 8 * v6 + 32);
      }
      v12 = v11;
      v13 = *(_QWORD *)(v1 + 32);
      if (v6 >= *(_QWORD *)(v13 + 16))
        goto LABEL_32;
      v14 = *(_QWORD *)(v13 + 8 * v6 + 32);
      if (!v7)
      {
        v15 = v5[3];
        if ((uint64_t)((v15 >> 1) + 0x4000000000000000) < 0)
          goto LABEL_34;
        v16 = v2;
        v17 = v1;
        v18 = v15 & 0xFFFFFFFFFFFFFFFELL;
        if (v18 <= 1)
          v19 = 1;
        else
          v19 = v18;
        __swift_instantiateConcreteTypeFromMangledName(&qword_1EF937B30);
        v20 = (_QWORD *)swift_allocObject();
        v21 = _swift_stdlib_malloc_size(v20);
        v22 = v21 - 32;
        if (v21 < 32)
          v22 = v21 - 17;
        v23 = v22 >> 4;
        v20[2] = v19;
        v20[3] = 2 * (v22 >> 4);
        v24 = (unint64_t)(v20 + 4);
        v25 = v5[3] >> 1;
        if (v5[2])
        {
          v26 = v5 + 4;
          if (v20 != v5 || v24 >= (unint64_t)v26 + 16 * v25)
            memmove(v20 + 4, v26, 16 * v25);
          v5[2] = 0;
        }
        v9 = (_QWORD *)(v24 + 16 * v25);
        v7 = (v23 & 0x7FFFFFFFFFFFFFFFLL) - v25;
        swift_release();
        v5 = v20;
        v1 = v17;
        v2 = v16;
        v8 = v34;
        v3 = v35;
        v10 = v33;
      }
      v27 = __OFSUB__(v7--, 1);
      if (v27)
        goto LABEL_33;
      ++v6;
      *v9 = v12;
      v9[1] = v14;
      v9 += 2;
      if (v3 == v6)
        goto LABEL_27;
    }
  }
  v7 = 0;
LABEL_27:
  *(_QWORD *)(v32 + 16) = v3;
  swift_release_n();
  result = swift_release_n();
  v29 = v5[3];
  if (v29 < 2)
    return (uint64_t)v5;
  v30 = v29 >> 1;
  v27 = __OFSUB__(v30, v7);
  v31 = v30 - v7;
  if (!v27)
  {
    v5[2] = v31;
    return (uint64_t)v5;
  }
  __break(1u);
  return result;
}

uint64_t sub_1CA0DEBB0(unint64_t a1)
{
  uint64_t v2;
  uint64_t result;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;
  unint64_t v9;
  int64_t v10;
  uint64_t v11;
  _QWORD *v12;
  int64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  BOOL v19;
  uint64_t v20;
  _QWORD *v21;
  void *v22;
  id v23;
  unint64_t v24;
  int64_t v25;
  uint64_t v26;
  _QWORD *v27;
  int64_t v28;
  uint64_t v29;
  uint64_t v30;
  _QWORD *v31;
  uint64_t v32;
  uint64_t v33;
  id v35;
  id v36;
  unint64_t v37;
  unint64_t v38;
  uint64_t v39;

  if (a1 >> 62)
    goto LABEL_52;
  v2 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
  result = swift_bridgeObjectRetain();
  if (v2)
  {
    while (1)
    {
      if (v2 < 1)
      {
        __break(1u);
        goto LABEL_59;
      }
      if ((a1 & 0xC000000000000001) == 0)
        break;
      v4 = 0;
      v5 = 0;
      v6 = (_QWORD *)MEMORY[0x1E0DEE9D8];
      v7 = (_QWORD *)(MEMORY[0x1E0DEE9D8] + 32);
      while (1)
      {
        v8 = MEMORY[0x1CAA4A7A4](v5, a1);
        if (!v4)
        {
          v9 = v6[3];
          if ((uint64_t)((v9 >> 1) + 0x4000000000000000) < 0)
            goto LABEL_50;
          v10 = v9 & 0xFFFFFFFFFFFFFFFELL;
          if (v10 <= 1)
            v11 = 1;
          else
            v11 = v10;
          __swift_instantiateConcreteTypeFromMangledName(&qword_1EF937B18);
          v12 = (_QWORD *)swift_allocObject();
          v13 = _swift_stdlib_malloc_size(v12);
          v14 = v13 - 32;
          if (v13 < 32)
            v14 = v13 - 17;
          v15 = v14 >> 4;
          v12[2] = v11;
          v12[3] = 2 * (v14 >> 4);
          v16 = (unint64_t)(v12 + 4);
          v17 = v6[3] >> 1;
          if (v6[2])
          {
            if (v12 != v6 || v16 >= (unint64_t)&v6[2 * v17 + 4])
              memmove(v12 + 4, v6 + 4, 16 * v17);
            v6[2] = 0;
          }
          v7 = (_QWORD *)(v16 + 16 * v17);
          v4 = (v15 & 0x7FFFFFFFFFFFFFFFLL) - v17;
          swift_release();
          v6 = v12;
        }
        v19 = __OFSUB__(v4--, 1);
        if (v19)
          break;
        *v7 = v5;
        v7[1] = v8;
        v7 += 2;
        if (v2 == ++v5)
          goto LABEL_47;
      }
      __break(1u);
LABEL_49:
      __break(1u);
LABEL_50:
      __break(1u);
LABEL_51:
      __break(1u);
LABEL_52:
      swift_bridgeObjectRetain();
      result = sub_1CA1F1234();
      v2 = result;
      if (!result)
        goto LABEL_53;
    }
    v4 = 0;
    v20 = 0;
    v6 = (_QWORD *)MEMORY[0x1E0DEE9D8];
    v21 = (_QWORD *)(MEMORY[0x1E0DEE9D8] + 32);
    do
    {
      v22 = *(void **)(a1 + 8 * v20 + 32);
      if (v4)
      {
        v23 = v22;
        v19 = __OFSUB__(v4--, 1);
        if (v19)
          goto LABEL_49;
      }
      else
      {
        v24 = v6[3];
        if ((uint64_t)((v24 >> 1) + 0x4000000000000000) < 0)
          goto LABEL_51;
        v25 = v24 & 0xFFFFFFFFFFFFFFFELL;
        if (v25 <= 1)
          v26 = 1;
        else
          v26 = v25;
        __swift_instantiateConcreteTypeFromMangledName(&qword_1EF937B18);
        v27 = (_QWORD *)swift_allocObject();
        v28 = _swift_stdlib_malloc_size(v27);
        v29 = v28 - 32;
        if (v28 < 32)
          v29 = v28 - 17;
        v30 = v29 >> 4;
        v27[2] = v26;
        v27[3] = 2 * (v29 >> 4);
        v31 = v27 + 4;
        v32 = v6[3] >> 1;
        v21 = &v27[2 * v32 + 4];
        v33 = (v30 & 0x7FFFFFFFFFFFFFFFLL) - v32;
        if (v6[2])
        {
          if (v27 != v6 || v31 >= &v6[2 * v32 + 4])
            memmove(v31, v6 + 4, 16 * v32);
          v35 = v22;
          v6[2] = 0;
        }
        else
        {
          v36 = v22;
        }
        swift_release();
        v6 = v27;
        v19 = __OFSUB__(v33, 1);
        v4 = v33 - 1;
        if (v19)
          goto LABEL_49;
      }
      *v21 = v20;
      v21[1] = v22;
      v21 += 2;
      ++v20;
    }
    while (v2 != v20);
LABEL_47:
    result = swift_bridgeObjectRelease();
  }
  else
  {
LABEL_53:
    result = swift_bridgeObjectRelease();
    v4 = 0;
    v6 = (_QWORD *)MEMORY[0x1E0DEE9D8];
  }
  v37 = v6[3];
  if (v37 < 2)
    return (uint64_t)v6;
  v38 = v37 >> 1;
  v19 = __OFSUB__(v38, v4);
  v39 = v38 - v4;
  if (!v19)
  {
    v6[2] = v39;
    return (uint64_t)v6;
  }
LABEL_59:
  __break(1u);
  return result;
}

uint64_t sub_1CA0DEE7C(uint64_t a1)
{
  uint64_t v2;
  uint64_t result;
  uint64_t v4;
  unint64_t v5;
  _QWORD *v6;
  _DWORD *v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  int v13;
  unint64_t v14;
  int64_t v15;
  uint64_t v16;
  _QWORD *v17;
  int64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  const void *v23;
  uint64_t v24;
  BOOL v25;
  unint64_t v26;
  unint64_t v27;
  uint64_t v28;

  v2 = a1 + 32;
  result = swift_bridgeObjectRetain();
  v4 = 0;
  v5 = 0;
  v6 = (_QWORD *)MEMORY[0x1E0DEE9D8];
  v7 = (_DWORD *)(MEMORY[0x1E0DEE9D8] + 32);
LABEL_3:
  v9 = *(_QWORD *)(a1 + 16);
  if (v5 != v9)
  {
    if (v5 >= v9)
    {
LABEL_31:
      __break(1u);
    }
    else
    {
      while (1)
      {
        v10 = *(_QWORD *)(v2 + 8 * v5);
        swift_bridgeObjectRetain();
        result = swift_bridgeObjectRelease();
        if (v10)
        {
          v8 = *(_QWORD *)(v10 + 16);
          if (v8)
            break;
        }
        ++v5;
        v11 = *(_QWORD *)(a1 + 16);
        if (v5 == v11)
          goto LABEL_27;
        if (v5 >= v11)
          goto LABEL_31;
      }
      v12 = 0;
      ++v5;
      while (v12 < v8)
      {
        v13 = *(_DWORD *)(v10 + 4 * v12 + 32);
        if (!v4)
        {
          v14 = v6[3];
          if ((uint64_t)((v14 >> 1) + 0x4000000000000000) < 0)
            goto LABEL_34;
          v15 = v14 & 0xFFFFFFFFFFFFFFFELL;
          if (v15 <= 1)
            v16 = 1;
          else
            v16 = v15;
          __swift_instantiateConcreteTypeFromMangledName(&qword_1ED8527F0);
          v17 = (_QWORD *)swift_allocObject();
          v18 = _swift_stdlib_malloc_size(v17);
          v19 = v18 - 32;
          if (v18 < 32)
            v19 = v18 - 29;
          v20 = v19 >> 2;
          v17[2] = v16;
          v17[3] = 2 * (v19 >> 2);
          v21 = (unint64_t)(v17 + 4);
          v22 = v6[3] >> 1;
          if (v6[2])
          {
            v23 = v6 + 4;
            if (v17 != v6 || v21 >= (unint64_t)v23 + 4 * v22)
            {
              v24 = v19 >> 2;
              memmove(v17 + 4, v23, 4 * v22);
              v20 = v24;
            }
            v6[2] = 0;
          }
          v7 = (_DWORD *)(v21 + 4 * v22);
          v4 = (v20 & 0x7FFFFFFFFFFFFFFFLL) - v22;
          result = swift_release();
          v6 = v17;
        }
        v25 = __OFSUB__(v4--, 1);
        if (v25)
          goto LABEL_33;
        ++v12;
        *v7++ = v13;
        v8 = *(_QWORD *)(v10 + 16);
        if (v12 == v8)
          goto LABEL_3;
      }
    }
    __break(1u);
LABEL_33:
    __break(1u);
LABEL_34:
    __break(1u);
    goto LABEL_35;
  }
LABEL_27:
  swift_bridgeObjectRelease();
  result = swift_bridgeObjectRelease();
  v26 = v6[3];
  if (v26 < 2)
    return (uint64_t)v6;
  v27 = v26 >> 1;
  v25 = __OFSUB__(v27, v4);
  v28 = v27 - v4;
  if (!v25)
  {
    v6[2] = v28;
    return (uint64_t)v6;
  }
LABEL_35:
  __break(1u);
  return result;
}

uint64_t sub_1CA0DF06C(uint64_t result)
{
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  unint64_t v8;
  int64_t v9;
  uint64_t v10;
  _QWORD *v11;
  int64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  BOOL v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;

  v1 = *(_QWORD *)(result + 16);
  v2 = (_QWORD *)MEMORY[0x1E0DEE9D8];
  if (v1)
  {
    v3 = result;
    result = swift_bridgeObjectRetain();
    v4 = 0;
    v5 = 0;
    v6 = v2 + 4;
    while (1)
    {
      v7 = *(_QWORD *)(v3 + 8 * v5 + 32);
      if (!v4)
      {
        v8 = v2[3];
        if ((uint64_t)((v8 >> 1) + 0x4000000000000000) < 0)
          goto LABEL_28;
        v9 = v8 & 0xFFFFFFFFFFFFFFFELL;
        if (v9 <= 1)
          v10 = 1;
        else
          v10 = v9;
        __swift_instantiateConcreteTypeFromMangledName(&qword_1EF937AE0);
        v11 = (_QWORD *)swift_allocObject();
        v12 = _swift_stdlib_malloc_size(v11);
        v13 = v12 - 32;
        if (v12 < 32)
          v13 = v12 - 17;
        v14 = v13 >> 4;
        v11[2] = v10;
        v11[3] = 2 * (v13 >> 4);
        v15 = (unint64_t)(v11 + 4);
        v16 = v2[3] >> 1;
        if (v2[2])
        {
          if (v11 != v2 || v15 >= (unint64_t)&v2[2 * v16 + 4])
            memmove(v11 + 4, v2 + 4, 16 * v16);
          v2[2] = 0;
        }
        v6 = (_QWORD *)(v15 + 16 * v16);
        v4 = (v14 & 0x7FFFFFFFFFFFFFFFLL) - v16;
        result = swift_release();
        v2 = v11;
      }
      v18 = __OFSUB__(v4--, 1);
      if (v18)
        break;
      *v6 = v5;
      v6[1] = v7;
      v6 += 2;
      if (v1 == ++v5)
      {
        result = swift_bridgeObjectRelease();
        goto LABEL_23;
      }
    }
    __break(1u);
LABEL_28:
    __break(1u);
    goto LABEL_29;
  }
  v4 = 0;
LABEL_23:
  v19 = v2[3];
  if (v19 < 2)
    return (uint64_t)v2;
  v20 = v19 >> 1;
  v18 = __OFSUB__(v20, v4);
  v21 = v20 - v4;
  if (!v18)
  {
    v2[2] = v21;
    return (uint64_t)v2;
  }
LABEL_29:
  __break(1u);
  return result;
}

uint64_t sub_1CA0DF1E4(uint64_t a1)
{
  uint64_t v2;
  uint64_t result;
  uint64_t v4;
  unint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  int64_t v15;
  uint64_t v16;
  _QWORD *v17;
  int64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  const void *v23;
  uint64_t v24;
  BOOL v25;
  unint64_t v26;
  unint64_t v27;
  uint64_t v28;

  v2 = a1 + 32;
  result = swift_bridgeObjectRetain();
  v4 = 0;
  v5 = 0;
  v6 = (_QWORD *)MEMORY[0x1E0DEE9D8];
  v7 = (_QWORD *)(MEMORY[0x1E0DEE9D8] + 32);
LABEL_3:
  v9 = *(_QWORD *)(a1 + 16);
  if (v5 != v9)
  {
    if (v5 >= v9)
    {
LABEL_31:
      __break(1u);
    }
    else
    {
      while (1)
      {
        v10 = *(_QWORD *)(v2 + 8 * v5);
        swift_bridgeObjectRetain();
        result = swift_bridgeObjectRelease();
        if (v10)
        {
          v8 = *(_QWORD *)(v10 + 16);
          if (v8)
            break;
        }
        ++v5;
        v11 = *(_QWORD *)(a1 + 16);
        if (v5 == v11)
          goto LABEL_27;
        if (v5 >= v11)
          goto LABEL_31;
      }
      v12 = 0;
      ++v5;
      while (v12 < v8)
      {
        v13 = *(_QWORD *)(v10 + 8 * v12 + 32);
        if (!v4)
        {
          v14 = v6[3];
          if ((uint64_t)((v14 >> 1) + 0x4000000000000000) < 0)
            goto LABEL_34;
          v15 = v14 & 0xFFFFFFFFFFFFFFFELL;
          if (v15 <= 1)
            v16 = 1;
          else
            v16 = v15;
          __swift_instantiateConcreteTypeFromMangledName(qword_1ED852848);
          v17 = (_QWORD *)swift_allocObject();
          v18 = _swift_stdlib_malloc_size(v17);
          v19 = v18 - 32;
          if (v18 < 32)
            v19 = v18 - 25;
          v20 = v19 >> 3;
          v17[2] = v16;
          v17[3] = 2 * (v19 >> 3);
          v21 = (unint64_t)(v17 + 4);
          v22 = v6[3] >> 1;
          if (v6[2])
          {
            v23 = v6 + 4;
            if (v17 != v6 || v21 >= (unint64_t)v23 + 8 * v22)
            {
              v24 = v19 >> 3;
              memmove(v17 + 4, v23, 8 * v22);
              v20 = v24;
            }
            v6[2] = 0;
          }
          v7 = (_QWORD *)(v21 + 8 * v22);
          v4 = (v20 & 0x7FFFFFFFFFFFFFFFLL) - v22;
          result = swift_release();
          v6 = v17;
        }
        v25 = __OFSUB__(v4--, 1);
        if (v25)
          goto LABEL_33;
        ++v12;
        *v7++ = v13;
        v8 = *(_QWORD *)(v10 + 16);
        if (v12 == v8)
          goto LABEL_3;
      }
    }
    __break(1u);
LABEL_33:
    __break(1u);
LABEL_34:
    __break(1u);
    goto LABEL_35;
  }
LABEL_27:
  swift_bridgeObjectRelease();
  result = swift_bridgeObjectRelease();
  v26 = v6[3];
  if (v26 < 2)
    return (uint64_t)v6;
  v27 = v26 >> 1;
  v25 = __OFSUB__(v27, v4);
  v28 = v27 - v4;
  if (!v25)
  {
    v6[2] = v28;
    return (uint64_t)v6;
  }
LABEL_35:
  __break(1u);
  return result;
}

unint64_t sub_1CA0DF3D4(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  unint64_t result;
  uint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  id v11;
  uint64_t v12;

  v3 = *(_QWORD *)(a1 + 16);
  result = MEMORY[0x1E0DEE9D8];
  if (v3)
  {
    v12 = MEMORY[0x1E0DEE9D8];
    result = sub_1CA1F10F0();
    v6 = *(_QWORD *)(a2 + 24);
    if (v6)
    {
      v7 = (uint64_t *)(a1 + 32);
      v8 = *(_QWORD *)(a2 + 48);
      while (1)
      {
        v10 = *v7++;
        v9 = v10;
        if (v6 == -1 && v9 == 0x8000000000000000)
          break;
        result = v9 % v6;
        if ((v8 & 0xC000000000000001) != 0)
        {
          MEMORY[0x1CAA4A7A4](result, v8);
        }
        else
        {
          if ((result & 0x8000000000000000) != 0)
            goto LABEL_15;
          if (result >= *(_QWORD *)((v8 & 0xFFFFFFFFFFFFFF8) + 0x10))
            goto LABEL_16;
          v11 = *(id *)(v8 + 32 + 8 * result);
        }
        sub_1CA1F10CC();
        sub_1CA1F10FC();
        sub_1CA1F1108();
        result = sub_1CA1F10D8();
        if (!--v3)
          return v12;
      }
      __break(1u);
LABEL_15:
      __break(1u);
LABEL_16:
      __break(1u);
    }
    __break(1u);
  }
  return result;
}

unint64_t sub_1CA0DF510(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  unint64_t result;
  uint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  id v11;
  uint64_t v12;

  v3 = *(_QWORD *)(a1 + 16);
  result = MEMORY[0x1E0DEE9D8];
  if (v3)
  {
    v12 = MEMORY[0x1E0DEE9D8];
    result = sub_1CA1F10F0();
    v6 = *(_QWORD *)(a2 + 24);
    if (v6)
    {
      v7 = (uint64_t *)(a1 + 32);
      v8 = *(_QWORD *)(a2 + 40);
      while (1)
      {
        v10 = *v7++;
        v9 = v10;
        if (v6 == -1 && v9 == 0x8000000000000000)
          break;
        result = v9 / v6;
        if ((v8 & 0xC000000000000001) != 0)
        {
          MEMORY[0x1CAA4A7A4](result, v8);
        }
        else
        {
          if ((result & 0x8000000000000000) != 0)
            goto LABEL_15;
          if (result >= *(_QWORD *)((v8 & 0xFFFFFFFFFFFFFF8) + 0x10))
            goto LABEL_16;
          v11 = *(id *)(v8 + 32 + 8 * result);
        }
        sub_1CA1F10CC();
        sub_1CA1F10FC();
        sub_1CA1F1108();
        result = sub_1CA1F10D8();
        if (!--v3)
          return v12;
      }
      __break(1u);
LABEL_15:
      __break(1u);
LABEL_16:
      __break(1u);
    }
    __break(1u);
  }
  return result;
}

unint64_t sub_1CA0DF648(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  unint64_t result;
  unint64_t *v6;
  uint64_t v7;
  unint64_t v8;
  id v9;
  uint64_t v10;

  v3 = *(_QWORD *)(a1 + 16);
  result = MEMORY[0x1E0DEE9D8];
  if (!v3)
    return result;
  v10 = MEMORY[0x1E0DEE9D8];
  sub_1CA1F10F0();
  v6 = (unint64_t *)(a1 + 32);
  v7 = *(_QWORD *)(a2 + 40);
  while (1)
  {
    v8 = *v6++;
    result = v8;
    if ((v7 & 0xC000000000000001) != 0)
    {
      MEMORY[0x1CAA4A7A4](result, v7);
      goto LABEL_4;
    }
    if ((result & 0x8000000000000000) != 0)
      break;
    if (result >= *(_QWORD *)((v7 & 0xFFFFFFFFFFFFFF8) + 0x10))
      goto LABEL_12;
    v9 = *(id *)(v7 + 32 + 8 * result);
LABEL_4:
    sub_1CA1F10CC();
    sub_1CA1F10FC();
    sub_1CA1F1108();
    sub_1CA1F10D8();
    if (!--v3)
      return v10;
  }
  __break(1u);
LABEL_12:
  __break(1u);
  return result;
}

id sub_1CA0DF748(uint64_t a1, uint64_t a2)
{
  int64_t v2;
  uint64_t v3;
  id result;
  uint64_t v7;
  uint64_t v8;
  uint64_t *i;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  void *v15;
  unint64_t v16;
  id v17;
  unint64_t v18;
  unint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  uint64_t v22;

  v2 = *(_QWORD *)(a1 + 16);
  v3 = MEMORY[0x1E0DEE9D8];
  if (!v2)
    return (id)v3;
  v22 = MEMORY[0x1E0DEE9D8];
  result = (id)sub_1CA0CD62C(0, v2, 0);
  v7 = *(_QWORD *)(a2 + 24);
  if (v7)
  {
    v8 = *(_QWORD *)(a2 + 40);
    v3 = v22;
    v21 = v8 + 32;
    for (i = (uint64_t *)(a1 + 40); ; i += 2)
    {
      v10 = *(i - 1);
      v11 = *i;
      if (v7 == -1 && v10 == 0x8000000000000000)
        break;
      v12 = v10 / v7;
      if ((v8 & 0xC000000000000001) != 0)
      {
        v13 = MEMORY[0x1CAA4A7A4](v10 / v7, v8);
        result = (id)MEMORY[0x1CAA4A7A4](v10 % v7, v8);
      }
      else
      {
        if ((v12 & 0x8000000000000000) != 0)
          goto LABEL_18;
        v14 = *(_QWORD *)((v8 & 0xFFFFFFFFFFFFFF8) + 0x10);
        if (v12 >= v14)
          goto LABEL_19;
        v15 = *(void **)(v21 + 8 * v12);
        v16 = v10 % v7;
        result = v15;
        if (v10 % v7 < 0)
          goto LABEL_20;
        if (v16 >= v14)
          goto LABEL_21;
        v13 = (uint64_t)result;
        result = *(id *)(v21 + 8 * v16);
      }
      v17 = result;
      v19 = *(_QWORD *)(v22 + 16);
      v18 = *(_QWORD *)(v22 + 24);
      if (v19 >= v18 >> 1)
        result = (id)sub_1CA0CD62C(v18 > 1, v19 + 1, 1);
      *(_QWORD *)(v22 + 16) = v19 + 1;
      v20 = (_QWORD *)(v22 + 24 * v19);
      v20[4] = v13;
      v20[5] = v17;
      v20[6] = v11;
      if (!--v2)
        return (id)v3;
    }
    __break(1u);
LABEL_18:
    __break(1u);
LABEL_19:
    __break(1u);
LABEL_20:
    __break(1u);
LABEL_21:
    __break(1u);
  }
  __break(1u);
  return result;
}

uint64_t sub_1CA0DF8F4(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  int64_t v4;
  uint64_t v5;
  uint64_t *i;
  uint64_t v9;
  __int128 v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  __int128 v16;
  _QWORD v17[2];
  __int128 v18;
  uint64_t v19;
  uint64_t v20;

  v3 = v2;
  v4 = *(_QWORD *)(a1 + 16);
  v5 = MEMORY[0x1E0DEE9D8];
  if (v4)
  {
    v20 = MEMORY[0x1E0DEE9D8];
    sub_1CA0CD62C(0, v4, 0);
    v5 = v20;
    for (i = (uint64_t *)(a1 + 40); ; i += 2)
    {
      v9 = *i;
      v17[0] = *(i - 1);
      v17[1] = v9;
      sub_1CA0D9288((unint64_t)v17, a2, &v18);
      if (v3)
        break;
      v3 = 0;
      v10 = v18;
      v11 = v19;
      v20 = v5;
      v13 = *(_QWORD *)(v5 + 16);
      v12 = *(_QWORD *)(v5 + 24);
      if (v13 >= v12 >> 1)
      {
        v16 = v18;
        sub_1CA0CD62C(v12 > 1, v13 + 1, 1);
        v10 = v16;
        v5 = v20;
      }
      *(_QWORD *)(v5 + 16) = v13 + 1;
      v14 = v5 + 24 * v13;
      *(_OWORD *)(v14 + 32) = v10;
      *(_QWORD *)(v14 + 48) = v11;
      if (!--v4)
        return v5;
    }
    swift_release();
  }
  return v5;
}

uint64_t sub_1CA0DFA18(uint64_t a1, unint64_t a2)
{
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  id v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  id v13;
  void *v14;
  char v15;
  uint64_t v16;
  char v17;
  uint64_t v18;
  id v19;
  char v20;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;
  uint64_t v26;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  uint64_t v33;
  unint64_t v34;
  unint64_t v35;

  v3 = a1;
  v4 = *(_QWORD *)(a1 + 40);
  if (v4 >> 62)
    goto LABEL_48;
  v5 = *(_QWORD *)((v4 & 0xFFFFFFFFFFFFF8) + 0x10);
LABEL_3:
  swift_retain();
  if (v5)
  {
    v6 = v4;
    v4 = 0;
    v33 = v6 & 0xFFFFFFFFFFFFFF8;
    v34 = v6 & 0xC000000000000001;
    v28 = v6;
    v32 = v6 + 32;
    v30 = v5;
    v31 = MEMORY[0x1E0DEE9D8];
    v35 = a2 & 0xC000000000000001;
    v29 = v3;
    while (1)
    {
      while (1)
      {
        v7 = v4 + 1;
        if (__OFADD__(v4, 1))
        {
LABEL_45:
          __break(1u);
LABEL_46:
          __break(1u);
LABEL_47:
          __break(1u);
LABEL_48:
          swift_bridgeObjectRetain();
          v5 = sub_1CA1F1234();
          swift_bridgeObjectRelease();
          goto LABEL_3;
        }
        if (v34)
        {
          v8 = (id)MEMORY[0x1CAA4A7A4](v4, v28);
        }
        else
        {
          if (v4 >= *(_QWORD *)(v33 + 16))
            goto LABEL_46;
          v8 = *(id *)(v32 + 8 * v4);
        }
        v9 = v8;
        v10 = *(_QWORD *)(v3 + 32);
        if (v4 >= *(_QWORD *)(v10 + 16))
          goto LABEL_47;
        v11 = *(_QWORD *)(v10 + 8 * v4 + 32);
        if (a2 >> 62)
        {
          swift_bridgeObjectRetain();
          v12 = sub_1CA1F1234();
        }
        else
        {
          v12 = *(_QWORD *)((a2 & 0xFFFFFFFFFFFFFF8) + 0x10);
          swift_bridgeObjectRetain();
        }
        ++v4;
        if (v12)
          break;
LABEL_37:
        swift_bridgeObjectRelease();
LABEL_30:
        isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
        v22 = v31;
        if ((isUniquelyReferenced_nonNull_native & 1) == 0)
        {
          sub_1CA0CD5C0(0, *(_QWORD *)(v31 + 16) + 1, 1);
          v22 = v31;
        }
        v23 = v22;
        v25 = *(_QWORD *)(v22 + 16);
        v24 = *(_QWORD *)(v22 + 24);
        if (v25 >= v24 >> 1)
        {
          sub_1CA0CD5C0(v24 > 1, v25 + 1, 1);
          v23 = v31;
        }
        *(_QWORD *)(v23 + 16) = v25 + 1;
        v31 = v23;
        v26 = v23 + 16 * v25;
        *(_QWORD *)(v26 + 32) = v9;
        *(_QWORD *)(v26 + 40) = v11;
        v5 = v30;
        if (v7 == v30)
          goto LABEL_42;
      }
      if (v35)
        v13 = (id)MEMORY[0x1CAA4A7A4](0, a2);
      else
        v13 = *(id *)(a2 + 32);
      v14 = v13;
      sub_1CA0AB910(0, (unint64_t *)&qword_1EF93A320);
      v15 = sub_1CA1F0E68();

      if ((v15 & 1) == 0)
      {
        if (v12 != 1)
        {
          if (v35)
          {
            v16 = 1;
            while (1)
            {
              MEMORY[0x1CAA4A7A4](v16, a2);
              v3 = v16 + 1;
              if (__OFADD__(v16, 1))
                break;
              v17 = sub_1CA1F0E68();
              swift_unknownObjectRelease();
              if ((v17 & 1) != 0)
                goto LABEL_36;
              ++v16;
              if (v3 == v12)
                goto LABEL_29;
            }
            __break(1u);
          }
          else
          {
            v18 = 5;
            while (1)
            {
              v3 = v18 - 3;
              if (__OFADD__(v18 - 4, 1))
                break;
              v19 = *(id *)(a2 + 8 * v18);
              v20 = sub_1CA1F0E68();

              if ((v20 & 1) != 0)
              {
LABEL_36:

                swift_bridgeObjectRelease();
                v3 = v29;
                v5 = v30;
                goto LABEL_6;
              }
              ++v18;
              if (v3 == v12)
              {
LABEL_29:
                swift_bridgeObjectRelease();
                v3 = v29;
                goto LABEL_30;
              }
            }
          }
          __break(1u);
          goto LABEL_45;
        }
        goto LABEL_37;
      }

      swift_bridgeObjectRelease();
LABEL_6:
      if (v7 == v5)
        goto LABEL_42;
    }
  }
  v31 = MEMORY[0x1E0DEE9D8];
LABEL_42:
  swift_release();
  return v31;
}

uint64_t sub_1CA0DFD8C(unint64_t a1, uint64_t a2, int a3, double a4, double a5)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t i;
  unint64_t v12;
  id v13;
  id v14;
  uint64_t v15;
  double v16;
  BOOL v17;
  _BOOL4 v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  uint64_t v22;
  unint64_t v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v29;

  if (!(a1 >> 62))
  {
    v8 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
    if (v8)
      goto LABEL_3;
    return MEMORY[0x1E0DEE9D8];
  }
LABEL_30:
  v8 = sub_1CA1F1234();
  if (!v8)
    return MEMORY[0x1E0DEE9D8];
LABEL_3:
  v9 = 0;
  v10 = MEMORY[0x1E0DEE9D8];
  do
  {
    v25 = v10;
    for (i = v9 + 4; ; ++i)
    {
      v12 = i - 4;
      if ((a1 & 0xC000000000000001) != 0)
      {
        v13 = (id)MEMORY[0x1CAA4A7A4](i - 4, a1);
      }
      else
      {
        if (v12 >= *(_QWORD *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10))
        {
          __break(1u);
LABEL_28:
          __break(1u);
LABEL_29:
          __break(1u);
          goto LABEL_30;
        }
        v13 = *(id *)(a1 + 8 * i);
      }
      v14 = v13;
      v9 = i - 3;
      if (__OFADD__(v12, 1))
        goto LABEL_28;
      v15 = *(_QWORD *)(a2 + 32);
      if (v12 >= *(_QWORD *)(v15 + 16))
        goto LABEL_29;
      v16 = *(double *)(v15 + 8 * i);
      v17 = v16 < a4 || v16 > a5;
      if (!v17 && (a3 & 1) == 0)
        break;
      v18 = v16 > a4;
      if (v16 >= a5)
        v18 = 0;
      if (((v18 | a3 ^ 1) & 1) == 0)
        break;

      if (v9 == v8)
        return v25;
    }
    v10 = v25;
    v29 = v25;
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    {
      sub_1CA0CD610(0, *(_QWORD *)(v25 + 16) + 1, 1);
      v10 = v25;
    }
    v20 = *(_QWORD *)(v10 + 16);
    v19 = *(_QWORD *)(v10 + 24);
    v21 = v20 + 1;
    if (v20 >= v19 >> 1)
    {
      v26 = v20 + 1;
      v24 = *(_QWORD *)(v10 + 16);
      sub_1CA0CD610(v19 > 1, v20 + 1, 1);
      v21 = v26;
      v20 = v24;
      v10 = v29;
    }
    *(_QWORD *)(v10 + 16) = v21;
    v22 = v10 + 16 * v20;
    *(_QWORD *)(v22 + 32) = v12;
    *(_QWORD *)(v22 + 40) = v14;
  }
  while (v9 != v8);
  return v10;
}

uint64_t sub_1CA0DFF78(char *__src, char *a2, unint64_t a3, char *__dst, uint64_t a5)
{
  unint64_t *v6;
  char *v8;
  char *v9;
  int64_t v10;
  int64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t *v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  char *v20;
  unint64_t *v21;
  uint64_t v22;
  char *v23;
  unint64_t v24;
  unint64_t v25;
  char *v26;
  unint64_t v27;
  char *v28;
  uint64_t result;
  unint64_t *v30;
  unint64_t *v31;
  char *v32;

  v6 = (unint64_t *)__dst;
  v8 = a2;
  v9 = __src;
  v10 = a2 - __src;
  v11 = a2 - __src + 15;
  if (a2 - __src >= 0)
    v11 = a2 - __src;
  v12 = v11 >> 4;
  v13 = a3 - (_QWORD)a2;
  v14 = a3 - (_QWORD)a2 + 15;
  if ((uint64_t)(a3 - (_QWORD)a2) >= 0)
    v14 = a3 - (_QWORD)a2;
  v15 = v14 >> 4;
  v32 = __src;
  v31 = (unint64_t *)__dst;
  if (v12 >= v14 >> 4)
  {
    if (v13 >= -15)
    {
      if (__dst != a2 || &a2[16 * v15] <= __dst)
        memmove(__dst, a2, 16 * v15);
      v21 = &v6[2 * v15];
      v30 = v21;
      v32 = v8;
      if (v9 < v8 && v13 >= 16)
      {
        v22 = *(_QWORD *)(a5 + 32);
        v23 = (char *)(a3 - 16);
        while (1)
        {
          v24 = *(v21 - 2);
          if ((v24 & 0x8000000000000000) != 0)
            break;
          v25 = *(_QWORD *)(v22 + 16);
          if (v24 >= v25)
            goto LABEL_51;
          v26 = v8 - 16;
          v27 = *((_QWORD *)v8 - 2);
          if (v27 >= v25)
            goto LABEL_52;
          v28 = v23 + 16;
          if (*(double *)(v22 + 32 + 8 * v24) >= *(double *)(v22 + 32 + 8 * v27))
          {
            v30 = v21 - 2;
            if (v28 < (char *)v21 || v23 >= (char *)v21 || v28 != (char *)v21)
              *(_OWORD *)v23 = *((_OWORD *)v21 - 1);
            v26 = v8;
            v21 -= 2;
            if (v8 <= v9)
              goto LABEL_49;
          }
          else
          {
            if (v28 != v8 || v23 >= v8)
              *(_OWORD *)v23 = *(_OWORD *)v26;
            v32 = v8 - 16;
            if (v26 <= v9)
              goto LABEL_49;
          }
          v23 -= 16;
          v8 = v26;
          if (v21 <= v6)
            goto LABEL_49;
        }
        __break(1u);
LABEL_51:
        __break(1u);
LABEL_52:
        __break(1u);
        goto LABEL_53;
      }
LABEL_49:
      sub_1CA13B3D0((void **)&v32, (const void **)&v31, &v30);
      return 1;
    }
  }
  else if (v10 >= -15)
  {
    if (__dst != __src || &__src[16 * v12] <= __dst)
      memmove(__dst, __src, 16 * v12);
    v16 = &v6[2 * v12];
    v30 = v16;
    if ((unint64_t)v8 < a3 && v10 >= 16)
    {
      v17 = *(_QWORD *)(a5 + 32);
      while (1)
      {
        v18 = *(_QWORD *)v8;
        if ((*(_QWORD *)v8 & 0x8000000000000000) != 0)
          break;
        v19 = *(_QWORD *)(v17 + 16);
        if (v18 >= v19)
          goto LABEL_54;
        if (*v6 >= v19)
          goto LABEL_55;
        if (*(double *)(v17 + 32 + 8 * v18) >= *(double *)(v17 + 32 + 8 * *v6))
        {
          if (v9 != (char *)v6)
            *(_OWORD *)v9 = *(_OWORD *)v6;
          v6 += 2;
          v31 = v6;
          v20 = v8;
        }
        else
        {
          v20 = v8 + 16;
          if (v9 < v8 || v9 >= v20 || v9 != v8)
            *(_OWORD *)v9 = *(_OWORD *)v8;
        }
        v9 += 16;
        if (v6 < v16)
        {
          v8 = v20;
          if ((unint64_t)v20 < a3)
            continue;
        }
        v32 = v9;
        goto LABEL_49;
      }
LABEL_53:
      __break(1u);
LABEL_54:
      __break(1u);
LABEL_55:
      __break(1u);
      goto LABEL_56;
    }
    goto LABEL_49;
  }
LABEL_56:
  swift_release();
  result = sub_1CA1F1270();
  __break(1u);
  return result;
}

uint64_t sub_1CA0E0264(uint64_t result, uint64_t a2, uint64_t a3, uint64_t *a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;

  if (a3 != a2)
  {
    v5 = *a4;
    v6 = *(_QWORD *)(a5 + 32);
    v7 = *a4 + 16 * a3 - 16;
LABEL_5:
    v8 = *(_QWORD *)(v5 + 16 * a3);
    v9 = result;
    v10 = v7;
    while ((v8 & 0x8000000000000000) == 0)
    {
      v11 = *(_QWORD *)(v6 + 16);
      if (v8 >= v11)
        goto LABEL_14;
      if (*(_QWORD *)v10 >= v11)
        goto LABEL_15;
      if (*(double *)(v6 + 32 + 8 * v8) < *(double *)(v6 + 32 + 8 * *(_QWORD *)v10))
      {
        if (!v5)
          goto LABEL_16;
        v12 = *(_QWORD *)(v10 + 24);
        *(_OWORD *)(v10 + 16) = *(_OWORD *)v10;
        *(_QWORD *)v10 = v8;
        *(_QWORD *)(v10 + 8) = v12;
        v10 -= 16;
        if (a3 != ++v9)
          continue;
      }
      ++a3;
      v7 += 16;
      if (a3 == a2)
        return result;
      goto LABEL_5;
    }
    __break(1u);
LABEL_14:
    __break(1u);
LABEL_15:
    __break(1u);
LABEL_16:
    __break(1u);
  }
  return result;
}

uint64_t sub_1CA0E030C(uint64_t *a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  double v21;
  double v22;
  unint64_t *v23;
  double v24;
  unint64_t v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  uint64_t v37;
  uint64_t v38;
  unint64_t v39;
  uint64_t v40;
  unint64_t v41;
  unint64_t v42;
  unint64_t v43;
  char *v44;
  char *v45;
  unint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  char v50;
  char *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  BOOL v57;
  unint64_t v58;
  char *v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  char *v64;
  uint64_t v65;
  uint64_t v66;
  BOOL v67;
  uint64_t v68;
  char v69;
  char *v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  BOOL v74;
  uint64_t v75;
  uint64_t v76;
  char *v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  char *v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  unint64_t v85;
  char *v86;
  char *v87;
  uint64_t v88;
  unint64_t v89;
  char *v90;
  uint64_t v91;
  char *v92;
  char *v93;
  unint64_t v94;
  unint64_t v95;
  uint64_t v96;
  uint64_t v97;
  unint64_t v98;
  uint64_t v99;
  uint64_t v100;
  char *v101;
  char *v102;
  unint64_t v103;
  char *v104;
  unint64_t v105;
  uint64_t result;
  uint64_t v107;
  uint64_t *v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  char *v115;
  char *v116;
  uint64_t v117;
  char *v118;
  uint64_t v119;
  uint64_t v120;

  v5 = a1[1];
  swift_retain_n();
  v6 = sub_1CA1F12A0();
  if (v6 >= v5)
  {
    if ((v5 & 0x8000000000000000) == 0)
    {
      if (v5)
      {
        swift_retain();
        sub_1CA0E0264(0, v5, 1, a1, a2);
      }
      swift_release_n();
      return swift_release();
    }
    goto LABEL_151;
  }
  if (v5 >= 0)
    v7 = v5;
  else
    v7 = v5 + 1;
  if (v5 < -1)
    goto LABEL_159;
  v119 = a2;
  v111 = v6;
  v112 = v5;
  v120 = v2;
  v108 = a1;
  if (v5 < 2)
  {
    v10 = (char *)MEMORY[0x1E0DEE9D8];
    v118 = (char *)(MEMORY[0x1E0DEE9D8] + 32);
    v110 = MEMORY[0x1E0DEE9D8];
    if (v5 != 1)
    {
      v43 = *(_QWORD *)(MEMORY[0x1E0DEE9D8] + 16);
LABEL_108:
      if (v43 < 2)
      {
LABEL_119:
        swift_bridgeObjectRelease();
        *(_QWORD *)(v110 + 16) = 0;
        swift_release_n();
        swift_bridgeObjectRelease();
        return swift_release();
      }
      v97 = *v108;
      v117 = *v108;
      while (1)
      {
        v98 = v43 - 2;
        if (v43 < 2)
          break;
        if (!v97)
          goto LABEL_158;
        v99 = *(_QWORD *)&v10[16 * v98 + 32];
        v100 = *(_QWORD *)&v10[16 * v43 + 24];
        v101 = (char *)(v97 + 16 * v99);
        v102 = (char *)(v97 + 16 * *(_QWORD *)&v10[16 * v43 + 16]);
        v103 = v97 + 16 * v100;
        swift_retain();
        sub_1CA0DFF78(v101, v102, v103, v118, v119);
        if (v120)
        {
          v96 = v110;
          goto LABEL_105;
        }
        swift_release();
        if (v100 < v99)
          goto LABEL_143;
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
          v10 = sub_1CA13B478((uint64_t)v10);
        if (v98 >= *((_QWORD *)v10 + 2))
          goto LABEL_144;
        v104 = &v10[16 * v98 + 32];
        *(_QWORD *)v104 = v99;
        *((_QWORD *)v104 + 1) = v100;
        v105 = *((_QWORD *)v10 + 2);
        if (v43 > v105)
          goto LABEL_145;
        memmove(&v10[16 * v43 + 16], &v10[16 * v43 + 32], 16 * (v105 - v43));
        *((_QWORD *)v10 + 2) = v105 - 1;
        v43 = v105 - 1;
        v97 = v117;
        if (v105 <= 2)
          goto LABEL_119;
      }
LABEL_142:
      __break(1u);
LABEL_143:
      __break(1u);
LABEL_144:
      __break(1u);
LABEL_145:
      __break(1u);
LABEL_146:
      __break(1u);
LABEL_147:
      __break(1u);
LABEL_148:
      __break(1u);
LABEL_149:
      __break(1u);
      goto LABEL_150;
    }
  }
  else
  {
    v8 = v7 >> 1;
    __swift_instantiateConcreteTypeFromMangledName(&qword_1EF937B20);
    v9 = sub_1CA1F0B68();
    *(_QWORD *)(v9 + 16) = v8;
    v110 = v9;
    v118 = (char *)(v9 + 32);
  }
  v11 = 0;
  v12 = *a1;
  v109 = *a1 + 32;
  v107 = *a1 - 16;
  v10 = (char *)MEMORY[0x1E0DEE9D8];
  v13 = v5;
  v114 = *a1;
  while (1)
  {
    v14 = v11 + 1;
    if (v11 + 1 >= v13)
      goto LABEL_34;
    v15 = *(_QWORD *)(v12 + 16 * v14);
    if ((v15 & 0x8000000000000000) != 0)
      goto LABEL_147;
    v16 = *(_QWORD *)(a2 + 32);
    v17 = *(_QWORD *)(v16 + 16);
    if (v15 >= v17)
      goto LABEL_148;
    v18 = 16 * v11;
    v19 = *(_QWORD *)(v12 + 16 * v11);
    if (v19 >= v17)
      goto LABEL_149;
    v20 = v16 + 32;
    v21 = *(double *)(v20 + 8 * v15);
    v22 = *(double *)(v20 + 8 * v19);
    v14 = v11 + 2;
    if (v11 + 2 >= v13)
      goto LABEL_25;
    v23 = (unint64_t *)(v109 + 16 * v11);
    v24 = *(double *)(v20 + 8 * v15);
    do
    {
      v26 = *v23;
      v23 += 2;
      v25 = v26;
      if (v26 >= v17)
        goto LABEL_129;
      if (v15 >= v17)
      {
LABEL_130:
        __break(1u);
LABEL_131:
        __break(1u);
LABEL_132:
        __break(1u);
LABEL_133:
        __break(1u);
LABEL_134:
        __break(1u);
LABEL_135:
        __break(1u);
LABEL_136:
        __break(1u);
LABEL_137:
        __break(1u);
LABEL_138:
        __break(1u);
LABEL_139:
        __break(1u);
LABEL_140:
        __break(1u);
LABEL_141:
        __break(1u);
        goto LABEL_142;
      }
      if (v21 < v22 == *(double *)(v20 + 8 * v25) >= v24)
        goto LABEL_25;
      ++v14;
      v24 = *(double *)(v20 + 8 * v25);
      v15 = v25;
    }
    while (v13 != v14);
    v14 = v13;
LABEL_25:
    if (v21 < v22)
    {
      if (v14 >= v11)
      {
        if (v11 < v14)
        {
          v27 = 16 * v14;
          v28 = v14;
          v29 = v11;
          while (1)
          {
            if (v29 != --v28)
            {
              if (!v12)
                goto LABEL_157;
              v30 = v12 + v27;
              v31 = *(_QWORD *)(v12 + v18);
              v32 = *(_QWORD *)(v12 + v18 + 8);
              *(_OWORD *)(v12 + v18) = *(_OWORD *)(v12 + v27 - 16);
              *(_QWORD *)(v30 - 16) = v31;
              *(_QWORD *)(v30 - 8) = v32;
            }
            ++v29;
            v27 -= 16;
            v18 += 16;
            if (v29 >= v28)
              goto LABEL_34;
          }
        }
        goto LABEL_34;
      }
LABEL_154:
      __break(1u);
LABEL_155:
      swift_release_n();
      __break(1u);
LABEL_156:
      swift_release_n();
      __break(1u);
LABEL_157:
      swift_release_n();
      __break(1u);
LABEL_158:
      swift_release_n();
      __break(1u);
LABEL_159:
      swift_release_n();
      result = sub_1CA1F11BC();
      __break(1u);
      return result;
    }
LABEL_34:
    if (v14 < v13)
    {
      if (!__OFSUB__(v14, v11))
      {
        if (v14 - v11 >= v111)
          goto LABEL_53;
        v33 = v11 + v111;
        if (!__OFADD__(v11, v111))
        {
          if (v33 >= v13)
            v33 = v13;
          if (v33 >= v11)
          {
            if (v14 != v33)
            {
              v34 = *(_QWORD *)(a2 + 32);
              v35 = v107 + 16 * v14;
              do
              {
                v36 = *(_QWORD *)(v12 + 16 * v14);
                v37 = v11;
                v38 = v35;
                do
                {
                  if ((v36 & 0x8000000000000000) != 0)
                  {
                    __break(1u);
LABEL_123:
                    __break(1u);
LABEL_124:
                    __break(1u);
LABEL_125:
                    __break(1u);
LABEL_126:
                    __break(1u);
LABEL_127:
                    __break(1u);
LABEL_128:
                    __break(1u);
LABEL_129:
                    __break(1u);
                    goto LABEL_130;
                  }
                  v39 = *(_QWORD *)(v34 + 16);
                  if (v36 >= v39)
                    goto LABEL_123;
                  if (*(_QWORD *)v38 >= v39)
                    goto LABEL_124;
                  if (*(double *)(v34 + 32 + 8 * v36) >= *(double *)(v34 + 32 + 8 * *(_QWORD *)v38))
                    break;
                  if (!v12)
                    goto LABEL_155;
                  v40 = *(_QWORD *)(v38 + 24);
                  *(_OWORD *)(v38 + 16) = *(_OWORD *)v38;
                  *(_QWORD *)v38 = v36;
                  *(_QWORD *)(v38 + 8) = v40;
                  v38 -= 16;
                  ++v37;
                }
                while (v14 != v37);
                ++v14;
                v35 += 16;
              }
              while (v14 != v33);
              v14 = v33;
            }
            goto LABEL_53;
          }
LABEL_153:
          __break(1u);
          goto LABEL_154;
        }
LABEL_152:
        __break(1u);
        goto LABEL_153;
      }
LABEL_150:
      __break(1u);
LABEL_151:
      __break(1u);
      goto LABEL_152;
    }
LABEL_53:
    if (v14 < v11)
      goto LABEL_146;
    v113 = v14;
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      v10 = sub_1CA13B230(0, *((_QWORD *)v10 + 2) + 1, 1, v10);
    v42 = *((_QWORD *)v10 + 2);
    v41 = *((_QWORD *)v10 + 3);
    v43 = v42 + 1;
    if (v42 >= v41 >> 1)
      v10 = sub_1CA13B230((char *)(v41 > 1), v42 + 1, 1, v10);
    *((_QWORD *)v10 + 2) = v43;
    v44 = v10 + 32;
    v45 = &v10[16 * v42 + 32];
    *(_QWORD *)v45 = v11;
    *((_QWORD *)v45 + 1) = v113;
    if (v42)
      break;
    v43 = 1;
LABEL_102:
    v13 = v112;
    v11 = v113;
    if (v113 >= v112)
      goto LABEL_108;
  }
  v115 = v10 + 32;
  v116 = v10;
  while (1)
  {
    v46 = v43 - 1;
    if (v43 >= 4)
    {
      v51 = &v44[16 * v43];
      v52 = *((_QWORD *)v51 - 8);
      v53 = *((_QWORD *)v51 - 7);
      v57 = __OFSUB__(v53, v52);
      v54 = v53 - v52;
      if (v57)
        goto LABEL_131;
      v56 = *((_QWORD *)v51 - 6);
      v55 = *((_QWORD *)v51 - 5);
      v57 = __OFSUB__(v55, v56);
      v49 = v55 - v56;
      v50 = v57;
      if (v57)
        goto LABEL_132;
      v58 = v43 - 2;
      v59 = &v44[16 * v43 - 32];
      v61 = *(_QWORD *)v59;
      v60 = *((_QWORD *)v59 + 1);
      v57 = __OFSUB__(v60, v61);
      v62 = v60 - v61;
      if (v57)
        goto LABEL_134;
      v57 = __OFADD__(v49, v62);
      v63 = v49 + v62;
      if (v57)
        goto LABEL_137;
      if (v63 >= v54)
      {
        v81 = &v44[16 * v46];
        v83 = *(_QWORD *)v81;
        v82 = *((_QWORD *)v81 + 1);
        v57 = __OFSUB__(v82, v83);
        v84 = v82 - v83;
        if (v57)
          goto LABEL_141;
        v74 = v49 < v84;
        goto LABEL_91;
      }
    }
    else
    {
      if (v43 != 3)
      {
        v75 = *((_QWORD *)v10 + 4);
        v76 = *((_QWORD *)v10 + 5);
        v57 = __OFSUB__(v76, v75);
        v68 = v76 - v75;
        v69 = v57;
        goto LABEL_85;
      }
      v48 = *((_QWORD *)v10 + 4);
      v47 = *((_QWORD *)v10 + 5);
      v57 = __OFSUB__(v47, v48);
      v49 = v47 - v48;
      v50 = v57;
    }
    if ((v50 & 1) != 0)
      goto LABEL_133;
    v58 = v43 - 2;
    v64 = &v44[16 * v43 - 32];
    v66 = *(_QWORD *)v64;
    v65 = *((_QWORD *)v64 + 1);
    v67 = __OFSUB__(v65, v66);
    v68 = v65 - v66;
    v69 = v67;
    if (v67)
      goto LABEL_136;
    v70 = &v44[16 * v46];
    v72 = *(_QWORD *)v70;
    v71 = *((_QWORD *)v70 + 1);
    v57 = __OFSUB__(v71, v72);
    v73 = v71 - v72;
    if (v57)
      goto LABEL_139;
    if (__OFADD__(v68, v73))
      goto LABEL_140;
    if (v68 + v73 >= v49)
    {
      v74 = v49 < v73;
LABEL_91:
      if (v74)
        v46 = v58;
      goto LABEL_93;
    }
LABEL_85:
    if ((v69 & 1) != 0)
      goto LABEL_135;
    v77 = &v44[16 * v46];
    v79 = *(_QWORD *)v77;
    v78 = *((_QWORD *)v77 + 1);
    v57 = __OFSUB__(v78, v79);
    v80 = v78 - v79;
    if (v57)
      goto LABEL_138;
    if (v80 < v68)
      goto LABEL_102;
LABEL_93:
    v85 = v46 - 1;
    if (v46 - 1 >= v43)
      goto LABEL_125;
    if (!v12)
      goto LABEL_156;
    v86 = &v44[16 * v85];
    v87 = v44;
    v88 = *(_QWORD *)v86;
    v89 = v46;
    v90 = &v87[16 * v46];
    v91 = *((_QWORD *)v90 + 1);
    v92 = (char *)(v12 + 16 * *(_QWORD *)v86);
    v93 = (char *)(v12 + 16 * *(_QWORD *)v90);
    a2 = v119;
    swift_retain();
    sub_1CA0DFF78(v92, v93, v12 + 16 * v91, v118, v119);
    if (v120)
      break;
    swift_release();
    if (v91 < v88)
      goto LABEL_126;
    if (v89 > *((_QWORD *)v116 + 2))
      goto LABEL_127;
    v94 = v89;
    *(_QWORD *)v86 = v88;
    v44 = v115;
    *(_QWORD *)&v115[16 * v85 + 8] = v91;
    v95 = *((_QWORD *)v116 + 2);
    if (v89 >= v95)
      goto LABEL_128;
    v10 = v116;
    v120 = 0;
    v43 = v95 - 1;
    memmove(v90, v90 + 16, 16 * (v95 - 1 - v94));
    *((_QWORD *)v116 + 2) = v95 - 1;
    v12 = v114;
    if (v95 <= 2)
      goto LABEL_102;
  }
  v96 = v110;
LABEL_105:
  swift_bridgeObjectRelease();
  swift_release();
  *(_QWORD *)(v96 + 16) = 0;
  swift_release_n();
  swift_bridgeObjectRelease();
  return swift_release();
}

uint64_t sub_1CA0E0B24(char *__src, char *a2, unint64_t a3, char *__dst, uint64_t a5)
{
  unint64_t *v6;
  char *v8;
  char *v9;
  int64_t v10;
  int64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t *v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  char *v20;
  unint64_t *v21;
  uint64_t v22;
  char *v23;
  unint64_t v24;
  unint64_t v25;
  char *v26;
  unint64_t v27;
  char *v28;
  uint64_t result;
  unint64_t *v30;
  unint64_t *v31;
  char *v32;

  v6 = (unint64_t *)__dst;
  v8 = a2;
  v9 = __src;
  v10 = a2 - __src;
  v11 = a2 - __src + 15;
  if (a2 - __src >= 0)
    v11 = a2 - __src;
  v12 = v11 >> 4;
  v13 = a3 - (_QWORD)a2;
  v14 = a3 - (_QWORD)a2 + 15;
  if ((uint64_t)(a3 - (_QWORD)a2) >= 0)
    v14 = a3 - (_QWORD)a2;
  v15 = v14 >> 4;
  v32 = __src;
  v31 = (unint64_t *)__dst;
  if (v12 >= v14 >> 4)
  {
    if (v13 >= -15)
    {
      if (__dst != a2 || &a2[16 * v15] <= __dst)
        memmove(__dst, a2, 16 * v15);
      v21 = &v6[2 * v15];
      v30 = v21;
      v32 = v8;
      if (v9 < v8 && v13 >= 16)
      {
        v22 = *(_QWORD *)(a5 + 32);
        v23 = (char *)(a3 - 16);
        while (1)
        {
          v24 = *(v21 - 2);
          if ((v24 & 0x8000000000000000) != 0)
            break;
          v25 = *(_QWORD *)(v22 + 16);
          if (v24 >= v25)
            goto LABEL_51;
          v26 = v8 - 16;
          v27 = *((_QWORD *)v8 - 2);
          if (v27 >= v25)
            goto LABEL_52;
          v28 = v23 + 16;
          if (*(double *)(v22 + 32 + 8 * v27) >= *(double *)(v22 + 32 + 8 * v24))
          {
            v30 = v21 - 2;
            if (v28 < (char *)v21 || v23 >= (char *)v21 || v28 != (char *)v21)
              *(_OWORD *)v23 = *((_OWORD *)v21 - 1);
            v26 = v8;
            v21 -= 2;
            if (v8 <= v9)
              goto LABEL_49;
          }
          else
          {
            if (v28 != v8 || v23 >= v8)
              *(_OWORD *)v23 = *(_OWORD *)v26;
            v32 = v8 - 16;
            if (v26 <= v9)
              goto LABEL_49;
          }
          v23 -= 16;
          v8 = v26;
          if (v21 <= v6)
            goto LABEL_49;
        }
        __break(1u);
LABEL_51:
        __break(1u);
LABEL_52:
        __break(1u);
        goto LABEL_53;
      }
LABEL_49:
      sub_1CA13B3D0((void **)&v32, (const void **)&v31, &v30);
      return 1;
    }
  }
  else if (v10 >= -15)
  {
    if (__dst != __src || &__src[16 * v12] <= __dst)
      memmove(__dst, __src, 16 * v12);
    v16 = &v6[2 * v12];
    v30 = v16;
    if ((unint64_t)v8 < a3 && v10 >= 16)
    {
      v17 = *(_QWORD *)(a5 + 32);
      while (1)
      {
        v18 = *(_QWORD *)v8;
        if ((*(_QWORD *)v8 & 0x8000000000000000) != 0)
          break;
        v19 = *(_QWORD *)(v17 + 16);
        if (v18 >= v19)
          goto LABEL_54;
        if (*v6 >= v19)
          goto LABEL_55;
        if (*(double *)(v17 + 32 + 8 * *v6) >= *(double *)(v17 + 32 + 8 * v18))
        {
          if (v9 != (char *)v6)
            *(_OWORD *)v9 = *(_OWORD *)v6;
          v6 += 2;
          v31 = v6;
          v20 = v8;
        }
        else
        {
          v20 = v8 + 16;
          if (v9 < v8 || v9 >= v20 || v9 != v8)
            *(_OWORD *)v9 = *(_OWORD *)v8;
        }
        v9 += 16;
        if (v6 < v16)
        {
          v8 = v20;
          if ((unint64_t)v20 < a3)
            continue;
        }
        v32 = v9;
        goto LABEL_49;
      }
LABEL_53:
      __break(1u);
LABEL_54:
      __break(1u);
LABEL_55:
      __break(1u);
      goto LABEL_56;
    }
    goto LABEL_49;
  }
LABEL_56:
  swift_release();
  result = sub_1CA1F1270();
  __break(1u);
  return result;
}

uint64_t sub_1CA0E0E10(uint64_t result, uint64_t a2, uint64_t a3, uint64_t *a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;

  if (a3 != a2)
  {
    v5 = *a4;
    v6 = *(_QWORD *)(a5 + 32);
    v7 = *a4 + 16 * a3 - 16;
LABEL_5:
    v8 = *(_QWORD *)(v5 + 16 * a3);
    v9 = result;
    v10 = v7;
    while ((v8 & 0x8000000000000000) == 0)
    {
      v11 = *(_QWORD *)(v6 + 16);
      if (v8 >= v11)
        goto LABEL_14;
      if (*(_QWORD *)v10 >= v11)
        goto LABEL_15;
      if (*(double *)(v6 + 32 + 8 * *(_QWORD *)v10) < *(double *)(v6 + 32 + 8 * v8))
      {
        if (!v5)
          goto LABEL_16;
        v12 = *(_QWORD *)(v10 + 24);
        *(_OWORD *)(v10 + 16) = *(_OWORD *)v10;
        *(_QWORD *)v10 = v8;
        *(_QWORD *)(v10 + 8) = v12;
        v10 -= 16;
        if (a3 != ++v9)
          continue;
      }
      ++a3;
      v7 += 16;
      if (a3 == a2)
        return result;
      goto LABEL_5;
    }
    __break(1u);
LABEL_14:
    __break(1u);
LABEL_15:
    __break(1u);
LABEL_16:
    __break(1u);
  }
  return result;
}

uint64_t sub_1CA0E0EB8(uint64_t *a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  double v21;
  double v22;
  unint64_t *v23;
  double v24;
  unint64_t v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  uint64_t v37;
  uint64_t v38;
  unint64_t v39;
  uint64_t v40;
  unint64_t v41;
  unint64_t v42;
  unint64_t v43;
  char *v44;
  char *v45;
  unint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  char v50;
  char *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  BOOL v57;
  unint64_t v58;
  char *v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  char *v64;
  uint64_t v65;
  uint64_t v66;
  BOOL v67;
  uint64_t v68;
  char v69;
  char *v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  BOOL v74;
  uint64_t v75;
  uint64_t v76;
  char *v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  char *v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  unint64_t v85;
  char *v86;
  char *v87;
  uint64_t v88;
  unint64_t v89;
  char *v90;
  uint64_t v91;
  char *v92;
  char *v93;
  unint64_t v94;
  unint64_t v95;
  uint64_t v96;
  uint64_t v97;
  unint64_t v98;
  uint64_t v99;
  uint64_t v100;
  char *v101;
  char *v102;
  unint64_t v103;
  char *v104;
  unint64_t v105;
  uint64_t result;
  uint64_t v107;
  uint64_t *v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  char *v115;
  char *v116;
  uint64_t v117;
  char *v118;
  uint64_t v119;
  uint64_t v120;

  v5 = a1[1];
  swift_retain_n();
  v6 = sub_1CA1F12A0();
  if (v6 >= v5)
  {
    if ((v5 & 0x8000000000000000) == 0)
    {
      if (v5)
      {
        swift_retain();
        sub_1CA0E0E10(0, v5, 1, a1, a2);
      }
      swift_release_n();
      return swift_release();
    }
    goto LABEL_151;
  }
  if (v5 >= 0)
    v7 = v5;
  else
    v7 = v5 + 1;
  if (v5 < -1)
    goto LABEL_159;
  v119 = a2;
  v111 = v6;
  v112 = v5;
  v120 = v2;
  v108 = a1;
  if (v5 < 2)
  {
    v10 = (char *)MEMORY[0x1E0DEE9D8];
    v118 = (char *)(MEMORY[0x1E0DEE9D8] + 32);
    v110 = MEMORY[0x1E0DEE9D8];
    if (v5 != 1)
    {
      v43 = *(_QWORD *)(MEMORY[0x1E0DEE9D8] + 16);
LABEL_108:
      if (v43 < 2)
      {
LABEL_119:
        swift_bridgeObjectRelease();
        *(_QWORD *)(v110 + 16) = 0;
        swift_release_n();
        swift_bridgeObjectRelease();
        return swift_release();
      }
      v97 = *v108;
      v117 = *v108;
      while (1)
      {
        v98 = v43 - 2;
        if (v43 < 2)
          break;
        if (!v97)
          goto LABEL_158;
        v99 = *(_QWORD *)&v10[16 * v98 + 32];
        v100 = *(_QWORD *)&v10[16 * v43 + 24];
        v101 = (char *)(v97 + 16 * v99);
        v102 = (char *)(v97 + 16 * *(_QWORD *)&v10[16 * v43 + 16]);
        v103 = v97 + 16 * v100;
        swift_retain();
        sub_1CA0E0B24(v101, v102, v103, v118, v119);
        if (v120)
        {
          v96 = v110;
          goto LABEL_105;
        }
        swift_release();
        if (v100 < v99)
          goto LABEL_143;
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
          v10 = sub_1CA13B478((uint64_t)v10);
        if (v98 >= *((_QWORD *)v10 + 2))
          goto LABEL_144;
        v104 = &v10[16 * v98 + 32];
        *(_QWORD *)v104 = v99;
        *((_QWORD *)v104 + 1) = v100;
        v105 = *((_QWORD *)v10 + 2);
        if (v43 > v105)
          goto LABEL_145;
        memmove(&v10[16 * v43 + 16], &v10[16 * v43 + 32], 16 * (v105 - v43));
        *((_QWORD *)v10 + 2) = v105 - 1;
        v43 = v105 - 1;
        v97 = v117;
        if (v105 <= 2)
          goto LABEL_119;
      }
LABEL_142:
      __break(1u);
LABEL_143:
      __break(1u);
LABEL_144:
      __break(1u);
LABEL_145:
      __break(1u);
LABEL_146:
      __break(1u);
LABEL_147:
      __break(1u);
LABEL_148:
      __break(1u);
LABEL_149:
      __break(1u);
      goto LABEL_150;
    }
  }
  else
  {
    v8 = v7 >> 1;
    __swift_instantiateConcreteTypeFromMangledName(&qword_1EF937B20);
    v9 = sub_1CA1F0B68();
    *(_QWORD *)(v9 + 16) = v8;
    v110 = v9;
    v118 = (char *)(v9 + 32);
  }
  v11 = 0;
  v12 = *a1;
  v109 = *a1 + 32;
  v107 = *a1 - 16;
  v10 = (char *)MEMORY[0x1E0DEE9D8];
  v13 = v5;
  v114 = *a1;
  while (1)
  {
    v14 = v11 + 1;
    if (v11 + 1 >= v13)
      goto LABEL_34;
    v15 = *(_QWORD *)(v12 + 16 * v14);
    if ((v15 & 0x8000000000000000) != 0)
      goto LABEL_147;
    v16 = *(_QWORD *)(a2 + 32);
    v17 = *(_QWORD *)(v16 + 16);
    if (v15 >= v17)
      goto LABEL_148;
    v18 = 16 * v11;
    v19 = *(_QWORD *)(v12 + 16 * v11);
    if (v19 >= v17)
      goto LABEL_149;
    v20 = v16 + 32;
    v21 = *(double *)(v20 + 8 * v15);
    v22 = *(double *)(v20 + 8 * v19);
    v14 = v11 + 2;
    if (v11 + 2 >= v13)
      goto LABEL_25;
    v23 = (unint64_t *)(v109 + 16 * v11);
    v24 = *(double *)(v20 + 8 * v15);
    do
    {
      v26 = *v23;
      v23 += 2;
      v25 = v26;
      if (v26 >= v17)
        goto LABEL_129;
      if (v15 >= v17)
      {
LABEL_130:
        __break(1u);
LABEL_131:
        __break(1u);
LABEL_132:
        __break(1u);
LABEL_133:
        __break(1u);
LABEL_134:
        __break(1u);
LABEL_135:
        __break(1u);
LABEL_136:
        __break(1u);
LABEL_137:
        __break(1u);
LABEL_138:
        __break(1u);
LABEL_139:
        __break(1u);
LABEL_140:
        __break(1u);
LABEL_141:
        __break(1u);
        goto LABEL_142;
      }
      if (v22 < v21 == v24 >= *(double *)(v20 + 8 * v25))
        goto LABEL_25;
      ++v14;
      v24 = *(double *)(v20 + 8 * v25);
      v15 = v25;
    }
    while (v13 != v14);
    v14 = v13;
LABEL_25:
    if (v22 < v21)
    {
      if (v14 >= v11)
      {
        if (v11 < v14)
        {
          v27 = 16 * v14;
          v28 = v14;
          v29 = v11;
          while (1)
          {
            if (v29 != --v28)
            {
              if (!v12)
                goto LABEL_157;
              v30 = v12 + v27;
              v31 = *(_QWORD *)(v12 + v18);
              v32 = *(_QWORD *)(v12 + v18 + 8);
              *(_OWORD *)(v12 + v18) = *(_OWORD *)(v12 + v27 - 16);
              *(_QWORD *)(v30 - 16) = v31;
              *(_QWORD *)(v30 - 8) = v32;
            }
            ++v29;
            v27 -= 16;
            v18 += 16;
            if (v29 >= v28)
              goto LABEL_34;
          }
        }
        goto LABEL_34;
      }
LABEL_154:
      __break(1u);
LABEL_155:
      swift_release_n();
      __break(1u);
LABEL_156:
      swift_release_n();
      __break(1u);
LABEL_157:
      swift_release_n();
      __break(1u);
LABEL_158:
      swift_release_n();
      __break(1u);
LABEL_159:
      swift_release_n();
      result = sub_1CA1F11BC();
      __break(1u);
      return result;
    }
LABEL_34:
    if (v14 < v13)
    {
      if (!__OFSUB__(v14, v11))
      {
        if (v14 - v11 >= v111)
          goto LABEL_53;
        v33 = v11 + v111;
        if (!__OFADD__(v11, v111))
        {
          if (v33 >= v13)
            v33 = v13;
          if (v33 >= v11)
          {
            if (v14 != v33)
            {
              v34 = *(_QWORD *)(a2 + 32);
              v35 = v107 + 16 * v14;
              do
              {
                v36 = *(_QWORD *)(v12 + 16 * v14);
                v37 = v11;
                v38 = v35;
                do
                {
                  if ((v36 & 0x8000000000000000) != 0)
                  {
                    __break(1u);
LABEL_123:
                    __break(1u);
LABEL_124:
                    __break(1u);
LABEL_125:
                    __break(1u);
LABEL_126:
                    __break(1u);
LABEL_127:
                    __break(1u);
LABEL_128:
                    __break(1u);
LABEL_129:
                    __break(1u);
                    goto LABEL_130;
                  }
                  v39 = *(_QWORD *)(v34 + 16);
                  if (v36 >= v39)
                    goto LABEL_123;
                  if (*(_QWORD *)v38 >= v39)
                    goto LABEL_124;
                  if (*(double *)(v34 + 32 + 8 * *(_QWORD *)v38) >= *(double *)(v34 + 32 + 8 * v36))
                    break;
                  if (!v12)
                    goto LABEL_155;
                  v40 = *(_QWORD *)(v38 + 24);
                  *(_OWORD *)(v38 + 16) = *(_OWORD *)v38;
                  *(_QWORD *)v38 = v36;
                  *(_QWORD *)(v38 + 8) = v40;
                  v38 -= 16;
                  ++v37;
                }
                while (v14 != v37);
                ++v14;
                v35 += 16;
              }
              while (v14 != v33);
              v14 = v33;
            }
            goto LABEL_53;
          }
LABEL_153:
          __break(1u);
          goto LABEL_154;
        }
LABEL_152:
        __break(1u);
        goto LABEL_153;
      }
LABEL_150:
      __break(1u);
LABEL_151:
      __break(1u);
      goto LABEL_152;
    }
LABEL_53:
    if (v14 < v11)
      goto LABEL_146;
    v113 = v14;
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      v10 = sub_1CA13B230(0, *((_QWORD *)v10 + 2) + 1, 1, v10);
    v42 = *((_QWORD *)v10 + 2);
    v41 = *((_QWORD *)v10 + 3);
    v43 = v42 + 1;
    if (v42 >= v41 >> 1)
      v10 = sub_1CA13B230((char *)(v41 > 1), v42 + 1, 1, v10);
    *((_QWORD *)v10 + 2) = v43;
    v44 = v10 + 32;
    v45 = &v10[16 * v42 + 32];
    *(_QWORD *)v45 = v11;
    *((_QWORD *)v45 + 1) = v113;
    if (v42)
      break;
    v43 = 1;
LABEL_102:
    v13 = v112;
    v11 = v113;
    if (v113 >= v112)
      goto LABEL_108;
  }
  v115 = v10 + 32;
  v116 = v10;
  while (1)
  {
    v46 = v43 - 1;
    if (v43 >= 4)
    {
      v51 = &v44[16 * v43];
      v52 = *((_QWORD *)v51 - 8);
      v53 = *((_QWORD *)v51 - 7);
      v57 = __OFSUB__(v53, v52);
      v54 = v53 - v52;
      if (v57)
        goto LABEL_131;
      v56 = *((_QWORD *)v51 - 6);
      v55 = *((_QWORD *)v51 - 5);
      v57 = __OFSUB__(v55, v56);
      v49 = v55 - v56;
      v50 = v57;
      if (v57)
        goto LABEL_132;
      v58 = v43 - 2;
      v59 = &v44[16 * v43 - 32];
      v61 = *(_QWORD *)v59;
      v60 = *((_QWORD *)v59 + 1);
      v57 = __OFSUB__(v60, v61);
      v62 = v60 - v61;
      if (v57)
        goto LABEL_134;
      v57 = __OFADD__(v49, v62);
      v63 = v49 + v62;
      if (v57)
        goto LABEL_137;
      if (v63 >= v54)
      {
        v81 = &v44[16 * v46];
        v83 = *(_QWORD *)v81;
        v82 = *((_QWORD *)v81 + 1);
        v57 = __OFSUB__(v82, v83);
        v84 = v82 - v83;
        if (v57)
          goto LABEL_141;
        v74 = v49 < v84;
        goto LABEL_91;
      }
    }
    else
    {
      if (v43 != 3)
      {
        v75 = *((_QWORD *)v10 + 4);
        v76 = *((_QWORD *)v10 + 5);
        v57 = __OFSUB__(v76, v75);
        v68 = v76 - v75;
        v69 = v57;
        goto LABEL_85;
      }
      v48 = *((_QWORD *)v10 + 4);
      v47 = *((_QWORD *)v10 + 5);
      v57 = __OFSUB__(v47, v48);
      v49 = v47 - v48;
      v50 = v57;
    }
    if ((v50 & 1) != 0)
      goto LABEL_133;
    v58 = v43 - 2;
    v64 = &v44[16 * v43 - 32];
    v66 = *(_QWORD *)v64;
    v65 = *((_QWORD *)v64 + 1);
    v67 = __OFSUB__(v65, v66);
    v68 = v65 - v66;
    v69 = v67;
    if (v67)
      goto LABEL_136;
    v70 = &v44[16 * v46];
    v72 = *(_QWORD *)v70;
    v71 = *((_QWORD *)v70 + 1);
    v57 = __OFSUB__(v71, v72);
    v73 = v71 - v72;
    if (v57)
      goto LABEL_139;
    if (__OFADD__(v68, v73))
      goto LABEL_140;
    if (v68 + v73 >= v49)
    {
      v74 = v49 < v73;
LABEL_91:
      if (v74)
        v46 = v58;
      goto LABEL_93;
    }
LABEL_85:
    if ((v69 & 1) != 0)
      goto LABEL_135;
    v77 = &v44[16 * v46];
    v79 = *(_QWORD *)v77;
    v78 = *((_QWORD *)v77 + 1);
    v57 = __OFSUB__(v78, v79);
    v80 = v78 - v79;
    if (v57)
      goto LABEL_138;
    if (v80 < v68)
      goto LABEL_102;
LABEL_93:
    v85 = v46 - 1;
    if (v46 - 1 >= v43)
      goto LABEL_125;
    if (!v12)
      goto LABEL_156;
    v86 = &v44[16 * v85];
    v87 = v44;
    v88 = *(_QWORD *)v86;
    v89 = v46;
    v90 = &v87[16 * v46];
    v91 = *((_QWORD *)v90 + 1);
    v92 = (char *)(v12 + 16 * *(_QWORD *)v86);
    v93 = (char *)(v12 + 16 * *(_QWORD *)v90);
    a2 = v119;
    swift_retain();
    sub_1CA0E0B24(v92, v93, v12 + 16 * v91, v118, v119);
    if (v120)
      break;
    swift_release();
    if (v91 < v88)
      goto LABEL_126;
    if (v89 > *((_QWORD *)v116 + 2))
      goto LABEL_127;
    v94 = v89;
    *(_QWORD *)v86 = v88;
    v44 = v115;
    *(_QWORD *)&v115[16 * v85 + 8] = v91;
    v95 = *((_QWORD *)v116 + 2);
    if (v89 >= v95)
      goto LABEL_128;
    v10 = v116;
    v120 = 0;
    v43 = v95 - 1;
    memmove(v90, v90 + 16, 16 * (v95 - 1 - v94));
    *((_QWORD *)v116 + 2) = v95 - 1;
    v12 = v114;
    if (v95 <= 2)
      goto LABEL_102;
  }
  v96 = v110;
LABEL_105:
  swift_bridgeObjectRelease();
  swift_release();
  *(_QWORD *)(v96 + 16) = 0;
  swift_release_n();
  swift_bridgeObjectRelease();
  return swift_release();
}

uint64_t sub_1CA0E16D0(_QWORD **a1, uint64_t a2, void (*a3)(_QWORD *, uint64_t))
{
  _QWORD *v6;
  uint64_t v7;
  _QWORD v9[2];

  v6 = *a1;
  swift_retain_n();
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    v6 = (_QWORD *)sub_1CA13B4B4(v6);
  v7 = v6[2];
  v9[0] = v6 + 4;
  v9[1] = v7;
  swift_retain();
  a3(v9, a2);
  swift_release();
  *a1 = v6;
  return swift_release_n();
}

uint64_t sub_1CA0E177C(uint64_t result, unint64_t a2)
{
  unint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  if (result < 0)
  {
    __break(1u);
  }
  else
  {
    v2 = a2;
    v3 = result;
    v4 = a2 >> 62;
    if (!(a2 >> 62))
    {
      v5 = *(_QWORD *)((a2 & 0xFFFFFFFFFFFFF8) + 0x10);
      goto LABEL_4;
    }
  }
  swift_bridgeObjectRetain();
  v5 = sub_1CA1F1234();
  result = swift_bridgeObjectRelease();
LABEL_4:
  if (v5 >= v3)
    v6 = v3;
  else
    v6 = v5;
  if (v5 < 0)
    v6 = v3;
  if (v3)
    v7 = v6;
  else
    v7 = 0;
  if (v4)
  {
    swift_bridgeObjectRetain();
    v9 = sub_1CA1F1234();
    result = swift_bridgeObjectRelease();
    if (v9 < 0)
    {
LABEL_28:
      __break(1u);
      return result;
    }
    swift_bridgeObjectRetain();
    v8 = sub_1CA1F1234();
    result = swift_bridgeObjectRelease();
  }
  else
  {
    v8 = *(_QWORD *)((v2 & 0xFFFFFFFFFFFFF8) + 0x10);
  }
  if (v8 < v7)
  {
    __break(1u);
    goto LABEL_28;
  }
  if ((v2 & 0xC000000000000001) != 0 && v7)
  {
    sub_1CA0AB910(0, (unint64_t *)&qword_1EF93A320);
    v10 = 0;
    do
    {
      v11 = v10 + 1;
      sub_1CA1F1084();
      v10 = v11;
    }
    while (v7 != v11);
  }
  if (v4)
  {
    swift_bridgeObjectRetain();
    v12 = sub_1CA1F1240();
    swift_bridgeObjectRelease();
  }
  else
  {
    v12 = v2 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain();
  }
  return v12;
}

_QWORD *sub_1CA0E1924(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t AssociatedTypeWitness;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  _QWORD *v13;
  void *v14;
  uint64_t v15;
  id v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v22;
  void *v23;
  uint64_t v24;
  uint64_t v25;

  v3 = v2;
  v6 = *(_QWORD *)(a2 - 8);
  MEMORY[0x1E0C80A78](a1, a2);
  v8 = (char *)&v22 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v22 = *(_QWORD *)(AssociatedTypeWitness - 8);
  MEMORY[0x1E0C80A78](AssociatedTypeWitness, v10);
  v12 = (char *)&v22 - v11;
  v13 = (_QWORD *)MEMORY[0x1E0DEE9D8];
  v25 = MEMORY[0x1E0DEE9D8];
  (*(void (**)(char *, uint64_t, uint64_t))(v6 + 16))(v8, a1, a2);
  sub_1CA1F0A6C();
  swift_getAssociatedConformanceWitness();
  sub_1CA1F0EC8();
  v14 = v23;
  if (v23)
  {
    v15 = v24;
    do
    {
      v16 = v14;
      MEMORY[0x1CAA4A1E0]();
      if (*(_QWORD *)((v25 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(_QWORD *)((v25 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1)
        sub_1CA1F0B2C();
      sub_1CA1F0B8C();
      sub_1CA1F0B14();
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        v13 = sub_1CA0E5894(0, v13[2] + 1, 1, v13);
      v18 = v13[2];
      v17 = v13[3];
      if (v18 >= v17 >> 1)
        v13 = sub_1CA0E5894((_QWORD *)(v17 > 1), v18 + 1, 1, v13);
      v13[2] = v18 + 1;
      v13[v18 + 4] = v15;

      sub_1CA1F0EC8();
      v14 = v23;
      v15 = v24;
    }
    while (v23);
  }
  (*(void (**)(char *, uint64_t))(v22 + 8))(v12, AssociatedTypeWitness);
  v19 = v13[2];
  v3[2] = 1;
  v3[3] = v19;
  v20 = v25;
  v3[4] = v13;
  v3[5] = v20;
  return v3;
}

_QWORD *sub_1CA0E1B78(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t AssociatedTypeWitness;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  _QWORD *v13;
  void *v14;
  uint64_t v15;
  id v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v22;
  void *v23;
  uint64_t v24;
  uint64_t v25;

  v3 = v2;
  v6 = *(_QWORD *)(a2 - 8);
  MEMORY[0x1E0C80A78](a1, a2);
  v8 = (char *)&v22 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v22 = *(_QWORD *)(AssociatedTypeWitness - 8);
  MEMORY[0x1E0C80A78](AssociatedTypeWitness, v10);
  v12 = (char *)&v22 - v11;
  v13 = (_QWORD *)MEMORY[0x1E0DEE9D8];
  v25 = MEMORY[0x1E0DEE9D8];
  (*(void (**)(char *, uint64_t, uint64_t))(v6 + 16))(v8, a1, a2);
  sub_1CA1F0A6C();
  swift_getAssociatedConformanceWitness();
  sub_1CA1F0EC8();
  v14 = v23;
  if (v23)
  {
    v15 = v24;
    do
    {
      v16 = v14;
      MEMORY[0x1CAA4A1E0]();
      if (*(_QWORD *)((v25 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(_QWORD *)((v25 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1)
        sub_1CA1F0B2C();
      sub_1CA1F0B8C();
      sub_1CA1F0B14();
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        v13 = sub_1CA0E5894(0, v13[2] + 1, 1, v13);
      v18 = v13[2];
      v17 = v13[3];
      if (v18 >= v17 >> 1)
        v13 = sub_1CA0E5894((_QWORD *)(v17 > 1), v18 + 1, 1, v13);
      v13[2] = v18 + 1;
      v13[v18 + 4] = v15;

      sub_1CA1F0EC8();
      v14 = v23;
      v15 = v24;
    }
    while (v23);
  }
  (*(void (**)(char *, uint64_t))(v22 + 8))(v12, AssociatedTypeWitness);
  v19 = v13[2];
  v3[2] = 1;
  v3[3] = v19;
  v20 = v25;
  v3[4] = v13;
  v3[5] = v20;
  return v3;
}

uint64_t type metadata accessor for MASquareMatrixRepresentation()
{
  return objc_opt_self();
}

uint64_t type metadata accessor for MAVectorRepresentation()
{
  return objc_opt_self();
}

uint64_t sub_1CA0E1E0C()
{
  return swift_deallocObject();
}

_QWORD *sub_1CA0E1E1C(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t *v4;
  _QWORD *v5;
  uint64_t v6;
  id v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v12;

  v2 = MEMORY[0x1E0DEE9D8];
  v12 = MEMORY[0x1E0DEE9D8];
  v3 = *(_QWORD *)(a1 + 16);
  if (v3)
  {
    v4 = (uint64_t *)(a1 + 40);
    v5 = (_QWORD *)MEMORY[0x1E0DEE9D8];
    do
    {
      v6 = *v4;
      v7 = (id)*(v4 - 1);
      MEMORY[0x1CAA4A1E0]();
      if (*(_QWORD *)((v12 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(_QWORD *)((v12 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1)
        sub_1CA1F0B2C();
      sub_1CA1F0B8C();
      sub_1CA1F0B14();
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        v5 = sub_1CA0E5894(0, v5[2] + 1, 1, v5);
      v9 = v5[2];
      v8 = v5[3];
      if (v9 >= v8 >> 1)
        v5 = sub_1CA0E5894((_QWORD *)(v8 > 1), v9 + 1, 1, v5);
      v5[2] = v9 + 1;
      v5[v9 + 4] = v6;

      v4 += 2;
      --v3;
    }
    while (v3);
    v2 = v12;
  }
  else
  {
    v5 = (_QWORD *)MEMORY[0x1E0DEE9D8];
  }
  v10 = v5[2];
  v1[2] = 1;
  v1[3] = v10;
  v1[4] = v5;
  v1[5] = v2;
  return v1;
}

uint64_t sub_1CA0E1F80()
{
  swift_release();
  swift_release();
  return swift_deallocObject();
}

_QWORD *sub_1CA0E1FAC@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v1;

  return sub_1CA0D4604(*(_QWORD **)(v1 + 16), *(_QWORD *)(v1 + 24), *(_QWORD *)(v1 + 32), a1);
}

void sub_1CA0E1FB8(uint64_t a1)
{
  uint64_t v1;

  sub_1CA0D6510(a1, *(_QWORD *)(v1 + 16), *(_BYTE *)(v1 + 24), *(double **)(v1 + 32), *(_QWORD *)(v1 + 40));
}

id sub_1CA0E1FE4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  id result;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  id v20;
  unint64_t v21;
  unint64_t v22;
  _QWORD *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;

  v27 = MEMORY[0x1E0DEE9D8];
  result = (id)sub_1CA0CD62C(0, 0, 0);
  v9 = a1 * a2;
  if ((unsigned __int128)(a1 * (__int128)a2) >> 64 == (a1 * a2) >> 63)
  {
    v24 = swift_allocObject();
    *(_QWORD *)(v24 + 16) = 0;
    result = (id)swift_bridgeObjectRetain();
    if (!v9)
    {
LABEL_16:
      *(_QWORD *)(v24 + 16) = v9;
      swift_bridgeObjectRelease();
      swift_release();
      return (id)v27;
    }
    v10 = 0;
    v25 = a4;
    v26 = a3 + 32;
    while ((unint64_t)v10 < *(_QWORD *)(a3 + 16))
    {
      v11 = *(_QWORD *)(a4 + 24);
      if (!v11)
        goto LABEL_18;
      v12 = *(_QWORD *)(v26 + 8 * v10);
      v13 = *(_QWORD *)(a4 + 40);
      v14 = v10 / v11;
      if ((v13 & 0xC000000000000001) != 0)
      {
        v19 = MEMORY[0x1CAA4A7A4](v10 / v11, v13);
        result = (id)MEMORY[0x1CAA4A7A4](v10 % v11, v13);
        v20 = result;
      }
      else
      {
        if ((v14 & 0x8000000000000000) != 0)
          goto LABEL_19;
        v15 = a3;
        v16 = *(_QWORD *)((v13 & 0xFFFFFFFFFFFFF8) + 0x10);
        if (v14 >= v16)
          goto LABEL_20;
        v17 = v13 + 32;
        v18 = v10 % v11;
        result = *(id *)(v17 + 8 * v14);
        if (v18 >= v16)
          goto LABEL_21;
        v19 = (uint64_t)result;
        result = *(id *)(v17 + 8 * v18);
        v20 = result;
        a3 = v15;
      }
      v22 = *(_QWORD *)(v27 + 16);
      v21 = *(_QWORD *)(v27 + 24);
      if (v22 >= v21 >> 1)
        result = (id)sub_1CA0CD62C(v21 > 1, v22 + 1, 1);
      ++v10;
      *(_QWORD *)(v27 + 16) = v22 + 1;
      v23 = (_QWORD *)(v27 + 24 * v22);
      v23[4] = v19;
      v23[5] = v20;
      v23[6] = v12;
      a4 = v25;
      if (v9 == v10)
        goto LABEL_16;
    }
    __break(1u);
LABEL_18:
    __break(1u);
LABEL_19:
    __break(1u);
LABEL_20:
    __break(1u);
LABEL_21:
    __break(1u);
  }
  __break(1u);
  return result;
}

uint64_t sub_1CA0E21EC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t result;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t inited;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  __int128 v27;
  __int128 v28;
  uint64_t v29;
  _QWORD v30[2];
  uint64_t v31;

  v5 = v4;
  v31 = MEMORY[0x1E0DEE9D8];
  result = sub_1CA0CD62C(0, 0, 0);
  v10 = a1 * a2;
  if ((unsigned __int128)(a1 * (__int128)a2) >> 64 == (a1 * a2) >> 63)
  {
    v11 = swift_allocObject();
    *(_QWORD *)(v11 + 16) = 0;
    v12 = (_QWORD *)swift_allocObject();
    v12[2] = v11;
    v12[3] = v10;
    v12[4] = a1;
    v12[5] = a2;
    v12[6] = a3;
    __swift_instantiateConcreteTypeFromMangledName(&qword_1EF937D28);
    inited = swift_initStackObject();
    *(_QWORD *)(inited + 16) = sub_1CA0E1FCC;
    *(_QWORD *)(inited + 24) = v12;
    v14 = *(_QWORD *)(v11 + 16);
    swift_retain();
    result = swift_bridgeObjectRetain();
    if (v14 == v10)
    {
LABEL_15:
      *(_QWORD *)(v11 + 16) = v10;
      swift_release();
      swift_release();
      return v31;
    }
    v15 = 0;
    v24 = v11;
    v25 = a3 + 8 * v14 + 32;
    v16 = v14 - a2 * a1;
    v17 = a3;
    while (v14 - 0x7FFFFFFFFFFFFFFFLL + v15)
    {
      if (v14 < 0)
        goto LABEL_17;
      if ((unint64_t)(v14 + v15) >= *(_QWORD *)(a3 + 16))
        goto LABEL_18;
      v18 = *(_QWORD *)(v25 + 8 * v15);
      v30[0] = v15;
      v30[1] = v18;
      sub_1CA0D9288((unint64_t)v30, a4, &v28);
      if (v5)
      {
        *(_QWORD *)(v24 + 16) = v14 + v15 + 1;
        swift_release();
        swift_release();
        return swift_release();
      }
      v5 = 0;
      v27 = v28;
      v19 = v29;
      v20 = v31;
      result = swift_isUniquelyReferenced_nonNull_native();
      if ((result & 1) == 0)
      {
        result = sub_1CA0CD62C(0, *(_QWORD *)(v20 + 16) + 1, 1);
        v20 = v31;
      }
      v22 = *(_QWORD *)(v20 + 16);
      v21 = *(_QWORD *)(v20 + 24);
      if (v22 >= v21 >> 1)
      {
        result = sub_1CA0CD62C(v21 > 1, v22 + 1, 1);
        v20 = v31;
      }
      ++v15;
      *(_QWORD *)(v20 + 16) = v22 + 1;
      v23 = v20 + 24 * v22;
      *(_OWORD *)(v23 + 32) = v27;
      *(_QWORD *)(v23 + 48) = v19;
      a3 = v17;
      if (!(v16 + v15))
      {
        v10 = v14 + v15;
        v11 = v24;
        goto LABEL_15;
      }
    }
    __break(1u);
LABEL_17:
    __break(1u);
LABEL_18:
    __break(1u);
  }
  __break(1u);
  return result;
}

uint64_t sub_1CA0E2458(uint64_t a1)
{
  return sub_1CA0E2548(a1, (uint64_t (*)(uint64_t, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_1CA0D9BF8);
}

uint64_t sub_1CA0E2464(uint64_t a1)
{
  return sub_1CA0E2548(a1, (uint64_t (*)(uint64_t, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_1CA0D971C);
}

void sub_1CA0E2470(unint64_t a1)
{
  uint64_t v2;
  uint64_t i;
  void *v4;
  void **v5;
  void *v6;
  id v7;

  if (a1 >> 62)
  {
    v2 = sub_1CA1F1234();
    if (!v2)
      return;
  }
  else
  {
    v2 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
    if (!v2)
      return;
  }
  if (v2 < 1)
  {
    __break(1u);
  }
  else if ((a1 & 0xC000000000000001) != 0)
  {
    for (i = 0; i != v2; ++i)
    {
      v4 = (void *)MEMORY[0x1CAA4A7A4](i, a1);
      sub_1CA0BDD74(&v7, v4);

    }
  }
  else
  {
    v5 = (void **)(a1 + 32);
    do
    {
      v6 = *v5++;
      sub_1CA0BDD74(&v7, v6);

      --v2;
    }
    while (v2);
  }
}

uint64_t sub_1CA0E253C(uint64_t a1)
{
  return sub_1CA0E2548(a1, (uint64_t (*)(uint64_t, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_1CA0DBD0C);
}

uint64_t sub_1CA0E2548(uint64_t a1, uint64_t (*a2)(uint64_t, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))
{
  uint64_t v2;

  return a2(a1, *(_QWORD *)(v2 + 16), *(unsigned __int8 *)(v2 + 24), *(unsigned __int8 *)(v2 + 25), *(_QWORD *)(v2 + 32), *(_QWORD *)(v2 + 40));
}

unint64_t sub_1CA0E2564()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1EF937D30;
  if (!qword_1EF937D30)
  {
    v1 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_1EF937D38);
    result = MEMORY[0x1CAA4BB30](MEMORY[0x1E0DEC1E8], v1);
    atomic_store(result, (unint64_t *)&qword_1EF937D30);
  }
  return result;
}

uint64_t method lookup function for MAVectorRepresentation()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of MAVectorRepresentation.__allocating_init<A>(_:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 96))();
}

{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 104))();
}

uint64_t dispatch thunk of MAVectorRepresentation.__allocating_init(vector:nodes:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 112))();
}

uint64_t dispatch thunk of MAVectorRepresentation.subscript.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 120))();
}

{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 128))();
}

uint64_t dispatch thunk of MAVectorRepresentation.diagMatrix()()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 136))();
}

uint64_t dispatch thunk of MAVectorRepresentation.weighted(vector:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 144))();
}

uint64_t dispatch thunk of MAVectorRepresentation.weighted(factor:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 152))();
}

uint64_t dispatch thunk of MAVectorRepresentation.weighted(combine:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 160))();
}

uint64_t dispatch thunk of MAVectorRepresentation.normalized()()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 168))();
}

uint64_t dispatch thunk of MAVectorRepresentation.normalized(by:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 176))();
}

uint64_t dispatch thunk of MAVectorRepresentation.reversed()()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 184))();
}

uint64_t dispatch thunk of MAVectorRepresentation.filter(threshold:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 192))();
}

uint64_t dispatch thunk of MAVectorRepresentation.abs()()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 200))();
}

uint64_t dispatch thunk of MAVectorRepresentation.count.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 208))();
}

uint64_t dispatch thunk of MAVectorRepresentation.merge(nodes:with:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 216))();
}

uint64_t method lookup function for MASquareMatrixRepresentation()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of MASquareMatrixRepresentation.__allocating_init(matrix:nodes:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 96))();
}

uint64_t dispatch thunk of MASquareMatrixRepresentation.subscript.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 104))();
}

{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 112))();
}

{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 120))();
}

{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 128))();
}

{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 136))();
}

{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 144))();
}

uint64_t dispatch thunk of MASquareMatrixRepresentation.diagVector()()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 152))();
}

uint64_t dispatch thunk of MASquareMatrixRepresentation.meanVector()()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 160))();
}

uint64_t dispatch thunk of MASquareMatrixRepresentation.weighted(vector:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 176))();
}

uint64_t dispatch thunk of MASquareMatrixRepresentation.weighted(matrix:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 184))();
}

uint64_t dispatch thunk of MASquareMatrixRepresentation.weighted(combine:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 200))();
}

uint64_t dispatch thunk of MASquareMatrixRepresentation.reversed()()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 216))();
}

uint64_t dispatch thunk of MASquareMatrixRepresentation.abs()()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 224))();
}

uint64_t dispatch thunk of MASquareMatrixRepresentation.count.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 232))();
}

uint64_t dispatch thunk of MASquareMatrixRepresentation.similarityMatrix(distance:identity:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 240))();
}

uint64_t type metadata accessor for MAMatrixRepresentation()
{
  return objc_opt_self();
}

uint64_t method lookup function for MAMatrixRepresentation()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of MAMatrixRepresentation.__allocating_init(matrix:rnodes:cnodes:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 104))();
}

uint64_t dispatch thunk of MAMatrixRepresentation.subscript.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 112))();
}

{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 120))();
}

uint64_t type metadata accessor for MAAdjacencyMatrixRepresentation()
{
  return objc_opt_self();
}

uint64_t method lookup function for MAAdjacencyMatrixRepresentation()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of MAAdjacencyMatrixRepresentation.commonNeighbours(source:target:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 272))();
}

uint64_t type metadata accessor for MAPathMatrixRepresentation()
{
  return objc_opt_self();
}

uint64_t method lookup function for MAPathMatrixRepresentation()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of MAPathMatrixRepresentation.__allocating_init(matrix:nodes:directed:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 256))();
}

uint64_t dispatch thunk of MAPathMatrixRepresentation.shortestPath(from:to:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 264))();
}

uint64_t objectdestroy_8Tm()
{
  swift_release();
  swift_bridgeObjectRelease();
  return swift_deallocObject();
}

uint64_t sub_1CA0E289C@<X0>(uint64_t a1@<X8>)
{
  uint64_t *v1;

  return sub_1CA1307F8(v1[2], v1[3], v1[6], a1);
}

void __swiftcall __spoils<CF,ZF,NF,VF,X0,X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,X21,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> MADataFrame.slice(name:columnLabels:)(MADataFrame_optional *__return_ptr retstr, Swift::String_optional name, Swift::OpaquePointer columnLabels)
{
  void *v3;
  uint64_t v4;
  void *object;
  id v7;
  uint64_t v8;
  id v9;
  _QWORD *v10;
  uint64_t v11;
  objc_class *v12;
  char *v13;
  char *v14;
  MADataFrame_optional *v15;
  id v16;
  id v17;
  void *v18;
  uint64_t v19;
  void *v20;
  void *v21;
  id v22;
  void *v23;
  __int128 v24;
  objc_super v25;
  uint64_t v26;
  __int128 v27;
  __int128 v28;
  uint64_t v29;
  uint64_t v30;
  __int128 v31;

  object = name.value._object;
  v7 = v3;
  v8 = sub_1CA0E3644((uint64_t)columnLabels._rawValue, v7);

  if (!v4)
  {
    v9 = objc_msgSend(v7, sel_matrix);
    v10 = objc_msgSend(v9, sel_wrapper);

    (*(void (**)(uint64_t *__return_ptr))((*MEMORY[0x1E0DEEDD8] & *v10) + 0x70))(&v30);
    v26 = v30;
    v27 = v31;
    Matrix<A>.subscript.getter(v8, (uint64_t *)&v28, *(int32x2_t *)&v31);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v24 = v28;
    v11 = v29;
    v12 = (objc_class *)type metadata accessor for MAFloatMatrixWrapper();
    v13 = (char *)objc_allocWithZone(v12);
    v14 = &v13[OBJC_IVAR____TtC17KnowledgeGraphKit20MAFloatMatrixWrapper__floatMatrix];
    *(_OWORD *)v14 = v24;
    *((_QWORD *)v14 + 2) = v11;
    v25.receiver = v13;
    v25.super_class = v12;
    v15 = -[MADataFrame_optional init](&v25, sel_init);
    v16 = objc_msgSend(objc_allocWithZone((Class)MAFloatMatrix), sel_initWithWrapper_, v15);

    v17 = objc_msgSend(v7, sel_rowLabels);
    if (v17)
    {
      v18 = v17;
      v19 = sub_1CA1F0AFC();

      if (object)
        goto LABEL_4;
    }
    else
    {
      v19 = 0;
      if (object)
      {
LABEL_4:
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        v20 = (void *)sub_1CA1F0A00();
        swift_bridgeObjectRelease();
        if (v19)
        {
LABEL_5:
          v21 = (void *)sub_1CA1F0AE4();
          swift_bridgeObjectRelease();
LABEL_9:
          v22 = objc_allocWithZone((Class)MADataFrame);
          v23 = (void *)sub_1CA1F0AE4();
          swift_bridgeObjectRelease();
          objc_msgSend(v22, sel_initWithName_rowLabels_columnLabels_matrix_, v20, v21, v23, v16);

          return;
        }
LABEL_8:
        v21 = 0;
        goto LABEL_9;
      }
    }
    swift_bridgeObjectRetain();
    v20 = 0;
    if (v19)
      goto LABEL_5;
    goto LABEL_8;
  }
}

MASeries __swiftcall __spoils<CF,ZF,NF,VF,X0,X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,X21,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> MADataFrame.row(forLabel:)(Swift::String forLabel)
{
  void *v1;
  void *v2;
  void *object;
  uint64_t countAndFlagsBits;
  void *v5;
  id v6;
  uint64_t v7;
  objc_class *v8;
  NSString *v9;
  MAIndexCache *v10;
  MAFloatVector *v11;
  id v12;
  void *v13;
  uint64_t v14;
  id v15;
  id v16;
  void *v17;
  void *v18;
  objc_class *v19;
  MASeries result;

  v2 = v1;
  object = forLabel._object;
  countAndFlagsBits = forLabel._countAndFlagsBits;
  v5 = (void *)sub_1CA1F0A00();
  v6 = objc_msgSend(v2, sel_indexOfRowWithLabel_, v5);

  if (v6 == (id)sub_1CA1F0784())
  {
    sub_1CA0E37A8();
    swift_allocError();
    *(_QWORD *)v7 = countAndFlagsBits;
    *(_QWORD *)(v7 + 8) = object;
    *(_BYTE *)(v7 + 16) = 1;
    swift_bridgeObjectRetain();
    v8 = (objc_class *)swift_willThrow();
  }
  else
  {
    v12 = objc_msgSend(v2, sel_columnLabels);
    if (v12)
    {
      v13 = v12;
      v14 = sub_1CA1F0AFC();

    }
    else
    {
      v14 = 0;
    }
    v15 = objc_msgSend(v2, sel_matrix);
    v16 = objc_msgSend(v15, sel_row_, v6);

    swift_bridgeObjectRetain();
    v17 = (void *)sub_1CA1F0A00();
    swift_bridgeObjectRelease();
    if (v14)
    {
      v18 = (void *)sub_1CA1F0AE4();
      swift_bridgeObjectRelease();
    }
    else
    {
      v18 = 0;
    }
    v19 = (objc_class *)objc_msgSend(objc_allocWithZone((Class)MASeries), sel_initWithName_labels_vector_, v17, v18, v16);

    v8 = v19;
  }
  result._vector = v11;
  result._indexCache = v10;
  result._name = v9;
  result.super.isa = v8;
  return result;
}

unint64_t MADataFrame.columnLabelValuesByRowLabel(withThreshold:)(float a1)
{
  void *v1;
  void *v2;
  id v4;
  void *v5;
  uint64_t v6;
  id v7;
  void *v8;
  uint64_t v9;
  unint64_t v10;
  _QWORD *v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t v20;
  float v21;
  float v22;
  char v23;
  char v24;
  unint64_t v25;
  uint64_t v26;
  _BOOL8 v27;
  uint64_t v28;
  char v29;
  unint64_t v30;
  char v31;
  uint64_t *v32;
  uint64_t v33;
  BOOL v34;
  uint64_t v35;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v37;
  char v38;
  unint64_t v39;
  uint64_t v40;
  _BOOL8 v41;
  uint64_t v42;
  char v43;
  unint64_t v44;
  char v45;
  _QWORD *v46;
  uint64_t *v47;
  uint64_t v48;
  uint64_t v49;
  unint64_t result;
  uint64_t v51;
  uint64_t *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  void *v57;
  unint64_t v58;
  uint64_t v59;

  v2 = v1;
  v4 = objc_msgSend(v1, sel_rowLabels);
  if (!v4)
    goto LABEL_40;
  v5 = v4;
  v6 = sub_1CA1F0AFC();

  v7 = objc_msgSend(v1, sel_columnLabels);
  if (!v7)
  {
    swift_bridgeObjectRelease();
LABEL_40:
    swift_bridgeObjectRelease();
    return sub_1CA0ABEA0(MEMORY[0x1E0DEE9D8]);
  }
  v8 = v7;
  v9 = sub_1CA1F0AFC();

  v54 = *(_QWORD *)(v6 + 16);
  if (!v54)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    return MEMORY[0x1E0DEE9E0];
  }
  v10 = 0;
  v59 = *(_QWORD *)(v9 + 16);
  v52 = (uint64_t *)(v9 + 40);
  v53 = v6 + 32;
  v11 = (_QWORD *)MEMORY[0x1E0DEE9E0];
  v57 = v2;
  v51 = v6;
  while (1)
  {
    if (v10 >= *(_QWORD *)(v6 + 16))
      goto LABEL_45;
    v14 = (uint64_t *)(v53 + 16 * v10);
    v15 = v14[1];
    v56 = *v14;
    swift_bridgeObjectRetain();
    if (v59)
      break;
    v18 = (_QWORD *)MEMORY[0x1E0DEE9E0];
LABEL_27:
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    v37 = v15;
    v39 = sub_1CA0AA474(v56, v15);
    v40 = v11[2];
    v41 = (v38 & 1) == 0;
    v42 = v40 + v41;
    if (__OFADD__(v40, v41))
      goto LABEL_46;
    v43 = v38;
    if (v11[3] >= v42)
    {
      if ((isUniquelyReferenced_nonNull_native & 1) != 0)
      {
        v46 = v11;
        if ((v38 & 1) == 0)
          goto LABEL_34;
      }
      else
      {
        sub_1CA0F0A9C();
        v46 = v11;
        if ((v43 & 1) == 0)
          goto LABEL_34;
      }
    }
    else
    {
      sub_1CA0ED8E8(v42, isUniquelyReferenced_nonNull_native);
      v44 = sub_1CA0AA474(v56, v37);
      if ((v43 & 1) != (v45 & 1))
        goto LABEL_48;
      v39 = v44;
      v46 = v11;
      if ((v43 & 1) == 0)
      {
LABEL_34:
        v46[(v39 >> 6) + 8] |= 1 << v39;
        v47 = (uint64_t *)(v46[6] + 16 * v39);
        *v47 = v56;
        v47[1] = v37;
        *(_QWORD *)(v46[7] + 8 * v39) = v18;
        v48 = v46[2];
        v34 = __OFADD__(v48, 1);
        v49 = v48 + 1;
        if (v34)
          goto LABEL_47;
        v12 = v46;
        v46[2] = v49;
        swift_bridgeObjectRetain();
        goto LABEL_6;
      }
    }
    v12 = v46;
    v13 = v46[7];
    swift_bridgeObjectRelease();
    *(_QWORD *)(v13 + 8 * v39) = v18;
LABEL_6:
    ++v10;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v11 = v12;
    if (v10 == v54)
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      return (unint64_t)v12;
    }
  }
  v55 = v15;
  swift_bridgeObjectRetain();
  v16 = 0;
  v17 = v52;
  v18 = (_QWORD *)MEMORY[0x1E0DEE9E0];
  v58 = v10;
  while (1)
  {
    v20 = *(v17 - 1);
    v19 = *v17;
    swift_bridgeObjectRetain();
    objc_msgSend(v2, sel_floatAtRowIndex_columnIndex_, v10, v16);
    if (v21 > a1)
      break;
    swift_bridgeObjectRelease();
LABEL_11:
    ++v16;
    v17 += 2;
    if (v59 == v16)
    {
      swift_bridgeObjectRelease();
      v6 = v51;
      v15 = v55;
      goto LABEL_27;
    }
  }
  v22 = v21;
  v23 = swift_isUniquelyReferenced_nonNull_native();
  v25 = sub_1CA0AA474(v20, v19);
  v26 = v18[2];
  v27 = (v24 & 1) == 0;
  v28 = v26 + v27;
  if (!__OFADD__(v26, v27))
  {
    v29 = v24;
    if (v18[3] >= v28)
    {
      if ((v23 & 1) != 0)
      {
        if ((v24 & 1) == 0)
          goto LABEL_22;
      }
      else
      {
        sub_1CA0F0C50();
        if ((v29 & 1) == 0)
          goto LABEL_22;
      }
    }
    else
    {
      sub_1CA0EDBFC(v28, v23);
      v30 = sub_1CA0AA474(v20, v19);
      if ((v29 & 1) != (v31 & 1))
        goto LABEL_48;
      v25 = v30;
      if ((v29 & 1) == 0)
      {
LABEL_22:
        v18[(v25 >> 6) + 8] |= 1 << v25;
        v32 = (uint64_t *)(v18[6] + 16 * v25);
        *v32 = v20;
        v32[1] = v19;
        *(float *)(v18[7] + 4 * v25) = v22;
        v33 = v18[2];
        v34 = __OFADD__(v33, 1);
        v35 = v33 + 1;
        if (v34)
          goto LABEL_44;
        v18[2] = v35;
        swift_bridgeObjectRetain();
        goto LABEL_24;
      }
    }
    *(float *)(v18[7] + 4 * v25) = v22;
LABEL_24:
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v2 = v57;
    v10 = v58;
    goto LABEL_11;
  }
  __break(1u);
LABEL_44:
  __break(1u);
LABEL_45:
  __break(1u);
LABEL_46:
  __break(1u);
LABEL_47:
  __break(1u);
LABEL_48:
  result = sub_1CA1F1360();
  __break(1u);
  return result;
}

void __swiftcall MADataFrame.normalizedByRowMagnitude()(MADataFrame_optional *__return_ptr retstr)
{
  void *v1;
  void *v2;
  id v3;
  _QWORD *v4;
  char *v5;
  char *v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  char *v11;
  uint64_t v12;
  int v13;
  unint64_t v14;
  id v15;
  void *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  id v20;
  void *v21;
  uint64_t v22;
  id v23;
  void *v24;
  uint64_t v25;
  objc_class *v26;
  char *v27;
  char **v28;
  MADataFrame_optional *v29;
  id v30;
  id v31;
  objc_super v32;
  float __B;
  char *v34;
  char *v35;
  int64_t v36;
  uint64_t v37;

  v2 = v1;
  v37 = *MEMORY[0x1E0C80C00];
  v3 = objc_msgSend(v1, sel_matrix);
  v4 = objc_msgSend(v3, sel_wrapper);

  (*(void (**)(char **__return_ptr))((*MEMORY[0x1E0DEEDD8] & *v4) + 0x70))(&v34);
  v5 = v35;
  if (((unint64_t)v35 & 0x8000000000000000) != 0)
  {
LABEL_38:
    sub_1CA1F11BC();
    __break(1u);
    return;
  }
  v6 = v34;
  v7 = v36;
  swift_bridgeObjectRetain();
  if (v5)
  {
    v8 = sub_1CA1F0B68();
    *(_QWORD *)(v8 + 16) = v5;
    if (v7 < (uint64_t)0xFFFFFFFF80000000)
    {
      __break(1u);
    }
    else if (v7 <= 0x7FFFFFFF)
    {
      v9 = v8;
      v10 = 0;
      do
      {
        if ((unsigned __int128)((uint64_t)v10 * (__int128)v7) >> 64 != ((uint64_t)v10 * v7) >> 63)
        {
          __break(1u);
          goto LABEL_21;
        }
        v11 = v10 + 1;
        v12 = v9 + 4 * (_QWORD)v10;
        cblas_snrm2_NEWLAPACK();
        *(_DWORD *)(v12 + 32) = v13;
        v10 = v11;
      }
      while (v5 != v11);
      goto LABEL_10;
    }
    __break(1u);
  }
  v9 = MEMORY[0x1E0DEE9D8];
LABEL_10:
  *(_QWORD *)(v9 + 16) = v5;
  swift_bridgeObjectRelease();
  if (v5 != *(char **)(v9 + 16))
    goto LABEL_23;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    goto LABEL_24;
  for (; v5; v6 = sub_1CA0B6080((uint64_t)v6))
  {
    v14 = 0;
    while ((unsigned __int128)((uint64_t)v14 * (__int128)v7) >> 64 == (uint64_t)(v14 * v7) >> 63)
    {
      if (v14 >= *(_QWORD *)(v9 + 16))
        goto LABEL_22;
      __B = *(float *)(v9 + 32 + 4 * v14);
      if (__B != 0.0)
      {
        if (v7 < 0)
        {
          sub_1CA1F11BC();
          __break(1u);
          goto LABEL_38;
        }
        vDSP_vsdiv((const float *)&v6[4 * v14 * v7 + 32], 1, &__B, (float *)&v6[4 * v14 * v7 + 32], 1, v7);
      }
      if (v5 == (char *)++v14)
        goto LABEL_25;
    }
LABEL_21:
    __break(1u);
LABEL_22:
    __break(1u);
LABEL_23:
    __break(1u);
LABEL_24:
    ;
  }
LABEL_25:
  swift_bridgeObjectRelease();
  v15 = objc_msgSend(v2, sel_name);
  if (v15)
  {
    v16 = v15;
    v17 = sub_1CA1F0A0C();
    v19 = v18;

  }
  else
  {
    v17 = 0;
    v19 = 0;
  }
  v20 = objc_msgSend(v2, sel_rowLabels);
  if (v20)
  {
    v21 = v20;
    v22 = sub_1CA1F0AFC();

  }
  else
  {
    v22 = 0;
  }
  v23 = objc_msgSend(v2, sel_columnLabels);
  if (v23)
  {
    v24 = v23;
    v25 = sub_1CA1F0AFC();

  }
  else
  {
    v25 = 0;
  }
  v26 = (objc_class *)type metadata accessor for MAFloatMatrixWrapper();
  v27 = (char *)objc_allocWithZone(v26);
  v28 = (char **)&v27[OBJC_IVAR____TtC17KnowledgeGraphKit20MAFloatMatrixWrapper__floatMatrix];
  *v28 = v6;
  v28[1] = v5;
  v28[2] = (char *)v7;
  v32.receiver = v27;
  v32.super_class = v26;
  v29 = -[MADataFrame_optional init](&v32, sel_init);
  v30 = objc_msgSend(objc_allocWithZone((Class)MAFloatMatrix), sel_initWithWrapper_, v29);

  v31 = objc_allocWithZone((Class)MADataFrame);
  sub_1CA0E3568(v17, v19, v22, v25, v30);
}

id sub_1CA0E3568(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void *a5)
{
  void *v5;
  void *v9;
  void *v10;
  void *v11;
  id v12;

  if (a2)
  {
    v9 = (void *)sub_1CA1F0A00();
    swift_bridgeObjectRelease();
    if (a3)
      goto LABEL_3;
LABEL_6:
    v10 = 0;
    if (a4)
      goto LABEL_4;
LABEL_7:
    v11 = 0;
    goto LABEL_8;
  }
  v9 = 0;
  if (!a3)
    goto LABEL_6;
LABEL_3:
  v10 = (void *)sub_1CA1F0AE4();
  swift_bridgeObjectRelease();
  if (!a4)
    goto LABEL_7;
LABEL_4:
  v11 = (void *)sub_1CA1F0AE4();
  swift_bridgeObjectRelease();
LABEL_8:
  v12 = objc_msgSend(v5, sel_initWithName_rowLabels_columnLabels_matrix_, v9, v10, v11, a5);

  return v12;
}

uint64_t sub_1CA0E3644(uint64_t a1, void *a2)
{
  int64_t v2;
  uint64_t v3;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  id v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v15;

  v2 = *(_QWORD *)(a1 + 16);
  v3 = MEMORY[0x1E0DEE9D8];
  if (v2)
  {
    v15 = MEMORY[0x1E0DEE9D8];
    sub_1CA0CD534(0, v2, 0);
    v3 = v15;
    v6 = (uint64_t *)(a1 + 40);
    while (1)
    {
      v8 = *(v6 - 1);
      v7 = *v6;
      swift_bridgeObjectRetain();
      v9 = (void *)sub_1CA1F0A00();
      v10 = objc_msgSend(a2, sel_indexOfColumnWithLabel_, v9);

      if (v10 == (id)sub_1CA1F0784())
        break;
      swift_bridgeObjectRelease();
      v12 = *(_QWORD *)(v15 + 16);
      v11 = *(_QWORD *)(v15 + 24);
      if (v12 >= v11 >> 1)
        sub_1CA0CD534(v11 > 1, v12 + 1, 1);
      v6 += 2;
      *(_QWORD *)(v15 + 16) = v12 + 1;
      *(_QWORD *)(v15 + 8 * v12 + 32) = v10;
      if (!--v2)
        return v3;
    }
    sub_1CA0E37A8();
    swift_allocError();
    *(_QWORD *)v13 = v8;
    *(_QWORD *)(v13 + 8) = v7;
    *(_BYTE *)(v13 + 16) = 0;
    swift_willThrow();
    swift_release();
  }
  return v3;
}

unint64_t sub_1CA0E37A8()
{
  unint64_t result;

  result = qword_1EF938300;
  if (!qword_1EF938300)
  {
    result = MEMORY[0x1CAA4BB30](&unk_1CA1F9D28, &_s5ErrorON);
    atomic_store(result, (unint64_t *)&qword_1EF938300);
  }
  return result;
}

uint64_t sub_1CA0E37F0()
{
  return swift_bridgeObjectRetain();
}

uint64_t _s5ErrorOwxx()
{
  return sub_1CA0E3808();
}

uint64_t sub_1CA0E3808()
{
  return swift_bridgeObjectRelease();
}

uint64_t _s5ErrorOwCP_0(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;
  char v5;

  v3 = *a2;
  v4 = a2[1];
  v5 = *((_BYTE *)a2 + 16);
  sub_1CA0E37F0();
  *(_QWORD *)a1 = v3;
  *(_QWORD *)(a1 + 8) = v4;
  *(_BYTE *)(a1 + 16) = v5;
  return a1;
}

uint64_t _s5ErrorOwca(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;
  char v5;

  v3 = *a2;
  v4 = a2[1];
  v5 = *((_BYTE *)a2 + 16);
  sub_1CA0E37F0();
  *(_QWORD *)a1 = v3;
  *(_QWORD *)(a1 + 8) = v4;
  *(_BYTE *)(a1 + 16) = v5;
  sub_1CA0E3808();
  return a1;
}

uint64_t _s5ErrorOwta(uint64_t a1, uint64_t a2)
{
  char v3;

  v3 = *(_BYTE *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_BYTE *)(a1 + 16) = v3;
  sub_1CA0E3808();
  return a1;
}

uint64_t _s5ErrorOwet(uint64_t a1, unsigned int a2)
{
  unsigned int v3;
  int v4;

  if (!a2)
    return 0;
  if (a2 >= 0xFF && *(_BYTE *)(a1 + 17))
    return (*(_DWORD *)a1 + 255);
  v3 = *(unsigned __int8 *)(a1 + 16);
  if (v3 <= 1)
    v4 = -1;
  else
    v4 = v3 ^ 0xFF;
  return (v4 + 1);
}

uint64_t _s5ErrorOwst(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFE)
  {
    *(_BYTE *)(result + 16) = 0;
    *(_QWORD *)result = a2 - 255;
    *(_QWORD *)(result + 8) = 0;
    if (a3 >= 0xFF)
      *(_BYTE *)(result + 17) = 1;
  }
  else
  {
    if (a3 >= 0xFF)
      *(_BYTE *)(result + 17) = 0;
    if (a2)
      *(_BYTE *)(result + 16) = -(char)a2;
  }
  return result;
}

uint64_t sub_1CA0E397C(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 16);
}

uint64_t sub_1CA0E3984(uint64_t result, char a2)
{
  *(_BYTE *)(result + 16) = a2 & 1;
  return result;
}

ValueMetadata *_s5ErrorOMa()
{
  return &_s5ErrorON;
}

double SparseArray.init(arrayLiteral:)@<D0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, _OWORD *a4@<X8>)
{
  uint64_t v7;
  uint64_t v8;
  double result;
  uint64_t v10;
  __int128 v11;

  v10 = a1;
  v7 = sub_1CA1F0BE0();
  v8 = MEMORY[0x1CAA4BB30](MEMORY[0x1E0DEAF50], v7);
  SparseArray.init<A>(denseValues:)((uint64_t)&v10, a2, v7, a3, v8, &v11);
  result = *(double *)&v11;
  *a4 = v11;
  return result;
}

uint64_t SparseArray.append(offset:value:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  char v12;
  uint64_t result;
  _QWORD *v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;

  v4 = v3;
  v7 = *(_QWORD *)(a3 + 16);
  v8 = *(_QWORD *)(v7 - 8);
  MEMORY[0x1E0C80A78](a1, a2);
  v10 = (char *)&v18 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)(v11 + 24) + 16))(v7, *(_QWORD *)(v11 + 24));
  v12 = sub_1CA1F09D0();
  result = (*(uint64_t (**)(char *, uint64_t))(v8 + 8))(v10, v7);
  if ((v12 & 1) == 0)
  {
    v14 = *(_QWORD **)(v4 + 8);
    v15 = v14[2];
    if (v15 && v14[v15 + 3] >= a1)
    {
      __break(1u);
    }
    else
    {
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        v14 = sub_1CA0E5AC4(0, v15 + 1, 1, v14, &qword_1EF938428);
      v17 = v14[2];
      v16 = v14[3];
      if (v17 >= v16 >> 1)
        v14 = sub_1CA0E5AC4((_QWORD *)(v16 > 1), v17 + 1, 1, v14, &qword_1EF938428);
      v14[2] = v17 + 1;
      v14[v17 + 4] = a1;
      *(_QWORD *)(v4 + 8) = v14;
      (*(void (**)(char *, uint64_t, uint64_t))(v8 + 16))(v10, a2, v7);
      sub_1CA1F0BE0();
      return sub_1CA1F0BB0();
    }
  }
  return result;
}

uint64_t SparseArray.init(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t *a4@<X8>)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t result;
  _QWORD v15[8];

  v8 = sub_1CA1F08F8();
  MEMORY[0x1CAA4BB30](MEMORY[0x1E0DE9ED0], v8);
  v9 = sub_1CA1F0AC0();
  v15[7] = v9;
  v15[2] = a2;
  v15[3] = a3;
  v15[4] = a1;
  swift_bridgeObjectRetain();
  v10 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EF938308);
  v11 = sub_1CA0E69F0();
  v13 = sub_1CA0E3CE8((void (*)(char *, char *))sub_1CA0E69D0, (uint64_t)v15, v10, a2, MEMORY[0x1E0DEDCE8], v11, MEMORY[0x1E0DEDD18], v12);
  swift_bridgeObjectRelease();
  result = swift_bridgeObjectRelease();
  *a4 = v13;
  a4[1] = v9;
  return result;
}

uint64_t SparseArray.init(values:offsets:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, _QWORD *a4@<X8>)
{
  uint64_t result;

  result = MEMORY[0x1CAA4A2A0](a1, a3);
  if (result == *(_QWORD *)(a2 + 16))
  {
    *a4 = a1;
    a4[1] = a2;
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t sub_1CA0E3CE8(void (*a1)(char *, char *), uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t AssociatedTypeWitness;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t result;
  uint64_t v26;
  void (*v27)(char *, _QWORD);
  void (*v28)(char *);
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  char *v38;
  uint64_t v39;
  uint64_t v40;
  void (*v41)(char *, char *);
  uint64_t v42;
  char *v43;
  uint64_t v44;
  uint64_t v45;
  char v46[32];
  uint64_t v47;

  v33 = a5;
  v34 = a8;
  v41 = a1;
  v42 = a2;
  v32 = *(_QWORD *)(a5 - 8);
  MEMORY[0x1E0C80A78](a1, a2);
  v43 = (char *)&v32 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v11 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v13 = MEMORY[0x1E0C80A78](AssociatedTypeWitness, v12);
  v15 = (char *)&v32 - v14;
  MEMORY[0x1E0C80A78](v13, v16);
  v18 = (char *)&v32 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v19 = swift_getAssociatedTypeWitness();
  v35 = *(_QWORD *)(v19 - 8);
  v36 = v19;
  MEMORY[0x1E0C80A78](v19, v20);
  v22 = (char *)&v32 - v21;
  v23 = sub_1CA1F0D24();
  if (!v23)
    return sub_1CA1F0B50();
  v39 = AssociatedTypeWitness;
  v24 = v23;
  v47 = sub_1CA1F08A4();
  v37 = sub_1CA1F112C();
  sub_1CA1F10E4();
  v40 = v8;
  result = sub_1CA1F0D18();
  if ((v24 & 0x8000000000000000) == 0)
  {
    v26 = v24;
    v38 = v18;
    while (v26)
    {
      v44 = v26;
      v27 = (void (*)(char *, _QWORD))sub_1CA1F0DCC();
      v28 = *(void (**)(char *))(v11 + 16);
      v29 = v11;
      v30 = v39;
      v28(v15);
      v27(v46, 0);
      v31 = v45;
      v41(v15, v43);
      if (v31)
      {
        (*(void (**)(char *, uint64_t))(v29 + 8))(v15, v30);
        (*(void (**)(char *, uint64_t))(v35 + 8))(v22, v36);
        swift_release();
        return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v32 + 32))(v34, v43, v33);
      }
      v45 = 0;
      (*(void (**)(char *, uint64_t))(v29 + 8))(v15, v30);
      sub_1CA1F1114();
      result = sub_1CA1F0D30();
      v26 = v44 - 1;
      v11 = v29;
      if (v44 == 1)
      {
        (*(void (**)(char *, uint64_t))(v35 + 8))(v22, v36);
        return v47;
      }
    }
    __break(1u);
  }
  __break(1u);
  return result;
}

uint64_t sub_1CA0E3FD8(unint64_t a1)
{
  _QWORD **v1;
  _QWORD *v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t result;

  v3 = *v1;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    v3 = sub_1CA0B606C(v3);
  v4 = v3[2];
  if (v4 <= a1)
  {
    __break(1u);
  }
  else
  {
    v5 = v4 - 1;
    v6 = v4 - 1 - a1;
    if (v6 >= 0)
    {
      v7 = &v3[a1];
      v8 = v7[4];
      memmove(v7 + 4, v7 + 5, 8 * v6);
      v3[2] = v5;
      *v1 = v3;
      return v8;
    }
  }
  result = sub_1CA1F1270();
  __break(1u);
  return result;
}

uint64_t SparseArray.values.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t SparseArray.offsets.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t SparseArray.init()@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;
  uint64_t v3;

  result = sub_1CA1F0B50();
  v3 = MEMORY[0x1E0DEE9D8];
  *a1 = result;
  a1[1] = v3;
  return result;
}

BOOL static SparseArray.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  _QWORD *v3;

  v2 = *(_QWORD **)(a1 + 8);
  v3 = *(_QWORD **)(a2 + 8);
  return (sub_1CA1F0BF8() & 1) != 0 && sub_1CA0B52FC(v2, v3);
}

BOOL sub_1CA0E4138(uint64_t a1, uint64_t a2)
{
  return static SparseArray.== infix(_:_:)(a1, a2);
}

uint64_t SparseArray.withBuffer<A>(transform:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t (*v20)();
  uint64_t *v21;

  v6 = *v4;
  v5 = v4[1];
  v7 = *(_QWORD *)(a3 + 24);
  v10 = *(_QWORD *)(a3 + 16);
  v11 = a4;
  v12 = v7;
  v13 = v6;
  v14 = v5;
  v15 = a1;
  v16 = a2;
  v17 = v10;
  v18 = a4;
  v19 = v7;
  v20 = sub_1CA0E6A3C;
  v21 = &v9;
  return sub_1CA1F0B5C();
}

uint64_t sub_1CA0E41AC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t (*a7)(_QWORD *))
{
  uint64_t v11;
  _QWORD v14[8];
  _QWORD v15[2];

  v15[0] = a1;
  v15[1] = a2;
  v11 = sub_1CA1F09F4();
  MEMORY[0x1CAA4BB30](MEMORY[0x1E0DEA5E8], v11);
  sub_1CA1F0DA8();
  v14[0] = a3;
  v14[1] = a4;
  v14[2] = a5;
  v14[3] = a6;
  sub_1CA0FF914(v14[4], v14[5], v14[6], v14[7], (uint64_t)v14, (uint64_t)v15);
  return a7(v15);
}

double SparseArray.formUnion<A>(with:combine:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  _OWORD *v6;
  uint64_t v13;
  double result;
  __int128 v15;

  v13 = MEMORY[0x1CAA4BB30](&protocol conformance descriptor for SparseArray<A>, a4);
  SparseArrayProtocol.union<A>(with:combine:)(a1, a2, a3, a4, a5, v13, a6);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  result = *(double *)&v15;
  *v6 = v15;
  return result;
}

double SparseArray.formIntersection<A>(with:combine:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  _OWORD *v6;
  uint64_t v12;
  uint64_t v13;
  double result;
  __int128 v16;

  v12 = *(_QWORD *)(a4 + 16);
  v13 = MEMORY[0x1CAA4BB30](&protocol conformance descriptor for SparseArray<A>, a4);
  SparseArrayProtocol.intersection<A, B>(with:combine:)(a1, a2, a3, a4, a5, v12, v13, a6, *(_QWORD *)(a4 + 24));
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  result = *(double *)&v16;
  *v6 = v16;
  return result;
}

uint64_t SparseArray.sparseValues.getter()
{
  sub_1CA0E6924();
  return swift_bridgeObjectRetain();
}

uint64_t SparseArray.sparseValueIndices.getter()
{
  sub_1CA0E692C();
  return swift_bridgeObjectRetain();
}

uint64_t sub_1CA0E443C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return SparseArray.withBuffer<A>(transform:)(a1, a2, a4, a3);
}

uint64_t sub_1CA0E445C()
{
  sub_1CA0E6924();
  return swift_bridgeObjectRetain();
}

uint64_t sub_1CA0E4470()
{
  sub_1CA0E692C();
  return swift_bridgeObjectRetain();
}

double static SparseArray.defaultSparseValue.getter@<D0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _OWORD *a3@<X8>)
{
  uint64_t v6;

  v6 = sub_1CA1F0B50();
  return SparseArray.init(arrayLiteral:)(v6, a1, a2, a3);
}

double sub_1CA0E44C8@<D0>(uint64_t a1@<X0>, _OWORD *a2@<X8>)
{
  return static SparseArray.defaultSparseValue.getter(*(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), a2);
}

uint64_t SparseArray.getValue(atOffset:)(uint64_t a1, uint64_t a2)
{
  __int128 *v2;
  uint64_t v4;
  _OWORD v6[2];
  uint64_t v7;
  __int128 v8;

  v8 = *v2;
  v6[1] = *(_OWORD *)(a2 + 16);
  v7 = a1;
  v4 = sub_1CA1F0EB0();
  return SparseArray.withBuffer<A>(transform:)((uint64_t)sub_1CA0E6A90, (uint64_t)v6, a2, v4);
}

uint64_t sub_1CA0E4548@<X0>(uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X3>, uint64_t a4@<X8>)
{
  uint64_t v6;

  v6 = type metadata accessor for SparseBuffer(0, a2, a3, a3);
  return SparseBuffer.getValue(atOffset:)(a1, v6, a4);
}

_QWORD *SparseArray.set(_:atOffset:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t *v4;
  uint64_t *v5;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  int64_t v15;
  int v16;
  uint64_t v17;
  char v18;
  void (*v19)(char *, uint64_t);
  uint64_t v20;
  _QWORD *result;
  uint64_t v22;
  char isClassOrObjCExistentialType;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t *v27;
  uint64_t v28;
  char v29;
  uint64_t v30;
  int64_t v31;
  unsigned __int8 v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t (*v36)@<X0>(uint64_t *@<X0>, uint64_t@<X8>);
  char *v37;

  v5 = v4;
  v28 = a4;
  v8 = *(_QWORD *)(a3 + 16);
  v9 = *(_QWORD *)(v8 - 8);
  MEMORY[0x1E0C80A78](a1, a2);
  v11 = (char *)&v25 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v26 = v12;
  v27 = v5 + 1;
  v30 = v12;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v13 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EF938318);
  v33 = v8;
  v34 = v13;
  v35 = *(_QWORD *)(a3 + 24);
  v14 = v35;
  v36 = sub_1CA0E6AAC;
  v37 = &v29;
  sub_1CA1F0B5C();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v15 = v31;
  v16 = v32;
  (*(void (**)(uint64_t, uint64_t))(v14 + 16))(v8, v14);
  v17 = a1;
  v18 = sub_1CA1F09D0();
  v19 = *(void (**)(char *, uint64_t))(v9 + 8);
  v19(v11, v8);
  if (v16 == 1)
  {
    v20 = v28;
    sub_1CA1F0C28();
    (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v9 + 56))(v20, 0, 1, v8);
    sub_1CA1F0BE0();
    if ((v18 & 1) != 0)
    {
      sub_1CA1F0BC8();
      v19(v11, v8);
      return (_QWORD *)sub_1CA0E3FD8(v15);
    }
    else
    {
      sub_1CA1F0B44();
      v22 = *v5;
      sub_1CA0E649C(v15, *v5);
      isClassOrObjCExistentialType = _swift_isClassOrObjCExistentialType();
      v24 = v22 & 0xFFFFFFFFFFFFFF8;
      if ((isClassOrObjCExistentialType & 1) == 0)
        v24 = v22;
      return (_QWORD *)(*(uint64_t (**)(unint64_t, uint64_t, uint64_t))(v9 + 24))(v24+ ((*(unsigned __int8 *)(v9 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v9 + 80))+ *(_QWORD *)(v9 + 72) * v15, v17, v8);
    }
  }
  else
  {
    result = (_QWORD *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56))(v28, 1, 1, v8);
    if ((v18 & 1) == 0)
    {
      (*(void (**)(char *, uint64_t, uint64_t))(v9 + 16))(v11, a1, v8);
      sub_1CA1F0BE0();
      result = (_QWORD *)sub_1CA1F0BBC();
      if (*(_QWORD *)(v5[1] + 16) < v15)
      {
        __break(1u);
      }
      else if ((v15 & 0x8000000000000000) == 0)
      {
        return sub_1CA0E64EC(v15, v15, v26);
      }
      __break(1u);
    }
  }
  return result;
}

uint64_t SparseArray.subscript.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  __int128 *v3;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  __int128 v15;

  v7 = *(_QWORD *)(a2 + 16);
  v8 = sub_1CA1F0EB0();
  v9 = *(_QWORD *)(v8 - 8);
  MEMORY[0x1E0C80A78](v8, v10);
  v12 = (char *)&v15 - v11;
  v15 = *v3;
  SparseArray.getValue(atOffset:)(a1, a2);
  v13 = *(_QWORD *)(v7 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v13 + 48))(v12, 1, v7) != 1)
    return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v13 + 32))(a3, v12, v7);
  (*(void (**)(uint64_t))(*(_QWORD *)(a2 + 24) + 16))(v7);
  return (*(uint64_t (**)(char *, uint64_t))(v9 + 8))(v12, v8);
}

uint64_t sub_1CA0E4958@<X0>(uint64_t *a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X3>, uint64_t a4@<X8>)
{
  uint64_t v5;
  uint64_t v6;

  v5 = *a1;
  v6 = type metadata accessor for SparseArray(0, *(uint64_t *)((char *)a1 + a2 - 16), *(uint64_t *)((char *)a1 + a2 - 8), a3);
  return SparseArray.subscript.getter(v5, v6, a4);
}

uint64_t SparseArray.subscript.setter(uint64_t a1, uint64_t a2, uint64_t a3)
{
  sub_1CA0E6934(a1, a2, a3);
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)(*(_QWORD *)(a3 + 16) - 8) + 8))(a1);
}

void (*SparseArray.subscript.modify(_QWORD *a1, uint64_t a2, uint64_t a3))(uint64_t *a1, char a2)
{
  uint64_t v3;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  size_t v10;
  uint64_t v11;
  uint64_t v12;
  void (*v14)(uint64_t, uint64_t);
  _QWORD v15[4];

  v7 = malloc(0xC8uLL);
  *a1 = v7;
  v7[13] = a2;
  v7[14] = v3;
  v8 = *(_QWORD *)(a3 + 16);
  v7[15] = v8;
  v9 = *(_QWORD *)(v8 - 8);
  v7[16] = v9;
  v10 = *(_QWORD *)(v9 + 64);
  v7[17] = malloc(v10);
  v7[18] = malloc(v10);
  v7[19] = malloc(v10);
  v15[2] = a2;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v11 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EF938318);
  v7[2] = v8;
  v7[3] = v11;
  v12 = *(_QWORD *)(a3 + 24);
  v7[20] = v12;
  v7[4] = v12;
  v7[5] = sub_1CA0E6AAC;
  v7[6] = v15;
  sub_1CA1F0B5C();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v7[21] = v7[11];
  if (*((_BYTE *)v7 + 96) == 1)
  {
    v7[22] = sub_1CA1F0BE0();
    v7[23] = sub_1CA1F0C1C();
    return sub_1CA0E4B84;
  }
  else
  {
    v14 = *(void (**)(uint64_t, uint64_t))(v12 + 16);
    v7[24] = v14;
    v14(v8, v12);
    return sub_1CA0E4C90;
  }
}

void sub_1CA0E4B84(uint64_t *a1, char a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void (*v9)(uint64_t, uint64_t);
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void *v13;
  void *v14;

  v3 = *a1;
  (*(void (**)(uint64_t, _QWORD))(*a1 + 184))(*a1 + 56, 0);
  if ((a2 & 1) == 0)
  {
    v4 = *(_QWORD *)(v3 + 160);
    v6 = *(_QWORD *)(v3 + 144);
    v5 = *(_QWORD *)(v3 + 152);
    v7 = *(_QWORD *)(v3 + 120);
    v8 = *(_QWORD *)(v3 + 128);
    sub_1CA1F0C28();
    (*(void (**)(uint64_t, uint64_t))(v4 + 16))(v7, v4);
    LOBYTE(v4) = sub_1CA1F09D0();
    v9 = *(void (**)(uint64_t, uint64_t))(v8 + 8);
    v9(v6, v7);
    v9(v5, v7);
    if ((v4 & 1) != 0)
    {
      v10 = *(_QWORD *)(v3 + 168);
      v11 = *(_QWORD *)(v3 + 152);
      v12 = *(_QWORD *)(v3 + 120);
      sub_1CA1F0BC8();
      v9(v11, v12);
      sub_1CA0E3FD8(v10);
    }
  }
  v13 = *(void **)(v3 + 144);
  v14 = *(void **)(v3 + 136);
  free(*(void **)(v3 + 152));
  free(v13);
  free(v14);
  free((void *)v3);
}

void sub_1CA0E4C90(uint64_t *a1, char a2)
{
  uint64_t v2;
  void (*v3)(uint64_t, uint64_t);
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void (*v9)(uint64_t, _QWORD, uint64_t);
  void (*v10)(uint64_t, uint64_t);
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  void *v14;
  void *v15;

  v2 = *a1;
  if ((a2 & 1) != 0)
  {
    (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)(v2 + 128) + 8))(*(_QWORD *)(v2 + 136), *(_QWORD *)(v2 + 120));
LABEL_8:
    v14 = *(void **)(v2 + 144);
    v15 = *(void **)(v2 + 136);
    free(*(void **)(v2 + 152));
    free(v14);
    free(v15);
    free((void *)v2);
    return;
  }
  v3 = *(void (**)(uint64_t, uint64_t))(v2 + 192);
  v5 = *(_QWORD *)(v2 + 152);
  v4 = *(_QWORD *)(v2 + 160);
  v6 = *(_QWORD *)(v2 + 144);
  v7 = *(_QWORD *)(v2 + 120);
  v8 = *(_QWORD *)(v2 + 128);
  v9 = *(void (**)(uint64_t, _QWORD, uint64_t))(v8 + 16);
  v9(v5, *(_QWORD *)(v2 + 136), v7);
  v3(v7, v4);
  LOBYTE(v4) = sub_1CA1F09D0();
  v10 = *(void (**)(uint64_t, uint64_t))(v8 + 8);
  v10(v6, v7);
  v10(v5, v7);
  if ((v4 & 1) != 0)
  {
LABEL_7:
    v10(*(_QWORD *)(v2 + 136), *(_QWORD *)(v2 + 120));
    goto LABEL_8;
  }
  v11 = *(_QWORD *)(v2 + 168);
  v12 = *(_QWORD *)(v2 + 112);
  v9(*(_QWORD *)(v2 + 152), *(_QWORD *)(v2 + 136), *(_QWORD *)(v2 + 120));
  sub_1CA1F0BE0();
  sub_1CA1F0BBC();
  if (*(_QWORD *)(*(_QWORD *)(v12 + 8) + 16) < v11)
  {
    __break(1u);
  }
  else
  {
    v13 = *(_QWORD *)(v2 + 168);
    if ((v13 & 0x8000000000000000) == 0)
    {
      sub_1CA0E64EC(v13, *(_QWORD *)(v2 + 168), *(_QWORD *)(v2 + 104));
      goto LABEL_7;
    }
  }
  __break(1u);
}

uint64_t sub_1CA0E4DD8@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t result;
  uint64_t v14;
  uint64_t v15;

  v8 = sub_1CA1F0EB0();
  MEMORY[0x1E0C80A78](v8, v9);
  v11 = (char *)&v14 - v10;
  v15 = *a1;
  MEMORY[0x1CAA4A018](&v15, a2, MEMORY[0x1E0DEDC60], a3, MEMORY[0x1E0DEDC70]);
  v12 = *(_QWORD *)(a3 - 8);
  result = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v12 + 48))(v11, 1, a3);
  if ((_DWORD)result != 1)
    return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v12 + 32))(a4, v11, a3);
  __break(1u);
  return result;
}

double SparseArray.init<A>(_:)@<D0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, _OWORD *a5@<X8>)
{
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t TupleTypeMetadata2;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t AssociatedTypeWitness;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  unsigned int (*v25)(uint64_t *, uint64_t, uint64_t);
  char *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  double result;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  _OWORD *v36;
  uint64_t v37;
  void (*v38)(char *, char *, uint64_t);
  uint64_t v39;
  uint64_t v40;
  __int128 v41;

  v36 = a5;
  v37 = a1;
  v7 = *(_QWORD *)(a2 - 8);
  v39 = a4;
  v40 = v7;
  MEMORY[0x1E0C80A78](a1, a2);
  v9 = (char *)&v33 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  v11 = sub_1CA1F0EB0();
  v13 = MEMORY[0x1E0C80A78](v11, v12);
  v15 = (uint64_t *)((char *)&v33 - v14);
  v16 = *(_QWORD *)(a3 - 8);
  MEMORY[0x1E0C80A78](v13, v17);
  v19 = (char *)&v33 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v33 = *(_QWORD *)(AssociatedTypeWitness - 8);
  MEMORY[0x1E0C80A78](AssociatedTypeWitness, v21);
  v23 = (char *)&v33 - v22;
  *(_QWORD *)&v41 = sub_1CA1F0B50();
  *((_QWORD *)&v41 + 1) = MEMORY[0x1E0DEE9D8];
  v34 = v16;
  (*(void (**)(char *, uint64_t, uint64_t))(v16 + 16))(v19, v37, a3);
  sub_1CA1F0A6C();
  v35 = a3;
  v24 = AssociatedTypeWitness;
  swift_getAssociatedConformanceWitness();
  sub_1CA1F0EC8();
  v25 = *(unsigned int (**)(uint64_t *, uint64_t, uint64_t))(*(_QWORD *)(TupleTypeMetadata2 - 8) + 48);
  if (v25(v15, 1, TupleTypeMetadata2) != 1)
  {
    v38 = *(void (**)(char *, char *, uint64_t))(v40 + 32);
    do
    {
      v26 = v23;
      v27 = v24;
      v28 = *v15;
      v38(v9, (char *)v15 + *(int *)(TupleTypeMetadata2 + 48), a2);
      v30 = type metadata accessor for SparseArray(0, a2, v39, v29);
      v31 = v28;
      v24 = v27;
      v23 = v26;
      sub_1CA0E6934((uint64_t)v9, v31, v30);
      (*(void (**)(char *, uint64_t))(v40 + 8))(v9, a2);
      sub_1CA1F0EC8();
    }
    while (v25(v15, 1, TupleTypeMetadata2) != 1);
  }
  (*(void (**)(uint64_t, uint64_t))(v34 + 8))(v37, v35);
  (*(void (**)(char *, uint64_t))(v33 + 8))(v23, v24);
  result = *(double *)&v41;
  *v36 = v41;
  return result;
}

double SparseArray.init<A>(denseValues:)@<D0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, _OWORD *a6@<X8>)
{
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  double v18;
  double result;
  __int128 v20;
  unint64_t v21;
  uint64_t v22;

  __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_1EF938320);
  v12 = sub_1CA0E6B00();
  v13 = *(_QWORD *)(a5 + 8);
  *((_QWORD *)&v20 + 1) = a3;
  v21 = v12;
  v22 = v13;
  v14 = sub_1CA1F1078();
  MEMORY[0x1E0C80A78](v14, v15);
  v17 = (char *)&v20 - v16;
  *(_QWORD *)&v20 = 0;
  sub_1CA1F1348();
  MEMORY[0x1CAA4BB30](MEMORY[0x1E0DEC3A0], v14);
  v18 = SparseArray.init<A>(_:)((uint64_t)v17, a2, v14, a4, &v20);
  (*(void (**)(uint64_t, uint64_t, double))(*(_QWORD *)(a3 - 8) + 8))(a1, a3, v18);
  result = *(double *)&v20;
  *a6 = v20;
  return result;
}

double sub_1CA0E52A4@<D0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _OWORD *a3@<X8>)
{
  return SparseArray.init(arrayLiteral:)(a1, *(_QWORD *)(a2 + 16), *(_QWORD *)(a2 + 24), a3);
}

uint64_t static SparseArray<>.zero.getter@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v4;
  uint64_t result;
  uint64_t v6;

  v4 = sub_1CA1F0B50();
  result = MEMORY[0x1CAA4A2A0](v4, a1);
  v6 = MEMORY[0x1E0DEE9D8];
  if (result == *(_QWORD *)(MEMORY[0x1E0DEE9D8] + 16))
  {
    *a2 = v4;
    a2[1] = v6;
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t static SparseArray<>.+ infix(_:_:)(_OWORD *a1, _OWORD *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return sub_1CA0E5330(a1, a2, a3, a4, a5, (uint64_t)sub_1CA0E6B6C);
}

double static SparseArray<>.+= infix(_:_:)(uint64_t a1, __int128 *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return sub_1CA0E53D0(a1, a2, a3, a4, a5, (uint64_t)sub_1CA0E6B6C);
}

uint64_t static SparseArray<>.- infix(_:_:)(_OWORD *a1, _OWORD *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return sub_1CA0E5330(a1, a2, a3, a4, a5, (uint64_t)sub_1CA0E6B78);
}

uint64_t sub_1CA0E5330(_OWORD *a1, _OWORD *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v7;
  uint64_t v8;
  _QWORD v10[6];
  _OWORD v11[2];

  v11[1] = *a1;
  v11[0] = *a2;
  v10[2] = a3;
  v10[3] = a4;
  v10[4] = a5;
  v10[5] = a3;
  v7 = type metadata accessor for SparseArray(0, a3, a4, a4);
  v8 = MEMORY[0x1CAA4BB30](&protocol conformance descriptor for SparseArray<A>, v7);
  return SparseArrayProtocol.union<A>(with:combine:)((uint64_t)v11, a6, (uint64_t)v10, v7, v7, v8, v8);
}

double static SparseArray<>.-= infix(_:_:)(uint64_t a1, __int128 *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return sub_1CA0E53D0(a1, a2, a3, a4, a5, (uint64_t)sub_1CA0E6B78);
}

double sub_1CA0E53D0(uint64_t a1, __int128 *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v7;
  uint64_t v8;
  _QWORD v10[6];
  __int128 v11;

  v11 = *a2;
  v10[2] = a3;
  v10[3] = a4;
  v10[4] = a5;
  v10[5] = a3;
  v7 = type metadata accessor for SparseArray(0, a3, a4, a4);
  v8 = MEMORY[0x1CAA4BB30](&protocol conformance descriptor for SparseArray<A>, v7);
  return SparseArray.formUnion<A>(with:combine:)((uint64_t)&v11, a6, (uint64_t)v10, v7, v7, v8);
}

uint64_t sub_1CA0E5450@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  return static SparseArray<>.zero.getter(*(_QWORD *)(a1 + 16), a2);
}

uint64_t sub_1CA0E5458(_OWORD *a1, _OWORD *a2, uint64_t a3, uint64_t a4)
{
  return static SparseArray<>.+ infix(_:_:)(a1, a2, *(_QWORD *)(a3 + 16), *(_QWORD *)(a3 + 24), *(_QWORD *)(a4 - 8));
}

double sub_1CA0E5468(uint64_t a1, __int128 *a2, uint64_t a3, uint64_t a4)
{
  return static SparseArray<>.+= infix(_:_:)(a1, a2, *(_QWORD *)(a3 + 16), *(_QWORD *)(a3 + 24), *(_QWORD *)(a4 - 8));
}

uint64_t sub_1CA0E5478(_OWORD *a1, _OWORD *a2, uint64_t a3, uint64_t a4)
{
  return static SparseArray<>.- infix(_:_:)(a1, a2, *(_QWORD *)(a3 + 16), *(_QWORD *)(a3 + 24), *(_QWORD *)(a4 - 8));
}

double sub_1CA0E5488(uint64_t a1, __int128 *a2, uint64_t a3, uint64_t a4)
{
  return static SparseArray<>.-= infix(_:_:)(a1, a2, *(_QWORD *)(a3 + 16), *(_QWORD *)(a3 + 24), *(_QWORD *)(a4 - 8));
}

uint64_t SparseArray<>.hash(into:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t result;
  uint64_t v3;
  uint64_t v4;

  v1 = *(_QWORD *)(v0 + 8);
  sub_1CA1F0BEC();
  result = sub_1CA1F13FC();
  v3 = *(_QWORD *)(v1 + 16);
  if (v3)
  {
    v4 = v1 + 32;
    do
    {
      v4 += 8;
      result = sub_1CA1F142C();
      --v3;
    }
    while (v3);
  }
  return result;
}

uint64_t SparseArray<>.hashValue.getter()
{
  sub_1CA1F13F0();
  SparseArray<>.hash(into:)();
  return sub_1CA1F1438();
}

uint64_t sub_1CA0E5558()
{
  return SparseArray<>.hashValue.getter();
}

uint64_t sub_1CA0E5560()
{
  return SparseArray<>.hash(into:)();
}

uint64_t sub_1CA0E5568()
{
  sub_1CA1F13F0();
  SparseArray<>.hash(into:)();
  return sub_1CA1F1438();
}

uint64_t SparseArray.description.getter(uint64_t a1)
{
  uint64_t *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v15;
  uint64_t v16;
  __int128 v17;
  uint64_t v18;
  __int128 v19;
  __int128 v20;
  uint64_t v21;
  __int128 v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;

  v4 = *v1;
  v3 = v1[1];
  v24 = 91;
  v25 = 0xE100000000000000;
  v21 = v4;
  *(_QWORD *)&v22 = v3;
  v5 = MEMORY[0x1CAA4BB30](&protocol conformance descriptor for SparseArray<A>, a1);
  SparseValues.init(_:)((uint64_t)&v21, a1, (uint64_t)&v16);
  v21 = v16;
  *(_QWORD *)&v22 = v17;
  v7 = type metadata accessor for SparseValues(0, a1, v5, v6);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  MEMORY[0x1CAA4BB30](&protocol conformance descriptor for SparseValues<A>, v7);
  sub_1CA1F0A84();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v19 = v20;
  v8 = swift_allocObject();
  v9 = *(_QWORD *)(a1 + 16);
  v10 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)(v8 + 16) = v9;
  *(_QWORD *)(v8 + 24) = v10;
  v11 = (_QWORD *)swift_allocObject();
  v11[2] = v9;
  v11[3] = v10;
  v11[4] = sub_1CA0E6BBC;
  v11[5] = v8;
  v12 = sub_1CA1F106C();
  MEMORY[0x1CAA4BB30](MEMORY[0x1E0DEC330], v12);
  sub_1CA1F127C();
  swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v16 = v21;
  v17 = v22;
  v18 = v23;
  v13 = sub_1CA1F1168();
  v15 = MEMORY[0x1CAA4BB30](&protocol conformance descriptor for SparseValues<A>, v7);
  MEMORY[0x1CAA4BB30](MEMORY[0x1E0DEC850], v13, &v15);
  sub_1CA1F0970();
  swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_1CA1F0A3C();
  swift_bridgeObjectRelease();
  sub_1CA1F0A3C();
  return v24;
}

uint64_t sub_1CA0E5804()
{
  sub_1CA1F12AC();
  sub_1CA1F0A3C();
  swift_bridgeObjectRelease();
  sub_1CA1F0A3C();
  sub_1CA1F12B8();
  return 0;
}

_QWORD *sub_1CA0E5894(_QWORD *result, int64_t a2, char a3, _QWORD *a4)
{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  int64_t v11;
  uint64_t v12;
  _QWORD *v13;

  v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    v7 = a2;
    goto LABEL_8;
  }
  v6 = a4[3];
  v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2)
    goto LABEL_8;
  if (v7 + 0x4000000000000000 >= 0)
  {
    v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
      v7 = a2;
LABEL_8:
    v8 = a4[2];
    if (v7 <= v8)
      v9 = a4[2];
    else
      v9 = v7;
    if (v9)
    {
      __swift_instantiateConcreteTypeFromMangledName(qword_1ED852848);
      v10 = (_QWORD *)swift_allocObject();
      v11 = _swift_stdlib_malloc_size(v10);
      v12 = v11 - 32;
      if (v11 < 32)
        v12 = v11 - 25;
      v10[2] = v8;
      v10[3] = 2 * (v12 >> 3);
      v13 = v10 + 4;
      if ((v5 & 1) != 0)
        goto LABEL_15;
    }
    else
    {
      v10 = (_QWORD *)MEMORY[0x1E0DEE9D8];
      v13 = (_QWORD *)(MEMORY[0x1E0DEE9D8] + 32);
      if ((result & 1) != 0)
      {
LABEL_15:
        if (v10 != a4 || v13 >= &a4[v8 + 4])
          memmove(v13, a4 + 4, 8 * v8);
        a4[2] = 0;
        goto LABEL_24;
      }
    }
    sub_1CA0E7254(0, v8, (char *)v13, (uint64_t)a4);
LABEL_24:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

_QWORD *sub_1CA0E59A0(_QWORD *a1, int64_t a2, char a3, _QWORD *a4)
{
  return sub_1CA0E5AC4(a1, a2, a3, a4, &qword_1EF938428);
}

char *sub_1CA0E59AC(char *result, int64_t a2, char a3, char *a4)
{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  int64_t v11;
  uint64_t v12;
  char *v13;

  v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    v7 = a2;
    goto LABEL_8;
  }
  v6 = *((_QWORD *)a4 + 3);
  v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2)
    goto LABEL_8;
  if (v7 + 0x4000000000000000 >= 0)
  {
    v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
      v7 = a2;
LABEL_8:
    v8 = *((_QWORD *)a4 + 2);
    if (v7 <= v8)
      v9 = *((_QWORD *)a4 + 2);
    else
      v9 = v7;
    if (v9)
    {
      __swift_instantiateConcreteTypeFromMangledName(&qword_1ED8527F0);
      v10 = (char *)swift_allocObject();
      v11 = _swift_stdlib_malloc_size(v10);
      v12 = v11 - 32;
      if (v11 < 32)
        v12 = v11 - 29;
      *((_QWORD *)v10 + 2) = v8;
      *((_QWORD *)v10 + 3) = 2 * (v12 >> 2);
      v13 = v10 + 32;
      if ((v5 & 1) != 0)
        goto LABEL_15;
    }
    else
    {
      v10 = (char *)MEMORY[0x1E0DEE9D8];
      v13 = (char *)(MEMORY[0x1E0DEE9D8] + 32);
      if ((result & 1) != 0)
      {
LABEL_15:
        if (v10 != a4 || v13 >= &a4[4 * v8 + 32])
          memmove(v13, a4 + 32, 4 * v8);
        *((_QWORD *)a4 + 2) = 0;
        goto LABEL_24;
      }
    }
    sub_1CA0E6D5C(0, v8, v13, (uint64_t)a4);
LABEL_24:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

_QWORD *sub_1CA0E5AB8(_QWORD *a1, int64_t a2, char a3, _QWORD *a4)
{
  return sub_1CA0E5AC4(a1, a2, a3, a4, &qword_1ED8528F0);
}

_QWORD *sub_1CA0E5AC4(_QWORD *result, int64_t a2, char a3, _QWORD *a4, uint64_t *a5)
{
  char v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  int64_t v12;
  uint64_t v13;
  _QWORD *v14;

  v6 = (char)result;
  if ((a3 & 1) == 0)
  {
    v8 = a2;
    goto LABEL_8;
  }
  v7 = a4[3];
  v8 = v7 >> 1;
  if ((uint64_t)(v7 >> 1) >= a2)
    goto LABEL_8;
  if (v8 + 0x4000000000000000 >= 0)
  {
    v8 = v7 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v7 & 0xFFFFFFFFFFFFFFFELL) <= a2)
      v8 = a2;
LABEL_8:
    v9 = a4[2];
    if (v8 <= v9)
      v10 = a4[2];
    else
      v10 = v8;
    if (v10)
    {
      __swift_instantiateConcreteTypeFromMangledName(a5);
      v11 = (_QWORD *)swift_allocObject();
      v12 = _swift_stdlib_malloc_size(v11);
      v13 = v12 - 32;
      if (v12 < 32)
        v13 = v12 - 25;
      v11[2] = v9;
      v11[3] = 2 * (v13 >> 3);
      v14 = v11 + 4;
      if ((v6 & 1) != 0)
        goto LABEL_15;
    }
    else
    {
      v11 = (_QWORD *)MEMORY[0x1E0DEE9D8];
      v14 = (_QWORD *)(MEMORY[0x1E0DEE9D8] + 32);
      if ((result & 1) != 0)
      {
LABEL_15:
        if (v11 != a4 || v14 >= &a4[v9 + 4])
          memmove(v14, a4 + 4, 8 * v9);
        a4[2] = 0;
        goto LABEL_24;
      }
    }
    sub_1CA0E7254(0, v9, (char *)v14, (uint64_t)a4);
LABEL_24:
    swift_bridgeObjectRelease();
    return v11;
  }
  __break(1u);
  return result;
}

_QWORD *sub_1CA0E5BCC(_QWORD *result, int64_t a2, char a3, _QWORD *a4)
{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  int64_t v11;
  uint64_t v12;
  _QWORD *v13;

  v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    v7 = a2;
    goto LABEL_8;
  }
  v6 = a4[3];
  v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2)
    goto LABEL_8;
  if (v7 + 0x4000000000000000 >= 0)
  {
    v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
      v7 = a2;
LABEL_8:
    v8 = a4[2];
    if (v7 <= v8)
      v9 = a4[2];
    else
      v9 = v7;
    if (v9)
    {
      __swift_instantiateConcreteTypeFromMangledName(&qword_1EF937AD8);
      v10 = (_QWORD *)swift_allocObject();
      v11 = _swift_stdlib_malloc_size(v10);
      v12 = v11 - 32;
      if (v11 < 32)
        v12 = v11 - 17;
      v10[2] = v8;
      v10[3] = 2 * (v12 >> 4);
      v13 = v10 + 4;
      if ((v5 & 1) != 0)
        goto LABEL_15;
    }
    else
    {
      v10 = (_QWORD *)MEMORY[0x1E0DEE9D8];
      v13 = (_QWORD *)(MEMORY[0x1E0DEE9D8] + 32);
      if ((result & 1) != 0)
      {
LABEL_15:
        if (v10 != a4 || v13 >= &a4[2 * v8 + 4])
          memmove(v13, a4 + 4, 16 * v8);
        a4[2] = 0;
        goto LABEL_24;
      }
    }
    sub_1CA0E6E44(0, v8, (unint64_t)v13, (uint64_t)a4);
LABEL_24:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

_QWORD *sub_1CA0E5CD8(_QWORD *result, int64_t a2, char a3, _QWORD *a4)
{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  size_t v11;
  _QWORD *v12;

  v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    v7 = a2;
    goto LABEL_8;
  }
  v6 = a4[3];
  v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2)
    goto LABEL_8;
  if (v7 + 0x4000000000000000 >= 0)
  {
    v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
      v7 = a2;
LABEL_8:
    v8 = a4[2];
    if (v7 <= v8)
      v9 = a4[2];
    else
      v9 = v7;
    if (v9)
    {
      __swift_instantiateConcreteTypeFromMangledName(&qword_1EF9383E0);
      v10 = (_QWORD *)swift_allocObject();
      v11 = _swift_stdlib_malloc_size(v10);
      v10[2] = v8;
      v10[3] = 2 * ((uint64_t)(v11 - 32) / 40);
      v12 = v10 + 4;
      if ((v5 & 1) != 0)
      {
LABEL_13:
        if (v10 != a4 || v12 >= &a4[5 * v8 + 4])
          memmove(v12, a4 + 4, 40 * v8);
        a4[2] = 0;
        goto LABEL_22;
      }
    }
    else
    {
      v10 = (_QWORD *)MEMORY[0x1E0DEE9D8];
      v12 = (_QWORD *)(MEMORY[0x1E0DEE9D8] + 32);
      if ((result & 1) != 0)
        goto LABEL_13;
    }
    sub_1CA0E6F4C(0, v8, (unint64_t)v12, (uint64_t)a4);
LABEL_22:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

_QWORD *sub_1CA0E5DF8(_QWORD *result, int64_t a2, char a3, _QWORD *a4)
{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  int64_t v11;
  uint64_t v12;
  _QWORD *v13;

  v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    v7 = a2;
    goto LABEL_8;
  }
  v6 = a4[3];
  v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2)
    goto LABEL_8;
  if (v7 + 0x4000000000000000 >= 0)
  {
    v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
      v7 = a2;
LABEL_8:
    v8 = a4[2];
    if (v7 <= v8)
      v9 = a4[2];
    else
      v9 = v7;
    if (v9)
    {
      __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_1EF937190);
      v10 = (_QWORD *)swift_allocObject();
      v11 = _swift_stdlib_malloc_size(v10);
      v12 = v11 - 32;
      if (v11 < 32)
        v12 = v11 - 17;
      v10[2] = v8;
      v10[3] = 2 * (v12 >> 4);
      v13 = v10 + 4;
      if ((v5 & 1) != 0)
        goto LABEL_15;
    }
    else
    {
      v10 = (_QWORD *)MEMORY[0x1E0DEE9D8];
      v13 = (_QWORD *)(MEMORY[0x1E0DEE9D8] + 32);
      if ((result & 1) != 0)
      {
LABEL_15:
        if (v10 != a4 || v13 >= &a4[2 * v8 + 4])
          memmove(v13, a4 + 4, 16 * v8);
        a4[2] = 0;
        goto LABEL_24;
      }
    }
    sub_1CA0E7058(0, v8, (unint64_t)v13, (uint64_t)a4);
LABEL_24:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

_QWORD *sub_1CA0E5F04(_QWORD *result, int64_t a2, char a3, _QWORD *a4)
{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  size_t v11;
  _QWORD *v12;

  v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    v7 = a2;
    goto LABEL_8;
  }
  v6 = a4[3];
  v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2)
    goto LABEL_8;
  if (v7 + 0x4000000000000000 >= 0)
  {
    v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
      v7 = a2;
LABEL_8:
    v8 = a4[2];
    if (v7 <= v8)
      v9 = a4[2];
    else
      v9 = v7;
    if (v9)
    {
      __swift_instantiateConcreteTypeFromMangledName(&qword_1EF9383E8);
      v10 = (_QWORD *)swift_allocObject();
      v11 = _swift_stdlib_malloc_size(v10);
      v10[2] = v8;
      v10[3] = 2 * ((uint64_t)(v11 - 32) / 40);
      v12 = v10 + 4;
      if ((v5 & 1) != 0)
      {
LABEL_13:
        if (v10 != a4 || v12 >= &a4[5 * v8 + 4])
          memmove(v12, a4 + 4, 40 * v8);
        a4[2] = 0;
        goto LABEL_22;
      }
    }
    else
    {
      v10 = (_QWORD *)MEMORY[0x1E0DEE9D8];
      v12 = (_QWORD *)(MEMORY[0x1E0DEE9D8] + 32);
      if ((result & 1) != 0)
        goto LABEL_13;
    }
    sub_1CA0E7148(0, v8, (unint64_t)v12, (uint64_t)a4);
LABEL_22:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

_QWORD *sub_1CA0E6024(_QWORD *result, int64_t a2, char a3, _QWORD *a4)
{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  int64_t v11;
  uint64_t v12;
  _QWORD *v13;

  v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    v7 = a2;
    goto LABEL_8;
  }
  v6 = a4[3];
  v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2)
    goto LABEL_8;
  if (v7 + 0x4000000000000000 >= 0)
  {
    v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
      v7 = a2;
LABEL_8:
    v8 = a4[2];
    if (v7 <= v8)
      v9 = a4[2];
    else
      v9 = v7;
    if (v9)
    {
      __swift_instantiateConcreteTypeFromMangledName(&qword_1EF938410);
      v10 = (_QWORD *)swift_allocObject();
      v11 = _swift_stdlib_malloc_size(v10);
      v12 = v11 - 32;
      if (v11 < 32)
        v12 = v11 - 1;
      v10[2] = v8;
      v10[3] = 2 * (v12 >> 5);
      v13 = v10 + 4;
      if ((v5 & 1) != 0)
        goto LABEL_15;
    }
    else
    {
      v10 = (_QWORD *)MEMORY[0x1E0DEE9D8];
      v13 = (_QWORD *)(MEMORY[0x1E0DEE9D8] + 32);
      if ((result & 1) != 0)
      {
LABEL_15:
        if (v10 != a4 || v13 >= &a4[4 * v8 + 4])
          memmove(v13, a4 + 4, 32 * v8);
        a4[2] = 0;
        goto LABEL_24;
      }
    }
    sub_1CA0E733C(0, v8, (unint64_t)v13, (uint64_t)a4);
LABEL_24:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

_QWORD *sub_1CA0E6130(_QWORD *a1, int64_t a2, char a3, _QWORD *a4)
{
  return sub_1CA0E6264(a1, a2, a3, a4, &qword_1EF938418, &qword_1EF938420);
}

_QWORD *sub_1CA0E6144(_QWORD *result, int64_t a2, char a3, _QWORD *a4)
{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  int64_t v11;
  uint64_t v12;
  _QWORD *v13;

  v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    v7 = a2;
    goto LABEL_8;
  }
  v6 = a4[3];
  v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2)
    goto LABEL_8;
  if (v7 + 0x4000000000000000 >= 0)
  {
    v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
      v7 = a2;
LABEL_8:
    v8 = a4[2];
    if (v7 <= v8)
      v9 = a4[2];
    else
      v9 = v7;
    if (v9)
    {
      __swift_instantiateConcreteTypeFromMangledName(&qword_1EF938400);
      v10 = (_QWORD *)swift_allocObject();
      v11 = _swift_stdlib_malloc_size(v10);
      v12 = v11 - 32;
      if (v11 < 32)
        v12 = v11 - 17;
      v10[2] = v8;
      v10[3] = 2 * (v12 >> 4);
      v13 = v10 + 4;
      if ((v5 & 1) != 0)
        goto LABEL_15;
    }
    else
    {
      v10 = (_QWORD *)MEMORY[0x1E0DEE9D8];
      v13 = (_QWORD *)(MEMORY[0x1E0DEE9D8] + 32);
      if ((result & 1) != 0)
      {
LABEL_15:
        if (v10 != a4 || v13 >= &a4[2 * v8 + 4])
          memmove(v13, a4 + 4, 16 * v8);
        a4[2] = 0;
        goto LABEL_24;
      }
    }
    sub_1CA0E742C(0, v8, (unint64_t)v13, (uint64_t)a4);
LABEL_24:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

_QWORD *sub_1CA0E6250(_QWORD *a1, int64_t a2, char a3, _QWORD *a4)
{
  return sub_1CA0E6264(a1, a2, a3, a4, &qword_1EF9383F0, &qword_1EF938308);
}

_QWORD *sub_1CA0E6264(_QWORD *result, int64_t a2, char a3, _QWORD *a4, uint64_t *a5, uint64_t *a6)
{
  char v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  int64_t v14;
  uint64_t v15;
  _QWORD *v16;

  v8 = (char)result;
  if ((a3 & 1) == 0)
  {
    v10 = a2;
    goto LABEL_8;
  }
  v9 = a4[3];
  v10 = v9 >> 1;
  if ((uint64_t)(v9 >> 1) >= a2)
    goto LABEL_8;
  if (v10 + 0x4000000000000000 >= 0)
  {
    v10 = v9 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v9 & 0xFFFFFFFFFFFFFFFELL) <= a2)
      v10 = a2;
LABEL_8:
    v11 = a4[2];
    if (v10 <= v11)
      v12 = a4[2];
    else
      v12 = v10;
    if (v12)
    {
      __swift_instantiateConcreteTypeFromMangledName(a5);
      v13 = (_QWORD *)swift_allocObject();
      v14 = _swift_stdlib_malloc_size(v13);
      v15 = v14 - 32;
      if (v14 < 32)
        v15 = v14 - 25;
      v13[2] = v11;
      v13[3] = 2 * (v15 >> 3);
      v16 = v13 + 4;
      if ((v8 & 1) != 0)
        goto LABEL_15;
    }
    else
    {
      v13 = (_QWORD *)MEMORY[0x1E0DEE9D8];
      v16 = (_QWORD *)(MEMORY[0x1E0DEE9D8] + 32);
      if ((result & 1) != 0)
      {
LABEL_15:
        if (v13 != a4 || v16 >= &a4[v11 + 4])
          memmove(v16, a4 + 4, 8 * v11);
        a4[2] = 0;
        goto LABEL_24;
      }
    }
    sub_1CA0E751C(0, v11, (unint64_t)v16, (uint64_t)a4, a6);
LABEL_24:
    swift_bridgeObjectRelease();
    return v13;
  }
  __break(1u);
  return result;
}

_QWORD *sub_1CA0E637C(_QWORD *a1, int64_t a2, char a3, _QWORD *a4)
{
  return sub_1CA0E6264(a1, a2, a3, a4, &qword_1EF9383F8, &qword_1EF937158);
}

char *sub_1CA0E6390(char *result, int64_t a2, char a3, char *a4)
{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  int64_t v11;
  uint64_t v12;
  char *v13;

  v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    v7 = a2;
    goto LABEL_8;
  }
  v6 = *((_QWORD *)a4 + 3);
  v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2)
    goto LABEL_8;
  if (v7 + 0x4000000000000000 >= 0)
  {
    v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
      v7 = a2;
LABEL_8:
    v8 = *((_QWORD *)a4 + 2);
    if (v7 <= v8)
      v9 = *((_QWORD *)a4 + 2);
    else
      v9 = v7;
    if (v9)
    {
      __swift_instantiateConcreteTypeFromMangledName(&qword_1EF938408);
      v10 = (char *)swift_allocObject();
      v11 = _swift_stdlib_malloc_size(v10);
      v12 = v11 - 32;
      if (v11 < 32)
        v12 = v11 - 29;
      *((_QWORD *)v10 + 2) = v8;
      *((_QWORD *)v10 + 3) = 2 * (v12 >> 2);
      v13 = v10 + 32;
      if ((v5 & 1) != 0)
        goto LABEL_15;
    }
    else
    {
      v10 = (char *)MEMORY[0x1E0DEE9D8];
      v13 = (char *)(MEMORY[0x1E0DEE9D8] + 32);
      if ((result & 1) != 0)
      {
LABEL_15:
        if (v10 != a4 || v13 >= &a4[4 * v8 + 32])
          memmove(v13, a4 + 32, 4 * v8);
        *((_QWORD *)a4 + 2) = 0;
        goto LABEL_24;
      }
    }
    sub_1CA0E6D5C(0, v8, v13, (uint64_t)a4);
LABEL_24:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

uint64_t sub_1CA0E649C(unint64_t a1, uint64_t a2)
{
  uint64_t result;
  uint64_t v5;

  result = _swift_isClassOrObjCExistentialType();
  if ((a1 & 0x8000000000000000) != 0)
  {
    __break(1u);
LABEL_7:
    __break(1u);
    return result;
  }
  v5 = a2 & 0xFFFFFFFFFFFFF8;
  if ((result & 1) == 0)
    v5 = a2;
  if (*(_QWORD *)(v5 + 16) <= a1)
    goto LABEL_7;
  return result;
}

_QWORD *sub_1CA0E64EC(uint64_t a1, int64_t a2, uint64_t a3)
{
  uint64_t v3;
  _QWORD *v5;
  int64_t v6;
  uint64_t v8;
  uint64_t v9;
  int64_t v10;
  _QWORD *result;
  int64_t v13;
  _QWORD *v14;
  uint64_t v15;
  BOOL v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t v20;

  if (a1 < 0)
  {
    __break(1u);
    goto LABEL_22;
  }
  v5 = *(_QWORD **)v3;
  v6 = *(_QWORD *)(*(_QWORD *)v3 + 16);
  if (v6 < a2)
  {
LABEL_22:
    __break(1u);
    goto LABEL_23;
  }
  v8 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
LABEL_23:
    __break(1u);
    goto LABEL_24;
  }
  v9 = 1 - v8;
  if (__OFSUB__(1, v8))
  {
LABEL_24:
    __break(1u);
    goto LABEL_25;
  }
  v10 = v6 + v9;
  if (__OFADD__(v6, v9))
  {
LABEL_25:
    __break(1u);
LABEL_26:
    __break(1u);
LABEL_27:
    __break(1u);
    goto LABEL_28;
  }
  result = (_QWORD *)swift_isUniquelyReferenced_nonNull_native();
  if (!(_DWORD)result || v10 > v5[3] >> 1)
  {
    if (v6 <= v10)
      v13 = v6 + v9;
    else
      v13 = v6;
    result = sub_1CA0E5AC4(result, v13, 1, v5, &qword_1EF938428);
    v5 = result;
  }
  v14 = &v5[a1 + 4];
  if (!v9)
    goto LABEL_20;
  v15 = v5[2];
  v16 = __OFSUB__(v15, a2);
  v17 = v15 - a2;
  if (v16)
    goto LABEL_26;
  if ((v17 & 0x8000000000000000) == 0)
  {
    result = v14 + 1;
    v18 = &v5[a2 + 4];
    if (v14 + 1 != v18 || result >= &v18[v17])
      result = memmove(result, v18, 8 * v17);
    v19 = v5[2];
    v16 = __OFADD__(v19, v9);
    v20 = v19 + v9;
    if (!v16)
    {
      v5[2] = v20;
LABEL_20:
      *v14 = a3;
      *(_QWORD *)v3 = v5;
      return result;
    }
    goto LABEL_27;
  }
LABEL_28:
  result = (_QWORD *)sub_1CA1F1270();
  __break(1u);
  return result;
}

char *sub_1CA0E6654(uint64_t a1, int64_t a2, float a3)
{
  char **v3;
  char *v5;
  int64_t v6;
  uint64_t v8;
  uint64_t v9;
  int64_t v10;
  char *result;
  int64_t v13;
  float *v14;
  uint64_t v15;
  BOOL v16;
  uint64_t v17;
  float *v18;
  uint64_t v19;
  uint64_t v20;

  if (a1 < 0)
  {
    __break(1u);
    goto LABEL_22;
  }
  v5 = *v3;
  v6 = *((_QWORD *)*v3 + 2);
  if (v6 < a2)
  {
LABEL_22:
    __break(1u);
    goto LABEL_23;
  }
  v8 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
LABEL_23:
    __break(1u);
    goto LABEL_24;
  }
  v9 = 1 - v8;
  if (__OFSUB__(1, v8))
  {
LABEL_24:
    __break(1u);
    goto LABEL_25;
  }
  v10 = v6 + v9;
  if (__OFADD__(v6, v9))
  {
LABEL_25:
    __break(1u);
LABEL_26:
    __break(1u);
LABEL_27:
    __break(1u);
    goto LABEL_28;
  }
  result = (char *)swift_isUniquelyReferenced_nonNull_native();
  if (!(_DWORD)result || v10 > *((_QWORD *)v5 + 3) >> 1)
  {
    if (v6 <= v10)
      v13 = v6 + v9;
    else
      v13 = v6;
    result = sub_1CA0E59AC(result, v13, 1, v5);
    v5 = result;
  }
  v14 = (float *)&v5[4 * a1 + 32];
  if (!v9)
    goto LABEL_20;
  v15 = *((_QWORD *)v5 + 2);
  v16 = __OFSUB__(v15, a2);
  v17 = v15 - a2;
  if (v16)
    goto LABEL_26;
  if ((v17 & 0x8000000000000000) == 0)
  {
    result = (char *)(v14 + 1);
    v18 = (float *)&v5[4 * a2 + 32];
    if (v14 + 1 != v18 || result >= (char *)&v18[v17])
      result = (char *)memmove(result, v18, 4 * v17);
    v19 = *((_QWORD *)v5 + 2);
    v16 = __OFADD__(v19, v9);
    v20 = v19 + v9;
    if (!v16)
    {
      *((_QWORD *)v5 + 2) = v20;
LABEL_20:
      *v14 = a3;
      *v3 = v5;
      return result;
    }
    goto LABEL_27;
  }
LABEL_28:
  result = (char *)sub_1CA1F1270();
  __break(1u);
  return result;
}

double *sub_1CA0E67BC(uint64_t a1, int64_t a2, double a3)
{
  double **v3;
  double *v5;
  int64_t v6;
  uint64_t v8;
  uint64_t v9;
  int64_t v10;
  double *result;
  int64_t v13;
  double *v14;
  uint64_t v15;
  BOOL v16;
  uint64_t v17;
  double *v18;
  uint64_t v19;
  uint64_t v20;

  if (a1 < 0)
  {
    __break(1u);
    goto LABEL_22;
  }
  v5 = *v3;
  v6 = *((_QWORD *)*v3 + 2);
  if (v6 < a2)
  {
LABEL_22:
    __break(1u);
    goto LABEL_23;
  }
  v8 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
LABEL_23:
    __break(1u);
    goto LABEL_24;
  }
  v9 = 1 - v8;
  if (__OFSUB__(1, v8))
  {
LABEL_24:
    __break(1u);
    goto LABEL_25;
  }
  v10 = v6 + v9;
  if (__OFADD__(v6, v9))
  {
LABEL_25:
    __break(1u);
LABEL_26:
    __break(1u);
LABEL_27:
    __break(1u);
    goto LABEL_28;
  }
  result = (double *)swift_isUniquelyReferenced_nonNull_native();
  if (!(_DWORD)result || v10 > *((_QWORD *)v5 + 3) >> 1)
  {
    if (v6 <= v10)
      v13 = v6 + v9;
    else
      v13 = v6;
    result = (double *)sub_1CA0E5894(result, v13, 1, v5);
    v5 = result;
  }
  v14 = &v5[a1 + 4];
  if (!v9)
    goto LABEL_20;
  v15 = *((_QWORD *)v5 + 2);
  v16 = __OFSUB__(v15, a2);
  v17 = v15 - a2;
  if (v16)
    goto LABEL_26;
  if ((v17 & 0x8000000000000000) == 0)
  {
    result = v14 + 1;
    v18 = &v5[a2 + 4];
    if (v14 + 1 != v18 || result >= &v18[v17])
      result = (double *)memmove(result, v18, 8 * v17);
    v19 = *((_QWORD *)v5 + 2);
    v16 = __OFADD__(v19, v9);
    v20 = v19 + v9;
    if (!v16)
    {
      *((_QWORD *)v5 + 2) = v20;
LABEL_20:
      *v14 = a3;
      *v3 = v5;
      return result;
    }
    goto LABEL_27;
  }
LABEL_28:
  result = (double *)sub_1CA1F1270();
  __break(1u);
  return result;
}

uint64_t sub_1CA0E6924()
{
  uint64_t v0;

  return *(_QWORD *)v0;
}

uint64_t sub_1CA0E692C()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + 8);
}

uint64_t sub_1CA0E6934(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v12;

  v6 = sub_1CA1F0EB0();
  v7 = *(_QWORD *)(v6 - 8);
  MEMORY[0x1E0C80A78](v6, v8);
  v10 = (char *)&v12 - v9;
  SparseArray.set(_:atOffset:)(a1, a2, a3, (uint64_t)&v12 - v9);
  return (*(uint64_t (**)(char *, uint64_t))(v7 + 8))(v10, v6);
}

uint64_t sub_1CA0E69D0@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;

  return sub_1CA0E4DD8(a1, *(_QWORD *)(v2 + 32), *(_QWORD *)(v2 + 16), a2);
}

unint64_t sub_1CA0E69F0()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1EF938310;
  if (!qword_1EF938310)
  {
    v1 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_1EF938308);
    result = MEMORY[0x1CAA4BB30](MEMORY[0x1E0DEAF50], v1);
    atomic_store(result, (unint64_t *)&qword_1EF938310);
  }
  return result;
}

uint64_t sub_1CA0E6A3C()
{
  return sub_1CA1F0B5C();
}

uint64_t sub_1CA0E6A90@<X0>(uint64_t a1@<X8>)
{
  uint64_t *v1;

  return sub_1CA0E4548(v1[4], v1[2], v1[3], a1);
}

uint64_t sub_1CA0E6AAC@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  return sub_1CA0E6AC0(a1, a2);
}

uint64_t sub_1CA0E6AC0@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;

  return sub_1CA0FF808(*(_QWORD *)(v2 + 16), *a1, a1[1], a1[2], a2);
}

uint64_t type metadata accessor for SparseArray(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for SparseArray);
}

unint64_t sub_1CA0E6B00()
{
  unint64_t result;
  uint64_t v1;
  unint64_t v2;
  _QWORD v3[2];

  result = qword_1EF938328;
  if (!qword_1EF938328)
  {
    v1 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_1EF938320);
    v2 = sub_1CA0AB20C();
    v3[0] = MEMORY[0x1E0DEDC98];
    v3[1] = v2;
    result = MEMORY[0x1CAA4BB30](MEMORY[0x1E0DEC920], v1, v3);
    atomic_store(result, (unint64_t *)&qword_1EF938328);
  }
  return result;
}

uint64_t sub_1CA0E6B6C(uint64_t a1, uint64_t a2)
{
  return sub_1CA0E6B84(a1, a2, (uint64_t (*)(uint64_t, uint64_t, _QWORD, _QWORD))MEMORY[0x1E0DECC20]);
}

uint64_t sub_1CA0E6B78(uint64_t a1, uint64_t a2)
{
  return sub_1CA0E6B84(a1, a2, MEMORY[0x1E0DECC28]);
}

uint64_t sub_1CA0E6B84(uint64_t a1, uint64_t a2, uint64_t (*a3)(uint64_t, uint64_t, _QWORD, _QWORD))
{
  uint64_t v3;

  return a3(a1, a2, *(_QWORD *)(v3 + 16), *(_QWORD *)(v3 + 32));
}

uint64_t sub_1CA0E6BAC()
{
  return swift_deallocObject();
}

uint64_t sub_1CA0E6BBC()
{
  return sub_1CA0E5804();
}

uint64_t sub_1CA0E6BC4()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_1CA0E6BE8@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v2;
  uint64_t (*v5)(uint64_t, char *);
  uint64_t v6;
  uint64_t TupleTypeMetadata2;
  uint64_t result;
  uint64_t v9;

  v5 = *(uint64_t (**)(uint64_t, char *))(v2 + 32);
  v6 = *a1;
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  result = v5(v6, (char *)a1 + *(int *)(TupleTypeMetadata2 + 48));
  *a2 = result;
  a2[1] = v9;
  return result;
}

uint64_t sub_1CA0E6C50(uint64_t a1, uint64_t a2)
{
  return *(_QWORD *)(a2 + 24);
}

uint64_t sub_1CA0E6C58(uint64_t a1)
{
  uint64_t result;

  result = MEMORY[0x1CAA4BB30](&protocol conformance descriptor for SparseArray<A>);
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

void sub_1CA0E6C84()
{
  JUMPOUT(0x1CAA4BB30);
}

uint64_t sub_1CA0E6C98(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;

  v5 = *a3;
  v6 = type metadata accessor for SparseArray(0, *(uint64_t *)((char *)a3 + a4 - 16), *(uint64_t *)((char *)a3 + a4 - 8), a4);
  return sub_1CA0E6934(a1, v5, v6);
}

uint64_t sub_1CA0E6CE8()
{
  return 16;
}

__n128 sub_1CA0E6CF4(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = *a1;
  *a2 = *a1;
  return result;
}

_QWORD *sub_1CA0E6D00(_QWORD *a1, _QWORD *a2)
{
  *a1 = *a2;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

char *sub_1CA0E6D5C(uint64_t a1, uint64_t a2, char *__dst, uint64_t a4)
{
  uint64_t v4;
  char *v5;
  size_t v6;
  char *v7;
  char *result;

  v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    v5 = (char *)(a4 + 4 * a1 + 32);
    v6 = 4 * v4;
    v7 = &__dst[v6];
    if (v5 >= &__dst[v6] || &v5[v6] <= __dst)
    {
      memcpy(__dst, v5, v6);
      return v7;
    }
  }
  result = (char *)sub_1CA1F1270();
  __break(1u);
  return result;
}

uint64_t sub_1CA0E6E44(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t result;

  v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    v5 = a4 + 16 * a1 + 32;
    v6 = a3 + 16 * v4;
    if (v5 >= v6 || v5 + 16 * v4 <= a3)
    {
      __swift_instantiateConcreteTypeFromMangledName(&qword_1EF937148);
      swift_arrayInitWithCopy();
      return v6;
    }
  }
  result = sub_1CA1F1270();
  __break(1u);
  return result;
}

uint64_t sub_1CA0E6F4C(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t result;

  v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    v5 = a4 + 40 * a1 + 32;
    v6 = a3 + 40 * v4;
    if (v5 >= v6 || v5 + 40 * v4 <= a3)
    {
      __swift_instantiateConcreteTypeFromMangledName(&qword_1EF937140);
      swift_arrayInitWithCopy();
      return v6;
    }
  }
  result = sub_1CA1F1270();
  __break(1u);
  return result;
}

uint64_t sub_1CA0E7058(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t result;

  v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    v5 = a4 + 16 * a1 + 32;
    v6 = a3 + 16 * v4;
    if (v5 >= v6 || v5 + 16 * v4 <= a3)
    {
      swift_arrayInitWithCopy();
      return v6;
    }
  }
  result = sub_1CA1F1270();
  __break(1u);
  return result;
}

uint64_t sub_1CA0E7148(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t result;

  v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    v5 = a4 + 40 * a1 + 32;
    v6 = a3 + 40 * v4;
    if (v5 >= v6 || v5 + 40 * v4 <= a3)
    {
      __swift_instantiateConcreteTypeFromMangledName(&qword_1EF93A380);
      swift_arrayInitWithCopy();
      return v6;
    }
  }
  result = sub_1CA1F1270();
  __break(1u);
  return result;
}

char *sub_1CA0E7254(uint64_t a1, uint64_t a2, char *__dst, uint64_t a4)
{
  uint64_t v4;
  char *v5;
  size_t v6;
  char *v7;
  char *result;

  v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    v5 = (char *)(a4 + 8 * a1 + 32);
    v6 = 8 * v4;
    v7 = &__dst[v6];
    if (v5 >= &__dst[v6] || &v5[v6] <= __dst)
    {
      memcpy(__dst, v5, v6);
      return v7;
    }
  }
  result = (char *)sub_1CA1F1270();
  __break(1u);
  return result;
}

uint64_t sub_1CA0E733C(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t result;

  v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    v5 = a4 + 32 * a1 + 32;
    v6 = a3 + 32 * v4;
    if (v5 >= v6 || v5 + 32 * v4 <= a3)
    {
      swift_arrayInitWithCopy();
      return v6;
    }
  }
  result = sub_1CA1F1270();
  __break(1u);
  return result;
}

uint64_t sub_1CA0E742C(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t result;

  v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    v5 = a4 + 16 * a1 + 32;
    v6 = a3 + 16 * v4;
    if (v5 >= v6 || v5 + 16 * v4 <= a3)
    {
      swift_arrayInitWithCopy();
      return v6;
    }
  }
  result = sub_1CA1F1270();
  __break(1u);
  return result;
}

uint64_t sub_1CA0E751C(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4, uint64_t *a5)
{
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t result;

  v5 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v5 & 0x8000000000000000) == 0)
  {
    v6 = a4 + 8 * a1 + 32;
    v7 = a3 + 8 * v5;
    if (v6 >= v7 || v6 + 8 * v5 <= a3)
    {
      __swift_instantiateConcreteTypeFromMangledName(a5);
      swift_arrayInitWithCopy();
      return v7;
    }
  }
  result = sub_1CA1F1270();
  __break(1u);
  return result;
}

uint64_t sub_1CA0E7620(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  uint64_t (*v3)(_QWORD *);
  _QWORD v4[4];

  if (a2 < 0)
  {
    __break(1u);
  }
  else
  {
    v4[3] = a2;
    v3 = *(uint64_t (**)(_QWORD *))(v2 + 40);
    v4[0] = 0;
    v4[1] = a2;
    v4[2] = result;
    return v3(v4);
  }
  return result;
}

uint64_t sub_1CA0E7660(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  return sub_1CA0E41AC(a1, a2, *(_QWORD *)(v2 + 40), *(_QWORD *)(v2 + 48), *(_QWORD *)(v2 + 56), *(_QWORD *)(v2 + 64), *(uint64_t (**)(_QWORD *))(v2 + 72));
}

uint64_t (*sub_1CA0E7698(uint64_t a1, uint64_t a2, void (*a3)(uint64_t *__return_ptr, uint64_t)))()
{
  _QWORD *v3;
  char v4;
  _QWORD *v5;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v9;
  char v10;
  unint64_t v11;
  uint64_t v12;
  _BOOL8 v13;
  uint64_t v14;
  unint64_t v15;
  char v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  BOOL v21;
  uint64_t v22;
  uint64_t (*result)();
  uint64_t v24;

  v5 = v3;
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  v9 = *v3;
  v24 = v9;
  *v5 = 0x8000000000000000;
  v11 = sub_1CA0AA4D8(a2);
  v12 = *(_QWORD *)(v9 + 16);
  v13 = (v10 & 1) == 0;
  v14 = v12 + v13;
  if (__OFADD__(v12, v13))
  {
    __break(1u);
    goto LABEL_12;
  }
  v4 = v10;
  if (*(_QWORD *)(v9 + 24) >= v14)
  {
    if ((isUniquelyReferenced_nonNull_native & 1) != 0)
      goto LABEL_6;
LABEL_12:
    sub_1CA0EF024();
    v9 = v24;
    goto LABEL_6;
  }
  sub_1CA0EAC60(v14, isUniquelyReferenced_nonNull_native);
  v9 = v24;
  v15 = sub_1CA0AA4D8(a2);
  if ((v4 & 1) != (v16 & 1))
    goto LABEL_14;
  v11 = v15;
LABEL_6:
  *v5 = v9;
  swift_bridgeObjectRelease();
  v17 = (_QWORD *)*v5;
  if ((v4 & 1) != 0)
  {
    swift_bridgeObjectRetain();
LABEL_10:
    swift_bridgeObjectRelease();
    return nullsub_1;
  }
  v18 = swift_bridgeObjectRetain();
  a3(&v24, v18);
  v17[(v11 >> 6) + 8] |= 1 << v11;
  v19 = 8 * v11;
  *(_QWORD *)(v17[6] + v19) = a2;
  *(_QWORD *)(v17[7] + v19) = v24;
  v20 = v17[2];
  v21 = __OFADD__(v20, 1);
  v22 = v20 + 1;
  if (!v21)
  {
    v17[2] = v22;
    goto LABEL_10;
  }
  __break(1u);
LABEL_14:
  result = (uint64_t (*)())sub_1CA1F1360();
  __break(1u);
  return result;
}

KnowledgeGraphKit::ElementIdentifierTupleSet __swiftcall ElementIdentifierTupleSet.init()()
{
  KnowledgeGraphKit::ElementIdentifierTupleSet *v0;
  KnowledgeGraphKit::ElementIdentifierTupleSet *v1;
  KnowledgeGraphKit::ElementIdentifierTupleSet result;

  v1 = v0;
  result.targetsBySource._rawValue = (void *)sub_1CA0AECA8(MEMORY[0x1E0DEE9D8]);
  v1->targetsBySource._rawValue = result.targetsBySource._rawValue;
  return result;
}

void ElementIdentifierTupleSet.sources.getter(uint64_t *a1@<X8>)
{
  uint64_t v2;

  v2 = swift_bridgeObjectRetain();
  sub_1CA0ADC38(v2, a1);
}

uint64_t ElementIdentifierTupleSet.insert(_:)(uint64_t *a1, uint64_t *a2, uint64_t *a3, uint64_t *a4)
{
  uint64_t *v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  uint64_t v14;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v16;
  char v17;
  unint64_t v18;
  uint64_t v19;
  _BOOL8 v20;
  uint64_t v21;
  unint64_t v22;
  char v23;
  _QWORD *v24;
  id v25;
  id v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  BOOL v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  char v34;
  unint64_t v35;
  char v36;
  char v37;
  uint64_t v38;
  uint64_t result;
  uint64_t v40;
  uint64_t v41;
  _QWORD *v42;

  v6 = v4;
  v9 = *a3;
  v10 = *a4;
  v11 = *v4;
  if (*(_QWORD *)(v11 + 16) && (v12 = sub_1CA0AA4D8(*a3), (v13 & 1) != 0))
    v14 = objc_msgSend(*(id *)(*(_QWORD *)(*(_QWORD *)(v11 + 56) + 8 * v12) + 16), sel_containsIdentifier_, v10) ^ 1;
  else
    v14 = 1;
  v41 = v10;
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  v42 = (_QWORD *)*v6;
  v16 = (uint64_t)v42;
  *v6 = 0x8000000000000000;
  v18 = sub_1CA0AA4D8(v9);
  v19 = *(_QWORD *)(v16 + 16);
  v20 = (v17 & 1) == 0;
  v21 = v19 + v20;
  if (__OFADD__(v19, v20))
  {
    __break(1u);
    goto LABEL_22;
  }
  LOBYTE(v5) = v17;
  if (*(_QWORD *)(v16 + 24) < v21)
  {
    sub_1CA0EAC60(v21, isUniquelyReferenced_nonNull_native);
    v16 = (uint64_t)v42;
    v22 = sub_1CA0AA4D8(v9);
    if ((v5 & 1) == (v23 & 1))
    {
      v18 = v22;
      goto LABEL_10;
    }
    result = sub_1CA1F1360();
    __break(1u);
    return result;
  }
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
    goto LABEL_24;
  while (1)
  {
LABEL_10:
    *v6 = v16;
    swift_bridgeObjectRelease();
    v24 = (_QWORD *)*v6;
    if ((v5 & 1) != 0)
    {
      swift_bridgeObjectRetain();
    }
    else
    {
      v25 = objc_allocWithZone((Class)KGMutableElementIdentifierSet);
      swift_bridgeObjectRetain();
      v26 = objc_msgSend(v25, sel_init);
      __swift_instantiateConcreteTypeFromMangledName(&qword_1ED852AF0);
      v27 = swift_allocObject();
      *(_QWORD *)(v27 + 16) = v26;
      v24[(v18 >> 6) + 8] |= 1 << v18;
      v28 = 8 * v18;
      *(_QWORD *)(v24[6] + v28) = v9;
      *(_QWORD *)(v24[7] + v28) = v27;
      v29 = v24[2];
      v30 = __OFADD__(v29, 1);
      v31 = v29 + 1;
      if (v30)
      {
        __break(1u);
        goto LABEL_26;
      }
      v24[2] = v31;
    }
    v5 = v24[7];
    swift_bridgeObjectRelease();
    ElementIdentifierSet.insert(_:)((uint64_t *)&v42, &v41);
    v32 = *v6;
    if (!*(_QWORD *)(*v6 + 16))
    {
LABEL_22:
      __break(1u);
      goto LABEL_23;
    }
    v33 = sub_1CA0AA4D8(v9);
    if ((v34 & 1) != 0)
      break;
LABEL_23:
    __break(1u);
LABEL_24:
    sub_1CA0EF024();
    v16 = (uint64_t)v42;
  }
  if ((objc_msgSend(*(id *)(*(_QWORD *)(*(_QWORD *)(v32 + 56) + 8 * v33) + 16), sel_isEmpty) & 1) != 0)
  {
    v35 = sub_1CA0AA4D8(v9);
    if ((v36 & 1) != 0)
    {
      v18 = v35;
      v37 = swift_isUniquelyReferenced_nonNull_native();
      v38 = *v6;
      v40 = *v6;
      *v6 = 0x8000000000000000;
      if ((v37 & 1) != 0)
      {
LABEL_19:
        sub_1CA0F18F4(v18, v38);
        *v6 = v38;
        swift_release();
        swift_bridgeObjectRelease();
        goto LABEL_20;
      }
LABEL_26:
      sub_1CA0EF024();
      v38 = v40;
      goto LABEL_19;
    }
  }
LABEL_20:
  *a1 = v9;
  *a2 = v10;
  return v14;
}

void static ElementIdentifierTupleSet.joinOnTargets(_:_:)(uint64_t *a1@<X0>, uint64_t *a2@<X1>, unint64_t *a3@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  int64_t v9;
  unint64_t v10;
  int64_t v11;
  unint64_t v12;
  int64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  id v17;
  id v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  int64_t v22;
  int64_t v23;
  unint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  void *v28;
  uint64_t v29;
  int64_t v30;
  unint64_t v31;
  int64_t v32;
  uint64_t v33;
  uint64_t v34;
  id v35;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v38;
  int64_t v39;
  unint64_t v40;
  uint64_t v41;
  id v42;
  uint64_t v43;
  uint64_t v44;
  int64_t v45;
  uint64_t v46;
  uint64_t v47;

  v3 = *a1;
  v4 = *a2;
  v40 = sub_1CA0AECA8(MEMORY[0x1E0DEE9D8]);
  v41 = v3;
  v38 = v3 + 64;
  v5 = 1 << *(_BYTE *)(v3 + 32);
  if (v5 < 64)
    v6 = ~(-1 << v5);
  else
    v6 = -1;
  v7 = v6 & *(_QWORD *)(v3 + 64);
  v39 = (unint64_t)(v5 + 63) >> 6;
  v8 = v4 + 64;
  swift_bridgeObjectRetain();
  v9 = 0;
  while (1)
  {
    if (v7)
    {
      v44 = (v7 - 1) & v7;
      v45 = v9;
      v10 = __clz(__rbit64(v7)) | (v9 << 6);
      goto LABEL_23;
    }
    v11 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
LABEL_53:
      __break(1u);
      goto LABEL_54;
    }
    if (v11 >= v39)
      goto LABEL_50;
    v12 = *(_QWORD *)(v38 + 8 * v11);
    v13 = v9 + 1;
    if (!v12)
    {
      v13 = v9 + 2;
      if (v9 + 2 >= v39)
        goto LABEL_50;
      v12 = *(_QWORD *)(v38 + 8 * v13);
      if (!v12)
      {
        v13 = v9 + 3;
        if (v9 + 3 >= v39)
          goto LABEL_50;
        v12 = *(_QWORD *)(v38 + 8 * v13);
        if (!v12)
          break;
      }
    }
LABEL_22:
    v44 = (v12 - 1) & v12;
    v45 = v13;
    v10 = __clz(__rbit64(v12)) + (v13 << 6);
LABEL_23:
    v15 = 8 * v10;
    v43 = *(_QWORD *)(*(_QWORD *)(v41 + 48) + v15);
    v16 = *(_QWORD *)(*(_QWORD *)(v41 + 56) + v15);
    v17 = objc_allocWithZone((Class)KGMutableElementIdentifierSet);
    swift_retain();
    v18 = objc_msgSend(v17, sel_init);
    __swift_instantiateConcreteTypeFromMangledName(&qword_1ED852AF0);
    v46 = swift_allocObject();
    *(_QWORD *)(v46 + 16) = v18;
    v19 = 1 << *(_BYTE *)(v4 + 32);
    if (v19 < 64)
      v20 = ~(-1 << v19);
    else
      v20 = -1;
    v21 = v20 & *(_QWORD *)(v4 + 64);
    v22 = (unint64_t)(v19 + 63) >> 6;
    swift_bridgeObjectRetain();
    v23 = 0;
    if (v21)
    {
LABEL_27:
      v24 = __clz(__rbit64(v21));
      v21 &= v21 - 1;
      v25 = v24 | (v23 << 6);
      goto LABEL_28;
    }
    while (1)
    {
      v30 = v23 + 1;
      if (__OFADD__(v23, 1))
      {
        __break(1u);
LABEL_52:
        __break(1u);
        goto LABEL_53;
      }
      if (v30 >= v22)
        goto LABEL_48;
      v31 = *(_QWORD *)(v8 + 8 * v30);
      ++v23;
      if (!v31)
      {
        v23 = v30 + 1;
        if (v30 + 1 >= v22)
          goto LABEL_48;
        v31 = *(_QWORD *)(v8 + 8 * v23);
        if (!v31)
        {
          v23 = v30 + 2;
          if (v30 + 2 >= v22)
            goto LABEL_48;
          v31 = *(_QWORD *)(v8 + 8 * v23);
          if (!v31)
            break;
        }
      }
LABEL_43:
      v21 = (v31 - 1) & v31;
      v25 = __clz(__rbit64(v31)) + (v23 << 6);
LABEL_28:
      v26 = 8 * v25;
      v27 = *(_QWORD *)(*(_QWORD *)(v4 + 48) + v26);
      v28 = *(void **)(v16 + 16);
      v29 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v4 + 56) + v26) + 16);
      swift_retain();
      if ((objc_msgSend(v28, sel_intersectsIdentifierSet_, v29) & 1) != 0)
      {
        v33 = v46;
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        {
          v42 = *(id *)(v46 + 16);
          objc_msgSend(v42, sel_mutableCopy);
          sub_1CA1F0F04();
          swift_unknownObjectRelease();
          sub_1CA0D0350();
          swift_dynamicCast();

          v34 = swift_allocObject();
          *(_QWORD *)(v34 + 16) = v47;
          swift_release();
          v33 = v34;
        }
        v46 = v33;
        v35 = *(id *)(v33 + 16);
        objc_msgSend(v35, sel_containsIdentifier_, v27);
        objc_msgSend(v35, sel_addIdentifier_, v27);
        swift_release();

        if (v21)
          goto LABEL_27;
      }
      else
      {
        swift_release();
        if (v21)
          goto LABEL_27;
      }
    }
    v32 = v30 + 3;
    if (v32 < v22)
    {
      v31 = *(_QWORD *)(v8 + 8 * v32);
      if (!v31)
      {
        while (1)
        {
          v23 = v32 + 1;
          if (__OFADD__(v32, 1))
            goto LABEL_52;
          if (v23 >= v22)
            goto LABEL_48;
          v31 = *(_QWORD *)(v8 + 8 * v23);
          ++v32;
          if (v31)
            goto LABEL_43;
        }
      }
      v23 = v32;
      goto LABEL_43;
    }
LABEL_48:
    swift_release();
    if ((objc_msgSend(*(id *)(v46 + 16), sel_isEmpty) & 1) != 0)
    {
      swift_release();
    }
    else
    {
      swift_retain();
      isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      sub_1CA0ADED8(v46, v43, isUniquelyReferenced_nonNull_native);
      swift_release();
      swift_bridgeObjectRelease();
    }
    v7 = v44;
    v9 = v45;
    swift_release();
  }
  v14 = v9 + 4;
  if (v9 + 4 >= v39)
  {
LABEL_50:
    swift_release();

    *a3 = v40;
    return;
  }
  v12 = *(_QWORD *)(v38 + 8 * v14);
  if (v12)
  {
    v13 = v9 + 4;
    goto LABEL_22;
  }
  while (1)
  {
    v13 = v14 + 1;
    if (__OFADD__(v14, 1))
      break;
    if (v13 >= v39)
      goto LABEL_50;
    v12 = *(_QWORD *)(v38 + 8 * v13);
    ++v14;
    if (v12)
      goto LABEL_22;
  }
LABEL_54:
  __break(1u);
}

Swift::Bool __swiftcall ElementIdentifierTupleSet.contains(_:)(Swift::tuple_KnowledgeGraphKit_ElementIdentifier_KnowledgeGraphKit_ElementIdentifier a1)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  char v5;

  v2 = *v1;
  if (*(_QWORD *)(v2 + 16)
    && (v3 = *(_QWORD *)a1._1.rawValue, v4 = sub_1CA0AA4D8(*(_QWORD *)a1._0.rawValue), (v5 & 1) != 0))
  {
    return objc_msgSend(*(id *)(*(_QWORD *)(*(_QWORD *)(v2 + 56) + 8 * v4) + 16), sel_containsIdentifier_, v3);
  }
  else
  {
    return 0;
  }
}

uint64_t ElementIdentifierTupleSet.subscript.getter@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t *v2;
  uint64_t v4;
  unint64_t v5;
  char v6;
  uint64_t result;
  id v8;

  v4 = *v2;
  if (*(_QWORD *)(v4 + 16) && (v5 = sub_1CA0AA4D8(*a1), (v6 & 1) != 0))
  {
    *a2 = *(_QWORD *)(*(_QWORD *)(v4 + 56) + 8 * v5);
    return swift_retain();
  }
  else
  {
    v8 = objc_msgSend(objc_allocWithZone((Class)KGMutableElementIdentifierSet), sel_init);
    __swift_instantiateConcreteTypeFromMangledName(&qword_1ED852AF0);
    result = swift_allocObject();
    *(_QWORD *)(result + 16) = v8;
    *a2 = result;
  }
  return result;
}

KnowledgeGraphKit::ElementIdentifierTupleSet __swiftcall ElementIdentifierTupleSet.subtracting(_:)(KnowledgeGraphKit::ElementIdentifierTupleSet a1)
{
  _QWORD *v1;
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;
  KnowledgeGraphKit::ElementIdentifierTupleSet result;
  uint64_t v6;

  v3 = v1;
  v4 = *(_QWORD *)a1.targetsBySource._rawValue;
  *v3 = *v2;
  v6 = v4;
  swift_bridgeObjectRetain();
  ElementIdentifierTupleSet.subtract(_:)((KnowledgeGraphKit::ElementIdentifierTupleSet)&v6);
  return result;
}

uint64_t ElementIdentifierTupleSet.union(_:)@<X0>(uint64_t *a1@<X0>, _QWORD *a2@<X8>)
{
  return sub_1CA0E9964(a1, ElementIdentifierTupleSet.formUnion(_:), a2);
}

Swift::tuple_KnowledgeGraphKit_ElementIdentifier_KnowledgeGraphKit_ElementIdentifier_optional __swiftcall ElementIdentifierTupleSet.remove(_:)(Swift::tuple_KnowledgeGraphKit_ElementIdentifier_KnowledgeGraphKit_ElementIdentifier a1)
{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  char v10;
  unsigned int v11;
  char isUniquelyReferenced_nonNull_native;
  _QWORD *v13;
  char v14;
  unint64_t v15;
  uint64_t v16;
  _BOOL8 v17;
  uint64_t v18;
  unint64_t v19;
  char v20;
  _QWORD *v21;
  id v22;
  id v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  BOOL v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  char v31;
  Swift::UInt v32;
  Swift::UInt v33;
  Swift::Bool v34;
  char v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  _QWORD *v41;
  Swift::tuple_KnowledgeGraphKit_ElementIdentifier_KnowledgeGraphKit_ElementIdentifier_optional result;

  v4 = v2;
  v5 = v1;
  v6 = *(_QWORD *)a1._0.rawValue;
  v7 = *(_QWORD *)a1._1.rawValue;
  v8 = *v2;
  if (*(_QWORD *)(v8 + 16) && (v9 = sub_1CA0AA4D8(*(_QWORD *)a1._0.rawValue), (v10 & 1) != 0))
    v11 = objc_msgSend(*(id *)(*(_QWORD *)(*(_QWORD *)(v8 + 56) + 8 * v9) + 16), sel_containsIdentifier_, v7);
  else
    v11 = 0;
  v40 = v7;
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  v41 = (_QWORD *)*v4;
  v13 = v41;
  *v4 = 0x8000000000000000;
  v15 = sub_1CA0AA4D8(v6);
  v16 = v13[2];
  v17 = (v14 & 1) == 0;
  v18 = v16 + v17;
  if (__OFADD__(v16, v17))
  {
    __break(1u);
    goto LABEL_28;
  }
  LOBYTE(v3) = v14;
  if (v13[3] < v18)
  {
    sub_1CA0EAC60(v18, isUniquelyReferenced_nonNull_native);
    v13 = v41;
    v19 = sub_1CA0AA4D8(v6);
    if ((v3 & 1) == (v20 & 1))
    {
      v15 = v19;
      goto LABEL_10;
    }
    v32 = sub_1CA1F1360();
    __break(1u);
    goto LABEL_34;
  }
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
    goto LABEL_30;
  while (1)
  {
LABEL_10:
    *v4 = (uint64_t)v13;
    swift_bridgeObjectRelease();
    v21 = (_QWORD *)*v4;
    if ((v3 & 1) != 0)
    {
      swift_bridgeObjectRetain();
    }
    else
    {
      v22 = objc_allocWithZone((Class)KGMutableElementIdentifierSet);
      swift_bridgeObjectRetain();
      v23 = objc_msgSend(v22, sel_init);
      __swift_instantiateConcreteTypeFromMangledName(&qword_1ED852AF0);
      v24 = swift_allocObject();
      *(_QWORD *)(v24 + 16) = v23;
      v21[(v15 >> 6) + 8] |= 1 << v15;
      v25 = 8 * v15;
      *(_QWORD *)(v21[6] + v25) = v6;
      *(_QWORD *)(v21[7] + v25) = v24;
      v26 = v21[2];
      v27 = __OFADD__(v26, 1);
      v28 = v26 + 1;
      if (v27)
      {
        __break(1u);
        goto LABEL_32;
      }
      v21[2] = v28;
    }
    v3 = v21[7];
    swift_bridgeObjectRelease();
    ElementIdentifierSet.remove(_:)((KnowledgeGraphKit::ElementIdentifier)&v40);
    v29 = *v4;
    if (!*(_QWORD *)(*v4 + 16))
    {
LABEL_28:
      __break(1u);
      goto LABEL_29;
    }
    v30 = sub_1CA0AA4D8(v6);
    if ((v31 & 1) != 0)
      break;
LABEL_29:
    __break(1u);
LABEL_30:
    sub_1CA0EF024();
    v13 = v41;
  }
  v32 = (Swift::UInt)objc_msgSend(*(id *)(*(_QWORD *)(*(_QWORD *)(v29 + 56) + 8 * v30) + 16), sel_isEmpty);
  if ((v32 & 1) != 0)
  {
    v32 = sub_1CA0AA4D8(v6);
    if ((v33 & 1) != 0)
    {
      v15 = v32;
      v35 = swift_isUniquelyReferenced_nonNull_native();
      v36 = *v4;
      v39 = *v4;
      *v4 = 0x8000000000000000;
      if ((v35 & 1) != 0)
      {
LABEL_19:
        sub_1CA0F18F4(v15, v36);
        *v4 = v36;
        swift_release();
        v32 = swift_bridgeObjectRelease();
        goto LABEL_20;
      }
LABEL_32:
      sub_1CA0EF024();
      v36 = v39;
      goto LABEL_19;
    }
  }
LABEL_20:
  if (v11)
    v37 = v6;
  else
    v37 = 0;
  if (v11)
    v38 = v7;
  else
    v38 = 0;
  *(_QWORD *)v5 = v37;
  *(_QWORD *)(v5 + 8) = v38;
  *(_BYTE *)(v5 + 16) = v11 ^ 1;
LABEL_34:
  result.value._1.rawValue = v33;
  result.value._0.rawValue = v32;
  result.is_nil = v34;
  return result;
}

uint64_t ElementIdentifierTupleSet.formUnion(_:)(uint64_t *a1)
{
  return sub_1CA0E9E28(a1, (uint64_t (*)(uint64_t *))ElementIdentifierTupleSet.formUnion(_:), (SEL *)&selRef_unionWithIdentifierSet_);
}

Swift::Void __swiftcall ElementIdentifierTupleSet.subtract(_:)(KnowledgeGraphKit::ElementIdentifierTupleSet a1)
{
  uint64_t *v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  int64_t v7;
  unint64_t v8;
  unint64_t i;
  int64_t v10;
  unint64_t v11;
  int64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char isUniquelyReferenced_nonNull_native;
  _QWORD *v18;
  char v19;
  unint64_t v20;
  uint64_t v21;
  _BOOL8 v22;
  uint64_t v23;
  char v24;
  unint64_t v25;
  char v26;
  _QWORD *v27;
  uint64_t v28;
  id v29;
  id v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  BOOL v34;
  uint64_t v35;
  id v36;
  uint64_t v37;
  uint64_t v38;
  unint64_t v39;
  char v40;
  unint64_t v41;
  char v42;
  unint64_t v43;
  char v44;
  uint64_t v45;
  uint64_t v46;
  int64_t v47;
  int64_t v48;
  uint64_t v49;
  _QWORD *v50;
  uint64_t v51;

  v2 = v1;
  v3 = *(_QWORD *)a1.targetsBySource._rawValue;
  v46 = *(_QWORD *)a1.targetsBySource._rawValue + 64;
  v4 = 1 << *(_BYTE *)(*(_QWORD *)a1.targetsBySource._rawValue + 32);
  v5 = -1;
  if (v4 < 64)
    v5 = ~(-1 << v4);
  v6 = v5 & *(_QWORD *)(*(_QWORD *)a1.targetsBySource._rawValue + 64);
  v47 = (unint64_t)(v4 + 63) >> 6;
  swift_bridgeObjectRetain();
  v7 = 0;
  if (v6)
    goto LABEL_6;
LABEL_7:
  v10 = v7 + 1;
  if (!__OFADD__(v7, 1))
  {
    if (v10 < v47)
    {
      v11 = *(_QWORD *)(v46 + 8 * v10);
      v12 = v7 + 1;
      if (v11)
        goto LABEL_20;
      v12 = v7 + 2;
      if (v7 + 2 >= v47)
        goto LABEL_41;
      v11 = *(_QWORD *)(v46 + 8 * v12);
      if (v11)
        goto LABEL_20;
      v12 = v7 + 3;
      if (v7 + 3 >= v47)
        goto LABEL_41;
      v11 = *(_QWORD *)(v46 + 8 * v12);
      if (v11)
      {
LABEL_20:
        v6 = (v11 - 1) & v11;
        v48 = v12;
        for (i = __clz(__rbit64(v11)) + (v12 << 6); ; i = v8 | (v7 << 6))
        {
          v14 = 8 * i;
          v15 = *(_QWORD *)(*(_QWORD *)(v3 + 48) + v14);
          v16 = *(_QWORD *)(*(_QWORD *)(v3 + 56) + v14);
          swift_retain();
          isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
          v18 = (_QWORD *)*v2;
          v50 = (_QWORD *)*v2;
          *v2 = 0x8000000000000000;
          v20 = sub_1CA0AA4D8(v15);
          v21 = v18[2];
          v22 = (v19 & 1) == 0;
          v23 = v21 + v22;
          if (__OFADD__(v21, v22))
            break;
          v24 = v19;
          if (v18[3] >= v23)
          {
            if ((isUniquelyReferenced_nonNull_native & 1) == 0)
            {
              sub_1CA0EF024();
              v18 = v50;
            }
          }
          else
          {
            sub_1CA0EAC60(v23, isUniquelyReferenced_nonNull_native);
            v18 = v50;
            v25 = sub_1CA0AA4D8(v15);
            if ((v24 & 1) != (v26 & 1))
              goto LABEL_48;
            v20 = v25;
          }
          *v2 = (uint64_t)v18;
          swift_bridgeObjectRelease();
          v27 = (_QWORD *)*v2;
          if ((v24 & 1) != 0)
          {
            v28 = v27[7];
          }
          else
          {
            v29 = objc_allocWithZone((Class)KGMutableElementIdentifierSet);
            swift_bridgeObjectRetain();
            v30 = objc_msgSend(v29, sel_init);
            __swift_instantiateConcreteTypeFromMangledName(&qword_1ED852AF0);
            v31 = swift_allocObject();
            *(_QWORD *)(v31 + 16) = v30;
            v27[(v20 >> 6) + 8] |= 1 << v20;
            v32 = 8 * v20;
            *(_QWORD *)(v27[6] + v32) = v15;
            *(_QWORD *)(v27[7] + v32) = v31;
            v33 = v27[2];
            v34 = __OFADD__(v33, 1);
            v35 = v33 + 1;
            if (v34)
              goto LABEL_45;
            v27[2] = v35;
            v28 = v27[7];
            swift_bridgeObjectRelease();
          }
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
          {
            v36 = *(id *)(*(_QWORD *)(v28 + 8 * v20) + 16);
            objc_msgSend(v36, sel_mutableCopy);
            sub_1CA1F0F04();
            swift_unknownObjectRelease();
            sub_1CA0D0350();
            swift_dynamicCast();

            __swift_instantiateConcreteTypeFromMangledName(&qword_1ED852AF0);
            v37 = swift_allocObject();
            *(_QWORD *)(v37 + 16) = v49;
            *(_QWORD *)(v28 + 8 * v20) = v37;
            swift_release();
          }
          objc_msgSend(*(id *)(*(_QWORD *)(v28 + 8 * v20) + 16), sel_subtractIdentifierSet_, *(_QWORD *)(v16 + 16));
          v38 = *v2;
          if (!*(_QWORD *)(*v2 + 16))
            goto LABEL_43;
          v39 = sub_1CA0AA4D8(v15);
          if ((v40 & 1) == 0)
            goto LABEL_44;
          if (objc_msgSend(*(id *)(*(_QWORD *)(*(_QWORD *)(v38 + 56) + 8 * v39) + 16), sel_isEmpty)
            && (v41 = sub_1CA0AA4D8(v15), (v42 & 1) != 0))
          {
            v43 = v41;
            v44 = swift_isUniquelyReferenced_nonNull_native();
            v45 = *v2;
            v51 = *v2;
            *v2 = 0x8000000000000000;
            if ((v44 & 1) == 0)
            {
              sub_1CA0EF024();
              v45 = v51;
            }
            sub_1CA0F18F4(v43, v45);
            *v2 = v45;
            swift_release();
            swift_release();
            swift_bridgeObjectRelease();
            v7 = v48;
            if (!v6)
              goto LABEL_7;
          }
          else
          {
            swift_release();
            v7 = v48;
            if (!v6)
              goto LABEL_7;
          }
LABEL_6:
          v8 = __clz(__rbit64(v6));
          v6 &= v6 - 1;
          v48 = v7;
        }
        __break(1u);
LABEL_43:
        __break(1u);
LABEL_44:
        __break(1u);
LABEL_45:
        __break(1u);
        goto LABEL_46;
      }
      v13 = v7 + 4;
      if (v7 + 4 < v47)
      {
        v11 = *(_QWORD *)(v46 + 8 * v13);
        if (!v11)
        {
          while (1)
          {
            v12 = v13 + 1;
            if (__OFADD__(v13, 1))
              goto LABEL_47;
            if (v12 >= v47)
              goto LABEL_41;
            v11 = *(_QWORD *)(v46 + 8 * v12);
            ++v13;
            if (v11)
              goto LABEL_20;
          }
        }
        v12 = v7 + 4;
        goto LABEL_20;
      }
    }
LABEL_41:
    swift_release();
    return;
  }
LABEL_46:
  __break(1u);
LABEL_47:
  __break(1u);
LABEL_48:
  sub_1CA1F1360();
  __break(1u);
}

unint64_t ElementIdentifierTupleSet.subscript.setter(uint64_t *a1, uint64_t *a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  unsigned int v6;
  char v7;
  char v8;
  char v9;
  unint64_t result;
  char v11;
  unint64_t v12;
  char v13;
  uint64_t v14;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v16;
  uint64_t v17;

  v3 = v2;
  v4 = *a1;
  v5 = *a2;
  v6 = objc_msgSend(*(id *)(*a1 + 16), sel_isEmpty);
  v7 = v6;
  if (!*(_QWORD *)(*v2 + 16))
  {
    if (v6)
      return swift_release();
    goto LABEL_10;
  }
  sub_1CA0AA4D8(v5);
  if ((v7 & 1) == 0)
  {
LABEL_10:
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    v17 = *v2;
    *v2 = 0x8000000000000000;
    sub_1CA0ADED8(v4, v5, isUniquelyReferenced_nonNull_native);
    *v2 = v17;
    return swift_bridgeObjectRelease();
  }
  v9 = v8;
  result = swift_release();
  if ((v9 & 1) != 0)
  {
    result = sub_1CA0AA4D8(v5);
    if ((v11 & 1) != 0)
    {
      v12 = result;
      v13 = swift_isUniquelyReferenced_nonNull_native();
      v14 = *v3;
      v16 = *v3;
      *v3 = 0x8000000000000000;
      if ((v13 & 1) == 0)
      {
        sub_1CA0EF024();
        v14 = v16;
      }
      sub_1CA0F18F4(v12, v14);
      *v3 = v14;
      swift_release();
      return swift_bridgeObjectRelease();
    }
  }
  return result;
}

Swift::Void __swiftcall ElementIdentifierTupleSet.removeTargets(for:)(KnowledgeGraphKit::ElementIdentifier a1)
{
  uint64_t *v1;
  uint64_t *v2;
  unint64_t v3;
  char v4;
  unint64_t v5;
  int isUniquelyReferenced_nonNull_native;
  uint64_t v7;
  uint64_t v8;

  v2 = v1;
  v3 = sub_1CA0AA4D8(*(_QWORD *)a1.rawValue);
  if ((v4 & 1) != 0)
  {
    v5 = v3;
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    v7 = *v1;
    v8 = *v2;
    *v2 = 0x8000000000000000;
    if (!isUniquelyReferenced_nonNull_native)
    {
      sub_1CA0EF024();
      v7 = v8;
    }
    sub_1CA0F18F4(v5, v7);
    *v2 = v7;
    swift_release();
    swift_bridgeObjectRelease();
  }
}

uint64_t static ElementIdentifierTupleSet.== infix(_:_:)(uint64_t *a1, uint64_t *a2)
{
  return sub_1CA0E8E5C(*a1, *a2);
}

uint64_t ElementIdentifierTupleSet.hashValue.getter()
{
  uint64_t *v0;
  uint64_t v1;
  __int128 v3[4];

  v1 = *v0;
  sub_1CA1F13F0();
  swift_bridgeObjectRetain();
  sub_1CA0F2270(v3, v1);
  swift_bridgeObjectRelease();
  return sub_1CA1F1438();
}

uint64_t ElementIdentifierTupleSet.description.getter()
{
  sub_1CA0BD114();
  return sub_1CA1F08E0();
}

uint64_t ElementIdentifierTupleSet.targetsBySource.getter()
{
  return swift_bridgeObjectRetain();
}

KnowledgeGraphKit::ElementIdentifierTupleSet __swiftcall ElementIdentifierTupleSet.init(targetsBySource:)(Swift::OpaquePointer targetsBySource)
{
  Swift::OpaquePointer *v1;
  Swift::OpaquePointer *v3;
  KnowledgeGraphKit::ElementIdentifierTupleSet result;

  v3 = v1;

  v3->_rawValue = targetsBySource._rawValue;
  return result;
}

void (*ElementIdentifierTupleSet.subscript.modify(_QWORD *a1, uint64_t *a2))(_QWORD *a1, char a2)
{
  uint64_t v2;
  _QWORD *v5;
  uint64_t v6;

  v5 = malloc(0x38uLL);
  *a1 = v5;
  v6 = *a2;
  v5[4] = v2;
  v5[5] = v6;
  v5[6] = sub_1CA0E7698((uint64_t)v5, v6, (void (*)(uint64_t *__return_ptr, uint64_t))sub_1CA0E8C74);
  return sub_1CA0E8B74;
}

void sub_1CA0E8B74(_QWORD *a1, char a2)
{
  unint64_t v2;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  char v7;
  unint64_t v8;
  char v9;
  uint64_t *v10;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v12;
  uint64_t *v13;
  uint64_t v14;

  v4 = *a1;
  (*(void (**)(_QWORD, _QWORD))(*a1 + 48))(*a1, 0);
  if ((a2 & 1) != 0)
    goto LABEL_8;
  v5 = **(_QWORD **)(v4 + 32);
  if (!*(_QWORD *)(v5 + 16))
  {
    __break(1u);
    goto LABEL_10;
  }
  v6 = sub_1CA0AA4D8(*(_QWORD *)(v4 + 40));
  if ((v7 & 1) == 0)
  {
LABEL_10:
    __break(1u);
    goto LABEL_11;
  }
  if (objc_msgSend(*(id *)(*(_QWORD *)(*(_QWORD *)(v5 + 56) + 8 * v6) + 16), sel_isEmpty))
  {
    v8 = sub_1CA0AA4D8(*(_QWORD *)(v4 + 40));
    if ((v9 & 1) != 0)
    {
      v2 = v8;
      v10 = *(uint64_t **)(v4 + 32);
      isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      v12 = *v10;
      v14 = *v10;
      *v10 = 0x8000000000000000;
      if ((isUniquelyReferenced_nonNull_native & 1) != 0)
      {
LABEL_7:
        v13 = *(uint64_t **)(v4 + 32);
        sub_1CA0F18F4(v2, v12);
        *v13 = v12;
        swift_bridgeObjectRelease();
        swift_release();
        goto LABEL_8;
      }
LABEL_11:
      sub_1CA0EF024();
      v12 = v14;
      goto LABEL_7;
    }
  }
LABEL_8:
  free((void *)v4);
}

uint64_t sub_1CA0E8C74@<X0>(uint64_t *a1@<X8>)
{
  id v2;
  uint64_t result;

  v2 = objc_msgSend(objc_allocWithZone((Class)KGMutableElementIdentifierSet), sel_init);
  __swift_instantiateConcreteTypeFromMangledName(&qword_1ED852AF0);
  result = swift_allocObject();
  *(_QWORD *)(result + 16) = v2;
  *a1 = result;
  return result;
}

uint64_t ElementIdentifierTupleSet.count.getter()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  int64_t v6;
  uint64_t result;
  int64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  BOOL v12;
  int64_t v13;
  unint64_t v14;
  int64_t v15;

  v1 = *v0;
  v2 = *v0 + 64;
  v3 = 1 << *(_BYTE *)(*v0 + 32);
  v4 = -1;
  if (v3 < 64)
    v4 = ~(-1 << v3);
  v5 = v4 & *(_QWORD *)(*v0 + 64);
  v6 = (unint64_t)(v3 + 63) >> 6;
  result = swift_bridgeObjectRetain_n();
  v8 = 0;
  v9 = 0;
  do
  {
    if (v5)
    {
      v10 = __clz(__rbit64(v5));
      v5 &= v5 - 1;
      v11 = v10 | (v8 << 6);
    }
    else
    {
      v13 = v8 + 1;
      if (__OFADD__(v8, 1))
        goto LABEL_27;
      if (v13 >= v6)
      {
LABEL_25:
        swift_release();
        swift_bridgeObjectRelease();
        return v9;
      }
      v14 = *(_QWORD *)(v2 + 8 * v13);
      ++v8;
      if (!v14)
      {
        v8 = v13 + 1;
        if (v13 + 1 >= v6)
          goto LABEL_25;
        v14 = *(_QWORD *)(v2 + 8 * v8);
        if (!v14)
        {
          v8 = v13 + 2;
          if (v13 + 2 >= v6)
            goto LABEL_25;
          v14 = *(_QWORD *)(v2 + 8 * v8);
          if (!v14)
          {
            v8 = v13 + 3;
            if (v13 + 3 >= v6)
              goto LABEL_25;
            v14 = *(_QWORD *)(v2 + 8 * v8);
            if (!v14)
            {
              v8 = v13 + 4;
              if (v13 + 4 >= v6)
                goto LABEL_25;
              v14 = *(_QWORD *)(v2 + 8 * v8);
              if (!v14)
              {
                v15 = v13 + 5;
                if (v15 >= v6)
                  goto LABEL_25;
                v14 = *(_QWORD *)(v2 + 8 * v15);
                if (!v14)
                {
                  while (1)
                  {
                    v8 = v15 + 1;
                    if (__OFADD__(v15, 1))
                      goto LABEL_28;
                    if (v8 >= v6)
                      goto LABEL_25;
                    v14 = *(_QWORD *)(v2 + 8 * v8);
                    ++v15;
                    if (v14)
                      goto LABEL_24;
                  }
                }
                v8 = v15;
              }
            }
          }
        }
      }
LABEL_24:
      v5 = (v14 - 1) & v14;
      v11 = __clz(__rbit64(v14)) + (v8 << 6);
    }
    result = (uint64_t)objc_msgSend(*(id *)(*(_QWORD *)(*(_QWORD *)(v1 + 56) + 8 * v11) + 16), sel_count);
    v12 = __OFADD__(v9, result);
    v9 += result;
  }
  while (!v12);
  __break(1u);
LABEL_27:
  __break(1u);
LABEL_28:
  __break(1u);
  return result;
}

uint64_t sub_1CA0E8E5C(uint64_t result, uint64_t a2)
{
  uint64_t v3;
  int64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  int64_t v9;
  unint64_t v10;
  unint64_t v11;
  int64_t v12;
  unint64_t v13;
  int64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  char v18;
  void *v19;
  uint64_t v20;

  if (result == a2)
    return 1;
  v3 = result;
  if (*(_QWORD *)(result + 16) != *(_QWORD *)(a2 + 16))
    return 0;
  v4 = 0;
  v5 = result + 64;
  v6 = 1 << *(_BYTE *)(result + 32);
  v7 = -1;
  if (v6 < 64)
    v7 = ~(-1 << v6);
  v8 = v7 & *(_QWORD *)(result + 64);
  v9 = (unint64_t)(v6 + 63) >> 6;
  while (1)
  {
    if (v8)
    {
      v10 = __clz(__rbit64(v8));
      v8 &= v8 - 1;
      v11 = v10 | (v4 << 6);
      goto LABEL_24;
    }
    v12 = v4 + 1;
    if (__OFADD__(v4, 1))
    {
      __break(1u);
      goto LABEL_29;
    }
    if (v12 >= v9)
      return 1;
    v13 = *(_QWORD *)(v5 + 8 * v12);
    ++v4;
    if (!v13)
    {
      v4 = v12 + 1;
      if (v12 + 1 >= v9)
        return 1;
      v13 = *(_QWORD *)(v5 + 8 * v4);
      if (!v13)
      {
        v4 = v12 + 2;
        if (v12 + 2 >= v9)
          return 1;
        v13 = *(_QWORD *)(v5 + 8 * v4);
        if (!v13)
        {
          v4 = v12 + 3;
          if (v12 + 3 >= v9)
            return 1;
          v13 = *(_QWORD *)(v5 + 8 * v4);
          if (!v13)
            break;
        }
      }
    }
LABEL_23:
    v8 = (v13 - 1) & v13;
    v11 = __clz(__rbit64(v13)) + (v4 << 6);
LABEL_24:
    v15 = 8 * v11;
    v16 = *(_QWORD *)(*(_QWORD *)(v3 + 56) + v15);
    v17 = sub_1CA0AA4D8(*(_QWORD *)(*(_QWORD *)(v3 + 48) + v15));
    if ((v18 & 1) != 0)
    {
      v19 = *(void **)(*(_QWORD *)(*(_QWORD *)(a2 + 56) + 8 * v17) + 16);
      v20 = *(_QWORD *)(v16 + 16);
      swift_retain();
      LOBYTE(v19) = objc_msgSend(v19, sel_isEqualToElementIdentifierSet_, v20);
      result = swift_release();
      if ((v19 & 1) != 0)
        continue;
    }
    return 0;
  }
  v14 = v12 + 4;
  if (v14 >= v9)
    return 1;
  v13 = *(_QWORD *)(v5 + 8 * v14);
  if (v13)
  {
    v4 = v14;
    goto LABEL_23;
  }
  while (1)
  {
    v4 = v14 + 1;
    if (__OFADD__(v14, 1))
      break;
    if (v4 >= v9)
      return 1;
    v13 = *(_QWORD *)(v5 + 8 * v4);
    ++v14;
    if (v13)
      goto LABEL_23;
  }
LABEL_29:
  __break(1u);
  return result;
}

uint64_t ElementIdentifierTupleSet.hash(into:)(__int128 *a1)
{
  uint64_t *v1;
  uint64_t v3;

  v3 = *v1;
  swift_bridgeObjectRetain();
  sub_1CA0F2270(a1, v3);
  return swift_bridgeObjectRelease();
}

uint64_t sub_1CA0E9048()
{
  uint64_t *v0;
  uint64_t v1;
  __int128 v3[4];

  v1 = *v0;
  sub_1CA1F13F0();
  swift_bridgeObjectRetain();
  sub_1CA0F2270(v3, v1);
  swift_bridgeObjectRelease();
  return sub_1CA1F1438();
}

uint64_t sub_1CA0E909C(__int128 *a1)
{
  uint64_t *v1;
  uint64_t v3;

  v3 = *v1;
  swift_bridgeObjectRetain();
  sub_1CA0F2270(a1, v3);
  return swift_bridgeObjectRelease();
}

uint64_t sub_1CA0E90D4()
{
  uint64_t *v0;
  uint64_t v1;
  __int128 v3[4];

  v1 = *v0;
  sub_1CA1F13F0();
  swift_bridgeObjectRetain();
  sub_1CA0F2270(v3, v1);
  swift_bridgeObjectRelease();
  return sub_1CA1F1438();
}

uint64_t sub_1CA0E9124(uint64_t *a1, uint64_t *a2)
{
  return sub_1CA0E8E5C(*a1, *a2);
}

uint64_t sub_1CA0E9130@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  _QWORD *v4;
  uint64_t v5;
  uint64_t *v6;
  __objc2_prot_list **p_base_prots;
  uint64_t v8;
  uint64_t v9;
  char isUniquelyReferenced_nonNull_native;
  char v11;
  unint64_t v12;
  uint64_t v13;
  _BOOL8 v14;
  uint64_t v15;
  char v16;
  unint64_t v17;
  char v18;
  uint64_t v19;
  id v20;
  id v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  BOOL v25;
  uint64_t v26;
  id v27;
  uint64_t v28;
  id v29;
  unint64_t v30;
  char v31;
  unint64_t v32;
  char v33;
  unint64_t v34;
  uint64_t result;
  _QWORD *v36;
  uint64_t v37;

  v4 = (_QWORD *)sub_1CA0AECA8(MEMORY[0x1E0DEE9D8]);
  v5 = *(_QWORD *)(a1 + 16);
  if (v5)
  {
    v36 = a2;
    swift_bridgeObjectRetain();
    v6 = (uint64_t *)(a1 + 40);
    p_base_prots = (__objc2_prot_list **)(&KGStoredGraph__metaData + 40);
    while (1)
    {
      v8 = *(v6 - 1);
      v9 = *v6;
      isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      v12 = sub_1CA0AA4D8(v8);
      v13 = v4[2];
      v14 = (v11 & 1) == 0;
      v15 = v13 + v14;
      if (__OFADD__(v13, v14))
        break;
      v16 = v11;
      if (v4[3] >= v15)
      {
        if ((isUniquelyReferenced_nonNull_native & 1) == 0)
          sub_1CA0EF024();
      }
      else
      {
        sub_1CA0EAC60(v15, isUniquelyReferenced_nonNull_native);
        v17 = sub_1CA0AA4D8(v8);
        if ((v16 & 1) != (v18 & 1))
          goto LABEL_30;
        v12 = v17;
      }
      swift_bridgeObjectRelease();
      if ((v16 & 1) != 0)
      {
        v19 = v4[7];
      }
      else
      {
        v20 = objc_allocWithZone((Class)KGMutableElementIdentifierSet);
        swift_bridgeObjectRetain();
        v21 = objc_msgSend(v20, sel_init);
        __swift_instantiateConcreteTypeFromMangledName(&qword_1ED852AF0);
        v22 = swift_allocObject();
        *(_QWORD *)(v22 + 16) = v21;
        v4[(v12 >> 6) + 8] |= 1 << v12;
        v23 = 8 * v12;
        *(_QWORD *)(v4[6] + v23) = v8;
        *(_QWORD *)(v4[7] + v23) = v22;
        v24 = v4[2];
        v25 = __OFADD__(v24, 1);
        v26 = v24 + 1;
        if (v25)
          goto LABEL_29;
        v4[2] = v26;
        v19 = v4[7];
        swift_bridgeObjectRelease();
      }
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        v27 = *(id *)(*(_QWORD *)(v19 + 8 * v12) + 16);
        objc_msgSend(v27, sel_mutableCopy);
        sub_1CA1F0F04();
        swift_unknownObjectRelease();
        sub_1CA0D0350();
        swift_dynamicCast();

        __swift_instantiateConcreteTypeFromMangledName(&qword_1ED852AF0);
        v28 = swift_allocObject();
        *(_QWORD *)(v28 + 16) = v37;
        *(_QWORD *)(v19 + 8 * v12) = v28;
        p_base_prots = &KGStoredGraph__metaData.base_prots;
        swift_release();
      }
      v29 = *(id *)(*(_QWORD *)(v19 + 8 * v12) + 16);
      objc_msgSend(v29, (SEL)p_base_prots[230], v9);
      objc_msgSend(v29, sel_addIdentifier_, v9);

      if (!v4[2])
        goto LABEL_27;
      v30 = sub_1CA0AA4D8(v8);
      if ((v31 & 1) == 0)
        goto LABEL_28;
      if (objc_msgSend(*(id *)(*(_QWORD *)(v4[7] + 8 * v30) + 16), sel_isEmpty))
      {
        v32 = sub_1CA0AA4D8(v8);
        if ((v33 & 1) != 0)
        {
          v34 = v32;
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
            sub_1CA0EF024();
          sub_1CA0F18F4(v34, (uint64_t)v4);
          swift_release();
          swift_bridgeObjectRelease();
        }
      }
      v6 += 2;
      if (!--v5)
      {
        result = swift_bridgeObjectRelease_n();
        a2 = v36;
        goto LABEL_25;
      }
    }
    __break(1u);
LABEL_27:
    __break(1u);
LABEL_28:
    __break(1u);
LABEL_29:
    __break(1u);
LABEL_30:
    result = sub_1CA1F1360();
    __break(1u);
  }
  else
  {
    result = swift_bridgeObjectRelease();
LABEL_25:
    *a2 = v4;
  }
  return result;
}

uint64_t ElementIdentifierTupleSet.init<A>(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t AssociatedTypeWitness;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  _QWORD *v12;
  uint64_t result;
  uint64_t v14;
  uint64_t v15;
  char isUniquelyReferenced_nonNull_native;
  char v17;
  unint64_t v18;
  uint64_t v19;
  _BOOL8 v20;
  uint64_t v21;
  char v22;
  unint64_t v23;
  char v24;
  uint64_t v25;
  id v26;
  id v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  BOOL v31;
  uint64_t v32;
  id v33;
  uint64_t v34;
  uint64_t v35;
  id v36;
  unint64_t v37;
  char v38;
  unint64_t v39;
  char v40;
  unint64_t v41;
  int v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  _QWORD *v47;
  uint64_t v48;
  char *v49;
  uint64_t v50;
  _QWORD *v51;
  uint64_t v52;
  char v53;

  v47 = a3;
  v5 = *(_QWORD *)(a2 - 8);
  MEMORY[0x1E0C80A78](a1, a2);
  v7 = (char *)&v43 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v43 = *(_QWORD *)(AssociatedTypeWitness - 8);
  MEMORY[0x1E0C80A78](AssociatedTypeWitness, v9);
  v11 = (char *)&v43 - v10;
  v12 = (_QWORD *)sub_1CA0AECA8(MEMORY[0x1E0DEE9D8]);
  v44 = v5;
  v45 = a1;
  (*(void (**)(char *, uint64_t, uint64_t))(v5 + 16))(v7, a1, a2);
  sub_1CA1F0A6C();
  v46 = a2;
  swift_getAssociatedConformanceWitness();
  sub_1CA1F0EC8();
  if ((v53 & 1) != 0)
  {
LABEL_2:
    (*(void (**)(uint64_t, uint64_t))(v44 + 8))(v45, v46);
    result = (*(uint64_t (**)(char *, uint64_t))(v43 + 8))(v11, AssociatedTypeWitness);
    *v47 = v12;
  }
  else
  {
    v14 = (uint64_t)v51;
    v15 = v52;
    v48 = MEMORY[0x1E0DEE9B8] + 8;
    v49 = v11;
    while (1)
    {
      isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      v51 = v12;
      v18 = sub_1CA0AA4D8(v14);
      v19 = v12[2];
      v20 = (v17 & 1) == 0;
      v21 = v19 + v20;
      if (__OFADD__(v19, v20))
        break;
      v22 = v17;
      if (v12[3] >= v21)
      {
        if ((isUniquelyReferenced_nonNull_native & 1) == 0)
          sub_1CA0EF024();
      }
      else
      {
        sub_1CA0EAC60(v21, isUniquelyReferenced_nonNull_native);
        v23 = sub_1CA0AA4D8(v14);
        if ((v22 & 1) != (v24 & 1))
          goto LABEL_28;
        v18 = v23;
      }
      v12 = v51;
      swift_bridgeObjectRelease();
      if ((v22 & 1) != 0)
      {
        v25 = v12[7];
      }
      else
      {
        v26 = objc_allocWithZone((Class)KGMutableElementIdentifierSet);
        swift_bridgeObjectRetain();
        v27 = objc_msgSend(v26, sel_init);
        __swift_instantiateConcreteTypeFromMangledName(&qword_1ED852AF0);
        v28 = swift_allocObject();
        *(_QWORD *)(v28 + 16) = v27;
        v12[(v18 >> 6) + 8] |= 1 << v18;
        v29 = 8 * v18;
        *(_QWORD *)(v12[6] + v29) = v14;
        *(_QWORD *)(v12[7] + v29) = v28;
        v30 = v12[2];
        v31 = __OFADD__(v30, 1);
        v32 = v30 + 1;
        if (v31)
          goto LABEL_27;
        v12[2] = v32;
        v25 = v12[7];
        swift_bridgeObjectRelease();
      }
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        v33 = *(id *)(*(_QWORD *)(v25 + 8 * v18) + 16);
        objc_msgSend(v33, sel_mutableCopy);
        sub_1CA1F0F04();
        swift_unknownObjectRelease();
        sub_1CA0D0350();
        swift_dynamicCast();
        v34 = v50;

        __swift_instantiateConcreteTypeFromMangledName(&qword_1ED852AF0);
        v35 = swift_allocObject();
        *(_QWORD *)(v35 + 16) = v34;
        *(_QWORD *)(v25 + 8 * v18) = v35;
        v11 = v49;
        swift_release();
      }
      v36 = *(id *)(*(_QWORD *)(v25 + 8 * v18) + 16);
      objc_msgSend(v36, sel_containsIdentifier_, v15);
      objc_msgSend(v36, sel_addIdentifier_, v15);

      if (!v12[2])
        goto LABEL_25;
      v37 = sub_1CA0AA4D8(v14);
      if ((v38 & 1) == 0)
        goto LABEL_26;
      if ((objc_msgSend(*(id *)(*(_QWORD *)(v12[7] + 8 * v37) + 16), sel_isEmpty) & 1) != 0)
      {
        v39 = sub_1CA0AA4D8(v14);
        if ((v40 & 1) != 0)
        {
          v41 = v39;
          v42 = swift_isUniquelyReferenced_nonNull_native();
          v51 = v12;
          if (!v42)
          {
            sub_1CA0EF024();
            v12 = v51;
          }
          sub_1CA0F18F4(v41, (uint64_t)v12);
          swift_release();
          swift_bridgeObjectRelease();
        }
      }
      sub_1CA1F0EC8();
      v14 = (uint64_t)v51;
      v15 = v52;
      if ((v53 & 1) != 0)
        goto LABEL_2;
    }
    __break(1u);
LABEL_25:
    __break(1u);
LABEL_26:
    __break(1u);
LABEL_27:
    __break(1u);
LABEL_28:
    result = sub_1CA1F1360();
    __break(1u);
  }
  return result;
}

uint64_t ElementIdentifierTupleSet.init(arrayLiteral:)@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t result;
  uint64_t v4;

  result = sub_1CA0E9130(a1, &v4);
  *a2 = v4;
  return result;
}

uint64_t sub_1CA0E9924@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t result;
  uint64_t v4;

  result = sub_1CA0E9130(a1, &v4);
  *a2 = v4;
  return result;
}

KnowledgeGraphKit::ElementIdentifierTupleSet __swiftcall ElementIdentifierTupleSet.intersection(_:)(KnowledgeGraphKit::ElementIdentifierTupleSet a1)
{
  _QWORD *v1;

  return (KnowledgeGraphKit::ElementIdentifierTupleSet)sub_1CA0E9964((uint64_t *)a1.targetsBySource._rawValue, (uint64_t (*)(uint64_t *))ElementIdentifierTupleSet.formIntersection(_:), v1);
}

uint64_t sub_1CA0E9964@<X0>(uint64_t *a1@<X0>, uint64_t (*a2)(uint64_t *)@<X1>, _QWORD *a3@<X8>)
{
  _QWORD *v3;
  uint64_t v4;
  uint64_t v6;

  v4 = *a1;
  *a3 = *v3;
  v6 = v4;
  return a2(&v6);
}

Swift::Void __swiftcall ElementIdentifierTupleSet.formIntersection(_:)(KnowledgeGraphKit::ElementIdentifierTupleSet a1)
{
  uint64_t *v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;
  id v7;
  uint64_t v8;
  uint64_t v9;
  id i;
  uint64_t v11;
  unint64_t v12;
  char v13;
  uint64_t v14;
  id v15;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v17;
  char v18;
  unint64_t v19;
  uint64_t v20;
  _BOOL8 v21;
  uint64_t v22;
  char v23;
  unint64_t v24;
  char v25;
  _QWORD *v26;
  uint64_t v27;
  id v28;
  id v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  BOOL v33;
  uint64_t v34;
  id v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t v38;
  char v39;
  unint64_t v40;
  char v41;
  unint64_t v42;
  int v43;
  uint64_t v44;
  uint64_t v45;
  id v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49[4];

  v2 = v1;
  v3 = *(_QWORD *)a1.targetsBySource._rawValue;
  if (*(_QWORD *)(*(_QWORD *)a1.targetsBySource._rawValue + 16) >= *(_QWORD *)(*v1 + 16))
  {
    v4 = swift_bridgeObjectRetain();
    sub_1CA0ADC38(v4, v49);
    v5 = v49[0];
    v6 = *(void **)(v49[0] + 16);
    swift_retain();
    v7 = objc_msgSend(v6, sel_startIndex);
    v9 = v8;
    if (v7 == objc_msgSend(*(id *)(v5 + 16), sel_endIndex))
    {
LABEL_4:
      swift_release_n();
    }
    else
    {
      for (i = objc_msgSend(*(id *)(v5 + 16), sel_indexAfterIndex_, v7, v9, MEMORY[0x1E0DEE9B8] + 8);
            ;
            i = objc_msgSend(*(id *)(v5 + 16), sel_indexAfterIndex_, v46, v47, v45))
      {
        v46 = i;
        v47 = v11;
        if (*(_QWORD *)(v3 + 16) && (v12 = sub_1CA0AA4D8((uint64_t)v7), (v13 & 1) != 0))
        {
          v14 = *(_QWORD *)(*(_QWORD *)(v3 + 56) + 8 * v12);
          swift_retain();
        }
        else
        {
          v15 = objc_msgSend(objc_allocWithZone((Class)KGMutableElementIdentifierSet), sel_init);
          __swift_instantiateConcreteTypeFromMangledName(&qword_1ED852AF0);
          v14 = swift_allocObject();
          *(_QWORD *)(v14 + 16) = v15;
        }
        isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
        v49[0] = *v2;
        v17 = v49[0];
        *v2 = 0x8000000000000000;
        v19 = sub_1CA0AA4D8((uint64_t)v7);
        v20 = *(_QWORD *)(v17 + 16);
        v21 = (v18 & 1) == 0;
        v22 = v20 + v21;
        if (__OFADD__(v20, v21))
          break;
        v23 = v18;
        if (*(_QWORD *)(v17 + 24) >= v22)
        {
          if ((isUniquelyReferenced_nonNull_native & 1) == 0)
          {
            sub_1CA0EF024();
            v17 = v49[0];
          }
        }
        else
        {
          sub_1CA0EAC60(v22, isUniquelyReferenced_nonNull_native);
          v17 = v49[0];
          v24 = sub_1CA0AA4D8((uint64_t)v7);
          if ((v23 & 1) != (v25 & 1))
            goto LABEL_35;
          v19 = v24;
        }
        *v2 = v17;
        swift_bridgeObjectRelease();
        v26 = (_QWORD *)*v2;
        if ((v23 & 1) != 0)
        {
          v27 = v26[7];
        }
        else
        {
          v28 = objc_allocWithZone((Class)KGMutableElementIdentifierSet);
          swift_bridgeObjectRetain();
          v29 = objc_msgSend(v28, sel_init);
          __swift_instantiateConcreteTypeFromMangledName(&qword_1ED852AF0);
          v30 = swift_allocObject();
          *(_QWORD *)(v30 + 16) = v29;
          v26[(v19 >> 6) + 8] |= 1 << v19;
          v31 = 8 * v19;
          *(_QWORD *)(v26[6] + v31) = v7;
          *(_QWORD *)(v26[7] + v31) = v30;
          v32 = v26[2];
          v33 = __OFADD__(v32, 1);
          v34 = v32 + 1;
          if (v33)
            goto LABEL_34;
          v26[2] = v34;
          v27 = v26[7];
          swift_bridgeObjectRelease();
        }
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        {
          v35 = *(id *)(*(_QWORD *)(v27 + 8 * v19) + 16);
          objc_msgSend(v35, sel_mutableCopy);
          sub_1CA1F0F04();
          swift_unknownObjectRelease();
          sub_1CA0D0350();
          swift_dynamicCast();

          __swift_instantiateConcreteTypeFromMangledName(&qword_1ED852AF0);
          v36 = swift_allocObject();
          *(_QWORD *)(v36 + 16) = v48;
          *(_QWORD *)(v27 + 8 * v19) = v36;
          swift_release();
        }
        objc_msgSend(*(id *)(*(_QWORD *)(v27 + 8 * v19) + 16), sel_intersectWithIdentifierSet_, *(_QWORD *)(v14 + 16));
        swift_release();
        v37 = *v2;
        if (!*(_QWORD *)(*v2 + 16))
          goto LABEL_32;
        v38 = sub_1CA0AA4D8((uint64_t)v7);
        if ((v39 & 1) == 0)
          goto LABEL_33;
        if ((objc_msgSend(*(id *)(*(_QWORD *)(*(_QWORD *)(v37 + 56) + 8 * v38) + 16), sel_isEmpty) & 1) != 0)
        {
          v40 = sub_1CA0AA4D8((uint64_t)v7);
          if ((v41 & 1) != 0)
          {
            v42 = v40;
            v43 = swift_isUniquelyReferenced_nonNull_native();
            v44 = *v2;
            v49[0] = *v2;
            *v2 = 0x8000000000000000;
            if (!v43)
            {
              sub_1CA0EF024();
              v44 = v49[0];
            }
            sub_1CA0F18F4(v42, v44);
            *v2 = v44;
            swift_release();
            swift_bridgeObjectRelease();
          }
        }
        v7 = v46;
        if (v46 == objc_msgSend(*(id *)(v5 + 16), sel_endIndex))
          goto LABEL_4;
      }
      __break(1u);
LABEL_32:
      __break(1u);
LABEL_33:
      __break(1u);
LABEL_34:
      __break(1u);
LABEL_35:
      sub_1CA1F1360();
      __break(1u);
    }
  }
  else
  {
    v48 = *v1;
    v49[0] = v3;
    swift_bridgeObjectRetain();
    ElementIdentifierTupleSet.formIntersection(_:)((KnowledgeGraphKit::ElementIdentifierTupleSet)&v48);
    swift_bridgeObjectRelease();
    *v1 = v49[0];
  }
}

uint64_t ElementIdentifierTupleSet.symmetricDifference(_:)@<X0>(uint64_t *a1@<X0>, _QWORD *a2@<X8>)
{
  return sub_1CA0E9964(a1, ElementIdentifierTupleSet.formSymmetricDifference(_:), a2);
}

uint64_t ElementIdentifierTupleSet.formSymmetricDifference(_:)(uint64_t *a1)
{
  return sub_1CA0E9E28(a1, (uint64_t (*)(uint64_t *))ElementIdentifierTupleSet.formSymmetricDifference(_:), (SEL *)&selRef_formSymmetricDifferenceWithIdentifierSet_);
}

uint64_t sub_1CA0E9E28(uint64_t *a1, uint64_t (*a2)(uint64_t *), SEL *a3)
{
  uint64_t *v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t result;
  int64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  int64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char isUniquelyReferenced_nonNull_native;
  _QWORD *v21;
  char v22;
  unint64_t v23;
  uint64_t v24;
  _BOOL8 v25;
  uint64_t v26;
  char v27;
  unint64_t v28;
  char v29;
  _QWORD *v30;
  uint64_t v31;
  id v32;
  id v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  BOOL v37;
  uint64_t v38;
  id v39;
  uint64_t v40;
  uint64_t v41;
  unint64_t v42;
  char v43;
  unint64_t v44;
  char v45;
  unint64_t v46;
  char v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  int64_t v51;
  uint64_t v52;
  int64_t v53;
  uint64_t v54;
  _QWORD *v55;

  v4 = v3;
  v5 = *a1;
  if (*(_QWORD *)(*v3 + 16) >= *(_QWORD *)(*a1 + 16))
  {
    v8 = 0;
    v50 = v5 + 64;
    v9 = 1 << *(_BYTE *)(v5 + 32);
    v10 = -1;
    if (v9 < 64)
      v10 = ~(-1 << v9);
    v11 = v10 & *(_QWORD *)(v5 + 64);
    v51 = (unint64_t)(v9 + 63) >> 6;
    v49 = MEMORY[0x1E0DEE9B8] + 8;
    while (1)
    {
      if (v11)
      {
        v52 = (v11 - 1) & v11;
        v53 = v8;
        v12 = __clz(__rbit64(v11)) | (v8 << 6);
      }
      else
      {
        v13 = v8 + 1;
        if (__OFADD__(v8, 1))
          goto LABEL_48;
        if (v13 >= v51)
          return swift_release();
        v14 = *(_QWORD *)(v50 + 8 * v13);
        v15 = v8 + 1;
        if (!v14)
        {
          v15 = v8 + 2;
          if (v8 + 2 >= v51)
            return swift_release();
          v14 = *(_QWORD *)(v50 + 8 * v15);
          if (!v14)
          {
            v15 = v8 + 3;
            if (v8 + 3 >= v51)
              return swift_release();
            v14 = *(_QWORD *)(v50 + 8 * v15);
            if (!v14)
            {
              v16 = v8 + 4;
              if (v8 + 4 >= v51)
                return swift_release();
              v14 = *(_QWORD *)(v50 + 8 * v16);
              if (!v14)
              {
                while (1)
                {
                  v15 = v16 + 1;
                  if (__OFADD__(v16, 1))
                    goto LABEL_49;
                  if (v15 >= v51)
                    return swift_release();
                  v14 = *(_QWORD *)(v50 + 8 * v15);
                  ++v16;
                  if (v14)
                    goto LABEL_23;
                }
              }
              v15 = v8 + 4;
            }
          }
        }
LABEL_23:
        v52 = (v14 - 1) & v14;
        v53 = v15;
        v12 = __clz(__rbit64(v14)) + (v15 << 6);
      }
      v17 = 8 * v12;
      v18 = *(_QWORD *)(*(_QWORD *)(v5 + 48) + v17);
      v19 = *(_QWORD *)(*(_QWORD *)(v5 + 56) + v17);
      swift_retain_n();
      isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      v55 = (_QWORD *)*v4;
      v21 = v55;
      *v4 = 0x8000000000000000;
      v23 = sub_1CA0AA4D8(v18);
      v24 = v21[2];
      v25 = (v22 & 1) == 0;
      v26 = v24 + v25;
      if (__OFADD__(v24, v25))
        break;
      v27 = v22;
      if (v21[3] >= v26)
      {
        if ((isUniquelyReferenced_nonNull_native & 1) == 0)
        {
          sub_1CA0EF024();
          v21 = v55;
        }
      }
      else
      {
        sub_1CA0EAC60(v26, isUniquelyReferenced_nonNull_native);
        v21 = v55;
        v28 = sub_1CA0AA4D8(v18);
        if ((v27 & 1) != (v29 & 1))
          goto LABEL_50;
        v23 = v28;
      }
      *v4 = (uint64_t)v21;
      swift_bridgeObjectRelease();
      v30 = (_QWORD *)*v4;
      if ((v27 & 1) != 0)
      {
        v31 = v30[7];
      }
      else
      {
        v32 = objc_allocWithZone((Class)KGMutableElementIdentifierSet);
        swift_bridgeObjectRetain();
        v33 = objc_msgSend(v32, sel_init);
        __swift_instantiateConcreteTypeFromMangledName(&qword_1ED852AF0);
        v34 = swift_allocObject();
        *(_QWORD *)(v34 + 16) = v33;
        v30[(v23 >> 6) + 8] |= 1 << v23;
        v35 = 8 * v23;
        *(_QWORD *)(v30[6] + v35) = v18;
        *(_QWORD *)(v30[7] + v35) = v34;
        v36 = v30[2];
        v37 = __OFADD__(v36, 1);
        v38 = v36 + 1;
        if (v37)
          goto LABEL_47;
        v30[2] = v38;
        v31 = v30[7];
        swift_bridgeObjectRelease();
      }
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        v39 = *(id *)(*(_QWORD *)(v31 + 8 * v23) + 16);
        objc_msgSend(v39, sel_mutableCopy);
        sub_1CA1F0F04();
        swift_unknownObjectRelease();
        sub_1CA0D0350();
        swift_dynamicCast();

        __swift_instantiateConcreteTypeFromMangledName(&qword_1ED852AF0);
        v40 = swift_allocObject();
        *(_QWORD *)(v40 + 16) = v54;
        *(_QWORD *)(v31 + 8 * v23) = v40;
        swift_release();
      }
      objc_msgSend(*(id *)(*(_QWORD *)(v31 + 8 * v23) + 16), *a3, *(_QWORD *)(v19 + 16), v49);
      swift_release();
      v41 = *v4;
      if (!*(_QWORD *)(*v4 + 16))
        goto LABEL_45;
      v42 = sub_1CA0AA4D8(v18);
      if ((v43 & 1) == 0)
        goto LABEL_46;
      if (objc_msgSend(*(id *)(*(_QWORD *)(*(_QWORD *)(v41 + 56) + 8 * v42) + 16), sel_isEmpty)
        && (v44 = sub_1CA0AA4D8(v18), (v45 & 1) != 0))
      {
        v46 = v44;
        v47 = swift_isUniquelyReferenced_nonNull_native();
        v48 = *v4;
        v55 = (_QWORD *)*v4;
        *v4 = 0x8000000000000000;
        if ((v47 & 1) == 0)
        {
          sub_1CA0EF024();
          v48 = (uint64_t)v55;
        }
        sub_1CA0F18F4(v46, v48);
        *v4 = v48;
        swift_release();
        swift_release();
        swift_bridgeObjectRelease();
      }
      else
      {
        swift_release();
      }
      v11 = v52;
      v8 = v53;
    }
    __break(1u);
LABEL_45:
    __break(1u);
LABEL_46:
    __break(1u);
LABEL_47:
    __break(1u);
LABEL_48:
    __break(1u);
LABEL_49:
    __break(1u);
LABEL_50:
    result = sub_1CA1F1360();
    __break(1u);
  }
  else
  {
    v54 = *v3;
    v55 = (_QWORD *)v5;
    result = a2(&v54);
    *v3 = (uint64_t)v55;
  }
  return result;
}

unint64_t ElementIdentifierTupleSet.update(with:)@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t *v3;
  uint64_t v4;
  uint64_t *v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  char v11;
  unsigned int v12;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v14;
  char v15;
  unint64_t v16;
  uint64_t v17;
  _BOOL8 v18;
  uint64_t v19;
  unint64_t v20;
  char v21;
  _QWORD *v22;
  id v23;
  id v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  BOOL v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  char v32;
  unint64_t result;
  char v34;
  char v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  _QWORD *v41;

  v5 = v3;
  v7 = *a1;
  v8 = *a2;
  v9 = *v3;
  if (*(_QWORD *)(v9 + 16) && (v10 = sub_1CA0AA4D8(*a1), (v11 & 1) != 0))
    v12 = objc_msgSend(*(id *)(*(_QWORD *)(*(_QWORD *)(v9 + 56) + 8 * v10) + 16), sel_containsIdentifier_, v8);
  else
    v12 = 0;
  v40 = v8;
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  v41 = (_QWORD *)*v5;
  v14 = (uint64_t)v41;
  *v5 = 0x8000000000000000;
  v16 = sub_1CA0AA4D8(v7);
  v17 = *(_QWORD *)(v14 + 16);
  v18 = (v15 & 1) == 0;
  v19 = v17 + v18;
  if (__OFADD__(v17, v18))
  {
    __break(1u);
    goto LABEL_28;
  }
  LOBYTE(v4) = v15;
  if (*(_QWORD *)(v14 + 24) < v19)
  {
    sub_1CA0EAC60(v19, isUniquelyReferenced_nonNull_native);
    v14 = (uint64_t)v41;
    v20 = sub_1CA0AA4D8(v7);
    if ((v4 & 1) == (v21 & 1))
    {
      v16 = v20;
      goto LABEL_10;
    }
    result = sub_1CA1F1360();
    __break(1u);
    return result;
  }
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
    goto LABEL_30;
  while (1)
  {
LABEL_10:
    *v5 = v14;
    swift_bridgeObjectRelease();
    v22 = (_QWORD *)*v5;
    if ((v4 & 1) != 0)
    {
      swift_bridgeObjectRetain();
    }
    else
    {
      v23 = objc_allocWithZone((Class)KGMutableElementIdentifierSet);
      swift_bridgeObjectRetain();
      v24 = objc_msgSend(v23, sel_init);
      __swift_instantiateConcreteTypeFromMangledName(&qword_1ED852AF0);
      v25 = swift_allocObject();
      *(_QWORD *)(v25 + 16) = v24;
      v22[(v16 >> 6) + 8] |= 1 << v16;
      v26 = 8 * v16;
      *(_QWORD *)(v22[6] + v26) = v7;
      *(_QWORD *)(v22[7] + v26) = v25;
      v27 = v22[2];
      v28 = __OFADD__(v27, 1);
      v29 = v27 + 1;
      if (v28)
      {
        __break(1u);
        goto LABEL_32;
      }
      v22[2] = v29;
    }
    v4 = v22[7];
    swift_bridgeObjectRelease();
    ElementIdentifierSet.insert(_:)((uint64_t *)&v41, &v40);
    v30 = *v5;
    if (!*(_QWORD *)(*v5 + 16))
    {
LABEL_28:
      __break(1u);
      goto LABEL_29;
    }
    v31 = sub_1CA0AA4D8(v7);
    if ((v32 & 1) != 0)
      break;
LABEL_29:
    __break(1u);
LABEL_30:
    sub_1CA0EF024();
    v14 = (uint64_t)v41;
  }
  result = (unint64_t)objc_msgSend(*(id *)(*(_QWORD *)(*(_QWORD *)(v30 + 56) + 8 * v31) + 16), sel_isEmpty);
  if ((result & 1) != 0)
  {
    result = sub_1CA0AA4D8(v7);
    if ((v34 & 1) != 0)
    {
      v16 = result;
      v35 = swift_isUniquelyReferenced_nonNull_native();
      v36 = *v5;
      v39 = *v5;
      *v5 = 0x8000000000000000;
      if ((v35 & 1) != 0)
      {
LABEL_19:
        sub_1CA0F18F4(v16, v36);
        *v5 = v36;
        swift_release();
        result = swift_bridgeObjectRelease();
        goto LABEL_20;
      }
LABEL_32:
      sub_1CA0EF024();
      v36 = v39;
      goto LABEL_19;
    }
  }
LABEL_20:
  if (v12)
    v37 = 0;
  else
    v37 = v7;
  if (v12)
    v38 = 0;
  else
    v38 = v8;
  *(_QWORD *)a3 = v37;
  *(_QWORD *)(a3 + 8) = v38;
  *(_BYTE *)(a3 + 16) = v12;
  return result;
}

Swift::Bool __swiftcall ElementIdentifierTupleSet.intersects(_:)(KnowledgeGraphKit::ElementIdentifierTupleSet a1)
{
  uint64_t *v1;
  unint64_t v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  int64_t v10;
  Swift::Bool result;
  int64_t v12;
  id v13;
  id v14;
  unsigned __int8 v15;
  unint64_t v16;
  unint64_t v17;
  int64_t v18;
  unint64_t v19;
  int64_t v20;
  uint64_t v21;
  unint64_t v22;
  char v23;
  Swift::Bool v24;

  v2 = *(_QWORD *)(*v1 + 16);
  v3 = *(_QWORD *)(*(_QWORD *)a1.targetsBySource._rawValue + 16);
  if (v2 >= v3)
    v4 = *(_QWORD *)a1.targetsBySource._rawValue;
  else
    v4 = *v1;
  if (v2 >= v3)
    v5 = *v1;
  else
    v5 = *(_QWORD *)a1.targetsBySource._rawValue;
  swift_bridgeObjectRetain();
  v6 = v4 + 64;
  v7 = 1 << *(_BYTE *)(v4 + 32);
  v8 = -1;
  if (v7 < 64)
    v8 = ~(-1 << v7);
  v9 = v8 & *(_QWORD *)(v4 + 64);
  v10 = (unint64_t)(v7 + 63) >> 6;
  result = swift_bridgeObjectRetain();
  v12 = 0;
  while (1)
  {
    if (v9)
    {
      v16 = __clz(__rbit64(v9));
      v9 &= v9 - 1;
      v17 = v16 | (v12 << 6);
      goto LABEL_28;
    }
    v18 = v12 + 1;
    if (__OFADD__(v12, 1))
    {
      __break(1u);
      goto LABEL_35;
    }
    if (v18 >= v10)
      goto LABEL_32;
    v19 = *(_QWORD *)(v6 + 8 * v18);
    ++v12;
    if (!v19)
    {
      v12 = v18 + 1;
      if (v18 + 1 >= v10)
        goto LABEL_32;
      v19 = *(_QWORD *)(v6 + 8 * v12);
      if (!v19)
      {
        v12 = v18 + 2;
        if (v18 + 2 >= v10)
          goto LABEL_32;
        v19 = *(_QWORD *)(v6 + 8 * v12);
        if (!v19)
          break;
      }
    }
LABEL_27:
    v9 = (v19 - 1) & v19;
    v17 = __clz(__rbit64(v19)) + (v12 << 6);
LABEL_28:
    v21 = *(_QWORD *)(*(_QWORD *)(v4 + 56) + 8 * v17);
    if (*(_QWORD *)(v5 + 16) && (v22 = sub_1CA0AA4D8(*(_QWORD *)(*(_QWORD *)(v4 + 48) + 8 * v17)), (v23 & 1) != 0))
    {
      v14 = *(id *)(*(_QWORD *)(*(_QWORD *)(v5 + 56) + 8 * v22) + 16);
      swift_retain();
      swift_retain();
    }
    else
    {
      v13 = objc_allocWithZone((Class)KGMutableElementIdentifierSet);
      swift_retain();
      v14 = objc_msgSend(v13, sel_init);
      __swift_instantiateConcreteTypeFromMangledName(&qword_1ED852AF0);
      *(_QWORD *)(swift_allocObject() + 16) = v14;
    }
    v15 = objc_msgSend(v14, sel_intersectsIdentifierSet_, *(_QWORD *)(v21 + 16));
    swift_release();
    result = swift_release();
    if ((v15 & 1) != 0)
    {
      swift_bridgeObjectRelease();
      v24 = 1;
LABEL_33:
      swift_release();
      return v24;
    }
  }
  v20 = v18 + 3;
  if (v20 >= v10)
  {
LABEL_32:
    swift_bridgeObjectRelease();
    v24 = 0;
    goto LABEL_33;
  }
  v19 = *(_QWORD *)(v6 + 8 * v20);
  if (v19)
  {
    v12 = v20;
    goto LABEL_27;
  }
  while (1)
  {
    v12 = v20 + 1;
    if (__OFADD__(v20, 1))
      break;
    if (v12 >= v10)
      goto LABEL_32;
    v19 = *(_QWORD *)(v6 + 8 * v12);
    ++v20;
    if (v19)
      goto LABEL_27;
  }
LABEL_35:
  __break(1u);
  return result;
}

Swift::Bool __swiftcall ElementIdentifierTupleSet.isDisjoint(with:)(KnowledgeGraphKit::ElementIdentifierTupleSet with)
{
  uint64_t *v1;
  uint64_t v2;
  _QWORD v4[2];

  v2 = *v1;
  v4[0] = *(_QWORD *)with.targetsBySource._rawValue;
  v4[1] = v2;
  return !ElementIdentifierTupleSet.intersects(_:)((KnowledgeGraphKit::ElementIdentifierTupleSet)v4);
}

unint64_t sub_1CA0EA800@<X0>(unint64_t *a1@<X8>)
{
  unint64_t result;

  result = sub_1CA0AECA8(MEMORY[0x1E0DEE9D8]);
  *a1 = result;
  return result;
}

BOOL sub_1CA0EA82C(uint64_t a1)
{
  uint64_t v1;

  v1 = a1 + 8;
  return ElementIdentifierTupleSet.contains(_:)(*(Swift::tuple_KnowledgeGraphKit_ElementIdentifier_KnowledgeGraphKit_ElementIdentifier *)&a1);
}

uint64_t sub_1CA0EA834@<X0>(uint64_t *a1@<X0>, _QWORD *a2@<X8>)
{
  return sub_1CA0EA84C(a1, ElementIdentifierTupleSet.formUnion(_:), a2);
}

uint64_t sub_1CA0EA840@<X0>(uint64_t *a1@<X0>, _QWORD *a2@<X8>)
{
  return sub_1CA0EA84C(a1, (uint64_t (*)(uint64_t *))ElementIdentifierTupleSet.formIntersection(_:), a2);
}

uint64_t sub_1CA0EA84C@<X0>(uint64_t *a1@<X0>, uint64_t (*a2)(uint64_t *)@<X3>, _QWORD *a3@<X8>)
{
  _QWORD *v3;
  uint64_t v4;
  uint64_t v6;

  v4 = *a1;
  *a3 = *v3;
  v6 = v4;
  return a2(&v6);
}

uint64_t sub_1CA0EA888@<X0>(uint64_t *a1@<X0>, _QWORD *a2@<X8>)
{
  return sub_1CA0EA84C(a1, ElementIdentifierTupleSet.formSymmetricDifference(_:), a2);
}

uint64_t sub_1CA0EA894(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;

  v2 = *a2;
  v4 = a2[1];
  v5 = v2;
  return ElementIdentifierTupleSet.insert(_:)(a1, a1 + 1, &v5, &v4) & 1;
}

unint64_t sub_1CA0EA8C8(uint64_t a1)
{
  uint64_t v1;

  v1 = a1 + 8;
  return (unint64_t)ElementIdentifierTupleSet.remove(_:)(*(Swift::tuple_KnowledgeGraphKit_ElementIdentifier_KnowledgeGraphKit_ElementIdentifier *)&a1);
}

unint64_t sub_1CA0EA8D0@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;

  v2 = *a1;
  v4 = a1[1];
  v5 = v2;
  return ElementIdentifierTupleSet.update(with:)(&v5, &v4, a2);
}

uint64_t sub_1CA0EA908@<X0>(uint64_t *a1@<X0>, _QWORD *a2@<X8>)
{
  return sub_1CA0EA84C(a1, (uint64_t (*)(uint64_t *))ElementIdentifierTupleSet.subtract(_:), a2);
}

uint64_t sub_1CA0EA914(uint64_t *a1)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;

  v2 = *v1;
  v4 = *a1;
  v5 = v2;
  swift_bridgeObjectRetain();
  ElementIdentifierTupleSet.formIntersection(_:)((KnowledgeGraphKit::ElementIdentifierTupleSet)&v4);
  LOBYTE(v2) = sub_1CA0E8E5C(v5, v2);
  swift_bridgeObjectRelease();
  return v2 & 1;
}

BOOL sub_1CA0EA974(_QWORD *a1)
{
  uint64_t *v1;
  uint64_t v2;
  _QWORD v4[2];

  v2 = *v1;
  v4[0] = *a1;
  v4[1] = v2;
  return !ElementIdentifierTupleSet.intersects(_:)((KnowledgeGraphKit::ElementIdentifierTupleSet)v4);
}

uint64_t sub_1CA0EA9B4(uint64_t *a1)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;

  v2 = *a1;
  v4 = *v1;
  v5 = v2;
  swift_bridgeObjectRetain();
  ElementIdentifierTupleSet.formIntersection(_:)((KnowledgeGraphKit::ElementIdentifierTupleSet)&v4);
  LOBYTE(v2) = sub_1CA0E8E5C(v5, v2);
  swift_bridgeObjectRelease();
  return v2 & 1;
}

uint64_t sub_1CA0EAA14()
{
  uint64_t *v0;
  uint64_t v1;
  unint64_t v2;

  v1 = *v0;
  v2 = sub_1CA0AECA8(MEMORY[0x1E0DEE9D8]);
  LOBYTE(v1) = sub_1CA0E8E5C(v1, v2);
  swift_bridgeObjectRelease();
  return v1 & 1;
}

uint64_t sub_1CA0EAA64()
{
  sub_1CA0BD114();
  return sub_1CA1F08E0();
}

uint64_t ElementIdentifierTupleSet.sparseMatrix<A>(of:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, _QWORD *a5@<X8>)
{
  uint64_t *v5;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD v21[9];
  uint64_t v22;

  v11 = *v5;
  v12 = swift_bridgeObjectRetain();
  sub_1CA0ADC38(v12, &v22);
  v13 = sub_1CA0F2420((uint64_t)objc_msgSend(*(id *)(v22 + 16), sel_count), v22);
  swift_release();
  v14 = swift_bridgeObjectRetain();
  sub_1CA0ADC38(v14, &v22);
  v21[2] = a2;
  v21[3] = a3;
  v21[4] = a4;
  v21[5] = v11;
  v21[6] = a1;
  v16 = type metadata accessor for SparseArray(0, a2, a3, v15);
  v17 = sub_1CA0F25AC();
  v19 = sub_1CA0E3CE8((void (*)(char *, char *))sub_1CA0F2588, (uint64_t)v21, (uint64_t)&type metadata for ElementIdentifierSet, v16, MEMORY[0x1E0DEDCE8], v17, MEMORY[0x1E0DEDD18], v18);
  swift_release();
  MEMORY[0x1CAA4BB30](&protocol conformance descriptor for SparseArray<A>, v16);
  return SparseArray.init(values:offsets:)(v19, v13, v16, a5);
}

uint64_t *sub_1CA0EABCC@<X0>(uint64_t *result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, _QWORD *a6@<X8>)
{
  char v10;

  if (*(_QWORD *)(a2 + 16))
  {
    result = (uint64_t *)sub_1CA0AA4D8(*result);
    if ((v10 & 1) != 0)
      return (uint64_t *)ElementIdentifierSet.sparseArray<A>(of:)(a3, a4, a5, a6);
  }
  else
  {
    __break(1u);
  }
  __break(1u);
  return result;
}

uint64_t sub_1CA0EAC60(uint64_t a1, char a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t result;
  uint64_t v7;
  int64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  int64_t v20;
  unint64_t v21;
  int64_t v22;
  char v23;
  unint64_t v24;
  BOOL v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  int64_t v31;
  _QWORD *v32;

  v3 = v2;
  v5 = *v2;
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_1ED852B30);
  result = sub_1CA1F1258();
  v7 = result;
  if (*(_QWORD *)(v5 + 16))
  {
    v8 = 0;
    v32 = (_QWORD *)(v5 + 64);
    v9 = 1 << *(_BYTE *)(v5 + 32);
    if (v9 < 64)
      v10 = ~(-1 << v9);
    else
      v10 = -1;
    v11 = v10 & *(_QWORD *)(v5 + 64);
    v31 = (unint64_t)(v9 + 63) >> 6;
    v12 = result + 64;
    while (1)
    {
      if (v11)
      {
        v18 = __clz(__rbit64(v11));
        v11 &= v11 - 1;
        v19 = v18 | (v8 << 6);
      }
      else
      {
        v20 = v8 + 1;
        if (__OFADD__(v8, 1))
        {
LABEL_41:
          __break(1u);
LABEL_42:
          __break(1u);
          return result;
        }
        result = v5 + 64;
        if (v20 >= v31)
          goto LABEL_33;
        v21 = v32[v20];
        ++v8;
        if (!v21)
        {
          v8 = v20 + 1;
          if (v20 + 1 >= v31)
            goto LABEL_33;
          v21 = v32[v8];
          if (!v21)
          {
            v22 = v20 + 2;
            if (v22 >= v31)
            {
LABEL_33:
              if ((a2 & 1) == 0)
              {
                result = swift_release();
                v3 = v2;
                goto LABEL_40;
              }
              v30 = 1 << *(_BYTE *)(v5 + 32);
              if (v30 >= 64)
                bzero(v32, ((unint64_t)(v30 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
              else
                *v32 = -1 << v30;
              v3 = v2;
              *(_QWORD *)(v5 + 16) = 0;
              break;
            }
            v21 = v32[v22];
            if (!v21)
            {
              while (1)
              {
                v8 = v22 + 1;
                if (__OFADD__(v22, 1))
                  goto LABEL_42;
                if (v8 >= v31)
                  goto LABEL_33;
                v21 = v32[v8];
                ++v22;
                if (v21)
                  goto LABEL_30;
              }
            }
            v8 = v22;
          }
        }
LABEL_30:
        v11 = (v21 - 1) & v21;
        v19 = __clz(__rbit64(v21)) + (v8 << 6);
      }
      v27 = 8 * v19;
      v28 = *(_QWORD *)(*(_QWORD *)(v5 + 48) + v27);
      v29 = *(_QWORD *)(*(_QWORD *)(v5 + 56) + v27);
      if ((a2 & 1) == 0)
        swift_retain();
      sub_1CA1F13F0();
      sub_1CA1F13FC();
      result = sub_1CA1F1438();
      v13 = -1 << *(_BYTE *)(v7 + 32);
      v14 = result & ~v13;
      v15 = v14 >> 6;
      if (((-1 << v14) & ~*(_QWORD *)(v12 + 8 * (v14 >> 6))) != 0)
      {
        v16 = __clz(__rbit64((-1 << v14) & ~*(_QWORD *)(v12 + 8 * (v14 >> 6)))) | v14 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        v23 = 0;
        v24 = (unint64_t)(63 - v13) >> 6;
        do
        {
          if (++v15 == v24 && (v23 & 1) != 0)
          {
            __break(1u);
            goto LABEL_41;
          }
          v25 = v15 == v24;
          if (v15 == v24)
            v15 = 0;
          v23 |= v25;
          v26 = *(_QWORD *)(v12 + 8 * v15);
        }
        while (v26 == -1);
        v16 = __clz(__rbit64(~v26)) + (v15 << 6);
      }
      *(_QWORD *)(v12 + ((v16 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v16;
      v17 = 8 * v16;
      *(_QWORD *)(*(_QWORD *)(v7 + 48) + v17) = v28;
      *(_QWORD *)(*(_QWORD *)(v7 + 56) + v17) = v29;
      ++*(_QWORD *)(v7 + 16);
    }
  }
  result = swift_release();
LABEL_40:
  *v3 = v7;
  return result;
}

uint64_t sub_1CA0EAF38(uint64_t a1, char a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t result;
  uint64_t v7;
  int64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  int64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  int64_t v18;
  unint64_t v19;
  int64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  unint64_t v26;
  char v27;
  unint64_t v28;
  BOOL v29;
  uint64_t v30;
  uint64_t v31;
  char v32;
  _QWORD *v33;

  v3 = v2;
  v5 = *v2;
  __swift_instantiateConcreteTypeFromMangledName(qword_1ED852A68);
  result = sub_1CA1F1258();
  v7 = result;
  if (*(_QWORD *)(v5 + 16))
  {
    v32 = a2;
    v8 = 0;
    v33 = (_QWORD *)(v5 + 64);
    v9 = 1 << *(_BYTE *)(v5 + 32);
    if (v9 < 64)
      v10 = ~(-1 << v9);
    else
      v10 = -1;
    v11 = v10 & *(_QWORD *)(v5 + 64);
    v12 = (unint64_t)(v9 + 63) >> 6;
    v13 = result + 64;
    while (1)
    {
      if (v11)
      {
        v16 = __clz(__rbit64(v11));
        v11 &= v11 - 1;
        v17 = v16 | (v8 << 6);
      }
      else
      {
        v18 = v8 + 1;
        if (__OFADD__(v8, 1))
        {
LABEL_39:
          __break(1u);
LABEL_40:
          __break(1u);
          return result;
        }
        result = v5 + 64;
        if (v18 >= v12)
          goto LABEL_31;
        v19 = v33[v18];
        ++v8;
        if (!v19)
        {
          v8 = v18 + 1;
          if (v18 + 1 >= v12)
            goto LABEL_31;
          v19 = v33[v8];
          if (!v19)
          {
            v20 = v18 + 2;
            if (v20 >= v12)
            {
LABEL_31:
              if ((v32 & 1) == 0)
              {
                result = swift_release();
                v3 = v2;
                goto LABEL_38;
              }
              v31 = 1 << *(_BYTE *)(v5 + 32);
              if (v31 >= 64)
                bzero(v33, ((unint64_t)(v31 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
              else
                *v33 = -1 << v31;
              v3 = v2;
              *(_QWORD *)(v5 + 16) = 0;
              break;
            }
            v19 = v33[v20];
            if (!v19)
            {
              while (1)
              {
                v8 = v20 + 1;
                if (__OFADD__(v20, 1))
                  goto LABEL_40;
                if (v8 >= v12)
                  goto LABEL_31;
                v19 = v33[v8];
                ++v20;
                if (v19)
                  goto LABEL_21;
              }
            }
            v8 = v20;
          }
        }
LABEL_21:
        v11 = (v19 - 1) & v19;
        v17 = __clz(__rbit64(v19)) + (v8 << 6);
      }
      v21 = 8 * v17;
      v22 = *(_QWORD *)(*(_QWORD *)(v5 + 48) + v21);
      v23 = *(_QWORD *)(*(_QWORD *)(v5 + 56) + v21);
      sub_1CA1F13F0();
      sub_1CA1F13FC();
      result = sub_1CA1F1438();
      v24 = -1 << *(_BYTE *)(v7 + 32);
      v25 = result & ~v24;
      v26 = v25 >> 6;
      if (((-1 << v25) & ~*(_QWORD *)(v13 + 8 * (v25 >> 6))) != 0)
      {
        v14 = __clz(__rbit64((-1 << v25) & ~*(_QWORD *)(v13 + 8 * (v25 >> 6)))) | v25 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        v27 = 0;
        v28 = (unint64_t)(63 - v24) >> 6;
        do
        {
          if (++v26 == v28 && (v27 & 1) != 0)
          {
            __break(1u);
            goto LABEL_39;
          }
          v29 = v26 == v28;
          if (v26 == v28)
            v26 = 0;
          v27 |= v29;
          v30 = *(_QWORD *)(v13 + 8 * v26);
        }
        while (v30 == -1);
        v14 = __clz(__rbit64(~v30)) + (v26 << 6);
      }
      *(_QWORD *)(v13 + ((v14 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v14;
      v15 = 8 * v14;
      *(_QWORD *)(*(_QWORD *)(v7 + 48) + v15) = v22;
      *(_QWORD *)(*(_QWORD *)(v7 + 56) + v15) = v23;
      ++*(_QWORD *)(v7 + 16);
    }
  }
  result = swift_release();
LABEL_38:
  *v3 = v7;
  return result;
}

uint64_t sub_1CA0EB204(uint64_t a1, int a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t result;
  int64_t v18;
  unint64_t v19;
  _QWORD *v20;
  unint64_t v21;
  unint64_t v22;
  int64_t v23;
  unint64_t v24;
  int64_t v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t *v31;
  uint64_t v32;
  unint64_t v33;
  unint64_t v34;
  char v35;
  unint64_t v36;
  BOOL v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t *v40;
  int64_t v41;
  _QWORD *v42;
  uint64_t i;
  int v44;
  uint64_t v45;

  v3 = v2;
  v5 = sub_1CA1F0808();
  v45 = *(_QWORD *)(v5 - 8);
  MEMORY[0x1E0C80A78](v5, v6);
  v8 = (char *)&v40 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = *v2;
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EF9384A0);
  v44 = a2;
  v10 = sub_1CA1F1258();
  v11 = v10;
  if (*(_QWORD *)(v9 + 16))
  {
    v40 = v2;
    v12 = 1 << *(_BYTE *)(v9 + 32);
    v13 = *(_QWORD *)(v9 + 64);
    v42 = (_QWORD *)(v9 + 64);
    if (v12 < 64)
      v14 = ~(-1 << v12);
    else
      v14 = -1;
    v15 = v14 & v13;
    v41 = (unint64_t)(v12 + 63) >> 6;
    v16 = v10 + 64;
    result = swift_retain();
    v18 = 0;
    for (i = v9; ; v9 = i)
    {
      if (v15)
      {
        v21 = __clz(__rbit64(v15));
        v15 &= v15 - 1;
        v22 = v21 | (v18 << 6);
      }
      else
      {
        v23 = v18 + 1;
        if (__OFADD__(v18, 1))
        {
LABEL_40:
          __break(1u);
LABEL_41:
          __break(1u);
          return result;
        }
        if (v23 >= v41)
          goto LABEL_34;
        v24 = v42[v23];
        ++v18;
        if (!v24)
        {
          v18 = v23 + 1;
          if (v23 + 1 >= v41)
            goto LABEL_34;
          v24 = v42[v18];
          if (!v24)
          {
            v25 = v23 + 2;
            if (v25 >= v41)
            {
LABEL_34:
              swift_release();
              v3 = v40;
              if ((v44 & 1) != 0)
              {
                v39 = 1 << *(_BYTE *)(v9 + 32);
                if (v39 >= 64)
                  bzero(v42, ((unint64_t)(v39 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
                else
                  *v42 = -1 << v39;
                *(_QWORD *)(v9 + 16) = 0;
              }
              break;
            }
            v24 = v42[v25];
            if (!v24)
            {
              while (1)
              {
                v18 = v25 + 1;
                if (__OFADD__(v25, 1))
                  goto LABEL_41;
                if (v18 >= v41)
                  goto LABEL_34;
                v24 = v42[v18];
                ++v25;
                if (v24)
                  goto LABEL_21;
              }
            }
            v18 = v25;
          }
        }
LABEL_21:
        v15 = (v24 - 1) & v24;
        v22 = __clz(__rbit64(v24)) + (v18 << 6);
      }
      v26 = *(_QWORD *)(v45 + 72);
      v27 = *(_QWORD *)(v9 + 48) + v26 * v22;
      if ((v44 & 1) != 0)
      {
        (*(void (**)(char *, unint64_t, uint64_t))(v45 + 32))(v8, v27, v5);
        v28 = (uint64_t *)(*(_QWORD *)(v9 + 56) + 16 * v22);
        v29 = *v28;
        v30 = v28[1];
      }
      else
      {
        (*(void (**)(char *, unint64_t, uint64_t))(v45 + 16))(v8, v27, v5);
        v31 = (uint64_t *)(*(_QWORD *)(v9 + 56) + 16 * v22);
        v29 = *v31;
        v30 = v31[1];
        swift_retain();
      }
      sub_1CA0F2728();
      result = sub_1CA1F0958();
      v32 = -1 << *(_BYTE *)(v11 + 32);
      v33 = result & ~v32;
      v34 = v33 >> 6;
      if (((-1 << v33) & ~*(_QWORD *)(v16 + 8 * (v33 >> 6))) != 0)
      {
        v19 = __clz(__rbit64((-1 << v33) & ~*(_QWORD *)(v16 + 8 * (v33 >> 6)))) | v33 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        v35 = 0;
        v36 = (unint64_t)(63 - v32) >> 6;
        do
        {
          if (++v34 == v36 && (v35 & 1) != 0)
          {
            __break(1u);
            goto LABEL_40;
          }
          v37 = v34 == v36;
          if (v34 == v36)
            v34 = 0;
          v35 |= v37;
          v38 = *(_QWORD *)(v16 + 8 * v34);
        }
        while (v38 == -1);
        v19 = __clz(__rbit64(~v38)) + (v34 << 6);
      }
      *(_QWORD *)(v16 + ((v19 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v19;
      result = (*(uint64_t (**)(unint64_t, char *, uint64_t))(v45 + 32))(*(_QWORD *)(v11 + 48) + v26 * v19, v8, v5);
      v20 = (_QWORD *)(*(_QWORD *)(v11 + 56) + 16 * v19);
      *v20 = v29;
      v20[1] = v30;
      ++*(_QWORD *)(v11 + 16);
    }
  }
  result = swift_release();
  *v3 = v11;
  return result;
}

uint64_t sub_1CA0EB588(uint64_t a1, char a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  unint64_t v11;
  int64_t v12;
  uint64_t v13;
  uint64_t result;
  int64_t v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  int64_t v23;
  unint64_t v24;
  int64_t v25;
  char v26;
  unint64_t v27;
  BOOL v28;
  uint64_t v29;
  uint64_t v30;
  void *v31;
  uint64_t v32;
  id v33;
  uint64_t v34;
  uint64_t *v35;

  v3 = v2;
  v5 = *v2;
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EF93A330);
  v6 = sub_1CA1F1258();
  v7 = v6;
  if (*(_QWORD *)(v5 + 16))
  {
    v35 = v2;
    v8 = 1 << *(_BYTE *)(v5 + 32);
    v9 = (_QWORD *)(v5 + 64);
    if (v8 < 64)
      v10 = ~(-1 << v8);
    else
      v10 = -1;
    v11 = v10 & *(_QWORD *)(v5 + 64);
    v12 = (unint64_t)(v8 + 63) >> 6;
    v13 = v6 + 64;
    result = swift_retain();
    v15 = 0;
    while (1)
    {
      if (v11)
      {
        v21 = __clz(__rbit64(v11));
        v11 &= v11 - 1;
        v22 = v21 | (v15 << 6);
      }
      else
      {
        v23 = v15 + 1;
        if (__OFADD__(v15, 1))
        {
LABEL_41:
          __break(1u);
LABEL_42:
          __break(1u);
          return result;
        }
        if (v23 >= v12)
          goto LABEL_33;
        v24 = v9[v23];
        ++v15;
        if (!v24)
        {
          v15 = v23 + 1;
          if (v23 + 1 >= v12)
            goto LABEL_33;
          v24 = v9[v15];
          if (!v24)
          {
            v25 = v23 + 2;
            if (v25 >= v12)
            {
LABEL_33:
              swift_release();
              if ((a2 & 1) == 0)
              {
                result = swift_release();
                v3 = v35;
                goto LABEL_40;
              }
              v34 = 1 << *(_BYTE *)(v5 + 32);
              if (v34 >= 64)
                bzero((void *)(v5 + 64), ((unint64_t)(v34 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
              else
                *v9 = -1 << v34;
              v3 = v35;
              *(_QWORD *)(v5 + 16) = 0;
              break;
            }
            v24 = v9[v25];
            if (!v24)
            {
              while (1)
              {
                v15 = v25 + 1;
                if (__OFADD__(v25, 1))
                  goto LABEL_42;
                if (v15 >= v12)
                  goto LABEL_33;
                v24 = v9[v15];
                ++v25;
                if (v24)
                  goto LABEL_30;
              }
            }
            v15 = v25;
          }
        }
LABEL_30:
        v11 = (v24 - 1) & v24;
        v22 = __clz(__rbit64(v24)) + (v15 << 6);
      }
      v30 = 8 * v22;
      v31 = *(void **)(*(_QWORD *)(v5 + 48) + v30);
      v32 = *(_QWORD *)(*(_QWORD *)(v5 + 56) + v30);
      if ((a2 & 1) == 0)
        v33 = v31;
      result = sub_1CA1F0E5C();
      v16 = -1 << *(_BYTE *)(v7 + 32);
      v17 = result & ~v16;
      v18 = v17 >> 6;
      if (((-1 << v17) & ~*(_QWORD *)(v13 + 8 * (v17 >> 6))) != 0)
      {
        v19 = __clz(__rbit64((-1 << v17) & ~*(_QWORD *)(v13 + 8 * (v17 >> 6)))) | v17 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        v26 = 0;
        v27 = (unint64_t)(63 - v16) >> 6;
        do
        {
          if (++v18 == v27 && (v26 & 1) != 0)
          {
            __break(1u);
            goto LABEL_41;
          }
          v28 = v18 == v27;
          if (v18 == v27)
            v18 = 0;
          v26 |= v28;
          v29 = *(_QWORD *)(v13 + 8 * v18);
        }
        while (v29 == -1);
        v19 = __clz(__rbit64(~v29)) + (v18 << 6);
      }
      *(_QWORD *)(v13 + ((v19 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v19;
      v20 = 8 * v19;
      *(_QWORD *)(*(_QWORD *)(v7 + 48) + v20) = v31;
      *(_QWORD *)(*(_QWORD *)(v7 + 56) + v20) = v32;
      ++*(_QWORD *)(v7 + 16);
    }
  }
  result = swift_release();
LABEL_40:
  *v3 = v7;
  return result;
}

uint64_t sub_1CA0EB854(uint64_t a1, char a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  int64_t v11;
  uint64_t v12;
  uint64_t result;
  int64_t v14;
  unint64_t v15;
  uint64_t v16;
  __int128 v17;
  __int128 v18;
  unint64_t v19;
  unint64_t v20;
  int64_t v21;
  _QWORD *v22;
  unint64_t v23;
  int64_t v24;
  uint64_t v25;
  __int128 v26;
  __int128 v27;
  uint64_t v28;
  unint64_t v29;
  unint64_t v30;
  char v31;
  unint64_t v32;
  BOOL v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  _OWORD v37[2];
  __int128 v38;
  __int128 v39;
  uint64_t v40;

  v3 = v2;
  v5 = *v2;
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_1EF938460);
  v6 = sub_1CA1F1258();
  v7 = v6;
  if (!*(_QWORD *)(v5 + 16))
    goto LABEL_41;
  v8 = 1 << *(_BYTE *)(v5 + 32);
  v36 = v5 + 64;
  if (v8 < 64)
    v9 = ~(-1 << v8);
  else
    v9 = -1;
  v10 = v9 & *(_QWORD *)(v5 + 64);
  v11 = (unint64_t)(v8 + 63) >> 6;
  v12 = v6 + 64;
  result = swift_retain();
  v14 = 0;
  while (1)
  {
    if (v10)
    {
      v19 = __clz(__rbit64(v10));
      v10 &= v10 - 1;
      v20 = v19 | (v14 << 6);
      goto LABEL_22;
    }
    v21 = v14 + 1;
    if (__OFADD__(v14, 1))
    {
LABEL_42:
      __break(1u);
LABEL_43:
      __break(1u);
      return result;
    }
    if (v21 >= v11)
      break;
    v22 = (_QWORD *)(v5 + 64);
    v23 = *(_QWORD *)(v36 + 8 * v21);
    ++v14;
    if (!v23)
    {
      v14 = v21 + 1;
      if (v21 + 1 >= v11)
        goto LABEL_34;
      v23 = *(_QWORD *)(v36 + 8 * v14);
      if (!v23)
      {
        v24 = v21 + 2;
        if (v24 >= v11)
        {
LABEL_34:
          swift_release();
          if ((a2 & 1) == 0)
            goto LABEL_41;
          goto LABEL_37;
        }
        v23 = *(_QWORD *)(v36 + 8 * v24);
        if (!v23)
        {
          while (1)
          {
            v14 = v24 + 1;
            if (__OFADD__(v24, 1))
              goto LABEL_43;
            if (v14 >= v11)
              goto LABEL_34;
            v23 = *(_QWORD *)(v36 + 8 * v14);
            ++v24;
            if (v23)
              goto LABEL_21;
          }
        }
        v14 = v24;
      }
    }
LABEL_21:
    v10 = (v23 - 1) & v23;
    v20 = __clz(__rbit64(v23)) + (v14 << 6);
LABEL_22:
    v25 = *(_QWORD *)(v5 + 48) + 40 * v20;
    if ((a2 & 1) != 0)
    {
      v26 = *(_OWORD *)v25;
      v27 = *(_OWORD *)(v25 + 16);
      v40 = *(_QWORD *)(v25 + 32);
      v38 = v26;
      v39 = v27;
      sub_1CA0AFCC0((_OWORD *)(*(_QWORD *)(v5 + 56) + 32 * v20), v37);
    }
    else
    {
      sub_1CA0AB948(v25, (uint64_t)&v38);
      sub_1CA0B6A98(*(_QWORD *)(v5 + 56) + 32 * v20, (uint64_t)v37);
    }
    result = sub_1CA1F1000();
    v28 = -1 << *(_BYTE *)(v7 + 32);
    v29 = result & ~v28;
    v30 = v29 >> 6;
    if (((-1 << v29) & ~*(_QWORD *)(v12 + 8 * (v29 >> 6))) != 0)
    {
      v15 = __clz(__rbit64((-1 << v29) & ~*(_QWORD *)(v12 + 8 * (v29 >> 6)))) | v29 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v31 = 0;
      v32 = (unint64_t)(63 - v28) >> 6;
      do
      {
        if (++v30 == v32 && (v31 & 1) != 0)
        {
          __break(1u);
          goto LABEL_42;
        }
        v33 = v30 == v32;
        if (v30 == v32)
          v30 = 0;
        v31 |= v33;
        v34 = *(_QWORD *)(v12 + 8 * v30);
      }
      while (v34 == -1);
      v15 = __clz(__rbit64(~v34)) + (v30 << 6);
    }
    *(_QWORD *)(v12 + ((v15 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v15;
    v16 = *(_QWORD *)(v7 + 48) + 40 * v15;
    v17 = v38;
    v18 = v39;
    *(_QWORD *)(v16 + 32) = v40;
    *(_OWORD *)v16 = v17;
    *(_OWORD *)(v16 + 16) = v18;
    result = (uint64_t)sub_1CA0AFCC0(v37, (_OWORD *)(*(_QWORD *)(v7 + 56) + 32 * v15));
    ++*(_QWORD *)(v7 + 16);
  }
  swift_release();
  v22 = (_QWORD *)(v5 + 64);
  if ((a2 & 1) == 0)
    goto LABEL_41;
LABEL_37:
  v35 = 1 << *(_BYTE *)(v5 + 32);
  if (v35 >= 64)
    bzero(v22, ((unint64_t)(v35 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  else
    *v22 = -1 << v35;
  *(_QWORD *)(v5 + 16) = 0;
LABEL_41:
  result = swift_release();
  *v3 = v7;
  return result;
}

uint64_t sub_1CA0EBB68(uint64_t a1, char a2)
{
  return sub_1CA0EE4BC(a1, a2, (uint64_t *)&unk_1EF937060);
}

uint64_t sub_1CA0EBB74(uint64_t a1, char a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  int64_t v11;
  uint64_t v12;
  uint64_t result;
  int64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  int64_t v22;
  _QWORD *v23;
  unint64_t v24;
  int64_t v25;
  char v26;
  unint64_t v27;
  BOOL v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t *v34;
  uint64_t v35;
  char v36;
  char v37[72];

  v3 = v2;
  v5 = *v2;
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EF9384D0);
  v36 = a2;
  v6 = sub_1CA1F1258();
  v7 = v6;
  if (!*(_QWORD *)(v5 + 16))
    goto LABEL_40;
  v8 = 1 << *(_BYTE *)(v5 + 32);
  v34 = v2;
  v35 = v5 + 64;
  if (v8 < 64)
    v9 = ~(-1 << v8);
  else
    v9 = -1;
  v10 = v9 & *(_QWORD *)(v5 + 64);
  v11 = (unint64_t)(v8 + 63) >> 6;
  v12 = v6 + 64;
  result = swift_retain();
  v14 = 0;
  while (1)
  {
    if (v10)
    {
      v20 = __clz(__rbit64(v10));
      v10 &= v10 - 1;
      v21 = v20 | (v14 << 6);
      goto LABEL_31;
    }
    v22 = v14 + 1;
    if (__OFADD__(v14, 1))
    {
LABEL_41:
      __break(1u);
LABEL_42:
      __break(1u);
      return result;
    }
    if (v22 >= v11)
      break;
    v23 = (_QWORD *)(v5 + 64);
    v24 = *(_QWORD *)(v35 + 8 * v22);
    ++v14;
    if (!v24)
    {
      v14 = v22 + 1;
      if (v22 + 1 >= v11)
        goto LABEL_33;
      v24 = *(_QWORD *)(v35 + 8 * v14);
      if (!v24)
      {
        v25 = v22 + 2;
        if (v25 >= v11)
        {
LABEL_33:
          swift_release();
          v3 = v34;
          if ((v36 & 1) == 0)
            goto LABEL_40;
          goto LABEL_36;
        }
        v24 = *(_QWORD *)(v35 + 8 * v25);
        if (!v24)
        {
          while (1)
          {
            v14 = v25 + 1;
            if (__OFADD__(v25, 1))
              goto LABEL_42;
            if (v14 >= v11)
              goto LABEL_33;
            v24 = *(_QWORD *)(v35 + 8 * v14);
            ++v25;
            if (v24)
              goto LABEL_30;
          }
        }
        v14 = v25;
      }
    }
LABEL_30:
    v10 = (v24 - 1) & v24;
    v21 = __clz(__rbit64(v24)) + (v14 << 6);
LABEL_31:
    v30 = 8 * v21;
    v31 = *(_QWORD *)(*(_QWORD *)(v5 + 48) + v30);
    v32 = *(_QWORD *)(*(_QWORD *)(v5 + 56) + v30);
    if ((v36 & 1) == 0)
    {
      swift_retain();
      swift_bridgeObjectRetain();
    }
    sub_1CA1F13F0();
    (*(void (**)(char *))(*(_QWORD *)v31 + 272))(v37);
    result = sub_1CA1F1438();
    v15 = -1 << *(_BYTE *)(v7 + 32);
    v16 = result & ~v15;
    v17 = v16 >> 6;
    if (((-1 << v16) & ~*(_QWORD *)(v12 + 8 * (v16 >> 6))) != 0)
    {
      v18 = __clz(__rbit64((-1 << v16) & ~*(_QWORD *)(v12 + 8 * (v16 >> 6)))) | v16 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v26 = 0;
      v27 = (unint64_t)(63 - v15) >> 6;
      do
      {
        if (++v17 == v27 && (v26 & 1) != 0)
        {
          __break(1u);
          goto LABEL_41;
        }
        v28 = v17 == v27;
        if (v17 == v27)
          v17 = 0;
        v26 |= v28;
        v29 = *(_QWORD *)(v12 + 8 * v17);
      }
      while (v29 == -1);
      v18 = __clz(__rbit64(~v29)) + (v17 << 6);
    }
    *(_QWORD *)(v12 + ((v18 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v18;
    v19 = 8 * v18;
    *(_QWORD *)(*(_QWORD *)(v7 + 48) + v19) = v31;
    *(_QWORD *)(*(_QWORD *)(v7 + 56) + v19) = v32;
    ++*(_QWORD *)(v7 + 16);
  }
  swift_release();
  v3 = v34;
  v23 = (_QWORD *)(v5 + 64);
  if ((v36 & 1) == 0)
    goto LABEL_40;
LABEL_36:
  v33 = 1 << *(_BYTE *)(v5 + 32);
  if (v33 >= 64)
    bzero(v23, ((unint64_t)(v33 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  else
    *v23 = -1 << v33;
  *(_QWORD *)(v5 + 16) = 0;
LABEL_40:
  result = swift_release();
  *v3 = v7;
  return result;
}

uint64_t sub_1CA0EBE7C(uint64_t a1, char a2)
{
  return sub_1CA0ECB18(a1, a2, &qword_1EF9384B8);
}

uint64_t sub_1CA0EBE88(uint64_t a1, char a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t result;
  int64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  int64_t v22;
  _QWORD *v23;
  unint64_t v24;
  int64_t v25;
  char v26;
  unint64_t v27;
  BOOL v28;
  uint64_t v29;
  uint64_t *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t *v38;
  int64_t v39;
  _QWORD *v40;
  uint64_t i;
  char v42;
  char v43;
  __int128 v44;

  v3 = v2;
  v5 = *v2;
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EF937070);
  v42 = a2;
  v6 = sub_1CA1F1258();
  v7 = v6;
  if (!*(_QWORD *)(v5 + 16))
    goto LABEL_40;
  v8 = 1 << *(_BYTE *)(v5 + 32);
  v40 = (_QWORD *)(v5 + 64);
  if (v8 < 64)
    v9 = ~(-1 << v8);
  else
    v9 = -1;
  v10 = v9 & *(_QWORD *)(v5 + 64);
  v38 = v2;
  v39 = (unint64_t)(v8 + 63) >> 6;
  v11 = v6 + 64;
  result = swift_retain();
  v13 = 0;
  for (i = v5; ; v5 = i)
  {
    if (v10)
    {
      v20 = __clz(__rbit64(v10));
      v10 &= v10 - 1;
      v21 = v20 | (v13 << 6);
      goto LABEL_31;
    }
    v22 = v13 + 1;
    if (__OFADD__(v13, 1))
    {
LABEL_41:
      __break(1u);
LABEL_42:
      __break(1u);
      return result;
    }
    if (v22 >= v39)
      break;
    v23 = v40;
    v24 = v40[v22];
    ++v13;
    if (!v24)
    {
      v13 = v22 + 1;
      if (v22 + 1 >= v39)
        goto LABEL_33;
      v24 = v40[v13];
      if (!v24)
      {
        v25 = v22 + 2;
        if (v25 >= v39)
        {
LABEL_33:
          swift_release();
          v3 = v38;
          if ((v42 & 1) == 0)
            goto LABEL_40;
          goto LABEL_36;
        }
        v24 = v40[v25];
        if (!v24)
        {
          while (1)
          {
            v13 = v25 + 1;
            if (__OFADD__(v25, 1))
              goto LABEL_42;
            if (v13 >= v39)
              goto LABEL_33;
            v24 = v40[v13];
            ++v25;
            if (v24)
              goto LABEL_30;
          }
        }
        v13 = v25;
      }
    }
LABEL_30:
    v10 = (v24 - 1) & v24;
    v21 = __clz(__rbit64(v24)) + (v13 << 6);
LABEL_31:
    v30 = (uint64_t *)(*(_QWORD *)(v5 + 48) + 16 * v21);
    v32 = *v30;
    v31 = v30[1];
    v33 = *(_QWORD *)(v5 + 56) + 48 * v21;
    v34 = *(_QWORD *)v33;
    v44 = *(_OWORD *)(v33 + 8);
    v43 = *(_BYTE *)(v33 + 24);
    v35 = *(_QWORD *)(v33 + 32);
    v36 = *(_QWORD *)(v33 + 40);
    if ((v42 & 1) == 0)
    {
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_retain();
      sub_1CA0AFF28(v35);
    }
    sub_1CA1F13F0();
    sub_1CA1F0A30();
    result = sub_1CA1F1438();
    v14 = -1 << *(_BYTE *)(v7 + 32);
    v15 = result & ~v14;
    v16 = v15 >> 6;
    if (((-1 << v15) & ~*(_QWORD *)(v11 + 8 * (v15 >> 6))) != 0)
    {
      v17 = __clz(__rbit64((-1 << v15) & ~*(_QWORD *)(v11 + 8 * (v15 >> 6)))) | v15 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v26 = 0;
      v27 = (unint64_t)(63 - v14) >> 6;
      do
      {
        if (++v16 == v27 && (v26 & 1) != 0)
        {
          __break(1u);
          goto LABEL_41;
        }
        v28 = v16 == v27;
        if (v16 == v27)
          v16 = 0;
        v26 |= v28;
        v29 = *(_QWORD *)(v11 + 8 * v16);
      }
      while (v29 == -1);
      v17 = __clz(__rbit64(~v29)) + (v16 << 6);
    }
    *(_QWORD *)(v11 + ((v17 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v17;
    v18 = (_QWORD *)(*(_QWORD *)(v7 + 48) + 16 * v17);
    *v18 = v32;
    v18[1] = v31;
    v19 = *(_QWORD *)(v7 + 56) + 48 * v17;
    *(_QWORD *)v19 = v34;
    *(_OWORD *)(v19 + 8) = v44;
    *(_BYTE *)(v19 + 24) = v43;
    *(_QWORD *)(v19 + 32) = v35;
    *(_QWORD *)(v19 + 40) = v36;
    ++*(_QWORD *)(v7 + 16);
  }
  swift_release();
  v3 = v38;
  v23 = v40;
  if ((v42 & 1) == 0)
    goto LABEL_40;
LABEL_36:
  v37 = 1 << *(_BYTE *)(v5 + 32);
  if (v37 >= 64)
    bzero(v23, ((unint64_t)(v37 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  else
    *v23 = -1 << v37;
  *(_QWORD *)(v5 + 16) = 0;
LABEL_40:
  result = swift_release();
  *v3 = v7;
  return result;
}

uint64_t sub_1CA0EC1F8(uint64_t a1, char a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  int64_t v11;
  uint64_t v12;
  uint64_t result;
  int64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  int64_t v21;
  _QWORD *v22;
  unint64_t v23;
  int64_t v24;
  char v25;
  unint64_t v26;
  BOOL v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t *v31;
  uint64_t v32;
  __int128 v33;
  char v34[72];

  v3 = v2;
  v5 = *v2;
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EF938478);
  v6 = sub_1CA1F1258();
  v7 = v6;
  if (!*(_QWORD *)(v5 + 16))
    goto LABEL_40;
  v8 = 1 << *(_BYTE *)(v5 + 32);
  v31 = v2;
  v32 = v5 + 64;
  if (v8 < 64)
    v9 = ~(-1 << v8);
  else
    v9 = -1;
  v10 = v9 & *(_QWORD *)(v5 + 64);
  v11 = (unint64_t)(v8 + 63) >> 6;
  v12 = v6 + 64;
  result = swift_retain();
  v14 = 0;
  while (1)
  {
    if (v10)
    {
      v19 = __clz(__rbit64(v10));
      v10 &= v10 - 1;
      v20 = v19 | (v14 << 6);
      goto LABEL_31;
    }
    v21 = v14 + 1;
    if (__OFADD__(v14, 1))
    {
LABEL_41:
      __break(1u);
LABEL_42:
      __break(1u);
      return result;
    }
    if (v21 >= v11)
      break;
    v22 = (_QWORD *)(v5 + 64);
    v23 = *(_QWORD *)(v32 + 8 * v21);
    ++v14;
    if (!v23)
    {
      v14 = v21 + 1;
      if (v21 + 1 >= v11)
        goto LABEL_33;
      v23 = *(_QWORD *)(v32 + 8 * v14);
      if (!v23)
      {
        v24 = v21 + 2;
        if (v24 >= v11)
        {
LABEL_33:
          swift_release();
          v3 = v31;
          if ((a2 & 1) == 0)
            goto LABEL_40;
          goto LABEL_36;
        }
        v23 = *(_QWORD *)(v32 + 8 * v24);
        if (!v23)
        {
          while (1)
          {
            v14 = v24 + 1;
            if (__OFADD__(v24, 1))
              goto LABEL_42;
            if (v14 >= v11)
              goto LABEL_33;
            v23 = *(_QWORD *)(v32 + 8 * v14);
            ++v24;
            if (v23)
              goto LABEL_30;
          }
        }
        v14 = v24;
      }
    }
LABEL_30:
    v10 = (v23 - 1) & v23;
    v20 = __clz(__rbit64(v23)) + (v14 << 6);
LABEL_31:
    v29 = *(_QWORD *)(*(_QWORD *)(v5 + 48) + 8 * v20);
    v33 = *(_OWORD *)(*(_QWORD *)(v5 + 56) + 16 * v20);
    if ((a2 & 1) == 0)
    {
      swift_retain();
      swift_retain();
    }
    sub_1CA1F13F0();
    (*(void (**)(char *))(*(_QWORD *)v29 + 272))(v34);
    result = sub_1CA1F1438();
    v15 = -1 << *(_BYTE *)(v7 + 32);
    v16 = result & ~v15;
    v17 = v16 >> 6;
    if (((-1 << v16) & ~*(_QWORD *)(v12 + 8 * (v16 >> 6))) != 0)
    {
      v18 = __clz(__rbit64((-1 << v16) & ~*(_QWORD *)(v12 + 8 * (v16 >> 6)))) | v16 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v25 = 0;
      v26 = (unint64_t)(63 - v15) >> 6;
      do
      {
        if (++v17 == v26 && (v25 & 1) != 0)
        {
          __break(1u);
          goto LABEL_41;
        }
        v27 = v17 == v26;
        if (v17 == v26)
          v17 = 0;
        v25 |= v27;
        v28 = *(_QWORD *)(v12 + 8 * v17);
      }
      while (v28 == -1);
      v18 = __clz(__rbit64(~v28)) + (v17 << 6);
    }
    *(_QWORD *)(v12 + ((v18 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v18;
    *(_QWORD *)(*(_QWORD *)(v7 + 48) + 8 * v18) = v29;
    *(_OWORD *)(*(_QWORD *)(v7 + 56) + 16 * v18) = v33;
    ++*(_QWORD *)(v7 + 16);
  }
  swift_release();
  v3 = v31;
  v22 = (_QWORD *)(v5 + 64);
  if ((a2 & 1) == 0)
    goto LABEL_40;
LABEL_36:
  v30 = 1 << *(_BYTE *)(v5 + 32);
  if (v30 >= 64)
    bzero(v22, ((unint64_t)(v30 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  else
    *v22 = -1 << v30;
  *(_QWORD *)(v5 + 16) = 0;
LABEL_40:
  result = swift_release();
  *v3 = v7;
  return result;
}

uint64_t sub_1CA0EC4F4(uint64_t a1, char a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t result;
  int64_t v13;
  unint64_t v14;
  uint64_t v15;
  __int128 v16;
  __int128 v17;
  unint64_t v18;
  unint64_t v19;
  int64_t v20;
  _QWORD *v21;
  unint64_t v22;
  int64_t v23;
  uint64_t v24;
  __int128 v25;
  __int128 v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  unint64_t v30;
  char v31;
  unint64_t v32;
  BOOL v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t *v36;
  int64_t v37;
  uint64_t v38;
  __int128 v39;
  __int128 v40;
  uint64_t v41;

  v3 = v2;
  v5 = *v2;
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EF937830);
  v6 = sub_1CA1F1258();
  v7 = v6;
  if (!*(_QWORD *)(v5 + 16))
    goto LABEL_41;
  v8 = 1 << *(_BYTE *)(v5 + 32);
  v38 = v5 + 64;
  if (v8 < 64)
    v9 = ~(-1 << v8);
  else
    v9 = -1;
  v10 = v9 & *(_QWORD *)(v5 + 64);
  v36 = v2;
  v37 = (unint64_t)(v8 + 63) >> 6;
  v11 = v6 + 64;
  result = swift_retain();
  v13 = 0;
  while (1)
  {
    if (v10)
    {
      v18 = __clz(__rbit64(v10));
      v10 &= v10 - 1;
      v19 = v18 | (v13 << 6);
      goto LABEL_22;
    }
    v20 = v13 + 1;
    if (__OFADD__(v13, 1))
    {
LABEL_42:
      __break(1u);
LABEL_43:
      __break(1u);
      return result;
    }
    if (v20 >= v37)
      break;
    v21 = (_QWORD *)(v5 + 64);
    v22 = *(_QWORD *)(v38 + 8 * v20);
    ++v13;
    if (!v22)
    {
      v13 = v20 + 1;
      if (v20 + 1 >= v37)
        goto LABEL_34;
      v22 = *(_QWORD *)(v38 + 8 * v13);
      if (!v22)
      {
        v23 = v20 + 2;
        if (v23 >= v37)
        {
LABEL_34:
          swift_release();
          v3 = v36;
          if ((a2 & 1) == 0)
            goto LABEL_41;
          goto LABEL_37;
        }
        v22 = *(_QWORD *)(v38 + 8 * v23);
        if (!v22)
        {
          while (1)
          {
            v13 = v23 + 1;
            if (__OFADD__(v23, 1))
              goto LABEL_43;
            if (v13 >= v37)
              goto LABEL_34;
            v22 = *(_QWORD *)(v38 + 8 * v13);
            ++v23;
            if (v22)
              goto LABEL_21;
          }
        }
        v13 = v23;
      }
    }
LABEL_21:
    v10 = (v22 - 1) & v22;
    v19 = __clz(__rbit64(v22)) + (v13 << 6);
LABEL_22:
    v24 = *(_QWORD *)(v5 + 48) + 40 * v19;
    if ((a2 & 1) != 0)
    {
      v25 = *(_OWORD *)v24;
      v26 = *(_OWORD *)(v24 + 16);
      v41 = *(_QWORD *)(v24 + 32);
      v39 = v25;
      v40 = v26;
      v27 = *(_QWORD *)(*(_QWORD *)(v5 + 56) + 8 * v19);
    }
    else
    {
      sub_1CA0AB948(v24, (uint64_t)&v39);
      v27 = *(_QWORD *)(*(_QWORD *)(v5 + 56) + 8 * v19);
      swift_bridgeObjectRetain();
    }
    result = sub_1CA1F1000();
    v28 = -1 << *(_BYTE *)(v7 + 32);
    v29 = result & ~v28;
    v30 = v29 >> 6;
    if (((-1 << v29) & ~*(_QWORD *)(v11 + 8 * (v29 >> 6))) != 0)
    {
      v14 = __clz(__rbit64((-1 << v29) & ~*(_QWORD *)(v11 + 8 * (v29 >> 6)))) | v29 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v31 = 0;
      v32 = (unint64_t)(63 - v28) >> 6;
      do
      {
        if (++v30 == v32 && (v31 & 1) != 0)
        {
          __break(1u);
          goto LABEL_42;
        }
        v33 = v30 == v32;
        if (v30 == v32)
          v30 = 0;
        v31 |= v33;
        v34 = *(_QWORD *)(v11 + 8 * v30);
      }
      while (v34 == -1);
      v14 = __clz(__rbit64(~v34)) + (v30 << 6);
    }
    *(_QWORD *)(v11 + ((v14 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v14;
    v15 = *(_QWORD *)(v7 + 48) + 40 * v14;
    v16 = v39;
    v17 = v40;
    *(_QWORD *)(v15 + 32) = v41;
    *(_OWORD *)v15 = v16;
    *(_OWORD *)(v15 + 16) = v17;
    *(_QWORD *)(*(_QWORD *)(v7 + 56) + 8 * v14) = v27;
    ++*(_QWORD *)(v7 + 16);
  }
  swift_release();
  v3 = v36;
  v21 = (_QWORD *)(v5 + 64);
  if ((a2 & 1) == 0)
    goto LABEL_41;
LABEL_37:
  v35 = 1 << *(_BYTE *)(v5 + 32);
  if (v35 >= 64)
    bzero(v21, ((unint64_t)(v35 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  else
    *v21 = -1 << v35;
  *(_QWORD *)(v5 + 16) = 0;
LABEL_41:
  result = swift_release();
  *v3 = v7;
  return result;
}

uint64_t sub_1CA0EC804(uint64_t a1, char a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t result;
  int64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  _QWORD *v18;
  unint64_t v19;
  unint64_t v20;
  int64_t v21;
  _QWORD *v22;
  unint64_t v23;
  int64_t v24;
  char v25;
  unint64_t v26;
  BOOL v27;
  uint64_t v28;
  uint64_t *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t *v34;
  int64_t v35;
  uint64_t v36;
  char v37;

  v3 = v2;
  v5 = *v2;
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EF9384C8);
  v37 = a2;
  v6 = sub_1CA1F1258();
  v7 = v6;
  if (!*(_QWORD *)(v5 + 16))
    goto LABEL_40;
  v8 = 1 << *(_BYTE *)(v5 + 32);
  v36 = v5 + 64;
  if (v8 < 64)
    v9 = ~(-1 << v8);
  else
    v9 = -1;
  v10 = v9 & *(_QWORD *)(v5 + 64);
  v34 = v2;
  v35 = (unint64_t)(v8 + 63) >> 6;
  v11 = v6 + 64;
  result = swift_retain();
  v13 = 0;
  while (1)
  {
    if (v10)
    {
      v19 = __clz(__rbit64(v10));
      v10 &= v10 - 1;
      v20 = v19 | (v13 << 6);
      goto LABEL_31;
    }
    v21 = v13 + 1;
    if (__OFADD__(v13, 1))
    {
LABEL_41:
      __break(1u);
LABEL_42:
      __break(1u);
      return result;
    }
    if (v21 >= v35)
      break;
    v22 = (_QWORD *)(v5 + 64);
    v23 = *(_QWORD *)(v36 + 8 * v21);
    ++v13;
    if (!v23)
    {
      v13 = v21 + 1;
      if (v21 + 1 >= v35)
        goto LABEL_33;
      v23 = *(_QWORD *)(v36 + 8 * v13);
      if (!v23)
      {
        v24 = v21 + 2;
        if (v24 >= v35)
        {
LABEL_33:
          swift_release();
          v3 = v34;
          if ((v37 & 1) == 0)
            goto LABEL_40;
          goto LABEL_36;
        }
        v23 = *(_QWORD *)(v36 + 8 * v24);
        if (!v23)
        {
          while (1)
          {
            v13 = v24 + 1;
            if (__OFADD__(v24, 1))
              goto LABEL_42;
            if (v13 >= v35)
              goto LABEL_33;
            v23 = *(_QWORD *)(v36 + 8 * v13);
            ++v24;
            if (v23)
              goto LABEL_30;
          }
        }
        v13 = v24;
      }
    }
LABEL_30:
    v10 = (v23 - 1) & v23;
    v20 = __clz(__rbit64(v23)) + (v13 << 6);
LABEL_31:
    v29 = (uint64_t *)(*(_QWORD *)(v5 + 48) + 16 * v20);
    v31 = *v29;
    v30 = v29[1];
    v32 = *(_QWORD *)(*(_QWORD *)(v5 + 56) + 8 * v20);
    if ((v37 & 1) == 0)
      swift_bridgeObjectRetain();
    sub_1CA1F13F0();
    sub_1CA1F0A30();
    result = sub_1CA1F1438();
    v14 = -1 << *(_BYTE *)(v7 + 32);
    v15 = result & ~v14;
    v16 = v15 >> 6;
    if (((-1 << v15) & ~*(_QWORD *)(v11 + 8 * (v15 >> 6))) != 0)
    {
      v17 = __clz(__rbit64((-1 << v15) & ~*(_QWORD *)(v11 + 8 * (v15 >> 6)))) | v15 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v25 = 0;
      v26 = (unint64_t)(63 - v14) >> 6;
      do
      {
        if (++v16 == v26 && (v25 & 1) != 0)
        {
          __break(1u);
          goto LABEL_41;
        }
        v27 = v16 == v26;
        if (v16 == v26)
          v16 = 0;
        v25 |= v27;
        v28 = *(_QWORD *)(v11 + 8 * v16);
      }
      while (v28 == -1);
      v17 = __clz(__rbit64(~v28)) + (v16 << 6);
    }
    *(_QWORD *)(v11 + ((v17 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v17;
    v18 = (_QWORD *)(*(_QWORD *)(v7 + 48) + 16 * v17);
    *v18 = v31;
    v18[1] = v30;
    *(_QWORD *)(*(_QWORD *)(v7 + 56) + 8 * v17) = v32;
    ++*(_QWORD *)(v7 + 16);
  }
  swift_release();
  v3 = v34;
  v22 = (_QWORD *)(v5 + 64);
  if ((v37 & 1) == 0)
    goto LABEL_40;
LABEL_36:
  v33 = 1 << *(_BYTE *)(v5 + 32);
  if (v33 >= 64)
    bzero(v22, ((unint64_t)(v33 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  else
    *v22 = -1 << v33;
  *(_QWORD *)(v5 + 16) = 0;
LABEL_40:
  result = swift_release();
  *v3 = v7;
  return result;
}

uint64_t sub_1CA0ECB0C(uint64_t a1, char a2)
{
  return sub_1CA0ECB18(a1, a2, &qword_1EF9384C0);
}

uint64_t sub_1CA0ECB18(uint64_t a1, char a2, uint64_t *a3)
{
  uint64_t *v3;
  uint64_t *v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  int64_t v12;
  uint64_t v13;
  uint64_t result;
  int64_t v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  int64_t v23;
  _QWORD *v24;
  unint64_t v25;
  int64_t v26;
  char v27;
  unint64_t v28;
  BOOL v29;
  uint64_t v30;
  uint64_t v31;
  void *v32;
  uint64_t v33;
  id v34;
  uint64_t v35;
  uint64_t *v36;
  uint64_t v37;

  v4 = v3;
  v6 = *v3;
  __swift_instantiateConcreteTypeFromMangledName(a3);
  v7 = sub_1CA1F1258();
  v8 = v7;
  if (!*(_QWORD *)(v6 + 16))
    goto LABEL_40;
  v9 = 1 << *(_BYTE *)(v6 + 32);
  v36 = v3;
  v37 = v6 + 64;
  if (v9 < 64)
    v10 = ~(-1 << v9);
  else
    v10 = -1;
  v11 = v10 & *(_QWORD *)(v6 + 64);
  v12 = (unint64_t)(v9 + 63) >> 6;
  v13 = v7 + 64;
  result = swift_retain();
  v15 = 0;
  while (1)
  {
    if (v11)
    {
      v21 = __clz(__rbit64(v11));
      v11 &= v11 - 1;
      v22 = v21 | (v15 << 6);
      goto LABEL_31;
    }
    v23 = v15 + 1;
    if (__OFADD__(v15, 1))
    {
LABEL_41:
      __break(1u);
LABEL_42:
      __break(1u);
      return result;
    }
    if (v23 >= v12)
      break;
    v24 = (_QWORD *)(v6 + 64);
    v25 = *(_QWORD *)(v37 + 8 * v23);
    ++v15;
    if (!v25)
    {
      v15 = v23 + 1;
      if (v23 + 1 >= v12)
        goto LABEL_33;
      v25 = *(_QWORD *)(v37 + 8 * v15);
      if (!v25)
      {
        v26 = v23 + 2;
        if (v26 >= v12)
        {
LABEL_33:
          swift_release();
          v4 = v36;
          if ((a2 & 1) == 0)
            goto LABEL_40;
          goto LABEL_36;
        }
        v25 = *(_QWORD *)(v37 + 8 * v26);
        if (!v25)
        {
          while (1)
          {
            v15 = v26 + 1;
            if (__OFADD__(v26, 1))
              goto LABEL_42;
            if (v15 >= v12)
              goto LABEL_33;
            v25 = *(_QWORD *)(v37 + 8 * v15);
            ++v26;
            if (v25)
              goto LABEL_30;
          }
        }
        v15 = v26;
      }
    }
LABEL_30:
    v11 = (v25 - 1) & v25;
    v22 = __clz(__rbit64(v25)) + (v15 << 6);
LABEL_31:
    v31 = 8 * v22;
    v32 = *(void **)(*(_QWORD *)(v6 + 48) + v31);
    v33 = *(_QWORD *)(*(_QWORD *)(v6 + 56) + v31);
    if ((a2 & 1) == 0)
      v34 = v32;
    result = sub_1CA1F0E5C();
    v16 = -1 << *(_BYTE *)(v8 + 32);
    v17 = result & ~v16;
    v18 = v17 >> 6;
    if (((-1 << v17) & ~*(_QWORD *)(v13 + 8 * (v17 >> 6))) != 0)
    {
      v19 = __clz(__rbit64((-1 << v17) & ~*(_QWORD *)(v13 + 8 * (v17 >> 6)))) | v17 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v27 = 0;
      v28 = (unint64_t)(63 - v16) >> 6;
      do
      {
        if (++v18 == v28 && (v27 & 1) != 0)
        {
          __break(1u);
          goto LABEL_41;
        }
        v29 = v18 == v28;
        if (v18 == v28)
          v18 = 0;
        v27 |= v29;
        v30 = *(_QWORD *)(v13 + 8 * v18);
      }
      while (v30 == -1);
      v19 = __clz(__rbit64(~v30)) + (v18 << 6);
    }
    *(_QWORD *)(v13 + ((v19 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v19;
    v20 = 8 * v19;
    *(_QWORD *)(*(_QWORD *)(v8 + 48) + v20) = v32;
    *(_QWORD *)(*(_QWORD *)(v8 + 56) + v20) = v33;
    ++*(_QWORD *)(v8 + 16);
  }
  swift_release();
  v4 = v36;
  v24 = (_QWORD *)(v6 + 64);
  if ((a2 & 1) == 0)
    goto LABEL_40;
LABEL_36:
  v35 = 1 << *(_BYTE *)(v6 + 32);
  if (v35 >= 64)
    bzero(v24, ((unint64_t)(v35 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  else
    *v24 = -1 << v35;
  *(_QWORD *)(v6 + 16) = 0;
LABEL_40:
  result = swift_release();
  *v4 = v8;
  return result;
}

uint64_t sub_1CA0ECDE0(uint64_t a1, char a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t result;
  uint64_t v7;
  int64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  int64_t v19;
  unint64_t v20;
  int64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;
  char v28;
  unint64_t v29;
  BOOL v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t *v34;
  char v35;

  v3 = v2;
  v5 = *v2;
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EF9384B0);
  result = sub_1CA1F1258();
  v7 = result;
  if (*(_QWORD *)(v5 + 16))
  {
    v35 = a2;
    v34 = v3;
    v8 = 0;
    v9 = (uint64_t *)(v5 + 64);
    v10 = 1 << *(_BYTE *)(v5 + 32);
    v32 = -1 << v10;
    v33 = v10;
    if (v10 < 64)
      v11 = ~(-1 << v10);
    else
      v11 = -1;
    v12 = v11 & *(_QWORD *)(v5 + 64);
    v13 = (unint64_t)(v10 + 63) >> 6;
    v14 = result + 64;
    while (1)
    {
      if (v12)
      {
        v17 = __clz(__rbit64(v12));
        v12 &= v12 - 1;
        v18 = v17 | (v8 << 6);
      }
      else
      {
        v19 = v8 + 1;
        if (__OFADD__(v8, 1))
        {
LABEL_39:
          __break(1u);
LABEL_40:
          __break(1u);
          return result;
        }
        if (v19 >= v13)
          goto LABEL_31;
        v20 = v9[v19];
        ++v8;
        if (!v20)
        {
          v8 = v19 + 1;
          if (v19 + 1 >= v13)
            goto LABEL_31;
          v20 = v9[v8];
          if (!v20)
          {
            v21 = v19 + 2;
            if (v21 >= v13)
            {
LABEL_31:
              if ((v35 & 1) == 0)
              {
                result = swift_release();
                v3 = v34;
                goto LABEL_38;
              }
              if (v33 >= 64)
                bzero((void *)(v5 + 64), 8 * v13);
              else
                *v9 = v32;
              v3 = v34;
              *(_QWORD *)(v5 + 16) = 0;
              break;
            }
            v20 = v9[v21];
            if (!v20)
            {
              while (1)
              {
                v8 = v21 + 1;
                if (__OFADD__(v21, 1))
                  goto LABEL_40;
                if (v8 >= v13)
                  goto LABEL_31;
                v20 = v9[v8];
                ++v21;
                if (v20)
                  goto LABEL_21;
              }
            }
            v8 = v21;
          }
        }
LABEL_21:
        v12 = (v20 - 1) & v20;
        v18 = __clz(__rbit64(v20)) + (v8 << 6);
      }
      v22 = 8 * v18;
      v23 = *(_QWORD *)(*(_QWORD *)(v5 + 48) + v22);
      v24 = *(_QWORD *)(*(_QWORD *)(v5 + 56) + v22);
      result = sub_1CA1F13E4();
      v25 = -1 << *(_BYTE *)(v7 + 32);
      v26 = result & ~v25;
      v27 = v26 >> 6;
      if (((-1 << v26) & ~*(_QWORD *)(v14 + 8 * (v26 >> 6))) != 0)
      {
        v15 = __clz(__rbit64((-1 << v26) & ~*(_QWORD *)(v14 + 8 * (v26 >> 6)))) | v26 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        v28 = 0;
        v29 = (unint64_t)(63 - v25) >> 6;
        do
        {
          if (++v27 == v29 && (v28 & 1) != 0)
          {
            __break(1u);
            goto LABEL_39;
          }
          v30 = v27 == v29;
          if (v27 == v29)
            v27 = 0;
          v28 |= v30;
          v31 = *(_QWORD *)(v14 + 8 * v27);
        }
        while (v31 == -1);
        v15 = __clz(__rbit64(~v31)) + (v27 << 6);
      }
      *(_QWORD *)(v14 + ((v15 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v15;
      v16 = 8 * v15;
      *(_QWORD *)(*(_QWORD *)(v7 + 48) + v16) = v23;
      *(_QWORD *)(*(_QWORD *)(v7 + 56) + v16) = v24;
      ++*(_QWORD *)(v7 + 16);
    }
  }
  result = swift_release();
LABEL_38:
  *v3 = v7;
  return result;
}

uint64_t sub_1CA0ED084(uint64_t a1, char a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  int64_t v11;
  uint64_t v12;
  uint64_t result;
  int64_t v14;
  unint64_t v15;
  uint64_t v16;
  __int128 v17;
  __int128 v18;
  unint64_t v19;
  unint64_t v20;
  int64_t v21;
  _QWORD *v22;
  unint64_t v23;
  int64_t v24;
  uint64_t v25;
  __int128 v26;
  __int128 v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  unint64_t v31;
  char v32;
  unint64_t v33;
  BOOL v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  __int128 v38;
  __int128 v39;
  uint64_t v40;

  v3 = v2;
  v5 = *v2;
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EF938450);
  v6 = sub_1CA1F1258();
  v7 = v6;
  if (!*(_QWORD *)(v5 + 16))
    goto LABEL_41;
  v8 = 1 << *(_BYTE *)(v5 + 32);
  v37 = v5 + 64;
  if (v8 < 64)
    v9 = ~(-1 << v8);
  else
    v9 = -1;
  v10 = v9 & *(_QWORD *)(v5 + 64);
  v11 = (unint64_t)(v8 + 63) >> 6;
  v12 = v6 + 64;
  result = swift_retain();
  v14 = 0;
  while (1)
  {
    if (v10)
    {
      v19 = __clz(__rbit64(v10));
      v10 &= v10 - 1;
      v20 = v19 | (v14 << 6);
      goto LABEL_22;
    }
    v21 = v14 + 1;
    if (__OFADD__(v14, 1))
    {
LABEL_42:
      __break(1u);
LABEL_43:
      __break(1u);
      return result;
    }
    if (v21 >= v11)
      break;
    v22 = (_QWORD *)(v5 + 64);
    v23 = *(_QWORD *)(v37 + 8 * v21);
    ++v14;
    if (!v23)
    {
      v14 = v21 + 1;
      if (v21 + 1 >= v11)
        goto LABEL_34;
      v23 = *(_QWORD *)(v37 + 8 * v14);
      if (!v23)
      {
        v24 = v21 + 2;
        if (v24 >= v11)
        {
LABEL_34:
          swift_release();
          if ((a2 & 1) == 0)
            goto LABEL_41;
          goto LABEL_37;
        }
        v23 = *(_QWORD *)(v37 + 8 * v24);
        if (!v23)
        {
          while (1)
          {
            v14 = v24 + 1;
            if (__OFADD__(v24, 1))
              goto LABEL_43;
            if (v14 >= v11)
              goto LABEL_34;
            v23 = *(_QWORD *)(v37 + 8 * v14);
            ++v24;
            if (v23)
              goto LABEL_21;
          }
        }
        v14 = v24;
      }
    }
LABEL_21:
    v10 = (v23 - 1) & v23;
    v20 = __clz(__rbit64(v23)) + (v14 << 6);
LABEL_22:
    v25 = *(_QWORD *)(v5 + 48) + 40 * v20;
    if ((a2 & 1) != 0)
    {
      v26 = *(_OWORD *)v25;
      v27 = *(_OWORD *)(v25 + 16);
      v40 = *(_QWORD *)(v25 + 32);
      v38 = v26;
      v39 = v27;
    }
    else
    {
      sub_1CA0AB948(v25, (uint64_t)&v38);
    }
    v28 = *(_QWORD *)(*(_QWORD *)(v5 + 56) + 8 * v20);
    result = sub_1CA1F1000();
    v29 = -1 << *(_BYTE *)(v7 + 32);
    v30 = result & ~v29;
    v31 = v30 >> 6;
    if (((-1 << v30) & ~*(_QWORD *)(v12 + 8 * (v30 >> 6))) != 0)
    {
      v15 = __clz(__rbit64((-1 << v30) & ~*(_QWORD *)(v12 + 8 * (v30 >> 6)))) | v30 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v32 = 0;
      v33 = (unint64_t)(63 - v29) >> 6;
      do
      {
        if (++v31 == v33 && (v32 & 1) != 0)
        {
          __break(1u);
          goto LABEL_42;
        }
        v34 = v31 == v33;
        if (v31 == v33)
          v31 = 0;
        v32 |= v34;
        v35 = *(_QWORD *)(v12 + 8 * v31);
      }
      while (v35 == -1);
      v15 = __clz(__rbit64(~v35)) + (v31 << 6);
    }
    *(_QWORD *)(v12 + ((v15 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v15;
    v16 = *(_QWORD *)(v7 + 48) + 40 * v15;
    v17 = v38;
    v18 = v39;
    *(_QWORD *)(v16 + 32) = v40;
    *(_OWORD *)v16 = v17;
    *(_OWORD *)(v16 + 16) = v18;
    *(_QWORD *)(*(_QWORD *)(v7 + 56) + 8 * v15) = v28;
    ++*(_QWORD *)(v7 + 16);
  }
  swift_release();
  v22 = (_QWORD *)(v5 + 64);
  if ((a2 & 1) == 0)
    goto LABEL_41;
LABEL_37:
  v36 = 1 << *(_BYTE *)(v5 + 32);
  if (v36 >= 64)
    bzero(v22, ((unint64_t)(v36 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  else
    *v22 = -1 << v36;
  *(_QWORD *)(v5 + 16) = 0;
LABEL_41:
  result = swift_release();
  *v3 = v7;
  return result;
}

uint64_t sub_1CA0ED380(uint64_t a1, char a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t result;
  uint64_t v7;
  int64_t v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  int64_t v18;
  unint64_t v19;
  int64_t v20;
  uint64_t v21;
  _OWORD *v22;
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;
  char v26;
  unint64_t v27;
  BOOL v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t *v31;
  _OWORD v32[2];

  v3 = v2;
  v5 = *v2;
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EF9384A8);
  result = sub_1CA1F1258();
  v7 = result;
  if (*(_QWORD *)(v5 + 16))
  {
    v31 = v3;
    v8 = 0;
    v9 = (_QWORD *)(v5 + 64);
    v10 = 1 << *(_BYTE *)(v5 + 32);
    if (v10 < 64)
      v11 = ~(-1 << v10);
    else
      v11 = -1;
    v12 = v11 & *(_QWORD *)(v5 + 64);
    v13 = (unint64_t)(v10 + 63) >> 6;
    v14 = result + 64;
    while (1)
    {
      if (v12)
      {
        v16 = __clz(__rbit64(v12));
        v12 &= v12 - 1;
        v17 = v16 | (v8 << 6);
      }
      else
      {
        v18 = v8 + 1;
        if (__OFADD__(v8, 1))
        {
LABEL_42:
          __break(1u);
LABEL_43:
          __break(1u);
          return result;
        }
        if (v18 >= v13)
          goto LABEL_34;
        v19 = v9[v18];
        ++v8;
        if (!v19)
        {
          v8 = v18 + 1;
          if (v18 + 1 >= v13)
            goto LABEL_34;
          v19 = v9[v8];
          if (!v19)
          {
            v20 = v18 + 2;
            if (v20 >= v13)
            {
LABEL_34:
              if ((a2 & 1) == 0)
              {
                result = swift_release();
                v3 = v31;
                goto LABEL_41;
              }
              v30 = 1 << *(_BYTE *)(v5 + 32);
              if (v30 >= 64)
                bzero((void *)(v5 + 64), ((unint64_t)(v30 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
              else
                *v9 = -1 << v30;
              v3 = v31;
              *(_QWORD *)(v5 + 16) = 0;
              break;
            }
            v19 = v9[v20];
            if (!v19)
            {
              while (1)
              {
                v8 = v20 + 1;
                if (__OFADD__(v20, 1))
                  goto LABEL_43;
                if (v8 >= v13)
                  goto LABEL_34;
                v19 = v9[v8];
                ++v20;
                if (v19)
                  goto LABEL_21;
              }
            }
            v8 = v20;
          }
        }
LABEL_21:
        v12 = (v19 - 1) & v19;
        v17 = __clz(__rbit64(v19)) + (v8 << 6);
      }
      v21 = *(_QWORD *)(*(_QWORD *)(v5 + 48) + 8 * v17);
      v22 = (_OWORD *)(*(_QWORD *)(v5 + 56) + 32 * v17);
      if ((a2 & 1) != 0)
        sub_1CA0AFCC0(v22, v32);
      else
        sub_1CA0B6A98((uint64_t)v22, (uint64_t)v32);
      result = sub_1CA1F13E4();
      v23 = -1 << *(_BYTE *)(v7 + 32);
      v24 = result & ~v23;
      v25 = v24 >> 6;
      if (((-1 << v24) & ~*(_QWORD *)(v14 + 8 * (v24 >> 6))) != 0)
      {
        v15 = __clz(__rbit64((-1 << v24) & ~*(_QWORD *)(v14 + 8 * (v24 >> 6)))) | v24 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        v26 = 0;
        v27 = (unint64_t)(63 - v23) >> 6;
        do
        {
          if (++v25 == v27 && (v26 & 1) != 0)
          {
            __break(1u);
            goto LABEL_42;
          }
          v28 = v25 == v27;
          if (v25 == v27)
            v25 = 0;
          v26 |= v28;
          v29 = *(_QWORD *)(v14 + 8 * v25);
        }
        while (v29 == -1);
        v15 = __clz(__rbit64(~v29)) + (v25 << 6);
      }
      *(_QWORD *)(v14 + ((v15 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v15;
      *(_QWORD *)(*(_QWORD *)(v7 + 48) + 8 * v15) = v21;
      result = (uint64_t)sub_1CA0AFCC0(v32, (_OWORD *)(*(_QWORD *)(v7 + 56) + 32 * v15));
      ++*(_QWORD *)(v7 + 16);
    }
  }
  result = swift_release();
LABEL_41:
  *v3 = v7;
  return result;
}

uint64_t sub_1CA0ED640(uint64_t a1, char a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t result;
  uint64_t v7;
  int64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  int64_t v19;
  unint64_t v20;
  int64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;
  char v28;
  unint64_t v29;
  BOOL v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t *v34;
  char v35;

  v3 = v2;
  v5 = *v2;
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_1EF938480);
  result = sub_1CA1F1258();
  v7 = result;
  if (*(_QWORD *)(v5 + 16))
  {
    v35 = a2;
    v34 = v3;
    v8 = 0;
    v9 = (uint64_t *)(v5 + 64);
    v10 = 1 << *(_BYTE *)(v5 + 32);
    v32 = -1 << v10;
    v33 = v10;
    if (v10 < 64)
      v11 = ~(-1 << v10);
    else
      v11 = -1;
    v12 = v11 & *(_QWORD *)(v5 + 64);
    v13 = (unint64_t)(v10 + 63) >> 6;
    v14 = result + 64;
    while (1)
    {
      if (v12)
      {
        v17 = __clz(__rbit64(v12));
        v12 &= v12 - 1;
        v18 = v17 | (v8 << 6);
      }
      else
      {
        v19 = v8 + 1;
        if (__OFADD__(v8, 1))
        {
LABEL_39:
          __break(1u);
LABEL_40:
          __break(1u);
          return result;
        }
        if (v19 >= v13)
          goto LABEL_31;
        v20 = v9[v19];
        ++v8;
        if (!v20)
        {
          v8 = v19 + 1;
          if (v19 + 1 >= v13)
            goto LABEL_31;
          v20 = v9[v8];
          if (!v20)
          {
            v21 = v19 + 2;
            if (v21 >= v13)
            {
LABEL_31:
              if ((v35 & 1) == 0)
              {
                result = swift_release();
                v3 = v34;
                goto LABEL_38;
              }
              if (v33 >= 64)
                bzero((void *)(v5 + 64), 8 * v13);
              else
                *v9 = v32;
              v3 = v34;
              *(_QWORD *)(v5 + 16) = 0;
              break;
            }
            v20 = v9[v21];
            if (!v20)
            {
              while (1)
              {
                v8 = v21 + 1;
                if (__OFADD__(v21, 1))
                  goto LABEL_40;
                if (v8 >= v13)
                  goto LABEL_31;
                v20 = v9[v8];
                ++v21;
                if (v20)
                  goto LABEL_21;
              }
            }
            v8 = v21;
          }
        }
LABEL_21:
        v12 = (v20 - 1) & v20;
        v18 = __clz(__rbit64(v20)) + (v8 << 6);
      }
      v22 = 8 * v18;
      v23 = *(_QWORD *)(*(_QWORD *)(v5 + 48) + v22);
      v24 = *(_QWORD *)(*(_QWORD *)(v5 + 56) + v22);
      result = sub_1CA1F13E4();
      v25 = -1 << *(_BYTE *)(v7 + 32);
      v26 = result & ~v25;
      v27 = v26 >> 6;
      if (((-1 << v26) & ~*(_QWORD *)(v14 + 8 * (v26 >> 6))) != 0)
      {
        v15 = __clz(__rbit64((-1 << v26) & ~*(_QWORD *)(v14 + 8 * (v26 >> 6)))) | v26 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        v28 = 0;
        v29 = (unint64_t)(63 - v25) >> 6;
        do
        {
          if (++v27 == v29 && (v28 & 1) != 0)
          {
            __break(1u);
            goto LABEL_39;
          }
          v30 = v27 == v29;
          if (v27 == v29)
            v27 = 0;
          v28 |= v30;
          v31 = *(_QWORD *)(v14 + 8 * v27);
        }
        while (v31 == -1);
        v15 = __clz(__rbit64(~v31)) + (v27 << 6);
      }
      *(_QWORD *)(v14 + ((v15 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v15;
      v16 = 8 * v15;
      *(_QWORD *)(*(_QWORD *)(v7 + 48) + v16) = v23;
      *(_QWORD *)(*(_QWORD *)(v7 + 56) + v16) = v24;
      ++*(_QWORD *)(v7 + 16);
    }
  }
  result = swift_release();
LABEL_38:
  *v3 = v7;
  return result;
}

uint64_t sub_1CA0ED8E8(uint64_t a1, char a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t result;
  int64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  _QWORD *v18;
  unint64_t v19;
  unint64_t v20;
  int64_t v21;
  _QWORD *v22;
  unint64_t v23;
  int64_t v24;
  char v25;
  unint64_t v26;
  BOOL v27;
  uint64_t v28;
  uint64_t *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  int64_t v34;
  uint64_t v35;
  char v36;

  v3 = v2;
  v5 = *v2;
  __swift_instantiateConcreteTypeFromMangledName(&qword_1ED8528E0);
  v36 = a2;
  v6 = sub_1CA1F1258();
  v7 = v6;
  if (!*(_QWORD *)(v5 + 16))
    goto LABEL_40;
  v8 = 1 << *(_BYTE *)(v5 + 32);
  v35 = v5 + 64;
  if (v8 < 64)
    v9 = ~(-1 << v8);
  else
    v9 = -1;
  v10 = v9 & *(_QWORD *)(v5 + 64);
  v34 = (unint64_t)(v8 + 63) >> 6;
  v11 = v6 + 64;
  result = swift_retain();
  v13 = 0;
  while (1)
  {
    if (v10)
    {
      v19 = __clz(__rbit64(v10));
      v10 &= v10 - 1;
      v20 = v19 | (v13 << 6);
      goto LABEL_31;
    }
    v21 = v13 + 1;
    if (__OFADD__(v13, 1))
    {
LABEL_41:
      __break(1u);
LABEL_42:
      __break(1u);
      return result;
    }
    if (v21 >= v34)
      break;
    v22 = (_QWORD *)(v5 + 64);
    v23 = *(_QWORD *)(v35 + 8 * v21);
    ++v13;
    if (!v23)
    {
      v13 = v21 + 1;
      if (v21 + 1 >= v34)
        goto LABEL_33;
      v23 = *(_QWORD *)(v35 + 8 * v13);
      if (!v23)
      {
        v24 = v21 + 2;
        if (v24 >= v34)
        {
LABEL_33:
          swift_release();
          if ((v36 & 1) == 0)
            goto LABEL_40;
          goto LABEL_36;
        }
        v23 = *(_QWORD *)(v35 + 8 * v24);
        if (!v23)
        {
          while (1)
          {
            v13 = v24 + 1;
            if (__OFADD__(v24, 1))
              goto LABEL_42;
            if (v13 >= v34)
              goto LABEL_33;
            v23 = *(_QWORD *)(v35 + 8 * v13);
            ++v24;
            if (v23)
              goto LABEL_30;
          }
        }
        v13 = v24;
      }
    }
LABEL_30:
    v10 = (v23 - 1) & v23;
    v20 = __clz(__rbit64(v23)) + (v13 << 6);
LABEL_31:
    v29 = (uint64_t *)(*(_QWORD *)(v5 + 48) + 16 * v20);
    v31 = *v29;
    v30 = v29[1];
    v32 = *(_QWORD *)(*(_QWORD *)(v5 + 56) + 8 * v20);
    if ((v36 & 1) == 0)
    {
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
    }
    sub_1CA1F13F0();
    sub_1CA1F0A30();
    result = sub_1CA1F1438();
    v14 = -1 << *(_BYTE *)(v7 + 32);
    v15 = result & ~v14;
    v16 = v15 >> 6;
    if (((-1 << v15) & ~*(_QWORD *)(v11 + 8 * (v15 >> 6))) != 0)
    {
      v17 = __clz(__rbit64((-1 << v15) & ~*(_QWORD *)(v11 + 8 * (v15 >> 6)))) | v15 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v25 = 0;
      v26 = (unint64_t)(63 - v14) >> 6;
      do
      {
        if (++v16 == v26 && (v25 & 1) != 0)
        {
          __break(1u);
          goto LABEL_41;
        }
        v27 = v16 == v26;
        if (v16 == v26)
          v16 = 0;
        v25 |= v27;
        v28 = *(_QWORD *)(v11 + 8 * v16);
      }
      while (v28 == -1);
      v17 = __clz(__rbit64(~v28)) + (v16 << 6);
    }
    *(_QWORD *)(v11 + ((v17 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v17;
    v18 = (_QWORD *)(*(_QWORD *)(v7 + 48) + 16 * v17);
    *v18 = v31;
    v18[1] = v30;
    *(_QWORD *)(*(_QWORD *)(v7 + 56) + 8 * v17) = v32;
    ++*(_QWORD *)(v7 + 16);
  }
  swift_release();
  v22 = (_QWORD *)(v5 + 64);
  if ((v36 & 1) == 0)
    goto LABEL_40;
LABEL_36:
  v33 = 1 << *(_BYTE *)(v5 + 32);
  if (v33 >= 64)
    bzero(v22, ((unint64_t)(v33 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  else
    *v22 = -1 << v33;
  *(_QWORD *)(v5 + 16) = 0;
LABEL_40:
  result = swift_release();
  *v3 = v7;
  return result;
}

uint64_t sub_1CA0EDBFC(uint64_t a1, char a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  int64_t v11;
  uint64_t v12;
  uint64_t result;
  int64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  _QWORD *v19;
  unint64_t v20;
  unint64_t v21;
  int64_t v22;
  _QWORD *v23;
  unint64_t v24;
  int64_t v25;
  char v26;
  unint64_t v27;
  BOOL v28;
  uint64_t v29;
  uint64_t *v30;
  uint64_t v31;
  uint64_t v32;
  int v33;
  uint64_t v34;
  uint64_t *v35;
  uint64_t v36;
  char v37;

  v3 = v2;
  v5 = *v2;
  __swift_instantiateConcreteTypeFromMangledName(&qword_1ED8528E8);
  v37 = a2;
  v6 = sub_1CA1F1258();
  v7 = v6;
  if (!*(_QWORD *)(v5 + 16))
    goto LABEL_40;
  v8 = 1 << *(_BYTE *)(v5 + 32);
  v35 = v2;
  v36 = v5 + 64;
  if (v8 < 64)
    v9 = ~(-1 << v8);
  else
    v9 = -1;
  v10 = v9 & *(_QWORD *)(v5 + 64);
  v11 = (unint64_t)(v8 + 63) >> 6;
  v12 = v6 + 64;
  result = swift_retain();
  v14 = 0;
  while (1)
  {
    if (v10)
    {
      v20 = __clz(__rbit64(v10));
      v10 &= v10 - 1;
      v21 = v20 | (v14 << 6);
      goto LABEL_31;
    }
    v22 = v14 + 1;
    if (__OFADD__(v14, 1))
    {
LABEL_41:
      __break(1u);
LABEL_42:
      __break(1u);
      return result;
    }
    if (v22 >= v11)
      break;
    v23 = (_QWORD *)(v5 + 64);
    v24 = *(_QWORD *)(v36 + 8 * v22);
    ++v14;
    if (!v24)
    {
      v14 = v22 + 1;
      if (v22 + 1 >= v11)
        goto LABEL_33;
      v24 = *(_QWORD *)(v36 + 8 * v14);
      if (!v24)
      {
        v25 = v22 + 2;
        if (v25 >= v11)
        {
LABEL_33:
          swift_release();
          v3 = v35;
          if ((v37 & 1) == 0)
            goto LABEL_40;
          goto LABEL_36;
        }
        v24 = *(_QWORD *)(v36 + 8 * v25);
        if (!v24)
        {
          while (1)
          {
            v14 = v25 + 1;
            if (__OFADD__(v25, 1))
              goto LABEL_42;
            if (v14 >= v11)
              goto LABEL_33;
            v24 = *(_QWORD *)(v36 + 8 * v14);
            ++v25;
            if (v24)
              goto LABEL_30;
          }
        }
        v14 = v25;
      }
    }
LABEL_30:
    v10 = (v24 - 1) & v24;
    v21 = __clz(__rbit64(v24)) + (v14 << 6);
LABEL_31:
    v30 = (uint64_t *)(*(_QWORD *)(v5 + 48) + 16 * v21);
    v32 = *v30;
    v31 = v30[1];
    v33 = *(_DWORD *)(*(_QWORD *)(v5 + 56) + 4 * v21);
    if ((v37 & 1) == 0)
      swift_bridgeObjectRetain();
    sub_1CA1F13F0();
    sub_1CA1F0A30();
    result = sub_1CA1F1438();
    v15 = -1 << *(_BYTE *)(v7 + 32);
    v16 = result & ~v15;
    v17 = v16 >> 6;
    if (((-1 << v16) & ~*(_QWORD *)(v12 + 8 * (v16 >> 6))) != 0)
    {
      v18 = __clz(__rbit64((-1 << v16) & ~*(_QWORD *)(v12 + 8 * (v16 >> 6)))) | v16 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v26 = 0;
      v27 = (unint64_t)(63 - v15) >> 6;
      do
      {
        if (++v17 == v27 && (v26 & 1) != 0)
        {
          __break(1u);
          goto LABEL_41;
        }
        v28 = v17 == v27;
        if (v17 == v27)
          v17 = 0;
        v26 |= v28;
        v29 = *(_QWORD *)(v12 + 8 * v17);
      }
      while (v29 == -1);
      v18 = __clz(__rbit64(~v29)) + (v17 << 6);
    }
    *(_QWORD *)(v12 + ((v18 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v18;
    v19 = (_QWORD *)(*(_QWORD *)(v7 + 48) + 16 * v18);
    *v19 = v32;
    v19[1] = v31;
    *(_DWORD *)(*(_QWORD *)(v7 + 56) + 4 * v18) = v33;
    ++*(_QWORD *)(v7 + 16);
  }
  swift_release();
  v3 = v35;
  v23 = (_QWORD *)(v5 + 64);
  if ((v37 & 1) == 0)
    goto LABEL_40;
LABEL_36:
  v34 = 1 << *(_BYTE *)(v5 + 32);
  if (v34 >= 64)
    bzero(v23, ((unint64_t)(v34 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  else
    *v23 = -1 << v34;
  *(_QWORD *)(v5 + 16) = 0;
LABEL_40:
  result = swift_release();
  *v3 = v7;
  return result;
}

uint64_t sub_1CA0EDF00(uint64_t a1, char a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t result;
  int64_t v13;
  unint64_t v14;
  _QWORD *v15;
  unint64_t v16;
  unint64_t v17;
  int64_t v18;
  unint64_t v19;
  int64_t v20;
  uint64_t *v21;
  uint64_t v22;
  uint64_t v23;
  _OWORD *v24;
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;
  char v28;
  unint64_t v29;
  BOOL v30;
  uint64_t v31;
  uint64_t v32;
  int64_t v33;
  _QWORD *v34;
  _OWORD v35[2];

  v3 = v2;
  v5 = *v2;
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EF936FD0);
  v6 = sub_1CA1F1258();
  v7 = v6;
  if (*(_QWORD *)(v5 + 16))
  {
    v8 = 1 << *(_BYTE *)(v5 + 32);
    v34 = (_QWORD *)(v5 + 64);
    if (v8 < 64)
      v9 = ~(-1 << v8);
    else
      v9 = -1;
    v10 = v9 & *(_QWORD *)(v5 + 64);
    v33 = (unint64_t)(v8 + 63) >> 6;
    v11 = v6 + 64;
    result = swift_retain();
    v13 = 0;
    while (1)
    {
      if (v10)
      {
        v16 = __clz(__rbit64(v10));
        v10 &= v10 - 1;
        v17 = v16 | (v13 << 6);
      }
      else
      {
        v18 = v13 + 1;
        if (__OFADD__(v13, 1))
        {
LABEL_40:
          __break(1u);
LABEL_41:
          __break(1u);
          return result;
        }
        if (v18 >= v33)
          goto LABEL_34;
        v19 = v34[v18];
        ++v13;
        if (!v19)
        {
          v13 = v18 + 1;
          if (v18 + 1 >= v33)
            goto LABEL_34;
          v19 = v34[v13];
          if (!v19)
          {
            v20 = v18 + 2;
            if (v20 >= v33)
            {
LABEL_34:
              swift_release();
              v3 = v2;
              if ((a2 & 1) != 0)
              {
                v32 = 1 << *(_BYTE *)(v5 + 32);
                if (v32 >= 64)
                  bzero(v34, ((unint64_t)(v32 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
                else
                  *v34 = -1 << v32;
                *(_QWORD *)(v5 + 16) = 0;
              }
              break;
            }
            v19 = v34[v20];
            if (!v19)
            {
              while (1)
              {
                v13 = v20 + 1;
                if (__OFADD__(v20, 1))
                  goto LABEL_41;
                if (v13 >= v33)
                  goto LABEL_34;
                v19 = v34[v13];
                ++v20;
                if (v19)
                  goto LABEL_21;
              }
            }
            v13 = v20;
          }
        }
LABEL_21:
        v10 = (v19 - 1) & v19;
        v17 = __clz(__rbit64(v19)) + (v13 << 6);
      }
      v21 = (uint64_t *)(*(_QWORD *)(v5 + 48) + 16 * v17);
      v23 = *v21;
      v22 = v21[1];
      v24 = (_OWORD *)(*(_QWORD *)(v5 + 56) + 32 * v17);
      if ((a2 & 1) != 0)
      {
        sub_1CA0AFCC0(v24, v35);
      }
      else
      {
        sub_1CA0B6A98((uint64_t)v24, (uint64_t)v35);
        swift_bridgeObjectRetain();
      }
      sub_1CA1F13F0();
      sub_1CA1F0A30();
      result = sub_1CA1F1438();
      v25 = -1 << *(_BYTE *)(v7 + 32);
      v26 = result & ~v25;
      v27 = v26 >> 6;
      if (((-1 << v26) & ~*(_QWORD *)(v11 + 8 * (v26 >> 6))) != 0)
      {
        v14 = __clz(__rbit64((-1 << v26) & ~*(_QWORD *)(v11 + 8 * (v26 >> 6)))) | v26 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        v28 = 0;
        v29 = (unint64_t)(63 - v25) >> 6;
        do
        {
          if (++v27 == v29 && (v28 & 1) != 0)
          {
            __break(1u);
            goto LABEL_40;
          }
          v30 = v27 == v29;
          if (v27 == v29)
            v27 = 0;
          v28 |= v30;
          v31 = *(_QWORD *)(v11 + 8 * v27);
        }
        while (v31 == -1);
        v14 = __clz(__rbit64(~v31)) + (v27 << 6);
      }
      *(_QWORD *)(v11 + ((v14 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v14;
      v15 = (_QWORD *)(*(_QWORD *)(v7 + 48) + 16 * v14);
      *v15 = v23;
      v15[1] = v22;
      result = (uint64_t)sub_1CA0AFCC0(v35, (_OWORD *)(*(_QWORD *)(v7 + 56) + 32 * v14));
      ++*(_QWORD *)(v7 + 16);
    }
  }
  result = swift_release();
  *v3 = v7;
  return result;
}

uint64_t sub_1CA0EE1FC(uint64_t a1, char a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t result;
  uint64_t v7;
  int64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  int64_t v21;
  unint64_t v22;
  int64_t v23;
  char v24;
  unint64_t v25;
  BOOL v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  int64_t v33;

  v3 = v2;
  v5 = *v2;
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_1EF938490);
  result = sub_1CA1F1258();
  v7 = result;
  if (*(_QWORD *)(v5 + 16))
  {
    v8 = 0;
    v9 = (uint64_t *)(v5 + 64);
    v10 = 1 << *(_BYTE *)(v5 + 32);
    v31 = -1 << v10;
    v32 = v10;
    if (v10 < 64)
      v11 = ~(-1 << v10);
    else
      v11 = -1;
    v12 = v11 & *(_QWORD *)(v5 + 64);
    v33 = (unint64_t)(v10 + 63) >> 6;
    v13 = result + 64;
    while (1)
    {
      if (v12)
      {
        v19 = __clz(__rbit64(v12));
        v12 &= v12 - 1;
        v20 = v19 | (v8 << 6);
      }
      else
      {
        v21 = v8 + 1;
        if (__OFADD__(v8, 1))
        {
LABEL_40:
          __break(1u);
LABEL_41:
          __break(1u);
          return result;
        }
        if (v21 >= v33)
          goto LABEL_33;
        v22 = v9[v21];
        ++v8;
        if (!v22)
        {
          v8 = v21 + 1;
          if (v21 + 1 >= v33)
            goto LABEL_33;
          v22 = v9[v8];
          if (!v22)
          {
            v23 = v21 + 2;
            if (v23 >= v33)
            {
LABEL_33:
              if ((a2 & 1) != 0)
              {
                if (v32 >= 64)
                  bzero((void *)(v5 + 64), 8 * v33);
                else
                  *v9 = v31;
                *(_QWORD *)(v5 + 16) = 0;
              }
              break;
            }
            v22 = v9[v23];
            if (!v22)
            {
              while (1)
              {
                v8 = v23 + 1;
                if (__OFADD__(v23, 1))
                  goto LABEL_41;
                if (v8 >= v33)
                  goto LABEL_33;
                v22 = v9[v8];
                ++v23;
                if (v22)
                  goto LABEL_30;
              }
            }
            v8 = v23;
          }
        }
LABEL_30:
        v12 = (v22 - 1) & v22;
        v20 = __clz(__rbit64(v22)) + (v8 << 6);
      }
      v28 = 8 * v20;
      v29 = *(_QWORD *)(*(_QWORD *)(v5 + 48) + v28);
      v30 = *(_QWORD *)(*(_QWORD *)(v5 + 56) + v28);
      if ((a2 & 1) == 0)
        swift_bridgeObjectRetain();
      result = sub_1CA1F13E4();
      v14 = -1 << *(_BYTE *)(v7 + 32);
      v15 = result & ~v14;
      v16 = v15 >> 6;
      if (((-1 << v15) & ~*(_QWORD *)(v13 + 8 * (v15 >> 6))) != 0)
      {
        v17 = __clz(__rbit64((-1 << v15) & ~*(_QWORD *)(v13 + 8 * (v15 >> 6)))) | v15 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        v24 = 0;
        v25 = (unint64_t)(63 - v14) >> 6;
        do
        {
          if (++v16 == v25 && (v24 & 1) != 0)
          {
            __break(1u);
            goto LABEL_40;
          }
          v26 = v16 == v25;
          if (v16 == v25)
            v16 = 0;
          v24 |= v26;
          v27 = *(_QWORD *)(v13 + 8 * v16);
        }
        while (v27 == -1);
        v17 = __clz(__rbit64(~v27)) + (v16 << 6);
      }
      *(_QWORD *)(v13 + ((v17 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v17;
      v18 = 8 * v17;
      *(_QWORD *)(*(_QWORD *)(v7 + 48) + v18) = v29;
      *(_QWORD *)(*(_QWORD *)(v7 + 56) + v18) = v30;
      ++*(_QWORD *)(v7 + 16);
    }
  }
  result = swift_release();
  *v3 = v7;
  return result;
}

uint64_t sub_1CA0EE4B0(uint64_t a1, char a2)
{
  return sub_1CA0EE4BC(a1, a2, &qword_1EF938470);
}

uint64_t sub_1CA0EE4BC(uint64_t a1, char a2, uint64_t *a3)
{
  uint64_t *v3;
  uint64_t *v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  int64_t v12;
  uint64_t v13;
  uint64_t result;
  int64_t v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  int64_t v23;
  _QWORD *v24;
  unint64_t v25;
  int64_t v26;
  char v27;
  unint64_t v28;
  BOOL v29;
  uint64_t v30;
  uint64_t v31;
  void *v32;
  uint64_t v33;
  id v34;
  uint64_t v35;
  uint64_t *v36;
  uint64_t v37;

  v4 = v3;
  v6 = *v3;
  __swift_instantiateConcreteTypeFromMangledName(a3);
  v7 = sub_1CA1F1258();
  v8 = v7;
  if (!*(_QWORD *)(v6 + 16))
    goto LABEL_40;
  v9 = 1 << *(_BYTE *)(v6 + 32);
  v36 = v3;
  v37 = v6 + 64;
  if (v9 < 64)
    v10 = ~(-1 << v9);
  else
    v10 = -1;
  v11 = v10 & *(_QWORD *)(v6 + 64);
  v12 = (unint64_t)(v9 + 63) >> 6;
  v13 = v7 + 64;
  result = swift_retain();
  v15 = 0;
  while (1)
  {
    if (v11)
    {
      v21 = __clz(__rbit64(v11));
      v11 &= v11 - 1;
      v22 = v21 | (v15 << 6);
      goto LABEL_31;
    }
    v23 = v15 + 1;
    if (__OFADD__(v15, 1))
    {
LABEL_41:
      __break(1u);
LABEL_42:
      __break(1u);
      return result;
    }
    if (v23 >= v12)
      break;
    v24 = (_QWORD *)(v6 + 64);
    v25 = *(_QWORD *)(v37 + 8 * v23);
    ++v15;
    if (!v25)
    {
      v15 = v23 + 1;
      if (v23 + 1 >= v12)
        goto LABEL_33;
      v25 = *(_QWORD *)(v37 + 8 * v15);
      if (!v25)
      {
        v26 = v23 + 2;
        if (v26 >= v12)
        {
LABEL_33:
          swift_release();
          v4 = v36;
          if ((a2 & 1) == 0)
            goto LABEL_40;
          goto LABEL_36;
        }
        v25 = *(_QWORD *)(v37 + 8 * v26);
        if (!v25)
        {
          while (1)
          {
            v15 = v26 + 1;
            if (__OFADD__(v26, 1))
              goto LABEL_42;
            if (v15 >= v12)
              goto LABEL_33;
            v25 = *(_QWORD *)(v37 + 8 * v15);
            ++v26;
            if (v25)
              goto LABEL_30;
          }
        }
        v15 = v26;
      }
    }
LABEL_30:
    v11 = (v25 - 1) & v25;
    v22 = __clz(__rbit64(v25)) + (v15 << 6);
LABEL_31:
    v31 = 8 * v22;
    v32 = *(void **)(*(_QWORD *)(v6 + 48) + v31);
    v33 = *(_QWORD *)(*(_QWORD *)(v6 + 56) + v31);
    if ((a2 & 1) == 0)
    {
      v34 = v32;
      swift_bridgeObjectRetain();
    }
    result = sub_1CA1F0E5C();
    v16 = -1 << *(_BYTE *)(v8 + 32);
    v17 = result & ~v16;
    v18 = v17 >> 6;
    if (((-1 << v17) & ~*(_QWORD *)(v13 + 8 * (v17 >> 6))) != 0)
    {
      v19 = __clz(__rbit64((-1 << v17) & ~*(_QWORD *)(v13 + 8 * (v17 >> 6)))) | v17 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v27 = 0;
      v28 = (unint64_t)(63 - v16) >> 6;
      do
      {
        if (++v18 == v28 && (v27 & 1) != 0)
        {
          __break(1u);
          goto LABEL_41;
        }
        v29 = v18 == v28;
        if (v18 == v28)
          v18 = 0;
        v27 |= v29;
        v30 = *(_QWORD *)(v13 + 8 * v18);
      }
      while (v30 == -1);
      v19 = __clz(__rbit64(~v30)) + (v18 << 6);
    }
    *(_QWORD *)(v13 + ((v19 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v19;
    v20 = 8 * v19;
    *(_QWORD *)(*(_QWORD *)(v8 + 48) + v20) = v32;
    *(_QWORD *)(*(_QWORD *)(v8 + 56) + v20) = v33;
    ++*(_QWORD *)(v8 + 16);
  }
  swift_release();
  v4 = v36;
  v24 = (_QWORD *)(v6 + 64);
  if ((a2 & 1) == 0)
    goto LABEL_40;
LABEL_36:
  v35 = 1 << *(_BYTE *)(v6 + 32);
  if (v35 >= 64)
    bzero(v24, ((unint64_t)(v35 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  else
    *v24 = -1 << v35;
  *(_QWORD *)(v6 + 16) = 0;
LABEL_40:
  result = swift_release();
  *v4 = v8;
  return result;
}

uint64_t sub_1CA0EE78C(uint64_t a1, char a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t result;
  int64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  _QWORD *v18;
  unint64_t v19;
  unint64_t v20;
  int64_t v21;
  _QWORD *v22;
  unint64_t v23;
  int64_t v24;
  char v25;
  unint64_t v26;
  BOOL v27;
  uint64_t v28;
  uint64_t *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  int64_t v34;
  uint64_t v35;
  char v36;

  v3 = v2;
  v5 = *v2;
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_1EF937050);
  v36 = a2;
  v6 = sub_1CA1F1258();
  v7 = v6;
  if (!*(_QWORD *)(v5 + 16))
    goto LABEL_40;
  v8 = 1 << *(_BYTE *)(v5 + 32);
  v35 = v5 + 64;
  if (v8 < 64)
    v9 = ~(-1 << v8);
  else
    v9 = -1;
  v10 = v9 & *(_QWORD *)(v5 + 64);
  v34 = (unint64_t)(v8 + 63) >> 6;
  v11 = v6 + 64;
  result = swift_retain();
  v13 = 0;
  while (1)
  {
    if (v10)
    {
      v19 = __clz(__rbit64(v10));
      v10 &= v10 - 1;
      v20 = v19 | (v13 << 6);
      goto LABEL_31;
    }
    v21 = v13 + 1;
    if (__OFADD__(v13, 1))
    {
LABEL_41:
      __break(1u);
LABEL_42:
      __break(1u);
      return result;
    }
    if (v21 >= v34)
      break;
    v22 = (_QWORD *)(v5 + 64);
    v23 = *(_QWORD *)(v35 + 8 * v21);
    ++v13;
    if (!v23)
    {
      v13 = v21 + 1;
      if (v21 + 1 >= v34)
        goto LABEL_33;
      v23 = *(_QWORD *)(v35 + 8 * v13);
      if (!v23)
      {
        v24 = v21 + 2;
        if (v24 >= v34)
        {
LABEL_33:
          swift_release();
          if ((v36 & 1) == 0)
            goto LABEL_40;
          goto LABEL_36;
        }
        v23 = *(_QWORD *)(v35 + 8 * v24);
        if (!v23)
        {
          while (1)
          {
            v13 = v24 + 1;
            if (__OFADD__(v24, 1))
              goto LABEL_42;
            if (v13 >= v34)
              goto LABEL_33;
            v23 = *(_QWORD *)(v35 + 8 * v13);
            ++v24;
            if (v23)
              goto LABEL_30;
          }
        }
        v13 = v24;
      }
    }
LABEL_30:
    v10 = (v23 - 1) & v23;
    v20 = __clz(__rbit64(v23)) + (v13 << 6);
LABEL_31:
    v29 = (uint64_t *)(*(_QWORD *)(v5 + 48) + 16 * v20);
    v31 = *v29;
    v30 = v29[1];
    v32 = *(_QWORD *)(*(_QWORD *)(v5 + 56) + 8 * v20);
    if ((v36 & 1) == 0)
    {
      swift_bridgeObjectRetain();
      swift_unknownObjectRetain();
    }
    sub_1CA1F13F0();
    sub_1CA1F0A30();
    result = sub_1CA1F1438();
    v14 = -1 << *(_BYTE *)(v7 + 32);
    v15 = result & ~v14;
    v16 = v15 >> 6;
    if (((-1 << v15) & ~*(_QWORD *)(v11 + 8 * (v15 >> 6))) != 0)
    {
      v17 = __clz(__rbit64((-1 << v15) & ~*(_QWORD *)(v11 + 8 * (v15 >> 6)))) | v15 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v25 = 0;
      v26 = (unint64_t)(63 - v14) >> 6;
      do
      {
        if (++v16 == v26 && (v25 & 1) != 0)
        {
          __break(1u);
          goto LABEL_41;
        }
        v27 = v16 == v26;
        if (v16 == v26)
          v16 = 0;
        v25 |= v27;
        v28 = *(_QWORD *)(v11 + 8 * v16);
      }
      while (v28 == -1);
      v17 = __clz(__rbit64(~v28)) + (v16 << 6);
    }
    *(_QWORD *)(v11 + ((v17 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v17;
    v18 = (_QWORD *)(*(_QWORD *)(v7 + 48) + 16 * v17);
    *v18 = v31;
    v18[1] = v30;
    *(_QWORD *)(*(_QWORD *)(v7 + 56) + 8 * v17) = v32;
    ++*(_QWORD *)(v7 + 16);
  }
  swift_release();
  v22 = (_QWORD *)(v5 + 64);
  if ((v36 & 1) == 0)
    goto LABEL_40;
LABEL_36:
  v33 = 1 << *(_BYTE *)(v5 + 32);
  if (v33 >= 64)
    bzero(v22, ((unint64_t)(v33 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  else
    *v22 = -1 << v33;
  *(_QWORD *)(v5 + 16) = 0;
LABEL_40:
  result = swift_release();
  *v3 = v7;
  return result;
}

uint64_t sub_1CA0EEAA0(uint64_t a1, char a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t result;
  uint64_t v7;
  int64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  int64_t v20;
  unint64_t v21;
  int64_t v22;
  char v23;
  unint64_t v24;
  BOOL v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  void *v29;
  id v30;
  uint64_t v31;
  int64_t v32;
  _QWORD *v33;

  v3 = v2;
  v5 = *v2;
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EF938458);
  result = sub_1CA1F1258();
  v7 = result;
  if (*(_QWORD *)(v5 + 16))
  {
    v8 = 0;
    v33 = (_QWORD *)(v5 + 64);
    v9 = 1 << *(_BYTE *)(v5 + 32);
    if (v9 < 64)
      v10 = ~(-1 << v9);
    else
      v10 = -1;
    v11 = v10 & *(_QWORD *)(v5 + 64);
    v32 = (unint64_t)(v9 + 63) >> 6;
    v12 = result + 64;
    while (1)
    {
      if (v11)
      {
        v18 = __clz(__rbit64(v11));
        v11 &= v11 - 1;
        v19 = v18 | (v8 << 6);
      }
      else
      {
        v20 = v8 + 1;
        if (__OFADD__(v8, 1))
        {
LABEL_41:
          __break(1u);
LABEL_42:
          __break(1u);
          return result;
        }
        result = v5 + 64;
        if (v20 >= v32)
          goto LABEL_33;
        v21 = v33[v20];
        ++v8;
        if (!v21)
        {
          v8 = v20 + 1;
          if (v20 + 1 >= v32)
            goto LABEL_33;
          v21 = v33[v8];
          if (!v21)
          {
            v22 = v20 + 2;
            if (v22 >= v32)
            {
LABEL_33:
              if ((a2 & 1) == 0)
              {
                result = swift_release();
                v3 = v2;
                goto LABEL_40;
              }
              v31 = 1 << *(_BYTE *)(v5 + 32);
              if (v31 >= 64)
                bzero(v33, ((unint64_t)(v31 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
              else
                *v33 = -1 << v31;
              v3 = v2;
              *(_QWORD *)(v5 + 16) = 0;
              break;
            }
            v21 = v33[v22];
            if (!v21)
            {
              while (1)
              {
                v8 = v22 + 1;
                if (__OFADD__(v22, 1))
                  goto LABEL_42;
                if (v8 >= v32)
                  goto LABEL_33;
                v21 = v33[v8];
                ++v22;
                if (v21)
                  goto LABEL_30;
              }
            }
            v8 = v22;
          }
        }
LABEL_30:
        v11 = (v21 - 1) & v21;
        v19 = __clz(__rbit64(v21)) + (v8 << 6);
      }
      v27 = 8 * v19;
      v28 = *(_QWORD *)(*(_QWORD *)(v5 + 48) + v27);
      v29 = *(void **)(*(_QWORD *)(v5 + 56) + v27);
      if ((a2 & 1) == 0)
        v30 = v29;
      sub_1CA1F13F0();
      sub_1CA1F13FC();
      result = sub_1CA1F1438();
      v13 = -1 << *(_BYTE *)(v7 + 32);
      v14 = result & ~v13;
      v15 = v14 >> 6;
      if (((-1 << v14) & ~*(_QWORD *)(v12 + 8 * (v14 >> 6))) != 0)
      {
        v16 = __clz(__rbit64((-1 << v14) & ~*(_QWORD *)(v12 + 8 * (v14 >> 6)))) | v14 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        v23 = 0;
        v24 = (unint64_t)(63 - v13) >> 6;
        do
        {
          if (++v15 == v24 && (v23 & 1) != 0)
          {
            __break(1u);
            goto LABEL_41;
          }
          v25 = v15 == v24;
          if (v15 == v24)
            v15 = 0;
          v23 |= v25;
          v26 = *(_QWORD *)(v12 + 8 * v15);
        }
        while (v26 == -1);
        v16 = __clz(__rbit64(~v26)) + (v15 << 6);
      }
      *(_QWORD *)(v12 + ((v16 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v16;
      v17 = 8 * v16;
      *(_QWORD *)(*(_QWORD *)(v7 + 48) + v17) = v28;
      *(_QWORD *)(*(_QWORD *)(v7 + 56) + v17) = v29;
      ++*(_QWORD *)(v7 + 16);
    }
  }
  result = swift_release();
LABEL_40:
  *v3 = v7;
  return result;
}

unint64_t sub_1CA0EED70(unint64_t result, uint64_t a2, uint64_t a3, _QWORD *a4)
{
  uint64_t v4;
  uint64_t v5;
  BOOL v6;
  uint64_t v7;

  a4[(result >> 6) + 8] |= 1 << result;
  v4 = 8 * result;
  *(_QWORD *)(a4[6] + v4) = a2;
  *(_QWORD *)(a4[7] + v4) = a3;
  v5 = a4[2];
  v6 = __OFADD__(v5, 1);
  v7 = v5 + 1;
  if (v6)
    __break(1u);
  else
    a4[2] = v7;
  return result;
}

uint64_t sub_1CA0EEDB8(unint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, _QWORD *a5)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t result;
  _QWORD *v13;
  uint64_t v14;
  BOOL v15;
  uint64_t v16;

  a5[(a1 >> 6) + 8] |= 1 << a1;
  v10 = a5[6];
  v11 = sub_1CA1F0808();
  result = (*(uint64_t (**)(unint64_t, uint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 32))(v10 + *(_QWORD *)(*(_QWORD *)(v11 - 8) + 72) * a1, a2, v11);
  v13 = (_QWORD *)(a5[7] + 16 * a1);
  *v13 = a3;
  v13[1] = a4;
  v14 = a5[2];
  v15 = __OFADD__(v14, 1);
  v16 = v14 + 1;
  if (v15)
    __break(1u);
  else
    a5[2] = v16;
  return result;
}

_OWORD *sub_1CA0EEE58(unint64_t a1, uint64_t a2, _OWORD *a3, _QWORD *a4)
{
  uint64_t v5;
  __int128 v6;
  _OWORD *result;
  uint64_t v8;
  BOOL v9;
  uint64_t v10;

  a4[(a1 >> 6) + 8] |= 1 << a1;
  v5 = a4[6] + 40 * a1;
  v6 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)v5 = *(_OWORD *)a2;
  *(_OWORD *)(v5 + 16) = v6;
  *(_QWORD *)(v5 + 32) = *(_QWORD *)(a2 + 32);
  result = sub_1CA0AFCC0(a3, (_OWORD *)(a4[7] + 32 * a1));
  v8 = a4[2];
  v9 = __OFADD__(v8, 1);
  v10 = v8 + 1;
  if (v9)
    __break(1u);
  else
    a4[2] = v10;
  return result;
}

unint64_t sub_1CA0EEED0(unint64_t result, uint64_t a2, _QWORD *a3, double a4)
{
  uint64_t v4;
  uint64_t v5;
  BOOL v6;
  uint64_t v7;

  a3[(result >> 6) + 8] |= 1 << result;
  v4 = 8 * result;
  *(_QWORD *)(a3[6] + v4) = a2;
  *(double *)(a3[7] + v4) = a4;
  v5 = a3[2];
  v6 = __OFADD__(v5, 1);
  v7 = v5 + 1;
  if (v6)
    __break(1u);
  else
    a3[2] = v7;
  return result;
}

unint64_t sub_1CA0EEF1C(unint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, _QWORD *a5)
{
  _QWORD *v5;
  uint64_t v6;
  BOOL v7;
  uint64_t v8;

  a5[(result >> 6) + 8] |= 1 << result;
  *(_QWORD *)(a5[6] + 8 * result) = a2;
  v5 = (_QWORD *)(a5[7] + 16 * result);
  *v5 = a3;
  v5[1] = a4;
  v6 = a5[2];
  v7 = __OFADD__(v6, 1);
  v8 = v6 + 1;
  if (v7)
    __break(1u);
  else
    a5[2] = v8;
  return result;
}

unint64_t sub_1CA0EEF64(unint64_t result, uint64_t a2, _QWORD *a3, double a4)
{
  uint64_t v4;
  __int128 v5;
  uint64_t v6;
  BOOL v7;
  uint64_t v8;

  a3[(result >> 6) + 8] |= 1 << result;
  v4 = a3[6] + 40 * result;
  v5 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)v4 = *(_OWORD *)a2;
  *(_OWORD *)(v4 + 16) = v5;
  *(_QWORD *)(v4 + 32) = *(_QWORD *)(a2 + 32);
  *(double *)(a3[7] + 8 * result) = a4;
  v6 = a3[2];
  v7 = __OFADD__(v6, 1);
  v8 = v6 + 1;
  if (v7)
    __break(1u);
  else
    a3[2] = v8;
  return result;
}

_OWORD *sub_1CA0EEFBC(unint64_t a1, uint64_t a2, uint64_t a3, _OWORD *a4, _QWORD *a5)
{
  _QWORD *v6;
  _OWORD *result;
  uint64_t v8;
  BOOL v9;
  uint64_t v10;

  a5[(a1 >> 6) + 8] |= 1 << a1;
  v6 = (_QWORD *)(a5[6] + 16 * a1);
  *v6 = a2;
  v6[1] = a3;
  result = sub_1CA0AFCC0(a4, (_OWORD *)(a5[7] + 32 * a1));
  v8 = a5[2];
  v9 = __OFADD__(v8, 1);
  v10 = v8 + 1;
  if (v9)
    __break(1u);
  else
    a5[2] = v10;
  return result;
}

void *sub_1CA0EF024()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *result;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  int64_t v18;
  unint64_t v19;
  int64_t v20;

  v1 = v0;
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_1ED852B30);
  v2 = *v0;
  v3 = sub_1CA1F124C();
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
LABEL_26:
    result = (void *)swift_release();
    *v1 = v4;
    return result;
  }
  result = (void *)(v3 + 64);
  v6 = v2 + 64;
  v7 = (unint64_t)((1 << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7)
    result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  v9 = 0;
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(v2 + 16);
  v10 = 1 << *(_BYTE *)(v2 + 32);
  v11 = -1;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  v12 = v11 & *(_QWORD *)(v2 + 64);
  v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    v18 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v18 >= v13)
      goto LABEL_26;
    v19 = *(_QWORD *)(v6 + 8 * v18);
    ++v9;
    if (!v19)
    {
      v9 = v18 + 1;
      if (v18 + 1 >= v13)
        goto LABEL_26;
      v19 = *(_QWORD *)(v6 + 8 * v9);
      if (!v19)
        break;
    }
LABEL_25:
    v12 = (v19 - 1) & v19;
    v15 = __clz(__rbit64(v19)) + (v9 << 6);
LABEL_12:
    v16 = 8 * v15;
    v17 = *(_QWORD *)(*(_QWORD *)(v2 + 56) + v16);
    *(_QWORD *)(*(_QWORD *)(v4 + 48) + v16) = *(_QWORD *)(*(_QWORD *)(v2 + 48) + v16);
    *(_QWORD *)(*(_QWORD *)(v4 + 56) + v16) = v17;
    result = (void *)swift_retain();
  }
  v20 = v18 + 2;
  if (v20 >= v13)
    goto LABEL_26;
  v19 = *(_QWORD *)(v6 + 8 * v20);
  if (v19)
  {
    v9 = v20;
    goto LABEL_25;
  }
  while (1)
  {
    v9 = v20 + 1;
    if (__OFADD__(v20, 1))
      break;
    if (v9 >= v13)
      goto LABEL_26;
    v19 = *(_QWORD *)(v6 + 8 * v9);
    ++v20;
    if (v19)
      goto LABEL_25;
  }
LABEL_28:
  __break(1u);
  return result;
}

void *sub_1CA0EF1C4()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *result;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  int64_t v18;
  unint64_t v19;
  int64_t v20;
  unint64_t v21;

  v1 = v0;
  __swift_instantiateConcreteTypeFromMangledName(qword_1ED852A68);
  v2 = *v0;
  v3 = sub_1CA1F124C();
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
LABEL_26:
    result = (void *)swift_release();
    *v1 = v4;
    return result;
  }
  result = (void *)(v3 + 64);
  v6 = v2 + 64;
  v7 = (unint64_t)((1 << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7)
    result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  v9 = 0;
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(v2 + 16);
  v10 = 1 << *(_BYTE *)(v2 + 32);
  v11 = -1;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  v12 = v11 & *(_QWORD *)(v2 + 64);
  v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    v18 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v18 >= v13)
      goto LABEL_26;
    v19 = *(_QWORD *)(v6 + 8 * v18);
    ++v9;
    if (!v19)
    {
      v9 = v18 + 1;
      if (v18 + 1 >= v13)
        goto LABEL_26;
      v19 = *(_QWORD *)(v6 + 8 * v9);
      if (!v19)
        break;
    }
LABEL_25:
    v21 = __clz(__rbit64(v19));
    v12 = (v19 - 1) & v19;
    v15 = v21 + (v9 << 6);
LABEL_12:
    v16 = 8 * v15;
    v17 = *(_QWORD *)(*(_QWORD *)(v2 + 56) + v16);
    *(_QWORD *)(*(_QWORD *)(v4 + 48) + v16) = *(_QWORD *)(*(_QWORD *)(v2 + 48) + v16);
    *(_QWORD *)(*(_QWORD *)(v4 + 56) + v16) = v17;
  }
  v20 = v18 + 2;
  if (v20 >= v13)
    goto LABEL_26;
  v19 = *(_QWORD *)(v6 + 8 * v20);
  if (v19)
  {
    v9 = v20;
    goto LABEL_25;
  }
  while (1)
  {
    v9 = v20 + 1;
    if (__OFADD__(v20, 1))
      break;
    if (v9 >= v13)
      goto LABEL_26;
    v19 = *(_QWORD *)(v6 + 8 * v9);
    ++v20;
    if (v19)
      goto LABEL_25;
  }
LABEL_28:
  __break(1u);
  return result;
}

void *sub_1CA0EF350()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void *result;
  unint64_t v9;
  int64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t *v23;
  uint64_t v24;
  uint64_t v25;
  _QWORD *v26;
  int64_t v27;
  unint64_t v28;
  int64_t v29;
  uint64_t *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t *v33;
  int64_t v34;
  const void *v35;
  char *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;

  v37 = sub_1CA1F0808();
  v1 = *(_QWORD *)(v37 - 8);
  MEMORY[0x1E0C80A78](v37, v2);
  v36 = (char *)&v32 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EF9384A0);
  v33 = v0;
  v4 = *v0;
  v5 = sub_1CA1F124C();
  v6 = *(_QWORD *)(v4 + 16);
  v39 = v5;
  if (!v6)
  {
    result = (void *)swift_release();
    v31 = v39;
    v30 = v33;
LABEL_28:
    *v30 = v31;
    return result;
  }
  v7 = v5;
  result = (void *)(v5 + 64);
  v9 = (unint64_t)((1 << *(_BYTE *)(v7 + 32)) + 63) >> 6;
  v35 = (const void *)(v4 + 64);
  if (v7 != v4 || (unint64_t)result >= v4 + 64 + 8 * v9)
  {
    result = memmove(result, v35, 8 * v9);
    v7 = v39;
  }
  v11 = 0;
  *(_QWORD *)(v7 + 16) = *(_QWORD *)(v4 + 16);
  v12 = 1 << *(_BYTE *)(v4 + 32);
  v38 = v4;
  v13 = -1;
  if (v12 < 64)
    v13 = ~(-1 << v12);
  v14 = v13 & *(_QWORD *)(v4 + 64);
  v34 = (unint64_t)(v12 + 63) >> 6;
  v16 = v36;
  v15 = v37;
  v17 = v39;
  while (1)
  {
    if (v14)
    {
      v18 = __clz(__rbit64(v14));
      v14 &= v14 - 1;
      v19 = v18 | (v11 << 6);
      v20 = v38;
      goto LABEL_12;
    }
    v27 = v11 + 1;
    v20 = v38;
    if (__OFADD__(v11, 1))
    {
      __break(1u);
      goto LABEL_30;
    }
    if (v27 >= v34)
      goto LABEL_26;
    v28 = *((_QWORD *)v35 + v27);
    ++v11;
    if (!v28)
    {
      v11 = v27 + 1;
      if (v27 + 1 >= v34)
        goto LABEL_26;
      v28 = *((_QWORD *)v35 + v11);
      if (!v28)
        break;
    }
LABEL_25:
    v14 = (v28 - 1) & v28;
    v19 = __clz(__rbit64(v28)) + (v11 << 6);
LABEL_12:
    v21 = *(_QWORD *)(v1 + 72) * v19;
    (*(void (**)(char *, unint64_t, uint64_t))(v1 + 16))(v16, *(_QWORD *)(v20 + 48) + v21, v15);
    v22 = 16 * v19;
    v23 = (uint64_t *)(*(_QWORD *)(v20 + 56) + 16 * v19);
    v25 = *v23;
    v24 = v23[1];
    (*(void (**)(unint64_t, char *, uint64_t))(v1 + 32))(*(_QWORD *)(v17 + 48) + v21, v16, v15);
    v26 = (_QWORD *)(*(_QWORD *)(v17 + 56) + v22);
    *v26 = v25;
    v26[1] = v24;
    result = (void *)swift_retain();
  }
  v29 = v27 + 2;
  if (v29 >= v34)
  {
LABEL_26:
    result = (void *)swift_release();
    v30 = v33;
    v31 = v39;
    goto LABEL_28;
  }
  v28 = *((_QWORD *)v35 + v29);
  if (v28)
  {
    v11 = v29;
    goto LABEL_25;
  }
  while (1)
  {
    v11 = v29 + 1;
    if (__OFADD__(v29, 1))
      break;
    if (v11 >= v34)
      goto LABEL_26;
    v28 = *((_QWORD *)v35 + v11);
    ++v29;
    if (v28)
      goto LABEL_25;
  }
LABEL_30:
  __break(1u);
  return result;
}

id sub_1CA0EF5C0()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  id result;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  void *v17;
  uint64_t v18;
  int64_t v19;
  unint64_t v20;
  int64_t v21;

  v1 = v0;
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EF93A330);
  v2 = *v0;
  v3 = sub_1CA1F124C();
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
LABEL_26:
    result = (id)swift_release();
    *v1 = v4;
    return result;
  }
  result = (id)(v3 + 64);
  v6 = v2 + 64;
  v7 = (unint64_t)((1 << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7)
    result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  v9 = 0;
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(v2 + 16);
  v10 = 1 << *(_BYTE *)(v2 + 32);
  v11 = -1;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  v12 = v11 & *(_QWORD *)(v2 + 64);
  v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    v19 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v19 >= v13)
      goto LABEL_26;
    v20 = *(_QWORD *)(v6 + 8 * v19);
    ++v9;
    if (!v20)
    {
      v9 = v19 + 1;
      if (v19 + 1 >= v13)
        goto LABEL_26;
      v20 = *(_QWORD *)(v6 + 8 * v9);
      if (!v20)
        break;
    }
LABEL_25:
    v12 = (v20 - 1) & v20;
    v15 = __clz(__rbit64(v20)) + (v9 << 6);
LABEL_12:
    v16 = 8 * v15;
    v17 = *(void **)(*(_QWORD *)(v2 + 48) + v16);
    v18 = *(_QWORD *)(*(_QWORD *)(v2 + 56) + v16);
    *(_QWORD *)(*(_QWORD *)(v4 + 48) + v16) = v17;
    *(_QWORD *)(*(_QWORD *)(v4 + 56) + v16) = v18;
    result = v17;
  }
  v21 = v19 + 2;
  if (v21 >= v13)
    goto LABEL_26;
  v20 = *(_QWORD *)(v6 + 8 * v21);
  if (v20)
  {
    v9 = v21;
    goto LABEL_25;
  }
  while (1)
  {
    v9 = v21 + 1;
    if (__OFADD__(v21, 1))
      break;
    if (v9 >= v13)
      goto LABEL_26;
    v20 = *(_QWORD *)(v6 + 8 * v9);
    ++v21;
    if (v20)
      goto LABEL_25;
  }
LABEL_28:
  __break(1u);
  return result;
}

void *sub_1CA0EF760()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *result;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  __int128 v19;
  __int128 v20;
  int64_t v21;
  unint64_t v22;
  int64_t v23;
  _OWORD v24[2];
  _OWORD v25[2];
  uint64_t v26;

  v1 = v0;
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_1EF938460);
  v2 = *v0;
  v3 = sub_1CA1F124C();
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
LABEL_26:
    result = (void *)swift_release();
    *v1 = v4;
    return result;
  }
  result = (void *)(v3 + 64);
  v6 = v2 + 64;
  v7 = (unint64_t)((1 << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7)
    result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  v9 = 0;
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(v2 + 16);
  v10 = 1 << *(_BYTE *)(v2 + 32);
  v11 = -1;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  v12 = v11 & *(_QWORD *)(v2 + 64);
  v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    v21 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v21 >= v13)
      goto LABEL_26;
    v22 = *(_QWORD *)(v6 + 8 * v21);
    ++v9;
    if (!v22)
    {
      v9 = v21 + 1;
      if (v21 + 1 >= v13)
        goto LABEL_26;
      v22 = *(_QWORD *)(v6 + 8 * v9);
      if (!v22)
        break;
    }
LABEL_25:
    v12 = (v22 - 1) & v22;
    v15 = __clz(__rbit64(v22)) + (v9 << 6);
LABEL_12:
    v16 = 40 * v15;
    sub_1CA0AB948(*(_QWORD *)(v2 + 48) + 40 * v15, (uint64_t)v25);
    v17 = 32 * v15;
    sub_1CA0B6A98(*(_QWORD *)(v2 + 56) + v17, (uint64_t)v24);
    v18 = *(_QWORD *)(v4 + 48) + v16;
    v19 = v25[0];
    v20 = v25[1];
    *(_QWORD *)(v18 + 32) = v26;
    *(_OWORD *)v18 = v19;
    *(_OWORD *)(v18 + 16) = v20;
    result = sub_1CA0AFCC0(v24, (_OWORD *)(*(_QWORD *)(v4 + 56) + v17));
  }
  v23 = v21 + 2;
  if (v23 >= v13)
    goto LABEL_26;
  v22 = *(_QWORD *)(v6 + 8 * v23);
  if (v22)
  {
    v9 = v23;
    goto LABEL_25;
  }
  while (1)
  {
    v9 = v23 + 1;
    if (__OFADD__(v23, 1))
      break;
    if (v9 >= v13)
      goto LABEL_26;
    v22 = *(_QWORD *)(v6 + 8 * v9);
    ++v23;
    if (v22)
      goto LABEL_25;
  }
LABEL_28:
  __break(1u);
  return result;
}

void *sub_1CA0EF944()
{
  return sub_1CA0F118C((uint64_t *)&unk_1EF937060);
}

void *sub_1CA0EF950()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *result;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  int64_t v18;
  unint64_t v19;
  int64_t v20;

  v1 = v0;
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EF9384D0);
  v2 = *v0;
  v3 = sub_1CA1F124C();
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
LABEL_26:
    result = (void *)swift_release();
    *v1 = v4;
    return result;
  }
  result = (void *)(v3 + 64);
  v6 = v2 + 64;
  v7 = (unint64_t)((1 << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7)
    result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  v9 = 0;
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(v2 + 16);
  v10 = 1 << *(_BYTE *)(v2 + 32);
  v11 = -1;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  v12 = v11 & *(_QWORD *)(v2 + 64);
  v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    v18 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v18 >= v13)
      goto LABEL_26;
    v19 = *(_QWORD *)(v6 + 8 * v18);
    ++v9;
    if (!v19)
    {
      v9 = v18 + 1;
      if (v18 + 1 >= v13)
        goto LABEL_26;
      v19 = *(_QWORD *)(v6 + 8 * v9);
      if (!v19)
        break;
    }
LABEL_25:
    v12 = (v19 - 1) & v19;
    v15 = __clz(__rbit64(v19)) + (v9 << 6);
LABEL_12:
    v16 = 8 * v15;
    v17 = *(_QWORD *)(*(_QWORD *)(v2 + 56) + v16);
    *(_QWORD *)(*(_QWORD *)(v4 + 48) + v16) = *(_QWORD *)(*(_QWORD *)(v2 + 48) + v16);
    *(_QWORD *)(*(_QWORD *)(v4 + 56) + v16) = v17;
    swift_retain();
    result = (void *)swift_bridgeObjectRetain();
  }
  v20 = v18 + 2;
  if (v20 >= v13)
    goto LABEL_26;
  v19 = *(_QWORD *)(v6 + 8 * v20);
  if (v19)
  {
    v9 = v20;
    goto LABEL_25;
  }
  while (1)
  {
    v9 = v20 + 1;
    if (__OFADD__(v20, 1))
      break;
    if (v9 >= v13)
      goto LABEL_26;
    v19 = *(_QWORD *)(v6 + 8 * v9);
    ++v20;
    if (v19)
      goto LABEL_25;
  }
LABEL_28:
  __break(1u);
  return result;
}

id sub_1CA0EFAF8()
{
  return sub_1CA0F0258(&qword_1EF9384B8);
}

void *sub_1CA0EFB04()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *result;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char v23;
  uint64_t v24;
  uint64_t v25;
  _QWORD *v26;
  __int128 v27;
  uint64_t v28;
  int64_t v29;
  unint64_t v30;
  int64_t v31;

  v1 = v0;
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EF937070);
  v2 = *v0;
  v3 = sub_1CA1F124C();
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
LABEL_26:
    result = (void *)swift_release();
    *v1 = v4;
    return result;
  }
  result = (void *)(v3 + 64);
  v6 = v2 + 64;
  v7 = (unint64_t)((1 << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7)
    result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  v9 = 0;
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(v2 + 16);
  v10 = 1 << *(_BYTE *)(v2 + 32);
  v11 = -1;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  v12 = v11 & *(_QWORD *)(v2 + 64);
  v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    v29 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v29 >= v13)
      goto LABEL_26;
    v30 = *(_QWORD *)(v6 + 8 * v29);
    ++v9;
    if (!v30)
    {
      v9 = v29 + 1;
      if (v29 + 1 >= v13)
        goto LABEL_26;
      v30 = *(_QWORD *)(v6 + 8 * v9);
      if (!v30)
        break;
    }
LABEL_25:
    v12 = (v30 - 1) & v30;
    v15 = __clz(__rbit64(v30)) + (v9 << 6);
LABEL_12:
    v16 = 16 * v15;
    v17 = (uint64_t *)(*(_QWORD *)(v2 + 48) + 16 * v15);
    v19 = *v17;
    v18 = v17[1];
    v20 = 48 * v15;
    v21 = *(_QWORD *)(v2 + 56) + v20;
    v22 = *(_QWORD *)v21;
    v23 = *(_BYTE *)(v21 + 24);
    v24 = *(_QWORD *)(v21 + 32);
    v25 = *(_QWORD *)(v21 + 40);
    v26 = (_QWORD *)(*(_QWORD *)(v4 + 48) + v16);
    v27 = *(_OWORD *)(v21 + 8);
    *v26 = v19;
    v26[1] = v18;
    v28 = *(_QWORD *)(v4 + 56) + v20;
    *(_QWORD *)v28 = v22;
    *(_OWORD *)(v28 + 8) = v27;
    *(_BYTE *)(v28 + 24) = v23;
    *(_QWORD *)(v28 + 32) = v24;
    *(_QWORD *)(v28 + 40) = v25;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_retain();
    result = (void *)sub_1CA0AFF28(v24);
  }
  v31 = v29 + 2;
  if (v31 >= v13)
    goto LABEL_26;
  v30 = *(_QWORD *)(v6 + 8 * v31);
  if (v30)
  {
    v9 = v31;
    goto LABEL_25;
  }
  while (1)
  {
    v9 = v31 + 1;
    if (__OFADD__(v31, 1))
      break;
    if (v9 >= v13)
      goto LABEL_26;
    v30 = *(_QWORD *)(v6 + 8 * v9);
    ++v31;
    if (v30)
      goto LABEL_25;
  }
LABEL_28:
  __break(1u);
  return result;
}

void *sub_1CA0EFD0C()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *result;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  __int128 v19;
  int64_t v20;
  unint64_t v21;
  int64_t v22;

  v1 = v0;
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EF938478);
  v2 = *v0;
  v3 = sub_1CA1F124C();
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
LABEL_26:
    result = (void *)swift_release();
    *v1 = v4;
    return result;
  }
  result = (void *)(v3 + 64);
  v6 = v2 + 64;
  v7 = (unint64_t)((1 << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7)
    result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  v9 = 0;
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(v2 + 16);
  v10 = 1 << *(_BYTE *)(v2 + 32);
  v11 = -1;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  v12 = v11 & *(_QWORD *)(v2 + 64);
  v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    v20 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v20 >= v13)
      goto LABEL_26;
    v21 = *(_QWORD *)(v6 + 8 * v20);
    ++v9;
    if (!v21)
    {
      v9 = v20 + 1;
      if (v20 + 1 >= v13)
        goto LABEL_26;
      v21 = *(_QWORD *)(v6 + 8 * v9);
      if (!v21)
        break;
    }
LABEL_25:
    v12 = (v21 - 1) & v21;
    v15 = __clz(__rbit64(v21)) + (v9 << 6);
LABEL_12:
    v16 = 8 * v15;
    v17 = *(_QWORD *)(*(_QWORD *)(v2 + 48) + 8 * v15);
    v18 = 16 * v15;
    v19 = *(_OWORD *)(*(_QWORD *)(v2 + 56) + v18);
    *(_QWORD *)(*(_QWORD *)(v4 + 48) + v16) = v17;
    *(_OWORD *)(*(_QWORD *)(v4 + 56) + v18) = v19;
    swift_retain();
    result = (void *)swift_retain();
  }
  v22 = v20 + 2;
  if (v22 >= v13)
    goto LABEL_26;
  v21 = *(_QWORD *)(v6 + 8 * v22);
  if (v21)
  {
    v9 = v22;
    goto LABEL_25;
  }
  while (1)
  {
    v9 = v22 + 1;
    if (__OFADD__(v22, 1))
      break;
    if (v9 >= v13)
      goto LABEL_26;
    v21 = *(_QWORD *)(v6 + 8 * v9);
    ++v22;
    if (v21)
      goto LABEL_25;
  }
LABEL_28:
  __break(1u);
  return result;
}

void *sub_1CA0EFEC8()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *result;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  __int128 v18;
  __int128 v19;
  int64_t v20;
  unint64_t v21;
  int64_t v22;
  _OWORD v23[2];
  uint64_t v24;

  v1 = v0;
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EF937830);
  v2 = *v0;
  v3 = sub_1CA1F124C();
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
LABEL_26:
    result = (void *)swift_release();
    *v1 = v4;
    return result;
  }
  result = (void *)(v3 + 64);
  v6 = v2 + 64;
  v7 = (unint64_t)((1 << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7)
    result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  v9 = 0;
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(v2 + 16);
  v10 = 1 << *(_BYTE *)(v2 + 32);
  v11 = -1;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  v12 = v11 & *(_QWORD *)(v2 + 64);
  v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    v20 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v20 >= v13)
      goto LABEL_26;
    v21 = *(_QWORD *)(v6 + 8 * v20);
    ++v9;
    if (!v21)
    {
      v9 = v20 + 1;
      if (v20 + 1 >= v13)
        goto LABEL_26;
      v21 = *(_QWORD *)(v6 + 8 * v9);
      if (!v21)
        break;
    }
LABEL_25:
    v12 = (v21 - 1) & v21;
    v15 = __clz(__rbit64(v21)) + (v9 << 6);
LABEL_12:
    sub_1CA0AB948(*(_QWORD *)(v2 + 48) + 40 * v15, (uint64_t)v23);
    v16 = *(_QWORD *)(*(_QWORD *)(v2 + 56) + 8 * v15);
    v17 = *(_QWORD *)(v4 + 48) + 40 * v15;
    v18 = v23[0];
    v19 = v23[1];
    *(_QWORD *)(v17 + 32) = v24;
    *(_OWORD *)v17 = v18;
    *(_OWORD *)(v17 + 16) = v19;
    *(_QWORD *)(*(_QWORD *)(v4 + 56) + 8 * v15) = v16;
    result = (void *)swift_bridgeObjectRetain();
  }
  v22 = v20 + 2;
  if (v22 >= v13)
    goto LABEL_26;
  v21 = *(_QWORD *)(v6 + 8 * v22);
  if (v21)
  {
    v9 = v22;
    goto LABEL_25;
  }
  while (1)
  {
    v9 = v22 + 1;
    if (__OFADD__(v22, 1))
      break;
    if (v9 >= v13)
      goto LABEL_26;
    v21 = *(_QWORD *)(v6 + 8 * v9);
    ++v22;
    if (v21)
      goto LABEL_25;
  }
LABEL_28:
  __break(1u);
  return result;
}

void *sub_1CA0F00A0()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *result;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  int64_t v23;
  unint64_t v24;
  int64_t v25;

  v1 = v0;
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EF9384C8);
  v2 = *v0;
  v3 = sub_1CA1F124C();
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
LABEL_26:
    result = (void *)swift_release();
    *v1 = v4;
    return result;
  }
  result = (void *)(v3 + 64);
  v6 = v2 + 64;
  v7 = (unint64_t)((1 << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7)
    result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  v9 = 0;
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(v2 + 16);
  v10 = 1 << *(_BYTE *)(v2 + 32);
  v11 = -1;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  v12 = v11 & *(_QWORD *)(v2 + 64);
  v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    v23 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v23 >= v13)
      goto LABEL_26;
    v24 = *(_QWORD *)(v6 + 8 * v23);
    ++v9;
    if (!v24)
    {
      v9 = v23 + 1;
      if (v23 + 1 >= v13)
        goto LABEL_26;
      v24 = *(_QWORD *)(v6 + 8 * v9);
      if (!v24)
        break;
    }
LABEL_25:
    v12 = (v24 - 1) & v24;
    v15 = __clz(__rbit64(v24)) + (v9 << 6);
LABEL_12:
    v16 = 16 * v15;
    v17 = (uint64_t *)(*(_QWORD *)(v2 + 48) + 16 * v15);
    v19 = *v17;
    v18 = v17[1];
    v20 = 8 * v15;
    v21 = *(_QWORD *)(*(_QWORD *)(v2 + 56) + v20);
    v22 = (_QWORD *)(*(_QWORD *)(v4 + 48) + v16);
    *v22 = v19;
    v22[1] = v18;
    *(_QWORD *)(*(_QWORD *)(v4 + 56) + v20) = v21;
    result = (void *)swift_bridgeObjectRetain();
  }
  v25 = v23 + 2;
  if (v25 >= v13)
    goto LABEL_26;
  v24 = *(_QWORD *)(v6 + 8 * v25);
  if (v24)
  {
    v9 = v25;
    goto LABEL_25;
  }
  while (1)
  {
    v9 = v25 + 1;
    if (__OFADD__(v25, 1))
      break;
    if (v9 >= v13)
      goto LABEL_26;
    v24 = *(_QWORD *)(v6 + 8 * v9);
    ++v25;
    if (v24)
      goto LABEL_25;
  }
LABEL_28:
  __break(1u);
  return result;
}

id sub_1CA0F024C()
{
  return sub_1CA0F0258(&qword_1EF9384C0);
}

id sub_1CA0F0258(uint64_t *a1)
{
  uint64_t *v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  id result;
  uint64_t v7;
  unint64_t v8;
  int64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  int64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  void *v18;
  uint64_t v19;
  int64_t v20;
  unint64_t v21;
  int64_t v22;

  v2 = v1;
  __swift_instantiateConcreteTypeFromMangledName(a1);
  v3 = *v1;
  v4 = sub_1CA1F124C();
  v5 = v4;
  if (!*(_QWORD *)(v3 + 16))
  {
LABEL_26:
    result = (id)swift_release();
    *v2 = v5;
    return result;
  }
  result = (id)(v4 + 64);
  v7 = v3 + 64;
  v8 = (unint64_t)((1 << *(_BYTE *)(v5 + 32)) + 63) >> 6;
  if (v5 != v3 || (unint64_t)result >= v3 + 64 + 8 * v8)
    result = memmove(result, (const void *)(v3 + 64), 8 * v8);
  v10 = 0;
  *(_QWORD *)(v5 + 16) = *(_QWORD *)(v3 + 16);
  v11 = 1 << *(_BYTE *)(v3 + 32);
  v12 = -1;
  if (v11 < 64)
    v12 = ~(-1 << v11);
  v13 = v12 & *(_QWORD *)(v3 + 64);
  v14 = (unint64_t)(v11 + 63) >> 6;
  while (1)
  {
    if (v13)
    {
      v15 = __clz(__rbit64(v13));
      v13 &= v13 - 1;
      v16 = v15 | (v10 << 6);
      goto LABEL_12;
    }
    v20 = v10 + 1;
    if (__OFADD__(v10, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v20 >= v14)
      goto LABEL_26;
    v21 = *(_QWORD *)(v7 + 8 * v20);
    ++v10;
    if (!v21)
    {
      v10 = v20 + 1;
      if (v20 + 1 >= v14)
        goto LABEL_26;
      v21 = *(_QWORD *)(v7 + 8 * v10);
      if (!v21)
        break;
    }
LABEL_25:
    v13 = (v21 - 1) & v21;
    v16 = __clz(__rbit64(v21)) + (v10 << 6);
LABEL_12:
    v17 = 8 * v16;
    v18 = *(void **)(*(_QWORD *)(v3 + 48) + v17);
    v19 = *(_QWORD *)(*(_QWORD *)(v3 + 56) + v17);
    *(_QWORD *)(*(_QWORD *)(v5 + 48) + v17) = v18;
    *(_QWORD *)(*(_QWORD *)(v5 + 56) + v17) = v19;
    result = v18;
  }
  v22 = v20 + 2;
  if (v22 >= v14)
    goto LABEL_26;
  v21 = *(_QWORD *)(v7 + 8 * v22);
  if (v21)
  {
    v10 = v22;
    goto LABEL_25;
  }
  while (1)
  {
    v10 = v22 + 1;
    if (__OFADD__(v22, 1))
      break;
    if (v10 >= v14)
      goto LABEL_26;
    v21 = *(_QWORD *)(v7 + 8 * v10);
    ++v22;
    if (v21)
      goto LABEL_25;
  }
LABEL_28:
  __break(1u);
  return result;
}

void *sub_1CA0F03F0()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *result;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  int64_t v18;
  unint64_t v19;
  int64_t v20;
  unint64_t v21;

  v1 = v0;
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EF9384B0);
  v2 = *v0;
  v3 = sub_1CA1F124C();
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
LABEL_26:
    result = (void *)swift_release();
    *v1 = v4;
    return result;
  }
  result = (void *)(v3 + 64);
  v6 = v2 + 64;
  v7 = (unint64_t)((1 << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7)
    result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  v9 = 0;
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(v2 + 16);
  v10 = 1 << *(_BYTE *)(v2 + 32);
  v11 = -1;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  v12 = v11 & *(_QWORD *)(v2 + 64);
  v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    v18 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v18 >= v13)
      goto LABEL_26;
    v19 = *(_QWORD *)(v6 + 8 * v18);
    ++v9;
    if (!v19)
    {
      v9 = v18 + 1;
      if (v18 + 1 >= v13)
        goto LABEL_26;
      v19 = *(_QWORD *)(v6 + 8 * v9);
      if (!v19)
        break;
    }
LABEL_25:
    v21 = __clz(__rbit64(v19));
    v12 = (v19 - 1) & v19;
    v15 = v21 + (v9 << 6);
LABEL_12:
    v16 = 8 * v15;
    v17 = *(_QWORD *)(*(_QWORD *)(v2 + 56) + v16);
    *(_QWORD *)(*(_QWORD *)(v4 + 48) + v16) = *(_QWORD *)(*(_QWORD *)(v2 + 48) + v16);
    *(_QWORD *)(*(_QWORD *)(v4 + 56) + v16) = v17;
  }
  v20 = v18 + 2;
  if (v20 >= v13)
    goto LABEL_26;
  v19 = *(_QWORD *)(v6 + 8 * v20);
  if (v19)
  {
    v9 = v20;
    goto LABEL_25;
  }
  while (1)
  {
    v9 = v20 + 1;
    if (__OFADD__(v20, 1))
      break;
    if (v9 >= v13)
      goto LABEL_26;
    v19 = *(_QWORD *)(v6 + 8 * v9);
    ++v20;
    if (v19)
      goto LABEL_25;
  }
LABEL_28:
  __break(1u);
  return result;
}

void *sub_1CA0F057C()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *result;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  __int128 v18;
  __int128 v19;
  int64_t v20;
  unint64_t v21;
  int64_t v22;
  _OWORD v23[2];
  uint64_t v24;

  v1 = v0;
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EF938450);
  v2 = *v0;
  v3 = sub_1CA1F124C();
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
LABEL_26:
    result = (void *)swift_release();
    *v1 = v4;
    return result;
  }
  result = (void *)(v3 + 64);
  v6 = v2 + 64;
  v7 = (unint64_t)((1 << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7)
    result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  v9 = 0;
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(v2 + 16);
  v10 = 1 << *(_BYTE *)(v2 + 32);
  v11 = -1;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  v12 = v11 & *(_QWORD *)(v2 + 64);
  v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    v20 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v20 >= v13)
      goto LABEL_26;
    v21 = *(_QWORD *)(v6 + 8 * v20);
    ++v9;
    if (!v21)
    {
      v9 = v20 + 1;
      if (v20 + 1 >= v13)
        goto LABEL_26;
      v21 = *(_QWORD *)(v6 + 8 * v9);
      if (!v21)
        break;
    }
LABEL_25:
    v12 = (v21 - 1) & v21;
    v15 = __clz(__rbit64(v21)) + (v9 << 6);
LABEL_12:
    result = (void *)sub_1CA0AB948(*(_QWORD *)(v2 + 48) + 40 * v15, (uint64_t)v23);
    v16 = *(_QWORD *)(*(_QWORD *)(v2 + 56) + 8 * v15);
    v17 = *(_QWORD *)(v4 + 48) + 40 * v15;
    v18 = v23[0];
    v19 = v23[1];
    *(_QWORD *)(v17 + 32) = v24;
    *(_OWORD *)v17 = v18;
    *(_OWORD *)(v17 + 16) = v19;
    *(_QWORD *)(*(_QWORD *)(v4 + 56) + 8 * v15) = v16;
  }
  v22 = v20 + 2;
  if (v22 >= v13)
    goto LABEL_26;
  v21 = *(_QWORD *)(v6 + 8 * v22);
  if (v21)
  {
    v9 = v22;
    goto LABEL_25;
  }
  while (1)
  {
    v9 = v22 + 1;
    if (__OFADD__(v22, 1))
      break;
    if (v9 >= v13)
      goto LABEL_26;
    v21 = *(_QWORD *)(v6 + 8 * v9);
    ++v22;
    if (v21)
      goto LABEL_25;
  }
LABEL_28:
  __break(1u);
  return result;
}

void *sub_1CA0F0750()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *result;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  int64_t v19;
  unint64_t v20;
  int64_t v21;
  _OWORD v22[2];

  v1 = v0;
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EF9384A8);
  v2 = *v0;
  v3 = sub_1CA1F124C();
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
LABEL_26:
    result = (void *)swift_release();
    *v1 = v4;
    return result;
  }
  result = (void *)(v3 + 64);
  v6 = v2 + 64;
  v7 = (unint64_t)((1 << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7)
    result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  v9 = 0;
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(v2 + 16);
  v10 = 1 << *(_BYTE *)(v2 + 32);
  v11 = -1;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  v12 = v11 & *(_QWORD *)(v2 + 64);
  v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    v19 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v19 >= v13)
      goto LABEL_26;
    v20 = *(_QWORD *)(v6 + 8 * v19);
    ++v9;
    if (!v20)
    {
      v9 = v19 + 1;
      if (v19 + 1 >= v13)
        goto LABEL_26;
      v20 = *(_QWORD *)(v6 + 8 * v9);
      if (!v20)
        break;
    }
LABEL_25:
    v12 = (v20 - 1) & v20;
    v15 = __clz(__rbit64(v20)) + (v9 << 6);
LABEL_12:
    v16 = 8 * v15;
    v17 = *(_QWORD *)(*(_QWORD *)(v2 + 48) + 8 * v15);
    v18 = 32 * v15;
    sub_1CA0B6A98(*(_QWORD *)(v2 + 56) + 32 * v15, (uint64_t)v22);
    *(_QWORD *)(*(_QWORD *)(v4 + 48) + v16) = v17;
    result = sub_1CA0AFCC0(v22, (_OWORD *)(*(_QWORD *)(v4 + 56) + v18));
  }
  v21 = v19 + 2;
  if (v21 >= v13)
    goto LABEL_26;
  v20 = *(_QWORD *)(v6 + 8 * v21);
  if (v20)
  {
    v9 = v21;
    goto LABEL_25;
  }
  while (1)
  {
    v9 = v21 + 1;
    if (__OFADD__(v21, 1))
      break;
    if (v9 >= v13)
      goto LABEL_26;
    v20 = *(_QWORD *)(v6 + 8 * v9);
    ++v21;
    if (v20)
      goto LABEL_25;
  }
LABEL_28:
  __break(1u);
  return result;
}

void *sub_1CA0F0910()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *result;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  int64_t v18;
  unint64_t v19;
  int64_t v20;
  unint64_t v21;

  v1 = v0;
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_1EF938480);
  v2 = *v0;
  v3 = sub_1CA1F124C();
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
LABEL_26:
    result = (void *)swift_release();
    *v1 = v4;
    return result;
  }
  result = (void *)(v3 + 64);
  v6 = v2 + 64;
  v7 = (unint64_t)((1 << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7)
    result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  v9 = 0;
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(v2 + 16);
  v10 = 1 << *(_BYTE *)(v2 + 32);
  v11 = -1;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  v12 = v11 & *(_QWORD *)(v2 + 64);
  v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    v18 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v18 >= v13)
      goto LABEL_26;
    v19 = *(_QWORD *)(v6 + 8 * v18);
    ++v9;
    if (!v19)
    {
      v9 = v18 + 1;
      if (v18 + 1 >= v13)
        goto LABEL_26;
      v19 = *(_QWORD *)(v6 + 8 * v9);
      if (!v19)
        break;
    }
LABEL_25:
    v21 = __clz(__rbit64(v19));
    v12 = (v19 - 1) & v19;
    v15 = v21 + (v9 << 6);
LABEL_12:
    v16 = 8 * v15;
    v17 = *(_QWORD *)(*(_QWORD *)(v2 + 56) + v16);
    *(_QWORD *)(*(_QWORD *)(v4 + 48) + v16) = *(_QWORD *)(*(_QWORD *)(v2 + 48) + v16);
    *(_QWORD *)(*(_QWORD *)(v4 + 56) + v16) = v17;
  }
  v20 = v18 + 2;
  if (v20 >= v13)
    goto LABEL_26;
  v19 = *(_QWORD *)(v6 + 8 * v20);
  if (v19)
  {
    v9 = v20;
    goto LABEL_25;
  }
  while (1)
  {
    v9 = v20 + 1;
    if (__OFADD__(v20, 1))
      break;
    if (v9 >= v13)
      goto LABEL_26;
    v19 = *(_QWORD *)(v6 + 8 * v9);
    ++v20;
    if (v19)
      goto LABEL_25;
  }
LABEL_28:
  __break(1u);
  return result;
}

void *sub_1CA0F0A9C()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *result;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  int64_t v22;
  unint64_t v23;
  int64_t v24;

  v1 = v0;
  __swift_instantiateConcreteTypeFromMangledName(&qword_1ED8528E0);
  v2 = *v0;
  v3 = sub_1CA1F124C();
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
LABEL_26:
    result = (void *)swift_release();
    *v1 = v4;
    return result;
  }
  result = (void *)(v3 + 64);
  v6 = v2 + 64;
  v7 = (unint64_t)((1 << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7)
    result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  v9 = 0;
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(v2 + 16);
  v10 = 1 << *(_BYTE *)(v2 + 32);
  v11 = -1;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  v12 = v11 & *(_QWORD *)(v2 + 64);
  v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    v22 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v22 >= v13)
      goto LABEL_26;
    v23 = *(_QWORD *)(v6 + 8 * v22);
    ++v9;
    if (!v23)
    {
      v9 = v22 + 1;
      if (v22 + 1 >= v13)
        goto LABEL_26;
      v23 = *(_QWORD *)(v6 + 8 * v9);
      if (!v23)
        break;
    }
LABEL_25:
    v12 = (v23 - 1) & v23;
    v15 = __clz(__rbit64(v23)) + (v9 << 6);
LABEL_12:
    v16 = 16 * v15;
    v17 = (_QWORD *)(*(_QWORD *)(v2 + 48) + 16 * v15);
    v18 = v17[1];
    v19 = 8 * v15;
    v20 = *(_QWORD *)(*(_QWORD *)(v2 + 56) + v19);
    v21 = (_QWORD *)(*(_QWORD *)(v4 + 48) + v16);
    *v21 = *v17;
    v21[1] = v18;
    *(_QWORD *)(*(_QWORD *)(v4 + 56) + v19) = v20;
    swift_bridgeObjectRetain();
    result = (void *)swift_bridgeObjectRetain();
  }
  v24 = v22 + 2;
  if (v24 >= v13)
    goto LABEL_26;
  v23 = *(_QWORD *)(v6 + 8 * v24);
  if (v23)
  {
    v9 = v24;
    goto LABEL_25;
  }
  while (1)
  {
    v9 = v24 + 1;
    if (__OFADD__(v24, 1))
      break;
    if (v9 >= v13)
      goto LABEL_26;
    v23 = *(_QWORD *)(v6 + 8 * v9);
    ++v24;
    if (v23)
      goto LABEL_25;
  }
LABEL_28:
  __break(1u);
  return result;
}

void *sub_1CA0F0C50()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *result;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  int v20;
  _QWORD *v21;
  int64_t v22;
  unint64_t v23;
  int64_t v24;

  v1 = v0;
  __swift_instantiateConcreteTypeFromMangledName(&qword_1ED8528E8);
  v2 = *v0;
  v3 = sub_1CA1F124C();
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
LABEL_26:
    result = (void *)swift_release();
    *v1 = v4;
    return result;
  }
  result = (void *)(v3 + 64);
  v6 = v2 + 64;
  v7 = (unint64_t)((1 << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7)
    result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  v9 = 0;
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(v2 + 16);
  v10 = 1 << *(_BYTE *)(v2 + 32);
  v11 = -1;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  v12 = v11 & *(_QWORD *)(v2 + 64);
  v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    v22 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v22 >= v13)
      goto LABEL_26;
    v23 = *(_QWORD *)(v6 + 8 * v22);
    ++v9;
    if (!v23)
    {
      v9 = v22 + 1;
      if (v22 + 1 >= v13)
        goto LABEL_26;
      v23 = *(_QWORD *)(v6 + 8 * v9);
      if (!v23)
        break;
    }
LABEL_25:
    v12 = (v23 - 1) & v23;
    v15 = __clz(__rbit64(v23)) + (v9 << 6);
LABEL_12:
    v16 = 16 * v15;
    v17 = (_QWORD *)(*(_QWORD *)(v2 + 48) + 16 * v15);
    v18 = v17[1];
    v19 = 4 * v15;
    v20 = *(_DWORD *)(*(_QWORD *)(v2 + 56) + v19);
    v21 = (_QWORD *)(*(_QWORD *)(v4 + 48) + v16);
    *v21 = *v17;
    v21[1] = v18;
    *(_DWORD *)(*(_QWORD *)(v4 + 56) + v19) = v20;
    result = (void *)swift_bridgeObjectRetain();
  }
  v24 = v22 + 2;
  if (v24 >= v13)
    goto LABEL_26;
  v23 = *(_QWORD *)(v6 + 8 * v24);
  if (v23)
  {
    v9 = v24;
    goto LABEL_25;
  }
  while (1)
  {
    v9 = v24 + 1;
    if (__OFADD__(v24, 1))
      break;
    if (v9 >= v13)
      goto LABEL_26;
    v23 = *(_QWORD *)(v6 + 8 * v9);
    ++v24;
    if (v23)
      goto LABEL_25;
  }
LABEL_28:
  __break(1u);
  return result;
}

void *sub_1CA0F0DFC()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *result;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  int64_t v22;
  unint64_t v23;
  int64_t v24;
  uint64_t *v25;
  _OWORD v26[2];

  v1 = v0;
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EF936FD0);
  v2 = *v0;
  v3 = sub_1CA1F124C();
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
    result = (void *)swift_release();
LABEL_28:
    *v1 = v4;
    return result;
  }
  v25 = v1;
  result = (void *)(v3 + 64);
  v6 = v2 + 64;
  v7 = (unint64_t)((1 << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7)
    result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  v9 = 0;
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(v2 + 16);
  v10 = 1 << *(_BYTE *)(v2 + 32);
  v11 = -1;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  v12 = v11 & *(_QWORD *)(v2 + 64);
  v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    v22 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_30;
    }
    if (v22 >= v13)
      goto LABEL_26;
    v23 = *(_QWORD *)(v6 + 8 * v22);
    ++v9;
    if (!v23)
    {
      v9 = v22 + 1;
      if (v22 + 1 >= v13)
        goto LABEL_26;
      v23 = *(_QWORD *)(v6 + 8 * v9);
      if (!v23)
        break;
    }
LABEL_25:
    v12 = (v23 - 1) & v23;
    v15 = __clz(__rbit64(v23)) + (v9 << 6);
LABEL_12:
    v16 = 16 * v15;
    v17 = (uint64_t *)(*(_QWORD *)(v2 + 48) + 16 * v15);
    v19 = *v17;
    v18 = v17[1];
    v20 = 32 * v15;
    sub_1CA0B6A98(*(_QWORD *)(v2 + 56) + 32 * v15, (uint64_t)v26);
    v21 = (_QWORD *)(*(_QWORD *)(v4 + 48) + v16);
    *v21 = v19;
    v21[1] = v18;
    sub_1CA0AFCC0(v26, (_OWORD *)(*(_QWORD *)(v4 + 56) + v20));
    result = (void *)swift_bridgeObjectRetain();
  }
  v24 = v22 + 2;
  if (v24 >= v13)
  {
LABEL_26:
    result = (void *)swift_release();
    v1 = v25;
    goto LABEL_28;
  }
  v23 = *(_QWORD *)(v6 + 8 * v24);
  if (v23)
  {
    v9 = v24;
    goto LABEL_25;
  }
  while (1)
  {
    v9 = v24 + 1;
    if (__OFADD__(v24, 1))
      break;
    if (v9 >= v13)
      goto LABEL_26;
    v23 = *(_QWORD *)(v6 + 8 * v9);
    ++v24;
    if (v23)
      goto LABEL_25;
  }
LABEL_30:
  __break(1u);
  return result;
}

void *sub_1CA0F0FE0()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *result;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  int64_t v18;
  unint64_t v19;
  int64_t v20;

  v1 = v0;
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_1EF938490);
  v2 = *v0;
  v3 = sub_1CA1F124C();
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
LABEL_26:
    result = (void *)swift_release();
    *v1 = v4;
    return result;
  }
  result = (void *)(v3 + 64);
  v6 = v2 + 64;
  v7 = (unint64_t)((1 << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7)
    result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  v9 = 0;
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(v2 + 16);
  v10 = 1 << *(_BYTE *)(v2 + 32);
  v11 = -1;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  v12 = v11 & *(_QWORD *)(v2 + 64);
  v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    v18 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v18 >= v13)
      goto LABEL_26;
    v19 = *(_QWORD *)(v6 + 8 * v18);
    ++v9;
    if (!v19)
    {
      v9 = v18 + 1;
      if (v18 + 1 >= v13)
        goto LABEL_26;
      v19 = *(_QWORD *)(v6 + 8 * v9);
      if (!v19)
        break;
    }
LABEL_25:
    v12 = (v19 - 1) & v19;
    v15 = __clz(__rbit64(v19)) + (v9 << 6);
LABEL_12:
    v16 = 8 * v15;
    v17 = *(_QWORD *)(*(_QWORD *)(v2 + 56) + v16);
    *(_QWORD *)(*(_QWORD *)(v4 + 48) + v16) = *(_QWORD *)(*(_QWORD *)(v2 + 48) + v16);
    *(_QWORD *)(*(_QWORD *)(v4 + 56) + v16) = v17;
    result = (void *)swift_bridgeObjectRetain();
  }
  v20 = v18 + 2;
  if (v20 >= v13)
    goto LABEL_26;
  v19 = *(_QWORD *)(v6 + 8 * v20);
  if (v19)
  {
    v9 = v20;
    goto LABEL_25;
  }
  while (1)
  {
    v9 = v20 + 1;
    if (__OFADD__(v20, 1))
      break;
    if (v9 >= v13)
      goto LABEL_26;
    v19 = *(_QWORD *)(v6 + 8 * v9);
    ++v20;
    if (v19)
      goto LABEL_25;
  }
LABEL_28:
  __break(1u);
  return result;
}

void *sub_1CA0F1180()
{
  return sub_1CA0F118C(&qword_1EF938470);
}

void *sub_1CA0F118C(uint64_t *a1)
{
  uint64_t *v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  void *result;
  uint64_t v7;
  unint64_t v8;
  int64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  int64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  void *v18;
  uint64_t v19;
  id v20;
  int64_t v21;
  unint64_t v22;
  int64_t v23;

  v2 = v1;
  __swift_instantiateConcreteTypeFromMangledName(a1);
  v3 = *v1;
  v4 = sub_1CA1F124C();
  v5 = v4;
  if (!*(_QWORD *)(v3 + 16))
  {
LABEL_26:
    result = (void *)swift_release();
    *v2 = v5;
    return result;
  }
  result = (void *)(v4 + 64);
  v7 = v3 + 64;
  v8 = (unint64_t)((1 << *(_BYTE *)(v5 + 32)) + 63) >> 6;
  if (v5 != v3 || (unint64_t)result >= v3 + 64 + 8 * v8)
    result = memmove(result, (const void *)(v3 + 64), 8 * v8);
  v10 = 0;
  *(_QWORD *)(v5 + 16) = *(_QWORD *)(v3 + 16);
  v11 = 1 << *(_BYTE *)(v3 + 32);
  v12 = -1;
  if (v11 < 64)
    v12 = ~(-1 << v11);
  v13 = v12 & *(_QWORD *)(v3 + 64);
  v14 = (unint64_t)(v11 + 63) >> 6;
  while (1)
  {
    if (v13)
    {
      v15 = __clz(__rbit64(v13));
      v13 &= v13 - 1;
      v16 = v15 | (v10 << 6);
      goto LABEL_12;
    }
    v21 = v10 + 1;
    if (__OFADD__(v10, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v21 >= v14)
      goto LABEL_26;
    v22 = *(_QWORD *)(v7 + 8 * v21);
    ++v10;
    if (!v22)
    {
      v10 = v21 + 1;
      if (v21 + 1 >= v14)
        goto LABEL_26;
      v22 = *(_QWORD *)(v7 + 8 * v10);
      if (!v22)
        break;
    }
LABEL_25:
    v13 = (v22 - 1) & v22;
    v16 = __clz(__rbit64(v22)) + (v10 << 6);
LABEL_12:
    v17 = 8 * v16;
    v18 = *(void **)(*(_QWORD *)(v3 + 48) + v17);
    v19 = *(_QWORD *)(*(_QWORD *)(v3 + 56) + v17);
    *(_QWORD *)(*(_QWORD *)(v5 + 48) + v17) = v18;
    *(_QWORD *)(*(_QWORD *)(v5 + 56) + v17) = v19;
    v20 = v18;
    result = (void *)swift_bridgeObjectRetain();
  }
  v23 = v21 + 2;
  if (v23 >= v14)
    goto LABEL_26;
  v22 = *(_QWORD *)(v7 + 8 * v23);
  if (v22)
  {
    v10 = v23;
    goto LABEL_25;
  }
  while (1)
  {
    v10 = v23 + 1;
    if (__OFADD__(v23, 1))
      break;
    if (v10 >= v14)
      goto LABEL_26;
    v22 = *(_QWORD *)(v7 + 8 * v10);
    ++v23;
    if (v22)
      goto LABEL_25;
  }
LABEL_28:
  __break(1u);
  return result;
}

void *sub_1CA0F132C()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *result;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  int64_t v22;
  unint64_t v23;
  int64_t v24;

  v1 = v0;
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_1EF937050);
  v2 = *v0;
  v3 = sub_1CA1F124C();
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
LABEL_26:
    result = (void *)swift_release();
    *v1 = v4;
    return result;
  }
  result = (void *)(v3 + 64);
  v6 = v2 + 64;
  v7 = (unint64_t)((1 << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7)
    result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  v9 = 0;
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(v2 + 16);
  v10 = 1 << *(_BYTE *)(v2 + 32);
  v11 = -1;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  v12 = v11 & *(_QWORD *)(v2 + 64);
  v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    v22 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v22 >= v13)
      goto LABEL_26;
    v23 = *(_QWORD *)(v6 + 8 * v22);
    ++v9;
    if (!v23)
    {
      v9 = v22 + 1;
      if (v22 + 1 >= v13)
        goto LABEL_26;
      v23 = *(_QWORD *)(v6 + 8 * v9);
      if (!v23)
        break;
    }
LABEL_25:
    v12 = (v23 - 1) & v23;
    v15 = __clz(__rbit64(v23)) + (v9 << 6);
LABEL_12:
    v16 = 16 * v15;
    v17 = (_QWORD *)(*(_QWORD *)(v2 + 48) + 16 * v15);
    v18 = v17[1];
    v19 = 8 * v15;
    v20 = *(_QWORD *)(*(_QWORD *)(v2 + 56) + v19);
    v21 = (_QWORD *)(*(_QWORD *)(v4 + 48) + v16);
    *v21 = *v17;
    v21[1] = v18;
    *(_QWORD *)(*(_QWORD *)(v4 + 56) + v19) = v20;
    swift_bridgeObjectRetain();
    result = (void *)swift_unknownObjectRetain();
  }
  v24 = v22 + 2;
  if (v24 >= v13)
    goto LABEL_26;
  v23 = *(_QWORD *)(v6 + 8 * v24);
  if (v23)
  {
    v9 = v24;
    goto LABEL_25;
  }
  while (1)
  {
    v9 = v24 + 1;
    if (__OFADD__(v24, 1))
      break;
    if (v9 >= v13)
      goto LABEL_26;
    v23 = *(_QWORD *)(v6 + 8 * v9);
    ++v24;
    if (v23)
      goto LABEL_25;
  }
LABEL_28:
  __break(1u);
  return result;
}

id sub_1CA0F14E0()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  id result;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  void *v17;
  int64_t v18;
  unint64_t v19;
  int64_t v20;

  v1 = v0;
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EF938458);
  v2 = *v0;
  v3 = sub_1CA1F124C();
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
LABEL_26:
    result = (id)swift_release();
    *v1 = v4;
    return result;
  }
  result = (id)(v3 + 64);
  v6 = v2 + 64;
  v7 = (unint64_t)((1 << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7)
    result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  v9 = 0;
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(v2 + 16);
  v10 = 1 << *(_BYTE *)(v2 + 32);
  v11 = -1;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  v12 = v11 & *(_QWORD *)(v2 + 64);
  v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    v18 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v18 >= v13)
      goto LABEL_26;
    v19 = *(_QWORD *)(v6 + 8 * v18);
    ++v9;
    if (!v19)
    {
      v9 = v18 + 1;
      if (v18 + 1 >= v13)
        goto LABEL_26;
      v19 = *(_QWORD *)(v6 + 8 * v9);
      if (!v19)
        break;
    }
LABEL_25:
    v12 = (v19 - 1) & v19;
    v15 = __clz(__rbit64(v19)) + (v9 << 6);
LABEL_12:
    v16 = 8 * v15;
    v17 = *(void **)(*(_QWORD *)(v2 + 56) + v16);
    *(_QWORD *)(*(_QWORD *)(v4 + 48) + v16) = *(_QWORD *)(*(_QWORD *)(v2 + 48) + v16);
    *(_QWORD *)(*(_QWORD *)(v4 + 56) + v16) = v17;
    result = v17;
  }
  v20 = v18 + 2;
  if (v20 >= v13)
    goto LABEL_26;
  v19 = *(_QWORD *)(v6 + 8 * v20);
  if (v19)
  {
    v9 = v20;
    goto LABEL_25;
  }
  while (1)
  {
    v9 = v20 + 1;
    if (__OFADD__(v20, 1))
      break;
    if (v9 >= v13)
      goto LABEL_26;
    v19 = *(_QWORD *)(v6 + 8 * v9);
    ++v20;
    if (v19)
      goto LABEL_25;
  }
LABEL_28:
  __break(1u);
  return result;
}

unint64_t sub_1CA0F1680@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t *v2;
  uint64_t *v3;
  unint64_t result;
  char v6;
  unint64_t v7;
  int isUniquelyReferenced_nonNull_native;
  uint64_t v9;
  uint64_t v10;

  v3 = v2;
  result = sub_1CA0AA4D8(a1);
  if ((v6 & 1) != 0)
  {
    v7 = result;
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    v9 = *v2;
    v10 = *v3;
    *v3 = 0x8000000000000000;
    if (!isUniquelyReferenced_nonNull_native)
    {
      sub_1CA0EF024();
      v9 = v10;
    }
    *a2 = *(_QWORD *)(*(_QWORD *)(v9 + 56) + 8 * v7);
    sub_1CA0F18F4(v7, v9);
    *v3 = v9;
    return swift_bridgeObjectRelease();
  }
  else
  {
    *a2 = 0;
  }
  return result;
}

uint64_t sub_1CA0F1718(uint64_t a1)
{
  uint64_t *v1;
  uint64_t *v2;
  unint64_t v4;
  char v5;
  int isUniquelyReferenced_nonNull_native;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v12;

  v2 = v1;
  swift_bridgeObjectRetain();
  v4 = sub_1CA0AA530(a1);
  LOBYTE(a1) = v5;
  swift_bridgeObjectRelease();
  if ((a1 & 1) == 0)
    return 0;
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  v7 = *v2;
  v12 = *v2;
  *v2 = 0x8000000000000000;
  if (!isUniquelyReferenced_nonNull_native)
  {
    sub_1CA0EF350();
    v7 = v12;
  }
  v8 = *(_QWORD *)(v7 + 48);
  v9 = sub_1CA1F0808();
  (*(void (**)(unint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 8))(v8 + *(_QWORD *)(*(_QWORD *)(v9 - 8) + 72) * v4, v9);
  v10 = *(_QWORD *)(*(_QWORD *)(v7 + 56) + 16 * v4);
  sub_1CA0F1AAC(v4, v7);
  *v2 = v7;
  swift_bridgeObjectRelease();
  return v10;
}

double sub_1CA0F1804@<D0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _OWORD *a3@<X8>)
{
  uint64_t *v3;
  uint64_t *v4;
  unint64_t v8;
  char v9;
  int isUniquelyReferenced_nonNull_native;
  uint64_t v11;
  double result;
  uint64_t v13;

  v4 = v3;
  swift_bridgeObjectRetain();
  v8 = sub_1CA0AA474(a1, a2);
  LOBYTE(a2) = v9;
  swift_bridgeObjectRelease();
  if ((a2 & 1) != 0)
  {
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    v11 = *v4;
    v13 = *v4;
    *v4 = 0x8000000000000000;
    if (!isUniquelyReferenced_nonNull_native)
    {
      sub_1CA0F0DFC();
      v11 = v13;
    }
    swift_bridgeObjectRelease();
    sub_1CA0AFCC0((_OWORD *)(*(_QWORD *)(v11 + 56) + 32 * v8), a3);
    sub_1CA0F209C(v8, v11);
    *v4 = v11;
    swift_bridgeObjectRelease();
  }
  else
  {
    result = 0.0;
    *a3 = 0u;
    a3[1] = 0u;
  }
  return result;
}

unint64_t sub_1CA0F18F4(unint64_t result, uint64_t a2)
{
  int64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  _QWORD *v12;
  uint64_t v13;
  _QWORD *v14;
  _QWORD *v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  BOOL v20;
  uint64_t v21;

  v3 = result;
  v4 = a2 + 64;
  v5 = -1 << *(_BYTE *)(a2 + 32);
  v6 = (result + 1) & ~v5;
  if (((1 << v6) & *(_QWORD *)(a2 + 64 + 8 * (v6 >> 6))) != 0)
  {
    v7 = ~v5;
    result = sub_1CA1F0F40();
    if ((*(_QWORD *)(v4 + 8 * (v6 >> 6)) & (1 << v6)) != 0)
    {
      v8 = (result + 1) & v7;
      do
      {
        sub_1CA1F13F0();
        sub_1CA1F13FC();
        result = sub_1CA1F1438();
        v9 = result & v7;
        if (v3 >= (uint64_t)v8)
        {
          if (v9 < v8)
            goto LABEL_5;
        }
        else if (v9 >= v8)
        {
          goto LABEL_11;
        }
        if (v3 >= (uint64_t)v9)
        {
LABEL_11:
          v10 = *(_QWORD *)(a2 + 48);
          v11 = (_QWORD *)(v10 + 8 * v3);
          v12 = (_QWORD *)(v10 + 8 * v6);
          if (v3 != v6 || v11 >= v12 + 1)
            *v11 = *v12;
          v13 = *(_QWORD *)(a2 + 56);
          v14 = (_QWORD *)(v13 + 8 * v3);
          v15 = (_QWORD *)(v13 + 8 * v6);
          if (v3 != v6 || (v3 = v6, v14 >= v15 + 1))
          {
            *v14 = *v15;
            v3 = v6;
          }
        }
LABEL_5:
        v6 = (v6 + 1) & v7;
      }
      while (((*(_QWORD *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFF8)) >> v6) & 1) != 0);
    }
    v16 = (uint64_t *)(v4 + 8 * ((unint64_t)v3 >> 6));
    v17 = *v16;
    v18 = (-1 << v3) - 1;
  }
  else
  {
    v16 = (uint64_t *)(v4 + 8 * (result >> 6));
    v18 = *v16;
    v17 = (-1 << result) - 1;
  }
  *v16 = v18 & v17;
  v19 = *(_QWORD *)(a2 + 16);
  v20 = __OFSUB__(v19, 1);
  v21 = v19 - 1;
  if (v20)
  {
    __break(1u);
  }
  else
  {
    *(_QWORD *)(a2 + 16) = v21;
    ++*(_DWORD *)(a2 + 36);
  }
  return result;
}

void sub_1CA0F1AAC(int64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  int64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v20;
  _OWORD *v21;
  _OWORD *v22;
  uint64_t *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  BOOL v27;
  uint64_t v28;
  uint64_t v29;
  void (*v30)(char *, unint64_t, uint64_t);
  uint64_t v31;
  uint64_t v32;

  v4 = sub_1CA1F0808();
  v31 = *(_QWORD *)(v4 - 8);
  MEMORY[0x1E0C80A78](v4, v5);
  v7 = (char *)&v29 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = -1 << *(_BYTE *)(a2 + 32);
  v9 = (a1 + 1) & ~v8;
  if (((1 << v9) & *(_QWORD *)(a2 + 64 + 8 * (v9 >> 6))) != 0)
  {
    v10 = ~v8;
    v32 = a2 + 64;
    v11 = sub_1CA1F0F40();
    v12 = v32;
    if ((*(_QWORD *)(v32 + 8 * (v9 >> 6)) & (1 << v9)) != 0)
    {
      v13 = (v11 + 1) & v10;
      v14 = *(_QWORD *)(v31 + 72);
      v30 = *(void (**)(char *, unint64_t, uint64_t))(v31 + 16);
      do
      {
        v15 = v14 * v9;
        v30(v7, *(_QWORD *)(a2 + 48) + v14 * v9, v4);
        sub_1CA0F2728();
        v16 = sub_1CA1F0958();
        (*(void (**)(char *, uint64_t))(v31 + 8))(v7, v4);
        v17 = v16 & v10;
        if (a1 >= (uint64_t)v13)
        {
          if (v17 >= v13 && a1 >= (uint64_t)v17)
          {
LABEL_17:
            if (v14 * a1 < v15
              || *(_QWORD *)(a2 + 48) + v14 * a1 >= (unint64_t)(*(_QWORD *)(a2 + 48) + v15 + v14))
            {
              swift_arrayInitWithTakeFrontToBack();
            }
            else if (v14 * a1 != v15)
            {
              swift_arrayInitWithTakeBackToFront();
            }
            v20 = *(_QWORD *)(a2 + 56);
            v21 = (_OWORD *)(v20 + 16 * a1);
            v22 = (_OWORD *)(v20 + 16 * v9);
            v12 = v32;
            if (a1 != v9 || (a1 = v9, v21 >= v22 + 1))
            {
              *v21 = *v22;
              a1 = v9;
            }
            goto LABEL_5;
          }
        }
        else if (v17 >= v13 || a1 >= (uint64_t)v17)
        {
          goto LABEL_17;
        }
        v12 = v32;
LABEL_5:
        v9 = (v9 + 1) & v10;
      }
      while (((*(_QWORD *)(v12 + ((v9 >> 3) & 0xFFFFFFFFFFFFF8)) >> v9) & 1) != 0);
    }
    v23 = (uint64_t *)(v12 + 8 * ((unint64_t)a1 >> 6));
    v24 = *v23;
    v25 = (-1 << a1) - 1;
  }
  else
  {
    v23 = (uint64_t *)(a2 + 64 + 8 * ((unint64_t)a1 >> 6));
    v25 = *v23;
    v24 = (-1 << a1) - 1;
  }
  *v23 = v25 & v24;
  v26 = *(_QWORD *)(a2 + 16);
  v27 = __OFSUB__(v26, 1);
  v28 = v26 - 1;
  if (v27)
  {
    __break(1u);
  }
  else
  {
    *(_QWORD *)(a2 + 16) = v28;
    ++*(_DWORD *)(a2 + 36);
  }
}

void sub_1CA0F1D10(unint64_t a1, uint64_t a2)
{
  int64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  id v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v15;
  _QWORD *v16;
  _QWORD *v17;
  uint64_t v18;
  _QWORD *v19;
  _QWORD *v20;
  uint64_t *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  BOOL v25;
  uint64_t v26;

  v3 = a1;
  v4 = a2 + 64;
  v5 = -1 << *(_BYTE *)(a2 + 32);
  v6 = (a1 + 1) & ~v5;
  if (((1 << v6) & *(_QWORD *)(a2 + 64 + 8 * (v6 >> 6))) != 0)
  {
    v7 = ~v5;
    v8 = sub_1CA1F0F40();
    if ((*(_QWORD *)(v4 + 8 * (v6 >> 6)) & (1 << v6)) != 0)
    {
      v9 = (v8 + 1) & v7;
      do
      {
        v10 = *(id *)(*(_QWORD *)(a2 + 48) + 8 * v6);
        v11 = sub_1CA1F0E5C();

        v12 = v11 & v7;
        if (v3 >= (uint64_t)v9)
        {
          if (v12 >= v9 && v3 >= (uint64_t)v12)
          {
LABEL_16:
            v15 = *(_QWORD *)(a2 + 48);
            v16 = (_QWORD *)(v15 + 8 * v3);
            v17 = (_QWORD *)(v15 + 8 * v6);
            if (v3 != v6 || v16 >= v17 + 1)
              *v16 = *v17;
            v18 = *(_QWORD *)(a2 + 56);
            v19 = (_QWORD *)(v18 + 8 * v3);
            v20 = (_QWORD *)(v18 + 8 * v6);
            if (v3 != v6 || (v3 = v6, v19 >= v20 + 1))
            {
              *v19 = *v20;
              v3 = v6;
            }
          }
        }
        else if (v12 >= v9 || v3 >= (uint64_t)v12)
        {
          goto LABEL_16;
        }
        v6 = (v6 + 1) & v7;
      }
      while (((*(_QWORD *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFF8)) >> v6) & 1) != 0);
    }
    v21 = (uint64_t *)(v4 + 8 * ((unint64_t)v3 >> 6));
    v22 = *v21;
    v23 = (-1 << v3) - 1;
  }
  else
  {
    v21 = (uint64_t *)(v4 + 8 * (a1 >> 6));
    v23 = *v21;
    v22 = (-1 << a1) - 1;
  }
  *v21 = v23 & v22;
  v24 = *(_QWORD *)(a2 + 16);
  v25 = __OFSUB__(v24, 1);
  v26 = v24 - 1;
  if (v25)
  {
    __break(1u);
  }
  else
  {
    *(_QWORD *)(a2 + 16) = v26;
    ++*(_DWORD *)(a2 + 36);
  }
}

unint64_t sub_1CA0F1EC0(unint64_t result, uint64_t a2)
{
  int64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  void (*v10)(_BYTE *);
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  _QWORD *v15;
  uint64_t v16;
  _OWORD *v17;
  _OWORD *v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  BOOL v23;
  uint64_t v24;
  _BYTE v25[72];

  v3 = result;
  v4 = a2 + 64;
  v5 = -1 << *(_BYTE *)(a2 + 32);
  v6 = (result + 1) & ~v5;
  if (((1 << v6) & *(_QWORD *)(a2 + 64 + 8 * (v6 >> 6))) != 0)
  {
    v7 = ~v5;
    result = sub_1CA1F0F40();
    if ((*(_QWORD *)(v4 + 8 * (v6 >> 6)) & (1 << v6)) != 0)
    {
      v8 = (result + 1) & v7;
      do
      {
        v9 = *(_QWORD *)(*(_QWORD *)(a2 + 48) + 8 * v6);
        sub_1CA1F13F0();
        v10 = *(void (**)(_BYTE *))(*(_QWORD *)v9 + 272);
        swift_retain();
        v10(v25);
        v11 = sub_1CA1F1438();
        result = swift_release();
        v12 = v11 & v7;
        if (v3 >= (uint64_t)v8)
        {
          if (v12 < v8)
            goto LABEL_5;
        }
        else if (v12 >= v8)
        {
          goto LABEL_11;
        }
        if (v3 >= (uint64_t)v12)
        {
LABEL_11:
          v13 = *(_QWORD *)(a2 + 48);
          v14 = (_QWORD *)(v13 + 8 * v3);
          v15 = (_QWORD *)(v13 + 8 * v6);
          if (v3 != v6 || v14 >= v15 + 1)
            *v14 = *v15;
          v16 = *(_QWORD *)(a2 + 56);
          v17 = (_OWORD *)(v16 + 16 * v3);
          v18 = (_OWORD *)(v16 + 16 * v6);
          if (v3 != v6 || (v3 = v6, v17 >= v18 + 1))
          {
            *v17 = *v18;
            v3 = v6;
          }
        }
LABEL_5:
        v6 = (v6 + 1) & v7;
      }
      while (((*(_QWORD *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFF8)) >> v6) & 1) != 0);
    }
    v19 = (uint64_t *)(v4 + 8 * ((unint64_t)v3 >> 6));
    v20 = *v19;
    v21 = (-1 << v3) - 1;
  }
  else
  {
    v19 = (uint64_t *)(v4 + 8 * (result >> 6));
    v21 = *v19;
    v20 = (-1 << result) - 1;
  }
  *v19 = v21 & v20;
  v22 = *(_QWORD *)(a2 + 16);
  v23 = __OFSUB__(v22, 1);
  v24 = v22 - 1;
  if (v23)
  {
    __break(1u);
  }
  else
  {
    *(_QWORD *)(a2 + 16) = v24;
    ++*(_DWORD *)(a2 + 36);
  }
  return result;
}

unint64_t sub_1CA0F209C(unint64_t result, uint64_t a2)
{
  int64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  __int128 v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  _OWORD *v13;
  _OWORD *v14;
  uint64_t v15;
  _OWORD *v16;
  _OWORD *v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  BOOL v22;
  uint64_t v23;

  v3 = result;
  v4 = a2 + 64;
  v5 = -1 << *(_BYTE *)(a2 + 32);
  v6 = (result + 1) & ~v5;
  if (((1 << v6) & *(_QWORD *)(a2 + 64 + 8 * (v6 >> 6))) != 0)
  {
    v7 = ~v5;
    result = sub_1CA1F0F40();
    if ((*(_QWORD *)(v4 + 8 * (v6 >> 6)) & (1 << v6)) != 0)
    {
      v8 = (result + 1) & v7;
      do
      {
        sub_1CA1F13F0();
        swift_bridgeObjectRetain();
        sub_1CA1F0A30();
        v10 = sub_1CA1F1438();
        result = swift_bridgeObjectRelease();
        v11 = v10 & v7;
        if (v3 >= (uint64_t)v8)
        {
          if (v11 < v8)
            goto LABEL_5;
        }
        else if (v11 >= v8)
        {
          goto LABEL_11;
        }
        if (v3 >= (uint64_t)v11)
        {
LABEL_11:
          v12 = *(_QWORD *)(a2 + 48);
          v13 = (_OWORD *)(v12 + 16 * v3);
          v14 = (_OWORD *)(v12 + 16 * v6);
          if (v3 != v6 || v13 >= v14 + 1)
            *v13 = *v14;
          v15 = *(_QWORD *)(a2 + 56);
          v16 = (_OWORD *)(v15 + 32 * v3);
          v17 = (_OWORD *)(v15 + 32 * v6);
          if (v3 != v6 || (v3 = v6, v16 >= v17 + 2))
          {
            v9 = v17[1];
            *v16 = *v17;
            v16[1] = v9;
            v3 = v6;
          }
        }
LABEL_5:
        v6 = (v6 + 1) & v7;
      }
      while (((*(_QWORD *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFF8)) >> v6) & 1) != 0);
    }
    v18 = (uint64_t *)(v4 + 8 * ((unint64_t)v3 >> 6));
    v19 = *v18;
    v20 = (-1 << v3) - 1;
  }
  else
  {
    v18 = (uint64_t *)(v4 + 8 * (result >> 6));
    v20 = *v18;
    v19 = (-1 << result) - 1;
  }
  *v18 = v20 & v19;
  v21 = *(_QWORD *)(a2 + 16);
  v22 = __OFSUB__(v21, 1);
  v23 = v21 - 1;
  if (v22)
  {
    __break(1u);
  }
  else
  {
    *(_QWORD *)(a2 + 16) = v23;
    ++*(_DWORD *)(a2 + 36);
  }
  return result;
}

uint64_t sub_1CA0F2270(__int128 *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  int64_t v8;
  uint64_t result;
  uint64_t v10;
  int64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  void *v15;
  id v16;
  int64_t v17;
  unint64_t v18;
  int64_t v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  uint64_t v24;

  v4 = a2 + 64;
  v5 = 1 << *(_BYTE *)(a2 + 32);
  v6 = -1;
  if (v5 < 64)
    v6 = ~(-1 << v5);
  v7 = v6 & *(_QWORD *)(a2 + 64);
  v8 = (unint64_t)(v5 + 63) >> 6;
  result = swift_bridgeObjectRetain();
  v10 = 0;
  v11 = 0;
  while (1)
  {
    if (v7)
    {
      v12 = __clz(__rbit64(v7));
      v7 &= v7 - 1;
      v13 = v12 | (v11 << 6);
      goto LABEL_5;
    }
    v17 = v11 + 1;
    if (__OFADD__(v11, 1))
    {
      __break(1u);
      goto LABEL_21;
    }
    if (v17 >= v8)
      goto LABEL_19;
    v18 = *(_QWORD *)(v4 + 8 * v17);
    ++v11;
    if (!v18)
    {
      v11 = v17 + 1;
      if (v17 + 1 >= v8)
        goto LABEL_19;
      v18 = *(_QWORD *)(v4 + 8 * v11);
      if (!v18)
        break;
    }
LABEL_18:
    v7 = (v18 - 1) & v18;
    v13 = __clz(__rbit64(v18)) + (v11 << 6);
LABEL_5:
    v14 = *(_QWORD *)(*(_QWORD *)(a2 + 56) + 8 * v13);
    v20 = *a1;
    v21 = a1[1];
    v22 = a1[2];
    v23 = a1[3];
    v24 = *((_QWORD *)a1 + 8);
    sub_1CA1F13FC();
    v15 = *(void **)(v14 + 16);
    swift_retain();
    v16 = v15;
    objc_msgSend(v16, sel_hash, v20, v21, v22, v23, v24);
    sub_1CA1F13FC();
    swift_release();

    result = sub_1CA1F1438();
    v10 ^= result;
  }
  v19 = v17 + 2;
  if (v19 >= v8)
  {
LABEL_19:
    swift_release();
    return sub_1CA1F13FC();
  }
  v18 = *(_QWORD *)(v4 + 8 * v19);
  if (v18)
  {
    v11 = v19;
    goto LABEL_18;
  }
  while (1)
  {
    v11 = v19 + 1;
    if (__OFADD__(v19, 1))
      break;
    if (v11 >= v8)
      goto LABEL_19;
    v18 = *(_QWORD *)(v4 + 8 * v11);
    ++v19;
    if (v18)
      goto LABEL_18;
  }
LABEL_21:
  __break(1u);
  return result;
}

uint64_t sub_1CA0F2420(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  void *v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  id v10;
  uint64_t v11;
  uint64_t result;

  if ((a1 & 0x8000000000000000) == 0)
  {
    if (a1)
    {
      v4 = sub_1CA1F0B68();
      *(_QWORD *)(v4 + 16) = a1;
    }
    else
    {
      v4 = MEMORY[0x1E0DEE9D8];
    }
    v5 = *(void **)(a2 + 16);
    swift_retain();
    v6 = (unint64_t)objc_msgSend(v5, sel_startIndex);
    v8 = v7;
    v9 = 0;
    while ((id)v6 != objc_msgSend(*(id *)(a2 + 16), sel_endIndex))
    {
      v10 = objc_msgSend(*(id *)(a2 + 16), sel_indexAfterIndex_, v6, v8);
      if ((v6 & 0x8000000000000000) != 0)
      {
        __break(1u);
        goto LABEL_14;
      }
      v8 = v11;
      *(_QWORD *)(v4 + 8 * v9 + 32) = v6;
      v6 = (unint64_t)v10;
      if (__OFADD__(v9++, 1))
      {
        __break(1u);
        break;
      }
    }
    swift_release();
    if (v9 <= a1)
    {
      *(_QWORD *)(v4 + 16) = v9;
      return v4;
    }
LABEL_14:
    __break(1u);
  }
  swift_release();
  result = sub_1CA1F11BC();
  __break(1u);
  return result;
}

uint64_t *sub_1CA0F2588@<X0>(uint64_t *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t *v2;

  return sub_1CA0EABCC(a1, v2[5], v2[6], v2[2], v2[3], a2);
}

unint64_t sub_1CA0F25AC()
{
  unint64_t result;

  result = qword_1EF938438;
  if (!qword_1EF938438)
  {
    result = MEMORY[0x1CAA4BB30](&protocol conformance descriptor for ElementIdentifierSet, &type metadata for ElementIdentifierSet);
    atomic_store(result, (unint64_t *)&qword_1EF938438);
  }
  return result;
}

unint64_t sub_1CA0F25F4()
{
  unint64_t result;

  result = qword_1EF938440;
  if (!qword_1EF938440)
  {
    result = MEMORY[0x1CAA4BB30](&protocol conformance descriptor for ElementIdentifierTupleSet, &type metadata for ElementIdentifierTupleSet);
    atomic_store(result, (unint64_t *)&qword_1EF938440);
  }
  return result;
}

unint64_t sub_1CA0F263C()
{
  unint64_t result;

  result = qword_1EF938448;
  if (!qword_1EF938448)
  {
    result = MEMORY[0x1CAA4BB30](&protocol conformance descriptor for ElementIdentifierTupleSet, &type metadata for ElementIdentifierTupleSet);
    atomic_store(result, (unint64_t *)&qword_1EF938448);
  }
  return result;
}

uint64_t sub_1CA0F2680@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X1>, _QWORD *a3@<X8>)
{
  uint64_t v4;
  uint64_t result;
  uint64_t v6[2];
  uint64_t v7;

  v4 = *a1;
  v6[0] = *a2;
  v6[1] = v4;
  result = ElementIdentifierTupleSet.subscript.getter(v6, &v7);
  *a3 = v7;
  return result;
}

unint64_t sub_1CA0F26C8(uint64_t *a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;

  v3 = *a1;
  v5 = *a3;
  v6 = v3;
  swift_retain();
  return ElementIdentifierTupleSet.subscript.setter(&v6, &v5);
}

uint64_t sub_1CA0F2708()
{
  return 0;
}

ValueMetadata *type metadata accessor for ElementIdentifierTupleSet()
{
  return &type metadata for ElementIdentifierTupleSet;
}

unint64_t sub_1CA0F2728()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1EF936F50;
  if (!qword_1EF936F50)
  {
    v1 = sub_1CA1F0808();
    result = MEMORY[0x1CAA4BB30](MEMORY[0x1E0CB0018], v1);
    atomic_store(result, (unint64_t *)&qword_1EF936F50);
  }
  return result;
}

uint64_t KGElementIdentifier.hash(into:)()
{
  return sub_1CA1F13FC();
}

__C::KGElementIdentifier __swiftcall KGElementIdentifier.advanced(by:)(__C::KGElementIdentifier by)
{
  unint64_t v1;
  BOOL v2;

  if ((by.rawValue & 0x8000000000000000) == 0)
  {
    v2 = __CFADD__(v1, by.rawValue);
    by.rawValue += v1;
    if (!v2)
      return by;
    __break(1u);
  }
  v2 = v1 >= -(uint64_t)by.rawValue;
  by.rawValue += v1;
  if (!v2)
    __break(1u);
  return by;
}

Swift::Int __swiftcall KGElementIdentifier.distance(to:)(__C::KGElementIdentifier to)
{
  Swift::UInt v1;
  BOOL v3;
  Swift::Int result;
  uint64_t v5;

  v3 = to.rawValue >= v1;
  result = to.rawValue - v1;
  if (!v3)
  {
    v5 = v1 - to.rawValue;
    if (v5 >= 0)
      return -v5;
    __break(1u);
    goto LABEL_7;
  }
  if (result < 0)
LABEL_7:
    __break(1u);
  return result;
}

uint64_t *sub_1CA0F27E4@<X0>(uint64_t *result@<X0>, _QWORD *a2@<X8>)
{
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;

  v3 = *result;
  v4 = *v2;
  if (*result >= (unint64_t)*v2)
  {
    if (*result - *v2 >= 0)
    {
      *a2 = *result - *v2;
      return result;
    }
  }
  else
  {
    if (v4 - v3 >= 0)
    {
      *a2 = v3 - v4;
      return result;
    }
    __break(1u);
  }
  __break(1u);
  return result;
}

uint64_t *sub_1CA0F281C@<X0>(uint64_t *result@<X0>, unint64_t *a2@<X8>)
{
  unint64_t *v2;
  unint64_t v3;
  unint64_t v4;
  BOOL v5;
  unint64_t v6;

  v3 = *result;
  v4 = *v2;
  if ((*result & 0x8000000000000000) == 0)
  {
    v5 = __CFADD__(v4, v3);
    v3 += v4;
    if (!v5)
      goto LABEL_7;
    __break(1u);
  }
  v6 = -(uint64_t)v3;
  v5 = v4 >= v6;
  v3 = v4 - v6;
  if (!v5)
  {
    __break(1u);
    return result;
  }
LABEL_7:
  *a2 = v3;
  return result;
}

unint64_t *sub_1CA0F284C(unint64_t *result, uint64_t a2, uint64_t a3, unint64_t *a4, uint64_t a5, uint64_t *a6)
{
  unint64_t v6;
  uint64_t v7;
  BOOL v8;
  unint64_t v9;

  v6 = *a4;
  v7 = *a6;
  if ((*a6 & 0x8000000000000000) == 0)
  {
    v8 = __CFADD__(v6, v7);
    v6 += v7;
    if (!v8)
      goto LABEL_7;
    __break(1u);
  }
  v9 = -v7;
  v8 = v6 >= v9;
  v6 -= v9;
  if (!v8)
  {
    __break(1u);
    return result;
  }
LABEL_7:
  *result = v6;
  return 0;
}

uint64_t *sub_1CA0F2884(uint64_t *result, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v2 = *result;
  v3 = *a2;
  v4 = *a2 - *result;
  if (*a2 >= (unint64_t)*result)
  {
    if (*a2 - *result >= 0)
      return (uint64_t *)(v4 > 0);
  }
  else
  {
    if (v2 - v3 >= 0)
    {
      v4 = v3 - v2;
      return (uint64_t *)(v4 > 0);
    }
    __break(1u);
  }
  __break(1u);
  return result;
}

uint64_t *sub_1CA0F28BC(uint64_t *result, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v2 = *result;
  v3 = *a2;
  v4 = *result - *a2;
  if (*result >= (unint64_t)*a2)
  {
    if (*result - *a2 >= 0)
      return (uint64_t *)(v4 < 1);
  }
  else
  {
    if (v3 - v2 >= 0)
    {
      v4 = v2 - v3;
      return (uint64_t *)(v4 < 1);
    }
    __break(1u);
  }
  __break(1u);
  return result;
}

uint64_t *sub_1CA0F28F4(uint64_t *result, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v2 = *result;
  v3 = *a2;
  v4 = *a2 - *result;
  if (*a2 >= (unint64_t)*result)
  {
    if (*a2 - *result >= 0)
      return (uint64_t *)(v4 < 1);
  }
  else
  {
    if (v2 - v3 >= 0)
    {
      v4 = v3 - v2;
      return (uint64_t *)(v4 < 1);
    }
    __break(1u);
  }
  __break(1u);
  return result;
}

uint64_t *sub_1CA0F292C(uint64_t *result, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v2 = *result;
  v3 = *a2;
  v4 = *result - *a2;
  if (*result >= (unint64_t)*a2)
  {
    if (*result - *a2 >= 0)
      return (uint64_t *)(v4 > 0);
  }
  else
  {
    if (v3 - v2 >= 0)
    {
      v4 = v2 - v3;
      return (uint64_t *)(v4 > 0);
    }
    __break(1u);
  }
  __break(1u);
  return result;
}

uint64_t KGElementIdentifier.description.getter()
{
  sub_1CA0C7504();
  return sub_1CA1F0EF8();
}

uint64_t sub_1CA0F29A0()
{
  return sub_1CA0F29E8((unint64_t *)&unk_1ED852AF8, (uint64_t)&unk_1CA1F8FC8);
}

uint64_t sub_1CA0F29C4()
{
  return sub_1CA0F29E8(&qword_1EF9384D8, (uint64_t)&protocol conformance descriptor for KGElementIdentifier);
}

uint64_t sub_1CA0F29E8(unint64_t *a1, uint64_t a2)
{
  uint64_t result;
  uint64_t v5;

  result = *a1;
  if (!result)
  {
    type metadata accessor for KGElementIdentifier(255);
    result = MEMORY[0x1CAA4BB30](a2, v5);
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_1CA0F2A28()
{
  return MEMORY[0x1E0DEB468];
}

uint64_t sub_1CA0F2A34()
{
  sub_1CA0C7504();
  return sub_1CA1F0EF8();
}

uint64_t sub_1CA0F2A74(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t *v3;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v8;
  _OWORD v9[2];

  if (*(_QWORD *)(a1 + 24))
  {
    sub_1CA0AFCC0((_OWORD *)a1, v9);
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    v8 = *v3;
    *v3 = 0x8000000000000000;
    sub_1CA0AE950(v9, a2, a3, isUniquelyReferenced_nonNull_native);
    *v3 = v8;
    swift_bridgeObjectRelease();
    return swift_bridgeObjectRelease();
  }
  else
  {
    sub_1CA0B6AD4(a1, &qword_1ED8528F8);
    sub_1CA0F1804(a2, a3, v9);
    swift_bridgeObjectRelease();
    return sub_1CA0B6AD4((uint64_t)v9, &qword_1ED8528F8);
  }
}

uint64_t FilterProperties.init(dictionaryLiteral:)@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  _OWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char isUniquelyReferenced_nonNull_native;
  char v15;
  unint64_t v16;
  uint64_t v17;
  _BOOL8 v18;
  uint64_t v19;
  char v20;
  unint64_t v21;
  char v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  _QWORD *v29;
  uint64_t *boxed_opaque_existential_0Tm;
  char v31;
  char v32;
  unint64_t v33;
  uint64_t v34;
  _BOOL8 v35;
  uint64_t v36;
  char v37;
  unint64_t v38;
  char v39;
  uint64_t *v40;
  uint64_t v41;
  BOOL v42;
  uint64_t v43;
  _OWORD *v44;
  uint64_t *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t result;
  __int128 v50[2];
  uint64_t v51;
  _OWORD v52[2];
  uint64_t v53[3];
  uint64_t v54;
  uint64_t v55;
  _QWORD v56[3];
  uint64_t v57;
  _QWORD v58[3];
  uint64_t v59;
  uint64_t v60;
  __int128 v61[2];
  __int128 v62[3];

  v2 = a2;
  v3 = *(_QWORD *)(a1 + 16);
  if (!v3)
  {
    result = swift_bridgeObjectRelease();
    v5 = (_QWORD *)MEMORY[0x1E0DEE9E0];
LABEL_32:
    *v2 = v5;
    return result;
  }
  v4 = a1 + 32;
  v5 = (_QWORD *)MEMORY[0x1E0DEE9E0];
  while (1)
  {
    sub_1CA0F3174(v4, (uint64_t)v61);
    sub_1CA0F31BC(v61, (uint64_t)v58);
    sub_1CA0F31BC(v62, (uint64_t)v56);
    sub_1CA0C7A10((uint64_t)v56, (uint64_t)v52);
    __swift_instantiateConcreteTypeFromMangledName(&qword_1EF9384E8);
    __swift_instantiateConcreteTypeFromMangledName(&qword_1EF9384F0);
    if ((swift_dynamicCast() & 1) == 0)
      break;
    sub_1CA0F31BC(v50, (uint64_t)v53);
    v7 = v59;
    v8 = v60;
    __swift_project_boxed_opaque_existential_1(v58, v59);
    v9 = (*(uint64_t (**)(uint64_t, uint64_t))(v8 + 8))(v7, v8);
    v11 = v10;
    v12 = v54;
    v13 = v55;
    __swift_project_boxed_opaque_existential_1(v53, v54);
    (*(void (**)(_OWORD *__return_ptr, uint64_t, uint64_t))(v13 + 8))(v52, v12, v13);
    sub_1CA0AFCC0(v52, v50);
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    v16 = sub_1CA0AA474(v9, v11);
    v17 = v5[2];
    v18 = (v15 & 1) == 0;
    v19 = v17 + v18;
    if (__OFADD__(v17, v18))
      goto LABEL_34;
    v20 = v15;
    if (v5[3] >= v19)
    {
      if ((isUniquelyReferenced_nonNull_native & 1) != 0)
      {
        if ((v15 & 1) == 0)
          goto LABEL_19;
      }
      else
      {
        sub_1CA0F0DFC();
        if ((v20 & 1) == 0)
          goto LABEL_19;
      }
    }
    else
    {
      sub_1CA0EDF00(v19, isUniquelyReferenced_nonNull_native);
      v21 = sub_1CA0AA474(v9, v11);
      if ((v20 & 1) != (v22 & 1))
        goto LABEL_37;
      v16 = v21;
      if ((v20 & 1) == 0)
      {
LABEL_19:
        v5[(v16 >> 6) + 8] |= 1 << v16;
        v40 = (uint64_t *)(v5[6] + 16 * v16);
        *v40 = v9;
        v40[1] = v11;
        sub_1CA0AFCC0(v50, (_OWORD *)(v5[7] + 32 * v16));
        v41 = v5[2];
        v42 = __OFADD__(v41, 1);
        v43 = v41 + 1;
        if (v42)
          goto LABEL_35;
        v5[2] = v43;
        swift_bridgeObjectRetain();
        goto LABEL_4;
      }
    }
    v6 = (_OWORD *)(v5[7] + 32 * v16);
    __swift_destroy_boxed_opaque_existential_0((uint64_t)v6);
    sub_1CA0AFCC0(v50, v6);
LABEL_4:
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    __swift_destroy_boxed_opaque_existential_0((uint64_t)v53);
LABEL_5:
    __swift_destroy_boxed_opaque_existential_0((uint64_t)v56);
    __swift_destroy_boxed_opaque_existential_0((uint64_t)v58);
    v4 += 80;
    if (!--v3)
    {
      result = swift_bridgeObjectRelease();
      v2 = a2;
      goto LABEL_32;
    }
  }
  v51 = 0;
  memset(v50, 0, sizeof(v50));
  sub_1CA0B6AD4((uint64_t)v50, qword_1EF9384F8);
  v23 = v59;
  v24 = v60;
  __swift_project_boxed_opaque_existential_1(v58, v59);
  v25 = (*(uint64_t (**)(uint64_t, uint64_t))(v24 + 8))(v23, v24);
  v27 = v26;
  v28 = v57;
  v29 = __swift_project_boxed_opaque_existential_1(v56, v57);
  v54 = v28;
  boxed_opaque_existential_0Tm = __swift_allocate_boxed_opaque_existential_0Tm(v53);
  (*(void (**)(uint64_t *, _QWORD *, uint64_t))(*(_QWORD *)(v28 - 8) + 16))(boxed_opaque_existential_0Tm, v29, v28);
  sub_1CA0AFCC0(v53, v52);
  v31 = swift_isUniquelyReferenced_nonNull_native();
  *(_QWORD *)&v50[0] = v5;
  v33 = sub_1CA0AA474(v25, v27);
  v34 = v5[2];
  v35 = (v32 & 1) == 0;
  v36 = v34 + v35;
  if (!__OFADD__(v34, v35))
  {
    v37 = v32;
    if (v5[3] >= v36)
    {
      if ((v31 & 1) != 0)
      {
        v5 = *(_QWORD **)&v50[0];
        if ((v32 & 1) == 0)
          goto LABEL_27;
      }
      else
      {
        sub_1CA0F0DFC();
        v5 = *(_QWORD **)&v50[0];
        if ((v37 & 1) == 0)
          goto LABEL_27;
      }
    }
    else
    {
      sub_1CA0EDF00(v36, v31);
      v38 = sub_1CA0AA474(v25, v27);
      if ((v37 & 1) != (v39 & 1))
        goto LABEL_37;
      v33 = v38;
      v5 = *(_QWORD **)&v50[0];
      if ((v37 & 1) == 0)
      {
LABEL_27:
        v5[(v33 >> 6) + 8] |= 1 << v33;
        v45 = (uint64_t *)(v5[6] + 16 * v33);
        *v45 = v25;
        v45[1] = v27;
        sub_1CA0AFCC0(v52, (_OWORD *)(v5[7] + 32 * v33));
        v46 = v5[2];
        v42 = __OFADD__(v46, 1);
        v47 = v46 + 1;
        if (v42)
          goto LABEL_36;
        v5[2] = v47;
        swift_bridgeObjectRetain();
        goto LABEL_29;
      }
    }
    v44 = (_OWORD *)(v5[7] + 32 * v33);
    __swift_destroy_boxed_opaque_existential_0((uint64_t)v44);
    sub_1CA0AFCC0(v52, v44);
LABEL_29:
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    goto LABEL_5;
  }
  __break(1u);
LABEL_34:
  __break(1u);
LABEL_35:
  __break(1u);
LABEL_36:
  __break(1u);
LABEL_37:
  result = sub_1CA1F1360();
  __break(1u);
  return result;
}

Swift::Void __swiftcall FilterProperties.merge(_:)(KnowledgeGraphKit::FilterProperties a1)
{
  uint64_t *v1;
  uint64_t v2;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v4;

  v2 = *(_QWORD *)a1.dictionary._rawValue;
  swift_bridgeObjectRetain();
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  v4 = *v1;
  *v1 = 0x8000000000000000;
  sub_1CA0F31E8(v2, (uint64_t)sub_1CA0F353C, 0, isUniquelyReferenced_nonNull_native, (uint64_t)&v4);
  *v1 = v4;
  swift_bridgeObjectRelease();
}

KnowledgeGraphKit::FilterProperties __swiftcall FilterProperties.merging(_:)(KnowledgeGraphKit::FilterProperties a1)
{
  KnowledgeGraphKit::FilterProperties *v1;
  uint64_t *v2;
  KnowledgeGraphKit::FilterProperties *v3;
  uint64_t v4;
  uint64_t v5;
  KnowledgeGraphKit::FilterProperties result;

  v3 = v1;
  v4 = *v2;
  swift_bridgeObjectRetain();
  v5 = swift_bridgeObjectRetain();
  result.dictionary._rawValue = (void *)sub_1CA0F3084(v5, v4);
  v3->dictionary._rawValue = result.dictionary._rawValue;
  return result;
}

uint64_t sub_1CA0F3084(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v6;
  uint64_t v8;

  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  v8 = a2;
  sub_1CA0F31E8(a1, (uint64_t)sub_1CA0F353C, 0, isUniquelyReferenced_nonNull_native, (uint64_t)&v8);
  v6 = v8;
  swift_bridgeObjectRelease();
  if (v2)
    swift_bridgeObjectRelease();
  return v6;
}

uint64_t FilterProperties.set(_:for:)(_QWORD *a1, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;

  v4 = a1[3];
  v5 = a1[4];
  v6 = __swift_project_boxed_opaque_existential_1(a1, v4);
  v7 = a2[3];
  v8 = a2[4];
  v9 = __swift_project_boxed_opaque_existential_1(a2, v7);
  return sub_1CA0F357C((uint64_t)v6, (uint64_t)v9, v2, v4, v7, v5, v8);
}

uint64_t sub_1CA0F3174(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EF9384E0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_1CA0F31BC(__int128 *a1, uint64_t a2)
{
  __int128 v2;
  __int128 v3;

  v2 = *a1;
  v3 = a1[1];
  *(_QWORD *)(a2 + 32) = *((_QWORD *)a1 + 4);
  *(_OWORD *)a2 = v2;
  *(_OWORD *)(a2 + 16) = v3;
  return a2;
}

uint64_t sub_1CA0F31D4(uint64_t a1, uint64_t a2, uint64_t a3, char a4, uint64_t a5)
{
  return sub_1CA0F31E8(a1, a2, a3, a4, a5);
}

uint64_t sub_1CA0F31E8(uint64_t a1, uint64_t a2, uint64_t a3, char a4, uint64_t a5)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  char v15;
  unint64_t v16;
  uint64_t v17;
  _BOOL8 v18;
  uint64_t v19;
  char v20;
  unint64_t v21;
  char v22;
  _OWORD *v23;
  _QWORD *v24;
  uint64_t *v25;
  uint64_t v26;
  BOOL v27;
  uint64_t v28;
  uint64_t i;
  _OWORD *v30;
  uint64_t v31;
  _QWORD *v32;
  char v33;
  unint64_t v34;
  uint64_t v35;
  _BOOL8 v36;
  uint64_t v37;
  char v38;
  unint64_t v39;
  char v40;
  _QWORD *v41;
  uint64_t *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t result;
  _OWORD v46[2];
  _OWORD v47[2];
  __int128 v48;
  _OWORD v49[2];
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;

  v7 = -1 << *(_BYTE *)(a1 + 32);
  v8 = ~v7;
  v9 = *(_QWORD *)(a1 + 64);
  v10 = -v7;
  v50 = a1;
  v51 = a1 + 64;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  else
    v11 = -1;
  v52 = v8;
  v53 = 0;
  v54 = v11 & v9;
  v55 = a2;
  v56 = a3;
  swift_bridgeObjectRetain();
  swift_retain();
  sub_1CA14E764(&v48);
  v12 = *((_QWORD *)&v48 + 1);
  if (!*((_QWORD *)&v48 + 1))
    goto LABEL_27;
  v13 = v48;
  sub_1CA0AFCC0(v49, v47);
  v14 = *(_QWORD **)a5;
  v16 = sub_1CA0AA474(v13, v12);
  v17 = v14[2];
  v18 = (v15 & 1) == 0;
  v19 = v17 + v18;
  if (__OFADD__(v17, v18))
  {
LABEL_28:
    __break(1u);
    goto LABEL_29;
  }
  v20 = v15;
  if (v14[3] >= v19)
  {
    if ((a4 & 1) != 0)
    {
      if ((v15 & 1) != 0)
        goto LABEL_12;
    }
    else
    {
      sub_1CA0F0DFC();
      if ((v20 & 1) != 0)
        goto LABEL_12;
    }
LABEL_14:
    v24 = *(_QWORD **)a5;
    *(_QWORD *)(*(_QWORD *)a5 + 8 * (v16 >> 6) + 64) |= 1 << v16;
    v25 = (uint64_t *)(v24[6] + 16 * v16);
    *v25 = v13;
    v25[1] = v12;
    sub_1CA0AFCC0(v47, (_OWORD *)(v24[7] + 32 * v16));
    v26 = v24[2];
    v27 = __OFADD__(v26, 1);
    v28 = v26 + 1;
    if (v27)
    {
LABEL_29:
      __break(1u);
      goto LABEL_30;
    }
    v24[2] = v28;
LABEL_16:
    sub_1CA14E764(&v48);
    for (i = *((_QWORD *)&v48 + 1); *((_QWORD *)&v48 + 1); i = *((_QWORD *)&v48 + 1))
    {
      v31 = v48;
      sub_1CA0AFCC0(v49, v47);
      v32 = *(_QWORD **)a5;
      v34 = sub_1CA0AA474(v31, i);
      v35 = v32[2];
      v36 = (v33 & 1) == 0;
      v37 = v35 + v36;
      if (__OFADD__(v35, v36))
        goto LABEL_28;
      v38 = v33;
      if (v32[3] < v37)
      {
        sub_1CA0EDF00(v37, 1);
        v39 = sub_1CA0AA474(v31, i);
        if ((v38 & 1) != (v40 & 1))
          goto LABEL_30;
        v34 = v39;
      }
      if ((v38 & 1) != 0)
      {
        sub_1CA0B6A98((uint64_t)v47, (uint64_t)v46);
        __swift_destroy_boxed_opaque_existential_0((uint64_t)v47);
        swift_bridgeObjectRelease();
        v30 = (_OWORD *)(*(_QWORD *)(*(_QWORD *)a5 + 56) + 32 * v34);
        __swift_destroy_boxed_opaque_existential_0((uint64_t)v30);
        sub_1CA0AFCC0(v46, v30);
      }
      else
      {
        v41 = *(_QWORD **)a5;
        *(_QWORD *)(*(_QWORD *)a5 + 8 * (v34 >> 6) + 64) |= 1 << v34;
        v42 = (uint64_t *)(v41[6] + 16 * v34);
        *v42 = v31;
        v42[1] = i;
        sub_1CA0AFCC0(v47, (_OWORD *)(v41[7] + 32 * v34));
        v43 = v41[2];
        v27 = __OFADD__(v43, 1);
        v44 = v43 + 1;
        if (v27)
          goto LABEL_29;
        v41[2] = v44;
      }
      sub_1CA14E764(&v48);
    }
LABEL_27:
    swift_release();
    swift_bridgeObjectRelease();
    sub_1CA0B6A14();
    return swift_release();
  }
  sub_1CA0EDF00(v19, a4 & 1);
  v21 = sub_1CA0AA474(v13, v12);
  if ((v20 & 1) == (v22 & 1))
  {
    v16 = v21;
    if ((v20 & 1) == 0)
      goto LABEL_14;
LABEL_12:
    sub_1CA0B6A98((uint64_t)v47, (uint64_t)v46);
    __swift_destroy_boxed_opaque_existential_0((uint64_t)v47);
    swift_bridgeObjectRelease();
    v23 = (_OWORD *)(*(_QWORD *)(*(_QWORD *)a5 + 56) + 32 * v16);
    __swift_destroy_boxed_opaque_existential_0((uint64_t)v23);
    sub_1CA0AFCC0(v46, v23);
    goto LABEL_16;
  }
LABEL_30:
  result = sub_1CA1F1360();
  __break(1u);
  return result;
}

uint64_t sub_1CA0F353C@<X0>(uint64_t *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;

  v4 = *a1;
  v3 = a1[1];
  sub_1CA0B6A98((uint64_t)(a1 + 2), (uint64_t)(a2 + 2));
  *a2 = v4;
  a2[1] = v3;
  return swift_bridgeObjectRetain();
}

uint64_t sub_1CA0F357C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t *boxed_opaque_existential_0Tm;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  _QWORD *v27;
  uint64_t *v28;
  __int128 v30[2];
  uint64_t v31;
  _QWORD v32[5];
  uint64_t v33[3];
  uint64_t v34;
  uint64_t v35;
  uint64_t v36[3];
  uint64_t v37;
  uint64_t v38;

  v12 = *(_QWORD *)(a5 - 8);
  MEMORY[0x1E0C80A78](a1, a2);
  v14 = (char *)v30 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v37 = v15;
  v38 = v16;
  boxed_opaque_existential_0Tm = __swift_allocate_boxed_opaque_existential_0Tm(v36);
  (*(void (**)(uint64_t *, uint64_t, uint64_t))(*(_QWORD *)(a4 - 8) + 16))(boxed_opaque_existential_0Tm, a1, a4);
  (*(void (**)(char *, uint64_t, uint64_t))(v12 + 16))(v14, a2, a5);
  sub_1CA0C7A10((uint64_t)v36, (uint64_t)v32);
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EF9384E8);
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EF9384F0);
  if (swift_dynamicCast())
  {
    sub_1CA0F31BC(v30, (uint64_t)v33);
    v18 = (*(uint64_t (**)(uint64_t, uint64_t))(a7 + 8))(a5, a7);
    v20 = v19;
    v21 = v34;
    v22 = v35;
    __swift_project_boxed_opaque_existential_1(v33, v34);
    (*(void (**)(_QWORD *__return_ptr, uint64_t, uint64_t))(v22 + 8))(v32, v21, v22);
    sub_1CA0F2A74((uint64_t)v32, v18, v20);
    __swift_destroy_boxed_opaque_existential_0((uint64_t)v33);
  }
  else
  {
    v31 = 0;
    memset(v30, 0, sizeof(v30));
    sub_1CA0B6AD4((uint64_t)v30, qword_1EF9384F8);
    v23 = (*(uint64_t (**)(uint64_t, uint64_t))(a7 + 8))(a5, a7);
    v25 = v24;
    v26 = v37;
    v27 = __swift_project_boxed_opaque_existential_1(v36, v37);
    v34 = v26;
    v28 = __swift_allocate_boxed_opaque_existential_0Tm(v33);
    (*(void (**)(uint64_t *, _QWORD *, uint64_t))(*(_QWORD *)(v26 - 8) + 16))(v28, v27, v26);
    sub_1CA0F2A74((uint64_t)v33, v23, v25);
  }
  __swift_destroy_boxed_opaque_existential_0((uint64_t)v36);
  return (*(uint64_t (**)(char *, uint64_t))(v12 + 8))(v14, a5);
}

ValueMetadata *type metadata accessor for FilterProperties()
{
  return &type metadata for FilterProperties;
}

uint64_t Vector.init(elements:)@<X0>(uint64_t result@<X0>, _QWORD *a2@<X8>)
{
  *a2 = result;
  return result;
}

uint64_t static Vector<A>.*= infix(_:_:)(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t result;
  _QWORD v11[8];

  v11[7] = *a1;
  v11[2] = a3;
  v11[3] = a4;
  v11[4] = a2;
  v6 = sub_1CA1F0BE0();
  swift_bridgeObjectRetain();
  v7 = MEMORY[0x1CAA4BB30](MEMORY[0x1E0DEAF50], v6);
  v9 = sub_1CA0E3CE8((void (*)(char *, char *))sub_1CA0F3FB8, (uint64_t)v11, v6, a3, MEMORY[0x1E0DEDCE8], v7, MEMORY[0x1E0DEDD18], v8);
  swift_bridgeObjectRelease();
  result = swift_bridgeObjectRelease();
  *a1 = v9;
  return result;
}

uint64_t Vector.init(arrayLiteral:)@<X0>(uint64_t result@<X0>, _QWORD *a2@<X8>)
{
  *a2 = result;
  return result;
}

uint64_t Vector.init(pointer:count:)@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v2;
  uint64_t result;

  sub_1CA1F09E8();
  v2 = sub_1CA1F09F4();
  MEMORY[0x1CAA4BB30](MEMORY[0x1E0DEA5D8], v2);
  result = sub_1CA1F0C04();
  *a1 = result;
  return result;
}

uint64_t static Vector<A>.zeros(count:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  return sub_1CA0F38E4(a1, a2, a3);
}

uint64_t static Vector<A>.ones(count:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  return sub_1CA0F38E4(a1, a2, a3);
}

uint64_t sub_1CA0F38E4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t AssociatedTypeWitness;
  uint64_t v9;
  uint64_t v10;
  uint64_t result;
  uint64_t v12;
  uint64_t *v13;

  v13 = a3;
  v5 = *(_QWORD *)(a2 - 8);
  MEMORY[0x1E0C80A78](a1, a2);
  v7 = (char *)&v12 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  MEMORY[0x1E0C80A78](AssociatedTypeWitness, v9);
  swift_getAssociatedConformanceWitness();
  sub_1CA1F1318();
  sub_1CA1F12D0();
  v10 = sub_1CA0F45D8((uint64_t)v7, a1, a2);
  result = (*(uint64_t (**)(char *, uint64_t))(v5 + 8))(v7, a2);
  *v13 = v10;
  return result;
}

uint64_t Vector.init(repeating:count:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t *a4@<X8>)
{
  uint64_t v7;
  uint64_t result;

  v7 = sub_1CA0F45D8(a1, a2, a3);
  result = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(a3 - 8) + 8))(a1, a3);
  *a4 = v7;
  return result;
}

uint64_t Vector.subscript.getter()
{
  return sub_1CA1F0C28();
}

float static Vector<A>.* infix(_:_:)(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  vDSP_Length v4;
  float __C;
  uint64_t v7;

  v7 = *MEMORY[0x1E0C80C00];
  v2 = *a1;
  v3 = *a2;
  v4 = *(_QWORD *)(*a1 + 16);
  if (v4 != *(_QWORD *)(*a2 + 16))
    __break(1u);
  __C = NAN;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  vDSP_dotpr((const float *)(v2 + 32), 1, (const float *)(v3 + 32), 1, &__C, v4);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return __C;
}

uint64_t Vector.init<A>(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t *a4@<X8>)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t result;
  uint64_t v11;

  v7 = *(_QWORD *)(a3 - 8);
  MEMORY[0x1E0C80A78](a1, a2);
  (*(void (**)(char *, uint64_t))(v7 + 16))((char *)&v11 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0), a1);
  v9 = sub_1CA1F0C04();
  result = (*(uint64_t (**)(uint64_t, uint64_t))(v7 + 8))(a1, a3);
  *a4 = v9;
  return result;
}

void Vector.count.getter()
{
  JUMPOUT(0x1CAA4A2A0);
}

void Vector.description.getter()
{
  JUMPOUT(0x1CAA4A210);
}

void Vector.debugDescription.getter()
{
  JUMPOUT(0x1CAA4A240);
}

uint64_t Vector.subscript.setter(uint64_t a1, unint64_t a2, uint64_t a3)
{
  sub_1CA0F4690(a1, a2, a3);
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)(*(_QWORD *)(a3 + 16) - 8) + 8))(a1);
}

uint64_t static Vector<A>.== infix(_:_:)()
{
  return sub_1CA1F0BF8();
}

uint64_t Vector<A>.hashValue.getter()
{
  sub_1CA1F13F0();
  sub_1CA1F0BEC();
  return sub_1CA1F1438();
}

uint64_t Vector.elements.getter()
{
  sub_1CA0E6924();
  return swift_bridgeObjectRetain();
}

uint64_t Vector.elements.setter(uint64_t a1)
{
  _QWORD *v1;
  uint64_t result;

  result = swift_bridgeObjectRelease();
  *v1 = a1;
  return result;
}

uint64_t (*Vector.elements.modify())()
{
  return nullsub_1;
}

uint64_t sub_1CA0F3D28()
{
  return static Vector<A>.== infix(_:_:)();
}

uint64_t Vector<A>.hash(into:)()
{
  return sub_1CA1F0BEC();
}

uint64_t sub_1CA0F3D48()
{
  return Vector<A>.hashValue.getter();
}

uint64_t sub_1CA0F3D50()
{
  return Vector<A>.hash(into:)();
}

uint64_t sub_1CA0F3D58()
{
  sub_1CA1F13F0();
  Vector<A>.hash(into:)();
  return sub_1CA1F1438();
}

uint64_t Vector.init(elements:shape:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, _QWORD *a5@<X8>)
{
  uint64_t v8;
  uint64_t result;

  v8 = type metadata accessor for Vector(0, a3, a3, a4);
  result = MEMORY[0x1CAA4A2A0](a1, *(_QWORD *)(v8 + 16));
  if (result == a2)
    *a5 = a1;
  else
    __break(1u);
  return result;
}

_QWORD *Vector.withUnsafeMutableBufferPointer<A>(_:)(void (*a1)(_QWORD *), uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t *v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD v14[4];

  v14[3] = a4;
  v6 = *(_QWORD *)(a3 + 16);
  sub_1CA1F0BE0();
  sub_1CA1F0B44();
  v7 = *v4;
  if ((_swift_isClassOrObjCExistentialType() & 1) != 0)
    v8 = v7 & 0xFFFFFFFFFFFFFF8;
  else
    v8 = v7;
  v9 = *(_QWORD *)(v8 + 16);
  if ((_swift_isClassOrObjCExistentialType() & 1) != 0)
    v10 = v7 & 0xFFFFFFFFFFFFFF8;
  else
    v10 = v7;
  v11 = *(unsigned __int8 *)(*(_QWORD *)(v6 - 8) + 80);
  v12 = v10 + ((v11 + 32) & ~v11);
  v14[0] = v12;
  v14[1] = v9;
  a1(v14);
  return sub_1CA0F4584(v14, v12, v9);
}

void sub_1CA0F3EF4()
{
  Vector.count.getter();
}

uint64_t sub_1CA0F3F08(uint64_t result)
{
  _QWORD *v1;

  *v1 = result;
  return result;
}

uint64_t sub_1CA0F3F18@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, _QWORD *a5@<X8>)
{
  return Vector.init(elements:shape:)(a1, *a2, *(_QWORD *)(a3 + 16), a4, a5);
}

_QWORD *sub_1CA0F3F24(void (*a1)(_QWORD *), uint64_t a2, uint64_t a3, uint64_t a4)
{
  return Vector.withUnsafeMutableBufferPointer<A>(_:)(a1, a2, a4, a3);
}

uint64_t sub_1CA0F3F48(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8;

  v8 = MEMORY[0x1CAA4BB30](&protocol conformance descriptor for Vector<A>, a4);
  return AccelerateBufferWrapper.withUnsafeBufferPointer<A>(_:)(a1, a2, a4, a3, v8);
}

uint64_t sub_1CA0F3FB8()
{
  return sub_1CA1F0CE8();
}

double static Vector<A>.* infix(_:_:)(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  vDSP_Length v4;
  double v6[2];

  v6[1] = *(double *)MEMORY[0x1E0C80C00];
  v2 = *a1;
  v3 = *a2;
  v4 = *(_QWORD *)(*a1 + 16);
  if (v4 != *(_QWORD *)(*a2 + 16))
    __break(1u);
  v6[0] = NAN;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  vDSP_dotprD((const double *)(v2 + 32), 1, (const double *)(v3 + 32), 1, v6, v4);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v6[0];
}

uint64_t Vector.startIndex.getter()
{
  return 0;
}

void Vector.endIndex.getter()
{
  JUMPOUT(0x1CAA4A2DCLL);
}

void (*Vector.subscript.modify(_QWORD *a1, uint64_t a2, uint64_t a3))(unint64_t **a1, char a2)
{
  uint64_t v3;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  size_t v10;

  v7 = malloc(0x38uLL);
  *a1 = v7;
  *v7 = a2;
  v7[1] = a3;
  v8 = *(_QWORD *)(a3 + 16);
  v7[2] = v3;
  v7[3] = v8;
  v9 = *(_QWORD *)(v8 - 8);
  v7[4] = v9;
  v10 = *(_QWORD *)(v9 + 64);
  v7[5] = malloc(v10);
  v7[6] = malloc(v10);
  sub_1CA1F0C28();
  return sub_1CA0F4160;
}

void sub_1CA0F4160(unint64_t **a1, char a2)
{
  unint64_t *v2;
  void *v3;
  void *v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  void (*v9)(void *, unint64_t);

  v2 = *a1;
  v3 = (void *)(*a1)[5];
  v4 = (void *)(*a1)[6];
  v5 = (*a1)[3];
  v6 = (*a1)[4];
  v7 = (*a1)[1];
  v8 = **a1;
  if ((a2 & 1) != 0)
  {
    (*(void (**)(unint64_t, void *, unint64_t))(v6 + 16))((*a1)[5], v4, v5);
    sub_1CA0F4690((uint64_t)v3, v8, v7);
    v9 = *(void (**)(void *, unint64_t))(v6 + 8);
    v9(v3, v5);
  }
  else
  {
    sub_1CA0F4690((*a1)[6], v8, v7);
    v9 = *(void (**)(void *, unint64_t))(v6 + 8);
  }
  v9(v4, v5);
  free(v4);
  free(v3);
  free(v2);
}

Swift::Int __swiftcall Vector.index(after:)(Swift::Int after)
{
  BOOL v1;
  Swift::Int result;

  v1 = __OFADD__(after, 1);
  result = after + 1;
  if (v1)
    __break(1u);
  return result;
}

Swift::Int __swiftcall Vector.index(_:offsetBy:)(Swift::Int _, Swift::Int offsetBy)
{
  BOOL v2;
  Swift::Int result;

  v2 = __OFADD__(_, offsetBy);
  result = _ + offsetBy;
  if (v2)
    __break(1u);
  return result;
}

Swift::Int_optional __swiftcall Vector.index(_:offsetBy:limitedBy:)(Swift::Int _, Swift::Int offsetBy, Swift::Int limitedBy)
{
  Swift::Int v3;
  char v4;
  Swift::Bool v5;
  Swift::Int_optional result;

  v3 = sub_1CA0F4740(_, offsetBy, limitedBy);
  v5 = v4 & 1;
  result.value = v3;
  result.is_nil = v5;
  return result;
}

uint64_t sub_1CA0F4254()
{
  MEMORY[0x1CAA4BB30](&protocol conformance descriptor for Vector<A>);
  return sub_1CA1F0CF4();
}

uint64_t sub_1CA0F42A4(_QWORD *a1)
{
  uint64_t result;
  uint64_t v3;

  MEMORY[0x1CAA4BB30](&protocol conformance descriptor for Vector<A>);
  result = sub_1CA1F0CF4();
  *a1 = v3;
  return result;
}

uint64_t sub_1CA0F4304(uint64_t a1, uint64_t a2, uint64_t a3)
{
  MEMORY[0x1CAA4BB30](&protocol conformance descriptor for Vector<A>, a3);
  return sub_1CA1F0D0C();
}

void sub_1CA0F4358()
{
  Vector.endIndex.getter();
}

uint64_t sub_1CA0F436C(uint64_t result)
{
  _QWORD *v1;

  *v1 = result;
  return result;
}

void (*sub_1CA0F437C(_QWORD *a1, uint64_t *a2, uint64_t a3))(_QWORD *a1)
{
  _QWORD *v6;

  v6 = malloc(0x28uLL);
  *a1 = v6;
  v6[4] = sub_1CA0F43D8(v6, *a2, a3);
  return sub_1CA0C67C8;
}

void (*sub_1CA0F43D8(_QWORD *a1, uint64_t a2, uint64_t a3))(_QWORD *a1)
{
  uint64_t v3;
  uint64_t v4;

  v3 = *(_QWORD *)(a3 + 16);
  v4 = *(_QWORD *)(v3 - 8);
  *a1 = v3;
  a1[1] = v4;
  a1[2] = malloc(*(_QWORD *)(v4 + 64));
  sub_1CA1F0C28();
  return sub_1CA0A7D14;
}

uint64_t sub_1CA0F4444(uint64_t a1)
{
  MEMORY[0x1CAA4BB30](&protocol conformance descriptor for Vector<A>, a1);
  return sub_1CA1F0D00();
}

_QWORD *sub_1CA0F4494@<X0>(_QWORD *result@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  if (__OFADD__(*result, a2))
    __break(1u);
  else
    *a3 = *result + a2;
  return result;
}

uint64_t sub_1CA0F44AC@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t result;
  char v6;

  result = sub_1CA0F4740(*a1, a2, *a3);
  *(_QWORD *)a4 = result;
  *(_BYTE *)(a4 + 8) = v6 & 1;
  return result;
}

_QWORD *sub_1CA0F44E0@<X0>(_QWORD *result@<X0>, _QWORD *a2@<X8>)
{
  if (__OFADD__(*result, 1))
    __break(1u);
  else
    *a2 = *result + 1;
  return result;
}

_QWORD *sub_1CA0F44F8(_QWORD *result)
{
  if (__OFADD__(*result, 1))
    __break(1u);
  else
    ++*result;
  return result;
}

void sub_1CA0F4510(_QWORD *a1@<X8>)
{
  _QWORD *v1;

  *a1 = *v1;
  a1[1] = 0;
}

uint64_t sub_1CA0F451C(uint64_t a1)
{
  MEMORY[0x1CAA4BB30](&protocol conformance descriptor for Vector<A>, a1);
  return sub_1CA1F0D3C();
}

uint64_t sub_1CA0F4550(uint64_t a1)
{
  MEMORY[0x1CAA4BB30](&protocol conformance descriptor for Vector<A>, a1);
  return sub_1CA1F0D48();
}

_QWORD *sub_1CA0F4584(_QWORD *result, uint64_t a2, uint64_t a3)
{
  uint64_t v3;

  if (*result)
  {
    if (*result == a2)
    {
      if (result[1] == a3)
      {
        v3 = sub_1CA1F0BE0();
        return (_QWORD *)nullsub_1(v3);
      }
    }
    else
    {
      __break(1u);
    }
    __break(1u);
  }
  __break(1u);
  return result;
}

uint64_t sub_1CA0F45D8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t result;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(uint64_t, uint64_t, uint64_t);
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  result = sub_1CA1F0B50();
  v15 = result;
  if (a2 < 0)
  {
    __break(1u);
  }
  else
  {
    if (a2)
    {
      v8 = v7;
      v9 = *(_QWORD *)(a3 - 8);
      v10 = *(void (**)(uint64_t, uint64_t, uint64_t))(v9 + 16);
      v10(v7, a1, a3);
      v11 = a2 - 1;
      if (v11)
      {
        v12 = *(_QWORD *)(v9 + 72);
        v13 = v8 + v12;
        do
        {
          v10(v13, a1, a3);
          v13 += v12;
          --v11;
        }
        while (v11);
      }
    }
    v14 = sub_1CA1F0BE0();
    nullsub_1(v14);
    return v15;
  }
  return result;
}

uint64_t sub_1CA0F4690(uint64_t a1, unint64_t a2, uint64_t a3)
{
  uint64_t *v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char isClassOrObjCExistentialType;
  uint64_t v10;

  v6 = *(_QWORD *)(a3 + 16);
  v7 = sub_1CA1F0BE0();
  sub_1CA1F0B44();
  v8 = *v3;
  sub_1CA0E649C(a2, *v3);
  isClassOrObjCExistentialType = _swift_isClassOrObjCExistentialType();
  v10 = v8 & 0xFFFFFFFFFFFFFF8;
  if ((isClassOrObjCExistentialType & 1) == 0)
    v10 = v8;
  (*(void (**)(unint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 24))(v10+ ((*(unsigned __int8 *)(*(_QWORD *)(v6 - 8) + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(_QWORD *)(v6 - 8) + 80))+ *(_QWORD *)(*(_QWORD *)(v6 - 8) + 72) * a2, a1, v6);
  return nullsub_1(v7);
}

uint64_t type metadata accessor for Vector(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for Vector);
}

uint64_t sub_1CA0F4740(uint64_t result, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  BOOL v4;

  v3 = a3 - result;
  if (__OFSUB__(a3, result))
  {
    __break(1u);
    goto LABEL_12;
  }
  if (a2 >= 1)
  {
    if (v3 < 0 || v3 >= (unint64_t)a2)
      goto LABEL_9;
    return 0;
  }
  if (v3 <= 0 && v3 > a2)
    return 0;
LABEL_9:
  v4 = __OFADD__(result, a2);
  result += a2;
  if (v4)
LABEL_12:
    __break(1u);
  return result;
}

uint64_t sub_1CA0F4794(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;

  v4 = *(_QWORD *)(*(_QWORD *)(a3 - 8) + 8);
  return MEMORY[0x1CAA4BB30](&protocol conformance descriptor for <A> Vector<A>, a1, &v4);
}

uint64_t sub_1CA0F47CC()
{
  return MEMORY[0x1E0DEB438];
}

uint64_t sub_1CA0F47D8(uint64_t a1)
{
  uint64_t result;

  result = MEMORY[0x1CAA4BB30](&protocol conformance descriptor for Vector<A>);
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

void sub_1CA0F4804()
{
  JUMPOUT(0x1CAA4BB30);
}

void sub_1CA0F4814()
{
  JUMPOUT(0x1CAA4BB30);
}

uint64_t sub_1CA0F4824()
{
  return sub_1CA0F4940(&qword_1EF938538, MEMORY[0x1E0DEB8B8]);
}

uint64_t sub_1CA0F4848(uint64_t a1)
{
  uint64_t v3;

  v3 = MEMORY[0x1CAA4BB30](&protocol conformance descriptor for Vector<A>);
  return MEMORY[0x1CAA4BB30](MEMORY[0x1E0DEDE40], a1, &v3);
}

void sub_1CA0F4890()
{
  JUMPOUT(0x1CAA4BB30);
}

uint64_t sub_1CA0F48A0()
{
  return sub_1CA0F4940(&qword_1EF938548, MEMORY[0x1E0DEB890]);
}

uint64_t sub_1CA0F48C4(uint64_t a1)
{
  uint64_t v3;

  v3 = MEMORY[0x1CAA4BB30](&protocol conformance descriptor for Vector<A>);
  return MEMORY[0x1CAA4BB30](MEMORY[0x1E0DEDE28], a1, &v3);
}

void sub_1CA0F490C()
{
  JUMPOUT(0x1CAA4BB30);
}

uint64_t sub_1CA0F491C()
{
  return sub_1CA0F4940(&qword_1EF938550, MEMORY[0x1E0DEB8C0]);
}

uint64_t sub_1CA0F4940(unint64_t *a1, uint64_t a2)
{
  uint64_t result;
  uint64_t v5;
  unint64_t v6;
  _QWORD v7[2];

  result = *a1;
  if (!result)
  {
    v5 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_1EF938540);
    v6 = sub_1CA0AB20C();
    v7[0] = MEMORY[0x1E0DEB458];
    v7[1] = v6;
    result = MEMORY[0x1CAA4BB30](a2, v5, v7);
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_1CA0F49AC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  type metadata accessor for Vector(0, *(_QWORD *)(a3 + a2 - 8), a3, a4);
  return Vector.subscript.getter();
}

uint64_t sub_1CA0F4A0C(uint64_t a1, uint64_t a2, unint64_t *a3, uint64_t a4)
{
  unint64_t v5;
  uint64_t v6;

  v5 = *a3;
  v6 = type metadata accessor for Vector(0, *(unint64_t *)((char *)a3 + a4 - 8), (uint64_t)a3, a4);
  return sub_1CA0F4690(a1, v5, v6);
}

uint64_t sub_1CA0F4A58()
{
  return 8;
}

_QWORD *sub_1CA0F4A64(_QWORD *result, _QWORD *a2)
{
  *a2 = *result;
  return result;
}

uint64_t sub_1CA0F4A70()
{
  return swift_allocateGenericValueMetadata();
}

id MAFloatMatrixWrapper.__allocating_init(floatMatrix:)(uint64_t a1)
{
  objc_class *v1;
  char *v3;
  char *v4;
  objc_super v6;

  v3 = (char *)objc_allocWithZone(v1);
  v4 = &v3[OBJC_IVAR____TtC17KnowledgeGraphKit20MAFloatMatrixWrapper__floatMatrix];
  *(_QWORD *)v4 = *(_QWORD *)a1;
  *(_OWORD *)(v4 + 8) = *(_OWORD *)(a1 + 8);
  v6.receiver = v3;
  v6.super_class = v1;
  return objc_msgSendSuper2(&v6, sel_init);
}

id MAFloatMatrixWrapper.init(floatMatrix:)(uint64_t a1)
{
  char *v1;
  char *v2;
  objc_super v4;

  v2 = &v1[OBJC_IVAR____TtC17KnowledgeGraphKit20MAFloatMatrixWrapper__floatMatrix];
  *(_QWORD *)v2 = *(_QWORD *)a1;
  *(_OWORD *)(v2 + 8) = *(_OWORD *)(a1 + 8);
  v4.receiver = v1;
  v4.super_class = (Class)type metadata accessor for MAFloatMatrixWrapper();
  return objc_msgSendSuper2(&v4, sel_init);
}

uint64_t type metadata accessor for MAFloatMatrixWrapper()
{
  return objc_opt_self();
}

id MAFloatMatrixWrapper.__allocating_init(rows:)(uint64_t a1)
{
  objc_class *v1;
  char *v3;
  char *v4;
  objc_super v6;
  uint64_t v7;
  __int128 v8;

  v3 = (char *)objc_allocWithZone(v1);
  sub_1CA151EF0(a1, &v7);
  v4 = &v3[OBJC_IVAR____TtC17KnowledgeGraphKit20MAFloatMatrixWrapper__floatMatrix];
  *(_QWORD *)v4 = v7;
  *(_OWORD *)(v4 + 8) = v8;

  v6.receiver = v3;
  v6.super_class = v1;
  return objc_msgSendSuper2(&v6, sel_init);
}

id MAFloatMatrixWrapper.init(rows:)(uint64_t a1)
{
  void *v1;
  char *v3;
  char *v4;
  objc_super v6;
  uint64_t v7;
  __int128 v8;

  v3 = v1;
  sub_1CA151EF0(a1, &v7);
  v4 = &v3[OBJC_IVAR____TtC17KnowledgeGraphKit20MAFloatMatrixWrapper__floatMatrix];
  *(_QWORD *)v4 = v7;
  *(_OWORD *)(v4 + 8) = v8;

  v6.receiver = v3;
  v6.super_class = (Class)type metadata accessor for MAFloatMatrixWrapper();
  return objc_msgSendSuper2(&v6, sel_init);
}

id MAFloatMatrixWrapper.__allocating_init()()
{
  objc_class *v0;

  return objc_msgSend(objc_allocWithZone(v0), sel_init);
}

id MAFloatMatrixWrapper.init()()
{
  void *v0;
  char *v1;
  __int128 v2;
  char *v3;
  objc_super v5;
  uint64_t v6;
  __int128 v7;

  v1 = v0;
  sub_1CA151EF0(MEMORY[0x1E0DEE9D8], &v6);
  v2 = v7;
  v3 = &v1[OBJC_IVAR____TtC17KnowledgeGraphKit20MAFloatMatrixWrapper__floatMatrix];
  *(_QWORD *)v3 = v6;
  *(_OWORD *)(v3 + 8) = v2;

  v5.receiver = v1;
  v5.super_class = (Class)type metadata accessor for MAFloatMatrixWrapper();
  return objc_msgSendSuper2(&v5, sel_init);
}

id MAFloatMatrixWrapper.__deallocating_deinit()
{
  void *v0;
  objc_super v2;

  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for MAFloatMatrixWrapper();
  return objc_msgSendSuper2(&v2, sel_dealloc);
}

uint64_t sub_1CA0F4E0C@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;

  v2 = v1 + OBJC_IVAR____TtC17KnowledgeGraphKit20MAFloatMatrixWrapper__floatMatrix;
  *(_QWORD *)a1 = *(_QWORD *)(v1 + OBJC_IVAR____TtC17KnowledgeGraphKit20MAFloatMatrixWrapper__floatMatrix);
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(v2 + 8);
  return swift_bridgeObjectRetain();
}

uint64_t MAMutableFloatMatrixWrapper.floatMatrix.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  v2 = v1 + OBJC_IVAR____TtC17KnowledgeGraphKit20MAFloatMatrixWrapper__floatMatrix;
  *(_QWORD *)v2 = *(_QWORD *)a1;
  *(_OWORD *)(v2 + 8) = *(_OWORD *)(a1 + 8);
  return swift_bridgeObjectRelease();
}

void (*MAMutableFloatMatrixWrapper.floatMatrix.modify(_QWORD *a1))(_QWORD **a1, char a2)
{
  uint64_t v1;
  char *v3;
  uint64_t v4;
  uint64_t v5;

  v3 = (char *)malloc(0x28uLL);
  *a1 = v3;
  v4 = OBJC_IVAR____TtC17KnowledgeGraphKit20MAFloatMatrixWrapper__floatMatrix;
  *((_QWORD *)v3 + 3) = v1;
  *((_QWORD *)v3 + 4) = v4;
  v5 = v1 + v4;
  *(_QWORD *)v3 = *(_QWORD *)v5;
  *(_OWORD *)(v3 + 8) = *(_OWORD *)(v5 + 8);
  swift_bridgeObjectRetain();
  return sub_1CA0F4EBC;
}

void sub_1CA0F4EBC(_QWORD **a1, char a2)
{
  void *v2;
  uint64_t v3;
  __int128 v4;

  v2 = *a1;
  v3 = (*a1)[3] + (*a1)[4];
  v4 = *(_OWORD *)(*a1 + 1);
  *(_QWORD *)v3 = **a1;
  *(_OWORD *)(v3 + 8) = v4;
  if ((a2 & 1) != 0)
  {
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
  }
  swift_bridgeObjectRelease();
  free(v2);
}

id MAMutableFloatMatrixWrapper.__allocating_init(floatMatrix:)(uint64_t a1)
{
  objc_class *v1;
  char *v3;
  char *v4;
  objc_super v6;

  v3 = (char *)objc_allocWithZone(v1);
  v4 = &v3[OBJC_IVAR____TtC17KnowledgeGraphKit20MAFloatMatrixWrapper__floatMatrix];
  *(_QWORD *)v4 = *(_QWORD *)a1;
  *(_OWORD *)(v4 + 8) = *(_OWORD *)(a1 + 8);
  v6.receiver = v3;
  v6.super_class = (Class)type metadata accessor for MAFloatMatrixWrapper();
  return objc_msgSendSuper2(&v6, sel_init);
}

id MAMutableFloatMatrixWrapper.init(floatMatrix:)(uint64_t a1)
{
  char *v1;
  char *v2;
  objc_super v4;

  v2 = &v1[OBJC_IVAR____TtC17KnowledgeGraphKit20MAFloatMatrixWrapper__floatMatrix];
  *(_QWORD *)v2 = *(_QWORD *)a1;
  *(_OWORD *)(v2 + 8) = *(_OWORD *)(a1 + 8);
  v4.receiver = v1;
  v4.super_class = (Class)type metadata accessor for MAFloatMatrixWrapper();
  return objc_msgSendSuper2(&v4, sel_init);
}

id MAMutableFloatMatrixWrapper.__allocating_init(rows:)(uint64_t a1)
{
  objc_class *v1;
  char *v3;
  char *v4;
  objc_super v6;
  uint64_t v7;
  __int128 v8;

  v3 = (char *)objc_allocWithZone(v1);
  sub_1CA151EF0(a1, &v7);
  v4 = &v3[OBJC_IVAR____TtC17KnowledgeGraphKit20MAFloatMatrixWrapper__floatMatrix];
  *(_QWORD *)v4 = v7;
  *(_OWORD *)(v4 + 8) = v8;

  v6.receiver = v3;
  v6.super_class = (Class)type metadata accessor for MAFloatMatrixWrapper();
  return objc_msgSendSuper2(&v6, sel_init);
}

id MAMutableFloatMatrixWrapper.init(rows:)(uint64_t a1)
{
  void *v1;
  char *v3;
  char *v4;
  objc_super v6;
  uint64_t v7;
  __int128 v8;

  v3 = v1;
  sub_1CA151EF0(a1, &v7);
  v4 = &v3[OBJC_IVAR____TtC17KnowledgeGraphKit20MAFloatMatrixWrapper__floatMatrix];
  *(_QWORD *)v4 = v7;
  *(_OWORD *)(v4 + 8) = v8;

  v6.receiver = v3;
  v6.super_class = (Class)type metadata accessor for MAFloatMatrixWrapper();
  return objc_msgSendSuper2(&v6, sel_init);
}

id MAMutableFloatMatrixWrapper.init()()
{
  void *v0;
  objc_super v2;

  v2.receiver = v0;
  v2.super_class = (Class)swift_getObjectType();
  return objc_msgSendSuper2(&v2, sel_init);
}

id MAMutableFloatMatrixWrapper.__deallocating_deinit()
{
  void *v0;
  objc_super v2;

  v2.receiver = v0;
  v2.super_class = (Class)swift_getObjectType();
  return objc_msgSendSuper2(&v2, sel_dealloc);
}

id MAFloatMatrixWrapper.__allocating_init(floats:rows:columns:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  objc_class *v3;

  return objc_msgSend(objc_allocWithZone(v3), sel_initWithFloats_rows_columns_, a1, a2, a3);
}

uint64_t MAFloatMatrixWrapper.init(floats:rows:columns:)(char *a1, uint64_t a2, uint64_t a3)
{
  uint64_t result;
  uint64_t v7;
  uint64_t v8;
  _QWORD v9[3];

  result = swift_getObjectType();
  if ((unsigned __int128)(a2 * (__int128)a3) >> 64 == (a2 * a3) >> 63)
  {
    v7 = result;
    result = sub_1CA0B550C(a1, a2 * a3);
    if (*(_QWORD *)(result + 16) == a2 * a3)
    {
      v9[0] = result;
      v9[1] = a2;
      v9[2] = a3;
      v8 = (*(uint64_t (**)(_QWORD *))(v7 + 120))(v9);
      swift_deallocPartialClassInstance();
      return v8;
    }
  }
  else
  {
    __break(1u);
  }
  __break(1u);
  return result;
}

uint64_t static MAFloatMatrixWrapper.repeating(element:rows:columns:)(uint64_t result, uint64_t a2, int32x2_t a3)
{
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  objc_class *v7;
  char *v8;
  char *v9;
  objc_super v10;

  v3 = result * a2;
  if ((unsigned __int128)(result * (__int128)a2) >> 64 == (result * a2) >> 63)
  {
    v5 = result;
    result = sub_1CA0B4560(result * a2, a3);
    if (*(_QWORD *)(result + 16) == v3)
    {
      v6 = result;
      v7 = (objc_class *)type metadata accessor for MAFloatMatrixWrapper();
      v8 = (char *)objc_allocWithZone(v7);
      v9 = &v8[OBJC_IVAR____TtC17KnowledgeGraphKit20MAFloatMatrixWrapper__floatMatrix];
      *(_QWORD *)v9 = v6;
      *((_QWORD *)v9 + 1) = v5;
      *((_QWORD *)v9 + 2) = a2;
      v10.receiver = v8;
      v10.super_class = v7;
      return (uint64_t)objc_msgSendSuper2(&v10, sel_init);
    }
  }
  else
  {
    __break(1u);
  }
  __break(1u);
  return result;
}

uint64_t static MAFloatMatrixWrapper.zeros(rows:columns:)(uint64_t result, uint64_t a2, int32x2_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  _QWORD v7[3];

  v4 = result * a2;
  if ((unsigned __int128)(result * (__int128)a2) >> 64 == (result * a2) >> 63)
  {
    v6 = result;
    a3.i32[0] = 0;
    result = sub_1CA0B4560(result * a2, a3);
    if (*(_QWORD *)(result + 16) == v4)
    {
      v7[0] = result;
      v7[1] = v6;
      v7[2] = a2;
      return (*(uint64_t (**)(_QWORD *))(v3 + 120))(v7);
    }
  }
  else
  {
    __break(1u);
  }
  __break(1u);
  return result;
}

uint64_t static MAFloatMatrixWrapper.ones(rows:columns:)(uint64_t result, uint64_t a2, int32x2_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  _QWORD v7[3];

  v4 = result * a2;
  if ((unsigned __int128)(result * (__int128)a2) >> 64 == (result * a2) >> 63)
  {
    v6 = result;
    a3.i32[0] = 1.0;
    result = sub_1CA0B4560(result * a2, a3);
    if (*(_QWORD *)(result + 16) == v4)
    {
      v7[0] = result;
      v7[1] = v6;
      v7[2] = a2;
      return (*(uint64_t (**)(_QWORD *))(v3 + 120))(v7);
    }
  }
  else
  {
    __break(1u);
  }
  __break(1u);
  return result;
}

id MAFloatMatrixWrapper.copy(with:)@<X0>(_QWORD *a1@<X8>)
{
  id v3;

  a1[3] = type metadata accessor for MAFloatMatrixWrapper();
  *a1 = v3;
  return v3;
}

id MAFloatMatrixWrapper.mutableCopy(with:)@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  objc_class *v7;
  char *v8;
  char *v9;
  id result;
  objc_super v11;

  v3 = v1 + OBJC_IVAR____TtC17KnowledgeGraphKit20MAFloatMatrixWrapper__floatMatrix;
  v4 = *(_QWORD *)(v1 + OBJC_IVAR____TtC17KnowledgeGraphKit20MAFloatMatrixWrapper__floatMatrix);
  v5 = *(_QWORD *)(v3 + 8);
  v6 = *(_QWORD *)(v3 + 16);
  v7 = (objc_class *)type metadata accessor for MAMutableFloatMatrixWrapper();
  v8 = (char *)objc_allocWithZone(v7);
  v9 = &v8[OBJC_IVAR____TtC17KnowledgeGraphKit20MAFloatMatrixWrapper__floatMatrix];
  *(_QWORD *)v9 = v4;
  *((_QWORD *)v9 + 1) = v5;
  *((_QWORD *)v9 + 2) = v6;
  v11.receiver = v8;
  v11.super_class = (Class)type metadata accessor for MAFloatMatrixWrapper();
  swift_bridgeObjectRetain();
  result = objc_msgSendSuper2(&v11, sel_init);
  a1[3] = v7;
  *a1 = result;
  return result;
}

id MAMutableFloatMatrixWrapper.copy(with:)@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  objc_class *v7;
  char *v8;
  char *v9;
  id result;
  objc_super v11;

  v3 = v1 + OBJC_IVAR____TtC17KnowledgeGraphKit20MAFloatMatrixWrapper__floatMatrix;
  v4 = *(_QWORD *)(v1 + OBJC_IVAR____TtC17KnowledgeGraphKit20MAFloatMatrixWrapper__floatMatrix);
  v5 = *(_QWORD *)(v3 + 8);
  v6 = *(_QWORD *)(v3 + 16);
  v7 = (objc_class *)type metadata accessor for MAFloatMatrixWrapper();
  v8 = (char *)objc_allocWithZone(v7);
  v9 = &v8[OBJC_IVAR____TtC17KnowledgeGraphKit20MAFloatMatrixWrapper__floatMatrix];
  *(_QWORD *)v9 = v4;
  *((_QWORD *)v9 + 1) = v5;
  *((_QWORD *)v9 + 2) = v6;
  v11.receiver = v8;
  v11.super_class = v7;
  swift_bridgeObjectRetain();
  result = objc_msgSendSuper2(&v11, sel_init);
  a1[3] = v7;
  *a1 = result;
  return result;
}

Swift::Float __swiftcall MAFloatMatrixWrapper.float(at:column:)(Swift::Int at, Swift::Int column)
{
  _QWORD *v2;
  Swift::Float result;
  Swift::Int v7;
  unint64_t v8;
  float v9;
  _QWORD v10[2];
  Swift::Int v11;

  (*(void (**)(_QWORD *__return_ptr))((*MEMORY[0x1E0DEEDD8] & *v2) + 0x70))(v10);
  if (v10[1] < at || v11 <= column)
  {
    __break(1u);
    goto LABEL_11;
  }
  v7 = at * v11;
  if ((unsigned __int128)(at * (__int128)v11) >> 64 != (at * v11) >> 63)
  {
LABEL_11:
    __break(1u);
    goto LABEL_12;
  }
  v8 = v7 + column;
  if (__OFADD__(v7, column))
  {
LABEL_12:
    __break(1u);
    goto LABEL_13;
  }
  if ((v8 & 0x8000000000000000) != 0)
  {
LABEL_13:
    __break(1u);
    goto LABEL_14;
  }
  if (v8 < *(_QWORD *)(v10[0] + 16))
  {
    v9 = *(float *)(v10[0] + 4 * v8 + 32);
    swift_bridgeObjectRelease();
    return v9;
  }
LABEL_14:
  __break(1u);
  return result;
}

id MAFloatMatrixWrapper.vector(_:)(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v4;
  unint64_t v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  objc_class *v10;
  char *v11;
  id v12;
  objc_super v14;
  _QWORD v15[2];
  uint64_t v16;

  (*(void (**)(_QWORD *__return_ptr))((*MEMORY[0x1E0DEEDD8] & *v1) + 0x70))(v15);
  v4 = a1 * v16;
  if ((unsigned __int128)(a1 * (__int128)v16) >> 64 != (a1 * v16) >> 63)
  {
    __break(1u);
    goto LABEL_17;
  }
  v2 = v4 + v16;
  if (__OFADD__(v4, v16))
  {
LABEL_17:
    __break(1u);
LABEL_18:
    __break(1u);
    goto LABEL_19;
  }
  if ((v15[1] & 0x8000000000000000) != 0 || v2 < v4)
    goto LABEL_18;
  if (v4 < 0)
  {
LABEL_19:
    __break(1u);
LABEL_20:
    __break(1u);
LABEL_21:
    swift_bridgeObjectRelease();
    v9 = sub_1CA0B5660(a1, a1 + 32, v4, (2 * v2) | 1);
    goto LABEL_15;
  }
  a1 = v15[0];
  v5 = *(_QWORD *)(v15[0] + 16);
  if (v5 < v4 || (uint64_t)v5 < v2)
    goto LABEL_20;
  sub_1CA1F12F4();
  swift_bridgeObjectRetain();
  swift_unknownObjectRetain_n();
  v7 = swift_dynamicCastClass();
  if (!v7)
  {
    swift_bridgeObjectRelease();
    v7 = MEMORY[0x1E0DEE9D8];
  }
  v8 = *(_QWORD *)(v7 + 16);
  swift_release();
  if (v8 != v2 - v4)
    goto LABEL_21;
  v9 = swift_dynamicCastClass();
  if (!v9)
  {
    swift_bridgeObjectRelease();
    v9 = MEMORY[0x1E0DEE9D8];
  }
LABEL_15:
  swift_bridgeObjectRelease();
  v10 = (objc_class *)type metadata accessor for MAFloatVectorWrapper();
  v11 = (char *)objc_allocWithZone(v10);
  *(_QWORD *)&v11[OBJC_IVAR____TtC17KnowledgeGraphKit20MAFloatVectorWrapper__floatVector] = v9;
  v14.receiver = v11;
  v14.super_class = v10;
  v12 = objc_msgSendSuper2(&v14, sel_init);
  swift_bridgeObjectRelease();
  return v12;
}

uint64_t MAFloatMatrixWrapper.count.getter()
{
  _QWORD *v0;
  uint64_t v1;
  _QWORD v3[3];

  (*(void (**)(_QWORD *__return_ptr))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x70))(v3);
  v1 = *(_QWORD *)(v3[0] + 16);
  swift_bridgeObjectRelease();
  return v1;
}

uint64_t MAFloatMatrixWrapper.rows.getter()
{
  _QWORD *v0;
  uint64_t v1;
  _QWORD v3[3];

  (*(void (**)(_QWORD *__return_ptr))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x70))(v3);
  v1 = v3[1];
  swift_bridgeObjectRelease();
  return v1;
}

uint64_t MAFloatMatrixWrapper.columns.getter()
{
  _QWORD *v0;
  uint64_t v1;
  _QWORD v3[3];

  (*(void (**)(_QWORD *__return_ptr))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x70))(v3);
  v1 = v3[2];
  swift_bridgeObjectRelease();
  return v1;
}

Swift::Float __swiftcall MAFloatMatrixWrapper.sum()()
{
  return sub_1CA0F5F7C(MEMORY[0x1E0C8C2E8]);
}

Swift::Float __swiftcall MAFloatMatrixWrapper.sumOfSquares()()
{
  return sub_1CA0F5F7C(MEMORY[0x1E0C8C328]);
}

Swift::Float __swiftcall MAFloatMatrixWrapper.mean()()
{
  return sub_1CA0F5F7C(MEMORY[0x1E0C8C1E8]);
}

float sub_1CA0F5F7C(void (*a1)(uint64_t, uint64_t, float *, uint64_t))
{
  _QWORD *v1;
  uint64_t v3;
  uint64_t v4;
  float v6;
  _QWORD v7[4];

  v7[3] = *MEMORY[0x1E0C80C00];
  (*(void (**)(_QWORD *__return_ptr))((*MEMORY[0x1E0DEEDD8] & *v1) + 0x70))(v7);
  v3 = *(_QWORD *)(v7[0] + 16);
  v6 = NAN;
  v4 = v7[0] + 32;
  swift_bridgeObjectRetain();
  a1(v4, 1, &v6, v3);
  swift_bridgeObjectRelease_n();
  return v6;
}

float sub_1CA0F6080(_QWORD *a1, uint64_t a2, void (*a3)(uint64_t, uint64_t, float *, uint64_t))
{
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  float v9;
  _QWORD v10[4];

  v10[3] = *MEMORY[0x1E0C80C00];
  (*(void (**)(_QWORD *__return_ptr))((*MEMORY[0x1E0DEEDD8] & *a1) + 0x70))(v10);
  v5 = *(_QWORD *)(v10[0] + 16);
  v9 = NAN;
  v6 = v10[0] + 32;
  v7 = a1;
  swift_bridgeObjectRetain();
  a3(v6, 1, &v9, v5);

  swift_bridgeObjectRelease_n();
  return v9;
}

uint64_t MAFloatMatrixWrapper.array()()
{
  _QWORD *v0;
  int64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  unint64_t v12;
  unint64_t v13;
  int64_t v14;
  uint64_t v15;
  void *v16;
  char *v17;
  uint64_t result;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  int64_t v22;
  uint64_t v23;

  (*(void (**)(uint64_t *__return_ptr))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x70))(&v21);
  v1 = v22;
  if (v22 < 0)
  {
LABEL_35:
    __break(1u);
LABEL_36:
    result = sub_1CA1F1270();
    __break(1u);
    return result;
  }
  v2 = v21;
  if (v22)
  {
    v3 = v23;
    v20 = MEMORY[0x1E0DEE9D8];
    sub_1CA0CD648(0, v22, 0);
    v4 = 0;
    v19 = v2 + 32;
    v5 = v20;
    while (1)
    {
      v6 = v4 * v3;
      if ((unsigned __int128)(v4 * (__int128)v3) >> 64 != (v4 * v3) >> 63)
        break;
      v7 = v6 + v3;
      if (__OFADD__(v6, v3))
        goto LABEL_31;
      if (v7 < v6)
        goto LABEL_32;
      if (v6 < 0)
        goto LABEL_33;
      v8 = *(_QWORD *)(v2 + 16);
      if (v8 < v6 || (uint64_t)v8 < v7)
        goto LABEL_34;
      sub_1CA1F12F4();
      swift_bridgeObjectRetain();
      swift_unknownObjectRetain_n();
      v9 = swift_dynamicCastClass();
      if (!v9)
      {
        swift_bridgeObjectRelease();
        v9 = MEMORY[0x1E0DEE9D8];
      }
      v10 = *(_QWORD *)(v9 + 16);
      swift_release();
      if (v10 == v3)
      {
        v11 = (_QWORD *)swift_dynamicCastClass();
        if (!v11)
        {
          swift_bridgeObjectRelease();
          v11 = (_QWORD *)MEMORY[0x1E0DEE9D8];
        }
      }
      else
      {
        swift_bridgeObjectRelease();
        v11 = (_QWORD *)MEMORY[0x1E0DEE9D8];
        if (v7 != v6)
        {
          if (v3 < 1)
          {
            if (v3 < 0)
              goto LABEL_36;
          }
          else
          {
            __swift_instantiateConcreteTypeFromMangledName(&qword_1ED8527F0);
            v11 = (_QWORD *)swift_allocObject();
            v14 = _swift_stdlib_malloc_size(v11);
            v15 = v14 - 32;
            if (v14 < 32)
              v15 = v14 - 29;
            v11[2] = v3;
            v11[3] = 2 * (v15 >> 2);
          }
          v16 = v11 + 4;
          v17 = (char *)(v19 + 4 * v6);
          if (v17 < (char *)v11 + 4 * v3 + 32 && (unint64_t)v16 < v19 + 4 * v7)
            goto LABEL_36;
          memcpy(v16, v17, 4 * v3);
        }
      }
      swift_bridgeObjectRelease();
      v13 = *(_QWORD *)(v20 + 16);
      v12 = *(_QWORD *)(v20 + 24);
      if (v13 >= v12 >> 1)
        sub_1CA0CD648(v12 > 1, v13 + 1, 1);
      ++v4;
      *(_QWORD *)(v20 + 16) = v13 + 1;
      *(_QWORD *)(v20 + 8 * v13 + 32) = v11;
      if (v1 == v4)
      {
        swift_bridgeObjectRelease();
        return v5;
      }
    }
    __break(1u);
LABEL_31:
    __break(1u);
LABEL_32:
    __break(1u);
LABEL_33:
    __break(1u);
LABEL_34:
    __break(1u);
    goto LABEL_35;
  }
  swift_bridgeObjectRelease();
  return MEMORY[0x1E0DEE9D8];
}

_QWORD *MAFloatMatrixWrapper.data()()
{
  _QWORD *v0;
  _QWORD *result;
  unint64_t v2;
  uint64_t v3;
  _QWORD v4[3];

  result = (*(_QWORD *(**)(_QWORD *__return_ptr))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x70))(v4);
  v2 = *(_QWORD *)(v4[0] + 16);
  if (v2 >> 61)
  {
    __break(1u);
  }
  else
  {
    v3 = sub_1CA0B19AC(v4[0] + 32, v4[0] + 32 + 4 * v2);
    swift_bridgeObjectRelease();
    return (_QWORD *)v3;
  }
  return result;
}

uint64_t MAFloatMatrixWrapper.description.getter()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  _QWORD v9[3];

  (*(void (**)(_QWORD *__return_ptr))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x70))(v9);
  v1 = v9[0];
  v2 = v9[1];
  v3 = v9[2];
  sub_1CA0F7DAC();
  sub_1CA1F0A3C();
  swift_bridgeObjectRelease();
  result = sub_1CA1F0A3C();
  if ((v2 & 0x8000000000000000) == 0)
  {
    if (!v2)
    {
LABEL_12:
      sub_1CA1F0A3C();
      swift_bridgeObjectRelease();
      return 0x2878697274614DLL;
    }
    result = swift_bridgeObjectRetain();
    v5 = 0;
    while (1)
    {
      v6 = v5 * v3;
      if ((unsigned __int128)(v5 * (__int128)v3) >> 64 != (v5 * v3) >> 63)
        break;
      v7 = v6 + v3;
      if (__OFADD__(v6, v3))
        goto LABEL_14;
      if (v7 < v6)
        goto LABEL_15;
      if (v6 < 0)
        goto LABEL_16;
      v8 = *(_QWORD *)(v1 + 16);
      if (v8 < v6 || (uint64_t)v8 < v7)
        goto LABEL_17;
      ++v5;
      swift_bridgeObjectRetain();
      sub_1CA1F0F10();
      sub_1CA1F0A3C();
      sub_1CA1F0A3C();
      swift_bridgeObjectRelease();
      result = swift_bridgeObjectRelease();
      if (v2 == v5)
      {
        swift_bridgeObjectRelease();
        goto LABEL_12;
      }
    }
    __break(1u);
LABEL_14:
    __break(1u);
LABEL_15:
    __break(1u);
LABEL_16:
    __break(1u);
LABEL_17:
    __break(1u);
  }
  __break(1u);
  return result;
}

Swift::Void __swiftcall MAMutableFloatMatrixWrapper.setFloat(_:at:column:)(Swift::Float _, Swift::Int at, Swift::Int column)
{
  char *v3;
  uint64_t v4;
  unint64_t v5;
  Swift::Float v6;
  uint64_t v7;
  Swift::Int v8;
  Swift::Int v9;
  Swift::Int v11;

  v7 = v4 + OBJC_IVAR____TtC17KnowledgeGraphKit20MAFloatMatrixWrapper__floatMatrix;
  v8 = *(_QWORD *)(v7 + 8);
  v9 = *(_QWORD *)(v7 + 16);
  if (v8 < at || v9 <= column)
  {
    __break(1u);
    goto LABEL_12;
  }
  v11 = at * v9;
  if ((unsigned __int128)(at * (__int128)v9) >> 64 != (at * v9) >> 63)
  {
LABEL_12:
    __break(1u);
    goto LABEL_13;
  }
  v5 = v11 + column;
  if (__OFADD__(v11, column))
  {
LABEL_13:
    __break(1u);
    goto LABEL_14;
  }
  v6 = _;
  v3 = *(char **)v7;
  swift_bridgeObjectRetain();
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) != 0)
  {
    if ((v5 & 0x8000000000000000) == 0)
      goto LABEL_9;
LABEL_15:
    __break(1u);
    goto LABEL_16;
  }
LABEL_14:
  v3 = sub_1CA0B6080((uint64_t)v3);
  if ((v5 & 0x8000000000000000) != 0)
    goto LABEL_15;
LABEL_9:
  if (v5 < *((_QWORD *)v3 + 2))
  {
    *(Swift::Float *)&v3[4 * v5 + 32] = v6;
    *(_QWORD *)v7 = v3;
    *(_QWORD *)(v7 + 8) = v8;
    *(_QWORD *)(v7 + 16) = v9;
    swift_bridgeObjectRelease();
    return;
  }
LABEL_16:
  __break(1u);
}

_QWORD *MAFloatMatrixWrapper.matrixBySubtractingMatrix(_:)(_QWORD *a1)
{
  _QWORD *v1;
  _QWORD *v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *result;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  objc_class *v13;
  char *v14;
  uint64_t *v15;
  objc_super v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD v23[3];
  _QWORD v24[3];

  v3 = (_QWORD *)MEMORY[0x1E0DEEDD8];
  v4 = (*(_QWORD *(**)(_QWORD *__return_ptr))((*MEMORY[0x1E0DEEDD8] & *v1) + 0x70))(v24);
  v5 = v24[0];
  v6 = v24[1];
  v7 = v24[2];
  result = (*(_QWORD *(**)(_QWORD *__return_ptr, _QWORD *))((*v3 & *a1) + 0x70))(v23, v4);
  if (v6 != v23[1] || v7 != v23[2])
  {
    __break(1u);
    goto LABEL_7;
  }
  v20 = v5;
  v21 = v6;
  v22 = v7;
  v17 = v23[0];
  v18 = v6;
  v19 = v7;
  v10 = MEMORY[0x1E0C80A78](*(_QWORD *)(v5 + 16), v9);
  v11 = sub_1CA0B5D38(v10, (uint64_t (*)(_QWORD *, uint64_t *))sub_1CA0F87F4);
  v12 = *(_QWORD *)(v11 + 16);
  swift_bridgeObjectRelease();
  result = (_QWORD *)swift_bridgeObjectRelease();
  if ((unsigned __int128)(v6 * (__int128)v7) >> 64 != (v6 * v7) >> 63)
  {
LABEL_7:
    __break(1u);
    goto LABEL_8;
  }
  if (v12 == v6 * v7)
  {
    v13 = (objc_class *)type metadata accessor for MAFloatMatrixWrapper();
    v14 = (char *)objc_allocWithZone(v13);
    v15 = (uint64_t *)&v14[OBJC_IVAR____TtC17KnowledgeGraphKit20MAFloatMatrixWrapper__floatMatrix];
    *v15 = v11;
    v15[1] = v6;
    v15[2] = v7;
    v16.receiver = v14;
    v16.super_class = v13;
    return objc_msgSendSuper2(&v16, sel_init);
  }
LABEL_8:
  __break(1u);
  return result;
}

id MAFloatMatrixWrapper.matrixBySubtractingScalar(_:)()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  id result;
  objc_class *v6;
  char *v7;
  uint64_t *v8;
  objc_super v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  (*(void (**)(uint64_t *__return_ptr))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x70))(&v13);
  v1 = v14;
  v2 = v15;
  v10 = v13;
  v11 = v14;
  v12 = v15;
  v3 = sub_1CA0B5D38(*(_QWORD *)(v13 + 16), (uint64_t (*)(_QWORD *, uint64_t *))sub_1CA0F881C);
  v4 = *(_QWORD *)(v3 + 16);
  result = (id)swift_bridgeObjectRelease();
  if ((unsigned __int128)(v1 * (__int128)v2) >> 64 == (v1 * v2) >> 63)
  {
    if (v4 == v1 * v2)
    {
      v6 = (objc_class *)type metadata accessor for MAFloatMatrixWrapper();
      v7 = (char *)objc_allocWithZone(v6);
      v8 = (uint64_t *)&v7[OBJC_IVAR____TtC17KnowledgeGraphKit20MAFloatMatrixWrapper__floatMatrix];
      *v8 = v3;
      v8[1] = v1;
      v8[2] = v2;
      v9.receiver = v7;
      v9.super_class = v6;
      return objc_msgSendSuper2(&v9, sel_init);
    }
  }
  else
  {
    __break(1u);
  }
  __break(1u);
  return result;
}

id MAFloatMatrixWrapper.matrixByAddingScalar(_:)()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  id result;
  objc_class *v6;
  char *v7;
  uint64_t *v8;
  objc_super v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  (*(void (**)(uint64_t *__return_ptr))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x70))(&v13);
  v1 = v14;
  v2 = v15;
  v10 = v13;
  v11 = v14;
  v12 = v15;
  v3 = sub_1CA0B5D38(*(_QWORD *)(v13 + 16), (uint64_t (*)(_QWORD *, uint64_t *))sub_1CA0F881C);
  v4 = *(_QWORD *)(v3 + 16);
  result = (id)swift_bridgeObjectRelease();
  if ((unsigned __int128)(v1 * (__int128)v2) >> 64 == (v1 * v2) >> 63)
  {
    if (v4 == v1 * v2)
    {
      v6 = (objc_class *)type metadata accessor for MAFloatMatrixWrapper();
      v7 = (char *)objc_allocWithZone(v6);
      v8 = (uint64_t *)&v7[OBJC_IVAR____TtC17KnowledgeGraphKit20MAFloatMatrixWrapper__floatMatrix];
      *v8 = v3;
      v8[1] = v1;
      v8[2] = v2;
      v9.receiver = v7;
      v9.super_class = v6;
      return objc_msgSendSuper2(&v9, sel_init);
    }
  }
  else
  {
    __break(1u);
  }
  __break(1u);
  return result;
}

uint64_t MAMutableFloatMatrixWrapper.subtract(_:)(const float *a1)
{
  uint64_t v1;
  vDSP_Length v2;
  uint64_t v3;
  const float *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t *v7;
  char *v9;
  const float *v11;
  uint64_t v12;
  uint64_t v13;

  v3 = v1;
  v4 = a1;
  (*(void (**)(const float **__return_ptr))((*MEMORY[0x1E0DEEDD8] & *(_QWORD *)a1) + 0x70))(&v11);
  v5 = v12;
  v6 = v13;
  v7 = (uint64_t *)(v3 + OBJC_IVAR____TtC17KnowledgeGraphKit20MAFloatMatrixWrapper__floatMatrix);
  if (*(_QWORD *)(v3 + OBJC_IVAR____TtC17KnowledgeGraphKit20MAFloatMatrixWrapper__floatMatrix + 8) != v12
    || *(_QWORD *)(v3 + OBJC_IVAR____TtC17KnowledgeGraphKit20MAFloatMatrixWrapper__floatMatrix + 16) != v13)
  {
    __break(1u);
LABEL_9:
    __break(1u);
    goto LABEL_10;
  }
  v4 = v11;
  v3 = *v7;
  v2 = *(_QWORD *)(*v7 + 16);
  if (*((_QWORD *)v11 + 2) != v2)
    goto LABEL_9;
  swift_bridgeObjectRetain_n();
  v9 = (char *)v3;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
LABEL_10:
    v9 = sub_1CA0B6080(v3);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  vDSP_vsub(v4 + 8, 1, (const float *)(v3 + 32), 1, (float *)v9 + 8, 1, v2);
  swift_bridgeObjectRelease_n();
  swift_bridgeObjectRelease_n();
  *v7 = (uint64_t)v9;
  v7[1] = v5;
  v7[2] = v6;
  return swift_bridgeObjectRelease();
}

Swift::Void __swiftcall MAMutableFloatMatrixWrapper.subtract(_:)(Swift::Float a1)
{
  uint64_t v1;
  char **v3;
  uint64_t v4;
  char *v5;
  char *v6;
  vDSP_Length v7;
  char *v8;
  float __B;
  uint64_t v10;

  v10 = *MEMORY[0x1E0C80C00];
  v3 = (char **)(v1 + OBJC_IVAR____TtC17KnowledgeGraphKit20MAFloatMatrixWrapper__floatMatrix);
  v4 = *(_QWORD *)(v1 + OBJC_IVAR____TtC17KnowledgeGraphKit20MAFloatMatrixWrapper__floatMatrix);
  v5 = *(char **)(v1 + OBJC_IVAR____TtC17KnowledgeGraphKit20MAFloatMatrixWrapper__floatMatrix + 8);
  v6 = *(char **)(v1 + OBJC_IVAR____TtC17KnowledgeGraphKit20MAFloatMatrixWrapper__floatMatrix + 16);
  v7 = *(_QWORD *)(v4 + 16);
  swift_bridgeObjectRetain_n();
  v8 = (char *)v4;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    v8 = sub_1CA0B6080(v4);
  __B = -a1;
  swift_bridgeObjectRetain();
  vDSP_vsadd((const float *)(v4 + 32), 1, &__B, (float *)v8 + 8, 1, v7);
  swift_bridgeObjectRelease_n();
  *v3 = v8;
  v3[1] = v5;
  v3[2] = v6;
  swift_bridgeObjectRelease();
}

Swift::Void __swiftcall MAMutableFloatMatrixWrapper.add(_:)(Swift::Float a1)
{
  uint64_t v1;
  char **v3;
  uint64_t v4;
  char *v5;
  char *v6;
  vDSP_Length v7;
  char *v8;
  Swift::Float __B;
  uint64_t v10;

  v10 = *MEMORY[0x1E0C80C00];
  v3 = (char **)(v1 + OBJC_IVAR____TtC17KnowledgeGraphKit20MAFloatMatrixWrapper__floatMatrix);
  v4 = *(_QWORD *)(v1 + OBJC_IVAR____TtC17KnowledgeGraphKit20MAFloatMatrixWrapper__floatMatrix);
  v5 = *(char **)(v1 + OBJC_IVAR____TtC17KnowledgeGraphKit20MAFloatMatrixWrapper__floatMatrix + 8);
  v6 = *(char **)(v1 + OBJC_IVAR____TtC17KnowledgeGraphKit20MAFloatMatrixWrapper__floatMatrix + 16);
  v7 = *(_QWORD *)(v4 + 16);
  swift_bridgeObjectRetain_n();
  v8 = (char *)v4;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    v8 = sub_1CA0B6080(v4);
  __B = a1;
  swift_bridgeObjectRetain();
  vDSP_vsadd((const float *)(v4 + 32), 1, &__B, (float *)v8 + 8, 1, v7);
  swift_bridgeObjectRelease_n();
  *v3 = v8;
  v3[1] = v5;
  v3[2] = v6;
  swift_bridgeObjectRelease();
}

id MAFloatMatrixWrapper.sumAlongAxis(_:)(uint64_t a1)
{
  return sub_1CA0F710C(a1, MEMORY[0x1E0C8C2E8]);
}

id MAFloatMatrixWrapper.meanAlongAxis(_:)(uint64_t a1)
{
  return sub_1CA0F710C(a1, MEMORY[0x1E0C8C1E8]);
}

id sub_1CA0F710C(uint64_t a1, void (*a2)(uint64_t, uint64_t, uint64_t, uint64_t))
{
  _QWORD *v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  objc_class *v14;
  char *v15;
  id result;
  objc_super v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;

  (*(void (**)(uint64_t *__return_ptr))((*MEMORY[0x1E0DEEDD8] & *v2) + 0x70))(&v18);
  v5 = v18;
  v6 = v20;
  if (!a1)
  {
    if ((v19 & 0x8000000000000000) == 0)
    {
      if (v19)
      {
        v7 = 1;
        v8 = v20;
        v9 = v20;
        v6 = v19;
        goto LABEL_9;
      }
      goto LABEL_14;
    }
LABEL_18:
    sub_1CA1F11BC();
    __break(1u);
    goto LABEL_19;
  }
  if (a1 != 1)
  {
LABEL_19:
    type metadata accessor for MatrixAxis(0);
    result = (id)sub_1CA1F130C();
    __break(1u);
    return result;
  }
  if (v20 < 0)
    goto LABEL_18;
  if (v20)
  {
    v9 = 1;
    v8 = v19;
    v7 = v20;
LABEL_9:
    swift_bridgeObjectRetain();
    v10 = sub_1CA1F0B68();
    v11 = 0;
    *(_QWORD *)(v10 + 16) = v6;
    v12 = v10 + 32;
    while (1)
    {
      v13 = v11 * v9;
      if ((unsigned __int128)(v11 * (__int128)v9) >> 64 != (v11 * v9) >> 63)
        break;
      if (v8 < 0)
        goto LABEL_17;
      ++v11;
      a2(v5 + 32 + 4 * v13, v7, v12, v8);
      v12 += 4;
      if (v6 == v11)
        goto LABEL_15;
    }
    __break(1u);
LABEL_17:
    sub_1CA1F11BC();
    __break(1u);
    goto LABEL_18;
  }
LABEL_14:
  swift_bridgeObjectRetain();
  v6 = 0;
  v10 = MEMORY[0x1E0DEE9D8];
LABEL_15:
  *(_QWORD *)(v10 + 16) = v6;
  swift_bridgeObjectRelease_n();
  v14 = (objc_class *)type metadata accessor for MAFloatVectorWrapper();
  v15 = (char *)objc_allocWithZone(v14);
  *(_QWORD *)&v15[OBJC_IVAR____TtC17KnowledgeGraphKit20MAFloatVectorWrapper__floatVector] = v10;
  v17.receiver = v15;
  v17.super_class = v14;
  return objc_msgSendSuper2(&v17, sel_init);
}

_QWORD *MAFloatMatrixWrapper.appendingColumn(_:)(_QWORD *a1)
{
  _QWORD *v1;
  _QWORD *v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *result;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  objc_class *v13;
  char *v14;
  uint64_t *v15;
  objc_super v16;
  uint64_t v17;
  _QWORD v18[3];

  v3 = (_QWORD *)MEMORY[0x1E0DEEDD8];
  v4 = (*(_QWORD *(**)(_QWORD *__return_ptr))((*MEMORY[0x1E0DEEDD8] & *v1) + 0x70))(v18);
  v6 = v18[0];
  v5 = v18[1];
  v7 = v18[2];
  result = (*(_QWORD *(**)(uint64_t *__return_ptr, _QWORD *))((*v3 & *a1) + 0x70))(&v17, v4);
  v9 = v17;
  if (v5 != *(_QWORD *)(v17 + 16))
  {
    __break(1u);
    goto LABEL_7;
  }
  v10 = v7 + 1;
  if (__OFADD__(v7, 1))
  {
LABEL_7:
    __break(1u);
    goto LABEL_8;
  }
  if ((unsigned __int128)(v5 * (__int128)v10) >> 64 != (v5 * v10) >> 63)
  {
LABEL_8:
    __break(1u);
    goto LABEL_9;
  }
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v11 = sub_1CA0F8854(v5 * v10, v6, v5, v7, v9, v5, v7 + 1, v5, v7);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v12 = *(_QWORD *)(v11 + 16);
  swift_bridgeObjectRelease();
  result = (_QWORD *)swift_bridgeObjectRelease();
  if (v12 == v5 * v10)
  {
    v13 = (objc_class *)type metadata accessor for MAFloatMatrixWrapper();
    v14 = (char *)objc_allocWithZone(v13);
    v15 = (uint64_t *)&v14[OBJC_IVAR____TtC17KnowledgeGraphKit20MAFloatMatrixWrapper__floatMatrix];
    *v15 = v11;
    v15[1] = v5;
    v15[2] = v10;
    v16.receiver = v14;
    v16.super_class = v13;
    return objc_msgSendSuper2(&v16, sel_init);
  }
LABEL_9:
  __break(1u);
  return result;
}

id MAFloatMatrixWrapper.appendingColumns(of:)(_QWORD *a1)
{
  _QWORD *v1;
  _QWORD *v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  objc_class *v9;
  char *v10;
  char *v11;
  __int128 v13;
  objc_super v14;
  uint64_t v15[3];
  _QWORD v16[3];
  __int128 v17;
  uint64_t v18;

  v3 = (_QWORD *)MEMORY[0x1E0DEEDD8];
  v4 = (*(_QWORD *(**)(_QWORD *__return_ptr))((*MEMORY[0x1E0DEEDD8] & *v1) + 0x70))(v16);
  v5 = v16[0];
  v6 = v16[1];
  v7 = v16[2];
  (*(void (**)(uint64_t *__return_ptr, _QWORD *))((*v3 & *a1) + 0x70))(v15, v4);
  sub_1CA0F75F4(v15[0], v15[1], v15[2], v5, v6, v7, (uint64_t *)&v17);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v13 = v17;
  v8 = v18;
  v9 = (objc_class *)type metadata accessor for MAFloatMatrixWrapper();
  v10 = (char *)objc_allocWithZone(v9);
  v11 = &v10[OBJC_IVAR____TtC17KnowledgeGraphKit20MAFloatMatrixWrapper__floatMatrix];
  *(_OWORD *)v11 = v13;
  *((_QWORD *)v11 + 2) = v8;
  v14.receiver = v10;
  v14.super_class = v9;
  return objc_msgSendSuper2(&v14, sel_init);
}

uint64_t sub_1CA0F75F4@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t *a7@<X8>)
{
  uint64_t v9;
  uint64_t v12;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  if (a2 != a5)
  {
    __break(1u);
    goto LABEL_16;
  }
  v9 = a6 + a3;
  if (__OFADD__(a6, a3))
  {
LABEL_16:
    __break(1u);
    goto LABEL_17;
  }
  v12 = result;
  v14 = *(_QWORD *)(a4 + 16);
  if (!v14)
  {
    if ((unsigned __int128)(a2 * (__int128)v9) >> 64 != (a2 * v9) >> 63)
    {
LABEL_19:
      __break(1u);
      goto LABEL_20;
    }
    if (*(_QWORD *)(result + 16) != a2 * v9)
    {
LABEL_20:
      __break(1u);
      goto LABEL_21;
    }
    *a7 = result;
    a7[1] = a2;
    a7[2] = v9;
    return swift_bridgeObjectRetain();
  }
  v15 = a2 * v9;
  if (*(_QWORD *)(result + 16))
  {
    if ((unsigned __int128)(a2 * (__int128)v9) >> 64 == (a2 * v9) >> 63)
    {
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      v16 = sub_1CA0F89CC(a2 * v9, a4, a2, a6, v12, a2, a3, a2, v9, a2, a6, a2, a3);
      swift_bridgeObjectRelease();
      result = swift_bridgeObjectRelease();
      if (*(_QWORD *)(v16 + 16) == v15)
      {
        *a7 = v16;
        a7[1] = a2;
        a7[2] = v9;
        return result;
      }
      goto LABEL_18;
    }
LABEL_17:
    __break(1u);
LABEL_18:
    __break(1u);
    goto LABEL_19;
  }
  if ((unsigned __int128)(a2 * (__int128)v9) >> 64 != (a2 * v9) >> 63)
  {
LABEL_21:
    __break(1u);
    goto LABEL_22;
  }
  if (v14 == v15)
  {
    *a7 = a4;
    a7[1] = a2;
    a7[2] = v9;
    return swift_bridgeObjectRetain();
  }
LABEL_22:
  __break(1u);
  return result;
}

uint64_t MAMutableFloatMatrixWrapper.appendRow(_:)(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t result;
  uint64_t v7;
  uint64_t v8;

  (*(void (**)(uint64_t *__return_ptr))((*MEMORY[0x1E0DEEDD8] & *a1) + 0x70))(&v8);
  v2 = v8;
  v3 = (_QWORD *)(v1 + OBJC_IVAR____TtC17KnowledgeGraphKit20MAFloatMatrixWrapper__floatMatrix);
  v4 = *(_QWORD *)(v1 + OBJC_IVAR____TtC17KnowledgeGraphKit20MAFloatMatrixWrapper__floatMatrix + 8);
  v7 = *(_QWORD *)(v1 + OBJC_IVAR____TtC17KnowledgeGraphKit20MAFloatMatrixWrapper__floatMatrix);
  v5 = *(_QWORD *)(v8 + 16);
  if (v4 && v5 != *(_QWORD *)(v1 + OBJC_IVAR____TtC17KnowledgeGraphKit20MAFloatMatrixWrapper__floatMatrix + 16))
    __break(1u);
  swift_bridgeObjectRetain();
  result = sub_1CA0B223C(v2);
  if (__OFADD__(v4, 1))
  {
    __break(1u);
  }
  else
  {
    *v3 = v7;
    v3[1] = v4 + 1;
    v3[2] = v5;
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t MAFloatMatrixWrapper.isApproximatelyEqual(to:)(_QWORD *a1)
{
  _QWORD *v1;
  _QWORD *v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  unsigned __int8 v7;
  _QWORD v9[3];
  _QWORD v10[3];

  v3 = (_QWORD *)MEMORY[0x1E0DEEDD8];
  v4 = (*(_QWORD *(**)(_QWORD *__return_ptr))((*MEMORY[0x1E0DEEDD8] & *v1) + 0x70))(v10);
  v5 = v10[0];
  (*(void (**)(_QWORD *__return_ptr, _QWORD *))((*v3 & *a1) + 0x70))(v9, v4);
  v6 = *(_QWORD *)(v5 + 16);
  if (v6 == *(_QWORD *)(v9[0] + 16))
    v7 = sub_1CA0B68AC((float *)(v9[0] + 32), v6, (float *)(v5 + 32), 0.00000011921, 0.00000011921);
  else
    v7 = 0;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v7 & 1;
}

uint64_t MAFloatMatrixWrapper.isApproximatelyEqual(to:epsilon:)(_QWORD *a1, float a2)
{
  _QWORD *v2;
  _QWORD *v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  unsigned __int8 v9;
  _QWORD v11[3];
  _QWORD v12[3];

  v5 = (_QWORD *)MEMORY[0x1E0DEEDD8];
  v6 = (*(_QWORD *(**)(_QWORD *__return_ptr))((*MEMORY[0x1E0DEEDD8] & *v2) + 0x70))(v12);
  v7 = v12[0];
  (*(void (**)(_QWORD *__return_ptr, _QWORD *))((*v5 & *a1) + 0x70))(v11, v6);
  v8 = *(_QWORD *)(v7 + 16);
  if (v8 == *(_QWORD *)(v11[0] + 16))
    v9 = sub_1CA0B68AC((float *)(v11[0] + 32), v8, (float *)(v7 + 32), 0.0, a2);
  else
    v9 = 0;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v9 & 1;
}

uint64_t MAFloatMatrixWrapper.isEqual(_:)(uint64_t a1)
{
  _QWORD *v1;
  void *v2;
  _QWORD *v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  BOOL v10;
  _BOOL4 v11;
  uint64_t v13[3];
  _QWORD v14[4];

  sub_1CA0B6950(a1, (uint64_t)v14);
  if (!v14[3])
  {
    sub_1CA0BD158((uint64_t)v14);
    return 0;
  }
  type metadata accessor for MAFloatMatrixWrapper();
  if ((swift_dynamicCast() & 1) == 0)
    return 0;
  v2 = (void *)v13[0];
  if ((_QWORD *)v13[0] == v1)
  {

    return 1;
  }
  else
  {
    v3 = (_QWORD *)MEMORY[0x1E0DEEDD8];
    v4 = (*(_QWORD *(**)(_QWORD *__return_ptr))((*MEMORY[0x1E0DEEDD8] & *v1) + 0x70))(v14);
    v5 = v14[0];
    v6 = v14[1];
    v7 = v14[2];
    (*(void (**)(uint64_t *__return_ptr, _QWORD *))((*v3 & *(_QWORD *)v13[0]) + 0x70))(v13, v4);
    v8 = v13[1];
    v9 = v13[2];
    v10 = sub_1CA0B5368(v5, v13[0]);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();

    v11 = v7 == v9;
    if (v6 != v8)
      v11 = 0;
    return v10 && v11;
  }
}

uint64_t MAFloatMatrixWrapper.hash.getter()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;

  (*(void (**)(uint64_t *__return_ptr))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x70))(&v5);
  v1 = v5;
  sub_1CA1F13F0();
  sub_1CA0B53DC((uint64_t)&v4, v1);
  sub_1CA1F13FC();
  sub_1CA1F13FC();
  v2 = sub_1CA1F1438();
  swift_bridgeObjectRelease();
  return v2;
}

uint64_t sub_1CA0F7DAC()
{
  sub_1CA1F12AC();
  sub_1CA1F0A3C();
  swift_bridgeObjectRelease();
  sub_1CA1F0A3C();
  sub_1CA1F12AC();
  sub_1CA1F0A3C();
  swift_bridgeObjectRelease();
  sub_1CA1F0A3C();
  return 40;
}

char *sub_1CA0F7E70(char *result, int a2, void **a3, char *__src, int a5, uint64_t a6, int a7, int a8, uint64_t a9)
{
  char *v9;
  char *v10;
  size_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  char *v15;
  unint64_t v16;
  unint64_t v18;

  v9 = (char *)*a3;
  if (!*a3)
    goto LABEL_21;
  if (!__src)
  {
LABEL_22:
    __break(1u);
    goto LABEL_23;
  }
  v10 = result;
  if (!result)
  {
LABEL_23:
    __break(1u);
    goto LABEL_18;
  }
  if (a6 < 0)
  {
    __break(1u);
LABEL_21:
    __break(1u);
    goto LABEL_22;
  }
  if (!a6)
    return result;
  if ((a9 & 0x8000000000000000) == 0)
  {
    v11 = 4 * a9;
    if (&v9[4 * a9] <= __src || &__src[v11] <= v9)
    {
      v12 = 8 * a9;
      v13 = a6 - 1;
      do
      {
        v14 = __src;
        v15 = &v9[v11];
        result = (char *)memcpy(v9, __src, v11);
        v16 = (unint64_t)&v9[v11 + 4];
        if ((unint64_t)v10 < v16 && v15 < v10 + 4)
          break;
        *(_DWORD *)v15 = *(_DWORD *)v10;
        if (!v13)
          return result;
        v18 = (unint64_t)&v9[v12 + 4];
        __src = &v14[v11];
        v9 += v11 + 4;
        v10 += 4;
        --v13;
      }
      while ((unint64_t)&v14[v11] >= v18 || v16 >= (unint64_t)&v14[v12]);
    }
  }
LABEL_18:
  result = (char *)sub_1CA1F1270();
  __break(1u);
  return result;
}

char *sub_1CA0F8000(char *result, int a2, void **a3, char *__src, int a5, uint64_t a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  char *v11;
  char *v12;
  uint64_t v13;
  size_t v14;
  size_t v15;
  size_t v16;
  char *v17;
  char *v18;
  unint64_t v19;
  char *v20;
  char *v21;

  v11 = (char *)*a3;
  if (!*a3)
    goto LABEL_19;
  if (!__src)
  {
LABEL_20:
    __break(1u);
    goto LABEL_21;
  }
  v12 = result;
  if (!result)
  {
LABEL_21:
    __break(1u);
LABEL_22:
    result = (char *)sub_1CA1F1270();
    __break(1u);
    return result;
  }
  v13 = a6;
  if (a6 < 0)
  {
    __break(1u);
LABEL_19:
    __break(1u);
    goto LABEL_20;
  }
  if (a6)
  {
    if ((a9 & 0x8000000000000000) == 0)
    {
      v14 = 4 * a9;
      if (&v11[4 * a9] <= __src || &__src[v14] <= v11)
      {
        v15 = 4 * a11;
        v16 = 4 * a11 + v14;
        while (1)
        {
          v17 = __src;
          memcpy(v11, __src, v14);
          if (a11 < 0)
            break;
          v18 = &v11[v14];
          v19 = (unint64_t)&v11[v16];
          v20 = &v12[v15];
          if (v12 < &v11[v16] && v18 < v20)
            break;
          result = (char *)memcpy(v18, v12, v15);
          if (!--v13)
            return result;
          __src = &v17[v14];
          v21 = &v11[8 * a9 + 4 * a11];
          v12 += v15;
          v11 += v16;
          if (&v17[v14] < v21)
          {
            v12 = v20;
            v11 = (char *)v19;
            if (v19 < (unint64_t)&v17[8 * a9])
              break;
          }
        }
      }
    }
    goto LABEL_22;
  }
  return result;
}

uint64_t sub_1CA0F81C4(uint64_t result, vDSP_Length *a2, uint64_t a3, uint64_t a4)
{
  vDSP_Length v4;
  float *v6;
  const float *v8;

  v4 = *(_QWORD *)(result + 8);
  if (*(_QWORD *)(a3 + 16) != v4)
  {
    __break(1u);
    goto LABEL_6;
  }
  if (*(_QWORD *)(a4 + 16) != v4)
  {
LABEL_6:
    __break(1u);
    goto LABEL_7;
  }
  v6 = *(float **)result;
  if (*(_QWORD *)result)
  {
    v8 = (const float *)(a3 + 32);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    vDSP_vsub((const float *)(a4 + 32), 1, v8, 1, v6, 1, v4);
    swift_bridgeObjectRelease();
    result = swift_bridgeObjectRelease();
    *a2 = v4;
    return result;
  }
LABEL_7:
  __break(1u);
  return result;
}

uint64_t sub_1CA0F8284(uint64_t result, vDSP_Length *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  vDSP_Length v6;
  float *v8;
  const float *v10;

  v6 = *(_QWORD *)(result + 8);
  if (*(_QWORD *)(a3 + 16) != v6)
  {
    __break(1u);
    goto LABEL_6;
  }
  if (*(_QWORD *)(a6 + 16) != v6)
  {
LABEL_6:
    __break(1u);
    goto LABEL_7;
  }
  v8 = *(float **)result;
  if (*(_QWORD *)result)
  {
    v10 = (const float *)(a3 + 32);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    vDSP_vsub((const float *)(a6 + 32), 1, v10, 1, v8, 1, v6);
    swift_bridgeObjectRelease();
    result = swift_bridgeObjectRelease();
    *a2 = v6;
    return result;
  }
LABEL_7:
  __break(1u);
  return result;
}

uint64_t sub_1CA0F8344(uint64_t a1, vDSP_Length *a2, uint64_t a3, float a4)
{
  vDSP_Length v4;
  float *v5;
  const float *v7;
  uint64_t result;
  float __B;
  uint64_t v10;

  v10 = *MEMORY[0x1E0C80C00];
  v4 = *(_QWORD *)(a1 + 8);
  if (*(_QWORD *)(a3 + 16) != v4)
  {
    __break(1u);
LABEL_5:
    __break(1u);
  }
  __B = a4;
  v5 = *(float **)a1;
  if (!*(_QWORD *)a1)
    goto LABEL_5;
  v7 = (const float *)(a3 + 32);
  swift_bridgeObjectRetain();
  vDSP_vsadd(v7, 1, &__B, v5, 1, v4);
  result = swift_bridgeObjectRelease();
  *a2 = v4;
  return result;
}

void _s17KnowledgeGraphKit20MAFloatMatrixWrapperC8fromData4data4rows7columnsAC10Foundation0H0V_S2itFZ_0(uint64_t a1, uint64_t a2)
{
  __asm { BR              X10 }
}

id sub_1CA0F8460(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, objc_super a12, __int16 a13, char a14, char a15, char a16, char a17, char a18, char a19, char a20,char a21,char a22,char a23,char a24,char a25,char a26,char a27,objc_super a28,objc_super a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40)
{
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  unint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  objc_class *v47;
  char *v48;
  char *v49;
  objc_super v51;
  uint64_t v52;
  __int16 v53;
  char v54;
  char v55;
  char v56;
  char v57;

  v52 = v42;
  v53 = v43;
  v54 = BYTE2(v43);
  v55 = BYTE3(v43);
  v44 = v41 * v40;
  v56 = BYTE4(v43);
  v57 = BYTE5(v43);
  if ((unsigned __int128)(v41 * (__int128)v40) >> 64 != (v41 * v40) >> 63)
  {
    __break(1u);
    goto LABEL_6;
  }
  if (((v43 >> 50) & 0x3F) != v44)
  {
LABEL_6:
    __break(1u);
    JUMPOUT(0x1CA0F878CLL);
  }
  v45 = sub_1CA0B550C((char *)&v52, v41 * v40);
  if (*(_QWORD *)(v45 + 16) != v44)
  {
    __break(1u);
    JUMPOUT(0x1CA0F87A8);
  }
  v46 = v45;
  v47 = (objc_class *)type metadata accessor for MAFloatMatrixWrapper();
  v48 = (char *)objc_allocWithZone(v47);
  v49 = &v48[OBJC_IVAR____TtC17KnowledgeGraphKit20MAFloatMatrixWrapper__floatMatrix];
  *(_QWORD *)v49 = v46;
  *((_QWORD *)v49 + 1) = v41;
  *((_QWORD *)v49 + 2) = v40;
  v51.receiver = v48;
  v51.super_class = v47;
  return objc_msgSendSuper2(&v51, sel_init);
}

uint64_t type metadata accessor for MAMutableFloatMatrixWrapper()
{
  return objc_opt_self();
}

uint64_t sub_1CA0F87F4(uint64_t a1, vDSP_Length *a2)
{
  uint64_t v2;

  return sub_1CA0F8284(a1, a2, **(_QWORD **)(v2 + 16), *(_QWORD *)(*(_QWORD *)(v2 + 16) + 8), *(_QWORD *)(*(_QWORD *)(v2 + 16) + 16), **(_QWORD **)(v2 + 24));
}

uint64_t sub_1CA0F881C(uint64_t a1, vDSP_Length *a2)
{
  return sub_1CA0F8830(a1, a2);
}

uint64_t sub_1CA0F8830(uint64_t a1, vDSP_Length *a2)
{
  uint64_t v2;

  return sub_1CA0F8344(a1, a2, **(_QWORD **)(v2 + 24), *(float *)(v2 + 16));
}

uint64_t sub_1CA0F8854(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, int a8, uint64_t a9)
{
  uint64_t v15;
  uint64_t v16;
  uint64_t result;
  void *v18[2];

  if ((a1 & 0x8000000000000000) == 0)
  {
    if (a1)
    {
      v15 = sub_1CA1F0B68();
      *(_QWORD *)(v15 + 16) = a1;
    }
    else
    {
      v15 = MEMORY[0x1E0DEE9D8];
    }
    v18[0] = (void *)(v15 + 32);
    v18[1] = (void *)a1;
    sub_1CA0F7E70((char *)(a5 + 32), *(_QWORD *)(a5 + 16), v18, (char *)(a2 + 32), *(_QWORD *)(a2 + 16), a6, a7, a8, a9);
    v16 = a6 * a7;
    if ((unsigned __int128)(a6 * (__int128)a7) >> 64 == (a6 * a7) >> 63)
    {
      if (v16 <= a1)
      {
        *(_QWORD *)(v15 + 16) = v16;
        return v15;
      }
    }
    else
    {
      __break(1u);
    }
    __break(1u);
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  result = sub_1CA1F11BC();
  __break(1u);
  return result;
}

uint64_t method lookup function for MAFloatMatrixWrapper()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of MAFloatMatrixWrapper.floatMatrix.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x70))();
}

uint64_t dispatch thunk of MAFloatMatrixWrapper.__allocating_init(floatMatrix:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 120))();
}

uint64_t dispatch thunk of MAFloatMatrixWrapper.__allocating_init(rows:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 128))();
}

uint64_t sub_1CA0F89CC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, int a10, uint64_t a11, uint64_t a12, uint64_t a13)
{
  uint64_t v14;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t result;
  void *v22[2];
  uint64_t v23;

  v14 = a2;
  if ((a1 & 0x8000000000000000) == 0)
  {
    v17 = a12;
    if (a1)
    {
      v23 = a2;
      v18 = sub_1CA1F0B68();
      v17 = a12;
      v14 = v23;
      v19 = v18;
      *(_QWORD *)(v18 + 16) = a1;
    }
    else
    {
      v19 = MEMORY[0x1E0DEE9D8];
    }
    v22[0] = (void *)(v19 + 32);
    v22[1] = (void *)a1;
    sub_1CA0F8000((char *)(a5 + 32), *(_QWORD *)(a5 + 16), v22, (char *)(v14 + 32), *(_QWORD *)(v14 + 16), a8, a9, a10, a11, v17, a13);
    v20 = a8 * a9;
    if ((unsigned __int128)(a8 * (__int128)a9) >> 64 == (a8 * a9) >> 63)
    {
      if (v20 <= a1)
      {
        *(_QWORD *)(v19 + 16) = v20;
        return v19;
      }
    }
    else
    {
      __break(1u);
    }
    __break(1u);
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  result = sub_1CA1F11BC();
  __break(1u);
  return result;
}

uint64_t sub_1CA0F8B20(uint64_t a1, unint64_t a2)
{
  uint64_t result;

  if (a2 >> 62 != 1)
  {
    if (a2 >> 62 != 2)
      return result;
    swift_retain();
  }
  return swift_retain();
}

uint64_t AbstractGraph.nodeIdentifiers(matching:)@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t *a4@<X8>)
{
  void *v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  id v10;
  uint64_t result;
  uint64_t v12;

  v6 = (void *)(*(uint64_t (**)(uint64_t, uint64_t))(a3 + 16))(a2, a3);
  v7 = a1[3];
  v8 = a1[4];
  __swift_project_boxed_opaque_existential_1(a1, v7);
  v9 = (void *)(*(uint64_t (**)(uint64_t, uint64_t))(v8 + 32))(v7, v8);
  v10 = objc_msgSend(v6, sel_nodeIdentifiersMatchingFilter_, v9);

  objc_msgSend(v10, sel_mutableCopy);
  sub_1CA1F0F04();
  swift_unknownObjectRelease();
  sub_1CA0AB910(0, (unint64_t *)&qword_1ED852B18);
  swift_dynamicCast();

  __swift_instantiateConcreteTypeFromMangledName(&qword_1ED852AF0);
  result = swift_allocObject();
  *(_QWORD *)(result + 16) = v12;
  *a4 = result;
  return result;
}

void AbstractGraph.nodeIdentifiers(matching:in:)(_QWORD *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t *a5@<X8>)
{
  id v9;

  v9 = *(id *)(*(_QWORD *)a2 + 16);
  sub_1CA0F9BE8((uint64_t)v9, a1, a3, a4, a5);

}

id ConcreteGraph.kgGraph.getter()
{
  return (id)sub_1CA0F9D24();
}

id ConcreteGraph.entityFactory.getter()
{
  return objc_msgSend((id)sub_1CA0F9D24(), sel_entityFactory);
}

uint64_t ConcreteGraph.perform<>(_:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v2 + 24) = a1;
  *(_QWORD *)(v2 + 32) = v1;
  return swift_task_switch();
}

uint64_t sub_1CA0F8D98()
{
  _QWORD *v0;
  uint64_t v1;
  void *v2;
  unsigned __int8 v3;
  void *v4;
  id v5;
  uint64_t (*v6)(void);
  id v8;
  uint64_t (*v9)(void);

  v1 = v0[4];
  if (*(_BYTE *)(v1 + 24) != 1)
    return sub_1CA1F11C8();
  v2 = *(void **)(v1 + 16);
  v0[2] = 0;
  v3 = objc_msgSend(v2, sel_performChangesAndWait_error_, v0[3], v0 + 2);
  v4 = (void *)v0[2];
  if ((v3 & 1) != 0)
  {
    v9 = (uint64_t (*)(void))v0[1];
    v5 = v4;
    v6 = v9;
  }
  else
  {
    v8 = v4;
    sub_1CA1F07CC();

    swift_willThrow();
    v6 = (uint64_t (*)(void))v0[1];
  }
  return v6();
}

uint64_t ConcreteGraph.deinit()
{
  uint64_t v0;

  return v0;
}

uint64_t ConcreteGraph.__deallocating_deinit()
{
  uint64_t v0;

  return swift_deallocClassInstance();
}

id sub_1CA0F8F30()
{
  return (id)sub_1CA0F9D24();
}

uint64_t ConcreteGraph.description.getter()
{
  uint64_t v0;
  void *v1;
  void *v2;
  id v3;
  id v4;
  id v5;
  void *v6;
  void *v7;
  id v8;
  id v9;
  id v10;

  if (*(_BYTE *)(v0 + 24) != 1)
    return 0xD000000000000015;
  sub_1CA1F1054();
  swift_bridgeObjectRelease();
  v1 = (void *)sub_1CA0F9D24();
  v2 = (void *)objc_opt_self();
  v3 = v1;
  v4 = objc_msgSend(v2, "any");
  v5 = objc_msgSend(v3, sel_nodeIdentifiersMatchingFilter_, v4);

  objc_msgSend(v5, sel_count);
  sub_1CA1F12AC();
  sub_1CA1F0A3C();
  swift_bridgeObjectRelease();
  sub_1CA1F0A3C();
  v6 = (void *)sub_1CA0F9D24();
  v7 = (void *)objc_opt_self();
  v8 = v6;
  v9 = objc_msgSend(v7, "any");
  v10 = objc_msgSend(v8, sel_edgeIdentifiersMatchingFilter_, v9);

  objc_msgSend(v10, sel_count);
  sub_1CA1F12AC();
  sub_1CA1F0A3C();
  swift_bridgeObjectRelease();
  sub_1CA1F0A3C();
  return 0x6168206870617247;
}

uint64_t sub_1CA0F9180()
{
  return ConcreteGraph.description.getter();
}

void sub_1CA0F91A0(uint64_t a1@<X0>, _QWORD *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t *a6@<X8>)
{
  id v11;

  v11 = *(id *)(*(_QWORD *)a1 + 16);
  sub_1CA0F9218((uint64_t)v11, a3, a2, a4, a5, a6);

}

void sub_1CA0F9218(uint64_t a1@<X0>, uint64_t a2@<X2>, _QWORD *a3@<X3>, uint64_t a4@<X4>, uint64_t a5@<X5>, uint64_t *a6@<X8>)
{
  void *v10;
  uint64_t v11;
  uint64_t v12;
  void *v13;
  id v14;
  id v15;
  uint64_t v16;
  uint64_t v17;

  v10 = (void *)(*(uint64_t (**)(uint64_t, uint64_t))(a5 + 16))(a4, a5);
  v11 = a3[3];
  v12 = a3[4];
  __swift_project_boxed_opaque_existential_1(a3, v11);
  v13 = (void *)(*(uint64_t (**)(uint64_t, uint64_t))(v12 + 32))(v11, v12);
  v14 = objc_msgSend(v10, sel_neighborNodeIdentifiersWithStartNodeIdentifiers_edgeDirection_edgeFilter_, a1, a2, v13);

  v15 = v14;
  objc_msgSend(v15, sel_mutableCopy);
  sub_1CA1F0F04();
  swift_unknownObjectRelease();
  sub_1CA0AB910(0, (unint64_t *)&qword_1ED852B18);
  swift_dynamicCast();

  __swift_instantiateConcreteTypeFromMangledName(&qword_1ED852AF0);
  v16 = swift_allocObject();
  *(_QWORD *)(v16 + 16) = v17;

  *a6 = v16;
}

uint64_t sub_1CA0F9370@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, unint64_t *a6@<X8>)
{
  id v11;
  void *v12;
  uint64_t v13;
  uint64_t v14;
  void *v15;
  uint64_t result;
  unint64_t v17;
  _QWORD v18[6];
  unint64_t v19;

  v11 = *(id *)(*(_QWORD *)a1 + 16);
  sub_1CA0F984C((uint64_t)v11, a2, a3, a4, a5, (SEL *)&selRef_adjacencyWithSourceNodeIdentifiers_edgeFilter_edgeDirection_, v18);

  v12 = (void *)v18[0];
  v19 = sub_1CA0AECA8(MEMORY[0x1E0DEE9D8]);
  v13 = swift_allocObject();
  *(_QWORD *)(v13 + 16) = &v19;
  v14 = swift_allocObject();
  *(_QWORD *)(v14 + 16) = sub_1CA0F9E7C;
  *(_QWORD *)(v14 + 24) = v13;
  v18[4] = sub_1CA0F9EFC;
  v18[5] = v14;
  v18[0] = MEMORY[0x1E0C809B0];
  v18[1] = 1107296256;
  v18[2] = sub_1CA0F9660;
  v18[3] = &block_descriptor_23;
  v15 = _Block_copy(v18);
  swift_retain();
  swift_release();
  objc_msgSend(v12, sel_enumerateTargetsBySourceWith_, v15);

  _Block_release(v15);
  LOBYTE(v12) = swift_isEscapingClosureAtFileLocation();
  result = swift_release();
  if ((v12 & 1) != 0)
  {
    __break(1u);
  }
  else
  {
    v17 = v19;
    result = swift_release();
    *a6 = v17;
  }
  return result;
}

uint64_t sub_1CA0F950C(uint64_t a1, void *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;
  uint64_t v8;
  void *v9;
  uint64_t result;
  _QWORD v11[6];

  v7 = swift_allocObject();
  *(_QWORD *)(v7 + 16) = a4;
  *(_QWORD *)(v7 + 24) = a1;
  v8 = swift_allocObject();
  *(_QWORD *)(v8 + 16) = sub_1CA0F9E58;
  *(_QWORD *)(v8 + 24) = v7;
  v11[4] = sub_1CA0F9EFC;
  v11[5] = v8;
  v11[0] = MEMORY[0x1E0C809B0];
  v11[1] = 1107296256;
  v11[2] = sub_1CA0F9638;
  v11[3] = &block_descriptor_33;
  v9 = _Block_copy(v11);
  swift_retain();
  swift_release();
  objc_msgSend(a2, sel_enumerateIdentifiersWithBlock_, v9);
  _Block_release(v9);
  LOBYTE(a2) = swift_isEscapingClosureAtFileLocation();
  swift_release();
  result = swift_release();
  if ((a2 & 1) != 0)
    __break(1u);
  return result;
}

uint64_t sub_1CA0F9638(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(a1 + 32))(a2, a3);
}

void sub_1CA0F9660(uint64_t a1, uint64_t a2, void *a3, uint64_t a4)
{
  void (*v6)(uint64_t, id, uint64_t);
  id v7;

  v6 = *(void (**)(uint64_t, id, uint64_t))(a1 + 32);
  v7 = a3;
  v6(a2, v7, a4);

}

uint64_t sub_1CA0F96B0@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, unint64_t *a6@<X8>)
{
  id v11;
  void *v12;
  uint64_t v13;
  uint64_t v14;
  void *v15;
  uint64_t result;
  unint64_t v17;
  _QWORD v18[6];
  unint64_t v19;

  v11 = *(id *)(*(_QWORD *)a1 + 16);
  sub_1CA0F984C((uint64_t)v11, a2, a3, a4, a5, (SEL *)&selRef_adjacencyWithTargetNodeIdentifiers_edgeFilter_edgeDirection_, v18);

  v12 = (void *)v18[0];
  v19 = sub_1CA0AECA8(MEMORY[0x1E0DEE9D8]);
  v13 = swift_allocObject();
  *(_QWORD *)(v13 + 16) = &v19;
  v14 = swift_allocObject();
  *(_QWORD *)(v14 + 16) = sub_1CA0F9E10;
  *(_QWORD *)(v14 + 24) = v13;
  v18[4] = sub_1CA0F9E28;
  v18[5] = v14;
  v18[0] = MEMORY[0x1E0C809B0];
  v18[1] = 1107296256;
  v18[2] = sub_1CA0F9660;
  v18[3] = &block_descriptor;
  v15 = _Block_copy(v18);
  swift_retain();
  swift_release();
  objc_msgSend(v12, sel_enumerateTargetsBySourceWith_, v15);

  _Block_release(v15);
  LOBYTE(v12) = swift_isEscapingClosureAtFileLocation();
  result = swift_release();
  if ((v12 & 1) != 0)
  {
    __break(1u);
  }
  else
  {
    v17 = v19;
    result = swift_release();
    *a6 = v17;
  }
  return result;
}

void sub_1CA0F984C(uint64_t a1@<X0>, _QWORD *a2@<X2>, uint64_t a3@<X3>, uint64_t a4@<X4>, uint64_t a5@<X5>, SEL *a6@<X6>, _QWORD *a7@<X8>)
{
  void *v12;
  uint64_t v13;
  uint64_t v14;
  void *v15;
  id v16;

  v12 = (void *)(*(uint64_t (**)(uint64_t, uint64_t))(a5 + 16))(a4, a5);
  v14 = a2[3];
  v13 = a2[4];
  __swift_project_boxed_opaque_existential_1(a2, v14);
  v15 = (void *)(*(uint64_t (**)(uint64_t, uint64_t))(v13 + 32))(v14, v13);
  v16 = objc_msgSend(v12, *a6, a1, v15, a3);

  *a7 = v16;
}

uint64_t sub_1CA0F9910(uint64_t a1, void *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;
  uint64_t v8;
  void *v9;
  uint64_t result;
  _QWORD v11[6];

  v7 = swift_allocObject();
  *(_QWORD *)(v7 + 16) = a4;
  *(_QWORD *)(v7 + 24) = a1;
  v8 = swift_allocObject();
  *(_QWORD *)(v8 + 16) = sub_1CA0F9E58;
  *(_QWORD *)(v8 + 24) = v7;
  v11[4] = sub_1CA0F9E28;
  v11[5] = v8;
  v11[0] = MEMORY[0x1E0C809B0];
  v11[1] = 1107296256;
  v11[2] = sub_1CA0F9638;
  v11[3] = &block_descriptor_13;
  v9 = _Block_copy(v11);
  swift_retain();
  swift_release();
  objc_msgSend(a2, sel_enumerateIdentifiersWithBlock_, v9);
  _Block_release(v9);
  LOBYTE(a2) = swift_isEscapingClosureAtFileLocation();
  swift_release();
  result = swift_release();
  if ((a2 & 1) != 0)
    __break(1u);
  return result;
}

id sub_1CA0F9A3C(_QWORD *a1, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  void *v6;
  id v7;
  id v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  id v12;
  id v13;
  void *v14;
  void *v16;
  id v17[5];

  v17[4] = *(id *)MEMORY[0x1E0C80C00];
  v5 = *a2;
  v6 = (void *)(*(uint64_t (**)(uint64_t, uint64_t))(a4 + 16))(a3, a4);
  v7 = objc_msgSend(v6, sel_implementation);

  v8 = *(id *)(v5 + 16);
  objc_msgSend(v8, sel_copy);
  sub_1CA1F0F04();
  swift_unknownObjectRelease();
  sub_1CA0AB910(0, &qword_1ED852B10);
  swift_dynamicCast();

  v9 = a1[3];
  v10 = a1[4];
  __swift_project_boxed_opaque_existential_1(a1, v9);
  (*(void (**)(uint64_t, uint64_t))(v10 + 8))(v9, v10);
  v11 = (void *)sub_1CA1F0A00();
  swift_bridgeObjectRelease();
  v17[0] = 0;
  v12 = objc_msgSend(v7, sel_propertiesForNodesWithIdentifiers_propertyName_error_, v16, v11, v17);
  swift_unknownObjectRelease();

  v13 = v17[0];
  if (!v12)
  {
    v14 = v13;
    sub_1CA1F07CC();

    swift_willThrow();
  }
  return v12;
}

uint64_t sub_1CA0F9BE8@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X2>, uint64_t a3@<X3>, uint64_t a4@<X4>, uint64_t *a5@<X8>)
{
  void *v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  id v12;
  uint64_t result;
  uint64_t v14;

  v8 = (void *)(*(uint64_t (**)(uint64_t, uint64_t))(a4 + 16))(a3, a4);
  v9 = a2[3];
  v10 = a2[4];
  __swift_project_boxed_opaque_existential_1(a2, v9);
  v11 = (void *)(*(uint64_t (**)(uint64_t, uint64_t))(v10 + 32))(v9, v10);
  v12 = objc_msgSend(v8, sel_nodeIdentifiersMatchingFilter_intersectingIdentifiers_, v11, a1);

  objc_msgSend(v12, sel_mutableCopy);
  sub_1CA1F0F04();
  swift_unknownObjectRelease();
  sub_1CA0AB910(0, (unint64_t *)&qword_1ED852B18);
  swift_dynamicCast();

  __swift_instantiateConcreteTypeFromMangledName(&qword_1ED852AF0);
  result = swift_allocObject();
  *(_QWORD *)(result + 16) = v14;
  *a5 = result;
  return result;
}

uint64_t sub_1CA0F9D24()
{
  uint64_t v0;
  uint64_t result;

  if (*(_BYTE *)(v0 + 24) == 1)
    return *(_QWORD *)(v0 + 16);
  result = sub_1CA1F11C8();
  __break(1u);
  return result;
}

uint64_t dispatch thunk of AbstractGraph.kgGraph.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 16))();
}

uint64_t sub_1CA0F9DA0()
{
  return swift_initClassMetadata2();
}

uint64_t type metadata accessor for ConcreteGraph(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for ConcreteGraph);
}

uint64_t method lookup function for ConcreteGraph()
{
  return swift_lookUpClassMethod();
}

uint64_t sub_1CA0F9E00()
{
  return swift_deallocObject();
}

uint64_t sub_1CA0F9E10(uint64_t a1, void *a2, uint64_t a3)
{
  uint64_t v3;

  return sub_1CA0F9910(a1, a2, a3, *(_QWORD *)(v3 + 16));
}

uint64_t sub_1CA0F9E18()
{
  return swift_deallocObject();
}

uint64_t sub_1CA0F9E28()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 16))();
}

uint64_t sub_1CA0F9E48()
{
  return swift_deallocObject();
}

uint64_t sub_1CA0F9E5C()
{
  return swift_deallocObject();
}

uint64_t sub_1CA0F9E6C()
{
  return swift_deallocObject();
}

uint64_t sub_1CA0F9E7C(uint64_t a1, void *a2, uint64_t a3)
{
  uint64_t v3;

  return sub_1CA0F950C(a1, a2, a3, *(_QWORD *)(v3 + 16));
}

uint64_t sub_1CA0F9E84()
{
  return swift_deallocObject();
}

uint64_t sub_1CA0F9E94()
{
  return swift_deallocObject();
}

uint64_t sub_1CA0F9EA4(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v2 = *(_QWORD *)(v1 + 24);
  v4 = a1;
  v5 = v2;
  return ElementIdentifierTupleSet.insert(_:)(&v7, &v6, &v5, &v4);
}

uint64_t sub_1CA0F9EE4()
{
  return swift_deallocObject();
}

uint64_t static SparseElement<>.defaultSparseValue.getter()
{
  return sub_1CA1F0EC8();
}

uint64_t dispatch thunk of static SparseElement.defaultSparseValue.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 16))();
}

void sub_1CA0F9F18(_DWORD *a1@<X8>)
{
  *a1 = 0;
}

uint64_t sub_1CA0F9F20@<X0>(_QWORD *a1@<X0>, __int128 *a2@<X1>, _QWORD *a3@<X8>)
{
  *a3 = *a1;
  return sub_1CA0F31BC(a2, (uint64_t)(a3 + 1));
}

uint64_t NodeAdjacency.sources.getter@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  __int128 v5[2];
  uint64_t v6;

  v3 = swift_bridgeObjectRetain();
  sub_1CA0ADC38(v3, &v6);
  sub_1CA0C7A10(v1 + 8, (uint64_t)v5);
  return NodeCollection.init(with:in:)(&v6, v5, a1);
}

uint64_t NodeAdjacency.targets.getter@<X0>(_QWORD *a1@<X8>)
{
  uint64_t *v1;
  uint64_t v3;
  id v4;
  id v5;
  uint64_t v6;
  __int128 v8[2];
  uint64_t v9;

  v3 = *v1;
  v4 = objc_allocWithZone((Class)KGMutableElementIdentifierSet);
  swift_bridgeObjectRetain();
  v5 = objc_msgSend(v4, sel_init);
  __swift_instantiateConcreteTypeFromMangledName(&qword_1ED852AF0);
  v6 = swift_allocObject();
  *(_QWORD *)(v6 + 16) = v5;
  *(_QWORD *)&v8[0] = v6;
  v9 = v3;
  sub_1CA0AC2B4(&v9, (uint64_t)v8);
  swift_bridgeObjectRelease();
  v9 = *(_QWORD *)&v8[0];
  sub_1CA0C7A10((uint64_t)(v1 + 1), (uint64_t)v8);
  return NodeCollection.init(with:in:)(&v9, v8, a1);
}

uint64_t NodeAdjacency.sourcesCount.getter()
{
  uint64_t v0;

  return *(_QWORD *)(*(_QWORD *)v0 + 16);
}

uint64_t NodeAdjacency.intersectingTargets(with:)@<X0>(uint64_t *a1@<X0>, _QWORD *a2@<X8>)
{
  return sub_1CA0FA0FC(a1, (void (*)(uint64_t *, __int128 *, uint64_t))sub_1CA0AEDA4, a2);
}

uint64_t NodeAdjacency.intersectingSources(with:)@<X0>(uint64_t *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t *v2;
  uint64_t v4;
  uint64_t v5;
  __int128 v7[2];
  uint64_t v8[2];

  v4 = (uint64_t)(v2 + 1);
  v8[1] = *v2;
  v8[0] = *a1;
  DirectedBinaryAdjacency.intersectingSources(with:)(v8, v7);
  v5 = *(_QWORD *)&v7[0];
  sub_1CA0C7A10(v4, (uint64_t)v7);
  *a2 = v5;
  return sub_1CA0F31BC(v7, (uint64_t)(a2 + 1));
}

uint64_t NodeAdjacency.subtractingTargets(with:)@<X0>(uint64_t *a1@<X0>, _QWORD *a2@<X8>)
{
  return sub_1CA0FA0FC(a1, (void (*)(uint64_t *, __int128 *, uint64_t))sub_1CA0AF3DC, a2);
}

uint64_t sub_1CA0FA0FC@<X0>(uint64_t *a1@<X0>, void (*a2)(uint64_t *, __int128 *, uint64_t)@<X2>, _QWORD *a3@<X8>)
{
  uint64_t *v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  __int128 v10[2];
  uint64_t v11;

  v6 = *v3;
  v7 = *a1;
  *(_QWORD *)&v10[0] = sub_1CA0AECA8(MEMORY[0x1E0DEE9D8]);
  v11 = v6;
  swift_bridgeObjectRetain();
  swift_retain();
  a2(&v11, v10, v7);
  swift_bridgeObjectRelease();
  swift_release();
  v8 = *(_QWORD *)&v10[0];
  sub_1CA0C7A10((uint64_t)(v3 + 1), (uint64_t)v10);
  *a3 = v8;
  return sub_1CA0F31BC(v10, (uint64_t)(a3 + 1));
}

uint64_t NodeAdjacency.subtractingSources(with:)@<X0>(uint64_t *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  __int128 v8[2];
  uint64_t v9;

  v4 = *v2;
  v5 = *a1;
  *(_QWORD *)&v8[0] = sub_1CA0AECA8(MEMORY[0x1E0DEE9D8]);
  v9 = v4;
  swift_bridgeObjectRetain();
  swift_retain();
  sub_1CA0AF650(&v9, v5, (uint64_t *)v8);
  swift_bridgeObjectRelease();
  swift_release();
  v6 = *(_QWORD *)&v8[0];
  sub_1CA0C7A10((uint64_t)(v2 + 1), (uint64_t)v8);
  *a2 = v6;
  return sub_1CA0F31BC(v8, (uint64_t)(a2 + 1));
}

uint64_t NodeAdjacency.joinOnTargets<A>(_:)@<X0>(uint64_t *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t *v2;
  uint64_t v4;
  uint64_t v5;
  __int128 v7[2];
  uint64_t v8;
  uint64_t v9;

  v4 = *a1;
  v9 = *v2;
  v8 = v4;
  static ElementIdentifierTupleSet.joinOnTargets(_:_:)(&v9, &v8, (unint64_t *)v7);
  v5 = *(_QWORD *)&v7[0];
  sub_1CA0C7A10((uint64_t)(v2 + 1), (uint64_t)v7);
  *a2 = v5;
  return sub_1CA0F31BC(v7, (uint64_t)(a2 + 1));
}

uint64_t NodeAdjacency.enumerateTargetsBySource(with:)()
{
  swift_bridgeObjectRetain();
  DirectedBinaryAdjacency.enumerateTargetsBySource(with:)((void (*)(uint64_t *, uint64_t *, char *))sub_1CA0FA6F0);
  return swift_bridgeObjectRelease();
}

uint64_t sub_1CA0FA300(_QWORD *a1, uint64_t *a2, uint64_t a3, void (*a4)(_QWORD *, __int128 *, uint64_t), uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  uint64_t v15;
  id v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  __int128 v23[2];
  uint64_t v24;
  __int128 v25[3];
  _QWORD v26[6];

  v15 = *a2;
  v16 = objc_msgSend(objc_allocWithZone((Class)KGMutableElementIdentifierSet), sel_initWithElementIdentifier_, *a1);
  __swift_instantiateConcreteTypeFromMangledName(&qword_1ED852AF0);
  v17 = swift_allocObject();
  *(_QWORD *)(v17 + 16) = v16;
  *(_QWORD *)&v23[0] = v17;
  a6 += 8;
  sub_1CA0C7A10(a6, (uint64_t)v25);
  NodeCollection.init(with:in:)(v23, v25, v26);
  v24 = v15;
  sub_1CA0C7A10(a6, (uint64_t)v23);
  NodeCollection.init(with:in:)(&v24, v23, v25);
  swift_retain();
  a4(v26, v25, a3);
  v19 = type metadata accessor for NodeCollection(0, a8, a10, v18);
  (*(void (**)(__int128 *, uint64_t))(*(_QWORD *)(v19 - 8) + 8))(v25, v19);
  v21 = type metadata accessor for NodeCollection(0, a7, a9, v20);
  return (*(uint64_t (**)(_QWORD *, uint64_t))(*(_QWORD *)(v21 - 8) + 8))(v26, v21);
}

uint64_t NodeAdjacency.targets(forSources:)@<X0>(uint64_t *a1@<X0>, _QWORD *a2@<X8>)
{
  _QWORD *v2;
  __int128 v5[2];
  uint64_t v6;
  uint64_t v7;

  *(_QWORD *)&v5[0] = *v2;
  v7 = *a1;
  DirectedBinaryAdjacency.targets(forSources:)(&v7, &v6);
  sub_1CA0C7A10((uint64_t)(v2 + 1), (uint64_t)v5);
  return NodeCollection.init(with:in:)(&v6, v5, a2);
}

uint64_t NodeAdjacency.transposed()@<X0>(_QWORD *a1@<X8>)
{
  _QWORD *v1;
  uint64_t v3;
  uint64_t v4;
  __int128 v6[2];
  uint64_t v7;

  v3 = (uint64_t)(v1 + 1);
  *(_QWORD *)&v6[0] = *v1;
  DirectedBinaryAdjacency.transposed()();
  v4 = v7;
  sub_1CA0C7A10(v3, (uint64_t)v6);
  *a1 = v4;
  return sub_1CA0F31BC(v6, (uint64_t)(a1 + 1));
}

uint64_t NodeAdjacency.subtracting(_:)@<X0>(uint64_t *a1@<X0>, _QWORD *a2@<X8>)
{
  _QWORD *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  __int128 v8[2];
  uint64_t v9;

  v4 = (uint64_t)(v2 + 1);
  v5 = *a1;
  *(_QWORD *)&v8[0] = *v2;
  v9 = v5;
  swift_bridgeObjectRetain();
  ElementIdentifierTupleSet.subtract(_:)((KnowledgeGraphKit::ElementIdentifierTupleSet)&v9);
  v6 = *(_QWORD *)&v8[0];
  sub_1CA0C7A10(v4, (uint64_t)v8);
  *a2 = v6;
  return sub_1CA0F31BC(v8, (uint64_t)(a2 + 1));
}

uint64_t NodeAdjacency.union(with:)@<X0>(uint64_t *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  __int128 v9[2];
  uint64_t v10;

  v5 = (uint64_t)(v2 + 1);
  v4 = *v2;
  v6 = *a1;
  *(_QWORD *)&v9[0] = v4;
  v10 = v6;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  ElementIdentifierTupleSet.formUnion(_:)(&v10);
  v7 = *(_QWORD *)&v9[0];
  sub_1CA0C7A10(v5, (uint64_t)v9);
  *a2 = v7;
  return sub_1CA0F31BC(v9, (uint64_t)(a2 + 1));
}

uint64_t NodeAdjacency.targets(minCount:)@<X0>(unint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  _QWORD *v2;
  __int128 v5[2];
  uint64_t v6;

  *(_QWORD *)&v5[0] = *v2;
  DirectedBinaryAdjacency.targets(minCount:)(a1, &v6);
  sub_1CA0C7A10((uint64_t)(v2 + 1), (uint64_t)v5);
  return NodeCollection.init(with:in:)(&v6, v5, a2);
}

uint64_t static NodeAdjacency<>.identity(with:)@<X0>(uint64_t *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  __int128 v6[2];
  uint64_t v7;

  v3 = (uint64_t)(a1 + 1);
  v7 = *a1;
  sub_1CA0AC69C(&v7, (unint64_t *)v6);
  v4 = *(_QWORD *)&v6[0];
  sub_1CA0C7A10(v3, (uint64_t)v6);
  *a2 = v4;
  return sub_1CA0F31BC(v6, (uint64_t)(a2 + 1));
}

uint64_t sub_1CA0FA6F0(_QWORD *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v3;

  return sub_1CA0FA300(a1, a2, a3, *(void (**)(_QWORD *, __int128 *, uint64_t))(v3 + 48), *(_QWORD *)(v3 + 56), *(_QWORD *)(v3 + 64), *(_QWORD *)(v3 + 16), *(_QWORD *)(v3 + 24), *(_QWORD *)(v3 + 32), *(_QWORD *)(v3 + 40));
}

uint64_t sub_1CA0FA720()
{
  return swift_allocateGenericValueMetadata();
}

uint64_t sub_1CA0FA728(uint64_t a1)
{
  uint64_t v1;

  v1 = a1 + 8;
  swift_bridgeObjectRelease();
  return __swift_destroy_boxed_opaque_existential_0(v1);
}

uint64_t sub_1CA0FA750(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  __int128 v4;
  uint64_t v5;
  void (*v6)(uint64_t, uint64_t, uint64_t);

  *(_QWORD *)a1 = *(_QWORD *)a2;
  v3 = a2 + 8;
  v4 = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 32) = v4;
  v5 = v4;
  v6 = **(void (***)(uint64_t, uint64_t, uint64_t))(v4 - 8);
  swift_bridgeObjectRetain();
  v6(a1 + 8, v3, v5);
  return a1;
}

_QWORD *sub_1CA0FA7B8(_QWORD *a1, _QWORD *a2)
{
  uint64_t *v3;

  v3 = a2 + 1;
  *a1 = *a2;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  __swift_assign_boxed_opaque_existential_1(a1 + 1, v3);
  return a1;
}

uint64_t sub_1CA0FA80C(uint64_t a1, uint64_t a2)
{
  *(_QWORD *)a1 = *(_QWORD *)a2;
  swift_bridgeObjectRelease();
  __swift_destroy_boxed_opaque_existential_0(a1 + 8);
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  return a1;
}

uint64_t sub_1CA0FA860(uint64_t *a1, int a2)
{
  uint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *((_BYTE *)a1 + 48))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t sub_1CA0FA8A8(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)(result + 40) = 0;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 48) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)result = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 48) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

void type metadata accessor for NodeAdjacency()
{
  JUMPOUT(0x1CAA4BAC4);
}

BOOL static MAError.== infix(_:_:)(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return *a1 == *a2;
}

uint64_t MAError.hash(into:)()
{
  return sub_1CA1F13FC();
}

uint64_t MAError.hashValue.getter()
{
  sub_1CA1F13F0();
  sub_1CA1F13FC();
  return sub_1CA1F1438();
}

unint64_t sub_1CA0FA984()
{
  unint64_t result;

  result = qword_1EF938680[0];
  if (!qword_1EF938680[0])
  {
    result = MEMORY[0x1CAA4BB30](&protocol conformance descriptor for MAError, &type metadata for MAError);
    atomic_store(result, qword_1EF938680);
  }
  return result;
}

uint64_t getEnumTagSinglePayload for MAError(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v4;
  unsigned int v6;
  BOOL v7;
  int v8;

  if (!a2)
    return 0;
  if (a2 < 0xFB)
    goto LABEL_17;
  if (a2 + 5 >= 0xFFFF00)
    v2 = 4;
  else
    v2 = 2;
  if ((a2 + 5) >> 8 < 0xFF)
    v3 = 1;
  else
    v3 = v2;
  if (v3 == 4)
  {
    v4 = *(_DWORD *)(a1 + 1);
    if (v4)
      return (*a1 | (v4 << 8)) - 5;
  }
  else
  {
    if (v3 == 2)
    {
      v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1))
        goto LABEL_17;
      return (*a1 | (v4 << 8)) - 5;
    }
    v4 = a1[1];
    if (a1[1])
      return (*a1 | (v4 << 8)) - 5;
  }
LABEL_17:
  v6 = *a1;
  v7 = v6 >= 6;
  v8 = v6 - 6;
  if (!v7)
    v8 = -1;
  return (v8 + 1);
}

uint64_t storeEnumTagSinglePayload for MAError(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 5 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 5) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFB)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFA)
    return ((uint64_t (*)(void))((char *)&loc_1CA0FAAA4 + 4 * byte_1CA1FA875[v4]))();
  *a1 = a2 + 5;
  return ((uint64_t (*)(void))((char *)sub_1CA0FAAD8 + 4 * byte_1CA1FA870[v4]))();
}

uint64_t sub_1CA0FAAD8(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1CA0FAAE0(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1CA0FAAE8);
  return result;
}

uint64_t sub_1CA0FAAF4(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1CA0FAAFCLL);
  *(_BYTE *)result = a2 + 5;
  return result;
}

uint64_t sub_1CA0FAB00(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1CA0FAB08(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for MAError()
{
  return &type metadata for MAError;
}

__n128 UniqueSortedBuffer.SymmetricDifference.lhs.getter@<Q0>(_OWORD *a1@<X8>)
{
  uint64_t v1;
  __n128 result;
  __int128 v3;

  result = *(__n128 *)v1;
  v3 = *(_OWORD *)(v1 + 16);
  *a1 = *(_OWORD *)v1;
  a1[1] = v3;
  return result;
}

__n128 UniqueSortedBuffer.SymmetricDifference.rhs.getter@<Q0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  __n128 result;
  __int128 v3;

  result = *(__n128 *)(v1 + 32);
  v3 = *(_OWORD *)(v1 + 48);
  *(__n128 *)a1 = result;
  *(_OWORD *)(a1 + 16) = v3;
  return result;
}

uint64_t static UniqueSortedBuffer.SymmetricDifference.Index.< infix(_:_:)(uint64_t a1, uint64_t a2)
{
  char v2;
  BOOL v3;

  v2 = 1;
  v3 = *(_QWORD *)a1 < *(_QWORD *)a2 || *(_QWORD *)(a1 + 8) < *(_QWORD *)(a2 + 8);
  if (!v3 && ((*(unsigned __int8 *)(a1 + 16) ^ 1 | *(unsigned __int8 *)(a2 + 16)) & 1) != 0)
    v2 = *(_BYTE *)(a1 + 17) & (*(_BYTE *)(a2 + 17) ^ 1);
  return v2 & 1;
}

BOOL static UniqueSortedBuffer.SymmetricDifference.Index.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  _BOOL4 v3;

  v3 = *(_QWORD *)a1 != *(_QWORD *)a2 || *(_QWORD *)(a1 + 8) != *(_QWORD *)(a2 + 8);
  return ((v3 | *(unsigned __int8 *)(a1 + 16) ^ *(unsigned __int8 *)(a2 + 16) | *(unsigned __int8 *)(a2 + 17) ^ *(unsigned __int8 *)(a1 + 17)) & 1) == 0;
}

uint64_t UniqueSortedBuffer.SymmetricDifference.startIndex.getter@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  __int128 *v2;
  __int128 v3;
  __int128 v4;
  _QWORD v6[2];
  __int16 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;

  v3 = v2[1];
  v8 = *v2;
  v9 = v3;
  v4 = v2[3];
  v10 = v2[2];
  v11 = v4;
  v6[0] = -1;
  v6[1] = -1;
  v7 = 257;
  return UniqueSortedBuffer.SymmetricDifference.index(after:)((uint64_t)v6, a1, a2);
}

uint64_t UniqueSortedBuffer.SymmetricDifference.index(after:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t result;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char v11;
  char v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  BOOL v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  char *v29;
  char v30;
  char v31;
  void (*v32)(char *, uint64_t);
  _QWORD *v33;
  uint64_t v34;
  _QWORD *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  char *v40;
  char *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  char v57;

  v35 = a3;
  v45 = a2;
  v49 = *(_QWORD *)(a2 + 16);
  v42 = *(_QWORD *)(v49 - 8);
  v4 = MEMORY[0x1E0C80A78](a1, a2);
  v41 = (char *)&v35 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  result = MEMORY[0x1E0C80A78](v4, v6);
  v40 = (char *)&v35 - v9;
  v10 = *(_QWORD *)(result + 8);
  v50 = *(_QWORD *)result;
  v51 = v10;
  v11 = *(_BYTE *)(result + 16);
  v12 = *(_BYTE *)(result + 17);
  v14 = *v3;
  v13 = v3[1];
  v16 = v3[2];
  v15 = v3[3];
  v17 = v3[4];
  v47 = v3[5];
  v48 = v17;
  v18 = v3[6];
  v43 = v3[7];
  v44 = v18;
  v57 = v11;
  v37 = v16;
  v36 = v15;
  v38 = v13;
  v39 = v14;
  v20 = v43;
  v19 = v18;
  while ((v11 & 1) != 0)
  {
    v21 = __OFADD__(v50++, 1);
    if (v21)
      goto LABEL_19;
    if ((v12 & 1) != 0)
      goto LABEL_7;
LABEL_8:
    v53 = v14;
    v54 = v13;
    v55 = v16;
    v56 = v15;
    v46 = *(_QWORD *)(v45 + 24);
    type metadata accessor for UniqueSortedBuffer(0, v49, v46, v8);
    v22 = UniqueSortedBuffer.count.getter();
    v23 = v50;
    v57 = v50 != v22;
    v53 = v48;
    v54 = v47;
    v55 = v19;
    v56 = v20;
    result = UniqueSortedBuffer.count.getter();
    if (v23 == v22 || v51 == result)
    {
      v31 = v51 != result;
      v30 = v57;
LABEL_17:
      v33 = v35;
      v34 = v51;
      *v35 = v50;
      v33[1] = v34;
      *((_BYTE *)v33 + 16) = v30 & 1;
      *((_BYTE *)v33 + 17) = v31 & 1;
      return result;
    }
    v53 = v14;
    v54 = v13;
    v55 = v16;
    v56 = v15;
    v25 = v51;
    v26 = v49;
    v52 = v50;
    v27 = sub_1CA1F09F4();
    MEMORY[0x1CAA4BB30](MEMORY[0x1E0DEA5E8], v27);
    sub_1CA1F13C0();
    v28 = v40;
    sub_1CA1F13CC();
    v53 = v48;
    v54 = v47;
    v55 = v19;
    v56 = v20;
    v52 = v25;
    v29 = v41;
    sub_1CA1F13CC();
    v30 = sub_1CA1F0994();
    v57 = v30 & 1;
    v31 = sub_1CA1F0994();
    v32 = *(void (**)(char *, uint64_t))(v42 + 8);
    v32(v29, v26);
    result = ((uint64_t (*)(char *, uint64_t))v32)(v28, v26);
    v13 = v38;
    v14 = v39;
    if ((v30 & 1) != 0)
    {
      v11 = 1;
      v12 = 1;
      v16 = v37;
      v15 = v36;
      if ((v31 & 1) != 0)
        continue;
    }
    goto LABEL_17;
  }
  if ((v12 & 1) == 0)
  {
    v30 = 0;
    v31 = 0;
    goto LABEL_17;
  }
LABEL_7:
  v21 = __OFADD__(v51++, 1);
  if (!v21)
    goto LABEL_8;
  __break(1u);
LABEL_19:
  __break(1u);
  return result;
}

uint64_t UniqueSortedBuffer.SymmetricDifference.endIndex.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X3>, uint64_t a3@<X8>)
{
  uint64_t v4;
  uint64_t result;

  type metadata accessor for UniqueSortedBuffer(0, *(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), a2);
  v4 = UniqueSortedBuffer.count.getter();
  result = UniqueSortedBuffer.count.getter();
  *(_QWORD *)a3 = v4;
  *(_QWORD *)(a3 + 8) = result;
  *(_WORD *)(a3 + 16) = 0;
  return result;
}

uint64_t UniqueSortedBuffer.SymmetricDifference.subscript.getter()
{
  uint64_t v0;

  v0 = sub_1CA1F09F4();
  MEMORY[0x1CAA4BB30](MEMORY[0x1E0DEA5E8], v0);
  sub_1CA1F13C0();
  return sub_1CA1F13CC();
}

void sub_1CA0FB018()
{
  JUMPOUT(0x1CAA4BB30);
}

void sub_1CA0FB028()
{
  JUMPOUT(0x1CAA4BB30);
}

void sub_1CA0FB038()
{
  JUMPOUT(0x1CAA4BB30);
}

void sub_1CA0FB048()
{
  JUMPOUT(0x1CAA4BB30);
}

void (*sub_1CA0FB060(_QWORD *a1, uint64_t a2, uint64_t a3))(_QWORD *a1)
{
  _QWORD *v6;

  v6 = malloc(0x28uLL);
  *a1 = v6;
  v6[4] = sub_1CA0FB0BC(v6, a2, a3);
  return sub_1CA0C67C8;
}

void (*sub_1CA0FB0BC(_QWORD *a1, uint64_t a2, uint64_t a3))(_QWORD *a1)
{
  uint64_t v3;
  uint64_t v4;

  v3 = *(_QWORD *)(a3 + 16);
  v4 = *(_QWORD *)(v3 - 8);
  *a1 = v3;
  a1[1] = v4;
  a1[2] = malloc(*(_QWORD *)(v4 + 64));
  UniqueSortedBuffer.SymmetricDifference.subscript.getter();
  return sub_1CA0A7D14;
}

void sub_1CA0FB130(uint64_t a1@<X8>)
{
  *(_QWORD *)a1 = 0;
  *(_QWORD *)(a1 + 8) = 0;
  *(_WORD *)(a1 + 16) = 3;
}

double sub_1CA0FB150(uint64_t a1, uint64_t a2)
{
  char v3;
  char v4;
  double result;
  __int128 v6;
  char v7;
  char v8;

  UniqueSortedBuffer.SymmetricDifference.index(after:)(a1, a2, &v6);
  v3 = v7;
  v4 = v8;
  result = *(double *)&v6;
  *(_OWORD *)a1 = v6;
  *(_BYTE *)(a1 + 16) = v3;
  *(_BYTE *)(a1 + 17) = v4;
  return result;
}

__n128 sub_1CA0FB194@<Q0>(uint64_t a1@<X0>, __n128 *a2@<X8>)
{
  unint64_t *v2;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unsigned __int8 v12;
  unsigned __int8 v13;
  __n128 result;
  __n128 v15;
  unsigned __int8 v16;
  unsigned __int8 v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;

  v5 = v2[1];
  v6 = v2[2];
  v7 = v2[3];
  v8 = v2[4];
  v9 = v2[5];
  v10 = v2[6];
  v11 = v2[7];
  v18 = *v2;
  v4 = v18;
  v19 = v5;
  v20 = v6;
  v21 = v7;
  v22 = v8;
  v23 = v9;
  v24 = v10;
  v25 = v11;
  UniqueSortedBuffer.SymmetricDifference.startIndex.getter(a1, &v15);
  v12 = v16;
  v13 = v17;
  result = v15;
  a2->n128_u64[0] = v4;
  a2->n128_u64[1] = v5;
  a2[1].n128_u64[0] = v6;
  a2[1].n128_u64[1] = v7;
  a2[2].n128_u64[0] = v8;
  a2[2].n128_u64[1] = v9;
  a2[3].n128_u64[0] = v10;
  a2[3].n128_u64[1] = v11;
  a2[4] = result;
  a2[5].n128_u8[0] = v12;
  a2[5].n128_u8[1] = v13;
  return result;
}

uint64_t sub_1CA0FB22C(uint64_t a1)
{
  MEMORY[0x1CAA4BB30](&protocol conformance descriptor for UniqueSortedBuffer<A>.SymmetricDifference, a1);
  return sub_1CA1F0D3C();
}

uint64_t sub_1CA0FB260(uint64_t a1)
{
  MEMORY[0x1CAA4BB30](&protocol conformance descriptor for UniqueSortedBuffer<A>.SymmetricDifference, a1);
  return sub_1CA1F0D48();
}

uint64_t sub_1CA0FB2B4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  return MEMORY[0x1CAA4A198](a1, a2, a3, a4, a5, a6, a7, a8);
}

uint64_t sub_1CA0FB2EC(uint64_t a1, int a2)
{
  if (a2 && *(_BYTE *)(a1 + 64))
    return (*(_DWORD *)a1 + 1);
  else
    return 0;
}

uint64_t sub_1CA0FB30C(uint64_t result, int a2, int a3)
{
  char v3;

  if (a2)
  {
    *(_QWORD *)(result + 56) = 0;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_QWORD *)result = (a2 - 1);
    if (!a3)
      return result;
    v3 = 1;
  }
  else
  {
    if (!a3)
      return result;
    v3 = 0;
  }
  *(_BYTE *)(result + 64) = v3;
  return result;
}

uint64_t type metadata accessor for UniqueSortedBuffer.SymmetricDifference(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for UniqueSortedBuffer.SymmetricDifference);
}

uint64_t sub_1CA0FB354()
{
  return swift_allocateGenericValueMetadata();
}

uint64_t sub_1CA0FB35C(uint64_t a1, unsigned int a2)
{
  unsigned int v3;
  BOOL v4;
  int v5;

  if (!a2)
    return 0;
  if (a2 >= 0xFF && *(_BYTE *)(a1 + 18))
    return (*(_DWORD *)a1 + 255);
  v3 = *(unsigned __int8 *)(a1 + 16);
  v4 = v3 >= 2;
  v5 = (v3 + 2147483646) & 0x7FFFFFFF;
  if (!v4)
    v5 = -1;
  return (v5 + 1);
}

uint64_t sub_1CA0FB3B0(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFE)
  {
    *(_WORD *)(result + 16) = 0;
    *(_QWORD *)result = a2 - 255;
    *(_QWORD *)(result + 8) = 0;
    if (a3 >= 0xFF)
      *(_BYTE *)(result + 18) = 1;
  }
  else
  {
    if (a3 >= 0xFF)
      *(_BYTE *)(result + 18) = 0;
    if (a2)
      *(_BYTE *)(result + 16) = a2 + 1;
  }
  return result;
}

uint64_t type metadata accessor for UniqueSortedBuffer.SymmetricDifference.Index(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for UniqueSortedBuffer.SymmetricDifference.Index);
}

id Filter<A>.kgFilter.getter()
{
  id v0;
  void *v1;
  void *v2;
  void *v3;
  id v4;

  v0 = objc_allocWithZone((Class)KGNodeFilter);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v1 = (void *)sub_1CA1F0AE4();
  swift_bridgeObjectRelease();
  v2 = (void *)sub_1CA1F0AE4();
  swift_bridgeObjectRelease();
  v3 = (void *)sub_1CA1F08BC();
  swift_bridgeObjectRelease();
  v4 = objc_msgSend(v0, sel_initWithRequiredLabels_optionalLabels_properties_, v1, v2, v3);

  return v4;
}

{
  id v0;
  void *v1;
  void *v2;
  void *v3;
  id v4;

  v0 = objc_allocWithZone((Class)KGEdgeFilter);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v1 = (void *)sub_1CA1F0AE4();
  swift_bridgeObjectRelease();
  v2 = (void *)sub_1CA1F0AE4();
  swift_bridgeObjectRelease();
  v3 = (void *)sub_1CA1F08BC();
  swift_bridgeObjectRelease();
  v4 = objc_msgSend(v0, sel_initWithRequiredLabels_optionalLabels_properties_, v1, v2, v3);

  return v4;
}

uint64_t Filter<A>.relation.getter(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD v7[3];

  v3 = *v2;
  v4 = v2[1];
  v5 = v2[2];
  v7[0] = v3;
  v7[1] = v4;
  v7[2] = v5;
  NodeFilterRelation.init(with:)(v7, *(_QWORD *)(a1 + 16), a2);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return swift_bridgeObjectRetain();
}

uint64_t Filter<A>.init()@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v2;
  uint64_t result;
  uint64_t v4;
  uint64_t v5;

  v2 = MEMORY[0x1E0DEE9D8];
  result = FilterProperties.init(dictionaryLiteral:)(MEMORY[0x1E0DEE9D8], &v5);
  v4 = v5;
  *a1 = v2;
  a1[1] = v2;
  a1[2] = v4;
  return result;
}

uint64_t dispatch thunk of NodeFilter.allOfLabels.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 8))();
}

uint64_t dispatch thunk of NodeFilter.anyOfLabels.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 16))();
}

uint64_t dispatch thunk of NodeFilter.properties.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 24))();
}

uint64_t dispatch thunk of NodeFilter.kgFilter.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 32))();
}

uint64_t Filter.init(with:anyOfLabels:properties:)@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X2>, _QWORD *a4@<X8>)
{
  uint64_t v4;

  v4 = *a3;
  *a4 = result;
  a4[1] = a2;
  a4[2] = v4;
  return result;
}

uint64_t Filter.allOfLabels.getter()
{
  sub_1CA0E6924();
  return swift_bridgeObjectRetain();
}

uint64_t Filter.anyOfLabels.getter()
{
  sub_1CA0E692C();
  return swift_bridgeObjectRetain();
}

uint64_t Filter.properties.getter@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v1;

  *a1 = *(_QWORD *)(v1 + 16);
  return swift_bridgeObjectRetain();
}

uint64_t Filter.init(with:properties:)@<X0>(uint64_t result@<X0>, uint64_t *a2@<X1>, _QWORD *a3@<X8>)
{
  uint64_t v3;
  uint64_t v4;

  v3 = *a2;
  v4 = MEMORY[0x1E0DEE9D8];
  *a3 = result;
  a3[1] = v4;
  a3[2] = v3;
  return result;
}

double Filter.init(with:properties:)@<D0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X2>, uint64_t *a4@<X8>)
{
  uint64_t v7;
  uint64_t v8;
  double result;
  uint64_t v10;

  v7 = *a3;
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_1EF937190);
  v8 = swift_allocObject();
  *(_QWORD *)&result = 1;
  *(_OWORD *)(v8 + 16) = xmmword_1CA1F9100;
  *(_QWORD *)(v8 + 32) = a1;
  *(_QWORD *)(v8 + 40) = a2;
  v10 = MEMORY[0x1E0DEE9D8];
  *a4 = v8;
  a4[1] = v10;
  a4[2] = v7;
  return result;
}

uint64_t Filter.setting(properties:)@<X0>(uint64_t *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v9;
  uint64_t v11;

  v4 = *a1;
  v5 = *v2;
  v6 = v2[1];
  v7 = v2[2];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  v11 = v7;
  sub_1CA0F31D4(v4, (uint64_t)sub_1CA0F353C, 0, isUniquelyReferenced_nonNull_native, (uint64_t)&v11);
  v9 = v11;
  swift_bridgeObjectRelease();
  *a2 = v5;
  a2[1] = v6;
  a2[2] = v9;
  swift_bridgeObjectRetain();
  return swift_bridgeObjectRetain();
}

uint64_t Filter.addingPredicates<A>(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, _QWORD *a5@<X8>)
{
  uint64_t *v5;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t TupleTypeMetadata2;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char v20;
  uint64_t v21;
  uint64_t result;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  char v28;
  void *v29;
  _QWORD *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  __int128 v36;
  _OWORD v37[2];
  _OWORD v38[2];
  _QWORD v39[2];
  __int128 v40;
  __int128 v41;
  uint64_t v42;
  uint64_t v43;
  __int128 v44;
  __int128 v45;
  uint64_t v46;

  v11 = *v5;
  v10 = v5[1];
  v12 = v5[2];
  v46 = v12;
  v13 = type metadata accessor for ConcreteElementedTypedProperty(255, *(_QWORD *)(a2 + 16), a3, a4);
  v15 = type metadata accessor for BinaryPredicate(255, a3, a4, v14);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v34 = v13;
  v35 = v15;
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  if (MEMORY[0x1CAA4A2DC](a1, TupleTypeMetadata2))
  {
    v30 = a5;
    v31 = v11;
    v32 = v10;
    v33 = a1;
    v17 = 0;
    v18 = a1 + 32;
    while (1)
    {
      v19 = v12;
      v20 = sub_1CA1F0B80();
      sub_1CA1F0B20();
      if ((v20 & 1) == 0)
        break;
      v21 = *(_QWORD *)(TupleTypeMetadata2 - 8);
      result = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(v21 + 16))(&v42, v18, TupleTypeMetadata2);
      v23 = v17 + 1;
      if (__OFADD__(v17, 1))
        goto LABEL_18;
      v24 = v42;
      v25 = v43;
      v39[0] = v42;
      v39[1] = v43;
      v40 = v44;
      v41 = v45;
      v26 = *(_QWORD *)(v35 - 8);
      (*(void (**)(_OWORD *))(v26 + 16))(v37);
      v38[0] = v37[0];
      v38[1] = v37[1];
      v12 = v19;
      if (*(_QWORD *)(v19 + 16))
      {
        swift_bridgeObjectRetain_n();
        v27 = sub_1CA0AA474(v24, v25);
        if ((v28 & 1) != 0)
        {
          sub_1CA0B6A98(*(_QWORD *)(v19 + 56) + 32 * v27, (uint64_t)&v36);
        }
        else
        {
          v36 = 0u;
          v37[0] = 0u;
        }
        swift_bridgeObjectRelease();
        if (*((_QWORD *)&v37[0] + 1))
        {
          swift_bridgeObjectRelease();
          sub_1CA0BD158((uint64_t)&v36);
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          sub_1CA1F0DF0();
          sub_1CA0FBB78();
          v29 = (void *)sub_1CA1F0E98();
          sub_1CA1F085C();

          (*(void (**)(_OWORD *, uint64_t))(v26 + 8))(v38, v35);
          (*(void (**)(_QWORD *, uint64_t))(v21 + 8))(v39, TupleTypeMetadata2);
          *v30 = v31;
          v30[1] = v32;
          v30[2] = v19;
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          return swift_bridgeObjectRetain();
        }
      }
      else
      {
        v36 = 0u;
        v37[0] = 0u;
        swift_bridgeObjectRetain();
      }
      sub_1CA0BD158((uint64_t)&v36);
      *(_QWORD *)&v36 = v24;
      *((_QWORD *)&v36 + 1) = v25;
      sub_1CA0F357C((uint64_t)v38, (uint64_t)&v36, (uint64_t)&v46, v35, v34, (uint64_t)&protocol witness table for BinaryPredicate<A>, (uint64_t)&protocol witness table for ConcreteElementedTypedProperty<A, B>);
      (*(void (**)(_OWORD *, uint64_t))(v26 + 8))(v38, v35);
      (*(void (**)(_QWORD *, uint64_t))(v21 + 8))(v39, TupleTypeMetadata2);
      swift_bridgeObjectRelease();
      ++v17;
      v18 += 48;
      if (v23 == MEMORY[0x1CAA4A2DC](v33, TupleTypeMetadata2))
      {
        swift_bridgeObjectRelease();
        v12 = v46;
        v11 = v31;
        v10 = v32;
        a5 = v30;
        goto LABEL_15;
      }
    }
    result = sub_1CA1F1090();
    __break(1u);
LABEL_18:
    __break(1u);
  }
  else
  {
    swift_bridgeObjectRelease();
LABEL_15:
    *a5 = v11;
    a5[1] = v10;
    a5[2] = v12;
    swift_bridgeObjectRetain();
    return swift_bridgeObjectRetain();
  }
  return result;
}

BOOL static CompoundFilter.CompoundType.== infix(_:_:)(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return ((*a1 ^ *a2) & 1) == 0;
}

uint64_t CompoundFilter.CompoundType.hash(into:)()
{
  return sub_1CA1F13FC();
}

uint64_t CompoundFilter.CompoundType.hashValue.getter()
{
  sub_1CA1F13F0();
  sub_1CA1F13FC();
  return sub_1CA1F1438();
}

uint64_t sub_1CA0FBB10()
{
  sub_1CA1F13F0();
  CompoundFilter.CompoundType.hash(into:)();
  return sub_1CA1F1438();
}

uint64_t CompoundFilter.filters.getter()
{
  return swift_bridgeObjectRetain();
}

void CompoundFilter.type.getter(_BYTE *a1@<X8>)
{
  uint64_t v1;

  *a1 = *(_BYTE *)(v1 + 8);
}

uint64_t static CompoundFilter.and(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  *(_QWORD *)a2 = a1;
  *(_BYTE *)(a2 + 8) = 0;
  return swift_bridgeObjectRetain();
}

uint64_t static CompoundFilter.or(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  *(_QWORD *)a2 = a1;
  *(_BYTE *)(a2 + 8) = 1;
  return swift_bridgeObjectRetain();
}

unint64_t sub_1CA0FBB78()
{
  unint64_t result;

  result = qword_1EF937520;
  if (!qword_1EF937520)
  {
    objc_opt_self();
    result = swift_getObjCClassMetadata();
    atomic_store(result, &qword_1EF937520);
  }
  return result;
}

void sub_1CA0FBBB4()
{
  JUMPOUT(0x1CAA4BB30);
}

uint64_t sub_1CA0FBBC8()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

_QWORD *sub_1CA0FBBF8(_QWORD *a1, _QWORD *a2)
{
  uint64_t v3;

  v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  a1[2] = a2[2];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

_QWORD *sub_1CA0FBC44(_QWORD *a1, _QWORD *a2)
{
  *a1 = *a2;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[2] = a2[2];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t sub_1CA0FBCB8(uint64_t a1, uint64_t a2)
{
  swift_bridgeObjectRelease();
  *(_OWORD *)a1 = *(_OWORD *)a2;
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t sub_1CA0FBD04(uint64_t *a1, int a2)
{
  uint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *((_BYTE *)a1 + 24))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t sub_1CA0FBD4C(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)(result + 8) = 0;
    *(_QWORD *)(result + 16) = 0;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 24) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)result = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 24) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

uint64_t type metadata accessor for Filter(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for Filter);
}

uint64_t sub_1CA0FBD98(uint64_t a1, uint64_t a2)
{
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_BYTE *)(a1 + 8) = *(_BYTE *)(a2 + 8);
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t sub_1CA0FBDCC()
{
  return swift_bridgeObjectRelease();
}

uint64_t sub_1CA0FBDD4(uint64_t a1, uint64_t a2)
{
  *(_QWORD *)a1 = *(_QWORD *)a2;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_BYTE *)(a1 + 8) = *(_BYTE *)(a2 + 8);
  return a1;
}

uint64_t sub_1CA0FBE20(uint64_t a1, uint64_t a2)
{
  *(_QWORD *)a1 = *(_QWORD *)a2;
  swift_bridgeObjectRelease();
  *(_BYTE *)(a1 + 8) = *(_BYTE *)(a2 + 8);
  return a1;
}

uint64_t sub_1CA0FBE5C(uint64_t *a1, int a2)
{
  uint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *((_BYTE *)a1 + 9))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t sub_1CA0FBEA4(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_BYTE *)(result + 8) = 0;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 9) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)result = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 9) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

uint64_t type metadata accessor for CompoundFilter(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for CompoundFilter);
}

uint64_t sub_1CA0FBEF0()
{
  return swift_allocateGenericValueMetadata();
}

uint64_t sub_1CA0FBEF8(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 1 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_1CA0FBF44 + 4 * byte_1CA1FABD5[v4]))();
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_1CA0FBF78 + 4 * byte_1CA1FABD0[v4]))();
}

uint64_t sub_1CA0FBF78(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1CA0FBF80(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1CA0FBF88);
  return result;
}

uint64_t sub_1CA0FBF94(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1CA0FBF9CLL);
  *(_BYTE *)result = a2 + 1;
  return result;
}

uint64_t sub_1CA0FBFA0(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1CA0FBFA8(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

uint64_t type metadata accessor for CompoundFilter.CompoundType(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for CompoundFilter.CompoundType);
}

uint64_t Box.value.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)v1 + 80) - 8) + 16))(a1, v1 + *(_QWORD *)(*(_QWORD *)v1 + 88));
}

uint64_t Box.value.setter(uint64_t a1)
{
  uint64_t v1;

  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)v1 + 80) - 8) + 40))(v1 + *(_QWORD *)(*(_QWORD *)v1 + 88), a1);
}

uint64_t (*Box.value.modify())()
{
  return nullsub_1;
}

uint64_t Box.__allocating_init(_:)(uint64_t a1)
{
  uint64_t v2;

  v2 = swift_allocObject();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)v2 + 80) - 8) + 32))(v2 + *(_QWORD *)(*(_QWORD *)v2 + 88), a1);
  return v2;
}

uint64_t Box.init(_:)(uint64_t a1)
{
  uint64_t v1;

  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)v1 + 80) - 8) + 32))(v1 + *(_QWORD *)(*(_QWORD *)v1 + 88), a1);
  return v1;
}

uint64_t Box.deinit()
{
  uint64_t v0;

  (*(void (**)(uint64_t))(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)v0 + 80) - 8) + 8))(v0 + *(_QWORD *)(*(_QWORD *)v0 + 88));
  return v0;
}

uint64_t Box.__deallocating_deinit()
{
  uint64_t v0;

  (*(void (**)(uint64_t))(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)v0 + 80) - 8) + 8))(v0 + *(_QWORD *)(*(_QWORD *)v0 + 88));
  return swift_deallocClassInstance();
}

uint64_t sub_1CA0FC100()
{
  uint64_t result;
  unint64_t v1;

  result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    result = swift_initClassMetadata2();
    if (!result)
      return 0;
  }
  return result;
}

uint64_t type metadata accessor for Box(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for Box);
}

uint64_t method lookup function for Box()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of Box.__allocating_init(_:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 96))();
}

uint64_t static AccelerateBufferWrapper<>.- infix(_:_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  return sub_1CA0FDCC8(a1, a2, a3, a4, MEMORY[0x1E0DE99D0], a5);
}

{
  return sub_1CA0FDCC8(a1, a2, a3, a4, MEMORY[0x1E0DE99C8], a5);
}

uint64_t static AccelerateBufferWrapper<>.+ infix(_:_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  return sub_1CA0FDCC8(a1, a2, a3, a4, MEMORY[0x1E0DE9900], a5);
}

{
  return sub_1CA0FDCC8(a1, a2, a3, a4, MEMORY[0x1E0DE98F0], a5);
}

uint64_t static AccelerateBufferWrapper<>.- infix(_:_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t AssociatedTypeWitness;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v11;

  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  MEMORY[0x1E0C80A78](AssociatedTypeWitness, v6);
  v8 = (char *)&v11 - v7;
  v9 = sub_1CA1F06E8();
  (*(void (**)(uint64_t, uint64_t))(a3 + 32))(a2, a3);
  return (*(uint64_t (**)(uint64_t, char *, uint64_t, uint64_t))(a3 + 48))(v9, v8, a2, a3);
}

{
  uint64_t AssociatedTypeWitness;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v17;

  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v8 = MEMORY[0x1E0C80A78](AssociatedTypeWitness, v7);
  v10 = (char *)&v17 - v9;
  v11 = *(_QWORD *)(a2 - 8);
  MEMORY[0x1E0C80A78](v8, v12);
  v14 = (char *)&v17 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  static AccelerateBufferWrapper<>.- prefix(_:)(a1, a2, a3);
  v15 = sub_1CA1F06E8();
  (*(void (**)(char *, uint64_t))(v11 + 8))(v14, a2);
  (*(void (**)(uint64_t, uint64_t))(a3 + 32))(a2, a3);
  return (*(uint64_t (**)(uint64_t, char *, uint64_t, uint64_t))(a3 + 48))(v15, v10, a2, a3);
}

{
  uint64_t AssociatedTypeWitness;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v11;

  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  MEMORY[0x1E0C80A78](AssociatedTypeWitness, v6);
  v8 = (char *)&v11 - v7;
  v9 = sub_1CA1F06DC();
  (*(void (**)(uint64_t, uint64_t))(a3 + 32))(a2, a3);
  return (*(uint64_t (**)(uint64_t, char *, uint64_t, uint64_t))(a3 + 48))(v9, v8, a2, a3);
}

{
  uint64_t AssociatedTypeWitness;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v17;

  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v8 = MEMORY[0x1E0C80A78](AssociatedTypeWitness, v7);
  v10 = (char *)&v17 - v9;
  v11 = *(_QWORD *)(a2 - 8);
  MEMORY[0x1E0C80A78](v8, v12);
  v14 = (char *)&v17 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  static AccelerateBufferWrapper<>.- prefix(_:)(a1, a2, a3);
  v15 = sub_1CA1F06DC();
  (*(void (**)(char *, uint64_t))(v11 + 8))(v14, a2);
  (*(void (**)(uint64_t, uint64_t))(a3 + 32))(a2, a3);
  return (*(uint64_t (**)(uint64_t, char *, uint64_t, uint64_t))(a3 + 48))(v15, v10, a2, a3);
}

uint64_t static AccelerateBufferWrapper<>.+ infix(_:_:)(uint64_t a1, uint64_t a2, uint64_t a3, float a4)
{
  return sub_1CA0FC29C(a1, a2, a3, (uint64_t (*)(uint64_t, uint64_t, _QWORD, float))MEMORY[0x1E0DE98F8], a4);
}

{
  return sub_1CA0FD18C(a1, a2, a3, (uint64_t (*)(uint64_t, uint64_t, _QWORD, float))MEMORY[0x1E0DE98F8], a4);
}

uint64_t static AccelerateBufferWrapper<>.* infix(_:_:)(uint64_t a1, uint64_t a2, uint64_t a3, float a4)
{
  return sub_1CA0FC29C(a1, a2, a3, MEMORY[0x1E0DE9998], a4);
}

{
  return sub_1CA0FD18C(a1, a2, a3, MEMORY[0x1E0DE9998], a4);
}

uint64_t sub_1CA0FC29C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(uint64_t, uint64_t, _QWORD, float), float a5)
{
  uint64_t AssociatedTypeWitness;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v16;

  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  MEMORY[0x1E0C80A78](AssociatedTypeWitness, v11);
  v13 = (char *)&v16 - v12;
  v14 = a4(a1, a2, *(_QWORD *)(*(_QWORD *)(a3 + 8) + 8), a5);
  (*(void (**)(uint64_t, uint64_t))(a3 + 32))(a2, a3);
  return (*(uint64_t (**)(uint64_t, char *, uint64_t, uint64_t))(a3 + 48))(v14, v13, a2, a3);
}

uint64_t static AccelerateBufferWrapper<>./ infix(_:_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t AssociatedTypeWitness;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v11;

  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  MEMORY[0x1E0C80A78](AssociatedTypeWitness, v6);
  v8 = (char *)&v11 - v7;
  v9 = sub_1CA1F0748();
  (*(void (**)(uint64_t, uint64_t))(a3 + 32))(a2, a3);
  return (*(uint64_t (**)(uint64_t, char *, uint64_t, uint64_t))(a3 + 48))(v9, v8, a2, a3);
}

{
  uint64_t AssociatedTypeWitness;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v11;

  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  MEMORY[0x1E0C80A78](AssociatedTypeWitness, v6);
  v8 = (char *)&v11 - v7;
  v9 = sub_1CA1F073C();
  (*(void (**)(uint64_t, uint64_t))(a3 + 32))(a2, a3);
  return (*(uint64_t (**)(uint64_t, char *, uint64_t, uint64_t))(a3 + 48))(v9, v8, a2, a3);
}

uint64_t static AccelerateBufferWrapper<>..* infix(_:_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  return sub_1CA0FDCC8(a1, a2, a3, a4, MEMORY[0x1E0DE99A0], a5);
}

{
  return sub_1CA0FDCC8(a1, a2, a3, a4, MEMORY[0x1E0DE9990], a5);
}

uint64_t static AccelerateBufferWrapper<>..** infix(_:_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(a2 - 8) + 16))(a3, a1, a2);
  return static AccelerateBufferWrapper<>..**= infix(_:_:)();
}

{
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(a2 - 8) + 16))(a3, a1, a2);
  return static AccelerateBufferWrapper<>..**= infix(_:_:)();
}

uint64_t AccelerateBufferWrapper<>.sum()()
{
  return sub_1CA1F0700();
}

{
  return sub_1CA1F06F4();
}

uint64_t AccelerateBufferWrapper<>.sumOfSquares()()
{
  return sub_1CA1F06B8();
}

{
  return sub_1CA1F06AC();
}

uint64_t AccelerateBufferWrapper<>.mean()()
{
  return sub_1CA1F0718();
}

{
  return sub_1CA1F070C();
}

float AccelerateBufferWrapper<>.standardDeviation()(uint64_t a1, uint64_t a2)
{
  float v2;

  AccelerateBufferWrapper<>.meanAndStandardDeviation()(a1, a2);
  return v2;
}

uint64_t AccelerateBufferWrapper<>.naturalLogarithm()(uint64_t a1, uint64_t a2)
{
  return sub_1CA0FE828(a1, a2, (uint64_t (*)(void))sub_1CA0B4918);
}

{
  return sub_1CA0FE828(a1, a2, (uint64_t (*)(void))sub_1CA0FCABC);
}

uint64_t AccelerateBufferWrapper.test(function:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD v13[8];

  v13[7] = (*(uint64_t (**)(uint64_t, uint64_t))(a4 + 40))(a3, a4);
  v13[2] = a3;
  v13[3] = a4;
  v13[4] = a1;
  v13[5] = a2;
  swift_getAssociatedTypeWitness();
  v8 = sub_1CA1F0BE0();
  v9 = MEMORY[0x1CAA4BB30](MEMORY[0x1E0DEAF50], v8);
  v11 = sub_1CA0E3CE8((void (*)(char *, char *))sub_1CA0FD26C, (uint64_t)v13, v8, MEMORY[0x1E0DEAFA0], MEMORY[0x1E0DEDCE8], v9, MEMORY[0x1E0DEDD18], v10);
  swift_bridgeObjectRelease();
  return v11;
}

uint64_t AccelerateBufferWrapper.applyMask(mask:maskValues:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t AssociatedTypeWitness;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t result;
  void (*v24)(uint64_t, uint64_t);
  char v25;
  void (*v26)(char *, uint64_t);
  uint64_t v27;
  uint64_t v28;
  _QWORD v29[2];
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;

  v31 = a2;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v9 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v11 = MEMORY[0x1E0C80A78](AssociatedTypeWitness, v10);
  v13 = (char *)v29 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = MEMORY[0x1E0C80A78](v11, v14);
  v17 = (char *)v29 - v16;
  v18 = *(_QWORD *)(a3 - 8);
  MEMORY[0x1E0C80A78](v15, v19);
  v21 = (char *)v29 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  v30 = a1;
  v22 = *(_QWORD *)(a1 + 16);
  v29[1] = *(_QWORD *)(a4 + 8);
  v32 = v4;
  result = sub_1CA1F06A0();
  if (v22 == result)
  {
    (*(void (**)(char *, uint64_t, uint64_t))(v18 + 16))(v21, v31, a3);
    v24 = *(void (**)(uint64_t, uint64_t))(a4 + 32);
    v24(a3, a4);
    v24(a3, a4);
    swift_getAssociatedConformanceWitness();
    v25 = sub_1CA1F09D0();
    v26 = *(void (**)(char *, uint64_t))(v9 + 8);
    v26(v13, AssociatedTypeWitness);
    v26(v17, AssociatedTypeWitness);
    result = (*(uint64_t (**)(char *, uint64_t))(v18 + 8))(v21, a3);
    if ((v25 & 1) != 0)
    {
      MEMORY[0x1E0C80A78](result, v27);
      v29[-4] = a3;
      v29[-3] = a4;
      v28 = v30;
      v29[-2] = v31;
      v29[-1] = v28;
      return sub_1CA1F0688();
    }
  }
  else
  {
    __break(1u);
  }
  __break(1u);
  return result;
}

uint64_t static AccelerateBufferWrapper<>.-= infix(_:_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_1CA0FE3F4(a1, a2, a3, a4, MEMORY[0x1E0DE99C0]);
}

{
  return sub_1CA0FE3F4(a1, a2, a3, a4, MEMORY[0x1E0DE99B8]);
}

uint64_t static AccelerateBufferWrapper<>.+= infix(_:_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_1CA0FE3F4(a1, a2, a3, a4, MEMORY[0x1E0DE98E0]);
}

{
  return sub_1CA0FE3F4(a1, a2, a3, a4, MEMORY[0x1E0DE98D8]);
}

uint64_t static AccelerateBufferWrapper<>.-= infix(_:_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v8;

  v4 = *(_QWORD *)(a2 - 8);
  MEMORY[0x1E0C80A78](a1, a2);
  v6 = (char *)&v8 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t))(v4 + 16))(v6, a1, a2);
  sub_1CA1F06D0();
  return (*(uint64_t (**)(char *, uint64_t))(v4 + 8))(v6, a2);
}

{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v8;

  v4 = *(_QWORD *)(a2 - 8);
  MEMORY[0x1E0C80A78](a1, a2);
  v6 = (char *)&v8 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t))(v4 + 16))(v6, a1, a2);
  sub_1CA1F06C4();
  return (*(uint64_t (**)(char *, uint64_t))(v4 + 8))(v6, a2);
}

uint64_t static AccelerateBufferWrapper<>.+= infix(_:_:)(uint64_t a1, uint64_t a2, uint64_t a3, float a4)
{
  return sub_1CA0FD30C(a1, a2, a3, (void (*)(char *, uint64_t, uint64_t, uint64_t, _QWORD, float))MEMORY[0x1E0DE98D0], a4);
}

uint64_t static AccelerateBufferWrapper<>./= infix(_:_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v8;

  v4 = *(_QWORD *)(a2 - 8);
  MEMORY[0x1E0C80A78](a1, a2);
  v6 = (char *)&v8 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t))(v4 + 16))(v6, a1, a2);
  sub_1CA1F0730();
  return (*(uint64_t (**)(char *, uint64_t))(v4 + 8))(v6, a2);
}

{
  uint64_t v4;
  double v5;
  uint64_t v6;
  char *v7;
  uint64_t v9;

  v4 = *(_QWORD *)(a2 - 8);
  v5 = MEMORY[0x1E0C80A78](a1, a2);
  v7 = (char *)&v9 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t, double))(v4 + 16))(v7, a1, a2, v5);
  sub_1CA1F0724();
  return (*(uint64_t (**)(char *, uint64_t))(v4 + 8))(v7, a2);
}

uint64_t static AccelerateBufferWrapper<>..*= infix(_:_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_1CA0FD668(a1, a2, a3, a4, MEMORY[0x1E0DE9980]);
}

{
  return sub_1CA0FD668(a1, a2, a3, a4, MEMORY[0x1E0DE9978]);
}

uint64_t static AccelerateBufferWrapper<>..**= infix(_:_:)()
{
  uint64_t v0;
  uint64_t v1;

  v0 = sub_1CA1F06A0();
  if (v0 < (uint64_t)0xFFFFFFFF80000000)
  {
    __break(1u);
LABEL_5:
    __break(1u);
  }
  if (v0 > 0x7FFFFFFF)
    goto LABEL_5;
  MEMORY[0x1E0C80A78](v0, v1);
  return sub_1CA1F0688();
}

{
  uint64_t v0;
  uint64_t v1;

  v0 = sub_1CA1F06A0();
  if (v0 < (uint64_t)0xFFFFFFFF80000000)
  {
    __break(1u);
LABEL_5:
    __break(1u);
  }
  if (v0 > 0x7FFFFFFF)
    goto LABEL_5;
  MEMORY[0x1E0C80A78](v0, v1);
  return sub_1CA1F0688();
}

uint64_t sub_1CA0FCABC(uint64_t a1)
{
  int64_t v1;
  uint64_t v2;
  long double *v4;
  long double v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v9;

  v1 = *(_QWORD *)(a1 + 16);
  v2 = MEMORY[0x1E0DEE9D8];
  if (v1)
  {
    v9 = MEMORY[0x1E0DEE9D8];
    sub_1CA0CD56C(0, v1, 0);
    v2 = v9;
    v4 = (long double *)(a1 + 32);
    do
    {
      v5 = log(*v4);
      v7 = *(_QWORD *)(v9 + 16);
      v6 = *(_QWORD *)(v9 + 24);
      if (v7 >= v6 >> 1)
        sub_1CA0CD56C(v6 > 1, v7 + 1, 1);
      *(_QWORD *)(v9 + 16) = v7 + 1;
      *(long double *)(v9 + 8 * v7 + 32) = v5;
      ++v4;
      --v1;
    }
    while (v1);
  }
  return v2;
}

uint64_t AccelerateBufferWrapper.withUnsafeBufferPointer<A>(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  (*(void (**)(uint64_t, uint64_t))(a5 + 40))(a3, a5);
  swift_getAssociatedTypeWitness();
  sub_1CA1F0B5C();
  return swift_bridgeObjectRelease();
}

uint64_t sub_1CA0FCC3C(uint64_t result, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v4;
  uint64_t v7;
  uint64_t i;
  uint64_t v9;
  uint64_t AssociatedTypeWitness;

  v4 = *(_QWORD *)(a3 + 16);
  if (v4)
  {
    v7 = result;
    swift_bridgeObjectRetain();
    for (i = 0; i != v4; ++i)
    {
      if ((*(_BYTE *)(a3 + i + 32) & 1) != 0)
      {
        v9 = *a4;
        AssociatedTypeWitness = swift_getAssociatedTypeWitness();
        (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(AssociatedTypeWitness - 8) + 24))(v9 + *(_QWORD *)(*(_QWORD *)(AssociatedTypeWitness - 8) + 72) * i, v7 + *(_QWORD *)(*(_QWORD *)(AssociatedTypeWitness - 8) + 72) * i, AssociatedTypeWitness);
      }
    }
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t AccelerateBufferWrapper.masked(mask:maskValues:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v5;

  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(a3 - 8) + 16))(a5, v5);
  return AccelerateBufferWrapper.applyMask(mask:maskValues:)(a1, a2, a3, a4);
}

uint64_t AccelerateBufferWrapper<>.minimum()()
{
  return sub_1CA1F0778();
}

{
  return sub_1CA1F076C();
}

uint64_t AccelerateBufferWrapper<>.maximum()()
{
  return sub_1CA1F0760();
}

{
  return sub_1CA1F0754();
}

uint64_t AccelerateBufferWrapper<>.normalize()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t result;

  v0 = sub_1CA1F06A0();
  if (v0 < 0)
  {
    result = sub_1CA1F11BC();
    __break(1u);
  }
  else
  {
    MEMORY[0x1E0C80A78](v0, v1);
    return sub_1CA1F0688();
  }
  return result;
}

float AccelerateBufferWrapper<>.meanAndStandardDeviation()(uint64_t a1, uint64_t a2)
{
  _QWORD v3[9];

  v3[8] = *MEMORY[0x1E0C80C00];
  v3[0] = 0;
  v3[3] = a1;
  v3[4] = a2;
  v3[5] = (char *)v3 + 4;
  v3[6] = v3;
  sub_1CA1F0694();
  return *((float *)v3 + 1);
}

void sub_1CA0FCF68(const float *a1, uint64_t a2, float *a3, float *a4)
{
  vDSP_Length v7;

  if (a1)
  {
    v7 = sub_1CA1F06A0();
    if ((v7 & 0x8000000000000000) == 0)
    {
      vDSP_normalize(a1, 1, 0, 1, a3, a4, v7);
      return;
    }
  }
  else
  {
    __break(1u);
  }
  sub_1CA1F11BC();
  __break(1u);
}

uint64_t static AccelerateBufferWrapper<>.- prefix(_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1CA0FDBE0(a1, a2, a3, MEMORY[0x1E0DE99B0]);
}

{
  return sub_1CA0FDBE0(a1, a2, a3, MEMORY[0x1E0DE99A8]);
}

uint64_t sub_1CA0FD18C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(uint64_t, uint64_t, _QWORD, float), float a5)
{
  uint64_t AssociatedTypeWitness;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v16;

  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  MEMORY[0x1E0C80A78](AssociatedTypeWitness, v11);
  v13 = (char *)&v16 - v12;
  v14 = a4(a1, a2, *(_QWORD *)(*(_QWORD *)(a3 + 8) + 8), a5);
  (*(void (**)(uint64_t, uint64_t))(a3 + 32))(a2, a3);
  return (*(uint64_t (**)(uint64_t, char *, uint64_t, uint64_t))(a3 + 48))(v14, v13, a2, a3);
}

uint64_t sub_1CA0FD26C@<X0>(_BYTE *a1@<X8>)
{
  uint64_t v1;
  uint64_t result;

  result = (*(uint64_t (**)(void))(v1 + 32))();
  *a1 = result & 1;
  return result;
}

uint64_t sub_1CA0FD2A8()
{
  return sub_1CA1F0694();
}

uint64_t static AccelerateBufferWrapper<>.*= infix(_:_:)(uint64_t a1, uint64_t a2, uint64_t a3, float a4)
{
  return sub_1CA0FD30C(a1, a2, a3, MEMORY[0x1E0DE9970], a4);
}

uint64_t sub_1CA0FD30C(uint64_t a1, uint64_t a2, uint64_t a3, void (*a4)(char *, uint64_t, uint64_t, uint64_t, _QWORD, float), float a5)
{
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v14;

  v10 = *(_QWORD *)(a2 - 8);
  MEMORY[0x1E0C80A78]();
  v12 = (char *)&v14 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t))(v10 + 16))(v12, a1, a2);
  a4(v12, a1, a2, a2, *(_QWORD *)(*(_QWORD *)(a3 + 8) + 8), a5);
  return (*(uint64_t (**)(char *, uint64_t))(v10 + 8))(v12, a2);
}

uint64_t sub_1CA0FD3C4(uint64_t *a1)
{
  return sub_1CA0FEACC(a1, MEMORY[0x1E0C8DAE0]);
}

void sub_1CA0FD3E0(float **a1)
{
  uint64_t v1;
  float *v2;

  v2 = *a1;
  if (v2)
    vDSP_normalize(v2, 1, v2, 1, *(float **)(v1 + 16), *(float **)(v1 + 24), *(_QWORD *)(v1 + 32));
  else
    __break(1u);
}

void sub_1CA0FD424(const float *a1, uint64_t a2)
{
  uint64_t v2;

  sub_1CA0FCF68(a1, a2, *(float **)(v2 + 32), *(float **)(v2 + 40));
}

uint64_t static AccelerateBufferWrapper<>.** infix(_:_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>, float a5@<S0>)
{
  uint64_t AssociatedTypeWitness;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  int64_t v15;
  uint64_t v16;
  uint64_t v17;
  float v18;
  unint64_t v19;
  unint64_t v20;
  _QWORD v22[3];
  uint64_t v23;

  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  MEMORY[0x1E0C80A78](AssociatedTypeWitness, v11);
  v13 = (char *)v22 - v12;
  v14 = (*(uint64_t (**)(uint64_t, uint64_t))(a3 + 40))(a2, a3);
  v15 = *(_QWORD *)(v14 + 16);
  if (v15)
  {
    v22[1] = a1;
    v22[2] = a4;
    v23 = MEMORY[0x1E0DEE9D8];
    sub_1CA0CD4B4(0, v15, 0);
    v16 = 0;
    v17 = v23;
    do
    {
      v18 = powf(a5, *(float *)(v14 + 4 * v16 + 32));
      v23 = v17;
      v20 = *(_QWORD *)(v17 + 16);
      v19 = *(_QWORD *)(v17 + 24);
      if (v20 >= v19 >> 1)
      {
        sub_1CA0CD4B4(v19 > 1, v20 + 1, 1);
        v17 = v23;
      }
      ++v16;
      *(_QWORD *)(v17 + 16) = v20 + 1;
      *(float *)(v17 + 4 * v20 + 32) = v18;
    }
    while (v15 != v16);
    swift_bridgeObjectRelease();
  }
  else
  {
    swift_bridgeObjectRelease();
    v17 = MEMORY[0x1E0DEE9D8];
  }
  (*(void (**)(uint64_t, uint64_t))(a3 + 32))(a2, a3);
  return (*(uint64_t (**)(uint64_t, char *, uint64_t, uint64_t))(a3 + 48))(v17, v13, a2, a3);
}

uint64_t sub_1CA0FD668(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void (*a5)(char *, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, _QWORD, _QWORD, _QWORD))
{
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v14;

  v10 = *(_QWORD *)(a3 - 8);
  MEMORY[0x1E0C80A78]();
  v12 = (char *)&v14 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t))(v10 + 16))(v12, a1);
  a5(v12, a2, a1, a3, a3, a3, *(_QWORD *)(*(_QWORD *)(a4 + 8) + 8), *(_QWORD *)(*(_QWORD *)(a4 + 8) + 8), *(_QWORD *)(a4 + 8));
  return (*(uint64_t (**)(char *, uint64_t))(v10 + 8))(v12, a3);
}

double AccelerateBufferWrapper<>.normalize()(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  _QWORD v4[9];

  v4[8] = *MEMORY[0x1E0C80C00];
  v3 = 0;
  v4[0] = 0;
  v4[3] = a1;
  v4[4] = a2;
  v4[5] = v4;
  v4[6] = &v3;
  sub_1CA1F0688();
  return *(double *)v4;
}

void sub_1CA0FD928(uint64_t a1, double *a2, double *a3, uint64_t a4, uint64_t a5)
{
  uint64_t v8;
  double **v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  double *v13;
  vDSP_Length v14;
  uint64_t v15;

  v8 = *(_QWORD *)(a5 - 8);
  v9 = (double **)MEMORY[0x1E0C80A78](a1, a2);
  v12 = (char *)&v15 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = *v9;
  if (*v9)
  {
    (*(void (**)(char *, uint64_t, uint64_t))(v8 + 16))(v12, v10, a5);
    v14 = sub_1CA1F06A0();
    (*(void (**)(char *, uint64_t))(v8 + 8))(v12, a5);
    if ((v14 & 0x8000000000000000) == 0)
    {
      vDSP_normalizeD(v13, 1, v13, 1, a2, a3, v14);
      return;
    }
  }
  else
  {
    __break(1u);
  }
  sub_1CA1F11BC();
  __break(1u);
}

double AccelerateBufferWrapper<>.meanAndStandardDeviation()(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  _QWORD v4[9];

  v4[8] = *MEMORY[0x1E0C80C00];
  v3 = 0;
  v4[0] = 0;
  v4[3] = a1;
  v4[4] = a2;
  v4[5] = v4;
  v4[6] = &v3;
  sub_1CA1F0694();
  return *(double *)v4;
}

void sub_1CA0FDAF0(const double *a1, uint64_t a2, double *a3, double *a4)
{
  vDSP_Length v7;

  if (a1)
  {
    v7 = sub_1CA1F06A0();
    if ((v7 & 0x8000000000000000) == 0)
    {
      vDSP_normalizeD(a1, 1, 0, 1, a3, a4, v7);
      return;
    }
  }
  else
  {
    __break(1u);
  }
  sub_1CA1F11BC();
  __break(1u);
}

double AccelerateBufferWrapper<>.standardDeviation()(uint64_t a1, uint64_t a2)
{
  double v2;

  AccelerateBufferWrapper<>.meanAndStandardDeviation()(a1, a2);
  return v2;
}

uint64_t sub_1CA0FDBE0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(uint64_t, uint64_t, _QWORD))
{
  uint64_t AssociatedTypeWitness;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v14;

  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  MEMORY[0x1E0C80A78](AssociatedTypeWitness, v9);
  v11 = (char *)&v14 - v10;
  v12 = a4(a1, a2, *(_QWORD *)(*(_QWORD *)(a3 + 8) + 8));
  (*(void (**)(uint64_t, uint64_t))(a3 + 32))(a2, a3);
  return (*(uint64_t (**)(uint64_t, char *, uint64_t, uint64_t))(a3 + 48))(v12, v11, a2, a3);
}

uint64_t sub_1CA0FDCC8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t (*a5)(uint64_t, uint64_t, uint64_t, uint64_t, _QWORD, _QWORD)@<X4>, uint64_t a6@<X8>)
{
  uint64_t AssociatedTypeWitness;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  void (*v26)(char *, uint64_t, uint64_t);
  void (*v27)(uint64_t, uint64_t);
  void (*v28)(char *, uint64_t);
  void (*v29)(char *, uint64_t);
  uint64_t result;
  uint64_t v31;
  void (*v32)(uint64_t, uint64_t);
  uint64_t (*v33)(uint64_t, uint64_t, uint64_t, uint64_t, _QWORD, _QWORD);
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;

  v33 = a5;
  v37 = a2;
  v35 = a6;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v36 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v11 = MEMORY[0x1E0C80A78](AssociatedTypeWitness, v10);
  v13 = (char *)&v32 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = MEMORY[0x1E0C80A78](v11, v14);
  v17 = (char *)&v32 - v16;
  v18 = *(_QWORD *)(a3 - 8);
  v20 = MEMORY[0x1E0C80A78](v15, v19);
  v22 = (char *)&v32 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v20, v23);
  v25 = (char *)&v32 - v24;
  v26 = *(void (**)(char *, uint64_t, uint64_t))(v18 + 16);
  v34 = a1;
  v26((char *)&v32 - v24, a1, a3);
  v26(v22, v37, a3);
  v27 = *(void (**)(uint64_t, uint64_t))(a4 + 32);
  v27(a3, a4);
  v32 = v27;
  v27(a3, a4);
  swift_getAssociatedConformanceWitness();
  LOBYTE(v26) = sub_1CA1F09D0();
  v28 = *(void (**)(char *, uint64_t))(v36 + 8);
  v28(v13, AssociatedTypeWitness);
  v28(v17, AssociatedTypeWitness);
  v29 = *(void (**)(char *, uint64_t))(v18 + 8);
  v29(v22, a3);
  result = ((uint64_t (*)(char *, uint64_t))v29)(v25, a3);
  if ((v26 & 1) != 0)
  {
    v31 = v33(v34, v37, a3, a3, *(_QWORD *)(*(_QWORD *)(a4 + 8) + 8), *(_QWORD *)(*(_QWORD *)(a4 + 8) + 8));
    v32(a3, a4);
    return (*(uint64_t (**)(uint64_t, char *, uint64_t, uint64_t))(a4 + 48))(v31, v17, a3, a4);
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t static AccelerateBufferWrapper<>.+ infix(_:_:)(uint64_t a1, uint64_t a2, uint64_t a3, double a4)
{
  return sub_1CA0FE220(a1, a2, a3, (uint64_t (*)(uint64_t, uint64_t, _QWORD, double))MEMORY[0x1E0DE98E8], a4);
}

{
  return sub_1CA0FE134(a1, a2, a3, (uint64_t (*)(uint64_t, uint64_t, _QWORD, double))MEMORY[0x1E0DE98E8], a4);
}

uint64_t static AccelerateBufferWrapper<>.* infix(_:_:)(uint64_t a1, uint64_t a2, uint64_t a3, double a4)
{
  return sub_1CA0FE134(a1, a2, a3, MEMORY[0x1E0DE9988], a4);
}

{
  return sub_1CA0FE220(a1, a2, a3, MEMORY[0x1E0DE9988], a4);
}

uint64_t sub_1CA0FE134(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(uint64_t, uint64_t, _QWORD, double), double a5)
{
  uint64_t AssociatedTypeWitness;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v16;

  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  MEMORY[0x1E0C80A78](AssociatedTypeWitness, v11);
  v13 = (char *)&v16 - v12;
  v14 = a4(a1, a2, *(_QWORD *)(*(_QWORD *)(a3 + 8) + 8), a5);
  (*(void (**)(uint64_t, uint64_t))(a3 + 32))(a2, a3);
  return (*(uint64_t (**)(uint64_t, char *, uint64_t, uint64_t))(a3 + 48))(v14, v13, a2, a3);
}

uint64_t sub_1CA0FE220(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(uint64_t, uint64_t, _QWORD, double), double a5)
{
  uint64_t AssociatedTypeWitness;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v16;

  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  MEMORY[0x1E0C80A78](AssociatedTypeWitness, v11);
  v13 = (char *)&v16 - v12;
  v14 = a4(a1, a2, *(_QWORD *)(*(_QWORD *)(a3 + 8) + 8), a5);
  (*(void (**)(uint64_t, uint64_t))(a3 + 32))(a2, a3);
  return (*(uint64_t (**)(uint64_t, char *, uint64_t, uint64_t))(a3 + 48))(v14, v13, a2, a3);
}

uint64_t sub_1CA0FE3F4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void (*a5)(char *, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, _QWORD, _QWORD, _QWORD))
{
  uint64_t AssociatedTypeWitness;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  void (*v22)(char *, uint64_t, uint64_t);
  void (*v23)(uint64_t, uint64_t);
  void (*v24)(char *, uint64_t);
  uint64_t (*v25)(char *, uint64_t);
  uint64_t result;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  void (*v30)(char *, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, _QWORD, _QWORD, _QWORD);
  uint64_t v31;

  v30 = a5;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v31 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v11 = MEMORY[0x1E0C80A78](AssociatedTypeWitness, v10);
  v13 = (char *)&v28 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = MEMORY[0x1E0C80A78](v11, v14);
  v17 = (char *)&v28 - v16;
  v18 = *(_QWORD *)(a3 - 8);
  MEMORY[0x1E0C80A78](v15, v19);
  v21 = (char *)&v28 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  v22 = *(void (**)(char *, uint64_t, uint64_t))(v18 + 16);
  v28 = a2;
  v22(v21, a2, a3);
  v23 = *(void (**)(uint64_t, uint64_t))(a4 + 32);
  v29 = a1;
  v23(a3, a4);
  v23(a3, a4);
  swift_getAssociatedConformanceWitness();
  LOBYTE(a1) = sub_1CA1F09D0();
  v24 = *(void (**)(char *, uint64_t))(v31 + 8);
  v24(v13, AssociatedTypeWitness);
  v24(v17, AssociatedTypeWitness);
  v25 = *(uint64_t (**)(char *, uint64_t))(v18 + 8);
  result = v25(v21, a3);
  if ((a1 & 1) != 0)
  {
    v27 = v29;
    v22(v21, v29, a3);
    v30(v21, v28, v27, a3, a3, a3, *(_QWORD *)(*(_QWORD *)(a4 + 8) + 8), *(_QWORD *)(*(_QWORD *)(a4 + 8) + 8), *(_QWORD *)(a4 + 8));
    return v25(v21, a3);
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t static AccelerateBufferWrapper<>.+= infix(_:_:)(uint64_t a1, uint64_t a2, uint64_t a3, double a4)
{
  return sub_1CA0FE6B0(a1, a2, a3, (void (*)(char *, uint64_t, uint64_t, uint64_t, _QWORD, double))MEMORY[0x1E0DE98C8], a4);
}

uint64_t static AccelerateBufferWrapper<>.*= infix(_:_:)(uint64_t a1, uint64_t a2, uint64_t a3, double a4)
{
  return sub_1CA0FE6B0(a1, a2, a3, MEMORY[0x1E0DE9968], a4);
}

uint64_t sub_1CA0FE6B0(uint64_t a1, uint64_t a2, uint64_t a3, void (*a4)(char *, uint64_t, uint64_t, uint64_t, _QWORD, double), double a5)
{
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v14;

  v10 = *(_QWORD *)(a2 - 8);
  MEMORY[0x1E0C80A78]();
  v12 = (char *)&v14 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t))(v10 + 16))(v12, a1, a2);
  a4(v12, a1, a2, a2, *(_QWORD *)(*(_QWORD *)(a3 + 8) + 8), a5);
  return (*(uint64_t (**)(char *, uint64_t))(v10 + 8))(v12, a2);
}

uint64_t sub_1CA0FE828(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t AssociatedTypeWitness;
  uint64_t v7;
  uint64_t v8;
  _BYTE *v9;
  uint64_t v10;
  _BYTE v12[16];

  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  MEMORY[0x1E0C80A78](AssociatedTypeWitness, v7);
  v9 = &v12[-v8];
  (*(void (**)(uint64_t, uint64_t))(a2 + 40))(a1, a2);
  v10 = a3();
  swift_bridgeObjectRelease();
  (*(void (**)(uint64_t, uint64_t))(a2 + 32))(a1, a2);
  return (*(uint64_t (**)(uint64_t, _BYTE *, uint64_t, uint64_t))(a2 + 48))(v10, v9, a1, a2);
}

uint64_t static AccelerateBufferWrapper<>.** infix(_:_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>, long double a5@<D0>)
{
  uint64_t AssociatedTypeWitness;
  uint64_t v11;
  double v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  int64_t v16;
  uint64_t v17;
  uint64_t v18;
  long double v19;
  unint64_t v20;
  unint64_t v21;
  _QWORD v23[3];
  uint64_t v24;

  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v12 = MEMORY[0x1E0C80A78](AssociatedTypeWitness, v11);
  v14 = (char *)v23 - v13;
  v15 = (*(uint64_t (**)(uint64_t, uint64_t, double))(a3 + 40))(a2, a3, v12);
  v16 = *(_QWORD *)(v15 + 16);
  if (v16)
  {
    v23[1] = a1;
    v23[2] = a4;
    v24 = MEMORY[0x1E0DEE9D8];
    sub_1CA0CD56C(0, v16, 0);
    v17 = 0;
    v18 = v24;
    do
    {
      v19 = pow(a5, *(long double *)(v15 + 8 * v17 + 32));
      v24 = v18;
      v21 = *(_QWORD *)(v18 + 16);
      v20 = *(_QWORD *)(v18 + 24);
      if (v21 >= v20 >> 1)
      {
        sub_1CA0CD56C(v20 > 1, v21 + 1, 1);
        v18 = v24;
      }
      ++v17;
      *(_QWORD *)(v18 + 16) = v21 + 1;
      *(long double *)(v18 + 8 * v21 + 32) = v19;
    }
    while (v16 != v17);
    swift_bridgeObjectRelease();
  }
  else
  {
    swift_bridgeObjectRelease();
    v18 = MEMORY[0x1E0DEE9D8];
  }
  (*(void (**)(uint64_t, uint64_t))(a3 + 32))(a2, a3);
  return (*(uint64_t (**)(uint64_t, char *, uint64_t, uint64_t))(a3 + 48))(v18, v14, a2, a3);
}

uint64_t sub_1CA0FEAB0(uint64_t *a1)
{
  return sub_1CA0FEACC(a1, MEMORY[0x1E0C8DAD0]);
}

uint64_t sub_1CA0FEACC(uint64_t *a1, uint64_t (*a2)(uint64_t, _QWORD, uint64_t, _QWORD))
{
  uint64_t v2;
  uint64_t result;

  result = *a1;
  if (result)
    return a2(result, *(_QWORD *)(v2 + 16), result, *(_QWORD *)(v2 + 24));
  __break(1u);
  return result;
}

void sub_1CA0FEB08(uint64_t a1)
{
  uint64_t v1;

  sub_1CA0FD928(a1, *(double **)(v1 + 32), *(double **)(v1 + 40), *(_QWORD *)(v1 + 48), *(_QWORD *)(v1 + 16));
}

void sub_1CA0FEB28(const double *a1, uint64_t a2)
{
  uint64_t v2;

  sub_1CA0FDAF0(a1, a2, *(double **)(v2 + 32), *(double **)(v2 + 40));
}

uint64_t dispatch thunk of AccelerateBufferWrapper.shape.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 32))();
}

uint64_t dispatch thunk of AccelerateBufferWrapper.elements.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 40))();
}

uint64_t dispatch thunk of AccelerateBufferWrapper.init(elements:shape:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(void))(a4 + 48))();
}

uint64_t sub_1CA0FEB60(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  return sub_1CA0FCC3C(a1, a2, *(_QWORD *)(v2 + 32), *(uint64_t **)(v2 + 40));
}

_QWORD *SparseBuffer.reduce<A>(into:update:)@<X0>(uint64_t a1@<X0>, void (*a2)(uint64_t, char *)@<X1>, uint64_t a3@<X3>, uint64_t a4@<X8>)
{
  uint64_t *v4;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *result;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  __int128 v24;
  __int128 v25;
  uint64_t i;
  __int128 v27;
  __int128 v28;

  v7 = *(_QWORD *)(a3 + 16);
  v8 = *(_QWORD *)(v7 - 8);
  MEMORY[0x1E0C80A78](a1, a1);
  v10 = (char *)&v20 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = *v4;
  v12 = v4[1];
  v14 = v4[2];
  v13 = v4[3];
  v22 = v14;
  v23 = v11;
  v21 = v13;
  (*(void (**)(uint64_t))(*(_QWORD *)(v15 - 8) + 16))(a4);
  *(_QWORD *)&v24 = v11;
  *((_QWORD *)&v24 + 1) = v12;
  *(_QWORD *)&v25 = v14;
  *((_QWORD *)&v25 + 1) = v13;
  v16 = sub_1CA1F09F4();
  MEMORY[0x1CAA4BB30](MEMORY[0x1E0DEA5E8], v16);
  v17 = sub_1CA1F13C0();
  sub_1CA1F139C();
  v18 = v27;
  *(_QWORD *)&v27 = v23;
  *((_QWORD *)&v27 + 1) = v12;
  *(_QWORD *)&v28 = v22;
  *((_QWORD *)&v28 + 1) = v21;
  for (i = v18; ; v18 = i)
  {
    result = MEMORY[0x1CAA4AAB0](&v24, v17);
    if (v18 == (_QWORD)v24)
      break;
    sub_1CA1F13CC();
    v24 = v27;
    v25 = v28;
    sub_1CA1F13B4();
    a2(a4, v10);
    (*(void (**)(char *, uint64_t))(v8 + 8))(v10, v7);
  }
  return result;
}

uint64_t SparseBuffer.union(with:combine:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, _QWORD *a5@<X8>)
{
  _OWORD *v5;
  uint64_t v8;
  uint64_t v9;
  __int128 *v10;
  uint64_t v11;
  char *v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t result;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  _QWORD *v29;
  uint64_t v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  _OWORD v35[2];
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;

  v28 = a3;
  v29 = a5;
  v8 = *(_QWORD *)(a4 + 16);
  v9 = *(_QWORD *)(v8 - 8);
  v10 = (__int128 *)MEMORY[0x1E0C80A78](a1, a2);
  v12 = (char *)&v28 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = v10[1];
  v38 = *v10;
  v39 = v13;
  v14 = v10[3];
  v40 = v10[2];
  v41 = v14;
  v15 = v5[1];
  v35[0] = *v5;
  v35[1] = v15;
  v16 = v5[3];
  v36 = v5[2];
  v37 = v16;
  v31 = v35[0];
  v32 = v15;
  v17 = sub_1CA1F09F4();
  MEMORY[0x1CAA4BB30](MEMORY[0x1E0DEA5E8], v17);
  v18 = sub_1CA1F13C0();
  MEMORY[0x1CAA4BB30](MEMORY[0x1E0DEDE48], v18);
  v19 = sub_1CA1F0D54();
  v31 = v38;
  v32 = v39;
  result = sub_1CA1F0D54();
  v21 = v19 + result;
  if (__OFADD__(v19, result))
  {
    __break(1u);
  }
  else
  {
    v31 = v36;
    v32 = v37;
    v33 = v40;
    v34 = v41;
    v30 = MEMORY[0x1E0DEE9D8];
    v22 = *(_QWORD *)(a4 + 24);
    v23 = (*(uint64_t (**)(uint64_t, uint64_t))(v22 + 16))(v8, v22);
    MEMORY[0x1E0C80A78](v23, v24);
    *(&v28 - 10) = v8;
    *(&v28 - 9) = v22;
    *(&v28 - 8) = (uint64_t)&v30;
    *(&v28 - 7) = v21;
    *(&v28 - 6) = (uint64_t)&v31;
    *(&v28 - 5) = (uint64_t)v35;
    v25 = v28;
    *(&v28 - 4) = a2;
    *(&v28 - 3) = v25;
    *(&v28 - 2) = (uint64_t)&v38;
    *(&v28 - 1) = (uint64_t)v12;
    v26 = sub_1CA1F0B74();
    v27 = v30;
    swift_bridgeObjectRetain();
    SparseArray.init(values:offsets:)(v26, v27, v8, v29);
    (*(void (**)(char *, uint64_t))(v9 + 8))(v12, v8);
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t SparseBuffer.intersection<A, B>(with:combine:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, _QWORD *a9@<X8>)
{
  _OWORD *v9;
  __int128 *v13;
  uint64_t v14;
  char *v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  _QWORD *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t *v47;
  uint64_t v48;
  __int128 *v49;
  uint64_t v50;
  uint64_t v51;
  _OWORD *v52;
  __int128 *v53;
  char *v54;
  uint64_t v55;
  __int128 v56;
  __int128 v57;
  __int128 v58;
  __int128 v59;
  _OWORD v60[2];
  __int128 v61;
  __int128 v62;
  __int128 v63;
  __int128 v64;
  __int128 v65;
  __int128 v66;

  v35 = a4;
  v36 = a7;
  v37 = a2;
  v38 = a3;
  v39 = a9;
  v40 = *(_QWORD *)(a6 - 8);
  v13 = (__int128 *)MEMORY[0x1E0C80A78](a1, a2);
  v15 = (char *)&v35 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = v13[1];
  v63 = *v13;
  v64 = v16;
  v17 = v13[3];
  v65 = v13[2];
  v66 = v17;
  v18 = v9[1];
  v60[0] = *v9;
  v60[1] = v18;
  v19 = v9[3];
  v61 = v9[2];
  v62 = v19;
  v56 = v60[0];
  v57 = v18;
  v21 = *(_QWORD *)(v20 + 16);
  v22 = sub_1CA1F09F4();
  v23 = MEMORY[0x1E0DEA5E8];
  MEMORY[0x1CAA4BB30](MEMORY[0x1E0DEA5E8], v22);
  v24 = sub_1CA1F13C0();
  v25 = MEMORY[0x1E0DEDE48];
  MEMORY[0x1CAA4BB30](MEMORY[0x1E0DEDE48], v24);
  v26 = sub_1CA1F0D54();
  v56 = v63;
  v57 = v64;
  v27 = sub_1CA1F09F4();
  MEMORY[0x1CAA4BB30](v23, v27);
  v28 = sub_1CA1F13C0();
  MEMORY[0x1CAA4BB30](v25, v28);
  v29 = sub_1CA1F0D54();
  if (v29 >= v26)
    v30 = v26;
  else
    v30 = v29;
  v56 = v61;
  v57 = v62;
  v58 = v65;
  v59 = v66;
  v55 = MEMORY[0x1E0DEE9D8];
  (*(void (**)(uint64_t, uint64_t))(a8 + 16))(a6, a8);
  v41 = v21;
  v42 = a5;
  v31 = *(_QWORD *)(v35 + 24);
  v43 = a6;
  v44 = v31;
  v45 = v36;
  v46 = a8;
  v47 = &v55;
  v48 = v30;
  v49 = &v56;
  v50 = v37;
  v51 = v38;
  v52 = v60;
  v53 = &v63;
  v54 = v15;
  v32 = sub_1CA1F0B74();
  v33 = v55;
  swift_bridgeObjectRetain();
  SparseArray.init(values:offsets:)(v32, v33, a6, v39);
  (*(void (**)(char *, uint64_t))(v40 + 8))(v15, a6);
  return swift_bridgeObjectRelease();
}

uint64_t sub_1CA0FF180@<X0>(uint64_t a1@<X3>, _QWORD *a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v7;

  SparseBuffer.count.getter();
  v7 = MEMORY[0x1E0DEE9D8];
  v5 = sub_1CA1F0B74();
  if (v2)
    return swift_bridgeObjectRelease();
  else
    return SparseArray.init(values:offsets:)(v5, v7, a1, a2);
}

uint64_t SparseBuffer.mapIntersection<A>(with:initialValue:update:combine:)(uint64_t a1, uint64_t a2, void (*a3)(uint64_t, char *), uint64_t a4, void (*a5)(char *, char *), uint64_t a6, uint64_t a7)
{
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  void (*v25)(uint64_t);
  uint64_t v26;
  uint64_t result;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  char *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  BOOL v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  char *v43;
  char *v44;
  void (*v45)(char *, uint64_t);
  char *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  char *v58;
  uint64_t v59;
  char *v60;
  char *v61;
  uint64_t v62;
  uint64_t v63;
  void (*v64)(uint64_t, char *);
  uint64_t v65;
  void (*v66)(char *, char *);
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;

  v67 = a6;
  v66 = a5;
  v65 = a4;
  v64 = a3;
  v59 = *(_QWORD *)(a7 + 16);
  v62 = *(_QWORD *)(v59 - 8);
  v8 = MEMORY[0x1E0C80A78](a1, a2);
  v61 = (char *)&v48 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = MEMORY[0x1E0C80A78](v8, v10);
  v60 = (char *)&v48 - v12;
  v14 = (uint64_t *)MEMORY[0x1E0C80A78](v11, v13);
  v58 = (char *)&v48 - v15;
  v57 = *v14;
  v56 = v14[1];
  v55 = v14[2];
  v16 = v14[4];
  v54 = v14[3];
  v18 = v14[5];
  v17 = v14[6];
  v19 = v14[7];
  v53 = *v7;
  v52 = v7[1];
  v51 = v7[2];
  v20 = v7[4];
  v50 = v7[3];
  v22 = v7[5];
  v21 = v7[6];
  v23 = v7[7];
  v25 = *(void (**)(uint64_t))(*(_QWORD *)(v24 - 8) + 16);
  v63 = v26;
  v25(v26);
  v75 = v20;
  v76 = v22;
  v77 = v21;
  v78 = v23;
  v79 = v16;
  v80 = v18;
  v81 = v17;
  v82 = v19;
  result = sub_1CA100B3C(-1, -1, &v73);
  v28 = v22 - v20;
  v29 = v18 - v16;
  v31 = v73;
  v30 = v74;
  if (v73 != v28 || v74 != v29)
  {
    v49 = v21;
    v48 = v29;
    v32 = v60;
    while (1)
    {
      v33 = v31 + 1;
      if (__OFADD__(v31, 1))
        goto LABEL_25;
      v34 = v30;
      v35 = v30 + 1;
      if (__OFADD__(v30, 1))
        break;
      v36 = v31;
      v31 = v28;
      v30 = v29;
      if (v33 != v28)
      {
        v31 = v28;
        v30 = v29;
        if (v35 != v29)
        {
          v37 = *(_QWORD *)(v21 + 8 * v33);
          v38 = *(_QWORD *)(v17 + 8 * v35);
          if (v37 != v38)
          {
            v30 = v35;
            v31 = v33;
            while (1)
            {
              if (v37 >= v38)
              {
                v39 = __OFADD__(v30++, 1);
                if (v39)
                  goto LABEL_24;
              }
              else
              {
                v39 = __OFADD__(v31++, 1);
                if (v39)
                {
                  __break(1u);
LABEL_24:
                  __break(1u);
LABEL_25:
                  __break(1u);
                  goto LABEL_26;
                }
              }
              if (v31 == v28 || v30 == v29)
              {
                v31 = v28;
                v30 = v29;
                goto LABEL_21;
              }
              v37 = *(_QWORD *)(v21 + 8 * v31);
              v38 = *(_QWORD *)(v17 + 8 * v30);
              if (v37 == v38)
                goto LABEL_21;
            }
          }
          v31 = v33;
          v30 = v35;
        }
      }
LABEL_21:
      v69 = v53;
      v70 = v52;
      v71 = v51;
      v72 = v50;
      v68 = v36;
      v40 = v59;
      v41 = sub_1CA1F09F4();
      MEMORY[0x1CAA4BB30](MEMORY[0x1E0DEA5E8], v41);
      sub_1CA1F13C0();
      v42 = v17;
      v43 = v58;
      sub_1CA1F13CC();
      v69 = v57;
      v70 = v56;
      v71 = v55;
      v72 = v54;
      v68 = v34;
      sub_1CA1F13CC();
      v44 = v61;
      v66(v43, v32);
      v64(v63, v44);
      v45 = *(void (**)(char *, uint64_t))(v62 + 8);
      v45(v44, v40);
      v45(v32, v40);
      v46 = v43;
      v17 = v42;
      v47 = v40;
      v21 = v49;
      result = ((uint64_t (*)(char *, uint64_t))v45)(v46, v47);
      v29 = v48;
      if (v31 == v28 && v30 == v48)
        return result;
    }
LABEL_26:
    __break(1u);
  }
  return result;
}

uint64_t SparseBuffer.dotProduct(with:add:multiply:)(uint64_t a1, void (*a2)(uint64_t, char *), uint64_t a3, void (*a4)(char *, char *), uint64_t a5, uint64_t a6)
{
  _OWORD *v6;
  uint64_t v12;
  uint64_t v13;
  _OWORD *v14;
  uint64_t v15;
  char *v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  uint64_t v21;
  _OWORD v23[8];

  v12 = *(_QWORD *)(a6 + 16);
  v13 = *(_QWORD *)(v12 - 8);
  v14 = (_OWORD *)MEMORY[0x1E0C80A78](a1, a2);
  v16 = (char *)v23 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = v6[1];
  v23[4] = *v6;
  v23[5] = v17;
  v18 = v6[3];
  v23[6] = v6[2];
  v23[7] = v18;
  v19 = v14[1];
  v23[0] = *v14;
  v23[1] = v19;
  v20 = v14[3];
  v23[2] = v14[2];
  v23[3] = v20;
  (*(void (**)(uint64_t))(*(_QWORD *)(v21 + 24) + 16))(v12);
  SparseBuffer.mapIntersection<A>(with:initialValue:update:combine:)((uint64_t)v23, (uint64_t)v16, a2, a3, a4, a5, a6);
  return (*(uint64_t (**)(char *, uint64_t))(v13 + 8))(v16, v12);
}

uint64_t SparseBuffer.sparseKroneckerMap<A, B>(with:combine:)@<X0>(uint64_t a1@<X3>, uint64_t a2@<X5>, uint64_t a3@<X7>, _QWORD *a4@<X8>)
{
  uint64_t v5;

  v5 = type metadata accessor for SparseArray(0, a2, a3, a1);
  MEMORY[0x1CAA4BB30](&protocol conformance descriptor for SparseArray<A>, v5);
  return sub_1CA0FF180(v5, a4);
}

uint64_t sub_1CA0FF808@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v5;
  BOOL v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v5 = a3 - a2;
  if (__OFSUB__(a3, a2))
  {
LABEL_31:
    __break(1u);
    goto LABEL_32;
  }
  if (v5 < 129)
  {
LABEL_13:
    v7 = a2;
    if (a2 >= a3)
    {
LABEL_28:
      *(_QWORD *)a5 = v7;
      *(_BYTE *)(a5 + 8) = v7 != a3;
      return result;
    }
    v10 = *(_QWORD *)(a4 + 8 * a2);
    if (v10 >= result)
    {
      v11 = a2;
    }
    else
    {
      v11 = a2 + 1;
      if (a2 + 1 >= a3)
        goto LABEL_27;
      v10 = *(_QWORD *)(a4 + 8 * v11);
      if (v10 < result)
      {
        v11 = a2 + 2;
        if (a2 + 2 >= a3)
          goto LABEL_27;
        v10 = *(_QWORD *)(a4 + 8 * v11);
        if (v10 < result)
        {
          v11 = a2 + 3;
          if (a2 + 3 < a3)
          {
            while (1)
            {
              v10 = *(_QWORD *)(a4 + 8 * v11);
              if (v10 >= result)
                goto LABEL_25;
              v12 = v11 + 1;
              if (__OFADD__(v11, 1))
                goto LABEL_33;
              ++v11;
              if (v12 >= a3)
              {
                v7 = a3;
                goto LABEL_28;
              }
            }
          }
LABEL_27:
          v7 = v11;
          goto LABEL_28;
        }
      }
    }
LABEL_25:
    if (v10 > result)
      a3 = v11;
    goto LABEL_27;
  }
  v6 = __OFADD__(a2, (unint64_t)v5 >> 1);
  v7 = a2 + ((unint64_t)v5 >> 1);
  if (!v6)
  {
    while (1)
    {
      v8 = *(_QWORD *)(a4 + 8 * v7);
      if (v8 == result)
        goto LABEL_28;
      if (v8 <= result)
      {
        a2 = v7 + 1;
        if (__OFADD__(v7, 1))
          goto LABEL_30;
      }
      else
      {
        a3 = v7;
      }
      v9 = a3 - a2;
      if (__OFSUB__(a3, a2))
      {
        __break(1u);
LABEL_30:
        __break(1u);
        goto LABEL_31;
      }
      if (v9 < 129)
        goto LABEL_13;
      v6 = __OFADD__(a2, (unint64_t)v9 >> 1);
      v7 = a2 + ((unint64_t)v9 >> 1);
      if (v6)
      {
        __break(1u);
        goto LABEL_13;
      }
    }
  }
LABEL_32:
  __break(1u);
LABEL_33:
  __break(1u);
  return result;
}

__n128 sub_1CA0FF914@<Q0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  __n128 result;
  __int128 v7;

  *(_QWORD *)a6 = a1;
  *(_QWORD *)(a6 + 8) = a2;
  *(_QWORD *)(a6 + 16) = a3;
  *(_QWORD *)(a6 + 24) = a4;
  result = *(__n128 *)a5;
  v7 = *(_OWORD *)(a5 + 16);
  *(_OWORD *)(a6 + 32) = *(_OWORD *)a5;
  *(_OWORD *)(a6 + 48) = v7;
  return result;
}

uint64_t SparseBuffer.getValue(atOffset:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t *v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  v6 = *v3;
  v7 = v3[1];
  v8 = v3[2];
  v9 = v3[3];
  sub_1CA0FF808(a1, v3[4], v3[5], v3[6], (uint64_t)&v13);
  if (v14 != 1)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(*(_QWORD *)(a2 + 16) - 8) + 56))(a3, 1, 1);
  v13 = v6;
  v14 = v7;
  v15 = v8;
  v16 = v9;
  v10 = *(_QWORD *)(a2 + 16);
  v11 = sub_1CA1F09F4();
  MEMORY[0x1CAA4BB30](MEMORY[0x1E0DEA5E8], v11);
  sub_1CA1F13C0();
  sub_1CA1F13CC();
  return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 56))(a3, 0, 1, v10);
}

uint64_t SparseBuffer.values.getter()
{
  uint64_t v0;

  return *(_QWORD *)v0;
}

__n128 SparseBuffer.offsets.getter@<Q0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  __n128 result;
  __int128 v3;

  result = *(__n128 *)(v1 + 32);
  v3 = *(_OWORD *)(v1 + 48);
  *(__n128 *)a1 = result;
  *(_OWORD *)(a1 + 16) = v3;
  return result;
}

uint64_t SparseBuffer.count.getter()
{
  uint64_t v0;
  uint64_t v1;

  v0 = sub_1CA1F09F4();
  MEMORY[0x1CAA4BB30](MEMORY[0x1E0DEA5E8], v0);
  v1 = sub_1CA1F13C0();
  MEMORY[0x1CAA4BB30](MEMORY[0x1E0DEDE48], v1);
  return sub_1CA1F0D54();
}

uint64_t SparseBuffer.subscript.getter(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  v4 = *v2;
  v5 = v2[1];
  v6 = v2[2];
  v7 = v2[3];
  sub_1CA0FF808(a1, v2[4], v2[5], v2[6], (uint64_t)&v10);
  if (v11 != 1)
    return (*(uint64_t (**)(void))(*(_QWORD *)(a2 + 24) + 16))();
  v10 = v4;
  v11 = v5;
  v12 = v6;
  v13 = v7;
  v8 = sub_1CA1F09F4();
  MEMORY[0x1CAA4BB30](MEMORY[0x1E0DEA5E8], v8);
  sub_1CA1F13C0();
  return sub_1CA1F13CC();
}

uint64_t sub_1CA0FFB98(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4)
{
  uint64_t result;
  uint64_t v7;

  result = sub_1CA1F09DC();
  if (result)
  {
    MEMORY[0x1E0C80A78](result, v7);
    *a3 = sub_1CA100BD0(a4, (void (*)(_QWORD *, uint64_t *))sub_1CA100ECC);
    return swift_bridgeObjectRelease();
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t *sub_1CA0FFC7C(uint64_t a1, uint64_t a2, uint64_t a3, __int128 *a4, void (*a5)(char *, char *), uint64_t a6, _OWORD *a7, uint64_t a8, uint64_t a9, _QWORD *a10, uint64_t a11, uint64_t a12)
{
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t *result;
  _QWORD *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  BOOL v26;
  BOOL v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  BOOL v31;
  BOOL v32;
  uint64_t v33;
  uint64_t v34;
  BOOL v35;
  BOOL v36;
  uint64_t v37;
  uint64_t v38;
  __int128 v39;
  uint64_t v40;
  char *v41;
  uint64_t v42;
  uint64_t v43;
  _OWORD *v44;
  __int128 v45;
  uint64_t v46;
  char *v47;
  uint64_t v48;
  uint64_t v49;
  char *v50;
  BOOL v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  _QWORD *v56;
  _QWORD *v57;
  uint64_t v58;
  void (*v59)(char *, char *);
  uint64_t v60;
  _OWORD *v61;
  _QWORD *v62;
  _QWORD *v63;
  __int128 *v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  char *v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  __int128 v74;
  __int128 v75;
  BOOL v76;
  unsigned __int8 v77;
  BOOL v78;
  unsigned __int8 v79;

  v69 = a8;
  v60 = a6;
  v61 = a7;
  v59 = a5;
  v12 = a11;
  v63 = *(_QWORD **)(a3 + 16);
  v64 = a4;
  v62 = *(_QWORD **)(a3 + 48);
  v13 = *(_QWORD *)(a11 - 8);
  v14 = MEMORY[0x1E0C80A78](a1, a2);
  v70 = (char *)&v53 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  result = (uint64_t *)MEMORY[0x1E0C80A78](v14, v16);
  v24 = (char *)&v53 - v23;
  v55 = *result;
  if (v55)
  {
    v72 = a12;
    v56 = a10;
    v25 = v22 - v21;
    v57 = v18;
    if (v22 == v21 || v20 == v19)
    {
      v27 = v20 != v19;
      v26 = v22 != v21;
    }
    else
    {
      v26 = *v62 >= *v63;
      v27 = *v63 >= *v62;
    }
    v28 = 0;
    v29 = 0;
    v58 = 0;
    v54 = a9;
    v30 = v20 - v19;
    v77 = 0;
    v79 = 0;
    v76 = v26;
    v78 = v27;
    v65 = v20 - v19;
    v66 = v22 - v21;
    v67 = a11;
    v68 = v13;
LABEL_7:
    v31 = v76;
    v32 = v78;
    if (v28 != v25)
    {
      v33 = v29;
      goto LABEL_15;
    }
    if (v29 != v30)
    {
      v33 = v29;
      goto LABEL_15;
    }
    if (((v76 ^ v77) & 1) != 0)
    {
      v33 = v29;
      goto LABEL_15;
    }
    v33 = v29;
    if (((v78 ^ v79) & 1) == 0)
    {
LABEL_38:
      v52 = v58;
      *v56 = v58;
      *v57 = v52;
      return result;
    }
    while (1)
    {
LABEL_15:
      v34 = v28;
      if (v31)
      {
        v34 = v28 + 1;
        if (__OFADD__(v28, 1))
        {
          __break(1u);
LABEL_40:
          __break(1u);
          break;
        }
      }
      v29 = v33;
      if (v32)
      {
        v29 = v33 + 1;
        if (__OFADD__(v33, 1))
          goto LABEL_40;
      }
      v35 = v29 != v30;
      v36 = v34 != v25;
      if (v34 != v25 && v29 != v30)
      {
        v37 = v63[v34];
        v38 = v62[v29];
        v36 = v38 >= v37;
        v35 = v37 >= v38;
      }
      v71 = v34;
      v76 = v36;
      v78 = v35;
      (*(void (**)(uint64_t))(v72 + 16))(v12);
      if (v31)
      {
        v39 = v64[1];
        v74 = *v64;
        v75 = v39;
        v73 = v28;
        v40 = sub_1CA1F09F4();
        MEMORY[0x1CAA4BB30](MEMORY[0x1E0DEA5E8], v40);
        sub_1CA1F13C0();
        v41 = v70;
        sub_1CA1F13CC();
        v42 = v68;
        (*(void (**)(char *, uint64_t))(v68 + 8))(v24, v12);
        (*(void (**)(char *, char *, uint64_t))(v42 + 32))(v24, v41, v12);
        if (v32)
          goto LABEL_26;
        v43 = *(_QWORD *)(*((_QWORD *)v64 + 6) + 8 * v28);
      }
      else
      {
        v42 = v68;
        if (v32)
        {
LABEL_26:
          v44 = v61;
          v45 = v61[1];
          v74 = *v61;
          v75 = v45;
          v73 = v33;
          v12 = v67;
          v46 = sub_1CA1F09F4();
          MEMORY[0x1CAA4BB30](MEMORY[0x1E0DEA5E8], v46);
          sub_1CA1F13C0();
          v47 = v70;
          sub_1CA1F13CC();
          v59(v24, v47);
          (*(void (**)(char *, uint64_t))(v42 + 8))(v47, v12);
          v43 = *(_QWORD *)(*((_QWORD *)v44 + 6) + 8 * v33);
          goto LABEL_29;
        }
        v43 = 0;
      }
      v12 = v67;
LABEL_29:
      if ((sub_1CA1F09D0() & 1) == 0)
      {
        v48 = v58;
        v49 = v54 + *(_QWORD *)(v42 + 72) * v58;
        v50 = v70;
        (*(void (**)(char *, char *, uint64_t))(v42 + 16))(v70, v24, v12);
        (*(void (**)(uint64_t, char *, uint64_t))(v42 + 32))(v49, v50, v12);
        *(_QWORD *)(v55 + 8 * v48) = v43;
        result = (uint64_t *)(*(uint64_t (**)(char *, uint64_t))(v42 + 8))(v24, v12);
        v51 = __OFADD__(v48, 1);
        v58 = v48 + 1;
        v30 = v65;
        v25 = v66;
        v28 = v71;
        if (!v51)
          goto LABEL_7;
        __break(1u);
        goto LABEL_38;
      }
      result = (uint64_t *)(*(uint64_t (**)(char *, uint64_t))(v42 + 8))(v24, v12);
      v31 = v76;
      v32 = v78;
      v33 = v29;
      v28 = v71;
      v30 = v65;
      v25 = v66;
      if (v71 == v66)
      {
        v33 = v29;
        v28 = v71;
        if (v29 == v65)
        {
          v33 = v29;
          v28 = v71;
          if (((v76 ^ v77) & 1) == 0)
          {
            v33 = v29;
            v28 = v71;
            if (((v78 ^ v79) & 1) == 0)
              goto LABEL_38;
          }
        }
      }
    }
  }
  __break(1u);
  return result;
}

uint64_t sub_1CA100100()
{
  return sub_1CA1F0B74();
}

uint64_t sub_1CA100114(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t result;

  result = sub_1CA1F09DC();
  if (result)
  {
    MEMORY[0x1E0C80A78](result, a9);
    *a3 = sub_1CA100BD0(a4, (void (*)(_QWORD *, uint64_t *))sub_1CA100E8C);
    return swift_bridgeObjectRelease();
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t *sub_1CA100208(uint64_t a1, _QWORD *a2, uint64_t *a3, void (*a4)(char *, char *), uint64_t a5, __int128 *a6, __int128 *a7, uint64_t a8, uint64_t a9, _QWORD *a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16)
{
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t *result;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  BOOL v43;
  uint64_t v44;
  uint64_t v45;
  __int128 v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  char *v51;
  __int128 v52;
  uint64_t v53;
  uint64_t v54;
  char *v55;
  char *v56;
  uint64_t v57;
  char *v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  char *v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  char *v67;
  _QWORD *v68;
  _QWORD *v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  char *v78;
  uint64_t v79;
  char *v80;
  uint64_t v81;
  char *v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  void (*v87)(char *, char *);
  uint64_t v88;
  __int128 *v89;
  uint64_t v90;
  __int128 *v91;
  __int128 v92;
  __int128 v93;
  _QWORD v94[2];
  uint64_t v95;

  v89 = a7;
  v90 = a8;
  v91 = a6;
  v87 = a4;
  v88 = a5;
  v69 = a2;
  v17 = *a3;
  v18 = a3[1];
  v19 = a3[2];
  v20 = a3[4];
  v21 = a3[5];
  v22 = a3[6];
  v85 = a12;
  v83 = *(_QWORD *)(a12 - 8);
  v23 = MEMORY[0x1E0C80A78](a1, a2);
  v82 = (char *)&v65 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  v84 = v25;
  v81 = *(_QWORD *)(v25 - 8);
  v27 = MEMORY[0x1E0C80A78](v23, v26);
  v80 = (char *)&v65 - ((v28 + 15) & 0xFFFFFFFFFFFFFFF0);
  v86 = v29;
  v79 = *(_QWORD *)(v29 - 8);
  v31 = MEMORY[0x1E0C80A78](v27, v30);
  v67 = (char *)&v65 - ((v32 + 15) & 0xFFFFFFFFFFFFFFF0);
  result = (uint64_t *)MEMORY[0x1E0C80A78](v31, v33);
  v78 = (char *)&v65 - v35;
  v66 = *result;
  if (v66)
  {
    v77 = a16;
    v68 = a10;
    v65 = a9;
    result = (uint64_t *)sub_1CA100B3C(-1, -1, v94);
    v70 = 0;
    v36 = a3[1] - *a3;
    v71 = a3[5] - a3[4];
    v37 = v94[0];
    v38 = v94[1];
    v39 = v18 - v17;
    v40 = v21 - v20;
    v76 = v22;
    v75 = v36;
    v74 = v18 - v17;
    v73 = v21 - v20;
    v72 = v19;
    while (2)
    {
      if (v37 != v36 || v38 != v71)
      {
        while (1)
        {
          v41 = v37 + 1;
          if (__OFADD__(v37, 1))
          {
LABEL_28:
            __break(1u);
LABEL_29:
            __break(1u);
            goto LABEL_30;
          }
          v42 = v38 + 1;
          if (__OFADD__(v38, 1))
            goto LABEL_29;
          while (v41 != v39 && v42 != v40)
          {
            v44 = *(_QWORD *)(v19 + 8 * v41);
            v45 = *(_QWORD *)(v22 + 8 * v42);
            if (v44 == v45)
              goto LABEL_18;
            if (v44 < v45)
            {
              v43 = __OFADD__(v41++, 1);
              if (v43)
              {
                __break(1u);
LABEL_27:
                __break(1u);
                goto LABEL_28;
              }
            }
            else
            {
              v43 = __OFADD__(v42++, 1);
              if (v43)
                goto LABEL_27;
            }
          }
          v41 = v39;
          v42 = v40;
LABEL_18:
          v46 = v91[1];
          v92 = *v91;
          v93 = v46;
          v95 = v37;
          v47 = v84;
          v48 = v37;
          v49 = sub_1CA1F09F4();
          v50 = MEMORY[0x1E0DEA5E8];
          MEMORY[0x1CAA4BB30](MEMORY[0x1E0DEA5E8], v49);
          sub_1CA1F13C0();
          v51 = v80;
          sub_1CA1F13CC();
          v52 = v89[1];
          v92 = *v89;
          v93 = v52;
          v95 = v38;
          v53 = v85;
          v54 = sub_1CA1F09F4();
          MEMORY[0x1CAA4BB30](v50, v54);
          sub_1CA1F13C0();
          v55 = v82;
          sub_1CA1F13CC();
          v56 = v78;
          v87(v51, v55);
          (*(void (**)(char *, uint64_t))(v83 + 8))(v55, v53);
          (*(void (**)(char *, uint64_t))(v81 + 8))(v51, v47);
          v57 = v86;
          if ((sub_1CA1F09D0() & 1) == 0)
            break;
          result = (uint64_t *)(*(uint64_t (**)(char *, uint64_t))(v79 + 8))(v56, v57);
          v38 = v42;
          v37 = v41;
          v19 = v72;
          v22 = v76;
          v39 = v74;
          v40 = v73;
          if (v41 == v75)
          {
            v38 = v42;
            v37 = v41;
            if (v42 == v71)
              goto LABEL_25;
          }
        }
        v58 = v56;
        v59 = *(_QWORD *)(*((_QWORD *)v91 + 6) + 8 * v48);
        v60 = v79;
        v61 = v70;
        v62 = v65 + *(_QWORD *)(v79 + 72) * v70;
        v63 = v67;
        (*(void (**)(char *, char *, uint64_t))(v79 + 16))(v67, v58, v57);
        (*(void (**)(uint64_t, char *, uint64_t))(v60 + 32))(v62, v63, v57);
        *(_QWORD *)(v66 + 8 * v61) = v59;
        result = (uint64_t *)(*(uint64_t (**)(char *, uint64_t))(v60 + 8))(v58, v57);
        v37 = v41;
        v38 = v42;
        v43 = __OFADD__(v61, 1);
        v70 = v61 + 1;
        v19 = v72;
        v22 = v76;
        v36 = v75;
        v39 = v74;
        v40 = v73;
        if (!v43)
          continue;
        __break(1u);
      }
      break;
    }
LABEL_25:
    v64 = v70;
    *v68 = v70;
    *v69 = v64;
  }
  else
  {
LABEL_30:
    __break(1u);
  }
  return result;
}

uint64_t sub_1CA100710(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4, void (*a5)(char *), uint64_t a6, __int128 *a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  uint64_t v11;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t result;
  uint64_t v22;
  _QWORD v24[2];
  uint64_t v25;

  v18 = sub_1CA1F09DC();
  if (!v18)
    goto LABEL_14;
  if ((a4 & 0x8000000000000000) == 0)
  {
    v19 = v18;
    v22 = a2;
    if (a4)
    {
      v20 = sub_1CA1F0B68();
      *(_QWORD *)(v20 + 16) = a4;
    }
    else
    {
      v20 = MEMORY[0x1E0DEE9D8];
    }
    v25 = 0;
    v24[0] = v20 + 32;
    v24[1] = a4;
    sub_1CA100890((uint64_t)v24, (uint64_t)&v25, a4, a5, a6, a7, v19, v22, a8, a9, a10, a11);
    if (v11)
    {
      if (v25 > a4)
      {
        __break(1u);
LABEL_13:
        __break(1u);
LABEL_14:
        __break(1u);
        goto LABEL_15;
      }
      *(_QWORD *)(v20 + 16) = v25;
    }
    else
    {
      if (v25 > a4)
        goto LABEL_13;
      *(_QWORD *)(v20 + 16) = v25;
      *a3 = v20;
    }
    return swift_bridgeObjectRelease();
  }
LABEL_15:
  result = sub_1CA1F11BC();
  __break(1u);
  return result;
}

_QWORD *sub_1CA100890(uint64_t a1, uint64_t a2, uint64_t a3, void (*a4)(char *), uint64_t a5, __int128 *a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  uint64_t v12;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *result;
  _QWORD *v20;
  _QWORD *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  __int128 v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char *v30;
  uint64_t v31;
  char v32;
  void (*v33)(uint64_t, uint64_t);
  uint64_t v34;
  uint64_t v36;
  _QWORD *v37;
  _QWORD *v38;
  uint64_t v39;
  uint64_t v40;
  __int128 *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  _QWORD *v46;
  char *v47;
  uint64_t v48;
  void (*v49)(char *);
  uint64_t v50;
  uint64_t v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  __int128 v55;
  uint64_t v56;

  v40 = a7;
  v41 = a6;
  v49 = a4;
  v50 = a5;
  v51 = a9;
  v48 = *(_QWORD *)(a9 - 8);
  v14 = MEMORY[0x1E0C80A78](a1, a2);
  v47 = (char *)&v36 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = MEMORY[0x1E0C80A78](v14, v16);
  result = (_QWORD *)MEMORY[0x1E0C80A78](v17, v18);
  v25 = (char *)&v36 - v24;
  v39 = *result;
  if (!v39)
    goto LABEL_18;
  if (a3 < 0)
  {
LABEL_17:
    __break(1u);
LABEL_18:
    __break(1u);
    return result;
  }
  v37 = v20;
  v38 = v21;
  if (a3)
  {
    v44 = v23;
    v45 = v22;
    v43 = a12;
    v26 = v41[1];
    v54 = *v41;
    v55 = v26;
    result = (_QWORD *)sub_1CA1F09F4();
    v46 = result;
    v27 = 0;
    v28 = 0;
    v42 = a3;
    v29 = v45;
    while (a3 != v28)
    {
      v52 = v54;
      v53 = v55;
      v56 = v28;
      MEMORY[0x1CAA4BB30](MEMORY[0x1E0DEA5E8], v46);
      sub_1CA1F13C0();
      v30 = v47;
      sub_1CA1F13CC();
      v49(v30);
      result = (_QWORD *)(*(uint64_t (**)(char *, uint64_t))(v48 + 8))(v30, v51);
      if (v12)
        return result;
      v31 = v44;
      (*(void (**)(uint64_t, uint64_t))(v43 + 16))(a10, v43);
      v32 = sub_1CA1F09D0();
      v33 = *(void (**)(uint64_t, uint64_t))(v29 + 8);
      v33(v31, a10);
      if ((v32 & 1) != 0)
      {
        result = (_QWORD *)((uint64_t (*)(char *, uint64_t))v33)(v25, a10);
      }
      else
      {
        v34 = v40 + *(_QWORD *)(v29 + 72) * v27;
        (*(void (**)(uint64_t, char *, uint64_t))(v29 + 16))(v31, v25, a10);
        (*(void (**)(uint64_t, uint64_t, uint64_t))(v29 + 32))(v34, v31, a10);
        *(_QWORD *)(v39 + 8 * v27) = *(_QWORD *)(*((_QWORD *)v41 + 6) + 8 * v28);
        result = (_QWORD *)((uint64_t (*)(char *, uint64_t))v33)(v25, a10);
        if (__OFADD__(v27++, 1))
        {
          __break(1u);
          goto LABEL_13;
        }
      }
      ++v28;
      a3 = v42;
      if (v42 == v28)
        goto LABEL_14;
    }
    __break(1u);
    goto LABEL_17;
  }
LABEL_13:
  v27 = 0;
LABEL_14:
  *v38 = v27;
  *v37 = v27;
  return result;
}

uint64_t sub_1CA100B3C@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v9;
  uint64_t v10;
  BOOL v11;

  v4 = result + 1;
  if (__OFADD__(result, 1))
  {
LABEL_20:
    __break(1u);
    goto LABEL_21;
  }
  v5 = a2 + 1;
  if (__OFADD__(a2, 1))
  {
LABEL_21:
    __break(1u);
    return result;
  }
  v6 = v3[1] - *v3;
  v7 = v3[5] - v3[4];
  if (v4 == v6 || v5 == v7)
  {
LABEL_8:
    v4 = v3[1] - *v3;
    v5 = v3[5] - v3[4];
  }
  else
  {
    while (1)
    {
      v9 = *(_QWORD *)(v3[2] + 8 * v4);
      v10 = *(_QWORD *)(v3[6] + 8 * v5);
      if (v9 == v10)
        break;
      if (v9 >= v10)
      {
        v11 = __OFADD__(v5++, 1);
        if (v11)
          goto LABEL_19;
      }
      else
      {
        v11 = __OFADD__(v4++, 1);
        if (v11)
        {
          __break(1u);
LABEL_19:
          __break(1u);
          goto LABEL_20;
        }
      }
      if (v4 == v6 || v5 == v7)
        goto LABEL_8;
    }
  }
  *a3 = v4;
  a3[1] = v5;
  return result;
}

uint64_t sub_1CA100BD0(uint64_t a1, void (*a2)(_QWORD *, uint64_t *))
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t result;
  _QWORD v8[2];
  uint64_t v9;

  if (a1 < 0)
    goto LABEL_21;
  if (a1)
  {
    v5 = sub_1CA1F0B68();
    *(_QWORD *)(v5 + 16) = a1;
  }
  else
  {
    v5 = MEMORY[0x1E0DEE9D8];
  }
  v6 = v5 + 32;
  v8[1] = a1;
  v9 = 0;
  v8[0] = v5 + 32;
  a2(v8, &v9);
  if (v2)
  {
    if (v9 > a1)
    {
      __break(1u);
LABEL_16:
      __break(1u);
      goto LABEL_17;
    }
    if (!v8[0])
    {
LABEL_19:
      __break(1u);
      goto LABEL_20;
    }
    if (v6 != v8[0])
      goto LABEL_16;
    *(_QWORD *)(v5 + 16) = v9;
    swift_bridgeObjectRelease();
    return v5;
  }
  if (v9 > a1)
  {
LABEL_17:
    __break(1u);
    goto LABEL_18;
  }
  if (v8[0])
  {
    if (v6 != v8[0])
    {
LABEL_18:
      __break(1u);
      goto LABEL_19;
    }
    *(_QWORD *)(v5 + 16) = v9;
    return v5;
  }
LABEL_20:
  __break(1u);
LABEL_21:
  result = sub_1CA1F11BC();
  __break(1u);
  return result;
}

uint64_t sub_1CA100D0C(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  return sub_1CA0FFB98(a1, a2, *(uint64_t **)(v2 + 32), *(_QWORD *)(v2 + 40));
}

uint64_t sub_1CA100D44(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  return sub_1CA100114(a1, a2, *(uint64_t **)(v2 + 64), *(_QWORD *)(v2 + 72), *(_QWORD *)(v2 + 80), *(_QWORD *)(v2 + 88), *(_QWORD *)(v2 + 96), *(_QWORD *)(v2 + 104), *(_QWORD *)(v2 + 112));
}

uint64_t sub_1CA100D84@<X0>(uint64_t a1@<X3>, _QWORD *a2@<X8>)
{
  uint64_t v2;
  __int128 v5;

  v5 = *(_OWORD *)(v2 + 32);
  type metadata accessor for SparseBuffer(0, *(_QWORD *)(v2 + 24), *(_QWORD *)(v2 + 48), a1);
  return sub_1CA0FF180(v5, a2);
}

uint64_t type metadata accessor for SparseBuffer(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for SparseBuffer);
}

uint64_t sub_1CA100E28(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  return sub_1CA100710(a1, a2, *(uint64_t **)(v2 + 48), *(_QWORD *)(v2 + 56), *(void (**)(char *))(v2 + 64), *(_QWORD *)(v2 + 72), *(__int128 **)(v2 + 80), *(_QWORD *)(v2 + 16), *(_QWORD *)(v2 + 24), *(_QWORD *)(v2 + 32), *(_QWORD *)(v2 + 40));
}

uint64_t sub_1CA100E60(uint64_t a1)
{
  uint64_t v1;

  return (*(uint64_t (**)(_QWORD, uint64_t))(v1 + 64))(*(_QWORD *)(v1 + 80), a1);
}

uint64_t *sub_1CA100E8C(uint64_t a1, _QWORD *a2)
{
  uint64_t v2;

  return sub_1CA100208(a1, a2, *(uint64_t **)(v2 + 64), *(void (**)(char *, char *))(v2 + 72), *(_QWORD *)(v2 + 80), *(__int128 **)(v2 + 88), *(__int128 **)(v2 + 96), *(_QWORD *)(v2 + 104), *(_QWORD *)(v2 + 112), *(_QWORD **)(v2 + 120), *(_QWORD *)(v2 + 16), *(_QWORD *)(v2 + 24), *(_QWORD *)(v2 + 32), *(_QWORD *)(v2 + 40), *(_QWORD *)(v2 + 48), *(_QWORD *)(v2 + 56));
}

uint64_t *sub_1CA100ECC(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  return sub_1CA0FFC7C(a1, a2, *(_QWORD *)(v2 + 32), *(__int128 **)(v2 + 40), *(void (**)(char *, char *))(v2 + 48), *(_QWORD *)(v2 + 56), *(_OWORD **)(v2 + 64), *(_QWORD *)(v2 + 72), *(_QWORD *)(v2 + 80), *(_QWORD **)(v2 + 88), *(_QWORD *)(v2 + 16), *(_QWORD *)(v2 + 24));
}

uint64_t ElementIdentifierSet.init()@<X0>(uint64_t *a1@<X8>)
{
  id v2;
  uint64_t result;

  v2 = objc_msgSend(objc_allocWithZone((Class)KGMutableElementIdentifierSet), sel_init);
  __swift_instantiateConcreteTypeFromMangledName(&qword_1ED852AF0);
  result = swift_allocObject();
  *(_QWORD *)(result + 16) = v2;
  *a1 = result;
  return result;
}

uint64_t ElementIdentifierSet.formUnion(_:)(uint64_t *a1)
{
  uint64_t v1;

  return sub_1CA101DE0(v1, *a1, (SEL *)&selRef_unionWithIdentifierSet_);
}

void ElementIdentifierSet.intersection(_:)(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v2;
  void *v4;
  id v5;
  id v6;
  id v7;
  uint64_t v8;
  uint64_t v9;

  v4 = *(void **)(*(_QWORD *)a1 + 16);
  v5 = *(id *)(*(_QWORD *)v2 + 16);
  v6 = v4;
  v7 = objc_msgSend(v5, sel_identifierSetByIntersectingIdentifierSet_, v6);
  objc_msgSend(v7, sel_mutableCopy);
  sub_1CA1F0F04();
  swift_unknownObjectRelease();
  sub_1CA0AB910(0, (unint64_t *)&qword_1ED852B18);
  swift_dynamicCast();
  __swift_instantiateConcreteTypeFromMangledName(&qword_1ED852AF0);
  v8 = swift_allocObject();
  *(_QWORD *)(v8 + 16) = v9;
  swift_release();

  *a2 = v8;
}

id ElementIdentifierSet.count.getter()
{
  uint64_t v0;

  return objc_msgSend(*(id *)(*(_QWORD *)v0 + 16), sel_count);
}

Swift::Bool __swiftcall ElementIdentifierSet.contains(_:)(KnowledgeGraphKit::ElementIdentifier a1)
{
  uint64_t v1;

  return objc_msgSend(*(id *)(*(_QWORD *)v1 + 16), sel_containsIdentifier_, *(_QWORD *)a1.rawValue);
}

void ElementIdentifierSet.subtracting(_:)(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v2;
  void *v4;
  id v5;
  id v6;
  id v7;
  uint64_t v8;
  uint64_t v9;

  v4 = *(void **)(*(_QWORD *)a1 + 16);
  v5 = *(id *)(*(_QWORD *)v2 + 16);
  v6 = v4;
  v7 = objc_msgSend(v5, sel_identifierSetBySubtractingIdentifierSet_, v6);
  objc_msgSend(v7, sel_mutableCopy);
  sub_1CA1F0F04();
  swift_unknownObjectRelease();
  sub_1CA0AB910(0, (unint64_t *)&qword_1ED852B18);
  swift_dynamicCast();
  __swift_instantiateConcreteTypeFromMangledName(&qword_1ED852AF0);
  v8 = swift_allocObject();
  *(_QWORD *)(v8 + 16) = v9;

  *a2 = v8;
}

uint64_t ElementIdentifierSet.insert(_:)(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v4;
  id v5;
  uint64_t v6;
  id v7;
  uint64_t v8;
  uint64_t v10;

  v4 = *a2;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    v5 = *(id *)(*(_QWORD *)v2 + 16);
    objc_msgSend(v5, sel_mutableCopy);
    sub_1CA1F0F04();
    swift_unknownObjectRelease();
    sub_1CA0AB910(0, (unint64_t *)&qword_1ED852B18);
    swift_dynamicCast();

    __swift_instantiateConcreteTypeFromMangledName(&qword_1ED852AF0);
    v6 = swift_allocObject();
    *(_QWORD *)(v6 + 16) = v10;
    *(_QWORD *)v2 = v6;
    swift_release();
  }
  v7 = *(id *)(*(_QWORD *)v2 + 16);
  v8 = objc_msgSend(v7, sel_containsIdentifier_, v4) ^ 1;
  objc_msgSend(v7, sel_addIdentifier_, v4);

  *a1 = v4;
  return v8;
}

uint64_t ElementIdentifierSet.init(_:)@<X0>(void *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result;
  uint64_t v5;

  objc_msgSend(a1, sel_mutableCopy);
  sub_1CA1F0F04();
  swift_unknownObjectRelease();
  sub_1CA0AB910(0, (unint64_t *)&qword_1ED852B18);
  swift_dynamicCast();

  __swift_instantiateConcreteTypeFromMangledName(&qword_1ED852AF0);
  result = swift_allocObject();
  *(_QWORD *)(result + 16) = v5;
  *a2 = result;
  return result;
}

void __swiftcall ElementIdentifierSet.wrappedValue()(KGElementIdentifierSet *__return_ptr retstr)
{
  uint64_t v1;
  id v2;

  v2 = *(id *)(*(_QWORD *)v1 + 16);
  objc_msgSend(v2, sel_copy);
  sub_1CA1F0F04();
  swift_unknownObjectRelease();
  sub_1CA0AB910(0, &qword_1ED852B10);
  swift_dynamicCast();

}

uint64_t ElementIdentifierSet.formIntersection(_:)(uint64_t *a1)
{
  return sub_1CA101670(a1, (SEL *)&selRef_intersectWithIdentifierSet_);
}

uint64_t ElementIdentifierSet.init(arrayLiteral:)@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  id v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  id v8;
  uint64_t v9;
  id v10;
  uint64_t v11;
  uint64_t result;
  uint64_t v13;

  v4 = objc_msgSend(objc_allocWithZone((Class)KGMutableElementIdentifierSet), sel_init);
  __swift_instantiateConcreteTypeFromMangledName(&qword_1ED852AF0);
  v5 = swift_allocObject();
  *(_QWORD *)(v5 + 16) = v4;
  v6 = *(_QWORD *)(a1 + 16);
  if (v6)
  {
    v7 = 0;
    do
    {
      v9 = *(_QWORD *)(a1 + 8 * v7 + 32);
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        v10 = *(id *)(v5 + 16);
        objc_msgSend(v10, sel_mutableCopy);
        sub_1CA1F0F04();
        swift_unknownObjectRelease();
        sub_1CA0AB910(0, (unint64_t *)&qword_1ED852B18);
        swift_dynamicCast();

        v11 = swift_allocObject();
        *(_QWORD *)(v11 + 16) = v13;
        swift_release();
        v5 = v11;
      }
      ++v7;
      v8 = *(id *)(v5 + 16);
      objc_msgSend(v8, sel_containsIdentifier_, v9);
      objc_msgSend(v8, sel_addIdentifier_, v9);

    }
    while (v6 != v7);
  }
  result = swift_bridgeObjectRelease();
  *a2 = v5;
  return result;
}

id ElementIdentifierSet.isEmpty.getter()
{
  uint64_t v0;

  return objc_msgSend(*(id *)(*(_QWORD *)v0 + 16), sel_isEmpty);
}

KnowledgeGraphKit::ElementIdentifier_optional __swiftcall ElementIdentifierSet.remove(_:)(KnowledgeGraphKit::ElementIdentifier a1)
{
  uint64_t v1;
  Swift::UInt v2;
  Swift::Bool v3;
  KnowledgeGraphKit::ElementIdentifier_optional result;

  sub_1CA102820((uint64_t *)a1.rawValue, (SEL *)&selRef_removeIdentifier_, v1);
  result.value.rawValue = v2;
  result.is_nil = v3;
  return result;
}

uint64_t ElementIdentifierSet.formSymmetricDifference(_:)(uint64_t *a1)
{
  uint64_t v1;

  return sub_1CA101DE0(v1, *a1, (SEL *)&selRef_formSymmetricDifferenceWithIdentifierSet_);
}

uint64_t ElementIdentifierSet.subtract(_:)(uint64_t *a1)
{
  return sub_1CA101670(a1, (SEL *)&selRef_subtractIdentifierSet_);
}

uint64_t sub_1CA101670(uint64_t *a1, SEL *a2)
{
  uint64_t v2;
  uint64_t v4;

  v4 = *a1;
  swift_retain();
  return sub_1CA101DE0(v2, v4, a2);
}

id ElementIdentifierSet.intersects(_:)(uint64_t a1)
{
  uint64_t v1;

  return objc_msgSend(*(id *)(*(_QWORD *)v1 + 16), sel_intersectsIdentifierSet_, *(_QWORD *)(*(_QWORD *)a1 + 16));
}

id sub_1CA1016E8(uint64_t a1, uint64_t a2)
{
  void *v3;
  void *v4;
  id v5;
  id v6;
  id v7;
  id v8;
  void *v10;

  v3 = *(void **)(a2 + 16);
  v4 = *(void **)(a1 + 16);
  swift_retain();
  v5 = v3;
  v6 = v4;
  v7 = objc_msgSend(v5, sel_identifierSetByIntersectingIdentifierSet_, v6);
  objc_msgSend(v7, sel_mutableCopy);
  sub_1CA1F0F04();
  swift_unknownObjectRelease();
  sub_1CA0AB910(0, (unint64_t *)&qword_1ED852B18);
  swift_dynamicCast();
  swift_release();

  v8 = objc_msgSend(v10, sel_isEqualToElementIdentifierSet_, *(_QWORD *)(a2 + 16));
  return v8;
}

id sub_1CA1017EC(uint64_t a1, uint64_t a2)
{
  void *v3;
  void *v4;
  id v5;
  id v6;
  id v7;
  id v8;
  void *v10;

  v3 = *(void **)(a1 + 16);
  v4 = *(void **)(a2 + 16);
  swift_retain();
  v5 = v3;
  v6 = v4;
  v7 = objc_msgSend(v5, sel_identifierSetByIntersectingIdentifierSet_, v6);
  objc_msgSend(v7, sel_mutableCopy);
  sub_1CA1F0F04();
  swift_unknownObjectRelease();
  sub_1CA0AB910(0, (unint64_t *)&qword_1ED852B18);
  swift_dynamicCast();
  swift_release();

  v8 = objc_msgSend(v10, sel_isEqualToElementIdentifierSet_, *(_QWORD *)(a1 + 16));
  return v8;
}

uint64_t ElementIdentifierSet.sparseOffsetArray.getter()
{
  uint64_t *v0;
  uint64_t v1;
  id v2;
  uint64_t v3;

  v1 = *v0;
  v2 = objc_msgSend(*(id *)(*v0 + 16), sel_count);
  swift_retain();
  v3 = sub_1CA0F2420((uint64_t)v2, v1);
  swift_release();
  return v3;
}

uint64_t ElementIdentifierSet.sparseArray<A>(of:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, _QWORD *a4@<X8>)
{
  uint64_t *v4;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t AssociatedTypeWitness;
  uint64_t v11;
  uint64_t v12;
  void *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v17;

  v17 = a3;
  v7 = *(_QWORD *)(a2 - 8);
  MEMORY[0x1E0C80A78](a1, a2);
  v9 = (char *)&v17 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  MEMORY[0x1E0C80A78](AssociatedTypeWitness, v11);
  v12 = *v4;
  v13 = *(void **)(v12 + 16);
  swift_retain();
  v14 = sub_1CA0F2420((uint64_t)objc_msgSend(v13, sel_count, v17), v12);
  swift_release();
  swift_getAssociatedConformanceWitness();
  sub_1CA1F1318();
  sub_1CA1F12D0();
  v15 = sub_1CA0F45D8((uint64_t)v9, *(_QWORD *)(v14 + 16), a2);
  (*(void (**)(char *, uint64_t))(v7 + 8))(v9, a2);
  return SparseArray.init(values:offsets:)(v15, v14, a2, a4);
}

uint64_t KGElementIdentifierSet.elementIdentifiers.getter@<X0>(uint64_t *a1@<X8>)
{
  void *v1;
  id v3;
  uint64_t result;
  uint64_t v5;

  v3 = v1;
  objc_msgSend(v3, sel_mutableCopy);
  sub_1CA1F0F04();
  swift_unknownObjectRelease();
  sub_1CA0AB910(0, (unint64_t *)&qword_1ED852B18);
  swift_dynamicCast();

  __swift_instantiateConcreteTypeFromMangledName(&qword_1ED852AF0);
  result = swift_allocObject();
  *(_QWORD *)(result + 16) = v5;
  *a1 = result;
  return result;
}

void ElementIdentifierSet.withValue<A>(_:)(void (*a1)(void))
{
  uint64_t v1;
  id v3;

  v3 = *(id *)(*(_QWORD *)v1 + 16);
  a1();

}

uint64_t ElementIdentifierSet.init(_:)@<X0>(_QWORD *a1@<X0>, uint64_t *a2@<X8>)
{
  id v3;
  uint64_t result;

  v3 = objc_msgSend(objc_allocWithZone((Class)KGMutableElementIdentifierSet), sel_initWithElementIdentifier_, *a1);
  __swift_instantiateConcreteTypeFromMangledName(&qword_1ED852AF0);
  result = swift_allocObject();
  *(_QWORD *)(result + 16) = v3;
  *a2 = result;
  return result;
}

id sub_1CA101C60(id result, uint64_t a2, uint64_t a3, id a4, uint64_t a5, uint64_t a6)
{
  uint64_t v6;
  id v9;
  uint64_t v11;

  v6 = a3;
  if (a3 < 0)
  {
    __break(1u);
  }
  else
  {
    v9 = result;
    if (v6)
    {
      while (v9 != a4)
      {
        v9 = objc_msgSend(*(id *)(a6 + 16), sel_indexAfterIndex_, v9, a2);
        a2 = v11;
        if (!--v6)
          return v9;
      }
      return 0;
    }
    return v9;
  }
  return result;
}

id ElementIdentifierSet.init(_:)@<X0>(void **a1@<X0>, _QWORD *a2@<X8>)
{
  void *v3;
  id v4;
  id v5;
  id *v6;
  id result;
  void *v8;
  id v9;
  id v10;
  void *v11;

  v4 = *a1;
  v3 = a1[1];
  v5 = a1[2];
  v6 = (id *)a1[4];
  result = objc_msgSend(objc_allocWithZone((Class)KGMutableElementIdentifierSet), sel_init);
  v8 = result;
  if (v4 == v5)
  {
LABEL_6:
    swift_release();
    __swift_instantiateConcreteTypeFromMangledName(&qword_1ED852AF0);
    result = (id)swift_allocObject();
    *((_QWORD *)result + 2) = v8;
    *a2 = result;
  }
  else
  {
    v9 = v4;
    while (v9 >= v4 && v9 < v5)
    {
      v10 = objc_msgSend(v6[2], sel_indexAfterIndex_, v9, v3);
      v3 = v11;
      result = objc_msgSend(v8, sel_addIdentifier_, v9);
      v9 = v10;
      if (v10 == v5)
        goto LABEL_6;
    }
    __break(1u);
  }
  return result;
}

uint64_t sub_1CA101DE0(uint64_t a1, uint64_t a2, SEL *a3)
{
  id v6;
  uint64_t v7;
  uint64_t v9;

  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    v6 = *(id *)(*(_QWORD *)a1 + 16);
    objc_msgSend(v6, sel_mutableCopy);
    sub_1CA1F0F04();
    swift_unknownObjectRelease();
    sub_1CA0AB910(0, (unint64_t *)&qword_1ED852B18);
    swift_dynamicCast();

    __swift_instantiateConcreteTypeFromMangledName(&qword_1ED852AF0);
    v7 = swift_allocObject();
    *(_QWORD *)(v7 + 16) = v9;
    *(_QWORD *)a1 = v7;
    swift_release();
  }
  objc_msgSend(*(id *)(*(_QWORD *)a1 + 16), *a3, *(_QWORD *)(a2 + 16));
  return swift_release();
}

void ElementIdentifierSet.indexSet.getter()
{
  uint64_t v0;
  id v1;
  id v2;

  v1 = *(id *)(*(_QWORD *)v0 + 16);
  v2 = objc_msgSend(v1, sel_indexSet);
  sub_1CA1F0850();

}

id static ElementIdentifierSet.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  return objc_msgSend(*(id *)(*(_QWORD *)a1 + 16), sel_isEqualToElementIdentifierSet_, *(_QWORD *)(*(_QWORD *)a2 + 16));
}

id sub_1CA101F70(uint64_t a1, uint64_t a2)
{
  return objc_msgSend(*(id *)(*(_QWORD *)a1 + 16), sel_isEqualToElementIdentifierSet_, *(_QWORD *)(*(_QWORD *)a2 + 16));
}

BOOL static KGElementIdentifierSetIndex.== infix(_:_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return a1 == a3;
}

BOOL static KGElementIdentifierSetIndex.< infix(_:_:)(unint64_t a1, uint64_t a2, unint64_t a3)
{
  return a1 < a3;
}

BOOL sub_1CA101FB4(_QWORD *a1, _QWORD *a2)
{
  return *a1 < *a2;
}

BOOL sub_1CA101FC8(_QWORD *a1, _QWORD *a2)
{
  return *a2 >= *a1;
}

BOOL sub_1CA101FDC(_QWORD *a1, _QWORD *a2)
{
  return *a1 >= *a2;
}

BOOL sub_1CA101FF0(_QWORD *a1, _QWORD *a2)
{
  return *a2 < *a1;
}

id ElementIdentifierSet.startIndex.getter()
{
  return sub_1CA10201C((SEL *)&selRef_startIndex);
}

id ElementIdentifierSet.endIndex.getter()
{
  return sub_1CA10201C((SEL *)&selRef_endIndex);
}

id sub_1CA10201C(SEL *a1)
{
  uint64_t v1;

  return objc_msgSend(*(id *)(*(_QWORD *)v1 + 16), *a1);
}

KGElementIdentifierSetIndex __swiftcall ElementIdentifierSet.index(after:)(KGElementIdentifierSetIndex after)
{
  uint64_t v1;
  id v2;
  int64_t v3;
  KGElementIdentifierSetIndex result;

  v2 = objc_msgSend(*(id *)(*(_QWORD *)v1 + 16), sel_indexAfterIndex_, after.var0, after.var1);
  result.var1 = v3;
  result.var0 = (unint64_t)v2;
  return result;
}

uint64_t ElementIdentifierSet.subscript.getter@<X0>(uint64_t result@<X0>, _QWORD *a2@<X8>)
{
  *a2 = result;
  return result;
}

id sub_1CA102054@<X0>(_QWORD *a1@<X8>)
{
  return sub_1CA10206C((SEL *)&selRef_startIndex, a1);
}

id sub_1CA102060@<X0>(_QWORD *a1@<X8>)
{
  return sub_1CA10206C((SEL *)&selRef_endIndex, a1);
}

id sub_1CA10206C@<X0>(SEL *a1@<X2>, _QWORD *a2@<X8>)
{
  uint64_t v2;
  id result;
  uint64_t v5;

  result = objc_msgSend(*(id *)(*(_QWORD *)v2 + 16), *a1);
  *a2 = result;
  a2[1] = v5;
  return result;
}

uint64_t (*sub_1CA10209C(_QWORD *a1, _QWORD *a2))()
{
  *a1 = *a2;
  return nullsub_1;
}

id sub_1CA1020B8@<X0>(unint64_t *a1@<X0>, unint64_t *a2@<X8>)
{
  unint64_t *v2;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  id v9;
  id result;

  v4 = *a1;
  v5 = a1[1];
  v6 = a1[2];
  v7 = a1[3];
  v8 = *v2;
  v9 = objc_msgSend(*(id *)(v8 + 16), sel_startIndex);
  result = objc_msgSend(*(id *)(v8 + 16), sel_endIndex);
  if (result < v9)
  {
    __break(1u);
    goto LABEL_6;
  }
  if (v4 < (unint64_t)v9)
  {
LABEL_6:
    __break(1u);
    goto LABEL_7;
  }
  if ((unint64_t)result >= v6)
  {
    a2[3] = v7;
    a2[4] = v8;
    *a2 = v4;
    a2[1] = v5;
    a2[2] = v6;
    return (id)swift_retain();
  }
LABEL_7:
  __break(1u);
  return result;
}

id sub_1CA102150@<X0>(_QWORD *a1@<X8>)
{
  uint64_t *v1;
  uint64_t v3;
  void *v4;
  uint64_t v5;
  id result;
  uint64_t v7;

  v3 = *v1;
  *a1 = v3;
  v4 = *(void **)(v3 + 16);
  swift_retain();
  a1[1] = objc_msgSend(v4, sel_startIndex);
  a1[2] = v5;
  result = objc_msgSend(*(id *)(v3 + 16), sel_endIndex);
  a1[3] = result;
  a1[4] = v7;
  return result;
}

id sub_1CA1021B0()
{
  uint64_t v0;

  return objc_msgSend(*(id *)(*(_QWORD *)v0 + 16), sel_isEmpty);
}

void sub_1CA1021D4(uint64_t a1@<X8>)
{
  *(_QWORD *)a1 = 0;
  *(_QWORD *)(a1 + 8) = 0;
  *(_WORD *)(a1 + 16) = 256;
}

_QWORD *sub_1CA1021E4@<X0>(_QWORD *result@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  uint64_t *v3;
  uint64_t v4;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  if (a2 < 0)
  {
    __break(1u);
  }
  else
  {
    v4 = a2;
    v6 = (_QWORD *)*result;
    v7 = result[1];
    if (a2)
    {
      v8 = *v3;
      do
      {
        result = objc_msgSend(*(id *)(v8 + 16), sel_indexAfterIndex_, v6, v7);
        v6 = result;
        v7 = v9;
        --v4;
      }
      while (v4);
    }
    *a3 = v6;
    a3[1] = v7;
  }
  return result;
}

id sub_1CA102244@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t *v4;
  id result;
  uint64_t v7;
  char v8;

  result = sub_1CA101C60(*(id *)a1, *(_QWORD *)(a1 + 8), a2, *(id *)a3, *(_QWORD *)(a3 + 8), *v4);
  *(_QWORD *)a4 = result;
  *(_QWORD *)(a4 + 8) = v7;
  *(_BYTE *)(a4 + 16) = v8 & 1;
  return result;
}

_QWORD *sub_1CA102288(_QWORD *result, _QWORD *a2)
{
  uint64_t *v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v3 = (_QWORD *)*a2;
  if (*a2 < *result)
  {
LABEL_9:
    __break(1u);
    return result;
  }
  if ((_QWORD *)*result != v3)
  {
    v5 = 0;
    v6 = *v2;
    while (1)
    {
      v4 = v5 + 1;
      if (__OFADD__(v5, 1))
        break;
      result = objc_msgSend(*(id *)(v6 + 16), sel_indexAfterIndex_);
      ++v5;
      if (result == v3)
        return (_QWORD *)v4;
    }
    __break(1u);
    goto LABEL_9;
  }
  return 0;
}

_QWORD *sub_1CA102314(_QWORD *result, _QWORD *a2)
{
  if (*result < *a2 || *result >= a2[2])
    __break(1u);
  return result;
}

_QWORD *sub_1CA102334(_QWORD *result, _QWORD *a2)
{
  if (*result < *a2 || a2[2] < *result)
    __break(1u);
  return result;
}

_QWORD *sub_1CA102354(_QWORD *result, _QWORD *a2)
{
  if (*result < *a2 || a2[2] < result[2])
    __break(1u);
  return result;
}

id sub_1CA102378@<X0>(_QWORD *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;
  id result;
  uint64_t v5;

  result = objc_msgSend(*(id *)(*(_QWORD *)v2 + 16), sel_indexAfterIndex_, *a1, a1[1]);
  *a2 = result;
  a2[1] = v5;
  return result;
}

id sub_1CA1023B0(_QWORD *a1)
{
  uint64_t v1;
  id result;
  uint64_t v4;

  result = objc_msgSend(*(id *)(*(_QWORD *)v1 + 16), sel_indexAfterIndex_, *a1, a1[1]);
  *a1 = result;
  a1[1] = v4;
  return result;
}

id sub_1CA1023E8@<X0>(_QWORD *a1@<X8>)
{
  uint64_t *v1;
  uint64_t v3;
  id result;
  uint64_t v5;

  v3 = *v1;
  result = objc_msgSend(*(id *)(v3 + 16), sel_startIndex);
  *a1 = v3;
  a1[1] = result;
  a1[2] = v5;
  return result;
}

id sub_1CA102420()
{
  uint64_t v0;

  return objc_msgSend(*(id *)(*(_QWORD *)v0 + 16), sel_count);
}

uint64_t sub_1CA102434()
{
  uint64_t *v0;
  uint64_t v1;

  v1 = sub_1CA0B5430(*v0);
  swift_release();
  return v1;
}

id sub_1CA102468(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  uint64_t *v3;

  return sub_1CA138274(a1, a2, a3, *v3);
}

void ElementIdentifierSet.hash(into:)()
{
  uint64_t v0;
  id v1;

  v1 = *(id *)(*(_QWORD *)v0 + 16);
  objc_msgSend(v1, sel_hash);
  sub_1CA1F13FC();

}

uint64_t ElementIdentifierSet.hashValue.getter()
{
  uint64_t *v0;
  uint64_t v1;
  id v2;

  v1 = *v0;
  sub_1CA1F13F0();
  v2 = *(id *)(v1 + 16);
  objc_msgSend(v2, sel_hash);
  sub_1CA1F13FC();

  return sub_1CA1F1438();
}

uint64_t sub_1CA102518()
{
  uint64_t *v0;
  uint64_t v1;
  id v2;

  v1 = *v0;
  sub_1CA1F13F0();
  v2 = *(id *)(v1 + 16);
  objc_msgSend(v2, sel_hash);
  sub_1CA1F13FC();

  return sub_1CA1F1438();
}

void sub_1CA102574()
{
  uint64_t v0;
  id v1;

  v1 = *(id *)(*(_QWORD *)v0 + 16);
  objc_msgSend(v1, sel_hash);
  sub_1CA1F13FC();

}

uint64_t sub_1CA1025C0()
{
  uint64_t *v0;
  uint64_t v1;
  id v2;

  v1 = *v0;
  sub_1CA1F13F0();
  v2 = *(id *)(v1 + 16);
  objc_msgSend(v2, sel_hash);
  sub_1CA1F13FC();

  return sub_1CA1F1438();
}

uint64_t ElementIdentifierSet.description.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v0 = swift_retain();
  v1 = sub_1CA0B5430(v0);
  swift_release();
  v2 = MEMORY[0x1CAA4A210](v1, &type metadata for ElementIdentifier);
  swift_release();
  return v2;
}

uint64_t sub_1CA10267C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v0 = swift_retain();
  v1 = sub_1CA0B5430(v0);
  swift_release();
  v2 = MEMORY[0x1CAA4A210](v1, &type metadata for ElementIdentifier);
  swift_release();
  return v2;
}

void ElementIdentifierSet.union(_:)(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  sub_1CA1026FC(a1, (SEL *)&selRef_identifierSetByFormingUnion_, a2);
}

void ElementIdentifierSet.symmetricDifference(_:)(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  sub_1CA1026FC(a1, (SEL *)&selRef_identifierSetByFormingSymmetricDifferenceWithIdentifierSet_, a2);
}

void sub_1CA1026FC(uint64_t a1@<X0>, SEL *a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v3;
  void *v6;
  void *v7;
  id v8;
  id v9;
  id v10;
  uint64_t v11;
  uint64_t v12;

  v6 = *(void **)(*(_QWORD *)v3 + 16);
  v7 = *(void **)(*(_QWORD *)a1 + 16);
  v8 = v6;
  v9 = v7;
  v10 = objc_msgSend(v8, *a2, v9);
  objc_msgSend(v10, sel_mutableCopy);
  sub_1CA1F0F04();
  swift_unknownObjectRelease();
  sub_1CA0AB910(0, (unint64_t *)&qword_1ED852B18);
  swift_dynamicCast();

  __swift_instantiateConcreteTypeFromMangledName(&qword_1ED852AF0);
  v11 = swift_allocObject();
  *(_QWORD *)(v11 + 16) = v12;
  swift_release();
  swift_release();

  *a3 = v11;
}

void ElementIdentifierSet.update(with:)(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  sub_1CA102820(a1, (SEL *)&selRef_addIdentifier_, a2);
}

void sub_1CA102820(uint64_t *a1@<X0>, SEL *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v3;
  uint64_t v6;
  id v7;
  uint64_t v8;
  id v9;
  unsigned int v10;
  uint64_t v11;
  uint64_t v12;

  v6 = *a1;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    v7 = *(id *)(*(_QWORD *)v3 + 16);
    objc_msgSend(v7, sel_mutableCopy);
    sub_1CA1F0F04();
    swift_unknownObjectRelease();
    sub_1CA0AB910(0, (unint64_t *)&qword_1ED852B18);
    swift_dynamicCast();

    __swift_instantiateConcreteTypeFromMangledName(&qword_1ED852AF0);
    v8 = swift_allocObject();
    *(_QWORD *)(v8 + 16) = v12;
    *(_QWORD *)v3 = v8;
    swift_release();
  }
  v9 = *(id *)(*(_QWORD *)v3 + 16);
  v10 = objc_msgSend(v9, sel_containsIdentifier_, v6);
  if (v10)
    v11 = v6;
  else
    v11 = 0;
  *(_QWORD *)a3 = v11;
  *(_BYTE *)(a3 + 8) = v10 ^ 1;
  objc_msgSend(v9, *a2, v6);

}

uint64_t ElementIdentifierSet.isDisjoint(with:)(uint64_t a1)
{
  uint64_t v1;

  return objc_msgSend(*(id *)(*(_QWORD *)v1 + 16), sel_intersectsIdentifierSet_, *(_QWORD *)(*(_QWORD *)a1 + 16)) ^ 1;
}

id sub_1CA10297C(_QWORD *a1)
{
  uint64_t v1;

  return objc_msgSend(*(id *)(*(_QWORD *)v1 + 16), sel_containsIdentifier_, *a1);
}

uint64_t sub_1CA1029B0(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3;

  v3 = *a2;
  return ElementIdentifierSet.insert(_:)(a1, &v3) & 1;
}

void sub_1CA1029E0(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;

  v2 = *a1;
  ElementIdentifierSet.update(with:)(&v2, a2);
}

uint64_t sub_1CA102A08(uint64_t *a1)
{
  uint64_t v1;

  return sub_1CA101DE0(v1, *a1, (SEL *)&selRef_unionWithIdentifierSet_);
}

uint64_t sub_1CA102A40(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  return sub_1CA102B08(a1, a2, a3, (SEL *)&selRef_intersectWithIdentifierSet_);
}

uint64_t sub_1CA102A4C(uint64_t *a1)
{
  uint64_t v1;

  return sub_1CA101DE0(v1, *a1, (SEL *)&selRef_formSymmetricDifferenceWithIdentifierSet_);
}

uint64_t sub_1CA102A84@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  ElementIdentifierSet.subtracting(_:)(a1, a2);
  return swift_release();
}

id sub_1CA102A9C(uint64_t *a1)
{
  uint64_t *v1;

  return sub_1CA1016E8(*a1, *v1);
}

uint64_t sub_1CA102AA8(uint64_t a1)
{
  uint64_t v1;

  return objc_msgSend(*(id *)(*(_QWORD *)v1 + 16), sel_intersectsIdentifierSet_, *(_QWORD *)(*(_QWORD *)a1 + 16)) ^ 1;
}

id sub_1CA102AD8(uint64_t *a1)
{
  uint64_t *v1;

  return sub_1CA1017EC(*a1, *v1);
}

uint64_t sub_1CA102AE4()
{
  return sub_1CA1F0F28();
}

uint64_t sub_1CA102AFC(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  return sub_1CA102B08(a1, a2, a3, (SEL *)&selRef_subtractIdentifierSet_);
}

uint64_t sub_1CA102B08(uint64_t *a1, uint64_t a2, uint64_t a3, SEL *a4)
{
  uint64_t v4;
  uint64_t v6;

  v6 = *a1;
  swift_retain();
  return sub_1CA101DE0(v4, v6, a4);
}

uint64_t sub_1CA102B54()
{
  return sub_1CA102BE4(&qword_1EF938988, (uint64_t)&protocol conformance descriptor for KGElementIdentifierSetIndex);
}

unint64_t sub_1CA102B7C()
{
  unint64_t result;

  result = qword_1EF938990;
  if (!qword_1EF938990)
  {
    result = MEMORY[0x1CAA4BB30](&protocol conformance descriptor for ElementIdentifierSet, &type metadata for ElementIdentifierSet);
    atomic_store(result, (unint64_t *)&qword_1EF938990);
  }
  return result;
}

uint64_t sub_1CA102BC0()
{
  return sub_1CA102BE4((unint64_t *)&qword_1EF938998, (uint64_t)&protocol conformance descriptor for KGElementIdentifierSetIndex);
}

uint64_t sub_1CA102BE4(unint64_t *a1, uint64_t a2)
{
  uint64_t result;
  uint64_t v5;

  result = *a1;
  if (!result)
  {
    type metadata accessor for KGElementIdentifierSetIndex(255);
    result = MEMORY[0x1CAA4BB30](a2, v5);
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_1CA102C24()
{
  return sub_1CA102CA8(&qword_1EF9389A0, &qword_1EF9389A8, MEMORY[0x1E0DEA228]);
}

uint64_t sub_1CA102C50()
{
  return sub_1CA102CA8(&qword_1EF9389B0, &qword_1EF9389B8, MEMORY[0x1E0DEDE48]);
}

uint64_t sub_1CA102C7C()
{
  return sub_1CA102CA8(&qword_1EF9389C0, &qword_1EF9389C8, MEMORY[0x1E0DEC908]);
}

uint64_t sub_1CA102CA8(unint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t result;
  uint64_t v6;

  result = *a1;
  if (!result)
  {
    v6 = __swift_instantiateConcreteTypeFromMangledNameAbstract(a2);
    result = MEMORY[0x1CAA4BB30](a3, v6);
    atomic_store(result, a1);
  }
  return result;
}

unint64_t sub_1CA102CEC()
{
  unint64_t result;

  result = qword_1EF9389D0;
  if (!qword_1EF9389D0)
  {
    result = MEMORY[0x1CAA4BB30](&protocol conformance descriptor for ElementIdentifierSet, &type metadata for ElementIdentifierSet);
    atomic_store(result, (unint64_t *)&qword_1EF9389D0);
  }
  return result;
}

unint64_t sub_1CA102D34()
{
  unint64_t result;

  result = qword_1EF9389D8;
  if (!qword_1EF9389D8)
  {
    result = MEMORY[0x1CAA4BB30](&protocol conformance descriptor for ElementIdentifierSet, &type metadata for ElementIdentifierSet);
    atomic_store(result, (unint64_t *)&qword_1EF9389D8);
  }
  return result;
}

ValueMetadata *type metadata accessor for ElementIdentifierSet()
{
  return &type metadata for ElementIdentifierSet;
}

unint64_t MAGraph.adjacencyMatrix(directed:)(unint64_t a1)
{
  unint64_t v1;
  uint64_t v2;
  uint64_t v3;
  id v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t result;
  _QWORD *v9;
  uint64_t v10;
  int64_t v11;
  uint64_t v12;
  void *v13;
  id v14;
  id v15;
  uint64_t v16;
  int64_t v17;
  int64_t v18;
  unint64_t v19;
  uint64_t v20;
  int64_t v21;
  uint64_t v22;
  int64_t v23;
  unint64_t v24;
  BOOL v25;
  uint64_t v26;
  _QWORD *v27;
  id v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  int64_t v32;
  uint64_t v33;
  uint64_t v34;
  char *v35;
  unint64_t v36;
  unint64_t v37;
  unint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  unint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  unint64_t v48;
  char *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  unint64_t v53;
  void *v54;
  int64_t v55;
  unint64_t v56;

  if (!objc_msgSend((id)v1, sel_hasPendingRead))
    goto LABEL_91;
  v56 = MEMORY[0x1E0DEE9D8];
  v5 = objc_msgSend((id)v1, sel_allNodes);
  v2 = sub_1CA0AB910(0, (unint64_t *)&qword_1EF93A320);
  sub_1CA0CBCF8((unint64_t *)&qword_1EF937678, (unint64_t *)&qword_1EF93A320);
  v6 = sub_1CA1F0C94();

  sub_1CA0B2380(v6);
  v1 = v56;
  v53 = v56 >> 62;
  v3 = v56 & 0xFFFFFFFFFFFFFF8;
  if (v56 >> 62)
    goto LABEL_92;
  v7 = *(_QWORD *)((v56 & 0xFFFFFFFFFFFFFF8) + 0x10);
  result = v7 * v7;
  if ((unsigned __int128)(v7 * (__int128)v7) >> 64 == (v7 * v7) >> 63)
  {
    v9 = (_QWORD *)sub_1CA0B4464(result, 0.0);
    v10 = *(_QWORD *)((v56 & 0xFFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain();
    if (v10)
    {
      v45 = v10;
      v41 = v7;
      v52 = v7;
LABEL_6:
      v11 = 0;
      v49 = (char *)(v1 + 32);
      v47 = v3 + 32;
      v48 = v1 & 0xC000000000000001;
      v50 = v10 + 1;
      v51 = v10;
      v46 = (2 * v10) | 1;
      v43 = v2;
      v44 = v1;
      v42 = v3;
      do
      {
        v12 = *(_QWORD *)(v3 + 16);
        if (v11 >= (unint64_t)v12)
          goto LABEL_85;
        if (v11 == v50)
        {
LABEL_86:
          __break(1u);
LABEL_87:
          __break(1u);
LABEL_88:
          __break(1u);
LABEL_89:
          __break(1u);
LABEL_90:
          __break(1u);
LABEL_91:
          __break(1u);
LABEL_92:
          swift_bridgeObjectRetain();
          v7 = sub_1CA1F1234();
          v40 = sub_1CA1F1234();
          swift_bridgeObjectRelease();
          result = v7 * v40;
          v52 = v40;
          if ((unsigned __int128)(v7 * (__int128)v40) >> 64 != (v7 * v40) >> 63)
            goto LABEL_96;
          v9 = (_QWORD *)sub_1CA0B4464(result, 0.0);
          swift_bridgeObjectRetain();
          v45 = sub_1CA1F1234();
          if (!v45)
            goto LABEL_65;
          swift_bridgeObjectRetain();
          v10 = sub_1CA1F1234();
          result = swift_bridgeObjectRelease();
          if (v10 < 0)
            goto LABEL_97;
          v41 = v7;
          goto LABEL_6;
        }
        v13 = *(void **)&v49[8 * v11];
        if (v53)
        {
          swift_bridgeObjectRetain();
          v15 = v13;
          v16 = sub_1CA1F1234();
          swift_bridgeObjectRelease();
          if (v16 < v11)
            goto LABEL_88;
          swift_bridgeObjectRetain();
          v12 = sub_1CA1F1234();
          swift_bridgeObjectRelease();
        }
        else
        {
          v14 = v13;
        }
        if (v12 < v10)
          goto LABEL_87;
        if (v48 && v11 != v10)
        {
          if (v11 >= v10)
            goto LABEL_89;
          v17 = v11;
          do
          {
            v18 = v17 + 1;
            sub_1CA1F1084();
            v17 = v18;
          }
          while (v10 != v18);
        }
        swift_bridgeObjectRetain();
        v2 = v3;
        v19 = v46;
        v20 = v47;
        v21 = v11;
        if (v53)
        {
          v2 = sub_1CA1F1240();
          v20 = v22;
          v21 = v23;
          v19 = v24;
          swift_bridgeObjectRelease();
        }
        v25 = __OFSUB__(v19 >> 1, v21);
        v7 = (v19 >> 1) - v21;
        v3 = v52;
        if (v7)
        {
          if (!((v7 < 0) ^ v25 | (v7 == 0)))
          {
            v2 = 0;
            v55 = v11 * v52;
            v26 = v20 + 8 * v21;
            v54 = v13;
            while (1)
            {
              if (__OFADD__(v2, 1))
              {
                __break(1u);
LABEL_68:
                __break(1u);
LABEL_69:
                __break(1u);
LABEL_70:
                __break(1u);
LABEL_71:
                __break(1u);
LABEL_72:
                __break(1u);
LABEL_73:
                __break(1u);
LABEL_74:
                __break(1u);
LABEL_75:
                __break(1u);
LABEL_76:
                __break(1u);
LABEL_77:
                __break(1u);
LABEL_78:
                __break(1u);
LABEL_79:
                __break(1u);
LABEL_80:
                __break(1u);
LABEL_81:
                __break(1u);
LABEL_82:
                __break(1u);
LABEL_83:
                __break(1u);
LABEL_84:
                __break(1u);
LABEL_85:
                __break(1u);
                goto LABEL_86;
              }
              v28 = *(id *)(v26 + 8 * v2);
              if ((a1 & 1) == 0)
                break;
              if (objc_msgSend(v13, sel_hasEdgeTowardNode_, v28))
              {
                v29 = v2 + v11;
                if (__OFADD__(v2, v11))
                  goto LABEL_68;
                if ((unsigned __int128)(v11 * (__int128)v52) >> 64 != (v11 * v52) >> 63)
                  goto LABEL_70;
                v1 = v55 + v29;
                if (__OFADD__(v55, v29))
                  goto LABEL_72;
                if ((swift_isUniquelyReferenced_nonNull_native() & 1) != 0)
                {
                  if ((v1 & 0x8000000000000000) != 0)
                    goto LABEL_75;
                }
                else
                {
                  v9 = sub_1CA0B6058(v9);
                  if ((v1 & 0x8000000000000000) != 0)
                    goto LABEL_75;
                }
                if (v1 >= v9[2])
                  goto LABEL_78;
                v9[v1 + 4] = 0x3FF0000000000000;
              }
              if (objc_msgSend(v13, sel_hasEdgeFromNode_, v28, v41))
              {
                v30 = v2 + v11;
                if (__OFADD__(v2, v11))
                  goto LABEL_74;
                v31 = v30 * v52;
                if ((unsigned __int128)(v30 * (__int128)v52) >> 64 != (v30 * v52) >> 63)
                  goto LABEL_77;
                v1 = v31 + v11;
                if (__OFADD__(v31, v11))
                  goto LABEL_80;
                if ((swift_isUniquelyReferenced_nonNull_native() & 1) != 0)
                {
                  if ((v1 & 0x8000000000000000) != 0)
                    goto LABEL_62;
                }
                else
                {
                  v9 = sub_1CA0B6058(v9);
                  if ((v1 & 0x8000000000000000) != 0)
                  {
LABEL_62:
                    __break(1u);
                    goto LABEL_63;
                  }
                }
                if (v1 >= v9[2])
                  goto LABEL_83;
                v27 = &v9[v1 + 4];
LABEL_26:
                *v27 = 0x3FF0000000000000;
              }
LABEL_27:

              if (v7 == ++v2)
                goto LABEL_7;
            }
            if (!objc_msgSend(v13, sel_hasEdgeWithNode_, v28))
              goto LABEL_27;
            v1 = v2 + v11;
            if (__OFADD__(v2, v11))
              goto LABEL_69;
            v32 = v11 * v52;
            if ((unsigned __int128)(v11 * (__int128)v52) >> 64 != (v11 * v52) >> 63)
              goto LABEL_71;
            v33 = v26;
            v34 = v7;
            v35 = (char *)a1;
            a1 = v32 + v1;
            if (__OFADD__(v32, v1))
              goto LABEL_73;
            if ((swift_isUniquelyReferenced_nonNull_native() & 1) != 0)
            {
              if ((a1 & 0x8000000000000000) != 0)
                goto LABEL_76;
            }
            else
            {
              v9 = sub_1CA0B6058(v9);
              if ((a1 & 0x8000000000000000) != 0)
                goto LABEL_76;
            }
            v36 = v9[2];
            if (a1 >= v36)
              goto LABEL_79;
            v9[a1 + 4] = 0x3FF0000000000000;
            v37 = v1 * v52;
            if ((unsigned __int128)((uint64_t)v1 * (__int128)v52) >> 64 != (uint64_t)(v1 * v52) >> 63)
              goto LABEL_81;
            v25 = __OFADD__(v37, v11);
            v38 = v37 + v11;
            if (v25)
              goto LABEL_82;
            if (v38 >= v36)
              goto LABEL_84;
            v27 = &v9[v38 + 4];
            a1 = (unint64_t)v35;
            v7 = v34;
            v26 = v33;
            v13 = v54;
            goto LABEL_26;
          }
          goto LABEL_90;
        }
LABEL_7:
        ++v11;

        swift_unknownObjectRelease();
        v1 = v44;
        v3 = v42;
        v2 = v43;
        v10 = v51;
      }
      while (v11 != v45);
      v7 = v41;
LABEL_65:
      v39 = v52;
    }
    else
    {
LABEL_63:
      v39 = v7;
    }
    swift_bridgeObjectRelease();
    type metadata accessor for MAAdjacencyMatrixRepresentation();
    result = swift_allocObject();
    *(_BYTE *)(result + 48) = a1 & 1;
    *(_QWORD *)(result + 16) = v7;
    *(_QWORD *)(result + 24) = v39;
    *(_QWORD *)(result + 32) = v9;
    *(_QWORD *)(result + 40) = v1;
  }
  else
  {
LABEL_96:
    __break(1u);
LABEL_97:
    __break(1u);
  }
  return result;
}

unint64_t MAGraph.adjacencyWeightedMatrix(directed:repeating:weightedEdges:)(char a1, double (*a2)(unint64_t), double a3)
{
  void *v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  __objc2_class **v7;
  id v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t result;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  int64_t v16;
  uint64_t v17;
  uint64_t v18;
  void *v19;
  id v20;
  id v21;
  uint64_t v22;
  int64_t v23;
  int64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  id v29;
  uint64_t v30;
  unint64_t v31;
  id v32;
  uint64_t v33;
  uint64_t v34;
  id v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t v38;
  uint64_t v39;
  BOOL v40;
  unint64_t v41;
  uint64_t v42;
  uint64_t v43;
  __objc2_class **v44;
  unint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  unint64_t v50;
  __objc2_class **v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v58;
  unint64_t v59;
  unint64_t v60;

  if (!objc_msgSend(v3, sel_hasPendingRead))
    goto LABEL_92;
  v60 = MEMORY[0x1E0DEE9D8];
  v9 = objc_msgSend(v3, sel_allNodes);
  v5 = sub_1CA0AB910(0, (unint64_t *)&qword_1EF93A320);
  sub_1CA0CBCF8((unint64_t *)&qword_1EF937678, (unint64_t *)&qword_1EF93A320);
  v10 = sub_1CA1F0C94();

  sub_1CA0B2380(v10);
  v6 = v60;
  v4 = v60 & 0xFFFFFFFFFFFFFF8;
  v7 = (__objc2_class **)(v60 >> 62);
  if (v60 >> 62)
    goto LABEL_93;
  v11 = *(_QWORD *)((v60 & 0xFFFFFFFFFFFFFF8) + 0x10);
  result = v11 * v11;
  if ((unsigned __int128)(v11 * (__int128)v11) >> 64 == (v11 * v11) >> 63)
  {
    v13 = (_QWORD *)sub_1CA0B4464(result, a3);
    v14 = *(_QWORD *)((v60 & 0xFFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain();
    if (!v14)
    {
LABEL_65:
      v15 = v11;
LABEL_67:
      swift_bridgeObjectRelease();
      type metadata accessor for MASquareMatrixRepresentation();
      result = swift_allocObject();
      *(_QWORD *)(result + 16) = v11;
      *(_QWORD *)(result + 24) = v15;
      *(_QWORD *)(result + 32) = v13;
      *(_QWORD *)(result + 40) = v6;
      return result;
    }
    v47 = v14;
    v42 = v11;
    v15 = v11;
    while (1)
    {
      v16 = 0;
      v17 = v6 < 0 ? v6 : v4;
      v49 = v4 + 32;
      v50 = v6 & 0xC000000000000001;
      v48 = (2 * v14) | 1;
      v52 = v6 + 32;
      v53 = v14 + 1;
      v45 = v5;
      v46 = v6;
      v43 = v14;
      v44 = v7;
      v54 = v4;
      v51 = (__objc2_class **)v17;
      while (1)
      {
        v18 = *(_QWORD *)(v4 + 16);
        if (v16 >= (unint64_t)v18)
          break;
        if (v16 == v53)
          goto LABEL_87;
        v19 = *(void **)(v52 + 8 * v16);
        if (v7)
        {
          v4 = (uint64_t)v7;
          swift_bridgeObjectRetain();
          v21 = v19;
          v7 = v51;
          v22 = sub_1CA1F1234();
          swift_bridgeObjectRelease();
          if (v22 < v16)
            goto LABEL_89;
          swift_bridgeObjectRetain();
          v18 = sub_1CA1F1234();
          swift_bridgeObjectRelease();
          v7 = (__objc2_class **)v4;
          v4 = v54;
        }
        else
        {
          v20 = v19;
        }
        if (v18 < v14)
          goto LABEL_88;
        if (v50 && v16 != v14)
        {
          if (v16 >= v14)
            goto LABEL_90;
          v23 = v16;
          do
          {
            v24 = v23 + 1;
            sub_1CA1F1084();
            v23 = v24;
          }
          while (v14 != v24);
        }
        swift_bridgeObjectRetain();
        v5 = v48;
        v25 = v49;
        v4 = v16;
        if (v7)
        {
          sub_1CA1F1240();
          v25 = v26;
          v4 = v27;
          v5 = v28;
          swift_bridgeObjectRelease();
        }
        v59 = (v5 >> 1) - v4;
        if (v5 >> 1 != v4)
        {
          if ((uint64_t)(v5 >> 1) <= v4)
            goto LABEL_91;
          v6 = 0;
          v55 = v16 * v15;
          v58 = v25 + 8 * v4;
          while (!__OFADD__(v6, 1))
          {
            v4 = (uint64_t)*(id *)(v58 + 8 * v6);
            if ((a1 & 1) != 0)
            {
              if (objc_msgSend(v19, sel_hasEdgeTowardNode_, v4))
              {
                v29 = objc_msgSend(v19, sel_edgesTowardNode_, v4);
                v7 = off_1E83DD758;
                sub_1CA0AB910(0, (unint64_t *)&qword_1EF936F60);
                sub_1CA0CBCF8(&qword_1EF9379D0, (unint64_t *)&qword_1EF936F60);
                v5 = sub_1CA1F0C94();

                a3 = a2(v5);
                swift_bridgeObjectRelease();
                v30 = v6 + v16;
                if (__OFADD__(v6, v16))
                  goto LABEL_69;
                if ((unsigned __int128)(v16 * (__int128)v15) >> 64 != (v16 * v15) >> 63)
                  goto LABEL_71;
                v31 = v55 + v30;
                if (__OFADD__(v55, v30))
                  goto LABEL_73;
                if ((swift_isUniquelyReferenced_nonNull_native() & 1) != 0)
                {
                  if ((v31 & 0x8000000000000000) != 0)
                    goto LABEL_76;
                }
                else
                {
                  v13 = sub_1CA0B6058(v13);
                  if ((v31 & 0x8000000000000000) != 0)
                    goto LABEL_76;
                }
                if (v31 >= v13[2])
                  goto LABEL_79;
                *(double *)&v13[v31 + 4] = a3;
              }
              if (objc_msgSend(v19, sel_hasEdgeFromNode_, v4))
              {
                v32 = objc_msgSend(v19, sel_edgesFromNode_, v4);
                v7 = off_1E83DD758;
                sub_1CA0AB910(0, (unint64_t *)&qword_1EF936F60);
                sub_1CA0CBCF8(&qword_1EF9379D0, (unint64_t *)&qword_1EF936F60);
                v5 = sub_1CA1F0C94();

                a3 = a2(v5);
                swift_bridgeObjectRelease();
                v33 = v6 + v16;
                if (__OFADD__(v6, v16))
                  goto LABEL_75;
                v34 = v33 * v15;
                if ((unsigned __int128)(v33 * (__int128)v15) >> 64 != (v33 * v15) >> 63)
                  goto LABEL_78;
                v11 = v34 + v16;
                if (__OFADD__(v34, v16))
                  goto LABEL_81;
                if ((swift_isUniquelyReferenced_nonNull_native() & 1) != 0)
                {
                  if (v11 < 0)
                    goto LABEL_64;
                }
                else
                {
                  v13 = sub_1CA0B6058(v13);
                  if (v11 < 0)
                  {
LABEL_64:
                    __break(1u);
                    goto LABEL_65;
                  }
                }
                if ((unint64_t)v11 >= v13[2])
                  goto LABEL_84;
                *(double *)&v13[v11 + 4] = a3;
              }
            }
            else if (objc_msgSend(v19, sel_hasEdgeWithNode_, v4))
            {
              v35 = objc_msgSend(v19, sel_edgesWithNode_, v4);
              v7 = off_1E83DD758;
              sub_1CA0AB910(0, (unint64_t *)&qword_1EF936F60);
              sub_1CA0CBCF8(&qword_1EF9379D0, (unint64_t *)&qword_1EF936F60);
              v5 = sub_1CA1F0C94();

              a3 = a2(v5);
              swift_bridgeObjectRelease();
              v36 = v6 + v16;
              if (__OFADD__(v6, v16))
                goto LABEL_70;
              v37 = v16 * v15;
              if ((unsigned __int128)(v16 * (__int128)v15) >> 64 != (v16 * v15) >> 63)
                goto LABEL_72;
              v5 = v37 + v36;
              if (__OFADD__(v37, v36))
                goto LABEL_74;
              if ((swift_isUniquelyReferenced_nonNull_native() & 1) != 0)
              {
                if ((v5 & 0x8000000000000000) != 0)
                  goto LABEL_77;
              }
              else
              {
                v13 = sub_1CA0B6058(v13);
                if ((v5 & 0x8000000000000000) != 0)
                  goto LABEL_77;
              }
              v38 = v13[2];
              if (v5 >= v38)
                goto LABEL_80;
              *(double *)&v13[v5 + 4] = a3;
              v39 = v36 * v15;
              if ((unsigned __int128)(v36 * (__int128)v15) >> 64 != (v36 * v15) >> 63)
                goto LABEL_82;
              v40 = __OFADD__(v39, v16);
              v41 = v39 + v16;
              if (v40)
                goto LABEL_83;
              if (v41 >= v38)
                goto LABEL_85;
              *(double *)&v13[v41 + 4] = a3;
            }

            if (v59 == ++v6)
              goto LABEL_10;
          }
          __break(1u);
LABEL_69:
          __break(1u);
LABEL_70:
          __break(1u);
LABEL_71:
          __break(1u);
LABEL_72:
          __break(1u);
LABEL_73:
          __break(1u);
LABEL_74:
          __break(1u);
LABEL_75:
          __break(1u);
LABEL_76:
          __break(1u);
LABEL_77:
          __break(1u);
LABEL_78:
          __break(1u);
LABEL_79:
          __break(1u);
LABEL_80:
          __break(1u);
LABEL_81:
          __break(1u);
LABEL_82:
          __break(1u);
LABEL_83:
          __break(1u);
LABEL_84:
          __break(1u);
LABEL_85:
          __break(1u);
          break;
        }
LABEL_10:
        ++v16;

        swift_unknownObjectRelease();
        v6 = v46;
        v7 = v44;
        v5 = v45;
        v4 = v54;
        v14 = v43;
        if (v16 == v47)
        {
          v11 = v42;
          goto LABEL_67;
        }
      }
      __break(1u);
LABEL_87:
      __break(1u);
LABEL_88:
      __break(1u);
LABEL_89:
      __break(1u);
LABEL_90:
      __break(1u);
LABEL_91:
      __break(1u);
LABEL_92:
      __break(1u);
LABEL_93:
      swift_bridgeObjectRetain();
      v11 = sub_1CA1F1234();
      v15 = sub_1CA1F1234();
      swift_bridgeObjectRelease();
      result = v11 * v15;
      if ((unsigned __int128)(v11 * (__int128)v15) >> 64 != (v11 * v15) >> 63)
        break;
      v13 = (_QWORD *)sub_1CA0B4464(result, a3);
      swift_bridgeObjectRetain();
      v47 = sub_1CA1F1234();
      if (!v47)
        goto LABEL_67;
      swift_bridgeObjectRetain();
      v14 = sub_1CA1F1234();
      result = swift_bridgeObjectRelease();
      if (v14 < 0)
        goto LABEL_98;
      v42 = v11;
    }
  }
  __break(1u);
LABEL_98:
  __break(1u);
  return result;
}

_QWORD *MAGraph.degreeVector(type:)(uint64_t a1)
{
  return sub_1CA103B08(a1, (SEL *)&selRef_degreeCount, (SEL *)&selRef_inDegreeCount, (SEL *)&selRef_outDegreeCount);
}

_QWORD *MAGraph.multiDegreeVector(type:)(uint64_t a1)
{
  return sub_1CA103B08(a1, (SEL *)&selRef_multiDegreeCount, (SEL *)&selRef_inMultiDegreeCount, (SEL *)&selRef_outMultiDegreeCount);
}

_QWORD *sub_1CA103B08(uint64_t a1, SEL *a2, SEL *a3, SEL *a4)
{
  void *v4;
  id v9;
  uint64_t v10;
  unint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  _QWORD *result;
  unint64_t v15;
  void *v16;
  id v17;
  unint64_t v18;
  unint64_t v19;

  if (!objc_msgSend(v4, sel_hasPendingRead))
    goto LABEL_26;
  v19 = MEMORY[0x1E0DEE9D8];
  v9 = objc_msgSend(v4, sel_allNodes);
  sub_1CA0AB910(0, (unint64_t *)&qword_1EF93A320);
  sub_1CA0CBCF8((unint64_t *)&qword_1EF937678, (unint64_t *)&qword_1EF93A320);
  v10 = sub_1CA1F0C94();

  sub_1CA0B2380(v10);
  v4 = (void *)v19;
  if (v19 >> 62)
  {
LABEL_27:
    swift_bridgeObjectRetain();
    v11 = sub_1CA1F1234();
    swift_bridgeObjectRelease();
    v12 = (_QWORD *)sub_1CA0B4464(v11, 0.0);
    swift_bridgeObjectRetain();
    result = (_QWORD *)sub_1CA1F1234();
    v13 = (uint64_t)result;
    if (result)
      goto LABEL_4;
LABEL_28:
    swift_bridgeObjectRelease();
LABEL_29:
    type metadata accessor for MAVectorRepresentation();
    result = (_QWORD *)swift_allocObject();
    result[2] = 1;
    result[3] = v11;
    result[4] = v12;
    result[5] = v4;
    return result;
  }
  v11 = *(_QWORD *)((v19 & 0xFFFFFFFFFFFFFF8) + 0x10);
  v12 = (_QWORD *)sub_1CA0B4464(v11, 0.0);
  v13 = *(_QWORD *)((v19 & 0xFFFFFFFFFFFFFF8) + 0x10);
  result = (_QWORD *)swift_bridgeObjectRetain();
  if (!v13)
    goto LABEL_28;
LABEL_4:
  if (v13 >= 1)
  {
    v18 = v11;
    v15 = 0;
    while (1)
    {
      v16 = (void *)*((_QWORD *)v4 + v15 + 4);
      switch(a1)
      {
        case 1:
          v17 = objc_msgSend(v16, *a3);
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
            v12 = sub_1CA0B6058(v12);
          if (v15 >= v12[2])
            goto LABEL_24;
          break;
        case 2:
          v17 = objc_msgSend(v16, *a4);
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
            v12 = sub_1CA0B6058(v12);
          if (v15 >= v12[2])
            goto LABEL_25;
          break;
        case 3:
          v17 = objc_msgSend(v16, *a2);
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
            v12 = sub_1CA0B6058(v12);
          if (v15 >= v12[2])
          {
            __break(1u);
LABEL_24:
            __break(1u);
LABEL_25:
            __break(1u);
LABEL_26:
            __break(1u);
            goto LABEL_27;
          }
          break;
        default:
          goto LABEL_7;
      }
      *(double *)&v12[v15 + 4] = (double)(uint64_t)v17;

LABEL_7:
      if (v13 == ++v15)
      {
        swift_bridgeObjectRelease();
        v11 = v18;
        goto LABEL_29;
      }
    }
  }
  __break(1u);
  return result;
}

unint64_t MAGraph.transitionMatrix(directed:)(char a1)
{
  void *v1;
  unint64_t v2;
  id v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t result;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  void *v11;
  id v12;
  uint64_t v13;
  id v14;
  id v15;
  uint64_t v16;
  uint64_t v17;
  id v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v27;
  unint64_t v28;

  if (!objc_msgSend(v1, sel_hasPendingRead))
    goto LABEL_46;
  v28 = MEMORY[0x1E0DEE9D8];
  v3 = objc_msgSend(v1, sel_allNodes);
  sub_1CA0AB910(0, (unint64_t *)&qword_1EF93A320);
  sub_1CA0CBCF8((unint64_t *)&qword_1EF937678, (unint64_t *)&qword_1EF93A320);
  v4 = sub_1CA1F0C94();

  sub_1CA0B2380(v4);
  v1 = (void *)v28;
  v2 = v28 & 0xFFFFFFFFFFFFFF8;
  if (v28 >> 62)
  {
LABEL_47:
    swift_bridgeObjectRetain();
    v20 = sub_1CA1F1234();
    v21 = sub_1CA1F1234();
    swift_bridgeObjectRelease();
    result = v20 * v21;
    v27 = v21;
    if ((unsigned __int128)(v20 * (__int128)v21) >> 64 == (v20 * v21) >> 63)
    {
      v7 = (_QWORD *)sub_1CA0B4464(result, 0.0);
      swift_bridgeObjectRetain();
      v22 = sub_1CA1F1234();
      if (v22)
      {
        v8 = v22;
        v23 = v20;
        swift_bridgeObjectRetain();
        v9 = sub_1CA1F1234();
        swift_bridgeObjectRelease();
LABEL_6:
        v10 = 0;
        v25 = v2;
        v24 = v8;
        do
        {
          if (v10 >= *(_QWORD *)(v2 + 16))
            goto LABEL_44;
          if (v9)
          {
            if (v9 < 1)
              goto LABEL_45;
            v11 = (void *)*((_QWORD *)v1 + v10 + 4);
            swift_bridgeObjectRetain();
            v12 = v11;
            v13 = 0;
            while (1)
            {
              v14 = *((id *)v1 + v13 + 4);
              if (objc_msgSend(v12, sel_hasEdgeWithNode_, v14))
              {
                if ((a1 & 1) != 0)
                {
                  v15 = objc_msgSend(v12, sel_outDegreeCount);
                  v16 = v13 * v27;
                  if ((unsigned __int128)(v13 * (__int128)v27) >> 64 != (v13 * v27) >> 63)
                  {
                    __break(1u);
LABEL_38:
                    __break(1u);
LABEL_39:
                    __break(1u);
LABEL_40:
                    __break(1u);
LABEL_41:
                    __break(1u);
LABEL_42:
                    __break(1u);
LABEL_43:
                    __break(1u);
LABEL_44:
                    __break(1u);
LABEL_45:
                    __break(1u);
LABEL_46:
                    __break(1u);
                    goto LABEL_47;
                  }
                  v2 = v16 + v10;
                  if (__OFADD__(v16, v10))
                    goto LABEL_39;
                  v17 = (uint64_t)v15;
                  if ((swift_isUniquelyReferenced_nonNull_native() & 1) != 0)
                  {
                    if ((v2 & 0x8000000000000000) != 0)
                      goto LABEL_43;
                  }
                  else
                  {
                    v7 = sub_1CA0B6058(v7);
                    if ((v2 & 0x8000000000000000) != 0)
                      goto LABEL_43;
                  }
                  if (v2 >= v7[2])
                    goto LABEL_40;
                }
                else
                {
                  v18 = objc_msgSend(v12, sel_degreeCount);
                  v19 = v13 * v27;
                  if ((unsigned __int128)(v13 * (__int128)v27) >> 64 != (v13 * v27) >> 63)
                    goto LABEL_38;
                  v2 = v19 + v10;
                  if (__OFADD__(v19, v10))
                    goto LABEL_41;
                  v17 = (uint64_t)v18;
                  if ((swift_isUniquelyReferenced_nonNull_native() & 1) != 0)
                  {
                    if ((v2 & 0x8000000000000000) != 0)
                      goto LABEL_32;
                  }
                  else
                  {
                    v7 = sub_1CA0B6058(v7);
                    if ((v2 & 0x8000000000000000) != 0)
                    {
LABEL_32:
                      __break(1u);
                      goto LABEL_33;
                    }
                  }
                  if (v2 >= v7[2])
                    goto LABEL_42;
                }
                *(double *)&v7[v2 + 4] = 1.0 / (double)v17;
              }
              ++v13;

              if (v9 == v13)
              {

                swift_bridgeObjectRelease();
                v8 = v24;
                v2 = v25;
                break;
              }
            }
          }
          ++v10;
        }
        while (v10 != v8);
LABEL_33:
        swift_bridgeObjectRelease();
        v20 = v23;
        goto LABEL_36;
      }
LABEL_35:
      swift_bridgeObjectRelease();
LABEL_36:
      type metadata accessor for MASquareMatrixRepresentation();
      result = swift_allocObject();
      *(_QWORD *)(result + 16) = v20;
      *(_QWORD *)(result + 24) = v27;
      *(_QWORD *)(result + 32) = v7;
      *(_QWORD *)(result + 40) = v1;
      return result;
    }
  }
  else
  {
    v5 = *(_QWORD *)((v28 & 0xFFFFFFFFFFFFFF8) + 0x10);
    result = v5 * v5;
    v27 = v5;
    if ((unsigned __int128)(v5 * (__int128)v5) >> 64 == (v5 * v5) >> 63)
    {
      v7 = (_QWORD *)sub_1CA0B4464(result, 0.0);
      v8 = *(_QWORD *)((v28 & 0xFFFFFFFFFFFFFF8) + 0x10);
      swift_bridgeObjectRetain();
      if (v8)
      {
        v23 = v27;
        v9 = v8;
        goto LABEL_6;
      }
      v20 = v27;
      goto LABEL_35;
    }
  }
  __break(1u);
  return result;
}

unint64_t sub_1CA104170(unint64_t a1)
{
  return MAGraph.adjacencyMatrix(directed:)(a1);
}

unint64_t sub_1CA104190(char a1, double (*a2)(unint64_t), double a3)
{
  return MAGraph.adjacencyWeightedMatrix(directed:repeating:weightedEdges:)(a1, a2, a3);
}

_QWORD *sub_1CA1041B0(uint64_t a1)
{
  return MAGraph.degreeVector(type:)(a1);
}

_QWORD *sub_1CA1041D0(uint64_t a1)
{
  return MAGraph.multiDegreeVector(type:)(a1);
}

unint64_t sub_1CA1041F0(char a1)
{
  return MAGraph.transitionMatrix(directed:)(a1);
}

__n128 MAGraphMatrix.degreeMatrix(type:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  __n128 result;
  __n128 v7;
  uint64_t v8;

  v3 = (*(uint64_t (**)(void))(a3 + 24))();
  MAMatrix.diag()();
  v4 = *(_QWORD *)(v3 + 40);
  swift_bridgeObjectRetain();
  swift_release();
  type metadata accessor for MASquareMatrixRepresentation();
  v5 = swift_allocObject();
  result = v7;
  *(__n128 *)(v5 + 16) = v7;
  *(_QWORD *)(v5 + 32) = v8;
  *(_QWORD *)(v5 + 40) = v4;
  return result;
}

__n128 MAGraphMatrix.multiDegreeMatrix(type:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  __n128 result;
  __n128 v7;
  uint64_t v8;

  v3 = (*(uint64_t (**)(void))(a3 + 32))();
  MAMatrix.diag()();
  v4 = *(_QWORD *)(v3 + 40);
  swift_bridgeObjectRetain();
  swift_release();
  type metadata accessor for MASquareMatrixRepresentation();
  v5 = swift_allocObject();
  result = v7;
  *(__n128 *)(v5 + 16) = v7;
  *(_QWORD *)(v5 + 32) = v8;
  *(_QWORD *)(v5 + 40) = v4;
  return result;
}

double MAGraphMatrix.laplacianMatrix(directed:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  double result;

  *(_QWORD *)&result = sub_1CA104354(a1, a2, a3, (void (*)(__n128 *__return_ptr, __int128 *, __int128 *))static MAMatrix.laplacian(degree:adjacency:)).n128_u64[0];
  return result;
}

double MAGraphMatrix.laplacianWeightedMatrix(directed:repeating:weightedEdges:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, double a6)
{
  double result;

  *(_QWORD *)&result = sub_1CA104460(a1, a2, a3, a4, a5, (void (*)(__n128 *__return_ptr, __int128 *, __int128 *))static MAMatrix.laplacian(degree:adjacency:), a6).n128_u64[0];
  return result;
}

double MAGraphMatrix.normalizedLaplacianMatrix(directed:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  double result;

  *(_QWORD *)&result = sub_1CA104354(a1, a2, a3, (void (*)(__n128 *__return_ptr, __int128 *, __int128 *))static MAMatrix.normalizedLaplacian(degree:adjacency:)).n128_u64[0];
  return result;
}

__n128 sub_1CA104354(uint64_t a1, uint64_t a2, uint64_t a3, void (*a4)(__n128 *__return_ptr, __int128 *, __int128 *))
{
  __n128 v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  __n128 result;
  __n128 v18;
  __int128 v19;
  uint64_t v20;
  __int128 v21;
  uint64_t v22;
  __n128 v23;
  uint64_t v24;

  v8 = MAGraphMatrix.degreeMatrix(type:)(3, a2, a3);
  v10 = v9;
  v11 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, __n128))(a3 + 8))(a1, a2, a3, v8);
  v12 = *(_QWORD *)(v10 + 32);
  v21 = *(_OWORD *)(v10 + 16);
  v22 = v12;
  v13 = *(_QWORD *)(v11 + 32);
  v19 = *(_OWORD *)(v11 + 16);
  v20 = v13;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  a4(&v23, &v21, &v19);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  v18 = v23;
  v14 = v24;
  v15 = *(_QWORD *)(v10 + 40);
  swift_bridgeObjectRetain();
  swift_release();
  type metadata accessor for MAAdjacencyMatrixRepresentation();
  v16 = swift_allocObject();
  *(_BYTE *)(v16 + 48) = a1;
  result = v18;
  *(__n128 *)(v16 + 16) = v18;
  *(_QWORD *)(v16 + 32) = v14;
  *(_QWORD *)(v16 + 40) = v15;
  return result;
}

double MAGraphMatrix.normalizedLaplacianWeightedMatrix(directed:repeating:weightedEdges:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, double a6)
{
  double result;

  *(_QWORD *)&result = sub_1CA104460(a1, a2, a3, a4, a5, (void (*)(__n128 *__return_ptr, __int128 *, __int128 *))static MAMatrix.normalizedLaplacian(degree:adjacency:), a6).n128_u64[0];
  return result;
}

__n128 sub_1CA104460(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, void (*a6)(__n128 *__return_ptr, __int128 *, __int128 *), double a7)
{
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  __n128 result;
  __n128 v23;
  __int128 v24;
  uint64_t v25;
  __int128 v26;
  uint64_t v27;
  __n128 v28;
  uint64_t v29;

  MAGraphMatrix.degreeMatrix(type:)(3, a4, a5);
  v15 = v14;
  v16 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, double))(a5 + 16))(a1, a2, a3, a4, a5, a7);
  v17 = *(_QWORD *)(v15 + 32);
  v26 = *(_OWORD *)(v15 + 16);
  v27 = v17;
  v18 = *(_QWORD *)(v16 + 32);
  v24 = *(_OWORD *)(v16 + 16);
  v25 = v18;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  a6(&v28, &v26, &v24);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  v23 = v28;
  v19 = v29;
  v20 = *(_QWORD *)(v15 + 40);
  swift_bridgeObjectRetain();
  swift_release();
  type metadata accessor for MAAdjacencyMatrixRepresentation();
  v21 = swift_allocObject();
  *(_BYTE *)(v21 + 48) = a1;
  result = v23;
  *(__n128 *)(v21 + 16) = v23;
  *(_QWORD *)(v21 + 32) = v19;
  *(_QWORD *)(v21 + 40) = v20;
  return result;
}

uint64_t MAGraphMatrix.singularDecompositionMatrix(elbowThreshold:directed:)(uint64_t a1, uint64_t a2, uint64_t a3, Swift::Double a4)
{
  _QWORD *v5;
  _QWORD *v6;
  Swift::Int v7;
  Swift::Int v8;
  double *v9;
  uint64_t v10;
  Swift::tuple_U_KnowledgeGraphKit_MAMatrix_W_KnowledgeGraphKit_MAMatrix_V_KnowledgeGraphKit_MAMatrix *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  Swift::Int v15;
  uint64_t v16;
  __int128 v17;
  uint64_t v18;
  uint64_t result;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  __int128 v23;
  uint64_t v24;
  __int128 v25;
  uint64_t v26;
  __int128 v27;
  uint64_t v28;
  __int128 v29;
  uint64_t v30;
  int v31[4];
  uint64_t v32;
  uint64_t v33;

  v33 = *MEMORY[0x1E0C80C00];
  MAGraphMatrix.laplacianMatrix(directed:)(a1, a2, a3);
  v6 = v5;
  v7 = v5[2];
  v8 = v5[3];
  v9 = (double *)v5[4];
  swift_bridgeObjectRetain();
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    v9 = (double *)sub_1CA0B6058(v9);
  v10 = v7 * v8;
  if ((unsigned __int128)(v7 * (__int128)v8) >> 64 != (v7 * v8) >> 63)
  {
    __break(1u);
    goto LABEL_8;
  }
  if (v10 < (uint64_t)0xFFFFFFFF80000000)
  {
LABEL_8:
    __break(1u);
LABEL_9:
    __break(1u);
  }
  if (v10 > 0x7FFFFFFF)
    goto LABEL_9;
  v31[0] = v7 * v8;
  vvfabs(v9 + 4, v9 + 4, v31);
  v24 = v6[5];
  swift_bridgeObjectRetain();
  swift_release();
  MAMatrix.svd()(v11);
  v13 = *(_QWORD *)v31;
  v12 = *(_QWORD *)&v31[2];
  v14 = v32;
  v21 = *((_QWORD *)&v27 + 1);
  v22 = v27;
  v20 = v28;
  *(_OWORD *)v31 = v29;
  v32 = v30;
  v15 = *(_OWORD *)&MAMatrix.elbow(threshold:)(a4);
  MAMatrix.trunc(rows:columns:)(1, v15);
  v16 = v32;
  v17 = *(_OWORD *)v31;
  *(_QWORD *)v31 = v13;
  *(_QWORD *)&v31[2] = v12;
  v32 = v14;
  v29 = v17;
  v30 = v16;
  MAMatrix.diag(rows:columns:)(v7, v8);
  swift_bridgeObjectRelease();
  v25 = v27;
  v26 = v28;
  <*> infix(_:_:)((uint64_t *)v31, &v25, (uint64_t *)&v29);
  swift_bridgeObjectRelease();
  v27 = v29;
  v28 = v30;
  *(_QWORD *)&v25 = v22;
  *((_QWORD *)&v25 + 1) = v21;
  v26 = v20;
  <*> infix(_:_:)((uint64_t *)&v27, &v25, (uint64_t *)v31);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v23 = *(_OWORD *)v31;
  v18 = v32;
  type metadata accessor for MASquareMatrixRepresentation();
  result = swift_allocObject();
  *(_OWORD *)(result + 16) = v23;
  *(_QWORD *)(result + 32) = v18;
  *(_QWORD *)(result + 40) = v24;
  return result;
}

uint64_t dispatch thunk of MAGraphMatrix.adjacencyMatrix(directed:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 8))();
}

uint64_t dispatch thunk of MAGraphMatrix.adjacencyWeightedMatrix(directed:repeating:weightedEdges:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return (*(uint64_t (**)(void))(a5 + 16))();
}

uint64_t dispatch thunk of MAGraphMatrix.degreeVector(type:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 24))();
}

uint64_t dispatch thunk of MAGraphMatrix.multiDegreeVector(type:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 32))();
}

uint64_t dispatch thunk of MAGraphMatrix.transitionMatrix(directed:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 40))();
}

uint64_t SparseMatrix.rows.getter()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + 16);
}

uint64_t SparseMatrix.columns.getter()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + 24);
}

uint64_t sub_1CA104828()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + 32);
}

uint64_t sub_1CA104830(uint64_t result)
{
  uint64_t v1;

  *(_QWORD *)(v1 + 32) = result;
  return result;
}

uint64_t (*sub_1CA104838())()
{
  return nullsub_1;
}

uint64_t SparseMatrix.__allocating_init(rows:columns:)(int64_t a1, int64_t a2)
{
  uint64_t v4;

  v4 = swift_allocObject();
  SparseMatrix.init(rows:columns:)(a1, a2);
  return v4;
}

int64_t SparseMatrix.init(rows:columns:)(int64_t result, int64_t a2)
{
  _QWORD *v2;

  if (result < 1 || a2 < 1)
  {
    __break(1u);
  }
  else
  {
    v2[2] = result;
    v2[3] = a2;
    result = (int64_t)sparse_matrix_create_float(result, a2);
    if (result)
    {
      v2[4] = result;
      return (int64_t)v2;
    }
  }
  __break(1u);
  return result;
}

uint64_t SparseMatrix.deinit()
{
  uint64_t v0;

  sparse_matrix_destroy(*(void **)(v0 + 32));
  return v0;
}

uint64_t SparseMatrix.__deallocating_deinit()
{
  uint64_t v0;

  sparse_matrix_destroy(*(void **)(v0 + 32));
  return swift_deallocClassInstance();
}

uint64_t SparseMatrix.__allocating_init(denseMatrix:)(uint64_t *a1)
{
  uint64_t v1;
  int64_t v2;
  int64_t v3;
  uint64_t v4;
  int64_t v5;
  int32x2_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  int64_t v11;
  uint64_t v12;
  uint64_t result;

  v1 = *a1;
  v2 = a1[1];
  v3 = a1[2];
  type metadata accessor for SparseMatrix();
  v4 = swift_allocObject();
  SparseMatrix.init(rows:columns:)(v2, v3);
  v5 = *(_QWORD *)(v4 + 24);
  swift_retain();
  v6.i32[0] = 0;
  v7 = sub_1CA0B4560(v5, v6);
  v8 = (_QWORD *)sub_1CA0B4554(0, v5);
  swift_bridgeObjectRetain();
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    v7 = (uint64_t)sub_1CA0B6080(v7);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    v8 = sub_1CA0B606C(v8);
    if ((v2 & 0x8000000000000000) == 0)
      goto LABEL_5;
LABEL_15:
    __break(1u);
    goto LABEL_16;
  }
  if (v2 < 0)
    goto LABEL_15;
LABEL_5:
  if (!v2)
  {
LABEL_13:
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_release();
    swift_bridgeObjectRelease_n();
    return v4;
  }
  if ((v5 & 0x8000000000000000) == 0)
  {
    v9 = 0;
    v10 = 1;
    while (1)
    {
      v11 = sparse_pack_vector_float(v5, v5, (const float *)(v1 + 32 + 4 * v9), 1, (float *)(v7 + 32), v8 + 4);
      if (v11 >= 1)
        sparse_insert_row_float(*(sparse_matrix_float *)(v4 + 32), v10 - 1, v11, (const float *)(v7 + 32), v8 + 4);
      if (v2 == v10)
        goto LABEL_13;
      v9 = v10 * v5;
      v12 = (unsigned __int128)(v10++ * (__int128)v5) >> 64;
      if (v12 != v9 >> 63)
      {
        __break(1u);
        goto LABEL_13;
      }
    }
  }
LABEL_16:
  result = sub_1CA1F11BC();
  __break(1u);
  return result;
}

uint64_t type metadata accessor for SparseMatrix()
{
  return objc_opt_self();
}

uint64_t sub_1CA104AF4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t result;

  v1 = *(_QWORD *)(v0 + 16);
  v2 = *(_QWORD *)(v0 + 24);
  result = v1 * v2;
  if ((unsigned __int128)(v1 * (__int128)v2) >> 64 != (v1 * v2) >> 63)
    __break(1u);
  return result;
}

uint64_t sub_1CA104B10()
{
  uint64_t v0;

  return sparse_get_matrix_nonzero_count(*(void **)(v0 + 32));
}

float *sub_1CA104B18(float *result, uint64_t *a2, sparse_index *a3)
{
  sparse_index v4;
  uint64_t v5;
  sparse_index v6;

  v4 = *a3;
  v5 = *a2;
  if (*a3 >= *(_QWORD *)(v5 + 16))
  {
    __break(1u);
  }
  else
  {
    v6 = a3[1];
    if (v6 < *(_QWORD *)(v5 + 24))
      return (float *)(int)sparse_insert_entry_float(*(sparse_matrix_float *)(v5 + 32), *result, v4, v6);
  }
  __break(1u);
  return result;
}

float sub_1CA104B54(sparse_index row, sparse_index column_start)
{
  uint64_t v2;
  sparse_status v4;
  BOOL v5;
  float result;
  sparse_index v7;
  sparse_index column_end;
  float val;
  uint64_t v10;

  v10 = *MEMORY[0x1E0C80C00];
  if (row < 0)
  {
    __break(1u);
LABEL_12:
    __break(1u);
LABEL_13:
    __break(1u);
  }
  if (column_start < 0 || *(_QWORD *)(v2 + 16) <= row)
    goto LABEL_12;
  if (*(_QWORD *)(v2 + 24) <= column_start)
    goto LABEL_13;
  val = 0.0;
  v7 = 0;
  column_end = 0;
  v4 = sparse_extract_sparse_row_float(*(sparse_matrix_float *)(v2 + 32), row, column_start, &column_end, 1uLL, &val, &v7);
  v5 = v7 == column_start && v4 == 1;
  result = val;
  if (!v5)
    return 0.0;
  return result;
}

sparse_index sub_1CA104C10(sparse_index i, sparse_index j, float a3)
{
  uint64_t v3;

  if (*(_QWORD *)(v3 + 16) <= i)
  {
    __break(1u);
  }
  else if (*(_QWORD *)(v3 + 24) > j)
  {
    return sparse_insert_entry_float(*(sparse_matrix_float *)(v3 + 32), a3, i, j);
  }
  __break(1u);
  return i;
}

uint64_t (*sub_1CA104C40(uint64_t a1, sparse_index row, sparse_index column_start))(uint64_t result, char a2)
{
  uint64_t v3;

  *(_QWORD *)(a1 + 8) = column_start;
  *(_QWORD *)(a1 + 16) = v3;
  *(_QWORD *)a1 = row;
  *(float *)(a1 + 24) = sub_1CA104B54(row, column_start);
  return sub_1CA104C80;
}

uint64_t sub_1CA104C80(uint64_t result, char a2)
{
  float v3;
  uint64_t v4;
  sparse_index v5;
  uint64_t v6;
  BOOL v7;
  sparse_index v8;
  sparse_index v9;

  v3 = *(float *)(result + 24);
  v4 = *(_QWORD *)(result + 16);
  v5 = *(_QWORD *)result;
  v6 = *(_QWORD *)(v4 + 16);
  v7 = v6 <= *(_QWORD *)result;
  if ((a2 & 1) != 0)
  {
    if (v6 <= *(_QWORD *)result)
    {
      __break(1u);
      goto LABEL_9;
    }
    v8 = *(_QWORD *)(result + 8);
    v9 = *(_QWORD *)(v4 + 24);
    v7 = v9 <= v8;
    if (v9 > v8)
      return sparse_insert_entry_float(*(sparse_matrix_float *)(v4 + 32), v3, v5, v8);
    __break(1u);
  }
  if (v7)
  {
LABEL_9:
    __break(1u);
    goto LABEL_10;
  }
  v8 = *(_QWORD *)(result + 8);
  if (*(_QWORD *)(v4 + 24) > v8)
    return sparse_insert_entry_float(*(sparse_matrix_float *)(v4 + 32), v3, v5, v8);
LABEL_10:
  __break(1u);
  return result;
}

uint64_t sub_1CA104CE0@<X0>(char **a1@<X8>, int32x2_t a2@<D0>)
{
  uint64_t v2;
  int64_t v4;
  char *v5;
  uint64_t result;
  char *v7;
  sparse_index i;
  sparse_dimension v9;
  uint64_t v10;
  float *v11;
  uint64_t v12;
  sparse_index *v13;
  char **v14;
  sparse_index column_end[2];

  column_end[1] = *MEMORY[0x1E0C80C00];
  v5 = *(char **)(v2 + 16);
  v4 = *(_QWORD *)(v2 + 24);
  if ((unsigned __int128)((uint64_t)v5 * (__int128)v4) >> 64 != ((uint64_t)v5 * v4) >> 63)
  {
LABEL_16:
    __break(1u);
    goto LABEL_17;
  }
  a2.i32[0] = 0;
  result = sub_1CA0B4560((_QWORD)v5 * v4, a2);
  if (*(_QWORD *)(result + 16) != (_QWORD)v5 * v4)
  {
LABEL_17:
    __break(1u);
LABEL_18:
    __break(1u);
  }
  if (((unint64_t)v5 & 0x8000000000000000) != 0)
    goto LABEL_18;
  v7 = (char *)result;
  v14 = a1;
  if (v5)
  {
    for (i = 0; v5 != (char *)i; ++i)
    {
      result = sparse_get_matrix_nonzero_count_for_row(*(void **)(v2 + 32), i);
      if (result >= 1)
      {
        v9 = result;
        v10 = sub_1CA1F0B68();
        *(_QWORD *)(v10 + 16) = v9;
        v11 = (float *)(v10 + 32);
        bzero((void *)(v10 + 32), 4 * v9);
        column_end[0] = 0;
        v12 = sub_1CA1F0B68();
        *(_QWORD *)(v12 + 16) = v9;
        v13 = (sparse_index *)(v12 + 32);
        bzero((void *)(v12 + 32), 8 * v9);
        sparse_extract_sparse_row_float(*(sparse_matrix_float *)(v2 + 32), i, 0, column_end, v9, v11, v13);
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) != 0)
        {
          if (v4 < 0)
            goto LABEL_14;
        }
        else
        {
          v7 = sub_1CA0B6080((uint64_t)v7);
          if (v4 < 0)
          {
LABEL_14:
            result = sub_1CA1F11BC();
            __break(1u);
            break;
          }
        }
        if ((unsigned __int128)(i * (__int128)v4) >> 64 != (i * v4) >> 63)
        {
          __break(1u);
          goto LABEL_16;
        }
        sparse_unpack_vector_float(v4, v9, 0, v11, v13, (float *)&v7[4 * i * v4 + 32], 1);
        swift_bridgeObjectRelease();
        result = swift_bridgeObjectRelease();
      }
    }
  }
  *v14 = v7;
  v14[1] = v5;
  v14[2] = (char *)v4;
  return result;
}

uint64_t static SparseMatrix.* infix(_:_:)@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X1>, char **a3@<X8>, int32x2_t a4@<D0>)
{
  int64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t v10;
  uint64_t result;

  if (*(_QWORD *)(a1 + 24) != a2[1])
  {
    __break(1u);
    goto LABEL_8;
  }
  v6 = a1;
  v4 = a2[2];
  v8 = *(char **)(a1 + 16);
  if ((unsigned __int128)((uint64_t)v8 * (__int128)v4) >> 64 != ((uint64_t)v8 * v4) >> 63)
  {
LABEL_8:
    __break(1u);
    goto LABEL_9;
  }
  v5 = *a2;
  a4.i32[0] = 0;
  v10 = sub_1CA0B4560((_QWORD)v8 * v4, a4);
  if (*(_QWORD *)(v10 + 16) != (_QWORD)v8 * v4)
  {
LABEL_9:
    __break(1u);
LABEL_10:
    v7 = sub_1CA0B6080((uint64_t)v7);
    if ((v4 & 0x8000000000000000) == 0)
      goto LABEL_6;
    goto LABEL_11;
  }
  v7 = (char *)v10;
  swift_bridgeObjectRetain();
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    goto LABEL_10;
  if ((v4 & 0x8000000000000000) == 0)
  {
LABEL_6:
    sparse_matrix_product_dense_float(CblasRowMajor, CblasNoTrans, v4, 1.0, *(sparse_matrix_float *)(v6 + 32), (const float *)(v5 + 32), v4, (float *)v7 + 8, v4);
    result = swift_bridgeObjectRelease();
    *a3 = v7;
    a3[1] = v8;
    a3[2] = (char *)v4;
    return result;
  }
LABEL_11:
  result = sub_1CA1F11BC();
  __break(1u);
  return result;
}

uint64_t static SparseMatrix.* infix(_:_:)@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, char **a3@<X8>, int32x2_t a4@<D0>)
{
  int64_t v4;
  int64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  sparse_dimension v10;
  uint64_t v11;
  uint64_t result;

  v10 = a1[2];
  if (v10 != *(_QWORD *)(a2 + 16))
  {
    __break(1u);
    goto LABEL_10;
  }
  v7 = a2;
  v4 = a1[1];
  v5 = *(_QWORD *)(a2 + 24);
  if ((unsigned __int128)(v4 * (__int128)v5) >> 64 != (v4 * v5) >> 63)
  {
LABEL_10:
    __break(1u);
    goto LABEL_11;
  }
  v6 = *a1;
  a4.i32[0] = 0;
  v11 = sub_1CA0B4560(v4 * v5, a4);
  if (*(_QWORD *)(v11 + 16) != v4 * v5)
  {
LABEL_11:
    __break(1u);
    goto LABEL_12;
  }
  v8 = (char *)v11;
  swift_bridgeObjectRetain();
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) != 0)
  {
    if (v4 < 0)
      goto LABEL_13;
    goto LABEL_6;
  }
LABEL_12:
  v8 = sub_1CA0B6080((uint64_t)v8);
  if (v4 < 0)
    goto LABEL_13;
LABEL_6:
  if ((v10 & 0x8000000000000000) == 0 && (v5 & 0x8000000000000000) == 0)
  {
    sparse_matrix_product_dense_float(CblasColMajor, CblasTrans, v4, 1.0, *(sparse_matrix_float *)(v7 + 32), (const float *)(v6 + 32), v10, (float *)v8 + 8, v5);
    result = swift_bridgeObjectRelease();
    *a3 = v8;
    a3[1] = (char *)v4;
    a3[2] = (char *)v5;
    return result;
  }
LABEL_13:
  result = sub_1CA1F11BC();
  __break(1u);
  return result;
}

uint64_t sub_1CA105174@<X0>(uint64_t result@<X0>, _QWORD *a2@<X8>)
{
  *a2 = *(_QWORD *)(*(_QWORD *)result + 32);
  return result;
}

_QWORD *sub_1CA105184(_QWORD *result, uint64_t a2)
{
  *(_QWORD *)(*(_QWORD *)a2 + 32) = *result;
  return result;
}

void sub_1CA105194(sparse_index *a1@<X1>, float *a2@<X8>)
{
  *a2 = sub_1CA104B54(*a1, a1[1]);
}

uint64_t sub_1CA1051C4()
{
  return 0;
}

uint64_t method lookup function for SparseMatrix()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of SparseMatrix.matrix.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 104))();
}

uint64_t dispatch thunk of SparseMatrix.matrix.setter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 112))();
}

uint64_t dispatch thunk of SparseMatrix.matrix.modify()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 120))();
}

uint64_t dispatch thunk of SparseMatrix.__allocating_init(rows:columns:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 128))();
}

uint64_t dispatch thunk of SparseMatrix.count.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 136))();
}

uint64_t dispatch thunk of SparseMatrix.elementCount.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 144))();
}

uint64_t dispatch thunk of SparseMatrix.subscript.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 152))();
}

uint64_t dispatch thunk of SparseMatrix.subscript.setter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 160))();
}

uint64_t dispatch thunk of SparseMatrix.subscript.modify()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 168))();
}

uint64_t dispatch thunk of SparseMatrix.denseMatrix()()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 176))();
}

uint64_t sub_1CA105254(uint64_t *a1)
{
  uint64_t v2;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v4;
  uint64_t v6[2];

  v2 = *a1;
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  *a1 = v2;
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
    sub_1CA13B4C8();
  v4 = *(_QWORD *)(v2 + 16);
  v6[0] = v2 + 32;
  v6[1] = v4;
  sub_1CA1063F0(v6);
  return sub_1CA1F10D8();
}

_QWORD *MAGraphMatrix.walkMatrix(length:directed:)(uint64_t a1, char a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  BOOL v12;
  uint64_t v13;
  _QWORD *result;

  if (a1 < 2)
  {
LABEL_24:
    __break(1u);
LABEL_25:
    result = (_QWORD *)sub_1CA1F11BC();
    __break(1u);
    return result;
  }
  v5 = a1;
  v6 = (_QWORD *)(*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(a4 + 8))(a2 & 1, a3, a4);
  v7 = v6[3];
  v8 = v6[2];
  swift_bridgeObjectRetain();
  if (v7 == v8)
  {
    v9 = v5 - 1;
    v10 = v8;
    v5 = v8;
    while (1)
    {
      v11 = v8 * v5;
      if ((unsigned __int128)(v8 * (__int128)v5) >> 64 != (v8 * v5) >> 63)
        break;
      if (v11 < 0)
        goto LABEL_25;
      swift_bridgeObjectRetain();
      if (v11)
      {
        v4 = sub_1CA1F0B68();
        *(_QWORD *)(v4 + 16) = v11;
        bzero((void *)(v4 + 32), 8 * v8 * v5);
      }
      else
      {
        v4 = MEMORY[0x1E0DEE9D8];
      }
      if (v8 > 0x7FFFFFFF)
        goto LABEL_20;
      if (v5 > 0x7FFFFFFF)
        goto LABEL_21;
      if (v8 < (uint64_t)0xFFFFFFFF80000000
        || v5 < (uint64_t)0xFFFFFFFF80000000
        || v10 < (uint64_t)0xFFFFFFFF80000000)
      {
        goto LABEL_22;
      }
      if (v10 > 0x7FFFFFFF)
        goto LABEL_23;
      cblas_dgemm_NEWLAPACK();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      if (!--v9)
        goto LABEL_18;
      v10 = v5;
      v12 = v5 == v6[2];
      v5 = v6[3];
      if (!v12)
        goto LABEL_17;
    }
    __break(1u);
LABEL_20:
    __break(1u);
LABEL_21:
    __break(1u);
LABEL_22:
    __break(1u);
LABEL_23:
    __break(1u);
    goto LABEL_24;
  }
LABEL_17:
  __break(1u);
LABEL_18:
  v13 = v6[5];
  swift_bridgeObjectRetain();
  swift_release();
  type metadata accessor for MASquareMatrixRepresentation();
  result = (_QWORD *)swift_allocObject();
  result[2] = v8;
  result[3] = v5;
  result[4] = v4;
  result[5] = v13;
  return result;
}

uint64_t MAGraphMatrix.walkMatrices(length:directed:)(uint64_t a1, char a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  BOOL v16;
  uint64_t result;
  uint64_t v18;

  if (a1 >= 2)
  {
    v5 = (_QWORD *)(*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(a4 + 8))(a2 & 1, a3, a4);
    v18 = MEMORY[0x1E0DEE9D8];
    v6 = v5[3];
    v7 = v5[2];
    swift_bridgeObjectRetain();
    if (v6 == v7)
    {
      v8 = a1 - 1;
      v9 = v7;
      v10 = v7;
      while (1)
      {
        v11 = v7 * v10;
        if ((unsigned __int128)(v7 * (__int128)v10) >> 64 != (v7 * v10) >> 63)
          break;
        if (v11 < 0)
          goto LABEL_28;
        swift_bridgeObjectRetain();
        if (v11)
        {
          v12 = sub_1CA1F0B68();
          *(_QWORD *)(v12 + 16) = v11;
          bzero((void *)(v12 + 32), 8 * v7 * v10);
        }
        else
        {
          v12 = MEMORY[0x1E0DEE9D8];
        }
        if (v7 > 0x7FFFFFFF)
          goto LABEL_23;
        if (v10 > 0x7FFFFFFF)
          goto LABEL_24;
        if (v7 < (uint64_t)0xFFFFFFFF80000000
          || v10 < (uint64_t)0xFFFFFFFF80000000
          || v9 < (uint64_t)0xFFFFFFFF80000000)
        {
          goto LABEL_25;
        }
        if (v9 > 0x7FFFFFFF)
          goto LABEL_26;
        cblas_dgemm_NEWLAPACK();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        v13 = v5[5];
        type metadata accessor for MASquareMatrixRepresentation();
        v14 = (_QWORD *)swift_allocObject();
        v14[2] = v7;
        v14[3] = v10;
        v14[4] = v12;
        v14[5] = v13;
        swift_bridgeObjectRetain();
        v15 = swift_bridgeObjectRetain();
        MEMORY[0x1CAA4A1E0](v15);
        if (*(_QWORD *)((v18 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(_QWORD *)((v18 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1)
          sub_1CA1F0B2C();
        sub_1CA1F0B8C();
        sub_1CA1F0B14();
        if (!--v8)
        {
          swift_release();
          swift_bridgeObjectRelease();
          return v18;
        }
        v9 = v10;
        v16 = v10 == v5[2];
        v10 = v5[3];
        if (!v16)
          goto LABEL_21;
      }
    }
    else
    {
LABEL_21:
      __break(1u);
    }
    __break(1u);
LABEL_23:
    __break(1u);
LABEL_24:
    __break(1u);
LABEL_25:
    __break(1u);
LABEL_26:
    __break(1u);
  }
  __break(1u);
LABEL_28:
  result = sub_1CA1F11BC();
  __break(1u);
  return result;
}

_QWORD *MAGraphMatrix.shortestPathsMatrix(includePaths:directed:)(char a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  unint64_t v4;
  uint64_t v5;
  uint64_t v7;
  int64_t v8;
  _QWORD *v9;
  unint64_t v10;
  uint64_t v11;
  int64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  BOOL v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  unint64_t v21;
  int64_t v22;
  BOOL v23;
  uint64_t v24;
  unint64_t v25;
  double v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  _QWORD *v30;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  char v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  int64_t v40;
  uint64_t v41;
  int64_t v42;
  unint64_t v43;
  int64_t v44;
  uint64_t v45;
  BOOL v46;
  uint64_t v47;
  BOOL v48;
  char v49;
  unint64_t v50;
  unint64_t v51;
  uint64_t v52;

  v5 = a2;
  v7 = (*(uint64_t (**)(uint64_t, void (*)(), _QWORD, uint64_t, double))(a4 + 16))(a2, sub_1CA105E30, 0, a3, INFINITY);
  v8 = *(_QWORD *)(v7 + 24);
  v9 = *(_QWORD **)(v7 + 32);
  v10 = *(_QWORD *)(v7 + 40);
  v11 = v10 >> 62;
  v40 = v8;
  v49 = a1;
  v36 = *(_QWORD *)(v7 + 16);
  v35 = v5;
  if ((a1 & 1) != 0)
  {
    if (v11)
      goto LABEL_40;
    v8 = v10 & 0xFFFFFFFFFFFFFF8;
    v12 = *(_QWORD *)((v10 & 0xFFFFFFFFFFFFFF8) + 0x10);
    v4 = v12 * v12;
    v42 = v12;
    v5 = (unsigned __int128)(v12 * (__int128)v12) >> 64 != (v12 * v12) >> 63;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    if ((v5 & 1) != 0)
      goto LABEL_115;
    v4 = sub_1CA0B4464(v4, 0.0);
    v13 = *(_QWORD *)((v10 & 0xFFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain();
    if (v13)
    {
      while (1)
      {
        v33 = v7;
        v14 = 0;
        v8 = v10 & 0xC000000000000001;
        v45 = v11;
        v47 = v10 & 0xFFFFFFFFFFFFFF8;
LABEL_7:
        if (v8)
          break;
        if ((v14 & 0x8000000000000000) == 0)
        {
          if (v14 >= *(_QWORD *)(v47 + 16))
            goto LABEL_39;
          v15 = v14 + 1;
LABEL_14:
          v51 = v15;
          v16 = v10;
          swift_bridgeObjectRetain();
          v11 = 0;
          v7 = v14 * v42;
          v17 = (unsigned __int128)((uint64_t)v14 * (__int128)v42) >> 64 != (uint64_t)(v14 * v42) >> 63;
          while (1)
          {
            if (v8)
            {
              MEMORY[0x1CAA4A7A4](v11, v16);
              swift_unknownObjectRelease();
              v5 = v11 + 1;
              if (__OFADD__(v11, 1))
                goto LABEL_35;
            }
            else
            {
              v5 = v11 + 1;
              if (__OFADD__(v11, 1))
                goto LABEL_36;
            }
            if (!v4)
              goto LABEL_116;
            if (v17)
              break;
            v10 = v7 + v11;
            if (__OFADD__(v7, v11))
              goto LABEL_33;
            if ((swift_isUniquelyReferenced_nonNull_native() & 1) != 0)
            {
              if ((v10 & 0x8000000000000000) != 0)
                goto LABEL_29;
            }
            else
            {
              v4 = (unint64_t)sub_1CA0B6058((_QWORD *)v4);
              if ((v10 & 0x8000000000000000) != 0)
              {
LABEL_29:
                __break(1u);
                goto LABEL_30;
              }
            }
            if (v10 >= *(_QWORD *)(v4 + 16))
              goto LABEL_34;
            *(double *)(v4 + 8 * v10 + 32) = (double)v11;
            v11 = v5;
            if (v5 == v13)
            {
              v10 = v16;
              swift_bridgeObjectRelease();
              v14 = v51;
              if (v51 != v13)
                goto LABEL_7;
              swift_bridgeObjectRelease();
              v8 = v40;
              v7 = v33;
              v11 = v45;
              goto LABEL_43;
            }
          }
          __break(1u);
LABEL_33:
          __break(1u);
LABEL_34:
          __break(1u);
LABEL_35:
          __break(1u);
LABEL_36:
          __break(1u);
LABEL_37:
          __break(1u);
        }
        __break(1u);
LABEL_39:
        __break(1u);
LABEL_40:
        swift_bridgeObjectRetain_n();
        swift_bridgeObjectRetain();
        v8 = sub_1CA1F1234();
        swift_bridgeObjectRelease();
        v42 = v8;
        if ((unsigned __int128)(v8 * (__int128)v8) >> 64 != (v8 * v8) >> 63)
          goto LABEL_115;
        v4 = sub_1CA0B4464(v8 * v8, 0.0);
        swift_bridgeObjectRetain_n();
        v13 = sub_1CA1F1234();
        swift_bridgeObjectRelease();
        if (!v13)
          goto LABEL_42;
      }
      MEMORY[0x1CAA4A7A4](v14, v10);
      swift_unknownObjectRelease();
      v15 = v14 + 1;
      if (!__OFADD__(v14, 1))
        goto LABEL_14;
      goto LABEL_37;
    }
LABEL_42:
    swift_bridgeObjectRelease();
    v8 = v40;
  }
  else
  {
LABEL_30:
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v4 = 0;
    v42 = 0;
  }
LABEL_43:
  if (v11)
    goto LABEL_112;
  v18 = *(_QWORD *)((v10 & 0xFFFFFFFFFFFFFF8) + 0x10);
  if (v18)
  {
    v37 = v10 & 0xFFFFFFFFFFFFFF8;
    v52 = *(_QWORD *)((v10 & 0xFFFFFFFFFFFFFF8) + 0x10);
    while (1)
    {
      v5 = 0;
      v19 = v10 & 0xC000000000000001;
      v38 = 8 * v8;
      v41 = 4;
      v50 = v10;
      v32 = v18;
      v34 = v7;
      while (v5 != v18)
      {
        if (v52)
        {
          if ((unsigned __int128)(v5 * (__int128)v8) >> 64 != (v5 * v8) >> 63)
            goto LABEL_114;
          swift_bridgeObjectRetain();
          v20 = 0;
          v21 = 0;
          v7 = 32;
          v39 = v5;
LABEL_52:
          if (v19)
          {
            MEMORY[0x1CAA4A7A4](v21, v50);
            swift_unknownObjectRelease();
          }
          else if (v21 >= *(_QWORD *)(v37 + 16))
          {
            goto LABEL_110;
          }
          if (__OFADD__(v21, 1))
          {
LABEL_106:
            __break(1u);
LABEL_107:
            __break(1u);
LABEL_108:
            __break(1u);
LABEL_109:
            __break(1u);
LABEL_110:
            __break(1u);
            break;
          }
          v22 = v21 * v8;
          if ((unsigned __int128)((uint64_t)v21 * (__int128)v8) >> 64 != (uint64_t)(v21 * v8) >> 63)
            goto LABEL_107;
          v10 = v22 + v5;
          if (__OFADD__(v22, v5))
            goto LABEL_108;
          if ((v10 & 0x8000000000000000) != 0)
            goto LABEL_109;
          v48 = (unsigned __int128)((uint64_t)v21 * (__int128)v42) >> 64 != (uint64_t)(v21 * v42) >> 63;
          v43 = v21 + 1;
          v44 = v21 * v42;
          v8 = v21 * v42 + v5;
          v23 = __OFADD__(v21 * v42, v5);
          v46 = v23;
          swift_bridgeObjectRetain();
          v24 = 0;
          v5 = v41;
          do
          {
            if (v19)
            {
              MEMORY[0x1CAA4A7A4](v24, v50);
              swift_unknownObjectRelease();
            }
            if (v20 < 0)
            {
              __break(1u);
LABEL_95:
              __break(1u);
LABEL_96:
              __break(1u);
LABEL_97:
              __break(1u);
LABEL_98:
              __break(1u);
LABEL_99:
              __break(1u);
LABEL_100:
              __break(1u);
LABEL_101:
              __break(1u);
LABEL_102:
              __break(1u);
LABEL_103:
              __break(1u);
LABEL_104:
              __break(1u);
LABEL_105:
              __break(1u);
              goto LABEL_106;
            }
            v25 = v9[2];
            if (v20 + v24 >= v25)
              goto LABEL_95;
            if ((uint64_t)v10 >= (uint64_t)v25)
              goto LABEL_96;
            if (v5 - 4 >= v25)
              goto LABEL_97;
            v26 = *(double *)&v9[v10 + 4] + *(double *)&v9[v5];
            if (v26 < *(double *)((char *)&v9[v24] + v7))
            {
              if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
                v9 = sub_1CA0B6058(v9);
              if ((unint64_t)(v20 + v24) >= v9[2])
                goto LABEL_98;
              *(double *)((char *)&v9[v24] + v7) = v26;
              if ((v49 & 1) != 0)
              {
                if (!v4)
                  goto LABEL_117;
                if (v48)
                  goto LABEL_99;
                if (v46)
                  goto LABEL_100;
                if (v8 < 0)
                  goto LABEL_101;
                if ((unint64_t)v8 >= *(_QWORD *)(v4 + 16))
                  goto LABEL_102;
                v27 = v44 + v24;
                if (__OFADD__(v44, v24))
                  goto LABEL_103;
                v28 = *(_QWORD *)(v4 + 8 * v8 + 32);
                if ((swift_isUniquelyReferenced_nonNull_native() & 1) != 0)
                {
                  if ((v27 & 0x8000000000000000) != 0)
                    goto LABEL_104;
                }
                else
                {
                  v4 = (unint64_t)sub_1CA0B6058((_QWORD *)v4);
                  if ((v27 & 0x8000000000000000) != 0)
                    goto LABEL_104;
                }
                if (v27 >= *(_QWORD *)(v4 + 16))
                  goto LABEL_105;
                *(_QWORD *)(v4 + 8 * v27 + 32) = v28;
              }
            }
            ++v24;
            ++v5;
          }
          while (v52 != v24);
          swift_bridgeObjectRelease();
          v5 = v39;
          v8 = v40;
          v20 += v40;
          v7 += v38;
          v21 = v43;
          if (v43 != v52)
            goto LABEL_52;
          v10 = v50;
          swift_bridgeObjectRelease();
          v18 = v32;
          v7 = v34;
        }
        ++v5;
        v41 += v8;
        if (v5 == v18)
          goto LABEL_90;
      }
      __break(1u);
LABEL_112:
      v8 = v10 & 0xFFFFFFFFFFFFFF8;
      swift_bridgeObjectRetain();
      v5 = sub_1CA1F1234();
      swift_bridgeObjectRelease();
      if (v5 < 0)
      {
        __break(1u);
LABEL_114:
        __break(1u);
LABEL_115:
        __break(1u);
LABEL_116:
        __break(1u);
LABEL_117:
        __break(1u);
      }
      v37 = v8;
      if (!v5)
        break;
      swift_bridgeObjectRetain();
      v52 = sub_1CA1F1234();
      swift_bridgeObjectRelease();
      v8 = v40;
      v18 = v5;
    }
    v8 = v40;
  }
LABEL_90:
  swift_release();
  if ((v49 & 1) != 0 && v4)
  {
    type metadata accessor for MAPathMatrixRepresentation();
    v29 = swift_allocObject();
    *(_BYTE *)(v29 + 48) = v35 & 1;
    *(_QWORD *)(v29 + 16) = v42;
    *(_QWORD *)(v29 + 24) = v42;
    *(_QWORD *)(v29 + 32) = v4;
    *(_QWORD *)(v29 + 40) = v10;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }
  type metadata accessor for MASquareMatrixRepresentation();
  v30 = (_QWORD *)swift_allocObject();
  v30[2] = v36;
  v30[3] = v8;
  v30[4] = v9;
  v30[5] = v10;
  swift_bridgeObjectRelease();
  return v30;
}

void sub_1CA105E30()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  id v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;

  v0 = swift_bridgeObjectRetain();
  v1 = sub_1CA0B5B20(v0);
  swift_bridgeObjectRelease();
  v6 = v1;
  sub_1CA105254(&v6);
  v2 = v6;
  if ((v6 & 0x8000000000000000) == 0 && (v6 & 0x4000000000000000) == 0)
  {
    if (*(_QWORD *)(v6 + 16))
      goto LABEL_4;
LABEL_9:
    swift_release();
    __break(1u);
    goto LABEL_10;
  }
  swift_bridgeObjectRetain();
  v5 = sub_1CA1F1234();
  swift_release();
  if (!v5)
    goto LABEL_9;
LABEL_4:
  if ((v2 & 0xC000000000000001) != 0)
  {
LABEL_10:
    v3 = (id)MEMORY[0x1CAA4A7A4](0, v2);
    goto LABEL_7;
  }
  if (*(_QWORD *)(v2 + 16))
  {
    v3 = *(id *)(v2 + 32);
LABEL_7:
    v4 = v3;
    swift_release();
    objc_msgSend(v4, sel_weight);

    return;
  }
  __break(1u);
  swift_release();
  __break(1u);
}

_QWORD *MAGraphMatrix.randomWalkMatrix(length:directed:)(uint64_t a1, char a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  BOOL v12;
  uint64_t v13;
  _QWORD *result;

  if (a1 < 2)
  {
LABEL_24:
    __break(1u);
LABEL_25:
    result = (_QWORD *)sub_1CA1F11BC();
    __break(1u);
    return result;
  }
  v5 = a1;
  v6 = (_QWORD *)(*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(a4 + 40))(a2 & 1, a3, a4);
  v7 = v6[3];
  v8 = v6[2];
  swift_bridgeObjectRetain();
  if (v7 == v8)
  {
    v9 = v5 - 1;
    v10 = v8;
    v5 = v8;
    while (1)
    {
      v11 = v8 * v5;
      if ((unsigned __int128)(v8 * (__int128)v5) >> 64 != (v8 * v5) >> 63)
        break;
      if (v11 < 0)
        goto LABEL_25;
      swift_bridgeObjectRetain();
      if (v11)
      {
        v4 = sub_1CA1F0B68();
        *(_QWORD *)(v4 + 16) = v11;
        bzero((void *)(v4 + 32), 8 * v8 * v5);
      }
      else
      {
        v4 = MEMORY[0x1E0DEE9D8];
      }
      if (v8 > 0x7FFFFFFF)
        goto LABEL_20;
      if (v5 > 0x7FFFFFFF)
        goto LABEL_21;
      if (v8 < (uint64_t)0xFFFFFFFF80000000
        || v5 < (uint64_t)0xFFFFFFFF80000000
        || v10 < (uint64_t)0xFFFFFFFF80000000)
      {
        goto LABEL_22;
      }
      if (v10 > 0x7FFFFFFF)
        goto LABEL_23;
      cblas_dgemm_NEWLAPACK();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      if (!--v9)
        goto LABEL_18;
      v10 = v5;
      v12 = v5 == v6[2];
      v5 = v6[3];
      if (!v12)
        goto LABEL_17;
    }
    __break(1u);
LABEL_20:
    __break(1u);
LABEL_21:
    __break(1u);
LABEL_22:
    __break(1u);
LABEL_23:
    __break(1u);
    goto LABEL_24;
  }
LABEL_17:
  __break(1u);
LABEL_18:
  v13 = v6[5];
  swift_bridgeObjectRetain();
  swift_release();
  type metadata accessor for MASquareMatrixRepresentation();
  result = (_QWORD *)swift_allocObject();
  result[2] = v8;
  result[3] = v5;
  result[4] = v4;
  result[5] = v13;
  return result;
}

uint64_t MAGraphMatrix.randomWalkMatrices(length:directed:)(uint64_t a1, char a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  BOOL v16;
  uint64_t result;
  uint64_t v18;

  if (a1 >= 2)
  {
    v5 = (_QWORD *)(*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(a4 + 40))(a2 & 1, a3, a4);
    v18 = MEMORY[0x1E0DEE9D8];
    v6 = v5[3];
    v7 = v5[2];
    swift_bridgeObjectRetain();
    if (v6 == v7)
    {
      v8 = a1 - 1;
      v9 = v7;
      v10 = v7;
      while (1)
      {
        v11 = v7 * v10;
        if ((unsigned __int128)(v7 * (__int128)v10) >> 64 != (v7 * v10) >> 63)
          break;
        if (v11 < 0)
          goto LABEL_28;
        swift_bridgeObjectRetain();
        if (v11)
        {
          v12 = sub_1CA1F0B68();
          *(_QWORD *)(v12 + 16) = v11;
          bzero((void *)(v12 + 32), 8 * v7 * v10);
        }
        else
        {
          v12 = MEMORY[0x1E0DEE9D8];
        }
        if (v7 > 0x7FFFFFFF)
          goto LABEL_23;
        if (v10 > 0x7FFFFFFF)
          goto LABEL_24;
        if (v7 < (uint64_t)0xFFFFFFFF80000000
          || v10 < (uint64_t)0xFFFFFFFF80000000
          || v9 < (uint64_t)0xFFFFFFFF80000000)
        {
          goto LABEL_25;
        }
        if (v9 > 0x7FFFFFFF)
          goto LABEL_26;
        cblas_dgemm_NEWLAPACK();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        v13 = v5[5];
        type metadata accessor for MASquareMatrixRepresentation();
        v14 = (_QWORD *)swift_allocObject();
        v14[2] = v7;
        v14[3] = v10;
        v14[4] = v12;
        v14[5] = v13;
        swift_bridgeObjectRetain();
        v15 = swift_bridgeObjectRetain();
        MEMORY[0x1CAA4A1E0](v15);
        if (*(_QWORD *)((v18 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(_QWORD *)((v18 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1)
          sub_1CA1F0B2C();
        sub_1CA1F0B8C();
        sub_1CA1F0B14();
        if (!--v8)
        {
          swift_release();
          swift_bridgeObjectRelease();
          return v18;
        }
        v9 = v10;
        v16 = v10 == v5[2];
        v10 = v5[3];
        if (!v16)
          goto LABEL_21;
      }
    }
    else
    {
LABEL_21:
      __break(1u);
    }
    __break(1u);
LABEL_23:
    __break(1u);
LABEL_24:
    __break(1u);
LABEL_25:
    __break(1u);
LABEL_26:
    __break(1u);
  }
  __break(1u);
LABEL_28:
  result = sub_1CA1F11BC();
  __break(1u);
  return result;
}

void sub_1CA1063F0(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  void *v15;
  id v16;
  id v17;
  float v18;
  float v19;
  float v20;
  float v21;
  id *v22;
  void *v23;
  id v24;
  id v25;
  float v26;
  float v27;
  float v28;
  float v29;
  uint64_t *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  void *v37;
  uint64_t v38;
  uint64_t v39;
  void *v40;
  id v41;
  id v42;
  float v43;
  float v44;
  float v45;
  float v46;
  void *v47;
  unint64_t v48;
  unint64_t v49;
  char *v50;
  char *v51;
  unint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  char v56;
  char *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  BOOL v63;
  unint64_t v64;
  char *v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  char *v70;
  uint64_t v71;
  uint64_t v72;
  BOOL v73;
  uint64_t v74;
  char v75;
  char *v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  BOOL v80;
  uint64_t v81;
  uint64_t v82;
  char *v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  char *v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  unint64_t v91;
  uint64_t v92;
  char *v93;
  char *v94;
  uint64_t v95;
  char *v96;
  unint64_t v97;
  char *v98;
  uint64_t v99;
  uint64_t v100;
  unint64_t v101;
  char *v102;
  uint64_t v103;
  unint64_t v104;
  char *v105;
  uint64_t v106;
  uint64_t v107;
  char *v108;
  unint64_t v109;
  uint64_t *v110;
  uint64_t v111;
  uint64_t v112;
  char *v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  void **v118;
  uint64_t v119;

  v2 = v1;
  v4 = a1[1];
  v5 = sub_1CA1F12A0();
  if (v5 >= v4)
  {
    if (v4 < 0)
      goto LABEL_132;
    if (v4)
      sub_1CA0DDBC8(0, v4, 1, a1);
    return;
  }
  if (v4 >= 0)
    v6 = v4;
  else
    v6 = v4 + 1;
  if (v4 < -1)
    goto LABEL_140;
  v7 = v5;
  v110 = a1;
  if (v4 < 2)
  {
    v10 = (char *)MEMORY[0x1E0DEE9D8];
    v119 = MEMORY[0x1E0DEE9D8];
    v118 = (void **)((MEMORY[0x1E0DEE9D8] & 0xFFFFFFFFFFFFFF8) + 32);
    if (v4 != 1)
    {
      v13 = *(_QWORD *)(MEMORY[0x1E0DEE9D8] + 16);
LABEL_98:
      v102 = v10;
      if (v13 >= 2)
      {
        v103 = *v110;
        do
        {
          v104 = v13 - 2;
          if (v13 < 2)
            goto LABEL_127;
          if (!v103)
            goto LABEL_139;
          v105 = v102;
          v106 = *(_QWORD *)&v102[16 * v104 + 32];
          v107 = *(_QWORD *)&v102[16 * v13 + 24];
          sub_1CA0DDF28((void **)(v103 + 8 * v106), (id *)(v103 + 8 * *(_QWORD *)&v102[16 * v13 + 16]), v103 + 8 * v107, v118);
          if (v2)
            break;
          if (v107 < v106)
            goto LABEL_128;
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
            v105 = sub_1CA13B478((uint64_t)v105);
          if (v104 >= *((_QWORD *)v105 + 2))
            goto LABEL_129;
          v108 = &v105[16 * v104 + 32];
          *(_QWORD *)v108 = v106;
          *((_QWORD *)v108 + 1) = v107;
          v109 = *((_QWORD *)v105 + 2);
          if (v13 > v109)
            goto LABEL_130;
          memmove(&v105[16 * v13 + 16], &v105[16 * v13 + 32], 16 * (v109 - v13));
          v102 = v105;
          *((_QWORD *)v105 + 2) = v109 - 1;
          v13 = v109 - 1;
        }
        while (v109 > 2);
      }
LABEL_95:
      swift_bridgeObjectRelease();
      *(_QWORD *)((v119 & 0xFFFFFFFFFFFFF8) + 0x10) = 0;
      sub_1CA1F0B14();
      swift_bridgeObjectRelease();
      return;
    }
  }
  else
  {
    v8 = v6 >> 1;
    sub_1CA106B48();
    v9 = sub_1CA1F0B68();
    *(_QWORD *)((v9 & 0xFFFFFFFFFFFFFF8) + 0x10) = v8;
    v118 = (void **)((v9 & 0xFFFFFFFFFFFFFF8) + 32);
    v119 = v9;
  }
  v114 = v7;
  v11 = 0;
  v12 = *a1;
  v111 = *a1 - 8;
  v112 = *a1 + 16;
  v10 = (char *)MEMORY[0x1E0DEE9D8];
  v115 = v4;
  while (1)
  {
    v14 = v11++;
    v116 = v14;
    if (v11 < v4)
    {
      v15 = *(void **)(v12 + 8 * v14);
      v16 = *(id *)(v12 + 8 * v11);
      v17 = v15;
      objc_msgSend(v16, sel_weight);
      v19 = v18;
      objc_msgSend(v17, sel_weight);
      v21 = v20;

      v11 = v14 + 2;
      if (v14 + 2 < v4)
      {
        v22 = (id *)(v112 + 8 * v14);
        while (1)
        {
          v23 = *(v22 - 1);
          v24 = *v22;
          v25 = v23;
          objc_msgSend(v24, sel_weight);
          v27 = v26;
          objc_msgSend(v25, sel_weight);
          v29 = v28;

          if (v19 < v21 == v27 >= v29)
            break;
          ++v11;
          ++v22;
          if (v4 == v11)
          {
            v11 = v4;
            break;
          }
        }
        v14 = v116;
      }
      if (v19 < v21)
      {
        if (v11 < v14)
          goto LABEL_133;
        if (v14 < v11)
        {
          v30 = (uint64_t *)(v111 + 8 * v11);
          v31 = v11;
          v32 = v14;
          v33 = (uint64_t *)(v12 + 8 * v14);
          do
          {
            if (v32 != --v31)
            {
              if (!v12)
                goto LABEL_138;
              v34 = *v33;
              *v33 = *v30;
              *v30 = v34;
            }
            ++v32;
            --v30;
            ++v33;
          }
          while (v32 < v31);
        }
      }
    }
    if (v11 >= v4)
      goto LABEL_47;
    if (__OFSUB__(v11, v14))
      goto LABEL_131;
    if (v11 - v14 >= v114)
      goto LABEL_47;
    if (__OFADD__(v14, v114))
      goto LABEL_134;
    v35 = v14 + v114 >= v4 ? v4 : v14 + v114;
    if (v35 < v14)
      break;
    if (v11 != v35)
    {
      v113 = v10;
      v36 = v111 + 8 * v11;
      do
      {
        v37 = *(void **)(v12 + 8 * v11);
        v38 = v14;
        v39 = v36;
        do
        {
          v40 = *(void **)v39;
          v41 = v37;
          v42 = v40;
          objc_msgSend(v41, sel_weight);
          v44 = v43;
          objc_msgSend(v42, sel_weight);
          v46 = v45;

          if (v44 >= v46)
            break;
          if (!v12)
            goto LABEL_136;
          v47 = *(void **)v39;
          v37 = *(void **)(v39 + 8);
          *(_QWORD *)v39 = v37;
          *(_QWORD *)(v39 + 8) = v47;
          v39 -= 8;
          ++v38;
        }
        while (v11 != v38);
        ++v11;
        v36 += 8;
        v14 = v116;
      }
      while (v11 != v35);
      v11 = v35;
      v10 = v113;
    }
LABEL_47:
    if (v11 < v14)
      goto LABEL_126;
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      v10 = sub_1CA13B230(0, *((_QWORD *)v10 + 2) + 1, 1, v10);
    v49 = *((_QWORD *)v10 + 2);
    v48 = *((_QWORD *)v10 + 3);
    v13 = v49 + 1;
    if (v49 >= v48 >> 1)
      v10 = sub_1CA13B230((char *)(v48 > 1), v49 + 1, 1, v10);
    *((_QWORD *)v10 + 2) = v13;
    v50 = v10 + 32;
    v51 = &v10[16 * v49 + 32];
    *(_QWORD *)v51 = v14;
    *((_QWORD *)v51 + 1) = v11;
    if (v49)
    {
      v117 = v11;
      while (1)
      {
        v52 = v13 - 1;
        if (v13 >= 4)
        {
          v57 = &v50[16 * v13];
          v58 = *((_QWORD *)v57 - 8);
          v59 = *((_QWORD *)v57 - 7);
          v63 = __OFSUB__(v59, v58);
          v60 = v59 - v58;
          if (v63)
            goto LABEL_115;
          v62 = *((_QWORD *)v57 - 6);
          v61 = *((_QWORD *)v57 - 5);
          v63 = __OFSUB__(v61, v62);
          v55 = v61 - v62;
          v56 = v63;
          if (v63)
            goto LABEL_116;
          v64 = v13 - 2;
          v65 = &v50[16 * v13 - 32];
          v67 = *(_QWORD *)v65;
          v66 = *((_QWORD *)v65 + 1);
          v63 = __OFSUB__(v66, v67);
          v68 = v66 - v67;
          if (v63)
            goto LABEL_118;
          v63 = __OFADD__(v55, v68);
          v69 = v55 + v68;
          if (v63)
            goto LABEL_121;
          if (v69 >= v60)
          {
            v87 = &v50[16 * v52];
            v89 = *(_QWORD *)v87;
            v88 = *((_QWORD *)v87 + 1);
            v63 = __OFSUB__(v88, v89);
            v90 = v88 - v89;
            if (v63)
              goto LABEL_125;
            v80 = v55 < v90;
            goto LABEL_85;
          }
        }
        else
        {
          if (v13 != 3)
          {
            v81 = *((_QWORD *)v10 + 4);
            v82 = *((_QWORD *)v10 + 5);
            v63 = __OFSUB__(v82, v81);
            v74 = v82 - v81;
            v75 = v63;
            goto LABEL_79;
          }
          v54 = *((_QWORD *)v10 + 4);
          v53 = *((_QWORD *)v10 + 5);
          v63 = __OFSUB__(v53, v54);
          v55 = v53 - v54;
          v56 = v63;
        }
        if ((v56 & 1) != 0)
          goto LABEL_117;
        v64 = v13 - 2;
        v70 = &v50[16 * v13 - 32];
        v72 = *(_QWORD *)v70;
        v71 = *((_QWORD *)v70 + 1);
        v73 = __OFSUB__(v71, v72);
        v74 = v71 - v72;
        v75 = v73;
        if (v73)
          goto LABEL_120;
        v76 = &v50[16 * v52];
        v78 = *(_QWORD *)v76;
        v77 = *((_QWORD *)v76 + 1);
        v63 = __OFSUB__(v77, v78);
        v79 = v77 - v78;
        if (v63)
          goto LABEL_123;
        if (__OFADD__(v74, v79))
          goto LABEL_124;
        if (v74 + v79 >= v55)
        {
          v80 = v55 < v79;
LABEL_85:
          if (v80)
            v52 = v64;
          goto LABEL_87;
        }
LABEL_79:
        if ((v75 & 1) != 0)
          goto LABEL_119;
        v83 = &v50[16 * v52];
        v85 = *(_QWORD *)v83;
        v84 = *((_QWORD *)v83 + 1);
        v63 = __OFSUB__(v84, v85);
        v86 = v84 - v85;
        if (v63)
          goto LABEL_122;
        if (v86 < v74)
          goto LABEL_14;
LABEL_87:
        v91 = v52 - 1;
        if (v52 - 1 >= v13)
        {
          __break(1u);
LABEL_112:
          __break(1u);
LABEL_113:
          __break(1u);
LABEL_114:
          __break(1u);
LABEL_115:
          __break(1u);
LABEL_116:
          __break(1u);
LABEL_117:
          __break(1u);
LABEL_118:
          __break(1u);
LABEL_119:
          __break(1u);
LABEL_120:
          __break(1u);
LABEL_121:
          __break(1u);
LABEL_122:
          __break(1u);
LABEL_123:
          __break(1u);
LABEL_124:
          __break(1u);
LABEL_125:
          __break(1u);
LABEL_126:
          __break(1u);
LABEL_127:
          __break(1u);
LABEL_128:
          __break(1u);
LABEL_129:
          __break(1u);
LABEL_130:
          __break(1u);
LABEL_131:
          __break(1u);
LABEL_132:
          __break(1u);
LABEL_133:
          __break(1u);
LABEL_134:
          __break(1u);
          goto LABEL_135;
        }
        v92 = v12;
        if (!v12)
          goto LABEL_137;
        v93 = v10;
        v94 = &v50[16 * v91];
        v95 = *(_QWORD *)v94;
        v96 = v50;
        v97 = v52;
        v98 = &v50[16 * v52];
        v99 = *((_QWORD *)v98 + 1);
        v100 = v92;
        sub_1CA0DDF28((void **)(v92 + 8 * *(_QWORD *)v94), (id *)(v92 + 8 * *(_QWORD *)v98), v92 + 8 * v99, v118);
        if (v1)
          goto LABEL_95;
        if (v99 < v95)
          goto LABEL_112;
        if (v97 > *((_QWORD *)v93 + 2))
          goto LABEL_113;
        *(_QWORD *)v94 = v95;
        *(_QWORD *)&v96[16 * v91 + 8] = v99;
        v101 = *((_QWORD *)v93 + 2);
        if (v97 >= v101)
          goto LABEL_114;
        v10 = v93;
        v13 = v101 - 1;
        memmove(v98, v98 + 16, 16 * (v101 - 1 - v97));
        v50 = v96;
        *((_QWORD *)v93 + 2) = v101 - 1;
        v12 = v100;
        v11 = v117;
        if (v101 <= 2)
          goto LABEL_14;
      }
    }
    v13 = 1;
LABEL_14:
    v4 = v115;
    if (v11 >= v115)
    {
      v2 = v1;
      goto LABEL_98;
    }
  }
LABEL_135:
  __break(1u);
LABEL_136:
  __break(1u);
LABEL_137:
  __break(1u);
LABEL_138:
  __break(1u);
LABEL_139:
  __break(1u);
LABEL_140:
  sub_1CA1F11BC();
  __break(1u);
}

unint64_t sub_1CA106B48()
{
  unint64_t result;

  result = qword_1EF936F60;
  if (!qword_1EF936F60)
  {
    objc_opt_self();
    result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&qword_1EF936F60);
  }
  return result;
}

uint64_t sub_1CA106B84(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  _QWORD *v5;

  v5[6] = a4;
  v5[7] = v4;
  v5[4] = a2;
  v5[5] = a3;
  v5[3] = a1;
  return swift_task_switch();
}

uint64_t sub_1CA106BA4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  _QWORD *v4;

  v1 = *(_QWORD *)(v0 + 56);
  v2 = swift_allocObject();
  *(_QWORD *)(v0 + 64) = v2;
  *(_OWORD *)(v2 + 16) = *(_OWORD *)(v0 + 40);
  v3 = (_QWORD *)swift_task_alloc();
  v3[2] = v1;
  v3[3] = &unk_1EF938CE0;
  v3[4] = v2;
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EF938CE8);
  sub_1CA1F0E44();
  swift_task_dealloc();
  *(_QWORD *)(v0 + 72) = *(_QWORD *)(v0 + 16);
  v4 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v0 + 80) = v4;
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EF937438);
  *v4 = v0;
  v4[1] = sub_1CA106CB4;
  return sub_1CA1F0C64();
}

uint64_t sub_1CA106CB4()
{
  uint64_t v0;
  uint64_t v1;

  *(_QWORD *)(*(_QWORD *)v1 + 88) = v0;
  swift_task_dealloc();
  return swift_task_switch();
}

uint64_t sub_1CA106D18()
{
  uint64_t v0;
  char isEscapingClosureAtFileLocation;
  uint64_t result;

  swift_release();
  isEscapingClosureAtFileLocation = swift_isEscapingClosureAtFileLocation();
  result = swift_release();
  if ((isEscapingClosureAtFileLocation & 1) == 0)
    return (*(uint64_t (**)(void))(v0 + 8))();
  __break(1u);
  return result;
}

uint64_t sub_1CA106D80()
{
  uint64_t v0;

  swift_release();
  swift_release();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1CA106DBC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;

  v5 = sub_1CA1F0C58();
  v6 = *(_QWORD *)(v5 - 8);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v6 + 48))(a1, 1, v5) != 1)
  {
    sub_1CA1F0C4C();
    (*(void (**)(uint64_t, uint64_t))(v6 + 8))(a1, v5);
    if (!*(_QWORD *)(a3 + 16))
      return swift_task_create();
    goto LABEL_3;
  }
  sub_1CA0BB378(a1);
  if (*(_QWORD *)(a3 + 16))
  {
LABEL_3:
    swift_getObjectType();
    swift_unknownObjectRetain();
    sub_1CA1F0C34();
    swift_unknownObjectRelease();
  }
  return swift_task_create();
}

uint64_t GraphManager.__allocating_init(at:entityFactory:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;

  v6 = swift_allocObject();
  swift_defaultActor_initialize();
  *(_QWORD *)(v6 + OBJC_IVAR____TtC17KnowledgeGraphKit12GraphManager__storeManager) = 0;
  v7 = v6 + OBJC_IVAR____TtC17KnowledgeGraphKit12GraphManager_url;
  v8 = sub_1CA1F0808();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 32))(v7, a1, v8);
  v9 = (_QWORD *)(v6 + OBJC_IVAR____TtC17KnowledgeGraphKit12GraphManager_entityFactory);
  *v9 = a2;
  v9[1] = a3;
  return v6;
}

uint64_t GraphManager.init(at:entityFactory:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;

  swift_defaultActor_initialize();
  *(_QWORD *)(v3 + OBJC_IVAR____TtC17KnowledgeGraphKit12GraphManager__storeManager) = 0;
  v7 = v3 + OBJC_IVAR____TtC17KnowledgeGraphKit12GraphManager_url;
  v8 = sub_1CA1F0808();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 32))(v7, a1, v8);
  v9 = (_QWORD *)(v3 + OBJC_IVAR____TtC17KnowledgeGraphKit12GraphManager_entityFactory);
  *v9 = a2;
  v9[1] = a3;
  return v3;
}

uint64_t GraphManager.deinit()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  __n128 v17;
  char *v18;
  void (*v19)(char *, uint64_t, uint64_t, double);
  NSObject *v20;
  os_log_type_t v21;
  uint8_t *v22;
  uint64_t v23;
  unint64_t v24;
  void (*v25)(char *, uint64_t);
  uint8_t *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  uint64_t v32;
  __n128 v33;
  _QWORD v35[2];
  uint8_t *v36;
  uint64_t v37;
  void (*v38)(uint64_t, char *, uint64_t);
  uint64_t v39;
  char *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;

  v1 = v0;
  v2 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EF937440);
  MEMORY[0x1E0C80A78](v2, v3);
  v5 = (char *)v35 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = sub_1CA1F0808();
  v7 = *(_QWORD *)(v6 - 8);
  MEMORY[0x1E0C80A78](v6, v8);
  MEMORY[0x1E0C80A78](v9, v10);
  v12 = (char *)v35 - v11;
  v17.n128_f64[0] = MEMORY[0x1E0C80A78](v13, v14);
  v18 = (char *)v35 - v15;
  if (*(_QWORD *)(v0 + OBJC_IVAR____TtC17KnowledgeGraphKit12GraphManager__storeManager))
  {
    v39 = v16;
    v40 = v5;
    v41 = OBJC_IVAR____TtC17KnowledgeGraphKit12GraphManager__storeManager;
    v19 = *(void (**)(char *, uint64_t, uint64_t, double))(v7 + 16);
    v19((char *)v35 - v15, v1 + OBJC_IVAR____TtC17KnowledgeGraphKit12GraphManager_url, v6, v17.n128_f64[0]);
    v38 = (void (*)(uint64_t, char *, uint64_t))v19;
    ((void (*)(char *, char *, uint64_t))v19)(v12, v18, v6);
    sub_1CA0AB910(0, &qword_1EF937520);
    v20 = sub_1CA1F0E98();
    v21 = sub_1CA1F0DFC();
    if (os_log_type_enabled(v20, v21))
    {
      v22 = (uint8_t *)swift_slowAlloc();
      v37 = swift_slowAlloc();
      v43 = v37;
      v36 = v22;
      *(_DWORD *)v22 = 136315138;
      v35[1] = v22 + 4;
      sub_1CA109A30();
      v23 = sub_1CA1F12AC();
      v42 = sub_1CA1093F0(v23, v24, &v43);
      sub_1CA1F0ED4();
      swift_bridgeObjectRelease();
      v25 = *(void (**)(char *, uint64_t))(v7 + 8);
      v25(v12, v6);
      v26 = v36;
      _os_log_impl(&dword_1CA0A5000, v20, v21, "invalidate() wasn't called on GraphManager before deallocating it, asynchronously releasing from deinit the manager for graph store %s", v36, 0xCu);
      v27 = v37;
      swift_arrayDestroy();
      MEMORY[0x1CAA4BBE4](v27, -1, -1);
      MEMORY[0x1CAA4BBE4](v26, -1, -1);

    }
    else
    {

      v25 = *(void (**)(char *, uint64_t))(v7 + 8);
      v25(v12, v6);
    }
    v28 = sub_1CA1F0C58();
    v29 = (uint64_t)v40;
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v28 - 8) + 56))(v40, 1, 1, v28);
    v30 = v39;
    v38(v39, v18, v6);
    v31 = (*(unsigned __int8 *)(v7 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80);
    v32 = swift_allocObject();
    *(_QWORD *)(v32 + 16) = 0;
    *(_QWORD *)(v32 + 24) = 0;
    (*(void (**)(unint64_t, uint64_t, uint64_t))(v7 + 32))(v32 + v31, v30, v6);
    sub_1CA107754(v29, (uint64_t)&unk_1EF938AF8, v32);
    swift_release();
    v25(v18, v6);
    ((void (*)(uint64_t, uint64_t, __n128))v25)(v1 + OBJC_IVAR____TtC17KnowledgeGraphKit12GraphManager_url, v6, v33);
  }
  else
  {
    (*(void (**)(uint64_t, uint64_t, __n128))(v7 + 8))(v0 + OBJC_IVAR____TtC17KnowledgeGraphKit12GraphManager_url, v6, v17);
  }
  swift_unknownObjectRelease();
  swift_release();
  swift_defaultActor_destroy();
  return v1;
}

uint64_t sub_1CA107370(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v4;
  uint64_t v5;

  v4[3] = a4;
  v5 = sub_1CA1F0808();
  v4[4] = v5;
  v4[5] = *(_QWORD *)(v5 - 8);
  v4[6] = swift_task_alloc();
  return swift_task_switch();
}

uint64_t sub_1CA1073D0()
{
  uint64_t v0;
  _QWORD *v1;

  if (qword_1EF936EA0 != -1)
    swift_once();
  v1 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v0 + 56) = v1;
  *v1 = v0;
  v1[1] = sub_1CA10744C;
  return sub_1CA0B9E8C(*(_QWORD *)(v0 + 24));
}

uint64_t sub_1CA10744C()
{
  swift_task_dealloc();
  return swift_task_switch();
}

uint64_t sub_1CA1074A0()
{
  uint64_t v0;
  NSObject *v1;
  os_log_type_t v2;
  uint64_t v3;
  uint8_t *v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  (*(void (**)(_QWORD, _QWORD, _QWORD))(*(_QWORD *)(v0 + 40) + 16))(*(_QWORD *)(v0 + 48), *(_QWORD *)(v0 + 24), *(_QWORD *)(v0 + 32));
  sub_1CA0AB910(0, &qword_1EF937520);
  v1 = sub_1CA1F0E98();
  v2 = sub_1CA1F0DFC();
  if (os_log_type_enabled(v1, v2))
  {
    v12 = *(_QWORD *)(v0 + 48);
    v13 = *(_QWORD *)(v0 + 40);
    v3 = *(_QWORD *)(v0 + 32);
    v4 = (uint8_t *)swift_slowAlloc();
    v5 = swift_slowAlloc();
    v14 = v5;
    *(_DWORD *)v4 = 136315138;
    sub_1CA109A30();
    v6 = sub_1CA1F12AC();
    *(_QWORD *)(v0 + 16) = sub_1CA1093F0(v6, v7, &v14);
    sub_1CA1F0ED4();
    swift_bridgeObjectRelease();
    (*(void (**)(uint64_t, uint64_t))(v13 + 8))(v12, v3);
    _os_log_impl(&dword_1CA0A5000, v1, v2, "Asynchronously released manager for graph store %s", v4, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x1CAA4BBE4](v5, -1, -1);
    MEMORY[0x1CAA4BBE4](v4, -1, -1);

  }
  else
  {
    v9 = *(_QWORD *)(v0 + 40);
    v8 = *(_QWORD *)(v0 + 48);
    v10 = *(_QWORD *)(v0 + 32);

    (*(void (**)(uint64_t, uint64_t))(v9 + 8))(v8, v10);
  }
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1CA10765C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;

  v1 = sub_1CA1F0808();
  v2 = *(_QWORD *)(v1 - 8);
  v3 = (*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  swift_unknownObjectRelease();
  (*(void (**)(unint64_t, uint64_t))(v2 + 8))(v0 + v3, v1);
  return swift_deallocObject();
}

uint64_t sub_1CA1076D0(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;

  v4 = *(unsigned __int8 *)(*(_QWORD *)(sub_1CA1F0808() - 8) + 80);
  v5 = *(_QWORD *)(v1 + 16);
  v6 = *(_QWORD *)(v1 + 24);
  v7 = v1 + ((v4 + 32) & ~v4);
  v8 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v2 + 16) = v8;
  *v8 = v2;
  v8[1] = sub_1CA0B90F0;
  return sub_1CA107370(a1, v5, v6, v7);
}

uint64_t sub_1CA107754(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v6 = sub_1CA1F0C58();
  v7 = *(_QWORD *)(v6 - 8);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a1, 1, v6) != 1)
  {
    sub_1CA1F0C4C();
    (*(void (**)(uint64_t, uint64_t))(v7 + 8))(a1, v6);
    if (!*(_QWORD *)(a3 + 16))
      goto LABEL_5;
    goto LABEL_3;
  }
  sub_1CA0BB378(a1);
  if (*(_QWORD *)(a3 + 16))
  {
LABEL_3:
    swift_getObjectType();
    swift_unknownObjectRetain();
    sub_1CA1F0C34();
    swift_unknownObjectRelease();
  }
LABEL_5:
  v8 = swift_allocObject();
  *(_QWORD *)(v8 + 16) = a2;
  *(_QWORD *)(v8 + 24) = a3;
  return swift_task_create();
}

uint64_t GraphManager.__deallocating_deinit()
{
  GraphManager.deinit();
  return swift_defaultActor_deallocate();
}

uint64_t GraphManager.invalidate()()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;

  v1[4] = v0;
  v2 = sub_1CA1F0808();
  v1[5] = v2;
  v1[6] = *(_QWORD *)(v2 - 8);
  v1[7] = swift_task_alloc();
  v1[8] = swift_task_alloc();
  v1[9] = swift_task_alloc();
  return swift_task_switch();
}

uint64_t sub_1CA10792C()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void (*v5)(uint64_t, uint64_t, uint64_t);
  NSObject *v6;
  os_log_type_t v7;
  uint64_t v8;
  uint8_t *v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  void (*v13)(uint64_t, uint64_t);
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;

  v1 = v0[8];
  v2 = v0[9];
  v3 = v0[5];
  v4 = v0[4] + OBJC_IVAR____TtC17KnowledgeGraphKit12GraphManager_url;
  v5 = *(void (**)(uint64_t, uint64_t, uint64_t))(v0[6] + 16);
  v0[10] = v5;
  v5(v2, v4, v3);
  v5(v1, v2, v3);
  v0[11] = sub_1CA0AB910(0, &qword_1EF937520);
  v6 = sub_1CA1F0E98();
  v7 = sub_1CA1F0DFC();
  if (os_log_type_enabled(v6, v7))
  {
    v8 = v0[5];
    v18 = v0[8];
    v19 = v0[6];
    v9 = (uint8_t *)swift_slowAlloc();
    v10 = swift_slowAlloc();
    v20 = v10;
    *(_DWORD *)v9 = 136315138;
    sub_1CA109A30();
    v11 = sub_1CA1F12AC();
    v0[3] = sub_1CA1093F0(v11, v12, &v20);
    sub_1CA1F0ED4();
    swift_bridgeObjectRelease();
    v13 = *(void (**)(uint64_t, uint64_t))(v19 + 8);
    v13(v18, v8);
    _os_log_impl(&dword_1CA0A5000, v6, v7, "Synchronously releasing manager for graph store %s", v9, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x1CAA4BBE4](v10, -1, -1);
    MEMORY[0x1CAA4BBE4](v9, -1, -1);

  }
  else
  {
    v14 = v0[8];
    v15 = v0[5];
    v16 = v0[6];

    v13 = *(void (**)(uint64_t, uint64_t))(v16 + 8);
    v13(v14, v15);
  }
  v0[12] = v13;
  *(_QWORD *)(v0[4] + OBJC_IVAR____TtC17KnowledgeGraphKit12GraphManager__storeManager) = 0;
  swift_release();
  return swift_task_switch();
}

uint64_t sub_1CA107B34()
{
  uint64_t v0;
  _QWORD *v1;

  if (qword_1EF936EA0 != -1)
    swift_once();
  v1 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v0 + 104) = v1;
  *v1 = v0;
  v1[1] = sub_1CA107BB0;
  return sub_1CA0B9E8C(*(_QWORD *)(v0 + 72));
}

uint64_t sub_1CA107BB0()
{
  swift_task_dealloc();
  return swift_task_switch();
}

uint64_t sub_1CA107C08()
{
  uint64_t v0;
  NSObject *v1;
  os_log_type_t v2;
  uint64_t v3;
  uint64_t v4;
  uint8_t *v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  void (*v9)(uint64_t, uint64_t);
  uint64_t v10;
  uint64_t v11;
  void (*v13)(uint64_t, uint64_t);
  uint64_t v14;
  uint64_t v15;

  (*(void (**)(_QWORD, _QWORD, _QWORD))(v0 + 80))(*(_QWORD *)(v0 + 56), *(_QWORD *)(v0 + 72), *(_QWORD *)(v0 + 40));
  v1 = sub_1CA1F0E98();
  v2 = sub_1CA1F0DFC();
  if (os_log_type_enabled(v1, v2))
  {
    v13 = *(void (**)(uint64_t, uint64_t))(v0 + 96);
    v14 = *(_QWORD *)(v0 + 72);
    v3 = *(_QWORD *)(v0 + 56);
    v4 = *(_QWORD *)(v0 + 40);
    v5 = (uint8_t *)swift_slowAlloc();
    v6 = swift_slowAlloc();
    v15 = v6;
    *(_DWORD *)v5 = 136315138;
    sub_1CA109A30();
    v7 = sub_1CA1F12AC();
    *(_QWORD *)(v0 + 16) = sub_1CA1093F0(v7, v8, &v15);
    sub_1CA1F0ED4();
    swift_bridgeObjectRelease();
    v13(v3, v4);
    _os_log_impl(&dword_1CA0A5000, v1, v2, "Synchronously released manager for graph store %s", v5, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x1CAA4BBE4](v6, -1, -1);
    MEMORY[0x1CAA4BBE4](v5, -1, -1);

    v13(v14, v4);
  }
  else
  {
    v9 = *(void (**)(uint64_t, uint64_t))(v0 + 96);
    v10 = *(_QWORD *)(v0 + 72);
    v11 = *(_QWORD *)(v0 + 40);
    v9(*(_QWORD *)(v0 + 56), v11);

    v9(v10, v11);
  }
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t GraphManager.replaceFromGraph(_:)(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;

  v2[2] = a1;
  v2[3] = v1;
  v3 = sub_1CA1F0874();
  v2[4] = v3;
  v2[5] = *(_QWORD *)(v3 - 8);
  v2[6] = swift_task_alloc();
  return swift_task_switch();
}

uint64_t sub_1CA107E38()
{
  _QWORD *v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  void *v4;
  void *v5;
  id v6;
  uint64_t v7;
  uint64_t v8;
  id v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v1 = (_QWORD *)v0[2];
  v2 = v1[3];
  v3 = v1[4];
  __swift_project_boxed_opaque_existential_1(v1, v2);
  v4 = (void *)(*(uint64_t (**)(uint64_t, uint64_t))(v3 + 16))(v2, v3);
  v0[7] = v4;
  objc_opt_self();
  v5 = (void *)swift_dynamicCastObjCClass();
  if (!v5)
    goto LABEL_12;
  v6 = objc_msgSend(v5, sel_store);
  v0[8] = v6;
  swift_getObjectType();
  v7 = swift_conformsToProtocol2();
  if (v7)
    v8 = v7;
  else
    v8 = 0;
  if (v7)
    v9 = v6;
  else
    v9 = 0;
  v0[9] = v9;
  v0[10] = v8;
  if (!v9)
  {
    swift_unknownObjectRelease();
LABEL_12:

    return sub_1CA1F11C8();
  }
  v10 = v0[3];
  v11 = OBJC_IVAR____TtC17KnowledgeGraphKit12GraphManager__storeManager;
  v0[11] = OBJC_IVAR____TtC17KnowledgeGraphKit12GraphManager__storeManager;
  v12 = *(_QWORD *)(v10 + v11);
  if (v12)
  {
    v0[15] = v12;
    v0[16] = v12;
    swift_retain();
  }
  else
  {
    v0[12] = OBJC_IVAR____TtC17KnowledgeGraphKit12GraphManager_url;
  }
  return swift_task_switch();
}

uint64_t sub_1CA107FA4()
{
  uint64_t v0;

  if (qword_1EF936EA0 != -1)
    swift_once();
  *(_QWORD *)(v0 + 104) = qword_1EF9371A0;
  return swift_task_switch();
}

uint64_t sub_1CA108008()
{
  _QWORD *v0;

  v0[14] = sub_1CA0B9D08(v0[3] + v0[12]);
  return swift_task_switch();
}

uint64_t sub_1CA108050()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;

  v1 = v0[14];
  *(_QWORD *)(v0[3] + v0[11]) = v1;
  swift_retain();
  swift_release();
  v2 = v0[14];
  v0[15] = v1;
  v0[16] = v2;
  return swift_task_switch();
}

uint64_t sub_1CA1080B0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  __int128 v5;

  v1 = *(_QWORD *)(v0 + 128);
  v5 = *(_OWORD *)(v0 + 72);
  sub_1CA1F0868();
  v2 = swift_task_alloc();
  *(_QWORD *)(v0 + 136) = v2;
  *(_QWORD *)(v2 + 16) = v1;
  *(_OWORD *)(v2 + 24) = v5;
  *(_QWORD *)&v5 = (char *)&dword_1EF938B10 + dword_1EF938B10;
  v3 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v0 + 144) = v3;
  *v3 = v0;
  v3[1] = sub_1CA10815C;
  return ((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))v5)(v5, *(_QWORD *)(v0 + 48), (uint64_t)&unk_1EF937550, v2);
}

uint64_t sub_1CA10815C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v3 = *(_QWORD *)(*(_QWORD *)v1 + 40);
  v2 = *(_QWORD *)(*(_QWORD *)v1 + 48);
  v4 = *(_QWORD *)(*(_QWORD *)v1 + 32);
  *(_QWORD *)(*(_QWORD *)v1 + 152) = v0;
  swift_task_dealloc();
  (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v2, v4);
  swift_task_dealloc();
  return swift_task_switch();
}

uint64_t sub_1CA1081F0()
{
  swift_release();
  return swift_task_switch();
}

uint64_t sub_1CA108230()
{
  uint64_t v0;
  void *v1;

  v1 = *(void **)(v0 + 56);
  swift_unknownObjectRelease();

  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1CA108274()
{
  return swift_task_switch();
}

uint64_t sub_1CA108288()
{
  uint64_t v0;
  void *v1;

  v1 = *(void **)(v0 + 56);
  swift_release();
  swift_unknownObjectRelease();

  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t static GraphManager.graphIsInUse(at:)(uint64_t a1)
{
  uint64_t v1;

  *(_QWORD *)(v1 + 16) = a1;
  return swift_task_switch();
}

uint64_t sub_1CA1082F8()
{
  uint64_t v0;

  if (qword_1EF936EA0 != -1)
    swift_once();
  *(_QWORD *)(v0 + 24) = qword_1EF9371A0;
  return swift_task_switch();
}

uint64_t sub_1CA10835C()
{
  uint64_t v0;
  char v1;

  if (*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v0 + 24) + 112) + 16))
    sub_1CA0AA530(*(_QWORD *)(v0 + 16));
  else
    v1 = 0;
  return (*(uint64_t (**)(_QWORD))(v0 + 8))(v1 & 1);
}

uint64_t static GraphManager.swap(from:to:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  *(_QWORD *)(v2 + 16) = a1;
  *(_QWORD *)(v2 + 24) = a2;
  return swift_task_switch();
}

uint64_t sub_1CA1083C0()
{
  uint64_t *v0;
  _QWORD *v1;

  if (qword_1EF936EA0 != -1)
    swift_once();
  v1 = (_QWORD *)swift_task_alloc();
  v0[4] = (uint64_t)v1;
  *v1 = v0;
  v1[1] = sub_1CA10843C;
  return sub_1CA0BA2BC(v0[2], v0[3]);
}

uint64_t sub_1CA10843C()
{
  uint64_t *v0;
  uint64_t v2;

  v2 = *v0;
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v2 + 8))();
}

uint64_t static GraphManager.checkNoGraphStoreManagerLeft()()
{
  return swift_task_switch();
}

uint64_t sub_1CA108498()
{
  uint64_t v0;

  if (qword_1EF936EA0 != -1)
    swift_once();
  *(_QWORD *)(v0 + 16) = qword_1EF9371A0;
  return swift_task_switch();
}

uint64_t sub_1CA1084FC()
{
  uint64_t v0;

  *(_QWORD *)(v0 + 24) = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v0 + 16) + 112) + 16);
  return swift_task_switch();
}

uint64_t sub_1CA108520()
{
  uint64_t v0;

  if (*(_QWORD *)(v0 + 24))
    return sub_1CA1F11C8();
  else
    return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t GraphManager.read<A>(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  _QWORD *v5;

  v5[5] = a4;
  v5[6] = v4;
  v5[3] = a2;
  v5[4] = a3;
  v5[2] = a1;
  return swift_task_switch();
}

uint64_t sub_1CA1085C8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  __int128 v6;
  _QWORD *v7;

  v1 = *(_QWORD *)(v0 + 48);
  v2 = OBJC_IVAR____TtC17KnowledgeGraphKit12GraphManager__storeManager;
  *(_QWORD *)(v0 + 56) = OBJC_IVAR____TtC17KnowledgeGraphKit12GraphManager__storeManager;
  v3 = *(_QWORD *)(v1 + v2);
  if (v3)
  {
    *(_QWORD *)(v0 + 88) = v3;
    v4 = *(_QWORD *)(v0 + 40);
    swift_retain();
    v5 = swift_task_alloc();
    *(_QWORD *)(v0 + 96) = v5;
    v6 = *(_OWORD *)(v0 + 24);
    *(_QWORD *)(v5 + 16) = v4;
    *(_QWORD *)(v5 + 24) = v1;
    *(_OWORD *)(v5 + 32) = v6;
    v7 = (_QWORD *)swift_task_alloc();
    *(_QWORD *)(v0 + 104) = v7;
    *v7 = v0;
    v7[1] = sub_1CA1087E8;
    return sub_1CA0B7D10(*(_QWORD *)(v0 + 16), (uint64_t)&unk_1EF938B40, v5, *(_QWORD *)(v0 + 40));
  }
  else
  {
    *(_QWORD *)(v0 + 64) = OBJC_IVAR____TtC17KnowledgeGraphKit12GraphManager_url;
    return swift_task_switch();
  }
}

uint64_t sub_1CA1086A0()
{
  uint64_t v0;

  if (qword_1EF936EA0 != -1)
    swift_once();
  *(_QWORD *)(v0 + 72) = qword_1EF9371A0;
  return swift_task_switch();
}

uint64_t sub_1CA108704()
{
  _QWORD *v0;

  v0[10] = sub_1CA0B9D08(v0[6] + v0[8]);
  return swift_task_switch();
}

uint64_t sub_1CA10874C()
{
  uint64_t v0;
  uint64_t v1;
  __int128 v2;
  _QWORD *v3;

  *(_QWORD *)(*(_QWORD *)(v0 + 48) + *(_QWORD *)(v0 + 56)) = *(_QWORD *)(v0 + 80);
  swift_retain();
  swift_release();
  *(_QWORD *)(v0 + 88) = *(_QWORD *)(v0 + 80);
  v1 = swift_task_alloc();
  *(_QWORD *)(v0 + 96) = v1;
  v2 = *(_OWORD *)(v0 + 24);
  *(_OWORD *)(v1 + 16) = *(_OWORD *)(v0 + 40);
  *(_OWORD *)(v1 + 32) = v2;
  v3 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v0 + 104) = v3;
  *v3 = v0;
  v3[1] = sub_1CA1087E8;
  return sub_1CA0B7D10(*(_QWORD *)(v0 + 16), (uint64_t)&unk_1EF938B40, v1, *(_QWORD *)(v0 + 40));
}

uint64_t sub_1CA1087E8()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;

  v2 = *v1;
  *(_QWORD *)(v2 + 112) = v0;
  swift_task_dealloc();
  if (v0)
    return swift_task_switch();
  swift_release();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v2 + 8))();
}

uint64_t sub_1CA108868()
{
  uint64_t v0;

  swift_release();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1CA1088A4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v6;
  _QWORD *v12;

  v12 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v6 + 16) = v12;
  *v12 = v6;
  v12[1] = sub_1CA0B90F0;
  v12[10] = a6;
  v12[11] = a4;
  v12[8] = a2;
  v12[9] = a5;
  v12[7] = a1;
  return swift_task_switch();
}

uint64_t sub_1CA10892C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  _QWORD *v6;

  v6[10] = a5;
  v6[11] = v5;
  v6[8] = a2;
  v6[9] = a4;
  v6[7] = a1;
  return swift_task_switch();
}

uint64_t sub_1CA10894C()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  int *v3;
  uint64_t v4;
  objc_class *ObjCClassFromMetadata;
  id v6;
  uint64_t v7;
  uint64_t v8;
  id v9;
  _QWORD *v10;
  int *v12;

  v1 = v0[11];
  v2 = v0[8];
  v3 = (int *)v0[9];
  sub_1CA0AB910(0, &qword_1EF938CC0);
  v4 = *(_QWORD *)(v1 + OBJC_IVAR____TtC17KnowledgeGraphKit12GraphManager_entityFactory);
  ObjCClassFromMetadata = (objc_class *)swift_getObjCClassFromMetadata();
  swift_unknownObjectRetain();
  swift_unknownObjectRetain();
  v6 = objc_msgSend(objc_allocWithZone(ObjCClassFromMetadata), sel_initWithImplementation_entityFactory_, v2, v4);
  v0[12] = v6;
  swift_unknownObjectRelease();
  swift_unknownObjectRelease();
  v7 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EF938CC8);
  v8 = swift_allocObject();
  v0[13] = v8;
  *(_QWORD *)(v8 + 16) = v6;
  *(_BYTE *)(v8 + 24) = 1;
  v0[5] = v7;
  v0[6] = sub_1CA109E58();
  v0[2] = v8;
  v12 = (int *)((char *)v3 + *v3);
  v9 = v6;
  swift_retain();
  v10 = (_QWORD *)swift_task_alloc();
  v0[14] = v10;
  *v10 = v0;
  v10[1] = sub_1CA108A8C;
  return ((uint64_t (*)(_QWORD, _QWORD *))v12)(v0[7], v0 + 2);
}

uint64_t sub_1CA108A8C()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;

  v2 = *v1;
  *(_QWORD *)(*v1 + 120) = v0;
  swift_task_dealloc();
  if (!v0)
    __swift_destroy_boxed_opaque_existential_0(v2 + 16);
  return swift_task_switch();
}

uint64_t sub_1CA108B00()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 104);

  *(_BYTE *)(v1 + 24) = 0;
  swift_release();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1CA108B40()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 104);

  __swift_destroy_boxed_opaque_existential_0(v0 + 16);
  *(_BYTE *)(v1 + 24) = 0;
  swift_release();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t GraphManager.write<A>(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  _QWORD *v5;

  v5[5] = a4;
  v5[6] = v4;
  v5[3] = a2;
  v5[4] = a3;
  v5[2] = a1;
  return swift_task_switch();
}

uint64_t sub_1CA108BAC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  __int128 v6;
  _QWORD *v7;

  v1 = *(_QWORD *)(v0 + 48);
  v2 = OBJC_IVAR____TtC17KnowledgeGraphKit12GraphManager__storeManager;
  *(_QWORD *)(v0 + 56) = OBJC_IVAR____TtC17KnowledgeGraphKit12GraphManager__storeManager;
  v3 = *(_QWORD *)(v1 + v2);
  if (v3)
  {
    *(_QWORD *)(v0 + 88) = v3;
    v4 = *(_QWORD *)(v0 + 40);
    swift_retain();
    v5 = swift_task_alloc();
    *(_QWORD *)(v0 + 96) = v5;
    v6 = *(_OWORD *)(v0 + 24);
    *(_QWORD *)(v5 + 16) = v4;
    *(_QWORD *)(v5 + 24) = v1;
    *(_OWORD *)(v5 + 32) = v6;
    v7 = (_QWORD *)swift_task_alloc();
    *(_QWORD *)(v0 + 104) = v7;
    *v7 = v0;
    v7[1] = sub_1CA108DCC;
    return sub_1CA0B9138(*(_QWORD *)(v0 + 16), (uint64_t)&unk_1EF938B58, v5, *(_QWORD *)(v0 + 40));
  }
  else
  {
    *(_QWORD *)(v0 + 64) = OBJC_IVAR____TtC17KnowledgeGraphKit12GraphManager_url;
    return swift_task_switch();
  }
}

uint64_t sub_1CA108C84()
{
  uint64_t v0;

  if (qword_1EF936EA0 != -1)
    swift_once();
  *(_QWORD *)(v0 + 72) = qword_1EF9371A0;
  return swift_task_switch();
}

uint64_t sub_1CA108CE8()
{
  _QWORD *v0;

  v0[10] = sub_1CA0B9D08(v0[6] + v0[8]);
  return swift_task_switch();
}

uint64_t sub_1CA108D30()
{
  uint64_t v0;
  uint64_t v1;
  __int128 v2;
  _QWORD *v3;

  *(_QWORD *)(*(_QWORD *)(v0 + 48) + *(_QWORD *)(v0 + 56)) = *(_QWORD *)(v0 + 80);
  swift_retain();
  swift_release();
  *(_QWORD *)(v0 + 88) = *(_QWORD *)(v0 + 80);
  v1 = swift_task_alloc();
  *(_QWORD *)(v0 + 96) = v1;
  v2 = *(_OWORD *)(v0 + 24);
  *(_OWORD *)(v1 + 16) = *(_OWORD *)(v0 + 40);
  *(_OWORD *)(v1 + 32) = v2;
  v3 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v0 + 104) = v3;
  *v3 = v0;
  v3[1] = sub_1CA108DCC;
  return sub_1CA0B9138(*(_QWORD *)(v0 + 16), (uint64_t)&unk_1EF938B58, v1, *(_QWORD *)(v0 + 40));
}

uint64_t sub_1CA108DCC()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;

  v2 = *v1;
  *(_QWORD *)(v2 + 112) = v0;
  swift_task_dealloc();
  if (v0)
    return swift_task_switch();
  swift_release();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v2 + 8))();
}

uint64_t sub_1CA108E4C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v6;
  _QWORD *v12;

  v12 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v6 + 16) = v12;
  *v12 = v6;
  v12[1] = sub_1CA0BBBA8;
  v12[5] = a6;
  v12[6] = a4;
  v12[3] = a2;
  v12[4] = a5;
  v12[2] = a1;
  return swift_task_switch();
}

uint64_t sub_1CA108ED4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  _QWORD *v6;

  v6[5] = a5;
  v6[6] = v5;
  v6[3] = a2;
  v6[4] = a4;
  v6[2] = a1;
  return swift_task_switch();
}

uint64_t sub_1CA108EF4()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  int *v3;
  uint64_t v4;
  objc_class *ObjCClassFromMetadata;
  id v6;
  uint64_t v7;
  id v8;
  _QWORD *v9;
  int *v11;

  v1 = v0[6];
  v2 = v0[3];
  v3 = (int *)v0[4];
  sub_1CA0AB910(0, &qword_1EF938CA8);
  v4 = *(_QWORD *)(v1 + OBJC_IVAR____TtC17KnowledgeGraphKit12GraphManager_entityFactory);
  ObjCClassFromMetadata = (objc_class *)swift_getObjCClassFromMetadata();
  swift_unknownObjectRetain();
  swift_unknownObjectRetain();
  v6 = objc_msgSend(objc_allocWithZone(ObjCClassFromMetadata), sel_initWithMutableImplementation_entityFactory_, v2, v4);
  v0[7] = v6;
  swift_unknownObjectRelease();
  swift_unknownObjectRelease();
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EF938CB0);
  v7 = swift_allocObject();
  v0[8] = v7;
  *(_QWORD *)(v7 + 16) = v6;
  *(_BYTE *)(v7 + 24) = 1;
  v11 = (int *)((char *)v3 + *v3);
  v8 = v6;
  v9 = (_QWORD *)swift_task_alloc();
  v0[9] = v9;
  *v9 = v0;
  v9[1] = sub_1CA109010;
  return ((uint64_t (*)(_QWORD, uint64_t))v11)(v0[2], v7);
}

uint64_t sub_1CA109010()
{
  uint64_t v0;
  uint64_t v1;

  *(_QWORD *)(*(_QWORD *)v1 + 80) = v0;
  swift_task_dealloc();
  return swift_task_switch();
}

uint64_t sub_1CA109074()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 64);

  *(_BYTE *)(v1 + 24) = 0;
  swift_release();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1CA1090B4()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 64);

  *(_BYTE *)(v1 + 24) = 0;
  swift_release();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t GraphManager.exclusive<A>(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  _QWORD *v5;

  v5[5] = a4;
  v5[6] = v4;
  v5[3] = a2;
  v5[4] = a3;
  v5[2] = a1;
  return swift_task_switch();
}

uint64_t sub_1CA109114()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  __int128 v6;
  _QWORD *v7;

  v1 = *(_QWORD *)(v0 + 48);
  v2 = OBJC_IVAR____TtC17KnowledgeGraphKit12GraphManager__storeManager;
  *(_QWORD *)(v0 + 56) = OBJC_IVAR____TtC17KnowledgeGraphKit12GraphManager__storeManager;
  v3 = *(_QWORD *)(v1 + v2);
  if (v3)
  {
    *(_QWORD *)(v0 + 88) = v3;
    v4 = *(_QWORD *)(v0 + 40);
    swift_retain();
    v5 = swift_task_alloc();
    *(_QWORD *)(v0 + 96) = v5;
    v6 = *(_OWORD *)(v0 + 24);
    *(_QWORD *)(v5 + 16) = v4;
    *(_QWORD *)(v5 + 24) = v1;
    *(_OWORD *)(v5 + 32) = v6;
    v7 = (_QWORD *)swift_task_alloc();
    *(_QWORD *)(v0 + 104) = v7;
    *v7 = v0;
    v7[1] = sub_1CA108DCC;
    return sub_1CA0B9AFC(*(_QWORD *)(v0 + 16), (uint64_t)&unk_1EF938B70, v5, *(_QWORD *)(v0 + 40));
  }
  else
  {
    *(_QWORD *)(v0 + 64) = OBJC_IVAR____TtC17KnowledgeGraphKit12GraphManager_url;
    return swift_task_switch();
  }
}

uint64_t sub_1CA1091EC()
{
  uint64_t v0;

  if (qword_1EF936EA0 != -1)
    swift_once();
  *(_QWORD *)(v0 + 72) = qword_1EF9371A0;
  return swift_task_switch();
}

uint64_t sub_1CA109250()
{
  _QWORD *v0;

  v0[10] = sub_1CA0B9D08(v0[6] + v0[8]);
  return swift_task_switch();
}

uint64_t sub_1CA109298()
{
  uint64_t v0;
  uint64_t v1;
  __int128 v2;
  _QWORD *v3;

  *(_QWORD *)(*(_QWORD *)(v0 + 48) + *(_QWORD *)(v0 + 56)) = *(_QWORD *)(v0 + 80);
  swift_retain();
  swift_release();
  *(_QWORD *)(v0 + 88) = *(_QWORD *)(v0 + 80);
  v1 = swift_task_alloc();
  *(_QWORD *)(v0 + 96) = v1;
  v2 = *(_OWORD *)(v0 + 24);
  *(_OWORD *)(v1 + 16) = *(_OWORD *)(v0 + 40);
  *(_OWORD *)(v1 + 32) = v2;
  v3 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v0 + 104) = v3;
  *v3 = v0;
  v3[1] = sub_1CA108DCC;
  return sub_1CA0B9AFC(*(_QWORD *)(v0 + 16), (uint64_t)&unk_1EF938B70, v1, *(_QWORD *)(v0 + 40));
}

uint64_t GraphManager.unownedExecutor.getter()
{
  uint64_t v0;

  return v0;
}

uint64_t sub_1CA109340(uint64_t a1, int *a2)
{
  uint64_t v2;
  _QWORD *v4;
  uint64_t (*v6)(uint64_t);

  v6 = (uint64_t (*)(uint64_t))((char *)a2 + *a2);
  v4 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v2 + 16) = v4;
  *v4 = v2;
  v4[1] = sub_1CA1093A4;
  return v6(a1);
}

uint64_t sub_1CA1093A4()
{
  uint64_t *v0;
  uint64_t v2;

  v2 = *v0;
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v2 + 8))();
}

uint64_t sub_1CA1093F0(uint64_t a1, unint64_t a2, uint64_t *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v12[3];
  uint64_t ObjectType;

  v6 = sub_1CA1094C0(v12, 0, 0, 1, a1, a2);
  v7 = v12[0];
  if (v6)
  {
    v8 = v6;
    ObjectType = swift_getObjectType();
    v12[0] = v8;
    v9 = *a3;
    if (*a3)
    {
      sub_1CA0B6A98((uint64_t)v12, *a3);
      *a3 = v9 + 32;
    }
  }
  else
  {
    ObjectType = MEMORY[0x1E0DEC2B8];
    v12[0] = a1;
    v12[1] = a2;
    v10 = *a3;
    if (*a3)
    {
      sub_1CA0B6A98((uint64_t)v12, *a3);
      *a3 = v10 + 32;
    }
    swift_bridgeObjectRetain();
  }
  __swift_destroy_boxed_opaque_existential_0((uint64_t)v12);
  return v7;
}

uint64_t sub_1CA1094C0(uint64_t *a1, char *__dst, uint64_t a3, char a4, uint64_t a5, unint64_t a6)
{
  uint64_t v8;
  uint64_t result;
  uint64_t v11;
  uint64_t v12;
  _QWORD __src[2];

  if ((a6 & 0x2000000000000000) != 0)
  {
    if ((a4 & 1) == 0)
    {
      if (__dst)
      {
        v11 = HIBYTE(a6) & 0xF;
        if (a3 - (uint64_t)__dst > v11)
        {
          __src[0] = a5;
          __src[1] = a6 & 0xFFFFFFFFFFFFFFLL;
          if (__src >= (_QWORD *)&__dst[v11] || (char *)__src + v11 <= __dst)
          {
            memcpy(__dst, __src, HIBYTE(a6) & 0xF);
            sub_1CA1F0EE0();
            result = 0;
            *a1 = (uint64_t)__dst;
            return result;
          }
          goto LABEL_17;
        }
      }
    }
LABEL_13:
    result = sub_1CA109678(a5, a6);
    *a1 = v12;
    return result;
  }
  if ((a6 & 0x1000000000000000) != 0)
    goto LABEL_13;
  if ((a5 & 0x1000000000000000) != 0)
  {
    v8 = (a6 & 0xFFFFFFFFFFFFFFFLL) + 32;
    goto LABEL_5;
  }
  v8 = sub_1CA1F10B4();
  if (!v8)
  {
    sub_1CA1F11BC();
    __break(1u);
LABEL_17:
    result = sub_1CA1F1270();
    __break(1u);
    return result;
  }
LABEL_5:
  *a1 = v8;
  if ((a6 & 0x8000000000000000) != 0)
    return 0;
  else
    return swift_unknownObjectRetain();
}

uint64_t sub_1CA109678(uint64_t a1, unint64_t a2)
{
  uint64_t v2;
  unint64_t v3;
  unint64_t v4;

  v2 = sub_1CA10970C(a1, a2);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    v2 = sub_1CA1098E4(0, *(_QWORD *)(v2 + 16) + 1, 1, (char *)v2);
  v4 = *(_QWORD *)(v2 + 16);
  v3 = *(_QWORD *)(v2 + 24);
  if (v4 >= v3 >> 1)
    v2 = sub_1CA1098E4(v3 > 1, v4 + 1, 1, (char *)v2);
  *(_QWORD *)(v2 + 16) = v4 + 1;
  *(_BYTE *)(v2 + 32 + v4) = 0;
  return v2;
}

uint64_t sub_1CA10970C(uint64_t a1, unint64_t a2)
{
  uint64_t v2;
  _QWORD *v3;
  _QWORD *v4;
  uint64_t v5;
  char v6;
  uint64_t result;

  if ((a2 & 0x1000000000000000) != 0)
    goto LABEL_10;
  if ((a2 & 0x2000000000000000) != 0)
    v2 = HIBYTE(a2) & 0xF;
  else
    v2 = a1 & 0xFFFFFFFFFFFFLL;
  if (v2)
  {
    while (1)
    {
      v3 = sub_1CA109880(v2, 0);
      if (v2 < 0)
        break;
      v4 = v3;
      v5 = sub_1CA1F1060();
      if ((v6 & 1) != 0)
        goto LABEL_14;
      if (v5 == v2)
        return (uint64_t)v4;
      sub_1CA1F11BC();
      __break(1u);
LABEL_10:
      v2 = sub_1CA1F0A48();
      if (!v2)
        return MEMORY[0x1E0DEE9D8];
    }
    sub_1CA1F1270();
    __break(1u);
LABEL_14:
    result = sub_1CA1F11BC();
    __break(1u);
  }
  else
  {
    return MEMORY[0x1E0DEE9D8];
  }
  return result;
}

_QWORD *sub_1CA109880(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v4;
  size_t v5;

  if (a2 <= a1)
    v2 = a1;
  else
    v2 = a2;
  if (!v2)
    return (_QWORD *)MEMORY[0x1E0DEE9D8];
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EF938D00);
  v4 = (_QWORD *)swift_allocObject();
  v5 = _swift_stdlib_malloc_size(v4);
  v4[2] = a1;
  v4[3] = 2 * v5 - 64;
  return v4;
}

uint64_t sub_1CA1098E4(char a1, int64_t a2, char a3, char *a4)
{
  unint64_t v6;
  int64_t v7;
  int64_t v8;
  int64_t v9;
  char *v10;
  size_t v11;
  char *v12;
  char *v13;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v6 = *((_QWORD *)a4 + 3);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_30;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *((_QWORD *)a4 + 2);
  if (v7 <= v8)
    v9 = *((_QWORD *)a4 + 2);
  else
    v9 = v7;
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName(&qword_1EF938D00);
    v10 = (char *)swift_allocObject();
    v11 = _swift_stdlib_malloc_size(v10);
    *((_QWORD *)v10 + 2) = v8;
    *((_QWORD *)v10 + 3) = 2 * v11 - 64;
  }
  else
  {
    v10 = (char *)MEMORY[0x1E0DEE9D8];
  }
  v12 = v10 + 32;
  v13 = a4 + 32;
  if ((a1 & 1) != 0)
  {
    if (v10 != a4 || v12 >= &v13[v8])
      memmove(v12, v13, v8);
    *((_QWORD *)a4 + 2) = 0;
    goto LABEL_28;
  }
  if (v13 >= &v12[v8] || v12 >= &v13[v8])
  {
    memcpy(v12, v13, v8);
LABEL_28:
    swift_bridgeObjectRelease();
    return (uint64_t)v10;
  }
LABEL_30:
  result = sub_1CA1F1270();
  __break(1u);
  return result;
}

unint64_t sub_1CA109A30()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1EF937580;
  if (!qword_1EF937580)
  {
    v1 = sub_1CA1F0808();
    result = MEMORY[0x1CAA4BB30](MEMORY[0x1E0CB0048], v1);
    atomic_store(result, &qword_1EF937580);
  }
  return result;
}

uint64_t sub_1CA109A78(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  __int128 v10;

  v6 = *(_QWORD *)(v2 + 24);
  v7 = (_QWORD *)swift_task_alloc();
  v10 = *(_OWORD *)(v2 + 32);
  *(_QWORD *)(v3 + 16) = v7;
  *v7 = v3;
  v7[1] = sub_1CA0BBBA8;
  v8 = swift_task_alloc();
  v7[2] = v8;
  *(_QWORD *)v8 = v7;
  *(_QWORD *)(v8 + 8) = sub_1CA0B90F0;
  *(_QWORD *)(v8 + 88) = v6;
  *(_OWORD *)(v8 + 72) = v10;
  *(_QWORD *)(v8 + 56) = a1;
  *(_QWORD *)(v8 + 64) = a2;
  return swift_task_switch();
}

uint64_t sub_1CA109B24(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  __int128 v10;

  v6 = *(_QWORD *)(v2 + 24);
  v7 = (_QWORD *)swift_task_alloc();
  v10 = *(_OWORD *)(v2 + 32);
  *(_QWORD *)(v3 + 16) = v7;
  *v7 = v3;
  v7[1] = sub_1CA0BBBA8;
  v8 = swift_task_alloc();
  v7[2] = v8;
  *(_QWORD *)v8 = v7;
  *(_QWORD *)(v8 + 8) = sub_1CA0BBBA8;
  *(_QWORD *)(v8 + 48) = v6;
  *(_OWORD *)(v8 + 32) = v10;
  *(_QWORD *)(v8 + 16) = a1;
  *(_QWORD *)(v8 + 24) = a2;
  return swift_task_switch();
}

uint64_t sub_1CA109BD0(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  __int128 v10;

  v6 = *(_QWORD *)(v2 + 24);
  v7 = (_QWORD *)swift_task_alloc();
  v10 = *(_OWORD *)(v2 + 32);
  *(_QWORD *)(v3 + 16) = v7;
  *v7 = v3;
  v7[1] = sub_1CA0BBBA8;
  v8 = swift_task_alloc();
  v7[2] = v8;
  *(_QWORD *)v8 = v7;
  *(_QWORD *)(v8 + 8) = sub_1CA0BBBA8;
  *(_QWORD *)(v8 + 48) = v6;
  *(_OWORD *)(v8 + 32) = v10;
  *(_QWORD *)(v8 + 16) = a1;
  *(_QWORD *)(v8 + 24) = a2;
  return swift_task_switch();
}

uint64_t sub_1CA109C7C()
{
  return type metadata accessor for GraphManager();
}

uint64_t type metadata accessor for GraphManager()
{
  uint64_t result;

  result = qword_1EF938C00;
  if (!qword_1EF938C00)
    return swift_getSingletonMetadata();
  return result;
}

uint64_t sub_1CA109CC0()
{
  uint64_t result;
  unint64_t v1;

  result = sub_1CA1F0808();
  if (v1 <= 0x3F)
  {
    result = swift_updateClassMetadata2();
    if (!result)
      return 0;
  }
  return result;
}

uint64_t method lookup function for GraphManager()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of GraphManager.__allocating_init(at:entityFactory:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 112))();
}

uint64_t sub_1CA109D60@<X0>(NSObject *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t *a4@<X8>)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  _QWORD *v13;
  NSObject *v14;
  uint64_t result;
  uint64_t v16;

  v8 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EF937440);
  MEMORY[0x1E0C80A78](v8, v9);
  v11 = (char *)&v16 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  dispatch_suspend(a1);
  v12 = sub_1CA1F0C58();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v12 - 8) + 56))(v11, 1, 1, v12);
  v13 = (_QWORD *)swift_allocObject();
  v13[2] = 0;
  v13[3] = 0;
  v13[4] = a1;
  v13[5] = a2;
  v13[6] = a3;
  v14 = a1;
  swift_retain();
  result = sub_1CA106DBC((uint64_t)v11, (uint64_t)&unk_1EF938CF8, (uint64_t)v13);
  *a4 = result;
  return result;
}

unint64_t sub_1CA109E58()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1EF938CD0;
  if (!qword_1EF938CD0)
  {
    v1 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_1EF938CC8);
    result = MEMORY[0x1CAA4BB30](&protocol conformance descriptor for ConcreteGraph<A>, v1);
    atomic_store(result, (unint64_t *)&qword_1EF938CD0);
  }
  return result;
}

uint64_t sub_1CA109EA4()
{
  return swift_deallocObject();
}

uint64_t sub_1CA109EB4(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  int *v4;
  _QWORD *v5;

  v4 = *(int **)(v1 + 16);
  v5 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v2 + 16) = v5;
  *v5 = v2;
  v5[1] = sub_1CA0BBBA8;
  return ((uint64_t (*)(uint64_t, int *))((char *)&dword_1EF938CD8 + dword_1EF938CD8))(a1, v4);
}

uint64_t sub_1CA109F24@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v1;

  return sub_1CA109D60(*(NSObject **)(v1 + 16), *(_QWORD *)(v1 + 24), *(_QWORD *)(v1 + 32), a1);
}

uint64_t sub_1CA109F40()
{
  uint64_t v0;

  swift_unknownObjectRelease();

  swift_release();
  return swift_deallocObject();
}

uint64_t sub_1CA109F74(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  int *v5;
  _QWORD *v6;
  _QWORD *v7;
  uint64_t (*v9)(uint64_t);

  v4 = *(_QWORD *)(v1 + 32);
  v5 = *(int **)(v1 + 40);
  v6 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v2 + 16) = v6;
  *v6 = v2;
  v6[1] = sub_1CA0BBBA8;
  v6[2] = v4;
  v9 = (uint64_t (*)(uint64_t))((char *)v5 + *v5);
  v7 = (_QWORD *)swift_task_alloc();
  v6[3] = v7;
  *v7 = v6;
  v7[1] = sub_1CA0BAD1C;
  return v9(a1);
}

uint64_t sub_1CA10A008()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_1CA10A02C(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  int *v4;
  _QWORD *v5;

  v4 = *(int **)(v1 + 16);
  v5 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v2 + 16) = v5;
  *v5 = v2;
  v5[1] = sub_1CA0BBBA8;
  return ((uint64_t (*)(uint64_t, int *))((char *)&dword_1EF938D08 + dword_1EF938D08))(a1, v4);
}

uint64_t sub_1CA10A0A0@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, _QWORD *a4@<X8>)
{
  uint64_t v5;
  __int128 v7[2];
  uint64_t v8;

  v5 = (uint64_t)(a1 + 1);
  *(_QWORD *)&v7[0] = *a1;
  (*(void (**)(uint64_t *__return_ptr, __int128 *, _QWORD *, uint64_t, uint64_t))(a3 + 32))(&v8, v7, a1 + 1, a2, a3);
  sub_1CA0C7A10(v5, (uint64_t)v7);
  swift_getAssociatedTypeWitness();
  swift_getAssociatedTypeWitness();
  return sub_1CA0F9F20(&v8, v7, a4);
}

uint64_t NodeFilterRelation.targetNodeIdentifiers(from:in:)@<X0>(uint64_t *a1@<X0>, _QWORD *a2@<X1>, uint64_t a3@<X2>, _QWORD *a4@<X8>)
{
  uint64_t *v4;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t result;
  uint64_t v17;
  uint64_t v18;
  _QWORD v19[3];
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;

  v7 = *a1;
  v8 = *v4;
  v9 = v4[1];
  v10 = v4[2];
  v11 = a2[3];
  v12 = a2[4];
  __swift_project_boxed_opaque_existential_1(a2, v11);
  v20 = type metadata accessor for Filter(0, *(_QWORD *)(a3 + 16), v13, v14);
  v18 = *(_QWORD *)(a3 + 24);
  v15 = MEMORY[0x1CAA4BB30](&protocol conformance descriptor for <A> Filter<A>, v20, &v18);
  v19[0] = v8;
  v19[1] = v9;
  v21 = v15;
  v19[2] = v10;
  v17 = v7;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  AbstractGraph.nodeIdentifiers(matching:in:)(v19, (uint64_t)&v17, v11, v12, &v22);
  result = __swift_destroy_boxed_opaque_existential_0((uint64_t)v19);
  *a4 = v22;
  return result;
}

uint64_t NodeFilterRelation.adjacency(from:in:)@<X0>(uint64_t *a1@<X0>, _QWORD *a2@<X1>, uint64_t a3@<X2>, unint64_t *a4@<X8>)
{
  uint64_t *v4;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19[3];
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;

  v7 = *a1;
  v8 = *v4;
  v9 = v4[1];
  v10 = v4[2];
  v11 = a2[3];
  v12 = a2[4];
  __swift_project_boxed_opaque_existential_1(a2, v11);
  v20 = type metadata accessor for Filter(0, *(_QWORD *)(a3 + 16), v13, v14);
  v18 = *(_QWORD *)(a3 + 24);
  v15 = MEMORY[0x1CAA4BB30](&protocol conformance descriptor for <A> Filter<A>, v20, &v18);
  v19[0] = v8;
  v19[1] = v9;
  v21 = v15;
  v19[2] = v10;
  v17 = v7;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  AbstractGraph.nodeIdentifiers(matching:in:)(v19, (uint64_t)&v17, v11, v12, &v22);
  __swift_destroy_boxed_opaque_existential_0((uint64_t)v19);
  v19[0] = v22;
  sub_1CA0AC69C(v19, a4);
  return swift_release();
}

uint64_t NodeFilterRelation.adjacencyByJoining(with:in:)@<X0>(uint64_t *a1@<X0>, _QWORD *a2@<X1>, uint64_t a3@<X2>, _QWORD *a4@<X8>)
{
  uint64_t *v4;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  id v16;
  id v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t result;
  uint64_t v21;
  uint64_t v22;
  _QWORD v23[3];
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;

  v7 = *a1;
  v8 = *v4;
  v9 = v4[1];
  v10 = v4[2];
  v11 = a2[3];
  v12 = a2[4];
  __swift_project_boxed_opaque_existential_1(a2, v11);
  v24 = type metadata accessor for Filter(0, *(_QWORD *)(a3 + 16), v13, v14);
  v22 = *(_QWORD *)(a3 + 24);
  v15 = MEMORY[0x1CAA4BB30](&protocol conformance descriptor for <A> Filter<A>, v24, &v22);
  v23[0] = v8;
  v23[1] = v9;
  v25 = v15;
  v23[2] = v10;
  v16 = objc_allocWithZone((Class)KGMutableElementIdentifierSet);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v17 = objc_msgSend(v16, sel_init);
  __swift_instantiateConcreteTypeFromMangledName(&qword_1ED852AF0);
  v18 = swift_allocObject();
  *(_QWORD *)(v18 + 16) = v17;
  v26 = v18;
  v21 = v7;
  sub_1CA0AC2B4(&v21, (uint64_t)&v26);
  swift_bridgeObjectRelease();
  v21 = v26;
  AbstractGraph.nodeIdentifiers(matching:in:)(v23, (uint64_t)&v21, v11, v12, &v26);
  swift_release();
  __swift_destroy_boxed_opaque_existential_0((uint64_t)v23);
  v19 = v26;
  v23[0] = sub_1CA0AECA8(MEMORY[0x1E0DEE9D8]);
  v26 = v7;
  sub_1CA0AEDA4(&v26, (uint64_t)v23, v19);
  result = swift_release();
  *a4 = v23[0];
  return result;
}

uint64_t NodeFilterRelation.inverse()@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v4 = *v2;
  v5 = v2[1];
  v6 = v2[2];
  a2[3] = a1;
  a2[4] = MEMORY[0x1CAA4BB30](&protocol conformance descriptor for NodeFilterRelation<A>, a1);
  *a2 = v4;
  a2[1] = v5;
  a2[2] = v6;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return swift_bridgeObjectRetain();
}

uint64_t ChainRelation.init(relations:)@<X0>(uint64_t result@<X0>, _QWORD *a2@<X8>)
{
  *a2 = result;
  return result;
}

uint64_t ChainRelation.targetNodeIdentifiers(from:in:)@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t result;
  uint64_t v12;
  uint64_t v13;
  _QWORD v14[3];
  uint64_t v15;
  uint64_t v16;

  v5 = *a1;
  v6 = *(_QWORD *)(*(_QWORD *)v3 + 16);
  if (v6)
  {
    v8 = *(_QWORD *)v3 + 32;
    swift_retain();
    swift_bridgeObjectRetain();
    do
    {
      sub_1CA0C7A10(v8, (uint64_t)v14);
      v9 = v15;
      v10 = v16;
      __swift_project_boxed_opaque_existential_1(v14, v15);
      v12 = v5;
      (*(void (**)(uint64_t *__return_ptr, uint64_t *, uint64_t, uint64_t, uint64_t))(v10 + 24))(&v13, &v12, a2, v9, v10);
      swift_release();
      v5 = v13;
      __swift_destroy_boxed_opaque_existential_0((uint64_t)v14);
      v8 += 40;
      --v6;
    }
    while (v6);
    result = swift_bridgeObjectRelease();
  }
  else
  {
    result = swift_retain();
  }
  *a3 = v5;
  return result;
}

unint64_t ChainRelation.adjacency(from:in:)@<X0>(unint64_t *a1@<X0>, uint64_t a2@<X1>, unint64_t *a3@<X8>)
{
  uint64_t *v3;
  unint64_t v6;
  uint64_t v7;
  unint64_t result;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  _QWORD v19[3];
  uint64_t v20;
  uint64_t v21;

  v6 = *a1;
  v7 = *v3;
  result = sub_1CA0AECA8(MEMORY[0x1E0DEE9D8]);
  v9 = result;
  v10 = *(_QWORD *)(v7 + 16);
  if (v10)
  {
    swift_bridgeObjectRetain();
    sub_1CA0C7A10(v7 + 32, (uint64_t)v19);
    swift_bridgeObjectRelease();
    v11 = v20;
    v12 = v21;
    __swift_project_boxed_opaque_existential_1(v19, v20);
    v17 = v6;
    (*(void (**)(unint64_t *__return_ptr, unint64_t *, uint64_t, uint64_t, uint64_t))(v12 + 32))(&v18, &v17, a2, v11, v12);
    v9 = v18;
    __swift_destroy_boxed_opaque_existential_0((uint64_t)v19);
    v13 = v10 - 1;
    if (v10 != 1)
    {
      v14 = v7 + 72;
      do
      {
        sub_1CA0C7A10(v14, (uint64_t)v19);
        v15 = v20;
        v16 = v21;
        __swift_project_boxed_opaque_existential_1(v19, v20);
        v17 = v9;
        (*(void (**)(unint64_t *__return_ptr, unint64_t *, uint64_t, uint64_t, uint64_t))(v16 + 40))(&v18, &v17, a2, v15, v16);
        swift_bridgeObjectRelease();
        v9 = v18;
        __swift_destroy_boxed_opaque_existential_0((uint64_t)v19);
        v14 += 40;
        --v13;
      }
      while (v13);
    }
    result = swift_bridgeObjectRelease();
  }
  *a3 = v9;
  return result;
}

uint64_t ChainRelation.adjacencyByJoining(with:in:)@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t result;
  uint64_t v12;
  uint64_t v13;
  _QWORD v14[3];
  uint64_t v15;
  uint64_t v16;

  v5 = *a1;
  v6 = *(_QWORD *)(*(_QWORD *)v3 + 16);
  if (v6)
  {
    v8 = *(_QWORD *)v3 + 32;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    do
    {
      sub_1CA0C7A10(v8, (uint64_t)v14);
      v9 = v15;
      v10 = v16;
      __swift_project_boxed_opaque_existential_1(v14, v15);
      v12 = v5;
      (*(void (**)(uint64_t *__return_ptr, uint64_t *, uint64_t, uint64_t, uint64_t))(v10 + 40))(&v13, &v12, a2, v9, v10);
      swift_bridgeObjectRelease();
      v5 = v13;
      __swift_destroy_boxed_opaque_existential_0((uint64_t)v14);
      v8 += 40;
      --v6;
    }
    while (v6);
    result = swift_bridgeObjectRelease();
  }
  else
  {
    result = swift_bridgeObjectRetain();
  }
  *a3 = v5;
  return result;
}

void ChainRelation.inverse()(int8x16_t *a1)
{
  uint64_t *v1;
  uint64_t v3;
  int64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  int8x16_t v10;
  __int128 v11[2];
  uint64_t v12;

  v3 = *v1;
  v4 = *(_QWORD *)(*v1 + 16);
  if (!v4)
  {
LABEL_9:
    v10 = vextq_s8(a1[2], a1[2], 8uLL);
    v11[0] = (__int128)vextq_s8(a1[1], a1[1], 8uLL);
    v11[1] = (__int128)v10;
    type metadata accessor for ChainRelation();
  }
  v12 = MEMORY[0x1E0DEE9D8];
  swift_bridgeObjectRetain();
  sub_1CA0CD664(0, v4, 0);
  v5 = v12;
  v6 = v4 - 1;
  v7 = v3 + 40 * v4 - 8;
  while (v6 != -1)
  {
    if (v6 >= *(_QWORD *)(v3 + 16))
      goto LABEL_11;
    sub_1CA0C7A10(v7, (uint64_t)v11);
    v12 = v5;
    v9 = *(_QWORD *)(v5 + 16);
    v8 = *(_QWORD *)(v5 + 24);
    if (v9 >= v8 >> 1)
    {
      sub_1CA0CD664(v8 > 1, v9 + 1, 1);
      v5 = v12;
    }
    *(_QWORD *)(v5 + 16) = v9 + 1;
    sub_1CA0F31BC(v11, v5 + 40 * v9 + 32);
    --v6;
    v7 -= 40;
    if (v6 == -1)
    {
      swift_bridgeObjectRelease();
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
}

uint64_t NeighborRelationOut.targetNodeIdentifiers(from:in:)@<X0>(uint64_t *a1@<X0>, _QWORD *a2@<X1>, uint64_t a3@<X2>, _QWORD *a4@<X8>)
{
  return sub_1CA10AAE0(a1, a2, a3, 2, a4);
}

uint64_t NeighborRelationOut.adjacency(from:in:)@<X0>(uint64_t *a1@<X0>, _QWORD *a2@<X1>, uint64_t a3@<X2>, _QWORD *a4@<X8>)
{
  return sub_1CA10ABD8(a1, a2, a3, 2, a4);
}

uint64_t NeighborRelationOut.adjacencyByJoining(with:in:)@<X0>(uint64_t *a1@<X0>, _QWORD *a2@<X1>, uint64_t a3@<X2>, _QWORD *a4@<X8>)
{
  return sub_1CA10ACD0(a1, a2, a3, 1, a4);
}

uint64_t NeighborRelationOut.inverse()@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  return sub_1CA10AA50(a1, (uint64_t (*)(_QWORD, _QWORD, _QWORD))type metadata accessor for NeighborRelationIn, (uint64_t)&protocol conformance descriptor for NeighborRelationIn<A>, a2);
}

__n128 NeighborRelationIn.init(with:)@<Q0>(__n128 *a1@<X0>, __n128 *a2@<X8>)
{
  unint64_t v2;
  __n128 result;

  v2 = a1[1].n128_u64[0];
  result = *a1;
  *a2 = *a1;
  a2[1].n128_u64[0] = v2;
  return result;
}

uint64_t NeighborRelationIn.targetNodeIdentifiers(from:in:)@<X0>(uint64_t *a1@<X0>, _QWORD *a2@<X1>, uint64_t a3@<X2>, _QWORD *a4@<X8>)
{
  return sub_1CA10AAE0(a1, a2, a3, 1, a4);
}

uint64_t NeighborRelationIn.adjacency(from:in:)@<X0>(uint64_t *a1@<X0>, _QWORD *a2@<X1>, uint64_t a3@<X2>, _QWORD *a4@<X8>)
{
  return sub_1CA10ABD8(a1, a2, a3, 1, a4);
}

uint64_t NeighborRelationIn.adjacencyByJoining(with:in:)@<X0>(uint64_t *a1@<X0>, _QWORD *a2@<X1>, uint64_t a3@<X2>, _QWORD *a4@<X8>)
{
  return sub_1CA10ACD0(a1, a2, a3, 2, a4);
}

uint64_t NeighborRelationIn.inverse()@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  return sub_1CA10AA50(a1, (uint64_t (*)(_QWORD, _QWORD, _QWORD))type metadata accessor for NeighborRelationOut, (uint64_t)&protocol conformance descriptor for NeighborRelationOut<A>, a2);
}

uint64_t sub_1CA10AA50@<X0>(uint64_t a1@<X0>, uint64_t (*a2)(_QWORD, _QWORD, _QWORD)@<X1>, uint64_t a3@<X2>, _QWORD *a4@<X8>)
{
  uint64_t *v4;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v7 = *v4;
  v8 = v4[1];
  v9 = v4[2];
  v10 = a2(0, *(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24));
  a4[3] = v10;
  a4[4] = MEMORY[0x1CAA4BB30](a3, v10);
  *a4 = v7;
  a4[1] = v8;
  a4[2] = v9;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return swift_bridgeObjectRetain();
}

uint64_t NeighborRelationInOut.targetNodeIdentifiers(from:in:)@<X0>(uint64_t *a1@<X0>, _QWORD *a2@<X1>, uint64_t a3@<X2>, _QWORD *a4@<X8>)
{
  return sub_1CA10AAE0(a1, a2, a3, 3, a4);
}

uint64_t sub_1CA10AAE0@<X0>(uint64_t *a1@<X0>, _QWORD *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, _QWORD *a5@<X8>)
{
  uint64_t *v5;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t result;
  uint64_t v19;
  _QWORD v20[3];
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;

  v9 = *a1;
  v10 = *v5;
  v11 = v5[1];
  v12 = v5[2];
  v13 = a2[3];
  v14 = a2[4];
  __swift_project_boxed_opaque_existential_1(a2, v13);
  v23 = v9;
  v21 = type metadata accessor for Filter(0, *(_QWORD *)(a3 + 16), v15, v16);
  v19 = *(_QWORD *)(a3 + 24);
  v17 = MEMORY[0x1CAA4BB30](&protocol conformance descriptor for <A> Filter<A>, v21, &v19);
  v20[0] = v10;
  v20[1] = v11;
  v22 = v17;
  v20[2] = v12;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  sub_1CA0F91A0((uint64_t)&v23, v20, a4, v13, v14, &v24);
  result = __swift_destroy_boxed_opaque_existential_0((uint64_t)v20);
  *a5 = v24;
  return result;
}

uint64_t NeighborRelationInOut.adjacency(from:in:)@<X0>(uint64_t *a1@<X0>, _QWORD *a2@<X1>, uint64_t a3@<X2>, _QWORD *a4@<X8>)
{
  return sub_1CA10ABD8(a1, a2, a3, 3, a4);
}

uint64_t sub_1CA10ABD8@<X0>(uint64_t *a1@<X0>, _QWORD *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, _QWORD *a5@<X8>)
{
  uint64_t *v5;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t result;
  uint64_t v19;
  _QWORD v20[3];
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;

  v9 = *a1;
  v10 = *v5;
  v11 = v5[1];
  v12 = v5[2];
  v13 = a2[3];
  v14 = a2[4];
  __swift_project_boxed_opaque_existential_1(a2, v13);
  v23 = v9;
  v21 = type metadata accessor for Filter(0, *(_QWORD *)(a3 + 16), v15, v16);
  v19 = *(_QWORD *)(a3 + 24);
  v17 = MEMORY[0x1CAA4BB30](&protocol conformance descriptor for <A> Filter<A>, v21, &v19);
  v20[0] = v10;
  v20[1] = v11;
  v22 = v17;
  v20[2] = v12;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  sub_1CA0F9370((uint64_t)&v23, v20, a4, v13, v14, &v24);
  result = __swift_destroy_boxed_opaque_existential_0((uint64_t)v20);
  *a5 = v24;
  return result;
}

uint64_t NeighborRelationInOut.adjacencyByJoining(with:in:)@<X0>(uint64_t *a1@<X0>, _QWORD *a2@<X1>, uint64_t a3@<X2>, _QWORD *a4@<X8>)
{
  return sub_1CA10ACD0(a1, a2, a3, 3, a4);
}

uint64_t sub_1CA10ACD0@<X0>(uint64_t *a1@<X0>, _QWORD *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, _QWORD *a5@<X8>)
{
  unint64_t *v5;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  id v14;
  id v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t result;
  uint64_t v22;
  unint64_t v23[3];
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;

  v8 = *a1;
  v10 = *v5;
  v9 = v5[1];
  v11 = v5[2];
  v12 = a2[3];
  v13 = a2[4];
  __swift_project_boxed_opaque_existential_1(a2, v12);
  v14 = objc_allocWithZone((Class)KGMutableElementIdentifierSet);
  swift_bridgeObjectRetain();
  v15 = objc_msgSend(v14, sel_init);
  __swift_instantiateConcreteTypeFromMangledName(&qword_1ED852AF0);
  v16 = swift_allocObject();
  *(_QWORD *)(v16 + 16) = v15;
  v23[0] = v16;
  v27 = v8;
  sub_1CA0AC2B4((uint64_t *)&v27, (uint64_t)v23);
  swift_bridgeObjectRelease();
  v26 = v23[0];
  v24 = type metadata accessor for Filter(0, *(_QWORD *)(a3 + 16), v17, v18);
  v22 = *(_QWORD *)(a3 + 24);
  v19 = MEMORY[0x1CAA4BB30](&protocol conformance descriptor for <A> Filter<A>, v24, &v22);
  v23[0] = v10;
  v23[1] = v9;
  v25 = v19;
  v23[2] = v11;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  sub_1CA0F96B0((uint64_t)&v26, v23, a4, v12, v13, &v27);
  swift_release();
  __swift_destroy_boxed_opaque_existential_0((uint64_t)v23);
  v26 = v27;
  v27 = v8;
  static ElementIdentifierTupleSet.joinOnTargets(_:_:)((uint64_t *)&v27, (uint64_t *)&v26, v23);
  result = swift_bridgeObjectRelease();
  *a5 = v23[0];
  return result;
}

uint64_t NeighborRelationInOut.inverse()@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v4 = *v2;
  v5 = v2[1];
  v6 = v2[2];
  a2[3] = a1;
  a2[4] = MEMORY[0x1CAA4BB30](&protocol conformance descriptor for NeighborRelationInOut<A>, a1);
  *a2 = v4;
  a2[1] = v5;
  a2[2] = v6;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return swift_bridgeObjectRetain();
}

void type metadata accessor for ChainRelation()
{
  JUMPOUT(0x1CAA4BAC4);
}

uint64_t type metadata accessor for NeighborRelationIn(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for NeighborRelationIn);
}

uint64_t type metadata accessor for NeighborRelationOut(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for NeighborRelationOut);
}

uint64_t dispatch thunk of Relation.targetNodeIdentifiers(from:in:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(void))(a4 + 24))();
}

uint64_t dispatch thunk of Relation.adjacency(from:in:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(void))(a4 + 32))();
}

uint64_t dispatch thunk of Relation.adjacencyByJoining(with:in:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(void))(a4 + 40))();
}

uint64_t dispatch thunk of Relation.inverse()(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 48))();
}

uint64_t type metadata accessor for NodeFilterRelation(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for NodeFilterRelation);
}

uint64_t type metadata accessor for NeighborRelationInOut(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for NeighborRelationInOut);
}

Swift::Void __swiftcall __spoils<CF,ZF,NF,VF,X0,X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,X21,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> MAProgressReporter.reportProgress(_:)(Swift::Double a1)
{
  void *v1;

  if ((objc_msgSend(v1, sel_isCancelledWithProgress_, a1) & 1) != 0)
  {
    sub_1CA1F0C40();
    sub_1CA10AFAC();
    swift_allocError();
    sub_1CA1F08B0();
    swift_willThrow();
  }
}

unint64_t sub_1CA10AFAC()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1ED852A50;
  if (!qword_1ED852A50)
  {
    v1 = sub_1CA1F0C40();
    result = MEMORY[0x1CAA4BB30](MEMORY[0x1E0DF05E8], v1);
    atomic_store(result, (unint64_t *)&qword_1ED852A50);
  }
  return result;
}

Swift::Void __swiftcall __spoils<CF,ZF,NF,VF,X0,X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,X21,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> MAProgressReporter.reportProgress(completedUnits:outOf:)(Swift::Int completedUnits, Swift::Int outOf)
{
  void *v2;

  if ((objc_msgSend(v2, sel_isCancelledWithUnitsCompleted_outOf_, completedUnits, outOf) & 1) != 0)
  {
    sub_1CA1F0C40();
    sub_1CA10AFAC();
    swift_allocError();
    sub_1CA1F08B0();
    swift_willThrow();
  }
}

Swift::Void __swiftcall __spoils<CF,ZF,NF,VF,X0,X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,X21,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> MAProgressReporter.checkCancelled()()
{
  void *v0;

  if ((objc_msgSend(v0, sel_isCancelled) & 1) != 0)
  {
    sub_1CA1F0C40();
    sub_1CA10AFAC();
    swift_allocError();
    sub_1CA1F08B0();
    swift_willThrow();
  }
}

Swift::Void __swiftcall __spoils<CF,ZF,NF,VF,X0,X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,X21,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> MAProgressReporter.reportCompleted()()
{
  void *v0;

  if ((objc_msgSend(v0, sel_isCancelledWithProgress_, 1.0) & 1) != 0)
  {
    sub_1CA1F0C40();
    sub_1CA10AFAC();
    swift_allocError();
    sub_1CA1F08B0();
    swift_willThrow();
  }
}

uint64_t MAProgressReporter.splitEvenly(sequentialOperationCount:)(uint64_t a1)
{
  void *v1;
  double v2;
  void *v3;
  uint64_t v4;
  uint64_t v5;
  id v6;
  double v8;
  vDSP_Length v9;
  uint64_t v10;
  unint64_t v11;
  const double *v12;
  double v13;
  double v15[2];

  v3 = v1;
  v15[1] = *(double *)MEMORY[0x1E0C80C00];
  v4 = MEMORY[0x1E0DEE9D8];
  if (a1 >= 1)
  {
    if (a1 == 1)
    {
      __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_1ED852A58);
      v5 = swift_allocObject();
      *(_OWORD *)(v5 + 16) = xmmword_1CA1F9520;
      *(_QWORD *)(v5 + 32) = v3;
      *(_QWORD *)&v15[0] = v5;
      sub_1CA1F0B14();
      v4 = *(_QWORD *)&v15[0];
      v6 = v3;
    }
    else
    {
      *(_QWORD *)&v15[0] = MEMORY[0x1E0DEE9D8];
      sub_1CA0CD56C(0, a1 - 1, 0);
      v8 = v15[0];
      v9 = *(_QWORD *)(*(_QWORD *)&v15[0] + 16);
      v10 = 1;
      do
      {
        v15[0] = v8;
        v11 = *(_QWORD *)(*(_QWORD *)&v8 + 24);
        v12 = (const double *)(v9 + 1);
        if (v9 >= v11 >> 1)
        {
          sub_1CA0CD56C(v11 > 1, v9 + 1, 1);
          v8 = v15[0];
        }
        *(_QWORD *)(*(_QWORD *)&v8 + 16) = v12;
        *(double *)(*(_QWORD *)&v8 + 8 * v9 + 32) = (double)v10;
        if (a1 == v10)
        {
          __break(1u);
          goto LABEL_13;
        }
        ++v10;
        ++v9;
      }
      while (a1 != v10);
      v12 = (const double *)(*(_QWORD *)&v8 + 32);
      v2 = (double)a1;
      swift_bridgeObjectRetain();
      v13 = v8;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) != 0)
        goto LABEL_10;
LABEL_13:
      v13 = COERCE_DOUBLE(sub_1CA0B6058(*(_QWORD **)&v8));
LABEL_10:
      v15[0] = v2;
      swift_bridgeObjectRetain();
      vDSP_vsdivD(v12, 1, v15, (double *)(*(_QWORD *)&v13 + 32), 1, v9);
      swift_bridgeObjectRelease_n();
      v4 = MAProgressReporter.split(splitPoints:)(*(uint64_t *)&v13);
      swift_bridgeObjectRelease();
    }
  }
  return v4;
}

uint64_t MAProgressReporter.split(splitPoints:)(uint64_t a1)
{
  void *v1;
  uint64_t v3;
  uint64_t v4;
  double v5;
  double v6;
  id v7;
  id v8;
  uint64_t v10;

  v10 = MEMORY[0x1E0DEE9D8];
  v3 = *(_QWORD *)(a1 + 16);
  sub_1CA10BF34(v3 + 1, 0);
  sub_1CA1F0B14();
  if (v3)
  {
    swift_bridgeObjectRetain();
    v4 = 0;
    v5 = 0.0;
    do
    {
      v6 = v5;
      v5 = *(double *)(a1 + 8 * v4 + 32);
      v7 = objc_msgSend(v1, sel_childProgressReporterFromStart_toEnd_, v6, v5);
      MEMORY[0x1CAA4A1E0]();
      if (*(_QWORD *)((v10 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(_QWORD *)((v10 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1)
        sub_1CA1F0B2C();
      ++v4;
      sub_1CA1F0B8C();
      sub_1CA1F0B14();
    }
    while (v3 != v4);
    swift_bridgeObjectRelease();
  }
  else
  {
    v5 = 0.0;
  }
  v8 = objc_msgSend(v1, sel_childProgressReporterFromStart_toEnd_, v5, 1.0);
  MEMORY[0x1CAA4A1E0]();
  if (*(_QWORD *)((v10 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(_QWORD *)((v10 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1)
    sub_1CA1F0B2C();
  sub_1CA1F0B8C();
  sub_1CA1F0B14();
  return v10;
}

Swift::tuple_MAProgressReporter_MAProgressReporter __swiftcall MAProgressReporter.split(splitPoints:)(Swift::Double splitPoints)
{
  uint64_t inited;
  uint64_t v3;
  objc_class *v4;
  objc_class *v5;
  uint64_t v6;
  void *v7;
  objc_class *v8;
  objc_class *v9;
  objc_class *v10;
  Swift::tuple_MAProgressReporter_MAProgressReporter result;

  __swift_instantiateConcreteTypeFromMangledName(qword_1ED852848);
  inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_1CA1F9100;
  *(Swift::Double *)(inited + 32) = splitPoints;
  v3 = MAProgressReporter.split(splitPoints:)(inited);
  v4 = (objc_class *)swift_setDeallocating();
  if ((v3 & 0xC000000000000001) != 0)
  {
    v8 = (objc_class *)MEMORY[0x1CAA4A7A4](0, v3);
    v9 = (objc_class *)MEMORY[0x1CAA4A7A4](1, v3);
    goto LABEL_5;
  }
  v6 = *(_QWORD *)((v3 & 0xFFFFFFFFFFFFF8) + 0x10);
  if (!v6)
  {
    __break(1u);
    goto LABEL_8;
  }
  if (v6 == 1)
  {
LABEL_8:
    __break(1u);
    goto LABEL_9;
  }
  v7 = *(void **)(v3 + 40);
  v8 = (objc_class *)*(id *)(v3 + 32);
  v9 = v7;
LABEL_5:
  v10 = v9;
  swift_bridgeObjectRelease();
  v4 = v8;
  v5 = v10;
LABEL_9:
  result._1.super.isa = v5;
  result._0.super.isa = v4;
  return result;
}

Swift::tuple_MAProgressReporter_MAProgressReporter_MAProgressReporter __swiftcall MAProgressReporter.split(splitPoints:_:)(Swift::Double splitPoints, Swift::Double _)
{
  uint64_t inited;
  uint64_t v5;
  objc_class *v6;
  objc_class *v7;
  objc_class *v8;
  unint64_t v9;
  void *v10;
  void *v11;
  objc_class *v12;
  objc_class *v13;
  objc_class *v14;
  objc_class *v15;
  Swift::tuple_MAProgressReporter_MAProgressReporter_MAProgressReporter result;

  __swift_instantiateConcreteTypeFromMangledName(qword_1ED852848);
  inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_1CA1F90F0;
  *(Swift::Double *)(inited + 32) = splitPoints;
  *(Swift::Double *)(inited + 40) = _;
  v5 = MAProgressReporter.split(splitPoints:)(inited);
  v6 = (objc_class *)swift_setDeallocating();
  if ((v5 & 0xC000000000000001) != 0)
  {
    v12 = (objc_class *)MEMORY[0x1CAA4A7A4](0, v5);
    v13 = (objc_class *)MEMORY[0x1CAA4A7A4](1, v5);
    v14 = (objc_class *)MEMORY[0x1CAA4A7A4](2, v5);
    goto LABEL_6;
  }
  v9 = *(_QWORD *)((v5 & 0xFFFFFFFFFFFFF8) + 0x10);
  if (!v9)
  {
    __break(1u);
    goto LABEL_9;
  }
  if (v9 == 1)
  {
LABEL_9:
    __break(1u);
    goto LABEL_10;
  }
  if (v9 < 3)
  {
LABEL_10:
    __break(1u);
    goto LABEL_11;
  }
  v10 = *(void **)(v5 + 40);
  v11 = *(void **)(v5 + 48);
  v12 = (objc_class *)*(id *)(v5 + 32);
  v13 = v10;
  v14 = v11;
LABEL_6:
  v15 = v14;
  swift_bridgeObjectRelease();
  v6 = v12;
  v7 = v13;
  v8 = v15;
LABEL_11:
  result._2.super.isa = v8;
  result._1.super.isa = v7;
  result._0.super.isa = v6;
  return result;
}

Swift::tuple_MAProgressReporter_MAProgressReporter_MAProgressReporter_MAProgressReporter __swiftcall MAProgressReporter.split(splitPoints:_:_:)(Swift::Double splitPoints, Swift::Double _, Swift::Double a3)
{
  uint64_t inited;
  uint64_t v7;
  objc_class *v8;
  objc_class *v9;
  objc_class *v10;
  objc_class *v11;
  unint64_t v12;
  void *v13;
  void *v14;
  void *v15;
  objc_class *v16;
  objc_class *v17;
  objc_class *v18;
  objc_class *v19;
  objc_class *v20;
  Swift::tuple_MAProgressReporter_MAProgressReporter_MAProgressReporter_MAProgressReporter result;

  __swift_instantiateConcreteTypeFromMangledName(qword_1ED852848);
  inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_1CA1F9860;
  *(Swift::Double *)(inited + 32) = splitPoints;
  *(Swift::Double *)(inited + 40) = _;
  *(Swift::Double *)(inited + 48) = a3;
  v7 = MAProgressReporter.split(splitPoints:)(inited);
  v8 = (objc_class *)swift_setDeallocating();
  if ((v7 & 0xC000000000000001) != 0)
  {
    v16 = (objc_class *)MEMORY[0x1CAA4A7A4](0, v7);
    v17 = (objc_class *)MEMORY[0x1CAA4A7A4](1, v7);
    v18 = (objc_class *)MEMORY[0x1CAA4A7A4](2, v7);
    v19 = (objc_class *)MEMORY[0x1CAA4A7A4](3, v7);
    goto LABEL_7;
  }
  v12 = *(_QWORD *)((v7 & 0xFFFFFFFFFFFFF8) + 0x10);
  if (!v12)
  {
    __break(1u);
    goto LABEL_10;
  }
  if (v12 == 1)
  {
LABEL_10:
    __break(1u);
    goto LABEL_11;
  }
  if (v12 < 3)
  {
LABEL_11:
    __break(1u);
    goto LABEL_12;
  }
  if (v12 == 3)
  {
LABEL_12:
    __break(1u);
    goto LABEL_13;
  }
  v13 = *(void **)(v7 + 40);
  v14 = *(void **)(v7 + 48);
  v15 = *(void **)(v7 + 56);
  v16 = (objc_class *)*(id *)(v7 + 32);
  v17 = v13;
  v18 = v14;
  v19 = v15;
LABEL_7:
  v20 = v19;
  swift_bridgeObjectRelease();
  v8 = v16;
  v9 = v17;
  v10 = v18;
  v11 = v20;
LABEL_13:
  result._3.super.isa = v11;
  result._2.super.isa = v10;
  result._1.super.isa = v9;
  result._0.super.isa = v8;
  return result;
}

void __swiftcall MAProgressReporter.split(splitPoints:_:_:_:)(Swift::tuple_MAProgressReporter_MAProgressReporter_MAProgressReporter_MAProgressReporter_MAProgressReporter *__return_ptr retstr, Swift::Double splitPoints, Swift::Double _, Swift::Double a4, Swift::Double a5)
{
  uint64_t inited;
  uint64_t v11;
  unint64_t v12;
  void *v13;
  void *v14;
  void *v15;
  void *v16;
  objc_class *v17;
  objc_class *v18;
  objc_class *v19;
  objc_class *v20;
  objc_class *v21;
  objc_class *v22;

  __swift_instantiateConcreteTypeFromMangledName(qword_1ED852848);
  inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_1CA1FB460;
  *(Swift::Double *)(inited + 32) = splitPoints;
  *(Swift::Double *)(inited + 40) = _;
  *(Swift::Double *)(inited + 48) = a4;
  *(Swift::Double *)(inited + 56) = a5;
  v11 = MAProgressReporter.split(splitPoints:)(inited);
  swift_setDeallocating();
  if ((v11 & 0xC000000000000001) != 0)
  {
    v17 = (objc_class *)MEMORY[0x1CAA4A7A4](0, v11);
    v18 = (objc_class *)MEMORY[0x1CAA4A7A4](1, v11);
    v19 = (objc_class *)MEMORY[0x1CAA4A7A4](2, v11);
    v20 = (objc_class *)MEMORY[0x1CAA4A7A4](3, v11);
    v21 = (objc_class *)MEMORY[0x1CAA4A7A4](4, v11);
    goto LABEL_8;
  }
  v12 = *(_QWORD *)((v11 & 0xFFFFFFFFFFFFF8) + 0x10);
  if (!v12)
  {
    __break(1u);
    goto LABEL_11;
  }
  if (v12 == 1)
  {
LABEL_11:
    __break(1u);
    goto LABEL_12;
  }
  if (v12 < 3)
  {
LABEL_12:
    __break(1u);
    goto LABEL_13;
  }
  if (v12 == 3)
  {
LABEL_13:
    __break(1u);
    goto LABEL_14;
  }
  if (v12 >= 5)
  {
    v13 = *(void **)(v11 + 40);
    v14 = *(void **)(v11 + 48);
    v15 = *(void **)(v11 + 56);
    v16 = *(void **)(v11 + 64);
    v17 = (objc_class *)*(id *)(v11 + 32);
    v18 = v13;
    v19 = v14;
    v20 = v15;
    v21 = v16;
LABEL_8:
    v22 = v21;
    swift_bridgeObjectRelease();
    retstr->_0.super.isa = v17;
    retstr->_1.super.isa = v18;
    retstr->_2.super.isa = v19;
    retstr->_3.super.isa = v20;
    retstr->_4.super.isa = v22;
    return;
  }
LABEL_14:
  __break(1u);
}

void __swiftcall MAProgressReporter.split(splitPoints:_:_:_:_:)(Swift::tuple_MAProgressReporter_MAProgressReporter_MAProgressReporter_MAProgressReporter_MAProgressReporter_MAProgressReporter *__return_ptr retstr, Swift::Double splitPoints, Swift::Double _, Swift::Double a4, Swift::Double a5, Swift::Double a6)
{
  uint64_t inited;
  uint64_t v13;
  unint64_t v14;
  void *v15;
  void *v16;
  void *v17;
  void *v18;
  void *v19;
  objc_class *v20;
  objc_class *v21;
  objc_class *v22;
  objc_class *v23;
  objc_class *v24;
  objc_class *v25;
  objc_class *v26;

  __swift_instantiateConcreteTypeFromMangledName(qword_1ED852848);
  inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_1CA1FB470;
  *(Swift::Double *)(inited + 32) = splitPoints;
  *(Swift::Double *)(inited + 40) = _;
  *(Swift::Double *)(inited + 48) = a4;
  *(Swift::Double *)(inited + 56) = a5;
  *(Swift::Double *)(inited + 64) = a6;
  v13 = MAProgressReporter.split(splitPoints:)(inited);
  swift_setDeallocating();
  if ((v13 & 0xC000000000000001) != 0)
  {
    v20 = (objc_class *)MEMORY[0x1CAA4A7A4](0, v13);
    v21 = (objc_class *)MEMORY[0x1CAA4A7A4](1, v13);
    v22 = (objc_class *)MEMORY[0x1CAA4A7A4](2, v13);
    v23 = (objc_class *)MEMORY[0x1CAA4A7A4](3, v13);
    v24 = (objc_class *)MEMORY[0x1CAA4A7A4](4, v13);
    v25 = (objc_class *)MEMORY[0x1CAA4A7A4](5, v13);
    goto LABEL_9;
  }
  v14 = *(_QWORD *)((v13 & 0xFFFFFFFFFFFFF8) + 0x10);
  if (!v14)
  {
    __break(1u);
    goto LABEL_12;
  }
  if (v14 == 1)
  {
LABEL_12:
    __break(1u);
    goto LABEL_13;
  }
  if (v14 < 3)
  {
LABEL_13:
    __break(1u);
    goto LABEL_14;
  }
  if (v14 == 3)
  {
LABEL_14:
    __break(1u);
    goto LABEL_15;
  }
  if (v14 < 5)
  {
LABEL_15:
    __break(1u);
    goto LABEL_16;
  }
  if (v14 != 5)
  {
    v15 = *(void **)(v13 + 40);
    v16 = *(void **)(v13 + 48);
    v17 = *(void **)(v13 + 56);
    v18 = *(void **)(v13 + 64);
    v19 = *(void **)(v13 + 72);
    v20 = (objc_class *)*(id *)(v13 + 32);
    v21 = v15;
    v22 = v16;
    v23 = v17;
    v24 = v18;
    v25 = v19;
LABEL_9:
    v26 = v25;
    swift_bridgeObjectRelease();
    retstr->_0.super.isa = v20;
    retstr->_1.super.isa = v21;
    retstr->_2.super.isa = v22;
    retstr->_3.super.isa = v23;
    retstr->_4.super.isa = v24;
    retstr->_5.super.isa = v26;
    return;
  }
LABEL_16:
  __break(1u);
}

void __swiftcall MAProgressReporter.split(splitPoints:_:_:_:_:_:)(Swift::tuple_MAProgressReporter_MAProgressReporter_MAProgressReporter_MAProgressReporter_MAProgressReporter_MAProgressReporter_MAProgressReporter *__return_ptr retstr, Swift::Double splitPoints, Swift::Double _, Swift::Double a4, Swift::Double a5, Swift::Double a6, Swift::Double a7)
{
  uint64_t inited;
  uint64_t v15;
  unint64_t v16;
  void *v17;
  void *v18;
  void *v19;
  void *v20;
  void *v21;
  void *v22;
  objc_class *v23;
  objc_class *v24;
  objc_class *v25;
  objc_class *v26;
  objc_class *v27;
  objc_class *v28;
  objc_class *v29;
  objc_class *v30;

  __swift_instantiateConcreteTypeFromMangledName(qword_1ED852848);
  inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_1CA1FB480;
  *(Swift::Double *)(inited + 32) = splitPoints;
  *(Swift::Double *)(inited + 40) = _;
  *(Swift::Double *)(inited + 48) = a4;
  *(Swift::Double *)(inited + 56) = a5;
  *(Swift::Double *)(inited + 64) = a6;
  *(Swift::Double *)(inited + 72) = a7;
  v15 = MAProgressReporter.split(splitPoints:)(inited);
  swift_setDeallocating();
  if ((v15 & 0xC000000000000001) != 0)
  {
    v23 = (objc_class *)MEMORY[0x1CAA4A7A4](0, v15);
    v24 = (objc_class *)MEMORY[0x1CAA4A7A4](1, v15);
    v25 = (objc_class *)MEMORY[0x1CAA4A7A4](2, v15);
    v26 = (objc_class *)MEMORY[0x1CAA4A7A4](3, v15);
    v27 = (objc_class *)MEMORY[0x1CAA4A7A4](4, v15);
    v28 = (objc_class *)MEMORY[0x1CAA4A7A4](5, v15);
    v29 = (objc_class *)MEMORY[0x1CAA4A7A4](6, v15);
    goto LABEL_10;
  }
  v16 = *(_QWORD *)((v15 & 0xFFFFFFFFFFFFF8) + 0x10);
  if (!v16)
  {
    __break(1u);
    goto LABEL_13;
  }
  if (v16 == 1)
  {
LABEL_13:
    __break(1u);
    goto LABEL_14;
  }
  if (v16 < 3)
  {
LABEL_14:
    __break(1u);
    goto LABEL_15;
  }
  if (v16 == 3)
  {
LABEL_15:
    __break(1u);
    goto LABEL_16;
  }
  if (v16 < 5)
  {
LABEL_16:
    __break(1u);
    goto LABEL_17;
  }
  if (v16 == 5)
  {
LABEL_17:
    __break(1u);
    goto LABEL_18;
  }
  if (v16 >= 7)
  {
    v17 = *(void **)(v15 + 40);
    v18 = *(void **)(v15 + 48);
    v19 = *(void **)(v15 + 56);
    v20 = *(void **)(v15 + 64);
    v21 = *(void **)(v15 + 72);
    v22 = *(void **)(v15 + 80);
    v23 = (objc_class *)*(id *)(v15 + 32);
    v24 = v17;
    v25 = v18;
    v26 = v19;
    v27 = v20;
    v28 = v21;
    v29 = v22;
LABEL_10:
    v30 = v29;
    swift_bridgeObjectRelease();
    retstr->_0.super.isa = v23;
    retstr->_1.super.isa = v24;
    retstr->_2.super.isa = v25;
    retstr->_3.super.isa = v26;
    retstr->_4.super.isa = v27;
    retstr->_5.super.isa = v28;
    retstr->_6.super.isa = v30;
    return;
  }
LABEL_18:
  __break(1u);
}

uint64_t MAProgressReporter.observe(_:)(void *a1)
{
  void *v1;
  uint64_t v3;
  id v4;
  id v5;
  uint64_t v6;

  swift_getKeyPath();
  v3 = swift_allocObject();
  *(_QWORD *)(v3 + 16) = v1;
  *(_QWORD *)(v3 + 24) = a1;
  v4 = v1;
  v5 = a1;
  v6 = sub_1CA1F07E4();
  swift_release();
  swift_release();
  return v6;
}

void sub_1CA10BD48(uint64_t a1, uint64_t a2, void *a3, void *a4)
{
  void *v4;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  id v12;
  void *v13;
  id v14;
  unint64_t v15;

  v7 = sub_1CA1F0C40();
  v8 = *(_QWORD *)(v7 - 8);
  MEMORY[0x1E0C80A78](v7, v9);
  v11 = (char *)&v13 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_instantiateConcreteTypeFromMangledName(qword_1EF9390B0);
  sub_1CA1F07D8();
  if ((v15 & 1) != 0)
  {
    __break(1u);
    goto LABEL_7;
  }
  if (!objc_msgSend(a3, sel_isCancelledWithProgress_, *(double *)&v14))
    return;
  sub_1CA10AFAC();
  v4 = (void *)swift_allocError();
  sub_1CA1F08B0();
  swift_willThrow();
  v14 = v4;
  v12 = v4;
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EF937438);
  if ((swift_dynamicCast() & 1) == 0)
  {
LABEL_7:

    v14 = 0;
    v15 = 0xE000000000000000;
    sub_1CA1F1054();
    sub_1CA1F0A3C();
    v13 = v4;
    sub_1CA1F1180();
    sub_1CA1F11C8();
    __break(1u);
    return;
  }

  objc_msgSend(a4, sel_cancel);
  (*(void (**)(char *, uint64_t))(v8 + 8))(v11, v7);

}

uint64_t sub_1CA10BF34(uint64_t a1, char a2)
{
  uint64_t *v2;
  unint64_t v5;
  uint64_t result;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v5 = *v2;
  result = swift_isUniquelyReferenced_nonNull_bridgeObject();
  *v2 = v5;
  v7 = 0;
  if ((result & 1) != 0 && (v5 & 0x8000000000000000) == 0 && (v5 & 0x4000000000000000) == 0)
  {
    if (a1 <= *(_QWORD *)((v5 & 0xFFFFFFFFFFFFF8) + 0x18) >> 1)
      return result;
    v7 = 1;
  }
  if (v5 >> 62)
  {
    swift_bridgeObjectRetain();
    v8 = sub_1CA1F1234();
    swift_bridgeObjectRelease();
  }
  else
  {
    v8 = *(_QWORD *)((v5 & 0xFFFFFFFFFFFFF8) + 0x10);
  }
  if (v8 <= a1)
    v9 = a1;
  else
    v9 = v8;
  result = MEMORY[0x1CAA4A7B0](v7, v9, a2 & 1, v5);
  *v2 = result;
  return result;
}

char *keypath_get_selector_fractionCompleted()
{
  return sel_fractionCompleted;
}

id sub_1CA10BFFC@<X0>(id *a1@<X0>, _QWORD *a2@<X8>)
{
  id result;
  uint64_t v4;

  result = objc_msgSend(*a1, sel_fractionCompleted);
  *a2 = v4;
  return result;
}

uint64_t sub_1CA10C02C()
{
  uint64_t v0;

  return swift_deallocObject();
}

void sub_1CA10C058(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  sub_1CA10BD48(a1, a2, *(void **)(v2 + 16), *(void **)(v2 + 24));
}

uint64_t static UniqueSortedBuffer.Union.Index.< infix(_:_:)(uint64_t a1, uint64_t a2)
{
  char v2;
  BOOL v3;

  v2 = 1;
  v3 = *(_QWORD *)a1 < *(_QWORD *)a2 || *(_QWORD *)(a1 + 8) < *(_QWORD *)(a2 + 8);
  if (!v3 && ((*(unsigned __int8 *)(a1 + 16) ^ 1 | *(unsigned __int8 *)(a2 + 16)) & 1) != 0)
    v2 = *(_BYTE *)(a1 + 17) & (*(_BYTE *)(a2 + 17) ^ 1);
  return v2 & 1;
}

BOOL static UniqueSortedBuffer.Union.Index.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  _BOOL4 v3;

  v3 = *(_QWORD *)a1 != *(_QWORD *)a2 || *(_QWORD *)(a1 + 8) != *(_QWORD *)(a2 + 8);
  return ((v3 | *(unsigned __int8 *)(a1 + 16) ^ *(unsigned __int8 *)(a2 + 16) | *(unsigned __int8 *)(a2 + 17) ^ *(unsigned __int8 *)(a1 + 17)) & 1) == 0;
}

void UniqueSortedBuffer.Union.startIndex.getter(uint64_t a1)
{
  __int128 *v1;
  __int128 v2;
  __int128 v3;
  _QWORD v4[2];
  __int16 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;

  v2 = v1[1];
  v6 = *v1;
  v7 = v2;
  v3 = v1[3];
  v8 = v1[2];
  v9 = v3;
  v4[0] = -1;
  v4[1] = -1;
  v5 = 257;
  UniqueSortedBuffer.Union.index(after:)((uint64_t)v4, a1);
}

void UniqueSortedBuffer.Union.index(after:)(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  BOOL v21;
  uint64_t v22;
  uint64_t v23;
  BOOL v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  uint64_t v28;
  char v29;
  char v30;
  void (*v31)(uint64_t, uint64_t);
  _QWORD *v32;
  uint64_t v33;
  uint64_t v34;
  char *v35;
  uint64_t v36;
  uint64_t v37;
  _QWORD *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  BOOL v48;

  v3 = *(_QWORD *)(a2 + 16);
  MEMORY[0x1E0C80A78](a1, a2);
  MEMORY[0x1E0C80A78](v4, v5);
  v14 = *v12;
  v13 = v12[1];
  v15 = *((unsigned __int8 *)v12 + 16);
  v16 = *((unsigned __int8 *)v12 + 17);
  v17 = *v2;
  v18 = v2[1];
  v19 = v2[2];
  v20 = v2[3];
  v42 = v2[4];
  v41 = v2[5];
  v40 = v2[6];
  v39 = v2[7];
  if (v15 == 1)
  {
    v21 = __OFADD__(v14++, 1);
    if (v21)
    {
      __break(1u);
LABEL_11:
      __break(1u);
      return;
    }
  }
  if (v16)
  {
    v21 = __OFADD__(v13++, 1);
    if (v21)
      goto LABEL_11;
  }
  v35 = (char *)&v33 - v9;
  v36 = v11;
  v37 = v10;
  v38 = v8;
  v44 = v17;
  v45 = v18;
  v34 = v19;
  v46 = v19;
  v47 = v20;
  type metadata accessor for UniqueSortedBuffer(0, v3, *(_QWORD *)(v6 + 24), v7);
  v22 = UniqueSortedBuffer.count.getter();
  v48 = v14 != v22;
  v44 = v42;
  v45 = v41;
  v46 = v40;
  v47 = v39;
  v23 = UniqueSortedBuffer.count.getter();
  v24 = v14 == v22;
  v25 = v13;
  if (v24 || v13 == v23)
  {
    v30 = v13 != v23;
    v29 = v48;
  }
  else
  {
    v44 = v17;
    v45 = v18;
    v46 = v34;
    v47 = v20;
    v43 = v14;
    v26 = sub_1CA1F09F4();
    MEMORY[0x1CAA4BB30](MEMORY[0x1E0DEA5E8], v26);
    sub_1CA1F13C0();
    v27 = v35;
    sub_1CA1F13CC();
    v44 = v42;
    v45 = v41;
    v46 = v40;
    v47 = v39;
    v43 = v13;
    v28 = v36;
    sub_1CA1F13CC();
    v29 = sub_1CA1F0994();
    v30 = sub_1CA1F0994();
    v31 = *(void (**)(uint64_t, uint64_t))(v37 + 8);
    v31(v28, v3);
    v31((uint64_t)v27, v3);
  }
  v32 = v38;
  *v38 = v14;
  v32[1] = v25;
  *((_BYTE *)v32 + 16) = v29 & 1;
  *((_BYTE *)v32 + 17) = v30 & 1;
}

uint64_t UniqueSortedBuffer.Union.endIndex.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X3>, uint64_t a3@<X8>)
{
  uint64_t v4;
  uint64_t result;

  type metadata accessor for UniqueSortedBuffer(0, *(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), a2);
  v4 = UniqueSortedBuffer.count.getter();
  result = UniqueSortedBuffer.count.getter();
  *(_QWORD *)a3 = v4;
  *(_QWORD *)(a3 + 8) = result;
  *(_WORD *)(a3 + 16) = 0;
  return result;
}

uint64_t UniqueSortedBuffer.Union.subscript.getter()
{
  uint64_t v0;

  v0 = sub_1CA1F09F4();
  MEMORY[0x1CAA4BB30](MEMORY[0x1E0DEA5E8], v0);
  sub_1CA1F13C0();
  return sub_1CA1F13CC();
}

void sub_1CA10C4B4()
{
  JUMPOUT(0x1CAA4BB30);
}

void sub_1CA10C4C4()
{
  JUMPOUT(0x1CAA4BB30);
}

void sub_1CA10C4D4()
{
  JUMPOUT(0x1CAA4BB30);
}

void (*sub_1CA10C4EC(_QWORD *a1, uint64_t a2, uint64_t a3))(_QWORD *a1)
{
  _QWORD *v6;

  v6 = malloc(0x28uLL);
  *a1 = v6;
  v6[4] = sub_1CA10C548(v6, a2, a3);
  return sub_1CA0C67C8;
}

void (*sub_1CA10C548(_QWORD *a1, uint64_t a2, uint64_t a3))(_QWORD *a1)
{
  uint64_t v3;
  uint64_t v4;

  v3 = *(_QWORD *)(a3 + 16);
  v4 = *(_QWORD *)(v3 - 8);
  *a1 = v3;
  a1[1] = v4;
  a1[2] = malloc(*(_QWORD *)(v4 + 64));
  UniqueSortedBuffer.Union.subscript.getter();
  return sub_1CA0A7D14;
}

double sub_1CA10C5B8(uint64_t a1, uint64_t a2)
{
  double result;
  __int128 v4;
  char v5;
  char v6;

  UniqueSortedBuffer.Union.index(after:)(a1, a2);
  result = *(double *)&v4;
  *(_OWORD *)a1 = v4;
  *(_BYTE *)(a1 + 16) = v5;
  *(_BYTE *)(a1 + 17) = v6;
  return result;
}

__n128 sub_1CA10C5FC@<Q0>(uint64_t a1@<X0>, __n128 *a2@<X8>)
{
  unint64_t *v2;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  __n128 result;
  __n128 v13;
  unsigned __int8 v14;
  unsigned __int8 v15;

  v4 = *v2;
  v5 = v2[1];
  v6 = v2[2];
  v7 = v2[3];
  v8 = v2[4];
  v9 = v2[5];
  v10 = v2[6];
  v11 = v2[7];
  UniqueSortedBuffer.Union.startIndex.getter(a1);
  result = v13;
  a2->n128_u64[0] = v4;
  a2->n128_u64[1] = v5;
  a2[1].n128_u64[0] = v6;
  a2[1].n128_u64[1] = v7;
  a2[2].n128_u64[0] = v8;
  a2[2].n128_u64[1] = v9;
  a2[3].n128_u64[0] = v10;
  a2[3].n128_u64[1] = v11;
  a2[4] = v13;
  a2[5].n128_u8[0] = v14;
  a2[5].n128_u8[1] = v15;
  return result;
}

uint64_t sub_1CA10C694(uint64_t a1)
{
  MEMORY[0x1CAA4BB30](&protocol conformance descriptor for UniqueSortedBuffer<A>.Union, a1);
  return sub_1CA1F0D3C();
}

uint64_t sub_1CA10C6C8(uint64_t a1)
{
  MEMORY[0x1CAA4BB30](&protocol conformance descriptor for UniqueSortedBuffer<A>.Union, a1);
  return sub_1CA1F0D48();
}

uint64_t type metadata accessor for UniqueSortedBuffer.Union(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for UniqueSortedBuffer.Union);
}

uint64_t type metadata accessor for UniqueSortedBuffer.Union.Index(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for UniqueSortedBuffer.Union.Index);
}

uint64_t sub_1CA10C734@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, int64x2_t *a3@<X8>)
{
  unint64_t v3;
  uint64_t v4;
  int64x2_t *v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  float v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  unint64_t v23;
  unint64_t v24;
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t result;
  int64x2_t v30;
  __int128 v32;

  v3 = MEMORY[0x1E0DEE9D8];
  *(_QWORD *)&v32 = MEMORY[0x1E0DEE9D8];
  *((_QWORD *)&v32 + 1) = MEMORY[0x1E0DEE9D8];
  v4 = a1 + 1;
  if (__OFADD__(a1, 1))
    goto LABEL_85;
  v6 = a3;
  v7 = *(_QWORD *)(a2 + 16);
  if (!v7)
  {
    result = swift_bridgeObjectRelease();
    v30 = vdupq_n_s64(v3);
LABEL_69:
    *v6 = v30;
    return result;
  }
  v8 = a1;
  v9 = 0;
  v10 = a2 + 32;
  while (v9 < *(_QWORD *)(a2 + 16))
  {
    v11 = *(float *)(v10 + 4 * v9);
    v12 = (_QWORD *)*((_QWORD *)&v32 + 1);
    v13 = *((_QWORD *)&v32 + 1) + 32;
    v14 = *(_QWORD *)(*((_QWORD *)&v32 + 1) + 16);
    if ((unint64_t)v14 < 0x81)
    {
      if (!v14)
      {
        if (v11 != 0.0)
        {
          sub_1CA0E6654(0, 0, *(float *)(v10 + 4 * v9));
          v14 = 0;
          goto LABEL_40;
        }
        goto LABEL_55;
      }
      v17 = 0;
LABEL_18:
      v19 = *(_QWORD *)(v13 + 8 * v17);
      if (v19 >= v8)
      {
        v15 = v17;
      }
      else
      {
        v15 = v17 + 1;
        if (v17 + 1 >= v14)
          goto LABEL_35;
        v19 = *(_QWORD *)(v13 + 8 * v15);
        if (v19 < v8)
        {
          v15 = v17 + 2;
          if (v17 + 2 >= v14)
            goto LABEL_35;
          v19 = *(_QWORD *)(v13 + 8 * v15);
          if (v19 < v8)
          {
            v15 = v17 + 3;
            if (v17 + 3 >= v14)
              goto LABEL_35;
            v19 = *(_QWORD *)(v13 + 8 * v15);
            if (v19 < v8)
            {
              v15 = v17 + 4;
              if (v17 + 4 >= v14)
                goto LABEL_35;
              while (1)
              {
                v15 = v17 + 4;
                v19 = *(_QWORD *)(*((_QWORD *)&v32 + 1) + 64 + 8 * v17);
                if (v19 >= v8)
                  break;
                v20 = v17 + 5;
                if (__OFADD__(v15, 1))
                  goto LABEL_86;
                ++v17;
                if (v20 >= v14)
                  goto LABEL_36;
              }
            }
          }
        }
      }
      if (v8 < v19)
        v14 = v15;
    }
    else
    {
      v15 = (unint64_t)v14 >> 1;
      v16 = *(_QWORD *)(v13 + 8 * ((unint64_t)v14 >> 1));
      if (v16 != v8)
      {
        v17 = 0;
        while (1)
        {
          if (v8 >= v16)
          {
            v17 = v15 + 1;
            if (__OFADD__(v15, 1))
              goto LABEL_72;
          }
          else
          {
            v14 = v15;
          }
          v18 = v14 - v17;
          if (__OFSUB__(v14, v17))
          {
            __break(1u);
LABEL_71:
            __break(1u);
LABEL_72:
            __break(1u);
            goto LABEL_73;
          }
          if (v18 < 129)
            break;
          v15 = v17 + ((unint64_t)v18 >> 1);
          if (__OFADD__(v17, (unint64_t)v18 >> 1))
            goto LABEL_71;
          v16 = *(_QWORD *)(v13 + 8 * v15);
          if (v16 == v8)
            goto LABEL_35;
        }
        v15 = v17;
        if (v17 < v14)
          goto LABEL_18;
      }
    }
LABEL_35:
    if (v15 == v14)
    {
LABEL_36:
      if (v11 != 0.0)
      {
        if (*(_QWORD *)(v32 + 16) < v14)
          goto LABEL_79;
        if (v14 < 0)
          goto LABEL_80;
        sub_1CA0E6654(v14, v14, *(float *)(v10 + 4 * v9));
        if (*(_QWORD *)(*((_QWORD *)&v32 + 1) + 16) < (unint64_t)v14)
          goto LABEL_81;
LABEL_40:
        sub_1CA0E64EC(v14, v14, v8);
        v21 = v4 + 1;
        if (__OFADD__(v4, 1))
          goto LABEL_74;
        goto LABEL_56;
      }
      goto LABEL_55;
    }
    v22 = (char *)v32;
    if (v11 == 0.0)
    {
      if ((v15 & 0x8000000000000000) != 0)
        goto LABEL_75;
      if (v15 >= *(_QWORD *)(v32 + 16))
        goto LABEL_76;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        v22 = sub_1CA0B6080(v32);
      v23 = *((_QWORD *)v22 + 2);
      if (v15 >= v23)
        goto LABEL_77;
      v24 = v23 - 1;
      v25 = v23 - 1 - v15;
      if (v25 < 0)
        goto LABEL_87;
      memmove(&v22[4 * v15 + 32], &v22[4 * v15 + 36], 4 * v25);
      *((_QWORD *)v22 + 2) = v24;
      *(_QWORD *)&v32 = v22;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        v12 = sub_1CA0B606C(*((_QWORD **)&v32 + 1));
      v26 = v12[2];
      if (v15 >= v26)
        goto LABEL_78;
      v27 = v26 - 1;
      v28 = v26 - 1 - v15;
      if (v28 < 0)
        goto LABEL_87;
      memmove(&v12[v15 + 4], &v12[v15 + 5], 8 * v28);
      v12[2] = v27;
      *((_QWORD *)&v32 + 1) = v12;
LABEL_55:
      v21 = v4 + 1;
      if (__OFADD__(v4, 1))
        goto LABEL_74;
      goto LABEL_56;
    }
    if ((v15 & 0x8000000000000000) != 0)
      goto LABEL_82;
    if (v15 >= *(_QWORD *)(v32 + 16))
      goto LABEL_83;
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      v22 = sub_1CA0B6080(v32);
    if (v15 >= *((_QWORD *)v22 + 2))
      goto LABEL_84;
    *(float *)&v22[4 * v15 + 32] = v11;
    *(_QWORD *)&v32 = v22;
    v21 = v4 + 1;
    if (__OFADD__(v4, 1))
      goto LABEL_74;
LABEL_56:
    ++v9;
    v8 = v4;
    v4 = v21;
    if (v9 == v7)
    {
      result = swift_bridgeObjectRelease();
      v30 = (int64x2_t)v32;
      v6 = a3;
      goto LABEL_69;
    }
  }
LABEL_73:
  __break(1u);
LABEL_74:
  __break(1u);
LABEL_75:
  __break(1u);
LABEL_76:
  __break(1u);
LABEL_77:
  __break(1u);
LABEL_78:
  __break(1u);
LABEL_79:
  __break(1u);
LABEL_80:
  __break(1u);
LABEL_81:
  __break(1u);
LABEL_82:
  __break(1u);
LABEL_83:
  __break(1u);
LABEL_84:
  __break(1u);
LABEL_85:
  __break(1u);
LABEL_86:
  __break(1u);
LABEL_87:
  result = sub_1CA1F1270();
  __break(1u);
  return result;
}

uint64_t sub_1CA10CB44@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, int64x2_t *a3@<X8>)
{
  unint64_t v3;
  uint64_t v4;
  int64x2_t *v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  double v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  unint64_t v23;
  unint64_t v24;
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t result;
  int64x2_t v30;
  int64x2_t v32;

  v3 = MEMORY[0x1E0DEE9D8];
  v32.i64[0] = MEMORY[0x1E0DEE9D8];
  v32.i64[1] = MEMORY[0x1E0DEE9D8];
  v4 = a1 + 1;
  if (__OFADD__(a1, 1))
    goto LABEL_85;
  v6 = a3;
  v7 = *(_QWORD *)(a2 + 16);
  if (!v7)
  {
    result = swift_bridgeObjectRelease();
    v30 = vdupq_n_s64(v3);
LABEL_69:
    *v6 = v30;
    return result;
  }
  v8 = a1;
  v9 = 0;
  v10 = a2 + 32;
  while (v9 < *(_QWORD *)(a2 + 16))
  {
    v11 = *(double *)(v10 + 8 * v9);
    v12 = (_QWORD *)v32.i64[1];
    v13 = v32.i64[1] + 32;
    v14 = *(_QWORD *)(v32.i64[1] + 16);
    if ((unint64_t)v14 < 0x81)
    {
      if (!v14)
      {
        if (v11 != 0.0)
        {
          sub_1CA0E67BC(0, 0, *(double *)(v10 + 8 * v9));
          v14 = 0;
          goto LABEL_40;
        }
        goto LABEL_55;
      }
      v17 = 0;
LABEL_18:
      v19 = *(_QWORD *)(v13 + 8 * v17);
      if (v19 >= v8)
      {
        v15 = v17;
      }
      else
      {
        v15 = v17 + 1;
        if (v17 + 1 >= v14)
          goto LABEL_35;
        v19 = *(_QWORD *)(v13 + 8 * v15);
        if (v19 < v8)
        {
          v15 = v17 + 2;
          if (v17 + 2 >= v14)
            goto LABEL_35;
          v19 = *(_QWORD *)(v13 + 8 * v15);
          if (v19 < v8)
          {
            v15 = v17 + 3;
            if (v17 + 3 >= v14)
              goto LABEL_35;
            v19 = *(_QWORD *)(v13 + 8 * v15);
            if (v19 < v8)
            {
              v15 = v17 + 4;
              if (v17 + 4 >= v14)
                goto LABEL_35;
              while (1)
              {
                v15 = v17 + 4;
                v19 = *(_QWORD *)(v32.i64[1] + 64 + 8 * v17);
                if (v19 >= v8)
                  break;
                v20 = v17 + 5;
                if (__OFADD__(v15, 1))
                  goto LABEL_86;
                ++v17;
                if (v20 >= v14)
                  goto LABEL_36;
              }
            }
          }
        }
      }
      if (v8 < v19)
        v14 = v15;
    }
    else
    {
      v15 = (unint64_t)v14 >> 1;
      v16 = *(_QWORD *)(v13 + 8 * ((unint64_t)v14 >> 1));
      if (v16 != v8)
      {
        v17 = 0;
        while (1)
        {
          if (v8 >= v16)
          {
            v17 = v15 + 1;
            if (__OFADD__(v15, 1))
              goto LABEL_72;
          }
          else
          {
            v14 = v15;
          }
          v18 = v14 - v17;
          if (__OFSUB__(v14, v17))
          {
            __break(1u);
LABEL_71:
            __break(1u);
LABEL_72:
            __break(1u);
            goto LABEL_73;
          }
          if (v18 < 129)
            break;
          v15 = v17 + ((unint64_t)v18 >> 1);
          if (__OFADD__(v17, (unint64_t)v18 >> 1))
            goto LABEL_71;
          v16 = *(_QWORD *)(v13 + 8 * v15);
          if (v16 == v8)
            goto LABEL_35;
        }
        v15 = v17;
        if (v17 < v14)
          goto LABEL_18;
      }
    }
LABEL_35:
    if (v15 == v14)
    {
LABEL_36:
      if (v11 != 0.0)
      {
        if (*(_QWORD *)(v32.i64[0] + 16) < v14)
          goto LABEL_79;
        if (v14 < 0)
          goto LABEL_80;
        sub_1CA0E67BC(v14, v14, *(double *)(v10 + 8 * v9));
        if (*(_QWORD *)(v32.i64[1] + 16) < (unint64_t)v14)
          goto LABEL_81;
LABEL_40:
        sub_1CA0E64EC(v14, v14, v8);
        v21 = v4 + 1;
        if (__OFADD__(v4, 1))
          goto LABEL_74;
        goto LABEL_56;
      }
      goto LABEL_55;
    }
    v22 = (_QWORD *)v32.i64[0];
    if (v11 == 0.0)
    {
      if ((v15 & 0x8000000000000000) != 0)
        goto LABEL_75;
      if (v15 >= *(_QWORD *)(v32.i64[0] + 16))
        goto LABEL_76;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        v22 = sub_1CA0B6058(v32.i64[0]);
      v23 = v22[2];
      if (v15 >= v23)
        goto LABEL_77;
      v24 = v23 - 1;
      v25 = v23 - 1 - v15;
      if (v25 < 0)
        goto LABEL_87;
      memmove(&v22[v15 + 4], &v22[v15 + 5], 8 * v25);
      v22[2] = v24;
      v32.i64[0] = (uint64_t)v22;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        v12 = sub_1CA0B606C((_QWORD *)v32.i64[1]);
      v26 = v12[2];
      if (v15 >= v26)
        goto LABEL_78;
      v27 = v26 - 1;
      v28 = v26 - 1 - v15;
      if (v28 < 0)
        goto LABEL_87;
      memmove(&v12[v15 + 4], &v12[v15 + 5], 8 * v28);
      v12[2] = v27;
      v32.i64[1] = (uint64_t)v12;
LABEL_55:
      v21 = v4 + 1;
      if (__OFADD__(v4, 1))
        goto LABEL_74;
      goto LABEL_56;
    }
    if ((v15 & 0x8000000000000000) != 0)
      goto LABEL_82;
    if (v15 >= *(_QWORD *)(v32.i64[0] + 16))
      goto LABEL_83;
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      v22 = sub_1CA0B6058(v32.i64[0]);
    if (v15 >= v22[2])
      goto LABEL_84;
    *(double *)&v22[v15 + 4] = v11;
    v32.i64[0] = (uint64_t)v22;
    v21 = v4 + 1;
    if (__OFADD__(v4, 1))
      goto LABEL_74;
LABEL_56:
    ++v9;
    v8 = v4;
    v4 = v21;
    if (v9 == v7)
    {
      result = swift_bridgeObjectRelease();
      v30 = v32;
      v6 = a3;
      goto LABEL_69;
    }
  }
LABEL_73:
  __break(1u);
LABEL_74:
  __break(1u);
LABEL_75:
  __break(1u);
LABEL_76:
  __break(1u);
LABEL_77:
  __break(1u);
LABEL_78:
  __break(1u);
LABEL_79:
  __break(1u);
LABEL_80:
  __break(1u);
LABEL_81:
  __break(1u);
LABEL_82:
  __break(1u);
LABEL_83:
  __break(1u);
LABEL_84:
  __break(1u);
LABEL_85:
  __break(1u);
LABEL_86:
  __break(1u);
LABEL_87:
  result = sub_1CA1F1270();
  __break(1u);
  return result;
}

uint64_t static SparseArrayProtocol<>.* infix(_:_:)@<X0>(uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t *a3@<X8>, float a4@<S0>)
{
  uint64_t result;
  uint64_t v6;
  uint64_t v10;
  uint64_t v11;
  _QWORD v12[4];
  int64x2_t v13;

  if (a4 == 0.0)
  {
    sub_1CA10C734(0, MEMORY[0x1E0DEE9D8], &v13);
    result = v13.i64[1];
    v6 = v13.i64[0];
LABEL_4:
    *a3 = v6;
    a3[1] = result;
    return result;
  }
  v10 = (*(uint64_t (**)(uint64_t, uint64_t))(a2 + 32))(a1, a2);
  *(float *)v13.i32 = a4;
  MEMORY[0x1E0C80A78](v10, v11);
  v12[2] = &v13;
  v6 = sub_1CA0B49E4((void (*)(int *__return_ptr, int *))sub_1CA10DBFC, (uint64_t)v12, v10);
  swift_bridgeObjectRelease();
  result = (*(uint64_t (**)(uint64_t, uint64_t))(a2 + 40))(a1, a2);
  if (*(_QWORD *)(v6 + 16) == *(_QWORD *)(result + 16))
    goto LABEL_4;
  __break(1u);
  return result;
}

{
  return static SparseArrayProtocol<>.* infix(_:_:)(a1, a2, a3, a4);
}

uint64_t static SparseArrayProtocol<>./ infix(_:_:)@<X0>(uint64_t a1@<X1>, uint64_t a2@<X2>, char **a3@<X8>, float a4@<S0>)
{
  uint64_t result;
  char *v7;
  uint64_t v10;
  vDSP_Length v11;
  int64x2_t v12;
  float v13;

  if (a4 == INFINITY)
  {
    sub_1CA10C734(0, MEMORY[0x1E0DEE9D8], &v12);
    result = v12.i64[1];
    v7 = (char *)v12.i64[0];
LABEL_6:
    *a3 = v7;
    a3[1] = (char *)result;
    return result;
  }
  v10 = (*(uint64_t (**)(uint64_t, uint64_t))(a2 + 32))(a1, a2);
  v11 = *(_QWORD *)(v10 + 16);
  swift_bridgeObjectRetain();
  v7 = (char *)v10;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    v7 = sub_1CA0B6080(v10);
  v13 = a4;
  swift_bridgeObjectRetain();
  vDSP_vsdiv((const float *)(v10 + 32), 1, &v13, (float *)v7 + 8, 1, v11);
  swift_bridgeObjectRelease_n();
  result = (*(uint64_t (**)(uint64_t, uint64_t))(a2 + 40))(a1, a2);
  if (*((_QWORD *)v7 + 2) == *(_QWORD *)(result + 16))
    goto LABEL_6;
  __break(1u);
  return result;
}

uint64_t static SparseArrayProtocol<>..** infix(_:_:)@<X0>(uint64_t a1@<X1>, uint64_t a2@<X2>, char **a3@<X8>, float a4@<S0>)
{
  char *v4;
  uint64_t v9;
  uint64_t result;
  float v11;
  int v12;
  uint64_t v13;

  v13 = *MEMORY[0x1E0C80C00];
  v9 = (*(uint64_t (**)(uint64_t, uint64_t))(a2 + 32))(a1, a2);
  if (*(_QWORD *)(v9 + 16) >> 31)
  {
    __break(1u);
  }
  else
  {
    v4 = (char *)v9;
    v12 = *(_QWORD *)(v9 + 16);
    v11 = a4;
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) != 0)
      goto LABEL_3;
  }
  v4 = sub_1CA0B6080((uint64_t)v4);
LABEL_3:
  vvpowsf((float *)v4 + 8, &v11, (const float *)v4 + 8, &v12);
  result = (*(uint64_t (**)(uint64_t, uint64_t))(a2 + 40))(a1, a2);
  if (*((_QWORD *)v4 + 2) != *(_QWORD *)(result + 16))
    __break(1u);
  *a3 = v4;
  a3[1] = (char *)result;
  return result;
}

float static SparseArrayProtocol<>.* infix<A>(_:_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  _QWORD v7[9];
  uint64_t v8;

  v7[2] = a3;
  v7[3] = a4;
  v7[4] = a5;
  v7[5] = a6;
  v7[6] = a2;
  (*(void (**)(uint64_t *__return_ptr, uint64_t (*)(_OWORD *), _QWORD *, _QWORD, uint64_t))(a5 + 24))(&v8, sub_1CA10DC18, v7, MEMORY[0x1E0DEB188], a3);
  return *(float *)&v8;
}

void sub_1CA10D2FC(uint64_t a1@<X0>, uint64_t a2@<X1>, float *a3@<X8>)
{
  int64_t v5;
  int64_t v6;

  v5 = *(_QWORD *)(a2 + 8) - *(_QWORD *)a2;
  if (v5 < 0 || (v6 = *(_QWORD *)(a1 + 8) - *(_QWORD *)a1, v6 < 0))
  {
    sub_1CA1F11BC();
    __break(1u);
  }
  else
  {
    *a3 = sparse_inner_product_sparse_float(v5, v6, *(const float **)(a2 + 16), *(const sparse_index **)(a2 + 48), *(const float **)(a1 + 16), *(const sparse_index **)(a1 + 48));
  }
}

float static SparseArrayProtocol<>.* infix(_:_:)(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  _QWORD v6[7];
  uint64_t v7;

  v4 = *a2;
  v6[2] = a3;
  v6[3] = a4;
  v6[4] = v4;
  (*(void (**)(uint64_t *__return_ptr, uint64_t *(*)@<X0>(uint64_t *@<X0>, float *@<X8>), _QWORD *, _QWORD, uint64_t))(a4 + 24))(&v7, sub_1CA10DC74, v6, MEMORY[0x1E0DEB188], a3);
  return *(float *)&v7;
}

uint64_t static SparseArrayProtocol<>.* infix<A>(_:_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  return sub_1CA10DA50(a1, a2, a3, a4, a5, a6, a7, a8, (uint64_t)sub_1CA10DD70, MEMORY[0x1E0DEB188], (uint64_t)&protocol witness table for Float);
}

{
  return sub_1CA10DA50(a1, a2, a3, a4, a5, a6, a7, a8, (uint64_t)sub_1CA10DF10, MEMORY[0x1E0DEB070], (uint64_t)&protocol witness table for Double);
}

float sub_1CA10D44C@<S0>(uint64_t a1@<X1>, uint64_t a2@<X7>, _DWORD *a3@<X8>, uint64_t a4)
{
  float result;
  _BYTE v8[16];
  uint64_t AssociatedTypeWitness;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v10 = swift_getAssociatedTypeWitness();
  v11 = a2;
  v12 = a4;
  v13 = a1;
  (*(void (**)(uint64_t *__return_ptr, uint64_t (*)(_OWORD *), _BYTE *, _QWORD, uint64_t, uint64_t))(a2 + 24))(&v14, sub_1CA10DC18, v8, MEMORY[0x1E0DEB188], AssociatedTypeWitness, a2);
  result = *(float *)&v14;
  *a3 = v14;
  return result;
}

uint64_t static SparseArrayProtocol<>.* infix(_:_:)@<X0>(uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t *a3@<X8>, double a4@<D0>)
{
  uint64_t result;
  uint64_t v6;
  uint64_t v10;
  uint64_t v11;
  _QWORD v12[4];
  int64x2_t v13;

  if (a4 == 0.0)
  {
    sub_1CA10CB44(0, MEMORY[0x1E0DEE9D8], &v13);
    result = v13.i64[1];
    v6 = v13.i64[0];
LABEL_4:
    *a3 = v6;
    a3[1] = result;
    return result;
  }
  v10 = (*(uint64_t (**)(uint64_t, uint64_t))(a2 + 32))(a1, a2);
  *(double *)v13.i64 = a4;
  MEMORY[0x1E0C80A78](v10, v11);
  v12[2] = &v13;
  v6 = sub_1CA0B4E84((void (*)(uint64_t *__return_ptr, uint64_t *))sub_1CA10DDA0, (uint64_t)v12, v10);
  swift_bridgeObjectRelease();
  result = (*(uint64_t (**)(uint64_t, uint64_t))(a2 + 40))(a1, a2);
  if (*(_QWORD *)(v6 + 16) == *(_QWORD *)(result + 16))
    goto LABEL_4;
  __break(1u);
  return result;
}

{
  return static SparseArrayProtocol<>.* infix(_:_:)(a1, a2, a3, a4);
}

uint64_t static SparseArrayProtocol<>./ infix(_:_:)@<X0>(uint64_t a1@<X1>, uint64_t a2@<X2>, double **a3@<X8>, double a4@<D0>)
{
  uint64_t result;
  double *v7;
  uint64_t v10;
  vDSP_Length v11;
  int64x2_t __B;
  uint64_t v13;

  v13 = *MEMORY[0x1E0C80C00];
  if (a4 == INFINITY)
  {
    sub_1CA10CB44(0, MEMORY[0x1E0DEE9D8], &__B);
    result = __B.i64[1];
    v7 = (double *)__B.i64[0];
  }
  else
  {
    v10 = (*(uint64_t (**)(uint64_t, uint64_t))(a2 + 32))(a1, a2);
    v11 = *(_QWORD *)(v10 + 16);
    swift_bridgeObjectRetain();
    v7 = (double *)v10;
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      v7 = (double *)sub_1CA0B6058((_QWORD *)v10);
    *(double *)__B.i64 = a4;
    swift_bridgeObjectRetain();
    vDSP_vsdivD((const double *)(v10 + 32), 1, (const double *)__B.i64, v7 + 4, 1, v11);
    swift_bridgeObjectRelease_n();
    result = (*(uint64_t (**)(uint64_t, uint64_t))(a2 + 40))(a1, a2);
    if (*((_QWORD *)v7 + 2) != *(_QWORD *)(result + 16))
      __break(1u);
  }
  *a3 = v7;
  a3[1] = (double *)result;
  return result;
}

uint64_t static SparseArrayProtocol<>..** infix(_:_:)@<X0>(uint64_t a1@<X1>, uint64_t a2@<X2>, double **a3@<X8>, double a4@<D0>)
{
  double *v4;
  uint64_t v9;
  uint64_t result;
  double v11;
  int v12;
  uint64_t v13;

  v13 = *MEMORY[0x1E0C80C00];
  v9 = (*(uint64_t (**)(uint64_t, uint64_t))(a2 + 32))(a1, a2);
  if (*(_QWORD *)(v9 + 16) >> 31)
  {
    __break(1u);
  }
  else
  {
    v4 = (double *)v9;
    v12 = *(_QWORD *)(v9 + 16);
    v11 = a4;
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) != 0)
      goto LABEL_3;
  }
  v4 = (double *)sub_1CA0B6058(v4);
LABEL_3:
  vvpows(v4 + 4, &v11, v4 + 4, &v12);
  result = (*(uint64_t (**)(uint64_t, uint64_t))(a2 + 40))(a1, a2);
  if (*((_QWORD *)v4 + 2) != *(_QWORD *)(result + 16))
    __break(1u);
  *a3 = v4;
  a3[1] = (double *)result;
  return result;
}

double static SparseArrayProtocol<>.* infix<A>(_:_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  _QWORD v7[9];
  double v8;

  v7[2] = a3;
  v7[3] = a4;
  v7[4] = a5;
  v7[5] = a6;
  v7[6] = a2;
  (*(void (**)(double *__return_ptr, uint64_t (*)(_OWORD *), _QWORD *, _QWORD, uint64_t))(a5 + 24))(&v8, sub_1CA10DDB8, v7, MEMORY[0x1E0DEB070], a3);
  return v8;
}

void sub_1CA10D900(uint64_t a1@<X0>, uint64_t a2@<X1>, double *a3@<X8>)
{
  int64_t v5;
  int64_t v6;

  v5 = *(_QWORD *)(a2 + 8) - *(_QWORD *)a2;
  if (v5 < 0 || (v6 = *(_QWORD *)(a1 + 8) - *(_QWORD *)a1, v6 < 0))
  {
    sub_1CA1F11BC();
    __break(1u);
  }
  else
  {
    *a3 = sparse_inner_product_sparse_double(v5, v6, *(const double **)(a2 + 16), *(const sparse_index **)(a2 + 48), *(const double **)(a1 + 16), *(const sparse_index **)(a1 + 48));
  }
}

double static SparseArrayProtocol<>.* infix(_:_:)(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  _QWORD v6[7];
  double v7;

  v4 = *a2;
  v6[2] = a3;
  v6[3] = a4;
  v6[4] = v4;
  (*(void (**)(double *__return_ptr, uint64_t *(*)@<X0>(uint64_t *@<X0>, double *@<X8>), _QWORD *, _QWORD, uint64_t))(a4 + 24))(&v7, sub_1CA10DE14, v6, MEMORY[0x1E0DEB070], a3);
  return v7;
}

uint64_t sub_1CA10DA50(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  _BYTE v13[16];
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t AssociatedTypeWitness;

  v14 = a3;
  v15 = a4;
  v16 = a5;
  v17 = a6;
  v18 = a7;
  v19 = a8;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  return SparseArrayProtocol.sparseKroneckerMap<A, B>(with:combine:)(a2, a9, (uint64_t)v13, v14, v15, a10, v16, v17, a11);
}

double sub_1CA10DB14@<D0>(uint64_t a1@<X1>, uint64_t a2@<X7>, double *a3@<X8>, uint64_t a4)
{
  double result;
  _BYTE v8[16];
  uint64_t AssociatedTypeWitness;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  double v14;

  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v10 = swift_getAssociatedTypeWitness();
  v11 = a2;
  v12 = a4;
  v13 = a1;
  (*(void (**)(double *__return_ptr, uint64_t (*)(_OWORD *), _BYTE *, _QWORD, uint64_t, uint64_t))(a2 + 24))(&v14, sub_1CA10DDB8, v8, MEMORY[0x1E0DEB070], AssociatedTypeWitness, a2);
  result = v14;
  *a3 = v14;
  return result;
}

float sub_1CA10DBFC@<S0>(float *a1@<X0>, float *a2@<X8>)
{
  uint64_t v2;

  return sub_1CA0B66C8(a1, *(float **)(v2 + 16), a2);
}

uint64_t sub_1CA10DC18(_OWORD *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  __int128 v4;
  __int128 v5;
  _QWORD v7[4];
  _OWORD v8[4];

  v2 = *(_QWORD *)(v1 + 24);
  v3 = *(_QWORD *)(v1 + 40);
  v4 = a1[1];
  v8[0] = *a1;
  v8[1] = v4;
  v5 = a1[3];
  v8[2] = a1[2];
  v8[3] = v5;
  v7[2] = v8;
  return (*(uint64_t (**)(void (*)(uint64_t@<X0>, float *@<X8>), _QWORD *, _QWORD, uint64_t))(v3 + 24))(sub_1CA10DF58, v7, MEMORY[0x1E0DEB188], v2);
}

uint64_t *sub_1CA10DC74@<X0>(uint64_t *result@<X0>, float *a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  float v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  float *v15;
  unint64_t v16;
  uint64_t v17;
  _DWORD *v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;

  v3 = result[4];
  v4 = result[5];
  v5 = 0.0;
  if (v3 != v4)
  {
    v6 = *result;
    v7 = result[1];
    if (*result != v7)
    {
      v8 = result[2];
      v9 = result[6];
      v10 = *(_QWORD *)(v2 + 32) + 32;
      v11 = v7 + ~v6;
      if (v11 >= v4 + ~v3)
        v11 = v4 + ~v3;
      v12 = v11 + 1;
      if (v11 + 1 >= 2)
      {
        v13 = v6 + (v12 & 0xFFFFFFFFFFFFFFFELL);
        v14 = v3 + (v12 & 0xFFFFFFFFFFFFFFFELL);
        result = (uint64_t *)(v9 + 8 * v3 + 8);
        v15 = (float *)(v8 + 4 * v6 + 4);
        v16 = v12 & 0xFFFFFFFFFFFFFFFELL;
        do
        {
          v5 = (float)(v5 + (float)(*(v15 - 1) * *(float *)(v10 + 4 * *(result - 1))))
             + (float)(*v15 * *(float *)(v10 + 4 * *result));
          result += 2;
          v15 += 2;
          v16 -= 2;
        }
        while (v16);
        if (v12 == (v12 & 0xFFFFFFFFFFFFFFFELL))
          goto LABEL_13;
      }
      else
      {
        v13 = *result;
        v14 = result[4];
      }
      v17 = ~v13 + v7;
      v18 = (_DWORD *)(v8 + 4 * v13);
      v19 = (uint64_t *)(v9 + 8 * v14);
      v20 = ~v14 + v4;
      do
      {
        v22 = *v19++;
        v21 = v22;
        LODWORD(v22) = *v18++;
        v5 = v5 + (float)(*(float *)&v22 * *(float *)(v10 + 4 * v21));
        if (!v20)
          break;
        v23 = v17--;
        --v20;
      }
      while (v23);
    }
  }
LABEL_13:
  *a2 = v5;
  return result;
}

float sub_1CA10DD70@<S0>(uint64_t a1@<X1>, _DWORD *a2@<X8>)
{
  uint64_t v2;

  return sub_1CA10D44C(a1, *(_QWORD *)(v2 + 48), a2, *(_QWORD *)(v2 + 56));
}

double sub_1CA10DDA0@<D0>(double *a1@<X0>, double *a2@<X8>)
{
  uint64_t v2;
  double result;

  result = *a1 * **(double **)(v2 + 16);
  *a2 = result;
  return result;
}

uint64_t sub_1CA10DDB8(_OWORD *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  __int128 v4;
  __int128 v5;
  _QWORD v7[4];
  _OWORD v8[4];

  v2 = *(_QWORD *)(v1 + 24);
  v3 = *(_QWORD *)(v1 + 40);
  v4 = a1[1];
  v8[0] = *a1;
  v8[1] = v4;
  v5 = a1[3];
  v8[2] = a1[2];
  v8[3] = v5;
  v7[2] = v8;
  return (*(uint64_t (**)(void (*)(uint64_t@<X0>, double *@<X8>), _QWORD *, _QWORD, uint64_t))(v3 + 24))(sub_1CA10DF40, v7, MEMORY[0x1E0DEB070], v2);
}

uint64_t *sub_1CA10DE14@<X0>(uint64_t *result@<X0>, double *a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  double v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  double *v15;
  unint64_t v16;
  uint64_t v17;
  double *v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  double v23;
  uint64_t v24;

  v3 = result[4];
  v4 = result[5];
  v5 = 0.0;
  if (v3 != v4)
  {
    v6 = *result;
    v7 = result[1];
    if (*result != v7)
    {
      v8 = result[2];
      v9 = result[6];
      v10 = *(_QWORD *)(v2 + 32) + 32;
      v11 = v7 + ~v6;
      if (v11 >= v4 + ~v3)
        v11 = v4 + ~v3;
      v12 = v11 + 1;
      if (v11 + 1 >= 2)
      {
        v13 = v6 + (v12 & 0xFFFFFFFFFFFFFFFELL);
        v14 = v3 + (v12 & 0xFFFFFFFFFFFFFFFELL);
        result = (uint64_t *)(v9 + 8 * v3 + 8);
        v15 = (double *)(v8 + 8 * v6 + 8);
        v16 = v12 & 0xFFFFFFFFFFFFFFFELL;
        do
        {
          v5 = v5 + *(v15 - 1) * *(double *)(v10 + 8 * *(result - 1)) + *v15 * *(double *)(v10 + 8 * *result);
          result += 2;
          v15 += 2;
          v16 -= 2;
        }
        while (v16);
        if (v12 == (v12 & 0xFFFFFFFFFFFFFFFELL))
          goto LABEL_13;
      }
      else
      {
        v13 = *result;
        v14 = result[4];
      }
      v17 = ~v13 + v7;
      v18 = (double *)(v8 + 8 * v13);
      v19 = (uint64_t *)(v9 + 8 * v14);
      v20 = ~v14 + v4;
      do
      {
        v22 = *v19++;
        v21 = v22;
        v23 = *v18++;
        v5 = v5 + v23 * *(double *)(v10 + 8 * v21);
        if (!v20)
          break;
        v24 = v17--;
        --v20;
      }
      while (v24);
    }
  }
LABEL_13:
  *a2 = v5;
  return result;
}

double sub_1CA10DF10@<D0>(uint64_t a1@<X1>, double *a2@<X8>)
{
  uint64_t v2;

  return sub_1CA10DB14(a1, *(_QWORD *)(v2 + 48), a2, *(_QWORD *)(v2 + 56));
}

void sub_1CA10DF40(uint64_t a1@<X0>, double *a2@<X8>)
{
  uint64_t v2;

  sub_1CA10D900(a1, *(_QWORD *)(v2 + 16), a2);
}

void sub_1CA10DF58(uint64_t a1@<X0>, float *a2@<X8>)
{
  uint64_t v2;

  sub_1CA10D2FC(a1, *(_QWORD *)(v2 + 16), a2);
}

uint64_t ConcreteTypedProperty.key.getter()
{
  uint64_t v0;

  v0 = sub_1CA10E1AC();
  swift_bridgeObjectRetain();
  return v0;
}

uint64_t ConcreteTypedProperty.init(_:)@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  *a3 = result;
  a3[1] = a2;
  return result;
}

uint64_t sub_1CA10DFAC()
{
  uint64_t v0;

  v0 = sub_1CA10E1AC();
  swift_bridgeObjectRetain();
  return v0;
}

uint64_t ConcreteElementedTypedProperty.init(_:)@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  *a3 = result;
  a3[1] = a2;
  return result;
}

void sub_1CA10DFE8(void *a1@<X0>, uint64_t a2@<X8>)
{
  id v3;
  unint64_t v4;
  uint64_t v5;
  id v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  switch((unint64_t)objc_msgSend(a1, sel_dataType))
  {
    case 0uLL:
      objc_opt_self();
      v3 = objc_msgSend((id)swift_dynamicCastObjCClassUnconditional(), sel_value);
      *(_QWORD *)(a2 + 24) = MEMORY[0x1E0DEB418];
      *(_QWORD *)(a2 + 32) = &protocol witness table for Int;
      *(_QWORD *)a2 = v3;
      break;
    case 1uLL:
      objc_opt_self();
      v4 = (unint64_t)objc_msgSend((id)swift_dynamicCastObjCClassUnconditional(), sel_value);
      *(_QWORD *)(a2 + 24) = MEMORY[0x1E0DEB418];
      *(_QWORD *)(a2 + 32) = &protocol witness table for Int;
      if ((v4 & 0x8000000000000000) != 0)
      {
        __break(1u);
        JUMPOUT(0x1CA10E19CLL);
      }
      *(_QWORD *)a2 = v4;
      break;
    case 2uLL:
      objc_opt_self();
      objc_msgSend((id)swift_dynamicCastObjCClassUnconditional(), sel_value);
      *(_QWORD *)(a2 + 24) = MEMORY[0x1E0DEB070];
      *(_QWORD *)(a2 + 32) = &protocol witness table for Double;
      *(_QWORD *)a2 = v5;
      break;
    case 3uLL:
      objc_opt_self();
      v6 = objc_msgSend((id)swift_dynamicCastObjCClassUnconditional(), sel_value);
      v7 = sub_1CA1F0A0C();
      v9 = v8;

      *(_QWORD *)(a2 + 24) = MEMORY[0x1E0DEA968];
      *(_QWORD *)(a2 + 32) = &protocol witness table for String;
      *(_QWORD *)a2 = v7;
      *(_QWORD *)(a2 + 8) = v9;
      break;
    default:
      *(_QWORD *)(a2 + 32) = 0;
      *(_OWORD *)a2 = 0u;
      *(_OWORD *)(a2 + 16) = 0u;
      break;
  }
}

uint64_t sub_1CA10E1AC()
{
  uint64_t v0;

  return *(_QWORD *)v0;
}

uint64_t sub_1CA10E1B4(uint64_t a1)
{
  uint64_t result;

  result = MEMORY[0x1CAA4BB30](&protocol conformance descriptor for ConcreteElementedTypedProperty<A, B>);
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

uint64_t sub_1CA10E1E0(uint64_t a1, uint64_t a2)
{
  return *(_QWORD *)(a2 + 32);
}

uint64_t dispatch thunk of Property.key.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 8))();
}

_QWORD *sub_1CA10E1F0(_QWORD *a1, _QWORD *a2)
{
  uint64_t v3;

  v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t sub_1CA10E21C()
{
  return swift_bridgeObjectRelease();
}

_QWORD *sub_1CA10E228(_QWORD *a1, _QWORD *a2)
{
  uint64_t v3;

  v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t type metadata accessor for ConcreteTypedProperty(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for ConcreteTypedProperty);
}

_QWORD *sub_1CA10E26C(_QWORD *a1, _QWORD *a2)
{
  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t sub_1CA10E2AC(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 16))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t sub_1CA10E2F4(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)result = a2 ^ 0x80000000;
    *(_QWORD *)(result + 8) = 0;
    if (a3 < 0)
      *(_BYTE *)(result + 16) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 8) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 16) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

uint64_t type metadata accessor for ConcreteElementedTypedProperty(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for ConcreteElementedTypedProperty);
}

double SeededRandomNumberGenerator.init()@<D0>(_OWORD *a1@<X8>)
{
  double result;

  result = -1.90237734e-283;
  *a1 = xmmword_1CA1FB8B0;
  return result;
}

uint64_t SeededRandomNumberGenerator.init(seed:)@<X0>(uint64_t result@<X0>, _QWORD *a2@<X8>)
{
  *a2 = 0x685F98A2018FADE9 * result + 0x51EBDA032857265ALL;
  a2[1] = 0xDA3E39CB94B95BDBLL;
  return result;
}

uint64_t sub_1CA10E39C()
{
  unint64_t *v0;
  unint64_t v1;

  v1 = *v0;
  *v0 = (v0[1] | 1) + 0x5851F42D4C957F2DLL * *v0;
  return __ROR4__((v1 >> 45) ^ (v1 >> 27), v1 >> 59);
}

Swift::UInt64 __swiftcall SeededRandomNumberGenerator.next()()
{
  _QWORD *v0;
  uint64_t v1;
  unint64_t v2;
  unsigned int v3;

  v1 = v0[1] | 1;
  v2 = v1 + 0x5851F42D4C957F2DLL * *v0;
  v3 = __ROR4__((*v0 >> 45) ^ (*v0 >> 27), *v0 >> 59);
  *v0 = v1 + 0x5851F42D4C957F2DLL * v2;
  return v3 | ((unint64_t)__ROR4__((v2 >> 45) ^ (v2 >> 27), v2 >> 59) << 32);
}

unint64_t sub_1CA10E428()
{
  unsigned int v0;

  v0 = sub_1CA10E39C();
  return v0 | (unint64_t)(sub_1CA10E39C() << 32);
}

ValueMetadata *type metadata accessor for SeededRandomNumberGenerator()
{
  return &type metadata for SeededRandomNumberGenerator;
}

__n128 UniqueSortedBuffer.Intersection.lhs.getter@<Q0>(_OWORD *a1@<X8>)
{
  uint64_t v1;
  __n128 result;
  __int128 v3;

  result = *(__n128 *)v1;
  v3 = *(_OWORD *)(v1 + 16);
  *a1 = *(_OWORD *)v1;
  a1[1] = v3;
  return result;
}

__n128 UniqueSortedBuffer.Intersection.rhs.getter@<Q0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  __n128 result;
  __int128 v3;

  result = *(__n128 *)(v1 + 32);
  v3 = *(_OWORD *)(v1 + 48);
  *(__n128 *)a1 = result;
  *(_OWORD *)(a1 + 16) = v3;
  return result;
}

BOOL static UniqueSortedBuffer.Intersection.Index.< infix(_:_:)(_QWORD *a1, _QWORD *a2)
{
  return *a1 < *a2 || a1[1] < a2[1];
}

BOOL static UniqueSortedBuffer.Intersection.Index.== infix(_:_:)(_QWORD *a1, _QWORD *a2)
{
  return *a1 == *a2 && a1[1] == a2[1];
}

void UniqueSortedBuffer.Intersection.startIndex.getter(uint64_t a1)
{
  __int128 *v1;
  __int128 v2;
  __int128 v3;
  _QWORD v4[2];
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;

  v2 = v1[1];
  v5 = *v1;
  v6 = v2;
  v3 = v1[3];
  v7 = v1[2];
  v8 = v3;
  v4[0] = -1;
  v4[1] = -1;
  UniqueSortedBuffer.Intersection.index(after:)((uint64_t)v4, a1);
}

void UniqueSortedBuffer.Intersection.index(after:)(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t *v26;
  BOOL v27;
  uint64_t v28;
  uint64_t v29;
  char v30;
  void (*v31)(char *, uint64_t);
  void (*v32)(char *, uint64_t);
  uint64_t *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;

  v38 = *(_QWORD *)(a2 + 16);
  v37 = *(_QWORD *)(v38 - 8);
  MEMORY[0x1E0C80A78](a1, a2);
  v4 = (char *)&v33 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v5, v6);
  v12 = (char *)&v33 - v11;
  v13 = *v7 + 1;
  if (__OFADD__(*v7, 1))
  {
LABEL_17:
    __break(1u);
    goto LABEL_18;
  }
  v14 = v7[1];
  v39 = v14 + 1;
  if (__OFADD__(v14, 1))
  {
LABEL_18:
    __break(1u);
    return;
  }
  v33 = v10;
  v16 = *v2;
  v15 = v2[1];
  v42 = v2[2];
  v43 = v15;
  v17 = v2[4];
  v41 = v2[3];
  v19 = v2[5];
  v18 = v2[6];
  v20 = v2[7];
  v36 = *(_QWORD *)(v8 + 24);
  v21 = type metadata accessor for UniqueSortedBuffer(0, v38, v36, v9);
  v40 = v16;
  v45 = v16;
  v46 = v43;
  v47 = v42;
  v48 = v41;
  v22 = UniqueSortedBuffer.count.getter();
  v23 = v39;
  if (v13 != v22)
  {
    v34 = v17;
    v35 = v21;
    do
    {
      v45 = v17;
      v46 = v19;
      v47 = v18;
      v48 = v20;
      if (v23 == UniqueSortedBuffer.count.getter())
        break;
      v45 = v40;
      v46 = v43;
      v47 = v42;
      v48 = v41;
      v39 = v13;
      v44 = v13;
      v13 = v38;
      v29 = sub_1CA1F09F4();
      MEMORY[0x1CAA4BB30](MEMORY[0x1E0DEA5E8], v29);
      sub_1CA1F13C0();
      sub_1CA1F13CC();
      v44 = v23;
      v45 = v17;
      v46 = v19;
      v47 = v18;
      v48 = v20;
      sub_1CA1F13CC();
      if ((sub_1CA1F09D0() & 1) != 0)
        goto LABEL_15;
      v30 = sub_1CA1F0988();
      v31 = *(void (**)(char *, uint64_t))(v37 + 8);
      v31(v4, v13);
      v31(v12, v13);
      if ((v30 & 1) != 0)
      {
        v13 = v39 + 1;
        if (__OFADD__(v39, 1))
        {
          __break(1u);
LABEL_15:
          v32 = *(void (**)(char *, uint64_t))(v37 + 8);
          v32(v4, v13);
          v32(v12, v13);
          v25 = v23;
          v24 = v39;
          goto LABEL_5;
        }
      }
      else
      {
        v27 = __OFADD__(v23++, 1);
        v13 = v39;
        if (v27)
        {
          __break(1u);
          goto LABEL_17;
        }
      }
      v45 = v40;
      v46 = v43;
      v47 = v42;
      v48 = v41;
      v28 = UniqueSortedBuffer.count.getter();
      v17 = v34;
    }
    while (v13 != v28);
  }
  v45 = v40;
  v46 = v43;
  v47 = v42;
  v48 = v41;
  v24 = UniqueSortedBuffer.count.getter();
  v45 = v17;
  v46 = v19;
  v47 = v18;
  v48 = v20;
  v25 = UniqueSortedBuffer.count.getter();
LABEL_5:
  v26 = v33;
  *v33 = v24;
  v26[1] = v25;
}

uint64_t UniqueSortedBuffer.Intersection.endIndex.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X3>, uint64_t *a3@<X8>)
{
  uint64_t v4;
  uint64_t result;

  type metadata accessor for UniqueSortedBuffer(0, *(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), a2);
  v4 = UniqueSortedBuffer.count.getter();
  result = UniqueSortedBuffer.count.getter();
  *a3 = v4;
  a3[1] = result;
  return result;
}

uint64_t UniqueSortedBuffer.Intersection.subscript.getter()
{
  uint64_t v0;

  v0 = sub_1CA1F09F4();
  MEMORY[0x1CAA4BB30](MEMORY[0x1E0DEA5E8], v0);
  sub_1CA1F13C0();
  return sub_1CA1F13CC();
}

void sub_1CA10E8F8()
{
  JUMPOUT(0x1CAA4BB30);
}

void sub_1CA10E908()
{
  JUMPOUT(0x1CAA4BB30);
}

void sub_1CA10E918()
{
  JUMPOUT(0x1CAA4BB30);
}

void (*sub_1CA10E930(_QWORD *a1, uint64_t a2, uint64_t a3))(_QWORD *a1)
{
  _QWORD *v6;

  v6 = malloc(0x28uLL);
  *a1 = v6;
  v6[4] = sub_1CA10E98C(v6, a2, a3);
  return sub_1CA0C67C8;
}

void (*sub_1CA10E98C(_QWORD *a1, uint64_t a2, uint64_t a3))(_QWORD *a1)
{
  uint64_t v3;
  uint64_t v4;

  v3 = *(_QWORD *)(a3 + 16);
  v4 = *(_QWORD *)(v3 - 8);
  *a1 = v3;
  a1[1] = v4;
  a1[2] = malloc(*(_QWORD *)(v4 + 64));
  UniqueSortedBuffer.Intersection.subscript.getter();
  return sub_1CA0A7D14;
}

double sub_1CA10E9FC(_OWORD *a1, uint64_t a2)
{
  double result;
  __int128 v4;

  UniqueSortedBuffer.Intersection.index(after:)((uint64_t)a1, a2);
  result = *(double *)&v4;
  *a1 = v4;
  return result;
}

__n128 sub_1CA10EA30@<Q0>(uint64_t a1@<X0>, __n128 *a2@<X8>)
{
  unint64_t *v2;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  __n128 result;
  __n128 v13;

  v4 = *v2;
  v5 = v2[1];
  v6 = v2[2];
  v7 = v2[3];
  v8 = v2[4];
  v9 = v2[5];
  v10 = v2[6];
  v11 = v2[7];
  UniqueSortedBuffer.Intersection.startIndex.getter(a1);
  result = v13;
  a2->n128_u64[0] = v4;
  a2->n128_u64[1] = v5;
  a2[1].n128_u64[0] = v6;
  a2[1].n128_u64[1] = v7;
  a2[2].n128_u64[0] = v8;
  a2[2].n128_u64[1] = v9;
  a2[3].n128_u64[0] = v10;
  a2[3].n128_u64[1] = v11;
  a2[4] = v13;
  return result;
}

uint64_t sub_1CA10EAB8(uint64_t a1)
{
  MEMORY[0x1CAA4BB30](&protocol conformance descriptor for UniqueSortedBuffer<A>.Intersection, a1);
  return sub_1CA1F0D3C();
}

uint64_t sub_1CA10EAEC(uint64_t a1)
{
  MEMORY[0x1CAA4BB30](&protocol conformance descriptor for UniqueSortedBuffer<A>.Intersection, a1);
  return sub_1CA1F0D48();
}

uint64_t type metadata accessor for UniqueSortedBuffer.Intersection(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for UniqueSortedBuffer.Intersection);
}

uint64_t type metadata accessor for UniqueSortedBuffer.Intersection.Index(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for UniqueSortedBuffer.Intersection.Index);
}

_UNKNOWN **sub_1CA10EB58()
{
  return &protocol witness table for AnyNode;
}

ValueMetadata *type metadata accessor for AnyEdge()
{
  return &type metadata for AnyEdge;
}

uint64_t ElementCollection.valuesOf<A>(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8;
  _QWORD v10[7];
  uint64_t v11;

  swift_getTupleTypeMetadata2();
  v11 = sub_1CA1F08A4();
  v10[2] = a2;
  v10[3] = a3;
  v10[4] = a4;
  v10[5] = &v11;
  (*(void (**)(uint64_t, uint64_t (*)(_QWORD *, uint64_t, uint64_t), _QWORD *, uint64_t, uint64_t, uint64_t))(a4 + 32))(a1, sub_1CA10ED38, v10, a3, a2, a4);
  swift_bridgeObjectRetain();
  swift_getTupleTypeMetadata2();
  v8 = sub_1CA1F1174();
  swift_bridgeObjectRelease_n();
  return v8;
}

uint64_t sub_1CA10EC64(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t TupleTypeMetadata2;
  uint64_t v10;
  double v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  _QWORD v16[2];

  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  v11 = MEMORY[0x1E0C80A78](TupleTypeMetadata2, v10);
  v14 = (char *)v16 + *(int *)(v13 + 48) - v12;
  *(_QWORD *)((char *)v16 - v12) = *a1;
  (*(void (**)(char *, uint64_t, uint64_t, double))(*(_QWORD *)(a6 - 8) + 16))(v14, a2, a6, v11);
  sub_1CA1F0BE0();
  return sub_1CA1F0BB0();
}

uint64_t sub_1CA10ED38(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  uint64_t *v3;

  return sub_1CA10EC64(a1, a2, a3, v3[5], v3[2], v3[3]);
}

id ElementCollection.startIndex.getter(uint64_t a1, uint64_t a2)
{
  return sub_1CA10ED6C(a1, a2, (SEL *)&selRef_startIndex);
}

id ElementCollection.endIndex.getter(uint64_t a1, uint64_t a2)
{
  return sub_1CA10ED6C(a1, a2, (SEL *)&selRef_endIndex);
}

id sub_1CA10ED6C(uint64_t a1, uint64_t a2, SEL *a3)
{
  id v4;
  uint64_t v6;

  (*(void (**)(uint64_t *__return_ptr))(a2 + 16))(&v6);
  v4 = objc_msgSend(*(id *)(v6 + 16), *a3);
  swift_release();
  return v4;
}

KGElementIdentifierSetIndex __swiftcall ElementCollection.index(after:)(KGElementIdentifierSetIndex after)
{
  uint64_t v1;
  int64_t var1;
  unint64_t var0;
  id v4;
  int64_t v5;
  int64_t v6;
  unint64_t v7;
  int64_t v8;
  KGElementIdentifierSetIndex result;
  uint64_t v10;

  var1 = after.var1;
  var0 = after.var0;
  (*(void (**)(uint64_t *__return_ptr))(v1 + 16))(&v10);
  v4 = objc_msgSend(*(id *)(v10 + 16), sel_indexAfterIndex_, var0, var1);
  v6 = v5;
  swift_release();
  v7 = (unint64_t)v4;
  v8 = v6;
  result.var1 = v8;
  result.var0 = v7;
  return result;
}

id ElementCollection.count.getter(uint64_t a1, uint64_t a2)
{
  id v2;
  uint64_t v4;

  (*(void (**)(uint64_t *__return_ptr))(a2 + 16))(&v4);
  v2 = objc_msgSend(*(id *)(v4 + 16), sel_count);
  swift_release();
  return v2;
}

id ElementCollection.isEmpty.getter(uint64_t a1, uint64_t a2)
{
  id v2;
  uint64_t v4;

  (*(void (**)(uint64_t *__return_ptr))(a2 + 16))(&v4);
  v2 = objc_msgSend(*(id *)(v4 + 16), sel_isEmpty);
  swift_release();
  return v2;
}

uint64_t ElementCollection.subscript.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X2>, uint64_t a3@<X3>, _QWORD *a4@<X8>)
{
  uint64_t result;
  uint64_t v7;

  (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t))(a3 + 16))(&v7, a2, a3);
  result = swift_release();
  *a4 = a1;
  return result;
}

uint64_t dispatch thunk of ElementCollection.identifiers.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 16))();
}

uint64_t dispatch thunk of ElementCollection.graph.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 24))();
}

uint64_t dispatch thunk of ElementCollection.enumerateValuesOf<A>(_:using:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  return (*(uint64_t (**)(void))(a6 + 32))();
}

id sub_1CA10EF5C(void (*a1)(uint64_t *, char *), uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char **v7;
  void *v8;
  id v9;
  uint64_t v10;
  uint64_t v11;
  id v12;
  uint64_t v13;
  uint64_t v14;
  id result;
  uint64_t v16;
  id v17;
  uint64_t v18;
  id v19;
  void *v20;
  id v21;
  id v22;
  uint64_t v23;
  uint64_t v24;
  id v25;
  uint64_t v26;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30[4];
  char v31;
  uint64_t v32;

  v5 = v4;
  (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t))(a4 + 16))(&v32, a3, a4);
  v31 = 0;
  v6 = v32;
  v7 = &selRef_visualStringWithName_;
  v26 = MEMORY[0x1E0DEE9B8] + 8;
  while (1)
  {
    if ((objc_msgSend(*(id *)(v6 + 16), sel_isEmpty, v26) & 1) != 0)
      return (id)swift_release();
    v28 = v5;
    v8 = *(void **)(v6 + 16);
    swift_retain();
    v9 = objc_msgSend(v8, v7[373]);
    v11 = v10;
    v12 = objc_msgSend(*(id *)(v6 + 16), sel_endIndex);
    v13 = 256;
    while (v9 != v12)
    {
      v9 = objc_msgSend(*(id *)(v6 + 16), sel_indexAfterIndex_, v9, v11);
      v11 = v14;
      if (!--v13)
        goto LABEL_8;
    }
    v9 = objc_msgSend(*(id *)(v6 + 16), sel_endIndex);
LABEL_8:
    result = objc_msgSend(*(id *)(v6 + 16), sel_startIndex);
    if (v9 < result)
      goto LABEL_25;
    v17 = result;
    v18 = v16;
    v19 = objc_msgSend(*(id *)(v6 + 16), sel_startIndex);
    result = objc_msgSend(*(id *)(v6 + 16), sel_endIndex);
    if (result < v19)
      goto LABEL_26;
    if (v17 < v19)
      goto LABEL_27;
    if (result < v9)
      goto LABEL_28;
    result = objc_msgSend(objc_allocWithZone((Class)KGMutableElementIdentifierSet), sel_init);
    v20 = result;
    if (v17 != v9)
      break;
LABEL_17:
    swift_release();
    __swift_instantiateConcreteTypeFromMangledName(&qword_1ED852AF0);
    v24 = swift_allocObject();
    *(_QWORD *)(v24 + 16) = v20;
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    {
      v25 = *(id *)(v6 + 16);
      objc_msgSend(v25, sel_mutableCopy);
      sub_1CA1F0F04();
      swift_unknownObjectRelease();
      sub_1CA0D0350();
      swift_dynamicCast();

      v6 = swift_allocObject();
      *(_QWORD *)(v6 + 16) = v29;
      v32 = v6;
      swift_release();
    }
    v5 = v28;
    objc_msgSend(*(id *)(v6 + 16), sel_subtractIdentifierSet_, *(_QWORD *)(v24 + 16));
    v30[0] = v24;
    a1(v30, &v31);
    if (v28)
    {
      swift_release();
      return (id)swift_release();
    }
    swift_release();
    v7 = &selRef_visualStringWithName_;
    if ((v31 & 1) != 0)
      return (id)swift_release();
  }
  v21 = v17;
  while (v21 >= v17 && v21 < v9)
  {
    v22 = objc_msgSend(*(id *)(v6 + 16), sel_indexAfterIndex_, v21, v18);
    v18 = v23;
    result = objc_msgSend(v20, sel_addIdentifier_, v21);
    v21 = v22;
    if (v22 == v9)
      goto LABEL_17;
  }
  __break(1u);
LABEL_25:
  __break(1u);
LABEL_26:
  __break(1u);
LABEL_27:
  __break(1u);
LABEL_28:
  __break(1u);
  return result;
}

uint64_t (*sub_1CA10F25C(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5))(_QWORD)
{
  uint64_t v8;

  (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t))(a5 + 16))(&v8, a4, a5);
  swift_release();
  *a1 = a2;
  return nullsub_1;
}

uint64_t MASparseSquareMatrixRepresentation.matrix.getter()
{
  return swift_retain();
}

uint64_t MASparseSquareMatrixRepresentation.nodes.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t MASparseSquareMatrixRepresentation.__allocating_init(matrix:nodes:)(uint64_t a1, uint64_t a2)
{
  uint64_t result;

  result = swift_allocObject();
  *(_QWORD *)(result + 16) = a1;
  *(_QWORD *)(result + 24) = a2;
  return result;
}

uint64_t MASparseSquareMatrixRepresentation.init(matrix:nodes:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  *(_QWORD *)(v2 + 16) = a1;
  *(_QWORD *)(v2 + 24) = a2;
  return v2;
}

void sub_1CA10F310(unint64_t row)
{
  unint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  id v8;

  v3 = v2;
  v4 = *(_QWORD *)(v2 + 16);
  v5 = *(_QWORD *)(v4 + 24);
  v6 = *(_QWORD *)(v4 + 32);
  if (!is_mul_ok(v5, v6))
  {
    __break(1u);
    goto LABEL_9;
  }
  v1 = row;
  if ((uint64_t)row < 1 || v5 * v6 >= row)
  {
    MASparseMatrix.subscript.getter(row, row);
    v7 = *(_QWORD *)(v3 + 24);
    if ((v7 & 0xC000000000000001) == 0)
    {
      if ((v1 & 0x8000000000000000) != 0)
      {
        __break(1u);
      }
      else if (*(_QWORD *)((v7 & 0xFFFFFFFFFFFFF8) + 0x10) > v1)
      {
        v8 = *(id *)(v7 + 8 * v1 + 32);
        return;
      }
      __break(1u);
      goto LABEL_12;
    }
LABEL_9:
    MEMORY[0x1CAA4A7A4](v1);
    return;
  }
LABEL_12:
  __break(1u);
}

uint64_t sub_1CA10F3C4(uint64_t a1)
{
  uint64_t v1;
  unint64_t v3;
  sparse_index v4;
  sparse_index v5;
  char v6;
  char v7;

  v3 = *(_QWORD *)(v1 + 24);
  swift_bridgeObjectRetain();
  sub_1CA0C8364(a1, v3);
  v5 = v4;
  v7 = v6;
  swift_bridgeObjectRelease();
  if ((v7 & 1) != 0)
    return 0;
  else
    return MASparseMatrix.subscript.getter(v5, v5);
}

void sub_1CA10F440(unint64_t row, unint64_t column_start)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  void *v9;
  id v10;

  v3 = v2;
  v6 = *(_QWORD *)(v2 + 16);
  if ((uint64_t)row >= 1 && *(_QWORD *)(v6 + 24) < row)
    goto LABEL_14;
  if ((uint64_t)column_start >= 1 && *(_QWORD *)(v6 + 32) < column_start)
    goto LABEL_15;
  MASparseMatrix.subscript.getter(row, column_start);
  v7 = *(_QWORD *)(v3 + 24);
  if ((v7 & 0xC000000000000001) != 0)
  {
    MEMORY[0x1CAA4A7A4](row, *(_QWORD *)(v3 + 24));
    MEMORY[0x1CAA4A7A4](column_start, v7);
    return;
  }
  if ((row & 0x8000000000000000) != 0)
  {
    __break(1u);
  }
  else
  {
    v8 = *(_QWORD *)((v7 & 0xFFFFFFFFFFFFF8) + 0x10);
    if (v8 > row)
    {
      if (v8 > column_start)
      {
        v9 = *(void **)(v7 + 32 + 8 * column_start);
        *(id *)(v7 + 32 + 8 * row);
        v10 = v9;
        return;
      }
      goto LABEL_13;
    }
  }
  __break(1u);
LABEL_13:
  __break(1u);
LABEL_14:
  __break(1u);
LABEL_15:
  __break(1u);
}

uint64_t sub_1CA10F530(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  unint64_t v5;
  sparse_index v6;
  sparse_index v7;
  char v8;
  char v9;
  sparse_index v10;
  sparse_index v11;
  char v12;
  char v13;

  v5 = *(_QWORD *)(v2 + 24);
  swift_bridgeObjectRetain();
  sub_1CA0C8364(a1, v5);
  v7 = v6;
  v9 = v8;
  swift_bridgeObjectRelease();
  if ((v9 & 1) != 0)
    return 0;
  swift_bridgeObjectRetain();
  sub_1CA0C8364(a2, v5);
  v11 = v10;
  v13 = v12;
  swift_bridgeObjectRelease();
  if ((v13 & 1) != 0)
    return 0;
  else
    return MASparseMatrix.subscript.getter(v7, v11);
}

uint64_t MASparseSquareMatrixRepresentation.deinit()
{
  uint64_t v0;

  swift_release();
  swift_bridgeObjectRelease();
  return v0;
}

uint64_t MASparseSquareMatrixRepresentation.__deallocating_deinit()
{
  swift_release();
  swift_bridgeObjectRelease();
  return swift_deallocClassInstance();
}

uint64_t MASparseAdjacencyMatrixRepresentation.__allocating_init(matrix:nodes:directed:)(uint64_t a1, uint64_t a2, char a3)
{
  uint64_t result;

  result = swift_allocObject();
  *(_BYTE *)(result + 32) = a3;
  *(_QWORD *)(result + 16) = a1;
  *(_QWORD *)(result + 24) = a2;
  return result;
}

uint64_t MASparseAdjacencyMatrixRepresentation.init(matrix:nodes:directed:)(uint64_t a1, uint64_t a2, char a3)
{
  uint64_t v3;

  *(_BYTE *)(v3 + 32) = a3;
  *(_QWORD *)(v3 + 16) = a1;
  *(_QWORD *)(v3 + 24) = a2;
  return v3;
}

void MASparseAdjacencyMatrixRepresentation.__allocating_init(matrix:nodes:)()
{
  _swift_stdlib_reportUnimplementedInitializer();
  __break(1u);
}

void MASparseAdjacencyMatrixRepresentation.init(matrix:nodes:)()
{
  _swift_stdlib_reportUnimplementedInitializer();
  __break(1u);
}

uint64_t MASparseAdjacencyMatrixRepresentation.deinit()
{
  uint64_t v0;

  swift_release();
  swift_bridgeObjectRelease();
  return v0;
}

uint64_t MASparseAdjacencyMatrixRepresentation.__deallocating_deinit()
{
  swift_release();
  swift_bridgeObjectRelease();
  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for MASparseSquareMatrixRepresentation()
{
  return objc_opt_self();
}

uint64_t method lookup function for MASparseSquareMatrixRepresentation()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of MASparseSquareMatrixRepresentation.__allocating_init(matrix:nodes:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 96))();
}

uint64_t dispatch thunk of MASparseSquareMatrixRepresentation.subscript.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 104))();
}

{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 112))();
}

{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 120))();
}

{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 128))();
}

uint64_t type metadata accessor for MASparseAdjacencyMatrixRepresentation()
{
  return objc_opt_self();
}

uint64_t method lookup function for MASparseAdjacencyMatrixRepresentation()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of MASparseAdjacencyMatrixRepresentation.__allocating_init(matrix:nodes:directed:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 144))();
}

uint64_t NodeCollection.init(with:in:)@<X0>(_QWORD *a1@<X0>, __int128 *a2@<X1>, _QWORD *a3@<X8>)
{
  *a3 = *a1;
  return sub_1CA0F31BC(a2, (uint64_t)(a3 + 1));
}

uint64_t NodeCollection.identifiers.getter@<X0>(_QWORD *a1@<X8>)
{
  _QWORD *v1;

  *a1 = *v1;
  return swift_retain();
}

uint64_t NodeCollection.graph.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return sub_1CA0C7A10(v1 + 8, a1);
}

uint64_t NodeCollection.valuesOf<A>(_:)(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD v11[3];
  uint64_t v12;
  uint64_t v13;

  v7 = *a1;
  v6 = a1[1];
  v12 = type metadata accessor for ConcreteElementedTypedProperty(0, *(_QWORD *)(a2 + 16), a3, a4);
  v13 = MEMORY[0x1CAA4BB30](&protocol conformance descriptor for ConcreteElementedTypedProperty<A, B>, v12);
  v11[0] = v7;
  v11[1] = v6;
  swift_bridgeObjectRetain();
  v8 = MEMORY[0x1CAA4BB30](&protocol conformance descriptor for NodeCollection<A>, a2);
  v9 = ElementCollection.valuesOf<A>(_:)((uint64_t)v11, a2, a3, v8);
  __swift_destroy_boxed_opaque_existential_0((uint64_t)v11);
  return v9;
}

uint64_t NodeCollection.enumerateValuesOf<A>(_:using:)(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v10;
  uint64_t v11;
  _QWORD v13[3];
  uint64_t v14;
  uint64_t v15;

  v11 = *a1;
  v10 = a1[1];
  v14 = type metadata accessor for ConcreteElementedTypedProperty(0, *(_QWORD *)(a4 + 16), a5, a6);
  v15 = MEMORY[0x1CAA4BB30](&protocol conformance descriptor for ConcreteElementedTypedProperty<A, B>, v14);
  v13[0] = v11;
  v13[1] = v10;
  swift_bridgeObjectRetain();
  NodeCollection.enumerateValuesOf<A>(_:using:)((uint64_t)v13, a2, a3, a4, a5);
  return __swift_destroy_boxed_opaque_existential_0((uint64_t)v13);
}

id NodeCollection.enumerateValuesOf<A>(_:using:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v6;
  _QWORD v8[10];

  v8[2] = *(_QWORD *)(a4 + 16);
  v8[3] = a5;
  v8[6] = a1;
  v8[7] = a2;
  v8[8] = a3;
  v6 = MEMORY[0x1CAA4BB30](&protocol conformance descriptor for NodeCollection<A>, a4);
  return sub_1CA10EF5C((void (*)(uint64_t *, char *))sub_1CA10FC34, (uint64_t)v8, a4, v6);
}

uint64_t sub_1CA10F9EC(uint64_t *a1, uint64_t a2, _QWORD *a3, _QWORD *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t *boxed_opaque_existential_0Tm;
  id v19;
  id v20;
  uint64_t (*v21)(uint64_t, void *, _BYTE *);
  _QWORD *v22;
  uint64_t v23;
  void *v24;
  char isEscapingClosureAtFileLocation;
  uint64_t result;
  id v27;
  uint64_t aBlock[3];
  void *v33;
  uint64_t (*v34)();
  uint64_t v35;
  uint64_t v36;
  id v37;

  v12 = *a1;
  v37 = 0;
  v13 = a3[4];
  v14 = a3[5];
  __swift_project_boxed_opaque_existential_1(a3 + 1, v13);
  v15 = a4[3];
  v16 = a4[4];
  v17 = __swift_project_boxed_opaque_existential_1(a4, v15);
  v33 = (void *)v15;
  v34 = *(uint64_t (**)())(v16 + 8);
  boxed_opaque_existential_0Tm = __swift_allocate_boxed_opaque_existential_0Tm(aBlock);
  (*(void (**)(uint64_t *, _QWORD *, uint64_t))(*(_QWORD *)(v15 - 8) + 16))(boxed_opaque_existential_0Tm, v17, v15);
  v36 = v12;
  v19 = sub_1CA0F9A3C(aBlock, &v36, v13, v14);
  __swift_destroy_boxed_opaque_existential_0((uint64_t)aBlock);
  if (v9)
  {
    v20 = 0;
    v21 = 0;
LABEL_6:

    return sub_1CA0AAE34((uint64_t)v21);
  }
  v22 = (_QWORD *)swift_allocObject();
  v22[2] = a7;
  v22[3] = a8;
  v22[4] = a9;
  v22[5] = a5;
  v22[6] = a6;
  v22[7] = a2;
  v22[8] = &v37;
  v23 = swift_allocObject();
  *(_QWORD *)(v23 + 16) = sub_1CA110840;
  *(_QWORD *)(v23 + 24) = v22;
  v34 = sub_1CA0F9E28;
  v35 = v23;
  aBlock[0] = MEMORY[0x1E0C809B0];
  aBlock[1] = 1107296256;
  aBlock[2] = (uint64_t)sub_1CA0F9660;
  v33 = &block_descriptor_0;
  v24 = _Block_copy(aBlock);
  swift_retain();
  swift_release();
  objc_msgSend(v19, sel_enumerateUsingBlock_, v24);

  _Block_release(v24);
  isEscapingClosureAtFileLocation = swift_isEscapingClosureAtFileLocation();
  result = swift_release();
  if ((isEscapingClosureAtFileLocation & 1) != 0)
  {
    __break(1u);
  }
  else
  {
    if (v37)
    {
      v27 = v37;
      swift_willThrow();
      v20 = v37;
      v21 = sub_1CA110840;
      goto LABEL_6;
    }
    return swift_release();
  }
  return result;
}

uint64_t sub_1CA10FC34(uint64_t *a1, uint64_t a2)
{
  uint64_t v2;

  return sub_1CA10F9EC(a1, a2, *(_QWORD **)(v2 + 40), *(_QWORD **)(v2 + 48), *(_QWORD *)(v2 + 56), *(_QWORD *)(v2 + 64), *(_QWORD *)(v2 + 16), *(_QWORD *)(v2 + 24), *(_QWORD *)(v2 + 32));
}

uint64_t sub_1CA10FC64(uint64_t a1, void *a2, _BYTE *a3, void (*a4)(_QWORD *, char *, _BYTE *), uint64_t a5, _BYTE *a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  char v22;
  void (*v23)(char *, uint64_t, uint64_t, uint64_t);
  uint64_t v25;
  _BYTE *v26;
  uint64_t v27;
  void (*v28)(_QWORD *, char *, _BYTE *);
  _QWORD v29[5];

  v27 = a7;
  v28 = a4;
  v26 = a3;
  v12 = sub_1CA1F0EB0();
  v13 = *(_QWORD *)(v12 - 8);
  MEMORY[0x1E0C80A78](v12, v14);
  v16 = (char *)&v25 - v15;
  v17 = *(_QWORD *)(a9 - 8);
  MEMORY[0x1E0C80A78](v18, v19);
  v21 = (char *)&v25 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1CA10DFE8(a2, (uint64_t)v29);
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EF939658);
  v22 = swift_dynamicCast();
  v23 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v17 + 56);
  if ((v22 & 1) != 0)
  {
    v23(v16, 0, 1, a9);
    (*(void (**)(char *, char *, uint64_t))(v17 + 32))(v21, v16, a9);
    v29[0] = a1;
    v28(v29, v21, a6);
    *v26 = *a6;
    return (*(uint64_t (**)(char *, uint64_t))(v17 + 8))(v21, a9);
  }
  else
  {
    v23(v16, 1, 1, a9);
    return (*(uint64_t (**)(char *, uint64_t))(v13 + 8))(v16, v12);
  }
}

uint64_t NodeCollection.filtered(with:)@<X0>(_QWORD *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t *v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  __int128 v9[2];
  uint64_t v10;

  v5 = v2[4];
  v6 = v2[5];
  __swift_project_boxed_opaque_existential_1(v2 + 1, v5);
  v10 = *v2;
  AbstractGraph.nodeIdentifiers(matching:in:)(a1, (uint64_t)&v10, v5, v6, (uint64_t *)v9);
  v7 = *(_QWORD *)&v9[0];
  sub_1CA0C7A10((uint64_t)(v2 + 1), (uint64_t)v9);
  *a2 = v7;
  return sub_1CA0F31BC(v9, (uint64_t)(a2 + 1));
}

void NodeCollection.related<A>(through:)(_QWORD *a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD v4[6];

  v2 = a1[3];
  v3 = a1[4];
  __swift_project_boxed_opaque_existential_1(a1, v2);
  sub_1CA10A0A0(v1, v2, v3, v4);
  type metadata accessor for NodeAdjacency();
}

uint64_t sub_1CA10FF14(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v4;

  NodeAdjacency.targets.getter(v1);
  return (*(uint64_t (**)(uint64_t *, uint64_t))(*(_QWORD *)(a1 - 8) + 8))(&v4, a1);
}

uint64_t NodeCollection.adjacency<A>(through:)@<X0>(_QWORD *a1@<X0>, _QWORD *a2@<X8>)
{
  _QWORD *v2;
  uint64_t v4;
  uint64_t v5;

  v4 = a1[3];
  v5 = a1[4];
  __swift_project_boxed_opaque_existential_1(a1, v4);
  return sub_1CA10A0A0(v2, v4, v5, a2);
}

id sub_1CA10FFC0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return NodeCollection.enumerateValuesOf<A>(_:using:)(a1, a2, a3, a5, a4);
}

uint64_t sub_1CA10FFE0(uint64_t a1)
{
  uint64_t result;

  result = MEMORY[0x1CAA4BB30](&protocol conformance descriptor for NodeCollection<A>);
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

void sub_1CA11000C()
{
  JUMPOUT(0x1CAA4BB30);
}

unint64_t sub_1CA110020()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1EF938998;
  if (!qword_1EF938998)
  {
    type metadata accessor for KGElementIdentifierSetIndex(255);
    result = MEMORY[0x1CAA4BB30](&protocol conformance descriptor for KGElementIdentifierSetIndex, v1);
    atomic_store(result, (unint64_t *)&qword_1EF938998);
  }
  return result;
}

uint64_t sub_1CA110068@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  return sub_1CA110080(a1, (uint64_t (*)(uint64_t, uint64_t))ElementCollection.startIndex.getter, a2);
}

uint64_t sub_1CA110074@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  return sub_1CA110080(a1, (uint64_t (*)(uint64_t, uint64_t))ElementCollection.endIndex.getter, a2);
}

uint64_t sub_1CA110080@<X0>(uint64_t a1@<X0>, uint64_t (*a2)(uint64_t, uint64_t)@<X2>, uint64_t *a3@<X8>)
{
  uint64_t v6;
  uint64_t result;
  uint64_t v8;

  v6 = MEMORY[0x1CAA4BB30](&protocol conformance descriptor for NodeCollection<A>, a1);
  result = a2(a1, v6);
  *a3 = result;
  a3[1] = v8;
  return result;
}

void (*sub_1CA1100CC(_QWORD *a1, uint64_t *a2, uint64_t a3))(_QWORD *a1)
{
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v6 = malloc(0x28uLL);
  *a1 = v6;
  v8 = *a2;
  v7 = a2[1];
  v9 = MEMORY[0x1CAA4BB30](&protocol conformance descriptor for NodeCollection<A>, a3);
  v6[4] = sub_1CA10F25C(v6, v8, v7, a3, v9);
  return sub_1CA0C67C8;
}

id sub_1CA110148(uint64_t a1)
{
  uint64_t v2;

  v2 = MEMORY[0x1CAA4BB30](&protocol conformance descriptor for NodeCollection<A>, a1);
  return ElementCollection.isEmpty.getter(a1, v2);
}

id sub_1CA11017C(uint64_t a1)
{
  uint64_t v2;

  v2 = MEMORY[0x1CAA4BB30](&protocol conformance descriptor for NodeCollection<A>, a1);
  return ElementCollection.count.getter(a1, v2);
}

uint64_t sub_1CA1101B0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_1CA1104FC(a1, a2, a3, a4, (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x1E0DEB848], (uint64_t (*)(char *, char *, uint64_t, uint64_t))MEMORY[0x1E0DEA3C0]);
}

uint64_t sub_1CA1101D4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_1CA1104FC(a1, a2, a3, a4, MEMORY[0x1E0DEA4B0], (uint64_t (*)(char *, char *, uint64_t, uint64_t))MEMORY[0x1E0DEA3D0]);
}

unint64_t sub_1CA1101F8@<X0>(unint64_t *a1@<X0>, KGElementIdentifierSetIndex *a2@<X8>)
{
  unint64_t v3;
  int64_t v4;
  KGElementIdentifierSetIndex v5;
  unint64_t result;
  KGElementIdentifierSetIndex v7;

  v3 = *a1;
  v4 = a1[1];
  MEMORY[0x1CAA4BB30](&protocol conformance descriptor for NodeCollection<A>);
  v5.var0 = v3;
  v5.var1 = v4;
  v7 = ElementCollection.index(after:)(v5);
  result = v7.var0;
  *a2 = v7;
  return result;
}

unint64_t sub_1CA110250(unint64_t *a1)
{
  unint64_t v2;
  int64_t v3;
  KGElementIdentifierSetIndex v4;
  unint64_t result;
  KGElementIdentifierSetIndex v6;

  v2 = *a1;
  v3 = a1[1];
  MEMORY[0x1CAA4BB30](&protocol conformance descriptor for NodeCollection<A>);
  v4.var0 = v2;
  v4.var1 = v3;
  v6 = ElementCollection.index(after:)(v4);
  result = v6.var0;
  *(KGElementIdentifierSetIndex *)a1 = v6;
  return result;
}

uint64_t sub_1CA1102A8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  id v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t result;

  v5 = *(_QWORD *)(a1 - 8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v5 + 16))(a2, v2, a1);
  v6 = MEMORY[0x1CAA4BB30](&protocol conformance descriptor for NodeCollection<A>, a1);
  v7 = ElementCollection.startIndex.getter(a1, v6);
  v9 = v8;
  result = (*(uint64_t (**)(uint64_t, uint64_t))(v5 + 8))(v2, a1);
  *(_QWORD *)(a2 + 48) = v7;
  *(_QWORD *)(a2 + 56) = v9;
  return result;
}

uint64_t sub_1CA110328(uint64_t a1)
{
  MEMORY[0x1CAA4BB30](&protocol conformance descriptor for NodeCollection<A>, a1);
  return sub_1CA1F0D3C();
}

uint64_t sub_1CA11035C(uint64_t a1)
{
  MEMORY[0x1CAA4BB30](&protocol conformance descriptor for NodeCollection<A>, a1);
  return sub_1CA1F0D48();
}

uint64_t sub_1CA110390(uint64_t a1)
{
  uint64_t v1;

  v1 = a1 + 8;
  swift_release();
  return __swift_destroy_boxed_opaque_existential_0(v1);
}

uint64_t sub_1CA1103B8(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  __int128 v4;
  uint64_t v5;
  void (*v6)(uint64_t, uint64_t, uint64_t);

  *(_QWORD *)a1 = *(_QWORD *)a2;
  v3 = a2 + 8;
  v4 = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 32) = v4;
  v5 = v4;
  v6 = **(void (***)(uint64_t, uint64_t, uint64_t))(v4 - 8);
  swift_retain();
  v6(a1 + 8, v3, v5);
  return a1;
}

_QWORD *sub_1CA110420(_QWORD *a1, _QWORD *a2)
{
  uint64_t *v3;

  v3 = a2 + 1;
  *a1 = *a2;
  swift_retain();
  swift_release();
  __swift_assign_boxed_opaque_existential_1(a1 + 1, v3);
  return a1;
}

uint64_t sub_1CA110474(uint64_t a1, uint64_t a2)
{
  *(_QWORD *)a1 = *(_QWORD *)a2;
  swift_release();
  __swift_destroy_boxed_opaque_existential_0(a1 + 8);
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  return a1;
}

uint64_t type metadata accessor for NodeCollection(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for NodeCollection);
}

uint64_t sub_1CA1104D4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_1CA1104FC(a1, a2, a3, a4, (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x1E0DEB848], (uint64_t (*)(char *, char *, uint64_t, uint64_t))MEMORY[0x1E0DEA3C0]);
}

uint64_t sub_1CA1104E8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_1CA1104FC(a1, a2, a3, a4, MEMORY[0x1E0DEA4B0], (uint64_t (*)(char *, char *, uint64_t, uint64_t))MEMORY[0x1E0DEA3D0]);
}

uint64_t sub_1CA1104FC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(_QWORD, uint64_t, uint64_t), uint64_t (*a6)(char *, char *, uint64_t, uint64_t))
{
  uint64_t AssociatedTypeWitness;
  uint64_t AssociatedConformanceWitness;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  char v21;
  char v22;
  uint64_t result;
  uint64_t v24;
  uint64_t (*v25)(char *, char *, uint64_t, uint64_t);

  v25 = a6;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  v11 = a5(0, AssociatedTypeWitness, AssociatedConformanceWitness);
  v12 = *(_QWORD *)(v11 - 8);
  MEMORY[0x1E0C80A78](v11, v13);
  v15 = (char *)&v24 - v14;
  v16 = *(_QWORD *)(AssociatedTypeWitness - 8);
  MEMORY[0x1E0C80A78](v17, v18);
  v20 = (char *)&v24 - v19;
  v21 = sub_1CA1F0994();
  (*(void (**)(char *, uint64_t, uint64_t))(v16 + 16))(v20, a1, AssociatedTypeWitness);
  (*(void (**)(char *, uint64_t, uint64_t))(v12 + 16))(v15, a2, v11);
  if ((v21 & 1) == 0)
  {
    (*(void (**)(char *, uint64_t))(v12 + 8))(v15, v11);
    result = (*(uint64_t (**)(char *, uint64_t))(v16 + 8))(v20, AssociatedTypeWitness);
    goto LABEL_5;
  }
  v22 = v25(v20, &v15[*(int *)(v11 + 36)], AssociatedTypeWitness, AssociatedConformanceWitness);
  (*(void (**)(char *, uint64_t))(v12 + 8))(v15, v11);
  result = (*(uint64_t (**)(char *, uint64_t))(v16 + 8))(v20, AssociatedTypeWitness);
  if ((v22 & 1) == 0)
LABEL_5:
    __break(1u);
  return result;
}

uint64_t sub_1CA1106A8(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  char v13;
  void (*v14)(char *, uint64_t, uint64_t);
  char v15;
  void (*v16)(char *, uint64_t);
  uint64_t result;
  void (*v18)(char *, uint64_t);
  uint64_t v19;

  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  v4 = sub_1CA1F0DE4();
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x1E0C80A78](v4, v6);
  v8 = (char *)&v19 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v9, v10);
  v12 = (char *)&v19 - v11;
  v13 = sub_1CA1F0994();
  v14 = *(void (**)(char *, uint64_t, uint64_t))(v5 + 16);
  v14(v12, a1, v4);
  v14(v8, a2, v4);
  if ((v13 & 1) == 0)
  {
    v18 = *(void (**)(char *, uint64_t))(v5 + 8);
    v18(v8, v4);
    result = ((uint64_t (*)(char *, uint64_t))v18)(v12, v4);
    goto LABEL_5;
  }
  v15 = sub_1CA1F0994();
  v16 = *(void (**)(char *, uint64_t))(v5 + 8);
  v16(v8, v4);
  result = ((uint64_t (*)(char *, uint64_t))v16)(v12, v4);
  if ((v15 & 1) == 0)
LABEL_5:
    __break(1u);
  return result;
}

uint64_t sub_1CA110830()
{
  return swift_deallocObject();
}

uint64_t sub_1CA110840(uint64_t a1, void *a2, _BYTE *a3)
{
  uint64_t v3;

  return sub_1CA10FC64(a1, a2, a3, *(void (**)(_QWORD *, char *, _BYTE *))(v3 + 40), *(_QWORD *)(v3 + 48), *(_BYTE **)(v3 + 56), *(_QWORD *)(v3 + 64), *(_QWORD *)(v3 + 16), *(_QWORD *)(v3 + 24));
}

uint64_t sub_1CA110870()
{
  return swift_deallocObject();
}

uint64_t MASquareMatrixRepresentation.dbscan(epsilon:minPoints:progressClosure:)(uint64_t *a1, uint64_t a2, void (*a3)(char *, double), uint64_t a4, double a5)
{
  unint64_t v5;
  unint64_t v6;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t result;
  double v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  double v20;
  unint64_t v21;
  _QWORD *v22;
  uint64_t v23;
  uint64_t inited;
  uint64_t v26;
  uint64_t v27;
  _BYTE *v28;
  uint64_t v29;
  _QWORD *i;
  unint64_t v31;
  unint64_t v32;
  _QWORD *v33;
  uint64_t v34;
  unint64_t v35;
  id v36;
  id v37;
  uint64_t v38;
  id v39;
  void *v40;
  uint64_t v41;
  char v42;
  id v43;
  uint64_t v44;
  char v45;
  id v46;
  char v47;
  uint64_t v48;
  unint64_t v49;
  id v50;
  char v51;
  uint64_t v52;
  unint64_t v53;
  id v54;
  char v55;
  id v56;
  char v57;
  _BYTE *v58;
  uint64_t v59;
  uint64_t v61;
  uint64_t j;
  unint64_t v63;
  unint64_t v64;
  unint64_t v65;
  uint64_t v66;
  unint64_t v67;
  uint64_t v71;
  void *v72;
  uint64_t v73;
  uint64_t v74;
  char v75;

  v6 = v5;
  v8 = *(_QWORD *)(v5 + 40);
  v9 = v8 >> 62;
  if (v8 >> 62)
    goto LABEL_93;
  v10 = *(_QWORD *)((v8 & 0xFFFFFFFFFFFFF8) + 0x10);
  swift_retain_n();
  while (1)
  {
    v71 = swift_allocObject();
    *(_QWORD *)(v71 + 16) = sub_1CA0B4650(0, v10);
    v75 = 0;
    v63 = v8;
    if (v9)
      break;
    v11 = *(_QWORD *)((v8 & 0xFFFFFFFFFFFFF8) + 0x10);
    v12 = v11;
    if (!v11)
      goto LABEL_28;
LABEL_9:
    v14 = 1.0 / (double)v12 * 0.9;
    v15 = a4;
    a3(&v75, v14);
    if ((v75 & 1) != 0)
      goto LABEL_30;
    v16 = 0;
    v66 = v8 & 0xFFFFFFFFFFFFFF8;
    v17 = 1 - v11;
    v18 = 4;
    while (1)
    {
      v21 = v18 - 4;
      v22 = *(_QWORD **)(v71 + 16);
      if ((unint64_t)(v18 - 4) >= v22[2])
        break;
      if (!v22[v18])
      {
        result = sub_1CA11118C(v18 - 4, (uint64_t *)v6, a5);
        v23 = result;
        if (*(_QWORD *)(result + 16) >= a2)
        {
          if (__OFADD__(v16++, 1))
            goto LABEL_96;
          result = swift_isUniquelyReferenced_nonNull_native();
          if ((result & 1) == 0)
          {
            result = (uint64_t)sub_1CA0B6094(v22);
            v22 = (_QWORD *)result;
          }
          if (v21 >= v22[2])
            goto LABEL_97;
          v22[v18] = v16;
          v8 = v71;
          *(_QWORD *)(v71 + 16) = v22;
          v73 = MEMORY[0x1E0DEE9E8];
          sub_1CA0DB74C(v23);
          __swift_instantiateConcreteTypeFromMangledName(&qword_1ED8528F0);
          inited = swift_initStackObject();
          *(_OWORD *)(inited + 16) = xmmword_1CA1F9100;
          *(_QWORD *)(inited + 32) = v21;
          v26 = sub_1CA0C72D0(inited);
          swift_setDeallocating();
          sub_1CA0DB74C(v26);
          v27 = v73;
          swift_retain();
          sub_1CA1114AC(v16, v27, v71, a2, (uint64_t *)v6, a5);
          swift_bridgeObjectRelease();
          swift_release();
        }
        else
        {
          swift_bridgeObjectRelease();
          result = swift_isUniquelyReferenced_nonNull_native();
          if ((result & 1) == 0)
          {
            result = (uint64_t)sub_1CA0B6094(v22);
            v22 = (_QWORD *)result;
          }
          if (v21 >= v22[2])
            goto LABEL_95;
          v22[v18] = -1;
          *(_QWORD *)(v71 + 16) = v22;
        }
      }
      if (v17 + v18 == 4)
        goto LABEL_29;
      if (v9)
      {
        v8 = v63;
        swift_bridgeObjectRetain();
        v19 = sub_1CA1F1234();
        swift_bridgeObjectRelease();
      }
      else
      {
        v19 = *(_QWORD *)(v66 + 16);
      }
      v20 = (double)(v18 - 2) / (double)v19 * 0.9;
      v15 = a4;
      a3(&v75, v20);
      ++v18;
      if ((v75 & 1) != 0)
        goto LABEL_30;
    }
    __break(1u);
LABEL_88:
    __break(1u);
LABEL_89:
    __break(1u);
LABEL_90:
    __break(1u);
LABEL_91:
    __break(1u);
LABEL_92:
    __break(1u);
LABEL_93:
    swift_retain_n();
    swift_bridgeObjectRetain();
    v10 = sub_1CA1F1234();
    swift_bridgeObjectRelease();
  }
  swift_bridgeObjectRetain();
  v11 = sub_1CA1F1234();
  result = swift_bridgeObjectRelease();
  if (v11 < 0)
  {
    __break(1u);
LABEL_95:
    __break(1u);
LABEL_96:
    __break(1u);
LABEL_97:
    __break(1u);
LABEL_98:
    __break(1u);
LABEL_99:
    __break(1u);
LABEL_100:
    __break(1u);
    return result;
  }
  if (v11)
  {
    swift_bridgeObjectRetain();
    v12 = sub_1CA1F1234();
    swift_bridgeObjectRelease();
    goto LABEL_9;
  }
LABEL_28:
  v16 = 0;
LABEL_29:
  v15 = a4;
  result = ((uint64_t (*)(char *, double))a3)(&v75, 0.9);
  if (v75 == 1)
  {
LABEL_30:
    sub_1CA0BE35C();
    swift_allocError();
    *v28 = 0;
    swift_willThrow();
    swift_release();
    goto LABEL_31;
  }
  v29 = MEMORY[0x1E0DEE9E8];
  v73 = MEMORY[0x1E0DEE9E8];
  v74 = 0;
  if (v16 < 0)
    goto LABEL_98;
  for (i = (_QWORD *)MEMORY[0x1E0DEE9D8]; v16; --v16)
  {
    result = swift_isUniquelyReferenced_nonNull_native();
    if ((result & 1) == 0)
    {
      result = (uint64_t)sub_1CA0E6144(0, i[2] + 1, 1, i);
      i = (_QWORD *)result;
    }
    v32 = i[2];
    v31 = i[3];
    if (v32 >= v31 >> 1)
    {
      result = (uint64_t)sub_1CA0E6144((_QWORD *)(v31 > 1), v32 + 1, 1, i);
      i = (_QWORD *)result;
    }
    i[2] = v32 + 1;
    v33 = &i[2 * v32];
    v33[4] = v29;
    v33[5] = 0;
  }
  if (!v9)
  {
    v8 = *(_QWORD *)((v63 & 0xFFFFFFFFFFFFF8) + 0x10);
    goto LABEL_43;
  }
  swift_bridgeObjectRetain();
  v8 = sub_1CA1F1234();
  result = swift_bridgeObjectRelease();
  if ((v8 & 0x8000000000000000) != 0)
    goto LABEL_99;
LABEL_43:
  if (v8)
  {
    v34 = *(_QWORD *)(v71 + 16);
    if (v8 - 1 < *(_QWORD *)(v34 + 16))
    {
      v35 = 0;
      v67 = v63 & 0xC000000000000001;
      a2 = v34 + 32;
      v64 = v8;
      v65 = v63 + 32;
      while (1)
      {
        v38 = *(_QWORD *)(a2 + 8 * v35);
        v9 = v38 - 1;
        if (v38 < 1)
        {
          if (v67)
          {
            v43 = (id)MEMORY[0x1CAA4A7A4](v35, v63);
          }
          else
          {
            if ((v35 & 0x8000000000000000) != 0)
              goto LABEL_91;
            if (v35 >= *(_QWORD *)((v63 & 0xFFFFFFFFFFFFFF8) + 0x10))
              goto LABEL_92;
            v43 = *(id *)(v65 + 8 * v35);
          }
          v40 = v43;
          v44 = v73;
          if ((v73 & 0xC000000000000001) != 0)
          {
            v37 = v43;
            v45 = sub_1CA1F0FDC();

            if ((v45 & 1) != 0)
              goto LABEL_47;
          }
          else if (*(_QWORD *)(v73 + 16))
          {
            v52 = sub_1CA1F0E5C();
            v6 = -1 << *(_BYTE *)(v44 + 32);
            v53 = v52 & ~v6;
            if (((*(_QWORD *)(v44 + 56 + ((v53 >> 3) & 0xFFFFFFFFFFFFF8)) >> v53) & 1) != 0)
            {
              sub_1CA0B6A1C();
              v54 = *(id *)(*(_QWORD *)(v44 + 48) + 8 * v53);
              v55 = sub_1CA1F0E68();

              if ((v55 & 1) != 0)
              {
LABEL_80:

                v8 = v64;
                goto LABEL_48;
              }
              v6 = ~v6;
              while (1)
              {
                v53 = (v53 + 1) & v6;
                v8 = v64;
                if (((*(_QWORD *)(v44 + 56 + ((v53 >> 3) & 0xFFFFFFFFFFFFF8)) >> v53) & 1) == 0)
                  break;
                v56 = *(id *)(*(_QWORD *)(v44 + 48) + 8 * v53);
                v57 = sub_1CA1F0E68();

                if ((v57 & 1) != 0)
                  goto LABEL_80;
              }
            }
          }
        }
        else
        {
          if (v67)
          {
            v39 = (id)MEMORY[0x1CAA4A7A4](v35, v63);
          }
          else
          {
            if ((v35 & 0x8000000000000000) != 0)
              goto LABEL_88;
            if (v35 >= *(_QWORD *)((v63 & 0xFFFFFFFFFFFFFF8) + 0x10))
              goto LABEL_89;
            v39 = *(id *)(v65 + 8 * v35);
          }
          v40 = v39;
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
            i = sub_1CA0B60BC(i);
          if (v9 >= i[2])
            goto LABEL_90;
          v41 = i[2 * v9 + 4];
          if ((v41 & 0xC000000000000001) != 0)
          {
            v37 = v40;
            v42 = sub_1CA1F0FDC();

            if ((v42 & 1) != 0)
              goto LABEL_47;
          }
          else if (*(_QWORD *)(v41 + 16))
          {
            v6 = sub_1CA1F0E5C() & ~(-1 << *(_BYTE *)(v41 + 32));
            if (((*(_QWORD *)(v41 + 56 + ((v6 >> 3) & 0xFFFFFFFFFFFFF8)) >> v6) & 1) != 0)
            {
              v61 = -1 << *(_BYTE *)(v41 + 32);
              sub_1CA0B6A1C();
              v46 = *(id *)(*(_QWORD *)(v41 + 48) + 8 * v6);
              v47 = sub_1CA1F0E68();

              if ((v47 & 1) != 0)
                goto LABEL_80;
              v48 = ~v61;
              v49 = v6 + 1;
              for (j = ~v61; ; v48 = j)
              {
                v6 = v49 & v48;
                v8 = v64;
                if (((*(_QWORD *)(v41 + 56 + (((v49 & v48) >> 3) & 0xFFFFFFFFFFFFF8)) >> (v49 & v48)) & 1) == 0)
                  break;
                v50 = *(id *)(*(_QWORD *)(v41 + 48) + 8 * v6);
                v51 = sub_1CA1F0E68();

                if ((v51 & 1) != 0)
                  goto LABEL_80;
                v49 = v6 + 1;
              }
            }
          }
        }
        v36 = v40;
        sub_1CA0BDD74(&v72, v36);
        v37 = v72;

LABEL_47:
LABEL_48:
        if (++v35 == v8)
          goto LABEL_84;
      }
    }
    goto LABEL_100;
  }
LABEL_84:
  v75 = 0;
  a3(&v75, 1.0);
  if (v75 == 1)
  {
    v15 = v74;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    sub_1CA0BE35C();
    swift_allocError();
    *v58 = 0;
    swift_willThrow();
    swift_release();
LABEL_31:
    swift_release_n();
  }
  else
  {
    v15 = sub_1CA0C73D4((uint64_t)i);
    swift_release_n();
    swift_bridgeObjectRelease();
    v59 = v74;
    *a1 = v73;
    a1[1] = v59;
    swift_release();
  }
  return v15;
}

uint64_t sub_1CA111168()
{
  swift_bridgeObjectRelease();
  return swift_deallocObject();
}

uint64_t sub_1CA11118C(uint64_t result, uint64_t *a2, double a3)
{
  uint64_t *v4;
  int64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  double v13;
  uint64_t v14;
  uint64_t v15;

  v4 = a2;
  v5 = result;
  v15 = MEMORY[0x1E0DEE9E8];
  v6 = a2[5];
  if (v6 >> 62)
    goto LABEL_24;
  v7 = *(_QWORD *)((v6 & 0xFFFFFFFFFFFFF8) + 0x10);
  while (1)
  {
    if (!v7)
      return MEMORY[0x1E0DEE9E8];
    if (v4[2] < v5)
      break;
    v8 = v4[3];
    v9 = v5 * v8;
    if ((unsigned __int128)(v5 * (__int128)v8) >> 64 != (v5 * v8) >> 63)
      goto LABEL_27;
    v10 = v4[4];
    if ((v6 & 0xC000000000000001) == 0)
    {
      if (v5 < 0)
        goto LABEL_28;
      v11 = *(_QWORD *)((v6 & 0xFFFFFFFFFFFFF8) + 0x10);
      if (v11 <= v5 || v7 - 1 >= v11)
        goto LABEL_29;
    }
    v12 = 0;
    while (v8 >= v12)
    {
      if (v9 < 0)
        goto LABEL_22;
      if ((unint64_t)(v9 + v12) >= *(_QWORD *)(v10 + 16))
        goto LABEL_23;
      v13 = *(double *)(v10 + 8 * v8 * v5 + 32 + 8 * v12);
      if ((v6 & 0xC000000000000001) != 0)
      {
        v4 = (uint64_t *)MEMORY[0x1CAA4A7A4](v5, v6);
        MEMORY[0x1CAA4A7A4](v12, v6);
        swift_unknownObjectRelease();
        swift_unknownObjectRelease();
      }
      if (v13 <= a3)
      {
        v4 = &v15;
        sub_1CA0BE3A0(&v14, v12);
      }
      if (v7 == ++v12)
        return v15;
    }
    __break(1u);
LABEL_22:
    __break(1u);
LABEL_23:
    __break(1u);
LABEL_24:
    swift_bridgeObjectRetain();
    v7 = sub_1CA1F1234();
    result = swift_bridgeObjectRelease();
    if (v7 < 0)
    {
      __break(1u);
      break;
    }
  }
  __break(1u);
LABEL_27:
  __break(1u);
LABEL_28:
  __break(1u);
LABEL_29:
  __break(1u);
  return result;
}

uint64_t sub_1CA11134C(uint64_t result)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  int64_t v7;
  int64_t v8;
  unint64_t v9;
  unint64_t v10;
  int64_t v11;
  unint64_t v12;
  int64_t v13;

  if (!*(_QWORD *)(*(_QWORD *)v1 + 16))
    return result;
  v2 = result;
  v3 = result + 56;
  v4 = 1 << *(_BYTE *)(result + 32);
  v5 = -1;
  if (v4 < 64)
    v5 = ~(-1 << v4);
  v6 = v5 & *(_QWORD *)(result + 56);
  v7 = (unint64_t)(v4 + 63) >> 6;
  result = swift_bridgeObjectRetain();
  v8 = 0;
  while (1)
  {
    if (v6)
    {
      v9 = __clz(__rbit64(v6));
      v6 &= v6 - 1;
      v10 = v9 | (v8 << 6);
      goto LABEL_6;
    }
    v11 = v8 + 1;
    if (__OFADD__(v8, 1))
    {
      __break(1u);
      goto LABEL_27;
    }
    if (v11 >= v7)
      return swift_release();
    v12 = *(_QWORD *)(v3 + 8 * v11);
    ++v8;
    if (!v12)
    {
      v8 = v11 + 1;
      if (v11 + 1 >= v7)
        return swift_release();
      v12 = *(_QWORD *)(v3 + 8 * v8);
      if (!v12)
      {
        v8 = v11 + 2;
        if (v11 + 2 >= v7)
          return swift_release();
        v12 = *(_QWORD *)(v3 + 8 * v8);
        if (!v12)
        {
          v8 = v11 + 3;
          if (v11 + 3 >= v7)
            return swift_release();
          v12 = *(_QWORD *)(v3 + 8 * v8);
          if (!v12)
            break;
        }
      }
    }
LABEL_23:
    v6 = (v12 - 1) & v12;
    v10 = __clz(__rbit64(v12)) + (v8 << 6);
LABEL_6:
    result = sub_1CA0C065C(*(_QWORD *)(*(_QWORD *)(v2 + 48) + 8 * v10));
  }
  v13 = v11 + 4;
  if (v13 >= v7)
    return swift_release();
  v12 = *(_QWORD *)(v3 + 8 * v13);
  if (v12)
  {
    v8 = v13;
    goto LABEL_23;
  }
  while (1)
  {
    v8 = v13 + 1;
    if (__OFADD__(v13, 1))
      break;
    if (v8 >= v7)
      return swift_release();
    v12 = *(_QWORD *)(v3 + 8 * v8);
    ++v13;
    if (v12)
      goto LABEL_23;
  }
LABEL_27:
  __break(1u);
  return result;
}

uint64_t sub_1CA1114AC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t *a5, double a6)
{
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  int64_t v15;
  uint64_t result;
  int64_t v17;
  unint64_t v18;
  unint64_t v19;
  int64_t v20;
  unint64_t v21;
  int64_t v22;
  unint64_t v23;
  _QWORD *v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v28;

  v28 = MEMORY[0x1E0DEE9E8];
  v11 = a2 + 56;
  v12 = 1 << *(_BYTE *)(a2 + 32);
  v13 = -1;
  if (v12 < 64)
    v13 = ~(-1 << v12);
  v14 = v13 & *(_QWORD *)(a2 + 56);
  v15 = (unint64_t)(v12 + 63) >> 6;
  swift_retain();
  result = swift_bridgeObjectRetain();
  v17 = 0;
  while (1)
  {
    if (v14)
    {
      v18 = __clz(__rbit64(v14));
      v14 &= v14 - 1;
      v19 = v18 | (v17 << 6);
      goto LABEL_21;
    }
    v20 = v17 + 1;
    if (__OFADD__(v17, 1))
      goto LABEL_41;
    if (v20 >= v15)
      break;
    v21 = *(_QWORD *)(v11 + 8 * v20);
    ++v17;
    if (!v21)
    {
      v17 = v20 + 1;
      if (v20 + 1 >= v15)
        break;
      v21 = *(_QWORD *)(v11 + 8 * v17);
      if (!v21)
      {
        v17 = v20 + 2;
        if (v20 + 2 >= v15)
          break;
        v21 = *(_QWORD *)(v11 + 8 * v17);
        if (!v21)
        {
          v22 = v20 + 3;
          if (v22 >= v15)
            break;
          v21 = *(_QWORD *)(v11 + 8 * v22);
          if (!v21)
          {
            while (1)
            {
              v17 = v22 + 1;
              if (__OFADD__(v22, 1))
                goto LABEL_44;
              if (v17 >= v15)
                goto LABEL_35;
              v21 = *(_QWORD *)(v11 + 8 * v17);
              ++v22;
              if (v21)
                goto LABEL_20;
            }
          }
          v17 = v22;
        }
      }
    }
LABEL_20:
    v14 = (v21 - 1) & v21;
    v19 = __clz(__rbit64(v21)) + (v17 << 6);
LABEL_21:
    v23 = *(_QWORD *)(*(_QWORD *)(a2 + 48) + 8 * v19);
    if ((v23 & 0x8000000000000000) != 0)
    {
      __break(1u);
LABEL_39:
      __break(1u);
LABEL_40:
      __break(1u);
LABEL_41:
      __break(1u);
LABEL_42:
      __break(1u);
LABEL_43:
      __break(1u);
LABEL_44:
      __break(1u);
      return result;
    }
    v24 = *(_QWORD **)(a3 + 16);
    v25 = v24[2];
    if (v23 >= v25)
      goto LABEL_39;
    if (v24[v23 + 4] == -1)
    {
      result = swift_isUniquelyReferenced_nonNull_native();
      *(_QWORD *)(a3 + 16) = v24;
      if ((result & 1) == 0)
      {
        result = (uint64_t)sub_1CA0B6094(v24);
        v24 = (_QWORD *)result;
      }
      if (v23 >= v24[2])
        goto LABEL_42;
      v24[v23 + 4] = a1;
      *(_QWORD *)(a3 + 16) = v24;
      v25 = v24[2];
    }
    if (v23 >= v25)
      goto LABEL_40;
    if (!v24[v23 + 4])
    {
      result = swift_isUniquelyReferenced_nonNull_native();
      *(_QWORD *)(a3 + 16) = v24;
      if ((result & 1) == 0)
      {
        result = (uint64_t)sub_1CA0B6094(v24);
        v24 = (_QWORD *)result;
      }
      if (v23 >= v24[2])
        goto LABEL_43;
      v24[v23 + 4] = a1;
      *(_QWORD *)(a3 + 16) = v24;
      v26 = sub_1CA11118C(v23, a5, a6);
      if (*(_QWORD *)(v26 + 16) >= a4)
        result = sub_1CA0DB74C(v26);
      else
        result = swift_bridgeObjectRelease();
    }
  }
LABEL_35:
  swift_release();
  sub_1CA11134C(a2);
  if (*(_QWORD *)(v28 + 16))
  {
    swift_retain();
    sub_1CA1114AC(a1, v28, a3, a4, a5, a6);
    swift_bridgeObjectRelease();
    return swift_release_n();
  }
  else
  {
    swift_release();
    return swift_bridgeObjectRelease();
  }
}

float sub_1CA111794()
{
  return 1.0;
}

float (*static SparseMatrix.binaryClosure.getter())()
{
  return sub_1CA111794;
}

void static SparseMatrix.random(rows:columns:density:element:)(int64_t a1, int64_t a2, float (*a3)(void), double a4)
{
  swift_retain();
  sub_1CA111ACC(a1, a2, 0, 0, a3, a4);
}

void static SparseMatrix.randomSquare(rows:density:noDiagonal:element:)(int64_t a1, uint64_t a2, float (*a3)(void), uint64_t a4, double a5)
{
  sub_1CA11181C(a1, a2, a3, a5, a4, 0);
}

void static SparseMatrix.randomUpperTriangular(rows:density:noDiagonal:element:)(int64_t a1, uint64_t a2, float (*a3)(void), uint64_t a4, double a5)
{
  sub_1CA11181C(a1, a2, a3, a5, a4, 1u);
}

void sub_1CA11181C(int64_t a1, uint64_t a2, float (*a3)(void), double a4, uint64_t a5, unsigned __int8 a6)
{
  swift_retain();
  sub_1CA111ACC(a1, a1, a2, a6, a3, a4);
}

void static SparseMatrix.randomSymmetric(rows:density:noDiagonal:element:)(int64_t a1, char a2, void (*a3)(void), double a4)
{
  uint64_t inserted;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  double v12;
  uint64_t v13;
  BOOL v14;
  double v15;
  double v16;
  uint64_t v17;
  uint64_t v18;
  float v19;
  float v20;
  float v21;

  type metadata accessor for SparseMatrix();
  swift_allocObject();
  inserted = SparseMatrix.init(rows:columns:)(a1, a1);
  v8 = *(_QWORD *)(inserted + 16);
  v9 = v8 * v8;
  if ((unsigned __int128)(v8 * (__int128)v8) >> 64 != (v8 * v8) >> 63)
  {
LABEL_42:
    __break(1u);
    goto LABEL_43;
  }
  v10 = v9 - 1;
  if (!__OFSUB__(v9, 1))
  {
    if (a4 <= 0.0 || a4 > 1.0 || v10 < 0)
      goto LABEL_44;
    v11 = inserted;
    v12 = 0.0;
    if (a4 != 1.0)
      v12 = 1.0 / log(1.0 - a4);
    v13 = -1;
    while (1)
    {
      if (a4 == 1.0)
      {
        v14 = __OFADD__(v13++, 1);
        if (v14)
          goto LABEL_33;
      }
      else
      {
        sub_1CA0C778C(inserted, 0.0, 1.0);
        v16 = ceil(v12 * log(1.0 - v15));
        if ((~*(_QWORD *)&v16 & 0x7FF0000000000000) == 0)
          goto LABEL_38;
        if (v16 <= -9.22337204e18)
          goto LABEL_39;
        if (v16 >= 9.22337204e18)
          goto LABEL_40;
        v14 = __OFADD__(v13, (uint64_t)v16);
        v13 += (uint64_t)v16;
        if (v14)
          goto LABEL_41;
      }
      if (v10 < v13)
      {
        sparse_commit(*(void **)(v11 + 32));
        return;
      }
      v17 = *(_QWORD *)(v11 + 24);
      if (!v17)
        break;
      if (v13 == 0x8000000000000000 && v17 == -1)
        goto LABEL_34;
      v18 = v13 / v17;
      if (v13 % v17 < v13 / v17)
      {
        a3();
        if (v17 < 0 || v18 >= v8)
          goto LABEL_35;
        v20 = v19;
        sparse_insert_entry_float(*(sparse_matrix_float *)(v11 + 32), v19, v13 / v17, v13 % v17);
        if (v18 >= v17)
          goto LABEL_36;
        inserted = sparse_insert_entry_float(*(sparse_matrix_float *)(v11 + 32), v20, v13 % v17, v13 / v17);
      }
      if (v18 == v13 % v17 && (a2 & 1) == 0)
      {
        ((void (*)(uint64_t))a3)(inserted);
        if (v17 < 0 || v18 >= v8)
          goto LABEL_37;
        inserted = sparse_insert_entry_float(*(sparse_matrix_float *)(v11 + 32), v21, v13 / v17, v13 / v17);
      }
    }
    __break(1u);
LABEL_33:
    __break(1u);
LABEL_34:
    __break(1u);
LABEL_35:
    __break(1u);
LABEL_36:
    __break(1u);
LABEL_37:
    __break(1u);
LABEL_38:
    __break(1u);
LABEL_39:
    __break(1u);
LABEL_40:
    __break(1u);
LABEL_41:
    __break(1u);
    goto LABEL_42;
  }
LABEL_43:
  __break(1u);
LABEL_44:
  __break(1u);
}

void sub_1CA111ACC(int64_t a1, int64_t a2, uint64_t a3, unsigned __int8 a4, float (*a5)(void), double a6)
{
  int64_t v10;
  uint64_t v11;
  double v12;
  uint64_t isUniquelyReferenced_nonNull_native;
  sparse_index v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  BOOL v18;
  double v19;
  double v20;
  uint64_t v21;
  sparse_index v22;
  uint64_t v23;
  int64_t v24;
  uint64_t v25;
  sparse_m_float *v26;
  sparse_dimension v27;
  sparse_m_float *v28;
  sparse_index v29;
  uint64_t v30;
  unint64_t v31;
  unint64_t v32;
  float v33;
  unint64_t v34;
  unint64_t v35;
  const float *v36;
  sparse_m_float *v37;
  sparse_dimension v38;
  void *v39;
  int64_t v41;

  type metadata accessor for SparseMatrix();
  swift_allocObject();
  v41 = SparseMatrix.init(rows:columns:)(a1, a2);
  v10 = a1 * a2;
  if ((unsigned __int128)(a1 * (__int128)a2) >> 64 != (a1 * a2) >> 63)
  {
LABEL_42:
    __break(1u);
    goto LABEL_43;
  }
  v11 = v10 - 1;
  if (!__OFSUB__(v10, 1))
  {
    if (a6 <= 0.0 || a6 > 1.0 || v11 < 0)
      goto LABEL_44;
    v12 = 0.0;
    if (a6 != 1.0)
      v12 = 1.0 / log(1.0 - a6);
    isUniquelyReferenced_nonNull_native = swift_retain();
    v14 = 0;
    v15 = MEMORY[0x1E0DEE9D8];
    v16 = -1;
    v17 = (_QWORD *)MEMORY[0x1E0DEE9D8];
    while (1)
    {
      if (a6 == 1.0)
      {
        v18 = __OFADD__(v16++, 1);
        if (v18)
          goto LABEL_36;
      }
      else
      {
        sub_1CA0C778C(isUniquelyReferenced_nonNull_native, 0.0, 1.0);
        v20 = ceil(v12 * log(1.0 - v19));
        if ((~*(_QWORD *)&v20 & 0x7FF0000000000000) == 0)
          goto LABEL_38;
        if (v20 <= -9.22337204e18)
          goto LABEL_39;
        if (v20 >= 9.22337204e18)
          goto LABEL_40;
        v18 = __OFADD__(v16, (uint64_t)v20);
        v16 += (uint64_t)v20;
        if (v18)
          goto LABEL_41;
      }
      if (v11 < v16)
      {
        v36 = (const float *)(v15 + 32);
        v37 = *(sparse_m_float **)(v41 + 32);
        v38 = v17[2];
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        sparse_insert_row_float(v37, v14, v38, v36, v17 + 4);
        swift_bridgeObjectRelease_n();
        swift_bridgeObjectRelease();
        v39 = *(void **)(v41 + 32);
        swift_release();
        sparse_commit(v39);
        swift_bridgeObjectRelease();
        swift_release();
        return;
      }
      if (!a2)
        break;
      if (v16 == 0x8000000000000000 && a2 == -1)
        goto LABEL_37;
      v21 = v16 / a2;
      if (v16 / a2 != v14)
      {
        v22 = v14;
        v23 = v11;
        v24 = a2;
        v25 = a3;
        v26 = *(sparse_m_float **)(v41 + 32);
        v27 = v17[2];
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        v28 = v26;
        a3 = v25;
        a2 = v24;
        v11 = v23;
        sparse_insert_row_float(v28, v22, v27, (const float *)(v15 + 32), v17 + 4);
        swift_bridgeObjectRelease_n();
        isUniquelyReferenced_nonNull_native = swift_bridgeObjectRelease_n();
        v14 = v21;
        v15 = MEMORY[0x1E0DEE9D8];
        v17 = (_QWORD *)MEMORY[0x1E0DEE9D8];
      }
      v29 = v16 - v21 * a2;
      if ((a3 & (v29 == v14)) == 0 && (a4 & (v29 < v14)) == 0)
      {
        v30 = v15;
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
          v17 = sub_1CA0E59A0(0, v17[2] + 1, 1, v17);
        v32 = v17[2];
        v31 = v17[3];
        if (v32 >= v31 >> 1)
          v17 = sub_1CA0E59A0((_QWORD *)(v31 > 1), v32 + 1, 1, v17);
        v17[2] = v32 + 1;
        v17[v32 + 4] = v29;
        v33 = a5();
        v15 = v30;
        isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
        if ((isUniquelyReferenced_nonNull_native & 1) == 0)
        {
          isUniquelyReferenced_nonNull_native = (uint64_t)sub_1CA0E59AC(0, *(_QWORD *)(v30 + 16) + 1, 1, (char *)v30);
          v15 = isUniquelyReferenced_nonNull_native;
        }
        v35 = *(_QWORD *)(v15 + 16);
        v34 = *(_QWORD *)(v15 + 24);
        if (v35 >= v34 >> 1)
        {
          isUniquelyReferenced_nonNull_native = (uint64_t)sub_1CA0E59AC((char *)(v34 > 1), v35 + 1, 1, (char *)v15);
          v15 = isUniquelyReferenced_nonNull_native;
        }
        *(_QWORD *)(v15 + 16) = v35 + 1;
        *(float *)(v15 + 4 * v35 + 32) = v33;
      }
    }
    __break(1u);
LABEL_36:
    __break(1u);
LABEL_37:
    __break(1u);
LABEL_38:
    __break(1u);
LABEL_39:
    __break(1u);
LABEL_40:
    __break(1u);
LABEL_41:
    __break(1u);
    goto LABEL_42;
  }
LABEL_43:
  __break(1u);
LABEL_44:
  __break(1u);
}

uint64_t sub_1CA111E90(uint64_t a1, char a2)
{
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  BOOL v14;
  uint64_t result;
  uint64_t v16;

  if (a1 >= 2)
  {
    v3 = (_QWORD *)MAGraph.adjacencyMatrix(directed:)(a2 & 1);
    v16 = MEMORY[0x1E0DEE9D8];
    v4 = v3[3];
    v5 = v3[2];
    swift_bridgeObjectRetain();
    if (v4 == v5)
    {
      v6 = a1 - 1;
      v7 = v5;
      v8 = v5;
      while (1)
      {
        v9 = v5 * v8;
        if ((unsigned __int128)(v5 * (__int128)v8) >> 64 != (v5 * v8) >> 63)
          break;
        if (v9 < 0)
          goto LABEL_28;
        swift_bridgeObjectRetain();
        if (v9)
        {
          v10 = sub_1CA1F0B68();
          *(_QWORD *)(v10 + 16) = v9;
          bzero((void *)(v10 + 32), 8 * v5 * v8);
        }
        else
        {
          v10 = MEMORY[0x1E0DEE9D8];
        }
        if (v5 > 0x7FFFFFFF)
          goto LABEL_23;
        if (v8 > 0x7FFFFFFF)
          goto LABEL_24;
        if (v5 < (uint64_t)0xFFFFFFFF80000000
          || v8 < (uint64_t)0xFFFFFFFF80000000
          || v7 < (uint64_t)0xFFFFFFFF80000000)
        {
          goto LABEL_25;
        }
        if (v7 > 0x7FFFFFFF)
          goto LABEL_26;
        cblas_dgemm_NEWLAPACK();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        v11 = v3[5];
        type metadata accessor for MASquareMatrixRepresentation();
        v12 = (_QWORD *)swift_allocObject();
        v12[2] = v5;
        v12[3] = v8;
        v12[4] = v10;
        v12[5] = v11;
        swift_bridgeObjectRetain();
        v13 = swift_bridgeObjectRetain();
        MEMORY[0x1CAA4A1E0](v13);
        if (*(_QWORD *)((v16 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(_QWORD *)((v16 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1)
          sub_1CA1F0B2C();
        sub_1CA1F0B8C();
        sub_1CA1F0B14();
        if (!--v6)
        {
          swift_release();
          swift_bridgeObjectRelease();
          return v16;
        }
        v7 = v8;
        v14 = v8 == v3[2];
        v8 = v3[3];
        if (!v14)
          goto LABEL_21;
      }
    }
    else
    {
LABEL_21:
      __break(1u);
    }
    __break(1u);
LABEL_23:
    __break(1u);
LABEL_24:
    __break(1u);
LABEL_25:
    __break(1u);
LABEL_26:
    __break(1u);
  }
  __break(1u);
LABEL_28:
  result = sub_1CA1F11BC();
  __break(1u);
  return result;
}

uint64_t MASimilarityDistance.directed.getter()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + 16);
}

uint64_t MASimilarityDistance.options.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t MASimilarityDistance.__allocating_init(directed:options:)(char a1, uint64_t a2)
{
  uint64_t result;

  result = swift_allocObject();
  *(_BYTE *)(result + 16) = a1;
  *(_QWORD *)(result + 24) = a2;
  return result;
}

uint64_t MASimilarityDistance.init(directed:options:)(char a1, uint64_t a2)
{
  uint64_t v2;

  *(_BYTE *)(v2 + 16) = a1;
  *(_QWORD *)(v2 + 24) = a2;
  return v2;
}

void sub_1CA112184(void *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t (*v9)(uint64_t, uint64_t);
  uint64_t v10;
  id v11;
  id v12;
  id v13;

  v9 = *(uint64_t (**)(uint64_t, uint64_t))(v4 + 96);
  swift_bridgeObjectRetain();
  v10 = v9(a3, a4);
  v11 = objc_msgSend(a1, sel_graph);
  if (v11)
  {
    v12 = objc_msgSend(v11, sel_graphReference);
    swift_unknownObjectRelease();
    v13 = objc_msgSend(v12, sel_concreteGraph);

    if (v13)
    {
      (*(void (**)(id))(*(_QWORD *)v10 + 104))(v13);

      (*(void (**)(void *, uint64_t))(*(_QWORD *)v10 + 112))(a1, a2);
      swift_release();
      return;
    }
  }
  else
  {
    __break(1u);
  }
  __break(1u);
}

uint64_t MASimilarityDistance.deinit()
{
  uint64_t v0;

  swift_bridgeObjectRelease();
  return v0;
}

uint64_t MASimilarityDistance.__deallocating_deinit()
{
  swift_bridgeObjectRelease();
  return swift_deallocClassInstance();
}

double sub_1CA1122C4(void *a1, uint64_t a2)
{
  uint64_t v2;
  id v3;
  id v4;

  v3 = objc_msgSend(a1, sel_shortestPathToNode_directed_, a2, *(unsigned __int8 *)(v2 + 16));
  v4 = objc_msgSend(v3, sel_edgesCount);

  return -(double)(uint64_t)v4;
}

double sub_1CA112320(id a1, void *a2)
{
  uint64_t v2;
  id v5;
  uint64_t v6;
  id v7;
  uint64_t v8;
  void *v9;
  id v10;
  uint64_t v11;
  id v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  id v17;
  uint64_t v18;
  id v19;
  uint64_t v20;
  uint64_t v21;

  if (*(_BYTE *)(v2 + 16) == 1)
  {
    v5 = objc_msgSend(a1, sel_neighborNodesThroughOutEdges);
    sub_1CA0B6A1C();
    sub_1CA0C0614();
    v6 = sub_1CA1F0C94();

    v7 = objc_msgSend(a2, sel_neighborNodesThroughOutEdges);
    v8 = sub_1CA1F0C94();

    v9 = (void *)sub_1CA113F78(v8, v6);
    swift_bridgeObjectRelease();
    v10 = objc_msgSend(a1, sel_neighborNodesThroughInEdges);
    v11 = sub_1CA1F0C94();

    v12 = objc_msgSend(a2, sel_neighborNodesThroughInEdges);
    v13 = sub_1CA1F0C94();

    v14 = sub_1CA113F78(v13, v11);
    swift_bridgeObjectRelease();
    sub_1CA0D3C08(v14, v9);
    if ((v15 & 0xC000000000000001) != 0)
      v16 = sub_1CA1F0FA0();
    else
      v16 = *(_QWORD *)(v15 + 16);
    swift_bridgeObjectRelease();
  }
  else
  {
    v17 = objc_msgSend(a1, sel_neighborNodes);
    sub_1CA0B6A1C();
    sub_1CA0C0614();
    v18 = sub_1CA1F0C94();

    v19 = objc_msgSend(a2, sel_neighborNodes);
    v20 = sub_1CA1F0C94();

    v21 = sub_1CA113F78(v20, v18);
    swift_bridgeObjectRelease();
    if ((v21 & 0xC000000000000001) != 0)
      v16 = sub_1CA1F0FA0();
    else
      v16 = *(_QWORD *)(v21 + 16);
    swift_release();
  }
  return (double)v16;
}

double sub_1CA112560(id a1, void *a2)
{
  uint64_t v2;
  id v5;
  void *v6;
  id v7;
  uint64_t v8;
  id v9;
  unint64_t v10;
  id v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  id v16;
  uint64_t v17;
  id v18;
  uint64_t v19;

  if (*(_BYTE *)(v2 + 16) != 1)
  {
    v16 = objc_msgSend(a1, sel_neighborNodes);
    sub_1CA0B6A1C();
    sub_1CA0C0614();
    v17 = sub_1CA1F0C94();

    v18 = objc_msgSend(a2, sel_neighborNodes);
    v19 = sub_1CA1F0C94();

    sub_1CA114F18(v19);
    v14 = v17;
    if ((v17 & 0xC000000000000001) != 0)
      goto LABEL_3;
LABEL_5:
    v15 = *(_QWORD *)(v14 + 16);
    goto LABEL_6;
  }
  v5 = objc_msgSend(a1, sel_neighborNodesThroughOutEdges);
  sub_1CA0B6A1C();
  sub_1CA0C0614();
  v6 = (void *)sub_1CA1F0C94();

  v7 = objc_msgSend(a2, sel_neighborNodesThroughOutEdges);
  v8 = sub_1CA1F0C94();

  sub_1CA114F18(v8);
  v9 = objc_msgSend(a1, sel_neighborNodesThroughInEdges);
  v10 = sub_1CA1F0C94();

  v11 = objc_msgSend(a2, sel_neighborNodesThroughInEdges);
  v12 = sub_1CA1F0C94();

  sub_1CA114F18(v12);
  sub_1CA0D3C08(v10, v6);
  v14 = v13;
  if ((v13 & 0xC000000000000001) == 0)
    goto LABEL_5;
LABEL_3:
  v15 = sub_1CA1F0FA0();
LABEL_6:
  swift_bridgeObjectRelease();
  return sqrt((double)v15);
}

uint64_t MAEuclideanSimilarityDistance.init(directed:options:)(char a1, uint64_t a2)
{
  uint64_t v2;

  *(_BYTE *)(v2 + 16) = a1;
  *(_QWORD *)(v2 + 24) = a2;
  return v2;
}

uint64_t sub_1CA11278C(id a1, void *a2)
{
  uint64_t v2;
  id v5;
  uint64_t v6;
  id v7;
  uint64_t v8;
  uint64_t v9;
  id v10;
  uint64_t v11;
  id v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t result;
  uint64_t v17;
  uint64_t v18;

  if (*(_BYTE *)(v2 + 16) != 1)
  {
    sub_1CA112320(a1, a2);
    v15 = (uint64_t)objc_msgSend(a1, sel_degreeCount);
    result = (uint64_t)objc_msgSend(a2, sel_degreeCount);
    if ((unsigned __int128)(v15 * (__int128)result) >> 64 == (v15 * result) >> 63)
      return result;
    __break(1u);
    goto LABEL_12;
  }
  v5 = objc_msgSend(a1, sel_neighborNodesThroughOutEdges);
  sub_1CA0B6A1C();
  sub_1CA0C0614();
  v6 = sub_1CA1F0C94();

  v7 = objc_msgSend(a2, sel_neighborNodesThroughOutEdges);
  v8 = sub_1CA1F0C94();

  v9 = sub_1CA113F78(v8, v6);
  swift_bridgeObjectRelease();
  v10 = objc_msgSend(a1, sel_neighborNodesThroughInEdges);
  v11 = sub_1CA1F0C94();

  v12 = objc_msgSend(a2, sel_neighborNodesThroughInEdges);
  v13 = sub_1CA1F0C94();

  v14 = sub_1CA113F78(v13, v11);
  swift_bridgeObjectRelease();
  if ((v9 & 0xC000000000000001) != 0)
    sub_1CA1F0FA0();
  swift_release();
  v17 = (uint64_t)objc_msgSend(a1, sel_outDegreeCount);
  result = (uint64_t)objc_msgSend(a2, sel_outDegreeCount);
  if ((unsigned __int128)(v17 * (__int128)result) >> 64 != (v17 * result) >> 63)
  {
LABEL_12:
    __break(1u);
LABEL_13:
    __break(1u);
    return result;
  }
  if ((v14 & 0xC000000000000001) != 0)
    sub_1CA1F0FA0();
  swift_release();
  v18 = (uint64_t)objc_msgSend(a1, sel_inDegreeCount);
  result = (uint64_t)objc_msgSend(a2, sel_inDegreeCount);
  if ((unsigned __int128)(v18 * (__int128)result) >> 64 != (v18 * result) >> 63)
    goto LABEL_13;
  return result;
}

uint64_t MACosineSimilarityDistance.deinit()
{
  uint64_t v0;

  swift_bridgeObjectRelease();
  return v0;
}

double sub_1CA112A30(void *a1, void *a2)
{
  double v4;
  id v5;
  void *v6;
  id v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v4 = sub_1CA112320(a1, a2);
  v5 = objc_msgSend(a1, sel_neighborNodes);
  sub_1CA0B6A1C();
  sub_1CA0C0614();
  v6 = (void *)sub_1CA1F0C94();

  v7 = objc_msgSend(a2, sel_neighborNodes);
  v8 = sub_1CA1F0C94();

  sub_1CA0D3C08(v8, v6);
  if ((v9 & 0xC000000000000001) != 0)
    v10 = sub_1CA1F0FA0();
  else
    v10 = *(_QWORD *)(v9 + 16);
  swift_bridgeObjectRelease();
  return v4 / (double)v10;
}

uint64_t _s17KnowledgeGraphKit32MAShortestPathSimilarityDistanceC8directed7optionsACSb_SDySSypGtcfC_0(char a1, uint64_t a2)
{
  uint64_t result;

  result = swift_allocObject();
  *(_BYTE *)(result + 16) = a1;
  *(_QWORD *)(result + 24) = a2;
  return result;
}

uint64_t _s17KnowledgeGraphKit26MACosineSimilarityDistanceC8directed7optionsACSb_SDySSypGtcfc_0(char a1, uint64_t a2)
{
  uint64_t v2;

  *(_BYTE *)(v2 + 16) = a1;
  *(_QWORD *)(v2 + 24) = a2;
  return v2;
}

void sub_1CA112B84(id a1, void *a2)
{
  uint64_t v2;
  id v5;
  uint64_t v6;
  id v7;
  uint64_t v8;
  unint64_t v9;
  id v10;
  uint64_t v11;
  id v12;
  id v13;
  id v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  int64_t v25;
  double v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  id v30;
  int64_t v31;
  unint64_t v32;
  uint64_t v33;
  id v34;
  uint64_t v35;
  void *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  unint64_t v42;

  v37 = MEMORY[0x1E0DEE9E8];
  if (*(_BYTE *)(v2 + 16) == 1)
  {
    v5 = objc_msgSend(a1, sel_neighborNodesThroughOutEdges);
    sub_1CA0B6A1C();
    sub_1CA0C0614();
    v6 = sub_1CA1F0C94();

    v7 = objc_msgSend(a2, sel_neighborNodesThroughOutEdges);
    v8 = sub_1CA1F0C94();

    v9 = sub_1CA113F78(v8, v6);
    swift_bridgeObjectRelease();
    sub_1CA0DB894(v9);
    v10 = objc_msgSend(a1, sel_neighborNodesThroughInEdges);
    v11 = sub_1CA1F0C94();

    v12 = objc_msgSend(a2, sel_neighborNodesThroughInEdges);
  }
  else
  {
    v13 = objc_msgSend(a1, sel_neighborNodes);
    sub_1CA0B6A1C();
    sub_1CA0C0614();
    v11 = sub_1CA1F0C94();

    v12 = objc_msgSend(a2, sel_neighborNodes);
  }
  v14 = v12;
  v15 = sub_1CA1F0C94();

  v16 = sub_1CA113F78(v15, v11);
  swift_bridgeObjectRelease();
  sub_1CA0DB894(v16);
  v17 = v37;
  if ((v37 & 0xC000000000000001) != 0)
  {
    sub_1CA1F0F64();
    sub_1CA0B6A1C();
    sub_1CA0C0614();
    sub_1CA1F0CC4();
    v17 = v38;
    v18 = v39;
    v19 = v40;
    v20 = v41;
    v21 = v42;
  }
  else
  {
    v20 = 0;
    v22 = -1 << *(_BYTE *)(v37 + 32);
    v18 = v37 + 56;
    v19 = ~v22;
    v23 = -v22;
    if (v23 < 64)
      v24 = ~(-1 << v23);
    else
      v24 = -1;
    v21 = v24 & *(_QWORD *)(v37 + 56);
  }
  v35 = v19;
  v25 = (unint64_t)(v19 + 64) >> 6;
  v26 = 0.0;
  if (v17 < 0)
    goto LABEL_13;
  while (1)
  {
    if (v21)
    {
      v27 = (v21 - 1) & v21;
      v28 = __clz(__rbit64(v21)) | (v20 << 6);
      v29 = v20;
      goto LABEL_30;
    }
    v31 = v20 + 1;
    if (__OFADD__(v20, 1))
      break;
    if (v31 >= v25)
      goto LABEL_33;
    v32 = *(_QWORD *)(v18 + 8 * v31);
    v29 = v20 + 1;
    if (!v32)
    {
      v29 = v20 + 2;
      if (v20 + 2 >= v25)
        goto LABEL_33;
      v32 = *(_QWORD *)(v18 + 8 * v29);
      if (!v32)
      {
        v29 = v20 + 3;
        if (v20 + 3 >= v25)
          goto LABEL_33;
        v32 = *(_QWORD *)(v18 + 8 * v29);
        if (!v32)
        {
          v29 = v20 + 4;
          if (v20 + 4 >= v25)
            goto LABEL_33;
          v32 = *(_QWORD *)(v18 + 8 * v29);
          if (!v32)
          {
            v33 = v20 + 5;
            while (v25 != v33)
            {
              v32 = *(_QWORD *)(v18 + 8 * v33++);
              if (v32)
              {
                v29 = v33 - 1;
                goto LABEL_29;
              }
            }
LABEL_33:
            v21 = 0;
LABEL_34:
            sub_1CA0B6B24(v17, v18, v35, v20, v21);
            return;
          }
        }
      }
    }
LABEL_29:
    v27 = (v32 - 1) & v32;
    v28 = __clz(__rbit64(v32)) + (v29 << 6);
LABEL_30:
    v30 = *(id *)(*(_QWORD *)(v17 + 48) + 8 * v28);
    if (!v30)
      goto LABEL_34;
    while (1)
    {
      v34 = objc_msgSend(v30, sel_degreeCount, v35);

      v26 = v26 + 1.0 / log10((double)(uint64_t)v34);
      v20 = v29;
      v21 = v27;
      if ((v17 & 0x8000000000000000) == 0)
        break;
LABEL_13:
      if (sub_1CA1F0FD0())
      {
        sub_1CA0B6A1C();
        swift_unknownObjectRetain();
        swift_dynamicCast();
        v30 = v36;
        swift_unknownObjectRelease();
        v29 = v20;
        v27 = v21;
        if (v36)
          continue;
      }
      goto LABEL_34;
    }
  }
  __break(1u);
}

uint64_t sub_1CA112F88(id a1, void *a2)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t result;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  if (*(_BYTE *)(v2 + 16) != 1)
    goto LABEL_7;
  v5 = (uint64_t)objc_msgSend(a1, sel_inEdgesCount);
  result = (uint64_t)objc_msgSend(a2, sel_inEdgesCount);
  v7 = v5 * result;
  if ((unsigned __int128)(v5 * (__int128)result) >> 64 != (v5 * result) >> 63)
  {
    __break(1u);
    goto LABEL_10;
  }
  v8 = (uint64_t)objc_msgSend(a1, sel_outEdgesCount);
  result = (uint64_t)objc_msgSend(a2, sel_outEdgesCount);
  if ((unsigned __int128)(v8 * (__int128)result) >> 64 != (v8 * result) >> 63)
  {
LABEL_10:
    __break(1u);
    goto LABEL_11;
  }
  if (!__OFADD__(v7, v8 * result))
    return result;
  __break(1u);
LABEL_7:
  v9 = (uint64_t)objc_msgSend(a1, sel_edgesCount);
  result = (uint64_t)objc_msgSend(a2, sel_edgesCount);
  if ((unsigned __int128)(v9 * (__int128)result) >> 64 != (v9 * result) >> 63)
LABEL_11:
    __break(1u);
  return result;
}

uint64_t _s17KnowledgeGraphKit32MAShortestPathSimilarityDistanceCfD_0()
{
  swift_bridgeObjectRelease();
  return swift_deallocClassInstance();
}

double sub_1CA11309C()
{
  uint64_t v0;
  uint64_t v1;
  double v2;
  unint64_t v3;
  char v4;
  double v6;
  _BYTE v7[32];

  v1 = *(_QWORD *)(v0 + 24);
  v2 = 0.5;
  if (*(_QWORD *)(v1 + 16))
  {
    v3 = sub_1CA0AA474(45774, 0xA200000000000000);
    if ((v4 & 1) != 0)
    {
      sub_1CA0B6A98(*(_QWORD *)(v1 + 56) + 32 * v3, (uint64_t)v7);
      if (swift_dynamicCast())
        return v6;
    }
  }
  return v2;
}

uint64_t sub_1CA113124()
{
  uint64_t v0;
  uint64_t v1;
  unint64_t v2;
  char v3;
  uint64_t v5;
  _BYTE v6[32];

  v1 = *(_QWORD *)(v0 + 24);
  if (*(_QWORD *)(v1 + 16)
    && (v2 = sub_1CA0AA474(76, 0xE100000000000000), (v3 & 1) != 0)
    && (sub_1CA0B6A98(*(_QWORD *)(v1 + 56) + 32 * v2, (uint64_t)v6), swift_dynamicCast()))
  {
    return v5;
  }
  else
  {
    return 3;
  }
}

uint64_t sub_1CA1131A4()
{
  uint64_t v0;
  uint64_t v1;

  v1 = sub_1CA113124();
  *(_QWORD *)(v0 + 32) = sub_1CA111E90(v1, *(_BYTE *)(v0 + 16));
  return swift_bridgeObjectRelease();
}

void sub_1CA1131E8()
{
  uint64_t v0;
  double v1;
  uint64_t v2;
  uint64_t v3;
  double v4;
  uint64_t v5;
  uint64_t v6;
  double v7;
  unint64_t v8;
  _QWORD *v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  id v13;
  void *v14;
  char v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  id v19;
  void *v20;
  char v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  BOOL v25;
  unint64_t v26;
  uint64_t v27;
  id v28;
  id v29;
  void *v30;
  char v31;
  uint64_t v32;
  id v33;
  void *v34;
  char v35;
  void *v36;
  char v37;
  uint64_t v38;
  id v39;
  void *v40;
  char v41;
  uint64_t v42;
  uint64_t v43;
  unint64_t v44;

  v1 = sub_1CA11309C();
  v2 = sub_1CA113124();
  if (v2 < 2)
    goto LABEL_86;
  v3 = v2;
  v4 = 0.0;
  v5 = 2;
  v42 = v2;
  v43 = v0;
  while (1)
  {
    v6 = *(_QWORD *)(v0 + 32);
    v7 = 0.0;
    if (v6)
      break;
LABEL_63:
    v4 = v4 + v1 * v7;
    if (v5 == v3)
      return;
    v1 = v1 * v1;
    v25 = __OFADD__(v5++, 1);
    if (v25)
    {
      __break(1u);
      goto LABEL_72;
    }
  }
  v8 = v5 - 2;
  if ((v6 & 0xC000000000000001) != 0)
  {
    swift_bridgeObjectRetain();
    v9 = (_QWORD *)MEMORY[0x1CAA4A7A4](v5 - 2, v6);
    swift_bridgeObjectRelease();
  }
  else
  {
    if (v8 >= *(_QWORD *)((v6 & 0xFFFFFFFFFFFFF8) + 0x10))
      goto LABEL_73;
    v9 = *(_QWORD **)(v6 + 8 * v8 + 32);
    swift_retain();
  }
  v10 = v9[5];
  if (v10 >> 62)
  {
    swift_bridgeObjectRetain();
    v11 = sub_1CA1F1234();
    if (!v11)
    {
LABEL_62:
      swift_release();
      swift_bridgeObjectRelease();
      goto LABEL_63;
    }
  }
  else
  {
    v11 = *(_QWORD *)((v10 & 0xFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain();
    if (!v11)
      goto LABEL_62;
  }
  v12 = v10 & 0xC000000000000001;
  if ((v10 & 0xC000000000000001) != 0)
  {
    v13 = (id)MEMORY[0x1CAA4A7A4](0, v10);
  }
  else
  {
    if (!*(_QWORD *)((v10 & 0xFFFFFFFFFFFFF8) + 0x10))
      goto LABEL_74;
    v13 = *(id *)(v10 + 32);
  }
  v14 = v13;
  sub_1CA0B6A1C();
  v15 = sub_1CA1F0E68();

  v16 = 0;
  if ((v15 & 1) == 0)
  {
    if (v11 == 1)
    {
      swift_release();
      swift_bridgeObjectRelease();
LABEL_31:
      v3 = v42;
      v0 = v43;
      goto LABEL_63;
    }
    if (v12)
    {
      v28 = (id)MEMORY[0x1CAA4A7A4](1, v10);
    }
    else
    {
      if (*(_QWORD *)((v10 & 0xFFFFFFFFFFFFF8) + 0x10) < 2uLL)
        goto LABEL_85;
      v28 = *(id *)(v10 + 40);
    }
    v30 = v28;
    v31 = sub_1CA1F0E68();

    if ((v31 & 1) == 0)
    {
      v32 = 1;
      while (1)
      {
        v16 = v32 + 1;
        if (__OFADD__(v32, 1))
          break;
        if (v16 == v11)
          goto LABEL_30;
        if (v12)
        {
          v33 = (id)MEMORY[0x1CAA4A7A4](v32 + 1, v10);
        }
        else
        {
          if (v16 < 0)
            goto LABEL_76;
          if ((unint64_t)v16 >= *(_QWORD *)((v10 & 0xFFFFFFFFFFFFFF8) + 0x10))
            goto LABEL_77;
          v33 = *(id *)(v10 + 32 + 8 * v16);
        }
        v34 = v33;
        v35 = sub_1CA1F0E68();

        ++v32;
        if ((v35 & 1) != 0)
          goto LABEL_13;
      }
LABEL_72:
      __break(1u);
LABEL_73:
      __break(1u);
LABEL_74:
      __break(1u);
      goto LABEL_75;
    }
    v16 = 1;
  }
LABEL_13:
  swift_bridgeObjectRelease();
  v17 = v9[5];
  if (!(v17 >> 62))
  {
    v18 = *(_QWORD *)((v17 & 0xFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain();
    if (v18)
      goto LABEL_15;
LABEL_30:
    swift_release();
    swift_bridgeObjectRelease();
    v7 = 0.0;
    goto LABEL_31;
  }
  swift_bridgeObjectRetain();
  v18 = sub_1CA1F1234();
  if (!v18)
    goto LABEL_30;
LABEL_15:
  v44 = v17 & 0xC000000000000001;
  if ((v17 & 0xC000000000000001) != 0)
  {
    v19 = (id)MEMORY[0x1CAA4A7A4](0, v17);
  }
  else
  {
    if (!*(_QWORD *)((v17 & 0xFFFFFFFFFFFFF8) + 0x10))
      goto LABEL_78;
    v19 = *(id *)(v17 + 32);
  }
  v20 = v19;
  v21 = sub_1CA1F0E68();

  if ((v21 & 1) != 0)
  {
    v22 = 0;
LABEL_20:
    swift_bridgeObjectRelease();
    v23 = v9[3];
    v24 = v16 * v23;
    if ((unsigned __int128)(v16 * (__int128)v23) >> 64 != (v16 * v23) >> 63)
      goto LABEL_81;
    v25 = __OFADD__(v24, v22);
    v26 = v24 + v22;
    if (v25)
      goto LABEL_82;
    if ((v26 & 0x8000000000000000) != 0)
      goto LABEL_83;
    v27 = v9[4];
    if (v26 >= *(_QWORD *)(v27 + 16))
      goto LABEL_84;
    v7 = *(double *)(v27 + 8 * v26 + 32);
    swift_release();
    goto LABEL_31;
  }
  if (v18 == 1)
    goto LABEL_30;
  if (v44)
  {
    v29 = (id)MEMORY[0x1CAA4A7A4](1, v17);
  }
  else
  {
    if (*(_QWORD *)((v17 & 0xFFFFFFFFFFFFF8) + 0x10) < 2uLL)
      goto LABEL_87;
    v29 = *(id *)(v17 + 40);
  }
  v36 = v29;
  v37 = sub_1CA1F0E68();

  if ((v37 & 1) != 0)
  {
    v22 = 1;
    goto LABEL_20;
  }
  v38 = 1;
  while (1)
  {
    v22 = v38 + 1;
    if (__OFADD__(v38, 1))
      break;
    if (v22 == v18)
      goto LABEL_30;
    if (v44)
    {
      v39 = (id)MEMORY[0x1CAA4A7A4](v38 + 1, v17);
    }
    else
    {
      if ((v22 & 0x8000000000000000) != 0)
        goto LABEL_79;
      if (v22 >= *(_QWORD *)((v17 & 0xFFFFFFFFFFFFFF8) + 0x10))
        goto LABEL_80;
      v39 = *(id *)(v17 + 32 + 8 * v22);
    }
    v40 = v39;
    v41 = sub_1CA1F0E68();

    ++v38;
    if ((v41 & 1) != 0)
      goto LABEL_20;
  }
LABEL_75:
  __break(1u);
LABEL_76:
  __break(1u);
LABEL_77:
  __break(1u);
LABEL_78:
  __break(1u);
LABEL_79:
  __break(1u);
LABEL_80:
  __break(1u);
LABEL_81:
  __break(1u);
LABEL_82:
  __break(1u);
LABEL_83:
  __break(1u);
LABEL_84:
  __break(1u);
LABEL_85:
  __break(1u);
LABEL_86:
  __break(1u);
LABEL_87:
  __break(1u);
}

uint64_t MAExponentiallyDampedPathCountsSimilarityDistance.__allocating_init(directed:options:)(char a1, uint64_t a2)
{
  uint64_t result;

  result = swift_allocObject();
  *(_BYTE *)(result + 16) = a1;
  *(_QWORD *)(result + 24) = a2;
  *(_QWORD *)(result + 32) = 0;
  return result;
}

uint64_t MAExponentiallyDampedPathCountsSimilarityDistance.init(directed:options:)(char a1, uint64_t a2)
{
  uint64_t v2;

  *(_BYTE *)(v2 + 16) = a1;
  *(_QWORD *)(v2 + 24) = a2;
  *(_QWORD *)(v2 + 32) = 0;
  return v2;
}

uint64_t sub_1CA1136D4()
{
  return swift_bridgeObjectRelease();
}

uint64_t MAExponentiallyDampedPathCountsSimilarityDistance.deinit()
{
  uint64_t v0;

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v0;
}

uint64_t MAExponentiallyDampedPathCountsSimilarityDistance.__deallocating_deinit()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_deallocClassInstance();
}

unint64_t MAGraph.similarityMatrix(distance:directed:options:identity:)(uint64_t a1, int64_t a2, uint64_t a3, char a4)
{
  void *v4;
  uint64_t (*v7)(int64_t, uint64_t);
  id v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t result;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t v20;
  void *v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  _QWORD *v26;
  uint64_t v27;
  uint64_t v28;
  void *v29;
  id v30;
  uint64_t v31;
  id v32;
  uint64_t v33;
  int64_t v34;
  int64_t v35;
  unint64_t v36;
  _QWORD *v37;
  uint64_t v38;
  unint64_t v39;
  uint64_t v40;
  _QWORD *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  unint64_t v45;
  uint64_t v46;
  BOOL v47;
  unint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  _QWORD *v53;
  unint64_t v54;
  uint64_t v55;
  uint64_t v56;
  _QWORD *v57;
  _QWORD *v58;
  _QWORD *v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  BOOL v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  unint64_t v69;

  v7 = *(uint64_t (**)(int64_t, uint64_t))(a1 + 96);
  swift_bridgeObjectRetain();
  v66 = v7(a2, a3);
  (*(void (**)(void *))(*(_QWORD *)v66 + 104))(v4);
  v69 = MEMORY[0x1E0DEE9D8];
  v8 = objc_msgSend(v4, sel_allNodes);
  sub_1CA0B6A1C();
  sub_1CA0C0614();
  v9 = sub_1CA1F0C94();

  sub_1CA0B2380(v9);
  v10 = v69;
  v11 = v69 >> 62;
  if (v69 >> 62)
    goto LABEL_93;
  v12 = *(_QWORD *)((v69 & 0xFFFFFFFFFFFFF8) + 0x10);
  v13 = v12;
LABEL_3:
  result = v13 * v12;
  if ((unsigned __int128)(v13 * (__int128)v12) >> 64 == (v13 * v12) >> 63)
  {
    v49 = v13;
    v15 = (_QWORD *)sub_1CA0B4464(result, 0.0);
    v67 = v10;
    v64 = v12;
    if ((a2 & 1) != 0)
    {
      if (v11)
      {
        v65 = v10 & 0xFFFFFFFFFFFFFF8;
        swift_bridgeObjectRetain();
        v20 = sub_1CA1F1234();
        if (v20)
        {
          v16 = v20;
          swift_bridgeObjectRetain();
          v17 = sub_1CA1F1234();
          swift_bridgeObjectRelease();
LABEL_13:
          a2 = 0;
          v60 = v16;
          v62 = v10 + 32;
          do
          {
            if ((unint64_t)a2 >= *(_QWORD *)(v65 + 16))
              goto LABEL_85;
            if (v17)
            {
              if (v17 < 1)
                goto LABEL_89;
              v21 = *(void **)(v62 + 8 * a2);
              v22 = a2 * v12;
              v11 = (unsigned __int128)(a2 * (__int128)v12) >> 64 != (a2 * v12) >> 63;
              swift_bridgeObjectRetain();
              v18 = v21;
              v12 = 0;
              while (1)
              {
                v10 = (uint64_t)*(id *)(v10 + 8 * v12 + 32);
                if ((sub_1CA1F0E68() & 1) == 0 || (a4 & 1) != 0)
                {
                  (*(void (**)(_QWORD *, uint64_t))(*(_QWORD *)v66 + 112))(v18, v10);
                  if ((v11 & 1) != 0)
                  {
LABEL_75:
                    __break(1u);
LABEL_76:
                    __break(1u);
LABEL_77:
                    __break(1u);
LABEL_78:
                    __break(1u);
LABEL_79:
                    __break(1u);
LABEL_80:
                    __break(1u);
LABEL_81:
                    __break(1u);
LABEL_82:
                    __break(1u);
LABEL_83:
                    __break(1u);
LABEL_84:
                    __break(1u);
LABEL_85:
                    __break(1u);
LABEL_86:
                    __break(1u);
LABEL_87:
                    __break(1u);
LABEL_88:
                    __break(1u);
LABEL_89:
                    __break(1u);
LABEL_90:
                    __break(1u);
LABEL_91:
                    __break(1u);
LABEL_92:
                    __break(1u);
LABEL_93:
                    swift_bridgeObjectRetain();
                    v13 = sub_1CA1F1234();
                    v12 = sub_1CA1F1234();
                    swift_bridgeObjectRelease();
                    goto LABEL_3;
                  }
                  v24 = v22 + v12;
                  if (__OFADD__(v22, v12))
                    goto LABEL_76;
                  v25 = v23;
                  if ((swift_isUniquelyReferenced_nonNull_native() & 1) != 0)
                  {
                    if ((v24 & 0x8000000000000000) != 0)
                      goto LABEL_31;
                  }
                  else
                  {
                    v15 = sub_1CA0B6058(v15);
                    if ((v24 & 0x8000000000000000) != 0)
                    {
LABEL_31:
                      __break(1u);
                      goto LABEL_32;
                    }
                  }
                  if (v24 >= v15[2])
                    goto LABEL_77;
                  v15[v24 + 4] = v25;
                }
                ++v12;

                v10 = v67;
                if (v17 == v12)
                {

                  swift_bridgeObjectRelease();
                  v12 = v64;
                  v16 = v60;
                  break;
                }
              }
            }
            ++a2;
          }
          while (a2 != v16);
        }
      }
      else
      {
        v65 = v10 & 0xFFFFFFFFFFFFFF8;
        v16 = *(_QWORD *)((v10 & 0xFFFFFFFFFFFFFF8) + 0x10);
        swift_bridgeObjectRetain();
        if (v16)
        {
          v17 = v16;
          goto LABEL_13;
        }
      }
LABEL_73:
      swift_bridgeObjectRelease();
      swift_release();
      type metadata accessor for MASquareMatrixRepresentation();
      result = swift_allocObject();
      *(_QWORD *)(result + 16) = v49;
      *(_QWORD *)(result + 24) = v12;
      *(_QWORD *)(result + 32) = v15;
      *(_QWORD *)(result + 40) = v10;
      return result;
    }
    v18 = (_QWORD *)(v10 & 0xFFFFFFFFFFFFFF8);
    if (!v11)
    {
      v19 = *(_QWORD *)((v10 & 0xFFFFFFFFFFFFFF8) + 0x10);
      swift_bridgeObjectRetain();
      if (!v19)
        goto LABEL_73;
      v51 = v19;
LABEL_34:
      a2 = 0;
      v54 = v10 & 0xC000000000000001;
      v55 = v10 + 32;
      if (v10 < 0)
        v26 = (_QWORD *)v10;
      else
        v26 = v18;
      v57 = v18;
      v58 = v26;
      v56 = v19 + 1;
      v52 = (2 * v19) | 1;
      v53 = v18 + 4;
      v50 = v11;
      v27 = v19;
      while (1)
      {
        v28 = v18[2];
        if (a2 >= (unint64_t)v28)
          goto LABEL_86;
        if (a2 == v56)
          goto LABEL_87;
        v29 = *(void **)(v55 + 8 * a2);
        if (v11)
        {
          v31 = v11;
          swift_bridgeObjectRetain();
          v32 = v29;
          v11 = (uint64_t)v58;
          v33 = sub_1CA1F1234();
          swift_bridgeObjectRelease();
          if (v33 < a2)
            goto LABEL_90;
          swift_bridgeObjectRetain();
          v28 = sub_1CA1F1234();
          swift_bridgeObjectRelease();
          v11 = v31;
        }
        else
        {
          v30 = v29;
        }
        if (v28 < v19)
          goto LABEL_88;
        if (v54 && a2 != v19)
        {
          if (a2 >= v19)
            goto LABEL_91;
          v34 = a2;
          do
          {
            v35 = v34 + 1;
            sub_1CA1F1084();
            v34 = v35;
          }
          while (v27 != v35);
        }
        swift_bridgeObjectRetain();
        v36 = v52;
        v59 = v53;
        v10 = a2;
        if (v11)
        {
          sub_1CA1F1240();
          v59 = v37;
          v10 = v38;
          v36 = v39;
          swift_bridgeObjectRelease();
        }
        v11 = (v36 >> 1) - v10;
        if (v36 >> 1 != v10)
        {
          if ((uint64_t)(v36 >> 1) <= v10)
            goto LABEL_92;
          v40 = 0;
          v61 = a2 * v12;
          v63 = (unsigned __int128)(a2 * (__int128)v12) >> 64 != (a2 * v12) >> 63;
          v41 = &v59[v10];
          while (!__OFADD__(v40, 1))
          {
            v10 = (uint64_t)(id)v41[v40];
            if ((sub_1CA1F0E68() & 1) == 0 || (a4 & 1) != 0)
            {
              (*(void (**)(void *, uint64_t))(*(_QWORD *)v66 + 112))(v29, v10);
              v43 = v40 + a2;
              if (__OFADD__(v40, a2))
                goto LABEL_78;
              if (v63)
                goto LABEL_79;
              v12 = v61 + v43;
              if (__OFADD__(v61, v43))
                goto LABEL_80;
              v44 = v42;
              if ((swift_isUniquelyReferenced_nonNull_native() & 1) != 0)
              {
                if (v12 < 0)
                  goto LABEL_72;
              }
              else
              {
                v15 = sub_1CA0B6058(v15);
                if (v12 < 0)
                {
LABEL_72:
                  __break(1u);
                  goto LABEL_73;
                }
              }
              v45 = v15[2];
              if (v12 >= v45)
                goto LABEL_81;
              v15[v12 + 4] = v44;
              v12 = v64;
              v46 = v43 * v64;
              if ((unsigned __int128)(v43 * (__int128)v64) >> 64 != (v43 * v64) >> 63)
                goto LABEL_82;
              v47 = __OFADD__(v46, a2);
              v48 = v46 + a2;
              if (v47)
                goto LABEL_83;
              if (v48 >= v45)
                goto LABEL_84;
              v15[v48 + 4] = v44;
            }

            if (v11 == ++v40)
              goto LABEL_38;
          }
          __break(1u);
          goto LABEL_75;
        }
LABEL_38:
        ++a2;

        swift_unknownObjectRelease();
        v11 = v50;
        v10 = v67;
        v18 = v57;
        v19 = v27;
        if (a2 == v51)
          goto LABEL_73;
      }
    }
LABEL_32:
    swift_bridgeObjectRetain();
    v51 = sub_1CA1F1234();
    if (!v51)
      goto LABEL_73;
    swift_bridgeObjectRetain();
    v19 = sub_1CA1F1234();
    result = swift_bridgeObjectRelease();
    if ((v19 & 0x8000000000000000) == 0)
      goto LABEL_34;
  }
  else
  {
    __break(1u);
  }
  __break(1u);
  return result;
}

unint64_t sub_1CA113D80(uint64_t a1, int64_t a2, uint64_t a3, char a4)
{
  return MAGraph.similarityMatrix(distance:directed:options:identity:)(a1, a2, a3, a4);
}

uint64_t sub_1CA113DA0(uint64_t a1, uint64_t a2)
{
  return sub_1CA113DEC(a1, a2, (uint64_t (*)(char *, unint64_t, uint64_t, uint64_t))sub_1CA114278);
}

uint64_t sub_1CA113DEC(uint64_t isStackAllocationSafe, uint64_t a2, uint64_t (*a3)(char *, unint64_t, uint64_t, uint64_t))
{
  uint64_t v5;
  char v6;
  unint64_t v7;
  size_t v8;
  uint64_t v9;
  void *v10;
  _QWORD v12[2];

  v5 = isStackAllocationSafe;
  v12[1] = *MEMORY[0x1E0C80C00];
  v6 = *(_BYTE *)(a2 + 32);
  v7 = (unint64_t)((1 << v6) + 63) >> 6;
  v8 = 8 * v7;
  if ((v6 & 0x3Fu) <= 0xD
    || (isStackAllocationSafe = swift_stdlib_isStackAllocationSafe(), (isStackAllocationSafe & 1) != 0))
  {
    MEMORY[0x1E0C80A78](isStackAllocationSafe, a2);
    bzero((char *)v12 - ((v8 + 15) & 0x3FFFFFFFFFFFFFF0), v8);
    v9 = a3((char *)v12 - ((v8 + 15) & 0x3FFFFFFFFFFFFFF0), v7, v5, a2);
    swift_release();
  }
  else
  {
    v10 = (void *)swift_slowAlloc();
    bzero(v10, v8);
    v9 = a3((char *)v10, v7, v5, a2);
    swift_release();
    MEMORY[0x1CAA4BBE4](v10, -1, -1);
  }
  return v9;
}

uint64_t sub_1CA113F78(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  id v11;
  char v12;
  uint64_t v13;
  id v14;
  char v15;
  uint64_t v16;
  uint64_t result;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  char v23;
  unint64_t v24;
  BOOL v25;
  uint64_t v26;
  void *v27;
  uint64_t v28;

  v2 = a2;
  v3 = a1;
  v4 = a1 & 0xC000000000000001;
  if ((a2 & 0xC000000000000001) == 0)
  {
    if (!v4)
      return sub_1CA114884(a1, a2);
    return sub_1CA113DEC(a1, a2, (uint64_t (*)(char *, unint64_t, uint64_t, uint64_t))sub_1CA114488);
  }
  if (v4)
  {
    if (a2 >= 0)
      v2 = a2 & 0xFFFFFFFFFFFFFF8;
    v5 = sub_1CA1F0FA0();
    a2 = sub_1CA0BE8F8(v2, v5);
    a1 = v3;
    return sub_1CA113DEC(a1, a2, (uint64_t (*)(char *, unint64_t, uint64_t, uint64_t))sub_1CA114488);
  }
  sub_1CA0B6A1C();
  v6 = MEMORY[0x1E0DEE9E8];
  v28 = MEMORY[0x1E0DEE9E8];
  sub_1CA1F0F64();
  if (!sub_1CA1F0FD0())
    goto LABEL_32;
  v7 = v3 + 56;
  do
  {
    swift_dynamicCast();
    if (!*(_QWORD *)(v3 + 16))
      goto LABEL_10;
    v8 = sub_1CA1F0E5C();
    v9 = -1 << *(_BYTE *)(v3 + 32);
    v10 = v8 & ~v9;
    if (((*(_QWORD *)(v7 + ((v10 >> 3) & 0xFFFFFFFFFFFFF8)) >> v10) & 1) == 0)
      goto LABEL_10;
    v11 = *(id *)(*(_QWORD *)(v3 + 48) + 8 * v10);
    v12 = sub_1CA1F0E68();

    if ((v12 & 1) == 0)
    {
      v13 = ~v9;
      while (1)
      {
        v10 = (v10 + 1) & v13;
        if (((*(_QWORD *)(v7 + ((v10 >> 3) & 0xFFFFFFFFFFFFF8)) >> v10) & 1) == 0)
          break;
        v14 = *(id *)(*(_QWORD *)(v3 + 48) + 8 * v10);
        v15 = sub_1CA1F0E68();

        if ((v15 & 1) != 0)
          goto LABEL_18;
      }
LABEL_10:

      continue;
    }
LABEL_18:
    v16 = v28;
    if (*(_QWORD *)(v28 + 24) <= *(_QWORD *)(v28 + 16))
    {
      sub_1CA13DBD0();
      v16 = v28;
    }
    result = sub_1CA1F0E5C();
    v18 = v16 + 56;
    v19 = -1 << *(_BYTE *)(v16 + 32);
    v20 = result & ~v19;
    v21 = v20 >> 6;
    if (((-1 << v20) & ~*(_QWORD *)(v16 + 56 + 8 * (v20 >> 6))) != 0)
    {
      v22 = __clz(__rbit64((-1 << v20) & ~*(_QWORD *)(v16 + 56 + 8 * (v20 >> 6)))) | v20 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v23 = 0;
      v24 = (unint64_t)(63 - v19) >> 6;
      do
      {
        if (++v21 == v24 && (v23 & 1) != 0)
        {
          __break(1u);
          return result;
        }
        v25 = v21 == v24;
        if (v21 == v24)
          v21 = 0;
        v23 |= v25;
        v26 = *(_QWORD *)(v18 + 8 * v21);
      }
      while (v26 == -1);
      v22 = __clz(__rbit64(~v26)) + (v21 << 6);
    }
    *(_QWORD *)(v18 + ((v22 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v22;
    *(_QWORD *)(*(_QWORD *)(v16 + 48) + 8 * v22) = v27;
    ++*(_QWORD *)(v16 + 16);
  }
  while (sub_1CA1F0FD0());
  v6 = v28;
LABEL_32:
  swift_release();
  return v6;
}

uint64_t sub_1CA114278(unint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t i;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  BOOL v17;
  uint64_t result;
  unint64_t v19;
  uint64_t v21;
  unint64_t j;
  unint64_t v23;
  _QWORD *v24;
  BOOL v25;
  uint64_t v26;
  uint64_t v28;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;

  v5 = a2;
  v31 = *(_QWORD *)(a3 + 16);
  if (!v31)
  {
    v26 = 0;
    goto LABEL_27;
  }
  v32 = a4 + 56;
  v30 = a3 + 32;
  swift_bridgeObjectRetain();
  v28 = 0;
  for (i = 0; i != v31; ++i)
  {
    v7 = (uint64_t *)(v30 + 16 * i);
    v9 = *v7;
    v8 = v7[1];
    sub_1CA1F13F0();
    swift_bridgeObjectRetain();
    sub_1CA1F0A30();
    v10 = sub_1CA1F1438();
    v11 = -1 << *(_BYTE *)(a4 + 32);
    v12 = v10 & ~v11;
    v13 = v12 >> 6;
    v14 = 1 << v12;
    if (((1 << v12) & *(_QWORD *)(v32 + 8 * (v12 >> 6))) == 0)
      goto LABEL_3;
    v15 = *(_QWORD *)(a4 + 48);
    v16 = (_QWORD *)(v15 + 16 * v12);
    v17 = *v16 == v9 && v16[1] == v8;
    if (!v17 && (sub_1CA1F12E8() & 1) == 0)
    {
      v21 = ~v11;
      for (j = v12 + 1; ; j = v23 + 1)
      {
        v23 = j & v21;
        if (((*(_QWORD *)(v32 + (((j & v21) >> 3) & 0xFFFFFFFFFFFFF8)) >> (j & v21)) & 1) == 0)
          break;
        v24 = (_QWORD *)(v15 + 16 * v23);
        v25 = *v24 == v9 && v24[1] == v8;
        if (v25 || (sub_1CA1F12E8() & 1) != 0)
        {
          result = swift_bridgeObjectRelease();
          v13 = v23 >> 6;
          v14 = 1 << v23;
          goto LABEL_12;
        }
      }
LABEL_3:
      swift_bridgeObjectRelease();
      continue;
    }
    result = swift_bridgeObjectRelease();
LABEL_12:
    v19 = a1[v13];
    a1[v13] = v14 | v19;
    if ((v14 & v19) == 0 && __OFADD__(v28++, 1))
    {
      __break(1u);
      return result;
    }
  }
  swift_bridgeObjectRelease();
  v5 = a2;
  v26 = v28;
LABEL_27:
  swift_retain();
  return sub_1CA1225B4(a1, v5, v26, a4);
}

void sub_1CA114488(unint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  id v15;
  int64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  id v24;
  char v25;
  uint64_t v26;
  unint64_t i;
  unint64_t v28;
  id v29;
  char v30;
  unint64_t v31;
  uint64_t v34;
  int64_t v35;
  uint64_t v36;
  uint64_t v38;
  uint64_t v39;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  unint64_t v45;
  void *v46;

  v4 = a3;
  if ((a3 & 0xC000000000000001) != 0)
  {
    swift_bridgeObjectRetain();
    sub_1CA1F0F64();
    sub_1CA0B6A1C();
    sub_1CA0C0614();
    sub_1CA1F0CC4();
    v4 = v41;
    v36 = v42;
    v5 = v43;
    v6 = v44;
    v7 = v45;
  }
  else
  {
    v8 = -1 << *(_BYTE *)(a3 + 32);
    v36 = a3 + 56;
    v5 = ~v8;
    v9 = -v8;
    if (v9 < 64)
      v10 = ~(-1 << v9);
    else
      v10 = -1;
    v7 = v10 & *(_QWORD *)(a3 + 56);
    swift_bridgeObjectRetain();
    v6 = 0;
  }
  v34 = 0;
  v35 = (unint64_t)(v5 + 64) >> 6;
  v39 = a4 + 56;
  v38 = v4;
LABEL_8:
  v11 = v6;
  v12 = v7;
  while (v4 < 0)
  {
    if (!sub_1CA1F0FD0())
      goto LABEL_46;
    sub_1CA0B6A1C();
    swift_unknownObjectRetain();
    swift_dynamicCast();
    v15 = v46;
    swift_unknownObjectRelease();
    v6 = v11;
    v13 = v12;
    if (!v46)
      goto LABEL_46;
LABEL_33:
    v19 = sub_1CA1F0E5C();
    v20 = -1 << *(_BYTE *)(a4 + 32);
    v21 = v19 & ~v20;
    v22 = v21 >> 6;
    v23 = 1 << v21;
    if (((1 << v21) & *(_QWORD *)(v39 + 8 * (v21 >> 6))) == 0)
      goto LABEL_9;
    sub_1CA0B6A1C();
    v24 = *(id *)(*(_QWORD *)(a4 + 48) + 8 * v21);
    v25 = sub_1CA1F0E68();

    if ((v25 & 1) != 0)
    {

LABEL_41:
      v4 = v38;
      v31 = a1[v22];
      a1[v22] = v23 | v31;
      v11 = v6;
      v7 = v13;
      v12 = v13;
      if ((v23 & v31) == 0)
      {
        if (!__OFADD__(v34++, 1))
          goto LABEL_8;
        __break(1u);
        goto LABEL_45;
      }
    }
    else
    {
      v26 = ~v20;
      for (i = v21 + 1; ; i = v28 + 1)
      {
        v28 = i & v26;
        if (((*(_QWORD *)(v39 + (((i & v26) >> 3) & 0xFFFFFFFFFFFFF8)) >> (i & v26)) & 1) == 0)
          break;
        v29 = *(id *)(*(_QWORD *)(a4 + 48) + 8 * v28);
        v30 = sub_1CA1F0E68();

        if ((v30 & 1) != 0)
        {

          v22 = v28 >> 6;
          v23 = 1 << v28;
          goto LABEL_41;
        }
      }
LABEL_9:

      v11 = v6;
      v4 = v38;
      v12 = v13;
    }
  }
  if (v12)
  {
    v13 = (v12 - 1) & v12;
    v14 = __clz(__rbit64(v12)) | (v11 << 6);
    v6 = v11;
LABEL_32:
    v15 = *(id *)(*(_QWORD *)(v4 + 48) + 8 * v14);
    if (!v15)
      goto LABEL_46;
    goto LABEL_33;
  }
  v16 = v11 + 1;
  if (!__OFADD__(v11, 1))
  {
    if (v16 >= v35)
      goto LABEL_45;
    v17 = *(_QWORD *)(v36 + 8 * v16);
    v6 = v11 + 1;
    if (!v17)
    {
      v6 = v11 + 2;
      if (v11 + 2 >= v35)
        goto LABEL_45;
      v17 = *(_QWORD *)(v36 + 8 * v6);
      if (!v17)
      {
        v6 = v11 + 3;
        if (v11 + 3 >= v35)
          goto LABEL_45;
        v17 = *(_QWORD *)(v36 + 8 * v6);
        if (!v17)
        {
          v6 = v11 + 4;
          if (v11 + 4 >= v35)
            goto LABEL_45;
          v17 = *(_QWORD *)(v36 + 8 * v6);
          if (!v17)
          {
            v6 = v11 + 5;
            if (v11 + 5 >= v35)
              goto LABEL_45;
            v17 = *(_QWORD *)(v36 + 8 * v6);
            if (!v17)
            {
              v18 = v11 + 6;
              while (v35 != v18)
              {
                v17 = *(_QWORD *)(v36 + 8 * v18++);
                if (v17)
                {
                  v6 = v18 - 1;
                  goto LABEL_31;
                }
              }
LABEL_45:
              v12 = 0;
LABEL_46:
              sub_1CA0B6B24(v4, v36, v5, v11, v12);
              swift_retain();
              sub_1CA122848(a1, a2, v34, a4);
              return;
            }
          }
        }
      }
    }
LABEL_31:
    v13 = (v17 - 1) & v17;
    v14 = __clz(__rbit64(v17)) + (v6 << 6);
    goto LABEL_32;
  }
  __break(1u);
}

uint64_t sub_1CA114884(uint64_t isStackAllocationSafe, uint64_t a2)
{
  uint64_t v3;
  char v4;
  unint64_t v5;
  size_t v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  uint64_t v10;
  _QWORD v12[2];

  v3 = isStackAllocationSafe;
  v12[1] = *MEMORY[0x1E0C80C00];
  v4 = *(_BYTE *)(a2 + 32);
  v5 = (unint64_t)((1 << v4) + 63) >> 6;
  v6 = 8 * v5;
  if ((v4 & 0x3Fu) <= 0xD
    || (isStackAllocationSafe = swift_stdlib_isStackAllocationSafe(), (isStackAllocationSafe & 1) != 0))
  {
    MEMORY[0x1E0C80A78](isStackAllocationSafe, a2);
    bzero((char *)v12 - ((v6 + 15) & 0x3FFFFFFFFFFFFFF0), v6);
    sub_1CA114A04((_QWORD *)((char *)v12 - ((v6 + 15) & 0x3FFFFFFFFFFFFFF0)), v5, a2, v3);
    v8 = v7;
    swift_release();
  }
  else
  {
    v9 = (void *)swift_slowAlloc();
    bzero(v9, v6);
    sub_1CA114A04((unint64_t *)v9, v5, a2, v3);
    v8 = v10;
    swift_release();
    MEMORY[0x1CAA4BBE4](v9, -1, -1);
  }
  return v8;
}

void sub_1CA114A04(unint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  int64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  int64_t v12;
  unint64_t v13;
  int64_t v14;
  uint64_t v15;
  id v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  id v22;
  char v23;
  uint64_t v24;
  unint64_t i;
  unint64_t v26;
  id v27;
  char v28;
  BOOL v29;
  int64_t v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  uint64_t v34;
  unint64_t v35;
  int64_t v36;
  unint64_t v37;
  int64_t v38;
  unint64_t v39;
  int64_t v40;
  uint64_t v41;
  id v42;
  uint64_t v43;
  uint64_t v44;
  unint64_t v45;
  id v46;
  uint64_t v47;
  id v48;
  uint64_t v51;
  int64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  int64_t v56;
  int64_t v57;
  unint64_t v58;

  v4 = a4;
  v5 = a3;
  if (*(_QWORD *)(a4 + 16) < *(_QWORD *)(a3 + 16))
  {
    v6 = 0;
    v51 = a4 + 56;
    v7 = 1 << *(_BYTE *)(a4 + 32);
    if (v7 < 64)
      v8 = ~(-1 << v7);
    else
      v8 = -1;
    v9 = v8 & *(_QWORD *)(a4 + 56);
    v52 = (unint64_t)(v7 + 63) >> 6;
    v54 = 0;
    v10 = a3 + 56;
    while (1)
    {
      while (1)
      {
        if (v9)
        {
          v55 = (v9 - 1) & v9;
          v57 = v6;
          v11 = __clz(__rbit64(v9)) | (v6 << 6);
        }
        else
        {
          v12 = v6 + 1;
          if (__OFADD__(v6, 1))
          {
            __break(1u);
            goto LABEL_65;
          }
          if (v12 >= v52)
            goto LABEL_63;
          v13 = *(_QWORD *)(v51 + 8 * v12);
          v14 = v6 + 1;
          if (!v13)
          {
            v14 = v6 + 2;
            if (v6 + 2 >= v52)
              goto LABEL_63;
            v13 = *(_QWORD *)(v51 + 8 * v14);
            if (!v13)
            {
              v14 = v6 + 3;
              if (v6 + 3 >= v52)
                goto LABEL_63;
              v13 = *(_QWORD *)(v51 + 8 * v14);
              if (!v13)
              {
                v15 = v6 + 4;
                if (v6 + 4 >= v52)
                  goto LABEL_63;
                v13 = *(_QWORD *)(v51 + 8 * v15);
                if (!v13)
                {
                  while (1)
                  {
                    v14 = v15 + 1;
                    if (__OFADD__(v15, 1))
                      goto LABEL_67;
                    if (v14 >= v52)
                      goto LABEL_63;
                    v13 = *(_QWORD *)(v51 + 8 * v14);
                    ++v15;
                    if (v13)
                      goto LABEL_22;
                  }
                }
                v14 = v6 + 4;
              }
            }
          }
LABEL_22:
          v55 = (v13 - 1) & v13;
          v57 = v14;
          v11 = __clz(__rbit64(v13)) + (v14 << 6);
        }
        v16 = *(id *)(*(_QWORD *)(v4 + 48) + 8 * v11);
        v17 = sub_1CA1F0E5C();
        v18 = -1 << *(_BYTE *)(v5 + 32);
        v19 = v17 & ~v18;
        v20 = v19 >> 6;
        v21 = 1 << v19;
        if (((1 << v19) & *(_QWORD *)(v10 + 8 * (v19 >> 6))) != 0)
          break;
LABEL_6:

        v4 = a4;
        v9 = v55;
        v6 = v57;
      }
      sub_1CA0B6A1C();
      v22 = *(id *)(*(_QWORD *)(v5 + 48) + 8 * v19);
      v23 = sub_1CA1F0E68();

      if ((v23 & 1) == 0)
      {
        v24 = ~v18;
        for (i = v19 + 1; ; i = v26 + 1)
        {
          v26 = i & v24;
          v5 = a3;
          if (((*(_QWORD *)(v10 + (((i & v24) >> 3) & 0xFFFFFFFFFFFFF8)) >> (i & v24)) & 1) == 0)
            break;
          v27 = *(id *)(*(_QWORD *)(a3 + 48) + 8 * v26);
          v28 = sub_1CA1F0E68();

          if ((v28 & 1) != 0)
          {

            v20 = v26 >> 6;
            v21 = 1 << v26;
            goto LABEL_30;
          }
        }
        goto LABEL_6;
      }

LABEL_30:
      v6 = v57;
      v5 = a3;
      a1[v20] |= v21;
      v9 = v55;
      v29 = __OFADD__(v54++, 1);
      v4 = a4;
      if (v29)
        goto LABEL_66;
    }
  }
  v30 = 0;
  v53 = a3 + 56;
  v54 = 0;
  v31 = 1 << *(_BYTE *)(a3 + 32);
  if (v31 < 64)
    v32 = ~(-1 << v31);
  else
    v32 = -1;
  v33 = v32 & *(_QWORD *)(a3 + 56);
  v56 = (unint64_t)(v31 + 63) >> 6;
  v34 = a4 + 56;
  while (1)
  {
    if (v33)
    {
      v35 = __clz(__rbit64(v33));
      v33 &= v33 - 1;
      v36 = v30;
      v37 = v35 | (v30 << 6);
      v5 = a3;
      goto LABEL_55;
    }
    v38 = v30 + 1;
    v5 = a3;
    if (__OFADD__(v30, 1))
    {
LABEL_65:
      __break(1u);
LABEL_66:
      __break(1u);
LABEL_67:
      __break(1u);
      goto LABEL_68;
    }
    if (v38 >= v56)
      goto LABEL_63;
    v39 = *(_QWORD *)(v53 + 8 * v38);
    v40 = v30 + 1;
    if (!v39)
    {
      v40 = v30 + 2;
      if (v30 + 2 >= v56)
        goto LABEL_63;
      v39 = *(_QWORD *)(v53 + 8 * v40);
      if (!v39)
      {
        v40 = v30 + 3;
        if (v30 + 3 >= v56)
          goto LABEL_63;
        v39 = *(_QWORD *)(v53 + 8 * v40);
        if (!v39)
          break;
      }
    }
LABEL_54:
    v33 = (v39 - 1) & v39;
    v36 = v40;
    v37 = __clz(__rbit64(v39)) + (v40 << 6);
LABEL_55:
    v58 = v37;
    v42 = *(id *)(*(_QWORD *)(v5 + 48) + 8 * v37);
    v43 = sub_1CA1F0E5C();
    v44 = -1 << *(_BYTE *)(v4 + 32);
    v45 = v43 & ~v44;
    if (((*(_QWORD *)(v34 + ((v45 >> 3) & 0xFFFFFFFFFFFFF8)) >> v45) & 1) == 0)
      goto LABEL_38;
    sub_1CA0B6A1C();
    v46 = *(id *)(*(_QWORD *)(a4 + 48) + 8 * v45);
    v5 = sub_1CA1F0E68();

    if ((v5 & 1) != 0)
    {
LABEL_60:

      *(unint64_t *)((char *)a1 + ((v58 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v58;
      v29 = __OFADD__(v54++, 1);
      v4 = a4;
      v30 = v36;
      if (v29)
      {
        __break(1u);
LABEL_63:
        swift_retain();
        sub_1CA122848(a1, a2, v54, v5);
        return;
      }
    }
    else
    {
      v47 = ~v44;
      while (1)
      {
        v45 = (v45 + 1) & v47;
        if (((*(_QWORD *)(v34 + ((v45 >> 3) & 0xFFFFFFFFFFFFF8)) >> v45) & 1) == 0)
          break;
        v48 = *(id *)(*(_QWORD *)(a4 + 48) + 8 * v45);
        v5 = sub_1CA1F0E68();

        if ((v5 & 1) != 0)
          goto LABEL_60;
      }
LABEL_38:

      v4 = a4;
      v30 = v36;
    }
  }
  v41 = v30 + 4;
  if (v30 + 4 >= v56)
    goto LABEL_63;
  v39 = *(_QWORD *)(v53 + 8 * v41);
  if (v39)
  {
    v40 = v30 + 4;
    goto LABEL_54;
  }
  while (1)
  {
    v40 = v41 + 1;
    if (__OFADD__(v41, 1))
      break;
    if (v40 >= v56)
      goto LABEL_63;
    v39 = *(_QWORD *)(v53 + 8 * v40);
    ++v41;
    if (v39)
      goto LABEL_54;
  }
LABEL_68:
  __break(1u);
}

