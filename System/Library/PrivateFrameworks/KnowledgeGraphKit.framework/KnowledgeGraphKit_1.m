void sub_1CA114F18(uint64_t a1)
{
  uint64_t *v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int64_t v11;
  void *v12;
  void *i;
  unint64_t v14;
  unint64_t v15;
  int64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  id v20;
  void *v21;
  uint64_t v22;
  id v23;
  void *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;

  v2 = v1;
  v3 = a1;
  if ((a1 & 0xC000000000000001) != 0)
  {
    sub_1CA1F0F64();
    sub_1CA0B6A1C();
    sub_1CA0C0614();
    sub_1CA1F0CC4();
    v3 = v25;
    v4 = v26;
    v5 = v27;
    v6 = v28;
    v7 = v29;
  }
  else
  {
    v6 = 0;
    v8 = -1 << *(_BYTE *)(a1 + 32);
    v4 = a1 + 56;
    v5 = ~v8;
    v9 = -v8;
    if (v9 < 64)
      v10 = ~(-1 << v9);
    else
      v10 = -1;
    v7 = v10 & *(_QWORD *)(a1 + 56);
  }
  v22 = v5;
  v11 = (unint64_t)(v5 + 64) >> 6;
  if ((v3 & 0x8000000000000000) == 0)
    goto LABEL_12;
LABEL_10:
  v12 = (void *)sub_1CA1F0FD0();
  if (!v12)
  {
LABEL_33:
    v24 = 0;
    sub_1CA0B6B24(v3, v4, v22, v6, v7);
    return;
  }
  v23 = v12;
  sub_1CA0B6A1C();
  swift_dynamicCast();
  for (i = v24; ; v20 = i)
  {
    if ((sub_1CA0BDC28(i, *v2) & 1) != 0)
    {
      v21 = (void *)_s17KnowledgeGraphKit9MAClusterV6remove4nodeSo6MANodeCSgAG_tF_0(i);

      if (v3 < 0)
        goto LABEL_10;
    }
    else
    {
      sub_1CA0BDD74(&v23, i);

      if (v3 < 0)
        goto LABEL_10;
    }
LABEL_12:
    if (v7)
    {
      v14 = __clz(__rbit64(v7));
      v7 &= v7 - 1;
      v15 = v14 | (v6 << 6);
      goto LABEL_28;
    }
    v16 = v6 + 1;
    if (__OFADD__(v6, 1))
      break;
    if (v16 >= v11)
      goto LABEL_32;
    v17 = *(_QWORD *)(v4 + 8 * v16);
    v18 = v6 + 1;
    if (!v17)
    {
      v18 = v6 + 2;
      if (v6 + 2 >= v11)
        goto LABEL_32;
      v17 = *(_QWORD *)(v4 + 8 * v18);
      if (!v17)
      {
        v18 = v6 + 3;
        if (v6 + 3 >= v11)
          goto LABEL_32;
        v17 = *(_QWORD *)(v4 + 8 * v18);
        if (!v17)
        {
          v18 = v6 + 4;
          if (v6 + 4 >= v11)
            goto LABEL_32;
          v17 = *(_QWORD *)(v4 + 8 * v18);
          if (!v17)
          {
            v19 = v6 + 5;
            while (v11 != v19)
            {
              v17 = *(_QWORD *)(v4 + 8 * v19++);
              if (v17)
              {
                v18 = v19 - 1;
                goto LABEL_27;
              }
            }
LABEL_32:
            v7 = 0;
            goto LABEL_33;
          }
        }
      }
    }
LABEL_27:
    v7 = (v17 - 1) & v17;
    v15 = __clz(__rbit64(v17)) + (v18 << 6);
    v6 = v18;
LABEL_28:
    i = *(void **)(*(_QWORD *)(v3 + 48) + 8 * v15);
    v24 = i;
  }
  __break(1u);
}

uint64_t dispatch thunk of MAGraphSimilarity.similarityMatrix(distance:directed:options:identity:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  return (*(uint64_t (**)(void))(a6 + 8))();
}

uint64_t type metadata accessor for MASimilarityDistance()
{
  return objc_opt_self();
}

uint64_t method lookup function for MASimilarityDistance()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of MASimilarityDistance.__allocating_init(directed:options:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 96))();
}

uint64_t dispatch thunk of MASimilarityDistance.prepare(graph:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 104))();
}

uint64_t dispatch thunk of MASimilarityDistance.distance(source:target:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 112))();
}

uint64_t dispatch thunk of static MASimilarityDistance.distance(source:target:directed:options:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 120))();
}

uint64_t type metadata accessor for MAShortestPathSimilarityDistance()
{
  return objc_opt_self();
}

uint64_t type metadata accessor for MACommonNeighborsSimilarityDistance()
{
  return objc_opt_self();
}

uint64_t type metadata accessor for MAEuclideanSimilarityDistance()
{
  return objc_opt_self();
}

uint64_t type metadata accessor for MACosineSimilarityDistance()
{
  return objc_opt_self();
}

uint64_t type metadata accessor for MAProbabilitySimilarityDistance()
{
  return objc_opt_self();
}

uint64_t type metadata accessor for MAFrequencyWeightedCommonNeighborsSimilarityDistance()
{
  return objc_opt_self();
}

uint64_t type metadata accessor for MAPreferentialAttachmentSimilarityDistance()
{
  return objc_opt_self();
}

uint64_t type metadata accessor for MAExponentiallyDampedPathCountsSimilarityDistance()
{
  return objc_opt_self();
}

uint64_t method lookup function for MAExponentiallyDampedPathCountsSimilarityDistance()
{
  return swift_lookUpClassMethod();
}

float ConfusionMatrix.truePositiveCount.getter()
{
  uint64_t v0;

  return *(float *)v0;
}

float ConfusionMatrix.trueNegativeCount.getter()
{
  uint64_t v0;

  return *(float *)(v0 + 4);
}

float ConfusionMatrix.falsePositiveCount.getter()
{
  uint64_t v0;

  return *(float *)(v0 + 8);
}

float ConfusionMatrix.falseNegativeCount.getter()
{
  uint64_t v0;

  return *(float *)(v0 + 12);
}

KnowledgeGraphKit::ConfusionMatrix __swiftcall ConfusionMatrix.init(truePositiveCount:trueNegativeCount:falsePositiveCount:falseNegativeCount:)(Swift::Float truePositiveCount, Swift::Float trueNegativeCount, Swift::Float falsePositiveCount, Swift::Float falseNegativeCount)
{
  Swift::Float *v4;
  KnowledgeGraphKit::ConfusionMatrix result;

  *v4 = truePositiveCount;
  v4[1] = trueNegativeCount;
  v4[2] = falsePositiveCount;
  v4[3] = falseNegativeCount;
  result.falseNegativeCount = falseNegativeCount;
  result.falsePositiveCount = falsePositiveCount;
  result.trueNegativeCount = trueNegativeCount;
  result.truePositiveCount = truePositiveCount;
  return result;
}

KnowledgeGraphKit::ConfusionMatrix __swiftcall ConfusionMatrix.init()()
{
  _QWORD *v0;
  KnowledgeGraphKit::ConfusionMatrix result;

  *v0 = 0;
  v0[1] = 0;
  return result;
}

float ConfusionMatrix.predictedPositiveCount.getter()
{
  float *v0;

  return *v0 + v0[2];
}

float ConfusionMatrix.predictedNegativeCount.getter()
{
  uint64_t v0;

  return *(float *)(v0 + 4) + *(float *)(v0 + 12);
}

float ConfusionMatrix.conditionPositiveCount.getter()
{
  float *v0;

  return *v0 + v0[3];
}

float ConfusionMatrix.conditionNegativeCount.getter()
{
  uint64_t v0;

  return *(float *)(v0 + 4) + *(float *)(v0 + 8);
}

float ConfusionMatrix.totalCount.getter()
{
  float *v0;

  return (float)(*v0 + v0[2]) + (float)(v0[1] + v0[3]);
}

unint64_t ConfusionMatrix.precision.getter()
{
  float *v0;
  float v1;
  uint64_t v2;

  v1 = *v0 + v0[2];
  if (v1 == 0.0)
    v2 = 0;
  else
    v2 = COERCE_UNSIGNED_INT(*v0 / v1);
  return v2 | ((unint64_t)(v1 == 0.0) << 32);
}

unint64_t ConfusionMatrix.recall.getter()
{
  float *v0;
  float v1;
  uint64_t v2;

  v1 = *v0 + v0[3];
  if (v1 == 0.0)
    v2 = 0;
  else
    v2 = COERCE_UNSIGNED_INT(*v0 / v1);
  return v2 | ((unint64_t)(v1 == 0.0) << 32);
}

float ConfusionMatrix.f1Score.getter()
{
  float *v0;
  float v1;
  float v2;
  float result;
  float v4;

  v1 = *v0;
  v2 = *v0 + v0[2];
  result = 0.0;
  if (v2 != 0.0)
  {
    v4 = v1 + v0[3];
    if (v4 != 0.0)
      return (float)((float)((float)(v1 / v2) * (float)(v1 / v4)) + (float)((float)(v1 / v2) * (float)(v1 / v4)))
           / (float)((float)(v1 / v2) + (float)(v1 / v4));
  }
  return result;
}

float ConfusionMatrix.mccScore.getter()
{
  float *v0;
  float v1;
  float v2;
  float v3;
  float v4;
  float v5;
  BOOL v6;
  float result;

  v1 = v0[1];
  v2 = v0[2];
  v3 = v0[3];
  v4 = sqrtf((float)(v1 + v3) * (float)((float)(v1 + v2) * (float)((float)(*v0 + v2) * (float)(*v0 + v3))));
  v5 = (float)((float)(*v0 * v1) - (float)(v2 * v3)) / v4;
  v6 = v4 == 0.0;
  result = 0.0;
  if (!v6)
    return v5;
  return result;
}

__n128 __swift_memcpy16_4(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = *a2;
  *a1 = *a2;
  return result;
}

ValueMetadata *type metadata accessor for ConfusionMatrix()
{
  return &type metadata for ConfusionMatrix;
}

uint64_t sub_1CA1154B4(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  int64_t v8;
  uint64_t result;
  int64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  int64_t v14;
  unint64_t v15;
  int64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  char v21;
  uint64_t v22;
  uint64_t v23;

  v5 = 1 << *(_BYTE *)(a1 + 32);
  v6 = -1;
  if (v5 < 64)
    v6 = ~(-1 << v5);
  v7 = v6 & *(_QWORD *)(a1 + 64);
  v8 = (unint64_t)(v5 + 63) >> 6;
  result = swift_bridgeObjectRetain();
  v10 = 0;
  while (v7)
  {
    v12 = __clz(__rbit64(v7));
    v7 &= v7 - 1;
    v13 = v12 | (v10 << 6);
LABEL_24:
    v17 = 8 * v13;
    v18 = *(_QWORD *)(*(_QWORD *)(a1 + 56) + v17);
    v19 = *a3;
    if (*(_QWORD *)(*a3 + 16) && (v20 = sub_1CA0AA68C(*(_QWORD *)(*(_QWORD *)(a1 + 48) + v17)), (v21 & 1) != 0))
    {
      v11 = *(_QWORD *)(*(_QWORD *)(v19 + 56) + 8 * v20);
      swift_bridgeObjectRetain();
    }
    else
    {
      v11 = 0;
    }
    swift_bridgeObjectRetain_n();
    sub_1CA0BE168(&v22, v18, v11);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    result = swift_bridgeObjectRelease();
  }
  v14 = v10 + 1;
  if (__OFADD__(v10, 1))
  {
    __break(1u);
    goto LABEL_29;
  }
  if (v14 >= v8)
    return swift_release();
  v15 = *(_QWORD *)(v23 + 8 * v14);
  ++v10;
  if (v15)
    goto LABEL_23;
  v10 = v14 + 1;
  if (v14 + 1 >= v8)
    return swift_release();
  v15 = *(_QWORD *)(v23 + 8 * v10);
  if (v15)
    goto LABEL_23;
  v10 = v14 + 2;
  if (v14 + 2 >= v8)
    return swift_release();
  v15 = *(_QWORD *)(v23 + 8 * v10);
  if (v15)
    goto LABEL_23;
  v10 = v14 + 3;
  if (v14 + 3 >= v8)
    return swift_release();
  v15 = *(_QWORD *)(v23 + 8 * v10);
  if (v15)
  {
LABEL_23:
    v7 = (v15 - 1) & v15;
    v13 = __clz(__rbit64(v15)) + (v10 << 6);
    goto LABEL_24;
  }
  v16 = v14 + 4;
  if (v16 >= v8)
    return swift_release();
  v15 = *(_QWORD *)(v23 + 8 * v16);
  if (v15)
  {
    v10 = v16;
    goto LABEL_23;
  }
  while (1)
  {
    v10 = v16 + 1;
    if (__OFADD__(v16, 1))
      break;
    if (v10 >= v8)
      return swift_release();
    v15 = *(_QWORD *)(v23 + 8 * v10);
    ++v16;
    if (v15)
      goto LABEL_23;
  }
LABEL_29:
  __break(1u);
  return result;
}

void sub_1CA1156A8()
{
  _QWORD *v0;
  _QWORD *v1;
  unint64_t v2;
  int64_t v3;
  uint64_t v4;
  unint64_t v5;
  void *v6;
  id v7;
  uint64_t v8;
  int64_t v9;
  int64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  int64_t v14;
  uint64_t v15;

  v1 = v0;
  if ((*v0 & 0x8000000000000000) != 0)
  {
    if (sub_1CA1F0FD0())
    {
      sub_1CA0B6A1C();
      swift_unknownObjectRetain();
      swift_dynamicCast();
      swift_unknownObjectRelease();
      if (v15)
        goto LABEL_6;
    }
    return;
  }
  v3 = v0[3];
  v2 = v0[4];
  if (v2)
  {
    v4 = (v2 - 1) & v2;
    v5 = __clz(__rbit64(v2)) | (v3 << 6);
LABEL_4:
    v6 = *(void **)(*(_QWORD *)(*v0 + 48) + 8 * v5);
    v7 = v6;
    goto LABEL_5;
  }
  v9 = v3 + 1;
  if (__OFADD__(v3, 1))
  {
LABEL_35:
    __break(1u);
    return;
  }
  v10 = (unint64_t)(v0[2] + 64) >> 6;
  if (v9 >= v10)
  {
    v6 = 0;
    v4 = 0;
    goto LABEL_5;
  }
  v11 = v0[1];
  v12 = *(_QWORD *)(v11 + 8 * v9);
  if (v12)
  {
LABEL_14:
    v4 = (v12 - 1) & v12;
    v5 = __clz(__rbit64(v12)) + (v9 << 6);
    v3 = v9;
    goto LABEL_4;
  }
  v13 = v3 + 2;
  if (v3 + 2 >= v10)
    goto LABEL_31;
  v12 = *(_QWORD *)(v11 + 8 * v13);
  if (v12)
  {
LABEL_19:
    v9 = v13;
    goto LABEL_14;
  }
  if (v3 + 3 >= v10)
    goto LABEL_32;
  v12 = *(_QWORD *)(v11 + 8 * (v3 + 3));
  if (v12)
  {
    v9 = v3 + 3;
    goto LABEL_14;
  }
  v13 = v3 + 4;
  if (v3 + 4 < v10)
  {
    v12 = *(_QWORD *)(v11 + 8 * v13);
    if (v12)
      goto LABEL_19;
    v9 = v3 + 5;
    if (v3 + 5 < v10)
    {
      v12 = *(_QWORD *)(v11 + 8 * v9);
      if (v12)
        goto LABEL_14;
      v9 = v10 - 1;
      v14 = v3 + 6;
      while (v10 != v14)
      {
        v12 = *(_QWORD *)(v11 + 8 * v14++);
        if (v12)
        {
          v9 = v14 - 1;
          goto LABEL_14;
        }
      }
LABEL_31:
      v6 = 0;
      v4 = 0;
      v3 = v9;
      goto LABEL_5;
    }
LABEL_32:
    v6 = 0;
    v4 = 0;
    v3 = v13;
    goto LABEL_5;
  }
  v6 = 0;
  v4 = 0;
  v3 += 3;
LABEL_5:
  v1[3] = v3;
  v1[4] = v4;
  if (v6)
  {
LABEL_6:
    v8 = v1[5];
    if (!__OFADD__(v8, 1))
    {
      v1[5] = v8 + 1;
      return;
    }
    __break(1u);
    goto LABEL_35;
  }
}

uint64_t sub_1CA115894()
{
  _QWORD *v0;
  unint64_t v1;
  int64_t v2;
  int64_t v3;
  uint64_t v4;
  unint64_t v5;
  void *v6;
  uint64_t v7;
  id v8;
  int64_t v9;
  int64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  int64_t v14;
  uint64_t result;

  v2 = v0[3];
  v1 = v0[4];
  v3 = v2;
  if (!v1)
  {
    v9 = v2 + 1;
    if (__OFADD__(v2, 1))
      goto LABEL_26;
    v10 = (unint64_t)(v0[2] + 64) >> 6;
    if (v9 < v10)
    {
      v11 = v0[1];
      v12 = *(_QWORD *)(v11 + 8 * v9);
      if (v12)
      {
LABEL_8:
        v4 = (v12 - 1) & v12;
        v5 = __clz(__rbit64(v12)) + (v9 << 6);
        v3 = v9;
        goto LABEL_3;
      }
      v13 = v2 + 2;
      v3 = v2 + 1;
      if (v2 + 2 < v10)
      {
        v12 = *(_QWORD *)(v11 + 8 * v13);
        if (v12)
        {
LABEL_11:
          v9 = v13;
          goto LABEL_8;
        }
        v3 = v2 + 2;
        if (v2 + 3 < v10)
        {
          v12 = *(_QWORD *)(v11 + 8 * (v2 + 3));
          if (v12)
          {
            v9 = v2 + 3;
            goto LABEL_8;
          }
          v13 = v2 + 4;
          v3 = v2 + 3;
          if (v2 + 4 < v10)
          {
            v12 = *(_QWORD *)(v11 + 8 * v13);
            if (v12)
              goto LABEL_11;
            v9 = v2 + 5;
            v3 = v2 + 4;
            if (v2 + 5 < v10)
            {
              v12 = *(_QWORD *)(v11 + 8 * v9);
              if (v12)
                goto LABEL_8;
              v3 = v10 - 1;
              v14 = v2 + 6;
              while (v10 != v14)
              {
                v12 = *(_QWORD *)(v11 + 8 * v14++);
                if (v12)
                {
                  v9 = v14 - 1;
                  goto LABEL_8;
                }
              }
            }
          }
        }
      }
    }
    v7 = 0;
    v0[3] = v3;
    v0[4] = 0;
    return v7;
  }
  v4 = (v1 - 1) & v1;
  v5 = __clz(__rbit64(v1)) | (v2 << 6);
LABEL_3:
  v6 = *(void **)(*(_QWORD *)(*v0 + 48) + 8 * v5);
  v0[3] = v3;
  v0[4] = v4;
  v7 = v0[5];
  if (!__OFADD__(v7, 1))
  {
    v0[5] = v7 + 1;
    v8 = v6;
    swift_bridgeObjectRetain();
    return v7;
  }
  __break(1u);
LABEL_26:
  __break(1u);
  return result;
}

void sub_1CA115A08(_QWORD **a1)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4[2];

  v2 = *a1;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    v2 = (_QWORD *)sub_1CA13B4DC(v2);
  v3 = v2[2];
  v4[0] = (uint64_t)(v2 + 4);
  v4[1] = v3;
  sub_1CA121924(v4);
  *a1 = v2;
}

uint64_t MADistribution.projections.getter()
{
  return swift_bridgeObjectRetain();
}

double MADistribution.__allocating_init(projections:weights:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  double result;

  v4 = swift_allocObject();
  result = 0.0;
  *(_OWORD *)(v4 + 32) = 0u;
  *(_OWORD *)(v4 + 48) = 0u;
  *(_OWORD *)(v4 + 64) = 0u;
  *(_OWORD *)(v4 + 80) = 0u;
  *(_OWORD *)(v4 + 96) = 0u;
  *(_OWORD *)(v4 + 112) = 0u;
  *(_OWORD *)(v4 + 128) = 0u;
  *(_OWORD *)(v4 + 144) = 0u;
  *(_OWORD *)(v4 + 160) = 0u;
  *(_BYTE *)(v4 + 176) = 1;
  *(_OWORD *)(v4 + 184) = 0u;
  *(_OWORD *)(v4 + 200) = 0u;
  *(_OWORD *)(v4 + 216) = 0u;
  *(_QWORD *)(v4 + 16) = a1;
  *(_QWORD *)(v4 + 24) = a2;
  return result;
}

uint64_t MADistribution.init(projections:weights:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  *(_OWORD *)(v2 + 144) = 0u;
  *(_OWORD *)(v2 + 160) = 0u;
  *(_OWORD *)(v2 + 112) = 0u;
  *(_OWORD *)(v2 + 128) = 0u;
  *(_OWORD *)(v2 + 80) = 0u;
  *(_OWORD *)(v2 + 96) = 0u;
  *(_OWORD *)(v2 + 48) = 0u;
  *(_OWORD *)(v2 + 64) = 0u;
  *(_OWORD *)(v2 + 32) = 0u;
  *(_BYTE *)(v2 + 176) = 1;
  *(_OWORD *)(v2 + 184) = 0u;
  *(_OWORD *)(v2 + 200) = 0u;
  *(_OWORD *)(v2 + 216) = 0u;
  *(_QWORD *)(v2 + 16) = a1;
  *(_QWORD *)(v2 + 24) = a2;
  return v2;
}

uint64_t MADistribution.__allocating_init(distributions:)(unint64_t a1)
{
  uint64_t v2;

  swift_allocObject();
  v2 = sub_1CA12352C(a1);
  swift_bridgeObjectRelease();
  return v2;
}

uint64_t MADistribution.init(distributions:)(unint64_t a1)
{
  uint64_t v1;

  v1 = sub_1CA12352C(a1);
  swift_bridgeObjectRelease();
  return v1;
}

id sub_1CA115B90@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  void *v2;
  uint64_t v3;

  v2 = *(void **)a1;
  v3 = *(_QWORD *)(a1 + 8);
  *a2 = *(_QWORD *)a1;
  a2[1] = v3;
  return v2;
}

void sub_1CA115BA4()
{
  uint64_t v0;

  v0 = swift_bridgeObjectRetain();
  sub_1CA0C1F1C(v0);
}

uint64_t sub_1CA115BBC()
{
  uint64_t v0;
  unint64_t v1;
  uint64_t v2;

  v0 = swift_bridgeObjectRetain();
  v1 = sub_1CA115C1C(v0);
  swift_bridgeObjectRelease();
  v2 = sub_1CA0C68DC(v1);
  swift_bridgeObjectRelease();
  return v2;
}

uint64_t sub_1CA115C1C(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  int64_t v5;
  uint64_t result;
  int64_t v7;
  uint64_t v8;
  int64_t v9;
  uint64_t v10;
  int64_t v11;
  uint64_t v12;

  v12 = MEMORY[0x1E0DEE9D8];
  v1 = a1 + 64;
  v2 = 1 << *(_BYTE *)(a1 + 32);
  v3 = -1;
  if (v2 < 64)
    v3 = ~(-1 << v2);
  v4 = v3 & *(_QWORD *)(a1 + 64);
  v5 = (unint64_t)(v2 + 63) >> 6;
  result = swift_bridgeObjectRetain();
  v7 = 0;
  while (1)
  {
    if (v4)
    {
      v4 &= v4 - 1;
      goto LABEL_5;
    }
    v9 = v7 + 1;
    if (__OFADD__(v7, 1))
    {
      __break(1u);
      goto LABEL_25;
    }
    if (v9 >= v5)
      goto LABEL_23;
    v10 = *(_QWORD *)(v1 + 8 * v9);
    ++v7;
    if (!v10)
    {
      v7 = v9 + 1;
      if (v9 + 1 >= v5)
        goto LABEL_23;
      v10 = *(_QWORD *)(v1 + 8 * v7);
      if (!v10)
      {
        v7 = v9 + 2;
        if (v9 + 2 >= v5)
          goto LABEL_23;
        v10 = *(_QWORD *)(v1 + 8 * v7);
        if (!v10)
        {
          v7 = v9 + 3;
          if (v9 + 3 >= v5)
            goto LABEL_23;
          v10 = *(_QWORD *)(v1 + 8 * v7);
          if (!v10)
            break;
        }
      }
    }
LABEL_22:
    v4 = (v10 - 1) & v10;
LABEL_5:
    v8 = swift_bridgeObjectRetain();
    result = sub_1CA0B2380(v8);
  }
  v11 = v9 + 4;
  if (v11 >= v5)
  {
LABEL_23:
    swift_release();
    return v12;
  }
  v10 = *(_QWORD *)(v1 + 8 * v11);
  if (v10)
  {
    v7 = v11;
    goto LABEL_22;
  }
  while (1)
  {
    v7 = v11 + 1;
    if (__OFADD__(v11, 1))
      break;
    if (v7 >= v5)
      goto LABEL_23;
    v10 = *(_QWORD *)(v1 + 8 * v7);
    ++v11;
    if (v10)
      goto LABEL_22;
  }
LABEL_25:
  __break(1u);
  return result;
}

uint64_t sub_1CA115D88()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;

  v0 = swift_bridgeObjectRetain();
  sub_1CA0C1F1C(v0);
  if ((v1 & 0xC000000000000001) != 0)
    v2 = sub_1CA1F0FA0();
  else
    v2 = *(_QWORD *)(v1 + 16);
  swift_bridgeObjectRelease();
  v3 = swift_bridgeObjectRetain();
  v4 = sub_1CA115C1C(v3);
  swift_bridgeObjectRelease();
  v5 = sub_1CA0C68DC(v4);
  swift_bridgeObjectRelease();
  if ((v5 & 0xC000000000000001) != 0)
    sub_1CA1F0FA0();
  swift_bridgeObjectRelease();
  return v2;
}

uint64_t sub_1CA115E54()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t result;

  v0 = sub_1CA115D88();
  sub_1CA115D88();
  result = v0 * v1;
  if ((unsigned __int128)(v0 * (__int128)v1) >> 64 != (v0 * v1) >> 63)
    __break(1u);
  return result;
}

uint64_t sub_1CA115E8C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;

  v0 = swift_bridgeObjectRetain();
  sub_1CA0C1F1C(v0);
  if ((v1 & 0xC000000000000001) != 0)
    v2 = sub_1CA1F0FA0();
  else
    v2 = *(_QWORD *)(v1 + 16);
  swift_bridgeObjectRelease();
  v3 = swift_bridgeObjectRetain();
  v4 = sub_1CA115C1C(v3);
  swift_bridgeObjectRelease();
  if (v4 >> 62)
  {
    swift_bridgeObjectRetain();
    sub_1CA1F1234();
    swift_bridgeObjectRelease();
  }
  swift_bridgeObjectRelease();
  return v2;
}

uint64_t sub_1CA115F5C(void *a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  char v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  id v10;
  unint64_t v11;
  char v12;
  uint64_t v13;

  v3 = swift_bridgeObjectRetain();
  sub_1CA0C1F1C(v3);
  v5 = sub_1CA0BDC28(a1, v4);
  swift_bridgeObjectRelease();
  if ((v5 & 1) == 0)
  {
    v6 = swift_bridgeObjectRetain();
    v7 = sub_1CA115C1C(v6);
    swift_bridgeObjectRelease();
    v8 = sub_1CA0C68DC(v7);
    swift_bridgeObjectRelease();
    LOBYTE(v7) = sub_1CA0BDC28(a1, v8);
    swift_bridgeObjectRelease();
    if ((v7 & 1) == 0)
      return 0;
  }
  v9 = *(_QWORD *)(v1 + 24);
  if (!v9 || !*(_QWORD *)(v9 + 16))
    return 0x3FF0000000000000;
  v10 = a1;
  v11 = sub_1CA0AA594((uint64_t)v10);
  if ((v12 & 1) != 0)
    v13 = *(_QWORD *)(*(_QWORD *)(v9 + 56) + 8 * v11);
  else
    v13 = 0x3FF0000000000000;

  return v13;
}

_QWORD *sub_1CA116060()
{
  _QWORD *v0;
  _QWORD *v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;

  if (v0[4])
  {
    v1 = (_QWORD *)v0[4];
  }
  else
  {
    v2 = v0;
    v3 = swift_bridgeObjectRetain();
    sub_1CA0C1F1C(v3);
    v5 = sub_1CA0B57C8(v4);
    swift_bridgeObjectRelease();
    v6 = swift_bridgeObjectRetain();
    v7 = sub_1CA115C1C(v6);
    swift_bridgeObjectRelease();
    v8 = sub_1CA0C68DC(v7);
    swift_bridgeObjectRelease();
    v9 = sub_1CA0B57C8(v8);
    swift_bridgeObjectRelease();
    sub_1CA0B2EE8(v9);
    swift_retain();
    v10 = sub_1CA122B3C(v5, v2);
    swift_release();
    v11 = *(_QWORD *)(v10 + 16);
    type metadata accessor for MAVectorRepresentation();
    v1 = (_QWORD *)swift_allocObject();
    v1[2] = 1;
    v1[3] = v11;
    v1[4] = v10;
    v1[5] = v5;
    v2[4] = v1;
    swift_retain();
    swift_release();
  }
  swift_retain();
  return v1;
}

uint64_t sub_1CA11618C(uint64_t a1)
{
  uint64_t v1;

  *(_QWORD *)(v1 + 32) = a1;
  return swift_release();
}

uint64_t (*sub_1CA11619C(_QWORD *a1))(_QWORD *a1)
{
  uint64_t v1;

  a1[1] = v1;
  *a1 = sub_1CA116060();
  return sub_1CA1161D0;
}

uint64_t sub_1CA1161D0(_QWORD *a1)
{
  *(_QWORD *)(a1[1] + 32) = *a1;
  return swift_release();
}

_QWORD *sub_1CA1161E0()
{
  _QWORD *v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;

  if (v0[5])
  {
    v1 = (_QWORD *)v0[5];
  }
  else
  {
    v2 = swift_bridgeObjectRetain();
    sub_1CA0C1F1C(v2);
    v4 = sub_1CA0B57C8(v3);
    swift_bridgeObjectRelease();
    swift_retain();
    v5 = sub_1CA122B3C(v4, v0);
    swift_release();
    v6 = *(_QWORD *)(v5 + 16);
    type metadata accessor for MAVectorRepresentation();
    v1 = (_QWORD *)swift_allocObject();
    v1[2] = 1;
    v1[3] = v6;
    v1[4] = v5;
    v1[5] = v4;
    v0[5] = v1;
    swift_retain();
    swift_release();
  }
  swift_retain();
  return v1;
}

uint64_t sub_1CA1162B0(uint64_t a1)
{
  uint64_t v1;

  *(_QWORD *)(v1 + 40) = a1;
  return swift_release();
}

uint64_t (*sub_1CA1162C0(_QWORD *a1))(_QWORD *a1)
{
  uint64_t v1;

  a1[1] = v1;
  *a1 = sub_1CA1161E0();
  return sub_1CA1162F4;
}

uint64_t sub_1CA1162F4(_QWORD *a1)
{
  *(_QWORD *)(a1[1] + 40) = *a1;
  return swift_release();
}

_QWORD *sub_1CA116304()
{
  _QWORD *v0;
  _QWORD *v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;

  if (v0[6])
  {
    v1 = (_QWORD *)v0[6];
  }
  else
  {
    v2 = swift_bridgeObjectRetain();
    v3 = sub_1CA115C1C(v2);
    swift_bridgeObjectRelease();
    v4 = sub_1CA0C68DC(v3);
    swift_bridgeObjectRelease();
    v5 = sub_1CA0B57C8(v4);
    swift_bridgeObjectRelease();
    swift_retain();
    v6 = sub_1CA122B3C(v5, v0);
    swift_release();
    v7 = *(_QWORD *)(v6 + 16);
    type metadata accessor for MAVectorRepresentation();
    v1 = (_QWORD *)swift_allocObject();
    v1[2] = 1;
    v1[3] = v7;
    v1[4] = v6;
    v1[5] = v5;
    v0[6] = v1;
    swift_retain();
    swift_release();
  }
  swift_retain();
  return v1;
}

uint64_t sub_1CA1163F8(uint64_t a1)
{
  uint64_t v1;

  *(_QWORD *)(v1 + 48) = a1;
  return swift_release();
}

uint64_t (*sub_1CA116408(_QWORD *a1))(_QWORD *a1)
{
  uint64_t v1;

  a1[1] = v1;
  *a1 = sub_1CA116304();
  return sub_1CA11643C;
}

uint64_t sub_1CA11643C(_QWORD *a1)
{
  *(_QWORD *)(a1[1] + 48) = *a1;
  return swift_release();
}

uint64_t sub_1CA11644C()
{
  uint64_t v0;
  uint64_t inited;
  unint64_t v2;
  uint64_t v3;
  unint64_t v5;

  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_1ED852A58);
  inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_1CA1F9520;
  *(_QWORD *)(inited + 32) = v0;
  v5 = inited;
  sub_1CA1F0B14();
  swift_retain();
  v2 = swift_bridgeObjectRetain();
  sub_1CA0B2EF4(v2);
  type metadata accessor for MADistribution();
  swift_allocObject();
  v3 = sub_1CA12352C(v5);
  swift_bridgeObjectRelease();
  return v3;
}

double sub_1CA1164FC(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  double result;

  v2 = v1;
  if (*(_QWORD *)(v2 + 24))
  {
    swift_bridgeObjectRetain();
    swift_retain();
    v4 = swift_bridgeObjectRetain();
    v5 = sub_1CA123D50(v4, a1);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_release();
  }
  else
  {
    v5 = MEMORY[0x1E0DEE9E0];
  }
  swift_bridgeObjectRetain();
  v6 = swift_bridgeObjectRetain();
  v7 = sub_1CA124288(v6, a1);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  type metadata accessor for MADistribution();
  v8 = swift_allocObject();
  result = 0.0;
  *(_OWORD *)(v8 + 32) = 0u;
  *(_OWORD *)(v8 + 48) = 0u;
  *(_OWORD *)(v8 + 64) = 0u;
  *(_OWORD *)(v8 + 80) = 0u;
  *(_OWORD *)(v8 + 96) = 0u;
  *(_OWORD *)(v8 + 112) = 0u;
  *(_OWORD *)(v8 + 128) = 0u;
  *(_OWORD *)(v8 + 144) = 0u;
  *(_OWORD *)(v8 + 160) = 0u;
  *(_BYTE *)(v8 + 176) = 1;
  *(_OWORD *)(v8 + 184) = 0u;
  *(_OWORD *)(v8 + 200) = 0u;
  *(_OWORD *)(v8 + 216) = 0u;
  *(_QWORD *)(v8 + 16) = v7;
  *(_QWORD *)(v8 + 24) = v5;
  return result;
}

uint64_t sub_1CA1165FC(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  int64_t v8;
  uint64_t v9;
  _QWORD *v10;
  unint64_t v11;
  unint64_t v12;
  BOOL v13;
  unint64_t v14;
  int64_t v15;
  uint64_t v16;
  void *v17;
  uint64_t v18;
  id v19;
  uint64_t v20;
  id v21;
  char isUniquelyReferenced_nonNull_native;
  _QWORD *v23;
  uint64_t v24;
  id v25;
  unint64_t v26;
  char v27;
  double v28;
  char v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  unint64_t v38;
  id v39;
  int64_t v40;
  unint64_t v41;
  uint64_t v42;
  id v43;
  unint64_t v44;
  char v45;
  uint64_t v46;
  char v47;
  char v48;
  unint64_t v49;
  uint64_t v50;
  _BOOL8 v51;
  uint64_t v52;
  unint64_t v53;
  char v54;
  int v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  id v59;
  char v60;
  uint64_t result;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  _QWORD *v66;
  _QWORD *v67;
  char v68;
  void *v69;
  int64_t v70;
  uint64_t v71;
  uint64_t v72;
  int64_t v73;
  uint64_t v74;
  _QWORD *v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  unint64_t v80;

  v3 = *(_QWORD *)(v1 + 16);
  v4 = v3 + 64;
  v5 = 1 << *(_BYTE *)(v3 + 32);
  if (v5 < 64)
    v6 = ~(-1 << v5);
  else
    v6 = -1;
  v7 = v6 & *(_QWORD *)(v3 + 64);
  v73 = (unint64_t)(v5 + 63) >> 6;
  swift_bridgeObjectRetain();
  v8 = 0;
  v9 = 0;
  v10 = (_QWORD *)MEMORY[0x1E0DEE9E0];
  v67 = (_QWORD *)MEMORY[0x1E0DEE9E0];
  v63 = a1;
  v64 = v3;
  v62 = v3 + 64;
  if (!v7)
    goto LABEL_6;
  do
  {
    while (1)
    {
      v11 = __clz(__rbit64(v7));
      v7 &= v7 - 1;
      v12 = v11 | (v8 << 6);
LABEL_17:
      v16 = 8 * v12;
      v17 = *(void **)(*(_QWORD *)(v3 + 48) + v16);
      v18 = *(_QWORD *)(*(_QWORD *)(v3 + 56) + v16);
      swift_bridgeObjectRetain_n();
      swift_bridgeObjectRetain();
      v19 = v17;
      v20 = sub_1CA1248CC(v18, a1);
      v74 = v9;
      swift_bridgeObjectRelease();
      if ((v20 & 0xC000000000000001) == 0)
      {
        if (*(uint64_t *)(v20 + 16) < 1)
          goto LABEL_19;
        break;
      }
      if (sub_1CA1F0FA0() >= 1)
        break;
LABEL_19:
      swift_release();
      swift_bridgeObjectRelease();

      if (!v7)
        goto LABEL_6;
    }
    v21 = v19;
    swift_retain();
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    v75 = v10;
    sub_1CA0AE3B8(v20, v21, isUniquelyReferenced_nonNull_native);
    v23 = v10;
    v69 = v21;

    swift_bridgeObjectRelease();
    v24 = *(_QWORD *)(v65 + 24);
    v66 = v23;
    if (v24 && *(_QWORD *)(v24 + 16))
    {
      v25 = v21;
      v26 = sub_1CA0AA594((uint64_t)v25);
      if ((v27 & 1) != 0)
      {
        v28 = *(double *)(*(_QWORD *)(v24 + 56) + 8 * v26);
        v29 = swift_isUniquelyReferenced_nonNull_native();
        v75 = v67;
        sub_1CA0AE290(v25, v29, v28);

        swift_bridgeObjectRelease();
      }
      else
      {

      }
    }
    v72 = v24;
    if ((v20 & 0xC000000000000001) != 0)
    {
      sub_1CA1F0F64();
      sub_1CA0B6A1C();
      sub_1CA0C0614();
      sub_1CA1F0CC4();
      v20 = v76;
      v71 = v77;
      v30 = v78;
      v31 = v79;
      v32 = v80;
    }
    else
    {
      v31 = 0;
      v33 = -1 << *(_BYTE *)(v20 + 32);
      v71 = v20 + 56;
      v30 = ~v33;
      v34 = -v33;
      if (v34 < 64)
        v35 = ~(-1 << v34);
      else
        v35 = -1;
      v32 = v35 & *(_QWORD *)(v20 + 56);
    }
    v70 = (unint64_t)(v30 + 64) >> 6;
    while (1)
    {
      v36 = v31;
      if (v20 < 0)
      {
        if (!sub_1CA1F0FD0())
          goto LABEL_76;
        sub_1CA0B6A1C();
        swift_unknownObjectRetain();
        swift_dynamicCast();
        v39 = v75;
        swift_unknownObjectRelease();
        v24 = v72;
        if (!v75)
          goto LABEL_76;
        goto LABEL_61;
      }
      if (v32)
      {
        v37 = __clz(__rbit64(v32));
        v32 &= v32 - 1;
        v38 = v37 | (v31 << 6);
        goto LABEL_60;
      }
      v40 = v31 + 1;
      if (__OFADD__(v31, 1))
        goto LABEL_80;
      if (v40 >= v70)
        goto LABEL_76;
      v41 = *(_QWORD *)(v71 + 8 * v40);
      ++v31;
      if (!v41)
      {
        v31 = v36 + 2;
        if (v36 + 2 >= v70)
          goto LABEL_76;
        v41 = *(_QWORD *)(v71 + 8 * v31);
        if (!v41)
        {
          v31 = v36 + 3;
          if (v36 + 3 >= v70)
            goto LABEL_76;
          v41 = *(_QWORD *)(v71 + 8 * v31);
          if (!v41)
          {
            v31 = v36 + 4;
            if (v36 + 4 >= v70)
              goto LABEL_76;
            v41 = *(_QWORD *)(v71 + 8 * v31);
            if (!v41)
              break;
          }
        }
      }
LABEL_59:
      v32 = (v41 - 1) & v41;
      v38 = __clz(__rbit64(v41)) + (v31 << 6);
LABEL_60:
      v39 = *(id *)(*(_QWORD *)(v20 + 48) + 8 * v38);
      if (!v39)
        goto LABEL_76;
LABEL_61:
      if (v24 && *(_QWORD *)(v24 + 16))
      {
        v43 = v39;
        v44 = sub_1CA0AA594((uint64_t)v43);
        if ((v45 & 1) == 0)
        {

          v24 = v72;
          goto LABEL_39;
        }
        v46 = *(_QWORD *)(*(_QWORD *)(v72 + 56) + 8 * v44);
        v47 = swift_isUniquelyReferenced_nonNull_native();
        v75 = v67;
        v49 = sub_1CA0AA594((uint64_t)v43);
        v50 = v67[2];
        v51 = (v48 & 1) == 0;
        v52 = v50 + v51;
        if (__OFADD__(v50, v51))
          goto LABEL_82;
        if (v67[3] < v52)
        {
          v68 = v48;
          sub_1CA0EB588(v52, v47);
          v53 = sub_1CA0AA594((uint64_t)v43);
          v55 = v54 & 1;
          v48 = v68;
          if ((v68 & 1) != v55)
            goto LABEL_84;
          v49 = v53;
          goto LABEL_68;
        }
        v24 = v72;
        if ((v47 & 1) == 0)
        {
          v60 = v48;
          sub_1CA0EF5C0();
          v48 = v60;
LABEL_68:
          v24 = v72;
        }
        v67 = v75;
        if ((v48 & 1) != 0)
        {
          *(_QWORD *)(v75[7] + 8 * v49) = v46;
        }
        else
        {
          v75[(v49 >> 6) + 8] |= 1 << v49;
          v56 = 8 * v49;
          *(_QWORD *)(v75[6] + v56) = v43;
          *(_QWORD *)(v75[7] + v56) = v46;
          v57 = v75[2];
          v13 = __OFADD__(v57, 1);
          v58 = v57 + 1;
          if (v13)
            goto LABEL_83;
          v75[2] = v58;
          v59 = v43;
        }

        swift_bridgeObjectRelease();
      }
      else
      {
LABEL_39:

      }
    }
    v42 = v36 + 5;
    while (v70 != v42)
    {
      v41 = *(_QWORD *)(v71 + 8 * v42++);
      if (v41)
      {
        v31 = v42 - 1;
        goto LABEL_59;
      }
    }
LABEL_76:
    sub_1CA0B6A14();
    swift_bridgeObjectRelease();

    v10 = v66;
    a1 = v63;
    v3 = v64;
    v4 = v62;
    v9 = v74;
  }
  while (v7);
LABEL_6:
  v13 = __OFADD__(v8++, 1);
  if (v13)
  {
    __break(1u);
LABEL_80:
    __break(1u);
    goto LABEL_81;
  }
  if (v8 >= v73)
    goto LABEL_78;
  v14 = *(_QWORD *)(v4 + 8 * v8);
  if (v14)
    goto LABEL_16;
  v15 = v8 + 1;
  if (v8 + 1 >= v73)
    goto LABEL_78;
  v14 = *(_QWORD *)(v4 + 8 * v15);
  if (v14)
  {
LABEL_15:
    v8 = v15;
LABEL_16:
    v7 = (v14 - 1) & v14;
    v12 = __clz(__rbit64(v14)) + (v8 << 6);
    goto LABEL_17;
  }
  v15 = v8 + 2;
  if (v8 + 2 >= v73)
    goto LABEL_78;
  v14 = *(_QWORD *)(v4 + 8 * v15);
  if (v14)
    goto LABEL_15;
  v15 = v8 + 3;
  if (v8 + 3 >= v73)
  {
LABEL_78:
    swift_release();
    type metadata accessor for MADistribution();
    result = swift_allocObject();
    *(_OWORD *)(result + 32) = 0u;
    *(_OWORD *)(result + 48) = 0u;
    *(_OWORD *)(result + 64) = 0u;
    *(_OWORD *)(result + 80) = 0u;
    *(_OWORD *)(result + 96) = 0u;
    *(_OWORD *)(result + 112) = 0u;
    *(_OWORD *)(result + 128) = 0u;
    *(_OWORD *)(result + 144) = 0u;
    *(_OWORD *)(result + 160) = 0u;
    *(_BYTE *)(result + 176) = 1;
    *(_OWORD *)(result + 184) = 0u;
    *(_OWORD *)(result + 200) = 0u;
    *(_OWORD *)(result + 216) = 0u;
    *(_QWORD *)(result + 16) = v10;
    *(_QWORD *)(result + 24) = v67;
  }
  else
  {
    v14 = *(_QWORD *)(v4 + 8 * v15);
    if (v14)
      goto LABEL_15;
    while (1)
    {
      v8 = v15 + 1;
      if (__OFADD__(v15, 1))
        break;
      if (v8 >= v73)
        goto LABEL_78;
      v14 = *(_QWORD *)(v4 + 8 * v8);
      ++v15;
      if (v14)
        goto LABEL_16;
    }
LABEL_81:
    __break(1u);
LABEL_82:
    __break(1u);
LABEL_83:
    __break(1u);
LABEL_84:
    sub_1CA0B6A1C();
    result = sub_1CA1F1360();
    __break(1u);
  }
  return result;
}

uint64_t sub_1CA116C9C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  _QWORD *v12;
  unint64_t v13;
  unint64_t v14;
  BOOL v15;
  unint64_t v16;
  int64_t v17;
  uint64_t v18;
  void *v19;
  uint64_t v20;
  id v21;
  uint64_t v22;
  id v23;
  char isUniquelyReferenced_nonNull_native;
  _QWORD *v25;
  uint64_t v26;
  id v27;
  unint64_t v28;
  char v29;
  double v30;
  char v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  unint64_t v40;
  id v41;
  int64_t v42;
  unint64_t v43;
  uint64_t v44;
  id v45;
  unint64_t v46;
  char v47;
  uint64_t v48;
  char v49;
  char v50;
  unint64_t v51;
  uint64_t v52;
  _BOOL8 v53;
  uint64_t v54;
  unint64_t v55;
  char v56;
  int v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  id v61;
  char v62;
  uint64_t result;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  _QWORD *v68;
  _QWORD *v69;
  char v70;
  void *v71;
  int64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  int64_t v76;
  _QWORD *v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  unint64_t v82;

  swift_bridgeObjectRetain();
  v4 = swift_bridgeObjectRetain();
  v5 = 0;
  v6 = sub_1CA124288(v4, a1);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v7 = 0;
  v8 = *(_QWORD *)(v6 + 64);
  v75 = v6 + 64;
  v9 = 1 << *(_BYTE *)(v6 + 32);
  if (v9 < 64)
    v10 = ~(-1 << v9);
  else
    v10 = -1;
  v11 = v10 & v8;
  v76 = (unint64_t)(v9 + 63) >> 6;
  v12 = (_QWORD *)MEMORY[0x1E0DEE9E0];
  v69 = (_QWORD *)MEMORY[0x1E0DEE9E0];
  v64 = v6;
  v65 = a2;
  if ((v10 & v8) == 0)
    goto LABEL_6;
  while (2)
  {
    while (1)
    {
      v13 = __clz(__rbit64(v11));
      v11 &= v11 - 1;
      v14 = v13 | (v7 << 6);
LABEL_17:
      v18 = 8 * v14;
      v19 = *(void **)(*(_QWORD *)(v6 + 48) + v18);
      v20 = *(_QWORD *)(*(_QWORD *)(v6 + 56) + v18);
      swift_bridgeObjectRetain_n();
      swift_bridgeObjectRetain();
      v21 = v19;
      v22 = sub_1CA1248CC(v20, a2);
      swift_bridgeObjectRelease();
      if ((v22 & 0xC000000000000001) != 0)
        break;
      if (*(uint64_t *)(v22 + 16) >= 1)
        goto LABEL_22;
LABEL_19:
      swift_release();
      swift_bridgeObjectRelease();

      if (!v11)
        goto LABEL_6;
    }
    if (sub_1CA1F0FA0() < 1)
      goto LABEL_19;
LABEL_22:
    v23 = v21;
    swift_retain();
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    v77 = v12;
    sub_1CA0AE3B8(v22, v23, isUniquelyReferenced_nonNull_native);
    v25 = v12;
    v71 = v23;

    swift_bridgeObjectRelease();
    v26 = *(_QWORD *)(v66 + 24);
    v68 = v25;
    if (v26 && *(_QWORD *)(v26 + 16))
    {
      v27 = v23;
      v28 = sub_1CA0AA594((uint64_t)v27);
      if ((v29 & 1) != 0)
      {
        v30 = *(double *)(*(_QWORD *)(v26 + 56) + 8 * v28);
        v31 = swift_isUniquelyReferenced_nonNull_native();
        v77 = v69;
        sub_1CA0AE290(v27, v31, v30);

        swift_bridgeObjectRelease();
      }
      else
      {

      }
    }
    v74 = v26;
    if ((v22 & 0xC000000000000001) != 0)
    {
      sub_1CA1F0F64();
      sub_1CA0B6A1C();
      sub_1CA0C0614();
      sub_1CA1F0CC4();
      v22 = v78;
      v73 = v79;
      v32 = v80;
      v33 = v81;
      v34 = v82;
    }
    else
    {
      v33 = 0;
      v35 = -1 << *(_BYTE *)(v22 + 32);
      v73 = v22 + 56;
      v32 = ~v35;
      v36 = -v35;
      if (v36 < 64)
        v37 = ~(-1 << v36);
      else
        v37 = -1;
      v34 = v37 & *(_QWORD *)(v22 + 56);
    }
    v67 = v5;
    v72 = (unint64_t)(v32 + 64) >> 6;
LABEL_38:
    v38 = v33;
    while (v22 < 0)
    {
      if (!sub_1CA1F0FD0())
        goto LABEL_77;
      sub_1CA0B6A1C();
      swift_unknownObjectRetain();
      swift_dynamicCast();
      v41 = v77;
      swift_unknownObjectRelease();
      v33 = v38;
      v39 = v34;
      v26 = v74;
      if (!v77)
        goto LABEL_77;
LABEL_61:
      if (v26 && *(_QWORD *)(v26 + 16))
      {
        v45 = v41;
        v46 = sub_1CA0AA594((uint64_t)v45);
        if ((v47 & 1) == 0)
        {

          v26 = v74;
          goto LABEL_39;
        }
        v48 = *(_QWORD *)(*(_QWORD *)(v74 + 56) + 8 * v46);
        v49 = swift_isUniquelyReferenced_nonNull_native();
        v77 = v69;
        v51 = sub_1CA0AA594((uint64_t)v45);
        v52 = v69[2];
        v53 = (v50 & 1) == 0;
        v54 = v52 + v53;
        if (__OFADD__(v52, v53))
          goto LABEL_83;
        if (v69[3] >= v54)
        {
          v26 = v74;
          if ((v49 & 1) != 0)
            goto LABEL_71;
          v62 = v50;
          sub_1CA0EF5C0();
          v50 = v62;
        }
        else
        {
          v70 = v50;
          sub_1CA0EB588(v54, v49);
          v55 = sub_1CA0AA594((uint64_t)v45);
          v57 = v56 & 1;
          v50 = v70;
          if ((v70 & 1) != v57)
            goto LABEL_85;
          v51 = v55;
        }
        v26 = v74;
LABEL_71:
        v69 = v77;
        if ((v50 & 1) != 0)
        {
          *(_QWORD *)(v77[7] + 8 * v51) = v48;
        }
        else
        {
          v77[(v51 >> 6) + 8] |= 1 << v51;
          v58 = 8 * v51;
          *(_QWORD *)(v77[6] + v58) = v45;
          *(_QWORD *)(v77[7] + v58) = v48;
          v59 = v77[2];
          v15 = __OFADD__(v59, 1);
          v60 = v59 + 1;
          if (v15)
            goto LABEL_84;
          v77[2] = v60;
          v61 = v45;
        }

        swift_bridgeObjectRelease();
        v34 = v39;
        goto LABEL_38;
      }
LABEL_39:

      v38 = v33;
      v34 = v39;
    }
    if (v34)
    {
      v39 = (v34 - 1) & v34;
      v40 = __clz(__rbit64(v34)) | (v38 << 6);
      v33 = v38;
      goto LABEL_60;
    }
    v42 = v38 + 1;
    if (__OFADD__(v38, 1))
      goto LABEL_81;
    if (v42 >= v72)
      goto LABEL_77;
    v43 = *(_QWORD *)(v73 + 8 * v42);
    v33 = v38 + 1;
    if (v43)
      goto LABEL_59;
    v33 = v38 + 2;
    if (v38 + 2 >= v72)
      goto LABEL_77;
    v43 = *(_QWORD *)(v73 + 8 * v33);
    if (v43)
      goto LABEL_59;
    v33 = v38 + 3;
    if (v38 + 3 >= v72)
      goto LABEL_77;
    v43 = *(_QWORD *)(v73 + 8 * v33);
    if (v43)
      goto LABEL_59;
    v33 = v38 + 4;
    if (v38 + 4 >= v72)
      goto LABEL_77;
    v43 = *(_QWORD *)(v73 + 8 * v33);
    if (v43)
    {
LABEL_59:
      v39 = (v43 - 1) & v43;
      v40 = __clz(__rbit64(v43)) + (v33 << 6);
LABEL_60:
      v41 = *(id *)(*(_QWORD *)(v22 + 48) + 8 * v40);
      if (!v41)
        goto LABEL_77;
      goto LABEL_61;
    }
    v44 = v38 + 5;
    while (v72 != v44)
    {
      v43 = *(_QWORD *)(v73 + 8 * v44++);
      if (v43)
      {
        v33 = v44 - 1;
        goto LABEL_59;
      }
    }
LABEL_77:
    sub_1CA0B6A14();
    swift_bridgeObjectRelease();

    v6 = v64;
    a2 = v65;
    v5 = v67;
    v12 = v68;
    if (v11)
      continue;
    break;
  }
LABEL_6:
  v15 = __OFADD__(v7++, 1);
  if (!v15)
  {
    if (v7 >= v76)
      goto LABEL_79;
    v16 = *(_QWORD *)(v75 + 8 * v7);
    if (v16)
      goto LABEL_16;
    v17 = v7 + 1;
    if (v7 + 1 >= v76)
      goto LABEL_79;
    v16 = *(_QWORD *)(v75 + 8 * v17);
    if (v16)
      goto LABEL_15;
    v17 = v7 + 2;
    if (v7 + 2 >= v76)
      goto LABEL_79;
    v16 = *(_QWORD *)(v75 + 8 * v17);
    if (v16)
      goto LABEL_15;
    v17 = v7 + 3;
    if (v7 + 3 >= v76)
    {
LABEL_79:
      swift_release();
      type metadata accessor for MADistribution();
      result = swift_allocObject();
      *(_OWORD *)(result + 32) = 0u;
      *(_OWORD *)(result + 48) = 0u;
      *(_OWORD *)(result + 64) = 0u;
      *(_OWORD *)(result + 80) = 0u;
      *(_OWORD *)(result + 96) = 0u;
      *(_OWORD *)(result + 112) = 0u;
      *(_OWORD *)(result + 128) = 0u;
      *(_OWORD *)(result + 144) = 0u;
      *(_OWORD *)(result + 160) = 0u;
      *(_BYTE *)(result + 176) = 1;
      *(_OWORD *)(result + 184) = 0u;
      *(_OWORD *)(result + 200) = 0u;
      *(_OWORD *)(result + 216) = 0u;
      *(_QWORD *)(result + 16) = v12;
      *(_QWORD *)(result + 24) = v69;
      return result;
    }
    v16 = *(_QWORD *)(v75 + 8 * v17);
    if (!v16)
    {
      while (1)
      {
        v7 = v17 + 1;
        if (__OFADD__(v17, 1))
          goto LABEL_82;
        if (v7 >= v76)
          goto LABEL_79;
        v16 = *(_QWORD *)(v75 + 8 * v7);
        ++v17;
        if (v16)
          goto LABEL_16;
      }
    }
LABEL_15:
    v7 = v17;
LABEL_16:
    v11 = (v16 - 1) & v16;
    v14 = __clz(__rbit64(v16)) + (v7 << 6);
    goto LABEL_17;
  }
  __break(1u);
LABEL_81:
  __break(1u);
LABEL_82:
  __break(1u);
LABEL_83:
  __break(1u);
LABEL_84:
  __break(1u);
LABEL_85:
  sub_1CA0B6A1C();
  result = sub_1CA1F1360();
  __break(1u);
  return result;
}

uint64_t sub_1CA117370(unint64_t a1)
{
  unint64_t v1;
  int64_t v2;
  uint64_t k;
  uint64_t m;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int64_t v12;
  unint64_t v13;
  unint64_t v14;
  BOOL v15;
  unint64_t v16;
  int64_t v17;
  uint64_t v18;
  void *v19;
  uint64_t v20;
  unint64_t v21;
  id v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  int64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  int64_t v32;
  void *v33;
  int64_t v34;
  uint64_t v35;
  unint64_t v36;
  unint64_t v37;
  int64_t v38;
  int64_t v39;
  id v40;
  uint64_t v41;
  id v42;
  int64_t v43;
  id v44;
  uint64_t v45;
  unint64_t v46;
  char v47;
  unint64_t v48;
  uint64_t inited;
  unint64_t v50;
  uint64_t v51;
  id v52;
  uint64_t v53;
  uint64_t i;
  void *v55;
  uint64_t v56;
  unint64_t v57;
  uint64_t v58;
  id v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t j;
  void *v63;
  id v64;
  uint64_t v65;
  char v66;
  uint64_t v67;
  unint64_t v68;
  char v69;
  id v70;
  unint64_t v71;
  char isUniquelyReferenced_nonNull_native;
  char v73;
  unint64_t v74;
  uint64_t v75;
  _BOOL8 v76;
  uint64_t v77;
  char v78;
  unint64_t v79;
  char v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t result;
  char *v88;
  uint64_t v89;
  int64_t v90;
  uint64_t v91;
  unint64_t v92;
  int64_t v93;
  unint64_t v94;
  unint64_t v95;
  uint64_t v96;
  unint64_t v97;
  uint64_t v98;
  unint64_t v99;
  int64_t v100;
  uint64_t v101;
  int64_t v102;
  _QWORD *v103;
  uint64_t v104;
  unint64_t v105;
  uint64_t v106;
  void *v107;
  uint64_t v108;
  id v109;
  unint64_t v110;
  uint64_t v111;
  unint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  int64_t v116;
  int64_t v117;

  v1 = a1;
  v113 = MEMORY[0x1E0DEE9D8];
  v97 = a1 >> 62;
  if (!(a1 >> 62))
  {
    v2 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain();
    if (v2)
      goto LABEL_3;
LABEL_15:
    swift_bridgeObjectRelease();
    if (v113 < 0 || (v113 & 0x4000000000000000) != 0)
      goto LABEL_129;
    v5 = *(_QWORD *)(v113 + 16);
LABEL_18:
    swift_release();
    if (v5)
      goto LABEL_128;
    v6 = sub_1CA117E70();
    v7 = (_QWORD *)MEMORY[0x1E0DEE9E0];
    v8 = *(_QWORD *)(v6 + 16);
    v9 = *(_QWORD *)(v8 + 64);
    v89 = v8 + 64;
    v10 = 1 << *(_BYTE *)(v8 + 32);
    if (v10 < 64)
      v11 = ~(-1 << v10);
    else
      v11 = -1;
    v112 = MEMORY[0x1E0DEE9E0];
    v105 = v11 & v9;
    v95 = v1 & 0xC000000000000001;
    v88 = (char *)(v1 + 32);
    v90 = (unint64_t)(v10 + 63) >> 6;
    v91 = v1 & 0xFFFFFFFFFFFFFF8;
    v98 = v8;
    swift_bridgeObjectRetain();
    v12 = 0;
    v93 = v2;
    v94 = v1;
    v13 = v105;
    if (!v105)
      goto LABEL_24;
LABEL_23:
    v106 = (v13 - 1) & v13;
    v14 = __clz(__rbit64(v13)) | (v12 << 6);
LABEL_35:
    v18 = 8 * v14;
    v19 = *(void **)(*(_QWORD *)(v98 + 48) + v18);
    v20 = *(_QWORD *)(*(_QWORD *)(v98 + 56) + v18);
    v111 = MEMORY[0x1E0DEE9E8];
    v107 = v19;
    if (v2)
    {
      v21 = v20 & 0xC000000000000001;
      v96 = v20 + 56;
      swift_bridgeObjectRetain();
      v22 = v19;
      swift_bridgeObjectRetain();
      v23 = 0;
      v24 = 0;
      v102 = v12;
      v103 = v7;
      v101 = v20;
      v92 = v20 & 0xC000000000000001;
      while (1)
      {
        if (v95)
        {
          v25 = MEMORY[0x1CAA4A7A4](v24, v1);
        }
        else
        {
          if (v24 >= *(_QWORD *)(v91 + 16))
            goto LABEL_123;
          v25 = *(_QWORD *)&v88[8 * v24];
          swift_retain();
        }
        v100 = v24;
        if (__OFADD__(v24, 1))
          goto LABEL_121;
        v99 = v24 + 1;
        v104 = v23;
        if (v21)
        {
          swift_bridgeObjectRetain();
          sub_1CA1F0F64();
          sub_1CA0B6A1C();
          sub_1CA0C0614();
          sub_1CA1F0CC4();
          v26 = v113;
          v108 = v114;
          v28 = v115;
          v27 = v116;
          v2 = v117;
        }
        else
        {
          v29 = -1 << *(_BYTE *)(v20 + 32);
          v28 = ~v29;
          v30 = -v29;
          if (v30 < 64)
            v31 = ~(-1 << v30);
          else
            v31 = -1;
          v2 = v31 & *(_QWORD *)(v20 + 56);
          swift_bridgeObjectRetain();
          v26 = v20;
          v27 = 0;
          v108 = v96;
        }
        v32 = (unint64_t)(v28 + 64) >> 6;
        if (v26 < 0)
        {
LABEL_49:
          v33 = (void *)sub_1CA1F0FD0();
          if (!v33)
            goto LABEL_78;
          v109 = v33;
          sub_1CA0B6A1C();
          swift_unknownObjectRetain();
          swift_dynamicCast();
          v1 = v110;
          swift_unknownObjectRelease();
          v34 = v27;
          v35 = v2;
          if (!v1)
            goto LABEL_78;
          goto LABEL_64;
        }
        while (1)
        {
          if (v2)
          {
            v35 = (v2 - 1) & v2;
            v36 = __clz(__rbit64(v2)) | (v27 << 6);
            v34 = v27;
          }
          else
          {
            v34 = v27 + 1;
            if (__OFADD__(v27, 1))
            {
              __break(1u);
LABEL_121:
              __break(1u);
LABEL_122:
              __break(1u);
LABEL_123:
              __break(1u);
LABEL_124:
              __break(1u);
              goto LABEL_125;
            }
            if (v34 >= v32)
              goto LABEL_78;
            v37 = *(_QWORD *)(v108 + 8 * v34);
            if (!v37)
            {
              v38 = v27 + 2;
              if (v27 + 2 >= v32)
                goto LABEL_78;
              v37 = *(_QWORD *)(v108 + 8 * v38);
              if (v37)
                goto LABEL_61;
              v38 = v27 + 3;
              if (v27 + 3 >= v32)
                goto LABEL_78;
              v37 = *(_QWORD *)(v108 + 8 * v38);
              if (v37)
              {
LABEL_61:
                v34 = v38;
              }
              else
              {
                v34 = v27 + 4;
                if (v27 + 4 >= v32)
                  goto LABEL_78;
                v37 = *(_QWORD *)(v108 + 8 * v34);
                if (!v37)
                {
                  v39 = v27 + 5;
                  while (v32 != v39)
                  {
                    v37 = *(_QWORD *)(v108 + 8 * v39++);
                    if (v37)
                    {
                      v34 = v39 - 1;
                      goto LABEL_62;
                    }
                  }
LABEL_78:
                  swift_bridgeObjectRelease();
                  swift_release();
                  sub_1CA0B6A14();
                  v2 = v93;
                  v1 = v94;
                  v12 = v102;
                  v7 = v103;
                  v19 = v107;
                  v23 = v104;
                  v43 = v100;
LABEL_79:
                  swift_bridgeObjectRelease();
                  if (v97)
                    goto LABEL_76;
LABEL_80:
                  if (v43 == *(_QWORD *)(v91 + 16))
                    goto LABEL_81;
LABEL_77:

LABEL_115:
                  swift_bridgeObjectRelease();
                  v13 = v106;
                  if (v106)
                    goto LABEL_23;
LABEL_24:
                  v15 = __OFADD__(v12++, 1);
                  if (v15)
                    goto LABEL_122;
                  if (v12 >= v90)
                    goto LABEL_119;
                  v16 = *(_QWORD *)(v89 + 8 * v12);
                  if (!v16)
                  {
                    v17 = v12 + 1;
                    if (v12 + 1 >= v90)
                      goto LABEL_119;
                    v16 = *(_QWORD *)(v89 + 8 * v17);
                    if (v16)
                      goto LABEL_33;
                    v17 = v12 + 2;
                    if (v12 + 2 >= v90)
                      goto LABEL_119;
                    v16 = *(_QWORD *)(v89 + 8 * v17);
                    if (v16)
                      goto LABEL_33;
                    v17 = v12 + 3;
                    if (v12 + 3 >= v90)
                    {
LABEL_119:
                      swift_release();
                      v111 = MEMORY[0x1E0DEE9E8];
                      v85 = swift_bridgeObjectRetain();
                      sub_1CA1154B4(v85, (uint64_t)&v111, (uint64_t *)&v112);
                      swift_bridgeObjectRelease();
                      swift_release();
                      v86 = v111;
                      swift_bridgeObjectRelease();
                      swift_bridgeObjectRelease();
                      return v86;
                    }
                    v16 = *(_QWORD *)(v89 + 8 * v17);
                    if (v16)
                    {
LABEL_33:
                      v12 = v17;
                      goto LABEL_34;
                    }
                    while (1)
                    {
                      v12 = v17 + 1;
                      if (__OFADD__(v17, 1))
                        break;
                      if (v12 >= v90)
                        goto LABEL_119;
                      v16 = *(_QWORD *)(v89 + 8 * v12);
                      ++v17;
                      if (v16)
                        goto LABEL_34;
                    }
LABEL_125:
                    __break(1u);
LABEL_126:
                    __break(1u);
LABEL_127:
                    __break(1u);
LABEL_128:
                    __break(1u);
LABEL_129:
                    swift_bridgeObjectRetain();
                    v5 = sub_1CA1F1234();
                    swift_release();
                    goto LABEL_18;
                  }
LABEL_34:
                  v106 = (v16 - 1) & v16;
                  v14 = __clz(__rbit64(v16)) + (v12 << 6);
                  goto LABEL_35;
                }
              }
            }
LABEL_62:
            v35 = (v37 - 1) & v37;
            v36 = __clz(__rbit64(v37)) + (v34 << 6);
          }
          v1 = (unint64_t)*(id *)(*(_QWORD *)(v26 + 48) + 8 * v36);
          if (!v1)
            goto LABEL_78;
LABEL_64:
          if (((*(uint64_t (**)(unint64_t))(*(_QWORD *)v25 + 248))(v1) & 1) != 0)
            break;

          v27 = v34;
          v2 = v35;
          if (v26 < 0)
            goto LABEL_49;
        }
        v40 = (id)v1;
        v41 = sub_1CA1F0E80();

        v23 = v41 ^ v104;
        v42 = v40;
        sub_1CA0BDD74(&v110, v42);

        swift_release();
        sub_1CA0B6A14();
        v24 = v99;
        v2 = v93;
        v1 = v94;
        v12 = v102;
        v7 = v103;
        v19 = v107;
        v20 = v101;
        v21 = v92;
        if (v99 == v93)
        {
          swift_bridgeObjectRelease();
          v43 = v93;
          goto LABEL_79;
        }
      }
    }
    v44 = v19;
    v23 = 0;
    v43 = 0;
    if (!v97)
      goto LABEL_80;
LABEL_76:
    swift_bridgeObjectRetain();
    v45 = sub_1CA1F1234();
    swift_bridgeObjectRelease();
    if (v43 != v45)
      goto LABEL_77;
LABEL_81:
    if (v7[2])
    {
      v46 = sub_1CA0AA68C(v23);
      if ((v47 & 1) != 0)
      {
        v48 = *(_QWORD *)(v7[7] + 8 * v46);
        swift_bridgeObjectRetain();
        swift_bridgeObjectRelease();
        __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_1ED852A58);
        inited = swift_initStackObject();
        *(_OWORD *)(inited + 16) = xmmword_1CA1F9520;
        *(_QWORD *)(inited + 32) = v19;
        v110 = inited;
        sub_1CA1F0B14();
        v50 = v110;
        v110 = v48;
        if (v50 >> 62)
        {
          v70 = v19;
          v51 = sub_1CA1F1234();
          if (v51)
            goto LABEL_85;
        }
        else
        {
          v51 = *(_QWORD *)((v50 & 0xFFFFFFFFFFFFF8) + 0x10);
          v52 = v19;
          if (v51)
          {
LABEL_85:
            if (v51 < 1)
              goto LABEL_126;
            v53 = v23;
            if ((v50 & 0xC000000000000001) != 0)
            {
              for (i = 0; i != v51; ++i)
              {
                v55 = (void *)MEMORY[0x1CAA4A7A4](i, v50);
                sub_1CA0BDD74(&v109, v55);

              }
            }
            else
            {
              for (j = 0; j != v51; ++j)
              {
                v63 = *(void **)(v50 + 8 * j + 32);
                sub_1CA0BDD74(&v109, v63);

              }
            }
LABEL_105:
            swift_bridgeObjectRelease();
            v71 = v110;
            isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
            v110 = (unint64_t)v7;
            v74 = sub_1CA0AA68C(v53);
            v75 = v7[2];
            v76 = (v73 & 1) == 0;
            v77 = v75 + v76;
            if (__OFADD__(v75, v76))
              goto LABEL_124;
            v78 = v73;
            if (v7[3] < v77)
            {
              sub_1CA0EE1FC(v77, isUniquelyReferenced_nonNull_native);
              v79 = sub_1CA0AA68C(v53);
              if ((v78 & 1) != (v80 & 1))
                goto LABEL_131;
              v74 = v79;
              v7 = (_QWORD *)v110;
              if ((v78 & 1) == 0)
                goto LABEL_109;
LABEL_113:
              v84 = v7[7];
              swift_bridgeObjectRelease();
              *(_QWORD *)(v84 + 8 * v74) = v71;
              goto LABEL_114;
            }
            if ((isUniquelyReferenced_nonNull_native & 1) != 0)
            {
              v7 = (_QWORD *)v110;
              if ((v73 & 1) != 0)
                goto LABEL_113;
            }
            else
            {
              sub_1CA0F0FE0();
              v7 = (_QWORD *)v110;
              if ((v78 & 1) != 0)
                goto LABEL_113;
            }
LABEL_109:
            v7[(v74 >> 6) + 8] |= 1 << v74;
            v81 = 8 * v74;
            *(_QWORD *)(v7[6] + v81) = v53;
            *(_QWORD *)(v7[7] + v81) = v71;
            v82 = v7[2];
            v15 = __OFADD__(v82, 1);
            v83 = v82 + 1;
            if (v15)
              goto LABEL_127;
            v7[2] = v83;
LABEL_114:

            goto LABEL_115;
          }
        }
        v53 = v23;
        goto LABEL_105;
      }
    }
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_1ED852A58);
    v56 = swift_initStackObject();
    *(_OWORD *)(v56 + 16) = xmmword_1CA1F9520;
    *(_QWORD *)(v56 + 32) = v19;
    v110 = v56;
    sub_1CA1F0B14();
    v57 = v110;
    if (v110 >> 62)
    {
      v64 = v19;
      swift_bridgeObjectRetain();
      v65 = sub_1CA1F1234();
      swift_bridgeObjectRelease();
      if (v65)
        goto LABEL_92;
    }
    else
    {
      v58 = *(_QWORD *)((v110 & 0xFFFFFFFFFFFFF8) + 0x10);
      v59 = v19;
      if (v58)
      {
LABEL_92:
        sub_1CA124BC8(v57);
        v61 = v60;
LABEL_102:
        swift_bridgeObjectRelease();
        v66 = swift_isUniquelyReferenced_nonNull_native();
        v110 = (unint64_t)v7;
        sub_1CA0AEA80(v61, v23, v66);
        v7 = (_QWORD *)v110;
        swift_bridgeObjectRelease();
        v67 = v111;
        v68 = v112;
        v69 = swift_isUniquelyReferenced_nonNull_native();
        v110 = v68;
        sub_1CA0AEA80(v67, v23, v69);
        v112 = v110;

        goto LABEL_115;
      }
    }
    v61 = MEMORY[0x1E0DEE9E8];
    goto LABEL_102;
  }
  swift_bridgeObjectRetain();
  v2 = sub_1CA1F1234();
  if (!v2)
    goto LABEL_15;
LABEL_3:
  if (v2 >= 1)
  {
    if ((v1 & 0xC000000000000001) != 0)
    {
      for (k = 0; k != v2; ++k)
      {
        MEMORY[0x1CAA4A7A4](k, v1);
        type metadata accessor for MASlices();
        if (swift_dynamicCastClass())
        {
          sub_1CA1F10CC();
          sub_1CA1F10FC();
          sub_1CA1F1108();
          sub_1CA1F10D8();
        }
        else
        {
          swift_unknownObjectRelease();
        }
      }
    }
    else
    {
      type metadata accessor for MASlices();
      for (m = 0; m != v2; ++m)
      {
        if (swift_dynamicCastClass())
        {
          swift_retain();
          sub_1CA1F10CC();
          sub_1CA1F10FC();
          sub_1CA1F1108();
          sub_1CA1F10D8();
        }
      }
    }
    goto LABEL_15;
  }
  __break(1u);
LABEL_131:
  result = sub_1CA1F1360();
  __break(1u);
  return result;
}

uint64_t sub_1CA117E70()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  uint64_t v8;
  void *v9;
  uint64_t v10;
  _QWORD *v11;
  void *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  uint64_t v24;
  id v25;
  int64_t v26;
  unint64_t v27;
  uint64_t v28;
  id v29;
  unint64_t v30;
  char v31;
  unint64_t v32;
  uint64_t v33;
  id v34;
  void *v35;
  unint64_t v36;
  char v37;
  char v38;
  unint64_t v39;
  uint64_t v40;
  _BOOL8 v41;
  uint64_t v42;
  char v43;
  unint64_t v44;
  char v45;
  uint64_t v46;
  uint64_t v47;
  BOOL v48;
  uint64_t v49;
  id v50;
  uint64_t inited;
  unint64_t v52;
  uint64_t v53;
  id v54;
  id v55;
  uint64_t v56;
  uint64_t v57;
  id v58;
  id v59;
  uint64_t v60;
  char isUniquelyReferenced_nonNull_native;
  char v62;
  unint64_t v63;
  uint64_t v64;
  _BOOL8 v65;
  uint64_t v66;
  char v67;
  unint64_t v68;
  char v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  id v74;
  id v75;
  char v76;
  char v77;
  unint64_t v78;
  uint64_t v79;
  _BOOL8 v80;
  uint64_t v81;
  char v82;
  unint64_t v83;
  char v84;
  _QWORD *v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  id v89;
  uint64_t result;
  unint64_t v91;
  int64_t v92;
  uint64_t v93;
  void *v94;
  void *v95;
  unint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  unint64_t v107;

  v1 = -1 << *(_BYTE *)(*(_QWORD *)(v0 + 16) + 32);
  v2 = *(_QWORD *)(v0 + 16);
  v3 = *(_QWORD *)(v2 + 64);
  v4 = ~v1;
  v5 = -v1;
  v97 = v2;
  v98 = v2 + 64;
  if (v5 < 64)
    v6 = ~(-1 << v5);
  else
    v6 = -1;
  v99 = v4;
  v100 = 0;
  v101 = v6 & v3;
  v102 = 0;
  swift_bridgeObjectRetain();
  sub_1CA115894();
  if (!v7)
  {
    v11 = (_QWORD *)MEMORY[0x1E0DEE9E0];
    v91 = MEMORY[0x1E0DEE9E0];
LABEL_78:
    sub_1CA0B6A14();
    type metadata accessor for MADistribution();
    result = swift_allocObject();
    *(_OWORD *)(result + 32) = 0u;
    *(_OWORD *)(result + 48) = 0u;
    *(_OWORD *)(result + 64) = 0u;
    *(_OWORD *)(result + 80) = 0u;
    *(_OWORD *)(result + 96) = 0u;
    *(_OWORD *)(result + 112) = 0u;
    *(_OWORD *)(result + 128) = 0u;
    *(_OWORD *)(result + 144) = 0u;
    *(_OWORD *)(result + 160) = 0u;
    *(_BYTE *)(result + 176) = 1;
    *(_OWORD *)(result + 184) = 0u;
    *(_OWORD *)(result + 200) = 0u;
    *(_OWORD *)(result + 216) = 0u;
    *(_QWORD *)(result + 16) = v11;
    *(_QWORD *)(result + 24) = v91;
    return result;
  }
  v9 = v7;
  v10 = v8;
  v11 = (_QWORD *)MEMORY[0x1E0DEE9E0];
  v91 = MEMORY[0x1E0DEE9E0];
LABEL_7:
  if ((v10 & 0xC000000000000001) != 0)
  {
    sub_1CA1F0F64();
    sub_1CA0B6A1C();
    sub_1CA0C0614();
    sub_1CA1F0CC4();
    v10 = v103;
    v93 = v104;
    v14 = v105;
    v15 = v106;
    v16 = v107;
  }
  else
  {
    v15 = 0;
    v17 = -1 << *(_BYTE *)(v10 + 32);
    v93 = v10 + 56;
    v14 = ~v17;
    v18 = -v17;
    if (v18 < 64)
      v19 = ~(-1 << v18);
    else
      v19 = -1;
    v16 = v19 & *(_QWORD *)(v10 + 56);
  }
  v92 = (unint64_t)(v14 + 64) >> 6;
  v94 = v9;
  while (1)
  {
    v21 = v15;
    if (v10 < 0)
    {
      v24 = sub_1CA1F0FD0();
      if (!v24)
        goto LABEL_6;
      v95 = (void *)v24;
      sub_1CA0B6A1C();
      swift_unknownObjectRetain();
      swift_dynamicCast();
      v25 = (id)v96;
      swift_unknownObjectRelease();
      if (!v25)
        goto LABEL_6;
    }
    else
    {
      if (v16)
      {
        v22 = __clz(__rbit64(v16));
        v16 &= v16 - 1;
        v23 = v22 | (v15 << 6);
      }
      else
      {
        v26 = v15 + 1;
        if (__OFADD__(v15, 1))
          goto LABEL_81;
        if (v26 >= v92)
          goto LABEL_6;
        v27 = *(_QWORD *)(v93 + 8 * v26);
        ++v15;
        if (!v27)
        {
          v15 = v21 + 2;
          if (v21 + 2 >= v92)
            goto LABEL_6;
          v27 = *(_QWORD *)(v93 + 8 * v15);
          if (!v27)
          {
            v15 = v21 + 3;
            if (v21 + 3 >= v92)
              goto LABEL_6;
            v27 = *(_QWORD *)(v93 + 8 * v15);
            if (!v27)
            {
              v15 = v21 + 4;
              if (v21 + 4 >= v92)
                goto LABEL_6;
              v27 = *(_QWORD *)(v93 + 8 * v15);
              if (!v27)
              {
                v28 = v21 + 5;
                while (v92 != v28)
                {
                  v27 = *(_QWORD *)(v93 + 8 * v28++);
                  if (v27)
                  {
                    v15 = v28 - 1;
                    goto LABEL_36;
                  }
                }
LABEL_6:
                sub_1CA0B6A14();

                sub_1CA115894();
                v9 = v12;
                v10 = v13;
                if (!v12)
                  goto LABEL_78;
                goto LABEL_7;
              }
            }
          }
        }
LABEL_36:
        v16 = (v27 - 1) & v27;
        v23 = __clz(__rbit64(v27)) + (v15 << 6);
      }
      v25 = *(id *)(*(_QWORD *)(v10 + 48) + 8 * v23);
      if (!v25)
        goto LABEL_6;
    }
    if (!v11[2])
      goto LABEL_50;
    v29 = v25;
    v30 = sub_1CA0AA594((uint64_t)v29);
    if ((v31 & 1) == 0)
    {

LABEL_50:
      __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_1ED852A58);
      inited = swift_initStackObject();
      *(_OWORD *)(inited + 16) = xmmword_1CA1F9520;
      *(_QWORD *)(inited + 32) = v9;
      v96 = inited;
      sub_1CA1F0B14();
      v52 = v96;
      if (v96 >> 62)
      {
        v58 = v25;
        v59 = v9;
        swift_bridgeObjectRetain();
        v60 = sub_1CA1F1234();
        swift_bridgeObjectRelease();
        if (v60)
          goto LABEL_52;
      }
      else
      {
        v53 = *(_QWORD *)((v96 & 0xFFFFFFFFFFFFF8) + 0x10);
        v54 = v25;
        v55 = v9;
        if (v53)
        {
LABEL_52:
          sub_1CA124BC8(v52);
          v57 = v56;
          goto LABEL_55;
        }
      }
      v57 = MEMORY[0x1E0DEE9E8];
LABEL_55:
      swift_bridgeObjectRelease();
      isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      v96 = (unint64_t)v11;
      v63 = sub_1CA0AA594((uint64_t)v25);
      v64 = v11[2];
      v65 = (v62 & 1) == 0;
      v66 = v64 + v65;
      if (__OFADD__(v64, v65))
        goto LABEL_82;
      v67 = v62;
      if (v11[3] < v66)
      {
        sub_1CA0EBB68(v66, isUniquelyReferenced_nonNull_native);
        v68 = sub_1CA0AA594((uint64_t)v25);
        if ((v67 & 1) != (v69 & 1))
          goto LABEL_86;
        v63 = v68;
        v11 = (_QWORD *)v96;
        if ((v67 & 1) == 0)
          goto LABEL_64;
LABEL_62:
        v70 = v11[7];
        swift_bridgeObjectRelease();
        *(_QWORD *)(v70 + 8 * v63) = v57;
LABEL_66:

        swift_bridgeObjectRelease();
        v75 = v25;
        v76 = swift_isUniquelyReferenced_nonNull_native();
        v96 = v91;
        v78 = sub_1CA0AA594((uint64_t)v75);
        v79 = *(_QWORD *)(v91 + 16);
        v80 = (v77 & 1) == 0;
        v81 = v79 + v80;
        if (__OFADD__(v79, v80))
          goto LABEL_83;
        v82 = v77;
        if (*(_QWORD *)(v91 + 24) >= v81)
        {
          if ((v76 & 1) == 0)
            sub_1CA0EF5C0();
        }
        else
        {
          sub_1CA0EB588(v81, v76);
          v83 = sub_1CA0AA594((uint64_t)v75);
          if ((v82 & 1) != (v84 & 1))
            goto LABEL_86;
          v78 = v83;
        }
        v9 = v94;
        v85 = (_QWORD *)v96;
        v91 = v96;
        if ((v82 & 1) != 0)
        {
          *(_QWORD *)(*(_QWORD *)(v96 + 56) + 8 * v78) = 0x3FF0000000000000;
        }
        else
        {
          *(_QWORD *)(v96 + 8 * (v78 >> 6) + 64) |= 1 << v78;
          v86 = 8 * v78;
          *(_QWORD *)(v85[6] + v86) = v75;
          *(_QWORD *)(v85[7] + v86) = 0x3FF0000000000000;
          v87 = v85[2];
          v48 = __OFADD__(v87, 1);
          v88 = v87 + 1;
          if (v48)
            goto LABEL_85;
          v85[2] = v88;
          v89 = v75;
        }

        goto LABEL_16;
      }
      if ((isUniquelyReferenced_nonNull_native & 1) != 0)
      {
        v11 = (_QWORD *)v96;
        if ((v62 & 1) != 0)
          goto LABEL_62;
      }
      else
      {
        sub_1CA0EF944();
        v11 = (_QWORD *)v96;
        if ((v67 & 1) != 0)
          goto LABEL_62;
      }
LABEL_64:
      v11[(v63 >> 6) + 8] |= 1 << v63;
      v71 = 8 * v63;
      *(_QWORD *)(v11[6] + v71) = v25;
      *(_QWORD *)(v11[7] + v71) = v57;
      v72 = v11[2];
      v48 = __OFADD__(v72, 1);
      v73 = v72 + 1;
      if (v48)
        goto LABEL_84;
      v11[2] = v73;
      v74 = v25;
      goto LABEL_66;
    }
    v32 = *(_QWORD *)(v11[7] + 8 * v30);
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_1ED852A58);
    v33 = swift_initStackObject();
    *(_OWORD *)(v33 + 16) = xmmword_1CA1F9520;
    *(_QWORD *)(v33 + 32) = v9;
    v96 = v33;
    sub_1CA1F0B14();
    v96 = v32;
    v34 = v9;
    swift_bridgeObjectRetain();
    sub_1CA0BDD74(&v95, v34);
    v35 = v95;
    swift_bridgeObjectRelease();

    v36 = v96;
    v37 = swift_isUniquelyReferenced_nonNull_native();
    v96 = (unint64_t)v11;
    v39 = sub_1CA0AA594((uint64_t)v29);
    v40 = v11[2];
    v41 = (v38 & 1) == 0;
    v42 = v40 + v41;
    if (__OFADD__(v40, v41))
      break;
    v43 = v38;
    if (v11[3] >= v42)
    {
      if ((v37 & 1) == 0)
        sub_1CA0EF944();
    }
    else
    {
      sub_1CA0EBB68(v42, v37);
      v44 = sub_1CA0AA594((uint64_t)v29);
      if ((v43 & 1) != (v45 & 1))
        goto LABEL_86;
      v39 = v44;
    }
    v9 = v94;
    v11 = (_QWORD *)v96;
    if ((v43 & 1) != 0)
    {
      v20 = *(_QWORD *)(v96 + 56);
      swift_bridgeObjectRelease();
      *(_QWORD *)(v20 + 8 * v39) = v36;
    }
    else
    {
      *(_QWORD *)(v96 + 8 * (v39 >> 6) + 64) |= 1 << v39;
      v46 = 8 * v39;
      *(_QWORD *)(v11[6] + v46) = v29;
      *(_QWORD *)(v11[7] + v46) = v36;
      v47 = v11[2];
      v48 = __OFADD__(v47, 1);
      v49 = v47 + 1;
      if (v48)
        goto LABEL_80;
      v11[2] = v49;
      v50 = v29;
    }

LABEL_16:
    swift_bridgeObjectRelease();
  }
  __break(1u);
LABEL_80:
  __break(1u);
LABEL_81:
  __break(1u);
LABEL_82:
  __break(1u);
LABEL_83:
  __break(1u);
LABEL_84:
  __break(1u);
LABEL_85:
  __break(1u);
LABEL_86:
  sub_1CA0B6A1C();
  result = sub_1CA1F1360();
  __break(1u);
  return result;
}

uint64_t sub_1CA118610(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  int64_t v7;
  int64_t v8;
  uint64_t v9;
  id v10;
  unint64_t v11;
  char v12;
  unint64_t v13;
  unint64_t v14;
  int64_t v15;
  unint64_t v16;
  int64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;
  uint64_t v28;
  id v29;
  int64_t v30;
  unint64_t v31;
  uint64_t v32;
  uint64_t v33;
  id v34;
  unint64_t v35;
  char v36;
  unint64_t v37;
  id v38;
  char v39;
  char v40;
  unint64_t v41;
  uint64_t v42;
  _BOOL8 v43;
  uint64_t v44;
  char v45;
  unint64_t v46;
  char v47;
  id v48;
  char isUniquelyReferenced_nonNull_native;
  char v50;
  unint64_t v51;
  uint64_t v52;
  _BOOL8 v53;
  uint64_t v54;
  unint64_t v55;
  char v56;
  int v57;
  _QWORD *v58;
  uint64_t v59;
  uint64_t v60;
  void *v61;
  uint64_t v62;
  BOOL v63;
  uint64_t v64;
  id v65;
  id v66;
  char v67;
  char v68;
  unint64_t v69;
  uint64_t v70;
  _BOOL8 v71;
  uint64_t v72;
  void *v73;
  unint64_t v74;
  char v75;
  int v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  id v80;
  char v81;
  char v82;
  uint64_t result;
  char v84;
  unint64_t v85;
  id v86;
  void *v87;
  uint64_t v88;
  int64_t v89;
  _QWORD *v90;
  char v91;
  uint64_t v92;
  char v93;
  uint64_t v94;
  int64_t v95;
  uint64_t v96;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100[7];

  v2 = *(_QWORD *)(v1 + 16);
  v3 = v2 + 64;
  v4 = 1 << *(_BYTE *)(v2 + 32);
  if (v4 < 64)
    v5 = ~(-1 << v4);
  else
    v5 = -1;
  v6 = v5 & *(_QWORD *)(v2 + 64);
  v7 = (unint64_t)(v4 + 63) >> 6;
  swift_bridgeObjectRetain();
  v8 = 0;
  v90 = (_QWORD *)MEMORY[0x1E0DEE9E0];
  v9 = MEMORY[0x1E0DEE9E0];
  v89 = v7;
LABEL_7:
  while (2)
  {
    while (2)
    {
      if (v6)
      {
        v13 = __clz(__rbit64(v6));
        v6 &= v6 - 1;
        v14 = v13 | (v8 << 6);
        if (!*(_QWORD *)(v2 + 16))
          continue;
      }
      else
      {
        v15 = v8 + 1;
        if (__OFADD__(v8, 1))
        {
          __break(1u);
LABEL_101:
          __break(1u);
LABEL_102:
          __break(1u);
LABEL_103:
          __break(1u);
          goto LABEL_104;
        }
        if (v15 >= v7)
          goto LABEL_99;
        v16 = *(_QWORD *)(v3 + 8 * v15);
        ++v8;
        if (!v16)
        {
          v8 = v15 + 1;
          if (v15 + 1 >= v7)
            goto LABEL_99;
          v16 = *(_QWORD *)(v3 + 8 * v8);
          if (!v16)
          {
            v8 = v15 + 2;
            if (v15 + 2 >= v7)
              goto LABEL_99;
            v16 = *(_QWORD *)(v3 + 8 * v8);
            if (!v16)
            {
              v8 = v15 + 3;
              if (v15 + 3 >= v7)
                goto LABEL_99;
              v16 = *(_QWORD *)(v3 + 8 * v8);
              if (!v16)
              {
                v8 = v15 + 4;
                if (v15 + 4 >= v7)
                  goto LABEL_99;
                v16 = *(_QWORD *)(v3 + 8 * v8);
                if (!v16)
                {
                  v17 = v15 + 5;
                  if (v17 >= v7)
                  {
LABEL_99:
                    swift_release();
                    type metadata accessor for MADistribution();
                    result = swift_allocObject();
                    *(_OWORD *)(result + 32) = 0u;
                    *(_OWORD *)(result + 48) = 0u;
                    *(_OWORD *)(result + 64) = 0u;
                    *(_OWORD *)(result + 80) = 0u;
                    *(_OWORD *)(result + 96) = 0u;
                    *(_OWORD *)(result + 112) = 0u;
                    *(_OWORD *)(result + 128) = 0u;
                    *(_OWORD *)(result + 144) = 0u;
                    *(_OWORD *)(result + 160) = 0u;
                    *(_BYTE *)(result + 176) = 1;
                    *(_OWORD *)(result + 184) = 0u;
                    *(_OWORD *)(result + 200) = 0u;
                    *(_OWORD *)(result + 216) = 0u;
                    *(_QWORD *)(result + 16) = v9;
                    *(_QWORD *)(result + 24) = v90;
                    return result;
                  }
                  v16 = *(_QWORD *)(v3 + 8 * v17);
                  if (!v16)
                  {
                    while (1)
                    {
                      v8 = v17 + 1;
                      if (__OFADD__(v17, 1))
                        goto LABEL_102;
                      if (v8 >= v7)
                        goto LABEL_99;
                      v16 = *(_QWORD *)(v3 + 8 * v8);
                      ++v17;
                      if (v16)
                        goto LABEL_29;
                    }
                  }
                  v8 = v17;
                }
              }
            }
          }
        }
LABEL_29:
        v6 = (v16 - 1) & v16;
        v14 = __clz(__rbit64(v16)) + (v8 << 6);
        if (!*(_QWORD *)(v2 + 16))
          continue;
      }
      break;
    }
    v10 = *(id *)(*(_QWORD *)(v2 + 48) + 8 * v14);
    v11 = sub_1CA0AA594((uint64_t)v10);
    if ((v12 & 1) == 0)
    {

      continue;
    }
    break;
  }
  v18 = *(_QWORD *)(*(_QWORD *)(v2 + 56) + 8 * v11);
  swift_bridgeObjectRetain();

  if ((v18 & 0xC000000000000001) != 0)
  {
    sub_1CA1F0F64();
    sub_1CA0B6A1C();
    sub_1CA0C0614();
    sub_1CA1F0CC4();
    v18 = v100[1];
    v96 = v100[2];
    v19 = v100[3];
    v20 = v100[4];
    v21 = v100[5];
  }
  else
  {
    v20 = 0;
    v22 = -1 << *(_BYTE *)(v18 + 32);
    v96 = v18 + 56;
    v19 = ~v22;
    v23 = -v22;
    if (v23 < 64)
      v24 = ~(-1 << v23);
    else
      v24 = -1;
    v21 = v24 & *(_QWORD *)(v18 + 56);
  }
  v95 = (unint64_t)(v19 + 64) >> 6;
  v98 = v18;
  while (2)
  {
    v92 = v9;
LABEL_37:
    v25 = v20;
    v26 = v21;
    while (1)
    {
      if (v18 < 0)
      {
        v28 = sub_1CA1F0FD0();
        if (!v28)
          goto LABEL_98;
        v99 = v28;
        sub_1CA0B6A1C();
        swift_unknownObjectRetain();
        swift_dynamicCast();
        v29 = (id)v100[0];
        swift_unknownObjectRelease();
        v20 = v25;
        v21 = v26;
        if (!v29)
          goto LABEL_98;
      }
      else
      {
        if (v26)
        {
          v21 = (v26 - 1) & v26;
          v27 = __clz(__rbit64(v26)) | (v25 << 6);
          v20 = v25;
        }
        else
        {
          v30 = v25 + 1;
          if (__OFADD__(v25, 1))
            goto LABEL_101;
          if (v30 >= v95)
            goto LABEL_98;
          v31 = *(_QWORD *)(v96 + 8 * v30);
          v20 = v25 + 1;
          if (!v31)
          {
            v20 = v25 + 2;
            if (v25 + 2 >= v95)
              goto LABEL_98;
            v31 = *(_QWORD *)(v96 + 8 * v20);
            if (!v31)
            {
              v20 = v25 + 3;
              if (v25 + 3 >= v95)
                goto LABEL_98;
              v31 = *(_QWORD *)(v96 + 8 * v20);
              if (!v31)
              {
                v20 = v25 + 4;
                if (v25 + 4 >= v95)
                  goto LABEL_98;
                v31 = *(_QWORD *)(v96 + 8 * v20);
                if (!v31)
                {
                  v32 = v25 + 5;
                  while (v95 != v32)
                  {
                    v31 = *(_QWORD *)(v96 + 8 * v32++);
                    if (v31)
                    {
                      v20 = v32 - 1;
                      v18 = v98;
                      goto LABEL_59;
                    }
                  }
LABEL_98:
                  sub_1CA0B6A14();

                  v7 = v89;
                  v3 = v2 + 64;
                  v9 = v92;
                  goto LABEL_7;
                }
              }
            }
          }
LABEL_59:
          v21 = (v31 - 1) & v31;
          v27 = __clz(__rbit64(v31)) + (v20 << 6);
        }
        v29 = *(id *)(*(_QWORD *)(v18 + 48) + 8 * v27);
        if (!v29)
          goto LABEL_98;
      }
      v33 = *(_QWORD *)(a1 + 16);
      if (*(_QWORD *)(v33 + 16))
        break;
LABEL_39:

      v25 = v20;
      v26 = v21;
      v18 = v98;
    }
    v34 = v29;
    v35 = sub_1CA0AA594((uint64_t)v34);
    if ((v36 & 1) == 0)
    {

      goto LABEL_39;
    }
    v37 = *(_QWORD *)(*(_QWORD *)(v33 + 56) + 8 * v35);
    swift_bridgeObjectRetain();

    v85 = v37;
    if (!*(_QWORD *)(v92 + 16))
      goto LABEL_76;
    v38 = v10;
    sub_1CA0AA594((uint64_t)v38);
    if ((v39 & 1) == 0)
    {

LABEL_76:
      v48 = v10;
      isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      v100[0] = v92;
      v87 = v48;
      v51 = sub_1CA0AA594((uint64_t)v48);
      v52 = *(_QWORD *)(v92 + 16);
      v53 = (v50 & 1) == 0;
      v54 = v52 + v53;
      if (__OFADD__(v52, v53))
        goto LABEL_105;
      if (*(_QWORD *)(v92 + 24) >= v54)
      {
        if ((isUniquelyReferenced_nonNull_native & 1) == 0)
        {
          v81 = v50;
          sub_1CA0EF944();
          v50 = v81;
        }
      }
      else
      {
        v93 = v50;
        sub_1CA0EBB68(v54, isUniquelyReferenced_nonNull_native);
        v55 = sub_1CA0AA594((uint64_t)v87);
        v57 = v56 & 1;
        v50 = v93;
        if ((v93 & 1) != v57)
          goto LABEL_109;
        v51 = v55;
      }
      v58 = (_QWORD *)v100[0];
      v59 = 8 * v51;
      v94 = v100[0];
      if ((v50 & 1) != 0)
      {
        v60 = *(_QWORD *)(v100[0] + 56);
        swift_bridgeObjectRelease();
        *(_QWORD *)(v60 + v59) = v85;
        v61 = v87;
      }
      else
      {
        *(_QWORD *)(v100[0] + 8 * (v51 >> 6) + 64) |= 1 << v51;
        v61 = v87;
        *(_QWORD *)(v58[6] + v59) = v87;
        *(_QWORD *)(v58[7] + v59) = v85;
        v62 = v58[2];
        v63 = __OFADD__(v62, 1);
        v64 = v62 + 1;
        if (v63)
          goto LABEL_107;
        v58[2] = v64;
        v65 = v87;
      }

      swift_bridgeObjectRelease();
      v66 = v61;
      v67 = swift_isUniquelyReferenced_nonNull_native();
      v100[0] = (uint64_t)v90;
      v88 = (uint64_t)v66;
      v69 = sub_1CA0AA594((uint64_t)v66);
      v70 = v90[2];
      v71 = (v68 & 1) == 0;
      v72 = v70 + v71;
      if (__OFADD__(v70, v71))
        goto LABEL_106;
      if (v90[3] >= v72)
      {
        if ((v67 & 1) == 0)
        {
          v82 = v68;
          sub_1CA0EF5C0();
          v68 = v82;
        }
        v18 = v98;
        v73 = (void *)v88;
      }
      else
      {
        v91 = v68;
        sub_1CA0EB588(v72, v67);
        v73 = (void *)v88;
        v74 = sub_1CA0AA594(v88);
        v76 = v75 & 1;
        v68 = v91;
        if ((v91 & 1) != v76)
          goto LABEL_109;
        v69 = v74;
        v18 = v98;
      }
      v90 = (_QWORD *)v100[0];
      if ((v68 & 1) != 0)
      {
        *(_QWORD *)(*(_QWORD *)(v100[0] + 56) + 8 * v69) = 0x3FF0000000000000;
      }
      else
      {
        *(_QWORD *)(v100[0] + 8 * (v69 >> 6) + 64) |= 1 << v69;
        v77 = 8 * v69;
        *(_QWORD *)(v90[6] + v77) = v73;
        *(_QWORD *)(v90[7] + v77) = 0x3FF0000000000000;
        v78 = v90[2];
        v63 = __OFADD__(v78, 1);
        v79 = v78 + 1;
        if (v63)
          goto LABEL_108;
        v90[2] = v79;
        v80 = v73;
      }
      v9 = v94;

      swift_bridgeObjectRelease();
      continue;
    }
    break;
  }
  v84 = swift_isUniquelyReferenced_nonNull_native();
  v100[0] = v92;
  v86 = v38;
  v41 = sub_1CA0AA594((uint64_t)v86);
  v42 = *(_QWORD *)(v92 + 16);
  v43 = (v40 & 1) == 0;
  v44 = v42 + v43;
  if (__OFADD__(v42, v43))
    goto LABEL_103;
  v45 = v40;
  if (*(_QWORD *)(v92 + 24) >= v44)
  {
    if ((v84 & 1) != 0)
    {
      if ((v40 & 1) == 0)
        goto LABEL_104;
    }
    else
    {
      sub_1CA0EF944();
      if ((v45 & 1) == 0)
        goto LABEL_104;
    }
LABEL_72:
    v99 = *(_QWORD *)(*(_QWORD *)(v100[0] + 56) + 8 * v41);
    sub_1CA0DB894(v85);
    sub_1CA122AA4(&v99, 1, v100, v41, v86);

    swift_bridgeObjectRelease();
    v92 = v100[0];

    v18 = v98;
    goto LABEL_37;
  }
  sub_1CA0EBB68(v44, v84);
  v46 = sub_1CA0AA594((uint64_t)v86);
  if ((v45 & 1) != (v47 & 1))
    goto LABEL_109;
  v41 = v46;
  if ((v45 & 1) != 0)
    goto LABEL_72;
LABEL_104:
  __break(1u);
LABEL_105:
  __break(1u);
LABEL_106:
  __break(1u);
LABEL_107:
  __break(1u);
LABEL_108:
  __break(1u);
LABEL_109:
  sub_1CA0B6A1C();
  result = sub_1CA1F1360();
  __break(1u);
  return result;
}

uint64_t sub_1CA118E2C()
{
  uint64_t v0;
  uint64_t v1;

  if (*(_QWORD *)(v0 + 56))
  {
    v1 = *(_QWORD *)(v0 + 56);
  }
  else
  {
    v1 = sub_1CA118E88(v0);
    *(_QWORD *)(v0 + 56) = v1;
    swift_retain();
    swift_release();
  }
  swift_retain();
  return v1;
}

uint64_t sub_1CA118E88(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  _QWORD *v12;
  char isUniquelyReferenced_nonNull_native;
  char v14;
  unint64_t v15;
  uint64_t v16;
  _BOOL8 v17;
  uint64_t v18;
  char v19;
  unint64_t v20;
  char v21;
  uint64_t v22;
  uint64_t v23;
  BOOL v24;
  uint64_t v25;
  id v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  _QWORD *v30;
  unint64_t v31;
  id v32;
  char v33;
  unint64_t v34;
  unint64_t v35;
  uint64_t v36;
  _BOOL8 v37;
  uint64_t v38;
  unint64_t v39;
  char v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  id v44;
  _QWORD *v45;
  unint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  int64_t v52;
  unint64_t v53;
  unint64_t v54;
  int64_t v55;
  unint64_t v56;
  int64_t v57;
  uint64_t v58;
  uint64_t v59;
  id v60;
  unint64_t v61;
  char v62;
  uint64_t v63;
  uint64_t v64;
  unint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  void *v69;
  uint64_t v70;
  unint64_t v71;
  unint64_t v72;
  int64_t v73;
  unint64_t v74;
  uint64_t v75;
  id v76;
  unint64_t v77;
  char v78;
  uint64_t v79;
  unint64_t v80;
  _QWORD *v81;
  uint64_t result;
  uint64_t v83;
  BOOL v84;
  uint64_t v85;
  uint64_t v86;
  _QWORD *v87;
  uint64_t i;
  int64_t v89;
  uint64_t v90;
  id v91;
  unint64_t v92;
  int64_t v93;
  uint64_t v94;
  unint64_t v95;
  unint64_t v96;
  _QWORD v97[6];

  v96 = MEMORY[0x1E0DEE9D8];
  v95 = MEMORY[0x1E0DEE9D8];
  v1 = *(_QWORD *)(a1 + 16);
  v2 = swift_bridgeObjectRetain();
  sub_1CA0C1F1C(v2);
  sub_1CA0B2380(v3);
  v4 = swift_bridgeObjectRetain();
  v5 = sub_1CA115C1C(v4);
  swift_bridgeObjectRelease();
  v6 = sub_1CA0C68DC(v5);
  swift_bridgeObjectRelease();
  sub_1CA0B2380(v6);
  v7 = (_QWORD *)v96;
  v93 = v96 >> 62;
  if (v96 >> 62)
    goto LABEL_22;
  v8 = *(_QWORD *)((v96 & 0xFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain();
  for (i = v1; v8; i = v1)
  {
    v9 = 0;
    v10 = (_QWORD *)MEMORY[0x1E0DEE9E0];
    while (1)
    {
      v11 = v9 + 1;
      if (__OFADD__(v9, 1))
        break;
      v12 = v7;
      v1 = (uint64_t)(id)v7[v9 + 4];
      isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      v97[0] = v10;
      v7 = v10;
      v15 = sub_1CA0AA594(v1);
      v16 = v10[2];
      v17 = (v14 & 1) == 0;
      v18 = v16 + v17;
      if (__OFADD__(v16, v17))
        goto LABEL_20;
      v19 = v14;
      if (v10[3] >= v18)
      {
        if ((isUniquelyReferenced_nonNull_native & 1) != 0)
        {
          v10 = (_QWORD *)v97[0];
          if ((v14 & 1) != 0)
            goto LABEL_4;
        }
        else
        {
          v7 = v97;
          sub_1CA0EFAF8();
          v10 = (_QWORD *)v97[0];
          if ((v19 & 1) != 0)
            goto LABEL_4;
        }
      }
      else
      {
        sub_1CA0EBE7C(v18, isUniquelyReferenced_nonNull_native);
        v7 = (_QWORD *)v97[0];
        v20 = sub_1CA0AA594(v1);
        if ((v19 & 1) != (v21 & 1))
          goto LABEL_127;
        v15 = v20;
        v10 = (_QWORD *)v97[0];
        if ((v19 & 1) != 0)
        {
LABEL_4:
          *(_QWORD *)(v10[7] + 8 * v15) = v9;
          goto LABEL_5;
        }
      }
      v10[(v15 >> 6) + 8] |= 1 << v15;
      v22 = 8 * v15;
      *(_QWORD *)(v10[6] + v22) = v1;
      *(_QWORD *)(v10[7] + v22) = v9;
      v23 = v10[2];
      v24 = __OFADD__(v23, 1);
      v25 = v23 + 1;
      if (v24)
        goto LABEL_21;
      v10[2] = v25;
      v26 = (id)v1;
LABEL_5:

      swift_bridgeObjectRelease();
      ++v9;
      v7 = v12;
      if (v11 == v8)
      {
        swift_bridgeObjectRelease();
        v1 = i;
        goto LABEL_24;
      }
    }
    __break(1u);
LABEL_20:
    __break(1u);
LABEL_21:
    __break(1u);
LABEL_22:
    swift_bridgeObjectRetain_n();
    v8 = sub_1CA1F1234();
    swift_bridgeObjectRelease();
  }
  swift_bridgeObjectRelease();
  v10 = (_QWORD *)MEMORY[0x1E0DEE9E0];
LABEL_24:
  v27 = v95;
  v91 = (id)(v95 >> 62);
  v92 = (unint64_t)v7;
  if (v95 >> 62)
    goto LABEL_118;
  v28 = *(_QWORD *)((v95 & 0xFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain();
  if (v28)
    goto LABEL_26;
  while (2)
  {
    swift_bridgeObjectRelease();
    v45 = (_QWORD *)MEMORY[0x1E0DEE9E0];
    v46 = v92;
    if (v93)
      goto LABEL_120;
LABEL_42:
    v47 = *(_QWORD *)((v46 & 0xFFFFFFFFFFFFF8) + 0x10);
    if (!v91)
      goto LABEL_43;
LABEL_121:
    swift_bridgeObjectRetain();
    v48 = sub_1CA1F1234();
    swift_bridgeObjectRelease();
LABEL_44:
    if ((unsigned __int128)(v47 * (__int128)v48) >> 64 == (v47 * v48) >> 63)
    {
      v86 = v47;
      v87 = (_QWORD *)sub_1CA0B4464(v47 * v48, 0.0);
      v49 = v1 + 64;
      v50 = 1 << *(_BYTE *)(v1 + 32);
      if (v50 < 64)
        v51 = ~(-1 << v50);
      else
        v51 = -1;
      v27 = v51 & *(_QWORD *)(v1 + 64);
      v93 = (unint64_t)(v50 + 63) >> 6;
      swift_bridgeObjectRetain();
      v52 = 0;
      while (1)
      {
        if (v27)
        {
          v53 = __clz(__rbit64(v27));
          v27 &= v27 - 1;
          v54 = v53 | (v52 << 6);
          if (!v10[2])
            continue;
          goto LABEL_66;
        }
        v55 = v52 + 1;
        if (__OFADD__(v52, 1))
          goto LABEL_114;
        if (v55 >= v93)
        {
LABEL_111:
          swift_release();
          type metadata accessor for MAMatrixRepresentation();
          v81 = (_QWORD *)swift_allocObject();
          v81[2] = v86;
          v81[3] = v48;
          v81[4] = v87;
          v81[5] = v96;
          v81[6] = v95;
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          return (uint64_t)v81;
        }
        v56 = *(_QWORD *)(v49 + 8 * v55);
        ++v52;
        if (!v56)
        {
          v52 = v55 + 1;
          if (v55 + 1 >= v93)
            goto LABEL_111;
          v56 = *(_QWORD *)(v49 + 8 * v52);
          if (!v56)
          {
            v52 = v55 + 2;
            if (v55 + 2 >= v93)
              goto LABEL_111;
            v56 = *(_QWORD *)(v49 + 8 * v52);
            if (!v56)
              break;
          }
        }
LABEL_65:
        v27 = (v56 - 1) & v56;
        v54 = __clz(__rbit64(v56)) + (v52 << 6);
        if (!v10[2])
          continue;
LABEL_66:
        v58 = 8 * v54;
        v59 = *(_QWORD *)(*(_QWORD *)(v1 + 56) + v58);
        v60 = *(id *)(*(_QWORD *)(v1 + 48) + v58);
        swift_bridgeObjectRetain();
        v61 = sub_1CA0AA594((uint64_t)v60);
        if ((v62 & 1) == 0)
        {
          swift_bridgeObjectRelease();

          continue;
        }
        v91 = v60;
        v85 = v49;
        v1 = *(_QWORD *)(v10[7] + 8 * v61);
        if ((v59 & 0xC000000000000001) != 0)
        {
          sub_1CA1F0F64();
          sub_1CA0B6A1C();
          sub_1CA0C0614();
          sub_1CA1F0CC4();
          v59 = v97[0];
          v90 = v97[1];
          v63 = v97[2];
          v64 = v97[3];
          v65 = v97[4];
        }
        else
        {
          v64 = 0;
          v66 = -1 << *(_BYTE *)(v59 + 32);
          v90 = v59 + 56;
          v63 = ~v66;
          v67 = -v66;
          if (v67 < 64)
            v68 = ~(-1 << v67);
          else
            v68 = -1;
          v65 = v68 & *(_QWORD *)(v59 + 56);
        }
        v92 = v65;
        v69 = v60;
        v89 = (unint64_t)(v63 + 64) >> 6;
        v83 = v1 * v48;
        v84 = (unsigned __int128)(v1 * (__int128)v48) >> 64 != (v1 * v48) >> 63;
        while (1)
        {
          v70 = v64;
          if (v59 < 0)
          {
            if (!sub_1CA1F0FD0())
            {
              v69 = v91;
              goto LABEL_110;
            }
            sub_1CA0B6A1C();
            swift_unknownObjectRetain();
            swift_dynamicCast();
            v1 = v94;
            swift_unknownObjectRelease();
            v69 = v91;
            if (!v94)
              goto LABEL_110;
            goto LABEL_98;
          }
          if (v92)
          {
            v71 = __clz(__rbit64(v92));
            v92 &= v92 - 1;
            v72 = v71 | (v64 << 6);
            goto LABEL_97;
          }
          v73 = v64 + 1;
          if (__OFADD__(v64, 1))
            goto LABEL_117;
          if (v73 >= v89)
            goto LABEL_110;
          v74 = *(_QWORD *)(v90 + 8 * v73);
          ++v64;
          if (!v74)
          {
            v64 = v70 + 2;
            if (v70 + 2 >= v89)
              goto LABEL_110;
            v74 = *(_QWORD *)(v90 + 8 * v64);
            if (!v74)
            {
              v64 = v70 + 3;
              if (v70 + 3 >= v89)
                goto LABEL_110;
              v74 = *(_QWORD *)(v90 + 8 * v64);
              if (!v74)
              {
                v64 = v70 + 4;
                if (v70 + 4 >= v89)
                  goto LABEL_110;
                v74 = *(_QWORD *)(v90 + 8 * v64);
                if (!v74)
                  break;
              }
            }
          }
LABEL_96:
          v92 = (v74 - 1) & v74;
          v72 = __clz(__rbit64(v74)) + (v64 << 6);
LABEL_97:
          v1 = (uint64_t)*(id *)(*(_QWORD *)(v59 + 48) + 8 * v72);
          if (!v1)
            goto LABEL_110;
LABEL_98:
          if (v45[2])
          {
            v76 = (id)v1;
            v77 = sub_1CA0AA594((uint64_t)v76);
            if ((v78 & 1) == 0)
            {

              v69 = v91;
              goto LABEL_76;
            }
            v79 = *(_QWORD *)(v45[7] + 8 * v77);

            if (v84)
              goto LABEL_123;
            v24 = __OFADD__(v83, v79);
            v80 = v83 + v79;
            if (v24)
              goto LABEL_124;
            v1 = (uint64_t)v87;
            if ((swift_isUniquelyReferenced_nonNull_native() & 1) != 0)
            {
              if ((v80 & 0x8000000000000000) != 0)
                goto LABEL_125;
            }
            else
            {
              v1 = (uint64_t)sub_1CA0B6058(v87);
              if ((v80 & 0x8000000000000000) != 0)
                goto LABEL_125;
            }
            if (v80 >= *(_QWORD *)(v1 + 16))
              goto LABEL_126;
            v87 = (_QWORD *)v1;
            *(_QWORD *)(v1 + 8 * v80 + 32) = 0x3FF0000000000000;

            v69 = v91;
          }
          else
          {
LABEL_76:

          }
        }
        v75 = v70 + 5;
        while (v89 != v75)
        {
          v74 = *(_QWORD *)(v90 + 8 * v75++);
          if (v74)
          {
            v64 = v75 - 1;
            goto LABEL_96;
          }
        }
LABEL_110:
        sub_1CA0B6A14();

        v1 = i;
        v49 = v85;
      }
      v57 = v55 + 3;
      if (v57 >= v93)
        goto LABEL_111;
      v56 = *(_QWORD *)(v49 + 8 * v57);
      if (v56)
      {
        v52 = v57;
        goto LABEL_65;
      }
      while (1)
      {
        v52 = v57 + 1;
        if (__OFADD__(v57, 1))
          break;
        if (v52 >= v93)
          goto LABEL_111;
        v56 = *(_QWORD *)(v49 + 8 * v52);
        ++v57;
        if (v56)
          goto LABEL_65;
      }
LABEL_116:
      __break(1u);
LABEL_117:
      __break(1u);
LABEL_118:
      swift_bridgeObjectRetain_n();
      v28 = sub_1CA1F1234();
      swift_bridgeObjectRelease();
      if (!v28)
        continue;
LABEL_26:
      v29 = 0;
      v30 = (_QWORD *)MEMORY[0x1E0DEE9E0];
      while (1)
      {
        v1 = v29 + 1;
        if (__OFADD__(v29, 1))
        {
          __break(1u);
LABEL_113:
          __break(1u);
LABEL_114:
          __break(1u);
LABEL_115:
          __break(1u);
          goto LABEL_116;
        }
        v31 = v27;
        v32 = *(id *)(v27 + 8 * v29 + 32);
        v33 = swift_isUniquelyReferenced_nonNull_native();
        v97[0] = v30;
        v35 = sub_1CA0AA594((uint64_t)v32);
        v36 = v30[2];
        v37 = (v34 & 1) == 0;
        v38 = v36 + v37;
        if (__OFADD__(v36, v37))
          goto LABEL_113;
        v27 = v34;
        if (v30[3] >= v38)
        {
          if ((v33 & 1) != 0)
          {
            v30 = (_QWORD *)v97[0];
            if ((v34 & 1) == 0)
              goto LABEL_37;
          }
          else
          {
            sub_1CA0EFAF8();
            v30 = (_QWORD *)v97[0];
            if ((v27 & 1) == 0)
              goto LABEL_37;
          }
        }
        else
        {
          sub_1CA0EBE7C(v38, v33);
          v39 = sub_1CA0AA594((uint64_t)v32);
          if ((v27 & 1) != (v40 & 1))
            goto LABEL_127;
          v35 = v39;
          v30 = (_QWORD *)v97[0];
          if ((v27 & 1) == 0)
          {
LABEL_37:
            v30[(v35 >> 6) + 8] |= 1 << v35;
            v41 = 8 * v35;
            *(_QWORD *)(v30[6] + v41) = v32;
            *(_QWORD *)(v30[7] + v41) = v29;
            v42 = v30[2];
            v24 = __OFADD__(v42, 1);
            v43 = v42 + 1;
            if (v24)
              goto LABEL_115;
            v30[2] = v43;
            v44 = v32;
            goto LABEL_28;
          }
        }
        *(_QWORD *)(v30[7] + 8 * v35) = v29;
LABEL_28:

        swift_bridgeObjectRelease();
        ++v29;
        v27 = v31;
        if (v1 == v28)
        {
          v45 = v30;
          swift_bridgeObjectRelease();
          v1 = i;
          v46 = v92;
          if (!v93)
            goto LABEL_42;
LABEL_120:
          swift_bridgeObjectRetain();
          v47 = sub_1CA1F1234();
          swift_bridgeObjectRelease();
          if (v91)
            goto LABEL_121;
LABEL_43:
          v48 = *(_QWORD *)((v27 & 0xFFFFFFFFFFFFF8) + 0x10);
          goto LABEL_44;
        }
      }
    }
    break;
  }
  __break(1u);
LABEL_123:
  __break(1u);
LABEL_124:
  __break(1u);
LABEL_125:
  __break(1u);
LABEL_126:
  __break(1u);
LABEL_127:
  sub_1CA0B6A1C();
  result = sub_1CA1F1360();
  __break(1u);
  return result;
}

uint64_t sub_1CA119824(uint64_t a1)
{
  uint64_t v1;

  *(_QWORD *)(v1 + 56) = a1;
  return swift_release();
}

uint64_t (*sub_1CA119834(uint64_t *a1))(_QWORD *a1)
{
  uint64_t v1;

  a1[1] = v1;
  *a1 = sub_1CA118E2C();
  return sub_1CA119868;
}

uint64_t sub_1CA119868(_QWORD *a1)
{
  *(_QWORD *)(a1[1] + 56) = *a1;
  return swift_release();
}

uint64_t sub_1CA119878()
{
  uint64_t v0;
  uint64_t v1;

  if (*(_QWORD *)(v0 + 64))
  {
    v1 = *(_QWORD *)(v0 + 64);
  }
  else
  {
    v1 = sub_1CA1198D4(v0);
    *(_QWORD *)(v0 + 64) = v1;
    swift_retain();
    swift_release();
  }
  swift_retain();
  return v1;
}

uint64_t sub_1CA1198D4(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  unint64_t v12;
  id v13;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  _BOOL8 v18;
  uint64_t v19;
  unint64_t v20;
  char v21;
  uint64_t v22;
  uint64_t v23;
  BOOL v24;
  uint64_t v25;
  id v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  id v32;
  unint64_t v33;
  unint64_t v34;
  uint64_t v35;
  _BOOL8 v36;
  uint64_t v37;
  unint64_t v38;
  char v39;
  _QWORD *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  id v44;
  _QWORD *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  unint64_t v50;
  int64_t v51;
  unint64_t v52;
  unint64_t v53;
  int64_t v54;
  unint64_t v55;
  int64_t v56;
  uint64_t v57;
  unint64_t v58;
  uint64_t v59;
  uint64_t v60;
  id v61;
  unint64_t v62;
  char v63;
  double v64;
  id v65;
  unint64_t v66;
  char v67;
  uint64_t v68;
  uint64_t v69;
  unint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  unint64_t v74;
  uint64_t v75;
  int64_t v76;
  unint64_t v77;
  uint64_t v78;
  double v79;
  id v80;
  unint64_t v81;
  char v82;
  id v83;
  unint64_t v84;
  char v85;
  uint64_t v86;
  unint64_t v87;
  _QWORD *v88;
  _QWORD *v89;
  uint64_t result;
  uint64_t v91;
  BOOL v92;
  void *v93;
  uint64_t v94;
  _QWORD *v95;
  uint64_t v96;
  int64_t v97;
  _QWORD *v98;
  _QWORD *v99;
  unint64_t v100;
  uint64_t v101;
  unint64_t v102;
  uint64_t v103;
  int64_t v104;
  uint64_t v106;
  unint64_t v107;
  unint64_t v108;
  unint64_t v109;
  _QWORD *v110;
  _QWORD *v111;
  uint64_t v112;
  uint64_t v113;
  unint64_t v114;

  v109 = MEMORY[0x1E0DEE9D8];
  v108 = MEMORY[0x1E0DEE9D8];
  v1 = *(_QWORD *)(a1 + 16);
  v2 = swift_bridgeObjectRetain();
  sub_1CA0C1F1C(v2);
  sub_1CA0B2380(v3);
  v4 = swift_bridgeObjectRetain();
  v5 = sub_1CA115C1C(v4);
  v106 = v1;
  swift_bridgeObjectRelease();
  v6 = sub_1CA0C68DC(v5);
  swift_bridgeObjectRelease();
  sub_1CA0B2380(v6);
  v7 = v109;
  v104 = v109 >> 62;
  if (v109 >> 62)
    goto LABEL_22;
  v8 = *(_QWORD *)((v109 & 0xFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain();
  while (v8)
  {
    v9 = 0;
    v10 = (_QWORD *)MEMORY[0x1E0DEE9E0];
    while (1)
    {
      v11 = v9 + 1;
      if (__OFADD__(v9, 1))
        break;
      v12 = v7;
      v13 = *(id *)(v7 + 8 * v9 + 32);
      isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      v110 = v10;
      v16 = sub_1CA0AA594((uint64_t)v13);
      v17 = v10[2];
      v18 = (v15 & 1) == 0;
      v19 = v17 + v18;
      if (__OFADD__(v17, v18))
        goto LABEL_20;
      v7 = v15;
      if (v10[3] >= v19)
      {
        if ((isUniquelyReferenced_nonNull_native & 1) != 0)
        {
          if ((v15 & 1) != 0)
            goto LABEL_4;
        }
        else
        {
          sub_1CA0EFAF8();
          if ((v7 & 1) != 0)
            goto LABEL_4;
        }
      }
      else
      {
        sub_1CA0EBE7C(v19, isUniquelyReferenced_nonNull_native);
        v20 = sub_1CA0AA594((uint64_t)v13);
        if ((v7 & 1) != (v21 & 1))
          goto LABEL_141;
        v16 = v20;
        if ((v7 & 1) != 0)
        {
LABEL_4:
          *(_QWORD *)(v10[7] + 8 * v16) = v9;
          goto LABEL_5;
        }
      }
      v10[(v16 >> 6) + 8] |= 1 << v16;
      v22 = 8 * v16;
      *(_QWORD *)(v10[6] + v22) = v13;
      *(_QWORD *)(v10[7] + v22) = v9;
      v23 = v10[2];
      v24 = __OFADD__(v23, 1);
      v25 = v23 + 1;
      if (v24)
        goto LABEL_21;
      v10[2] = v25;
      v26 = v13;
LABEL_5:

      swift_bridgeObjectRelease();
      ++v9;
      v7 = v12;
      if (v11 == v8)
      {
        swift_bridgeObjectRelease();
        goto LABEL_24;
      }
    }
    __break(1u);
LABEL_20:
    __break(1u);
LABEL_21:
    __break(1u);
LABEL_22:
    swift_bridgeObjectRetain_n();
    v8 = sub_1CA1F1234();
    swift_bridgeObjectRelease();
  }
  swift_bridgeObjectRelease();
  v10 = (_QWORD *)MEMORY[0x1E0DEE9E0];
LABEL_24:
  v27 = v108;
  v28 = v108 >> 62;
  if (v108 >> 62)
  {
LABEL_132:
    swift_bridgeObjectRetain_n();
    v29 = sub_1CA1F1234();
    swift_bridgeObjectRelease();
    if (v29)
      goto LABEL_26;
  }
  else
  {
    v29 = *(_QWORD *)((v108 & 0xFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain();
    if (v29)
    {
LABEL_26:
      v98 = v10;
      v100 = v28;
      v102 = v7;
      v30 = 0;
      v10 = (_QWORD *)MEMORY[0x1E0DEE9E0];
      while (1)
      {
        v28 = v30 + 1;
        if (__OFADD__(v30, 1))
        {
          __break(1u);
LABEL_127:
          __break(1u);
LABEL_128:
          __break(1u);
LABEL_129:
          __break(1u);
LABEL_130:
          __break(1u);
LABEL_131:
          __break(1u);
          goto LABEL_132;
        }
        v31 = v27;
        v32 = *(id *)(v27 + 8 * v30 + 32);
        v27 = swift_isUniquelyReferenced_nonNull_native();
        v110 = v10;
        v34 = sub_1CA0AA594((uint64_t)v32);
        v35 = v10[2];
        v36 = (v33 & 1) == 0;
        v37 = v35 + v36;
        if (__OFADD__(v35, v36))
          goto LABEL_127;
        v7 = v33;
        if (v10[3] >= v37)
        {
          if ((v27 & 1) != 0)
          {
            v40 = v10;
            if ((v33 & 1) == 0)
              goto LABEL_37;
          }
          else
          {
            sub_1CA0EFAF8();
            v40 = v10;
            if ((v7 & 1) == 0)
              goto LABEL_37;
          }
        }
        else
        {
          sub_1CA0EBE7C(v37, v27);
          v38 = sub_1CA0AA594((uint64_t)v32);
          if ((v7 & 1) != (v39 & 1))
            goto LABEL_141;
          v34 = v38;
          v40 = v10;
          if ((v7 & 1) == 0)
          {
LABEL_37:
            v40[(v34 >> 6) + 8] |= 1 << v34;
            v41 = 8 * v34;
            *(_QWORD *)(v40[6] + v41) = v32;
            *(_QWORD *)(v40[7] + v41) = v30;
            v42 = v40[2];
            v24 = __OFADD__(v42, 1);
            v43 = v42 + 1;
            if (v24)
              goto LABEL_129;
            v10 = v40;
            v40[2] = v43;
            v44 = v32;
            goto LABEL_28;
          }
        }
        v10 = v40;
        *(_QWORD *)(v40[7] + 8 * v34) = v30;
LABEL_28:

        swift_bridgeObjectRelease();
        ++v30;
        v27 = v31;
        if (v28 == v29)
        {
          swift_bridgeObjectRelease();
          v28 = v100;
          v7 = v102;
          v45 = v10;
          v10 = v98;
          if (v104)
            goto LABEL_134;
LABEL_42:
          v46 = *(_QWORD *)((v7 & 0xFFFFFFFFFFFFF8) + 0x10);
          if (!v28)
            goto LABEL_43;
LABEL_135:
          swift_bridgeObjectRetain();
          v47 = sub_1CA1F1234();
          swift_bridgeObjectRelease();
          goto LABEL_44;
        }
      }
    }
  }
  swift_bridgeObjectRelease();
  v45 = (_QWORD *)MEMORY[0x1E0DEE9E0];
  if (!v104)
    goto LABEL_42;
LABEL_134:
  swift_bridgeObjectRetain();
  v46 = sub_1CA1F1234();
  swift_bridgeObjectRelease();
  if (v28)
    goto LABEL_135;
LABEL_43:
  v47 = *(_QWORD *)((v27 & 0xFFFFFFFFFFFFF8) + 0x10);
LABEL_44:
  v96 = v47;
  if ((unsigned __int128)(v46 * (__int128)v47) >> 64 != (v46 * v47) >> 63)
  {
    __break(1u);
LABEL_137:
    __break(1u);
    goto LABEL_138;
  }
  v94 = v46;
  v95 = (_QWORD *)sub_1CA0B4464(v46 * v47, 0.0);
  v103 = v106 + 64;
  v48 = 1 << *(_BYTE *)(v106 + 32);
  if (v48 < 64)
    v49 = ~(-1 << v48);
  else
    v49 = -1;
  v50 = v49 & *(_QWORD *)(v106 + 64);
  v104 = (unint64_t)(v48 + 63) >> 6;
  swift_bridgeObjectRetain();
  v51 = 0;
  while (1)
  {
    while (1)
    {
LABEL_50:
      if (v50)
      {
        v52 = __clz(__rbit64(v50));
        v50 &= v50 - 1;
        v53 = v52 | (v51 << 6);
      }
      else
      {
        v54 = v51 + 1;
        if (__OFADD__(v51, 1))
          goto LABEL_128;
        if (v54 >= v104)
        {
LABEL_125:
          swift_release();
          type metadata accessor for MAMatrixRepresentation();
          v89 = (_QWORD *)swift_allocObject();
          v89[2] = v94;
          v89[3] = v96;
          v89[4] = v95;
          v89[5] = v109;
          v89[6] = v108;
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          return (uint64_t)v89;
        }
        v55 = *(_QWORD *)(v103 + 8 * v54);
        ++v51;
        if (!v55)
        {
          v51 = v54 + 1;
          if (v54 + 1 >= v104)
            goto LABEL_125;
          v55 = *(_QWORD *)(v103 + 8 * v51);
          if (!v55)
          {
            v51 = v54 + 2;
            if (v54 + 2 >= v104)
              goto LABEL_125;
            v55 = *(_QWORD *)(v103 + 8 * v51);
            if (!v55)
            {
              v56 = v54 + 3;
              if (v56 >= v104)
                goto LABEL_125;
              v55 = *(_QWORD *)(v103 + 8 * v56);
              if (!v55)
              {
                while (1)
                {
                  v51 = v56 + 1;
                  if (__OFADD__(v56, 1))
                    goto LABEL_130;
                  if (v51 >= v104)
                    goto LABEL_125;
                  v55 = *(_QWORD *)(v103 + 8 * v51);
                  ++v56;
                  if (v55)
                    goto LABEL_65;
                }
              }
              v51 = v56;
            }
          }
        }
LABEL_65:
        v50 = (v55 - 1) & v55;
        v53 = __clz(__rbit64(v55)) + (v51 << 6);
      }
      v57 = 8 * v53;
      v28 = *(_QWORD *)(*(_QWORD *)(v106 + 48) + v57);
      v58 = *(_QWORD *)(*(_QWORD *)(v106 + 56) + v57);
      v59 = *(_QWORD *)(a1 + 24);
      if (!v59)
      {
        v65 = (id)v28;
LABEL_72:
        swift_bridgeObjectRetain();
        goto LABEL_74;
      }
      v60 = *(_QWORD *)(v59 + 16);
      v61 = (id)v28;
      if (!v60)
        goto LABEL_72;
      v7 = (unint64_t)v61;
      swift_bridgeObjectRetain();
      v62 = sub_1CA0AA594(v7);
      if ((v63 & 1) == 0)
        break;
      v64 = *(double *)(*(_QWORD *)(v59 + 56) + 8 * v62);

      if (v10[2])
        goto LABEL_75;
LABEL_49:
      swift_bridgeObjectRelease();

    }
LABEL_74:
    v64 = 1.0;
    if (!v10[2])
      goto LABEL_49;
LABEL_75:
    v7 = (unint64_t)(id)v28;
    v66 = sub_1CA0AA594(v7);
    if ((v67 & 1) != 0)
      break;
    swift_bridgeObjectRelease();

  }
  v68 = *(_QWORD *)(v10[7] + 8 * v66);
  v93 = (void *)v7;

  if ((v58 & 0xC000000000000001) != 0)
  {
    sub_1CA1F0F64();
    v7 = sub_1CA0B6A1C();
    sub_1CA0C0614();
    sub_1CA1F0CC4();
    v58 = (unint64_t)v110;
    v99 = v111;
    v69 = v112;
    v27 = v113;
    v70 = v114;
  }
  else
  {
    v27 = 0;
    v71 = -1 << *(_BYTE *)(v58 + 32);
    v99 = (_QWORD *)(v58 + 56);
    v69 = ~v71;
    v72 = -v71;
    if (v72 < 64)
      v73 = ~(-1 << v72);
    else
      v73 = -1;
    v70 = v73 & *(_QWORD *)(v58 + 56);
  }
  v97 = (unint64_t)(v69 + 64) >> 6;
  v91 = v68 * v96;
  v92 = (unsigned __int128)(v68 * (__int128)v96) >> 64 != (v68 * v96) >> 63;
  while (2)
  {
    v28 = v70;
    while (2)
    {
      if ((v58 & 0x8000000000000000) != 0)
      {
        if (!sub_1CA1F0FD0())
          goto LABEL_124;
        sub_1CA0B6A1C();
        swift_unknownObjectRetain();
        swift_dynamicCast();
        v7 = v107;
        swift_unknownObjectRelease();
        v75 = v27;
        v101 = v28;
        if (!v107)
          goto LABEL_124;
      }
      else
      {
        if (v28)
        {
          v101 = (v28 - 1) & v28;
          v74 = __clz(__rbit64(v28)) | (v27 << 6);
          v75 = v27;
        }
        else
        {
          v76 = v27 + 1;
          if (__OFADD__(v27, 1))
            goto LABEL_131;
          if (v76 >= v97)
            goto LABEL_123;
          v77 = v99[v76];
          v75 = v27 + 1;
          if (!v77)
          {
            v75 = v27 + 2;
            if (v27 + 2 >= v97)
              goto LABEL_123;
            v77 = v99[v75];
            if (!v77)
            {
              v75 = v27 + 3;
              if (v27 + 3 >= v97)
                goto LABEL_123;
              v77 = v99[v75];
              if (!v77)
              {
                v75 = v27 + 4;
                if (v27 + 4 >= v97)
                  goto LABEL_123;
                v77 = v99[v75];
                if (!v77)
                {
                  v78 = v27 + 5;
                  while (v97 != v78)
                  {
                    v77 = v99[v78++];
                    if (v77)
                    {
                      v75 = v78 - 1;
                      goto LABEL_105;
                    }
                  }
LABEL_123:
                  v28 = 0;
LABEL_124:
                  sub_1CA0B6A14();

                  goto LABEL_50;
                }
              }
            }
          }
LABEL_105:
          v101 = (v77 - 1) & v77;
          v74 = __clz(__rbit64(v77)) + (v75 << 6);
        }
        v7 = (unint64_t)*(id *)(*(_QWORD *)(v58 + 48) + 8 * v74);
        if (!v7)
          goto LABEL_124;
      }
      v79 = 1.0;
      if (v59 && *(_QWORD *)(v59 + 16))
      {
        v80 = (id)v7;
        v81 = sub_1CA0AA594((uint64_t)v80);
        if ((v82 & 1) != 0)
          v79 = *(double *)(*(_QWORD *)(v59 + 56) + 8 * v81);

      }
      if (!v45[2])
      {
LABEL_85:

        v27 = v75;
        v28 = v101;
        continue;
      }
      break;
    }
    v27 = v75;
    v83 = (id)v7;
    v84 = sub_1CA0AA594((uint64_t)v83);
    if ((v85 & 1) == 0)
    {

      goto LABEL_85;
    }
    v86 = *(_QWORD *)(v45[7] + 8 * v84);

    if (v92)
      goto LABEL_137;
    v24 = __OFADD__(v91, v86);
    v87 = v91 + v86;
    if (!v24)
    {
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) != 0)
      {
        v88 = v95;
        if ((v87 & 0x8000000000000000) != 0)
          goto LABEL_139;
      }
      else
      {
        v88 = sub_1CA0B6058(v95);
        if ((v87 & 0x8000000000000000) != 0)
          goto LABEL_139;
      }
      if (v87 >= v88[2])
        goto LABEL_140;
      v95 = v88;
      *(double *)&v88[v87 + 4] = v64 * v79;

      v70 = v101;
      continue;
    }
    break;
  }
LABEL_138:
  __break(1u);
LABEL_139:
  __break(1u);
LABEL_140:
  __break(1u);
LABEL_141:
  sub_1CA0B6A1C();
  result = sub_1CA1F1360();
  __break(1u);
  return result;
}

uint64_t sub_1CA11A334(uint64_t a1)
{
  uint64_t v1;

  *(_QWORD *)(v1 + 64) = a1;
  return swift_release();
}

uint64_t (*sub_1CA11A344(uint64_t *a1))(_QWORD *a1)
{
  uint64_t v1;

  a1[1] = v1;
  *a1 = sub_1CA119878();
  return sub_1CA11A378;
}

uint64_t sub_1CA11A378(_QWORD *a1)
{
  *(_QWORD *)(a1[1] + 64) = *a1;
  return swift_release();
}

id sub_1CA11A388()
{
  uint64_t v0;
  void *v1;
  id v2;
  void *v3;
  void *v4;
  id v5;

  v1 = *(void **)(v0 + 72);
  if (v1)
  {
    v2 = *(id *)(v0 + 72);
  }
  else
  {
    sub_1CA11A3E0(v0);
    v3 = *(void **)(v0 + 72);
    *(_QWORD *)(v0 + 72) = v4;
    v2 = v4;

    v1 = 0;
  }
  v5 = v1;
  return v2;
}

void sub_1CA11A3E0(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  int64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  int64_t v10;
  unint64_t v11;
  int64_t v12;
  uint64_t v13;
  void *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  id v18;
  double v19;
  unint64_t v20;
  char v21;
  id v22;
  id v23;
  id v24;
  float v25;
  id v26;
  uint64_t v27;
  void *v28;
  double v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  id v36;
  id v37;
  float v38;
  id v39;
  uint64_t v40;
  void *v41;
  double v42;
  id v43;
  void *v44;
  id v45;
  uint64_t v46;
  unint64_t v47;
  uint64_t v48;
  id v49;
  int64_t v50;
  unint64_t v51;
  uint64_t v52;
  double v53;
  id v54;
  unint64_t v55;
  char v56;
  uint64_t v57;
  int64_t v58;
  uint64_t v59;
  uint64_t v60;
  void *v61;
  unint64_t v62;
  int64_t v63;
  int64_t v64;
  uint64_t v65;
  id v66;
  id v67;
  void *v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  unint64_t v73;

  v66 = objc_msgSend(objc_allocWithZone((Class)MAGraph), sel_init);
  v59 = a1;
  v2 = *(_QWORD *)(a1 + 16);
  v57 = v2 + 64;
  v3 = 1 << *(_BYTE *)(v2 + 32);
  if (v3 < 64)
    v4 = ~(-1 << v3);
  else
    v4 = -1;
  v5 = v4 & *(_QWORD *)(v2 + 64);
  v58 = (unint64_t)(v3 + 63) >> 6;
  v60 = v2;
  swift_bridgeObjectRetain();
  v6 = 0;
  while (2)
  {
    if (!v5)
    {
      v10 = v6 + 1;
      if (__OFADD__(v6, 1))
        goto LABEL_63;
      if (v10 >= v58)
        goto LABEL_61;
      v11 = *(_QWORD *)(v57 + 8 * v10);
      ++v6;
      if (!v11)
      {
        v6 = v10 + 1;
        if (v10 + 1 >= v58)
          goto LABEL_61;
        v11 = *(_QWORD *)(v57 + 8 * v6);
        if (!v11)
        {
          v6 = v10 + 2;
          if (v10 + 2 >= v58)
            goto LABEL_61;
          v11 = *(_QWORD *)(v57 + 8 * v6);
          if (!v11)
          {
            v12 = v10 + 3;
            if (v12 < v58)
            {
              v11 = *(_QWORD *)(v57 + 8 * v12);
              if (v11)
              {
                v6 = v12;
                goto LABEL_21;
              }
              while (1)
              {
                v6 = v12 + 1;
                if (__OFADD__(v12, 1))
                  goto LABEL_64;
                if (v6 >= v58)
                  break;
                v11 = *(_QWORD *)(v57 + 8 * v6);
                ++v12;
                if (v11)
                  goto LABEL_21;
              }
            }
LABEL_61:
            swift_release();
            return;
          }
        }
      }
LABEL_21:
      v8 = (v11 - 1) & v11;
      v9 = __clz(__rbit64(v11)) + (v6 << 6);
      goto LABEL_22;
    }
    v7 = __clz(__rbit64(v5));
    v8 = (v5 - 1) & v5;
    v9 = v7 | (v6 << 6);
LABEL_22:
    v62 = v8;
    v63 = v6;
    v13 = 8 * v9;
    v14 = *(void **)(*(_QWORD *)(v60 + 48) + v13);
    v15 = *(_QWORD *)(*(_QWORD *)(v60 + 56) + v13);
    v16 = *(_QWORD *)(v59 + 24);
    if (v16)
    {
      v17 = *(_QWORD *)(v16 + 16);
      v18 = v14;
      swift_bridgeObjectRetain();
      v19 = 1.0;
      if (v17)
      {
        v20 = sub_1CA0AA594((uint64_t)v18);
        if ((v21 & 1) != 0)
          v19 = *(double *)(*(_QWORD *)(v16 + 56) + 8 * v20);
      }
    }
    else
    {
      v22 = v14;
      swift_bridgeObjectRetain();
      v19 = 1.0;
    }
    v23 = objc_msgSend(v14, sel_label);
    v24 = objc_msgSend(v14, sel_domain);
    v25 = v19;
    v61 = v14;
    v26 = objc_msgSend(v14, sel_propertyDictionary);
    v27 = sub_1CA1F08D4();

    sub_1CA0C2AB0(v27);
    swift_bridgeObjectRelease();
    v28 = (void *)sub_1CA1F08BC();
    swift_bridgeObjectRelease();
    *(float *)&v29 = v25;
    v67 = objc_msgSend(v66, sel_addUniqueNodeWithLabel_domain_weight_properties_didCreate_, v23, v24, v28, 0, v29);

    if ((v15 & 0xC000000000000001) != 0)
    {
      sub_1CA1F0F64();
      sub_1CA0B6A1C();
      sub_1CA0C0614();
      sub_1CA1F0CC4();
      v15 = v69;
      v65 = v70;
      v30 = v71;
      v31 = v72;
      v32 = v73;
    }
    else
    {
      v31 = 0;
      v33 = -1 << *(_BYTE *)(v15 + 32);
      v65 = v15 + 56;
      v30 = ~v33;
      v34 = -v33;
      if (v34 < 64)
        v35 = ~(-1 << v34);
      else
        v35 = -1;
      v32 = v35 & *(_QWORD *)(v15 + 56);
    }
    v64 = (unint64_t)(v30 + 64) >> 6;
    while (v15 < 0)
    {
      if (!sub_1CA1F0FD0())
        goto LABEL_5;
      sub_1CA0B6A1C();
      swift_unknownObjectRetain();
      swift_dynamicCast();
      v49 = v68;
      swift_unknownObjectRelease();
      v48 = v31;
      v46 = v32;
      if (!v68)
        goto LABEL_5;
LABEL_57:
      v53 = 1.0;
      if (v16 && *(_QWORD *)(v16 + 16))
      {
        v54 = v49;
        v55 = sub_1CA0AA594((uint64_t)v54);
        if ((v56 & 1) != 0)
          v53 = *(double *)(*(_QWORD *)(v16 + 56) + 8 * v55);

      }
      v36 = objc_msgSend(v49, sel_label);
      v37 = objc_msgSend(v49, sel_domain);
      v38 = v53;
      v39 = objc_msgSend(v49, sel_propertyDictionary);
      v40 = sub_1CA1F08D4();

      sub_1CA0C2AB0(v40);
      swift_bridgeObjectRelease();
      v41 = (void *)sub_1CA1F08BC();
      swift_bridgeObjectRelease();
      *(float *)&v42 = v38;
      v43 = objc_msgSend(v66, sel_addUniqueNodeWithLabel_domain_weight_properties_didCreate_, v36, v37, v41, 0, v42);

      v44 = (void *)sub_1CA1F0A00();
      v45 = objc_msgSend(v66, sel_addEdgeWithLabel_sourceNode_targetNode_, v44, v67, v43);

      v31 = v48;
      v32 = v46;
    }
    if (v32)
    {
      v46 = (v32 - 1) & v32;
      v47 = __clz(__rbit64(v32)) | (v31 << 6);
      v48 = v31;
LABEL_56:
      v49 = *(id *)(*(_QWORD *)(v15 + 48) + 8 * v47);
      if (!v49)
        goto LABEL_5;
      goto LABEL_57;
    }
    v50 = v31 + 1;
    if (!__OFADD__(v31, 1))
    {
      if (v50 >= v64)
        goto LABEL_5;
      v51 = *(_QWORD *)(v65 + 8 * v50);
      v48 = v31 + 1;
      if (!v51)
      {
        v48 = v31 + 2;
        if (v31 + 2 >= v64)
          goto LABEL_5;
        v51 = *(_QWORD *)(v65 + 8 * v48);
        if (!v51)
        {
          v48 = v31 + 3;
          if (v31 + 3 >= v64)
            goto LABEL_5;
          v51 = *(_QWORD *)(v65 + 8 * v48);
          if (!v51)
          {
            v48 = v31 + 4;
            if (v31 + 4 >= v64)
              goto LABEL_5;
            v51 = *(_QWORD *)(v65 + 8 * v48);
            if (!v51)
            {
              v52 = v31 + 5;
              while (v64 != v52)
              {
                v51 = *(_QWORD *)(v65 + 8 * v52++);
                if (v51)
                {
                  v48 = v52 - 1;
                  goto LABEL_55;
                }
              }
LABEL_5:
              sub_1CA0B6A14();

              v5 = v62;
              v6 = v63;
              continue;
            }
          }
        }
      }
LABEL_55:
      v46 = (v51 - 1) & v51;
      v47 = __clz(__rbit64(v51)) + (v48 << 6);
      goto LABEL_56;
    }
    break;
  }
  __break(1u);
LABEL_63:
  __break(1u);
LABEL_64:
  __break(1u);
}

void sub_1CA11AA9C(uint64_t a1)
{
  uint64_t v1;
  void *v2;

  v2 = *(void **)(v1 + 72);
  *(_QWORD *)(v1 + 72) = a1;

}

void (*sub_1CA11AAA8(id *a1))(uint64_t *a1)
{
  void *v1;

  a1[1] = v1;
  *a1 = sub_1CA11A388();
  return sub_1CA11AADC;
}

void sub_1CA11AADC(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v2;
  void *v3;

  v2 = *a1;
  v1 = a1[1];
  v3 = *(void **)(v1 + 72);
  *(_QWORD *)(v1 + 72) = v2;

}

uint64_t sub_1CA11AAEC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  if (*(_QWORD *)(v0 + 80))
  {
    v1 = *(_QWORD *)(v0 + 80);
  }
  else
  {
    sub_1CA11ABE8(v0, (uint64_t (*)(void))sub_1CA11C1C4);
    v1 = v2;
    *(_QWORD *)(v0 + 80) = v2;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
  }
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t (*sub_1CA11AB50(uint64_t *a1))(_QWORD *a1)
{
  uint64_t v1;

  a1[1] = v1;
  *a1 = sub_1CA11AAEC();
  return sub_1CA0C4148;
}

uint64_t sub_1CA11AB84()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  if (*(_QWORD *)(v0 + 88))
  {
    v1 = *(_QWORD *)(v0 + 88);
  }
  else
  {
    sub_1CA11ABE8(v0, (uint64_t (*)(void))sub_1CA11C5A0);
    v1 = v2;
    *(_QWORD *)(v0 + 88) = v2;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
  }
  swift_bridgeObjectRetain();
  return v1;
}

void sub_1CA11ABE8(uint64_t a1, uint64_t (*a2)(void))
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  id v10;
  uint64_t v11;
  id v12[2];

  v12[1] = (id)MEMORY[0x1E0DEE9E8];
  v2 = (_QWORD *)a2();
  v3 = v2[2];
  v4 = v2[3];
  v5 = v3 * v4;
  if ((unsigned __int128)(v3 * (__int128)v4) >> 64 == (v3 * v4) >> 63)
  {
    v6 = v2;
    v7 = v2[4];
    v8 = swift_allocObject();
    *(_QWORD *)(v8 + 16) = 0;
    swift_bridgeObjectRetain_n();
    swift_retain();
    if (!v5)
    {
LABEL_13:
      *(_QWORD *)(v8 + 16) = v5;
      swift_release();
      swift_bridgeObjectRelease_n();
      swift_release_n();
      return;
    }
    v9 = 0;
    while (v9 < *(_QWORD *)(v7 + 16))
    {
      if (*(double *)(v7 + 32 + 8 * v9) == 1.0)
      {
        v11 = v6[5];
        if ((v11 & 0xC000000000000001) != 0)
        {
          v10 = (id)MEMORY[0x1CAA4A7A4](v9);
        }
        else
        {
          if (v9 >= *(_QWORD *)((v11 & 0xFFFFFFFFFFFFF8) + 0x10))
            goto LABEL_15;
          v10 = *(id *)(v11 + 8 * v9 + 32);
        }
        sub_1CA0BDD74(v12, v10);

      }
      if (v5 == ++v9)
        goto LABEL_13;
    }
    __break(1u);
LABEL_15:
    __break(1u);
  }
  __break(1u);
}

uint64_t sub_1CA11AD50(uint64_t a1)
{
  uint64_t v1;

  *(_QWORD *)(v1 + 88) = a1;
  return swift_bridgeObjectRelease();
}

uint64_t (*sub_1CA11AD60(uint64_t *a1))(_QWORD *a1)
{
  uint64_t v1;

  a1[1] = v1;
  *a1 = sub_1CA11AB84();
  return sub_1CA11AD94;
}

uint64_t sub_1CA11AD94(_QWORD *a1)
{
  *(_QWORD *)(a1[1] + 88) = *a1;
  return swift_bridgeObjectRelease();
}

uint64_t sub_1CA11ADA4()
{
  uint64_t v0;
  uint64_t v1;

  if (*(_QWORD *)(v0 + 96))
  {
    v1 = *(_QWORD *)(v0 + 96);
  }
  else
  {
    v1 = sub_1CA11AE50(0);
    *(_QWORD *)(v0 + 96) = v1;
    swift_retain();
    swift_release();
  }
  swift_retain();
  return v1;
}

uint64_t sub_1CA11ADFC(uint64_t a1)
{
  uint64_t v1;

  *(_QWORD *)(v1 + 96) = a1;
  return swift_release();
}

uint64_t (*sub_1CA11AE0C(uint64_t *a1))(_QWORD *a1)
{
  uint64_t v1;

  a1[1] = v1;
  *a1 = sub_1CA11ADA4();
  return sub_1CA11AE40;
}

uint64_t sub_1CA11AE40(_QWORD *a1)
{
  *(_QWORD *)(a1[1] + 96) = *a1;
  return swift_release();
}

uint64_t sub_1CA11AE50(char a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  int64_t v8;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  char isUniquelyReferenced_nonNull_native;
  char v14;
  unint64_t v15;
  uint64_t v16;
  _BOOL8 v17;
  uint64_t v18;
  char v19;
  unint64_t v20;
  char v21;
  uint64_t v22;
  uint64_t v23;
  BOOL v24;
  uint64_t v25;
  id v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  unint64_t v32;
  unint64_t v33;
  int64_t v34;
  unint64_t v35;
  int64_t v36;
  uint64_t v37;
  unint64_t v38;
  id v39;
  unint64_t v40;
  char v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  unint64_t v48;
  id v49;
  int64_t v50;
  unint64_t v51;
  uint64_t v52;
  int64_t v53;
  id v54;
  unint64_t v55;
  char v56;
  uint64_t v57;
  unint64_t v58;
  _QWORD *v59;
  unint64_t v60;
  uint64_t v61;
  unint64_t v62;
  uint64_t v63;
  uint64_t result;
  uint64_t v65;
  int64_t v66;
  uint64_t v67;
  uint64_t v69;
  _QWORD *v70;
  uint64_t v71;
  int64_t v72;
  _QWORD *v73;
  uint64_t v74;
  int64_t v75;
  int64_t v76;
  void *v77;
  unint64_t v78;
  _QWORD *v79;
  _QWORD *v80;
  uint64_t v81;
  uint64_t v82;
  int64_t v83;

  v78 = MEMORY[0x1E0DEE9D8];
  v2 = *(_QWORD *)(v1 + 16);
  v3 = swift_bridgeObjectRetain();
  sub_1CA0C1F1C(v3);
  sub_1CA0B2380(v4);
  v5 = swift_bridgeObjectRetain();
  v6 = sub_1CA115C1C(v5);
  swift_bridgeObjectRelease();
  v7 = sub_1CA0C68DC(v6);
  swift_bridgeObjectRelease();
  sub_1CA0B2380(v7);
  v8 = v78;
  v9 = v78 >> 62;
  if (v78 >> 62)
    goto LABEL_98;
  v10 = *(_QWORD *)((v78 & 0xFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain();
  v69 = v2;
  if (v10)
    goto LABEL_3;
  while (2)
  {
    swift_bridgeObjectRelease();
    v12 = (_QWORD *)MEMORY[0x1E0DEE9E0];
    if (v9)
      goto LABEL_100;
LABEL_19:
    v27 = *(_QWORD *)((v8 & 0xFFFFFFFFFFFFF8) + 0x10);
    v9 = v27;
LABEL_20:
    if ((unsigned __int128)(v9 * (__int128)v27) >> 64 != (v9 * v27) >> 63)
    {
      __break(1u);
LABEL_102:
      __break(1u);
      goto LABEL_103;
    }
    v28 = sub_1CA0B4464(v9 * v27, 0.0);
    v74 = v2 + 64;
    v29 = 1 << *(_BYTE *)(v2 + 32);
    if (v29 < 64)
      v30 = ~(-1 << v29);
    else
      v30 = -1;
    v31 = v30 & *(_QWORD *)(v2 + 64);
    v76 = (unint64_t)(v29 + 63) >> 6;
    swift_bridgeObjectRetain();
    v8 = 0;
LABEL_25:
    while (2)
    {
      if (v31)
      {
        v32 = __clz(__rbit64(v31));
        v31 &= v31 - 1;
        v33 = v32 | (v8 << 6);
        if (!v12[2])
          continue;
        goto LABEL_42;
      }
      break;
    }
    v34 = v8 + 1;
    if (__OFADD__(v8, 1))
      goto LABEL_94;
    if (v34 >= v76)
    {
LABEL_91:
      swift_release();
      type metadata accessor for MAAdjacencyMatrixRepresentation();
      v63 = swift_allocObject();
      *(_BYTE *)(v63 + 48) = a1 & 1;
      *(_QWORD *)(v63 + 16) = v9;
      *(_QWORD *)(v63 + 24) = v27;
      *(_QWORD *)(v63 + 32) = v28;
      *(_QWORD *)(v63 + 40) = v78;
      swift_bridgeObjectRelease();
      return v63;
    }
    v35 = *(_QWORD *)(v74 + 8 * v34);
    ++v8;
    if (!v35)
    {
      v8 = v34 + 1;
      if (v34 + 1 >= v76)
        goto LABEL_91;
      v35 = *(_QWORD *)(v74 + 8 * v8);
      if (!v35)
      {
        v8 = v34 + 2;
        if (v34 + 2 >= v76)
          goto LABEL_91;
        v35 = *(_QWORD *)(v74 + 8 * v8);
        if (!v35)
        {
          v36 = v34 + 3;
          if (v36 >= v76)
            goto LABEL_91;
          v35 = *(_QWORD *)(v74 + 8 * v36);
          if (v35)
          {
            v8 = v36;
            break;
          }
          while (1)
          {
            v8 = v36 + 1;
            if (__OFADD__(v36, 1))
              break;
            if (v8 >= v76)
              goto LABEL_91;
            v35 = *(_QWORD *)(v74 + 8 * v8);
            ++v36;
            if (v35)
              goto LABEL_41;
          }
LABEL_96:
          __break(1u);
LABEL_97:
          __break(1u);
LABEL_98:
          swift_bridgeObjectRetain_n();
          v10 = sub_1CA1F1234();
          swift_bridgeObjectRelease();
          v69 = v2;
          if (!v10)
            continue;
LABEL_3:
          v75 = v9;
          v11 = 0;
          v12 = (_QWORD *)MEMORY[0x1E0DEE9E0];
          while (1)
          {
            v2 = v11 + 1;
            if (__OFADD__(v11, 1))
            {
              __break(1u);
LABEL_93:
              __break(1u);
LABEL_94:
              __break(1u);
LABEL_95:
              __break(1u);
              goto LABEL_96;
            }
            v9 = (int64_t)*(id *)(v8 + 8 * v11 + 32);
            isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
            v79 = v12;
            v15 = sub_1CA0AA594(v9);
            v16 = v12[2];
            v17 = (v14 & 1) == 0;
            v18 = v16 + v17;
            if (__OFADD__(v16, v17))
              goto LABEL_93;
            v19 = v14;
            if (v12[3] >= v18)
            {
              if ((isUniquelyReferenced_nonNull_native & 1) != 0)
              {
                if ((v14 & 1) == 0)
                  goto LABEL_14;
              }
              else
              {
                sub_1CA0EFAF8();
                if ((v19 & 1) == 0)
                  goto LABEL_14;
              }
            }
            else
            {
              sub_1CA0EBE7C(v18, isUniquelyReferenced_nonNull_native);
              v20 = sub_1CA0AA594(v9);
              if ((v19 & 1) != (v21 & 1))
                goto LABEL_109;
              v15 = v20;
              if ((v19 & 1) == 0)
              {
LABEL_14:
                v12[(v15 >> 6) + 8] |= 1 << v15;
                v22 = 8 * v15;
                *(_QWORD *)(v12[6] + v22) = v9;
                *(_QWORD *)(v12[7] + v22) = v11;
                v23 = v12[2];
                v24 = __OFADD__(v23, 1);
                v25 = v23 + 1;
                if (v24)
                  goto LABEL_95;
                v12[2] = v25;
                v26 = (id)v9;
                goto LABEL_5;
              }
            }
            *(_QWORD *)(v12[7] + 8 * v15) = v11;
LABEL_5:

            swift_bridgeObjectRelease();
            ++v11;
            if (v2 == v10)
            {
              swift_bridgeObjectRelease();
              v2 = v69;
              if (!v75)
                goto LABEL_19;
LABEL_100:
              swift_bridgeObjectRetain();
              v9 = sub_1CA1F1234();
              v27 = sub_1CA1F1234();
              swift_bridgeObjectRelease();
              goto LABEL_20;
            }
          }
        }
      }
    }
    break;
  }
LABEL_41:
  v31 = (v35 - 1) & v35;
  v33 = __clz(__rbit64(v35)) + (v8 << 6);
  if (!v12[2])
    goto LABEL_25;
LABEL_42:
  v37 = 8 * v33;
  v38 = *(_QWORD *)(*(_QWORD *)(v2 + 56) + v37);
  v39 = *(id *)(*(_QWORD *)(v2 + 48) + v37);
  swift_bridgeObjectRetain();
  v40 = sub_1CA0AA594((uint64_t)v39);
  if ((v41 & 1) == 0)
  {
    swift_bridgeObjectRelease();

    goto LABEL_25;
  }
  v71 = v27;
  v66 = v9;
  v67 = *(_QWORD *)(v12[7] + 8 * v40);
  if ((v38 & 0xC000000000000001) != 0)
  {
    sub_1CA1F0F64();
    sub_1CA0B6A1C();
    sub_1CA0C0614();
    sub_1CA1F0CC4();
    v38 = (unint64_t)v79;
    v73 = v80;
    v42 = v81;
    v43 = v82;
    v9 = v83;
  }
  else
  {
    v43 = 0;
    v44 = -1 << *(_BYTE *)(v38 + 32);
    v73 = (_QWORD *)(v38 + 56);
    v42 = ~v44;
    v45 = -v44;
    if (v45 < 64)
      v46 = ~(-1 << v45);
    else
      v46 = -1;
    v9 = v46 & *(_QWORD *)(v38 + 56);
  }
  v70 = (_QWORD *)v28;
  v72 = (unint64_t)(v42 + 64) >> 6;
  v65 = v67 * v71;
  while (2)
  {
    v2 = v43;
    while (1)
    {
      if ((v38 & 0x8000000000000000) != 0)
      {
        if (!sub_1CA1F0FD0())
          goto LABEL_90;
        sub_1CA0B6A1C();
        swift_unknownObjectRetain();
        swift_dynamicCast();
        v49 = v77;
        swift_unknownObjectRelease();
        v43 = v2;
        v47 = v9;
        if (!v77)
          goto LABEL_90;
      }
      else
      {
        if (v9)
        {
          v47 = (v9 - 1) & v9;
          v48 = __clz(__rbit64(v9)) | (v2 << 6);
          v43 = v2;
        }
        else
        {
          v50 = v2 + 1;
          if (__OFADD__(v2, 1))
            goto LABEL_97;
          if (v50 >= v72)
            goto LABEL_90;
          v51 = v73[v50];
          v43 = v2 + 1;
          if (!v51)
          {
            v43 = v2 + 2;
            if (v2 + 2 >= v72)
              goto LABEL_90;
            v51 = v73[v43];
            if (!v51)
            {
              v43 = v2 + 3;
              if (v2 + 3 >= v72)
                goto LABEL_90;
              v51 = v73[v43];
              if (!v51)
              {
                v43 = v2 + 4;
                if (v2 + 4 >= v72)
                  goto LABEL_90;
                v51 = v73[v43];
                if (!v51)
                {
                  v52 = v2 + 5;
                  while (v72 != v52)
                  {
                    v51 = v73[v52++];
                    if (v51)
                    {
                      v43 = v52 - 1;
                      goto LABEL_73;
                    }
                  }
LABEL_90:
                  sub_1CA0B6A14();

                  v2 = v69;
                  v28 = (uint64_t)v70;
                  v9 = v66;
                  v27 = v71;
                  goto LABEL_25;
                }
              }
            }
          }
LABEL_73:
          v47 = (v51 - 1) & v51;
          v48 = __clz(__rbit64(v51)) + (v43 << 6);
        }
        v49 = *(id *)(*(_QWORD *)(v38 + 48) + 8 * v48);
        if (!v49)
          goto LABEL_90;
      }
      if (v12[2])
        break;
LABEL_53:

      v2 = v43;
      v9 = v47;
    }
    v53 = v47;
    v54 = v49;
    v55 = sub_1CA0AA594((uint64_t)v54);
    if ((v56 & 1) == 0)
    {

      goto LABEL_53;
    }
    v57 = *(_QWORD *)(v12[7] + 8 * v55);

    if ((unsigned __int128)(v67 * (__int128)v71) >> 64 != (v67 * v71) >> 63)
      goto LABEL_102;
    v58 = v65 + v57;
    if (__OFADD__(v65, v57))
    {
LABEL_103:
      __break(1u);
      break;
    }
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) != 0)
    {
      v59 = v70;
      if ((v58 & 0x8000000000000000) != 0)
        break;
      goto LABEL_81;
    }
    v59 = sub_1CA0B6058(v70);
    if ((v58 & 0x8000000000000000) == 0)
    {
LABEL_81:
      v60 = v59[2];
      if (v58 >= v60)
        goto LABEL_105;
      v59[v58 + 4] = 0x3FF0000000000000;
      if ((a1 & 1) != 0)
      {
LABEL_87:
        v70 = v59;

        v9 = v53;
        continue;
      }
      v61 = v57 * v71;
      if ((unsigned __int128)(v57 * (__int128)v71) >> 64 != (v57 * v71) >> 63)
        goto LABEL_106;
      v24 = __OFADD__(v61, v67);
      v62 = v61 + v67;
      if (!v24)
      {
        if (v62 >= v60)
          goto LABEL_108;
        v59[v62 + 4] = 0x3FF0000000000000;
        goto LABEL_87;
      }
      goto LABEL_107;
    }
    break;
  }
  __break(1u);
LABEL_105:
  __break(1u);
LABEL_106:
  __break(1u);
LABEL_107:
  __break(1u);
LABEL_108:
  __break(1u);
LABEL_109:
  sub_1CA0B6A1C();
  result = sub_1CA1F1360();
  __break(1u);
  return result;
}

uint64_t sub_1CA11B634(uint64_t a1)
{
  uint64_t v1;
  unint64_t isUniquelyReferenced_nonNull_native;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  _QWORD *v19;
  id v20;
  BOOL v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  uint64_t v25;
  int64_t v26;
  unint64_t v27;
  uint64_t v28;
  id v29;
  unint64_t v30;
  char v31;
  uint64_t v32;
  unint64_t v33;
  uint64_t v34;
  _QWORD *v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  unint64_t v44;
  uint64_t v45;
  uint64_t v46;
  id v47;
  int64_t v48;
  unint64_t v49;
  uint64_t v50;
  id v51;
  unint64_t v52;
  char v53;
  uint64_t v54;
  uint64_t v55;
  char v56;
  unint64_t v57;
  uint64_t v58;
  _BOOL8 v59;
  uint64_t v60;
  char v61;
  unint64_t v62;
  char v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  char v67;
  unint64_t v68;
  uint64_t v69;
  _BOOL8 v70;
  uint64_t v71;
  char v72;
  unint64_t v73;
  char v74;
  uint64_t v75;
  uint64_t v76;
  id v77;
  uint64_t v78;
  unint64_t v79;
  uint64_t v80;
  uint64_t v81;
  unint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  int64_t v86;
  unint64_t v87;
  unint64_t v88;
  unint64_t v89;
  unint64_t v90;
  unint64_t v91;
  id v92;
  int64_t v93;
  unint64_t v94;
  unint64_t v95;
  id v96;
  unint64_t v97;
  char v98;
  uint64_t v99;
  _QWORD *v100;
  _QWORD *v101;
  uint64_t result;
  unint64_t v103;
  uint64_t v104;
  unint64_t v105;
  int64_t v107;
  uint64_t v108;
  unint64_t v109;
  unint64_t v110;
  uint64_t v111;
  id v112;
  _QWORD *v113;
  int64_t v114;
  uint64_t v115;
  uint64_t v116;
  void *v117;
  unint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  unint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  unint64_t v128;
  _QWORD *v129;
  uint64_t v130;
  uint64_t v131;
  unint64_t v132;
  unint64_t v133;

  v118 = MEMORY[0x1E0DEE9D8];
  isUniquelyReferenced_nonNull_native = *(_QWORD *)(v1 + 16);
  v3 = swift_bridgeObjectRetain();
  sub_1CA0C1F1C(v3);
  sub_1CA0B2380(v4);
  v5 = swift_bridgeObjectRetain();
  v6 = sub_1CA115C1C(v5);
  swift_bridgeObjectRelease();
  v7 = sub_1CA0C68DC(v6);
  swift_bridgeObjectRelease();
  sub_1CA0B2380(v7);
  if (v118 >> 62)
    goto LABEL_156;
  v8 = *(_QWORD *)((v118 & 0xFFFFFFFFFFFFF8) + 0x10);
LABEL_3:
  v113 = (_QWORD *)sub_1CA0B4464(v8, 0.0);
  v9 = swift_bridgeObjectRetain();
  sub_1CA0C1F1C(v9);
  v11 = v10;
  v103 = v8;
  if ((v10 & 0xC000000000000001) != 0)
  {
    sub_1CA1F0F64();
    sub_1CA0B6A1C();
    sub_1CA0C0614();
    sub_1CA1F0CC4();
    v11 = v119;
    v108 = v120;
    v12 = v121;
    v13 = v122;
    v14 = v123;
  }
  else
  {
    v13 = 0;
    v15 = -1 << *(_BYTE *)(v10 + 32);
    v108 = v10 + 56;
    v12 = ~v15;
    v16 = -v15;
    if (v16 < 64)
      v17 = ~(-1 << v16);
    else
      v17 = -1;
    v14 = v17 & *(_QWORD *)(v10 + 56);
  }
  v18 = 0;
  v19 = (_QWORD *)MEMORY[0x1E0DEE9E0];
  v107 = (unint64_t)(v12 + 64) >> 6;
  v104 = v11;
  v105 = isUniquelyReferenced_nonNull_native;
  while (1)
  {
    v22 = v13;
    if ((v11 & 0x8000000000000000) == 0)
      break;
    v25 = sub_1CA1F0FD0();
    if (!v25)
      goto LABEL_104;
    v117 = (void *)v25;
    sub_1CA0B6A1C();
    swift_unknownObjectRetain();
    swift_dynamicCast();
    swift_unknownObjectRelease();
    v20 = v129;
    if (!v129)
      goto LABEL_104;
LABEL_34:
    if (*(_QWORD *)(isUniquelyReferenced_nonNull_native + 16))
    {
      v112 = v20;
      v29 = v20;
      v30 = sub_1CA0AA594((uint64_t)v29);
      if ((v31 & 1) != 0)
      {
        v110 = v14;
        v111 = v13;
        v32 = *(_QWORD *)(*(_QWORD *)(isUniquelyReferenced_nonNull_native + 56) + 8 * v30);
        swift_bridgeObjectRetain();

        if ((a1 | 2) == 3)
        {
          v33 = v32 & 0xC000000000000001;
          if ((v32 & 0xC000000000000001) != 0)
            v34 = sub_1CA1F0FA0();
          else
            v34 = *(_QWORD *)(v32 + 16);
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) != 0)
            v35 = v113;
          else
            v35 = sub_1CA0B6058(v113);
          if (v18 >= v35[2])
            goto LABEL_154;
          *(double *)&v35[v18 + 4] = (double)v34;
        }
        else
        {
          v33 = v32 & 0xC000000000000001;
          v35 = v113;
        }
        v109 = v18;
        v113 = v35;
        if (v33)
        {
          sub_1CA1F0F64();
          sub_1CA0B6A1C();
          sub_1CA0C0614();
          sub_1CA1F0CC4();
          v32 = v124;
          v115 = v125;
          v36 = v126;
          v37 = v127;
          v38 = v128;
        }
        else
        {
          v37 = 0;
          v115 = v32 + 56;
          v39 = -1 << *(_BYTE *)(v32 + 32);
          v40 = ~v39;
          v41 = -v39;
          if (v41 < 64)
            v42 = ~(-1 << v41);
          else
            v42 = -1;
          v38 = v42 & *(_QWORD *)(v32 + 56);
          v36 = v40;
        }
        v114 = (unint64_t)(v36 + 64) >> 6;
        while (1)
        {
          if (v32 < 0)
          {
            v46 = sub_1CA1F0FD0();
            if (!v46)
              goto LABEL_102;
            v117 = (void *)v46;
            isUniquelyReferenced_nonNull_native = sub_1CA0B6A1C();
            swift_unknownObjectRetain();
            swift_dynamicCast();
            v47 = v129;
            swift_unknownObjectRelease();
            v45 = v37;
            v43 = v38;
            if (!v129)
              goto LABEL_102;
          }
          else
          {
            if (v38)
            {
              v43 = (v38 - 1) & v38;
              v44 = __clz(__rbit64(v38)) | (v37 << 6);
              v45 = v37;
            }
            else
            {
              v48 = v37 + 1;
              if (__OFADD__(v37, 1))
                goto LABEL_148;
              if (v48 >= v114)
                goto LABEL_102;
              v49 = *(_QWORD *)(v115 + 8 * v48);
              v45 = v37 + 1;
              if (!v49)
              {
                v45 = v37 + 2;
                if (v37 + 2 >= v114)
                  goto LABEL_102;
                v49 = *(_QWORD *)(v115 + 8 * v45);
                if (!v49)
                {
                  v45 = v37 + 3;
                  if (v37 + 3 >= v114)
                    goto LABEL_102;
                  v49 = *(_QWORD *)(v115 + 8 * v45);
                  if (!v49)
                  {
                    v45 = v37 + 4;
                    if (v37 + 4 >= v114)
                      goto LABEL_102;
                    v49 = *(_QWORD *)(v115 + 8 * v45);
                    if (!v49)
                    {
                      v50 = v37 + 5;
                      while (v114 != v50)
                      {
                        v49 = *(_QWORD *)(v115 + 8 * v50++);
                        if (v49)
                        {
                          v45 = v50 - 1;
                          goto LABEL_73;
                        }
                      }
LABEL_102:
                      sub_1CA0B6A14();
                      v18 = v109;
                      v14 = v110;
                      v11 = v104;
                      isUniquelyReferenced_nonNull_native = v105;
                      v13 = v111;
                      goto LABEL_11;
                    }
                  }
                }
              }
LABEL_73:
              v43 = (v49 - 1) & v49;
              v44 = __clz(__rbit64(v49)) + (v45 << 6);
            }
            v47 = *(id *)(*(_QWORD *)(v32 + 48) + 8 * v44);
            if (!v47)
              goto LABEL_102;
          }
          if (!v19[2])
            goto LABEL_86;
          v51 = v47;
          v52 = sub_1CA0AA594((uint64_t)v51);
          if ((v53 & 1) == 0)
            break;
          v54 = *(_QWORD *)(v19[7] + 8 * v52);
          v55 = v54 + 1;
          if (__OFADD__(v54, 1))
            goto LABEL_146;
          isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
          v129 = v19;
          v57 = sub_1CA0AA594((uint64_t)v51);
          v58 = v19[2];
          v59 = (v56 & 1) == 0;
          v60 = v58 + v59;
          if (__OFADD__(v58, v59))
            goto LABEL_147;
          v61 = v56;
          if (v19[3] >= v60)
          {
            if ((isUniquelyReferenced_nonNull_native & 1) != 0)
            {
              if ((v56 & 1) == 0)
                goto LABEL_82;
            }
            else
            {
              sub_1CA0EFAF8();
              if ((v61 & 1) == 0)
                goto LABEL_82;
            }
          }
          else
          {
            sub_1CA0EBE7C(v60, isUniquelyReferenced_nonNull_native);
            v62 = sub_1CA0AA594((uint64_t)v51);
            if ((v61 & 1) != (v63 & 1))
              goto LABEL_157;
            v57 = v62;
            if ((v61 & 1) == 0)
            {
LABEL_82:
              v19[(v57 >> 6) + 8] |= 1 << v57;
              v64 = 8 * v57;
              *(_QWORD *)(v19[6] + v64) = v51;
              *(_QWORD *)(v19[7] + v64) = v55;
              v65 = v19[2];
              v21 = __OFADD__(v65, 1);
              v66 = v65 + 1;
              if (v21)
                goto LABEL_151;
              goto LABEL_94;
            }
          }
          *(_QWORD *)(v19[7] + 8 * v57) = v55;
LABEL_53:

          swift_bridgeObjectRelease();
          v37 = v45;
          v38 = v43;
        }

LABEL_86:
        v51 = v47;
        isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
        v129 = v19;
        v68 = sub_1CA0AA594((uint64_t)v51);
        v69 = v19[2];
        v70 = (v67 & 1) == 0;
        v71 = v69 + v70;
        if (__OFADD__(v69, v70))
        {
          __break(1u);
LABEL_145:
          __break(1u);
LABEL_146:
          __break(1u);
LABEL_147:
          __break(1u);
LABEL_148:
          __break(1u);
LABEL_149:
          __break(1u);
LABEL_150:
          __break(1u);
LABEL_151:
          __break(1u);
LABEL_152:
          __break(1u);
LABEL_153:
          __break(1u);
LABEL_154:
          __break(1u);
LABEL_155:
          __break(1u);
LABEL_156:
          swift_bridgeObjectRetain();
          v8 = sub_1CA1F1234();
          swift_bridgeObjectRelease();
          goto LABEL_3;
        }
        v72 = v67;
        if (v19[3] >= v71)
        {
          if ((isUniquelyReferenced_nonNull_native & 1) != 0)
          {
            if ((v67 & 1) != 0)
              goto LABEL_52;
          }
          else
          {
            sub_1CA0EFAF8();
            if ((v72 & 1) != 0)
              goto LABEL_52;
          }
        }
        else
        {
          sub_1CA0EBE7C(v71, isUniquelyReferenced_nonNull_native);
          v73 = sub_1CA0AA594((uint64_t)v51);
          if ((v72 & 1) != (v74 & 1))
          {
LABEL_157:
            sub_1CA0B6A1C();
            result = sub_1CA1F1360();
            __break(1u);
            return result;
          }
          v68 = v73;
          if ((v72 & 1) != 0)
          {
LABEL_52:
            *(_QWORD *)(v19[7] + 8 * v68) = 1;
            goto LABEL_53;
          }
        }
        v19[(v68 >> 6) + 8] |= 1 << v68;
        v75 = 8 * v68;
        *(_QWORD *)(v19[6] + v75) = v51;
        *(_QWORD *)(v19[7] + v75) = 1;
        v76 = v19[2];
        v21 = __OFADD__(v76, 1);
        v66 = v76 + 1;
        if (v21)
          goto LABEL_145;
LABEL_94:
        v19[2] = v66;
        v77 = v51;
        goto LABEL_53;
      }

LABEL_11:
      v20 = v112;
    }

    v21 = __OFADD__(v18++, 1);
    if (v21)
      goto LABEL_149;
  }
  if (v14)
  {
    v23 = __clz(__rbit64(v14));
    v14 &= v14 - 1;
    v24 = v23 | (v13 << 6);
    goto LABEL_33;
  }
  v26 = v13 + 1;
  if (__OFADD__(v13, 1))
    goto LABEL_152;
  if (v26 < v107)
  {
    v27 = *(_QWORD *)(v108 + 8 * v26);
    ++v13;
    if (!v27)
    {
      v13 = v22 + 2;
      if (v22 + 2 >= v107)
        goto LABEL_104;
      v27 = *(_QWORD *)(v108 + 8 * v13);
      if (!v27)
      {
        v13 = v22 + 3;
        if (v22 + 3 >= v107)
          goto LABEL_104;
        v27 = *(_QWORD *)(v108 + 8 * v13);
        if (!v27)
        {
          v13 = v22 + 4;
          if (v22 + 4 >= v107)
            goto LABEL_104;
          v27 = *(_QWORD *)(v108 + 8 * v13);
          if (!v27)
          {
            v28 = v22 + 5;
            do
            {
              if (v107 == v28)
                goto LABEL_104;
              v27 = *(_QWORD *)(v108 + 8 * v28++);
            }
            while (!v27);
            v13 = v28 - 1;
          }
        }
      }
    }
    v14 = (v27 - 1) & v27;
    v24 = __clz(__rbit64(v27)) + (v13 << 6);
LABEL_33:
    v20 = *(id *)(*(_QWORD *)(v11 + 48) + 8 * v24);
    if (!v20)
      goto LABEL_104;
    goto LABEL_34;
  }
LABEL_104:
  sub_1CA0B6A14();
  v78 = swift_bridgeObjectRetain();
  v79 = sub_1CA115C1C(v78);
  swift_bridgeObjectRelease();
  v80 = sub_1CA0C68DC(v79);
  swift_bridgeObjectRelease();
  if ((v80 & 0xC000000000000001) != 0)
  {
    sub_1CA1F0F64();
    sub_1CA0B6A1C();
    sub_1CA0C0614();
    sub_1CA1F0CC4();
    v80 = (uint64_t)v129;
    v116 = v130;
    v81 = v131;
    isUniquelyReferenced_nonNull_native = v132;
    v82 = v133;
  }
  else
  {
    isUniquelyReferenced_nonNull_native = 0;
    v83 = -1 << *(_BYTE *)(v80 + 32);
    v116 = v80 + 56;
    v81 = ~v83;
    v84 = -v83;
    if (v84 < 64)
      v85 = ~(-1 << v84);
    else
      v85 = -1;
    v82 = v85 & *(_QWORD *)(v80 + 56);
  }
  v86 = (unint64_t)(v81 + 64) >> 6;
  while (1)
  {
    v88 = v18;
    v89 = isUniquelyReferenced_nonNull_native;
    if ((v80 & 0x8000000000000000) == 0)
      break;
    if (!sub_1CA1F0FD0())
      goto LABEL_143;
    sub_1CA0B6A1C();
    swift_unknownObjectRetain();
    swift_dynamicCast();
    v92 = v117;
    swift_unknownObjectRelease();
    if (!v117)
      goto LABEL_143;
LABEL_135:
    if (!v19[2])
      goto LABEL_112;
    v96 = v92;
    v97 = sub_1CA0AA594((uint64_t)v96);
    if ((v98 & 1) == 0)
    {

LABEL_112:
      v87 = v88;
      goto LABEL_113;
    }
    v99 = *(_QWORD *)(v19[7] + 8 * v97);

    if ((a1 & 0xFFFFFFFFFFFFFFFELL) != 2)
      goto LABEL_112;
    v87 = v88;
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) != 0)
      v100 = v113;
    else
      v100 = sub_1CA0B6058(v113);
    if (v88 >= v100[2])
      goto LABEL_155;
    v113 = v100;
    *(double *)&v100[v88 + 4] = (double)v99;
LABEL_113:

    v21 = __OFADD__(v87, 1);
    v18 = v87 + 1;
    if (v21)
      goto LABEL_150;
  }
  if (v82)
  {
    v90 = __clz(__rbit64(v82));
    v82 &= v82 - 1;
    v91 = v90 | (isUniquelyReferenced_nonNull_native << 6);
    goto LABEL_134;
  }
  v93 = isUniquelyReferenced_nonNull_native + 1;
  if (__OFADD__(isUniquelyReferenced_nonNull_native, 1))
    goto LABEL_153;
  if (v93 >= v86)
    goto LABEL_143;
  v94 = *(_QWORD *)(v116 + 8 * v93);
  ++isUniquelyReferenced_nonNull_native;
  if (v94)
    goto LABEL_133;
  isUniquelyReferenced_nonNull_native = v89 + 2;
  if ((uint64_t)(v89 + 2) >= v86)
    goto LABEL_143;
  v94 = *(_QWORD *)(v116 + 8 * isUniquelyReferenced_nonNull_native);
  if (v94)
    goto LABEL_133;
  isUniquelyReferenced_nonNull_native = v89 + 3;
  if ((uint64_t)(v89 + 3) >= v86)
    goto LABEL_143;
  v94 = *(_QWORD *)(v116 + 8 * isUniquelyReferenced_nonNull_native);
  if (v94)
    goto LABEL_133;
  isUniquelyReferenced_nonNull_native = v89 + 4;
  if ((uint64_t)(v89 + 4) >= v86)
    goto LABEL_143;
  v94 = *(_QWORD *)(v116 + 8 * isUniquelyReferenced_nonNull_native);
  if (v94)
  {
LABEL_133:
    v82 = (v94 - 1) & v94;
    v91 = __clz(__rbit64(v94)) + (isUniquelyReferenced_nonNull_native << 6);
LABEL_134:
    v92 = *(id *)(*(_QWORD *)(v80 + 48) + 8 * v91);
    if (!v92)
      goto LABEL_143;
    goto LABEL_135;
  }
  v95 = v89 + 5;
  while (v86 != v95)
  {
    v94 = *(_QWORD *)(v116 + 8 * v95++);
    if (v94)
    {
      isUniquelyReferenced_nonNull_native = v95 - 1;
      goto LABEL_133;
    }
  }
LABEL_143:
  sub_1CA0B6A14();
  type metadata accessor for MAVectorRepresentation();
  v101 = (_QWORD *)swift_allocObject();
  v101[2] = 1;
  v101[3] = v103;
  v101[4] = v113;
  v101[5] = v118;
  swift_bridgeObjectRelease();
  return (uint64_t)v101;
}

_QWORD *sub_1CA11C1C4()
{
  uint64_t v0;
  _QWORD *v1;

  if (*(_QWORD *)(v0 + 104))
  {
    v1 = *(_QWORD **)(v0 + 104);
  }
  else
  {
    v1 = sub_1CA11C220(v0);
    *(_QWORD *)(v0 + 104) = v1;
    swift_retain();
    swift_release();
  }
  swift_retain();
  return v1;
}

_QWORD *sub_1CA11C220(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;
  _QWORD *v3;
  int64_t v4;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  int64_t v8;
  id v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  id v15;
  _QWORD *v16;
  _QWORD *result;
  _QWORD *v18;

  v1 = *(_QWORD *)(a1 + 16);
  swift_bridgeObjectRetain_n();
  v2 = sub_1CA0B5C18(v1);
  swift_bridgeObjectRelease();
  v18 = v2;
  sub_1CA115A08(&v18);
  swift_bridgeObjectRelease();
  v3 = v18;
  v4 = v18[2];
  if (v4)
  {
    v5 = (_QWORD *)MEMORY[0x1E0DEE9D8];
    v18 = (_QWORD *)MEMORY[0x1E0DEE9D8];
    sub_1CA0CD56C(0, v4, 0);
    v6 = v18;
    v7 = v3 + 5;
    v8 = v4;
    do
    {
      if ((*v7 & 0xC000000000000001) != 0)
      {
        v9 = (id)*(v7 - 1);
        swift_bridgeObjectRetain();
        v10 = sub_1CA1F0FA0();
        swift_bridgeObjectRelease();

      }
      else
      {
        v10 = *(_QWORD *)(*v7 + 16);
      }
      v18 = v6;
      v12 = v6[2];
      v11 = v6[3];
      v13 = v12 + 1;
      if (v12 >= v11 >> 1)
      {
        sub_1CA0CD56C(v11 > 1, v12 + 1, 1);
        v6 = v18;
      }
      v6[2] = v13;
      *(double *)&v6[v12 + 4] = (double)v10;
      v7 += 2;
      --v8;
    }
    while (v8);
    v18 = v5;
    sub_1CA1F10F0();
    v14 = 4;
    do
    {
      v15 = (id)v3[v14];
      sub_1CA1F10CC();
      sub_1CA1F10FC();
      sub_1CA1F1108();
      sub_1CA1F10D8();
      v14 += 2;
      --v4;
    }
    while (v4);
    v16 = v18;
    swift_release();
  }
  else
  {
    v6 = (_QWORD *)MEMORY[0x1E0DEE9D8];
    v13 = *(_QWORD *)(MEMORY[0x1E0DEE9D8] + 16);
    swift_release();
    v16 = v6;
  }
  type metadata accessor for MAVectorRepresentation();
  result = (_QWORD *)swift_allocObject();
  result[2] = 1;
  result[3] = v13;
  result[4] = v6;
  result[5] = v16;
  return result;
}

uint64_t sub_1CA11C42C(uint64_t a1)
{
  uint64_t v1;

  *(_QWORD *)(v1 + 104) = a1;
  return swift_release();
}

uint64_t (*sub_1CA11C43C(_QWORD *a1))(_QWORD *a1)
{
  uint64_t v1;

  a1[1] = v1;
  *a1 = sub_1CA11C1C4();
  return sub_1CA11C470;
}

uint64_t sub_1CA11C470(_QWORD *a1)
{
  *(_QWORD *)(a1[1] + 104) = *a1;
  return swift_release();
}

uint64_t sub_1CA11C480()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  __int128 v6;
  uint64_t v7;

  if (*(_QWORD *)(v0 + 112))
  {
    v1 = *(_QWORD *)(v0 + 112);
  }
  else
  {
    v2 = v0;
    v3 = sub_1CA11C1C4();
    MAMatrix.diag()();
    v4 = v3[5];
    swift_bridgeObjectRetain();
    swift_release();
    type metadata accessor for MASquareMatrixRepresentation();
    v1 = swift_allocObject();
    *(_OWORD *)(v1 + 16) = v6;
    *(_QWORD *)(v1 + 32) = v7;
    *(_QWORD *)(v1 + 40) = v4;
    *(_QWORD *)(v2 + 112) = v1;
    swift_retain();
    swift_release();
  }
  swift_retain();
  return v1;
}

uint64_t sub_1CA11C54C(uint64_t a1)
{
  uint64_t v1;

  *(_QWORD *)(v1 + 112) = a1;
  return swift_release();
}

uint64_t (*sub_1CA11C55C(uint64_t *a1))(_QWORD *a1)
{
  uint64_t v1;

  a1[1] = v1;
  *a1 = sub_1CA11C480();
  return sub_1CA11C590;
}

uint64_t sub_1CA11C590(_QWORD *a1)
{
  *(_QWORD *)(a1[1] + 112) = *a1;
  return swift_release();
}

_QWORD *sub_1CA11C5A0()
{
  uint64_t v0;
  _QWORD *v1;

  if (*(_QWORD *)(v0 + 120))
  {
    v1 = *(_QWORD **)(v0 + 120);
  }
  else
  {
    v1 = sub_1CA11C5FC();
    *(_QWORD *)(v0 + 120) = v1;
    swift_retain();
    swift_release();
  }
  swift_retain();
  return v1;
}

_QWORD *sub_1CA11C5FC()
{
  _QWORD *v0;
  unint64_t v1;
  vDSP_Length v2;
  uint64_t v3;
  _QWORD *v4;
  const double *v5;
  double *v6;
  unint64_t v7;
  uint64_t v8;
  _QWORD *result;

  v0 = (_QWORD *)sub_1CA118E2C();
  v2 = v0[2];
  v1 = v0[3];
  v3 = v0[4];
  swift_bridgeObjectRetain();
  v4 = (_QWORD *)sub_1CA0B4464(v1, 0.0);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    v4 = sub_1CA0B6058(v4);
    if ((v1 & 0x8000000000000000) == 0)
      goto LABEL_3;
LABEL_9:
    __break(1u);
    goto LABEL_10;
  }
  if ((v1 & 0x8000000000000000) != 0)
    goto LABEL_9;
LABEL_3:
  if (!v1)
  {
LABEL_7:
    swift_bridgeObjectRelease();
    v8 = v0[6];
    swift_bridgeObjectRetain();
    swift_release();
    type metadata accessor for MAVectorRepresentation();
    result = (_QWORD *)swift_allocObject();
    result[2] = 1;
    result[3] = v1;
    result[4] = v4;
    result[5] = v8;
    return result;
  }
  v5 = (const double *)(v3 + 32);
  v6 = (double *)(v4 + 4);
  v7 = v1;
  while ((v2 & 0x8000000000000000) == 0)
  {
    vDSP_sveD(v5++, v1, v6++, v2);
    if (!--v7)
      goto LABEL_7;
  }
LABEL_10:
  result = (_QWORD *)sub_1CA1F11BC();
  __break(1u);
  return result;
}

uint64_t sub_1CA11C744(uint64_t a1)
{
  uint64_t v1;

  *(_QWORD *)(v1 + 120) = a1;
  return swift_release();
}

uint64_t (*sub_1CA11C754(_QWORD *a1))(_QWORD *a1)
{
  uint64_t v1;

  a1[1] = v1;
  *a1 = sub_1CA11C5A0();
  return sub_1CA11C788;
}

uint64_t sub_1CA11C788(_QWORD *a1)
{
  *(_QWORD *)(a1[1] + 120) = *a1;
  return swift_release();
}

uint64_t sub_1CA11C798()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  __int128 v6;
  uint64_t v7;

  if (*(_QWORD *)(v0 + 128))
  {
    v1 = *(_QWORD *)(v0 + 128);
  }
  else
  {
    v2 = v0;
    v3 = sub_1CA11C5A0();
    MAMatrix.diag()();
    v4 = v3[5];
    swift_bridgeObjectRetain();
    swift_release();
    type metadata accessor for MASquareMatrixRepresentation();
    v1 = swift_allocObject();
    *(_OWORD *)(v1 + 16) = v6;
    *(_QWORD *)(v1 + 32) = v7;
    *(_QWORD *)(v1 + 40) = v4;
    *(_QWORD *)(v2 + 128) = v1;
    swift_retain();
    swift_release();
  }
  swift_retain();
  return v1;
}

uint64_t sub_1CA11C864(uint64_t a1)
{
  uint64_t v1;

  *(_QWORD *)(v1 + 128) = a1;
  return swift_release();
}

uint64_t (*sub_1CA11C874(uint64_t *a1))(_QWORD *a1)
{
  uint64_t v1;

  a1[1] = v1;
  *a1 = sub_1CA11C798();
  return sub_1CA11C8A8;
}

uint64_t sub_1CA11C8A8(_QWORD *a1)
{
  *(_QWORD *)(a1[1] + 128) = *a1;
  return swift_release();
}

_QWORD *sub_1CA11C8B8()
{
  uint64_t v0;
  _QWORD *v1;

  if (*(_QWORD *)(v0 + 136))
  {
    v1 = *(_QWORD **)(v0 + 136);
  }
  else
  {
    v1 = sub_1CA11C914();
    *(_QWORD *)(v0 + 136) = v1;
    swift_retain();
    swift_release();
  }
  swift_retain();
  return v1;
}

_QWORD *sub_1CA11C914()
{
  _QWORD *v0;
  unint64_t v1;
  int64_t v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  double *v6;
  int64_t v7;
  _QWORD *v8;
  uint64_t v9;
  _QWORD *result;

  v0 = (_QWORD *)sub_1CA119878();
  v1 = v0[2];
  v2 = v0[3];
  v3 = v0[4];
  swift_bridgeObjectRetain();
  v4 = (_QWORD *)sub_1CA0B4464(v1, 0.0);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    goto LABEL_16;
  if ((v1 & 0x8000000000000000) != 0)
  {
LABEL_17:
    __break(1u);
LABEL_18:
    swift_bridgeObjectRetain();
    sub_1CA1F1234();
    swift_bridgeObjectRelease();
    goto LABEL_10;
  }
  while (v1)
  {
    v5 = 0;
    v6 = (double *)(v4 + 4);
    while (v1 != v5)
    {
      v7 = v5 * v2;
      if ((unsigned __int128)(v5 * (__int128)v2) >> 64 != (v5 * v2) >> 63)
        goto LABEL_15;
      if (v2 < 0)
        goto LABEL_20;
      ++v5;
      vDSP_sveD((const double *)(v3 + 32 + 8 * v7), 1, v6++, v2);
      if (v1 == v5)
        goto LABEL_9;
    }
    __break(1u);
LABEL_15:
    __break(1u);
LABEL_16:
    v4 = sub_1CA0B6058(v4);
    if ((v1 & 0x8000000000000000) != 0)
      goto LABEL_17;
  }
LABEL_9:
  swift_bridgeObjectRelease();
  if (v0[6] >> 62)
    goto LABEL_18;
LABEL_10:
  swift_bridgeObjectRetain();
  v8 = v4;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    v8 = sub_1CA0B6058(v4);
  if (v4[2] >> 31)
  {
    __break(1u);
LABEL_20:
    result = (_QWORD *)sub_1CA1F11BC();
    __break(1u);
  }
  else
  {
    cblas_dscal_NEWLAPACK();
    swift_bridgeObjectRelease();
    v9 = v0[5];
    swift_bridgeObjectRetain();
    swift_release();
    type metadata accessor for MAVectorRepresentation();
    result = (_QWORD *)swift_allocObject();
    result[2] = v1;
    result[3] = 1;
    result[4] = v8;
    result[5] = v9;
  }
  return result;
}

uint64_t sub_1CA11CB08(uint64_t a1)
{
  uint64_t v1;

  *(_QWORD *)(v1 + 136) = a1;
  return swift_release();
}

uint64_t (*sub_1CA11CB18(_QWORD *a1))(_QWORD *a1)
{
  uint64_t v1;

  a1[1] = v1;
  *a1 = sub_1CA11C8B8();
  return sub_1CA11CB4C;
}

uint64_t sub_1CA11CB4C(_QWORD *a1)
{
  *(_QWORD *)(a1[1] + 136) = *a1;
  return swift_release();
}

uint64_t sub_1CA11CB5C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  __int128 v6;
  uint64_t v7;

  if (*(_QWORD *)(v0 + 144))
  {
    v1 = *(_QWORD *)(v0 + 144);
  }
  else
  {
    v2 = v0;
    v3 = sub_1CA11C8B8();
    MAMatrix.diag()();
    v4 = v3[5];
    swift_bridgeObjectRetain();
    swift_release();
    type metadata accessor for MASquareMatrixRepresentation();
    v1 = swift_allocObject();
    *(_OWORD *)(v1 + 16) = v6;
    *(_QWORD *)(v1 + 32) = v7;
    *(_QWORD *)(v1 + 40) = v4;
    *(_QWORD *)(v2 + 144) = v1;
    swift_retain();
    swift_release();
  }
  swift_retain();
  return v1;
}

uint64_t sub_1CA11CC28(uint64_t a1)
{
  uint64_t v1;

  *(_QWORD *)(v1 + 144) = a1;
  return swift_release();
}

uint64_t (*sub_1CA11CC38(uint64_t *a1))(_QWORD *a1)
{
  uint64_t v1;

  a1[1] = v1;
  *a1 = sub_1CA11CB5C();
  return sub_1CA11CC6C;
}

uint64_t sub_1CA11CC6C(_QWORD *a1)
{
  *(_QWORD *)(a1[1] + 144) = *a1;
  return swift_release();
}

_QWORD *sub_1CA11CC7C()
{
  uint64_t v0;
  _QWORD *v1;

  if (*(_QWORD *)(v0 + 152))
  {
    v1 = *(_QWORD **)(v0 + 152);
  }
  else
  {
    v1 = sub_1CA11CCD8();
    *(_QWORD *)(v0 + 152) = v1;
    swift_retain();
    swift_release();
  }
  swift_retain();
  return v1;
}

_QWORD *sub_1CA11CCD8()
{
  _QWORD *v0;
  unint64_t v1;
  vDSP_Length v2;
  uint64_t v3;
  _QWORD *v4;
  const double *v5;
  double *v6;
  unint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  _QWORD *result;

  v0 = (_QWORD *)sub_1CA119878();
  v2 = v0[2];
  v1 = v0[3];
  v3 = v0[4];
  swift_bridgeObjectRetain();
  v4 = (_QWORD *)sub_1CA0B4464(v1, 0.0);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) != 0)
  {
    if ((v1 & 0x8000000000000000) == 0)
      goto LABEL_3;
LABEL_13:
    __break(1u);
LABEL_14:
    swift_bridgeObjectRetain();
    sub_1CA1F1234();
    swift_bridgeObjectRelease();
    goto LABEL_8;
  }
  v4 = sub_1CA0B6058(v4);
  if ((v1 & 0x8000000000000000) != 0)
    goto LABEL_13;
LABEL_3:
  if (v1)
  {
    v5 = (const double *)(v3 + 32);
    v6 = (double *)(v4 + 4);
    v7 = v1;
    while ((v2 & 0x8000000000000000) == 0)
    {
      vDSP_sveD(v5++, v1, v6++, v2);
      if (!--v7)
        goto LABEL_7;
    }
    goto LABEL_16;
  }
LABEL_7:
  swift_bridgeObjectRelease();
  if (v0[5] >> 62)
    goto LABEL_14;
LABEL_8:
  swift_bridgeObjectRetain();
  v8 = v4;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    v8 = sub_1CA0B6058(v4);
  if (!(v4[2] >> 31))
  {
    cblas_dscal_NEWLAPACK();
    swift_bridgeObjectRelease();
    v9 = v0[6];
    swift_bridgeObjectRetain();
    swift_release();
    type metadata accessor for MAVectorRepresentation();
    result = (_QWORD *)swift_allocObject();
    result[2] = 1;
    result[3] = v1;
    result[4] = v8;
    result[5] = v9;
    return result;
  }
  __break(1u);
LABEL_16:
  result = (_QWORD *)sub_1CA1F11BC();
  __break(1u);
  return result;
}

uint64_t sub_1CA11CEB4(uint64_t a1)
{
  uint64_t v1;

  *(_QWORD *)(v1 + 152) = a1;
  return swift_release();
}

uint64_t (*sub_1CA11CEC4(_QWORD *a1))(_QWORD *a1)
{
  uint64_t v1;

  a1[1] = v1;
  *a1 = sub_1CA11CC7C();
  return sub_1CA11CEF8;
}

uint64_t sub_1CA11CEF8(_QWORD *a1)
{
  *(_QWORD *)(a1[1] + 152) = *a1;
  return swift_release();
}

uint64_t sub_1CA11CF08()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  __int128 v6;
  uint64_t v7;

  if (*(_QWORD *)(v0 + 160))
  {
    v1 = *(_QWORD *)(v0 + 160);
  }
  else
  {
    v2 = v0;
    v3 = sub_1CA11CC7C();
    MAMatrix.diag()();
    v4 = v3[5];
    swift_bridgeObjectRetain();
    swift_release();
    type metadata accessor for MASquareMatrixRepresentation();
    v1 = swift_allocObject();
    *(_OWORD *)(v1 + 16) = v6;
    *(_QWORD *)(v1 + 32) = v7;
    *(_QWORD *)(v1 + 40) = v4;
    *(_QWORD *)(v2 + 160) = v1;
    swift_retain();
    swift_release();
  }
  swift_retain();
  return v1;
}

uint64_t sub_1CA11CFD4(uint64_t a1)
{
  uint64_t v1;

  *(_QWORD *)(v1 + 160) = a1;
  return swift_release();
}

uint64_t (*sub_1CA11CFE4(uint64_t *a1))(_QWORD *a1)
{
  uint64_t v1;

  a1[1] = v1;
  *a1 = sub_1CA11CF08();
  return sub_1CA11D018;
}

uint64_t sub_1CA11D018(_QWORD *a1)
{
  *(_QWORD *)(a1[1] + 160) = *a1;
  return swift_release();
}

double sub_1CA11D028()
{
  uint64_t v0;
  unint64_t v1;
  int64_t v2;
  uint64_t v3;
  unint64_t v4;
  double v5;
  uint64_t v7[3];
  int64_t v8[3];

  if ((*(_BYTE *)(v0 + 176) & 1) == 0)
    return *(double *)(v0 + 168);
  sub_1CA115D88();
  v2 = v1;
  v3 = sub_1CA0B4464(v1, 1.0);
  sub_1CA115D88();
  v8[0] = 1;
  v8[1] = v2;
  v8[2] = v3;
  v7[0] = 1;
  v7[1] = v4;
  v7[2] = sub_1CA0B4464(v4, 0.0);
  v5 = sub_1CA1358E0(v8, v7);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  *(double *)(v0 + 168) = v5;
  *(_BYTE *)(v0 + 176) = 0;
  return v5;
}

_QWORD *sub_1CA11D0EC()
{
  uint64_t v0;
  _QWORD *v1;

  if (*(_QWORD *)(v0 + 184))
  {
    v1 = *(_QWORD **)(v0 + 184);
  }
  else
  {
    v1 = sub_1CA11D148();
    *(_QWORD *)(v0 + 184) = v1;
    swift_retain();
    swift_release();
  }
  swift_retain();
  return v1;
}

_QWORD *sub_1CA11D148()
{
  unint64_t v0;
  _QWORD *v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  double v16;
  unint64_t v17;
  uint64_t v18;
  BOOL v19;
  unint64_t v20;
  _QWORD *v21;
  uint64_t v22;
  _QWORD *result;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  _QWORD *v30;
  uint64_t v31;
  BOOL v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35[3];
  int64_t v36[3];
  char v37;

  v2 = (_QWORD *)sub_1CA118E2C();
  v3 = v2[5];
  if ((unint64_t)v3 >> 62)
    goto LABEL_72;
  v4 = *(_QWORD *)((v3 & 0xFFFFFFFFFFFFF8) + 0x10);
LABEL_3:
  v5 = *(_QWORD *)((v3 & 0xFFFFFFFFFFFFF8) + 0x10);
LABEL_4:
  if ((unsigned __int128)(v4 * (__int128)v5) >> 64 == (v4 * v5) >> 63)
  {
    v1 = (_QWORD *)sub_1CA0B4464(v4 * v5, 0.0);
    v0 = v2[5];
    if (!(v0 >> 62))
    {
      v3 = *(_QWORD *)((v0 & 0xFFFFFFFFFFFFF8) + 0x10);
      swift_bridgeObjectRetain();
      goto LABEL_7;
    }
  }
  else
  {
    __break(1u);
  }
  swift_bridgeObjectRetain();
  v3 = sub_1CA1F1234();
LABEL_7:
  v26 = v0;
  v24 = v4;
  if (v3)
  {
    v6 = 0;
    v29 = 0;
    v30 = v2;
    v27 = v3;
    v28 = v0 & 0xC000000000000001;
    v25 = v0 & 0xFFFFFFFFFFFFFF8;
    while (1)
    {
      if (v28)
      {
        MEMORY[0x1CAA4A7A4](v6, v26);
        swift_unknownObjectRelease();
      }
      else if ((unint64_t)v6 >= *(_QWORD *)(v25 + 16))
      {
        goto LABEL_71;
      }
      if (__OFADD__(v6, 1))
        goto LABEL_70;
      v7 = v2[5];
      if (v7 >> 62)
      {
        swift_bridgeObjectRetain();
        v3 = sub_1CA1F1234();
        swift_bridgeObjectRelease();
        if (v3 < v6)
        {
LABEL_51:
          __break(1u);
          goto LABEL_52;
        }
      }
      else
      {
        v3 = *(_QWORD *)((v7 & 0xFFFFFFFFFFFFF8) + 0x10);
        if (v3 < v6)
          goto LABEL_51;
      }
      if (v6 != v3)
        break;
LABEL_9:
      ++v6;
      --v29;
      if (v6 == v27)
        goto LABEL_52;
    }
    v8 = 0;
    v31 = v6 * v5;
    v32 = (unsigned __int128)(v6 * (__int128)v5) >> 64 != (v6 * v5) >> 63;
    v33 = v3 + v29;
    while (1)
    {
      if (v8)
      {
        v3 = v2[3];
        if (v3 < 0)
          goto LABEL_83;
        swift_bridgeObjectRetain();
        if (v3)
        {
          v9 = sub_1CA1F0B68();
          *(_QWORD *)(v9 + 16) = v3;
          bzero((void *)(v9 + 32), 8 * v3);
          if ((unint64_t)v3 >> 31)
          {
            __break(1u);
LABEL_56:
            __break(1u);
LABEL_57:
            __break(1u);
LABEL_58:
            __break(1u);
LABEL_59:
            __break(1u);
LABEL_60:
            __break(1u);
LABEL_61:
            __break(1u);
LABEL_62:
            __break(1u);
LABEL_63:
            __break(1u);
LABEL_64:
            __break(1u);
LABEL_65:
            __break(1u);
LABEL_66:
            __break(1u);
LABEL_67:
            __break(1u);
LABEL_68:
            __break(1u);
LABEL_69:
            __break(1u);
LABEL_70:
            __break(1u);
LABEL_71:
            __break(1u);
LABEL_72:
            if (v3 < 0)
              v0 = v3;
            else
              v0 = v3 & 0xFFFFFFFFFFFFFF8;
            swift_bridgeObjectRetain();
            v4 = sub_1CA1F1234();
            swift_bridgeObjectRelease();
            v3 = v2[5];
            if (!((unint64_t)v3 >> 62))
              goto LABEL_3;
            if (v3 < 0)
              v0 = v2[5];
            else
              v0 = v3 & 0xFFFFFFFFFFFFFF8;
            swift_bridgeObjectRetain();
            v5 = sub_1CA1F1234();
            swift_bridgeObjectRelease();
            goto LABEL_4;
          }
        }
        else
        {
          v9 = MEMORY[0x1E0DEE9D8];
        }
        if ((unsigned __int128)(v6 * (__int128)v3) >> 64 != (v6 * v3) >> 63)
          goto LABEL_56;
        v12 = v5;
        cblas_dcopy_NEWLAPACK();
        swift_bridgeObjectRelease();
        v13 = v2[3];
        if (v13 < 0)
          goto LABEL_83;
        v14 = v1;
        v34 = v12;
        swift_bridgeObjectRetain();
        if (v13)
        {
          v2 = (_QWORD *)sub_1CA1F0B68();
          v2[2] = v13;
          v1 = v2 + 4;
          bzero(v2 + 4, 8 * v13);
          if ((unint64_t)v13 >> 31)
            goto LABEL_57;
        }
        else
        {
          v2 = (_QWORD *)MEMORY[0x1E0DEE9D8];
          v1 = (_QWORD *)(MEMORY[0x1E0DEE9D8] + 32);
        }
        v15 = v6 + v8;
        if ((unsigned __int128)((v6 + v8) * (__int128)v13) >> 64 != ((v6 + v8) * v13) >> 63)
          goto LABEL_58;
        cblas_dcopy_NEWLAPACK();
        swift_bridgeObjectRelease();
        v36[0] = 1;
        v36[1] = v3;
        v36[2] = v9;
        v35[0] = 1;
        v35[1] = v13;
        v35[2] = (uint64_t)v2;
        v3 = (uint64_t)&v37;
        v16 = sub_1CA1358E0(v36, v35);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        if (v32)
          goto LABEL_59;
        v3 = v31 + v15;
        if (__OFADD__(v31, v15))
          goto LABEL_60;
        v1 = v14;
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
          v1 = sub_1CA0B6058(v14);
        v2 = v30;
        v5 = v34;
        if (v3 < 0)
          goto LABEL_61;
        v17 = v1[2];
        if (v3 >= v17)
          goto LABEL_62;
        *(double *)&v1[v3 + 4] = v16;
        v18 = v15 * v34;
        if ((unsigned __int128)(v15 * (__int128)v34) >> 64 != (v15 * v34) >> 63)
          goto LABEL_63;
        v19 = __OFADD__(v18, v6);
        v20 = v18 + v6;
        if (v19)
          goto LABEL_64;
        if (v20 >= v17)
          goto LABEL_65;
        *(double *)&v1[v20 + 4] = v16;
      }
      else
      {
        v10 = v6 * v5;
        if ((unsigned __int128)(v6 * (__int128)v5) >> 64 != (v6 * v5) >> 63)
          goto LABEL_66;
        v11 = v10 + v6;
        if (__OFADD__(v10, v6))
          goto LABEL_67;
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) != 0)
        {
          if ((v11 & 0x8000000000000000) != 0)
            goto LABEL_68;
        }
        else
        {
          v1 = sub_1CA0B6058(v1);
          if ((v11 & 0x8000000000000000) != 0)
            goto LABEL_68;
        }
        if (v11 >= v1[2])
          goto LABEL_69;
        v1[v11 + 4] = 0;
      }
      if (v33 == ++v8)
        goto LABEL_9;
    }
  }
LABEL_52:
  swift_bridgeObjectRelease();
  sub_1CA11D028();
  swift_bridgeObjectRetain();
  v21 = v1;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    v21 = sub_1CA0B6058(v1);
  if (v1[2] >> 31)
  {
    __break(1u);
LABEL_83:
    result = (_QWORD *)sub_1CA1F11BC();
    __break(1u);
  }
  else
  {
    cblas_dscal_NEWLAPACK();
    swift_bridgeObjectRelease();
    v22 = v2[5];
    swift_bridgeObjectRetain();
    swift_release();
    type metadata accessor for MASquareMatrixRepresentation();
    result = (_QWORD *)swift_allocObject();
    result[2] = v24;
    result[3] = v5;
    result[4] = v21;
    result[5] = v22;
  }
  return result;
}

uint64_t sub_1CA11D6EC(uint64_t a1)
{
  uint64_t v1;

  *(_QWORD *)(v1 + 184) = a1;
  return swift_release();
}

uint64_t (*sub_1CA11D6FC(_QWORD *a1))(_QWORD *a1)
{
  uint64_t v1;

  a1[1] = v1;
  *a1 = sub_1CA11D0EC();
  return sub_1CA11D730;
}

uint64_t sub_1CA11D730(_QWORD *a1)
{
  *(_QWORD *)(a1[1] + 184) = *a1;
  return swift_release();
}

uint64_t sub_1CA11D740(uint64_t a1, uint64_t a2)
{
  _QWORD *v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char v12;
  char v13;
  int64_t v14;
  int64_t v15;
  _QWORD *v16;
  uint64_t result;
  double v18;
  double v19;
  uint64_t v20[3];
  int64_t v21[3];

  v4 = (_QWORD *)sub_1CA118E2C();
  v5 = v4[5];
  swift_bridgeObjectRetain();
  sub_1CA0C8364(a1, v5);
  v7 = v6;
  LOBYTE(a1) = v8;
  swift_bridgeObjectRelease();
  if ((a1 & 1) != 0
    || (v9 = v4[5],
        swift_bridgeObjectRetain(),
        sub_1CA0C8364(a2, v9),
        v11 = v10,
        v13 = v12,
        swift_bridgeObjectRelease(),
        (v13 & 1) != 0))
  {
    swift_release();
    *(double *)&result = 0.0;
    return result;
  }
  v14 = v4[3];
  v15 = v4[4];
  swift_bridgeObjectRetain();
  v16 = (_QWORD *)sub_1CA0B4464(v14, 0.0);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    v16 = sub_1CA0B6058(v16);
  if (v14 < (uint64_t)0xFFFFFFFF80000000)
  {
    __break(1u);
    goto LABEL_15;
  }
  if (v14 > 0x7FFFFFFF)
  {
LABEL_15:
    __break(1u);
    goto LABEL_16;
  }
  if ((unsigned __int128)(v7 * (__int128)v14) >> 64 == (v7 * v14) >> 63)
  {
    cblas_dcopy_NEWLAPACK();
    swift_bridgeObjectRelease();
    v15 = v4[3];
    swift_bridgeObjectRetain();
    v7 = sub_1CA0B4464(v15, 0.0);
    *(double *)&result = COERCE_DOUBLE(swift_isUniquelyReferenced_nonNull_native());
    if ((result & 1) != 0)
      goto LABEL_9;
    goto LABEL_17;
  }
LABEL_16:
  __break(1u);
LABEL_17:
  *(double *)&result = COERCE_DOUBLE(sub_1CA0B6058((_QWORD *)v7));
  v7 = result;
LABEL_9:
  if (v15 < (uint64_t)0xFFFFFFFF80000000)
  {
    __break(1u);
  }
  else if (v15 <= 0x7FFFFFFF)
  {
    if ((unsigned __int128)(v11 * (__int128)v15) >> 64 == (v11 * v15) >> 63)
    {
      cblas_dcopy_NEWLAPACK();
      swift_bridgeObjectRelease();
      v21[0] = 1;
      v21[1] = v14;
      v21[2] = (int64_t)v16;
      v20[0] = 1;
      v20[1] = v15;
      v20[2] = v7;
      v18 = sub_1CA1358E0(v21, v20);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      v19 = sub_1CA11D028();
      swift_release();
      *(double *)&result = v18 / v19;
      return result;
    }
    goto LABEL_20;
  }
  __break(1u);
LABEL_20:
  __break(1u);
  return result;
}

_QWORD *sub_1CA11D970()
{
  uint64_t v0;
  _QWORD *v1;

  if (*(_QWORD *)(v0 + 192))
  {
    v1 = *(_QWORD **)(v0 + 192);
  }
  else
  {
    v1 = sub_1CA11D9CC();
    *(_QWORD *)(v0 + 192) = v1;
    swift_retain();
    swift_release();
  }
  swift_retain();
  return v1;
}

_QWORD *sub_1CA11D9CC()
{
  _QWORD *v0;
  unint64_t v1;
  unint64_t v2;
  _QWORD *v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  id v10;
  void *v11;
  int64_t v12;
  uint64_t v13;
  double v14;
  _QWORD *v15;
  uint64_t v16;
  _QWORD *result;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22[3];
  int64_t v23[3];

  v0 = (_QWORD *)sub_1CA118E2C();
  v1 = v0[5];
  if (v1 >> 62)
  {
LABEL_25:
    swift_bridgeObjectRetain();
    v2 = sub_1CA1F1234();
    swift_bridgeObjectRelease();
  }
  else
  {
    v2 = *(_QWORD *)((v1 & 0xFFFFFFFFFFFFF8) + 0x10);
  }
  v3 = (_QWORD *)sub_1CA0B4464(v2, 0.0);
  v4 = v0[6];
  if (v4 >> 62)
  {
    swift_bridgeObjectRetain();
    v5 = sub_1CA1F1234();
    swift_bridgeObjectRelease();
  }
  else
  {
    v5 = *(_QWORD *)((v4 & 0xFFFFFFFFFFFFF8) + 0x10);
  }
  v6 = sub_1CA0B4464(v5, 1.0);
  v7 = v0[5];
  v20 = v7;
  v21 = v6;
  if (!(v7 >> 62))
  {
    v8 = *(_QWORD *)((v7 & 0xFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain();
    v18 = v2;
    if (v8)
      goto LABEL_7;
LABEL_28:
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    sub_1CA11D028();
    swift_bridgeObjectRetain();
    v15 = v3;
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      v15 = sub_1CA0B6058(v3);
    if (!(v3[2] >> 31))
    {
      cblas_dscal_NEWLAPACK();
      swift_bridgeObjectRelease();
      v16 = v0[5];
      swift_bridgeObjectRetain();
      swift_release();
      type metadata accessor for MAVectorRepresentation();
      result = (_QWORD *)swift_allocObject();
      result[2] = 1;
      result[3] = v18;
      result[4] = v15;
      result[5] = v16;
      return result;
    }
    __break(1u);
    goto LABEL_33;
  }
  swift_bridgeObjectRetain();
  v8 = sub_1CA1F1234();
  v18 = v2;
  if (!v8)
    goto LABEL_28;
LABEL_7:
  if (v8 >= 1)
  {
    v9 = 0;
    v19 = v7 & 0xC000000000000001;
    while (1)
    {
      v10 = v19 ? (id)MEMORY[0x1CAA4A7A4](v9, v7) : *(id *)(v7 + 8 * v9 + 32);
      v11 = v10;
      v12 = v0[3];
      if (v12 < 0)
        goto LABEL_34;
      swift_bridgeObjectRetain();
      if (v12)
      {
        v13 = sub_1CA1F0B68();
        *(_QWORD *)(v13 + 16) = v12;
        bzero((void *)(v13 + 32), 8 * v12);
        if ((unint64_t)v12 >> 31)
        {
          __break(1u);
LABEL_23:
          __break(1u);
LABEL_24:
          __break(1u);
          goto LABEL_25;
        }
      }
      else
      {
        v13 = MEMORY[0x1E0DEE9D8];
      }
      if ((unsigned __int128)((uint64_t)v9 * (__int128)v12) >> 64 != (uint64_t)(v9 * v12) >> 63)
        goto LABEL_23;
      cblas_dcopy_NEWLAPACK();
      swift_bridgeObjectRelease();
      v23[0] = 1;
      v23[1] = v12;
      v23[2] = v13;
      v22[0] = 1;
      v22[1] = v5;
      v22[2] = v21;
      v14 = sub_1CA1358E0(v23, v22);
      swift_bridgeObjectRelease();
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        v3 = sub_1CA0B6058(v3);
      if (v9 >= v3[2])
        goto LABEL_24;
      *(double *)&v3[v9 + 4] = v14;

      ++v9;
      v7 = v20;
      if (v8 == v9)
        goto LABEL_28;
    }
  }
LABEL_33:
  __break(1u);
LABEL_34:
  result = (_QWORD *)sub_1CA1F11BC();
  __break(1u);
  return result;
}

uint64_t sub_1CA11DD5C(uint64_t a1)
{
  uint64_t v1;

  *(_QWORD *)(v1 + 192) = a1;
  return swift_release();
}

uint64_t (*sub_1CA11DD6C(_QWORD *a1))(_QWORD *a1)
{
  uint64_t v1;

  a1[1] = v1;
  *a1 = sub_1CA11D970();
  return sub_1CA11DDA0;
}

uint64_t sub_1CA11DDA0(_QWORD *a1)
{
  *(_QWORD *)(a1[1] + 192) = *a1;
  return swift_release();
}

uint64_t sub_1CA11DDB0(uint64_t a1)
{
  _QWORD *v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char v6;
  int64_t v7;
  _QWORD *v8;
  unint64_t v9;
  unint64_t v10;
  double v11;
  double v12;
  uint64_t result;
  uint64_t v14[3];
  int64_t v15[3];

  v2 = (_QWORD *)sub_1CA118E2C();
  v3 = v2[5];
  swift_bridgeObjectRetain();
  sub_1CA0C8364(a1, v3);
  v5 = v4;
  LOBYTE(a1) = v6;
  swift_bridgeObjectRelease();
  if ((a1 & 1) == 0)
  {
    v7 = v2[3];
    swift_bridgeObjectRetain();
    v8 = (_QWORD *)sub_1CA0B4464(v7, 0.0);
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      v8 = sub_1CA0B6058(v8);
    if (v7 < (uint64_t)0xFFFFFFFF80000000)
    {
      __break(1u);
    }
    else if (v7 <= 0x7FFFFFFF)
    {
      if ((unsigned __int128)(v5 * (__int128)v7) >> 64 == (v5 * v7) >> 63)
      {
        cblas_dcopy_NEWLAPACK();
        swift_bridgeObjectRelease();
        v9 = v2[6];
        if (!(v9 >> 62))
        {
          v10 = *(_QWORD *)((v9 & 0xFFFFFFFFFFFFF8) + 0x10);
LABEL_9:
          v15[0] = 1;
          v15[1] = v7;
          v15[2] = (int64_t)v8;
          v14[0] = 1;
          v14[1] = v10;
          v14[2] = sub_1CA0B4464(v10, 1.0);
          v11 = sub_1CA1358E0(v15, v14);
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          v12 = sub_1CA11D028();
          swift_release();
          *(double *)&result = v11 / v12;
          return result;
        }
LABEL_14:
        swift_bridgeObjectRetain();
        v10 = sub_1CA1F1234();
        swift_bridgeObjectRelease();
        goto LABEL_9;
      }
LABEL_13:
      __break(1u);
      goto LABEL_14;
    }
    __break(1u);
    goto LABEL_13;
  }
  swift_release();
  *(double *)&result = 0.0;
  return result;
}

_QWORD *sub_1CA11DF70()
{
  uint64_t v0;
  _QWORD *v1;

  if (*(_QWORD *)(v0 + 200))
  {
    v1 = *(_QWORD **)(v0 + 200);
  }
  else
  {
    v1 = sub_1CA11DFCC();
    *(_QWORD *)(v0 + 200) = v1;
    swift_retain();
    swift_release();
  }
  swift_retain();
  return v1;
}

_QWORD *sub_1CA11DFCC()
{
  unint64_t v0;
  vDSP_Length v1;
  _QWORD *v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  vDSP_Length v11;
  const double *v12;
  _QWORD *v13;
  const double *v14;
  vDSP_Length v15;
  double v16;
  double v17;
  unint64_t v18;
  double v19;
  unint64_t v20;
  double v21;
  uint64_t v22;
  BOOL v23;
  unint64_t v24;
  _QWORD *result;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  unint64_t v31;
  uint64_t v32;
  uint64_t v33;
  _QWORD *v34;
  uint64_t v35;
  uint64_t v36;
  BOOL v37;
  vDSP_Length v38[3];
  int64_t __C[3];
  double v40;
  uint64_t v41;
  uint64_t v42;
  unint64_t v43;
  uint64_t v44;

  v44 = *MEMORY[0x1E0C80C00];
  v2 = (_QWORD *)sub_1CA118E2C();
  v43 = MEMORY[0x1E0DEE9D8];
  v3 = swift_bridgeObjectRetain();
  sub_1CA0B2EE8(v3);
  v4 = v43;
  if (v43 >> 62)
    goto LABEL_60;
  v5 = *(_QWORD *)((v43 & 0xFFFFFFFFFFFFF8) + 0x10);
  v6 = v5;
  while ((unsigned __int128)(v6 * (__int128)v5) >> 64 == (v6 * v5) >> 63)
  {
    v1 = sub_1CA0B4464(v6 * v5, 0.0);
    v0 = v2[5];
    if (v0 >> 62)
      goto LABEL_62;
    v7 = *(_QWORD *)((v0 & 0xFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain();
    if (!v7)
      goto LABEL_63;
LABEL_6:
    v26 = v6;
    v27 = v4;
    v8 = 0;
    v30 = v0;
    v31 = v0 & 0xC000000000000001;
    v28 = v0 & 0xFFFFFFFFFFFFFF8;
    v29 = v7;
    v33 = v5;
    v34 = v2;
    while (1)
    {
      if (v31)
      {
        MEMORY[0x1CAA4A7A4](v8, v0);
        swift_unknownObjectRelease();
      }
      else if ((unint64_t)v8 >= *(_QWORD *)(v28 + 16))
      {
        goto LABEL_59;
      }
      if (__OFADD__(v8, 1))
        break;
      v9 = v2[5];
      if (v9 >> 62)
      {
        swift_bridgeObjectRetain();
        v4 = sub_1CA1F1234();
        swift_bridgeObjectRelease();
        if (v4 < v8)
        {
LABEL_43:
          __break(1u);
LABEL_44:
          swift_bridgeObjectRelease();
          swift_release();
          v6 = v26;
          v4 = v27;
          goto LABEL_64;
        }
      }
      else
      {
        v4 = *(_QWORD *)((v9 & 0xFFFFFFFFFFFFF8) + 0x10);
        if (v4 < v8)
          goto LABEL_43;
      }
      v32 = v8 + 1;
      if (v8 != v4)
      {
        v35 = v4;
        v36 = v8 * v5;
        v37 = (unsigned __int128)(v8 * (__int128)v5) >> 64 != (v8 * v5) >> 63;
        v10 = v8;
        while (1)
        {
          if (v10 >= v4)
          {
            __break(1u);
LABEL_46:
            __break(1u);
LABEL_47:
            __break(1u);
LABEL_48:
            __break(1u);
LABEL_49:
            __break(1u);
LABEL_50:
            __break(1u);
LABEL_51:
            __break(1u);
LABEL_52:
            __break(1u);
LABEL_53:
            __break(1u);
LABEL_54:
            __break(1u);
LABEL_55:
            __break(1u);
LABEL_56:
            __break(1u);
LABEL_57:
            __break(1u);
            goto LABEL_58;
          }
          v11 = v2[3];
          if ((v11 & 0x8000000000000000) != 0)
            break;
          swift_bridgeObjectRetain();
          if (v11)
          {
            v4 = sub_1CA1F0B68();
            *(_QWORD *)(v4 + 16) = v11;
            v12 = (const double *)(v4 + 32);
            bzero((void *)(v4 + 32), 8 * v11);
            if (v11 >> 31)
              goto LABEL_46;
          }
          else
          {
            v4 = MEMORY[0x1E0DEE9D8];
            v12 = (const double *)(MEMORY[0x1E0DEE9D8] + 32);
          }
          if ((unsigned __int128)(v8 * (__int128)(uint64_t)v11) >> 64 != (uint64_t)(v8 * v11) >> 63)
            goto LABEL_47;
          v0 = v8;
          v13 = (_QWORD *)v1;
          cblas_dcopy_NEWLAPACK();
          swift_bridgeObjectRelease();
          v1 = v2[3];
          if ((v1 & 0x8000000000000000) != 0)
            break;
          swift_bridgeObjectRetain();
          if (v1)
          {
            v2 = (_QWORD *)sub_1CA1F0B68();
            v2[2] = v1;
            v14 = (const double *)(v2 + 4);
            bzero(v2 + 4, 8 * v1);
            if (v1 >> 31)
              goto LABEL_48;
          }
          else
          {
            v2 = (_QWORD *)MEMORY[0x1E0DEE9D8];
            v14 = (const double *)(MEMORY[0x1E0DEE9D8] + 32);
          }
          if ((unsigned __int128)(v10 * (__int128)(uint64_t)v1) >> 64 != (uint64_t)(v10 * v1) >> 63)
            goto LABEL_49;
          cblas_dcopy_NEWLAPACK();
          swift_bridgeObjectRelease();
          __C[0] = 1;
          __C[1] = v11;
          __C[2] = v4;
          v38[0] = 1;
          v38[1] = v1;
          v38[2] = (vDSP_Length)v2;
          * infix(_:_:)(__C, v38, (int64_t *)&v40);
          __C[0] = 0;
          v15 = *(_QWORD *)&v40 * v41;
          if ((unsigned __int128)(*(uint64_t *)&v40 * (__int128)v41) >> 64 != (*(_QWORD *)&v40 * v41) >> 63)
            goto LABEL_50;
          if ((v15 & 0x8000000000000000) != 0)
            goto LABEL_66;
          vDSP_sveD((const double *)(v42 + 32), 1, (double *)__C, v15);
          swift_bridgeObjectRelease();
          v16 = *(double *)__C;
          v40 = 0.0;
          vDSP_sveD(v12, 1, &v40, v11);
          swift_bridgeObjectRelease();
          v17 = v40;
          v40 = 0.0;
          vDSP_sveD(v14, 1, &v40, v1);
          swift_bridgeObjectRelease();
          if (v37)
            goto LABEL_51;
          v18 = v36 + v10;
          if (__OFADD__(v36, v10))
            goto LABEL_52;
          v19 = v40;
          v1 = (vDSP_Length)v13;
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
            v1 = (vDSP_Length)sub_1CA0B6058(v13);
          v5 = v33;
          v2 = v34;
          v8 = v0;
          if ((v18 & 0x8000000000000000) != 0)
            goto LABEL_53;
          v20 = *(_QWORD *)(v1 + 16);
          if (v18 >= v20)
            goto LABEL_54;
          v21 = v16 / (v17 + v19);
          *(double *)(v1 + 32 + 8 * v18) = v21;
          v22 = v10 * v33;
          if ((unsigned __int128)(v10 * (__int128)v33) >> 64 != (v10 * v33) >> 63)
            goto LABEL_55;
          v23 = __OFADD__(v22, v0);
          v24 = v22 + v0;
          if (v23)
            goto LABEL_56;
          if (v24 >= v20)
            goto LABEL_57;
          ++v10;
          *(double *)(v1 + 32 + 8 * v24) = v21;
          v4 = v35;
          if (v35 == v10)
            goto LABEL_7;
        }
        sub_1CA1F11BC();
        __break(1u);
LABEL_66:
        result = (_QWORD *)sub_1CA1F11BC();
        __break(1u);
        return result;
      }
LABEL_7:
      v8 = v32;
      v0 = v30;
      if (v32 == v29)
        goto LABEL_44;
    }
LABEL_58:
    __break(1u);
LABEL_59:
    __break(1u);
LABEL_60:
    swift_bridgeObjectRetain();
    v6 = sub_1CA1F1234();
    v5 = sub_1CA1F1234();
    swift_bridgeObjectRelease();
  }
  __break(1u);
LABEL_62:
  swift_bridgeObjectRetain();
  v7 = sub_1CA1F1234();
  if (v7)
    goto LABEL_6;
LABEL_63:
  swift_bridgeObjectRelease();
  swift_release();
LABEL_64:
  type metadata accessor for MASquareMatrixRepresentation();
  result = (_QWORD *)swift_allocObject();
  result[2] = v6;
  result[3] = v5;
  result[4] = v1;
  result[5] = v4;
  return result;
}

uint64_t sub_1CA11E578(uint64_t a1)
{
  uint64_t v1;

  *(_QWORD *)(v1 + 200) = a1;
  return swift_release();
}

uint64_t (*sub_1CA11E588(_QWORD *a1))(_QWORD *a1)
{
  uint64_t v1;

  a1[1] = v1;
  *a1 = sub_1CA11DF70();
  return sub_1CA11E5BC;
}

uint64_t sub_1CA11E5BC(_QWORD *a1)
{
  *(_QWORD *)(a1[1] + 200) = *a1;
  return swift_release();
}

uint64_t sub_1CA11E5CC(uint64_t a1, uint64_t a2)
{
  _QWORD *v4;
  unint64_t v5;
  int64_t v6;
  int64_t v7;
  const double *v8;
  const double *v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char v13;
  char v14;
  int64_t v15;
  vDSP_Length v16;
  _QWORD *v17;
  vDSP_Length v18;
  double v19;
  double v20;
  uint64_t result;
  vDSP_Length v22[3];
  int64_t __C[3];
  double v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;

  v27 = *MEMORY[0x1E0C80C00];
  v4 = (_QWORD *)sub_1CA118E2C();
  v5 = v4[5];
  swift_bridgeObjectRetain();
  sub_1CA0C8364(a1, v5);
  v7 = v6;
  v9 = v8;
  swift_bridgeObjectRelease();
  if ((v9 & 1) != 0
    || (v10 = v4[5],
        swift_bridgeObjectRetain(),
        sub_1CA0C8364(a2, v10),
        v12 = v11,
        v14 = v13,
        swift_bridgeObjectRelease(),
        (v14 & 1) != 0))
  {
    swift_release();
    *(double *)&result = 0.0;
    return result;
  }
  v15 = v4[3];
  v16 = v4[4];
  swift_bridgeObjectRetain();
  v17 = (_QWORD *)sub_1CA0B4464(v15, 0.0);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    v17 = sub_1CA0B6058(v17);
  if (v15 < (uint64_t)0xFFFFFFFF80000000)
  {
    __break(1u);
    goto LABEL_19;
  }
  if (v15 > 0x7FFFFFFF)
  {
LABEL_19:
    __break(1u);
    goto LABEL_20;
  }
  if ((unsigned __int128)(v7 * (__int128)v15) >> 64 == (v7 * v15) >> 63)
  {
    v9 = (const double *)(v17 + 4);
    cblas_dcopy_NEWLAPACK();
    swift_bridgeObjectRelease();
    v7 = v4[3];
    swift_bridgeObjectRetain();
    v16 = sub_1CA0B4464(v7, 0.0);
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) != 0)
      goto LABEL_9;
    goto LABEL_21;
  }
LABEL_20:
  __break(1u);
LABEL_21:
  v16 = (vDSP_Length)sub_1CA0B6058((_QWORD *)v16);
LABEL_9:
  if (v7 < (uint64_t)0xFFFFFFFF80000000)
  {
    __break(1u);
    goto LABEL_23;
  }
  if (v7 > 0x7FFFFFFF)
  {
LABEL_23:
    __break(1u);
    goto LABEL_24;
  }
  if ((unsigned __int128)(v12 * (__int128)v7) >> 64 != (v12 * v7) >> 63)
  {
LABEL_24:
    __break(1u);
LABEL_25:
    __break(1u);
  }
  cblas_dcopy_NEWLAPACK();
  swift_bridgeObjectRelease();
  __C[0] = 1;
  __C[1] = v15;
  __C[2] = (int64_t)v17;
  v22[0] = 1;
  v22[1] = v7;
  v22[2] = v16;
  * infix(_:_:)(__C, v22, (int64_t *)&v24);
  __C[0] = 0;
  v18 = *(_QWORD *)&v24 * v25;
  if ((unsigned __int128)(*(uint64_t *)&v24 * (__int128)v25) >> 64 != (*(_QWORD *)&v24 * v25) >> 63)
    goto LABEL_25;
  if ((v18 & 0x8000000000000000) != 0)
    goto LABEL_26;
  vDSP_sveD((const double *)(v26 + 32), 1, (double *)__C, v18);
  swift_bridgeObjectRelease();
  v19 = *(double *)__C;
  v24 = 0.0;
  if (v15 < 0 || (vDSP_sveD(v9, 1, &v24, v15), swift_bridgeObjectRelease(), v20 = v24, v24 = 0.0, v7 < 0))
  {
LABEL_26:
    *(double *)&result = COERCE_DOUBLE(sub_1CA1F11BC());
    __break(1u);
  }
  else
  {
    vDSP_sveD((const double *)(v16 + 32), 1, &v24, v7);
    swift_bridgeObjectRelease();
    swift_release();
    *(double *)&result = v19 / (v20 + v24);
  }
  return result;
}

_QWORD *sub_1CA11E8F0()
{
  uint64_t v0;
  _QWORD *v1;

  if (*(_QWORD *)(v0 + 208))
  {
    v1 = *(_QWORD **)(v0 + 208);
  }
  else
  {
    v1 = sub_1CA11E94C();
    *(_QWORD *)(v0 + 208) = v1;
    swift_retain();
    swift_release();
  }
  swift_retain();
  return v1;
}

_QWORD *sub_1CA11E94C()
{
  uint64_t v0;
  _QWORD *v1;
  unint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  vDSP_Length v11;
  uint64_t v12;
  uint64_t v13;
  const double *v14;
  vDSP_Length v15;
  const double *v16;
  vDSP_Length v17;
  double v18;
  double v19;
  unint64_t v20;
  double v21;
  unint64_t v22;
  double v23;
  uint64_t v24;
  BOOL v25;
  unint64_t v26;
  _QWORD *result;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  _QWORD *v37;
  uint64_t v38;
  uint64_t v39;
  BOOL v40;
  _QWORD *v41;
  uint64_t v42;
  vDSP_Length v43[3];
  int64_t __C[3];
  double v45;
  uint64_t v46;
  uint64_t v47;
  unint64_t v48;
  uint64_t v49;

  v49 = *MEMORY[0x1E0C80C00];
  v1 = (_QWORD *)sub_1CA118E2C();
  v48 = MEMORY[0x1E0DEE9D8];
  v2 = swift_bridgeObjectRetain();
  sub_1CA0B2EE8(v2);
  v29 = v48;
  if (v48 >> 62)
    goto LABEL_63;
  v3 = *(_QWORD *)((v48 & 0xFFFFFFFFFFFFF8) + 0x10);
  v4 = v3;
  while ((unsigned __int128)(v4 * (__int128)v3) >> 64 == (v4 * v3) >> 63)
  {
    v28 = v4;
    v0 = sub_1CA0B4464(v4 * v3, 0.0);
    v4 = v1[6];
    if ((unint64_t)v4 >> 62)
      goto LABEL_65;
    v5 = *(_QWORD *)((v4 & 0xFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain();
    if (!v5)
      goto LABEL_66;
LABEL_6:
    v6 = 0;
    v32 = v4;
    v33 = v4 & 0xC000000000000001;
    v30 = v4 & 0xFFFFFFFFFFFFFF8;
    v31 = v5;
    v7 = 32;
    v36 = v3;
    v37 = v1;
    while (1)
    {
      if (v33)
      {
        MEMORY[0x1CAA4A7A4](v6, v4);
        swift_unknownObjectRelease();
      }
      else if ((unint64_t)v6 >= *(_QWORD *)(v30 + 16))
      {
        goto LABEL_62;
      }
      v35 = v6 + 1;
      if (__OFADD__(v6, 1))
        break;
      v8 = v1[6];
      if (v8 >> 62)
      {
        swift_bridgeObjectRetain();
        v9 = sub_1CA1F1234();
        swift_bridgeObjectRelease();
        if (v9 < v6)
        {
LABEL_45:
          __break(1u);
LABEL_46:
          __break(1u);
LABEL_47:
          __break(1u);
LABEL_48:
          __break(1u);
LABEL_49:
          __break(1u);
LABEL_50:
          __break(1u);
LABEL_51:
          __break(1u);
LABEL_52:
          __break(1u);
LABEL_53:
          __break(1u);
LABEL_54:
          __break(1u);
LABEL_55:
          __break(1u);
LABEL_56:
          __break(1u);
LABEL_57:
          __break(1u);
LABEL_58:
          __break(1u);
LABEL_59:
          __break(1u);
LABEL_60:
          __break(1u);
          break;
        }
      }
      else
      {
        v9 = *(_QWORD *)((v8 & 0xFFFFFFFFFFFFF8) + 0x10);
        if (v9 < v6)
          goto LABEL_45;
      }
      v34 = v7;
      if (v6 != v9)
      {
        v38 = v9;
        v39 = v6 * v3;
        v40 = (unsigned __int128)(v6 * (__int128)v3) >> 64 != (v6 * v3) >> 63;
        v10 = v6;
        v42 = v6;
        while (v10 < v9)
        {
          v11 = v1[2];
          if ((v11 & 0x8000000000000000) != 0)
            goto LABEL_67;
          v12 = v1[3];
          swift_bridgeObjectRetain();
          if (v11)
          {
            v13 = sub_1CA1F0B68();
            *(_QWORD *)(v13 + 16) = v11;
            v14 = (const double *)(v13 + 32);
            bzero((void *)(v13 + 32), 8 * v11);
            if (v11 >> 31)
              goto LABEL_47;
          }
          else
          {
            v13 = MEMORY[0x1E0DEE9D8];
            v14 = (const double *)(MEMORY[0x1E0DEE9D8] + 32);
          }
          if (v12 < (uint64_t)0xFFFFFFFF80000000)
            goto LABEL_48;
          if (v12 > 0x7FFFFFFF)
            goto LABEL_49;
          v41 = (_QWORD *)v0;
          cblas_dcopy_NEWLAPACK();
          swift_bridgeObjectRelease();
          v15 = v1[2];
          if ((v15 & 0x8000000000000000) != 0)
          {
LABEL_67:
            sub_1CA1F11BC();
            __break(1u);
LABEL_68:
            result = (_QWORD *)sub_1CA1F11BC();
            __break(1u);
            return result;
          }
          v0 = v1[3];
          swift_bridgeObjectRetain();
          if (v15)
          {
            v1 = (_QWORD *)sub_1CA1F0B68();
            v1[2] = v15;
            v16 = (const double *)(v1 + 4);
            bzero(v1 + 4, 8 * v15);
            if (v15 >> 31)
              goto LABEL_50;
          }
          else
          {
            v1 = (_QWORD *)MEMORY[0x1E0DEE9D8];
            v16 = (const double *)(MEMORY[0x1E0DEE9D8] + 32);
          }
          if (v0 < (uint64_t)0xFFFFFFFF80000000)
            goto LABEL_51;
          if (v0 > 0x7FFFFFFF)
            goto LABEL_52;
          cblas_dcopy_NEWLAPACK();
          swift_bridgeObjectRelease();
          __C[0] = v11;
          __C[1] = 1;
          __C[2] = v13;
          v43[0] = v15;
          v43[1] = 1;
          v43[2] = (vDSP_Length)v1;
          * infix(_:_:)(__C, v43, (int64_t *)&v45);
          __C[0] = 0;
          v17 = *(_QWORD *)&v45 * v46;
          if ((unsigned __int128)(*(uint64_t *)&v45 * (__int128)v46) >> 64 != (*(_QWORD *)&v45 * v46) >> 63)
            goto LABEL_53;
          if ((v17 & 0x8000000000000000) != 0)
            goto LABEL_68;
          vDSP_sveD((const double *)(v47 + 32), 1, (double *)__C, v17);
          swift_bridgeObjectRelease();
          v18 = *(double *)__C;
          v45 = 0.0;
          vDSP_sveD(v14, 1, &v45, v11);
          swift_bridgeObjectRelease();
          v19 = v45;
          v45 = 0.0;
          vDSP_sveD(v16, 1, &v45, v15);
          swift_bridgeObjectRelease();
          v0 = (uint64_t)v41;
          if (v40)
            goto LABEL_54;
          v20 = v39 + v10;
          if (__OFADD__(v39, v10))
            goto LABEL_55;
          v21 = v45;
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
            v0 = (uint64_t)sub_1CA0B6058(v41);
          v3 = v36;
          v1 = v37;
          if ((v20 & 0x8000000000000000) != 0)
            goto LABEL_56;
          v22 = *(_QWORD *)(v0 + 16);
          if (v20 >= v22)
            goto LABEL_57;
          v23 = v18 / (v19 + v21);
          *(double *)(v0 + 32 + 8 * v20) = v23;
          v24 = v10 * v36;
          if ((unsigned __int128)(v10 * (__int128)v36) >> 64 != (v10 * v36) >> 63)
            goto LABEL_58;
          v25 = __OFADD__(v24, v42);
          v26 = v24 + v42;
          if (v25)
            goto LABEL_59;
          if (v26 >= v22)
            goto LABEL_60;
          ++v10;
          *(double *)(v0 + 32 + 8 * v26) = v23;
          v7 += 8;
          v9 = v38;
          if (v38 == v10)
            goto LABEL_7;
        }
        goto LABEL_46;
      }
LABEL_7:
      v7 = v34 + 8;
      v6 = v35;
      v4 = v32;
      if (v35 == v31)
        goto LABEL_66;
    }
    __break(1u);
LABEL_62:
    __break(1u);
LABEL_63:
    swift_bridgeObjectRetain();
    v4 = sub_1CA1F1234();
    v3 = sub_1CA1F1234();
    swift_bridgeObjectRelease();
  }
  __break(1u);
LABEL_65:
  swift_bridgeObjectRetain();
  v5 = sub_1CA1F1234();
  if (v5)
    goto LABEL_6;
LABEL_66:
  swift_bridgeObjectRelease();
  swift_release();
  type metadata accessor for MASquareMatrixRepresentation();
  result = (_QWORD *)swift_allocObject();
  result[2] = v28;
  result[3] = v3;
  result[4] = v0;
  result[5] = v29;
  return result;
}

uint64_t sub_1CA11EF14(uint64_t a1)
{
  uint64_t v1;

  *(_QWORD *)(v1 + 208) = a1;
  return swift_release();
}

uint64_t (*sub_1CA11EF24(_QWORD *a1))(_QWORD *a1)
{
  uint64_t v1;

  a1[1] = v1;
  *a1 = sub_1CA11E8F0();
  return sub_1CA11EF58;
}

uint64_t sub_1CA11EF58(_QWORD *a1)
{
  *(_QWORD *)(a1[1] + 208) = *a1;
  return swift_release();
}

uint64_t sub_1CA11EF68(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v5;
  unint64_t v6;
  int64_t v7;
  int64_t v8;
  const double *v9;
  const double *v10;
  unint64_t v11;
  char v12;
  char v13;
  int64_t v14;
  uint64_t v15;
  vDSP_Length v16;
  _QWORD *v17;
  vDSP_Length v18;
  double v19;
  double v20;
  uint64_t result;
  vDSP_Length v22[3];
  int64_t __C[3];
  double v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;

  v27 = *MEMORY[0x1E0C80C00];
  v5 = (_QWORD *)sub_1CA118E2C();
  v6 = v5[6];
  swift_bridgeObjectRetain();
  sub_1CA0C8364(a1, v6);
  v8 = v7;
  v10 = v9;
  swift_bridgeObjectRelease();
  if ((v10 & 1) != 0
    || (v11 = v5[6],
        swift_bridgeObjectRetain(),
        sub_1CA0C8364(a2, v11),
        v13 = v12,
        swift_bridgeObjectRelease(),
        (v13 & 1) != 0))
  {
    swift_release();
    *(double *)&result = 0.0;
    return result;
  }
  v14 = v5[2];
  v15 = v5[3];
  v16 = v5[4];
  swift_bridgeObjectRetain();
  v17 = (_QWORD *)sub_1CA0B4464(v14, 0.0);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    v17 = sub_1CA0B6058(v17);
  if (v14 > 0x7FFFFFFF)
  {
    __break(1u);
LABEL_21:
    __break(1u);
    goto LABEL_22;
  }
  if (v14 < (uint64_t)0xFFFFFFFF80000000 || v15 < (uint64_t)0xFFFFFFFF80000000)
    goto LABEL_21;
  if (v15 <= 0x7FFFFFFF)
  {
    v10 = (const double *)(v17 + 4);
    cblas_dcopy_NEWLAPACK();
    swift_bridgeObjectRelease();
    v8 = v5[2];
    v2 = v5[3];
    swift_bridgeObjectRetain();
    v16 = sub_1CA0B4464(v8, 0.0);
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) != 0)
      goto LABEL_10;
    goto LABEL_23;
  }
LABEL_22:
  __break(1u);
LABEL_23:
  v16 = (vDSP_Length)sub_1CA0B6058((_QWORD *)v16);
LABEL_10:
  if (v8 > 0x7FFFFFFF)
  {
    __break(1u);
LABEL_25:
    __break(1u);
    goto LABEL_26;
  }
  if (v8 < (uint64_t)0xFFFFFFFF80000000 || v2 < (uint64_t)0xFFFFFFFF80000000)
    goto LABEL_25;
  if (v2 > 0x7FFFFFFF)
  {
LABEL_26:
    __break(1u);
LABEL_27:
    __break(1u);
  }
  cblas_dcopy_NEWLAPACK();
  swift_bridgeObjectRelease();
  __C[0] = v14;
  __C[1] = 1;
  __C[2] = (int64_t)v17;
  v22[0] = v8;
  v22[1] = 1;
  v22[2] = v16;
  * infix(_:_:)(__C, v22, (int64_t *)&v24);
  __C[0] = 0;
  v18 = *(_QWORD *)&v24 * v25;
  if ((unsigned __int128)(*(uint64_t *)&v24 * (__int128)v25) >> 64 != (*(_QWORD *)&v24 * v25) >> 63)
    goto LABEL_27;
  if ((v18 & 0x8000000000000000) != 0)
    goto LABEL_28;
  vDSP_sveD((const double *)(v26 + 32), 1, (double *)__C, v18);
  swift_bridgeObjectRelease();
  v19 = *(double *)__C;
  v24 = 0.0;
  if (v14 < 0 || (vDSP_sveD(v10, 1, &v24, v14), swift_bridgeObjectRelease(), v20 = v24, v24 = 0.0, v8 < 0))
  {
LABEL_28:
    *(double *)&result = COERCE_DOUBLE(sub_1CA1F11BC());
    __break(1u);
  }
  else
  {
    vDSP_sveD((const double *)(v16 + 32), 1, &v24, v8);
    swift_bridgeObjectRelease();
    swift_release();
    *(double *)&result = v19 / (v20 + v24);
  }
  return result;
}

_QWORD *sub_1CA11F29C()
{
  uint64_t v0;
  _QWORD *v1;

  if (*(_QWORD *)(v0 + 216))
  {
    v1 = *(_QWORD **)(v0 + 216);
  }
  else
  {
    v1 = sub_1CA11F2F8();
    *(_QWORD *)(v0 + 216) = v1;
    swift_retain();
    swift_release();
  }
  swift_retain();
  return v1;
}

_QWORD *sub_1CA11F2F8()
{
  _QWORD *v0;
  unint64_t v1;
  uint64_t v2;
  unint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int64_t v12;
  uint64_t v13;
  _QWORD *v14;
  vDSP_Length v15;
  vDSP_Length v16;
  unint64_t v17;
  int64_t v18;
  unint64_t v19;
  uint64_t v20;
  BOOL v21;
  unint64_t v22;
  _QWORD *v23;
  _QWORD *result;
  uint64_t v25;
  _QWORD *v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  _QWORD *v34;
  vDSP_Length v35[3];
  int64_t __C[3];
  int64_t v37;
  uint64_t v38;
  uint64_t v39;
  unint64_t v40;
  uint64_t v41;

  v41 = *MEMORY[0x1E0C80C00];
  v2 = sub_1CA118E2C();
  v40 = MEMORY[0x1E0DEE9D8];
  v34 = (_QWORD *)v2;
  v3 = swift_bridgeObjectRetain();
  sub_1CA0B2EE8(v3);
  v4 = (_QWORD *)v40;
  if (v40 >> 62)
    goto LABEL_61;
  v5 = *(_QWORD *)((v40 & 0xFFFFFFFFFFFFF8) + 0x10);
  v6 = v5;
  while ((unsigned __int128)(v6 * (__int128)v5) >> 64 == (v6 * v5) >> 63)
  {
    v0 = (_QWORD *)sub_1CA0B4464(v6 * v5, 0.0);
    v1 = v34[5];
    if (v1 >> 62)
      goto LABEL_63;
    v7 = *(_QWORD *)((v1 & 0xFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain();
    if (!v7)
      goto LABEL_64;
LABEL_6:
    v25 = v6;
    v26 = v4;
    v8 = 0;
    v29 = v1;
    v30 = v1 & 0xC000000000000001;
    v27 = v1 & 0xFFFFFFFFFFFFFF8;
    v28 = v7;
    v4 = v34;
    while (1)
    {
      if (v30)
      {
        MEMORY[0x1CAA4A7A4](v8, v1);
        swift_unknownObjectRelease();
      }
      else if ((unint64_t)v8 >= *(_QWORD *)(v27 + 16))
      {
        goto LABEL_60;
      }
      if (__OFADD__(v8, 1))
        break;
      v9 = v4[5];
      if (v9 >> 62)
      {
        swift_bridgeObjectRetain();
        v10 = sub_1CA1F1234();
        swift_bridgeObjectRelease();
        if (v10 < v8)
        {
LABEL_44:
          __break(1u);
LABEL_45:
          swift_bridgeObjectRelease();
          v6 = v25;
          v4 = v26;
          goto LABEL_65;
        }
      }
      else
      {
        v10 = *(_QWORD *)((v9 & 0xFFFFFFFFFFFFF8) + 0x10);
        if (v10 < v8)
          goto LABEL_44;
      }
      v31 = v8 + 1;
      if (v8 != v10)
      {
        v32 = v10;
        v33 = v8 * v5;
        v11 = v8;
        while (1)
        {
          if (v11 >= v10)
          {
            __break(1u);
LABEL_47:
            __break(1u);
LABEL_48:
            __break(1u);
LABEL_49:
            __break(1u);
LABEL_50:
            __break(1u);
LABEL_51:
            __break(1u);
LABEL_52:
            __break(1u);
LABEL_53:
            __break(1u);
LABEL_54:
            __break(1u);
LABEL_55:
            __break(1u);
LABEL_56:
            __break(1u);
LABEL_57:
            __break(1u);
LABEL_58:
            __break(1u);
            goto LABEL_59;
          }
          v12 = v4[3];
          if (v12 < 0)
            break;
          v1 = v4[4];
          swift_bridgeObjectRetain();
          if (v12)
          {
            v13 = sub_1CA1F0B68();
            *(_QWORD *)(v13 + 16) = v12;
            bzero((void *)(v13 + 32), 8 * v12);
            if ((unint64_t)v12 >> 31)
              goto LABEL_47;
          }
          else
          {
            v13 = MEMORY[0x1E0DEE9D8];
          }
          if ((unsigned __int128)(v8 * (__int128)v12) >> 64 != (v8 * v12) >> 63)
            goto LABEL_48;
          v14 = v0;
          v0 = (_QWORD *)v5;
          cblas_dcopy_NEWLAPACK();
          swift_bridgeObjectRelease();
          v15 = v4[3];
          if ((v15 & 0x8000000000000000) != 0)
            break;
          swift_bridgeObjectRetain();
          if (v15)
          {
            v1 = sub_1CA1F0B68();
            *(_QWORD *)(v1 + 16) = v15;
            v4 = (_QWORD *)(v1 + 32);
            bzero((void *)(v1 + 32), 8 * v15);
            if (v15 >> 31)
              goto LABEL_49;
          }
          else
          {
            v1 = MEMORY[0x1E0DEE9D8];
            v4 = (_QWORD *)(MEMORY[0x1E0DEE9D8] + 32);
          }
          if ((unsigned __int128)(v11 * (__int128)(uint64_t)v15) >> 64 != (uint64_t)(v11 * v15) >> 63)
            goto LABEL_50;
          cblas_dcopy_NEWLAPACK();
          swift_bridgeObjectRelease();
          __C[0] = 1;
          __C[1] = v12;
          __C[2] = v13;
          v35[0] = 1;
          v35[1] = v15;
          v35[2] = v1;
          * infix(_:_:)(__C, v35, &v37);
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          __C[0] = 0;
          v16 = v37 * v38;
          if ((unsigned __int128)(v37 * (__int128)v38) >> 64 != (v37 * v38) >> 63)
            goto LABEL_51;
          if ((v16 & 0x8000000000000000) != 0)
            goto LABEL_73;
          vDSP_sveD((const double *)(v39 + 32), 1, (double *)__C, v16);
          swift_bridgeObjectRelease();
          v4 = v34;
          if ((unsigned __int128)(v8 * (__int128)v5) >> 64 != (v8 * v5) >> 63)
            goto LABEL_52;
          v17 = v33 + v11;
          if (__OFADD__(v33, v11))
            goto LABEL_53;
          v18 = __C[0];
          v0 = v14;
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) != 0)
          {
            if ((v17 & 0x8000000000000000) != 0)
              goto LABEL_54;
          }
          else
          {
            v0 = sub_1CA0B6058(v14);
            if ((v17 & 0x8000000000000000) != 0)
              goto LABEL_54;
          }
          v19 = v0[2];
          if (v17 >= v19)
            goto LABEL_55;
          v0[v17 + 4] = v18;
          v20 = v11 * v5;
          if ((unsigned __int128)(v11 * (__int128)v5) >> 64 != (v11 * v5) >> 63)
            goto LABEL_56;
          v21 = __OFADD__(v20, v8);
          v22 = v20 + v8;
          if (v21)
            goto LABEL_57;
          if (v22 >= v19)
            goto LABEL_58;
          ++v11;
          v0[v22 + 4] = v18;
          v10 = v32;
          if (v32 == v11)
            goto LABEL_7;
        }
        sub_1CA1F11BC();
        __break(1u);
LABEL_73:
        result = (_QWORD *)sub_1CA1F11BC();
        __break(1u);
        return result;
      }
LABEL_7:
      ++v8;
      v1 = v29;
      if (v31 == v28)
        goto LABEL_45;
    }
LABEL_59:
    __break(1u);
LABEL_60:
    __break(1u);
LABEL_61:
    swift_bridgeObjectRetain();
    v6 = sub_1CA1F1234();
    v5 = sub_1CA1F1234();
    swift_bridgeObjectRelease();
  }
  __break(1u);
LABEL_63:
  swift_bridgeObjectRetain();
  v7 = sub_1CA1F1234();
  if (v7)
    goto LABEL_6;
LABEL_64:
  swift_bridgeObjectRelease();
LABEL_65:
  if (v34[6] >> 62)
  {
    swift_bridgeObjectRetain();
    sub_1CA1F1234();
    swift_bridgeObjectRelease();
  }
  swift_bridgeObjectRetain();
  v23 = v0;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    v23 = sub_1CA0B6058(v0);
  if (v0[2] >> 31)
    __break(1u);
  cblas_dscal_NEWLAPACK();
  swift_release();
  swift_bridgeObjectRelease();
  type metadata accessor for MASquareMatrixRepresentation();
  result = (_QWORD *)swift_allocObject();
  result[2] = v6;
  result[3] = v5;
  result[4] = v23;
  result[5] = v4;
  return result;
}

uint64_t sub_1CA11F8F4(uint64_t a1)
{
  uint64_t v1;

  *(_QWORD *)(v1 + 216) = a1;
  return swift_release();
}

uint64_t (*sub_1CA11F904(_QWORD *a1))(_QWORD *a1)
{
  uint64_t v1;

  a1[1] = v1;
  *a1 = sub_1CA11F29C();
  return sub_1CA11F938;
}

uint64_t sub_1CA11F938(_QWORD *a1)
{
  *(_QWORD *)(a1[1] + 216) = *a1;
  return swift_release();
}

uint64_t sub_1CA11F948(uint64_t a1, uint64_t a2)
{
  double v2;
  _QWORD *v5;
  unint64_t v6;
  int64_t v7;
  int64_t v8;
  char v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char v13;
  char v14;
  int64_t v15;
  int64_t v16;
  _QWORD *v17;
  vDSP_Length v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t result;
  vDSP_Length v22[3];
  int64_t __C[3];
  int64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;

  v27 = *MEMORY[0x1E0C80C00];
  v5 = (_QWORD *)sub_1CA118E2C();
  v6 = v5[5];
  swift_bridgeObjectRetain();
  sub_1CA0C8364(a1, v6);
  v8 = v7;
  LOBYTE(a1) = v9;
  swift_bridgeObjectRelease();
  if ((a1 & 1) != 0
    || (v10 = v5[5],
        swift_bridgeObjectRetain(),
        sub_1CA0C8364(a2, v10),
        v12 = v11,
        v14 = v13,
        swift_bridgeObjectRelease(),
        (v14 & 1) != 0))
  {
    swift_release();
    *(double *)&result = 0.0;
    return result;
  }
  v15 = v5[3];
  v16 = v5[4];
  swift_bridgeObjectRetain();
  v17 = (_QWORD *)sub_1CA0B4464(v15, 0.0);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    v17 = sub_1CA0B6058(v17);
  if (v15 < (uint64_t)0xFFFFFFFF80000000)
  {
    __break(1u);
    goto LABEL_19;
  }
  if (v15 > 0x7FFFFFFF)
  {
LABEL_19:
    __break(1u);
    goto LABEL_20;
  }
  if ((unsigned __int128)(v8 * (__int128)v15) >> 64 == (v8 * v15) >> 63)
  {
    cblas_dcopy_NEWLAPACK();
    swift_bridgeObjectRelease();
    v16 = v5[3];
    swift_bridgeObjectRetain();
    v8 = sub_1CA0B4464(v16, 0.0);
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) != 0)
      goto LABEL_9;
    goto LABEL_21;
  }
LABEL_20:
  __break(1u);
LABEL_21:
  v8 = (int64_t)sub_1CA0B6058((_QWORD *)v8);
LABEL_9:
  if (v16 < (uint64_t)0xFFFFFFFF80000000)
  {
    __break(1u);
    goto LABEL_23;
  }
  if (v16 > 0x7FFFFFFF)
  {
LABEL_23:
    __break(1u);
    goto LABEL_24;
  }
  if ((unsigned __int128)(v12 * (__int128)v16) >> 64 != (v12 * v16) >> 63)
  {
LABEL_24:
    __break(1u);
    goto LABEL_25;
  }
  cblas_dcopy_NEWLAPACK();
  swift_bridgeObjectRelease();
  __C[0] = 1;
  __C[1] = v15;
  __C[2] = (int64_t)v17;
  v22[0] = 1;
  v22[1] = v16;
  v22[2] = v8;
  * infix(_:_:)(__C, v22, &v24);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  __C[0] = 0;
  v18 = v24 * v25;
  if ((unsigned __int128)(v24 * (__int128)v25) >> 64 != (v24 * v25) >> 63)
  {
LABEL_25:
    __break(1u);
    goto LABEL_26;
  }
  if ((v18 & 0x8000000000000000) == 0)
  {
    vDSP_sveD((const double *)(v26 + 32), 1, (double *)__C, v18);
    swift_bridgeObjectRelease();
    v2 = *(double *)__C;
    v19 = v5[6];
    if (!(v19 >> 62))
    {
      v20 = *(_QWORD *)((v19 & 0xFFFFFFFFFFFFF8) + 0x10);
LABEL_16:
      swift_release();
      *(double *)&result = v2 / (double)v20;
      return result;
    }
LABEL_26:
    swift_bridgeObjectRetain();
    v20 = sub_1CA1F1234();
    swift_bridgeObjectRelease();
    goto LABEL_16;
  }
  *(double *)&result = COERCE_DOUBLE(sub_1CA1F11BC());
  __break(1u);
  return result;
}

_QWORD *sub_1CA11FC5C()
{
  uint64_t v0;
  _QWORD *v1;

  if (*(_QWORD *)(v0 + 224))
  {
    v1 = *(_QWORD **)(v0 + 224);
  }
  else
  {
    v1 = sub_1CA11FCB8();
    *(_QWORD *)(v0 + 224) = v1;
    swift_retain();
    swift_release();
  }
  swift_retain();
  return v1;
}

_QWORD *sub_1CA11FCB8()
{
  _QWORD *v0;
  _QWORD *v1;
  unint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  vDSP_Length v14;
  uint64_t v15;
  uint64_t v16;
  vDSP_Length v17;
  unint64_t v18;
  int64_t v19;
  unint64_t v20;
  uint64_t v21;
  BOOL v22;
  unint64_t v23;
  _QWORD *v24;
  _QWORD *result;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  uint64_t v32;
  uint64_t v33;
  _QWORD *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  BOOL v38;
  uint64_t v39;
  vDSP_Length v40[3];
  int64_t __C[3];
  int64_t v42;
  uint64_t v43;
  uint64_t v44;
  unint64_t v45;
  uint64_t v46;

  v46 = *MEMORY[0x1E0C80C00];
  v1 = (_QWORD *)sub_1CA118E2C();
  v45 = MEMORY[0x1E0DEE9D8];
  v2 = swift_bridgeObjectRetain();
  sub_1CA0B2EE8(v2);
  v27 = v45;
  if (v45 >> 62)
    goto LABEL_64;
  v3 = *(_QWORD *)((v45 & 0xFFFFFFFFFFFFF8) + 0x10);
  v4 = v3;
  while ((unsigned __int128)(v4 * (__int128)v3) >> 64 == (v4 * v3) >> 63)
  {
    v26 = v4;
    v0 = (_QWORD *)sub_1CA0B4464(v4 * v3, 0.0);
    v4 = v1[6];
    if ((unint64_t)v4 >> 62)
      goto LABEL_66;
    v5 = *(_QWORD *)((v4 & 0xFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain();
    if (!v5)
      goto LABEL_67;
LABEL_6:
    v6 = 0;
    v30 = v4;
    v31 = v4 & 0xC000000000000001;
    v28 = v4 & 0xFFFFFFFFFFFFFF8;
    v29 = v5;
    v7 = 32;
    v34 = v1;
    v35 = v3;
    while (1)
    {
      if (v31)
      {
        MEMORY[0x1CAA4A7A4](v6, v4);
        swift_unknownObjectRelease();
      }
      else if ((unint64_t)v6 >= *(_QWORD *)(v28 + 16))
      {
        goto LABEL_63;
      }
      if (__OFADD__(v6, 1))
        break;
      v8 = v1[6];
      if (v8 >> 62)
      {
        swift_bridgeObjectRetain();
        v9 = sub_1CA1F1234();
        swift_bridgeObjectRelease();
        if (v9 < v6)
        {
LABEL_46:
          __break(1u);
LABEL_47:
          __break(1u);
LABEL_48:
          __break(1u);
LABEL_49:
          __break(1u);
LABEL_50:
          __break(1u);
LABEL_51:
          __break(1u);
LABEL_52:
          __break(1u);
LABEL_53:
          __break(1u);
LABEL_54:
          __break(1u);
LABEL_55:
          __break(1u);
LABEL_56:
          __break(1u);
LABEL_57:
          __break(1u);
LABEL_58:
          __break(1u);
LABEL_59:
          __break(1u);
LABEL_60:
          __break(1u);
LABEL_61:
          __break(1u);
          break;
        }
      }
      else
      {
        v9 = *(_QWORD *)((v8 & 0xFFFFFFFFFFFFF8) + 0x10);
        if (v9 < v6)
          goto LABEL_46;
      }
      v32 = v6 + 1;
      v33 = v7;
      if (v6 != v9)
      {
        v36 = v9;
        v37 = v6 * v3;
        v38 = (unsigned __int128)(v6 * (__int128)v3) >> 64 != (v6 * v3) >> 63;
        v10 = v6;
        v39 = v6;
        while (v10 < v9)
        {
          v11 = v1[2];
          if ((v11 & 0x8000000000000000) != 0)
            goto LABEL_74;
          v12 = v1[3];
          swift_bridgeObjectRetain();
          if (v11)
          {
            v13 = sub_1CA1F0B68();
            *(_QWORD *)(v13 + 16) = v11;
            bzero((void *)(v13 + 32), 8 * v11);
            if (v11 >> 31)
              goto LABEL_48;
          }
          else
          {
            v13 = MEMORY[0x1E0DEE9D8];
          }
          if (v12 < (uint64_t)0xFFFFFFFF80000000)
            goto LABEL_49;
          if (v12 > 0x7FFFFFFF)
            goto LABEL_50;
          cblas_dcopy_NEWLAPACK();
          swift_bridgeObjectRelease();
          v14 = v1[2];
          if ((v14 & 0x8000000000000000) != 0)
          {
LABEL_74:
            sub_1CA1F11BC();
            __break(1u);
LABEL_75:
            result = (_QWORD *)sub_1CA1F11BC();
            __break(1u);
            return result;
          }
          v15 = v1[3];
          v1 = (_QWORD *)v1[4];
          swift_bridgeObjectRetain();
          if (v14)
          {
            v16 = sub_1CA1F0B68();
            *(_QWORD *)(v16 + 16) = v14;
            bzero((void *)(v16 + 32), 8 * v14);
            if (v14 >> 31)
              goto LABEL_51;
          }
          else
          {
            v16 = MEMORY[0x1E0DEE9D8];
          }
          if (v15 < (uint64_t)0xFFFFFFFF80000000)
            goto LABEL_52;
          if (v15 > 0x7FFFFFFF)
            goto LABEL_53;
          cblas_dcopy_NEWLAPACK();
          swift_bridgeObjectRelease();
          __C[0] = v11;
          __C[1] = 1;
          __C[2] = v13;
          v40[0] = v14;
          v40[1] = 1;
          v40[2] = v16;
          * infix(_:_:)(__C, v40, &v42);
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          __C[0] = 0;
          v17 = v42 * v43;
          if ((unsigned __int128)(v42 * (__int128)v43) >> 64 != (v42 * v43) >> 63)
            goto LABEL_54;
          if ((v17 & 0x8000000000000000) != 0)
            goto LABEL_75;
          vDSP_sveD((const double *)(v44 + 32), 1, (double *)__C, v17);
          swift_bridgeObjectRelease();
          v1 = v34;
          v3 = v35;
          if (v38)
            goto LABEL_55;
          v18 = v37 + v10;
          if (__OFADD__(v37, v10))
            goto LABEL_56;
          v19 = __C[0];
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) != 0)
          {
            if ((v18 & 0x8000000000000000) != 0)
              goto LABEL_57;
          }
          else
          {
            v0 = sub_1CA0B6058(v0);
            if ((v18 & 0x8000000000000000) != 0)
              goto LABEL_57;
          }
          v20 = v0[2];
          if (v18 >= v20)
            goto LABEL_58;
          v0[v18 + 4] = v19;
          v21 = v10 * v35;
          if ((unsigned __int128)(v10 * (__int128)v35) >> 64 != (v10 * v35) >> 63)
            goto LABEL_59;
          v22 = __OFADD__(v21, v39);
          v23 = v21 + v39;
          if (v22)
            goto LABEL_60;
          if (v23 >= v20)
            goto LABEL_61;
          ++v10;
          v0[v23 + 4] = v19;
          v7 += 8;
          v9 = v36;
          if (v36 == v10)
            goto LABEL_7;
        }
        goto LABEL_47;
      }
LABEL_7:
      v7 = v33 + 8;
      v6 = v32;
      v4 = v30;
      if (v32 == v29)
        goto LABEL_67;
    }
    __break(1u);
LABEL_63:
    __break(1u);
LABEL_64:
    swift_bridgeObjectRetain();
    v4 = sub_1CA1F1234();
    v3 = sub_1CA1F1234();
    swift_bridgeObjectRelease();
  }
  __break(1u);
LABEL_66:
  swift_bridgeObjectRetain();
  v5 = sub_1CA1F1234();
  if (v5)
    goto LABEL_6;
LABEL_67:
  swift_bridgeObjectRelease();
  if (v1[5] >> 62)
  {
    swift_bridgeObjectRetain();
    sub_1CA1F1234();
    swift_bridgeObjectRelease();
  }
  swift_bridgeObjectRetain();
  v24 = v0;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    v24 = sub_1CA0B6058(v0);
  if (v0[2] >> 31)
    __break(1u);
  cblas_dscal_NEWLAPACK();
  swift_release();
  swift_bridgeObjectRelease();
  type metadata accessor for MASquareMatrixRepresentation();
  result = (_QWORD *)swift_allocObject();
  result[2] = v26;
  result[3] = v3;
  result[4] = v24;
  result[5] = v27;
  return result;
}

uint64_t sub_1CA1202C4(uint64_t a1)
{
  uint64_t v1;

  *(_QWORD *)(v1 + 224) = a1;
  return swift_release();
}

uint64_t (*sub_1CA1202D4(_QWORD *a1))(_QWORD *a1)
{
  uint64_t v1;

  a1[1] = v1;
  *a1 = sub_1CA11FC5C();
  return sub_1CA120308;
}

uint64_t sub_1CA120308(_QWORD *a1)
{
  *(_QWORD *)(a1[1] + 224) = *a1;
  return swift_release();
}

uint64_t sub_1CA120318(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  double v3;
  _QWORD *v6;
  unint64_t v7;
  _QWORD *v8;
  _QWORD *v9;
  char v10;
  unint64_t v11;
  char v12;
  char v13;
  int64_t v14;
  uint64_t v15;
  int64_t v16;
  _QWORD *v17;
  vDSP_Length v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t result;
  vDSP_Length v22[3];
  int64_t __C[3];
  int64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;

  v27 = *MEMORY[0x1E0C80C00];
  v6 = (_QWORD *)sub_1CA118E2C();
  v7 = v6[6];
  swift_bridgeObjectRetain();
  sub_1CA0C8364(a1, v7);
  v9 = v8;
  LOBYTE(a1) = v10;
  swift_bridgeObjectRelease();
  if ((a1 & 1) != 0
    || (v11 = v6[6],
        swift_bridgeObjectRetain(),
        sub_1CA0C8364(a2, v11),
        v13 = v12,
        swift_bridgeObjectRelease(),
        (v13 & 1) != 0))
  {
    swift_release();
    *(double *)&result = 0.0;
    return result;
  }
  v14 = v6[2];
  v15 = v6[3];
  v16 = v6[4];
  swift_bridgeObjectRetain();
  v17 = (_QWORD *)sub_1CA0B4464(v14, 0.0);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    v17 = sub_1CA0B6058(v17);
  if (v14 > 0x7FFFFFFF)
  {
    __break(1u);
LABEL_21:
    __break(1u);
    goto LABEL_22;
  }
  if (v14 < (uint64_t)0xFFFFFFFF80000000 || v15 < (uint64_t)0xFFFFFFFF80000000)
    goto LABEL_21;
  if (v15 <= 0x7FFFFFFF)
  {
    cblas_dcopy_NEWLAPACK();
    swift_bridgeObjectRelease();
    v16 = v6[2];
    v2 = v6[3];
    swift_bridgeObjectRetain();
    v9 = (_QWORD *)sub_1CA0B4464(v16, 0.0);
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) != 0)
      goto LABEL_10;
    goto LABEL_23;
  }
LABEL_22:
  __break(1u);
LABEL_23:
  v9 = sub_1CA0B6058(v9);
LABEL_10:
  if (v16 > 0x7FFFFFFF)
  {
    __break(1u);
LABEL_25:
    __break(1u);
    goto LABEL_26;
  }
  if (v16 < (uint64_t)0xFFFFFFFF80000000 || v2 < (uint64_t)0xFFFFFFFF80000000)
    goto LABEL_25;
  if (v2 > 0x7FFFFFFF)
  {
LABEL_26:
    __break(1u);
    goto LABEL_27;
  }
  cblas_dcopy_NEWLAPACK();
  swift_bridgeObjectRelease();
  __C[0] = v14;
  __C[1] = 1;
  __C[2] = (int64_t)v17;
  v22[0] = v16;
  v22[1] = 1;
  v22[2] = (vDSP_Length)v9;
  * infix(_:_:)(__C, v22, &v24);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  __C[0] = 0;
  v18 = v24 * v25;
  if ((unsigned __int128)(v24 * (__int128)v25) >> 64 != (v24 * v25) >> 63)
  {
LABEL_27:
    __break(1u);
    goto LABEL_28;
  }
  if ((v18 & 0x8000000000000000) == 0)
  {
    vDSP_sveD((const double *)(v26 + 32), 1, (double *)__C, v18);
    swift_bridgeObjectRelease();
    v3 = *(double *)__C;
    v19 = v6[5];
    if (!(v19 >> 62))
    {
      v20 = *(_QWORD *)((v19 & 0xFFFFFFFFFFFFF8) + 0x10);
LABEL_18:
      swift_release();
      *(double *)&result = v3 / (double)v20;
      return result;
    }
LABEL_28:
    swift_bridgeObjectRetain();
    v20 = sub_1CA1F1234();
    swift_bridgeObjectRelease();
    goto LABEL_18;
  }
  *(double *)&result = COERCE_DOUBLE(sub_1CA1F11BC());
  __break(1u);
  return result;
}

void sub_1CA12063C(void (*a1)(uint64_t, uint64_t))
{
  uint64_t v1;
  void *v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  int64_t v19;
  int64_t v20;
  uint64_t v21;
  uint64_t v23;
  int64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  BOOL v28;
  uint64_t v29;
  unint64_t v30;
  id v31;
  unint64_t v32;
  char v33;
  unint64_t v34;
  uint64_t v35;
  id v36;
  unint64_t v37;
  char v38;
  uint64_t v39;
  uint64_t v40;
  unint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  unint64_t v46;
  _QWORD *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  void *v53;
  uint64_t v54;
  uint64_t v55;
  BOOL v56;
  uint64_t v57;
  uint64_t v58;
  _QWORD *v59;
  unint64_t v60;
  uint64_t v61;

  v3 = sub_1CA115D88();
  v4 = sub_1CA115D88();
  v50 = v4;
  if ((unsigned __int128)(v3 * (__int128)v4) >> 64 != (v3 * v4) >> 63)
    goto LABEL_102;
  v53 = v2;
  v48 = v3;
  v5 = (_QWORD *)sub_1CA0B4464(v3 * v4, 0.0);
  v61 = MEMORY[0x1E0DEE9D8];
  v6 = *(_QWORD *)(v1 + 16);
  v7 = swift_bridgeObjectRetain();
  sub_1CA0C1F1C(v7);
  sub_1CA0B2380(v8);
  v9 = sub_1CA115D88();
  if (v9 < 0)
  {
LABEL_103:
    __break(1u);
    return;
  }
  v10 = v9;
  if (!v9)
    goto LABEL_83;
  v11 = 0;
  v12 = v6 + 64;
  v54 = 0;
  v55 = 32;
  v51 = v9;
  while (2)
  {
    if (v11 == v10)
      goto LABEL_93;
    v57 = v11;
    v13 = swift_bridgeObjectRetain();
    sub_1CA0C1F1C(v13);
    if ((v14 & 0xC000000000000001) != 0)
      v15 = sub_1CA1F0FA0();
    else
      v15 = *(_QWORD *)(v14 + 16);
    swift_bridgeObjectRelease();
    v60 = MEMORY[0x1E0DEE9D8];
    v16 = 1 << *(_BYTE *)(v6 + 32);
    if (v16 < 64)
      v17 = ~(-1 << v16);
    else
      v17 = -1;
    v18 = v17 & *(_QWORD *)(v6 + 64);
    v19 = (unint64_t)(v16 + 63) >> 6;
    swift_bridgeObjectRetain_n();
    v20 = 0;
    while (1)
    {
      if (v18)
      {
        v18 &= v18 - 1;
        goto LABEL_15;
      }
      if (__OFADD__(v20++, 1))
      {
        __break(1u);
LABEL_85:
        __break(1u);
LABEL_86:
        __break(1u);
LABEL_87:
        __break(1u);
LABEL_88:
        __break(1u);
LABEL_89:
        __break(1u);
LABEL_90:
        __break(1u);
LABEL_91:
        __break(1u);
        goto LABEL_92;
      }
      if (v20 >= v19)
        goto LABEL_34;
      v23 = *(_QWORD *)(v12 + 8 * v20);
      if (!v23)
        break;
LABEL_29:
      v18 = (v23 - 1) & v23;
LABEL_15:
      v21 = swift_bridgeObjectRetain();
      sub_1CA0B2380(v21);
    }
    v24 = v20 + 1;
    if (v20 + 1 >= v19)
      goto LABEL_34;
    v23 = *(_QWORD *)(v12 + 8 * v24);
    if (v23)
      goto LABEL_28;
    v24 = v20 + 2;
    if (v20 + 2 >= v19)
      goto LABEL_34;
    v23 = *(_QWORD *)(v12 + 8 * v24);
    if (v23)
      goto LABEL_28;
    v24 = v20 + 3;
    if (v20 + 3 >= v19)
      goto LABEL_34;
    v23 = *(_QWORD *)(v12 + 8 * v24);
    if (v23)
    {
LABEL_28:
      v20 = v24;
      goto LABEL_29;
    }
    v24 = v20 + 4;
    if (v20 + 4 < v19)
    {
      v23 = *(_QWORD *)(v12 + 8 * v24);
      if (!v23)
      {
        while (1)
        {
          v20 = v24 + 1;
          if (__OFADD__(v24, 1))
            break;
          if (v20 >= v19)
            goto LABEL_34;
          v23 = *(_QWORD *)(v12 + 8 * v20);
          ++v24;
          if (v23)
            goto LABEL_29;
        }
LABEL_92:
        __break(1u);
LABEL_93:
        __break(1u);
LABEL_94:
        __break(1u);
LABEL_95:
        __break(1u);
LABEL_96:
        __break(1u);
LABEL_97:
        __break(1u);
LABEL_98:
        __break(1u);
LABEL_99:
        __break(1u);
LABEL_100:
        __break(1u);
LABEL_101:
        __break(1u);
LABEL_102:
        __break(1u);
        goto LABEL_103;
      }
      goto LABEL_28;
    }
LABEL_34:
    swift_release();
    swift_bridgeObjectRelease();
    v25 = sub_1CA0C68DC(v60);
    swift_bridgeObjectRelease();
    if ((v25 & 0xC000000000000001) != 0)
      sub_1CA1F0FA0();
    swift_bridgeObjectRelease();
    if (v15 < v57)
      goto LABEL_94;
    if (v57 == v15)
    {
LABEL_5:
      --v54;
      v55 += 8;
      v11 = v57 + 1;
      v10 = v51;
      if (v57 + 1 == v51)
        goto LABEL_83;
      continue;
    }
    break;
  }
  v26 = 0;
  v49 = v57 * v50;
  v27 = v57 * v50 + v57;
  v28 = __OFADD__(v57 * v50, v57);
  v56 = v28;
  v29 = v15 + v54;
  v30 = v57;
  v58 = v29;
  while (2)
  {
    if (!v26)
    {
      if ((unsigned __int128)(v57 * (__int128)v50) >> 64 != (v57 * v50) >> 63)
        goto LABEL_86;
      if (v56)
        goto LABEL_87;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) != 0)
      {
        if ((v27 & 0x8000000000000000) != 0)
          goto LABEL_88;
      }
      else
      {
        v5 = sub_1CA0B6058(v5);
        if ((v27 & 0x8000000000000000) != 0)
          goto LABEL_88;
      }
      if (v27 >= v5[2])
        goto LABEL_89;
      v5[v27 + 4] = 0x3FF0000000000000;
      goto LABEL_42;
    }
    if (v30 >= *(_QWORD *)((v61 & 0xFFFFFFFFFFFFFF8) + 0x10))
      goto LABEL_85;
    if (!*(_QWORD *)(v6 + 16))
    {
LABEL_42:
      if (v29 == ++v26)
        goto LABEL_5;
      continue;
    }
    break;
  }
  v31 = *(id *)(v61 + 8 * v30 + 32);
  v32 = sub_1CA0AA594((uint64_t)v31);
  if ((v33 & 1) == 0)
  {

LABEL_70:
    v29 = v58;
    v27 = v57 * v50 + v57;
    goto LABEL_42;
  }
  v59 = v5;
  v34 = v30 + v26;
  v35 = *(_QWORD *)(*(_QWORD *)(v6 + 56) + 8 * v32);
  swift_bridgeObjectRetain();

  if ((v34 & 0x8000000000000000) != 0)
    goto LABEL_90;
  if (v34 >= *(_QWORD *)((v61 & 0xFFFFFFFFFFFFFF8) + 0x10))
    goto LABEL_91;
  if (!*(_QWORD *)(v6 + 16))
  {
    swift_bridgeObjectRelease();
LABEL_69:
    v5 = v59;
    v30 = v57;
    goto LABEL_70;
  }
  v36 = *(id *)(v61 + v55 + 8 * v26);
  v37 = sub_1CA0AA594((uint64_t)v36);
  if ((v38 & 1) == 0)
  {
    swift_bridgeObjectRelease();

    goto LABEL_69;
  }
  v39 = *(_QWORD *)(*(_QWORD *)(v6 + 56) + 8 * v37);
  swift_bridgeObjectRetain();

  a1(v35, v39);
  if (v53)
  {

  }
  else
  {
    if ((unsigned __int128)(v57 * (__int128)v50) >> 64 != (v57 * v50) >> 63)
      goto LABEL_95;
    v41 = v49 + v34;
    if (__OFADD__(v49, v34))
      goto LABEL_96;
    v42 = v40;
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) != 0)
    {
      if ((v41 & 0x8000000000000000) != 0)
        goto LABEL_101;
    }
    else
    {
      v59 = sub_1CA0B6058(v59);
      if ((v41 & 0x8000000000000000) != 0)
        goto LABEL_101;
    }
    if (v41 >= v59[2])
      goto LABEL_97;
    v59[v41 + 4] = v42;
  }
  a1(v39, v35);
  v44 = v43;
  v53 = 0;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v45 = v34 * v50;
  if ((unsigned __int128)((uint64_t)v34 * (__int128)v50) >> 64 != (uint64_t)(v34 * v50) >> 63)
    goto LABEL_98;
  v46 = v45 + v57;
  if (__OFADD__(v45, v57))
    goto LABEL_99;
  v5 = v59;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) != 0)
  {
    v29 = v58;
    v27 = v57 * v50 + v57;
    if ((v46 & 0x8000000000000000) != 0)
      goto LABEL_82;
LABEL_75:
    if (v46 >= v5[2])
      goto LABEL_100;
    v5[v46 + 4] = v44;
    v30 = v57;
    goto LABEL_42;
  }
  v5 = sub_1CA0B6058(v59);
  v29 = v58;
  v27 = v57 * v50 + v57;
  if ((v46 & 0x8000000000000000) == 0)
    goto LABEL_75;
LABEL_82:
  __break(1u);
LABEL_83:
  type metadata accessor for MASquareMatrixRepresentation();
  v47 = (_QWORD *)swift_allocObject();
  v47[2] = v48;
  v47[3] = v50;
  v47[4] = v5;
  v47[5] = v61;
}

uint64_t sub_1CA120C48(Swift::Double a1)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  Swift::tuple_U_KnowledgeGraphKit_MAMatrix_W_KnowledgeGraphKit_MAMatrix_V_KnowledgeGraphKit_MAMatrix *v6;
  __int128 v7;
  uint64_t v8;
  __int128 v9;
  uint64_t v10;
  uint64_t result;
  uint64_t v12;
  __int128 v13;
  Swift::Int v14;
  Swift::Int v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  __int128 v19;
  __int128 v20;
  uint64_t v21;
  __int128 v22;
  uint64_t v23;
  __int128 v24;
  uint64_t v25;
  __int128 v26;
  uint64_t v27;

  v2 = (_QWORD *)sub_1CA118E2C();
  v3 = v2[2];
  v4 = v2[3];
  v5 = v2[4];
  swift_bridgeObjectRetain();
  swift_release();
  *(_QWORD *)&v20 = v3;
  *((_QWORD *)&v20 + 1) = v4;
  v21 = v5;
  MAMatrix.svd()(v6);
  swift_bridgeObjectRelease();
  v7 = v26;
  v8 = v27;
  v9 = v22;
  v10 = v23;
  v26 = v24;
  v27 = v25;
  result = *(_OWORD *)&MAMatrix.elbow(threshold:)(a1);
  if (__OFADD__(result, 1))
  {
    __break(1u);
  }
  else
  {
    MAMatrix.trunc(rows:columns:)(1, result + 1);
    v12 = v27;
    v13 = v26;
    v26 = v7;
    v27 = v8;
    v24 = v13;
    v25 = v12;
    v14 = *(_QWORD *)(sub_1CA118E2C() + 16);
    swift_release();
    v15 = *(_QWORD *)(sub_1CA118E2C() + 24);
    swift_release();
    MAMatrix.diag(rows:columns:)(v14, v15);
    swift_bridgeObjectRelease();
    v20 = v22;
    v21 = v23;
    <*> infix(_:_:)((uint64_t *)&v26, &v20, (uint64_t *)&v24);
    swift_bridgeObjectRelease();
    v22 = v24;
    v23 = v25;
    v20 = v9;
    v21 = v10;
    <*> infix(_:_:)((uint64_t *)&v22, &v20, (uint64_t *)&v26);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v19 = v26;
    v16 = v27;
    v17 = *(_QWORD *)(sub_1CA118E2C() + 40);
    swift_bridgeObjectRetain();
    swift_release();
    v18 = *(_QWORD *)(sub_1CA118E2C() + 48);
    swift_bridgeObjectRetain();
    swift_release();
    type metadata accessor for MAMatrixRepresentation();
    result = swift_allocObject();
    *(_OWORD *)(result + 16) = v19;
    *(_QWORD *)(result + 32) = v16;
    *(_QWORD *)(result + 40) = v17;
    *(_QWORD *)(result + 48) = v18;
  }
  return result;
}

uint64_t MADistribution.deinit()
{
  uint64_t v0;

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  return v0;
}

uint64_t MADistribution.__deallocating_deinit()
{
  MADistribution.deinit();
  return swift_deallocClassInstance();
}

uint64_t sub_1CA120F68(char a1)
{
  return sub_1CA11AE50(a1);
}

uint64_t sub_1CA120F88(uint64_t a1)
{
  return sub_1CA11B634(a1);
}

uint64_t sub_1CA120FA8()
{
  return sub_1CA122D50();
}

void MADistribution.description.getter()
{
  uint64_t v0;
  uint64_t v1;
  unint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  int64_t v7;
  unint64_t v8;
  int64_t v9;
  unint64_t v10;
  int64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  id v15;
  id v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  int64_t v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  id v28;
  int64_t v29;
  unint64_t v30;
  uint64_t v31;
  id v32;
  uint64_t v33;
  int64_t v34;
  uint64_t v35;
  void *v36;
  uint64_t v37;
  int64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  unint64_t v42;

  sub_1CA1F1054();
  swift_bridgeObjectRelease();
  v35 = swift_bridgeObjectRetain();
  sub_1CA0C1F1C(v35);
  if ((v0 & 0xC000000000000001) != 0)
    sub_1CA1F0FA0();
  swift_bridgeObjectRelease();
  sub_1CA1F12AC();
  sub_1CA1F0A3C();
  swift_bridgeObjectRelease();
  sub_1CA1F0A3C();
  v1 = swift_bridgeObjectRetain();
  v2 = sub_1CA115C1C(v1);
  swift_bridgeObjectRelease();
  v3 = sub_1CA0C68DC(v2);
  swift_bridgeObjectRelease();
  if ((v3 & 0xC000000000000001) != 0)
    sub_1CA1F0FA0();
  swift_bridgeObjectRelease();
  sub_1CA1F12AC();
  sub_1CA1F0A3C();
  swift_bridgeObjectRelease();
  sub_1CA1F0A3C();
  v33 = v35 + 64;
  v4 = 1 << *(_BYTE *)(v35 + 32);
  if (v4 < 64)
    v5 = ~(-1 << v4);
  else
    v5 = -1;
  v6 = v5 & *(_QWORD *)(v35 + 64);
  v34 = (unint64_t)(v4 + 63) >> 6;
  swift_bridgeObjectRetain();
  v7 = 0;
LABEL_10:
  if (v6)
  {
    v37 = (v6 - 1) & v6;
    v38 = v7;
    v8 = __clz(__rbit64(v6)) | (v7 << 6);
  }
  else
  {
    v9 = v7 + 1;
    if (__OFADD__(v7, 1))
      goto LABEL_58;
    if (v9 >= v34)
      goto LABEL_56;
    v10 = *(_QWORD *)(v33 + 8 * v9);
    v11 = v7 + 1;
    if (!v10)
    {
      v11 = v7 + 2;
      if (v7 + 2 >= v34)
        goto LABEL_56;
      v10 = *(_QWORD *)(v33 + 8 * v11);
      if (!v10)
      {
        v11 = v7 + 3;
        if (v7 + 3 >= v34)
          goto LABEL_56;
        v10 = *(_QWORD *)(v33 + 8 * v11);
        if (!v10)
        {
          v12 = v7 + 4;
          if (v7 + 4 >= v34)
            goto LABEL_56;
          v10 = *(_QWORD *)(v33 + 8 * v12);
          if (v10)
          {
            v11 = v7 + 4;
          }
          else
          {
            do
            {
              v11 = v12 + 1;
              if (__OFADD__(v12, 1))
                goto LABEL_59;
              if (v11 >= v34)
              {
LABEL_56:
                swift_release();
                return;
              }
              v10 = *(_QWORD *)(v33 + 8 * v11);
              ++v12;
            }
            while (!v10);
          }
        }
      }
    }
    v37 = (v10 - 1) & v10;
    v38 = v11;
    v8 = __clz(__rbit64(v10)) + (v11 << 6);
  }
  v13 = 8 * v8;
  v14 = *(_QWORD *)(*(_QWORD *)(v35 + 56) + v13);
  v15 = *(id *)(*(_QWORD *)(v35 + 48) + v13);
  swift_bridgeObjectRetain();
  sub_1CA1F1054();
  swift_bridgeObjectRelease();
  v39 = 2314;
  v36 = v15;
  v16 = objc_msgSend(v15, sel_visualString);
  sub_1CA1F0A0C();

  sub_1CA1F0A3C();
  swift_bridgeObjectRelease();
  sub_1CA1F0A3C();
  if ((v14 & 0xC000000000000001) != 0)
    sub_1CA1F0FA0();
  sub_1CA1F12AC();
  sub_1CA1F0A3C();
  swift_bridgeObjectRelease();
  sub_1CA1F0A3C();
  sub_1CA1F0A3C();
  swift_bridgeObjectRelease();
  if ((v14 & 0xC000000000000001) != 0)
  {
    sub_1CA1F0F64();
    sub_1CA0B6A1C();
    sub_1CA0C0614();
    sub_1CA1F0CC4();
    v14 = 0xD00000000000001ALL;
    v17 = 0x80000001CA207E00;
    v18 = v40;
    v19 = v41;
    v20 = v42;
  }
  else
  {
    v19 = 0;
    v21 = -1 << *(_BYTE *)(v14 + 32);
    v17 = v14 + 56;
    v18 = ~v21;
    v22 = -v21;
    if (v22 < 64)
      v23 = ~(-1 << v22);
    else
      v23 = -1;
    v20 = v23 & *(_QWORD *)(v14 + 56);
  }
  v24 = (unint64_t)(v18 + 64) >> 6;
  if ((v14 & 0x8000000000000000) != 0)
  {
LABEL_37:
    if (!sub_1CA1F0FD0())
      goto LABEL_9;
    sub_1CA0B6A1C();
    swift_unknownObjectRetain();
    swift_dynamicCast();
    v28 = (id)v39;
    swift_unknownObjectRelease();
    v27 = v19;
    v25 = v20;
    goto LABEL_54;
  }
  while (1)
  {
    if (v20)
    {
      v25 = (v20 - 1) & v20;
      v26 = __clz(__rbit64(v20)) | (v19 << 6);
      v27 = v19;
      goto LABEL_53;
    }
    v29 = v19 + 1;
    if (__OFADD__(v19, 1))
      break;
    if (v29 >= v24)
      goto LABEL_9;
    v30 = *(_QWORD *)(v17 + 8 * v29);
    v27 = v19 + 1;
    if (!v30)
    {
      v27 = v19 + 2;
      if (v19 + 2 >= v24)
        goto LABEL_9;
      v30 = *(_QWORD *)(v17 + 8 * v27);
      if (!v30)
      {
        v27 = v19 + 3;
        if (v19 + 3 >= v24)
          goto LABEL_9;
        v30 = *(_QWORD *)(v17 + 8 * v27);
        if (!v30)
        {
          v27 = v19 + 4;
          if (v19 + 4 >= v24)
            goto LABEL_9;
          v30 = *(_QWORD *)(v17 + 8 * v27);
          if (!v30)
          {
            v31 = v19 + 5;
            while (v24 != v31)
            {
              v30 = *(_QWORD *)(v17 + 8 * v31++);
              if (v30)
              {
                v27 = v31 - 1;
                goto LABEL_52;
              }
            }
LABEL_9:
            sub_1CA0B6A14();

            v6 = v37;
            v7 = v38;
            goto LABEL_10;
          }
        }
      }
    }
LABEL_52:
    v25 = (v30 - 1) & v30;
    v26 = __clz(__rbit64(v30)) + (v27 << 6);
LABEL_53:
    v28 = *(id *)(*(_QWORD *)(v14 + 48) + 8 * v26);
    if (!v28)
      goto LABEL_9;
LABEL_54:
    v39 = 592138;
    v32 = objc_msgSend(v28, sel_visualString, v33);
    sub_1CA1F0A0C();

    sub_1CA1F0A3C();
    swift_bridgeObjectRelease();
    sub_1CA1F0A3C();

    swift_bridgeObjectRelease();
    v19 = v27;
    v20 = v25;
    if ((v14 & 0x8000000000000000) != 0)
      goto LABEL_37;
  }
  __break(1u);
LABEL_58:
  __break(1u);
LABEL_59:
  __break(1u);
}

void sub_1CA121658()
{
  MADistribution.description.getter();
}

double MANode.neighborDistribution(withLabel:domain:)(uint64_t a1, void *a2, unsigned __int16 a3)
{
  return sub_1CA121690(a1, a2, a3, (SEL *)&selRef_neighborNodesWithLabel_domain_);
}

double MANode.neighborDistributionThroughEdges(withLabel:domain:)(uint64_t a1, void *a2, unsigned __int16 a3)
{
  return sub_1CA121690(a1, a2, a3, (SEL *)&selRef_neighborNodesThroughEdgesWithLabel_domain_);
}

double sub_1CA121690(uint64_t a1, void *a2, unsigned __int16 a3, SEL *a4)
{
  void *v4;
  uint64_t inited;
  id v9;
  id v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  double result;

  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_1EF93A340);
  inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_1CA1F9100;
  *(_QWORD *)(inited + 32) = v4;
  v9 = v4;
  if (a2)
    a2 = (void *)sub_1CA1F0A00();
  v10 = objc_msgSend(v4, *a4, a2, a3);

  sub_1CA0B6A1C();
  sub_1CA0C0614();
  v11 = sub_1CA1F0C94();

  *(_QWORD *)(inited + 40) = v11;
  v12 = sub_1CA0AC0C0(inited);
  v13 = sub_1CA0ABFB8(MEMORY[0x1E0DEE9D8]);
  type metadata accessor for MADistribution();
  v14 = swift_allocObject();
  result = 0.0;
  *(_OWORD *)(v14 + 32) = 0u;
  *(_OWORD *)(v14 + 48) = 0u;
  *(_OWORD *)(v14 + 64) = 0u;
  *(_OWORD *)(v14 + 80) = 0u;
  *(_OWORD *)(v14 + 96) = 0u;
  *(_OWORD *)(v14 + 112) = 0u;
  *(_OWORD *)(v14 + 128) = 0u;
  *(_OWORD *)(v14 + 144) = 0u;
  *(_OWORD *)(v14 + 160) = 0u;
  *(_BYTE *)(v14 + 176) = 1;
  *(_OWORD *)(v14 + 184) = 0u;
  *(_OWORD *)(v14 + 200) = 0u;
  *(_OWORD *)(v14 + 216) = 0u;
  *(_QWORD *)(v14 + 16) = v12;
  *(_QWORD *)(v14 + 24) = v13;
  return result;
}

uint64_t MADistribution.sourceDegreeGaussianCumulative(lowerBoundPercent:upperBoundPercent:inverse:minimumDegree:)(char a1, double a2, double a3, double a4)
{
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  vDSP_Length v12;
  double v13;
  double v14;
  uint64_t v15;
  uint64_t result;
  double __C[2];

  __C[1] = *(double *)MEMORY[0x1E0C80C00];
  sub_1CA11C1C4();
  v8 = (_QWORD *)sub_1CA0D2AD8(a4);
  swift_release();
  v9 = v8[2];
  v10 = v8[3];
  v11 = v8[4];
  __C[0] = 0.0;
  v12 = v9 * v10;
  if ((unsigned __int128)(v9 * (__int128)v10) >> 64 != (v9 * v10) >> 63)
    __break(1u);
  if ((v12 & 0x8000000000000000) != 0)
  {
    result = sub_1CA1F11BC();
    __break(1u);
  }
  else
  {
    swift_bridgeObjectRetain();
    vDSP_meanvD((const double *)(v11 + 32), 1, __C, v12);
    swift_bridgeObjectRelease();
    v13 = __C[0];
    v14 = MAVectorRepresentation.pstddev()();
    v15 = MAVectorRepresentation.gaussianCumulative(lowerBoundPercent:upperBoundPercent:inverse:mu:sigma:)(a1 & 1, a2, a3, v13, v14);
    swift_release();
    return v15;
  }
  return result;
}

void sub_1CA121924(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  void *v15;
  id v16;
  id v17;
  uint64_t v18;
  uint64_t v19;
  void *v20;
  id v21;
  id v22;
  id v23;
  id v24;
  __int128 *v25;
  uint64_t v26;
  uint64_t v27;
  __int128 *v28;
  __int128 v29;
  uint64_t v30;
  uint64_t v31;
  __int128 v32;
  uint64_t v33;
  uint64_t v34;
  void *v35;
  id v36;
  id v37;
  id v38;
  id v39;
  unint64_t v40;
  unint64_t v41;
  char *v42;
  char *v43;
  unint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  char v48;
  char *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  BOOL v55;
  unint64_t v56;
  char *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  char *v62;
  uint64_t v63;
  uint64_t v64;
  BOOL v65;
  uint64_t v66;
  char v67;
  char *v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  BOOL v72;
  uint64_t v73;
  uint64_t v74;
  char *v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  char *v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  unint64_t v83;
  char *v84;
  char *v85;
  uint64_t v86;
  char *v87;
  uint64_t v88;
  unint64_t v89;
  char *v90;
  uint64_t v91;
  unint64_t v92;
  uint64_t v93;
  uint64_t v94;
  char *v95;
  unint64_t v96;
  uint64_t *v97;
  uint64_t v98;
  uint64_t v99;
  char *v100;
  char *v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  id v109;
  uint64_t v110;
  char *v111;
  id v112;
  uint64_t v113;
  uint64_t v114;

  v2 = v1;
  v4 = a1[1];
  v5 = sub_1CA1F12A0();
  if (v5 >= v4)
  {
    if (v4 < 0)
      goto LABEL_133;
    if (v4)
      sub_1CA122124(0, v4, 1, a1);
    return;
  }
  if (v4 >= 0)
    v6 = v4;
  else
    v6 = v4 + 1;
  if (v4 < -1)
    goto LABEL_141;
  v102 = v5;
  v97 = a1;
  if (v4 < 2)
  {
    v8 = MEMORY[0x1E0DEE9D8];
    v111 = (char *)(MEMORY[0x1E0DEE9D8] + 32);
    if (v4 != 1)
    {
      v12 = *(_QWORD *)(MEMORY[0x1E0DEE9D8] + 16);
      v11 = (char *)MEMORY[0x1E0DEE9D8];
LABEL_99:
      v105 = v8;
      if (v12 >= 2)
      {
        v91 = *v97;
        do
        {
          v92 = v12 - 2;
          if (v12 < 2)
            goto LABEL_128;
          if (!v91)
            goto LABEL_140;
          v93 = *(_QWORD *)&v11[16 * v92 + 32];
          v94 = *(_QWORD *)&v11[16 * v12 + 24];
          sub_1CA12225C((id *)(v91 + 16 * v93), (id *)(v91 + 16 * *(_QWORD *)&v11[16 * v12 + 16]), v91 + 16 * v94, v111);
          if (v2)
            break;
          if (v94 < v93)
            goto LABEL_129;
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
            v11 = sub_1CA13B478((uint64_t)v11);
          if (v92 >= *((_QWORD *)v11 + 2))
            goto LABEL_130;
          v95 = &v11[16 * v92 + 32];
          *(_QWORD *)v95 = v93;
          *((_QWORD *)v95 + 1) = v94;
          v96 = *((_QWORD *)v11 + 2);
          if (v12 > v96)
            goto LABEL_131;
          memmove(&v11[16 * v12 + 16], &v11[16 * v12 + 32], 16 * (v96 - v12));
          *((_QWORD *)v11 + 2) = v96 - 1;
          v12 = v96 - 1;
        }
        while (v96 > 2);
      }
LABEL_110:
      swift_bridgeObjectRelease();
      *(_QWORD *)(v105 + 16) = 0;
      swift_bridgeObjectRelease();
      return;
    }
  }
  else
  {
    v7 = v6 >> 1;
    __swift_instantiateConcreteTypeFromMangledName(&qword_1EF937AE8);
    v8 = sub_1CA1F0B68();
    *(_QWORD *)(v8 + 16) = v7;
    v111 = (char *)(v8 + 32);
  }
  v105 = v8;
  v9 = 0;
  v10 = *a1;
  v98 = *a1 - 16;
  v99 = *a1 + 40;
  v11 = (char *)MEMORY[0x1E0DEE9D8];
  v108 = v4;
  v114 = *a1;
  while (1)
  {
    v13 = v9;
    v14 = v9 + 1;
    v107 = v9;
    if (v9 + 1 < v4)
    {
      v103 = v2;
      v15 = *(void **)(v10 + 16 * v9);
      v16 = *(id *)(v10 + 16 * v14);
      swift_bridgeObjectRetain();
      v17 = v15;
      swift_bridgeObjectRetain();
      v112 = objc_msgSend(v16, sel_hash);
      v109 = objc_msgSend(v17, sel_hash);
      v4 = v108;
      swift_bridgeObjectRelease();

      swift_bridgeObjectRelease();
      v14 = v13 + 2;
      if (v13 + 2 < v108)
      {
        v100 = v11;
        v18 = v99 + 16 * v13;
        while (1)
        {
          v19 = v14;
          v20 = *(void **)(v18 - 24);
          v21 = *(id *)(v18 - 8);
          swift_bridgeObjectRetain();
          v22 = v20;
          swift_bridgeObjectRetain();
          v23 = objc_msgSend(v21, sel_hash);
          v24 = objc_msgSend(v22, sel_hash);
          swift_bridgeObjectRelease();

          swift_bridgeObjectRelease();
          if ((uint64_t)v112 < (uint64_t)v109 == (uint64_t)v23 >= (uint64_t)v24)
            break;
          ++v14;
          v18 += 16;
          v4 = v108;
          if (v108 == v19 + 1)
          {
            v14 = v108;
            v11 = v100;
            goto LABEL_22;
          }
        }
        v11 = v100;
        v4 = v108;
LABEL_22:
        v13 = v107;
      }
      v2 = v103;
      v10 = v114;
      if ((uint64_t)v112 < (uint64_t)v109)
      {
        if (v14 < v13)
          goto LABEL_134;
        if (v13 < v14)
        {
          v25 = (__int128 *)(v98 + 16 * v14);
          v26 = v14;
          v27 = v13;
          v28 = (__int128 *)(v114 + 16 * v13);
          do
          {
            if (v27 != --v26)
            {
              if (!v114)
                goto LABEL_139;
              v29 = *v28;
              *v28 = *v25;
              *v25 = v29;
            }
            ++v27;
            --v25;
            ++v28;
          }
          while (v27 < v26);
        }
      }
    }
    if (v14 < v4)
    {
      if (__OFSUB__(v14, v13))
        goto LABEL_132;
      if (v14 - v13 < v102)
        break;
    }
LABEL_50:
    if (v14 < v13)
      goto LABEL_127;
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      v11 = sub_1CA13B230(0, *((_QWORD *)v11 + 2) + 1, 1, v11);
    v41 = *((_QWORD *)v11 + 2);
    v40 = *((_QWORD *)v11 + 3);
    v12 = v41 + 1;
    v10 = v114;
    if (v41 >= v40 >> 1)
    {
      v90 = sub_1CA13B230((char *)(v40 > 1), v41 + 1, 1, v11);
      v10 = v114;
      v11 = v90;
    }
    *((_QWORD *)v11 + 2) = v12;
    v42 = v11 + 32;
    v43 = &v11[16 * v41 + 32];
    *(_QWORD *)v43 = v13;
    *((_QWORD *)v43 + 1) = v14;
    v113 = v14;
    if (v41)
    {
      while (1)
      {
        v44 = v12 - 1;
        if (v12 >= 4)
        {
          v49 = &v42[16 * v12];
          v50 = *((_QWORD *)v49 - 8);
          v51 = *((_QWORD *)v49 - 7);
          v55 = __OFSUB__(v51, v50);
          v52 = v51 - v50;
          if (v55)
            goto LABEL_116;
          v54 = *((_QWORD *)v49 - 6);
          v53 = *((_QWORD *)v49 - 5);
          v55 = __OFSUB__(v53, v54);
          v47 = v53 - v54;
          v48 = v55;
          if (v55)
            goto LABEL_117;
          v56 = v12 - 2;
          v57 = &v42[16 * v12 - 32];
          v59 = *(_QWORD *)v57;
          v58 = *((_QWORD *)v57 + 1);
          v55 = __OFSUB__(v58, v59);
          v60 = v58 - v59;
          if (v55)
            goto LABEL_119;
          v55 = __OFADD__(v47, v60);
          v61 = v47 + v60;
          if (v55)
            goto LABEL_122;
          if (v61 >= v52)
          {
            v79 = &v42[16 * v44];
            v81 = *(_QWORD *)v79;
            v80 = *((_QWORD *)v79 + 1);
            v55 = __OFSUB__(v80, v81);
            v82 = v80 - v81;
            if (v55)
              goto LABEL_126;
            v72 = v47 < v82;
            goto LABEL_87;
          }
        }
        else
        {
          if (v12 != 3)
          {
            v73 = *((_QWORD *)v11 + 4);
            v74 = *((_QWORD *)v11 + 5);
            v55 = __OFSUB__(v74, v73);
            v66 = v74 - v73;
            v67 = v55;
            goto LABEL_81;
          }
          v46 = *((_QWORD *)v11 + 4);
          v45 = *((_QWORD *)v11 + 5);
          v55 = __OFSUB__(v45, v46);
          v47 = v45 - v46;
          v48 = v55;
        }
        if ((v48 & 1) != 0)
          goto LABEL_118;
        v56 = v12 - 2;
        v62 = &v42[16 * v12 - 32];
        v64 = *(_QWORD *)v62;
        v63 = *((_QWORD *)v62 + 1);
        v65 = __OFSUB__(v63, v64);
        v66 = v63 - v64;
        v67 = v65;
        if (v65)
          goto LABEL_121;
        v68 = &v42[16 * v44];
        v70 = *(_QWORD *)v68;
        v69 = *((_QWORD *)v68 + 1);
        v55 = __OFSUB__(v69, v70);
        v71 = v69 - v70;
        if (v55)
          goto LABEL_124;
        if (__OFADD__(v66, v71))
          goto LABEL_125;
        if (v66 + v71 >= v47)
        {
          v72 = v47 < v71;
LABEL_87:
          if (v72)
            v44 = v56;
          goto LABEL_89;
        }
LABEL_81:
        if ((v67 & 1) != 0)
          goto LABEL_120;
        v75 = &v42[16 * v44];
        v77 = *(_QWORD *)v75;
        v76 = *((_QWORD *)v75 + 1);
        v55 = __OFSUB__(v76, v77);
        v78 = v76 - v77;
        if (v55)
          goto LABEL_123;
        if (v78 < v66)
          goto LABEL_14;
LABEL_89:
        v83 = v44 - 1;
        if (v44 - 1 >= v12)
        {
          __break(1u);
LABEL_113:
          __break(1u);
LABEL_114:
          __break(1u);
LABEL_115:
          __break(1u);
LABEL_116:
          __break(1u);
LABEL_117:
          __break(1u);
LABEL_118:
          __break(1u);
LABEL_119:
          __break(1u);
LABEL_120:
          __break(1u);
LABEL_121:
          __break(1u);
LABEL_122:
          __break(1u);
LABEL_123:
          __break(1u);
LABEL_124:
          __break(1u);
LABEL_125:
          __break(1u);
LABEL_126:
          __break(1u);
LABEL_127:
          __break(1u);
LABEL_128:
          __break(1u);
LABEL_129:
          __break(1u);
LABEL_130:
          __break(1u);
LABEL_131:
          __break(1u);
LABEL_132:
          __break(1u);
LABEL_133:
          __break(1u);
LABEL_134:
          __break(1u);
LABEL_135:
          __break(1u);
          goto LABEL_136;
        }
        if (!v10)
          goto LABEL_138;
        v84 = v11;
        v85 = &v42[16 * v83];
        v86 = *(_QWORD *)v85;
        v87 = &v42[16 * v44];
        v88 = *((_QWORD *)v87 + 1);
        sub_1CA12225C((id *)(v10 + 16 * *(_QWORD *)v85), (id *)(v10 + 16 * *(_QWORD *)v87), v10 + 16 * v88, v111);
        if (v2)
          goto LABEL_110;
        if (v88 < v86)
          goto LABEL_113;
        if (v44 > *((_QWORD *)v84 + 2))
          goto LABEL_114;
        *(_QWORD *)v85 = v86;
        *(_QWORD *)&v42[16 * v83 + 8] = v88;
        v89 = *((_QWORD *)v84 + 2);
        if (v44 >= v89)
          goto LABEL_115;
        v11 = v84;
        v12 = v89 - 1;
        memmove(&v42[16 * v44], v87 + 16, 16 * (v89 - 1 - v44));
        *((_QWORD *)v11 + 2) = v89 - 1;
        v10 = v114;
        if (v89 <= 2)
          goto LABEL_14;
      }
    }
    v12 = 1;
LABEL_14:
    v4 = v108;
    v9 = v113;
    v8 = v105;
    if (v113 >= v108)
      goto LABEL_99;
  }
  if (__OFADD__(v13, v102))
    goto LABEL_135;
  if (v13 + v102 >= v4)
    v30 = v4;
  else
    v30 = v13 + v102;
  if (v30 >= v13)
  {
    if (v14 != v30)
    {
      v101 = v11;
      v104 = v2;
      v31 = v98 + 16 * v14;
      v106 = v30;
      do
      {
        v32 = *(_OWORD *)(v10 + 16 * v14);
        v33 = v13;
        v110 = v31;
        while (1)
        {
          v34 = v14;
          v35 = *(void **)v31;
          v36 = (id)v32;
          swift_bridgeObjectRetain();
          v37 = v35;
          swift_bridgeObjectRetain();
          v38 = objc_msgSend(v36, sel_hash);
          v39 = objc_msgSend(v37, sel_hash);
          swift_bridgeObjectRelease();

          swift_bridgeObjectRelease();
          if ((uint64_t)v38 >= (uint64_t)v39)
            break;
          v10 = v114;
          if (!v114)
            goto LABEL_137;
          v14 = v34;
          v32 = *(_OWORD *)(v31 + 16);
          *(_OWORD *)(v31 + 16) = *(_OWORD *)v31;
          *(_OWORD *)v31 = v32;
          v31 -= 16;
          if (v34 == ++v33)
            goto LABEL_43;
        }
        v10 = v114;
        v14 = v34;
LABEL_43:
        ++v14;
        v31 = v110 + 16;
        v13 = v107;
      }
      while (v14 != v106);
      v14 = v106;
      v2 = v104;
      v11 = v101;
    }
    goto LABEL_50;
  }
LABEL_136:
  __break(1u);
LABEL_137:
  __break(1u);
LABEL_138:
  __break(1u);
LABEL_139:
  __break(1u);
LABEL_140:
  __break(1u);
LABEL_141:
  sub_1CA1F11BC();
  __break(1u);
}

void sub_1CA122124(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v4;
  uint64_t v5;
  __int128 v6;
  uint64_t v7;
  void *v8;
  id v9;
  id v10;
  id v11;
  id v12;
  uint64_t v15;
  uint64_t v16;

  if (a3 != a2)
  {
    v4 = a3;
    v16 = *a4;
    v5 = *a4 + 16 * a3 - 16;
LABEL_5:
    v6 = *(_OWORD *)(v16 + 16 * v4);
    v7 = a1;
    v15 = v5;
    while (1)
    {
      v8 = *(void **)v5;
      v9 = (id)v6;
      swift_bridgeObjectRetain();
      v10 = v8;
      swift_bridgeObjectRetain();
      v11 = objc_msgSend(v9, sel_hash);
      v12 = objc_msgSend(v10, sel_hash);
      swift_bridgeObjectRelease();

      swift_bridgeObjectRelease();
      if ((uint64_t)v11 >= (uint64_t)v12)
      {
LABEL_4:
        ++v4;
        v5 = v15 + 16;
        if (v4 == a2)
          return;
        goto LABEL_5;
      }
      if (!v16)
        break;
      v6 = *(_OWORD *)(v5 + 16);
      *(_OWORD *)(v5 + 16) = *(_OWORD *)v5;
      *(_OWORD *)v5 = v6;
      v5 -= 16;
      if (v4 == ++v7)
        goto LABEL_4;
    }
    __break(1u);
  }
}

uint64_t sub_1CA12225C(id *a1, id *__src, unint64_t a3, char *a4)
{
  id *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void **v11;
  void **v12;
  void *v13;
  id v14;
  id v15;
  id v16;
  id v17;
  id *v18;
  char *v19;
  id *v20;
  id *v21;
  void *v22;
  void *v23;
  id v24;
  id v25;
  id v26;
  id v27;
  uint64_t result;
  id *v31;
  char *v32;
  id *v33;
  char *v35;
  void **v36;
  id *v37;

  v4 = __src;
  v5 = (char *)__src - (char *)a1;
  v6 = (char *)__src - (char *)a1 + 15;
  if ((char *)__src - (char *)a1 >= 0)
    v6 = (char *)__src - (char *)a1;
  v7 = v6 >> 4;
  v8 = a3 - (_QWORD)__src;
  v9 = a3 - (_QWORD)__src + 15;
  if ((uint64_t)(a3 - (_QWORD)__src) >= 0)
    v9 = a3 - (_QWORD)__src;
  v10 = v9 >> 4;
  v37 = a1;
  v36 = (void **)a4;
  if (v7 >= v9 >> 4)
  {
    if (v8 >= -15)
    {
      if (a4 != (char *)__src || &__src[2 * v10] <= (id *)a4)
        memmove(a4, __src, 16 * v10);
      v19 = &a4[16 * v10];
      v35 = v19;
      v37 = v4;
      if (a1 < v4 && v8 >= 16)
      {
        v20 = (id *)(a3 - 16);
        v21 = v4;
        do
        {
          v31 = (id *)v19;
          v33 = v20 + 2;
          v22 = (void *)*((_QWORD *)v19 - 2);
          v19 -= 16;
          v23 = *(v21 - 2);
          v21 -= 2;
          v24 = v22;
          swift_bridgeObjectRetain();
          v25 = v23;
          swift_bridgeObjectRetain();
          v26 = objc_msgSend(v24, sel_hash);
          v27 = objc_msgSend(v25, sel_hash);
          swift_bridgeObjectRelease();

          swift_bridgeObjectRelease();
          if ((uint64_t)v26 >= (uint64_t)v27)
          {
            v35 = v19;
            v21 = v4;
            if (v33 < v31 || v20 >= v31 || v33 != v31)
              *(_OWORD *)v20 = *(_OWORD *)v19;
          }
          else
          {
            v19 = (char *)v31;
            if (v33 != v4 || v20 >= v4)
              *(_OWORD *)v20 = *(_OWORD *)v21;
            v37 = v21;
          }
          if (v21 <= a1)
            break;
          v20 -= 2;
          v4 = v21;
        }
        while (v19 > a4);
      }
      goto LABEL_42;
    }
  }
  else if (v5 >= -15)
  {
    if (a4 != (char *)a1 || &a1[2 * v7] <= (id *)a4)
      memmove(a4, a1, 16 * v7);
    v32 = &a4[16 * v7];
    v35 = v32;
    if ((unint64_t)v4 < a3 && v5 >= 16)
    {
      v11 = (void **)a4;
      v12 = a1;
      do
      {
        v13 = *v11;
        v14 = *v4;
        swift_bridgeObjectRetain();
        v15 = v13;
        swift_bridgeObjectRetain();
        v16 = objc_msgSend(v14, sel_hash);
        v17 = objc_msgSend(v15, sel_hash);
        swift_bridgeObjectRelease();

        swift_bridgeObjectRelease();
        if ((uint64_t)v16 >= (uint64_t)v17)
        {
          if (v12 != v11)
            *(_OWORD *)v12 = *(_OWORD *)v11;
          v11 += 2;
          v36 = v11;
          v18 = v4;
        }
        else
        {
          v18 = v4 + 2;
          if (v12 < v4 || v12 >= v18 || v12 != v4)
            *(_OWORD *)v12 = *(_OWORD *)v4;
        }
        v12 += 2;
        if (v11 >= (void **)v32)
          break;
        v4 = v18;
      }
      while ((unint64_t)v18 < a3);
      v37 = v12;
    }
LABEL_42:
    sub_1CA13B3D0((void **)&v37, (const void **)&v36, &v35);
    return 1;
  }
  result = sub_1CA1F1270();
  __break(1u);
  return result;
}

uint64_t sub_1CA1225B4(unint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t result;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  char v24;
  unint64_t v25;
  BOOL v26;
  uint64_t v27;
  _QWORD *v28;
  uint64_t v30;

  v4 = a4;
  if (!a3)
  {
    v8 = MEMORY[0x1E0DEE9E8];
LABEL_36:
    swift_release();
    return v8;
  }
  v5 = a3;
  if (*(_QWORD *)(a4 + 16) == a3)
    return v4;
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EF93A1D0);
  result = sub_1CA1F1048();
  v8 = result;
  v30 = a2;
  if (a2 < 1)
    v9 = 0;
  else
    v9 = *a1;
  v10 = 0;
  v11 = result + 56;
  while (1)
  {
    if (v9)
    {
      v12 = __clz(__rbit64(v9));
      v9 &= v9 - 1;
      v13 = v12 | (v10 << 6);
      goto LABEL_24;
    }
    v14 = v10 + 1;
    if (__OFADD__(v10, 1))
      goto LABEL_39;
    if (v14 >= v30)
      goto LABEL_36;
    v15 = a1[v14];
    ++v10;
    if (!v15)
    {
      v10 = v14 + 1;
      if (v14 + 1 >= v30)
        goto LABEL_36;
      v15 = a1[v10];
      if (!v15)
      {
        v10 = v14 + 2;
        if (v14 + 2 >= v30)
          goto LABEL_36;
        v15 = a1[v10];
        if (!v15)
          break;
      }
    }
LABEL_23:
    v9 = (v15 - 1) & v15;
    v13 = __clz(__rbit64(v15)) + (v10 << 6);
LABEL_24:
    v17 = (uint64_t *)(*(_QWORD *)(v4 + 48) + 16 * v13);
    v18 = *v17;
    v19 = v17[1];
    sub_1CA1F13F0();
    swift_bridgeObjectRetain();
    sub_1CA1F0A30();
    result = sub_1CA1F1438();
    v20 = -1 << *(_BYTE *)(v8 + 32);
    v21 = result & ~v20;
    v22 = v21 >> 6;
    if (((-1 << v21) & ~*(_QWORD *)(v11 + 8 * (v21 >> 6))) != 0)
    {
      v23 = __clz(__rbit64((-1 << v21) & ~*(_QWORD *)(v11 + 8 * (v21 >> 6)))) | v21 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v24 = 0;
      v25 = (unint64_t)(63 - v20) >> 6;
      do
      {
        if (++v22 == v25 && (v24 & 1) != 0)
        {
          __break(1u);
          goto LABEL_38;
        }
        v26 = v22 == v25;
        if (v22 == v25)
          v22 = 0;
        v24 |= v26;
        v27 = *(_QWORD *)(v11 + 8 * v22);
      }
      while (v27 == -1);
      v23 = __clz(__rbit64(~v27)) + (v22 << 6);
    }
    *(_QWORD *)(v11 + ((v23 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v23;
    v28 = (_QWORD *)(*(_QWORD *)(v8 + 48) + 16 * v23);
    *v28 = v18;
    v28[1] = v19;
    ++*(_QWORD *)(v8 + 16);
    if (__OFSUB__(v5--, 1))
    {
LABEL_38:
      __break(1u);
LABEL_39:
      __break(1u);
      goto LABEL_40;
    }
    if (!v5)
      goto LABEL_36;
  }
  v16 = v14 + 3;
  if (v16 >= v30)
    goto LABEL_36;
  v15 = a1[v16];
  if (v15)
  {
    v10 = v16;
    goto LABEL_23;
  }
  while (1)
  {
    v10 = v16 + 1;
    if (__OFADD__(v16, 1))
      break;
    if (v10 >= v30)
      goto LABEL_36;
    v15 = a1[v10];
    ++v16;
    if (v15)
      goto LABEL_23;
  }
LABEL_40:
  __break(1u);
  return result;
}

uint64_t sub_1CA122848(unint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t result;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  id v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  char v23;
  unint64_t v24;
  BOOL v25;
  uint64_t v26;
  unint64_t *v28;

  v4 = a4;
  if (!a3)
  {
    v9 = MEMORY[0x1E0DEE9E8];
LABEL_36:
    swift_release();
    return v9;
  }
  v5 = a3;
  if (*(_QWORD *)(a4 + 16) == a3)
    return v4;
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EF937670);
  result = sub_1CA1F1048();
  v9 = result;
  v28 = a1;
  if (a2 < 1)
    v10 = 0;
  else
    v10 = *a1;
  v11 = 0;
  v12 = result + 56;
  while (1)
  {
    if (v10)
    {
      v13 = __clz(__rbit64(v10));
      v10 &= v10 - 1;
      v14 = v13 | (v11 << 6);
      goto LABEL_24;
    }
    v15 = v11 + 1;
    if (__OFADD__(v11, 1))
      goto LABEL_39;
    if (v15 >= a2)
      goto LABEL_36;
    v16 = v28[v15];
    ++v11;
    if (!v16)
    {
      v11 = v15 + 1;
      if (v15 + 1 >= a2)
        goto LABEL_36;
      v16 = v28[v11];
      if (!v16)
      {
        v11 = v15 + 2;
        if (v15 + 2 >= a2)
          goto LABEL_36;
        v16 = v28[v11];
        if (!v16)
          break;
      }
    }
LABEL_23:
    v10 = (v16 - 1) & v16;
    v14 = __clz(__rbit64(v16)) + (v11 << 6);
LABEL_24:
    v18 = *(id *)(*(_QWORD *)(v4 + 48) + 8 * v14);
    result = sub_1CA1F0E5C();
    v19 = -1 << *(_BYTE *)(v9 + 32);
    v20 = result & ~v19;
    v21 = v20 >> 6;
    if (((-1 << v20) & ~*(_QWORD *)(v12 + 8 * (v20 >> 6))) != 0)
    {
      v22 = __clz(__rbit64((-1 << v20) & ~*(_QWORD *)(v12 + 8 * (v20 >> 6)))) | v20 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v23 = 0;
      v24 = (unint64_t)(63 - v19) >> 6;
      do
      {
        if (++v21 == v24 && (v23 & 1) != 0)
        {
          __break(1u);
          goto LABEL_38;
        }
        v25 = v21 == v24;
        if (v21 == v24)
          v21 = 0;
        v23 |= v25;
        v26 = *(_QWORD *)(v12 + 8 * v21);
      }
      while (v26 == -1);
      v22 = __clz(__rbit64(~v26)) + (v21 << 6);
    }
    *(_QWORD *)(v12 + ((v22 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v22;
    *(_QWORD *)(*(_QWORD *)(v9 + 48) + 8 * v22) = v18;
    ++*(_QWORD *)(v9 + 16);
    if (__OFSUB__(v5--, 1))
    {
LABEL_38:
      __break(1u);
LABEL_39:
      __break(1u);
      goto LABEL_40;
    }
    if (!v5)
      goto LABEL_36;
  }
  v17 = v15 + 3;
  if (v17 >= a2)
    goto LABEL_36;
  v16 = v28[v17];
  if (v16)
  {
    v11 = v17;
    goto LABEL_23;
  }
  while (1)
  {
    v11 = v17 + 1;
    if (__OFADD__(v17, 1))
      break;
    if (v11 >= a2)
      goto LABEL_36;
    v16 = v28[v11];
    ++v17;
    if (v16)
      goto LABEL_23;
  }
LABEL_40:
  __break(1u);
  return result;
}

uint64_t sub_1CA122AA4(uint64_t *a1, char a2, uint64_t *a3, unint64_t a4, void *a5)
{
  uint64_t v7;
  _QWORD *v8;
  id v10;

  v7 = *a1;
  if (*a1)
  {
    v8 = (_QWORD *)*a3;
    if ((a2 & 1) != 0)
    {
      *(_QWORD *)(v8[7] + 8 * a4) = v7;
    }
    else
    {
      sub_1CA0EEF18(a4, (uint64_t)a5, v7, v8);
      v10 = a5;
    }
  }
  else if ((a2 & 1) != 0)
  {
    sub_1CA0B6A1C();
    swift_arrayDestroy();
    sub_1CA0F1D10(a4, *a3);
  }
  return swift_bridgeObjectRetain();
}

uint64_t sub_1CA122B3C(unint64_t a1, _QWORD *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t result;
  uint64_t v7;
  id v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  char v12;
  uint64_t v13;
  unint64_t v14;
  double v15;
  id v16;
  unint64_t v17;
  char v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;

  v3 = a1;
  if (a1 >> 62)
    goto LABEL_23;
  v4 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
  while (1)
  {
    v5 = MEMORY[0x1E0DEE9D8];
    if (!v4)
      return v5;
    v23 = MEMORY[0x1E0DEE9D8];
    result = sub_1CA0CD56C(0, v4 & ~(v4 >> 63), 0);
    if (v4 < 0)
      break;
    v7 = 0;
    v5 = v23;
    v21 = v3;
    v22 = v3 & 0xC000000000000001;
    a2 = (_QWORD *)a2[3];
    while (v4 != v7)
    {
      if (v22)
        v8 = (id)MEMORY[0x1CAA4A7A4](v7, v3);
      else
        v8 = *(id *)(v3 + 8 * v7 + 32);
      v9 = v8;
      v10 = swift_bridgeObjectRetain();
      sub_1CA0C1F1C(v10);
      v12 = sub_1CA0BDC28(v9, v11);
      swift_bridgeObjectRelease();
      if ((v12 & 1) == 0)
      {
        v13 = swift_bridgeObjectRetain();
        v14 = sub_1CA115C1C(v13);
        swift_bridgeObjectRelease();
        v3 = sub_1CA0C68DC(v14);
        swift_bridgeObjectRelease();
        LOBYTE(v14) = sub_1CA0BDC28(v9, v3);
        swift_bridgeObjectRelease();
        if ((v14 & 1) == 0)
          goto LABEL_22;
      }
      v15 = 1.0;
      if (a2 && a2[2])
      {
        v16 = v9;
        v17 = sub_1CA0AA594((uint64_t)v16);
        if ((v18 & 1) != 0)
          v15 = *(double *)(a2[7] + 8 * v17);

      }
      v20 = *(_QWORD *)(v23 + 16);
      v19 = *(_QWORD *)(v23 + 24);
      if (v20 >= v19 >> 1)
        sub_1CA0CD56C(v19 > 1, v20 + 1, 1);
      ++v7;
      *(_QWORD *)(v23 + 16) = v20 + 1;
      *(double *)(v23 + 8 * v20 + 32) = v15;
      v3 = v21;
      if (v4 == v7)
        return v5;
    }
    __break(1u);
LABEL_22:
    __break(1u);
LABEL_23:
    swift_bridgeObjectRetain();
    v4 = sub_1CA1F1234();
    swift_bridgeObjectRelease();
  }
  __break(1u);
  return result;
}

uint64_t sub_1CA122D50()
{
  uint64_t v0;
  unint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  id v12;
  char isUniquelyReferenced_nonNull_native;
  char v14;
  unint64_t v15;
  uint64_t v16;
  _BOOL8 v17;
  uint64_t v18;
  char v19;
  unint64_t v20;
  char v21;
  uint64_t v22;
  uint64_t v23;
  BOOL v24;
  uint64_t v25;
  id v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  int64_t v31;
  int64_t v32;
  unint64_t v33;
  unint64_t v34;
  int64_t v35;
  unint64_t v36;
  int64_t v37;
  uint64_t v38;
  unint64_t v39;
  id v40;
  unint64_t v41;
  char v42;
  uint64_t v43;
  unint64_t v44;
  uint64_t v45;
  unint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  unint64_t v50;
  uint64_t v51;
  unint64_t v52;
  id v53;
  int64_t v54;
  unint64_t v55;
  unint64_t v56;
  id v57;
  unint64_t v58;
  char v59;
  uint64_t v60;
  uint64_t v61;
  unint64_t v62;
  _QWORD *v63;
  _QWORD *v64;
  uint64_t result;
  uint64_t v66;
  BOOL v67;
  uint64_t v68;
  int64_t v69;
  uint64_t v70;
  _QWORD *v71;
  unint64_t v72;
  int64_t v73;
  unint64_t v74;
  _QWORD *v75;
  unint64_t v76;
  unint64_t v77;
  void *v78;
  unint64_t v79;
  _QWORD *v80;
  unint64_t v81;
  uint64_t v82;
  unint64_t v83;
  unint64_t v84;

  v79 = MEMORY[0x1E0DEE9D8];
  v1 = *(_QWORD *)(v0 + 16);
  v2 = swift_bridgeObjectRetain();
  sub_1CA0C1F1C(v2);
  sub_1CA0B2380(v3);
  v4 = swift_bridgeObjectRetain();
  v5 = sub_1CA115C1C(v4);
  v72 = v1;
  swift_bridgeObjectRelease();
  v6 = sub_1CA0C68DC(v5);
  swift_bridgeObjectRelease();
  sub_1CA0B2380(v6);
  v7 = v79;
  v8 = v79 >> 62;
  if (v79 >> 62)
  {
LABEL_96:
    swift_bridgeObjectRetain_n();
    v9 = sub_1CA1F1234();
    swift_bridgeObjectRelease();
    if (v9)
      goto LABEL_3;
  }
  else
  {
    v9 = *(_QWORD *)((v79 & 0xFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain();
    if (v9)
    {
LABEL_3:
      v76 = v8;
      v10 = 0;
      v11 = (_QWORD *)MEMORY[0x1E0DEE9E0];
      while (1)
      {
        v8 = v10 + 1;
        if (__OFADD__(v10, 1))
        {
          __break(1u);
LABEL_91:
          __break(1u);
LABEL_92:
          __break(1u);
LABEL_93:
          __break(1u);
LABEL_94:
          __break(1u);
LABEL_95:
          __break(1u);
          goto LABEL_96;
        }
        v12 = *(id *)(v7 + 8 * v10 + 32);
        isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
        v80 = v11;
        v15 = sub_1CA0AA594((uint64_t)v12);
        v16 = v11[2];
        v17 = (v14 & 1) == 0;
        v18 = v16 + v17;
        if (__OFADD__(v16, v17))
          goto LABEL_91;
        v19 = v14;
        if (v11[3] >= v18)
        {
          if ((isUniquelyReferenced_nonNull_native & 1) != 0)
          {
            if ((v14 & 1) == 0)
              goto LABEL_14;
          }
          else
          {
            sub_1CA0EFAF8();
            if ((v19 & 1) == 0)
              goto LABEL_14;
          }
        }
        else
        {
          sub_1CA0EBE7C(v18, isUniquelyReferenced_nonNull_native);
          v20 = sub_1CA0AA594((uint64_t)v12);
          if ((v19 & 1) != (v21 & 1))
            goto LABEL_104;
          v15 = v20;
          if ((v19 & 1) == 0)
          {
LABEL_14:
            v11[(v15 >> 6) + 8] |= 1 << v15;
            v22 = 8 * v15;
            *(_QWORD *)(v11[6] + v22) = v12;
            *(_QWORD *)(v11[7] + v22) = v10;
            v23 = v11[2];
            v24 = __OFADD__(v23, 1);
            v25 = v23 + 1;
            if (v24)
              goto LABEL_93;
            v11[2] = v25;
            v26 = v12;
            goto LABEL_5;
          }
        }
        *(_QWORD *)(v11[7] + 8 * v15) = v10;
LABEL_5:

        swift_bridgeObjectRelease();
        ++v10;
        if (v8 == v9)
        {
          swift_bridgeObjectRelease();
          if (v76)
            goto LABEL_98;
LABEL_19:
          v27 = *(_QWORD *)((v7 & 0xFFFFFFFFFFFFF8) + 0x10);
          v28 = v27;
          goto LABEL_20;
        }
      }
    }
  }
  swift_bridgeObjectRelease();
  v11 = (_QWORD *)MEMORY[0x1E0DEE9E0];
  if (!v8)
    goto LABEL_19;
LABEL_98:
  swift_bridgeObjectRetain();
  v28 = sub_1CA1F1234();
  v27 = sub_1CA1F1234();
  swift_bridgeObjectRelease();
LABEL_20:
  v7 = v72;
  if ((unsigned __int128)(v28 * (__int128)v27) >> 64 != (v28 * v27) >> 63)
  {
    __break(1u);
    goto LABEL_100;
  }
  v71 = (_QWORD *)sub_1CA0B4464(v28 * v27, 0.0);
  v77 = v72 + 64;
  v29 = 1 << *(_BYTE *)(v72 + 32);
  if (v29 < 64)
    v30 = ~(-1 << v29);
  else
    v30 = -1;
  v8 = v30 & *(_QWORD *)(v72 + 64);
  v31 = (unint64_t)(v29 + 63) >> 6;
  swift_bridgeObjectRetain();
  v32 = 0;
  v69 = v31;
  while (1)
  {
    do
    {
LABEL_25:
      while (v8)
      {
        v33 = __clz(__rbit64(v8));
        v8 &= v8 - 1;
        v34 = v33 | (v32 << 6);
        if (v11[2])
          goto LABEL_42;
      }
      v35 = v32 + 1;
      if (__OFADD__(v32, 1))
        goto LABEL_92;
      if (v35 >= v31)
      {
LABEL_89:
        swift_release();
        type metadata accessor for MASquareMatrixRepresentation();
        v64 = (_QWORD *)swift_allocObject();
        v64[2] = v28;
        v64[3] = v27;
        v64[4] = v71;
        v64[5] = v79;
        swift_bridgeObjectRelease();
        return (uint64_t)v64;
      }
      v36 = *(_QWORD *)(v77 + 8 * v35);
      ++v32;
      if (!v36)
      {
        v32 = v35 + 1;
        if (v35 + 1 >= v31)
          goto LABEL_89;
        v36 = *(_QWORD *)(v77 + 8 * v32);
        if (!v36)
        {
          v32 = v35 + 2;
          if (v35 + 2 >= v31)
            goto LABEL_89;
          v36 = *(_QWORD *)(v77 + 8 * v32);
          if (!v36)
          {
            v37 = v35 + 3;
            if (v37 >= v31)
              goto LABEL_89;
            v36 = *(_QWORD *)(v77 + 8 * v37);
            if (!v36)
            {
              while (1)
              {
                v32 = v37 + 1;
                if (__OFADD__(v37, 1))
                  goto LABEL_94;
                if (v32 >= v31)
                  goto LABEL_89;
                v36 = *(_QWORD *)(v77 + 8 * v32);
                ++v37;
                if (v36)
                  goto LABEL_41;
              }
            }
            v32 = v37;
          }
        }
      }
LABEL_41:
      v8 = (v36 - 1) & v36;
      v34 = __clz(__rbit64(v36)) + (v32 << 6);
    }
    while (!v11[2]);
LABEL_42:
    v38 = 8 * v34;
    v39 = *(_QWORD *)(*(_QWORD *)(v7 + 56) + v38);
    v40 = *(id *)(*(_QWORD *)(v7 + 48) + v38);
    swift_bridgeObjectRetain();
    v41 = sub_1CA0AA594((uint64_t)v40);
    if ((v42 & 1) != 0)
      break;
    swift_bridgeObjectRelease();

  }
  v70 = v27;
  v68 = v28;
  v43 = *(_QWORD *)(v11[7] + 8 * v41);
  if ((v39 & 0xC000000000000001) != 0)
  {
    swift_bridgeObjectRetain();
    sub_1CA1F0F64();
    sub_1CA0B6A1C();
    sub_1CA0C0614();
    sub_1CA1F0CC4();
    v44 = (unint64_t)v80;
    v74 = v81;
    v45 = v82;
    v7 = v83;
    v46 = v84;
  }
  else
  {
    v47 = -1 << *(_BYTE *)(v39 + 32);
    v45 = ~v47;
    v74 = v39 + 56;
    v48 = -v47;
    if (v48 < 64)
      v49 = ~(-1 << v48);
    else
      v49 = -1;
    v46 = v49 & *(_QWORD *)(v39 + 56);
    swift_bridgeObjectRetain();
    v7 = 0;
    v44 = v39;
  }
  v73 = (unint64_t)(v45 + 64) >> 6;
  v66 = v43 * v70;
  v67 = (unsigned __int128)(v43 * (__int128)v70) >> 64 != (v43 * v70) >> 63;
  v75 = (_QWORD *)v44;
  while (2)
  {
    v50 = v7;
    while (2)
    {
      if ((v44 & 0x8000000000000000) != 0)
      {
        if (!sub_1CA1F0FD0())
          goto LABEL_88;
        sub_1CA0B6A1C();
        swift_unknownObjectRetain();
        swift_dynamicCast();
        v53 = v78;
        swift_unknownObjectRelease();
        v7 = v50;
        v51 = v46;
        if (!v78)
          goto LABEL_88;
      }
      else
      {
        if (v46)
        {
          v51 = (v46 - 1) & v46;
          v52 = __clz(__rbit64(v46)) | (v50 << 6);
          v7 = v50;
        }
        else
        {
          v54 = v50 + 1;
          if (__OFADD__(v50, 1))
            goto LABEL_95;
          if (v54 >= v73)
            goto LABEL_88;
          v55 = *(_QWORD *)(v74 + 8 * v54);
          v7 = v50 + 1;
          if (!v55)
          {
            v7 = v50 + 2;
            if ((uint64_t)(v50 + 2) >= v73)
              goto LABEL_88;
            v55 = *(_QWORD *)(v74 + 8 * v7);
            if (!v55)
            {
              v7 = v50 + 3;
              if ((uint64_t)(v50 + 3) >= v73)
                goto LABEL_88;
              v55 = *(_QWORD *)(v74 + 8 * v7);
              if (!v55)
              {
                v7 = v50 + 4;
                if ((uint64_t)(v50 + 4) >= v73)
                  goto LABEL_88;
                v55 = *(_QWORD *)(v74 + 8 * v7);
                if (!v55)
                {
                  v56 = v50 + 5;
                  while (v73 != v56)
                  {
                    v55 = *(_QWORD *)(v74 + 8 * v56++);
                    if (v55)
                    {
                      v7 = v56 - 1;
                      v44 = (unint64_t)v75;
                      goto LABEL_72;
                    }
                  }
LABEL_88:
                  sub_1CA0B6A14();
                  swift_bridgeObjectRelease();

                  v7 = v72;
                  v28 = v68;
                  v31 = v69;
                  v27 = v70;
                  goto LABEL_25;
                }
              }
            }
          }
LABEL_72:
          v51 = (v55 - 1) & v55;
          v52 = __clz(__rbit64(v55)) + (v7 << 6);
        }
        v53 = *(id *)(*(_QWORD *)(v44 + 48) + 8 * v52);
        if (!v53)
          goto LABEL_88;
      }
      if (!v11[2])
      {
LABEL_52:

        v50 = v7;
        v46 = v51;
        v44 = (unint64_t)v75;
        continue;
      }
      break;
    }
    v46 = v51;
    v57 = v53;
    v58 = sub_1CA0AA594((uint64_t)v57);
    if ((v59 & 1) == 0)
    {

      goto LABEL_52;
    }
    v60 = *(_QWORD *)(v11[7] + 8 * v58);

    if ((v39 & 0xC000000000000001) != 0)
      v61 = sub_1CA1F0FA0();
    else
      v61 = *(_QWORD *)(v39 + 16);
    if (!v67)
    {
      v24 = __OFADD__(v66, v60);
      v62 = v66 + v60;
      if (v24)
        goto LABEL_101;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) != 0)
      {
        v63 = v71;
        if ((v62 & 0x8000000000000000) != 0)
          goto LABEL_102;
      }
      else
      {
        v63 = sub_1CA0B6058(v71);
        if ((v62 & 0x8000000000000000) != 0)
          goto LABEL_102;
      }
      if (v62 >= v63[2])
        goto LABEL_103;
      v71 = v63;
      *(double *)&v63[v62 + 4] = 1.0 / (double)v61;

      v44 = (unint64_t)v75;
      continue;
    }
    break;
  }
LABEL_100:
  __break(1u);
LABEL_101:
  __break(1u);
LABEL_102:
  __break(1u);
LABEL_103:
  __break(1u);
LABEL_104:
  sub_1CA0B6A1C();
  result = sub_1CA1F1360();
  __break(1u);
  return result;
}

uint64_t sub_1CA12352C(unint64_t a1)
{
  uint64_t v1;
  unint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  BOOL v7;
  uint64_t v8;
  uint64_t v9;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  int64_t v14;
  uint64_t v15;
  void *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  int64_t v23;
  uint64_t v24;
  unint64_t v25;
  id v26;
  char v27;
  unint64_t v28;
  uint64_t v29;
  _BOOL8 v30;
  uint64_t v31;
  char v32;
  unint64_t v33;
  char v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  char v39;
  uint64_t result;
  uint64_t v41;
  unint64_t v42;
  uint64_t v43;
  unint64_t v44;
  _QWORD *v45;
  uint64_t v46;
  uint64_t v47;
  int64_t v48;
  _QWORD *v49;

  v2 = a1;
  *(_OWORD *)(v1 + 144) = 0u;
  *(_OWORD *)(v1 + 160) = 0u;
  *(_OWORD *)(v1 + 112) = 0u;
  *(_OWORD *)(v1 + 128) = 0u;
  *(_OWORD *)(v1 + 80) = 0u;
  *(_OWORD *)(v1 + 96) = 0u;
  *(_OWORD *)(v1 + 48) = 0u;
  *(_OWORD *)(v1 + 64) = 0u;
  *(_OWORD *)(v1 + 32) = 0u;
  *(_BYTE *)(v1 + 176) = 1;
  *(_OWORD *)(v1 + 184) = 0u;
  *(_OWORD *)(v1 + 200) = 0u;
  *(_OWORD *)(v1 + 216) = 0u;
  if (a1 >> 62)
    goto LABEL_54;
  v3 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
  if (!v3)
  {
LABEL_55:
    v5 = (_QWORD *)MEMORY[0x1E0DEE9E0];
    v45 = (_QWORD *)MEMORY[0x1E0DEE9E0];
LABEL_56:
    result = v41;
    *(_QWORD *)(v41 + 16) = v5;
    *(_QWORD *)(v41 + 24) = v45;
    return result;
  }
LABEL_3:
  v4 = 0;
  v44 = v2 & 0xC000000000000001;
  v5 = (_QWORD *)MEMORY[0x1E0DEE9E0];
  v42 = v2;
  v45 = (_QWORD *)MEMORY[0x1E0DEE9E0];
  v43 = v3;
  while (1)
  {
    if (v44)
    {
      v6 = MEMORY[0x1CAA4A7A4](v4, v42);
      v7 = __OFADD__(v4, 1);
      v8 = v4 + 1;
      if (v7)
        goto LABEL_53;
    }
    else
    {
      v6 = swift_retain();
      v7 = __OFADD__(v4, 1);
      v8 = v4 + 1;
      if (v7)
        goto LABEL_53;
    }
    v46 = v6;
    v47 = v8;
    v9 = *(_QWORD *)(v6 + 16);
    swift_bridgeObjectRetain();
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    v49 = v5;
    v11 = v9 + 64;
    v12 = 1 << *(_BYTE *)(v9 + 32);
    v13 = v12 < 64 ? ~(-1 << v12) : -1;
    v2 = v13 & *(_QWORD *)(v9 + 64);
    v48 = (unint64_t)(v12 + 63) >> 6;
    swift_bridgeObjectRetain();
    v14 = 0;
    if (v2)
      break;
LABEL_17:
    v7 = __OFADD__(v14++, 1);
    if (v7)
      goto LABEL_51;
    if (v14 < v48)
    {
      v22 = *(_QWORD *)(v11 + 8 * v14);
      if (v22)
        goto LABEL_29;
      v23 = v14 + 1;
      if (v14 + 1 < v48)
      {
        v22 = *(_QWORD *)(v11 + 8 * v23);
        if (v22)
          goto LABEL_28;
        v23 = v14 + 2;
        if (v14 + 2 < v48)
        {
          v22 = *(_QWORD *)(v11 + 8 * v23);
          if (v22)
            goto LABEL_28;
          v23 = v14 + 3;
          if (v14 + 3 < v48)
          {
            v22 = *(_QWORD *)(v11 + 8 * v23);
            if (v22)
              goto LABEL_28;
            v23 = v14 + 4;
            if (v14 + 4 < v48)
            {
              v22 = *(_QWORD *)(v11 + 8 * v23);
              if (v22)
              {
LABEL_28:
                v14 = v23;
LABEL_29:
                v2 = (v22 - 1) & v22;
                v21 = __clz(__rbit64(v22)) + (v14 << 6);
                goto LABEL_30;
              }
              while (1)
              {
                v14 = v23 + 1;
                if (__OFADD__(v23, 1))
                  break;
                if (v14 >= v48)
                  goto LABEL_46;
                v22 = *(_QWORD *)(v11 + 8 * v14);
                ++v23;
                if (v22)
                  goto LABEL_29;
              }
LABEL_52:
              __break(1u);
LABEL_53:
              __break(1u);
LABEL_54:
              swift_bridgeObjectRetain();
              v3 = sub_1CA1F1234();
              swift_bridgeObjectRelease();
              if (!v3)
                goto LABEL_55;
              goto LABEL_3;
            }
          }
        }
      }
    }
LABEL_46:
    v4 = v47;
    swift_bridgeObjectRelease();
    swift_release();
    swift_bridgeObjectRelease();
    v38 = *(_QWORD *)(v46 + 24);
    if (v38)
    {
      swift_bridgeObjectRetain();
      v39 = swift_isUniquelyReferenced_nonNull_native();
      v49 = v45;
      v2 = 0;
      sub_1CA14F074(v38, (uint64_t)sub_1CA115B90, 0, v39, &v49);
      v45 = v49;
      swift_release();
      swift_bridgeObjectRelease();
      if (v47 == v43)
        goto LABEL_56;
    }
    else
    {
      swift_release();
      if (v47 == v43)
        goto LABEL_56;
    }
  }
  while (2)
  {
    while (2)
    {
      v20 = __clz(__rbit64(v2));
      v2 &= v2 - 1;
      v21 = v20 | (v14 << 6);
LABEL_30:
      v24 = 8 * v21;
      v25 = *(_QWORD *)(*(_QWORD *)(v9 + 56) + v24);
      v26 = *(id *)(*(_QWORD *)(v9 + 48) + v24);
      swift_bridgeObjectRetain();
      v28 = sub_1CA0AA594((uint64_t)v26);
      v29 = v5[2];
      v30 = (v27 & 1) == 0;
      v31 = v29 + v30;
      if (__OFADD__(v29, v30))
      {
        __break(1u);
LABEL_50:
        __break(1u);
LABEL_51:
        __break(1u);
        goto LABEL_52;
      }
      v32 = v27;
      if (v5[3] >= v31)
      {
        if ((isUniquelyReferenced_nonNull_native & 1) != 0)
        {
          v5 = v49;
          if ((v27 & 1) != 0)
            goto LABEL_15;
        }
        else
        {
          sub_1CA0EF944();
          v5 = v49;
          if ((v32 & 1) != 0)
          {
LABEL_15:
            v15 = 8 * v28;
            v16 = *(void **)(v5[7] + v15);
            swift_bridgeObjectRetain();
            sub_1CA0D3C08(v25, v16);
            v18 = v17;

            v19 = v5[7];
            swift_bridgeObjectRelease();
            *(_QWORD *)(v19 + v15) = v18;
            isUniquelyReferenced_nonNull_native = 1;
            if (!v2)
              goto LABEL_17;
            continue;
          }
        }
        goto LABEL_37;
      }
      break;
    }
    sub_1CA0EBB68(v31, isUniquelyReferenced_nonNull_native & 1);
    v33 = sub_1CA0AA594((uint64_t)v26);
    if ((v32 & 1) == (v34 & 1))
    {
      v28 = v33;
      v5 = v49;
      if ((v32 & 1) != 0)
        goto LABEL_15;
LABEL_37:
      v5[(v28 >> 6) + 8] |= 1 << v28;
      v35 = 8 * v28;
      *(_QWORD *)(v5[6] + v35) = v26;
      *(_QWORD *)(v5[7] + v35) = v25;
      v36 = v5[2];
      v7 = __OFADD__(v36, 1);
      v37 = v36 + 1;
      if (v7)
        goto LABEL_50;
      v5[2] = v37;
      isUniquelyReferenced_nonNull_native = 1;
      if (!v2)
        goto LABEL_17;
      continue;
    }
    break;
  }
  sub_1CA0B6A1C();
  sub_1CA1F1360();
  __break(1u);
  result = swift_bridgeObjectRelease();
  __break(1u);
  return result;
}

uint64_t type metadata accessor for MADistribution()
{
  return objc_opt_self();
}

void sub_1CA1239AC(unint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  int64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  int64_t v12;
  void *v13;
  id v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  unint64_t v20;
  BOOL v21;
  unint64_t v22;
  int64_t v23;
  void *v24;
  unint64_t v25;
  uint64_t v26;
  id v27;
  char v28;
  unint64_t v29;
  id v30;
  char v31;
  id v32;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  int64_t v38;
  unint64_t v39;
  unint64_t v41;
  uint64_t v42;
  unint64_t v43;

  v4 = a4;
  v35 = 0;
  v5 = 0;
  v8 = *(_QWORD *)(a3 + 64);
  v6 = a3 + 64;
  v7 = v8;
  v9 = 1 << *(_BYTE *)(v6 - 32);
  if (v9 < 64)
    v10 = ~(-1 << v9);
  else
    v10 = -1;
  v11 = v10 & v7;
  v38 = (unint64_t)(v9 + 63) >> 6;
  v39 = a4 & 0xC000000000000001;
  v37 = v6;
  v42 = a4 + 56;
  while (1)
  {
    if (v11)
    {
      v18 = __clz(__rbit64(v11));
      v19 = (v11 - 1) & v11;
      v20 = v18 | (v5 << 6);
      goto LABEL_20;
    }
    v21 = __OFADD__(v5++, 1);
    if (v21)
    {
      __break(1u);
      goto LABEL_43;
    }
    if (v5 >= v38)
      goto LABEL_41;
    v22 = *(_QWORD *)(v37 + 8 * v5);
    if (!v22)
      break;
LABEL_19:
    v19 = (v22 - 1) & v22;
    v20 = __clz(__rbit64(v22)) + (v5 << 6);
LABEL_20:
    v24 = *(void **)(*(_QWORD *)(a3 + 48) + 8 * v20);
    v41 = v20;
    v43 = v19;
    if (v39)
    {
      v12 = v5;
      v13 = *(void **)(*(_QWORD *)(a3 + 48) + 8 * v20);
      v14 = v24;
      if ((sub_1CA1F0FDC() & 1) != 0)
        goto LABEL_37;
    }
    else if (*(_QWORD *)(v4 + 16))
    {
      v24;
      v25 = sub_1CA1F0E5C() & ~(-1 << *(_BYTE *)(v4 + 32));
      if (((*(_QWORD *)(v42 + ((v25 >> 3) & 0xFFFFFFFFFFFFF8)) >> v25) & 1) != 0)
      {
        v36 = -1 << *(_BYTE *)(v4 + 32);
        v13 = v24;
        v12 = v5;
        sub_1CA0B6A1C();
        v26 = v4;
        v27 = *(id *)(*(_QWORD *)(v4 + 48) + 8 * v25);
        v28 = sub_1CA1F0E68();

        if ((v28 & 1) != 0)
          goto LABEL_36;
        v29 = (v25 + 1) & ~v36;
        if (((*(_QWORD *)(v42 + ((v29 >> 3) & 0xFFFFFFFFFFFFF8)) >> v29) & 1) != 0)
        {
          v4 = v26;
          while (1)
          {
            v30 = *(id *)(*(_QWORD *)(v4 + 48) + 8 * v29);
            v31 = sub_1CA1F0E68();

            if ((v31 & 1) != 0)
              break;
            v29 = (v29 + 1) & ~v36;
            v4 = v26;
            if (((*(_QWORD *)(v42 + ((v29 >> 3) & 0xFFFFFFFFFFFFF8)) >> v29) & 1) == 0)
              goto LABEL_6;
          }
LABEL_36:
          v4 = v26;
LABEL_37:

          v5 = v12;
          v11 = v43;
          goto LABEL_38;
        }
        v4 = v26;
      }
      else
      {
        v13 = v24;
        v12 = v5;
      }
    }
    else
    {
      v12 = v5;
      v13 = *(void **)(*(_QWORD *)(a3 + 48) + 8 * v20);
      v32 = v24;
    }
LABEL_6:
    v15 = swift_bridgeObjectRetain();
    v16 = sub_1CA115C1C(v15);
    swift_bridgeObjectRelease();
    v17 = sub_1CA0C68DC(v16);
    swift_bridgeObjectRelease();
    LOBYTE(v16) = sub_1CA0BDC28(v13, v17);

    swift_bridgeObjectRelease();
    v5 = v12;
    v11 = v43;
    if ((v16 & 1) != 0)
    {
LABEL_38:
      *(unint64_t *)((char *)a1 + ((v41 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v41;
      v21 = __OFADD__(v35++, 1);
      if (v21)
      {
        __break(1u);
LABEL_41:
        sub_1CA0CF42C(a1, a2, v35, a3);
        return;
      }
    }
  }
  v23 = v5 + 1;
  if (v5 + 1 >= v38)
    goto LABEL_41;
  v22 = *(_QWORD *)(v37 + 8 * v23);
  if (v22)
    goto LABEL_18;
  v23 = v5 + 2;
  if (v5 + 2 >= v38)
    goto LABEL_41;
  v22 = *(_QWORD *)(v37 + 8 * v23);
  if (v22)
    goto LABEL_18;
  v23 = v5 + 3;
  if (v5 + 3 >= v38)
    goto LABEL_41;
  v22 = *(_QWORD *)(v37 + 8 * v23);
  if (v22)
  {
LABEL_18:
    v5 = v23;
    goto LABEL_19;
  }
  while (1)
  {
    v5 = v23 + 1;
    if (__OFADD__(v23, 1))
      break;
    if (v5 >= v38)
      goto LABEL_41;
    v22 = *(_QWORD *)(v37 + 8 * v5);
    ++v23;
    if (v22)
      goto LABEL_19;
  }
LABEL_43:
  __break(1u);
}

uint64_t sub_1CA123D50(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  char v5;
  unsigned int v6;
  unint64_t v7;
  size_t v8;
  uint64_t isStackAllocationSafe;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void *v13;
  uint64_t v14;
  _QWORD v16[2];

  v16[1] = *MEMORY[0x1E0C80C00];
  v5 = *(_BYTE *)(a1 + 32);
  v6 = v5 & 0x3F;
  v7 = (unint64_t)((1 << v5) + 63) >> 6;
  v8 = 8 * v7;
  swift_bridgeObjectRetain_n();
  isStackAllocationSafe = swift_retain_n();
  if (v6 <= 0xD || (isStackAllocationSafe = swift_stdlib_isStackAllocationSafe(), (isStackAllocationSafe & 1) != 0))
  {
    MEMORY[0x1E0C80A78](isStackAllocationSafe, v10);
    bzero((char *)v16 - ((v8 + 15) & 0x3FFFFFFFFFFFFFF0), v8);
    swift_bridgeObjectRetain();
    swift_retain();
    sub_1CA1239AC((_QWORD *)((char *)v16 - ((v8 + 15) & 0x3FFFFFFFFFFFFFF0)), v7, a1, a2);
    v12 = v11;
    swift_bridgeObjectRelease();
    swift_release();
    if (v2)
      swift_willThrow();
    swift_release();
    swift_bridgeObjectRelease();
  }
  else
  {
    v13 = (void *)swift_slowAlloc();
    bzero(v13, v8);
    swift_bridgeObjectRetain();
    swift_retain();
    sub_1CA1239AC((unint64_t *)v13, v7, a1, a2);
    v12 = v14;
    swift_bridgeObjectRelease();
    swift_release();
    MEMORY[0x1CAA4BBE4](v13, -1, -1);
    swift_release();
    swift_bridgeObjectRelease();
  }
  swift_release();
  swift_bridgeObjectRelease();
  return v12;
}

uint64_t sub_1CA123F6C(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  int64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  int64_t v10;
  unint64_t v11;
  id v12;
  char v13;
  unint64_t v14;
  unint64_t v15;
  int64_t v16;
  unint64_t v17;
  int64_t v18;
  void *v19;
  id v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  id v24;
  char v25;
  uint64_t v26;
  id v27;
  char v28;
  unint64_t *v30;
  uint64_t v31;
  unint64_t v32;
  int64_t v33;
  int64_t v35;
  uint64_t v36;
  uint64_t v37;

  v4 = a3;
  v30 = (unint64_t *)result;
  v5 = 0;
  v6 = 0;
  v36 = a3 + 64;
  v7 = 1 << *(_BYTE *)(a3 + 32);
  if (v7 < 64)
    v8 = ~(-1 << v7);
  else
    v8 = -1;
  v9 = v8 & *(_QWORD *)(a3 + 64);
  v10 = (unint64_t)(v7 + 63) >> 6;
  v11 = a4 & 0xC000000000000001;
  v37 = a4 + 56;
  v33 = v10;
  v32 = a4 & 0xC000000000000001;
LABEL_5:
  v31 = v5;
  while (v9)
  {
    v14 = __clz(__rbit64(v9));
    v9 &= v9 - 1;
    v15 = v14 | (v6 << 6);
LABEL_23:
    v19 = *(void **)(*(_QWORD *)(v4 + 48) + 8 * v15);
    if (v11)
    {
      v12 = v19;
      swift_bridgeObjectRetain();
      v13 = sub_1CA1F0FDC();

      result = swift_bridgeObjectRelease();
      if ((v13 & 1) != 0)
        goto LABEL_33;
    }
    else if (*(_QWORD *)(a4 + 16))
    {
      v35 = v6;
      v20 = v19;
      swift_bridgeObjectRetain();
      v21 = sub_1CA1F0E5C();
      v22 = -1 << *(_BYTE *)(a4 + 32);
      v23 = v21 & ~v22;
      if (((*(_QWORD *)(v37 + ((v23 >> 3) & 0xFFFFFFFFFFFFF8)) >> v23) & 1) != 0)
      {
        sub_1CA0B6A1C();
        v24 = *(id *)(*(_QWORD *)(a4 + 48) + 8 * v23);
        v25 = sub_1CA1F0E68();

        if ((v25 & 1) != 0)
        {
LABEL_32:

          result = swift_bridgeObjectRelease();
          v10 = v33;
          v4 = a3;
          v11 = v32;
          v6 = v35;
LABEL_33:
          *(unint64_t *)((char *)v30 + ((v15 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v15;
          v5 = v31 + 1;
          if (!__OFADD__(v31, 1))
            goto LABEL_5;
          __break(1u);
          return sub_1CA0CF198(v30, a2, v31, v4);
        }
        v26 = ~v22;
        while (1)
        {
          v23 = (v23 + 1) & v26;
          if (((*(_QWORD *)(v37 + ((v23 >> 3) & 0xFFFFFFFFFFFFF8)) >> v23) & 1) == 0)
            break;
          v27 = *(id *)(*(_QWORD *)(a4 + 48) + 8 * v23);
          v28 = sub_1CA1F0E68();

          if ((v28 & 1) != 0)
            goto LABEL_32;
        }
      }

      result = swift_bridgeObjectRelease();
      v10 = v33;
      v4 = a3;
      v11 = v32;
      v6 = v35;
    }
  }
  v16 = v6 + 1;
  if (__OFADD__(v6, 1))
  {
    __break(1u);
    goto LABEL_38;
  }
  if (v16 >= v10)
    return sub_1CA0CF198(v30, a2, v31, v4);
  v17 = *(_QWORD *)(v36 + 8 * v16);
  ++v6;
  if (v17)
    goto LABEL_22;
  v6 = v16 + 1;
  if (v16 + 1 >= v10)
    return sub_1CA0CF198(v30, a2, v31, v4);
  v17 = *(_QWORD *)(v36 + 8 * v6);
  if (v17)
    goto LABEL_22;
  v6 = v16 + 2;
  if (v16 + 2 >= v10)
    return sub_1CA0CF198(v30, a2, v31, v4);
  v17 = *(_QWORD *)(v36 + 8 * v6);
  if (v17)
  {
LABEL_22:
    v9 = (v17 - 1) & v17;
    v15 = __clz(__rbit64(v17)) + (v6 << 6);
    goto LABEL_23;
  }
  v18 = v16 + 3;
  if (v18 >= v10)
    return sub_1CA0CF198(v30, a2, v31, v4);
  v17 = *(_QWORD *)(v36 + 8 * v18);
  if (v17)
  {
    v6 = v18;
    goto LABEL_22;
  }
  while (1)
  {
    v6 = v18 + 1;
    if (__OFADD__(v18, 1))
      break;
    if (v6 >= v10)
      return sub_1CA0CF198(v30, a2, v31, v4);
    v17 = *(_QWORD *)(v36 + 8 * v6);
    ++v18;
    if (v17)
      goto LABEL_22;
  }
LABEL_38:
  __break(1u);
  return result;
}

uint64_t sub_1CA124288(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  char v5;
  unsigned int v6;
  unint64_t v7;
  size_t v8;
  uint64_t isStackAllocationSafe;
  uint64_t v10;
  uint64_t v11;
  void *v12;
  _QWORD v14[2];

  v14[1] = *MEMORY[0x1E0C80C00];
  v5 = *(_BYTE *)(a1 + 32);
  v6 = v5 & 0x3F;
  v7 = (unint64_t)((1 << v5) + 63) >> 6;
  v8 = 8 * v7;
  isStackAllocationSafe = swift_bridgeObjectRetain_n();
  if (v6 <= 0xD || (isStackAllocationSafe = swift_stdlib_isStackAllocationSafe(), (isStackAllocationSafe & 1) != 0))
  {
    MEMORY[0x1E0C80A78](isStackAllocationSafe, v10);
    bzero((char *)v14 - ((v8 + 15) & 0x3FFFFFFFFFFFFFF0), v8);
    swift_bridgeObjectRetain();
    v11 = sub_1CA123F6C((uint64_t)v14 - ((v8 + 15) & 0x3FFFFFFFFFFFFFF0), v7, a1, a2);
    swift_bridgeObjectRelease();
    if (v2)
      swift_willThrow();
    swift_bridgeObjectRelease_n();
  }
  else
  {
    v12 = (void *)swift_slowAlloc();
    bzero(v12, v8);
    swift_bridgeObjectRetain();
    v11 = sub_1CA123F6C((uint64_t)v12, v7, a1, a2);
    swift_bridgeObjectRelease();
    MEMORY[0x1CAA4BBE4](v12, -1, -1);
    swift_bridgeObjectRelease_n();
  }
  return v11;
}

void sub_1CA12443C(unint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  int64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  int64_t v11;
  unint64_t v12;
  id v13;
  char v14;
  unint64_t v15;
  unint64_t v16;
  int64_t v17;
  unint64_t v18;
  int64_t v19;
  void *v20;
  id v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  id v25;
  char v26;
  uint64_t v27;
  id v28;
  char v29;
  uint64_t v32;
  unint64_t v33;
  int64_t v34;
  uint64_t v35;
  uint64_t v37;

  v4 = a3;
  v5 = 0;
  v6 = 0;
  v7 = a3 + 56;
  v8 = 1 << *(_BYTE *)(a3 + 32);
  if (v8 < 64)
    v9 = ~(-1 << v8);
  else
    v9 = -1;
  v10 = v9 & *(_QWORD *)(a3 + 56);
  v11 = (unint64_t)(v8 + 63) >> 6;
  v12 = a4 & 0xC000000000000001;
  v37 = a4 + 56;
  v35 = a3 + 56;
  v33 = a4 & 0xC000000000000001;
  v34 = v11;
LABEL_5:
  v32 = v5;
  while (v10)
  {
    v15 = __clz(__rbit64(v10));
    v10 &= v10 - 1;
    v16 = v15 | (v6 << 6);
LABEL_23:
    v20 = *(void **)(*(_QWORD *)(v4 + 48) + 8 * v16);
    if (v12)
    {
      v13 = v20;
      v14 = sub_1CA1F0FDC();

      if ((v14 & 1) != 0)
        goto LABEL_33;
    }
    else if (*(_QWORD *)(a4 + 16))
    {
      v21 = v20;
      v22 = sub_1CA1F0E5C();
      v23 = -1 << *(_BYTE *)(a4 + 32);
      v24 = v22 & ~v23;
      if (((*(_QWORD *)(v37 + ((v24 >> 3) & 0xFFFFFFFFFFFFF8)) >> v24) & 1) != 0)
      {
        sub_1CA0B6A1C();
        v25 = *(id *)(*(_QWORD *)(a4 + 48) + 8 * v24);
        v26 = sub_1CA1F0E68();

        if ((v26 & 1) != 0)
        {
LABEL_32:

          v7 = v35;
          v4 = a3;
          v12 = v33;
          v11 = v34;
LABEL_33:
          *(unint64_t *)((char *)a1 + ((v16 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v16;
          v5 = v32 + 1;
          if (!__OFADD__(v32, 1))
            goto LABEL_5;
          __break(1u);
LABEL_36:
          swift_retain();
          sub_1CA122848(a1, a2, v32, v4);
          return;
        }
        v27 = ~v23;
        while (1)
        {
          v24 = (v24 + 1) & v27;
          if (((*(_QWORD *)(v37 + ((v24 >> 3) & 0xFFFFFFFFFFFFF8)) >> v24) & 1) == 0)
            break;
          v28 = *(id *)(*(_QWORD *)(a4 + 48) + 8 * v24);
          v29 = sub_1CA1F0E68();

          if ((v29 & 1) != 0)
            goto LABEL_32;
        }
      }

      v7 = v35;
      v4 = a3;
      v12 = v33;
      v11 = v34;
    }
  }
  v17 = v6 + 1;
  if (__OFADD__(v6, 1))
  {
    __break(1u);
    goto LABEL_38;
  }
  if (v17 >= v11)
    goto LABEL_36;
  v18 = *(_QWORD *)(v7 + 8 * v17);
  ++v6;
  if (v18)
    goto LABEL_22;
  v6 = v17 + 1;
  if (v17 + 1 >= v11)
    goto LABEL_36;
  v18 = *(_QWORD *)(v7 + 8 * v6);
  if (v18)
    goto LABEL_22;
  v6 = v17 + 2;
  if (v17 + 2 >= v11)
    goto LABEL_36;
  v18 = *(_QWORD *)(v7 + 8 * v6);
  if (v18)
  {
LABEL_22:
    v10 = (v18 - 1) & v18;
    v16 = __clz(__rbit64(v18)) + (v6 << 6);
    goto LABEL_23;
  }
  v19 = v17 + 3;
  if (v19 >= v11)
    goto LABEL_36;
  v18 = *(_QWORD *)(v7 + 8 * v19);
  if (v18)
  {
    v6 = v19;
    goto LABEL_22;
  }
  while (1)
  {
    v6 = v19 + 1;
    if (__OFADD__(v19, 1))
      break;
    if (v6 >= v11)
      goto LABEL_36;
    v18 = *(_QWORD *)(v7 + 8 * v6);
    ++v19;
    if (v18)
      goto LABEL_22;
  }
LABEL_38:
  __break(1u);
}

uint64_t sub_1CA124708(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  char v5;
  unsigned int v6;
  unint64_t v7;
  size_t v8;
  uint64_t isStackAllocationSafe;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void *v13;
  uint64_t v14;
  _QWORD v16[2];

  v16[1] = *MEMORY[0x1E0C80C00];
  v5 = *(_BYTE *)(a1 + 32);
  v6 = v5 & 0x3F;
  v7 = (unint64_t)((1 << v5) + 63) >> 6;
  v8 = 8 * v7;
  isStackAllocationSafe = swift_bridgeObjectRetain_n();
  if (v6 <= 0xD || (isStackAllocationSafe = swift_stdlib_isStackAllocationSafe(), (isStackAllocationSafe & 1) != 0))
  {
    MEMORY[0x1E0C80A78](isStackAllocationSafe, v10);
    bzero((char *)v16 - ((v8 + 15) & 0x3FFFFFFFFFFFFFF0), v8);
    swift_bridgeObjectRetain();
    sub_1CA12443C((_QWORD *)((char *)v16 - ((v8 + 15) & 0x3FFFFFFFFFFFFFF0)), v7, a1, a2);
    v12 = v11;
    swift_release();
    swift_bridgeObjectRelease();
    if (v2)
      swift_willThrow();
    swift_bridgeObjectRelease_n();
  }
  else
  {
    v13 = (void *)swift_slowAlloc();
    bzero(v13, v8);
    swift_bridgeObjectRetain();
    sub_1CA12443C((unint64_t *)v13, v7, a1, a2);
    v12 = v14;
    swift_release();
    swift_bridgeObjectRelease();
    MEMORY[0x1CAA4BBE4](v13, -1, -1);
    swift_bridgeObjectRelease_n();
  }
  return v12;
}

uint64_t sub_1CA1248CC(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  id v5;
  char v6;
  uint64_t v7;
  uint64_t result;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  id v17;
  char v18;
  uint64_t v19;
  id v20;
  char v21;
  char v22;
  unint64_t v23;
  BOOL v24;
  uint64_t v25;
  void *v26;
  uint64_t v27;

  if ((a1 & 0xC000000000000001) == 0)
    return sub_1CA124708(a1, a2);
  v3 = MEMORY[0x1E0DEE9E8];
  v27 = MEMORY[0x1E0DEE9E8];
  swift_bridgeObjectRetain();
  sub_1CA1F0F64();
  if (!sub_1CA1F0FD0())
    goto LABEL_29;
  sub_1CA0B6A1C();
  v4 = a2 + 56;
  do
  {
    swift_dynamicCast();
    if ((a2 & 0xC000000000000001) != 0)
    {
      v5 = v26;
      v6 = sub_1CA1F0FDC();

      if ((v6 & 1) == 0)
        goto LABEL_4;
    }
    else
    {
      if (!*(_QWORD *)(a2 + 16))
        goto LABEL_4;
      v14 = sub_1CA1F0E5C();
      v15 = -1 << *(_BYTE *)(a2 + 32);
      v16 = v14 & ~v15;
      if (((*(_QWORD *)(v4 + ((v16 >> 3) & 0xFFFFFFFFFFFFF8)) >> v16) & 1) == 0)
        goto LABEL_4;
      v17 = *(id *)(*(_QWORD *)(a2 + 48) + 8 * v16);
      v18 = sub_1CA1F0E68();

      if ((v18 & 1) == 0)
      {
        v19 = ~v15;
        while (1)
        {
          v16 = (v16 + 1) & v19;
          if (((*(_QWORD *)(v4 + ((v16 >> 3) & 0xFFFFFFFFFFFFF8)) >> v16) & 1) == 0)
            break;
          v20 = *(id *)(*(_QWORD *)(a2 + 48) + 8 * v16);
          v21 = sub_1CA1F0E68();

          if ((v21 & 1) != 0)
            goto LABEL_8;
        }
LABEL_4:

        continue;
      }
    }
LABEL_8:
    v7 = v27;
    if (*(_QWORD *)(v27 + 24) <= *(_QWORD *)(v27 + 16))
    {
      sub_1CA13DBD0();
      v7 = v27;
    }
    result = sub_1CA1F0E5C();
    v9 = v7 + 56;
    v10 = -1 << *(_BYTE *)(v7 + 32);
    v11 = result & ~v10;
    v12 = v11 >> 6;
    if (((-1 << v11) & ~*(_QWORD *)(v7 + 56 + 8 * (v11 >> 6))) != 0)
    {
      v13 = __clz(__rbit64((-1 << v11) & ~*(_QWORD *)(v7 + 56 + 8 * (v11 >> 6)))) | v11 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v22 = 0;
      v23 = (unint64_t)(63 - v10) >> 6;
      do
      {
        if (++v12 == v23 && (v22 & 1) != 0)
        {
          __break(1u);
          return result;
        }
        v24 = v12 == v23;
        if (v12 == v23)
          v12 = 0;
        v22 |= v24;
        v25 = *(_QWORD *)(v9 + 8 * v12);
      }
      while (v25 == -1);
      v13 = __clz(__rbit64(~v25)) + (v12 << 6);
    }
    *(_QWORD *)(v9 + ((v13 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v13;
    *(_QWORD *)(*(_QWORD *)(v7 + 48) + 8 * v13) = v26;
    ++*(_QWORD *)(v7 + 16);
  }
  while (sub_1CA1F0FD0());
  v3 = v27;
LABEL_29:
  swift_bridgeObjectRelease();
  swift_release();
  return v3;
}

void sub_1CA124BC8(unint64_t a1)
{
  unint64_t v1;
  unint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  BOOL v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  id v17;
  char v18;
  uint64_t v19;
  id v20;
  char v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  id v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  id v32;
  char v33;
  uint64_t v34;
  id v35;
  char v36;
  uint64_t v37;
  uint64_t v38;
  unint64_t v39;
  uint64_t v40;
  uint64_t v41;

  v1 = a1;
  v2 = a1 >> 62;
  if (a1 >> 62)
  {
    swift_bridgeObjectRetain();
    v5 = sub_1CA1F1234();
    swift_bridgeObjectRelease();
    if (v5)
    {
LABEL_3:
      __swift_instantiateConcreteTypeFromMangledName(&qword_1EF937670);
      v3 = sub_1CA1F1048();
      if (!v2)
        goto LABEL_4;
LABEL_8:
      swift_bridgeObjectRetain();
      v4 = sub_1CA1F1234();
      swift_bridgeObjectRelease();
      if (!v4)
        return;
      goto LABEL_9;
    }
  }
  else if (*(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10))
  {
    goto LABEL_3;
  }
  v3 = MEMORY[0x1E0DEE9E8];
  if (v2)
    goto LABEL_8;
LABEL_4:
  v4 = *(_QWORD *)((v1 & 0xFFFFFFFFFFFFF8) + 0x10);
  if (!v4)
    return;
LABEL_9:
  v6 = v3 + 56;
  v41 = v4;
  if ((v1 & 0xC000000000000001) != 0)
  {
    v7 = 0;
    v39 = v1;
    while (1)
    {
      v8 = MEMORY[0x1CAA4A7A4](v7, v1);
      v9 = __OFADD__(v7++, 1);
      if (v9)
      {
        __break(1u);
        goto LABEL_37;
      }
      v10 = v8;
      v11 = sub_1CA1F0E5C();
      v12 = -1 << *(_BYTE *)(v3 + 32);
      v13 = v11 & ~v12;
      v14 = v13 >> 6;
      v15 = *(_QWORD *)(v6 + 8 * (v13 >> 6));
      v16 = 1 << v13;
      if (((1 << v13) & v15) != 0)
      {
        sub_1CA0B6A1C();
        v17 = *(id *)(*(_QWORD *)(v3 + 48) + 8 * v13);
        v18 = sub_1CA1F0E68();

        if ((v18 & 1) != 0)
        {
LABEL_11:
          swift_unknownObjectRelease();
          v1 = v39;
          goto LABEL_12;
        }
        v19 = ~v12;
        while (1)
        {
          v13 = (v13 + 1) & v19;
          v14 = v13 >> 6;
          v15 = *(_QWORD *)(v6 + 8 * (v13 >> 6));
          v16 = 1 << v13;
          if ((v15 & (1 << v13)) == 0)
            break;
          v20 = *(id *)(*(_QWORD *)(v3 + 48) + 8 * v13);
          v21 = sub_1CA1F0E68();

          if ((v21 & 1) != 0)
            goto LABEL_11;
        }
        v1 = v39;
      }
      *(_QWORD *)(v6 + 8 * v14) = v16 | v15;
      *(_QWORD *)(*(_QWORD *)(v3 + 48) + 8 * v13) = v10;
      v22 = *(_QWORD *)(v3 + 16);
      v9 = __OFADD__(v22, 1);
      v23 = v22 + 1;
      if (v9)
        goto LABEL_38;
      *(_QWORD *)(v3 + 16) = v23;
LABEL_12:
      if (v7 == v41)
        return;
    }
  }
  v24 = 0;
  v40 = *(_QWORD *)((v1 & 0xFFFFFFFFFFFFF8) + 0x10);
  while (v24 != v40)
  {
    v25 = *(id *)(v1 + 32 + 8 * v24);
    v26 = sub_1CA1F0E5C();
    v27 = -1 << *(_BYTE *)(v3 + 32);
    v28 = v26 & ~v27;
    v29 = v28 >> 6;
    v30 = *(_QWORD *)(v6 + 8 * (v28 >> 6));
    v31 = 1 << v28;
    if (((1 << v28) & v30) != 0)
    {
      sub_1CA0B6A1C();
      v32 = *(id *)(*(_QWORD *)(v3 + 48) + 8 * v28);
      v33 = sub_1CA1F0E68();

      if ((v33 & 1) != 0)
        goto LABEL_24;
      v34 = ~v27;
      v28 = (v28 + 1) & v34;
      v29 = v28 >> 6;
      v30 = *(_QWORD *)(v6 + 8 * (v28 >> 6));
      v31 = 1 << v28;
      if ((v30 & (1 << v28)) != 0)
      {
        while (1)
        {
          v35 = *(id *)(*(_QWORD *)(v3 + 48) + 8 * v28);
          v36 = sub_1CA1F0E68();

          if ((v36 & 1) != 0)
            break;
          v28 = (v28 + 1) & v34;
          v29 = v28 >> 6;
          v30 = *(_QWORD *)(v6 + 8 * (v28 >> 6));
          v31 = 1 << v28;
          if ((v30 & (1 << v28)) == 0)
            goto LABEL_32;
        }
LABEL_24:

        v4 = v41;
        goto LABEL_25;
      }
LABEL_32:
      v4 = v41;
    }
    *(_QWORD *)(v6 + 8 * v29) = v31 | v30;
    *(_QWORD *)(*(_QWORD *)(v3 + 48) + 8 * v28) = v25;
    v37 = *(_QWORD *)(v3 + 16);
    v9 = __OFADD__(v37, 1);
    v38 = v37 + 1;
    if (v9)
      goto LABEL_39;
    *(_QWORD *)(v3 + 16) = v38;
LABEL_25:
    if (++v24 == v4)
      return;
  }
LABEL_37:
  __break(1u);
LABEL_38:
  __break(1u);
LABEL_39:
  __break(1u);
}

_QWORD *sub_1CA124F20@<X0>(_QWORD *a1@<X8>)
{
  _QWORD *result;

  result = sub_1CA116060();
  *a1 = result;
  return result;
}

uint64_t sub_1CA124F48(_QWORD *a1, uint64_t a2)
{
  *(_QWORD *)(*(_QWORD *)a2 + 32) = *a1;
  swift_retain();
  return swift_release();
}

_QWORD *sub_1CA124F78@<X0>(_QWORD *a1@<X8>)
{
  _QWORD *result;

  result = sub_1CA1161E0();
  *a1 = result;
  return result;
}

uint64_t sub_1CA124FA0(_QWORD *a1, uint64_t a2)
{
  *(_QWORD *)(*(_QWORD *)a2 + 40) = *a1;
  swift_retain();
  return swift_release();
}

_QWORD *sub_1CA124FD0@<X0>(_QWORD *a1@<X8>)
{
  _QWORD *result;

  result = sub_1CA116304();
  *a1 = result;
  return result;
}

uint64_t sub_1CA124FF8(_QWORD *a1, uint64_t a2)
{
  *(_QWORD *)(*(_QWORD *)a2 + 48) = *a1;
  swift_retain();
  return swift_release();
}

uint64_t sub_1CA125028@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;

  result = sub_1CA118E2C();
  *a1 = result;
  return result;
}

uint64_t sub_1CA125050(_QWORD *a1, uint64_t a2)
{
  *(_QWORD *)(*(_QWORD *)a2 + 56) = *a1;
  swift_retain();
  return swift_release();
}

uint64_t sub_1CA125080@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;

  result = sub_1CA119878();
  *a1 = result;
  return result;
}

uint64_t sub_1CA1250A8(_QWORD *a1, uint64_t a2)
{
  *(_QWORD *)(*(_QWORD *)a2 + 64) = *a1;
  swift_retain();
  return swift_release();
}

id sub_1CA1250D8@<X0>(_QWORD *a1@<X8>)
{
  id result;

  result = sub_1CA11A388();
  *a1 = result;
  return result;
}

void sub_1CA125100(void **a1, uint64_t a2)
{
  void *v2;
  id v3;
  id v4;

  v2 = *a1;
  v4 = *(id *)(*(_QWORD *)a2 + 72);
  *(_QWORD *)(*(_QWORD *)a2 + 72) = *a1;
  v3 = v2;

}

uint64_t sub_1CA125134@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;

  result = sub_1CA11AAEC();
  *a1 = result;
  return result;
}

uint64_t sub_1CA12515C(_QWORD *a1, uint64_t a2)
{
  *(_QWORD *)(*(_QWORD *)a2 + 80) = *a1;
  swift_bridgeObjectRetain();
  return swift_bridgeObjectRelease();
}

uint64_t sub_1CA12518C@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;

  result = sub_1CA11AB84();
  *a1 = result;
  return result;
}

uint64_t sub_1CA1251B4(_QWORD *a1, uint64_t a2)
{
  *(_QWORD *)(*(_QWORD *)a2 + 88) = *a1;
  swift_bridgeObjectRetain();
  return swift_bridgeObjectRelease();
}

uint64_t sub_1CA1251E4@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;

  result = sub_1CA11ADA4();
  *a1 = result;
  return result;
}

uint64_t sub_1CA12520C(_QWORD *a1, uint64_t a2)
{
  *(_QWORD *)(*(_QWORD *)a2 + 96) = *a1;
  swift_retain();
  return swift_release();
}

_QWORD *sub_1CA12523C@<X0>(_QWORD *a1@<X8>)
{
  _QWORD *result;

  result = sub_1CA11C1C4();
  *a1 = result;
  return result;
}

uint64_t sub_1CA125264(_QWORD *a1, uint64_t a2)
{
  *(_QWORD *)(*(_QWORD *)a2 + 104) = *a1;
  swift_retain();
  return swift_release();
}

uint64_t sub_1CA125294@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;

  result = sub_1CA11C480();
  *a1 = result;
  return result;
}

uint64_t sub_1CA1252BC(_QWORD *a1, uint64_t a2)
{
  *(_QWORD *)(*(_QWORD *)a2 + 112) = *a1;
  swift_retain();
  return swift_release();
}

_QWORD *sub_1CA1252EC@<X0>(_QWORD *a1@<X8>)
{
  _QWORD *result;

  result = sub_1CA11C5A0();
  *a1 = result;
  return result;
}

uint64_t sub_1CA125314(_QWORD *a1, uint64_t a2)
{
  *(_QWORD *)(*(_QWORD *)a2 + 120) = *a1;
  swift_retain();
  return swift_release();
}

uint64_t sub_1CA125344@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;

  result = sub_1CA11C798();
  *a1 = result;
  return result;
}

uint64_t sub_1CA12536C(_QWORD *a1, uint64_t a2)
{
  *(_QWORD *)(*(_QWORD *)a2 + 128) = *a1;
  swift_retain();
  return swift_release();
}

_QWORD *sub_1CA12539C@<X0>(_QWORD *a1@<X8>)
{
  _QWORD *result;

  result = sub_1CA11C8B8();
  *a1 = result;
  return result;
}

uint64_t sub_1CA1253C4(_QWORD *a1, uint64_t a2)
{
  *(_QWORD *)(*(_QWORD *)a2 + 136) = *a1;
  swift_retain();
  return swift_release();
}

uint64_t sub_1CA1253F4@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;

  result = sub_1CA11CB5C();
  *a1 = result;
  return result;
}

uint64_t sub_1CA12541C(_QWORD *a1, uint64_t a2)
{
  *(_QWORD *)(*(_QWORD *)a2 + 144) = *a1;
  swift_retain();
  return swift_release();
}

_QWORD *sub_1CA12544C@<X0>(_QWORD *a1@<X8>)
{
  _QWORD *result;

  result = sub_1CA11CC7C();
  *a1 = result;
  return result;
}

uint64_t sub_1CA125474(_QWORD *a1, uint64_t a2)
{
  *(_QWORD *)(*(_QWORD *)a2 + 152) = *a1;
  swift_retain();
  return swift_release();
}

uint64_t sub_1CA1254A4@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;

  result = sub_1CA11CF08();
  *a1 = result;
  return result;
}

uint64_t sub_1CA1254CC(_QWORD *a1, uint64_t a2)
{
  *(_QWORD *)(*(_QWORD *)a2 + 160) = *a1;
  swift_retain();
  return swift_release();
}

_QWORD *sub_1CA1254FC@<X0>(_QWORD *a1@<X8>)
{
  _QWORD *result;

  result = sub_1CA11D0EC();
  *a1 = result;
  return result;
}

uint64_t sub_1CA125524(_QWORD *a1, uint64_t a2)
{
  *(_QWORD *)(*(_QWORD *)a2 + 184) = *a1;
  swift_retain();
  return swift_release();
}

_QWORD *sub_1CA125554@<X0>(_QWORD *a1@<X8>)
{
  _QWORD *result;

  result = sub_1CA11D970();
  *a1 = result;
  return result;
}

uint64_t sub_1CA12557C(_QWORD *a1, uint64_t a2)
{
  *(_QWORD *)(*(_QWORD *)a2 + 192) = *a1;
  swift_retain();
  return swift_release();
}

_QWORD *sub_1CA1255AC@<X0>(_QWORD *a1@<X8>)
{
  _QWORD *result;

  result = sub_1CA11DF70();
  *a1 = result;
  return result;
}

uint64_t sub_1CA1255D4(_QWORD *a1, uint64_t a2)
{
  *(_QWORD *)(*(_QWORD *)a2 + 200) = *a1;
  swift_retain();
  return swift_release();
}

_QWORD *sub_1CA125604@<X0>(_QWORD *a1@<X8>)
{
  _QWORD *result;

  result = sub_1CA11E8F0();
  *a1 = result;
  return result;
}

uint64_t sub_1CA12562C(_QWORD *a1, uint64_t a2)
{
  *(_QWORD *)(*(_QWORD *)a2 + 208) = *a1;
  swift_retain();
  return swift_release();
}

_QWORD *sub_1CA12565C@<X0>(_QWORD *a1@<X8>)
{
  _QWORD *result;

  result = sub_1CA11F29C();
  *a1 = result;
  return result;
}

uint64_t sub_1CA125684(_QWORD *a1, uint64_t a2)
{
  *(_QWORD *)(*(_QWORD *)a2 + 216) = *a1;
  swift_retain();
  return swift_release();
}

_QWORD *sub_1CA1256B4@<X0>(_QWORD *a1@<X8>)
{
  _QWORD *result;

  result = sub_1CA11FC5C();
  *a1 = result;
  return result;
}

uint64_t sub_1CA1256DC(_QWORD *a1, uint64_t a2)
{
  *(_QWORD *)(*(_QWORD *)a2 + 224) = *a1;
  swift_retain();
  return swift_release();
}

uint64_t method lookup function for MADistribution()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of MADistribution.__allocating_init(projections:weights:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 288))();
}

uint64_t dispatch thunk of MADistribution.__allocating_init(distributions:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 296))();
}

uint64_t dispatch thunk of MADistribution.sources.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 304))();
}

uint64_t dispatch thunk of MADistribution.targets.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 312))();
}

uint64_t dispatch thunk of MADistribution.size.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 320))();
}

uint64_t dispatch thunk of MADistribution.count.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 328))();
}

uint64_t dispatch thunk of MADistribution.fullSize.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 336))();
}

uint64_t dispatch thunk of MADistribution.weight(node:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 344))();
}

uint64_t dispatch thunk of MADistribution.weightsVector.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 352))();
}

uint64_t dispatch thunk of MADistribution.weightsVector.setter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 360))();
}

uint64_t dispatch thunk of MADistribution.weightsVector.modify()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 368))();
}

uint64_t dispatch thunk of MADistribution.sourceWeightsVector.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 376))();
}

uint64_t dispatch thunk of MADistribution.sourceWeightsVector.setter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 384))();
}

uint64_t dispatch thunk of MADistribution.sourceWeightsVector.modify()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 392))();
}

uint64_t dispatch thunk of MADistribution.targetWeightsVector.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 400))();
}

uint64_t dispatch thunk of MADistribution.targetWeightsVector.setter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 408))();
}

uint64_t dispatch thunk of MADistribution.targetWeightsVector.modify()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 416))();
}

uint64_t dispatch thunk of MADistribution.merge(distributions:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 424))();
}

uint64_t dispatch thunk of MADistribution.subset(sources:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 432))();
}

uint64_t dispatch thunk of MADistribution.subset(targets:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 440))();
}

uint64_t dispatch thunk of MADistribution.subset(sources:targets:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 448))();
}

uint64_t dispatch thunk of MADistribution.groupTargetsBy(sourceSlices:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 456))();
}

uint64_t dispatch thunk of MADistribution.inverse()()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 464))();
}

uint64_t dispatch thunk of MADistribution.intersect(distribution:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 472))();
}

uint64_t dispatch thunk of MADistribution.projectionMatrix.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 480))();
}

uint64_t dispatch thunk of MADistribution.projectionMatrix.setter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 488))();
}

uint64_t dispatch thunk of MADistribution.projectionMatrix.modify()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 496))();
}

uint64_t dispatch thunk of MADistribution.weightedProjectionMatrix.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 504))();
}

uint64_t dispatch thunk of MADistribution.weightedProjectionMatrix.setter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 512))();
}

uint64_t dispatch thunk of MADistribution.weightedProjectionMatrix.modify()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 520))();
}

uint64_t dispatch thunk of MADistribution.projectionGraph.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 528))();
}

uint64_t dispatch thunk of MADistribution.projectionGraph.setter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 536))();
}

uint64_t dispatch thunk of MADistribution.projectionGraph.modify()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 544))();
}

uint64_t dispatch thunk of MADistribution.sourceSingletons.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 552))();
}

uint64_t dispatch thunk of MADistribution.sourceSingletons.setter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 560))();
}

uint64_t dispatch thunk of MADistribution.sourceSingletons.modify()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 568))();
}

uint64_t dispatch thunk of MADistribution.targetSingletons.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 576))();
}

uint64_t dispatch thunk of MADistribution.targetSingletons.setter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 584))();
}

uint64_t dispatch thunk of MADistribution.targetSingletons.modify()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 592))();
}

uint64_t dispatch thunk of MADistribution.adjacencyMatrix.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 600))();
}

uint64_t dispatch thunk of MADistribution.adjacencyMatrix.setter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 608))();
}

uint64_t dispatch thunk of MADistribution.adjacencyMatrix.modify()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 616))();
}

uint64_t dispatch thunk of MADistribution.adjacencyMatrix(directed:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 624))();
}

uint64_t dispatch thunk of MADistribution.adjacencyWeightedMatrix(directed:repeating:weightedEdges:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 632))();
}

uint64_t dispatch thunk of MADistribution.degreeVector(type:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 640))();
}

uint64_t dispatch thunk of MADistribution.multiDegreeVector(type:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 648))();
}

uint64_t dispatch thunk of MADistribution.transitionMatrix(directed:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 656))();
}

uint64_t dispatch thunk of MADistribution.sourceDegreeVector.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 664))();
}

uint64_t dispatch thunk of MADistribution.sourceDegreeVector.setter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 672))();
}

uint64_t dispatch thunk of MADistribution.sourceDegreeVector.modify()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 680))();
}

uint64_t dispatch thunk of MADistribution.sourceDegreeMatrix.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 688))();
}

uint64_t dispatch thunk of MADistribution.sourceDegreeMatrix.setter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 696))();
}

uint64_t dispatch thunk of MADistribution.sourceDegreeMatrix.modify()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 704))();
}

uint64_t dispatch thunk of MADistribution.targetDegreeVector.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 712))();
}

uint64_t dispatch thunk of MADistribution.targetDegreeVector.setter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 720))();
}

uint64_t dispatch thunk of MADistribution.targetDegreeVector.modify()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 728))();
}

uint64_t dispatch thunk of MADistribution.targetDegreeMatrix.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 736))();
}

uint64_t dispatch thunk of MADistribution.targetDegreeMatrix.setter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 744))();
}

uint64_t dispatch thunk of MADistribution.targetDegreeMatrix.modify()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 752))();
}

uint64_t dispatch thunk of MADistribution.weightedSourceDegreeVector.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 760))();
}

uint64_t dispatch thunk of MADistribution.weightedSourceDegreeVector.setter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 768))();
}

uint64_t dispatch thunk of MADistribution.weightedSourceDegreeVector.modify()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 776))();
}

uint64_t dispatch thunk of MADistribution.weightedsourceDegreeMatrix.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 784))();
}

uint64_t dispatch thunk of MADistribution.weightedsourceDegreeMatrix.setter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 792))();
}

uint64_t dispatch thunk of MADistribution.weightedsourceDegreeMatrix.modify()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 800))();
}

uint64_t dispatch thunk of MADistribution.weightedTargetDegreeVector.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 808))();
}

uint64_t dispatch thunk of MADistribution.weightedTargetDegreeVector.setter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 816))();
}

uint64_t dispatch thunk of MADistribution.weightedTargetDegreeVector.modify()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 824))();
}

uint64_t dispatch thunk of MADistribution.weightedTargetDegreeMatrix.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 832))();
}

uint64_t dispatch thunk of MADistribution.weightedTargetDegreeMatrix.setter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 840))();
}

uint64_t dispatch thunk of MADistribution.weightedTargetDegreeMatrix.modify()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 848))();
}

uint64_t dispatch thunk of MADistribution.sourceSimilarityMatrix.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 880))();
}

uint64_t dispatch thunk of MADistribution.sourceSimilarityMatrix.setter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 888))();
}

uint64_t dispatch thunk of MADistribution.sourceSimilarityMatrix.modify()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 896))();
}

uint64_t dispatch thunk of MADistribution.sourceSimilarityDistance(source1:source2:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 904))();
}

uint64_t dispatch thunk of MADistribution.sourceSimilarityIdentityVector.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 912))();
}

uint64_t dispatch thunk of MADistribution.sourceSimilarityIdentityVector.setter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 920))();
}

uint64_t dispatch thunk of MADistribution.sourceSimilarityIdentityVector.modify()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 928))();
}

uint64_t dispatch thunk of MADistribution.sourceSimilarityIdentityDistance(source:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 936))();
}

uint64_t dispatch thunk of MADistribution.sourceCommonalityMatrix.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 944))();
}

uint64_t dispatch thunk of MADistribution.sourceCommonalityMatrix.setter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 952))();
}

uint64_t dispatch thunk of MADistribution.sourceCommonalityMatrix.modify()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 960))();
}

uint64_t dispatch thunk of MADistribution.sourceCommonality(source1:source2:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 968))();
}

uint64_t dispatch thunk of MADistribution.targetCommonalityMatrix.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 976))();
}

uint64_t dispatch thunk of MADistribution.targetCommonalityMatrix.setter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 984))();
}

uint64_t dispatch thunk of MADistribution.targetCommonalityMatrix.modify()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 992))();
}

uint64_t dispatch thunk of MADistribution.targetCommonality(target1:target2:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 1000))();
}

uint64_t dispatch thunk of MADistribution.sourceIdentityCommonalityMatrix.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 1008))();
}

uint64_t dispatch thunk of MADistribution.sourceIdentityCommonalityMatrix.setter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 1016))();
}

uint64_t dispatch thunk of MADistribution.sourceIdentityCommonalityMatrix.modify()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 1024))();
}

uint64_t dispatch thunk of MADistribution.sourceIdentityCommonality(source1:source2:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 1032))();
}

uint64_t dispatch thunk of MADistribution.targetIdentityCommonalityMatrix.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 1040))();
}

uint64_t dispatch thunk of MADistribution.targetIdentityCommonalityMatrix.setter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 1048))();
}

uint64_t dispatch thunk of MADistribution.targetIdentityCommonalityMatrix.modify()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 1056))();
}

uint64_t dispatch thunk of MADistribution.targetIdentityCommonality(target1:target2:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 1064))();
}

uint64_t dispatch thunk of MADistribution.sourceCustomCommonalityMatrix(closure:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 1072))();
}

uint64_t dispatch thunk of MADistribution.projectionSingularDecompositionMatrix(elbowThreshold:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 1080))();
}

uint64_t sub_1CA125C70()
{
  return swift_deallocObject();
}

uint64_t MAGraph.adjacencySparseMatrix(directed:)(char a1)
{
  unint64_t v1;
  unint64_t v2;
  char *v4;
  id v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  _QWORD *v10;
  void *v11;
  id v12;
  uint64_t v13;
  _QWORD *v14;
  _QWORD *v15;
  id v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  id v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  int64_t v27;
  _QWORD *v28;
  _QWORD *v29;
  uint64_t v30;
  void *v31;
  id v32;
  id v33;
  uint64_t v34;
  int64_t v35;
  int64_t v36;
  int64_t v37;
  uint64_t v38;
  unint64_t v39;
  uint64_t v40;
  int64_t v41;
  unint64_t v42;
  _QWORD *v43;
  _QWORD *v44;
  char *v45;
  unint64_t v46;
  unint64_t v47;
  unint64_t v48;
  unint64_t v49;
  uint64_t v50;
  uint64_t v51;
  id v52;
  unint64_t v53;
  unint64_t v54;
  unint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  unsigned __int8 *v59;
  sparse_m_double *v60;
  sparse_dimension v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  sparse_m_double *v66;
  uint64_t result;
  char v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  unint64_t v74;
  unint64_t v75;
  unint64_t v76;
  char *v77;
  uint64_t v78;
  uint64_t v79;
  _QWORD *v80;
  _QWORD *v81;
  void *v82;
  _QWORD *v83;
  unint64_t v84;
  void *v85;
  _QWORD *v86;
  char *v87;
  char v88;
  char v89;
  unint64_t v90;

  if (!objc_msgSend((id)v1, sel_hasPendingRead))
    goto LABEL_90;
  v90 = MEMORY[0x1E0DEE9D8];
  v68 = a1;
  v5 = objc_msgSend((id)v1, sel_allNodes);
  sub_1CA0B6A1C();
  sub_1CA0C0614();
  v6 = sub_1CA1F0C94();

  sub_1CA0B2380(v6);
  v1 = v90;
  v2 = v90 >> 62;
  if ((v68 & 1) == 0)
  {
    v25 = v90 & 0xFFFFFFFFFFFFFF8;
    if (v2)
    {
      swift_bridgeObjectRetain();
      v71 = sub_1CA1F1234();
      if (v71)
      {
        swift_bridgeObjectRetain();
        v26 = sub_1CA1F1234();
        swift_bridgeObjectRelease();
        if ((v26 & 0x8000000000000000) == 0)
        {
LABEL_37:
          v27 = 0;
          v73 = v25 + 32;
          v74 = v90 & 0xC000000000000001;
          v72 = (2 * v26) | 1;
          v4 = (char *)(v26 + 1);
          v77 = (char *)(v90 + 32);
          v78 = v26 + 1;
          v28 = (_QWORD *)MEMORY[0x1E0DEE9D8];
          v29 = (_QWORD *)MEMORY[0x1E0DEE9D8];
          v76 = v90 >> 62;
          v70 = v90 & 0xFFFFFFFFFFFFFF8;
          v69 = v26;
          do
          {
            v30 = *(_QWORD *)(v25 + 16);
            if (v27 >= (unint64_t)v30)
              goto LABEL_83;
            v4 = (char *)v78;
            if (v27 == v78)
              goto LABEL_84;
            v31 = *(void **)&v77[8 * v27];
            v85 = v31;
            if (v2)
            {
              swift_bridgeObjectRetain();
              v33 = v31;
              v34 = sub_1CA1F1234();
              swift_bridgeObjectRelease();
              if (v34 < v27)
                goto LABEL_87;
              swift_bridgeObjectRetain();
              v30 = sub_1CA1F1234();
              swift_bridgeObjectRelease();
            }
            else
            {
              v32 = v31;
            }
            if (v30 < v26)
              goto LABEL_85;
            v4 = (char *)v74;
            if (v74 && v27 != v26)
            {
              if (v27 >= v26)
                goto LABEL_88;
              v35 = v27;
              do
              {
                v36 = v35 + 1;
                sub_1CA1F1084();
                v35 = v36;
              }
              while (v26 != v36);
            }
            v81 = v28;
            v83 = v29;
            swift_bridgeObjectRetain();
            v37 = v27;
            v38 = v73;
            v87 = (char *)v37;
            v39 = v72;
            if (v2)
            {
              sub_1CA1F1240();
              v38 = v40;
              v37 = v41;
              v39 = v42;
              swift_bridgeObjectRelease();
            }
            v4 = (char *)(v39 >> 1);
            v43 = (_QWORD *)MEMORY[0x1E0DEE9D8];
            v44 = (_QWORD *)MEMORY[0x1E0DEE9D8];
            v45 = &v4[-v37];
            if (v4 != (char *)v37)
            {
              if ((uint64_t)v4 <= v37)
                goto LABEL_89;
              v50 = 0;
              v44 = (_QWORD *)MEMORY[0x1E0DEE9D8];
              v51 = v38 + 8 * v37;
              while (!__OFADD__(v50, 1))
              {
                v52 = *(id *)(v51 + 8 * v50);
                if (objc_msgSend(v31, sel_hasEdgeWithNode_, v52))
                {
                  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
                    v43 = sub_1CA0E5894(0, v43[2] + 1, 1, v43);
                  v54 = v43[2];
                  v53 = v43[3];
                  if (v54 >= v53 >> 1)
                    v43 = sub_1CA0E5894((_QWORD *)(v53 > 1), v54 + 1, 1, v43);
                  v43[2] = v54 + 1;
                  v43[v54 + 4] = 0x3FF0000000000000;
                  v4 = v87;
                  if (__OFADD__(v50, v87))
                    goto LABEL_81;
                  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
                    v44 = sub_1CA0E59A0(0, v44[2] + 1, 1, v44);
                  v2 = v44[2];
                  v55 = v44[3];
                  if (v2 >= v55 >> 1)
                    v44 = sub_1CA0E59A0((_QWORD *)(v55 > 1), v2 + 1, 1, v44);
                  v44[2] = v2 + 1;
                  v44[v2 + 4] = &v87[v50];
                  v31 = v85;
                }

                if (v45 == (char *)++v50)
                  goto LABEL_53;
              }
              __break(1u);
LABEL_81:
              __break(1u);
              goto LABEL_82;
            }
LABEL_53:
            swift_unknownObjectRelease();
            v28 = v81;
            if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
              v28 = sub_1CA0E637C(0, v81[2] + 1, 1, v81);
            v29 = v83;
            v47 = v28[2];
            v46 = v28[3];
            if (v47 >= v46 >> 1)
              v28 = sub_1CA0E637C((_QWORD *)(v46 > 1), v47 + 1, 1, v28);
            v25 = v70;
            v28[2] = v47 + 1;
            v28[v47 + 4] = v43;
            if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
              v29 = sub_1CA0E6250(0, v83[2] + 1, 1, v83);
            v2 = v76;
            v49 = v29[2];
            v48 = v29[3];
            if (v49 >= v48 >> 1)
              v29 = sub_1CA0E6250((_QWORD *)(v48 > 1), v49 + 1, 1, v29);
            v29[2] = v49 + 1;
            v27 = (int64_t)(v87 + 1);
            v29[v49 + 4] = v44;

            v4 = (char *)v71;
            v26 = v69;
          }
          while (v87 + 1 != (char *)v71);
LABEL_101:
          swift_bridgeObjectRelease();
          if (v2)
          {
            swift_bridgeObjectRetain();
            v65 = sub_1CA1F1234();
            swift_bridgeObjectRelease();
            if (v65 < 0)
              goto LABEL_107;
            swift_bridgeObjectRetain();
            v64 = sub_1CA1F1234();
            swift_bridgeObjectRelease();
            if (v64 < 0)
              goto LABEL_107;
          }
          else
          {
            v64 = *(_QWORD *)((v1 & 0xFFFFFFFFFFFFF8) + 0x10);
            v65 = v64;
          }
          v89 = 1;
          v59 = (unsigned __int8 *)&v89;
          v60 = (sparse_m_double *)v65;
          v61 = v64;
          v62 = (uint64_t)v28;
          v63 = (uint64_t)v29;
          goto LABEL_106;
        }
        __break(1u);
      }
    }
    else
    {
      v26 = *(_QWORD *)((v90 & 0xFFFFFFFFFFFFFF8) + 0x10);
      swift_bridgeObjectRetain();
      if (v26)
      {
        v71 = v26;
        goto LABEL_37;
      }
    }
    v29 = (_QWORD *)MEMORY[0x1E0DEE9D8];
    v28 = (_QWORD *)MEMORY[0x1E0DEE9D8];
    goto LABEL_101;
  }
  v4 = (char *)(v90 & 0xFFFFFFFFFFFFFF8);
  if (v2)
    goto LABEL_91;
  v79 = v90 & 0xFFFFFFFFFFFFFF8;
  v7 = *(_QWORD *)((v90 & 0xFFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain();
  if (v7)
  {
    v75 = v90 >> 62;
    v8 = v7;
    while (1)
    {
      v9 = 0;
      v10 = (_QWORD *)MEMORY[0x1E0DEE9D8];
      v86 = (_QWORD *)MEMORY[0x1E0DEE9D8];
      while (1)
      {
        v4 = *(char **)(v79 + 16);
        if (v9 >= (unint64_t)v4)
          break;
        v4 = (char *)(v1 + 32);
        v11 = *(void **)(v1 + 32 + 8 * v9);
        v84 = v9;
        v82 = v11;
        if (v8)
        {
          if (v8 < 1)
            goto LABEL_86;
          v80 = v10;
          swift_bridgeObjectRetain();
          v12 = v11;
          v13 = 0;
          v14 = (_QWORD *)MEMORY[0x1E0DEE9D8];
          v15 = (_QWORD *)MEMORY[0x1E0DEE9D8];
          do
          {
            v16 = *(id *)(v1 + 8 * v13 + 32);
            if (objc_msgSend(v12, sel_hasEdgeTowardNode_, v16))
            {
              if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
                v14 = sub_1CA0E5894(0, v14[2] + 1, 1, v14);
              v18 = v14[2];
              v17 = v14[3];
              if (v18 >= v17 >> 1)
                v14 = sub_1CA0E5894((_QWORD *)(v17 > 1), v18 + 1, 1, v14);
              v14[2] = v18 + 1;
              v14[v18 + 4] = 0x3FF0000000000000;
              if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
                v15 = sub_1CA0E59A0(0, v15[2] + 1, 1, v15);
              v2 = v15[2];
              v19 = v15[3];
              if (v2 >= v19 >> 1)
                v15 = sub_1CA0E59A0((_QWORD *)(v19 > 1), v2 + 1, 1, v15);
              v15[2] = v2 + 1;
              v15[v2 + 4] = v13;
            }
            ++v13;

          }
          while (v8 != v13);
          swift_bridgeObjectRelease();
          v10 = v80;
        }
        else
        {
          v20 = v11;
          v14 = (_QWORD *)MEMORY[0x1E0DEE9D8];
          v15 = (_QWORD *)MEMORY[0x1E0DEE9D8];
        }
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
          v86 = sub_1CA0E637C(0, v86[2] + 1, 1, v86);
        v22 = v86[2];
        v21 = v86[3];
        if (v22 >= v21 >> 1)
          v86 = sub_1CA0E637C((_QWORD *)(v21 > 1), v22 + 1, 1, v86);
        v86[2] = v22 + 1;
        v86[v22 + 4] = v14;
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
          v10 = sub_1CA0E6250(0, v10[2] + 1, 1, v10);
        v24 = v10[2];
        v23 = v10[3];
        if (v24 >= v23 >> 1)
          v10 = sub_1CA0E6250((_QWORD *)(v23 > 1), v24 + 1, 1, v10);
        v10[2] = v24 + 1;
        v10[v24 + 4] = v15;
        v9 = v84 + 1;

        if (v84 + 1 == v7)
        {
          swift_bridgeObjectRelease();
          if (v75)
            goto LABEL_94;
          goto LABEL_79;
        }
      }
LABEL_82:
      __break(1u);
LABEL_83:
      __break(1u);
LABEL_84:
      __break(1u);
LABEL_85:
      __break(1u);
LABEL_86:
      __break(1u);
LABEL_87:
      __break(1u);
LABEL_88:
      __break(1u);
LABEL_89:
      __break(1u);
LABEL_90:
      __break(1u);
LABEL_91:
      v79 = (uint64_t)v4;
      swift_bridgeObjectRetain();
      v58 = sub_1CA1F1234();
      if (!v58)
        break;
      v7 = v58;
      v75 = v2;
      swift_bridgeObjectRetain();
      v8 = sub_1CA1F1234();
      swift_bridgeObjectRelease();
    }
  }
  swift_bridgeObjectRelease();
  v10 = (_QWORD *)MEMORY[0x1E0DEE9D8];
  v86 = (_QWORD *)MEMORY[0x1E0DEE9D8];
  if (!v2)
  {
LABEL_79:
    v56 = *(_QWORD *)((v1 & 0xFFFFFFFFFFFFF8) + 0x10);
    v57 = v56;
LABEL_96:
    v88 = 0;
    v59 = (unsigned __int8 *)&v88;
    v60 = (sparse_m_double *)v57;
    v61 = v56;
    v62 = (uint64_t)v86;
    v63 = (uint64_t)v10;
LABEL_106:
    v66 = _s17KnowledgeGraphKit14MASparseMatrixC4rows7columns0F6Values0F7Indices4kindACs6UInt64V_AJSaySaySdGGSaySays5Int64VGGAA0dE4KindOtcfC_0(v60, v61, v62, v63, v59);
    type metadata accessor for MASparseAdjacencyMatrixRepresentation();
    result = swift_allocObject();
    *(_BYTE *)(result + 32) = v68 & 1;
    *(_QWORD *)(result + 16) = v66;
    *(_QWORD *)(result + 24) = v1;
    return result;
  }
LABEL_94:
  swift_bridgeObjectRetain();
  v57 = sub_1CA1F1234();
  swift_bridgeObjectRelease();
  if ((v57 & 0x8000000000000000) == 0)
  {
    swift_bridgeObjectRetain();
    v56 = sub_1CA1F1234();
    swift_bridgeObjectRelease();
    if ((v56 & 0x8000000000000000) == 0)
      goto LABEL_96;
  }
LABEL_107:
  result = sub_1CA1F11BC();
  __break(1u);
  return result;
}

uint64_t sub_1CA126624(char a1)
{
  return MAGraph.adjacencySparseMatrix(directed:)(a1);
}

uint64_t dispatch thunk of MAGraphSparseMatrix.adjacencySparseMatrix(directed:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 8))();
}

unint64_t MASparseMatrix.count.getter()
{
  uint64_t v0;
  unint64_t v1;
  unint64_t v2;
  unint64_t result;

  v1 = *(_QWORD *)(v0 + 24);
  v2 = *(_QWORD *)(v0 + 32);
  if (is_mul_ok(v1, v2))
    return v1 * v2;
  __break(1u);
  return result;
}

double MASparseMatrix.subscript.getter(sparse_index row, sparse_index column_start)
{
  uint64_t v2;
  int v3;
  sparse_index v4;
  sparse_index v6;
  sparse_index column_end;
  double val[2];

  val[1] = *(double *)MEMORY[0x1E0C80C00];
  v3 = *(unsigned __int8 *)(v2 + 16);
  do
  {
    while (1)
    {
      v4 = column_start;
      column_start = row;
      if (v3 != 2)
        break;
      row = v4;
      if (column_start >= v4)
        goto LABEL_6;
    }
    if (v3 != 1)
      break;
    row = v4;
  }
  while (v4 < column_start);
LABEL_6:
  column_end = 0;
  val[0] = 0.0;
  v6 = 0;
  if (sparse_extract_sparse_row_double(*(sparse_matrix_double *)(v2 + 40), column_start, v4, &column_end, 1uLL, val, &v6) != 1|| (v3 || v6) && ((v3 - 1) > 1 || v6 != v4))
  {
    return 0.0;
  }
  else
  {
    return val[0];
  }
}

uint64_t MASparseMatrix.deinit()
{
  uint64_t v0;

  sparse_matrix_destroy(*(void **)(v0 + 40));
  return v0;
}

uint64_t MASparseMatrix.__deallocating_deinit()
{
  uint64_t v0;

  sparse_matrix_destroy(*(void **)(v0 + 40));
  return swift_deallocClassInstance();
}

BOOL static MASparseMatrixKind.== infix(_:_:)(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return *a1 == *a2;
}

uint64_t MASparseMatrixKind.hash(into:)()
{
  return sub_1CA1F13FC();
}

uint64_t MASparseMatrixKind.hashValue.getter()
{
  sub_1CA1F13F0();
  sub_1CA1F13FC();
  return sub_1CA1F1438();
}

sparse_m_double *MASparseMatrix.__allocating_init(rows:columns:columnsValues:columnsIndices:kind:)(sparse_m_double *result, sparse_dimension a2, uint64_t a3, uint64_t a4, unsigned __int8 *a5)
{
  sparse_dimension v6;
  sparse_dimension v7;
  int v8;
  uint64_t v9;
  sparse_m_double *v10;
  sparse_matrix_property v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  sparse_dimension v15;
  sparse_dimension v16;
  sparse_dimension v17;

  if (*(_QWORD *)(a3 + 16) != a2)
  {
LABEL_21:
    __break(1u);
    goto LABEL_22;
  }
  v6 = a2;
  if (*(_QWORD *)(a4 + 16) != a2)
  {
LABEL_22:
    __break(1u);
    goto LABEL_23;
  }
  v7 = (sparse_dimension)result;
  v8 = *a5;
  type metadata accessor for MASparseMatrix();
  v9 = swift_allocObject();
  *(_BYTE *)(v9 + 16) = v8;
  *(_QWORD *)(v9 + 24) = v7;
  *(_QWORD *)(v9 + 32) = v6;
  result = sparse_matrix_create_double(v7, v6);
  if (!result)
  {
LABEL_25:
    __break(1u);
    return result;
  }
  v10 = result;
  *(_QWORD *)(v9 + 40) = result;
  if (v8)
  {
    if (v8 == 1)
    {
      if (v7 != v6)
      {
LABEL_23:
        __break(1u);
        goto LABEL_24;
      }
      v11 = SPARSE_UPPER_SYMMETRIC;
    }
    else
    {
      if (v7 != v6)
      {
LABEL_24:
        __break(1u);
        goto LABEL_25;
      }
      v11 = SPARSE_LOWER_SYMMETRIC;
    }
    sparse_set_matrix_property(result, v11);
  }
  if (v6)
  {
    result = (sparse_m_double *)swift_retain();
    v12 = 0;
    while (v12 < *(_QWORD *)(a3 + 16))
    {
      if (v12 >= *(_QWORD *)(a4 + 16))
        goto LABEL_20;
      v13 = *(_QWORD *)(a3 + 32 + 8 * v12);
      v14 = *(_QWORD *)(a4 + 32 + 8 * v12);
      v15 = v6;
      v16 = *(_QWORD *)(v13 + 16);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      v17 = v16;
      v6 = v15;
      sparse_insert_col_double(v10, v12, v17, (const double *)(v13 + 32), (const sparse_index *)(v14 + 32));
      swift_bridgeObjectRelease();
      result = (sparse_m_double *)swift_bridgeObjectRelease();
      if (v15 == ++v12)
        goto LABEL_18;
    }
    __break(1u);
LABEL_20:
    __break(1u);
    goto LABEL_21;
  }
  swift_retain();
LABEL_18:
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  sparse_commit(v10);
  return (sparse_m_double *)v9;
}

uint64_t MASparseMatrix.size.getter()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + 24);
}

uint64_t MASparseMatrix.length.getter()
{
  uint64_t v0;

  if (*(_QWORD *)(v0 + 32) <= *(_QWORD *)(v0 + 24))
    return *(_QWORD *)(v0 + 24);
  else
    return *(_QWORD *)(v0 + 32);
}

uint64_t MASparseMatrix.sparseCount.getter()
{
  uint64_t v0;
  unint64_t v1;
  unint64_t v2;
  unint64_t matrix_nonzero_count;
  BOOL v4;
  uint64_t result;

  v1 = *(_QWORD *)(v0 + 24);
  v2 = *(_QWORD *)(v0 + 32);
  if (!is_mul_ok(v1, v2))
  {
    __break(1u);
    goto LABEL_7;
  }
  matrix_nonzero_count = sparse_get_matrix_nonzero_count(*(void **)(v0 + 40));
  if ((matrix_nonzero_count & 0x8000000000000000) != 0)
  {
LABEL_8:
    result = sub_1CA1F11BC();
    __break(1u);
    return result;
  }
  v4 = v1 * v2 >= matrix_nonzero_count;
  result = v1 * v2 - matrix_nonzero_count;
  if (!v4)
  {
LABEL_7:
    __break(1u);
    goto LABEL_8;
  }
  return result;
}

unint64_t MASparseMatrix.sparsity.getter()
{
  uint64_t v0;
  unint64_t v1;
  unint64_t v2;
  unint64_t result;

  v1 = *(_QWORD *)(v0 + 24);
  v2 = *(_QWORD *)(v0 + 32);
  if (!is_mul_ok(v1, v2))
  {
    __break(1u);
    goto LABEL_6;
  }
  result = sparse_get_matrix_nonzero_count(*(void **)(v0 + 40));
  if ((result & 0x8000000000000000) != 0)
  {
LABEL_7:
    result = sub_1CA1F11BC();
    __break(1u);
    return result;
  }
  if (v1 * v2 < result)
  {
LABEL_6:
    __break(1u);
    goto LABEL_7;
  }
  return result;
}

unint64_t MASparseMatrix.density.getter()
{
  uint64_t v0;
  unint64_t v1;
  unint64_t v2;
  unint64_t result;

  v1 = *(_QWORD *)(v0 + 24);
  v2 = *(_QWORD *)(v0 + 32);
  if (!is_mul_ok(v1, v2))
  {
    __break(1u);
LABEL_7:
    __break(1u);
    goto LABEL_8;
  }
  result = sparse_get_matrix_nonzero_count(*(void **)(v0 + 40));
  if ((result & 0x8000000000000000) != 0)
  {
LABEL_9:
    result = sub_1CA1F11BC();
    __break(1u);
    return result;
  }
  if (v1 * v2 < result)
    goto LABEL_7;
  if (v1 * v2 < v1 * v2 - result)
  {
LABEL_8:
    __break(1u);
    goto LABEL_9;
  }
  return result;
}

uint64_t MASparseMatrix.subscript.setter(sparse_index i, sparse_index j, double a3)
{
  uint64_t v3;

  return sparse_insert_entry_double(*(sparse_matrix_double *)(v3 + 40), a3, i, j);
}

uint64_t (*MASparseMatrix.subscript.modify(uint64_t a1, sparse_index row, sparse_index column_start))(uint64_t a1)
{
  uint64_t v3;

  *(_QWORD *)(a1 + 16) = column_start;
  *(_QWORD *)(a1 + 24) = v3;
  *(_QWORD *)(a1 + 8) = row;
  *(double *)a1 = MASparseMatrix.subscript.getter(row, column_start);
  return sub_1CA126C54;
}

uint64_t sub_1CA126C54(uint64_t a1)
{
  return sparse_insert_entry_double(*(sparse_matrix_double *)(*(_QWORD *)(a1 + 24) + 40), *(double *)a1, *(_QWORD *)(a1 + 8), *(_QWORD *)(a1 + 16));
}

Swift::String __swiftcall MASparseMatrix.description(integerPrecision:doublePrecision:)(Swift::Int integerPrecision, Swift::Int doublePrecision)
{
  uint64_t v2;
  void *v3;
  uint64_t v4;
  uint64_t v5;
  int64_t v6;
  sparse_index v7;
  sparse_index i;
  uint64_t v9;
  uint64_t v10;
  double v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  Swift::String result;
  uint64_t v19;
  uint64_t v20;

  v3 = (void *)0xE000000000000000;
  v4 = *(_QWORD *)(v2 + 24);
  if (!v4)
  {
    integerPrecision = 0;
    goto LABEL_17;
  }
  v5 = v2;
  v6 = *(_QWORD *)(v2 + 32);
  if (v6 < 0)
    goto LABEL_16;
  v7 = 0;
  v19 = *(_QWORD *)(v2 + 24);
  while (!v6)
  {
LABEL_12:
    __swift_instantiateConcreteTypeFromMangledName(&qword_1EF93A1E0);
    sub_1CA127B2C();
    sub_1CA1F0970();
    swift_bridgeObjectRelease();
    sub_1CA1F0A3C();
    swift_bridgeObjectRelease();
    sub_1CA1F0A3C();
    sub_1CA1F0A3C();
    ++v7;
    swift_bridgeObjectRelease();
    if (v7 == v4)
    {
      integerPrecision = 0;
      v3 = (void *)0xE000000000000000;
      goto LABEL_17;
    }
  }
  v20 = MEMORY[0x1E0DEE9D8];
  integerPrecision = sub_1CA0CD4EC(0, v6, 0);
  if ((v7 & 0x8000000000000000) == 0)
  {
    for (i = 0; i != v6; ++i)
    {
      sub_1CA1F12AC();
      sub_1CA1F0A3C();
      swift_bridgeObjectRelease();
      sub_1CA1F0A3C();
      sub_1CA1F12AC();
      sub_1CA1F0A3C();
      swift_bridgeObjectRelease();
      sub_1CA1F0A3C();
      __swift_instantiateConcreteTypeFromMangledName(&qword_1EF93A1D8);
      v9 = swift_allocObject();
      *(_OWORD *)(v9 + 16) = xmmword_1CA1F9100;
      v10 = v5;
      v11 = MASparseMatrix.subscript.getter(v7, i);
      *(_QWORD *)(v9 + 56) = MEMORY[0x1E0DEB070];
      *(_QWORD *)(v9 + 64) = MEMORY[0x1E0DEB100];
      *(double *)(v9 + 32) = v11;
      v12 = sub_1CA1F0A18();
      v14 = v13;
      swift_bridgeObjectRelease();
      v16 = *(_QWORD *)(v20 + 16);
      v15 = *(_QWORD *)(v20 + 24);
      if (v16 >= v15 >> 1)
        sub_1CA0CD4EC(v15 > 1, v16 + 1, 1);
      *(_QWORD *)(v20 + 16) = v16 + 1;
      v17 = v20 + 16 * v16;
      *(_QWORD *)(v17 + 32) = v12;
      *(_QWORD *)(v17 + 40) = v14;
      v5 = v10;
    }
    v4 = v19;
    goto LABEL_12;
  }
  __break(1u);
LABEL_16:
  __break(1u);
LABEL_17:
  result._object = v3;
  result._countAndFlagsBits = integerPrecision;
  return result;
}

uint64_t MASparseMatrix.description.getter()
{
  return MASparseMatrix.description(integerPrecision:doublePrecision:)(20, 10)._countAndFlagsBits;
}

uint64_t sub_1CA127024()
{
  return MASparseMatrix.description(integerPrecision:doublePrecision:)(20, 10)._countAndFlagsBits;
}

uint64_t sub_1CA127050(uint64_t *a1, uint64_t *a2)
{
  return _s17KnowledgeGraphKit14MASparseMatrixC2eeoiySbAC_ACtFZ_0(*a1, *a2);
}

Swift::Void __swiftcall MASparseMatrix.setDiag(vector:)(KnowledgeGraphKit::MAMatrix vector)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;

  v2 = *(_QWORD *)vector.rows;
  v3 = *(_QWORD *)(vector.rows + 8);
  if (v3 != 1 && v2 != 1)
    goto LABEL_18;
  v5 = v2 * v3;
  if ((unsigned __int128)(v2 * (__int128)v3) >> 64 == (v2 * v3) >> 63)
  {
    v6 = *(_QWORD *)(v1 + 24);
    if (v6 != v5 || v5 < 0 || v6 != *(_QWORD *)(v1 + 32))
      goto LABEL_17;
    v7 = *(_QWORD *)(vector.rows + 16);
    v8 = swift_allocObject();
    *(_QWORD *)(v8 + 16) = 0;
    swift_bridgeObjectRetain();
    if (!v5)
    {
LABEL_14:
      *(_QWORD *)(v8 + 16) = v5;
      swift_bridgeObjectRelease();
      swift_release();
      return;
    }
    v9 = 0;
    while (v9 < *(_QWORD *)(v7 + 16))
    {
      v10 = v9 + 1;
      sparse_insert_entry_double(*(sparse_matrix_double *)(v1 + 40), *(double *)(v7 + 32 + 8 * v9), v9, v9);
      v9 = v10;
      if (v5 == v10)
        goto LABEL_14;
    }
    __break(1u);
  }
  __break(1u);
LABEL_17:
  __break(1u);
LABEL_18:
  __break(1u);
}

Swift::Void __swiftcall MASparseMatrix.setDiag(values:indices:)(Swift::OpaquePointer values, Swift::OpaquePointer indices)
{
  uint64_t v2;
  unint64_t v3;
  char *v5;
  uint64_t v6;
  char *v7;
  unint64_t v8;

  v3 = *((_QWORD *)values._rawValue + 2);
  if (v3 != *((_QWORD *)indices._rawValue + 2))
  {
LABEL_9:
    __break(1u);
    return;
  }
  if (v3)
  {
    v5 = (char *)values._rawValue + 32;
    swift_bridgeObjectRetain();
    v6 = 0;
    while (1)
    {
      v7 = (char *)indices._rawValue + 8 * v6;
      v8 = *((_QWORD *)v7 + 4);
      if (v8 >= v3)
        break;
      ++v6;
      sparse_insert_entry_double(*(sparse_matrix_double *)(v2 + 40), *(double *)&v5[8 * v8], v8, *((_QWORD *)v7 + 4));
      if (v3 == v6)
      {
        swift_bridgeObjectRelease();
        return;
      }
    }
    __break(1u);
    goto LABEL_9;
  }
}

KnowledgeGraphKit::MAMatrix __swiftcall MASparseMatrix.denseMatrix()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  Swift::Int matrix_nonzero_count_for_row;
  Swift::Int v6;
  void *v7;
  sparse_index i;
  sparse_dimension v9;
  uint64_t v10;
  uint64_t v11;
  sparse_index *v12;
  double *v13;
  int v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  BOOL v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  sparse_index v28;
  __int128 v29;
  _QWORD *v30;
  sparse_index *v31[2];
  double *v32[3];
  KnowledgeGraphKit::MAMatrix result;

  v32[2] = *(double **)MEMORY[0x1E0C80C00];
  v2 = *(_QWORD *)(v1 + 24);
  if (v2 < 0)
    goto LABEL_46;
  v3 = v1;
  v4 = *(_QWORD *)(v1 + 32);
  if (v4 < 0)
  {
LABEL_47:
    __break(1u);
LABEL_48:
    __break(1u);
  }
  if ((unsigned __int128)(v2 * (__int128)v4) >> 64 != (v2 * v4) >> 63)
    goto LABEL_48;
  v26 = v0;
  v27 = *(_QWORD *)(v1 + 32);
  matrix_nonzero_count_for_row = sub_1CA0B4464(v2 * v4, 0.0);
  *(_QWORD *)&v29 = v2;
  *((_QWORD *)&v29 + 1) = v27;
  v30 = (_QWORD *)matrix_nonzero_count_for_row;
  if (v2)
  {
    for (i = 0; i != v2; ++i)
    {
      matrix_nonzero_count_for_row = sparse_get_matrix_nonzero_count_for_row(*(void **)(v3 + 40), i);
      if (matrix_nonzero_count_for_row >= 1)
      {
        v9 = matrix_nonzero_count_for_row;
        v10 = sub_1CA1F0B68();
        *(_QWORD *)(v10 + 16) = v9;
        bzero((void *)(v10 + 32), 8 * v9);
        v28 = 0;
        v11 = sub_1CA1F0B68();
        *(_QWORD *)(v11 + 16) = v9;
        v12 = (sparse_index *)(v11 + 32);
        bzero((void *)(v11 + 32), 8 * v9);
        v13 = *(double **)(v10 + 16);
        v32[0] = (double *)(v10 + 32);
        v32[1] = v13;
        v31[0] = v12;
        v31[1] = (sparse_index *)v9;
        sub_1CA127478(v31, v3, i, &v28, v9, v32, (uint64_t)&v29);
        swift_bridgeObjectRelease();
        matrix_nonzero_count_for_row = swift_bridgeObjectRelease();
      }
    }
    v14 = *(unsigned __int8 *)(v3 + 16);
    v15 = v30;
    if ((v14 - 3) >= 0xFFFFFFFE)
    {
      v16 = 0;
      v17 = v27;
      while (1)
      {
        if (v16 == v2)
          goto LABEL_42;
        if (v14 == 2)
          v18 = v17;
        else
          v18 = v16 + 1;
        if (v14 == 2)
          v19 = v16;
        else
          v19 = 0;
        if (v18 < v19)
          goto LABEL_43;
        if (v19 != v18)
          break;
LABEL_11:
        if (++v16 == v2)
          goto LABEL_35;
      }
      v20 = v16 * v17;
      if ((unsigned __int128)(v16 * (__int128)v17) >> 64 == (v16 * v17) >> 63)
      {
        if (v19 >= v18)
        {
LABEL_45:
          __break(1u);
LABEL_46:
          __break(1u);
          goto LABEL_47;
        }
        matrix_nonzero_count_for_row = swift_isUniquelyReferenced_nonNull_native();
        if ((matrix_nonzero_count_for_row & 1) == 0)
        {
          matrix_nonzero_count_for_row = (Swift::Int)sub_1CA0B6058(v15);
          v15 = (_QWORD *)matrix_nonzero_count_for_row;
        }
        v17 = v27;
        while (1)
        {
          v21 = v19 * v27;
          if ((unsigned __int128)(v19 * (__int128)v27) >> 64 != (v19 * v27) >> 63)
            break;
          v22 = __OFADD__(v21, v16);
          v23 = v21 + v16;
          if (v22)
            goto LABEL_37;
          if ((v23 & 0x8000000000000000) != 0)
            goto LABEL_38;
          v24 = v15[2];
          if (v23 >= v24)
            goto LABEL_39;
          v25 = v20 + v19;
          if (__OFADD__(v20, v19))
            goto LABEL_40;
          if (v25 >= v24)
            goto LABEL_41;
          ++v19;
          v15[v25 + 4] = v15[v23 + 4];
          if (v18 == v19)
            goto LABEL_11;
        }
        __break(1u);
LABEL_37:
        __break(1u);
LABEL_38:
        __break(1u);
LABEL_39:
        __break(1u);
LABEL_40:
        __break(1u);
LABEL_41:
        __break(1u);
LABEL_42:
        __break(1u);
LABEL_43:
        __break(1u);
      }
      __break(1u);
      goto LABEL_45;
    }
  }
  else
  {
    v15 = (_QWORD *)matrix_nonzero_count_for_row;
  }
LABEL_35:
  *(_OWORD *)v26 = v29;
  *(_QWORD *)(v26 + 16) = v15;
  result.elements._rawValue = v7;
  result.columns = v6;
  result.rows = matrix_nonzero_count_for_row;
  return result;
}

uint64_t sub_1CA127478(sparse_index **a1, uint64_t a2, sparse_index row, sparse_index *a4, sparse_dimension nz, double **a6, uint64_t a7)
{
  uint64_t v7;
  sparse_index v8;
  double *v9;
  _QWORD *v10;
  const double **v11;
  sparse_index *v12;
  sparse_dimension v13;
  double *v14;
  const double *v15;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v17;
  uint64_t result;

  if (row < 0)
  {
    __break(1u);
    goto LABEL_15;
  }
  v10 = (_QWORD *)nz;
  if ((nz & 0x8000000000000000) == 0)
  {
    v11 = (const double **)a6;
    v14 = *a6;
    if (!v14)
    {
LABEL_23:
      __break(1u);
      goto LABEL_24;
    }
    v12 = *a1;
    if (!*a1)
    {
LABEL_24:
      __break(1u);
      goto LABEL_25;
    }
    v7 = a7;
    v8 = row;
    v9 = (double *)a2;
    sparse_extract_sparse_row_double(*(sparse_matrix_double *)(a2 + 40), row, 0, a4, nz, v14, v12);
    v13 = *((_QWORD *)v9 + 4);
    if ((v13 & 0x8000000000000000) == 0)
    {
      v9 = (double *)sub_1CA0B4464(*((_QWORD *)v9 + 4), 0.0);
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) != 0)
      {
        v15 = *v11;
        if (*v11)
          goto LABEL_8;
        goto LABEL_17;
      }
LABEL_16:
      v9 = (double *)sub_1CA0B6058(v9);
      v15 = *v11;
      if (*v11)
      {
LABEL_8:
        sparse_unpack_vector_double(v13, (sparse_dimension)v10, 0, v15, v12, v9 + 4, 1);
        if (*((_QWORD *)v9 + 2) == *(_QWORD *)(v7 + 8))
        {
          v10 = *(_QWORD **)(v7 + 16);
          isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
          *(_QWORD *)(v7 + 16) = v10;
          if ((isUniquelyReferenced_nonNull_native & 1) != 0)
            goto LABEL_10;
          goto LABEL_19;
        }
LABEL_18:
        __break(1u);
LABEL_19:
        v10 = sub_1CA0B6058(v10);
        *(_QWORD *)(v7 + 16) = v10;
LABEL_10:
        v17 = *(_QWORD *)(v7 + 8);
        if (v17 < (uint64_t)0xFFFFFFFF80000000)
        {
          __break(1u);
        }
        else if (v17 <= 0x7FFFFFFF)
        {
          if ((unsigned __int128)(v8 * (__int128)v17) >> 64 == (v8 * v17) >> 63)
          {
            cblas_dcopy_NEWLAPACK();
            *(_QWORD *)(v7 + 16) = v10;
            return swift_bridgeObjectRelease();
          }
          goto LABEL_22;
        }
        __break(1u);
LABEL_22:
        __break(1u);
        goto LABEL_23;
      }
LABEL_17:
      __break(1u);
      goto LABEL_18;
    }
LABEL_15:
    __break(1u);
    goto LABEL_16;
  }
LABEL_25:
  result = sub_1CA1F11BC();
  __break(1u);
  return result;
}

uint64_t _s17KnowledgeGraphKit14MASparseMatrixC2eeoiySbAC_ACtFZ_0(uint64_t a1, uint64_t a2)
{
  sparse_dimension v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t matrix_nonzero_count_for_column;
  sparse_index v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  _QWORD *v11;
  BOOL v12;
  _BOOL8 v13;
  uint64_t v14;
  uint64_t result;
  sparse_dimension nz;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  sparse_index v20;
  sparse_index row_end[2];

  row_end[1] = *MEMORY[0x1E0C80C00];
  v2 = *(_QWORD *)(a1 + 24);
  if (v2 != *(_QWORD *)(a2 + 24))
    return 0;
  v3 = a2;
  v4 = a1;
  v5 = *(_QWORD *)(a1 + 32);
  if (v5 != *(_QWORD *)(a2 + 32))
    return 0;
  if (!v5)
    return 1;
  matrix_nonzero_count_for_column = sparse_get_matrix_nonzero_count_for_column(*(void **)(a1 + 40), 0);
  if (matrix_nonzero_count_for_column != sparse_get_matrix_nonzero_count_for_column(*(void **)(v3 + 40), 0))
    return 0;
  nz = v2;
  v17 = v3;
  v7 = 0;
  v18 = v5 - 1;
  v19 = v4;
  while (1)
  {
    if (!matrix_nonzero_count_for_column)
      goto LABEL_12;
    if (matrix_nonzero_count_for_column < 0)
      break;
    v8 = sub_1CA1F0B68();
    *(_QWORD *)(v8 + 16) = matrix_nonzero_count_for_column;
    bzero((void *)(v8 + 32), 8 * matrix_nonzero_count_for_column);
    row_end[0] = 0;
    v9 = (_QWORD *)sub_1CA1F0B68();
    v9[2] = matrix_nonzero_count_for_column;
    bzero(v9 + 4, 8 * matrix_nonzero_count_for_column);
    v10 = sub_1CA1F0B68();
    *(_QWORD *)(v10 + 16) = matrix_nonzero_count_for_column;
    bzero((void *)(v10 + 32), 8 * matrix_nonzero_count_for_column);
    v20 = 0;
    v11 = (_QWORD *)sub_1CA1F0B68();
    v11[2] = matrix_nonzero_count_for_column;
    bzero(v11 + 4, 8 * matrix_nonzero_count_for_column);
    sparse_extract_sparse_column_double(*(sparse_matrix_double *)(v19 + 40), v7, 0, row_end, nz, (double *)(v8 + 32), v9 + 4);
    v3 = v17;
    sparse_extract_sparse_column_double(*(sparse_matrix_double *)(v17 + 40), v7, 0, &v20, nz, (double *)(v10 + 32), v11 + 4);
    if (row_end[0] != v20 || !sub_1CA0B5290(v8, v10))
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      return 0;
    }
    v12 = sub_1CA0B52FC(v9, v11);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if (!v12)
      return 0;
    v4 = v19;
LABEL_12:
    v13 = v18 == v7;
    if (v18 != v7)
    {
      if (v7 == 0x7FFFFFFFFFFFFFFFLL)
        __break(1u);
      matrix_nonzero_count_for_column = sparse_get_matrix_nonzero_count_for_column(*(void **)(v4 + 40), v7 + 1);
      v14 = sparse_get_matrix_nonzero_count_for_column(*(void **)(v3 + 40), ++v7);
      if (matrix_nonzero_count_for_column == v14)
        continue;
    }
    return v13;
  }
  result = sub_1CA1F11BC();
  __break(1u);
  return result;
}

sparse_m_double *_s17KnowledgeGraphKit14MASparseMatrixC4rows7columns0F6Values0F7Indices4kindACs6UInt64V_AJSaySaySdGGSaySays5Int64VGGAA0dE4KindOtcfC_0(sparse_m_double *result, sparse_dimension a2, uint64_t a3, uint64_t a4, unsigned __int8 *a5)
{
  sparse_dimension v6;
  int v8;
  uint64_t v9;
  sparse_m_double *v10;
  sparse_matrix_property v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  sparse_dimension v15;
  sparse_dimension v16;
  sparse_dimension v17;

  if (*(sparse_m_double **)(a3 + 16) != result)
  {
LABEL_21:
    __break(1u);
    goto LABEL_22;
  }
  v6 = (sparse_dimension)result;
  if (*(sparse_m_double **)(a4 + 16) != result)
  {
LABEL_22:
    __break(1u);
    goto LABEL_23;
  }
  v8 = *a5;
  type metadata accessor for MASparseMatrix();
  v9 = swift_allocObject();
  *(_BYTE *)(v9 + 16) = v8;
  *(_QWORD *)(v9 + 24) = v6;
  *(_QWORD *)(v9 + 32) = a2;
  result = sparse_matrix_create_double(v6, a2);
  if (!result)
  {
LABEL_25:
    __break(1u);
    return result;
  }
  v10 = result;
  *(_QWORD *)(v9 + 40) = result;
  if (v8)
  {
    if (v8 == 1)
    {
      if (v6 != a2)
      {
LABEL_23:
        __break(1u);
        goto LABEL_24;
      }
      v11 = SPARSE_UPPER_SYMMETRIC;
    }
    else
    {
      if (v6 != a2)
      {
LABEL_24:
        __break(1u);
        goto LABEL_25;
      }
      v11 = SPARSE_LOWER_SYMMETRIC;
    }
    sparse_set_matrix_property(result, v11);
  }
  if (v6)
  {
    result = (sparse_m_double *)swift_retain();
    v12 = 0;
    while (v12 < *(_QWORD *)(a3 + 16))
    {
      if (v12 >= *(_QWORD *)(a4 + 16))
        goto LABEL_20;
      v13 = *(_QWORD *)(a3 + 32 + 8 * v12);
      v14 = *(_QWORD *)(a4 + 32 + 8 * v12);
      v15 = v6;
      v16 = *(_QWORD *)(v13 + 16);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      v17 = v16;
      v6 = v15;
      sparse_insert_row_double(v10, v12, v17, (const double *)(v13 + 32), (const sparse_index *)(v14 + 32));
      swift_bridgeObjectRelease();
      result = (sparse_m_double *)swift_bridgeObjectRelease();
      if (v15 == ++v12)
        goto LABEL_18;
    }
    __break(1u);
LABEL_20:
    __break(1u);
    goto LABEL_21;
  }
  swift_retain();
LABEL_18:
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  sparse_commit(v10);
  return (sparse_m_double *)v9;
}

uint64_t type metadata accessor for MASparseMatrix()
{
  return objc_opt_self();
}

unint64_t sub_1CA127B2C()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1EF93A1E8;
  if (!qword_1EF93A1E8)
  {
    v1 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_1EF93A1E0);
    result = MEMORY[0x1CAA4BB30](MEMORY[0x1E0DEAF20], v1);
    atomic_store(result, (unint64_t *)&qword_1EF93A1E8);
  }
  return result;
}

uint64_t sub_1CA127B78()
{
  return swift_deallocObject();
}

unint64_t sub_1CA127B8C()
{
  unint64_t result;

  result = qword_1EF93A1F0;
  if (!qword_1EF93A1F0)
  {
    result = MEMORY[0x1CAA4BB30](&protocol conformance descriptor for MASparseMatrixKind, &type metadata for MASparseMatrixKind);
    atomic_store(result, (unint64_t *)&qword_1EF93A1F0);
  }
  return result;
}

void sub_1CA127BD0(sparse_index *a1@<X1>, double *a2@<X8>)
{
  *a2 = MASparseMatrix.subscript.getter(*a1, a1[1]);
}

uint64_t sub_1CA127BFC(double *a1, uint64_t a2, sparse_index *a3)
{
  return sparse_insert_entry_double(*(sparse_matrix_double *)(*(_QWORD *)a2 + 40), *a1, *a3, a3[1]);
}

uint64_t sub_1CA127C14()
{
  return 0;
}

uint64_t method lookup function for MASparseMatrix()
{
  return swift_lookUpClassMethod();
}

uint64_t storeEnumTagSinglePayload for MASparseMatrixKind(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 2 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 2) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFE)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFD)
    return ((uint64_t (*)(void))((char *)&loc_1CA127C7C + 4 * byte_1CA1FC245[v4]))();
  *a1 = a2 + 2;
  return ((uint64_t (*)(void))((char *)sub_1CA127CB0 + 4 * byte_1CA1FC240[v4]))();
}

uint64_t sub_1CA127CB0(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1CA127CB8(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1CA127CC0);
  return result;
}

uint64_t sub_1CA127CCC(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1CA127CD4);
  *(_BYTE *)result = a2 + 2;
  return result;
}

uint64_t sub_1CA127CD8(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1CA127CE0(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for MASparseMatrixKind()
{
  return &type metadata for MASparseMatrixKind;
}

uint64_t sub_1CA127CFC(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v6;
  _QWORD *v12;
  uint64_t v13;
  _QWORD *v14;
  _QWORD *v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;

  v6 = a4 * a5;
  if ((unsigned __int128)(a4 * (__int128)a5) >> 64 != (a4 * a5) >> 63)
  {
LABEL_19:
    __break(1u);
    goto LABEL_20;
  }
  v12 = (_QWORD *)result;
  v13 = swift_allocObject();
  *(_QWORD *)(v13 + 16) = 0;
  v14 = (_QWORD *)(v13 + 16);
  v15 = (_QWORD *)swift_allocObject();
  v15[2] = v13;
  v15[3] = v6;
  v15[4] = a4;
  v15[5] = a5;
  v15[6] = a6;
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EF937D28);
  result = swift_allocObject();
  v16 = 0;
  *(_QWORD *)(result + 16) = sub_1CA0E1FCC;
  *(_QWORD *)(result + 24) = v15;
  if (!a2 || !a3)
  {
LABEL_15:
    *v12 = result;
    return v16;
  }
  if ((a3 & 0x8000000000000000) == 0)
  {
    if (v6)
    {
      v17 = 0;
      v16 = 0;
      while (!__OFADD__(v17, 1))
      {
        v18 = v15[6];
        *v14 = v17 + 1;
        if ((v17 & 0x8000000000000000) != 0)
          goto LABEL_17;
        if (v17 >= *(_QWORD *)(v18 + 16))
          goto LABEL_18;
        *(_QWORD *)(a2 + 8 * v16) = *(_QWORD *)(v18 + 8 * v17 + 32);
        if (a3 - 1 == v16)
        {
          v16 = a3;
          goto LABEL_15;
        }
        v19 = v15[2];
        v20 = *(_QWORD *)(v19 + 16);
        v14 = (_QWORD *)(v19 + 16);
        v17 = v20;
        ++v16;
        if (v20 == v15[3])
          goto LABEL_15;
      }
      __break(1u);
LABEL_17:
      __break(1u);
LABEL_18:
      __break(1u);
      goto LABEL_19;
    }
    v16 = 0;
    goto LABEL_15;
  }
LABEL_20:
  __break(1u);
  return result;
}

KnowledgeGraphKit::MAMatrix __swiftcall MAMatrix.init(repeating:rows:columns:)(Swift::Double repeating, Swift::Int rows, Swift::Int columns)
{
  Swift::Int *v3;
  Swift::Int *v4;
  unint64_t v5;
  Swift::Int v8;
  void *v9;
  Swift::Double *v10;
  unint64_t v11;
  Swift::Double v12;
  int64x2_t v13;
  int64x2_t *v14;
  unint64_t v15;
  unint64_t v16;
  KnowledgeGraphKit::MAMatrix result;

  v4 = v3;
  v5 = rows * columns;
  if ((unsigned __int128)(rows * (__int128)columns) >> 64 != (rows * columns) >> 63)
  {
    __break(1u);
    goto LABEL_14;
  }
  if ((v5 & 0x8000000000000000) != 0)
  {
LABEL_14:
    v8 = sub_1CA1F11BC();
    __break(1u);
    goto LABEL_15;
  }
  if (v5)
  {
    v8 = sub_1CA1F0B68();
    *(_QWORD *)(v8 + 16) = v5;
    v10 = (Swift::Double *)(v8 + 32);
    if (v5 >= 4)
    {
      v11 = v5 & 0xFFFFFFFFFFFFFFFCLL;
      v10 += v5 & 0xFFFFFFFFFFFFFFFCLL;
      v12 = repeating;
      v13 = vdupq_lane_s64(*(uint64_t *)&repeating, 0);
      v14 = (int64x2_t *)(v8 + 48);
      v15 = v5 & 0xFFFFFFFFFFFFFFFCLL;
      do
      {
        v14[-1] = v13;
        *v14 = v13;
        v14 += 2;
        v15 -= 4;
      }
      while (v15);
      if (v5 == v11)
        goto LABEL_12;
    }
    else
    {
      v11 = 0;
      v12 = repeating;
    }
    v16 = v5 - v11;
    do
    {
      *v10++ = v12;
      --v16;
    }
    while (v16);
  }
  else
  {
    v8 = MEMORY[0x1E0DEE9D8];
  }
LABEL_12:
  *v4 = rows;
  v4[1] = columns;
  v4[2] = v8;
LABEL_15:
  result.elements._rawValue = v9;
  result.columns = columns;
  result.rows = v8;
  return result;
}

Swift::Void __swiftcall MAMatrix.setDiag(vector:)(KnowledgeGraphKit::MAMatrix vector)
{
  _QWORD *v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;

  v3 = *(_QWORD *)vector.rows;
  v4 = *(_QWORD *)(vector.rows + 8);
  if (v4 != 1 && v3 != 1)
    goto LABEL_24;
  v6 = v3 * v4;
  if ((unsigned __int128)(v3 * (__int128)v4) >> 64 != (v3 * v4) >> 63)
  {
    __break(1u);
LABEL_18:
    __break(1u);
    goto LABEL_19;
  }
  if (*v1 != v6 || *v1 != v1[1])
    goto LABEL_18;
  if (v6 < (uint64_t)0xFFFFFFFF80000000)
  {
LABEL_19:
    __break(1u);
    goto LABEL_20;
  }
  if (v6 > 0x7FFFFFFF)
  {
LABEL_20:
    __break(1u);
LABEL_21:
    v2 = sub_1CA0B6058(v2);
    if (!__OFADD__((_DWORD)v6, 1))
      goto LABEL_16;
    goto LABEL_23;
  }
  v2 = (_QWORD *)v1[2];
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    goto LABEL_21;
  if (!__OFADD__((_DWORD)v6, 1))
  {
LABEL_16:
    cblas_dcopy_NEWLAPACK();
    v1[2] = v2;
    return;
  }
LABEL_23:
  __break(1u);
LABEL_24:
  __break(1u);
}

Swift::Void __swiftcall MAMatrix.normalize(axe:)(KnowledgeGraphKit::MAMatrixAxes axe)
{
  vDSP_Length *v1;
  vDSP_Length v2;
  char v3;
  __int128 v4;
  vDSP_Length v5;
  __int128 v6;

  v2 = v1[2];
  if (*(_BYTE *)axe == 1)
  {
    v4 = *(_OWORD *)v1;
    v5 = v2;
    v3 = 1;
  }
  else
  {
    v4 = *(_OWORD *)v1;
    v5 = v2;
    v3 = 0;
  }
  MAMatrix.sum(axe:)((KnowledgeGraphKit::MAMatrixAxes)&v3);
  /= infix(_:_:)(v1, (uint64_t)&v6);
  swift_bridgeObjectRelease();
}

uint64_t <*> infix(_:_:)@<X0>(uint64_t *a1@<X0>, _QWORD *a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v7;
  uint64_t result;

  v7 = a1[1];
  if (v7 == *a2)
  {
    v3 = *a1;
    v4 = a2[1];
    if ((unsigned __int128)(*a1 * (__int128)v4) >> 64 == (*a1 * v4) >> 63)
    {
      v5 = (_QWORD *)sub_1CA0B4464(*a1 * v4, 0.0);
      result = swift_isUniquelyReferenced_nonNull_native();
      if ((result & 1) != 0)
        goto LABEL_4;
      goto LABEL_13;
    }
  }
  else
  {
    __break(1u);
  }
  __break(1u);
LABEL_13:
  result = (uint64_t)sub_1CA0B6058(v5);
  v5 = (_QWORD *)result;
LABEL_4:
  if (v3 > 0x7FFFFFFF)
  {
    __break(1u);
    goto LABEL_15;
  }
  if (v4 > 0x7FFFFFFF)
  {
LABEL_15:
    __break(1u);
LABEL_16:
    __break(1u);
    goto LABEL_17;
  }
  if (v7 < (uint64_t)0xFFFFFFFF80000000 || v3 < (uint64_t)0xFFFFFFFF80000000 || v4 < (uint64_t)0xFFFFFFFF80000000)
    goto LABEL_16;
  if (v7 <= 0x7FFFFFFF)
  {
    result = cblas_dgemm_NEWLAPACK();
    *a3 = v3;
    a3[1] = v4;
    a3[2] = (uint64_t)v5;
    return result;
  }
LABEL_17:
  __break(1u);
  return result;
}

Swift::Void __swiftcall MAMatrix.inflate(power:axe:)(Swift::Double power, KnowledgeGraphKit::MAMatrixAxes axe)
{
  uint64_t *v2;
  char v4;
  _QWORD *v5;
  char isUniquelyReferenced_nonNull_native;
  double *v7;
  double *v8[2];

  v4 = *(_BYTE *)axe;
  v5 = (_QWORD *)v2[2];
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  v2[2] = (uint64_t)v5;
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
    v5 = sub_1CA0B6058(v5);
    v2[2] = (uint64_t)v5;
  }
  v7 = (double *)v5[2];
  v8[0] = (double *)(v5 + 4);
  v8[1] = v7;
  sub_1CA132F68(v8, v2, power);
  v2[2] = (uint64_t)v5;
  LOBYTE(v8[0]) = v4;
  MAMatrix.normalize(axe:)((KnowledgeGraphKit::MAMatrixAxes)v8);
}

Swift::Double __swiftcall MAMatrix.euclideanDistance(matrix:axe:)(KnowledgeGraphKit::MAMatrix matrix, KnowledgeGraphKit::MAMatrixAxes axe)
{
  int64x2_t *v2;
  int64x2_t v3;
  int64x2_t v4;
  int32x2_t v5;
  __int128 v6;
  double v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  double v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  double v15;
  uint64_t v16;
  Swift::Double result;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  int64_t v22;
  uint64_t v23;
  uint64_t v24;

  v3 = *(int64x2_t *)matrix.rows;
  v4 = vdupq_n_s64(1uLL);
  if ((vmaxv_u16((uint16x4_t)vmovn_s32(vuzp1q_s32((int32x4_t)vceqq_s64(*v2, v4), (int32x4_t)vceqq_s64(*(int64x2_t *)matrix.rows, v4)))) & 1) != 0)goto LABEL_39;
  v5 = vmovn_s64(vceqq_s64(*v2, v3));
  if ((v5.i8[4] & 1) == 0 || (v5.i8[0] & 1) == 0)
    goto LABEL_39;
  v6 = *(_OWORD *)matrix.rows;
  if (!*(_BYTE *)matrix.columns)
  {
    if ((v3.i64[0] & 0x8000000000000000) == 0)
    {
      if (v3.i64[0])
      {
        v13 = 0;
        v7 = 0.0;
        while ((*((_QWORD *)&v6 + 1) & 0x8000000000000000) == 0)
        {
          swift_bridgeObjectRetain();
          if (*((_QWORD *)&v6 + 1))
          {
            v16 = sub_1CA1F0B68();
            *(_QWORD *)(v16 + 16) = *((_QWORD *)&v6 + 1);
            bzero((void *)(v16 + 32), 8 * *((_QWORD *)&v6 + 1));
            if (*((uint64_t *)&v6 + 1) > 0x7FFFFFFF)
            {
              __break(1u);
LABEL_33:
              __break(1u);
LABEL_34:
              __break(1u);
LABEL_35:
              __break(1u);
              goto LABEL_36;
            }
          }
          else
          {
            v16 = MEMORY[0x1E0DEE9D8];
          }
          if ((unsigned __int128)(v13 * (__int128)*((uint64_t *)&v6 + 1)) >> 64 != (v13 * *((_QWORD *)&v6 + 1)) >> 63)
            goto LABEL_35;
          cblas_dcopy_NEWLAPACK();
          swift_bridgeObjectRelease();
          v22 = 1;
          v23 = *((_QWORD *)&v6 + 1);
          v24 = v16;
          swift_bridgeObjectRetain();
          if (*((_QWORD *)&v6 + 1))
          {
            v14 = sub_1CA1F0B68();
            *(_QWORD *)(v14 + 16) = *((_QWORD *)&v6 + 1);
            bzero((void *)(v14 + 32), 8 * *((_QWORD *)&v6 + 1));
          }
          else
          {
            v14 = MEMORY[0x1E0DEE9D8];
          }
          ++v13;
          cblas_dcopy_NEWLAPACK();
          swift_bridgeObjectRelease();
          v19 = 1;
          v20 = *((_QWORD *)&v6 + 1);
          v21 = v14;
          v15 = sub_1CA1358E0(&v22, &v19);
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          v7 = v7 + v15;
          if ((_QWORD)v6 == v13)
            return sqrt(v7);
        }
        goto LABEL_38;
      }
      goto LABEL_31;
    }
LABEL_37:
    __break(1u);
LABEL_38:
    sub_1CA1F11BC();
    __break(1u);
LABEL_39:
    sub_1CA1F11C8();
    __break(1u);
    return result;
  }
  if (v3.i64[1] < 0)
  {
LABEL_36:
    __break(1u);
    goto LABEL_37;
  }
  if (v3.i64[1])
  {
    v7 = 0.0;
    v8 = 32;
    v18 = (unint64_t)v3.i64[1] >> 31;
    v9 = *(_QWORD *)(matrix.rows + 8);
    while ((v6 & 0x8000000000000000) == 0)
    {
      swift_bridgeObjectRetain();
      if ((_QWORD)v6)
      {
        v12 = sub_1CA1F0B68();
        *(_QWORD *)(v12 + 16) = v6;
        bzero((void *)(v12 + 32), 8 * v6);
        if ((uint64_t)v6 > 0x7FFFFFFF)
          goto LABEL_33;
        if (v18)
          goto LABEL_34;
      }
      else
      {
        v12 = MEMORY[0x1E0DEE9D8];
        if (v18)
          goto LABEL_34;
      }
      cblas_dcopy_NEWLAPACK();
      swift_bridgeObjectRelease();
      v22 = v6;
      v23 = 1;
      v24 = v12;
      swift_bridgeObjectRetain();
      if ((_QWORD)v6)
      {
        v10 = sub_1CA1F0B68();
        *(_QWORD *)(v10 + 16) = v6;
        bzero((void *)(v10 + 32), 8 * v6);
      }
      else
      {
        v10 = MEMORY[0x1E0DEE9D8];
      }
      cblas_dcopy_NEWLAPACK();
      swift_bridgeObjectRelease();
      v19 = v6;
      v20 = 1;
      v21 = v10;
      v11 = sub_1CA1358E0(&v22, &v19);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      v7 = v7 + v11;
      v8 += 8;
      if (!--v9)
        return sqrt(v7);
    }
    goto LABEL_38;
  }
LABEL_31:
  v7 = 0.0;
  return sqrt(v7);
}

uint64_t MAMatrix.subscript.getter(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  BOOL v5;
  unint64_t v6;

  v3 = *(_QWORD *)(v2 + 8);
  v4 = result * v3;
  if ((unsigned __int128)(result * (__int128)v3) >> 64 != (result * v3) >> 63)
  {
    __break(1u);
    goto LABEL_7;
  }
  v5 = __OFADD__(v4, a2);
  v6 = v4 + a2;
  if (v5)
  {
LABEL_7:
    __break(1u);
    goto LABEL_8;
  }
  if ((v6 & 0x8000000000000000) != 0)
  {
LABEL_8:
    __break(1u);
    goto LABEL_9;
  }
  if (v6 >= *(_QWORD *)(*(_QWORD *)(v2 + 16) + 16))
LABEL_9:
    __break(1u);
  return result;
}

uint64_t MAMatrix.subscript.setter(uint64_t a1, uint64_t a2, double a3)
{
  _QWORD *v3;
  uint64_t v4;
  unint64_t v5;
  double v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t result;

  v7 = *(_QWORD *)(v4 + 8);
  v8 = a1 * v7;
  if ((unsigned __int128)(a1 * (__int128)v7) >> 64 != (a1 * v7) >> 63)
  {
    __break(1u);
    goto LABEL_8;
  }
  v5 = v8 + a2;
  if (__OFADD__(v8, a2))
  {
LABEL_8:
    __break(1u);
    goto LABEL_9;
  }
  v6 = a3;
  v3 = *(_QWORD **)(v4 + 16);
  result = swift_isUniquelyReferenced_nonNull_native();
  if ((result & 1) != 0)
  {
    if ((v5 & 0x8000000000000000) == 0)
      goto LABEL_5;
LABEL_10:
    __break(1u);
    goto LABEL_11;
  }
LABEL_9:
  result = (uint64_t)sub_1CA0B6058(v3);
  v3 = (_QWORD *)result;
  if ((v5 & 0x8000000000000000) != 0)
    goto LABEL_10;
LABEL_5:
  if (v5 < v3[2])
  {
    *(double *)&v3[v5 + 4] = v6;
    *(_QWORD *)(v4 + 16) = v3;
    return result;
  }
LABEL_11:
  __break(1u);
  return result;
}

uint64_t MAMatrix.subscript.getter@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;
  int64_t v5;
  _QWORD *v6;
  uint64_t result;

  v5 = *(_QWORD *)(v2 + 8);
  v6 = (_QWORD *)sub_1CA0B4464(v5, 0.0);
  result = swift_isUniquelyReferenced_nonNull_native();
  if ((result & 1) == 0)
  {
    result = (uint64_t)sub_1CA0B6058(v6);
    v6 = (_QWORD *)result;
  }
  if (v5 < (uint64_t)0xFFFFFFFF80000000)
  {
    __break(1u);
    goto LABEL_8;
  }
  if (v5 > 0x7FFFFFFF)
  {
LABEL_8:
    __break(1u);
    goto LABEL_9;
  }
  if ((unsigned __int128)(a1 * (__int128)v5) >> 64 == (a1 * v5) >> 63)
  {
    result = cblas_dcopy_NEWLAPACK();
    *a2 = 1;
    a2[1] = v5;
    a2[2] = v6;
    return result;
  }
LABEL_9:
  __break(1u);
  return result;
}

{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t result;
  uint64_t v9;

  v6 = *(_QWORD *)(v2 + 8);
  v7 = *(_QWORD *)(a1 + 16);
  if ((unsigned __int128)(v7 * (__int128)v6) >> 64 != (v7 * v6) >> 63)
    goto LABEL_14;
  v2 = *(_QWORD *)(v2 + 16);
  v3 = (_QWORD *)sub_1CA0B4464(v7 * v6, 0.0);
  result = swift_isUniquelyReferenced_nonNull_native();
  if ((result & 1) == 0)
    goto LABEL_15;
  if (v7)
  {
    while (v6 >= (uint64_t)0xFFFFFFFF80000000)
    {
      if (v6 > 0x7FFFFFFF)
        goto LABEL_18;
      v2 += 32;
      swift_bridgeObjectRetain();
      v9 = 0;
      while ((unsigned __int128)(*(uint64_t *)(a1 + 8 * v9 + 32) * (__int128)v6) >> 64 == (*(_QWORD *)(a1 + 8 * v9 + 32)
                                                                                         * v6) >> 63)
      {
        if ((unsigned __int128)(v9 * (__int128)v6) >> 64 != (v9 * v6) >> 63)
          goto LABEL_13;
        ++v9;
        cblas_dcopy_NEWLAPACK();
        if (v7 == v9)
        {
          result = swift_bridgeObjectRelease();
          goto LABEL_11;
        }
      }
      __break(1u);
LABEL_13:
      __break(1u);
LABEL_14:
      __break(1u);
LABEL_15:
      result = (uint64_t)sub_1CA0B6058(v3);
      v3 = (_QWORD *)result;
      if (!v7)
        goto LABEL_11;
    }
    __break(1u);
LABEL_18:
    __break(1u);
  }
  else
  {
LABEL_11:
    *a2 = v7;
    a2[1] = v6;
    a2[2] = v3;
  }
  return result;
}

uint64_t MAMatrix.subscript.setter(_QWORD *a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t result;

  if (*a1 == 1)
  {
    v3 = a1[1];
    if (v3 == *(_QWORD *)(v2 + 8))
    {
      v5 = a2;
      v4 = *(_QWORD **)(v2 + 16);
      result = swift_isUniquelyReferenced_nonNull_native();
      *(_QWORD *)(v2 + 16) = v4;
      if ((result & 1) != 0)
        goto LABEL_4;
      goto LABEL_10;
    }
  }
  else
  {
    __break(1u);
  }
  __break(1u);
LABEL_10:
  result = (uint64_t)sub_1CA0B6058(v4);
  v4 = (_QWORD *)result;
  *(_QWORD *)(v2 + 16) = result;
LABEL_4:
  if (v3 < (uint64_t)0xFFFFFFFF80000000)
  {
    __break(1u);
    goto LABEL_12;
  }
  if (v3 > 0x7FFFFFFF)
  {
LABEL_12:
    __break(1u);
    goto LABEL_13;
  }
  if ((unsigned __int128)(v5 * (__int128)v3) >> 64 == (v5 * v3) >> 63)
  {
    cblas_dcopy_NEWLAPACK();
    *(_QWORD *)(v2 + 16) = v4;
    return swift_bridgeObjectRelease();
  }
LABEL_13:
  __break(1u);
  return result;
}

uint64_t MAMatrix.subscript.getter@<X0>(uint64_t *a1@<X8>)
{
  unint64_t *v1;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t result;

  v4 = *v1;
  v3 = v1[1];
  v5 = (_QWORD *)sub_1CA0B4464(*v1, 0.0);
  result = swift_isUniquelyReferenced_nonNull_native();
  if ((result & 1) == 0)
  {
    result = (uint64_t)sub_1CA0B6058(v5);
    v5 = (_QWORD *)result;
  }
  if (v4 > 0x7FFFFFFF)
  {
    __break(1u);
LABEL_11:
    __break(1u);
    goto LABEL_12;
  }
  if (v4 < (uint64_t)0xFFFFFFFF80000000 || v3 < (uint64_t)0xFFFFFFFF80000000)
    goto LABEL_11;
  if (v3 <= 0x7FFFFFFF)
  {
    result = cblas_dcopy_NEWLAPACK();
    *a1 = v4;
    a1[1] = 1;
    a1[2] = (uint64_t)v5;
    return result;
  }
LABEL_12:
  __break(1u);
  return result;
}

uint64_t MAMatrix.subscript.setter(uint64_t *a1, uint64_t a2)
{
  _QWORD *v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t result;

  v5 = *a1;
  if (a1[1] == 1 && v5 == *v2)
  {
    v3 = v2[1];
    if (v3 > a2)
    {
      v4 = (_QWORD *)v2[2];
      result = swift_isUniquelyReferenced_nonNull_native();
      v2[2] = v4;
      if ((result & 1) != 0)
        goto LABEL_8;
      goto LABEL_14;
    }
  }
  else
  {
    __break(1u);
  }
  __break(1u);
LABEL_14:
  result = (uint64_t)sub_1CA0B6058(v4);
  v4 = (_QWORD *)result;
  v2[2] = result;
LABEL_8:
  if (v5 > 0x7FFFFFFF)
  {
    __break(1u);
LABEL_16:
    __break(1u);
    goto LABEL_17;
  }
  if (v5 < (uint64_t)0xFFFFFFFF80000000 || v3 < (uint64_t)0xFFFFFFFF80000000)
    goto LABEL_16;
  if (v3 <= 0x7FFFFFFF)
  {
    cblas_dcopy_NEWLAPACK();
    v2[2] = v4;
    return swift_bridgeObjectRelease();
  }
LABEL_17:
  __break(1u);
  return result;
}

KnowledgeGraphKit::MAMatrix __swiftcall MAMatrix.transpose()()
{
  int64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  int64_t *v3;
  int64_t v4;
  vDSP_Length v5;
  int64_t v6;
  Swift::Int v7;
  Swift::Int v8;
  void *v9;
  KnowledgeGraphKit::MAMatrix result;

  v3 = v0;
  v5 = *v1;
  v4 = v1[1];
  v6 = v4 * *v1;
  if ((unsigned __int128)(v4 * (__int128)*v1) >> 64 != v6 >> 63)
  {
    __break(1u);
LABEL_7:
    v2 = (uint64_t)sub_1CA0B6058((_QWORD *)v2);
    if (v4 < 0)
      goto LABEL_8;
    goto LABEL_4;
  }
  v1 = (uint64_t *)v1[2];
  v2 = sub_1CA0B4464(v6, 0.0);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    goto LABEL_7;
  if (v4 < 0)
  {
LABEL_8:
    v7 = sub_1CA1F11BC();
    __break(1u);
    goto LABEL_9;
  }
LABEL_4:
  if ((v5 & 0x8000000000000000) != 0)
    goto LABEL_8;
  vDSP_mtransD((const double *)v1 + 4, 1, (double *)(v2 + 32), 1, v4, v5);
  *v3 = v4;
  v3[1] = v5;
  v3[2] = v2;
LABEL_9:
  result.elements._rawValue = v9;
  result.columns = v8;
  result.rows = v7;
  return result;
}

uint64_t MAMatrix.subscript.setter(unint64_t a1, double a2)
{
  uint64_t v2;
  _QWORD *v5;
  uint64_t result;

  v5 = *(_QWORD **)(v2 + 16);
  result = swift_isUniquelyReferenced_nonNull_native();
  if ((result & 1) != 0)
  {
    if ((a1 & 0x8000000000000000) == 0)
      goto LABEL_3;
LABEL_6:
    __break(1u);
    goto LABEL_7;
  }
  result = (uint64_t)sub_1CA0B6058(v5);
  v5 = (_QWORD *)result;
  if ((a1 & 0x8000000000000000) != 0)
    goto LABEL_6;
LABEL_3:
  if (v5[2] > a1)
  {
    *(double *)&v5[a1 + 4] = a2;
    *(_QWORD *)(v2 + 16) = v5;
    return result;
  }
LABEL_7:
  __break(1u);
  return result;
}

void += infix(_:_:)(vDSP_Length *a1, uint64_t a2)
{
  vDSP_Stride v3;
  double *v4;
  uint64_t v5;
  int64_t v6;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v8;
  vDSP_Length v9;
  char v11;
  uint64_t v12;
  int64_t v13;
  double __B;
  unint64_t v15;
  uint64_t v16;

  v16 = *MEMORY[0x1E0C80C00];
  v4 = *(double **)a2;
  v3 = *(_QWORD *)(a2 + 8);
  v5 = *(_QWORD *)(a2 + 16);
  v6 = a1[1];
  if (v6 == v3)
  {
    if (v4 == (double *)1)
    {
      v6 = a1[2];
      isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      a1[2] = v6;
      if ((isUniquelyReferenced_nonNull_native & 1) == 0)
        goto LABEL_40;
      while ((v3 & 0x8000000000000000) == 0)
      {
        if (!v3)
          goto LABEL_11;
        v8 = 0;
        v4 = (double *)(v6 + 32);
        v9 = *a1;
        while (v3 != v8)
        {
          if (v8 >= *(_QWORD *)(v5 + 16))
            goto LABEL_37;
          __B = *(double *)(v5 + 32 + 8 * v8);
          if ((v9 & 0x8000000000000000) != 0)
          {
LABEL_44:
            sub_1CA1F11BC();
            __break(1u);
            goto LABEL_45;
          }
          ++v8;
          vDSP_vsaddD(v4, v3, &__B, v4, v3, v9);
          ++v4;
          if (v3 == v8)
          {
LABEL_11:
            a1[2] = v6;
            return;
          }
        }
        while (1)
        {
          __break(1u);
LABEL_37:
          __break(1u);
LABEL_38:
          v3 = (vDSP_Stride)sub_1CA0B6058((_QWORD *)v3);
          a1[2] = v3;
          if (((unint64_t)v4 & 0x8000000000000000) != 0)
            break;
LABEL_19:
          if (!v4)
            goto LABEL_31;
          v12 = 0;
          while (v4 != (double *)v12)
          {
            if ((unint64_t)v12 >= *(_QWORD *)(v5 + 16))
              goto LABEL_34;
            __B = *(double *)(v5 + 32 + 8 * v12);
            v13 = v12 * v6;
            if ((unsigned __int128)(v12 * (__int128)v6) >> 64 != (v12 * v6) >> 63)
              goto LABEL_35;
            if (v6 < 0)
              goto LABEL_44;
            ++v12;
            vDSP_vsaddD((const double *)(v3 + 32 + 8 * v13), 1, &__B, (double *)(v3 + 32 + 8 * v13), 1, v6);
            if (v4 == (double *)v12)
              goto LABEL_31;
          }
          __break(1u);
LABEL_34:
          __break(1u);
LABEL_35:
          __break(1u);
        }
LABEL_39:
        __break(1u);
LABEL_40:
        v6 = (int64_t)sub_1CA0B6058((_QWORD *)v6);
        a1[2] = v6;
      }
      __break(1u);
    }
    else
    {
      if ((double *)*a1 != v4)
        goto LABEL_45;
      v3 = a1[2];
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) != 0)
        goto LABEL_29;
    }
    v3 = (vDSP_Stride)sub_1CA0B6058((_QWORD *)v3);
LABEL_29:
    if (*(_QWORD *)(v5 + 16) >> 31)
      __break(1u);
    cblas_daxpy_NEWLAPACK();
LABEL_31:
    a1[2] = v3;
    return;
  }
  if (v3 == 1 && *a1 == (_QWORD)v4)
  {
    v3 = a1[2];
    v11 = swift_isUniquelyReferenced_nonNull_native();
    a1[2] = v3;
    if ((v11 & 1) == 0)
      goto LABEL_38;
    if (((unint64_t)v4 & 0x8000000000000000) != 0)
      goto LABEL_39;
    goto LABEL_19;
  }
LABEL_45:
  __B = 0.0;
  v15 = 0xE000000000000000;
  swift_bridgeObjectRetain();
  sub_1CA1F1054();
  swift_bridgeObjectRelease();
  __B = 7.22937896e159;
  v15 = 0xEB00000000206464;
  sub_1CA1F12AC();
  sub_1CA1F0A3C();
  swift_bridgeObjectRelease();
  sub_1CA1F0A3C();
  sub_1CA1F12AC();
  sub_1CA1F0A3C();
  swift_bridgeObjectRelease();
  sub_1CA1F0A3C();
  sub_1CA1F12AC();
  sub_1CA1F0A3C();
  swift_bridgeObjectRelease();
  sub_1CA1F0A3C();
  sub_1CA1F12AC();
  sub_1CA1F0A3C();
  swift_bridgeObjectRelease();
  sub_1CA1F0A3C();
  sub_1CA1F11C8();
  __break(1u);
}

unint64_t /= infix(_:_:)(uint64_t *a1)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  _QWORD *v5;
  unint64_t result;

  v2 = *a1;
  v3 = a1[1];
  v4 = (_QWORD *)a1[2];
  swift_bridgeObjectRetain();
  v5 = v4;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    v5 = sub_1CA0B6058(v4);
  result = v4[2];
  if (result >> 31)
  {
    __break(1u);
  }
  else
  {
    cblas_dscal_NEWLAPACK();
    result = swift_bridgeObjectRelease();
    *a1 = v2;
    a1[1] = v3;
    a1[2] = (uint64_t)v5;
  }
  return result;
}

uint64_t sub_1CA1290F4(uint64_t *a1, uint64_t (*a2)(uint64_t), uint64_t (*a3)(_QWORD *))
{
  uint64_t v6;
  uint64_t v7;
  uint64_t result;
  _QWORD v9[2];

  v6 = *a1;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    v6 = a2(v6);
  v7 = *(_QWORD *)(v6 + 16);
  v9[0] = v6 + 32;
  v9[1] = v7;
  result = a3(v9);
  *a1 = v6;
  return result;
}

uint64_t sub_1CA12916C(uint64_t *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t result;
  uint64_t v5[2];

  v2 = *a1;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    v2 = sub_1CA13B504(v2);
  v3 = *(_QWORD *)(v2 + 16);
  v5[0] = v2 + 32;
  v5[1] = v3;
  result = sub_1CA13A074(v5);
  *a1 = v2;
  return result;
}

KnowledgeGraphKit::MAMatrix __swiftcall MAMatrix.init(_:axe:)(Swift::OpaquePointer _, KnowledgeGraphKit::MAMatrixAxes axe)
{
  Swift::OpaquePointer *v2;
  uint64_t v3;
  uint64_t v4;
  KnowledgeGraphKit::MAMatrix result;

  v3 = *((_QWORD *)_._rawValue + 2);
  if (*(_BYTE *)axe)
    v4 = 1;
  else
    v4 = *((_QWORD *)_._rawValue + 2);
  if (!*(_BYTE *)axe)
    v3 = 1;
  v2->_rawValue = (void *)v3;
  v2[1]._rawValue = (void *)v4;
  v2[2]._rawValue = _._rawValue;
  result.rows = (Swift::Int)_._rawValue;
  LOBYTE(result.columns) = axe;
  return result;
}

Swift::tuple_mean_Double_deviation_Double __swiftcall MAMatrix.sstddev()()
{
  uint64_t *v0;
  const double *v1;
  uint64_t v2;
  double v3;
  uint64_t v4;
  uint64_t v5;
  double *v6;
  uint64_t v7;
  char isUniquelyReferenced_nonNull_native;
  double *v9;
  double v10;
  double v11;
  Swift::tuple_mean_Double_deviation_Double result;
  uint64_t __C[2];
  double *v14;
  double *v15[3];

  v15[2] = *(double **)MEMORY[0x1E0C80C00];
  v4 = *v0;
  v5 = v0[1];
  v6 = (double *)v0[2];
  __C[0] = 0;
  v7 = v4 * v5;
  if ((unsigned __int128)(v4 * (__int128)v5) >> 64 != (v4 * v5) >> 63)
  {
    __break(1u);
LABEL_8:
    v6 = (double *)sub_1CA0B6058(v6);
    goto LABEL_4;
  }
  if (v7 < 0)
  {
    sub_1CA1F11BC();
    __break(1u);
    goto LABEL_10;
  }
  v1 = v6 + 4;
  vDSP_meanvD(v6 + 4, 1, (double *)__C, v4 * v5);
  v2 = __C[0];
  v3 = -*(double *)__C;
  swift_bridgeObjectRetain();
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    goto LABEL_8;
LABEL_4:
  *(double *)__C = v3;
  vDSP_vsaddD(v1, 1, (const double *)__C, v6 + 4, 1, v4 * v5);
  __C[0] = v4;
  __C[1] = v5;
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  v14 = v6;
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
    v6 = (double *)sub_1CA0B6058(v6);
    v14 = v6;
  }
  v9 = (double *)*((_QWORD *)v6 + 2);
  v15[0] = v6 + 4;
  v15[1] = v9;
  sub_1CA132F68(v15, __C, 2.0);
  v15[0] = 0;
  vDSP_sveD(v6 + 4, 1, (double *)v15, v4 * v5);
  swift_bridgeObjectRelease();
  v10 = sqrt(*(double *)v15 / (double)(v7 - 1));
  v11 = *(double *)&v2;
LABEL_10:
  result.deviation = v10;
  result.mean = v11;
  return result;
}

uint64_t MAMatrix.count.getter()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t result;

  v1 = v0[1];
  result = *v0 * v1;
  if ((unsigned __int128)(*v0 * (__int128)v1) >> 64 != result >> 63)
    __break(1u);
  return result;
}

unint64_t MAMatrix.subscript.getter(unint64_t result)
{
  uint64_t v1;

  if ((result & 0x8000000000000000) != 0)
  {
    __break(1u);
    goto LABEL_5;
  }
  if (*(_QWORD *)(*(_QWORD *)(v1 + 16) + 16) <= result)
LABEL_5:
    __break(1u);
  return result;
}

KnowledgeGraphKit::MAMatrix __swiftcall MAMatrix.diag()()
{
  uint64_t *v0;
  unint64_t *v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  Swift::Int isUniquelyReferenced_nonNull_native;
  Swift::Int v7;
  unint64_t v8;
  KnowledgeGraphKit::MAMatrix result;

  v2 = v0;
  v4 = *v1;
  v3 = v1[1];
  if (v3 != 1 && v4 != 1)
  {
    if (v4 == v3)
    {
      v1 = (unint64_t *)sub_1CA0B4464(*v1, 0.0);
      isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      if ((isUniquelyReferenced_nonNull_native & 1) != 0)
        goto LABEL_14;
      goto LABEL_25;
    }
LABEL_24:
    __break(1u);
LABEL_25:
    isUniquelyReferenced_nonNull_native = (Swift::Int)sub_1CA0B6058(v1);
    v1 = (unint64_t *)isUniquelyReferenced_nonNull_native;
LABEL_14:
    if (v4 < (uint64_t)0xFFFFFFFF80000000)
    {
      __break(1u);
    }
    else if (v4 <= 0x7FFFFFFF)
    {
      v8 = (v4 + 1);
      if (!__OFADD__((_DWORD)v4, 1))
      {
        v3 = 1;
        isUniquelyReferenced_nonNull_native = cblas_dcopy_NEWLAPACK();
        goto LABEL_18;
      }
LABEL_28:
      __break(1u);
      goto LABEL_29;
    }
    __break(1u);
    goto LABEL_28;
  }
  if ((unsigned __int128)(v3 * (__int128)v3) >> 64 == (v3 * v3) >> 63)
  {
    v1 = (unint64_t *)sub_1CA0B4464(v3 * v3, 0.0);
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) != 0)
      goto LABEL_8;
  }
  else
  {
    __break(1u);
  }
  v1 = sub_1CA0B6058(v1);
LABEL_8:
  if (v3 < (uint64_t)0xFFFFFFFF80000000)
  {
    __break(1u);
    goto LABEL_22;
  }
  if (v3 > 0x7FFFFFFF)
  {
LABEL_22:
    __break(1u);
    goto LABEL_23;
  }
  if (__OFADD__((_DWORD)v3, 1))
  {
LABEL_23:
    __break(1u);
    goto LABEL_24;
  }
  isUniquelyReferenced_nonNull_native = cblas_dcopy_NEWLAPACK();
  v4 = v3;
LABEL_18:
  *v2 = v3;
  v2[1] = v4;
  v2[2] = (uint64_t)v1;
LABEL_29:
  result.elements._rawValue = (void *)v8;
  result.columns = v7;
  result.rows = isUniquelyReferenced_nonNull_native;
  return result;
}

void * infix(_:_:)(int64_t *a1@<X0>, vDSP_Length *a2@<X1>, int64_t *a3@<X8>)
{
  int64_t v4;
  int64_t v5;
  int64_t v6;
  uint64_t v7;
  vDSP_Length v8;
  vDSP_Length v9;
  uint64_t v10;
  vDSP_Length v12;
  double __B[3];

  __B[2] = *(double *)MEMORY[0x1E0C80C00];
  v5 = *a1;
  v4 = a1[1];
  v6 = a1[2];
  v8 = *a2;
  v7 = a2[1];
  v9 = a2[2];
  if (v4 != v7)
  {
    if (v5 == v8 && v7 == 1)
    {
      if ((unsigned __int128)(v5 * (__int128)v4) >> 64 != (v5 * v4) >> 63)
        goto LABEL_40;
      v7 = sub_1CA0B4464(v5 * v4, 0.0);
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        goto LABEL_41;
      if (v5 < 0)
        goto LABEL_42;
      goto LABEL_21;
    }
    goto LABEL_49;
  }
  if (v8 == 1)
  {
    if ((unsigned __int128)(v5 * (__int128)v4) >> 64 != (v5 * v4) >> 63)
      goto LABEL_43;
    v7 = sub_1CA0B4464(v5 * v4, 0.0);
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      goto LABEL_45;
    while ((v4 & 0x8000000000000000) == 0)
    {
      if (!v4)
        goto LABEL_34;
      v8 = 0;
      v10 = 32;
      while (v4 != v8)
      {
        if (v8 >= *(_QWORD *)(v9 + 16))
          goto LABEL_39;
        __B[0] = *(double *)(v9 + 32 + 8 * v8);
        if (v5 < 0)
          goto LABEL_48;
        ++v8;
        vDSP_vsmulD((const double *)(v6 + v10), v4, __B, (double *)(v7 + v10), v4, v5);
        v10 += 8;
        if (v4 == v8)
          goto LABEL_34;
      }
      while (1)
      {
        __break(1u);
LABEL_39:
        __break(1u);
LABEL_40:
        __break(1u);
LABEL_41:
        v7 = (uint64_t)sub_1CA0B6058((_QWORD *)v7);
        if (v5 < 0)
          break;
LABEL_21:
        if (!v5)
          goto LABEL_34;
        v8 = 0;
        v6 += 32;
        while (v5 != v8)
        {
          if (v8 >= *(_QWORD *)(v9 + 16))
            goto LABEL_36;
          __B[0] = *(double *)(v9 + 32 + 8 * v8);
          v12 = v8 * v4;
          if ((unsigned __int128)((uint64_t)v8 * (__int128)v4) >> 64 != (uint64_t)(v8 * v4) >> 63)
            goto LABEL_37;
          if (v4 < 0)
            goto LABEL_48;
          ++v8;
          vDSP_vsmulD((const double *)(v6 + 8 * v12), 1, __B, (double *)(v7 + 32 + 8 * v12), 1, v4);
          if (v5 == v8)
            goto LABEL_34;
        }
        __break(1u);
LABEL_36:
        __break(1u);
LABEL_37:
        __break(1u);
      }
LABEL_42:
      __break(1u);
LABEL_43:
      __break(1u);
LABEL_44:
      __break(1u);
LABEL_45:
      v7 = (uint64_t)sub_1CA0B6058((_QWORD *)v7);
    }
    __break(1u);
LABEL_47:
    v7 = (uint64_t)sub_1CA0B6058((_QWORD *)v7);
    if ((v8 & 0x8000000000000000) != 0)
    {
LABEL_48:
      sub_1CA1F11BC();
      __break(1u);
    }
    goto LABEL_33;
  }
  if (v5 != v8)
  {
LABEL_49:
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    sub_1CA1F1054();
    sub_1CA1F0A3C();
    sub_1CA1F12AC();
    sub_1CA1F0A3C();
    swift_bridgeObjectRelease();
    sub_1CA1F0A3C();
    sub_1CA1F12AC();
    sub_1CA1F0A3C();
    swift_bridgeObjectRelease();
    sub_1CA1F0A3C();
    sub_1CA1F12AC();
    sub_1CA1F0A3C();
    swift_bridgeObjectRelease();
    sub_1CA1F0A3C();
    sub_1CA1F12AC();
    sub_1CA1F0A3C();
    swift_bridgeObjectRelease();
    sub_1CA1F0A3C();
    sub_1CA1F11C8();
    __break(1u);
    return;
  }
  v8 = v5 * v4;
  if ((unsigned __int128)(v5 * (__int128)v4) >> 64 != (v5 * v4) >> 63)
    goto LABEL_44;
  v7 = sub_1CA0B4464(v5 * v4, 0.0);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    goto LABEL_47;
  if ((v8 & 0x8000000000000000) != 0)
    goto LABEL_48;
LABEL_33:
  vDSP_vmulD((const double *)(v9 + 32), 1, (const double *)(v6 + 32), 1, (double *)(v7 + 32), 1, v8);
LABEL_34:
  *a3 = v5;
  a3[1] = v4;
  a3[2] = v7;
}

unint64_t * infix(_:_:)@<X0>(uint64_t *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  _QWORD *v6;
  unint64_t result;

  v3 = *a1;
  v4 = a1[1];
  v5 = (_QWORD *)a1[2];
  swift_bridgeObjectRetain();
  v6 = v5;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    v6 = sub_1CA0B6058(v5);
  result = v5[2];
  if (result >> 31)
  {
    __break(1u);
  }
  else
  {
    result = cblas_dscal_NEWLAPACK();
    *a2 = v3;
    a2[1] = v4;
    a2[2] = v6;
  }
  return result;
}

{
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  _QWORD *v6;
  unint64_t result;

  v3 = *a1;
  v4 = a1[1];
  v5 = (_QWORD *)a1[2];
  swift_bridgeObjectRetain();
  v6 = v5;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    v6 = sub_1CA0B6058(v5);
  result = v5[2];
  if (result >> 31)
  {
    __break(1u);
  }
  else
  {
    result = cblas_dscal_NEWLAPACK();
    *a2 = v3;
    a2[1] = v4;
    a2[2] = v6;
  }
  return result;
}

unint64_t / infix(_:_:)@<X0>(uint64_t *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  _QWORD *v6;
  unint64_t result;

  v3 = *a1;
  v4 = a1[1];
  v5 = (_QWORD *)a1[2];
  swift_bridgeObjectRetain();
  v6 = v5;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    v6 = sub_1CA0B6058(v5);
  result = v5[2];
  if (result >> 31)
  {
    __break(1u);
  }
  else
  {
    result = cblas_dscal_NEWLAPACK();
    *a2 = v3;
    a2[1] = v4;
    a2[2] = v6;
  }
  return result;
}

KnowledgeGraphKit::MAMatrix __swiftcall MAMatrix.max(axe:)(KnowledgeGraphKit::MAMatrixAxes axe)
{
  uint64_t *v1;
  Swift::Int v2;
  Swift::Int v3;
  void *v4;
  KnowledgeGraphKit::MAMatrix result;

  v2 = sub_1CA1319FC((_BYTE *)axe, (void (*)(unint64_t, uint64_t, _QWORD *, uint64_t *, uint64_t))MEMORY[0x1E0C8C1D0], v1);
  result.elements._rawValue = v4;
  result.columns = v3;
  result.rows = v2;
  return result;
}

void / infix(_:_:)(int64_t *a1@<X0>, vDSP_Length *a2@<X1>, int64_t *a3@<X8>)
{
  int64_t v4;
  int64_t v5;
  int64_t v6;
  uint64_t v7;
  vDSP_Length v8;
  vDSP_Length v9;
  uint64_t v10;
  vDSP_Length v12;
  double __B[3];

  __B[2] = *(double *)MEMORY[0x1E0C80C00];
  v5 = *a1;
  v4 = a1[1];
  v6 = a1[2];
  v8 = *a2;
  v7 = a2[1];
  v9 = a2[2];
  if (v4 != v7)
  {
    if (v5 == v8 && v7 == 1)
    {
      if ((unsigned __int128)(v5 * (__int128)v4) >> 64 != (v5 * v4) >> 63)
        goto LABEL_40;
      v7 = sub_1CA0B4464(v5 * v4, 0.0);
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        goto LABEL_41;
      if (v5 < 0)
        goto LABEL_42;
      goto LABEL_21;
    }
    goto LABEL_49;
  }
  if (v8 == 1)
  {
    if ((unsigned __int128)(v5 * (__int128)v4) >> 64 != (v5 * v4) >> 63)
      goto LABEL_43;
    v7 = sub_1CA0B4464(v5 * v4, 0.0);
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      goto LABEL_45;
    while ((v4 & 0x8000000000000000) == 0)
    {
      if (!v4)
        goto LABEL_34;
      v8 = 0;
      v10 = 32;
      while (v4 != v8)
      {
        if (v8 >= *(_QWORD *)(v9 + 16))
          goto LABEL_39;
        __B[0] = *(double *)(v9 + 32 + 8 * v8);
        if (v5 < 0)
          goto LABEL_48;
        ++v8;
        vDSP_vsdivD((const double *)(v6 + v10), v4, __B, (double *)(v7 + v10), v4, v5);
        v10 += 8;
        if (v4 == v8)
          goto LABEL_34;
      }
      while (1)
      {
        __break(1u);
LABEL_39:
        __break(1u);
LABEL_40:
        __break(1u);
LABEL_41:
        v7 = (uint64_t)sub_1CA0B6058((_QWORD *)v7);
        if (v5 < 0)
          break;
LABEL_21:
        if (!v5)
          goto LABEL_34;
        v8 = 0;
        v6 += 32;
        while (v5 != v8)
        {
          if (v8 >= *(_QWORD *)(v9 + 16))
            goto LABEL_36;
          __B[0] = *(double *)(v9 + 32 + 8 * v8);
          v12 = v8 * v4;
          if ((unsigned __int128)((uint64_t)v8 * (__int128)v4) >> 64 != (uint64_t)(v8 * v4) >> 63)
            goto LABEL_37;
          if (v4 < 0)
            goto LABEL_48;
          ++v8;
          vDSP_vsdivD((const double *)(v6 + 8 * v12), 1, __B, (double *)(v7 + 32 + 8 * v12), 1, v4);
          if (v5 == v8)
            goto LABEL_34;
        }
        __break(1u);
LABEL_36:
        __break(1u);
LABEL_37:
        __break(1u);
      }
LABEL_42:
      __break(1u);
LABEL_43:
      __break(1u);
LABEL_44:
      __break(1u);
LABEL_45:
      v7 = (uint64_t)sub_1CA0B6058((_QWORD *)v7);
    }
    __break(1u);
LABEL_47:
    v7 = (uint64_t)sub_1CA0B6058((_QWORD *)v7);
    if ((v8 & 0x8000000000000000) != 0)
    {
LABEL_48:
      sub_1CA1F11BC();
      __break(1u);
    }
    goto LABEL_33;
  }
  if (v5 != v8)
  {
LABEL_49:
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    sub_1CA1F1054();
    sub_1CA1F0A3C();
    sub_1CA1F12AC();
    sub_1CA1F0A3C();
    swift_bridgeObjectRelease();
    sub_1CA1F0A3C();
    sub_1CA1F12AC();
    sub_1CA1F0A3C();
    swift_bridgeObjectRelease();
    sub_1CA1F0A3C();
    sub_1CA1F12AC();
    sub_1CA1F0A3C();
    swift_bridgeObjectRelease();
    sub_1CA1F0A3C();
    sub_1CA1F12AC();
    sub_1CA1F0A3C();
    swift_bridgeObjectRelease();
    sub_1CA1F0A3C();
    sub_1CA1F11C8();
    __break(1u);
    return;
  }
  v8 = v5 * v4;
  if ((unsigned __int128)(v5 * (__int128)v4) >> 64 != (v5 * v4) >> 63)
    goto LABEL_44;
  v7 = sub_1CA0B4464(v5 * v4, 0.0);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    goto LABEL_47;
  if ((v8 & 0x8000000000000000) != 0)
    goto LABEL_48;
LABEL_33:
  vDSP_vdivD((const double *)(v9 + 32), 1, (const double *)(v6 + 32), 1, (double *)(v7 + 32), 1, v8);
LABEL_34:
  *a3 = v5;
  a3[1] = v4;
  a3[2] = v7;
}

void - infix(_:_:)(int64_t *a1@<X0>, uint64_t *a2@<X1>, int64_t *a3@<X8>)
{
  int64_t v4;
  int64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v13;
  int64_t v14;
  double __B;
  unint64_t v16;
  uint64_t v17;

  v17 = *MEMORY[0x1E0C80C00];
  v5 = *a1;
  v4 = a1[1];
  v6 = (_QWORD *)a1[2];
  v8 = *a2;
  v7 = (_QWORD *)a2[1];
  v9 = a2[2];
  if ((_QWORD *)v4 != v7)
  {
    if (v5 == v8 && v7 == (_QWORD *)1)
    {
      if ((unsigned __int128)(v5 * (__int128)v4) >> 64 != (v5 * v4) >> 63)
        goto LABEL_39;
      v7 = (_QWORD *)sub_1CA0B4464(v5 * v4, 0.0);
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        goto LABEL_40;
      if (v5 < 0)
        goto LABEL_41;
      goto LABEL_21;
    }
    goto LABEL_48;
  }
  if (v8 != 1)
  {
    if (v5 == v8)
    {
      swift_bridgeObjectRetain();
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        goto LABEL_43;
      goto LABEL_31;
    }
    goto LABEL_48;
  }
  if ((unsigned __int128)(v5 * (__int128)v4) >> 64 != (v5 * v4) >> 63)
    goto LABEL_42;
  v7 = (_QWORD *)sub_1CA0B4464(v5 * v4, 0.0);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    goto LABEL_45;
  if (v4 < 0)
LABEL_46:
    __break(1u);
LABEL_6:
  if (!v4)
    goto LABEL_28;
  v10 = 0;
  v11 = 4;
  while (1)
  {
    if (v4 == v10)
      goto LABEL_37;
    if (v10 >= *(_QWORD *)(v9 + 16))
    {
      while (1)
      {
        __break(1u);
LABEL_39:
        __break(1u);
LABEL_40:
        v7 = sub_1CA0B6058(v7);
        if (v5 < 0)
        {
LABEL_41:
          __break(1u);
LABEL_42:
          __break(1u);
LABEL_43:
          v6 = sub_1CA0B6058(v6);
LABEL_31:
          if (!(*(_QWORD *)(v9 + 16) >> 31))
          {
            cblas_daxpy_NEWLAPACK();
            goto LABEL_33;
          }
          __break(1u);
LABEL_45:
          v7 = sub_1CA0B6058(v7);
          if (v4 < 0)
            goto LABEL_46;
          goto LABEL_6;
        }
LABEL_21:
        if (!v5)
        {
LABEL_28:
          v6 = v7;
LABEL_33:
          *a3 = v5;
          a3[1] = v4;
          a3[2] = (int64_t)v6;
          return;
        }
        v13 = 0;
        v6 += 4;
        while (v5 != v13)
        {
          if (v13 >= *(_QWORD *)(v9 + 16))
            goto LABEL_35;
          __B = -*(double *)(v9 + 32 + 8 * v13);
          v14 = v13 * v4;
          if ((unsigned __int128)((uint64_t)v13 * (__int128)v4) >> 64 != (uint64_t)(v13 * v4) >> 63)
            goto LABEL_36;
          if (v4 < 0)
            goto LABEL_47;
          ++v13;
          vDSP_vsaddD((const double *)&v6[v14], 1, &__B, (double *)&v7[v14 + 4], 1, v4);
          if (v5 == v13)
            goto LABEL_28;
        }
        __break(1u);
LABEL_35:
        __break(1u);
LABEL_36:
        __break(1u);
LABEL_37:
        __break(1u);
      }
    }
    __B = -*(double *)(v9 + 32 + 8 * v10);
    if (v5 < 0)
      break;
    ++v10;
    vDSP_vsaddD((const double *)&v6[v11], v4, &__B, (double *)&v7[v11], v4, v5);
    ++v11;
    if (v4 == v10)
      goto LABEL_28;
  }
LABEL_47:
  sub_1CA1F11BC();
  __break(1u);
LABEL_48:
  __B = 0.0;
  v16 = 0xE000000000000000;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  sub_1CA1F1054();
  swift_bridgeObjectRelease();
  __B = -2.31584178e77;
  v16 = 0x80000001CA2083F0;
  sub_1CA1F12AC();
  sub_1CA1F0A3C();
  swift_bridgeObjectRelease();
  sub_1CA1F0A3C();
  sub_1CA1F12AC();
  sub_1CA1F0A3C();
  swift_bridgeObjectRelease();
  sub_1CA1F0A3C();
  sub_1CA1F12AC();
  sub_1CA1F0A3C();
  swift_bridgeObjectRelease();
  sub_1CA1F0A3C();
  sub_1CA1F12AC();
  sub_1CA1F0A3C();
  swift_bridgeObjectRelease();
  sub_1CA1F0A3C();
  sub_1CA1F11C8();
  __break(1u);
}

Swift::Void __swiftcall MAMatrix.abs()()
{
  sub_1CA1330F4((uint64_t (*)(_QWORD *, _QWORD *, int *))MEMORY[0x1E0C8D9F0]);
}

uint64_t MAMatrix.subscript.getter@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t *v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v6;
  uint64_t v7;
  int64_t v8;
  uint64_t result;
  uint64_t v10;
  uint64_t v11;

  v6 = *v2;
  v7 = *(_QWORD *)(a1 + 16);
  v8 = *v2 * v7;
  if ((unsigned __int128)(*v2 * (__int128)v7) >> 64 == v8 >> 63)
  {
    v3 = v2[1];
    v4 = (_QWORD *)sub_1CA0B4464(v8, 0.0);
    result = swift_isUniquelyReferenced_nonNull_native();
    if ((result & 1) != 0)
    {
      if (v7)
        goto LABEL_4;
LABEL_12:
      *a2 = v6;
      a2[1] = v7;
      a2[2] = (uint64_t)v4;
      return result;
    }
  }
  else
  {
    __break(1u);
  }
  result = (uint64_t)sub_1CA0B6058(v4);
  v4 = (_QWORD *)result;
  if (!v7)
    goto LABEL_12;
LABEL_4:
  if (v6 > 0x7FFFFFFF)
  {
    __break(1u);
    goto LABEL_17;
  }
  if (v3 > 0x7FFFFFFF)
  {
LABEL_17:
    __break(1u);
LABEL_18:
    __break(1u);
    goto LABEL_19;
  }
  if (v6 < (uint64_t)0xFFFFFFFF80000000 || v3 < (uint64_t)0xFFFFFFFF80000000)
    goto LABEL_18;
  if (!((unint64_t)v7 >> 31))
  {
    swift_bridgeObjectRetain();
    v10 = 32;
    v11 = v7;
    do
    {
      cblas_dcopy_NEWLAPACK();
      v10 += 8;
      --v11;
    }
    while (v11);
    result = swift_bridgeObjectRelease();
    goto LABEL_12;
  }
LABEL_19:
  __break(1u);
  return result;
}

Swift::Double __swiftcall MAMatrix.sum()()
{
  Swift::Double result;

  sub_1CA134504((uint64_t (*)(uint64_t, uint64_t, _QWORD *))MEMORY[0x1E0C8C2F8]);
  return result;
}

Swift::Double __swiftcall MAMatrix.mean()()
{
  Swift::Double result;

  sub_1CA134504((uint64_t (*)(uint64_t, uint64_t, _QWORD *))MEMORY[0x1E0C8C1F0]);
  return result;
}

Swift::Double __swiftcall MAMatrix.median()()
{
  uint64_t v0;
  unint64_t v1;
  uint64_t v2;
  double v3;
  double v4;
  double v5;
  unint64_t v6;
  Swift::Double result;
  uint64_t v8;

  if (!*(_QWORD *)(*(_QWORD *)(v0 + 16) + 16))
    return 0.0;
  v8 = *(_QWORD *)(v0 + 16);
  swift_bridgeObjectRetain_n();
  sub_1CA1290F4(&v8, sub_1CA13B48C, sub_1CA139304);
  swift_bridgeObjectRelease();
  v1 = *(_QWORD *)(v8 + 16);
  if ((v1 & 1) != 0)
  {
    v6 = (v1 - 1) >> 1;
    if (v6 < v1)
    {
      v5 = *(double *)(v8 + 8 * v6 + 32);
      swift_release();
      return v5;
    }
    goto LABEL_11;
  }
  if (v1 >> 1 >= v1)
  {
    __break(1u);
LABEL_11:
    __break(1u);
    goto LABEL_12;
  }
  if (v1 >= 2)
  {
    v2 = v8 + 8 * (v1 >> 1);
    v4 = *(double *)(v2 + 24);
    v3 = *(double *)(v2 + 32);
    swift_release();
    return (v3 + v4) * 0.5;
  }
LABEL_12:
  __break(1u);
  swift_release();
  __break(1u);
  return result;
}

Swift::tuple_mean_Double_deviation_Double __swiftcall MAMatrix.pstddev()()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  vDSP_Length v4;
  double v5;
  double v6;
  Swift::tuple_mean_Double_deviation_Double result;
  double __StandardDeviation;
  double __Mean[2];

  __Mean[1] = *(double *)MEMORY[0x1E0C80C00];
  v1 = *v0;
  v2 = v0[1];
  v3 = v0[2];
  __Mean[0] = 0.0;
  __StandardDeviation = 0.0;
  v4 = v1 * v2;
  if ((unsigned __int128)(v1 * (__int128)v2) >> 64 != (v1 * v2) >> 63)
    __break(1u);
  if ((v4 & 0x8000000000000000) != 0)
  {
    sub_1CA1F11BC();
    __break(1u);
  }
  else
  {
    vDSP_normalizeD((const double *)(v3 + 32), 1, 0, 1, __Mean, &__StandardDeviation, v4);
    v5 = __Mean[0];
    v6 = __StandardDeviation;
  }
  result.deviation = v6;
  result.mean = v5;
  return result;
}

uint64_t MAMatrix.frequencies()()
{
  uint64_t v0;
  uint64_t v1;
  int64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v13;

  v1 = *(_QWORD *)(v0 + 16);
  v2 = *(_QWORD *)(v1 + 16);
  v3 = MEMORY[0x1E0DEE9D8];
  if (v2)
  {
    v13 = MEMORY[0x1E0DEE9D8];
    swift_bridgeObjectRetain();
    sub_1CA0CD5EC(0, v2, 0);
    v4 = 0;
    v3 = v13;
    v5 = *(_QWORD *)(v13 + 16);
    v6 = 16 * v5;
    do
    {
      v7 = *(_QWORD *)(v1 + 32 + 8 * v4);
      v13 = v3;
      v8 = *(_QWORD *)(v3 + 24);
      v9 = v5 + v4 + 1;
      if (v5 + v4 >= v8 >> 1)
      {
        sub_1CA0CD5EC(v8 > 1, v5 + v4 + 1, 1);
        v3 = v13;
      }
      ++v4;
      *(_QWORD *)(v3 + 16) = v9;
      v10 = v3 + v6;
      *(_QWORD *)(v10 + 32) = v7;
      *(_QWORD *)(v10 + 40) = 1;
      v6 += 16;
    }
    while (v2 != v4);
    swift_bridgeObjectRelease();
  }
  if (*(_QWORD *)(v3 + 16))
  {
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_1EF938480);
    v11 = sub_1CA1F1264();
  }
  else
  {
    v11 = MEMORY[0x1E0DEE9E0];
  }
  v13 = v11;
  sub_1CA13CAF8((double *)v3, 1, &v13);
  swift_bridgeObjectRelease();
  return v13;
}

Swift::tuple_value_Double_index_Int __swiftcall MAMatrix.min()()
{
  Swift::Int v0;
  double v1;
  Swift::tuple_value_Double_index_Int result;

  v0 = sub_1CA12AAE0((void (*)(uint64_t, uint64_t, _QWORD *, uint64_t *))MEMORY[0x1E0C8C240]);
  result.value = v1;
  result.index = v0;
  return result;
}

uint64_t MAMatrix.indices(of:)(double a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  double v11;
  int64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;

  v2 = *(_QWORD *)(v1 + 16);
  v3 = *(_QWORD *)(v2 + 16);
  v4 = MEMORY[0x1E0DEE9D8];
  if (v3)
  {
    swift_bridgeObjectRetain();
    v6 = 0;
    v7 = MEMORY[0x1E0DEE9D8];
    do
    {
      v11 = *(double *)(v2 + 8 * v6 + 32);
      if (v11 == a1)
      {
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
          sub_1CA0CD550(0, *(_QWORD *)(v7 + 16) + 1, 1);
        v9 = *(_QWORD *)(v7 + 16);
        v8 = *(_QWORD *)(v7 + 24);
        if (v9 >= v8 >> 1)
          sub_1CA0CD550(v8 > 1, v9 + 1, 1);
        *(_QWORD *)(v7 + 16) = v9 + 1;
        v10 = v7 + 16 * v9;
        *(_QWORD *)(v10 + 32) = v6;
        *(double *)(v10 + 40) = v11;
      }
      ++v6;
    }
    while (v3 != v6);
    swift_bridgeObjectRelease();
    v12 = *(_QWORD *)(v7 + 16);
    if (v12)
      goto LABEL_11;
LABEL_17:
    swift_release();
    return MEMORY[0x1E0DEE9D8];
  }
  v7 = MEMORY[0x1E0DEE9D8];
  v12 = *(_QWORD *)(MEMORY[0x1E0DEE9D8] + 16);
  if (!v12)
    goto LABEL_17;
LABEL_11:
  sub_1CA0CD534(0, v12, 0);
  v13 = v4;
  v14 = *(_QWORD *)(v4 + 16);
  v15 = 32;
  do
  {
    v16 = *(_QWORD *)(v7 + v15);
    v17 = *(_QWORD *)(v13 + 24);
    if (v14 >= v17 >> 1)
      sub_1CA0CD534(v17 > 1, v14 + 1, 1);
    *(_QWORD *)(v13 + 16) = v14 + 1;
    *(_QWORD *)(v13 + 8 * v14 + 32) = v16;
    v15 += 16;
    ++v14;
    --v12;
  }
  while (v12);
  swift_release();
  return v13;
}

Swift::tuple_value_Double_index_Int __swiftcall MAMatrix.max()()
{
  Swift::Int v0;
  double v1;
  Swift::tuple_value_Double_index_Int result;

  v0 = sub_1CA12AAE0((void (*)(uint64_t, uint64_t, _QWORD *, uint64_t *))MEMORY[0x1E0C8C1D0]);
  result.value = v1;
  result.index = v0;
  return result;
}

uint64_t sub_1CA12AAE0(void (*a1)(uint64_t, uint64_t, _QWORD *, uint64_t *))
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t result;
  uint64_t v6;
  _QWORD v7[2];

  v7[1] = *MEMORY[0x1E0C80C00];
  v2 = *v1;
  v3 = v1[1];
  v4 = v1[2];
  v7[0] = 0;
  v6 = 0;
  if ((unsigned __int128)(v2 * (__int128)v3) >> 64 != (v2 * v3) >> 63)
  {
    __break(1u);
    goto LABEL_6;
  }
  if (v2 * v3 < 0)
  {
    result = sub_1CA1F11BC();
    __break(1u);
    return result;
  }
  a1(v4 + 32, 1, v7, &v6);
  result = v6;
  if (v6 < 0)
LABEL_6:
    __break(1u);
  return result;
}

uint64_t MAMatrix.size.getter()
{
  uint64_t v0;

  return *(_QWORD *)v0;
}

Swift::String __swiftcall MAMatrix.description(integerPrecision:doublePrecision:)(Swift::Int integerPrecision, Swift::Int doublePrecision)
{
  uint64_t *v2;
  int64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  Swift::String result;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;

  v4 = *v2;
  v3 = v2[1];
  v19 = v2[2];
  if (*v2 < 0)
    goto LABEL_23;
  if (v4)
  {
    if (v3 < 0)
    {
LABEL_24:
      __break(1u);
      goto LABEL_25;
    }
    v5 = 0;
    v6 = 0;
    v7 = v19 + 32;
    v17 = *v2;
    while (v6 != v4)
    {
      v18 = v6;
      if (v3)
      {
        v20 = MEMORY[0x1E0DEE9D8];
        integerPrecision = sub_1CA0CD4EC(0, v3, 0);
        if ((unsigned __int128)(v6 * (__int128)v3) >> 64 != (v6 * v3) >> 63)
          goto LABEL_22;
        v8 = 0;
        while (1)
        {
          sub_1CA1F12AC();
          sub_1CA1F0A3C();
          swift_bridgeObjectRelease();
          sub_1CA1F0A3C();
          sub_1CA1F12AC();
          sub_1CA1F0A3C();
          swift_bridgeObjectRelease();
          sub_1CA1F0A3C();
          __swift_instantiateConcreteTypeFromMangledName(&qword_1EF93A1D8);
          integerPrecision = swift_allocObject();
          *(_OWORD *)(integerPrecision + 16) = xmmword_1CA1F9100;
          if (v5 < 0)
            break;
          if ((unint64_t)(v5 + v8) >= *(_QWORD *)(v19 + 16))
            goto LABEL_20;
          v9 = *(_QWORD *)(v7 + 8 * v8);
          *(_QWORD *)(integerPrecision + 56) = MEMORY[0x1E0DEB070];
          *(_QWORD *)(integerPrecision + 64) = MEMORY[0x1E0DEB100];
          *(_QWORD *)(integerPrecision + 32) = v9;
          v10 = sub_1CA1F0A18();
          v12 = v11;
          swift_bridgeObjectRelease();
          v14 = *(_QWORD *)(v20 + 16);
          v13 = *(_QWORD *)(v20 + 24);
          if (v14 >= v13 >> 1)
            sub_1CA0CD4EC(v13 > 1, v14 + 1, 1);
          ++v8;
          *(_QWORD *)(v20 + 16) = v14 + 1;
          v15 = v20 + 16 * v14;
          *(_QWORD *)(v15 + 32) = v10;
          *(_QWORD *)(v15 + 40) = v12;
          if (v3 == v8)
          {
            v4 = v17;
            goto LABEL_16;
          }
        }
        __break(1u);
LABEL_20:
        __break(1u);
        break;
      }
LABEL_16:
      __swift_instantiateConcreteTypeFromMangledName(&qword_1EF93A1E0);
      sub_1CA102CA8((unint64_t *)&qword_1EF93A1E8, &qword_1EF93A1E0, MEMORY[0x1E0DEAF20]);
      sub_1CA1F0970();
      swift_bridgeObjectRelease();
      sub_1CA1F0A3C();
      swift_bridgeObjectRelease();
      sub_1CA1F0A3C();
      sub_1CA1F0A3C();
      ++v6;
      integerPrecision = swift_bridgeObjectRelease();
      v5 += v3;
      v7 += 8 * v3;
      if (v18 + 1 == v4)
      {
        integerPrecision = 0;
        doublePrecision = 0xE000000000000000;
        goto LABEL_25;
      }
    }
    __break(1u);
LABEL_22:
    __break(1u);
LABEL_23:
    __break(1u);
    goto LABEL_24;
  }
  integerPrecision = 0;
  doublePrecision = 0xE000000000000000;
LABEL_25:
  result._object = (void *)doublePrecision;
  result._countAndFlagsBits = integerPrecision;
  return result;
}

KnowledgeGraphKit::MAMatrix __swiftcall MAMatrix.mean(axe:)(KnowledgeGraphKit::MAMatrixAxes axe)
{
  _BYTE *v1;
  Swift::Int v2;
  void *v3;
  KnowledgeGraphKit::MAMatrix result;

  v1 = sub_1CA134DE0((_BYTE *)axe, (uint64_t (*)(_QWORD, uint64_t, char *))MAMatrix.mean(range:axe:));
  result.elements._rawValue = v3;
  result.columns = v2;
  result.rows = (Swift::Int)v1;
  return result;
}

KnowledgeGraphKit::MAMatrix __swiftcall MAMatrix.median(axe:)(KnowledgeGraphKit::MAMatrixAxes axe)
{
  _BYTE *v1;
  Swift::Int v2;
  void *v3;
  KnowledgeGraphKit::MAMatrix result;

  v1 = sub_1CA134DE0((_BYTE *)axe, (uint64_t (*)(_QWORD, uint64_t, char *))MAMatrix.median(range:axe:));
  result.elements._rawValue = v3;
  result.columns = v2;
  result.rows = (Swift::Int)v1;
  return result;
}

void + infix(_:_:)(int64_t *a1@<X0>, uint64_t *a2@<X1>, int64_t *a3@<X8>)
{
  int64_t v4;
  int64_t v5;
  int64_t v6;
  _QWORD *v7;
  uint64_t v8;
  _QWORD *v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v13;
  int64_t v14;
  double __B;
  unint64_t v16;
  uint64_t v17;

  v17 = *MEMORY[0x1E0C80C00];
  v5 = *a1;
  v4 = a1[1];
  v6 = a1[2];
  v8 = *a2;
  v7 = (_QWORD *)a2[1];
  v9 = (_QWORD *)a2[2];
  if ((_QWORD *)v4 != v7)
  {
    if (v5 == v8 && v7 == (_QWORD *)1)
    {
      if ((unsigned __int128)(v5 * (__int128)v4) >> 64 != (v5 * v4) >> 63)
        goto LABEL_39;
      v7 = (_QWORD *)sub_1CA0B4464(v5 * v4, 0.0);
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        goto LABEL_40;
      if (v5 < 0)
        goto LABEL_41;
      goto LABEL_21;
    }
    goto LABEL_48;
  }
  if (v8 != 1)
  {
    if (v5 == v8)
    {
      swift_bridgeObjectRetain();
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        goto LABEL_43;
      goto LABEL_31;
    }
    goto LABEL_48;
  }
  if ((unsigned __int128)(v5 * (__int128)v4) >> 64 != (v5 * v4) >> 63)
    goto LABEL_42;
  v7 = (_QWORD *)sub_1CA0B4464(v5 * v4, 0.0);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    goto LABEL_45;
  if (v4 < 0)
LABEL_46:
    __break(1u);
LABEL_6:
  if (!v4)
    goto LABEL_28;
  v10 = 0;
  v11 = 4;
  while (1)
  {
    if (v4 == v10)
      goto LABEL_37;
    if (v10 >= v9[2])
    {
      while (1)
      {
        __break(1u);
LABEL_39:
        __break(1u);
LABEL_40:
        v7 = sub_1CA0B6058(v7);
        if (v5 < 0)
        {
LABEL_41:
          __break(1u);
LABEL_42:
          __break(1u);
LABEL_43:
          v9 = sub_1CA0B6058(v9);
LABEL_31:
          if (!(*(_QWORD *)(v6 + 16) >> 31))
          {
            cblas_daxpy_NEWLAPACK();
            goto LABEL_33;
          }
          __break(1u);
LABEL_45:
          v7 = sub_1CA0B6058(v7);
          if (v4 < 0)
            goto LABEL_46;
          goto LABEL_6;
        }
LABEL_21:
        if (!v5)
        {
LABEL_28:
          v9 = v7;
LABEL_33:
          *a3 = v5;
          a3[1] = v4;
          a3[2] = (int64_t)v9;
          return;
        }
        v13 = 0;
        v6 += 32;
        while (v5 != v13)
        {
          if (v13 >= v9[2])
            goto LABEL_35;
          __B = *(double *)&v9[v13 + 4];
          v14 = v13 * v4;
          if ((unsigned __int128)((uint64_t)v13 * (__int128)v4) >> 64 != (uint64_t)(v13 * v4) >> 63)
            goto LABEL_36;
          if (v4 < 0)
            goto LABEL_47;
          ++v13;
          vDSP_vsaddD((const double *)(v6 + 8 * v14), 1, &__B, (double *)&v7[v14 + 4], 1, v4);
          if (v5 == v13)
            goto LABEL_28;
        }
        __break(1u);
LABEL_35:
        __break(1u);
LABEL_36:
        __break(1u);
LABEL_37:
        __break(1u);
      }
    }
    __B = *(double *)&v9[v10 + 4];
    if (v5 < 0)
      break;
    ++v10;
    vDSP_vsaddD((const double *)(v6 + v11 * 8), v4, &__B, (double *)&v7[v11], v4, v5);
    ++v11;
    if (v4 == v10)
      goto LABEL_28;
  }
LABEL_47:
  sub_1CA1F11BC();
  __break(1u);
LABEL_48:
  __B = 0.0;
  v16 = 0xE000000000000000;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  sub_1CA1F1054();
  swift_bridgeObjectRelease();
  __B = 7.22937896e159;
  v16 = 0xEB00000000206464;
  sub_1CA1F12AC();
  sub_1CA1F0A3C();
  swift_bridgeObjectRelease();
  sub_1CA1F0A3C();
  sub_1CA1F12AC();
  sub_1CA1F0A3C();
  swift_bridgeObjectRelease();
  sub_1CA1F0A3C();
  sub_1CA1F12AC();
  sub_1CA1F0A3C();
  swift_bridgeObjectRelease();
  sub_1CA1F0A3C();
  sub_1CA1F12AC();
  sub_1CA1F0A3C();
  swift_bridgeObjectRelease();
  sub_1CA1F0A3C();
  sub_1CA1F11C8();
  __break(1u);
}

void static MAMatrix.zeros(rows:columns:)(uint64_t a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  uint64_t v4;
  uint64_t v7;

  v4 = a1 * a2;
  if ((unsigned __int128)(a1 * (__int128)a2) >> 64 != (a1 * a2) >> 63)
  {
    __break(1u);
    goto LABEL_8;
  }
  if (v4 < 0)
  {
LABEL_8:
    sub_1CA1F11BC();
    __break(1u);
    return;
  }
  if (v4)
  {
    v7 = sub_1CA1F0B68();
    *(_QWORD *)(v7 + 16) = v4;
    bzero((void *)(v7 + 32), 8 * v4);
  }
  else
  {
    v7 = MEMORY[0x1E0DEE9D8];
  }
  *a3 = a1;
  a3[1] = a2;
  a3[2] = v7;
}

Swift::Double __swiftcall MAMatrix.distance(row:column:distance:)(Swift::Int row, Swift::Int column, KnowledgeGraphKit::MAMatrixDistances distance)
{
  Swift::Double result;

  sub_1CA12B598(row, column, (_BYTE *)distance, (uint64_t (*)(void))MAMatrix.cosineSimilarity(row:column:), (uint64_t (*)(void))MAMatrix.euclideanDistance(row:column:), (uint64_t (*)(void))MAMatrix.manhattanDistance(row:column:));
  return result;
}

Swift::tuple_row_Int_column_Int __swiftcall MAMatrix.position(index:)(Swift::Int index)
{
  uint64_t v1;
  uint64_t v2;
  Swift::Int v3;
  Swift::tuple_row_Int_column_Int result;

  v2 = *(_QWORD *)(v1 + 8);
  if (!v2)
  {
    __break(1u);
LABEL_6:
    __break(1u);
    goto LABEL_7;
  }
  if (index == 0x8000000000000000 && v2 == -1)
    goto LABEL_6;
  v3 = index % v2;
  index /= v2;
LABEL_7:
  result.column = v3;
  result.row = index;
  return result;
}

Swift::Double __swiftcall MAMatrix.distance(columnA:columnB:distance:)(Swift::Int columnA, Swift::Int columnB, KnowledgeGraphKit::MAMatrixDistances distance)
{
  Swift::Double result;

  sub_1CA12B598(columnA, columnB, (_BYTE *)distance, (uint64_t (*)(void))MAMatrix.cosineSimilarity(columnA:columnB:), (uint64_t (*)(void))MAMatrix.euclideanDistance(columnA:columnB:), (uint64_t (*)(void))MAMatrix.manhattanDistance(columnA:columnB:));
  return result;
}

Swift::Double __swiftcall MAMatrix.distance(rowA:rowB:distance:)(Swift::Int rowA, Swift::Int rowB, KnowledgeGraphKit::MAMatrixDistances distance)
{
  Swift::Double result;

  sub_1CA12B598(rowA, rowB, (_BYTE *)distance, (uint64_t (*)(void))MAMatrix.cosineSimilarity(rowA:rowB:), (uint64_t (*)(void))MAMatrix.euclideanDistance(rowA:rowB:), (uint64_t (*)(void))MAMatrix.manhattanDistance(rowA:rowB:));
  return result;
}

uint64_t sub_1CA12B598(uint64_t a1, uint64_t a2, _BYTE *a3, uint64_t (*a4)(void), uint64_t (*a5)(void), uint64_t (*a6)(void))
{
  if (!*a3)
    return a4();
  if (*a3 == 1)
    return a5();
  return a6();
}

Swift::Double __swiftcall MAMatrix.asum()()
{
  Swift::Double result;

  sub_1CA133490(MEMORY[0x1E0C8BB10]);
  return result;
}

void ⋅ infix(_:_:)(uint64_t *a1, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  vDSP_Length v7;
  double __C[2];

  __C[1] = *(double *)MEMORY[0x1E0C80C00];
  v2 = *a1;
  v3 = a1[1];
  v4 = a1[2];
  v5 = a2[2];
  if (v3 != 1 && v2 != 1)
    goto LABEL_12;
  if (a2[1] != 1 && *a2 != 1)
LABEL_13:
    __break(1u);
  __C[0] = 0.0;
  v7 = v2 * v3;
  if ((unsigned __int128)(v2 * (__int128)v3) >> 64 != (v2 * v3) >> 63)
  {
    __break(1u);
LABEL_12:
    __break(1u);
    goto LABEL_13;
  }
  if ((v7 & 0x8000000000000000) != 0)
  {
    sub_1CA1F11BC();
    __break(1u);
  }
  else
  {
    vDSP_dotprD((const double *)(v4 + 32), 1, (const double *)(v5 + 32), 1, __C, v7);
  }
}

uint64_t static MAMatrix.laplacian(degree:adjacency:)@<X0>(uint64_t *a1@<X0>, _QWORD *a2@<X1>, _QWORD *a3@<X8>)
{
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  double *v8;
  vDSP_Length v9;
  uint64_t result;

  v6 = *a1;
  v5 = a1[1];
  if (*a1 == *a2 && v5 == a2[1])
  {
    v3 = a2[2];
    swift_bridgeObjectRetain();
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) != 0)
    {
      v8 = (double *)v3;
      goto LABEL_8;
    }
  }
  else
  {
    __break(1u);
  }
  v8 = (double *)sub_1CA0B6058((_QWORD *)v3);
LABEL_8:
  v9 = v6 * v5;
  if ((unsigned __int128)(v6 * (__int128)v5) >> 64 != (v6 * v5) >> 63)
  {
    __break(1u);
LABEL_17:
    v8 = (double *)sub_1CA0B6058(v8);
LABEL_11:
    if (v5 < (uint64_t)0xFFFFFFFF80000000)
    {
      __break(1u);
    }
    else if (v5 <= 0x7FFFFFFF)
    {
      if (!__OFADD__((_DWORD)v5, 1))
      {
        result = cblas_dcopy_NEWLAPACK();
        *a3 = v6;
        a3[1] = v5;
        a3[2] = v8;
        return result;
      }
      goto LABEL_20;
    }
    __break(1u);
LABEL_20:
    __break(1u);
    goto LABEL_21;
  }
  if ((v9 & 0x8000000000000000) == 0)
  {
    vDSP_vnegD((const double *)(v3 + 32), 1, v8 + 4, 1, v9);
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) != 0)
      goto LABEL_11;
    goto LABEL_17;
  }
LABEL_21:
  result = sub_1CA1F11BC();
  __break(1u);
  return result;
}

uint64_t static MAMatrix.normalizedLaplacian(degree:adjacency:)@<X0>(uint64_t *a1@<X0>, _QWORD *a2@<X1>, _QWORD *a3@<X8>)
{
  _QWORD *v3;
  _QWORD *v4;
  int64_t v6;
  uint64_t v7;
  double *v9;
  vDSP_Length v10;
  uint64_t v11;
  int64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t *v15;
  unint64_t v16;
  uint64_t v17;
  int64x2_t v18;
  int64x2_t *v19;
  unint64_t v20;
  unint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  int64_t v24;
  BOOL v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t *v30;
  unint64_t v31;
  int64x2_t v32;
  int64x2_t *v33;
  unint64_t v34;
  unint64_t v35;
  int64_t v36;
  int64_t v37;
  int64_t v38;
  uint64_t v39;
  uint64_t result;
  double *v41;
  _QWORD *v42;
  uint64_t v43;
  uint64_t v44;
  vDSP_Length v45[3];
  int v46[2];
  int64_t v47;
  _QWORD *v48;
  int64_t v49;
  int64_t v50;
  uint64_t v51;
  __int128 v52;
  double *v53;
  uint64_t v54;
  KnowledgeGraphKit::MAMatrix v55;

  v54 = *MEMORY[0x1E0C80C00];
  v7 = *a1;
  v6 = a1[1];
  if (*a1 == *a2 && v6 == a2[1])
  {
    v3 = (_QWORD *)a1[2];
    v4 = (_QWORD *)a2[2];
    swift_bridgeObjectRetain();
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      goto LABEL_76;
    v9 = (double *)v4;
    goto LABEL_8;
  }
LABEL_75:
  __break(1u);
LABEL_76:
  v9 = (double *)sub_1CA0B6058(v4);
LABEL_8:
  v10 = v7 * v6;
  if ((unsigned __int128)(v7 * (__int128)v6) >> 64 != (v7 * v6) >> 63)
  {
    __break(1u);
LABEL_78:
    __break(1u);
    goto LABEL_79;
  }
  if ((v10 & 0x8000000000000000) != 0)
    goto LABEL_85;
  vDSP_vnegD((const double *)v4 + 4, 1, v9 + 4, 1, v10);
  *(_QWORD *)&v52 = v7;
  *((_QWORD *)&v52 + 1) = v6;
  v53 = v9;
  if (v7 < 0)
    goto LABEL_78;
  v42 = a3;
  if (!v7)
    goto LABEL_33;
  a3 = v3 + 4;
  swift_bridgeObjectRetain_n();
  v11 = 0;
  v4 = v3;
  while (1)
  {
    v12 = v11 * v6;
    if ((unsigned __int128)(v11 * (__int128)v6) >> 64 != (v11 * v6) >> 63)
    {
      __break(1u);
LABEL_65:
      __break(1u);
LABEL_66:
      __break(1u);
LABEL_67:
      __break(1u);
LABEL_68:
      __break(1u);
LABEL_69:
      __break(1u);
LABEL_70:
      __break(1u);
LABEL_71:
      __break(1u);
LABEL_72:
      __break(1u);
LABEL_73:
      __break(1u);
LABEL_74:
      __break(1u);
      goto LABEL_75;
    }
    v13 = v12 + v11;
    if (__OFADD__(v12, v11))
      goto LABEL_65;
    if ((v13 & 0x8000000000000000) != 0)
      goto LABEL_66;
    if (v13 >= v3[2])
      goto LABEL_67;
    if (v6 < 0)
      break;
    if (!v6)
      goto LABEL_27;
    v43 = a3[v13];
    v14 = sub_1CA1F0B68();
    *(_QWORD *)(v14 + 16) = v6;
    v15 = (uint64_t *)(v14 + 32);
    if ((unint64_t)v6 < 4)
    {
      v16 = 0;
      v17 = v43;
LABEL_25:
      v21 = v6 - v16;
      do
      {
        *v15++ = v17;
        --v21;
      }
      while (v21);
      goto LABEL_27;
    }
    v15 += v6 & 0xFFFFFFFFFFFFFFFCLL;
    v17 = v43;
    v18 = vdupq_lane_s64(v43, 0);
    v19 = (int64x2_t *)(v14 + 48);
    v20 = v6 & 0xFFFFFFFFFFFFFFFCLL;
    do
    {
      v19[-1] = v18;
      *v19 = v18;
      v19 += 2;
      v20 -= 4;
    }
    while (v20);
    v16 = v6 & 0xFFFFFFFFFFFFFFFCLL;
    if (v6 != (v6 & 0xFFFFFFFFFFFFFFFCLL))
      goto LABEL_25;
LABEL_27:
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) != 0)
    {
      if (v6 > 0x7FFFFFFF)
        goto LABEL_32;
      goto LABEL_29;
    }
    v4 = sub_1CA0B6058(v4);
    if (v6 > 0x7FFFFFFF)
    {
LABEL_32:
      __break(1u);
LABEL_33:
      swift_bridgeObjectRetain_n();
      v4 = v3;
LABEL_34:
      if ((v6 & 0x8000000000000000) == 0)
      {
        if (v6)
        {
          v22 = 0;
          v23 = v3;
          while (1)
          {
            v24 = v22 * v6;
            if ((unsigned __int128)(v22 * (__int128)v6) >> 64 != (v22 * v6) >> 63)
              goto LABEL_68;
            v25 = __OFADD__(v24, v22);
            v26 = v24 + v22;
            if (v25)
              goto LABEL_69;
            if ((v26 & 0x8000000000000000) != 0)
              goto LABEL_70;
            if (v26 >= v3[2])
              goto LABEL_71;
            v27 = v3[v26 + 4];
            if (v7 < 1)
            {
              v29 = MEMORY[0x1E0DEE9D8];
              if (!v7)
                goto LABEL_51;
            }
            else
            {
              v44 = v3[v26 + 4];
              v28 = sub_1CA1F0B68();
              v27 = v44;
              v29 = v28;
              *(_QWORD *)(v28 + 16) = v7;
            }
            v30 = (uint64_t *)(v29 + 32);
            if ((unint64_t)v7 >= 4)
            {
              v30 += v7 & 0xFFFFFFFFFFFFFFFCLL;
              v32 = vdupq_lane_s64(v27, 0);
              v33 = (int64x2_t *)(v29 + 48);
              v34 = v7 & 0xFFFFFFFFFFFFFFFCLL;
              do
              {
                v33[-1] = v32;
                *v33 = v32;
                v33 += 2;
                v34 -= 4;
              }
              while (v34);
              v31 = v7 & 0xFFFFFFFFFFFFFFFCLL;
              if (v7 == (v7 & 0xFFFFFFFFFFFFFFFCLL))
                goto LABEL_51;
            }
            else
            {
              v31 = 0;
            }
            v35 = v7 - v31;
            do
            {
              *v30++ = v27;
              --v35;
            }
            while (v35);
LABEL_51:
            if (v22 == v6)
              goto LABEL_72;
            if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
              v23 = sub_1CA0B6058(v23);
            if (v7 > 0x7FFFFFFF)
              goto LABEL_73;
            if ((unint64_t)v6 >> 31)
              goto LABEL_74;
            cblas_dcopy_NEWLAPACK();
            swift_bridgeObjectRelease();
            a3 = (_QWORD *)++v22;
            if (v22 == v6)
              goto LABEL_59;
          }
        }
        v23 = v3;
LABEL_59:
        *(_QWORD *)v46 = v7;
        v47 = v6;
        v48 = v4;
        v45[0] = v7;
        v45[1] = v6;
        v45[2] = (vDSP_Length)v23;
        * infix(_:_:)((int64_t *)v46, v45, &v49);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        v7 = v51;
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) != 0)
        {
LABEL_60:
          v36 = v49;
          v37 = v50;
          v38 = v49 * v50;
          if ((unsigned __int128)(v49 * (__int128)v50) >> 64 == (v49 * v50) >> 63)
          {
            if (v38 >= (uint64_t)0xFFFFFFFF80000000)
            {
              if (v38 <= 0x7FFFFFFF)
              {
                v46[0] = v49 * v50;
                vvsqrt((double *)(v7 + 32), (const double *)(v7 + 32), v46);
                *(_QWORD *)v46 = v36;
                v47 = v37;
                v48 = (_QWORD *)v7;
                /= infix(_:_:)((vDSP_Length *)&v52, (uint64_t)v46);
                swift_bridgeObjectRelease();
                v39 = sub_1CA0B4464(v6, 1.0);
                *(_QWORD *)v46 = 1;
                v47 = v6;
                v48 = (_QWORD *)v39;
                v55.rows = (Swift::Int)v46;
                MAMatrix.setDiag(vector:)(v55);
                result = swift_bridgeObjectRelease();
                v41 = v53;
                *(_OWORD *)v42 = v52;
                v42[2] = v41;
                return result;
              }
LABEL_83:
              __break(1u);
            }
          }
          else
          {
            __break(1u);
          }
          __break(1u);
          goto LABEL_83;
        }
LABEL_80:
        v7 = (uint64_t)sub_1CA0B6058((_QWORD *)v7);
        v51 = v7;
        goto LABEL_60;
      }
LABEL_79:
      __break(1u);
      goto LABEL_80;
    }
LABEL_29:
    ++v11;
    cblas_dcopy_NEWLAPACK();
    swift_bridgeObjectRelease();
    if (v11 == v7)
      goto LABEL_34;
  }
  sub_1CA1F11BC();
  __break(1u);
LABEL_85:
  result = sub_1CA1F11BC();
  __break(1u);
  return result;
}

void __swiftcall MAMatrix.svd()(Swift::tuple_U_KnowledgeGraphKit_MAMatrix_W_KnowledgeGraphKit_MAMatrix_V_KnowledgeGraphKit_MAMatrix *__return_ptr retstr)
{
  _QWORD *v1;
  uint64_t v2;
  vDSP_Length *v3;
  _QWORD *v4;
  uint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  vDSP_Length v8;
  vDSP_Length v9;
  int64_t v10;
  id v11;
  id v12;
  int v13;
  _QWORD *v14;
  _QWORD *v15;
  _QWORD *v16;
  _QWORD *v17;
  int v18;
  double v19;

  v9 = *v3;
  v8 = v3[1];
  v10 = v8 * *v3;
  if ((unsigned __int128)((uint64_t)v8 * (__int128)(uint64_t)*v3) >> 64 != v10 >> 63)
  {
    __break(1u);
LABEL_39:
    v5 = (uint64_t)sub_1CA0B6058((_QWORD *)v5);
    if ((v8 & 0x8000000000000000) != 0)
      goto LABEL_40;
    goto LABEL_4;
  }
  v4 = v1;
  v2 = v3[2];
  v5 = sub_1CA0B4464(v10, 0.0);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    goto LABEL_39;
  if ((v8 & 0x8000000000000000) != 0)
  {
LABEL_40:
    sub_1CA1F11BC();
    __break(1u);
LABEL_41:
    __break(1u);
    goto LABEL_42;
  }
LABEL_4:
  if ((v9 & 0x8000000000000000) != 0)
    goto LABEL_40;
  vDSP_mtransD((const double *)(v2 + 32), 1, (double *)(v5 + 32), 1, v8, v9);
  sub_1CA0AB910(0, &qword_1EF93A2C8);
  v2 = sub_1CA1F0E8C();
  v11 = objc_msgSend((id)v2, sel_UTF8String);
  v12 = (id)v2;
  if (!v11)
    __break(1u);
  if (v9 >> 31)
    goto LABEL_41;
  if (v8 >> 31)
  {
LABEL_42:
    __break(1u);
    goto LABEL_43;
  }
  v6 = (_QWORD *)sub_1CA0B4464(v8, 0.0);
  v7 = (_QWORD *)sub_1CA0B4464(v9 * v9, 0.0);
  v17 = (_QWORD *)sub_1CA0B4464(v8 * v8, 0.0);
  v19 = 0.0;
  v18 = 0;
  if ((int)v9 >= (int)v8)
    v13 = v8;
  else
    v13 = v9;
  if ((v13 - 0x10000000) >> 29 == 7)
  {
    v2 = sub_1CA0B4740(0, (8 * v13));
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) != 0)
      goto LABEL_13;
    goto LABEL_44;
  }
LABEL_43:
  __break(1u);
LABEL_44:
  v5 = (uint64_t)sub_1CA0B6058((_QWORD *)v5);
LABEL_13:
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    v6 = sub_1CA0B6058(v6);
  v16 = v4;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    v7 = sub_1CA0B6058(v7);
  v14 = (_QWORD *)(v5 + 32);
  v15 = v7 + 4;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    v17 = sub_1CA0B6058(v17);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    v2 = (uint64_t)sub_1CA0E6390(0, *(_QWORD *)(v2 + 16), 0, (char *)v2);
  dgesdd_NEWLAPACK();
  if ((~*(_QWORD *)&v19 & 0x7FF0000000000000) == 0)
  {
    __break(1u);
    goto LABEL_46;
  }
  if (v19 <= -2147483650.0)
  {
LABEL_46:
    __break(1u);
    goto LABEL_47;
  }
  if (v19 < 2147483650.0)
  {
    v15 = (_QWORD *)sub_1CA0B4464((int)v19, 0.0);
    v14 = (_QWORD *)v5;
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) != 0)
      goto LABEL_25;
    goto LABEL_48;
  }
LABEL_47:
  __break(1u);
LABEL_48:
  sub_1CA0B6058(v14);
LABEL_25:
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    v6 = sub_1CA0B6058(v6);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    sub_1CA0B6058(v7);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    sub_1CA0B6058(v17);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    sub_1CA0E5894(0, v15[2], 0, v15);
  swift_bridgeObjectRetain();
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    sub_1CA0E6390(0, *(_QWORD *)(v2 + 16), 0, (char *)v2);
  dgesdd_NEWLAPACK();
  swift_bridgeObjectRelease();
  if (v18 >= 1 || v18 < 0)
  {
    sub_1CA1F11C8();
    __break(1u);
  }
  else
  {
    swift_bridgeObjectRelease();
    MAMatrix.transpose()();
    *v16 = 1;
    v16[1] = v8;
    v16[2] = v6;
    swift_bridgeObjectRetain();
    MAMatrix.transpose()();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
}

Swift::tuple_value_Double_index_Int __swiftcall MAMatrix.elbow(threshold:)(Swift::Double threshold)
{
  Swift::Int v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  Swift::Double *v12;
  Swift::tuple_value_Double_index_Int result;

  v3 = *v2;
  v4 = v2[1];
  if (v4 != 1 && v3 != 1)
    goto LABEL_28;
  v6 = v3 * v4;
  if ((unsigned __int128)(v3 * (__int128)v4) >> 64 != (v3 * v4) >> 63)
    goto LABEL_25;
  v1 = v6 - 1;
  if (v6 < 1)
  {
LABEL_26:
    __break(1u);
LABEL_27:
    __break(1u);
LABEL_28:
    __break(1u);
    goto LABEL_29;
  }
  v7 = v2[2];
  if (v6 != 1)
  {
    v9 = 0;
    v8 = *(_QWORD *)(v7 + 16);
    if (v8 <= 1)
      v10 = 1;
    else
      v10 = *(_QWORD *)(v7 + 16);
    v11 = v10 - 1;
    v12 = (Swift::Double *)(v7 + 40);
    while (v1 != v9)
    {
      if (v8 == v9)
        goto LABEL_23;
      if (v11 == v9)
        goto LABEL_24;
      if (*(v12 - 1) * *(v12 - 1) - *v12 * *v12 < threshold)
      {
        v1 = v9 + 1;
        threshold = *v12;
        goto LABEL_29;
      }
      ++v9;
      ++v12;
      if (v1 == v9)
        goto LABEL_19;
    }
    __break(1u);
LABEL_23:
    __break(1u);
LABEL_24:
    __break(1u);
LABEL_25:
    __break(1u);
    goto LABEL_26;
  }
  v8 = *(_QWORD *)(v7 + 16);
LABEL_19:
  if (v6 > (uint64_t)v8)
    goto LABEL_27;
  threshold = *(double *)(v7 + 8 * v1 + 32);
LABEL_29:
  result.value = threshold;
  result.index = v1;
  return result;
}

KnowledgeGraphKit::MAMatrix __swiftcall MAMatrix.trunc(rows:columns:)(Swift::Int rows, Swift::Int columns)
{
  Swift::Int *v2;
  Swift::Int v3;
  Swift::Int *v4;
  Swift::Int v5;
  _QWORD *v6;
  Swift::Int *v7;
  int64_t v9;
  Swift::Int isUniquelyReferenced_nonNull_native;
  Swift::Int v11;
  void *v12;
  uint64_t v13;
  KnowledgeGraphKit::MAMatrix result;

  v7 = v2;
  if (*v4 < rows || v4[1] < columns)
    goto LABEL_16;
  v3 = columns;
  v5 = rows;
  v9 = rows * columns;
  if ((unsigned __int128)(v5 * (__int128)columns) >> 64 != v9 >> 63)
    goto LABEL_17;
  v4 = (Swift::Int *)v4[2];
  v6 = (_QWORD *)sub_1CA0B4464(v9, 0.0);
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
    goto LABEL_18;
  if (v5 < 0)
  {
LABEL_19:
    __break(1u);
LABEL_20:
    __break(1u);
LABEL_21:
    __break(1u);
  }
  else
  {
    while (v5)
    {
      if (v3 < (uint64_t)0xFFFFFFFF80000000)
        goto LABEL_20;
      if (v3 > 0x7FFFFFFF)
        goto LABEL_21;
      v13 = 0;
      v4 += 4;
      while ((unsigned __int128)(v13 * (__int128)v3) >> 64 == (v13 * v3) >> 63)
      {
        ++v13;
        isUniquelyReferenced_nonNull_native = cblas_dcopy_NEWLAPACK();
        if (v5 == v13)
          goto LABEL_14;
      }
      __break(1u);
LABEL_16:
      __break(1u);
LABEL_17:
      __break(1u);
LABEL_18:
      isUniquelyReferenced_nonNull_native = (Swift::Int)sub_1CA0B6058(v6);
      v6 = (_QWORD *)isUniquelyReferenced_nonNull_native;
      if (v5 < 0)
        goto LABEL_19;
    }
LABEL_14:
    *v7 = v5;
    v7[1] = v3;
    v7[2] = (Swift::Int)v6;
  }
  result.elements._rawValue = v12;
  result.columns = v11;
  result.rows = isUniquelyReferenced_nonNull_native;
  return result;
}

KnowledgeGraphKit::MAMatrix __swiftcall MAMatrix.diag(rows:columns:)(Swift::Int rows, Swift::Int columns)
{
  Swift::Int *v2;
  _QWORD *v3;
  _QWORD *v4;
  Swift::Int *v5;
  Swift::Int v6;
  Swift::Int v9;
  int64_t v10;
  void *v11;
  Swift::Int v12;
  KnowledgeGraphKit::MAMatrix result;

  v5 = v2;
  v6 = v3[1];
  if (v6 != 1 && *v3 != 1)
    goto LABEL_26;
  v9 = rows;
  v10 = rows * columns;
  if ((unsigned __int128)(v9 * (__int128)columns) >> 64 == v10 >> 63)
  {
    v4 = (_QWORD *)sub_1CA0B4464(v10, 0.0);
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) != 0)
      goto LABEL_8;
  }
  else
  {
    __break(1u);
  }
  v4 = sub_1CA0B6058(v4);
LABEL_8:
  if (v6 >= v9)
    v12 = v9;
  else
    v12 = v6;
  if (v12 >= columns)
    rows = columns;
  else
    rows = v12;
  if (rows > 0x7FFFFFFF)
  {
    __break(1u);
LABEL_23:
    __break(1u);
    goto LABEL_24;
  }
  if (columns < (uint64_t)0xFFFFFFFF80000000 || rows < (uint64_t)0xFFFFFFFF80000000)
    goto LABEL_23;
  if (columns > 0x7FFFFFFF)
  {
LABEL_24:
    __break(1u);
    goto LABEL_25;
  }
  if (__OFADD__((_DWORD)columns, 1))
  {
LABEL_25:
    __break(1u);
LABEL_26:
    __break(1u);
    goto LABEL_27;
  }
  rows = cblas_dcopy_NEWLAPACK();
  *v5 = v9;
  v5[1] = columns;
  v5[2] = (Swift::Int)v4;
LABEL_27:
  result.elements._rawValue = v11;
  result.columns = columns;
  result.rows = rows;
  return result;
}

KnowledgeGraphKit::MAMatrix __swiftcall MAMatrix.sum(axe:)(KnowledgeGraphKit::MAMatrixAxes axe)
{
  unint64_t *v1;
  unint64_t *v2;
  unint64_t *v3;
  int64_t v4;
  unint64_t v5;
  unint64_t v6;
  _QWORD *v7;
  Swift::Int isUniquelyReferenced_nonNull_native;
  Swift::Int v9;
  void *v10;
  uint64_t v11;
  int64_t v12;
  uint64_t v13;
  double *v14;
  int64_t v15;
  KnowledgeGraphKit::MAMatrix result;

  v3 = v1;
  v5 = *v2;
  v4 = v2[1];
  v6 = v2[2];
  if (*(_BYTE *)axe != 1)
  {
    v7 = (_QWORD *)sub_1CA0B4464(v5, 0.0);
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    if ((isUniquelyReferenced_nonNull_native & 1) == 0)
      goto LABEL_23;
    if ((v5 & 0x8000000000000000) == 0)
      goto LABEL_11;
LABEL_24:
    __break(1u);
LABEL_25:
    isUniquelyReferenced_nonNull_native = sub_1CA1F11BC();
    __break(1u);
    goto LABEL_26;
  }
  v7 = (_QWORD *)sub_1CA0B4464(v4, 0.0);
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
    goto LABEL_21;
  for (; v4 < 0; v7 = (_QWORD *)isUniquelyReferenced_nonNull_native)
  {
    __break(1u);
LABEL_23:
    isUniquelyReferenced_nonNull_native = (Swift::Int)sub_1CA0B6058(v7);
    v7 = (_QWORD *)isUniquelyReferenced_nonNull_native;
    if ((v5 & 0x8000000000000000) != 0)
      goto LABEL_24;
LABEL_11:
    if (!v5)
    {
LABEL_17:
      v4 = 1;
      goto LABEL_18;
    }
    v13 = 0;
    v6 += 32;
    v14 = (double *)(v7 + 4);
    while (v5 != v13)
    {
      v15 = v13 * v4;
      if ((unsigned __int128)(v13 * (__int128)v4) >> 64 != (v13 * v4) >> 63)
        goto LABEL_20;
      if (v4 < 0)
        goto LABEL_25;
      ++v13;
      vDSP_sveD((const double *)(v6 + 8 * v15), 1, v14++, v4);
      if (v5 == v13)
        goto LABEL_17;
    }
    __break(1u);
LABEL_20:
    __break(1u);
LABEL_21:
    isUniquelyReferenced_nonNull_native = (Swift::Int)sub_1CA0B6058(v7);
  }
  if (v4)
  {
    v11 = 4;
    v12 = v4;
    while ((v5 & 0x8000000000000000) == 0)
    {
      vDSP_sveD((const double *)(v6 + v11 * 8), v4, (double *)&v7[v11], v5);
      ++v11;
      if (!--v12)
        goto LABEL_8;
    }
    goto LABEL_25;
  }
LABEL_8:
  v5 = 1;
LABEL_18:
  *v3 = v5;
  v3[1] = v4;
  v3[2] = (unint64_t)v7;
LABEL_26:
  result.elements._rawValue = v10;
  result.columns = v9;
  result.rows = isUniquelyReferenced_nonNull_native;
  return result;
}

Swift::Double __swiftcall MAMatrix.euclideanDistance(vector:)(KnowledgeGraphKit::MAMatrix vector)
{
  Swift::Double result;

  sub_1CA13664C((__int128 *)vector.rows, (uint64_t (*)(__int128 *, __int128 *))sub_1CA1358E0);
  return result;
}

BOOL MAMatrix.isVector.getter()
{
  _QWORD *v0;

  return v0[1] == 1 || *v0 == 1;
}

BOOL static MAMatrixAxes.== infix(_:_:)(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return ((*a1 ^ *a2) & 1) == 0;
}

uint64_t MAMatrixAxes.hash(into:)()
{
  return sub_1CA1F13FC();
}

uint64_t MAMatrixAxes.hashValue.getter()
{
  sub_1CA1F13F0();
  sub_1CA1F13FC();
  return sub_1CA1F1438();
}

BOOL static MAMatrixDistances.== infix(_:_:)(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return *a1 == *a2;
}

uint64_t MAMatrixDistances.hash(into:)()
{
  return sub_1CA1F13FC();
}

uint64_t MAMatrixDistances.hashValue.getter()
{
  sub_1CA1F13F0();
  sub_1CA1F13FC();
  return sub_1CA1F1438();
}

KnowledgeGraphKit::MAMatrix __swiftcall MAMatrix.init(_:)(Swift::OpaquePointer a1)
{
  _QWORD *v1;
  uint64_t v2;
  _QWORD *rawValue;
  unint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  Swift::Int isUniquelyReferenced_nonNull_native;
  Swift::Int v8;
  void *v9;
  _QWORD *v10;
  _QWORD *v11;
  KnowledgeGraphKit::MAMatrix result;

  v6 = *((_QWORD *)a1._rawValue + 2);
  if (!v6)
    goto LABEL_12;
  rawValue = a1._rawValue;
  v2 = (uint64_t)v1;
  v4 = *(_QWORD *)(*((_QWORD *)a1._rawValue + 4) + 16);
  if ((unsigned __int128)(v6 * (__int128)(uint64_t)v4) >> 64 != (uint64_t)(v6 * v4) >> 63)
    goto LABEL_13;
  v5 = (_QWORD *)sub_1CA0B4464(v6 * v4, 0.0);
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
    goto LABEL_14;
  v10 = (_QWORD *)rawValue[2];
  if (v10)
  {
    while (!(v4 >> 31))
    {
      v11 = (_QWORD *)v2;
      swift_bridgeObjectRetain();
      v2 = 0;
      while ((unsigned __int128)(v2 * (__int128)(uint64_t)v4) >> 64 == (uint64_t)(v2 * v4) >> 63)
      {
        ++v2;
        swift_bridgeObjectRetain();
        cblas_dcopy_NEWLAPACK();
        swift_bridgeObjectRelease();
        if (v10 == (_QWORD *)v2)
        {
          swift_bridgeObjectRelease();
          v2 = (uint64_t)v11;
          goto LABEL_10;
        }
      }
      __break(1u);
LABEL_12:
      __break(1u);
LABEL_13:
      __break(1u);
LABEL_14:
      isUniquelyReferenced_nonNull_native = (Swift::Int)sub_1CA0B6058(v5);
      v5 = (_QWORD *)isUniquelyReferenced_nonNull_native;
      v10 = (_QWORD *)rawValue[2];
      if (!v10)
        goto LABEL_10;
    }
    __break(1u);
  }
  else
  {
LABEL_10:
    isUniquelyReferenced_nonNull_native = swift_bridgeObjectRelease();
    *(_QWORD *)v2 = v6;
    *(_QWORD *)(v2 + 8) = v4;
    *(_QWORD *)(v2 + 16) = v5;
  }
  result.elements._rawValue = v9;
  result.columns = v8;
  result.rows = isUniquelyReferenced_nonNull_native;
  return result;
}

{
  _QWORD *v1;
  _QWORD *v2;
  uint64_t rawValue;
  _QWORD *v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  BOOL v10;
  uint64_t i;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  Swift::Int v15;
  Swift::Int v16;
  void *v17;
  _QWORD *v18;
  _QWORD *v19;
  KnowledgeGraphKit::MAMatrix result;

  rawValue = (uint64_t)a1._rawValue;
  v4 = v1;
  v5 = *((_QWORD *)a1._rawValue + 2);
  if (v5)
  {
    v6 = 0;
    v7 = (uint64_t *)((char *)a1._rawValue + 40);
    do
    {
      v8 = *(v7 - 1);
      v9 = v8 * *v7;
      if ((unsigned __int128)(v8 * (__int128)*v7) >> 64 != v9 >> 63)
      {
        __break(1u);
LABEL_19:
        __break(1u);
        goto LABEL_20;
      }
      v10 = __OFADD__(v6, v9);
      v6 += v9;
      if (v10)
        goto LABEL_19;
      v7 += 3;
      --v5;
    }
    while (v5);
  }
  else
  {
    v6 = 0;
  }
  v2 = (_QWORD *)sub_1CA0B4464(v6, 0.0);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    goto LABEL_24;
  for (i = *(_QWORD *)(rawValue + 16); i; i = *(_QWORD *)(rawValue + 16))
  {
    v19 = v4;
    v18 = v2;
    swift_bridgeObjectRetain();
    v4 = 0;
    v2 = (_QWORD *)(rawValue + 48);
    rawValue = 0x7FFFFFFFLL;
    while (1)
    {
      v12 = *(v2 - 2);
      v13 = *(v2 - 1);
      v14 = v12 * v13;
      if ((unsigned __int128)(v12 * (__int128)v13) >> 64 != (v12 * v13) >> 63)
        break;
      if (v14 < (uint64_t)0xFFFFFFFF80000000)
        goto LABEL_21;
      if (v14 > 0x7FFFFFFF)
        goto LABEL_22;
      swift_bridgeObjectRetain();
      cblas_dcopy_NEWLAPACK();
      swift_bridgeObjectRelease();
      v10 = __OFADD__(v4, v14);
      v4 = (_QWORD *)((char *)v4 + v14);
      if (v10)
        goto LABEL_23;
      v2 += 3;
      if (!--i)
      {
        swift_bridgeObjectRelease();
        v4 = v19;
        v2 = v18;
        goto LABEL_17;
      }
    }
LABEL_20:
    __break(1u);
LABEL_21:
    __break(1u);
LABEL_22:
    __break(1u);
LABEL_23:
    __break(1u);
LABEL_24:
    v2 = sub_1CA0B6058(v2);
  }
LABEL_17:
  v15 = swift_bridgeObjectRelease();
  *v4 = 1;
  v4[1] = v6;
  v4[2] = v2;
  result.elements._rawValue = v17;
  result.columns = v16;
  result.rows = v15;
  return result;
}

KnowledgeGraphKit::MAMatrix __swiftcall MAMatrix.init(_:rows:columns:)(Swift::OpaquePointer _, Swift::Int rows, Swift::Int columns)
{
  Swift::Int *v3;
  Swift::Int v4;
  Swift::Int v5;
  _QWORD *v6;
  Swift::Int *v8;
  unint64_t v9;
  Swift::Int isUniquelyReferenced_nonNull_native;
  Swift::Int v11;
  void *v12;
  uint64_t v13;
  KnowledgeGraphKit::MAMatrix result;

  v8 = v3;
  v9 = rows * columns;
  if ((unsigned __int128)(rows * (__int128)columns) >> 64 != (rows * columns) >> 63)
    goto LABEL_13;
  if (*((_QWORD *)_._rawValue + 2) != v9)
    goto LABEL_14;
  v4 = columns;
  v5 = rows;
  v6 = (_QWORD *)sub_1CA0B4464(v9, 0.0);
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
    goto LABEL_15;
  if (v5 < 0)
  {
LABEL_16:
    __break(1u);
LABEL_17:
    __break(1u);
LABEL_18:
    __break(1u);
  }
  else
  {
    while (v5)
    {
      if (v4 < (uint64_t)0xFFFFFFFF80000000)
        goto LABEL_17;
      if (v4 > 0x7FFFFFFF)
        goto LABEL_18;
      v13 = 0;
      while ((unsigned __int128)(v13 * (__int128)v4) >> 64 == (v13 * v4) >> 63)
      {
        ++v13;
        cblas_dcopy_NEWLAPACK();
        if (v5 == v13)
          goto LABEL_11;
      }
      __break(1u);
LABEL_13:
      __break(1u);
LABEL_14:
      __break(1u);
LABEL_15:
      isUniquelyReferenced_nonNull_native = (Swift::Int)sub_1CA0B6058(v6);
      v6 = (_QWORD *)isUniquelyReferenced_nonNull_native;
      if (v5 < 0)
        goto LABEL_16;
    }
LABEL_11:
    isUniquelyReferenced_nonNull_native = swift_bridgeObjectRelease();
    *v8 = v5;
    v8[1] = v4;
    v8[2] = (Swift::Int)v6;
  }
  result.elements._rawValue = v12;
  result.columns = v11;
  result.rows = isUniquelyReferenced_nonNull_native;
  return result;
}

void static MAMatrix.ones(rows:columns:)(uint64_t a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  uint64_t v4;
  uint64_t v7;

  v4 = a1 * a2;
  if ((unsigned __int128)(a1 * (__int128)a2) >> 64 != (a1 * a2) >> 63)
  {
    __break(1u);
    goto LABEL_8;
  }
  if (v4 < 0)
  {
LABEL_8:
    sub_1CA1F11BC();
    __break(1u);
    return;
  }
  if (v4)
  {
    v7 = sub_1CA1F0B68();
    *(_QWORD *)(v7 + 16) = v4;
    memset_pattern16((void *)(v7 + 32), &unk_1CA1FC390, 8 * v4);
  }
  else
  {
    v7 = MEMORY[0x1E0DEE9D8];
  }
  *a3 = a1;
  a3[1] = a2;
  a3[2] = v7;
}

void static MAMatrix.identity(size:)(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  BOOL v8;
  unint64_t v9;

  v3 = a1 * a1;
  if ((unsigned __int128)(a1 * (__int128)a1) >> 64 != (a1 * a1) >> 63)
  {
LABEL_19:
    __break(1u);
    goto LABEL_20;
  }
  if ((v3 & 0x8000000000000000) == 0)
  {
    if (v3)
    {
      v5 = sub_1CA1F0B68();
      *(_QWORD *)(v5 + 16) = v3;
      bzero((void *)(v5 + 32), 8 * v3);
      if ((a1 & 0x8000000000000000) == 0)
      {
LABEL_5:
        if (!a1)
        {
LABEL_12:
          *a2 = a1;
          a2[1] = a1;
          a2[2] = v5;
          return;
        }
        v6 = 0;
        while (1)
        {
          v7 = v6 * a1;
          if ((unsigned __int128)(v6 * (__int128)a1) >> 64 != (v6 * a1) >> 63)
            goto LABEL_15;
          v8 = __OFADD__(v7, v6);
          v9 = v7 + v6;
          if (v8)
            goto LABEL_16;
          if ((v9 & 0x8000000000000000) != 0)
            goto LABEL_17;
          if (v9 >= *(_QWORD *)(v5 + 16))
            goto LABEL_18;
          ++v6;
          *(_QWORD *)(v5 + 32 + 8 * v9) = 0x3FF0000000000000;
          if (a1 == v6)
            goto LABEL_12;
        }
      }
    }
    else
    {
      v5 = MEMORY[0x1E0DEE9D8];
      if ((a1 & 0x8000000000000000) == 0)
        goto LABEL_5;
    }
    __break(1u);
LABEL_15:
    __break(1u);
LABEL_16:
    __break(1u);
LABEL_17:
    __break(1u);
LABEL_18:
    __break(1u);
    goto LABEL_19;
  }
LABEL_20:
  sub_1CA1F11BC();
  __break(1u);
}

void static MAMatrix.random(rows:columns:)(uint64_t a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  uint64_t v4;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint32_t v12;

  v4 = a1 * a2;
  if ((unsigned __int128)(a1 * (__int128)a2) >> 64 != (a1 * a2) >> 63)
  {
LABEL_23:
    __break(1u);
LABEL_24:
    __break(1u);
    goto LABEL_25;
  }
  if ((v4 & 0x8000000000000000) == 0)
  {
    if (v4)
    {
      v7 = sub_1CA1F0B68();
      *(_QWORD *)(v7 + 16) = v4;
      bzero((void *)(v7 + 32), 8 * v4);
      if ((a1 & 0x8000000000000000) == 0)
      {
LABEL_5:
        if (!a1)
        {
LABEL_16:
          *a3 = a1;
          a3[1] = a2;
          a3[2] = v7;
          return;
        }
        if (a2 < 0)
          goto LABEL_24;
        v8 = 0;
        v9 = 0;
        while (v9 != a1)
        {
          if (a2)
          {
            v10 = a2;
            v11 = v8;
            if ((unsigned __int128)(v9 * (__int128)a2) >> 64 != (v9 * a2) >> 63)
              goto LABEL_22;
            do
            {
              v12 = arc4random();
              if ((v8 & 0x8000000000000000) != 0)
                goto LABEL_19;
              if (v11 >= *(_QWORD *)(v7 + 16))
                goto LABEL_20;
              *(double *)(v7 + 8 * v11++ + 32) = (double)v12 / 4294967300.0;
            }
            while (--v10);
          }
          ++v9;
          v8 += a2;
          if (v9 == a1)
            goto LABEL_16;
        }
        goto LABEL_21;
      }
    }
    else
    {
      v7 = MEMORY[0x1E0DEE9D8];
      if ((a1 & 0x8000000000000000) == 0)
        goto LABEL_5;
    }
    __break(1u);
LABEL_19:
    __break(1u);
LABEL_20:
    __break(1u);
LABEL_21:
    __break(1u);
LABEL_22:
    __break(1u);
    goto LABEL_23;
  }
LABEL_25:
  sub_1CA1F11BC();
  __break(1u);
}

uint64_t MAMatrix.init(arrayLiteral:)@<X0>(uint64_t result@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 16);
  *a2 = 1;
  a2[1] = v2;
  a2[2] = result;
  return result;
}

uint64_t sub_1CA12D068@<X0>(uint64_t result@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 16);
  *a2 = 1;
  a2[1] = v2;
  a2[2] = result;
  return result;
}

KnowledgeGraphKit::MAMatrix __swiftcall MAMatrix.tile(rows:)(Swift::Int rows)
{
  Swift::Int *v1;
  _QWORD *v2;
  uint64_t v3;
  _QWORD *v4;
  Swift::Int v5;
  Swift::Int *v6;
  int64_t v7;
  Swift::Int isUniquelyReferenced_nonNull_native;
  Swift::Int v9;
  void *v10;
  uint64_t v11;
  KnowledgeGraphKit::MAMatrix result;

  v6 = v1;
  if (*v2 != 1)
    goto LABEL_13;
  v5 = rows;
  v3 = v2[1];
  v7 = rows * v3;
  if ((unsigned __int128)(v5 * (__int128)v3) >> 64 != v7 >> 63)
    goto LABEL_14;
  v4 = (_QWORD *)sub_1CA0B4464(v7, 0.0);
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
    goto LABEL_15;
  if (v5 < 0)
  {
LABEL_16:
    __break(1u);
LABEL_17:
    __break(1u);
LABEL_18:
    __break(1u);
  }
  else
  {
    while (v5)
    {
      if (v3 < (uint64_t)0xFFFFFFFF80000000)
        goto LABEL_17;
      if (v3 > 0x7FFFFFFF)
        goto LABEL_18;
      v11 = 0;
      while ((unsigned __int128)(v11 * (__int128)v3) >> 64 == (v11 * v3) >> 63)
      {
        ++v11;
        isUniquelyReferenced_nonNull_native = cblas_dcopy_NEWLAPACK();
        if (v5 == v11)
          goto LABEL_11;
      }
      __break(1u);
LABEL_13:
      __break(1u);
LABEL_14:
      __break(1u);
LABEL_15:
      isUniquelyReferenced_nonNull_native = (Swift::Int)sub_1CA0B6058(v4);
      v4 = (_QWORD *)isUniquelyReferenced_nonNull_native;
      if (v5 < 0)
        goto LABEL_16;
    }
LABEL_11:
    *v6 = v5;
    v6[1] = v3;
    v6[2] = (Swift::Int)v4;
  }
  result.elements._rawValue = v10;
  result.columns = v9;
  result.rows = isUniquelyReferenced_nonNull_native;
  return result;
}

KnowledgeGraphKit::MAMatrix __swiftcall MAMatrix.expand(rows:columns:)(Swift::Int rows, Swift::Int columns)
{
  Swift::Int *v2;
  Swift::Int v3;
  Swift::Int *v4;
  Swift::Int v5;
  _QWORD *v6;
  Swift::Int *v7;
  Swift::Int v8;
  Swift::Int v9;
  int64_t v11;
  Swift::Int isUniquelyReferenced_nonNull_native;
  Swift::Int v13;
  void *v14;
  uint64_t v15;
  KnowledgeGraphKit::MAMatrix result;

  v9 = *v4;
  v8 = v4[1];
  if (*v4 <= rows && v8 <= columns)
  {
    v3 = columns;
    v5 = rows;
    v7 = v2;
    v11 = rows * columns;
    if ((unsigned __int128)(v5 * (__int128)columns) >> 64 != v11 >> 63)
      goto LABEL_20;
    v4 = (Swift::Int *)v4[2];
    v6 = (_QWORD *)sub_1CA0B4464(v11, 0.0);
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    if ((isUniquelyReferenced_nonNull_native & 1) == 0)
      goto LABEL_21;
    if ((v9 & 0x8000000000000000) == 0)
      goto LABEL_9;
  }
  else
  {
    while (1)
    {
      __break(1u);
LABEL_20:
      __break(1u);
LABEL_21:
      isUniquelyReferenced_nonNull_native = (Swift::Int)sub_1CA0B6058(v6);
      v6 = (_QWORD *)isUniquelyReferenced_nonNull_native;
      if (v9 < 0)
        break;
LABEL_9:
      if (!v9)
      {
LABEL_16:
        *v7 = v5;
        v7[1] = v3;
        v7[2] = (Swift::Int)v6;
        goto LABEL_25;
      }
      if (v8 < (uint64_t)0xFFFFFFFF80000000)
        goto LABEL_23;
      if (v8 > 0x7FFFFFFF)
        goto LABEL_24;
      v15 = 0;
      v4 += 4;
      while ((unsigned __int128)(v15 * (__int128)v8) >> 64 == (v15 * v8) >> 63)
      {
        if ((unsigned __int128)(v15 * (__int128)v3) >> 64 != (v15 * v3) >> 63)
          goto LABEL_18;
        ++v15;
        isUniquelyReferenced_nonNull_native = cblas_dcopy_NEWLAPACK();
        if (v9 == v15)
          goto LABEL_16;
      }
      __break(1u);
LABEL_18:
      __break(1u);
    }
  }
  __break(1u);
LABEL_23:
  __break(1u);
LABEL_24:
  __break(1u);
LABEL_25:
  result.elements._rawValue = v14;
  result.columns = v13;
  result.rows = isUniquelyReferenced_nonNull_native;
  return result;
}

void - prefix(_:)(uint64_t *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  double *v6;
  vDSP_Length v7;

  v3 = *a1;
  v4 = a1[1];
  v5 = a1[2];
  swift_bridgeObjectRetain();
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) != 0)
    v6 = (double *)v5;
  else
    v6 = (double *)sub_1CA0B6058((_QWORD *)v5);
  v7 = v3 * v4;
  if ((unsigned __int128)(v3 * (__int128)v4) >> 64 == (v3 * v4) >> 63)
  {
    if ((v7 & 0x8000000000000000) == 0)
    {
      vDSP_vnegD((const double *)(v5 + 32), 1, v6 + 4, 1, v7);
      *a2 = v3;
      a2[1] = v4;
      a2[2] = v6;
      return;
    }
  }
  else
  {
    __break(1u);
  }
  sub_1CA1F11BC();
  __break(1u);
}

Swift::Void __swiftcall MAMatrix.sqrt()()
{
  sub_1CA1330F4((uint64_t (*)(_QWORD *, _QWORD *, int *))MEMORY[0x1E0C8DB78]);
}

void /= infix(_:_:)(vDSP_Length *a1, uint64_t a2)
{
  vDSP_Stride v3;
  double *v4;
  uint64_t v5;
  int64_t v6;
  char v7;
  unint64_t v8;
  vDSP_Length v9;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v12;
  int64_t v13;
  char v14;
  vDSP_Length v15;
  double __B[3];

  __B[2] = *(double *)MEMORY[0x1E0C80C00];
  v4 = *(double **)a2;
  v3 = *(_QWORD *)(a2 + 8);
  v5 = *(_QWORD *)(a2 + 16);
  v6 = a1[1];
  if (v6 != v3)
  {
    if (v3 == 1 && *a1 == (_QWORD)v4)
    {
      v3 = a1[2];
      isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      a1[2] = v3;
      if ((isUniquelyReferenced_nonNull_native & 1) == 0)
        goto LABEL_39;
      if (((unint64_t)v4 & 0x8000000000000000) != 0)
        goto LABEL_40;
      goto LABEL_19;
    }
    goto LABEL_46;
  }
  if (v4 == (double *)1)
  {
    v6 = a1[2];
    v7 = swift_isUniquelyReferenced_nonNull_native();
    a1[2] = v6;
    if ((v7 & 1) == 0)
      goto LABEL_41;
    while ((v3 & 0x8000000000000000) == 0)
    {
      if (!v3)
        goto LABEL_32;
      v8 = 0;
      v4 = (double *)(v6 + 32);
      v9 = *a1;
      while (v3 != v8)
      {
        if (v8 >= *(_QWORD *)(v5 + 16))
          goto LABEL_38;
        __B[0] = *(double *)(v5 + 32 + 8 * v8);
        if ((v9 & 0x8000000000000000) != 0)
          goto LABEL_45;
        ++v8;
        vDSP_vsdivD(v4, v3, __B, v4, v3, v9);
        ++v4;
        if (v3 == v8)
          goto LABEL_32;
      }
      while (1)
      {
        __break(1u);
LABEL_38:
        __break(1u);
LABEL_39:
        v3 = (vDSP_Stride)sub_1CA0B6058((_QWORD *)v3);
        a1[2] = v3;
        if (((unint64_t)v4 & 0x8000000000000000) != 0)
          break;
LABEL_19:
        if (!v4)
        {
LABEL_26:
          a1[2] = v3;
          return;
        }
        v12 = 0;
        while (v4 != (double *)v12)
        {
          if ((unint64_t)v12 >= *(_QWORD *)(v5 + 16))
            goto LABEL_35;
          __B[0] = *(double *)(v5 + 32 + 8 * v12);
          v13 = v12 * v6;
          if ((unsigned __int128)(v12 * (__int128)v6) >> 64 != (v12 * v6) >> 63)
            goto LABEL_36;
          if (v6 < 0)
            goto LABEL_45;
          ++v12;
          vDSP_vsdivD((const double *)(v3 + 32 + 8 * v13), 1, __B, (double *)(v3 + 32 + 8 * v13), 1, v6);
          if (v4 == (double *)v12)
            goto LABEL_26;
        }
        __break(1u);
LABEL_35:
        __break(1u);
LABEL_36:
        __break(1u);
      }
LABEL_40:
      __break(1u);
LABEL_41:
      v6 = (int64_t)sub_1CA0B6058((_QWORD *)v6);
      a1[2] = v6;
    }
    __break(1u);
LABEL_43:
    v6 = (int64_t)sub_1CA0B6058((_QWORD *)v6);
    a1[2] = v6;
    goto LABEL_29;
  }
  if ((double *)*a1 != v4)
  {
LABEL_46:
    __B[0] = 0.0;
    __B[1] = -2.68156159e154;
    swift_bridgeObjectRetain();
    sub_1CA1F1054();
    sub_1CA1F0A3C();
    sub_1CA1F12AC();
    sub_1CA1F0A3C();
    swift_bridgeObjectRelease();
    sub_1CA1F0A3C();
    sub_1CA1F12AC();
    sub_1CA1F0A3C();
    swift_bridgeObjectRelease();
    sub_1CA1F0A3C();
    sub_1CA1F12AC();
    sub_1CA1F0A3C();
    swift_bridgeObjectRelease();
    sub_1CA1F0A3C();
    sub_1CA1F12AC();
    sub_1CA1F0A3C();
    swift_bridgeObjectRelease();
    sub_1CA1F0A3C();
    sub_1CA1F11C8();
    __break(1u);
    return;
  }
  v6 = a1[2];
  v14 = swift_isUniquelyReferenced_nonNull_native();
  a1[2] = v6;
  if ((v14 & 1) == 0)
    goto LABEL_43;
LABEL_29:
  v15 = (_QWORD)v4 * v3;
  if ((unsigned __int128)((uint64_t)v4 * (__int128)v3) >> 64 != ((uint64_t)v4 * v3) >> 63)
    __break(1u);
  if ((v15 & 0x8000000000000000) != 0)
  {
LABEL_45:
    sub_1CA1F11BC();
    __break(1u);
    goto LABEL_46;
  }
  vDSP_vdivD((const double *)(v5 + 32), 1, (const double *)(v6 + 32), 1, (double *)(v6 + 32), 1, v15);
LABEL_32:
  a1[2] = v6;
}

uint64_t MAMatrix.length.getter()
{
  _QWORD *v0;

  if (v0[1] <= *v0)
    return *v0;
  else
    return v0[1];
}

uint64_t MAMatrix.sparseCount.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  double v8;
  uint64_t v9;

  v1 = *(_QWORD *)(v0 + 16);
  v2 = *(_QWORD *)(v1 + 16);
  if (v2)
  {
    swift_bridgeObjectRetain();
    v3 = 0;
    v4 = MEMORY[0x1E0DEE9D8];
    do
    {
      v8 = *(double *)(v1 + 8 * v3 + 32);
      if (v8 == 0.0)
      {
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
          sub_1CA0CD550(0, *(_QWORD *)(v4 + 16) + 1, 1);
        v6 = *(_QWORD *)(v4 + 16);
        v5 = *(_QWORD *)(v4 + 24);
        if (v6 >= v5 >> 1)
          sub_1CA0CD550(v5 > 1, v6 + 1, 1);
        *(_QWORD *)(v4 + 16) = v6 + 1;
        v7 = v4 + 16 * v6;
        *(_QWORD *)(v7 + 32) = v3;
        *(double *)(v7 + 40) = v8;
      }
      ++v3;
    }
    while (v2 != v3);
    swift_bridgeObjectRelease();
  }
  else
  {
    v4 = MEMORY[0x1E0DEE9D8];
  }
  v9 = *(_QWORD *)(v4 + 16);
  swift_release();
  return v9;
}

uint64_t MAMatrix.sparsity.getter()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t result;

  v1 = *v0;
  v2 = v0[1];
  result = MAMatrix.sparseCount.getter();
  if ((unsigned __int128)(v1 * (__int128)v2) >> 64 != (v1 * v2) >> 63)
    __break(1u);
  return result;
}

void MAMatrix.density.getter()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;

  v1 = v0[1];
  v2 = *v0 * v1;
  if ((unsigned __int128)(*v0 * (__int128)v1) >> 64 != v2 >> 63)
  {
    __break(1u);
    goto LABEL_5;
  }
  if (__OFSUB__(v2, MAMatrix.sparseCount.getter()))
LABEL_5:
    __break(1u);
}

Swift::Int __swiftcall MAMatrix.index(row:column:)(Swift::Int row, Swift::Int column)
{
  uint64_t v2;
  uint64_t v3;
  Swift::Int v4;

  v3 = *(_QWORD *)(v2 + 8);
  v4 = row * v3;
  if ((unsigned __int128)(row * (__int128)v3) >> 64 != (row * v3) >> 63)
  {
    __break(1u);
    goto LABEL_5;
  }
  row = v4 + column;
  if (__OFADD__(v4, column))
LABEL_5:
    __break(1u);
  return row;
}

Swift::Bool __swiftcall MAMatrix.positionIsValid(row:column:)(Swift::Int row, Swift::Int column)
{
  Swift::Int *v2;
  Swift::Bool result;

  result = 0;
  if ((row & 0x8000000000000000) == 0 && *v2 > row && (column & 0x8000000000000000) == 0)
    return v2[1] > column;
  return result;
}

Swift::Bool __swiftcall MAMatrix.indexIsValid(index:)(Swift::Int index)
{
  uint64_t *v1;
  uint64_t v2;
  Swift::Int v3;

  if (index < 0)
  {
    LOBYTE(index) = 0;
  }
  else
  {
    v2 = v1[1];
    v3 = *v1 * v2;
    if ((unsigned __int128)(*v1 * (__int128)v2) >> 64 == v3 >> 63)
      LOBYTE(index) = v3 > index;
    else
      __break(1u);
  }
  return index;
}

uint64_t sub_1CA12DA4C@<X0>(uint64_t result@<X0>, uint64_t *a2@<X1>, _QWORD *a3@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  BOOL v6;
  unint64_t v7;
  uint64_t v8;

  v3 = *(_QWORD *)(result + 8);
  v4 = *a2 * v3;
  if ((unsigned __int128)(*a2 * (__int128)v3) >> 64 != v4 >> 63)
  {
    __break(1u);
    goto LABEL_7;
  }
  v5 = a2[1];
  v6 = __OFADD__(v4, v5);
  v7 = v4 + v5;
  if (v6)
  {
LABEL_7:
    __break(1u);
    goto LABEL_8;
  }
  if ((v7 & 0x8000000000000000) != 0)
  {
LABEL_8:
    __break(1u);
    goto LABEL_9;
  }
  v8 = *(_QWORD *)(result + 16);
  if (v7 < *(_QWORD *)(v8 + 16))
  {
    *a3 = *(_QWORD *)(v8 + 8 * v7 + 32);
    return result;
  }
LABEL_9:
  __break(1u);
  return result;
}

uint64_t sub_1CA12DAA4(uint64_t *a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v3;
  _QWORD *v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t result;

  v7 = *(_QWORD *)(a2 + 8);
  v8 = *a3 * v7;
  if ((unsigned __int128)(*a3 * (__int128)v7) >> 64 != v8 >> 63)
  {
    __break(1u);
    goto LABEL_8;
  }
  v9 = a3[1];
  v5 = v8 + v9;
  if (__OFADD__(v8, v9))
  {
LABEL_8:
    __break(1u);
    goto LABEL_9;
  }
  v3 = a2;
  v6 = *a1;
  v4 = *(_QWORD **)(a2 + 16);
  result = swift_isUniquelyReferenced_nonNull_native();
  if ((result & 1) != 0)
  {
    if ((v5 & 0x8000000000000000) == 0)
      goto LABEL_5;
LABEL_10:
    __break(1u);
    goto LABEL_11;
  }
LABEL_9:
  result = (uint64_t)sub_1CA0B6058(v4);
  v4 = (_QWORD *)result;
  if ((v5 & 0x8000000000000000) != 0)
    goto LABEL_10;
LABEL_5:
  if (v5 < v4[2])
  {
    v4[v5 + 4] = v6;
    *(_QWORD *)(v3 + 16) = v4;
    return result;
  }
LABEL_11:
  __break(1u);
  return result;
}

uint64_t (*MAMatrix.subscript.modify(uint64_t (*result)(uint64_t result, char a2), uint64_t a2, uint64_t a3))(uint64_t result, char a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  BOOL v6;
  unint64_t v7;
  uint64_t v8;

  *((_QWORD *)result + 2) = a3;
  *((_QWORD *)result + 3) = v3;
  *((_QWORD *)result + 1) = a2;
  v4 = *(_QWORD *)(v3 + 8);
  v5 = a2 * v4;
  if ((unsigned __int128)(a2 * (__int128)v4) >> 64 != (a2 * v4) >> 63)
  {
    __break(1u);
    goto LABEL_7;
  }
  v6 = __OFADD__(v5, a3);
  v7 = v5 + a3;
  if (v6)
  {
LABEL_7:
    __break(1u);
    goto LABEL_8;
  }
  if ((v7 & 0x8000000000000000) != 0)
  {
LABEL_8:
    __break(1u);
    goto LABEL_9;
  }
  v8 = *(_QWORD *)(v3 + 16);
  if (v7 < *(_QWORD *)(v8 + 16))
  {
    *(_QWORD *)result = *(_QWORD *)(v8 + 8 * v7 + 32);
    return sub_1CA12DBAC;
  }
LABEL_9:
  __break(1u);
  return result;
}

uint64_t sub_1CA12DBAC(uint64_t result, char a2)
{
  _QWORD *v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  BOOL v9;
  uint64_t v10;
  uint64_t v11;

  v4 = *(_QWORD *)(result + 24);
  v5 = *(_QWORD *)(result + 8);
  v6 = *(_QWORD *)result;
  v7 = *(_QWORD *)(v4 + 8);
  v8 = v5 * v7;
  v9 = (unsigned __int128)(v5 * (__int128)v7) >> 64 != (v5 * v7) >> 63;
  if ((a2 & 1) == 0)
    goto LABEL_8;
  if (v9)
  {
    __break(1u);
    goto LABEL_15;
  }
  v10 = *(_QWORD *)(result + 16);
  v3 = v8 + v10;
  if (__OFADD__(v8, v10))
  {
LABEL_15:
    __break(1u);
LABEL_16:
    result = (uint64_t)sub_1CA0B6058(v2);
    v2 = (_QWORD *)result;
    if ((v3 & 0x8000000000000000) == 0)
      goto LABEL_6;
LABEL_17:
    __break(1u);
    goto LABEL_18;
  }
  v2 = *(_QWORD **)(v4 + 16);
  result = swift_isUniquelyReferenced_nonNull_native();
  if ((result & 1) == 0)
    goto LABEL_16;
  if ((v3 & 0x8000000000000000) != 0)
    goto LABEL_17;
LABEL_6:
  v8 = v2[2];
  if (v3 < v8)
  {
LABEL_13:
    v2[v3 + 4] = v6;
    *(_QWORD *)(v4 + 16) = v2;
    return result;
  }
  __break(1u);
LABEL_8:
  if (v9)
  {
LABEL_18:
    __break(1u);
    goto LABEL_19;
  }
  v11 = *(_QWORD *)(result + 16);
  v3 = v8 + v11;
  if (__OFADD__(v8, v11))
  {
LABEL_19:
    __break(1u);
    goto LABEL_20;
  }
  v2 = *(_QWORD **)(v4 + 16);
  result = swift_isUniquelyReferenced_nonNull_native();
  if ((result & 1) != 0)
  {
    if ((v3 & 0x8000000000000000) == 0)
      goto LABEL_12;
LABEL_21:
    __break(1u);
    goto LABEL_22;
  }
LABEL_20:
  result = (uint64_t)sub_1CA0B6058(v2);
  v2 = (_QWORD *)result;
  if ((v3 & 0x8000000000000000) != 0)
    goto LABEL_21;
LABEL_12:
  if (v3 < v2[2])
    goto LABEL_13;
LABEL_22:
  __break(1u);
  return result;
}

uint64_t sub_1CA12DCA4(uint64_t *a1, uint64_t a2, unint64_t *a3)
{
  unint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t result;

  v4 = *a3;
  v5 = *a1;
  v6 = *(_QWORD **)(a2 + 16);
  result = swift_isUniquelyReferenced_nonNull_native();
  if ((result & 1) != 0)
  {
    if ((v4 & 0x8000000000000000) == 0)
      goto LABEL_3;
LABEL_6:
    __break(1u);
    goto LABEL_7;
  }
  result = (uint64_t)sub_1CA0B6058(v6);
  v6 = (_QWORD *)result;
  if ((v4 & 0x8000000000000000) != 0)
    goto LABEL_6;
LABEL_3:
  if (v4 < v6[2])
  {
    v6[v4 + 4] = v5;
    *(_QWORD *)(a2 + 16) = v6;
    return result;
  }
LABEL_7:
  __break(1u);
  return result;
}

uint64_t (*MAMatrix.subscript.modify(uint64_t (*result)(uint64_t *a1, char a2), unint64_t a2))(uint64_t *a1, char a2)
{
  uint64_t v2;
  uint64_t v3;

  *((_QWORD *)result + 1) = a2;
  *((_QWORD *)result + 2) = v2;
  if ((a2 & 0x8000000000000000) != 0)
  {
    __break(1u);
  }
  else
  {
    v3 = *(_QWORD *)(v2 + 16);
    if (*(_QWORD *)(v3 + 16) > a2)
    {
      *(_QWORD *)result = *(_QWORD *)(v3 + 8 * a2 + 32);
      return sub_1CA12DD5C;
    }
  }
  __break(1u);
  return result;
}

uint64_t sub_1CA12DD5C(uint64_t *a1, char a2)
{
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t result;
  unint64_t v8;

  v4 = a1[2];
  v5 = *a1;
  v6 = *(_QWORD **)(v4 + 16);
  result = swift_isUniquelyReferenced_nonNull_native();
  if ((a2 & 1) != 0)
  {
    if ((result & 1) == 0)
    {
      result = (uint64_t)sub_1CA0B6058(v6);
      v6 = (_QWORD *)result;
    }
    v8 = a1[1];
    if (v6[2] > v8)
      goto LABEL_9;
    __break(1u);
  }
  if ((result & 1) == 0)
  {
    result = (uint64_t)sub_1CA0B6058(v6);
    v6 = (_QWORD *)result;
  }
  v8 = a1[1];
  if (v6[2] > v8)
  {
LABEL_9:
    v6[v8 + 4] = v5;
    *(_QWORD *)(v4 + 16) = v6;
    return result;
  }
  __break(1u);
  return result;
}

uint64_t MAMatrix.subscript.getter(uint64_t a1)
{
  uint64_t *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v3 = *v1;
  v4 = v1[1];
  v5 = v1[2];
  swift_bridgeObjectRetain();
  v6 = sub_1CA13B518(a1, v3, v4, v5);
  swift_bridgeObjectRelease();
  return v6;
}

uint64_t sub_1CA12DE68(_QWORD *a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t result;

  if (*a1 == 1)
  {
    v3 = a2;
    v4 = a1[1];
    if (v4 == *(_QWORD *)(a2 + 8))
    {
      v6 = *a3;
      v5 = *(_QWORD **)(a2 + 16);
      swift_bridgeObjectRetain();
      result = swift_isUniquelyReferenced_nonNull_native();
      *(_QWORD *)(v3 + 16) = v5;
      if ((result & 1) != 0)
        goto LABEL_4;
      goto LABEL_10;
    }
  }
  else
  {
    __break(1u);
  }
  __break(1u);
LABEL_10:
  result = (uint64_t)sub_1CA0B6058(v5);
  v5 = (_QWORD *)result;
  *(_QWORD *)(v3 + 16) = result;
LABEL_4:
  if (v4 < (uint64_t)0xFFFFFFFF80000000)
  {
    __break(1u);
    goto LABEL_12;
  }
  if (v4 > 0x7FFFFFFF)
  {
LABEL_12:
    __break(1u);
    goto LABEL_13;
  }
  if ((unsigned __int128)(v6 * (__int128)v4) >> 64 == (v6 * v4) >> 63)
  {
    cblas_dcopy_NEWLAPACK();
    *(_QWORD *)(v3 + 16) = v5;
    return swift_bridgeObjectRelease();
  }
LABEL_13:
  __break(1u);
  return result;
}

uint64_t MAMatrix.subscript.modify(_QWORD *a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v5;
  int64_t v6;
  _QWORD *v7;
  uint64_t result;

  v5 = malloc(0x28uLL);
  *a1 = v5;
  v5[3] = a2;
  v5[4] = v2;
  v6 = *(_QWORD *)(v2 + 8);
  v7 = (_QWORD *)sub_1CA0B4464(v6, 0.0);
  result = swift_isUniquelyReferenced_nonNull_native();
  if ((result & 1) == 0)
  {
    result = (uint64_t)sub_1CA0B6058(v7);
    v7 = (_QWORD *)result;
  }
  if (v6 < (uint64_t)0xFFFFFFFF80000000)
  {
    __break(1u);
    goto LABEL_8;
  }
  if (v6 > 0x7FFFFFFF)
  {
LABEL_8:
    __break(1u);
    goto LABEL_9;
  }
  if ((unsigned __int128)(a2 * (__int128)v6) >> 64 == (a2 * v6) >> 63)
  {
    cblas_dcopy_NEWLAPACK();
    *v5 = 1;
    v5[1] = v6;
    v5[2] = v7;
    return (uint64_t)sub_1CA12E020;
  }
LABEL_9:
  __break(1u);
  return result;
}

{
  uint64_t v2;
  _QWORD *v3;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t result;
  uint64_t v11;

  v6 = malloc(0x30uLL);
  *a1 = v6;
  v6[3] = a2;
  v6[4] = v2;
  v7 = *(_QWORD *)(v2 + 8);
  v8 = *(_QWORD *)(v2 + 16);
  v9 = *(_QWORD *)(a2 + 16);
  v6[5] = v9;
  if ((unsigned __int128)(v9 * (__int128)v7) >> 64 != (v9 * v7) >> 63)
    goto LABEL_14;
  v3 = (_QWORD *)sub_1CA0B4464(v9 * v7, 0.0);
  result = swift_isUniquelyReferenced_nonNull_native();
  if ((result & 1) == 0)
    goto LABEL_15;
  if (v9)
  {
    while (v7 >= (uint64_t)0xFFFFFFFF80000000)
    {
      if (v7 > 0x7FFFFFFF)
        goto LABEL_18;
      v8 += 32;
      swift_bridgeObjectRetain();
      v11 = 0;
      while ((unsigned __int128)(*(uint64_t *)(a2 + 8 * v11 + 32) * (__int128)v7) >> 64 == (*(_QWORD *)(a2 + 8 * v11 + 32)
                                                                                          * v7) >> 63)
      {
        if ((unsigned __int128)(v11 * (__int128)v7) >> 64 != (v11 * v7) >> 63)
          goto LABEL_13;
        ++v11;
        cblas_dcopy_NEWLAPACK();
        if (v9 == v11)
        {
          swift_bridgeObjectRelease();
          goto LABEL_11;
        }
      }
      __break(1u);
LABEL_13:
      __break(1u);
LABEL_14:
      __break(1u);
LABEL_15:
      result = (uint64_t)sub_1CA0B6058(v3);
      v3 = (_QWORD *)result;
      if (!v9)
        goto LABEL_11;
    }
    __break(1u);
LABEL_18:
    __break(1u);
  }
  else
  {
LABEL_11:
    *v6 = v9;
    v6[1] = v7;
    v6[2] = v3;
    return (uint64_t)sub_1CA12EE30;
  }
  return result;
}

{
  unint64_t *v2;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t result;

  v5 = malloc(0x28uLL);
  *a1 = v5;
  v5[3] = a2;
  v5[4] = v2;
  v7 = *v2;
  v6 = v2[1];
  v8 = (_QWORD *)sub_1CA0B4464(*v2, 0.0);
  result = swift_isUniquelyReferenced_nonNull_native();
  if ((result & 1) == 0)
  {
    result = (uint64_t)sub_1CA0B6058(v8);
    v8 = (_QWORD *)result;
  }
  if (v7 > 0x7FFFFFFF)
  {
    __break(1u);
LABEL_9:
    __break(1u);
    goto LABEL_10;
  }
  if (v7 < (uint64_t)0xFFFFFFFF80000000 || v6 < (uint64_t)0xFFFFFFFF80000000)
    goto LABEL_9;
  if (v6 <= 0x7FFFFFFF)
  {
    cblas_dcopy_NEWLAPACK();
    *v5 = v7;
    v5[1] = 1;
    v5[2] = v8;
    return (uint64_t)sub_1CA12F238;
  }
LABEL_10:
  __break(1u);
  return result;
}

{
  uint64_t *v2;
  _QWORD *v3;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t result;
  uint64_t v11;
  unint64_t v12;

  v6 = malloc(0x30uLL);
  *a1 = v6;
  v6[3] = a2;
  v6[4] = v2;
  v7 = *v2;
  v8 = v2[1];
  v9 = *(_QWORD *)(a2 + 16);
  v6[5] = v9;
  if ((unsigned __int128)(v7 * (__int128)(uint64_t)v9) >> 64 == (uint64_t)(v7 * v9) >> 63)
  {
    v3 = (_QWORD *)sub_1CA0B4464(v7 * v9, 0.0);
    result = swift_isUniquelyReferenced_nonNull_native();
    if ((result & 1) != 0)
    {
      if (v9)
        goto LABEL_4;
LABEL_12:
      *v6 = v7;
      v6[1] = v9;
      v6[2] = v3;
      return (uint64_t)sub_1CA130194;
    }
  }
  else
  {
    __break(1u);
  }
  result = (uint64_t)sub_1CA0B6058(v3);
  v3 = (_QWORD *)result;
  if (!v9)
    goto LABEL_12;
LABEL_4:
  if (v7 > 0x7FFFFFFF)
  {
    __break(1u);
    goto LABEL_17;
  }
  if (v8 > 0x7FFFFFFF)
  {
LABEL_17:
    __break(1u);
LABEL_18:
    __break(1u);
    goto LABEL_19;
  }
  if (v7 < (uint64_t)0xFFFFFFFF80000000 || v8 < (uint64_t)0xFFFFFFFF80000000)
    goto LABEL_18;
  if (!(v9 >> 31))
  {
    swift_bridgeObjectRetain();
    v11 = 32;
    v12 = v9;
    do
    {
      cblas_dcopy_NEWLAPACK();
      v11 += 8;
      --v12;
    }
    while (v12);
    swift_bridgeObjectRelease();
    goto LABEL_12;
  }
LABEL_19:
  __break(1u);
  return result;
}

void sub_1CA12E020(uint64_t **a1, char a2)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v8;
  uint64_t v9;
  char v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  v4 = *a1;
  v5 = **a1;
  if ((a2 & 1) != 0)
  {
    if (v5 == 1)
    {
      v6 = v4[4];
      v2 = v4[1];
      if (v2 == *(_QWORD *)(v6 + 8))
      {
        v3 = *(_QWORD **)(v6 + 16);
        swift_bridgeObjectRetain();
        isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
        *(_QWORD *)(v6 + 16) = v3;
        if ((isUniquelyReferenced_nonNull_native & 1) != 0)
          goto LABEL_6;
        goto LABEL_19;
      }
    }
    else
    {
      __break(1u);
    }
    __break(1u);
LABEL_19:
    v12 = v4[4];
    v3 = sub_1CA0B6058(v3);
    *(_QWORD *)(v12 + 16) = v3;
LABEL_6:
    if (v2 < (uint64_t)0xFFFFFFFF80000000)
    {
      __break(1u);
    }
    else if (v2 <= 0x7FFFFFFF)
    {
      if ((unsigned __int128)(v4[3] * (__int128)v2) >> 64 == (v4[3] * v2) >> 63)
      {
        v8 = v4[4];
        cblas_dcopy_NEWLAPACK();
        *(_QWORD *)(v8 + 16) = v3;
        swift_bridgeObjectRelease();
LABEL_17:
        swift_bridgeObjectRelease();
        free(v4);
        return;
      }
      goto LABEL_22;
    }
    __break(1u);
LABEL_22:
    __break(1u);
    goto LABEL_23;
  }
  if (v5 != 1)
  {
LABEL_23:
    __break(1u);
    goto LABEL_24;
  }
  v9 = v4[4];
  v2 = v4[1];
  if (v2 == *(_QWORD *)(v9 + 8))
  {
    v3 = *(_QWORD **)(v9 + 16);
    v10 = swift_isUniquelyReferenced_nonNull_native();
    *(_QWORD *)(v9 + 16) = v3;
    if ((v10 & 1) != 0)
      goto LABEL_13;
    goto LABEL_25;
  }
LABEL_24:
  __break(1u);
LABEL_25:
  v13 = v4[4];
  v3 = sub_1CA0B6058(v3);
  *(_QWORD *)(v13 + 16) = v3;
LABEL_13:
  if (v2 < (uint64_t)0xFFFFFFFF80000000)
  {
    __break(1u);
    goto LABEL_27;
  }
  if (v2 > 0x7FFFFFFF)
  {
LABEL_27:
    __break(1u);
    goto LABEL_28;
  }
  if ((unsigned __int128)(v4[3] * (__int128)v2) >> 64 == (v4[3] * v2) >> 63)
  {
    v11 = v4[4];
    cblas_dcopy_NEWLAPACK();
    *(_QWORD *)(v11 + 16) = v3;
    goto LABEL_17;
  }
LABEL_28:
  __break(1u);
}

uint64_t MAMatrix.subscript.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  _QWORD *v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t result;
  BOOL v11;
  BOOL v12;
  uint64_t v13;

  if (*v3 < a2)
    goto LABEL_19;
  v6 = a2;
  v7 = a1;
  v8 = a2 - a1;
  if (__OFSUB__(a2, a1))
    goto LABEL_20;
  v4 = v3[1];
  if ((unsigned __int128)(v8 * (__int128)v4) >> 64 != (v8 * v4) >> 63)
    goto LABEL_21;
  v3 = (_QWORD *)v3[2];
  v5 = (_QWORD *)sub_1CA0B4464(v8 * v4, 0.0);
  result = swift_isUniquelyReferenced_nonNull_native();
  if ((result & 1) == 0)
    goto LABEL_22;
  v11 = v6 == v7;
  if (v6 < v7)
  {
LABEL_23:
    __break(1u);
LABEL_24:
    __break(1u);
LABEL_25:
    __break(1u);
LABEL_26:
    __break(1u);
  }
  else
  {
    while (!v11)
    {
      if (v4 < (uint64_t)0xFFFFFFFF80000000)
        goto LABEL_24;
      if (v4 > 0x7FFFFFFF)
        goto LABEL_25;
      v12 = v6 <= v7;
      v6 -= v7;
      if (v12)
        goto LABEL_26;
      v13 = 0;
      v3 += 4;
      while (!__OFADD__(v13, 1))
      {
        if ((unsigned __int128)((v7 + v13) * (__int128)v4) >> 64 != ((v7 + v13) * v4) >> 63)
          goto LABEL_17;
        if ((unsigned __int128)(v13 * (__int128)v4) >> 64 != (v13 * v4) >> 63)
          goto LABEL_18;
        result = cblas_dcopy_NEWLAPACK();
        if (v6 == ++v13)
          goto LABEL_15;
      }
      __break(1u);
LABEL_17:
      __break(1u);
LABEL_18:
      __break(1u);
LABEL_19:
      __break(1u);
LABEL_20:
      __break(1u);
LABEL_21:
      __break(1u);
LABEL_22:
      result = (uint64_t)sub_1CA0B6058(v5);
      v5 = (_QWORD *)result;
      v11 = v6 == v7;
      if (v6 < v7)
        goto LABEL_23;
    }
LABEL_15:
    *a3 = v8;
    a3[1] = v4;
    a3[2] = v5;
  }
  return result;
}

uint64_t sub_1CA12E320(uint64_t a1, uint64_t *a2, uint64_t *a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v9;
  _QWORD v11[2];

  v7 = a3[1];
  if (*a2 < v7)
  {
    __break(1u);
    goto LABEL_5;
  }
  v3 = (uint64_t)a2;
  v4 = *a3;
  v5 = *(_QWORD *)(a1 + 16);
  v6 = (_QWORD *)a2[2];
  swift_bridgeObjectRetain();
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  *(_QWORD *)(v3 + 16) = v6;
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
LABEL_5:
    v6 = sub_1CA0B6058(v6);
    *(_QWORD *)(v3 + 16) = v6;
  }
  v9 = v6[2];
  v11[0] = v6 + 4;
  v11[1] = v9;
  sub_1CA12E504(v5 + 32, *(_QWORD *)(v5 + 16), v4, v7, v3, v11);
  *(_QWORD *)(v3 + 16) = v6;
  return swift_bridgeObjectRelease();
}

uint64_t MAMatrix.subscript.setter(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  _QWORD *v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t result;
  BOOL v8;
  uint64_t v9;
  BOOL v10;
  uint64_t v11;

  if (*v4 < a3)
    goto LABEL_17;
  v6 = a3;
  v3 = a2;
  v5 = (_QWORD *)v4[2];
  result = swift_isUniquelyReferenced_nonNull_native();
  v4[2] = v5;
  if ((result & 1) == 0)
    goto LABEL_18;
  v8 = v6 == v3;
  if (v6 < v3)
  {
LABEL_19:
    __break(1u);
LABEL_20:
    __break(1u);
LABEL_21:
    __break(1u);
LABEL_22:
    __break(1u);
  }
  else
  {
    while (!v8)
    {
      v9 = v4[1];
      if (v9 < (uint64_t)0xFFFFFFFF80000000)
        goto LABEL_20;
      if (v9 > 0x7FFFFFFF)
        goto LABEL_21;
      v10 = v6 <= v3;
      v6 -= v3;
      if (v10)
        goto LABEL_22;
      v11 = 0;
      while (!__OFADD__(v11, 1))
      {
        if ((unsigned __int128)(v11 * (__int128)v9) >> 64 != (v11 * v9) >> 63)
          goto LABEL_15;
        if ((unsigned __int128)((v3 + v11) * (__int128)v9) >> 64 != ((v3 + v11) * v9) >> 63)
          goto LABEL_16;
        cblas_dcopy_NEWLAPACK();
        if (v6 == ++v11)
          goto LABEL_13;
      }
      __break(1u);
LABEL_15:
      __break(1u);
LABEL_16:
      __break(1u);
LABEL_17:
      __break(1u);
LABEL_18:
      result = (uint64_t)sub_1CA0B6058(v5);
      v5 = (_QWORD *)result;
      v4[2] = result;
      v8 = v6 == v3;
      if (v6 < v3)
        goto LABEL_19;
    }
LABEL_13:
    v4[2] = v5;
    return swift_bridgeObjectRelease();
  }
  return result;
}

{
  uint64_t *v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t result;
  uint64_t v10;
  uint64_t v11;

  v8 = v3[1];
  if (v8 < a3)
    goto LABEL_18;
  v7 = a3;
  v6 = a2;
  v4 = *(_QWORD *)(a1 + 16);
  v5 = (_QWORD *)v3[2];
  result = swift_isUniquelyReferenced_nonNull_native();
  v3[2] = (uint64_t)v5;
  if ((result & 1) == 0)
    goto LABEL_19;
  if (v7 < v6)
  {
LABEL_20:
    __break(1u);
LABEL_21:
    __break(1u);
LABEL_22:
    __break(1u);
LABEL_23:
    __break(1u);
LABEL_24:
    __break(1u);
LABEL_25:
    __break(1u);
LABEL_26:
    __break(1u);
  }
  else
  {
    while (v6 != v7)
    {
      if (*v3 > 0x7FFFFFFF)
        goto LABEL_21;
      v10 = v7 - v6;
      if (__OFSUB__(v7, v6))
        goto LABEL_22;
      if (v10 > 0x7FFFFFFF)
        goto LABEL_23;
      if (v8 < (uint64_t)0xFFFFFFFF80000000
        || v10 < (uint64_t)0xFFFFFFFF80000000
        || *v3 < (uint64_t)0xFFFFFFFF80000000)
      {
        goto LABEL_24;
      }
      if (v8 > 0x7FFFFFFF)
        goto LABEL_25;
      if (v6 >= v7)
        goto LABEL_26;
      v11 = 0;
      v7 = v4 + 32;
      v6 = (uint64_t)&v5[v6 + 4];
      while (!__OFADD__(v11, 1))
      {
        cblas_dcopy_NEWLAPACK();
        v7 += 8;
        ++v11;
        v6 += 8;
        if (v10 == v11)
          goto LABEL_16;
      }
      __break(1u);
LABEL_18:
      __break(1u);
LABEL_19:
      result = (uint64_t)sub_1CA0B6058(v5);
      v5 = (_QWORD *)result;
      v3[2] = result;
      if (v7 < v6)
        goto LABEL_20;
    }
LABEL_16:
    v3[2] = (uint64_t)v5;
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t sub_1CA12E504(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, _QWORD *a6)
{
  uint64_t v6;
  uint64_t v11;
  uint64_t v12;

  v6 = a4 - a3;
  if (a4 >= a3)
  {
    if (a4 == a3)
      return result;
    v11 = result;
    v12 = 0;
    while (a3 + v12 < a4)
    {
      if (__OFADD__(v12, 1))
        goto LABEL_15;
      result = *(_QWORD *)(a5 + 8);
      if (result < (uint64_t)0xFFFFFFFF80000000)
        goto LABEL_16;
      if (result > 0x7FFFFFFF)
        goto LABEL_17;
      if (!v11)
        goto LABEL_21;
      if ((unsigned __int128)(v12 * (__int128)result) >> 64 != (v12 * result) >> 63)
        goto LABEL_18;
      if (!*a6)
        goto LABEL_22;
      if ((unsigned __int128)((a3 + v12) * (__int128)result) >> 64 != ((a3 + v12) * result) >> 63)
        goto LABEL_19;
      result = cblas_dcopy_NEWLAPACK();
      if (v6 == ++v12)
        return result;
    }
    __break(1u);
LABEL_15:
    __break(1u);
LABEL_16:
    __break(1u);
LABEL_17:
    __break(1u);
LABEL_18:
    __break(1u);
LABEL_19:
    __break(1u);
  }
  __break(1u);
LABEL_21:
  __break(1u);
LABEL_22:
  __break(1u);
  return result;
}

uint64_t MAMatrix.subscript.modify(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *v5;
  uint64_t v6;
  _QWORD *v10;
  uint64_t result;
  BOOL v12;
  BOOL v13;
  uint64_t v14;

  v10 = malloc(0x30uLL);
  *(_QWORD *)a1 = v10;
  v10[4] = a3;
  v10[5] = v4;
  v10[3] = a2;
  if (*v4 < a3)
    goto LABEL_19;
  v6 = a3 - a2;
  if (__OFSUB__(a3, a2))
    goto LABEL_20;
  v3 = v10;
  a1 = v4[1];
  if ((unsigned __int128)(v6 * (__int128)a1) >> 64 != (v6 * a1) >> 63)
    goto LABEL_21;
  v4 = (_QWORD *)v4[2];
  v5 = (_QWORD *)sub_1CA0B4464(v6 * a1, 0.0);
  result = swift_isUniquelyReferenced_nonNull_native();
  if ((result & 1) == 0)
    goto LABEL_22;
  v12 = a3 == a2;
  if (a3 < a2)
  {
LABEL_23:
    __break(1u);
LABEL_24:
    __break(1u);
LABEL_25:
    __break(1u);
LABEL_26:
    __break(1u);
  }
  else
  {
    while (!v12)
    {
      if (a1 < (uint64_t)0xFFFFFFFF80000000)
        goto LABEL_24;
      if (a1 > 0x7FFFFFFF)
        goto LABEL_25;
      v13 = a3 <= a2;
      a3 -= a2;
      if (v13)
        goto LABEL_26;
      v14 = 0;
      v4 += 4;
      while (!__OFADD__(v14, 1))
      {
        if ((unsigned __int128)((a2 + v14) * (__int128)a1) >> 64 != ((a2 + v14) * a1) >> 63)
          goto LABEL_17;
        if ((unsigned __int128)(v14 * (__int128)a1) >> 64 != (v14 * a1) >> 63)
          goto LABEL_18;
        cblas_dcopy_NEWLAPACK();
        if (a3 == ++v14)
          goto LABEL_15;
      }
      __break(1u);
LABEL_17:
      __break(1u);
LABEL_18:
      __break(1u);
LABEL_19:
      __break(1u);
LABEL_20:
      __break(1u);
LABEL_21:
      __break(1u);
LABEL_22:
      result = (uint64_t)sub_1CA0B6058(v5);
      v5 = (_QWORD *)result;
      v12 = a3 == a2;
      if (a3 < a2)
        goto LABEL_23;
    }
LABEL_15:
    *v3 = v6;
    v3[1] = a1;
    v3[2] = v5;
    return (uint64_t)sub_1CA12E77C;
  }
  return result;
}

void sub_1CA12E77C(uint64_t a1, char a2)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;
  _QWORD *v5;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;

  v3 = *(_QWORD **)a1;
  v4 = *(_QWORD *)(*(_QWORD *)a1 + 32);
  v5 = *(_QWORD **)(*(_QWORD *)a1 + 40);
  if ((a2 & 1) != 0)
  {
    if (*v5 < v4)
      goto LABEL_33;
    v2 = (_QWORD *)v5[2];
    swift_bridgeObjectRetain();
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    v5[2] = v2;
    if ((isUniquelyReferenced_nonNull_native & 1) == 0)
      goto LABEL_34;
    while (1)
    {
      v8 = v3[3];
      v7 = v3[4];
      if (v8 == v7)
      {
LABEL_13:
        *(_QWORD *)(v3[5] + 16) = v2;
        swift_bridgeObjectRelease();
        goto LABEL_26;
      }
      v9 = *(_QWORD *)(v3[5] + 8);
      if (v9 < (uint64_t)0xFFFFFFFF80000000)
        break;
      if (v9 > 0x7FFFFFFF)
        goto LABEL_38;
      if (v8 >= v7)
        goto LABEL_39;
      v10 = 0;
      while (!__OFADD__(v10, 1))
      {
        if ((unsigned __int128)(v10 * (__int128)v9) >> 64 != (v10 * v9) >> 63)
          goto LABEL_28;
        if ((unsigned __int128)((v8 + v10) * (__int128)v9) >> 64 != ((v8 + v10) * v9) >> 63)
          goto LABEL_29;
        v11 = v3[4];
        cblas_dcopy_NEWLAPACK();
        ++v10;
        if (v8 + v10 == v11)
          goto LABEL_13;
      }
      __break(1u);
LABEL_28:
      __break(1u);
LABEL_29:
      __break(1u);
LABEL_30:
      __break(1u);
LABEL_31:
      __break(1u);
LABEL_32:
      __break(1u);
LABEL_33:
      __break(1u);
LABEL_34:
      v18 = v3[5];
      v2 = sub_1CA0B6058(v2);
      *(_QWORD *)(v18 + 16) = v2;
    }
    __break(1u);
LABEL_38:
    __break(1u);
LABEL_39:
    __break(1u);
    goto LABEL_40;
  }
  if (*v5 < v4)
  {
    __break(1u);
  }
  else
  {
    v2 = (_QWORD *)v5[2];
    v12 = swift_isUniquelyReferenced_nonNull_native();
    v5[2] = v2;
    if ((v12 & 1) != 0)
      goto LABEL_16;
  }
  v19 = v3[5];
  v2 = sub_1CA0B6058(v2);
  *(_QWORD *)(v19 + 16) = v2;
LABEL_16:
  v14 = v3[3];
  v13 = v3[4];
  if (v14 != v13)
  {
    v15 = *(_QWORD *)(v3[5] + 8);
    if (v15 < (uint64_t)0xFFFFFFFF80000000)
    {
LABEL_40:
      __break(1u);
      goto LABEL_41;
    }
    if (v15 > 0x7FFFFFFF)
    {
LABEL_41:
      __break(1u);
      goto LABEL_42;
    }
    if (v14 >= v13)
    {
LABEL_42:
      __break(1u);
      return;
    }
    v16 = 0;
    do
    {
      if (__OFADD__(v16, 1))
        goto LABEL_30;
      if ((unsigned __int128)(v16 * (__int128)v15) >> 64 != (v16 * v15) >> 63)
        goto LABEL_31;
      if ((unsigned __int128)((v14 + v16) * (__int128)v15) >> 64 != ((v14 + v16) * v15) >> 63)
        goto LABEL_32;
      v17 = v3[4];
      cblas_dcopy_NEWLAPACK();
      ++v16;
    }
    while (v14 + v16 != v17);
  }
  *(_QWORD *)(v3[5] + 16) = v2;
LABEL_26:
  swift_bridgeObjectRelease();
  free(v3);
}

uint64_t MAMatrix.subscript.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v4;
  uint64_t result;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v4 = *(_QWORD **)(v2 + 16);
  result = swift_isUniquelyReferenced_nonNull_native();
  *(_QWORD *)(v2 + 16) = v4;
  if ((result & 1) == 0)
    goto LABEL_13;
  v6 = *(_QWORD *)(a2 + 16);
  if (v6)
  {
    while (1)
    {
      v7 = *(_QWORD *)(v2 + 8);
      if (v7 < (uint64_t)0xFFFFFFFF80000000)
        break;
      if (v7 > 0x7FFFFFFF)
        goto LABEL_16;
      swift_bridgeObjectRetain();
      v8 = 0;
      while ((unsigned __int128)(v8 * (__int128)v7) >> 64 == (v8 * v7) >> 63)
      {
        if ((unsigned __int128)(*(uint64_t *)(a2 + 8 * v8 + 32) * (__int128)v7) >> 64 != (*(_QWORD *)(a2 + 8 * v8 + 32)
                                                                                        * v7) >> 63)
          goto LABEL_12;
        ++v8;
        cblas_dcopy_NEWLAPACK();
        if (v6 == v8)
        {
          swift_bridgeObjectRelease();
          goto LABEL_10;
        }
      }
      __break(1u);
LABEL_12:
      __break(1u);
LABEL_13:
      result = (uint64_t)sub_1CA0B6058(v4);
      v4 = (_QWORD *)result;
      *(_QWORD *)(v2 + 16) = result;
      v6 = *(_QWORD *)(a2 + 16);
      if (!v6)
        goto LABEL_10;
    }
    __break(1u);
LABEL_16:
    __break(1u);
  }
  else
  {
LABEL_10:
    *(_QWORD *)(v2 + 16) = v4;
    swift_bridgeObjectRelease();
    return swift_bridgeObjectRelease();
  }
  return result;
}

{
  uint64_t *v2;
  _QWORD *v4;
  uint64_t result;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;

  v4 = (_QWORD *)v2[2];
  result = swift_isUniquelyReferenced_nonNull_native();
  v2[2] = (uint64_t)v4;
  if ((result & 1) != 0)
  {
    v6 = *(_QWORD *)(a2 + 16);
    if (v6)
      goto LABEL_3;
LABEL_11:
    v2[2] = (uint64_t)v4;
    swift_bridgeObjectRelease();
    return swift_bridgeObjectRelease();
  }
  result = (uint64_t)sub_1CA0B6058(v4);
  v4 = (_QWORD *)result;
  v2[2] = result;
  v6 = *(_QWORD *)(a2 + 16);
  if (!v6)
    goto LABEL_11;
LABEL_3:
  if (*v2 > 0x7FFFFFFF)
  {
    __break(1u);
    goto LABEL_15;
  }
  if (*v2 < (uint64_t)0xFFFFFFFF80000000)
  {
LABEL_15:
    __break(1u);
    goto LABEL_16;
  }
  if (v6 >> 31)
  {
LABEL_16:
    __break(1u);
    goto LABEL_17;
  }
  v7 = v2[1];
  if (v7 < (uint64_t)0xFFFFFFFF80000000)
  {
LABEL_17:
    __break(1u);
    goto LABEL_18;
  }
  if (v7 <= 0x7FFFFFFF)
  {
    swift_bridgeObjectRetain();
    v8 = 32;
    v9 = v6;
    do
    {
      cblas_dcopy_NEWLAPACK();
      v8 += 8;
      --v9;
    }
    while (v9);
    swift_bridgeObjectRelease();
    goto LABEL_11;
  }
LABEL_18:
  __break(1u);
  return result;
}

uint64_t sub_1CA12EC00(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, _QWORD *a5)
{
  uint64_t v5;
  uint64_t v9;
  uint64_t v10;

  v5 = *(_QWORD *)(a3 + 16);
  if (v5)
  {
    v9 = result;
    swift_bridgeObjectRetain();
    v10 = 0;
    while (1)
    {
      result = *(_QWORD *)(a4 + 8);
      if (result < (uint64_t)0xFFFFFFFF80000000)
        break;
      if (result > 0x7FFFFFFF)
        goto LABEL_13;
      if (!v9)
        goto LABEL_16;
      if ((unsigned __int128)(v10 * (__int128)result) >> 64 != (v10 * result) >> 63)
        goto LABEL_14;
      if (!*a5)
        goto LABEL_17;
      if ((unsigned __int128)(*(uint64_t *)(a3 + 8 * v10 + 32) * (__int128)result) >> 64 != (*(_QWORD *)(a3 + 8 * v10 + 32)
                                                                                           * result) >> 63)
        goto LABEL_15;
      ++v10;
      cblas_dcopy_NEWLAPACK();
      if (v5 == v10)
        return swift_bridgeObjectRelease();
    }
    __break(1u);
LABEL_13:
    __break(1u);
LABEL_14:
    __break(1u);
LABEL_15:
    __break(1u);
LABEL_16:
    __break(1u);
LABEL_17:
    __break(1u);
  }
  return result;
}

void sub_1CA12EE30(uint64_t a1, char a2)
{
  _QWORD *v3;
  uint64_t v4;
  _QWORD *v5;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  v3 = *(_QWORD **)a1;
  v4 = *(_QWORD *)(*(_QWORD *)a1 + 32);
  v5 = *(_QWORD **)(v4 + 16);
  swift_bridgeObjectRetain();
  if ((a2 & 1) != 0)
  {
    swift_bridgeObjectRetain();
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    *(_QWORD *)(v4 + 16) = v5;
    if ((isUniquelyReferenced_nonNull_native & 1) == 0)
      goto LABEL_27;
    if (v3[5])
    {
      while (1)
      {
        v7 = *(_QWORD *)(v3[4] + 8);
        if (v7 < (uint64_t)0xFFFFFFFF80000000)
          break;
        if (v7 > 0x7FFFFFFF)
          goto LABEL_32;
        v8 = v3[3] + 32;
        swift_bridgeObjectRetain();
        v9 = 0;
        while ((unsigned __int128)(v9 * (__int128)v7) >> 64 == (v9 * v7) >> 63)
        {
          if ((unsigned __int128)(*(uint64_t *)(v8 + 8 * v9) * (__int128)v7) >> 64 != (*(_QWORD *)(v8 + 8 * v9) * v7) >> 63)
            goto LABEL_24;
          ++v9;
          v10 = v3[5];
          cblas_dcopy_NEWLAPACK();
          if (v9 == v10)
          {
            swift_bridgeObjectRelease();
            goto LABEL_11;
          }
        }
        __break(1u);
LABEL_24:
        __break(1u);
LABEL_25:
        __break(1u);
LABEL_26:
        __break(1u);
LABEL_27:
        v16 = v3[4];
        v5 = sub_1CA0B6058(v5);
        *(_QWORD *)(v16 + 16) = v5;
        if (!v3[5])
          goto LABEL_11;
      }
      __break(1u);
LABEL_32:
      __break(1u);
      goto LABEL_33;
    }
LABEL_11:
    *(_QWORD *)(v3[4] + 16) = v5;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
LABEL_22:
    swift_bridgeObjectRelease();
    free(v3);
    return;
  }
  v11 = swift_isUniquelyReferenced_nonNull_native();
  *(_QWORD *)(v4 + 16) = v5;
  if ((v11 & 1) != 0)
  {
    if (v3[5])
      goto LABEL_14;
LABEL_21:
    *(_QWORD *)(v3[4] + 16) = v5;
    swift_bridgeObjectRelease();
    goto LABEL_22;
  }
  v17 = v3[4];
  v5 = sub_1CA0B6058(v5);
  *(_QWORD *)(v17 + 16) = v5;
  if (!v3[5])
    goto LABEL_21;
LABEL_14:
  v12 = *(_QWORD *)(v3[4] + 8);
  if (v12 < (uint64_t)0xFFFFFFFF80000000)
  {
LABEL_33:
    __break(1u);
    goto LABEL_34;
  }
  if (v12 <= 0x7FFFFFFF)
  {
    v13 = v3[3] + 32;
    swift_bridgeObjectRetain();
    v14 = 0;
    do
    {
      if ((unsigned __int128)(v14 * (__int128)v12) >> 64 != (v14 * v12) >> 63)
        goto LABEL_25;
      if ((unsigned __int128)(*(uint64_t *)(v13 + 8 * v14) * (__int128)v12) >> 64 != (*(_QWORD *)(v13 + 8 * v14) * v12) >> 63)
        goto LABEL_26;
      ++v14;
      v15 = v3[5];
      cblas_dcopy_NEWLAPACK();
    }
    while (v14 != v15);
    swift_bridgeObjectRelease();
    goto LABEL_21;
  }
LABEL_34:
  __break(1u);
}

uint64_t sub_1CA12F070(uint64_t *a1, _QWORD *a2, uint64_t *a3)
{
  _QWORD *v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t result;

  v6 = *a1;
  if (a1[1] == 1 && v6 == *a2)
  {
    v3 = a2;
    v4 = a2[1];
    if (*a3 < v4)
    {
      v5 = (_QWORD *)a2[2];
      swift_bridgeObjectRetain();
      result = swift_isUniquelyReferenced_nonNull_native();
      v3[2] = v5;
      if ((result & 1) != 0)
        goto LABEL_8;
      goto LABEL_14;
    }
  }
  else
  {
    __break(1u);
  }
  __break(1u);
LABEL_14:
  result = (uint64_t)sub_1CA0B6058(v5);
  v5 = (_QWORD *)result;
  v3[2] = result;
LABEL_8:
  if (v6 > 0x7FFFFFFF)
  {
    __break(1u);
LABEL_16:
    __break(1u);
    goto LABEL_17;
  }
  if (v6 < (uint64_t)0xFFFFFFFF80000000 || v4 < (uint64_t)0xFFFFFFFF80000000)
    goto LABEL_16;
  if (v4 <= 0x7FFFFFFF)
  {
    cblas_dcopy_NEWLAPACK();
    v3[2] = v5;
    return swift_bridgeObjectRelease();
  }
LABEL_17:
  __break(1u);
  return result;
}

void sub_1CA12F238(uint64_t **a1, char a2)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t *v4;
  _QWORD *v5;
  uint64_t v6;
  BOOL v8;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v11;
  char v12;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  v4 = *a1;
  v5 = (_QWORD *)(*a1)[4];
  v6 = **a1;
  v8 = (*a1)[1] != 1 || v6 != *v5;
  if ((a2 & 1) != 0)
  {
    if (v8)
    {
      __break(1u);
    }
    else
    {
      v2 = v5[1];
      if (v2 > v4[3])
      {
        v3 = (_QWORD *)v5[2];
        swift_bridgeObjectRetain();
        isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
        v5[2] = v3;
        if ((isUniquelyReferenced_nonNull_native & 1) != 0)
          goto LABEL_11;
        goto LABEL_31;
      }
    }
    __break(1u);
LABEL_31:
    v15 = v4[4];
    v3 = sub_1CA0B6058(v3);
    *(_QWORD *)(v15 + 16) = v3;
LABEL_11:
    if (v6 > 0x7FFFFFFF)
    {
      __break(1u);
    }
    else if (v6 >= (uint64_t)0xFFFFFFFF80000000 && v2 >= (uint64_t)0xFFFFFFFF80000000)
    {
      if (v2 <= 0x7FFFFFFF)
      {
        v11 = v4[4];
        cblas_dcopy_NEWLAPACK();
        *(_QWORD *)(v11 + 16) = v3;
        swift_bridgeObjectRelease();
LABEL_28:
        swift_bridgeObjectRelease();
        free(v4);
        return;
      }
      goto LABEL_34;
    }
    __break(1u);
LABEL_34:
    __break(1u);
    goto LABEL_35;
  }
  if (v8)
  {
LABEL_35:
    __break(1u);
    goto LABEL_36;
  }
  v2 = v5[1];
  if (v2 > v4[3])
  {
    v3 = (_QWORD *)v5[2];
    v12 = swift_isUniquelyReferenced_nonNull_native();
    v5[2] = v3;
    if ((v12 & 1) != 0)
      goto LABEL_21;
    goto LABEL_37;
  }
LABEL_36:
  __break(1u);
LABEL_37:
  v16 = v4[4];
  v3 = sub_1CA0B6058(v3);
  *(_QWORD *)(v16 + 16) = v3;
LABEL_21:
  if (v6 > 0x7FFFFFFF)
  {
    __break(1u);
LABEL_39:
    __break(1u);
    goto LABEL_40;
  }
  if (v6 < (uint64_t)0xFFFFFFFF80000000 || v2 < (uint64_t)0xFFFFFFFF80000000)
    goto LABEL_39;
  if (v2 <= 0x7FFFFFFF)
  {
    v14 = v4[4];
    cblas_dcopy_NEWLAPACK();
    *(_QWORD *)(v14 + 16) = v3;
    goto LABEL_28;
  }
LABEL_40:
  __break(1u);
}

uint64_t MAMatrix.subscript.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t *v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  int64_t v11;
  uint64_t result;
  uint64_t v13;

  v10 = v4[1];
  if (v10 < a2)
    goto LABEL_19;
  v9 = (_QWORD *)a2;
  v8 = a1;
  v5 = a2 - a1;
  if (__OFSUB__(a2, a1))
    goto LABEL_20;
  v3 = a3;
  v6 = *v4;
  v11 = *v4 * v5;
  if ((unsigned __int128)(*v4 * (__int128)v5) >> 64 != v11 >> 63)
    goto LABEL_21;
  v4 = (uint64_t *)v4[2];
  v7 = (_QWORD *)sub_1CA0B4464(v11, 0.0);
  result = swift_isUniquelyReferenced_nonNull_native();
  if ((result & 1) == 0)
    goto LABEL_22;
  if ((uint64_t)v9 < v8)
  {
LABEL_23:
    __break(1u);
LABEL_24:
    __break(1u);
LABEL_25:
    __break(1u);
LABEL_26:
    __break(1u);
LABEL_27:
    __break(1u);
LABEL_28:
    __break(1u);
  }
  else
  {
    while ((_QWORD *)v8 != v9)
    {
      if (v6 > 0x7FFFFFFF)
        goto LABEL_24;
      if (v10 > 0x7FFFFFFF)
        goto LABEL_25;
      if (v5 < (uint64_t)0xFFFFFFFF80000000
        || v6 < (uint64_t)0xFFFFFFFF80000000
        || v10 < (uint64_t)0xFFFFFFFF80000000)
      {
        goto LABEL_26;
      }
      if (v5 > 0x7FFFFFFF)
        goto LABEL_27;
      if (v8 >= (uint64_t)v9)
        goto LABEL_28;
      v13 = 0;
      v9 = v7 + 4;
      v8 = (uint64_t)&v4[v8 + 4];
      while (!__OFADD__(v13, 1))
      {
        result = cblas_dcopy_NEWLAPACK();
        ++v9;
        ++v13;
        v8 += 8;
        if (v5 == v13)
          goto LABEL_17;
      }
      __break(1u);
LABEL_19:
      __break(1u);
LABEL_20:
      __break(1u);
LABEL_21:
      __break(1u);
LABEL_22:
      result = (uint64_t)sub_1CA0B6058(v7);
      v7 = (_QWORD *)result;
      if ((uint64_t)v9 < v8)
        goto LABEL_23;
    }
LABEL_17:
    *v3 = v6;
    v3[1] = v5;
    v3[2] = (uint64_t)v7;
  }
  return result;
}

double sub_1CA12F54C@<D0>(_QWORD *a1@<X1>, void (*a2)(__int128 *__return_ptr, _QWORD, _QWORD)@<X3>, uint64_t a3@<X8>)
{
  uint64_t v4;
  double result;
  __int128 v6;
  uint64_t v7;

  a2(&v6, *a1, a1[1]);
  v4 = v7;
  result = *(double *)&v6;
  *(_OWORD *)a3 = v6;
  *(_QWORD *)(a3 + 16) = v4;
  return result;
}

uint64_t sub_1CA12F5A4(uint64_t a1, uint64_t *a2, uint64_t *a3)
{
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v9;
  _QWORD v11[2];

  v7 = a3[1];
  if (a2[1] < v7)
  {
    __break(1u);
    goto LABEL_5;
  }
  v3 = a2;
  v4 = *a3;
  v5 = *(_QWORD *)(a1 + 16);
  v6 = (_QWORD *)a2[2];
  swift_bridgeObjectRetain();
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  v3[2] = (uint64_t)v6;
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
LABEL_5:
    v6 = sub_1CA0B6058(v6);
    v3[2] = (uint64_t)v6;
  }
  v9 = v6[2];
  v11[0] = v6 + 4;
  v11[1] = v9;
  sub_1CA12F7A8(v5 + 32, *(_QWORD *)(v5 + 16), v4, v7, v3, v11);
  v3[2] = (uint64_t)v6;
  return swift_bridgeObjectRelease();
}

uint64_t sub_1CA12F7A8(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t *a5, _QWORD *a6)
{
  uint64_t v9;
  uint64_t v10;
  BOOL v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  BOOL v15;
  uint64_t v17;

  v17 = result;
  if (a4 >= a3)
  {
    if (a3 == a4)
      return result;
    v9 = 0;
    v10 = a4 - a3;
    v11 = __OFSUB__(a4, a3);
    v15 = v11;
    v12 = 8 * a3;
    v13 = result;
    while (a3 + v9 < a4)
    {
      if (__OFADD__(v9, 1))
        goto LABEL_21;
      result = *a5;
      if (*a5 < (uint64_t)0xFFFFFFFF80000000)
        goto LABEL_22;
      if (result > 0x7FFFFFFF)
        goto LABEL_23;
      if (!v17)
        goto LABEL_30;
      if (v15)
        goto LABEL_24;
      if (v10 < (uint64_t)0xFFFFFFFF80000000)
        goto LABEL_25;
      if (v10 > 0x7FFFFFFF)
        goto LABEL_26;
      if (!*a6)
        goto LABEL_31;
      v14 = a5[1];
      if (v14 < (uint64_t)0xFFFFFFFF80000000)
        goto LABEL_27;
      if (v14 > 0x7FFFFFFF)
        goto LABEL_28;
      result = cblas_dcopy_NEWLAPACK();
      v13 += 8;
      ++v9;
      v12 += 8;
      if (v10 == v9)
        return result;
    }
    __break(1u);
LABEL_21:
    __break(1u);
LABEL_22:
    __break(1u);
LABEL_23:
    __break(1u);
LABEL_24:
    __break(1u);
LABEL_25:
    __break(1u);
LABEL_26:
    __break(1u);
LABEL_27:
    __break(1u);
LABEL_28:
    __break(1u);
  }
  __break(1u);
LABEL_30:
  __break(1u);
LABEL_31:
  __break(1u);
  return result;
}

uint64_t MAMatrix.subscript.modify(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  uint64_t *v3;
  uint64_t *v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t *v10;
  uint64_t v11;
  uint64_t result;
  uint64_t v13;

  v10 = (uint64_t *)malloc(0x38uLL);
  *(_QWORD *)a1 = v10;
  v10[4] = (uint64_t)a3;
  v10[5] = (uint64_t)v4;
  v10[3] = a2;
  v11 = v4[1];
  if (v11 < (uint64_t)a3)
    goto LABEL_19;
  v3 = v10;
  a1 = *v4;
  v4 = (uint64_t *)v4[2];
  v5 = (uint64_t)a3 - a2;
  v10[6] = (uint64_t)a3 - a2;
  if (__OFSUB__(a3, a2))
    goto LABEL_20;
  if ((unsigned __int128)(a1 * (__int128)v5) >> 64 != (a1 * v5) >> 63)
    goto LABEL_21;
  v6 = (_QWORD *)sub_1CA0B4464(a1 * v5, 0.0);
  result = swift_isUniquelyReferenced_nonNull_native();
  if ((result & 1) == 0)
    goto LABEL_22;
  if ((uint64_t)a3 < a2)
  {
LABEL_23:
    __break(1u);
LABEL_24:
    __break(1u);
LABEL_25:
    __break(1u);
LABEL_26:
    __break(1u);
LABEL_27:
    __break(1u);
LABEL_28:
    __break(1u);
  }
  else
  {
    while ((_QWORD *)a2 != a3)
    {
      if (a1 > 0x7FFFFFFF)
        goto LABEL_24;
      if (v11 > 0x7FFFFFFF)
        goto LABEL_25;
      if (v5 < (uint64_t)0xFFFFFFFF80000000
        || a1 < (uint64_t)0xFFFFFFFF80000000
        || v11 < (uint64_t)0xFFFFFFFF80000000)
      {
        goto LABEL_26;
      }
      if (v5 > 0x7FFFFFFF)
        goto LABEL_27;
      if (a2 >= (uint64_t)a3)
        goto LABEL_28;
      v13 = 0;
      a3 = v6 + 4;
      a2 = (uint64_t)&v4[a2 + 4];
      while (!__OFADD__(v13, 1))
      {
        cblas_dcopy_NEWLAPACK();
        ++a3;
        ++v13;
        a2 += 8;
        if (v5 == v13)
          goto LABEL_17;
      }
      __break(1u);
LABEL_19:
      __break(1u);
LABEL_20:
      __break(1u);
LABEL_21:
      __break(1u);
LABEL_22:
      result = (uint64_t)sub_1CA0B6058(v6);
      v6 = (_QWORD *)result;
      if ((uint64_t)a3 < a2)
        goto LABEL_23;
    }
LABEL_17:
    *v3 = a1;
    v3[1] = v5;
    v3[2] = (uint64_t)v6;
    return (uint64_t)sub_1CA12FA78;
  }
  return result;
}

void sub_1CA12FA78(uint64_t a1, char a2)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;

  v3 = *(_QWORD **)a1;
  v4 = *(_QWORD *)(*(_QWORD *)a1 + 32);
  v5 = *(_QWORD *)(*(_QWORD *)a1 + 40);
  v6 = *(_QWORD *)(v5 + 8);
  v29 = *(_QWORD *)(*(_QWORD *)a1 + 16);
  if ((a2 & 1) != 0)
  {
    if (v6 < v4)
      goto LABEL_37;
    v2 = *(_QWORD **)(v5 + 16);
    swift_bridgeObjectRetain();
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    *(_QWORD *)(v5 + 16) = v2;
    if ((isUniquelyReferenced_nonNull_native & 1) == 0)
      goto LABEL_38;
    while (1)
    {
      v9 = v3[3];
      v8 = v3[4];
      if (v9 == v8)
      {
LABEL_17:
        *(_QWORD *)(v3[5] + 16) = v2;
        swift_bridgeObjectRelease();
        goto LABEL_34;
      }
      v10 = v3[6];
      if (v10 < (uint64_t)0xFFFFFFFF80000000)
        break;
      if (v10 > 0x7FFFFFFF)
        goto LABEL_42;
      v11 = *(_QWORD *)v3[5];
      if (v11 > 0x7FFFFFFF)
        goto LABEL_43;
      if (v6 < (uint64_t)0xFFFFFFFF80000000 || v11 < (uint64_t)0xFFFFFFFF80000000)
        goto LABEL_44;
      if (v6 > 0x7FFFFFFF)
        goto LABEL_45;
      if (v9 >= v8)
        goto LABEL_46;
      v13 = 0;
      v14 = v29 + 32;
      v15 = (uint64_t)&v2[v9 + 4];
      while (!__OFADD__(v13, 1))
      {
        v16 = v3[4];
        cblas_dcopy_NEWLAPACK();
        v14 += 8;
        ++v13;
        v15 += 8;
        if (v9 + v13 == v16)
          goto LABEL_17;
      }
      __break(1u);
LABEL_36:
      __break(1u);
LABEL_37:
      __break(1u);
LABEL_38:
      v27 = v3[5];
      v2 = sub_1CA0B6058(v2);
      *(_QWORD *)(v27 + 16) = v2;
    }
    __break(1u);
LABEL_42:
    __break(1u);
LABEL_43:
    __break(1u);
LABEL_44:
    __break(1u);
LABEL_45:
    __break(1u);
LABEL_46:
    __break(1u);
    goto LABEL_47;
  }
  if (v6 < v4)
  {
    __break(1u);
  }
  else
  {
    v2 = *(_QWORD **)(v5 + 16);
    v17 = swift_isUniquelyReferenced_nonNull_native();
    *(_QWORD *)(v5 + 16) = v2;
    if ((v17 & 1) != 0)
      goto LABEL_20;
  }
  v28 = v3[5];
  v2 = sub_1CA0B6058(v2);
  *(_QWORD *)(v28 + 16) = v2;
LABEL_20:
  v19 = v3[3];
  v18 = v3[4];
  if (v19 != v18)
  {
    v20 = v3[6];
    if (v20 < (uint64_t)0xFFFFFFFF80000000)
    {
LABEL_47:
      __break(1u);
      goto LABEL_48;
    }
    if (v20 > 0x7FFFFFFF)
    {
LABEL_48:
      __break(1u);
      goto LABEL_49;
    }
    v21 = *(_QWORD *)v3[5];
    if (v21 > 0x7FFFFFFF)
    {
LABEL_49:
      __break(1u);
LABEL_50:
      __break(1u);
      goto LABEL_51;
    }
    if (v6 < (uint64_t)0xFFFFFFFF80000000 || v21 < (uint64_t)0xFFFFFFFF80000000)
      goto LABEL_50;
    if (v6 > 0x7FFFFFFF)
    {
LABEL_51:
      __break(1u);
      goto LABEL_52;
    }
    if (v19 >= v18)
    {
LABEL_52:
      __break(1u);
      return;
    }
    v23 = 0;
    v24 = v29 + 32;
    v25 = (uint64_t)&v2[v19 + 4];
    do
    {
      if (__OFADD__(v23, 1))
        goto LABEL_36;
      v26 = v3[4];
      cblas_dcopy_NEWLAPACK();
      v24 += 8;
      ++v23;
      v25 += 8;
    }
    while (v19 + v23 != v26);
  }
  *(_QWORD *)(v3[5] + 16) = v2;
LABEL_34:
  swift_bridgeObjectRelease();
  free(v3);
}

double sub_1CA12FD08@<D0>(uint64_t *a1@<X1>, void (*a2)(__int128 *__return_ptr, uint64_t)@<X3>, uint64_t a3@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  double result;
  __int128 v8;
  uint64_t v9;

  v5 = *a1;
  swift_bridgeObjectRetain();
  a2(&v8, v5);
  swift_bridgeObjectRelease();
  v6 = v9;
  result = *(double *)&v8;
  *(_OWORD *)a3 = v8;
  *(_QWORD *)(a3 + 16) = v6;
  return result;
}

uint64_t sub_1CA12FD84(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4, void (*a5)(uint64_t, _QWORD, uint64_t, uint64_t, _QWORD *))
{
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v11;
  _QWORD v13[2];

  v7 = *a3;
  v8 = *(_QWORD *)(a1 + 16);
  v9 = *(_QWORD **)(a2 + 16);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  *(_QWORD *)(a2 + 16) = v9;
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
    v9 = sub_1CA0B6058(v9);
    *(_QWORD *)(a2 + 16) = v9;
  }
  v11 = v9[2];
  v13[0] = v9 + 4;
  v13[1] = v11;
  a5(v8 + 32, *(_QWORD *)(v8 + 16), v7, a2, v13);
  *(_QWORD *)(a2 + 16) = v9;
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

uint64_t sub_1CA12FF54(uint64_t result, uint64_t a2, uint64_t a3, uint64_t *a4, _QWORD *a5)
{
  unint64_t v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t i;
  uint64_t v10;

  v5 = *(_QWORD *)(a3 + 16);
  if (v5)
  {
    v7 = result;
    swift_bridgeObjectRetain();
    v8 = 0;
    for (i = v7; ; i += 8)
    {
      result = *a4;
      if (*a4 < (uint64_t)0xFFFFFFFF80000000)
        break;
      if (result > 0x7FFFFFFF)
        goto LABEL_14;
      if (!v7)
        goto LABEL_18;
      if (v5 >> 31)
        goto LABEL_15;
      if (!*a5)
        goto LABEL_19;
      v10 = a4[1];
      if (v10 < (uint64_t)0xFFFFFFFF80000000)
        goto LABEL_16;
      if (v10 > 0x7FFFFFFF)
        goto LABEL_17;
      ++v8;
      cblas_dcopy_NEWLAPACK();
      if (v5 == v8)
        return swift_bridgeObjectRelease();
    }
    __break(1u);
LABEL_14:
    __break(1u);
LABEL_15:
    __break(1u);
LABEL_16:
    __break(1u);
LABEL_17:
    __break(1u);
LABEL_18:
    __break(1u);
LABEL_19:
    __break(1u);
  }
  return result;
}

void sub_1CA130194(uint64_t a1, char a2)
{
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char v14;
  unint64_t v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;

  v3 = *(_QWORD **)a1;
  v4 = *(_QWORD *)(*(_QWORD *)a1 + 32);
  v5 = *(_QWORD *)(*(_QWORD *)a1 + 16);
  v6 = *(_QWORD **)(v4 + 16);
  swift_bridgeObjectRetain();
  if ((a2 & 1) != 0)
  {
    swift_bridgeObjectRetain();
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    *(_QWORD *)(v4 + 16) = v6;
    if ((isUniquelyReferenced_nonNull_native & 1) != 0)
    {
      v8 = v3[5];
      if (v8)
        goto LABEL_4;
    }
    else
    {
      v21 = v3[4];
      v6 = sub_1CA0B6058(v6);
      *(_QWORD *)(v21 + 16) = v6;
      v8 = v3[5];
      if (v8)
      {
LABEL_4:
        if (v8 >> 31)
        {
          __break(1u);
        }
        else
        {
          v9 = (uint64_t *)v3[4];
          if (*v9 >= (uint64_t)0xFFFFFFFF80000000)
          {
            if (*v9 <= 0x7FFFFFFF)
            {
              v10 = v9[1];
              if (v10 >= (uint64_t)0xFFFFFFFF80000000)
              {
                if (v10 <= 0x7FFFFFFF)
                {
                  v11 = v5 + 32;
                  swift_bridgeObjectRetain();
                  v12 = 0;
                  do
                  {
                    v13 = v3[5];
                    ++v12;
                    cblas_dcopy_NEWLAPACK();
                    v11 += 8;
                  }
                  while (v12 != v13);
                  swift_bridgeObjectRelease();
                  goto LABEL_12;
                }
                goto LABEL_33;
              }
LABEL_32:
              __break(1u);
LABEL_33:
              __break(1u);
              goto LABEL_34;
            }
LABEL_31:
            __break(1u);
            goto LABEL_32;
          }
        }
        __break(1u);
        goto LABEL_31;
      }
    }
LABEL_12:
    *(_QWORD *)(v3[4] + 16) = v6;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
LABEL_24:
    swift_bridgeObjectRelease();
    free(v3);
    return;
  }
  v14 = swift_isUniquelyReferenced_nonNull_native();
  *(_QWORD *)(v4 + 16) = v6;
  if ((v14 & 1) != 0)
  {
    v15 = v3[5];
    if (v15)
      goto LABEL_15;
LABEL_23:
    *(_QWORD *)(v3[4] + 16) = v6;
    swift_bridgeObjectRelease();
    goto LABEL_24;
  }
  v22 = v3[4];
  v6 = sub_1CA0B6058(v6);
  *(_QWORD *)(v22 + 16) = v6;
  v15 = v3[5];
  if (!v15)
    goto LABEL_23;
LABEL_15:
  if (v15 >> 31)
  {
LABEL_34:
    __break(1u);
    goto LABEL_35;
  }
  v16 = (uint64_t *)v3[4];
  if (*v16 < (uint64_t)0xFFFFFFFF80000000)
  {
LABEL_35:
    __break(1u);
    goto LABEL_36;
  }
  if (*v16 > 0x7FFFFFFF)
  {
LABEL_36:
    __break(1u);
    goto LABEL_37;
  }
  v17 = v16[1];
  if (v17 < (uint64_t)0xFFFFFFFF80000000)
  {
LABEL_37:
    __break(1u);
    goto LABEL_38;
  }
  if (v17 <= 0x7FFFFFFF)
  {
    v18 = v5 + 32;
    swift_bridgeObjectRetain();
    v19 = 0;
    do
    {
      v20 = v3[5];
      ++v19;
      cblas_dcopy_NEWLAPACK();
      v18 += 8;
    }
    while (v19 != v20);
    swift_bridgeObjectRelease();
    goto LABEL_23;
  }
LABEL_38:
  __break(1u);
}

uint64_t MAMatrix.contents.getter()
{
  uint64_t *v0;
  uint64_t v1;
  int64_t v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t result;
  uint64_t v7;
  _QWORD *v8;
  _QWORD *v9;
  char isUniquelyReferenced_nonNull_native;

  v1 = *v0;
  v2 = v0[1];
  v3 = v0[2];
  v4 = sub_1CA0B4464(v2, 0.0);
  v5 = (_QWORD *)sub_1CA0B4828(v4, v1);
  result = swift_isUniquelyReferenced_nonNull_native();
  if ((result & 1) == 0)
    goto LABEL_13;
  if (v1 < 0)
  {
LABEL_14:
    __break(1u);
LABEL_15:
    __break(1u);
LABEL_16:
    __break(1u);
  }
  else
  {
    while (v1)
    {
      if (v2 < (uint64_t)0xFFFFFFFF80000000)
        goto LABEL_15;
      if (v2 > 0x7FFFFFFF)
        goto LABEL_16;
      v7 = 0;
      v3 += 32;
      v8 = v5 + 4;
      while (1)
      {
        v9 = (_QWORD *)v8[v7];
        isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
        v8[v7] = v9;
        if ((isUniquelyReferenced_nonNull_native & 1) == 0)
        {
          v9 = sub_1CA0B6058(v9);
          v8[v7] = v9;
        }
        if ((unsigned __int128)(v7 * (__int128)v2) >> 64 != (v7 * v2) >> 63)
          break;
        cblas_dcopy_NEWLAPACK();
        v8[v7++] = v9;
        if (v1 == v7)
          return (uint64_t)v5;
      }
      __break(1u);
LABEL_13:
      result = (uint64_t)sub_1CA0B60D0(v5);
      v5 = (_QWORD *)result;
      if (v1 < 0)
        goto LABEL_14;
    }
    return (uint64_t)v5;
  }
  return result;
}

uint64_t MAMatrix.values.getter()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t result;

  v1 = v0[1];
  v2 = *v0 * v1;
  if ((unsigned __int128)(*v0 * (__int128)v1) >> 64 == v2 >> 63)
  {
    v0 = (uint64_t *)sub_1CA0B4464(*v0 * v1, 0.0);
    result = swift_isUniquelyReferenced_nonNull_native();
    if ((result & 1) != 0)
      goto LABEL_3;
  }
  else
  {
    __break(1u);
  }
  result = (uint64_t)sub_1CA0B6058(v0);
  v0 = (uint64_t *)result;
LABEL_3:
  if (v2 < (uint64_t)0xFFFFFFFF80000000)
  {
    __break(1u);
  }
  else if (v2 <= 0x7FFFFFFF)
  {
    cblas_dcopy_NEWLAPACK();
    return (uint64_t)v0;
  }
  __break(1u);
  return result;
}

uint64_t MAMatrix.indices(_:)(uint64_t (*a1)(unint64_t, double))
{
  uint64_t v2;
  uint64_t v3;
  int64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v11;

  v2 = swift_bridgeObjectRetain();
  v3 = sub_1CA13B5F8(v2, a1);
  v4 = *(_QWORD *)(v3 + 16);
  if (v4)
  {
    v11 = MEMORY[0x1E0DEE9D8];
    sub_1CA0CD534(0, v4, 0);
    v5 = v11;
    v6 = *(_QWORD *)(v11 + 16);
    v7 = 32;
    do
    {
      v8 = *(_QWORD *)(v3 + v7);
      v9 = *(_QWORD *)(v11 + 24);
      if (v6 >= v9 >> 1)
        sub_1CA0CD534(v9 > 1, v6 + 1, 1);
      *(_QWORD *)(v11 + 16) = v6 + 1;
      *(_QWORD *)(v11 + 8 * v6 + 32) = v8;
      v7 += 16;
      ++v6;
      --v4;
    }
    while (v4);
    swift_bridgeObjectRelease();
  }
  else
  {
    swift_bridgeObjectRelease();
    return MEMORY[0x1E0DEE9D8];
  }
  return v5;
}

uint64_t MAMatrix.description.getter()
{
  return MAMatrix.description(integerPrecision:doublePrecision:)(20, 10)._countAndFlagsBits;
}

uint64_t sub_1CA130700()
{
  return MAMatrix.description(integerPrecision:doublePrecision:)(20, 10)._countAndFlagsBits;
}

void MAMatrix.makeIterator()()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;

  v1 = *v0;
  v2 = v0[1];
  v3 = *v0 * v2;
  if ((unsigned __int128)(*v0 * (__int128)v2) >> 64 == v3 >> 63)
  {
    v4 = v0[2];
    v5 = swift_allocObject();
    *(_QWORD *)(v5 + 16) = 0;
    v6 = (_QWORD *)swift_allocObject();
    v6[2] = v5;
    v6[3] = v3;
    v6[4] = v1;
    v6[5] = v2;
    v6[6] = v4;
    __swift_instantiateConcreteTypeFromMangledName(&qword_1EF937D28);
    v7 = swift_allocObject();
    *(_QWORD *)(v7 + 16) = sub_1CA0E1FCC;
    *(_QWORD *)(v7 + 24) = v6;
    swift_bridgeObjectRetain();
  }
  else
  {
    __break(1u);
  }
}

uint64_t sub_1CA1307F8@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X4>, uint64_t a4@<X8>)
{
  unint64_t v4;
  uint64_t v5;

  v4 = *(_QWORD *)(result + 16);
  if (v4 == a2)
  {
    v5 = 0;
LABEL_7:
    *(_QWORD *)a4 = v5;
    *(_BYTE *)(a4 + 8) = v4 == a2;
    return result;
  }
  if (__OFADD__(v4, 1))
  {
    __break(1u);
    goto LABEL_9;
  }
  *(_QWORD *)(result + 16) = v4 + 1;
  if ((v4 & 0x8000000000000000) != 0)
  {
LABEL_9:
    __break(1u);
    goto LABEL_10;
  }
  if (v4 < *(_QWORD *)(a3 + 16))
  {
    v5 = *(_QWORD *)(a3 + 8 * v4 + 32);
    goto LABEL_7;
  }
LABEL_10:
  __break(1u);
  return result;
}

uint64_t MAMatrix.sorted(by:)@<X0>(uint64_t (*a1)(__n128, double)@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t result;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v9 = *(_QWORD *)(v2 + 16);
  swift_bridgeObjectRetain_n();
  sub_1CA13BE74(&v9, a1);
  if (v3)
  {
    swift_bridgeObjectRelease();
    return swift_release();
  }
  else
  {
    result = swift_bridgeObjectRelease();
    v7 = v9;
    v8 = *(_QWORD *)(v9 + 16);
    *a2 = 1;
    a2[1] = v8;
    a2[2] = v7;
  }
  return result;
}

void sub_1CA1308F8(uint64_t *a1@<X8>)
{
  uint64_t *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;

  v3 = *v1;
  v4 = v1[1];
  v5 = *v1 * v4;
  if ((unsigned __int128)(*v1 * (__int128)v4) >> 64 == v5 >> 63)
  {
    v6 = v1[2];
    v7 = swift_allocObject();
    *(_QWORD *)(v7 + 16) = 0;
    v8 = (_QWORD *)swift_allocObject();
    v8[2] = v7;
    v8[3] = v5;
    v8[4] = v3;
    v8[5] = v4;
    v8[6] = v6;
    __swift_instantiateConcreteTypeFromMangledName(&qword_1EF937D28);
    v9 = swift_allocObject();
    *(_QWORD *)(v9 + 16) = sub_1CA0E1FCC;
    *(_QWORD *)(v9 + 24) = v8;
    *a1 = v9;
  }
  else
  {
    __break(1u);
  }
}

uint64_t sub_1CA1309B0()
{
  uint64_t *v0;
  uint64_t v1;

  v1 = sub_1CA0DE570(*v0, v0[1], v0[2]);
  swift_bridgeObjectRelease();
  return v1;
}

uint64_t sub_1CA1309E8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t *v3;

  return sub_1CA127CFC(a1, a2, a3, *v3, v3[1], v3[2]);
}

BOOL static MAMatrix.== infix(_:_:)(_QWORD *a1, _QWORD *a2)
{
  return *a1 == *a2 && a1[1] == a2[1] && sub_1CA0B5290(a1[2], a2[2]);
}

BOOL sub_1CA130A1C(_QWORD *a1, _QWORD *a2)
{
  return *a1 == *a2 && a1[1] == a2[1] && sub_1CA0B5290(a1[2], a2[2]);
}

Swift::Void __swiftcall MAMatrix.inverse()()
{
  _QWORD *v0;
  uint64_t *v1;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v3;
  _QWORD v4[2];

  if (*v1 != v1[1])
  {
    __break(1u);
    goto LABEL_5;
  }
  v0 = (_QWORD *)v1[2];
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  v1[2] = (uint64_t)v0;
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
LABEL_5:
    v0 = sub_1CA0B6058(v0);
    v1[2] = (uint64_t)v0;
  }
  v3 = v0[2];
  v4[0] = v0 + 4;
  v4[1] = v3;
  sub_1CA130AC4((uint64_t)v4, v1);
  v1[2] = (uint64_t)v0;
}

uint64_t sub_1CA130AC4(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  int64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;

  v3 = *a2;
  if ((unsigned __int128)(v3 * (__int128)v3) >> 64 != (v3 * v3) >> 63)
  {
    __break(1u);
    goto LABEL_13;
  }
  v4 = sub_1CA0B4740(0, v3 * v3);
  v5 = a2[1];
  v6 = v5 * v5;
  if ((unsigned __int128)(v5 * (__int128)v5) >> 64 != (v5 * v5) >> 63)
  {
LABEL_13:
    __break(1u);
    goto LABEL_14;
  }
  if (v6 < (uint64_t)0xFFFFFFFF80000000)
  {
LABEL_14:
    __break(1u);
    goto LABEL_15;
  }
  if (v6 > 0x7FFFFFFF)
  {
LABEL_15:
    __break(1u);
    goto LABEL_16;
  }
  v7 = sub_1CA0B4464(v6, 0.0);
  v8 = a2[1];
  if (v8 < (uint64_t)0xFFFFFFFF80000000)
  {
LABEL_16:
    __break(1u);
LABEL_17:
    __break(1u);
  }
  if (v8 > 0x7FFFFFFF)
    goto LABEL_17;
  v9 = (_QWORD *)v7;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    sub_1CA0E6390(0, *(_QWORD *)(v4 + 16), 0, (char *)v4);
  dgetrf_NEWLAPACK();
  swift_bridgeObjectRetain();
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    sub_1CA0E5894(0, v9[2], 0, v9);
  dgetri_NEWLAPACK();
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease_n();
}

Swift::Void __swiftcall MAMatrix.setDiag(value:)(Swift::Double value)
{
  unint64_t *v1;
  unint64_t v2;
  uint64_t v3;
  _QWORD v4[3];
  KnowledgeGraphKit::MAMatrix v5;

  v2 = *v1;
  if (*v1 == v1[1])
  {
    v3 = sub_1CA0B4464(*v1, value);
    v4[0] = 1;
    v4[1] = v2;
    v4[2] = v3;
    v5.rows = (Swift::Int)v4;
    MAMatrix.setDiag(vector:)(v5);
    swift_bridgeObjectRelease();
  }
  else
  {
    __break(1u);
  }
}

KnowledgeGraphKit::MAMatrix __swiftcall MAMatrix.triu()()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  _QWORD *v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  int64_t v7;
  uint64_t v8;
  Swift::Int v9;
  Swift::Int v10;
  void *v11;
  _QWORD v12[2];
  KnowledgeGraphKit::MAMatrix result;

  v4 = v0;
  v6 = *v1;
  v5 = v1[1];
  v7 = v5 * *v1;
  if ((unsigned __int128)(v5 * (__int128)*v1) >> 64 != v7 >> 63)
  {
    __break(1u);
    goto LABEL_5;
  }
  v1 = (uint64_t *)v1[2];
  v3 = (_QWORD *)sub_1CA0B4464(v7, 0.0);
  v2 = v1[2];
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
LABEL_5:
    v3 = sub_1CA0B6058(v3);
  v8 = v3[2];
  v12[0] = v3 + 4;
  v12[1] = v8;
  v9 = sub_1CA130D78((uint64_t)v12, (uint64_t)(v1 + 4), v2, v6, v5);
  *v4 = v5;
  v4[1] = v6;
  v4[2] = (uint64_t)v3;
  result.elements._rawValue = v11;
  result.columns = v10;
  result.rows = v9;
  return result;
}

uint64_t sub_1CA130D78(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  BOOL v11;
  uint64_t v12;

  if (!a2)
    goto LABEL_25;
  if (!*(_QWORD *)result)
  {
LABEL_26:
    __break(1u);
    return result;
  }
  v5 = a4 - 1;
  if (__OFSUB__(a4, 1))
    goto LABEL_23;
  if (v5 < 0)
  {
LABEL_24:
    __break(1u);
LABEL_25:
    __break(1u);
    goto LABEL_26;
  }
  if (a4 != 1)
  {
    v7 = 0;
    v8 = a5 ^ 0x8000000000000000;
    while (1)
    {
      v9 = a5 - v7;
      if (__OFSUB__(a5, v7))
        break;
      if (v8 == v7)
        goto LABEL_17;
      v10 = v7 * a5;
      if ((unsigned __int128)(v7 * (__int128)a5) >> 64 != (v7 * a5) >> 63)
        goto LABEL_18;
      v11 = __OFADD__(v10, v7);
      v12 = v10 + v7;
      if (v11)
        goto LABEL_19;
      if (__OFADD__(v12, 1))
        goto LABEL_20;
      result = v9 - 1;
      if (v9 - 1 < (uint64_t)0xFFFFFFFF80000000)
        goto LABEL_21;
      if (result > 0x7FFFFFFF)
        goto LABEL_22;
      ++v7;
      result = cblas_dcopy_NEWLAPACK();
      if (v5 == v7)
        return result;
    }
    __break(1u);
LABEL_17:
    __break(1u);
LABEL_18:
    __break(1u);
LABEL_19:
    __break(1u);
LABEL_20:
    __break(1u);
LABEL_21:
    __break(1u);
LABEL_22:
    __break(1u);
LABEL_23:
    __break(1u);
    goto LABEL_24;
  }
  return result;
}

KnowledgeGraphKit::MAMatrix __swiftcall MAMatrix.tril()()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  int64_t v6;
  Swift::Int isUniquelyReferenced_nonNull_native;
  Swift::Int v8;
  void *v9;
  BOOL v10;
  Swift::Int v11;
  KnowledgeGraphKit::MAMatrix result;

  v3 = v0;
  v4 = *v1;
  v5 = v1[1];
  v6 = v5 * *v1;
  if ((unsigned __int128)(v5 * (__int128)*v1) >> 64 != v6 >> 63)
    goto LABEL_12;
  v2 = v1[2];
  v1 = (uint64_t *)sub_1CA0B4464(v6, 0.0);
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
    goto LABEL_13;
  v10 = v4 == 1;
  if (v4 < 1)
  {
LABEL_14:
    __break(1u);
  }
  else
  {
    while (!v10)
    {
      v2 += 32;
      isUniquelyReferenced_nonNull_native = 1;
      while (isUniquelyReferenced_nonNull_native != 0x80000000)
      {
        if ((unsigned __int128)(isUniquelyReferenced_nonNull_native * (__int128)v5) >> 64 != (isUniquelyReferenced_nonNull_native
                                                                                             * v5) >> 63)
          goto LABEL_11;
        v11 = isUniquelyReferenced_nonNull_native + 1;
        cblas_dcopy_NEWLAPACK();
        isUniquelyReferenced_nonNull_native = v11;
        if (v4 == v11)
          goto LABEL_9;
      }
      __break(1u);
LABEL_11:
      __break(1u);
LABEL_12:
      __break(1u);
LABEL_13:
      isUniquelyReferenced_nonNull_native = (Swift::Int)sub_1CA0B6058(v1);
      v1 = (uint64_t *)isUniquelyReferenced_nonNull_native;
      v10 = v4 == 1;
      if (v4 < 1)
        goto LABEL_14;
    }
LABEL_9:
    *v3 = v5;
    v3[1] = v4;
    v3[2] = (uint64_t)v1;
  }
  result.elements._rawValue = v9;
  result.columns = v8;
  result.rows = isUniquelyReferenced_nonNull_native;
  return result;
}

void __swiftcall MAMatrix.evd()(Swift::tuple_values_KnowledgeGraphKit_MAMatrix_vectors_KnowledgeGraphKit_MAMatrix *__return_ptr retstr)
{
  int64_t *v1;
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *v5;
  int64_t v6;
  int64_t *v7;
  int64_t *v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  int64_t v12;
  Swift::OpaquePointer v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  _QWORD *v18;
  char v19;
  uint64_t rawValue;
  int64_t v21;
  _QWORD *v22;
  int v23;
  double v24;
  int v25;
  int v26;
  int v27;
  int v28;
  int v29;
  uint64_t v30;

  v30 = *MEMORY[0x1E0C80C00];
  v6 = *v1;
  if (*v1 != v1[1])
  {
    __break(1u);
    goto LABEL_36;
  }
  if (v6 < (uint64_t)0xFFFFFFFF80000000)
  {
LABEL_36:
    __break(1u);
    goto LABEL_37;
  }
  if (v6 <= 0x7FFFFFFF)
  {
    v1 = (int64_t *)v1[2];
    v28 = v6;
    v29 = v6;
    v26 = v6;
    v27 = v6;
    v3 = (_QWORD *)sub_1CA0B4464(v6, 0.0);
    v5 = (_QWORD *)sub_1CA0B4464(v6, 0.0);
    v2 = (_QWORD *)sub_1CA0B4464(v6 * v6, 0.0);
    v4 = (_QWORD *)sub_1CA0B4464(v6 * v6, 0.0);
    v25 = 0;
    v24 = 0.0;
    v23 = -1;
    swift_bridgeObjectRetain();
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) != 0)
      goto LABEL_5;
    goto LABEL_38;
  }
LABEL_37:
  __break(1u);
LABEL_38:
  v1 = sub_1CA0B6058(v1);
LABEL_5:
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    v3 = sub_1CA0B6058(v3);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    v5 = sub_1CA0B6058(v5);
  v7 = v1;
  v8 = v3 + 4;
  v9 = v5 + 4;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    v2 = sub_1CA0B6058(v2);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    v4 = sub_1CA0B6058(v4);
  dgeev_NEWLAPACK();
  if ((~*(_QWORD *)&v24 & 0x7FF0000000000000) == 0)
  {
    __break(1u);
    goto LABEL_40;
  }
  if (v24 <= -2147483650.0)
  {
LABEL_40:
    __break(1u);
    goto LABEL_41;
  }
  if (v24 < 2147483650.0)
  {
    v23 = (int)v24;
    v9 = (_QWORD *)sub_1CA0B4464((int)v24, 0.0);
    v8 = v7;
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) != 0)
      goto LABEL_17;
    goto LABEL_42;
  }
LABEL_41:
  __break(1u);
LABEL_42:
  sub_1CA0B6058(v8);
LABEL_17:
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    v3 = sub_1CA0B6058(v3);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    sub_1CA0B6058(v5);
  v18 = v4;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    sub_1CA0B6058(v2);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    v18 = sub_1CA0B6058(v4);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    sub_1CA0E5894(0, v9[2], 0, v9);
  dgeev_NEWLAPACK();
  swift_bridgeObjectRetain_n();
  v10 = sub_1CA0DF06C((uint64_t)v3);
  swift_bridgeObjectRelease();
  rawValue = v10;
  sub_1CA1290F4(&rawValue, sub_1CA13B4F0, sub_1CA139994);
  swift_bridgeObjectRelease();
  v11 = rawValue;
  v12 = *(_QWORD *)(rawValue + 16);
  if (v12)
  {
    rawValue = MEMORY[0x1E0DEE9D8];
    sub_1CA0CD534(0, v12, 0);
    v13._rawValue = (void *)rawValue;
    v14 = *(_QWORD *)(rawValue + 16);
    v15 = 32;
    do
    {
      v16 = *(_QWORD *)(v11 + v15);
      rawValue = (uint64_t)v13._rawValue;
      v17 = *((_QWORD *)v13._rawValue + 3);
      if (v14 >= v17 >> 1)
      {
        sub_1CA0CD534(v17 > 1, v14 + 1, 1);
        v13._rawValue = (void *)rawValue;
      }
      *((_QWORD *)v13._rawValue + 2) = v14 + 1;
      *((_QWORD *)v13._rawValue + v14 + 4) = v16;
      v15 += 16;
      ++v14;
      --v12;
    }
    while (v12);
    swift_release();
    swift_bridgeObjectRelease();
  }
  else
  {
    swift_release();
    swift_bridgeObjectRelease();
    v13._rawValue = (void *)MEMORY[0x1E0DEE9D8];
  }
  rawValue = 1;
  v21 = v6;
  v22 = v3;
  v19 = 1;
  swift_bridgeObjectRetain();
  MAMatrix.swap(indices:axe:)(v13, (KnowledgeGraphKit::MAMatrixAxes)&v19);
  swift_bridgeObjectRelease();
  rawValue = v6;
  v21 = v6;
  v22 = v18;
  v19 = 0;
  swift_bridgeObjectRetain();
  MAMatrix.swap(indices:axe:)(v13, (KnowledgeGraphKit::MAMatrixAxes)&v19);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease_n();
  swift_bridgeObjectRelease();
}

KnowledgeGraphKit::MAMatrix __swiftcall MAMatrix.swap(indices:axe:)(Swift::OpaquePointer indices, KnowledgeGraphKit::MAMatrixAxes axe)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  int64_t v8;
  int v9;
  Swift::Int v10;
  Swift::Int v11;
  void *v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t *v23;
  KnowledgeGraphKit::MAMatrix result;

  v5 = v2;
  v6 = *v3;
  v7 = v3[1];
  v8 = *v3 * v7;
  if ((unsigned __int128)(*v3 * (__int128)v7) >> 64 != v8 >> 63)
  {
LABEL_34:
    __break(1u);
    goto LABEL_35;
  }
  v9 = *(unsigned __int8 *)axe;
  v10 = sub_1CA0B4464(v8, 0.0);
  v13 = (_QWORD *)v10;
  v14 = *((_QWORD *)indices._rawValue + 2);
  if (v9 != 1)
  {
    if (v14 != v6)
    {
LABEL_36:
      __break(1u);
      goto LABEL_37;
    }
    if (!v6)
      goto LABEL_28;
    v23 = v5;
    swift_bridgeObjectRetain();
    if (v7 < 0)
    {
LABEL_37:
      v10 = sub_1CA1F11BC();
      __break(1u);
      goto LABEL_38;
    }
    v19 = 0;
    v20 = (char *)indices._rawValue + 32;
    while (1)
    {
      v21 = *(_QWORD *)&v20[8 * v19];
      swift_bridgeObjectRetain();
      if (v7)
      {
        v22 = sub_1CA1F0B68();
        *(_QWORD *)(v22 + 16) = v7;
        bzero((void *)(v22 + 32), 8 * v7);
        if (v7 > 0x7FFFFFFF)
          break;
      }
      if ((unsigned __int128)(v21 * (__int128)v7) >> 64 != (v21 * v7) >> 63)
        goto LABEL_31;
      cblas_dcopy_NEWLAPACK();
      swift_bridgeObjectRelease();
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        v13 = sub_1CA0B6058(v13);
      if ((unsigned __int128)(v19 * (__int128)v7) >> 64 != (v19 * v7) >> 63)
        goto LABEL_33;
      ++v19;
      cblas_dcopy_NEWLAPACK();
      swift_bridgeObjectRelease();
      if (v6 == v19)
      {
LABEL_27:
        v10 = swift_bridgeObjectRelease();
        v5 = v23;
        goto LABEL_28;
      }
    }
LABEL_30:
    __break(1u);
LABEL_31:
    __break(1u);
LABEL_32:
    __break(1u);
    __break(1u);
LABEL_33:
    __break(1u);
    goto LABEL_34;
  }
  if (v14 != v7)
  {
LABEL_35:
    __break(1u);
    goto LABEL_36;
  }
  if (v7)
  {
    v23 = v5;
    swift_bridgeObjectRetain();
    if ((v6 & 0x8000000000000000) == 0)
    {
      v15 = 32;
      v16 = (unint64_t)v7 >> 31;
      v17 = v7;
      while (1)
      {
        swift_bridgeObjectRetain();
        if (v6)
        {
          v18 = sub_1CA1F0B68();
          *(_QWORD *)(v18 + 16) = v6;
          bzero((void *)(v18 + 32), 8 * v6);
          if (v6 > 0x7FFFFFFF)
          {
            __break(1u);
            goto LABEL_30;
          }
          if (v16)
            goto LABEL_32;
        }
        else if (v16)
        {
          goto LABEL_32;
        }
        cblas_dcopy_NEWLAPACK();
        swift_bridgeObjectRelease();
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
          v13 = sub_1CA0B6058(v13);
        cblas_dcopy_NEWLAPACK();
        swift_bridgeObjectRelease();
        v15 += 8;
        if (!--v17)
          goto LABEL_27;
      }
    }
    goto LABEL_37;
  }
LABEL_28:
  *v5 = v6;
  v5[1] = v7;
  v5[2] = (uint64_t)v13;
LABEL_38:
  result.elements._rawValue = v12;
  result.columns = v11;
  result.rows = v10;
  return result;
}

Swift::Void __swiftcall MAMatrix.signalNormalize(axe:)(KnowledgeGraphKit::MAMatrixAxes axe)
{
  vDSP_Length *v1;
  uint64_t v2;
  uint64_t v3;
  vDSP_Length v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  vDSP_Length v10;
  vDSP_Length v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16[3];
  __int128 v17;
  vDSP_Length v18;
  __int128 v19;
  uint64_t v20;

  if (*(_BYTE *)axe == 1)
  {
    v2 = v1[1];
    v4 = v1[2];
    *(_QWORD *)&v17 = *v1;
    v3 = v17;
    *((_QWORD *)&v17 + 1) = v2;
    v18 = v4;
    LOBYTE(v16[0]) = 1;
    MAMatrix.max(axe:)((KnowledgeGraphKit::MAMatrixAxes)v16);
    v5 = v20;
    v13 = *((_QWORD *)&v19 + 1);
    v14 = v19;
    *(_QWORD *)&v17 = v3;
    *((_QWORD *)&v17 + 1) = v2;
    v18 = v4;
    LOBYTE(v16[0]) = 1;
    MAMatrix.min(axe:)((KnowledgeGraphKit::MAMatrixAxes)v16);
    v7 = *((_QWORD *)&v19 + 1);
    v6 = v19;
    v8 = v20;
    *(_QWORD *)&v17 = v3;
    *((_QWORD *)&v17 + 1) = v2;
    v18 = v4;
    if ((v2 & 0x8000000000000000) == 0)
    {
      LOBYTE(v16[0]) = 1;
      MAMatrix.mean(range:axe:)(0, v2, v16, (uint64_t *)&v19);
      -= infix(_:_:)(v1, (uint64_t)&v19);
      swift_bridgeObjectRelease();
      *(_QWORD *)&v17 = v14;
      *((_QWORD *)&v17 + 1) = v13;
LABEL_6:
      v18 = v5;
      v16[0] = v6;
      v16[1] = v7;
      v16[2] = v8;
      - infix(_:_:)((int64_t *)&v17, v16, (int64_t *)&v19);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      v17 = v19;
      v18 = v20;
      /= infix(_:_:)(v1, (uint64_t)&v17);
      swift_bridgeObjectRelease();
      return;
    }
    __break(1u);
  }
  else
  {
    v10 = v1[1];
    v11 = v1[2];
    *(_QWORD *)&v17 = *v1;
    v9 = v17;
    *((_QWORD *)&v17 + 1) = v10;
    v18 = v11;
    LOBYTE(v16[0]) = 0;
    MAMatrix.max(axe:)((KnowledgeGraphKit::MAMatrixAxes)v16);
    v12 = *((_QWORD *)&v19 + 1);
    v15 = v19;
    v5 = v20;
    *(_QWORD *)&v17 = v9;
    *((_QWORD *)&v17 + 1) = v10;
    v18 = v11;
    LOBYTE(v16[0]) = 0;
    MAMatrix.min(axe:)((KnowledgeGraphKit::MAMatrixAxes)v16);
    v7 = *((_QWORD *)&v19 + 1);
    v6 = v19;
    v8 = v20;
    *(_QWORD *)&v17 = v9;
    *((_QWORD *)&v17 + 1) = v10;
    v18 = v11;
    if ((v9 & 0x8000000000000000) == 0)
    {
      LOBYTE(v16[0]) = 0;
      MAMatrix.mean(range:axe:)(0, v9, v16, (uint64_t *)&v19);
      -= infix(_:_:)(v1, (uint64_t)&v19);
      swift_bridgeObjectRelease();
      *(_QWORD *)&v17 = v15;
      *((_QWORD *)&v17 + 1) = v12;
      goto LABEL_6;
    }
  }
  __break(1u);
}

KnowledgeGraphKit::MAMatrix __swiftcall MAMatrix.min(axe:)(KnowledgeGraphKit::MAMatrixAxes axe)
{
  uint64_t *v1;
  Swift::Int v2;
  Swift::Int v3;
  void *v4;
  KnowledgeGraphKit::MAMatrix result;

  v2 = sub_1CA1319FC((_BYTE *)axe, (void (*)(unint64_t, uint64_t, _QWORD *, uint64_t *, uint64_t))MEMORY[0x1E0C8C240], v1);
  result.elements._rawValue = v4;
  result.columns = v3;
  result.rows = v2;
  return result;
}

uint64_t sub_1CA1319FC@<X0>(_BYTE *a1@<X0>, void (*a2)(unint64_t, uint64_t, _QWORD *, uint64_t *, uint64_t)@<X1>, uint64_t *a3@<X8>)
{
  unint64_t *v3;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t result;
  _QWORD *v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD v17[2];

  v17[1] = *MEMORY[0x1E0C80C00];
  v7 = *v3;
  v6 = v3[1];
  v8 = v3[2];
  if (*a1 == 1)
  {
    result = sub_1CA0B4464(v3[1], 0.0);
    if (v6 < 0)
    {
LABEL_35:
      __break(1u);
LABEL_36:
      __break(1u);
    }
    v10 = (_QWORD *)result;
    if (v6)
    {
      v11 = 0;
      v12 = v8 + 32;
      while (v6 != v11)
      {
        v16 = 0;
        v17[0] = 0;
        if (v7 < 0)
          goto LABEL_37;
        a2(v12, v6, v17, &v16, v7);
        if (v16 < 0)
          goto LABEL_29;
        v13 = v17[0];
        result = swift_isUniquelyReferenced_nonNull_native();
        if ((result & 1) == 0)
        {
          result = (uint64_t)sub_1CA0B6058(v10);
          v10 = (_QWORD *)result;
        }
        if (v11 >= v10[2])
          goto LABEL_30;
        v10[v11 + 4] = v13;
        v12 += 8;
        if (v6 == ++v11)
          goto LABEL_25;
      }
      __break(1u);
LABEL_29:
      __break(1u);
LABEL_30:
      __break(1u);
LABEL_31:
      __break(1u);
LABEL_32:
      __break(1u);
LABEL_33:
      __break(1u);
LABEL_34:
      __break(1u);
      goto LABEL_35;
    }
LABEL_25:
    v7 = 1;
    goto LABEL_27;
  }
  result = sub_1CA0B4464(*v3, 0.0);
  if (v7 < 0)
    goto LABEL_36;
  v10 = (_QWORD *)result;
  if (!v7)
  {
LABEL_26:
    v6 = 1;
LABEL_27:
    *a3 = v7;
    a3[1] = v6;
    a3[2] = (uint64_t)v10;
    return result;
  }
  v14 = 0;
  while (1)
  {
    if (v7 == v14)
      goto LABEL_31;
    v16 = 0;
    v17[0] = 0;
    if ((unsigned __int128)((uint64_t)v14 * (__int128)v6) >> 64 != (uint64_t)(v14 * v6) >> 63)
      goto LABEL_32;
    if (v6 < 0)
      break;
    a2(v8 + 32 + 8 * v14 * v6, 1, v17, &v16, v6);
    if (v16 < 0)
      goto LABEL_33;
    v15 = v17[0];
    result = swift_isUniquelyReferenced_nonNull_native();
    if ((result & 1) == 0)
    {
      result = (uint64_t)sub_1CA0B6058(v10);
      v10 = (_QWORD *)result;
    }
    if (v14 >= v10[2])
      goto LABEL_34;
    v10[v14++ + 4] = v15;
    if (v7 == v14)
      goto LABEL_26;
  }
LABEL_37:
  result = sub_1CA1F11BC();
  __break(1u);
  return result;
}

void -= infix(_:_:)(vDSP_Length *a1, uint64_t a2)
{
  vDSP_Stride v3;
  double *v4;
  uint64_t v5;
  int64_t v6;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v8;
  vDSP_Length v9;
  char v11;
  uint64_t v12;
  int64_t v13;
  double __B;
  unint64_t v15;
  uint64_t v16;

  v16 = *MEMORY[0x1E0C80C00];
  v4 = *(double **)a2;
  v3 = *(_QWORD *)(a2 + 8);
  v5 = *(_QWORD *)(a2 + 16);
  v6 = a1[1];
  if (v6 == v3)
  {
    if (v4 == (double *)1)
    {
      v6 = a1[2];
      isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      a1[2] = v6;
      if ((isUniquelyReferenced_nonNull_native & 1) == 0)
        goto LABEL_40;
      while ((v3 & 0x8000000000000000) == 0)
      {
        if (!v3)
          goto LABEL_11;
        v8 = 0;
        v4 = (double *)(v6 + 32);
        v9 = *a1;
        while (v3 != v8)
        {
          if (v8 >= *(_QWORD *)(v5 + 16))
            goto LABEL_37;
          __B = -*(double *)(v5 + 32 + 8 * v8);
          if ((v9 & 0x8000000000000000) != 0)
          {
LABEL_44:
            sub_1CA1F11BC();
            __break(1u);
            goto LABEL_45;
          }
          ++v8;
          vDSP_vsaddD(v4, v3, &__B, v4, v3, v9);
          ++v4;
          if (v3 == v8)
          {
LABEL_11:
            a1[2] = v6;
            return;
          }
        }
        while (1)
        {
          __break(1u);
LABEL_37:
          __break(1u);
LABEL_38:
          v3 = (vDSP_Stride)sub_1CA0B6058((_QWORD *)v3);
          a1[2] = v3;
          if (((unint64_t)v4 & 0x8000000000000000) != 0)
            break;
LABEL_19:
          if (!v4)
            goto LABEL_31;
          v12 = 0;
          while (v4 != (double *)v12)
          {
            if ((unint64_t)v12 >= *(_QWORD *)(v5 + 16))
              goto LABEL_34;
            __B = -*(double *)(v5 + 32 + 8 * v12);
            v13 = v12 * v6;
            if ((unsigned __int128)(v12 * (__int128)v6) >> 64 != (v12 * v6) >> 63)
              goto LABEL_35;
            if (v6 < 0)
              goto LABEL_44;
            ++v12;
            vDSP_vsaddD((const double *)(v3 + 32 + 8 * v13), 1, &__B, (double *)(v3 + 32 + 8 * v13), 1, v6);
            if (v4 == (double *)v12)
              goto LABEL_31;
          }
          __break(1u);
LABEL_34:
          __break(1u);
LABEL_35:
          __break(1u);
        }
LABEL_39:
        __break(1u);
LABEL_40:
        v6 = (int64_t)sub_1CA0B6058((_QWORD *)v6);
        a1[2] = v6;
      }
      __break(1u);
    }
    else
    {
      if ((double *)*a1 != v4)
        goto LABEL_45;
      v3 = a1[2];
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) != 0)
        goto LABEL_29;
    }
    v3 = (vDSP_Stride)sub_1CA0B6058((_QWORD *)v3);
LABEL_29:
    if (*(_QWORD *)(v5 + 16) >> 31)
      __break(1u);
    cblas_daxpy_NEWLAPACK();
LABEL_31:
    a1[2] = v3;
    return;
  }
  if (v3 == 1 && *a1 == (_QWORD)v4)
  {
    v3 = a1[2];
    v11 = swift_isUniquelyReferenced_nonNull_native();
    a1[2] = v3;
    if ((v11 & 1) == 0)
      goto LABEL_38;
    if (((unint64_t)v4 & 0x8000000000000000) != 0)
      goto LABEL_39;
    goto LABEL_19;
  }
LABEL_45:
  __B = 0.0;
  v15 = 0xE000000000000000;
  swift_bridgeObjectRetain();
  sub_1CA1F1054();
  swift_bridgeObjectRelease();
  __B = -2.31584178e77;
  v15 = 0x80000001CA2083F0;
  sub_1CA1F12AC();
  sub_1CA1F0A3C();
  swift_bridgeObjectRelease();
  sub_1CA1F0A3C();
  sub_1CA1F12AC();
  sub_1CA1F0A3C();
  swift_bridgeObjectRelease();
  sub_1CA1F0A3C();
  sub_1CA1F12AC();
  sub_1CA1F0A3C();
  swift_bridgeObjectRelease();
  sub_1CA1F0A3C();
  sub_1CA1F12AC();
  sub_1CA1F0A3C();
  swift_bridgeObjectRelease();
  sub_1CA1F0A3C();
  sub_1CA1F11C8();
  __break(1u);
}

Swift::Void __swiftcall MAMatrix.pow(alpha:)(Swift::Double alpha)
{
  uint64_t *v1;
  _QWORD *v3;
  char isUniquelyReferenced_nonNull_native;
  double *v5;
  double *v6[2];

  v3 = (_QWORD *)v1[2];
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  v1[2] = (uint64_t)v3;
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
    v3 = sub_1CA0B6058(v3);
    v1[2] = (uint64_t)v3;
  }
  v5 = (double *)v3[2];
  v6[0] = (double *)(v3 + 4);
  v6[1] = v5;
  sub_1CA132F68(v6, v1, alpha);
  v1[2] = (uint64_t)v3;
}

void + infix(_:_:)(uint64_t *a1@<X0>, _QWORD *a2@<X8>, double a3@<D0>)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  double *v8;
  vDSP_Length v9;
  double __B[2];

  __B[1] = *(double *)MEMORY[0x1E0C80C00];
  v5 = *a1;
  v6 = a1[1];
  v7 = a1[2];
  swift_bridgeObjectRetain();
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) != 0)
    v8 = (double *)v7;
  else
    v8 = (double *)sub_1CA0B6058((_QWORD *)v7);
  __B[0] = a3;
  v9 = v5 * v6;
  if ((unsigned __int128)(v5 * (__int128)v6) >> 64 != (v5 * v6) >> 63)
    __break(1u);
  if ((v9 & 0x8000000000000000) != 0)
  {
    sub_1CA1F11BC();
    __break(1u);
  }
  else
  {
    vDSP_vsaddD((const double *)(v7 + 32), 1, __B, v8 + 4, 1, v9);
    *a2 = v5;
    a2[1] = v6;
    a2[2] = v8;
  }
}

{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  double *v8;
  vDSP_Length v9;
  double __B[2];

  __B[1] = *(double *)MEMORY[0x1E0C80C00];
  v5 = *a1;
  v6 = a1[1];
  v7 = a1[2];
  swift_bridgeObjectRetain();
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) != 0)
    v8 = (double *)v7;
  else
    v8 = (double *)sub_1CA0B6058((_QWORD *)v7);
  __B[0] = a3;
  v9 = v5 * v6;
  if ((unsigned __int128)(v5 * (__int128)v6) >> 64 != (v5 * v6) >> 63)
    __break(1u);
  if ((v9 & 0x8000000000000000) != 0)
  {
    sub_1CA1F11BC();
    __break(1u);
  }
  else
  {
    vDSP_vsaddD((const double *)(v7 + 32), 1, __B, v8 + 4, 1, v9);
    *a2 = v5;
    a2[1] = v6;
    a2[2] = v8;
  }
}

uint64_t += infix(_:_:)(uint64_t *a1, double a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  double *v7;
  vDSP_Length v8;
  uint64_t result;
  double __B[2];

  __B[1] = *(double *)MEMORY[0x1E0C80C00];
  v4 = *a1;
  v5 = a1[1];
  v6 = a1[2];
  swift_bridgeObjectRetain();
  v7 = (double *)v6;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    v7 = (double *)sub_1CA0B6058((_QWORD *)v6);
  __B[0] = a2;
  v8 = v4 * v5;
  if ((unsigned __int128)(v4 * (__int128)v5) >> 64 != (v4 * v5) >> 63)
    __break(1u);
  if ((v8 & 0x8000000000000000) != 0)
  {
    result = sub_1CA1F11BC();
    __break(1u);
  }
  else
  {
    vDSP_vsaddD((const double *)(v6 + 32), 1, __B, v7 + 4, 1, v8);
    result = swift_bridgeObjectRelease();
    *a1 = v4;
    a1[1] = v5;
    a1[2] = (uint64_t)v7;
  }
  return result;
}

void - infix(_:_:)(uint64_t *a1@<X0>, _QWORD *a2@<X8>, double a3@<D0>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  double v7;
  double *v8;
  vDSP_Length v9;
  double __B[2];

  __B[1] = *(double *)MEMORY[0x1E0C80C00];
  v4 = *a1;
  v5 = a1[1];
  v6 = a1[2];
  v7 = -a3;
  swift_bridgeObjectRetain();
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) != 0)
    v8 = (double *)v6;
  else
    v8 = (double *)sub_1CA0B6058((_QWORD *)v6);
  __B[0] = v7;
  v9 = v4 * v5;
  if ((unsigned __int128)(v4 * (__int128)v5) >> 64 != (v4 * v5) >> 63)
    __break(1u);
  if ((v9 & 0x8000000000000000) != 0)
  {
    sub_1CA1F11BC();
    __break(1u);
  }
  else
  {
    vDSP_vsaddD((const double *)(v6 + 32), 1, __B, v8 + 4, 1, v9);
    *a2 = v4;
    a2[1] = v5;
    a2[2] = v8;
  }
}

{
  uint64_t v4;
  uint64_t v5;
  double *v6;
  double __B[2];

  __B[1] = *(double *)MEMORY[0x1E0C80C00];
  v4 = *a1;
  v5 = a1[1];
  v6 = (double *)a1[2];
  __B[0] = a3;
  if ((unsigned __int128)(v4 * (__int128)v5) >> 64 != (v4 * v5) >> 63)
  {
    __break(1u);
    goto LABEL_6;
  }
  if (((v4 * v5) & 0x8000000000000000) == 0)
  {
    swift_bridgeObjectRetain();
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) != 0)
    {
LABEL_4:
      vDSP_vnegD(v6 + 4, 1, v6 + 4, 1, v4 * v5);
      vDSP_vsaddD(v6 + 4, 1, __B, v6 + 4, 1, v4 * v5);
      *a2 = v4;
      a2[1] = v5;
      a2[2] = v6;
      return;
    }
LABEL_6:
    v6 = (double *)sub_1CA0B6058(v6);
    goto LABEL_4;
  }
  sub_1CA1F11BC();
  __break(1u);
}

uint64_t -= infix(_:_:)(uint64_t *a1, double a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  double v6;
  double *v7;
  vDSP_Length v8;
  uint64_t result;
  double __B[2];

  __B[1] = *(double *)MEMORY[0x1E0C80C00];
  v3 = *a1;
  v4 = a1[1];
  v5 = a1[2];
  v6 = -a2;
  swift_bridgeObjectRetain();
  v7 = (double *)v5;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    v7 = (double *)sub_1CA0B6058((_QWORD *)v5);
  __B[0] = v6;
  v8 = v3 * v4;
  if ((unsigned __int128)(v3 * (__int128)v4) >> 64 != (v3 * v4) >> 63)
    __break(1u);
  if ((v8 & 0x8000000000000000) != 0)
  {
    result = sub_1CA1F11BC();
    __break(1u);
  }
  else
  {
    vDSP_vsaddD((const double *)(v5 + 32), 1, __B, v7 + 4, 1, v8);
    result = swift_bridgeObjectRelease();
    *a1 = v3;
    a1[1] = v4;
    a1[2] = (uint64_t)v7;
  }
  return result;
}

void *= infix(_:_:)(vDSP_Length *a1, uint64_t a2)
{
  vDSP_Stride v3;
  double *v4;
  uint64_t v5;
  int64_t v6;
  char v7;
  unint64_t v8;
  vDSP_Length v9;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v12;
  int64_t v13;
  char v14;
  vDSP_Length v15;
  double __B[3];

  __B[2] = *(double *)MEMORY[0x1E0C80C00];
  v4 = *(double **)a2;
  v3 = *(_QWORD *)(a2 + 8);
  v5 = *(_QWORD *)(a2 + 16);
  v6 = a1[1];
  if (v6 != v3)
  {
    if (v3 == 1 && *a1 == (_QWORD)v4)
    {
      v3 = a1[2];
      isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      a1[2] = v3;
      if ((isUniquelyReferenced_nonNull_native & 1) == 0)
        goto LABEL_39;
      if (((unint64_t)v4 & 0x8000000000000000) != 0)
        goto LABEL_40;
      goto LABEL_19;
    }
    goto LABEL_46;
  }
  if (v4 == (double *)1)
  {
    v6 = a1[2];
    v7 = swift_isUniquelyReferenced_nonNull_native();
    a1[2] = v6;
    if ((v7 & 1) == 0)
      goto LABEL_41;
    while ((v3 & 0x8000000000000000) == 0)
    {
      if (!v3)
        goto LABEL_32;
      v8 = 0;
      v4 = (double *)(v6 + 32);
      v9 = *a1;
      while (v3 != v8)
      {
        if (v8 >= *(_QWORD *)(v5 + 16))
          goto LABEL_38;
        __B[0] = *(double *)(v5 + 32 + 8 * v8);
        if ((v9 & 0x8000000000000000) != 0)
          goto LABEL_45;
        ++v8;
        vDSP_vsmulD(v4, v3, __B, v4, v3, v9);
        ++v4;
        if (v3 == v8)
          goto LABEL_32;
      }
      while (1)
      {
        __break(1u);
LABEL_38:
        __break(1u);
LABEL_39:
        v3 = (vDSP_Stride)sub_1CA0B6058((_QWORD *)v3);
        a1[2] = v3;
        if (((unint64_t)v4 & 0x8000000000000000) != 0)
          break;
LABEL_19:
        if (!v4)
        {
LABEL_26:
          a1[2] = v3;
          return;
        }
        v12 = 0;
        while (v4 != (double *)v12)
        {
          if ((unint64_t)v12 >= *(_QWORD *)(v5 + 16))
            goto LABEL_35;
          __B[0] = *(double *)(v5 + 32 + 8 * v12);
          v13 = v12 * v6;
          if ((unsigned __int128)(v12 * (__int128)v6) >> 64 != (v12 * v6) >> 63)
            goto LABEL_36;
          if (v6 < 0)
            goto LABEL_45;
          ++v12;
          vDSP_vsmulD((const double *)(v3 + 32 + 8 * v13), 1, __B, (double *)(v3 + 32 + 8 * v13), 1, v6);
          if (v4 == (double *)v12)
            goto LABEL_26;
        }
        __break(1u);
LABEL_35:
        __break(1u);
LABEL_36:
        __break(1u);
      }
LABEL_40:
      __break(1u);
LABEL_41:
      v6 = (int64_t)sub_1CA0B6058((_QWORD *)v6);
      a1[2] = v6;
    }
    __break(1u);
LABEL_43:
    v6 = (int64_t)sub_1CA0B6058((_QWORD *)v6);
    a1[2] = v6;
    goto LABEL_29;
  }
  if ((double *)*a1 != v4)
  {
LABEL_46:
    __B[0] = 0.0;
    __B[1] = -2.68156159e154;
    swift_bridgeObjectRetain();
    sub_1CA1F1054();
    sub_1CA1F0A3C();
    sub_1CA1F12AC();
    sub_1CA1F0A3C();
    swift_bridgeObjectRelease();
    sub_1CA1F0A3C();
    sub_1CA1F12AC();
    sub_1CA1F0A3C();
    swift_bridgeObjectRelease();
    sub_1CA1F0A3C();
    sub_1CA1F12AC();
    sub_1CA1F0A3C();
    swift_bridgeObjectRelease();
    sub_1CA1F0A3C();
    sub_1CA1F12AC();
    sub_1CA1F0A3C();
    swift_bridgeObjectRelease();
    sub_1CA1F0A3C();
    sub_1CA1F11C8();
    __break(1u);
    return;
  }
  v6 = a1[2];
  v14 = swift_isUniquelyReferenced_nonNull_native();
  a1[2] = v6;
  if ((v14 & 1) == 0)
    goto LABEL_43;
LABEL_29:
  v15 = (_QWORD)v4 * v3;
  if ((unsigned __int128)((uint64_t)v4 * (__int128)v3) >> 64 != ((uint64_t)v4 * v3) >> 63)
    __break(1u);
  if ((v15 & 0x8000000000000000) != 0)
  {
LABEL_45:
    sub_1CA1F11BC();
    __break(1u);
    goto LABEL_46;
  }
  vDSP_vmulD((const double *)(v5 + 32), 1, (const double *)(v6 + 32), 1, (double *)(v6 + 32), 1, v15);
LABEL_32:
  a1[2] = v6;
}

unint64_t *= infix(_:_:)(uint64_t *a1)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  _QWORD *v5;
  unint64_t result;

  v2 = *a1;
  v3 = a1[1];
  v4 = (_QWORD *)a1[2];
  swift_bridgeObjectRetain();
  v5 = v4;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    v5 = sub_1CA0B6058(v4);
  result = v4[2];
  if (result >> 31)
  {
    __break(1u);
  }
  else
  {
    cblas_dscal_NEWLAPACK();
    result = swift_bridgeObjectRelease();
    *a1 = v2;
    a1[1] = v3;
    a1[2] = (uint64_t)v5;
  }
  return result;
}

uint64_t </> infix(_:_:)@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t result;
  _QWORD v12[3];
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16[2];
  _QWORD *v17;

  v5 = *a1;
  v4 = a1[1];
  v6 = a1[2];
  v8 = *a2;
  v7 = a2[1];
  v9 = (_QWORD *)a2[2];
  v16[0] = v8;
  v16[1] = v7;
  if (v8 == v7)
  {
    swift_bridgeObjectRetain();
    v17 = v9;
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) != 0)
      goto LABEL_3;
  }
  else
  {
    __break(1u);
  }
  v9 = sub_1CA0B6058(v9);
  v17 = v9;
LABEL_3:
  v10 = v9[2];
  v13 = v9 + 4;
  v14 = v10;
  result = sub_1CA130AC4((uint64_t)&v13, v16);
  if (v4 == v8)
  {
    v13 = (_QWORD *)v5;
    v14 = v4;
    v15 = v6;
    v12[0] = v4;
    v12[1] = v4;
    v12[2] = v9;
    <*> infix(_:_:)((uint64_t *)&v13, v12, a3);
    return swift_bridgeObjectRelease();
  }
  else
  {
    __break(1u);
  }
  return result;
}

void / infix(_:_:)(uint64_t *a1@<X0>, _QWORD *a2@<X8>, double a3@<D0>)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  double *v8;
  vDSP_Length v9;
  double __A[2];

  __A[1] = *(double *)MEMORY[0x1E0C80C00];
  v5 = *a1;
  v6 = a1[1];
  v7 = a1[2];
  swift_bridgeObjectRetain();
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) != 0)
    v8 = (double *)v7;
  else
    v8 = (double *)sub_1CA0B6058((_QWORD *)v7);
  __A[0] = a3;
  v9 = v5 * v6;
  if ((unsigned __int128)(v5 * (__int128)v6) >> 64 != (v5 * v6) >> 63)
    __break(1u);
  if ((v9 & 0x8000000000000000) != 0)
  {
    sub_1CA1F11BC();
    __break(1u);
  }
  else
  {
    vDSP_svdivD(__A, (const double *)(v7 + 32), 1, v8 + 4, 1, v9);
    *a2 = v5;
    a2[1] = v6;
    a2[2] = v8;
  }
}

Swift::Void __swiftcall MAMatrix.exp()()
{
  sub_1CA1330F4(MEMORY[0x1E0C8D9B0]);
}

Swift::Void __swiftcall MAMatrix.log()()
{
  sub_1CA1330F4(MEMORY[0x1E0C8DA48]);
}

void sub_1CA132F68(double **a1, uint64_t *a2, double a3)
{
  double *v3;
  uint64_t v4;
  int64_t v5;
  uint64_t v6;
  uint64_t v7;
  double *v8;
  double v9;
  int v10;
  uint64_t v11;

  v11 = *MEMORY[0x1E0C80C00];
  if (a3 == 2.0)
  {
    v3 = *a1;
    if (v3)
    {
      v4 = a2[1];
      v5 = *a2 * v4;
      if ((unsigned __int128)(*a2 * (__int128)v4) >> 64 == v5 >> 63)
      {
        if ((v5 & 0x8000000000000000) == 0)
        {
          vDSP_vsqD(v3, 1, v3, 1, v5);
          return;
        }
        goto LABEL_18;
      }
      __break(1u);
      goto LABEL_13;
    }
    __break(1u);
    goto LABEL_17;
  }
  v6 = a2[1];
  v7 = *a2 * v6;
  if ((unsigned __int128)(*a2 * (__int128)v6) >> 64 != v7 >> 63)
  {
LABEL_13:
    __break(1u);
    goto LABEL_14;
  }
  if (v7 < (uint64_t)0xFFFFFFFF80000000)
  {
LABEL_14:
    __break(1u);
LABEL_15:
    __break(1u);
  }
  if (v7 > 0x7FFFFFFF)
    goto LABEL_15;
  v10 = *(_DWORD *)a2 * v6;
  v9 = a3;
  v8 = *a1;
  if (!v8)
  {
LABEL_17:
    __break(1u);
LABEL_18:
    sub_1CA1F11BC();
    __break(1u);
    return;
  }
  vvpows(v8, &v9, v8, &v10);
}

Swift::Void __swiftcall MAMatrix.round()()
{
  sub_1CA1330F4((uint64_t (*)(_QWORD *, _QWORD *, int *))MEMORY[0x1E0C8DAA8]);
}

uint64_t sub_1CA1330F4(uint64_t (*a1)(_QWORD *, _QWORD *, int *))
{
  uint64_t *v1;
  _QWORD *v3;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v5;
  uint64_t v6;
  uint64_t result;
  int v8;
  uint64_t v9;

  v9 = *MEMORY[0x1E0C80C00];
  v3 = (_QWORD *)v1[2];
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  v1[2] = (uint64_t)v3;
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
    v3 = sub_1CA0B6058(v3);
    v1[2] = (uint64_t)v3;
  }
  v5 = v1[1];
  v6 = *v1 * v5;
  if ((unsigned __int128)(*v1 * (__int128)v5) >> 64 != v6 >> 63)
  {
    __break(1u);
    goto LABEL_8;
  }
  if (v6 < (uint64_t)0xFFFFFFFF80000000)
  {
LABEL_8:
    __break(1u);
LABEL_9:
    __break(1u);
  }
  if (v6 > 0x7FFFFFFF)
    goto LABEL_9;
  v8 = *(_DWORD *)v1 * v5;
  result = a1(v3 + 4, v3 + 4, &v8);
  v1[2] = (uint64_t)v3;
  return result;
}

KnowledgeGraphKit::MAMatrix __swiftcall MAMatrix.rounded()()
{
  _QWORD *v0;
  uint64_t *v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  double *v5;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v7;
  Swift::Int v8;
  Swift::Int v9;
  void *v10;
  int v11;
  uint64_t v12;
  KnowledgeGraphKit::MAMatrix result;

  v2 = v0;
  v12 = *MEMORY[0x1E0C80C00];
  v3 = *v1;
  v4 = v1[1];
  v5 = (double *)v1[2];
  *v0 = v3;
  v0[1] = v4;
  swift_bridgeObjectRetain();
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  v2[2] = v5;
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
    v5 = (double *)sub_1CA0B6058(v5);
    v2[2] = v5;
  }
  v7 = v3 * v4;
  if ((unsigned __int128)(v3 * (__int128)v4) >> 64 != (v3 * v4) >> 63)
  {
    __break(1u);
    goto LABEL_8;
  }
  if (v7 < (uint64_t)0xFFFFFFFF80000000)
  {
LABEL_8:
    __break(1u);
LABEL_9:
    __break(1u);
  }
  if (v7 > 0x7FFFFFFF)
    goto LABEL_9;
  v11 = v3 * v4;
  vvnint(v5 + 4, v5 + 4, &v11);
  v2[2] = v5;
  result.elements._rawValue = v10;
  result.columns = v9;
  result.rows = v8;
  return result;
}

KnowledgeGraphKit::MAMatrix __swiftcall MAMatrix.asum(axe:)(KnowledgeGraphKit::MAMatrixAxes axe)
{
  uint64_t *v1;
  unint64_t *v2;
  _QWORD *v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  Swift::Int v8;
  Swift::Int v9;
  void *v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t i;
  uint64_t v14;
  KnowledgeGraphKit::MAMatrix result;

  v4 = v1;
  v6 = *v2;
  v5 = v2[1];
  v7 = v2[2] + 32;
  if (*(_BYTE *)axe != 1)
  {
    v8 = sub_1CA0B4464(*v2, 0.0);
    if (v6 < 0)
      goto LABEL_25;
    v3 = (_QWORD *)v8;
    if (!v6)
    {
LABEL_20:
      v5 = 1;
      goto LABEL_21;
    }
    if (v5 < (uint64_t)0xFFFFFFFF80000000)
    {
      __break(1u);
    }
    else if (v5 <= 0x7FFFFFFF)
    {
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) != 0)
        goto LABEL_17;
      goto LABEL_32;
    }
    __break(1u);
LABEL_32:
    v3 = sub_1CA0B6058(v3);
LABEL_17:
    for (i = 0; i != v6; ++i)
    {
      v8 = cblas_dasum_NEWLAPACK();
      if (i >= v3[2])
        goto LABEL_23;
      v3[i + 4] = v14;
      v7 += 8 * v5;
    }
    goto LABEL_20;
  }
  v8 = sub_1CA0B4464(v2[1], 0.0);
  if (v5 < 0)
    goto LABEL_24;
  v3 = (_QWORD *)v8;
  if (v5)
  {
    if (v6 > 0x7FFFFFFF)
      goto LABEL_26;
    if (v6 < (uint64_t)0xFFFFFFFF80000000)
      goto LABEL_27;
    if ((unint64_t)v5 >> 31)
      goto LABEL_28;
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      goto LABEL_29;
    while (1)
    {
      v11 = 0;
      while (1)
      {
        v8 = cblas_dasum_NEWLAPACK();
        if (v11 >= v3[2])
          break;
        v3[v11 + 4] = v12;
        v7 += 8;
        if (v5 == ++v11)
          goto LABEL_11;
      }
      __break(1u);
LABEL_23:
      __break(1u);
LABEL_24:
      __break(1u);
LABEL_25:
      __break(1u);
LABEL_26:
      __break(1u);
LABEL_27:
      __break(1u);
LABEL_28:
      __break(1u);
LABEL_29:
      v3 = sub_1CA0B6058(v3);
    }
  }
LABEL_11:
  v6 = 1;
LABEL_21:
  *v4 = v6;
  v4[1] = v5;
  v4[2] = (uint64_t)v3;
  result.elements._rawValue = v10;
  result.columns = v9;
  result.rows = v8;
  return result;
}

Swift::Double __swiftcall MAMatrix.norm1()()
{
  Swift::Double result;

  sub_1CA134504((uint64_t (*)(uint64_t, uint64_t, _QWORD *))MEMORY[0x1E0C8C2F8]);
  return result;
}

Swift::Double __swiftcall MAMatrix.norm2()()
{
  Swift::Double result;

  sub_1CA133490(MEMORY[0x1E0C8BB68]);
  return result;
}

uint64_t sub_1CA133490(uint64_t (*a1)(void))
{
  uint64_t *v1;
  uint64_t v3;
  uint64_t result;

  v3 = v1[1];
  result = *v1 * v3;
  if ((unsigned __int128)(*v1 * (__int128)v3) >> 64 != result >> 63)
  {
    __break(1u);
    goto LABEL_6;
  }
  if (result < (uint64_t)0xFFFFFFFF80000000)
  {
LABEL_6:
    __break(1u);
    goto LABEL_7;
  }
  if (result <= 0x7FFFFFFF)
    return a1();
LABEL_7:
  __break(1u);
  return result;
}

Swift::tuple_value_Double_index_Int __swiftcall MAMatrix.min(row:)(Swift::Int row)
{
  Swift::Int v1;
  double v2;
  Swift::tuple_value_Double_index_Int result;

  v1 = sub_1CA133574(row, (void (*)(uint64_t, uint64_t, _QWORD *, uint64_t *))MEMORY[0x1E0C8C240]);
  result.value = v2;
  result.index = v1;
  return result;
}

Swift::tuple_value_Double_index_Int __swiftcall MAMatrix.max(row:)(Swift::Int row)
{
  Swift::Int v1;
  double v2;
  Swift::tuple_value_Double_index_Int result;

  v1 = sub_1CA133574(row, (void (*)(uint64_t, uint64_t, _QWORD *, uint64_t *))MEMORY[0x1E0C8C1D0]);
  result.value = v2;
  result.index = v1;
  return result;
}

uint64_t sub_1CA133574(uint64_t a1, void (*a2)(uint64_t, uint64_t, _QWORD *, uint64_t *))
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t result;
  uint64_t v6;
  _QWORD v7[2];

  v7[1] = *MEMORY[0x1E0C80C00];
  v3 = *(_QWORD *)(v2 + 8);
  v4 = *(_QWORD *)(v2 + 16);
  v7[0] = 0;
  v6 = 0;
  if ((unsigned __int128)(a1 * (__int128)v3) >> 64 != (a1 * v3) >> 63)
  {
    __break(1u);
    goto LABEL_6;
  }
  if (v3 < 0)
  {
    result = sub_1CA1F11BC();
    __break(1u);
    return result;
  }
  a2(v4 + 8 * a1 * v3 + 32, 1, v7, &v6);
  result = v6;
  if (v6 < 0)
LABEL_6:
    __break(1u);
  return result;
}

Swift::tuple_value_Double_index_Int __swiftcall MAMatrix.min(column:)(Swift::Int column)
{
  Swift::Int v1;
  double v2;
  Swift::tuple_value_Double_index_Int result;

  v1 = sub_1CA1336E8(column, (void (*)(uint64_t, uint64_t, _QWORD *, uint64_t *))MEMORY[0x1E0C8C240]);
  result.value = v2;
  result.index = v1;
  return result;
}

Swift::tuple_value_Double_index_Int __swiftcall MAMatrix.max(column:)(Swift::Int column)
{
  Swift::Int v1;
  double v2;
  Swift::tuple_value_Double_index_Int result;

  v1 = sub_1CA1336E8(column, (void (*)(uint64_t, uint64_t, _QWORD *, uint64_t *))MEMORY[0x1E0C8C1D0]);
  result.value = v2;
  result.index = v1;
  return result;
}

uint64_t sub_1CA1336E8(uint64_t a1, void (*a2)(uint64_t, uint64_t, _QWORD *, uint64_t *))
{
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t result;
  uint64_t v7;
  _QWORD v8[2];

  v8[1] = *MEMORY[0x1E0C80C00];
  v3 = *v2;
  v4 = v2[1];
  v5 = v2[2];
  v7 = 0;
  v8[0] = 0;
  if ((v3 & 0x8000000000000000) == 0)
  {
    a2(v5 + 8 * a1 + 32, v4, v8, &v7);
    if (v7 < 0)
    {
      __break(1u);
    }
    else if (v4)
    {
      return v7 / v4;
    }
    __break(1u);
  }
  result = sub_1CA1F11BC();
  __break(1u);
  return result;
}

int64_t *MAMatrix.argsort()()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  int64_t *v5;

  v1 = *v0;
  v2 = v0[1];
  v3 = v0[2];
  v5 = sub_1CA0B58DC(0, *(_QWORD *)(v3 + 16));
  swift_bridgeObjectRetain();
  sub_1CA13CA3C(&v5, v1, v2, v3);
  swift_bridgeObjectRelease();
  return v5;
}

Swift::Int __swiftcall MAMatrix.argmax()()
{
  return sub_1CA1338C8((void (*)(uint64_t, uint64_t, _QWORD *, uint64_t *))MEMORY[0x1E0C8C1D0]);
}

Swift::Int __swiftcall MAMatrix.argmin()()
{
  return sub_1CA1338C8((void (*)(uint64_t, uint64_t, _QWORD *, uint64_t *))MEMORY[0x1E0C8C240]);
}

uint64_t sub_1CA1338C8(void (*a1)(uint64_t, uint64_t, _QWORD *, uint64_t *))
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t result;
  uint64_t v6;
  _QWORD v7[2];

  v7[1] = *MEMORY[0x1E0C80C00];
  v2 = *v1;
  v3 = v1[1];
  v4 = v1[2];
  v7[0] = 0;
  v6 = 0;
  if ((unsigned __int128)(v2 * (__int128)v3) >> 64 != (v2 * v3) >> 63)
  {
    __break(1u);
    goto LABEL_6;
  }
  if (v2 * v3 < 0)
  {
    result = sub_1CA1F11BC();
    __break(1u);
    return result;
  }
  a1(v4 + 32, 1, v7, &v6);
  result = v6;
  if (v6 < 0)
LABEL_6:
    __break(1u);
  return result;
}

uint64_t *MAMatrix.mean(range:axe:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X2>, uint64_t *a4@<X8>)
{
  return sub_1CA134350(a1, a2, a3, MEMORY[0x1E0C8C1F0], a4);
}

uint64_t *sub_1CA1339AC(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  return sub_1CA1345E4(a1, a2, a3, a4, a5, a6, a7, a8, MEMORY[0x1E0C8C1F0]);
}

KnowledgeGraphKit::MAMatrix __swiftcall MAMatrix.pstddev(axe:)(KnowledgeGraphKit::MAMatrixAxes axe)
{
  _BYTE *v1;
  Swift::Int v2;
  void *v3;
  KnowledgeGraphKit::MAMatrix result;

  v1 = sub_1CA134DE0((_BYTE *)axe, (uint64_t (*)(_QWORD, uint64_t, char *))MAMatrix.pstddev(range:axe:));
  result.elements._rawValue = v3;
  result.columns = v2;
  result.rows = (Swift::Int)v1;
  return result;
}

void MAMatrix.pstddev(range:axe:)(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X2>, uint64_t *a4@<X8>)
{
  vDSP_Length *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  vDSP_Length v11;
  int64_t v12;
  vDSP_Length v13;
  uint64_t v14;
  BOOL v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  double *v19;
  uint64_t v20;

  v11 = *v4;
  v12 = v4[1];
  v13 = v4[2];
  v14 = a2 - a1;
  v15 = __OFSUB__(a2, a1);
  if (*a3 != 1)
  {
    if (v15)
    {
      __break(1u);
    }
    else
    {
      v5 = sub_1CA0B4464(a2 - a1, 0.0);
      v6 = v13 + 32;
      v7 = *(_QWORD *)(v13 + 16);
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) != 0)
      {
LABEL_10:
        v18 = *(_QWORD *)(v5 + 16);
        v19 = (double *)(v5 + 32);
        v20 = v18;
        sub_1CA133C70(&v19, v6, v7, a1, a2, v11, v12);
        v17 = v14;
        v14 = 1;
        goto LABEL_11;
      }
    }
    v5 = (uint64_t)sub_1CA0B6058((_QWORD *)v5);
    goto LABEL_10;
  }
  if (v15)
  {
    __break(1u);
    goto LABEL_13;
  }
  v5 = sub_1CA0B4464(a2 - a1, 0.0);
  v6 = v13 + 32;
  v7 = *(_QWORD *)(v13 + 16);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
LABEL_13:
    v5 = (uint64_t)sub_1CA0B6058((_QWORD *)v5);
  v16 = *(_QWORD *)(v5 + 16);
  v19 = (double *)(v5 + 32);
  v20 = v16;
  sub_1CA133B38(&v19, v6, v7, a1, a2, v11, v12);
  v17 = 1;
LABEL_11:
  *a4 = v17;
  a4[1] = v14;
  a4[2] = v5;
}

void sub_1CA133B38(double **a1, uint64_t a2, int a3, uint64_t a4, uint64_t a5, vDSP_Length __N, vDSP_Stride __IA)
{
  double *v7;
  uint64_t v9;
  const double *v12;
  double __Mean[2];

  __Mean[1] = *(double *)MEMORY[0x1E0C80C00];
  if (!a2)
    goto LABEL_12;
  v7 = *a1;
  if (!*a1)
    goto LABEL_13;
  v9 = a4;
  if (a5 < a4)
  {
LABEL_11:
    __break(1u);
LABEL_12:
    __break(1u);
LABEL_13:
    __break(1u);
  }
  if (a4 != a5)
  {
    v12 = (const double *)(a2 + 8 * a4);
    while (v9 < a5)
    {
      __Mean[0] = 0.0;
      if ((__N & 0x8000000000000000) != 0)
      {
        sub_1CA1F11BC();
        __break(1u);
        return;
      }
      ++v9;
      vDSP_normalizeD(v12++, __IA, 0, 1, __Mean, v7++, __N);
      if (a5 == v9)
        return;
    }
    __break(1u);
    goto LABEL_11;
  }
}

void sub_1CA133C70(double **a1, uint64_t a2, int a3, uint64_t a4, uint64_t a5, int a6, int64_t __N)
{
  uint64_t v8;
  double *v9;
  const double *v11;
  double __Mean[2];

  __Mean[1] = *(double *)MEMORY[0x1E0C80C00];
  if (!a2)
    goto LABEL_14;
  v8 = a4;
  if ((unsigned __int128)(a4 * (__int128)__N) >> 64 != (a4 * __N) >> 63)
    goto LABEL_12;
  v9 = *a1;
  if (!*a1)
    goto LABEL_15;
  if (a5 < a4)
    goto LABEL_13;
  if (a4 != a5)
  {
    v11 = (const double *)(a2 + 8 * a4 * __N);
    while (v8 < a5)
    {
      __Mean[0] = 0.0;
      if (__N < 0)
      {
        sub_1CA1F11BC();
        __break(1u);
        return;
      }
      ++v8;
      vDSP_normalizeD(v11, 1, 0, 1, __Mean, v9++, __N);
      v11 += __N;
      if (a5 == v8)
        return;
    }
    __break(1u);
LABEL_12:
    __break(1u);
LABEL_13:
    __break(1u);
LABEL_14:
    __break(1u);
LABEL_15:
    __break(1u);
  }
}

KnowledgeGraphKit::MAMatrix __swiftcall MAMatrix.sstddev(axe:)(KnowledgeGraphKit::MAMatrixAxes axe)
{
  _BYTE *v1;
  Swift::Int v2;
  void *v3;
  KnowledgeGraphKit::MAMatrix result;

  v1 = sub_1CA134DE0((_BYTE *)axe, (uint64_t (*)(_QWORD, uint64_t, char *))MAMatrix.sstddev(range:axe:));
  result.elements._rawValue = v3;
  result.columns = v2;
  result.rows = (Swift::Int)v1;
  return result;
}

uint64_t MAMatrix.sstddev(range:axe:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X2>, uint64_t *a4@<X8>)
{
  int64_t *v4;
  double *v5;
  uint64_t v6;
  double *v7;
  double *v8;
  int64_t v9;
  int64_t v10;
  const double *v11;
  int64_t v12;
  BOOL v13;
  unint64_t v14;
  const double *v15;
  double *v16;
  uint64_t v17;
  int64_t v18;
  unint64_t v19;
  uint64_t result;
  _QWORD *v22;
  char v23;
  int64_t v24;
  int64_t v25;
  const double *v26;
  uint64_t __B[2];
  double *v28;
  uint64_t v29;

  v7 = (double *)a2;
  v8 = (double *)a1;
  v29 = *MEMORY[0x1E0C80C00];
  v10 = *v4;
  v9 = v4[1];
  v11 = (const double *)v4[2];
  v12 = a2 - a1;
  v13 = __OFSUB__(a2, a1);
  if (*a3 == 1)
  {
    v24 = *v4;
    v25 = v9;
    v26 = v11;
    v23 = 1;
    MAMatrix.mean(range:axe:)(a1, a2, &v23, __B);
    if (v13)
      goto LABEL_46;
    v6 = (uint64_t)v28;
    v5 = (double *)sub_1CA0B4464(v12, 0.0);
    if ((unsigned __int128)(v10 * (__int128)v12) >> 64 != (v10 * v12) >> 63)
      goto LABEL_48;
    v22 = (_QWORD *)sub_1CA0B4464(v10 * v12, 0.0);
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      goto LABEL_50;
    while (1)
    {
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) != 0)
      {
        if ((uint64_t)v7 < (uint64_t)v8)
          goto LABEL_52;
      }
      else
      {
        v5 = (double *)sub_1CA0B6058(v5);
        if ((uint64_t)v7 < (uint64_t)v8)
        {
LABEL_52:
          __break(1u);
          goto LABEL_53;
        }
      }
      if (v8 == v7)
        break;
      v14 = 0;
      v15 = &v11[(_QWORD)v8];
      v8 = (double *)(v22 + 4);
      v7 = v5 + 4;
      v11 = v15 + 4;
      while (v12 != v14)
      {
        if (v14 >= *(_QWORD *)(v6 + 16))
          goto LABEL_43;
        *(double *)__B = -*(double *)(v6 + 32 + 8 * v14);
        if (v10 < 0)
          goto LABEL_66;
        ++v14;
        vDSP_vsaddD(v11, v9, (const double *)__B, v8, v9, v10);
        vDSP_vsqD(v8, v9, v8, v9, v10);
        vDSP_sveD(v8, v9, v7, v10);
        ++v11;
        ++v8;
        ++v7;
        if (v12 == v14)
          goto LABEL_16;
      }
      __break(1u);
LABEL_43:
      __break(1u);
LABEL_44:
      __break(1u);
LABEL_45:
      __break(1u);
LABEL_46:
      __break(1u);
LABEL_47:
      __break(1u);
LABEL_48:
      __break(1u);
LABEL_49:
      __break(1u);
LABEL_50:
      v22 = sub_1CA0B6058(v22);
    }
LABEL_16:
    swift_bridgeObjectRelease();
    swift_bridgeObjectRetain();
    v16 = v5;
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) != 0)
    {
LABEL_17:
      if (*((_QWORD *)v5 + 2) >> 31)
      {
        __break(1u);
      }
      else
      {
        cblas_dscal_NEWLAPACK();
        swift_bridgeObjectRelease();
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) != 0)
        {
LABEL_19:
          if (v12 >= (uint64_t)0xFFFFFFFF80000000)
          {
            if (v12 <= 0x7FFFFFFF)
            {
              LODWORD(__B[0]) = v12;
              vvsqrt(v16 + 4, v16 + 4, (const int *)__B);
              v17 = 1;
LABEL_41:
              result = swift_bridgeObjectRelease();
              *a4 = v17;
              a4[1] = v12;
              a4[2] = (uint64_t)v16;
              return result;
            }
            goto LABEL_62;
          }
          __break(1u);
          goto LABEL_60;
        }
      }
      v16 = (double *)sub_1CA0B6058(v16);
      goto LABEL_19;
    }
LABEL_56:
    v16 = (double *)sub_1CA0B6058(v5);
    goto LABEL_17;
  }
  v24 = *v4;
  v25 = v9;
  v26 = v11;
  v23 = 0;
  MAMatrix.mean(range:axe:)(a1, a2, &v23, __B);
  if (v13)
    goto LABEL_47;
  v5 = v28;
  v10 = sub_1CA0B4464(v12, 0.0);
  if ((unsigned __int128)(v12 * (__int128)v9) >> 64 != (v12 * v9) >> 63)
    goto LABEL_49;
  v22 = (_QWORD *)sub_1CA0B4464(v12 * v9, 0.0);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
LABEL_53:
    v22 = sub_1CA0B6058(v22);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    v10 = (int64_t)sub_1CA0B6058((_QWORD *)v10);
  v18 = (_QWORD)v8 * v9;
  if ((unsigned __int128)((uint64_t)v8 * (__int128)v9) >> 64 != ((uint64_t)v8 * v9) >> 63)
  {
    __break(1u);
    goto LABEL_55;
  }
  if ((uint64_t)v7 < (uint64_t)v8)
  {
LABEL_55:
    __break(1u);
    goto LABEL_56;
  }
  if (v8 == v7)
  {
LABEL_35:
    swift_bridgeObjectRelease();
    swift_bridgeObjectRetain();
    v16 = (double *)v10;
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) != 0)
    {
LABEL_36:
      if (!(*(_QWORD *)(v10 + 16) >> 31))
      {
        cblas_dscal_NEWLAPACK();
        swift_bridgeObjectRelease();
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) != 0)
          goto LABEL_38;
        goto LABEL_63;
      }
      __break(1u);
LABEL_62:
      __break(1u);
LABEL_63:
      v16 = (double *)sub_1CA0B6058(v16);
LABEL_38:
      if (v12 < (uint64_t)0xFFFFFFFF80000000)
      {
        __break(1u);
      }
      else if (v12 <= 0x7FFFFFFF)
      {
        LODWORD(__B[0]) = v12;
        vvsqrt(v16 + 4, v16 + 4, (const int *)__B);
        v17 = v12;
        v12 = 1;
        goto LABEL_41;
      }
      __break(1u);
    }
LABEL_60:
    v16 = (double *)sub_1CA0B6058((_QWORD *)v10);
    goto LABEL_36;
  }
  v19 = 0;
  v8 = (double *)(v22 + 4);
  v7 = (double *)(v10 + 32);
  v6 = (uint64_t)&v11[v18 + 4];
  v11 = v5 + 4;
  while (1)
  {
    if (v12 == v19)
      goto LABEL_44;
    if (v19 >= *((_QWORD *)v5 + 2))
      goto LABEL_45;
    *(double *)__B = -v11[v19];
    if (v9 < 0)
      break;
    ++v19;
    vDSP_vsaddD((const double *)v6, 1, (const double *)__B, v8, 1, v9);
    vDSP_vsqD(v8, 1, v8, 1, v9);
    vDSP_sveD(v8++, 1, v7++, v9);
    v6 += 8 * v9;
    if (v12 == v19)
      goto LABEL_35;
  }
LABEL_66:
  result = sub_1CA1F11BC();
  __break(1u);
  return result;
}

Swift::Double __swiftcall MAMatrix.meamg()()
{
  Swift::Double result;

  sub_1CA134504(MEMORY[0x1E0C8C1E0]);
  return result;
}

KnowledgeGraphKit::MAMatrix __swiftcall MAMatrix.meamg(axe:)(KnowledgeGraphKit::MAMatrixAxes axe)
{
  _BYTE *v1;
  Swift::Int v2;
  void *v3;
  KnowledgeGraphKit::MAMatrix result;

  v1 = sub_1CA134DE0((_BYTE *)axe, (uint64_t (*)(_QWORD, uint64_t, char *))MAMatrix.meamg(range:axe:));
  result.elements._rawValue = v3;
  result.columns = v2;
  result.rows = (Swift::Int)v1;
  return result;
}

uint64_t *MAMatrix.meamg(range:axe:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X2>, uint64_t *a4@<X8>)
{
  return sub_1CA134350(a1, a2, a3, MEMORY[0x1E0C8C1E0], a4);
}

uint64_t *sub_1CA134350@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X2>, uint64_t (*a4)(uint64_t, uint64_t, uint64_t, uint64_t)@<X3>, uint64_t *a5@<X8>)
{
  uint64_t *v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  BOOL v17;
  uint64_t v18;
  uint64_t *result;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  uint64_t v24;

  v13 = *v5;
  v14 = v5[1];
  v15 = v5[2];
  v16 = a2 - a1;
  v17 = __OFSUB__(a2, a1);
  v22 = v13;
  if (*a3 != 1)
  {
    if (v17)
    {
      __break(1u);
    }
    else
    {
      v7 = (_QWORD *)sub_1CA0B4464(a2 - a1, 0.0);
      v8 = v15 + 32;
      v6 = *(_QWORD *)(v15 + 16);
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) != 0)
      {
LABEL_10:
        v21 = v7[2];
        v23 = v7 + 4;
        v24 = v21;
        result = sub_1CA134704((uint64_t *)&v23, v8, v6, a1, a2, v22, v14, v15, a4);
        v20 = v16;
        v16 = 1;
        goto LABEL_11;
      }
    }
    v7 = sub_1CA0B6058(v7);
    goto LABEL_10;
  }
  if (v17)
  {
    __break(1u);
    goto LABEL_13;
  }
  v7 = (_QWORD *)sub_1CA0B4464(a2 - a1, 0.0);
  v8 = v15 + 32;
  v6 = *(_QWORD *)(v15 + 16);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
LABEL_13:
    v7 = sub_1CA0B6058(v7);
  v18 = v7[2];
  v23 = v7 + 4;
  v24 = v18;
  result = sub_1CA1345E4((uint64_t *)&v23, v8, v6, a1, a2, v22, v14, v15, a4);
  v20 = 1;
LABEL_11:
  *a5 = v20;
  a5[1] = v16;
  a5[2] = (uint64_t)v7;
  return result;
}

Swift::Double __swiftcall MAMatrix.measq()()
{
  Swift::Double result;

  sub_1CA134504(MEMORY[0x1E0C8C200]);
  return result;
}

uint64_t sub_1CA134504(uint64_t (*a1)(uint64_t, uint64_t, _QWORD *))
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t result;
  _QWORD v6[2];

  v6[1] = *MEMORY[0x1E0C80C00];
  v2 = *v1;
  v3 = v1[1];
  v4 = v1[2];
  v6[0] = 0;
  if ((unsigned __int128)(v2 * (__int128)v3) >> 64 != (v2 * v3) >> 63)
    __break(1u);
  if (((v2 * v3) & 0x8000000000000000) == 0)
    return a1(v4 + 32, 1, v6);
  result = sub_1CA1F11BC();
  __break(1u);
  return result;
}

KnowledgeGraphKit::MAMatrix __swiftcall MAMatrix.measq(axe:)(KnowledgeGraphKit::MAMatrixAxes axe)
{
  _BYTE *v1;
  Swift::Int v2;
  void *v3;
  KnowledgeGraphKit::MAMatrix result;

  v1 = sub_1CA134DE0((_BYTE *)axe, (uint64_t (*)(_QWORD, uint64_t, char *))MAMatrix.measq(range:axe:));
  result.elements._rawValue = v3;
  result.columns = v2;
  result.rows = (Swift::Int)v1;
  return result;
}

uint64_t *MAMatrix.measq(range:axe:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X2>, uint64_t *a4@<X8>)
{
  return sub_1CA134350(a1, a2, a3, MEMORY[0x1E0C8C200], a4);
}

uint64_t *sub_1CA1345E4(uint64_t *result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t (*a9)(uint64_t, uint64_t, uint64_t, uint64_t))
{
  uint64_t v9;
  uint64_t v14;
  uint64_t v15;

  if (!a2)
    goto LABEL_15;
  v9 = *result;
  if (!*result)
  {
LABEL_16:
    __break(1u);
    goto LABEL_17;
  }
  if (a5 < a4)
  {
LABEL_13:
    __break(1u);
LABEL_14:
    __break(1u);
LABEL_15:
    __break(1u);
    goto LABEL_16;
  }
  if (a4 == a5)
    return result;
  if (a4 >= a5)
    goto LABEL_14;
  if (a6 < 0)
  {
LABEL_17:
    result = (uint64_t *)sub_1CA1F11BC();
    __break(1u);
    return result;
  }
  v14 = a2 + 8 * a4;
  v15 = a4 + 1;
  while (1)
  {
    result = (uint64_t *)a9(v14, a7, v9, a6);
    if (a5 == v15)
      return result;
    if (v15 >= a4)
    {
      v9 += 8;
      v14 += 8;
      if (v15++ < a5)
        continue;
    }
    __break(1u);
    goto LABEL_13;
  }
}

uint64_t *sub_1CA134704(uint64_t *result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t (*a9)(uint64_t, uint64_t, uint64_t, uint64_t))
{
  uint64_t v11;
  uint64_t v13;
  uint64_t v14;

  if (!a2)
    goto LABEL_17;
  if ((unsigned __int128)(a4 * (__int128)a7) >> 64 != (a4 * a7) >> 63)
  {
LABEL_14:
    __break(1u);
LABEL_15:
    __break(1u);
LABEL_16:
    __break(1u);
LABEL_17:
    __break(1u);
    goto LABEL_18;
  }
  v11 = *result;
  if (!*result)
  {
LABEL_18:
    __break(1u);
    goto LABEL_19;
  }
  if (a5 < a4)
    goto LABEL_15;
  if (a4 == a5)
    return result;
  if (a4 >= a5)
    goto LABEL_16;
  if (a7 < 0)
  {
LABEL_19:
    result = (uint64_t *)sub_1CA1F11BC();
    __break(1u);
    return result;
  }
  v13 = a4 + 1;
  v14 = a2 + 8 * a4 * a7;
  while (1)
  {
    result = (uint64_t *)a9(v14, 1, v11, a7);
    if (a5 == v13)
      return result;
    if (v13 >= a4)
    {
      v11 += 8;
      v14 += 8 * a7;
      if (v13++ < a5)
        continue;
    }
    __break(1u);
    goto LABEL_14;
  }
}

uint64_t MAMatrix.median(range:axe:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X2>, uint64_t *a4@<X8>)
{
  uint64_t *v4;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  BOOL v10;
  uint64_t v11;
  uint64_t result;
  _QWORD *v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  double v19;
  double v20;
  double v21;
  unint64_t v22;
  uint64_t v23;
  unint64_t v24;
  double v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  double v29;
  double v30;
  unint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t *v34;
  uint64_t v36;

  v7 = v4[1];
  v8 = v4[2];
  v9 = a2 - a1;
  v10 = __OFSUB__(a2, a1);
  if (*a3 != 1)
  {
    if (v10)
    {
LABEL_81:
      __break(1u);
      goto LABEL_82;
    }
    v33 = a2 - a1;
    result = sub_1CA0B4464(a2 - a1, 0.0);
    if (a2 < a1)
      goto LABEL_83;
    v13 = (_QWORD *)result;
    if (a2 != a1)
    {
      v24 = 0;
      while ((uint64_t)(a1 + v24) < a2)
      {
        if (__OFADD__(v24, 1))
          goto LABEL_62;
        if (v7 < 0)
          goto LABEL_84;
        swift_bridgeObjectRetain();
        if (v7)
        {
          v26 = sub_1CA1F0B68();
          *(_QWORD *)(v26 + 16) = v7;
          bzero((void *)(v26 + 32), 8 * v7);
          if (v7 > 0x7FFFFFFF)
            goto LABEL_63;
        }
        else
        {
          v26 = MEMORY[0x1E0DEE9D8];
        }
        if ((unsigned __int128)((uint64_t)(a1 + v24) * (__int128)v7) >> 64 != (uint64_t)((a1 + v24) * v7) >> 63)
          goto LABEL_64;
        cblas_dcopy_NEWLAPACK();
        swift_bridgeObjectRelease();
        v36 = v26;
        swift_bridgeObjectRetain();
        sub_1CA1290F4(&v36, sub_1CA13B48C, sub_1CA139304);
        swift_bridgeObjectRelease();
        v27 = *(_QWORD *)(v36 + 16);
        if ((v27 & 1) != 0)
        {
          v31 = (v27 - 1) >> 1;
          if (v31 >= v27)
            goto LABEL_71;
          v25 = *(double *)(v36 + 8 * v31 + 32);
          swift_release();
          result = swift_isUniquelyReferenced_nonNull_native();
          if ((result & 1) == 0)
          {
            result = (uint64_t)sub_1CA0B6058(v13);
            v13 = (_QWORD *)result;
          }
          if (v24 >= v13[2])
            goto LABEL_73;
        }
        else
        {
          if (v27 >> 1 >= v27)
            goto LABEL_70;
          if (v27 < 2)
            goto LABEL_72;
          v28 = v36 + 8 * (v27 >> 1);
          v30 = *(double *)(v28 + 24);
          v29 = *(double *)(v28 + 32);
          swift_release();
          result = swift_isUniquelyReferenced_nonNull_native();
          if ((result & 1) == 0)
          {
            result = (uint64_t)sub_1CA0B6058(v13);
            v13 = (_QWORD *)result;
          }
          if (v24 >= v13[2])
            goto LABEL_74;
          v25 = (v29 + v30) * 0.5;
        }
        *(double *)&v13[v24++ + 4] = v25;
        if (a2 - a1 == v24)
          goto LABEL_35;
      }
      __break(1u);
LABEL_62:
      __break(1u);
LABEL_63:
      __break(1u);
LABEL_64:
      __break(1u);
      goto LABEL_65;
    }
LABEL_35:
    v23 = v33;
    v9 = 1;
LABEL_60:
    *a4 = v23;
    a4[1] = v9;
    a4[2] = (uint64_t)v13;
    return result;
  }
  if (v10)
  {
LABEL_80:
    __break(1u);
    goto LABEL_81;
  }
  v11 = *v4;
  result = sub_1CA0B4464(a2 - a1, 0.0);
  if (a2 >= a1)
  {
    v13 = (_QWORD *)result;
    if (a2 != a1)
    {
      v32 = v9;
      v34 = a4;
      v14 = 0;
      v15 = v8 + 8 * a1 + 32;
      while ((uint64_t)(a1 + v14) < a2)
      {
        if (__OFADD__(v14, 1))
          goto LABEL_66;
        if (v11 < 0)
          goto LABEL_84;
        swift_bridgeObjectRetain();
        if (v11)
        {
          v16 = sub_1CA1F0B68();
          *(_QWORD *)(v16 + 16) = v11;
          bzero((void *)(v16 + 32), 8 * v11);
          if (v11 > 0x7FFFFFFF)
            goto LABEL_67;
        }
        else
        {
          v16 = MEMORY[0x1E0DEE9D8];
        }
        if (v7 < (uint64_t)0xFFFFFFFF80000000)
          goto LABEL_68;
        if (v7 > 0x7FFFFFFF)
          goto LABEL_69;
        cblas_dcopy_NEWLAPACK();
        swift_bridgeObjectRelease();
        v36 = v16;
        swift_bridgeObjectRetain();
        sub_1CA1290F4(&v36, sub_1CA13B48C, sub_1CA139304);
        swift_bridgeObjectRelease();
        v17 = *(_QWORD *)(v36 + 16);
        if ((v17 & 1) != 0)
        {
          v22 = (v17 - 1) >> 1;
          if (v22 >= v17)
            goto LABEL_76;
          v21 = *(double *)(v36 + 8 * v22 + 32);
          swift_release();
          result = swift_isUniquelyReferenced_nonNull_native();
          if ((result & 1) == 0)
          {
            result = (uint64_t)sub_1CA0B6058(v13);
            v13 = (_QWORD *)result;
          }
          if (v14 >= v13[2])
            goto LABEL_78;
        }
        else
        {
          if (v17 >> 1 >= v17)
            goto LABEL_75;
          if (v17 < 2)
            goto LABEL_77;
          v18 = v36 + 8 * (v17 >> 1);
          v20 = *(double *)(v18 + 24);
          v19 = *(double *)(v18 + 32);
          swift_release();
          result = swift_isUniquelyReferenced_nonNull_native();
          if ((result & 1) == 0)
          {
            result = (uint64_t)sub_1CA0B6058(v13);
            v13 = (_QWORD *)result;
          }
          if (v14 >= v13[2])
            goto LABEL_79;
          v21 = (v19 + v20) * 0.5;
        }
        *(double *)&v13[v14++ + 4] = v21;
        v15 += 8;
        if (a2 - a1 == v14)
        {
          v9 = v32;
          a4 = v34;
          goto LABEL_59;
        }
      }
LABEL_65:
      __break(1u);
LABEL_66:
      __break(1u);
LABEL_67:
      __break(1u);
LABEL_68:
      __break(1u);
LABEL_69:
      __break(1u);
LABEL_70:
      __break(1u);
LABEL_71:
      __break(1u);
LABEL_72:
      __break(1u);
LABEL_73:
      __break(1u);
LABEL_74:
      __break(1u);
LABEL_75:
      __break(1u);
LABEL_76:
      __break(1u);
LABEL_77:
      __break(1u);
LABEL_78:
      __break(1u);
LABEL_79:
      __break(1u);
      goto LABEL_80;
    }
LABEL_59:
    v23 = 1;
    goto LABEL_60;
  }
LABEL_82:
  __break(1u);
LABEL_83:
  __break(1u);
  swift_release();
  __break(1u);
LABEL_84:
  result = sub_1CA1F11BC();
  __break(1u);
  return result;
}

Swift::Double __swiftcall MAMatrix.mode()()
{
  __int128 *v0;
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  double v4;
  Swift::Double result;
  __int128 v6;
  uint64_t v7;

  v1 = *((_QWORD *)v0 + 2);
  v6 = *v0;
  v7 = v1;
  MAMatrix.frequencies()();
  v2 = swift_bridgeObjectRetain();
  v3 = sub_1CA0B5C34(v2);
  swift_bridgeObjectRelease();
  *(_QWORD *)&v6 = v3;
  sub_1CA12916C((uint64_t *)&v6);
  swift_bridgeObjectRelease();
  if (*(_QWORD *)(v6 + 16))
  {
    v4 = *(double *)(v6 + 32);
    swift_release();
    return v4;
  }
  else
  {
    swift_release();
    __break(1u);
    swift_release();
    __break(1u);
  }
  return result;
}

KnowledgeGraphKit::MAMatrix __swiftcall MAMatrix.mode(axe:)(KnowledgeGraphKit::MAMatrixAxes axe)
{
  _BYTE *v1;
  Swift::Int v2;
  void *v3;
  KnowledgeGraphKit::MAMatrix result;

  v1 = sub_1CA134DE0((_BYTE *)axe, (uint64_t (*)(_QWORD, uint64_t, char *))MAMatrix.mode(range:axe:));
  result.elements._rawValue = v3;
  result.columns = v2;
  result.rows = (Swift::Int)v1;
  return result;
}

_BYTE *sub_1CA134DE0(_BYTE *result, uint64_t (*a2)(_QWORD, uint64_t, char *))
{
  uint64_t *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v4 = *v2;
  v5 = v2[1];
  v6 = v2[2];
  if (*result == 1)
  {
    v8 = *v2;
    v9 = v5;
    v10 = v6;
    if ((v5 & 0x8000000000000000) == 0)
    {
      v7 = 1;
      v4 = v5;
      return (_BYTE *)a2(0, v4, &v7);
    }
    __break(1u);
  }
  else
  {
    v8 = *v2;
    v9 = v5;
    v10 = v6;
    if ((v4 & 0x8000000000000000) == 0)
    {
      v7 = 0;
      return (_BYTE *)a2(0, v4, &v7);
    }
  }
  __break(1u);
  return result;
}

uint64_t MAMatrix.mode(range:axe:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X2>, uint64_t *a4@<X8>)
{
  uint64_t *v4;
  uint64_t v7;
  uint64_t v9;
  BOOL v10;
  uint64_t v11;
  uint64_t result;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t *v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  _QWORD *v29;
  uint64_t v30;
  uint64_t v31;
  double *v32;
  uint64_t v33;
  _QWORD *v34;
  uint64_t v35;
  BOOL v36;
  uint64_t v37;
  uint64_t v38;
  double v39;
  double v40;
  unint64_t v41;
  char v42;
  uint64_t v43;
  _BOOL8 v44;
  uint64_t v45;
  char v46;
  char v47;
  uint64_t v48;
  _QWORD *v49;
  int64_t v50;
  uint64_t v51;
  uint64_t v52;
  unint64_t v53;
  uint64_t v54;
  uint64_t v55;
  unint64_t *v56;
  uint64_t v57;
  uint64_t v58;
  unint64_t v59;
  uint64_t v60;
  uint64_t v61;
  unint64_t v62;
  unint64_t v63;
  uint64_t v64;
  uint64_t v65;
  _QWORD *v66;
  uint64_t v67;
  uint64_t v68;
  double *v69;
  uint64_t v70;
  _QWORD *v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  double v75;
  double v76;
  unint64_t v77;
  char v78;
  uint64_t v79;
  _BOOL8 v80;
  uint64_t v81;
  char v82;
  char v83;
  uint64_t v84;
  _QWORD *v85;
  int64_t v86;
  uint64_t v87;
  uint64_t v88;
  _QWORD *v89;
  uint64_t *v90;
  uint64_t v91;
  _QWORD *v92;
  unint64_t v93;
  _QWORD *v94;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  _QWORD *v99;
  _QWORD *v100;
  uint64_t v101;
  _QWORD *v102;

  v7 = v4[1];
  v101 = v7;
  v9 = a2 - a1;
  v10 = __OFSUB__(a2, a1);
  v96 = a2 - a1;
  v90 = a4;
  if (*a3 != 1)
  {
    if (v10)
    {
LABEL_127:
      __break(1u);
      goto LABEL_128;
    }
    result = sub_1CA0B4464(a2 - a1, 0.0);
    if (a2 < a1)
      goto LABEL_129;
    v16 = a1;
    if (a1 == a2)
    {
      v14 = v9;
      v9 = 1;
      v15 = (_QWORD *)result;
      goto LABEL_104;
    }
    v53 = 0;
    v91 = 8 * v7;
    v54 = MEMORY[0x1E0DEE9D8];
    v15 = (_QWORD *)result;
    while (v53 != v9)
    {
      if (v7 < 0)
        goto LABEL_133;
      v100 = v15;
      swift_bridgeObjectRetain();
      if (v7)
      {
        v55 = sub_1CA1F0B68();
        *(_QWORD *)(v55 + 16) = v7;
        v56 = (unint64_t *)(v55 + 16);
        v57 = v55 + 32;
        bzero((void *)(v55 + 32), v91);
        if (v7 > 0x7FFFFFFF)
          goto LABEL_116;
      }
      else
      {
        v56 = (unint64_t *)(v54 + 16);
        v57 = v54 + 32;
      }
      if ((unsigned __int128)(v16 * (__int128)v7) >> 64 != (v16 * v7) >> 63)
        goto LABEL_117;
      v98 = v16;
      cblas_dcopy_NEWLAPACK();
      swift_bridgeObjectRelease();
      v102 = (_QWORD *)v54;
      sub_1CA0CD5EC(0, 0, 0);
      v58 = swift_allocObject();
      *(_QWORD *)(v58 + 16) = 0;
      if (v7)
      {
        swift_retain();
        swift_bridgeObjectRetain();
        v59 = 0;
        while (v59 < *v56)
        {
          v60 = *(_QWORD *)(v57 + 8 * v59);
          v61 = (uint64_t)v102;
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
          {
            sub_1CA0CD5EC(0, *(_QWORD *)(v61 + 16) + 1, 1);
            v61 = (uint64_t)v102;
          }
          v63 = *(_QWORD *)(v61 + 16);
          v62 = *(_QWORD *)(v61 + 24);
          if (v63 >= v62 >> 1)
          {
            sub_1CA0CD5EC(v62 > 1, v63 + 1, 1);
            v61 = (uint64_t)v102;
          }
          ++v59;
          *(_QWORD *)(v61 + 16) = v63 + 1;
          v64 = v61 + 16 * v63;
          *(_QWORD *)(v64 + 32) = v60;
          *(_QWORD *)(v64 + 40) = 1;
          if (v101 == v59)
          {
            *(_QWORD *)(v58 + 16) = v101;
            swift_bridgeObjectRelease_n();
            swift_release_n();
            goto LABEL_77;
          }
        }
        __break(1u);
LABEL_106:
        __break(1u);
        goto LABEL_107;
      }
      swift_bridgeObjectRelease();
      swift_release();
LABEL_77:
      v65 = (uint64_t)v102;
      if (v102[2])
      {
        __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_1EF938480);
        v66 = (_QWORD *)sub_1CA1F1264();
        v67 = *(_QWORD *)(v65 + 16);
        v102 = v66;
        if (v67)
        {
          swift_retain();
          v68 = 0;
          v69 = (double *)(v65 + 40);
          while (1)
          {
            v74 = v68 + 1;
            if (__OFADD__(v68, 1))
              break;
            v75 = *(v69 - 1);
            v76 = *v69;
            v77 = sub_1CA0AA6C4(v75);
            v79 = v66[2];
            v80 = (v78 & 1) == 0;
            v36 = __OFADD__(v79, v80);
            v81 = v79 + v80;
            if (v36)
              goto LABEL_108;
            v82 = v78;
            if (v66[3] < v81)
            {
              sub_1CA0ED640(v81, 1);
              v66 = v102;
              v77 = sub_1CA0AA6C4(v75);
              if ((v82 & 1) != (v83 & 1))
                goto LABEL_132;
            }
            if ((v82 & 1) != 0)
            {
              v71 = (_QWORD *)(v66[7] + 8 * v77);
              v73 = *v71 + *(_QWORD *)&v76;
              if (__OFADD__(*v71, *(_QWORD *)&v76))
                goto LABEL_112;
            }
            else
            {
              v66[(v77 >> 6) + 8] |= 1 << v77;
              v70 = 8 * v77;
              *(double *)(v66[6] + v70) = v75;
              *(double *)(v66[7] + v70) = v76;
              v71 = v66 + 2;
              v72 = v66[2];
              v36 = __OFADD__(v72, 1);
              v73 = v72 + 1;
              if (v36)
                goto LABEL_111;
            }
            v69 += 2;
            *v71 = v73;
            ++v68;
            if (v74 == v67)
            {
              swift_release();
              goto LABEL_92;
            }
          }
LABEL_107:
          __break(1u);
LABEL_108:
          __break(1u);
LABEL_109:
          __break(1u);
LABEL_110:
          __break(1u);
LABEL_111:
          __break(1u);
LABEL_112:
          __break(1u);
LABEL_113:
          __break(1u);
LABEL_114:
          __break(1u);
          break;
        }
      }
      else
      {
        v66 = (_QWORD *)MEMORY[0x1E0DEE9E0];
      }
LABEL_92:
      swift_release();
      v84 = v66[2];
      if (v84)
      {
        __swift_instantiateConcreteTypeFromMangledName(&qword_1EF937150);
        v85 = (_QWORD *)swift_allocObject();
        v86 = _swift_stdlib_malloc_size(v85);
        v87 = v86 - 32;
        if (v86 < 32)
          v87 = v86 - 17;
        v85[2] = v84;
        v85[3] = 2 * (v87 >> 4);
        v94 = sub_1CA139160(&v102, v85 + 4, v84, (uint64_t)v66);
        swift_retain();
        swift_bridgeObjectRetain();
        sub_1CA0B6A14();
        if (v94 != (_QWORD *)v84)
          goto LABEL_124;
        swift_release();
      }
      else
      {
        v85 = (_QWORD *)v54;
      }
      v102 = v85;
      sub_1CA12916C((uint64_t *)&v102);
      v9 = v96;
      v15 = v100;
      swift_release();
      v7 = v101;
      if (!v102[2])
        goto LABEL_130;
      v88 = v102[4];
      swift_release();
      result = swift_isUniquelyReferenced_nonNull_native();
      if ((result & 1) == 0)
      {
        result = (uint64_t)sub_1CA0B6058(v100);
        v15 = (_QWORD *)result;
      }
      if (v53 >= v15[2])
        goto LABEL_122;
      v16 = v98 + 1;
      v89 = &v15[v53++];
      v89[4] = v88;
      if (v98 + 1 == a2)
      {
        v14 = v96;
        v9 = 1;
        goto LABEL_104;
      }
    }
    __break(1u);
LABEL_116:
    __break(1u);
LABEL_117:
    __break(1u);
    goto LABEL_118;
  }
  if (v10)
  {
LABEL_126:
    __break(1u);
    goto LABEL_127;
  }
  v11 = *v4;
  result = sub_1CA0B4464(a2 - a1, 0.0);
  if (a2 >= a1)
  {
    v13 = a1;
    if (a1 == a2)
    {
      v14 = 1;
      v15 = (_QWORD *)result;
LABEL_104:
      *v90 = v14;
      v90[1] = v9;
      v90[2] = (uint64_t)v15;
      return result;
    }
    v17 = 0;
    v14 = 1;
    v15 = (_QWORD *)result;
    while (v17 != v9)
    {
      if (v11 < 0)
        goto LABEL_133;
      v93 = v17;
      v99 = v15;
      swift_bridgeObjectRetain();
      if (v11)
      {
        v18 = sub_1CA1F0B68();
        *(_QWORD *)(v18 + 16) = v11;
        v19 = (unint64_t *)(v18 + 16);
        v20 = v18 + 32;
        bzero((void *)(v18 + 32), 8 * v11);
        if (v11 > 0x7FFFFFFF)
          goto LABEL_119;
      }
      else
      {
        v19 = (unint64_t *)(MEMORY[0x1E0DEE9D8] + 16);
        v20 = MEMORY[0x1E0DEE9D8] + 32;
      }
      if (v7 < (uint64_t)0xFFFFFFFF80000000)
        goto LABEL_120;
      if (v7 > 0x7FFFFFFF)
        goto LABEL_121;
      v97 = v13;
      cblas_dcopy_NEWLAPACK();
      swift_bridgeObjectRelease();
      v102 = (_QWORD *)MEMORY[0x1E0DEE9D8];
      sub_1CA0CD5EC(0, 0, 0);
      v21 = swift_allocObject();
      *(_QWORD *)(v21 + 16) = 0;
      if (v11)
      {
        swift_retain();
        swift_bridgeObjectRetain();
        v22 = 0;
        while (v22 < *v19)
        {
          v23 = *(_QWORD *)(v20 + 8 * v22);
          v24 = (uint64_t)v102;
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
          {
            sub_1CA0CD5EC(0, *(_QWORD *)(v24 + 16) + 1, 1);
            v24 = (uint64_t)v102;
          }
          v26 = *(_QWORD *)(v24 + 16);
          v25 = *(_QWORD *)(v24 + 24);
          if (v26 >= v25 >> 1)
          {
            sub_1CA0CD5EC(v25 > 1, v26 + 1, 1);
            v24 = (uint64_t)v102;
          }
          ++v22;
          *(_QWORD *)(v24 + 16) = v26 + 1;
          v27 = v24 + 16 * v26;
          *(_QWORD *)(v27 + 32) = v23;
          *(_QWORD *)(v27 + 40) = 1;
          if (v11 == v22)
          {
            *(_QWORD *)(v21 + 16) = v11;
            swift_bridgeObjectRelease_n();
            swift_release_n();
            v7 = v101;
            goto LABEL_32;
          }
        }
        goto LABEL_106;
      }
      swift_bridgeObjectRelease();
      swift_release();
LABEL_32:
      v28 = (uint64_t)v102;
      if (v102[2])
      {
        __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_1EF938480);
        v29 = (_QWORD *)sub_1CA1F1264();
        v30 = *(_QWORD *)(v28 + 16);
        v102 = v29;
        if (v30)
        {
          swift_retain();
          v31 = 0;
          v32 = (double *)(v28 + 40);
          while (1)
          {
            v38 = v31 + 1;
            if (__OFADD__(v31, 1))
              goto LABEL_109;
            v39 = *(v32 - 1);
            v40 = *v32;
            v41 = sub_1CA0AA6C4(v39);
            v43 = v29[2];
            v44 = (v42 & 1) == 0;
            v36 = __OFADD__(v43, v44);
            v45 = v43 + v44;
            if (v36)
              goto LABEL_110;
            v46 = v42;
            if (v29[3] < v45)
            {
              sub_1CA0ED640(v45, 1);
              v29 = v102;
              v41 = sub_1CA0AA6C4(v39);
              if ((v46 & 1) != (v47 & 1))
                goto LABEL_132;
            }
            if ((v46 & 1) != 0)
            {
              v34 = (_QWORD *)(v29[7] + 8 * v41);
              v37 = *v34 + *(_QWORD *)&v40;
              if (__OFADD__(*v34, *(_QWORD *)&v40))
                goto LABEL_114;
            }
            else
            {
              v29[(v41 >> 6) + 8] |= 1 << v41;
              v33 = 8 * v41;
              *(double *)(v29[6] + v33) = v39;
              *(double *)(v29[7] + v33) = v40;
              v34 = v29 + 2;
              v35 = v29[2];
              v36 = __OFADD__(v35, 1);
              v37 = v35 + 1;
              if (v36)
                goto LABEL_113;
            }
            v32 += 2;
            *v34 = v37;
            ++v31;
            if (v38 == v30)
            {
              swift_release();
              v7 = v101;
              break;
            }
          }
        }
      }
      else
      {
        v29 = (_QWORD *)MEMORY[0x1E0DEE9E0];
      }
      swift_release();
      v48 = v29[2];
      if (v48)
      {
        __swift_instantiateConcreteTypeFromMangledName(&qword_1EF937150);
        v49 = (_QWORD *)swift_allocObject();
        v50 = _swift_stdlib_malloc_size(v49);
        v51 = v50 - 32;
        if (v50 < 32)
          v51 = v50 - 17;
        v49[2] = v48;
        v49[3] = 2 * (v51 >> 4);
        v92 = sub_1CA139160(&v102, v49 + 4, v48, (uint64_t)v29);
        swift_retain();
        swift_bridgeObjectRetain();
        sub_1CA0B6A14();
        if (v92 != (_QWORD *)v48)
          goto LABEL_125;
        swift_release();
        v7 = v101;
      }
      else
      {
        v49 = (_QWORD *)MEMORY[0x1E0DEE9D8];
      }
      v102 = v49;
      sub_1CA12916C((uint64_t *)&v102);
      swift_release();
      v9 = v96;
      v15 = v99;
      if (!v102[2])
        goto LABEL_131;
      v52 = v102[4];
      swift_release();
      result = swift_isUniquelyReferenced_nonNull_native();
      if ((result & 1) == 0)
      {
        result = (uint64_t)sub_1CA0B6058(v99);
        v15 = (_QWORD *)result;
      }
      if (v93 >= v15[2])
        goto LABEL_123;
      v13 = v97 + 1;
      v17 = v93 + 1;
      v15[v93 + 4] = v52;
      if (v97 + 1 == a2)
        goto LABEL_104;
    }
LABEL_118:
    __break(1u);
LABEL_119:
    __break(1u);
LABEL_120:
    __break(1u);
LABEL_121:
    __break(1u);
LABEL_122:
    __break(1u);
LABEL_123:
    __break(1u);
LABEL_124:
    __break(1u);
LABEL_125:
    __break(1u);
    goto LABEL_126;
  }
LABEL_128:
  __break(1u);
LABEL_129:
  __break(1u);
LABEL_130:
  swift_release();
  __break(1u);
LABEL_131:
  swift_release();
  __break(1u);
LABEL_132:
  sub_1CA1F1360();
  __break(1u);
LABEL_133:
  sub_1CA1F11BC();
  __break(1u);
  result = swift_release();
  __break(1u);
  return result;
}

double sub_1CA1358E0(int64_t *a1, uint64_t *a2)
{
  uint64_t v2;
  int64_t v3;
  int64_t v4;
  int64_t v5;
  uint64_t v7;
  uint64_t v8;
  unint64_t v10;
  int64_t v11;
  uint64_t v12;
  double v13;
  uint64_t v15[3];
  int64_t v16[3];
  int64_t __C[4];

  __C[3] = *MEMORY[0x1E0C80C00];
  v4 = *a1;
  v5 = a1[1];
  if (v5 != 1 && v4 != 1)
    goto LABEL_22;
  v7 = *a2;
  v8 = a2[1];
  if (v8 != 1 && v7 != 1)
LABEL_23:
    __break(1u);
  v10 = v4 * v5;
  if ((unsigned __int128)(v4 * (__int128)v5) >> 64 != (v4 * v5) >> 63)
  {
    __break(1u);
    goto LABEL_18;
  }
  if ((unsigned __int128)(v7 * (__int128)v8) >> 64 != (v7 * v8) >> 63)
  {
LABEL_18:
    __break(1u);
    goto LABEL_19;
  }
  if (v10 != v7 * v8)
  {
LABEL_19:
    __break(1u);
LABEL_20:
    v2 = (uint64_t)sub_1CA0B6058((_QWORD *)v2);
    if ((v10 & 0x8000000000000000) == 0)
      goto LABEL_16;
LABEL_21:
    sub_1CA1F11BC();
    __break(1u);
LABEL_22:
    __break(1u);
    goto LABEL_23;
  }
  v11 = a1[2];
  v12 = a2[2];
  v16[0] = *a1;
  v16[1] = v5;
  v16[2] = v11;
  v15[0] = v7;
  v15[1] = v8;
  v15[2] = v12;
  - infix(_:_:)(v16, v15, __C);
  v3 = __C[2];
  v2 = sub_1CA0B4464(v10, 0.0);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    goto LABEL_20;
  if ((v10 & 0x8000000000000000) != 0)
    goto LABEL_21;
LABEL_16:
  vDSP_vsqD((const double *)(v3 + 32), 1, (double *)(v2 + 32), 1, v10);
  swift_bridgeObjectRelease();
  __C[0] = 0;
  swift_bridgeObjectRetain();
  vDSP_sveD((const double *)(v2 + 32), 1, (double *)__C, v10);
  swift_bridgeObjectRelease();
  v13 = *(double *)__C;
  swift_bridgeObjectRelease();
  return sqrt(v13);
}

Swift::Double __swiftcall MAMatrix.euclideanDistance(row:column:)(Swift::Int row, Swift::Int column)
{
  double *v2;
  Swift::Int v3;
  Swift::Int v4;
  uint64_t v5;
  int64_t v6;
  int64_t v7;
  double v8;
  Swift::Double result;
  double __B[2];

  __B[1] = *(double *)MEMORY[0x1E0C80C00];
  v6 = *((_QWORD *)v2 + 1);
  v7 = *(_QWORD *)v2 * v6;
  if ((unsigned __int128)(*(uint64_t *)v2 * (__int128)v6) >> 64 == v7 >> 63)
  {
    v3 = column;
    v4 = row;
    v5 = *((_QWORD *)v2 + 2);
    v2 = (double *)sub_1CA0B4464(*(_QWORD *)v2 * v6, 0.0);
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) != 0)
      goto LABEL_3;
  }
  else
  {
    __break(1u);
  }
  v2 = (double *)sub_1CA0B6058(v2);
LABEL_3:
  __B[0] = 1.0;
  if ((unsigned __int128)(v4 * (__int128)v6) >> 64 != (v4 * v6) >> 63)
    __break(1u);
  if (v6 < 0
    || (vDSP_vsmsbD((const double *)(v5 + 32 + 8 * v4 * v6), 1, __B, (const double *)(v5 + 32 + 8 * v3), v6, v2 + 4, 1, v6), vDSP_vsqD(v2 + 4, 1, v2 + 4, 1, v6), __B[0] = 0.0, v7 < 0))
  {
    sub_1CA1F11BC();
    __break(1u);
  }
  else
  {
    swift_bridgeObjectRetain();
    vDSP_sveD(v2 + 4, 1, __B, v7);
    swift_bridgeObjectRelease();
    v8 = __B[0];
    swift_bridgeObjectRelease();
    return sqrt(v8);
  }
  return result;
}

Swift::Double __swiftcall MAMatrix.euclideanDistance(rowA:rowB:)(Swift::Int rowA, Swift::Int rowB)
{
  double *v2;
  Swift::Int v3;
  Swift::Int v4;
  uint64_t v5;
  int64_t v6;
  int64_t v7;
  double v8;
  Swift::Double result;
  double __B[2];

  __B[1] = *(double *)MEMORY[0x1E0C80C00];
  v6 = *((_QWORD *)v2 + 1);
  v7 = *(_QWORD *)v2 * v6;
  if ((unsigned __int128)(*(uint64_t *)v2 * (__int128)v6) >> 64 == v7 >> 63)
  {
    v3 = rowB;
    v4 = rowA;
    v5 = *((_QWORD *)v2 + 2);
    v2 = (double *)sub_1CA0B4464(*(_QWORD *)v2 * v6, 0.0);
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) != 0)
      goto LABEL_3;
  }
  else
  {
    __break(1u);
  }
  v2 = (double *)sub_1CA0B6058(v2);
LABEL_3:
  __B[0] = 1.0;
  if ((unsigned __int128)(v4 * (__int128)v6) >> 64 != (v4 * v6) >> 63)
  {
    __break(1u);
LABEL_11:
    __break(1u);
  }
  if ((unsigned __int128)(v3 * (__int128)v6) >> 64 != (v3 * v6) >> 63)
    goto LABEL_11;
  if (v6 < 0
    || (vDSP_vsmsbD((const double *)(v5 + 32 + 8 * v4 * v6), 1, __B, (const double *)(v5 + 32 + 8 * v3 * v6), 1, v2 + 4, 1, v6), vDSP_vsqD(v2 + 4, 1, v2 + 4, 1, v6), __B[0] = 0.0, v7 < 0))
  {
    sub_1CA1F11BC();
    __break(1u);
  }
  else
  {
    swift_bridgeObjectRetain();
    vDSP_sveD(v2 + 4, 1, __B, v7);
    swift_bridgeObjectRelease();
    v8 = __B[0];
    swift_bridgeObjectRelease();
    return sqrt(v8);
  }
  return result;
}

Swift::Double __swiftcall MAMatrix.euclideanDistance(columnA:columnB:)(Swift::Int columnA, Swift::Int columnB)
{
  double *v2;
  Swift::Int v3;
  Swift::Int v4;
  uint64_t v5;
  int64_t v6;
  int64_t v7;
  double v8;
  Swift::Double result;
  double __B[2];

  __B[1] = *(double *)MEMORY[0x1E0C80C00];
  v6 = *((_QWORD *)v2 + 1);
  v7 = *(_QWORD *)v2 * v6;
  if ((unsigned __int128)(*(uint64_t *)v2 * (__int128)v6) >> 64 != v7 >> 63)
  {
    __break(1u);
    goto LABEL_7;
  }
  v3 = columnB;
  v4 = columnA;
  v5 = *((_QWORD *)v2 + 2);
  v2 = (double *)sub_1CA0B4464(*(_QWORD *)v2 * v6, 0.0);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
LABEL_7:
    v2 = (double *)sub_1CA0B6058(v2);
  __B[0] = 1.0;
  if (v6 < 0
    || (vDSP_vsmsbD((const double *)(v5 + 32 + 8 * v4), v6, __B, (const double *)(v5 + 32 + 8 * v3), v6, v2 + 4, 1, v6), vDSP_vsqD(v2 + 4, 1, v2 + 4, 1, v6), __B[0] = 0.0, v7 < 0))
  {
    sub_1CA1F11BC();
    __break(1u);
  }
  else
  {
    swift_bridgeObjectRetain();
    vDSP_sveD(v2 + 4, 1, __B, v7);
    swift_bridgeObjectRelease();
    v8 = __B[0];
    swift_bridgeObjectRelease();
    return sqrt(v8);
  }
  return result;
}

Swift::Double __swiftcall MAMatrix.cosineSimilarity(vector:)(KnowledgeGraphKit::MAMatrix vector)
{
  uint64_t *v1;
  Swift::Double result;
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  double v12;
  double v13;
  double v14;
  double v15;
  _QWORD v16[3];
  uint64_t v17[3];

  v3 = *v1;
  v4 = v1[1];
  if (v4 != 1 && v3 != 1)
    goto LABEL_26;
  v6 = *(_QWORD *)vector.rows;
  v7 = *(_QWORD *)(vector.rows + 8);
  if (v7 != 1 && v6 != 1)
    goto LABEL_27;
  v9 = v3 * v4;
  if ((unsigned __int128)(v3 * (__int128)v4) >> 64 != (v3 * v4) >> 63)
  {
    __break(1u);
    goto LABEL_22;
  }
  if ((unsigned __int128)(v6 * (__int128)v7) >> 64 != (v6 * v7) >> 63)
  {
LABEL_22:
    __break(1u);
    goto LABEL_23;
  }
  if (v9 != v6 * v7)
  {
LABEL_23:
    __break(1u);
    goto LABEL_24;
  }
  v10 = *(_QWORD *)(vector.rows + 16);
  v11 = v1[2];
  v17[0] = v3;
  v17[1] = v4;
  v17[2] = v11;
  v16[0] = v6;
  v16[1] = v7;
  v16[2] = v10;
  ⋅ infix(_:_:)(v17, v16);
  if (v9 < (uint64_t)0xFFFFFFFF80000000)
  {
LABEL_24:
    __break(1u);
    goto LABEL_25;
  }
  if (v9 > 0x7FFFFFFF)
  {
LABEL_25:
    __break(1u);
LABEL_26:
    __break(1u);
LABEL_27:
    __break(1u);
    return result;
  }
  v12 = result;
  cblas_dnrm2_NEWLAPACK();
  v14 = v13;
  cblas_dnrm2_NEWLAPACK();
  result = v12 / (v14 * v15);
  if (result > 1.0)
    result = 1.0;
  if (result <= 0.0)
    return 0.0;
  return result;
}

Swift::Double __swiftcall MAMatrix.cosineSimilarity(row:column:)(Swift::Int row, Swift::Int column)
{
  vDSP_Length *v2;
  vDSP_Length v3;
  vDSP_Length v4;
  double v5;
  double v6;
  double v7;
  Swift::Double result;
  double __C[2];

  __C[1] = *(double *)MEMORY[0x1E0C80C00];
  v3 = *v2;
  if (*v2 != v2[1])
  {
    __break(1u);
    goto LABEL_11;
  }
  v4 = v2[2];
  __C[0] = 0.0;
  if ((unsigned __int128)(row * (__int128)(uint64_t)v3) >> 64 != (uint64_t)(row * v3) >> 63)
  {
LABEL_11:
    __break(1u);
    goto LABEL_12;
  }
  if ((v3 & 0x8000000000000000) != 0)
  {
    sub_1CA1F11BC();
    __break(1u);
    return result;
  }
  vDSP_dotprD((const double *)(v4 + 32 + 8 * row * v3), 1, (const double *)(v4 + 32 + 8 * column), v3, __C, v3);
  if (v3 >> 31)
LABEL_12:
    __break(1u);
  cblas_dnrm2_NEWLAPACK();
  v6 = v5;
  cblas_dnrm2_NEWLAPACK();
  result = __C[0] / (v6 * v7);
  if (result > 1.0)
    result = 1.0;
  if (result <= 0.0)
    return 0.0;
  return result;
}

Swift::Double __swiftcall MAMatrix.cosineSimilarity(rowA:rowB:)(Swift::Int rowA, Swift::Int rowB)
{
  uint64_t v2;
  uint64_t v3;
  int64_t v4;
  double v5;
  double v6;
  double v7;
  Swift::Double result;
  double __C[2];

  __C[1] = *(double *)MEMORY[0x1E0C80C00];
  v4 = *(_QWORD *)(v2 + 8);
  v3 = *(_QWORD *)(v2 + 16);
  __C[0] = 0.0;
  if ((unsigned __int128)(rowA * (__int128)v4) >> 64 != (rowA * v4) >> 63)
  {
    __break(1u);
    goto LABEL_11;
  }
  if ((unsigned __int128)(rowB * (__int128)v4) >> 64 != (rowB * v4) >> 63)
  {
LABEL_11:
    __break(1u);
    goto LABEL_12;
  }
  if (v4 < 0)
  {
    sub_1CA1F11BC();
    __break(1u);
    return result;
  }
  vDSP_dotprD((const double *)(v3 + 32 + 8 * rowA * v4), 1, (const double *)(v3 + 32 + 8 * rowB * v4), 1, __C, v4);
  if ((unint64_t)v4 >> 31)
LABEL_12:
    __break(1u);
  cblas_dnrm2_NEWLAPACK();
  v6 = v5;
  cblas_dnrm2_NEWLAPACK();
  result = __C[0] / (v6 * v7);
  if (result > 1.0)
    result = 1.0;
  if (result <= 0.0)
    return 0.0;
  return result;
}

Swift::Double __swiftcall MAMatrix.cosineSimilarity(columnA:columnB:)(Swift::Int columnA, Swift::Int columnB)
{
  vDSP_Length *v2;
  vDSP_Stride v3;
  vDSP_Length v4;
  vDSP_Length v5;
  double v6;
  double v7;
  double v8;
  Swift::Double result;
  double __C[2];

  __C[1] = *(double *)MEMORY[0x1E0C80C00];
  v4 = *v2;
  v3 = v2[1];
  v5 = v2[2];
  __C[0] = 0.0;
  if ((v4 & 0x8000000000000000) != 0)
  {
    sub_1CA1F11BC();
    __break(1u);
    return result;
  }
  vDSP_dotprD((const double *)(v5 + 32 + 8 * columnA), v3, (const double *)(v5 + 32 + 8 * columnB), v3, __C, v4);
  if (v4 >> 31)
  {
    __break(1u);
    goto LABEL_11;
  }
  if (v3 < (uint64_t)0xFFFFFFFF80000000)
  {
LABEL_11:
    __break(1u);
LABEL_12:
    __break(1u);
  }
  if (v3 > 0x7FFFFFFF)
    goto LABEL_12;
  cblas_dnrm2_NEWLAPACK();
  v7 = v6;
  cblas_dnrm2_NEWLAPACK();
  result = __C[0] / (v7 * v8);
  if (result > 1.0)
    result = 1.0;
  if (result <= 0.0)
    return 0.0;
  return result;
}

Swift::Double __swiftcall MAMatrix.cosineDistance(vector:)(KnowledgeGraphKit::MAMatrix vector)
{
  uint64_t *v1;
  Swift::Double result;
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v9;
  uint64_t v10;
  long double v11;
  double v12;
  _QWORD v13[6];

  v3 = *v1;
  v4 = v1[1];
  if (v4 != 1 && v3 != 1)
    goto LABEL_22;
  v6 = *(_QWORD *)vector.rows;
  v7 = *(_QWORD *)(vector.rows + 8);
  if (v7 != 1 && v6 != 1)
    goto LABEL_23;
  if ((unsigned __int128)(v3 * (__int128)v4) >> 64 != (v3 * v4) >> 63)
  {
    __break(1u);
    goto LABEL_20;
  }
  if ((unsigned __int128)(v6 * (__int128)v7) >> 64 != (v6 * v7) >> 63)
  {
LABEL_20:
    __break(1u);
    goto LABEL_21;
  }
  if (v3 * v4 != v6 * v7)
  {
LABEL_21:
    __break(1u);
LABEL_22:
    __break(1u);
LABEL_23:
    __break(1u);
    return result;
  }
  v9 = *(_QWORD *)(vector.rows + 16);
  v10 = v1[2];
  v13[3] = *v1;
  v13[4] = v4;
  v13[5] = v10;
  v13[0] = v6;
  v13[1] = v7;
  v13[2] = v9;
  vector.rows = (Swift::Int)v13;
  v11 = MAMatrix.cosineSimilarity(vector:)(vector);
  result = acos(v11) / 3.14159265;
  v12 = 1.0;
  if ((*(_QWORD *)&result & 0xFFFFFFFFFFFFFLL) == 0)
    v12 = result;
  if ((~*(_QWORD *)&result & 0x7FF0000000000000) == 0)
    return v12;
  return result;
}

uint64_t sub_1CA13653C(uint64_t result, uint64_t *a2)
{
  int64_t v2;
  int64_t v3;
  uint64_t v5;
  uint64_t v6;
  int64_t v8;
  uint64_t v9;
  uint64_t v10[3];
  int64_t v11[3];
  int64_t v12;
  uint64_t v13;

  v2 = *(_QWORD *)result;
  v3 = *(_QWORD *)(result + 8);
  if (v3 != 1 && v2 != 1)
    goto LABEL_24;
  v5 = *a2;
  v6 = a2[1];
  if (v6 != 1 && v5 != 1)
    goto LABEL_25;
  if ((unsigned __int128)(v2 * (__int128)v3) >> 64 != (v2 * v3) >> 63)
  {
    __break(1u);
    goto LABEL_19;
  }
  if ((unsigned __int128)(v5 * (__int128)v6) >> 64 != (v5 * v6) >> 63)
  {
LABEL_19:
    __break(1u);
    goto LABEL_20;
  }
  if (v2 * v3 != v5 * v6)
  {
LABEL_20:
    __break(1u);
    goto LABEL_21;
  }
  v8 = *(_QWORD *)(result + 16);
  v9 = a2[2];
  v11[0] = *(_QWORD *)result;
  v11[1] = v3;
  v11[2] = v8;
  v10[0] = v5;
  v10[1] = v6;
  v10[2] = v9;
  - infix(_:_:)(v11, v10, &v12);
  result = v12 * v13;
  if ((unsigned __int128)(v12 * (__int128)v13) >> 64 != (v12 * v13) >> 63)
  {
LABEL_21:
    __break(1u);
    goto LABEL_22;
  }
  if (result >= (uint64_t)0xFFFFFFFF80000000)
  {
    if (result <= 0x7FFFFFFF)
    {
      cblas_dasum_NEWLAPACK();
      return swift_bridgeObjectRelease();
    }
    goto LABEL_23;
  }
LABEL_22:
  __break(1u);
LABEL_23:
  __break(1u);
LABEL_24:
  __break(1u);
LABEL_25:
  __break(1u);
  return result;
}

Swift::Double __swiftcall MAMatrix.manhattanDistance(vector:)(KnowledgeGraphKit::MAMatrix vector)
{
  Swift::Double result;

  sub_1CA13664C((__int128 *)vector.rows, (uint64_t (*)(__int128 *, __int128 *))sub_1CA13653C);
  return result;
}

uint64_t sub_1CA13664C(__int128 *a1, uint64_t (*a2)(__int128 *, __int128 *))
{
  __int128 *v2;
  uint64_t v3;
  uint64_t v4;
  __int128 v6;
  uint64_t v7;
  __int128 v8;
  uint64_t v9;

  v3 = *((_QWORD *)a1 + 2);
  v4 = *((_QWORD *)v2 + 2);
  v8 = *v2;
  v9 = v4;
  v6 = *a1;
  v7 = v3;
  return a2(&v8, &v6);
}

Swift::Double __swiftcall MAMatrix.manhattanDistance(row:column:)(Swift::Int row, Swift::Int column)
{
  double *v2;
  Swift::Int v3;
  Swift::Int v4;
  uint64_t v5;
  int64_t v6;
  uint64_t v7;
  double v8;
  double v9;
  Swift::Double result;
  double __B[2];

  __B[1] = *(double *)MEMORY[0x1E0C80C00];
  v6 = *((_QWORD *)v2 + 1);
  v7 = *(_QWORD *)v2 * v6;
  if ((unsigned __int128)(*(uint64_t *)v2 * (__int128)v6) >> 64 == v7 >> 63)
  {
    v3 = column;
    v4 = row;
    v5 = *((_QWORD *)v2 + 2);
    v2 = (double *)sub_1CA0B4464(*(_QWORD *)v2 * v6, 0.0);
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) != 0)
      goto LABEL_3;
  }
  else
  {
    __break(1u);
  }
  v2 = (double *)sub_1CA0B6058(v2);
LABEL_3:
  __B[0] = 1.0;
  if ((unsigned __int128)(v4 * (__int128)v6) >> 64 != (v4 * v6) >> 63)
  {
    __break(1u);
    goto LABEL_11;
  }
  if ((v6 & 0x8000000000000000) == 0)
  {
    vDSP_vsmsbD((const double *)(v5 + 32 + 8 * v4 * v6), 1, __B, (const double *)(v5 + 32 + 8 * v3), v6, v2 + 4, 1, v6);
    if (v7 >= (uint64_t)0xFFFFFFFF80000000)
    {
      if (v7 <= 0x7FFFFFFF)
      {
        swift_bridgeObjectRetain();
        cblas_dasum_NEWLAPACK();
        v9 = v8;
        swift_bridgeObjectRelease_n();
        return v9;
      }
LABEL_12:
      __break(1u);
    }
LABEL_11:
    __break(1u);
    goto LABEL_12;
  }
  sub_1CA1F11BC();
  __break(1u);
  return result;
}

Swift::Double __swiftcall MAMatrix.manhattanDistance(rowA:rowB:)(Swift::Int rowA, Swift::Int rowB)
{
  double *v2;
  Swift::Int v3;
  Swift::Int v4;
  uint64_t v5;
  int64_t v6;
  uint64_t v7;
  double v8;
  double v9;
  Swift::Double result;
  double __B[2];

  __B[1] = *(double *)MEMORY[0x1E0C80C00];
  v6 = *((_QWORD *)v2 + 1);
  v7 = *(_QWORD *)v2 * v6;
  if ((unsigned __int128)(*(uint64_t *)v2 * (__int128)v6) >> 64 == v7 >> 63)
  {
    v3 = rowB;
    v4 = rowA;
    v5 = *((_QWORD *)v2 + 2);
    v2 = (double *)sub_1CA0B4464(*(_QWORD *)v2 * v6, 0.0);
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) != 0)
      goto LABEL_3;
  }
  else
  {
    __break(1u);
  }
  v2 = (double *)sub_1CA0B6058(v2);
LABEL_3:
  __B[0] = 1.0;
  if ((unsigned __int128)(v4 * (__int128)v6) >> 64 != (v4 * v6) >> 63)
  {
    __break(1u);
    goto LABEL_12;
  }
  if ((unsigned __int128)(v3 * (__int128)v6) >> 64 != (v3 * v6) >> 63)
  {
LABEL_12:
    __break(1u);
    goto LABEL_13;
  }
  if ((v6 & 0x8000000000000000) == 0)
  {
    vDSP_vsmsbD((const double *)(v5 + 32 + 8 * v4 * v6), 1, __B, (const double *)(v5 + 32 + 8 * v3 * v6), 1, v2 + 4, 1, v6);
    if (v7 >= (uint64_t)0xFFFFFFFF80000000)
    {
      if (v7 <= 0x7FFFFFFF)
      {
        swift_bridgeObjectRetain();
        cblas_dasum_NEWLAPACK();
        v9 = v8;
        swift_bridgeObjectRelease_n();
        return v9;
      }
LABEL_14:
      __break(1u);
    }
LABEL_13:
    __break(1u);
    goto LABEL_14;
  }
  sub_1CA1F11BC();
  __break(1u);
  return result;
}

Swift::Double __swiftcall MAMatrix.manhattanDistance(columnA:columnB:)(Swift::Int columnA, Swift::Int columnB)
{
  double *v2;
  Swift::Int v3;
  Swift::Int v4;
  uint64_t v5;
  int64_t v6;
  uint64_t v7;
  double v8;
  double v9;
  Swift::Double result;
  double __B[2];

  __B[1] = *(double *)MEMORY[0x1E0C80C00];
  v6 = *((_QWORD *)v2 + 1);
  v7 = *(_QWORD *)v2 * v6;
  if ((unsigned __int128)(*(uint64_t *)v2 * (__int128)v6) >> 64 == v7 >> 63)
  {
    v3 = columnB;
    v4 = columnA;
    v5 = *((_QWORD *)v2 + 2);
    v2 = (double *)sub_1CA0B4464(*(_QWORD *)v2 * v6, 0.0);
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) != 0)
      goto LABEL_3;
  }
  else
  {
    __break(1u);
  }
  v2 = (double *)sub_1CA0B6058(v2);
LABEL_3:
  __B[0] = 1.0;
  if ((v6 & 0x8000000000000000) == 0)
  {
    vDSP_vsmsbD((const double *)(v5 + 32 + 8 * v4), v6, __B, (const double *)(v5 + 32 + 8 * v3), v6, v2 + 4, 1, v6);
    if (v7 < (uint64_t)0xFFFFFFFF80000000)
    {
      __break(1u);
    }
    else if (v7 <= 0x7FFFFFFF)
    {
      swift_bridgeObjectRetain();
      cblas_dasum_NEWLAPACK();
      v9 = v8;
      swift_bridgeObjectRelease_n();
      return v9;
    }
    __break(1u);
  }
  sub_1CA1F11BC();
  __break(1u);
  return result;
}

Swift::Double __swiftcall MAMatrix.distance(vector:distance:)(KnowledgeGraphKit::MAMatrix vector, KnowledgeGraphKit::MAMatrixDistances distance)
{
  int64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  int v6;
  int64_t v7;
  int64_t v8;
  Swift::Double result;
  uint64_t v10[3];
  int64_t v11;
  uint64_t v12;
  uint64_t v13;
  int64_t v14;
  int64_t v15;
  int64_t v16;

  v4 = *(_QWORD *)vector.rows;
  v3 = *(_QWORD *)(vector.rows + 8);
  v5 = *(_QWORD *)(vector.rows + 16);
  v6 = *(unsigned __int8 *)vector.columns;
  v7 = v2[1];
  v8 = v2[2];
  if (*(_BYTE *)vector.columns)
  {
    v11 = *v2;
    v12 = v7;
    v13 = v8;
    v10[0] = v4;
    v10[1] = v3;
    v10[2] = v5;
    if (v6 == 1)
      return sub_1CA1358E0(&v11, v10);
    else
      sub_1CA13653C((uint64_t)&v11, v10);
  }
  else
  {
    v14 = *v2;
    v15 = v7;
    v16 = v8;
    v11 = v4;
    v12 = v3;
    v13 = v5;
    vector.rows = (Swift::Int)&v11;
    return MAMatrix.cosineSimilarity(vector:)(vector);
  }
  return result;
}

KnowledgeGraphKit::MAMatrix __swiftcall MAMatrix.similarity(axe:distance:identity:)(KnowledgeGraphKit::MAMatrixAxes axe, KnowledgeGraphKit::MAMatrixDistances distance, Swift::Bool identity)
{
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  Swift::Int v12;
  Swift::Int v13;
  void *v14;
  __int128 v15;
  uint64_t v16;
  KnowledgeGraphKit::MAMatrix result;

  v5 = v3;
  v6 = *v4;
  v7 = v4[1];
  if (*(_BYTE *)axe != 1)
  {
    if ((unsigned __int128)(v6 * (__int128)v6) >> 64 == (v6 * v6) >> 63)
    {
      *(_QWORD *)&v15 = *v4;
      *((_QWORD *)&v15 + 1) = *v4;
      v16 = sub_1CA0B4464(v6 * v6, 0.0);
      v10 = sub_1CA0AB910(0, &qword_1EF937558);
      MEMORY[0x1E0C80A78](v10, v11);
      goto LABEL_6;
    }
LABEL_8:
    __break(1u);
  }
  if ((unsigned __int128)(v7 * (__int128)v7) >> 64 != (v7 * v7) >> 63)
  {
    __break(1u);
    goto LABEL_8;
  }
  *(_QWORD *)&v15 = v4[1];
  *((_QWORD *)&v15 + 1) = v15;
  v16 = sub_1CA0B4464(v7 * v7, 0.0);
  v8 = sub_1CA0AB910(0, &qword_1EF937558);
  MEMORY[0x1E0C80A78](v8, v9);
LABEL_6:
  v12 = sub_1CA1F0E2C();
  *(_OWORD *)v5 = v15;
  *(_QWORD *)(v5 + 16) = v16;
  result.elements._rawValue = v14;
  result.columns = v13;
  result.rows = v12;
  return result;
}

uint64_t sub_1CA136DB0(Swift::Int a1, vDSP_Length a2, vDSP_Length a3, uint64_t a4, char a5, char a6, os_unfair_lock_s *a7, uint64_t *a8)
{
  _QWORD *v15;
  unint64_t v16;
  const double *v17;
  double v18;
  double v19;
  double v20;
  double v21;
  double v22;
  uint64_t v23;
  double *v24;
  double v25;
  _QWORD *v26;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v28;
  uint64_t result;
  uint64_t v30;
  char v31;
  char v32;
  vDSP_Length v33;
  BOOL v34;
  uint64_t v36;
  double *__A;
  vDSP_Length __N;
  double __C[5];

  __C[3] = *(double *)MEMORY[0x1E0C80C00];
  if ((a3 & 0x8000000000000000) != 0)
  {
LABEL_52:
    sub_1CA1F11BC();
    __break(1u);
LABEL_53:
    result = sub_1CA1F11BC();
    __break(1u);
  }
  else if (a3)
  {
    v15 = (_QWORD *)sub_1CA1F0B68();
    v15[2] = a3;
    bzero(v15 + 4, 8 * a3);
    v16 = 0;
    v34 = (unsigned __int128)((uint64_t)a2 * (__int128)(uint64_t)a3) >> 64 != (uint64_t)(a3 * a2) >> 63;
    v17 = (const double *)(a4 + 32);
    v36 = a3 * a2;
    __A = (double *)(a4 + 32 + 8 * a1);
    v30 = 8 * a3 * a2;
    __N = a2;
    v33 = a2 >> 31;
    v31 = a5;
    v32 = a6;
    do
    {
      if (a3 == v16)
      {
        __break(1u);
LABEL_41:
        __break(1u);
LABEL_42:
        __break(1u);
LABEL_43:
        __break(1u);
LABEL_44:
        __break(1u);
LABEL_45:
        __break(1u);
LABEL_46:
        __break(1u);
LABEL_47:
        __break(1u);
LABEL_48:
        __break(1u);
LABEL_49:
        __break(1u);
LABEL_50:
        __break(1u);
LABEL_51:
        __break(1u);
      }
      if (a1 != v16 || (a5 & 1) != 0)
      {
        if (a6)
        {
          if (a6 == 1)
          {
            *(_QWORD *)&__C[0] = __N;
            *(_QWORD *)&__C[1] = a3;
            *(_QWORD *)&__C[2] = a4;
            v18 = MAMatrix.euclideanDistance(columnA:columnB:)(a1, v16);
          }
          else
          {
            if (v34)
              goto LABEL_48;
            if (v36 < 0)
              goto LABEL_52;
            if (v36)
            {
              v23 = sub_1CA1F0B68();
              *(_QWORD *)(v23 + 16) = v36;
              v24 = (double *)(v23 + 32);
              bzero((void *)(v23 + 32), v30);
              __C[0] = 1.0;
              vDSP_vsmsbD(__A, a3, __C, v17, a3, v24, 1, a3);
              if (v36 > 0x7FFFFFFF)
                goto LABEL_51;
            }
            else
            {
              __C[0] = 1.0;
              vDSP_vsmsbD(__A, a3, __C, v17, a3, (double *)(MEMORY[0x1E0DEE9D8] + 32), 1, a3);
            }
            swift_bridgeObjectRetain();
            cblas_dasum_NEWLAPACK();
            v18 = v25;
            swift_bridgeObjectRelease_n();
            a5 = v31;
            a6 = v32;
          }
        }
        else
        {
          __C[0] = 0.0;
          if ((__N & 0x8000000000000000) != 0)
            goto LABEL_53;
          vDSP_dotprD(__A, a3, v17, a3, __C, __N);
          if (v33)
            goto LABEL_49;
          if (a3 >> 31)
            goto LABEL_50;
          cblas_dnrm2_NEWLAPACK();
          v20 = v19;
          cblas_dnrm2_NEWLAPACK();
          v22 = __C[0] / (v20 * v21);
          if (v22 > 1.0)
            v22 = 1.0;
          if (v22 > 0.0)
            v18 = v22;
          else
            v18 = 0.0;
        }
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
          v15 = sub_1CA0B6058(v15);
        if (v16 >= v15[2])
          goto LABEL_47;
        *(double *)&v15[v16 + 4] = v18;
      }
      os_unfair_lock_lock(a7);
      if (*a8 != a3)
        goto LABEL_41;
      if (a8[1] <= a1)
        goto LABEL_42;
      v26 = (_QWORD *)a8[2];
      swift_bridgeObjectRetain();
      isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      a8[2] = (uint64_t)v26;
      if ((isUniquelyReferenced_nonNull_native & 1) == 0)
      {
        v26 = sub_1CA0B6058(v26);
        a8[2] = (uint64_t)v26;
      }
      if (*a8 < (uint64_t)0xFFFFFFFF80000000)
        goto LABEL_43;
      if (*a8 > 0x7FFFFFFF)
        goto LABEL_44;
      v28 = a8[1];
      if (v28 < (uint64_t)0xFFFFFFFF80000000)
        goto LABEL_45;
      if (v28 > 0x7FFFFFFF)
        goto LABEL_46;
      ++v16;
      cblas_dcopy_NEWLAPACK();
      a8[2] = (uint64_t)v26;
      swift_bridgeObjectRelease();
      os_unfair_lock_unlock(a7);
      ++v17;
    }
    while (a3 != v16);
    return swift_bridgeObjectRelease();
  }
  else
  {
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t sub_1CA13726C(Swift::Int a1, uint64_t a2, int64_t a3, uint64_t a4, char a5, char a6, os_unfair_lock_s *a7, uint64_t a8)
{
  double v8;
  double *v14;
  Swift::Int v15;
  uint64_t v16;
  double v17;
  double v18;
  double v19;
  double v20;
  double v21;
  uint64_t v22;
  double v23;
  _QWORD *v24;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v26;
  uint64_t result;
  uint64_t v28;
  Swift::Int v29;
  double v30;
  BOOL v31;
  const double *v33;
  uint64_t v34;
  BOOL v35;
  uint64_t v37;
  double __C[5];

  __C[3] = *(double *)MEMORY[0x1E0C80C00];
  if (a2 < 0)
  {
LABEL_56:
    result = sub_1CA1F11BC();
    __break(1u);
  }
  else
  {
    v8 = *(double *)&a2;
    if (*(double *)&a2 != 0.0)
    {
      v14 = (double *)sub_1CA1F0B68();
      v14[2] = v8;
      bzero(v14 + 4, 8 * *(_QWORD *)&v8);
      v15 = 0;
      v16 = *(_QWORD *)&v8 * a3;
      v31 = (unsigned __int128)(*(uint64_t *)&v8 * (__int128)a3) >> 64 != (*(_QWORD *)&v8 * a3) >> 63;
      v35 = (unsigned __int128)(a1 * (__int128)a3) >> 64 != (a1 * a3) >> 63;
      v33 = (const double *)(a4 + 32 + 8 * a1 * a3);
      v34 = a4 + 32;
      v28 = 8 * *(_QWORD *)&v8 * a3;
      v29 = a1;
      v30 = v8;
      v37 = *(_QWORD *)&v8 * a3;
      while (1)
      {
        if (*(_QWORD *)&v8 == v15)
        {
          __break(1u);
LABEL_43:
          __break(1u);
LABEL_44:
          __break(1u);
LABEL_45:
          __break(1u);
LABEL_46:
          __break(1u);
LABEL_47:
          __break(1u);
LABEL_48:
          __break(1u);
LABEL_49:
          __break(1u);
LABEL_50:
          __break(1u);
LABEL_51:
          __break(1u);
LABEL_52:
          __break(1u);
LABEL_53:
          __break(1u);
LABEL_54:
          __break(1u);
        }
        if (a1 != v15 || (a5 & 1) != 0)
        {
          if (a6)
          {
            if (a6 == 1)
            {
              __C[0] = v8;
              *(_QWORD *)&__C[1] = a3;
              *(_QWORD *)&__C[2] = a4;
              v17 = MAMatrix.euclideanDistance(rowA:rowB:)(a1, v15);
            }
            else
            {
              if (v31)
                goto LABEL_49;
              if (v16 < 0)
                goto LABEL_56;
              if (v16)
              {
                v22 = sub_1CA1F0B68();
                *(_QWORD *)(v22 + 16) = v16;
                bzero((void *)(v22 + 32), v28);
              }
              else
              {
                v22 = MEMORY[0x1E0DEE9D8];
              }
              __C[0] = 1.0;
              if (v35)
                goto LABEL_51;
              if ((unsigned __int128)(v15 * (__int128)a3) >> 64 != (v15 * a3) >> 63)
                goto LABEL_53;
              if (a3 < 0)
              {
LABEL_55:
                sub_1CA1F11BC();
                __break(1u);
                goto LABEL_56;
              }
              vDSP_vsmsbD(v33, 1, __C, (const double *)(v34 + 8 * v15 * a3), 1, (double *)(v22 + 32), 1, a3);
              if (v37 > 0x7FFFFFFF)
                goto LABEL_54;
              swift_bridgeObjectRetain();
              cblas_dasum_NEWLAPACK();
              v17 = v23;
              swift_bridgeObjectRelease_n();
              a1 = v29;
              v8 = v30;
            }
          }
          else
          {
            __C[0] = 0.0;
            if (v35)
              goto LABEL_48;
            if ((unsigned __int128)(v15 * (__int128)a3) >> 64 != (v15 * a3) >> 63)
              goto LABEL_50;
            if (a3 < 0)
              goto LABEL_55;
            vDSP_dotprD(v33, 1, (const double *)(v34 + 8 * v15 * a3), 1, __C, a3);
            if ((unint64_t)a3 >> 31)
              goto LABEL_52;
            cblas_dnrm2_NEWLAPACK();
            v19 = v18;
            cblas_dnrm2_NEWLAPACK();
            v21 = __C[0] / (v19 * v20);
            if (v21 > 1.0)
              v21 = 1.0;
            if (v21 > 0.0)
              v17 = v21;
            else
              v17 = 0.0;
          }
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
            v14 = (double *)sub_1CA0B6058(v14);
          if ((unint64_t)v15 >= *((_QWORD *)v14 + 2))
            goto LABEL_47;
          v14[v15 + 4] = v17;
        }
        os_unfair_lock_lock(a7);
        if (*(_QWORD *)(a8 + 8) != *(_QWORD *)&v8)
          goto LABEL_43;
        v24 = *(_QWORD **)(a8 + 16);
        swift_bridgeObjectRetain();
        isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
        *(_QWORD *)(a8 + 16) = v24;
        if ((isUniquelyReferenced_nonNull_native & 1) == 0)
        {
          v24 = sub_1CA0B6058(v24);
          *(_QWORD *)(a8 + 16) = v24;
        }
        v26 = *(_QWORD *)(a8 + 8);
        if (v26 < (uint64_t)0xFFFFFFFF80000000)
          goto LABEL_44;
        if (v26 > 0x7FFFFFFF)
          goto LABEL_45;
        if ((unsigned __int128)(a1 * (__int128)v26) >> 64 != (a1 * v26) >> 63)
          goto LABEL_46;
        ++v15;
        cblas_dcopy_NEWLAPACK();
        *(_QWORD *)(a8 + 16) = v24;
        swift_bridgeObjectRelease();
        os_unfair_lock_unlock(a7);
        v16 = v37;
        if (*(_QWORD *)&v8 == v15)
          return swift_bridgeObjectRelease();
      }
    }
    return swift_bridgeObjectRelease();
  }
  return result;
}

KnowledgeGraphKit::MAMatrix __swiftcall MAMatrix.jaccardSimilarity()()
{
  int64_t *v0;
  _QWORD *v1;
  uint64_t v2;
  int64_t v3;
  int64_t v4;
  int64_t *v5;
  uint64_t v6;
  double *v7;
  __int128 v8;
  uint64_t v9;
  __int128 *v10;
  uint64_t v11;
  uint64_t v12;
  double *v13;
  uint64_t v14;
  vDSP_Length v15;
  int64_t v16;
  int64_t v17;
  uint64_t v18;
  Swift::Int v19;
  Swift::Int v20;
  void *v21;
  unint64_t v22;
  uint64_t v23;
  int64_t *v24;
  uint64_t v25[3];
  __int128 v26;
  uint64_t v27;
  __int128 v28;
  double *v29;
  __int128 v30;
  double *v31;
  __int128 v32;
  double *v33;
  KnowledgeGraphKit::MAMatrix v34;
  KnowledgeGraphKit::MAMatrix result;

  v5 = v0;
  v6 = v1[1];
  v7 = (double *)v1[2];
  *(_QWORD *)&v30 = *v1;
  *((_QWORD *)&v30 + 1) = v6;
  v31 = v7;
  *(_QWORD *)&v28 = v30;
  *((_QWORD *)&v28 + 1) = v6;
  v29 = v7;
  <*> infix(_:_:)((uint64_t *)&v30, &v28, (uint64_t *)&v32);
  v8 = v32;
  v9 = (uint64_t)v33;
  v30 = v32;
  v31 = v33;
  v10 = &v30;
  MAMatrix.diag()();
  v11 = *((_QWORD *)&v8 + 1) * v8;
  if ((unsigned __int128)(*((uint64_t *)&v8 + 1) * (__int128)(uint64_t)v8) >> 64 == (uint64_t)(*((_QWORD *)&v8 + 1) * v8) >> 63)
  {
    v24 = v5;
    v3 = *((_QWORD *)&v32 + 1);
    v4 = v32;
    v22 = v6;
    v23 = (uint64_t)v33;
    v10 = (__int128 *)sub_1CA0B4464(*((_QWORD *)&v8 + 1) * v8, 0.0);
    v6 = v9 + 32;
    v2 = *(_QWORD *)(v9 + 16);
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) != 0)
      goto LABEL_3;
  }
  else
  {
    __break(1u);
  }
  v10 = (__int128 *)sub_1CA0B6058(v10);
LABEL_3:
  v12 = *((_QWORD *)v10 + 2);
  *(_QWORD *)&v32 = v10 + 2;
  *((_QWORD *)&v32 + 1) = v12;
  sub_1CA130D78((uint64_t)&v32, v6, v2, v8, *((uint64_t *)&v8 + 1));
  swift_bridgeObjectRelease();
  *(_QWORD *)&v32 = *((_QWORD *)&v8 + 1);
  *((_QWORD *)&v32 + 1) = v8;
  v33 = (double *)v10;
  swift_bridgeObjectRetain();
  v13 = (double *)v10;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) != 0)
  {
    if (v11 < 0)
      goto LABEL_23;
  }
  else
  {
    v13 = (double *)sub_1CA0B6058(v10);
    if (v11 < 0)
      goto LABEL_23;
  }
  vDSP_vnegD((const double *)v10 + 4, 1, v13 + 4, 1, *((_QWORD *)&v8 + 1) * v8);
  *(_QWORD *)&v30 = *((_QWORD *)&v8 + 1);
  *((_QWORD *)&v30 + 1) = v8;
  v31 = v13;
  if ((unsigned __int128)(v3 * (__int128)v4) >> 64 != (v3 * v4) >> 63)
  {
    __break(1u);
LABEL_19:
    v9 = (uint64_t)sub_1CA0B6058((_QWORD *)v9);
    if (v3 < 0)
      goto LABEL_23;
    goto LABEL_8;
  }
  v9 = sub_1CA0B4464(v3 * v4, 0.0);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    goto LABEL_19;
  if (v3 < 0)
    goto LABEL_23;
LABEL_8:
  if (v4 < 0)
    goto LABEL_23;
  v14 = v23;
  vDSP_mtransD((const double *)(v23 + 32), 1, (double *)(v9 + 32), 1, v3, v4);
  *(_QWORD *)&v26 = v3;
  *((_QWORD *)&v26 + 1) = v4;
  v27 = v9;
  + infix(_:_:)((int64_t *)&v30, (uint64_t *)&v26, (int64_t *)&v28);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v26 = v28;
  v27 = (uint64_t)v29;
  v25[0] = v4;
  v25[1] = v3;
  v25[2] = v23;
  + infix(_:_:)((int64_t *)&v26, v25, (int64_t *)&v30);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v28 = v30;
  v29 = v31;
  / infix(_:_:)((int64_t *)&v32, (vDSP_Length *)&v28, v24);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v15 = *v24;
  v16 = v24[1];
  v17 = v16 * *v24;
  if ((unsigned __int128)(v16 * (__int128)*v24) >> 64 == v17 >> 63)
  {
    v9 = v24[2];
    swift_bridgeObjectRetain();
    v14 = sub_1CA0B4464(v17, 0.0);
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) != 0)
    {
      if ((v16 & 0x8000000000000000) == 0)
        goto LABEL_12;
LABEL_23:
      v19 = sub_1CA1F11BC();
      __break(1u);
      goto _$s17KnowledgeGraphKit8MAMatrixV17jaccardSimilarityACyF;
    }
  }
  else
  {
    __break(1u);
  }
  v14 = (uint64_t)sub_1CA0B6058((_QWORD *)v14);
  if (v16 < 0)
    goto LABEL_23;
LABEL_12:
  if ((v15 & 0x8000000000000000) != 0)
    goto LABEL_23;
  vDSP_mtransD((const double *)(v9 + 32), 1, (double *)(v14 + 32), 1, v16, v15);
  swift_bridgeObjectRelease();
  *(_QWORD *)&v32 = v16;
  *((_QWORD *)&v32 + 1) = v15;
  v33 = (double *)v14;
  += infix(_:_:)((vDSP_Length *)v24, (uint64_t)&v32);
  swift_bridgeObjectRelease();
  v18 = sub_1CA0B4464(v22, 1.0);
  *(_QWORD *)&v32 = 1;
  *((_QWORD *)&v32 + 1) = v22;
  v33 = (double *)v18;
  v34.rows = (Swift::Int)&v32;
  MAMatrix.setDiag(vector:)(v34);
  v19 = swift_bridgeObjectRelease();
_$s17KnowledgeGraphKit8MAMatrixV17jaccardSimilarityACyF:
  result.elements._rawValue = v21;
  result.columns = v20;
  result.rows = v19;
  return result;
}

KnowledgeGraphKit::MAMatrix __swiftcall MAMatrix.jaccardDistance()()
{
  _QWORD *v0;
  __int128 *v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  double *v6;
  vDSP_Length v7;
  _QWORD *v8;
  Swift::Int v9;
  Swift::Int v10;
  void *v11;
  __int128 __B;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  double *v16;
  uint64_t v17;
  KnowledgeGraphKit::MAMatrix result;

  v2 = v0;
  v17 = *MEMORY[0x1E0C80C00];
  v3 = *((_QWORD *)v1 + 2);
  __B = *v1;
  v13 = v3;
  MAMatrix.jaccardSimilarity()();
  v4 = v14;
  v5 = v15;
  swift_bridgeObjectRetain();
  v6 = v16;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    v6 = (double *)sub_1CA0B6058(v16);
  *(_QWORD *)&__B = 0xBFF0000000000000;
  v7 = v14 * v15;
  if ((unsigned __int128)(v14 * (__int128)v15) >> 64 != (v14 * v15) >> 63)
  {
    __break(1u);
LABEL_9:
    v8 = sub_1CA0B6058(v6);
    goto LABEL_6;
  }
  if ((v7 & 0x8000000000000000) != 0)
  {
    v9 = sub_1CA1F11BC();
    __break(1u);
    goto LABEL_12;
  }
  vDSP_vsaddD(v16 + 4, 1, (const double *)&__B, v6 + 4, 1, v7);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  v8 = v6;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    goto LABEL_9;
LABEL_6:
  if (*((_QWORD *)v6 + 2) >> 31)
    __break(1u);
  cblas_dscal_NEWLAPACK();
  v9 = swift_bridgeObjectRelease();
  *v2 = v4;
  v2[1] = v5;
  v2[2] = v8;
LABEL_12:
  result.elements._rawValue = v11;
  result.columns = v10;
  result.rows = v9;
  return result;
}

KnowledgeGraphKit::MAMatrix __swiftcall MAMatrix.exponentialSmoothing(factor:axe:)(Swift::Double factor, KnowledgeGraphKit::MAMatrixAxes axe)
{
  _QWORD *v2;
  uint64_t *v3;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  Swift::Int v9;
  void *v10;
  unint64_t v11;
  double v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  BOOL v19;
  unint64_t v20;
  double v21;
  double v22;
  uint64_t v23;
  unint64_t v24;
  double v25;
  uint64_t v26;
  unint64_t v27;
  unint64_t v28;
  uint64_t v29;
  unint64_t v30;
  double v31;
  double v32;
  KnowledgeGraphKit::MAMatrix result;

  v5 = v2;
  v6 = *v3;
  v7 = v3[1];
  v8 = (_QWORD *)v3[2];
  if (*(_BYTE *)axe == 1)
  {
    if (v7 < 0)
    {
LABEL_76:
      __break(1u);
      goto LABEL_77;
    }
    if (v7)
    {
      if (v6 < 0)
      {
LABEL_78:
        __break(1u);
        goto LABEL_79;
      }
      *(_QWORD *)&axe = swift_bridgeObjectRetain();
      v11 = 0;
      while (v11 != v7)
      {
        if (v6)
        {
          if (v11 >= v8[2])
            goto LABEL_74;
          v12 = *(double *)&v8[v11 + 4];
          *(_QWORD *)&axe = swift_isUniquelyReferenced_nonNull_native();
          if ((axe & 1) == 0)
          {
            *(_QWORD *)&axe = sub_1CA0B6058(v8);
            v8 = (_QWORD *)axe;
          }
          if (v11 >= v8[2])
            goto LABEL_75;
          *(double *)&v8[v11 + 4] = v12 * factor;
          if (v6 != 1)
          {
            v13 = 1;
            do
            {
              v14 = v13 * v7;
              if ((unsigned __int128)(v13 * (__int128)v7) >> 64 != (v13 * v7) >> 63)
                goto LABEL_60;
              v15 = v14 + v11;
              if (__OFADD__(v14, v11))
                goto LABEL_61;
              if ((v15 & 0x8000000000000000) != 0)
                goto LABEL_62;
              v16 = v8[2];
              if (v15 >= v16)
                goto LABEL_63;
              v17 = v13 - 1;
              v18 = (v13 - 1) * v7;
              if ((unsigned __int128)(v17 * (__int128)v7) >> 64 != v18 >> 63)
                goto LABEL_64;
              v19 = __OFADD__(v18, v11);
              v20 = v18 + v11;
              if (v19)
                goto LABEL_65;
              if (v20 >= v16)
                goto LABEL_66;
              v21 = *(double *)&v8[v15 + 4];
              v22 = *(double *)&v8[v20 + 4];
              *(_QWORD *)&axe = swift_isUniquelyReferenced_nonNull_native();
              if ((axe & 1) == 0)
              {
                *(_QWORD *)&axe = sub_1CA0B6058(v8);
                v8 = (_QWORD *)axe;
              }
              if (v15 >= v8[2])
                goto LABEL_67;
              *(double *)&v8[v15 + 4] = v21 * factor + (1.0 - factor) * v22;
              v13 = v17 + 2;
            }
            while (v17 + 2 != v6);
          }
        }
        if (++v11 == v7)
          goto LABEL_53;
      }
      goto LABEL_69;
    }
  }
  else
  {
    if (v6 < 0)
    {
LABEL_77:
      __break(1u);
      goto LABEL_78;
    }
    if (v6)
    {
      if (v7 < 0)
      {
LABEL_79:
        __break(1u);
        goto LABEL_80;
      }
      *(_QWORD *)&axe = swift_bridgeObjectRetain();
      v23 = 0;
      while (v23 != v6)
      {
        if (v7)
        {
          v24 = v23 * v7;
          if ((unsigned __int128)(v23 * (__int128)v7) >> 64 != (v23 * v7) >> 63)
            goto LABEL_70;
          if ((v24 & 0x8000000000000000) != 0)
            goto LABEL_71;
          if (v24 >= v8[2])
            goto LABEL_72;
          v25 = *(double *)&v8[v24 + 4];
          *(_QWORD *)&axe = swift_isUniquelyReferenced_nonNull_native();
          if ((axe & 1) == 0)
          {
            *(_QWORD *)&axe = sub_1CA0B6058(v8);
            v8 = (_QWORD *)axe;
          }
          if (v24 >= v8[2])
            goto LABEL_73;
          *(double *)&v8[v24 + 4] = v25 * factor;
          if (v7 != 1)
          {
            v26 = 1;
            while (1)
            {
              v27 = v24 + v26;
              if (__OFADD__(v24, v26))
                break;
              if ((v27 & 0x8000000000000000) != 0)
                goto LABEL_55;
              v28 = v8[2];
              if (v27 >= v28)
                goto LABEL_56;
              v29 = v26 - 1;
              v19 = __OFADD__(v24, v26 - 1);
              v30 = v24 + v26 - 1;
              if (v19)
                goto LABEL_57;
              if (v30 >= v28)
                goto LABEL_58;
              v31 = *(double *)&v8[v27 + 4];
              v32 = *(double *)&v8[v30 + 4];
              *(_QWORD *)&axe = swift_isUniquelyReferenced_nonNull_native();
              if ((axe & 1) == 0)
              {
                *(_QWORD *)&axe = sub_1CA0B6058(v8);
                v8 = (_QWORD *)axe;
              }
              if (v27 >= v8[2])
                goto LABEL_59;
              *(double *)&v8[v27 + 4] = v31 * factor + (1.0 - factor) * v32;
              v26 = v29 + 2;
              if (v29 + 2 == v7)
                goto LABEL_31;
            }
            __break(1u);
LABEL_55:
            __break(1u);
LABEL_56:
            __break(1u);
LABEL_57:
            __break(1u);
LABEL_58:
            __break(1u);
LABEL_59:
            __break(1u);
LABEL_60:
            __break(1u);
LABEL_61:
            __break(1u);
LABEL_62:
            __break(1u);
LABEL_63:
            __break(1u);
LABEL_64:
            __break(1u);
LABEL_65:
            __break(1u);
LABEL_66:
            __break(1u);
LABEL_67:
            __break(1u);
            break;
          }
        }
LABEL_31:
        if (++v23 == v6)
          goto LABEL_53;
      }
      __break(1u);
LABEL_69:
      __break(1u);
LABEL_70:
      __break(1u);
LABEL_71:
      __break(1u);
LABEL_72:
      __break(1u);
LABEL_73:
      __break(1u);
LABEL_74:
      __break(1u);
LABEL_75:
      __break(1u);
      goto LABEL_76;
    }
  }
  *(_QWORD *)&axe = swift_bridgeObjectRetain();
LABEL_53:
  *v5 = v6;
  v5[1] = v7;
  v5[2] = v8;
LABEL_80:
  result.elements._rawValue = v10;
  result.columns = v9;
  LOBYTE(result.rows) = axe;
  return result;
}

sparse_m_double *MAMatrix.sparseMatrix()()
{
  uint64_t v0;
  sparse_m_double *v1;
  int64_t v2;
  uint64_t v3;
  sparse_m_double *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  _QWORD *v9;
  double v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  sparse_m_double *result;
  sparse_m_double *v20;
  _QWORD *v21;
  _QWORD *v22;
  unsigned __int8 v23;

  v1 = *(sparse_m_double **)v0;
  if ((*(_QWORD *)v0 & 0x8000000000000000) != 0)
    goto LABEL_40;
  v2 = *(_QWORD *)(v0 + 8);
  if (v1)
  {
    if (v2 < 0)
    {
LABEL_41:
      __break(1u);
      goto LABEL_42;
    }
    v3 = 0;
    v4 = 0;
    v5 = *(_QWORD *)(v0 + 16);
    v6 = v5 + 32;
    v21 = (_QWORD *)MEMORY[0x1E0DEE9D8];
    v22 = (_QWORD *)MEMORY[0x1E0DEE9D8];
    v20 = v1;
    while (v4 != v1)
    {
      if (v2)
      {
        if ((unsigned __int128)((uint64_t)v4 * (__int128)v2) >> 64 != ((uint64_t)v4 * v2) >> 63)
          goto LABEL_39;
        v7 = 0;
        v8 = (_QWORD *)MEMORY[0x1E0DEE9D8];
        v9 = (_QWORD *)MEMORY[0x1E0DEE9D8];
        while ((v3 & 0x8000000000000000) == 0)
        {
          if ((unint64_t)(v3 + v7) >= *(_QWORD *)(v5 + 16))
            goto LABEL_37;
          v10 = *(double *)(v6 + 8 * v7);
          if (v10 != 0.0)
          {
            if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
              v8 = sub_1CA0E5894(0, v8[2] + 1, 1, v8);
            v12 = v8[2];
            v11 = v8[3];
            if (v12 >= v11 >> 1)
              v8 = sub_1CA0E5894((_QWORD *)(v11 > 1), v12 + 1, 1, v8);
            v8[2] = v12 + 1;
            *(double *)&v8[v12 + 4] = v10;
            if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
              v9 = sub_1CA0E59A0(0, v9[2] + 1, 1, v9);
            v14 = v9[2];
            v13 = v9[3];
            if (v14 >= v13 >> 1)
              v9 = sub_1CA0E59A0((_QWORD *)(v13 > 1), v14 + 1, 1, v9);
            v9[2] = v14 + 1;
            v9[v14 + 4] = v7;
          }
          if (v2 == ++v7)
            goto LABEL_23;
        }
        __break(1u);
LABEL_37:
        __break(1u);
        break;
      }
      v8 = (_QWORD *)MEMORY[0x1E0DEE9D8];
      v9 = (_QWORD *)MEMORY[0x1E0DEE9D8];
LABEL_23:
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        v21 = sub_1CA0E637C(0, v21[2] + 1, 1, v21);
      v16 = v21[2];
      v15 = v21[3];
      if (v16 >= v15 >> 1)
        v21 = sub_1CA0E637C((_QWORD *)(v15 > 1), v16 + 1, 1, v21);
      v21[2] = v16 + 1;
      v21[v16 + 4] = v8;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        v22 = sub_1CA0E6250(0, v22[2] + 1, 1, v22);
      v18 = v22[2];
      v17 = v22[3];
      if (v18 >= v17 >> 1)
        v22 = sub_1CA0E6250((_QWORD *)(v17 > 1), v18 + 1, 1, v22);
      v4 = (sparse_m_double *)((char *)v4 + 1);
      v22[2] = v18 + 1;
      v22[v18 + 4] = v9;
      v3 += v2;
      v1 = v20;
      v6 += 8 * v2;
      if (v4 == v20)
        goto LABEL_34;
    }
    __break(1u);
LABEL_39:
    __break(1u);
LABEL_40:
    __break(1u);
    goto LABEL_41;
  }
  v21 = (_QWORD *)MEMORY[0x1E0DEE9D8];
  v22 = (_QWORD *)MEMORY[0x1E0DEE9D8];
LABEL_34:
  if ((v2 & 0x8000000000000000) == 0)
  {
    v23 = 0;
    return _s17KnowledgeGraphKit14MASparseMatrixC4rows7columns0F6Values0F7Indices4kindACs6UInt64V_AJSaySaySdGGSaySays5Int64VGGAA0dE4KindOtcfC_0(v1, v2, (uint64_t)v21, (uint64_t)v22, &v23);
  }
LABEL_42:
  result = (sparse_m_double *)sub_1CA1F11BC();
  __break(1u);
  return result;
}

id sub_1CA138274(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  id result;
  id v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  id v13;
  uint64_t v14;

  result = objc_msgSend(*(id *)(a4 + 16), sel_startIndex);
  v9 = result;
  v11 = v10;
  if (!a2)
    goto LABEL_5;
  if (!a3)
    goto LABEL_10;
  if ((a3 & 0x8000000000000000) == 0)
  {
    if (result == objc_msgSend(*(id *)(a4 + 16), sel_endIndex))
    {
LABEL_5:
      v12 = 0;
LABEL_11:
      *a1 = a4;
      a1[1] = v9;
      a1[2] = v11;
      return (id)v12;
    }
    v12 = 0;
    while (1)
    {
      v13 = v9;
      v9 = objc_msgSend(*(id *)(a4 + 16), sel_indexAfterIndex_, v9, v11);
      v11 = v14;
      *(_QWORD *)(a2 + 8 * v12) = v13;
      if (a3 - 1 == v12)
        break;
      ++v12;
      if (v9 == objc_msgSend(*(id *)(a4 + 16), sel_endIndex))
        goto LABEL_11;
    }
LABEL_10:
    v12 = a3;
    goto LABEL_11;
  }
  __break(1u);
  return result;
}

id sub_1CA13836C(uint64_t a1, _QWORD *a2, uint64_t a3)
{
  id result;
  __int128 v7;
  int64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  id v13;
  int64_t v14;
  unint64_t v15;
  int64_t v16;
  int64_t v17;
  __int128 v18;
  uint64_t v19;
  int64_t v20;
  void *v21;
  __int128 v22;
  __int128 v23;
  unint64_t v24;

  MACluster.makeIterator()((uint64_t)&v22);
  swift_bridgeObjectRelease();
  result = (id)swift_bridgeObjectRelease();
  if (!a2)
  {
    v10 = 0;
    v18 = v23;
    *(_OWORD *)a1 = v22;
    *(_OWORD *)(a1 + 16) = v18;
    *(_QWORD *)(a1 + 32) = v24;
    return (id)v10;
  }
  v7 = v22;
  v8 = *((_QWORD *)&v23 + 1);
  v9 = v24;
  v19 = v23;
  if (!a3)
  {
LABEL_32:
    *(_OWORD *)a1 = v7;
    *(_QWORD *)(a1 + 16) = v19;
    *(_QWORD *)(a1 + 24) = v8;
    v10 = a3;
LABEL_39:
    *(_QWORD *)(a1 + 32) = v9;
    return (id)v10;
  }
  if (a3 < 0)
    goto LABEL_42;
  v10 = 0;
  v20 = (unint64_t)(v23 + 64) >> 6;
  while ((v7 & 0x8000000000000000) != 0)
  {
    if (!sub_1CA1F0FD0())
      goto LABEL_38;
    sub_1CA0AB910(0, (unint64_t *)&qword_1EF93A320);
    swift_unknownObjectRetain();
    swift_dynamicCast();
    v13 = v21;
    result = (id)swift_unknownObjectRelease();
    if (!v21)
      goto LABEL_38;
LABEL_7:
    ++v10;
    *a2++ = v13;
    if (v10 == a3)
      goto LABEL_32;
  }
  if (v9)
  {
    v11 = __clz(__rbit64(v9));
    v9 &= v9 - 1;
    v12 = v11 | (v8 << 6);
    goto LABEL_6;
  }
  v14 = v8 + 1;
  if (!__OFADD__(v8, 1))
  {
    if (v14 >= v20)
    {
      v9 = 0;
LABEL_38:
      *(_OWORD *)a1 = v7;
      *(_QWORD *)(a1 + 16) = v19;
      *(_QWORD *)(a1 + 24) = v8;
      goto LABEL_39;
    }
    v15 = *(_QWORD *)(*((_QWORD *)&v7 + 1) + 8 * v14);
    if (v15)
      goto LABEL_22;
    v16 = v8 + 2;
    if (v8 + 2 >= v20)
    {
      v9 = 0;
      ++v8;
      goto LABEL_38;
    }
    v15 = *(_QWORD *)(*((_QWORD *)&v7 + 1) + 8 * v16);
    if (!v15)
    {
      if (v8 + 3 >= v20)
        goto LABEL_35;
      v15 = *(_QWORD *)(*((_QWORD *)&v7 + 1) + 8 * (v8 + 3));
      if (v15)
      {
        v14 = v8 + 3;
        goto LABEL_22;
      }
      v16 = v8 + 4;
      if (v8 + 4 >= v20)
      {
        v9 = 0;
        v8 += 3;
        goto LABEL_38;
      }
      v15 = *(_QWORD *)(*((_QWORD *)&v7 + 1) + 8 * v16);
      if (!v15)
      {
        v14 = v8 + 5;
        if (v8 + 5 >= v20)
        {
LABEL_35:
          v9 = 0;
          v8 = v16;
          goto LABEL_38;
        }
        v15 = *(_QWORD *)(*((_QWORD *)&v7 + 1) + 8 * v14);
        if (!v15)
        {
          v17 = v8 + 6;
          while (v20 != v17)
          {
            v15 = *(_QWORD *)(*((_QWORD *)&v7 + 1) + 8 * v17++);
            if (v15)
            {
              v14 = v17 - 1;
              goto LABEL_22;
            }
          }
          v9 = 0;
          v8 = v20 - 1;
          goto LABEL_38;
        }
        goto LABEL_22;
      }
    }
    v14 = v16;
LABEL_22:
    v9 = (v15 - 1) & v15;
    v12 = __clz(__rbit64(v15)) + (v14 << 6);
    v8 = v14;
LABEL_6:
    result = *(id *)(*(_QWORD *)(v7 + 48) + 8 * v12);
    v13 = result;
    if (!result)
      goto LABEL_38;
    goto LABEL_7;
  }
  __break(1u);
LABEL_42:
  __break(1u);
  return result;
}

void sub_1CA138638(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, double a6, double a7)
{
  uint64_t v14;
  BOOL v15;
  double v16;
  double v17;

  if (!a2 || !a3)
  {
LABEL_15:
    *(_QWORD *)a1 = a4;
    *(double *)(a1 + 8) = a6;
    *(_QWORD *)(a1 + 16) = a5;
    *(double *)(a1 + 24) = a7;
    return;
  }
  if (a3 < 0)
    goto LABEL_20;
  v14 = 0;
  while (a6 != 1.0)
  {
    sub_1CA0C778C(a1, 0.0, 1.0);
    v17 = ceil(log(1.0 - v16) * a7);
    if ((~*(_QWORD *)&v17 & 0x7FF0000000000000) == 0)
      goto LABEL_16;
    if (v17 <= -9.22337204e18)
      goto LABEL_17;
    if (v17 >= 9.22337204e18)
      goto LABEL_18;
    v15 = __OFADD__(a4, (uint64_t)v17);
    a4 += (uint64_t)v17;
    if (v15)
      goto LABEL_19;
LABEL_13:
    if (a4 <= a5)
    {
      *(_QWORD *)(a2 + 8 * v14++) = a4;
      if (a3 != v14)
        continue;
    }
    goto LABEL_15;
  }
  v15 = __OFADD__(a4++, 1);
  if (!v15)
    goto LABEL_13;
  __break(1u);
LABEL_16:
  __break(1u);
LABEL_17:
  __break(1u);
LABEL_18:
  __break(1u);
LABEL_19:
  __break(1u);
LABEL_20:
  __break(1u);
}

uint64_t sub_1CA138778(uint64_t *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v3;
  unint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  _QWORD *v10;
  uint64_t result;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  v7 = *(_QWORD *)(v3 + 40);
  if (v7 >> 62)
  {
    swift_bridgeObjectRetain();
    v8 = sub_1CA1F1234();
    swift_bridgeObjectRelease();
  }
  else
  {
    v8 = *(_QWORD *)((v7 & 0xFFFFFFFFFFFFF8) + 0x10);
  }
  v9 = (_QWORD *)swift_allocObject();
  v9[2] = 0;
  v10 = (_QWORD *)swift_allocObject();
  v10[2] = v9;
  v10[3] = v8;
  v10[4] = v3;
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EF937D20);
  result = swift_allocObject();
  v12 = result;
  v13 = 0;
  *(_QWORD *)(result + 16) = sub_1CA0E1FAC;
  *(_QWORD *)(result + 24) = v10;
  if (!a2 || !a3)
  {
LABEL_13:
    *a1 = v12;
    return v13;
  }
  if ((a3 & 0x8000000000000000) == 0)
  {
    sub_1CA0D4604(v9, v8, v3, &v16);
    v14 = v16;
    if (v16)
    {
      v13 = 0;
      v15 = v17;
      while (1)
      {
        *a2 = v14;
        a2[1] = v15;
        if (a3 - 1 == v13)
          break;
        sub_1CA0D4604((_QWORD *)v10[2], v10[3], v10[4], &v16);
        v14 = v16;
        v15 = v17;
        a2 += 2;
        ++v13;
        if (!v16)
          goto LABEL_13;
      }
      v13 = a3;
    }
    else
    {
      v13 = 0;
    }
    goto LABEL_13;
  }
  __break(1u);
  return result;
}

_QWORD *sub_1CA1388F0(_QWORD *a1, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  return sub_1CA138C54(a1, a2, a3, a4, (unint64_t *)&qword_1EF93A320, (uint64_t)off_1E83DD810, (unint64_t *)&qword_1EF937678);
}

uint64_t sub_1CA13890C(uint64_t result, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  int64_t v12;
  uint64_t v13;
  int64_t v14;
  unint64_t v15;
  unint64_t v16;
  int64_t v17;
  unint64_t v18;
  int64_t v19;
  _QWORD *v20;
  uint64_t v21;

  v5 = (_QWORD *)result;
  v6 = a4 + 56;
  v7 = -1 << *(_BYTE *)(a4 + 32);
  if (-v7 < 64)
    v8 = ~(-1 << -(char)v7);
  else
    v8 = -1;
  v9 = v8 & *(_QWORD *)(a4 + 56);
  if (!a2)
  {
    v12 = 0;
    v10 = 0;
LABEL_38:
    *v5 = a4;
    v5[1] = v6;
    v5[2] = ~v7;
    v5[3] = v12;
    v5[4] = v9;
    return v10;
  }
  v10 = a3;
  if (!a3)
  {
    v12 = 0;
    goto LABEL_38;
  }
  if (a3 < 0)
  {
LABEL_40:
    __break(1u);
    goto LABEL_41;
  }
  v11 = a2;
  v12 = 0;
  v13 = 0;
  v14 = (unint64_t)(63 - v7) >> 6;
  if (!v9)
    goto LABEL_9;
LABEL_8:
  v15 = __clz(__rbit64(v9));
  v9 &= v9 - 1;
  v16 = v15 | (v12 << 6);
  while (1)
  {
    ++v13;
    v20 = (_QWORD *)(*(_QWORD *)(a4 + 48) + 16 * v16);
    v21 = v20[1];
    *v11 = *v20;
    v11[1] = v21;
    if (v13 == v10)
    {
      swift_bridgeObjectRetain();
      goto LABEL_38;
    }
    v11 += 2;
    result = swift_bridgeObjectRetain();
    if (v9)
      goto LABEL_8;
LABEL_9:
    v17 = v12 + 1;
    if (__OFADD__(v12, 1))
    {
      __break(1u);
      goto LABEL_40;
    }
    if (v17 >= v14)
      goto LABEL_33;
    v18 = *(_QWORD *)(v6 + 8 * v17);
    if (!v18)
      break;
LABEL_18:
    v9 = (v18 - 1) & v18;
    v16 = __clz(__rbit64(v18)) + (v17 << 6);
    v12 = v17;
  }
  v12 += 2;
  if (v17 + 1 >= v14)
  {
    v9 = 0;
    v12 = v17;
    goto LABEL_37;
  }
  v18 = *(_QWORD *)(v6 + 8 * v12);
  if (v18)
    goto LABEL_14;
  v19 = v17 + 2;
  if (v17 + 2 >= v14)
    goto LABEL_33;
  v18 = *(_QWORD *)(v6 + 8 * v19);
  if (v18)
    goto LABEL_17;
  v12 = v17 + 3;
  if (v17 + 3 >= v14)
  {
    v9 = 0;
    v12 = v17 + 2;
    goto LABEL_37;
  }
  v18 = *(_QWORD *)(v6 + 8 * v12);
  if (v18)
  {
LABEL_14:
    v17 = v12;
    goto LABEL_18;
  }
  v19 = v17 + 4;
  if (v17 + 4 >= v14)
  {
LABEL_33:
    v9 = 0;
LABEL_37:
    v10 = v13;
    goto LABEL_38;
  }
  v18 = *(_QWORD *)(v6 + 8 * v19);
  if (v18)
  {
LABEL_17:
    v17 = v19;
    goto LABEL_18;
  }
  while (1)
  {
    v17 = v19 + 1;
    if (__OFADD__(v19, 1))
      break;
    if (v17 >= v14)
    {
      v9 = 0;
      v12 = v14 - 1;
      goto LABEL_37;
    }
    v18 = *(_QWORD *)(v6 + 8 * v17);
    ++v19;
    if (v18)
      goto LABEL_18;
  }
LABEL_41:
  __break(1u);
  return result;
}

int64_t *sub_1CA138B08(int64_t *result, int64_t *a2, int64_t a3, int64_t a4, int64_t a5)
{
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  int64_t *v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  int64x2_t v14;
  int64x2_t *v15;
  int64x2_t v16;
  _QWORD *v17;
  int64_t v18;

  if (!a2)
    goto LABEL_5;
  if (!a3)
  {
LABEL_6:
    v5 = a4;
LABEL_7:
    *result = a4;
    result[1] = a5;
    result[2] = v5;
    return (int64_t *)a3;
  }
  if (a3 < 0)
    goto LABEL_31;
  if (a5 == a4)
  {
LABEL_5:
    a3 = 0;
    goto LABEL_6;
  }
  if (a5 < a4)
    goto LABEL_32;
  if (a5 > a4)
  {
    v5 = a4 + 1;
    *a2 = a4;
    v6 = a3 - 1;
    if (a3 == 1)
      goto LABEL_7;
    v7 = a3 - 2;
    if (a3 - 2 >= (unint64_t)(~a4 + a5))
      v7 = ~a4 + a5;
    if (v7 < v6)
      v6 = v7;
    v8 = v6 + 1;
    if (v8 > 4)
    {
      v11 = v8 & 3;
      if ((v8 & 3) == 0)
        v11 = 4;
      v12 = v8 - v11;
      v9 = v8 - v11 + 1;
      v13 = v5 + v12;
      v10 = &a2[v12];
      v14 = vaddq_s64(vdupq_n_s64(v5), (int64x2_t)xmmword_1CA1FC380);
      v15 = (int64x2_t *)(a2 + 3);
      v16 = vdupq_n_s64(2uLL);
      do
      {
        v15[-1] = v14;
        *v15 = vaddq_s64(v14, v16);
        v14 = vaddq_s64(v14, vdupq_n_s64(4uLL));
        v15 += 2;
        v12 -= 4;
      }
      while (v12);
      v5 = v13;
    }
    else
    {
      v9 = 1;
      v10 = a2;
    }
    v17 = v10 + 1;
    v18 = v5;
    while (a3 != v9)
    {
      if (a5 == v18)
      {
        v5 = a5;
        a3 = a5 - a4;
        goto LABEL_7;
      }
      if (v18 >= a5)
        goto LABEL_30;
      ++v9;
      v5 = v18 + 1;
      *v17++ = v18++;
      if (a3 == v9)
        goto LABEL_7;
    }
    __break(1u);
LABEL_30:
    __break(1u);
LABEL_31:
    __break(1u);
LABEL_32:
    __break(1u);
  }
  __break(1u);
  return result;
}

_QWORD *sub_1CA138C38(_QWORD *a1, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  return sub_1CA138C54(a1, a2, a3, a4, (unint64_t *)&qword_1EF936F60, (uint64_t)off_1E83DD758, &qword_1EF9379D0);
}

_QWORD *sub_1CA138C54(_QWORD *result, _QWORD *a2, uint64_t a3, uint64_t a4, unint64_t *a5, uint64_t a6, unint64_t *a7)
{
  uint64_t v7;
  _QWORD *v9;
  uint64_t v12;
  uint64_t v13;
  int64_t v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  id v19;
  int64_t v20;
  unint64_t v21;
  int64_t v22;
  int64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  _QWORD *v27;
  uint64_t v28;
  _QWORD *v29;
  int64_t v30;
  void *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  int64_t v36;
  unint64_t v37;

  v7 = a4;
  v9 = a2;
  v29 = result;
  if ((a4 & 0xC000000000000001) != 0)
  {
    sub_1CA1F0F64();
    sub_1CA0AB910(0, a5);
    sub_1CA0CBCF8(a7, a5);
    result = (_QWORD *)sub_1CA1F0CC4();
    v7 = v33;
    v12 = v34;
    v13 = v35;
    v14 = v36;
    v15 = v37;
    if (v9)
      goto LABEL_3;
LABEL_36:
    v16 = 0;
    goto LABEL_38;
  }
  v14 = 0;
  v24 = -1 << *(_BYTE *)(a4 + 32);
  v12 = a4 + 56;
  v13 = ~v24;
  v25 = -v24;
  if (v25 < 64)
    v26 = ~(-1 << v25);
  else
    v26 = -1;
  v15 = v26 & *(_QWORD *)(a4 + 56);
  if (!a2)
    goto LABEL_36;
LABEL_3:
  if (!a3)
  {
    v16 = 0;
LABEL_38:
    v27 = v29;
LABEL_41:
    *v27 = v7;
    v27[1] = v12;
    v27[2] = v13;
    v27[3] = v14;
    v27[4] = v15;
    return (_QWORD *)v16;
  }
  if (a3 < 0)
    goto LABEL_48;
  v16 = 0;
  v30 = (unint64_t)(v13 + 64) >> 6;
  v28 = v13;
  while (1)
  {
    if (v7 < 0)
    {
      if (!sub_1CA1F0FD0())
        goto LABEL_40;
      sub_1CA0AB910(0, a5);
      swift_unknownObjectRetain();
      swift_dynamicCast();
      v19 = v32;
      result = (_QWORD *)swift_unknownObjectRelease();
      if (!v32)
        goto LABEL_40;
      goto LABEL_8;
    }
    if (v15)
    {
      v17 = __clz(__rbit64(v15));
      v15 &= v15 - 1;
      v18 = v17 | (v14 << 6);
      goto LABEL_7;
    }
    v20 = v14 + 1;
    if (__OFADD__(v14, 1))
      break;
    if (v20 >= v30)
    {
      v15 = 0;
      goto LABEL_40;
    }
    v21 = *(_QWORD *)(v12 + 8 * v20);
    if (v21)
      goto LABEL_23;
    v22 = v14 + 2;
    if (v14 + 2 >= v30)
    {
      v15 = 0;
      ++v14;
      goto LABEL_40;
    }
    v21 = *(_QWORD *)(v12 + 8 * v22);
    if (!v21)
    {
      if (v14 + 3 >= v30)
        goto LABEL_44;
      v21 = *(_QWORD *)(v12 + 8 * (v14 + 3));
      if (v21)
      {
        v20 = v14 + 3;
        goto LABEL_23;
      }
      v22 = v14 + 4;
      if (v14 + 4 >= v30)
      {
        v15 = 0;
        v14 += 3;
        goto LABEL_40;
      }
      v21 = *(_QWORD *)(v12 + 8 * v22);
      if (!v21)
      {
        v20 = v14 + 5;
        if (v14 + 5 >= v30)
        {
LABEL_44:
          v15 = 0;
          v14 = v22;
          goto LABEL_40;
        }
        v21 = *(_QWORD *)(v12 + 8 * v20);
        if (!v21)
        {
          v23 = v14 + 6;
          while (v30 != v23)
          {
            v21 = *(_QWORD *)(v12 + 8 * v23++);
            if (v21)
            {
              v20 = v23 - 1;
              goto LABEL_23;
            }
          }
          v15 = 0;
          v14 = v30 - 1;
          goto LABEL_40;
        }
        goto LABEL_23;
      }
    }
    v20 = v22;
LABEL_23:
    v15 = (v21 - 1) & v21;
    v18 = __clz(__rbit64(v21)) + (v20 << 6);
    v14 = v20;
LABEL_7:
    result = *(id *)(*(_QWORD *)(v7 + 48) + 8 * v18);
    v19 = result;
    if (!result)
      goto LABEL_40;
LABEL_8:
    ++v16;
    *v9++ = v19;
    if (v16 == a3)
    {
      v16 = a3;
LABEL_40:
      v13 = v28;
      v27 = v29;
      goto LABEL_41;
    }
  }
  __break(1u);
LABEL_48:
  __break(1u);
  return result;
}

uint64_t sub_1CA138F4C(uint64_t result, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  int64_t v12;
  uint64_t v13;
  int64_t v14;
  unint64_t v15;
  unint64_t v16;
  int64_t v17;
  unint64_t v18;
  int64_t v19;
  uint64_t v20;
  void *v21;
  uint64_t v22;
  id v23;
  id v24;
  uint64_t v25;

  v5 = (_QWORD *)result;
  v6 = a4 + 64;
  v7 = -1 << *(_BYTE *)(a4 + 32);
  if (-v7 < 64)
    v8 = ~(-1 << -(char)v7);
  else
    v8 = -1;
  v9 = v8 & *(_QWORD *)(a4 + 64);
  if (!a2)
  {
    v12 = 0;
    v10 = 0;
LABEL_39:
    *v5 = a4;
    v5[1] = v6;
    v5[2] = ~v7;
    v5[3] = v12;
    v5[4] = v9;
    return v10;
  }
  v10 = a3;
  if (!a3)
  {
    v12 = 0;
    goto LABEL_39;
  }
  if (a3 < 0)
    goto LABEL_41;
  v11 = a2;
  v12 = 0;
  v13 = 0;
  v14 = (unint64_t)(63 - v7) >> 6;
  v25 = -1 << *(_BYTE *)(a4 + 32);
  if (!v9)
    goto LABEL_9;
LABEL_8:
  v15 = __clz(__rbit64(v9));
  v9 &= v9 - 1;
  v16 = v15 | (v12 << 6);
  while (1)
  {
    v20 = 8 * v16;
    v21 = *(void **)(*(_QWORD *)(a4 + 48) + v20);
    ++v13;
    v22 = *(_QWORD *)(*(_QWORD *)(a4 + 56) + v20);
    *v11 = v21;
    v11[1] = v22;
    if (v13 == v10)
    {
      v24 = v21;
      swift_bridgeObjectRetain();
      goto LABEL_38;
    }
    v11 += 2;
    v23 = v21;
    result = swift_bridgeObjectRetain();
    if (v9)
      goto LABEL_8;
LABEL_9:
    v17 = v12 + 1;
    if (__OFADD__(v12, 1))
      break;
    if (v17 >= v14)
      goto LABEL_33;
    v18 = *(_QWORD *)(v6 + 8 * v17);
    if (!v18)
    {
      v12 += 2;
      if (v17 + 1 >= v14)
      {
        v9 = 0;
        v12 = v17;
      }
      else
      {
        v18 = *(_QWORD *)(v6 + 8 * v12);
        if (v18)
          goto LABEL_14;
        v19 = v17 + 2;
        if (v17 + 2 >= v14)
          goto LABEL_33;
        v18 = *(_QWORD *)(v6 + 8 * v19);
        if (v18)
        {
LABEL_17:
          v17 = v19;
          goto LABEL_18;
        }
        v12 = v17 + 3;
        if (v17 + 3 < v14)
        {
          v18 = *(_QWORD *)(v6 + 8 * v12);
          if (v18)
          {
LABEL_14:
            v17 = v12;
            goto LABEL_18;
          }
          v19 = v17 + 4;
          if (v17 + 4 >= v14)
          {
LABEL_33:
            v9 = 0;
            goto LABEL_37;
          }
          v18 = *(_QWORD *)(v6 + 8 * v19);
          if (!v18)
          {
            while (1)
            {
              v17 = v19 + 1;
              if (__OFADD__(v19, 1))
                goto LABEL_42;
              if (v17 >= v14)
              {
                v9 = 0;
                v12 = v14 - 1;
                goto LABEL_37;
              }
              v18 = *(_QWORD *)(v6 + 8 * v17);
              ++v19;
              if (v18)
                goto LABEL_18;
            }
          }
          goto LABEL_17;
        }
        v9 = 0;
        v12 = v17 + 2;
      }
LABEL_37:
      v10 = v13;
LABEL_38:
      v7 = v25;
      goto LABEL_39;
    }
LABEL_18:
    v9 = (v18 - 1) & v18;
    v16 = __clz(__rbit64(v18)) + (v17 << 6);
    v12 = v17;
  }
  __break(1u);
LABEL_41:
  __break(1u);
LABEL_42:
  __break(1u);
  return result;
}

_QWORD *sub_1CA139160(_QWORD *result, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  int64_t v8;
  uint64_t v9;
  int64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  int64_t v14;
  unint64_t v15;
  int64_t v16;
  unint64_t v17;

  v4 = a4 + 64;
  v5 = -1;
  v6 = -1 << *(_BYTE *)(a4 + 32);
  if (-v6 < 64)
    v5 = ~(-1 << -(char)v6);
  v7 = v5 & *(_QWORD *)(a4 + 64);
  if (!a2)
  {
    v8 = 0;
    a3 = 0;
LABEL_35:
    *result = a4;
    result[1] = v4;
    result[2] = ~v6;
    result[3] = v8;
    result[4] = v7;
    return (_QWORD *)a3;
  }
  if (!a3)
  {
    v8 = 0;
    goto LABEL_35;
  }
  if (a3 < 0)
  {
LABEL_37:
    __break(1u);
    goto LABEL_38;
  }
  v8 = 0;
  v9 = 0;
  v10 = (unint64_t)(63 - v6) >> 6;
  while (v7)
  {
    v11 = __clz(__rbit64(v7));
    v7 &= v7 - 1;
    v12 = v11 | (v8 << 6);
LABEL_8:
    ++v9;
    v13 = *(_QWORD *)(*(_QWORD *)(a4 + 56) + 8 * v12);
    *a2 = *(_QWORD *)(*(_QWORD *)(a4 + 48) + 8 * v12);
    a2[1] = v13;
    a2 += 2;
    if (v9 == a3)
      goto LABEL_35;
  }
  v14 = v8 + 1;
  if (__OFADD__(v8, 1))
  {
    __break(1u);
    goto LABEL_37;
  }
  if (v14 >= v10)
    goto LABEL_30;
  v15 = *(_QWORD *)(v4 + 8 * v14);
  if (v15)
    goto LABEL_19;
  v8 += 2;
  if (v14 + 1 >= v10)
  {
    v7 = 0;
    v8 = v14;
    goto LABEL_34;
  }
  v15 = *(_QWORD *)(v4 + 8 * v8);
  if (v15)
  {
LABEL_15:
    v14 = v8;
LABEL_19:
    v17 = __clz(__rbit64(v15));
    v7 = (v15 - 1) & v15;
    v12 = v17 + (v14 << 6);
    v8 = v14;
    goto LABEL_8;
  }
  v16 = v14 + 2;
  if (v14 + 2 >= v10)
    goto LABEL_30;
  v15 = *(_QWORD *)(v4 + 8 * v16);
  if (v15)
  {
LABEL_18:
    v14 = v16;
    goto LABEL_19;
  }
  v8 = v14 + 3;
  if (v14 + 3 >= v10)
  {
    v7 = 0;
    v8 = v14 + 2;
    goto LABEL_34;
  }
  v15 = *(_QWORD *)(v4 + 8 * v8);
  if (v15)
    goto LABEL_15;
  v16 = v14 + 4;
  if (v14 + 4 >= v10)
  {
LABEL_30:
    v7 = 0;
LABEL_34:
    a3 = v9;
    goto LABEL_35;
  }
  v15 = *(_QWORD *)(v4 + 8 * v16);
  if (v15)
    goto LABEL_18;
  while (1)
  {
    v14 = v16 + 1;
    if (__OFADD__(v16, 1))
      break;
    if (v14 >= v10)
    {
      v7 = 0;
      v8 = v10 - 1;
      goto LABEL_34;
    }
    v15 = *(_QWORD *)(v4 + 8 * v14);
    ++v16;
    if (v15)
      goto LABEL_19;
  }
LABEL_38:
  __break(1u);
  return result;
}

uint64_t sub_1CA139304(_QWORD *a1)
{
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  unint64_t v12;
  uint64_t v13;
  double v14;
  double v15;
  double v16;
  double v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t *v21;
  uint64_t v22;
  uint64_t v23;
  double *v24;
  double v25;
  uint64_t v26;
  double *v27;
  double v28;
  unint64_t v29;
  unint64_t v30;
  char *v31;
  char *v32;
  unint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  char v37;
  char *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  BOOL v44;
  unint64_t v45;
  char *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  char *v51;
  uint64_t v52;
  uint64_t v53;
  BOOL v54;
  uint64_t v55;
  char v56;
  char *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  BOOL v61;
  uint64_t v62;
  uint64_t v63;
  char *v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  char *v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  unint64_t v72;
  char *v73;
  uint64_t v74;
  char *v75;
  char *v76;
  uint64_t v77;
  unint64_t v78;
  char *v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t i;
  double v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  unint64_t v87;
  char *v88;
  char *v89;
  uint64_t v90;
  uint64_t v91;
  char *v92;
  unint64_t v93;
  _QWORD *v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  double *__dst;

  v2 = a1;
  v3 = a1[1];
  result = sub_1CA1F12A0();
  if (result >= v3)
  {
    if (v3 < 0)
      goto LABEL_136;
    if ((unint64_t)v3 >= 2)
    {
      v80 = 0;
      v81 = *v2;
      for (i = 1; i != v3; ++i)
      {
        v83 = *(double *)(v81 + 8 * i);
        v84 = v80;
        do
        {
          v85 = v81 + 8 * v84;
          if (v83 >= *(double *)v85)
            break;
          if (!v81)
            goto LABEL_140;
          *(_QWORD *)(v85 + 8) = *(_QWORD *)v85;
          *(double *)(v81 + 8 * v84--) = v83;
        }
        while (v84 != -1);
        ++v80;
      }
    }
    return result;
  }
  if (v3 >= 0)
    v5 = v3;
  else
    v5 = v3 + 1;
  if (v3 < -1)
    goto LABEL_145;
  v97 = result;
  v98 = v3;
  if (v3 < 2)
  {
    v8 = MEMORY[0x1E0DEE9D8];
    __dst = (double *)(MEMORY[0x1E0DEE9D8] + 32);
    if (v3 != 1)
    {
      v12 = *(_QWORD *)(MEMORY[0x1E0DEE9D8] + 16);
      v11 = (char *)MEMORY[0x1E0DEE9D8];
LABEL_102:
      v96 = v8;
      if (v12 >= 2)
      {
        v86 = *v2;
        do
        {
          v87 = v12 - 2;
          if (v12 < 2)
            goto LABEL_131;
          if (!v86)
            goto LABEL_144;
          v88 = v11;
          v89 = v11 + 32;
          v90 = *(_QWORD *)&v11[16 * v87 + 32];
          v91 = *(_QWORD *)&v11[16 * v12 + 24];
          sub_1CA13A7E0((double *)(v86 + 8 * v90), (double *)(v86 + 8 * *(_QWORD *)&v89[16 * v12 - 16]), v86 + 8 * v91, __dst);
          if (v1)
            break;
          if (v91 < v90)
            goto LABEL_132;
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
            v88 = sub_1CA13B478((uint64_t)v88);
          if (v87 >= *((_QWORD *)v88 + 2))
            goto LABEL_133;
          v92 = &v88[16 * v87 + 32];
          *(_QWORD *)v92 = v90;
          *((_QWORD *)v92 + 1) = v91;
          v93 = *((_QWORD *)v88 + 2);
          if (v12 > v93)
            goto LABEL_134;
          memmove(&v88[16 * v12 + 16], &v88[16 * v12 + 32], 16 * (v93 - v12));
          v11 = v88;
          *((_QWORD *)v88 + 2) = v93 - 1;
          v12 = v93 - 1;
        }
        while (v93 > 2);
      }
LABEL_113:
      swift_bridgeObjectRelease();
      *(_QWORD *)(v96 + 16) = 0;
      return swift_bridgeObjectRelease();
    }
    v96 = MEMORY[0x1E0DEE9D8];
  }
  else
  {
    v6 = v5 >> 1;
    v7 = sub_1CA1F0B68();
    *(_QWORD *)(v7 + 16) = v6;
    v3 = v98;
    v96 = v7;
    __dst = (double *)(v7 + 32);
  }
  v9 = 0;
  v10 = *v2;
  v94 = v2;
  v95 = *v2 - 8;
  v11 = (char *)MEMORY[0x1E0DEE9D8];
  v99 = *v2;
  while (1)
  {
    v13 = v9++;
    if (v9 < v3)
    {
      v14 = *(double *)(v10 + 8 * v9);
      v15 = *(double *)(v10 + 8 * v13);
      v9 = v13 + 2;
      if (v13 + 2 < v3)
      {
        v16 = v14;
        while (1)
        {
          v17 = v16;
          v16 = *(double *)(v10 + 8 * v9);
          if (v14 < v15 == v16 >= v17)
            break;
          if (v3 == ++v9)
          {
            v9 = v3;
            break;
          }
        }
      }
      if (v14 < v15)
      {
        if (v9 < v13)
          goto LABEL_137;
        if (v13 < v9)
        {
          v18 = (uint64_t *)(v95 + 8 * v9);
          v19 = v9;
          v20 = v13;
          v21 = (uint64_t *)(v10 + 8 * v13);
          do
          {
            if (v20 != --v19)
            {
              if (!v10)
                goto LABEL_143;
              v22 = *v21;
              *v21 = *v18;
              *v18 = v22;
            }
            ++v20;
            --v18;
            ++v21;
          }
          while (v20 < v19);
        }
      }
    }
    if (v9 >= v3)
      goto LABEL_46;
    if (__OFSUB__(v9, v13))
      goto LABEL_135;
    if (v9 - v13 >= v97)
      goto LABEL_46;
    v23 = v13 + v97;
    if (__OFADD__(v13, v97))
      goto LABEL_138;
    if (v23 >= v3)
      v23 = v3;
    if (v23 < v13)
      break;
    if (v9 != v23)
    {
      v24 = (double *)(v95 + 8 * v9);
      do
      {
        v25 = *(double *)(v10 + 8 * v9);
        v26 = v13;
        v27 = v24;
        do
        {
          v28 = *v27;
          if (v25 >= *v27)
            break;
          if (!v10)
            goto LABEL_141;
          *v27 = v25;
          v27[1] = v28;
          --v27;
          ++v26;
        }
        while (v9 != v26);
        ++v9;
        ++v24;
      }
      while (v9 != v23);
      v9 = v23;
    }
LABEL_46:
    if (v9 < v13)
      goto LABEL_130;
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      v11 = sub_1CA13B230(0, *((_QWORD *)v11 + 2) + 1, 1, v11);
    v30 = *((_QWORD *)v11 + 2);
    v29 = *((_QWORD *)v11 + 3);
    v12 = v30 + 1;
    v10 = v99;
    if (v30 >= v29 >> 1)
    {
      v79 = sub_1CA13B230((char *)(v29 > 1), v30 + 1, 1, v11);
      v10 = v99;
      v11 = v79;
    }
    *((_QWORD *)v11 + 2) = v12;
    v31 = v11 + 32;
    v32 = &v11[16 * v30 + 32];
    *(_QWORD *)v32 = v13;
    *((_QWORD *)v32 + 1) = v9;
    if (v30)
    {
      while (1)
      {
        v33 = v12 - 1;
        if (v12 >= 4)
        {
          v38 = &v31[16 * v12];
          v39 = *((_QWORD *)v38 - 8);
          v40 = *((_QWORD *)v38 - 7);
          v44 = __OFSUB__(v40, v39);
          v41 = v40 - v39;
          if (v44)
            goto LABEL_119;
          v43 = *((_QWORD *)v38 - 6);
          v42 = *((_QWORD *)v38 - 5);
          v44 = __OFSUB__(v42, v43);
          v36 = v42 - v43;
          v37 = v44;
          if (v44)
            goto LABEL_120;
          v45 = v12 - 2;
          v46 = &v31[16 * v12 - 32];
          v48 = *(_QWORD *)v46;
          v47 = *((_QWORD *)v46 + 1);
          v44 = __OFSUB__(v47, v48);
          v49 = v47 - v48;
          if (v44)
            goto LABEL_122;
          v44 = __OFADD__(v36, v49);
          v50 = v36 + v49;
          if (v44)
            goto LABEL_125;
          if (v50 >= v41)
          {
            v68 = &v31[16 * v33];
            v70 = *(_QWORD *)v68;
            v69 = *((_QWORD *)v68 + 1);
            v44 = __OFSUB__(v69, v70);
            v71 = v69 - v70;
            if (v44)
              goto LABEL_129;
            v61 = v36 < v71;
            goto LABEL_83;
          }
        }
        else
        {
          if (v12 != 3)
          {
            v62 = *((_QWORD *)v11 + 4);
            v63 = *((_QWORD *)v11 + 5);
            v44 = __OFSUB__(v63, v62);
            v55 = v63 - v62;
            v56 = v44;
            goto LABEL_77;
          }
          v35 = *((_QWORD *)v11 + 4);
          v34 = *((_QWORD *)v11 + 5);
          v44 = __OFSUB__(v34, v35);
          v36 = v34 - v35;
          v37 = v44;
        }
        if ((v37 & 1) != 0)
          goto LABEL_121;
        v45 = v12 - 2;
        v51 = &v31[16 * v12 - 32];
        v53 = *(_QWORD *)v51;
        v52 = *((_QWORD *)v51 + 1);
        v54 = __OFSUB__(v52, v53);
        v55 = v52 - v53;
        v56 = v54;
        if (v54)
          goto LABEL_124;
        v57 = &v31[16 * v33];
        v59 = *(_QWORD *)v57;
        v58 = *((_QWORD *)v57 + 1);
        v44 = __OFSUB__(v58, v59);
        v60 = v58 - v59;
        if (v44)
          goto LABEL_127;
        if (__OFADD__(v55, v60))
          goto LABEL_128;
        if (v55 + v60 >= v36)
        {
          v61 = v36 < v60;
LABEL_83:
          if (v61)
            v33 = v45;
          goto LABEL_85;
        }
LABEL_77:
        if ((v56 & 1) != 0)
          goto LABEL_123;
        v64 = &v31[16 * v33];
        v66 = *(_QWORD *)v64;
        v65 = *((_QWORD *)v64 + 1);
        v44 = __OFSUB__(v65, v66);
        v67 = v65 - v66;
        if (v44)
          goto LABEL_126;
        if (v67 < v55)
          goto LABEL_15;
LABEL_85:
        v72 = v33 - 1;
        if (v33 - 1 >= v12)
        {
          __break(1u);
LABEL_116:
          __break(1u);
LABEL_117:
          __break(1u);
LABEL_118:
          __break(1u);
LABEL_119:
          __break(1u);
LABEL_120:
          __break(1u);
LABEL_121:
          __break(1u);
LABEL_122:
          __break(1u);
LABEL_123:
          __break(1u);
LABEL_124:
          __break(1u);
LABEL_125:
          __break(1u);
LABEL_126:
          __break(1u);
LABEL_127:
          __break(1u);
LABEL_128:
          __break(1u);
LABEL_129:
          __break(1u);
LABEL_130:
          __break(1u);
LABEL_131:
          __break(1u);
LABEL_132:
          __break(1u);
LABEL_133:
          __break(1u);
LABEL_134:
          __break(1u);
LABEL_135:
          __break(1u);
LABEL_136:
          __break(1u);
LABEL_137:
          __break(1u);
LABEL_138:
          __break(1u);
          goto LABEL_139;
        }
        if (!v10)
          goto LABEL_142;
        v73 = &v31[16 * v72];
        v74 = *(_QWORD *)v73;
        v75 = v31;
        v76 = &v31[16 * v33];
        v77 = *((_QWORD *)v76 + 1);
        sub_1CA13A7E0((double *)(v10 + 8 * *(_QWORD *)v73), (double *)(v10 + 8 * *(_QWORD *)v76), v10 + 8 * v77, __dst);
        if (v1)
          goto LABEL_113;
        if (v77 < v74)
          goto LABEL_116;
        if (v33 > *((_QWORD *)v11 + 2))
          goto LABEL_117;
        *(_QWORD *)v73 = v74;
        *(_QWORD *)&v75[16 * v72 + 8] = v77;
        v78 = *((_QWORD *)v11 + 2);
        if (v33 >= v78)
          goto LABEL_118;
        v12 = v78 - 1;
        memmove(v76, v76 + 16, 16 * (v78 - 1 - v33));
        v31 = v75;
        *((_QWORD *)v11 + 2) = v78 - 1;
        v10 = v99;
        if (v78 <= 2)
          goto LABEL_15;
      }
    }
    v12 = 1;
LABEL_15:
    v3 = v98;
    if (v9 >= v98)
    {
      v8 = v96;
      v2 = v94;
      goto LABEL_102;
    }
  }
LABEL_139:
  __break(1u);
LABEL_140:
  __break(1u);
LABEL_141:
  __break(1u);
LABEL_142:
  __break(1u);
LABEL_143:
  __break(1u);
LABEL_144:
  __break(1u);
LABEL_145:
  result = sub_1CA1F11BC();
  __break(1u);
  return result;
}

uint64_t sub_1CA139994(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  unint64_t v13;
  uint64_t v14;
  double v15;
  double v16;
  double *v17;
  double v18;
  double v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  double *v28;
  double v29;
  uint64_t v30;
  double *v31;
  double v32;
  unint64_t v33;
  unint64_t v34;
  char *v35;
  char *v36;
  unint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  char v41;
  char *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  BOOL v48;
  unint64_t v49;
  char *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  char *v55;
  uint64_t v56;
  uint64_t v57;
  BOOL v58;
  uint64_t v59;
  char v60;
  char *v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  BOOL v65;
  uint64_t v66;
  uint64_t v67;
  char *v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  char *v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  unint64_t v76;
  char *v77;
  char *v78;
  uint64_t v79;
  char *v80;
  uint64_t v81;
  unint64_t v82;
  char *v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t i;
  double v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  char *v93;
  uint64_t v94;
  unint64_t v95;
  char *v96;
  uint64_t v97;
  uint64_t v98;
  char *v99;
  unint64_t v100;
  uint64_t *v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  double *__dst;

  v3 = a1[1];
  result = sub_1CA1F12A0();
  if (result >= v3)
  {
    if (v3 < 0)
      goto LABEL_137;
    if ((unint64_t)v3 >= 2)
    {
      v84 = *a1;
      v85 = *a1 + 8;
      v86 = -1;
      for (i = 1; i != v3; ++i)
      {
        v88 = *(double *)(v84 + 16 * i + 8);
        v89 = v86;
        v90 = v85;
        do
        {
          if (v88 >= *(double *)v90)
            break;
          if (!v84)
            goto LABEL_141;
          v91 = *(_QWORD *)(v90 + 8);
          *(_OWORD *)(v90 + 8) = *(_OWORD *)(v90 - 8);
          *(_QWORD *)(v90 - 8) = v91;
          *(double *)v90 = v88;
          v90 -= 16;
        }
        while (!__CFADD__(v89++, 1));
        v85 += 16;
        --v86;
      }
    }
    return result;
  }
  if (v3 >= 0)
    v5 = v3;
  else
    v5 = v3 + 1;
  if (v3 < -1)
    goto LABEL_146;
  v6 = result;
  v101 = a1;
  if (v3 < 2)
  {
    v9 = MEMORY[0x1E0DEE9D8];
    __dst = (double *)(MEMORY[0x1E0DEE9D8] + 32);
    if (v3 != 1)
    {
      v13 = *(_QWORD *)(MEMORY[0x1E0DEE9D8] + 16);
      v12 = (char *)MEMORY[0x1E0DEE9D8];
LABEL_103:
      v93 = v12;
      v103 = v9;
      if (v13 >= 2)
      {
        v94 = *v101;
        do
        {
          v95 = v13 - 2;
          if (v13 < 2)
            goto LABEL_132;
          if (!v94)
            goto LABEL_145;
          v96 = v93;
          v97 = *(_QWORD *)&v93[16 * v95 + 32];
          v98 = *(_QWORD *)&v93[16 * v13 + 24];
          sub_1CA13ACF0((double *)(v94 + 16 * v97), (double *)(v94 + 16 * *(_QWORD *)&v93[16 * v13 + 16]), v94 + 16 * v98, __dst);
          if (v1)
            break;
          if (v98 < v97)
            goto LABEL_133;
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
            v96 = sub_1CA13B478((uint64_t)v96);
          if (v95 >= *((_QWORD *)v96 + 2))
            goto LABEL_134;
          v99 = &v96[16 * v95 + 32];
          *(_QWORD *)v99 = v97;
          *((_QWORD *)v99 + 1) = v98;
          v100 = *((_QWORD *)v96 + 2);
          if (v13 > v100)
            goto LABEL_135;
          memmove(&v96[16 * v13 + 16], &v96[16 * v13 + 32], 16 * (v100 - v13));
          v93 = v96;
          *((_QWORD *)v96 + 2) = v100 - 1;
          v13 = v100 - 1;
        }
        while (v100 > 2);
      }
LABEL_93:
      swift_bridgeObjectRelease();
      *(_QWORD *)(v103 + 16) = 0;
      return swift_bridgeObjectRelease();
    }
    v103 = MEMORY[0x1E0DEE9D8];
  }
  else
  {
    v7 = v5 >> 1;
    __swift_instantiateConcreteTypeFromMangledName(&qword_1EF93A300);
    v8 = sub_1CA1F0B68();
    *(_QWORD *)(v8 + 16) = v7;
    v103 = v8;
    __dst = (double *)(v8 + 32);
  }
  v10 = 0;
  v11 = *a1;
  v102 = *a1 + 40;
  v12 = (char *)MEMORY[0x1E0DEE9D8];
  v104 = v6;
  v105 = v3;
  v106 = v11;
  while (1)
  {
    v14 = v10++;
    if (v10 < v3)
    {
      v15 = *(double *)(v11 + 16 * v10 + 8);
      v16 = *(double *)(v11 + 16 * v14 + 8);
      v10 = v14 + 2;
      if (v14 + 2 < v3)
      {
        v17 = (double *)(v102 + 16 * v14);
        v18 = v15;
        while (1)
        {
          v19 = v18;
          v18 = *v17;
          if (v15 < v16 == *v17 >= v19)
            break;
          ++v10;
          v17 += 2;
          if (v3 == v10)
          {
            v10 = v3;
            break;
          }
        }
      }
      if (v15 < v16)
      {
        if (v10 < v14)
          goto LABEL_138;
        if (v14 < v10)
        {
          v20 = 16 * v10;
          v21 = 16 * v14;
          v22 = v10;
          v23 = v14;
          do
          {
            if (v23 != --v22)
            {
              if (!v11)
                goto LABEL_144;
              v24 = v11 + v20;
              v25 = *(_QWORD *)(v11 + v21);
              v26 = *(_QWORD *)(v11 + v21 + 8);
              *(_OWORD *)(v11 + v21) = *(_OWORD *)(v11 + v20 - 16);
              *(_QWORD *)(v24 - 16) = v25;
              *(_QWORD *)(v24 - 8) = v26;
            }
            ++v23;
            v20 -= 16;
            v21 += 16;
          }
          while (v23 < v22);
        }
      }
    }
    if (v10 >= v3)
      goto LABEL_46;
    if (__OFSUB__(v10, v14))
      goto LABEL_136;
    if (v10 - v14 >= v6)
      goto LABEL_46;
    v27 = v14 + v6;
    if (__OFADD__(v14, v6))
      goto LABEL_139;
    if (v27 >= v3)
      v27 = v3;
    if (v27 < v14)
      break;
    if (v10 != v27)
    {
      v28 = (double *)(v11 + 16 * v10);
      do
      {
        v29 = *(double *)(v11 + 16 * v10 + 8);
        v30 = v14;
        v31 = v28;
        do
        {
          if (v29 >= *(v31 - 1))
            break;
          if (!v11)
            goto LABEL_142;
          v32 = *v31;
          *(_OWORD *)v31 = *((_OWORD *)v31 - 1);
          *(v31 - 1) = v29;
          *(v31 - 2) = v32;
          v31 -= 2;
          ++v30;
        }
        while (v10 != v30);
        ++v10;
        v28 += 2;
      }
      while (v10 != v27);
      v10 = v27;
    }
LABEL_46:
    if (v10 < v14)
      goto LABEL_131;
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      v12 = sub_1CA13B230(0, *((_QWORD *)v12 + 2) + 1, 1, v12);
    v34 = *((_QWORD *)v12 + 2);
    v33 = *((_QWORD *)v12 + 3);
    v13 = v34 + 1;
    v11 = v106;
    if (v34 >= v33 >> 1)
    {
      v83 = sub_1CA13B230((char *)(v33 > 1), v34 + 1, 1, v12);
      v11 = v106;
      v12 = v83;
    }
    *((_QWORD *)v12 + 2) = v13;
    v35 = v12 + 32;
    v36 = &v12[16 * v34 + 32];
    *(_QWORD *)v36 = v14;
    *((_QWORD *)v36 + 1) = v10;
    if (v34)
    {
      while (1)
      {
        v37 = v13 - 1;
        if (v13 >= 4)
        {
          v42 = &v35[16 * v13];
          v43 = *((_QWORD *)v42 - 8);
          v44 = *((_QWORD *)v42 - 7);
          v48 = __OFSUB__(v44, v43);
          v45 = v44 - v43;
          if (v48)
            goto LABEL_120;
          v47 = *((_QWORD *)v42 - 6);
          v46 = *((_QWORD *)v42 - 5);
          v48 = __OFSUB__(v46, v47);
          v40 = v46 - v47;
          v41 = v48;
          if (v48)
            goto LABEL_121;
          v49 = v13 - 2;
          v50 = &v35[16 * v13 - 32];
          v52 = *(_QWORD *)v50;
          v51 = *((_QWORD *)v50 + 1);
          v48 = __OFSUB__(v51, v52);
          v53 = v51 - v52;
          if (v48)
            goto LABEL_123;
          v48 = __OFADD__(v40, v53);
          v54 = v40 + v53;
          if (v48)
            goto LABEL_126;
          if (v54 >= v45)
          {
            v72 = &v35[16 * v37];
            v74 = *(_QWORD *)v72;
            v73 = *((_QWORD *)v72 + 1);
            v48 = __OFSUB__(v73, v74);
            v75 = v73 - v74;
            if (v48)
              goto LABEL_130;
            v65 = v40 < v75;
            goto LABEL_83;
          }
        }
        else
        {
          if (v13 != 3)
          {
            v66 = *((_QWORD *)v12 + 4);
            v67 = *((_QWORD *)v12 + 5);
            v48 = __OFSUB__(v67, v66);
            v59 = v67 - v66;
            v60 = v48;
            goto LABEL_77;
          }
          v39 = *((_QWORD *)v12 + 4);
          v38 = *((_QWORD *)v12 + 5);
          v48 = __OFSUB__(v38, v39);
          v40 = v38 - v39;
          v41 = v48;
        }
        if ((v41 & 1) != 0)
          goto LABEL_122;
        v49 = v13 - 2;
        v55 = &v35[16 * v13 - 32];
        v57 = *(_QWORD *)v55;
        v56 = *((_QWORD *)v55 + 1);
        v58 = __OFSUB__(v56, v57);
        v59 = v56 - v57;
        v60 = v58;
        if (v58)
          goto LABEL_125;
        v61 = &v35[16 * v37];
        v63 = *(_QWORD *)v61;
        v62 = *((_QWORD *)v61 + 1);
        v48 = __OFSUB__(v62, v63);
        v64 = v62 - v63;
        if (v48)
          goto LABEL_128;
        if (__OFADD__(v59, v64))
          goto LABEL_129;
        if (v59 + v64 >= v40)
        {
          v65 = v40 < v64;
LABEL_83:
          if (v65)
            v37 = v49;
          goto LABEL_85;
        }
LABEL_77:
        if ((v60 & 1) != 0)
          goto LABEL_124;
        v68 = &v35[16 * v37];
        v70 = *(_QWORD *)v68;
        v69 = *((_QWORD *)v68 + 1);
        v48 = __OFSUB__(v69, v70);
        v71 = v69 - v70;
        if (v48)
          goto LABEL_127;
        if (v71 < v59)
          goto LABEL_15;
LABEL_85:
        v76 = v37 - 1;
        if (v37 - 1 >= v13)
        {
          __break(1u);
LABEL_117:
          __break(1u);
LABEL_118:
          __break(1u);
LABEL_119:
          __break(1u);
LABEL_120:
          __break(1u);
LABEL_121:
          __break(1u);
LABEL_122:
          __break(1u);
LABEL_123:
          __break(1u);
LABEL_124:
          __break(1u);
LABEL_125:
          __break(1u);
LABEL_126:
          __break(1u);
LABEL_127:
          __break(1u);
LABEL_128:
          __break(1u);
LABEL_129:
          __break(1u);
LABEL_130:
          __break(1u);
LABEL_131:
          __break(1u);
LABEL_132:
          __break(1u);
LABEL_133:
          __break(1u);
LABEL_134:
          __break(1u);
LABEL_135:
          __break(1u);
LABEL_136:
          __break(1u);
LABEL_137:
          __break(1u);
LABEL_138:
          __break(1u);
LABEL_139:
          __break(1u);
          goto LABEL_140;
        }
        if (!v11)
          goto LABEL_143;
        v77 = v12;
        v78 = &v35[16 * v76];
        v79 = *(_QWORD *)v78;
        v80 = &v35[16 * v37];
        v81 = *((_QWORD *)v80 + 1);
        sub_1CA13ACF0((double *)(v11 + 16 * *(_QWORD *)v78), (double *)(v11 + 16 * *(_QWORD *)v80), v11 + 16 * v81, __dst);
        if (v1)
          goto LABEL_93;
        if (v81 < v79)
          goto LABEL_117;
        if (v37 > *((_QWORD *)v77 + 2))
          goto LABEL_118;
        *(_QWORD *)v78 = v79;
        *(_QWORD *)&v35[16 * v76 + 8] = v81;
        v82 = *((_QWORD *)v77 + 2);
        if (v37 >= v82)
          goto LABEL_119;
        v12 = v77;
        v13 = v82 - 1;
        memmove(&v35[16 * v37], v80 + 16, 16 * (v82 - 1 - v37));
        *((_QWORD *)v77 + 2) = v82 - 1;
        v11 = v106;
        if (v82 <= 2)
          goto LABEL_15;
      }
    }
    v13 = 1;
LABEL_15:
    v6 = v104;
    v3 = v105;
    if (v10 >= v105)
    {
      v9 = v103;
      goto LABEL_103;
    }
  }
LABEL_140:
  __break(1u);
LABEL_141:
  __break(1u);
LABEL_142:
  __break(1u);
LABEL_143:
  __break(1u);
LABEL_144:
  __break(1u);
LABEL_145:
  __break(1u);
LABEL_146:
  result = sub_1CA1F11BC();
  __break(1u);
  return result;
}

uint64_t sub_1CA13A074(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  double v16;
  double v17;
  uint64_t v18;
  double v19;
  uint64_t v20;
  int v21;
  double *v22;
  double v23;
  double v24;
  int v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  double v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  _BOOL4 v41;
  unint64_t v42;
  unint64_t v43;
  char *v44;
  char *v45;
  unint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  char v50;
  char *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  BOOL v57;
  unint64_t v58;
  char *v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  char *v64;
  uint64_t v65;
  uint64_t v66;
  BOOL v67;
  uint64_t v68;
  char v69;
  char *v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  BOOL v74;
  uint64_t v75;
  uint64_t v76;
  char *v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  char *v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  unint64_t v85;
  char *v86;
  uint64_t v87;
  char *v88;
  uint64_t v89;
  unint64_t v90;
  char *v91;
  char *v92;
  uint64_t v93;
  unint64_t v94;
  char *v95;
  uint64_t v96;
  uint64_t v97;
  char *v98;
  unint64_t v99;
  uint64_t v100;
  uint64_t *v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  double *__dst;

  v3 = a1[1];
  result = sub_1CA1F12A0();
  if (result >= v3)
  {
    if (v3 < 0)
      goto LABEL_139;
    if (v3)
      return sub_1CA13A748(0, v3, 1, a1);
    return result;
  }
  if (v3 >= 0)
    v5 = v3;
  else
    v5 = v3 + 1;
  if (v3 < -1)
    goto LABEL_147;
  v6 = result;
  v101 = a1;
  if (v3 < 2)
  {
    v9 = MEMORY[0x1E0DEE9D8];
    __dst = (double *)(MEMORY[0x1E0DEE9D8] + 32);
    if (v3 != 1)
    {
      v13 = *(_QWORD *)(MEMORY[0x1E0DEE9D8] + 16);
      v12 = (char *)MEMORY[0x1E0DEE9D8];
LABEL_105:
      v92 = v12;
      v103 = v9;
      if (v13 >= 2)
      {
        v93 = *v101;
        do
        {
          v94 = v13 - 2;
          if (v13 < 2)
            goto LABEL_134;
          if (!v93)
            goto LABEL_146;
          v95 = v92;
          v96 = *(_QWORD *)&v92[16 * v94 + 32];
          v97 = *(_QWORD *)&v92[16 * v13 + 24];
          sub_1CA13AF78((double *)(v93 + 16 * v96), (double *)(v93 + 16 * *(_QWORD *)&v92[16 * v13 + 16]), v93 + 16 * v97, __dst);
          if (v1)
            break;
          if (v97 < v96)
            goto LABEL_135;
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
            v95 = sub_1CA13B478((uint64_t)v95);
          if (v94 >= *((_QWORD *)v95 + 2))
            goto LABEL_136;
          v98 = &v95[16 * v94 + 32];
          *(_QWORD *)v98 = v96;
          *((_QWORD *)v98 + 1) = v97;
          v99 = *((_QWORD *)v95 + 2);
          if (v13 > v99)
            goto LABEL_137;
          memmove(&v95[16 * v13 + 16], &v95[16 * v13 + 32], 16 * (v99 - v13));
          v92 = v95;
          *((_QWORD *)v95 + 2) = v99 - 1;
          v13 = v99 - 1;
        }
        while (v99 > 2);
      }
LABEL_102:
      swift_bridgeObjectRelease();
      *(_QWORD *)(v103 + 16) = 0;
      return swift_bridgeObjectRelease();
    }
    v103 = MEMORY[0x1E0DEE9D8];
  }
  else
  {
    v7 = v5 >> 1;
    __swift_instantiateConcreteTypeFromMangledName(&qword_1EF93A2F0);
    v8 = sub_1CA1F0B68();
    *(_QWORD *)(v8 + 16) = v7;
    v103 = v8;
    __dst = (double *)(v8 + 32);
  }
  v10 = 0;
  v11 = *a1;
  v102 = *a1 + 40;
  v100 = *a1 - 16;
  v12 = (char *)MEMORY[0x1E0DEE9D8];
  v104 = v6;
  v105 = v3;
  v106 = v11;
  while (1)
  {
    v14 = v10++;
    if (v10 < v3)
    {
      v15 = v11 + 16 * v10;
      v16 = *(double *)v15;
      v17 = *(double *)(v15 + 8);
      v18 = v11 + 16 * v14;
      v19 = *(double *)v18;
      v20 = *(_QWORD *)(v18 + 8);
      if (*(_QWORD *)&v17 == v20)
        v21 = v16 < v19;
      else
        v21 = v20 < *(_QWORD *)&v17;
      v10 = v14 + 2;
      if (v14 + 2 < v3)
      {
        v22 = (double *)(v102 + 16 * v14);
        while (1)
        {
          v23 = v16;
          v16 = *(v22 - 1);
          v24 = *v22;
          v25 = *(_QWORD *)v22 == *(_QWORD *)&v17 ? v16 < v23 : *(_QWORD *)&v17 < *(_QWORD *)v22;
          if (v21 != v25)
            break;
          v22 += 2;
          ++v10;
          v17 = v24;
          if (v3 == v10)
          {
            v10 = v3;
            break;
          }
        }
      }
      if (v21)
      {
        if (v10 < v14)
          goto LABEL_140;
        if (v14 < v10)
        {
          v26 = 16 * v10;
          v27 = 16 * v14;
          v28 = v10;
          v29 = v14;
          do
          {
            if (v29 != --v28)
            {
              if (!v11)
                goto LABEL_145;
              v30 = v11 + v26;
              v31 = *(_QWORD *)(v11 + v27);
              v32 = *(_QWORD *)(v11 + v27 + 8);
              *(_OWORD *)(v11 + v27) = *(_OWORD *)(v11 + v26 - 16);
              *(_QWORD *)(v30 - 16) = v31;
              *(_QWORD *)(v30 - 8) = v32;
            }
            ++v29;
            v26 -= 16;
            v27 += 16;
          }
          while (v29 < v28);
        }
      }
    }
    if (v10 >= v3)
      goto LABEL_55;
    if (__OFSUB__(v10, v14))
      goto LABEL_138;
    if (v10 - v14 >= v6)
      goto LABEL_55;
    v33 = v14 + v6;
    if (__OFADD__(v14, v6))
      goto LABEL_141;
    if (v33 >= v3)
      v33 = v3;
    if (v33 < v14)
      break;
    if (v10 != v33)
    {
      v34 = v100 + 16 * v10;
      do
      {
        v35 = v11 + 16 * v10;
        v36 = *(double *)v35;
        v37 = *(_QWORD *)(v35 + 8);
        v38 = v14;
        v39 = v34;
        do
        {
          v40 = *(_QWORD *)(v39 + 8);
          if (v37 == v40)
            v41 = v36 < *(double *)v39;
          else
            v41 = v40 < v37;
          if (!v41)
            break;
          if (!v11)
            goto LABEL_143;
          *(_OWORD *)(v39 + 16) = *(_OWORD *)v39;
          *(double *)v39 = v36;
          *(_QWORD *)(v39 + 8) = v37;
          v39 -= 16;
          ++v38;
        }
        while (v10 != v38);
        ++v10;
        v34 += 16;
      }
      while (v10 != v33);
      v10 = v33;
    }
LABEL_55:
    if (v10 < v14)
      goto LABEL_133;
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      v12 = sub_1CA13B230(0, *((_QWORD *)v12 + 2) + 1, 1, v12);
    v43 = *((_QWORD *)v12 + 2);
    v42 = *((_QWORD *)v12 + 3);
    v13 = v43 + 1;
    v11 = v106;
    if (v43 >= v42 >> 1)
    {
      v91 = sub_1CA13B230((char *)(v42 > 1), v43 + 1, 1, v12);
      v11 = v106;
      v12 = v91;
    }
    *((_QWORD *)v12 + 2) = v13;
    v44 = v12 + 32;
    v45 = &v12[16 * v43 + 32];
    *(_QWORD *)v45 = v14;
    *((_QWORD *)v45 + 1) = v10;
    if (v43)
    {
      while (1)
      {
        v46 = v13 - 1;
        if (v13 >= 4)
        {
          v51 = &v44[16 * v13];
          v52 = *((_QWORD *)v51 - 8);
          v53 = *((_QWORD *)v51 - 7);
          v57 = __OFSUB__(v53, v52);
          v54 = v53 - v52;
          if (v57)
            goto LABEL_122;
          v56 = *((_QWORD *)v51 - 6);
          v55 = *((_QWORD *)v51 - 5);
          v57 = __OFSUB__(v55, v56);
          v49 = v55 - v56;
          v50 = v57;
          if (v57)
            goto LABEL_123;
          v58 = v13 - 2;
          v59 = &v44[16 * v13 - 32];
          v61 = *(_QWORD *)v59;
          v60 = *((_QWORD *)v59 + 1);
          v57 = __OFSUB__(v60, v61);
          v62 = v60 - v61;
          if (v57)
            goto LABEL_125;
          v57 = __OFADD__(v49, v62);
          v63 = v49 + v62;
          if (v57)
            goto LABEL_128;
          if (v63 >= v54)
          {
            v81 = &v44[16 * v46];
            v83 = *(_QWORD *)v81;
            v82 = *((_QWORD *)v81 + 1);
            v57 = __OFSUB__(v82, v83);
            v84 = v82 - v83;
            if (v57)
              goto LABEL_132;
            v74 = v49 < v84;
            goto LABEL_92;
          }
        }
        else
        {
          if (v13 != 3)
          {
            v75 = *((_QWORD *)v12 + 4);
            v76 = *((_QWORD *)v12 + 5);
            v57 = __OFSUB__(v76, v75);
            v68 = v76 - v75;
            v69 = v57;
            goto LABEL_86;
          }
          v48 = *((_QWORD *)v12 + 4);
          v47 = *((_QWORD *)v12 + 5);
          v57 = __OFSUB__(v47, v48);
          v49 = v47 - v48;
          v50 = v57;
        }
        if ((v50 & 1) != 0)
          goto LABEL_124;
        v58 = v13 - 2;
        v64 = &v44[16 * v13 - 32];
        v66 = *(_QWORD *)v64;
        v65 = *((_QWORD *)v64 + 1);
        v67 = __OFSUB__(v65, v66);
        v68 = v65 - v66;
        v69 = v67;
        if (v67)
          goto LABEL_127;
        v70 = &v44[16 * v46];
        v72 = *(_QWORD *)v70;
        v71 = *((_QWORD *)v70 + 1);
        v57 = __OFSUB__(v71, v72);
        v73 = v71 - v72;
        if (v57)
          goto LABEL_130;
        if (__OFADD__(v68, v73))
          goto LABEL_131;
        if (v68 + v73 >= v49)
        {
          v74 = v49 < v73;
LABEL_92:
          if (v74)
            v46 = v58;
          goto LABEL_94;
        }
LABEL_86:
        if ((v69 & 1) != 0)
          goto LABEL_126;
        v77 = &v44[16 * v46];
        v79 = *(_QWORD *)v77;
        v78 = *((_QWORD *)v77 + 1);
        v57 = __OFSUB__(v78, v79);
        v80 = v78 - v79;
        if (v57)
          goto LABEL_129;
        if (v80 < v68)
          goto LABEL_15;
LABEL_94:
        v85 = v46 - 1;
        if (v46 - 1 >= v13)
        {
          __break(1u);
LABEL_119:
          __break(1u);
LABEL_120:
          __break(1u);
LABEL_121:
          __break(1u);
LABEL_122:
          __break(1u);
LABEL_123:
          __break(1u);
LABEL_124:
          __break(1u);
LABEL_125:
          __break(1u);
LABEL_126:
          __break(1u);
LABEL_127:
          __break(1u);
LABEL_128:
          __break(1u);
LABEL_129:
          __break(1u);
LABEL_130:
          __break(1u);
LABEL_131:
          __break(1u);
LABEL_132:
          __break(1u);
LABEL_133:
          __break(1u);
LABEL_134:
          __break(1u);
LABEL_135:
          __break(1u);
LABEL_136:
          __break(1u);
LABEL_137:
          __break(1u);
LABEL_138:
          __break(1u);
LABEL_139:
          __break(1u);
LABEL_140:
          __break(1u);
LABEL_141:
          __break(1u);
          goto LABEL_142;
        }
        if (!v11)
          goto LABEL_144;
        v86 = &v44[16 * v85];
        v87 = *(_QWORD *)v86;
        v88 = &v44[16 * v46];
        v89 = *((_QWORD *)v88 + 1);
        sub_1CA13AF78((double *)(v11 + 16 * *(_QWORD *)v86), (double *)(v11 + 16 * *(_QWORD *)v88), v11 + 16 * v89, __dst);
        if (v1)
          goto LABEL_102;
        if (v89 < v87)
          goto LABEL_119;
        if (v46 > *((_QWORD *)v12 + 2))
          goto LABEL_120;
        *(_QWORD *)v86 = v87;
        *(_QWORD *)&v44[16 * v85 + 8] = v89;
        v90 = *((_QWORD *)v12 + 2);
        if (v46 >= v90)
          goto LABEL_121;
        v13 = v90 - 1;
        memmove(&v44[16 * v46], v88 + 16, 16 * (v90 - 1 - v46));
        *((_QWORD *)v12 + 2) = v90 - 1;
        v11 = v106;
        if (v90 <= 2)
          goto LABEL_15;
      }
    }
    v13 = 1;
LABEL_15:
    v6 = v104;
    v3 = v105;
    if (v10 >= v105)
    {
      v9 = v103;
      goto LABEL_105;
    }
  }
LABEL_142:
  __break(1u);
LABEL_143:
  __break(1u);
LABEL_144:
  __break(1u);
LABEL_145:
  __break(1u);
LABEL_146:
  __break(1u);
LABEL_147:
  result = sub_1CA1F11BC();
  __break(1u);
  return result;
}

uint64_t sub_1CA13A748(uint64_t result, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  double v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _BOOL4 v12;

  if (a3 != a2)
  {
    v4 = *a4;
    v5 = *a4 + 16 * a3 - 16;
LABEL_5:
    v6 = v4 + 16 * a3;
    v7 = *(double *)v6;
    v8 = *(_QWORD *)(v6 + 8);
    v9 = result;
    v10 = v5;
    while (1)
    {
      v11 = *(_QWORD *)(v10 + 8);
      if (v8 == v11)
        v12 = v7 < *(double *)v10;
      else
        v12 = v11 < v8;
      if (!v12)
      {
LABEL_4:
        ++a3;
        v5 += 16;
        if (a3 == a2)
          return result;
        goto LABEL_5;
      }
      if (!v4)
        break;
      *(_OWORD *)(v10 + 16) = *(_OWORD *)v10;
      *(double *)v10 = v7;
      *(_QWORD *)(v10 + 8) = v8;
      v10 -= 16;
      if (a3 == ++v9)
        goto LABEL_4;
    }
    __break(1u);
  }
  return result;
}

uint64_t sub_1CA13A7E0(double *__src, double *a2, unint64_t a3, double *__dst)
{
  double *v4;
  double *v6;
  double *v7;
  int64_t v8;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  double *v14;
  double *v15;
  double *v16;
  double *v17;
  double *v18;
  double *v19;
  double v20;
  uint64_t result;
  double *v22;
  double *v23;
  double *v24;

  v4 = __dst;
  v6 = a2;
  v7 = __src;
  v8 = (char *)a2 - (char *)__src;
  v9 = (char *)a2 - (char *)__src + 7;
  if ((char *)a2 - (char *)__src >= 0)
    v9 = (char *)a2 - (char *)__src;
  v10 = v9 >> 3;
  v11 = a3 - (_QWORD)a2;
  v12 = a3 - (_QWORD)a2 + 7;
  if ((uint64_t)(a3 - (_QWORD)a2) >= 0)
    v12 = a3 - (_QWORD)a2;
  v13 = v12 >> 3;
  v24 = __src;
  v23 = __dst;
  if (v10 >= v12 >> 3)
  {
    if (v11 >= -7)
    {
      if (__dst != a2 || &a2[v13] <= __dst)
        memmove(__dst, a2, 8 * v13);
      v16 = &v4[v13];
      v22 = v16;
      v24 = v6;
      if (v7 < v6 && v11 >= 8)
      {
        v17 = (double *)(a3 - 8);
        while (1)
        {
          v18 = v17 + 1;
          v19 = v6 - 1;
          v20 = *(v6 - 1);
          if (*(v16 - 1) >= v20)
          {
            v22 = v16 - 1;
            if (v18 < v16 || v17 >= v16 || v18 != v16)
              *v17 = *(v16 - 1);
            --v16;
            if (v6 <= v7)
              goto LABEL_42;
          }
          else
          {
            if (v18 != v6 || v17 >= v6)
              *v17 = v20;
            v24 = --v6;
            if (v19 <= v7)
              goto LABEL_42;
          }
          --v17;
          if (v16 <= v4)
            goto LABEL_42;
        }
      }
      goto LABEL_42;
    }
  }
  else if (v8 >= -7)
  {
    if (__dst != __src || &__src[v10] <= __dst)
      memmove(__dst, __src, 8 * v10);
    v14 = &v4[v10];
    v22 = v14;
    if ((unint64_t)v6 < a3 && v8 >= 8)
    {
      do
      {
        if (*v6 >= *v4)
        {
          if (v7 != v4)
            *v7 = *v4;
          v23 = ++v4;
          v15 = v6;
        }
        else
        {
          v15 = v6 + 1;
          if (v7 < v6 || v7 >= v15 || v7 != v6)
            *v7 = *v6;
        }
        ++v7;
        if (v4 >= v14)
          break;
        v6 = v15;
      }
      while ((unint64_t)v15 < a3);
      v24 = v7;
    }
LABEL_42:
    sub_1CA13B328((void **)&v24, (const void **)&v23, &v22);
    return 1;
  }
  result = sub_1CA1F1270();
  __break(1u);
  return result;
}

uint64_t sub_1CA13AA4C(double *__src, double *a2, unint64_t a3, double *__dst, uint64_t (*a5)(double *, double, double))
{
  uint64_t v5;
  double *v6;
  double *v7;
  double *v8;
  int64_t v9;
  int64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  double *v15;
  double *v16;
  double *v17;
  double *v18;
  double *v19;
  double v20;
  double *v21;
  uint64_t result;
  double *v25;
  double *v26;
  double *v27;

  v6 = __dst;
  v7 = a2;
  v8 = __src;
  v9 = (char *)a2 - (char *)__src;
  v10 = (char *)a2 - (char *)__src + 7;
  if ((char *)a2 - (char *)__src >= 0)
    v10 = (char *)a2 - (char *)__src;
  v11 = v10 >> 3;
  v12 = a3 - (_QWORD)a2;
  v13 = a3 - (_QWORD)a2 + 7;
  if ((uint64_t)(a3 - (_QWORD)a2) >= 0)
    v13 = a3 - (_QWORD)a2;
  v14 = v13 >> 3;
  v27 = __src;
  v26 = __dst;
  if (v11 >= v13 >> 3)
  {
    if (v12 >= -7)
    {
      if (__dst != a2 || &a2[v14] <= __dst)
        __src = (double *)memmove(__dst, a2, 8 * v14);
      v17 = &v6[v14];
      v25 = v17;
      v27 = v7;
      if (v8 < v7 && v12 >= 8)
      {
        v18 = (double *)(a3 - 8);
        v19 = v7;
        while (1)
        {
          v20 = *--v19;
          __src = (double *)a5(__src, *(v17 - 1), v20);
          if (v5)
            break;
          v21 = v18 + 1;
          if ((__src & 1) != 0)
          {
            if (v21 != v7 || v18 >= v7)
              *v18 = *v19;
            v27 = v19;
            if (v19 <= v8)
              goto LABEL_44;
          }
          else
          {
            v25 = v17 - 1;
            if (v21 < v17 || v18 >= v17 || v21 != v17)
              *v18 = *(v17 - 1);
            v19 = v7;
            --v17;
            if (v7 <= v8)
              goto LABEL_44;
          }
          --v18;
          v7 = v19;
          if (v17 <= v6)
            goto LABEL_44;
        }
      }
      goto LABEL_44;
    }
  }
  else if (v9 >= -7)
  {
    if (__dst != __src || &__src[v11] <= __dst)
      __src = (double *)memmove(__dst, __src, 8 * v11);
    v15 = &v6[v11];
    v25 = v15;
    if ((unint64_t)v7 < a3 && v9 >= 8)
    {
      do
      {
        __src = (double *)a5(__src, *v7, *v6);
        if (v5)
          break;
        if ((__src & 1) != 0)
        {
          v16 = v7 + 1;
          if (v8 < v7 || v8 >= v16 || v8 != v7)
            *v8 = *v7;
        }
        else
        {
          if (v8 != v6)
            *v8 = *v6;
          v26 = ++v6;
          v16 = v7;
        }
        v27 = ++v8;
        if (v6 >= v15)
          break;
        v7 = v16;
      }
      while ((unint64_t)v16 < a3);
    }
LABEL_44:
    sub_1CA13B328((void **)&v27, (const void **)&v26, &v25);
    return 1;
  }
  result = sub_1CA1F1270();
  __break(1u);
  return result;
}

uint64_t sub_1CA13ACF0(double *__src, double *a2, unint64_t a3, double *__dst)
{
  double *v4;
  double *v6;
  double *v7;
  int64_t v8;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  double *v14;
  double *v15;
  double *v16;
  double *v17;
  double *v18;
  double *v19;
  double *v20;
  double *v21;
  uint64_t result;
  char *v23;
  double *v24;
  double *v25;

  v4 = __dst;
  v6 = a2;
  v7 = __src;
  v8 = (char *)a2 - (char *)__src;
  v9 = (char *)a2 - (char *)__src + 15;
  if ((char *)a2 - (char *)__src >= 0)
    v9 = (char *)a2 - (char *)__src;
  v10 = v9 >> 4;
  v11 = a3 - (_QWORD)a2;
  v12 = a3 - (_QWORD)a2 + 15;
  if ((uint64_t)(a3 - (_QWORD)a2) >= 0)
    v12 = a3 - (_QWORD)a2;
  v13 = v12 >> 4;
  v25 = __src;
  v24 = __dst;
  if (v10 >= v12 >> 4)
  {
    if (v11 >= -15)
    {
      if (__dst != a2 || &a2[2 * v13] <= __dst)
        memmove(__dst, a2, 16 * v13);
      v18 = &v4[2 * v13];
      v23 = (char *)v18;
      v25 = v6;
      if (v7 < v6 && v11 >= 16)
      {
        v19 = (double *)(a3 - 16);
        do
        {
          v20 = v19 + 2;
          if (*(v18 - 1) >= *(v6 - 1))
          {
            v23 = (char *)(v18 - 2);
            if (v20 < v18 || v19 >= v18 || v20 != v18)
              *(_OWORD *)v19 = *((_OWORD *)v18 - 1);
            v21 = v6;
            v18 -= 2;
            if (v6 <= v7)
              break;
          }
          else
          {
            v21 = v6 - 2;
            if (v20 != v6 || v19 >= v6)
              *(_OWORD *)v19 = *(_OWORD *)v21;
            v25 = v6 - 2;
            if (v21 <= v7)
              break;
          }
          v19 -= 2;
          v6 = v21;
        }
        while (v18 > v4);
      }
LABEL_44:
      sub_1CA13B3D0((void **)&v25, (const void **)&v24, &v23);
      return 1;
    }
  }
  else if (v8 >= -15)
  {
    if (__dst != __src || &__src[2 * v10] <= __dst)
      memmove(__dst, __src, 16 * v10);
    v14 = &v4[2 * v10];
    v23 = (char *)v14;
    if ((unint64_t)v6 < a3 && v8 >= 16)
    {
      v15 = v4;
      while (1)
      {
        if (v6[1] >= v15[1])
        {
          v4 = v15 + 2;
          v17 = v15;
          v16 = v6;
          if (v7 == v15)
          {
            v15 += 2;
            if (v7 < v4)
              goto LABEL_22;
          }
          else
          {
            v15 += 2;
          }
        }
        else
        {
          v16 = v6 + 2;
          v17 = v6;
          if (v7 == v6 && v7 < v16)
            goto LABEL_22;
        }
        *(_OWORD *)v7 = *(_OWORD *)v17;
LABEL_22:
        v7 += 2;
        if (v15 < v14)
        {
          v6 = v16;
          if ((unint64_t)v16 < a3)
            continue;
        }
        v24 = v4;
        v25 = v7;
        goto LABEL_44;
      }
    }
    goto LABEL_44;
  }
  result = sub_1CA1F1270();
  __break(1u);
  return result;
}

uint64_t sub_1CA13AF78(double *__src, double *a2, unint64_t a3, double *__dst)
{
  double *v4;
  double *v6;
  double *v7;
  int64_t v8;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  double *v14;
  uint64_t v15;
  uint64_t v16;
  _BOOL4 v17;
  double *v18;
  double *v19;
  double *v20;
  double *v21;
  double *v22;
  uint64_t v23;
  double v24;
  uint64_t v25;
  _BOOL4 v26;
  _BOOL4 v27;
  uint64_t result;
  char *v29;
  double *v30;
  double *v31;

  v4 = __dst;
  v6 = a2;
  v7 = __src;
  v8 = (char *)a2 - (char *)__src;
  v9 = (char *)a2 - (char *)__src + 15;
  if ((char *)a2 - (char *)__src >= 0)
    v9 = (char *)a2 - (char *)__src;
  v10 = v9 >> 4;
  v11 = a3 - (_QWORD)a2;
  v12 = a3 - (_QWORD)a2 + 15;
  if ((uint64_t)(a3 - (_QWORD)a2) >= 0)
    v12 = a3 - (_QWORD)a2;
  v13 = v12 >> 4;
  v31 = __src;
  v30 = __dst;
  if (v10 >= v12 >> 4)
  {
    if (v11 >= -15)
    {
      if (__dst != a2 || &a2[2 * v13] <= __dst)
        memmove(__dst, a2, 16 * v13);
      v19 = &v4[2 * v13];
      v29 = (char *)v19;
      v31 = v6;
      if (v7 < v6 && v11 >= 16)
      {
        v20 = (double *)(a3 - 16);
        v21 = v6;
        while (1)
        {
          v22 = v20 + 2;
          v23 = *((_QWORD *)v19 - 1);
          v24 = *(v21 - 2);
          v21 -= 2;
          v25 = *((_QWORD *)v21 + 1);
          v26 = *(v19 - 2) < v24;
          if (v23 == v25)
            v27 = v26;
          else
            v27 = v25 < v23;
          if (v27)
          {
            if (v22 != v6 || v20 >= v6)
              *(_OWORD *)v20 = *(_OWORD *)v21;
            v31 = v21;
            if (v21 <= v7)
              goto LABEL_48;
          }
          else
          {
            v29 = (char *)(v19 - 2);
            if (v22 < v19 || v20 >= v19 || v22 != v19)
              *(_OWORD *)v20 = *((_OWORD *)v19 - 1);
            v21 = v6;
            v19 -= 2;
            if (v6 <= v7)
              goto LABEL_48;
          }
          v20 -= 2;
          v6 = v21;
          if (v19 <= v4)
            goto LABEL_48;
        }
      }
      goto LABEL_48;
    }
  }
  else if (v8 >= -15)
  {
    if (__dst != __src || &__src[2 * v10] <= __dst)
      memmove(__dst, __src, 16 * v10);
    v14 = &v4[2 * v10];
    v29 = (char *)v14;
    if ((unint64_t)v6 < a3 && v8 >= 16)
    {
      do
      {
        v15 = *((_QWORD *)v6 + 1);
        v16 = *((_QWORD *)v4 + 1);
        if (v15 == v16)
          v17 = *v6 < *v4;
        else
          v17 = v16 < v15;
        if (v17)
        {
          v18 = v6 + 2;
          if (v7 < v6 || v7 >= v18 || v7 != v6)
            *(_OWORD *)v7 = *(_OWORD *)v6;
        }
        else
        {
          if (v7 != v4)
            *(_OWORD *)v7 = *(_OWORD *)v4;
          v4 += 2;
          v30 = v4;
          v18 = v6;
        }
        v7 += 2;
        if (v4 >= v14)
          break;
        v6 = v18;
      }
      while ((unint64_t)v18 < a3);
      v31 = v7;
    }
LABEL_48:
    sub_1CA13B3D0((void **)&v31, (const void **)&v30, &v29);
    return 1;
  }
  result = sub_1CA1F1270();
  __break(1u);
  return result;
}

char *sub_1CA13B230(char *result, int64_t a2, char a3, char *a4)
{
  char v5;
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  int64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;

  v5 = (char)result;
  if ((a3 & 1) != 0)
  {
    v6 = *((_QWORD *)a4 + 3);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *((_QWORD *)a4 + 2);
  if (v7 <= v8)
    v9 = *((_QWORD *)a4 + 2);
  else
    v9 = v7;
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName(&qword_1EF93A2F8);
    v10 = (char *)swift_allocObject();
    v11 = _swift_stdlib_malloc_size(v10);
    v12 = v11 - 32;
    if (v11 < 32)
      v12 = v11 - 17;
    *((_QWORD *)v10 + 2) = v8;
    *((_QWORD *)v10 + 3) = 2 * (v12 >> 4);
  }
  else
  {
    v10 = (char *)MEMORY[0x1E0DEE9D8];
  }
  v13 = v10 + 32;
  v14 = a4 + 32;
  if ((v5 & 1) != 0)
  {
    if (v10 != a4 || v13 >= &v14[16 * v8])
      memmove(v13, v14, 16 * v8);
    *((_QWORD *)a4 + 2) = 0;
  }
  else
  {
    memcpy(v13, v14, 16 * v8);
  }
  swift_bridgeObjectRelease();
  return v10;
}

char *sub_1CA13B328(void **a1, const void **a2, _QWORD *a3)
{
  char *v3;
  uint64_t v4;
  uint64_t v5;
  char *result;
  uint64_t v7;

  v3 = (char *)*a2;
  v4 = *a3 - (_QWORD)v3;
  v5 = v4 + 7;
  if (v4 >= 0)
    v5 = *a3 - (_QWORD)v3;
  if (v4 <= -8)
  {
    result = (char *)sub_1CA1F1270();
    __break(1u);
  }
  else
  {
    result = (char *)*a1;
    v7 = v5 >> 3;
    if (result != v3 || result >= &v3[8 * v7])
      return (char *)memmove(result, v3, 8 * v7);
  }
  return result;
}

char *sub_1CA13B3D0(void **a1, const void **a2, _QWORD *a3)
{
  char *v3;
  uint64_t v4;
  uint64_t v5;
  char *result;
  uint64_t v7;

  v3 = (char *)*a2;
  v4 = *a3 - (_QWORD)v3;
  v5 = v4 + 15;
  if (v4 >= 0)
    v5 = *a3 - (_QWORD)v3;
  if (v4 <= -16)
  {
    result = (char *)sub_1CA1F1270();
    __break(1u);
  }
  else
  {
    result = (char *)*a1;
    v7 = v5 >> 4;
    if (result != v3 || result >= &v3[16 * v7])
      return (char *)memmove(result, v3, 16 * v7);
  }
  return result;
}

char *sub_1CA13B478(uint64_t a1)
{
  return sub_1CA13B230(0, *(_QWORD *)(a1 + 16), 0, (char *)a1);
}

uint64_t sub_1CA13B48C(uint64_t a1)
{
  return sub_1CA0CDD48(0, *(_QWORD *)(a1 + 16), 0, (char *)a1);
}

uint64_t sub_1CA13B4A0(uint64_t a1)
{
  return sub_1CA0CDA90(0, *(_QWORD *)(a1 + 16), 0, (char *)a1);
}

uint64_t sub_1CA13B4B4(_QWORD *a1)
{
  return sub_1CA0CE338(0, a1[2], 0, a1);
}

void sub_1CA13B4C8()
{
  JUMPOUT(0x1CAA4A99CLL);
}

uint64_t sub_1CA13B4DC(_QWORD *a1)
{
  return sub_1CA0CE98C(0, a1[2], 0, a1);
}

uint64_t sub_1CA13B4F0(uint64_t a1)
{
  return sub_1CA0CDBEC(0, *(_QWORD *)(a1 + 16), 0, (char *)a1);
}

uint64_t sub_1CA13B504(uint64_t a1)
{
  return sub_1CA0CEB14(0, *(_QWORD *)(a1 + 16), 0, (char *)a1);
}

uint64_t sub_1CA13B518(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  int64_t v5;
  uint64_t result;
  unint64_t *v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;

  v5 = *(_QWORD *)(a1 + 16);
  result = MEMORY[0x1E0DEE9D8];
  if (v5)
  {
    v15 = MEMORY[0x1E0DEE9D8];
    sub_1CA0CD56C(0, v5, 0);
    result = v15;
    v8 = (unint64_t *)(a1 + 32);
    v9 = *(_QWORD *)(a4 + 16);
    while (1)
    {
      v11 = *v8++;
      v10 = v11;
      if (v11 >= v9)
        break;
      v12 = *(_QWORD *)(a4 + 32 + 8 * v10);
      v16 = result;
      v14 = *(_QWORD *)(result + 16);
      v13 = *(_QWORD *)(result + 24);
      if (v14 >= v13 >> 1)
      {
        sub_1CA0CD56C(v13 > 1, v14 + 1, 1);
        result = v16;
      }
      *(_QWORD *)(result + 16) = v14 + 1;
      *(_QWORD *)(result + 8 * v14 + 32) = v12;
      if (!--v5)
        return result;
    }
    __break(1u);
  }
  return result;
}

uint64_t sub_1CA13B5F8(uint64_t result, uint64_t (*a2)(unint64_t, double))
{
  uint64_t v2;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  double v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;

  v4 = result;
  v5 = 0;
  v6 = *(_QWORD *)(result + 16);
  v7 = MEMORY[0x1E0DEE9D8];
  while (1)
  {
    if (v6 == v5)
      goto LABEL_12;
    if (v5 >= *(_QWORD *)(v4 + 16))
      break;
    v8 = *(double *)(v4 + 8 * v5 + 32);
    result = a2(v5, v8);
    if (v2)
    {
      swift_release();
LABEL_12:
      swift_bridgeObjectRelease();
      return v7;
    }
    ++v5;
    if ((result & 1) != 0)
    {
      result = swift_isUniquelyReferenced_nonNull_native();
      if ((result & 1) == 0)
        result = sub_1CA0CD550(0, *(_QWORD *)(v7 + 16) + 1, 1);
      v10 = *(_QWORD *)(v7 + 16);
      v9 = *(_QWORD *)(v7 + 24);
      v11 = v10 + 1;
      if (v10 >= v9 >> 1)
      {
        result = sub_1CA0CD550(v9 > 1, v10 + 1, 1);
        v11 = v10 + 1;
      }
      *(_QWORD *)(v7 + 16) = v11;
      v12 = v7 + 16 * v10;
      *(_QWORD *)(v12 + 32) = v5 - 1;
      *(double *)(v12 + 40) = v8;
    }
  }
  __break(1u);
  return result;
}

uint64_t sub_1CA13B738(uint64_t *a1, uint64_t (*a2)(__n128, double))
{
  uint64_t v2;
  uint64_t v4;
  uint64_t result;
  __n128 v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  int v15;
  double *v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  char *v26;
  char *v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  char v32;
  char *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  BOOL v39;
  unint64_t v40;
  char *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  char *v46;
  uint64_t v47;
  uint64_t v48;
  BOOL v49;
  uint64_t v50;
  char v51;
  char *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  BOOL v56;
  uint64_t v57;
  uint64_t v58;
  char *v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  char *v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  char *v67;
  unint64_t v68;
  char *v69;
  uint64_t v70;
  char *v71;
  uint64_t v72;
  unint64_t v73;
  char *v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  char v78;
  char *v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  char *v88;
  uint64_t v89;
  unint64_t v90;
  char *v91;
  uint64_t v92;
  uint64_t v93;
  char *v94;
  unint64_t v95;
  uint64_t v96;
  uint64_t *v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  double *__dst;
  uint64_t v104;
  uint64_t v105;

  v4 = a1[1];
  result = sub_1CA1F12A0();
  if (result >= v4)
  {
    if (v4 < 0)
      goto LABEL_145;
    if ((unint64_t)v4 >= 2)
    {
      v80 = v4;
      v81 = *a1;
      v82 = -1;
      v83 = 1;
      v84 = v81;
LABEL_99:
      v6.n128_u64[0] = *(_QWORD *)(v81 + 8 * v83);
      v85 = v82;
      v86 = v84;
      while (1)
      {
        result = a2(v6, *(double *)v86);
        if (v2)
          break;
        if ((result & 1) != 0)
        {
          if (!v81)
            goto LABEL_150;
          v6.n128_u64[0] = *(_QWORD *)(v86 + 8);
          *(_QWORD *)(v86 + 8) = *(_QWORD *)v86;
          *(_QWORD *)v86 = v6.n128_u64[0];
          v86 -= 8;
          if (!__CFADD__(v85++, 1))
            continue;
        }
        ++v83;
        v84 += 8;
        --v82;
        if (v83 != v80)
          goto LABEL_99;
        return result;
      }
    }
    return result;
  }
  if (v4 >= 0)
    v7 = v4;
  else
    v7 = v4 + 1;
  if (v4 < -1)
    goto LABEL_155;
  v100 = result;
  v97 = a1;
  if (v4 < 2)
  {
    v10 = (char *)MEMORY[0x1E0DEE9D8];
    __dst = (double *)(MEMORY[0x1E0DEE9D8] + 32);
    v101 = MEMORY[0x1E0DEE9D8];
    if (v4 != 1)
    {
      v25 = *(_QWORD *)(MEMORY[0x1E0DEE9D8] + 16);
LABEL_109:
      v105 = v2;
      v88 = v10;
      if (v25 >= 2)
      {
        v89 = *v97;
        do
        {
          v90 = v25 - 2;
          if (v25 < 2)
            goto LABEL_140;
          if (!v89)
            goto LABEL_154;
          v91 = v88;
          v92 = *(_QWORD *)&v88[16 * v90 + 32];
          v93 = *(_QWORD *)&v88[16 * v25 + 24];
          sub_1CA13AA4C((double *)(v89 + 8 * v92), (double *)(v89 + 8 * *(_QWORD *)&v88[16 * v25 + 16]), v89 + 8 * v93, __dst, (uint64_t (*)(double *, double, double))a2);
          if (v105)
            goto LABEL_123;
          if (v93 < v92)
            goto LABEL_141;
          v105 = 0;
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
            v91 = sub_1CA13B478((uint64_t)v91);
          if (v90 >= *((_QWORD *)v91 + 2))
            goto LABEL_142;
          v94 = &v91[16 * v90 + 32];
          *(_QWORD *)v94 = v92;
          *((_QWORD *)v94 + 1) = v93;
          v95 = *((_QWORD *)v91 + 2);
          if (v25 > v95)
            goto LABEL_143;
          memmove(&v91[16 * v25 + 16], &v91[16 * v25 + 32], 16 * (v95 - v25));
          v88 = v91;
          *((_QWORD *)v91 + 2) = v95 - 1;
          v25 = v95 - 1;
        }
        while (v95 > 2);
      }
      swift_bridgeObjectRelease();
      *(_QWORD *)(v101 + 16) = 0;
      return swift_bridgeObjectRelease();
    }
  }
  else
  {
    v8 = v7 >> 1;
    v9 = sub_1CA1F0B68();
    *(_QWORD *)(v9 + 16) = v8;
    v101 = v9;
    __dst = (double *)(v9 + 32);
  }
  v11 = 0;
  v12 = *a1;
  v98 = *a1 + 16;
  v96 = *a1 - 8;
  v10 = (char *)MEMORY[0x1E0DEE9D8];
  v104 = *a1;
  v99 = v4;
  while (1)
  {
    v13 = v11 + 1;
    if (v11 + 1 < v4)
    {
      v14 = ((uint64_t (*)(double, double))a2)(*(double *)(v12 + 8 * v13), *(double *)(v12 + 8 * v11));
      if (v2)
      {
LABEL_123:
        swift_bridgeObjectRelease();
        *(_QWORD *)(v101 + 16) = 0;
        return swift_bridgeObjectRelease();
      }
      v15 = v14;
      v13 = v11 + 2;
      if (v11 + 2 < v4)
      {
        v16 = (double *)(v98 + 8 * v11);
        while (((v15 ^ ((unsigned int (*)(double, double))a2)(*v16, *(v16 - 1))) & 1) == 0)
        {
          ++v13;
          ++v16;
          if (v4 == v13)
          {
            v13 = v4;
            break;
          }
        }
      }
      v12 = v104;
      if ((v15 & 1) != 0)
      {
        if (v13 < v11)
          goto LABEL_149;
        if (v11 < v13)
        {
          v17 = (uint64_t *)(v96 + 8 * v13);
          v18 = v13;
          v19 = v11;
          v20 = (uint64_t *)(v104 + 8 * v11);
          do
          {
            if (v19 != --v18)
            {
              if (!v104)
                goto LABEL_153;
              v21 = *v20;
              *v20 = *v17;
              *v17 = v21;
            }
            ++v19;
            --v17;
            ++v20;
          }
          while (v19 < v18);
        }
      }
    }
    if (v13 >= v4)
      goto LABEL_37;
    if (__OFSUB__(v13, v11))
      goto LABEL_146;
    if (v13 - v11 >= v100)
      goto LABEL_37;
    if (__OFADD__(v11, v100))
      goto LABEL_147;
    v22 = v11 + v100 >= v4 ? v4 : v11 + v100;
    if (v22 < v11)
      break;
    if (v13 != v22)
    {
      v74 = v10;
      v75 = v96 + 8 * v13;
      do
      {
        v6.n128_u64[0] = *(_QWORD *)(v12 + 8 * v13);
        v76 = v11;
        v77 = v75;
        while (1)
        {
          v78 = a2(v6, *(double *)v77);
          if (v2)
            goto LABEL_123;
          if ((v78 & 1) == 0)
            break;
          v12 = v104;
          if (!v104)
            goto LABEL_152;
          v6.n128_u64[0] = *(_QWORD *)(v77 + 8);
          *(_QWORD *)(v77 + 8) = *(_QWORD *)v77;
          *(_QWORD *)v77 = v6.n128_u64[0];
          v77 -= 8;
          if (v13 == ++v76)
            goto LABEL_95;
        }
        v12 = v104;
LABEL_95:
        ++v13;
        v75 += 8;
      }
      while (v13 != v22);
      v13 = v22;
      v10 = v74;
      if (v22 < v11)
        goto LABEL_144;
      goto LABEL_38;
    }
LABEL_37:
    if (v13 < v11)
      goto LABEL_144;
LABEL_38:
    v102 = v13;
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      v10 = sub_1CA13B230(0, *((_QWORD *)v10 + 2) + 1, 1, v10);
    v24 = *((_QWORD *)v10 + 2);
    v23 = *((_QWORD *)v10 + 3);
    v25 = v24 + 1;
    v12 = v104;
    if (v24 >= v23 >> 1)
    {
      v79 = sub_1CA13B230((char *)(v23 > 1), v24 + 1, 1, v10);
      v12 = v104;
      v10 = v79;
    }
    *((_QWORD *)v10 + 2) = v25;
    v26 = v10 + 32;
    v27 = &v10[16 * v24 + 32];
    *(_QWORD *)v27 = v11;
    v11 = v13;
    *((_QWORD *)v27 + 1) = v13;
    if (v24)
    {
      while (1)
      {
        v28 = v25 - 1;
        if (v25 >= 4)
        {
          v33 = &v26[16 * v25];
          v34 = *((_QWORD *)v33 - 8);
          v35 = *((_QWORD *)v33 - 7);
          v39 = __OFSUB__(v35, v34);
          v36 = v35 - v34;
          if (v39)
            goto LABEL_129;
          v38 = *((_QWORD *)v33 - 6);
          v37 = *((_QWORD *)v33 - 5);
          v39 = __OFSUB__(v37, v38);
          v31 = v37 - v38;
          v32 = v39;
          if (v39)
            goto LABEL_130;
          v40 = v25 - 2;
          v41 = &v26[16 * v25 - 32];
          v43 = *(_QWORD *)v41;
          v42 = *((_QWORD *)v41 + 1);
          v39 = __OFSUB__(v42, v43);
          v44 = v42 - v43;
          if (v39)
            goto LABEL_132;
          v39 = __OFADD__(v31, v44);
          v45 = v31 + v44;
          if (v39)
            goto LABEL_135;
          if (v45 >= v36)
          {
            v63 = &v26[16 * v28];
            v65 = *(_QWORD *)v63;
            v64 = *((_QWORD *)v63 + 1);
            v39 = __OFSUB__(v64, v65);
            v66 = v64 - v65;
            if (v39)
              goto LABEL_139;
            v56 = v31 < v66;
            goto LABEL_74;
          }
        }
        else
        {
          if (v25 != 3)
          {
            v57 = *((_QWORD *)v10 + 4);
            v58 = *((_QWORD *)v10 + 5);
            v39 = __OFSUB__(v58, v57);
            v50 = v58 - v57;
            v51 = v39;
            goto LABEL_68;
          }
          v30 = *((_QWORD *)v10 + 4);
          v29 = *((_QWORD *)v10 + 5);
          v39 = __OFSUB__(v29, v30);
          v31 = v29 - v30;
          v32 = v39;
        }
        if ((v32 & 1) != 0)
          goto LABEL_131;
        v40 = v25 - 2;
        v46 = &v26[16 * v25 - 32];
        v48 = *(_QWORD *)v46;
        v47 = *((_QWORD *)v46 + 1);
        v49 = __OFSUB__(v47, v48);
        v50 = v47 - v48;
        v51 = v49;
        if (v49)
          goto LABEL_134;
        v52 = &v26[16 * v28];
        v54 = *(_QWORD *)v52;
        v53 = *((_QWORD *)v52 + 1);
        v39 = __OFSUB__(v53, v54);
        v55 = v53 - v54;
        if (v39)
          goto LABEL_137;
        if (__OFADD__(v50, v55))
          goto LABEL_138;
        if (v50 + v55 >= v31)
        {
          v56 = v31 < v55;
LABEL_74:
          if (v56)
            v28 = v40;
          goto LABEL_76;
        }
LABEL_68:
        if ((v51 & 1) != 0)
          goto LABEL_133;
        v59 = &v26[16 * v28];
        v61 = *(_QWORD *)v59;
        v60 = *((_QWORD *)v59 + 1);
        v39 = __OFSUB__(v60, v61);
        v62 = v60 - v61;
        if (v39)
          goto LABEL_136;
        if (v62 < v50)
          goto LABEL_85;
LABEL_76:
        v67 = v10;
        v68 = v28 - 1;
        if (v28 - 1 >= v25)
        {
          __break(1u);
LABEL_126:
          __break(1u);
LABEL_127:
          __break(1u);
LABEL_128:
          __break(1u);
LABEL_129:
          __break(1u);
LABEL_130:
          __break(1u);
LABEL_131:
          __break(1u);
LABEL_132:
          __break(1u);
LABEL_133:
          __break(1u);
LABEL_134:
          __break(1u);
LABEL_135:
          __break(1u);
LABEL_136:
          __break(1u);
LABEL_137:
          __break(1u);
LABEL_138:
          __break(1u);
LABEL_139:
          __break(1u);
LABEL_140:
          __break(1u);
LABEL_141:
          __break(1u);
LABEL_142:
          __break(1u);
LABEL_143:
          __break(1u);
LABEL_144:
          __break(1u);
LABEL_145:
          __break(1u);
LABEL_146:
          __break(1u);
LABEL_147:
          __break(1u);
          goto LABEL_148;
        }
        if (!v12)
          goto LABEL_151;
        v69 = &v26[16 * v68];
        v70 = *(_QWORD *)v69;
        v71 = &v26[16 * v28];
        v72 = *((_QWORD *)v71 + 1);
        sub_1CA13AA4C((double *)(v12 + 8 * *(_QWORD *)v69), (double *)(v12 + 8 * *(_QWORD *)v71), v12 + 8 * v72, __dst, (uint64_t (*)(double *, double, double))a2);
        if (v2)
          goto LABEL_123;
        if (v72 < v70)
          goto LABEL_126;
        if (v28 > *((_QWORD *)v67 + 2))
          goto LABEL_127;
        *(_QWORD *)v69 = v70;
        *(_QWORD *)&v26[16 * v68 + 8] = v72;
        v73 = *((_QWORD *)v67 + 2);
        if (v28 >= v73)
          goto LABEL_128;
        v10 = v67;
        v25 = v73 - 1;
        memmove(&v26[16 * v28], v71 + 16, 16 * (v73 - 1 - v28));
        *((_QWORD *)v67 + 2) = v73 - 1;
        v12 = v104;
        v11 = v102;
        if (v73 <= 2)
          goto LABEL_85;
      }
    }
    v25 = 1;
LABEL_85:
    v4 = v99;
    if (v11 >= v99)
      goto LABEL_109;
  }
LABEL_148:
  __break(1u);
LABEL_149:
  __break(1u);
LABEL_150:
  __break(1u);
LABEL_151:
  __break(1u);
LABEL_152:
  __break(1u);
LABEL_153:
  __break(1u);
LABEL_154:
  __break(1u);
LABEL_155:
  result = sub_1CA1F11BC();
  __break(1u);
  return result;
}

uint64_t sub_1CA13BE74(uint64_t *a1, uint64_t (*a2)(__n128, double))
{
  uint64_t v4;
  uint64_t v5;
  uint64_t result;
  uint64_t v7[2];

  v4 = *a1;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    v4 = sub_1CA13B48C(v4);
  v5 = *(_QWORD *)(v4 + 16);
  v7[0] = v4 + 32;
  v7[1] = v5;
  result = sub_1CA13B738(v7, a2);
  *a1 = v4;
  return result;
}

uint64_t sub_1CA13BEF4(char *__src, char *a2, unint64_t a3, char *__dst, uint64_t a5, uint64_t a6, uint64_t a7)
{
  unint64_t *v8;
  char *v10;
  char *v11;
  int64_t v12;
  int64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t *v18;
  unint64_t v19;
  uint64_t v20;
  unint64_t v21;
  char *v22;
  unint64_t *v23;
  unint64_t v24;
  unint64_t *v25;
  unint64_t v26;
  char *v27;
  unint64_t v28;
  char *v29;
  uint64_t result;
  unint64_t *v31;
  unint64_t *v32;
  char *v33;

  v8 = (unint64_t *)__dst;
  v10 = a2;
  v11 = __src;
  v12 = a2 - __src;
  v13 = a2 - __src + 7;
  if (a2 - __src >= 0)
    v13 = a2 - __src;
  v14 = v13 >> 3;
  v15 = a3 - (_QWORD)a2;
  v16 = a3 - (_QWORD)a2 + 7;
  if ((uint64_t)(a3 - (_QWORD)a2) >= 0)
    v16 = a3 - (_QWORD)a2;
  v17 = v16 >> 3;
  v33 = __src;
  v32 = (unint64_t *)__dst;
  if (v14 >= v16 >> 3)
  {
    if (v15 >= -7)
    {
      if (__dst != a2 || &a2[8 * v17] <= __dst)
        memmove(__dst, a2, 8 * v17);
      v23 = &v8[v17];
      v31 = v23;
      v33 = v10;
      if (v11 < v10 && v15 >= 8)
      {
        v24 = *(_QWORD *)(a7 + 16);
        v25 = (unint64_t *)(a3 - 8);
        while (1)
        {
          v26 = *(v23 - 1);
          if (v26 >= v24)
            break;
          v27 = v10 - 8;
          v28 = *((_QWORD *)v10 - 1);
          if (v28 >= v24)
            goto LABEL_49;
          v29 = (char *)(v25 + 1);
          if (*(double *)(a7 + 32 + 8 * v26) >= *(double *)(a7 + 32 + 8 * v28))
          {
            v31 = v23 - 1;
            if (v29 < (char *)v23 || v25 >= v23 || v29 != (char *)v23)
              *v25 = *(v23 - 1);
            --v23;
            if (v10 <= v11)
              goto LABEL_47;
          }
          else
          {
            if (v29 != v10 || v25 >= (unint64_t *)v10)
              *v25 = v28;
            v33 = v10 - 8;
            v10 -= 8;
            if (v27 <= v11)
              goto LABEL_47;
          }
          --v25;
          if (v23 <= v8)
            goto LABEL_47;
        }
        __break(1u);
LABEL_49:
        __break(1u);
        goto LABEL_50;
      }
LABEL_47:
      sub_1CA13B328((void **)&v33, (const void **)&v32, &v31);
      return 1;
    }
  }
  else if (v12 >= -7)
  {
    if (__dst != __src || &__src[8 * v14] <= __dst)
      memmove(__dst, __src, 8 * v14);
    v18 = &v8[v14];
    v31 = v18;
    if ((unint64_t)v10 < a3 && v12 >= 8)
    {
      v19 = *(_QWORD *)(a7 + 16);
      while (1)
      {
        v20 = *(_QWORD *)v10;
        if (*(_QWORD *)v10 >= v19)
          break;
        v21 = *v8;
        if (*v8 >= v19)
          goto LABEL_51;
        if (*(double *)(a7 + 32 + 8 * v20) >= *(double *)(a7 + 32 + 8 * v21))
        {
          if (v11 != (char *)v8)
            *(_QWORD *)v11 = v21;
          v32 = ++v8;
          v22 = v10;
        }
        else
        {
          v22 = v10 + 8;
          if (v11 < v10 || v11 >= v22 || v11 != v10)
            *(_QWORD *)v11 = v20;
        }
        v11 += 8;
        if (v8 < v18)
        {
          v10 = v22;
          if ((unint64_t)v22 < a3)
            continue;
        }
        v33 = v11;
        goto LABEL_47;
      }
LABEL_50:
      __break(1u);
LABEL_51:
      __break(1u);
      goto LABEL_52;
    }
    goto LABEL_47;
  }
LABEL_52:
  swift_bridgeObjectRelease();
  result = sub_1CA1F1270();
  __break(1u);
  return result;
}

uint64_t sub_1CA13C1BC(uint64_t result, uint64_t a2, uint64_t a3, uint64_t *a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t *v12;
  unint64_t v13;

  if (a3 != a2)
  {
    v7 = *a4;
    v8 = *(_QWORD *)(a7 + 16);
    v9 = *a4 + 8 * a3 - 8;
LABEL_5:
    v10 = *(_QWORD *)(v7 + 8 * a3);
    v11 = result;
    v12 = (unint64_t *)v9;
    while (v10 < v8)
    {
      v13 = *v12;
      if (*v12 >= v8)
        goto LABEL_13;
      if (*(double *)(a7 + 32 + 8 * v10) < *(double *)(a7 + 32 + 8 * v13))
      {
        if (!v7)
          goto LABEL_14;
        *v12 = v10;
        v12[1] = v13;
        --v12;
        if (a3 != ++v11)
          continue;
      }
      ++a3;
      v9 += 8;
      if (a3 == a2)
        return result;
      goto LABEL_5;
    }
    __break(1u);
LABEL_13:
    __break(1u);
LABEL_14:
    __break(1u);
  }
  return result;
}

uint64_t sub_1CA13C244(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  double v20;
  double v21;
  double v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  unint64_t *v29;
  unint64_t v30;
  uint64_t v31;
  unint64_t *v32;
  unint64_t v33;
  unint64_t v34;
  unint64_t v35;
  unint64_t v36;
  char *v37;
  char *v38;
  unint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  char v43;
  char *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  BOOL v50;
  unint64_t v51;
  char *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  char *v57;
  uint64_t v58;
  uint64_t v59;
  BOOL v60;
  uint64_t v61;
  char v62;
  char *v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  BOOL v67;
  uint64_t v68;
  uint64_t v69;
  char *v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  char *v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  unint64_t v78;
  char *v79;
  uint64_t v80;
  unint64_t v81;
  char *v82;
  uint64_t v83;
  char *v84;
  unint64_t v85;
  unint64_t v86;
  char *v87;
  uint64_t v88;
  uint64_t v89;
  char *v90;
  uint64_t v91;
  uint64_t v92;
  char *v93;
  char *v94;
  unint64_t v95;
  char *v96;
  unint64_t v97;
  uint64_t result;
  uint64_t v99;
  uint64_t *v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  char *v106;
  uint64_t v107;
  char *v108;
  uint64_t v109;
  char *v110;
  uint64_t v113;
  char *v114;
  unint64_t v115;
  uint64_t v116;

  v6 = a1[1];
  swift_bridgeObjectRetain_n();
  v7 = sub_1CA1F12A0();
  if (v7 >= v6)
  {
    if (v6 < 0)
      goto LABEL_151;
    if (!v6)
      goto LABEL_121;
    swift_bridgeObjectRetain();
    sub_1CA13C1BC(0, v6, 1, a1, a2, a3, a4);
    if (v116)
      goto LABEL_121;
    goto LABEL_120;
  }
  if (v6 >= 0)
    v8 = v6;
  else
    v8 = v6 + 1;
  if (v6 < -1)
    goto LABEL_159;
  v113 = a4;
  v104 = v6;
  v102 = v7;
  v100 = a1;
  if (v6 < 2)
  {
    v11 = (char *)MEMORY[0x1E0DEE9D8];
    v110 = (char *)(MEMORY[0x1E0DEE9D8] + 32);
    v101 = MEMORY[0x1E0DEE9D8];
    if (v6 == 1)
      goto LABEL_13;
    v36 = *(_QWORD *)(MEMORY[0x1E0DEE9D8] + 16);
LABEL_108:
    if (v36 >= 2)
    {
      v89 = *v100;
      v109 = *v100;
      while (v36 >= 2)
      {
        if (!v89)
          goto LABEL_158;
        v90 = v11;
        v115 = v36 - 2;
        v91 = *(_QWORD *)&v11[16 * v36];
        v92 = *(_QWORD *)&v11[16 * v36 + 24];
        v93 = (char *)(v89 + 8 * v91);
        v94 = (char *)(v89 + 8 * *(_QWORD *)&v11[16 * v36 + 16]);
        v95 = v89 + 8 * v92;
        swift_bridgeObjectRetain();
        sub_1CA13BEF4(v93, v94, v95, v110, a2, a3, v113);
        if (v116)
        {
          v88 = v101;
          goto LABEL_104;
        }
        swift_bridgeObjectRelease();
        if (v92 < v91)
          goto LABEL_143;
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
          v90 = sub_1CA13B478((uint64_t)v90);
        if (v115 >= *((_QWORD *)v90 + 2))
          goto LABEL_144;
        v96 = &v90[16 * v115 + 32];
        *(_QWORD *)v96 = v91;
        *((_QWORD *)v96 + 1) = v92;
        v97 = *((_QWORD *)v90 + 2);
        if (v36 > v97)
          goto LABEL_145;
        memmove(&v90[16 * v36 + 16], &v90[16 * v36 + 32], 16 * (v97 - v36));
        *((_QWORD *)v90 + 2) = v97 - 1;
        v36 = v97 - 1;
        v11 = v90;
        v89 = v109;
        if (v97 <= 2)
          goto LABEL_119;
      }
      goto LABEL_142;
    }
LABEL_119:
    swift_bridgeObjectRelease();
    *(_QWORD *)(v101 + 16) = 0;
LABEL_120:
    swift_bridgeObjectRelease();
    goto LABEL_121;
  }
  v9 = v8 >> 1;
  v10 = sub_1CA1F0B68();
  *(_QWORD *)(v10 + 16) = v9;
  v101 = v10;
  v110 = (char *)(v10 + 32);
LABEL_13:
  v12 = 0;
  v13 = *a1;
  v103 = a4 + 32;
  v99 = *a1 - 8;
  v11 = (char *)MEMORY[0x1E0DEE9D8];
  v14 = v6;
  v107 = *a1;
  while (1)
  {
    v15 = v12;
    v16 = v12 + 1;
    if (v12 + 1 >= v14)
      goto LABEL_34;
    v17 = *(_QWORD *)(v13 + 8 * v16);
    if ((v17 & 0x8000000000000000) != 0)
      goto LABEL_147;
    v18 = *(_QWORD *)(v113 + 16);
    if (v17 >= v18)
      goto LABEL_148;
    v19 = *(_QWORD *)(v13 + 8 * v15);
    if (v19 >= v18)
      goto LABEL_149;
    v20 = *(double *)(v103 + 8 * v17);
    v21 = *(double *)(v103 + 8 * v19);
    v16 = v15 + 2;
    if (v15 + 2 >= v14)
      goto LABEL_25;
    v22 = *(double *)(v103 + 8 * v17);
    do
    {
      v23 = *(_QWORD *)(v13 + 8 * v16);
      if (v23 >= v18)
        goto LABEL_129;
      if (v17 >= v18)
      {
LABEL_130:
        __break(1u);
LABEL_131:
        __break(1u);
LABEL_132:
        __break(1u);
LABEL_133:
        __break(1u);
LABEL_134:
        __break(1u);
LABEL_135:
        __break(1u);
LABEL_136:
        __break(1u);
LABEL_137:
        __break(1u);
LABEL_138:
        __break(1u);
LABEL_139:
        __break(1u);
LABEL_140:
        __break(1u);
LABEL_141:
        __break(1u);
LABEL_142:
        __break(1u);
LABEL_143:
        __break(1u);
LABEL_144:
        __break(1u);
LABEL_145:
        __break(1u);
LABEL_146:
        __break(1u);
LABEL_147:
        __break(1u);
LABEL_148:
        __break(1u);
LABEL_149:
        __break(1u);
        goto LABEL_150;
      }
      if (v20 < v21 == *(double *)(v103 + 8 * v23) >= v22)
        goto LABEL_25;
      ++v16;
      v22 = *(double *)(v103 + 8 * v23);
      v17 = v23;
    }
    while (v14 != v16);
    v16 = v14;
LABEL_25:
    if (v20 < v21)
    {
      if (v16 >= v15)
      {
        if (v15 < v16)
        {
          v24 = v16 - 1;
          v25 = v15;
          while (1)
          {
            if (v25 != v24)
            {
              if (!v13)
                goto LABEL_157;
              v26 = *(_QWORD *)(v13 + 8 * v25);
              *(_QWORD *)(v13 + 8 * v25) = *(_QWORD *)(v13 + 8 * v24);
              *(_QWORD *)(v13 + 8 * v24) = v26;
            }
            v67 = ++v25 < v24--;
            if (!v67)
              goto LABEL_34;
          }
        }
        goto LABEL_34;
      }
LABEL_154:
      __break(1u);
LABEL_155:
      swift_bridgeObjectRelease_n();
      __break(1u);
LABEL_156:
      swift_bridgeObjectRelease_n();
      __break(1u);
LABEL_157:
      swift_bridgeObjectRelease_n();
      __break(1u);
LABEL_158:
      swift_bridgeObjectRelease_n();
      __break(1u);
LABEL_159:
      swift_bridgeObjectRelease_n();
      result = sub_1CA1F11BC();
      __break(1u);
      return result;
    }
LABEL_34:
    if (v16 < v14)
    {
      if (!__OFSUB__(v16, v15))
      {
        if (v16 - v15 >= v102)
          goto LABEL_52;
        v27 = v15 + v102;
        if (!__OFADD__(v15, v102))
        {
          if (v27 >= v14)
            v27 = v14;
          if (v27 >= v15)
          {
            if (v16 != v27)
            {
              v28 = *(_QWORD *)(v113 + 16);
              v29 = (unint64_t *)(v99 + 8 * v16);
              do
              {
                v30 = *(_QWORD *)(v13 + 8 * v16);
                v31 = v15;
                v32 = v29;
                do
                {
                  if (v30 >= v28)
                  {
                    __break(1u);
LABEL_124:
                    __break(1u);
LABEL_125:
                    __break(1u);
LABEL_126:
                    __break(1u);
LABEL_127:
                    __break(1u);
LABEL_128:
                    __break(1u);
LABEL_129:
                    __break(1u);
                    goto LABEL_130;
                  }
                  v33 = *v32;
                  if (*v32 >= v28)
                    goto LABEL_124;
                  if (*(double *)(v103 + 8 * v30) >= *(double *)(v103 + 8 * v33))
                    break;
                  if (!v13)
                    goto LABEL_155;
                  *v32 = v30;
                  v32[1] = v33;
                  --v32;
                  ++v31;
                }
                while (v16 != v31);
                ++v16;
                ++v29;
              }
              while (v16 != v27);
              v16 = v27;
            }
            goto LABEL_52;
          }
LABEL_153:
          __break(1u);
          goto LABEL_154;
        }
LABEL_152:
        __break(1u);
        goto LABEL_153;
      }
LABEL_150:
      __break(1u);
LABEL_151:
      __break(1u);
      goto LABEL_152;
    }
LABEL_52:
    if (v16 < v15)
      goto LABEL_146;
    v105 = v16;
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      v11 = sub_1CA13B230(0, *((_QWORD *)v11 + 2) + 1, 1, v11);
    v35 = *((_QWORD *)v11 + 2);
    v34 = *((_QWORD *)v11 + 3);
    v36 = v35 + 1;
    v13 = v107;
    if (v35 >= v34 >> 1)
    {
      v87 = sub_1CA13B230((char *)(v34 > 1), v35 + 1, 1, v11);
      v13 = v107;
      v11 = v87;
    }
    *((_QWORD *)v11 + 2) = v36;
    v108 = v11 + 32;
    v37 = &v11[16 * v35 + 32];
    *(_QWORD *)v37 = v15;
    *((_QWORD *)v37 + 1) = v105;
    if (v35)
      break;
    v36 = 1;
LABEL_101:
    v14 = v104;
    v12 = v105;
    if (v105 >= v104)
      goto LABEL_108;
  }
  v38 = v11 + 32;
  v106 = v11;
  while (1)
  {
    v39 = v36 - 1;
    if (v36 >= 4)
    {
      v44 = &v38[16 * v36];
      v45 = *((_QWORD *)v44 - 8);
      v46 = *((_QWORD *)v44 - 7);
      v50 = __OFSUB__(v46, v45);
      v47 = v46 - v45;
      if (v50)
        goto LABEL_131;
      v49 = *((_QWORD *)v44 - 6);
      v48 = *((_QWORD *)v44 - 5);
      v50 = __OFSUB__(v48, v49);
      v42 = v48 - v49;
      v43 = v50;
      if (v50)
        goto LABEL_132;
      v51 = v36 - 2;
      v52 = &v38[16 * v36 - 32];
      v54 = *(_QWORD *)v52;
      v53 = *((_QWORD *)v52 + 1);
      v50 = __OFSUB__(v53, v54);
      v55 = v53 - v54;
      if (v50)
        goto LABEL_134;
      v50 = __OFADD__(v42, v55);
      v56 = v42 + v55;
      if (v50)
        goto LABEL_137;
      if (v56 >= v47)
      {
        v74 = &v38[16 * v39];
        v76 = *(_QWORD *)v74;
        v75 = *((_QWORD *)v74 + 1);
        v50 = __OFSUB__(v75, v76);
        v77 = v75 - v76;
        if (v50)
          goto LABEL_141;
        v67 = v42 < v77;
        goto LABEL_90;
      }
    }
    else
    {
      if (v36 != 3)
      {
        v68 = *((_QWORD *)v11 + 4);
        v69 = *((_QWORD *)v11 + 5);
        v50 = __OFSUB__(v69, v68);
        v61 = v69 - v68;
        v62 = v50;
        goto LABEL_84;
      }
      v41 = *((_QWORD *)v11 + 4);
      v40 = *((_QWORD *)v11 + 5);
      v50 = __OFSUB__(v40, v41);
      v42 = v40 - v41;
      v43 = v50;
    }
    if ((v43 & 1) != 0)
      goto LABEL_133;
    v51 = v36 - 2;
    v57 = &v38[16 * v36 - 32];
    v59 = *(_QWORD *)v57;
    v58 = *((_QWORD *)v57 + 1);
    v60 = __OFSUB__(v58, v59);
    v61 = v58 - v59;
    v62 = v60;
    if (v60)
      goto LABEL_136;
    v63 = &v38[16 * v39];
    v65 = *(_QWORD *)v63;
    v64 = *((_QWORD *)v63 + 1);
    v50 = __OFSUB__(v64, v65);
    v66 = v64 - v65;
    if (v50)
      goto LABEL_139;
    if (__OFADD__(v61, v66))
      goto LABEL_140;
    if (v61 + v66 >= v42)
    {
      v67 = v42 < v66;
LABEL_90:
      if (v67)
        v39 = v51;
      goto LABEL_92;
    }
LABEL_84:
    if ((v62 & 1) != 0)
      goto LABEL_135;
    v70 = &v38[16 * v39];
    v72 = *(_QWORD *)v70;
    v71 = *((_QWORD *)v70 + 1);
    v50 = __OFSUB__(v71, v72);
    v73 = v71 - v72;
    if (v50)
      goto LABEL_138;
    if (v73 < v61)
      goto LABEL_101;
LABEL_92:
    v78 = v39 - 1;
    if (v39 - 1 >= v36)
      goto LABEL_125;
    if (!v13)
      goto LABEL_156;
    v79 = &v38[16 * v78];
    v80 = *(_QWORD *)v79;
    v81 = v39;
    v82 = &v38[16 * v39];
    v83 = *((_QWORD *)v82 + 1);
    v114 = (char *)(v13 + 8 * *(_QWORD *)v79);
    v84 = (char *)(v13 + 8 * *(_QWORD *)v82);
    v85 = v13 + 8 * v83;
    swift_bridgeObjectRetain();
    sub_1CA13BEF4(v114, v84, v85, v110, a2, a3, v113);
    if (v116)
      break;
    swift_bridgeObjectRelease();
    v11 = v106;
    if (v83 < v80)
      goto LABEL_126;
    if (v81 > *((_QWORD *)v106 + 2))
      goto LABEL_127;
    *(_QWORD *)v79 = v80;
    v38 = v108;
    *(_QWORD *)&v108[16 * v78 + 8] = v83;
    v86 = *((_QWORD *)v106 + 2);
    if (v81 >= v86)
      goto LABEL_128;
    v36 = v86 - 1;
    memmove(v82, v82 + 16, 16 * (v86 - 1 - v81));
    *((_QWORD *)v106 + 2) = v86 - 1;
    v13 = v107;
    if (v86 <= 2)
      goto LABEL_101;
  }
  v88 = v101;
LABEL_104:
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  *(_QWORD *)(v88 + 16) = 0;
LABEL_121:
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease_n();
}

uint64_t sub_1CA13CA3C(_QWORD **a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v8;
  uint64_t v9;
  uint64_t v11[2];

  v8 = *a1;
  swift_bridgeObjectRetain_n();
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    v8 = sub_1CA0B6094(v8);
  v9 = v8[2];
  v11[0] = (uint64_t)(v8 + 4);
  v11[1] = v9;
  swift_bridgeObjectRetain();
  sub_1CA13C244(v11, a2, a3, a4);
  swift_bridgeObjectRelease();
  *a1 = v8;
  return swift_bridgeObjectRelease_n();
}

double *sub_1CA13CAF8(double *result, char a2, _QWORD *a3)
{
  uint64_t v3;
  double *v6;
  double v7;
  uint64_t v8;
  _QWORD *v9;
  char v10;
  unint64_t v11;
  uint64_t v12;
  _BOOL8 v13;
  uint64_t v14;
  char v15;
  unint64_t v16;
  char v17;
  _QWORD *v18;
  _QWORD *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  double *i;
  uint64_t v25;
  _QWORD *v26;
  uint64_t v27;
  uint64_t v28;
  double v29;
  double v30;
  _QWORD *v31;
  unint64_t v32;
  char v33;
  uint64_t v34;
  _BOOL8 v35;
  BOOL v36;
  uint64_t v37;
  char v38;
  char v39;
  _QWORD *v40;

  v3 = *((_QWORD *)result + 2);
  if (v3)
  {
    v6 = result;
    v7 = result[4];
    v8 = *((_QWORD *)result + 5);
    v9 = (_QWORD *)*a3;
    swift_bridgeObjectRetain();
    v11 = sub_1CA0AA6C4(v7);
    v12 = v9[2];
    v13 = (v10 & 1) == 0;
    v14 = v12 + v13;
    if (!__OFADD__(v12, v13))
    {
      v15 = v10;
      if (v9[3] >= v14)
      {
        if ((a2 & 1) != 0)
        {
          v18 = (_QWORD *)*a3;
          if ((v10 & 1) == 0)
            goto LABEL_13;
        }
        else
        {
          sub_1CA0F0910();
          v18 = (_QWORD *)*a3;
          if ((v15 & 1) == 0)
            goto LABEL_13;
        }
      }
      else
      {
        sub_1CA0ED640(v14, a2 & 1);
        v16 = sub_1CA0AA6C4(v7);
        if ((v15 & 1) != (v17 & 1))
        {
LABEL_29:
          result = (double *)sub_1CA1F1360();
          __break(1u);
          return result;
        }
        v11 = v16;
        v18 = (_QWORD *)*a3;
        if ((v15 & 1) == 0)
        {
LABEL_13:
          v18[(v11 >> 6) + 8] |= 1 << v11;
          v21 = 8 * v11;
          *(double *)(v18[6] + v21) = v7;
          *(_QWORD *)(v18[7] + v21) = v8;
          v22 = v18[2];
          v19 = v18 + 2;
          v20 = v22 + 1;
          if (__OFADD__(v22, 1))
          {
LABEL_28:
            __break(1u);
            goto LABEL_29;
          }
          goto LABEL_14;
        }
      }
      v19 = (_QWORD *)(v18[7] + 8 * v11);
      v20 = *v19 + v8;
      if (!__OFADD__(*v19, v8))
      {
LABEL_14:
        *v19 = v20;
        v23 = v3 - 1;
        if (v3 == 1)
          return (double *)swift_bridgeObjectRelease();
        for (i = v6 + 7; ; i += 2)
        {
          v29 = *(i - 1);
          v30 = *i;
          v31 = (_QWORD *)*a3;
          v32 = sub_1CA0AA6C4(v29);
          v34 = v31[2];
          v35 = (v33 & 1) == 0;
          v36 = __OFADD__(v34, v35);
          v37 = v34 + v35;
          if (v36)
            break;
          v38 = v33;
          if (v31[3] < v37)
          {
            sub_1CA0ED640(v37, 1);
            v32 = sub_1CA0AA6C4(v29);
            if ((v38 & 1) != (v39 & 1))
              goto LABEL_29;
          }
          v40 = (_QWORD *)*a3;
          if ((v38 & 1) != 0)
          {
            v26 = (_QWORD *)(v40[7] + 8 * v32);
            v28 = *v26 + *(_QWORD *)&v30;
            if (__OFADD__(*v26, *(_QWORD *)&v30))
              goto LABEL_26;
          }
          else
          {
            v40[(v32 >> 6) + 8] |= 1 << v32;
            v25 = 8 * v32;
            *(double *)(v40[6] + v25) = v29;
            *(double *)(v40[7] + v25) = v30;
            v27 = v40[2];
            v26 = v40 + 2;
            v28 = v27 + 1;
            if (__OFADD__(v27, 1))
              goto LABEL_28;
          }
          *v26 = v28;
          if (!--v23)
            return (double *)swift_bridgeObjectRelease();
        }
        goto LABEL_27;
      }
LABEL_26:
      __break(1u);
    }
LABEL_27:
    __break(1u);
    goto LABEL_28;
  }
  return result;
}

uint64_t sub_1CA13CD40()
{
  return swift_deallocObject();
}

uint64_t sub_1CA13CD54(uint64_t a1)
{
  return sub_1CA13CD6C(a1, (uint64_t (*)(uint64_t, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_1CA13726C);
}

uint64_t sub_1CA13CD60(uint64_t a1)
{
  return sub_1CA13CD6C(a1, (uint64_t (*)(uint64_t, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_1CA136DB0);
}

uint64_t sub_1CA13CD6C(uint64_t a1, uint64_t (*a2)(uint64_t, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))
{
  uint64_t v2;

  return a2(a1, *(_QWORD *)(v2 + 16), *(_QWORD *)(v2 + 24), *(_QWORD *)(v2 + 32), *(unsigned __int8 *)(v2 + 40), *(unsigned __int8 *)(v2 + 41), *(_QWORD *)(v2 + 48), *(_QWORD *)(v2 + 56));
}

unint64_t sub_1CA13CD8C()
{
  unint64_t result;

  result = qword_1EF93A2D0;
  if (!qword_1EF93A2D0)
  {
    result = MEMORY[0x1CAA4BB30](&protocol conformance descriptor for MAMatrixAxes, &type metadata for MAMatrixAxes);
    atomic_store(result, (unint64_t *)&qword_1EF93A2D0);
  }
  return result;
}

unint64_t sub_1CA13CDD4()
{
  unint64_t result;

  result = qword_1EF93A2D8;
  if (!qword_1EF93A2D8)
  {
    result = MEMORY[0x1CAA4BB30](&protocol conformance descriptor for MAMatrixDistances, &type metadata for MAMatrixDistances);
    atomic_store(result, (unint64_t *)&qword_1EF93A2D8);
  }
  return result;
}

uint64_t sub_1CA13CE18()
{
  return sub_1CA102CA8(&qword_1EF93A2E0, &qword_1EF93A2E8, MEMORY[0x1E0DEC1E8]);
}

uint64_t sub_1CA13CE4C()
{
  return 0;
}

uint64_t sub_1CA13CE5C@<X0>(uint64_t result@<X0>, unint64_t *a2@<X1>, _QWORD *a3@<X8>)
{
  unint64_t v3;
  uint64_t v4;

  v3 = *a2;
  if ((*a2 & 0x8000000000000000) != 0)
  {
    __break(1u);
  }
  else
  {
    v4 = *(_QWORD *)(result + 16);
    if (v3 < *(_QWORD *)(v4 + 16))
    {
      *a3 = *(_QWORD *)(v4 + 8 * v3 + 32);
      return result;
    }
  }
  __break(1u);
  return result;
}

uint64_t sub_1CA13CE90()
{
  return 0;
}

double sub_1CA13CEA0@<D0>(_QWORD *a1@<X1>, uint64_t a2@<X8>)
{
  return keypath_get_10Tm(a1, (void (*)(__int128 *__return_ptr, _QWORD))MAMatrix.subscript.getter, a2);
}

uint64_t sub_1CA13CEB0()
{
  return 0;
}

double sub_1CA13CEC0@<D0>(_QWORD *a1@<X1>, uint64_t a2@<X8>)
{
  return sub_1CA12F54C(a1, (void (*)(__int128 *__return_ptr, _QWORD, _QWORD))MAMatrix.subscript.getter, a2);
}

uint64_t sub_1CA13CEE0()
{
  return 0;
}

double sub_1CA13CEF0@<D0>(uint64_t *a1@<X1>, uint64_t a2@<X8>)
{
  return sub_1CA12FD08(a1, (void (*)(__int128 *__return_ptr, uint64_t))MAMatrix.subscript.getter, a2);
}

uint64_t sub_1CA13CF0C(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4)
{
  return sub_1CA12FD84(a1, a2, a3, a4, (void (*)(uint64_t, _QWORD, uint64_t, uint64_t, _QWORD *))sub_1CA12EC00);
}

uint64_t sub_1CA13CF28()
{
  return 0;
}

double sub_1CA13CF38@<D0>(_QWORD *a1@<X1>, uint64_t a2@<X8>)
{
  return keypath_get_10Tm(a1, (void (*)(__int128 *__return_ptr, _QWORD))MAMatrix.subscript.getter, a2);
}

double keypath_get_10Tm@<D0>(_QWORD *a1@<X1>, void (*a2)(__int128 *__return_ptr, _QWORD)@<X3>, uint64_t a3@<X8>)
{
  uint64_t v4;
  double result;
  __int128 v6;
  uint64_t v7;

  a2(&v6, *a1);
  v4 = v7;
  result = *(double *)&v6;
  *(_OWORD *)a3 = v6;
  *(_QWORD *)(a3 + 16) = v4;
  return result;
}

uint64_t sub_1CA13CFA0()
{
  return 0;
}

double sub_1CA13CFB0@<D0>(_QWORD *a1@<X1>, uint64_t a2@<X8>)
{
  return sub_1CA12F54C(a1, (void (*)(__int128 *__return_ptr, _QWORD, _QWORD))MAMatrix.subscript.getter, a2);
}

uint64_t sub_1CA13CFD0()
{
  return 0;
}

double sub_1CA13CFE0@<D0>(uint64_t *a1@<X1>, uint64_t a2@<X8>)
{
  return sub_1CA12FD08(a1, (void (*)(__int128 *__return_ptr, uint64_t))MAMatrix.subscript.getter, a2);
}

uint64_t sub_1CA13CFFC(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4)
{
  return sub_1CA12FD84(a1, a2, a3, a4, (void (*)(uint64_t, _QWORD, uint64_t, uint64_t, _QWORD *))sub_1CA12FF54);
}

uint64_t sub_1CA13D018()
{
  return 0;
}

uint64_t storeEnumTagSinglePayload for MAMatrixAxes(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 1 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_1CA13D074 + 4 * byte_1CA1FC3B5[v4]))();
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_1CA13D0A8 + 4 * byte_1CA1FC3B0[v4]))();
}

uint64_t sub_1CA13D0A8(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1CA13D0B0(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1CA13D0B8);
  return result;
}

uint64_t sub_1CA13D0C4(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1CA13D0CCLL);
  *(_BYTE *)result = a2 + 1;
  return result;
}

uint64_t sub_1CA13D0D0(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1CA13D0D8(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for MAMatrixAxes()
{
  return &type metadata for MAMatrixAxes;
}

uint64_t storeEnumTagSinglePayload for MAMatrixDistances(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 2 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 2) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFE)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFD)
    return ((uint64_t (*)(void))((char *)&loc_1CA13D140 + 4 * byte_1CA1FC3BF[v4]))();
  *a1 = a2 + 2;
  return ((uint64_t (*)(void))((char *)sub_1CA13D174 + 4 * byte_1CA1FC3BA[v4]))();
}

uint64_t sub_1CA13D174(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1CA13D17C(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1CA13D184);
  return result;
}

uint64_t sub_1CA13D190(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1CA13D198);
  *(_BYTE *)result = a2 + 2;
  return result;
}

uint64_t sub_1CA13D19C(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1CA13D1A4(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for MAMatrixDistances()
{
  return &type metadata for MAMatrixDistances;
}

uint64_t initializeBufferWithCopyOfBuffer for MAMatrix(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t destroy for MAMatrix()
{
  return swift_bridgeObjectRelease();
}

_QWORD *assignWithCopy for MAMatrix(_QWORD *a1, _QWORD *a2)
{
  *a1 = *a2;
  a1[1] = a2[1];
  a1[2] = a2[2];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t assignWithTake for MAMatrix(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for MAMatrix(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 24))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 16);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for MAMatrix(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)(result + 8) = 0;
    *(_QWORD *)(result + 16) = 0;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 24) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 16) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 24) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for MAMatrix()
{
  return &type metadata for MAMatrix;
}

uint64_t sub_1CA13D318()
{
  swift_release();
  swift_release();
  return swift_deallocObject();
}

uint64_t MAFeatureVector.definition.getter()
{
  return swift_retain();
}

uint64_t MAFeatureVector.values.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t MAFeatureVector.space.getter()
{
  uint64_t v0;

  return *(_QWORD *)(*(_QWORD *)(v0 + 8) + 16);
}

id MAFeatureVector.stringValues.getter()
{
  uint64_t v0;
  id v1;
  uint64_t v2;
  unint64_t v3;

  if (*(_QWORD *)(v0 + 16))
  {
    v1 = *(id *)(v0 + 16);
  }
  else
  {
    v2 = v0;
    swift_retain();
    v3 = swift_bridgeObjectRetain();
    v1 = sub_1CA0C5768(v3);
    swift_release();
    swift_bridgeObjectRelease();
    *(_QWORD *)(v2 + 16) = v1;
    swift_bridgeObjectRetain();
  }
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t MAFeatureVector.stringValues.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t result;

  result = swift_bridgeObjectRelease();
  *(_QWORD *)(v1 + 16) = a1;
  return result;
}

uint64_t (*MAFeatureVector.stringValues.modify(id *a1))(uint64_t *a1, char a2)
{
  void *v1;

  a1[1] = v1;
  *a1 = MAFeatureVector.stringValues.getter();
  return sub_1CA13D440;
}

uint64_t sub_1CA13D440(uint64_t *a1, char a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t result;

  v2 = *a1;
  v3 = a1[1];
  if ((a2 & 1) != 0)
  {
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    *(_QWORD *)(v3 + 16) = v2;
    return swift_bridgeObjectRelease();
  }
  else
  {
    result = swift_bridgeObjectRelease();
    *(_QWORD *)(v3 + 16) = v2;
  }
  return result;
}

uint64_t MAFeatureVector.keys.getter()
{
  uint64_t v0;
  uint64_t v1;

  if (*(_QWORD *)(v0 + 24))
  {
    v1 = *(_QWORD *)(v0 + 24);
  }
  else
  {
    swift_retain();
    v1 = sub_1CA0C3F30();
    swift_release();
    *(_QWORD *)(v0 + 24) = v1;
    swift_bridgeObjectRetain();
  }
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t MAFeatureVector.keys.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t result;

  result = swift_bridgeObjectRelease();
  *(_QWORD *)(v1 + 24) = a1;
  return result;
}

uint64_t (*MAFeatureVector.keys.modify(uint64_t *a1))(uint64_t *a1, char a2)
{
  uint64_t v1;

  a1[1] = v1;
  *a1 = MAFeatureVector.keys.getter();
  return sub_1CA13D564;
}

uint64_t sub_1CA13D564(uint64_t *a1, char a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t result;

  v2 = *a1;
  v3 = a1[1];
  if ((a2 & 1) != 0)
  {
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    *(_QWORD *)(v3 + 24) = v2;
    return swift_bridgeObjectRelease();
  }
  else
  {
    result = swift_bridgeObjectRelease();
    *(_QWORD *)(v3 + 24) = v2;
  }
  return result;
}

uint64_t MAFeatureVector.subscript.getter(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  return sub_1CA0C6170(*(_QWORD **)(v2 + 8), a1, a2);
}

uint64_t MAFeatureVector.description.getter()
{
  _QWORD *v0;
  unint64_t v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  void *v11;
  id v12;
  id v13;
  BOOL v14;
  uint64_t v15;
  uint64_t i;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  char v21;
  int isUniquelyReferenced_nonNull_native;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char v26;
  uint64_t v27;
  __int128 v28;
  __int128 v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t result;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  _QWORD *v36;
  unint64_t v37;
  unint64_t v38;
  uint64_t v39;
  uint64_t v40;
  unint64_t v41;
  unint64_t v42;
  void *v43;
  void *v44;
  _BYTE v45[40];
  uint64_t v46;
  _OWORD v47[2];
  uint64_t v48;
  uint64_t v49;
  unint64_t v50;
  __int128 v51;
  _QWORD v52[17];
  unint64_t v53;
  unint64_t v54;

  v36 = (_QWORD *)v0[1];
  if (!objc_msgSend(*(id *)(*v0 + 16), sel_hasPendingRead))
    goto LABEL_47;
  v1 = 0xD000000000000011;
  v53 = 0xD000000000000011;
  v54 = 0x80000001CA208460;
  v2 = sub_1CA0C3F30();
  v34 = *(_QWORD *)(v2 + 16);
  if (!v34)
  {
LABEL_41:
    swift_bridgeObjectRelease();
    return v1;
  }
  v3 = 0;
  v35 = v2 + 32;
  v33 = v2;
  while (1)
  {
    if (v3 >= *(_QWORD *)(v2 + 16))
      goto LABEL_46;
    v37 = v3;
    v4 = (uint64_t *)(v35 + 16 * v3);
    v5 = *v4;
    v6 = v4[1];
    swift_bridgeObjectRetain();
    swift_retain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v7 = sub_1CA0C6170(v36, v5, v6);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_release();
    if (!v7)
      goto LABEL_39;
    v8 = v7 & 0xFFFFFFFFFFFFFF8;
    if (!(v7 >> 62))
    {
      v9 = *(_QWORD *)((v7 & 0xFFFFFFFFFFFFFF8) + 0x10);
      if (v9)
        break;
      goto LABEL_38;
    }
    swift_bridgeObjectRetain();
    v9 = sub_1CA1F1234();
    swift_bridgeObjectRelease();
    if (v9)
      break;
LABEL_38:
    swift_bridgeObjectRelease();
LABEL_39:
    swift_bridgeObjectRelease();
LABEL_5:
    v3 = v37 + 1;
    v2 = v33;
    if (v37 + 1 == v34)
    {
      swift_bridgeObjectRelease();
      return v53;
    }
  }
  v10 = 0;
  v42 = v7 & 0xC000000000000001;
  v38 = v7 + 32;
  v40 = v7 & 0xFFFFFFFFFFFFFF8;
  v41 = v7;
  v39 = v9;
  while (v42)
  {
    v13 = (id)MEMORY[0x1CAA4A7A4](v10, v7);
    v14 = __OFADD__(v10++, 1);
    if (v14)
      goto LABEL_44;
LABEL_18:
    v44 = v13;
    v52[15] = 2314;
    v52[16] = 0xE200000000000000;
    v43 = (void *)sub_1CA1F0A00();
    v51 = xmmword_1CA1F9860;
    v49 = 1701667182;
    v50 = 0xE400000000000000;
    sub_1CA1F1018();
    v49 = 25705;
    v50 = 0xE200000000000000;
    sub_1CA1F1018();
    v49 = 1684632949;
    v50 = 0xE400000000000000;
    sub_1CA1F1018();
    v15 = sub_1CA1F0CA0();
    for (i = 0; i != 3; ++i)
    {
      sub_1CA0AB948((uint64_t)&v52[5 * i], (uint64_t)&v49);
      swift_bridgeObjectRetain();
      v17 = sub_1CA1F1000();
      v18 = -1 << *(_BYTE *)(v15 + 32);
      v19 = v17 & ~v18;
      v1 = v15 + 56;
      if (((*(_QWORD *)(v15 + 56 + ((v19 >> 3) & 0xFFFFFFFFFFFFF8)) >> v19) & 1) != 0)
      {
        v20 = ~v18;
        while (1)
        {
          sub_1CA0AB948(*(_QWORD *)(v15 + 48) + 40 * v19, (uint64_t)v47);
          v21 = MEMORY[0x1CAA4A714](v47, &v49);
          sub_1CA0AB984((uint64_t)v47);
          if ((v21 & 1) != 0)
            break;
          v19 = (v19 + 1) & v20;
          if (((*(_QWORD *)(v1 + ((v19 >> 3) & 0xFFFFFFFFFFFFF8)) >> v19) & 1) == 0)
            goto LABEL_24;
        }
      }
      else
      {
LABEL_24:
        swift_bridgeObjectRelease();
        isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
        sub_1CA0AB948((uint64_t)&v49, (uint64_t)v47);
        v46 = v15;
        if (*(_QWORD *)(v15 + 24) <= *(_QWORD *)(v15 + 16))
        {
          if (isUniquelyReferenced_nonNull_native)
            sub_1CA13DE6C();
          else
            sub_1CA13F840();
          v15 = v46;
          v23 = sub_1CA1F1000();
          v24 = -1 << *(_BYTE *)(v15 + 32);
          v19 = v23 & ~v24;
          v1 = v15 + 56;
          if (((*(_QWORD *)(v15 + 56 + ((v19 >> 3) & 0xFFFFFFFFFFFFF8)) >> v19) & 1) != 0)
          {
            v25 = ~v24;
            do
            {
              sub_1CA0AB948(*(_QWORD *)(v15 + 48) + 40 * v19, (uint64_t)v45);
              v26 = MEMORY[0x1CAA4A714](v45, v47);
              sub_1CA0AB984((uint64_t)v45);
              if ((v26 & 1) != 0)
                goto LABEL_48;
              v19 = (v19 + 1) & v25;
            }
            while (((*(_QWORD *)(v1 + ((v19 >> 3) & 0xFFFFFFFFFFFFF8)) >> v19) & 1) != 0);
          }
        }
        else if ((isUniquelyReferenced_nonNull_native & 1) == 0)
        {
          sub_1CA13ED58();
          v15 = v46;
        }
        *(_QWORD *)(v15 + ((v19 >> 3) & 0xFFFFFFFFFFFFFF8) + 56) |= 1 << v19;
        v27 = *(_QWORD *)(v15 + 48) + 40 * v19;
        v28 = v47[0];
        v29 = v47[1];
        *(_QWORD *)(v27 + 32) = v48;
        *(_OWORD *)v27 = v28;
        *(_OWORD *)(v27 + 16) = v29;
        v30 = *(_QWORD *)(v15 + 16);
        v14 = __OFADD__(v30, 1);
        v31 = v30 + 1;
        if (v14)
        {
          __break(1u);
          goto LABEL_41;
        }
        *(_QWORD *)(v15 + 16) = v31;
      }
      swift_bridgeObjectRelease();
      sub_1CA0AB984((uint64_t)&v49);
    }
    swift_arrayDestroy();
    v11 = (void *)sub_1CA1F0C88();
    swift_bridgeObjectRelease();
    v12 = objc_msgSend(v44, sel_visualStringWithName_andPropertyKeys_, v43, v11);

    sub_1CA1F0A0C();
    sub_1CA1F0A3C();
    swift_bridgeObjectRelease();
    sub_1CA1F0A3C();

    swift_bridgeObjectRelease();
    v8 = v40;
    v7 = v41;
    if (v10 == v39)
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      goto LABEL_5;
    }
  }
  if (v10 >= *(_QWORD *)(v8 + 16))
    goto LABEL_45;
  v13 = *(id *)(v38 + 8 * v10);
  v14 = __OFADD__(v10++, 1);
  if (!v14)
    goto LABEL_18;
LABEL_44:
  __break(1u);
LABEL_45:
  __break(1u);
LABEL_46:
  __break(1u);
LABEL_47:
  __break(1u);
LABEL_48:
  result = sub_1CA1F1354();
  __break(1u);
  return result;
}

uint64_t sub_1CA13DBD0()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  unint64_t v8;
  int64_t v9;
  uint64_t v10;
  uint64_t result;
  int64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  int64_t v16;
  unint64_t v17;
  int64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  char v23;
  unint64_t v24;
  BOOL v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t *v28;

  v1 = v0;
  v2 = *v0;
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EF937670);
  v3 = sub_1CA1F1030();
  v4 = v3;
  if (*(_QWORD *)(v2 + 16))
  {
    v28 = v0;
    v5 = 1 << *(_BYTE *)(v2 + 32);
    v6 = (_QWORD *)(v2 + 56);
    if (v5 < 64)
      v7 = ~(-1 << v5);
    else
      v7 = -1;
    v8 = v7 & *(_QWORD *)(v2 + 56);
    v9 = (unint64_t)(v5 + 63) >> 6;
    v10 = v3 + 56;
    result = swift_retain();
    v12 = 0;
    while (1)
    {
      if (v8)
      {
        v14 = __clz(__rbit64(v8));
        v8 &= v8 - 1;
        v15 = v14 | (v12 << 6);
      }
      else
      {
        v16 = v12 + 1;
        if (__OFADD__(v12, 1))
        {
LABEL_38:
          __break(1u);
LABEL_39:
          __break(1u);
          return result;
        }
        if (v16 >= v9)
          goto LABEL_33;
        v17 = v6[v16];
        ++v12;
        if (!v17)
        {
          v12 = v16 + 1;
          if (v16 + 1 >= v9)
            goto LABEL_33;
          v17 = v6[v12];
          if (!v17)
          {
            v12 = v16 + 2;
            if (v16 + 2 >= v9)
              goto LABEL_33;
            v17 = v6[v12];
            if (!v17)
            {
              v18 = v16 + 3;
              if (v18 >= v9)
              {
LABEL_33:
                swift_release();
                v1 = v28;
                v27 = 1 << *(_BYTE *)(v2 + 32);
                if (v27 > 63)
                  bzero((void *)(v2 + 56), ((unint64_t)(v27 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
                else
                  *v6 = -1 << v27;
                *(_QWORD *)(v2 + 16) = 0;
                break;
              }
              v17 = v6[v18];
              if (!v17)
              {
                while (1)
                {
                  v12 = v18 + 1;
                  if (__OFADD__(v18, 1))
                    goto LABEL_39;
                  if (v12 >= v9)
                    goto LABEL_33;
                  v17 = v6[v12];
                  ++v18;
                  if (v17)
                    goto LABEL_23;
                }
              }
              v12 = v18;
            }
          }
        }
LABEL_23:
        v8 = (v17 - 1) & v17;
        v15 = __clz(__rbit64(v17)) + (v12 << 6);
      }
      v19 = *(_QWORD *)(*(_QWORD *)(v2 + 48) + 8 * v15);
      result = sub_1CA1F0E5C();
      v20 = -1 << *(_BYTE *)(v4 + 32);
      v21 = result & ~v20;
      v22 = v21 >> 6;
      if (((-1 << v21) & ~*(_QWORD *)(v10 + 8 * (v21 >> 6))) != 0)
      {
        v13 = __clz(__rbit64((-1 << v21) & ~*(_QWORD *)(v10 + 8 * (v21 >> 6)))) | v21 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        v23 = 0;
        v24 = (unint64_t)(63 - v20) >> 6;
        do
        {
          if (++v22 == v24 && (v23 & 1) != 0)
          {
            __break(1u);
            goto LABEL_38;
          }
          v25 = v22 == v24;
          if (v22 == v24)
            v22 = 0;
          v23 |= v25;
          v26 = *(_QWORD *)(v10 + 8 * v22);
        }
        while (v26 == -1);
        v13 = __clz(__rbit64(~v26)) + (v22 << 6);
      }
      *(_QWORD *)(v10 + ((v13 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v13;
      *(_QWORD *)(*(_QWORD *)(v4 + 48) + 8 * v13) = v19;
      ++*(_QWORD *)(v4 + 16);
    }
  }
  result = swift_release();
  *v1 = v4;
  return result;
}

uint64_t sub_1CA13DE6C()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  unint64_t v8;
  int64_t v9;
  uint64_t v10;
  uint64_t result;
  int64_t v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  int64_t v17;
  unint64_t v18;
  int64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  char v24;
  unint64_t v25;
  BOOL v26;
  uint64_t v27;
  uint64_t v28;
  __int128 v29;
  __int128 v30;
  uint64_t v31;

  v1 = v0;
  v2 = *v0;
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EF93A308);
  v3 = sub_1CA1F1030();
  v4 = v3;
  if (*(_QWORD *)(v2 + 16))
  {
    v5 = 1 << *(_BYTE *)(v2 + 32);
    v6 = (_QWORD *)(v2 + 56);
    if (v5 < 64)
      v7 = ~(-1 << v5);
    else
      v7 = -1;
    v8 = v7 & *(_QWORD *)(v2 + 56);
    v9 = (unint64_t)(v5 + 63) >> 6;
    v10 = v3 + 56;
    result = swift_retain();
    v12 = 0;
    while (1)
    {
      if (v8)
      {
        v15 = __clz(__rbit64(v8));
        v8 &= v8 - 1;
        v16 = v15 | (v12 << 6);
      }
      else
      {
        v17 = v12 + 1;
        if (__OFADD__(v12, 1))
        {
LABEL_38:
          __break(1u);
LABEL_39:
          __break(1u);
          return result;
        }
        if (v17 >= v9)
          goto LABEL_33;
        v18 = v6[v17];
        ++v12;
        if (!v18)
        {
          v12 = v17 + 1;
          if (v17 + 1 >= v9)
            goto LABEL_33;
          v18 = v6[v12];
          if (!v18)
          {
            v12 = v17 + 2;
            if (v17 + 2 >= v9)
              goto LABEL_33;
            v18 = v6[v12];
            if (!v18)
            {
              v19 = v17 + 3;
              if (v19 >= v9)
              {
LABEL_33:
                swift_release();
                v1 = v0;
                v28 = 1 << *(_BYTE *)(v2 + 32);
                if (v28 > 63)
                  bzero((void *)(v2 + 56), ((unint64_t)(v28 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
                else
                  *v6 = -1 << v28;
                *(_QWORD *)(v2 + 16) = 0;
                break;
              }
              v18 = v6[v19];
              if (!v18)
              {
                while (1)
                {
                  v12 = v19 + 1;
                  if (__OFADD__(v19, 1))
                    goto LABEL_39;
                  if (v12 >= v9)
                    goto LABEL_33;
                  v18 = v6[v12];
                  ++v19;
                  if (v18)
                    goto LABEL_23;
                }
              }
              v12 = v19;
            }
          }
        }
LABEL_23:
        v8 = (v18 - 1) & v18;
        v16 = __clz(__rbit64(v18)) + (v12 << 6);
      }
      v20 = *(_QWORD *)(v2 + 48) + 40 * v16;
      v29 = *(_OWORD *)v20;
      v30 = *(_OWORD *)(v20 + 16);
      v31 = *(_QWORD *)(v20 + 32);
      result = sub_1CA1F1000();
      v21 = -1 << *(_BYTE *)(v4 + 32);
      v22 = result & ~v21;
      v23 = v22 >> 6;
      if (((-1 << v22) & ~*(_QWORD *)(v10 + 8 * (v22 >> 6))) != 0)
      {
        v13 = __clz(__rbit64((-1 << v22) & ~*(_QWORD *)(v10 + 8 * (v22 >> 6)))) | v22 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        v24 = 0;
        v25 = (unint64_t)(63 - v21) >> 6;
        do
        {
          if (++v23 == v25 && (v24 & 1) != 0)
          {
            __break(1u);
            goto LABEL_38;
          }
          v26 = v23 == v25;
          if (v23 == v25)
            v23 = 0;
          v24 |= v26;
          v27 = *(_QWORD *)(v10 + 8 * v23);
        }
        while (v27 == -1);
        v13 = __clz(__rbit64(~v27)) + (v23 << 6);
      }
      *(_QWORD *)(v10 + ((v13 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v13;
      v14 = *(_QWORD *)(v4 + 48) + 40 * v13;
      *(_OWORD *)v14 = v29;
      *(_OWORD *)(v14 + 16) = v30;
      *(_QWORD *)(v14 + 32) = v31;
      ++*(_QWORD *)(v4 + 16);
    }
  }
  result = swift_release();
  *v1 = v4;
  return result;
}

unint64_t sub_1CA13E134()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  unint64_t v8;
  int64_t v9;
  uint64_t v10;
  unint64_t result;
  int64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t *v18;
  int64_t v19;
  unint64_t v20;
  int64_t v21;
  uint64_t v22;
  char v23[72];

  v1 = v0;
  v2 = *v0;
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EF93A318);
  v3 = sub_1CA1F1030();
  v4 = v3;
  if (*(_QWORD *)(v2 + 16))
  {
    v5 = 1 << *(_BYTE *)(v2 + 32);
    v6 = (_QWORD *)(v2 + 56);
    if (v5 < 64)
      v7 = ~(-1 << v5);
    else
      v7 = -1;
    v8 = v7 & *(_QWORD *)(v2 + 56);
    v9 = (unint64_t)(v5 + 63) >> 6;
    v10 = v3 + 56;
    result = swift_retain();
    v12 = 0;
    while (1)
    {
      if (v8)
      {
        v13 = __clz(__rbit64(v8));
        v8 &= v8 - 1;
        v14 = v13 | (v12 << 6);
      }
      else
      {
        v19 = v12 + 1;
        if (__OFADD__(v12, 1))
        {
          __break(1u);
LABEL_29:
          __break(1u);
          return result;
        }
        if (v19 >= v9)
          goto LABEL_23;
        v20 = v6[v19];
        ++v12;
        if (!v20)
        {
          v12 = v19 + 1;
          if (v19 + 1 >= v9)
            goto LABEL_23;
          v20 = v6[v12];
          if (!v20)
          {
            v12 = v19 + 2;
            if (v19 + 2 >= v9)
              goto LABEL_23;
            v20 = v6[v12];
            if (!v20)
            {
              v21 = v19 + 3;
              if (v21 >= v9)
              {
LABEL_23:
                swift_release();
                v22 = 1 << *(_BYTE *)(v2 + 32);
                if (v22 > 63)
                  bzero((void *)(v2 + 56), ((unint64_t)(v22 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
                else
                  *v6 = -1 << v22;
                v1 = v0;
                *(_QWORD *)(v2 + 16) = 0;
                break;
              }
              v20 = v6[v21];
              if (!v20)
              {
                while (1)
                {
                  v12 = v21 + 1;
                  if (__OFADD__(v21, 1))
                    goto LABEL_29;
                  if (v12 >= v9)
                    goto LABEL_23;
                  v20 = v6[v12];
                  ++v21;
                  if (v20)
                    goto LABEL_22;
                }
              }
              v12 = v21;
            }
          }
        }
LABEL_22:
        v8 = (v20 - 1) & v20;
        v14 = __clz(__rbit64(v20)) + (v12 << 6);
      }
      v15 = (uint64_t *)(*(_QWORD *)(v2 + 48) + 16 * v14);
      v16 = *v15;
      v17 = v15[1];
      sub_1CA1F13F0();
      swift_bridgeObjectRetain();
      sub_1CA0C0D60((uint64_t)v23, v16);
      swift_bridgeObjectRelease();
      sub_1CA1F1438();
      result = sub_1CA1F0F4C();
      *(_QWORD *)(v10 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << result;
      v18 = (uint64_t *)(*(_QWORD *)(v4 + 48) + 16 * result);
      *v18 = v16;
      v18[1] = v17;
      ++*(_QWORD *)(v4 + 16);
    }
  }
  result = swift_release();
  *v1 = v4;
  return result;
}

uint64_t sub_1CA13E394()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t result;
  uint64_t v4;
  int64_t v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  int64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  int64_t v15;
  unint64_t v16;
  int64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  char v22;
  unint64_t v23;
  BOOL v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t *v27;
  uint64_t v28;

  v1 = v0;
  v2 = *v0;
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EF93A310);
  result = sub_1CA1F1030();
  v4 = result;
  if (*(_QWORD *)(v2 + 16))
  {
    v5 = 0;
    v6 = (uint64_t *)(v2 + 56);
    v7 = 1 << *(_BYTE *)(v2 + 32);
    v26 = -1 << v7;
    v27 = v1;
    if (v7 < 64)
      v8 = ~(-1 << v7);
    else
      v8 = -1;
    v9 = v8 & *(_QWORD *)(v2 + 56);
    v28 = 1 << *(_BYTE *)(v2 + 32);
    v10 = (unint64_t)(v7 + 63) >> 6;
    v11 = result + 56;
    while (1)
    {
      if (v9)
      {
        v13 = __clz(__rbit64(v9));
        v9 &= v9 - 1;
        v14 = v13 | (v5 << 6);
      }
      else
      {
        v15 = v5 + 1;
        if (__OFADD__(v5, 1))
        {
LABEL_38:
          __break(1u);
LABEL_39:
          __break(1u);
          return result;
        }
        if (v15 >= v10)
          goto LABEL_33;
        v16 = v6[v15];
        ++v5;
        if (!v16)
        {
          v5 = v15 + 1;
          if (v15 + 1 >= v10)
            goto LABEL_33;
          v16 = v6[v5];
          if (!v16)
          {
            v5 = v15 + 2;
            if (v15 + 2 >= v10)
              goto LABEL_33;
            v16 = v6[v5];
            if (!v16)
            {
              v17 = v15 + 3;
              if (v17 >= v10)
              {
LABEL_33:
                if (v28 >= 64)
                  bzero((void *)(v2 + 56), 8 * v10);
                else
                  *v6 = v26;
                v1 = v27;
                *(_QWORD *)(v2 + 16) = 0;
                break;
              }
              v16 = v6[v17];
              if (!v16)
              {
                while (1)
                {
                  v5 = v17 + 1;
                  if (__OFADD__(v17, 1))
                    goto LABEL_39;
                  if (v5 >= v10)
                    goto LABEL_33;
                  v16 = v6[v5];
                  ++v17;
                  if (v16)
                    goto LABEL_23;
                }
              }
              v5 = v17;
            }
          }
        }
LABEL_23:
        v9 = (v16 - 1) & v16;
        v14 = __clz(__rbit64(v16)) + (v5 << 6);
      }
      v18 = *(_QWORD *)(*(_QWORD *)(v2 + 48) + 8 * v14);
      result = sub_1CA1F13E4();
      v19 = -1 << *(_BYTE *)(v4 + 32);
      v20 = result & ~v19;
      v21 = v20 >> 6;
      if (((-1 << v20) & ~*(_QWORD *)(v11 + 8 * (v20 >> 6))) != 0)
      {
        v12 = __clz(__rbit64((-1 << v20) & ~*(_QWORD *)(v11 + 8 * (v20 >> 6)))) | v20 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        v22 = 0;
        v23 = (unint64_t)(63 - v19) >> 6;
        do
        {
          if (++v21 == v23 && (v22 & 1) != 0)
          {
            __break(1u);
            goto LABEL_38;
          }
          v24 = v21 == v23;
          if (v21 == v23)
            v21 = 0;
          v22 |= v24;
          v25 = *(_QWORD *)(v11 + 8 * v21);
        }
        while (v25 == -1);
        v12 = __clz(__rbit64(~v25)) + (v21 << 6);
      }
      *(_QWORD *)(v11 + ((v12 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v12;
      *(_QWORD *)(*(_QWORD *)(v4 + 48) + 8 * v12) = v18;
      ++*(_QWORD *)(v4 + 16);
    }
  }
  result = swift_release();
  *v1 = v4;
  return result;
}

uint64_t sub_1CA13E614()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  int64_t v8;
  uint64_t v9;
  uint64_t result;
  int64_t v11;
  unint64_t v12;
  _QWORD *v13;
  unint64_t v14;
  unint64_t v15;
  int64_t v16;
  unint64_t v17;
  int64_t v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  char v25;
  unint64_t v26;
  BOOL v27;
  uint64_t v28;
  uint64_t v29;
  _QWORD *v30;

  v1 = v0;
  v2 = *v0;
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EF93A1D0);
  v3 = sub_1CA1F1030();
  v4 = v3;
  if (*(_QWORD *)(v2 + 16))
  {
    v5 = 1 << *(_BYTE *)(v2 + 32);
    v30 = (_QWORD *)(v2 + 56);
    if (v5 < 64)
      v6 = ~(-1 << v5);
    else
      v6 = -1;
    v7 = v6 & *(_QWORD *)(v2 + 56);
    v8 = (unint64_t)(v5 + 63) >> 6;
    v9 = v3 + 56;
    result = swift_retain();
    v11 = 0;
    while (1)
    {
      if (v7)
      {
        v14 = __clz(__rbit64(v7));
        v7 &= v7 - 1;
        v15 = v14 | (v11 << 6);
      }
      else
      {
        v16 = v11 + 1;
        if (__OFADD__(v11, 1))
        {
LABEL_38:
          __break(1u);
LABEL_39:
          __break(1u);
          return result;
        }
        if (v16 >= v8)
          goto LABEL_33;
        v17 = v30[v16];
        ++v11;
        if (!v17)
        {
          v11 = v16 + 1;
          if (v16 + 1 >= v8)
            goto LABEL_33;
          v17 = v30[v11];
          if (!v17)
          {
            v11 = v16 + 2;
            if (v16 + 2 >= v8)
              goto LABEL_33;
            v17 = v30[v11];
            if (!v17)
            {
              v18 = v16 + 3;
              if (v18 >= v8)
              {
LABEL_33:
                swift_release();
                v1 = v0;
                v29 = 1 << *(_BYTE *)(v2 + 32);
                if (v29 > 63)
                  bzero(v30, ((unint64_t)(v29 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
                else
                  *v30 = -1 << v29;
                *(_QWORD *)(v2 + 16) = 0;
                break;
              }
              v17 = v30[v18];
              if (!v17)
              {
                while (1)
                {
                  v11 = v18 + 1;
                  if (__OFADD__(v18, 1))
                    goto LABEL_39;
                  if (v11 >= v8)
                    goto LABEL_33;
                  v17 = v30[v11];
                  ++v18;
                  if (v17)
                    goto LABEL_23;
                }
              }
              v11 = v18;
            }
          }
        }
LABEL_23:
        v7 = (v17 - 1) & v17;
        v15 = __clz(__rbit64(v17)) + (v11 << 6);
      }
      v19 = (uint64_t *)(*(_QWORD *)(v2 + 48) + 16 * v15);
      v20 = *v19;
      v21 = v19[1];
      sub_1CA1F13F0();
      sub_1CA1F0A30();
      result = sub_1CA1F1438();
      v22 = -1 << *(_BYTE *)(v4 + 32);
      v23 = result & ~v22;
      v24 = v23 >> 6;
      if (((-1 << v23) & ~*(_QWORD *)(v9 + 8 * (v23 >> 6))) != 0)
      {
        v12 = __clz(__rbit64((-1 << v23) & ~*(_QWORD *)(v9 + 8 * (v23 >> 6)))) | v23 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        v25 = 0;
        v26 = (unint64_t)(63 - v22) >> 6;
        do
        {
          if (++v24 == v26 && (v25 & 1) != 0)
          {
            __break(1u);
            goto LABEL_38;
          }
          v27 = v24 == v26;
          if (v24 == v26)
            v24 = 0;
          v25 |= v27;
          v28 = *(_QWORD *)(v9 + 8 * v24);
        }
        while (v28 == -1);
        v12 = __clz(__rbit64(~v28)) + (v24 << 6);
      }
      *(_QWORD *)(v9 + ((v12 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v12;
      v13 = (_QWORD *)(*(_QWORD *)(v4 + 48) + 16 * v12);
      *v13 = v20;
      v13[1] = v21;
      ++*(_QWORD *)(v4 + 16);
    }
  }
  result = swift_release();
  *v1 = v4;
  return result;
}

uint64_t sub_1CA13E8F0()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  unint64_t v8;
  int64_t v9;
  uint64_t v10;
  uint64_t result;
  int64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  int64_t v16;
  unint64_t v17;
  int64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  char v23;
  unint64_t v24;
  BOOL v25;
  uint64_t v26;
  uint64_t v27;
  char v28[72];

  v1 = v0;
  v2 = *v0;
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EF937668);
  v3 = sub_1CA1F1030();
  v4 = v3;
  if (*(_QWORD *)(v2 + 16))
  {
    v5 = 1 << *(_BYTE *)(v2 + 32);
    v6 = (_QWORD *)(v2 + 56);
    if (v5 < 64)
      v7 = ~(-1 << v5);
    else
      v7 = -1;
    v8 = v7 & *(_QWORD *)(v2 + 56);
    v9 = (unint64_t)(v5 + 63) >> 6;
    v10 = v3 + 56;
    result = swift_retain();
    v12 = 0;
    while (1)
    {
      if (v8)
      {
        v14 = __clz(__rbit64(v8));
        v8 &= v8 - 1;
        v15 = v14 | (v12 << 6);
      }
      else
      {
        v16 = v12 + 1;
        if (__OFADD__(v12, 1))
        {
LABEL_38:
          __break(1u);
LABEL_39:
          __break(1u);
          return result;
        }
        if (v16 >= v9)
          goto LABEL_33;
        v17 = v6[v16];
        ++v12;
        if (!v17)
        {
          v12 = v16 + 1;
          if (v16 + 1 >= v9)
            goto LABEL_33;
          v17 = v6[v12];
          if (!v17)
          {
            v12 = v16 + 2;
            if (v16 + 2 >= v9)
              goto LABEL_33;
            v17 = v6[v12];
            if (!v17)
            {
              v18 = v16 + 3;
              if (v18 >= v9)
              {
LABEL_33:
                swift_release();
                v1 = v0;
                v27 = 1 << *(_BYTE *)(v2 + 32);
                if (v27 > 63)
                  bzero((void *)(v2 + 56), ((unint64_t)(v27 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
                else
                  *v6 = -1 << v27;
                *(_QWORD *)(v2 + 16) = 0;
                break;
              }
              v17 = v6[v18];
              if (!v17)
              {
                while (1)
                {
                  v12 = v18 + 1;
                  if (__OFADD__(v18, 1))
                    goto LABEL_39;
                  if (v12 >= v9)
                    goto LABEL_33;
                  v17 = v6[v12];
                  ++v18;
                  if (v17)
                    goto LABEL_23;
                }
              }
              v12 = v18;
            }
          }
        }
LABEL_23:
        v8 = (v17 - 1) & v17;
        v15 = __clz(__rbit64(v17)) + (v12 << 6);
      }
      v19 = *(_QWORD *)(*(_QWORD *)(v2 + 48) + 8 * v15);
      sub_1CA1F13F0();
      (*(void (**)(char *))(*(_QWORD *)v19 + 272))(v28);
      result = sub_1CA1F1438();
      v20 = -1 << *(_BYTE *)(v4 + 32);
      v21 = result & ~v20;
      v22 = v21 >> 6;
      if (((-1 << v21) & ~*(_QWORD *)(v10 + 8 * (v21 >> 6))) != 0)
      {
        v13 = __clz(__rbit64((-1 << v21) & ~*(_QWORD *)(v10 + 8 * (v21 >> 6)))) | v21 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        v23 = 0;
        v24 = (unint64_t)(63 - v20) >> 6;
        do
        {
          if (++v22 == v24 && (v23 & 1) != 0)
          {
            __break(1u);
            goto LABEL_38;
          }
          v25 = v22 == v24;
          if (v22 == v24)
            v22 = 0;
          v23 |= v25;
          v26 = *(_QWORD *)(v10 + 8 * v22);
        }
        while (v26 == -1);
        v13 = __clz(__rbit64(~v26)) + (v22 << 6);
      }
      *(_QWORD *)(v10 + ((v13 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v13;
      *(_QWORD *)(*(_QWORD *)(v4 + 48) + 8 * v13) = v19;
      ++*(_QWORD *)(v4 + 16);
    }
  }
  result = swift_release();
  *v1 = v4;
  return result;
}

id sub_1CA13EBB0()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  id result;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  void *v17;
  int64_t v18;
  unint64_t v19;
  int64_t v20;

  v1 = v0;
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EF937670);
  v2 = *v0;
  v3 = sub_1CA1F1024();
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
LABEL_28:
    result = (id)swift_release();
    *v1 = v4;
    return result;
  }
  result = (id)(v3 + 56);
  v6 = v2 + 56;
  v7 = (unint64_t)((1 << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 56 + 8 * v7)
    result = memmove(result, (const void *)(v2 + 56), 8 * v7);
  v9 = 0;
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(v2 + 16);
  v10 = 1 << *(_BYTE *)(v2 + 32);
  v11 = -1;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  v12 = v11 & *(_QWORD *)(v2 + 56);
  v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    v18 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_30;
    }
    if (v18 >= v13)
      goto LABEL_28;
    v19 = *(_QWORD *)(v6 + 8 * v18);
    ++v9;
    if (!v19)
    {
      v9 = v18 + 1;
      if (v18 + 1 >= v13)
        goto LABEL_28;
      v19 = *(_QWORD *)(v6 + 8 * v9);
      if (!v19)
      {
        v9 = v18 + 2;
        if (v18 + 2 >= v13)
          goto LABEL_28;
        v19 = *(_QWORD *)(v6 + 8 * v9);
        if (!v19)
          break;
      }
    }
LABEL_27:
    v12 = (v19 - 1) & v19;
    v15 = __clz(__rbit64(v19)) + (v9 << 6);
LABEL_12:
    v16 = 8 * v15;
    v17 = *(void **)(*(_QWORD *)(v2 + 48) + v16);
    *(_QWORD *)(*(_QWORD *)(v4 + 48) + v16) = v17;
    result = v17;
  }
  v20 = v18 + 3;
  if (v20 >= v13)
    goto LABEL_28;
  v19 = *(_QWORD *)(v6 + 8 * v20);
  if (v19)
  {
    v9 = v20;
    goto LABEL_27;
  }
  while (1)
  {
    v9 = v20 + 1;
    if (__OFADD__(v20, 1))
      break;
    if (v9 >= v13)
      goto LABEL_28;
    v19 = *(_QWORD *)(v6 + 8 * v9);
    ++v20;
    if (v19)
      goto LABEL_27;
  }
LABEL_30:
  __break(1u);
  return result;
}

void *sub_1CA13ED58()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *result;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  __int128 v18;
  __int128 v19;
  int64_t v20;
  unint64_t v21;
  int64_t v22;
  _OWORD v23[2];
  uint64_t v24;

  v1 = v0;
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EF93A308);
  v2 = *v0;
  v3 = sub_1CA1F1024();
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
LABEL_28:
    result = (void *)swift_release();
    *v1 = v4;
    return result;
  }
  result = (void *)(v3 + 56);
  v6 = v2 + 56;
  v7 = (unint64_t)((1 << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 56 + 8 * v7)
    result = memmove(result, (const void *)(v2 + 56), 8 * v7);
  v9 = 0;
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(v2 + 16);
  v10 = 1 << *(_BYTE *)(v2 + 32);
  v11 = -1;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  v12 = v11 & *(_QWORD *)(v2 + 56);
  v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    v20 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_30;
    }
    if (v20 >= v13)
      goto LABEL_28;
    v21 = *(_QWORD *)(v6 + 8 * v20);
    ++v9;
    if (!v21)
    {
      v9 = v20 + 1;
      if (v20 + 1 >= v13)
        goto LABEL_28;
      v21 = *(_QWORD *)(v6 + 8 * v9);
      if (!v21)
      {
        v9 = v20 + 2;
        if (v20 + 2 >= v13)
          goto LABEL_28;
        v21 = *(_QWORD *)(v6 + 8 * v9);
        if (!v21)
          break;
      }
    }
LABEL_27:
    v12 = (v21 - 1) & v21;
    v15 = __clz(__rbit64(v21)) + (v9 << 6);
LABEL_12:
    v16 = 40 * v15;
    result = (void *)sub_1CA0AB948(*(_QWORD *)(v2 + 48) + 40 * v15, (uint64_t)v23);
    v17 = *(_QWORD *)(v4 + 48) + v16;
    v18 = v23[0];
    v19 = v23[1];
    *(_QWORD *)(v17 + 32) = v24;
    *(_OWORD *)v17 = v18;
    *(_OWORD *)(v17 + 16) = v19;
  }
  v22 = v20 + 3;
  if (v22 >= v13)
    goto LABEL_28;
  v21 = *(_QWORD *)(v6 + 8 * v22);
  if (v21)
  {
    v9 = v22;
    goto LABEL_27;
  }
  while (1)
  {
    v9 = v22 + 1;
    if (__OFADD__(v22, 1))
      break;
    if (v9 >= v13)
      goto LABEL_28;
    v21 = *(_QWORD *)(v6 + 8 * v9);
    ++v22;
    if (v21)
      goto LABEL_27;
  }
LABEL_30:
  __break(1u);
  return result;
}

void *sub_1CA13EF24()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *result;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  _QWORD *v19;
  int64_t v20;
  unint64_t v21;
  int64_t v22;

  v1 = v0;
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EF93A318);
  v2 = *v0;
  v3 = sub_1CA1F1024();
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
LABEL_28:
    result = (void *)swift_release();
    *v1 = v4;
    return result;
  }
  result = (void *)(v3 + 56);
  v6 = v2 + 56;
  v7 = (unint64_t)((1 << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 56 + 8 * v7)
    result = memmove(result, (const void *)(v2 + 56), 8 * v7);
  v9 = 0;
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(v2 + 16);
  v10 = 1 << *(_BYTE *)(v2 + 32);
  v11 = -1;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  v12 = v11 & *(_QWORD *)(v2 + 56);
  v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    v20 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_30;
    }
    if (v20 >= v13)
      goto LABEL_28;
    v21 = *(_QWORD *)(v6 + 8 * v20);
    ++v9;
    if (!v21)
    {
      v9 = v20 + 1;
      if (v20 + 1 >= v13)
        goto LABEL_28;
      v21 = *(_QWORD *)(v6 + 8 * v9);
      if (!v21)
      {
        v9 = v20 + 2;
        if (v20 + 2 >= v13)
          goto LABEL_28;
        v21 = *(_QWORD *)(v6 + 8 * v9);
        if (!v21)
          break;
      }
    }
LABEL_27:
    v12 = (v21 - 1) & v21;
    v15 = __clz(__rbit64(v21)) + (v9 << 6);
LABEL_12:
    v16 = 16 * v15;
    v17 = (_QWORD *)(*(_QWORD *)(v2 + 48) + v16);
    v18 = v17[1];
    v19 = (_QWORD *)(*(_QWORD *)(v4 + 48) + v16);
    *v19 = *v17;
    v19[1] = v18;
    swift_bridgeObjectRetain();
    result = (void *)swift_bridgeObjectRetain();
  }
  v22 = v20 + 3;
  if (v22 >= v13)
    goto LABEL_28;
  v21 = *(_QWORD *)(v6 + 8 * v22);
  if (v21)
  {
    v9 = v22;
    goto LABEL_27;
  }
  while (1)
  {
    v9 = v22 + 1;
    if (__OFADD__(v22, 1))
      break;
    if (v9 >= v13)
      goto LABEL_28;
    v21 = *(_QWORD *)(v6 + 8 * v9);
    ++v22;
    if (v21)
      goto LABEL_27;
  }
LABEL_30:
  __break(1u);
  return result;
}

void *sub_1CA13F0DC()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *result;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  int64_t v16;
  unint64_t v17;
  int64_t v18;

  v1 = v0;
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EF93A310);
  v2 = *v0;
  v3 = sub_1CA1F1024();
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
LABEL_28:
    result = (void *)swift_release();
    *v1 = v4;
    return result;
  }
  result = (void *)(v3 + 56);
  v6 = v2 + 56;
  v7 = (unint64_t)((1 << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 56 + 8 * v7)
    result = memmove(result, (const void *)(v2 + 56), 8 * v7);
  v9 = 0;
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(v2 + 16);
  v10 = 1 << *(_BYTE *)(v2 + 32);
  v11 = -1;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  v12 = v11 & *(_QWORD *)(v2 + 56);
  v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    v16 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_30;
    }
    if (v16 >= v13)
      goto LABEL_28;
    v17 = *(_QWORD *)(v6 + 8 * v16);
    ++v9;
    if (!v17)
    {
      v9 = v16 + 1;
      if (v16 + 1 >= v13)
        goto LABEL_28;
      v17 = *(_QWORD *)(v6 + 8 * v9);
      if (!v17)
      {
        v9 = v16 + 2;
        if (v16 + 2 >= v13)
          goto LABEL_28;
        v17 = *(_QWORD *)(v6 + 8 * v9);
        if (!v17)
          break;
      }
    }
LABEL_27:
    v12 = (v17 - 1) & v17;
    v15 = __clz(__rbit64(v17)) + (v9 << 6);
LABEL_12:
    *(_QWORD *)(*(_QWORD *)(v4 + 48) + 8 * v15) = *(_QWORD *)(*(_QWORD *)(v2 + 48) + 8 * v15);
  }
  v18 = v16 + 3;
  if (v18 >= v13)
    goto LABEL_28;
  v17 = *(_QWORD *)(v6 + 8 * v18);
  if (v17)
  {
    v9 = v18;
    goto LABEL_27;
  }
  while (1)
  {
    v9 = v18 + 1;
    if (__OFADD__(v18, 1))
      break;
    if (v9 >= v13)
      goto LABEL_28;
    v17 = *(_QWORD *)(v6 + 8 * v9);
    ++v18;
    if (v17)
      goto LABEL_27;
  }
LABEL_30:
  __break(1u);
  return result;
}

void *sub_1CA13F270()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *result;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  _QWORD *v19;
  int64_t v20;
  unint64_t v21;
  int64_t v22;

  v1 = v0;
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EF93A1D0);
  v2 = *v0;
  v3 = sub_1CA1F1024();
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
LABEL_28:
    result = (void *)swift_release();
    *v1 = v4;
    return result;
  }
  result = (void *)(v3 + 56);
  v6 = v2 + 56;
  v7 = (unint64_t)((1 << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 56 + 8 * v7)
    result = memmove(result, (const void *)(v2 + 56), 8 * v7);
  v9 = 0;
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(v2 + 16);
  v10 = 1 << *(_BYTE *)(v2 + 32);
  v11 = -1;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  v12 = v11 & *(_QWORD *)(v2 + 56);
  v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    v20 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_30;
    }
    if (v20 >= v13)
      goto LABEL_28;
    v21 = *(_QWORD *)(v6 + 8 * v20);
    ++v9;
    if (!v21)
    {
      v9 = v20 + 1;
      if (v20 + 1 >= v13)
        goto LABEL_28;
      v21 = *(_QWORD *)(v6 + 8 * v9);
      if (!v21)
      {
        v9 = v20 + 2;
        if (v20 + 2 >= v13)
          goto LABEL_28;
        v21 = *(_QWORD *)(v6 + 8 * v9);
        if (!v21)
          break;
      }
    }
LABEL_27:
    v12 = (v21 - 1) & v21;
    v15 = __clz(__rbit64(v21)) + (v9 << 6);
LABEL_12:
    v16 = 16 * v15;
    v17 = (_QWORD *)(*(_QWORD *)(v2 + 48) + v16);
    v18 = v17[1];
    v19 = (_QWORD *)(*(_QWORD *)(v4 + 48) + v16);
    *v19 = *v17;
    v19[1] = v18;
    result = (void *)swift_bridgeObjectRetain();
  }
  v22 = v20 + 3;
  if (v22 >= v13)
    goto LABEL_28;
  v21 = *(_QWORD *)(v6 + 8 * v22);
  if (v21)
  {
    v9 = v22;
    goto LABEL_27;
  }
  while (1)
  {
    v9 = v22 + 1;
    if (__OFADD__(v22, 1))
      break;
    if (v9 >= v13)
      goto LABEL_28;
    v21 = *(_QWORD *)(v6 + 8 * v9);
    ++v22;
    if (v21)
      goto LABEL_27;
  }
LABEL_30:
  __break(1u);
  return result;
}

void *sub_1CA13F420()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *result;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  int64_t v16;
  unint64_t v17;
  int64_t v18;

  v1 = v0;
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EF937668);
  v2 = *v0;
  v3 = sub_1CA1F1024();
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
LABEL_28:
    result = (void *)swift_release();
    *v1 = v4;
    return result;
  }
  result = (void *)(v3 + 56);
  v6 = v2 + 56;
  v7 = (unint64_t)((1 << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 56 + 8 * v7)
    result = memmove(result, (const void *)(v2 + 56), 8 * v7);
  v9 = 0;
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(v2 + 16);
  v10 = 1 << *(_BYTE *)(v2 + 32);
  v11 = -1;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  v12 = v11 & *(_QWORD *)(v2 + 56);
  v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    v16 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_30;
    }
    if (v16 >= v13)
      goto LABEL_28;
    v17 = *(_QWORD *)(v6 + 8 * v16);
    ++v9;
    if (!v17)
    {
      v9 = v16 + 1;
      if (v16 + 1 >= v13)
        goto LABEL_28;
      v17 = *(_QWORD *)(v6 + 8 * v9);
      if (!v17)
      {
        v9 = v16 + 2;
        if (v16 + 2 >= v13)
          goto LABEL_28;
        v17 = *(_QWORD *)(v6 + 8 * v9);
        if (!v17)
          break;
      }
    }
LABEL_27:
    v12 = (v17 - 1) & v17;
    v15 = __clz(__rbit64(v17)) + (v9 << 6);
LABEL_12:
    *(_QWORD *)(*(_QWORD *)(v4 + 48) + 8 * v15) = *(_QWORD *)(*(_QWORD *)(v2 + 48) + 8 * v15);
    result = (void *)swift_retain();
  }
  v18 = v16 + 3;
  if (v18 >= v13)
    goto LABEL_28;
  v17 = *(_QWORD *)(v6 + 8 * v18);
  if (v17)
  {
    v9 = v18;
    goto LABEL_27;
  }
  while (1)
  {
    v9 = v18 + 1;
    if (__OFADD__(v18, 1))
      break;
    if (v9 >= v13)
      goto LABEL_28;
    v17 = *(_QWORD *)(v6 + 8 * v9);
    ++v18;
    if (v17)
      goto LABEL_27;
  }
LABEL_30:
  __break(1u);
  return result;
}

uint64_t sub_1CA13F5C8()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  int64_t v9;
  uint64_t v10;
  uint64_t result;
  int64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  int64_t v16;
  unint64_t v17;
  int64_t v18;
  id v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  char v23;
  unint64_t v24;
  BOOL v25;
  uint64_t v26;
  uint64_t *v27;

  v1 = v0;
  v2 = *v0;
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EF937670);
  v3 = sub_1CA1F1030();
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
    result = swift_release();
LABEL_35:
    *v1 = v4;
    return result;
  }
  v27 = v0;
  v5 = 1 << *(_BYTE *)(v2 + 32);
  v6 = v2 + 56;
  if (v5 < 64)
    v7 = ~(-1 << v5);
  else
    v7 = -1;
  v8 = v7 & *(_QWORD *)(v2 + 56);
  v9 = (unint64_t)(v5 + 63) >> 6;
  v10 = v3 + 56;
  result = swift_retain();
  v12 = 0;
  while (1)
  {
    if (v8)
    {
      v14 = __clz(__rbit64(v8));
      v8 &= v8 - 1;
      v15 = v14 | (v12 << 6);
      goto LABEL_24;
    }
    v16 = v12 + 1;
    if (__OFADD__(v12, 1))
    {
LABEL_36:
      __break(1u);
      goto LABEL_37;
    }
    if (v16 >= v9)
      goto LABEL_33;
    v17 = *(_QWORD *)(v6 + 8 * v16);
    ++v12;
    if (!v17)
    {
      v12 = v16 + 1;
      if (v16 + 1 >= v9)
        goto LABEL_33;
      v17 = *(_QWORD *)(v6 + 8 * v12);
      if (!v17)
      {
        v12 = v16 + 2;
        if (v16 + 2 >= v9)
          goto LABEL_33;
        v17 = *(_QWORD *)(v6 + 8 * v12);
        if (!v17)
          break;
      }
    }
LABEL_23:
    v8 = (v17 - 1) & v17;
    v15 = __clz(__rbit64(v17)) + (v12 << 6);
LABEL_24:
    v19 = *(id *)(*(_QWORD *)(v2 + 48) + 8 * v15);
    result = sub_1CA1F0E5C();
    v20 = -1 << *(_BYTE *)(v4 + 32);
    v21 = result & ~v20;
    v22 = v21 >> 6;
    if (((-1 << v21) & ~*(_QWORD *)(v10 + 8 * (v21 >> 6))) != 0)
    {
      v13 = __clz(__rbit64((-1 << v21) & ~*(_QWORD *)(v10 + 8 * (v21 >> 6)))) | v21 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v23 = 0;
      v24 = (unint64_t)(63 - v20) >> 6;
      do
      {
        if (++v22 == v24 && (v23 & 1) != 0)
        {
          __break(1u);
          goto LABEL_36;
        }
        v25 = v22 == v24;
        if (v22 == v24)
          v22 = 0;
        v23 |= v25;
        v26 = *(_QWORD *)(v10 + 8 * v22);
      }
      while (v26 == -1);
      v13 = __clz(__rbit64(~v26)) + (v22 << 6);
    }
    *(_QWORD *)(v10 + ((v13 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v13;
    *(_QWORD *)(*(_QWORD *)(v4 + 48) + 8 * v13) = v19;
    ++*(_QWORD *)(v4 + 16);
  }
  v18 = v16 + 3;
  if (v18 >= v9)
  {
LABEL_33:
    result = swift_release_n();
    v1 = v27;
    goto LABEL_35;
  }
  v17 = *(_QWORD *)(v6 + 8 * v18);
  if (v17)
  {
    v12 = v18;
    goto LABEL_23;
  }
  while (1)
  {
    v12 = v18 + 1;
    if (__OFADD__(v18, 1))
      break;
    if (v12 >= v9)
      goto LABEL_33;
    v17 = *(_QWORD *)(v6 + 8 * v12);
    ++v18;
    if (v17)
      goto LABEL_23;
  }
LABEL_37:
  __break(1u);
  return result;
}

uint64_t sub_1CA13F840()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  int64_t v9;
  uint64_t v10;
  uint64_t result;
  int64_t v12;
  unint64_t v13;
  uint64_t v14;
  __int128 v15;
  __int128 v16;
  unint64_t v17;
  unint64_t v18;
  int64_t v19;
  unint64_t v20;
  int64_t v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  char v25;
  unint64_t v26;
  BOOL v27;
  uint64_t v28;
  _OWORD v29[2];
  uint64_t v30;

  v1 = v0;
  v2 = *v0;
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EF93A308);
  v3 = sub_1CA1F1030();
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
    result = swift_release();
LABEL_35:
    *v1 = v4;
    return result;
  }
  v5 = 1 << *(_BYTE *)(v2 + 32);
  v6 = v2 + 56;
  if (v5 < 64)
    v7 = ~(-1 << v5);
  else
    v7 = -1;
  v8 = v7 & *(_QWORD *)(v2 + 56);
  v9 = (unint64_t)(v5 + 63) >> 6;
  v10 = v3 + 56;
  result = swift_retain();
  v12 = 0;
  while (1)
  {
    if (v8)
    {
      v17 = __clz(__rbit64(v8));
      v8 &= v8 - 1;
      v18 = v17 | (v12 << 6);
      goto LABEL_24;
    }
    v19 = v12 + 1;
    if (__OFADD__(v12, 1))
    {
LABEL_36:
      __break(1u);
      goto LABEL_37;
    }
    if (v19 >= v9)
      goto LABEL_33;
    v20 = *(_QWORD *)(v6 + 8 * v19);
    ++v12;
    if (!v20)
    {
      v12 = v19 + 1;
      if (v19 + 1 >= v9)
        goto LABEL_33;
      v20 = *(_QWORD *)(v6 + 8 * v12);
      if (!v20)
      {
        v12 = v19 + 2;
        if (v19 + 2 >= v9)
          goto LABEL_33;
        v20 = *(_QWORD *)(v6 + 8 * v12);
        if (!v20)
          break;
      }
    }
LABEL_23:
    v8 = (v20 - 1) & v20;
    v18 = __clz(__rbit64(v20)) + (v12 << 6);
LABEL_24:
    sub_1CA0AB948(*(_QWORD *)(v2 + 48) + 40 * v18, (uint64_t)v29);
    result = sub_1CA1F1000();
    v22 = -1 << *(_BYTE *)(v4 + 32);
    v23 = result & ~v22;
    v24 = v23 >> 6;
    if (((-1 << v23) & ~*(_QWORD *)(v10 + 8 * (v23 >> 6))) != 0)
    {
      v13 = __clz(__rbit64((-1 << v23) & ~*(_QWORD *)(v10 + 8 * (v23 >> 6)))) | v23 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v25 = 0;
      v26 = (unint64_t)(63 - v22) >> 6;
      do
      {
        if (++v24 == v26 && (v25 & 1) != 0)
        {
          __break(1u);
          goto LABEL_36;
        }
        v27 = v24 == v26;
        if (v24 == v26)
          v24 = 0;
        v25 |= v27;
        v28 = *(_QWORD *)(v10 + 8 * v24);
      }
      while (v28 == -1);
      v13 = __clz(__rbit64(~v28)) + (v24 << 6);
    }
    *(_QWORD *)(v10 + ((v13 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v13;
    v14 = *(_QWORD *)(v4 + 48) + 40 * v13;
    v15 = v29[0];
    v16 = v29[1];
    *(_QWORD *)(v14 + 32) = v30;
    *(_OWORD *)v14 = v15;
    *(_OWORD *)(v14 + 16) = v16;
    ++*(_QWORD *)(v4 + 16);
  }
  v21 = v19 + 3;
  if (v21 >= v9)
  {
LABEL_33:
    result = swift_release_n();
    v1 = v0;
    goto LABEL_35;
  }
  v20 = *(_QWORD *)(v6 + 8 * v21);
  if (v20)
  {
    v12 = v21;
    goto LABEL_23;
  }
  while (1)
  {
    v12 = v21 + 1;
    if (__OFADD__(v21, 1))
      break;
    if (v12 >= v9)
      goto LABEL_33;
    v20 = *(_QWORD *)(v6 + 8 * v12);
    ++v21;
    if (v20)
      goto LABEL_23;
  }
LABEL_37:
  __break(1u);
  return result;
}

unint64_t sub_1CA13FAD0()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  int64_t v9;
  uint64_t v10;
  unint64_t result;
  int64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t *v18;
  int64_t v19;
  unint64_t v20;
  int64_t v21;
  char v22[72];

  v1 = v0;
  v2 = *v0;
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EF93A318);
  v3 = sub_1CA1F1030();
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
LABEL_24:
    result = swift_release();
    *v1 = v4;
    return result;
  }
  v5 = 1 << *(_BYTE *)(v2 + 32);
  v6 = v2 + 56;
  if (v5 < 64)
    v7 = ~(-1 << v5);
  else
    v7 = -1;
  v8 = v7 & *(_QWORD *)(v2 + 56);
  v9 = (unint64_t)(v5 + 63) >> 6;
  v10 = v3 + 56;
  result = swift_retain();
  v12 = 0;
  while (1)
  {
    if (v8)
    {
      v13 = __clz(__rbit64(v8));
      v8 &= v8 - 1;
      v14 = v13 | (v12 << 6);
      goto LABEL_7;
    }
    v19 = v12 + 1;
    if (__OFADD__(v12, 1))
    {
      __break(1u);
      goto LABEL_26;
    }
    if (v19 >= v9)
      goto LABEL_23;
    v20 = *(_QWORD *)(v6 + 8 * v19);
    ++v12;
    if (!v20)
    {
      v12 = v19 + 1;
      if (v19 + 1 >= v9)
        goto LABEL_23;
      v20 = *(_QWORD *)(v6 + 8 * v12);
      if (!v20)
      {
        v12 = v19 + 2;
        if (v19 + 2 >= v9)
          goto LABEL_23;
        v20 = *(_QWORD *)(v6 + 8 * v12);
        if (!v20)
          break;
      }
    }
LABEL_22:
    v8 = (v20 - 1) & v20;
    v14 = __clz(__rbit64(v20)) + (v12 << 6);
LABEL_7:
    v15 = (uint64_t *)(*(_QWORD *)(v2 + 48) + 16 * v14);
    v16 = *v15;
    v17 = v15[1];
    sub_1CA1F13F0();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain_n();
    sub_1CA0C0D60((uint64_t)v22, v16);
    swift_bridgeObjectRelease();
    sub_1CA1F1438();
    result = sub_1CA1F0F4C();
    *(_QWORD *)(v10 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << result;
    v18 = (uint64_t *)(*(_QWORD *)(v4 + 48) + 16 * result);
    *v18 = v16;
    v18[1] = v17;
    ++*(_QWORD *)(v4 + 16);
  }
  v21 = v19 + 3;
  if (v21 >= v9)
  {
LABEL_23:
    swift_release();
    v1 = v0;
    goto LABEL_24;
  }
  v20 = *(_QWORD *)(v6 + 8 * v21);
  if (v20)
  {
    v12 = v21;
    goto LABEL_22;
  }
  while (1)
  {
    v12 = v21 + 1;
    if (__OFADD__(v21, 1))
      break;
    if (v12 >= v9)
      goto LABEL_23;
    v20 = *(_QWORD *)(v6 + 8 * v12);
    ++v21;
    if (v20)
      goto LABEL_22;
  }
LABEL_26:
  __break(1u);
  return result;
}

uint64_t sub_1CA13FD00()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t result;
  uint64_t v4;
  int64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  int64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  int64_t v15;
  unint64_t v16;
  int64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  char v22;
  unint64_t v23;
  BOOL v24;
  uint64_t v25;
  uint64_t *v26;

  v1 = v0;
  v2 = *v0;
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EF93A310);
  result = sub_1CA1F1030();
  v4 = result;
  if (!*(_QWORD *)(v2 + 16))
  {
    result = swift_release();
LABEL_35:
    *v1 = v4;
    return result;
  }
  v26 = v1;
  v5 = 0;
  v6 = v2 + 56;
  v7 = 1 << *(_BYTE *)(v2 + 32);
  if (v7 < 64)
    v8 = ~(-1 << v7);
  else
    v8 = -1;
  v9 = v8 & *(_QWORD *)(v2 + 56);
  v10 = (unint64_t)(v7 + 63) >> 6;
  v11 = result + 56;
  while (1)
  {
    if (v9)
    {
      v13 = __clz(__rbit64(v9));
      v9 &= v9 - 1;
      v14 = v13 | (v5 << 6);
      goto LABEL_24;
    }
    v15 = v5 + 1;
    if (__OFADD__(v5, 1))
    {
LABEL_36:
      __break(1u);
      goto LABEL_37;
    }
    if (v15 >= v10)
      goto LABEL_33;
    v16 = *(_QWORD *)(v6 + 8 * v15);
    ++v5;
    if (!v16)
    {
      v5 = v15 + 1;
      if (v15 + 1 >= v10)
        goto LABEL_33;
      v16 = *(_QWORD *)(v6 + 8 * v5);
      if (!v16)
      {
        v5 = v15 + 2;
        if (v15 + 2 >= v10)
          goto LABEL_33;
        v16 = *(_QWORD *)(v6 + 8 * v5);
        if (!v16)
          break;
      }
    }
LABEL_23:
    v9 = (v16 - 1) & v16;
    v14 = __clz(__rbit64(v16)) + (v5 << 6);
LABEL_24:
    v18 = *(_QWORD *)(*(_QWORD *)(v2 + 48) + 8 * v14);
    result = sub_1CA1F13E4();
    v19 = -1 << *(_BYTE *)(v4 + 32);
    v20 = result & ~v19;
    v21 = v20 >> 6;
    if (((-1 << v20) & ~*(_QWORD *)(v11 + 8 * (v20 >> 6))) != 0)
    {
      v12 = __clz(__rbit64((-1 << v20) & ~*(_QWORD *)(v11 + 8 * (v20 >> 6)))) | v20 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v22 = 0;
      v23 = (unint64_t)(63 - v19) >> 6;
      do
      {
        if (++v21 == v23 && (v22 & 1) != 0)
        {
          __break(1u);
          goto LABEL_36;
        }
        v24 = v21 == v23;
        if (v21 == v23)
          v21 = 0;
        v22 |= v24;
        v25 = *(_QWORD *)(v11 + 8 * v21);
      }
      while (v25 == -1);
      v12 = __clz(__rbit64(~v25)) + (v21 << 6);
    }
    *(_QWORD *)(v11 + ((v12 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v12;
    *(_QWORD *)(*(_QWORD *)(v4 + 48) + 8 * v12) = v18;
    ++*(_QWORD *)(v4 + 16);
  }
  v17 = v15 + 3;
  if (v17 >= v10)
  {
LABEL_33:
    result = swift_release();
    v1 = v26;
    goto LABEL_35;
  }
  v16 = *(_QWORD *)(v6 + 8 * v17);
  if (v16)
  {
    v5 = v17;
    goto LABEL_23;
  }
  while (1)
  {
    v5 = v17 + 1;
    if (__OFADD__(v17, 1))
      break;
    if (v5 >= v10)
      goto LABEL_33;
    v16 = *(_QWORD *)(v6 + 8 * v5);
    ++v17;
    if (v16)
      goto LABEL_23;
  }
LABEL_37:
  __break(1u);
  return result;
}

uint64_t sub_1CA13FF60()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t result;
  int64_t v11;
  unint64_t v12;
  _QWORD *v13;
  unint64_t v14;
  unint64_t v15;
  int64_t v16;
  unint64_t v17;
  int64_t v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  char v25;
  unint64_t v26;
  BOOL v27;
  uint64_t v28;
  int64_t v29;

  v1 = v0;
  v2 = *v0;
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EF93A1D0);
  v3 = sub_1CA1F1030();
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
    result = swift_release();
LABEL_35:
    *v1 = v4;
    return result;
  }
  v5 = 1 << *(_BYTE *)(v2 + 32);
  v6 = v2 + 56;
  if (v5 < 64)
    v7 = ~(-1 << v5);
  else
    v7 = -1;
  v8 = v7 & *(_QWORD *)(v2 + 56);
  v29 = (unint64_t)(v5 + 63) >> 6;
  v9 = v3 + 56;
  result = swift_retain();
  v11 = 0;
  while (1)
  {
    if (v8)
    {
      v14 = __clz(__rbit64(v8));
      v8 &= v8 - 1;
      v15 = v14 | (v11 << 6);
      goto LABEL_24;
    }
    v16 = v11 + 1;
    if (__OFADD__(v11, 1))
    {
LABEL_36:
      __break(1u);
      goto LABEL_37;
    }
    if (v16 >= v29)
      goto LABEL_33;
    v17 = *(_QWORD *)(v6 + 8 * v16);
    ++v11;
    if (!v17)
    {
      v11 = v16 + 1;
      if (v16 + 1 >= v29)
        goto LABEL_33;
      v17 = *(_QWORD *)(v6 + 8 * v11);
      if (!v17)
      {
        v11 = v16 + 2;
        if (v16 + 2 >= v29)
          goto LABEL_33;
        v17 = *(_QWORD *)(v6 + 8 * v11);
        if (!v17)
          break;
      }
    }
LABEL_23:
    v8 = (v17 - 1) & v17;
    v15 = __clz(__rbit64(v17)) + (v11 << 6);
LABEL_24:
    v19 = (uint64_t *)(*(_QWORD *)(v2 + 48) + 16 * v15);
    v20 = *v19;
    v21 = v19[1];
    sub_1CA1F13F0();
    swift_bridgeObjectRetain();
    sub_1CA1F0A30();
    result = sub_1CA1F1438();
    v22 = -1 << *(_BYTE *)(v4 + 32);
    v23 = result & ~v22;
    v24 = v23 >> 6;
    if (((-1 << v23) & ~*(_QWORD *)(v9 + 8 * (v23 >> 6))) != 0)
    {
      v12 = __clz(__rbit64((-1 << v23) & ~*(_QWORD *)(v9 + 8 * (v23 >> 6)))) | v23 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v25 = 0;
      v26 = (unint64_t)(63 - v22) >> 6;
      do
      {
        if (++v24 == v26 && (v25 & 1) != 0)
        {
          __break(1u);
          goto LABEL_36;
        }
        v27 = v24 == v26;
        if (v24 == v26)
          v24 = 0;
        v25 |= v27;
        v28 = *(_QWORD *)(v9 + 8 * v24);
      }
      while (v28 == -1);
      v12 = __clz(__rbit64(~v28)) + (v24 << 6);
    }
    *(_QWORD *)(v9 + ((v12 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v12;
    v13 = (_QWORD *)(*(_QWORD *)(v4 + 48) + 16 * v12);
    *v13 = v20;
    v13[1] = v21;
    ++*(_QWORD *)(v4 + 16);
  }
  v18 = v16 + 3;
  if (v18 >= v29)
  {
LABEL_33:
    result = swift_release_n();
    v1 = v0;
    goto LABEL_35;
  }
  v17 = *(_QWORD *)(v6 + 8 * v18);
  if (v17)
  {
    v11 = v18;
    goto LABEL_23;
  }
  while (1)
  {
    v11 = v18 + 1;
    if (__OFADD__(v18, 1))
      break;
    if (v11 >= v29)
      goto LABEL_33;
    v17 = *(_QWORD *)(v6 + 8 * v11);
    ++v18;
    if (v17)
      goto LABEL_23;
  }
LABEL_37:
  __break(1u);
  return result;
}

uint64_t sub_1CA14020C()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t result;
  int64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  int64_t v15;
  unint64_t v16;
  int64_t v17;
  uint64_t v18;
  void (*v19)(char *);
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  char v23;
  unint64_t v24;
  BOOL v25;
  uint64_t v26;
  int64_t v27;
  char v28[72];

  v1 = v0;
  v2 = *v0;
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EF937668);
  v3 = sub_1CA1F1030();
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
    result = swift_release();
LABEL_35:
    *v1 = v4;
    return result;
  }
  v5 = 1 << *(_BYTE *)(v2 + 32);
  v6 = v2 + 56;
  if (v5 < 64)
    v7 = ~(-1 << v5);
  else
    v7 = -1;
  v8 = v7 & *(_QWORD *)(v2 + 56);
  v27 = (unint64_t)(v5 + 63) >> 6;
  v9 = v3 + 56;
  result = swift_retain();
  v11 = 0;
  while (1)
  {
    if (v8)
    {
      v13 = __clz(__rbit64(v8));
      v8 &= v8 - 1;
      v14 = v13 | (v11 << 6);
      goto LABEL_24;
    }
    v15 = v11 + 1;
    if (__OFADD__(v11, 1))
    {
LABEL_36:
      __break(1u);
      goto LABEL_37;
    }
    if (v15 >= v27)
      goto LABEL_33;
    v16 = *(_QWORD *)(v6 + 8 * v15);
    ++v11;
    if (!v16)
    {
      v11 = v15 + 1;
      if (v15 + 1 >= v27)
        goto LABEL_33;
      v16 = *(_QWORD *)(v6 + 8 * v11);
      if (!v16)
      {
        v11 = v15 + 2;
        if (v15 + 2 >= v27)
          goto LABEL_33;
        v16 = *(_QWORD *)(v6 + 8 * v11);
        if (!v16)
          break;
      }
    }
LABEL_23:
    v8 = (v16 - 1) & v16;
    v14 = __clz(__rbit64(v16)) + (v11 << 6);
LABEL_24:
    v18 = *(_QWORD *)(*(_QWORD *)(v2 + 48) + 8 * v14);
    sub_1CA1F13F0();
    v19 = *(void (**)(char *))(*(_QWORD *)v18 + 272);
    swift_retain();
    v19(v28);
    result = sub_1CA1F1438();
    v20 = -1 << *(_BYTE *)(v4 + 32);
    v21 = result & ~v20;
    v22 = v21 >> 6;
    if (((-1 << v21) & ~*(_QWORD *)(v9 + 8 * (v21 >> 6))) != 0)
    {
      v12 = __clz(__rbit64((-1 << v21) & ~*(_QWORD *)(v9 + 8 * (v21 >> 6)))) | v21 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v23 = 0;
      v24 = (unint64_t)(63 - v20) >> 6;
      do
      {
        if (++v22 == v24 && (v23 & 1) != 0)
        {
          __break(1u);
          goto LABEL_36;
        }
        v25 = v22 == v24;
        if (v22 == v24)
          v22 = 0;
        v23 |= v25;
        v26 = *(_QWORD *)(v9 + 8 * v22);
      }
      while (v26 == -1);
      v12 = __clz(__rbit64(~v26)) + (v22 << 6);
    }
    *(_QWORD *)(v9 + ((v12 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v12;
    *(_QWORD *)(*(_QWORD *)(v4 + 48) + 8 * v12) = v18;
    ++*(_QWORD *)(v4 + 16);
  }
  v17 = v15 + 3;
  if (v17 >= v27)
  {
LABEL_33:
    result = swift_release_n();
    v1 = v0;
    goto LABEL_35;
  }
  v16 = *(_QWORD *)(v6 + 8 * v17);
  if (v16)
  {
    v11 = v17;
    goto LABEL_23;
  }
  while (1)
  {
    v11 = v17 + 1;
    if (__OFADD__(v17, 1))
      break;
    if (v11 >= v27)
      goto LABEL_33;
    v16 = *(_QWORD *)(v6 + 8 * v11);
    ++v17;
    if (v16)
      goto LABEL_23;
  }
LABEL_37:
  __break(1u);
  return result;
}

uint64_t destroy for MAFeatureVector()
{
  swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

_QWORD *initializeWithCopy for MAFeatureVector(_QWORD *a1, _QWORD *a2)
{
  uint64_t v3;
  uint64_t v4;

  v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  v4 = a2[3];
  a1[2] = a2[2];
  a1[3] = v4;
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

_QWORD *assignWithCopy for MAFeatureVector(_QWORD *a1, _QWORD *a2)
{
  *a1 = *a2;
  swift_retain();
  swift_release();
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[2] = a2[2];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[3] = a2[3];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

_OWORD *assignWithTake for MAFeatureVector(_OWORD *a1, _OWORD *a2)
{
  swift_release();
  *a1 = *a2;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  a1[1] = a2[1];
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for MAFeatureVector(uint64_t *a1, int a2)
{
  uint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *((_BYTE *)a1 + 32))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for MAFeatureVector(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)(result + 16) = 0;
    *(_QWORD *)(result + 24) = 0;
    *(_QWORD *)result = a2 ^ 0x80000000;
    *(_QWORD *)(result + 8) = 0;
    if (a3 < 0)
      *(_BYTE *)(result + 32) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)result = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 32) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for MAFeatureVector()
{
  return &type metadata for MAFeatureVector;
}

uint64_t sub_1CA1406B8(uint64_t a1)
{
  unint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char v8;
  uint64_t v9;
  uint64_t result;
  uint64_t v11;
  char v12;
  uint64_t v13;

  v2 = a1 & 0xC000000000000001;
  if ((a1 & 0xC000000000000001) != 0)
  {
    v3 = sub_1CA1F0F58();
    v5 = v4;
    v6 = sub_1CA1F0FE8();
    v8 = MEMORY[0x1CAA4A684](v3, v5, v6, v7);
    swift_bridgeObjectRelease();
    if ((v8 & 1) != 0)
    {
LABEL_3:
      sub_1CA0C7548(v3, v5, v2 != 0);
      return 0;
    }
LABEL_7:
    sub_1CA14F840(v3, v5, v2 != 0, a1);
    v9 = v13;
    sub_1CA0C7548(v3, v5, v2 != 0);
    return v9;
  }
  result = sub_1CA14FAA8(a1);
  if ((v12 & 1) == 0)
  {
    v5 = v11;
    if (*(_DWORD *)(a1 + 36) == (_DWORD)v11)
    {
      v3 = result;
      if (result == 1 << *(_BYTE *)(a1 + 32))
        goto LABEL_3;
      goto LABEL_7;
    }
    __break(1u);
  }
  __break(1u);
  return result;
}

uint64_t sub_1CA1407C4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t result;
  int v5;
  char v6;
  _BYTE v7[40];
  _BYTE v8[32];

  result = sub_1CA0CF958(a1);
  if ((v6 & 1) != 0)
    goto LABEL_8;
  if (*(_DWORD *)(a1 + 36) != v5)
  {
    __break(1u);
LABEL_8:
    __break(1u);
    return result;
  }
  if (result == 1 << *(_BYTE *)(a1 + 32))
  {
    *(_QWORD *)(a2 + 64) = 0;
    *(_OWORD *)(a2 + 32) = 0u;
    *(_OWORD *)(a2 + 48) = 0u;
    *(_OWORD *)a2 = 0u;
    *(_OWORD *)(a2 + 16) = 0u;
  }
  else
  {
    sub_1CA14FB30((uint64_t)v7, (uint64_t)v8, result, v5, 0, a1);
    sub_1CA0AB948((uint64_t)v7, a2);
    sub_1CA0B6A98((uint64_t)v8, a2 + 40);
    return sub_1CA0B6AD4((uint64_t)v7, &qword_1EF93A398);
  }
  return result;
}

uint64_t sub_1CA140888(uint64_t a1, double a2)
{
  uint64_t v2;
  uint64_t v5;
  void *v6;
  id v7;
  id v8;

  v5 = swift_bridgeObjectRetain();
  v6 = (void *)sub_1CA1406B8(v5);
  swift_bridgeObjectRelease();
  if (v6 && (v7 = objc_msgSend(v6, sel_graph), v6, v7))
  {
    v8 = objc_msgSend(v7, sel_graphReference);
    swift_unknownObjectRelease();
    return (*(uint64_t (**)(id, uint64_t, double))(v2 + 208))(v8, a1, a2);
  }
  else
  {
    swift_bridgeObjectRelease();
    return 0;
  }
}

void sub_1CA14093C(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  id v12;
  int64_t v13;
  unint64_t v14;
  uint64_t v15;
  id v16;
  void *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  void *v24;

  v1 = a1;
  if ((a1 & 0xC000000000000001) != 0)
  {
    swift_bridgeObjectRetain();
    sub_1CA1F0F64();
    sub_1CA0AB910(0, (unint64_t *)&qword_1EF93A320);
    sub_1CA0C0614();
    sub_1CA1F0CC4();
    v1 = v19;
    v18 = v20;
    v2 = v21;
    v3 = v22;
    v4 = v23;
  }
  else
  {
    v5 = -1 << *(_BYTE *)(a1 + 32);
    v18 = a1 + 56;
    v2 = ~v5;
    v6 = -v5;
    if (v6 < 64)
      v7 = ~(-1 << v6);
    else
      v7 = -1;
    v4 = v7 & *(_QWORD *)(a1 + 56);
    swift_bridgeObjectRetain();
    v3 = 0;
  }
  v8 = (unint64_t)(v2 + 64) >> 6;
  if (v1 < 0)
    goto LABEL_10;
  while (1)
  {
    if (v4)
    {
      v9 = (v4 - 1) & v4;
      v10 = __clz(__rbit64(v4)) | (v3 << 6);
      v11 = v3;
      goto LABEL_29;
    }
    v13 = v3 + 1;
    if (__OFADD__(v3, 1))
      break;
    if (v13 >= v8)
      goto LABEL_32;
    v14 = *(_QWORD *)(v18 + 8 * v13);
    v11 = v3 + 1;
    if (!v14)
    {
      v11 = v3 + 2;
      if (v3 + 2 >= v8)
        goto LABEL_32;
      v14 = *(_QWORD *)(v18 + 8 * v11);
      if (!v14)
      {
        v11 = v3 + 3;
        if (v3 + 3 >= v8)
          goto LABEL_32;
        v14 = *(_QWORD *)(v18 + 8 * v11);
        if (!v14)
        {
          v11 = v3 + 4;
          if (v3 + 4 >= v8)
            goto LABEL_32;
          v14 = *(_QWORD *)(v18 + 8 * v11);
          if (!v14)
          {
            v11 = v3 + 5;
            if (v3 + 5 >= v8)
              goto LABEL_32;
            v14 = *(_QWORD *)(v18 + 8 * v11);
            if (!v14)
            {
              v15 = v3 + 6;
              while (v8 != v15)
              {
                v14 = *(_QWORD *)(v18 + 8 * v15++);
                if (v14)
                {
                  v11 = v15 - 1;
                  goto LABEL_28;
                }
              }
LABEL_32:
              sub_1CA0B6A14();
              return;
            }
          }
        }
      }
    }
LABEL_28:
    v9 = (v14 - 1) & v14;
    v10 = __clz(__rbit64(v14)) + (v11 << 6);
LABEL_29:
    v12 = *(id *)(*(_QWORD *)(v1 + 48) + 8 * v10);
    if (!v12)
      goto LABEL_32;
    while (1)
    {
      v16 = v12;
      sub_1CA0BDD74(&v24, v16);
      v17 = v24;

      v3 = v11;
      v4 = v9;
      if ((v1 & 0x8000000000000000) == 0)
        break;
LABEL_10:
      if (sub_1CA1F0FD0())
      {
        sub_1CA0AB910(0, (unint64_t *)&qword_1EF93A320);
        swift_unknownObjectRetain();
        swift_dynamicCast();
        v12 = v24;
        swift_unknownObjectRelease();
        v11 = v3;
        v9 = v4;
        if (v12)
          continue;
      }
      goto LABEL_32;
    }
  }
  __break(1u);
}

uint64_t sub_1CA140C08@<X0>(uint64_t result@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  __int128 v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  __int128 v12;
  uint64_t v13;

  if ((result & 0xC000000000000001) != 0)
  {
    sub_1CA1F0F64();
    sub_1CA0AB910(0, (unint64_t *)&qword_1EF93A320);
    sub_1CA0C0614();
    sub_1CA1F0CC4();
    result = v10;
    v3 = v11;
    v4 = v12;
    v5 = v13;
  }
  else
  {
    v6 = -1;
    v7 = -1 << *(_BYTE *)(result + 32);
    v8 = ~v7;
    v3 = result + 56;
    v9 = -v7;
    if (v9 < 64)
      v6 = ~(-1 << v9);
    v5 = v6 & *(_QWORD *)(result + 56);
    v4 = (unint64_t)v8;
  }
  *(_QWORD *)a2 = result;
  *(_QWORD *)(a2 + 8) = v3;
  *(_OWORD *)(a2 + 16) = v4;
  *(_QWORD *)(a2 + 32) = v5;
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

id MASlice.graphReference.getter()
{
  uint64_t v0;

  return *(id *)(v0 + 16);
}

double sub_1CA140CDC()
{
  uint64_t v0;

  return *(double *)(v0 + 32);
}

void sub_1CA140CE4(double a1)
{
  uint64_t v1;

  *(double *)(v1 + 32) = a1;
}

double static MASlice.MASliceFullPrecision.getter()
{
  return 1.0;
}

double static MASlice.MASliceLowPrecision.getter()
{
  return 0.0;
}

double sub_1CA140CFC(uint64_t a1, uint64_t a2, double a3)
{
  uint64_t v6;
  double result;

  v6 = swift_allocObject();
  *(_QWORD *)(v6 + 40) = MEMORY[0x1E0DEE9E0];
  result = 0.0;
  *(_OWORD *)(v6 + 48) = 0u;
  *(_OWORD *)(v6 + 64) = 0u;
  *(_QWORD *)(v6 + 16) = a1;
  *(_QWORD *)(v6 + 24) = a2;
  *(double *)(v6 + 32) = a3;
  return result;
}

void sub_1CA140D5C()
{
  uint64_t v0;
  void *v1;
  id v2;
  void *v3;
  unsigned int v4;
  id v5;
  void *v6;
  id v7;

  v1 = *(void **)(v0 + 16);
  v2 = objc_msgSend(v1, sel_concreteGraph);
  if (!v2)
    goto LABEL_8;
  v3 = v2;
  v4 = objc_msgSend(v2, sel_hasPendingRead);

  if (!v4)
  {
    __break(1u);
LABEL_8:
    __break(1u);
    goto LABEL_9;
  }
  if (*(_QWORD *)(v0 + 24))
  {
LABEL_6:
    swift_bridgeObjectRetain();
    return;
  }
  v5 = objc_msgSend(v1, sel_concreteGraph);
  if (v5)
  {
    v6 = v5;
    v7 = objc_msgSend(v5, sel_allNodes);

    sub_1CA0AB910(0, (unint64_t *)&qword_1EF93A320);
    sub_1CA0C0614();
    sub_1CA1F0C94();

    goto LABEL_6;
  }
LABEL_9:
  __break(1u);
}

uint64_t sub_1CA140E58()
{
  id *v0;
  id v1;
  void *v2;
  unsigned int v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t result;
  uint64_t v8;

  v1 = objc_msgSend(v0[2], sel_concreteGraph);
  if (!v1)
    goto LABEL_8;
  v2 = v1;
  v3 = objc_msgSend(v1, sel_hasPendingRead);

  if (!v3)
  {
    __break(1u);
LABEL_8:
    __break(1u);
    result = swift_release();
    __break(1u);
    return result;
  }
  v4 = (*((uint64_t (**)(void))*v0 + 27))();
  swift_retain();
  v5 = sub_1CA14FBF8(v4, (uint64_t)v0);
  swift_release();
  if (*(_QWORD *)(v5 + 16))
  {
    __swift_instantiateConcreteTypeFromMangledName(&qword_1EF93A330);
    v6 = sub_1CA1F1264();
  }
  else
  {
    v6 = MEMORY[0x1E0DEE9E0];
  }
  v8 = v6;
  sub_1CA14FE50(v5, 1, &v8);
  swift_bridgeObjectRelease();
  return v4;
}

BOOL sub_1CA140F5C()
{
  uint64_t v0;

  return *(double *)(v0 + 32) != 1.0;
}

void sub_1CA140F70(uint64_t a1, uint64_t a2, double a3)
{
  uint64_t v3;
  uint64_t v4;
  id v8;
  void *v9;
  unsigned int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t (*v13)(uint64_t, uint64_t, uint64_t, double);
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  double v20;
  void *v21;
  id v22;
  char v23;
  id v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  id v28;
  char v29;
  unint64_t v30;
  id v31;
  char v32;
  id v33;
  unint64_t v34;
  id v35;
  char v36;
  unint64_t v37;
  unint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  void *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  unint64_t v47;
  uint64_t v48;

  v8 = objc_msgSend(*(id *)(v3 + 16), sel_concreteGraph);
  if (!v8)
    goto LABEL_40;
  v9 = v8;
  v10 = objc_msgSend(v8, sel_hasPendingRead);

  if (!v10)
    goto LABEL_39;
  v11 = (*(uint64_t (**)(void))(*(_QWORD *)v3 + 216))();
  v12 = MEMORY[0x1E0DEE9D8];
  v48 = MEMORY[0x1E0DEE9D8];
  v13 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, double))(v3 + 48);
  if (v13)
  {
    swift_retain();
    v14 = v13(v11, a1, a2, a3);
    if (v4)
    {
      sub_1CA0AAE34((uint64_t)v13);
      swift_bridgeObjectRelease();
      return;
    }
    if (!v14)
    {
      sub_1CA0AAE34((uint64_t)v13);
      v12 = MEMORY[0x1E0DEE9D8];
      v15 = *(_QWORD *)(MEMORY[0x1E0DEE9D8] + 16);
      if (v15)
        goto LABEL_9;
LABEL_37:
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      return;
    }
    sub_1CA0B295C(v14);
    sub_1CA0AAE34((uint64_t)v13);
    v12 = v48;
  }
  v15 = *(_QWORD *)(v12 + 16);
  if (!v15)
    goto LABEL_37;
LABEL_9:
  v16 = v12 + 32;
  v47 = v11 & 0xC000000000000001;
  v45 = v11 + 56;
  swift_bridgeObjectRetain();
  v17 = 0;
  v18 = MEMORY[0x1E0DEE9D8];
  v46 = v12 + 32;
  v43 = v15;
  v44 = v11;
  v40 = v12;
  while (v17 < *(_QWORD *)(v12 + 16))
  {
    v19 = v16 + 16 * v17;
    v20 = *(double *)(v19 + 8);
    if (v20 >= a3)
    {
      v21 = *(void **)v19;
      if (v47)
      {
        v22 = v21;
        v23 = sub_1CA1F0FDC();

        if ((v23 & 1) == 0)
          goto LABEL_29;

      }
      else
      {
        if (!*(_QWORD *)(v11 + 16))
        {
          v33 = v21;
LABEL_29:
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
            sub_1CA0CD508(0, *(_QWORD *)(v18 + 16) + 1, 1);
          v38 = *(_QWORD *)(v18 + 16);
          v37 = *(_QWORD *)(v18 + 24);
          if (v38 >= v37 >> 1)
            sub_1CA0CD508(v37 > 1, v38 + 1, 1);
          *(_QWORD *)(v18 + 16) = v38 + 1;
          v39 = v18 + 16 * v38;
          *(_QWORD *)(v39 + 32) = v21;
          *(double *)(v39 + 40) = v20;
          v16 = v46;
          goto LABEL_11;
        }
        v24 = v21;
        v25 = sub_1CA1F0E5C();
        v26 = -1 << *(_BYTE *)(v11 + 32);
        v27 = v25 & ~v26;
        if (((*(_QWORD *)(v45 + ((v27 >> 3) & 0xFFFFFFFFFFFFF8)) >> v27) & 1) == 0)
        {
          v12 = v40;
          goto LABEL_29;
        }
        sub_1CA0AB910(0, (unint64_t *)&qword_1EF93A320);
        v28 = *(id *)(*(_QWORD *)(v11 + 48) + 8 * v27);
        v29 = sub_1CA1F0E68();

        if ((v29 & 1) == 0)
        {
          v41 = ~v26;
          v42 = v24;
          v30 = (v27 + 1) & ~v26;
          if (((*(_QWORD *)(v45 + ((v30 >> 3) & 0xFFFFFFFFFFFFF8)) >> v30) & 1) == 0)
          {
            v15 = v43;
            v11 = v44;
            v12 = v40;
            goto LABEL_29;
          }
          v31 = *(id *)(*(_QWORD *)(v44 + 48) + 8 * v30);
          v32 = sub_1CA1F0E68();

          if ((v32 & 1) == 0)
          {
            v12 = v40;
            v34 = (v30 + 1) & v41;
            v11 = v44;
            v15 = v43;
            v16 = v46;
            if (((*(_QWORD *)(v45 + ((v34 >> 3) & 0xFFFFFFFFFFFFF8)) >> v34) & 1) != 0)
            {
              while (1)
              {
                v35 = *(id *)(*(_QWORD *)(v11 + 48) + 8 * v34);
                v36 = sub_1CA1F0E68();

                if ((v36 & 1) != 0)
                  break;
                v34 = (v34 + 1) & v41;
                v11 = v44;
                v15 = v43;
                if (((*(_QWORD *)(v45 + ((v34 >> 3) & 0xFFFFFFFFFFFFF8)) >> v34) & 1) == 0)
                  goto LABEL_29;
              }

              v15 = v43;
              v11 = v44;
              goto LABEL_11;
            }
            goto LABEL_29;
          }
        }

        v15 = v43;
        v11 = v44;
        v16 = v46;
        v12 = v40;
      }
    }
LABEL_11:
    if (++v17 == v15)
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease_n();
      return;
    }
  }
  __break(1u);
LABEL_39:
  __break(1u);
LABEL_40:
  __break(1u);
}

void sub_1CA1413A0(void *a1)
{
  id *v1;
  id v3;
  void *v4;
  unsigned int v5;
  uint64_t v6;

  v3 = objc_msgSend(v1[2], sel_concreteGraph);
  if (v3)
  {
    v4 = v3;
    v5 = objc_msgSend(v3, sel_hasPendingRead);

    if (v5)
    {
      v6 = (*((uint64_t (**)(void))*v1 + 27))();
      sub_1CA0BDC28(a1, v6);
      swift_bridgeObjectRelease();
      return;
    }
    __break(1u);
  }
  __break(1u);
}

void sub_1CA141430()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  id v14;
  int64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  id v20;
  unint64_t v21;
  unint64_t v22;
  _QWORD *v23;
  __int128 v24;
  __int128 v25;
  int64_t v26;
  uint64_t v27;
  _OWORD v28[2];
  uint64_t v29;
  __int128 v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;

  v1 = (*(uint64_t (**)(void))(*(_QWORD *)v0 + 216))();
  v2 = v1;
  if ((v1 & 0xC000000000000001) != 0)
  {
    sub_1CA1F0F64();
    sub_1CA0AB910(0, (unint64_t *)&qword_1EF93A320);
    sub_1CA0C0614();
    sub_1CA1F0CC4();
    v2 = v32;
    v27 = v33;
    v3 = v34;
    v4 = v35;
    v5 = v36;
  }
  else
  {
    v4 = 0;
    v6 = -1 << *(_BYTE *)(v1 + 32);
    v27 = v1 + 56;
    v3 = ~v6;
    v7 = -v6;
    if (v7 < 64)
      v8 = ~(-1 << v7);
    else
      v8 = -1;
    v5 = v8 & *(_QWORD *)(v1 + 56);
  }
  v26 = (unint64_t)(v3 + 64) >> 6;
  v9 = (_QWORD *)MEMORY[0x1E0DEE9D8];
  if (v2 < 0)
    goto LABEL_10;
  while (1)
  {
    if (v5)
    {
      v10 = (v5 - 1) & v5;
      v11 = __clz(__rbit64(v5)) | (v4 << 6);
      v12 = v4;
      goto LABEL_27;
    }
    v15 = v4 + 1;
    if (__OFADD__(v4, 1))
      break;
    if (v15 >= v26)
      goto LABEL_34;
    v16 = *(_QWORD *)(v27 + 8 * v15);
    v12 = v4 + 1;
    if (!v16)
    {
      v12 = v4 + 2;
      if (v4 + 2 >= v26)
        goto LABEL_34;
      v16 = *(_QWORD *)(v27 + 8 * v12);
      if (!v16)
      {
        v12 = v4 + 3;
        if (v4 + 3 >= v26)
          goto LABEL_34;
        v16 = *(_QWORD *)(v27 + 8 * v12);
        if (!v16)
        {
          v12 = v4 + 4;
          if (v4 + 4 >= v26)
            goto LABEL_34;
          v16 = *(_QWORD *)(v27 + 8 * v12);
          if (!v16)
          {
            v17 = v4 + 5;
            while (v26 != v17)
            {
              v16 = *(_QWORD *)(v27 + 8 * v17++);
              if (v16)
              {
                v12 = v17 - 1;
                goto LABEL_26;
              }
            }
LABEL_34:
            sub_1CA0B6A14();
            return;
          }
        }
      }
    }
LABEL_26:
    v10 = (v16 - 1) & v16;
    v11 = __clz(__rbit64(v16)) + (v12 << 6);
LABEL_27:
    v14 = *(id *)(*(_QWORD *)(v2 + 48) + 8 * v11);
    if (!v14)
      goto LABEL_34;
    while (1)
    {
      v31 = sub_1CA0AB910(0, (unint64_t *)&qword_1EF93A320);
      *(_QWORD *)&v30 = v14;
      __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_1ED852A58);
      v18 = swift_allocObject();
      *(_OWORD *)(v18 + 16) = xmmword_1CA1F9520;
      *(_QWORD *)(v18 + 32) = v14;
      *(_QWORD *)&v28[0] = v18;
      sub_1CA1F0B14();
      v19 = *(_QWORD *)&v28[0];
      sub_1CA0AFCC0(&v30, v28);
      v29 = v19;
      v20 = v14;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        v9 = sub_1CA0E5F04(0, v9[2] + 1, 1, v9);
      v22 = v9[2];
      v21 = v9[3];
      if (v22 >= v21 >> 1)
        v9 = sub_1CA0E5F04((_QWORD *)(v21 > 1), v22 + 1, 1, v9);
      v9[2] = v22 + 1;
      v23 = &v9[5 * v22];
      v24 = v28[0];
      v25 = v28[1];
      v23[8] = v29;
      *((_OWORD *)v23 + 2) = v24;
      *((_OWORD *)v23 + 3) = v25;

      v4 = v12;
      v5 = v10;
      if ((v2 & 0x8000000000000000) == 0)
        break;
LABEL_10:
      v13 = sub_1CA1F0FD0();
      if (v13)
      {
        *(_QWORD *)&v30 = v13;
        sub_1CA0AB910(0, (unint64_t *)&qword_1EF93A320);
        swift_unknownObjectRetain();
        swift_dynamicCast();
        v14 = *(id *)&v28[0];
        swift_unknownObjectRelease();
        v12 = v4;
        v10 = v5;
        if (v14)
          continue;
      }
      goto LABEL_34;
    }
  }
  __break(1u);
}

void sub_1CA1417C8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  id v14;
  int64_t v15;
  unint64_t v16;
  uint64_t v17;
  id v18;
  unint64_t v19;
  unint64_t v20;
  _QWORD *v21;
  __int128 v22;
  __int128 v23;
  int64_t v24;
  uint64_t v25;
  _OWORD v26[2];
  uint64_t v27;
  __int128 v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;

  v1 = (*(uint64_t (**)(void))(*(_QWORD *)v0 + 216))();
  v2 = v1;
  if ((v1 & 0xC000000000000001) != 0)
  {
    sub_1CA1F0F64();
    sub_1CA0AB910(0, (unint64_t *)&qword_1EF93A320);
    sub_1CA0C0614();
    sub_1CA1F0CC4();
    v2 = v30;
    v25 = v31;
    v3 = v32;
    v4 = v33;
    v5 = v34;
  }
  else
  {
    v4 = 0;
    v6 = -1 << *(_BYTE *)(v1 + 32);
    v25 = v1 + 56;
    v3 = ~v6;
    v7 = -v6;
    if (v7 < 64)
      v8 = ~(-1 << v7);
    else
      v8 = -1;
    v5 = v8 & *(_QWORD *)(v1 + 56);
  }
  v24 = (unint64_t)(v3 + 64) >> 6;
  v9 = (_QWORD *)MEMORY[0x1E0DEE9D8];
  if (v2 < 0)
    goto LABEL_10;
  while (1)
  {
    if (v5)
    {
      v10 = (v5 - 1) & v5;
      v11 = __clz(__rbit64(v5)) | (v4 << 6);
      v12 = v4;
      goto LABEL_27;
    }
    v15 = v4 + 1;
    if (__OFADD__(v4, 1))
      break;
    if (v15 >= v24)
      goto LABEL_34;
    v16 = *(_QWORD *)(v25 + 8 * v15);
    v12 = v4 + 1;
    if (!v16)
    {
      v12 = v4 + 2;
      if (v4 + 2 >= v24)
        goto LABEL_34;
      v16 = *(_QWORD *)(v25 + 8 * v12);
      if (!v16)
      {
        v12 = v4 + 3;
        if (v4 + 3 >= v24)
          goto LABEL_34;
        v16 = *(_QWORD *)(v25 + 8 * v12);
        if (!v16)
        {
          v12 = v4 + 4;
          if (v4 + 4 >= v24)
            goto LABEL_34;
          v16 = *(_QWORD *)(v25 + 8 * v12);
          if (!v16)
          {
            v17 = v4 + 5;
            while (v24 != v17)
            {
              v16 = *(_QWORD *)(v25 + 8 * v17++);
              if (v16)
              {
                v12 = v17 - 1;
                goto LABEL_26;
              }
            }
LABEL_34:
            sub_1CA0B6A14();
            return;
          }
        }
      }
    }
LABEL_26:
    v10 = (v16 - 1) & v16;
    v11 = __clz(__rbit64(v16)) + (v12 << 6);
LABEL_27:
    v14 = *(id *)(*(_QWORD *)(v2 + 48) + 8 * v11);
    if (!v14)
      goto LABEL_34;
    while (1)
    {
      v29 = sub_1CA0AB910(0, (unint64_t *)&qword_1EF93A320);
      *(_QWORD *)&v28 = v14;
      *(_QWORD *)&v26[0] = v0;
      sub_1CA0AFCC0(&v28, (_OWORD *)((char *)v26 + 8));
      swift_retain();
      v18 = v14;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        v9 = sub_1CA0E5CD8(0, v9[2] + 1, 1, v9);
      v20 = v9[2];
      v19 = v9[3];
      if (v20 >= v19 >> 1)
        v9 = sub_1CA0E5CD8((_QWORD *)(v19 > 1), v20 + 1, 1, v9);
      v9[2] = v20 + 1;
      v21 = &v9[5 * v20];
      v22 = v26[0];
      v23 = v26[1];
      v21[8] = v27;
      *((_OWORD *)v21 + 2) = v22;
      *((_OWORD *)v21 + 3) = v23;

      v4 = v12;
      v5 = v10;
      if ((v2 & 0x8000000000000000) == 0)
        break;
LABEL_10:
      v13 = sub_1CA1F0FD0();
      if (v13)
      {
        *(_QWORD *)&v28 = v13;
        sub_1CA0AB910(0, (unint64_t *)&qword_1EF93A320);
        swift_unknownObjectRetain();
        swift_dynamicCast();
        v14 = *(id *)&v26[0];
        swift_unknownObjectRelease();
        v12 = v4;
        v10 = v5;
        if (*(_QWORD *)&v26[0])
          continue;
      }
      goto LABEL_34;
    }
  }
  __break(1u);
}

id sub_1CA141B28(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  double v7;
  uint64_t v8;
  char *v9;
  id result;
  void *v11;
  id v12;
  uint64_t v13;
  uint64_t v14;

  v2 = v1;
  v4 = sub_1CA1F0844();
  v5 = *(_QWORD *)(v4 - 8);
  v7 = MEMORY[0x1E0C80A78](v4, v6);
  v9 = (char *)&v14 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  result = objc_msgSend(*(id *)(v2 + 16), sel_concreteGraph, v7);
  if (result)
  {
    v11 = result;
    v12 = objc_msgSend(result, sel_identifier);

    sub_1CA1F0838();
    sub_1CA1500D4(&qword_1EF93A338, 255, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB0998], MEMORY[0x1E0CB09C8]);
    sub_1CA1F0964();
    (*(void (**)(char *, uint64_t))(v5 + 8))(v9, v4);
    v13 = *(_QWORD *)(v2 + 24);
    if (v13)
    {
      sub_1CA1F1408();
      swift_bridgeObjectRetain();
      sub_1CA0C0D60(a1, v13);
      return (id)swift_bridgeObjectRelease();
    }
    else
    {
      return (id)sub_1CA1F1408();
    }
  }
  else
  {
    __break(1u);
  }
  return result;
}

id sub_1CA141C6C(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  id result;
  void *v5;
  void *v6;
  char v7;
  uint64_t v8;
  uint64_t v9;
  char v10;

  v2 = v1;
  result = objc_msgSend(*(id *)(v1 + 16), sel_concreteGraph);
  if (!result)
  {
    __break(1u);
    goto LABEL_10;
  }
  v5 = result;
  result = objc_msgSend(*(id *)(a1 + 16), sel_concreteGraph);
  if (!result)
  {
LABEL_10:
    __break(1u);
    return result;
  }
  v6 = result;
  sub_1CA0AB910(0, &qword_1EF9374E0);
  v7 = sub_1CA1F0E68();

  result = 0;
  if ((v7 & 1) != 0)
  {
    v8 = *(_QWORD *)(v2 + 24);
    if (v8)
    {
      v9 = *(_QWORD *)(a1 + 24);
      if (v9)
      {
        sub_1CA0BF4E0(v8, v9);
        if ((v10 & 1) != 0)
          return (id)1;
      }
    }
  }
  return result;
}

uint64_t sub_1CA141D3C()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 64);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t sub_1CA141D68(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  *(_QWORD *)(v2 + 64) = a1;
  *(_QWORD *)(v2 + 72) = a2;
  return swift_bridgeObjectRelease();
}

uint64_t (*sub_1CA141D78(_QWORD *a1))(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;

  a1[2] = v1;
  v3 = *(_QWORD *)(v1 + 72);
  *a1 = *(_QWORD *)(v1 + 64);
  a1[1] = v3;
  swift_bridgeObjectRetain();
  return sub_1CA141DB4;
}

uint64_t sub_1CA141DB4(uint64_t a1)
{
  *(_OWORD *)(*(_QWORD *)(a1 + 16) + 64) = *(_OWORD *)a1;
  return swift_bridgeObjectRelease();
}

uint64_t sub_1CA141DCC(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4, uint64_t a5, uint64_t a6, char a7)
{
  _QWORD *v7;
  uint64_t v14;
  unint64_t v15;
  char v16;
  void (*v17)(uint64_t *__return_ptr, uint64_t *, _QWORD *);
  uint64_t v18;
  unint64_t v19;
  uint64_t v21;
  _QWORD v22[2];
  uint64_t v23;
  unint64_t v24;

  if (((*(uint64_t (**)(void))(*v7 + 248))() & 1) == 0)
    return 0;
  v14 = v7[5];
  if (!*(_QWORD *)(v14 + 16))
  {
LABEL_8:
    if ((a7 & 1) != 0)
    {
LABEL_9:
      __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_1EF937190);
      v18 = swift_allocObject();
      *(_OWORD *)(v18 + 16) = xmmword_1CA1F9100;
      v23 = 40;
      v24 = 0xE100000000000000;
      sub_1CA1F0A3C();
      sub_1CA1F0A3C();
      sub_1CA1F0A3C();
      sub_1CA1F0A3C();
      v19 = v24;
      *(_QWORD *)(v18 + 32) = v23;
      *(_QWORD *)(v18 + 40) = v19;
      return v18;
    }
    return 0;
  }
  swift_retain();
  swift_bridgeObjectRetain();
  v15 = sub_1CA0AA5E0(a2);
  if ((v16 & 1) == 0)
  {
    swift_release();
    swift_bridgeObjectRelease();
    goto LABEL_8;
  }
  v17 = *(void (**)(uint64_t *__return_ptr, uint64_t *, _QWORD *))(*(_QWORD *)(v14 + 56) + 16 * v15);
  swift_retain();
  swift_release();
  swift_bridgeObjectRelease();
  v23 = a3;
  v24 = a4;
  v22[0] = a5;
  v22[1] = a6;
  v17(&v21, &v23, v22);
  swift_release();
  v18 = v21;
  if (!v21 && (a7 & 1) != 0)
    goto LABEL_9;
  return v18;
}

uint64_t sub_1CA141F5C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v8;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v11;

  v4 = v3;
  v8 = swift_allocObject();
  *(_QWORD *)(v8 + 16) = a2;
  *(_QWORD *)(v8 + 24) = a3;
  swift_retain();
  swift_retain();
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  v11 = *(_QWORD *)(v4 + 40);
  *(_QWORD *)(v4 + 40) = 0x8000000000000000;
  sub_1CA0AE600((uint64_t)sub_1CA150138, v8, a1, isUniquelyReferenced_nonNull_native);
  *(_QWORD *)(v4 + 40) = v11;
  swift_release();
  return swift_bridgeObjectRelease();
}

uint64_t sub_1CA142014(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  unint64_t v4;
  char v5;
  uint64_t result;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v8;

  v2 = v1;
  swift_bridgeObjectRetain();
  v4 = sub_1CA0AA5E0(a1);
  LOBYTE(a1) = v5;
  result = swift_bridgeObjectRelease();
  if ((a1 & 1) != 0)
  {
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    v8 = *(_QWORD *)(v2 + 40);
    *(_QWORD *)(v2 + 40) = 0x8000000000000000;
    if ((isUniquelyReferenced_nonNull_native & 1) == 0)
      sub_1CA0EFD0C();
    swift_release();
    sub_1CA0F1EC0(v4, v8);
    *(_QWORD *)(v2 + 40) = v8;
    swift_release();
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t sub_1CA1420D8()
{
  uint64_t v0;
  uint64_t result;

  result = swift_bridgeObjectRelease();
  *(_QWORD *)(v0 + 40) = MEMORY[0x1E0DEE9E0];
  return result;
}

uint64_t sub_1CA1420FC(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;

  v3 = *(_QWORD *)(v2 + 48);
  *(_QWORD *)(v2 + 48) = a1;
  *(_QWORD *)(v2 + 56) = a2;
  swift_retain();
  return sub_1CA0AAE34(v3);
}

uint64_t sub_1CA142134()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 48);
  *(_QWORD *)(v0 + 48) = 0;
  *(_QWORD *)(v0 + 56) = 0;
  return sub_1CA0AAE34(v1);
}

uint64_t sub_1CA142140(void *a1, uint64_t a2, uint64_t a3)
{
  return sub_1CA150140(a1, a2, a3);
}

uint64_t sub_1CA142154(void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t result;
  uint64_t v6;
  uint64_t inited;
  id v8;
  unint64_t v9;
  unint64_t v10;

  result = sub_1CA150140(a1, a2, a3);
  v6 = result;
  if (!v3)
  {
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_1EF93A340);
    inited = swift_initStackObject();
    *(_OWORD *)(inited + 16) = xmmword_1CA1F9100;
    *(_QWORD *)(inited + 32) = a1;
    *(_QWORD *)(inited + 40) = v6;
    v8 = a1;
    v9 = sub_1CA0AC0C0(inited);
    v10 = sub_1CA0ABFB8(MEMORY[0x1E0DEE9D8]);
    type metadata accessor for MADistribution();
    swift_allocObject();
    return MADistribution.init(projections:weights:)(v9, v10);
  }
  return result;
}

void sub_1CA142204(uint64_t a1, uint64_t a2, _QWORD *a3, double a4)
{
  uint64_t v4;
  uint64_t v5;
  id v9;
  void *v10;
  unsigned int v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  void *v15;
  _QWORD *v16;
  void *v17;
  void *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  id v22;
  _QWORD *v23;
  char isUniquelyReferenced_nonNull_native;
  char v25;
  unint64_t v26;
  uint64_t v27;
  _BOOL8 v28;
  uint64_t v29;
  char v30;
  unint64_t v31;
  char v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  BOOL v36;
  uint64_t v37;
  id v38;
  id v39;
  unint64_t v40;
  char v41;
  double v42;
  id v43;
  float v44;
  double v45;
  char v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  double *v50;
  _QWORD *v51;
  void *v52;
  double v53;
  uint64_t inited;
  id v55;
  id v56;
  id v57;
  void *v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  id v64;
  char v65;
  id v66;
  float v67;
  double v68;
  char v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  int64_t v76;
  unint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  int64_t v81;
  unint64_t v82;
  unint64_t v83;
  uint64_t v84;
  id v85;
  unint64_t v86;
  int64_t v87;
  id v88;
  unint64_t v89;
  char v90;
  double v91;
  int64_t v92;
  id v93;
  float v94;
  float v95;
  char v96;
  void *v97;
  char v98;
  unint64_t v99;
  uint64_t v100;
  _BOOL8 v101;
  uint64_t v102;
  char v103;
  unint64_t v104;
  char v105;
  double v106;
  _QWORD *v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  id v111;
  uint64_t v112;
  _QWORD *v113;
  void *v114;
  uint64_t v115;
  int64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v120;
  _QWORD *v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  int64_t v127;
  unint64_t v128;

  v5 = v4;
  v114 = (void *)a3[2];
  v9 = objc_msgSend(v114, sel_concreteGraph);
  if (!v9)
    goto LABEL_97;
  v10 = v9;
  v11 = objc_msgSend(v9, sel_hasPendingRead);

  if (!v11)
    goto LABEL_93;
  v12 = (*(uint64_t (**)(void))(*a3 + 224))();
  v14 = v13;
  v123 = MEMORY[0x1E0DEE9D8];
  if (a4 != 1.0)
  {
    v47 = (*(uint64_t (**)(uint64_t (*)(), _QWORD, double))(*a3 + 240))(nullsub_1, 0, a4);
    if (v4)
    {
      swift_bridgeObjectRelease_n();
      swift_bridgeObjectRelease();
LABEL_36:
      swift_bridgeObjectRelease();
      return;
    }
    if (v47)
      sub_1CA0B295C(v47);
  }
  swift_bridgeObjectRetain_n();
  sub_1CA140C08(v12, (uint64_t)&v122);
  sub_1CA1156A8();
  v16 = (_QWORD *)MEMORY[0x1E0DEE9E0];
  v112 = v12;
  if (v15)
  {
    v17 = v15;
    v118 = MEMORY[0x1E0DEE9E0];
    while (1)
    {
      v19 = sub_1CA150140(v17, a1, a2);
      if (v5)
      {
        swift_bridgeObjectRelease();

        swift_bridgeObjectRelease_n();
        sub_1CA0B6A14();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        goto LABEL_36;
      }
      v20 = v19;
      v21 = a1;
      v22 = v17;
      v23 = v16;
      isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      v121 = v23;
      v26 = sub_1CA0AA594((uint64_t)v22);
      v27 = v23[2];
      v28 = (v25 & 1) == 0;
      v29 = v27 + v28;
      if (__OFADD__(v27, v28))
      {
        __break(1u);
LABEL_92:
        __break(1u);
LABEL_93:
        __break(1u);
LABEL_94:
        __break(1u);
LABEL_95:
        __break(1u);
LABEL_96:
        __break(1u);
LABEL_97:
        __break(1u);
LABEL_98:
        sub_1CA0AB910(0, (unint64_t *)&qword_1EF93A320);
        sub_1CA1F1360();
        __break(1u);
        return;
      }
      v30 = v25;
      if (v23[3] >= v29)
      {
        if ((isUniquelyReferenced_nonNull_native & 1) == 0)
          sub_1CA0EF944();
      }
      else
      {
        sub_1CA0EBB68(v29, isUniquelyReferenced_nonNull_native);
        v31 = sub_1CA0AA594((uint64_t)v22);
        if ((v30 & 1) != (v32 & 1))
          goto LABEL_98;
        v26 = v31;
      }
      v16 = v121;
      v33 = 8 * v26;
      if ((v30 & 1) != 0)
      {
        v34 = v121[7];
        swift_bridgeObjectRelease();
        *(_QWORD *)(v34 + v33) = v20;
      }
      else
      {
        v121[(v26 >> 6) + 8] |= 1 << v26;
        *(_QWORD *)(v16[6] + 8 * v26) = v22;
        *(_QWORD *)(v16[7] + 8 * v26) = v20;
        v35 = v16[2];
        v36 = __OFADD__(v35, 1);
        v37 = v35 + 1;
        if (v36)
          goto LABEL_92;
        v16[2] = v37;
        v38 = v22;
      }

      swift_bridgeObjectRelease();
      v5 = 0;
      if (*(_QWORD *)(v14 + 16))
      {
        v39 = v22;
        swift_bridgeObjectRetain();
        v40 = sub_1CA0AA594((uint64_t)v39);
        if ((v41 & 1) == 0)
        {

          goto LABEL_23;
        }
        v42 = *(double *)(*(_QWORD *)(v14 + 56) + 8 * v40);

        swift_bridgeObjectRelease();
        if (v42 != 1.0)
        {
          v43 = v39;
          objc_msgSend(v43, sel_weight);
          v45 = v42 * v44;
          v46 = swift_isUniquelyReferenced_nonNull_native();
          v121 = (_QWORD *)v118;
          sub_1CA0AE290(v43, v46, v45);

LABEL_23:
          swift_bridgeObjectRelease();
        }
      }
      a1 = v21;
      if ((v12 & 0xC000000000000001) != 0)
        sub_1CA1F0FA0();

      sub_1CA1156A8();
      v17 = v18;
      if (!v18)
        goto LABEL_29;
    }
  }
  v118 = MEMORY[0x1E0DEE9E0];
LABEL_29:
  sub_1CA0B6A14();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v48 = v123;
  v49 = *(_QWORD *)(v123 + 16);
  if (v49)
  {
    v115 = a1;
    v117 = v5;
    swift_bridgeObjectRetain();
    v50 = (double *)(v48 + 40);
    do
    {
      v51 = v16;
      v52 = (void *)*((_QWORD *)v50 - 1);
      v53 = *v50;
      __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_1ED852A58);
      inited = swift_initStackObject();
      *(_OWORD *)(inited + 16) = xmmword_1CA1F9520;
      *(_QWORD *)(inited + 32) = v52;
      v122 = inited;
      v55 = v52;
      sub_1CA1F0B14();
      sub_1CA0AB910(0, (unint64_t *)&qword_1EF93A320);
      sub_1CA0C0614();
      v56 = v55;
      v57 = v114;
      v122 = sub_1CA1F0CA0();
      sub_1CA0BDD74(&v121, v56);
      v58 = v121;
      swift_bridgeObjectRelease();

      v59 = v122;
      type metadata accessor for MASlice();
      v60 = swift_initStackObject();
      *(_OWORD *)(v60 + 48) = 0u;
      *(_OWORD *)(v60 + 64) = 0u;
      *(_QWORD *)(v60 + 16) = v57;
      *(_QWORD *)(v60 + 24) = v59;
      v61 = MEMORY[0x1E0DEE9E0];
      *(_QWORD *)(v60 + 32) = 0x3FF0000000000000;
      *(_QWORD *)(v60 + 40) = v61;
      v62 = sub_1CA150140(v56, v115, a2);
      if (v117)
      {
        swift_bridgeObjectRelease();

        swift_bridgeObjectRelease();
        swift_setDeallocating();
        swift_bridgeObjectRelease();
        sub_1CA0AAE34(*(_QWORD *)(v60 + 48));
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();

        return;
      }
      v63 = v62;
      v64 = v56;
      v65 = swift_isUniquelyReferenced_nonNull_native();
      v122 = (uint64_t)v51;
      sub_1CA0AE3B8(v63, v64, v65);
      v16 = (_QWORD *)v122;

      swift_bridgeObjectRelease();
      v66 = v64;
      objc_msgSend(v66, sel_weight);
      v68 = v53 * v67;
      v69 = swift_isUniquelyReferenced_nonNull_native();
      v122 = v118;
      sub_1CA0AE290(v66, v69, v68);
      v118 = v122;

      swift_bridgeObjectRelease();
      if ((v112 & 0xC000000000000001) != 0)
      {
        sub_1CA1F0FA0();
        sub_1CA1F0FA0();
      }
      swift_setDeallocating();

      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      sub_1CA0AAE34(*(_QWORD *)(v60 + 48));
      swift_bridgeObjectRelease();

      v50 += 2;
      --v49;
    }
    while (v49);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    a1 = v115;
  }
  else
  {
    swift_bridgeObjectRelease();
  }
  v70 = swift_bridgeObjectRelease();
  if (((*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 232))(v70) & 1) == 0)
    goto LABEL_90;
  v113 = v16;
  v71 = (*(uint64_t (**)(void))(*(_QWORD *)a1 + 224))();
  v73 = v72;
  if ((v71 & 0xC000000000000001) != 0)
  {
    swift_bridgeObjectRetain();
    sub_1CA1F0F64();
    sub_1CA0AB910(0, (unint64_t *)&qword_1EF93A320);
    sub_1CA0C0614();
    sub_1CA1F0CC4();
    v74 = v124;
    v120 = v125;
    v75 = v126;
    v76 = v127;
    v77 = v128;
  }
  else
  {
    v78 = -1 << *(_BYTE *)(v71 + 32);
    v120 = v71 + 56;
    v75 = ~v78;
    v79 = -v78;
    if (v79 < 64)
      v80 = ~(-1 << v79);
    else
      v80 = -1;
    v77 = v80 & *(_QWORD *)(v71 + 56);
    v76 = 0;
    v74 = swift_bridgeObjectRetain();
  }
  v116 = (unint64_t)(v75 + 64) >> 6;
  while (1)
  {
    v81 = v76;
    if ((v74 & 0x8000000000000000) == 0)
      break;
    v84 = sub_1CA1F0FD0();
    if (!v84)
      goto LABEL_89;
    v121 = (_QWORD *)v84;
    sub_1CA0AB910(0, (unint64_t *)&qword_1EF93A320);
    swift_unknownObjectRetain();
    swift_dynamicCast();
    v85 = (id)v122;
    swift_unknownObjectRelease();
    if (!v85)
      goto LABEL_89;
LABEL_67:
    if (*(_QWORD *)(v73 + 16))
    {
      swift_bridgeObjectRetain();
      v88 = v85;
      v89 = sub_1CA0AA594((uint64_t)v88);
      if ((v90 & 1) != 0)
      {
        v91 = *(double *)(*(_QWORD *)(v73 + 56) + 8 * v89);

        swift_bridgeObjectRelease();
        if (v91 == 1.0)
        {

        }
        else
        {
          v93 = v88;
          objc_msgSend(v93, sel_weight);
          v95 = v94;
          v96 = swift_isUniquelyReferenced_nonNull_native();
          v122 = v118;
          v97 = v93;
          v99 = sub_1CA0AA594((uint64_t)v93);
          v100 = *(_QWORD *)(v118 + 16);
          v101 = (v98 & 1) == 0;
          v102 = v100 + v101;
          if (__OFADD__(v100, v101))
            goto LABEL_95;
          v103 = v98;
          if (*(_QWORD *)(v118 + 24) >= v102)
          {
            if ((v96 & 1) == 0)
              sub_1CA0EF5C0();
          }
          else
          {
            sub_1CA0EB588(v102, v96);
            v104 = sub_1CA0AA594((uint64_t)v97);
            if ((v103 & 1) != (v105 & 1))
              goto LABEL_98;
            v99 = v104;
          }
          v106 = v91 * v95;
          v107 = (_QWORD *)v122;
          v118 = v122;
          if ((v103 & 1) != 0)
          {
            *(double *)(*(_QWORD *)(v122 + 56) + 8 * v99) = v106;
          }
          else
          {
            *(_QWORD *)(v122 + 8 * (v99 >> 6) + 64) |= 1 << v99;
            v108 = 8 * v99;
            *(_QWORD *)(v107[6] + v108) = v97;
            *(double *)(v107[7] + v108) = v106;
            v109 = v107[2];
            v36 = __OFADD__(v109, 1);
            v110 = v109 + 1;
            if (v36)
              goto LABEL_96;
            v107[2] = v110;
            v111 = v97;
          }

          swift_bridgeObjectRelease();
        }
      }
      else
      {

        swift_bridgeObjectRelease();
      }
    }
    else
    {

    }
  }
  if (v77)
  {
    v82 = __clz(__rbit64(v77));
    v77 &= v77 - 1;
    v83 = v82 | (v76 << 6);
    goto LABEL_66;
  }
  ++v76;
  if (__OFADD__(v81, 1))
    goto LABEL_94;
  if (v76 >= v116)
    goto LABEL_89;
  v86 = *(_QWORD *)(v120 + 8 * v76);
  if (v86)
  {
LABEL_65:
    v77 = (v86 - 1) & v86;
    v83 = __clz(__rbit64(v86)) + (v76 << 6);
LABEL_66:
    v85 = *(id *)(*(_QWORD *)(v74 + 48) + 8 * v83);
    if (!v85)
      goto LABEL_89;
    goto LABEL_67;
  }
  v87 = v81 + 2;
  if (v81 + 2 >= v116)
    goto LABEL_89;
  v86 = *(_QWORD *)(v120 + 8 * v87);
  if (v86)
    goto LABEL_64;
  v87 = v81 + 3;
  if (v81 + 3 >= v116)
    goto LABEL_89;
  v86 = *(_QWORD *)(v120 + 8 * v87);
  if (v86)
  {
LABEL_64:
    v76 = v87;
    goto LABEL_65;
  }
  v76 = v81 + 4;
  if (v81 + 4 >= v116)
    goto LABEL_89;
  v86 = *(_QWORD *)(v120 + 8 * v76);
  if (v86)
    goto LABEL_65;
  v92 = v81 + 5;
  while (v116 != v92)
  {
    v86 = *(_QWORD *)(v120 + 8 * v92++);
    if (v86)
    {
      v76 = v92 - 1;
      goto LABEL_65;
    }
  }
LABEL_89:
  sub_1CA0B6A14();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v16 = v113;
LABEL_90:
  type metadata accessor for MADistribution();
  swift_allocObject();
  MADistribution.init(projections:weights:)((uint64_t)v16, v118);
}

void sub_1CA142D34(uint64_t a1, uint64_t a2, void (*a3)(char *, double), uint64_t a4, double a5)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  id v13;
  void *v14;
  unsigned int v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  void *v20;
  uint64_t v21;
  void *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  id v26;
  char isUniquelyReferenced_nonNull_native;
  char v28;
  unint64_t v29;
  uint64_t v30;
  _BOOL8 v31;
  uint64_t v32;
  char v33;
  unint64_t v34;
  char v35;
  _QWORD *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  BOOL v40;
  uint64_t v41;
  id v42;
  id v43;
  unint64_t v44;
  char v45;
  double v46;
  id v47;
  float v48;
  double v49;
  char v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  void *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t (*v59)(uint64_t (*)(double), uint64_t, double);
  uint64_t v60;
  uint64_t v61;
  double *v62;
  void *v63;
  double v64;
  uint64_t inited;
  id v66;
  id v67;
  id v68;
  void *v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  id v75;
  char v76;
  id v77;
  float v78;
  double v79;
  char v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  int64_t v92;
  uint64_t v93;
  unint64_t v94;
  _BYTE *v95;
  _BYTE *v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  int64_t v100;
  int64_t v101;
  unint64_t v102;
  unint64_t v103;
  uint64_t v104;
  id v105;
  unint64_t v106;
  int64_t v107;
  id v108;
  unint64_t v109;
  char v110;
  double v111;
  int64_t v112;
  id v113;
  float v114;
  float v115;
  char v116;
  char v117;
  unint64_t v118;
  uint64_t v119;
  _BOOL8 v120;
  uint64_t v121;
  void *v122;
  unint64_t v123;
  char v124;
  int v125;
  double v126;
  _QWORD *v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  id v131;
  char v132;
  uint64_t v133;
  uint64_t v134;
  void *v135;
  uint64_t v136;
  unint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  char v144;
  void (*v145)(char *, double);
  uint64_t v147;
  _QWORD *v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  int64_t v154;
  unint64_t v155;
  char v156;

  v7 = v6;
  v8 = v5;
  v135 = *(void **)(v5 + 16);
  v13 = objc_msgSend(v135, sel_concreteGraph);
  if (!v13)
    goto LABEL_114;
  v14 = v13;
  v15 = objc_msgSend(v13, sel_hasPendingRead);

  if (!v15)
    goto LABEL_110;
  v156 = 0;
  v16 = (*(uint64_t (**)(void))(*(_QWORD *)v8 + 224))();
  v17 = v16;
  v150 = MEMORY[0x1E0DEE9D8];
  v140 = v18;
  if (a5 != 1.0)
  {
    v56 = v16;
    v57 = a4;
    v58 = swift_allocObject();
    *(_QWORD *)(v58 + 16) = a3;
    *(_QWORD *)(v58 + 24) = v57;
    v59 = *(uint64_t (**)(uint64_t (*)(double), uint64_t, double))(*(_QWORD *)v8 + 240);
    swift_retain();
    v60 = v59(sub_1CA151658, v58, a5);
    if (v6)
    {
      swift_release();
      swift_bridgeObjectRelease_n();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
LABEL_50:
      swift_bridgeObjectRelease();
      return;
    }
    if (v60)
      sub_1CA0B295C(v60);
    swift_release();
    v17 = v56;
  }
  swift_bridgeObjectRetain_n();
  sub_1CA140C08(v17, (uint64_t)&v149);
  sub_1CA1156A8();
  v142 = v150;
  v145 = a3;
  v136 = v17;
  if (v20)
  {
    v21 = v19;
    v22 = v20;
    v137 = v17 & 0xC000000000000001;
    v147 = MEMORY[0x1E0DEE9E0];
    v143 = MEMORY[0x1E0DEE9E0];
    while (1)
    {
      v23 = sub_1CA150140(v22, a1, a2);
      if (v7)
      {
        swift_bridgeObjectRelease();

        swift_bridgeObjectRelease_n();
        sub_1CA0B6A14();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        goto LABEL_50;
      }
      v24 = v23;
      v25 = a1;
      v26 = v22;
      isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      v148 = (_QWORD *)v147;
      v29 = sub_1CA0AA594((uint64_t)v26);
      v30 = *(_QWORD *)(v147 + 16);
      v31 = (v28 & 1) == 0;
      v32 = v30 + v31;
      if (__OFADD__(v30, v31))
      {
        __break(1u);
LABEL_105:
        __break(1u);
LABEL_106:
        __break(1u);
LABEL_107:
        __break(1u);
LABEL_108:
        __break(1u);
LABEL_109:
        __break(1u);
LABEL_110:
        __break(1u);
LABEL_111:
        __break(1u);
LABEL_112:
        __break(1u);
LABEL_113:
        __break(1u);
LABEL_114:
        __break(1u);
LABEL_115:
        sub_1CA0AB910(0, (unint64_t *)&qword_1EF93A320);
        sub_1CA1F1360();
        __break(1u);
        return;
      }
      v33 = v28;
      if (*(_QWORD *)(v147 + 24) >= v32)
      {
        if ((isUniquelyReferenced_nonNull_native & 1) == 0)
          sub_1CA0EF944();
      }
      else
      {
        sub_1CA0EBB68(v32, isUniquelyReferenced_nonNull_native);
        v34 = sub_1CA0AA594((uint64_t)v26);
        if ((v33 & 1) != (v35 & 1))
          goto LABEL_115;
        v29 = v34;
      }
      v36 = v148;
      v147 = (uint64_t)v148;
      if ((v33 & 1) != 0)
      {
        v37 = v148[7];
        swift_bridgeObjectRelease();
        *(_QWORD *)(v37 + 8 * v29) = v24;
      }
      else
      {
        v148[(v29 >> 6) + 8] |= 1 << v29;
        v38 = 8 * v29;
        *(_QWORD *)(v36[6] + v38) = v26;
        *(_QWORD *)(v36[7] + v38) = v24;
        v39 = v36[2];
        v40 = __OFADD__(v39, 1);
        v41 = v39 + 1;
        if (v40)
          goto LABEL_109;
        v36[2] = v41;
        v42 = v26;
      }

      swift_bridgeObjectRelease();
      if (*(_QWORD *)(v140 + 16))
      {
        v43 = v26;
        swift_bridgeObjectRetain();
        v44 = sub_1CA0AA594((uint64_t)v43);
        if ((v45 & 1) != 0)
        {
          v46 = *(double *)(*(_QWORD *)(v140 + 56) + 8 * v44);

          swift_bridgeObjectRelease();
          if (v46 == 1.0)
            goto LABEL_23;
          v47 = v43;
          objc_msgSend(v47, sel_weight);
          v49 = v46 * v48;
          v50 = swift_isUniquelyReferenced_nonNull_native();
          v148 = (_QWORD *)v143;
          sub_1CA0AE290(v47, v50, v49);

        }
        else
        {

        }
        swift_bridgeObjectRelease();
      }
LABEL_23:
      if (__OFADD__(v21, 1))
        goto LABEL_105;
      v7 = 0;
      if (v137)
        v51 = sub_1CA1F0FA0();
      else
        v51 = *(_QWORD *)(v136 + 16);
      a1 = v25;
      v52 = *(_QWORD *)(v142 + 16);
      v40 = __OFADD__(v51, v52);
      v53 = v51 + v52;
      if (v40)
        goto LABEL_106;
      a3(&v156, (double)(v21 + 1) / (double)v53 * 0.9 + 0.1);
      if (v156 == 1)
      {
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease_n();
        sub_1CA0BE35C();
        swift_allocError();
        *v95 = 0;
        swift_willThrow();

        sub_1CA0B6A14();
        return;
      }

      sub_1CA1156A8();
      v21 = v54;
      v22 = v55;
      if (!v55)
        goto LABEL_34;
    }
  }
  v143 = MEMORY[0x1E0DEE9E0];
  v147 = MEMORY[0x1E0DEE9E0];
LABEL_34:
  sub_1CA0B6A14();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v133 = *(_QWORD *)(v142 + 16);
  if (v133)
  {
    v134 = a1;
    v141 = v7;
    swift_bridgeObjectRetain();
    v61 = 0;
    v62 = (double *)(v142 + 40);
    do
    {
      v139 = v61;
      v63 = (void *)*((_QWORD *)v62 - 1);
      v64 = *v62;
      __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_1ED852A58);
      inited = swift_initStackObject();
      *(_OWORD *)(inited + 16) = xmmword_1CA1F9520;
      *(_QWORD *)(inited + 32) = v63;
      v149 = inited;
      v66 = v63;
      sub_1CA1F0B14();
      sub_1CA0AB910(0, (unint64_t *)&qword_1EF93A320);
      sub_1CA0C0614();
      v67 = v66;
      v68 = v135;
      v149 = sub_1CA1F0CA0();
      sub_1CA0BDD74(&v148, v67);
      v69 = v148;
      swift_bridgeObjectRelease();

      v70 = v149;
      type metadata accessor for MASlice();
      v71 = swift_initStackObject();
      *(_OWORD *)(v71 + 48) = 0u;
      *(_OWORD *)(v71 + 64) = 0u;
      *(_QWORD *)(v71 + 16) = v68;
      *(_QWORD *)(v71 + 24) = v70;
      v72 = MEMORY[0x1E0DEE9E0];
      *(_QWORD *)(v71 + 32) = 0x3FF0000000000000;
      *(_QWORD *)(v71 + 40) = v72;
      v73 = sub_1CA150140(v67, v134, a2);
      if (v141)
      {
        swift_bridgeObjectRelease();

        swift_bridgeObjectRelease();
        swift_setDeallocating();
        swift_bridgeObjectRelease();
        sub_1CA0AAE34(*(_QWORD *)(v71 + 48));
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();

        return;
      }
      v74 = v73;
      v61 = v139 + 1;
      v75 = v67;
      v76 = swift_isUniquelyReferenced_nonNull_native();
      v149 = v147;
      sub_1CA0AE3B8(v74, v75, v76);
      v147 = v149;

      swift_bridgeObjectRelease();
      v77 = v75;
      objc_msgSend(v77, sel_weight);
      v79 = v64 * v78;
      v80 = swift_isUniquelyReferenced_nonNull_native();
      v149 = v143;
      sub_1CA0AE290(v77, v80, v79);
      v143 = v149;

      swift_bridgeObjectRelease();
      if ((v136 & 0xC000000000000001) != 0)
      {
        v81 = sub_1CA1F0FA0();
        v82 = v61 + v81;
        if (__OFADD__(v61, v81))
          goto LABEL_107;
        v83 = sub_1CA1F0FA0();
      }
      else
      {
        v83 = *(_QWORD *)(v136 + 16);
        v82 = v61 + v83;
        if (__OFADD__(v61, v83))
          goto LABEL_107;
      }
      v84 = *(_QWORD *)(v150 + 16);
      v40 = __OFADD__(v83, v84);
      v85 = v83 + v84;
      if (v40)
        goto LABEL_108;
      v145(&v156, (double)v82 / (double)v85 * 0.9 + 0.1);
      if (v156 == 1)
      {
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        sub_1CA0BE35C();
        swift_allocError();
        *v96 = 0;
        swift_willThrow();
        swift_setDeallocating();

        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        sub_1CA0AAE34(*(_QWORD *)(v71 + 48));
        swift_bridgeObjectRelease();

        return;
      }
      swift_setDeallocating();

      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      sub_1CA0AAE34(*(_QWORD *)(v71 + 48));
      swift_bridgeObjectRelease();

      v62 += 2;
    }
    while (v133 != v61);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    a1 = v134;
  }
  else
  {
    swift_bridgeObjectRelease();
  }
  v86 = swift_bridgeObjectRelease();
  if (((*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 232))(v86) & 1) == 0)
    goto LABEL_103;
  v87 = (*(uint64_t (**)(void))(*(_QWORD *)a1 + 224))();
  v89 = v88;
  if ((v87 & 0xC000000000000001) != 0)
  {
    swift_bridgeObjectRetain();
    sub_1CA1F0F64();
    sub_1CA0AB910(0, (unint64_t *)&qword_1EF93A320);
    sub_1CA0C0614();
    sub_1CA1F0CC4();
    v91 = v151;
    v90 = v152;
    v93 = v153;
    v92 = v154;
    v94 = v155;
  }
  else
  {
    v97 = -1 << *(_BYTE *)(v87 + 32);
    v90 = v87 + 56;
    v93 = ~v97;
    v98 = -v97;
    if (v98 < 64)
      v99 = ~(-1 << v98);
    else
      v99 = -1;
    v94 = v99 & *(_QWORD *)(v87 + 56);
    v92 = 0;
    v91 = swift_bridgeObjectRetain();
  }
  v100 = (unint64_t)(v93 + 64) >> 6;
  while (1)
  {
    v101 = v92;
    if ((v91 & 0x8000000000000000) == 0)
      break;
    v104 = sub_1CA1F0FD0();
    if (!v104)
      goto LABEL_102;
    v148 = (_QWORD *)v104;
    sub_1CA0AB910(0, (unint64_t *)&qword_1EF93A320);
    swift_unknownObjectRetain();
    swift_dynamicCast();
    v105 = (id)v149;
    swift_unknownObjectRelease();
    if (!v105)
      goto LABEL_102;
LABEL_79:
    if (*(_QWORD *)(v89 + 16))
    {
      swift_bridgeObjectRetain();
      v108 = v105;
      v109 = sub_1CA0AA594((uint64_t)v108);
      if ((v110 & 1) != 0)
      {
        v111 = *(double *)(*(_QWORD *)(v89 + 56) + 8 * v109);

        swift_bridgeObjectRelease();
        if (v111 == 1.0)
        {

        }
        else
        {
          v113 = v108;
          objc_msgSend(v113, sel_weight);
          v115 = v114;
          v116 = swift_isUniquelyReferenced_nonNull_native();
          v149 = v143;
          v138 = (uint64_t)v113;
          v118 = sub_1CA0AA594((uint64_t)v113);
          v119 = *(_QWORD *)(v143 + 16);
          v120 = (v117 & 1) == 0;
          v121 = v119 + v120;
          if (__OFADD__(v119, v120))
            goto LABEL_112;
          if (*(_QWORD *)(v143 + 24) >= v121)
          {
            if ((v116 & 1) == 0)
            {
              v132 = v117;
              sub_1CA0EF5C0();
              v117 = v132;
            }
            v122 = (void *)v138;
          }
          else
          {
            v144 = v117;
            sub_1CA0EB588(v121, v116);
            v122 = (void *)v138;
            v123 = sub_1CA0AA594(v138);
            v125 = v124 & 1;
            v117 = v144;
            if ((v144 & 1) != v125)
              goto LABEL_115;
            v118 = v123;
          }
          v126 = v111 * v115;
          v127 = (_QWORD *)v149;
          v143 = v149;
          if ((v117 & 1) != 0)
          {
            *(double *)(*(_QWORD *)(v149 + 56) + 8 * v118) = v126;
          }
          else
          {
            *(_QWORD *)(v149 + 8 * (v118 >> 6) + 64) |= 1 << v118;
            v128 = 8 * v118;
            *(_QWORD *)(v127[6] + v128) = v122;
            *(double *)(v127[7] + v128) = v126;
            v129 = v127[2];
            v40 = __OFADD__(v129, 1);
            v130 = v129 + 1;
            if (v40)
              goto LABEL_113;
            v127[2] = v130;
            v131 = v122;
          }

          swift_bridgeObjectRelease();
        }
      }
      else
      {

        swift_bridgeObjectRelease();
      }
    }
    else
    {

    }
  }
  if (v94)
  {
    v102 = __clz(__rbit64(v94));
    v94 &= v94 - 1;
    v103 = v102 | (v92 << 6);
    goto LABEL_78;
  }
  ++v92;
  if (__OFADD__(v101, 1))
    goto LABEL_111;
  if (v92 >= v100)
    goto LABEL_102;
  v106 = *(_QWORD *)(v90 + 8 * v92);
  if (v106)
  {
LABEL_77:
    v94 = (v106 - 1) & v106;
    v103 = __clz(__rbit64(v106)) + (v92 << 6);
LABEL_78:
    v105 = *(id *)(*(_QWORD *)(v91 + 48) + 8 * v103);
    if (!v105)
      goto LABEL_102;
    goto LABEL_79;
  }
  v107 = v101 + 2;
  if (v101 + 2 >= v100)
    goto LABEL_102;
  v106 = *(_QWORD *)(v90 + 8 * v107);
  if (v106)
    goto LABEL_76;
  v107 = v101 + 3;
  if (v101 + 3 >= v100)
    goto LABEL_102;
  v106 = *(_QWORD *)(v90 + 8 * v107);
  if (v106)
  {
LABEL_76:
    v92 = v107;
    goto LABEL_77;
  }
  v92 = v101 + 4;
  if (v101 + 4 >= v100)
    goto LABEL_102;
  v106 = *(_QWORD *)(v90 + 8 * v92);
  if (v106)
    goto LABEL_77;
  v112 = v101 + 5;
  while (v100 != v112)
  {
    v106 = *(_QWORD *)(v90 + 8 * v112++);
    if (v106)
    {
      v92 = v112 - 1;
      goto LABEL_77;
    }
  }
LABEL_102:
  sub_1CA0B6A14();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
LABEL_103:
  type metadata accessor for MADistribution();
  swift_allocObject();
  MADistribution.init(projections:weights:)(v147, v143);
}

uint64_t sub_1CA143AB8(uint64_t a1)
{
  uint64_t v1;
  id v2;
  void *v3;
  unsigned int v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  id v20;
  int64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  id v30;
  id v31;
  void *v32;
  id v33;
  void *v34;
  void *v35;
  id v36;
  id v37;
  void *v38;
  id v39;
  void *v40;
  void *v41;
  id v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  id v46;
  void *v47;
  uint64_t inited;
  _QWORD *v49;
  id v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  unint64_t v54;
  char v55;
  uint64_t *v56;
  uint64_t v57;
  BOOL v58;
  uint64_t v59;
  uint64_t v60;
  id v61;
  uint64_t v62;
  unint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  id v73;
  id v74;
  void *v75;
  id v76;
  void *v77;
  void *v78;
  id v79;
  uint64_t v80;
  uint64_t v81;
  id v82;
  void *v83;
  uint64_t v84;
  id v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  id v94;
  id v95;
  void *v96;
  id v97;
  void *v98;
  void *v99;
  id v100;
  id v101;
  void *v102;
  id v103;
  void *v104;
  void *v105;
  id v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  id v110;
  void *v111;
  uint64_t v112;
  _QWORD *v113;
  id v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  unint64_t v118;
  char v119;
  uint64_t *v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  id v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  id v128;
  id v129;
  void *v130;
  id v131;
  void *v132;
  void *v133;
  id v134;
  id v135;
  void *v136;
  id v137;
  void *v138;
  void *v139;
  id v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  id v144;
  void *v145;
  uint64_t v146;
  _QWORD *v147;
  id v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  unint64_t v152;
  char v153;
  uint64_t *v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  id v158;
  uint64_t v159;
  char v160;
  uint64_t v161;
  unint64_t v162;
  char v163;
  void (*v164)(uint64_t *__return_ptr, uint64_t *, uint64_t *);
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t v169;
  id v170;
  id v171;
  void *v172;
  id v173;
  void *v174;
  void *v175;
  id v176;
  uint64_t v177;
  uint64_t v178;
  id v179;
  void *v180;
  uint64_t v181;
  id v182;
  uint64_t v183;
  uint64_t v184;
  uint64_t v185;
  id v186;
  id v187;
  void *v188;
  id v189;
  void *v190;
  void *v191;
  id v192;
  uint64_t v193;
  uint64_t v194;
  id v195;
  void *v196;
  uint64_t v197;
  id v198;
  uint64_t v199;
  uint64_t v200;
  uint64_t v201;
  id v202;
  char isUniquelyReferenced_nonNull_native;
  char v204;
  unint64_t v205;
  uint64_t v206;
  _BOOL8 v207;
  uint64_t v208;
  char v209;
  unint64_t v210;
  char v211;
  _QWORD *v212;
  uint64_t v213;
  uint64_t v214;
  uint64_t v215;
  uint64_t v216;
  id v217;
  uint64_t result;
  uint64_t v219;
  uint64_t v220;
  uint64_t v221;
  uint64_t (*v222)(uint64_t);
  unint64_t v223;
  unint64_t v224;
  uint64_t v225;
  uint64_t v226;
  uint64_t v227;
  int64_t v228;
  uint64_t v229;
  char v230;
  uint64_t v231;
  char v232;
  uint64_t i;
  uint64_t v234;
  uint64_t v235;
  uint64_t v237;
  uint64_t v238;
  uint64_t v239;
  char v240;
  uint64_t v241;
  char v242;
  uint64_t v243;
  uint64_t v244;
  uint64_t v245;
  uint64_t v246;
  uint64_t v247;
  uint64_t v248;
  uint64_t v249;
  void *v250;
  unint64_t v251;
  id v252;
  id v253;
  _QWORD *v254;
  uint64_t v255;
  uint64_t v256;
  unint64_t v257;
  uint64_t v258;
  uint64_t v259;
  uint64_t v260;
  _QWORD v261[4];
  uint64_t v262;
  uint64_t v263;
  _OWORD v264[2];
  uint64_t v265;
  __int128 v266;
  uint64_t v267;
  uint64_t v268;
  uint64_t v269;
  uint64_t v270;
  unint64_t v271;

  v252 = *(id *)(v1 + 16);
  v2 = objc_msgSend(v252, sel_concreteGraph);
  if (!v2)
    goto LABEL_153;
  v3 = v2;
  v4 = objc_msgSend(v2, sel_hasPendingRead);

  if (!v4)
    goto LABEL_146;
  v5 = (*(uint64_t (**)(void))(*v254 + 264))();
  v220 = *(_QWORD *)(v5 + 16);
  if (!v220)
  {
    swift_bridgeObjectRelease();
    return MEMORY[0x1E0DEE9E0];
  }
  v6 = 0;
  v222 = *(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 216);
  v221 = v5 + 32;
  v7 = MEMORY[0x1E0DEE9E0];
  v219 = v5;
LABEL_6:
  if (v6 >= *(_QWORD *)(v5 + 16))
    goto LABEL_145;
  v235 = v7;
  v223 = v6;
  sub_1CA1516C4(v221 + 40 * v6, (uint64_t)&v265, &qword_1EF937140);
  v8 = v265;
  v263 = v265;
  sub_1CA0AFCC0(&v266, v264);
  v234 = v8;
  v9 = swift_retain();
  v10 = v222(v9);
  if ((v10 & 0xC000000000000001) != 0)
  {
    sub_1CA1F0F64();
    sub_1CA0AB910(0, (unint64_t *)&qword_1EF93A320);
    sub_1CA0C0614();
    sub_1CA1F0CC4();
    v10 = v267;
    v229 = v268;
    v11 = v269;
    v12 = v270;
    v13 = v271;
  }
  else
  {
    v12 = 0;
    v14 = -1 << *(_BYTE *)(v10 + 32);
    v229 = v10 + 56;
    v11 = ~v14;
    v15 = -v14;
    if (v15 < 64)
      v16 = ~(-1 << v15);
    else
      v16 = -1;
    v13 = v16 & *(_QWORD *)(v10 + 56);
  }
  v224 = v223 + 1;
  v228 = (unint64_t)(v11 + 64) >> 6;
  for (i = v10; ; v10 = i)
  {
    if (v10 < 0)
    {
      v19 = sub_1CA1F0FD0();
      if (!v19)
        goto LABEL_5;
      v256 = v19;
      sub_1CA0AB910(0, (unint64_t *)&qword_1EF93A320);
      swift_unknownObjectRetain();
      swift_dynamicCast();
      v20 = (id)v260;
      swift_unknownObjectRelease();
      v18 = v12;
      v238 = v13;
      if (!v20)
        goto LABEL_5;
    }
    else
    {
      if (v13)
      {
        v238 = (v13 - 1) & v13;
        v17 = __clz(__rbit64(v13)) | (v12 << 6);
        v18 = v12;
      }
      else
      {
        v21 = v12 + 1;
        if (__OFADD__(v12, 1))
          goto LABEL_142;
        if (v21 >= v228)
          goto LABEL_5;
        v22 = *(_QWORD *)(v229 + 8 * v21);
        v18 = v12 + 1;
        if (!v22)
        {
          v18 = v12 + 2;
          if (v12 + 2 >= v228)
            goto LABEL_5;
          v22 = *(_QWORD *)(v229 + 8 * v18);
          if (!v22)
          {
            v18 = v12 + 3;
            if (v12 + 3 >= v228)
              goto LABEL_5;
            v22 = *(_QWORD *)(v229 + 8 * v18);
            if (!v22)
            {
              v18 = v12 + 4;
              if (v12 + 4 >= v228)
                goto LABEL_5;
              v22 = *(_QWORD *)(v229 + 8 * v18);
              if (!v22)
              {
                v23 = v12 + 5;
                while (v228 != v23)
                {
                  v22 = *(_QWORD *)(v229 + 8 * v23++);
                  if (v22)
                  {
                    v18 = v23 - 1;
                    goto LABEL_35;
                  }
                }
LABEL_5:
                swift_release();
                sub_1CA0B6A14();
                sub_1CA0B6AD4((uint64_t)&v263, &qword_1EF937140);
                v5 = v219;
                v6 = v224;
                v7 = v235;
                if (v224 != v220)
                  goto LABEL_6;
LABEL_137:
                swift_bridgeObjectRelease();
                return v235;
              }
            }
          }
        }
LABEL_35:
        v238 = (v22 - 1) & v22;
        v17 = __clz(__rbit64(v22)) + (v18 << 6);
      }
      v20 = *(id *)(*(_QWORD *)(v10 + 48) + 8 * v17);
      if (!v20)
        goto LABEL_5;
    }
    v237 = v18;
    v262 = MEMORY[0x1E0DEE9E8];
    v260 = v234;
    sub_1CA0B6A98((uint64_t)v264, (uint64_t)v261);
    sub_1CA0AB910(0, (unint64_t *)&qword_1EF93A320);
    v253 = v20;
    if (swift_dynamicCast())
    {
      v250 = (void *)v256;
      v24 = (*(uint64_t (**)(id, _QWORD *, uint64_t, unint64_t, uint64_t, unint64_t, _QWORD))(*(_QWORD *)a1 + 352))(v20, v254, 0x656372756F73, 0xE600000000000000, 0x746567726174, 0xE600000000000000, 0);
      if (v24)
      {
        v25 = *(_QWORD *)(v24 + 16);
        if (v25)
        {
          v26 = 0;
          v27 = 0;
          v243 = -v25;
          v247 = v24;
          v28 = v24 + 40;
          v239 = v24 + 40;
          while (2)
          {
            v230 = v26;
            v29 = v28 + 16 * v27++;
            while (1)
            {
              if ((unint64_t)(v27 - 1) >= *(_QWORD *)(v24 + 16))
              {
                __break(1u);
LABEL_132:
                __break(1u);
LABEL_133:
                __break(1u);
                goto LABEL_134;
              }
              swift_bridgeObjectRetain();
              v30 = objc_msgSend(v20, sel_visualString);
              sub_1CA1F0A0C();

              v31 = objc_allocWithZone(MEMORY[0x1E0CB3940]);
              swift_bridgeObjectRetain();
              v32 = (void *)sub_1CA1F0A00();
              swift_bridgeObjectRelease();
              v33 = objc_msgSend(v31, sel_initWithString_, v32);

              v34 = (void *)sub_1CA1F0A00();
              v35 = (void *)sub_1CA1F0A00();
              v36 = objc_msgSend(v33, sel_stringByReplacingOccurrencesOfString_withString_, v34, v35);

              sub_1CA1F0A0C();
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();

              v37 = objc_allocWithZone(MEMORY[0x1E0CB3940]);
              swift_bridgeObjectRetain();
              v38 = (void *)sub_1CA1F0A00();
              swift_bridgeObjectRelease();
              v39 = objc_msgSend(v37, sel_initWithString_, v38);

              v40 = (void *)sub_1CA1F0A00();
              v41 = (void *)sub_1CA1F0A00();
              v42 = objc_msgSend(v39, sel_stringByReplacingOccurrencesOfString_withString_, v40, v41);

              v43 = sub_1CA1F0A0C();
              v45 = v44;
              swift_bridgeObjectRelease();

              v46 = objc_msgSend(v252, sel_concreteGraph);
              if (!v46)
                goto LABEL_147;
              v47 = v46;
              __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_1EF93A370);
              inited = swift_initStackObject();
              *(_OWORD *)(inited + 16) = xmmword_1CA1F9100;
              *(_QWORD *)(inited + 32) = 0x746E656D67617266;
              *(_QWORD *)(inited + 40) = 0xE800000000000000;
              *(_QWORD *)(inited + 48) = v250;
              __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_1EF937050);
              v49 = (_QWORD *)sub_1CA1F1264();
              v50 = v250;
              swift_retain();
              v51 = *(_QWORD *)(inited + 32);
              v52 = *(_QWORD *)(inited + 40);
              v53 = *(_QWORD *)(inited + 48);
              swift_bridgeObjectRetain();
              swift_unknownObjectRetain();
              v54 = sub_1CA0AA474(v51, v52);
              if ((v55 & 1) != 0)
                goto LABEL_132;
              v49[(v54 >> 6) + 8] |= 1 << v54;
              v56 = (uint64_t *)(v49[6] + 16 * v54);
              *v56 = v51;
              v56[1] = v52;
              *(_QWORD *)(v49[7] + 8 * v54) = v53;
              v57 = v49[2];
              v58 = __OFADD__(v57, 1);
              v59 = v57 + 1;
              if (v58)
                goto LABEL_133;
              v49[2] = v59;
              swift_release();
              swift_bridgeObjectRelease();
              type metadata accessor for MAQuerySlice();
              v60 = swift_allocObject();
              *(_OWORD *)(v60 + 104) = xmmword_1CA1FC380;
              *(_QWORD *)(v60 + 80) = v43;
              *(_QWORD *)(v60 + 88) = v45;
              *(_QWORD *)(v60 + 96) = v49;
              v61 = objc_msgSend(v47, sel_graphReference);
              *(_OWORD *)(v60 + 48) = 0u;
              *(_OWORD *)(v60 + 64) = 0u;
              *(_QWORD *)(v60 + 16) = v61;
              *(_QWORD *)(v60 + 24) = 0;
              v62 = MEMORY[0x1E0DEE9E0];
              *(_QWORD *)(v60 + 32) = 0x3FF0000000000000;
              *(_QWORD *)(v60 + 40) = v62;

              *(_QWORD *)(v60 + 40) = v254[5];
              swift_bridgeObjectRetain();
              swift_bridgeObjectRelease();
              LOBYTE(v60) = sub_1CA0BE644(&v260, v60);
              swift_release();
              if ((v60 & 1) != 0)
                break;
              ++v27;
              v29 += 16;
              v24 = v247;
              v20 = v253;
              if (v243 + v27 == 1)
              {
                v26 = v230;
                goto LABEL_65;
              }
            }
            v26 = 1;
            v24 = v247;
            v20 = v253;
            v28 = v239;
            if (v243 + v27)
              continue;
            break;
          }
        }
        else
        {
          v26 = 0;
        }
LABEL_65:
        swift_bridgeObjectRelease();
      }
      else
      {
        v26 = 0;
      }
      v87 = (*(uint64_t (**)(void *, uint64_t, uint64_t, unint64_t, uint64_t, unint64_t, _QWORD))(*v254 + 352))(v250, a1, 0x656372756F73, 0xE600000000000000, 0x746567726174, 0xE600000000000000, 0);
      if (v87)
      {
        v88 = v87;
        v89 = *(_QWORD *)(v87 + 16);
        if (v89)
        {
          v90 = 0;
          v241 = -v89;
          v245 = v87;
          v91 = v87 + 40;
          v226 = v87 + 40;
LABEL_69:
          v232 = v26;
          v92 = v91 + 16 * v90;
          v93 = v90 + 1;
          while ((unint64_t)(v93 - 1) < *(_QWORD *)(v88 + 16))
          {
            v249 = v93;
            swift_bridgeObjectRetain();
            v94 = objc_msgSend(v20, sel_visualString);
            sub_1CA1F0A0C();

            v95 = objc_allocWithZone(MEMORY[0x1E0CB3940]);
            swift_bridgeObjectRetain();
            v96 = (void *)sub_1CA1F0A00();
            swift_bridgeObjectRelease();
            v97 = objc_msgSend(v95, sel_initWithString_, v96);

            v98 = (void *)sub_1CA1F0A00();
            v99 = (void *)sub_1CA1F0A00();
            v100 = objc_msgSend(v97, sel_stringByReplacingOccurrencesOfString_withString_, v98, v99);

            sub_1CA1F0A0C();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();

            v101 = objc_allocWithZone(MEMORY[0x1E0CB3940]);
            swift_bridgeObjectRetain();
            v102 = (void *)sub_1CA1F0A00();
            swift_bridgeObjectRelease();
            v103 = objc_msgSend(v101, sel_initWithString_, v102);

            v104 = (void *)sub_1CA1F0A00();
            v105 = (void *)sub_1CA1F0A00();
            v106 = objc_msgSend(v103, sel_stringByReplacingOccurrencesOfString_withString_, v104, v105);

            v107 = sub_1CA1F0A0C();
            v109 = v108;
            swift_bridgeObjectRelease();

            v110 = objc_msgSend(v252, sel_concreteGraph);
            if (!v110)
              goto LABEL_148;
            v111 = v110;
            __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_1EF93A370);
            v112 = swift_initStackObject();
            *(_OWORD *)(v112 + 16) = xmmword_1CA1F9100;
            *(_QWORD *)(v112 + 32) = 0x746E656D67617266;
            *(_QWORD *)(v112 + 40) = 0xE800000000000000;
            *(_QWORD *)(v112 + 48) = v250;
            __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_1EF937050);
            v113 = (_QWORD *)sub_1CA1F1264();
            v114 = v250;
            swift_retain();
            v115 = *(_QWORD *)(v112 + 32);
            v116 = *(_QWORD *)(v112 + 40);
            v117 = *(_QWORD *)(v112 + 48);
            swift_bridgeObjectRetain();
            swift_unknownObjectRetain();
            v118 = sub_1CA0AA474(v115, v116);
            if ((v119 & 1) != 0)
              goto LABEL_135;
            v113[(v118 >> 6) + 8] |= 1 << v118;
            v120 = (uint64_t *)(v113[6] + 16 * v118);
            *v120 = v115;
            v120[1] = v116;
            *(_QWORD *)(v113[7] + 8 * v118) = v117;
            v121 = v113[2];
            v58 = __OFADD__(v121, 1);
            v122 = v121 + 1;
            if (v58)
              goto LABEL_136;
            v113[2] = v122;
            swift_release();
            swift_bridgeObjectRelease();
            type metadata accessor for MAQuerySlice();
            v123 = swift_allocObject();
            *(_OWORD *)(v123 + 104) = xmmword_1CA1FC380;
            *(_QWORD *)(v123 + 80) = v107;
            *(_QWORD *)(v123 + 88) = v109;
            *(_QWORD *)(v123 + 96) = v113;
            v124 = objc_msgSend(v111, sel_graphReference);
            *(_OWORD *)(v123 + 48) = 0u;
            *(_OWORD *)(v123 + 64) = 0u;
            *(_QWORD *)(v123 + 16) = v124;
            *(_QWORD *)(v123 + 24) = 0;
            v125 = MEMORY[0x1E0DEE9E0];
            *(_QWORD *)(v123 + 32) = 0x3FF0000000000000;
            *(_QWORD *)(v123 + 40) = v125;

            *(_QWORD *)(v123 + 40) = v254[5];
            swift_bridgeObjectRetain();
            swift_bridgeObjectRelease();
            LOBYTE(v123) = sub_1CA0BE644(&v260, v123);
            swift_release();
            if ((v123 & 1) != 0)
            {
              v26 = 1;
              v88 = v245;
              v90 = v249;
              v20 = v253;
              v91 = v226;
              if (v241 + v249)
                goto LABEL_69;

              goto LABEL_106;
            }
            v88 = v245;
            v93 = v249 + 1;
            v92 += 16;
            v20 = v253;
            if (v241 + v249 + 1 == 1)
            {
              swift_bridgeObjectRelease();
              if ((v232 & 1) != 0)
                goto LABEL_80;
              goto LABEL_82;
            }
          }
LABEL_134:
          __break(1u);
LABEL_135:
          __break(1u);
LABEL_136:
          __break(1u);
          goto LABEL_137;
        }
        swift_bridgeObjectRelease();
        if ((v26 & 1) != 0)
        {
LABEL_80:

          goto LABEL_115;
        }
      }
      else if ((v26 & 1) != 0)
      {
        goto LABEL_80;
      }
LABEL_82:
      __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_1EF937190);
      v126 = swift_initStackObject();
      *(_OWORD *)(v126 + 16) = xmmword_1CA1F9100;
      v260 = 40;
      v261[0] = 0xE100000000000000;
      sub_1CA1F0A3C();
      sub_1CA1F0A3C();
      sub_1CA1F0A3C();
      sub_1CA1F0A3C();
      v127 = v261[0];
      *(_QWORD *)(v126 + 32) = v260;
      *(_QWORD *)(v126 + 40) = v127;
      swift_bridgeObjectRetain();
      v128 = objc_msgSend(v20, sel_visualString);
      sub_1CA1F0A0C();

      v129 = objc_allocWithZone(MEMORY[0x1E0CB3940]);
      swift_bridgeObjectRetain();
      v130 = (void *)sub_1CA1F0A00();
      swift_bridgeObjectRelease();
      v131 = objc_msgSend(v129, sel_initWithString_, v130);

      v132 = (void *)sub_1CA1F0A00();
      v133 = (void *)sub_1CA1F0A00();
      v134 = objc_msgSend(v131, sel_stringByReplacingOccurrencesOfString_withString_, v132, v133);

      sub_1CA1F0A0C();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();

      v135 = objc_allocWithZone(MEMORY[0x1E0CB3940]);
      swift_bridgeObjectRetain();
      v136 = (void *)sub_1CA1F0A00();
      swift_bridgeObjectRelease();
      v137 = objc_msgSend(v135, sel_initWithString_, v136);

      v138 = (void *)sub_1CA1F0A00();
      v139 = (void *)sub_1CA1F0A00();
      v140 = objc_msgSend(v137, sel_stringByReplacingOccurrencesOfString_withString_, v138, v139);

      v141 = sub_1CA1F0A0C();
      v143 = v142;
      swift_bridgeObjectRelease();

      v144 = objc_msgSend(v252, sel_concreteGraph);
      if (!v144)
        goto LABEL_151;
      v145 = v144;
      __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_1EF93A370);
      v146 = swift_initStackObject();
      *(_OWORD *)(v146 + 16) = xmmword_1CA1F9100;
      *(_QWORD *)(v146 + 32) = 0x746E656D67617266;
      *(_QWORD *)(v146 + 40) = 0xE800000000000000;
      *(_QWORD *)(v146 + 48) = v250;
      __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_1EF937050);
      v147 = (_QWORD *)sub_1CA1F1264();
      v148 = v250;
      swift_retain();
      v149 = *(_QWORD *)(v146 + 32);
      v150 = *(_QWORD *)(v146 + 40);
      v151 = *(_QWORD *)(v146 + 48);
      swift_bridgeObjectRetain();
      swift_unknownObjectRetain();
      v152 = sub_1CA0AA474(v149, v150);
      if ((v153 & 1) != 0)
        goto LABEL_143;
      v147[(v152 >> 6) + 8] |= 1 << v152;
      v154 = (uint64_t *)(v147[6] + 16 * v152);
      *v154 = v149;
      v154[1] = v150;
      *(_QWORD *)(v147[7] + 8 * v152) = v151;
      v155 = v147[2];
      v58 = __OFADD__(v155, 1);
      v156 = v155 + 1;
      if (v58)
        goto LABEL_144;
      v147[2] = v156;
      swift_release();
      swift_bridgeObjectRelease();
      type metadata accessor for MAQuerySlice();
      v157 = swift_allocObject();
      *(_OWORD *)(v157 + 104) = xmmword_1CA1FC380;
      *(_QWORD *)(v157 + 80) = v141;
      *(_QWORD *)(v157 + 88) = v143;
      *(_QWORD *)(v157 + 96) = v147;
      v158 = objc_msgSend(v145, sel_graphReference);
      *(_OWORD *)(v157 + 48) = 0u;
      *(_OWORD *)(v157 + 64) = 0u;
      *(_QWORD *)(v157 + 16) = v158;
      *(_QWORD *)(v157 + 24) = 0;
      v159 = MEMORY[0x1E0DEE9E0];
      *(_QWORD *)(v157 + 32) = 0x3FF0000000000000;
      *(_QWORD *)(v157 + 40) = v159;

      *(_QWORD *)(v157 + 40) = v254[5];
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      sub_1CA0BE644(&v260, v157);
      swift_release();
      swift_bridgeObjectRelease();

      goto LABEL_114;
    }
    v260 = v234;
    sub_1CA0B6A98((uint64_t)v264, (uint64_t)v261);
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_1EF93A360);
    if ((swift_dynamicCast() & 1) == 0)
      goto LABEL_115;
    v248 = v256;
    v63 = v257;
    v64 = v258;
    v65 = v259;
    v66 = (*(uint64_t (**)(id, _QWORD *, uint64_t, unint64_t, uint64_t, uint64_t, _QWORD))(*(_QWORD *)a1 + 352))(v20, v254, 0x656372756F73, 0xE600000000000000, v258, v259, 0);
    v251 = v63;
    if (v66)
    {
      v67 = v66;
      v244 = v64;
      v231 = v65;
      v68 = *(_QWORD *)(v66 + 16);
      if (v68)
      {
        v240 = 0;
        v69 = 0;
        v70 = -v68;
        v71 = v66 + 40;
        v225 = v66 + 40;
        while (2)
        {
          v72 = v71 + 16 * v69++;
          while (1)
          {
            if ((unint64_t)(v69 - 1) >= *(_QWORD *)(v67 + 16))
            {
              __break(1u);
              goto LABEL_139;
            }
            swift_bridgeObjectRetain();
            v73 = objc_msgSend(v20, sel_visualString);
            sub_1CA1F0A0C();

            v74 = objc_allocWithZone(MEMORY[0x1E0CB3940]);
            swift_bridgeObjectRetain();
            v75 = (void *)sub_1CA1F0A00();
            swift_bridgeObjectRelease();
            v76 = objc_msgSend(v74, sel_initWithString_, v75);

            v77 = (void *)sub_1CA1F0A00();
            v78 = (void *)sub_1CA1F0A00();
            v79 = objc_msgSend(v76, sel_stringByReplacingOccurrencesOfString_withString_, v77, v78);

            sub_1CA1F0A0C();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();

            v260 = v248;
            v261[0] = v251;
            swift_bridgeObjectRetain();
            sub_1CA1F0A3C();
            sub_1CA1F0A3C();
            swift_bridgeObjectRelease();
            v80 = v260;
            v81 = v261[0];
            v82 = objc_msgSend(v252, sel_concreteGraph);
            if (!v82)
              goto LABEL_149;
            v83 = v82;
            type metadata accessor for MAQuerySlice();
            v84 = swift_allocObject();
            *(_OWORD *)(v84 + 104) = xmmword_1CA1FC380;
            *(_QWORD *)(v84 + 80) = v80;
            *(_QWORD *)(v84 + 88) = v81;
            *(_QWORD *)(v84 + 96) = MEMORY[0x1E0DEE9E0];
            v85 = objc_msgSend(v83, sel_graphReference);

            *(_OWORD *)(v84 + 48) = 0u;
            *(_OWORD *)(v84 + 64) = 0u;
            *(_QWORD *)(v84 + 16) = v85;
            *(_QWORD *)(v84 + 24) = 0;
            v86 = v254[5];
            *(_QWORD *)(v84 + 32) = 0x3FF0000000000000;
            *(_QWORD *)(v84 + 40) = v86;
            swift_bridgeObjectRetain();
            swift_bridgeObjectRelease();
            LOBYTE(v83) = sub_1CA0BE644(&v260, v84);
            swift_release();
            if ((v83 & 1) != 0)
              break;
            ++v69;
            v72 += 16;
            v20 = v253;
            if (v70 + v69 == 1)
              goto LABEL_90;
          }
          v240 = 1;
          v20 = v253;
          v71 = v225;
          if (v70 + v69)
            continue;
          break;
        }
      }
      else
      {
        v240 = 0;
      }
LABEL_90:
      swift_bridgeObjectRelease();
      v65 = v231;
      v160 = v240;
      v64 = v244;
    }
    else
    {
      v160 = 0;
    }
    v161 = v254[5];
    if (!*(_QWORD *)(v161 + 16))
    {
LABEL_104:
      if ((v160 & 1) == 0)
        goto LABEL_112;
      goto LABEL_105;
    }
    swift_retain();
    swift_bridgeObjectRetain();
    v162 = sub_1CA0AA5E0(a1);
    if ((v163 & 1) == 0)
    {
      swift_release();
      swift_bridgeObjectRelease();
      if ((v160 & 1) == 0)
        goto LABEL_112;
      goto LABEL_105;
    }
    v164 = *(void (**)(uint64_t *__return_ptr, uint64_t *, uint64_t *))(*(_QWORD *)(v161 + 56) + 16 * v162);
    swift_retain();
    swift_release();
    swift_bridgeObjectRelease();
    v260 = v64;
    v261[0] = v65;
    v256 = 0x746567726174;
    v257 = 0xE600000000000000;
    v164(&v255, &v260, &v256);
    swift_release();
    v165 = v255;
    if (!v255)
      goto LABEL_104;
    v166 = *(_QWORD *)(v255 + 16);
    if (v166)
      break;
    swift_bridgeObjectRelease();
    if ((v160 & 1) == 0)
    {
LABEL_112:
      __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_1EF937190);
      v184 = swift_initStackObject();
      *(_OWORD *)(v184 + 16) = xmmword_1CA1F9100;
      v260 = 40;
      v261[0] = 0xE100000000000000;
      sub_1CA1F0A3C();
      sub_1CA1F0A3C();
      sub_1CA1F0A3C();
      sub_1CA1F0A3C();
      v185 = v261[0];
      *(_QWORD *)(v184 + 32) = v260;
      *(_QWORD *)(v184 + 40) = v185;
      swift_bridgeObjectRetain();
      v186 = objc_msgSend(v20, sel_visualString);
      sub_1CA1F0A0C();

      v187 = objc_allocWithZone(MEMORY[0x1E0CB3940]);
      swift_bridgeObjectRetain();
      v188 = (void *)sub_1CA1F0A00();
      swift_bridgeObjectRelease();
      v189 = objc_msgSend(v187, sel_initWithString_, v188);

      v190 = (void *)sub_1CA1F0A00();
      v191 = (void *)sub_1CA1F0A00();
      v192 = objc_msgSend(v189, sel_stringByReplacingOccurrencesOfString_withString_, v190, v191);

      sub_1CA1F0A0C();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();

      v260 = v248;
      v261[0] = v251;
      swift_bridgeObjectRetain();
      sub_1CA1F0A3C();
      sub_1CA1F0A3C();
      swift_bridgeObjectRelease();
      v193 = v260;
      v194 = v261[0];
      v195 = objc_msgSend(v252, sel_concreteGraph);
      if (!v195)
        goto LABEL_152;
      v196 = v195;
      type metadata accessor for MAQuerySlice();
      v197 = swift_allocObject();
      *(_OWORD *)(v197 + 104) = xmmword_1CA1FC380;
      *(_QWORD *)(v197 + 80) = v193;
      *(_QWORD *)(v197 + 88) = v194;
      *(_QWORD *)(v197 + 96) = MEMORY[0x1E0DEE9E0];
      v198 = objc_msgSend(v196, sel_graphReference);

      *(_OWORD *)(v197 + 48) = 0u;
      *(_OWORD *)(v197 + 64) = 0u;
      *(_QWORD *)(v197 + 16) = v198;
      *(_QWORD *)(v197 + 24) = 0;
      v199 = v254[5];
      *(_QWORD *)(v197 + 32) = 0x3FF0000000000000;
      *(_QWORD *)(v197 + 40) = v199;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      sub_1CA0BE644(&v260, v197);
      swift_release();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
LABEL_114:
      v20 = v253;
      goto LABEL_115;
    }
LABEL_105:
    swift_bridgeObjectRelease();
LABEL_106:
    swift_bridgeObjectRelease();
LABEL_115:
    v200 = v262;
    if ((v262 & 0xC000000000000001) != 0)
    {
      swift_bridgeObjectRetain();
      v201 = sub_1CA1F0FA0();
      swift_bridgeObjectRelease();
      if (v201 < 1)
        goto LABEL_14;
    }
    else if (*(uint64_t *)(v262 + 16) < 1)
    {
LABEL_14:

      goto LABEL_15;
    }
    v202 = v20;
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    v260 = v235;
    v205 = sub_1CA0AA594((uint64_t)v202);
    v206 = *(_QWORD *)(v235 + 16);
    v207 = (v204 & 1) == 0;
    v208 = v206 + v207;
    if (__OFADD__(v206, v207))
      goto LABEL_140;
    v209 = v204;
    if (*(_QWORD *)(v235 + 24) >= v208)
    {
      if ((isUniquelyReferenced_nonNull_native & 1) == 0)
        sub_1CA0F1180();
    }
    else
    {
      sub_1CA0EE4B0(v208, isUniquelyReferenced_nonNull_native);
      v210 = sub_1CA0AA594((uint64_t)v202);
      if ((v209 & 1) != (v211 & 1))
        goto LABEL_154;
      v205 = v210;
    }
    v212 = (_QWORD *)v260;
    v235 = v260;
    if ((v209 & 1) != 0)
    {
      v213 = *(_QWORD *)(v260 + 56);
      swift_bridgeObjectRelease();
      *(_QWORD *)(v213 + 8 * v205) = v200;
    }
    else
    {
      *(_QWORD *)(v260 + 8 * (v205 >> 6) + 64) |= 1 << v205;
      v214 = 8 * v205;
      *(_QWORD *)(v212[6] + v214) = v202;
      *(_QWORD *)(v212[7] + v214) = v200;
      v215 = v212[2];
      v58 = __OFADD__(v215, 1);
      v216 = v215 + 1;
      if (v58)
        goto LABEL_141;
      v212[2] = v216;
      v217 = v202;
    }

LABEL_15:
    swift_bridgeObjectRelease();
    v12 = v237;
    v13 = v238;
  }
  v242 = v160;
  v167 = 0;
  v246 = -v166;
  v168 = v255 + 40;
  v227 = v255 + 40;
LABEL_96:
  v169 = v168 + 16 * v167++;
  while ((unint64_t)(v167 - 1) < *(_QWORD *)(v165 + 16))
  {
    swift_bridgeObjectRetain();
    v170 = objc_msgSend(v20, sel_visualString);
    sub_1CA1F0A0C();

    v171 = objc_allocWithZone(MEMORY[0x1E0CB3940]);
    swift_bridgeObjectRetain();
    v172 = (void *)sub_1CA1F0A00();
    swift_bridgeObjectRelease();
    v173 = objc_msgSend(v171, sel_initWithString_, v172);

    v174 = (void *)sub_1CA1F0A00();
    v175 = (void *)sub_1CA1F0A00();
    v176 = objc_msgSend(v173, sel_stringByReplacingOccurrencesOfString_withString_, v174, v175);

    sub_1CA1F0A0C();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();

    v260 = v248;
    v261[0] = v251;
    swift_bridgeObjectRetain();
    sub_1CA1F0A3C();
    sub_1CA1F0A3C();
    swift_bridgeObjectRelease();
    v177 = v260;
    v178 = v261[0];
    v179 = objc_msgSend(v252, sel_concreteGraph);
    if (!v179)
      goto LABEL_150;
    v180 = v179;
    type metadata accessor for MAQuerySlice();
    v181 = swift_allocObject();
    *(_OWORD *)(v181 + 104) = xmmword_1CA1FC380;
    *(_QWORD *)(v181 + 80) = v177;
    *(_QWORD *)(v181 + 88) = v178;
    *(_QWORD *)(v181 + 96) = MEMORY[0x1E0DEE9E0];
    v182 = objc_msgSend(v180, sel_graphReference);

    *(_OWORD *)(v181 + 48) = 0u;
    *(_OWORD *)(v181 + 64) = 0u;
    *(_QWORD *)(v181 + 16) = v182;
    *(_QWORD *)(v181 + 24) = 0;
    v183 = v254[5];
    *(_QWORD *)(v181 + 32) = 0x3FF0000000000000;
    *(_QWORD *)(v181 + 40) = v183;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    LOBYTE(v180) = sub_1CA0BE644(&v260, v181);
    swift_release();
    if ((v180 & 1) != 0)
    {
      v242 = 1;
      v20 = v253;
      v168 = v227;
      if (v246 + v167)
        goto LABEL_96;
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      goto LABEL_106;
    }
    ++v167;
    v169 += 16;
    v20 = v253;
    if (v246 + v167 == 1)
    {
      swift_bridgeObjectRelease();
      if ((v242 & 1) != 0)
        goto LABEL_105;
      goto LABEL_112;
    }
  }
LABEL_139:
  __break(1u);
LABEL_140:
  __break(1u);
LABEL_141:
  __break(1u);
LABEL_142:
  __break(1u);
LABEL_143:
  __break(1u);
LABEL_144:
  __break(1u);
LABEL_145:
  __break(1u);
LABEL_146:
  __break(1u);
LABEL_147:
  __break(1u);
LABEL_148:
  __break(1u);
LABEL_149:
  __break(1u);
LABEL_150:
  __break(1u);
LABEL_151:
  __break(1u);
LABEL_152:
  __break(1u);
LABEL_153:
  __break(1u);
LABEL_154:
  result = sub_1CA1F1360();
  __break(1u);
  return result;
}

uint64_t MAGraph.slice(visualFormat:visualElements:weight:)(uint64_t a1, uint64_t a2, uint64_t a3, double a4)
{
  void *v4;
  uint64_t v9;
  id v10;
  id v11;

  type metadata accessor for MAQuerySlice();
  v9 = swift_allocObject();
  *(_OWORD *)(v9 + 104) = xmmword_1CA1FC380;
  *(_QWORD *)(v9 + 80) = a1;
  *(_QWORD *)(v9 + 88) = a2;
  *(_QWORD *)(v9 + 96) = a3;
  v10 = v4;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v11 = objc_msgSend(v10, sel_graphReference);
  *(_QWORD *)(v9 + 40) = MEMORY[0x1E0DEE9E0];
  *(_OWORD *)(v9 + 48) = 0u;
  *(_OWORD *)(v9 + 64) = 0u;
  *(_QWORD *)(v9 + 16) = v11;
  *(_QWORD *)(v9 + 24) = 0;
  *(double *)(v9 + 32) = a4;

  return v9;
}

_QWORD *sub_1CA14574C(void (*a1)(void))
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  _QWORD *result;
  unint64_t v9;
  id v10;
  void *v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;

  v3 = (*(uint64_t (**)(void))(*(_QWORD *)v1 + 216))();
  v4 = sub_1CA0B57C8(v3);
  swift_bridgeObjectRelease();
  if (v4 < 0 || (v4 & 0x4000000000000000) != 0)
    goto LABEL_15;
  v5 = *(_QWORD *)(v4 + 16);
  v6 = (_QWORD *)sub_1CA0B4464(v5, 0.0);
  v7 = *(_QWORD *)(v4 + 16);
  result = (_QWORD *)swift_retain();
  v15 = v5;
  if (v7)
  {
    while (v7 >= 1)
    {
      v9 = 0;
      while (1)
      {
        v10 = (v4 & 0xC000000000000001) != 0
            ? (id)MEMORY[0x1CAA4A7A4](v9, v4)
            : *(id *)(v4 + 8 * v9 + 32);
        v11 = v10;
        a1();
        v13 = v12;
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
          v6 = sub_1CA0B6058(v6);
        if (v9 >= v6[2])
          break;
        v6[v9++ + 4] = v13;

        if (v7 == v9)
          goto LABEL_16;
      }
      __break(1u);
LABEL_15:
      swift_bridgeObjectRetain();
      v14 = sub_1CA1F1234();
      swift_release();
      v6 = (_QWORD *)sub_1CA0B4464(v14, 0.0);
      swift_retain();
      result = (_QWORD *)sub_1CA1F1234();
      v7 = (uint64_t)result;
      v15 = v14;
      if (!result)
        goto LABEL_16;
    }
    __break(1u);
  }
  else
  {
LABEL_16:
    swift_release();
    type metadata accessor for MAVectorRepresentation();
    result = (_QWORD *)swift_allocObject();
    result[2] = 1;
    result[3] = v15;
    result[4] = v6;
    result[5] = v4;
  }
  return result;
}

void sub_1CA145900(uint64_t (*a1)(id))
{
  id *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  int64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  int64_t v14;
  id v15;
  unint64_t v16;
  int64_t v17;
  int64_t v18;
  id v19;
  void *v20;
  uint64_t v21;
  id v22;
  uint64_t v23;
  uint64_t v24;
  int64_t v25;
  uint64_t v26;
  id v27[2];
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  int64_t v32;
  unint64_t v33;

  v28 = MEMORY[0x1E0DEE9E8];
  v3 = (*((uint64_t (**)(void))*v1 + 27))();
  v4 = v3;
  if ((v3 & 0xC000000000000001) != 0)
  {
    sub_1CA1F0F64();
    sub_1CA0AB910(0, (unint64_t *)&qword_1EF93A320);
    sub_1CA0C0614();
    sub_1CA1F0CC4();
    v4 = v29;
    v26 = v30;
    v5 = v31;
    v6 = v32;
    v7 = v33;
  }
  else
  {
    v6 = 0;
    v8 = -1 << *(_BYTE *)(v3 + 32);
    v26 = v3 + 56;
    v9 = ~v8;
    v10 = -v8;
    if (v10 < 64)
      v11 = ~(-1 << v10);
    else
      v11 = -1;
    v7 = v11 & *(_QWORD *)(v3 + 56);
    v5 = v9;
  }
  v25 = (unint64_t)(v5 + 64) >> 6;
  while (v4 < 0)
  {
    if (!sub_1CA1F0FD0())
      goto LABEL_34;
    sub_1CA0AB910(0, (unint64_t *)&qword_1EF93A320);
    swift_unknownObjectRetain();
    swift_dynamicCast();
    v15 = v27[0];
    swift_unknownObjectRelease();
    v14 = v6;
    v12 = v7;
    if (!v15)
      goto LABEL_34;
LABEL_25:
    if ((a1(v15) & 1) != 0)
    {
      sub_1CA0BDD74(v27, v15);

    }
    else
    {

    }
    v6 = v14;
    v7 = v12;
  }
  if (v7)
  {
    v12 = (v7 - 1) & v7;
    v13 = __clz(__rbit64(v7)) | (v6 << 6);
    v14 = v6;
    goto LABEL_24;
  }
  v14 = v6 + 1;
  if (__OFADD__(v6, 1))
  {
    __break(1u);
    goto LABEL_37;
  }
  if (v14 >= v25)
    goto LABEL_34;
  v16 = *(_QWORD *)(v26 + 8 * v14);
  if (v16)
  {
LABEL_23:
    v12 = (v16 - 1) & v16;
    v13 = __clz(__rbit64(v16)) + (v14 << 6);
LABEL_24:
    v15 = *(id *)(*(_QWORD *)(v4 + 48) + 8 * v13);
    if (!v15)
      goto LABEL_34;
    goto LABEL_25;
  }
  v17 = v6 + 2;
  if (v6 + 2 >= v25)
    goto LABEL_34;
  v16 = *(_QWORD *)(v26 + 8 * v17);
  if (v16)
    goto LABEL_22;
  v17 = v6 + 3;
  if (v6 + 3 >= v25)
    goto LABEL_34;
  v16 = *(_QWORD *)(v26 + 8 * v17);
  if (v16)
  {
LABEL_22:
    v14 = v17;
    goto LABEL_23;
  }
  v14 = v6 + 4;
  if (v6 + 4 >= v25)
    goto LABEL_34;
  v16 = *(_QWORD *)(v26 + 8 * v14);
  if (v16)
    goto LABEL_23;
  v18 = v6 + 5;
  while (v25 != v18)
  {
    v16 = *(_QWORD *)(v26 + 8 * v18++);
    if (v16)
    {
      v14 = v18 - 1;
      goto LABEL_23;
    }
  }
LABEL_34:
  sub_1CA0B6A14();
  v19 = objc_msgSend(v1[2], sel_concreteGraph);
  if (v19)
  {
    v20 = v19;
    v21 = v28;
    v22 = objc_msgSend(v19, sel_graphReference);
    type metadata accessor for MASlice();
    v23 = swift_allocObject();

    v24 = MEMORY[0x1E0DEE9E0];
    *(_OWORD *)(v23 + 48) = 0u;
    *(_OWORD *)(v23 + 64) = 0u;
    *(_QWORD *)(v23 + 16) = v22;
    *(_QWORD *)(v23 + 24) = v21;
    *(_QWORD *)(v23 + 32) = 0x3FF0000000000000;
    *(_QWORD *)(v23 + 40) = v24;
    return;
  }
LABEL_37:
  __break(1u);
}

uint64_t MASlice.deinit()
{
  uint64_t v0;

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_1CA0AAE34(*(_QWORD *)(v0 + 48));
  swift_bridgeObjectRelease();
  return v0;
}

uint64_t MASlice.__deallocating_deinit()
{
  uint64_t v0;

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_1CA0AAE34(*(_QWORD *)(v0 + 48));
  swift_bridgeObjectRelease();
  return swift_deallocClassInstance();
}

uint64_t sub_1CA145CF4()
{
  uint64_t v0;
  _BYTE v2[72];

  sub_1CA1F13F0();
  (*(void (**)(_BYTE *))(*(_QWORD *)v0 + 272))(v2);
  return sub_1CA1F1438();
}

uint64_t sub_1CA145D38()
{
  uint64_t *v0;
  uint64_t v1;
  _BYTE v3[72];

  v1 = *v0;
  sub_1CA1F13F0();
  (*(void (**)(_BYTE *))(*(_QWORD *)v1 + 272))(v3);
  return sub_1CA1F1438();
}

uint64_t sub_1CA145D80()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(**(_QWORD **)v0 + 272))();
}

uint64_t sub_1CA145DA8()
{
  uint64_t v0;
  _BYTE v2[72];

  sub_1CA1F13F0();
  (*(void (**)(_BYTE *))(**(_QWORD **)v0 + 272))(v2);
  return sub_1CA1F1438();
}

uint64_t sub_1CA145DEC(uint64_t a1, _QWORD *a2)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)a1 + 280))(*a2) & 1;
}

uint64_t == infix(_:_:)(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 280))(a2) & 1;
}

void MASlice.description.getter()
{
  uint64_t v0;
  uint64_t v1;
  id v2;
  void *v3;
  unsigned int v4;
  uint64_t v5;
  uint64_t (*v6)(uint64_t);
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  id v15;
  uint64_t v16;
  uint64_t v17;
  id v18;
  void *v19;
  id v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  id v25;
  uint64_t v26;
  unint64_t v27;
  unint64_t v28;
  _OWORD v29[2];
  unint64_t v30;
  _OWORD v31[2];
  unint64_t v32;
  __int128 v33;

  v1 = v0;
  v2 = objc_msgSend(*(id *)(v0 + 16), sel_concreteGraph);
  if (!v2)
    goto LABEL_30;
  v3 = v2;
  v4 = objc_msgSend(v2, sel_hasPendingRead);

  if (!v4)
    goto LABEL_29;
  *(_QWORD *)&v31[0] = 0;
  *((_QWORD *)&v31[0] + 1) = 0xE000000000000000;
  sub_1CA1F1054();
  v5 = sub_1CA1F0A3C();
  v6 = *(uint64_t (**)(uint64_t))(*(_QWORD *)v1 + 256);
  v7 = *(_QWORD *)(v6(v5) + 16);
  swift_bridgeObjectRelease();
  *(_QWORD *)&v29[0] = v7;
  sub_1CA1F12AC();
  sub_1CA1F0A3C();
  swift_bridgeObjectRelease();
  v8 = sub_1CA1F0A3C();
  v9 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v1 + 216))(v8);
  if ((v9 & 0xC000000000000001) != 0)
    v10 = sub_1CA1F0FA0();
  else
    v10 = *(_QWORD *)(v9 + 16);
  swift_bridgeObjectRelease();
  *(_QWORD *)&v29[0] = v10;
  sub_1CA1F12AC();
  sub_1CA1F0A3C();
  swift_bridgeObjectRelease();
  v11 = sub_1CA1F0A3C();
  v33 = v31[0];
  v12 = v6(v11);
  v23 = *(_QWORD *)(v12 + 16);
  if (!v23)
  {
    swift_bridgeObjectRelease();
    return;
  }
  v13 = 0;
  v22 = v12 + 32;
  v21 = v12;
  while (v13 < *(_QWORD *)(v12 + 16))
  {
    sub_1CA1516C4(v22 + 40 * v13, (uint64_t)v31, &qword_1EF93A380);
    v14 = v32;
    sub_1CA0AFCC0(v31, v29);
    v30 = v14;
    sub_1CA0B6A98((uint64_t)v29, (uint64_t)&v26);
    v28 = v14;
    sub_1CA0AB910(0, (unint64_t *)&qword_1EF93A320);
    swift_bridgeObjectRetain();
    if (swift_dynamicCast())
    {
      v26 = 2314;
      v27 = 0xE200000000000000;
      v15 = objc_msgSend(v25, sel_visualString);
      sub_1CA1F0A0C();

      sub_1CA1F0A3C();
      swift_bridgeObjectRelease();
      sub_1CA1F0A3C();

    }
    else
    {
      sub_1CA0B6A98((uint64_t)v29, (uint64_t)&v26);
      v28 = v14;
      __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_1EF93A360);
      if ((swift_dynamicCast() & 1) == 0)
        goto LABEL_15;
      v26 = 2314;
      v27 = 0xE200000000000000;
      sub_1CA1F0A3C();
      sub_1CA1F0A3C();
      sub_1CA1F0A3C();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      sub_1CA1F0A3C();
      sub_1CA1F0A3C();
    }
    swift_bridgeObjectRelease();
LABEL_15:
    v24 = v13;
    sub_1CA0B6A98((uint64_t)v29, (uint64_t)&v26);
    v28 = v14;
    __swift_destroy_boxed_opaque_existential_0((uint64_t)&v26);
    if (v14 >> 62)
    {
      swift_bridgeObjectRetain();
      v16 = sub_1CA1F1234();
      swift_bridgeObjectRelease();
      if (!v16)
        goto LABEL_8;
    }
    else
    {
      v16 = *(_QWORD *)((v14 & 0xFFFFFFFFFFFFF8) + 0x10);
      if (!v16)
        goto LABEL_8;
    }
    if (v16 < 1)
      goto LABEL_28;
    v17 = 0;
    do
    {
      if ((v14 & 0xC000000000000001) != 0)
        v18 = (id)MEMORY[0x1CAA4A7A4](v17, v14);
      else
        v18 = *(id *)(v14 + 8 * v17 + 32);
      v19 = v18;
      ++v17;
      v26 = 592138;
      v27 = 0xE300000000000000;
      v20 = objc_msgSend(v18, sel_visualString);
      sub_1CA1F0A0C();

      sub_1CA1F0A3C();
      swift_bridgeObjectRelease();
      sub_1CA1F0A3C();

      swift_bridgeObjectRelease();
    }
    while (v16 != v17);
LABEL_8:
    ++v13;
    swift_bridgeObjectRelease();
    sub_1CA0B6AD4((uint64_t)v29, &qword_1EF93A380);
    v12 = v21;
    if (v24 + 1 == v23)
    {
      swift_bridgeObjectRelease();
      return;
    }
  }
  __break(1u);
LABEL_28:
  __break(1u);
LABEL_29:
  __break(1u);
LABEL_30:
  __break(1u);
}

void MASlice.shortDescription.getter()
{
  uint64_t v0;
  uint64_t v1;
  id v2;
  void *v3;
  unsigned int v4;
  uint64_t v5;
  uint64_t (*v6)(uint64_t);
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t i;
  id v15;
  uint64_t v16;
  id v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  _OWORD v21[2];
  uint64_t v22;
  _OWORD v23[2];
  uint64_t v24;
  __int128 v25;

  v1 = v0;
  v2 = objc_msgSend(*(id *)(v0 + 16), sel_concreteGraph);
  if (!v2)
    goto LABEL_17;
  v3 = v2;
  v4 = objc_msgSend(v2, sel_hasPendingRead);

  if (!v4)
  {
    __break(1u);
LABEL_17:
    __break(1u);
    return;
  }
  *(_QWORD *)&v23[0] = 0;
  *((_QWORD *)&v23[0] + 1) = 0xE000000000000000;
  sub_1CA1F1054();
  v5 = sub_1CA1F0A3C();
  v6 = *(uint64_t (**)(uint64_t))(*(_QWORD *)v1 + 256);
  v7 = *(_QWORD *)(v6(v5) + 16);
  swift_bridgeObjectRelease();
  *(_QWORD *)&v21[0] = v7;
  sub_1CA1F12AC();
  sub_1CA1F0A3C();
  swift_bridgeObjectRelease();
  v8 = sub_1CA1F0A3C();
  v9 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v1 + 216))(v8);
  if ((v9 & 0xC000000000000001) != 0)
    v10 = sub_1CA1F0FA0();
  else
    v10 = *(_QWORD *)(v9 + 16);
  swift_bridgeObjectRelease();
  *(_QWORD *)&v21[0] = v10;
  sub_1CA1F12AC();
  sub_1CA1F0A3C();
  swift_bridgeObjectRelease();
  v11 = sub_1CA1F0A3C();
  v25 = v23[0];
  v12 = v6(v11);
  v13 = *(_QWORD *)(v12 + 16);
  if (v13)
  {
    for (i = v12 + 32; ; i += 40)
    {
      sub_1CA1516C4(i, (uint64_t)v23, &qword_1EF93A380);
      v16 = v24;
      sub_1CA0AFCC0(v23, v21);
      v22 = v16;
      sub_1CA0B6A98((uint64_t)v21, (uint64_t)&v18);
      v20 = v16;
      sub_1CA0AB910(0, (unint64_t *)&qword_1EF93A320);
      swift_bridgeObjectRetain();
      if (swift_dynamicCast())
      {
        swift_bridgeObjectRelease();
        v18 = 2314;
        v19 = 0xE200000000000000;
        v15 = objc_msgSend(v17, sel_visualString);
        sub_1CA1F0A0C();

        sub_1CA1F0A3C();
        swift_bridgeObjectRelease();
        sub_1CA1F0A3C();

      }
      else
      {
        sub_1CA0B6A98((uint64_t)v21, (uint64_t)&v18);
        swift_bridgeObjectRelease();
        v20 = v16;
        __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_1EF93A360);
        if ((swift_dynamicCast() & 1) == 0)
          goto LABEL_10;
        v18 = 2314;
        v19 = 0xE200000000000000;
        sub_1CA1F0A3C();
        sub_1CA1F0A3C();
        sub_1CA1F0A3C();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        sub_1CA1F0A3C();
        sub_1CA1F0A3C();
      }
      swift_bridgeObjectRelease();
LABEL_10:
      sub_1CA0B6AD4((uint64_t)v21, &qword_1EF93A380);
      if (!--v13)
      {
        swift_bridgeObjectRelease();
        return;
      }
    }
  }
  swift_bridgeObjectRelease();
}

void sub_1CA146718()
{
  MASlice.description.getter();
}

uint64_t MAGraph.slice(domain:weight:)(__int16 a1, double a2)
{
  void *v2;
  uint64_t v5;
  uint64_t v6;
  id v7;
  id v8;

  __swift_instantiateConcreteTypeFromMangledName(&qword_1EF93A388);
  v5 = swift_allocObject();
  *(_OWORD *)(v5 + 16) = xmmword_1CA1F9100;
  *(_WORD *)(v5 + 32) = a1;
  type metadata accessor for MADomainsSlice();
  v6 = swift_allocObject();
  *(_QWORD *)(v6 + 80) = v5;
  v7 = v2;
  v8 = objc_msgSend(v7, sel_graphReference);

  *(_QWORD *)(v6 + 40) = MEMORY[0x1E0DEE9E0];
  *(_OWORD *)(v6 + 48) = 0u;
  *(_OWORD *)(v6 + 64) = 0u;
  *(_QWORD *)(v6 + 16) = v8;
  *(_QWORD *)(v6 + 24) = 0;
  *(double *)(v6 + 32) = a2;
  return v6;
}

uint64_t MAGraph.slice(domains:weight:)(uint64_t a1, double a2)
{
  return sub_1CA146808(a1, (void (*)(void))type metadata accessor for MADomainsSlice, a2);
}

uint64_t MAGraph.slice(slices:weight:)(uint64_t a1, double a2)
{
  return sub_1CA146808(a1, (void (*)(void))type metadata accessor for MASlices, a2);
}

uint64_t sub_1CA146808(uint64_t a1, void (*a2)(void), double a3)
{
  void *v3;
  uint64_t v6;
  id v7;
  id v8;

  a2();
  v6 = swift_allocObject();
  *(_QWORD *)(v6 + 80) = a1;
  v7 = v3;
  swift_bridgeObjectRetain();
  v8 = objc_msgSend(v7, sel_graphReference);

  *(_QWORD *)(v6 + 40) = MEMORY[0x1E0DEE9E0];
  *(_OWORD *)(v6 + 48) = 0u;
  *(_OWORD *)(v6 + 64) = 0u;
  *(_QWORD *)(v6 + 16) = v8;
  *(_QWORD *)(v6 + 24) = 0;
  *(double *)(v6 + 32) = a3;
  return v6;
}

uint64_t MAGraph.slice(label:weight:)(uint64_t a1, uint64_t a2, double a3)
{
  void *v3;
  uint64_t v7;
  id v8;
  id v9;

  type metadata accessor for MAFetchSlice();
  v7 = swift_allocObject();
  *(_WORD *)(v7 + 80) = kMAElementIgnoreDomain;
  *(_BYTE *)(v7 + 82) = 0;
  *(_QWORD *)(v7 + 88) = a1;
  *(_QWORD *)(v7 + 96) = a2;
  *(_QWORD *)(v7 + 104) = 0;
  *(_QWORD *)(v7 + 112) = 0;
  v8 = v3;
  swift_bridgeObjectRetain();
  v9 = objc_msgSend(v8, sel_graphReference);

  *(_QWORD *)(v7 + 40) = MEMORY[0x1E0DEE9E0];
  *(_OWORD *)(v7 + 48) = 0u;
  *(_OWORD *)(v7 + 64) = 0u;
  *(_QWORD *)(v7 + 16) = v9;
  *(_QWORD *)(v7 + 24) = 0;
  *(double *)(v7 + 32) = a3;
  return v7;
}

uint64_t MAGraph.slice(label:domain:properties:weight:)(uint64_t a1, uint64_t a2, int a3, uint64_t a4, double a5)
{
  void *v5;
  uint64_t v11;
  id v12;
  __int16 v13;
  id v14;

  type metadata accessor for MAFetchSlice();
  v11 = swift_allocObject();
  swift_bridgeObjectRetain();
  v12 = v5;
  swift_bridgeObjectRetain();
  v13 = kMAElementIgnoreDomain;
  if ((a3 & 0x10000) == 0)
    v13 = a3;
  *(_WORD *)(v11 + 80) = v13;
  *(_BYTE *)(v11 + 82) = 0;
  *(_QWORD *)(v11 + 88) = a1;
  *(_QWORD *)(v11 + 96) = a2;
  *(_QWORD *)(v11 + 104) = a4;
  *(_QWORD *)(v11 + 112) = 0;
  v14 = objc_msgSend(v12, sel_graphReference);
  *(_QWORD *)(v11 + 40) = MEMORY[0x1E0DEE9E0];
  *(_OWORD *)(v11 + 48) = 0u;
  *(_OWORD *)(v11 + 64) = 0u;
  *(_QWORD *)(v11 + 16) = v14;
  *(_QWORD *)(v11 + 24) = 0;
  *(double *)(v11 + 32) = a5;

  return v11;
}

uint64_t MAGraph.slice(node:weight:)(void *a1, double a2)
{
  void *v2;
  uint64_t inited;
  id v6;
  uint64_t v7;
  id v8;
  id v9;
  uint64_t v10;
  unint64_t v12;

  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_1ED852A58);
  inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_1CA1F9520;
  *(_QWORD *)(inited + 32) = a1;
  v12 = inited;
  sub_1CA1F0B14();
  v6 = a1;
  v7 = sub_1CA0C68DC(v12);
  swift_bridgeObjectRelease();
  v8 = v2;
  v9 = objc_msgSend(v8, sel_graphReference);
  type metadata accessor for MASlice();
  v10 = swift_allocObject();

  *(_QWORD *)(v10 + 40) = MEMORY[0x1E0DEE9E0];
  *(_OWORD *)(v10 + 48) = 0u;
  *(_OWORD *)(v10 + 64) = 0u;
  *(_QWORD *)(v10 + 16) = v9;
  *(_QWORD *)(v10 + 24) = v7;
  *(double *)(v10 + 32) = a2;
  return v10;
}

uint64_t MAGraph.slice(nodes:weight:)(uint64_t a1, double a2)
{
  void *v2;
  id v5;
  id v6;
  uint64_t v7;

  swift_bridgeObjectRetain();
  v5 = v2;
  v6 = objc_msgSend(v5, sel_graphReference);
  type metadata accessor for MASlice();
  v7 = swift_allocObject();

  *(_QWORD *)(v7 + 40) = MEMORY[0x1E0DEE9E0];
  *(_OWORD *)(v7 + 48) = 0u;
  *(_OWORD *)(v7 + 64) = 0u;
  *(_QWORD *)(v7 + 16) = v6;
  *(_QWORD *)(v7 + 24) = a1;
  *(double *)(v7 + 32) = a2;
  return v7;
}

uint64_t MAGraph.slice(weight:)(double a1)
{
  void *v1;
  id v3;
  id v4;
  uint64_t v5;

  v3 = v1;
  v4 = objc_msgSend(v3, sel_graphReference);
  type metadata accessor for MASlice();
  v5 = swift_allocObject();

  *(_QWORD *)(v5 + 40) = MEMORY[0x1E0DEE9E0];
  *(_OWORD *)(v5 + 48) = 0u;
  *(_OWORD *)(v5 + 64) = 0u;
  *(_QWORD *)(v5 + 16) = v4;
  *(_QWORD *)(v5 + 24) = 0;
  *(double *)(v5 + 32) = a1;
  return v5;
}

uint64_t MAGraph.slice(edgeLabel:direction:weight:)(double a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  void *v4;
  void *v5;
  id v7;
  id v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  id v13;
  _QWORD v15[2];

  v5 = v4;
  if (a4 == 2)
  {
    v8 = v4;
    sub_1CA1F1054();
    swift_bridgeObjectRelease();
    strcpy((char *)v15, "(::)-[:");
    v15[1] = 0xE700000000000000;
  }
  else
  {
    v7 = v4;
    sub_1CA1F1054();
    swift_bridgeObjectRelease();
    strcpy((char *)v15, "(source::)-[:");
    HIWORD(v15[1]) = -4864;
  }
  sub_1CA1F0A3C();
  sub_1CA1F0A3C();
  v9 = v15[0];
  v10 = v15[1];
  v11 = sub_1CA0ABC14(MEMORY[0x1E0DEE9D8]);
  type metadata accessor for MAQuerySlice();
  v12 = swift_allocObject();
  *(_OWORD *)(v12 + 104) = xmmword_1CA1FC380;
  *(_QWORD *)(v12 + 80) = v9;
  *(_QWORD *)(v12 + 88) = v10;
  *(_QWORD *)(v12 + 96) = v11;
  v13 = objc_msgSend(v5, sel_graphReference);
  *(_QWORD *)(v12 + 40) = MEMORY[0x1E0DEE9E0];
  *(_OWORD *)(v12 + 48) = 0u;
  *(_OWORD *)(v12 + 64) = 0u;
  *(_QWORD *)(v12 + 16) = v13;
  *(_QWORD *)(v12 + 24) = 0;
  *(double *)(v12 + 32) = a1;

  return v12;
}

uint64_t MAGraph.slice(edgeDomain:direction:weight:)(double a1, uint64_t a2, uint64_t a3)
{
  void *v3;
  void *v4;
  id v6;
  id v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  id v12;
  _QWORD v14[2];

  v4 = v3;
  if (a3 == 2)
  {
    v7 = v3;
    sub_1CA1F1054();
    swift_bridgeObjectRelease();
    strcpy((char *)v14, "(::)-[::");
    BYTE1(v14[1]) = 0;
    WORD1(v14[1]) = 0;
    HIDWORD(v14[1]) = -402653184;
  }
  else
  {
    v6 = v3;
    sub_1CA1F1054();
    swift_bridgeObjectRelease();
    strcpy((char *)v14, "(source::)-[::");
    HIBYTE(v14[1]) = -18;
  }
  sub_1CA1F12AC();
  sub_1CA1F0A3C();
  swift_bridgeObjectRelease();
  sub_1CA1F0A3C();
  v8 = v14[0];
  v9 = v14[1];
  v10 = sub_1CA0ABC14(MEMORY[0x1E0DEE9D8]);
  type metadata accessor for MAQuerySlice();
  v11 = swift_allocObject();
  *(_OWORD *)(v11 + 104) = xmmword_1CA1FC380;
  *(_QWORD *)(v11 + 80) = v8;
  *(_QWORD *)(v11 + 88) = v9;
  *(_QWORD *)(v11 + 96) = v10;
  v12 = objc_msgSend(v4, sel_graphReference);
  *(_QWORD *)(v11 + 40) = MEMORY[0x1E0DEE9E0];
  *(_OWORD *)(v11 + 48) = 0u;
  *(_OWORD *)(v11 + 64) = 0u;
  *(_QWORD *)(v11 + 16) = v12;
  *(_QWORD *)(v11 + 24) = 0;
  *(double *)(v11 + 32) = a1;

  return v11;
}

uint64_t MANode.slice(weight:)(double a1)
{
  void *v1;
  id v3;
  void *v4;
  uint64_t v5;
  uint64_t inited;
  id v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v11;

  v3 = objc_msgSend(v1, sel_graph);
  if (!v3)
    return 0;
  v4 = v3;
  v5 = type metadata accessor for MASlice();
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_1ED852A58);
  inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_1CA1F9520;
  *(_QWORD *)(inited + 32) = v1;
  v11 = inited;
  sub_1CA1F0B14();
  v7 = v1;
  v8 = sub_1CA0C68DC(v11);
  swift_bridgeObjectRelease();
  v9 = (*(uint64_t (**)(id, uint64_t, double))(v5 + 208))(objc_msgSend(v4, sel_graphReference), v8, a1);
  swift_unknownObjectRelease();
  return v9;
}

uint64_t Array<A>.slice(weight:)(unint64_t a1, double a2)
{
  uint64_t v4;
  uint64_t result;
  id v6;
  void *v7;
  id v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;

  if (!(a1 >> 62))
  {
    v4 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
    result = swift_bridgeObjectRetain();
    if (v4)
      goto LABEL_3;
LABEL_9:
    swift_bridgeObjectRelease();
    return 0;
  }
  swift_bridgeObjectRetain();
  result = sub_1CA1F1234();
  if (!result)
    goto LABEL_9;
LABEL_3:
  if ((a1 & 0xC000000000000001) != 0)
  {
    v6 = (id)MEMORY[0x1CAA4A7A4](0, a1);
LABEL_6:
    v7 = v6;
    swift_bridgeObjectRelease();
    v8 = objc_msgSend(v7, sel_graph);

    if (v8)
    {
      v9 = type metadata accessor for MASlice();
      v10 = swift_bridgeObjectRetain();
      v11 = sub_1CA0C68DC(v10);
      swift_bridgeObjectRelease();
      v12 = (*(uint64_t (**)(id, uint64_t, double))(v9 + 208))(objc_msgSend(v8, sel_graphReference), v11, a2);
      swift_unknownObjectRelease();
      return v12;
    }
    return 0;
  }
  if (*(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10))
  {
    v6 = *(id *)(a1 + 32);
    goto LABEL_6;
  }
  __break(1u);
  return result;
}

uint64_t Set<>.slice(weight:)(uint64_t a1, double a2)
{
  uint64_t v4;
  void *v5;
  id v6;
  uint64_t v7;
  uint64_t v8;

  v4 = swift_bridgeObjectRetain();
  v5 = (void *)sub_1CA1406B8(v4);
  swift_bridgeObjectRelease();
  if (!v5)
    return 0;
  v6 = objc_msgSend(v5, sel_graph);

  if (!v6)
    return 0;
  v7 = type metadata accessor for MASlice();
  swift_bridgeObjectRetain();
  v8 = (*(uint64_t (**)(id, uint64_t, double))(v7 + 208))(objc_msgSend(v6, sel_graphReference), a1, a2);
  swift_unknownObjectRelease();
  return v8;
}

id sub_1CA1473AC(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  double v7;
  uint64_t v8;
  char *v9;
  id result;
  void *v11;
  id v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t i;
  uint64_t v16;
  uint64_t v17;

  v2 = v1;
  v4 = sub_1CA1F0844();
  v5 = *(_QWORD *)(v4 - 8);
  v7 = MEMORY[0x1E0C80A78](v4, v6);
  v9 = (char *)&v17 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  result = objc_msgSend(*(id *)(v2 + 16), sel_concreteGraph, v7);
  if (!result)
    goto LABEL_13;
  v11 = result;
  v12 = objc_msgSend(result, sel_identifier);

  sub_1CA1F0838();
  sub_1CA1500D4(&qword_1EF93A338, 255, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB0998], MEMORY[0x1E0CB09C8]);
  sub_1CA1F0964();
  (*(void (**)(char *, uint64_t))(v5 + 8))(v9, v4);
  v13 = *(_QWORD *)(v2 + 80);
  if (v13 >> 62)
  {
    swift_bridgeObjectRetain_n();
    sub_1CA1F1234();
    swift_bridgeObjectRelease();
    sub_1CA1F13FC();
    swift_bridgeObjectRetain();
    v14 = sub_1CA1F1234();
    result = (id)swift_bridgeObjectRelease();
    if (v14)
      goto LABEL_4;
    return (id)swift_bridgeObjectRelease();
  }
  swift_bridgeObjectRetain();
  result = (id)sub_1CA1F13FC();
  v14 = *(_QWORD *)((v13 & 0xFFFFFFFFFFFFFF8) + 0x10);
  if (!v14)
    return (id)swift_bridgeObjectRelease();
LABEL_4:
  if (v14 >= 1)
  {
    for (i = 0; i != v14; ++i)
    {
      if ((v13 & 0xC000000000000001) != 0)
      {
        v16 = MEMORY[0x1CAA4A7A4](i, v13);
      }
      else
      {
        v16 = *(_QWORD *)(v13 + 8 * i + 32);
        swift_retain();
      }
      (*(void (**)(uint64_t))(*(_QWORD *)v16 + 272))(a1);
      swift_release();
    }
    return (id)swift_bridgeObjectRelease();
  }
  __break(1u);
LABEL_13:
  __break(1u);
  return result;
}

uint64_t sub_1CA1475A4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  void *v4;
  uint64_t result;
  void *v6;
  void *v7;
  void *v8;
  char v9;
  unint64_t v10;
  unint64_t v11;

  v1 = v0;
  type metadata accessor for MASlices();
  v2 = swift_dynamicCastClass();
  if (!v2)
    return 0;
  v3 = v2;
  v4 = *(void **)(v0 + 16);
  swift_retain();
  result = (uint64_t)objc_msgSend(v4, sel_concreteGraph);
  if (result)
  {
    v6 = (void *)result;
    v7 = *(void **)(v3 + 16);
    swift_retain();
    result = (uint64_t)objc_msgSend(v7, sel_concreteGraph);
    if (result)
    {
      v8 = (void *)result;
      swift_release();
      sub_1CA0AB910(0, &qword_1EF9374E0);
      v9 = sub_1CA1F0E68();

      if ((v9 & 1) != 0)
      {
        v10 = *(_QWORD *)(v1 + 80);
        v11 = *(_QWORD *)(v3 + 80);
        swift_bridgeObjectRetain();
        LOBYTE(v10) = sub_1CA0B4F98(v10, v11);
        swift_bridgeObjectRelease();
        swift_release();
        if ((v10 & 1) != 0)
          return 1;
      }
      else
      {
        swift_release();
      }
      return 0;
    }
  }
  else
  {
    __break(1u);
  }
  __break(1u);
  return result;
}

id sub_1CA1476D0()
{
  unint64_t v0;
  id result;
  void *v2;
  unsigned int v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  BOOL v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  int64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  id v22;
  int64_t v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  unint64_t v29;
  unint64_t v30;
  id v31;
  _QWORD v32[6];

  result = objc_msgSend(*(id *)(v0 + 16), sel_concreteGraph);
  if (result)
  {
    v2 = result;
    v3 = objc_msgSend(result, sel_hasPendingRead);

    if (!v3)
      goto LABEL_48;
    v32[0] = MEMORY[0x1E0DEE9E8];
    v0 = *(_QWORD *)(v0 + 80);
    if (v0 >> 62)
      goto LABEL_49;
    v4 = *(_QWORD *)((v0 & 0xFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain();
    if (v4)
    {
LABEL_5:
      v5 = 0;
      v29 = v0 & 0xC000000000000001;
      v26 = v0 & 0xFFFFFFFFFFFFFF8;
      v27 = v4;
      v28 = v0;
LABEL_7:
      if (v29)
      {
        v6 = MEMORY[0x1CAA4A7A4](v5, v0);
        v7 = __OFADD__(v5, 1);
        v8 = v5 + 1;
        if (v7)
          goto LABEL_46;
      }
      else
      {
        if (v5 >= *(_QWORD *)(v26 + 16))
          goto LABEL_47;
        v6 = swift_retain();
        v7 = __OFADD__(v5, 1);
        v8 = v5 + 1;
        if (v7)
          goto LABEL_46;
      }
      v0 = v6;
      v9 = (*(uint64_t (**)(void))(*(_QWORD *)v6 + 216))();
      v10 = v9;
      v30 = v8;
      if ((v9 & 0xC000000000000001) != 0)
      {
        sub_1CA1F0F64();
        v0 = sub_1CA0AB910(0, (unint64_t *)&qword_1EF93A320);
        sub_1CA0C0614();
        sub_1CA1F0CC4();
        v10 = v32[1];
        v11 = v32[2];
        v12 = v32[3];
        v13 = v32[4];
        v14 = v32[5];
      }
      else
      {
        v13 = 0;
        v15 = -1 << *(_BYTE *)(v9 + 32);
        v11 = v9 + 56;
        v12 = ~v15;
        v16 = -v15;
        if (v16 < 64)
          v17 = ~(-1 << v16);
        else
          v17 = -1;
        v14 = v17 & *(_QWORD *)(v9 + 56);
      }
      v18 = (unint64_t)(v12 + 64) >> 6;
      if (v10 < 0)
        goto LABEL_22;
      while (1)
      {
        if (v14)
        {
          v19 = (v14 - 1) & v14;
          v20 = __clz(__rbit64(v14)) | (v13 << 6);
          v21 = v13;
        }
        else
        {
          v23 = v13 + 1;
          if (__OFADD__(v13, 1))
          {
            __break(1u);
LABEL_46:
            __break(1u);
LABEL_47:
            __break(1u);
LABEL_48:
            __break(1u);
LABEL_49:
            swift_bridgeObjectRetain();
            v4 = sub_1CA1F1234();
            if (!v4)
              break;
            goto LABEL_5;
          }
          if (v23 >= v18)
            goto LABEL_6;
          v24 = *(_QWORD *)(v11 + 8 * v23);
          v21 = v13 + 1;
          if (!v24)
          {
            v21 = v13 + 2;
            if (v13 + 2 >= v18)
              goto LABEL_6;
            v24 = *(_QWORD *)(v11 + 8 * v21);
            if (!v24)
            {
              v21 = v13 + 3;
              if (v13 + 3 >= v18)
                goto LABEL_6;
              v24 = *(_QWORD *)(v11 + 8 * v21);
              if (!v24)
              {
                v21 = v13 + 4;
                if (v13 + 4 >= v18)
                  goto LABEL_6;
                v24 = *(_QWORD *)(v11 + 8 * v21);
                if (!v24)
                {
                  v21 = v13 + 5;
                  if (v13 + 5 >= v18)
                    goto LABEL_6;
                  v24 = *(_QWORD *)(v11 + 8 * v21);
                  if (!v24)
                  {
                    v25 = v13 + 6;
                    do
                    {
                      if (v18 == v25)
                        goto LABEL_6;
                      v24 = *(_QWORD *)(v11 + 8 * v25++);
                    }
                    while (!v24);
                    v21 = v25 - 1;
                  }
                }
              }
            }
          }
          v19 = (v24 - 1) & v24;
          v20 = __clz(__rbit64(v24)) + (v21 << 6);
        }
        v22 = *(id *)(*(_QWORD *)(v10 + 48) + 8 * v20);
        if (!v22)
        {
LABEL_6:
          sub_1CA0B6A14();
          swift_release();
          v0 = v28;
          v5 = v30;
          if (v30 == v27)
          {
            swift_bridgeObjectRelease();
            return (id)v32[0];
          }
          goto LABEL_7;
        }
        while (1)
        {
          v0 = (unint64_t)v32;
          sub_1CA0BDD74(&v31, v22);

          v13 = v21;
          v14 = v19;
          if ((v10 & 0x8000000000000000) == 0)
            break;
LABEL_22:
          if (sub_1CA1F0FD0())
          {
            sub_1CA0AB910(0, (unint64_t *)&qword_1EF93A320);
            swift_unknownObjectRetain();
            swift_dynamicCast();
            v22 = v31;
            swift_unknownObjectRelease();
            v21 = v13;
            v19 = v14;
            if (v22)
              continue;
          }
          goto LABEL_6;
        }
      }
    }
    swift_bridgeObjectRelease();
    return (id)MEMORY[0x1E0DEE9E8];
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t sub_1CA147A98()
{
  uint64_t v0;
  id v1;
  void *v2;
  unsigned int v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  BOOL v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  int64_t v20;
  int64_t v21;
  double v22;
  double v23;
  unint64_t v24;
  unint64_t v25;
  int64_t v26;
  unint64_t v27;
  int64_t v28;
  uint64_t v29;
  double v30;
  id v31;
  char v32;
  unint64_t v33;
  uint64_t v34;
  _BOOL8 v35;
  uint64_t v36;
  char v37;
  unint64_t v38;
  char v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t result;
  unint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  _QWORD *v47;
  uint64_t v48;
  unint64_t v49;

  v1 = objc_msgSend(*(id *)(v0 + 16), sel_concreteGraph);
  if (v1)
  {
    v2 = v1;
    v3 = objc_msgSend(v1, sel_hasPendingRead);

    if (!v3)
      goto LABEL_54;
    v48 = MEMORY[0x1E0DEE9E8];
    v49 = MEMORY[0x1E0DEE9E0];
    v4 = *(_QWORD *)(v0 + 80);
    v43 = v4;
    if (v4 >> 62)
      goto LABEL_55;
    v5 = *(_QWORD *)((v4 & 0xFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain();
    while (v5)
    {
      v6 = 0;
      v7 = 0;
      v44 = v5;
      while (1)
      {
        if ((v43 & 0xC000000000000001) != 0)
        {
          v8 = MEMORY[0x1CAA4A7A4](v6, v43);
          v9 = __OFADD__(v6, 1);
          v10 = v6 + 1;
          if (v9)
            goto LABEL_53;
        }
        else
        {
          v8 = swift_retain();
          v9 = __OFADD__(v6, 1);
          v10 = v6 + 1;
          if (v9)
            goto LABEL_53;
        }
        v46 = v10;
        v11 = (*(uint64_t (**)(void))(*(_QWORD *)v8 + 224))();
        v13 = v12;
        sub_1CA14093C(v11);
        v45 = v7;
        swift_bridgeObjectRelease();
        v14 = (_QWORD *)v49;
        isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
        v47 = (_QWORD *)v49;
        v49 = 0x8000000000000000;
        v16 = v13 + 64;
        v17 = 1 << *(_BYTE *)(v13 + 32);
        if (v17 < 64)
          v18 = ~(-1 << v17);
        else
          v18 = -1;
        v19 = v18 & *(_QWORD *)(v13 + 64);
        v20 = (unint64_t)(v17 + 63) >> 6;
        swift_bridgeObjectRetain();
        v21 = 0;
        if (v19)
        {
          while (1)
          {
            v24 = __clz(__rbit64(v19));
            v19 &= v19 - 1;
            v25 = v24 | (v21 << 6);
LABEL_38:
            v29 = 8 * v25;
            v30 = *(double *)(*(_QWORD *)(v13 + 56) + v29);
            v31 = *(id *)(*(_QWORD *)(v13 + 48) + v29);
            v33 = sub_1CA0AA594((uint64_t)v31);
            v34 = v14[2];
            v35 = (v32 & 1) == 0;
            v36 = v34 + v35;
            if (__OFADD__(v34, v35))
              break;
            v37 = v32;
            if (v14[3] >= v36)
            {
              if ((isUniquelyReferenced_nonNull_native & 1) == 0)
                sub_1CA0EF5C0();
            }
            else
            {
              sub_1CA0EB588(v36, isUniquelyReferenced_nonNull_native & 1);
              v38 = sub_1CA0AA594((uint64_t)v31);
              if ((v37 & 1) != (v39 & 1))
                goto LABEL_58;
              v33 = v38;
            }
            v14 = v47;
            if ((v37 & 1) != 0)
            {
              v22 = *(double *)(v47[7] + 8 * v33);

              if (v22 > v30)
                v23 = v22;
              else
                v23 = v30;
              *(double *)(v47[7] + 8 * v33) = v23;
              isUniquelyReferenced_nonNull_native = 1;
              if (!v19)
                goto LABEL_22;
            }
            else
            {
              v47[(v33 >> 6) + 8] |= 1 << v33;
              *(_QWORD *)(v47[6] + 8 * v33) = v31;
              *(double *)(v47[7] + 8 * v33) = v30;
              v40 = v47[2];
              v9 = __OFADD__(v40, 1);
              v41 = v40 + 1;
              if (v9)
                goto LABEL_50;
              v47[2] = v41;
              isUniquelyReferenced_nonNull_native = 1;
              if (!v19)
                goto LABEL_22;
            }
          }
          __break(1u);
LABEL_50:
          __break(1u);
LABEL_51:
          __break(1u);
          goto LABEL_52;
        }
LABEL_22:
        v26 = v21 + 1;
        if (__OFADD__(v21, 1))
          goto LABEL_51;
        if (v26 < v20)
        {
          v27 = *(_QWORD *)(v16 + 8 * v26);
          ++v21;
          if (v27)
            goto LABEL_37;
          v21 = v26 + 1;
          if (v26 + 1 < v20)
          {
            v27 = *(_QWORD *)(v16 + 8 * v21);
            if (v27)
              goto LABEL_37;
            v21 = v26 + 2;
            if (v26 + 2 < v20)
            {
              v27 = *(_QWORD *)(v16 + 8 * v21);
              if (v27)
                goto LABEL_37;
              v21 = v26 + 3;
              if (v26 + 3 < v20)
              {
                v27 = *(_QWORD *)(v16 + 8 * v21);
                if (v27)
                  goto LABEL_37;
                v28 = v26 + 4;
                if (v28 < v20)
                  break;
              }
            }
          }
        }
LABEL_6:
        swift_bridgeObjectRelease();
        swift_release();
        v49 = (unint64_t)v14;
        swift_release();
        swift_bridgeObjectRelease();
        v7 = v45;
        v6 = v46;
        if (v46 == v44)
        {
          swift_bridgeObjectRelease();
          return v48;
        }
      }
      v27 = *(_QWORD *)(v16 + 8 * v28);
      if (v27)
      {
        v21 = v28;
LABEL_37:
        v19 = (v27 - 1) & v27;
        v25 = __clz(__rbit64(v27)) + (v21 << 6);
        goto LABEL_38;
      }
      while (1)
      {
        v21 = v28 + 1;
        if (__OFADD__(v28, 1))
          break;
        if (v21 >= v20)
          goto LABEL_6;
        v27 = *(_QWORD *)(v16 + 8 * v21);
        ++v28;
        if (v27)
          goto LABEL_37;
      }
LABEL_52:
      __break(1u);
LABEL_53:
      __break(1u);
LABEL_54:
      __break(1u);
LABEL_55:
      swift_bridgeObjectRetain_n();
      v5 = sub_1CA1F1234();
      swift_bridgeObjectRelease();
    }
    swift_bridgeObjectRelease();
    return MEMORY[0x1E0DEE9E8];
  }
  else
  {
    __break(1u);
LABEL_58:
    sub_1CA0AB910(0, (unint64_t *)&qword_1EF93A320);
    result = sub_1CA1F1360();
    __break(1u);
  }
  return result;
}

uint64_t sub_1CA147EB8()
{
  uint64_t v0;
  unint64_t v1;
  uint64_t v2;
  uint64_t result;
  uint64_t v4;
  uint64_t v5;
  char v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  char v11;

  v1 = *(_QWORD *)(v0 + 80);
  if (!(v1 >> 62))
  {
    v2 = *(_QWORD *)((v1 & 0xFFFFFFFFFFFFF8) + 0x10);
    result = swift_bridgeObjectRetain();
    if (v2)
      goto LABEL_3;
LABEL_17:
    swift_bridgeObjectRelease();
    return v2;
  }
LABEL_20:
  swift_bridgeObjectRetain();
  result = sub_1CA1F1234();
  v2 = result;
  if (!result)
    goto LABEL_17;
LABEL_3:
  if ((v1 & 0xC000000000000001) != 0)
  {
    v5 = MEMORY[0x1CAA4A7A4](0, v1);
    v4 = v5;
LABEL_6:
    v6 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 232))(v5);
    swift_release();
    if ((v6 & 1) != 0)
    {
      v2 = 1;
    }
    else
    {
      v7 = 0;
      v8 = v2 - 1;
      while (1)
      {
        v2 = v8 != v7;
        if (v8 == v7)
          break;
        v9 = v7 + 1;
        if ((v1 & 0xC000000000000001) != 0)
        {
          v10 = MEMORY[0x1CAA4A7A4](v7 + 1, v1);
          if (__OFADD__(v9, 1))
            goto LABEL_18;
        }
        else
        {
          if (v9 >= *(_QWORD *)((v1 & 0xFFFFFFFFFFFFFF8) + 0x10))
            goto LABEL_19;
          v10 = *(_QWORD *)(v1 + 8 * v7 + 40);
          swift_retain();
          if (__OFADD__(v9, 1))
          {
LABEL_18:
            __break(1u);
LABEL_19:
            __break(1u);
            goto LABEL_20;
          }
        }
        v11 = (*(uint64_t (**)(void))(*(_QWORD *)v10 + 232))();
        swift_release();
        ++v7;
        if ((v11 & 1) != 0)
          goto LABEL_17;
      }
    }
    goto LABEL_17;
  }
  if (*(_QWORD *)((v1 & 0xFFFFFFFFFFFFF8) + 0x10))
  {
    v4 = *(_QWORD *)(v1 + 32);
    v5 = swift_retain();
    goto LABEL_6;
  }
  __break(1u);
  return result;
}

id sub_1CA148024(uint64_t a1, uint64_t a2, double a3)
{
  uint64_t v3;
  uint64_t v4;
  id result;
  unint64_t v8;
  unsigned int v9;
  uint64_t v10;
  uint64_t i;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v17;

  result = objc_msgSend(*(id *)(v3 + 16), sel_concreteGraph);
  if (result)
  {
    v8 = (unint64_t)result;
    v9 = objc_msgSend(result, sel_hasPendingRead);

    if (!v9)
      goto LABEL_18;
    v17 = MEMORY[0x1E0DEE9D8];
    v8 = *(_QWORD *)(v3 + 80);
    if (v8 >> 62)
    {
LABEL_19:
      swift_bridgeObjectRetain();
      v10 = sub_1CA1F1234();
      if (v10)
        goto LABEL_5;
    }
    else
    {
      v10 = *(_QWORD *)((v8 & 0xFFFFFFFFFFFFF8) + 0x10);
      swift_bridgeObjectRetain();
      if (v10)
      {
LABEL_5:
        for (i = 4; ; ++i)
        {
          v12 = i - 4;
          if ((v8 & 0xC000000000000001) != 0)
          {
            v13 = MEMORY[0x1CAA4A7A4](i - 4, v8);
            v14 = i - 3;
            if (__OFADD__(v12, 1))
              goto LABEL_17;
          }
          else
          {
            v13 = *(_QWORD *)(v8 + 8 * i);
            swift_retain();
            v14 = i - 3;
            if (__OFADD__(v12, 1))
            {
LABEL_17:
              __break(1u);
LABEL_18:
              __break(1u);
              goto LABEL_19;
            }
          }
          v15 = (*(uint64_t (**)(uint64_t, uint64_t, double))(*(_QWORD *)v13 + 240))(a1, a2, a3);
          if (v4)
          {
            swift_bridgeObjectRelease();
            swift_release();
            return (id)swift_bridgeObjectRelease();
          }
          if (v15)
            sub_1CA0B295C(v15);
          swift_release();
          if (v14 == v10)
          {
            swift_bridgeObjectRelease();
            return (id)v17;
          }
        }
      }
    }
    swift_bridgeObjectRelease();
    return (id)MEMORY[0x1E0DEE9D8];
  }
  else
  {
    __break(1u);
  }
  return result;
}

_QWORD *sub_1CA1481E0(uint64_t a1)
{
  uint64_t v1;
  _QWORD *result;
  unint64_t v4;
  unsigned int v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  char v9;
  uint64_t v10;
  char v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char v15;
  unint64_t v16;

  result = objc_msgSend(*(id *)(v1 + 16), sel_concreteGraph);
  if (!result)
    goto LABEL_34;
  v4 = (unint64_t)result;
  v5 = objc_msgSend(result, sel_hasPendingRead);

  if (!v5)
  {
LABEL_27:
    __break(1u);
LABEL_28:
    swift_bridgeObjectRetain();
    result = (_QWORD *)sub_1CA1F1234();
    v6 = (uint64_t)result;
    if (!result)
      goto LABEL_12;
    goto LABEL_5;
  }
  v4 = *(_QWORD *)(v1 + 80);
  if (v4 >> 62)
    goto LABEL_28;
  v6 = *(_QWORD *)((v4 & 0xFFFFFFFFFFFFF8) + 0x10);
  result = (_QWORD *)swift_bridgeObjectRetain();
  if (!v6)
  {
LABEL_12:
    swift_bridgeObjectRelease();
    return (_QWORD *)v6;
  }
LABEL_5:
  v7 = v4 & 0xC000000000000001;
  if ((v4 & 0xC000000000000001) != 0)
  {
    v8 = MEMORY[0x1CAA4A7A4](0, v4);
    goto LABEL_8;
  }
  if (*(_QWORD *)((v4 & 0xFFFFFFFFFFFFF8) + 0x10))
  {
    v8 = *(_QWORD *)(v4 + 32);
    swift_retain();
LABEL_8:
    v9 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v8 + 248))(a1);
    result = (_QWORD *)swift_release();
    if ((v9 & 1) != 0)
    {
LABEL_9:
      v6 = 1;
      goto LABEL_12;
    }
    if (v6 == 1)
    {
      v6 = 0;
      goto LABEL_12;
    }
    if (v7)
    {
      v10 = MEMORY[0x1CAA4A7A4](1, v4);
      goto LABEL_17;
    }
    if (*(_QWORD *)((v4 & 0xFFFFFFFFFFFFF8) + 0x10) >= 2uLL)
    {
      v10 = *(_QWORD *)(v4 + 40);
      swift_retain();
LABEL_17:
      v11 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v10 + 248))(a1);
      result = (_QWORD *)swift_release();
      if ((v11 & 1) == 0)
      {
        v12 = 0;
        v13 = v6 - 2;
        while (1)
        {
          v6 = v13 != v12;
          if (v13 == v12)
            goto LABEL_12;
          v16 = v12 + 2;
          if (v7)
          {
            v14 = MEMORY[0x1CAA4A7A4](v12 + 2, v4);
            if (__OFADD__(v16, 1))
              goto LABEL_26;
          }
          else
          {
            if (v16 >= *(_QWORD *)((v4 & 0xFFFFFFFFFFFFFF8) + 0x10))
              goto LABEL_32;
            v14 = *(_QWORD *)(v4 + 8 * v12 + 48);
            swift_retain();
            if (__OFADD__(v16, 1))
            {
LABEL_26:
              __break(1u);
              goto LABEL_27;
            }
          }
          v15 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v14 + 248))(a1);
          result = (_QWORD *)swift_release();
          ++v12;
          if ((v15 & 1) != 0)
            goto LABEL_12;
        }
      }
      goto LABEL_9;
    }
    goto LABEL_33;
  }
  __break(1u);
LABEL_32:
  __break(1u);
LABEL_33:
  __break(1u);
LABEL_34:
  __break(1u);
  return result;
}

uint64_t sub_1CA148404()
{
  uint64_t v0;
  unint64_t v1;
  uint64_t v2;
  uint64_t result;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v1 = *(_QWORD *)(v0 + 80);
  v7 = MEMORY[0x1E0DEE9D8];
  if (!(v1 >> 62))
  {
    v2 = *(_QWORD *)((v1 & 0xFFFFFFFFFFFFF8) + 0x10);
    result = swift_bridgeObjectRetain_n();
    if (v2)
      goto LABEL_3;
LABEL_11:
    swift_bridgeObjectRelease_n();
    return MEMORY[0x1E0DEE9D8];
  }
  swift_bridgeObjectRetain_n();
  result = sub_1CA1F1234();
  v2 = result;
  if (!result)
    goto LABEL_11;
LABEL_3:
  if (v2 < 1)
  {
    __break(1u);
  }
  else
  {
    v4 = 0;
    do
    {
      if ((v1 & 0xC000000000000001) != 0)
      {
        v5 = MEMORY[0x1CAA4A7A4](v4, v1);
      }
      else
      {
        v5 = *(_QWORD *)(v1 + 8 * v4 + 32);
        swift_retain();
      }
      ++v4;
      v6 = (*(uint64_t (**)(void))(*(_QWORD *)v5 + 256))();
      swift_release();
      sub_1CA0B2D80(v6);
    }
    while (v2 != v4);
    swift_bridgeObjectRelease_n();
    return v7;
  }
  return result;
}

uint64_t sub_1CA148524()
{
  uint64_t v0;
  unint64_t v1;
  uint64_t v2;
  uint64_t result;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v1 = *(_QWORD *)(v0 + 80);
  v7 = MEMORY[0x1E0DEE9D8];
  if (!(v1 >> 62))
  {
    v2 = *(_QWORD *)((v1 & 0xFFFFFFFFFFFFF8) + 0x10);
    result = swift_bridgeObjectRetain_n();
    if (v2)
      goto LABEL_3;
LABEL_11:
    swift_bridgeObjectRelease_n();
    return MEMORY[0x1E0DEE9D8];
  }
  swift_bridgeObjectRetain_n();
  result = sub_1CA1F1234();
  v2 = result;
  if (!result)
    goto LABEL_11;
LABEL_3:
  if (v2 < 1)
  {
    __break(1u);
  }
  else
  {
    v4 = 0;
    do
    {
      if ((v1 & 0xC000000000000001) != 0)
      {
        v5 = MEMORY[0x1CAA4A7A4](v4, v1);
      }
      else
      {
        v5 = *(_QWORD *)(v1 + 8 * v4 + 32);
        swift_retain();
      }
      ++v4;
      v6 = (*(uint64_t (**)(void))(*(_QWORD *)v5 + 264))();
      swift_release();
      sub_1CA0B2AC4(v6);
    }
    while (v2 != v4);
    swift_bridgeObjectRelease_n();
    return v7;
  }
  return result;
}

uint64_t sub_1CA148644(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4, uint64_t a5, uint64_t a6, char a7)
{
  uint64_t v7;
  unint64_t v12;
  uint64_t v13;
  uint64_t result;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  char v19;
  void (*v20)(uint64_t *__return_ptr, _QWORD *, _QWORD *);
  uint64_t v24;
  _QWORD v25[2];
  _QWORD v26[2];
  uint64_t v27;

  v27 = MEMORY[0x1E0DEE9D8];
  v12 = *(_QWORD *)(v7 + 80);
  if (v12 >> 62)
  {
    swift_bridgeObjectRetain();
    result = sub_1CA1F1234();
    v13 = result;
    if (result)
      goto LABEL_3;
  }
  else
  {
    v13 = *(_QWORD *)((v12 & 0xFFFFFFFFFFFFF8) + 0x10);
    result = swift_bridgeObjectRetain();
    if (v13)
    {
LABEL_3:
      if (v13 < 1)
      {
        __break(1u);
        return result;
      }
      v15 = 0;
      while (1)
      {
        if ((v12 & 0xC000000000000001) != 0)
        {
          v16 = MEMORY[0x1CAA4A7A4](v15, v12);
        }
        else
        {
          v16 = *(_QWORD *)(v12 + 8 * v15 + 32);
          swift_retain();
        }
        v17 = *(_QWORD *)(v16 + 40);
        if (*(_QWORD *)(v17 + 16))
        {
          swift_retain();
          swift_bridgeObjectRetain();
          v18 = sub_1CA0AA5E0(a2);
          if ((v19 & 1) == 0)
          {
            swift_release();
            swift_release();
            swift_bridgeObjectRelease();
            goto LABEL_6;
          }
          v20 = *(void (**)(uint64_t *__return_ptr, _QWORD *, _QWORD *))(*(_QWORD *)(v17 + 56) + 16 * v18);
          swift_retain();
          swift_release();
          swift_bridgeObjectRelease();
          v26[0] = a3;
          v26[1] = a4;
          v25[0] = a5;
          v25[1] = a6;
          v20(&v24, v26, v25);
          swift_release();
          if (v24)
            sub_1CA0B2C2C(v24);
        }
        swift_release();
LABEL_6:
        if (v13 == ++v15)
        {
          swift_bridgeObjectRelease();
          result = v27;
          if (*(_QWORD *)(v27 + 16))
            return result;
LABEL_19:
          swift_bridgeObjectRelease();
          return sub_1CA141DCC(a1, a2, a3, a4, a5, a6, a7 & 1);
        }
      }
    }
  }
  swift_bridgeObjectRelease();
  result = MEMORY[0x1E0DEE9D8];
  if (!*(_QWORD *)(MEMORY[0x1E0DEE9D8] + 16))
    goto LABEL_19;
  return result;
}

void sub_1CA14886C()
{
  sub_1CA14D388();
}

id Array<A>.contentNodes()(unint64_t a1)
{
  uint64_t v2;
  id result;
  uint64_t v4;
  void *v5;
  uint64_t inited;
  id v7;
  uint64_t v8;
  id v9;

  if (!(a1 >> 62))
  {
    v2 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
    result = (id)swift_bridgeObjectRetain();
    if (v2)
      goto LABEL_3;
LABEL_9:
    swift_bridgeObjectRelease();
    __break(1u);
    goto LABEL_10;
  }
  swift_bridgeObjectRetain();
  result = (id)sub_1CA1F1234();
  if (!result)
    goto LABEL_9;
LABEL_3:
  if ((a1 & 0xC000000000000001) != 0)
  {
LABEL_10:
    v4 = MEMORY[0x1CAA4A7A4](0, a1);
    goto LABEL_6;
  }
  if (!*(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10))
  {
    __break(1u);
    goto LABEL_12;
  }
  v4 = *(_QWORD *)(a1 + 32);
  swift_retain();
LABEL_6:
  swift_bridgeObjectRelease();
  result = objc_msgSend(*(id *)(v4 + 16), sel_concreteGraph);
  if (result)
  {
    v5 = result;
    swift_release();
    type metadata accessor for MASlices();
    inited = swift_initStackObject();
    *(_QWORD *)(inited + 80) = a1;
    swift_bridgeObjectRetain();
    v7 = objc_msgSend(v5, sel_graphReference);

    v8 = MEMORY[0x1E0DEE9E0];
    *(_OWORD *)(inited + 48) = 0u;
    *(_OWORD *)(inited + 64) = 0u;
    *(_QWORD *)(inited + 16) = v7;
    *(_QWORD *)(inited + 24) = 0;
    *(_QWORD *)(inited + 32) = 0x3FF0000000000000;
    *(_QWORD *)(inited + 40) = v8;
    v9 = sub_1CA1476D0();
    swift_bridgeObjectRelease();

    return v9;
  }
LABEL_12:
  __break(1u);
  return result;
}

id Array<A>.weightedContentNodes()(unint64_t a1)
{
  uint64_t v2;
  id result;
  uint64_t v4;
  void *v5;
  uint64_t inited;
  id v7;
  uint64_t v8;
  uint64_t v9;

  if (!(a1 >> 62))
  {
    v2 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
    result = (id)swift_bridgeObjectRetain();
    if (v2)
      goto LABEL_3;
LABEL_9:
    swift_bridgeObjectRelease();
    __break(1u);
    goto LABEL_10;
  }
  swift_bridgeObjectRetain();
  result = (id)sub_1CA1F1234();
  if (!result)
    goto LABEL_9;
LABEL_3:
  if ((a1 & 0xC000000000000001) != 0)
  {
LABEL_10:
    v4 = MEMORY[0x1CAA4A7A4](0, a1);
    goto LABEL_6;
  }
  if (!*(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10))
  {
    __break(1u);
    goto LABEL_12;
  }
  v4 = *(_QWORD *)(a1 + 32);
  swift_retain();
LABEL_6:
  swift_bridgeObjectRelease();
  result = objc_msgSend(*(id *)(v4 + 16), sel_concreteGraph);
  if (result)
  {
    v5 = result;
    swift_release();
    type metadata accessor for MASlices();
    inited = swift_initStackObject();
    *(_QWORD *)(inited + 80) = a1;
    swift_bridgeObjectRetain();
    v7 = objc_msgSend(v5, sel_graphReference);

    v8 = MEMORY[0x1E0DEE9E0];
    *(_OWORD *)(inited + 48) = 0u;
    *(_OWORD *)(inited + 64) = 0u;
    *(_QWORD *)(inited + 16) = v7;
    *(_QWORD *)(inited + 24) = 0;
    *(_QWORD *)(inited + 32) = 0x3FF0000000000000;
    *(_QWORD *)(inited + 40) = v8;
    v9 = sub_1CA147A98();
    swift_bridgeObjectRelease();

    return (id)v9;
  }
LABEL_12:
  __break(1u);
  return result;
}

id Array<A>.fuzzyContentNodes(precision:progress:)(uint64_t a1, uint64_t a2, unint64_t a3, double a4)
{
  uint64_t v8;
  id result;
  uint64_t v10;
  void *v11;
  uint64_t inited;
  id v13;
  uint64_t v14;
  id v15;

  if (!(a3 >> 62))
  {
    v8 = *(_QWORD *)((a3 & 0xFFFFFFFFFFFFF8) + 0x10);
    result = (id)swift_bridgeObjectRetain();
    if (v8)
      goto LABEL_3;
LABEL_9:
    swift_bridgeObjectRelease();
    __break(1u);
    goto LABEL_10;
  }
  swift_bridgeObjectRetain();
  result = (id)sub_1CA1F1234();
  if (!result)
    goto LABEL_9;
LABEL_3:
  if ((a3 & 0xC000000000000001) != 0)
  {
LABEL_10:
    v10 = MEMORY[0x1CAA4A7A4](0, a3);
    goto LABEL_6;
  }
  if (!*(_QWORD *)((a3 & 0xFFFFFFFFFFFFF8) + 0x10))
  {
    __break(1u);
    goto LABEL_12;
  }
  v10 = *(_QWORD *)(a3 + 32);
  swift_retain();
LABEL_6:
  swift_bridgeObjectRelease();
  result = objc_msgSend(*(id *)(v10 + 16), sel_concreteGraph);
  if (result)
  {
    v11 = result;
    swift_release();
    type metadata accessor for MASlices();
    inited = swift_initStackObject();
    *(_QWORD *)(inited + 80) = a3;
    swift_bridgeObjectRetain();
    v13 = objc_msgSend(v11, sel_graphReference);

    v14 = MEMORY[0x1E0DEE9E0];
    *(_OWORD *)(inited + 48) = 0u;
    *(_OWORD *)(inited + 64) = 0u;
    *(_QWORD *)(inited + 16) = v13;
    *(_QWORD *)(inited + 24) = 0;
    *(_QWORD *)(inited + 32) = 0x3FF0000000000000;
    *(_QWORD *)(inited + 40) = v14;
    v15 = sub_1CA148024(a1, a2, a4);
    swift_bridgeObjectRelease();

    return v15;
  }
LABEL_12:
  __break(1u);
  return result;
}

id Array<A>.contains(node:)(uint64_t a1, unint64_t a2)
{
  uint64_t v4;
  id result;
  uint64_t v6;
  void *v7;
  uint64_t inited;
  id v9;
  uint64_t v10;
  unsigned __int8 v11;

  if (!(a2 >> 62))
  {
    v4 = *(_QWORD *)((a2 & 0xFFFFFFFFFFFFF8) + 0x10);
    result = (id)swift_bridgeObjectRetain();
    if (v4)
      goto LABEL_3;
LABEL_9:
    swift_bridgeObjectRelease();
    __break(1u);
    goto LABEL_10;
  }
  swift_bridgeObjectRetain();
  result = (id)sub_1CA1F1234();
  if (!result)
    goto LABEL_9;
LABEL_3:
  if ((a2 & 0xC000000000000001) != 0)
  {
LABEL_10:
    v6 = MEMORY[0x1CAA4A7A4](0, a2);
    goto LABEL_6;
  }
  if (!*(_QWORD *)((a2 & 0xFFFFFFFFFFFFF8) + 0x10))
  {
    __break(1u);
    goto LABEL_12;
  }
  v6 = *(_QWORD *)(a2 + 32);
  swift_retain();
LABEL_6:
  swift_bridgeObjectRelease();
  result = objc_msgSend(*(id *)(v6 + 16), sel_concreteGraph);
  if (result)
  {
    v7 = result;
    swift_release();
    type metadata accessor for MASlices();
    inited = swift_initStackObject();
    *(_QWORD *)(inited + 80) = a2;
    swift_bridgeObjectRetain();
    v9 = objc_msgSend(v7, sel_graphReference);

    v10 = MEMORY[0x1E0DEE9E0];
    *(_OWORD *)(inited + 48) = 0u;
    *(_OWORD *)(inited + 64) = 0u;
    *(_QWORD *)(inited + 16) = v9;
    *(_QWORD *)(inited + 24) = 0;
    *(_QWORD *)(inited + 32) = 0x3FF0000000000000;
    *(_QWORD *)(inited + 40) = v10;
    v11 = sub_1CA1481E0(a1);
    swift_bridgeObjectRelease();

    return (id)(v11 & 1);
  }
LABEL_12:
  __break(1u);
  return result;
}

id Array<A>.projectTo(slice:paths:precision:progress:)(uint64_t a1, uint64_t a2, void (*a3)(char *, double), uint64_t a4, unint64_t a5, double a6)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v14;
  id result;
  uint64_t v16;
  void *v17;
  uint64_t inited;
  id v19;
  id v20;
  uint64_t v21;
  uint64_t v22;
  _BYTE *v23;

  v7 = v6;
  if (!(a5 >> 62))
  {
    v14 = *(_QWORD *)((a5 & 0xFFFFFFFFFFFFF8) + 0x10);
    result = (id)swift_bridgeObjectRetain();
    if (v14)
      goto LABEL_3;
LABEL_9:
    swift_bridgeObjectRelease();
    sub_1CA0BE35C();
    swift_allocError();
    *v23 = 5;
    swift_willThrow();
    return (id)v7;
  }
  swift_bridgeObjectRetain();
  result = (id)sub_1CA1F1234();
  if (!result)
    goto LABEL_9;
LABEL_3:
  if ((a5 & 0xC000000000000001) != 0)
  {
    v16 = MEMORY[0x1CAA4A7A4](0, a5);
  }
  else
  {
    if (!*(_QWORD *)((a5 & 0xFFFFFFFFFFFFF8) + 0x10))
    {
      __break(1u);
      goto LABEL_13;
    }
    v16 = *(_QWORD *)(a5 + 32);
    swift_retain();
  }
  swift_bridgeObjectRelease();
  result = objc_msgSend(*(id *)(v16 + 16), sel_concreteGraph);
  if (result)
  {
    v17 = result;
    swift_release();
    type metadata accessor for MASlices();
    inited = swift_initStackObject();
    *(_QWORD *)(inited + 80) = a5;
    swift_bridgeObjectRetain();
    v19 = v17;
    v20 = objc_msgSend(v19, sel_graphReference);

    v21 = MEMORY[0x1E0DEE9E0];
    *(_OWORD *)(inited + 48) = 0u;
    *(_OWORD *)(inited + 64) = 0u;
    *(_QWORD *)(inited + 16) = v20;
    *(_QWORD *)(inited + 24) = 0;
    *(_QWORD *)(inited + 32) = 0x3FF0000000000000;
    *(_QWORD *)(inited + 40) = v21;
    sub_1CA142D34(a1, a2, a3, a4, a6);
    v7 = v22;

    swift_setDeallocating();
    swift_bridgeObjectRelease();
    sub_1CA0AAE34(*(_QWORD *)(inited + 48));
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();

    return (id)v7;
  }
LABEL_13:
  __break(1u);
  return result;
}

id Array<A>.slice(weight:)(unint64_t a1)
{
  uint64_t v2;
  id result;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  id v7;
  uint64_t v8;

  if (!(a1 >> 62))
  {
    v2 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
    result = (id)swift_bridgeObjectRetain();
    if (v2)
      goto LABEL_3;
LABEL_9:
    swift_bridgeObjectRelease();
    __break(1u);
    goto LABEL_10;
  }
  swift_bridgeObjectRetain();
  result = (id)sub_1CA1F1234();
  if (!result)
    goto LABEL_9;
LABEL_3:
  if ((a1 & 0xC000000000000001) != 0)
  {
LABEL_10:
    v4 = MEMORY[0x1CAA4A7A4](0, a1);
    goto LABEL_6;
  }
  if (!*(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10))
  {
    __break(1u);
    goto LABEL_12;
  }
  v4 = *(_QWORD *)(a1 + 32);
  swift_retain();
LABEL_6:
  swift_bridgeObjectRelease();
  result = objc_msgSend(*(id *)(v4 + 16), sel_concreteGraph);
  if (result)
  {
    v5 = result;
    swift_release();
    type metadata accessor for MASlices();
    v6 = swift_allocObject();
    *(_QWORD *)(v6 + 80) = a1;
    swift_bridgeObjectRetain();
    v7 = objc_msgSend(v5, sel_graphReference);

    v8 = MEMORY[0x1E0DEE9E0];
    *(_OWORD *)(v6 + 48) = 0u;
    *(_OWORD *)(v6 + 64) = 0u;
    *(_QWORD *)(v6 + 16) = v7;
    *(_QWORD *)(v6 + 24) = 0;
    *(_QWORD *)(v6 + 32) = 0x3FF0000000000000;
    *(_QWORD *)(v6 + 40) = v8;
    return (id)v6;
  }
LABEL_12:
  __break(1u);
  return result;
}

id sub_1CA149190()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  double v5;
  uint64_t v6;
  char *v7;
  id result;
  void *v9;
  id v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v1 = v0;
  v2 = sub_1CA1F0844();
  v3 = *(_QWORD *)(v2 - 8);
  v5 = MEMORY[0x1E0C80A78](v2, v4);
  v7 = (char *)&v14 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  result = objc_msgSend(*(id *)(v1 + 16), sel_concreteGraph, v5);
  if (result)
  {
    v9 = result;
    v10 = objc_msgSend(result, sel_identifier);

    sub_1CA1F0838();
    sub_1CA1500D4(&qword_1EF93A338, 255, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB0998], MEMORY[0x1E0CB09C8]);
    sub_1CA1F0964();
    (*(void (**)(char *, uint64_t))(v3 + 8))(v7, v2);
    v11 = *(_QWORD *)(v1 + 80);
    result = (id)sub_1CA1F13FC();
    v12 = *(_QWORD *)(v11 + 16);
    if (v12)
    {
      v13 = v11 + 32;
      do
      {
        v13 += 2;
        result = (id)sub_1CA1F1414();
        --v12;
      }
      while (v12);
    }
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t sub_1CA1492C4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  void *v4;
  uint64_t result;
  void *v6;
  void *v7;
  void *v8;
  char v9;
  BOOL v10;

  v1 = v0;
  type metadata accessor for MADomainsSlice();
  v2 = swift_dynamicCastClass();
  if (!v2)
    return 0;
  v3 = v2;
  v4 = *(void **)(v0 + 16);
  swift_retain();
  result = (uint64_t)objc_msgSend(v4, sel_concreteGraph);
  if (result)
  {
    v6 = (void *)result;
    v7 = *(void **)(v3 + 16);
    swift_retain();
    result = (uint64_t)objc_msgSend(v7, sel_concreteGraph);
    if (result)
    {
      v8 = (void *)result;
      swift_release();
      sub_1CA0AB910(0, &qword_1EF9374E0);
      v9 = sub_1CA1F0E68();

      if ((v9 & 1) != 0)
      {
        v10 = sub_1CA0B5224(*(_QWORD *)(v1 + 80), *(_QWORD *)(v3 + 80));
        swift_release();
        if (v10)
          return 1;
      }
      else
      {
        swift_release();
      }
      return 0;
    }
  }
  else
  {
    __break(1u);
  }
  __break(1u);
  return result;
}

void sub_1CA1493D8()
{
  uint64_t v0;
  id v1;
  void *v2;
  unsigned int v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  id v7;
  void *v8;
  id v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  id v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  int64_t v18;
  uint64_t v19;
  unint64_t v20;
  char *v21;
  id v22;
  uint64_t v23;
  unint64_t v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  id v29;
  unint64_t v30;
  id v31[7];

  v29 = *(id *)(v0 + 16);
  v1 = objc_msgSend(v29, sel_concreteGraph);
  if (!v1)
  {
LABEL_45:
    __break(1u);
    return;
  }
  v2 = v1;
  v3 = objc_msgSend(v1, sel_hasPendingRead);

  if (!v3)
  {
LABEL_43:
    __break(1u);
LABEL_44:
    __break(1u);
    goto LABEL_45;
  }
  v31[1] = (id)MEMORY[0x1E0DEE9E8];
  v4 = *(_QWORD *)(v0 + 80);
  v28 = *(_QWORD *)(v4 + 16);
  if (!v28)
    return;
  v27 = v4 + 32;
  swift_bridgeObjectRetain();
  v5 = 0;
  v26 = v4;
  do
  {
    if (v5 >= *(_QWORD *)(v4 + 16))
      goto LABEL_42;
    v6 = *(unsigned __int16 *)(v27 + 2 * v5);
    v7 = objc_msgSend(v29, sel_concreteGraph);
    if (!v7)
      goto LABEL_44;
    v8 = v7;
    v9 = objc_msgSend(v7, sel_nodesForDomain_, v6);

    if (v9)
    {
      sub_1CA0AB910(0, (unint64_t *)&qword_1EF93A320);
      sub_1CA0C0614();
      v10 = sub_1CA1F0C94();

      v30 = v5;
      if ((v10 & 0xC000000000000001) != 0)
      {
        sub_1CA1F0F64();
        sub_1CA1F0CC4();
        v10 = (uint64_t)v31[2];
        v11 = v31[3];
        v12 = (uint64_t)v31[4];
        v13 = v31[5];
        v14 = (unint64_t)v31[6];
      }
      else
      {
        v13 = 0;
        v15 = -1 << *(_BYTE *)(v10 + 32);
        v11 = (_QWORD *)(v10 + 56);
        v12 = ~v15;
        v16 = -v15;
        if (v16 < 64)
          v17 = ~(-1 << v16);
        else
          v17 = -1;
        v14 = v17 & *(_QWORD *)(v10 + 56);
      }
      v18 = (unint64_t)(v12 + 64) >> 6;
      if (v10 < 0)
        goto LABEL_19;
      while (1)
      {
        if (v14)
        {
          v19 = (v14 - 1) & v14;
          v20 = __clz(__rbit64(v14)) | ((_QWORD)v13 << 6);
          v21 = (char *)v13;
        }
        else
        {
          v23 = (uint64_t)v13 + 1;
          if (__OFADD__(v13, 1))
          {
            __break(1u);
LABEL_42:
            __break(1u);
            goto LABEL_43;
          }
          if (v23 >= v18)
            goto LABEL_5;
          v24 = v11[v23];
          v21 = (char *)v13 + 1;
          if (!v24)
          {
            v21 = (char *)v13 + 2;
            if ((uint64_t)v13 + 2 >= v18)
              goto LABEL_5;
            v24 = v11[(_QWORD)v21];
            if (!v24)
            {
              v21 = (char *)v13 + 3;
              if ((uint64_t)v13 + 3 >= v18)
                goto LABEL_5;
              v24 = v11[(_QWORD)v21];
              if (!v24)
              {
                v21 = (char *)v13 + 4;
                if ((uint64_t)v13 + 4 >= v18)
                  goto LABEL_5;
                v24 = v11[(_QWORD)v21];
                if (!v24)
                {
                  v25 = (char *)v13 + 5;
                  while ((char *)v18 != v25)
                  {
                    v24 = v11[(_QWORD)v25++];
                    if (v24)
                    {
                      v21 = v25 - 1;
                      goto LABEL_35;
                    }
                  }
LABEL_5:
                  sub_1CA0B6A14();
                  v4 = v26;
                  v5 = v30;
                  break;
                }
              }
            }
          }
LABEL_35:
          v19 = (v24 - 1) & v24;
          v20 = __clz(__rbit64(v24)) + ((_QWORD)v21 << 6);
        }
        v22 = *(id *)(*(_QWORD *)(v10 + 48) + 8 * v20);
        if (!v22)
          goto LABEL_5;
        while (1)
        {
          sub_1CA0BDD74(v31, v22);

          v13 = v21;
          v14 = v19;
          if ((v10 & 0x8000000000000000) == 0)
            break;
LABEL_19:
          if (sub_1CA1F0FD0())
          {
            swift_unknownObjectRetain();
            swift_dynamicCast();
            v22 = v31[0];
            swift_unknownObjectRelease();
            v21 = (char *)v13;
            v19 = v14;
            if (v22)
              continue;
          }
          goto LABEL_5;
        }
      }
    }
    ++v5;
  }
  while (v5 != v28);
  swift_bridgeObjectRelease();
}

void sub_1CA149734(void *a1)
{
  uint64_t v1;
  id v3;
  void *v4;
  unsigned int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int v10;

  v3 = objc_msgSend(*(id *)(v1 + 16), sel_concreteGraph);
  if (!v3)
    goto LABEL_13;
  v4 = v3;
  v5 = objc_msgSend(v3, sel_hasPendingRead);

  if (!v5)
  {
    __break(1u);
LABEL_13:
    __break(1u);
    return;
  }
  v6 = *(_QWORD *)(v1 + 80);
  v7 = *(_QWORD *)(v6 + 16);
  if (v7)
  {
    swift_bridgeObjectRetain();
    v8 = 0;
    v9 = v7 - 1;
    do
      v10 = *(unsigned __int16 *)(v6 + 2 * v8 + 32);
    while (objc_msgSend(a1, sel_domain) != v10 && v9 != v8++);
    swift_bridgeObjectRelease();
  }
}

_QWORD *sub_1CA1497F4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  _QWORD *v4;
  __int128 v5;
  __int128 v6;
  uint64_t v7;
  _QWORD *result;
  void *v9;
  id v10;
  uint64_t v11;
  id v12;
  void *v13;
  void *v14;
  double v15;
  id v16;
  id v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  id v22;
  uint64_t v23;
  _OWORD v24[2];
  uint64_t v25;
  __int128 v26;
  uint64_t v27;

  v1 = *(_QWORD *)(v0 + 80);
  v23 = *(_QWORD *)(v1 + 16);
  if (v23)
  {
    v22 = *(id *)(v0 + 16);
    swift_bridgeObjectRetain();
    v2 = 0;
    v3 = (_QWORD *)MEMORY[0x1E0DEE9D8];
    v21 = MEMORY[0x1E0DEE9B8] + 8;
    while (1)
    {
      v7 = *(unsigned __int16 *)(v1 + 2 * v2 + 32);
      result = objc_msgSend(v22, sel_concreteGraph, v21);
      if (!result)
        break;
      v9 = result;
      v10 = objc_msgSend(result, sel_nodesForDomain_, v7);

      if (v10)
      {
        sub_1CA0AB910(0, (unint64_t *)&qword_1EF93A320);
        sub_1CA0C0614();
        v11 = sub_1CA1F0C94();

        sub_1CA0ABAEC(MEMORY[0x1E0DEE9D8]);
        v12 = objc_allocWithZone((Class)MAAbstractNode);
        v13 = (void *)sub_1CA1F0A00();
        v14 = (void *)sub_1CA1F08BC();
        swift_bridgeObjectRelease();
        LODWORD(v15) = 1065353216;
        v16 = objc_msgSend(v12, sel_initWithLabel_domain_weight_properties_, v13, v7, v14, v15);

        v27 = sub_1CA0AB910(0, (unint64_t *)&unk_1EF93AEB0);
        *(_QWORD *)&v26 = v16;
        v17 = v16;
        v18 = sub_1CA0B57C8(v11);
        swift_bridgeObjectRelease();
        sub_1CA0AFCC0(&v26, v24);
        v25 = v18;
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
          v3 = sub_1CA0E5F04(0, v3[2] + 1, 1, v3);
        v20 = v3[2];
        v19 = v3[3];
        if (v20 >= v19 >> 1)
          v3 = sub_1CA0E5F04((_QWORD *)(v19 > 1), v20 + 1, 1, v3);
        v3[2] = v20 + 1;
        v4 = &v3[5 * v20];
        v5 = v24[0];
        v6 = v24[1];
        v4[8] = v25;
        *((_OWORD *)v4 + 2) = v5;
        *((_OWORD *)v4 + 3) = v6;

      }
      if (v23 == ++v2)
      {
        swift_bridgeObjectRelease();
        return v3;
      }
    }
    __break(1u);
  }
  else
  {
    return (_QWORD *)MEMORY[0x1E0DEE9D8];
  }
  return result;
}

_QWORD *sub_1CA149A88()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  id v5;
  void *v6;
  void *v7;
  double v8;
  id v9;
  id v10;
  unint64_t v11;
  unint64_t v12;
  _QWORD *v13;
  __int128 v14;
  __int128 v15;
  uint64_t v17;
  _OWORD v18[2];
  uint64_t v19;
  __int128 v20;
  uint64_t v21;

  v1 = *(_QWORD *)(v0 + 80);
  v17 = *(_QWORD *)(v1 + 16);
  if (!v17)
    return (_QWORD *)MEMORY[0x1E0DEE9D8];
  swift_bridgeObjectRetain();
  v2 = 0;
  v3 = (_QWORD *)MEMORY[0x1E0DEE9D8];
  do
  {
    v4 = *(unsigned __int16 *)(v1 + 2 * v2 + 32);
    sub_1CA0ABAEC(MEMORY[0x1E0DEE9D8]);
    v5 = objc_allocWithZone((Class)MAAbstractNode);
    v6 = (void *)sub_1CA1F0A00();
    v7 = (void *)sub_1CA1F08BC();
    swift_bridgeObjectRelease();
    LODWORD(v8) = 1065353216;
    v9 = objc_msgSend(v5, sel_initWithLabel_domain_weight_properties_, v6, v4, v7, v8);

    v21 = sub_1CA0AB910(0, (unint64_t *)&unk_1EF93AEB0);
    *(_QWORD *)&v20 = v9;
    *(_QWORD *)&v18[0] = v0;
    sub_1CA0AFCC0(&v20, (_OWORD *)((char *)v18 + 8));
    v10 = v9;
    swift_retain();
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      v3 = sub_1CA0E5CD8(0, v3[2] + 1, 1, v3);
    v12 = v3[2];
    v11 = v3[3];
    if (v12 >= v11 >> 1)
      v3 = sub_1CA0E5CD8((_QWORD *)(v11 > 1), v12 + 1, 1, v3);
    ++v2;
    v3[2] = v12 + 1;
    v13 = &v3[5 * v12];
    v14 = v18[0];
    v15 = v18[1];
    v13[8] = v19;
    *((_OWORD *)v13 + 2) = v14;
    *((_OWORD *)v13 + 3) = v15;

  }
  while (v17 != v2);
  swift_bridgeObjectRelease();
  return v3;
}

void sub_1CA149C9C()
{
  sub_1CA14D388();
}

uint64_t sub_1CA149CB4()
{
  return swift_bridgeObjectRelease();
}

uint64_t _s17KnowledgeGraphKit8MASlicesCfd_0()
{
  uint64_t v0;

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_1CA0AAE34(*(_QWORD *)(v0 + 48));
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v0;
}

uint64_t _s17KnowledgeGraphKit8MASlicesCfD_0()
{
  uint64_t v0;

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_1CA0AAE34(*(_QWORD *)(v0 + 48));
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_deallocClassInstance();
}

void sub_1CA149D54()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  double v5;
  uint64_t v6;
  char *v7;
  id v8;
  void *v9;
  id v10;
  uint64_t v11;
  id v12;
  void *v13;
  id v14;
  id v15;
  uint64_t v16;

  v1 = v0;
  v2 = sub_1CA1F0844();
  v3 = *(_QWORD *)(v2 - 8);
  v5 = MEMORY[0x1E0C80A78](v2, v4);
  v7 = (char *)&v16 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = objc_msgSend(*(id *)(v1 + 16), sel_concreteGraph, v5);
  if (!v8)
  {
    __break(1u);
    return;
  }
  v9 = v8;
  v10 = objc_msgSend(v8, sel_identifier);

  sub_1CA1F0838();
  sub_1CA1500D4(&qword_1EF93A338, 255, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB0998], MEMORY[0x1E0CB09C8]);
  sub_1CA1F0964();
  (*(void (**)(char *, uint64_t))(v3 + 8))(v7, v2);
  if (*(_BYTE *)(v1 + 82) == 1)
  {
    sub_1CA1F1408();
    if (*(_QWORD *)(v1 + 96))
      goto LABEL_4;
  }
  else
  {
    sub_1CA1F1408();
    sub_1CA1F1414();
    if (*(_QWORD *)(v1 + 96))
    {
LABEL_4:
      sub_1CA1F1408();
      swift_bridgeObjectRetain();
      sub_1CA1F0A30();
      swift_bridgeObjectRelease();
      if (*(_QWORD *)(v1 + 104))
      {
LABEL_5:
        v11 = swift_bridgeObjectRetain();
        sub_1CA0C20A8(v11);
        v12 = objc_allocWithZone(MEMORY[0x1E0C99D80]);
        v13 = (void *)sub_1CA1F08BC();
        swift_bridgeObjectRelease();
        v14 = objc_msgSend(v12, sel_initWithDictionary_, v13);
        swift_bridgeObjectRelease();

        sub_1CA1F1408();
        v15 = v14;
        sub_1CA1F0E74();

        return;
      }
      goto LABEL_8;
    }
  }
  sub_1CA1F1408();
  if (*(_QWORD *)(v1 + 104))
    goto LABEL_5;
LABEL_8:
  sub_1CA1F1408();
}

uint64_t sub_1CA149F8C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t result;
  uint64_t v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  char v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  id v13;
  void *v14;
  id v15;
  void *v16;

  v1 = v0;
  type metadata accessor for MAFetchSlice();
  result = swift_dynamicCastClass();
  if (result)
  {
    v3 = result;
    v4 = *(void **)(v0 + 16);
    swift_retain();
    result = (uint64_t)objc_msgSend(v4, sel_concreteGraph);
    if (result)
    {
      v5 = (void *)result;
      v6 = *(void **)(v3 + 16);
      swift_retain();
      result = (uint64_t)objc_msgSend(v6, sel_concreteGraph);
      if (result)
      {
        v7 = (void *)result;
        swift_release();
        sub_1CA0AB910(0, &qword_1EF9374E0);
        v8 = sub_1CA1F0E68();

        if ((v8 & 1) != 0
          && ((*(_BYTE *)(v1 + 82) & 1) != 0
           || (*(_BYTE *)(v3 + 82) & 1) != 0
           || *(unsigned __int16 *)(v1 + 80) == *(unsigned __int16 *)(v3 + 80))
          && ((v9 = *(_QWORD *)(v1 + 96)) == 0
           || (v10 = *(_QWORD *)(v3 + 96)) == 0
           || *(_QWORD *)(v1 + 88) == *(_QWORD *)(v3 + 88) && v9 == v10
           || (sub_1CA1F12E8() & 1) != 0))
        {
          v11 = *(_QWORD *)(v1 + 104);
          if (!v11 || (v12 = *(_QWORD *)(v3 + 104)) == 0)
          {
            swift_release();
            return 1;
          }
          swift_bridgeObjectRetain();
          sub_1CA0C20A8(v11);
          v13 = objc_allocWithZone(MEMORY[0x1E0C99D80]);
          v14 = (void *)sub_1CA1F08BC();
          swift_bridgeObjectRelease();
          v15 = objc_msgSend(v13, sel_initWithDictionary_, v14);

          sub_1CA0C20A8(v12);
          swift_bridgeObjectRelease();
          v16 = (void *)sub_1CA1F08BC();
          swift_bridgeObjectRelease();
          LOBYTE(v13) = objc_msgSend(v15, sel_isEqualToDictionary_, v16);

          swift_release();
          if ((v13 & 1) != 0)
            return 1;
        }
        else
        {
          swift_release();
        }
        return 0;
      }
    }
    else
    {
      __break(1u);
    }
    __break(1u);
  }
  return result;
}

uint64_t sub_1CA14A1D8()
{
  _QWORD *v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  char v4;

  v1 = v0;
  if (v0[9])
  {
    v2 = v0[8];
  }
  else
  {
    v3 = v0[13];
    if (v3
      && *(_QWORD *)(v3 + 16)
      && (sub_1CA0AA474(1701667182, 0xE400000000000000), (v4 & 1) != 0)
      && (swift_unknownObjectRetain(), (swift_dynamicCast() & 1) != 0))
    {
      v2 = sub_1CA1F0A24();
      swift_bridgeObjectRelease();
    }
    else
    {
      v2 = v1[11];
      if (v1[12])
        v2 = sub_1CA1F0A24();
    }
  }
  swift_bridgeObjectRetain();
  return v2;
}

uint64_t (*sub_1CA14A2C8(uint64_t *a1))(uint64_t)
{
  uint64_t v1;
  uint64_t v3;

  a1[2] = v1;
  *a1 = sub_1CA14A1D8();
  a1[1] = v3;
  return sub_1CA14A2FC;
}

void sub_1CA14A300()
{
  uint64_t v0;
  void *v1;
  uint64_t v2;
  unint64_t v3;
  unint64_t v4;
  id v5;
  void *v6;
  void *v7;
  double v8;
  id v9;
  void *v10;
  id v11;

  v1 = *(void **)(v0 + 112);
  if (v1)
  {
LABEL_8:
    v11 = v1;
    return;
  }
  if (*(_QWORD *)(v0 + 96))
  {
    if ((*(_BYTE *)(v0 + 82) & 1) == 0)
    {
      v2 = *(unsigned __int16 *)(v0 + 80);
      v3 = *(_QWORD *)(v0 + 104);
      swift_bridgeObjectRetain();
      if (v3)
        v4 = v3;
      else
        v4 = sub_1CA0ABAE0(MEMORY[0x1E0DEE9D8]);
      swift_bridgeObjectRetain();
      sub_1CA0C2420(v4);
      swift_bridgeObjectRelease();
      v5 = objc_allocWithZone((Class)MAAbstractNode);
      v6 = (void *)sub_1CA1F0A00();
      swift_bridgeObjectRelease();
      v7 = (void *)sub_1CA1F08BC();
      swift_bridgeObjectRelease();
      LODWORD(v8) = 1065353216;
      v9 = objc_msgSend(v5, sel_initWithLabel_domain_weight_properties_, v6, v2, v7, v8);

      v10 = *(void **)(v0 + 112);
      *(_QWORD *)(v0 + 112) = v9;
      v9;

      v1 = 0;
      goto LABEL_8;
    }
  }
  else
  {
    __break(1u);
  }
  __break(1u);
}

void sub_1CA14A45C()
{
  uint64_t v0;
  void *v1;
  id v2;
  void *v3;
  id v4;
  id v5;
  void *v6;
  void *v7;
  uint64_t v8;
  void *v9;
  id v10;

  v1 = *(void **)(v0 + 16);
  v2 = objc_msgSend(v1, sel_concreteGraph);
  if (!v2)
    goto LABEL_13;
  v3 = v2;
  v4 = objc_msgSend(v2, sel_hasPendingRead);

  if (!(_DWORD)v4)
  {
    __break(1u);
LABEL_13:
    __break(1u);
    goto LABEL_14;
  }
  v5 = objc_msgSend(v1, sel_concreteGraph);
  if (v5)
  {
    v6 = v5;
    if (*(_QWORD *)(v0 + 96))
    {
      v7 = (void *)sub_1CA1F0A00();
      if ((*(_BYTE *)(v0 + 82) & 1) == 0)
        goto LABEL_6;
    }
    else
    {
      v7 = 0;
      if ((*(_BYTE *)(v0 + 82) & 1) == 0)
      {
LABEL_6:
        v4 = (id)*(unsigned __int16 *)(v0 + 80);
        v8 = *(_QWORD *)(v0 + 104);
        if (v8)
        {
          sub_1CA0C20A8(v8);
          v9 = (void *)sub_1CA1F08BC();
          swift_bridgeObjectRelease();
LABEL_11:
          v10 = objc_msgSend(v6, sel_nodesForLabel_domain_properties_, v7, v4, v9);

          sub_1CA0AB910(0, (unint64_t *)&qword_1EF93A320);
          sub_1CA0C0614();
          sub_1CA1F0C94();

          return;
        }
LABEL_10:
        v9 = 0;
        goto LABEL_11;
      }
    }
    __break(1u);
    goto LABEL_10;
  }
LABEL_14:
  __break(1u);
}

void sub_1CA14A5CC(void *a1)
{
  uint64_t v1;
  id v3;
  void *v4;
  unsigned int v5;
  void *v6;
  void *v7;

  v3 = objc_msgSend(*(id *)(v1 + 16), sel_concreteGraph);
  if (v3)
  {
    v4 = v3;
    v5 = objc_msgSend(v3, sel_hasPendingRead);

    if (v5)
    {
      sub_1CA14A300();
      v7 = v6;
      objc_msgSend(a1, sel_matchesNode_includingProperties_, v6, 1);

      return;
    }
    __break(1u);
  }
  __break(1u);
}

_QWORD *sub_1CA14A65C()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *result;
  void *v3;
  void *v4;
  uint64_t v5;
  void *v6;
  id v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  unint64_t v13;
  unint64_t v14;
  _QWORD *v15;
  __int128 v16;
  __int128 v17;
  _OWORD v18[2];
  uint64_t v19;
  __int128 v20;
  uint64_t v21;

  result = objc_msgSend(*(id *)(v0 + 16), sel_concreteGraph);
  if (!result)
  {
    __break(1u);
    return result;
  }
  v3 = result;
  if (*(_QWORD *)(v0 + 96))
  {
    v4 = (void *)sub_1CA1F0A00();
    if ((*(_BYTE *)(v0 + 82) & 1) == 0)
      goto LABEL_4;
LABEL_7:
    __break(1u);
    goto LABEL_8;
  }
  v4 = 0;
  if ((*(_BYTE *)(v0 + 82) & 1) != 0)
    goto LABEL_7;
LABEL_4:
  v1 = *(unsigned __int16 *)(v0 + 80);
  v5 = *(_QWORD *)(v0 + 104);
  if (!v5)
  {
LABEL_8:
    v6 = 0;
    goto LABEL_9;
  }
  sub_1CA0C20A8(v5);
  v6 = (void *)sub_1CA1F08BC();
  swift_bridgeObjectRelease();
LABEL_9:
  v7 = objc_msgSend(v3, sel_nodesForLabel_domain_properties_, v4, v1, v6);

  sub_1CA0AB910(0, (unint64_t *)&qword_1EF93A320);
  sub_1CA0C0614();
  v8 = sub_1CA1F0C94();

  sub_1CA14A300();
  v10 = v9;
  v21 = sub_1CA0AB910(0, (unint64_t *)&unk_1EF93AEB0);
  *(_QWORD *)&v20 = v10;
  v11 = sub_1CA0B57C8(v8);
  swift_bridgeObjectRelease();
  sub_1CA0AFCC0(&v20, v18);
  v19 = v11;
  v12 = sub_1CA0E5F04(0, 1, 1, MEMORY[0x1E0DEE9D8]);
  v14 = v12[2];
  v13 = v12[3];
  if (v14 >= v13 >> 1)
    v12 = sub_1CA0E5F04((_QWORD *)(v13 > 1), v14 + 1, 1, v12);
  v12[2] = v14 + 1;
  v15 = &v12[5 * v14];
  v16 = v18[0];
  v17 = v18[1];
  v15[8] = v19;
  *((_OWORD *)v15 + 2) = v16;
  *((_OWORD *)v15 + 3) = v17;
  return v12;
}

uint64_t sub_1CA14A848()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  __swift_instantiateConcreteTypeFromMangledName(&qword_1EF9383E0);
  v1 = swift_allocObject();
  *(_OWORD *)(v1 + 16) = xmmword_1CA1F9100;
  *(_QWORD *)(v1 + 32) = v0;
  swift_retain();
  sub_1CA14A300();
  v3 = v2;
  *(_QWORD *)(v1 + 64) = sub_1CA0AB910(0, (unint64_t *)&unk_1EF93AEB0);
  *(_QWORD *)(v1 + 40) = v3;
  return v1;
}

void sub_1CA14A8C0()
{
  sub_1CA14D388();
}

void sub_1CA14A8D8()
{
  uint64_t v0;

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

}

uint64_t MAFetchSlice.deinit()
{
  uint64_t v0;

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_1CA0AAE34(*(_QWORD *)(v0 + 48));
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  return v0;
}

uint64_t MAFetchSlice.__deallocating_deinit()
{
  MAFetchSlice.deinit();
  return swift_deallocClassInstance();
}

id sub_1CA14A970(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v13;
  char v14;
  id result;
  void *v16;
  uint64_t v17;
  id v18;
  uint64_t v19;
  uint64_t v20;

  v5 = (uint64_t)v3;
  v7 = v3[11];
  v19 = v3[10];
  v20 = v7;
  swift_bridgeObjectRetain();
  sub_1CA1F0A3C();
  sub_1CA1F0A3C();
  v9 = v19;
  v8 = v20;
  v10 = v3[12];
  v11 = MEMORY[0x1E0DEE9E0];
  if (!v10)
  {
    v13 = MEMORY[0x1E0DEE9E0];
    if (!a3)
      goto LABEL_8;
    goto LABEL_6;
  }
  swift_bridgeObjectRetain();
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  v19 = v11;
  sub_1CA14F364(v10, (uint64_t)sub_1CA14FBC4, 0, isUniquelyReferenced_nonNull_native, &v19);
  v13 = v19;
  swift_bridgeObjectRelease();
  if (v4)
    goto LABEL_7;
  if (a3)
  {
LABEL_6:
    swift_bridgeObjectRetain();
    v14 = swift_isUniquelyReferenced_nonNull_native();
    v19 = v13;
    sub_1CA14F364(a3, (uint64_t)sub_1CA14FBC4, 0, v14, &v19);
    v13 = v19;
    swift_bridgeObjectRelease();
    if (!v4)
      goto LABEL_8;
LABEL_7:
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    return (id)v5;
  }
LABEL_8:
  result = objc_msgSend(*(id *)(v5 + 16), sel_concreteGraph, v19);
  if (result)
  {
    v16 = result;
    v17 = *(_QWORD *)(v5 + 32);
    type metadata accessor for MAQuerySlice();
    v5 = swift_allocObject();
    *(_OWORD *)(v5 + 104) = xmmword_1CA1FC380;
    *(_QWORD *)(v5 + 80) = v9;
    *(_QWORD *)(v5 + 88) = v8;
    *(_QWORD *)(v5 + 96) = v13;
    v18 = objc_msgSend(v16, sel_graphReference);
    *(_QWORD *)(v5 + 40) = v11;
    *(_OWORD *)(v5 + 48) = 0u;
    *(_OWORD *)(v5 + 64) = 0u;
    *(_QWORD *)(v5 + 16) = v18;
    *(_QWORD *)(v5 + 24) = 0;
    *(_QWORD *)(v5 + 32) = v17;

    return (id)v5;
  }
  __break(1u);
  return result;
}

uint64_t sub_1CA14AB40()
{
  uint64_t v0;
  uint64_t result;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  int64_t v7;
  int64_t v8;
  int64_t v9;
  uint64_t v10;
  int64_t v11;

  swift_bridgeObjectRetain();
  sub_1CA1F0A30();
  result = swift_bridgeObjectRelease();
  v2 = *(_QWORD *)(v0 + 96);
  if (!v2)
    return result;
  v3 = v2 + 64;
  v4 = 1 << *(_BYTE *)(v2 + 32);
  v5 = -1;
  if (v4 < 64)
    v5 = ~(-1 << v4);
  v6 = v5 & *(_QWORD *)(v2 + 64);
  v7 = (unint64_t)(v4 + 63) >> 6;
  result = swift_bridgeObjectRetain();
  v8 = 0;
  while (1)
  {
    if (v6)
    {
      v6 &= v6 - 1;
      goto LABEL_22;
    }
    v9 = v8 + 1;
    if (__OFADD__(v8, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v9 >= v7)
      return swift_release();
    v10 = *(_QWORD *)(v3 + 8 * v9);
    ++v8;
    if (!v10)
    {
      v8 = v9 + 1;
      if (v9 + 1 >= v7)
        return swift_release();
      v10 = *(_QWORD *)(v3 + 8 * v8);
      if (!v10)
      {
        v8 = v9 + 2;
        if (v9 + 2 >= v7)
          return swift_release();
        v10 = *(_QWORD *)(v3 + 8 * v8);
        if (!v10)
          break;
      }
    }
LABEL_21:
    v6 = (v10 - 1) & v10;
LABEL_22:
    objc_opt_self();
    if (!swift_dynamicCastObjCClass())
    {
      objc_opt_self();
      result = swift_dynamicCastObjCClass();
      if (!result)
        continue;
    }
    swift_bridgeObjectRetain();
    swift_unknownObjectRetain();
    sub_1CA1F0E74();
    swift_unknownObjectRelease();
    result = swift_bridgeObjectRelease();
  }
  v11 = v9 + 3;
  if (v11 >= v7)
    return swift_release();
  v10 = *(_QWORD *)(v3 + 8 * v11);
  if (v10)
  {
    v8 = v11;
    goto LABEL_21;
  }
  while (1)
  {
    v8 = v11 + 1;
    if (__OFADD__(v11, 1))
      break;
    if (v8 >= v7)
      return swift_release();
    v10 = *(_QWORD *)(v3 + 8 * v8);
    ++v11;
    if (v10)
      goto LABEL_21;
  }
LABEL_28:
  __break(1u);
  return result;
}

uint64_t sub_1CA14AD38()
{
  _QWORD *v0;
  _QWORD *v1;
  uint64_t result;
  _QWORD *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  char v8;
  uint64_t v9;
  uint64_t v10;
  char v11;
  int64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  char v17;
  unint64_t v18;
  unint64_t i;
  int64_t v20;
  unint64_t v21;
  int64_t v22;
  uint64_t *v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  char v27;
  uint64_t v28;
  uint64_t *v29;
  uint64_t v30;
  int64_t v31;
  uint64_t v32;

  v1 = v0;
  type metadata accessor for MAQuerySlice();
  result = swift_dynamicCastClass();
  if (result)
  {
    v3 = (_QWORD *)result;
    v4 = (void *)v0[2];
    swift_retain();
    result = (uint64_t)objc_msgSend(v4, sel_concreteGraph);
    if (!result)
    {
LABEL_61:
      __break(1u);
      goto LABEL_62;
    }
    v5 = (void *)result;
    v6 = (void *)v3[2];
    swift_retain();
    result = (uint64_t)objc_msgSend(v6, sel_concreteGraph);
    if (!result)
    {
LABEL_62:
      __break(1u);
      return result;
    }
    v7 = (void *)result;
    swift_release();
    sub_1CA0AB910(0, &qword_1EF9374E0);
    v8 = sub_1CA1F0E68();

    if ((v8 & 1) != 0 && (v1[10] == v3[10] && v1[11] == v3[11] || (sub_1CA1F12E8() & 1) != 0))
    {
      v9 = v1[12];
      if (!v9)
        goto LABEL_57;
      v10 = v3[12];
      if (!v10)
        goto LABEL_57;
      swift_bridgeObjectRetain_n();
      swift_bridgeObjectRetain();
      v11 = sub_1CA14EAD8(v9, v10);
      result = swift_bridgeObjectRelease();
      if ((v11 & 1) != 0)
      {
        v12 = 0;
        v13 = *(_QWORD *)(v9 + 64);
        v30 = v9 + 64;
        v14 = 1 << *(_BYTE *)(v9 + 32);
        v15 = -1;
        if (v14 < 64)
          v15 = ~(-1 << v14);
        v16 = v15 & v13;
        v31 = (unint64_t)(v14 + 63) >> 6;
        v32 = v10;
        if ((v15 & v13) != 0)
          goto LABEL_19;
LABEL_20:
        v20 = v12 + 1;
        if (__OFADD__(v12, 1))
        {
          __break(1u);
LABEL_60:
          __break(1u);
          goto LABEL_61;
        }
        if (v20 >= v31)
          goto LABEL_56;
        v21 = *(_QWORD *)(v30 + 8 * v20);
        ++v12;
        if (!v21)
        {
          v12 = v20 + 1;
          if (v20 + 1 >= v31)
            goto LABEL_56;
          v21 = *(_QWORD *)(v30 + 8 * v12);
          if (v21)
            goto LABEL_33;
          v12 = v20 + 2;
          if (v20 + 2 >= v31)
          {
LABEL_56:
            swift_bridgeObjectRelease();
            swift_release();
LABEL_57:
            swift_release();
            return 1;
          }
          v21 = *(_QWORD *)(v30 + 8 * v12);
          if (!v21)
          {
            v22 = v20 + 3;
            if (v22 < v31)
            {
              v21 = *(_QWORD *)(v30 + 8 * v22);
              if (v21)
              {
                v12 = v22;
                goto LABEL_33;
              }
              while (1)
              {
                v12 = v22 + 1;
                if (__OFADD__(v22, 1))
                  goto LABEL_60;
                if (v12 >= v31)
                  goto LABEL_56;
                v21 = *(_QWORD *)(v30 + 8 * v12);
                ++v22;
                if (v21)
                  goto LABEL_33;
              }
            }
            goto LABEL_56;
          }
        }
LABEL_33:
        v16 = (v21 - 1) & v21;
        for (i = __clz(__rbit64(v21)) + (v12 << 6); ; i = v18 | (v12 << 6))
        {
          v23 = (uint64_t *)(*(_QWORD *)(v9 + 48) + 16 * i);
          v24 = v23[1];
          if (*(_QWORD *)(v10 + 16))
          {
            v25 = *v23;
            swift_bridgeObjectRetain_n();
            swift_unknownObjectRetain();
            v26 = sub_1CA0AA474(v25, v24);
            if ((v27 & 1) != 0)
            {
              v28 = *(_QWORD *)(*(_QWORD *)(v10 + 56) + 8 * v26);
              swift_unknownObjectRetain();
              swift_bridgeObjectRelease();
              goto LABEL_40;
            }
            swift_bridgeObjectRelease();
          }
          else
          {
            swift_bridgeObjectRetain();
            swift_unknownObjectRetain();
          }
          v28 = 0;
LABEL_40:
          objc_opt_self();
          if (swift_dynamicCastObjCClass())
          {
            if (!v28)
              goto LABEL_51;
            objc_opt_self();
            if (!swift_dynamicCastObjCClass())
            {
LABEL_52:
              swift_release();
              swift_unknownObjectRelease();
              goto LABEL_53;
            }
            v29 = &qword_1EF93A320;
          }
          else
          {
            objc_opt_self();
            if (!swift_dynamicCastObjCClass())
            {
              swift_unknownObjectRelease();
              swift_bridgeObjectRelease();
              result = swift_unknownObjectRelease();
              if (!v16)
                goto LABEL_20;
              goto LABEL_19;
            }
            if (!v28)
            {
LABEL_51:
              swift_release();
LABEL_53:
              swift_release();
              swift_unknownObjectRelease();
              goto LABEL_54;
            }
            objc_opt_self();
            if (!swift_dynamicCastObjCClass())
              goto LABEL_52;
            v29 = &qword_1EF936F60;
          }
          sub_1CA0AB910(0, (unint64_t *)v29);
          swift_unknownObjectRetain();
          swift_unknownObjectRetain();
          v10 = v32;
          v17 = sub_1CA1F0E68();
          swift_unknownObjectRelease_n();
          swift_unknownObjectRelease_n();
          result = swift_bridgeObjectRelease();
          if ((v17 & 1) == 0)
          {
            swift_release();
            swift_bridgeObjectRelease();
            goto LABEL_15;
          }
          if (!v16)
            goto LABEL_20;
LABEL_19:
          v18 = __clz(__rbit64(v16));
          v16 &= v16 - 1;
        }
      }
      swift_release();
LABEL_54:
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
    }
    else
    {
LABEL_15:
      swift_release();
    }
    return 0;
  }
  return result;
}

uint64_t sub_1CA14B1F8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t result;
  id v6;
  void *v7;
  void *v8;
  id v9;
  uint64_t v10;
  _OWORD v11[2];
  __int128 v12;
  __int128 v13;
  uint64_t v14;
  _OWORD v15[2];
  _OWORD v16[2];
  uint64_t v17;
  _OWORD v18[2];

  if (*(_QWORD *)(v0 + 72))
  {
    v1 = *(_QWORD *)(v0 + 64);
LABEL_25:
    swift_bridgeObjectRetain();
    return v1;
  }
  v2 = sub_1CA14B720();
  v4 = sub_1CA14EC88(v2, v3);
  swift_bridgeObjectRelease();
  sub_1CA1407C4(v4, (uint64_t)&v12);
  swift_release();
  if (!*((_QWORD *)&v13 + 1))
  {
    sub_1CA0B6AD4((uint64_t)&v12, &qword_1EF93A390);
LABEL_15:
    v1 = 0;
    goto LABEL_25;
  }
  v16[0] = v12;
  v16[1] = v13;
  v17 = v14;
  sub_1CA0AFCC0(v15, v18);
  sub_1CA0AB948((uint64_t)v16, (uint64_t)&v12);
  sub_1CA0B6A98((uint64_t)v18, (uint64_t)v15);
  if (!swift_dynamicCast())
  {
    sub_1CA0B6AD4((uint64_t)v16, &qword_1EF93A398);
    __swift_destroy_boxed_opaque_existential_0((uint64_t)v15);
    goto LABEL_15;
  }
  __swift_destroy_boxed_opaque_existential_0((uint64_t)v15);
  sub_1CA0AB948((uint64_t)v16, (uint64_t)&v12);
  sub_1CA0B6A98((uint64_t)v18, (uint64_t)v15);
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_1EF93A3A0);
  if ((swift_dynamicCast() & 1) == 0)
  {
    sub_1CA0AB984((uint64_t)&v12);
LABEL_24:
    v1 = sub_1CA1F0A24();
    swift_bridgeObjectRelease();
    sub_1CA0B6AD4((uint64_t)v16, &qword_1EF93A398);
    goto LABEL_25;
  }
  result = sub_1CA0AB984((uint64_t)&v12);
  if (!(*(_QWORD *)&v11[0] >> 62))
  {
    if (*(_QWORD *)((*(_QWORD *)&v11[0] & 0xFFFFFFFFFFFFF8) + 0x10))
      goto LABEL_8;
LABEL_22:
    swift_bridgeObjectRelease();
    v12 = 0u;
    v13 = 0u;
LABEL_23:
    sub_1CA0B6AD4((uint64_t)&v12, &qword_1ED8528F8);
    goto LABEL_24;
  }
  swift_bridgeObjectRetain();
  v10 = sub_1CA1F1234();
  result = swift_bridgeObjectRelease();
  if (!v10)
    goto LABEL_22;
LABEL_8:
  if ((*(_QWORD *)&v11[0] & 0xC000000000000001) != 0)
  {
    v6 = (id)MEMORY[0x1CAA4A7A4](0, *(_QWORD *)&v11[0]);
LABEL_11:
    v7 = v6;
    swift_bridgeObjectRelease();
    v8 = (void *)sub_1CA1F0A00();
    v9 = objc_msgSend(v7, sel_propertyForKey_, v8);

    if (v9)
    {
      sub_1CA1F0F04();
      swift_unknownObjectRelease();
    }
    else
    {
      memset(v11, 0, sizeof(v11));
    }
    sub_1CA151A7C((uint64_t)v11, (uint64_t)&v12, &qword_1ED8528F8);
    if (*((_QWORD *)&v13 + 1))
    {
      if ((swift_dynamicCast() & 1) != 0)
        swift_bridgeObjectRelease();
      goto LABEL_24;
    }
    goto LABEL_23;
  }
  if (*(_QWORD *)((*(_QWORD *)&v11[0] & 0xFFFFFFFFFFFFF8) + 0x10))
  {
    v6 = *(id *)(*(_QWORD *)&v11[0] + 32);
    goto LABEL_11;
  }
  __break(1u);
  return result;
}

uint64_t (*sub_1CA14B514(uint64_t *a1))(uint64_t)
{
  uint64_t v1;
  uint64_t v3;

  a1[2] = v1;
  *a1 = sub_1CA14B1F8();
  a1[1] = v3;
  return sub_1CA14A2FC;
}

uint64_t sub_1CA14B548()
{
  uint64_t v0;
  void *v1;
  id v2;
  void *v3;
  unsigned int v4;
  id v5;
  void *v6;
  uint64_t v7;
  void *v8;
  void *v9;
  id v10;
  id v11;
  id v12;
  uint64_t v13;
  id v14;
  void *v15;
  id v17[2];

  v17[1] = *(id *)MEMORY[0x1E0C80C00];
  v1 = *(void **)(v0 + 16);
  v2 = objc_msgSend(v1, sel_concreteGraph);
  if (!v2)
    goto LABEL_10;
  v3 = v2;
  v4 = objc_msgSend(v2, sel_hasPendingRead);

  if (!v4)
  {
    __break(1u);
LABEL_10:
    __break(1u);
    goto LABEL_11;
  }
  v5 = objc_msgSend(v1, sel_concreteGraph);
  if (!v5)
  {
LABEL_11:
    __break(1u);
LABEL_12:
    __break(1u);
  }
  v6 = v5;
  v7 = sub_1CA1F0A00();
  if (!*(_QWORD *)(v0 + 96))
    goto LABEL_12;
  v8 = (void *)v7;
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EF93A3B0);
  v9 = (void *)sub_1CA1F08BC();
  v17[0] = 0;
  v10 = objc_msgSend(v6, sel_matchWithVisualFormat_elements_error_, v8, v9, v17);

  if (v10)
  {
    v11 = v17[0];
    v12 = objc_msgSend(v10, sel_allNamedNodes);
    sub_1CA0AB910(0, (unint64_t *)&qword_1EF93A320);
    sub_1CA0C0614();
    v13 = sub_1CA1F0C94();

  }
  else
  {
    v14 = v17[0];
    v15 = (void *)sub_1CA1F07CC();

    swift_willThrow();
    return MEMORY[0x1E0DEE9E8];
  }
  return v13;
}

uint64_t sub_1CA14B720()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  if (*(_QWORD *)(v0 + 104))
  {
    v1 = *(_QWORD *)(v0 + 104);
  }
  else
  {
    sub_1CA14B77C(v0);
    v1 = v2;
    *(_QWORD *)(v0 + 104) = v2;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
  }
  swift_bridgeObjectRetain();
  return v1;
}

void sub_1CA14B77C(uint64_t a1)
{
  id v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  int64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  id v12;
  void *v13;
  void *v14;
  int64_t v15;
  unint64_t v16;
  int64_t v17;
  void *v18;
  void *v19;
  unsigned int v20;
  void *v21;
  id v22;
  id v23;
  id v24;
  void *v25;
  uint64_t v26;
  int64_t v27;
  id v28;
  _QWORD v29[2];

  v29[1] = *MEMORY[0x1E0C80C00];
  v2 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E0C99E08]), sel_init);
  v3 = *(_QWORD *)(a1 + 96);
  if (v3)
  {
    v26 = v3 + 64;
    v4 = 1 << *(_BYTE *)(v3 + 32);
    v5 = -1;
    if (v4 < 64)
      v5 = ~(-1 << v4);
    v6 = v5 & *(_QWORD *)(v3 + 64);
    v27 = (unint64_t)(v4 + 63) >> 6;
    swift_bridgeObjectRetain();
    v7 = 0;
    while (1)
    {
      if (v6)
      {
        v8 = __clz(__rbit64(v6));
        v6 &= v6 - 1;
        v9 = v8 | (v7 << 6);
      }
      else
      {
        v15 = v7 + 1;
        if (__OFADD__(v7, 1))
        {
          __break(1u);
          goto LABEL_29;
        }
        if (v15 >= v27)
          goto LABEL_22;
        v16 = *(_QWORD *)(v26 + 8 * v15);
        ++v7;
        if (!v16)
        {
          v7 = v15 + 1;
          if (v15 + 1 >= v27)
            goto LABEL_22;
          v16 = *(_QWORD *)(v26 + 8 * v7);
          if (!v16)
          {
            v7 = v15 + 2;
            if (v15 + 2 >= v27)
              goto LABEL_22;
            v16 = *(_QWORD *)(v26 + 8 * v7);
            if (!v16)
            {
              v17 = v15 + 3;
              if (v17 >= v27)
              {
LABEL_22:
                swift_release();
                break;
              }
              v16 = *(_QWORD *)(v26 + 8 * v17);
              if (!v16)
              {
                while (1)
                {
                  v7 = v17 + 1;
                  if (__OFADD__(v17, 1))
                    break;
                  if (v7 >= v27)
                    goto LABEL_22;
                  v16 = *(_QWORD *)(v26 + 8 * v7);
                  ++v17;
                  if (v16)
                    goto LABEL_21;
                }
LABEL_29:
                __break(1u);
              }
              v7 = v17;
            }
          }
        }
LABEL_21:
        v6 = (v16 - 1) & v16;
        v9 = __clz(__rbit64(v16)) + (v7 << 6);
      }
      v10 = *(_QWORD *)(*(_QWORD *)(v3 + 56) + 8 * v9);
      __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_1ED852A58);
      v11 = swift_allocObject();
      *(_OWORD *)(v11 + 16) = xmmword_1CA1F9520;
      *(_QWORD *)(v11 + 32) = v10;
      v29[0] = v11;
      sub_1CA1F0B14();
      swift_unknownObjectRetain_n();
      swift_bridgeObjectRetain();
      v12 = v2;
      __swift_instantiateConcreteTypeFromMangledName(&qword_1EF93A3B0);
      v13 = (void *)sub_1CA1F0AE4();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRetain();
      v14 = (void *)sub_1CA1F0A00();
      swift_bridgeObjectRelease();
      objc_msgSend(v12, sel_setValue_forKey_, v13, v14);

      swift_unknownObjectRelease();
      swift_bridgeObjectRelease();
    }
  }
  v18 = (void *)objc_opt_self();
  v19 = (void *)sub_1CA1F0A00();
  v28 = 0;
  v29[0] = v2;
  v20 = objc_msgSend(v18, sel_scanMatchString_definitions_constraints_forCreation_error_, v19, v29, 0, 0, &v28);

  v21 = (void *)v29[0];
  v22 = v28;
  v23 = v21;

  if (v20)
  {
    if (v23)
    {
      v29[0] = 0;
      v24 = v23;
      sub_1CA1F08C8();
      if (v29[0])
      {

        return;
      }
    }
    else
    {
      __break(1u);
    }
    __break(1u);
  }
  else
  {
    v25 = (void *)sub_1CA1F07CC();

    swift_willThrow();
  }
}

uint64_t sub_1CA14BB0C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v1 = *(_QWORD *)(v0 + 112);
  v2 = v1;
  if (v1 == 1)
  {
    v2 = sub_1CA14BB68();
    v3 = *(_QWORD *)(v0 + 112);
    *(_QWORD *)(v0 + 112) = v2;
    swift_bridgeObjectRetain();
    sub_1CA151768(v3);
  }
  sub_1CA151A6C(v1);
  return v2;
}

uint64_t sub_1CA14BB68()
{
  id v0;
  void *v1;
  void *v2;
  unsigned int v3;
  void *v4;
  id v5;
  id v6;
  uint64_t v7;
  void *v8;
  id v10;
  _QWORD v11[2];

  v11[1] = *MEMORY[0x1E0C80C00];
  v0 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E0C99DE8]), sel_init);
  v1 = (void *)objc_opt_self();
  v2 = (void *)sub_1CA1F0A00();
  v10 = 0;
  v11[0] = v0;
  v3 = objc_msgSend(v1, sel_scanMatchString_definitions_constraints_forCreation_error_, v2, 0, v11, 0, &v10);

  v4 = (void *)v11[0];
  v5 = v10;
  v6 = v4;

  if (v3)
  {
    if (!v6)
      return 0;
    v11[0] = 0;
    v6 = v6;
    sub_1CA1F0AF0();

    v7 = v11[0];
  }
  else
  {
    v8 = (void *)sub_1CA1F07CC();

    swift_willThrow();
    v7 = MEMORY[0x1E0DEE9D8];
  }

  return v7;
}

uint64_t sub_1CA14BCAC(void *a1)
{
  uint64_t v1;
  id v3;
  void *v4;
  unsigned int v5;
  uint64_t v6;
  uint64_t v7;
  int64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  BOOL v15;
  unint64_t v16;
  int64_t v17;
  __int128 v18;
  uint64_t v19;
  uint64_t v20;
  int64_t v21;
  void *v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char v28;
  unint64_t v29;
  uint64_t v30;
  unint64_t v31;
  id v32;
  void *v33;
  uint64_t v34;
  uint64_t v35;
  int64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  unint64_t v40;
  _QWORD *v41;
  _OWORD *v42;
  unint64_t v43;
  unint64_t v44;
  unint64_t v45;
  int64_t v46;
  char v47;
  char v48;
  unint64_t v49;
  uint64_t v50;
  _BOOL8 v51;
  uint64_t v52;
  char v53;
  unint64_t v54;
  char v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  id v59;
  char isUniquelyReferenced_nonNull_native;
  id v61;
  void *v62;
  void *v63;
  void *v64;
  id v65;
  id v66;
  void *v67;
  id v68;
  uint64_t v69;
  uint64_t v70;
  id v71;
  void *v72;
  BOOL v73;
  uint64_t result;
  uint64_t v75;
  uint64_t v76;
  int64_t v77;
  void *v78;
  id v79;
  unint64_t v80;
  void *v81;
  uint64_t v82;
  uint64_t v83;
  int64_t v84;
  unint64_t v85;
  uint64_t v86;
  int64_t v87;
  _OWORD v88[2];
  _QWORD v89[5];
  _OWORD v90[2];
  _OWORD v91[2];
  _BYTE v92[32];
  __int128 v93;
  __int128 v94;
  uint64_t v95;
  _OWORD v96[2];
  _OWORD v97[2];
  uint64_t v98;
  _OWORD v99[2];
  _OWORD v100[2];
  uint64_t v101;
  _OWORD v102[2];
  _OWORD v103[2];
  uint64_t v104;
  _OWORD v105[2];
  uint64_t v106;

  v106 = *MEMORY[0x1E0C80C00];
  v79 = *(id *)(v1 + 16);
  v3 = objc_msgSend(v79, sel_concreteGraph);
  if (!v3)
    goto LABEL_112;
  v4 = v3;
  v5 = objc_msgSend(v3, sel_hasPendingRead);

  if (!v5)
    goto LABEL_110;
  v6 = sub_1CA14B720();
  v7 = v6;
  v8 = 0;
  v9 = v6 + 64;
  v10 = 1 << *(_BYTE *)(v6 + 32);
  if (v10 < 64)
    v11 = ~(-1 << v10);
  else
    v11 = -1;
  v12 = v11 & *(_QWORD *)(v6 + 64);
  v13 = (unint64_t)(v10 + 63) >> 6;
  v83 = v6;
  while (1)
  {
    while (1)
    {
      while (1)
      {
        while (1)
        {
          if (v12)
          {
            v86 = (v12 - 1) & v12;
            v14 = __clz(__rbit64(v12)) | (v8 << 6);
          }
          else
          {
            v15 = __OFADD__(v8++, 1);
            if (v15)
              goto LABEL_107;
            if (v8 >= v13)
              goto LABEL_100;
            v16 = *(_QWORD *)(v9 + 8 * v8);
            if (!v16)
            {
              v17 = v8 + 1;
              if (v8 + 1 >= v13)
                goto LABEL_100;
              v16 = *(_QWORD *)(v9 + 8 * v17);
              if (!v16)
              {
                v17 = v8 + 2;
                if (v8 + 2 >= v13)
                  goto LABEL_100;
                v16 = *(_QWORD *)(v9 + 8 * v17);
                if (!v16)
                {
                  v17 = v8 + 3;
                  if (v8 + 3 >= v13)
                    goto LABEL_100;
                  v16 = *(_QWORD *)(v9 + 8 * v17);
                  if (!v16)
                  {
                    while (1)
                    {
                      v8 = v17 + 1;
                      if (__OFADD__(v17, 1))
                        goto LABEL_109;
                      if (v8 >= v13)
                        break;
                      v16 = *(_QWORD *)(v9 + 8 * v8);
                      ++v17;
                      if (v16)
                        goto LABEL_20;
                    }
LABEL_100:
                    swift_release();
                    return 0;
                  }
                }
              }
              v8 = v17;
            }
LABEL_20:
            v86 = (v16 - 1) & v16;
            v14 = __clz(__rbit64(v16)) + (v8 << 6);
          }
          sub_1CA0AB948(*(_QWORD *)(v7 + 48) + 40 * v14, (uint64_t)v103);
          sub_1CA0B6A98(*(_QWORD *)(v7 + 56) + 32 * v14, (uint64_t)v105);
          v100[0] = v103[0];
          v100[1] = v103[1];
          v101 = v104;
          sub_1CA0AFCC0(v105, v102);
          sub_1CA0AB948((uint64_t)v100, (uint64_t)v97);
          sub_1CA0B6A98((uint64_t)v102, (uint64_t)v99);
          if ((swift_dynamicCast() & 1) != 0)
            break;
          sub_1CA0B6AD4((uint64_t)v100, &qword_1EF93A398);
          __swift_destroy_boxed_opaque_existential_0((uint64_t)v99);
          v12 = v86;
        }
        v18 = v93;
        __swift_destroy_boxed_opaque_existential_0((uint64_t)v99);
        sub_1CA0AB948((uint64_t)v100, (uint64_t)v97);
        sub_1CA0B6A98((uint64_t)v102, (uint64_t)v99);
        v19 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_1EF93A3A0);
        if ((swift_dynamicCast() & 1) != 0)
          break;
        swift_bridgeObjectRelease();
        sub_1CA0B6AD4((uint64_t)v100, &qword_1EF93A398);
        sub_1CA0AB984((uint64_t)v97);
        v12 = v86;
      }
      v20 = v9;
      v21 = v13;
      v82 = v19;
      v22 = a1;
      v23 = v93;
      sub_1CA0AB984((uint64_t)v97);
      v24 = HIBYTE(*((_QWORD *)&v18 + 1)) & 0xFLL;
      if ((*((_QWORD *)&v18 + 1) & 0x2000000000000000) == 0)
        v24 = v18 & 0xFFFFFFFFFFFFLL;
      if (!v24)
      {
        sub_1CA0B6AD4((uint64_t)v100, &qword_1EF93A398);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        v12 = v86;
        a1 = v22;
        goto LABEL_37;
      }
      v85 = v23;
      v84 = v8;
      swift_bridgeObjectRetain();
      v25 = sub_1CA1F0A60();
      v27 = v26;
      swift_bridgeObjectRelease();
      if (v25 != 35 || v27 != 0xE100000000000000)
        break;
      swift_bridgeObjectRelease();
      a1 = v22;
LABEL_36:
      sub_1CA0B6AD4((uint64_t)v100, &qword_1EF93A398);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      v8 = v84;
      v12 = v86;
LABEL_37:
      v13 = v21;
      v9 = v20;
      v7 = v83;
    }
    v28 = sub_1CA1F12E8();
    swift_bridgeObjectRelease();
    v29 = v23;
    a1 = v22;
    if ((v28 & 1) != 0)
      goto LABEL_36;
    v13 = v21;
    if (v85 >> 62)
    {
      swift_bridgeObjectRetain();
      v30 = sub_1CA1F1234();
      swift_bridgeObjectRelease();
    }
    else
    {
      v30 = *(_QWORD *)((v29 & 0xFFFFFFFFFFFFF8) + 0x10);
    }
    v9 = v20;
    v7 = v83;
    v8 = v84;
    if (v30)
      break;
LABEL_98:
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    sub_1CA0B6AD4((uint64_t)v100, &qword_1EF93A398);
    v12 = v86;
  }
  v31 = 0;
  v77 = v13;
  v78 = a1;
  v75 = v9;
  v76 = v30;
  while (2)
  {
    if ((v85 & 0xC000000000000001) != 0)
    {
      v32 = (id)MEMORY[0x1CAA4A7A4](v31, v85);
    }
    else
    {
      if (v31 >= *(_QWORD *)((v85 & 0xFFFFFFFFFFFFFF8) + 0x10))
        goto LABEL_108;
      v32 = *(id *)(v85 + 32 + 8 * v31);
    }
    v33 = v32;
    v15 = __OFADD__(v31++, 1);
    if (v15)
      goto LABEL_106;
    if (!objc_msgSend(a1, sel_matchesNode_includingProperties_, v32, 1))
    {

      goto LABEL_43;
    }
    v80 = v31;
    v81 = v33;
    v34 = sub_1CA14B720();
    v35 = v34;
    v36 = 0;
    v37 = v34 + 64;
    v38 = 1 << *(_BYTE *)(v34 + 32);
    if (v38 < 64)
      v39 = ~(-1 << v38);
    else
      v39 = -1;
    v40 = v39 & *(_QWORD *)(v34 + 64);
    v87 = (unint64_t)(v38 + 63) >> 6;
    v41 = (_QWORD *)MEMORY[0x1E0DEE9E0];
LABEL_56:
    if (v40)
    {
      v43 = __clz(__rbit64(v40));
      v40 &= v40 - 1;
      v44 = v43 | (v36 << 6);
    }
    else
    {
      v15 = __OFADD__(v36++, 1);
      if (v15)
        goto LABEL_104;
      if (v36 >= v87)
      {
LABEL_84:
        a1 = v78;
        swift_release();
        v93 = v18;
        swift_bridgeObjectRetain();
        sub_1CA1F1018();
        __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_1ED852A58);
        v58 = swift_allocObject();
        *(_OWORD *)(v58 + 16) = xmmword_1CA1F9520;
        *(_QWORD *)(v58 + 32) = v78;
        *(_QWORD *)&v93 = v58;
        sub_1CA1F0B14();
        *((_QWORD *)&v94 + 1) = v82;
        sub_1CA0AFCC0(&v93, v91);
        v59 = v78;
        isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
        v89[0] = v41;
        sub_1CA0AE158(v91, (uint64_t)v97, isUniquelyReferenced_nonNull_native);
        swift_bridgeObjectRelease();
        sub_1CA0AB984((uint64_t)v97);
        v61 = objc_msgSend(v79, sel_concreteGraph);
        if (!v61)
          goto LABEL_111;
        v62 = v61;
        v63 = (void *)sub_1CA1F08BC();
        swift_bridgeObjectRelease();
        v7 = v83;
        v9 = v75;
        v13 = v77;
        if (sub_1CA14BB0C())
        {
          v64 = (void *)sub_1CA1F0AE4();
          swift_bridgeObjectRelease();
        }
        else
        {
          v64 = 0;
        }
        v31 = v80;
        *(_QWORD *)&v97[0] = 0;
        v65 = objc_msgSend(v62, sel_matchWithDefinitions_constraints_error_, v63, v64, v97);

        if (!v65)
        {
          v71 = *(id *)&v97[0];
          v72 = (void *)sub_1CA1F07CC();

          swift_willThrow();
LABEL_94:
          v8 = v84;
          v30 = v76;
          goto LABEL_43;
        }
        v66 = *(id *)&v97[0];
        v67 = (void *)sub_1CA1F0A00();
        v68 = objc_msgSend(v65, sel_nodesForName_, v67);

        if (!v68)
        {

          goto LABEL_94;
        }
        sub_1CA0AB910(0, (unint64_t *)&qword_1EF93A320);
        sub_1CA0C0614();
        v69 = sub_1CA1F0C94();

        if ((v69 & 0xC000000000000001) != 0)
          v70 = sub_1CA1F0FA0();
        else
          v70 = *(_QWORD *)(v69 + 16);
        swift_bridgeObjectRelease();

        v73 = v70 < 1;
        v8 = v84;
        v30 = v76;
        if (!v73)
        {
LABEL_102:
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          sub_1CA0B6AD4((uint64_t)v100, &qword_1EF93A398);
          swift_release();
          return 1;
        }
LABEL_43:
        if (v31 == v30)
          goto LABEL_98;
        continue;
      }
      v45 = *(_QWORD *)(v37 + 8 * v36);
      if (!v45)
      {
        v46 = v36 + 1;
        if (v36 + 1 >= v87)
          goto LABEL_84;
        v45 = *(_QWORD *)(v37 + 8 * v46);
        if (!v45)
        {
          v46 = v36 + 2;
          if (v36 + 2 >= v87)
            goto LABEL_84;
          v45 = *(_QWORD *)(v37 + 8 * v46);
          if (!v45)
          {
            v46 = v36 + 3;
            if (v36 + 3 >= v87)
              goto LABEL_84;
            v45 = *(_QWORD *)(v37 + 8 * v46);
            if (!v45)
            {
              while (1)
              {
                v36 = v46 + 1;
                if (__OFADD__(v46, 1))
                  goto LABEL_105;
                if (v36 >= v87)
                  goto LABEL_84;
                v45 = *(_QWORD *)(v37 + 8 * v36);
                ++v46;
                if (v45)
                  goto LABEL_68;
              }
            }
          }
        }
        v36 = v46;
      }
LABEL_68:
      v40 = (v45 - 1) & v45;
      v44 = __clz(__rbit64(v45)) + (v36 << 6);
    }
    break;
  }
  sub_1CA0AB948(*(_QWORD *)(v35 + 48) + 40 * v44, (uint64_t)v97);
  sub_1CA0B6A98(*(_QWORD *)(v35 + 56) + 32 * v44, (uint64_t)v99);
  v93 = v97[0];
  v94 = v97[1];
  v95 = v98;
  sub_1CA0AFCC0(v99, v96);
  sub_1CA0AB948((uint64_t)&v93, (uint64_t)v91);
  sub_1CA0B6A98((uint64_t)v96, (uint64_t)v92);
  sub_1CA0AB948((uint64_t)&v93, (uint64_t)v89);
  sub_1CA0B6A98((uint64_t)v96, (uint64_t)v90);
  sub_1CA0AFCC0(v90, v88);
  v47 = swift_isUniquelyReferenced_nonNull_native();
  v49 = sub_1CA0AA444((uint64_t)v91);
  v50 = v41[2];
  v51 = (v48 & 1) == 0;
  v52 = v50 + v51;
  if (__OFADD__(v50, v51))
  {
    __break(1u);
    goto LABEL_102;
  }
  v53 = v48;
  if (v41[3] >= v52)
  {
    if ((v47 & 1) != 0)
    {
      if ((v48 & 1) == 0)
        goto LABEL_76;
    }
    else
    {
      sub_1CA0EF760();
      if ((v53 & 1) == 0)
        goto LABEL_76;
    }
    goto LABEL_54;
  }
  sub_1CA0EB854(v52, v47);
  v54 = sub_1CA0AA444((uint64_t)v91);
  if ((v53 & 1) == (v55 & 1))
  {
    v49 = v54;
    if ((v53 & 1) == 0)
    {
LABEL_76:
      v41[(v49 >> 6) + 8] |= 1 << v49;
      sub_1CA0AB948((uint64_t)v91, v41[6] + 40 * v49);
      sub_1CA0AFCC0(v88, (_OWORD *)(v41[7] + 32 * v49));
      v56 = v41[2];
      v15 = __OFADD__(v56, 1);
      v57 = v56 + 1;
      if (v15)
      {
        __break(1u);
LABEL_104:
        __break(1u);
LABEL_105:
        __break(1u);
LABEL_106:
        __break(1u);
LABEL_107:
        __break(1u);
LABEL_108:
        __break(1u);
LABEL_109:
        __break(1u);
LABEL_110:
        __break(1u);
LABEL_111:
        __break(1u);
LABEL_112:
        __break(1u);
      }
      v41[2] = v57;
      goto LABEL_55;
    }
LABEL_54:
    v42 = (_OWORD *)(v41[7] + 32 * v49);
    __swift_destroy_boxed_opaque_existential_0((uint64_t)v42);
    sub_1CA0AFCC0(v88, v42);
LABEL_55:
    swift_bridgeObjectRelease();
    sub_1CA0AB984((uint64_t)v91);
    sub_1CA0B6AD4((uint64_t)&v93, &qword_1EF93A398);
    sub_1CA0AB984((uint64_t)v89);
    __swift_destroy_boxed_opaque_existential_0((uint64_t)v92);
    goto LABEL_56;
  }
  result = sub_1CA1F1360();
  __break(1u);
  return result;
}

_QWORD *sub_1CA14C7E0()
{
  uint64_t v0;
  id v1;
  void *v2;
  uint64_t v3;
  void *v4;
  void *v5;
  id v6;
  id v7;
  uint64_t v8;
  uint64_t v9;
  int64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  int64_t v17;
  unint64_t v18;
  int64_t v19;
  __int128 v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char v25;
  void *v26;
  id v27;
  uint64_t v28;
  id v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  _QWORD *v33;
  unint64_t v34;
  unint64_t v35;
  _QWORD *v36;
  __int128 v37;
  __int128 v38;
  id v40;
  void *v41;
  void *v42;
  void *v43;
  uint64_t v44;
  id v45;
  id v46;
  uint64_t v47;
  _QWORD *v48;
  uint64_t v49;
  int64_t v50;
  __int128 v51;
  uint64_t v52;
  _OWORD v53[2];
  uint64_t v54;
  _BYTE v55[32];
  _OWORD v56[2];
  uint64_t v57;
  _OWORD v58[2];
  _OWORD v59[2];
  uint64_t v60;
  _OWORD v61[2];
  uint64_t v62;

  v62 = *MEMORY[0x1E0C80C00];
  v1 = objc_msgSend(*(id *)(v0 + 16), sel_concreteGraph);
  if (!v1)
    goto LABEL_49;
  v2 = v1;
  v3 = sub_1CA1F0A00();
  if (!*(_QWORD *)(v0 + 96))
LABEL_50:
    __break(1u);
  v4 = (void *)v3;
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EF93A3B0);
  v5 = (void *)sub_1CA1F08BC();
  *(_QWORD *)&v59[0] = 0;
  v6 = objc_msgSend(v2, sel_matchWithVisualFormat_elements_error_, v4, v5, v59);

  if (v6)
  {
    v7 = *(id *)&v59[0];
    v8 = sub_1CA14B720();
    v9 = v8;
    v10 = 0;
    v11 = v8 + 64;
    v12 = 1 << *(_BYTE *)(v8 + 32);
    v13 = -1;
    if (v12 < 64)
      v13 = ~(-1 << v12);
    v14 = v13 & *(_QWORD *)(v8 + 64);
    v50 = (unint64_t)(v12 + 63) >> 6;
    v48 = (_QWORD *)MEMORY[0x1E0DEE9D8];
    v49 = v8 + 64;
    while (1)
    {
      while (1)
      {
        while (1)
        {
          while (1)
          {
            if (v14)
            {
              v15 = __clz(__rbit64(v14));
              v14 &= v14 - 1;
              v16 = v15 | (v10 << 6);
            }
            else
            {
              v17 = v10 + 1;
              if (__OFADD__(v10, 1))
              {
                __break(1u);
                goto LABEL_48;
              }
              if (v17 >= v50)
                goto LABEL_45;
              v18 = *(_QWORD *)(v11 + 8 * v17);
              ++v10;
              if (!v18)
              {
                v10 = v17 + 1;
                if (v17 + 1 >= v50)
                  goto LABEL_45;
                v18 = *(_QWORD *)(v11 + 8 * v10);
                if (!v18)
                {
                  v10 = v17 + 2;
                  if (v17 + 2 >= v50)
                    goto LABEL_45;
                  v18 = *(_QWORD *)(v11 + 8 * v10);
                  if (!v18)
                  {
                    v19 = v17 + 3;
                    if (v19 >= v50)
                    {
LABEL_45:

                      swift_release();
                      return v48;
                    }
                    v18 = *(_QWORD *)(v11 + 8 * v19);
                    if (!v18)
                    {
                      while (1)
                      {
                        v10 = v19 + 1;
                        if (__OFADD__(v19, 1))
                          break;
                        if (v10 >= v50)
                          goto LABEL_45;
                        v18 = *(_QWORD *)(v11 + 8 * v10);
                        ++v19;
                        if (v18)
                          goto LABEL_23;
                      }
LABEL_48:
                      __break(1u);
LABEL_49:
                      __break(1u);
                      goto LABEL_50;
                    }
                    v10 = v19;
                  }
                }
              }
LABEL_23:
              v14 = (v18 - 1) & v18;
              v16 = __clz(__rbit64(v18)) + (v10 << 6);
            }
            sub_1CA0AB948(*(_QWORD *)(v9 + 48) + 40 * v16, (uint64_t)v59);
            sub_1CA0B6A98(*(_QWORD *)(v9 + 56) + 32 * v16, (uint64_t)v61);
            v56[0] = v59[0];
            v56[1] = v59[1];
            v57 = v60;
            sub_1CA0AFCC0(v61, v58);
            sub_1CA0AB948((uint64_t)v56, (uint64_t)v53);
            sub_1CA0B6A98((uint64_t)v58, (uint64_t)v55);
            if ((swift_dynamicCast() & 1) != 0)
              break;
            sub_1CA0B6AD4((uint64_t)v56, &qword_1EF93A398);
            __swift_destroy_boxed_opaque_existential_0((uint64_t)v55);
          }
          v20 = v51;
          __swift_destroy_boxed_opaque_existential_0((uint64_t)v55);
          sub_1CA0AB948((uint64_t)v56, (uint64_t)v53);
          sub_1CA0B6A98((uint64_t)v58, (uint64_t)v55);
          __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_1EF93A3A0);
          if ((swift_dynamicCast() & 1) != 0)
            break;
          swift_bridgeObjectRelease();
          sub_1CA0B6AD4((uint64_t)v56, &qword_1EF93A398);
          sub_1CA0AB984((uint64_t)v53);
        }
        swift_bridgeObjectRelease();
        sub_1CA0AB984((uint64_t)v53);
        v21 = HIBYTE(*((_QWORD *)&v20 + 1)) & 0xFLL;
        if ((*((_QWORD *)&v20 + 1) & 0x2000000000000000) == 0)
          v21 = v20 & 0xFFFFFFFFFFFFLL;
        if (v21)
          break;
        sub_1CA0B6AD4((uint64_t)v56, &qword_1EF93A398);
        swift_bridgeObjectRelease();
      }
      swift_bridgeObjectRetain();
      v22 = sub_1CA1F0A60();
      v24 = v23;
      swift_bridgeObjectRelease();
      if (v22 == 35 && v24 == 0xE100000000000000)
        break;
      v25 = sub_1CA1F12E8();
      swift_bridgeObjectRelease();
      if ((v25 & 1) != 0)
        goto LABEL_35;
      v26 = (void *)sub_1CA1F0A00();
      v27 = objc_msgSend(v6, sel_nodesForName_, v26);

      if (v27)
      {
        sub_1CA0AB910(0, (unint64_t *)&qword_1EF93A320);
        sub_1CA0C0614();
        v47 = sub_1CA1F0C94();

        v52 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_1EF93A360);
        v28 = swift_allocObject();
        *(_QWORD *)&v51 = v28;
        v45 = (id)objc_opt_self();
        v42 = (void *)sub_1CA1F0A00();
        v43 = (void *)sub_1CA1F08BC();
        v29 = objc_msgSend(v45, sel_visualStringWithFormat_elements_, v42, v43);

        v30 = sub_1CA1F0A0C();
        v44 = v31;
        v46 = (id)v30;

        *(_QWORD *)(v28 + 16) = v46;
        *(_QWORD *)(v28 + 24) = v44;
        *(_OWORD *)(v28 + 32) = v20;
        v32 = sub_1CA0B57C8(v47);
        swift_bridgeObjectRelease();
        sub_1CA0AFCC0(&v51, v53);
        v54 = v32;
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) != 0)
          v33 = v48;
        else
          v33 = sub_1CA0E5F04(0, v48[2] + 1, 1, v48);
        v35 = v33[2];
        v34 = v33[3];
        v11 = v49;
        if (v35 >= v34 >> 1)
          v33 = sub_1CA0E5F04((_QWORD *)(v34 > 1), v35 + 1, 1, v33);
        v33[2] = v35 + 1;
        v48 = v33;
        v36 = &v33[5 * v35];
        v37 = v53[0];
        v38 = v53[1];
        v36[8] = v54;
        *((_OWORD *)v36 + 2) = v37;
        *((_OWORD *)v36 + 3) = v38;
        sub_1CA0B6AD4((uint64_t)v56, &qword_1EF93A398);
      }
      else
      {
        swift_bridgeObjectRelease();
        sub_1CA0B6AD4((uint64_t)v56, &qword_1EF93A398);
LABEL_36:
        v11 = v49;
      }
    }
    swift_bridgeObjectRelease();
LABEL_35:
    sub_1CA0B6AD4((uint64_t)v56, &qword_1EF93A398);
    swift_bridgeObjectRelease();
    goto LABEL_36;
  }
  v40 = *(id *)&v59[0];
  v41 = (void *)sub_1CA1F07CC();

  swift_willThrow();
  return (_QWORD *)MEMORY[0x1E0DEE9D8];
}

uint64_t sub_1CA14CE8C()
{
  uint64_t result;
  uint64_t v1;
  int64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  int64_t v7;
  unint64_t v8;
  unint64_t v9;
  int64_t v10;
  unint64_t v11;
  int64_t v12;
  __int128 v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char v18;
  uint64_t v19;
  void *v20;
  id v21;
  void *v22;
  id v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;
  _QWORD *v28;
  __int128 v29;
  __int128 v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  _QWORD *v34;
  int64_t v35;
  uint64_t v36;
  __int128 v37;
  uint64_t v38;
  _OWORD v39[2];
  uint64_t v40;
  _BYTE v41[32];
  _OWORD v42[2];
  uint64_t v43;
  _OWORD v44[2];
  _OWORD v45[2];
  uint64_t v46;
  _OWORD v47[2];

  result = sub_1CA14B720();
  v1 = result;
  v2 = 0;
  v3 = result + 64;
  v4 = 1 << *(_BYTE *)(result + 32);
  v5 = -1;
  if (v4 < 64)
    v5 = ~(-1 << v4);
  v6 = v5 & *(_QWORD *)(result + 64);
  v7 = (unint64_t)(v4 + 63) >> 6;
  v34 = (_QWORD *)MEMORY[0x1E0DEE9D8];
  v36 = result + 64;
  v35 = v7;
  while (v6)
  {
    v8 = __clz(__rbit64(v6));
    v6 &= v6 - 1;
    v9 = v8 | (v2 << 6);
LABEL_21:
    sub_1CA0AB948(*(_QWORD *)(v1 + 48) + 40 * v9, (uint64_t)v45);
    sub_1CA0B6A98(*(_QWORD *)(v1 + 56) + 32 * v9, (uint64_t)v47);
    v42[0] = v45[0];
    v42[1] = v45[1];
    v43 = v46;
    sub_1CA0AFCC0(v47, v44);
    sub_1CA0AB948((uint64_t)v42, (uint64_t)v39);
    sub_1CA0B6A98((uint64_t)v44, (uint64_t)v41);
    if ((swift_dynamicCast() & 1) != 0)
    {
      v13 = v37;
      __swift_destroy_boxed_opaque_existential_0((uint64_t)v41);
      sub_1CA0AB948((uint64_t)v42, (uint64_t)v39);
      sub_1CA0B6A98((uint64_t)v44, (uint64_t)v41);
      __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_1EF93A3A0);
      if ((swift_dynamicCast() & 1) != 0)
      {
        swift_bridgeObjectRelease();
        sub_1CA0AB984((uint64_t)v39);
        v14 = HIBYTE(*((_QWORD *)&v13 + 1)) & 0xFLL;
        if ((*((_QWORD *)&v13 + 1) & 0x2000000000000000) == 0)
          v14 = v13 & 0xFFFFFFFFFFFFLL;
        if (v14)
        {
          swift_bridgeObjectRetain();
          v15 = sub_1CA1F0A60();
          v17 = v16;
          swift_bridgeObjectRelease();
          if (v15 == 35 && v17 == 0xE100000000000000)
          {
            swift_bridgeObjectRelease();
            goto LABEL_32;
          }
          v18 = sub_1CA1F12E8();
          swift_bridgeObjectRelease();
          if ((v18 & 1) != 0)
          {
LABEL_32:
            sub_1CA0B6AD4((uint64_t)v42, &qword_1EF93A398);
            result = swift_bridgeObjectRelease();
            v7 = v35;
            v3 = v36;
          }
          else
          {
            v38 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_1EF93A360);
            v32 = swift_allocObject();
            *(_QWORD *)&v37 = v32;
            v19 = sub_1CA1F0A00();
            v20 = *(void **)(v33 + 96);
            if (v20)
            {
              __swift_instantiateConcreteTypeFromMangledName(&qword_1EF93A3B0);
              v20 = (void *)sub_1CA1F08BC();
            }
            v21 = objc_msgSend((id)objc_opt_self(), sel_visualStringWithFormat_elements_, v19, v20);
            v22 = (void *)v19;
            v23 = v21;

            v24 = sub_1CA1F0A0C();
            v31 = v25;

            *(_QWORD *)(v32 + 16) = v24;
            *(_QWORD *)(v32 + 24) = v31;
            *(_OWORD *)(v32 + 32) = v13;
            *(_QWORD *)&v39[0] = v33;
            sub_1CA0AFCC0(&v37, (_OWORD *)((char *)v39 + 8));
            swift_retain();
            if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
              v34 = sub_1CA0E5CD8(0, v34[2] + 1, 1, v34);
            v7 = v35;
            v27 = v34[2];
            v26 = v34[3];
            if (v27 >= v26 >> 1)
              v34 = sub_1CA0E5CD8((_QWORD *)(v26 > 1), v27 + 1, 1, v34);
            v34[2] = v27 + 1;
            v28 = &v34[5 * v27];
            v29 = v39[0];
            v30 = v39[1];
            v28[8] = v40;
            *((_OWORD *)v28 + 2) = v29;
            *((_OWORD *)v28 + 3) = v30;
            result = sub_1CA0B6AD4((uint64_t)v42, &qword_1EF93A398);
            v3 = v36;
          }
        }
        else
        {
          sub_1CA0B6AD4((uint64_t)v42, &qword_1EF93A398);
          result = swift_bridgeObjectRelease();
        }
      }
      else
      {
        swift_bridgeObjectRelease();
        sub_1CA0B6AD4((uint64_t)v42, &qword_1EF93A398);
        result = sub_1CA0AB984((uint64_t)v39);
      }
    }
    else
    {
      sub_1CA0B6AD4((uint64_t)v42, &qword_1EF93A398);
      result = __swift_destroy_boxed_opaque_existential_0((uint64_t)v41);
    }
  }
  v10 = v2 + 1;
  if (__OFADD__(v2, 1))
  {
    __break(1u);
    goto LABEL_42;
  }
  if (v10 >= v7)
    goto LABEL_40;
  v11 = *(_QWORD *)(v3 + 8 * v10);
  ++v2;
  if (v11)
    goto LABEL_20;
  v2 = v10 + 1;
  if (v10 + 1 >= v7)
    goto LABEL_40;
  v11 = *(_QWORD *)(v3 + 8 * v2);
  if (v11)
    goto LABEL_20;
  v2 = v10 + 2;
  if (v10 + 2 >= v7)
    goto LABEL_40;
  v11 = *(_QWORD *)(v3 + 8 * v2);
  if (v11)
  {
LABEL_20:
    v6 = (v11 - 1) & v11;
    v9 = __clz(__rbit64(v11)) + (v2 << 6);
    goto LABEL_21;
  }
  v12 = v10 + 3;
  if (v12 >= v7)
  {
LABEL_40:
    swift_release();
    return (uint64_t)v34;
  }
  v11 = *(_QWORD *)(v3 + 8 * v12);
  if (v11)
  {
    v2 = v12;
    goto LABEL_20;
  }
  while (1)
  {
    v2 = v12 + 1;
    if (__OFADD__(v12, 1))
      break;
    if (v2 >= v7)
      goto LABEL_40;
    v11 = *(_QWORD *)(v3 + 8 * v2);
    ++v12;
    if (v11)
      goto LABEL_20;
  }
LABEL_42:
  __break(1u);
  return result;
}

void sub_1CA14D370()
{
  sub_1CA14D388();
}

void sub_1CA14D388()
{
  _swift_stdlib_reportUnimplementedInitializer();
  __break(1u);
}

uint64_t sub_1CA14D3B0()
{
  uint64_t v0;

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return sub_1CA151768(*(_QWORD *)(v0 + 112));
}

uint64_t MAQuerySlice.deinit()
{
  uint64_t v0;

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_1CA0AAE34(*(_QWORD *)(v0 + 48));
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_1CA151768(*(_QWORD *)(v0 + 112));
  return v0;
}

uint64_t MAQuerySlice.__deallocating_deinit()
{
  MAQuerySlice.deinit();
  return swift_deallocClassInstance();
}

unint64_t MASlice.similarityMatrix(distance:directed:options:identity:)(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  id *v4;
  uint64_t (*v7)(uint64_t, uint64_t);
  uint64_t v8;
  unint64_t result;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  void *v20;
  uint64_t v21;
  id v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  int64_t v26;
  uint64_t v27;
  void *v28;
  id v29;
  id v30;
  uint64_t v31;
  int64_t v32;
  int64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  char v38;
  uint64_t v39;
  uint64_t v40;
  unint64_t v41;
  uint64_t v42;
  unint64_t v43;
  uint64_t v44;
  BOOL v45;
  unint64_t v46;
  uint64_t v47;
  uint64_t v48;
  unint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  unint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  BOOL v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  unint64_t v67;

  v7 = *(uint64_t (**)(uint64_t, uint64_t))(a1 + 96);
  swift_bridgeObjectRetain();
  v8 = v7(a2, a3);
  result = (unint64_t)objc_msgSend(v4[2], sel_concreteGraph);
  if (result)
  {
    v10 = (void *)result;
    (*(void (**)(void))(*(_QWORD *)v8 + 104))();

    v67 = MEMORY[0x1E0DEE9D8];
    v11 = (*((uint64_t (**)(void))*v4 + 27))();
    sub_1CA0B2380(v11);
    v12 = v67;
    v13 = v67 >> 62;
    if (v67 >> 62)
      goto LABEL_93;
    v14 = *(_QWORD *)((v67 & 0xFFFFFFFFFFFFF8) + 0x10);
    v15 = v14;
LABEL_4:
    result = v15 * v14;
    if ((unsigned __int128)(v15 * (__int128)v14) >> 64 == (v15 * v14) >> 63)
    {
      v47 = v15;
      v64 = v8;
      v16 = (_QWORD *)sub_1CA0B4464(result, 0.0);
      v65 = v12;
      v63 = v14;
      if ((a2 & 1) != 0)
      {
        if (v13)
        {
          v61 = v12 & 0xFFFFFFFFFFFFFF8;
          swift_bridgeObjectRetain();
          v19 = sub_1CA1F1234();
          if (v19)
          {
            v8 = v19;
            swift_bridgeObjectRetain();
            v17 = sub_1CA1F1234();
            swift_bridgeObjectRelease();
LABEL_14:
            a2 = 0;
            v58 = v8;
            v59 = v12 + 32;
            do
            {
              if ((unint64_t)a2 >= *(_QWORD *)(v61 + 16))
                goto LABEL_85;
              if (v17)
              {
                v20 = *(void **)(v59 + 8 * a2);
                v21 = sub_1CA0AB910(0, (unint64_t *)&qword_1EF93A320);
                if (v17 < 1)
                  goto LABEL_89;
                v13 = v21;
                v8 = a2 * v14;
                v18 = (unsigned __int128)(a2 * (__int128)v14) >> 64 != (a2 * v14) >> 63;
                swift_bridgeObjectRetain();
                v22 = v20;
                v14 = 0;
                while (1)
                {
                  v12 = (uint64_t)*(id *)(v12 + 8 * v14 + 32);
                  if ((sub_1CA1F0E68() & 1) == 0 || (a4 & 1) != 0)
                  {
                    (*(void (**)(id, uint64_t))(*(_QWORD *)v64 + 112))(v22, v12);
                    if ((v18 & 1) != 0)
                    {
LABEL_75:
                      __break(1u);
LABEL_76:
                      __break(1u);
LABEL_77:
                      __break(1u);
LABEL_78:
                      __break(1u);
LABEL_79:
                      __break(1u);
LABEL_80:
                      __break(1u);
LABEL_81:
                      __break(1u);
LABEL_82:
                      __break(1u);
LABEL_83:
                      __break(1u);
LABEL_84:
                      __break(1u);
LABEL_85:
                      __break(1u);
LABEL_86:
                      __break(1u);
LABEL_87:
                      __break(1u);
LABEL_88:
                      __break(1u);
LABEL_89:
                      __break(1u);
LABEL_90:
                      __break(1u);
LABEL_91:
                      __break(1u);
LABEL_92:
                      __break(1u);
LABEL_93:
                      swift_bridgeObjectRetain();
                      v15 = sub_1CA1F1234();
                      v14 = sub_1CA1F1234();
                      swift_bridgeObjectRelease();
                      goto LABEL_4;
                    }
                    v24 = v8 + v14;
                    if (__OFADD__(v8, v14))
                      goto LABEL_76;
                    v25 = v23;
                    if ((swift_isUniquelyReferenced_nonNull_native() & 1) != 0)
                    {
                      if ((v24 & 0x8000000000000000) != 0)
                        goto LABEL_32;
                    }
                    else
                    {
                      v16 = sub_1CA0B6058(v16);
                      if ((v24 & 0x8000000000000000) != 0)
                      {
LABEL_32:
                        __break(1u);
                        goto LABEL_33;
                      }
                    }
                    if (v24 >= v16[2])
                      goto LABEL_77;
                    v16[v24 + 4] = v25;
                  }
                  ++v14;

                  v12 = v65;
                  if (v17 == v14)
                  {

                    swift_bridgeObjectRelease();
                    v14 = v63;
                    v8 = v58;
                    break;
                  }
                }
              }
              ++a2;
            }
            while (a2 != v8);
          }
        }
        else
        {
          v61 = v12 & 0xFFFFFFFFFFFFFF8;
          v8 = *(_QWORD *)((v12 & 0xFFFFFFFFFFFFFF8) + 0x10);
          swift_bridgeObjectRetain();
          if (v8)
          {
            v17 = v8;
            goto LABEL_14;
          }
        }
LABEL_73:
        swift_bridgeObjectRelease();
        swift_release();
        type metadata accessor for MASquareMatrixRepresentation();
        result = swift_allocObject();
        *(_QWORD *)(result + 16) = v47;
        *(_QWORD *)(result + 24) = v14;
        *(_QWORD *)(result + 32) = v16;
        *(_QWORD *)(result + 40) = v12;
        return result;
      }
      v18 = v12 & 0xFFFFFFFFFFFFFF8;
      if (!v13)
      {
        a2 = *(_QWORD *)((v12 & 0xFFFFFFFFFFFFFF8) + 0x10);
        swift_bridgeObjectRetain();
        if (!a2)
          goto LABEL_73;
        v50 = a2;
LABEL_35:
        v26 = 0;
        v53 = v12 & 0xC000000000000001;
        v54 = v12 + 32;
        if (v12 < 0)
          v8 = v12;
        else
          v8 = v18;
        v51 = (2 * a2) | 1;
        v52 = v18 + 32;
        v55 = a2 + 1;
        v56 = v8;
        v48 = v18;
        v49 = v13;
        v57 = a2;
        while (1)
        {
          v27 = *(_QWORD *)(v18 + 16);
          if (v26 >= (unint64_t)v27)
            goto LABEL_86;
          if (v26 == v55)
            goto LABEL_87;
          v28 = *(void **)(v54 + 8 * v26);
          if (v13)
          {
            swift_bridgeObjectRetain();
            v30 = v28;
            v31 = sub_1CA1F1234();
            swift_bridgeObjectRelease();
            if (v31 < v26)
              goto LABEL_90;
            swift_bridgeObjectRetain();
            v27 = sub_1CA1F1234();
            swift_bridgeObjectRelease();
          }
          else
          {
            v29 = v28;
          }
          if (v27 < a2)
            goto LABEL_88;
          if (v53 && v26 != a2)
          {
            if (v26 >= a2)
              goto LABEL_91;
            sub_1CA0AB910(0, (unint64_t *)&qword_1EF93A320);
            v32 = v26;
            do
            {
              v33 = v32 + 1;
              sub_1CA1F1084();
              v32 = v33;
            }
            while (a2 != v33);
          }
          swift_bridgeObjectRetain();
          a2 = v51;
          v34 = v52;
          v12 = v26;
          if (v13)
          {
            sub_1CA1F1240();
            v34 = v35;
            v12 = v36;
            a2 = v37;
            swift_bridgeObjectRelease();
          }
          v8 = (unint64_t)a2 >> 1;
          if ((unint64_t)a2 >> 1 != v12)
          {
            v38 = sub_1CA0AB910(0, (unint64_t *)&qword_1EF93A320);
            v39 = v8 - v12;
            if (v8 <= v12)
              goto LABEL_92;
            LOBYTE(a2) = v38;
            v13 = 0;
            v60 = v26 * v14;
            v62 = (unsigned __int128)(v26 * (__int128)v14) >> 64 != (v26 * v14) >> 63;
            v8 = v34 + 8 * v12;
            while (!__OFADD__(v13, 1))
            {
              v12 = (uint64_t)*(id *)(v8 + 8 * v13);
              if ((sub_1CA1F0E68() & 1) == 0 || (a4 & 1) != 0)
              {
                (*(void (**)(void *, uint64_t))(*(_QWORD *)v64 + 112))(v28, v12);
                v41 = v13 + v26;
                if (__OFADD__(v13, v26))
                  goto LABEL_78;
                if (v62)
                  goto LABEL_79;
                v14 = v60 + v41;
                if (__OFADD__(v60, v41))
                  goto LABEL_80;
                v42 = v40;
                if ((swift_isUniquelyReferenced_nonNull_native() & 1) != 0)
                {
                  if (v14 < 0)
                    goto LABEL_72;
                }
                else
                {
                  v16 = sub_1CA0B6058(v16);
                  if (v14 < 0)
                  {
LABEL_72:
                    __break(1u);
                    goto LABEL_73;
                  }
                }
                v43 = v16[2];
                if (v14 >= v43)
                  goto LABEL_81;
                v16[v14 + 4] = v42;
                v14 = v63;
                v44 = v41 * v63;
                if ((unsigned __int128)((uint64_t)v41 * (__int128)v63) >> 64 != (uint64_t)(v41 * v63) >> 63)
                  goto LABEL_82;
                v45 = __OFADD__(v44, v26);
                v46 = v44 + v26;
                if (v45)
                  goto LABEL_83;
                if (v46 >= v43)
                  goto LABEL_84;
                v16[v46 + 4] = v42;
              }

              if (v39 == ++v13)
                goto LABEL_39;
            }
            __break(1u);
            goto LABEL_75;
          }
LABEL_39:
          ++v26;

          swift_unknownObjectRelease();
          v13 = v49;
          v12 = v65;
          v18 = v48;
          v8 = v56;
          a2 = v57;
          if (v26 == v50)
            goto LABEL_73;
        }
      }
LABEL_33:
      swift_bridgeObjectRetain();
      v50 = sub_1CA1F1234();
      if (!v50)
        goto LABEL_73;
      swift_bridgeObjectRetain();
      a2 = sub_1CA1F1234();
      result = swift_bridgeObjectRelease();
      if ((a2 & 0x8000000000000000) == 0)
        goto LABEL_35;
    }
    else
    {
      __break(1u);
    }
    __break(1u);
  }
  __break(1u);
  return result;
}

unint64_t sub_1CA14DACC(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  return MASlice.similarityMatrix(distance:directed:options:identity:)(a1, a2, a3, a4);
}

void __swiftcall MASlice.graphRepresentation()(MAGraph *__return_ptr retstr)
{
  uint64_t v1;
  id v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  id v15;
  int64_t v16;
  unint64_t v17;
  uint64_t v18;
  id v19;
  id v20;
  int v21;
  int v22;
  id v23;
  uint64_t v24;
  void *v25;
  double v26;
  id v27;
  id v28;
  id v29;
  char isUniquelyReferenced_nonNull_native;
  void *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  void (*v39)(void *, uint64_t);
  uint64_t v40;
  unint64_t v41;
  uint64_t v42;
  id v43;
  int64_t v44;
  unint64_t v45;
  uint64_t v46;
  _QWORD *v47;
  id v48;
  id v49;
  uint64_t v50;
  void *v51;
  uint64_t v52;
  unint64_t v53;
  int64_t v54;
  int64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  _QWORD aBlock[6];
  _QWORD v61[6];
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  unint64_t v66;

  v2 = objc_msgSend(objc_allocWithZone((Class)MAGraph), sel_init);
  v3 = (*(uint64_t (**)(void))(*(_QWORD *)v1 + 216))();
  v61[0] = MEMORY[0x1E0DEE9E0];
  v59 = v3;
  v53 = v3 & 0xC000000000000001;
  if ((v3 & 0xC000000000000001) != 0)
  {
    swift_bridgeObjectRetain();
    sub_1CA1F0F64();
    sub_1CA0AB910(0, (unint64_t *)&qword_1EF93A320);
    sub_1CA0C0614();
    sub_1CA1F0CC4();
    v4 = v61[1];
    v57 = v61[2];
    v5 = v61[3];
    v6 = v61[4];
    v7 = v61[5];
  }
  else
  {
    v8 = -1 << *(_BYTE *)(v3 + 32);
    v57 = v3 + 56;
    v5 = ~v8;
    v9 = -v8;
    if (v9 < 64)
      v10 = ~(-1 << v9);
    else
      v10 = -1;
    v7 = v10 & *(_QWORD *)(v3 + 56);
    v6 = 0;
    v4 = swift_bridgeObjectRetain();
  }
  v52 = v5;
  v55 = (unint64_t)(v5 + 64) >> 6;
  if (v4 < 0)
    goto LABEL_10;
  while (1)
  {
    if (v7)
    {
      v11 = (v7 - 1) & v7;
      v12 = __clz(__rbit64(v7)) | (v6 << 6);
      v13 = v6;
      goto LABEL_27;
    }
    v16 = v6 + 1;
    if (__OFADD__(v6, 1))
    {
      __break(1u);
LABEL_62:
      __break(1u);
      return;
    }
    if (v16 >= v55)
      goto LABEL_30;
    v17 = *(_QWORD *)(v57 + 8 * v16);
    v13 = v6 + 1;
    if (!v17)
    {
      v13 = v6 + 2;
      if (v6 + 2 >= v55)
        goto LABEL_30;
      v17 = *(_QWORD *)(v57 + 8 * v13);
      if (!v17)
      {
        v13 = v6 + 3;
        if (v6 + 3 >= v55)
          goto LABEL_30;
        v17 = *(_QWORD *)(v57 + 8 * v13);
        if (!v17)
        {
          v13 = v6 + 4;
          if (v6 + 4 >= v55)
            goto LABEL_30;
          v17 = *(_QWORD *)(v57 + 8 * v13);
          if (!v17)
            break;
        }
      }
    }
LABEL_26:
    v11 = (v17 - 1) & v17;
    v12 = __clz(__rbit64(v17)) + (v13 << 6);
LABEL_27:
    v15 = *(id *)(*(_QWORD *)(v4 + 48) + 8 * v12);
    if (!v15)
      goto LABEL_30;
    while (1)
    {
      v19 = objc_msgSend(v15, sel_label, v52);
      v20 = objc_msgSend(v15, sel_domain);
      objc_msgSend(v15, sel_weight);
      v22 = v21;
      v23 = objc_msgSend(v15, sel_propertyDictionary);
      v24 = sub_1CA1F08D4();

      sub_1CA0C2AB0(v24);
      swift_bridgeObjectRelease();
      v25 = (void *)sub_1CA1F08BC();
      swift_bridgeObjectRelease();
      LODWORD(v26) = v22;
      v27 = objc_msgSend(v2, sel_addUniqueNodeWithLabel_domain_weight_properties_didCreate_, v19, v20, v25, 0, v26);

      v28 = objc_msgSend(v15, sel_identifier);
      v29 = v27;
      isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      aBlock[0] = v61[0];
      sub_1CA0AEB94((uint64_t)v29, (unint64_t)v28, isUniquelyReferenced_nonNull_native);

      swift_bridgeObjectRelease();
      v6 = v13;
      v7 = v11;
      if ((v4 & 0x8000000000000000) == 0)
        break;
LABEL_10:
      v14 = sub_1CA1F0FD0();
      if (v14)
      {
        v62 = v14;
        sub_1CA0AB910(0, (unint64_t *)&qword_1EF93A320);
        swift_unknownObjectRetain();
        swift_dynamicCast();
        v15 = (id)aBlock[0];
        swift_unknownObjectRelease();
        v13 = v6;
        v11 = v7;
        if (aBlock[0])
          continue;
      }
      goto LABEL_30;
    }
  }
  v18 = v6 + 5;
  while (v55 != v18)
  {
    v17 = *(_QWORD *)(v57 + 8 * v18++);
    if (v17)
    {
      v13 = v18 - 1;
      goto LABEL_26;
    }
  }
LABEL_30:
  sub_1CA0B6A14();
  if (v53)
  {
    v31 = v2;
    swift_bridgeObjectRetain();
    sub_1CA1F0F64();
    sub_1CA0AB910(0, (unint64_t *)&qword_1EF93A320);
    sub_1CA0C0614();
    sub_1CA1F0CC4();
    v32 = v62;
    v56 = v63;
    v33 = v64;
    v34 = v65;
    v35 = v66;
  }
  else
  {
    v31 = v2;
    v36 = -1 << *(_BYTE *)(v59 + 32);
    v56 = v59 + 56;
    v33 = ~v36;
    v37 = -v36;
    if (v37 < 64)
      v38 = ~(-1 << v37);
    else
      v38 = -1;
    v35 = v38 & *(_QWORD *)(v59 + 56);
    v32 = swift_bridgeObjectRetain();
    v34 = 0;
  }
  v39 = 0;
  v54 = (unint64_t)(v33 + 64) >> 6;
  v58 = v32;
  while (2)
  {
    if (v32 < 0)
    {
      if (!sub_1CA1F0FD0())
        goto LABEL_60;
      sub_1CA0AB910(0, (unint64_t *)&qword_1EF93A320);
      swift_unknownObjectRetain();
      swift_dynamicCast();
      v43 = (id)aBlock[0];
      swift_unknownObjectRelease();
      v42 = v34;
      v40 = v35;
      if (!v43)
        goto LABEL_60;
      goto LABEL_58;
    }
    if (v35)
    {
      v40 = (v35 - 1) & v35;
      v41 = __clz(__rbit64(v35)) | (v34 << 6);
      v42 = v34;
LABEL_57:
      v43 = *(id *)(*(_QWORD *)(v32 + 48) + 8 * v41);
      if (!v43)
        goto LABEL_60;
LABEL_58:
      v47 = (_QWORD *)swift_allocObject();
      v47[2] = v43;
      v47[3] = v59;
      v47[4] = v61;
      v47[5] = v31;
      swift_bridgeObjectRetain();
      v48 = v43;
      v49 = v31;
      sub_1CA0AAE34((uint64_t)v39);
      v50 = swift_allocObject();
      *(_QWORD *)(v50 + 16) = sub_1CA1517AC;
      *(_QWORD *)(v50 + 24) = v47;
      aBlock[4] = sub_1CA0F9E28;
      aBlock[5] = v50;
      aBlock[0] = MEMORY[0x1E0C809B0];
      aBlock[1] = 1107296256;
      aBlock[2] = sub_1CA14E4F0;
      aBlock[3] = &block_descriptor_1;
      v51 = _Block_copy(aBlock);
      swift_retain();
      swift_release();
      objc_msgSend(v48, sel_enumerateOutEdgesUsingBlock_, v51);

      _Block_release(v51);
      LOBYTE(v48) = swift_isEscapingClosureAtFileLocation();
      swift_release();
      v39 = sub_1CA1517AC;
      v34 = v42;
      v35 = v40;
      v32 = v58;
      if ((v48 & 1) != 0)
      {
        __break(1u);
        goto LABEL_60;
      }
      continue;
    }
    break;
  }
  v44 = v34 + 1;
  if (__OFADD__(v34, 1))
    goto LABEL_62;
  if (v44 >= v54)
    goto LABEL_60;
  v45 = *(_QWORD *)(v56 + 8 * v44);
  v42 = v34 + 1;
  if (v45)
    goto LABEL_56;
  v42 = v34 + 2;
  if (v34 + 2 >= v54)
    goto LABEL_60;
  v45 = *(_QWORD *)(v56 + 8 * v42);
  if (v45)
    goto LABEL_56;
  v42 = v34 + 3;
  if (v34 + 3 >= v54)
    goto LABEL_60;
  v45 = *(_QWORD *)(v56 + 8 * v42);
  if (v45)
    goto LABEL_56;
  v42 = v34 + 4;
  if (v34 + 4 >= v54)
    goto LABEL_60;
  v45 = *(_QWORD *)(v56 + 8 * v42);
  if (v45)
  {
LABEL_56:
    v40 = (v45 - 1) & v45;
    v41 = __clz(__rbit64(v45)) + (v42 << 6);
    goto LABEL_57;
  }
  v46 = v34 + 5;
  while (v54 != v46)
  {
    v45 = *(_QWORD *)(v56 + 8 * v46++);
    if (v45)
    {
      v42 = v46 - 1;
      v32 = v58;
      goto LABEL_56;
    }
  }
LABEL_60:
  sub_1CA0B6A14();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_1CA0AAE34((uint64_t)v39);
}

void sub_1CA14E2BC(void *a1, uint64_t a2, void *a3, uint64_t a4, uint64_t *a5, void *a6)
{
  id v11;
  id v12;
  uint64_t v13;
  unint64_t v14;
  char v15;
  id v16;
  id v17;
  uint64_t v18;
  unint64_t v19;
  char v20;
  id v21;
  id v22;
  void *v23;
  id v24;
  int v25;
  int v26;
  id v27;
  uint64_t v28;
  void *v29;
  double v30;
  id v31;
  id v32;

  v11 = objc_msgSend(a1, sel_oppositeNode_);
  if (v11)
  {
    v32 = v11;
    if ((sub_1CA0BDC28(v11, a4) & 1) == 0)
      goto LABEL_12;
    v12 = objc_msgSend(a3, sel_identifier);
    v13 = *a5;
    if (!*(_QWORD *)(*a5 + 16))
      goto LABEL_12;
    v14 = sub_1CA0AA6F8((unint64_t)v12);
    if ((v15 & 1) == 0)
      goto LABEL_12;
    v16 = *(id *)(*(_QWORD *)(v13 + 56) + 8 * v14);
    v17 = objc_msgSend(v32, sel_identifier);
    v18 = *a5;
    if (!*(_QWORD *)(*a5 + 16) || (v19 = sub_1CA0AA6F8((unint64_t)v17), (v20 & 1) == 0))
    {
      v29 = v32;
      v32 = v16;
      goto LABEL_11;
    }
    v21 = *(id *)(*(_QWORD *)(v18 + 56) + 8 * v19);
    v22 = objc_msgSend(a1, sel_label);
    if (v22)
    {
      v23 = v22;
      v24 = objc_msgSend(a1, sel_domain);
      objc_msgSend(a1, sel_weight);
      v26 = v25;
      v27 = objc_msgSend(a1, sel_propertyDictionary);
      v28 = sub_1CA1F08D4();

      sub_1CA0C2AB0(v28);
      swift_bridgeObjectRelease();
      v29 = (void *)sub_1CA1F08BC();
      swift_bridgeObjectRelease();
      LODWORD(v30) = v26;
      v31 = objc_msgSend(a6, sel_addEdgeWithLabel_sourceNode_targetNode_domain_weight_properties_, v23, v16, v21, v24, v29, v30);

LABEL_11:
LABEL_12:

      return;
    }
    __break(1u);
  }
}

void sub_1CA14E4F0(uint64_t a1, void *a2)
{
  void (*v2)(void);
  id v3;

  v2 = *(void (**)(void))(a1 + 32);
  v3 = a2;
  v2();

}

uint64_t MASlice.slice(graph:domain:weight:)(void *a1, __int16 a2, double a3)
{
  uint64_t v6;
  uint64_t v7;
  id v8;
  id v9;

  __swift_instantiateConcreteTypeFromMangledName(&qword_1EF93A388);
  v6 = swift_allocObject();
  *(_OWORD *)(v6 + 16) = xmmword_1CA1F9100;
  *(_WORD *)(v6 + 32) = a2;
  type metadata accessor for MADomainsSlice();
  v7 = swift_allocObject();
  *(_QWORD *)(v7 + 80) = v6;
  v8 = a1;
  v9 = objc_msgSend(v8, sel_graphReference);

  *(_QWORD *)(v7 + 40) = MEMORY[0x1E0DEE9E0];
  *(_OWORD *)(v7 + 48) = 0u;
  *(_OWORD *)(v7 + 64) = 0u;
  *(_QWORD *)(v7 + 16) = v9;
  *(_QWORD *)(v7 + 24) = 0;
  *(double *)(v7 + 32) = a3;
  return v7;
}

void sub_1CA14E5F0()
{
  uint64_t *v0;
  uint64_t v1;
  unint64_t v2;
  int64_t v3;
  int64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  void *v8;
  uint64_t v9;
  void (*v10)(uint64_t *__return_ptr, _QWORD *);
  id v11;
  int64_t v12;
  int64_t v13;
  uint64_t v14;
  unint64_t v15;
  int64_t v16;
  int64_t v17;
  uint64_t v18;
  _QWORD v19[2];

  v1 = *v0;
  v3 = v0[3];
  v2 = v0[4];
  v4 = v3;
  if (v2)
  {
    v5 = (v2 - 1) & v2;
    v6 = __clz(__rbit64(v2)) | (v3 << 6);
LABEL_3:
    v7 = 8 * v6;
    v8 = *(void **)(*(_QWORD *)(v1 + 48) + 8 * v6);
    v9 = *(_QWORD *)(*(_QWORD *)(v1 + 56) + v7);
    v0[3] = v4;
    v0[4] = v5;
    v10 = (void (*)(uint64_t *__return_ptr, _QWORD *))v0[5];
    v19[0] = v8;
    v19[1] = v9;
    v11 = v8;
    v10(&v18, v19);

    return;
  }
  v12 = v3 + 1;
  if (__OFADD__(v3, 1))
  {
    __break(1u);
  }
  else
  {
    v13 = (unint64_t)(v0[2] + 64) >> 6;
    if (v12 < v13)
    {
      v14 = v0[1];
      v15 = *(_QWORD *)(v14 + 8 * v12);
      if (v15)
      {
LABEL_7:
        v5 = (v15 - 1) & v15;
        v6 = __clz(__rbit64(v15)) + (v12 << 6);
        v4 = v12;
        goto LABEL_3;
      }
      v16 = v3 + 2;
      v4 = v3 + 1;
      if (v3 + 2 < v13)
      {
        v15 = *(_QWORD *)(v14 + 8 * v16);
        if (v15)
        {
LABEL_10:
          v12 = v16;
          goto LABEL_7;
        }
        v4 = v3 + 2;
        if (v3 + 3 < v13)
        {
          v15 = *(_QWORD *)(v14 + 8 * (v3 + 3));
          if (v15)
          {
            v12 = v3 + 3;
            goto LABEL_7;
          }
          v16 = v3 + 4;
          v4 = v3 + 3;
          if (v3 + 4 < v13)
          {
            v15 = *(_QWORD *)(v14 + 8 * v16);
            if (v15)
              goto LABEL_10;
            v12 = v3 + 5;
            v4 = v3 + 4;
            if (v3 + 5 < v13)
            {
              v15 = *(_QWORD *)(v14 + 8 * v12);
              if (v15)
                goto LABEL_7;
              v4 = v13 - 1;
              v17 = v3 + 6;
              while (v13 != v17)
              {
                v15 = *(_QWORD *)(v14 + 8 * v17++);
                if (v15)
                {
                  v12 = v17 - 1;
                  goto LABEL_7;
                }
              }
            }
          }
        }
      }
    }
    v0[3] = v4;
    v0[4] = 0;
  }
}

uint64_t sub_1CA14E764@<X0>(_OWORD *a1@<X8>)
{
  uint64_t *v1;
  uint64_t v3;
  uint64_t v4;
  int64_t v5;
  uint64_t v6;
  int64_t v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  int64_t v14;
  int64_t v15;
  unint64_t v16;
  int64_t v17;
  int64_t v18;
  void (*v19)(_OWORD *);
  uint64_t result;
  _OWORD v21[3];
  _OWORD v22[3];
  __int128 v23;
  _OWORD v24[2];

  v3 = *v1;
  v4 = v1[1];
  v6 = v1[2];
  v5 = v1[3];
  v7 = v5;
  v8 = v1[4];
  if (v8)
  {
    v9 = (v8 - 1) & v8;
    v10 = __clz(__rbit64(v8)) | (v5 << 6);
LABEL_3:
    v11 = (uint64_t *)(*(_QWORD *)(v3 + 48) + 16 * v10);
    v13 = *v11;
    v12 = v11[1];
    sub_1CA0B6A98(*(_QWORD *)(v3 + 56) + 32 * v10, (uint64_t)v24);
    *(_QWORD *)&v23 = v13;
    *((_QWORD *)&v23 + 1) = v12;
    swift_bridgeObjectRetain();
    goto LABEL_23;
  }
  v14 = v5 + 1;
  if (__OFADD__(v5, 1))
  {
    __break(1u);
    return result;
  }
  v15 = (unint64_t)(v6 + 64) >> 6;
  if (v14 < v15)
  {
    v16 = *(_QWORD *)(v4 + 8 * v14);
    if (v16)
    {
LABEL_7:
      v9 = (v16 - 1) & v16;
      v10 = __clz(__rbit64(v16)) + (v14 << 6);
      v7 = v14;
      goto LABEL_3;
    }
    v17 = v5 + 2;
    v7 = v5 + 1;
    if (v5 + 2 < v15)
    {
      v16 = *(_QWORD *)(v4 + 8 * v17);
      if (v16)
      {
LABEL_10:
        v14 = v17;
        goto LABEL_7;
      }
      v7 = v5 + 2;
      if (v5 + 3 < v15)
      {
        v16 = *(_QWORD *)(v4 + 8 * (v5 + 3));
        if (v16)
        {
          v14 = v5 + 3;
          goto LABEL_7;
        }
        v17 = v5 + 4;
        v7 = v5 + 3;
        if (v5 + 4 < v15)
        {
          v16 = *(_QWORD *)(v4 + 8 * v17);
          if (v16)
            goto LABEL_10;
          v14 = v5 + 5;
          v7 = v5 + 4;
          if (v5 + 5 < v15)
          {
            v16 = *(_QWORD *)(v4 + 8 * v14);
            if (v16)
              goto LABEL_7;
            v7 = v15 - 1;
            v18 = v5 + 6;
            while (v15 != v18)
            {
              v16 = *(_QWORD *)(v4 + 8 * v18++);
              if (v16)
              {
                v14 = v18 - 1;
                goto LABEL_7;
              }
            }
          }
        }
      }
    }
  }
  v9 = 0;
  memset(v24, 0, sizeof(v24));
  v23 = 0u;
LABEL_23:
  *v1 = v3;
  v1[1] = v4;
  v1[2] = v6;
  v1[3] = v7;
  v1[4] = v9;
  v19 = (void (*)(_OWORD *))v1[5];
  result = sub_1CA151A7C((uint64_t)&v23, (uint64_t)v22, &qword_1EF93AEC8);
  if (*((_QWORD *)&v22[0] + 1))
  {
    v21[0] = v22[0];
    v21[1] = v22[1];
    v21[2] = v22[2];
    v19(v21);
    return sub_1CA0B6AD4((uint64_t)v21, &qword_1EF93AED0);
  }
  else
  {
    a1[1] = 0u;
    a1[2] = 0u;
    *a1 = 0u;
  }
  return result;
}

uint64_t sub_1CA14E948()
{
  uint64_t *v0;
  uint64_t v1;
  unint64_t v2;
  int64_t v3;
  int64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void (*v11)(uint64_t *__return_ptr, _QWORD *);
  uint64_t result;
  int64_t v13;
  int64_t v14;
  uint64_t v15;
  unint64_t v16;
  int64_t v17;
  int64_t v18;
  uint64_t v19;
  _QWORD v20[3];

  v1 = *v0;
  v3 = v0[3];
  v2 = v0[4];
  v4 = v3;
  if (v2)
  {
    v5 = (v2 - 1) & v2;
    v6 = __clz(__rbit64(v2)) | (v3 << 6);
LABEL_3:
    v7 = (uint64_t *)(*(_QWORD *)(v1 + 48) + 16 * v6);
    v8 = *v7;
    v9 = v7[1];
    v10 = *(_QWORD *)(*(_QWORD *)(v1 + 56) + 8 * v6);
    v0[3] = v4;
    v0[4] = v5;
    v11 = (void (*)(uint64_t *__return_ptr, _QWORD *))v0[5];
    v20[0] = v8;
    v20[1] = v9;
    v20[2] = v10;
    swift_bridgeObjectRetain();
    swift_unknownObjectRetain();
    v11(&v19, v20);
    swift_unknownObjectRelease();
    swift_bridgeObjectRelease();
    return v19;
  }
  v13 = v3 + 1;
  if (__OFADD__(v3, 1))
  {
    __break(1u);
  }
  else
  {
    v14 = (unint64_t)(v0[2] + 64) >> 6;
    if (v13 < v14)
    {
      v15 = v0[1];
      v16 = *(_QWORD *)(v15 + 8 * v13);
      if (v16)
      {
LABEL_7:
        v5 = (v16 - 1) & v16;
        v6 = __clz(__rbit64(v16)) + (v13 << 6);
        v4 = v13;
        goto LABEL_3;
      }
      v17 = v3 + 2;
      v4 = v3 + 1;
      if (v3 + 2 < v14)
      {
        v16 = *(_QWORD *)(v15 + 8 * v17);
        if (v16)
        {
LABEL_10:
          v13 = v17;
          goto LABEL_7;
        }
        v4 = v3 + 2;
        if (v3 + 3 < v14)
        {
          v16 = *(_QWORD *)(v15 + 8 * (v3 + 3));
          if (v16)
          {
            v13 = v3 + 3;
            goto LABEL_7;
          }
          v17 = v3 + 4;
          v4 = v3 + 3;
          if (v3 + 4 < v14)
          {
            v16 = *(_QWORD *)(v15 + 8 * v17);
            if (v16)
              goto LABEL_10;
            v13 = v3 + 5;
            v4 = v3 + 4;
            if (v3 + 5 < v14)
            {
              v16 = *(_QWORD *)(v15 + 8 * v13);
              if (v16)
                goto LABEL_7;
              v4 = v14 - 1;
              v18 = v3 + 6;
              while (v14 != v18)
              {
                v16 = *(_QWORD *)(v15 + 8 * v18++);
                if (v16)
                {
                  v13 = v18 - 1;
                  goto LABEL_7;
                }
              }
            }
          }
        }
      }
    }
    result = 0;
    v0[3] = v4;
    v0[4] = 0;
  }
  return result;
}

uint64_t sub_1CA14EAD8(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  int64_t v8;
  uint64_t result;
  int64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  char v16;
  int64_t v17;
  unint64_t v18;
  int64_t v19;

  if (a1 == a2)
    return 1;
  if (*(_QWORD *)(a1 + 16) != *(_QWORD *)(a2 + 16))
    return 0;
  v4 = a1 + 64;
  v5 = 1 << *(_BYTE *)(a1 + 32);
  v6 = -1;
  if (v5 < 64)
    v6 = ~(-1 << v5);
  v7 = v6 & *(_QWORD *)(a1 + 64);
  v8 = (unint64_t)(v5 + 63) >> 6;
  result = swift_bridgeObjectRetain();
  v10 = 0;
  while (1)
  {
    if (v7)
    {
      v11 = __clz(__rbit64(v7));
      v7 &= v7 - 1;
      v12 = v11 | (v10 << 6);
      if (!*(_QWORD *)(a2 + 16))
        goto LABEL_25;
      goto LABEL_7;
    }
    v17 = v10 + 1;
    if (__OFADD__(v10, 1))
    {
      __break(1u);
      goto LABEL_30;
    }
    if (v17 >= v8)
      goto LABEL_27;
    v18 = *(_QWORD *)(v4 + 8 * v17);
    ++v10;
    if (!v18)
    {
      v10 = v17 + 1;
      if (v17 + 1 >= v8)
        goto LABEL_27;
      v18 = *(_QWORD *)(v4 + 8 * v10);
      if (!v18)
      {
        v10 = v17 + 2;
        if (v17 + 2 >= v8)
          goto LABEL_27;
        v18 = *(_QWORD *)(v4 + 8 * v10);
        if (!v18)
        {
          v10 = v17 + 3;
          if (v17 + 3 >= v8)
            goto LABEL_27;
          v18 = *(_QWORD *)(v4 + 8 * v10);
          if (!v18)
            break;
        }
      }
    }
LABEL_24:
    v7 = (v18 - 1) & v18;
    v12 = __clz(__rbit64(v18)) + (v10 << 6);
    if (!*(_QWORD *)(a2 + 16))
    {
LABEL_25:
      swift_release();
      return 0;
    }
LABEL_7:
    v13 = (uint64_t *)(*(_QWORD *)(a1 + 48) + 16 * v12);
    v15 = *v13;
    v14 = v13[1];
    swift_bridgeObjectRetain();
    sub_1CA0AA474(v15, v14);
    LOBYTE(v15) = v16;
    result = swift_bridgeObjectRelease();
    if ((v15 & 1) == 0)
      goto LABEL_25;
  }
  v19 = v17 + 4;
  if (v19 >= v8)
  {
LABEL_27:
    swift_release();
    return 1;
  }
  v18 = *(_QWORD *)(v4 + 8 * v19);
  if (v18)
  {
    v10 = v19;
    goto LABEL_24;
  }
  while (1)
  {
    v10 = v19 + 1;
    if (__OFADD__(v19, 1))
      break;
    if (v10 >= v8)
      goto LABEL_27;
    v18 = *(_QWORD *)(v4 + 8 * v10);
    ++v19;
    if (v18)
      goto LABEL_24;
  }
LABEL_30:
  __break(1u);
  return result;
}

uint64_t sub_1CA14EC88(uint64_t isStackAllocationSafe, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  char v4;
  unint64_t v5;
  size_t v6;
  uint64_t v7;
  void *v8;
  _QWORD v10[2];

  v3 = isStackAllocationSafe;
  v10[1] = *MEMORY[0x1E0C80C00];
  v4 = *(_BYTE *)(isStackAllocationSafe + 32);
  v5 = (unint64_t)((1 << v4) + 63) >> 6;
  v6 = 8 * v5;
  if ((v4 & 0x3Fu) <= 0xD
    || (isStackAllocationSafe = swift_stdlib_isStackAllocationSafe(), (isStackAllocationSafe & 1) != 0))
  {
    MEMORY[0x1E0C80A78](isStackAllocationSafe, a2);
    bzero((char *)v10 - ((v6 + 15) & 0x3FFFFFFFFFFFFFF0), v6);
    v7 = sub_1CA14EDD8((uint64_t)v10 - ((v6 + 15) & 0x3FFFFFFFFFFFFFF0), v5, v3);
    if (v2)
      swift_willThrow();
    else
      return v7;
  }
  else
  {
    v8 = (void *)swift_slowAlloc();
    bzero(v8, v6);
    v3 = sub_1CA14EDD8((uint64_t)v8, v5, v3);
    MEMORY[0x1CAA4BBE4](v8, -1, -1);
  }
  return v3;
}

uint64_t sub_1CA14EDD8(uint64_t result, uint64_t a2, uint64_t a3)
{
  int64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  BOOL v11;
  unint64_t v12;
  int64_t v13;
  char v14;
  unint64_t *v16;
  uint64_t v17;
  char v18[40];
  _BYTE v19[32];
  _BYTE v20[40];
  _BYTE v21[32];
  _BYTE v22[32];
  _BYTE v23[48];
  int64_t v24;

  v16 = (unint64_t *)result;
  v17 = 0;
  v4 = 0;
  v5 = a3 + 64;
  v6 = 1 << *(_BYTE *)(a3 + 32);
  v7 = -1;
  if (v6 < 64)
    v7 = ~(-1 << v6);
  v8 = v7 & *(_QWORD *)(a3 + 64);
  v24 = (unint64_t)(v6 + 63) >> 6;
  while (v8)
  {
    v9 = __clz(__rbit64(v8));
    v8 &= v8 - 1;
    v10 = v9 | (v4 << 6);
LABEL_18:
    sub_1CA0AB948(*(_QWORD *)(a3 + 48) + 40 * v10, (uint64_t)v23);
    sub_1CA0B6A98(*(_QWORD *)(a3 + 56) + 32 * v10, (uint64_t)v22);
    sub_1CA0AB948((uint64_t)v23, (uint64_t)v20);
    sub_1CA0B6A98((uint64_t)v22, (uint64_t)v21);
    sub_1CA0AB948((uint64_t)v20, (uint64_t)v18);
    sub_1CA0B6A98((uint64_t)v21, (uint64_t)v19);
    if (swift_dynamicCast())
    {
      __swift_destroy_boxed_opaque_existential_0((uint64_t)v19);
      v14 = sub_1CA1F0A54();
      swift_bridgeObjectRelease();
      sub_1CA0B6AD4((uint64_t)v20, &qword_1EF93A398);
      __swift_destroy_boxed_opaque_existential_0((uint64_t)v22);
      result = sub_1CA0AB984((uint64_t)v23);
      if ((v14 & 1) == 0)
      {
        *(unint64_t *)((char *)v16 + ((v10 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v10;
        v11 = __OFADD__(v17++, 1);
        if (v11)
          goto LABEL_30;
      }
    }
    else
    {
      sub_1CA0B6AD4((uint64_t)v20, &qword_1EF93A398);
      __swift_destroy_boxed_opaque_existential_0((uint64_t)v19);
      __swift_destroy_boxed_opaque_existential_0((uint64_t)v22);
      result = sub_1CA0AB984((uint64_t)v23);
    }
  }
  v11 = __OFADD__(v4++, 1);
  if (v11)
  {
    __break(1u);
    goto LABEL_29;
  }
  if (v4 >= v24)
    return sub_1CA0CF6A8(v16, a2, v17, a3);
  v12 = *(_QWORD *)(v5 + 8 * v4);
  if (v12)
  {
LABEL_17:
    v8 = (v12 - 1) & v12;
    v10 = __clz(__rbit64(v12)) + (v4 << 6);
    goto LABEL_18;
  }
  v13 = v4 + 1;
  if (v4 + 1 >= v24)
    return sub_1CA0CF6A8(v16, a2, v17, a3);
  v12 = *(_QWORD *)(v5 + 8 * v13);
  if (v12)
    goto LABEL_16;
  v13 = v4 + 2;
  if (v4 + 2 >= v24)
    return sub_1CA0CF6A8(v16, a2, v17, a3);
  v12 = *(_QWORD *)(v5 + 8 * v13);
  if (v12)
    goto LABEL_16;
  v13 = v4 + 3;
  if (v4 + 3 >= v24)
    return sub_1CA0CF6A8(v16, a2, v17, a3);
  v12 = *(_QWORD *)(v5 + 8 * v13);
  if (v12)
  {
LABEL_16:
    v4 = v13;
    goto LABEL_17;
  }
  while (1)
  {
    v4 = v13 + 1;
    if (__OFADD__(v13, 1))
      break;
    if (v4 >= v24)
      return sub_1CA0CF6A8(v16, a2, v17, a3);
    v12 = *(_QWORD *)(v5 + 8 * v4);
    ++v13;
    if (v12)
      goto LABEL_17;
  }
LABEL_29:
  __break(1u);
LABEL_30:
  __break(1u);
  return result;
}

uint64_t sub_1CA14F074(uint64_t a1, uint64_t a2, uint64_t a3, char a4, _QWORD *a5)
{
  uint64_t v7;
  double v8;
  void *v9;
  double v10;
  _QWORD *v11;
  char v12;
  unint64_t v13;
  uint64_t v14;
  _BOOL8 v15;
  uint64_t v16;
  char v17;
  unint64_t v18;
  char v19;
  _QWORD *v20;
  double v21;
  double v22;
  uint64_t v23;
  uint64_t v24;
  BOOL v25;
  uint64_t v26;
  void *v27;
  double v28;
  void *v29;
  double v30;
  uint64_t v31;
  double v32;
  double v33;
  void *v34;
  double v35;
  _QWORD *v36;
  unint64_t v37;
  char v38;
  uint64_t v39;
  _BOOL8 v40;
  uint64_t v41;
  char v42;
  char v43;
  _QWORD *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t result;

  swift_bridgeObjectRetain();
  swift_retain();
  sub_1CA14E5F0();
  if (!v7)
    goto LABEL_29;
  v9 = (void *)v7;
  v10 = v8;
  v11 = (_QWORD *)*a5;
  v13 = sub_1CA0AA594(v7);
  v14 = v11[2];
  v15 = (v12 & 1) == 0;
  v16 = v14 + v15;
  if (__OFADD__(v14, v15))
  {
LABEL_30:
    __break(1u);
    goto LABEL_31;
  }
  v17 = v12;
  if (v11[3] >= v16)
  {
    if ((a4 & 1) != 0)
    {
      v20 = (_QWORD *)*a5;
      if ((v12 & 1) != 0)
        goto LABEL_9;
    }
    else
    {
      sub_1CA0EF5C0();
      v20 = (_QWORD *)*a5;
      if ((v17 & 1) != 0)
        goto LABEL_9;
    }
LABEL_14:
    v20[(v13 >> 6) + 8] |= 1 << v13;
    v23 = 8 * v13;
    *(_QWORD *)(v20[6] + v23) = v9;
    *(double *)(v20[7] + v23) = v10;
    v24 = v20[2];
    v25 = __OFADD__(v24, 1);
    v26 = v24 + 1;
    if (v25)
    {
LABEL_31:
      __break(1u);
      goto LABEL_32;
    }
    v20[2] = v26;
LABEL_16:
    sub_1CA14E5F0();
    if (v27)
    {
      v29 = v27;
      v30 = v28;
      do
      {
        v36 = (_QWORD *)*a5;
        v37 = sub_1CA0AA594((uint64_t)v29);
        v39 = v36[2];
        v40 = (v38 & 1) == 0;
        v25 = __OFADD__(v39, v40);
        v41 = v39 + v40;
        if (v25)
          goto LABEL_30;
        v42 = v38;
        if (v36[3] < v41)
        {
          sub_1CA0EB588(v41, 1);
          v37 = sub_1CA0AA594((uint64_t)v29);
          if ((v42 & 1) != (v43 & 1))
            goto LABEL_32;
        }
        v44 = (_QWORD *)*a5;
        if ((v42 & 1) != 0)
        {
          v31 = 8 * v37;
          v32 = *(double *)(v44[7] + 8 * v37);

          if (v32 > v30)
            v33 = v32;
          else
            v33 = v30;
          *(double *)(v44[7] + v31) = v33;
        }
        else
        {
          v44[(v37 >> 6) + 8] |= 1 << v37;
          v45 = 8 * v37;
          *(_QWORD *)(v44[6] + v45) = v29;
          *(double *)(v44[7] + v45) = v30;
          v46 = v44[2];
          v25 = __OFADD__(v46, 1);
          v47 = v46 + 1;
          if (v25)
            goto LABEL_31;
          v44[2] = v47;
        }
        sub_1CA14E5F0();
        v29 = v34;
        v30 = v35;
      }
      while (v34);
    }
LABEL_29:
    swift_release();
    swift_bridgeObjectRelease();
    sub_1CA0B6A14();
    return swift_release();
  }
  sub_1CA0EB588(v16, a4 & 1);
  v18 = sub_1CA0AA594((uint64_t)v9);
  if ((v17 & 1) == (v19 & 1))
  {
    v13 = v18;
    v20 = (_QWORD *)*a5;
    if ((v17 & 1) == 0)
      goto LABEL_14;
LABEL_9:
    v21 = *(double *)(v20[7] + 8 * v13);

    if (v21 > v10)
      v22 = v21;
    else
      v22 = v10;
    *(double *)(v20[7] + 8 * v13) = v22;
    goto LABEL_16;
  }
LABEL_32:
  sub_1CA0AB910(0, (unint64_t *)&qword_1EF93A320);
  result = sub_1CA1F1360();
  __break(1u);
  return result;
}

void sub_1CA14F364(uint64_t a1, uint64_t a2, uint64_t a3, char a4, _QWORD *a5)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  char v14;
  unint64_t v15;
  uint64_t v16;
  _BOOL8 v17;
  uint64_t v18;
  char v19;
  unint64_t v20;
  char v21;
  void *v22;
  _BYTE *v23;
  id v24;
  _QWORD *v25;
  uint64_t *v26;
  uint64_t v27;
  BOOL v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  _QWORD *v36;
  unint64_t v37;
  char v38;
  uint64_t v39;
  _BOOL8 v40;
  uint64_t v41;
  char v42;
  char v43;
  _QWORD *v44;
  uint64_t *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;

  swift_bridgeObjectRetain();
  swift_retain();
  v7 = sub_1CA14E948();
  if (!v8)
    goto LABEL_21;
  v10 = v7;
  v11 = v8;
  v12 = v9;
  v13 = (_QWORD *)*a5;
  v15 = sub_1CA0AA474(v7, v8);
  v16 = v13[2];
  v17 = (v14 & 1) == 0;
  v18 = v16 + v17;
  if (__OFADD__(v16, v17))
  {
LABEL_22:
    __break(1u);
    goto LABEL_23;
  }
  v19 = v14;
  if (v13[3] >= v18)
  {
    if ((a4 & 1) != 0)
    {
      if ((v14 & 1) == 0)
        goto LABEL_12;
    }
    else
    {
      sub_1CA0F132C();
      if ((v19 & 1) == 0)
        goto LABEL_12;
    }
    goto LABEL_9;
  }
  sub_1CA0EE78C(v18, a4 & 1);
  v20 = sub_1CA0AA474(v10, v11);
  if ((v19 & 1) == (v21 & 1))
  {
    v15 = v20;
    if ((v19 & 1) == 0)
    {
LABEL_12:
      v25 = (_QWORD *)*a5;
      *(_QWORD *)(*a5 + 8 * (v15 >> 6) + 64) |= 1 << v15;
      v26 = (uint64_t *)(v25[6] + 16 * v15);
      *v26 = v10;
      v26[1] = v11;
      *(_QWORD *)(v25[7] + 8 * v15) = v12;
      v27 = v25[2];
      v28 = __OFADD__(v27, 1);
      v29 = v27 + 1;
      if (v28)
      {
LABEL_23:
        __break(1u);
        goto LABEL_24;
      }
      v25[2] = v29;
      v30 = sub_1CA14E948();
      if (v31)
      {
        v33 = v30;
        v34 = v31;
        v35 = v32;
        do
        {
          v36 = (_QWORD *)*a5;
          v37 = sub_1CA0AA474(v33, v34);
          v39 = v36[2];
          v40 = (v38 & 1) == 0;
          v28 = __OFADD__(v39, v40);
          v41 = v39 + v40;
          if (v28)
            goto LABEL_22;
          v42 = v38;
          if (v36[3] < v41)
          {
            sub_1CA0EE78C(v41, 1);
            v37 = sub_1CA0AA474(v33, v34);
            if ((v42 & 1) != (v43 & 1))
              goto LABEL_24;
          }
          if ((v42 & 1) != 0)
            goto LABEL_9;
          v44 = (_QWORD *)*a5;
          *(_QWORD *)(*a5 + 8 * (v37 >> 6) + 64) |= 1 << v37;
          v45 = (uint64_t *)(v44[6] + 16 * v37);
          *v45 = v33;
          v45[1] = v34;
          *(_QWORD *)(v44[7] + 8 * v37) = v35;
          v46 = v44[2];
          v28 = __OFADD__(v46, 1);
          v47 = v46 + 1;
          if (v28)
            goto LABEL_23;
          v44[2] = v47;
          v33 = sub_1CA14E948();
          v34 = v48;
          v35 = v49;
        }
        while (v48);
      }
LABEL_21:
      swift_release();
      swift_bridgeObjectRelease();
      sub_1CA0B6A14();
      swift_release();
      return;
    }
LABEL_9:
    sub_1CA0BE35C();
    v22 = (void *)swift_allocError();
    *v23 = 4;
    swift_willThrow();
    v24 = v22;
    __swift_instantiateConcreteTypeFromMangledName(&qword_1EF937438);
    if ((swift_dynamicCast() & 1) == 0)
    {
      swift_unknownObjectRelease();
      swift_release();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      sub_1CA0B6A14();
      swift_release();

      return;
    }
    goto LABEL_25;
  }
LABEL_24:
  sub_1CA1F1360();
  __break(1u);
LABEL_25:
  sub_1CA1F1054();
  sub_1CA1F0A3C();
  sub_1CA1F1180();
  sub_1CA1F0A3C();
  sub_1CA1F11C8();
  __break(1u);
}

int64_t sub_1CA14F75C(int64_t result, int a2, char a3, uint64_t a4)
{
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;

  if ((a3 & 1) != 0)
    goto LABEL_20;
  v4 = result;
  if (result < 0 || (result = 1 << *(_BYTE *)(a4 + 32), result <= (uint64_t)v4))
  {
    __break(1u);
    goto LABEL_18;
  }
  v5 = v4 >> 6;
  v6 = a4 + 56;
  v7 = *(_QWORD *)(a4 + 56 + 8 * (v4 >> 6));
  if (((v7 >> v4) & 1) == 0)
  {
LABEL_18:
    __break(1u);
    goto LABEL_19;
  }
  if (*(_DWORD *)(a4 + 36) != a2)
  {
LABEL_19:
    __break(1u);
LABEL_20:
    __break(1u);
    return result;
  }
  v8 = v7 & (-2 << (v4 & 0x3F));
  if (v8)
    return __clz(__rbit64(v8)) | v4 & 0xFFFFFFFFFFFFFFC0;
  v9 = v5 + 1;
  v10 = (unint64_t)(result + 63) >> 6;
  if (v5 + 1 < v10)
  {
    v11 = *(_QWORD *)(v6 + 8 * v9);
    if (v11)
      return __clz(__rbit64(v11)) + (v9 << 6);
    v9 = v5 + 2;
    if (v5 + 2 < v10)
    {
      v11 = *(_QWORD *)(v6 + 8 * v9);
      if (v11)
        return __clz(__rbit64(v11)) + (v9 << 6);
      while (v10 - 3 != v5)
      {
        v11 = *(_QWORD *)(a4 + 80 + 8 * v5++);
        if (v11)
        {
          v9 = v5 + 2;
          return __clz(__rbit64(v11)) + (v9 << 6);
        }
      }
    }
  }
  return result;
}

void sub_1CA14F840(uint64_t a1, uint64_t a2, char a3, uint64_t a4)
{
  void *v4;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  id v10;
  char v11;
  uint64_t v12;
  id v13;
  char v14;
  id v15;
  void *v16;

  v6 = a1;
  if ((a4 & 0xC000000000000001) == 0)
  {
    if ((a3 & 1) != 0)
      goto LABEL_13;
    if (a1 < 0 || 1 << *(_BYTE *)(a4 + 32) <= a1)
    {
      __break(1u);
    }
    else if (((*(_QWORD *)(a4 + (((unint64_t)a1 >> 3) & 0xFFFFFFFFFFFFF8) + 56) >> a1) & 1) != 0)
    {
      if (*(_DWORD *)(a4 + 36) == (_DWORD)a2)
        goto LABEL_20;
      __break(1u);
LABEL_13:
      if (sub_1CA1F0F88() == *(_DWORD *)(a4 + 36))
      {
        sub_1CA1F0F94();
        sub_1CA0AB910(0, (unint64_t *)&qword_1EF93A320);
        swift_unknownObjectRetain();
        swift_dynamicCast();
        v4 = v16;
        swift_unknownObjectRelease();
        v8 = sub_1CA1F0E5C();
        v9 = -1 << *(_BYTE *)(a4 + 32);
        v6 = v8 & ~v9;
        if (((*(_QWORD *)(a4 + 56 + ((v6 >> 3) & 0xFFFFFFFFFFFFF8)) >> v6) & 1) != 0)
        {
          v10 = *(id *)(*(_QWORD *)(a4 + 48) + 8 * v6);
          v11 = sub_1CA1F0E68();

          if ((v11 & 1) == 0)
          {
            v12 = ~v9;
            do
            {
              v6 = (v6 + 1) & v12;
              if (((*(_QWORD *)(a4 + 56 + ((v6 >> 3) & 0xFFFFFFFFFFFFF8)) >> v6) & 1) == 0)
                goto LABEL_24;
              v13 = *(id *)(*(_QWORD *)(a4 + 48) + 8 * v6);
              v14 = sub_1CA1F0E68();

            }
            while ((v14 & 1) == 0);
          }

LABEL_20:
          v15 = *(id *)(*(_QWORD *)(a4 + 48) + 8 * v6);
          return;
        }
LABEL_24:

        __break(1u);
        goto LABEL_25;
      }
LABEL_23:
      __break(1u);
      goto LABEL_24;
    }
    __break(1u);
    goto LABEL_23;
  }
  if ((a3 & 1) == 0)
  {
LABEL_25:
    __break(1u);
    return;
  }
  if (a4 < 0)
    v7 = a4;
  else
    v7 = a4 & 0xFFFFFFFFFFFFFF8;
  MEMORY[0x1CAA4A6C0](a1, a2, v7);
  sub_1CA0AB910(0, (unint64_t *)&qword_1EF93A320);
  swift_unknownObjectRetain();
  swift_dynamicCast();
  swift_unknownObjectRelease();
}

uint64_t sub_1CA14FAA8(uint64_t a1)
{
  unint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char v5;
  unsigned int v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t *v9;
  unint64_t v10;

  v1 = *(_QWORD *)(a1 + 56);
  if (v1)
  {
    v2 = 0;
    return __clz(__rbit64(v1)) + v2;
  }
  v5 = *(_BYTE *)(a1 + 32);
  v6 = v5 & 0x3F;
  v3 = 1 << v5;
  if (v6 < 7)
    return v3;
  v1 = *(_QWORD *)(a1 + 64);
  if (v1)
  {
    v2 = 64;
    return __clz(__rbit64(v1)) + v2;
  }
  v7 = (unint64_t)(v3 + 63) >> 6;
  if (v7 <= 2)
    v7 = 2;
  v8 = v7 - 2;
  v9 = (unint64_t *)(a1 + 72);
  v2 = 64;
  while (v8)
  {
    v10 = *v9++;
    v1 = v10;
    --v8;
    v2 += 64;
    if (v10)
      return __clz(__rbit64(v1)) + v2;
  }
  return v3;
}

uint64_t sub_1CA14FB30(uint64_t result, uint64_t a2, uint64_t a3, int a4, uint64_t a5, uint64_t a6)
{
  if (a3 < 0 || 1 << *(_BYTE *)(a6 + 32) <= a3)
  {
    __break(1u);
    goto LABEL_7;
  }
  if (((*(_QWORD *)(a6 + (((unint64_t)a3 >> 3) & 0xFFFFFFFFFFFFF8) + 64) >> a3) & 1) == 0)
  {
LABEL_7:
    __break(1u);
    goto LABEL_8;
  }
  if (*(_DWORD *)(a6 + 36) == a4)
  {
    sub_1CA0AB948(*(_QWORD *)(a6 + 48) + 40 * a3, result);
    return sub_1CA0B6A98(*(_QWORD *)(a6 + 56) + 32 * a3, a2);
  }
LABEL_8:
  __break(1u);
  return result;
}

uint64_t sub_1CA14FBC4@<X0>(_QWORD *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;

  v2 = a1[1];
  v3 = a1[2];
  *a2 = *a1;
  a2[1] = v2;
  a2[2] = v3;
  swift_bridgeObjectRetain();
  return swift_unknownObjectRetain();
}

uint64_t sub_1CA14FBF8(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t result;
  uint64_t v5;
  char v6;
  char v7;
  int64_t v8;
  uint64_t v9;
  uint64_t v10;
  char v11;
  char v12;
  uint64_t v13;
  int64_t v14;
  char v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  uint64_t v22;
  void (*v23)(_BYTE *, _QWORD);
  unint64_t v25;
  _BYTE v26[32];
  uint64_t v27;
  uint64_t v28;
  char v29;
  uint64_t v30;

  v25 = a1 & 0xC000000000000001;
  if ((a1 & 0xC000000000000001) != 0)
    v3 = sub_1CA1F0FA0();
  else
    v3 = *(_QWORD *)(a1 + 16);
  result = MEMORY[0x1E0DEE9D8];
  if (v3)
  {
    v30 = MEMORY[0x1E0DEE9D8];
    sub_1CA0CD508(0, v3 & ~(v3 >> 63), 0);
    if (v25)
    {
      result = sub_1CA1F0F58();
      v6 = 1;
    }
    else
    {
      result = sub_1CA14FAA8(a1);
      v6 = v7 & 1;
    }
    v27 = result;
    v28 = v5;
    v29 = v6;
    if (v3 < 0)
    {
      __break(1u);
LABEL_23:
      __break(1u);
    }
    else
    {
      do
      {
        while (1)
        {
          v14 = v27;
          v13 = v28;
          v15 = v29;
          sub_1CA14F840(v27, v28, v29, a1);
          v17 = v16;
          v18 = *(_QWORD *)(a2 + 32);
          v19 = v30;
          result = swift_isUniquelyReferenced_nonNull_native();
          if ((result & 1) == 0)
          {
            result = sub_1CA0CD508(0, *(_QWORD *)(v19 + 16) + 1, 1);
            v19 = v30;
          }
          v21 = *(_QWORD *)(v19 + 16);
          v20 = *(_QWORD *)(v19 + 24);
          if (v21 >= v20 >> 1)
          {
            result = sub_1CA0CD508(v20 > 1, v21 + 1, 1);
            v19 = v30;
          }
          *(_QWORD *)(v19 + 16) = v21 + 1;
          v22 = v19 + 16 * v21;
          *(_QWORD *)(v22 + 32) = v17;
          *(_QWORD *)(v22 + 40) = v18;
          if (v25)
            break;
          v8 = sub_1CA14F75C(v14, v13, v15, a1);
          v10 = v9;
          v12 = v11;
          sub_1CA0C7548(v14, v13, v15);
          v27 = v8;
          v28 = v10;
          v29 = v12 & 1;
          if (!--v3)
            goto LABEL_20;
        }
        if ((v15 & 1) == 0)
          goto LABEL_23;
        if (sub_1CA1F0F70())
          swift_isUniquelyReferenced_nonNull_native();
        __swift_instantiateConcreteTypeFromMangledName(&qword_1EF93AEC0);
        v23 = (void (*)(_BYTE *, _QWORD))sub_1CA1F0CAC();
        sub_1CA1F0FF4();
        v23(v26, 0);
        --v3;
      }
      while (v3);
LABEL_20:
      sub_1CA0C7548(v27, v28, v29);
      return v30;
    }
  }
  return result;
}

uint64_t sub_1CA14FE50(uint64_t result, char a2, _QWORD *a3)
{
  uint64_t v3;
  uint64_t v6;
  double v7;
  _QWORD *v8;
  id v9;
  char v10;
  unint64_t v11;
  uint64_t v12;
  _BOOL8 v13;
  uint64_t v14;
  char v15;
  unint64_t v16;
  char v17;
  _QWORD *v18;
  double v19;
  double v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  BOOL v24;
  uint64_t v25;
  double *i;
  double v27;
  double v28;
  double v29;
  _QWORD *v30;
  id v31;
  unint64_t v32;
  char v33;
  uint64_t v34;
  _BOOL8 v35;
  uint64_t v36;
  char v37;
  char v38;
  _QWORD *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;

  v3 = *(_QWORD *)(result + 16);
  if (v3)
  {
    v6 = result;
    v7 = *(double *)(result + 40);
    v8 = (_QWORD *)*a3;
    v9 = *(id *)(result + 32);
    swift_bridgeObjectRetain();
    v11 = sub_1CA0AA594((uint64_t)v9);
    v12 = v8[2];
    v13 = (v10 & 1) == 0;
    v14 = v12 + v13;
    if (__OFADD__(v12, v13))
    {
LABEL_31:
      __break(1u);
      goto LABEL_32;
    }
    v15 = v10;
    if (v8[3] < v14)
    {
      sub_1CA0EB588(v14, a2 & 1);
      v16 = sub_1CA0AA594((uint64_t)v9);
      if ((v15 & 1) != (v17 & 1))
      {
LABEL_33:
        sub_1CA0AB910(0, (unint64_t *)&qword_1EF93A320);
        result = sub_1CA1F1360();
        __break(1u);
        return result;
      }
      v11 = v16;
      v18 = (_QWORD *)*a3;
      if ((v15 & 1) == 0)
        goto LABEL_15;
LABEL_9:
      v19 = *(double *)(v18[7] + 8 * v11);

      if (v19 > v7)
        v20 = v19;
      else
        v20 = v7;
      *(double *)(v18[7] + 8 * v11) = v20;
      v21 = v3 - 1;
      if (v3 == 1)
        return swift_bridgeObjectRelease();
LABEL_19:
      for (i = (double *)(v6 + 56); ; i += 2)
      {
        v29 = *i;
        v30 = (_QWORD *)*a3;
        v31 = *((id *)i - 1);
        v32 = sub_1CA0AA594((uint64_t)v31);
        v34 = v30[2];
        v35 = (v33 & 1) == 0;
        v24 = __OFADD__(v34, v35);
        v36 = v34 + v35;
        if (v24)
          break;
        v37 = v33;
        if (v30[3] < v36)
        {
          sub_1CA0EB588(v36, 1);
          v32 = sub_1CA0AA594((uint64_t)v31);
          if ((v37 & 1) != (v38 & 1))
            goto LABEL_33;
        }
        v39 = (_QWORD *)*a3;
        v40 = 8 * v32;
        if ((v37 & 1) != 0)
        {
          v27 = *(double *)(v39[7] + 8 * v32);

          if (v27 > v29)
            v28 = v27;
          else
            v28 = v29;
          *(double *)(v39[7] + v40) = v28;
        }
        else
        {
          v39[(v32 >> 6) + 8] |= 1 << v32;
          *(_QWORD *)(v39[6] + 8 * v32) = v31;
          *(double *)(v39[7] + 8 * v32) = v29;
          v41 = v39[2];
          v24 = __OFADD__(v41, 1);
          v42 = v41 + 1;
          if (v24)
            goto LABEL_32;
          v39[2] = v42;
        }
        if (!--v21)
          return swift_bridgeObjectRelease();
      }
      goto LABEL_31;
    }
    if ((a2 & 1) != 0)
    {
      v18 = (_QWORD *)*a3;
      if ((v10 & 1) != 0)
        goto LABEL_9;
    }
    else
    {
      sub_1CA0EF5C0();
      v18 = (_QWORD *)*a3;
      if ((v15 & 1) != 0)
        goto LABEL_9;
    }
LABEL_15:
    v18[(v11 >> 6) + 8] |= 1 << v11;
    v22 = 8 * v11;
    *(_QWORD *)(v18[6] + v22) = v9;
    *(double *)(v18[7] + v22) = v7;
    v23 = v18[2];
    v24 = __OFADD__(v23, 1);
    v25 = v23 + 1;
    if (v24)
    {
LABEL_32:
      __break(1u);
      goto LABEL_33;
    }
    v18[2] = v25;
    v21 = v3 - 1;
    if (v3 == 1)
      return swift_bridgeObjectRelease();
    goto LABEL_19;
  }
  return result;
}

uint64_t sub_1CA1500D4(unint64_t *a1, uint64_t a2, uint64_t (*a3)(uint64_t), uint64_t a4)
{
  uint64_t result;
  uint64_t v7;

  result = *a1;
  if (!result)
  {
    v7 = a3(a2);
    result = MEMORY[0x1CAA4BB30](a4, v7);
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_1CA150114()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_1CA150138@<X0>(_QWORD *a1@<X0>, _QWORD *a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v3;

  return sub_1CA0C66E0(a1, a2, *(uint64_t (**)(_QWORD, _QWORD, _QWORD, _QWORD))(v3 + 16), a3);
}

uint64_t sub_1CA150140(void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  id v4;
  void *v5;
  unsigned int v6;
  uint64_t v7;
  unint64_t v8;
  void *v9;
  uint64_t v10;
  _QWORD *v11;
  _QWORD *v12;
  uint64_t v13;
  void *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  id v21;
  void *v22;
  id v23;
  void *v24;
  void *v25;
  id v26;
  id v27;
  void *v28;
  id v29;
  void *v30;
  void *v31;
  id v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  unint64_t v37;
  _QWORD *v38;
  uint64_t v39;
  _QWORD *v40;
  _QWORD *v41;
  void *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  id v50;
  void *v51;
  id v52;
  void *v53;
  void *v54;
  id v55;
  id v56;
  void *v57;
  id v58;
  void *v59;
  void *v60;
  id v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  _QWORD *v65;
  unint64_t v66;
  unint64_t v67;
  _QWORD *v68;
  _QWORD *v69;
  uint64_t v70;
  unint64_t v71;
  id v72;
  void *v73;
  id v74;
  void *v75;
  void *v76;
  uint64_t inited;
  _QWORD *v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  id v82;
  id v83;
  unint64_t v84;
  char v85;
  uint64_t *v86;
  uint64_t v87;
  BOOL v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  unint64_t v93;
  char v94;
  uint64_t *v95;
  uint64_t v96;
  uint64_t v97;
  void *v98;
  id v99;
  id v100;
  void *v101;
  id v102;
  uint64_t v103;
  uint64_t v104;
  int64_t v105;
  unint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  int64_t v110;
  uint64_t v111;
  id v112;
  int64_t v113;
  uint64_t v114;
  unint64_t v115;
  unint64_t v116;
  int64_t v117;
  int64_t v118;
  _QWORD *v119;
  uint64_t v120;
  _QWORD *v121;
  unint64_t v122;
  id v123;
  void *v124;
  id v125;
  void *v126;
  void *v127;
  uint64_t v128;
  _QWORD *v129;
  id v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  unint64_t v134;
  char v135;
  uint64_t *v136;
  uint64_t v137;
  uint64_t v138;
  void *v139;
  id v140;
  id v141;
  id v142;
  void *v143;
  id v144;
  uint64_t v145;
  uint64_t v146;
  int64_t v147;
  unint64_t v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  int64_t v152;
  uint64_t v153;
  id v154;
  int64_t v155;
  uint64_t v156;
  unint64_t v157;
  unint64_t v158;
  int64_t v159;
  int64_t v160;
  _BYTE *v161;
  _BYTE *v162;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  unint64_t v167;
  void *v169;
  uint64_t v171;
  void *v172;
  void *v173;
  void *v174;
  void (*v175)(uint64_t);
  uint64_t v176;
  void (*v177)(uint64_t);
  void *v178;
  uint64_t v179;
  void *v180;
  uint64_t v181;
  _QWORD *v182;
  _QWORD *v183;
  _QWORD *v184;
  id v185;
  uint64_t v187;
  _QWORD *v188;
  unint64_t v189;
  unint64_t v190;
  _QWORD *v191;
  uint64_t v192;
  uint64_t v193;
  uint64_t v194;
  _QWORD *v195;
  _QWORD *v196;
  void *v197;
  uint64_t v198;
  uint64_t v199;
  uint64_t v200;
  uint64_t v201;
  id v202;
  _QWORD v203[4];
  void *v204;
  _OWORD v205[2];
  void *v206;
  __int128 v207;
  uint64_t v208;
  uint64_t v209;
  uint64_t v210;
  int64_t v211;
  unint64_t v212;
  uint64_t v213;
  uint64_t v214;
  uint64_t v215;
  int64_t v216;
  unint64_t v217;
  uint64_t v218;

  v218 = *MEMORY[0x1E0C80C00];
  v185 = *(id *)(v3 + 16);
  v4 = objc_msgSend(v185, sel_concreteGraph);
  if (!v4)
    goto LABEL_156;
  v5 = v4;
  v6 = objc_msgSend(v4, sel_hasPendingRead);

  if (!v6)
    goto LABEL_153;
  v201 = MEMORY[0x1E0DEE9E8];
  v7 = (*(uint64_t (**)(void))(*(_QWORD *)a2 + 264))();
  v164 = *(_QWORD *)(v7 + 16);
  if (!v164)
  {
    swift_bridgeObjectRelease();
    return MEMORY[0x1E0DEE9E8];
  }
  v8 = 0;
  v166 = v7 + 32;
  v165 = v7;
  while (1)
  {
    if (v8 >= *(_QWORD *)(v7 + 16))
      goto LABEL_152;
    v167 = v8;
    sub_1CA1516C4(v166 + 40 * v8, (uint64_t)&v206, &qword_1EF937140);
    v9 = v206;
    v204 = v206;
    sub_1CA0AFCC0(&v207, v205);
    v202 = v9;
    sub_1CA0B6A98((uint64_t)v205, (uint64_t)v203);
    sub_1CA0AB910(0, (unint64_t *)&qword_1EF93A320);
    swift_retain();
    if (swift_dynamicCast())
    {
      v180 = v197;
      v195 = (_QWORD *)MEMORY[0x1E0DEE9D8];
      if (a3 && (v10 = *(_QWORD *)(a3 + 16)) != 0)
      {
        v172 = v9;
        v11 = (_QWORD *)MEMORY[0x1E0DEE9D8];
        v177 = *(void (**)(uint64_t))(*(_QWORD *)v171 + 312);
        swift_bridgeObjectRetain_n();
        v12 = (_QWORD *)(a3 + 40);
        do
        {
          v14 = (void *)*(v12 - 1);
          v13 = *v12;
          v191 = v12;
          v15 = swift_bridgeObjectRetain();
          v177(v15);
          if (!v16)
            goto LABEL_137;
          v17 = (*(uint64_t (**)(void))(*(_QWORD *)a2 + 312))();
          if (!v18)
            goto LABEL_136;
          v19 = v17;
          v20 = v18;
          v187 = v10;
          v202 = v14;
          v203[0] = v13;
          sub_1CA151AC0();
          if ((sub_1CA1F0EEC() & 1) == 0
            || (v202 = v14, v203[0] = v13, v197 = (void *)v19, v198 = v20, (sub_1CA1F0EEC() & 1) == 0))
          {
            swift_bridgeObjectRelease();
LABEL_136:
            swift_bridgeObjectRelease();
LABEL_137:
            sub_1CA0BE35C();
            swift_allocError();
            *v161 = 1;
            swift_willThrow();
            swift_release();

            swift_bridgeObjectRelease_n();
            swift_bridgeObjectRelease();
            sub_1CA0B6AD4((uint64_t)&v204, &qword_1EF937140);
            swift_bridgeObjectRelease();
            goto LABEL_141;
          }
          v21 = objc_allocWithZone(MEMORY[0x1E0CB3940]);
          swift_bridgeObjectRetain();
          v22 = (void *)sub_1CA1F0A00();
          swift_bridgeObjectRelease();
          v23 = objc_msgSend(v21, sel_initWithString_, v22);

          v24 = (void *)sub_1CA1F0A00();
          v25 = (void *)sub_1CA1F0A00();
          v26 = objc_msgSend(v23, sel_stringByReplacingOccurrencesOfString_withString_, v24, v25);

          sub_1CA1F0A0C();
          swift_bridgeObjectRelease();

          v27 = objc_allocWithZone(MEMORY[0x1E0CB3940]);
          swift_bridgeObjectRetain();
          v28 = (void *)sub_1CA1F0A00();
          swift_bridgeObjectRelease();
          v29 = objc_msgSend(v27, sel_initWithString_, v28);

          v30 = (void *)sub_1CA1F0A00();
          v31 = (void *)sub_1CA1F0A00();
          v32 = objc_msgSend(v29, sel_stringByReplacingOccurrencesOfString_withString_, v30, v31);

          v33 = sub_1CA1F0A0C();
          v35 = v34;
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();

          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
            v11 = sub_1CA0E5DF8(0, v11[2] + 1, 1, v11);
          v37 = v11[2];
          v36 = v11[3];
          if (v37 >= v36 >> 1)
            v11 = sub_1CA0E5DF8((_QWORD *)(v36 > 1), v37 + 1, 1, v11);
          v12 = v191 + 2;
          v11[2] = v37 + 1;
          v38 = &v11[2 * v37];
          v38[4] = v33;
          v38[5] = v35;
          swift_bridgeObjectRelease();
          v195 = v11;
          v10 = v187 - 1;
        }
        while (v187 != 1);
        swift_bridgeObjectRelease_n();
        v9 = v172;
      }
      else
      {
        v11 = (_QWORD *)MEMORY[0x1E0DEE9D8];
      }
      v70 = (*(uint64_t (**)(void *, void *, uint64_t, unint64_t, uint64_t, unint64_t, BOOL))(*(_QWORD *)v171 + 352))(a1, v9, 0x656372756F73, 0xE600000000000000, 0x746567726174, 0xE600000000000000, v11[2] == 0);
      swift_release();
      if (v70)
      {
        sub_1CA0B2C2C(v70);
        v11 = v195;
      }
      v179 = v11[2];
      if (v179)
      {
        swift_bridgeObjectRetain();
        v71 = 0;
        v183 = v11;
        while (1)
        {
          if (v71 >= v11[2])
            goto LABEL_143;
          v189 = v71;
          swift_bridgeObjectRetain();
          v74 = objc_msgSend(v185, sel_concreteGraph);
          if (!v74)
            goto LABEL_154;
          v75 = v74;
          v76 = (void *)sub_1CA1F0A00();
          swift_bridgeObjectRelease();
          __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_1EF93A370);
          inited = swift_initStackObject();
          *(_OWORD *)(inited + 16) = xmmword_1CA1F90F0;
          *(_QWORD *)(inited + 32) = 0x656372756F73;
          *(_QWORD *)(inited + 40) = 0xE600000000000000;
          *(_QWORD *)(inited + 48) = a1;
          *(_QWORD *)(inited + 56) = 0x746567726174;
          *(_QWORD *)(inited + 64) = 0xE600000000000000;
          *(_QWORD *)(inited + 72) = v180;
          __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_1EF937050);
          v78 = (_QWORD *)sub_1CA1F1264();
          v79 = *(_QWORD *)(inited + 32);
          v80 = *(_QWORD *)(inited + 40);
          v81 = *(_QWORD *)(inited + 48);
          v82 = a1;
          v83 = v180;
          swift_retain();
          swift_bridgeObjectRetain();
          swift_unknownObjectRetain();
          v84 = sub_1CA0AA474(v79, v80);
          if ((v85 & 1) != 0)
            goto LABEL_144;
          *(_QWORD *)((char *)v78 + ((v84 >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << v84;
          v86 = (uint64_t *)(v78[6] + 16 * v84);
          *v86 = v79;
          v86[1] = v80;
          *(_QWORD *)(v78[7] + 8 * v84) = v81;
          v87 = v78[2];
          v88 = __OFADD__(v87, 1);
          v89 = v87 + 1;
          if (v88)
            goto LABEL_145;
          v78[2] = v89;
          v90 = *(_QWORD *)(inited + 56);
          v91 = *(_QWORD *)(inited + 64);
          v92 = *(_QWORD *)(inited + 72);
          swift_bridgeObjectRetain();
          swift_unknownObjectRetain();
          v93 = sub_1CA0AA474(v90, v91);
          if ((v94 & 1) != 0)
            goto LABEL_146;
          *(_QWORD *)((char *)v78 + ((v93 >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << v93;
          v95 = (uint64_t *)(v78[6] + 16 * v93);
          *v95 = v90;
          v95[1] = v91;
          *(_QWORD *)(v78[7] + 8 * v93) = v92;
          v96 = v78[2];
          v88 = __OFADD__(v96, 1);
          v97 = v96 + 1;
          if (v88)
            goto LABEL_147;
          v78[2] = v97;
          swift_release();
          swift_bridgeObjectRelease();
          __swift_instantiateConcreteTypeFromMangledName(&qword_1EF93A3B0);
          v98 = (void *)sub_1CA1F08BC();
          swift_release();
          v202 = 0;
          v99 = objc_msgSend(v75, sel_matchWithVisualFormat_elements_error_, v76, v98, &v202);

          if (v99)
          {
            v100 = v202;
            v101 = (void *)sub_1CA1F0A00();
            v102 = objc_msgSend(v99, sel_nodesForName_, v101);

            if (v102)
            {
              v174 = v99;
              sub_1CA0C0614();
              v103 = sub_1CA1F0C94();

              if ((v103 & 0xC000000000000001) != 0)
              {
                sub_1CA1F0F64();
                sub_1CA1F0CC4();
                v103 = v208;
                v193 = v209;
                v104 = v210;
                v105 = v211;
                v106 = v212;
              }
              else
              {
                v105 = 0;
                v107 = -1 << *(_BYTE *)(v103 + 32);
                v193 = v103 + 56;
                v104 = ~v107;
                v108 = -v107;
                if (v108 < 64)
                  v109 = ~(-1 << v108);
                else
                  v109 = -1;
                v106 = v109 & *(_QWORD *)(v103 + 56);
              }
              v110 = (unint64_t)(v104 + 64) >> 6;
              if ((v103 & 0x8000000000000000) == 0)
                goto LABEL_60;
              while (1)
              {
                v111 = sub_1CA1F0FD0();
                if (!v111)
                  break;
                v197 = (void *)v111;
                swift_unknownObjectRetain();
                swift_dynamicCast();
                v112 = v202;
                swift_unknownObjectRelease();
                v113 = v105;
                v114 = v106;
                if (!v112)
                  break;
                while (1)
                {
                  sub_1CA0BDD74(&v202, v112);

                  v105 = v113;
                  v106 = v114;
                  if (v103 < 0)
                    break;
LABEL_60:
                  if (v106)
                  {
                    v114 = (v106 - 1) & v106;
                    v115 = __clz(__rbit64(v106)) | (v105 << 6);
                    v113 = v105;
                  }
                  else
                  {
                    v113 = v105 + 1;
                    if (__OFADD__(v105, 1))
                    {
                      __break(1u);
LABEL_143:
                      __break(1u);
LABEL_144:
                      __break(1u);
LABEL_145:
                      __break(1u);
LABEL_146:
                      __break(1u);
LABEL_147:
                      __break(1u);
LABEL_148:
                      __break(1u);
LABEL_149:
                      __break(1u);
LABEL_150:
                      __break(1u);
LABEL_151:
                      __break(1u);
LABEL_152:
                      __break(1u);
LABEL_153:
                      __break(1u);
LABEL_154:
                      __break(1u);
LABEL_155:
                      __break(1u);
LABEL_156:
                      __break(1u);
                    }
                    if (v113 >= v110)
                      goto LABEL_80;
                    v116 = *(_QWORD *)(v193 + 8 * v113);
                    if (!v116)
                    {
                      v117 = v105 + 2;
                      if (v105 + 2 >= v110)
                        goto LABEL_80;
                      v116 = *(_QWORD *)(v193 + 8 * v117);
                      if (v116)
                        goto LABEL_69;
                      v117 = v105 + 3;
                      if (v105 + 3 >= v110)
                        goto LABEL_80;
                      v116 = *(_QWORD *)(v193 + 8 * v117);
                      if (v116)
                      {
LABEL_69:
                        v113 = v117;
                      }
                      else
                      {
                        v113 = v105 + 4;
                        if (v105 + 4 >= v110)
                          goto LABEL_80;
                        v116 = *(_QWORD *)(v193 + 8 * v113);
                        if (!v116)
                        {
                          v118 = v105 + 5;
                          do
                          {
                            if (v110 == v118)
                              goto LABEL_80;
                            v116 = *(_QWORD *)(v193 + 8 * v118++);
                          }
                          while (!v116);
                          v113 = v118 - 1;
                        }
                      }
                    }
                    v114 = (v116 - 1) & v116;
                    v115 = __clz(__rbit64(v116)) + (v113 << 6);
                  }
                  v112 = *(id *)(*(_QWORD *)(v103 + 48) + 8 * v115);
                  if (!v112)
                    goto LABEL_80;
                }
              }
LABEL_80:
              sub_1CA0B6A14();

              goto LABEL_40;
            }

          }
          else
          {
            v72 = v202;
            v73 = (void *)sub_1CA1F07CC();

            swift_willThrow();
          }
LABEL_40:
          v71 = v189 + 1;
          v11 = v183;
          if (v189 + 1 == v179)
          {
            swift_bridgeObjectRelease();
            break;
          }
        }
      }

      goto LABEL_131;
    }
    v202 = v9;
    sub_1CA0B6A98((uint64_t)v205, (uint64_t)v203);
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_1EF93A360);
    if ((swift_dynamicCast() & 1) != 0)
      break;
    swift_release();
    sub_1CA0B6AD4((uint64_t)&v204, &qword_1EF937140);
LABEL_132:
    v8 = v167 + 1;
    v7 = v165;
    if (v167 + 1 == v164)
    {
      swift_bridgeObjectRelease();
      return v201;
    }
  }
  v178 = v197;
  v181 = v198;
  v196 = (_QWORD *)MEMORY[0x1E0DEE9D8];
  if (!a3 || (v39 = *(_QWORD *)(a3 + 16)) == 0)
  {
    v40 = (_QWORD *)MEMORY[0x1E0DEE9D8];
LABEL_85:
    v119 = v40;
    v120 = (*(uint64_t (**)(void *, void *, uint64_t, unint64_t, uint64_t, uint64_t, BOOL))(*(_QWORD *)v171 + 352))(a1, v9, 0x656372756F73, 0xE600000000000000, v199, v200, v40[2] == 0);
    swift_release();
    if (v120)
    {
      sub_1CA0B2C2C(v120);
      v119 = v196;
    }
    v121 = v119;
    v176 = v119[2];
    if (!v176)
    {
      swift_bridgeObjectRetain();
LABEL_130:
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
LABEL_131:
      sub_1CA0B6AD4((uint64_t)&v204, &qword_1EF937140);
      swift_bridgeObjectRelease();
      goto LABEL_132;
    }
    swift_bridgeObjectRetain();
    v122 = 0;
    v184 = v119;
    while (1)
    {
      if (v122 >= v121[2])
        goto LABEL_149;
      v190 = v122;
      v202 = v178;
      v203[0] = v181;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      sub_1CA1F0A3C();
      sub_1CA1F0A3C();
      swift_bridgeObjectRelease();
      v125 = objc_msgSend(v185, sel_concreteGraph);
      if (!v125)
        goto LABEL_155;
      v126 = v125;
      v127 = (void *)sub_1CA1F0A00();
      swift_bridgeObjectRelease();
      __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_1EF93A370);
      v128 = swift_initStackObject();
      *(_OWORD *)(v128 + 16) = xmmword_1CA1F9100;
      *(_QWORD *)(v128 + 32) = 0x656372756F73;
      *(_QWORD *)(v128 + 40) = 0xE600000000000000;
      *(_QWORD *)(v128 + 48) = a1;
      __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_1EF937050);
      v129 = (_QWORD *)sub_1CA1F1264();
      v130 = a1;
      swift_retain();
      v131 = *(_QWORD *)(v128 + 32);
      v132 = *(_QWORD *)(v128 + 40);
      v133 = *(_QWORD *)(v128 + 48);
      swift_bridgeObjectRetain();
      swift_unknownObjectRetain();
      v134 = sub_1CA0AA474(v131, v132);
      if ((v135 & 1) != 0)
        goto LABEL_150;
      v129[(v134 >> 6) + 8] |= 1 << v134;
      v136 = (uint64_t *)(v129[6] + 16 * v134);
      *v136 = v131;
      v136[1] = v132;
      *(_QWORD *)(v129[7] + 8 * v134) = v133;
      v137 = v129[2];
      v88 = __OFADD__(v137, 1);
      v138 = v137 + 1;
      if (v88)
        goto LABEL_151;
      v129[2] = v138;
      swift_release();
      swift_bridgeObjectRelease();
      __swift_instantiateConcreteTypeFromMangledName(&qword_1EF93A3B0);
      v139 = (void *)sub_1CA1F08BC();
      swift_release();
      v202 = 0;
      v140 = objc_msgSend(v126, sel_matchWithVisualFormat_elements_error_, v127, v139, &v202);

      v141 = v202;
      if (v140)
      {
        swift_bridgeObjectRetain();
        v142 = v141;
        v143 = (void *)sub_1CA1F0A00();
        swift_bridgeObjectRelease();
        v144 = objc_msgSend(v140, sel_nodesForName_, v143);

        if (v144)
        {
          v169 = v140;
          sub_1CA0C0614();
          v145 = sub_1CA1F0C94();

          if ((v145 & 0xC000000000000001) != 0)
          {
            sub_1CA1F0F64();
            sub_1CA1F0CC4();
            v145 = v213;
            v194 = v214;
            v146 = v215;
            v147 = v216;
            v148 = v217;
          }
          else
          {
            v147 = 0;
            v149 = -1 << *(_BYTE *)(v145 + 32);
            v194 = v145 + 56;
            v146 = ~v149;
            v150 = -v149;
            if (v150 < 64)
              v151 = ~(-1 << v150);
            else
              v151 = -1;
            v148 = v151 & *(_QWORD *)(v145 + 56);
          }
          v152 = (unint64_t)(v146 + 64) >> 6;
          if ((v145 & 0x8000000000000000) == 0)
            goto LABEL_108;
LABEL_105:
          v153 = sub_1CA1F0FD0();
          if (!v153
            || (v197 = (void *)v153,
                swift_unknownObjectRetain(),
                swift_dynamicCast(),
                v154 = v202,
                swift_unknownObjectRelease(),
                v155 = v147,
                v156 = v148,
                !v154))
          {
LABEL_128:
            sub_1CA0B6A14();

            goto LABEL_90;
          }
          while (1)
          {
            sub_1CA0BDD74(&v202, v154);

            v147 = v155;
            v148 = v156;
            if (v145 < 0)
              goto LABEL_105;
LABEL_108:
            if (v148)
            {
              v156 = (v148 - 1) & v148;
              v157 = __clz(__rbit64(v148)) | (v147 << 6);
              v155 = v147;
            }
            else
            {
              v155 = v147 + 1;
              if (__OFADD__(v147, 1))
                goto LABEL_148;
              if (v155 >= v152)
                goto LABEL_128;
              v158 = *(_QWORD *)(v194 + 8 * v155);
              if (!v158)
              {
                v159 = v147 + 2;
                if (v147 + 2 >= v152)
                  goto LABEL_128;
                v158 = *(_QWORD *)(v194 + 8 * v159);
                if (v158)
                  goto LABEL_117;
                v159 = v147 + 3;
                if (v147 + 3 >= v152)
                  goto LABEL_128;
                v158 = *(_QWORD *)(v194 + 8 * v159);
                if (v158)
                {
LABEL_117:
                  v155 = v159;
                }
                else
                {
                  v155 = v147 + 4;
                  if (v147 + 4 >= v152)
                    goto LABEL_128;
                  v158 = *(_QWORD *)(v194 + 8 * v155);
                  if (!v158)
                  {
                    v160 = v147 + 5;
                    while (v152 != v160)
                    {
                      v158 = *(_QWORD *)(v194 + 8 * v160++);
                      if (v158)
                      {
                        v155 = v160 - 1;
                        goto LABEL_118;
                      }
                    }
                    goto LABEL_128;
                  }
                }
              }
LABEL_118:
              v156 = (v158 - 1) & v158;
              v157 = __clz(__rbit64(v158)) + (v155 << 6);
            }
            v154 = *(id *)(*(_QWORD *)(v145 + 48) + 8 * v157);
            if (!v154)
              goto LABEL_128;
          }
        }

      }
      else
      {
        v123 = v202;
        v124 = (void *)sub_1CA1F07CC();

        swift_willThrow();
      }
LABEL_90:
      v121 = v184;
      v122 = v190 + 1;
      if (v190 + 1 == v176)
        goto LABEL_130;
    }
  }
  v40 = (_QWORD *)MEMORY[0x1E0DEE9D8];
  v173 = v9;
  v175 = *(void (**)(uint64_t))(*(_QWORD *)v171 + 312);
  swift_bridgeObjectRetain_n();
  v41 = (_QWORD *)(a3 + 40);
  while (1)
  {
    v42 = (void *)*(v41 - 1);
    v43 = *v41;
    v44 = swift_bridgeObjectRetain();
    v175(v44);
    if (!v45)
      goto LABEL_140;
    v182 = v40;
    v46 = (*(uint64_t (**)(void))(*(_QWORD *)a2 + 312))();
    if (!v47)
      goto LABEL_139;
    v48 = v46;
    v49 = v47;
    v188 = v41;
    v192 = v39;
    v202 = v42;
    v203[0] = v43;
    sub_1CA151AC0();
    if ((sub_1CA1F0EEC() & 1) == 0)
      break;
    v202 = v42;
    v203[0] = v43;
    v197 = (void *)v48;
    v198 = v49;
    if ((sub_1CA1F0EEC() & 1) == 0)
      break;
    v50 = objc_allocWithZone(MEMORY[0x1E0CB3940]);
    swift_bridgeObjectRetain();
    v51 = (void *)sub_1CA1F0A00();
    swift_bridgeObjectRelease();
    v52 = objc_msgSend(v50, sel_initWithString_, v51);

    v53 = (void *)sub_1CA1F0A00();
    v54 = (void *)sub_1CA1F0A00();
    v55 = objc_msgSend(v52, sel_stringByReplacingOccurrencesOfString_withString_, v53, v54);

    sub_1CA1F0A0C();
    swift_bridgeObjectRelease();

    v56 = objc_allocWithZone(MEMORY[0x1E0CB3940]);
    swift_bridgeObjectRetain();
    v57 = (void *)sub_1CA1F0A00();
    swift_bridgeObjectRelease();
    v58 = objc_msgSend(v56, sel_initWithString_, v57);

    v59 = (void *)sub_1CA1F0A00();
    v60 = (void *)sub_1CA1F0A00();
    v61 = objc_msgSend(v58, sel_stringByReplacingOccurrencesOfString_withString_, v59, v60);

    v62 = sub_1CA1F0A0C();
    v64 = v63;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();

    v65 = v182;
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      v65 = sub_1CA0E5DF8(0, v182[2] + 1, 1, v182);
    v67 = v65[2];
    v66 = v65[3];
    v68 = v65;
    if (v67 >= v66 >> 1)
      v68 = sub_1CA0E5DF8((_QWORD *)(v66 > 1), v67 + 1, 1, v65);
    v41 = v188 + 2;
    v68[2] = v67 + 1;
    v40 = v68;
    v69 = &v68[2 * v67];
    v69[4] = v62;
    v69[5] = v64;
    swift_bridgeObjectRelease();
    v196 = v40;
    --v39;
    if (v192 == 1)
    {
      swift_bridgeObjectRelease_n();
      v9 = v173;
      goto LABEL_85;
    }
  }
  swift_bridgeObjectRelease();
LABEL_139:
  swift_bridgeObjectRelease();
LABEL_140:
  sub_1CA0BE35C();
  swift_allocError();
  *v162 = 1;
  swift_willThrow();
  swift_release();
  swift_bridgeObjectRelease_n();
  swift_bridgeObjectRelease();
  sub_1CA0B6AD4((uint64_t)&v204, &qword_1EF937140);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
LABEL_141:
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

uint64_t sub_1CA151658(double a1)
{
  uint64_t v1;

  return (*(uint64_t (**)(double))(v1 + 16))(a1 * 0.1);
}

uint64_t type metadata accessor for MASlice()
{
  return objc_opt_self();
}

uint64_t type metadata accessor for MAQuerySlice()
{
  return objc_opt_self();
}

uint64_t sub_1CA1516C4(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v5;

  v5 = __swift_instantiateConcreteTypeFromMangledName(a3);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 16))(a2, a1, v5);
  return a2;
}

uint64_t type metadata accessor for MADomainsSlice()
{
  return objc_opt_self();
}

uint64_t type metadata accessor for MASlices()
{
  return objc_opt_self();
}

uint64_t type metadata accessor for MAFetchSlice()
{
  return objc_opt_self();
}

uint64_t sub_1CA151768(uint64_t result)
{
  if (result != 1)
    return swift_bridgeObjectRelease();
  return result;
}

uint64_t sub_1CA151778()
{
  uint64_t v0;

  swift_bridgeObjectRelease();
  return swift_deallocObject();
}

void sub_1CA1517AC(void *a1, uint64_t a2)
{
  uint64_t v2;

  sub_1CA14E2BC(a1, a2, *(void **)(v2 + 16), *(_QWORD *)(v2 + 24), *(uint64_t **)(v2 + 32), *(void **)(v2 + 40));
}

uint64_t sub_1CA1517B8()
{
  return swift_deallocObject();
}

uint64_t sub_1CA1517C8(uint64_t a1, uint64_t a2)
{
  return sub_1CA1500D4(&qword_1EF93A3B8, a2, (uint64_t (*)(uint64_t))type metadata accessor for MASlice, (uint64_t)&protocol conformance descriptor for MASlice);
}

double sub_1CA1517F4@<D0>(uint64_t a1@<X0>, double *a2@<X8>)
{
  double result;

  result = *(double *)(*(_QWORD *)a1 + 32);
  *a2 = result;
  return result;
}

double sub_1CA151804(double *a1, uint64_t a2)
{
  double result;

  result = *a1;
  *(double *)(*(_QWORD *)a2 + 32) = *a1;
  return result;
}

uint64_t sub_1CA151814@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result;
  uint64_t v4;

  result = (*(uint64_t (**)(void))(**(_QWORD **)a1 + 312))();
  *a2 = result;
  a2[1] = v4;
  return result;
}

uint64_t sub_1CA151844(uint64_t *a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t (*v4)(uint64_t, uint64_t);

  v2 = *a1;
  v3 = a1[1];
  v4 = *(uint64_t (**)(uint64_t, uint64_t))(**(_QWORD **)a2 + 320);
  swift_bridgeObjectRetain();
  return v4(v2, v3);
}

uint64_t method lookup function for MASlice()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of MASlice.weight.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 136))();
}

uint64_t dispatch thunk of MASlice.weight.setter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 144))();
}

uint64_t dispatch thunk of MASlice.weight.modify()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 152))();
}

uint64_t dispatch thunk of MASlice.contentNodes()()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 216))();
}

uint64_t dispatch thunk of MASlice.weightedContentNodes()()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 224))();
}

uint64_t dispatch thunk of MASlice.hasWeight()()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 232))();
}

uint64_t dispatch thunk of MASlice.fuzzyContentNodes(precision:progress:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 240))();
}

uint64_t dispatch thunk of MASlice.contains(node:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 248))();
}

uint64_t dispatch thunk of MASlice.hash(into:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 272))();
}

uint64_t dispatch thunk of MASlice.tag.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 312))();
}

uint64_t dispatch thunk of MASlice.tag.setter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 320))();
}

uint64_t dispatch thunk of MASlice.tag.modify()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 328))();
}

uint64_t dispatch thunk of MASlice.setProjectionPaths(targetSlice:closure:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 360))();
}

uint64_t dispatch thunk of MASlice.removeProjectionPaths(targetSlice:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 368))();
}

uint64_t dispatch thunk of MASlice.removeProjectionPaths()()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 376))();
}

uint64_t dispatch thunk of MASlice.setFuzziness(closure:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 384))();
}

uint64_t dispatch thunk of MASlice.removeFuzziness()()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 392))();
}

uint64_t dispatch thunk of MASlice.project(node:slice:paths:progress:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 400))();
}

{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 408))();
}

uint64_t dispatch thunk of MASlice.projectTo(slice:paths:precision:progress:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 416))();
}

uint64_t dispatch thunk of MASlice.fragmentBy(slice:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 424))();
}

uint64_t dispatch thunk of MASlice.distributeBy(_:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 432))();
}

uint64_t dispatch thunk of MASlice.filter(_:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 440))();
}

uint64_t dispatch thunk of MASlice.hashValue.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 448))();
}

uint64_t method lookup function for MASlices()
{
  return swift_lookUpClassMethod();
}

uint64_t method lookup function for MADomainsSlice()
{
  return swift_lookUpClassMethod();
}

uint64_t method lookup function for MAFetchSlice()
{
  return swift_lookUpClassMethod();
}

uint64_t method lookup function for MAQuerySlice()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of MAQuerySlice.constrainWith(visualFormat:visualElements:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 496))();
}

uint64_t sub_1CA151A40()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_deallocObject();
}

uint64_t sub_1CA151A6C(uint64_t result)
{
  if (result != 1)
    return swift_bridgeObjectRetain();
  return result;
}

uint64_t sub_1CA151A7C(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v5;

  v5 = __swift_instantiateConcreteTypeFromMangledName(a3);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 32))(a2, a1, v5);
  return a2;
}

unint64_t sub_1CA151AC0()
{
  unint64_t result;

  result = qword_1EF93AED8;
  if (!qword_1EF93AED8)
  {
    result = MEMORY[0x1CAA4BB30](MEMORY[0x1E0DEA9B8], MEMORY[0x1E0DEA968]);
    atomic_store(result, (unint64_t *)&qword_1EF93AED8);
  }
  return result;
}

uint64_t Matrix<A>.subscript.getter@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>, int32x2_t a3@<D0>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v7;
  uint64_t v8;
  int64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t result;
  int64x2_t v13;
  int64x2_t *v14;
  unint64_t v15;
  int64x2_t v16;
  int8x16_t v17;
  uint64_t v18;
  unint64_t v19;
  int64_t *v20;
  int64_t v21;
  int64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t i;
  uint64_t v26[3];

  v7 = *(_QWORD *)(a1 + 16);
  if (!v7)
  {
    result = sub_1CA151EFC(MEMORY[0x1E0DEE9D8], sub_1CA0DEE7C, v26);
    v5 = v26[0];
    v4 = v26[1];
    v7 = v26[2];
LABEL_25:
    *a2 = v5;
    a2[1] = v4;
    a2[2] = v7;
    return result;
  }
  v8 = *(_QWORD *)(v3 + 16);
  v9 = *(_QWORD *)(a1 + 32);
  v10 = v7 - 1;
  if (v7 != 1)
  {
    if (v7 >= 5)
    {
      v11 = v10 & 0xFFFFFFFFFFFFFFFCLL | 1;
      v13 = vdupq_n_s64(v9);
      v14 = (int64x2_t *)(a1 + 56);
      v15 = v10 & 0xFFFFFFFFFFFFFFFCLL;
      v16 = v13;
      do
      {
        v13 = (int64x2_t)vbslq_s8((int8x16_t)vcgtq_s64(v13, v14[-1]), (int8x16_t)v13, (int8x16_t)v14[-1]);
        v16 = (int64x2_t)vbslq_s8((int8x16_t)vcgtq_s64(v16, *v14), (int8x16_t)v16, *(int8x16_t *)v14);
        v14 += 2;
        v15 -= 4;
      }
      while (v15);
      v17 = vbslq_s8((int8x16_t)vcgtq_s64(v13, v16), (int8x16_t)v13, (int8x16_t)v16);
      v18 = vextq_s8(v17, v17, 8uLL).u64[0];
      a3 = (int32x2_t)vbsl_s8((int8x8_t)vcgtd_s64(v17.i64[0], v18), *(int8x8_t *)v17.i8, (int8x8_t)v18);
      v9 = (int64_t)a3;
      if (v10 == (v10 & 0xFFFFFFFFFFFFFFFCLL))
        goto LABEL_13;
    }
    else
    {
      v11 = 1;
    }
    v19 = v7 - v11;
    v20 = (int64_t *)(a1 + 8 * v11 + 32);
    do
    {
      v22 = *v20++;
      v21 = v22;
      if (v9 <= v22)
        v9 = v21;
      --v19;
    }
    while (v19);
  }
LABEL_13:
  if (v9 >= v8)
  {
    __break(1u);
    goto LABEL_27;
  }
  v4 = *(_QWORD *)(v3 + 8);
  if ((unsigned __int128)(v4 * (__int128)(uint64_t)v7) >> 64 != (uint64_t)(v4 * v7) >> 63)
  {
LABEL_27:
    __break(1u);
    goto LABEL_28;
  }
  a3.i32[0] = 0;
  v23 = sub_1CA0B4560(v4 * v7, a3);
  if (*(_QWORD *)(v23 + 16) == v4 * v7)
  {
    v5 = v23;
    result = swift_isUniquelyReferenced_nonNull_native();
    if ((result & 1) != 0)
      goto LABEL_17;
    goto LABEL_29;
  }
LABEL_28:
  __break(1u);
LABEL_29:
  result = (uint64_t)sub_1CA0B6080(v5);
  v5 = result;
LABEL_17:
  if (v4 > 0x7FFFFFFF)
  {
    __break(1u);
    goto LABEL_31;
  }
  if (v8 > 0x7FFFFFFF)
  {
LABEL_31:
    __break(1u);
LABEL_32:
    __break(1u);
    goto LABEL_33;
  }
  if (v4 < (uint64_t)0xFFFFFFFF80000000 || v8 < (uint64_t)0xFFFFFFFF80000000)
    goto LABEL_32;
  if (!(v7 >> 31))
  {
    v24 = v5 + 32;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    for (i = 0; i != v7; ++i)
    {
      cblas_scopy_NEWLAPACK();
      v24 += 4;
    }
    swift_bridgeObjectRelease();
    result = swift_bridgeObjectRelease();
    goto LABEL_25;
  }
LABEL_33:
  __break(1u);
  return result;
}

uint64_t Matrix<A>.normalizeMagnitude(along:)(vDSP_Stride a1)
{
  uint64_t v1;
  vDSP_Stride v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int64_t v9;
  uint64_t v10;
  int64_t v11;
  uint64_t v12;
  int v13;
  uint64_t result;
  vDSP_Stride v15;
  uint64_t v16;

  v2 = a1;
  v3 = *(_QWORD *)(v1 + 8);
  v4 = *(_QWORD *)(v1 + 16);
  if (!a1)
  {
    if ((v3 & 0x8000000000000000) == 0)
    {
      if (v3)
      {
        v5 = 1;
        v6 = *(_QWORD *)(v1 + 16);
        v7 = v6;
        v4 = *(_QWORD *)(v1 + 8);
        goto LABEL_9;
      }
      goto LABEL_16;
    }
LABEL_22:
    sub_1CA1F11BC();
    __break(1u);
    goto LABEL_23;
  }
  if (a1 != 1)
  {
LABEL_23:
    type metadata accessor for MatrixAxis(0);
    swift_bridgeObjectRetain();
    result = sub_1CA1F130C();
    __break(1u);
    return result;
  }
  if (v4 < 0)
    goto LABEL_22;
  if (v4)
  {
    v7 = 1;
    v6 = *(_QWORD *)(v1 + 8);
    v5 = *(_QWORD *)(v1 + 16);
LABEL_9:
    swift_bridgeObjectRetain();
    v8 = sub_1CA1F0B68();
    *(_QWORD *)(v8 + 16) = v4;
    if (v6 >= (uint64_t)0xFFFFFFFF80000000)
    {
      if (v6 > 0x7FFFFFFF)
      {
LABEL_20:
        __break(1u);
        goto LABEL_21;
      }
      v9 = v5 >> 31;
      if (v5 >> 31)
      {
LABEL_21:
        __break(1u);
        goto LABEL_22;
      }
      v10 = v8;
      v15 = v2;
      while ((unsigned __int128)(v9 * (__int128)v7) >> 64 == (v9 * v7) >> 63)
      {
        v11 = v9 + 1;
        v12 = v10 + 4 * v9;
        cblas_snrm2_NEWLAPACK();
        *(_DWORD *)(v12 + 32) = v13;
        v9 = v11;
        if (v4 == v11)
        {
          v2 = v15;
          goto LABEL_17;
        }
      }
      __break(1u);
    }
    __break(1u);
    goto LABEL_20;
  }
LABEL_16:
  swift_bridgeObjectRetain();
  v4 = 0;
  v10 = MEMORY[0x1E0DEE9D8];
LABEL_17:
  *(_QWORD *)(v10 + 16) = v4;
  swift_bridgeObjectRelease();
  v16 = v10;
  Matrix<A>.divide(by:along:)(&v16, v2);
  return swift_bridgeObjectRelease();
}

uint64_t sub_1CA151EF0@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  return sub_1CA151EFC(a1, sub_1CA0DEE7C, a2);
}

uint64_t sub_1CA151EFC@<X0>(uint64_t result@<X0>, uint64_t (*a2)(uint64_t)@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v3;
  uint64_t v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v3 = result;
  v5 = *(_QWORD *)(result + 16);
  if (v5)
  {
    v7 = 0;
    v8 = *(_QWORD *)(result + 32);
    while (*(_QWORD *)(*(_QWORD *)(result + 8 * v7 + 32) + 16) == *(_QWORD *)(v8 + 16))
    {
      if (v5 == ++v7)
      {
        swift_bridgeObjectRetain();
        v9 = a2(v3);
        v10 = *(_QWORD *)(v3 + 16);
        swift_bridgeObjectRelease();
        v11 = *(_QWORD *)(v8 + 16);
        result = swift_bridgeObjectRelease();
        if ((unsigned __int128)(v10 * (__int128)v11) >> 64 == (v10 * v11) >> 63)
        {
          if (*(_QWORD *)(v9 + 16) == v10 * v11)
            goto LABEL_9;
          __break(1u);
          goto LABEL_8;
        }
LABEL_11:
        __break(1u);
        return result;
      }
    }
    __break(1u);
    goto LABEL_11;
  }
LABEL_8:
  result = swift_bridgeObjectRelease();
  v10 = 0;
  v11 = 0;
  v9 = MEMORY[0x1E0DEE9D8];
LABEL_9:
  *a3 = v9;
  a3[1] = v10;
  a3[2] = v11;
  return result;
}

uint64_t Matrix.init(rows:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  double v10;
  uint64_t result;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;

  v6 = sub_1CA1F0BE0();
  v7 = sub_1CA1F0BE0();
  MEMORY[0x1CAA4BB30](MEMORY[0x1E0DEAF50], v7);
  v8 = sub_1CA1F0D60();
  if (!v22)
  {
    swift_bridgeObjectRelease();
    v13 = sub_1CA1F0B50();
    v21 = type metadata accessor for Matrix(0, a2, v19, v20);
    result = sub_1CA1532D8(v21);
    v14 = 0;
    v15 = 0;
    goto LABEL_5;
  }
  v10 = MEMORY[0x1E0C80A78](v8, v9);
  MEMORY[0x1CAA4BB30](MEMORY[0x1E0DEAF38], v7, v10);
  result = sub_1CA1F0A78();
  if ((result & 1) != 0)
  {
    swift_bridgeObjectRetain();
    MEMORY[0x1CAA4BB30](MEMORY[0x1E0DEAF38], v6);
    sub_1CA1F0ACC();
    v12 = sub_1CA1F1138();
    MEMORY[0x1CAA4BB30](MEMORY[0x1E0DEC7B0], v12);
    v13 = sub_1CA1F0C04();
    v14 = MEMORY[0x1CAA4A2A0](a1, v6);
    swift_bridgeObjectRelease();
    v15 = MEMORY[0x1CAA4A2A0](v22, a2);
    swift_bridgeObjectRelease();
    v18 = type metadata accessor for Matrix(0, a2, v16, v17);
    result = sub_1CA1532D8(v18);
LABEL_5:
    *a3 = v13;
    a3[1] = v14;
    a3[2] = v15;
    return result;
  }
  __break(1u);
  return result;
}

__n128 Matrix.init(arrayLiteral:)@<Q0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  __n128 result;
  uint64_t v5;
  __n128 v6;

  Matrix.init(rows:)(a1, a2, &v5);
  result = v6;
  *(_QWORD *)a3 = v5;
  *(__n128 *)(a3 + 8) = result;
  return result;
}

uint64_t Matrix.init(elements:rows:columns:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, _QWORD *a5@<X8>)
{
  uint64_t v9;
  uint64_t result;

  v9 = type metadata accessor for Matrix(0, a4, a3, a4);
  result = sub_1CA1532D8(v9);
  *a5 = a1;
  a5[1] = a2;
  a5[2] = a3;
  return result;
}

__n128 Matrix.init(repeating:rows:columns:)@<Q0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v10;
  double v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  __n128 result;
  uint64_t v17[2];
  uint64_t v18;
  __n128 v19;

  v10 = *(_QWORD *)(a4 - 8);
  v11 = MEMORY[0x1E0C80A78](a1, a2);
  v13 = (char *)&v17[-1] - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t, double))(v10 + 16))(v13, a1, v14, v11);
  v17[0] = a2;
  v17[1] = a3;
  Matrix.init(repeating:shape:)((uint64_t)v13, v17, a4, &v18);
  (*(void (**)(uint64_t, uint64_t))(v10 + 8))(a1, a4);
  result = v19;
  *(_QWORD *)a5 = v18;
  *(__n128 *)(a5 + 8) = result;
  return result;
}

double static Matrix<A>.zeros(rows:columns:)@<D0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  return sub_1CA152370(a1, a2, a3, a4);
}

double static Matrix<A>.ones(rows:columns:)@<D0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  return sub_1CA152370(a1, a2, a3, a4);
}

double sub_1CA152370@<D0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v7;
  char *v8;
  uint64_t AssociatedTypeWitness;
  uint64_t v10;
  double result;
  uint64_t v12;
  uint64_t v13;

  v13 = a2;
  MEMORY[0x1E0C80A78](a1, a2);
  v8 = (char *)&v12 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  MEMORY[0x1E0C80A78](AssociatedTypeWitness, v10);
  swift_getAssociatedConformanceWitness();
  sub_1CA1F1318();
  sub_1CA1F12D0();
  *(_QWORD *)&result = Matrix.init(repeating:rows:columns:)((uint64_t)v8, a1, v13, a3, a4).n128_u64[0];
  return result;
}

uint64_t Matrix.subscript.getter(Swift::Int a1, Swift::Int a2)
{
  Matrix.position(row:column:)(a1, a2);
  return sub_1CA1F0C28();
}

uint64_t Matrix.rows.getter(uint64_t result)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;

  v2 = v1[1];
  if (v2 < 0)
  {
    __break(1u);
  }
  else
  {
    v3 = result;
    v4 = v1[2];
    v5 = *v1;
    v6 = (_QWORD *)swift_allocObject();
    v6[2] = *(_QWORD *)(v3 + 16);
    v6[3] = v5;
    v6[4] = v2;
    v6[5] = v4;
    swift_bridgeObjectRetain();
    __swift_instantiateConcreteTypeFromMangledName(&qword_1EF93AEE0);
    sub_1CA1F0F1C();
    sub_1CA1568AC();
    sub_1CA1F127C();
    swift_release();
    return v7;
  }
  return result;
}

void Matrix.count.getter()
{
  JUMPOUT(0x1CAA4A2A0);
}

uint64_t Matrix.description.getter(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  __int128 v9;
  __int128 v10;
  uint64_t v11;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;

  sub_1CA1F0A3C();
  v4 = type metadata accessor for Matrix.Shape(0, *(_QWORD *)(a1 + 16), v2, v3);
  MEMORY[0x1CAA4BB30](&protocol conformance descriptor for Matrix<A>.Shape, v4);
  sub_1CA1F12C4();
  sub_1CA1F0A3C();
  *(_QWORD *)&v13 = Matrix.rows.getter(a1);
  *((_QWORD *)&v13 + 1) = v5;
  *(_QWORD *)&v15 = v6;
  *((_QWORD *)&v15 + 1) = v7;
  __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_1EF938540);
  v8 = sub_1CA1F0F1C();
  sub_1CA156904();
  sub_1CA1F1168();
  sub_1CA1F1144();
  sub_1CA1F115C();
  sub_1CA1F1150();
  v9 = v13;
  if ((_QWORD)v13)
  {
    v10 = v15;
    v11 = MEMORY[0x1E0DEBFA0];
    do
    {
      v14 = v9;
      v16 = v10;
      MEMORY[0x1CAA4BB30](v11, v8);
      sub_1CA1F12C4();
      sub_1CA1F0A3C();
      sub_1CA1F0A3C();
      swift_unknownObjectRelease();
      swift_bridgeObjectRelease();
      sub_1CA1F1150();
      v9 = v14;
      v10 = v16;
    }
    while ((_QWORD)v14);
  }
  swift_release();
  sub_1CA1F0A3C();
  return 0;
}

uint64_t Matrix.subscript.setter(uint64_t a1, Swift::Int a2, Swift::Int a3, uint64_t a4)
{
  sub_1CA156970(a1, a2, a3, a4);
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)(*(_QWORD *)(a4 + 16) - 8) + 8))(a1);
}

uint64_t Matrix<A>.sum(along:)@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  return sub_1CA152828(a1, MEMORY[0x1E0C8C2E8], a2);
}

{
  return sub_1CA156288(a1, (void (*)(uint64_t, uint64_t, uint64_t, uint64_t))MEMORY[0x1E0C8C2F8], a2);
}

uint64_t Matrix<A>.mean(along:)@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  return sub_1CA152828(a1, MEMORY[0x1E0C8C1E8], a2);
}

{
  return sub_1CA156288(a1, (void (*)(uint64_t, uint64_t, uint64_t, uint64_t))MEMORY[0x1E0C8C1F0], a2);
}

uint64_t sub_1CA152828@<X0>(uint64_t a1@<X0>, void (*a2)(uint64_t, uint64_t, uint64_t, uint64_t)@<X1>, uint64_t *a3@<X8>)
{
  uint64_t *v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t result;
  uint64_t *v17;

  v7 = *v3;
  v6 = v3[1];
  v8 = v3[2];
  if (!a1)
  {
    if ((v6 & 0x8000000000000000) == 0)
    {
      if (v6)
      {
        v17 = a3;
        v9 = 1;
        v10 = v3[2];
        v11 = v10;
        v8 = v6;
        goto LABEL_9;
      }
      goto LABEL_14;
    }
LABEL_18:
    sub_1CA1F11BC();
    __break(1u);
    goto LABEL_19;
  }
  if (a1 != 1)
  {
LABEL_19:
    type metadata accessor for MatrixAxis(0);
    result = sub_1CA1F130C();
    __break(1u);
    return result;
  }
  if (v8 < 0)
    goto LABEL_18;
  if (v8)
  {
    v17 = a3;
    v11 = 1;
    v10 = v6;
    v9 = v8;
LABEL_9:
    swift_bridgeObjectRetain();
    v12 = sub_1CA1F0B68();
    v13 = 0;
    *(_QWORD *)(v12 + 16) = v8;
    v14 = v12 + 32;
    while (1)
    {
      v15 = v13 * v11;
      if ((unsigned __int128)(v13 * (__int128)v11) >> 64 != (v13 * v11) >> 63)
        break;
      if (v10 < 0)
        goto LABEL_17;
      ++v13;
      a2(v7 + 32 + 4 * v15, v9, v14, v10);
      v14 += 4;
      if (v8 == v13)
      {
        a3 = v17;
        goto LABEL_15;
      }
    }
    __break(1u);
LABEL_17:
    sub_1CA1F11BC();
    __break(1u);
    goto LABEL_18;
  }
LABEL_14:
  swift_bridgeObjectRetain();
  v8 = 0;
  v12 = MEMORY[0x1E0DEE9D8];
LABEL_15:
  *(_QWORD *)(v12 + 16) = v8;
  *a3 = v12;
  return swift_bridgeObjectRelease();
}

void Matrix.appendingColumn(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  type metadata accessor for Vector(0, *(_QWORD *)(a2 + 16), a3, a4);
  Vector.count.getter();
}

uint64_t Matrix.appendingColumns(of:)@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;

  v4 = *(_QWORD *)(result + 8);
  if (v4 != v3[1])
  {
    __break(1u);
    goto LABEL_12;
  }
  v5 = *(_QWORD *)(result + 16);
  v6 = v3[2];
  v7 = v6 + v5;
  if (__OFADD__(v6, v5))
  {
LABEL_12:
    __break(1u);
    goto LABEL_13;
  }
  v8 = *(_QWORD *)result;
  v9 = *v3;
  v10 = *(_QWORD *)(a2 + 16);
  v11 = sub_1CA1F0BE0();
  MEMORY[0x1CAA4BB30](MEMORY[0x1E0DEAF50], v11);
  if ((sub_1CA1F0D90() & 1) != 0)
  {
    swift_bridgeObjectRetain();
    v14 = type metadata accessor for Matrix(0, v10, v12, v13);
    result = sub_1CA1532D8(v14);
    v9 = v8;
LABEL_10:
    *a3 = v9;
    a3[1] = v4;
    a3[2] = v7;
    return result;
  }
  if ((sub_1CA1F0D90() & 1) != 0)
  {
    swift_bridgeObjectRetain();
    v18 = type metadata accessor for Matrix(0, v10, v16, v17);
LABEL_9:
    result = sub_1CA1532D8(v18);
    goto LABEL_10;
  }
  result = v4 * v7;
  if ((unsigned __int128)(v4 * (__int128)v7) >> 64 == (v4 * v7) >> 63)
  {
    MEMORY[0x1E0C80A78](result, v15);
    v9 = sub_1CA100100();
    v18 = type metadata accessor for Matrix(0, v10, v19, v20);
    goto LABEL_9;
  }
LABEL_13:
  __break(1u);
  return result;
}

uint64_t Matrix.appendRow<A>(_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  __n128 v16;
  uint64_t v17;
  char *v18;
  void (*v19)(char *, uint64_t, uint64_t, __n128);
  uint64_t v20;
  uint64_t result;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  BOOL v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;

  v4 = v3;
  v30 = a2;
  v7 = *(_QWORD *)(a3 - 8);
  MEMORY[0x1E0C80A78](a1, a2);
  v9 = (char *)&v30 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v10, v11);
  v13 = (char *)&v30 - v12;
  v16.n128_f64[0] = MEMORY[0x1E0C80A78](v14, v15);
  v18 = (char *)&v30 - v17;
  if (!*(_QWORD *)(v3 + 8))
    *(_QWORD *)(v3 + 16) = sub_1CA1F0D24();
  v19 = *(void (**)(char *, uint64_t, uint64_t, __n128))(v7 + 16);
  v19(v18, a1, a3, v16);
  v20 = sub_1CA1F0D24();
  result = (*(uint64_t (**)(char *, uint64_t))(v7 + 8))(v18, a3);
  if (v20 != *(_QWORD *)(v4 + 16))
  {
    __break(1u);
LABEL_10:
    __break(1u);
    return result;
  }
  ((void (*)(char *, uint64_t, uint64_t))v19)(v13, a1, a3);
  v22 = v30;
  type metadata accessor for Vector(0, *(_QWORD *)(v30 + 16), v23, v24);
  if (swift_dynamicCast())
  {
    v25 = sub_1CA1F0BE0();
    v26 = MEMORY[0x1CAA4BB30](MEMORY[0x1E0DEAF50], v25);
    Matrix.appendRow<A>(_:)(&v31, v22, v25, v26);
    return swift_bridgeObjectRelease();
  }
  ((void (*)(char *, uint64_t, uint64_t))v19)(v9, a1, a3);
  sub_1CA1F0BE0();
  result = sub_1CA1F0BA4();
  v27 = *(_QWORD *)(v4 + 8);
  v28 = __OFADD__(v27, 1);
  v29 = v27 + 1;
  if (v28)
    goto LABEL_10;
  *(_QWORD *)(v4 + 8) = v29;
  return result;
}

BOOL static Matrix<A>.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char v6;
  _BOOL4 v8;

  v2 = *(_QWORD *)(a1 + 8);
  v3 = *(_QWORD *)(a1 + 16);
  v4 = *(_QWORD *)(a2 + 8);
  v5 = *(_QWORD *)(a2 + 16);
  v6 = sub_1CA1F0BF8();
  v8 = v2 == v4 && v3 == v5;
  return (v6 & 1) != 0 && v8;
}

uint64_t Matrix<A>.hashValue.getter()
{
  sub_1CA1F13F0();
  Matrix<A>.hash(into:)();
  return sub_1CA1F1438();
}

_QWORD *Matrix.withUnsafeMutableBufferPointer<A>(_:)(void (*a1)(_QWORD *), uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t *v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD v14[4];

  v14[3] = a4;
  v6 = *(_QWORD *)(a3 + 16);
  sub_1CA1F0BE0();
  sub_1CA1F0B44();
  v7 = *v4;
  if ((_swift_isClassOrObjCExistentialType() & 1) != 0)
    v8 = v7 & 0xFFFFFFFFFFFFFF8;
  else
    v8 = v7;
  v9 = *(_QWORD *)(v8 + 16);
  if ((_swift_isClassOrObjCExistentialType() & 1) != 0)
    v10 = v7 & 0xFFFFFFFFFFFFFF8;
  else
    v10 = v7;
  v11 = *(unsigned __int8 *)(*(_QWORD *)(v6 - 8) + 80);
  v12 = v10 + ((v11 + 32) & ~v11);
  v14[0] = v12;
  v14[1] = v9;
  a1(v14);
  return sub_1CA0F4584(v14, v12, v9);
}

uint64_t Matrix.Shape.rows.getter()
{
  uint64_t v0;

  return *(_QWORD *)v0;
}

uint64_t Matrix.Shape.rows.setter(uint64_t result)
{
  _QWORD *v1;

  *v1 = result;
  return result;
}

uint64_t (*Matrix.Shape.rows.modify())()
{
  return nullsub_1;
}

uint64_t Matrix.Shape.columns.getter()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + 8);
}

uint64_t Matrix.Shape.columns.setter(uint64_t result)
{
  uint64_t v1;

  *(_QWORD *)(v1 + 8) = result;
  return result;
}

uint64_t (*Matrix.Shape.columns.modify())()
{
  return nullsub_1;
}

uint64_t Matrix.Shape.init(rows:columns:)@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  *a3 = result;
  a3[1] = a2;
  return result;
}

uint64_t Matrix.Shape.count.getter()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t result;

  v1 = v0[1];
  result = *v0 * v1;
  if ((unsigned __int128)(*v0 * (__int128)v1) >> 64 != result >> 63)
    __break(1u);
  return result;
}

uint64_t Matrix.Shape.description.getter()
{
  sub_1CA1F12AC();
  sub_1CA1F0A3C();
  swift_bridgeObjectRelease();
  sub_1CA1F0A3C();
  sub_1CA1F12AC();
  sub_1CA1F0A3C();
  swift_bridgeObjectRelease();
  sub_1CA1F0A3C();
  return 40;
}

uint64_t Matrix.Shape.hash(into:)()
{
  sub_1CA1F13FC();
  return sub_1CA1F13FC();
}

BOOL static Matrix.Shape.== infix(_:_:)(_QWORD *a1, _QWORD *a2)
{
  return *a1 == *a2 && a1[1] == a2[1];
}

uint64_t Matrix.Shape.hashValue.getter()
{
  sub_1CA1F13F0();
  sub_1CA1F13FC();
  sub_1CA1F13FC();
  return sub_1CA1F1438();
}

uint64_t sub_1CA153218()
{
  sub_1CA1F13F0();
  Matrix.Shape.hash(into:)();
  return sub_1CA1F1438();
}

uint64_t Matrix.elements.getter()
{
  sub_1CA0E6924();
  return swift_bridgeObjectRetain();
}

__n128 Matrix.shape.getter@<Q0>(__n128 *a1@<X8>)
{
  uint64_t v1;
  __n128 result;

  result = *(__n128 *)(v1 + 8);
  *a1 = result;
  return result;
}

uint64_t Matrix.init(elements:shape:)@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, _QWORD *a5@<X8>)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t result;

  v7 = *a2;
  v8 = a2[1];
  v9 = type metadata accessor for Matrix(0, a3, a3, a4);
  result = sub_1CA1532D8(v9);
  *a5 = a1;
  a5[1] = v7;
  a5[2] = v8;
  return result;
}

uint64_t sub_1CA1532D8(uint64_t a1)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t result;

  v2 = *v1;
  v3 = v1[1];
  v4 = v1[2];
  result = MEMORY[0x1CAA4A2A0](v2, *(_QWORD *)(a1 + 16));
  if ((unsigned __int128)(v3 * (__int128)v4) >> 64 != (v3 * v4) >> 63)
  {
    __break(1u);
    goto LABEL_5;
  }
  if (result != v3 * v4)
LABEL_5:
    __break(1u);
  return result;
}

uint64_t sub_1CA153324@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X3>, uint64_t *a3@<X8>)
{
  uint64_t v4;
  uint64_t result;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v4 = *a1;
  result = *a1 * a2;
  if ((unsigned __int128)(v4 * (__int128)a2) >> 64 != result >> 63)
  {
    __break(1u);
    goto LABEL_6;
  }
  if (__OFADD__(result, a2))
  {
LABEL_6:
    __break(1u);
    goto LABEL_7;
  }
  if (result + a2 >= result)
  {
    result = sub_1CA1F0C10();
    *a3 = result;
    a3[1] = v6;
    a3[2] = v7;
    a3[3] = v8;
    return result;
  }
LABEL_7:
  __break(1u);
  return result;
}

Swift::Int __swiftcall Matrix.position(row:column:)(Swift::Int row, Swift::Int column)
{
  uint64_t v2;
  Swift::Int v3;
  Swift::Int v4;

  if (*(_QWORD *)(v2 + 8) < row)
  {
    __break(1u);
    goto LABEL_7;
  }
  v3 = *(_QWORD *)(v2 + 16);
  if (v3 <= column)
  {
LABEL_7:
    __break(1u);
    goto LABEL_8;
  }
  v4 = row * v3;
  if ((unsigned __int128)(row * (__int128)v3) >> 64 != (row * v3) >> 63)
  {
LABEL_8:
    __break(1u);
    goto LABEL_9;
  }
  row = v4 + column;
  if (__OFADD__(v4, column))
LABEL_9:
    __break(1u);
  return row;
}

Swift::tuple_row_Int_column_Int __swiftcall Matrix.index(position:)(Swift::Int position)
{
  uint64_t v1;
  uint64_t v2;
  Swift::Int v3;
  Swift::tuple_row_Int_column_Int result;

  v2 = *(_QWORD *)(v1 + 16);
  if (!v2)
  {
    __break(1u);
LABEL_6:
    __break(1u);
    goto LABEL_7;
  }
  if (position == 0x8000000000000000 && v2 == -1)
    goto LABEL_6;
  v3 = position % v2;
  position /= v2;
LABEL_7:
  result.column = v3;
  result.row = position;
  return result;
}

uint64_t sub_1CA1533FC(uint64_t a1, Swift::Int *a2, uint64_t a3, uint64_t a4)
{
  Swift::Int v4;
  Swift::Int v5;

  v4 = *a2;
  v5 = a2[1];
  type metadata accessor for Matrix(0, *(Swift::Int *)((char *)a2 + a3 - 8), a3, a4);
  return Matrix.subscript.getter(v4, v5);
}

void (*Matrix.subscript.modify(_QWORD *a1, Swift::Int a2, Swift::Int a3, uint64_t a4))(Swift::Int **a1, char a2)
{
  uint64_t v4;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  size_t v12;

  v9 = malloc(0x40uLL);
  *a1 = v9;
  v9[2] = a4;
  v9[3] = v4;
  *v9 = a2;
  v9[1] = a3;
  v10 = *(_QWORD *)(a4 + 16);
  v9[4] = v10;
  v11 = *(_QWORD *)(v10 - 8);
  v9[5] = v11;
  v12 = *(_QWORD *)(v11 + 64);
  v9[6] = malloc(v12);
  v9[7] = malloc(v12);
  Matrix.position(row:column:)(a2, a3);
  sub_1CA1F0C28();
  return sub_1CA15352C;
}

void sub_1CA15352C(Swift::Int **a1, char a2)
{
  Swift::Int *v2;
  void *v3;
  void *v4;
  Swift::Int v5;
  Swift::Int v6;
  uint64_t v7;
  Swift::Int v8;
  Swift::Int v9;
  void (*v10)(void *, Swift::Int);

  v2 = *a1;
  v3 = (void *)(*a1)[6];
  v4 = (void *)(*a1)[7];
  v5 = (*a1)[4];
  v6 = (*a1)[5];
  v7 = (*a1)[2];
  v9 = **a1;
  v8 = (*a1)[1];
  if ((a2 & 1) != 0)
  {
    (*(void (**)(Swift::Int, void *, Swift::Int))(v6 + 16))((*a1)[6], v4, v5);
    sub_1CA156970((uint64_t)v3, v9, v8, v7);
    v10 = *(void (**)(void *, Swift::Int))(v6 + 8);
    v10(v3, v5);
  }
  else
  {
    sub_1CA156970((*a1)[7], v9, v8, v7);
    v10 = *(void (**)(void *, Swift::Int))(v6 + 8);
  }
  v10(v4, v5);
  free(v4);
  free(v3);
  free(v2);
}

uint64_t Matrix<A>.subscript.getter@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  unint64_t v6;
  uint64_t v7;
  int64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t result;
  int64x2_t v12;
  int64x2_t *v13;
  unint64_t v14;
  int64x2_t v15;
  int8x16_t v16;
  uint64_t v17;
  unint64_t v18;
  int64_t *v19;
  int64_t v20;
  int64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25[3];

  v6 = *(_QWORD *)(a1 + 16);
  if (!v6)
  {
    result = sub_1CA151EFC(MEMORY[0x1E0DEE9D8], sub_1CA0DF1E4, v25);
    v4 = (_QWORD *)v25[0];
    v3 = v25[1];
    v6 = v25[2];
LABEL_25:
    *a2 = v4;
    a2[1] = v3;
    a2[2] = v6;
    return result;
  }
  v7 = *(_QWORD *)(v2 + 16);
  v8 = *(_QWORD *)(a1 + 32);
  v9 = v6 - 1;
  if (v6 != 1)
  {
    if (v6 >= 5)
    {
      v10 = v9 & 0xFFFFFFFFFFFFFFFCLL | 1;
      v12 = vdupq_n_s64(v8);
      v13 = (int64x2_t *)(a1 + 56);
      v14 = v9 & 0xFFFFFFFFFFFFFFFCLL;
      v15 = v12;
      do
      {
        v12 = (int64x2_t)vbslq_s8((int8x16_t)vcgtq_s64(v12, v13[-1]), (int8x16_t)v12, (int8x16_t)v13[-1]);
        v15 = (int64x2_t)vbslq_s8((int8x16_t)vcgtq_s64(v15, *v13), (int8x16_t)v15, *(int8x16_t *)v13);
        v13 += 2;
        v14 -= 4;
      }
      while (v14);
      v16 = vbslq_s8((int8x16_t)vcgtq_s64(v12, v15), (int8x16_t)v12, (int8x16_t)v15);
      v17 = vextq_s8(v16, v16, 8uLL).u64[0];
      v8 = (int64_t)vbsl_s8((int8x8_t)vcgtd_s64(v16.i64[0], v17), *(int8x8_t *)v16.i8, (int8x8_t)v17);
      if (v9 == (v9 & 0xFFFFFFFFFFFFFFFCLL))
        goto LABEL_13;
    }
    else
    {
      v10 = 1;
    }
    v18 = v6 - v10;
    v19 = (int64_t *)(a1 + 8 * v10 + 32);
    do
    {
      v21 = *v19++;
      v20 = v21;
      if (v8 <= v21)
        v8 = v20;
      --v18;
    }
    while (v18);
  }
LABEL_13:
  if (v8 >= v7)
  {
    __break(1u);
    goto LABEL_27;
  }
  v3 = *(_QWORD *)(v2 + 8);
  if ((unsigned __int128)(v3 * (__int128)(uint64_t)v6) >> 64 != (uint64_t)(v3 * v6) >> 63)
  {
LABEL_27:
    __break(1u);
    goto LABEL_28;
  }
  v22 = sub_1CA0B4464(v3 * v6, 0.0);
  if (*(_QWORD *)(v22 + 16) == v3 * v6)
  {
    v4 = (_QWORD *)v22;
    result = swift_isUniquelyReferenced_nonNull_native();
    if ((result & 1) != 0)
      goto LABEL_17;
    goto LABEL_29;
  }
LABEL_28:
  __break(1u);
LABEL_29:
  result = (uint64_t)sub_1CA0B6058(v4);
  v4 = (_QWORD *)result;
LABEL_17:
  if (v3 > 0x7FFFFFFF)
  {
    __break(1u);
    goto LABEL_31;
  }
  if (v7 > 0x7FFFFFFF)
  {
LABEL_31:
    __break(1u);
LABEL_32:
    __break(1u);
    goto LABEL_33;
  }
  if (v3 < (uint64_t)0xFFFFFFFF80000000 || v7 < (uint64_t)0xFFFFFFFF80000000)
    goto LABEL_32;
  if (!(v6 >> 31))
  {
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v23 = 32;
    v24 = v6;
    do
    {
      cblas_dcopy_NEWLAPACK();
      v23 += 8;
      --v24;
    }
    while (v24);
    swift_bridgeObjectRelease();
    result = swift_bridgeObjectRelease();
    goto LABEL_25;
  }
LABEL_33:
  __break(1u);
  return result;
}

BOOL sub_1CA1537FC(uint64_t a1, uint64_t a2)
{
  return static Matrix<A>.== infix(_:_:)(a1, a2);
}

uint64_t Matrix<A>.hash(into:)()
{
  sub_1CA1F0BEC();
  sub_1CA1F13FC();
  return sub_1CA1F13FC();
}

uint64_t sub_1CA153858()
{
  return Matrix<A>.hashValue.getter();
}

uint64_t sub_1CA153860()
{
  return Matrix<A>.hash(into:)();
}

uint64_t sub_1CA153868()
{
  sub_1CA1F13F0();
  Matrix<A>.hash(into:)();
  return sub_1CA1F1438();
}

double sub_1CA1538B8@<D0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  double result;

  *(_QWORD *)&result = Matrix.init(arrayLiteral:)(a1, *(_QWORD *)(a2 + 16), a3).n128_u64[0];
  return result;
}

uint64_t Matrix.init(repeating:shape:)@<X0>(uint64_t result@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X2>, uint64_t *a4@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  v5 = *a2;
  v6 = a2[1];
  v7 = *a2 * v6;
  if ((unsigned __int128)(v5 * (__int128)v6) >> 64 == v7 >> 63)
  {
    v9 = result;
    v13 = sub_1CA0F45D8(result, v7, a3);
    v12 = type metadata accessor for Matrix(0, a3, v10, v11);
    sub_1CA1532D8(v12);
    result = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(a3 - 8) + 8))(v9, a3);
    *a4 = v13;
    a4[1] = v5;
    a4[2] = v6;
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t sub_1CA153960(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  uint64_t v14;
  uint64_t v15;
  uint64_t result;
  _QWORD v17[12];

  v17[9] = a3;
  v17[10] = a4;
  v17[11] = a5;
  v17[2] = a11;
  v17[3] = a6;
  v17[4] = a1;
  v17[5] = a7;
  v17[6] = a8;
  v17[7] = a9;
  v17[8] = a10;
  v14 = type metadata accessor for Matrix(0, a11, a3, a4);
  v15 = MEMORY[0x1CAA4BB30](&protocol conformance descriptor for Matrix<A>, v14);
  result = AccelerateBufferWrapper.withUnsafeBufferPointer<A>(_:)((uint64_t)sub_1CA156EA0, (uint64_t)v17, v14, MEMORY[0x1E0DEE9C0] + 8, v15);
  if ((unsigned __int128)(a7 * (__int128)a8) >> 64 == (a7 * a8) >> 63)
    *a2 = a7 * a8;
  else
    __break(1u);
  return result;
}

uint64_t sub_1CA153A20(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  uint64_t v10;
  _QWORD v12[12];

  v12[11] = a3;
  v12[2] = a9;
  v12[3] = a4;
  v12[4] = a1;
  v12[5] = a2;
  v12[6] = a5;
  v12[7] = a6;
  v12[8] = a7;
  v12[9] = a8;
  v9 = type metadata accessor for Vector(0, a9, a3, a4);
  v10 = MEMORY[0x1CAA4BB30](&protocol conformance descriptor for Vector<A>, v9);
  return AccelerateBufferWrapper.withUnsafeBufferPointer<A>(_:)((uint64_t)sub_1CA156ED0, (uint64_t)v12, v9, MEMORY[0x1E0DEE9C0] + 8, v10);
}

uint64_t sub_1CA153AB8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  uint64_t result;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  result = sub_1CA1F09DC();
  if (!result)
    goto LABEL_10;
  v12 = result;
  result = sub_1CA1F09DC();
  if (!result)
  {
LABEL_11:
    __break(1u);
    goto LABEL_12;
  }
  v13 = result;
  result = sub_1CA1F09DC();
  if (!result)
  {
LABEL_12:
    __break(1u);
    return result;
  }
  if (a6 < 0)
  {
    __break(1u);
LABEL_10:
    __break(1u);
    goto LABEL_11;
  }
  if (a6)
  {
    v14 = 0;
    do
    {
      sub_1CA1F0EA4();
      v15 = *(_QWORD *)(*(_QWORD *)(a10 - 8) + 72);
      v13 += v15 * a9;
      result = sub_1CA1F0EA4();
      v12 += v15 * a9 + v15;
      ++v14;
    }
    while (a6 != v14);
  }
  return result;
}

uint64_t sub_1CA153BC8(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, __int128 a11, uint64_t a12, uint64_t a13, uint64_t a14)
{
  uint64_t v15;
  uint64_t v16;
  uint64_t result;
  _QWORD v18[9];
  __int128 v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;

  v22 = a3;
  v23 = a4;
  v24 = a5;
  v18[2] = a14;
  v18[3] = a6;
  v18[4] = a7;
  v18[5] = a8;
  v18[6] = a1;
  v18[7] = a9;
  v18[8] = a10;
  v19 = a11;
  v20 = a12;
  v21 = a13;
  v15 = type metadata accessor for Matrix(0, a14, a3, a4);
  v16 = MEMORY[0x1CAA4BB30](&protocol conformance descriptor for Matrix<A>, v15);
  result = AccelerateBufferWrapper.withUnsafeBufferPointer<A>(_:)((uint64_t)sub_1CA156E28, (uint64_t)v18, v15, MEMORY[0x1E0DEE9C0] + 8, v16);
  if ((unsigned __int128)(a9 * (__int128)a10) >> 64 == (a9 * a10) >> 63)
    *a2 = a9 * a10;
  else
    __break(1u);
  return result;
}

uint64_t sub_1CA153C90(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, __int128 a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  uint64_t v12;
  uint64_t v13;
  _QWORD v15[8];
  __int128 v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;

  v19 = a3;
  v20 = a4;
  v21 = a5;
  v15[2] = a12;
  v15[3] = a6;
  v15[4] = a1;
  v15[5] = a2;
  v15[6] = a7;
  v15[7] = a8;
  v16 = a9;
  v17 = a10;
  v18 = a11;
  v12 = type metadata accessor for Matrix(0, a12, a3, a4);
  v13 = MEMORY[0x1CAA4BB30](&protocol conformance descriptor for Matrix<A>, v12);
  return AccelerateBufferWrapper.withUnsafeBufferPointer<A>(_:)((uint64_t)sub_1CA156E64, (uint64_t)v15, v12, MEMORY[0x1E0DEE9C0] + 8, v13);
}

uint64_t sub_1CA153D38(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  uint64_t result;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  result = sub_1CA1F09DC();
  if (!result)
    goto LABEL_10;
  v14 = result;
  result = sub_1CA1F09DC();
  if (!result)
  {
LABEL_11:
    __break(1u);
    goto LABEL_12;
  }
  v15 = result;
  result = sub_1CA1F09DC();
  if (!result)
  {
LABEL_12:
    __break(1u);
    return result;
  }
  if (a6 < 0)
  {
    __break(1u);
LABEL_10:
    __break(1u);
    goto LABEL_11;
  }
  if (a6)
  {
    v16 = result;
    do
    {
      sub_1CA1F0EA4();
      v17 = *(_QWORD *)(*(_QWORD *)(a12 - 8) + 72);
      v15 += v17 * a9;
      result = sub_1CA1F0EA4();
      v14 += v17 * a9 + v17 * a11;
      v16 += v17 * a11;
      --a6;
    }
    while (a6);
  }
  return result;
}

uint64_t sub_1CA153E48@<X0>(uint64_t a1@<X0>, __int128 *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, _QWORD *a5@<X8>)
{
  __int128 v6;

  v6 = *a2;
  return Matrix.init(elements:shape:)(a1, (uint64_t *)&v6, *(_QWORD *)(a3 + 16), a4, a5);
}

_QWORD *sub_1CA153E74(void (*a1)(_QWORD *), uint64_t a2, uint64_t a3, uint64_t a4)
{
  return Matrix.withUnsafeMutableBufferPointer<A>(_:)(a1, a2, a4, a3);
}

uint64_t sub_1CA153E98(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8;

  v8 = MEMORY[0x1CAA4BB30](&protocol conformance descriptor for Matrix<A>, a4);
  return AccelerateBufferWrapper.withUnsafeBufferPointer<A>(_:)(a1, a2, a4, a3, v8);
}

uint64_t Matrix<A>.transposed()@<X0>(uint64_t *a1@<X8>)
{
  return sub_1CA153F30((void (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))MEMORY[0x1E0C8C270], a1);
}

{
  return sub_1CA153F30(MEMORY[0x1E0C8C260], a1);
}

uint64_t sub_1CA153F30@<X0>(void (*a1)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t)@<X1>, uint64_t *a2@<X8>)
{
  uint64_t *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v8;
  uint64_t v9;
  uint64_t result;

  v5 = v2[1];
  v4 = v2[2];
  v6 = v5 * v4;
  if ((unsigned __int128)(v5 * (__int128)v4) >> 64 != (v5 * v4) >> 63)
  {
    __break(1u);
LABEL_11:
    __break(1u);
    goto LABEL_12;
  }
  if ((v6 & 0x8000000000000000) == 0)
  {
    v8 = *v2;
    swift_bridgeObjectRetain();
    if (v6)
    {
      v9 = sub_1CA1F0B68();
      *(_QWORD *)(v9 + 16) = v6;
      if (v4 < 0)
        goto LABEL_12;
    }
    else
    {
      v9 = MEMORY[0x1E0DEE9D8];
      if (v4 < 0)
        goto LABEL_12;
    }
    if ((v5 & 0x8000000000000000) == 0)
    {
      swift_bridgeObjectRetain();
      a1(v8 + 32, 1, v9 + 32, 1, v4, v5);
      swift_bridgeObjectRelease();
      *(_QWORD *)(v9 + 16) = v6;
      result = swift_bridgeObjectRelease();
      if (*(_QWORD *)(v9 + 16) == v6)
      {
        *a2 = v9;
        a2[1] = v4;
        a2[2] = v5;
        return result;
      }
      goto LABEL_11;
    }
LABEL_12:
    sub_1CA1F11BC();
    __break(1u);
  }
  result = sub_1CA1F11BC();
  __break(1u);
  return result;
}

uint64_t static Matrix<A>.* infix(_:_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t result;

  v4 = *(_QWORD *)(a1 + 8);
  v5 = *(_QWORD *)(a2 + 16);
  v6 = v4 * v5;
  if ((unsigned __int128)(v4 * (__int128)v5) >> 64 != (v4 * v5) >> 63)
  {
    __break(1u);
    goto LABEL_15;
  }
  if ((v6 & 0x8000000000000000) == 0)
  {
    v7 = *(_QWORD *)(a1 + 16);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    if (v6)
    {
      v8 = sub_1CA1F0B68();
      *(_QWORD *)(v8 + 16) = v6;
    }
    else
    {
      v8 = MEMORY[0x1E0DEE9D8];
    }
    if (v4 <= 0x7FFFFFFF)
    {
      if (v5 <= 0x7FFFFFFF)
      {
        if (v7 >= (uint64_t)0xFFFFFFFF80000000
          && v4 >= (uint64_t)0xFFFFFFFF80000000
          && v5 >= (uint64_t)0xFFFFFFFF80000000)
        {
          if (v7 <= 0x7FFFFFFF)
          {
            cblas_dgemm_NEWLAPACK();
            *(_QWORD *)(v8 + 16) = v6;
            swift_bridgeObjectRelease();
            result = swift_bridgeObjectRelease();
            if (*(_QWORD *)(v8 + 16) == v6)
            {
              *a3 = v8;
              a3[1] = v4;
              a3[2] = v5;
              return result;
            }
            goto LABEL_19;
          }
LABEL_18:
          __break(1u);
LABEL_19:
          __break(1u);
          goto LABEL_20;
        }
LABEL_17:
        __break(1u);
        goto LABEL_18;
      }
LABEL_16:
      __break(1u);
      goto LABEL_17;
    }
LABEL_15:
    __break(1u);
    goto LABEL_16;
  }
LABEL_20:
  result = sub_1CA1F11BC();
  __break(1u);
  return result;
}

{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t result;

  v4 = *(_QWORD *)(a1 + 8);
  v5 = *(_QWORD *)(a2 + 16);
  v6 = v4 * v5;
  if ((unsigned __int128)(v4 * (__int128)v5) >> 64 != (v4 * v5) >> 63)
  {
    __break(1u);
    goto LABEL_15;
  }
  if ((v6 & 0x8000000000000000) == 0)
  {
    v7 = *(_QWORD *)(a1 + 16);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    if (v6)
    {
      v8 = sub_1CA1F0B68();
      *(_QWORD *)(v8 + 16) = v6;
    }
    else
    {
      v8 = MEMORY[0x1E0DEE9D8];
    }
    if (v4 <= 0x7FFFFFFF)
    {
      if (v5 <= 0x7FFFFFFF)
      {
        if (v7 >= (uint64_t)0xFFFFFFFF80000000
          && v4 >= (uint64_t)0xFFFFFFFF80000000
          && v5 >= (uint64_t)0xFFFFFFFF80000000)
        {
          if (v7 <= 0x7FFFFFFF)
          {
            cblas_sgemm_NEWLAPACK();
            *(_QWORD *)(v8 + 16) = v6;
            swift_bridgeObjectRelease();
            result = swift_bridgeObjectRelease();
            if (*(_QWORD *)(v8 + 16) == v6)
            {
              *a3 = v8;
              a3[1] = v4;
              a3[2] = v5;
              return result;
            }
            goto LABEL_19;
          }
LABEL_18:
          __break(1u);
LABEL_19:
          __break(1u);
          goto LABEL_20;
        }
LABEL_17:
        __break(1u);
        goto LABEL_18;
      }
LABEL_16:
      __break(1u);
      goto LABEL_17;
    }
LABEL_15:
    __break(1u);
    goto LABEL_16;
  }
LABEL_20:
  result = sub_1CA1F11BC();
  __break(1u);
  return result;
}

uint64_t Matrix.number(of:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t result;

  if (!a1)
  {
    v2 = v1 + 8;
    return *(_QWORD *)v2;
  }
  if (a1 == 1)
  {
    v2 = v1 + 16;
    return *(_QWORD *)v2;
  }
  type metadata accessor for MatrixAxis(0);
  result = sub_1CA1F130C();
  __break(1u);
  return result;
}

uint64_t Matrix.aggregate1<A>(along:aggregation:)(unint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t *v5;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t result;
  _QWORD v25[11];
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;

  v11 = *v5;
  v10 = v5[1];
  v12 = v5[2];
  v26 = *v5;
  v27 = v10;
  v28 = v12;
  v13 = Matrix.number(of:)(a1);
  if (a1 > 1)
  {
    type metadata accessor for MatrixAxis(0);
    result = sub_1CA1F130C();
    __break(1u);
  }
  else
  {
    v26 = v11;
    v27 = v10;
    v28 = v12;
    MEMORY[0x1E0C80A78](v13, v14);
    v25[2] = *(_QWORD *)(a4 + 16);
    v25[3] = a5;
    v25[4] = v15;
    v25[5] = v16;
    v25[6] = v18;
    v25[7] = v17;
    v25[8] = a2;
    v25[9] = v19;
    v22 = type metadata accessor for Vector(0, a5, v20, v21);
    v23 = MEMORY[0x1CAA4BB30](&protocol conformance descriptor for Matrix<A>, a4);
    return AccelerateBufferWrapper.withUnsafeBufferPointer<A>(_:)((uint64_t)sub_1CA156AD0, (uint64_t)v25, a4, v22, v23);
  }
  return result;
}

uint64_t sub_1CA1545B8@<X0>(_QWORD *a1@<X8>)
{
  uint64_t result;
  uint64_t v2;
  uint64_t v3;

  result = sub_1CA1F09DC();
  if (result)
  {
    MEMORY[0x1E0C80A78](result, v2);
    v3 = sub_1CA100100();
    return Vector.init(elements:)(v3, a1);
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t sub_1CA154694(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t (*a8)(_QWORD *, uint64_t), uint64_t a9, uint64_t a10, uint64_t a11)
{
  uint64_t result;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD v21[3];
  uint64_t (*v22)(_QWORD *, uint64_t);

  v22 = a8;
  result = sub_1CA1F09DC();
  if (result)
  {
    if ((a3 & 0x8000000000000000) == 0)
    {
      if (!a3)
      {
LABEL_7:
        *a2 = a3;
        return result;
      }
      v17 = result;
      v18 = 0;
      while ((unsigned __int128)(v18 * (__int128)a5) >> 64 == (v18 * a5) >> 63)
      {
        v19 = v18 + 1;
        v21[0] = a4 + *(_QWORD *)(*(_QWORD *)(a10 - 8) + 72) * v18 * a5;
        v21[1] = a6;
        v21[2] = a7;
        result = v22(v21, v17 + *(_QWORD *)(*(_QWORD *)(a11 - 8) + 72) * v18);
        v18 = v19;
        if (a3 == v19)
          goto LABEL_7;
      }
      __break(1u);
    }
    __break(1u);
  }
  __break(1u);
  return result;
}

uint64_t Matrix.aggregate2<A, B>(along:transform:)(_QWORD *a1, _QWORD *a2, unint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t *v8;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t TupleTypeMetadata2;
  uint64_t v31;
  uint64_t result;
  uint64_t v33;
  _QWORD v34[14];
  _QWORD v35[2];
  _QWORD *v36;
  _QWORD *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;

  v36 = a1;
  v37 = a2;
  v16 = *v8;
  v15 = v8[1];
  v17 = v8[2];
  v40 = *v8;
  v41 = v15;
  v42 = v17;
  v18 = Matrix.number(of:)(a3);
  if (a3 > 1)
  {
    type metadata accessor for MatrixAxis(0);
    result = sub_1CA1F130C();
    __break(1u);
  }
  else
  {
    v35[1] = v35;
    v40 = v16;
    v41 = v15;
    v42 = v17;
    MEMORY[0x1E0C80A78](v18, v19);
    v34[2] = *(_QWORD *)(a6 + 16);
    v34[3] = a7;
    v34[4] = a8;
    v34[5] = v20;
    v34[6] = v22;
    v34[7] = v21;
    v34[8] = v24;
    v34[9] = v23;
    v34[10] = v25;
    v34[11] = a4;
    v34[12] = a5;
    type metadata accessor for Vector(255, a7, v26, v27);
    type metadata accessor for Vector(255, a8, v28, v29);
    TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
    v31 = MEMORY[0x1CAA4BB30](&protocol conformance descriptor for Matrix<A>, a6);
    result = AccelerateBufferWrapper.withUnsafeBufferPointer<A>(_:)((uint64_t)sub_1CA156B00, (uint64_t)v34, a6, TupleTypeMetadata2, v31);
    v33 = v39;
    *v36 = v38;
    *v37 = v33;
  }
  return result;
}

_QWORD *sub_1CA15491C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t (*a7)(_QWORD *, uint64_t, uint64_t)@<X6>, uint64_t a8@<X7>, _QWORD *a9@<X8>, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14)
{
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t AssociatedTypeWitness;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  _QWORD *v36;
  _QWORD *result;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  char *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t (*v50)(_QWORD *, uint64_t, uint64_t);
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  _QWORD *v55;
  _QWORD v56[2];
  uint64_t v57;
  uint64_t v58;

  v53 = a6;
  v50 = a7;
  v51 = a8;
  v52 = a5;
  v48 = a2;
  v49 = a4;
  v55 = a9;
  v46 = a10;
  v47 = a1;
  v44 = a13;
  v45 = a14;
  v14 = *(_QWORD *)(a12 - 8);
  v42 = a3;
  v43 = v14;
  MEMORY[0x1E0C80A78](a1, a2);
  v41 = (char *)&v38 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v40 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v16 + 16) + 8) + 16);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  MEMORY[0x1E0C80A78](AssociatedTypeWitness, v18);
  v39 = *(_QWORD *)(a11 - 8);
  MEMORY[0x1E0C80A78](v19, v20);
  v22 = (char *)&v38 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  v23 = swift_getAssociatedTypeWitness();
  MEMORY[0x1E0C80A78](v23, v24);
  swift_getAssociatedConformanceWitness();
  sub_1CA1F1318();
  sub_1CA1F12D0();
  v25 = v42;
  v26 = sub_1CA0F45D8((uint64_t)v22, v42, a11);
  v27 = v39;
  (*(void (**)(char *, uint64_t))(v39 + 8))(v22, a11);
  v58 = v26;
  swift_getAssociatedConformanceWitness();
  sub_1CA1F1318();
  v28 = (uint64_t)v41;
  sub_1CA1F12D0();
  v29 = sub_1CA0F45D8(v28, v25, a12);
  (*(void (**)(uint64_t, uint64_t))(v43 + 8))(v28, a12);
  v57 = v29;
  sub_1CA1F0BE0();
  sub_1CA1F0B44();
  v30 = v58;
  if ((_swift_isClassOrObjCExistentialType() & 1) != 0)
    v31 = v30 & 0xFFFFFFFFFFFFFF8;
  else
    v31 = v30;
  v32 = *(_QWORD *)(v31 + 16);
  if ((_swift_isClassOrObjCExistentialType() & 1) != 0)
    v33 = v30 & 0xFFFFFFFFFFFFFF8;
  else
    v33 = v30;
  v34 = v33 + ((*(unsigned __int8 *)(v27 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v27 + 80));
  v56[0] = v34;
  v56[1] = v32;
  v35 = v54;
  sub_1CA154CD4((uint64_t)v56, &v57, v47, v48, v25, v49, v52, v53, v50, v51, v46, a11, a12);
  if (v35)
  {
    result = sub_1CA0F4584(v56, v34, v32);
    __break(1u);
  }
  else
  {
    sub_1CA0F4584(v56, v34, v32);
    v36 = v55 + 1;
    Vector.init(elements:)(v58, v55);
    return (_QWORD *)Vector.init(elements:)(v57, v36);
  }
  return result;
}

_QWORD *sub_1CA154CD4(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t (*a9)(_QWORD *, uint64_t, uint64_t), uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13)
{
  uint64_t v13;
  uint64_t v14;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD *result;
  _QWORD v30[5];

  v16 = sub_1CA1F09DC();
  if (v16)
  {
    v17 = v16;
    sub_1CA1F0BE0();
    sub_1CA1F0B44();
    v18 = *a2;
    if ((_swift_isClassOrObjCExistentialType() & 1) != 0)
      v19 = v18 & 0xFFFFFFFFFFFFFF8;
    else
      v19 = v18;
    v13 = *(_QWORD *)(v19 + 16);
    if ((_swift_isClassOrObjCExistentialType() & 1) != 0)
      v20 = v18 & 0xFFFFFFFFFFFFFF8;
    else
      v20 = v18;
    v21 = *(unsigned __int8 *)(*(_QWORD *)(a13 - 8) + 80);
    v14 = v20 + ((v21 + 32) & ~v21);
    v30[0] = v14;
    v30[1] = v13;
    v22 = v30[4];
    sub_1CA154E50((uint64_t)v30, a3, a4, a5, a6, a7, a8, a9, a10, v17, a11, a12, a13);
    if (!v22)
      return sub_1CA0F4584(v30, v14, v13);
  }
  else
  {
    __break(1u);
  }
  result = sub_1CA0F4584(v30, v14, v13);
  __break(1u);
  return result;
}

uint64_t sub_1CA154E50(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t (*a8)(_QWORD *, uint64_t, uint64_t), uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13)
{
  uint64_t result;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD v22[3];
  uint64_t (*v23)(_QWORD *, uint64_t, uint64_t);

  v23 = a8;
  result = sub_1CA1F09DC();
  if (!result)
    goto LABEL_11;
  v16 = result;
  result = sub_1CA1F09DC();
  if (!result)
  {
LABEL_12:
    __break(1u);
    return result;
  }
  if (a4 < 0)
  {
LABEL_10:
    __break(1u);
LABEL_11:
    __break(1u);
    goto LABEL_12;
  }
  if (a4)
  {
    v17 = result;
    v18 = 0;
    while ((unsigned __int128)(v18 * (__int128)a5) >> 64 == (v18 * a5) >> 63)
    {
      v19 = v18 + 1;
      v22[0] = v17 + *(_QWORD *)(*(_QWORD *)(a11 - 8) + 72) * v18 * a5;
      v22[1] = a6;
      v22[2] = a7;
      result = v23(v22, a10 + *(_QWORD *)(*(_QWORD *)(a12 - 8) + 72) * v18, v16 + *(_QWORD *)(*(_QWORD *)(a13 - 8) + 72) * v18);
      v18 = v19;
      if (a4 == v19)
        return result;
    }
    __break(1u);
    goto LABEL_10;
  }
  return result;
}

_QWORD *Matrix.modify(along:transform:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v4;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *result;
  _QWORD v16[14];

  v9 = v4[1];
  v10 = v4[2];
  v16[11] = *v4;
  v16[12] = v9;
  v16[13] = v10;
  v11 = Matrix.number(of:)(a1);
  if (!a1)
  {
    v9 = v10;
LABEL_5:
    MEMORY[0x1E0C80A78](v11, v12);
    v16[2] = *(_QWORD *)(a4 + 16);
    v16[3] = v13;
    v16[4] = v10;
    v16[5] = v14;
    v16[6] = v9;
    v16[7] = a2;
    v16[8] = a3;
    return Matrix.withUnsafeMutableBufferPointer<A>(_:)((void (*)(_QWORD *))sub_1CA156B38, (uint64_t)v16, a4, MEMORY[0x1E0DEE9C0] + 8);
  }
  if (a1 == 1)
  {
    v10 = 1;
    goto LABEL_5;
  }
  type metadata accessor for MatrixAxis(0);
  result = (_QWORD *)sub_1CA1F130C();
  __break(1u);
  return result;
}

uint64_t sub_1CA15506C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t (*a6)(_QWORD *), uint64_t a7, uint64_t a8)
{
  uint64_t result;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD v18[3];

  result = sub_1CA1F09DC();
  if (!result)
    goto LABEL_10;
  if (a2 < 0)
  {
LABEL_9:
    __break(1u);
LABEL_10:
    __break(1u);
    return result;
  }
  if (a2)
  {
    v15 = result;
    v16 = 0;
    while (1)
    {
      v17 = v16 * a3;
      if ((unsigned __int128)(v16 * (__int128)a3) >> 64 != (v16 * a3) >> 63)
        break;
      ++v16;
      v18[0] = v15 + *(_QWORD *)(*(_QWORD *)(a8 - 8) + 72) * v17;
      v18[1] = a4;
      v18[2] = a5;
      result = a6(v18);
      if (a2 == v16)
        return result;
    }
    __break(1u);
    goto LABEL_9;
  }
  return result;
}

uint64_t Matrix.modify<A, B>(along:transform:)(_QWORD *a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t *v8;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t TupleTypeMetadata2;
  uint64_t result;
  uint64_t v29;
  _QWORD v30[14];
  _QWORD *v31;
  uint64_t *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;

  v31 = a1;
  v32 = a2;
  v15 = v8[1];
  v16 = v8[2];
  v33 = *v8;
  v34 = v15;
  v35 = v16;
  v17 = Matrix.number(of:)(a3);
  if (!a3)
  {
    v15 = v16;
LABEL_5:
    MEMORY[0x1E0C80A78](v17, v18);
    v30[2] = *(_QWORD *)(a6 + 16);
    v30[3] = a7;
    v30[4] = a8;
    v30[5] = v19;
    v30[6] = v21;
    v30[7] = v20;
    v30[8] = v16;
    v30[9] = v22;
    v30[10] = v15;
    v30[11] = a4;
    v30[12] = a5;
    type metadata accessor for Vector(255, a7, v23, v24);
    type metadata accessor for Vector(255, a8, v25, v26);
    TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
    result = (uint64_t)Matrix.withUnsafeMutableBufferPointer<A>(_:)((void (*)(_QWORD *))sub_1CA156B5C, (uint64_t)v30, a6, TupleTypeMetadata2);
    v29 = v34;
    *v31 = v33;
    *v32 = v29;
    return result;
  }
  if (a3 == 1)
  {
    v16 = 1;
    goto LABEL_5;
  }
  type metadata accessor for MatrixAxis(0);
  result = sub_1CA1F130C();
  __break(1u);
  return result;
}

_QWORD *sub_1CA1552A8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t (*a6)(_QWORD *, uint64_t, uint64_t)@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, _QWORD *a9@<X8>, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13)
{
  uint64_t v13;
  uint64_t v14;
  uint64_t AssociatedTypeWitness;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  _QWORD *v33;
  _QWORD *result;
  uint64_t v35;
  uint64_t v36;
  char *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t (*v47)(_QWORD *, uint64_t, uint64_t);
  uint64_t v48;
  _QWORD *v49;
  uint64_t v50;
  _QWORD v51[2];
  uint64_t v52;
  uint64_t v53;

  v47 = a6;
  v44 = a7;
  v45 = a8;
  v46 = a5;
  v42 = a3;
  v43 = a4;
  v36 = a2;
  v49 = a9;
  v40 = a13;
  v41 = a1;
  v38 = *(_QWORD *)(a11 - 8);
  v39 = a12;
  MEMORY[0x1E0C80A78](a1, a2);
  v37 = (char *)&v35 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v35 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v14 + 16) + 8) + 16);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  MEMORY[0x1E0C80A78](AssociatedTypeWitness, v16);
  v50 = *(_QWORD *)(a10 - 8);
  MEMORY[0x1E0C80A78](v17, v18);
  v20 = (char *)&v35 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  v21 = swift_getAssociatedTypeWitness();
  MEMORY[0x1E0C80A78](v21, v22);
  swift_getAssociatedConformanceWitness();
  sub_1CA1F1318();
  sub_1CA1F12D0();
  v23 = v36;
  v24 = sub_1CA0F45D8((uint64_t)v20, v36, a10);
  (*(void (**)(char *, uint64_t))(v50 + 8))(v20, a10);
  v53 = v24;
  swift_getAssociatedConformanceWitness();
  sub_1CA1F1318();
  v25 = (uint64_t)v37;
  sub_1CA1F12D0();
  v26 = sub_1CA0F45D8(v25, v23, a11);
  (*(void (**)(uint64_t, uint64_t))(v38 + 8))(v25, a11);
  v52 = v26;
  sub_1CA1F0BE0();
  sub_1CA1F0B44();
  v27 = v53;
  if ((_swift_isClassOrObjCExistentialType() & 1) != 0)
    v28 = v27 & 0xFFFFFFFFFFFFFF8;
  else
    v28 = v27;
  v29 = *(_QWORD *)(v28 + 16);
  if ((_swift_isClassOrObjCExistentialType() & 1) != 0)
    v30 = v27 & 0xFFFFFFFFFFFFFF8;
  else
    v30 = v27;
  v31 = v30 + ((*(unsigned __int8 *)(v50 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v50 + 80));
  v51[0] = v31;
  v51[1] = v29;
  v32 = v48;
  sub_1CA155654((uint64_t)v51, &v52, v41, v23, v42, v43, v46, v47, v44, v45, a10, a11);
  if (v32)
  {
    result = sub_1CA0F4584(v51, v31, v29);
    __break(1u);
  }
  else
  {
    sub_1CA0F4584(v51, v31, v29);
    v33 = v49 + 1;
    Vector.init(elements:)(v53, v49);
    return (_QWORD *)Vector.init(elements:)(v52, v33);
  }
  return result;
}

_QWORD *sub_1CA155654(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t (*a8)(_QWORD *, uint64_t, uint64_t), uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  uint64_t v12;
  uint64_t v13;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD *result;
  _QWORD v29[5];

  v15 = sub_1CA1F09DC();
  if (v15)
  {
    v16 = v15;
    sub_1CA1F0BE0();
    sub_1CA1F0B44();
    v17 = *a2;
    if ((_swift_isClassOrObjCExistentialType() & 1) != 0)
      v18 = v17 & 0xFFFFFFFFFFFFFF8;
    else
      v18 = v17;
    v12 = *(_QWORD *)(v18 + 16);
    if ((_swift_isClassOrObjCExistentialType() & 1) != 0)
      v19 = v17 & 0xFFFFFFFFFFFFFF8;
    else
      v19 = v17;
    v20 = *(unsigned __int8 *)(*(_QWORD *)(a12 - 8) + 80);
    v13 = v19 + ((v20 + 32) & ~v20);
    v29[0] = v13;
    v29[1] = v12;
    v21 = v29[4];
    sub_1CA1557BC((uint64_t)v29, a3, a4, a5, a6, a7, a8, a9, v16, a10, a11, a12);
    if (!v21)
      return sub_1CA0F4584(v29, v13, v12);
  }
  else
  {
    __break(1u);
  }
  result = sub_1CA0F4584(v29, v13, v12);
  __break(1u);
  return result;
}

uint64_t sub_1CA1557BC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t (*a7)(_QWORD *, uint64_t, uint64_t), uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  uint64_t result;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD v21[3];
  uint64_t (*v22)(_QWORD *, uint64_t, uint64_t);

  v22 = a7;
  result = sub_1CA1F09DC();
  if (!result)
    goto LABEL_11;
  v15 = result;
  result = sub_1CA1F09DC();
  if (!result)
  {
LABEL_12:
    __break(1u);
    return result;
  }
  if (a3 < 0)
  {
LABEL_10:
    __break(1u);
LABEL_11:
    __break(1u);
    goto LABEL_12;
  }
  if (a3)
  {
    v16 = result;
    v17 = 0;
    while ((unsigned __int128)(v17 * (__int128)a4) >> 64 == (v17 * a4) >> 63)
    {
      v18 = v17 + 1;
      v21[0] = v16 + *(_QWORD *)(*(_QWORD *)(a10 - 8) + 72) * v17 * a4;
      v21[1] = a5;
      v21[2] = a6;
      result = v22(v21, a9 + *(_QWORD *)(*(_QWORD *)(a11 - 8) + 72) * v17, v15 + *(_QWORD *)(*(_QWORD *)(a12 - 8) + 72) * v17);
      v17 = v18;
      if (a3 == v18)
        return result;
    }
    __break(1u);
    goto LABEL_10;
  }
  return result;
}

uint64_t Matrix<A>.magnitude(along:)@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v2;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int64_t v10;
  uint64_t v11;
  int64_t v12;
  uint64_t v13;
  int v14;
  uint64_t result;

  v4 = *(_QWORD *)(v2 + 8);
  v5 = *(_QWORD *)(v2 + 16);
  if (!a1)
  {
    if ((v4 & 0x8000000000000000) == 0)
    {
      if (v4)
      {
        v6 = 1;
        v7 = *(_QWORD *)(v2 + 16);
        v8 = v7;
        v5 = v4;
        goto LABEL_9;
      }
      goto LABEL_16;
    }
LABEL_22:
    sub_1CA1F11BC();
    __break(1u);
    goto LABEL_23;
  }
  if (a1 != 1)
  {
LABEL_23:
    type metadata accessor for MatrixAxis(0);
    result = sub_1CA1F130C();
    __break(1u);
    return result;
  }
  if ((v5 & 0x8000000000000000) != 0)
    goto LABEL_22;
  if (v5)
  {
    v8 = 1;
    v7 = v4;
    v6 = v5;
LABEL_9:
    swift_bridgeObjectRetain();
    v9 = sub_1CA1F0B68();
    *(_QWORD *)(v9 + 16) = v5;
    if (v7 >= (uint64_t)0xFFFFFFFF80000000)
    {
      if (v7 > 0x7FFFFFFF)
      {
LABEL_20:
        __break(1u);
        goto LABEL_21;
      }
      v10 = v6 >> 31;
      if (v6 >> 31)
      {
LABEL_21:
        __break(1u);
        goto LABEL_22;
      }
      v11 = v9;
      while ((unsigned __int128)(v10 * (__int128)v8) >> 64 == (v10 * v8) >> 63)
      {
        v12 = v10 + 1;
        v13 = v11 + 4 * v10;
        cblas_snrm2_NEWLAPACK();
        *(_DWORD *)(v13 + 32) = v14;
        v10 = v12;
        if (v5 == v12)
          goto LABEL_17;
      }
      __break(1u);
    }
    __break(1u);
    goto LABEL_20;
  }
LABEL_16:
  swift_bridgeObjectRetain();
  v5 = 0;
  v11 = MEMORY[0x1E0DEE9D8];
LABEL_17:
  *(_QWORD *)(v11 + 16) = v5;
  *a2 = v11;
  return swift_bridgeObjectRelease();
}

{
  uint64_t v2;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int64_t v10;
  uint64_t v11;
  int64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t result;

  v4 = *(_QWORD *)(v2 + 8);
  v5 = *(_QWORD *)(v2 + 16);
  if (!a1)
  {
    if ((v4 & 0x8000000000000000) == 0)
    {
      if (v4)
      {
        v6 = 1;
        v7 = *(_QWORD *)(v2 + 16);
        v8 = v7;
        v5 = v4;
        goto LABEL_9;
      }
      goto LABEL_16;
    }
LABEL_22:
    sub_1CA1F11BC();
    __break(1u);
    goto LABEL_23;
  }
  if (a1 != 1)
  {
LABEL_23:
    type metadata accessor for MatrixAxis(0);
    result = sub_1CA1F130C();
    __break(1u);
    return result;
  }
  if ((v5 & 0x8000000000000000) != 0)
    goto LABEL_22;
  if (v5)
  {
    v8 = 1;
    v7 = v4;
    v6 = v5;
LABEL_9:
    swift_bridgeObjectRetain();
    v9 = sub_1CA1F0B68();
    *(_QWORD *)(v9 + 16) = v5;
    if (v7 >= (uint64_t)0xFFFFFFFF80000000)
    {
      if (v7 > 0x7FFFFFFF)
      {
LABEL_20:
        __break(1u);
        goto LABEL_21;
      }
      v10 = v6 >> 31;
      if (v6 >> 31)
      {
LABEL_21:
        __break(1u);
        goto LABEL_22;
      }
      v11 = v9;
      while ((unsigned __int128)(v10 * (__int128)v8) >> 64 == (v10 * v8) >> 63)
      {
        v12 = v10 + 1;
        v13 = v11 + 8 * v10;
        cblas_dnrm2_NEWLAPACK();
        *(_QWORD *)(v13 + 32) = v14;
        v10 = v12;
        if (v5 == v12)
          goto LABEL_17;
      }
      __break(1u);
    }
    __break(1u);
    goto LABEL_20;
  }
LABEL_16:
  swift_bridgeObjectRetain();
  v5 = 0;
  v11 = MEMORY[0x1E0DEE9D8];
LABEL_17:
  *(_QWORD *)(v11 + 16) = v5;
  *a2 = v11;
  return swift_bridgeObjectRelease();
}

uint64_t Matrix<A>.meanAndStandardDeviation(along:)(float *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v3;
  unint64_t v6;
  float *v7;
  unint64_t v8;
  vDSP_Stride v9;
  vDSP_Length v10;
  uint64_t v11;
  int32x2_t v12;
  uint64_t v13;
  int32x2_t v14;
  uint64_t v15;
  float *v16;
  uint64_t v17;
  uint64_t result;
  char **v19;
  uint64_t *v20;
  char *v21;

  v7 = *(float **)v3;
  v6 = *(_QWORD *)(v3 + 8);
  v8 = *(_QWORD *)(v3 + 16);
  if (!a3)
  {
    v9 = 1;
    v10 = *(_QWORD *)(v3 + 16);
    v11 = v10;
    goto LABEL_5;
  }
  if (a3 == 1)
  {
    v11 = 1;
    v10 = v6;
    v9 = v8;
    v6 = v8;
LABEL_5:
    swift_bridgeObjectRetain();
    v12.i32[0] = 0;
    v13 = sub_1CA0B4560(v6, v12);
    v14.i32[0] = 0;
    v15 = sub_1CA0B4560(v6, v14);
    v21 = (char *)v13;
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      goto LABEL_15;
    while (1)
    {
      v19 = (char **)a1;
      v20 = a2;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) != 0)
      {
        if ((v6 & 0x8000000000000000) != 0)
          goto LABEL_17;
      }
      else
      {
        v15 = (uint64_t)sub_1CA0B6080(v15);
        if ((v6 & 0x8000000000000000) != 0)
        {
LABEL_17:
          __break(1u);
LABEL_18:
          sub_1CA1F11BC();
          __break(1u);
          break;
        }
      }
      if (!v6)
      {
LABEL_13:
        result = swift_bridgeObjectRelease();
        *v19 = v21;
        *v20 = v15;
        return result;
      }
      a2 = 0;
      a1 = v7 + 8;
      v7 = (float *)(v21 + 32);
      v16 = (float *)(v15 + 32);
      while (1)
      {
        v17 = (_QWORD)a2 * v11;
        if ((unsigned __int128)((uint64_t)a2 * (__int128)v11) >> 64 != ((uint64_t)a2 * v11) >> 63)
          break;
        if ((v10 & 0x8000000000000000) != 0)
          goto LABEL_18;
        a2 = (uint64_t *)((char *)a2 + 1);
        vDSP_normalize(&a1[v17], v9, 0, 1, v7++, v16++, v10);
        if ((uint64_t *)v6 == a2)
          goto LABEL_13;
      }
      __break(1u);
LABEL_15:
      v21 = sub_1CA0B6080((uint64_t)v21);
    }
  }
  type metadata accessor for MatrixAxis(0);
  result = sub_1CA1F130C();
  __break(1u);
  return result;
}

void Matrix<A>.normalizeMeanAndStandardDeviation(along:)(vDSP_Length a1)
{
  uint64_t v1;
  char *v2;
  vDSP_Length v3;
  vDSP_Length v4;
  vDSP_Stride v5;
  vDSP_Length v6;
  uint64_t v7;
  vDSP_Stride v8;
  uint64_t v9;
  uint64_t v10;
  float __StandardDeviation;
  _QWORD __Mean[2];

  __Mean[1] = *MEMORY[0x1E0C80C00];
  v2 = *(char **)v1;
  v3 = *(_QWORD *)(v1 + 8);
  v4 = *(_QWORD *)(v1 + 16);
  if (!a1)
  {
    v5 = 1;
    v6 = *(_QWORD *)(v1 + 16);
    v7 = v6;
    v8 = *(_QWORD *)(v1 + 8);
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      goto LABEL_15;
    v6 = v4;
    v7 = v4;
    v4 = v3;
    if ((v3 & 0x8000000000000000) == 0)
      goto LABEL_8;
LABEL_16:
    __break(1u);
  }
  v6 = a1;
  if (a1 != 1)
    goto LABEL_18;
  v7 = 1;
  v6 = *(_QWORD *)(v1 + 8);
  v8 = *(_QWORD *)(v1 + 16);
  v5 = v8;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    goto LABEL_15;
  v6 = v3;
  v5 = v4;
  if ((v4 & 0x8000000000000000) != 0)
    goto LABEL_16;
LABEL_8:
  if (!v4)
  {
LABEL_13:
    *(_QWORD *)v1 = v2;
    return;
  }
  v9 = 0;
  v8 = (vDSP_Stride)(v2 + 32);
  while (1)
  {
    v10 = v9 * v7;
    if ((unsigned __int128)(v9 * (__int128)v7) >> 64 != (v9 * v7) >> 63)
    {
      __break(1u);
LABEL_15:
      v2 = sub_1CA0B6080((uint64_t)v2);
      v4 = v8;
      if (v8 < 0)
        goto LABEL_16;
      goto LABEL_8;
    }
    __StandardDeviation = 0.0;
    LODWORD(__Mean[0]) = 0;
    if ((v6 & 0x8000000000000000) != 0)
      break;
    ++v9;
    vDSP_normalize((const float *)(v8 + 4 * v10), v5, (float *)(v8 + 4 * v10), v5, (float *)__Mean, &__StandardDeviation, v6);
    if (v4 == v9)
      goto LABEL_13;
  }
  sub_1CA1F11BC();
  __break(1u);
LABEL_18:
  type metadata accessor for MatrixAxis(0);
  __Mean[0] = v6;
  swift_bridgeObjectRetain();
  sub_1CA1F130C();
  __break(1u);
}

void Matrix<A>.normalizeAndReturnMeanAndStandardDeviation(along:)(float *a1, uint64_t *a2, uint64_t a3)
{
  char *v3;
  unint64_t v5;
  char *v6;
  unint64_t v7;
  int32x2_t v8;
  vDSP_Stride v9;
  vDSP_Length v10;
  uint64_t v11;
  float *v12;
  uint64_t v13;
  int32x2_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  _QWORD *v19;
  char *v21;

  v6 = *(char **)v3;
  v5 = *((_QWORD *)v3 + 1);
  v7 = *((_QWORD *)v3 + 2);
  if (!a3)
  {
    v9 = 1;
    v10 = *((_QWORD *)v3 + 2);
    v11 = v10;
    v12 = (float *)*((_QWORD *)v3 + 1);
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      goto LABEL_18;
    v10 = v7;
    v11 = v7;
    v7 = v5;
    goto LABEL_7;
  }
  if (a3 != 1)
    goto LABEL_22;
  v11 = 1;
  v10 = *((_QWORD *)v3 + 1);
  v12 = (float *)*((_QWORD *)v3 + 2);
  v9 = (vDSP_Stride)v12;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    goto LABEL_18;
  v10 = v5;
  v9 = v7;
  while (1)
  {
LABEL_7:
    v8.i32[0] = 0;
    v13 = sub_1CA0B4560(v7, v8);
    v14.i32[0] = 0;
    v15 = sub_1CA0B4560(v7, v14);
    v21 = (char *)v13;
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      v21 = sub_1CA0B6080(v13);
    v18 = a1;
    v19 = v3;
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      break;
    if ((v7 & 0x8000000000000000) != 0)
      goto LABEL_20;
LABEL_11:
    v3 = v6;
    if (!v7)
    {
LABEL_16:
      *v19 = v3;
      *v18 = v21;
      *a2 = v15;
      return;
    }
    v16 = 0;
    v6 += 32;
    a1 = (float *)(v21 + 32);
    v12 = (float *)(v15 + 32);
    while (1)
    {
      v17 = v16 * v11;
      if ((unsigned __int128)(v16 * (__int128)v11) >> 64 != (v16 * v11) >> 63)
        break;
      if ((v10 & 0x8000000000000000) != 0)
        goto LABEL_21;
      ++v16;
      vDSP_normalize((const float *)&v6[4 * v17], v9, (float *)&v6[4 * v17], v9, a1++, v12++, v10);
      if (v7 == v16)
        goto LABEL_16;
    }
    __break(1u);
LABEL_18:
    v6 = sub_1CA0B6080((uint64_t)v6);
    v7 = (unint64_t)v12;
  }
  v15 = (uint64_t)sub_1CA0B6080(v15);
  if ((v7 & 0x8000000000000000) == 0)
    goto LABEL_11;
LABEL_20:
  __break(1u);
LABEL_21:
  sub_1CA1F11BC();
  __break(1u);
LABEL_22:
  type metadata accessor for MatrixAxis(0);
  swift_bridgeObjectRetain();
  sub_1CA1F130C();
  __break(1u);
}

void Matrix<A>.divide(by:along:)(uint64_t *a1, vDSP_Stride a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v6;
  char *v7;
  vDSP_Length v8;
  vDSP_Length v9;
  vDSP_Length v10;
  vDSP_Length v11;
  vDSP_Length v12;
  unint64_t v13;
  float __B[2];
  uint64_t v15;

  v15 = *MEMORY[0x1E0C80C00];
  v6 = *a1;
  v7 = *(char **)v2;
  v8 = *(_QWORD *)(v2 + 8);
  v9 = *(_QWORD *)(v2 + 16);
  type metadata accessor for MatrixAxis(0);
  v11 = v10;
  v12 = v8;
  if (a2)
  {
    v12 = v9;
    if (a2 != 1)
    {
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      sub_1CA1F130C();
      __break(1u);
      return;
    }
  }
  if (v12 != *(_QWORD *)(v6 + 16))
    goto LABEL_22;
  if (!a2)
  {
    a2 = 1;
    v11 = v9;
    v3 = v9;
    v4 = v8;
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      goto LABEL_23;
    v11 = v9;
    v3 = v9;
    v9 = v8;
    if ((v8 & 0x8000000000000000) == 0)
      goto LABEL_10;
LABEL_24:
    __break(1u);
  }
  v3 = 1;
  v11 = v8;
  v4 = v9;
  a2 = v9;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    goto LABEL_23;
  v11 = v8;
  a2 = v9;
  if ((v9 & 0x8000000000000000) != 0)
    goto LABEL_24;
LABEL_10:
  if (!v9)
    goto LABEL_19;
  v13 = 0;
  v4 = (unint64_t)(v7 + 32);
  while (1)
  {
    if ((unsigned __int128)((uint64_t)v13 * (__int128)v3) >> 64 != (uint64_t)(v13 * v3) >> 63)
    {
      __break(1u);
LABEL_21:
      __break(1u);
LABEL_22:
      __break(1u);
LABEL_23:
      v7 = sub_1CA0B6080((uint64_t)v7);
      v9 = v4;
      if ((v4 & 0x8000000000000000) != 0)
        goto LABEL_24;
      goto LABEL_10;
    }
    if (v13 >= *(_QWORD *)(v6 + 16))
      goto LABEL_21;
    __B[0] = *(float *)(v6 + 32 + 4 * v13);
    if (__B[0] != 0.0)
      break;
LABEL_13:
    if (v9 == ++v13)
      goto LABEL_19;
  }
  if ((v11 & 0x8000000000000000) == 0)
  {
    vDSP_vsdiv((const float *)(v4 + 4 * v13 * v3), a2, __B, (float *)(v4 + 4 * v13 * v3), a2, v11);
    goto LABEL_13;
  }
  sub_1CA1F11BC();
  __break(1u);
LABEL_19:
  *(_QWORD *)v2 = v7;
}

{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v6;
  _QWORD *v7;
  vDSP_Length v8;
  vDSP_Length v9;
  vDSP_Length v10;
  vDSP_Length v11;
  vDSP_Length v12;
  unint64_t v13;
  double __B[2];

  __B[1] = *(double *)MEMORY[0x1E0C80C00];
  v6 = *a1;
  v7 = *(_QWORD **)v2;
  v8 = *(_QWORD *)(v2 + 8);
  v9 = *(_QWORD *)(v2 + 16);
  type metadata accessor for MatrixAxis(0);
  v11 = v10;
  v12 = v8;
  if (a2)
  {
    v12 = v9;
    if (a2 != 1)
    {
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      sub_1CA1F130C();
      __break(1u);
      return;
    }
  }
  if (v12 != *(_QWORD *)(v6 + 16))
    goto LABEL_22;
  if (!a2)
  {
    a2 = 1;
    v11 = v9;
    v3 = v9;
    v4 = v8;
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      goto LABEL_23;
    v11 = v9;
    v3 = v9;
    v9 = v8;
    if ((v8 & 0x8000000000000000) == 0)
      goto LABEL_10;
LABEL_24:
    __break(1u);
  }
  v3 = 1;
  v11 = v8;
  v4 = v9;
  a2 = v9;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    goto LABEL_23;
  v11 = v8;
  a2 = v9;
  if ((v9 & 0x8000000000000000) != 0)
    goto LABEL_24;
LABEL_10:
  if (!v9)
    goto LABEL_19;
  v13 = 0;
  v4 = (unint64_t)(v7 + 4);
  while (1)
  {
    if ((unsigned __int128)((uint64_t)v13 * (__int128)v3) >> 64 != (uint64_t)(v13 * v3) >> 63)
    {
      __break(1u);
LABEL_21:
      __break(1u);
LABEL_22:
      __break(1u);
LABEL_23:
      v7 = sub_1CA0B6058(v7);
      v9 = v4;
      if ((v4 & 0x8000000000000000) != 0)
        goto LABEL_24;
      goto LABEL_10;
    }
    if (v13 >= *(_QWORD *)(v6 + 16))
      goto LABEL_21;
    __B[0] = *(double *)(v6 + 32 + 8 * v13);
    if (__B[0] != 0.0)
      break;
LABEL_13:
    if (v9 == ++v13)
      goto LABEL_19;
  }
  if ((v11 & 0x8000000000000000) == 0)
  {
    vDSP_vsdivD((const double *)(v4 + 8 * v13 * v3), a2, __B, (double *)(v4 + 8 * v13 * v3), a2, v11);
    goto LABEL_13;
  }
  sub_1CA1F11BC();
  __break(1u);
LABEL_19:
  *(_QWORD *)v2 = v7;
}

uint64_t sub_1CA156288@<X0>(uint64_t a1@<X0>, void (*a2)(uint64_t, uint64_t, uint64_t, uint64_t)@<X1>, uint64_t *a3@<X8>)
{
  uint64_t *v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t result;
  uint64_t *v17;

  v7 = *v3;
  v6 = v3[1];
  v8 = v3[2];
  if (!a1)
  {
    if ((v6 & 0x8000000000000000) == 0)
    {
      if (v6)
      {
        v17 = a3;
        v9 = 1;
        v10 = v3[2];
        v11 = v10;
        v8 = v6;
        goto LABEL_9;
      }
      goto LABEL_14;
    }
LABEL_18:
    sub_1CA1F11BC();
    __break(1u);
    goto LABEL_19;
  }
  if (a1 != 1)
  {
LABEL_19:
    type metadata accessor for MatrixAxis(0);
    result = sub_1CA1F130C();
    __break(1u);
    return result;
  }
  if (v8 < 0)
    goto LABEL_18;
  if (v8)
  {
    v17 = a3;
    v11 = 1;
    v10 = v6;
    v9 = v8;
LABEL_9:
    swift_bridgeObjectRetain();
    v12 = sub_1CA1F0B68();
    v13 = 0;
    *(_QWORD *)(v12 + 16) = v8;
    v14 = v12 + 32;
    while (1)
    {
      v15 = v13 * v11;
      if ((unsigned __int128)(v13 * (__int128)v11) >> 64 != (v13 * v11) >> 63)
        break;
      if (v10 < 0)
        goto LABEL_17;
      ++v13;
      a2(v7 + 32 + 8 * v15, v9, v14, v10);
      v14 += 8;
      if (v8 == v13)
      {
        a3 = v17;
        goto LABEL_15;
      }
    }
    __break(1u);
LABEL_17:
    sub_1CA1F11BC();
    __break(1u);
    goto LABEL_18;
  }
LABEL_14:
  swift_bridgeObjectRetain();
  v8 = 0;
  v12 = MEMORY[0x1E0DEE9D8];
LABEL_15:
  *(_QWORD *)(v12 + 16) = v8;
  *a3 = v12;
  return swift_bridgeObjectRelease();
}

BOOL sub_1CA15682C(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v3 = *(_QWORD *)(v1 + 16);
  v2 = *(_QWORD *)(v1 + 24);
  v4 = MEMORY[0x1CAA4A2A0](*a1, v3);
  return v4 == MEMORY[0x1CAA4A2A0](v2, v3);
}

uint64_t sub_1CA15687C()
{
  swift_bridgeObjectRelease();
  return swift_deallocObject();
}

uint64_t sub_1CA1568A0@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v2;

  return sub_1CA153324(a1, *(_QWORD *)(v2 + 40), a2);
}

unint64_t sub_1CA1568AC()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1EF93AEE8;
  if (!qword_1EF93AEE8)
  {
    v1 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_1EF93AEE0);
    result = MEMORY[0x1CAA4BB30](MEMORY[0x1E0DEC330], v1);
    atomic_store(result, (unint64_t *)&qword_1EF93AEE8);
  }
  return result;
}

uint64_t type metadata accessor for Matrix.Shape(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for Matrix.Shape);
}

unint64_t sub_1CA156904()
{
  unint64_t result;
  uint64_t v1;
  unint64_t v2;
  _QWORD v3[2];

  result = qword_1EF93AEF0;
  if (!qword_1EF93AEF0)
  {
    v1 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_1EF938540);
    v2 = sub_1CA0AB20C();
    v3[0] = MEMORY[0x1E0DEB458];
    v3[1] = v2;
    result = MEMORY[0x1CAA4BB30](MEMORY[0x1E0DEB8A0], v1, v3);
    atomic_store(result, (unint64_t *)&qword_1EF93AEF0);
  }
  return result;
}

uint64_t sub_1CA156970(uint64_t a1, Swift::Int row, Swift::Int column, uint64_t a4)
{
  uint64_t *v4;
  Swift::Int v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char isClassOrObjCExistentialType;
  uint64_t v12;

  v7 = Matrix.position(row:column:)(row, column);
  v8 = *(_QWORD *)(a4 + 16);
  v9 = sub_1CA1F0BE0();
  sub_1CA1F0B44();
  v10 = *v4;
  sub_1CA0E649C(v7, v10);
  isClassOrObjCExistentialType = _swift_isClassOrObjCExistentialType();
  v12 = v10 & 0xFFFFFFFFFFFFFF8;
  if ((isClassOrObjCExistentialType & 1) == 0)
    v12 = v10;
  (*(void (**)(unint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 24))(v12+ ((*(unsigned __int8 *)(*(_QWORD *)(v8 - 8) + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(_QWORD *)(v8 - 8) + 80))+ *(_QWORD *)(*(_QWORD *)(v8 - 8) + 72) * v7, a1, v8);
  return nullsub_1(v9);
}

uint64_t sub_1CA156A48(uint64_t a1, _QWORD *a2)
{
  uint64_t *v2;

  return sub_1CA153960(a1, a2, v2[3], v2[4], v2[5], v2[6], v2[7], v2[8], v2[9], v2[10], v2[2]);
}

uint64_t sub_1CA156A80(uint64_t a1, _QWORD *a2)
{
  uint64_t v2;

  return sub_1CA153BC8(a1, a2, *(_QWORD *)(v2 + 24), *(_QWORD *)(v2 + 32), *(_QWORD *)(v2 + 40), *(_QWORD *)(v2 + 48), *(_QWORD *)(v2 + 56), *(_QWORD *)(v2 + 64), *(_QWORD *)(v2 + 72), *(_QWORD *)(v2 + 80), *(_OWORD *)(v2 + 88), *(_QWORD *)(v2 + 104), *(_QWORD *)(v2 + 112), *(_QWORD *)(v2 + 16));
}

uint64_t type metadata accessor for Matrix(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for Matrix);
}

uint64_t sub_1CA156AD0@<X0>(_QWORD *a1@<X8>)
{
  return sub_1CA1545B8(a1);
}

_QWORD *sub_1CA156B00@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  uint64_t v3;

  return sub_1CA15491C(a1, a2, *(_QWORD *)(v3 + 56), *(_QWORD *)(v3 + 64), *(_QWORD *)(v3 + 72), *(_QWORD *)(v3 + 80), *(uint64_t (**)(_QWORD *, uint64_t, uint64_t))(v3 + 88), *(_QWORD *)(v3 + 96), a3, *(_QWORD *)(v3 + 16), *(_QWORD *)(v3 + 24), *(_QWORD *)(v3 + 32), *(_QWORD *)(v3 + 40), *(_QWORD *)(v3 + 48));
}

uint64_t sub_1CA156B38(uint64_t a1)
{
  uint64_t v1;

  return sub_1CA15506C(a1, *(_QWORD *)(v1 + 24), *(_QWORD *)(v1 + 32), *(_QWORD *)(v1 + 40), *(_QWORD *)(v1 + 48), *(uint64_t (**)(_QWORD *))(v1 + 56), *(_QWORD *)(v1 + 64), *(_QWORD *)(v1 + 16));
}

_QWORD *sub_1CA156B5C@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;

  return sub_1CA1552A8(a1, *(_QWORD *)(v2 + 56), *(_QWORD *)(v2 + 64), *(_QWORD *)(v2 + 72), *(_QWORD *)(v2 + 80), *(uint64_t (**)(_QWORD *, uint64_t, uint64_t))(v2 + 88), *(_QWORD *)(v2 + 96), *(_QWORD *)(v2 + 16), a2, *(_QWORD *)(v2 + 24), *(_QWORD *)(v2 + 32), *(_QWORD *)(v2 + 40), *(_QWORD *)(v2 + 48));
}

void sub_1CA156B98()
{
  JUMPOUT(0x1CAA4BB30);
}

uint64_t sub_1CA156BA8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;

  v4 = *(_QWORD *)(*(_QWORD *)(a3 - 8) + 8);
  return MEMORY[0x1CAA4BB30](&protocol conformance descriptor for <A> Matrix<A>, a1, &v4);
}

uint64_t sub_1CA156BE0(uint64_t a1)
{
  uint64_t result;

  result = MEMORY[0x1CAA4BB30](&protocol conformance descriptor for Matrix<A>);
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

void sub_1CA156C0C()
{
  JUMPOUT(0x1CAA4BB30);
}

uint64_t sub_1CA156C20(uint64_t a1, uint64_t a2, Swift::Int *a3, uint64_t a4)
{
  Swift::Int v5;
  Swift::Int v6;
  uint64_t v7;

  v5 = *a3;
  v6 = a3[1];
  v7 = type metadata accessor for Matrix(0, *(Swift::Int *)((char *)a3 + a4 - 8), (uint64_t)a3, a4);
  return sub_1CA156970(a1, v5, v6, v7);
}

uint64_t sub_1CA156C70()
{
  return 8;
}

_QWORD *sub_1CA156C7C(_QWORD *result, _QWORD *a2)
{
  *a2 = *result;
  return result;
}

uint64_t sub_1CA156C88(uint64_t a1, uint64_t a2)
{
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  swift_bridgeObjectRetain();
  return a1;
}

_QWORD *sub_1CA156CBC(_QWORD *a1, _QWORD *a2)
{
  *a1 = *a2;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[1] = a2[1];
  a1[2] = a2[2];
  return a1;
}

uint64_t sub_1CA156D10(uint64_t a1, uint64_t a2)
{
  *(_QWORD *)a1 = *(_QWORD *)a2;
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  return a1;
}

uint64_t type metadata accessor for Matrix.Slice(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for Matrix.Slice);
}

uint64_t sub_1CA156D60(uint64_t a1, int a2)
{
  int v3;

  if (!a2)
    return 0;
  if (a2 != 1 && *(_BYTE *)(a1 + 24))
    return (*(_DWORD *)a1 + 2);
  if (*(_QWORD *)a1)
    v3 = -1;
  else
    v3 = 0;
  return (v3 + 1);
}

uint64_t sub_1CA156DA4(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 1)
  {
    *(_QWORD *)(result + 8) = 0;
    *(_QWORD *)(result + 16) = 0;
    *(_QWORD *)result = a2 - 2;
    if (a3 >= 2)
      *(_BYTE *)(result + 24) = 1;
  }
  else
  {
    if (a3 >= 2)
      *(_BYTE *)(result + 24) = 0;
    if (a2)
      *(_QWORD *)result = 0;
  }
  return result;
}

uint64_t type metadata accessor for Matrix.MutableSlice(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for Matrix.MutableSlice);
}

uint64_t sub_1CA156DF0(uint64_t a1, _QWORD *a2)
{
  uint64_t v2;

  return sub_1CA154694(a1, a2, *(_QWORD *)(v2 + 32), *(_QWORD *)(v2 + 40), *(_QWORD *)(v2 + 48), *(_QWORD *)(v2 + 56), *(_QWORD *)(v2 + 64), *(uint64_t (**)(_QWORD *, uint64_t))(v2 + 72), *(_QWORD *)(v2 + 80), *(_QWORD *)(v2 + 16), *(_QWORD *)(v2 + 24));
}

uint64_t sub_1CA156E28(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  return sub_1CA153C90(a1, a2, *(_QWORD *)(v2 + 24), *(_QWORD *)(v2 + 32), *(_QWORD *)(v2 + 40), *(_QWORD *)(v2 + 48), *(_QWORD *)(v2 + 56), *(_QWORD *)(v2 + 64), *(_OWORD *)(v2 + 72), *(_QWORD *)(v2 + 88), *(_QWORD *)(v2 + 96), *(_QWORD *)(v2 + 16));
}

uint64_t sub_1CA156E64(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;

  return sub_1CA153D38(a1, a2, v2[3], v2[4], v2[5], v2[6], v2[7], v2[8], v2[9], v2[10], v2[11], v2[2]);
}

uint64_t sub_1CA156EA0(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;

  return sub_1CA153A20(a1, a2, v2[3], v2[4], v2[5], v2[6], v2[7], v2[8], v2[2]);
}

uint64_t sub_1CA156ED0(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;

  return sub_1CA153AB8(a1, a2, v2[3], v2[4], v2[5], v2[6], v2[7], v2[8], v2[9], v2[2]);
}

uint64_t Filter<A>.outRelation.getter(uint64_t a1, uint64_t a2)
{
  return sub_1CA157008(a1, a2, (void (*)(_QWORD *, _QWORD, uint64_t))NeighborRelationOut.init(with:));
}

uint64_t Filter<A>.inRelation.getter(uint64_t a1, uint64_t a2)
{
  return sub_1CA157008(a1, a2, (void (*)(_QWORD *, _QWORD, uint64_t))NeighborRelationIn.init(with:));
}

uint64_t sub_1CA157008(uint64_t a1, uint64_t a2, void (*a3)(_QWORD *, _QWORD, uint64_t))
{
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD v8[3];

  v4 = *v3;
  v5 = v3[1];
  v6 = v3[2];
  v8[0] = v4;
  v8[1] = v5;
  v8[2] = v6;
  a3(v8, *(_QWORD *)(a1 + 16), a2);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return swift_bridgeObjectRetain();
}

uint64_t dispatch thunk of EdgeFilter.allOfLabels.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 8))();
}

uint64_t dispatch thunk of EdgeFilter.anyOfLabels.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 16))();
}

uint64_t dispatch thunk of EdgeFilter.properties.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 24))();
}

uint64_t dispatch thunk of EdgeFilter.kgFilter.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 32))();
}

void sub_1CA15925C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,char a46)
{
  _Block_object_dispose(&a46, 8);
  _Unwind_Resume(a1);
}

void sub_1CA15A6B4(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1CA15A714(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1CA15A770(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1CA15A820(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1CA15A888(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1CA15AA0C(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1CA15BCF0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1CA15BDB8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1CA15C0C0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void degas::literalBitmapUnionStep(degas *this, sqlite3_context *a2, sqlite3_value **a3, sqlite3_value **a4)
{
  int v5;
  degas::Bitmap **v6;
  _OWORD *v7;
  const void *v8;

  v5 = (int)a2;
  v6 = (degas::Bitmap **)sqlite3_aggregate_context(this, 8);
  if (!*v6)
  {
    v7 = (_OWORD *)operator new();
    *v7 = 0u;
    v7[1] = 0u;
    *(_OWORD *)((char *)v7 + 25) = 0u;
    *v6 = (degas::Bitmap *)v7;
  }
  if (v5 == 1)
  {
    v8 = sqlite3_value_blob(*a3);
    degas::Bitmap::unionWith<degas::LiteralBitmap>(*v6, (uint64_t)v8);
  }
}

void degas::Bitmap::unionWith<degas::LiteralBitmap>(degas::Bitmap *this, uint64_t a2)
{
  unint64_t v2;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;

  v8 = 0;
  v9 = 0;
  v2 = *(unsigned int *)(a2 + 4);
  if ((_DWORD)v2)
  {
    v5 = 0;
    do
    {
      v6 = *((_QWORD *)this + 2);
      if (v9 >= (*((_QWORD *)this + 3) - v6) >> 4)
        break;
      degas::Bitmap::mergeBitset(this, &v9, *(degas::Bitset **)(v6 + 16 * v9), &v8, (const degas::Bitset *)(a2 + 144 * v5 + 8));
      v5 = v8;
    }
    while (v8 < v2);
    v7 = *(unsigned int *)(a2 + 4);
    if (v5 < v7)
    {
      do
        degas::Bitmap::appendBitset(this, (const degas::Bitset *)(a2 + 144 * v5++ + 8));
      while (v7 != v5);
    }
  }
}

void degas::literalBitmapUnionFinal(degas *this, sqlite3_context *a2)
{
  degas::LiteralBitmap **v3;
  const Bitmap *v4;
  degas::LiteralBitmap **v5;
  degas::LiteralBitmap *v6;
  char *v7;
  char *v8;
  degas::LiteralBitmap *v9;
  void **v10;

  v3 = (degas::LiteralBitmap **)sqlite3_aggregate_context(this, 8);
  v5 = v3;
  v6 = *v3;
  if (*v3)
  {
    degas::LiteralBitmap::makeLiteralBitmap(*v3, v4);
    v8 = v7;
  }
  else
  {
    degas::LiteralBitmap::emptyBitmap((degas::LiteralBitmap *)v3);
    v8 = &degas::LiteralBitmap::emptyBitmap(void)::bitmap;
  }
  sqlite3_result_blob(this, v8, (144 * *((_DWORD *)v8 + 1)) | 8, (void (__cdecl *)(void *))0xFFFFFFFFFFFFFFFFLL);
  if (v6)
    MEMORY[0x1CAA4ADC8](v8, 0x1000C4000313F17);
  v9 = *v5;
  if (*v5)
  {
    v10 = (void **)((char *)v9 + 16);
    std::vector<degas::BitsetPtr>::__destroy_vector::operator()[abi:ne180100](&v10);
    MEMORY[0x1CAA4ADC8](v9, 0x1020C40C46AEF4ELL);
    *v5 = 0;
  }
}

void std::vector<degas::BitsetPtr>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  void **v1;
  char *v2;
  char *v4;
  void *v5;

  v1 = *a1;
  v2 = (char *)**a1;
  if (v2)
  {
    v4 = (char *)v1[1];
    v5 = **a1;
    if (v4 != v2)
    {
      do
      {
        degas::BitsetPtr::releaseBitset((degas::BitsetPtr *)(v4 - 16));
        *((_QWORD *)v4 - 1) = 0;
        v4 -= 16;
      }
      while (v4 != v2);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

uint64_t degas::createLiteralBitmapUnionFunction(degas *this, sqlite3 *a2)
{
  return sqlite3_create_function(this, "literalBitmapUnion", 1, 1, 0, 0, (void (__cdecl *)(sqlite3_context *, int, sqlite3_value **))degas::literalBitmapUnionStep, (void (__cdecl *)(sqlite3_context *))degas::literalBitmapUnionFinal);
}

void degas::literalBitmapIntersectionStep(degas *this, sqlite3_context *a2, sqlite3_value **a3, sqlite3_value **a4)
{
  int v5;
  uint64_t *v6;
  _OWORD *v7;
  degas::LiteralBitmap *v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  degas::LiteralBitmap *v12;
  unint64_t Offset;
  unint64_t v14;
  degas::BitsetPtr *v15;
  uint64_t v16;
  degas::Bitset **v17;
  int v18;
  unint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;

  v5 = (int)a2;
  v6 = (uint64_t *)sqlite3_aggregate_context(this, 8);
  if (!*v6)
  {
    v7 = (_OWORD *)operator new();
    *v7 = 0u;
    v7[1] = 0u;
    *(_OWORD *)((char *)v7 + 25) = 0u;
    *v6 = (uint64_t)v7;
  }
  if (v5 != 1)
    return;
  v8 = (degas::LiteralBitmap *)sqlite3_value_blob(*a3);
  v9 = *v6;
  v22 = 0;
  v23 = 0;
  v10 = *((unsigned int *)v8 + 1);
  if (!(_DWORD)v10)
  {
    v20 = (_QWORD *)(v9 + 24);
    v21 = *(_QWORD *)(v9 + 24);
    v11 = *(_QWORD *)(v9 + 16);
    *(_QWORD *)v9 = 0;
    for (*(_QWORD *)(v9 + 8) = 0; v21 != v11; v21 -= 16)
    {
      degas::BitsetPtr::releaseBitset((degas::BitsetPtr *)(v21 - 16));
      *(_QWORD *)(v21 - 8) = 0;
    }
    goto LABEL_16;
  }
  v11 = *(_QWORD *)(v9 + 16);
  if (v11 == *(_QWORD *)(v9 + 24))
  {
    v20 = (_QWORD *)(v9 + 24);
    *(_QWORD *)v9 = 0;
    *(_QWORD *)(v9 + 8) = 0;
LABEL_16:
    *v20 = v11;
    return;
  }
  v12 = v8;
  LODWORD(Offset) = 0;
  while (1)
  {
    v14 = v23;
    v16 = *(_QWORD *)(v9 + 16);
    v15 = *(degas::BitsetPtr **)(v9 + 24);
    if (v23 >= ((uint64_t)v15 - v16) >> 4)
      break;
    v17 = (degas::Bitset **)(v16 + 16 * v23);
    v18 = degas::Bitmap::intersectBitset((degas::BitsetPtr **)v9, &v23, *v17, &v22, (degas::LiteralBitmap *)((char *)v12 + 144 * Offset + 8));
    Offset = v22;
    if (v18)
    {
      Offset = degas::LiteralBitmap::findOffset(v12, *((_QWORD *)*v17 + 1), v22, v10);
      v22 = Offset;
    }
    if (Offset >= v10)
    {
      v14 = v23;
      v16 = *(_QWORD *)(v9 + 16);
      v15 = *(degas::BitsetPtr **)(v9 + 24);
      v19 = ((uint64_t)v15 - v16) >> 4;
      goto LABEL_18;
    }
  }
  v19 = ((uint64_t)v15 - v16) >> 4;
LABEL_18:
  if (v14 < v19)
  {
    std::vector<degas::BitsetPtr>::erase(v9 + 16, (degas::BitsetPtr *)(v16 + 16 * v14), v15);
    *(_QWORD *)v9 = 0xFFFFFFFFLL;
    *(_BYTE *)(v9 + 40) = 1;
  }
}

void std::vector<degas::BitsetPtr>::erase(uint64_t a1, degas::BitsetPtr *this, degas::BitsetPtr *a3)
{
  degas::BitsetPtr *v3;
  degas::BitsetPtr *v5;
  degas::BitsetPtr *v6;
  uint64_t v7;
  __int128 v8;

  if (this != a3)
  {
    v3 = this;
    v5 = a3;
    v6 = *(degas::BitsetPtr **)(a1 + 8);
    if (a3 != v6)
    {
      v7 = 16 * ((a3 - this) >> 4);
      do
      {
        degas::BitsetPtr::releaseBitset(v3);
        v8 = *(_OWORD *)((char *)v3 + v7);
        *(_OWORD *)v3 = v8;
        if ((_QWORD)v8)
          ++*(_DWORD *)v8;
        v3 = (degas::BitsetPtr *)((char *)v3 + 16);
      }
      while ((degas::BitsetPtr *)((char *)v3 + v7) != v6);
      v5 = *(degas::BitsetPtr **)(a1 + 8);
    }
    for (; v5 != v3; v5 = (degas::BitsetPtr *)((char *)v5 - 16))
    {
      degas::BitsetPtr::releaseBitset((degas::BitsetPtr *)((char *)v5 - 16));
      *((_QWORD *)v5 - 1) = 0;
    }
    *(_QWORD *)(a1 + 8) = v3;
  }
}

void degas::literalBitmapIntersectionFinal(degas *this, sqlite3_context *a2)
{
  degas::LiteralBitmap **v3;
  const Bitmap *v4;
  degas::LiteralBitmap **v5;
  degas::LiteralBitmap *v6;
  char *v7;
  char *v8;
  degas::LiteralBitmap *v9;
  void **v10;

  v3 = (degas::LiteralBitmap **)sqlite3_aggregate_context(this, 8);
  v5 = v3;
  v6 = *v3;
  if (*v3)
  {
    degas::LiteralBitmap::makeLiteralBitmap(*v3, v4);
    v8 = v7;
  }
  else
  {
    degas::LiteralBitmap::emptyBitmap((degas::LiteralBitmap *)v3);
    v8 = &degas::LiteralBitmap::emptyBitmap(void)::bitmap;
  }
  sqlite3_result_blob(this, v8, (144 * *((_DWORD *)v8 + 1)) | 8, (void (__cdecl *)(void *))0xFFFFFFFFFFFFFFFFLL);
  if (v6)
    MEMORY[0x1CAA4ADC8](v8, 0x1000C4000313F17);
  v9 = *v5;
  if (*v5)
  {
    v10 = (void **)((char *)v9 + 16);
    std::vector<degas::BitsetPtr>::__destroy_vector::operator()[abi:ne180100](&v10);
    MEMORY[0x1CAA4ADC8](v9, 0x1020C40C46AEF4ELL);
    *v5 = 0;
  }
}

uint64_t degas::createLiteralBitmapIntersectionFunction(degas *this, sqlite3 *a2)
{
  return sqlite3_create_function(this, "literalBitmapIntersection", 1, 1, 0, 0, (void (__cdecl *)(sqlite3_context *, int, sqlite3_value **))degas::literalBitmapIntersectionStep, (void (__cdecl *)(sqlite3_context *))degas::literalBitmapIntersectionFinal);
}

_OWORD *degas::mergeLiteralBitmapStep(degas *this, sqlite3_context *a2, sqlite3_value **a3, sqlite3_value **a4)
{
  int v5;
  _OWORD *result;
  degas::Bitmap **v7;
  sqlite3_int64 v8;

  v5 = (int)a2;
  result = sqlite3_aggregate_context(this, 8);
  v7 = (degas::Bitmap **)result;
  if (!*(_QWORD *)result)
  {
    result = (_OWORD *)operator new();
    *result = 0u;
    result[1] = 0u;
    *(_OWORD *)((char *)result + 25) = 0u;
    *v7 = (degas::Bitmap *)result;
  }
  if (v5 == 1)
  {
    v8 = sqlite3_value_int64(*a3);
    return (_OWORD *)degas::Bitmap::setBit(*v7, v8);
  }
  return result;
}

void degas::mergeLiteralBitmapFinal(degas *this, sqlite3_context *a2)
{
  degas::LiteralBitmap **v3;
  const Bitmap *v4;
  degas::LiteralBitmap **v5;
  degas::LiteralBitmap *v6;
  char *v7;
  char *v8;
  degas::LiteralBitmap *v9;
  void **v10;

  v3 = (degas::LiteralBitmap **)sqlite3_aggregate_context(this, 8);
  v5 = v3;
  v6 = *v3;
  if (*v3)
  {
    degas::LiteralBitmap::makeLiteralBitmap(*v3, v4);
    v8 = v7;
  }
  else
  {
    degas::LiteralBitmap::emptyBitmap((degas::LiteralBitmap *)v3);
    v8 = &degas::LiteralBitmap::emptyBitmap(void)::bitmap;
  }
  sqlite3_result_blob(this, v8, (144 * *((_DWORD *)v8 + 1)) | 8, (void (__cdecl *)(void *))0xFFFFFFFFFFFFFFFFLL);
  if (v6)
    MEMORY[0x1CAA4ADC8](v8, 0x1000C4000313F17);
  v9 = *v5;
  if (*v5)
  {
    v10 = (void **)((char *)v9 + 16);
    std::vector<degas::BitsetPtr>::__destroy_vector::operator()[abi:ne180100](&v10);
    MEMORY[0x1CAA4ADC8](v9, 0x1020C40C46AEF4ELL);
    *v5 = 0;
  }
}

void degas::bitmapOverlaps(degas *this, sqlite3_context *a2, sqlite3_value **a3, sqlite3_value **a4)
{
  const degas::LiteralBitmap *v6;
  _QWORD *v7;
  unint64_t v8;
  uint64_t *v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  int v18;
  int v19;
  _BYTE v20[16];
  uint64_t *v21;
  uint64_t *v22;
  void **v23;

  if ((int)a2 < 2)
    return;
  v6 = (const degas::LiteralBitmap *)sqlite3_value_blob(*a3);
  degas::Bitmap::Bitmap((degas::Bitmap *)v20, v6);
  v7 = sqlite3_value_blob(a3[1]);
  v8 = *((unsigned int *)v7 + 1);
  if (!(_DWORD)v8 || (v9 = v21, v21 == v22))
  {
    v19 = 0;
    goto LABEL_19;
  }
  v10 = 0;
  while (1)
  {
    v11 = *v9;
    v12 = *(_QWORD *)(*v9 + 8);
    v13 = v7[18 * v10 + 2];
    if (v12 < v13)
    {
      v9 += 2;
      goto LABEL_15;
    }
    if (v12 <= v13)
      break;
LABEL_14:
    ++v10;
LABEL_15:
    v19 = 0;
    if (v9 == v22 || v10 >= v8)
      goto LABEL_19;
  }
  if ((v7[18 * v10 + 3] & *(_DWORD *)(v11 + 16)) == 0)
  {
    v14 = 0;
    v15 = v11 + 20;
    while (v14 != 31)
    {
      v16 = v14 + 1;
      v17 = *(_DWORD *)(v15 + 4 * v14);
      v18 = *((_DWORD *)&v7[18 * v10 + 3] + ++v14);
      if ((v18 & v17) != 0)
      {
        if ((unint64_t)(v16 - 1) < 0x1F)
          goto LABEL_21;
        break;
      }
    }
    v9 += 2;
    goto LABEL_14;
  }
LABEL_21:
  v19 = 1;
LABEL_19:
  sqlite3_result_int(this, v19);
  v23 = (void **)&v21;
  std::vector<degas::BitsetPtr>::__destroy_vector::operator()[abi:ne180100](&v23);
}

void sub_1CA15D12C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  uint64_t v12;

  *(_QWORD *)(v12 - 24) = &a12;
  std::vector<degas::BitsetPtr>::__destroy_vector::operator()[abi:ne180100]((void ***)(v12 - 24));
  _Unwind_Resume(a1);
}

void degas::bitmapContains(degas *this, sqlite3_context *a2, sqlite3_value **a3, sqlite3_value **a4)
{
  _QWORD *v6;
  const degas::LiteralBitmap *v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  char *v11;
  unint64_t v12;
  unint64_t v13;
  BOOL v14;
  unint64_t i;
  int v16;
  _BOOL4 v17;
  _BYTE v18[16];
  uint64_t v19;
  uint64_t v20;
  void **v21;

  if ((int)a2 >= 2)
  {
    v6 = sqlite3_value_blob(*a3);
    v7 = (const degas::LiteralBitmap *)sqlite3_value_blob(a3[1]);
    degas::Bitmap::Bitmap((degas::Bitmap *)v18, v7);
    v8 = v19;
    if (v19 == v20)
    {
      v17 = 1;
    }
    else
    {
      v9 = *((unsigned int *)v6 + 1);
      if ((_DWORD)v9)
      {
        v10 = 0;
        v11 = (char *)(v6 + 3);
        while (1)
        {
          v12 = *(_QWORD *)(*(_QWORD *)v8 + 8);
          v13 = v6[18 * v10 + 2];
          if (v12 < v13)
            break;
          if (v12 <= v13)
          {
            v14 = 0;
            for (i = 0; i != 32; ++i)
            {
              v16 = *(_DWORD *)(*(_QWORD *)v8 + 16 + 4 * i);
              if (v16 && (v16 & ~*(_DWORD *)&v11[4 * i]) != 0)
                break;
              v14 = i > 0x1E;
            }
            if (!v14)
              break;
            v8 += 16;
          }
          if (v8 != v20)
          {
            ++v10;
            v11 += 144;
            if (v10 < v9)
              continue;
          }
          v17 = v8 == v20;
          goto LABEL_18;
        }
      }
      v17 = 0;
    }
LABEL_18:
    sqlite3_result_int(this, v17);
    v21 = (void **)&v19;
    std::vector<degas::BitsetPtr>::__destroy_vector::operator()[abi:ne180100](&v21);
  }
}

void sub_1CA15D270(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v2 - 40) = v1;
  std::vector<degas::BitsetPtr>::__destroy_vector::operator()[abi:ne180100]((void ***)(v2 - 40));
  _Unwind_Resume(a1);
}

void degas::bitmapEquals(degas *this, sqlite3_context *a2, sqlite3_value **a3, sqlite3_value **a4)
{
  const void *v6;
  const void *v7;
  _BOOL4 v8;

  if ((int)a2 >= 2)
  {
    v6 = sqlite3_value_blob(*a3);
    v7 = sqlite3_value_blob(a3[1]);
    v8 = degas::LiteralBitmap::operator==((uint64_t)v6, (uint64_t)v7);
    sqlite3_result_int(this, v8);
  }
}

void degas::bitmapContainsIdentifier(degas *this, sqlite3_context *a2, sqlite3_value **a3, sqlite3_value **a4)
{
  degas::LiteralBitmap *v6;
  sqlite3_int64 v7;
  int isSet;

  if ((int)a2 >= 2)
  {
    v6 = (degas::LiteralBitmap *)sqlite3_value_blob(*a3);
    v7 = sqlite3_value_int64(a3[1]);
    isSet = degas::LiteralBitmap::isSet(v6, v7);
    sqlite3_result_int(this, isSet);
  }
}

uint64_t degas::createMergeLiteralBitmapFunction(degas *this, sqlite3 *a2)
{
  return sqlite3_create_function(this, "mergeLiteralBitmap", 1, 1, 0, 0, (void (__cdecl *)(sqlite3_context *, int, sqlite3_value **))degas::mergeLiteralBitmapStep, (void (__cdecl *)(sqlite3_context *))degas::mergeLiteralBitmapFinal);
}

uint64_t degas::createBitmapFunctions(degas *this, sqlite3 *a2)
{
  uint64_t result;

  result = sqlite3_create_function(this, "bitmapOverlapsBitmap", 2, 2049, 0, (void (__cdecl *)(sqlite3_context *, int, sqlite3_value **))degas::bitmapOverlaps, 0, 0);
  if (!(_DWORD)result)
  {
    result = sqlite3_create_function(this, "bitmapContainsBitmap", 2, 2049, 0, (void (__cdecl *)(sqlite3_context *, int, sqlite3_value **))degas::bitmapContains, 0, 0);
    if (!(_DWORD)result)
    {
      result = sqlite3_create_function(this, "bitmapEqualsBitmap", 2, 2049, 0, (void (__cdecl *)(sqlite3_context *, int, sqlite3_value **))degas::bitmapEquals, 0, 0);
      if (!(_DWORD)result)
        return sqlite3_create_function(this, "bitmapContainsIdentifier", 2, 1, 0, (void (__cdecl *)(sqlite3_context *, int, sqlite3_value **))degas::bitmapContainsIdentifier, 0, 0);
    }
  }
  return result;
}

void sub_1CA15EB1C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1CA15FF98(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1CA160AD0(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1CA161430(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t __Block_byref_object_copy_(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void __Block_byref_object_dispose_(uint64_t a1)
{

}

void MALabelsAndDomainsFromKGLabels(void *a1, _QWORD *a2, _QWORD *a3)
{
  id v5;
  id v6;
  id v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t i;
  uint64_t v12;
  uint64_t v13;
  void *v14;
  _QWORD *v15;
  _QWORD *v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  _BYTE v21[128];
  uint64_t v22;

  v22 = *MEMORY[0x1E0C80C00];
  v5 = a1;
  v15 = a2;
  if (a2)
    a2 = objc_alloc_init(MEMORY[0x1E0C99E20]);
  v16 = a3;
  if (a3)
    v6 = objc_alloc_init(MEMORY[0x1E0C99E20]);
  else
    v6 = 0;
  v19 = 0u;
  v20 = 0u;
  v17 = 0u;
  v18 = 0u;
  v7 = v5;
  v8 = objc_msgSend(v7, "countByEnumeratingWithState:objects:count:", &v17, v21, 16);
  if (v8)
  {
    v9 = v8;
    v10 = *(_QWORD *)v18;
    do
    {
      for (i = 0; i != v9; ++i)
      {
        if (*(_QWORD *)v18 != v10)
          objc_enumerationMutation(v7);
        v12 = *(_QWORD *)(*((_QWORD *)&v17 + 1) + 8 * i);
        v13 = +[MAKGDomainConversion maDomainForKGLabel:](MAKGDomainConversion, "maDomainForKGLabel:", v12, v15);
        if ((_DWORD)v13 == 0xFFFF)
        {
          objc_msgSend(a2, "addObject:", v12);
        }
        else
        {
          objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithUnsignedShort:", v13);
          v14 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v6, "addObject:", v14);

        }
      }
      v9 = objc_msgSend(v7, "countByEnumeratingWithState:objects:count:", &v17, v21, 16);
    }
    while (v9);
  }

  if (a2)
    *v15 = objc_retainAutorelease(a2);
  if (v6)
    *v16 = objc_retainAutorelease(v6);

}

void MALabelAndDomainFromKGLabels(void *a1, _QWORD *a2, _WORD *a3)
{
  id v4;
  uint64_t v5;
  uint64_t v6;
  id v7;
  uint64_t v8;
  int v9;
  uint64_t i;
  void *v11;
  int v12;
  BOOL v13;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  _BYTE v19[128];
  uint64_t v20;

  v20 = *MEMORY[0x1E0C80C00];
  v15 = 0u;
  v16 = 0u;
  v17 = 0u;
  v18 = 0u;
  v4 = a1;
  v5 = objc_msgSend(v4, "countByEnumeratingWithState:objects:count:", &v15, v19, 16);
  if (v5)
  {
    v6 = v5;
    v7 = 0;
    v8 = *(_QWORD *)v16;
    v9 = 1;
    do
    {
      for (i = 0; i != v6; ++i)
      {
        if (*(_QWORD *)v16 != v8)
          objc_enumerationMutation(v4);
        v11 = *(void **)(*((_QWORD *)&v15 + 1) + 8 * i);
        v12 = +[MAKGDomainConversion maDomainForKGLabel:](MAKGDomainConversion, "maDomainForKGLabel:", v11);
        if (v12 == 0xFFFF)
        {
          if (v7)
            __assert_rtn("MALabelAndDomainFromKGLabels", "MAGraph.m", 1432, "maLabel == nil");
          v7 = v11;
        }
        else
        {
          v13 = v9 == 1;
          v9 = v12;
          if (!v13)
            __assert_rtn("MALabelAndDomainFromKGLabels", "MAGraph.m", 1427, "maDomain == kMAElementDefaultDomain");
        }
      }
      v6 = objc_msgSend(v4, "countByEnumeratingWithState:objects:count:", &v15, v19, 16);
    }
    while (v6);
  }
  else
  {
    v7 = 0;
    LOWORD(v9) = 1;
  }

  if (a2)
    *a2 = objc_retainAutorelease(v7);
  if (a3)
    *a3 = v9;

}

void testEncodeDecodeBitmap(degas::Bitset ***a1)
{
  size_t v2;
  uint64_t *v3;
  uint64_t *v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t *v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  char *v12;
  uint64_t *v13;
  uint64_t v14;
  unsigned __int8 *v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t *v18;
  uint64_t v19;
  unsigned int v20;
  uint64_t v21;
  int32x4_t v22;
  unint64_t *v23;
  __int128 v24;
  _QWORD v25[5];
  unsigned __int8 *v26;
  unsigned __int8 *v27;
  void **v28;

  v2 = degas::Bitmap::lengthOfEncodedData(a1);
  degas::Bitmap::begin(a1, &v24);
  v3 = 0;
  v4 = 0;
  v5 = 0;
  while (1)
  {
    v6 = *((_QWORD *)&v24 + 1);
    if ((degas::Bitset ***)v24 == a1 && *((_QWORD *)&v24 + 1) == -1)
      break;
LABEL_9:
    if (v4 >= v3)
    {
      v9 = v4 - v5;
      v10 = v9 + 1;
      if ((unint64_t)(v9 + 1) >> 61)
        std::vector<unsigned long long>::__throw_length_error[abi:ne180100]();
      if (((char *)v3 - (char *)v5) >> 2 > v10)
        v10 = ((char *)v3 - (char *)v5) >> 2;
      if ((unint64_t)((char *)v3 - (char *)v5) >= 0x7FFFFFFFFFFFFFF8)
        v11 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v11 = v10;
      if (v11)
      {
        if (v11 >> 61)
          std::__throw_bad_array_new_length[abi:ne180100]();
        v12 = (char *)operator new(8 * v11);
      }
      else
      {
        v12 = 0;
      }
      v13 = (uint64_t *)&v12[8 * v9];
      *v13 = v6;
      v8 = v13 + 1;
      while (v4 != v5)
      {
        v14 = *--v4;
        *--v13 = v14;
      }
      v3 = (uint64_t *)&v12[8 * v11];
      if (v5)
        operator delete(v5);
      v5 = v13;
    }
    else
    {
      *v4 = v6;
      v8 = v4 + 1;
    }
    degas::Bitmap::iterator::operator++((unint64_t *)&v24);
    v4 = v8;
  }
  if ((degas::Bitset **)v25[0] != a1[3])
  {
    v6 = -1;
    goto LABEL_9;
  }
  v15 = (unsigned __int8 *)malloc_type_malloc(v2, 0xC2F298F0uLL);
  v26 = v15;
  v27 = v15;
  degas::Bitmap::appendToEncodedBuffer(a1, &v27);
  v24 = 0u;
  memset(v25, 0, 25);
  degas::Bitmap::replaceFromEncodedBuffer((degas::Bitmap *)&v24, (const unsigned __int8 **)&v26);
  if (!degas::Bitmap::operator==((uint64_t)a1, (uint64_t)&v24))
    goto LABEL_52;
  v16 = v24;
  if ((_QWORD)v24 == 0xFFFFFFFFLL)
  {
    v18 = (uint64_t *)v25[1];
    v17 = (uint64_t *)v25[0];
    if (v25[0] == v25[1])
    {
      v16 = 0;
    }
    else
    {
      v16 = 0;
      do
      {
        v19 = *v17;
        v20 = *(_DWORD *)(*v17 + 4);
        if (v20 == -1)
        {
          v21 = 0;
          v22 = 0uLL;
          do
          {
            do
            {
              v22 = (int32x4_t)vpadalq_u16((uint32x4_t)v22, vpaddlq_u8((uint8x16_t)vcntq_s8(*(int8x16_t *)(v19 + 4 * v21 + 16))));
              v21 += 4;
            }
            while (v21 != 32);
            v21 = 0;
            v20 = vaddvq_s32(v22);
            v22 = 0uLL;
          }
          while (v20 == -1);
          *(_DWORD *)(v19 + 4) = v20;
        }
        v16 += v20;
        v17 += 2;
      }
      while (v17 != v18);
    }
    *(_QWORD *)&v24 = v16;
  }
  if (v16 != v4 - v5)
LABEL_52:
    abort();
  if (v5 != v4)
  {
    v23 = (unint64_t *)v5;
    do
    {
      if ((degas::Bitmap::isSet((degas::Bitmap *)&v24, *v23) & 1) == 0)
        abort();
      ++v23;
    }
    while (v23 != (unint64_t *)v4);
  }
  free(v15);
  v28 = (void **)v25;
  std::vector<degas::BitsetPtr>::__destroy_vector::operator()[abi:ne180100](&v28);
  if (v5)
    operator delete(v5);
}

void sub_1CA162550(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18)
{
  void *v18;

  if (v18)
    operator delete(v18);
  _Unwind_Resume(exception_object);
}

void std::vector<unsigned long long>::__throw_length_error[abi:ne180100]()
{
  std::__throw_length_error[abi:ne180100]("vector");
}

void std::__throw_bad_array_new_length[abi:ne180100]()
{
  std::bad_array_new_length *exception;
  std::bad_array_new_length *v1;

  exception = (std::bad_array_new_length *)__cxa_allocate_exception(8uLL);
  v1 = std::bad_array_new_length::bad_array_new_length(exception);
  __cxa_throw(v1, MEMORY[0x1E0DE4E98], MEMORY[0x1E0DE4390]);
}

void std::__throw_length_error[abi:ne180100](const char *a1)
{
  std::logic_error *exception;

  exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
  std::length_error::length_error[abi:ne180100](exception, a1);
  __cxa_throw(exception, (struct type_info *)off_1E83DDB00, MEMORY[0x1E0DE42D0]);
}

void sub_1CA16260C(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

std::logic_error *std::length_error::length_error[abi:ne180100](std::logic_error *a1, const char *a2)
{
  std::logic_error *result;

  result = std::logic_error::logic_error(a1, a2);
  result->__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E0DE5020] + 16);
  return result;
}

void testSet(uint64_t a1@<X8>)
{
  int v2;
  unint64_t v3;
  uint64_t *v4;
  uint64_t **v5;
  uint64_t **v6;
  unint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t *v11;
  uint64_t **v12;
  unint64_t v13;
  BOOL v14;
  uint64_t *v15;
  uint64_t **v16;
  uint64_t *v17;
  uint64_t **v18;
  unint64_t v19;
  uint64_t **v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t **v24;
  uint64_t *v25;
  uint64_t v26;

  v2 = 0;
  *(_OWORD *)(a1 + 25) = 0u;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  v25 = 0;
  v26 = 0;
  v24 = &v25;
  do
  {
    v3 = arc4random() % 0x2710;
    degas::Bitmap::setBit((degas::Bitmap *)a1, v3);
    v4 = v25;
    v5 = &v25;
    v6 = &v25;
    if (v25)
    {
      while (1)
      {
        while (1)
        {
          v6 = (uint64_t **)v4;
          v7 = v4[4];
          if (v7 <= v3)
            break;
          v4 = *v6;
          v5 = v6;
          if (!*v6)
            goto LABEL_9;
        }
        if (v7 >= v3)
          break;
        v4 = v6[1];
        if (!v4)
        {
          v5 = v6 + 1;
          goto LABEL_9;
        }
      }
    }
    else
    {
LABEL_9:
      v8 = (uint64_t *)operator new(0x28uLL);
      v8[4] = v3;
      *v8 = 0;
      v8[1] = 0;
      v8[2] = (uint64_t)v6;
      *v5 = v8;
      if (*v24)
      {
        v24 = (uint64_t **)*v24;
        v8 = *v5;
      }
      std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(v25, v8);
      ++v26;
    }
    v9 = degas::Bitmap::count((degas::Bitmap *)a1);
    if (v9 != v26)
      abort();
    ++v2;
  }
  while (v2 != 1000);
  v10 = (uint64_t *)v24;
  if (v24 != &v25)
  {
    do
    {
      if ((degas::Bitmap::isSet((degas::Bitmap *)a1, v10[4]) & 1) == 0)
        abort();
      v11 = (uint64_t *)v10[1];
      if (v11)
      {
        do
        {
          v12 = (uint64_t **)v11;
          v11 = (uint64_t *)*v11;
        }
        while (v11);
      }
      else
      {
        do
        {
          v12 = (uint64_t **)v10[2];
          v14 = *v12 == v10;
          v10 = (uint64_t *)v12;
        }
        while (!v14);
      }
      v10 = (uint64_t *)v12;
    }
    while (v12 != &v25);
  }
  degas::Bitmap::begin((_QWORD *)a1, &v21);
  while (1)
  {
    v13 = v22;
    v14 = v21 == a1 && v22 == -1;
    if (!v14)
      goto LABEL_30;
    if (v23 == *(_QWORD *)(a1 + 24))
      break;
    v13 = -1;
LABEL_30:
    v15 = v25;
    if (!v25)
      goto LABEL_41;
    v16 = &v25;
    do
    {
      v17 = v15;
      v18 = v16;
      v19 = v15[4];
      v20 = (uint64_t **)(v15 + 1);
      if (v19 >= v13)
      {
        v20 = (uint64_t **)v17;
        v16 = (uint64_t **)v17;
      }
      v15 = *v20;
    }
    while (v15);
    if (v16 == &v25)
      goto LABEL_41;
    if (v19 < v13)
      v17 = (uint64_t *)v18;
    if (v13 < v17[4])
LABEL_41:
      abort();
    degas::Bitmap::iterator::operator++(&v21);
  }
  std::__tree<unsigned long long>::destroy(v25);
}

void sub_1CA162868(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void **a12, _QWORD *a13)
{
  uint64_t v13;

  std::__tree<unsigned long long>::destroy(a13);
  a12 = (void **)(v13 + 16);
  std::vector<degas::BitsetPtr>::__destroy_vector::operator()[abi:ne180100](&a12);
  _Unwind_Resume(a1);
}

uint64_t *std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(uint64_t *result, uint64_t *a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t *v4;
  _BYTE *v5;
  int v6;
  uint64_t v7;
  int v8;
  uint64_t **v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  *((_BYTE *)a2 + 24) = a2 == result;
  if (a2 != result)
  {
    do
    {
      v2 = (uint64_t *)a2[2];
      if (*((_BYTE *)v2 + 24))
        return result;
      v3 = (uint64_t *)v2[2];
      v4 = (uint64_t *)*v3;
      if ((uint64_t *)*v3 == v2)
      {
        v7 = v3[1];
        if (!v7 || (v8 = *(unsigned __int8 *)(v7 + 24), v5 = (_BYTE *)(v7 + 24), v8))
        {
          if ((uint64_t *)*v2 == a2)
          {
            v9 = (uint64_t **)a2[2];
          }
          else
          {
            v9 = (uint64_t **)v2[1];
            v10 = *v9;
            v2[1] = (uint64_t)*v9;
            if (v10)
            {
              v10[2] = (uint64_t)v2;
              v3 = (uint64_t *)v2[2];
            }
            v9[2] = v3;
            *(_QWORD *)(v2[2] + 8 * (*(_QWORD *)v2[2] != (_QWORD)v2)) = v9;
            *v9 = v2;
            v2[2] = (uint64_t)v9;
            v3 = v9[2];
            v2 = (uint64_t *)*v3;
          }
          *((_BYTE *)v9 + 24) = 1;
          *((_BYTE *)v3 + 24) = 0;
          v13 = v2[1];
          *v3 = v13;
          if (v13)
            *(_QWORD *)(v13 + 16) = v3;
          v2[2] = v3[2];
          *(_QWORD *)(v3[2] + 8 * (*(_QWORD *)v3[2] != (_QWORD)v3)) = v2;
          v2[1] = (uint64_t)v3;
          goto LABEL_27;
        }
      }
      else if (!v4 || (v6 = *((unsigned __int8 *)v4 + 24), v5 = v4 + 3, v6))
      {
        if ((uint64_t *)*v2 == a2)
        {
          v11 = a2[1];
          *v2 = v11;
          if (v11)
          {
            *(_QWORD *)(v11 + 16) = v2;
            v3 = (uint64_t *)v2[2];
          }
          a2[2] = (uint64_t)v3;
          *(_QWORD *)(v2[2] + 8 * (*(_QWORD *)v2[2] != (_QWORD)v2)) = a2;
          a2[1] = (uint64_t)v2;
          v2[2] = (uint64_t)a2;
          v3 = (uint64_t *)a2[2];
        }
        else
        {
          a2 = (uint64_t *)a2[2];
        }
        *((_BYTE *)a2 + 24) = 1;
        *((_BYTE *)v3 + 24) = 0;
        v2 = (uint64_t *)v3[1];
        v12 = *v2;
        v3[1] = *v2;
        if (v12)
          *(_QWORD *)(v12 + 16) = v3;
        v2[2] = v3[2];
        *(_QWORD *)(v3[2] + 8 * (*(_QWORD *)v3[2] != (_QWORD)v3)) = v2;
        *v2 = (uint64_t)v3;
LABEL_27:
        v3[2] = (uint64_t)v2;
        return result;
      }
      *((_BYTE *)v2 + 24) = 1;
      a2 = v3;
      *((_BYTE *)v3 + 24) = v3 == result;
      *v5 = 1;
    }
    while (v3 != result);
  }
  return result;
}

void testUnset(const degas::Bitmap *a1)
{
  unint64_t v2;
  BOOL v3;
  uint64_t *v4;
  uint64_t **v5;
  uint64_t **v6;
  unint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  BOOL v10;
  uint64_t *v12;
  uint64_t *v13;
  uint64_t *v14;
  uint64_t *v15;
  unint64_t v16;
  uint64_t *v17;
  uint64_t *v18;
  uint64_t *v19;
  uint64_t *v20;
  uint64_t *v21;
  uint64_t **v22;
  unint64_t v23;
  uint64_t *v24;
  uint64_t *v25;
  uint64_t v26;
  unsigned int v27;
  uint64_t v28;
  int32x4_t v29;
  uint64_t *v30;
  uint64_t *v31;
  uint64_t **v32;
  void **v33;
  unint64_t v34;
  uint64_t v35;
  unint64_t v36;
  __int128 v37;
  __int128 v38;
  char v39;
  uint64_t **v40;
  uint64_t *v41;
  uint64_t v42;

  v41 = 0;
  v42 = 0;
  v40 = &v41;
  degas::Bitmap::begin(a1, &v36);
  while (1)
  {
    v2 = v37;
    v3 = (const degas::Bitmap *)v36 == a1 && (_QWORD)v37 == -1;
    if (v3)
      break;
LABEL_9:
    v4 = v41;
    v5 = &v41;
    v6 = &v41;
    if (v41)
    {
      while (1)
      {
        while (1)
        {
          v6 = (uint64_t **)v4;
          v7 = v4[4];
          if (v2 >= v7)
            break;
          v4 = *v6;
          v5 = v6;
          if (!*v6)
            goto LABEL_16;
        }
        if (v7 >= v2)
          break;
        v4 = v6[1];
        if (!v4)
        {
          v5 = v6 + 1;
          goto LABEL_16;
        }
      }
    }
    else
    {
LABEL_16:
      v8 = (uint64_t *)operator new(0x28uLL);
      v8[4] = v2;
      *v8 = 0;
      v8[1] = 0;
      v8[2] = (uint64_t)v6;
      *v5 = v8;
      if (*v40)
      {
        v40 = (uint64_t **)*v40;
        v8 = *v5;
      }
      std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(v41, v8);
      ++v42;
    }
    degas::Bitmap::iterator::operator++(&v36);
  }
  if (*((_QWORD *)&v37 + 1) != *((_QWORD *)a1 + 3))
  {
    v2 = -1;
    goto LABEL_9;
  }
  v9 = degas::Bitmap::count(a1);
  if (v9 != v42)
    abort();
  v36 = *(_QWORD *)a1;
  v37 = 0u;
  v38 = 0u;
  std::vector<degas::BitsetPtr>::__init_with_size[abi:ne180100]<degas::BitsetPtr*,degas::BitsetPtr*>((char *)&v37 + 8, *((__int128 **)a1 + 2), *((__int128 **)a1 + 3), (uint64_t)(*((_QWORD *)a1 + 3) - *((_QWORD *)a1 + 2)) >> 4);
  v39 = *((_BYTE *)a1 + 40);
  degas::Bitmap::begin(a1, &v33);
  while (1)
  {
    v10 = v33 == (void **)a1 && v34 == -1;
    if (v10 && v35 == *((_QWORD *)a1 + 3))
      break;
    if (1431655765 - 1431655765 * arc4random() <= 0x55555554)
    {
      degas::Bitmap::clearBit((degas::BitsetPtr **)&v36, v34);
      if (v41)
      {
        v12 = (uint64_t *)&v41;
        v13 = v41;
        do
        {
          v14 = v13;
          v15 = v12;
          v16 = v13[4];
          v17 = v13 + 1;
          if (v16 >= v34)
            v12 = v13;
          else
            ++v13;
          v13 = (uint64_t *)*v13;
        }
        while (v13);
        if (v12 != (uint64_t *)&v41)
        {
          if (v16 < v34)
            v14 = v15;
          if (v34 >= v14[4])
          {
            v18 = v15 + 1;
            if (v16 >= v34)
              v19 = v17;
            else
              v19 = v18;
            v20 = (uint64_t *)*v19;
            v21 = v12;
            if (*v19)
            {
              do
              {
                v22 = (uint64_t **)v20;
                v20 = (uint64_t *)*v20;
              }
              while (v20);
            }
            else
            {
              do
              {
                v22 = (uint64_t **)v21[2];
                v3 = *v22 == v21;
                v21 = (uint64_t *)v22;
              }
              while (!v3);
            }
            if (v40 == (uint64_t **)v12)
              v40 = v22;
            --v42;
            std::__tree_remove[abi:ne180100]<std::__tree_node_base<void *> *>(v41, v12);
            operator delete(v12);
          }
        }
      }
    }
    degas::Bitmap::iterator::operator++((unint64_t *)&v33);
  }
  v23 = v36;
  if (v36 == 0xFFFFFFFF)
  {
    v24 = (uint64_t *)*((_QWORD *)&v37 + 1);
    v25 = (uint64_t *)v38;
    if (*((_QWORD *)&v37 + 1) == (_QWORD)v38)
    {
      v23 = 0;
    }
    else
    {
      v23 = 0;
      do
      {
        v26 = *v24;
        v27 = *(_DWORD *)(*v24 + 4);
        if (v27 == -1)
        {
          v28 = 0;
          v29 = 0uLL;
          do
          {
            do
            {
              v29 = (int32x4_t)vpadalq_u16((uint32x4_t)v29, vpaddlq_u8((uint8x16_t)vcntq_s8(*(int8x16_t *)(v26 + 4 * v28 + 16))));
              v28 += 4;
            }
            while (v28 != 32);
            v28 = 0;
            v27 = vaddvq_s32(v29);
            v29 = 0uLL;
          }
          while (v27 == -1);
          *(_DWORD *)(v26 + 4) = v27;
        }
        v23 += v27;
        v24 += 2;
      }
      while (v24 != v25);
    }
    v36 = v23;
  }
  if (v23 != v42)
    abort();
  v30 = (uint64_t *)v40;
  if (v40 != &v41)
  {
    do
    {
      if ((degas::Bitmap::isSet((degas::Bitmap *)&v36, v30[4]) & 1) == 0)
        abort();
      v31 = (uint64_t *)v30[1];
      if (v31)
      {
        do
        {
          v32 = (uint64_t **)v31;
          v31 = (uint64_t *)*v31;
        }
        while (v31);
      }
      else
      {
        do
        {
          v32 = (uint64_t **)v30[2];
          v3 = *v32 == v30;
          v30 = (uint64_t *)v32;
        }
        while (!v3);
      }
      v30 = (uint64_t *)v32;
    }
    while (v32 != &v41);
  }
  v33 = (void **)&v37 + 1;
  std::vector<degas::BitsetPtr>::__destroy_vector::operator()[abi:ne180100](&v33);
  std::__tree<unsigned long long>::destroy(v41);
}

void sub_1CA162DC0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, _QWORD *a19)
{
  std::vector<degas::BitsetPtr>::__destroy_vector::operator()[abi:ne180100](&a9);
  std::__tree<unsigned long long>::destroy(a19);
  _Unwind_Resume(a1);
}

uint64_t *std::__tree_remove[abi:ne180100]<std::__tree_node_base<void *> *>(uint64_t *result, uint64_t *a2)
{
  uint64_t v2;
  uint64_t *v3;
  uint64_t *v4;
  int v5;
  uint64_t **v6;
  uint64_t *v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t *v16;
  uint64_t *v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t *v20;
  BOOL v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;

  v2 = *a2;
  v3 = a2;
  if (*a2)
  {
    v4 = (uint64_t *)a2[1];
    if (!v4)
    {
      v3 = a2;
      goto LABEL_7;
    }
    do
    {
      v3 = v4;
      v4 = (uint64_t *)*v4;
    }
    while (v4);
  }
  v2 = v3[1];
  if (v2)
  {
LABEL_7:
    v5 = 0;
    *(_QWORD *)(v2 + 16) = v3[2];
    goto LABEL_8;
  }
  v5 = 1;
LABEL_8:
  v6 = (uint64_t **)v3[2];
  v7 = *v6;
  if (*v6 == v3)
  {
    *v6 = (uint64_t *)v2;
    if (v3 == result)
    {
      v7 = 0;
      result = (uint64_t *)v2;
    }
    else
    {
      v7 = v6[1];
    }
  }
  else
  {
    v6[1] = (uint64_t *)v2;
  }
  v8 = *((unsigned __int8 *)v3 + 24);
  if (v3 != a2)
  {
    v9 = a2[2];
    v3[2] = v9;
    *(_QWORD *)(v9 + 8 * (*(_QWORD *)a2[2] != (_QWORD)a2)) = v3;
    v11 = *a2;
    v10 = a2[1];
    *(_QWORD *)(v11 + 16) = v3;
    *v3 = v11;
    v3[1] = v10;
    if (v10)
      *(_QWORD *)(v10 + 16) = v3;
    *((_BYTE *)v3 + 24) = *((_BYTE *)a2 + 24);
    if (result == a2)
      result = v3;
  }
  if (!v8 || !result)
    return result;
  if (!v5)
  {
    *(_BYTE *)(v2 + 24) = 1;
    return result;
  }
  while (1)
  {
    v12 = v7[2];
    if (*(uint64_t **)v12 != v7)
      break;
    if (!*((_BYTE *)v7 + 24))
    {
      *((_BYTE *)v7 + 24) = 1;
      *(_BYTE *)(v12 + 24) = 0;
      v18 = v7[1];
      *(_QWORD *)v12 = v18;
      if (v18)
        *(_QWORD *)(v18 + 16) = v12;
      v7[2] = *(_QWORD *)(v12 + 16);
      *(_QWORD *)(*(_QWORD *)(v12 + 16) + 8 * (**(_QWORD **)(v12 + 16) != v12)) = v7;
      v7[1] = v12;
      *(_QWORD *)(v12 + 16) = v7;
      if (result == (uint64_t *)v12)
        result = v7;
      v7 = *(uint64_t **)v12;
    }
    v19 = (_QWORD *)*v7;
    if (*v7 && !*((_BYTE *)v19 + 24))
      goto LABEL_68;
    v20 = (uint64_t *)v7[1];
    if (v20 && !*((_BYTE *)v20 + 24))
    {
      if (v19 && !*((_BYTE *)v19 + 24))
      {
LABEL_68:
        v20 = v7;
      }
      else
      {
        *((_BYTE *)v20 + 24) = 1;
        *((_BYTE *)v7 + 24) = 0;
        v26 = *v20;
        v7[1] = *v20;
        if (v26)
          *(_QWORD *)(v26 + 16) = v7;
        v20[2] = v7[2];
        *(_QWORD *)(v7[2] + 8 * (*(_QWORD *)v7[2] != (_QWORD)v7)) = v20;
        *v20 = (uint64_t)v7;
        v7[2] = (uint64_t)v20;
        v19 = v7;
      }
      v23 = v20[2];
      *((_BYTE *)v20 + 24) = *(_BYTE *)(v23 + 24);
      *(_BYTE *)(v23 + 24) = 1;
      *((_BYTE *)v19 + 24) = 1;
      v24 = *(uint64_t **)v23;
      v27 = *(_QWORD *)(*(_QWORD *)v23 + 8);
      *(_QWORD *)v23 = v27;
      if (v27)
        *(_QWORD *)(v27 + 16) = v23;
      v24[2] = *(_QWORD *)(v23 + 16);
      *(_QWORD *)(*(_QWORD *)(v23 + 16) + 8 * (**(_QWORD **)(v23 + 16) != v23)) = v24;
      v24[1] = v23;
      goto LABEL_72;
    }
    *((_BYTE *)v7 + 24) = 0;
    v17 = (uint64_t *)v7[2];
    if (*((_BYTE *)v17 + 24))
      v21 = v17 == result;
    else
      v21 = 1;
    if (v21)
      goto LABEL_53;
LABEL_49:
    v7 = *(uint64_t **)(v17[2] + 8 * (*(_QWORD *)v17[2] == (_QWORD)v17));
  }
  if (!*((_BYTE *)v7 + 24))
  {
    *((_BYTE *)v7 + 24) = 1;
    *(_BYTE *)(v12 + 24) = 0;
    v13 = *(uint64_t **)(v12 + 8);
    v14 = *v13;
    *(_QWORD *)(v12 + 8) = *v13;
    if (v14)
      *(_QWORD *)(v14 + 16) = v12;
    v13[2] = *(_QWORD *)(v12 + 16);
    *(_QWORD *)(*(_QWORD *)(v12 + 16) + 8 * (**(_QWORD **)(v12 + 16) != v12)) = v13;
    *v13 = v12;
    *(_QWORD *)(v12 + 16) = v13;
    if (result == (uint64_t *)*v7)
      result = v7;
    v7 = *(uint64_t **)(*v7 + 8);
  }
  v15 = (_QWORD *)*v7;
  if (!*v7 || *((_BYTE *)v15 + 24))
  {
    v16 = (uint64_t *)v7[1];
    if (v16 && !*((_BYTE *)v16 + 24))
      goto LABEL_59;
    *((_BYTE *)v7 + 24) = 0;
    v17 = (uint64_t *)v7[2];
    if (v17 == result)
    {
      v17 = result;
LABEL_53:
      *((_BYTE *)v17 + 24) = 1;
      return result;
    }
    if (!*((_BYTE *)v17 + 24))
      goto LABEL_53;
    goto LABEL_49;
  }
  v16 = (uint64_t *)v7[1];
  if (v16 && !*((_BYTE *)v16 + 24))
  {
LABEL_59:
    v15 = v7;
  }
  else
  {
    *((_BYTE *)v15 + 24) = 1;
    *((_BYTE *)v7 + 24) = 0;
    v22 = v15[1];
    *v7 = v22;
    if (v22)
      *(_QWORD *)(v22 + 16) = v7;
    v15[2] = v7[2];
    *(_QWORD *)(v7[2] + 8 * (*(_QWORD *)v7[2] != (_QWORD)v7)) = v15;
    v15[1] = v7;
    v7[2] = (uint64_t)v15;
    v16 = v7;
  }
  v23 = v15[2];
  *((_BYTE *)v15 + 24) = *(_BYTE *)(v23 + 24);
  *(_BYTE *)(v23 + 24) = 1;
  *((_BYTE *)v16 + 24) = 1;
  v24 = *(uint64_t **)(v23 + 8);
  v25 = *v24;
  *(_QWORD *)(v23 + 8) = *v24;
  if (v25)
    *(_QWORD *)(v25 + 16) = v23;
  v24[2] = *(_QWORD *)(v23 + 16);
  *(_QWORD *)(*(_QWORD *)(v23 + 16) + 8 * (**(_QWORD **)(v23 + 16) != v23)) = v24;
  *v24 = v23;
LABEL_72:
  *(_QWORD *)(v23 + 16) = v24;
  return result;
}

void bitmapTestCombo(void)
{
  int v0;
  degas::Bitset **v1[2];
  uint64_t v2;
  void **v3;

  v0 = 100;
  do
  {
    testSet((uint64_t)v1);
    testEncodeDecodeBitmap(v1);
    testUnset((const degas::Bitmap *)v1);
    v3 = (void **)&v2;
    std::vector<degas::BitsetPtr>::__destroy_vector::operator()[abi:ne180100](&v3);
    --v0;
  }
  while (v0);
}

void sub_1CA1631D4(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v3 = v1;
  *(_QWORD *)(v2 - 24) = v3;
  std::vector<degas::BitsetPtr>::__destroy_vector::operator()[abi:ne180100]((void ***)(v2 - 24));
  _Unwind_Resume(a1);
}

uint64_t degas::getLogFile(degas *this)
{
  unsigned __int8 v1;
  uint64_t v3;
  std::string *v4;
  void *__p[2];
  uint64_t v6;

  {
    v3 = operator new();
    std::string::basic_string[abi:ne180100]<0>(__p, "traversalQuery.log");
    *(_DWORD *)v3 = -1;
    v4 = (std::string *)(v3 + 8);
    if (SHIBYTE(v6) < 0)
    {
      std::string::__init_copy_ctor_external(v4, (const std::string::value_type *)__p[0], (std::string::size_type)__p[1]);
      if (SHIBYTE(v6) < 0)
        operator delete(__p[0]);
    }
    else
    {
      *(_OWORD *)&v4->__r_.__value_.__l.__data_ = *(_OWORD *)__p;
      *(_QWORD *)(v3 + 24) = v6;
    }
    degas::getLogFile(void)::sLogFile = v3;
  }
  return degas::getLogFile(void)::sLogFile;
}

void sub_1CA163AF8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  uint64_t v15;

  if (a15 < 0)
    operator delete(__p);
  MEMORY[0x1CAA4ADC8](v15, 0x1012C40849EBCB1);
  _Unwind_Resume(a1);
}

_QWORD *std::string::basic_string[abi:ne180100]<0>(_QWORD *a1, char *__s)
{
  size_t v4;
  size_t v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;

  v4 = strlen(__s);
  if (v4 >= 0x7FFFFFFFFFFFFFF8)
    std::string::__throw_length_error[abi:ne180100]();
  v5 = v4;
  if (v4 >= 0x17)
  {
    v7 = (v4 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v4 | 7) != 0x17)
      v7 = v4 | 7;
    v8 = v7 + 1;
    v6 = operator new(v7 + 1);
    a1[1] = v5;
    a1[2] = v8 | 0x8000000000000000;
    *a1 = v6;
  }
  else
  {
    *((_BYTE *)a1 + 23) = v4;
    v6 = a1;
    if (!v4)
      goto LABEL_9;
  }
  memmove(v6, __s, v5);
LABEL_9:
  *((_BYTE *)v6 + v5) = 0;
  return a1;
}

void std::string::__throw_length_error[abi:ne180100]()
{
  std::__throw_length_error[abi:ne180100]("basic_string");
}

uint64_t degas::NeighborQuery::NeighborQuery(uint64_t a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;
  BOOL v7;

  v4 = a2[1];
  *(_QWORD *)a1 = *a2;
  *(_QWORD *)(a1 + 8) = v4;
  if (v4)
  {
    v5 = (unint64_t *)(v4 + 8);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  *(_QWORD *)(a1 + 24) = a3;
  v7 = *a2 && ((*(uint64_t (**)(_QWORD))(*(_QWORD *)*a2 + 48))(*a2) & 1) == 0;
  *(_BYTE *)(a1 + 16) = v7;
  return a1;
}

void sub_1CA163C74(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::shared_ptr<degas::Predicate>::~shared_ptr[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

uint64_t std::shared_ptr<degas::Predicate>::~shared_ptr[abi:ne180100](uint64_t a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  v2 = *(std::__shared_weak_count **)(a1 + 8);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  return a1;
}

void degas::NeighborQuery::enableInstrumentedTraversal(degas::NeighborQuery *this)
{
  degas::sInstrumentTraversal = 1;
}

uint64_t degas::NeighborQuery::choosePlan(degas::NeighborQuery *this, unint64_t a2, unint64_t a3, int a4)
{
  unint64_t v4;
  int v6;

  v4 = a3 / a2;
  if (a2 >= 0x33 && v4 < 0xA || a3 <= 0xE && v4 < 3)
    return 4;
  if (a3 < 0x249F0)
    v6 = a4;
  else
    v6 = 0;
  if (a3 < 0x15E)
    v6 = 1;
  if (v6)
    return 7;
  else
    return 2;
}

uint64_t degas::NeighborQuery::neighborsNodesFirst(uint64_t a1, uint64_t a2, _QWORD *a3, _QWORD *a4, Bitmap *a5, unsigned int a6, degas::Bitmap *a7)
{
  uint64_t v13;
  uint64_t *TargetNodesByLabelIdentifiersSourceNodeIdentifiers;
  uint64_t *EdgesByLabelIdentifiersSourceNodeIdentifiers;
  uint64_t v16;
  uint64_t v17;
  int v18;
  unsigned int v19;
  uint64_t v20;
  int v21;
  uint64_t *EdgesByLabelIdentifiersTargetNodeIdentifiers;
  uint64_t v23;
  int v24;
  uint64_t *SourceNodesByLabelIdentifiersTargetNodeIdentifiers;
  uint64_t v26;
  int v27;
  uint64_t v28;
  degas::Statement *v30[2];
  _BYTE v31[32];
  degas::Statement *v32[2];
  degas::Statement *v33[2];
  Bitmap v34;
  __int128 v35;
  _OWORD v36[2];
  void **v37;

  if (*a4)
  {
    if (a6 <= 1)
    {
      degas::LabelledEdgeCursor::LabelledEdgeCursor(v30);
      v35 = 0u;
      memset(v36, 0, 25);
      if (*a3 && (*(unsigned int (**)(_QWORD, __int128 *))(*(_QWORD *)*a3 + 40))(*a3, &v35))
      {
        EdgesByLabelIdentifiersSourceNodeIdentifiers = degas::LabelledEdgeTable::prepareStatementToReadEdgesByLabelIdentifiersSourceNodeIdentifiers((degas::LabelledEdgeTable *)(*(_QWORD *)(a1 + 24) + 1144), (const degas::Bitmap *)&v35, a5);
        std::shared_ptr<degas::Statement>::operator=[abi:ne180100](v30, *EdgesByLabelIdentifiersSourceNodeIdentifiers, EdgesByLabelIdentifiersSourceNodeIdentifiers[1]);
      }
      else
      {
        degas::LabelledEdgeCursor::setForEdgesFromSourceNodes((degas::LabelledEdgeCursor *)v30, a5, (const degas::LabelledEdgeTable *)(*(_QWORD *)(a1 + 24) + 1144));
      }
      memset(&v34, 0, 41);
      while (1)
      {
        v16 = degas::Statement::next((sqlite3_stmt **)v30[0]);
        v17 = v16;
        if ((_DWORD)v16 != 1)
          break;
        degas::Statement::bitmapColumnValue((sqlite3_stmt **)v30[0], 0, (degas::Bitmap *)&v34);
      }
      v13 = v16;
      v18 = v16 & 0xFFFFFFFD;
      if ((v16 & 0xFFFFFFFD) == 0)
      {
        if (*a4)
          (*(void (**)(_QWORD, Bitmap *, Bitmap *))(*(_QWORD *)*a4 + 24))(*a4, &v34, &v34);
        degas::LabelledEdgeCursor::LabelledEdgeCursor(v33);
        degas::LabelledEdgeCursor::setForTargetNodesFromEdges((degas::LabelledEdgeCursor *)v33, &v34, (const degas::LabelledEdgeTable *)(*(_QWORD *)(a1 + 24) + 1144));
        while (1)
        {
          v19 = degas::Statement::next((sqlite3_stmt **)v33[0]);
          if (v19 != 1)
            break;
          degas::Statement::bitmapColumnValue((sqlite3_stmt **)v33[0], 0, a7);
        }
        if (v19 == 2)
          v13 = 0;
        else
          v13 = v19;
        degas::Cursor::~Cursor(v33);
      }
      v33[0] = (degas::Statement *)&v34._bitSets;
      std::vector<degas::BitsetPtr>::__destroy_vector::operator()[abi:ne180100]((void ***)v33);
      v34._bitCount = (unint64_t)v36;
      std::vector<degas::BitsetPtr>::__destroy_vector::operator()[abi:ne180100]((void ***)&v34);
      degas::Cursor::~Cursor(v30);
      if (v18)
        return v17;
    }
    else
    {
      v13 = 0;
    }
    if ((a6 & 0xFFFFFFFD) == 0)
    {
      degas::LabelledEdgeCursor::LabelledEdgeCursor(v33);
      v35 = 0u;
      memset(v36, 0, 25);
      if (*a3 && (*(unsigned int (**)(_QWORD, __int128 *))(*(_QWORD *)*a3 + 40))(*a3, &v35))
      {
        EdgesByLabelIdentifiersTargetNodeIdentifiers = degas::LabelledEdgeTable::prepareStatementToReadEdgesByLabelIdentifiersTargetNodeIdentifiers((degas::LabelledEdgeTable *)(*(_QWORD *)(a1 + 24) + 1144), (const degas::Bitmap *)&v35, a5);
        std::shared_ptr<degas::Statement>::operator=[abi:ne180100](v33, *EdgesByLabelIdentifiersTargetNodeIdentifiers, EdgesByLabelIdentifiersTargetNodeIdentifiers[1]);
      }
      else
      {
        degas::LabelledEdgeCursor::setForEdgesFromTargetNodes((degas::LabelledEdgeCursor *)v33, a5, (const degas::LabelledEdgeTable *)(*(_QWORD *)(a1 + 24) + 1144));
      }
      memset(&v34, 0, 41);
      while (1)
      {
        v23 = degas::Statement::next((sqlite3_stmt **)v33[0]);
        v17 = v23;
        if ((_DWORD)v23 != 1)
          break;
        degas::Statement::bitmapColumnValue((sqlite3_stmt **)v33[0], 0, (degas::Bitmap *)&v34);
      }
      if ((v23 & 0xFFFFFFFD) != 0)
      {
        v24 = 1;
        v13 = v23;
      }
      else
      {
        if (*a4)
          (*(void (**)(_QWORD, Bitmap *, Bitmap *))(*(_QWORD *)*a4 + 24))(*a4, &v34, &v34);
        degas::LabelledEdgeCursor::LabelledEdgeCursor(v32);
        degas::LabelledEdgeCursor::setForSourceNodesFromEdges((degas::LabelledEdgeCursor *)v32, &v34, (const degas::LabelledEdgeTable *)(*(_QWORD *)(a1 + 24) + 1144));
        *(_OWORD *)v30 = 0u;
        memset(v31, 0, 25);
        while (1)
        {
          v28 = degas::Statement::next((sqlite3_stmt **)v32[0]);
          v17 = v28;
          if ((_DWORD)v28 != 1)
            break;
          degas::Statement::bitmapColumnValue((sqlite3_stmt **)v32[0], 0, (degas::Bitmap *)v30);
        }
        v13 = (_DWORD)v28 == 2 ? 0 : v28;
        if ((_DWORD)v13)
        {
          v24 = 1;
        }
        else
        {
          if (a6 < 2)
            degas::Bitmap::unionWith<degas::Bitmap>(a7, (uint64_t)v30);
          else
            degas::Bitmap::operator=(a7, v30);
          v17 = 0;
          v24 = 0;
        }
        v37 = (void **)v31;
        std::vector<degas::BitsetPtr>::__destroy_vector::operator()[abi:ne180100](&v37);
        degas::Cursor::~Cursor(v32);
      }
      v30[0] = (degas::Statement *)&v34._bitSets;
      std::vector<degas::BitsetPtr>::__destroy_vector::operator()[abi:ne180100]((void ***)v30);
      v34._bitCount = (unint64_t)v36;
      std::vector<degas::BitsetPtr>::__destroy_vector::operator()[abi:ne180100]((void ***)&v34);
      degas::Cursor::~Cursor(v33);
      if (v24)
        return v17;
    }
  }
  else
  {
    if (a6 > 1)
      goto LABEL_76;
    degas::LabelledEdgeCursor::LabelledEdgeCursor(&v34);
    v35 = 0u;
    memset(v36, 0, 25);
    if (*a3 && (*(unsigned int (**)(_QWORD, __int128 *))(*(_QWORD *)*a3 + 40))(*a3, &v35))
    {
      TargetNodesByLabelIdentifiersSourceNodeIdentifiers = degas::LabelledEdgeTable::prepareStatementToReadTargetNodesByLabelIdentifiersSourceNodeIdentifiers((degas::LabelledEdgeTable *)(*(_QWORD *)(a1 + 24) + 1144), (const degas::Bitmap *)&v35, a5);
      std::shared_ptr<degas::Statement>::operator=[abi:ne180100](&v34, *TargetNodesByLabelIdentifiersSourceNodeIdentifiers, TargetNodesByLabelIdentifiersSourceNodeIdentifiers[1]);
    }
    else
    {
      degas::LabelledEdgeCursor::setForTargetNodesFromSourceNodes((degas::LabelledEdgeCursor *)&v34, a5, (const degas::LabelledEdgeTable *)(*(_QWORD *)(a1 + 24) + 1144));
    }
    while (1)
    {
      v20 = degas::Statement::next((sqlite3_stmt **)v34._bitCount);
      v13 = v20;
      if ((_DWORD)v20 != 1)
        break;
      degas::Statement::bitmapColumnValue((sqlite3_stmt **)v34._bitCount, 0, a7);
    }
    v21 = v20 & 0xFFFFFFFD;
    v30[0] = (degas::Statement *)v36;
    std::vector<degas::BitsetPtr>::__destroy_vector::operator()[abi:ne180100]((void ***)v30);
    degas::Cursor::~Cursor((degas::Statement **)&v34);
    if (!v21)
    {
LABEL_76:
      if ((a6 & 0xFFFFFFFD) != 0)
        return 0;
      degas::LabelledEdgeCursor::LabelledEdgeCursor(v30);
      v35 = 0u;
      memset(v36, 0, 25);
      if (*a3 && (*(unsigned int (**)(_QWORD, __int128 *))(*(_QWORD *)*a3 + 40))(*a3, &v35))
      {
        SourceNodesByLabelIdentifiersTargetNodeIdentifiers = degas::LabelledEdgeTable::prepareStatementToReadSourceNodesByLabelIdentifiersTargetNodeIdentifiers((degas::LabelledEdgeTable *)(*(_QWORD *)(a1 + 24) + 1144), (const degas::Bitmap *)&v35, a5);
        std::shared_ptr<degas::Statement>::operator=[abi:ne180100](v30, *SourceNodesByLabelIdentifiersTargetNodeIdentifiers, SourceNodesByLabelIdentifiersTargetNodeIdentifiers[1]);
      }
      else
      {
        degas::LabelledEdgeCursor::setForSourceNodesFromTargetNodes((degas::LabelledEdgeCursor *)v30, a5, (const degas::LabelledEdgeTable *)(*(_QWORD *)(a1 + 24) + 1144));
      }
      memset(&v34, 0, 41);
      while (1)
      {
        v26 = degas::Statement::next((sqlite3_stmt **)v30[0]);
        v13 = v26;
        if ((_DWORD)v26 != 1)
          break;
        degas::Statement::bitmapColumnValue((sqlite3_stmt **)v30[0], 0, (degas::Bitmap *)&v34);
      }
      v27 = v26 & 0xFFFFFFFD;
      if ((v26 & 0xFFFFFFFD) == 0)
      {
        if (a6 < 2)
          degas::Bitmap::unionWith<degas::Bitmap>(a7, (uint64_t)&v34);
        else
          degas::Bitmap::operator=(a7, &v34);
        v13 = 0;
      }
      v33[0] = (degas::Statement *)&v34._bitSets;
      std::vector<degas::BitsetPtr>::__destroy_vector::operator()[abi:ne180100]((void ***)v33);
      v34._bitCount = (unint64_t)v36;
      std::vector<degas::BitsetPtr>::__destroy_vector::operator()[abi:ne180100]((void ***)&v34);
      degas::Cursor::~Cursor(v30);
      if (!v27)
        return 0;
    }
  }
  return v13;
}

void sub_1CA164294(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, degas::Statement *a15, uint64_t a16, degas::Statement *a17, uint64_t a18, void **a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27)
{
  uint64_t v27;

  *(_QWORD *)(v27 - 104) = &a11;
  std::vector<degas::BitsetPtr>::__destroy_vector::operator()[abi:ne180100]((void ***)(v27 - 104));
  degas::Cursor::~Cursor(&a15);
  a9 = (void **)&a21;
  std::vector<degas::BitsetPtr>::__destroy_vector::operator()[abi:ne180100](&a9);
  a19 = (void **)&a27;
  std::vector<degas::BitsetPtr>::__destroy_vector::operator()[abi:ne180100](&a19);
  degas::Cursor::~Cursor(&a17);
  _Unwind_Resume(a1);
}

void degas::Bitmap::unionWith<degas::Bitmap>(degas::Bitmap *this, uint64_t a2)
{
  unint64_t v2;
  unint64_t v3;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;

  v12 = 0;
  v13 = 0;
  v2 = *(_QWORD *)(a2 + 24) - *(_QWORD *)(a2 + 16);
  v3 = (v2 >> 4);
  if ((v2 & 0xFFFFFFFF0) != 0 && v3 != 0)
  {
    v7 = 0;
    while (1)
    {
      v8 = *((_QWORD *)this + 2);
      v9 = *(_QWORD *)(a2 + 16);
      if (v13 >= (*((_QWORD *)this + 3) - v8) >> 4)
        break;
      degas::Bitmap::mergeBitset(this, &v13, *(degas::Bitset **)(v8 + 16 * v13), &v12, *(const degas::Bitset **)(v9 + 16 * v7));
      v7 = v12;
      if (v12 >= v3)
      {
        v9 = *(_QWORD *)(a2 + 16);
        break;
      }
    }
    v10 = *(_QWORD *)(a2 + 24) - v9;
    if (v7 < (v10 >> 4))
    {
      v11 = (v10 >> 4);
      do
        degas::Bitmap::appendBitset(this, *(const degas::Bitset **)(*(_QWORD *)(a2 + 16) + 16 * v7++));
      while (v11 != v7);
    }
  }
}

uint64_t degas::NeighborQuery::neighborsNodesEdgeFilter(uint64_t a1, degas::Bitmap *a2, uint64_t a3, _QWORD *a4, Bitmap *a5, unsigned int a6, degas::Bitmap *a7)
{
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t *TargetNodesByEdgeIdentifiersSourceNodeIdentifiersFilterEdge;
  uint64_t v17;
  uint64_t v18;
  uint64_t *EdgesBySourceNodeIdentifiersEdgeFilter;
  uint64_t v20;
  uint64_t v21;
  int v22;
  unsigned int v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t *EdgesByTargetNodeIdentifiersEdgeFilter;
  uint64_t v27;
  int v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t *SourceNodesByEdgeIdentifiersTargetNodeIdentifiersFilterEdge;
  uint64_t v32;
  int v33;
  uint64_t v34;
  uint64_t v35;
  int v36;
  degas::Statement *v38[2];
  _BYTE v39[32];
  degas::Statement *v40[2];
  degas::Statement *v41[2];
  Bitmap v42;
  void **v43;

  if (*a4)
  {
    if (a6 <= 1)
    {
      degas::LabelledEdgeCursor::LabelledEdgeCursor(v38);
      v17 = degas::Bitmap::count(a2);
      v18 = *(_QWORD *)(a1 + 24);
      if (v17)
      {
        EdgesBySourceNodeIdentifiersEdgeFilter = degas::LabelledEdgeTable::prepareStatementToReadEdgesBySourceNodeIdentifiersEdgeFilter((degas::LabelledEdgeTable *)(v18 + 1144), a5, a2);
        std::shared_ptr<degas::Statement>::operator=[abi:ne180100](v38, *EdgesBySourceNodeIdentifiersEdgeFilter, EdgesBySourceNodeIdentifiersEdgeFilter[1]);
      }
      else
      {
        degas::LabelledEdgeCursor::setForEdgesFromSourceNodes((degas::LabelledEdgeCursor *)v38, a5, (const degas::LabelledEdgeTable *)(v18 + 1144));
      }
      memset(&v42, 0, 41);
      while (1)
      {
        v20 = degas::Statement::next((sqlite3_stmt **)v38[0]);
        v21 = v20;
        if ((_DWORD)v20 != 1)
          break;
        degas::Statement::bitmapColumnValue((sqlite3_stmt **)v38[0], 0, (degas::Bitmap *)&v42);
      }
      v13 = v20;
      v22 = v20 & 0xFFFFFFFD;
      if ((v20 & 0xFFFFFFFD) == 0)
      {
        if (*a4)
          (*(void (**)(_QWORD, Bitmap *, Bitmap *))(*(_QWORD *)*a4 + 24))(*a4, &v42, &v42);
        degas::LabelledEdgeCursor::LabelledEdgeCursor(v41);
        degas::LabelledEdgeCursor::setForTargetNodesFromEdges((degas::LabelledEdgeCursor *)v41, &v42, (const degas::LabelledEdgeTable *)(*(_QWORD *)(a1 + 24) + 1144));
        while (1)
        {
          v23 = degas::Statement::next((sqlite3_stmt **)v41[0]);
          if (v23 != 1)
            break;
          degas::Statement::bitmapColumnValue((sqlite3_stmt **)v41[0], 0, a7);
        }
        if (v23 == 2)
          v13 = 0;
        else
          v13 = v23;
        degas::Cursor::~Cursor(v41);
      }
      v41[0] = (degas::Statement *)&v42._bitSets;
      std::vector<degas::BitsetPtr>::__destroy_vector::operator()[abi:ne180100]((void ***)v41);
      degas::Cursor::~Cursor(v38);
      if (v22)
        return v21;
    }
    else
    {
      v13 = 0;
    }
    if ((a6 & 0xFFFFFFFD) == 0)
    {
      degas::LabelledEdgeCursor::LabelledEdgeCursor(v41);
      v24 = degas::Bitmap::count(a2);
      v25 = *(_QWORD *)(a1 + 24);
      if (v24)
      {
        EdgesByTargetNodeIdentifiersEdgeFilter = degas::LabelledEdgeTable::prepareStatementToReadEdgesByTargetNodeIdentifiersEdgeFilter((degas::LabelledEdgeTable *)(v25 + 1144), a5, a2);
        std::shared_ptr<degas::Statement>::operator=[abi:ne180100](v41, *EdgesByTargetNodeIdentifiersEdgeFilter, EdgesByTargetNodeIdentifiersEdgeFilter[1]);
      }
      else
      {
        degas::LabelledEdgeCursor::setForEdgesFromTargetNodes((degas::LabelledEdgeCursor *)v41, a5, (const degas::LabelledEdgeTable *)(v25 + 1144));
      }
      memset(&v42, 0, 41);
      while (1)
      {
        v32 = degas::Statement::next((sqlite3_stmt **)v41[0]);
        v21 = v32;
        if ((_DWORD)v32 != 1)
          break;
        degas::Statement::bitmapColumnValue((sqlite3_stmt **)v41[0], 0, (degas::Bitmap *)&v42);
      }
      if ((v32 & 0xFFFFFFFD) != 0)
      {
        v33 = 1;
        v13 = v32;
      }
      else
      {
        if (*a4)
          (*(void (**)(_QWORD, Bitmap *, Bitmap *))(*(_QWORD *)*a4 + 24))(*a4, &v42, &v42);
        degas::LabelledEdgeCursor::LabelledEdgeCursor(v40);
        degas::LabelledEdgeCursor::setForSourceNodesFromEdges((degas::LabelledEdgeCursor *)v40, &v42, (const degas::LabelledEdgeTable *)(*(_QWORD *)(a1 + 24) + 1144));
        *(_OWORD *)v38 = 0u;
        memset(v39, 0, 25);
        while (1)
        {
          v34 = degas::Statement::next((sqlite3_stmt **)v40[0]);
          v21 = v34;
          if ((_DWORD)v34 != 1)
            break;
          degas::Statement::bitmapColumnValue((sqlite3_stmt **)v40[0], 0, (degas::Bitmap *)v38);
        }
        v13 = (_DWORD)v34 == 2 ? 0 : v34;
        if ((_DWORD)v13)
        {
          v33 = 1;
        }
        else
        {
          if (a6 < 2)
            degas::Bitmap::unionWith<degas::Bitmap>(a7, (uint64_t)v38);
          else
            degas::Bitmap::operator=(a7, v38);
          v21 = 0;
          v33 = 0;
        }
        v43 = (void **)v39;
        std::vector<degas::BitsetPtr>::__destroy_vector::operator()[abi:ne180100](&v43);
        degas::Cursor::~Cursor(v40);
      }
      v38[0] = (degas::Statement *)&v42._bitSets;
      std::vector<degas::BitsetPtr>::__destroy_vector::operator()[abi:ne180100]((void ***)v38);
      degas::Cursor::~Cursor(v41);
      if (v33)
        return v21;
    }
  }
  else
  {
    if (a6 > 1)
      goto LABEL_72;
    degas::LabelledEdgeCursor::LabelledEdgeCursor(&v42);
    v14 = degas::Bitmap::count(a2);
    v15 = *(_QWORD *)(a1 + 24);
    if (v14)
    {
      TargetNodesByEdgeIdentifiersSourceNodeIdentifiersFilterEdge = degas::LabelledEdgeTable::prepareStatementToReadTargetNodesByEdgeIdentifiersSourceNodeIdentifiersFilterEdge((degas::LabelledEdgeTable *)(v15 + 1144), a2, a5);
      std::shared_ptr<degas::Statement>::operator=[abi:ne180100](&v42, *TargetNodesByEdgeIdentifiersSourceNodeIdentifiersFilterEdge, TargetNodesByEdgeIdentifiersSourceNodeIdentifiersFilterEdge[1]);
    }
    else
    {
      degas::LabelledEdgeCursor::setForTargetNodesFromSourceNodes((degas::LabelledEdgeCursor *)&v42, a5, (const degas::LabelledEdgeTable *)(v15 + 1144));
    }
    while (1)
    {
      v27 = degas::Statement::next((sqlite3_stmt **)v42._bitCount);
      v13 = v27;
      if ((_DWORD)v27 != 1)
        break;
      degas::Statement::bitmapColumnValue((sqlite3_stmt **)v42._bitCount, 0, a7);
    }
    v28 = v27 & 0xFFFFFFFD;
    degas::Cursor::~Cursor((degas::Statement **)&v42);
    if (!v28)
    {
LABEL_72:
      if ((a6 & 0xFFFFFFFD) != 0)
        return 0;
      degas::LabelledEdgeCursor::LabelledEdgeCursor(v38);
      v29 = degas::Bitmap::count(a2);
      v30 = *(_QWORD *)(a1 + 24);
      if (v29)
      {
        SourceNodesByEdgeIdentifiersTargetNodeIdentifiersFilterEdge = degas::LabelledEdgeTable::prepareStatementToReadSourceNodesByEdgeIdentifiersTargetNodeIdentifiersFilterEdge((degas::LabelledEdgeTable *)(v30 + 1144), a2, a5);
        std::shared_ptr<degas::Statement>::operator=[abi:ne180100](v38, *SourceNodesByEdgeIdentifiersTargetNodeIdentifiersFilterEdge, SourceNodesByEdgeIdentifiersTargetNodeIdentifiersFilterEdge[1]);
      }
      else
      {
        degas::LabelledEdgeCursor::setForSourceNodesFromTargetNodes((degas::LabelledEdgeCursor *)v38, a5, (const degas::LabelledEdgeTable *)(v30 + 1144));
      }
      memset(&v42, 0, 41);
      while (1)
      {
        v35 = degas::Statement::next((sqlite3_stmt **)v38[0]);
        v13 = v35;
        if ((_DWORD)v35 != 1)
          break;
        degas::Statement::bitmapColumnValue((sqlite3_stmt **)v38[0], 0, (degas::Bitmap *)&v42);
      }
      v36 = v35 & 0xFFFFFFFD;
      if ((v35 & 0xFFFFFFFD) == 0)
      {
        if (a6 < 2)
          degas::Bitmap::unionWith<degas::Bitmap>(a7, (uint64_t)&v42);
        else
          degas::Bitmap::operator=(a7, &v42);
        v13 = 0;
      }
      v41[0] = (degas::Statement *)&v42._bitSets;
      std::vector<degas::BitsetPtr>::__destroy_vector::operator()[abi:ne180100]((void ***)v41);
      degas::Cursor::~Cursor(v38);
      if (!v36)
        return 0;
    }
  }
  return v13;
}

void sub_1CA1648E8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, degas::Statement *a15, uint64_t a16, degas::Statement *a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21)
{
  uint64_t v21;

  *(_QWORD *)(v21 - 88) = &a11;
  std::vector<degas::BitsetPtr>::__destroy_vector::operator()[abi:ne180100]((void ***)(v21 - 88));
  degas::Cursor::~Cursor(&a15);
  a9 = (void **)&a21;
  std::vector<degas::BitsetPtr>::__destroy_vector::operator()[abi:ne180100](&a9);
  degas::Cursor::~Cursor(&a17);
  _Unwind_Resume(a1);
}

uint64_t degas::NeighborQuery::neighborsEdgesFirstJoinBoth(uint64_t a1, degas::Bitmap *this, uint64_t **a3, Bitmap *a4, unsigned int a5, degas::Bitmap *a6)
{
  uint64_t v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t *v16;
  uint64_t v17;
  degas::Statement *v19[2];
  __int128 v20;
  _BYTE v21[32];
  Bitmap v22;

  memset(&v22, 0, 41);
  if (*a3)
  {
    v11 = degas::Bitmap::count(this);
    v12 = **a3;
    if (v11)
      (*(void (**)(void))(v12 + 24))();
    else
      (*(void (**)(void))(v12 + 16))();
  }
  else
  {
    degas::Bitmap::operator=(&v22, this);
  }
  if (a5 > 1)
  {
    v15 = 0;
  }
  else
  {
    v20 = 0u;
    memset(v21, 0, 25);
    degas::LabelledEdgeCursor::LabelledEdgeCursor(v19);
    v13 = degas::LabelledEdgeTable::prepareStatementToReadTargetNodesByEdgeIdentifiersSourceNodeIdentifiersJoinBoth((degas::LabelledEdgeTable *)(*(_QWORD *)(a1 + 24) + 1144), &v22, a4);
    std::shared_ptr<degas::Statement>::operator=[abi:ne180100](v19, *v13, v13[1]);
    while (1)
    {
      v14 = degas::Statement::next((sqlite3_stmt **)v19[0]);
      v15 = v14;
      if ((_DWORD)v14 != 1)
        break;
      degas::Statement::bitmapColumnValue((sqlite3_stmt **)v19[0], 0, (degas::Bitmap *)&v20);
    }
    if ((_DWORD)v14 == 2)
    {
      degas::Bitmap::operator=(a6, &v20);
      v15 = 0;
    }
    degas::Cursor::~Cursor(v19);
    v19[0] = (degas::Statement *)v21;
    std::vector<degas::BitsetPtr>::__destroy_vector::operator()[abi:ne180100]((void ***)v19);
  }
  if ((a5 & 0xFFFFFFFD) == 0)
  {
    v20 = 0u;
    memset(v21, 0, 25);
    degas::LabelledEdgeCursor::LabelledEdgeCursor(v19);
    v16 = degas::LabelledEdgeTable::prepareStatementToReadSourceNodesByEdgeIdentifiersTargetNodeIdentifiersJoinEdge((degas::LabelledEdgeTable *)(*(_QWORD *)(a1 + 24) + 1144), &v22, a4);
    std::shared_ptr<degas::Statement>::operator=[abi:ne180100](v19, *v16, v16[1]);
    while (1)
    {
      v17 = degas::Statement::next((sqlite3_stmt **)v19[0]);
      v15 = v17;
      if ((_DWORD)v17 != 1)
        break;
      degas::Statement::bitmapColumnValue((sqlite3_stmt **)v19[0], 0, (degas::Bitmap *)&v20);
    }
    if ((_DWORD)v17 == 2)
    {
      degas::Bitmap::unionWith<degas::Bitmap>(a6, (uint64_t)&v20);
      v15 = 0;
    }
    degas::Cursor::~Cursor(v19);
    v19[0] = (degas::Statement *)v21;
    std::vector<degas::BitsetPtr>::__destroy_vector::operator()[abi:ne180100]((void ***)v19);
  }
  *(_QWORD *)&v20 = &v22._bitSets;
  std::vector<degas::BitsetPtr>::__destroy_vector::operator()[abi:ne180100]((void ***)&v20);
  return v15;
}

void sub_1CA164BA4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9, uint64_t a10, void **a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19)
{
  a9 = (void **)&a13;
  std::vector<degas::BitsetPtr>::__destroy_vector::operator()[abi:ne180100](&a9);
  a11 = (void **)&a19;
  std::vector<degas::BitsetPtr>::__destroy_vector::operator()[abi:ne180100](&a11);
  _Unwind_Resume(a1);
}

uint64_t degas::NeighborQuery::neighborsEdgesFirstJoinEdge(uint64_t a1, degas::Bitmap *this, uint64_t **a3, Bitmap *a4, unsigned int a5, degas::Bitmap *a6)
{
  uint64_t v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t *v16;
  uint64_t v17;
  degas::Statement *v19[2];
  __int128 v20;
  _BYTE v21[32];
  Bitmap v22;

  memset(&v22, 0, 41);
  if (*a3)
  {
    v11 = degas::Bitmap::count(this);
    v12 = **a3;
    if (v11)
      (*(void (**)(void))(v12 + 24))();
    else
      (*(void (**)(void))(v12 + 16))();
  }
  else
  {
    degas::Bitmap::operator=(&v22, this);
  }
  if (a5 > 1)
  {
    v15 = 0;
  }
  else
  {
    v20 = 0u;
    memset(v21, 0, 25);
    degas::LabelledEdgeCursor::LabelledEdgeCursor(v19);
    v13 = degas::LabelledEdgeTable::prepareStatementToReadTargetNodesByEdgeIdentifiersSourceNodeIdentifiersJoinEdge((degas::LabelledEdgeTable *)(*(_QWORD *)(a1 + 24) + 1144), &v22, a4);
    std::shared_ptr<degas::Statement>::operator=[abi:ne180100](v19, *v13, v13[1]);
    while (1)
    {
      v14 = degas::Statement::next((sqlite3_stmt **)v19[0]);
      v15 = v14;
      if ((_DWORD)v14 != 1)
        break;
      degas::Statement::bitmapColumnValue((sqlite3_stmt **)v19[0], 0, (degas::Bitmap *)&v20);
    }
    if ((_DWORD)v14 == 2)
    {
      degas::Bitmap::operator=(a6, &v20);
      v15 = 0;
    }
    degas::Cursor::~Cursor(v19);
    v19[0] = (degas::Statement *)v21;
    std::vector<degas::BitsetPtr>::__destroy_vector::operator()[abi:ne180100]((void ***)v19);
  }
  if ((a5 & 0xFFFFFFFD) == 0)
  {
    v20 = 0u;
    memset(v21, 0, 25);
    degas::LabelledEdgeCursor::LabelledEdgeCursor(v19);
    v16 = degas::LabelledEdgeTable::prepareStatementToReadSourceNodesByEdgeIdentifiersTargetNodeIdentifiersJoinEdge((degas::LabelledEdgeTable *)(*(_QWORD *)(a1 + 24) + 1144), &v22, a4);
    std::shared_ptr<degas::Statement>::operator=[abi:ne180100](v19, *v16, v16[1]);
    while (1)
    {
      v17 = degas::Statement::next((sqlite3_stmt **)v19[0]);
      v15 = v17;
      if ((_DWORD)v17 != 1)
        break;
      degas::Statement::bitmapColumnValue((sqlite3_stmt **)v19[0], 0, (degas::Bitmap *)&v20);
    }
    if ((_DWORD)v17 == 2)
    {
      degas::Bitmap::unionWith<degas::Bitmap>(a6, (uint64_t)&v20);
      v15 = 0;
    }
    degas::Cursor::~Cursor(v19);
    v19[0] = (degas::Statement *)v21;
    std::vector<degas::BitsetPtr>::__destroy_vector::operator()[abi:ne180100]((void ***)v19);
  }
  *(_QWORD *)&v20 = &v22._bitSets;
  std::vector<degas::BitsetPtr>::__destroy_vector::operator()[abi:ne180100]((void ***)&v20);
  return v15;
}

void sub_1CA164DF4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9, uint64_t a10, void **a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19)
{
  a9 = (void **)&a13;
  std::vector<degas::BitsetPtr>::__destroy_vector::operator()[abi:ne180100](&a9);
  a11 = (void **)&a19;
  std::vector<degas::BitsetPtr>::__destroy_vector::operator()[abi:ne180100](&a11);
  _Unwind_Resume(a1);
}

uint64_t degas::NeighborQuery::neighborsEdgesFirstFilterEdge(uint64_t a1, degas::Bitmap *this, uint64_t **a3, Bitmap *a4, unsigned int a5, degas::Bitmap *a6)
{
  uint64_t v11;
  uint64_t v12;
  uint64_t *TargetNodesByEdgeIdentifiersSourceNodeIdentifiersFilterEdge;
  uint64_t v14;
  uint64_t v15;
  uint64_t *SourceNodesByEdgeIdentifiersTargetNodeIdentifiersFilterEdge;
  uint64_t v17;
  degas::Statement *v19[2];
  __int128 v20;
  _BYTE v21[32];
  __int128 v22;
  _BYTE v23[32];

  v22 = 0u;
  memset(v23, 0, 25);
  if (*a3)
  {
    v11 = degas::Bitmap::count(this);
    v12 = **a3;
    if (v11)
      (*(void (**)(void))(v12 + 24))();
    else
      (*(void (**)(void))(v12 + 16))();
  }
  else
  {
    degas::Bitmap::operator=(&v22, this);
  }
  if (a5 > 1)
  {
    v15 = 0;
  }
  else
  {
    v20 = 0u;
    memset(v21, 0, 25);
    degas::LabelledEdgeCursor::LabelledEdgeCursor(v19);
    TargetNodesByEdgeIdentifiersSourceNodeIdentifiersFilterEdge = degas::LabelledEdgeTable::prepareStatementToReadTargetNodesByEdgeIdentifiersSourceNodeIdentifiersFilterEdge((degas::LabelledEdgeTable *)(*(_QWORD *)(a1 + 24)+ 1144), (const degas::Bitmap *)&v22, a4);
    std::shared_ptr<degas::Statement>::operator=[abi:ne180100](v19, *TargetNodesByEdgeIdentifiersSourceNodeIdentifiersFilterEdge, TargetNodesByEdgeIdentifiersSourceNodeIdentifiersFilterEdge[1]);
    while (1)
    {
      v14 = degas::Statement::next((sqlite3_stmt **)v19[0]);
      v15 = v14;
      if ((_DWORD)v14 != 1)
        break;
      degas::Statement::bitmapColumnValue((sqlite3_stmt **)v19[0], 0, (degas::Bitmap *)&v20);
    }
    if ((_DWORD)v14 == 2)
    {
      degas::Bitmap::operator=(a6, &v20);
      v15 = 0;
    }
    degas::Cursor::~Cursor(v19);
    v19[0] = (degas::Statement *)v21;
    std::vector<degas::BitsetPtr>::__destroy_vector::operator()[abi:ne180100]((void ***)v19);
  }
  if ((a5 & 0xFFFFFFFD) == 0)
  {
    v20 = 0u;
    memset(v21, 0, 25);
    degas::LabelledEdgeCursor::LabelledEdgeCursor(v19);
    SourceNodesByEdgeIdentifiersTargetNodeIdentifiersFilterEdge = degas::LabelledEdgeTable::prepareStatementToReadSourceNodesByEdgeIdentifiersTargetNodeIdentifiersFilterEdge((degas::LabelledEdgeTable *)(*(_QWORD *)(a1 + 24)+ 1144), (const degas::Bitmap *)&v22, a4);
    std::shared_ptr<degas::Statement>::operator=[abi:ne180100](v19, *SourceNodesByEdgeIdentifiersTargetNodeIdentifiersFilterEdge, SourceNodesByEdgeIdentifiersTargetNodeIdentifiersFilterEdge[1]);
    while (1)
    {
      v17 = degas::Statement::next((sqlite3_stmt **)v19[0]);
      v15 = v17;
      if ((_DWORD)v17 != 1)
        break;
      degas::Statement::bitmapColumnValue((sqlite3_stmt **)v19[0], 0, (degas::Bitmap *)&v20);
    }
    if ((_DWORD)v17 == 2)
    {
      degas::Bitmap::unionWith<degas::Bitmap>(a6, (uint64_t)&v20);
      v15 = 0;
    }
    degas::Cursor::~Cursor(v19);
    v19[0] = (degas::Statement *)v21;
    std::vector<degas::BitsetPtr>::__destroy_vector::operator()[abi:ne180100]((void ***)v19);
  }
  *(_QWORD *)&v20 = v23;
  std::vector<degas::BitsetPtr>::__destroy_vector::operator()[abi:ne180100]((void ***)&v20);
  return v15;
}

void sub_1CA165044(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9, uint64_t a10, void **a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19)
{
  a9 = (void **)&a13;
  std::vector<degas::BitsetPtr>::__destroy_vector::operator()[abi:ne180100](&a9);
  a11 = (void **)&a19;
  std::vector<degas::BitsetPtr>::__destroy_vector::operator()[abi:ne180100](&a11);
  _Unwind_Resume(a1);
}

uint64_t degas::NeighborQuery::neighborsEdgesFirstFilterNode(uint64_t a1, degas::Bitmap *this, uint64_t **a3, const degas::Bitmap *a4, unsigned int a5, degas::Bitmap *a6)
{
  uint64_t v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t *v16;
  uint64_t v17;
  degas::Statement *v19[2];
  __int128 v20;
  _BYTE v21[32];
  Bitmap v22;

  memset(&v22, 0, 41);
  if (*a3)
  {
    v11 = degas::Bitmap::count(this);
    v12 = **a3;
    if (v11)
      (*(void (**)(void))(v12 + 24))();
    else
      (*(void (**)(void))(v12 + 16))();
  }
  else
  {
    degas::Bitmap::operator=(&v22, this);
  }
  if (a5 > 1)
  {
    v15 = 0;
  }
  else
  {
    v20 = 0u;
    memset(v21, 0, 25);
    degas::LabelledEdgeCursor::LabelledEdgeCursor(v19);
    v13 = degas::LabelledEdgeTable::prepareStatementToReadTargetNodesByEdgeIdentifiersSourceNodeIdentifiersFilterNode((degas::LabelledEdgeTable *)(*(_QWORD *)(a1 + 24) + 1144), &v22, a4);
    std::shared_ptr<degas::Statement>::operator=[abi:ne180100](v19, *v13, v13[1]);
    while (1)
    {
      v14 = degas::Statement::next((sqlite3_stmt **)v19[0]);
      v15 = v14;
      if ((_DWORD)v14 != 1)
        break;
      degas::Statement::bitmapColumnValue((sqlite3_stmt **)v19[0], 0, (degas::Bitmap *)&v20);
    }
    if ((_DWORD)v14 == 2)
    {
      degas::Bitmap::operator=(a6, &v20);
      v15 = 0;
    }
    degas::Cursor::~Cursor(v19);
    v19[0] = (degas::Statement *)v21;
    std::vector<degas::BitsetPtr>::__destroy_vector::operator()[abi:ne180100]((void ***)v19);
  }
  if ((a5 & 0xFFFFFFFD) == 0)
  {
    v20 = 0u;
    memset(v21, 0, 25);
    degas::LabelledEdgeCursor::LabelledEdgeCursor(v19);
    v16 = degas::LabelledEdgeTable::prepareStatementToReadSourceNodesByEdgeIdentifiersTargetNodeIdentifiersFilterNode((degas::LabelledEdgeTable *)(*(_QWORD *)(a1 + 24) + 1144), &v22, a4);
    std::shared_ptr<degas::Statement>::operator=[abi:ne180100](v19, *v16, v16[1]);
    while (1)
    {
      v17 = degas::Statement::next((sqlite3_stmt **)v19[0]);
      v15 = v17;
      if ((_DWORD)v17 != 1)
        break;
      degas::Statement::bitmapColumnValue((sqlite3_stmt **)v19[0], 0, (degas::Bitmap *)&v20);
    }
    if ((_DWORD)v17 == 2)
    {
      degas::Bitmap::unionWith<degas::Bitmap>(a6, (uint64_t)&v20);
      v15 = 0;
    }
    degas::Cursor::~Cursor(v19);
    v19[0] = (degas::Statement *)v21;
    std::vector<degas::BitsetPtr>::__destroy_vector::operator()[abi:ne180100]((void ***)v19);
  }
  *(_QWORD *)&v20 = &v22._bitSets;
  std::vector<degas::BitsetPtr>::__destroy_vector::operator()[abi:ne180100]((void ***)&v20);
  return v15;
}

void sub_1CA165294(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9, uint64_t a10, void **a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19)
{
  a9 = (void **)&a13;
  std::vector<degas::BitsetPtr>::__destroy_vector::operator()[abi:ne180100](&a9);
  a11 = (void **)&a19;
  std::vector<degas::BitsetPtr>::__destroy_vector::operator()[abi:ne180100](&a11);
  _Unwind_Resume(a1);
}

uint64_t degas::NeighborQuery::appendSourceNodesForEdges(degas::NeighborQuery *this, Bitmap *a2, degas::Bitmap *a3)
{
  uint64_t v6;
  uint64_t v7;
  __int128 v9;
  _BYTE v10[40];
  degas::Statement *v11[2];
  void **v12;

  degas::LabelledEdgeCursor::LabelledEdgeCursor(v11);
  degas::LabelledEdgeCursor::setForSourceNodesFromEdges((degas::LabelledEdgeCursor *)v11, a2, (const degas::LabelledEdgeTable *)(*((_QWORD *)this + 3) + 1144));
  v9 = 0u;
  memset(v10, 0, 25);
  while (1)
  {
    v6 = degas::Statement::next((sqlite3_stmt **)v11[0]);
    v7 = v6;
    if ((_DWORD)v6 != 1)
      break;
    degas::Statement::bitmapColumnValue((sqlite3_stmt **)v11[0], 0, (degas::Bitmap *)&v9);
  }
  if ((_DWORD)v6 == 2)
  {
    degas::Bitmap::unionWith<degas::Bitmap>(a3, (uint64_t)&v9);
    v7 = 0;
  }
  v12 = (void **)v10;
  std::vector<degas::BitsetPtr>::__destroy_vector::operator()[abi:ne180100](&v12);
  degas::Cursor::~Cursor(v11);
  return v7;
}

void sub_1CA1653AC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  uint64_t v3;
  uint64_t v5;
  va_list va;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  va_list va1;

  va_start(va1, a3);
  va_start(va, a3);
  v5 = va_arg(va1, _QWORD);
  v7 = va_arg(va1, _QWORD);
  v8 = va_arg(va1, _QWORD);
  v9 = va_arg(va1, _QWORD);
  v10 = va_arg(va1, _QWORD);
  *(_QWORD *)(v3 - 40) = va;
  std::vector<degas::BitsetPtr>::__destroy_vector::operator()[abi:ne180100]((void ***)(v3 - 40));
  degas::Cursor::~Cursor((degas::Statement **)va1);
  _Unwind_Resume(a1);
}

uint64_t degas::NeighborQuery::appendTargetNodesForEdges(degas::NeighborQuery *this, Bitmap *a2, degas::Bitmap *a3)
{
  uint64_t v6;
  uint64_t v7;
  __int128 v9;
  _BYTE v10[40];
  degas::Statement *v11[2];
  void **v12;

  degas::LabelledEdgeCursor::LabelledEdgeCursor(v11);
  degas::LabelledEdgeCursor::setForTargetNodesFromEdges((degas::LabelledEdgeCursor *)v11, a2, (const degas::LabelledEdgeTable *)(*((_QWORD *)this + 3) + 1144));
  v9 = 0u;
  memset(v10, 0, 25);
  while (1)
  {
    v6 = degas::Statement::next((sqlite3_stmt **)v11[0]);
    v7 = v6;
    if ((_DWORD)v6 != 1)
      break;
    degas::Statement::bitmapColumnValue((sqlite3_stmt **)v11[0], 0, (degas::Bitmap *)&v9);
  }
  if ((_DWORD)v6 == 2)
  {
    degas::Bitmap::unionWith<degas::Bitmap>(a3, (uint64_t)&v9);
    v7 = 0;
  }
  v12 = (void **)v10;
  std::vector<degas::BitsetPtr>::__destroy_vector::operator()[abi:ne180100](&v12);
  degas::Cursor::~Cursor(v11);
  return v7;
}

void sub_1CA16549C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  uint64_t v3;
  uint64_t v5;
  va_list va;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  va_list va1;

  va_start(va1, a3);
  va_start(va, a3);
  v5 = va_arg(va1, _QWORD);
  v7 = va_arg(va1, _QWORD);
  v8 = va_arg(va1, _QWORD);
  v9 = va_arg(va1, _QWORD);
  v10 = va_arg(va1, _QWORD);
  *(_QWORD *)(v3 - 40) = va;
  std::vector<degas::BitsetPtr>::__destroy_vector::operator()[abi:ne180100]((void ***)(v3 - 40));
  degas::Cursor::~Cursor((degas::Statement **)va1);
  _Unwind_Resume(a1);
}

uint64_t degas::NeighborQuery::neighborsNodeTableEdges(degas::NeighborQuery *a1, degas::Bitmap *a2, _QWORD *a3, Bitmap *a4, unsigned int a5, _QWORD *a6)
{
  degas::NodeCursor *v12;
  uint64_t v13;
  uint64_t appended;
  _DWORD *v15;
  _DWORD *v16;
  Bitmap v18;
  Bitmap v19;
  __int128 v20;
  _BYTE v21[40];
  degas::Statement *v22[2];
  vector<degas::BitsetPtr, std::allocator<degas::BitsetPtr>> *p_bitSets;

  v12 = (degas::NodeCursor *)degas::NodeCursor::NodeCursor(v22);
  degas::NodeCursor::setForIdentifiers(v12, a4, (const degas::NodeTable *)(*((_QWORD *)a1 + 3) + 192));
  v20 = 0u;
  memset(v21, 0, 25);
  memset(&v19, 0, 41);
  memset(&v18, 0, 41);
  while (1)
  {
    v13 = degas::Statement::next((sqlite3_stmt **)v22[0]);
    appended = v13;
    if ((_DWORD)v13 != 1)
      break;
    if (a5 <= 1)
    {
      v15 = sqlite3_column_blob(*(sqlite3_stmt **)v22[0], 3);
      if (v15[1])
        degas::Bitmap::unionWith<degas::LiteralBitmap>((degas::Bitmap *)&v19, (uint64_t)v15);
    }
    if ((a5 & 0xFFFFFFFD) == 0)
    {
      v16 = sqlite3_column_blob(*(sqlite3_stmt **)v22[0], 2);
      if (v16[1])
        degas::Bitmap::unionWith<degas::LiteralBitmap>((degas::Bitmap *)&v18, (uint64_t)v16);
    }
  }
  if ((_DWORD)v13 == 2)
  {
    if (v19._bitSets.__begin_ == v19._bitSets.__end_)
      goto LABEL_26;
    if (degas::Bitmap::count(a2))
      degas::Bitmap::intersectWith<degas::Bitmap>((degas::Bitmap *)&v19, a2);
    if (*a3)
      (*(void (**)(_QWORD, Bitmap *, Bitmap *))(*(_QWORD *)*a3 + 24))(*a3, &v19, &v19);
    appended = degas::NeighborQuery::appendTargetNodesForEdges(a1, &v19, (degas::Bitmap *)&v20);
    if (!(_DWORD)appended)
    {
LABEL_26:
      if (v18._bitSets.__begin_ == v18._bitSets.__end_)
        goto LABEL_22;
      if (degas::Bitmap::count(a2))
        degas::Bitmap::intersectWith<degas::Bitmap>((degas::Bitmap *)&v18, a2);
      if (*a3)
        (*(void (**)(_QWORD, Bitmap *, Bitmap *))(*(_QWORD *)*a3 + 24))(*a3, &v18, &v18);
      appended = degas::NeighborQuery::appendSourceNodesForEdges(a1, &v18, (degas::Bitmap *)&v20);
      if (!(_DWORD)appended)
      {
LABEL_22:
        degas::Bitmap::operator=(a6, &v20);
        appended = 0;
      }
    }
  }
  p_bitSets = &v18._bitSets;
  std::vector<degas::BitsetPtr>::__destroy_vector::operator()[abi:ne180100]((void ***)&p_bitSets);
  v18._bitCount = (unint64_t)&v19._bitSets;
  std::vector<degas::BitsetPtr>::__destroy_vector::operator()[abi:ne180100]((void ***)&v18);
  v19._bitCount = (unint64_t)v21;
  std::vector<degas::BitsetPtr>::__destroy_vector::operator()[abi:ne180100]((void ***)&v19);
  degas::Cursor::~Cursor(v22);
  return appended;
}

void sub_1CA1656D4(_Unwind_Exception *a1)
{
  uint64_t v1;

  degas::Cursor::~Cursor((degas::Statement **)(v1 - 88));
  _Unwind_Resume(a1);
}

void degas::Bitmap::intersectWith<degas::Bitmap>(degas::Bitmap *this, degas::Bitmap *a2)
{
  unint64_t v3;
  degas::BitsetPtr *v4;
  char *v5;
  degas::BitsetPtr *v6;
  unint64_t v7;
  unint64_t Offset;
  unint64_t v10;
  degas::Bitset **v11;
  int v12;
  degas::BitsetPtr **v13;
  degas::BitsetPtr *v14;
  unint64_t v15;
  unint64_t v16;

  v15 = 0;
  v16 = 0;
  v3 = *((_QWORD *)a2 + 3) - *((_QWORD *)a2 + 2);
  if ((v3 & 0xFFFFFFFF0) == 0)
  {
    v13 = (degas::BitsetPtr **)((char *)this + 24);
    v14 = (degas::BitsetPtr *)*((_QWORD *)this + 3);
    v6 = (degas::BitsetPtr *)*((_QWORD *)this + 2);
    *(_QWORD *)this = 0;
    for (*((_QWORD *)this + 1) = 0; v14 != v6; v14 = (degas::BitsetPtr *)((char *)v14 - 16))
    {
      degas::BitsetPtr::releaseBitset((degas::BitsetPtr *)((char *)v14 - 16));
      *((_QWORD *)v14 - 1) = 0;
    }
    goto LABEL_14;
  }
  v6 = (degas::BitsetPtr *)*((_QWORD *)this + 2);
  v4 = (degas::BitsetPtr *)*((_QWORD *)this + 3);
  v5 = (char *)this + 16;
  if (v6 == v4)
  {
    v13 = (degas::BitsetPtr **)((char *)this + 24);
    *(_QWORD *)this = 0;
    *((_QWORD *)this + 1) = 0;
LABEL_14:
    *v13 = v6;
    return;
  }
  v7 = (v3 >> 4);
  if ((v3 >> 4))
  {
    LODWORD(Offset) = 0;
    while (1)
    {
      v10 = v16;
      v6 = (degas::BitsetPtr *)*((_QWORD *)this + 2);
      v4 = (degas::BitsetPtr *)*((_QWORD *)this + 3);
      if (v16 >= (v4 - v6) >> 4)
        break;
      v11 = (degas::Bitset **)((char *)v6 + 16 * v16);
      v12 = degas::Bitmap::intersectBitset((degas::BitsetPtr **)this, &v16, *v11, &v15, *(const degas::Bitset **)(*((_QWORD *)a2 + 2) + 16 * Offset));
      Offset = v15;
      if (v12)
      {
        Offset = degas::Bitmap::findOffset(a2, *((_QWORD *)*v11 + 1), v15, v7);
        v15 = Offset;
      }
      if (Offset >= v7)
      {
        v10 = v16;
        v6 = (degas::BitsetPtr *)*((_QWORD *)this + 2);
        v4 = (degas::BitsetPtr *)*((_QWORD *)this + 3);
        break;
      }
    }
  }
  else
  {
    v10 = 0;
  }
  if (v10 < (v4 - v6) >> 4)
  {
    std::vector<degas::BitsetPtr>::erase((uint64_t)v5, (degas::BitsetPtr *)((char *)v6 + 16 * v10), v4);
    *(_QWORD *)this = 0xFFFFFFFFLL;
    *((_BYTE *)this + 40) = 1;
  }
}

uint64_t degas::NeighborQuery::neighborsWithPlan(degas::NeighborQuery *a1, uint64_t a2, degas::Bitmap *this, _QWORD *a4, uint64_t **a5, Bitmap *a6, unsigned int a7, degas::Bitmap *a8)
{
  uint64_t result;

  switch((int)a2)
  {
    case 1:
      result = degas::NeighborQuery::neighborsNodesFirst((uint64_t)a1, a2, a4, a5, a6, a7, a8);
      break;
    case 2:
      result = degas::NeighborQuery::neighborsNodeTableEdges(a1, this, a5, a6, a7, a8);
      break;
    case 3:
      result = degas::NeighborQuery::neighborsEdgesFirstJoinBoth((uint64_t)a1, this, a5, a6, a7, a8);
      break;
    case 4:
      result = degas::NeighborQuery::neighborsEdgesFirstJoinEdge((uint64_t)a1, this, a5, a6, a7, a8);
      break;
    case 5:
      result = degas::NeighborQuery::neighborsEdgesFirstFilterEdge((uint64_t)a1, this, a5, a6, a7, a8);
      break;
    case 6:
      result = degas::NeighborQuery::neighborsEdgesFirstFilterNode((uint64_t)a1, this, a5, (const degas::Bitmap *)a6, a7, a8);
      break;
    case 7:
      result = degas::NeighborQuery::neighborsNodesEdgeFilter((uint64_t)a1, this, (uint64_t)this, a5, a6, a7, a8);
      break;
    default:
      abort();
  }
  return result;
}

unint64_t degas::NeighborQuery::neighbors(degas::Database **a1, degas::Bitmap *this, unsigned int a3, degas::Bitmap *a4)
{
  degas::Predicate *v9;
  void **v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  std::__shared_weak_count *v13;
  uint64_t *v14;
  unint64_t *v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t *v18;
  uint64_t *v19;
  uint64_t v20;
  unsigned int v21;
  uint64_t v22;
  int32x4_t v23;
  degas::Predicate *v24;
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;
  uint64_t v28;
  BOOL v29;
  unint64_t *v31;
  unint64_t v32;
  std::__shared_weak_count *v33;
  unint64_t *v34;
  unint64_t v35;
  std::__shared_weak_count *v36;
  unint64_t *v37;
  unint64_t v38;
  std::__shared_weak_count *v39;
  unint64_t *v40;
  unint64_t v41;
  uint64_t *v42[2];
  void **v43;
  std::__shared_weak_count *v44;
  void **v45;
  std::__shared_weak_count *v46;
  uint64_t *v47;
  uint64_t *v48;
  __int128 v49;
  _OWORD v50[3];
  _BYTE v51[40];
  void **v52;

  if (degas::sInstrumentTraversal == 1)
    return degas::NeighborQuery::neighbors_instrumented(a1, this, a3, a4);
  v50[2] = 0u;
  memset(v51, 0, 25);
  v9 = (degas::Predicate *)degas::Bitmap::count(this);
  if (v9)
  {
    if (*((_BYTE *)a1 + 16))
    {
      (*(void (**)(void ***__return_ptr, degas::Database *, degas::Database **))(*(_QWORD *)*a1 + 32))(&v45, *a1, a1);
      v10 = v45;
      v43 = v45;
      v44 = v46;
      if (v46)
      {
        p_shared_owners = (unint64_t *)&v46->__shared_owners_;
        do
          v12 = __ldxr(p_shared_owners);
        while (__stxr(v12 + 1, p_shared_owners));
      }
      v14 = v47;
      v13 = (std::__shared_weak_count *)v48;
      v42[0] = v47;
      v42[1] = v48;
      if (v48)
      {
        v15 = (unint64_t *)(v48 + 1);
        do
          v16 = __ldxr(v15);
        while (__stxr(v16 + 1, v15));
      }
      v49 = 0u;
      memset(v50, 0, 25);
      if (v10)
      {
        v17 = (*((uint64_t (**)(void **, __int128 *))*v10 + 2))(v10, &v49);
        if ((_DWORD)v17)
          goto LABEL_47;
        v17 = v49;
        if ((_QWORD)v49 == 0xFFFFFFFFLL)
        {
          v19 = (uint64_t *)*((_QWORD *)&v50[0] + 1);
          v18 = *(uint64_t **)&v50[0];
          if (*(_QWORD *)&v50[0] == *((_QWORD *)&v50[0] + 1))
          {
            v17 = 0;
          }
          else
          {
            v17 = 0;
            do
            {
              v20 = *v18;
              v21 = *(_DWORD *)(*v18 + 4);
              if (v21 == -1)
              {
                v22 = 0;
                v23 = 0uLL;
                do
                {
                  do
                  {
                    v23 = (int32x4_t)vpadalq_u16((uint32x4_t)v23, vpaddlq_u8((uint8x16_t)vcntq_s8(*(int8x16_t *)(v20 + 4 * v22 + 16))));
                    v22 += 4;
                  }
                  while (v22 != 32);
                  v22 = 0;
                  v21 = vaddvq_s32(v23);
                  v23 = 0uLL;
                }
                while (v21 == -1);
                *(_DWORD *)(v20 + 4) = v21;
              }
              v17 += v21;
              v18 += 2;
            }
            while (v18 != v19);
          }
          *(_QWORD *)&v49 = v17;
        }
        if (!v17)
          goto LABEL_47;
      }
      else
      {
        v17 = degas::Database::edgeCount(a1[3]);
      }
      if (v14 && ((*(uint64_t (**)(uint64_t *))(*v14 + 56))(v14) & 1) != 0)
      {
        v17 = 0;
      }
      else
      {
        v26 = degas::Bitmap::count(this);
        v27 = v17 / v26;
        if ((v26 < 0x33 || v27 >= 0xA) && (v17 > 0xE || v27 >= 3))
        {
          if (v14)
            v29 = v17 >= 0x249F0;
          else
            v29 = 1;
          if (v29 && v17 >= 0x15E)
            v28 = 2;
          else
            v28 = 7;
        }
        else
        {
          v28 = 4;
        }
        v17 = degas::NeighborQuery::neighborsWithPlan((degas::NeighborQuery *)a1, v28, (degas::Bitmap *)&v49, &v43, v42, (Bitmap *)this, a3, a4);
      }
LABEL_47:
      v52 = (void **)v50;
      std::vector<degas::BitsetPtr>::__destroy_vector::operator()[abi:ne180100](&v52);
      if (v13)
      {
        v31 = (unint64_t *)&v13->__shared_owners_;
        do
          v32 = __ldaxr(v31);
        while (__stlxr(v32 - 1, v31));
        if (!v32)
        {
          ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
          std::__shared_weak_count::__release_weak(v13);
        }
      }
      v33 = v44;
      if (v44)
      {
        v34 = (unint64_t *)&v44->__shared_owners_;
        do
          v35 = __ldaxr(v34);
        while (__stlxr(v35 - 1, v34));
        if (!v35)
        {
          ((void (*)(std::__shared_weak_count *))v33->__on_zero_shared)(v33);
          std::__shared_weak_count::__release_weak(v33);
        }
      }
      v36 = (std::__shared_weak_count *)v48;
      if (v48)
      {
        v37 = (unint64_t *)(v48 + 1);
        do
          v38 = __ldaxr(v37);
        while (__stlxr(v38 - 1, v37));
        if (!v38)
        {
          ((void (*)(std::__shared_weak_count *))v36->__on_zero_shared)(v36);
          std::__shared_weak_count::__release_weak(v36);
        }
      }
      v39 = v46;
      if (v46)
      {
        v40 = (unint64_t *)&v46->__shared_owners_;
        do
          v41 = __ldaxr(v40);
        while (__stlxr(v41 - 1, v40));
        if (!v41)
        {
          ((void (*)(std::__shared_weak_count *))v39->__on_zero_shared)(v39);
          std::__shared_weak_count::__release_weak(v39);
        }
      }
      goto LABEL_67;
    }
    v49 = 0u;
    memset(v50, 0, 25);
    v24 = (degas::Predicate *)degas::Predicate::nullPtr(v9);
    degas::Predicate::nullPtr(v24);
    v17 = degas::NeighborQuery::neighborsNodesFirst((uint64_t)a1, v25, degas::Predicate::nullPtr(void)::nullPtr, degas::Predicate::nullPtr(void)::nullPtr, (Bitmap *)this, a3, a4);
    v45 = (void **)v50;
    std::vector<degas::BitsetPtr>::__destroy_vector::operator()[abi:ne180100](&v45);
  }
  else
  {
    v17 = 0;
  }
LABEL_67:
  *(_QWORD *)&v49 = v51;
  std::vector<degas::BitsetPtr>::__destroy_vector::operator()[abi:ne180100]((void ***)&v49);
  return v17;
}

void sub_1CA165D24(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void **a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25)
{
  uint64_t v25;

  *(_QWORD *)(v25 - 72) = &a19;
  std::vector<degas::BitsetPtr>::__destroy_vector::operator()[abi:ne180100]((void ***)(v25 - 72));
  std::shared_ptr<degas::Predicate>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  std::shared_ptr<degas::Predicate>::~shared_ptr[abi:ne180100]((uint64_t)&a11);
  std::shared_ptr<degas::Predicate>::~shared_ptr[abi:ne180100]((uint64_t)&a15);
  std::shared_ptr<degas::Predicate>::~shared_ptr[abi:ne180100]((uint64_t)&a13);
  a17 = (void **)&a25;
  std::vector<degas::BitsetPtr>::__destroy_vector::operator()[abi:ne180100](&a17);
  _Unwind_Resume(a1);
}

uint64_t degas::NeighborQuery::neighbors_instrumented(degas::Database **a1, degas::Bitmap *this, unsigned int a3, degas::Bitmap *a4)
{
  degas::Predicate *v6;
  uint64_t v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  uint64_t *v10;
  std::__shared_weak_count *v11;
  unint64_t *v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t *v16;
  uint64_t *v17;
  uint64_t v18;
  unsigned int v19;
  uint64_t v20;
  int32x4_t v21;
  degas::Predicate *v22;
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;
  uint64_t v26;
  BOOL v27;
  int v29;
  int v30;
  char v31;
  double v32;
  double v33;
  uint64_t v34;
  uint64_t v35;
  double Current;
  double v37;
  uint64_t *v38;
  uint64_t *v39;
  uint64_t v40;
  uint64_t v41;
  unsigned int v42;
  uint64_t v43;
  int32x4_t v44;
  uint64_t *v45;
  uint64_t *v46;
  char *v47;
  uint64_t v48;
  unsigned int v49;
  uint64_t v50;
  int32x4_t v51;
  BOOL v52;
  unint64_t v54;
  degas::Database *v55;
  degas::Database *v56;
  uint64_t v57;
  uint64_t *v58;
  uint64_t *v59;
  uint64_t v60;
  uint64_t v61;
  unsigned int v62;
  uint64_t v63;
  int32x4_t v64;
  unint64_t *v65;
  unint64_t v66;
  std::__shared_weak_count *v67;
  unint64_t *v68;
  unint64_t v69;
  std::__shared_weak_count *v70;
  unint64_t *v71;
  unint64_t v72;
  std::__shared_weak_count *v73;
  unint64_t *v74;
  unint64_t v75;
  void *__p[2];
  char v80;
  void *v81[2];
  _OWORD v82[2];
  __int128 v83;
  _QWORD v84[4];
  uint64_t *v85[2];
  uint64_t v86;
  std::__shared_weak_count *v87;
  uint64_t v88;
  std::__shared_weak_count *v89;
  uint64_t *v90;
  uint64_t *v91;
  __int128 v92;
  _QWORD v93[4];
  __int128 v94;
  _BYTE v95[48];

  v94 = 0u;
  memset(v95, 0, 25);
  v6 = (degas::Predicate *)degas::Bitmap::count(this);
  if (!v6)
  {
    v14 = 0;
    goto LABEL_132;
  }
  if (!*((_BYTE *)a1 + 16))
  {
    v92 = 0u;
    memset(v93, 0, 25);
    v22 = (degas::Predicate *)degas::Predicate::nullPtr(v6);
    degas::Predicate::nullPtr(v22);
    v14 = degas::NeighborQuery::neighborsNodesFirst((uint64_t)a1, v23, degas::Predicate::nullPtr(void)::nullPtr, degas::Predicate::nullPtr(void)::nullPtr, (Bitmap *)this, a3, a4);
    *(_QWORD *)&v83 = v93;
    std::vector<degas::BitsetPtr>::__destroy_vector::operator()[abi:ne180100]((void ***)&v83);
    goto LABEL_132;
  }
  (*(void (**)(uint64_t *__return_ptr, degas::Database *, degas::Database **))(*(_QWORD *)*a1 + 32))(&v88, *a1, a1);
  v7 = v88;
  v86 = v88;
  v87 = v89;
  if (v89)
  {
    p_shared_owners = (unint64_t *)&v89->__shared_owners_;
    do
      v9 = __ldxr(p_shared_owners);
    while (__stxr(v9 + 1, p_shared_owners));
  }
  v10 = v90;
  v11 = (std::__shared_weak_count *)v91;
  v85[0] = v90;
  v85[1] = v91;
  if (v91)
  {
    v12 = (unint64_t *)(v91 + 1);
    do
      v13 = __ldxr(v12);
    while (__stxr(v13 + 1, v12));
  }
  v92 = 0u;
  memset(v93, 0, 25);
  if (!v7)
  {
    v15 = degas::Database::edgeCount(a1[3]);
    goto LABEL_27;
  }
  v14 = (*(uint64_t (**)(uint64_t, __int128 *))(*(_QWORD *)v7 + 16))(v7, &v92);
  if ((_DWORD)v14)
    goto LABEL_112;
  v15 = v92;
  if ((_QWORD)v92 == 0xFFFFFFFFLL)
  {
    v16 = (uint64_t *)v93[0];
    v17 = (uint64_t *)v93[1];
    if (v93[0] == v93[1])
    {
      v15 = 0;
    }
    else
    {
      v15 = 0;
      do
      {
        v18 = *v16;
        v19 = *(_DWORD *)(*v16 + 4);
        if (v19 == -1)
        {
          v20 = 0;
          v21 = 0uLL;
          do
          {
            do
            {
              v21 = (int32x4_t)vpadalq_u16((uint32x4_t)v21, vpaddlq_u8((uint8x16_t)vcntq_s8(*(int8x16_t *)(v18 + 4 * v20 + 16))));
              v20 += 4;
            }
            while (v20 != 32);
            v20 = 0;
            v19 = vaddvq_s32(v21);
            v21 = 0uLL;
          }
          while (v19 == -1);
          *(_DWORD *)(v18 + 4) = v19;
        }
        v15 += v19;
        v16 += 2;
      }
      while (v16 != v17);
    }
    *(_QWORD *)&v92 = v15;
  }
  if (v15)
  {
LABEL_27:
    if (v10 && ((*(uint64_t (**)(uint64_t *))(*v10 + 56))(v10) & 1) != 0)
      goto LABEL_29;
    v24 = degas::Bitmap::count(this);
    v25 = v15 / v24;
    if ((v24 < 0x33 || v25 >= 0xA) && (v15 > 0xE || v25 >= 3))
    {
      if (v10)
        v27 = v15 >= 0x249F0;
      else
        v27 = 1;
      if (v27 && v15 >= 0x15E)
        v26 = 2;
      else
        v26 = 7;
    }
    else
    {
      v26 = 4;
    }
    v29 = 0;
    v83 = 0u;
    memset(v84, 0, 25);
    v30 = degas::NeighborQuery::neighbors_instrumented(degas::Bitmap const&,degas::EdgeDirection,degas::Bitmap&)::offset;
    v31 = 1;
    v32 = 1.0e10;
    v33 = 0.0;
    do
    {
      v34 = v26;
      *(_OWORD *)v81 = 0u;
      memset(v82, 0, 25);
      v35 = degas::NeighborQuery::transitiveClosureNeighbors_instrumented(degas::Bitmap const&,degas::EdgeDirection,degas::Bitmap&)::planList[v30 % 7];
      Current = CFAbsoluteTimeGetCurrent();
      v14 = degas::NeighborQuery::neighborsWithPlan((degas::NeighborQuery *)a1, v35, (degas::Bitmap *)&v92, &v86, v85, (Bitmap *)this, a3, (degas::Bitmap *)v81);
      if ((_DWORD)v14)
      {
        __p[0] = v82;
        std::vector<degas::BitsetPtr>::__destroy_vector::operator()[abi:ne180100]((void ***)__p);
        goto LABEL_111;
      }
      v37 = CFAbsoluteTimeGetCurrent() - Current;
      if (v37 < v32)
      {
        v32 = v37;
        v29 = v35;
      }
      if ((v31 & 1) != 0)
      {
        degas::Bitmap::operator=(&v83, v81);
        degas::Bitmap::operator=(a4, v81);
      }
      else if (!degas::Bitmap::operator==((uint64_t)v81, (uint64_t)&v83))
      {
        std::string::basic_string[abi:ne180100]<0>(__p, "incorrect result for plan ");
        degas::Bitmap::count(this);
        if ((_QWORD)v83 == 0xFFFFFFFFLL)
        {
          v38 = (uint64_t *)v84[0];
          v39 = (uint64_t *)v84[1];
          if (v84[0] == v84[1])
          {
            v40 = 0;
          }
          else
          {
            v40 = 0;
            do
            {
              v41 = *v38;
              v42 = *(_DWORD *)(*v38 + 4);
              if (v42 == -1)
              {
                v43 = 0;
                v44 = 0uLL;
                do
                {
                  do
                  {
                    v44 = (int32x4_t)vpadalq_u16((uint32x4_t)v44, vpaddlq_u8((uint8x16_t)vcntq_s8(*(int8x16_t *)(v41 + 4 * v43 + 16))));
                    v43 += 4;
                  }
                  while (v43 != 32);
                  v43 = 0;
                  v42 = vaddvq_s32(v44);
                  v44 = 0uLL;
                }
                while (v42 == -1);
                *(_DWORD *)(v41 + 4) = v42;
              }
              v40 += v42;
              v38 += 2;
            }
            while (v38 != v39);
          }
          *(_QWORD *)&v83 = v40;
        }
        if (v81[0] == (void *)0xFFFFFFFFLL)
        {
          v46 = (uint64_t *)*((_QWORD *)&v82[0] + 1);
          v45 = *(uint64_t **)&v82[0];
          if (*(_QWORD *)&v82[0] == *((_QWORD *)&v82[0] + 1))
          {
            v47 = 0;
          }
          else
          {
            v47 = 0;
            do
            {
              v48 = *v45;
              v49 = *(_DWORD *)(*v45 + 4);
              if (v49 == -1)
              {
                v50 = 0;
                v51 = 0uLL;
                do
                {
                  do
                  {
                    v51 = (int32x4_t)vpadalq_u16((uint32x4_t)v51, vpaddlq_u8((uint8x16_t)vcntq_s8(*(int8x16_t *)(v48 + 4 * v50 + 16))));
                    v50 += 4;
                  }
                  while (v50 != 32);
                  v50 = 0;
                  v49 = vaddvq_s32(v51);
                  v51 = 0uLL;
                }
                while (v49 == -1);
                *(_DWORD *)(v48 + 4) = v49;
              }
              v47 += v49;
              v45 += 2;
            }
            while (v45 != v46);
          }
          v81[0] = v47;
        }
        degas::NeighborQuery::reportIncorrectPlanResult(a1, (uint64_t)__p, v35);
        if (v80 < 0)
          operator delete(__p[0]);
      }
      v52 = (_DWORD)v35 == (_DWORD)v34;
      v26 = v34;
      if (v52)
        v33 = v37;
      __p[0] = v82;
      std::vector<degas::BitsetPtr>::__destroy_vector::operator()[abi:ne180100]((void ***)__p);
      v31 = 0;
    }
    while (v30++ < degas::NeighborQuery::neighbors_instrumented(degas::Bitmap const&,degas::EdgeDirection,degas::Bitmap&)::offset
                  + 6);
    degas::NeighborQuery::neighbors_instrumented(degas::Bitmap const&,degas::EdgeDirection,degas::Bitmap&)::offset = (degas::NeighborQuery::neighbors_instrumented(degas::Bitmap const&,degas::EdgeDirection,degas::Bitmap&)::offset + 1) % 7u;
    if (v29 == (_DWORD)v34)
    {
      v54 = 0;
      ++degas::NeighborQuery::neighbors_instrumented(degas::Bitmap const&,degas::EdgeDirection,degas::Bitmap&)::scoreWins;
    }
    else
    {
      ++degas::NeighborQuery::neighbors_instrumented(degas::Bitmap const&,degas::EdgeDirection,degas::Bitmap&)::scoreLosses;
      if (v33 - v32 < 0.0)
        goto LABEL_110;
      *(double *)&degas::NeighborQuery::neighbors_instrumented(degas::Bitmap const&,degas::EdgeDirection,degas::Bitmap&)::totalTimeLost = v33 - v32 + *(double *)&degas::NeighborQuery::neighbors_instrumented(degas::Bitmap const&,degas::EdgeDirection,degas::Bitmap&)::totalTimeLost;
      v55 = *a1;
      if (*a1)
      {
        *(_OWORD *)v81 = 0u;
        memset(v82, 0, 25);
        (*(void (**)(degas::Database *, void **))(*(_QWORD *)v55 + 16))(v55, v81);
        v54 = degas::Bitmap::count((degas::Bitmap *)v81);
        __p[0] = v82;
        std::vector<degas::BitsetPtr>::__destroy_vector::operator()[abi:ne180100]((void ***)__p);
      }
      else
      {
        v54 = degas::Database::edgeCount(a1[3]);
      }
      std::string::basic_string[abi:ne180100]<0>(v81, "Query");
      degas::Bitmap::count(this);
      degas::Bitmap::count((degas::Bitmap *)&v92);
      degas::Database::nodeCount(a1[3]);
      degas::Database::edgeCount(a1[3]);
      degas::NeighborQuery::reportTimingPlanFailure(a1, (uint64_t)v81, v34, v29);
      if (SBYTE7(v82[0]) < 0)
        operator delete(v81[0]);
      LODWORD(v26) = v34;
    }
    if ((_DWORD)v26 == 7 || (_DWORD)v26 == 2)
    {
      if (!v54)
      {
        v56 = *a1;
        if (*a1)
        {
          *(_OWORD *)v81 = 0u;
          memset(v82, 0, 25);
          (*(void (**)(degas::Database *, void **))(*(_QWORD *)v56 + 16))(v56, v81);
          degas::Bitmap::count((degas::Bitmap *)v81);
          __p[0] = v82;
          std::vector<degas::BitsetPtr>::__destroy_vector::operator()[abi:ne180100]((void ***)__p);
        }
        else
        {
          degas::Database::edgeCount(a1[3]);
        }
      }
      std::string::basic_string[abi:ne180100]<0>(v81, "node-first plans ");
      v57 = degas::Bitmap::count(this);
      if ((_QWORD)v92 == 0xFFFFFFFFLL)
      {
        v58 = (uint64_t *)v93[0];
        v59 = (uint64_t *)v93[1];
        if (v93[0] == v93[1])
        {
          v60 = 0;
        }
        else
        {
          v60 = 0;
          do
          {
            v61 = *v58;
            v62 = *(_DWORD *)(*v58 + 4);
            if (v62 == -1)
            {
              v63 = 0;
              v64 = 0uLL;
              do
              {
                do
                {
                  v64 = (int32x4_t)vpadalq_u16((uint32x4_t)v64, vpaddlq_u8((uint8x16_t)vcntq_s8(*(int8x16_t *)(v61 + 4 * v63 + 16))));
                  v63 += 4;
                }
                while (v63 != 32);
                v63 = 0;
                v62 = vaddvq_s32(v64);
                v64 = 0uLL;
              }
              while (v62 == -1);
              *(_DWORD *)(v61 + 4) = v62;
            }
            v60 += v62;
            v58 += 2;
          }
          while (v58 != v59);
        }
        *(_QWORD *)&v92 = v60;
      }
      degas::NeighborQuery::reportNodeFirstPlanTimes(v57, (uint64_t)v81);
      if (SBYTE7(v82[0]) < 0)
        operator delete(v81[0]);
    }
LABEL_110:
    v14 = 0;
LABEL_111:
    v81[0] = v84;
    std::vector<degas::BitsetPtr>::__destroy_vector::operator()[abi:ne180100]((void ***)v81);
    goto LABEL_112;
  }
LABEL_29:
  v14 = 0;
LABEL_112:
  *(_QWORD *)&v83 = v93;
  std::vector<degas::BitsetPtr>::__destroy_vector::operator()[abi:ne180100]((void ***)&v83);
  if (v11)
  {
    v65 = (unint64_t *)&v11->__shared_owners_;
    do
      v66 = __ldaxr(v65);
    while (__stlxr(v66 - 1, v65));
    if (!v66)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
  v67 = v87;
  if (v87)
  {
    v68 = (unint64_t *)&v87->__shared_owners_;
    do
      v69 = __ldaxr(v68);
    while (__stlxr(v69 - 1, v68));
    if (!v69)
    {
      ((void (*)(std::__shared_weak_count *))v67->__on_zero_shared)(v67);
      std::__shared_weak_count::__release_weak(v67);
    }
  }
  v70 = (std::__shared_weak_count *)v91;
  if (v91)
  {
    v71 = (unint64_t *)(v91 + 1);
    do
      v72 = __ldaxr(v71);
    while (__stlxr(v72 - 1, v71));
    if (!v72)
    {
      ((void (*)(std::__shared_weak_count *))v70->__on_zero_shared)(v70);
      std::__shared_weak_count::__release_weak(v70);
    }
  }
  v73 = v89;
  if (v89)
  {
    v74 = (unint64_t *)&v89->__shared_owners_;
    do
      v75 = __ldaxr(v74);
    while (__stlxr(v75 - 1, v74));
    if (!v75)
    {
      ((void (*)(std::__shared_weak_count *))v73->__on_zero_shared)(v73);
      std::__shared_weak_count::__release_weak(v73);
    }
  }
LABEL_132:
  *(_QWORD *)&v92 = v95;
  std::vector<degas::BitsetPtr>::__destroy_vector::operator()[abi:ne180100]((void ***)&v92);
  return v14;
}

void sub_1CA1666CC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, uint64_t a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *__p,uint64_t a23,int a24,__int16 a25,char a26,char a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t *a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,char a37,uint64_t a38,char a39,uint64_t a40,char a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47)
{
  uint64_t v47;

  __p = a13;
  std::vector<degas::BitsetPtr>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  a31 = &a47;
  std::vector<degas::BitsetPtr>::__destroy_vector::operator()[abi:ne180100]((void ***)&a31);
  std::shared_ptr<degas::Predicate>::~shared_ptr[abi:ne180100]((uint64_t)&a37);
  std::shared_ptr<degas::Predicate>::~shared_ptr[abi:ne180100]((uint64_t)&a39);
  std::shared_ptr<degas::Predicate>::~shared_ptr[abi:ne180100]((uint64_t)&a43);
  std::shared_ptr<degas::Predicate>::~shared_ptr[abi:ne180100]((uint64_t)&a41);
  a45 = v47 - 176;
  std::vector<degas::BitsetPtr>::__destroy_vector::operator()[abi:ne180100]((void ***)&a45);
  _Unwind_Resume(a1);
}

uint64_t degas::NeighborQuery::reportIncorrectPlanResult(_QWORD *a1, uint64_t a2, int a3)
{
  int v6;
  uint64_t v7;
  uint64_t v8;
  unsigned int v9;
  void **v10;
  uint64_t v11;
  void **v12;
  uint64_t v13;
  void **v14;
  uint64_t v15;
  _QWORD *v16;
  _QWORD *v17;
  _QWORD *v18;
  const std::locale::facet *v19;
  degas *v20;
  degas::LocalLogFile *LogFile;
  void *__p[2];
  unsigned __int8 v24;
  void *v25;
  uint64_t v26;
  uint64_t v27;
  _QWORD v28[11];
  char v29;
  uint64_t v30;
  std::locale v31;

  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v28);
  v6 = *(char *)(a2 + 23);
  if (v6 >= 0)
    v7 = a2;
  else
    v7 = *(_QWORD *)a2;
  if (v6 >= 0)
    v8 = *(unsigned __int8 *)(a2 + 23);
  else
    v8 = *(_QWORD *)(a2 + 8);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v28, v7, v8);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v28, (uint64_t)"\n\tedge predicate=", 17);
  if (*a1)
  {
    (*(void (**)(void **__return_ptr, _QWORD, _QWORD))(*(_QWORD *)*a1 + 64))(&v25, *a1, a1[3]);
    v9 = HIBYTE(v27);
    v10 = (void **)v25;
    v11 = v26;
  }
  else
  {
    v11 = 0;
    v10 = 0;
    v9 = 0;
    v25 = 0;
    v26 = 0;
    v27 = 0;
  }
  if ((v9 & 0x80u) == 0)
    v12 = &v25;
  else
    v12 = v10;
  if ((v9 & 0x80u) == 0)
    v13 = v9;
  else
    v13 = v11;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v28, (uint64_t)v12, v13);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v28, (uint64_t)"\n\tplan=", 7);
  std::string::basic_string[abi:ne180100]<0>(__p, off_1E83E24C8[a3]);
  if ((v24 & 0x80u) == 0)
    v14 = __p;
  else
    v14 = (void **)__p[0];
  if ((v24 & 0x80u) == 0)
    v15 = v24;
  else
    v15 = (uint64_t)__p[1];
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v28, (uint64_t)v14, v15);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v28, (uint64_t)"\n\tstart node count=", 19);
  v16 = (_QWORD *)std::ostream::operator<<();
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, (uint64_t)"\n\tcorrect node count=", 21);
  v17 = (_QWORD *)std::ostream::operator<<();
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v17, (uint64_t)"\n\tthis node count=", 18);
  v18 = (_QWORD *)std::ostream::operator<<();
  std::ios_base::getloc((const std::ios_base *)((char *)v18 + *(_QWORD *)(*v18 - 24)));
  v19 = std::locale::use_facet(&v31, MEMORY[0x1E0DE4A90]);
  ((void (*)(const std::locale::facet *, uint64_t))v19->__vftable[2].~facet_0)(v19, 10);
  std::locale::~locale(&v31);
  std::ostream::put();
  v20 = (degas *)std::ostream::flush();
  if ((char)v24 < 0)
    operator delete(__p[0]);
  if (SHIBYTE(v27) < 0)
    operator delete(v25);
  LogFile = (degas::LocalLogFile *)degas::getLogFile(v20);
  std::stringbuf::str();
  degas::LocalLogFile::writeText(LogFile, (const void **)&v25);
  if (SHIBYTE(v27) < 0)
    operator delete(v25);
  v28[0] = *MEMORY[0x1E0DE4F60];
  *(_QWORD *)((char *)v28 + *(_QWORD *)(v28[0] - 24)) = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 24);
  v28[1] = MEMORY[0x1E0DE4FB8] + 16;
  if (v29 < 0)
    operator delete((void *)v28[9]);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  return MEMORY[0x1CAA4AD98](&v30);
}

void sub_1CA166A70(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,char a21)
{
  std::ostringstream::~ostringstream((uint64_t)&a21);
  _Unwind_Resume(a1);
}

uint64_t degas::NeighborQuery::reportTimingPlanFailure(_QWORD *a1, uint64_t a2, int a3, int a4)
{
  int v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  void **v12;
  uint64_t v13;
  _QWORD *v14;
  void **v15;
  uint64_t v16;
  _QWORD *v17;
  _QWORD *v18;
  _QWORD *v19;
  _QWORD *v20;
  _QWORD *v21;
  unsigned int v22;
  void **v23;
  uint64_t v24;
  void **p_p;
  uint64_t v26;
  _QWORD *v27;
  _QWORD *v28;
  _QWORD *v29;
  const std::locale::facet *v30;
  degas *v31;
  degas::LocalLogFile *LogFile;
  void *__p;
  uint64_t v35;
  uint64_t v36;
  void *v37[2];
  unsigned __int8 v38;
  void *v39[2];
  unsigned __int8 v40;
  _QWORD v41[11];
  char v42;
  uint64_t v43;
  std::locale v44;

  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v41);
  v8 = *(char *)(a2 + 23);
  if (v8 >= 0)
    v9 = a2;
  else
    v9 = *(_QWORD *)a2;
  if (v8 >= 0)
    v10 = *(unsigned __int8 *)(a2 + 23);
  else
    v10 = *(_QWORD *)(a2 + 8);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v41, v9, v10);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v41, (uint64_t)" plan time estimate beaten ", 27);
  v11 = (_QWORD *)std::ostream::operator<<();
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v11, (uint64_t)"s with plan ", 12);
  std::string::basic_string[abi:ne180100]<0>(v39, off_1E83E24C8[a4]);
  if ((v40 & 0x80u) == 0)
    v12 = v39;
  else
    v12 = (void **)v39[0];
  if ((v40 & 0x80u) == 0)
    v13 = v40;
  else
    v13 = (uint64_t)v39[1];
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v11, (uint64_t)v12, v13);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v11, (uint64_t)"\n\tbeat ", 7);
  v14 = (_QWORD *)std::ostream::operator<<();
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, (uint64_t)"s with chosen plan ", 19);
  std::string::basic_string[abi:ne180100]<0>(v37, off_1E83E24C8[a3]);
  if ((v38 & 0x80u) == 0)
    v15 = v37;
  else
    v15 = (void **)v37[0];
  if ((v38 & 0x80u) == 0)
    v16 = v38;
  else
    v16 = (uint64_t)v37[1];
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, (uint64_t)v15, v16);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, (uint64_t)"\n\tstart node count=", 19);
  v17 = (_QWORD *)std::ostream::operator<<();
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v17, (uint64_t)"\n\ttotal node rows=", 18);
  v18 = (_QWORD *)std::ostream::operator<<();
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v18, (uint64_t)"\n\tlabels edge count estimate=", 29);
  v19 = (_QWORD *)std::ostream::operator<<();
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v19, (uint64_t)"\n\tfiltered edge count=", 22);
  v20 = (_QWORD *)std::ostream::operator<<();
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v20, (uint64_t)"\n\ttotal edge rows=", 18);
  v21 = (_QWORD *)std::ostream::operator<<();
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v21, (uint64_t)"\n\tedge predicate=", 17);
  if (*a1)
  {
    (*(void (**)(void **__return_ptr, _QWORD, _QWORD))(*(_QWORD *)*a1 + 64))(&__p, *a1, a1[3]);
    v22 = HIBYTE(v36);
    v23 = (void **)__p;
    v24 = v35;
  }
  else
  {
    v24 = 0;
    v23 = 0;
    v22 = 0;
    __p = 0;
    v35 = 0;
    v36 = 0;
  }
  if ((v22 & 0x80u) == 0)
    p_p = &__p;
  else
    p_p = v23;
  if ((v22 & 0x80u) == 0)
    v26 = v22;
  else
    v26 = v24;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v21, (uint64_t)p_p, v26);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v21, (uint64_t)"\n\twins=", 7);
  v27 = (_QWORD *)std::ostream::operator<<();
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v27, (uint64_t)", losses=", 9);
  v28 = (_QWORD *)std::ostream::operator<<();
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v28, (uint64_t)", total time lost=", 18);
  v29 = (_QWORD *)std::ostream::operator<<();
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v29, (uint64_t)"s", 1);
  std::ios_base::getloc((const std::ios_base *)((char *)v29 + *(_QWORD *)(*v29 - 24)));
  v30 = std::locale::use_facet(&v44, MEMORY[0x1E0DE4A90]);
  ((void (*)(const std::locale::facet *, uint64_t))v30->__vftable[2].~facet_0)(v30, 10);
  std::locale::~locale(&v44);
  std::ostream::put();
  v31 = (degas *)std::ostream::flush();
  if (SHIBYTE(v36) < 0)
    operator delete(__p);
  if ((char)v38 < 0)
    operator delete(v37[0]);
  if ((char)v40 < 0)
    operator delete(v39[0]);
  LogFile = (degas::LocalLogFile *)degas::getLogFile(v31);
  std::stringbuf::str();
  degas::LocalLogFile::writeText(LogFile, (const void **)v39);
  if ((char)v40 < 0)
    operator delete(v39[0]);
  v41[0] = *MEMORY[0x1E0DE4F60];
  *(_QWORD *)((char *)v41 + *(_QWORD *)(v41[0] - 24)) = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 24);
  v41[1] = MEMORY[0x1E0DE4FB8] + 16;
  if (v42 < 0)
    operator delete((void *)v41[9]);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  return MEMORY[0x1CAA4AD98](&v43);
}

void sub_1CA166EB8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,char a28)
{
  if (a21 < 0)
    operator delete(__p);
  if (a27 < 0)
    operator delete(a22);
  std::ostringstream::~ostringstream((uint64_t)&a28);
  _Unwind_Resume(a1);
}

uint64_t degas::NeighborQuery::reportNodeFirstPlanTimes(uint64_t a1, uint64_t a2)
{
  int v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  _QWORD *v10;
  _QWORD *v11;
  const std::locale::facet *v12;
  degas *v13;
  degas::LocalLogFile *LogFile;
  void *__p[2];
  char v17;
  _QWORD v18[11];
  char v19;
  uint64_t v20;

  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v18);
  v3 = *(char *)(a2 + 23);
  if (v3 >= 0)
    v4 = a2;
  else
    v4 = *(_QWORD *)a2;
  if (v3 >= 0)
    v5 = *(unsigned __int8 *)(a2 + 23);
  else
    v5 = *(_QWORD *)(a2 + 8);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v18, v4, v5);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v18, (uint64_t)"\n\tstart node count=", 19);
  v6 = (_QWORD *)std::ostream::operator<<();
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)"\n\tlabels edge count estimate=", 29);
  v7 = (_QWORD *)std::ostream::operator<<();
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)"\n\tfiltered edge count=", 22);
  v8 = (_QWORD *)std::ostream::operator<<();
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"\n\tNF time=", 10);
  v9 = (_QWORD *)std::ostream::operator<<();
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)"s\n\tNT time=", 11);
  v10 = (_QWORD *)std::ostream::operator<<();
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)"s\n\tNEF time=", 12);
  v11 = (_QWORD *)std::ostream::operator<<();
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v11, (uint64_t)"s", 1);
  std::ios_base::getloc((const std::ios_base *)((char *)v11 + *(_QWORD *)(*v11 - 24)));
  v12 = std::locale::use_facet((const std::locale *)__p, MEMORY[0x1E0DE4A90]);
  ((void (*)(const std::locale::facet *, uint64_t))v12->__vftable[2].~facet_0)(v12, 10);
  std::locale::~locale((std::locale *)__p);
  std::ostream::put();
  v13 = (degas *)std::ostream::flush();
  LogFile = (degas::LocalLogFile *)degas::getLogFile(v13);
  std::stringbuf::str();
  degas::LocalLogFile::writeText(LogFile, (const void **)__p);
  if (v17 < 0)
    operator delete(__p[0]);
  v18[0] = *MEMORY[0x1E0DE4F60];
  *(_QWORD *)((char *)v18 + *(_QWORD *)(v18[0] - 24)) = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 24);
  v18[1] = MEMORY[0x1E0DE4FB8] + 16;
  if (v19 < 0)
    operator delete((void *)v18[9]);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  return MEMORY[0x1CAA4AD98](&v20);
}

void sub_1CA167154(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15)
{
  if (a14 < 0)
    operator delete(__p);
  std::ostringstream::~ostringstream((uint64_t)&a15);
  _Unwind_Resume(a1);
}

uint64_t std::ostringstream::basic_ostringstream[abi:ne180100](uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  std::ios_base *v6;

  v2 = MEMORY[0x1E0DE4FE0];
  v3 = MEMORY[0x1E0DE4FE0] + 64;
  *(_QWORD *)(a1 + 112) = MEMORY[0x1E0DE4FE0] + 64;
  v4 = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 8);
  v5 = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 16);
  *(_QWORD *)a1 = v4;
  *(_QWORD *)(a1 + *(_QWORD *)(v4 - 24)) = v5;
  v6 = (std::ios_base *)(a1 + *(_QWORD *)(*(_QWORD *)a1 - 24));
  std::ios_base::init(v6, (void *)(a1 + 8));
  v6[1].__vftable = 0;
  v6[1].__fmtflags_ = -1;
  *(_QWORD *)a1 = v2 + 24;
  *(_QWORD *)(a1 + 112) = v3;
  std::streambuf::basic_streambuf();
  *(_QWORD *)(a1 + 8) = MEMORY[0x1E0DE4FB8] + 16;
  *(_OWORD *)(a1 + 72) = 0u;
  *(_OWORD *)(a1 + 88) = 0u;
  *(_DWORD *)(a1 + 104) = 16;
  return a1;
}

void sub_1CA16725C(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::ostream::~ostream();
  MEMORY[0x1CAA4AD98](v1);
  _Unwind_Resume(a1);
}

_QWORD *std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  char *v6;
  uint64_t v7;
  int v8;
  int v9;
  const std::locale::facet *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  BOOL v14;
  uint64_t v15;
  size_t v16;
  std::locale::__imp *p_b;
  uint64_t v18;
  uint64_t v19;
  std::locale *v20;
  uint64_t v21;
  _BYTE v23[16];
  std::locale __b;
  size_t v25;
  int64_t v26;

  MEMORY[0x1CAA4ACCC](v23, a1);
  if (v23[0])
  {
    v6 = (char *)a1 + *(_QWORD *)(*a1 - 24);
    v7 = *((_QWORD *)v6 + 5);
    v8 = *((_DWORD *)v6 + 2);
    v9 = *((_DWORD *)v6 + 36);
    if (v9 == -1)
    {
      std::ios_base::getloc((const std::ios_base *)((char *)a1 + *(_QWORD *)(*a1 - 24)));
      v10 = std::locale::use_facet(&__b, MEMORY[0x1E0DE4A90]);
      v9 = ((uint64_t (*)(const std::locale::facet *, uint64_t))v10->__vftable[2].~facet_0)(v10, 32);
      std::locale::~locale(&__b);
      *((_DWORD *)v6 + 36) = v9;
    }
    v11 = a2 + a3;
    if ((v8 & 0xB0) == 0x20)
      v12 = a2 + a3;
    else
      v12 = a2;
    if (!v7)
      goto LABEL_29;
    v13 = *((_QWORD *)v6 + 3);
    v14 = v13 <= a3;
    v15 = v13 - a3;
    v16 = v14 ? 0 : v15;
    if (v12 - a2 >= 1
      && (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v7 + 96))(v7, a2, v12 - a2) != v12 - a2)
    {
      goto LABEL_29;
    }
    if ((uint64_t)v16 >= 1)
    {
      if (v16 >= 0x7FFFFFFFFFFFFFF8)
        std::string::__throw_length_error[abi:ne180100]();
      if (v16 >= 0x17)
      {
        v18 = (v16 & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((v16 | 7) != 0x17)
          v18 = v16 | 7;
        v19 = v18 + 1;
        p_b = (std::locale::__imp *)operator new(v18 + 1);
        v25 = v16;
        v26 = v19 | 0x8000000000000000;
        __b.__locale_ = p_b;
      }
      else
      {
        HIBYTE(v26) = v16;
        p_b = (std::locale::__imp *)&__b;
      }
      memset(p_b, v9, v16);
      *((_BYTE *)p_b + v16) = 0;
      v20 = v26 >= 0 ? &__b : (std::locale *)__b.__locale_;
      v21 = (*(uint64_t (**)(uint64_t, std::locale *, size_t))(*(_QWORD *)v7 + 96))(v7, v20, v16);
      if (SHIBYTE(v26) < 0)
        operator delete(__b.__locale_);
      if (v21 != v16)
        goto LABEL_29;
    }
    if (v11 - v12 < 1
      || (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v7 + 96))(v7, v12, v11 - v12) == v11 - v12)
    {
      *((_QWORD *)v6 + 3) = 0;
    }
    else
    {
LABEL_29:
      std::ios_base::clear((std::ios_base *)((char *)a1 + *(_QWORD *)(*a1 - 24)), *(_DWORD *)((char *)a1 + *(_QWORD *)(*a1 - 24) + 32) | 5);
    }
  }
  MEMORY[0x1CAA4ACD8](v23);
  return a1;
}

void sub_1CA1674A4(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  _QWORD *v17;

  if (a17 < 0)
    operator delete(__p);
  MEMORY[0x1CAA4ACD8](&a10);
  __cxa_begin_catch(a1);
  std::ios_base::__set_badbit_and_consider_rethrow((std::ios_base *)((char *)v17 + *(_QWORD *)(*v17 - 24)));
  __cxa_end_catch();
  JUMPOUT(0x1CA167478);
}

void sub_1CA167504(_Unwind_Exception *a1)
{
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

uint64_t std::ostringstream::~ostringstream(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;

  v2 = MEMORY[0x1E0DE4F60];
  v3 = *MEMORY[0x1E0DE4F60];
  *(_QWORD *)a1 = *MEMORY[0x1E0DE4F60];
  *(_QWORD *)(a1 + *(_QWORD *)(v3 - 24)) = *(_QWORD *)(v2 + 24);
  *(_QWORD *)(a1 + 8) = MEMORY[0x1E0DE4FB8] + 16;
  if (*(char *)(a1 + 95) < 0)
    operator delete(*(void **)(a1 + 72));
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x1CAA4AD98](a1 + 112);
  return a1;
}

void __clang_call_terminate(void *a1)
{
  __cxa_begin_catch(a1);
  std::terminate();
}

_QWORD *degas::NeighborQuery::queryPlanName@<X0>(int a1@<W1>, _QWORD *a2@<X8>)
{
  return std::string::basic_string[abi:ne180100]<0>(a2, off_1E83E24C8[a1]);
}

uint64_t degas::NeighborQuery::transitiveClosureNeighborsWithPlan(degas::NeighborQuery *a1, int a2, _QWORD *a3, _QWORD *a4, _QWORD *a5, uint64_t a6, unsigned int a7, _QWORD *a8)
{
  uint64_t v8;
  char v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t FilterNode;
  uint64_t v18;
  char v19;
  __int128 v24;
  _BYTE v25[32];
  void **v26[5];
  char v27;
  Bitmap v28;
  __int128 v29;
  _OWORD v30[2];
  __int128 v31;
  _BYTE v32[40];
  void **v33;

  v31 = 0u;
  memset(v32, 0, 25);
  if ((a2 - 3) <= 0xFFFFFFFD && *a5)
    (*(void (**)(_QWORD, _QWORD *, __int128 *))(*(_QWORD *)*a5 + 24))(*a5, a3, &v31);
  else
    degas::Bitmap::operator=(&v31, a3);
  v29 = 0u;
  memset(v30, 0, 25);
  v28._bitCount = *(_QWORD *)a6;
  memset(&v28._lastOffsetFoundAt, 0, 32);
  std::vector<degas::BitsetPtr>::__init_with_size[abi:ne180100]<degas::BitsetPtr*,degas::BitsetPtr*>((char *)&v28._bitSets, *(__int128 **)(a6 + 16), *(__int128 **)(a6 + 24), (uint64_t)(*(_QWORD *)(a6 + 24) - *(_QWORD *)(a6 + 16)) >> 4);
  v13 = 0;
  v28._dirty = *(_BYTE *)(a6 + 40);
  while ((v13 & 1) == 0)
  {
    v26[0] = (void **)v29;
    memset(&v26[1], 0, 32);
    v14 = std::vector<degas::BitsetPtr>::__init_with_size[abi:ne180100]<degas::BitsetPtr*,degas::BitsetPtr*>((char *)&v26[2], *(__int128 **)&v30[0], *((__int128 **)&v30[0] + 1), (uint64_t)(*((_QWORD *)&v30[0] + 1) - *(_QWORD *)&v30[0]) >> 4);
    v27 = BYTE8(v30[1]);
    v24 = 0u;
    memset(v25, 0, 25);
    switch(a2)
    {
      case 0:
        abort();
      case 1:
        FilterNode = degas::NeighborQuery::neighborsNodesFirst((uint64_t)a1, v15, a4, a5, &v28, a7, (degas::Bitmap *)&v24);
        goto LABEL_15;
      case 2:
        FilterNode = degas::NeighborQuery::neighborsNodeTableEdges(a1, (degas::Bitmap *)&v31, a5, &v28, a7, &v24);
        goto LABEL_15;
      case 3:
        degas::Predicate::nullPtr((degas::Predicate *)v14);
        FilterNode = degas::NeighborQuery::neighborsEdgesFirstJoinBoth((uint64_t)a1, (degas::Bitmap *)&v31, (uint64_t **)degas::Predicate::nullPtr(void)::nullPtr, &v28, a7, (degas::Bitmap *)&v24);
        goto LABEL_15;
      case 4:
        degas::Predicate::nullPtr((degas::Predicate *)v14);
        FilterNode = degas::NeighborQuery::neighborsEdgesFirstJoinEdge((uint64_t)a1, (degas::Bitmap *)&v31, (uint64_t **)degas::Predicate::nullPtr(void)::nullPtr, &v28, a7, (degas::Bitmap *)&v24);
        goto LABEL_15;
      case 5:
        degas::Predicate::nullPtr((degas::Predicate *)v14);
        FilterNode = degas::NeighborQuery::neighborsEdgesFirstFilterEdge((uint64_t)a1, (degas::Bitmap *)&v31, (uint64_t **)degas::Predicate::nullPtr(void)::nullPtr, &v28, a7, (degas::Bitmap *)&v24);
        goto LABEL_15;
      case 6:
        degas::Predicate::nullPtr((degas::Predicate *)v14);
        FilterNode = degas::NeighborQuery::neighborsEdgesFirstFilterNode((uint64_t)a1, (degas::Bitmap *)&v31, (uint64_t **)degas::Predicate::nullPtr(void)::nullPtr, (const degas::Bitmap *)&v28, a7, (degas::Bitmap *)&v24);
        goto LABEL_15;
      case 7:
        FilterNode = degas::NeighborQuery::neighborsNodesEdgeFilter((uint64_t)a1, (degas::Bitmap *)&v31, v16, a5, &v28, a7, (degas::Bitmap *)&v24);
LABEL_15:
        v18 = FilterNode;
        if (!(_DWORD)FilterNode)
          goto LABEL_17;
        v19 = 0;
        v13 = 0;
        break;
      default:
LABEL_17:
        degas::Bitmap::unionWith<degas::Bitmap>((degas::Bitmap *)v26, (uint64_t)&v24);
        if (degas::Bitmap::operator==((uint64_t)v26, (uint64_t)&v29))
        {
          v19 = 1;
          v18 = v8;
          v13 = 1;
        }
        else
        {
          degas::Bitmap::operator=(&v29, v26);
          degas::Bitmap::diffWith<degas::Bitmap>((degas::Bitmap *)&v24, (degas::Bitmap *)&v28);
          degas::Bitmap::operator=(&v28, &v24);
          v13 = 0;
          v19 = 1;
          v18 = v8;
        }
        break;
    }
    v33 = (void **)v25;
    std::vector<degas::BitsetPtr>::__destroy_vector::operator()[abi:ne180100](&v33);
    *(_QWORD *)&v24 = &v26[2];
    std::vector<degas::BitsetPtr>::__destroy_vector::operator()[abi:ne180100]((void ***)&v24);
    v8 = v18;
    if ((v19 & 1) == 0)
      goto LABEL_23;
  }
  degas::Bitmap::operator=(a8, &v29);
  v18 = 0;
LABEL_23:
  v26[0] = (void **)&v28._bitSets.__begin_;
  std::vector<degas::BitsetPtr>::__destroy_vector::operator()[abi:ne180100](v26);
  v28._bitCount = (unint64_t)v30;
  std::vector<degas::BitsetPtr>::__destroy_vector::operator()[abi:ne180100]((void ***)&v28);
  *(_QWORD *)&v29 = v32;
  std::vector<degas::BitsetPtr>::__destroy_vector::operator()[abi:ne180100]((void ***)&v29);
  return v18;
}

void sub_1CA16790C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void **a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,void **a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,void **a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,void **a33,uint64_t a34,uint64_t a35)
{
  uint64_t v35;

  a21 = a11;
  std::vector<degas::BitsetPtr>::__destroy_vector::operator()[abi:ne180100](&a21);
  a27 = (void **)&a35;
  std::vector<degas::BitsetPtr>::__destroy_vector::operator()[abi:ne180100](&a27);
  a33 = (void **)(v35 - 144);
  std::vector<degas::BitsetPtr>::__destroy_vector::operator()[abi:ne180100](&a33);
  _Unwind_Resume(a1);
}

void degas::Bitmap::diffWith<degas::Bitmap>(degas::Bitmap *this, degas::Bitmap *a2)
{
  unint64_t v2;
  unsigned int v5;
  unint64_t Offset;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  int32x4_t v17;
  int v18;
  _OWORD *v19;
  degas::BitsetPtr *v20;
  degas::BitsetPtr *v21;
  __int128 v22;
  degas::BitsetPtr *v23;
  _OWORD *v24;
  _QWORD v25[2];

  v2 = *((_QWORD *)a2 + 3) - *((_QWORD *)a2 + 2);
  if ((v2 >> 4) && *((_QWORD *)this + 3) != *((_QWORD *)this + 2))
  {
    v5 = 0;
    Offset = 0;
    v7 = (v2 >> 4);
    do
    {
      v8 = *((_QWORD *)this + 2);
      v9 = (*((_QWORD *)this + 3) - v8) >> 4;
      if (v9 <= v5)
        break;
      v10 = *(_QWORD *)(*((_QWORD *)a2 + 2) + 16 * Offset);
      v11 = *(_QWORD *)(*(_QWORD *)(v8 + 16 * v5) + 8);
      v12 = *(_QWORD *)(v10 + 8);
      if (v11 >= v12)
      {
        if (v11 > v12)
        {
          Offset = degas::Bitmap::findOffset(a2, v11, Offset, v7);
        }
        else
        {
          degas::Bitmap::unshadowedBitSetAtIndex(this, v5, (degas::BitsetPtr *)v25);
          v13 = 0;
          v14 = v25[0];
          v15 = v25[0] + 16;
          do
          {
            *(_DWORD *)(v15 + v13) &= ~*(_DWORD *)(v10 + 16 + v13);
            v13 += 4;
          }
          while (v13 != 128);
          v16 = 0;
          *(_DWORD *)(v14 + 4) = -1;
          v17 = 0uLL;
          do
          {
            do
            {
              v17 = (int32x4_t)vpadalq_u16((uint32x4_t)v17, vpaddlq_u8((uint8x16_t)vcntq_s8(*(int8x16_t *)(v14 + 4 * v16 + 16))));
              v16 += 4;
            }
            while (v16 != 32);
            v16 = 0;
            v18 = vaddvq_s32(v17);
            v17 = 0uLL;
          }
          while (v18 == -1);
          *(_DWORD *)(v14 + 4) = v18;
          if (v18)
          {
            ++v5;
          }
          else
          {
            v19 = (_OWORD *)*((_QWORD *)this + 3);
            v20 = (degas::BitsetPtr *)(*((_QWORD *)this + 2) + 16 * v5);
            v21 = (degas::BitsetPtr *)((char *)v20 + 16);
            if ((_OWORD *)((char *)v20 + 16) != v19)
            {
              do
              {
                degas::BitsetPtr::releaseBitset(v20);
                v22 = *((_OWORD *)v20 + 1);
                *(_OWORD *)v20 = v22;
                if ((_QWORD)v22)
                  ++*(_DWORD *)v22;
                v23 = (degas::BitsetPtr *)((char *)v20 + 16);
                v24 = (_OWORD *)((char *)v20 + 32);
                v20 = (degas::BitsetPtr *)((char *)v20 + 16);
              }
              while (v24 != v19);
              v21 = (degas::BitsetPtr *)*((_QWORD *)this + 3);
              v20 = v23;
            }
            for (; v21 != v20; v21 = (degas::BitsetPtr *)((char *)v21 - 16))
            {
              degas::BitsetPtr::releaseBitset((degas::BitsetPtr *)((char *)v21 - 16));
              *((_QWORD *)v21 - 1) = 0;
            }
            *((_QWORD *)this + 3) = v20;
          }
          ++Offset;
          *(_QWORD *)this = 0xFFFFFFFFLL;
          *((_BYTE *)this + 40) = 1;
          degas::BitsetPtr::releaseBitset((degas::BitsetPtr *)v25);
        }
      }
      else
      {
        v5 = degas::Bitmap::findOffset(this, *(_QWORD *)(v10 + 8), v5, v9);
      }
    }
    while (Offset < v7);
  }
}

unint64_t degas::NeighborQuery::transitiveClosureNeighbors(degas::NeighborQuery *a1, degas::Bitmap *this, unsigned int a3, _QWORD *a4)
{
  degas::Predicate *v9;
  void **v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  std::__shared_weak_count *v13;
  uint64_t v14;
  unint64_t *v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t *v18;
  uint64_t *v19;
  uint64_t v20;
  unsigned int v21;
  uint64_t v22;
  int32x4_t v23;
  degas::Predicate *v24;
  unint64_t v25;
  unint64_t v26;
  int v27;
  BOOL v28;
  unint64_t *v30;
  unint64_t v31;
  std::__shared_weak_count *v32;
  unint64_t *v33;
  unint64_t v34;
  std::__shared_weak_count *v35;
  unint64_t *v36;
  unint64_t v37;
  std::__shared_weak_count *v38;
  unint64_t *v39;
  unint64_t v40;
  _QWORD v41[2];
  void **v42;
  std::__shared_weak_count *v43;
  void **v44;
  std::__shared_weak_count *v45;
  uint64_t v46;
  std::__shared_weak_count *v47;
  __int128 v48;
  _OWORD v49[3];
  _BYTE v50[40];
  void **v51;

  if (degas::sInstrumentTraversal == 1)
    return degas::NeighborQuery::transitiveClosureNeighbors_instrumented(a1, this, a3, a4);
  v49[2] = 0u;
  memset(v50, 0, 25);
  v9 = (degas::Predicate *)degas::Bitmap::count(this);
  if (v9)
  {
    if (*((_BYTE *)a1 + 16))
    {
      (*(void (**)(void ***__return_ptr, _QWORD, degas::NeighborQuery *))(**(_QWORD **)a1 + 32))(&v44, *(_QWORD *)a1, a1);
      v10 = v44;
      v42 = v44;
      v43 = v45;
      if (v45)
      {
        p_shared_owners = (unint64_t *)&v45->__shared_owners_;
        do
          v12 = __ldxr(p_shared_owners);
        while (__stxr(v12 + 1, p_shared_owners));
      }
      v14 = v46;
      v13 = v47;
      v41[0] = v46;
      v41[1] = v47;
      if (v47)
      {
        v15 = (unint64_t *)&v47->__shared_owners_;
        do
          v16 = __ldxr(v15);
        while (__stxr(v16 + 1, v15));
      }
      v48 = 0u;
      memset(v49, 0, 25);
      if (v10)
      {
        v17 = (*((uint64_t (**)(void **, __int128 *))*v10 + 2))(v10, &v48);
        if ((_DWORD)v17)
          goto LABEL_47;
        v17 = v48;
        if ((_QWORD)v48 == 0xFFFFFFFFLL)
        {
          v19 = (uint64_t *)*((_QWORD *)&v49[0] + 1);
          v18 = *(uint64_t **)&v49[0];
          if (*(_QWORD *)&v49[0] == *((_QWORD *)&v49[0] + 1))
          {
            v17 = 0;
          }
          else
          {
            v17 = 0;
            do
            {
              v20 = *v18;
              v21 = *(_DWORD *)(*v18 + 4);
              if (v21 == -1)
              {
                v22 = 0;
                v23 = 0uLL;
                do
                {
                  do
                  {
                    v23 = (int32x4_t)vpadalq_u16((uint32x4_t)v23, vpaddlq_u8((uint8x16_t)vcntq_s8(*(int8x16_t *)(v20 + 4 * v22 + 16))));
                    v22 += 4;
                  }
                  while (v22 != 32);
                  v22 = 0;
                  v21 = vaddvq_s32(v23);
                  v23 = 0uLL;
                }
                while (v21 == -1);
                *(_DWORD *)(v20 + 4) = v21;
              }
              v17 += v21;
              v18 += 2;
            }
            while (v18 != v19);
          }
          *(_QWORD *)&v48 = v17;
        }
        if (!v17)
          goto LABEL_47;
      }
      else
      {
        v17 = degas::Database::edgeCount(*((degas::Database **)a1 + 3));
      }
      if (v14 && ((*(uint64_t (**)(uint64_t))(*(_QWORD *)v14 + 56))(v14) & 1) != 0)
      {
        v17 = 0;
      }
      else
      {
        v25 = degas::Bitmap::count(this);
        v26 = v17 / v25;
        if ((v25 < 0x33 || v26 >= 0xA) && (v17 > 0xE || v26 >= 3))
        {
          if (v14)
            v28 = v17 >= 0x249F0;
          else
            v28 = 1;
          if (v28 && v17 >= 0x15E)
            v27 = 2;
          else
            v27 = 7;
        }
        else
        {
          v27 = 4;
        }
        v17 = degas::NeighborQuery::transitiveClosureNeighborsWithPlan(a1, v27, &v48, &v42, v41, (uint64_t)this, a3, a4);
      }
LABEL_47:
      v51 = (void **)v49;
      std::vector<degas::BitsetPtr>::__destroy_vector::operator()[abi:ne180100](&v51);
      if (v13)
      {
        v30 = (unint64_t *)&v13->__shared_owners_;
        do
          v31 = __ldaxr(v30);
        while (__stlxr(v31 - 1, v30));
        if (!v31)
        {
          ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
          std::__shared_weak_count::__release_weak(v13);
        }
      }
      v32 = v43;
      if (v43)
      {
        v33 = (unint64_t *)&v43->__shared_owners_;
        do
          v34 = __ldaxr(v33);
        while (__stlxr(v34 - 1, v33));
        if (!v34)
        {
          ((void (*)(std::__shared_weak_count *))v32->__on_zero_shared)(v32);
          std::__shared_weak_count::__release_weak(v32);
        }
      }
      v35 = v47;
      if (v47)
      {
        v36 = (unint64_t *)&v47->__shared_owners_;
        do
          v37 = __ldaxr(v36);
        while (__stlxr(v37 - 1, v36));
        if (!v37)
        {
          ((void (*)(std::__shared_weak_count *))v35->__on_zero_shared)(v35);
          std::__shared_weak_count::__release_weak(v35);
        }
      }
      v38 = v45;
      if (v45)
      {
        v39 = (unint64_t *)&v45->__shared_owners_;
        do
          v40 = __ldaxr(v39);
        while (__stlxr(v40 - 1, v39));
        if (!v40)
        {
          ((void (*)(std::__shared_weak_count *))v38->__on_zero_shared)(v38);
          std::__shared_weak_count::__release_weak(v38);
        }
      }
      goto LABEL_67;
    }
    v48 = 0u;
    memset(v49, 0, 25);
    v24 = (degas::Predicate *)degas::Predicate::nullPtr(v9);
    degas::Predicate::nullPtr(v24);
    v17 = degas::NeighborQuery::transitiveClosureNeighborsWithPlan(a1, 1, &v48, degas::Predicate::nullPtr(void)::nullPtr, degas::Predicate::nullPtr(void)::nullPtr, (uint64_t)this, a3, a4);
    v44 = (void **)v49;
    std::vector<degas::BitsetPtr>::__destroy_vector::operator()[abi:ne180100](&v44);
  }
  else
  {
    v17 = 0;
  }
LABEL_67:
  *(_QWORD *)&v48 = v50;
  std::vector<degas::BitsetPtr>::__destroy_vector::operator()[abi:ne180100]((void ***)&v48);
  return v17;
}

void sub_1CA167F64(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void **a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25)
{
  uint64_t v25;

  *(_QWORD *)(v25 - 72) = &a19;
  std::vector<degas::BitsetPtr>::__destroy_vector::operator()[abi:ne180100]((void ***)(v25 - 72));
  std::shared_ptr<degas::Predicate>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  std::shared_ptr<degas::Predicate>::~shared_ptr[abi:ne180100]((uint64_t)&a11);
  std::shared_ptr<degas::Predicate>::~shared_ptr[abi:ne180100]((uint64_t)&a15);
  std::shared_ptr<degas::Predicate>::~shared_ptr[abi:ne180100]((uint64_t)&a13);
  a17 = (void **)&a25;
  std::vector<degas::BitsetPtr>::__destroy_vector::operator()[abi:ne180100](&a17);
  _Unwind_Resume(a1);
}

uint64_t degas::NeighborQuery::transitiveClosureNeighbors_instrumented(degas::NeighborQuery *a1, degas::Bitmap *this, unsigned int a3, _QWORD *a4)
{
  degas::Predicate *v7;
  uint64_t v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  std::__shared_weak_count *v11;
  uint64_t v12;
  unint64_t *v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t *v17;
  uint64_t *v18;
  uint64_t v19;
  unsigned int v20;
  uint64_t v21;
  int32x4_t v22;
  degas::Predicate *v23;
  unint64_t v24;
  unint64_t v25;
  int v26;
  BOOL v27;
  int v29;
  int v30;
  char v31;
  double v32;
  double v33;
  int v34;
  double Current;
  double v36;
  uint64_t v38;
  unint64_t *v39;
  unint64_t v40;
  std::__shared_weak_count *v41;
  unint64_t *v42;
  unint64_t v43;
  std::__shared_weak_count *v44;
  unint64_t *v45;
  unint64_t v46;
  std::__shared_weak_count *v47;
  unint64_t *v48;
  unint64_t v49;
  std::__shared_weak_count *v51;
  int v52;
  void *__p[2];
  _BYTE v55[32];
  __int128 v56;
  _BYTE v57[32];
  _QWORD v58[2];
  uint64_t v59;
  std::__shared_weak_count *v60;
  uint64_t v61;
  std::__shared_weak_count *v62;
  uint64_t v63;
  std::__shared_weak_count *v64;
  __int128 v65;
  _OWORD v66[3];
  _BYTE v67[40];
  void **v68;

  v66[2] = 0u;
  memset(v67, 0, 25);
  v7 = (degas::Predicate *)degas::Bitmap::count(this);
  if (!v7)
  {
    v15 = 0;
    goto LABEL_83;
  }
  if (!*((_BYTE *)a1 + 16))
  {
    v65 = 0u;
    memset(v66, 0, 25);
    v23 = (degas::Predicate *)degas::Predicate::nullPtr(v7);
    degas::Predicate::nullPtr(v23);
    v15 = degas::NeighborQuery::transitiveClosureNeighborsWithPlan(a1, 1, &v65, degas::Predicate::nullPtr(void)::nullPtr, degas::Predicate::nullPtr(void)::nullPtr, (uint64_t)this, a3, a4);
    *(_QWORD *)&v56 = v66;
    std::vector<degas::BitsetPtr>::__destroy_vector::operator()[abi:ne180100]((void ***)&v56);
    goto LABEL_83;
  }
  (*(void (**)(uint64_t *__return_ptr, _QWORD, degas::NeighborQuery *))(**(_QWORD **)a1 + 32))(&v61, *(_QWORD *)a1, a1);
  v8 = v61;
  v59 = v61;
  v60 = v62;
  if (v62)
  {
    p_shared_owners = (unint64_t *)&v62->__shared_owners_;
    do
      v10 = __ldxr(p_shared_owners);
    while (__stxr(v10 + 1, p_shared_owners));
  }
  v12 = v63;
  v11 = v64;
  v58[0] = v63;
  v58[1] = v64;
  if (v64)
  {
    v13 = (unint64_t *)&v64->__shared_owners_;
    do
      v14 = __ldxr(v13);
    while (__stxr(v14 + 1, v13));
  }
  v51 = v11;
  v65 = 0u;
  memset(v66, 0, 25);
  if (!v8)
  {
    v16 = degas::Database::edgeCount(*((degas::Database **)a1 + 3));
LABEL_27:
    if (!v12 || ((*(uint64_t (**)(uint64_t))(*(_QWORD *)v12 + 56))(v12) & 1) == 0)
    {
      v24 = degas::Bitmap::count(this);
      v25 = v16 / v24;
      if ((v24 < 0x33 || v25 >= 0xA) && (v16 > 0xE || v25 >= 3))
      {
        if (v12)
          v27 = v16 >= 0x249F0;
        else
          v27 = 1;
        if (v27 && v16 >= 0x15E)
          v26 = 2;
        else
          v26 = 7;
      }
      else
      {
        v26 = 4;
      }
      v52 = v26;
      v29 = 0;
      v56 = 0u;
      memset(v57, 0, 25);
      v30 = degas::NeighborQuery::transitiveClosureNeighbors_instrumented(degas::Bitmap const&,degas::EdgeDirection,degas::Bitmap&)::offset;
      v31 = 1;
      v32 = 0.0;
      v33 = 1.0e10;
      while (1)
      {
        v34 = degas::NeighborQuery::transitiveClosureNeighbors_instrumented(degas::Bitmap const&,degas::EdgeDirection,degas::Bitmap&)::planList[v30 % 7];
        Current = CFAbsoluteTimeGetCurrent();
        v15 = degas::NeighborQuery::transitiveClosureNeighborsWithPlan(a1, v34, &v65, &v59, v58, (uint64_t)this, a3, a4);
        if ((_DWORD)v15)
          break;
        v36 = CFAbsoluteTimeGetCurrent();
        if ((v31 & 1) != 0)
          degas::Bitmap::operator=(&v56, a4);
        v31 = 0;
        if (v36 - Current < v33)
        {
          v33 = v36 - Current;
          v29 = v34;
        }
        if (v34 == v52)
          v32 = v36 - Current;
        if (v30++ >= degas::NeighborQuery::transitiveClosureNeighbors_instrumented(degas::Bitmap const&,degas::EdgeDirection,degas::Bitmap&)::offset
                    + 6)
        {
          degas::NeighborQuery::transitiveClosureNeighbors_instrumented(degas::Bitmap const&,degas::EdgeDirection,degas::Bitmap&)::offset = (degas::NeighborQuery::transitiveClosureNeighbors_instrumented(degas::Bitmap const&,degas::EdgeDirection,degas::Bitmap&)::offset + 1) % 7u;
          if (v29 == v52)
          {
            v15 = 0;
            ++degas::NeighborQuery::transitiveClosureNeighbors_instrumented(degas::Bitmap const&,degas::EdgeDirection,degas::Bitmap&)::scoreWins;
          }
          else
          {
            ++degas::NeighborQuery::transitiveClosureNeighbors_instrumented(degas::Bitmap const&,degas::EdgeDirection,degas::Bitmap&)::scoreLosses;
            if (v32 - v33 >= 0.0)
            {
              *(double *)&degas::NeighborQuery::transitiveClosureNeighbors_instrumented(degas::Bitmap const&,degas::EdgeDirection,degas::Bitmap&)::totalTimeLost = v32 - v33 + *(double *)&degas::NeighborQuery::transitiveClosureNeighbors_instrumented(degas::Bitmap const&,degas::EdgeDirection,degas::Bitmap&)::totalTimeLost;
              v38 = *(_QWORD *)a1;
              if (*(_QWORD *)a1)
              {
                *(_OWORD *)__p = 0u;
                memset(v55, 0, 25);
                (*(void (**)(uint64_t, void **))(*(_QWORD *)v38 + 16))(v38, __p);
                degas::Bitmap::count((degas::Bitmap *)__p);
                v68 = (void **)v55;
                std::vector<degas::BitsetPtr>::__destroy_vector::operator()[abi:ne180100](&v68);
              }
              else
              {
                degas::Database::edgeCount(*((degas::Database **)a1 + 3));
              }
              std::string::basic_string[abi:ne180100]<0>(__p, "Transitive closure query");
              degas::Bitmap::count(this);
              degas::Bitmap::count((degas::Bitmap *)&v65);
              degas::Database::nodeCount(*((degas::Database **)a1 + 3));
              degas::Database::edgeCount(*((degas::Database **)a1 + 3));
              degas::NeighborQuery::reportTimingPlanFailure(a1, (uint64_t)__p, v52, v29);
              if ((v55[7] & 0x80000000) != 0)
                operator delete(__p[0]);
            }
            v15 = 0;
          }
          break;
        }
      }
      __p[0] = v57;
      std::vector<degas::BitsetPtr>::__destroy_vector::operator()[abi:ne180100]((void ***)__p);
      goto LABEL_63;
    }
    goto LABEL_29;
  }
  v15 = (*(uint64_t (**)(uint64_t, __int128 *))(*(_QWORD *)v8 + 16))(v8, &v65);
  if ((_DWORD)v15)
    goto LABEL_63;
  v16 = v65;
  if ((_QWORD)v65 == 0xFFFFFFFFLL)
  {
    v18 = (uint64_t *)*((_QWORD *)&v66[0] + 1);
    v17 = *(uint64_t **)&v66[0];
    if (*(_QWORD *)&v66[0] == *((_QWORD *)&v66[0] + 1))
    {
      v16 = 0;
    }
    else
    {
      v16 = 0;
      do
      {
        v19 = *v17;
        v20 = *(_DWORD *)(*v17 + 4);
        if (v20 == -1)
        {
          v21 = 0;
          v22 = 0uLL;
          do
          {
            do
            {
              v22 = (int32x4_t)vpadalq_u16((uint32x4_t)v22, vpaddlq_u8((uint8x16_t)vcntq_s8(*(int8x16_t *)(v19 + 4 * v21 + 16))));
              v21 += 4;
            }
            while (v21 != 32);
            v21 = 0;
            v20 = vaddvq_s32(v22);
            v22 = 0uLL;
          }
          while (v20 == -1);
          *(_DWORD *)(v19 + 4) = v20;
        }
        v16 += v20;
        v17 += 2;
      }
      while (v17 != v18);
    }
    *(_QWORD *)&v65 = v16;
  }
  if (v16)
    goto LABEL_27;
LABEL_29:
  v15 = 0;
LABEL_63:
  *(_QWORD *)&v56 = v66;
  std::vector<degas::BitsetPtr>::__destroy_vector::operator()[abi:ne180100]((void ***)&v56);
  if (v51)
  {
    v39 = (unint64_t *)&v51->__shared_owners_;
    do
      v40 = __ldaxr(v39);
    while (__stlxr(v40 - 1, v39));
    if (!v40)
    {
      ((void (*)(std::__shared_weak_count *))v51->__on_zero_shared)(v51);
      std::__shared_weak_count::__release_weak(v51);
    }
  }
  v41 = v60;
  if (v60)
  {
    v42 = (unint64_t *)&v60->__shared_owners_;
    do
      v43 = __ldaxr(v42);
    while (__stlxr(v43 - 1, v42));
    if (!v43)
    {
      ((void (*)(std::__shared_weak_count *))v41->__on_zero_shared)(v41);
      std::__shared_weak_count::__release_weak(v41);
    }
  }
  v44 = v64;
  if (v64)
  {
    v45 = (unint64_t *)&v64->__shared_owners_;
    do
      v46 = __ldaxr(v45);
    while (__stlxr(v46 - 1, v45));
    if (!v46)
    {
      ((void (*)(std::__shared_weak_count *))v44->__on_zero_shared)(v44);
      std::__shared_weak_count::__release_weak(v44);
    }
  }
  v47 = v62;
  if (v62)
  {
    v48 = (unint64_t *)&v62->__shared_owners_;
    do
      v49 = __ldaxr(v48);
    while (__stlxr(v49 - 1, v48));
    if (!v49)
    {
      ((void (*)(std::__shared_weak_count *))v47->__on_zero_shared)(v47);
      std::__shared_weak_count::__release_weak(v47);
    }
  }
LABEL_83:
  *(_QWORD *)&v65 = v67;
  std::vector<degas::BitsetPtr>::__destroy_vector::operator()[abi:ne180100]((void ***)&v65);
  return v15;
}

void sub_1CA1685D4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t *a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,char a28,uint64_t a29,char a30,uint64_t a31,char a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38)
{
  uint64_t v38;

  __p = &a24;
  std::vector<degas::BitsetPtr>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  a22 = &a38;
  std::vector<degas::BitsetPtr>::__destroy_vector::operator()[abi:ne180100]((void ***)&a22);
  std::shared_ptr<degas::Predicate>::~shared_ptr[abi:ne180100]((uint64_t)&a28);
  std::shared_ptr<degas::Predicate>::~shared_ptr[abi:ne180100]((uint64_t)&a30);
  std::shared_ptr<degas::Predicate>::~shared_ptr[abi:ne180100]((uint64_t)&a34);
  std::shared_ptr<degas::Predicate>::~shared_ptr[abi:ne180100]((uint64_t)&a32);
  a36 = v38 - 176;
  std::vector<degas::BitsetPtr>::__destroy_vector::operator()[abi:ne180100]((void ***)&a36);
  _Unwind_Resume(a1);
}

id KGLoggingConnection()
{
  if (KGLoggingConnection_onceToken[0] != -1)
    dispatch_once(KGLoggingConnection_onceToken, &__block_literal_global_521);
  return (id)KGLoggingConnection_log;
}

id KGFullMethodName(void *a1, const char *a2)
{
  id v3;
  uint64_t v4;
  void *v5;
  void *v6;
  uint64_t v7;
  void *v8;

  v3 = a1;
  v4 = objc_opt_class();

  v5 = (void *)MEMORY[0x1E0CB3940];
  NSStringFromSelector(a2);
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  v7 = 45;
  if ((id)v4 == v3)
    v7 = 43;
  objc_msgSend(v5, "stringWithFormat:", CFSTR("%c[%@ %@]"), v7, v4, v6);
  v8 = (void *)objc_claimAutoreleasedReturnValue();

  return v8;
}

id KGAbstractMethodException(void *a1, const char *a2)
{
  id v3;
  void *v4;
  void *v5;
  uint64_t v6;
  void *v7;
  void *v8;

  v3 = a1;
  KGFullMethodName(v3, a2);
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  v5 = (void *)MEMORY[0x1E0C99DA0];
  v6 = *MEMORY[0x1E0C99778];
  objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("%@: must override selector sent to %p"), v4, v3);
  v7 = (void *)objc_claimAutoreleasedReturnValue();

  objc_msgSend(v5, "exceptionWithName:reason:userInfo:", v6, v7, 0);
  v8 = (void *)objc_claimAutoreleasedReturnValue();

  return v8;
}

id KGMethodNotImplentedException(void *a1, const char *a2)
{
  id v3;
  void *v4;
  void *v5;
  uint64_t v6;
  void *v7;
  void *v8;

  v3 = a1;
  KGFullMethodName(v3, a2);
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  v5 = (void *)MEMORY[0x1E0C99DA0];
  v6 = *MEMORY[0x1E0C99778];
  objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("%@:  method not implemented sent to %p"), v4, v3);
  v7 = (void *)objc_claimAutoreleasedReturnValue();

  objc_msgSend(v5, "exceptionWithName:reason:userInfo:", v6, v7, 0);
  v8 = (void *)objc_claimAutoreleasedReturnValue();

  return v8;
}

void sub_1CA16914C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1CA169398(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, ...)
{
  va_list va;

  va_start(va, a10);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1CA169884(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void CheckInTransaction(int a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  NSObject *v4;
  uint8_t v5[16];
  uint64_t v6;
  uint64_t v7;

  if (a2 <= 0 && a1)
  {
    v6 = v2;
    v7 = v3;
    KGLoggingConnection();
    v4 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v4, OS_LOG_TYPE_FAULT))
    {
      *(_WORD *)v5 = 0;
      _os_log_fault_impl(&dword_1CA0A5000, v4, OS_LOG_TYPE_FAULT, "accessing database outside of a transaction", v5, 2u);
    }

  }
}

uint64_t __Block_byref_object_copy__661(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void __Block_byref_object_dispose__662(uint64_t a1)
{

}

std::string *degas::BitmapTable::BitmapTable(std::string *this, __int128 *a2, std::string::size_type a3)
{
  __int128 v5;

  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(this, *(const std::string::value_type **)a2, *((_QWORD *)a2 + 1));
  }
  else
  {
    v5 = *a2;
    this->__r_.__value_.__r.__words[2] = *((_QWORD *)a2 + 2);
    *(_OWORD *)&this->__r_.__value_.__l.__data_ = v5;
  }
  this[1].__r_.__value_.__r.__words[0] = a3;
  return this;
}

{
  __int128 v5;

  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(this, *(const std::string::value_type **)a2, *((_QWORD *)a2 + 1));
  }
  else
  {
    v5 = *a2;
    this->__r_.__value_.__r.__words[2] = *((_QWORD *)a2 + 2);
    *(_OWORD *)&this->__r_.__value_.__l.__data_ = v5;
  }
  this[1].__r_.__value_.__r.__words[0] = a3;
  return this;
}

void std::string::__init_copy_ctor_external(std::string *this, const std::string::value_type *__s, std::string::size_type __sz)
{
  std::string *v5;
  std::string::size_type v6;
  std::string::size_type v7;
  std::string *v8;

  v5 = this;
  if (__sz > 0x16)
  {
    if (__sz >= 0x7FFFFFFFFFFFFFF8)
      std::string::__throw_length_error[abi:ne180100]();
    v6 = (__sz & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((__sz | 7) != 0x17)
      v6 = __sz | 7;
    v7 = v6 + 1;
    v8 = (std::string *)operator new(v6 + 1);
    v5->__r_.__value_.__l.__size_ = __sz;
    v5->__r_.__value_.__r.__words[2] = v7 | 0x8000000000000000;
    v5->__r_.__value_.__r.__words[0] = (std::string::size_type)v8;
    v5 = v8;
  }
  else
  {
    *((_BYTE *)&this->__r_.__value_.__s + 23) = __sz;
  }
  memmove(v5, __s, __sz + 1);
}

void degas::BitmapTable::~BitmapTable(void **this)
{
  if (*((char *)this + 23) < 0)
    operator delete(*this);
}

{
  if (*((char *)this + 23) < 0)
    operator delete(*this);
}

uint64_t degas::BitmapTable::createTable(degas::BitmapTable *this)
{
  sqlite3 *v2;
  const char *v3;
  int module;
  int v5;
  unsigned int v6;
  unsigned int v7;

  v2 = (sqlite3 *)*((_QWORD *)this + 3);
  v3 = (const char *)this;
  if (*((char *)this + 23) < 0)
    v3 = *(const char **)this;
  module = sqlite3_create_module(v2, v3, &degas::module, this);
  if (module == 101)
    v5 = 2;
  else
    v5 = 3;
  if (module == 100)
    v6 = 1;
  else
    v6 = v5;
  if (module == 17)
    v7 = 4;
  else
    v7 = 3;
  if (!module)
    v7 = 0;
  if (module <= 99)
    return v7;
  else
    return v6;
}

uint64_t degas::bitmapTableConnect(degas *this, sqlite3 *a2, void *a3, int a4, const char **a5, sqlite3_vtab **a6, char **a7)
{
  const char *v9;
  const char *v10;
  uint64_t result;

  v9 = (const char *)sqlite3_malloc64(0x18uLL);
  v10 = v9;
  if (v9)
  {
    *(_QWORD *)v9 = 0;
    *((_QWORD *)v9 + 1) = 0;
    *((_QWORD *)v9 + 2) = 0;
    result = sqlite3_declare_vtab(this, "create table x (value integer primary key, bitmapPtr hidden)");
  }
  else
  {
    result = 7;
  }
  *a5 = v10;
  return result;
}

uint64_t degas::bitmapTableBestIndex(degas *this, sqlite3_vtab *a2, sqlite3_index_info *a3)
{
  uint64_t pModule_low;
  uint64_t v4;
  int *v5;
  uint64_t v6;
  int v7;
  int v8;
  char v9;
  uint64_t v10;

  pModule_low = LODWORD(a2->pModule);
  if ((int)pModule_low >= 1)
  {
    v4 = 0;
    v5 = *(int **)&a2->nRef;
    v6 = 8 * pModule_low;
    while (1)
    {
      v8 = *v5;
      v5 += 3;
      v7 = v8;
      if (v8 == 1)
        break;
      if (!v7)
      {
        v9 = 0;
LABEL_7:
        v10 = *(_QWORD *)&a2[1].nRef + v4;
        *(_DWORD *)v10 = v7;
        *(_BYTE *)(v10 + 4) = v9;
      }
      v4 += 8;
      if (v6 == v4)
        goto LABEL_9;
    }
    v9 = 1;
    goto LABEL_7;
  }
LABEL_9:
  a2[2].zErrMsg = (char *)0x3FB999999999999ALL;
  return 0;
}

uint64_t degas::bitmapTableDestroy(degas *this, sqlite3_vtab *a2)
{
  sqlite3_free(this);
  return 0;
}

uint64_t degas::bitmapTableOpenCursor(degas *this, sqlite3_vtab *a2, sqlite3_vtab_cursor **a3)
{
  const sqlite3_module *v4;
  const sqlite3_module *v5;
  uint64_t result;

  v4 = (const sqlite3_module *)sqlite3_malloc(56);
  if (!v4)
    return 1;
  v5 = v4;
  result = 0;
  v5->xDisconnect = 0;
  v5->xDestroy = 0;
  a2->pModule = v5;
  return result;
}

uint64_t degas::bitmapTableCloseCursor(degas *this, sqlite3_vtab_cursor *a2)
{
  sqlite3_free(this);
  return 0;
}

uint64_t degas::bitmapTableFilter(degas *this, sqlite3_vtab_cursor *a2, int a3, const char *a4, sqlite3_value **a5, sqlite3_value **a6)
{
  _QWORD *v7;
  uint64_t v9;
  __int128 v10;

  if ((int)a4 >= 1)
  {
    v7 = sqlite3_value_pointer(*a5, (const char *)degas::kBitmapPointerTypeName);
    *((_QWORD *)this + 4) = v7;
    degas::Bitmap::begin(v7, &v9);
    *((_QWORD *)this + 1) = v9;
    *((_OWORD *)this + 1) = v10;
  }
  *((_QWORD *)this + 5) = 0;
  return 0;
}

uint64_t degas::bitmapTableNext(degas *this, sqlite3_vtab_cursor *a2)
{
  degas::Bitmap::iterator::operator++((unint64_t *)this + 1);
  ++*((_QWORD *)this + 5);
  return 0;
}

BOOL degas::bitmapTableEof(degas *this, sqlite3_vtab_cursor *a2)
{
  uint64_t v2;

  v2 = *((_QWORD *)this + 4);
  return *((_QWORD *)this + 1) == v2 && *((_QWORD *)this + 2) == -1 && *((_QWORD *)this + 3) == *(_QWORD *)(v2 + 24);
}

uint64_t degas::bitmapTableColumnValue(void **this, sqlite3_vtab_cursor *a2, sqlite3_context *a3)
{
  void **v3;
  sqlite3_int64 v4;

  if ((_DWORD)a3 == 1)
  {
    sqlite3_result_pointer((sqlite3_context *)a2, this[4], (const char *)degas::kBitmapPointerTypeName, 0);
    return 0;
  }
  if (!(_DWORD)a3)
  {
    v3 = (void **)this[4];
    v4 = (sqlite3_int64)this[2];
    if (this[1] != v3 || v4 != -1)
      goto LABEL_10;
    if (this[3] != v3[3])
    {
      v4 = -1;
LABEL_10:
      sqlite3_result_int64((sqlite3_context *)a2, v4);
    }
  }
  return 0;
}

uint64_t degas::bitmapTableRowId(degas *this, sqlite3_vtab_cursor *a2, uint64_t *a3)
{
  a2->pVtab = *(sqlite3_vtab **)((char *)this + 40);
  return 0;
}

void sub_1CA16E28C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  char a65;

  _Block_object_dispose(&a65, 8);
  _Unwind_Resume(a1);
}

void sub_1CA16EFF8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t __Block_byref_object_copy__781(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void __Block_byref_object_dispose__782(uint64_t a1)
{

}

void sub_1CA1700C4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t __Block_byref_object_copy__833(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void __Block_byref_object_dispose__834(uint64_t a1)
{

}

id kg_errorWithCode(uint64_t a1)
{
  const __CFString *v2;
  void *v3;
  void *v4;
  uint64_t v6;
  _QWORD v7[2];

  v7[1] = *MEMORY[0x1E0C80C00];
  if ((unint64_t)(a1 - 5000) > 0xC)
    v2 = CFSTR("not an error");
  else
    v2 = off_1E83E2708[a1 - 5000];
  v6 = *MEMORY[0x1E0CB2D50];
  v7[0] = v2;
  objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", v7, &v6, 1);
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  v4 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0CB35C8]), "initWithDomain:code:userInfo:", CFSTR("com.apple.photos.kgerror"), a1, v3);

  return v4;
}

uint64_t elementMatchesDefinition(void *a1, void *a2)
{
  id v3;
  id v4;
  int v5;
  void *v6;
  uint64_t v7;
  void *v8;
  void *v9;

  v3 = a1;
  v4 = a2;
  v5 = objc_msgSend(v3, "domain");
  if (v5 == objc_msgSend(v4, "domain"))
  {
    objc_msgSend(v3, "label");
    v6 = (void *)objc_claimAutoreleasedReturnValue();
    if ((objc_msgSend(v6, "isEqualToString:", CFSTR("*")) & 1) != 0)
    {
      v7 = 1;
    }
    else
    {
      objc_msgSend(v3, "label");
      v8 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v4, "label");
      v9 = (void *)objc_claimAutoreleasedReturnValue();
      v7 = objc_msgSend(v8, "isEqualToString:", v9);

    }
  }
  else
  {
    v7 = 0;
  }

  return v7;
}

id PropertiesVisualStringForKeys(void *a1, void *a2)
{
  id v3;
  id v4;
  void *v5;
  void *v6;
  void *v7;
  id v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t i;
  uint64_t v13;
  void *v14;
  id v15;
  void *v16;
  void *v18;
  void *v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  _BYTE v24[128];
  uint64_t v25;

  v25 = *MEMORY[0x1E0C80C00];
  v3 = a1;
  v4 = a2;
  objc_msgSend(MEMORY[0x1E0CB37A0], "string");
  v19 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v19, "appendString:", CFSTR("{"));
  v18 = v3;
  objc_msgSend(v3, "allObjects");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  v6 = v5;
  if (!v5)
  {
    objc_msgSend(v4, "allKeys");
    v6 = (void *)objc_claimAutoreleasedReturnValue();
  }
  objc_msgSend(v6, "sortedArrayUsingSelector:", sel_localizedCaseInsensitiveCompare_);
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  if (!v5)

  v22 = 0u;
  v23 = 0u;
  v20 = 0u;
  v21 = 0u;
  v8 = v7;
  v9 = objc_msgSend(v8, "countByEnumeratingWithState:objects:count:", &v20, v24, 16);
  if (v9)
  {
    v10 = v9;
    v11 = *(_QWORD *)v21;
    do
    {
      for (i = 0; i != v10; ++i)
      {
        if (*(_QWORD *)v21 != v11)
          objc_enumerationMutation(v8);
        v13 = *(_QWORD *)(*((_QWORD *)&v20 + 1) + 8 * i);
        objc_msgSend(v4, "objectForKeyedSubscript:", v13);
        v14 = (void *)objc_claimAutoreleasedReturnValue();
        if (v14)
        {
          objc_opt_class();
          if ((objc_opt_isKindOfClass() & 1) != 0)
          {
            v15 = v14;
          }
          else
          {
            if ((objc_opt_respondsToSelector() & 1) != 0)
              objc_msgSend(v14, "stringValue");
            else
              objc_msgSend(v14, "description");
            v15 = (id)objc_claimAutoreleasedReturnValue();
          }
          v16 = v15;
          if (objc_msgSend(v15, "length"))
            objc_msgSend(v19, "appendFormat:", CFSTR("%@:'%@'; "), v13, v16);

        }
      }
      v10 = objc_msgSend(v8, "countByEnumeratingWithState:objects:count:", &v20, v24, 16);
    }
    while (v10);
  }

  if ((unint64_t)objc_msgSend(v19, "length") >= 2)
    objc_msgSend(v19, "deleteCharactersInRange:", objc_msgSend(v19, "length") - 2, 2);
  objc_msgSend(v19, "appendString:", CFSTR("}"));

  return v19;
}

KGMutableElementIdentifierSet *KGElementIdentifierSetWithSet(void *a1)
{
  id v1;
  KGMutableElementIdentifierSet *v2;
  id v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  _BYTE v13[128];
  uint64_t v14;

  v14 = *MEMORY[0x1E0C80C00];
  v1 = a1;
  v2 = objc_alloc_init(KGMutableElementIdentifierSet);
  v9 = 0u;
  v10 = 0u;
  v11 = 0u;
  v12 = 0u;
  v3 = v1;
  v4 = objc_msgSend(v3, "countByEnumeratingWithState:objects:count:", &v9, v13, 16);
  if (v4)
  {
    v5 = v4;
    v6 = *(_QWORD *)v10;
    do
    {
      v7 = 0;
      do
      {
        if (*(_QWORD *)v10 != v6)
          objc_enumerationMutation(v3);
        -[KGMutableElementIdentifierSet addIdentifier:](v2, "addIdentifier:", objc_msgSend(*(id *)(*((_QWORD *)&v9 + 1) + 8 * v7++), "identifier", (_QWORD)v9));
      }
      while (v5 != v7);
      v5 = objc_msgSend(v3, "countByEnumeratingWithState:objects:count:", &v9, v13, 16);
    }
    while (v5);
  }

  return v2;
}

KGMutableElementIdentifierSet *KGElementIdentifierSetWithArray(void *a1)
{
  id v1;
  KGMutableElementIdentifierSet *v2;
  id v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  _BYTE v13[128];
  uint64_t v14;

  v14 = *MEMORY[0x1E0C80C00];
  v1 = a1;
  v2 = objc_alloc_init(KGMutableElementIdentifierSet);
  v9 = 0u;
  v10 = 0u;
  v11 = 0u;
  v12 = 0u;
  v3 = v1;
  v4 = objc_msgSend(v3, "countByEnumeratingWithState:objects:count:", &v9, v13, 16);
  if (v4)
  {
    v5 = v4;
    v6 = *(_QWORD *)v10;
    do
    {
      v7 = 0;
      do
      {
        if (*(_QWORD *)v10 != v6)
          objc_enumerationMutation(v3);
        -[KGMutableElementIdentifierSet addIdentifier:](v2, "addIdentifier:", objc_msgSend(*(id *)(*((_QWORD *)&v9 + 1) + 8 * v7++), "identifier", (_QWORD)v9));
      }
      while (v5 != v7);
      v5 = objc_msgSend(v3, "countByEnumeratingWithState:objects:count:", &v9, v13, 16);
    }
    while (v5);
  }

  return v2;
}

void degas::SortAttributeValueTable::~SortAttributeValueTable(degas::SortAttributeValueTable *this)
{
  *(_QWORD *)this = off_1E83E43A8;
  *((_QWORD *)this + 4) = 0;
  if (*((char *)this + 31) < 0)
    operator delete(*((void **)this + 1));
}

{
  *(_QWORD *)this = off_1E83E43A8;
  *((_QWORD *)this + 4) = 0;
  if (*((char *)this + 31) < 0)
    operator delete(*((void **)this + 1));
  JUMPOUT(0x1CAA4ADC8);
}

{
  *(_QWORD *)this = off_1E83E43A8;
  *((_QWORD *)this + 4) = 0;
  if (*((char *)this + 31) < 0)
    operator delete(*((void **)this + 1));
}

uint64_t degas::SortAttributeValueTable::createTable(degas::SortAttributeValueTable *this)
{
  return 0;
}

uint64_t degas::SortAttributeValueTable::deleteEntry(degas::SortAttributeValueTable *this)
{
  return 2;
}

uint64_t degas::SortAttributeValueTable::SortAttributeValueTable(uint64_t a1, uint64_t a2, __int128 *a3, char a4, uint64_t a5)
{
  std::string *v9;
  __int128 v10;

  *(_QWORD *)a1 = off_1E83E43A8;
  v9 = (std::string *)(a1 + 8);
  if (*((char *)a3 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v9, *(const std::string::value_type **)a3, *((_QWORD *)a3 + 1));
  }
  else
  {
    v10 = *a3;
    v9->__r_.__value_.__r.__words[2] = *((_QWORD *)a3 + 2);
    *(_OWORD *)&v9->__r_.__value_.__l.__data_ = v10;
  }
  *(_QWORD *)(a1 + 32) = a2;
  *(_QWORD *)(a1 + 40) = a5;
  *(_QWORD *)a1 = off_1E83E2780;
  *(_BYTE *)(a1 + 48) = a4;
  return a1;
}

{
  std::string *v9;
  __int128 v10;

  *(_QWORD *)a1 = off_1E83E43A8;
  v9 = (std::string *)(a1 + 8);
  if (*((char *)a3 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v9, *(const std::string::value_type **)a3, *((_QWORD *)a3 + 1));
  }
  else
  {
    v10 = *a3;
    v9->__r_.__value_.__r.__words[2] = *((_QWORD *)a3 + 2);
    *(_OWORD *)&v9->__r_.__value_.__l.__data_ = v10;
  }
  *(_QWORD *)(a1 + 32) = a2;
  *(_QWORD *)(a1 + 40) = a5;
  *(_QWORD *)a1 = off_1E83E2780;
  *(_BYTE *)(a1 + 48) = a4;
  return a1;
}

uint64_t *degas::SortAttributeValueTable::readByIntAttrStatement(degas::SortAttributeValueTable *this, int a2, int a3)
{
  int v3;
  int v4;
  uint64_t v5;
  _QWORD v7[5];
  char v8;
  char v9;

  if (a3)
    v3 = 0;
  else
    v3 = 16;
  v4 = *((unsigned __int8 *)this + 48);
  v7[0] = MEMORY[0x1E0C809B0];
  v5 = *((_QWORD *)this + 5);
  v7[1] = 0x40000000;
  v7[2] = ___ZNK5degas23SortAttributeValueTable22readByIntAttrStatementEbb_block_invoke;
  v7[3] = &__block_descriptor_tmp;
  v7[4] = this;
  v8 = a2;
  v9 = a3;
  return degas::StatementCache::getStatement(v5, v3 | a2 ^ 1 | (v4 << 16) | 0x900u, (uint64_t)v7);
}

uint64_t ___ZNK5degas23SortAttributeValueTable22readByIntAttrStatementEbb_block_invoke@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  sqlite3_stmt **v8;
  sqlite3 *v9;
  void *__p;
  char v12;
  _QWORD v13[11];
  char v14;
  uint64_t v15;

  v4 = *(_QWORD *)(a1 + 32);
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v13);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v13, (uint64_t)"select elementId, intValue from ", 32);
  v5 = *(char *)(v4 + 31);
  if (v5 >= 0)
    v6 = v4 + 8;
  else
    v6 = *(_QWORD *)(v4 + 8);
  if (v5 >= 0)
    v7 = *(unsigned __int8 *)(v4 + 31);
  else
    v7 = *(_QWORD *)(v4 + 16);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v13, v6, v7);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v13, (uint64_t)" where attributeId = ?1 order by intValue", 41);
  if (!*(_BYTE *)(a1 + 40))
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v13, (uint64_t)" desc", 5);
  if (*(_BYTE *)(a1 + 41))
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v13, (uint64_t)" limit ?2", 9);
  v8 = (sqlite3_stmt **)operator new();
  v9 = *(sqlite3 **)(v4 + 32);
  std::stringbuf::str();
  degas::Statement::Statement(v8, v9, (uint64_t)&__p);
  std::shared_ptr<degas::Statement>::shared_ptr[abi:ne180100]<degas::Statement,void>(a2, (uint64_t)v8);
  if (v12 < 0)
    operator delete(__p);
  v13[0] = *MEMORY[0x1E0DE4F60];
  *(_QWORD *)((char *)v13 + *(_QWORD *)(v13[0] - 24)) = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 24);
  v13[1] = MEMORY[0x1E0DE4FB8] + 16;
  if (v14 < 0)
    operator delete((void *)v13[9]);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  return MEMORY[0x1CAA4AD98](&v15);
}

void sub_1CA171CFC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15)
{
  uint64_t v15;

  MEMORY[0x1CAA4ADC8](v15, 0x1020C4062D53EE8);
  std::ostringstream::~ostringstream((uint64_t)&a15);
  _Unwind_Resume(a1);
}

_QWORD *std::shared_ptr<degas::Statement>::shared_ptr[abi:ne180100]<degas::Statement,void>(_QWORD *a1, uint64_t a2)
{
  _QWORD *v4;

  *a1 = a2;
  v4 = (_QWORD *)operator new();
  *v4 = &off_1E83E6508;
  v4[1] = 0;
  v4[2] = 0;
  v4[3] = a2;
  a1[1] = v4;
  return a1;
}

void sub_1CA171DB4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::unique_ptr<degas::Statement>::reset[abi:ne180100]((degas::Statement **)va);
  _Unwind_Resume(a1);
}

degas::Statement *std::unique_ptr<degas::Statement>::reset[abi:ne180100](degas::Statement **a1)
{
  degas::Statement *result;

  result = *a1;
  *a1 = 0;
  if (result)
  {
    degas::Statement::~Statement(result);
    JUMPOUT(0x1CAA4ADC8);
  }
  return result;
}

void std::__shared_ptr_pointer<degas::Statement *,std::shared_ptr<degas::Statement>::__shared_ptr_default_delete<degas::Statement,degas::Statement>,std::allocator<degas::Statement>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1CAA4ADC8);
}

degas::Statement *std::__shared_ptr_pointer<degas::Statement *,std::shared_ptr<degas::Statement>::__shared_ptr_default_delete<degas::Statement,degas::Statement>,std::allocator<degas::Statement>>::__on_zero_shared(uint64_t a1)
{
  degas::Statement *result;

  result = *(degas::Statement **)(a1 + 24);
  if (result)
  {
    degas::Statement::~Statement(result);
    JUMPOUT(0x1CAA4ADC8);
  }
  return result;
}

uint64_t std::__shared_ptr_pointer<degas::Statement *,std::shared_ptr<degas::Statement>::__shared_ptr_default_delete<degas::Statement,degas::Statement>,std::allocator<degas::Statement>>::__get_deleter(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(_QWORD *)(a2 + 8), 0x80000001CA1FF6A4))
    return a1 + 24;
  else
    return 0;
}

BOOL std::type_info::operator==[abi:ne180100](uint64_t a1, uint64_t a2)
{
  if (a1 == a2)
    return 1;
  if ((a2 & a1) < 0 != __OFSUB__(a1, a2))
    return strcmp((const char *)(a1 & 0x7FFFFFFFFFFFFFFFLL), (const char *)(a2 & 0x7FFFFFFFFFFFFFFFLL)) == 0;
  return 0;
}

uint64_t *degas::SortAttributeValueTable::readByRealAttrStatement(degas::SortAttributeValueTable *this, int a2, int a3)
{
  int v3;
  int v4;
  uint64_t v5;
  _QWORD v7[5];
  char v8;
  char v9;

  if (a3)
    v3 = 0;
  else
    v3 = 16;
  v4 = *((unsigned __int8 *)this + 48);
  v7[0] = MEMORY[0x1E0C809B0];
  v5 = *((_QWORD *)this + 5);
  v7[1] = 0x40000000;
  v7[2] = ___ZNK5degas23SortAttributeValueTable23readByRealAttrStatementEbb_block_invoke;
  v7[3] = &__block_descriptor_tmp_7;
  v7[4] = this;
  v8 = a2;
  v9 = a3;
  return degas::StatementCache::getStatement(v5, v3 | a2 ^ 1 | (v4 << 16) | 0xA00u, (uint64_t)v7);
}

uint64_t ___ZNK5degas23SortAttributeValueTable23readByRealAttrStatementEbb_block_invoke@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  sqlite3_stmt **v8;
  sqlite3 *v9;
  void *__p;
  char v12;
  _QWORD v13[11];
  char v14;
  uint64_t v15;

  v4 = *(_QWORD *)(a1 + 32);
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v13);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v13, (uint64_t)"select elementId, realValue from ", 33);
  v5 = *(char *)(v4 + 31);
  if (v5 >= 0)
    v6 = v4 + 8;
  else
    v6 = *(_QWORD *)(v4 + 8);
  if (v5 >= 0)
    v7 = *(unsigned __int8 *)(v4 + 31);
  else
    v7 = *(_QWORD *)(v4 + 16);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v13, v6, v7);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v13, (uint64_t)" where attributeId = ?1 order by realValue", 42);
  if (!*(_BYTE *)(a1 + 40))
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v13, (uint64_t)" desc", 5);
  if (*(_BYTE *)(a1 + 41))
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v13, (uint64_t)" limit ?2", 9);
  v8 = (sqlite3_stmt **)operator new();
  v9 = *(sqlite3 **)(v4 + 32);
  std::stringbuf::str();
  degas::Statement::Statement(v8, v9, (uint64_t)&__p);
  std::shared_ptr<degas::Statement>::shared_ptr[abi:ne180100]<degas::Statement,void>(a2, (uint64_t)v8);
  if (v12 < 0)
    operator delete(__p);
  v13[0] = *MEMORY[0x1E0DE4F60];
  *(_QWORD *)((char *)v13 + *(_QWORD *)(v13[0] - 24)) = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 24);
  v13[1] = MEMORY[0x1E0DE4FB8] + 16;
  if (v14 < 0)
    operator delete((void *)v13[9]);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  return MEMORY[0x1CAA4AD98](&v15);
}

void sub_1CA172100(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15)
{
  uint64_t v15;

  MEMORY[0x1CAA4ADC8](v15, 0x1020C4062D53EE8);
  std::ostringstream::~ostringstream((uint64_t)&a15);
  _Unwind_Resume(a1);
}

uint64_t *degas::SortAttributeValueTable::readByStringAttrStatement(degas::SortAttributeValueTable *this, int a2, int a3)
{
  int v3;
  int v4;
  uint64_t v5;
  _QWORD v7[5];
  char v8;
  char v9;

  if (a3)
    v3 = 0;
  else
    v3 = 16;
  v4 = *((unsigned __int8 *)this + 48);
  v7[0] = MEMORY[0x1E0C809B0];
  v5 = *((_QWORD *)this + 5);
  v7[1] = 0x40000000;
  v7[2] = ___ZNK5degas23SortAttributeValueTable25readByStringAttrStatementEbb_block_invoke;
  v7[3] = &__block_descriptor_tmp_10;
  v7[4] = this;
  v8 = a2;
  v9 = a3;
  return degas::StatementCache::getStatement(v5, v3 | a2 ^ 1 | (v4 << 16) | 0xB00u, (uint64_t)v7);
}

uint64_t ___ZNK5degas23SortAttributeValueTable25readByStringAttrStatementEbb_block_invoke@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  sqlite3_stmt **v8;
  sqlite3 *v9;
  void *__p;
  char v12;
  _QWORD v13[11];
  char v14;
  uint64_t v15;

  v4 = *(_QWORD *)(a1 + 32);
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v13);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v13, (uint64_t)"select elementId, stringValue from ", 35);
  v5 = *(char *)(v4 + 31);
  if (v5 >= 0)
    v6 = v4 + 8;
  else
    v6 = *(_QWORD *)(v4 + 8);
  if (v5 >= 0)
    v7 = *(unsigned __int8 *)(v4 + 31);
  else
    v7 = *(_QWORD *)(v4 + 16);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v13, v6, v7);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v13, (uint64_t)" where attributeId = ?1 order by stringValue", 44);
  if (!*(_BYTE *)(a1 + 40))
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v13, (uint64_t)" desc", 5);
  if (*(_BYTE *)(a1 + 41))
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v13, (uint64_t)" limit ?2", 9);
  v8 = (sqlite3_stmt **)operator new();
  v9 = *(sqlite3 **)(v4 + 32);
  std::stringbuf::str();
  degas::Statement::Statement(v8, v9, (uint64_t)&__p);
  std::shared_ptr<degas::Statement>::shared_ptr[abi:ne180100]<degas::Statement,void>(a2, (uint64_t)v8);
  if (v12 < 0)
    operator delete(__p);
  v13[0] = *MEMORY[0x1E0DE4F60];
  *(_QWORD *)((char *)v13 + *(_QWORD *)(v13[0] - 24)) = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 24);
  v13[1] = MEMORY[0x1E0DE4FB8] + 16;
  if (v14 < 0)
    operator delete((void *)v13[9]);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  return MEMORY[0x1CAA4AD98](&v15);
}

void sub_1CA172370(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15)
{
  uint64_t v15;

  MEMORY[0x1CAA4ADC8](v15, 0x1020C4062D53EE8);
  std::ostringstream::~ostringstream((uint64_t)&a15);
  _Unwind_Resume(a1);
}

uint64_t *degas::SortAttributeValueTable::readByIntAttrIdentifiersStatement(degas::SortAttributeValueTable *this, int a2, int a3)
{
  int v3;
  int v4;
  int v5;
  uint64_t v6;
  _QWORD v8[5];
  char v9;
  char v10;

  if (a2)
    v3 = 32;
  else
    v3 = 33;
  if (a3)
    v4 = 0;
  else
    v4 = 16;
  v5 = *((unsigned __int8 *)this + 48);
  v8[0] = MEMORY[0x1E0C809B0];
  v6 = *((_QWORD *)this + 5);
  v8[1] = 0x40000000;
  v8[2] = ___ZNK5degas23SortAttributeValueTable33readByIntAttrIdentifiersStatementEbb_block_invoke;
  v8[3] = &__block_descriptor_tmp_14;
  v8[4] = this;
  v9 = a2;
  v10 = a3;
  return degas::StatementCache::getStatement(v6, v4 | v3 | (v5 << 16) | 0x900u, (uint64_t)v8);
}

uint64_t ___ZNK5degas23SortAttributeValueTable33readByIntAttrIdentifiersStatementEbb_block_invoke@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  sqlite3_stmt **v8;
  sqlite3 *v9;
  void *__p;
  char v12;
  _QWORD v13[11];
  char v14;
  uint64_t v15;

  v4 = *(_QWORD *)(a1 + 32);
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v13);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v13, (uint64_t)"select v.elementId, v.intValue from ", 36);
  v5 = *(char *)(v4 + 31);
  if (v5 >= 0)
    v6 = v4 + 8;
  else
    v6 = *(_QWORD *)(v4 + 8);
  if (v5 >= 0)
    v7 = *(unsigned __int8 *)(v4 + 31);
  else
    v7 = *(_QWORD *)(v4 + 16);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v13, v6, v7);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v13, (uint64_t)" v, identifierBitmap(?1) b where v.elementId = b.value and v.attributeId=?2 order by v.intValue", 95);
  if (!*(_BYTE *)(a1 + 40))
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v13, (uint64_t)" desc", 5);
  if (*(_BYTE *)(a1 + 41))
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v13, (uint64_t)" limit ?3", 9);
  v8 = (sqlite3_stmt **)operator new();
  v9 = *(sqlite3 **)(v4 + 32);
  std::stringbuf::str();
  degas::Statement::Statement(v8, v9, (uint64_t)&__p);
  std::shared_ptr<degas::Statement>::shared_ptr[abi:ne180100]<degas::Statement,void>(a2, (uint64_t)v8);
  if (v12 < 0)
    operator delete(__p);
  v13[0] = *MEMORY[0x1E0DE4F60];
  *(_QWORD *)((char *)v13 + *(_QWORD *)(v13[0] - 24)) = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 24);
  v13[1] = MEMORY[0x1E0DE4FB8] + 16;
  if (v14 < 0)
    operator delete((void *)v13[9]);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  return MEMORY[0x1CAA4AD98](&v15);
}

void sub_1CA1725E8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15)
{
  uint64_t v15;

  MEMORY[0x1CAA4ADC8](v15, 0x1020C4062D53EE8);
  std::ostringstream::~ostringstream((uint64_t)&a15);
  _Unwind_Resume(a1);
}

uint64_t *degas::SortAttributeValueTable::readByRealAttrIdentifiersStatement(degas::SortAttributeValueTable *this, int a2, int a3)
{
  int v3;
  int v4;
  int v5;
  uint64_t v6;
  _QWORD v8[5];
  char v9;
  char v10;

  if (a2)
    v3 = 32;
  else
    v3 = 33;
  if (a3)
    v4 = 0;
  else
    v4 = 16;
  v5 = *((unsigned __int8 *)this + 48);
  v8[0] = MEMORY[0x1E0C809B0];
  v6 = *((_QWORD *)this + 5);
  v8[1] = 0x40000000;
  v8[2] = ___ZNK5degas23SortAttributeValueTable34readByRealAttrIdentifiersStatementEbb_block_invoke;
  v8[3] = &__block_descriptor_tmp_17;
  v8[4] = this;
  v9 = a2;
  v10 = a3;
  return degas::StatementCache::getStatement(v6, v4 | v3 | (v5 << 16) | 0xA00u, (uint64_t)v8);
}

uint64_t ___ZNK5degas23SortAttributeValueTable34readByRealAttrIdentifiersStatementEbb_block_invoke@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  sqlite3_stmt **v8;
  sqlite3 *v9;
  void *__p;
  char v12;
  _QWORD v13[11];
  char v14;
  uint64_t v15;

  v4 = *(_QWORD *)(a1 + 32);
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v13);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v13, (uint64_t)"select v.elementId, v.realValue from ", 37);
  v5 = *(char *)(v4 + 31);
  if (v5 >= 0)
    v6 = v4 + 8;
  else
    v6 = *(_QWORD *)(v4 + 8);
  if (v5 >= 0)
    v7 = *(unsigned __int8 *)(v4 + 31);
  else
    v7 = *(_QWORD *)(v4 + 16);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v13, v6, v7);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v13, (uint64_t)" v, identifierBitmap(?1) b where v.elementId = b.value and v.attributeId=?2 order by v.realValue", 96);
  if (!*(_BYTE *)(a1 + 40))
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v13, (uint64_t)" desc", 5);
  if (*(_BYTE *)(a1 + 41))
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v13, (uint64_t)" limit ?3", 9);
  v8 = (sqlite3_stmt **)operator new();
  v9 = *(sqlite3 **)(v4 + 32);
  std::stringbuf::str();
  degas::Statement::Statement(v8, v9, (uint64_t)&__p);
  std::shared_ptr<degas::Statement>::shared_ptr[abi:ne180100]<degas::Statement,void>(a2, (uint64_t)v8);
  if (v12 < 0)
    operator delete(__p);
  v13[0] = *MEMORY[0x1E0DE4F60];
  *(_QWORD *)((char *)v13 + *(_QWORD *)(v13[0] - 24)) = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 24);
  v13[1] = MEMORY[0x1E0DE4FB8] + 16;
  if (v14 < 0)
    operator delete((void *)v13[9]);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  return MEMORY[0x1CAA4AD98](&v15);
}

void sub_1CA172860(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15)
{
  uint64_t v15;

  MEMORY[0x1CAA4ADC8](v15, 0x1020C4062D53EE8);
  std::ostringstream::~ostringstream((uint64_t)&a15);
  _Unwind_Resume(a1);
}

uint64_t *degas::SortAttributeValueTable::readByStringAttrIdentifiersStatement(degas::SortAttributeValueTable *this, int a2, int a3)
{
  int v3;
  int v4;
  int v5;
  uint64_t v6;
  _QWORD v8[5];
  char v9;
  char v10;

  if (a2)
    v3 = 32;
  else
    v3 = 33;
  if (a3)
    v4 = 0;
  else
    v4 = 16;
  v5 = *((unsigned __int8 *)this + 48);
  v8[0] = MEMORY[0x1E0C809B0];
  v6 = *((_QWORD *)this + 5);
  v8[1] = 0x40000000;
  v8[2] = ___ZNK5degas23SortAttributeValueTable36readByStringAttrIdentifiersStatementEbb_block_invoke;
  v8[3] = &__block_descriptor_tmp_20;
  v8[4] = this;
  v9 = a2;
  v10 = a3;
  return degas::StatementCache::getStatement(v6, v4 | v3 | (v5 << 16) | 0xB00u, (uint64_t)v8);
}

uint64_t ___ZNK5degas23SortAttributeValueTable36readByStringAttrIdentifiersStatementEbb_block_invoke@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  sqlite3_stmt **v8;
  sqlite3 *v9;
  void *__p;
  char v12;
  _QWORD v13[11];
  char v14;
  uint64_t v15;

  v4 = *(_QWORD *)(a1 + 32);
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v13);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v13, (uint64_t)"select v.elementId, v.stringValue from ", 39);
  v5 = *(char *)(v4 + 31);
  if (v5 >= 0)
    v6 = v4 + 8;
  else
    v6 = *(_QWORD *)(v4 + 8);
  if (v5 >= 0)
    v7 = *(unsigned __int8 *)(v4 + 31);
  else
    v7 = *(_QWORD *)(v4 + 16);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v13, v6, v7);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v13, (uint64_t)" v, identifierBitmap(?1) b where v.elementId = b.value and v.attributeId=?2 order by v.stringValue", 98);
  if (!*(_BYTE *)(a1 + 40))
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v13, (uint64_t)" desc", 5);
  if (*(_BYTE *)(a1 + 41))
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v13, (uint64_t)" limit ?3", 9);
  v8 = (sqlite3_stmt **)operator new();
  v9 = *(sqlite3 **)(v4 + 32);
  std::stringbuf::str();
  degas::Statement::Statement(v8, v9, (uint64_t)&__p);
  std::shared_ptr<degas::Statement>::shared_ptr[abi:ne180100]<degas::Statement,void>(a2, (uint64_t)v8);
  if (v12 < 0)
    operator delete(__p);
  v13[0] = *MEMORY[0x1E0DE4F60];
  *(_QWORD *)((char *)v13 + *(_QWORD *)(v13[0] - 24)) = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 24);
  v13[1] = MEMORY[0x1E0DE4FB8] + 16;
  if (v14 < 0)
    operator delete((void *)v13[9]);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  return MEMORY[0x1CAA4AD98](&v15);
}

void sub_1CA172AD8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15)
{
  uint64_t v15;

  MEMORY[0x1CAA4ADC8](v15, 0x1020C4062D53EE8);
  std::ostringstream::~ostringstream((uint64_t)&a15);
  _Unwind_Resume(a1);
}

uint64_t *degas::SortAttributeValueTable::prepareStatementToReadByIntAttr(degas::SortAttributeValueTable *this, sqlite3_int64 a2, int a3, sqlite3_int64 a4)
{
  uint64_t *v6;

  v6 = degas::SortAttributeValueTable::readByIntAttrStatement(this, a3, a4 >= 0);
  degas::Statement::bindInteger((sqlite3_stmt **)*v6, 1, a2);
  if ((a4 & 0x8000000000000000) == 0)
    degas::Statement::bindInteger((sqlite3_stmt **)*v6, 2, a4);
  return v6;
}

uint64_t *degas::SortAttributeValueTable::prepareStatementToReadByRealAttr(degas::SortAttributeValueTable *this, sqlite3_int64 a2, int a3, sqlite3_int64 a4)
{
  uint64_t *v6;

  v6 = degas::SortAttributeValueTable::readByRealAttrStatement(this, a3, a4 >= 0);
  degas::Statement::bindInteger((sqlite3_stmt **)*v6, 1, a2);
  if ((a4 & 0x8000000000000000) == 0)
    degas::Statement::bindInteger((sqlite3_stmt **)*v6, 2, a4);
  return v6;
}

uint64_t *degas::SortAttributeValueTable::prepareStatementToReadByStringAttr(degas::SortAttributeValueTable *this, sqlite3_int64 a2, int a3, sqlite3_int64 a4)
{
  uint64_t *v6;

  v6 = degas::SortAttributeValueTable::readByStringAttrStatement(this, a3, a4 >= 0);
  degas::Statement::bindInteger((sqlite3_stmt **)*v6, 1, a2);
  if ((a4 & 0x8000000000000000) == 0)
    degas::Statement::bindInteger((sqlite3_stmt **)*v6, 2, a4);
  return v6;
}

uint64_t *degas::SortAttributeValueTable::prepareStatementToReadByIntAttrIdentifiers(degas::SortAttributeValueTable *this, sqlite3_int64 a2, int a3, sqlite3_int64 a4, Bitmap *a5)
{
  uint64_t *v8;

  v8 = degas::SortAttributeValueTable::readByIntAttrIdentifiersStatement(this, a3, a4 >= 0);
  degas::Statement::bindBitmapPointer((sqlite3_stmt **)*v8, 1, a5);
  degas::Statement::bindInteger((sqlite3_stmt **)*v8, 2, a2);
  if ((a4 & 0x8000000000000000) == 0)
    degas::Statement::bindInteger((sqlite3_stmt **)*v8, 3, a4);
  return v8;
}

uint64_t *degas::SortAttributeValueTable::prepareStatementToReadByRealAttrIdentifiers(degas::SortAttributeValueTable *this, sqlite3_int64 a2, int a3, sqlite3_int64 a4, Bitmap *a5)
{
  uint64_t *v8;

  v8 = degas::SortAttributeValueTable::readByRealAttrIdentifiersStatement(this, a3, a4 >= 0);
  degas::Statement::bindBitmapPointer((sqlite3_stmt **)*v8, 1, a5);
  degas::Statement::bindInteger((sqlite3_stmt **)*v8, 2, a2);
  if ((a4 & 0x8000000000000000) == 0)
    degas::Statement::bindInteger((sqlite3_stmt **)*v8, 3, a4);
  return v8;
}

uint64_t *degas::SortAttributeValueTable::prepareStatementToReadByStringAttrIdentifiers(degas::SortAttributeValueTable *this, sqlite3_int64 a2, int a3, sqlite3_int64 a4, Bitmap *a5)
{
  uint64_t *v8;

  v8 = degas::SortAttributeValueTable::readByStringAttrIdentifiersStatement(this, a3, a4 >= 0);
  degas::Statement::bindBitmapPointer((sqlite3_stmt **)*v8, 1, a5);
  degas::Statement::bindInteger((sqlite3_stmt **)*v8, 2, a2);
  if ((a4 & 0x8000000000000000) == 0)
    degas::Statement::bindInteger((sqlite3_stmt **)*v8, 3, a4);
  return v8;
}

_QWORD *degas::SortAttributeValueCursor::SortAttributeValueCursor(_QWORD *this)
{
  *this = 0;
  this[1] = 0;
  return this;
}

_QWORD *degas::SortAttributeValueCursor::setForIntAttr(degas::SortAttributeValueCursor *this, sqlite3_int64 a2, int a3, sqlite3_int64 a4, const degas::SortAttributeValueTable *a5)
{
  uint64_t *v6;

  v6 = degas::SortAttributeValueTable::prepareStatementToReadByIntAttr(a5, a2, a3, a4);
  return std::shared_ptr<degas::Statement>::operator=[abi:ne180100](this, *v6, v6[1]);
}

_QWORD *std::shared_ptr<degas::Statement>::operator=[abi:ne180100](_QWORD *a1, uint64_t a2, uint64_t a3)
{
  unint64_t *v4;
  unint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;

  if (a3)
  {
    v4 = (unint64_t *)(a3 + 8);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  v6 = (std::__shared_weak_count *)a1[1];
  *a1 = a2;
  a1[1] = a3;
  if (v6)
  {
    p_shared_owners = (unint64_t *)&v6->__shared_owners_;
    do
      v8 = __ldaxr(p_shared_owners);
    while (__stlxr(v8 - 1, p_shared_owners));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
  return a1;
}

_QWORD *degas::SortAttributeValueCursor::setForRealAttr(degas::SortAttributeValueCursor *this, sqlite3_int64 a2, int a3, sqlite3_int64 a4, const degas::SortAttributeValueTable *a5)
{
  uint64_t *v6;

  v6 = degas::SortAttributeValueTable::prepareStatementToReadByRealAttr(a5, a2, a3, a4);
  return std::shared_ptr<degas::Statement>::operator=[abi:ne180100](this, *v6, v6[1]);
}

_QWORD *degas::SortAttributeValueCursor::setForStringAttr(degas::SortAttributeValueCursor *this, sqlite3_int64 a2, int a3, sqlite3_int64 a4, const degas::SortAttributeValueTable *a5)
{
  uint64_t *v6;

  v6 = degas::SortAttributeValueTable::prepareStatementToReadByStringAttr(a5, a2, a3, a4);
  return std::shared_ptr<degas::Statement>::operator=[abi:ne180100](this, *v6, v6[1]);
}

_QWORD *degas::SortAttributeValueCursor::setForIntAttrIdentifiers(degas::SortAttributeValueCursor *this, sqlite3_int64 a2, Bitmap *a3, int a4, sqlite3_int64 a5, const degas::SortAttributeValueTable *a6)
{
  uint64_t *v7;

  v7 = degas::SortAttributeValueTable::prepareStatementToReadByIntAttrIdentifiers(a6, a2, a4, a5, a3);
  return std::shared_ptr<degas::Statement>::operator=[abi:ne180100](this, *v7, v7[1]);
}

_QWORD *degas::SortAttributeValueCursor::setForRealAttrIdentifiers(degas::SortAttributeValueCursor *this, sqlite3_int64 a2, Bitmap *a3, int a4, sqlite3_int64 a5, const degas::SortAttributeValueTable *a6)
{
  uint64_t *v7;

  v7 = degas::SortAttributeValueTable::prepareStatementToReadByRealAttrIdentifiers(a6, a2, a4, a5, a3);
  return std::shared_ptr<degas::Statement>::operator=[abi:ne180100](this, *v7, v7[1]);
}

_QWORD *degas::SortAttributeValueCursor::setForStringAttrIdentifiers(degas::SortAttributeValueCursor *this, sqlite3_int64 a2, Bitmap *a3, int a4, sqlite3_int64 a5, const degas::SortAttributeValueTable *a6)
{
  uint64_t *v7;

  v7 = degas::SortAttributeValueTable::prepareStatementToReadByStringAttrIdentifiers(a6, a2, a4, a5, a3);
  return std::shared_ptr<degas::Statement>::operator=[abi:ne180100](this, *v7, v7[1]);
}

sqlite3_int64 degas::SortAttributeValueCursor::elementId(sqlite3_stmt ***this)
{
  return sqlite3_column_int64(**this, 0);
}

sqlite3_int64 degas::SortAttributeValueCursor::integerValue(sqlite3_stmt ***this)
{
  return sqlite3_column_int64(**this, 1);
}

double degas::SortAttributeValueCursor::realValue(sqlite3_stmt ***this)
{
  return sqlite3_column_double(**this, 1);
}

void degas::SortAttributeValueCursor::stringValue(sqlite3_stmt ***a1, uint64_t a2)
{
  degas::Statement::stringColumnValue(*a1, 1, a2);
}

_QWORD *degas::BinaryOperatorDescription@<X0>(int a1@<W0>, _QWORD *a2@<X8>)
{
  return std::string::basic_string[abi:ne180100]<0>(a2, off_1E83E2878[a1]);
}

uint64_t degas::TernaryOperatorDescription(int a1, uint64_t a2)
{
  int v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  int v12;
  int v13;
  int v14;
  int v15;
  _QWORD v17[11];
  char v18;
  uint64_t v19;
  char v20;

  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v17);
  switch(a1)
  {
    case 0:
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v17, (uint64_t)"?", 1);
      break;
    case 1:
      v20 = 91;
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v17, (uint64_t)&v20, 1);
      v4 = *(char *)(a2 + 23);
      if (v4 >= 0)
        v5 = a2;
      else
        v5 = *(_QWORD *)a2;
      if (v4 >= 0)
        v6 = *(unsigned __int8 *)(a2 + 23);
      else
        v6 = *(_QWORD *)(a2 + 8);
      goto LABEL_39;
    case 2:
      v20 = 40;
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v17, (uint64_t)&v20, 1);
      v7 = *(char *)(a2 + 23);
      if (v7 >= 0)
        v5 = a2;
      else
        v5 = *(_QWORD *)a2;
      if (v7 >= 0)
        v6 = *(unsigned __int8 *)(a2 + 23);
      else
        v6 = *(_QWORD *)(a2 + 8);
      goto LABEL_39;
    case 3:
      v20 = 91;
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v17, (uint64_t)&v20, 1);
      v8 = *(char *)(a2 + 23);
      if (v8 >= 0)
        v9 = a2;
      else
        v9 = *(_QWORD *)a2;
      if (v8 >= 0)
        v10 = *(unsigned __int8 *)(a2 + 23);
      else
        v10 = *(_QWORD *)(a2 + 8);
      goto LABEL_52;
    case 4:
      v20 = 40;
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v17, (uint64_t)&v20, 1);
      v11 = *(char *)(a2 + 23);
      if (v11 >= 0)
        v9 = a2;
      else
        v9 = *(_QWORD *)a2;
      if (v11 >= 0)
        v10 = *(unsigned __int8 *)(a2 + 23);
      else
        v10 = *(_QWORD *)(a2 + 8);
      goto LABEL_52;
    case 5:
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v17, (uint64_t)"![", 2);
      v12 = *(char *)(a2 + 23);
      if (v12 >= 0)
        v5 = a2;
      else
        v5 = *(_QWORD *)a2;
      if (v12 >= 0)
        v6 = *(unsigned __int8 *)(a2 + 23);
      else
        v6 = *(_QWORD *)(a2 + 8);
      goto LABEL_39;
    case 6:
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v17, (uint64_t)"!(", 2);
      v13 = *(char *)(a2 + 23);
      if (v13 >= 0)
        v5 = a2;
      else
        v5 = *(_QWORD *)a2;
      if (v13 >= 0)
        v6 = *(unsigned __int8 *)(a2 + 23);
      else
        v6 = *(_QWORD *)(a2 + 8);
LABEL_39:
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v17, v5, v6);
      v20 = 93;
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v17, (uint64_t)&v20, 1);
      break;
    case 7:
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v17, (uint64_t)"![", 2);
      v14 = *(char *)(a2 + 23);
      if (v14 >= 0)
        v9 = a2;
      else
        v9 = *(_QWORD *)a2;
      if (v14 >= 0)
        v10 = *(unsigned __int8 *)(a2 + 23);
      else
        v10 = *(_QWORD *)(a2 + 8);
      goto LABEL_52;
    case 8:
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v17, (uint64_t)"!(", 2);
      v15 = *(char *)(a2 + 23);
      if (v15 >= 0)
        v9 = a2;
      else
        v9 = *(_QWORD *)a2;
      if (v15 >= 0)
        v10 = *(unsigned __int8 *)(a2 + 23);
      else
        v10 = *(_QWORD *)(a2 + 8);
LABEL_52:
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v17, v9, v10);
      v20 = 41;
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v17, (uint64_t)&v20, 1);
      break;
    default:
      break;
  }
  std::stringbuf::str();
  v17[0] = *MEMORY[0x1E0DE4F60];
  *(_QWORD *)((char *)v17 + *(_QWORD *)(v17[0] - 24)) = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 24);
  v17[1] = MEMORY[0x1E0DE4FB8] + 16;
  if (v18 < 0)
    operator delete((void *)v17[9]);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  return MEMORY[0x1CAA4AD98](&v19);
}

void sub_1CA173364(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::ostringstream::~ostringstream((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_1CA173450(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id obj)
{
  objc_sync_exit(obj);
  _Unwind_Resume(a1);
}

void sub_1CA1734CC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id obj)
{
  objc_sync_exit(obj);
  _Unwind_Resume(a1);
}

void sub_1CA17353C(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1CA1735A8(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1CA173614(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

std::string *degas::ArrayTable::ArrayTable(std::string *this, __int128 *a2, std::string::size_type a3)
{
  __int128 v5;

  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(this, *(const std::string::value_type **)a2, *((_QWORD *)a2 + 1));
  }
  else
  {
    v5 = *a2;
    this->__r_.__value_.__r.__words[2] = *((_QWORD *)a2 + 2);
    *(_OWORD *)&this->__r_.__value_.__l.__data_ = v5;
  }
  this[1].__r_.__value_.__r.__words[0] = a3;
  return this;
}

{
  __int128 v5;

  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(this, *(const std::string::value_type **)a2, *((_QWORD *)a2 + 1));
  }
  else
  {
    v5 = *a2;
    this->__r_.__value_.__r.__words[2] = *((_QWORD *)a2 + 2);
    *(_OWORD *)&this->__r_.__value_.__l.__data_ = v5;
  }
  this[1].__r_.__value_.__r.__words[0] = a3;
  return this;
}

void degas::ArrayTable::~ArrayTable(void **this)
{
  if (*((char *)this + 23) < 0)
    operator delete(*this);
}

{
  if (*((char *)this + 23) < 0)
    operator delete(*this);
}

uint64_t degas::ArrayTable::createTable(degas::ArrayTable *this)
{
  sqlite3 *v2;
  const char *v3;
  int module;
  int v5;
  unsigned int v6;
  unsigned int v7;

  v2 = (sqlite3 *)*((_QWORD *)this + 3);
  v3 = (const char *)this;
  if (*((char *)this + 23) < 0)
    v3 = *(const char **)this;
  module = sqlite3_create_module(v2, v3, &degas::arrayModule, this);
  if (module == 101)
    v5 = 2;
  else
    v5 = 3;
  if (module == 100)
    v6 = 1;
  else
    v6 = v5;
  if (module == 17)
    v7 = 4;
  else
    v7 = 3;
  if (!module)
    v7 = 0;
  if (module <= 99)
    return v7;
  else
    return v6;
}

uint64_t degas::arrayConnect(degas *this, sqlite3 *a2, void *a3, int a4, const char **a5, sqlite3_vtab **a6, char **a7)
{
  uint64_t result;
  const char *v9;
  const char *v10;

  result = sqlite3_declare_vtab(this, "CREATE TABLE x(value,pointer hidden,count hidden,ctype hidden)");
  if (!(_DWORD)result)
  {
    v9 = (const char *)sqlite3_malloc(24);
    *a5 = v9;
    if (v9)
    {
      v10 = v9;
      result = 0;
      *(_QWORD *)v10 = 0;
      *((_QWORD *)v10 + 1) = 0;
      *((_QWORD *)v10 + 2) = 0;
    }
    else
    {
      return 7;
    }
  }
  return result;
}

uint64_t degas::arrayBestIndex(degas *this, sqlite3_vtab *a2, sqlite3_index_info *a3)
{
  uint64_t pModule_low;
  uint64_t v4;
  _BYTE *v5;
  unsigned int v6;
  unsigned int v7;
  unsigned int v8;
  int v9;
  unsigned int v10;
  unsigned int v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  pModule_low = LODWORD(a2->pModule);
  if ((int)pModule_low < 1)
    goto LABEL_19;
  v4 = 0;
  v5 = (_BYTE *)(*(_QWORD *)&a2->nRef + 4);
  v6 = -1;
  v7 = -1;
  v8 = -1;
  do
  {
    if (v5[1] && *v5 == 2)
    {
      v9 = *((_DWORD *)v5 - 1);
      if (v9 == 1)
        v10 = v4;
      else
        v10 = v8;
      if (v9 == 2)
      {
        v10 = v8;
        v11 = v4;
      }
      else
      {
        v11 = v7;
      }
      if (v9 == 3)
      {
        v6 = v4;
      }
      else
      {
        v8 = v10;
        v7 = v11;
      }
    }
    ++v4;
    v5 += 12;
  }
  while (pModule_low != v4);
  if ((v8 & 0x80000000) != 0 || (v7 & 0x80000000) != 0)
  {
LABEL_19:
    a2[2].zErrMsg = (char *)0x41DFFFFFFFC00000;
    a2[3].pModule = (const sqlite3_module *)0x7FFFFFFF;
    LODWORD(a2[1].zErrMsg) = 0;
  }
  else
  {
    v12 = *(_QWORD *)&a2[1].nRef;
    v13 = v12 + 8 * v8;
    *(_DWORD *)v13 = 1;
    *(_BYTE *)(v13 + 4) = 1;
    v14 = v12 + 8 * v7;
    *(_DWORD *)v14 = 2;
    *(_BYTE *)(v14 + 4) = 1;
    a2[2].zErrMsg = (char *)0x3FF0000000000000;
    a2[3].pModule = (const sqlite3_module *)100;
    LODWORD(a2[1].zErrMsg) = 2;
    if ((v6 & 0x80000000) == 0)
    {
      v15 = v12 + 8 * v6;
      *(_DWORD *)v15 = 3;
      *(_BYTE *)(v15 + 4) = 1;
      LODWORD(a2[1].zErrMsg) = 3;
    }
  }
  return 0;
}

uint64_t degas::arrayDisconnect(degas *this, sqlite3_vtab *a2)
{
  sqlite3_free(this);
  return 0;
}

uint64_t degas::arrayOpen(degas *this, sqlite3_vtab *a2, sqlite3_vtab_cursor **a3)
{
  _QWORD *v4;
  _QWORD *v5;
  uint64_t result;

  v4 = sqlite3_malloc(40);
  if (!v4)
    return 7;
  v5 = v4;
  result = 0;
  v5[4] = 0;
  *(_OWORD *)v5 = 0u;
  *((_OWORD *)v5 + 1) = 0u;
  a2->pModule = (const sqlite3_module *)v5;
  return result;
}

uint64_t degas::arrayClose(degas *this, sqlite3_vtab_cursor *a2)
{
  sqlite3_free(this);
  return 0;
}

uint64_t degas::arrayFilter(degas *this, sqlite3_vtab_cursor *a2, int a3, const char *a4, sqlite3_value **a5, sqlite3_value **a6)
{
  int v8;
  sqlite3_int64 v9;
  const unsigned __int8 *v10;
  uint64_t v11;
  uint64_t result;

  if ((_DWORD)a2)
  {
    v8 = (int)a2;
    v9 = (sqlite3_int64)sqlite3_value_pointer(*a5, (const char *)degas::kArrayPointerTypeName);
    *((_QWORD *)this + 2) = v9;
    if (v9)
      v9 = sqlite3_value_int64(a5[1]);
    *((_QWORD *)this + 3) = v9;
    if (v8 > 2)
    {
      v10 = sqlite3_value_text(a5[2]);
      v11 = 0;
      while (sqlite3_stricmp((const char *)v10, degas::azType[v11]))
      {
        if (++v11 == 4)
        {
          *(_QWORD *)(*(_QWORD *)this + 16) = sqlite3_mprintf("unknown datatype: %Q", v10);
          return 1;
        }
      }
      *((_BYTE *)this + 32) = v11;
    }
    else
    {
      *((_BYTE *)this + 32) = 0;
    }
  }
  else
  {
    *((_QWORD *)this + 2) = 0;
    *((_QWORD *)this + 3) = 0;
  }
  result = 0;
  *((_QWORD *)this + 1) = 1;
  return result;
}

uint64_t degas::arrayNext(degas *this, sqlite3_vtab_cursor *a2)
{
  ++*((_QWORD *)this + 1);
  return 0;
}

BOOL degas::arrayEof(degas *this, sqlite3_vtab_cursor *a2)
{
  return *((_QWORD *)this + 1) > *((_QWORD *)this + 3);
}

uint64_t degas::arrayColumn(degas *this, sqlite3_vtab_cursor *a2, sqlite3_context *a3)
{
  sqlite3_int64 v3;
  char *v4;
  sqlite3_context *v5;
  const char *v6;
  uint64_t v7;
  const char *v9;

  if ((_DWORD)a3 != 1)
  {
    if ((_DWORD)a3 == 3)
    {
      v4 = degas::azType[*((unsigned __int8 *)this + 32)];
      v5 = (sqlite3_context *)a2;
      v6 = v4;
      v7 = 0;
LABEL_7:
      sqlite3_result_text(v5, v6, -1, (void (__cdecl *)(void *))v7);
    }
    else if ((_DWORD)a3 == 2)
    {
      v3 = *((_QWORD *)this + 3);
LABEL_5:
      sqlite3_result_int64((sqlite3_context *)a2, v3);
    }
    else
    {
      switch(*((_BYTE *)this + 32))
      {
        case 0:
          sqlite3_result_int((sqlite3_context *)a2, *(_DWORD *)(*((_QWORD *)this + 2) + 4 * *((_QWORD *)this + 1) - 4));
          break;
        case 1:
          v3 = *(_QWORD *)(*((_QWORD *)this + 2) + 8 * *((_QWORD *)this + 1) - 8);
          goto LABEL_5;
        case 2:
          sqlite3_result_double((sqlite3_context *)a2, *(double *)(*((_QWORD *)this + 2) + 8 * *((_QWORD *)this + 1) - 8));
          break;
        case 3:
          v9 = *(const char **)(*((_QWORD *)this + 2) + 8 * *((_QWORD *)this + 1) - 8);
          v5 = (sqlite3_context *)a2;
          v6 = v9;
          v7 = -1;
          goto LABEL_7;
        default:
          v3 = 0;
          goto LABEL_5;
      }
    }
  }
  return 0;
}

uint64_t degas::arrayRowid(degas *this, sqlite3_vtab_cursor *a2, uint64_t *a3)
{
  a2->pVtab = *(sqlite3_vtab **)((char *)this + 8);
  return 0;
}

void degas::MetadataTable::~MetadataTable(degas::MetadataTable *this)
{
  *(_QWORD *)this = off_1E83E43A8;
  *((_QWORD *)this + 4) = 0;
  if (*((char *)this + 31) < 0)
    operator delete(*((void **)this + 1));
}

{
  *(_QWORD *)this = off_1E83E43A8;
  *((_QWORD *)this + 4) = 0;
  if (*((char *)this + 31) < 0)
    operator delete(*((void **)this + 1));
  JUMPOUT(0x1CAA4ADC8);
}

{
  *(_QWORD *)this = off_1E83E43A8;
  *((_QWORD *)this + 4) = 0;
  if (*((char *)this + 31) < 0)
    operator delete(*((void **)this + 1));
}

uint64_t degas::MetadataTable::createTable(degas::MetadataTable *this)
{
  sqlite3 *v1;
  uint64_t v2;
  void *__p[2];
  char v5;
  sqlite3_stmt *ppStmt[3];

  v1 = (sqlite3 *)*((_QWORD *)this + 4);
  std::string::basic_string[abi:ne180100]<0>(__p, "create table GraphMetadata (metadataKey integer primary key autoincrement, value text)");
  degas::Statement::Statement(ppStmt, v1, (uint64_t)__p);
  if (v5 < 0)
    operator delete(__p[0]);
  v2 = degas::Statement::update(ppStmt);
  degas::Statement::~Statement((degas::Statement *)ppStmt);
  return v2;
}

void sub_1CA174440(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15)
{
  degas::Statement::~Statement((degas::Statement *)&a15);
  _Unwind_Resume(a1);
}

uint64_t degas::MetadataTable::deleteEntry(degas::MetadataTable *this, sqlite3_int64 a2)
{
  unsigned int v3;
  uint64_t v4;
  uint64_t *Statement;
  _QWORD v7[5];

  v3 = (*((unsigned __int8 *)this + 48) << 16) | 0x500;
  v4 = *((_QWORD *)this + 5);
  v7[0] = MEMORY[0x1E0C809B0];
  v7[1] = 0x40000000;
  v7[2] = ___ZNK5degas13MetadataTable15deleteStatementEv_block_invoke;
  v7[3] = &__block_descriptor_tmp_4;
  v7[4] = this;
  Statement = degas::StatementCache::getStatement(v4, v3, (uint64_t)v7);
  degas::Statement::bindInteger((sqlite3_stmt **)*Statement, 1, a2);
  return degas::Statement::update((sqlite3_stmt **)*Statement);
}

uint64_t *degas::MetadataTable::deleteStatement(degas::MetadataTable *this)
{
  unsigned int v1;
  uint64_t v2;
  _QWORD v4[5];

  v1 = (*((unsigned __int8 *)this + 48) << 16) | 0x500;
  v2 = *((_QWORD *)this + 5);
  v4[0] = MEMORY[0x1E0C809B0];
  v4[1] = 0x40000000;
  v4[2] = ___ZNK5degas13MetadataTable15deleteStatementEv_block_invoke;
  v4[3] = &__block_descriptor_tmp_4;
  v4[4] = this;
  return degas::StatementCache::getStatement(v2, v1, (uint64_t)v4);
}

void ___ZNK5degas13MetadataTable15deleteStatementEv_block_invoke(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v3;
  sqlite3_stmt **v4;
  sqlite3 *v5;
  void *__p[2];
  char v7;

  v3 = *(_QWORD *)(a1 + 32);
  v4 = (sqlite3_stmt **)operator new();
  v5 = *(sqlite3 **)(v3 + 32);
  std::string::basic_string[abi:ne180100]<0>(__p, "delete from GraphMetadata metadataKey=?1");
  degas::Statement::Statement(v4, v5, (uint64_t)__p);
  std::shared_ptr<degas::Statement>::shared_ptr[abi:ne180100]<degas::Statement,void>(a2, (uint64_t)v4);
  if (v7 < 0)
    operator delete(__p[0]);
}

void sub_1CA1745EC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  uint64_t v15;

  MEMORY[0x1CAA4ADC8](v15, 0x1020C4062D53EE8);
  _Unwind_Resume(a1);
}

degas::MetadataTable *degas::MetadataTable::MetadataTable(degas::MetadataTable *this, sqlite3 *a2, degas::StatementCache *a3)
{
  std::string *v6;
  int v7;
  void *__p[2];
  uint64_t v10;

  std::string::basic_string[abi:ne180100]<0>(__p, "GraphMetadata");
  *(_QWORD *)this = off_1E83E43A8;
  v6 = (std::string *)((char *)this + 8);
  if (SHIBYTE(v10) < 0)
  {
    std::string::__init_copy_ctor_external(v6, (const std::string::value_type *)__p[0], (std::string::size_type)__p[1]);
    v7 = SHIBYTE(v10);
    *((_QWORD *)this + 4) = a2;
    *((_QWORD *)this + 5) = a3;
    if (v7 < 0)
      operator delete(__p[0]);
  }
  else
  {
    *(_OWORD *)&v6->__r_.__value_.__l.__data_ = *(_OWORD *)__p;
    *((_QWORD *)this + 3) = v10;
    *((_QWORD *)this + 4) = a2;
    *((_QWORD *)this + 5) = a3;
  }
  *(_QWORD *)this = off_1E83E28F0;
  *((_BYTE *)this + 48) = 5;
  return this;
}

void sub_1CA1746DC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t *degas::MetadataTable::upsertStatement(degas::MetadataTable *this)
{
  unsigned int v1;
  uint64_t v2;
  _QWORD v4[5];

  v1 = (*((unsigned __int8 *)this + 48) << 16) | 0x300;
  v2 = *((_QWORD *)this + 5);
  v4[0] = MEMORY[0x1E0C809B0];
  v4[1] = 0x40000000;
  v4[2] = ___ZNK5degas13MetadataTable15upsertStatementEv_block_invoke;
  v4[3] = &__block_descriptor_tmp_1079;
  v4[4] = this;
  return degas::StatementCache::getStatement(v2, v1, (uint64_t)v4);
}

void ___ZNK5degas13MetadataTable15upsertStatementEv_block_invoke(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v3;
  sqlite3_stmt **v4;
  sqlite3 *v5;
  void *__p[2];
  char v7;

  v3 = *(_QWORD *)(a1 + 32);
  v4 = (sqlite3_stmt **)operator new();
  v5 = *(sqlite3 **)(v3 + 32);
  std::string::basic_string[abi:ne180100]<0>(__p, "insert or replace into GraphMetadata (metadataKey, value) values (?1, ?2)");
  degas::Statement::Statement(v4, v5, (uint64_t)__p);
  std::shared_ptr<degas::Statement>::shared_ptr[abi:ne180100]<degas::Statement,void>(a2, (uint64_t)v4);
  if (v7 < 0)
    operator delete(__p[0]);
}

void sub_1CA174834(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  uint64_t v15;

  MEMORY[0x1CAA4ADC8](v15, 0x1020C4062D53EE8);
  _Unwind_Resume(a1);
}

uint64_t *degas::MetadataTable::readByIdentifierStatement(degas::MetadataTable *this)
{
  unsigned int v1;
  uint64_t v2;
  _QWORD v4[5];

  v1 = (*((unsigned __int8 *)this + 48) << 16) | 0x600;
  v2 = *((_QWORD *)this + 5);
  v4[0] = MEMORY[0x1E0C809B0];
  v4[1] = 0x40000000;
  v4[2] = ___ZNK5degas13MetadataTable25readByIdentifierStatementEv_block_invoke;
  v4[3] = &__block_descriptor_tmp_6;
  v4[4] = this;
  return degas::StatementCache::getStatement(v2, v1, (uint64_t)v4);
}

void ___ZNK5degas13MetadataTable25readByIdentifierStatementEv_block_invoke(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v3;
  sqlite3_stmt **v4;
  sqlite3 *v5;
  void *__p[2];
  char v7;

  v3 = *(_QWORD *)(a1 + 32);
  v4 = (sqlite3_stmt **)operator new();
  v5 = *(sqlite3 **)(v3 + 32);
  std::string::basic_string[abi:ne180100]<0>(__p, "select metadataKey, value from GraphMetadata where metadataKey=?1");
  degas::Statement::Statement(v4, v5, (uint64_t)__p);
  std::shared_ptr<degas::Statement>::shared_ptr[abi:ne180100]<degas::Statement,void>(a2, (uint64_t)v4);
  if (v7 < 0)
    operator delete(__p[0]);
}

void sub_1CA174974(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  uint64_t v15;

  MEMORY[0x1CAA4ADC8](v15, 0x1020C4062D53EE8);
  _Unwind_Resume(a1);
}

uint64_t degas::MetadataTable::insertOrUpdate(degas::MetadataTable *this, sqlite3_int64 a2, sqlite3_int64 a3)
{
  unsigned int v5;
  uint64_t v6;
  uint64_t *Statement;
  _QWORD v9[5];

  v5 = (*((unsigned __int8 *)this + 48) << 16) | 0x300;
  v6 = *((_QWORD *)this + 5);
  v9[0] = MEMORY[0x1E0C809B0];
  v9[1] = 0x40000000;
  v9[2] = ___ZNK5degas13MetadataTable15upsertStatementEv_block_invoke;
  v9[3] = &__block_descriptor_tmp_1079;
  v9[4] = this;
  Statement = degas::StatementCache::getStatement(v6, v5, (uint64_t)v9);
  degas::Statement::bindInteger((sqlite3_stmt **)*Statement, 1, a2);
  degas::Statement::bindInteger((sqlite3_stmt **)*Statement, 2, a3);
  return degas::Statement::update((sqlite3_stmt **)*Statement);
}

uint64_t degas::MetadataTable::insertOrUpdate(degas::MetadataTable *this, sqlite3_int64 a2, double a3)
{
  unsigned int v5;
  uint64_t v6;
  uint64_t *Statement;
  _QWORD v9[5];

  v5 = (*((unsigned __int8 *)this + 48) << 16) | 0x300;
  v6 = *((_QWORD *)this + 5);
  v9[0] = MEMORY[0x1E0C809B0];
  v9[1] = 0x40000000;
  v9[2] = ___ZNK5degas13MetadataTable15upsertStatementEv_block_invoke;
  v9[3] = &__block_descriptor_tmp_1079;
  v9[4] = this;
  Statement = degas::StatementCache::getStatement(v6, v5, (uint64_t)v9);
  degas::Statement::bindInteger((sqlite3_stmt **)*Statement, 1, a2);
  degas::Statement::bindDouble((sqlite3_stmt **)*Statement, 2, a3);
  return degas::Statement::update((sqlite3_stmt **)*Statement);
}

uint64_t degas::MetadataTable::insertOrUpdate(uint64_t a1, sqlite3_int64 a2, uint64_t *a3)
{
  unsigned int v5;
  uint64_t v6;
  uint64_t *Statement;
  _QWORD v9[5];

  v5 = (*(unsigned __int8 *)(a1 + 48) << 16) | 0x300;
  v6 = *(_QWORD *)(a1 + 40);
  v9[0] = MEMORY[0x1E0C809B0];
  v9[1] = 0x40000000;
  v9[2] = ___ZNK5degas13MetadataTable15upsertStatementEv_block_invoke;
  v9[3] = &__block_descriptor_tmp_1079;
  v9[4] = a1;
  Statement = degas::StatementCache::getStatement(v6, v5, (uint64_t)v9);
  degas::Statement::bindInteger((sqlite3_stmt **)*Statement, 1, a2);
  degas::Statement::bindString(*Statement, 2, a3);
  return degas::Statement::update((sqlite3_stmt **)*Statement);
}

uint64_t *degas::MetadataTable::prepareStatementToReadByIdentifier(degas::MetadataTable *this, sqlite3_int64 a2)
{
  unsigned int v3;
  uint64_t v4;
  uint64_t *Statement;
  _QWORD v7[5];

  v3 = (*((unsigned __int8 *)this + 48) << 16) | 0x600;
  v4 = *((_QWORD *)this + 5);
  v7[0] = MEMORY[0x1E0C809B0];
  v7[1] = 0x40000000;
  v7[2] = ___ZNK5degas13MetadataTable25readByIdentifierStatementEv_block_invoke;
  v7[3] = &__block_descriptor_tmp_6;
  v7[4] = this;
  Statement = degas::StatementCache::getStatement(v4, v3, (uint64_t)v7);
  degas::Statement::bindInteger((sqlite3_stmt **)*Statement, 1, a2);
  return Statement;
}

degas::MetadataCursor *degas::MetadataCursor::MetadataCursor(degas::MetadataCursor *this, sqlite3_int64 a2, const degas::MetadataTable *a3)
{
  unsigned int v5;
  uint64_t v6;
  uint64_t *Statement;
  uint64_t v8;
  unint64_t *v9;
  unint64_t v10;
  _QWORD v12[5];

  v5 = (*((unsigned __int8 *)a3 + 48) << 16) | 0x600;
  v6 = *((_QWORD *)a3 + 5);
  v12[0] = MEMORY[0x1E0C809B0];
  v12[1] = 0x40000000;
  v12[2] = ___ZNK5degas13MetadataTable25readByIdentifierStatementEv_block_invoke;
  v12[3] = &__block_descriptor_tmp_6;
  v12[4] = a3;
  Statement = degas::StatementCache::getStatement(v6, v5, (uint64_t)v12);
  degas::Statement::bindInteger((sqlite3_stmt **)*Statement, 1, a2);
  *(_QWORD *)this = *Statement;
  v8 = Statement[1];
  *((_QWORD *)this + 1) = v8;
  if (v8)
  {
    v9 = (unint64_t *)(v8 + 8);
    do
      v10 = __ldxr(v9);
    while (__stxr(v10 + 1, v9));
  }
  return this;
}

sqlite3_int64 degas::MetadataCursor::metadataKey(sqlite3_stmt ***this)
{
  return sqlite3_column_int64(**this, 0);
}

sqlite3_int64 degas::MetadataCursor::integerValue(sqlite3_stmt ***this)
{
  return sqlite3_column_int64(**this, 1);
}

double degas::MetadataCursor::realValue(sqlite3_stmt ***this)
{
  return sqlite3_column_double(**this, 1);
}

void degas::MetadataCursor::stringValue(sqlite3_stmt ***a1, uint64_t a2)
{
  degas::Statement::stringColumnValue(*a1, 1, a2);
}

void sub_1CA174E88(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1CA174EE8(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1CA174F44(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1CA174FF4(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1CA17505C(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1CA1751E0(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

uint64_t degas::LabelIndex::commitTransaction(degas::LabelIndex *this)
{
  return 0;
}

void degas::LabelIndex::addNode(degas::LabelIndex *this)
{
  uint8_t v1[16];

  if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_FAULT))
  {
    *(_WORD *)v1 = 0;
    _os_log_fault_impl(&dword_1CA0A5000, MEMORY[0x1E0C81028], OS_LOG_TYPE_FAULT, "attempt to mutate immutable label index", v1, 2u);
  }
}

void degas::LabelIndex::removeNode(degas::LabelIndex *this)
{
  uint8_t v1[16];

  if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_FAULT))
  {
    *(_WORD *)v1 = 0;
    _os_log_fault_impl(&dword_1CA0A5000, MEMORY[0x1E0C81028], OS_LOG_TYPE_FAULT, "attempt to mutate immutable label index", v1, 2u);
  }
}

void degas::LabelIndex::addEdge(degas::LabelIndex *this)
{
  uint8_t v1[16];

  if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_FAULT))
  {
    *(_WORD *)v1 = 0;
    _os_log_fault_impl(&dword_1CA0A5000, MEMORY[0x1E0C81028], OS_LOG_TYPE_FAULT, "attempt to mutate immutable label index", v1, 2u);
  }
}

void degas::LabelIndex::removeEdge(degas::LabelIndex *this)
{
  uint8_t v1[16];

  if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_FAULT))
  {
    *(_WORD *)v1 = 0;
    _os_log_fault_impl(&dword_1CA0A5000, MEMORY[0x1E0C81028], OS_LOG_TYPE_FAULT, "attempt to mutate immutable label index", v1, 2u);
  }
}

void degas::LabelIndex::removeNodes(degas::LabelIndex *this, const Bitmap *a2, const Bitmap *a3)
{
  uint8_t v3[16];

  if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_FAULT))
  {
    *(_WORD *)v3 = 0;
    _os_log_fault_impl(&dword_1CA0A5000, MEMORY[0x1E0C81028], OS_LOG_TYPE_FAULT, "attempt to mutate immutable label index", v3, 2u);
  }
}

void degas::LabelIndex::removeEdges(degas::LabelIndex *this, const Bitmap *a2, const Bitmap *a3)
{
  uint8_t v3[16];

  if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_FAULT))
  {
    *(_WORD *)v3 = 0;
    _os_log_fault_impl(&dword_1CA0A5000, MEMORY[0x1E0C81028], OS_LOG_TYPE_FAULT, "attempt to mutate immutable label index", v3, 2u);
  }
}

void degas::LabelIndex_Immediate::~LabelIndex_Immediate(degas::LabelIndex_Immediate *this)
{
  JUMPOUT(0x1CAA4ADC8);
}

void degas::LabelIndex_Immediate::nodeIdentifiersForLabelIdentifier(const degas::LabelTable **this, sqlite3_int64 a2, degas::Bitmap *a3)
{
  degas::Statement *v4[2];

  degas::LabelCursor::LabelCursor((degas::LabelCursor *)v4, a2, this[1]);
  while (degas::Statement::next((sqlite3_stmt **)v4[0]) == 1)
    degas::Statement::bitmapColumnValue((sqlite3_stmt **)v4[0], 2, a3);
  degas::Cursor::~Cursor(v4);
}

void sub_1CA17552C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, degas::Statement *a9)
{
  degas::Cursor::~Cursor(&a9);
  _Unwind_Resume(a1);
}

void degas::LabelIndex_Immediate::edgeIdentifiersForLabelIdentifier(const degas::LabelTable **this, sqlite3_int64 a2, degas::Bitmap *a3)
{
  degas::Statement *v4[2];

  degas::LabelCursor::LabelCursor((degas::LabelCursor *)v4, a2, this[1]);
  while (degas::Statement::next((sqlite3_stmt **)v4[0]) == 1)
    degas::Statement::bitmapColumnValue((sqlite3_stmt **)v4[0], 3, a3);
  degas::Cursor::~Cursor(v4);
}

void sub_1CA17559C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, degas::Statement *a9)
{
  degas::Cursor::~Cursor(&a9);
  _Unwind_Resume(a1);
}

void degas::LabelIndex_Immediate::allNodeIdentifiers(const degas::LabelTable **this, degas::Bitmap *a2)
{
  __int128 v3;
  _BYTE v4[40];
  degas::Statement *v5[2];
  void **v6;

  degas::LabelCursor::LabelCursor((degas::LabelCursor *)v5, this[1]);
  while (degas::Statement::next((sqlite3_stmt **)v5[0]) == 1)
  {
    v3 = 0u;
    memset(v4, 0, 25);
    degas::Statement::bitmapColumnValue((sqlite3_stmt **)v5[0], 2, (degas::Bitmap *)&v3);
    degas::Bitmap::unionWith<degas::Bitmap>(a2, (uint64_t)&v3);
    v6 = (void **)v4;
    std::vector<degas::BitsetPtr>::__destroy_vector::operator()[abi:ne180100](&v6);
  }
  degas::Cursor::~Cursor(v5);
}

void sub_1CA175638(_Unwind_Exception *a1)
{
  uint64_t v1;

  degas::Cursor::~Cursor((degas::Statement **)(v1 - 40));
  _Unwind_Resume(a1);
}

void degas::LabelIndex_Immediate::allEdgeIdentifiers(const degas::LabelTable **this, degas::Bitmap *a2)
{
  __int128 v3;
  _BYTE v4[40];
  degas::Statement *v5[2];
  void **v6;

  degas::LabelCursor::LabelCursor((degas::LabelCursor *)v5, this[1]);
  while (degas::Statement::next((sqlite3_stmt **)v5[0]) == 1)
  {
    v3 = 0u;
    memset(v4, 0, 25);
    degas::Statement::bitmapColumnValue((sqlite3_stmt **)v5[0], 3, (degas::Bitmap *)&v3);
    degas::Bitmap::unionWith<degas::Bitmap>(a2, (uint64_t)&v3);
    v6 = (void **)v4;
    std::vector<degas::BitsetPtr>::__destroy_vector::operator()[abi:ne180100](&v6);
  }
  degas::Cursor::~Cursor(v5);
}

void sub_1CA1756E8(_Unwind_Exception *a1)
{
  uint64_t v1;

  degas::Cursor::~Cursor((degas::Statement **)(v1 - 40));
  _Unwind_Resume(a1);
}

void degas::LabelIndex_Immediate::addNode(const degas::LabelTable **this, sqlite3_int64 a2, unint64_t a3)
{
  __int128 v6;
  _BYTE v7[32];
  __int128 v8;
  _BYTE v9[40];
  degas::Statement *v10[2];
  void **v11;

  degas::LabelCursor::LabelCursor((degas::LabelCursor *)v10, a2, this[1]);
  v8 = 0u;
  memset(v9, 0, 25);
  v6 = 0u;
  memset(v7, 0, 25);
  while (degas::Statement::next((sqlite3_stmt **)v10[0]) == 1)
  {
    degas::Statement::bitmapColumnValue((sqlite3_stmt **)v10[0], 2, (degas::Bitmap *)&v8);
    degas::Statement::bitmapColumnValue((sqlite3_stmt **)v10[0], 3, (degas::Bitmap *)&v6);
  }
  if ((degas::Bitmap::isSet((degas::Bitmap *)&v8, a3) & 1) == 0)
  {
    degas::Bitmap::setBit((degas::Bitmap *)&v8, a3);
    degas::LabelTable::update(this[1], a2, (const degas::Bitmap *)&v8, (const degas::Bitmap *)&v6);
  }
  v11 = (void **)v7;
  std::vector<degas::BitsetPtr>::__destroy_vector::operator()[abi:ne180100](&v11);
  *(_QWORD *)&v6 = v9;
  std::vector<degas::BitsetPtr>::__destroy_vector::operator()[abi:ne180100]((void ***)&v6);
  degas::Cursor::~Cursor(v10);
}

void sub_1CA1757F8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17)
{
  uint64_t v17;

  *(_QWORD *)(v17 - 40) = &a11;
  std::vector<degas::BitsetPtr>::__destroy_vector::operator()[abi:ne180100]((void ***)(v17 - 40));
  a9 = (void **)&a17;
  std::vector<degas::BitsetPtr>::__destroy_vector::operator()[abi:ne180100](&a9);
  degas::Cursor::~Cursor((degas::Statement **)(v17 - 56));
  _Unwind_Resume(a1);
}

void degas::LabelIndex_Immediate::removeNode(const degas::LabelTable **this, sqlite3_int64 a2, unint64_t a3)
{
  __int128 v6;
  _BYTE v7[32];
  __int128 v8;
  _BYTE v9[40];
  degas::Statement *v10[2];
  void **v11;

  degas::LabelCursor::LabelCursor((degas::LabelCursor *)v10, a2, this[1]);
  v8 = 0u;
  memset(v9, 0, 25);
  v6 = 0u;
  memset(v7, 0, 25);
  while (degas::Statement::next((sqlite3_stmt **)v10[0]) == 1)
  {
    degas::Statement::bitmapColumnValue((sqlite3_stmt **)v10[0], 2, (degas::Bitmap *)&v8);
    degas::Statement::bitmapColumnValue((sqlite3_stmt **)v10[0], 3, (degas::Bitmap *)&v6);
  }
  if (degas::Bitmap::isSet((degas::Bitmap *)&v8, a3))
  {
    degas::Bitmap::clearBit((degas::BitsetPtr **)&v8, a3);
    degas::LabelTable::update(this[1], a2, (const degas::Bitmap *)&v8, (const degas::Bitmap *)&v6);
  }
  v11 = (void **)v7;
  std::vector<degas::BitsetPtr>::__destroy_vector::operator()[abi:ne180100](&v11);
  *(_QWORD *)&v6 = v9;
  std::vector<degas::BitsetPtr>::__destroy_vector::operator()[abi:ne180100]((void ***)&v6);
  degas::Cursor::~Cursor(v10);
}

void sub_1CA175920(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17)
{
  uint64_t v17;

  *(_QWORD *)(v17 - 40) = &a11;
  std::vector<degas::BitsetPtr>::__destroy_vector::operator()[abi:ne180100]((void ***)(v17 - 40));
  a9 = (void **)&a17;
  std::vector<degas::BitsetPtr>::__destroy_vector::operator()[abi:ne180100](&a9);
  degas::Cursor::~Cursor((degas::Statement **)(v17 - 56));
  _Unwind_Resume(a1);
}

void degas::LabelIndex_Immediate::addEdge(const degas::LabelTable **this, sqlite3_int64 a2, unint64_t a3)
{
  __int128 v6;
  _BYTE v7[32];
  __int128 v8;
  _BYTE v9[40];
  degas::Statement *v10[2];
  void **v11;

  degas::LabelCursor::LabelCursor((degas::LabelCursor *)v10, a2, this[1]);
  v8 = 0u;
  memset(v9, 0, 25);
  v6 = 0u;
  memset(v7, 0, 25);
  while (degas::Statement::next((sqlite3_stmt **)v10[0]) == 1)
  {
    degas::Statement::bitmapColumnValue((sqlite3_stmt **)v10[0], 2, (degas::Bitmap *)&v8);
    degas::Statement::bitmapColumnValue((sqlite3_stmt **)v10[0], 3, (degas::Bitmap *)&v6);
  }
  if ((degas::Bitmap::isSet((degas::Bitmap *)&v6, a3) & 1) == 0)
  {
    degas::Bitmap::setBit((degas::Bitmap *)&v6, a3);
    degas::LabelTable::update(this[1], a2, (const degas::Bitmap *)&v8, (const degas::Bitmap *)&v6);
  }
  v11 = (void **)v7;
  std::vector<degas::BitsetPtr>::__destroy_vector::operator()[abi:ne180100](&v11);
  *(_QWORD *)&v6 = v9;
  std::vector<degas::BitsetPtr>::__destroy_vector::operator()[abi:ne180100]((void ***)&v6);
  degas::Cursor::~Cursor(v10);
}

void sub_1CA175A48(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17)
{
  uint64_t v17;

  *(_QWORD *)(v17 - 40) = &a11;
  std::vector<degas::BitsetPtr>::__destroy_vector::operator()[abi:ne180100]((void ***)(v17 - 40));
  a9 = (void **)&a17;
  std::vector<degas::BitsetPtr>::__destroy_vector::operator()[abi:ne180100](&a9);
  degas::Cursor::~Cursor((degas::Statement **)(v17 - 56));
  _Unwind_Resume(a1);
}

void degas::LabelIndex_Immediate::removeEdge(const degas::LabelTable **this, sqlite3_int64 a2, unint64_t a3)
{
  __int128 v6;
  _BYTE v7[32];
  __int128 v8;
  _BYTE v9[40];
  degas::Statement *v10[2];
  void **v11;

  degas::LabelCursor::LabelCursor((degas::LabelCursor *)v10, a2, this[1]);
  v8 = 0u;
  memset(v9, 0, 25);
  v6 = 0u;
  memset(v7, 0, 25);
  while (degas::Statement::next((sqlite3_stmt **)v10[0]) == 1)
  {
    degas::Statement::bitmapColumnValue((sqlite3_stmt **)v10[0], 2, (degas::Bitmap *)&v8);
    degas::Statement::bitmapColumnValue((sqlite3_stmt **)v10[0], 3, (degas::Bitmap *)&v6);
  }
  if (degas::Bitmap::isSet((degas::Bitmap *)&v6, a3))
  {
    degas::Bitmap::clearBit((degas::BitsetPtr **)&v6, a3);
    degas::LabelTable::update(this[1], a2, (const degas::Bitmap *)&v8, (const degas::Bitmap *)&v6);
  }
  v11 = (void **)v7;
  std::vector<degas::BitsetPtr>::__destroy_vector::operator()[abi:ne180100](&v11);
  *(_QWORD *)&v6 = v9;
  std::vector<degas::BitsetPtr>::__destroy_vector::operator()[abi:ne180100]((void ***)&v6);
  degas::Cursor::~Cursor(v10);
}

void sub_1CA175B70(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17)
{
  uint64_t v17;

  *(_QWORD *)(v17 - 40) = &a11;
  std::vector<degas::BitsetPtr>::__destroy_vector::operator()[abi:ne180100]((void ***)(v17 - 40));
  a9 = (void **)&a17;
  std::vector<degas::BitsetPtr>::__destroy_vector::operator()[abi:ne180100](&a9);
  degas::Cursor::~Cursor((degas::Statement **)(v17 - 56));
  _Unwind_Resume(a1);
}

void degas::LabelIndex_Immediate::removeNodes(const degas::LabelTable **this, Bitmap *a2, const degas::Bitmap *a3)
{
  sqlite3_int64 v5;
  unint64_t v6;
  uint64_t *v7;
  uint64_t *v8;
  uint64_t v9;
  unsigned int v10;
  uint64_t v11;
  int32x4_t v12;
  unint64_t v13;
  uint64_t *v14;
  uint64_t *v15;
  uint64_t v16;
  unsigned int v17;
  uint64_t v18;
  int32x4_t v19;
  __int128 v20;
  _BYTE v21[32];
  __int128 v22;
  _QWORD v23[5];
  degas::Statement *v24[2];
  void **v25;

  degas::LabelCursor::LabelCursor((degas::LabelCursor *)v24, a2, this[1]);
  while (degas::Statement::next((sqlite3_stmt **)v24[0]) == 1)
  {
    v22 = 0u;
    memset(v23, 0, 25);
    v20 = 0u;
    memset(v21, 0, 25);
    v5 = sqlite3_column_int64(*(sqlite3_stmt **)v24[0], 0);
    degas::Statement::bitmapColumnValue((sqlite3_stmt **)v24[0], 2, (degas::Bitmap *)&v22);
    degas::Statement::bitmapColumnValue((sqlite3_stmt **)v24[0], 3, (degas::Bitmap *)&v20);
    v6 = v22;
    if ((_QWORD)v22 == 0xFFFFFFFFLL)
    {
      v7 = (uint64_t *)v23[0];
      v8 = (uint64_t *)v23[1];
      if (v23[0] == v23[1])
      {
        v6 = 0;
      }
      else
      {
        v6 = 0;
        do
        {
          v9 = *v7;
          v10 = *(_DWORD *)(*v7 + 4);
          if (v10 == -1)
          {
            v11 = 0;
            v12 = 0uLL;
            do
            {
              do
              {
                v12 = (int32x4_t)vpadalq_u16((uint32x4_t)v12, vpaddlq_u8((uint8x16_t)vcntq_s8(*(int8x16_t *)(v9 + 4 * v11 + 16))));
                v11 += 4;
              }
              while (v11 != 32);
              v11 = 0;
              v10 = vaddvq_s32(v12);
              v12 = 0uLL;
            }
            while (v10 == -1);
            *(_DWORD *)(v9 + 4) = v10;
          }
          v6 += v10;
          v7 += 2;
        }
        while (v7 != v8);
      }
      *(_QWORD *)&v22 = v6;
    }
    degas::Bitmap::diffWith<degas::Bitmap>((degas::Bitmap *)&v22, a3);
    v13 = v22;
    if ((_QWORD)v22 == 0xFFFFFFFFLL)
    {
      v14 = (uint64_t *)v23[0];
      v15 = (uint64_t *)v23[1];
      if (v23[0] == v23[1])
      {
        v13 = 0;
      }
      else
      {
        v13 = 0;
        do
        {
          v16 = *v14;
          v17 = *(_DWORD *)(*v14 + 4);
          if (v17 == -1)
          {
            v18 = 0;
            v19 = 0uLL;
            do
            {
              do
              {
                v19 = (int32x4_t)vpadalq_u16((uint32x4_t)v19, vpaddlq_u8((uint8x16_t)vcntq_s8(*(int8x16_t *)(v16 + 4 * v18 + 16))));
                v18 += 4;
              }
              while (v18 != 32);
              v18 = 0;
              v17 = vaddvq_s32(v19);
              v19 = 0uLL;
            }
            while (v17 == -1);
            *(_DWORD *)(v16 + 4) = v17;
          }
          v13 += v17;
          v14 += 2;
        }
        while (v14 != v15);
      }
      *(_QWORD *)&v22 = v13;
    }
    if (v13 < v6)
      degas::LabelTable::update(this[1], v5, (const degas::Bitmap *)&v22, (const degas::Bitmap *)&v20);
    v25 = (void **)v21;
    std::vector<degas::BitsetPtr>::__destroy_vector::operator()[abi:ne180100](&v25);
    *(_QWORD *)&v20 = v23;
    std::vector<degas::BitsetPtr>::__destroy_vector::operator()[abi:ne180100]((void ***)&v20);
  }
  degas::Cursor::~Cursor(v24);
}

void sub_1CA175DCC(_Unwind_Exception *a1)
{
  uint64_t v1;

  degas::Cursor::~Cursor((degas::Statement **)(v1 - 88));
  _Unwind_Resume(a1);
}

void degas::LabelIndex_Immediate::removeEdges(const degas::LabelTable **this, Bitmap *a2, const degas::Bitmap *a3)
{
  sqlite3_int64 v5;
  unint64_t v6;
  uint64_t *v7;
  uint64_t *v8;
  uint64_t v9;
  unsigned int v10;
  uint64_t v11;
  int32x4_t v12;
  unint64_t v13;
  uint64_t *v14;
  uint64_t *v15;
  uint64_t v16;
  unsigned int v17;
  uint64_t v18;
  int32x4_t v19;
  __int128 v20;
  _QWORD v21[4];
  __int128 v22;
  _BYTE v23[40];
  degas::Statement *v24[2];
  void **v25;

  degas::LabelCursor::LabelCursor((degas::LabelCursor *)v24, a2, this[1]);
  while (degas::Statement::next((sqlite3_stmt **)v24[0]) == 1)
  {
    v22 = 0u;
    memset(v23, 0, 25);
    v20 = 0u;
    memset(v21, 0, 25);
    v5 = sqlite3_column_int64(*(sqlite3_stmt **)v24[0], 0);
    degas::Statement::bitmapColumnValue((sqlite3_stmt **)v24[0], 2, (degas::Bitmap *)&v22);
    degas::Statement::bitmapColumnValue((sqlite3_stmt **)v24[0], 3, (degas::Bitmap *)&v20);
    v6 = v20;
    if ((_QWORD)v20 == 0xFFFFFFFFLL)
    {
      v7 = (uint64_t *)v21[0];
      v8 = (uint64_t *)v21[1];
      if (v21[0] == v21[1])
      {
        v6 = 0;
      }
      else
      {
        v6 = 0;
        do
        {
          v9 = *v7;
          v10 = *(_DWORD *)(*v7 + 4);
          if (v10 == -1)
          {
            v11 = 0;
            v12 = 0uLL;
            do
            {
              do
              {
                v12 = (int32x4_t)vpadalq_u16((uint32x4_t)v12, vpaddlq_u8((uint8x16_t)vcntq_s8(*(int8x16_t *)(v9 + 4 * v11 + 16))));
                v11 += 4;
              }
              while (v11 != 32);
              v11 = 0;
              v10 = vaddvq_s32(v12);
              v12 = 0uLL;
            }
            while (v10 == -1);
            *(_DWORD *)(v9 + 4) = v10;
          }
          v6 += v10;
          v7 += 2;
        }
        while (v7 != v8);
      }
      *(_QWORD *)&v20 = v6;
    }
    degas::Bitmap::diffWith<degas::Bitmap>((degas::Bitmap *)&v20, a3);
    v13 = v20;
    if ((_QWORD)v20 == 0xFFFFFFFFLL)
    {
      v14 = (uint64_t *)v21[0];
      v15 = (uint64_t *)v21[1];
      if (v21[0] == v21[1])
      {
        v13 = 0;
      }
      else
      {
        v13 = 0;
        do
        {
          v16 = *v14;
          v17 = *(_DWORD *)(*v14 + 4);
          if (v17 == -1)
          {
            v18 = 0;
            v19 = 0uLL;
            do
            {
              do
              {
                v19 = (int32x4_t)vpadalq_u16((uint32x4_t)v19, vpaddlq_u8((uint8x16_t)vcntq_s8(*(int8x16_t *)(v16 + 4 * v18 + 16))));
                v18 += 4;
              }
              while (v18 != 32);
              v18 = 0;
              v17 = vaddvq_s32(v19);
              v19 = 0uLL;
            }
            while (v17 == -1);
            *(_DWORD *)(v16 + 4) = v17;
          }
          v13 += v17;
          v14 += 2;
        }
        while (v14 != v15);
      }
      *(_QWORD *)&v20 = v13;
    }
    if (v13 < v6)
      degas::LabelTable::update(this[1], v5, (const degas::Bitmap *)&v22, (const degas::Bitmap *)&v20);
    v25 = (void **)v21;
    std::vector<degas::BitsetPtr>::__destroy_vector::operator()[abi:ne180100](&v25);
    *(_QWORD *)&v20 = v23;
    std::vector<degas::BitsetPtr>::__destroy_vector::operator()[abi:ne180100]((void ***)&v20);
  }
  degas::Cursor::~Cursor(v24);
}

void sub_1CA176020(_Unwind_Exception *a1)
{
  uint64_t v1;

  degas::Cursor::~Cursor((degas::Statement **)(v1 - 88));
  _Unwind_Resume(a1);
}

void degas::LabelIndex_Persisted::~LabelIndex_Persisted(char **this)
{
  *this = (char *)&off_1E83E2AB8;
  std::__tree<std::__value_type<unsigned long long,degas::Bitmap>,std::__map_value_compare<unsigned long long,std::__value_type<unsigned long long,degas::Bitmap>,std::less<unsigned long long>,true>,std::allocator<std::__value_type<unsigned long long,degas::Bitmap>>>::destroy(this[5]);
  std::__tree<std::__value_type<unsigned long long,degas::Bitmap>,std::__map_value_compare<unsigned long long,std::__value_type<unsigned long long,degas::Bitmap>,std::less<unsigned long long>,true>,std::allocator<std::__value_type<unsigned long long,degas::Bitmap>>>::destroy(this[2]);
}

{
  *this = (char *)&off_1E83E2AB8;
  std::__tree<std::__value_type<unsigned long long,degas::Bitmap>,std::__map_value_compare<unsigned long long,std::__value_type<unsigned long long,degas::Bitmap>,std::less<unsigned long long>,true>,std::allocator<std::__value_type<unsigned long long,degas::Bitmap>>>::destroy(this[5]);
  std::__tree<std::__value_type<unsigned long long,degas::Bitmap>,std::__map_value_compare<unsigned long long,std::__value_type<unsigned long long,degas::Bitmap>,std::less<unsigned long long>,true>,std::allocator<std::__value_type<unsigned long long,degas::Bitmap>>>::destroy(this[2]);
  JUMPOUT(0x1CAA4ADC8);
}

{
  *this = (char *)&off_1E83E2AB8;
  std::__tree<std::__value_type<unsigned long long,degas::Bitmap>,std::__map_value_compare<unsigned long long,std::__value_type<unsigned long long,degas::Bitmap>,std::less<unsigned long long>,true>,std::allocator<std::__value_type<unsigned long long,degas::Bitmap>>>::destroy(this[5]);
  std::__tree<std::__value_type<unsigned long long,degas::Bitmap>,std::__map_value_compare<unsigned long long,std::__value_type<unsigned long long,degas::Bitmap>,std::less<unsigned long long>,true>,std::allocator<std::__value_type<unsigned long long,degas::Bitmap>>>::destroy(this[2]);
}

void degas::LabelIndex_Persisted::nodeIdentifiersForLabelIdentifier(os_unfair_lock_s *this, unint64_t a2, degas::Bitmap *a3)
{
  os_unfair_lock_s *v6;
  degas::Bitmap *v7;
  _QWORD *v8;
  char *v9;
  _QWORD *v10;
  char *v11;
  unint64_t v12;
  BOOL v13;
  _QWORD *v14;
  __int128 *v15;

  v6 = this + 14;
  os_unfair_lock_lock(this + 14);
  v10 = *(_QWORD **)&this[4]._os_unfair_lock_opaque;
  v9 = (char *)&this[4];
  v8 = v10;
  if (!v10)
    goto LABEL_12;
  v11 = v9;
  do
  {
    v12 = v8[4];
    v13 = v12 >= a2;
    if (v12 >= a2)
      v14 = v8;
    else
      v14 = v8 + 1;
    if (v13)
      v11 = (char *)v8;
    v8 = (_QWORD *)*v14;
  }
  while (*v14);
  if (v11 != v9 && *((_QWORD *)v11 + 4) <= a2)
  {
    v15 = (__int128 *)(v11 + 40);
  }
  else
  {
LABEL_12:
    degas::Bitmap::emptyBitmap(v7);
    v15 = &degas::Bitmap::emptyBitmap(void)::bitmap;
  }
  degas::Bitmap::operator=(a3, v15);
  os_unfair_lock_unlock(v6);
}

void degas::LabelIndex_Persisted::edgeIdentifiersForLabelIdentifier(os_unfair_lock_s *this, unint64_t a2, degas::Bitmap *a3)
{
  os_unfair_lock_s *v6;
  degas::Bitmap *v7;
  _QWORD *v8;
  char *v9;
  _QWORD *v10;
  char *v11;
  unint64_t v12;
  BOOL v13;
  _QWORD *v14;
  __int128 *v15;

  v6 = this + 14;
  os_unfair_lock_lock(this + 14);
  v10 = *(_QWORD **)&this[10]._os_unfair_lock_opaque;
  v9 = (char *)&this[10];
  v8 = v10;
  if (!v10)
    goto LABEL_12;
  v11 = v9;
  do
  {
    v12 = v8[4];
    v13 = v12 >= a2;
    if (v12 >= a2)
      v14 = v8;
    else
      v14 = v8 + 1;
    if (v13)
      v11 = (char *)v8;
    v8 = (_QWORD *)*v14;
  }
  while (*v14);
  if (v11 != v9 && *((_QWORD *)v11 + 4) <= a2)
  {
    v15 = (__int128 *)(v11 + 40);
  }
  else
  {
LABEL_12:
    degas::Bitmap::emptyBitmap(v7);
    v15 = &degas::Bitmap::emptyBitmap(void)::bitmap;
  }
  degas::Bitmap::operator=(a3, v15);
  os_unfair_lock_unlock(v6);
}

void degas::LabelIndex_Persisted::allNodeIdentifiers(os_unfair_lock_s *this, degas::Bitmap *a2)
{
  os_unfair_lock_s *v4;
  degas::LabelIndex_Persisted *v5;
  degas::LabelIndex_Persisted *v6;
  degas::LabelIndex_Persisted *v7;
  BOOL v8;
  _OWORD v9[3];
  char v10;
  void **v11;

  v4 = this + 14;
  os_unfair_lock_lock(this + 14);
  v5 = *(degas::LabelIndex_Persisted **)&this[2]._os_unfair_lock_opaque;
  if (v5 != (degas::LabelIndex_Persisted *)&this[4])
  {
    do
    {
      v9[0] = *((_OWORD *)v5 + 2);
      memset(&v9[1], 0, 32);
      std::vector<degas::BitsetPtr>::__init_with_size[abi:ne180100]<degas::BitsetPtr*,degas::BitsetPtr*>((char *)&v9[1] + 8, *((__int128 **)v5 + 7), *((__int128 **)v5 + 8), (uint64_t)(*((_QWORD *)v5 + 8) - *((_QWORD *)v5 + 7)) >> 4);
      v10 = *((_BYTE *)v5 + 80);
      degas::Bitmap::unionWith<degas::Bitmap>(a2, (uint64_t)v9 + 8);
      v11 = (void **)&v9[1] + 1;
      std::vector<degas::BitsetPtr>::__destroy_vector::operator()[abi:ne180100](&v11);
      v6 = (degas::LabelIndex_Persisted *)*((_QWORD *)v5 + 1);
      if (v6)
      {
        do
        {
          v7 = v6;
          v6 = *(degas::LabelIndex_Persisted **)v6;
        }
        while (v6);
      }
      else
      {
        do
        {
          v7 = (degas::LabelIndex_Persisted *)*((_QWORD *)v5 + 2);
          v8 = *(_QWORD *)v7 == (_QWORD)v5;
          v5 = v7;
        }
        while (!v8);
      }
      v5 = v7;
    }
    while (v7 != (degas::LabelIndex_Persisted *)&this[4]);
  }
  os_unfair_lock_unlock(v4);
}

void sub_1CA1762F8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  va_list va;

  va_start(va, a8);
  std::vector<degas::BitsetPtr>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  _Unwind_Resume(a1);
}

void degas::LabelIndex_Persisted::allEdgeIdentifiers(os_unfair_lock_s *this, degas::Bitmap *a2)
{
  os_unfair_lock_s *v4;
  degas::LabelIndex_Persisted *v5;
  degas::LabelIndex_Persisted *v6;
  degas::LabelIndex_Persisted *v7;
  BOOL v8;
  _OWORD v9[3];
  char v10;
  void **v11;

  v4 = this + 14;
  os_unfair_lock_lock(this + 14);
  v5 = *(degas::LabelIndex_Persisted **)&this[8]._os_unfair_lock_opaque;
  if (v5 != (degas::LabelIndex_Persisted *)&this[10])
  {
    do
    {
      v9[0] = *((_OWORD *)v5 + 2);
      memset(&v9[1], 0, 32);
      std::vector<degas::BitsetPtr>::__init_with_size[abi:ne180100]<degas::BitsetPtr*,degas::BitsetPtr*>((char *)&v9[1] + 8, *((__int128 **)v5 + 7), *((__int128 **)v5 + 8), (uint64_t)(*((_QWORD *)v5 + 8) - *((_QWORD *)v5 + 7)) >> 4);
      v10 = *((_BYTE *)v5 + 80);
      degas::Bitmap::unionWith<degas::Bitmap>(a2, (uint64_t)v9 + 8);
      v11 = (void **)&v9[1] + 1;
      std::vector<degas::BitsetPtr>::__destroy_vector::operator()[abi:ne180100](&v11);
      v6 = (degas::LabelIndex_Persisted *)*((_QWORD *)v5 + 1);
      if (v6)
      {
        do
        {
          v7 = v6;
          v6 = *(degas::LabelIndex_Persisted **)v6;
        }
        while (v6);
      }
      else
      {
        do
        {
          v7 = (degas::LabelIndex_Persisted *)*((_QWORD *)v5 + 2);
          v8 = *(_QWORD *)v7 == (_QWORD)v5;
          v5 = v7;
        }
        while (!v8);
      }
      v5 = v7;
    }
    while (v7 != (degas::LabelIndex_Persisted *)&this[10]);
  }
  os_unfair_lock_unlock(v4);
}

void sub_1CA176400(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  va_list va;

  va_start(va, a8);
  std::vector<degas::BitsetPtr>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  _Unwind_Resume(a1);
}

void degas::LabelIndex_Persisted::resetIndex(os_unfair_lock_s *this)
{
  os_unfair_lock_s *v1;
  os_unfair_lock_s *v2;
  os_unfair_lock_s *v3;
  char *v4;

  v1 = this;
  v2 = this + 14;
  os_unfair_lock_lock(this + 14);
  v3 = v1 + 4;
  std::__tree<std::__value_type<unsigned long long,degas::Bitmap>,std::__map_value_compare<unsigned long long,std::__value_type<unsigned long long,degas::Bitmap>,std::less<unsigned long long>,true>,std::allocator<std::__value_type<unsigned long long,degas::Bitmap>>>::destroy(*(char **)&v1[4]._os_unfair_lock_opaque);
  v4 = *(char **)&v1[10]._os_unfair_lock_opaque;
  v1 += 10;
  *(_QWORD *)&v1[-8]._os_unfair_lock_opaque = v3;
  *(_QWORD *)&v3->_os_unfair_lock_opaque = 0;
  *(_QWORD *)&v1[-4]._os_unfair_lock_opaque = 0;
  std::__tree<std::__value_type<unsigned long long,degas::Bitmap>,std::__map_value_compare<unsigned long long,std::__value_type<unsigned long long,degas::Bitmap>,std::less<unsigned long long>,true>,std::allocator<std::__value_type<unsigned long long,degas::Bitmap>>>::destroy(v4);
  *(_QWORD *)&v1[-2]._os_unfair_lock_opaque = v1;
  *(_QWORD *)&v1->_os_unfair_lock_opaque = 0;
  *(_QWORD *)&v1[2]._os_unfair_lock_opaque = 0;
  LOBYTE(v1[5]._os_unfair_lock_opaque) = 0;
  os_unfair_lock_unlock(v2);
}

void std::__tree<std::__value_type<unsigned long long,degas::Bitmap>,std::__map_value_compare<unsigned long long,std::__value_type<unsigned long long,degas::Bitmap>,std::less<unsigned long long>,true>,std::allocator<std::__value_type<unsigned long long,degas::Bitmap>>>::destroy(char *a1)
{
  void **v2;

  if (a1)
  {
    std::__tree<std::__value_type<unsigned long long,degas::Bitmap>,std::__map_value_compare<unsigned long long,std::__value_type<unsigned long long,degas::Bitmap>,std::less<unsigned long long>,true>,std::allocator<std::__value_type<unsigned long long,degas::Bitmap>>>::destroy(*(_QWORD *)a1);
    std::__tree<std::__value_type<unsigned long long,degas::Bitmap>,std::__map_value_compare<unsigned long long,std::__value_type<unsigned long long,degas::Bitmap>,std::less<unsigned long long>,true>,std::allocator<std::__value_type<unsigned long long,degas::Bitmap>>>::destroy(*((_QWORD *)a1 + 1));
    v2 = (void **)(a1 + 56);
    std::vector<degas::BitsetPtr>::__destroy_vector::operator()[abi:ne180100](&v2);
    operator delete(a1);
  }
}

void degas::LabelIndex_Snapshot::~LabelIndex_Snapshot(char **this)
{
  degas::LabelIndex_Snapshot::~LabelIndex_Snapshot(this);
  JUMPOUT(0x1CAA4ADC8);
}

{
  *this = (char *)&off_1E83E2B48;
  std::__tree<std::__value_type<unsigned long long,degas::Bitmap>,std::__map_value_compare<unsigned long long,std::__value_type<unsigned long long,degas::Bitmap>,std::less<unsigned long long>,true>,std::allocator<std::__value_type<unsigned long long,degas::Bitmap>>>::destroy(this[8]);
  std::__tree<std::__value_type<unsigned long long,degas::Bitmap>,std::__map_value_compare<unsigned long long,std::__value_type<unsigned long long,degas::Bitmap>,std::less<unsigned long long>,true>,std::allocator<std::__value_type<unsigned long long,degas::Bitmap>>>::destroy(this[5]);
  std::shared_ptr<degas::Predicate>::~shared_ptr[abi:ne180100]((uint64_t)(this + 1));
}

_QWORD *degas::LabelIndex_Snapshot::nodeIdentifiersForLabelIdentifier(degas::LabelIndex_Snapshot *this, unint64_t a2, degas::Bitmap *a3)
{
  _QWORD *v6;
  _QWORD *v7;
  unint64_t v8;
  BOOL v9;
  _QWORD *v10;
  __int128 *v11;
  uint64_t v13;
  degas::LabelTable *v14;

  if (*((_BYTE *)this + 80))
  {
    v6 = (_QWORD *)*((_QWORD *)this + 5);
    if (!v6)
      goto LABEL_13;
    v7 = (_QWORD *)((char *)this + 40);
    do
    {
      v8 = v6[4];
      v9 = v8 >= a2;
      if (v8 >= a2)
        v10 = v6;
      else
        v10 = v6 + 1;
      if (v9)
        v7 = v6;
      v6 = (_QWORD *)*v10;
    }
    while (*v10);
    if (v7 != (_QWORD *)((char *)this + 40) && v7[4] <= a2)
    {
      v11 = (__int128 *)(v7 + 5);
    }
    else
    {
LABEL_13:
      degas::Bitmap::emptyBitmap(this);
      v11 = &degas::Bitmap::emptyBitmap(void)::bitmap;
    }
    return degas::Bitmap::operator=(a3, v11);
  }
  else
  {
    v13 = *((_QWORD *)this + 1);
    v14 = (degas::LabelTable *)*((_QWORD *)this + 3);
    os_unfair_lock_lock((os_unfair_lock_t)(v13 + 56));
    degas::LabelIndex_Persisted::locked_populate((uint64_t **)v13, v14);
    os_unfair_lock_unlock((os_unfair_lock_t)(v13 + 56));
    return (_QWORD *)(*(uint64_t (**)(_QWORD, unint64_t, degas::Bitmap *))(**((_QWORD **)this + 1)
                                                                                          + 16))(*((_QWORD *)this + 1), a2, a3);
  }
}

_QWORD *degas::LabelIndex_Snapshot::edgeIdentifiersForLabelIdentifier(degas::LabelIndex_Snapshot *this, unint64_t a2, degas::Bitmap *a3)
{
  _QWORD *v6;
  _QWORD *v7;
  unint64_t v8;
  BOOL v9;
  _QWORD *v10;
  __int128 *v11;
  uint64_t v13;
  degas::LabelTable *v14;

  if (*((_BYTE *)this + 80))
  {
    v6 = (_QWORD *)*((_QWORD *)this + 8);
    if (!v6)
      goto LABEL_13;
    v7 = (_QWORD *)((char *)this + 64);
    do
    {
      v8 = v6[4];
      v9 = v8 >= a2;
      if (v8 >= a2)
        v10 = v6;
      else
        v10 = v6 + 1;
      if (v9)
        v7 = v6;
      v6 = (_QWORD *)*v10;
    }
    while (*v10);
    if (v7 != (_QWORD *)((char *)this + 64) && v7[4] <= a2)
    {
      v11 = (__int128 *)(v7 + 5);
    }
    else
    {
LABEL_13:
      degas::Bitmap::emptyBitmap(this);
      v11 = &degas::Bitmap::emptyBitmap(void)::bitmap;
    }
    return degas::Bitmap::operator=(a3, v11);
  }
  else
  {
    v13 = *((_QWORD *)this + 1);
    v14 = (degas::LabelTable *)*((_QWORD *)this + 3);
    os_unfair_lock_lock((os_unfair_lock_t)(v13 + 56));
    degas::LabelIndex_Persisted::locked_populate((uint64_t **)v13, v14);
    os_unfair_lock_unlock((os_unfair_lock_t)(v13 + 56));
    return (_QWORD *)(*(uint64_t (**)(_QWORD, unint64_t, degas::Bitmap *))(**((_QWORD **)this + 1)
                                                                                          + 24))(*((_QWORD *)this + 1), a2, a3);
  }
}

void degas::LabelIndex_Snapshot::allNodeIdentifiers(degas::LabelIndex_Snapshot *this, degas::Bitmap *a2)
{
  char *v4;
  char *v5;
  char *v6;
  char *v7;
  BOOL v8;
  uint64_t v9;
  degas::LabelTable *v10;
  _OWORD v11[3];
  char v12;
  void **v13;

  if (*((_BYTE *)this + 80))
  {
    v4 = (char *)*((_QWORD *)this + 4);
    v5 = (char *)this + 40;
    if (v4 != (char *)this + 40)
    {
      do
      {
        v11[0] = *((_OWORD *)v4 + 2);
        memset(&v11[1], 0, 32);
        std::vector<degas::BitsetPtr>::__init_with_size[abi:ne180100]<degas::BitsetPtr*,degas::BitsetPtr*>((char *)&v11[1] + 8, *((__int128 **)v4 + 7), *((__int128 **)v4 + 8), (uint64_t)(*((_QWORD *)v4 + 8) - *((_QWORD *)v4 + 7)) >> 4);
        v12 = v4[80];
        degas::Bitmap::unionWith<degas::Bitmap>(a2, (uint64_t)v11 + 8);
        v13 = (void **)&v11[1] + 1;
        std::vector<degas::BitsetPtr>::__destroy_vector::operator()[abi:ne180100](&v13);
        v6 = (char *)*((_QWORD *)v4 + 1);
        if (v6)
        {
          do
          {
            v7 = v6;
            v6 = *(char **)v6;
          }
          while (v6);
        }
        else
        {
          do
          {
            v7 = (char *)*((_QWORD *)v4 + 2);
            v8 = *(_QWORD *)v7 == (_QWORD)v4;
            v4 = v7;
          }
          while (!v8);
        }
        v4 = v7;
      }
      while (v7 != v5);
    }
  }
  else
  {
    v9 = *((_QWORD *)this + 1);
    v10 = (degas::LabelTable *)*((_QWORD *)this + 3);
    os_unfair_lock_lock((os_unfair_lock_t)(v9 + 56));
    degas::LabelIndex_Persisted::locked_populate((uint64_t **)v9, v10);
    os_unfair_lock_unlock((os_unfair_lock_t)(v9 + 56));
    (*(void (**)(_QWORD, degas::Bitmap *))(**((_QWORD **)this + 1) + 32))(*((_QWORD *)this + 1), a2);
  }
}

void sub_1CA1767DC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  va_list va;

  va_start(va, a8);
  std::vector<degas::BitsetPtr>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  _Unwind_Resume(a1);
}

void degas::LabelIndex_Snapshot::allEdgeIdentifiers(degas::LabelIndex_Snapshot *this, degas::Bitmap *a2)
{
  char *v4;
  char *v5;
  char *v6;
  char *v7;
  BOOL v8;
  uint64_t v9;
  degas::LabelTable *v10;
  _OWORD v11[3];
  char v12;
  void **v13;

  if (*((_BYTE *)this + 80))
  {
    v4 = (char *)*((_QWORD *)this + 7);
    v5 = (char *)this + 64;
    if (v4 != (char *)this + 64)
    {
      do
      {
        v11[0] = *((_OWORD *)v4 + 2);
        memset(&v11[1], 0, 32);
        std::vector<degas::BitsetPtr>::__init_with_size[abi:ne180100]<degas::BitsetPtr*,degas::BitsetPtr*>((char *)&v11[1] + 8, *((__int128 **)v4 + 7), *((__int128 **)v4 + 8), (uint64_t)(*((_QWORD *)v4 + 8) - *((_QWORD *)v4 + 7)) >> 4);
        v12 = v4[80];
        degas::Bitmap::unionWith<degas::Bitmap>(a2, (uint64_t)v11 + 8);
        v13 = (void **)&v11[1] + 1;
        std::vector<degas::BitsetPtr>::__destroy_vector::operator()[abi:ne180100](&v13);
        v6 = (char *)*((_QWORD *)v4 + 1);
        if (v6)
        {
          do
          {
            v7 = v6;
            v6 = *(char **)v6;
          }
          while (v6);
        }
        else
        {
          do
          {
            v7 = (char *)*((_QWORD *)v4 + 2);
            v8 = *(_QWORD *)v7 == (_QWORD)v4;
            v4 = v7;
          }
          while (!v8);
        }
        v4 = v7;
      }
      while (v7 != v5);
    }
  }
  else
  {
    v9 = *((_QWORD *)this + 1);
    v10 = (degas::LabelTable *)*((_QWORD *)this + 3);
    os_unfair_lock_lock((os_unfair_lock_t)(v9 + 56));
    degas::LabelIndex_Persisted::locked_populate((uint64_t **)v9, v10);
    os_unfair_lock_unlock((os_unfair_lock_t)(v9 + 56));
    (*(void (**)(_QWORD, degas::Bitmap *))(**((_QWORD **)this + 1) + 40))(*((_QWORD *)this + 1), a2);
  }
}

void sub_1CA176920(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  va_list va;

  va_start(va, a8);
  std::vector<degas::BitsetPtr>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  _Unwind_Resume(a1);
}

void degas::LabelIndex_Snapshot::beginTransaction(degas::LabelIndex_Snapshot *this)
{
  uint64_t v2;
  degas::LabelTable *v3;

  if (!*((_BYTE *)this + 80))
  {
    v2 = *((_QWORD *)this + 1);
    v3 = (degas::LabelTable *)*((_QWORD *)this + 3);
    os_unfair_lock_lock((os_unfair_lock_t)(v2 + 56));
    degas::LabelIndex_Persisted::locked_populate((uint64_t **)v2, v3);
    os_unfair_lock_unlock((os_unfair_lock_t)(v2 + 56));
    degas::LabelIndex_Persisted::makeSnapshot(*((_QWORD *)this + 1), (uint64_t *)this + 4, (uint64_t *)this + 7);
    *((_BYTE *)this + 80) = 1;
  }
}

uint64_t degas::LabelIndex_Snapshot::commitTransaction(degas::LabelIndex_Snapshot *this)
{
  *((_BYTE *)this + 80) = 0;
  return 0;
}

uint64_t degas::LabelIndex_Snapshot::rollbackTransaction(uint64_t this)
{
  *(_BYTE *)(this + 80) = 0;
  return this;
}

void degas::LabelIndex_Persisted::locked_populate(uint64_t **this, degas::LabelTable *a2)
{
  sqlite3_int64 v3;
  uint64_t **v4;
  uint64_t **v5;
  __int128 v6;
  _BYTE v7[32];
  __int128 v8;
  _BYTE v9[32];
  sqlite3_int64 v10;
  degas::Statement *v11[2];
  void **v12;

  if (!*((_BYTE *)this + 60))
  {
    degas::LabelCursor::LabelCursor((degas::LabelCursor *)v11, a2);
    while (degas::Statement::next((sqlite3_stmt **)v11[0]) == 1)
    {
      v3 = sqlite3_column_int64(*(sqlite3_stmt **)v11[0], 0);
      v10 = v3;
      v8 = 0u;
      memset(v9, 0, 25);
      degas::Statement::bitmapColumnValue((sqlite3_stmt **)v11[0], 2, (degas::Bitmap *)&v8);
      v6 = 0u;
      memset(v7, 0, 25);
      degas::Statement::bitmapColumnValue((sqlite3_stmt **)v11[0], 3, (degas::Bitmap *)&v6);
      v4 = std::__tree<std::__value_type<unsigned long long,degas::Bitmap>,std::__map_value_compare<unsigned long long,std::__value_type<unsigned long long,degas::Bitmap>,std::less<unsigned long long>,true>,std::allocator<std::__value_type<unsigned long long,degas::Bitmap>>>::__emplace_unique_key_args<unsigned long long,std::piecewise_construct_t const&,std::tuple<unsigned long long const&>,std::tuple<>>(this + 1, v3, &v10);
      degas::Bitmap::operator=(v4 + 5, &v8);
      v5 = std::__tree<std::__value_type<unsigned long long,degas::Bitmap>,std::__map_value_compare<unsigned long long,std::__value_type<unsigned long long,degas::Bitmap>,std::less<unsigned long long>,true>,std::allocator<std::__value_type<unsigned long long,degas::Bitmap>>>::__emplace_unique_key_args<unsigned long long,std::piecewise_construct_t const&,std::tuple<unsigned long long const&>,std::tuple<>>(this + 4, v3, &v10);
      degas::Bitmap::operator=(v5 + 5, &v6);
      v12 = (void **)v7;
      std::vector<degas::BitsetPtr>::__destroy_vector::operator()[abi:ne180100](&v12);
      *(_QWORD *)&v6 = v9;
      std::vector<degas::BitsetPtr>::__destroy_vector::operator()[abi:ne180100]((void ***)&v6);
    }
    *((_BYTE *)this + 60) = 1;
    degas::Cursor::~Cursor(v11);
  }
}

void sub_1CA176AD8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  uint64_t v9;

  std::vector<degas::BitsetPtr>::__destroy_vector::operator()[abi:ne180100](&a9);
  degas::Cursor::~Cursor((degas::Statement **)(v9 - 72));
  _Unwind_Resume(a1);
}

void degas::LabelIndex_Persisted::makeSnapshot(uint64_t a1, uint64_t *a2, uint64_t *a3)
{
  os_unfair_lock_s *v6;

  v6 = (os_unfair_lock_s *)(a1 + 56);
  os_unfair_lock_lock((os_unfair_lock_t)(a1 + 56));
  if ((uint64_t *)(a1 + 8) != a2)
    std::__tree<std::__value_type<unsigned long long,degas::Bitmap>,std::__map_value_compare<unsigned long long,std::__value_type<unsigned long long,degas::Bitmap>,std::less<unsigned long long>,true>,std::allocator<std::__value_type<unsigned long long,degas::Bitmap>>>::__assign_multi<std::__tree_const_iterator<std::__value_type<unsigned long long,degas::Bitmap>,std::__tree_node<std::__value_type<unsigned long long,degas::Bitmap>,void *> *,long>>(a2, *(_QWORD **)(a1 + 8), (_QWORD *)(a1 + 16));
  if ((uint64_t *)(a1 + 32) != a3)
    std::__tree<std::__value_type<unsigned long long,degas::Bitmap>,std::__map_value_compare<unsigned long long,std::__value_type<unsigned long long,degas::Bitmap>,std::less<unsigned long long>,true>,std::allocator<std::__value_type<unsigned long long,degas::Bitmap>>>::__assign_multi<std::__tree_const_iterator<std::__value_type<unsigned long long,degas::Bitmap>,std::__tree_node<std::__value_type<unsigned long long,degas::Bitmap>,void *> *,long>>(a3, *(_QWORD **)(a1 + 32), (_QWORD *)(a1 + 40));
  os_unfair_lock_unlock(v6);
}

uint64_t *std::__tree<std::__value_type<unsigned long long,degas::Bitmap>,std::__map_value_compare<unsigned long long,std::__value_type<unsigned long long,degas::Bitmap>,std::less<unsigned long long>,true>,std::allocator<std::__value_type<unsigned long long,degas::Bitmap>>>::__assign_multi<std::__tree_const_iterator<std::__value_type<unsigned long long,degas::Bitmap>,std::__tree_node<std::__value_type<unsigned long long,degas::Bitmap>,void *> *,long>>(uint64_t *result, _QWORD *a2, _QWORD *a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t **v8;
  uint64_t *v9;
  _QWORD *v10;
  uint64_t *v11;
  uint64_t **v12;
  uint64_t **v13;
  _QWORD *v14;
  BOOL v15;
  uint64_t *v16;
  uint64_t **v17;
  uint64_t **v18;
  _QWORD *v19;
  _QWORD *v20;
  uint64_t *v21;
  uint64_t *v22;
  uint64_t *v23;

  v5 = (uint64_t)result;
  if (result[2])
  {
    v6 = *result;
    v8 = (uint64_t **)(result + 1);
    v7 = result[1];
    *result = (uint64_t)(result + 1);
    *(_QWORD *)(v7 + 16) = 0;
    result[1] = 0;
    result[2] = 0;
    if (*(_QWORD *)(v6 + 8))
      v9 = *(uint64_t **)(v6 + 8);
    else
      v9 = (uint64_t *)v6;
    v21 = result;
    v22 = v9;
    v23 = v9;
    if (v9)
    {
      v22 = std::__tree<std::__value_type<unsigned long long,degas::Bitmap>,std::__map_value_compare<unsigned long long,std::__value_type<unsigned long long,degas::Bitmap>,std::less<unsigned long long>,true>,std::allocator<std::__value_type<unsigned long long,degas::Bitmap>>>::_DetachedTreeCache::__detach_next((uint64_t)v9);
      if (a2 != a3)
      {
        v10 = a2;
        do
        {
          v9[4] = v10[4];
          degas::Bitmap::operator=(v9 + 5, v10 + 5);
          v11 = *v8;
          v12 = (uint64_t **)(v5 + 8);
          v13 = (uint64_t **)(v5 + 8);
          if (*v8)
          {
            do
            {
              while (1)
              {
                v12 = (uint64_t **)v11;
                if (v23[4] >= (unint64_t)v11[4])
                  break;
                v11 = (uint64_t *)*v11;
                v13 = v12;
                if (!*v12)
                  goto LABEL_14;
              }
              v11 = (uint64_t *)v11[1];
            }
            while (v11);
            v13 = v12 + 1;
          }
LABEL_14:
          std::__tree<std::__value_type<unsigned long long,degas::Bitmap>,std::__map_value_compare<unsigned long long,std::__value_type<unsigned long long,degas::Bitmap>,std::less<unsigned long long>,true>,std::allocator<std::__value_type<unsigned long long,degas::Bitmap>>>::__insert_node_at((uint64_t **)v5, (uint64_t)v12, v13, v23);
          v9 = v22;
          v23 = v22;
          if (v22)
            v22 = std::__tree<std::__value_type<unsigned long long,degas::Bitmap>,std::__map_value_compare<unsigned long long,std::__value_type<unsigned long long,degas::Bitmap>,std::less<unsigned long long>,true>,std::allocator<std::__value_type<unsigned long long,degas::Bitmap>>>::_DetachedTreeCache::__detach_next((uint64_t)v22);
          v14 = (_QWORD *)v10[1];
          if (v14)
          {
            do
            {
              a2 = v14;
              v14 = (_QWORD *)*v14;
            }
            while (v14);
          }
          else
          {
            do
            {
              a2 = (_QWORD *)v10[2];
              v15 = *a2 == (_QWORD)v10;
              v10 = a2;
            }
            while (!v15);
          }
          if (!v9)
            break;
          v10 = a2;
        }
        while (a2 != a3);
      }
    }
    result = (uint64_t *)std::__tree<std::__value_type<unsigned long long,degas::Bitmap>,std::__map_value_compare<unsigned long long,std::__value_type<unsigned long long,degas::Bitmap>,std::less<unsigned long long>,true>,std::allocator<std::__value_type<unsigned long long,degas::Bitmap>>>::_DetachedTreeCache::~_DetachedTreeCache[abi:ne180100]((uint64_t)&v21);
  }
  if (a2 != a3)
  {
    do
    {
      std::__tree<std::__value_type<unsigned long long,degas::Bitmap>,std::__map_value_compare<unsigned long long,std::__value_type<unsigned long long,degas::Bitmap>,std::less<unsigned long long>,true>,std::allocator<std::__value_type<unsigned long long,degas::Bitmap>>>::__construct_node<std::pair<unsigned long long const,degas::Bitmap> const&>((uint64_t)&v21, v5, (uint64_t)(a2 + 4));
      v16 = *(uint64_t **)(v5 + 8);
      v17 = (uint64_t **)(v5 + 8);
      v18 = (uint64_t **)(v5 + 8);
      if (v16)
      {
        do
        {
          while (1)
          {
            v17 = (uint64_t **)v16;
            if (v21[4] >= (unint64_t)v16[4])
              break;
            v16 = (uint64_t *)*v16;
            v18 = v17;
            if (!*v17)
              goto LABEL_31;
          }
          v16 = (uint64_t *)v16[1];
        }
        while (v16);
        v18 = v17 + 1;
      }
LABEL_31:
      result = std::__tree<std::__value_type<unsigned long long,degas::Bitmap>,std::__map_value_compare<unsigned long long,std::__value_type<unsigned long long,degas::Bitmap>,std::less<unsigned long long>,true>,std::allocator<std::__value_type<unsigned long long,degas::Bitmap>>>::__insert_node_at((uint64_t **)v5, (uint64_t)v17, v18, v21);
      v19 = (_QWORD *)a2[1];
      if (v19)
      {
        do
        {
          v20 = v19;
          v19 = (_QWORD *)*v19;
        }
        while (v19);
      }
      else
      {
        do
        {
          v20 = (_QWORD *)a2[2];
          v15 = *v20 == (_QWORD)a2;
          a2 = v20;
        }
        while (!v15);
      }
      a2 = v20;
    }
    while (v20 != a3);
  }
  return result;
}

void sub_1CA176D78(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::__tree<std::__value_type<unsigned long long,degas::Bitmap>,std::__map_value_compare<unsigned long long,std::__value_type<unsigned long long,degas::Bitmap>,std::less<unsigned long long>,true>,std::allocator<std::__value_type<unsigned long long,degas::Bitmap>>>::_DetachedTreeCache::~_DetachedTreeCache[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

_QWORD *std::__tree<std::__value_type<unsigned long long,degas::Bitmap>,std::__map_value_compare<unsigned long long,std::__value_type<unsigned long long,degas::Bitmap>,std::less<unsigned long long>,true>,std::allocator<std::__value_type<unsigned long long,degas::Bitmap>>>::_DetachedTreeCache::__detach_next(uint64_t a1)
{
  _QWORD *result;
  _QWORD *v3;
  _QWORD *v4;

  result = *(_QWORD **)(a1 + 16);
  if (result)
  {
    v3 = (_QWORD *)*result;
    if (*result == a1)
    {
      *result = 0;
      while (1)
      {
        v4 = (_QWORD *)result[1];
        if (!v4)
          break;
        do
        {
          result = v4;
          v4 = (_QWORD *)*v4;
        }
        while (v4);
      }
    }
    else
    {
      for (result[1] = 0; v3; v3 = (_QWORD *)result[1])
      {
        do
        {
          result = v3;
          v3 = (_QWORD *)*v3;
        }
        while (v3);
      }
    }
  }
  return result;
}

uint64_t std::__tree<std::__value_type<unsigned long long,degas::Bitmap>,std::__map_value_compare<unsigned long long,std::__value_type<unsigned long long,degas::Bitmap>,std::less<unsigned long long>,true>,std::allocator<std::__value_type<unsigned long long,degas::Bitmap>>>::_DetachedTreeCache::~_DetachedTreeCache[abi:ne180100](uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;

  std::__tree<std::__value_type<unsigned long long,degas::Bitmap>,std::__map_value_compare<unsigned long long,std::__value_type<unsigned long long,degas::Bitmap>,std::less<unsigned long long>,true>,std::allocator<std::__value_type<unsigned long long,degas::Bitmap>>>::destroy(*(char **)(a1 + 16));
  v2 = *(_QWORD *)(a1 + 8);
  if (v2)
  {
    v3 = *(_QWORD *)(v2 + 16);
    if (v3)
    {
      do
      {
        v2 = v3;
        v3 = *(_QWORD *)(v3 + 16);
      }
      while (v3);
      *(_QWORD *)(a1 + 8) = v2;
    }
    std::__tree<std::__value_type<unsigned long long,degas::Bitmap>,std::__map_value_compare<unsigned long long,std::__value_type<unsigned long long,degas::Bitmap>,std::less<unsigned long long>,true>,std::allocator<std::__value_type<unsigned long long,degas::Bitmap>>>::destroy((char *)v2);
  }
  return a1;
}

char *std::__tree<std::__value_type<unsigned long long,degas::Bitmap>,std::__map_value_compare<unsigned long long,std::__value_type<unsigned long long,degas::Bitmap>,std::less<unsigned long long>,true>,std::allocator<std::__value_type<unsigned long long,degas::Bitmap>>>::__construct_node<std::pair<unsigned long long const,degas::Bitmap> const&>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  void *v6;
  char *result;

  v5 = a2 + 8;
  v6 = operator new(0x58uLL);
  *(_QWORD *)a1 = v6;
  *(_QWORD *)(a1 + 8) = v5;
  *(_BYTE *)(a1 + 16) = 0;
  *((_OWORD *)v6 + 2) = *(_OWORD *)a3;
  *((_OWORD *)v6 + 3) = 0u;
  *((_OWORD *)v6 + 4) = 0u;
  result = std::vector<degas::BitsetPtr>::__init_with_size[abi:ne180100]<degas::BitsetPtr*,degas::BitsetPtr*>((char *)v6 + 56, *(__int128 **)(a3 + 24), *(__int128 **)(a3 + 32), (uint64_t)(*(_QWORD *)(a3 + 32) - *(_QWORD *)(a3 + 24)) >> 4);
  *((_BYTE *)v6 + 80) = *(_BYTE *)(a3 + 48);
  *(_BYTE *)(a1 + 16) = 1;
  return result;
}

void sub_1CA176EA0(_Unwind_Exception *a1)
{
  _QWORD *v1;
  void **v2;

  *v1 = 0;
  std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<unsigned long long,degas::Bitmap>,void *>>>::operator()[abi:ne180100](0, v2);
  _Unwind_Resume(a1);
}

uint64_t *std::__tree<std::__value_type<unsigned long long,degas::Bitmap>,std::__map_value_compare<unsigned long long,std::__value_type<unsigned long long,degas::Bitmap>,std::less<unsigned long long>,true>,std::allocator<std::__value_type<unsigned long long,degas::Bitmap>>>::__insert_node_at(uint64_t **a1, uint64_t a2, uint64_t **a3, uint64_t *a4)
{
  uint64_t *v5;
  uint64_t *result;

  *a4 = 0;
  a4[1] = 0;
  a4[2] = a2;
  *a3 = a4;
  v5 = (uint64_t *)**a1;
  if (v5)
  {
    *a1 = v5;
    a4 = *a3;
  }
  result = std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(a1[1], a4);
  a1[2] = (uint64_t *)((char *)a1[2] + 1);
  return result;
}

void std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<unsigned long long,degas::Bitmap>,void *>>>::operator()[abi:ne180100](char a1, void **__p)
{
  void **v3;

  if (a1)
  {
    v3 = __p + 7;
    std::vector<degas::BitsetPtr>::__destroy_vector::operator()[abi:ne180100](&v3);
  }
  if (__p)
    operator delete(__p);
}

uint64_t **std::__tree<std::__value_type<unsigned long long,degas::Bitmap>,std::__map_value_compare<unsigned long long,std::__value_type<unsigned long long,degas::Bitmap>,std::less<unsigned long long>,true>,std::allocator<std::__value_type<unsigned long long,degas::Bitmap>>>::__emplace_unique_key_args<unsigned long long,std::piecewise_construct_t const&,std::tuple<unsigned long long const&>,std::tuple<>>(uint64_t **a1, unint64_t a2, _QWORD *a3)
{
  uint64_t *v5;
  uint64_t **v6;
  uint64_t **v7;
  unint64_t v8;
  char *v9;

  v6 = a1 + 1;
  v5 = a1[1];
  if (v5)
  {
    while (1)
    {
      while (1)
      {
        v7 = (uint64_t **)v5;
        v8 = v5[4];
        if (v8 <= a2)
          break;
        v5 = *v7;
        v6 = v7;
        if (!*v7)
          goto LABEL_9;
      }
      if (v8 >= a2)
        break;
      v5 = v7[1];
      if (!v5)
      {
        v6 = v7 + 1;
        goto LABEL_9;
      }
    }
  }
  else
  {
    v7 = a1 + 1;
LABEL_9:
    v9 = (char *)operator new(0x58uLL);
    *((_QWORD *)v9 + 4) = *a3;
    *(_OWORD *)(v9 + 40) = 0u;
    *(_OWORD *)(v9 + 56) = 0u;
    *(_OWORD *)(v9 + 65) = 0u;
    std::__tree<std::__value_type<unsigned long long,degas::Bitmap>,std::__map_value_compare<unsigned long long,std::__value_type<unsigned long long,degas::Bitmap>,std::less<unsigned long long>,true>,std::allocator<std::__value_type<unsigned long long,degas::Bitmap>>>::__insert_node_at(a1, (uint64_t)v7, v6, (uint64_t *)v9);
    return (uint64_t **)v9;
  }
  return v7;
}

void degas::LabelIndex_Transaction::~LabelIndex_Transaction(char **this)
{
  degas::LabelIndex_Transaction::~LabelIndex_Transaction(this);
  JUMPOUT(0x1CAA4ADC8);
}

{
  *this = (char *)&off_1E83E2BD8;
  std::__tree<std::__value_type<unsigned long long,degas::Bitmap>,std::__map_value_compare<unsigned long long,std::__value_type<unsigned long long,degas::Bitmap>,std::less<unsigned long long>,true>,std::allocator<std::__value_type<unsigned long long,degas::Bitmap>>>::destroy(this[15]);
  std::__tree<std::__value_type<unsigned long long,degas::Bitmap>,std::__map_value_compare<unsigned long long,std::__value_type<unsigned long long,degas::Bitmap>,std::less<unsigned long long>,true>,std::allocator<std::__value_type<unsigned long long,degas::Bitmap>>>::destroy(this[12]);
  std::__tree<std::__value_type<unsigned long long,degas::Bitmap>,std::__map_value_compare<unsigned long long,std::__value_type<unsigned long long,degas::Bitmap>,std::less<unsigned long long>,true>,std::allocator<std::__value_type<unsigned long long,degas::Bitmap>>>::destroy(this[9]);
  std::__tree<std::__value_type<unsigned long long,degas::Bitmap>,std::__map_value_compare<unsigned long long,std::__value_type<unsigned long long,degas::Bitmap>,std::less<unsigned long long>,true>,std::allocator<std::__value_type<unsigned long long,degas::Bitmap>>>::destroy(this[6]);
  std::shared_ptr<degas::Predicate>::~shared_ptr[abi:ne180100]((uint64_t)(this + 1));
}

void degas::LabelIndex_Transaction::nodeIdentifiersForLabelIdentifier(degas::LabelIndex_Transaction *this, unint64_t a2, degas::Bitmap *a3)
{
  uint64_t v6;
  degas::LabelTable *v7;
  _QWORD *v8;
  _QWORD *v9;
  unint64_t v10;
  BOOL v11;
  _QWORD *v12;
  _QWORD *v13;
  char *v14;
  _QWORD *v15;
  char *v16;
  unint64_t v17;
  BOOL v18;
  _QWORD *v19;

  v6 = *((_QWORD *)this + 1);
  v7 = (degas::LabelTable *)*((_QWORD *)this + 3);
  os_unfair_lock_lock((os_unfair_lock_t)(v6 + 56));
  degas::LabelIndex_Persisted::locked_populate((uint64_t **)v6, v7);
  os_unfair_lock_unlock((os_unfair_lock_t)(v6 + 56));
  (*(void (**)(_QWORD, unint64_t, degas::Bitmap *))(**((_QWORD **)this + 1) + 16))(*((_QWORD *)this + 1), a2, a3);
  v8 = (_QWORD *)*((_QWORD *)this + 6);
  if (v8)
  {
    v9 = (_QWORD *)((char *)this + 48);
    do
    {
      v10 = v8[4];
      v11 = v10 >= a2;
      if (v10 >= a2)
        v12 = v8;
      else
        v12 = v8 + 1;
      if (v11)
        v9 = v8;
      v8 = (_QWORD *)*v12;
    }
    while (*v12);
    if (v9 != (_QWORD *)((char *)this + 48) && v9[4] <= a2)
      degas::Bitmap::unionWith<degas::Bitmap>(a3, (uint64_t)(v9 + 5));
  }
  v15 = (_QWORD *)*((_QWORD *)this + 9);
  v14 = (char *)this + 72;
  v13 = v15;
  if (v15)
  {
    v16 = v14;
    do
    {
      v17 = v13[4];
      v18 = v17 >= a2;
      if (v17 >= a2)
        v19 = v13;
      else
        v19 = v13 + 1;
      if (v18)
        v16 = (char *)v13;
      v13 = (_QWORD *)*v19;
    }
    while (*v19);
    if (v16 != v14 && *((_QWORD *)v16 + 4) <= a2)
      degas::Bitmap::diffWith<degas::Bitmap>(a3, (degas::Bitmap *)(v16 + 40));
  }
}

void degas::LabelIndex_Transaction::edgeIdentifiersForLabelIdentifier(degas::LabelIndex_Transaction *this, unint64_t a2, degas::Bitmap *a3)
{
  uint64_t v6;
  degas::LabelTable *v7;
  _QWORD *v8;
  _QWORD *v9;
  unint64_t v10;
  BOOL v11;
  _QWORD *v12;
  _QWORD *v13;
  char *v14;
  _QWORD *v15;
  char *v16;
  unint64_t v17;
  BOOL v18;
  _QWORD *v19;

  v6 = *((_QWORD *)this + 1);
  v7 = (degas::LabelTable *)*((_QWORD *)this + 3);
  os_unfair_lock_lock((os_unfair_lock_t)(v6 + 56));
  degas::LabelIndex_Persisted::locked_populate((uint64_t **)v6, v7);
  os_unfair_lock_unlock((os_unfair_lock_t)(v6 + 56));
  (*(void (**)(_QWORD, unint64_t, degas::Bitmap *))(**((_QWORD **)this + 1) + 24))(*((_QWORD *)this + 1), a2, a3);
  v8 = (_QWORD *)*((_QWORD *)this + 12);
  if (v8)
  {
    v9 = (_QWORD *)((char *)this + 96);
    do
    {
      v10 = v8[4];
      v11 = v10 >= a2;
      if (v10 >= a2)
        v12 = v8;
      else
        v12 = v8 + 1;
      if (v11)
        v9 = v8;
      v8 = (_QWORD *)*v12;
    }
    while (*v12);
    if (v9 != (_QWORD *)((char *)this + 96) && v9[4] <= a2)
      degas::Bitmap::unionWith<degas::Bitmap>(a3, (uint64_t)(v9 + 5));
  }
  v15 = (_QWORD *)*((_QWORD *)this + 15);
  v14 = (char *)this + 120;
  v13 = v15;
  if (v15)
  {
    v16 = v14;
    do
    {
      v17 = v13[4];
      v18 = v17 >= a2;
      if (v17 >= a2)
        v19 = v13;
      else
        v19 = v13 + 1;
      if (v18)
        v16 = (char *)v13;
      v13 = (_QWORD *)*v19;
    }
    while (*v19);
    if (v16 != v14 && *((_QWORD *)v16 + 4) <= a2)
      degas::Bitmap::diffWith<degas::Bitmap>(a3, (degas::Bitmap *)(v16 + 40));
  }
}

void degas::LabelIndex_Transaction::allNodeIdentifiers(degas::LabelIndex_Transaction *this, degas::Bitmap *a2)
{
  uint64_t v4;
  degas::LabelTable *v5;
  degas::LabelIndex_Transaction *v6;
  degas::LabelIndex_Transaction *v7;
  degas::LabelIndex_Transaction *v8;
  BOOL v9;
  degas::LabelIndex_Transaction *v10;
  degas::LabelIndex_Transaction *v11;
  degas::LabelIndex_Transaction *v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  char v16;
  void **v17;

  v4 = *((_QWORD *)this + 1);
  v5 = (degas::LabelTable *)*((_QWORD *)this + 3);
  os_unfair_lock_lock((os_unfair_lock_t)(v4 + 56));
  degas::LabelIndex_Persisted::locked_populate((uint64_t **)v4, v5);
  os_unfair_lock_unlock((os_unfair_lock_t)(v4 + 56));
  (*(void (**)(_QWORD, degas::Bitmap *))(**((_QWORD **)this + 1) + 32))(*((_QWORD *)this + 1), a2);
  v6 = (degas::LabelIndex_Transaction *)*((_QWORD *)this + 5);
  if (v6 != (degas::LabelIndex_Transaction *)((char *)this + 48))
  {
    do
    {
      v13 = *((_OWORD *)v6 + 2);
      v14 = 0u;
      v15 = 0u;
      std::vector<degas::BitsetPtr>::__init_with_size[abi:ne180100]<degas::BitsetPtr*,degas::BitsetPtr*>((char *)&v14 + 8, *((__int128 **)v6 + 7), *((__int128 **)v6 + 8), (uint64_t)(*((_QWORD *)v6 + 8) - *((_QWORD *)v6 + 7)) >> 4);
      v16 = *((_BYTE *)v6 + 80);
      degas::Bitmap::unionWith<degas::Bitmap>(a2, (uint64_t)&v13 + 8);
      v17 = (void **)&v14 + 1;
      std::vector<degas::BitsetPtr>::__destroy_vector::operator()[abi:ne180100](&v17);
      v7 = (degas::LabelIndex_Transaction *)*((_QWORD *)v6 + 1);
      if (v7)
      {
        do
        {
          v8 = v7;
          v7 = *(degas::LabelIndex_Transaction **)v7;
        }
        while (v7);
      }
      else
      {
        do
        {
          v8 = (degas::LabelIndex_Transaction *)*((_QWORD *)v6 + 2);
          v9 = *(_QWORD *)v8 == (_QWORD)v6;
          v6 = v8;
        }
        while (!v9);
      }
      v6 = v8;
    }
    while (v8 != (degas::LabelIndex_Transaction *)((char *)this + 48));
  }
  v10 = (degas::LabelIndex_Transaction *)*((_QWORD *)this + 8);
  if (v10 != (degas::LabelIndex_Transaction *)((char *)this + 72))
  {
    do
    {
      v13 = *((_OWORD *)v10 + 2);
      v14 = 0u;
      v15 = 0u;
      std::vector<degas::BitsetPtr>::__init_with_size[abi:ne180100]<degas::BitsetPtr*,degas::BitsetPtr*>((char *)&v14 + 8, *((__int128 **)v10 + 7), *((__int128 **)v10 + 8), (uint64_t)(*((_QWORD *)v10 + 8) - *((_QWORD *)v10 + 7)) >> 4);
      v16 = *((_BYTE *)v10 + 80);
      degas::Bitmap::diffWith<degas::Bitmap>(a2, (degas::Bitmap *)((char *)&v13 + 8));
      v17 = (void **)&v14 + 1;
      std::vector<degas::BitsetPtr>::__destroy_vector::operator()[abi:ne180100](&v17);
      v11 = (degas::LabelIndex_Transaction *)*((_QWORD *)v10 + 1);
      if (v11)
      {
        do
        {
          v12 = v11;
          v11 = *(degas::LabelIndex_Transaction **)v11;
        }
        while (v11);
      }
      else
      {
        do
        {
          v12 = (degas::LabelIndex_Transaction *)*((_QWORD *)v10 + 2);
          v9 = *(_QWORD *)v12 == (_QWORD)v10;
          v10 = v12;
        }
        while (!v9);
      }
      v10 = v12;
    }
    while (v12 != (degas::LabelIndex_Transaction *)((char *)this + 72));
  }
}

void sub_1CA177468(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  va_list va;

  va_start(va, a8);
  std::vector<degas::BitsetPtr>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  _Unwind_Resume(a1);
}

void degas::LabelIndex_Transaction::allEdgeIdentifiers(degas::LabelIndex_Transaction *this, degas::Bitmap *a2)
{
  uint64_t v4;
  degas::LabelTable *v5;
  degas::LabelIndex_Transaction *v6;
  degas::LabelIndex_Transaction *v7;
  degas::LabelIndex_Transaction *v8;
  BOOL v9;
  degas::LabelIndex_Transaction *v10;
  degas::LabelIndex_Transaction *v11;
  degas::LabelIndex_Transaction *v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  char v16;
  void **v17;

  v4 = *((_QWORD *)this + 1);
  v5 = (degas::LabelTable *)*((_QWORD *)this + 3);
  os_unfair_lock_lock((os_unfair_lock_t)(v4 + 56));
  degas::LabelIndex_Persisted::locked_populate((uint64_t **)v4, v5);
  os_unfair_lock_unlock((os_unfair_lock_t)(v4 + 56));
  (*(void (**)(_QWORD, degas::Bitmap *))(**((_QWORD **)this + 1) + 40))(*((_QWORD *)this + 1), a2);
  v6 = (degas::LabelIndex_Transaction *)*((_QWORD *)this + 11);
  if (v6 != (degas::LabelIndex_Transaction *)((char *)this + 96))
  {
    do
    {
      v13 = *((_OWORD *)v6 + 2);
      v14 = 0u;
      v15 = 0u;
      std::vector<degas::BitsetPtr>::__init_with_size[abi:ne180100]<degas::BitsetPtr*,degas::BitsetPtr*>((char *)&v14 + 8, *((__int128 **)v6 + 7), *((__int128 **)v6 + 8), (uint64_t)(*((_QWORD *)v6 + 8) - *((_QWORD *)v6 + 7)) >> 4);
      v16 = *((_BYTE *)v6 + 80);
      degas::Bitmap::unionWith<degas::Bitmap>(a2, (uint64_t)&v13 + 8);
      v17 = (void **)&v14 + 1;
      std::vector<degas::BitsetPtr>::__destroy_vector::operator()[abi:ne180100](&v17);
      v7 = (degas::LabelIndex_Transaction *)*((_QWORD *)v6 + 1);
      if (v7)
      {
        do
        {
          v8 = v7;
          v7 = *(degas::LabelIndex_Transaction **)v7;
        }
        while (v7);
      }
      else
      {
        do
        {
          v8 = (degas::LabelIndex_Transaction *)*((_QWORD *)v6 + 2);
          v9 = *(_QWORD *)v8 == (_QWORD)v6;
          v6 = v8;
        }
        while (!v9);
      }
      v6 = v8;
    }
    while (v8 != (degas::LabelIndex_Transaction *)((char *)this + 96));
  }
  v10 = (degas::LabelIndex_Transaction *)*((_QWORD *)this + 14);
  if (v10 != (degas::LabelIndex_Transaction *)((char *)this + 120))
  {
    do
    {
      v13 = *((_OWORD *)v10 + 2);
      v14 = 0u;
      v15 = 0u;
      std::vector<degas::BitsetPtr>::__init_with_size[abi:ne180100]<degas::BitsetPtr*,degas::BitsetPtr*>((char *)&v14 + 8, *((__int128 **)v10 + 7), *((__int128 **)v10 + 8), (uint64_t)(*((_QWORD *)v10 + 8) - *((_QWORD *)v10 + 7)) >> 4);
      v16 = *((_BYTE *)v10 + 80);
      degas::Bitmap::diffWith<degas::Bitmap>(a2, (degas::Bitmap *)((char *)&v13 + 8));
      v17 = (void **)&v14 + 1;
      std::vector<degas::BitsetPtr>::__destroy_vector::operator()[abi:ne180100](&v17);
      v11 = (degas::LabelIndex_Transaction *)*((_QWORD *)v10 + 1);
      if (v11)
      {
        do
        {
          v12 = v11;
          v11 = *(degas::LabelIndex_Transaction **)v11;
        }
        while (v11);
      }
      else
      {
        do
        {
          v12 = (degas::LabelIndex_Transaction *)*((_QWORD *)v10 + 2);
          v9 = *(_QWORD *)v12 == (_QWORD)v10;
          v10 = v12;
        }
        while (!v9);
      }
      v10 = v12;
    }
    while (v12 != (degas::LabelIndex_Transaction *)((char *)this + 120));
  }
}

void sub_1CA177640(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  va_list va;

  va_start(va, a8);
  std::vector<degas::BitsetPtr>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  _Unwind_Resume(a1);
}

uint64_t degas::LabelIndex_Transaction::beginTransaction(uint64_t this)
{
  *(_BYTE *)(this + 32) = 1;
  return this;
}

uint64_t degas::LabelIndex_Transaction::commitTransaction(degas::LabelIndex_Transaction *this)
{
  uint64_t v2;
  char *v3;

  v2 = degas::LabelIndex_Persisted::update(*((_QWORD *)this + 1), *((degas::LabelTable **)this + 3), (_QWORD *)this + 5, (_QWORD *)this + 8, (_QWORD *)this + 11, (_QWORD *)this + 14);
  std::__tree<std::__value_type<unsigned long long,degas::Bitmap>,std::__map_value_compare<unsigned long long,std::__value_type<unsigned long long,degas::Bitmap>,std::less<unsigned long long>,true>,std::allocator<std::__value_type<unsigned long long,degas::Bitmap>>>::destroy(*((char **)this + 6));
  *((_QWORD *)this + 5) = (char *)this + 48;
  *((_QWORD *)this + 7) = 0;
  *((_QWORD *)this + 6) = 0;
  std::__tree<std::__value_type<unsigned long long,degas::Bitmap>,std::__map_value_compare<unsigned long long,std::__value_type<unsigned long long,degas::Bitmap>,std::less<unsigned long long>,true>,std::allocator<std::__value_type<unsigned long long,degas::Bitmap>>>::destroy(*((char **)this + 9));
  *((_QWORD *)this + 8) = (char *)this + 72;
  *((_QWORD *)this + 10) = 0;
  *((_QWORD *)this + 9) = 0;
  std::__tree<std::__value_type<unsigned long long,degas::Bitmap>,std::__map_value_compare<unsigned long long,std::__value_type<unsigned long long,degas::Bitmap>,std::less<unsigned long long>,true>,std::allocator<std::__value_type<unsigned long long,degas::Bitmap>>>::destroy(*((char **)this + 12));
  *((_QWORD *)this + 11) = (char *)this + 96;
  *((_QWORD *)this + 12) = 0;
  v3 = (char *)*((_QWORD *)this + 15);
  *((_QWORD *)this + 13) = 0;
  std::__tree<std::__value_type<unsigned long long,degas::Bitmap>,std::__map_value_compare<unsigned long long,std::__value_type<unsigned long long,degas::Bitmap>,std::less<unsigned long long>,true>,std::allocator<std::__value_type<unsigned long long,degas::Bitmap>>>::destroy(v3);
  *((_QWORD *)this + 14) = (char *)this + 120;
  *((_QWORD *)this + 15) = 0;
  *((_QWORD *)this + 16) = 0;
  *((_BYTE *)this + 32) = 0;
  return v2;
}

void degas::LabelIndex_Transaction::rollbackTransaction(char **this)
{
  char **v1;
  char *v2;
  char *v3;
  char *v4;

  v1 = this;
  v2 = (char *)(this + 6);
  std::__tree<std::__value_type<unsigned long long,degas::Bitmap>,std::__map_value_compare<unsigned long long,std::__value_type<unsigned long long,degas::Bitmap>,std::less<unsigned long long>,true>,std::allocator<std::__value_type<unsigned long long,degas::Bitmap>>>::destroy(this[6]);
  v1[5] = v2;
  v1[7] = 0;
  *(_QWORD *)v2 = 0;
  std::__tree<std::__value_type<unsigned long long,degas::Bitmap>,std::__map_value_compare<unsigned long long,std::__value_type<unsigned long long,degas::Bitmap>,std::less<unsigned long long>,true>,std::allocator<std::__value_type<unsigned long long,degas::Bitmap>>>::destroy(v1[9]);
  v1[8] = (char *)(v1 + 9);
  v1[10] = 0;
  v1[9] = 0;
  v3 = (char *)(v1 + 12);
  std::__tree<std::__value_type<unsigned long long,degas::Bitmap>,std::__map_value_compare<unsigned long long,std::__value_type<unsigned long long,degas::Bitmap>,std::less<unsigned long long>,true>,std::allocator<std::__value_type<unsigned long long,degas::Bitmap>>>::destroy(v1[12]);
  v4 = v1[15];
  v1 += 15;
  *(v1 - 4) = v3;
  *(_QWORD *)v3 = 0;
  *(v1 - 2) = 0;
  std::__tree<std::__value_type<unsigned long long,degas::Bitmap>,std::__map_value_compare<unsigned long long,std::__value_type<unsigned long long,degas::Bitmap>,std::less<unsigned long long>,true>,std::allocator<std::__value_type<unsigned long long,degas::Bitmap>>>::destroy(v4);
  *(v1 - 1) = (char *)v1;
  *v1 = 0;
  v1[1] = 0;
  *((_BYTE *)v1 - 88) = 0;
}

uint64_t degas::LabelIndex_Transaction::resetIndex(degas::LabelIndex_Transaction *this)
{
  return (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 1) + 72))(*((_QWORD *)this + 1));
}

void degas::LabelIndex_Transaction::addNode(degas::LabelIndex_Transaction *this, void **a2, unint64_t a3)
{
  _QWORD *v4;
  uint64_t *v5;
  uint64_t *v6;
  unint64_t v7;
  BOOL v8;
  _QWORD *v9;
  void **v10[6];
  char v11;
  __int128 v12;
  __int128 *v13[5];
  void ***v14;

  if (!*((_BYTE *)this + 32))
    __assert_rtn("addNode", "labelIndex.cpp", 564, "_inTransaction");
  v5 = (uint64_t *)((char *)this + 48);
  v4 = (_QWORD *)*((_QWORD *)this + 6);
  if (!v4)
    goto LABEL_13;
  v6 = (uint64_t *)((char *)this + 48);
  do
  {
    v7 = v4[4];
    v8 = v7 >= (unint64_t)a2;
    if (v7 >= (unint64_t)a2)
      v9 = v4;
    else
      v9 = v4 + 1;
    if (v8)
      v6 = v4;
    v4 = (_QWORD *)*v9;
  }
  while (*v9);
  if (v6 != v5 && v6[4] <= (unint64_t)a2)
  {
    degas::Bitmap::setBit((degas::Bitmap *)(v6 + 5), a3);
  }
  else
  {
LABEL_13:
    v12 = 0u;
    memset(v13, 0, 25);
    degas::Bitmap::setBit((degas::Bitmap *)&v12, a3);
    v10[0] = a2;
    v10[1] = (void **)v12;
    memset(&v10[2], 0, 32);
    std::vector<degas::BitsetPtr>::__init_with_size[abi:ne180100]<degas::BitsetPtr*,degas::BitsetPtr*>((char *)&v10[3], v13[0], v13[1], v13[1] - v13[0]);
    v11 = (char)v13[3];
    std::__tree<std::__value_type<unsigned long long,degas::Bitmap>,std::__map_value_compare<unsigned long long,std::__value_type<unsigned long long,degas::Bitmap>,std::less<unsigned long long>,true>,std::allocator<std::__value_type<unsigned long long,degas::Bitmap>>>::__emplace_unique_key_args<unsigned long long,std::pair<unsigned long long,degas::Bitmap>>(v5 - 1, (unint64_t)a2, (uint64_t)v10);
    v14 = &v10[3];
    std::vector<degas::BitsetPtr>::__destroy_vector::operator()[abi:ne180100]((void ***)&v14);
    v10[0] = (void **)v13;
    std::vector<degas::BitsetPtr>::__destroy_vector::operator()[abi:ne180100](v10);
  }
}

void sub_1CA1778D0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void **a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19)
{
  uint64_t v19;
  uint64_t v20;

  *(_QWORD *)(v20 - 40) = v19;
  std::vector<degas::BitsetPtr>::__destroy_vector::operator()[abi:ne180100]((void ***)(v20 - 40));
  a10 = (void **)&a19;
  std::vector<degas::BitsetPtr>::__destroy_vector::operator()[abi:ne180100](&a10);
  _Unwind_Resume(a1);
}

void degas::LabelIndex_Transaction::removeNode(degas::LabelIndex_Transaction *this, void **a2, unint64_t a3)
{
  _QWORD *v4;
  uint64_t *v5;
  uint64_t *v6;
  unint64_t v7;
  BOOL v8;
  _QWORD *v9;
  void **v10[6];
  char v11;
  __int128 v12;
  __int128 *v13[5];
  void ***v14;

  if (!*((_BYTE *)this + 32))
    __assert_rtn("removeNode", "labelIndex.cpp", 579, "_inTransaction");
  v5 = (uint64_t *)((char *)this + 72);
  v4 = (_QWORD *)*((_QWORD *)this + 9);
  if (!v4)
    goto LABEL_13;
  v6 = (uint64_t *)((char *)this + 72);
  do
  {
    v7 = v4[4];
    v8 = v7 >= (unint64_t)a2;
    if (v7 >= (unint64_t)a2)
      v9 = v4;
    else
      v9 = v4 + 1;
    if (v8)
      v6 = v4;
    v4 = (_QWORD *)*v9;
  }
  while (*v9);
  if (v6 != v5 && v6[4] <= (unint64_t)a2)
  {
    degas::Bitmap::setBit((degas::Bitmap *)(v6 + 5), a3);
  }
  else
  {
LABEL_13:
    v12 = 0u;
    memset(v13, 0, 25);
    degas::Bitmap::setBit((degas::Bitmap *)&v12, a3);
    v10[0] = a2;
    v10[1] = (void **)v12;
    memset(&v10[2], 0, 32);
    std::vector<degas::BitsetPtr>::__init_with_size[abi:ne180100]<degas::BitsetPtr*,degas::BitsetPtr*>((char *)&v10[3], v13[0], v13[1], v13[1] - v13[0]);
    v11 = (char)v13[3];
    std::__tree<std::__value_type<unsigned long long,degas::Bitmap>,std::__map_value_compare<unsigned long long,std::__value_type<unsigned long long,degas::Bitmap>,std::less<unsigned long long>,true>,std::allocator<std::__value_type<unsigned long long,degas::Bitmap>>>::__emplace_unique_key_args<unsigned long long,std::pair<unsigned long long,degas::Bitmap>>(v5 - 1, (unint64_t)a2, (uint64_t)v10);
    v14 = &v10[3];
    std::vector<degas::BitsetPtr>::__destroy_vector::operator()[abi:ne180100]((void ***)&v14);
    v10[0] = (void **)v13;
    std::vector<degas::BitsetPtr>::__destroy_vector::operator()[abi:ne180100](v10);
  }
}

void sub_1CA177A38(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void **a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19)
{
  uint64_t v19;
  uint64_t v20;

  *(_QWORD *)(v20 - 40) = v19;
  std::vector<degas::BitsetPtr>::__destroy_vector::operator()[abi:ne180100]((void ***)(v20 - 40));
  a10 = (void **)&a19;
  std::vector<degas::BitsetPtr>::__destroy_vector::operator()[abi:ne180100](&a10);
  _Unwind_Resume(a1);
}

void degas::LabelIndex_Transaction::addEdge(degas::LabelIndex_Transaction *this, void **a2, unint64_t a3)
{
  _QWORD *v4;
  uint64_t *v5;
  uint64_t *v6;
  unint64_t v7;
  BOOL v8;
  _QWORD *v9;
  void **v10[6];
  char v11;
  __int128 v12;
  __int128 *v13[5];
  void ***v14;

  if (!*((_BYTE *)this + 32))
    __assert_rtn("addEdge", "labelIndex.cpp", 608, "_inTransaction");
  v5 = (uint64_t *)((char *)this + 96);
  v4 = (_QWORD *)*((_QWORD *)this + 12);
  if (!v4)
    goto LABEL_13;
  v6 = (uint64_t *)((char *)this + 96);
  do
  {
    v7 = v4[4];
    v8 = v7 >= (unint64_t)a2;
    if (v7 >= (unint64_t)a2)
      v9 = v4;
    else
      v9 = v4 + 1;
    if (v8)
      v6 = v4;
    v4 = (_QWORD *)*v9;
  }
  while (*v9);
  if (v6 != v5 && v6[4] <= (unint64_t)a2)
  {
    degas::Bitmap::setBit((degas::Bitmap *)(v6 + 5), a3);
  }
  else
  {
LABEL_13:
    v12 = 0u;
    memset(v13, 0, 25);
    degas::Bitmap::setBit((degas::Bitmap *)&v12, a3);
    v10[0] = a2;
    v10[1] = (void **)v12;
    memset(&v10[2], 0, 32);
    std::vector<degas::BitsetPtr>::__init_with_size[abi:ne180100]<degas::BitsetPtr*,degas::BitsetPtr*>((char *)&v10[3], v13[0], v13[1], v13[1] - v13[0]);
    v11 = (char)v13[3];
    std::__tree<std::__value_type<unsigned long long,degas::Bitmap>,std::__map_value_compare<unsigned long long,std::__value_type<unsigned long long,degas::Bitmap>,std::less<unsigned long long>,true>,std::allocator<std::__value_type<unsigned long long,degas::Bitmap>>>::__emplace_unique_key_args<unsigned long long,std::pair<unsigned long long,degas::Bitmap>>(v5 - 1, (unint64_t)a2, (uint64_t)v10);
    v14 = &v10[3];
    std::vector<degas::BitsetPtr>::__destroy_vector::operator()[abi:ne180100]((void ***)&v14);
    v10[0] = (void **)v13;
    std::vector<degas::BitsetPtr>::__destroy_vector::operator()[abi:ne180100](v10);
  }
}

void sub_1CA177BA0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void **a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19)
{
  uint64_t v19;
  uint64_t v20;

  *(_QWORD *)(v20 - 40) = v19;
  std::vector<degas::BitsetPtr>::__destroy_vector::operator()[abi:ne180100]((void ***)(v20 - 40));
  a10 = (void **)&a19;
  std::vector<degas::BitsetPtr>::__destroy_vector::operator()[abi:ne180100](&a10);
  _Unwind_Resume(a1);
}

void degas::LabelIndex_Transaction::removeEdge(degas::LabelIndex_Transaction *this, void **a2, unint64_t a3)
{
  _QWORD *v4;
  uint64_t *v5;
  uint64_t *v6;
  unint64_t v7;
  BOOL v8;
  _QWORD *v9;
  void **v10[6];
  char v11;
  __int128 v12;
  __int128 *v13[5];
  void ***v14;

  if (!*((_BYTE *)this + 32))
    __assert_rtn("removeEdge", "labelIndex.cpp", 623, "_inTransaction");
  v5 = (uint64_t *)((char *)this + 120);
  v4 = (_QWORD *)*((_QWORD *)this + 15);
  if (!v4)
    goto LABEL_13;
  v6 = (uint64_t *)((char *)this + 120);
  do
  {
    v7 = v4[4];
    v8 = v7 >= (unint64_t)a2;
    if (v7 >= (unint64_t)a2)
      v9 = v4;
    else
      v9 = v4 + 1;
    if (v8)
      v6 = v4;
    v4 = (_QWORD *)*v9;
  }
  while (*v9);
  if (v6 != v5 && v6[4] <= (unint64_t)a2)
  {
    degas::Bitmap::setBit((degas::Bitmap *)(v6 + 5), a3);
  }
  else
  {
LABEL_13:
    v12 = 0u;
    memset(v13, 0, 25);
    degas::Bitmap::setBit((degas::Bitmap *)&v12, a3);
    v10[0] = a2;
    v10[1] = (void **)v12;
    memset(&v10[2], 0, 32);
    std::vector<degas::BitsetPtr>::__init_with_size[abi:ne180100]<degas::BitsetPtr*,degas::BitsetPtr*>((char *)&v10[3], v13[0], v13[1], v13[1] - v13[0]);
    v11 = (char)v13[3];
    std::__tree<std::__value_type<unsigned long long,degas::Bitmap>,std::__map_value_compare<unsigned long long,std::__value_type<unsigned long long,degas::Bitmap>,std::less<unsigned long long>,true>,std::allocator<std::__value_type<unsigned long long,degas::Bitmap>>>::__emplace_unique_key_args<unsigned long long,std::pair<unsigned long long,degas::Bitmap>>(v5 - 1, (unint64_t)a2, (uint64_t)v10);
    v14 = &v10[3];
    std::vector<degas::BitsetPtr>::__destroy_vector::operator()[abi:ne180100]((void ***)&v14);
    v10[0] = (void **)v13;
    std::vector<degas::BitsetPtr>::__destroy_vector::operator()[abi:ne180100](v10);
  }
}

void sub_1CA177D08(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void **a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19)
{
  uint64_t v19;
  uint64_t v20;

  *(_QWORD *)(v20 - 40) = v19;
  std::vector<degas::BitsetPtr>::__destroy_vector::operator()[abi:ne180100]((void ***)(v20 - 40));
  a10 = (void **)&a19;
  std::vector<degas::BitsetPtr>::__destroy_vector::operator()[abi:ne180100](&a10);
  _Unwind_Resume(a1);
}

_QWORD *degas::LabelIndex_Transaction::removeNodes(degas::LabelIndex_Transaction *this, const degas::Bitmap *a2, __int128 **a3)
{
  _QWORD *result;
  uint64_t v7;
  char *v8;
  BOOL v9;
  _QWORD *v11;
  char *v12;
  unint64_t v13;
  BOOL v14;
  _QWORD *v15;
  __int128 *v16;
  unint64_t v17[6];
  char v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  void **v22;

  if (!*((_BYTE *)this + 32))
    __assert_rtn("removeNodes", "labelIndex.cpp", 594, "_inTransaction");
  result = degas::Bitmap::begin(a2, &v19);
  v7 = *((_QWORD *)a2 + 3);
  v8 = (char *)this + 72;
  while (1)
  {
    v9 = (const degas::Bitmap *)v19 == a2 && v20 == -1;
    if (v9 && v21 == v7)
      return result;
    v11 = *(_QWORD **)v8;
    if (!*(_QWORD *)v8)
      goto LABEL_21;
    v12 = (char *)this + 72;
    do
    {
      v13 = v11[4];
      v14 = v13 >= v20;
      if (v13 >= v20)
        v15 = v11;
      else
        v15 = v11 + 1;
      if (v14)
        v12 = (char *)v11;
      v11 = (_QWORD *)*v15;
    }
    while (*v15);
    if (v12 != v8 && v20 >= *((_QWORD *)v12 + 4))
    {
      degas::Bitmap::unionWith<degas::Bitmap>((degas::Bitmap *)(v12 + 40), (uint64_t)a3);
    }
    else
    {
LABEL_21:
      v16 = *a3;
      v17[0] = v20;
      v17[1] = (unint64_t)v16;
      memset(&v17[2], 0, 32);
      std::vector<degas::BitsetPtr>::__init_with_size[abi:ne180100]<degas::BitsetPtr*,degas::BitsetPtr*>((char *)&v17[3], a3[2], a3[3], a3[3] - a3[2]);
      v18 = *((_BYTE *)a3 + 40);
      std::__tree<std::__value_type<unsigned long long,degas::Bitmap>,std::__map_value_compare<unsigned long long,std::__value_type<unsigned long long,degas::Bitmap>,std::less<unsigned long long>,true>,std::allocator<std::__value_type<unsigned long long,degas::Bitmap>>>::__emplace_unique_key_args<unsigned long long,std::pair<unsigned long long,degas::Bitmap>>((uint64_t *)this + 8, v17[0], (uint64_t)v17);
      v22 = (void **)&v17[3];
      std::vector<degas::BitsetPtr>::__destroy_vector::operator()[abi:ne180100](&v22);
    }
    result = degas::Bitmap::iterator::operator++(&v19);
  }
}

void sub_1CA177E88(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v2 - 72) = v1;
  std::vector<degas::BitsetPtr>::__destroy_vector::operator()[abi:ne180100]((void ***)(v2 - 72));
  _Unwind_Resume(a1);
}

_QWORD *degas::LabelIndex_Transaction::removeEdges(degas::LabelIndex_Transaction *this, const degas::Bitmap *a2, __int128 **a3)
{
  _QWORD *result;
  uint64_t v7;
  char *v8;
  BOOL v9;
  _QWORD *v11;
  char *v12;
  unint64_t v13;
  BOOL v14;
  _QWORD *v15;
  __int128 *v16;
  unint64_t v17[6];
  char v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  void **v22;

  if (!*((_BYTE *)this + 32))
    __assert_rtn("removeEdges", "labelIndex.cpp", 638, "_inTransaction");
  result = degas::Bitmap::begin(a2, &v19);
  v7 = *((_QWORD *)a2 + 3);
  v8 = (char *)this + 120;
  while (1)
  {
    v9 = (const degas::Bitmap *)v19 == a2 && v20 == -1;
    if (v9 && v21 == v7)
      return result;
    v11 = *(_QWORD **)v8;
    if (!*(_QWORD *)v8)
      goto LABEL_21;
    v12 = (char *)this + 120;
    do
    {
      v13 = v11[4];
      v14 = v13 >= v20;
      if (v13 >= v20)
        v15 = v11;
      else
        v15 = v11 + 1;
      if (v14)
        v12 = (char *)v11;
      v11 = (_QWORD *)*v15;
    }
    while (*v15);
    if (v12 != v8 && v20 >= *((_QWORD *)v12 + 4))
    {
      degas::Bitmap::unionWith<degas::Bitmap>((degas::Bitmap *)(v12 + 40), (uint64_t)a3);
    }
    else
    {
LABEL_21:
      v16 = *a3;
      v17[0] = v20;
      v17[1] = (unint64_t)v16;
      memset(&v17[2], 0, 32);
      std::vector<degas::BitsetPtr>::__init_with_size[abi:ne180100]<degas::BitsetPtr*,degas::BitsetPtr*>((char *)&v17[3], a3[2], a3[3], a3[3] - a3[2]);
      v18 = *((_BYTE *)a3 + 40);
      std::__tree<std::__value_type<unsigned long long,degas::Bitmap>,std::__map_value_compare<unsigned long long,std::__value_type<unsigned long long,degas::Bitmap>,std::less<unsigned long long>,true>,std::allocator<std::__value_type<unsigned long long,degas::Bitmap>>>::__emplace_unique_key_args<unsigned long long,std::pair<unsigned long long,degas::Bitmap>>((uint64_t *)this + 14, v17[0], (uint64_t)v17);
      v22 = (void **)&v17[3];
      std::vector<degas::BitsetPtr>::__destroy_vector::operator()[abi:ne180100](&v22);
    }
    result = degas::Bitmap::iterator::operator++(&v19);
  }
}

void sub_1CA177FE8(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v2 - 72) = v1;
  std::vector<degas::BitsetPtr>::__destroy_vector::operator()[abi:ne180100]((void ***)(v2 - 72));
  _Unwind_Resume(a1);
}

uint64_t *std::__tree<std::__value_type<unsigned long long,degas::Bitmap>,std::__map_value_compare<unsigned long long,std::__value_type<unsigned long long,degas::Bitmap>,std::less<unsigned long long>,true>,std::allocator<std::__value_type<unsigned long long,degas::Bitmap>>>::__emplace_unique_key_args<unsigned long long,std::pair<unsigned long long,degas::Bitmap>>(uint64_t *result, unint64_t a2, uint64_t a3)
{
  uint64_t **v4;
  uint64_t *v5;
  uint64_t **v6;
  uint64_t **v7;
  unint64_t v8;
  void *v9;

  v4 = (uint64_t **)result;
  v6 = (uint64_t **)(result + 1);
  v5 = (uint64_t *)result[1];
  if (v5)
  {
    while (1)
    {
      while (1)
      {
        v7 = (uint64_t **)v5;
        v8 = v5[4];
        if (v8 <= a2)
          break;
        v5 = *v7;
        v6 = v7;
        if (!*v7)
          goto LABEL_9;
      }
      if (v8 >= a2)
        break;
      v5 = v7[1];
      if (!v5)
      {
        v6 = v7 + 1;
        goto LABEL_9;
      }
    }
  }
  else
  {
    v7 = (uint64_t **)(result + 1);
LABEL_9:
    v9 = operator new(0x58uLL);
    *((_OWORD *)v9 + 2) = *(_OWORD *)a3;
    *((_OWORD *)v9 + 3) = 0u;
    *((_OWORD *)v9 + 4) = 0u;
    std::vector<degas::BitsetPtr>::__init_with_size[abi:ne180100]<degas::BitsetPtr*,degas::BitsetPtr*>((char *)v9 + 56, *(__int128 **)(a3 + 24), *(__int128 **)(a3 + 32), (uint64_t)(*(_QWORD *)(a3 + 32) - *(_QWORD *)(a3 + 24)) >> 4);
    *((_BYTE *)v9 + 80) = *(_BYTE *)(a3 + 48);
    return std::__tree<std::__value_type<unsigned long long,degas::Bitmap>,std::__map_value_compare<unsigned long long,std::__value_type<unsigned long long,degas::Bitmap>,std::less<unsigned long long>,true>,std::allocator<std::__value_type<unsigned long long,degas::Bitmap>>>::__insert_node_at(v4, (uint64_t)v7, v6, (uint64_t *)v9);
  }
  return result;
}

void sub_1CA1780D0(_Unwind_Exception *a1)
{
  void **v1;

  std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<unsigned long long,degas::Bitmap>,void *>>>::operator()[abi:ne180100](0, v1);
  _Unwind_Resume(a1);
}

uint64_t degas::LabelIndex_Persisted::update(uint64_t a1, degas::LabelTable *a2, _QWORD *a3, _QWORD *a4, _QWORD *a5, _QWORD *a6)
{
  _QWORD *v12;
  _QWORD *v13;
  _QWORD *v14;
  _QWORD *v15;
  unint64_t v16;
  _QWORD *v17;
  _QWORD *v18;
  unint64_t v19;
  BOOL v20;
  _QWORD *v21;
  _QWORD *v22;
  _QWORD *v23;
  _QWORD *v24;
  _QWORD *v25;
  _QWORD *v26;
  _QWORD *v27;
  unint64_t v28;
  _QWORD *v29;
  _QWORD *v30;
  unint64_t v31;
  BOOL v32;
  _QWORD *v33;
  _QWORD *v34;
  _QWORD *v35;
  _QWORD *v36;
  _QWORD *v37;
  _QWORD *v38;
  _QWORD *v39;
  unint64_t v40;
  _QWORD *v41;
  _QWORD *v42;
  unint64_t v43;
  BOOL v44;
  _QWORD *v45;
  _QWORD *v46;
  _QWORD *v47;
  _QWORD *v48;
  _QWORD *v49;
  _QWORD *v50;
  _QWORD *v51;
  unint64_t v52;
  _QWORD *v53;
  _QWORD *v54;
  unint64_t v55;
  BOOL v56;
  _QWORD *v57;
  _QWORD *v58;
  _QWORD *v59;
  _QWORD *v60;
  _QWORD *v61;
  unint64_t v62;
  BOOL v63;
  _QWORD *v64;
  _QWORD *v65;
  unint64_t v66;
  BOOL v67;
  _QWORD *v68;
  _QWORD *v69;
  _QWORD *v70;
  unint64_t v71;
  BOOL v72;
  _QWORD *v73;
  uint64_t v74;
  os_unfair_lock_s *lock;
  degas::LabelTable *v77;
  _QWORD *v78;
  __int128 v79;
  _BYTE v80[40];
  unint64_t v81;
  unint64_t v82;
  uint64_t v83;
  unint64_t v84[2];
  char v85[32];
  char v86;
  __int128 v87;
  _QWORD v88[4];
  void **v89;

  lock = (os_unfair_lock_s *)(a1 + 56);
  os_unfair_lock_lock((os_unfair_lock_t)(a1 + 56));
  v77 = a2;
  v78 = (_QWORD *)a1;
  degas::LabelIndex_Persisted::locked_populate((uint64_t **)a1, a2);
  v87 = 0u;
  memset(v88, 0, 25);
  v14 = (_QWORD *)*a3;
  v12 = a3 + 1;
  v13 = v14;
  if (v14 != v12)
  {
    v15 = (_QWORD *)(a1 + 16);
    do
    {
      *(_OWORD *)v84 = *((_OWORD *)v13 + 2);
      memset(v85, 0, sizeof(v85));
      std::vector<degas::BitsetPtr>::__init_with_size[abi:ne180100]<degas::BitsetPtr*,degas::BitsetPtr*>(&v85[8], (__int128 *)v13[7], (__int128 *)v13[8], (uint64_t)(v13[8] - v13[7]) >> 4);
      v86 = *((_BYTE *)v13 + 80);
      v16 = v84[0];
      degas::Bitmap::setBit((degas::Bitmap *)&v87, v84[0]);
      v17 = (_QWORD *)*v15;
      if (!*v15)
        goto LABEL_14;
      v18 = (_QWORD *)(a1 + 16);
      do
      {
        v19 = v17[4];
        v20 = v19 >= v16;
        if (v19 >= v16)
          v21 = v17;
        else
          v21 = v17 + 1;
        if (v20)
          v18 = v17;
        v17 = (_QWORD *)*v21;
      }
      while (*v21);
      if (v18 != v15 && v16 >= v18[4])
        degas::Bitmap::unionWith<degas::Bitmap>((degas::Bitmap *)(v18 + 5), (uint64_t)&v84[1]);
      else
LABEL_14:
        std::__tree<std::__value_type<unsigned long long,degas::Bitmap>,std::__map_value_compare<unsigned long long,std::__value_type<unsigned long long,degas::Bitmap>,std::less<unsigned long long>,true>,std::allocator<std::__value_type<unsigned long long,degas::Bitmap>>>::__emplace_unique_key_args<unsigned long long,std::pair<unsigned long long const,degas::Bitmap> const&>((uint64_t *)(a1 + 8), v84[0], (uint64_t)v84);
      *(_QWORD *)&v79 = &v85[8];
      std::vector<degas::BitsetPtr>::__destroy_vector::operator()[abi:ne180100]((void ***)&v79);
      v22 = (_QWORD *)v13[1];
      if (v22)
      {
        do
        {
          v23 = v22;
          v22 = (_QWORD *)*v22;
        }
        while (v22);
      }
      else
      {
        do
        {
          v23 = (_QWORD *)v13[2];
          v63 = *v23 == (_QWORD)v13;
          v13 = v23;
        }
        while (!v63);
      }
      v13 = v23;
    }
    while (v23 != v12);
  }
  v26 = (_QWORD *)*a4;
  v25 = a4 + 1;
  v24 = v26;
  if (v26 != v25)
  {
    v27 = (_QWORD *)(a1 + 16);
    do
    {
      *(_OWORD *)v84 = *((_OWORD *)v24 + 2);
      memset(v85, 0, sizeof(v85));
      std::vector<degas::BitsetPtr>::__init_with_size[abi:ne180100]<degas::BitsetPtr*,degas::BitsetPtr*>(&v85[8], (__int128 *)v24[7], (__int128 *)v24[8], (uint64_t)(v24[8] - v24[7]) >> 4);
      v86 = *((_BYTE *)v24 + 80);
      v28 = v84[0];
      degas::Bitmap::setBit((degas::Bitmap *)&v87, v84[0]);
      v29 = (_QWORD *)*v27;
      if (*v27)
      {
        v30 = v27;
        do
        {
          v31 = v29[4];
          v32 = v31 >= v28;
          if (v31 >= v28)
            v33 = v29;
          else
            v33 = v29 + 1;
          if (v32)
            v30 = v29;
          v29 = (_QWORD *)*v33;
        }
        while (*v33);
        if (v30 != v27 && v28 >= v30[4])
          degas::Bitmap::diffWith<degas::Bitmap>((degas::Bitmap *)(v30 + 5), (degas::Bitmap *)&v84[1]);
      }
      *(_QWORD *)&v79 = &v85[8];
      std::vector<degas::BitsetPtr>::__destroy_vector::operator()[abi:ne180100]((void ***)&v79);
      v34 = (_QWORD *)v24[1];
      if (v34)
      {
        do
        {
          v35 = v34;
          v34 = (_QWORD *)*v34;
        }
        while (v34);
      }
      else
      {
        do
        {
          v35 = (_QWORD *)v24[2];
          v63 = *v35 == (_QWORD)v24;
          v24 = v35;
        }
        while (!v63);
      }
      v24 = v35;
    }
    while (v35 != v25);
  }
  v38 = (_QWORD *)*a5;
  v37 = a5 + 1;
  v36 = v38;
  if (v38 != v37)
  {
    v39 = v78 + 5;
    do
    {
      *(_OWORD *)v84 = *((_OWORD *)v36 + 2);
      memset(v85, 0, sizeof(v85));
      std::vector<degas::BitsetPtr>::__init_with_size[abi:ne180100]<degas::BitsetPtr*,degas::BitsetPtr*>(&v85[8], (__int128 *)v36[7], (__int128 *)v36[8], (uint64_t)(v36[8] - v36[7]) >> 4);
      v86 = *((_BYTE *)v36 + 80);
      v40 = v84[0];
      degas::Bitmap::setBit((degas::Bitmap *)&v87, v84[0]);
      v41 = (_QWORD *)*v39;
      if (!*v39)
        goto LABEL_56;
      v42 = v78 + 5;
      do
      {
        v43 = v41[4];
        v44 = v43 >= v40;
        if (v43 >= v40)
          v45 = v41;
        else
          v45 = v41 + 1;
        if (v44)
          v42 = v41;
        v41 = (_QWORD *)*v45;
      }
      while (*v45);
      if (v42 != v39 && v40 >= v42[4])
        degas::Bitmap::unionWith<degas::Bitmap>((degas::Bitmap *)(v42 + 5), (uint64_t)&v84[1]);
      else
LABEL_56:
        std::__tree<std::__value_type<unsigned long long,degas::Bitmap>,std::__map_value_compare<unsigned long long,std::__value_type<unsigned long long,degas::Bitmap>,std::less<unsigned long long>,true>,std::allocator<std::__value_type<unsigned long long,degas::Bitmap>>>::__emplace_unique_key_args<unsigned long long,std::pair<unsigned long long const,degas::Bitmap> const&>(v78 + 4, v84[0], (uint64_t)v84);
      *(_QWORD *)&v79 = &v85[8];
      std::vector<degas::BitsetPtr>::__destroy_vector::operator()[abi:ne180100]((void ***)&v79);
      v46 = (_QWORD *)v36[1];
      if (v46)
      {
        do
        {
          v47 = v46;
          v46 = (_QWORD *)*v46;
        }
        while (v46);
      }
      else
      {
        do
        {
          v47 = (_QWORD *)v36[2];
          v63 = *v47 == (_QWORD)v36;
          v36 = v47;
        }
        while (!v63);
      }
      v36 = v47;
    }
    while (v47 != v37);
  }
  v50 = (_QWORD *)*a6;
  v49 = a6 + 1;
  v48 = v50;
  if (v50 != v49)
  {
    v51 = v78 + 5;
    do
    {
      *(_OWORD *)v84 = *((_OWORD *)v48 + 2);
      memset(v85, 0, sizeof(v85));
      std::vector<degas::BitsetPtr>::__init_with_size[abi:ne180100]<degas::BitsetPtr*,degas::BitsetPtr*>(&v85[8], (__int128 *)v48[7], (__int128 *)v48[8], (uint64_t)(v48[8] - v48[7]) >> 4);
      v86 = *((_BYTE *)v48 + 80);
      v52 = v84[0];
      degas::Bitmap::setBit((degas::Bitmap *)&v87, v84[0]);
      v53 = (_QWORD *)*v51;
      if (*v51)
      {
        v54 = v78 + 5;
        do
        {
          v55 = v53[4];
          v56 = v55 >= v52;
          if (v55 >= v52)
            v57 = v53;
          else
            v57 = v53 + 1;
          if (v56)
            v54 = v53;
          v53 = (_QWORD *)*v57;
        }
        while (*v57);
        if (v54 != v51 && v52 >= v54[4])
          degas::Bitmap::diffWith<degas::Bitmap>((degas::Bitmap *)(v54 + 5), (degas::Bitmap *)&v84[1]);
      }
      *(_QWORD *)&v79 = &v85[8];
      std::vector<degas::BitsetPtr>::__destroy_vector::operator()[abi:ne180100]((void ***)&v79);
      v58 = (_QWORD *)v48[1];
      if (v58)
      {
        do
        {
          v59 = v58;
          v58 = (_QWORD *)*v58;
        }
        while (v58);
      }
      else
      {
        do
        {
          v59 = (_QWORD *)v48[2];
          v63 = *v59 == (_QWORD)v48;
          v48 = v59;
        }
        while (!v63);
      }
      v48 = v59;
    }
    while (v59 != v49);
  }
  degas::Bitmap::begin(&v87, &v81);
  v60 = v78 + 2;
  v61 = v78 + 5;
  while (1)
  {
    v62 = v82;
    v63 = (__int128 *)v81 == &v87 && v82 == -1;
    if (v63)
      break;
LABEL_93:
    *(_OWORD *)v84 = 0u;
    memset(v85, 0, 25);
    v79 = 0u;
    memset(v80, 0, 25);
    v64 = (_QWORD *)*v60;
    if (*v60)
    {
      v65 = v78 + 2;
      do
      {
        v66 = v64[4];
        v67 = v66 >= v62;
        if (v66 >= v62)
          v68 = v64;
        else
          v68 = v64 + 1;
        if (v67)
          v65 = v64;
        v64 = (_QWORD *)*v68;
      }
      while (*v68);
      if (v65 != v60 && v62 >= v65[4])
        degas::Bitmap::operator=(v84, v65 + 5);
    }
    v69 = (_QWORD *)*v61;
    if (*v61)
    {
      v70 = v78 + 5;
      do
      {
        v71 = v69[4];
        v72 = v71 >= v62;
        if (v71 >= v62)
          v73 = v69;
        else
          v73 = v69 + 1;
        if (v72)
          v70 = v69;
        v69 = (_QWORD *)*v73;
      }
      while (*v73);
      if (v70 != v61 && v62 >= v70[4])
        degas::Bitmap::operator=(&v79, v70 + 5);
    }
    v74 = degas::LabelTable::update(v77, v62, (const degas::Bitmap *)v84, (const degas::Bitmap *)&v79);
    v89 = (void **)v80;
    std::vector<degas::BitsetPtr>::__destroy_vector::operator()[abi:ne180100](&v89);
    *(_QWORD *)&v79 = v85;
    std::vector<degas::BitsetPtr>::__destroy_vector::operator()[abi:ne180100]((void ***)&v79);
    if ((_DWORD)v74)
      goto LABEL_120;
    degas::Bitmap::iterator::operator++(&v81);
  }
  if (v83 != v88[1])
  {
    v62 = -1;
    goto LABEL_93;
  }
  v74 = 0;
LABEL_120:
  os_unfair_lock_unlock(lock);
  v84[0] = (unint64_t)v88;
  std::vector<degas::BitsetPtr>::__destroy_vector::operator()[abi:ne180100]((void ***)v84);
  return v74;
}

void sub_1CA1786AC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void **a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,void **a23)
{
  uint64_t v23;

  std::vector<degas::BitsetPtr>::__destroy_vector::operator()[abi:ne180100](&a13);
  a23 = (void **)(v23 - 128);
  std::vector<degas::BitsetPtr>::__destroy_vector::operator()[abi:ne180100](&a23);
  _Unwind_Resume(a1);
}

uint64_t *std::__tree<std::__value_type<unsigned long long,degas::Bitmap>,std::__map_value_compare<unsigned long long,std::__value_type<unsigned long long,degas::Bitmap>,std::less<unsigned long long>,true>,std::allocator<std::__value_type<unsigned long long,degas::Bitmap>>>::__emplace_unique_key_args<unsigned long long,std::pair<unsigned long long const,degas::Bitmap> const&>(uint64_t *result, unint64_t a2, uint64_t a3)
{
  uint64_t **v3;
  uint64_t *v4;
  uint64_t **v5;
  uint64_t **v6;
  unint64_t v7;
  uint64_t *v8;

  v3 = (uint64_t **)result;
  v5 = (uint64_t **)(result + 1);
  v4 = (uint64_t *)result[1];
  if (v4)
  {
    while (1)
    {
      while (1)
      {
        v6 = (uint64_t **)v4;
        v7 = v4[4];
        if (v7 <= a2)
          break;
        v4 = *v6;
        v5 = v6;
        if (!*v6)
          goto LABEL_9;
      }
      if (v7 >= a2)
        break;
      v4 = v6[1];
      if (!v4)
      {
        v5 = v6 + 1;
        goto LABEL_9;
      }
    }
  }
  else
  {
    v6 = (uint64_t **)(result + 1);
LABEL_9:
    std::__tree<std::__value_type<unsigned long long,degas::Bitmap>,std::__map_value_compare<unsigned long long,std::__value_type<unsigned long long,degas::Bitmap>,std::less<unsigned long long>,true>,std::allocator<std::__value_type<unsigned long long,degas::Bitmap>>>::__construct_node<std::pair<unsigned long long const,degas::Bitmap> const&>((uint64_t)&v8, (uint64_t)result, a3);
    return std::__tree<std::__value_type<unsigned long long,degas::Bitmap>,std::__map_value_compare<unsigned long long,std::__value_type<unsigned long long,degas::Bitmap>,std::less<unsigned long long>,true>,std::allocator<std::__value_type<unsigned long long,degas::Bitmap>>>::__insert_node_at(v3, (uint64_t)v6, v5, v8);
  }
  return result;
}

uint64_t degas::LabelIndexDirectory::LabelIndexDirectory(uint64_t this)
{
  *(_QWORD *)(this + 16) = 0;
  *(_QWORD *)(this + 8) = 0;
  *(_QWORD *)this = this + 8;
  *(_DWORD *)(this + 24) = 0;
  return this;
}

{
  *(_QWORD *)(this + 16) = 0;
  *(_QWORD *)(this + 8) = 0;
  *(_QWORD *)this = this + 8;
  *(_DWORD *)(this + 24) = 0;
  return this;
}

void degas::LabelIndexDirectory::indexForDatabasePath(uint64_t a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  os_unfair_lock_s *v6;
  uint64_t **v7;
  uint64_t *v8;
  unint64_t *v9;
  unint64_t v10;
  uint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  uint64_t *v15;
  uint64_t *v16;
  _QWORD *v17;
  uint64_t **v18;
  char *v19;
  uint64_t v20;
  uint64_t *v21;
  unint64_t *v22;
  unint64_t v23;
  uint64_t v24;
  unint64_t *v25;
  unint64_t v26;
  std::__shared_weak_count *v27;
  unint64_t *v28;
  unint64_t v29;
  std::string __p;
  __int128 v31;
  uint64_t v32;
  std::__shared_weak_count *v33;

  v6 = (os_unfair_lock_s *)(a1 + 24);
  os_unfair_lock_lock((os_unfair_lock_t)(a1 + 24));
  v7 = (uint64_t **)std::__tree<std::__value_type<std::string,std::shared_ptr<degas::LabelIndex_Persisted>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<degas::LabelIndex_Persisted>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<degas::LabelIndex_Persisted>>>>::find<std::string>(a1, (_QWORD *)a2);
  if ((uint64_t **)(a1 + 8) != v7)
  {
    os_unfair_lock_unlock(v6);
    v8 = v7[8];
    *a3 = v7[7];
    a3[1] = v8;
    if (v8)
    {
      v9 = (unint64_t *)(v8 + 1);
      do
        v10 = __ldxr(v9);
      while (__stxr(v10 + 1, v9));
    }
    return;
  }
  v11 = operator new();
  *(_QWORD *)(v11 + 16) = 0;
  *(_QWORD *)v11 = &off_1E83E2AB8;
  *(_QWORD *)(v11 + 8) = v11 + 16;
  *(_QWORD *)(v11 + 40) = 0;
  *(_QWORD *)(v11 + 48) = 0;
  *(_QWORD *)(v11 + 24) = 0;
  *(_QWORD *)(v11 + 32) = v11 + 40;
  *(_DWORD *)(v11 + 56) = 0;
  *(_BYTE *)(v11 + 60) = 0;
  v32 = v11;
  v12 = (std::__shared_weak_count *)operator new();
  v12->__shared_owners_ = 0;
  p_shared_owners = (unint64_t *)&v12->__shared_owners_;
  v12->__vftable = (std::__shared_weak_count_vtbl *)&off_1E83E2CD8;
  v12->__shared_weak_owners_ = 0;
  v12[1].__vftable = (std::__shared_weak_count_vtbl *)v11;
  v33 = v12;
  if (*(char *)(a2 + 23) < 0)
    std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)a2, *(_QWORD *)(a2 + 8));
  else
    __p = *(std::string *)a2;
  *(_QWORD *)&v31 = v11;
  *((_QWORD *)&v31 + 1) = v12;
  do
    v14 = __ldxr(p_shared_owners);
  while (__stxr(v14 + 1, p_shared_owners));
  v15 = *v7;
  if (*v7)
  {
    while (1)
    {
      while (1)
      {
        v16 = v15;
        v17 = v15 + 4;
        if (!std::less<std::string>::operator()[abi:ne180100](&__p, v15 + 4))
          break;
        v15 = (uint64_t *)*v16;
        v18 = (uint64_t **)v16;
        if (!*v16)
          goto LABEL_19;
      }
      if (!std::less<std::string>::operator()[abi:ne180100](v17, &__p))
        break;
      v18 = (uint64_t **)(v16 + 1);
      v15 = (uint64_t *)v16[1];
      if (!v15)
        goto LABEL_19;
    }
    v19 = (char *)v16;
  }
  else
  {
    v16 = (uint64_t *)v7;
    v18 = v7;
LABEL_19:
    v19 = (char *)operator new(0x48uLL);
    *(std::string *)(v19 + 32) = __p;
    memset(&__p, 0, sizeof(__p));
    *(_OWORD *)(v19 + 56) = v31;
    v31 = 0uLL;
    *(_QWORD *)v19 = 0;
    *((_QWORD *)v19 + 1) = 0;
    *((_QWORD *)v19 + 2) = v16;
    *v18 = (uint64_t *)v19;
    v20 = **(_QWORD **)a1;
    v21 = (uint64_t *)v19;
    if (v20)
    {
      *(_QWORD *)a1 = v20;
      v21 = *v18;
    }
    std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(*v7, v21);
    ++*(_QWORD *)(a1 + 16);
    v12 = (std::__shared_weak_count *)*((_QWORD *)&v31 + 1);
    if (!*((_QWORD *)&v31 + 1))
      goto LABEL_28;
  }
  v22 = (unint64_t *)&v12->__shared_owners_;
  do
    v23 = __ldaxr(v22);
  while (__stlxr(v23 - 1, v22));
  if (!v23)
  {
    ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
    std::__shared_weak_count::__release_weak(v12);
  }
LABEL_28:
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  os_unfair_lock_unlock(v6);
  *a3 = *((_QWORD *)v19 + 7);
  v24 = *((_QWORD *)v19 + 8);
  a3[1] = v24;
  if (v24)
  {
    v25 = (unint64_t *)(v24 + 8);
    do
      v26 = __ldxr(v25);
    while (__stxr(v26 + 1, v25));
  }
  v27 = v33;
  if (v33)
  {
    v28 = (unint64_t *)&v33->__shared_owners_;
    do
      v29 = __ldaxr(v28);
    while (__stlxr(v29 - 1, v28));
    if (!v29)
    {
      ((void (*)(std::__shared_weak_count *))v27->__on_zero_shared)(v27);
      std::__shared_weak_count::__release_weak(v27);
    }
  }
}

void sub_1CA178B38(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  std::shared_ptr<degas::Predicate>::~shared_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

_QWORD *std::__tree<std::__value_type<std::string,std::shared_ptr<degas::LabelIndex_Persisted>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<degas::LabelIndex_Persisted>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<degas::LabelIndex_Persisted>>>>::find<std::string>(uint64_t a1, _QWORD *a2)
{
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v5;
  _BOOL4 v6;
  _QWORD *v7;

  v2 = (_QWORD *)(a1 + 8);
  v3 = *(_QWORD **)(a1 + 8);
  if (!v3)
    return v2;
  v5 = (_QWORD *)(a1 + 8);
  do
  {
    v6 = std::less<std::string>::operator()[abi:ne180100](v3 + 4, a2);
    v7 = v3 + 1;
    if (!v6)
    {
      v7 = v3;
      v5 = v3;
    }
    v3 = (_QWORD *)*v7;
  }
  while (*v7);
  if (v5 == v2 || std::less<std::string>::operator()[abi:ne180100](a2, v5 + 4))
    return v2;
  return v5;
}

uint64_t std::pair<std::string,std::shared_ptr<degas::LabelIndex_Persisted>>::~pair(uint64_t a1)
{
  std::shared_ptr<degas::Predicate>::~shared_ptr[abi:ne180100](a1 + 24);
  if (*(char *)(a1 + 23) < 0)
    operator delete(*(void **)a1);
  return a1;
}

void std::__destroy_at[abi:ne180100]<std::pair<std::string const,std::shared_ptr<degas::LabelIndex_Persisted>>,0>(uint64_t a1)
{
  std::shared_ptr<degas::Predicate>::~shared_ptr[abi:ne180100](a1 + 24);
  if (*(char *)(a1 + 23) < 0)
    operator delete(*(void **)a1);
}

BOOL std::less<std::string>::operator()[abi:ne180100](_QWORD *a1, _QWORD *a2)
{
  int v2;
  int v3;
  size_t v4;
  size_t v5;
  size_t v6;
  int v7;

  v2 = *((char *)a2 + 23);
  v3 = *((char *)a1 + 23);
  if (v3 >= 0)
    v4 = *((unsigned __int8 *)a1 + 23);
  else
    v4 = a1[1];
  if (v3 < 0)
    a1 = (_QWORD *)*a1;
  if (v2 >= 0)
    v5 = *((unsigned __int8 *)a2 + 23);
  else
    v5 = a2[1];
  if (v2 < 0)
    a2 = (_QWORD *)*a2;
  if (v5 >= v4)
    v6 = v4;
  else
    v6 = v5;
  v7 = memcmp(a1, a2, v6);
  if (v7)
    return v7 < 0;
  else
    return v4 < v5;
}

void std::__shared_ptr_pointer<degas::LabelIndex_Persisted *,std::shared_ptr<degas::LabelIndex_Persisted>::__shared_ptr_default_delete<degas::LabelIndex_Persisted,degas::LabelIndex_Persisted>,std::allocator<degas::LabelIndex_Persisted>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1CAA4ADC8);
}

uint64_t std::__shared_ptr_pointer<degas::LabelIndex_Persisted *,std::shared_ptr<degas::LabelIndex_Persisted>::__shared_ptr_default_delete<degas::LabelIndex_Persisted,degas::LabelIndex_Persisted>,std::allocator<degas::LabelIndex_Persisted>>::__on_zero_shared(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 24);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

uint64_t std::__shared_ptr_pointer<degas::LabelIndex_Persisted *,std::shared_ptr<degas::LabelIndex_Persisted>::__shared_ptr_default_delete<degas::LabelIndex_Persisted,degas::LabelIndex_Persisted>,std::allocator<degas::LabelIndex_Persisted>>::__get_deleter(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(_QWORD *)(a2 + 8), 0x80000001CA1FCE2DLL))
    return a1 + 24;
  else
    return 0;
}

uint64_t degas::LabelIndex_Persisted::LabelIndex_Persisted(uint64_t this)
{
  *(_QWORD *)(this + 16) = 0;
  *(_QWORD *)this = &off_1E83E2AB8;
  *(_QWORD *)(this + 8) = this + 16;
  *(_QWORD *)(this + 40) = 0;
  *(_QWORD *)(this + 48) = 0;
  *(_QWORD *)(this + 24) = 0;
  *(_QWORD *)(this + 32) = this + 40;
  *(_DWORD *)(this + 56) = 0;
  *(_BYTE *)(this + 60) = 0;
  return this;
}

{
  *(_QWORD *)(this + 16) = 0;
  *(_QWORD *)this = &off_1E83E2AB8;
  *(_QWORD *)(this + 8) = this + 16;
  *(_QWORD *)(this + 40) = 0;
  *(_QWORD *)(this + 48) = 0;
  *(_QWORD *)(this + 24) = 0;
  *(_QWORD *)(this + 32) = this + 40;
  *(_DWORD *)(this + 56) = 0;
  *(_BYTE *)(this + 60) = 0;
  return this;
}

void degas::LabelIndexDirectory::resetIndexForDatabasePath(os_unfair_lock_s *a1, _QWORD *a2)
{
  os_unfair_lock_s *v4;
  os_unfair_lock_s *v5;

  v4 = a1 + 6;
  os_unfair_lock_lock(a1 + 6);
  v5 = (os_unfair_lock_s *)std::__tree<std::__value_type<std::string,std::shared_ptr<degas::LabelIndex_Persisted>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<degas::LabelIndex_Persisted>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<degas::LabelIndex_Persisted>>>>::find<std::string>((uint64_t)a1, a2);
  if (&a1[2] != v5)
    (*(void (**)(_QWORD))(**(_QWORD **)&v5[14]._os_unfair_lock_opaque + 72))(*(_QWORD *)&v5[14]._os_unfair_lock_opaque);
  os_unfair_lock_unlock(v4);
}

_QWORD *degas::LabelIndex::LabelIndex(_QWORD *this)
{
  *this = off_1E83E2998;
  return this;
}

_QWORD *degas::LabelIndex_Immediate::LabelIndex_Immediate(_QWORD *result, uint64_t a2)
{
  *result = &off_1E83E2A28;
  result[1] = a2;
  return result;
}

{
  *result = &off_1E83E2A28;
  result[1] = a2;
  return result;
}

void degas::LabelIndex_Persisted::populate(os_unfair_lock_s *this, degas::LabelTable *a2)
{
  os_unfair_lock_s *v4;

  v4 = this + 14;
  os_unfair_lock_lock(this + 14);
  degas::LabelIndex_Persisted::locked_populate((uint64_t **)this, a2);
  os_unfair_lock_unlock(v4);
}

uint64_t degas::LabelIndex_Snapshot::LabelIndex_Snapshot(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v6;

  *(_QWORD *)a1 = &off_1E83E2B48;
  v6 = (_QWORD *)(a1 + 8);
  degas::indexDirectory((degas *)a1);
  degas::LabelIndexDirectory::indexForDatabasePath((uint64_t)&degas::indexDirectory(void)::sIndexDirectory, a2, v6);
  *(_QWORD *)(a1 + 64) = 0;
  *(_QWORD *)(a1 + 40) = 0;
  *(_QWORD *)(a1 + 24) = a3;
  *(_QWORD *)(a1 + 32) = a1 + 40;
  *(_QWORD *)(a1 + 72) = 0;
  *(_QWORD *)(a1 + 48) = 0;
  *(_QWORD *)(a1 + 56) = a1 + 64;
  *(_BYTE *)(a1 + 80) = 0;
  if (!*(_QWORD *)(a1 + 8))
    __assert_rtn("LabelIndex_Snapshot", "labelIndex.cpp", 460, "_baseIndex");
  return a1;
}

void sub_1CA178F70(_Unwind_Exception *a1)
{
  uint64_t v1;
  char **v2;
  char **v3;

  std::__tree<std::__value_type<unsigned long long,degas::Bitmap>,std::__map_value_compare<unsigned long long,std::__value_type<unsigned long long,degas::Bitmap>,std::less<unsigned long long>,true>,std::allocator<std::__value_type<unsigned long long,degas::Bitmap>>>::destroy(*v3);
  std::__tree<std::__value_type<unsigned long long,degas::Bitmap>,std::__map_value_compare<unsigned long long,std::__value_type<unsigned long long,degas::Bitmap>,std::less<unsigned long long>,true>,std::allocator<std::__value_type<unsigned long long,degas::Bitmap>>>::destroy(*v2);
  std::shared_ptr<degas::Predicate>::~shared_ptr[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

void degas::indexDirectory(degas *this)
{
  unsigned __int8 v1;

  if ((v1 & 1) == 0)
  {
    {
      qword_1ED852BE8 = 0;
      qword_1ED852BE0 = 0;
      degas::indexDirectory(void)::sIndexDirectory = (uint64_t)&qword_1ED852BE0;
      dword_1ED852BF0 = 0;
      __cxa_atexit((void (*)(void *))degas::LabelIndexDirectory::~LabelIndexDirectory, &degas::indexDirectory(void)::sIndexDirectory, &dword_1CA0A5000);
    }
  }
}

void degas::LabelIndexDirectory::~LabelIndexDirectory(degas::LabelIndexDirectory *this)
{
  std::__tree<std::__value_type<std::string,std::shared_ptr<degas::LabelIndex_Persisted>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<degas::LabelIndex_Persisted>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<degas::LabelIndex_Persisted>>>>::destroy(*((_QWORD **)this + 1));
}

void std::__tree<std::__value_type<std::string,std::shared_ptr<degas::LabelIndex_Persisted>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<degas::LabelIndex_Persisted>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<degas::LabelIndex_Persisted>>>>::destroy(_QWORD *a1)
{
  if (a1)
  {
    std::__tree<std::__value_type<std::string,std::shared_ptr<degas::LabelIndex_Persisted>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<degas::LabelIndex_Persisted>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<degas::LabelIndex_Persisted>>>>::destroy(*a1);
    std::__tree<std::__value_type<std::string,std::shared_ptr<degas::LabelIndex_Persisted>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<degas::LabelIndex_Persisted>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<degas::LabelIndex_Persisted>>>>::destroy(a1[1]);
    std::__destroy_at[abi:ne180100]<std::pair<std::string const,std::shared_ptr<degas::LabelIndex_Persisted>>,0>((uint64_t)(a1 + 4));
    operator delete(a1);
  }
}

uint64_t degas::LabelIndex_Transaction::LabelIndex_Transaction(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v6;

  *(_QWORD *)a1 = &off_1E83E2BD8;
  v6 = (_QWORD *)(a1 + 8);
  degas::indexDirectory((degas *)a1);
  degas::LabelIndexDirectory::indexForDatabasePath((uint64_t)&degas::indexDirectory(void)::sIndexDirectory, a2, v6);
  *(_QWORD *)(a1 + 120) = 0;
  *(_QWORD *)(a1 + 24) = a3;
  *(_BYTE *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 48) = 0;
  *(_QWORD *)(a1 + 72) = 0;
  *(_QWORD *)(a1 + 40) = a1 + 48;
  *(_QWORD *)(a1 + 56) = 0;
  *(_QWORD *)(a1 + 64) = a1 + 72;
  *(_QWORD *)(a1 + 96) = 0;
  *(_QWORD *)(a1 + 80) = 0;
  *(_QWORD *)(a1 + 88) = a1 + 96;
  *(_QWORD *)(a1 + 128) = 0;
  *(_QWORD *)(a1 + 104) = 0;
  *(_QWORD *)(a1 + 112) = a1 + 120;
  if (!*(_QWORD *)(a1 + 8))
    __assert_rtn("LabelIndex_Transaction", "labelIndex.cpp", 554, "_baseIndex");
  return a1;
}

void sub_1CA179138(_Unwind_Exception *a1)
{
  uint64_t v1;
  char **v2;
  char **v3;
  char **v4;
  char **v5;

  std::__tree<std::__value_type<unsigned long long,degas::Bitmap>,std::__map_value_compare<unsigned long long,std::__value_type<unsigned long long,degas::Bitmap>,std::less<unsigned long long>,true>,std::allocator<std::__value_type<unsigned long long,degas::Bitmap>>>::destroy(*v4);
  std::__tree<std::__value_type<unsigned long long,degas::Bitmap>,std::__map_value_compare<unsigned long long,std::__value_type<unsigned long long,degas::Bitmap>,std::less<unsigned long long>,true>,std::allocator<std::__value_type<unsigned long long,degas::Bitmap>>>::destroy(*v5);
  std::__tree<std::__value_type<unsigned long long,degas::Bitmap>,std::__map_value_compare<unsigned long long,std::__value_type<unsigned long long,degas::Bitmap>,std::less<unsigned long long>,true>,std::allocator<std::__value_type<unsigned long long,degas::Bitmap>>>::destroy(*v3);
  std::__tree<std::__value_type<unsigned long long,degas::Bitmap>,std::__map_value_compare<unsigned long long,std::__value_type<unsigned long long,degas::Bitmap>,std::less<unsigned long long>,true>,std::allocator<std::__value_type<unsigned long long,degas::Bitmap>>>::destroy(*v2);
  std::shared_ptr<degas::Predicate>::~shared_ptr[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

void degas::LabelIndex_Transaction::resetForPath(degas *a1)
{
  degas::indexDirectory(a1);
  degas::LabelIndexDirectory::resetIndexForDatabasePath((os_unfair_lock_s *)&degas::indexDirectory(void)::sIndexDirectory, a1);
}

void degas::TransactionLogTable::~TransactionLogTable(degas::TransactionLogTable *this)
{
  *(_QWORD *)this = off_1E83E43A8;
  *((_QWORD *)this + 4) = 0;
  if (*((char *)this + 31) < 0)
    operator delete(*((void **)this + 1));
}

{
  *(_QWORD *)this = off_1E83E43A8;
  *((_QWORD *)this + 4) = 0;
  if (*((char *)this + 31) < 0)
    operator delete(*((void **)this + 1));
  JUMPOUT(0x1CAA4ADC8);
}

{
  *(_QWORD *)this = off_1E83E43A8;
  *((_QWORD *)this + 4) = 0;
  if (*((char *)this + 31) < 0)
    operator delete(*((void **)this + 1));
}

uint64_t degas::TransactionLogTable::createTable(degas::TransactionLogTable *this)
{
  sqlite3 *v1;
  uint64_t v2;
  void *__p[2];
  char v5;
  sqlite3_stmt *ppStmt[3];

  v1 = (sqlite3 *)*((_QWORD *)this + 4);
  std::string::basic_string[abi:ne180100]<0>(__p, "create table TransactionLog (identifier integer primary key autoincrement, nodeIdsInserted blob, edgeIdsInserted blob, nodeIdsUpdated blob, edgeIdsUpdated blob, nodeIdsDeleted blob, edgeIdsDeleted blob)");
  degas::Statement::Statement(ppStmt, v1, (uint64_t)__p);
  if (v5 < 0)
    operator delete(__p[0]);
  v2 = degas::Statement::update(ppStmt);
  degas::Statement::~Statement((degas::Statement *)ppStmt);
  return v2;
}

void sub_1CA179298(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15)
{
  degas::Statement::~Statement((degas::Statement *)&a15);
  _Unwind_Resume(a1);
}

uint64_t degas::TransactionLogTable::deleteEntry(degas::TransactionLogTable *this, sqlite3_int64 a2)
{
  unsigned int v4;
  uint64_t v5;
  uint64_t *Statement;
  uint64_t v7;
  const char *v9;
  __int128 v10;
  void (*v11)(uint64_t@<X0>, _QWORD *@<X8>);
  void *v12;
  degas::TransactionLogTable *v13;
  uint64_t v14;

  v14 = *MEMORY[0x1E0C80C00];
  v4 = (*((unsigned __int8 *)this + 48) << 16) | 0x500;
  v5 = *((_QWORD *)this + 5);
  *(_QWORD *)&v10 = MEMORY[0x1E0C809B0];
  *((_QWORD *)&v10 + 1) = 0x40000000;
  v11 = ___ZNK5degas19TransactionLogTable15deleteStatementEv_block_invoke;
  v12 = &__block_descriptor_tmp_4_1129;
  v13 = this;
  Statement = degas::StatementCache::getStatement(v5, v4, (uint64_t)&v10);
  degas::Statement::bindInteger((sqlite3_stmt **)*Statement, 1, a2);
  v7 = degas::Statement::update((sqlite3_stmt **)*Statement);
  if ((_DWORD)v7 && os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
  {
    v9 = sqlite3_errmsg(*((sqlite3 **)this + 4));
    LODWORD(v10) = 136315138;
    *(_QWORD *)((char *)&v10 + 4) = v9;
    _os_log_error_impl(&dword_1CA0A5000, MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR, "transaction log entry delete failed: %s", (uint8_t *)&v10, 0xCu);
  }
  return v7;
}

uint64_t *degas::TransactionLogTable::deleteStatement(degas::TransactionLogTable *this)
{
  unsigned int v1;
  uint64_t v2;
  _QWORD v4[5];

  v1 = (*((unsigned __int8 *)this + 48) << 16) | 0x500;
  v2 = *((_QWORD *)this + 5);
  v4[0] = MEMORY[0x1E0C809B0];
  v4[1] = 0x40000000;
  v4[2] = ___ZNK5degas19TransactionLogTable15deleteStatementEv_block_invoke;
  v4[3] = &__block_descriptor_tmp_4_1129;
  v4[4] = this;
  return degas::StatementCache::getStatement(v2, v1, (uint64_t)v4);
}

void ___ZNK5degas19TransactionLogTable15deleteStatementEv_block_invoke(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v3;
  sqlite3_stmt **v4;
  sqlite3 *v5;
  void *__p[2];
  char v7;

  v3 = *(_QWORD *)(a1 + 32);
  v4 = (sqlite3_stmt **)operator new();
  v5 = *(sqlite3 **)(v3 + 32);
  std::string::basic_string[abi:ne180100]<0>(__p, "delete from TransactionLog where identifier=?1");
  degas::Statement::Statement(v4, v5, (uint64_t)__p);
  std::shared_ptr<degas::Statement>::shared_ptr[abi:ne180100]<degas::Statement,void>(a2, (uint64_t)v4);
  if (v7 < 0)
    operator delete(__p[0]);
}

void sub_1CA1794E0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  uint64_t v15;

  MEMORY[0x1CAA4ADC8](v15, 0x1020C4062D53EE8);
  _Unwind_Resume(a1);
}

degas::TransactionLogTable *degas::TransactionLogTable::TransactionLogTable(degas::TransactionLogTable *this, sqlite3 *a2, degas::StatementCache *a3)
{
  std::string *v6;
  int v7;
  void *__p[2];
  uint64_t v10;

  std::string::basic_string[abi:ne180100]<0>(__p, "TransactionLog");
  *(_QWORD *)this = off_1E83E43A8;
  v6 = (std::string *)((char *)this + 8);
  if (SHIBYTE(v10) < 0)
  {
    std::string::__init_copy_ctor_external(v6, (const std::string::value_type *)__p[0], (std::string::size_type)__p[1]);
    v7 = SHIBYTE(v10);
    *((_QWORD *)this + 4) = a2;
    *((_QWORD *)this + 5) = a3;
    if (v7 < 0)
      operator delete(__p[0]);
  }
  else
  {
    *(_OWORD *)&v6->__r_.__value_.__l.__data_ = *(_OWORD *)__p;
    *((_QWORD *)this + 3) = v10;
    *((_QWORD *)this + 4) = a2;
    *((_QWORD *)this + 5) = a3;
  }
  *(_QWORD *)this = off_1E83E2D28;
  *((_BYTE *)this + 48) = 13;
  return this;
}

void sub_1CA1795D0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t *degas::TransactionLogTable::insertStatement(degas::TransactionLogTable *this)
{
  unsigned int v1;
  uint64_t v2;
  _QWORD v4[5];

  v1 = (*((unsigned __int8 *)this + 48) << 16) | 0x300;
  v2 = *((_QWORD *)this + 5);
  v4[0] = MEMORY[0x1E0C809B0];
  v4[1] = 0x40000000;
  v4[2] = ___ZNK5degas19TransactionLogTable15insertStatementEv_block_invoke;
  v4[3] = &__block_descriptor_tmp_1134;
  v4[4] = this;
  return degas::StatementCache::getStatement(v2, v1, (uint64_t)v4);
}

void ___ZNK5degas19TransactionLogTable15insertStatementEv_block_invoke(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v3;
  sqlite3_stmt **v4;
  sqlite3 *v5;
  void *__p[2];
  char v7;

  v3 = *(_QWORD *)(a1 + 32);
  v4 = (sqlite3_stmt **)operator new();
  v5 = *(sqlite3 **)(v3 + 32);
  std::string::basic_string[abi:ne180100]<0>(__p, "insert into TransactionLog (nodeIdsInserted, edgeIdsInserted, nodeIdsUpdated, edgeIdsUpdated, nodeIdsDeleted, edgeIdsDeleted) values (?1, ?2, ?3, ?4, ?5, ?6)");
  degas::Statement::Statement(v4, v5, (uint64_t)__p);
  std::shared_ptr<degas::Statement>::shared_ptr[abi:ne180100]<degas::Statement,void>(a2, (uint64_t)v4);
  if (v7 < 0)
    operator delete(__p[0]);
}

void sub_1CA179728(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  uint64_t v15;

  MEMORY[0x1CAA4ADC8](v15, 0x1020C4062D53EE8);
  _Unwind_Resume(a1);
}

uint64_t *degas::TransactionLogTable::readByIdentifierStatement(degas::TransactionLogTable *this)
{
  unsigned int v1;
  uint64_t v2;
  _QWORD v4[5];

  v1 = (*((unsigned __int8 *)this + 48) << 16) | 0x600;
  v2 = *((_QWORD *)this + 5);
  v4[0] = MEMORY[0x1E0C809B0];
  v4[1] = 0x40000000;
  v4[2] = ___ZNK5degas19TransactionLogTable25readByIdentifierStatementEv_block_invoke;
  v4[3] = &__block_descriptor_tmp_6_1136;
  v4[4] = this;
  return degas::StatementCache::getStatement(v2, v1, (uint64_t)v4);
}

void ___ZNK5degas19TransactionLogTable25readByIdentifierStatementEv_block_invoke(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v3;
  sqlite3_stmt **v4;
  sqlite3 *v5;
  void *__p[2];
  char v7;

  v3 = *(_QWORD *)(a1 + 32);
  v4 = (sqlite3_stmt **)operator new();
  v5 = *(sqlite3 **)(v3 + 32);
  std::string::basic_string[abi:ne180100]<0>(__p, "select identifier, nodeIdsInserted, edgeIdsInserted, nodeIdsUpdated, edgeIdsUpdated, nodeIdsDeleted, edgeIdsDeleted from TransactionLog where identifier=?1");
  degas::Statement::Statement(v4, v5, (uint64_t)__p);
  std::shared_ptr<degas::Statement>::shared_ptr[abi:ne180100]<degas::Statement,void>(a2, (uint64_t)v4);
  if (v7 < 0)
    operator delete(__p[0]);
}

void sub_1CA179868(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  uint64_t v15;

  MEMORY[0x1CAA4ADC8](v15, 0x1020C4062D53EE8);
  _Unwind_Resume(a1);
}

uint64_t *degas::TransactionLogTable::readAfterIdentifierStatement(degas::TransactionLogTable *this)
{
  unsigned int v1;
  uint64_t v2;
  _QWORD v4[5];

  v1 = (*((unsigned __int8 *)this + 48) << 16) | 0x800;
  v2 = *((_QWORD *)this + 5);
  v4[0] = MEMORY[0x1E0C809B0];
  v4[1] = 0x40000000;
  v4[2] = ___ZNK5degas19TransactionLogTable28readAfterIdentifierStatementEv_block_invoke;
  v4[3] = &__block_descriptor_tmp_8;
  v4[4] = this;
  return degas::StatementCache::getStatement(v2, v1, (uint64_t)v4);
}

void ___ZNK5degas19TransactionLogTable28readAfterIdentifierStatementEv_block_invoke(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v3;
  sqlite3_stmt **v4;
  sqlite3 *v5;
  void *__p[2];
  char v7;

  v3 = *(_QWORD *)(a1 + 32);
  v4 = (sqlite3_stmt **)operator new();
  v5 = *(sqlite3 **)(v3 + 32);
  std::string::basic_string[abi:ne180100]<0>(__p, "select identifier, nodeIdsInserted, edgeIdsInserted, nodeIdsUpdated, edgeIdsUpdated, nodeIdsDeleted, edgeIdsDeleted from TransactionLog where identifier>?1");
  degas::Statement::Statement(v4, v5, (uint64_t)__p);
  std::shared_ptr<degas::Statement>::shared_ptr[abi:ne180100]<degas::Statement,void>(a2, (uint64_t)v4);
  if (v7 < 0)
    operator delete(__p[0]);
}

void sub_1CA1799A8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  uint64_t v15;

  MEMORY[0x1CAA4ADC8](v15, 0x1020C4062D53EE8);
  _Unwind_Resume(a1);
}

uint64_t *degas::TransactionLogTable::readAllStatement(degas::TransactionLogTable *this)
{
  unsigned int v1;
  uint64_t v2;
  _QWORD v4[5];

  v1 = (*((unsigned __int8 *)this + 48) << 16) | 0x700;
  v2 = *((_QWORD *)this + 5);
  v4[0] = MEMORY[0x1E0C809B0];
  v4[1] = 0x40000000;
  v4[2] = ___ZNK5degas19TransactionLogTable16readAllStatementEv_block_invoke;
  v4[3] = &__block_descriptor_tmp_10_1139;
  v4[4] = this;
  return degas::StatementCache::getStatement(v2, v1, (uint64_t)v4);
}

void ___ZNK5degas19TransactionLogTable16readAllStatementEv_block_invoke(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v3;
  sqlite3_stmt **v4;
  sqlite3 *v5;
  void *__p[2];
  char v7;

  v3 = *(_QWORD *)(a1 + 32);
  v4 = (sqlite3_stmt **)operator new();
  v5 = *(sqlite3 **)(v3 + 32);
  std::string::basic_string[abi:ne180100]<0>(__p, "select identifier, nodeIdsInserted, edgeIdsInserted, nodeIdsUpdated, edgeIdsUpdated, nodeIdsDeleted, edgeIdsDeleted from TransactionLog");
  degas::Statement::Statement(v4, v5, (uint64_t)__p);
  std::shared_ptr<degas::Statement>::shared_ptr[abi:ne180100]<degas::Statement,void>(a2, (uint64_t)v4);
  if (v7 < 0)
    operator delete(__p[0]);
}

void sub_1CA179AE8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  uint64_t v15;

  MEMORY[0x1CAA4ADC8](v15, 0x1020C4062D53EE8);
  _Unwind_Resume(a1);
}

uint64_t degas::TransactionLogTable::insert(degas::TransactionLogTable *this, sqlite3_int64 *a2, const degas::Bitmap *a3, const degas::Bitmap *a4, const degas::Bitmap *a5, const degas::Bitmap *a6, const degas::Bitmap *a7, const degas::Bitmap *a8)
{
  unsigned int v16;
  uint64_t v17;
  uint64_t *Statement;
  uint64_t v19;
  const char *v20;
  __int128 v22;
  void (*v23)(uint64_t@<X0>, _QWORD *@<X8>);
  void *v24;
  degas::TransactionLogTable *v25;
  uint64_t v26;

  v26 = *MEMORY[0x1E0C80C00];
  v16 = (*((unsigned __int8 *)this + 48) << 16) | 0x300;
  v17 = *((_QWORD *)this + 5);
  *(_QWORD *)&v22 = MEMORY[0x1E0C809B0];
  *((_QWORD *)&v22 + 1) = 0x40000000;
  v23 = ___ZNK5degas19TransactionLogTable15insertStatementEv_block_invoke;
  v24 = &__block_descriptor_tmp_1134;
  v25 = this;
  Statement = degas::StatementCache::getStatement(v17, v16, (uint64_t)&v22);
  degas::Statement::bindBitmap((degas::Statement *)*Statement, (const Bitmap *)1, a3);
  degas::Statement::bindBitmap((degas::Statement *)*Statement, (const Bitmap *)2, a4);
  degas::Statement::bindBitmap((degas::Statement *)*Statement, (const Bitmap *)3, a5);
  degas::Statement::bindBitmap((degas::Statement *)*Statement, (const Bitmap *)4, a6);
  degas::Statement::bindBitmap((degas::Statement *)*Statement, (const Bitmap *)5, a7);
  degas::Statement::bindBitmap((degas::Statement *)*Statement, (const Bitmap *)6, a8);
  v19 = degas::Statement::update((sqlite3_stmt **)*Statement);
  if ((_DWORD)v19)
  {
    if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
    {
      v20 = sqlite3_errmsg(*((sqlite3 **)this + 4));
      LODWORD(v22) = 136315138;
      *(_QWORD *)((char *)&v22 + 4) = v20;
      _os_log_error_impl(&dword_1CA0A5000, MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR, "transaction log entry insert failed: %s", (uint8_t *)&v22, 0xCu);
    }
  }
  else
  {
    *a2 = sqlite3_last_insert_rowid(*((sqlite3 **)this + 4));
  }
  return v19;
}

uint64_t *degas::TransactionLogTable::prepareStatementToReadByIdentifier(degas::TransactionLogTable *this, sqlite3_int64 a2)
{
  unsigned int v3;
  uint64_t v4;
  uint64_t *Statement;
  _QWORD v7[5];

  v3 = (*((unsigned __int8 *)this + 48) << 16) | 0x600;
  v4 = *((_QWORD *)this + 5);
  v7[0] = MEMORY[0x1E0C809B0];
  v7[1] = 0x40000000;
  v7[2] = ___ZNK5degas19TransactionLogTable25readByIdentifierStatementEv_block_invoke;
  v7[3] = &__block_descriptor_tmp_6_1136;
  v7[4] = this;
  Statement = degas::StatementCache::getStatement(v4, v3, (uint64_t)v7);
  degas::Statement::bindInteger((sqlite3_stmt **)*Statement, 1, a2);
  return Statement;
}

uint64_t *degas::TransactionLogTable::prepareStatementToReadAfterIdentifier(degas::TransactionLogTable *this, sqlite3_int64 a2)
{
  unsigned int v3;
  uint64_t v4;
  uint64_t *Statement;
  _QWORD v7[5];

  v3 = (*((unsigned __int8 *)this + 48) << 16) | 0x800;
  v4 = *((_QWORD *)this + 5);
  v7[0] = MEMORY[0x1E0C809B0];
  v7[1] = 0x40000000;
  v7[2] = ___ZNK5degas19TransactionLogTable28readAfterIdentifierStatementEv_block_invoke;
  v7[3] = &__block_descriptor_tmp_8;
  v7[4] = this;
  Statement = degas::StatementCache::getStatement(v4, v3, (uint64_t)v7);
  degas::Statement::bindInteger((sqlite3_stmt **)*Statement, 1, a2);
  return Statement;
}

uint64_t *degas::TransactionLogTable::prepareStatementToReadAll(degas::TransactionLogTable *this)
{
  unsigned int v1;
  uint64_t v2;
  _QWORD v4[5];

  v1 = (*((unsigned __int8 *)this + 48) << 16) | 0x700;
  v2 = *((_QWORD *)this + 5);
  v4[0] = MEMORY[0x1E0C809B0];
  v4[1] = 0x40000000;
  v4[2] = ___ZNK5degas19TransactionLogTable16readAllStatementEv_block_invoke;
  v4[3] = &__block_descriptor_tmp_10_1139;
  v4[4] = this;
  return degas::StatementCache::getStatement(v2, v1, (uint64_t)v4);
}

degas::TransactionLogCursor *degas::TransactionLogCursor::TransactionLogCursor(degas::TransactionLogCursor *this, const degas::TransactionLogTable *a2)
{
  unsigned int v3;
  uint64_t v4;
  uint64_t *Statement;
  uint64_t v6;
  unint64_t *v7;
  unint64_t v8;
  _QWORD v10[5];

  v3 = (*((unsigned __int8 *)a2 + 48) << 16) | 0x700;
  v4 = *((_QWORD *)a2 + 5);
  v10[0] = MEMORY[0x1E0C809B0];
  v10[1] = 0x40000000;
  v10[2] = ___ZNK5degas19TransactionLogTable16readAllStatementEv_block_invoke;
  v10[3] = &__block_descriptor_tmp_10_1139;
  v10[4] = a2;
  Statement = degas::StatementCache::getStatement(v4, v3, (uint64_t)v10);
  *(_QWORD *)this = *Statement;
  v6 = Statement[1];
  *((_QWORD *)this + 1) = v6;
  if (v6)
  {
    v7 = (unint64_t *)(v6 + 8);
    do
      v8 = __ldxr(v7);
    while (__stxr(v8 + 1, v7));
  }
  return this;
}

{
  unsigned int v3;
  uint64_t v4;
  uint64_t *Statement;
  uint64_t v6;
  unint64_t *v7;
  unint64_t v8;
  _QWORD v10[5];

  v3 = (*((unsigned __int8 *)a2 + 48) << 16) | 0x700;
  v4 = *((_QWORD *)a2 + 5);
  v10[0] = MEMORY[0x1E0C809B0];
  v10[1] = 0x40000000;
  v10[2] = ___ZNK5degas19TransactionLogTable16readAllStatementEv_block_invoke;
  v10[3] = &__block_descriptor_tmp_10_1139;
  v10[4] = a2;
  Statement = degas::StatementCache::getStatement(v4, v3, (uint64_t)v10);
  *(_QWORD *)this = *Statement;
  v6 = Statement[1];
  *((_QWORD *)this + 1) = v6;
  if (v6)
  {
    v7 = (unint64_t *)(v6 + 8);
    do
      v8 = __ldxr(v7);
    while (__stxr(v8 + 1, v7));
  }
  return this;
}

degas::TransactionLogCursor *degas::TransactionLogCursor::TransactionLogCursor(degas::TransactionLogCursor *this, sqlite3_int64 a2, const degas::TransactionLogTable *a3)
{
  unsigned int v5;
  uint64_t v6;
  uint64_t *Statement;
  uint64_t v8;
  unint64_t *v9;
  unint64_t v10;
  _QWORD v12[5];

  v5 = (*((unsigned __int8 *)a3 + 48) << 16) | 0x600;
  v6 = *((_QWORD *)a3 + 5);
  v12[0] = MEMORY[0x1E0C809B0];
  v12[1] = 0x40000000;
  v12[2] = ___ZNK5degas19TransactionLogTable25readByIdentifierStatementEv_block_invoke;
  v12[3] = &__block_descriptor_tmp_6_1136;
  v12[4] = a3;
  Statement = degas::StatementCache::getStatement(v6, v5, (uint64_t)v12);
  degas::Statement::bindInteger((sqlite3_stmt **)*Statement, 1, a2);
  *(_QWORD *)this = *Statement;
  v8 = Statement[1];
  *((_QWORD *)this + 1) = v8;
  if (v8)
  {
    v9 = (unint64_t *)(v8 + 8);
    do
      v10 = __ldxr(v9);
    while (__stxr(v10 + 1, v9));
  }
  return this;
}

degas::TransactionLogCursor *degas::TransactionLogCursor::TransactionLogCursor(degas::TransactionLogCursor *this, sqlite3_int64 a2, unsigned int a3, const degas::TransactionLogTable *a4)
{
  unsigned int v6;
  uint64_t v7;
  uint64_t *Statement;
  uint64_t v9;
  unint64_t *v10;
  unint64_t v11;
  _QWORD v13[5];

  v6 = (*((unsigned __int8 *)a4 + 48) << 16) | 0x800;
  v7 = *((_QWORD *)a4 + 5);
  v13[0] = MEMORY[0x1E0C809B0];
  v13[1] = 0x40000000;
  v13[2] = ___ZNK5degas19TransactionLogTable28readAfterIdentifierStatementEv_block_invoke;
  v13[3] = &__block_descriptor_tmp_8;
  v13[4] = a4;
  Statement = degas::StatementCache::getStatement(v7, v6, (uint64_t)v13);
  degas::Statement::bindInteger((sqlite3_stmt **)*Statement, 1, a2);
  *(_QWORD *)this = *Statement;
  v9 = Statement[1];
  *((_QWORD *)this + 1) = v9;
  if (v9)
  {
    v10 = (unint64_t *)(v9 + 8);
    do
      v11 = __ldxr(v10);
    while (__stxr(v11 + 1, v10));
  }
  return this;
}

sqlite3_int64 degas::TransactionLogCursor::transactionId(sqlite3_stmt ***this)
{
  return sqlite3_column_int64(**this, 0);
}

const void *degas::TransactionLogCursor::insertedNodeIds(sqlite3_stmt ***this)
{
  return sqlite3_column_blob(**this, 1);
}

const void *degas::TransactionLogCursor::insertedEdgeIds(sqlite3_stmt ***this)
{
  return sqlite3_column_blob(**this, 2);
}

const void *degas::TransactionLogCursor::updatedNodeIds(sqlite3_stmt ***this)
{
  return sqlite3_column_blob(**this, 3);
}

const void *degas::TransactionLogCursor::updatedEdgeIds(sqlite3_stmt ***this)
{
  return sqlite3_column_blob(**this, 4);
}

const void *degas::TransactionLogCursor::deletedNodeIds(sqlite3_stmt ***this)
{
  return sqlite3_column_blob(**this, 5);
}

const void *degas::TransactionLogCursor::deletedEdgeIds(sqlite3_stmt ***this)
{
  return sqlite3_column_blob(**this, 6);
}

void degas::ClientLogTable::~ClientLogTable(degas::ClientLogTable *this)
{
  *(_QWORD *)this = off_1E83E43A8;
  *((_QWORD *)this + 4) = 0;
  if (*((char *)this + 31) < 0)
    operator delete(*((void **)this + 1));
}

{
  *(_QWORD *)this = off_1E83E43A8;
  *((_QWORD *)this + 4) = 0;
  if (*((char *)this + 31) < 0)
    operator delete(*((void **)this + 1));
  JUMPOUT(0x1CAA4ADC8);
}

{
  *(_QWORD *)this = off_1E83E43A8;
  *((_QWORD *)this + 4) = 0;
  if (*((char *)this + 31) < 0)
    operator delete(*((void **)this + 1));
}

uint64_t degas::ClientLogTable::createTable(degas::ClientLogTable *this)
{
  sqlite3 *v1;
  uint64_t v2;
  void *__p[2];
  char v5;
  sqlite3_stmt *ppStmt[3];

  v1 = (sqlite3 *)*((_QWORD *)this + 4);
  std::string::basic_string[abi:ne180100]<0>(__p, "create table ClientLog (clientId integer primary key, transactionId integer)");
  degas::Statement::Statement(ppStmt, v1, (uint64_t)__p);
  if (v5 < 0)
    operator delete(__p[0]);
  v2 = degas::Statement::update(ppStmt);
  degas::Statement::~Statement((degas::Statement *)ppStmt);
  return v2;
}

void sub_1CA17A270(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15)
{
  degas::Statement::~Statement((degas::Statement *)&a15);
  _Unwind_Resume(a1);
}

uint64_t degas::ClientLogTable::deleteEntry(degas::ClientLogTable *this, sqlite3_int64 a2)
{
  unsigned int v4;
  uint64_t v5;
  uint64_t *Statement;
  uint64_t v7;
  const char *v9;
  __int128 v10;
  void (*v11)(uint64_t@<X0>, _QWORD *@<X8>);
  void *v12;
  degas::ClientLogTable *v13;
  uint64_t v14;

  v14 = *MEMORY[0x1E0C80C00];
  v4 = (*((unsigned __int8 *)this + 48) << 16) | 0x500;
  v5 = *((_QWORD *)this + 5);
  *(_QWORD *)&v10 = MEMORY[0x1E0C809B0];
  *((_QWORD *)&v10 + 1) = 0x40000000;
  v11 = ___ZNK5degas14ClientLogTable15deleteStatementEv_block_invoke;
  v12 = &__block_descriptor_tmp_4_1143;
  v13 = this;
  Statement = degas::StatementCache::getStatement(v5, v4, (uint64_t)&v10);
  degas::Statement::bindInteger((sqlite3_stmt **)*Statement, 1, a2);
  v7 = degas::Statement::update((sqlite3_stmt **)*Statement);
  if ((_DWORD)v7 && os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
  {
    v9 = sqlite3_errmsg(*((sqlite3 **)this + 4));
    LODWORD(v10) = 136315138;
    *(_QWORD *)((char *)&v10 + 4) = v9;
    _os_log_error_impl(&dword_1CA0A5000, MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR, "client log entry delete failed: %s", (uint8_t *)&v10, 0xCu);
  }
  return v7;
}

uint64_t *degas::ClientLogTable::deleteStatement(degas::ClientLogTable *this)
{
  unsigned int v1;
  uint64_t v2;
  _QWORD v4[5];

  v1 = (*((unsigned __int8 *)this + 48) << 16) | 0x500;
  v2 = *((_QWORD *)this + 5);
  v4[0] = MEMORY[0x1E0C809B0];
  v4[1] = 0x40000000;
  v4[2] = ___ZNK5degas14ClientLogTable15deleteStatementEv_block_invoke;
  v4[3] = &__block_descriptor_tmp_4_1143;
  v4[4] = this;
  return degas::StatementCache::getStatement(v2, v1, (uint64_t)v4);
}

void ___ZNK5degas14ClientLogTable15deleteStatementEv_block_invoke(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v3;
  sqlite3_stmt **v4;
  sqlite3 *v5;
  void *__p[2];
  char v7;

  v3 = *(_QWORD *)(a1 + 32);
  v4 = (sqlite3_stmt **)operator new();
  v5 = *(sqlite3 **)(v3 + 32);
  std::string::basic_string[abi:ne180100]<0>(__p, "delete from ClientLog where clientId=?1");
  degas::Statement::Statement(v4, v5, (uint64_t)__p);
  std::shared_ptr<degas::Statement>::shared_ptr[abi:ne180100]<degas::Statement,void>(a2, (uint64_t)v4);
  if (v7 < 0)
    operator delete(__p[0]);
}

void sub_1CA17A4B8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  uint64_t v15;

  MEMORY[0x1CAA4ADC8](v15, 0x1020C4062D53EE8);
  _Unwind_Resume(a1);
}

degas::ClientLogTable *degas::ClientLogTable::ClientLogTable(degas::ClientLogTable *this, sqlite3 *a2, degas::StatementCache *a3)
{
  std::string *v6;
  int v7;
  void *__p[2];
  uint64_t v10;

  std::string::basic_string[abi:ne180100]<0>(__p, "ClientLog");
  *(_QWORD *)this = off_1E83E43A8;
  v6 = (std::string *)((char *)this + 8);
  if (SHIBYTE(v10) < 0)
  {
    std::string::__init_copy_ctor_external(v6, (const std::string::value_type *)__p[0], (std::string::size_type)__p[1]);
    v7 = SHIBYTE(v10);
    *((_QWORD *)this + 4) = a2;
    *((_QWORD *)this + 5) = a3;
    if (v7 < 0)
      operator delete(__p[0]);
  }
  else
  {
    *(_OWORD *)&v6->__r_.__value_.__l.__data_ = *(_OWORD *)__p;
    *((_QWORD *)this + 3) = v10;
    *((_QWORD *)this + 4) = a2;
    *((_QWORD *)this + 5) = a3;
  }
  *(_QWORD *)this = off_1E83E2E10;
  *((_BYTE *)this + 48) = 14;
  return this;
}

void sub_1CA17A5A8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t *degas::ClientLogTable::upsertStatement(degas::ClientLogTable *this)
{
  unsigned int v1;
  uint64_t v2;
  _QWORD v4[5];

  v1 = (*((unsigned __int8 *)this + 48) << 16) | 0x300;
  v2 = *((_QWORD *)this + 5);
  v4[0] = MEMORY[0x1E0C809B0];
  v4[1] = 0x40000000;
  v4[2] = ___ZNK5degas14ClientLogTable15upsertStatementEv_block_invoke;
  v4[3] = &__block_descriptor_tmp_1148;
  v4[4] = this;
  return degas::StatementCache::getStatement(v2, v1, (uint64_t)v4);
}

void ___ZNK5degas14ClientLogTable15upsertStatementEv_block_invoke(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v3;
  sqlite3_stmt **v4;
  sqlite3 *v5;
  void *__p[2];
  char v7;

  v3 = *(_QWORD *)(a1 + 32);
  v4 = (sqlite3_stmt **)operator new();
  v5 = *(sqlite3 **)(v3 + 32);
  std::string::basic_string[abi:ne180100]<0>(__p, "insert or replace into ClientLog (clientId, transactionId) values (?1, ?2)");
  degas::Statement::Statement(v4, v5, (uint64_t)__p);
  std::shared_ptr<degas::Statement>::shared_ptr[abi:ne180100]<degas::Statement,void>(a2, (uint64_t)v4);
  if (v7 < 0)
    operator delete(__p[0]);
}

void sub_1CA17A700(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  uint64_t v15;

  MEMORY[0x1CAA4ADC8](v15, 0x1020C4062D53EE8);
  _Unwind_Resume(a1);
}

uint64_t *degas::ClientLogTable::readByIdentifierStatement(degas::ClientLogTable *this)
{
  unsigned int v1;
  uint64_t v2;
  _QWORD v4[5];

  v1 = (*((unsigned __int8 *)this + 48) << 16) | 0x600;
  v2 = *((_QWORD *)this + 5);
  v4[0] = MEMORY[0x1E0C809B0];
  v4[1] = 0x40000000;
  v4[2] = ___ZNK5degas14ClientLogTable25readByIdentifierStatementEv_block_invoke;
  v4[3] = &__block_descriptor_tmp_6_1150;
  v4[4] = this;
  return degas::StatementCache::getStatement(v2, v1, (uint64_t)v4);
}

void ___ZNK5degas14ClientLogTable25readByIdentifierStatementEv_block_invoke(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v3;
  sqlite3_stmt **v4;
  sqlite3 *v5;
  void *__p[2];
  char v7;

  v3 = *(_QWORD *)(a1 + 32);
  v4 = (sqlite3_stmt **)operator new();
  v5 = *(sqlite3 **)(v3 + 32);
  std::string::basic_string[abi:ne180100]<0>(__p, "select clientId, transactionId from ClientLog where clientId=?1");
  degas::Statement::Statement(v4, v5, (uint64_t)__p);
  std::shared_ptr<degas::Statement>::shared_ptr[abi:ne180100]<degas::Statement,void>(a2, (uint64_t)v4);
  if (v7 < 0)
    operator delete(__p[0]);
}

void sub_1CA17A840(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  uint64_t v15;

  MEMORY[0x1CAA4ADC8](v15, 0x1020C4062D53EE8);
  _Unwind_Resume(a1);
}

uint64_t *degas::ClientLogTable::readAllStatement(degas::ClientLogTable *this)
{
  unsigned int v1;
  uint64_t v2;
  _QWORD v4[5];

  v1 = (*((unsigned __int8 *)this + 48) << 16) | 0x700;
  v2 = *((_QWORD *)this + 5);
  v4[0] = MEMORY[0x1E0C809B0];
  v4[1] = 0x40000000;
  v4[2] = ___ZNK5degas14ClientLogTable16readAllStatementEv_block_invoke;
  v4[3] = &__block_descriptor_tmp_8_1152;
  v4[4] = this;
  return degas::StatementCache::getStatement(v2, v1, (uint64_t)v4);
}

void ___ZNK5degas14ClientLogTable16readAllStatementEv_block_invoke(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v3;
  sqlite3_stmt **v4;
  sqlite3 *v5;
  void *__p[2];
  char v7;

  v3 = *(_QWORD *)(a1 + 32);
  v4 = (sqlite3_stmt **)operator new();
  v5 = *(sqlite3 **)(v3 + 32);
  std::string::basic_string[abi:ne180100]<0>(__p, "select clientId, transactionId from ClientLog");
  degas::Statement::Statement(v4, v5, (uint64_t)__p);
  std::shared_ptr<degas::Statement>::shared_ptr[abi:ne180100]<degas::Statement,void>(a2, (uint64_t)v4);
  if (v7 < 0)
    operator delete(__p[0]);
}

void sub_1CA17A980(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  uint64_t v15;

  MEMORY[0x1CAA4ADC8](v15, 0x1020C4062D53EE8);
  _Unwind_Resume(a1);
}

uint64_t degas::ClientLogTable::upsert(degas::ClientLogTable *this, sqlite3_int64 a2, sqlite3_int64 *a3)
{
  unsigned int v6;
  uint64_t v7;
  uint64_t *Statement;
  std::__shared_weak_count *v9;
  sqlite3_stmt **v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  uint64_t v13;
  unint64_t *v14;
  unint64_t v15;
  const char *v17;
  __int128 buf;
  void (*v19)(uint64_t@<X0>, _QWORD *@<X8>);
  void *v20;
  degas::ClientLogTable *v21;
  uint64_t v22;

  v22 = *MEMORY[0x1E0C80C00];
  v6 = (*((unsigned __int8 *)this + 48) << 16) | 0x300;
  v7 = *((_QWORD *)this + 5);
  *(_QWORD *)&buf = MEMORY[0x1E0C809B0];
  *((_QWORD *)&buf + 1) = 0x40000000;
  v19 = ___ZNK5degas14ClientLogTable15upsertStatementEv_block_invoke;
  v20 = &__block_descriptor_tmp_1148;
  v21 = this;
  Statement = degas::StatementCache::getStatement(v7, v6, (uint64_t)&buf);
  v10 = (sqlite3_stmt **)*Statement;
  v9 = (std::__shared_weak_count *)Statement[1];
  if (v9)
  {
    p_shared_owners = (unint64_t *)&v9->__shared_owners_;
    do
      v12 = __ldxr(p_shared_owners);
    while (__stxr(v12 + 1, p_shared_owners));
  }
  degas::Statement::bindInteger(v10, 1, a2);
  degas::Statement::bindInteger(v10, 2, *a3);
  v13 = degas::Statement::update(v10);
  if ((_DWORD)v13 && os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
  {
    v17 = sqlite3_errmsg(*((sqlite3 **)this + 4));
    LODWORD(buf) = 136315138;
    *(_QWORD *)((char *)&buf + 4) = v17;
    _os_log_error_impl(&dword_1CA0A5000, MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR, "client log entry upsert failed: %s", (uint8_t *)&buf, 0xCu);
    if (!v9)
      return v13;
  }
  else if (!v9)
  {
    return v13;
  }
  v14 = (unint64_t *)&v9->__shared_owners_;
  do
    v15 = __ldaxr(v14);
  while (__stlxr(v15 - 1, v14));
  if (!v15)
  {
    ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
    std::__shared_weak_count::__release_weak(v9);
  }
  return v13;
}

void sub_1CA17AB5C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<degas::Predicate>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t *degas::ClientLogTable::prepareStatementToReadByIdentifier(degas::ClientLogTable *this, sqlite3_int64 a2)
{
  unsigned int v3;
  uint64_t v4;
  uint64_t *Statement;
  _QWORD v7[5];

  v3 = (*((unsigned __int8 *)this + 48) << 16) | 0x600;
  v4 = *((_QWORD *)this + 5);
  v7[0] = MEMORY[0x1E0C809B0];
  v7[1] = 0x40000000;
  v7[2] = ___ZNK5degas14ClientLogTable25readByIdentifierStatementEv_block_invoke;
  v7[3] = &__block_descriptor_tmp_6_1150;
  v7[4] = this;
  Statement = degas::StatementCache::getStatement(v4, v3, (uint64_t)v7);
  degas::Statement::bindInteger((sqlite3_stmt **)*Statement, 1, a2);
  return Statement;
}

uint64_t *degas::ClientLogTable::prepareStatementToReadAll(degas::ClientLogTable *this)
{
  unsigned int v1;
  uint64_t v2;
  _QWORD v4[5];

  v1 = (*((unsigned __int8 *)this + 48) << 16) | 0x700;
  v2 = *((_QWORD *)this + 5);
  v4[0] = MEMORY[0x1E0C809B0];
  v4[1] = 0x40000000;
  v4[2] = ___ZNK5degas14ClientLogTable16readAllStatementEv_block_invoke;
  v4[3] = &__block_descriptor_tmp_8_1152;
  v4[4] = this;
  return degas::StatementCache::getStatement(v2, v1, (uint64_t)v4);
}

degas::ClientLogCursor *degas::ClientLogCursor::ClientLogCursor(degas::ClientLogCursor *this, const degas::ClientLogTable *a2)
{
  unsigned int v3;
  uint64_t v4;
  uint64_t *Statement;
  uint64_t v6;
  unint64_t *v7;
  unint64_t v8;
  _QWORD v10[5];

  v3 = (*((unsigned __int8 *)a2 + 48) << 16) | 0x700;
  v4 = *((_QWORD *)a2 + 5);
  v10[0] = MEMORY[0x1E0C809B0];
  v10[1] = 0x40000000;
  v10[2] = ___ZNK5degas14ClientLogTable16readAllStatementEv_block_invoke;
  v10[3] = &__block_descriptor_tmp_8_1152;
  v10[4] = a2;
  Statement = degas::StatementCache::getStatement(v4, v3, (uint64_t)v10);
  *(_QWORD *)this = *Statement;
  v6 = Statement[1];
  *((_QWORD *)this + 1) = v6;
  if (v6)
  {
    v7 = (unint64_t *)(v6 + 8);
    do
      v8 = __ldxr(v7);
    while (__stxr(v8 + 1, v7));
  }
  return this;
}

{
  unsigned int v3;
  uint64_t v4;
  uint64_t *Statement;
  uint64_t v6;
  unint64_t *v7;
  unint64_t v8;
  _QWORD v10[5];

  v3 = (*((unsigned __int8 *)a2 + 48) << 16) | 0x700;
  v4 = *((_QWORD *)a2 + 5);
  v10[0] = MEMORY[0x1E0C809B0];
  v10[1] = 0x40000000;
  v10[2] = ___ZNK5degas14ClientLogTable16readAllStatementEv_block_invoke;
  v10[3] = &__block_descriptor_tmp_8_1152;
  v10[4] = a2;
  Statement = degas::StatementCache::getStatement(v4, v3, (uint64_t)v10);
  *(_QWORD *)this = *Statement;
  v6 = Statement[1];
  *((_QWORD *)this + 1) = v6;
  if (v6)
  {
    v7 = (unint64_t *)(v6 + 8);
    do
      v8 = __ldxr(v7);
    while (__stxr(v8 + 1, v7));
  }
  return this;
}

degas::ClientLogCursor *degas::ClientLogCursor::ClientLogCursor(degas::ClientLogCursor *this, sqlite3_int64 a2, const degas::ClientLogTable *a3)
{
  unsigned int v5;
  uint64_t v6;
  uint64_t *Statement;
  uint64_t v8;
  unint64_t *v9;
  unint64_t v10;
  _QWORD v12[5];

  v5 = (*((unsigned __int8 *)a3 + 48) << 16) | 0x600;
  v6 = *((_QWORD *)a3 + 5);
  v12[0] = MEMORY[0x1E0C809B0];
  v12[1] = 0x40000000;
  v12[2] = ___ZNK5degas14ClientLogTable25readByIdentifierStatementEv_block_invoke;
  v12[3] = &__block_descriptor_tmp_6_1150;
  v12[4] = a3;
  Statement = degas::StatementCache::getStatement(v6, v5, (uint64_t)v12);
  degas::Statement::bindInteger((sqlite3_stmt **)*Statement, 1, a2);
  *(_QWORD *)this = *Statement;
  v8 = Statement[1];
  *((_QWORD *)this + 1) = v8;
  if (v8)
  {
    v9 = (unint64_t *)(v8 + 8);
    do
      v10 = __ldxr(v9);
    while (__stxr(v10 + 1, v9));
  }
  return this;
}

sqlite3_int64 degas::ClientLogCursor::clientId(sqlite3_stmt ***this)
{
  return sqlite3_column_int64(**this, 0);
}

sqlite3_int64 degas::ClientLogCursor::transactionId(sqlite3_stmt ***this)
{
  return sqlite3_column_int64(**this, 1);
}

void MABenchmarkGetHostMemory(_QWORD *a1, _QWORD *a2)
{
  host_t v4;
  mach_error_t v5;
  host_t v6;
  mach_error_t v7;
  mach_msg_type_number_t host_info_outCnt;
  integer_t v9[4];
  __int128 v10;
  __int128 v11;
  integer_t host_info_out[4];
  __int128 v13;
  _DWORD v14[7];

  v13 = 0u;
  memset(v14, 0, sizeof(v14));
  v11 = 0u;
  *(_OWORD *)host_info_out = 0u;
  *(_OWORD *)v9 = 0u;
  v10 = 0u;
  host_info_outCnt = 15;
  v4 = MEMORY[0x1CAA4B14C]();
  v5 = host_statistics(v4, 2, host_info_out, &host_info_outCnt);
  if (v5)
    mach_error("can't get host_vm_info???\n", v5);
  host_info_outCnt = 12;
  v6 = MEMORY[0x1CAA4B14C]();
  v7 = host_info(v6, 1, v9, &host_info_outCnt);
  if (v7)
    mach_error("can't get host_basic_info???\n", v7);
  *a2 = *MEMORY[0x1E0C85AD8] * host_info_out[0];
  *a1 = *((_QWORD *)&v11 + 1);
}

uint64_t MABenchmarkGetAppMemory()
{
  mach_error_t v0;
  mach_msg_type_number_t task_info_outCnt;
  integer_t task_info_out[4];
  __int128 v4;
  __int128 v5;

  v4 = 0u;
  v5 = 0u;
  *(_OWORD *)task_info_out = 0u;
  task_info_outCnt = 12;
  v0 = task_info(*MEMORY[0x1E0C83DA0], 0x14u, task_info_out, &task_info_outCnt);
  if (v0)
    mach_error("can't get task_basic_info???\n", v0);
  return *(_QWORD *)&task_info_out[2];
}

uint64_t MABenchmarkGetAppMallocMemory()
{
  return 0;
}

void degas::AttributeValueTable::~AttributeValueTable(degas::AttributeValueTable *this)
{
  *(_QWORD *)this = off_1E83E43A8;
  *((_QWORD *)this + 4) = 0;
  if (*((char *)this + 31) < 0)
    operator delete(*((void **)this + 1));
}

{
  *(_QWORD *)this = off_1E83E43A8;
  *((_QWORD *)this + 4) = 0;
  if (*((char *)this + 31) < 0)
    operator delete(*((void **)this + 1));
  JUMPOUT(0x1CAA4ADC8);
}

{
  *(_QWORD *)this = off_1E83E43A8;
  *((_QWORD *)this + 4) = 0;
  if (*((char *)this + 31) < 0)
    operator delete(*((void **)this + 1));
}

uint64_t degas::AttributeValueTable::createTable(degas::AttributeValueTable *this)
{
  int v2;
  char *v3;
  uint64_t v4;
  sqlite3 *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  void *v10;
  int v11;
  char *v12;
  uint64_t v13;
  int v14;
  char *v15;
  uint64_t v16;
  sqlite3 *v17;
  int v18;
  char *v19;
  uint64_t v20;
  int v21;
  char *v22;
  uint64_t v23;
  sqlite3 *v24;
  int v25;
  char *v26;
  uint64_t v27;
  int v28;
  char *v29;
  uint64_t v30;
  sqlite3 *v31;
  void *v33;
  char v34;
  sqlite3_stmt *v35[3];
  void *v36[2];
  char v37;
  void *v38;
  char v39;
  uint64_t v40;
  sqlite3_stmt *v41[3];
  void *v42[2];
  char v43;
  void *v44;
  char v45;
  uint64_t v46;
  sqlite3_stmt *v47[3];
  void *__p[2];
  char v49;
  void *v50;
  char v51;
  uint64_t v52;
  sqlite3_stmt *ppStmt[3];
  _QWORD v54[11];
  char v55;
  uint64_t v56;

  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v54);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v54, (uint64_t)"create table ", 13);
  v2 = *((char *)this + 31);
  if (v2 >= 0)
    v3 = (char *)this + 8;
  else
    v3 = (char *)*((_QWORD *)this + 1);
  if (v2 >= 0)
    v4 = *((unsigned __int8 *)this + 31);
  else
    v4 = *((_QWORD *)this + 2);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v54, (uint64_t)v3, v4);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v54, (uint64_t)" (elementId integer, attributeId integer, intValue integer, realValue real, stringValue text, dataType integer, primary key (elementId, attributeId))", 149);
  v5 = (sqlite3 *)*((_QWORD *)this + 4);
  std::stringbuf::str();
  degas::Statement::Statement(ppStmt, v5, (uint64_t)__p);
  if (v49 < 0)
    operator delete(__p[0]);
  v6 = degas::Statement::update(ppStmt);
  v7 = MEMORY[0x1E0DE4F60];
  v8 = MEMORY[0x1E0DE4FB8];
  if ((_DWORD)v6)
  {
    v9 = (void *)*MEMORY[0x1E0DE4F60];
    v10 = *(void **)(MEMORY[0x1E0DE4F60] + 24);
  }
  else
  {
    std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)__p);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__p, (uint64_t)"create index ", 13);
    v11 = *((char *)this + 31);
    if (v11 >= 0)
      v12 = (char *)this + 8;
    else
      v12 = (char *)*((_QWORD *)this + 1);
    if (v11 >= 0)
      v13 = *((unsigned __int8 *)this + 31);
    else
      v13 = *((_QWORD *)this + 2);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__p, (uint64_t)v12, v13);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__p, (uint64_t)"_intValue on ", 13);
    v14 = *((char *)this + 31);
    if (v14 >= 0)
      v15 = (char *)this + 8;
    else
      v15 = (char *)*((_QWORD *)this + 1);
    if (v14 >= 0)
      v16 = *((unsigned __int8 *)this + 31);
    else
      v16 = *((_QWORD *)this + 2);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__p, (uint64_t)v15, v16);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__p, (uint64_t)" (attributeId, intValue) where intValue not null", 48);
    v17 = (sqlite3 *)*((_QWORD *)this + 4);
    std::stringbuf::str();
    degas::Statement::Statement(v47, v17, (uint64_t)v42);
    if (v43 < 0)
      operator delete(v42[0]);
    v6 = degas::Statement::update(v47);
    if ((_DWORD)v6)
    {
      v9 = *(void **)v7;
      v10 = *(void **)(v7 + 24);
    }
    else
    {
      std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v42);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v42, (uint64_t)"create index ", 13);
      v18 = *((char *)this + 31);
      if (v18 >= 0)
        v19 = (char *)this + 8;
      else
        v19 = (char *)*((_QWORD *)this + 1);
      if (v18 >= 0)
        v20 = *((unsigned __int8 *)this + 31);
      else
        v20 = *((_QWORD *)this + 2);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v42, (uint64_t)v19, v20);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v42, (uint64_t)"_realValue on ", 14);
      v21 = *((char *)this + 31);
      if (v21 >= 0)
        v22 = (char *)this + 8;
      else
        v22 = (char *)*((_QWORD *)this + 1);
      if (v21 >= 0)
        v23 = *((unsigned __int8 *)this + 31);
      else
        v23 = *((_QWORD *)this + 2);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v42, (uint64_t)v22, v23);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v42, (uint64_t)" (attributeId, realValue) where realValue not null", 50);
      v24 = (sqlite3 *)*((_QWORD *)this + 4);
      std::stringbuf::str();
      degas::Statement::Statement(v41, v24, (uint64_t)v36);
      if (v37 < 0)
        operator delete(v36[0]);
      v6 = degas::Statement::update(v41);
      if ((_DWORD)v6)
      {
        v9 = *(void **)v7;
        v10 = *(void **)(v7 + 24);
      }
      else
      {
        std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v36);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v36, (uint64_t)"create index ", 13);
        v25 = *((char *)this + 31);
        if (v25 >= 0)
          v26 = (char *)this + 8;
        else
          v26 = (char *)*((_QWORD *)this + 1);
        if (v25 >= 0)
          v27 = *((unsigned __int8 *)this + 31);
        else
          v27 = *((_QWORD *)this + 2);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v36, (uint64_t)v26, v27);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v36, (uint64_t)"_stringValue on ", 16);
        v28 = *((char *)this + 31);
        if (v28 >= 0)
          v29 = (char *)this + 8;
        else
          v29 = (char *)*((_QWORD *)this + 1);
        if (v28 >= 0)
          v30 = *((unsigned __int8 *)this + 31);
        else
          v30 = *((_QWORD *)this + 2);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v36, (uint64_t)v29, v30);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v36, (uint64_t)" (attributeId, stringValue) where stringValue not null", 54);
        v31 = (sqlite3 *)*((_QWORD *)this + 4);
        std::stringbuf::str();
        degas::Statement::Statement(v35, v31, (uint64_t)&v33);
        if (v34 < 0)
          operator delete(v33);
        v6 = degas::Statement::update(v35);
        degas::Statement::~Statement((degas::Statement *)v35);
        v9 = *(void **)v7;
        v36[0] = v9;
        v10 = *(void **)(v7 + 24);
        *(void **)((char *)v36 + *((_QWORD *)v9 - 3)) = v10;
        v36[1] = (void *)(v8 + 16);
        if (v39 < 0)
          operator delete(v38);
        std::streambuf::~streambuf();
        std::ostream::~ostream();
        MEMORY[0x1CAA4AD98](&v40);
      }
      degas::Statement::~Statement((degas::Statement *)v41);
      v42[0] = v9;
      *(void **)((char *)v42 + *((_QWORD *)v9 - 3)) = v10;
      v42[1] = (void *)(v8 + 16);
      if (v45 < 0)
        operator delete(v44);
      std::streambuf::~streambuf();
      std::ostream::~ostream();
      MEMORY[0x1CAA4AD98](&v46);
    }
    degas::Statement::~Statement((degas::Statement *)v47);
    __p[0] = v9;
    *(void **)((char *)__p + *((_QWORD *)v9 - 3)) = v10;
    __p[1] = (void *)(v8 + 16);
    if (v51 < 0)
      operator delete(v50);
    std::streambuf::~streambuf();
    std::ostream::~ostream();
    MEMORY[0x1CAA4AD98](&v52);
  }
  degas::Statement::~Statement((degas::Statement *)ppStmt);
  v54[0] = v9;
  *(_QWORD *)((char *)v54 + *((_QWORD *)v9 - 3)) = v10;
  v54[1] = v8 + 16;
  if (v55 < 0)
    operator delete((void *)v54[9]);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x1CAA4AD98](&v56);
  return v6;
}

void sub_1CA17BEB8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *__p, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, void *a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,char a48,uint64_t a49,uint64_t a50,void *a51)
{
  degas::Statement::~Statement((degas::Statement *)&a12);
  std::ostringstream::~ostringstream((uint64_t)&a15);
  degas::Statement::~Statement((degas::Statement *)&a48);
  std::ostringstream::~ostringstream((uint64_t)&a51);
  degas::Statement::~Statement((degas::Statement *)&STACK[0x258]);
  std::ostringstream::~ostringstream((uint64_t)&STACK[0x270]);
  degas::Statement::~Statement((degas::Statement *)&STACK[0x378]);
  std::ostringstream::~ostringstream((uint64_t)&STACK[0x390]);
  _Unwind_Resume(a1);
}

uint64_t degas::AttributeValueTable::deleteEntry(degas::AttributeValueTable *this, sqlite3_int64 a2)
{
  unsigned int v3;
  uint64_t v4;
  uint64_t *Statement;
  _QWORD v7[5];

  v3 = (*((unsigned __int8 *)this + 48) << 16) | 0x500;
  v4 = *((_QWORD *)this + 5);
  v7[0] = MEMORY[0x1E0C809B0];
  v7[1] = 0x40000000;
  v7[2] = ___ZNK5degas19AttributeValueTable15deleteStatementEv_block_invoke;
  v7[3] = &__block_descriptor_tmp_26;
  v7[4] = this;
  Statement = degas::StatementCache::getStatement(v4, v3, (uint64_t)v7);
  degas::Statement::bindInteger((sqlite3_stmt **)*Statement, 1, a2);
  return degas::Statement::update((sqlite3_stmt **)*Statement);
}

uint64_t degas::AttributeValueTable::deleteValue(degas::AttributeValueTable *this, sqlite3_int64 a2, sqlite3_int64 a3)
{
  unsigned int v5;
  uint64_t v6;
  uint64_t *Statement;
  _QWORD v9[5];

  v5 = (*((unsigned __int8 *)this + 48) << 16) | 0x501;
  v6 = *((_QWORD *)this + 5);
  v9[0] = MEMORY[0x1E0C809B0];
  v9[1] = 0x40000000;
  v9[2] = ___ZNK5degas19AttributeValueTable20deleteValueStatementEv_block_invoke;
  v9[3] = &__block_descriptor_tmp_28;
  v9[4] = this;
  Statement = degas::StatementCache::getStatement(v6, v5, (uint64_t)v9);
  degas::Statement::bindInteger((sqlite3_stmt **)*Statement, 1, a3);
  degas::Statement::bindInteger((sqlite3_stmt **)*Statement, 2, a2);
  return degas::Statement::update((sqlite3_stmt **)*Statement);
}

uint64_t *degas::AttributeValueTable::deleteValueStatement(degas::AttributeValueTable *this)
{
  unsigned int v1;
  uint64_t v2;
  _QWORD v4[5];

  v1 = (*((unsigned __int8 *)this + 48) << 16) | 0x501;
  v2 = *((_QWORD *)this + 5);
  v4[0] = MEMORY[0x1E0C809B0];
  v4[1] = 0x40000000;
  v4[2] = ___ZNK5degas19AttributeValueTable20deleteValueStatementEv_block_invoke;
  v4[3] = &__block_descriptor_tmp_28;
  v4[4] = this;
  return degas::StatementCache::getStatement(v2, v1, (uint64_t)v4);
}

uint64_t ___ZNK5degas19AttributeValueTable20deleteValueStatementEv_block_invoke@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v3;
  int v4;
  uint64_t v5;
  uint64_t v6;
  sqlite3_stmt **v7;
  sqlite3 *v8;
  void *__p;
  char v11;
  _QWORD v12[11];
  char v13;
  uint64_t v14;

  v3 = *(_QWORD *)(a1 + 32);
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v12);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, (uint64_t)"delete from ", 12);
  v4 = *(char *)(v3 + 31);
  if (v4 >= 0)
    v5 = v3 + 8;
  else
    v5 = *(_QWORD *)(v3 + 8);
  if (v4 >= 0)
    v6 = *(unsigned __int8 *)(v3 + 31);
  else
    v6 = *(_QWORD *)(v3 + 16);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, v5, v6);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, (uint64_t)" where elementId=?1 and attributeId=?2", 38);
  v7 = (sqlite3_stmt **)operator new();
  v8 = *(sqlite3 **)(v3 + 32);
  std::stringbuf::str();
  degas::Statement::Statement(v7, v8, (uint64_t)&__p);
  std::shared_ptr<degas::Statement>::shared_ptr[abi:ne180100]<degas::Statement,void>(a2, (uint64_t)v7);
  if (v11 < 0)
    operator delete(__p);
  v12[0] = *MEMORY[0x1E0DE4F60];
  *(_QWORD *)((char *)v12 + *(_QWORD *)(v12[0] - 24)) = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 24);
  v12[1] = MEMORY[0x1E0DE4FB8] + 16;
  if (v13 < 0)
    operator delete((void *)v12[9]);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  return MEMORY[0x1CAA4AD98](&v14);
}

void sub_1CA17C29C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15)
{
  uint64_t v15;

  MEMORY[0x1CAA4ADC8](v15, 0x1020C4062D53EE8);
  std::ostringstream::~ostringstream((uint64_t)&a15);
  _Unwind_Resume(a1);
}

uint64_t *degas::AttributeValueTable::deleteStatement(degas::AttributeValueTable *this)
{
  unsigned int v1;
  uint64_t v2;
  _QWORD v4[5];

  v1 = (*((unsigned __int8 *)this + 48) << 16) | 0x500;
  v2 = *((_QWORD *)this + 5);
  v4[0] = MEMORY[0x1E0C809B0];
  v4[1] = 0x40000000;
  v4[2] = ___ZNK5degas19AttributeValueTable15deleteStatementEv_block_invoke;
  v4[3] = &__block_descriptor_tmp_26;
  v4[4] = this;
  return degas::StatementCache::getStatement(v2, v1, (uint64_t)v4);
}

uint64_t ___ZNK5degas19AttributeValueTable15deleteStatementEv_block_invoke@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v3;
  int v4;
  uint64_t v5;
  uint64_t v6;
  sqlite3_stmt **v7;
  sqlite3 *v8;
  void *__p;
  char v11;
  _QWORD v12[11];
  char v13;
  uint64_t v14;

  v3 = *(_QWORD *)(a1 + 32);
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v12);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, (uint64_t)"delete from ", 12);
  v4 = *(char *)(v3 + 31);
  if (v4 >= 0)
    v5 = v3 + 8;
  else
    v5 = *(_QWORD *)(v3 + 8);
  if (v4 >= 0)
    v6 = *(unsigned __int8 *)(v3 + 31);
  else
    v6 = *(_QWORD *)(v3 + 16);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, v5, v6);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, (uint64_t)" where elementId=?1", 19);
  v7 = (sqlite3_stmt **)operator new();
  v8 = *(sqlite3 **)(v3 + 32);
  std::stringbuf::str();
  degas::Statement::Statement(v7, v8, (uint64_t)&__p);
  std::shared_ptr<degas::Statement>::shared_ptr[abi:ne180100]<degas::Statement,void>(a2, (uint64_t)v7);
  if (v11 < 0)
    operator delete(__p);
  v12[0] = *MEMORY[0x1E0DE4F60];
  *(_QWORD *)((char *)v12 + *(_QWORD *)(v12[0] - 24)) = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 24);
  v12[1] = MEMORY[0x1E0DE4FB8] + 16;
  if (v13 < 0)
    operator delete((void *)v12[9]);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  return MEMORY[0x1CAA4AD98](&v14);
}

void sub_1CA17C4AC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15)
{
  uint64_t v15;

  MEMORY[0x1CAA4ADC8](v15, 0x1020C4062D53EE8);
  std::ostringstream::~ostringstream((uint64_t)&a15);
  _Unwind_Resume(a1);
}

uint64_t degas::AttributeValueTable::AttributeValueTable(uint64_t a1, uint64_t a2, __int128 *a3, char a4, uint64_t a5)
{
  std::string *v9;
  __int128 v10;

  *(_QWORD *)a1 = off_1E83E43A8;
  v9 = (std::string *)(a1 + 8);
  if (*((char *)a3 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v9, *(const std::string::value_type **)a3, *((_QWORD *)a3 + 1));
  }
  else
  {
    v10 = *a3;
    v9->__r_.__value_.__r.__words[2] = *((_QWORD *)a3 + 2);
    *(_OWORD *)&v9->__r_.__value_.__l.__data_ = v10;
  }
  *(_QWORD *)(a1 + 32) = a2;
  *(_QWORD *)(a1 + 40) = a5;
  *(_QWORD *)a1 = off_1E83E2ED8;
  *(_BYTE *)(a1 + 48) = a4;
  return a1;
}

{
  std::string *v9;
  __int128 v10;

  *(_QWORD *)a1 = off_1E83E43A8;
  v9 = (std::string *)(a1 + 8);
  if (*((char *)a3 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v9, *(const std::string::value_type **)a3, *((_QWORD *)a3 + 1));
  }
  else
  {
    v10 = *a3;
    v9->__r_.__value_.__r.__words[2] = *((_QWORD *)a3 + 2);
    *(_OWORD *)&v9->__r_.__value_.__l.__data_ = v10;
  }
  *(_QWORD *)(a1 + 32) = a2;
  *(_QWORD *)(a1 + 40) = a5;
  *(_QWORD *)a1 = off_1E83E2ED8;
  *(_BYTE *)(a1 + 48) = a4;
  return a1;
}

const char *degas::AttributeValueTable::operatorText(unsigned int a1)
{
  if (a1 > 8)
    return " == ";
  else
    return (const char *)*((_QWORD *)&off_1E83E3198 + a1);
}

const char *degas::AttributeValueTable::listOperatorText(int a1)
{
  _DWORD v3[2];
  uint64_t v4;

  v4 = *MEMORY[0x1E0C80C00];
  switch(a1)
  {
    case 1:
      return " in ";
    case 8:
      return " collate nocasenodiacritics in ";
    case 2:
      return " not in ";
  }
  if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
  {
    v3[0] = 67109120;
    v3[1] = a1;
    _os_log_error_impl(&dword_1CA0A5000, MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR, "unsupported operator for list comparison: %d", (uint8_t *)v3, 8u);
  }
  return "";
}

uint64_t degas::AttributeValueTable::rangeOperatorText(const char *a1, int a2)
{
  size_t v4;
  const char *v5;
  uint64_t v6;
  size_t v7;
  size_t v8;
  size_t v9;
  const char *v10;
  uint64_t v11;
  size_t v12;
  size_t v13;
  size_t v14;
  size_t v15;
  size_t v16;
  size_t v17;
  const char *v18;
  uint64_t v19;
  size_t v20;
  size_t v21;
  _QWORD v23[11];
  char v24;
  uint64_t v25;

  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v23);
  switch(a2)
  {
    case 1:
      v4 = strlen(a1);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v23, (uint64_t)a1, v4);
      v5 = " between ?2 and ?3";
      v6 = 18;
      goto LABEL_14;
    case 2:
      v7 = strlen(a1);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v23, (uint64_t)a1, v7);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v23, (uint64_t)" > ?2 and ", 10);
      v8 = strlen(a1);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v23, (uint64_t)a1, v8);
      v5 = " <= ?3";
      goto LABEL_13;
    case 3:
      v9 = strlen(a1);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v23, (uint64_t)a1, v9);
      v10 = " >= ?2 and ";
      v11 = 11;
      goto LABEL_6;
    case 4:
      v12 = strlen(a1);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v23, (uint64_t)a1, v12);
      v10 = " > ?2 and ";
      v11 = 10;
LABEL_6:
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v23, (uint64_t)v10, v11);
      v13 = strlen(a1);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v23, (uint64_t)a1, v13);
      v5 = " < ?3";
      goto LABEL_9;
    case 5:
      v14 = strlen(a1);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v23, (uint64_t)a1, v14);
      v5 = " not between ?2 and ?3";
      v6 = 22;
      goto LABEL_14;
    case 6:
      v15 = strlen(a1);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v23, (uint64_t)a1, v15);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v23, (uint64_t)" <= ?2 or ", 10);
      v16 = strlen(a1);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v23, (uint64_t)a1, v16);
      v5 = " > ?3";
LABEL_9:
      v6 = 5;
      goto LABEL_14;
    case 7:
      v17 = strlen(a1);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v23, (uint64_t)a1, v17);
      v18 = " < ?2 or ";
      v19 = 9;
      goto LABEL_12;
    case 8:
      v20 = strlen(a1);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v23, (uint64_t)a1, v20);
      v18 = " <= ?2 or ";
      v19 = 10;
LABEL_12:
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v23, (uint64_t)v18, v19);
      v21 = strlen(a1);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v23, (uint64_t)a1, v21);
      v5 = " >= ?3";
LABEL_13:
      v6 = 6;
LABEL_14:
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v23, (uint64_t)v5, v6);
      break;
    default:
      break;
  }
  std::stringbuf::str();
  v23[0] = *MEMORY[0x1E0DE4F60];
  *(_QWORD *)((char *)v23 + *(_QWORD *)(v23[0] - 24)) = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 24);
  v23[1] = MEMORY[0x1E0DE4FB8] + 16;
  if (v24 < 0)
    operator delete((void *)v23[9]);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  return MEMORY[0x1CAA4AD98](&v25);
}

void sub_1CA17CA00(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::ostringstream::~ostringstream((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t *degas::AttributeValueTable::upsertStatement(degas::AttributeValueTable *this)
{
  unsigned int v1;
  uint64_t v2;
  _QWORD v4[5];

  v1 = (*((unsigned __int8 *)this + 48) << 16) | 0x300;
  v2 = *((_QWORD *)this + 5);
  v4[0] = MEMORY[0x1E0C809B0];
  v4[1] = 0x40000000;
  v4[2] = ___ZNK5degas19AttributeValueTable15upsertStatementEv_block_invoke;
  v4[3] = &__block_descriptor_tmp_1245;
  v4[4] = this;
  return degas::StatementCache::getStatement(v2, v1, (uint64_t)v4);
}

uint64_t ___ZNK5degas19AttributeValueTable15upsertStatementEv_block_invoke@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v3;
  int v4;
  uint64_t v5;
  uint64_t v6;
  sqlite3_stmt **v7;
  sqlite3 *v8;
  void *__p;
  char v11;
  _QWORD v12[11];
  char v13;
  uint64_t v14;

  v3 = *(_QWORD *)(a1 + 32);
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v12);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, (uint64_t)"insert or replace into ", 23);
  v4 = *(char *)(v3 + 31);
  if (v4 >= 0)
    v5 = v3 + 8;
  else
    v5 = *(_QWORD *)(v3 + 8);
  if (v4 >= 0)
    v6 = *(unsigned __int8 *)(v3 + 31);
  else
    v6 = *(_QWORD *)(v3 + 16);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, v5, v6);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, (uint64_t)" (elementId, attributeId, intValue, realValue, stringValue, dataType) values (?1, ?2, ?3, ?4, ?5, ?6)", 101);
  v7 = (sqlite3_stmt **)operator new();
  v8 = *(sqlite3 **)(v3 + 32);
  std::stringbuf::str();
  degas::Statement::Statement(v7, v8, (uint64_t)&__p);
  std::shared_ptr<degas::Statement>::shared_ptr[abi:ne180100]<degas::Statement,void>(a2, (uint64_t)v7);
  if (v11 < 0)
    operator delete(__p);
  v12[0] = *MEMORY[0x1E0DE4F60];
  *(_QWORD *)((char *)v12 + *(_QWORD *)(v12[0] - 24)) = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 24);
  v12[1] = MEMORY[0x1E0DE4FB8] + 16;
  if (v13 < 0)
    operator delete((void *)v12[9]);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  return MEMORY[0x1CAA4AD98](&v14);
}

void sub_1CA17CBCC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15)
{
  uint64_t v15;

  MEMORY[0x1CAA4ADC8](v15, 0x1020C4062D53EE8);
  std::ostringstream::~ostringstream((uint64_t)&a15);
  _Unwind_Resume(a1);
}

uint64_t *degas::AttributeValueTable::readByIdentifierStatement(degas::AttributeValueTable *this)
{
  unsigned int v1;
  uint64_t v2;
  _QWORD v4[5];

  v1 = (*((unsigned __int8 *)this + 48) << 16) | 0x600;
  v2 = *((_QWORD *)this + 5);
  v4[0] = MEMORY[0x1E0C809B0];
  v4[1] = 0x40000000;
  v4[2] = ___ZNK5degas19AttributeValueTable25readByIdentifierStatementEv_block_invoke;
  v4[3] = &__block_descriptor_tmp_30;
  v4[4] = this;
  return degas::StatementCache::getStatement(v2, v1, (uint64_t)v4);
}

uint64_t ___ZNK5degas19AttributeValueTable25readByIdentifierStatementEv_block_invoke@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v3;
  int v4;
  uint64_t v5;
  uint64_t v6;
  sqlite3_stmt **v7;
  sqlite3 *v8;
  void *__p;
  char v11;
  _QWORD v12[11];
  char v13;
  uint64_t v14;

  v3 = *(_QWORD *)(a1 + 32);
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v12);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, (uint64_t)"select elementId, attributeId, intValue, realValue, stringValue, dataType from ", 79);
  v4 = *(char *)(v3 + 31);
  if (v4 >= 0)
    v5 = v3 + 8;
  else
    v5 = *(_QWORD *)(v3 + 8);
  if (v4 >= 0)
    v6 = *(unsigned __int8 *)(v3 + 31);
  else
    v6 = *(_QWORD *)(v3 + 16);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, v5, v6);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, (uint64_t)" where elementId=?1", 19);
  v7 = (sqlite3_stmt **)operator new();
  v8 = *(sqlite3 **)(v3 + 32);
  std::stringbuf::str();
  degas::Statement::Statement(v7, v8, (uint64_t)&__p);
  std::shared_ptr<degas::Statement>::shared_ptr[abi:ne180100]<degas::Statement,void>(a2, (uint64_t)v7);
  if (v11 < 0)
    operator delete(__p);
  v12[0] = *MEMORY[0x1E0DE4F60];
  *(_QWORD *)((char *)v12 + *(_QWORD *)(v12[0] - 24)) = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 24);
  v12[1] = MEMORY[0x1E0DE4FB8] + 16;
  if (v13 < 0)
    operator delete((void *)v12[9]);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  return MEMORY[0x1CAA4AD98](&v14);
}

void sub_1CA17CDDC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15)
{
  uint64_t v15;

  MEMORY[0x1CAA4ADC8](v15, 0x1020C4062D53EE8);
  std::ostringstream::~ostringstream((uint64_t)&a15);
  _Unwind_Resume(a1);
}

uint64_t *degas::AttributeValueTable::readByAttrIdIdentifierStatement(degas::AttributeValueTable *this)
{
  unsigned int v1;
  uint64_t v2;
  _QWORD v4[5];

  v1 = (*((unsigned __int8 *)this + 48) << 16) | 0x800;
  v2 = *((_QWORD *)this + 5);
  v4[0] = MEMORY[0x1E0C809B0];
  v4[1] = 0x40000000;
  v4[2] = ___ZNK5degas19AttributeValueTable31readByAttrIdIdentifierStatementEv_block_invoke;
  v4[3] = &__block_descriptor_tmp_31;
  v4[4] = this;
  return degas::StatementCache::getStatement(v2, v1, (uint64_t)v4);
}

uint64_t ___ZNK5degas19AttributeValueTable31readByAttrIdIdentifierStatementEv_block_invoke@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v3;
  int v4;
  uint64_t v5;
  uint64_t v6;
  sqlite3_stmt **v7;
  sqlite3 *v8;
  void *__p;
  char v11;
  _QWORD v12[11];
  char v13;
  uint64_t v14;

  v3 = *(_QWORD *)(a1 + 32);
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v12);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, (uint64_t)"select elementId, attributeId, intValue, realValue, stringValue, dataType from ", 79);
  v4 = *(char *)(v3 + 31);
  if (v4 >= 0)
    v5 = v3 + 8;
  else
    v5 = *(_QWORD *)(v3 + 8);
  if (v4 >= 0)
    v6 = *(unsigned __int8 *)(v3 + 31);
  else
    v6 = *(_QWORD *)(v3 + 16);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, v5, v6);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, (uint64_t)" where elementId=?1 and attributeId=?2", 38);
  v7 = (sqlite3_stmt **)operator new();
  v8 = *(sqlite3 **)(v3 + 32);
  std::stringbuf::str();
  degas::Statement::Statement(v7, v8, (uint64_t)&__p);
  std::shared_ptr<degas::Statement>::shared_ptr[abi:ne180100]<degas::Statement,void>(a2, (uint64_t)v7);
  if (v11 < 0)
    operator delete(__p);
  v12[0] = *MEMORY[0x1E0DE4F60];
  *(_QWORD *)((char *)v12 + *(_QWORD *)(v12[0] - 24)) = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 24);
  v12[1] = MEMORY[0x1E0DE4FB8] + 16;
  if (v13 < 0)
    operator delete((void *)v12[9]);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  return MEMORY[0x1CAA4AD98](&v14);
}

void sub_1CA17CFEC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15)
{
  uint64_t v15;

  MEMORY[0x1CAA4ADC8](v15, 0x1020C4062D53EE8);
  std::ostringstream::~ostringstream((uint64_t)&a15);
  _Unwind_Resume(a1);
}

uint64_t *degas::AttributeValueTable::readByBitmapStatement(degas::AttributeValueTable *this)
{
  unsigned int v1;
  uint64_t v2;
  _QWORD v4[5];

  v1 = (*((unsigned __int8 *)this + 48) << 16) | 0x801;
  v2 = *((_QWORD *)this + 5);
  v4[0] = MEMORY[0x1E0C809B0];
  v4[1] = 0x40000000;
  v4[2] = ___ZNK5degas19AttributeValueTable21readByBitmapStatementEv_block_invoke;
  v4[3] = &__block_descriptor_tmp_34;
  v4[4] = this;
  return degas::StatementCache::getStatement(v2, v1, (uint64_t)v4);
}

uint64_t ___ZNK5degas19AttributeValueTable21readByBitmapStatementEv_block_invoke@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v3;
  int v4;
  uint64_t v5;
  uint64_t v6;
  sqlite3_stmt **v7;
  sqlite3 *v8;
  void *__p;
  char v11;
  _QWORD v12[11];
  char v13;
  uint64_t v14;

  v3 = *(_QWORD *)(a1 + 32);
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v12);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, (uint64_t)"select v.elementId, v.attributeId, v.intValue, v.realValue, v.stringValue, v.dataType from ", 91);
  v4 = *(char *)(v3 + 31);
  if (v4 >= 0)
    v5 = v3 + 8;
  else
    v5 = *(_QWORD *)(v3 + 8);
  if (v4 >= 0)
    v6 = *(unsigned __int8 *)(v3 + 31);
  else
    v6 = *(_QWORD *)(v3 + 16);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, v5, v6);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, (uint64_t)" v, identifierBitmap(?1) b where v.elementId = b.value order by v.elementId", 75);
  v7 = (sqlite3_stmt **)operator new();
  v8 = *(sqlite3 **)(v3 + 32);
  std::stringbuf::str();
  degas::Statement::Statement(v7, v8, (uint64_t)&__p);
  std::shared_ptr<degas::Statement>::shared_ptr[abi:ne180100]<degas::Statement,void>(a2, (uint64_t)v7);
  if (v11 < 0)
    operator delete(__p);
  v12[0] = *MEMORY[0x1E0DE4F60];
  *(_QWORD *)((char *)v12 + *(_QWORD *)(v12[0] - 24)) = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 24);
  v12[1] = MEMORY[0x1E0DE4FB8] + 16;
  if (v13 < 0)
    operator delete((void *)v12[9]);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  return MEMORY[0x1CAA4AD98](&v14);
}

void sub_1CA17D1FC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15)
{
  uint64_t v15;

  MEMORY[0x1CAA4ADC8](v15, 0x1020C4062D53EE8);
  std::ostringstream::~ostringstream((uint64_t)&a15);
  _Unwind_Resume(a1);
}

uint64_t *degas::AttributeValueTable::readByIntValueStatement(uint64_t a1, int a2)
{
  unsigned int v2;
  uint64_t v3;
  _QWORD v5[5];
  int v6;

  v2 = a2 | (*(unsigned __int8 *)(a1 + 48) << 16) | 0x900;
  v3 = *(_QWORD *)(a1 + 40);
  v5[0] = MEMORY[0x1E0C809B0];
  v5[1] = 0x40000000;
  v5[2] = ___ZNK5degas19AttributeValueTable23readByIntValueStatementENS_14BinaryOperatorE_block_invoke;
  v5[3] = &__block_descriptor_tmp_37;
  v5[4] = a1;
  v6 = a2;
  return degas::StatementCache::getStatement(v3, v2, (uint64_t)v5);
}

uint64_t ___ZNK5degas19AttributeValueTable23readByIntValueStatementENS_14BinaryOperatorE_block_invoke@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  const char *v9;
  size_t v10;
  sqlite3_stmt **v11;
  sqlite3 *v12;
  void *__p;
  char v15;
  _QWORD v16[11];
  char v17;
  uint64_t v18;

  v4 = *(_QWORD *)(a1 + 32);
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v16);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, (uint64_t)"select elementId, attributeId, intValue, realValue, stringValue, dataType from ", 79);
  v5 = *(char *)(v4 + 31);
  if (v5 >= 0)
    v6 = v4 + 8;
  else
    v6 = *(_QWORD *)(v4 + 8);
  if (v5 >= 0)
    v7 = *(unsigned __int8 *)(v4 + 31);
  else
    v7 = *(_QWORD *)(v4 + 16);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, v6, v7);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, (uint64_t)" where attributeId=?1 and intValue", 34);
  v8 = *(unsigned int *)(a1 + 40);
  if (v8 > 8)
    v9 = " == ";
  else
    v9 = (const char *)*((_QWORD *)&off_1E83E3198 + v8);
  v10 = strlen(v9);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, (uint64_t)v9, v10);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, (uint64_t)"?2 order by elementId", 21);
  v11 = (sqlite3_stmt **)operator new();
  v12 = *(sqlite3 **)(v4 + 32);
  std::stringbuf::str();
  degas::Statement::Statement(v11, v12, (uint64_t)&__p);
  std::shared_ptr<degas::Statement>::shared_ptr[abi:ne180100]<degas::Statement,void>(a2, (uint64_t)v11);
  if (v15 < 0)
    operator delete(__p);
  v16[0] = *MEMORY[0x1E0DE4F60];
  *(_QWORD *)((char *)v16 + *(_QWORD *)(v16[0] - 24)) = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 24);
  v16[1] = MEMORY[0x1E0DE4FB8] + 16;
  if (v17 < 0)
    operator delete((void *)v16[9]);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  return MEMORY[0x1CAA4AD98](&v18);
}

void sub_1CA17D470(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15)
{
  uint64_t v15;

  MEMORY[0x1CAA4ADC8](v15, 0x1020C4062D53EE8);
  std::ostringstream::~ostringstream((uint64_t)&a15);
  _Unwind_Resume(a1);
}

uint64_t *degas::AttributeValueTable::readByBitmapAndAttrIdentifierStatement(degas::AttributeValueTable *this)
{
  unsigned int v1;
  uint64_t v2;
  _QWORD v4[5];

  v1 = (*((unsigned __int8 *)this + 48) << 16) | 0x802;
  v2 = *((_QWORD *)this + 5);
  v4[0] = MEMORY[0x1E0C809B0];
  v4[1] = 0x40000000;
  v4[2] = ___ZNK5degas19AttributeValueTable38readByBitmapAndAttrIdentifierStatementEv_block_invoke;
  v4[3] = &__block_descriptor_tmp_39;
  v4[4] = this;
  return degas::StatementCache::getStatement(v2, v1, (uint64_t)v4);
}

uint64_t ___ZNK5degas19AttributeValueTable38readByBitmapAndAttrIdentifierStatementEv_block_invoke@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v3;
  int v4;
  uint64_t v5;
  uint64_t v6;
  sqlite3_stmt **v7;
  sqlite3 *v8;
  void *__p;
  char v11;
  _QWORD v12[11];
  char v13;
  uint64_t v14;

  v3 = *(_QWORD *)(a1 + 32);
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v12);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, (uint64_t)"select v.elementId, v.attributeId, v.intValue, v.realValue, v.stringValue, v.dataType from ", 91);
  v4 = *(char *)(v3 + 31);
  if (v4 >= 0)
    v5 = v3 + 8;
  else
    v5 = *(_QWORD *)(v3 + 8);
  if (v4 >= 0)
    v6 = *(unsigned __int8 *)(v3 + 31);
  else
    v6 = *(_QWORD *)(v3 + 16);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, v5, v6);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, (uint64_t)" v, identifierBitmap(?1) b where v.elementId = b.value and v.attributeId=?2 order by v.elementId", 96);
  v7 = (sqlite3_stmt **)operator new();
  v8 = *(sqlite3 **)(v3 + 32);
  std::stringbuf::str();
  degas::Statement::Statement(v7, v8, (uint64_t)&__p);
  std::shared_ptr<degas::Statement>::shared_ptr[abi:ne180100]<degas::Statement,void>(a2, (uint64_t)v7);
  if (v11 < 0)
    operator delete(__p);
  v12[0] = *MEMORY[0x1E0DE4F60];
  *(_QWORD *)((char *)v12 + *(_QWORD *)(v12[0] - 24)) = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 24);
  v12[1] = MEMORY[0x1E0DE4FB8] + 16;
  if (v13 < 0)
    operator delete((void *)v12[9]);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  return MEMORY[0x1CAA4AD98](&v14);
}

void sub_1CA17D680(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15)
{
  uint64_t v15;

  MEMORY[0x1CAA4ADC8](v15, 0x1020C4062D53EE8);
  std::ostringstream::~ostringstream((uint64_t)&a15);
  _Unwind_Resume(a1);
}

uint64_t *degas::AttributeValueTable::readByRealValueStatement(uint64_t a1, int a2)
{
  unsigned int v2;
  uint64_t v3;
  _QWORD v5[5];
  int v6;

  v2 = a2 | (*(unsigned __int8 *)(a1 + 48) << 16) | 0xA00;
  v3 = *(_QWORD *)(a1 + 40);
  v5[0] = MEMORY[0x1E0C809B0];
  v5[1] = 0x40000000;
  v5[2] = ___ZNK5degas19AttributeValueTable24readByRealValueStatementENS_14BinaryOperatorE_block_invoke;
  v5[3] = &__block_descriptor_tmp_41;
  v5[4] = a1;
  v6 = a2;
  return degas::StatementCache::getStatement(v3, v2, (uint64_t)v5);
}

uint64_t ___ZNK5degas19AttributeValueTable24readByRealValueStatementENS_14BinaryOperatorE_block_invoke@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  const char *v9;
  size_t v10;
  sqlite3_stmt **v11;
  sqlite3 *v12;
  void *__p;
  char v15;
  _QWORD v16[11];
  char v17;
  uint64_t v18;

  v4 = *(_QWORD *)(a1 + 32);
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v16);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, (uint64_t)"select elementId, attributeId, intValue, realValue, stringValue, dataType from ", 79);
  v5 = *(char *)(v4 + 31);
  if (v5 >= 0)
    v6 = v4 + 8;
  else
    v6 = *(_QWORD *)(v4 + 8);
  if (v5 >= 0)
    v7 = *(unsigned __int8 *)(v4 + 31);
  else
    v7 = *(_QWORD *)(v4 + 16);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, v6, v7);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, (uint64_t)" where attributeId=?1 and realValue", 35);
  v8 = *(unsigned int *)(a1 + 40);
  if (v8 > 8)
    v9 = " == ";
  else
    v9 = (const char *)*((_QWORD *)&off_1E83E3198 + v8);
  v10 = strlen(v9);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, (uint64_t)v9, v10);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, (uint64_t)"?2 order by elementId", 21);
  v11 = (sqlite3_stmt **)operator new();
  v12 = *(sqlite3 **)(v4 + 32);
  std::stringbuf::str();
  degas::Statement::Statement(v11, v12, (uint64_t)&__p);
  std::shared_ptr<degas::Statement>::shared_ptr[abi:ne180100]<degas::Statement,void>(a2, (uint64_t)v11);
  if (v15 < 0)
    operator delete(__p);
  v16[0] = *MEMORY[0x1E0DE4F60];
  *(_QWORD *)((char *)v16 + *(_QWORD *)(v16[0] - 24)) = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 24);
  v16[1] = MEMORY[0x1E0DE4FB8] + 16;
  if (v17 < 0)
    operator delete((void *)v16[9]);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  return MEMORY[0x1CAA4AD98](&v18);
}

void sub_1CA17D8F4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15)
{
  uint64_t v15;

  MEMORY[0x1CAA4ADC8](v15, 0x1020C4062D53EE8);
  std::ostringstream::~ostringstream((uint64_t)&a15);
  _Unwind_Resume(a1);
}

uint64_t *degas::AttributeValueTable::readByStringValueStatement(uint64_t a1, int a2)
{
  unsigned int v2;
  uint64_t v3;
  _QWORD v5[5];
  int v6;

  v2 = a2 | (*(unsigned __int8 *)(a1 + 48) << 16) | 0xB00;
  v3 = *(_QWORD *)(a1 + 40);
  v5[0] = MEMORY[0x1E0C809B0];
  v5[1] = 0x40000000;
  v5[2] = ___ZNK5degas19AttributeValueTable26readByStringValueStatementENS_14BinaryOperatorE_block_invoke;
  v5[3] = &__block_descriptor_tmp_43;
  v5[4] = a1;
  v6 = a2;
  return degas::StatementCache::getStatement(v3, v2, (uint64_t)v5);
}

uint64_t ___ZNK5degas19AttributeValueTable26readByStringValueStatementENS_14BinaryOperatorE_block_invoke@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  const char *v9;
  size_t v10;
  sqlite3_stmt **v11;
  sqlite3 *v12;
  void *__p;
  char v15;
  _QWORD v16[11];
  char v17;
  uint64_t v18;

  v4 = *(_QWORD *)(a1 + 32);
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v16);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, (uint64_t)"select elementId, attributeId, intValue, realValue, stringValue, dataType from ", 79);
  v5 = *(char *)(v4 + 31);
  if (v5 >= 0)
    v6 = v4 + 8;
  else
    v6 = *(_QWORD *)(v4 + 8);
  if (v5 >= 0)
    v7 = *(unsigned __int8 *)(v4 + 31);
  else
    v7 = *(_QWORD *)(v4 + 16);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, v6, v7);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, (uint64_t)" where attributeId=?1 and stringValue", 37);
  v8 = *(unsigned int *)(a1 + 40);
  if (v8 > 8)
    v9 = " == ";
  else
    v9 = (const char *)*((_QWORD *)&off_1E83E3198 + v8);
  v10 = strlen(v9);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, (uint64_t)v9, v10);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, (uint64_t)"?2 order by elementId", 21);
  v11 = (sqlite3_stmt **)operator new();
  v12 = *(sqlite3 **)(v4 + 32);
  std::stringbuf::str();
  degas::Statement::Statement(v11, v12, (uint64_t)&__p);
  std::shared_ptr<degas::Statement>::shared_ptr[abi:ne180100]<degas::Statement,void>(a2, (uint64_t)v11);
  if (v15 < 0)
    operator delete(__p);
  v16[0] = *MEMORY[0x1E0DE4F60];
  *(_QWORD *)((char *)v16 + *(_QWORD *)(v16[0] - 24)) = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 24);
  v16[1] = MEMORY[0x1E0DE4FB8] + 16;
  if (v17 < 0)
    operator delete((void *)v16[9]);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  return MEMORY[0x1CAA4AD98](&v18);
}

void sub_1CA17DB68(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15)
{
  uint64_t v15;

  MEMORY[0x1CAA4ADC8](v15, 0x1020C4062D53EE8);
  std::ostringstream::~ostringstream((uint64_t)&a15);
  _Unwind_Resume(a1);
}

uint64_t *degas::AttributeValueTable::readByIntValuesStatement(uint64_t a1, int a2)
{
  unsigned int v2;
  uint64_t v3;
  _QWORD v5[5];
  int v6;

  v2 = a2 | (*(unsigned __int8 *)(a1 + 48) << 16) | 0xC00;
  v3 = *(_QWORD *)(a1 + 40);
  v5[0] = MEMORY[0x1E0C809B0];
  v5[1] = 0x40000000;
  v5[2] = ___ZNK5degas19AttributeValueTable24readByIntValuesStatementENS_14BinaryOperatorE_block_invoke;
  v5[3] = &__block_descriptor_tmp_45;
  v5[4] = a1;
  v6 = a2;
  return degas::StatementCache::getStatement(v3, v2, (uint64_t)v5);
}

uint64_t ___ZNK5degas19AttributeValueTable24readByIntValuesStatementENS_14BinaryOperatorE_block_invoke@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  const char *v8;
  size_t v9;
  sqlite3_stmt **v10;
  sqlite3 *v11;
  void *__p;
  char v14;
  _QWORD v15[11];
  char v16;
  uint64_t v17;

  v4 = *(_QWORD *)(a1 + 32);
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v15);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)"select elementId, attributeId, intValue, realValue, stringValue, dataType from ", 79);
  v5 = *(char *)(v4 + 31);
  if (v5 >= 0)
    v6 = v4 + 8;
  else
    v6 = *(_QWORD *)(v4 + 8);
  if (v5 >= 0)
    v7 = *(unsigned __int8 *)(v4 + 31);
  else
    v7 = *(_QWORD *)(v4 + 16);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, v6, v7);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)" where attributeId=?1 and intValue", 34);
  v8 = degas::AttributeValueTable::listOperatorText(*(_DWORD *)(a1 + 40));
  v9 = strlen(v8);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)v8, v9);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)"valueArray(?2, ?3, 'int64') order by elementId", 46);
  v10 = (sqlite3_stmt **)operator new();
  v11 = *(sqlite3 **)(v4 + 32);
  std::stringbuf::str();
  degas::Statement::Statement(v10, v11, (uint64_t)&__p);
  std::shared_ptr<degas::Statement>::shared_ptr[abi:ne180100]<degas::Statement,void>(a2, (uint64_t)v10);
  if (v14 < 0)
    operator delete(__p);
  v15[0] = *MEMORY[0x1E0DE4F60];
  *(_QWORD *)((char *)v15 + *(_QWORD *)(v15[0] - 24)) = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 24);
  v15[1] = MEMORY[0x1E0DE4FB8] + 16;
  if (v16 < 0)
    operator delete((void *)v15[9]);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  return MEMORY[0x1CAA4AD98](&v17);
}

void sub_1CA17DDBC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15)
{
  uint64_t v15;

  MEMORY[0x1CAA4ADC8](v15, 0x1020C4062D53EE8);
  std::ostringstream::~ostringstream((uint64_t)&a15);
  _Unwind_Resume(a1);
}

uint64_t *degas::AttributeValueTable::readByRealValuesStatement(uint64_t a1, int a2)
{
  unsigned int v2;
  uint64_t v3;
  _QWORD v5[5];
  int v6;

  v2 = a2 | (*(unsigned __int8 *)(a1 + 48) << 16) | 0xD00;
  v3 = *(_QWORD *)(a1 + 40);
  v5[0] = MEMORY[0x1E0C809B0];
  v5[1] = 0x40000000;
  v5[2] = ___ZNK5degas19AttributeValueTable25readByRealValuesStatementENS_14BinaryOperatorE_block_invoke;
  v5[3] = &__block_descriptor_tmp_47;
  v5[4] = a1;
  v6 = a2;
  return degas::StatementCache::getStatement(v3, v2, (uint64_t)v5);
}

uint64_t ___ZNK5degas19AttributeValueTable25readByRealValuesStatementENS_14BinaryOperatorE_block_invoke@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  const char *v8;
  size_t v9;
  sqlite3_stmt **v10;
  sqlite3 *v11;
  void *__p;
  char v14;
  _QWORD v15[11];
  char v16;
  uint64_t v17;

  v4 = *(_QWORD *)(a1 + 32);
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v15);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)"select elementId, attributeId, intValue, realValue, stringValue, dataType from ", 79);
  v5 = *(char *)(v4 + 31);
  if (v5 >= 0)
    v6 = v4 + 8;
  else
    v6 = *(_QWORD *)(v4 + 8);
  if (v5 >= 0)
    v7 = *(unsigned __int8 *)(v4 + 31);
  else
    v7 = *(_QWORD *)(v4 + 16);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, v6, v7);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)" where attributeId=?1 and realValue", 35);
  v8 = degas::AttributeValueTable::listOperatorText(*(_DWORD *)(a1 + 40));
  v9 = strlen(v8);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)v8, v9);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)"valueArray(?2, ?3, 'double') order by elementId", 47);
  v10 = (sqlite3_stmt **)operator new();
  v11 = *(sqlite3 **)(v4 + 32);
  std::stringbuf::str();
  degas::Statement::Statement(v10, v11, (uint64_t)&__p);
  std::shared_ptr<degas::Statement>::shared_ptr[abi:ne180100]<degas::Statement,void>(a2, (uint64_t)v10);
  if (v14 < 0)
    operator delete(__p);
  v15[0] = *MEMORY[0x1E0DE4F60];
  *(_QWORD *)((char *)v15 + *(_QWORD *)(v15[0] - 24)) = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 24);
  v15[1] = MEMORY[0x1E0DE4FB8] + 16;
  if (v16 < 0)
    operator delete((void *)v15[9]);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  return MEMORY[0x1CAA4AD98](&v17);
}

void sub_1CA17E014(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15)
{
  uint64_t v15;

  MEMORY[0x1CAA4ADC8](v15, 0x1020C4062D53EE8);
  std::ostringstream::~ostringstream((uint64_t)&a15);
  _Unwind_Resume(a1);
}

uint64_t *degas::AttributeValueTable::readByStringValuesStatement(uint64_t a1, int a2)
{
  unsigned int v2;
  uint64_t v3;
  _QWORD v5[5];
  int v6;

  v2 = a2 | (*(unsigned __int8 *)(a1 + 48) << 16) | 0xE00;
  v3 = *(_QWORD *)(a1 + 40);
  v5[0] = MEMORY[0x1E0C809B0];
  v5[1] = 0x40000000;
  v5[2] = ___ZNK5degas19AttributeValueTable27readByStringValuesStatementENS_14BinaryOperatorE_block_invoke;
  v5[3] = &__block_descriptor_tmp_49;
  v5[4] = a1;
  v6 = a2;
  return degas::StatementCache::getStatement(v3, v2, (uint64_t)v5);
}

uint64_t ___ZNK5degas19AttributeValueTable27readByStringValuesStatementENS_14BinaryOperatorE_block_invoke@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  const char *v8;
  size_t v9;
  sqlite3_stmt **v10;
  sqlite3 *v11;
  void *__p;
  char v14;
  _QWORD v15[11];
  char v16;
  uint64_t v17;

  v4 = *(_QWORD *)(a1 + 32);
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v15);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)"select elementId, attributeId, intValue, realValue, stringValue, dataType from ", 79);
  v5 = *(char *)(v4 + 31);
  if (v5 >= 0)
    v6 = v4 + 8;
  else
    v6 = *(_QWORD *)(v4 + 8);
  if (v5 >= 0)
    v7 = *(unsigned __int8 *)(v4 + 31);
  else
    v7 = *(_QWORD *)(v4 + 16);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, v6, v7);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)" where attributeId=?1 and stringValue", 37);
  v8 = degas::AttributeValueTable::listOperatorText(*(_DWORD *)(a1 + 40));
  v9 = strlen(v8);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)v8, v9);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)"valueArray(?2, ?3, 'char*') order by elementId", 46);
  v10 = (sqlite3_stmt **)operator new();
  v11 = *(sqlite3 **)(v4 + 32);
  std::stringbuf::str();
  degas::Statement::Statement(v10, v11, (uint64_t)&__p);
  std::shared_ptr<degas::Statement>::shared_ptr[abi:ne180100]<degas::Statement,void>(a2, (uint64_t)v10);
  if (v14 < 0)
    operator delete(__p);
  v15[0] = *MEMORY[0x1E0DE4F60];
  *(_QWORD *)((char *)v15 + *(_QWORD *)(v15[0] - 24)) = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 24);
  v15[1] = MEMORY[0x1E0DE4FB8] + 16;
  if (v16 < 0)
    operator delete((void *)v15[9]);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  return MEMORY[0x1CAA4AD98](&v17);
}

void sub_1CA17E268(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15)
{
  uint64_t v15;

  MEMORY[0x1CAA4ADC8](v15, 0x1020C4062D53EE8);
  std::ostringstream::~ostringstream((uint64_t)&a15);
  _Unwind_Resume(a1);
}

uint64_t *degas::AttributeValueTable::readByIntValueIdentifiersStatement(uint64_t a1, int a2)
{
  unsigned int v2;
  uint64_t v3;
  _QWORD v5[5];
  int v6;

  v2 = (a2 + 16) | (*(unsigned __int8 *)(a1 + 48) << 16) | 0x900;
  v3 = *(_QWORD *)(a1 + 40);
  v5[0] = MEMORY[0x1E0C809B0];
  v5[1] = 0x40000000;
  v5[2] = ___ZNK5degas19AttributeValueTable34readByIntValueIdentifiersStatementENS_14BinaryOperatorE_block_invoke;
  v5[3] = &__block_descriptor_tmp_52;
  v5[4] = a1;
  v6 = a2;
  return degas::StatementCache::getStatement(v3, v2, (uint64_t)v5);
}

uint64_t ___ZNK5degas19AttributeValueTable34readByIntValueIdentifiersStatementENS_14BinaryOperatorE_block_invoke@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  const char *v9;
  size_t v10;
  sqlite3_stmt **v11;
  sqlite3 *v12;
  void *__p;
  char v15;
  _QWORD v16[11];
  char v17;
  uint64_t v18;

  v4 = *(_QWORD *)(a1 + 32);
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v16);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, (uint64_t)"select elementId, attributeId, intValue, realValue, stringValue, dataType from ", 79);
  v5 = *(char *)(v4 + 31);
  if (v5 >= 0)
    v6 = v4 + 8;
  else
    v6 = *(_QWORD *)(v4 + 8);
  if (v5 >= 0)
    v7 = *(unsigned __int8 *)(v4 + 31);
  else
    v7 = *(_QWORD *)(v4 + 16);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, v6, v7);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, (uint64_t)" where elementId in identifierBitmap(?1) and attributeId = ?2 and +intValue", 75);
  v8 = *(unsigned int *)(a1 + 40);
  if (v8 > 8)
    v9 = " == ";
  else
    v9 = (const char *)*((_QWORD *)&off_1E83E3198 + v8);
  v10 = strlen(v9);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, (uint64_t)v9, v10);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, (uint64_t)"?3", 2);
  v11 = (sqlite3_stmt **)operator new();
  v12 = *(sqlite3 **)(v4 + 32);
  std::stringbuf::str();
  degas::Statement::Statement(v11, v12, (uint64_t)&__p);
  std::shared_ptr<degas::Statement>::shared_ptr[abi:ne180100]<degas::Statement,void>(a2, (uint64_t)v11);
  if (v15 < 0)
    operator delete(__p);
  v16[0] = *MEMORY[0x1E0DE4F60];
  *(_QWORD *)((char *)v16 + *(_QWORD *)(v16[0] - 24)) = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 24);
  v16[1] = MEMORY[0x1E0DE4FB8] + 16;
  if (v17 < 0)
    operator delete((void *)v16[9]);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  return MEMORY[0x1CAA4AD98](&v18);
}

void sub_1CA17E4E0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15)
{
  uint64_t v15;

  MEMORY[0x1CAA4ADC8](v15, 0x1020C4062D53EE8);
  std::ostringstream::~ostringstream((uint64_t)&a15);
  _Unwind_Resume(a1);
}

uint64_t *degas::AttributeValueTable::readByRealValueIdentifiersStatement(uint64_t a1, int a2)
{
  unsigned int v2;
  uint64_t v3;
  _QWORD v5[5];
  int v6;

  v2 = (a2 + 16) | (*(unsigned __int8 *)(a1 + 48) << 16) | 0xA00;
  v3 = *(_QWORD *)(a1 + 40);
  v5[0] = MEMORY[0x1E0C809B0];
  v5[1] = 0x40000000;
  v5[2] = ___ZNK5degas19AttributeValueTable35readByRealValueIdentifiersStatementENS_14BinaryOperatorE_block_invoke;
  v5[3] = &__block_descriptor_tmp_54;
  v5[4] = a1;
  v6 = a2;
  return degas::StatementCache::getStatement(v3, v2, (uint64_t)v5);
}

uint64_t ___ZNK5degas19AttributeValueTable35readByRealValueIdentifiersStatementENS_14BinaryOperatorE_block_invoke@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  const char *v9;
  size_t v10;
  sqlite3_stmt **v11;
  sqlite3 *v12;
  void *__p;
  char v15;
  _QWORD v16[11];
  char v17;
  uint64_t v18;

  v4 = *(_QWORD *)(a1 + 32);
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v16);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, (uint64_t)"select elementId, attributeId, intValue, realValue, stringValue, dataType from ", 79);
  v5 = *(char *)(v4 + 31);
  if (v5 >= 0)
    v6 = v4 + 8;
  else
    v6 = *(_QWORD *)(v4 + 8);
  if (v5 >= 0)
    v7 = *(unsigned __int8 *)(v4 + 31);
  else
    v7 = *(_QWORD *)(v4 + 16);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, v6, v7);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, (uint64_t)" where elementId in identifierBitmap(?1) and attributeId = ?2 and +realValue", 76);
  v8 = *(unsigned int *)(a1 + 40);
  if (v8 > 8)
    v9 = " == ";
  else
    v9 = (const char *)*((_QWORD *)&off_1E83E3198 + v8);
  v10 = strlen(v9);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, (uint64_t)v9, v10);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, (uint64_t)"?3", 2);
  v11 = (sqlite3_stmt **)operator new();
  v12 = *(sqlite3 **)(v4 + 32);
  std::stringbuf::str();
  degas::Statement::Statement(v11, v12, (uint64_t)&__p);
  std::shared_ptr<degas::Statement>::shared_ptr[abi:ne180100]<degas::Statement,void>(a2, (uint64_t)v11);
  if (v15 < 0)
    operator delete(__p);
  v16[0] = *MEMORY[0x1E0DE4F60];
  *(_QWORD *)((char *)v16 + *(_QWORD *)(v16[0] - 24)) = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 24);
  v16[1] = MEMORY[0x1E0DE4FB8] + 16;
  if (v17 < 0)
    operator delete((void *)v16[9]);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  return MEMORY[0x1CAA4AD98](&v18);
}

void sub_1CA17E758(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15)
{
  uint64_t v15;

  MEMORY[0x1CAA4ADC8](v15, 0x1020C4062D53EE8);
  std::ostringstream::~ostringstream((uint64_t)&a15);
  _Unwind_Resume(a1);
}

uint64_t *degas::AttributeValueTable::readByStringValueIdentifiersStatement(uint64_t a1, int a2)
{
  unsigned int v2;
  uint64_t v3;
  _QWORD v5[5];
  int v6;

  v2 = (a2 + 16) | (*(unsigned __int8 *)(a1 + 48) << 16) | 0xB00;
  v3 = *(_QWORD *)(a1 + 40);
  v5[0] = MEMORY[0x1E0C809B0];
  v5[1] = 0x40000000;
  v5[2] = ___ZNK5degas19AttributeValueTable37readByStringValueIdentifiersStatementENS_14BinaryOperatorE_block_invoke;
  v5[3] = &__block_descriptor_tmp_56;
  v5[4] = a1;
  v6 = a2;
  return degas::StatementCache::getStatement(v3, v2, (uint64_t)v5);
}

uint64_t ___ZNK5degas19AttributeValueTable37readByStringValueIdentifiersStatementENS_14BinaryOperatorE_block_invoke@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  const char *v9;
  size_t v10;
  sqlite3_stmt **v11;
  sqlite3 *v12;
  void *__p;
  char v15;
  _QWORD v16[11];
  char v17;
  uint64_t v18;

  v4 = *(_QWORD *)(a1 + 32);
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v16);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, (uint64_t)"select elementId, attributeId, intValue, realValue, stringValue, dataType from ", 79);
  v5 = *(char *)(v4 + 31);
  if (v5 >= 0)
    v6 = v4 + 8;
  else
    v6 = *(_QWORD *)(v4 + 8);
  if (v5 >= 0)
    v7 = *(unsigned __int8 *)(v4 + 31);
  else
    v7 = *(_QWORD *)(v4 + 16);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, v6, v7);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, (uint64_t)" where elementId in identifierBitmap(?1) and attributeId = ?2 and +stringValue", 78);
  v8 = *(unsigned int *)(a1 + 40);
  if (v8 > 8)
    v9 = " == ";
  else
    v9 = (const char *)*((_QWORD *)&off_1E83E3198 + v8);
  v10 = strlen(v9);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, (uint64_t)v9, v10);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, (uint64_t)"?3", 2);
  v11 = (sqlite3_stmt **)operator new();
  v12 = *(sqlite3 **)(v4 + 32);
  std::stringbuf::str();
  degas::Statement::Statement(v11, v12, (uint64_t)&__p);
  std::shared_ptr<degas::Statement>::shared_ptr[abi:ne180100]<degas::Statement,void>(a2, (uint64_t)v11);
  if (v15 < 0)
    operator delete(__p);
  v16[0] = *MEMORY[0x1E0DE4F60];
  *(_QWORD *)((char *)v16 + *(_QWORD *)(v16[0] - 24)) = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 24);
  v16[1] = MEMORY[0x1E0DE4FB8] + 16;
  if (v17 < 0)
    operator delete((void *)v16[9]);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  return MEMORY[0x1CAA4AD98](&v18);
}

void sub_1CA17E9D0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15)
{
  uint64_t v15;

  MEMORY[0x1CAA4ADC8](v15, 0x1020C4062D53EE8);
  std::ostringstream::~ostringstream((uint64_t)&a15);
  _Unwind_Resume(a1);
}

uint64_t *degas::AttributeValueTable::readByIntRangeStatement(uint64_t a1, int a2)
{
  unsigned int v2;
  uint64_t v3;
  _QWORD v5[5];
  int v6;

  v2 = (a2 + 32) | (*(unsigned __int8 *)(a1 + 48) << 16) | 0x900;
  v3 = *(_QWORD *)(a1 + 40);
  v5[0] = MEMORY[0x1E0C809B0];
  v5[1] = 0x40000000;
  v5[2] = ___ZNK5degas19AttributeValueTable23readByIntRangeStatementENS_15TernaryOperatorE_block_invoke;
  v5[3] = &__block_descriptor_tmp_60;
  v5[4] = a1;
  v6 = a2;
  return degas::StatementCache::getStatement(v3, v2, (uint64_t)v5);
}

uint64_t ___ZNK5degas19AttributeValueTable23readByIntRangeStatementENS_15TernaryOperatorE_block_invoke@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  void **v8;
  uint64_t v9;
  sqlite3_stmt **v10;
  sqlite3 *v11;
  void *__p[2];
  unsigned __int8 v14;
  _QWORD v15[11];
  char v16;
  uint64_t v17;

  v4 = *(_QWORD *)(a1 + 32);
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v15);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)"select elementId, attributeId, intValue, realValue, stringValue, dataType from ", 79);
  v5 = *(char *)(v4 + 31);
  if (v5 >= 0)
    v6 = v4 + 8;
  else
    v6 = *(_QWORD *)(v4 + 8);
  if (v5 >= 0)
    v7 = *(unsigned __int8 *)(v4 + 31);
  else
    v7 = *(_QWORD *)(v4 + 16);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, v6, v7);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)" where attributeId=?1 and ", 26);
  degas::AttributeValueTable::rangeOperatorText("intValue", *(_DWORD *)(a1 + 40));
  if ((v14 & 0x80u) == 0)
    v8 = __p;
  else
    v8 = (void **)__p[0];
  if ((v14 & 0x80u) == 0)
    v9 = v14;
  else
    v9 = (uint64_t)__p[1];
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)v8, v9);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)" order by elementId", 19);
  if ((char)v14 < 0)
    operator delete(__p[0]);
  v10 = (sqlite3_stmt **)operator new();
  v11 = *(sqlite3 **)(v4 + 32);
  std::stringbuf::str();
  degas::Statement::Statement(v10, v11, (uint64_t)__p);
  std::shared_ptr<degas::Statement>::shared_ptr[abi:ne180100]<degas::Statement,void>(a2, (uint64_t)v10);
  if ((char)v14 < 0)
    operator delete(__p[0]);
  v15[0] = *MEMORY[0x1E0DE4F60];
  *(_QWORD *)((char *)v15 + *(_QWORD *)(v15[0] - 24)) = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 24);
  v15[1] = MEMORY[0x1E0DE4FB8] + 16;
  if (v16 < 0)
    operator delete((void *)v15[9]);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  return MEMORY[0x1CAA4AD98](&v17);
}

void sub_1CA17EC54(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15)
{
  uint64_t v15;

  MEMORY[0x1CAA4ADC8](v15, 0x1020C4062D53EE8);
  std::ostringstream::~ostringstream((uint64_t)&a15);
  _Unwind_Resume(a1);
}

uint64_t *degas::AttributeValueTable::readByRealRangeStatement(uint64_t a1, int a2)
{
  unsigned int v2;
  uint64_t v3;
  _QWORD v5[5];
  int v6;

  v2 = (a2 + 32) | (*(unsigned __int8 *)(a1 + 48) << 16) | 0xA00;
  v3 = *(_QWORD *)(a1 + 40);
  v5[0] = MEMORY[0x1E0C809B0];
  v5[1] = 0x40000000;
  v5[2] = ___ZNK5degas19AttributeValueTable24readByRealRangeStatementENS_15TernaryOperatorE_block_invoke;
  v5[3] = &__block_descriptor_tmp_62;
  v5[4] = a1;
  v6 = a2;
  return degas::StatementCache::getStatement(v3, v2, (uint64_t)v5);
}

uint64_t ___ZNK5degas19AttributeValueTable24readByRealRangeStatementENS_15TernaryOperatorE_block_invoke@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  void **v8;
  uint64_t v9;
  sqlite3_stmt **v10;
  sqlite3 *v11;
  void *__p[2];
  unsigned __int8 v14;
  _QWORD v15[11];
  char v16;
  uint64_t v17;

  v4 = *(_QWORD *)(a1 + 32);
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v15);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)"select elementId, attributeId, intValue, realValue, stringValue, dataType from ", 79);
  v5 = *(char *)(v4 + 31);
  if (v5 >= 0)
    v6 = v4 + 8;
  else
    v6 = *(_QWORD *)(v4 + 8);
  if (v5 >= 0)
    v7 = *(unsigned __int8 *)(v4 + 31);
  else
    v7 = *(_QWORD *)(v4 + 16);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, v6, v7);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)" where attributeId=?1 and ", 26);
  degas::AttributeValueTable::rangeOperatorText("realValue", *(_DWORD *)(a1 + 40));
  if ((v14 & 0x80u) == 0)
    v8 = __p;
  else
    v8 = (void **)__p[0];
  if ((v14 & 0x80u) == 0)
    v9 = v14;
  else
    v9 = (uint64_t)__p[1];
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)v8, v9);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)" order by elementId", 19);
  if ((char)v14 < 0)
    operator delete(__p[0]);
  v10 = (sqlite3_stmt **)operator new();
  v11 = *(sqlite3 **)(v4 + 32);
  std::stringbuf::str();
  degas::Statement::Statement(v10, v11, (uint64_t)__p);
  std::shared_ptr<degas::Statement>::shared_ptr[abi:ne180100]<degas::Statement,void>(a2, (uint64_t)v10);
  if ((char)v14 < 0)
    operator delete(__p[0]);
  v15[0] = *MEMORY[0x1E0DE4F60];
  *(_QWORD *)((char *)v15 + *(_QWORD *)(v15[0] - 24)) = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 24);
  v15[1] = MEMORY[0x1E0DE4FB8] + 16;
  if (v16 < 0)
    operator delete((void *)v15[9]);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  return MEMORY[0x1CAA4AD98](&v17);
}

void sub_1CA17EEF4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15)
{
  uint64_t v15;

  MEMORY[0x1CAA4ADC8](v15, 0x1020C4062D53EE8);
  std::ostringstream::~ostringstream((uint64_t)&a15);
  _Unwind_Resume(a1);
}

uint64_t *degas::AttributeValueTable::readByStringRangeStatement(uint64_t a1, int a2)
{
  unsigned int v2;
  uint64_t v3;
  _QWORD v5[5];
  int v6;

  v2 = (a2 + 32) | (*(unsigned __int8 *)(a1 + 48) << 16) | 0xB00;
  v3 = *(_QWORD *)(a1 + 40);
  v5[0] = MEMORY[0x1E0C809B0];
  v5[1] = 0x40000000;
  v5[2] = ___ZNK5degas19AttributeValueTable26readByStringRangeStatementENS_15TernaryOperatorE_block_invoke;
  v5[3] = &__block_descriptor_tmp_64;
  v5[4] = a1;
  v6 = a2;
  return degas::StatementCache::getStatement(v3, v2, (uint64_t)v5);
}

uint64_t ___ZNK5degas19AttributeValueTable26readByStringRangeStatementENS_15TernaryOperatorE_block_invoke@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  void **v8;
  uint64_t v9;
  sqlite3_stmt **v10;
  sqlite3 *v11;
  void *__p[2];
  unsigned __int8 v14;
  _QWORD v15[11];
  char v16;
  uint64_t v17;

  v4 = *(_QWORD *)(a1 + 32);
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v15);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)"select elementId, attributeId, intValue, realValue, stringValue, dataType from ", 79);
  v5 = *(char *)(v4 + 31);
  if (v5 >= 0)
    v6 = v4 + 8;
  else
    v6 = *(_QWORD *)(v4 + 8);
  if (v5 >= 0)
    v7 = *(unsigned __int8 *)(v4 + 31);
  else
    v7 = *(_QWORD *)(v4 + 16);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, v6, v7);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)" where attributeId=?1 and ", 26);
  degas::AttributeValueTable::rangeOperatorText("stringValue", *(_DWORD *)(a1 + 40));
  if ((v14 & 0x80u) == 0)
    v8 = __p;
  else
    v8 = (void **)__p[0];
  if ((v14 & 0x80u) == 0)
    v9 = v14;
  else
    v9 = (uint64_t)__p[1];
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)v8, v9);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)" order by elementId", 19);
  if ((char)v14 < 0)
    operator delete(__p[0]);
  v10 = (sqlite3_stmt **)operator new();
  v11 = *(sqlite3 **)(v4 + 32);
  std::stringbuf::str();
  degas::Statement::Statement(v10, v11, (uint64_t)__p);
  std::shared_ptr<degas::Statement>::shared_ptr[abi:ne180100]<degas::Statement,void>(a2, (uint64_t)v10);
  if ((char)v14 < 0)
    operator delete(__p[0]);
  v15[0] = *MEMORY[0x1E0DE4F60];
  *(_QWORD *)((char *)v15 + *(_QWORD *)(v15[0] - 24)) = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 24);
  v15[1] = MEMORY[0x1E0DE4FB8] + 16;
  if (v16 < 0)
    operator delete((void *)v15[9]);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  return MEMORY[0x1CAA4AD98](&v17);
}

void sub_1CA17F194(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15)
{
  uint64_t v15;

  MEMORY[0x1CAA4ADC8](v15, 0x1020C4062D53EE8);
  std::ostringstream::~ostringstream((uint64_t)&a15);
  _Unwind_Resume(a1);
}

uint64_t *degas::AttributeValueTable::readAllStatement(degas::AttributeValueTable *this)
{
  unsigned int v1;
  uint64_t v2;
  _QWORD v4[5];

  v1 = (*((unsigned __int8 *)this + 48) << 16) | 0x700;
  v2 = *((_QWORD *)this + 5);
  v4[0] = MEMORY[0x1E0C809B0];
  v4[1] = 0x40000000;
  v4[2] = ___ZNK5degas19AttributeValueTable16readAllStatementEv_block_invoke;
  v4[3] = &__block_descriptor_tmp_65;
  v4[4] = this;
  return degas::StatementCache::getStatement(v2, v1, (uint64_t)v4);
}

uint64_t ___ZNK5degas19AttributeValueTable16readAllStatementEv_block_invoke@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v3;
  int v4;
  uint64_t v5;
  uint64_t v6;
  sqlite3_stmt **v7;
  sqlite3 *v8;
  void *__p;
  char v11;
  _QWORD v12[11];
  char v13;
  uint64_t v14;

  v3 = *(_QWORD *)(a1 + 32);
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v12);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, (uint64_t)"select elementId, attributeId, intValue, realValue, stringValue, dataType from ", 79);
  v4 = *(char *)(v3 + 31);
  if (v4 >= 0)
    v5 = v3 + 8;
  else
    v5 = *(_QWORD *)(v3 + 8);
  if (v4 >= 0)
    v6 = *(unsigned __int8 *)(v3 + 31);
  else
    v6 = *(_QWORD *)(v3 + 16);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, v5, v6);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, (uint64_t)" order by elementId", 19);
  v7 = (sqlite3_stmt **)operator new();
  v8 = *(sqlite3 **)(v3 + 32);
  std::stringbuf::str();
  degas::Statement::Statement(v7, v8, (uint64_t)&__p);
  std::shared_ptr<degas::Statement>::shared_ptr[abi:ne180100]<degas::Statement,void>(a2, (uint64_t)v7);
  if (v11 < 0)
    operator delete(__p);
  v12[0] = *MEMORY[0x1E0DE4F60];
  *(_QWORD *)((char *)v12 + *(_QWORD *)(v12[0] - 24)) = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 24);
  v12[1] = MEMORY[0x1E0DE4FB8] + 16;
  if (v13 < 0)
    operator delete((void *)v12[9]);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  return MEMORY[0x1CAA4AD98](&v14);
}

void sub_1CA17F3C0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15)
{
  uint64_t v15;

  MEMORY[0x1CAA4ADC8](v15, 0x1020C4062D53EE8);
  std::ostringstream::~ostringstream((uint64_t)&a15);
  _Unwind_Resume(a1);
}

uint64_t degas::AttributeValueTable::insertOrUpdate(degas::AttributeValueTable *this, sqlite3_int64 a2, sqlite3_int64 a3, sqlite3_int64 a4)
{
  unsigned int v7;
  uint64_t v8;
  uint64_t *Statement;
  _QWORD v11[5];

  v7 = (*((unsigned __int8 *)this + 48) << 16) | 0x300;
  v8 = *((_QWORD *)this + 5);
  v11[0] = MEMORY[0x1E0C809B0];
  v11[1] = 0x40000000;
  v11[2] = ___ZNK5degas19AttributeValueTable15upsertStatementEv_block_invoke;
  v11[3] = &__block_descriptor_tmp_1245;
  v11[4] = this;
  Statement = degas::StatementCache::getStatement(v8, v7, (uint64_t)v11);
  degas::Statement::bindInteger((sqlite3_stmt **)*Statement, 1, a3);
  degas::Statement::bindInteger((sqlite3_stmt **)*Statement, 2, a2);
  degas::Statement::bindInteger((sqlite3_stmt **)*Statement, 3, a4);
  degas::Statement::bindNull((sqlite3_stmt **)*Statement, 4);
  degas::Statement::bindNull((sqlite3_stmt **)*Statement, 5);
  degas::Statement::bindInteger((sqlite3_stmt **)*Statement, 6, 1);
  return degas::Statement::update((sqlite3_stmt **)*Statement);
}

uint64_t degas::AttributeValueTable::insertOrUpdateUnsigned(degas::AttributeValueTable *this, sqlite3_int64 a2, sqlite3_int64 a3, sqlite3_int64 a4)
{
  unsigned int v7;
  uint64_t v8;
  uint64_t *Statement;
  _QWORD v11[5];

  v7 = (*((unsigned __int8 *)this + 48) << 16) | 0x300;
  v8 = *((_QWORD *)this + 5);
  v11[0] = MEMORY[0x1E0C809B0];
  v11[1] = 0x40000000;
  v11[2] = ___ZNK5degas19AttributeValueTable15upsertStatementEv_block_invoke;
  v11[3] = &__block_descriptor_tmp_1245;
  v11[4] = this;
  Statement = degas::StatementCache::getStatement(v8, v7, (uint64_t)v11);
  degas::Statement::bindInteger((sqlite3_stmt **)*Statement, 1, a3);
  degas::Statement::bindInteger((sqlite3_stmt **)*Statement, 2, a2);
  degas::Statement::bindInteger((sqlite3_stmt **)*Statement, 3, a4);
  degas::Statement::bindNull((sqlite3_stmt **)*Statement, 4);
  degas::Statement::bindNull((sqlite3_stmt **)*Statement, 5);
  degas::Statement::bindInteger((sqlite3_stmt **)*Statement, 6, 4);
  return degas::Statement::update((sqlite3_stmt **)*Statement);
}

uint64_t degas::AttributeValueTable::insertOrUpdate(degas::AttributeValueTable *this, sqlite3_int64 a2, sqlite3_int64 a3, double a4)
{
  unsigned int v7;
  uint64_t v8;
  uint64_t *Statement;
  _QWORD v11[5];

  v7 = (*((unsigned __int8 *)this + 48) << 16) | 0x300;
  v8 = *((_QWORD *)this + 5);
  v11[0] = MEMORY[0x1E0C809B0];
  v11[1] = 0x40000000;
  v11[2] = ___ZNK5degas19AttributeValueTable15upsertStatementEv_block_invoke;
  v11[3] = &__block_descriptor_tmp_1245;
  v11[4] = this;
  Statement = degas::StatementCache::getStatement(v8, v7, (uint64_t)v11);
  degas::Statement::bindInteger((sqlite3_stmt **)*Statement, 1, a3);
  degas::Statement::bindInteger((sqlite3_stmt **)*Statement, 2, a2);
  degas::Statement::bindNull((sqlite3_stmt **)*Statement, 3);
  degas::Statement::bindDouble((sqlite3_stmt **)*Statement, 4, a4);
  degas::Statement::bindNull((sqlite3_stmt **)*Statement, 5);
  degas::Statement::bindInteger((sqlite3_stmt **)*Statement, 6, 2);
  return degas::Statement::update((sqlite3_stmt **)*Statement);
}

uint64_t degas::AttributeValueTable::insertOrUpdate(uint64_t a1, sqlite3_int64 a2, sqlite3_int64 a3, uint64_t *a4)
{
  unsigned int v7;
  uint64_t v8;
  uint64_t *Statement;
  _QWORD v11[5];

  v7 = (*(unsigned __int8 *)(a1 + 48) << 16) | 0x300;
  v8 = *(_QWORD *)(a1 + 40);
  v11[0] = MEMORY[0x1E0C809B0];
  v11[1] = 0x40000000;
  v11[2] = ___ZNK5degas19AttributeValueTable15upsertStatementEv_block_invoke;
  v11[3] = &__block_descriptor_tmp_1245;
  v11[4] = a1;
  Statement = degas::StatementCache::getStatement(v8, v7, (uint64_t)v11);
  degas::Statement::bindInteger((sqlite3_stmt **)*Statement, 1, a3);
  degas::Statement::bindInteger((sqlite3_stmt **)*Statement, 2, a2);
  degas::Statement::bindNull((sqlite3_stmt **)*Statement, 3);
  degas::Statement::bindNull((sqlite3_stmt **)*Statement, 4);
  degas::Statement::bindString(*Statement, 5, a4);
  degas::Statement::bindInteger((sqlite3_stmt **)*Statement, 6, 3);
  return degas::Statement::update((sqlite3_stmt **)*Statement);
}

uint64_t *degas::AttributeValueTable::prepareStatementToReadByIdentifier(degas::AttributeValueTable *this, sqlite3_int64 a2)
{
  unsigned int v3;
  uint64_t v4;
  uint64_t *Statement;
  _QWORD v7[5];

  v3 = (*((unsigned __int8 *)this + 48) << 16) | 0x600;
  v4 = *((_QWORD *)this + 5);
  v7[0] = MEMORY[0x1E0C809B0];
  v7[1] = 0x40000000;
  v7[2] = ___ZNK5degas19AttributeValueTable25readByIdentifierStatementEv_block_invoke;
  v7[3] = &__block_descriptor_tmp_30;
  v7[4] = this;
  Statement = degas::StatementCache::getStatement(v4, v3, (uint64_t)v7);
  degas::Statement::bindInteger((sqlite3_stmt **)*Statement, 1, a2);
  return Statement;
}

uint64_t *degas::AttributeValueTable::prepareStatementToReadByAttrIdIdentifier(degas::AttributeValueTable *this, sqlite3_int64 a2, sqlite3_int64 a3)
{
  unsigned int v5;
  uint64_t v6;
  uint64_t *Statement;
  _QWORD v9[5];

  v5 = (*((unsigned __int8 *)this + 48) << 16) | 0x800;
  v6 = *((_QWORD *)this + 5);
  v9[0] = MEMORY[0x1E0C809B0];
  v9[1] = 0x40000000;
  v9[2] = ___ZNK5degas19AttributeValueTable31readByAttrIdIdentifierStatementEv_block_invoke;
  v9[3] = &__block_descriptor_tmp_31;
  v9[4] = this;
  Statement = degas::StatementCache::getStatement(v6, v5, (uint64_t)v9);
  degas::Statement::bindInteger((sqlite3_stmt **)*Statement, 1, a3);
  degas::Statement::bindInteger((sqlite3_stmt **)*Statement, 2, a2);
  return Statement;
}

uint64_t *degas::AttributeValueTable::prepareStatementToReadByBitmap(degas::AttributeValueTable *this, Bitmap *a2)
{
  unsigned int v3;
  uint64_t v4;
  uint64_t *Statement;
  _QWORD v7[5];

  v3 = (*((unsigned __int8 *)this + 48) << 16) | 0x801;
  v4 = *((_QWORD *)this + 5);
  v7[0] = MEMORY[0x1E0C809B0];
  v7[1] = 0x40000000;
  v7[2] = ___ZNK5degas19AttributeValueTable21readByBitmapStatementEv_block_invoke;
  v7[3] = &__block_descriptor_tmp_34;
  v7[4] = this;
  Statement = degas::StatementCache::getStatement(v4, v3, (uint64_t)v7);
  degas::Statement::bindBitmapPointer((sqlite3_stmt **)*Statement, 1, a2);
  return Statement;
}

uint64_t *degas::AttributeValueTable::prepareStatementToReadByBitmapAndAttrIdIdentifier(degas::AttributeValueTable *this, Bitmap *a2, sqlite3_int64 a3)
{
  unsigned int v5;
  uint64_t v6;
  uint64_t *Statement;
  _QWORD v9[5];

  v5 = (*((unsigned __int8 *)this + 48) << 16) | 0x802;
  v6 = *((_QWORD *)this + 5);
  v9[0] = MEMORY[0x1E0C809B0];
  v9[1] = 0x40000000;
  v9[2] = ___ZNK5degas19AttributeValueTable38readByBitmapAndAttrIdentifierStatementEv_block_invoke;
  v9[3] = &__block_descriptor_tmp_39;
  v9[4] = this;
  Statement = degas::StatementCache::getStatement(v6, v5, (uint64_t)v9);
  degas::Statement::bindBitmapPointer((sqlite3_stmt **)*Statement, 1, a2);
  degas::Statement::bindInteger((sqlite3_stmt **)*Statement, 2, a3);
  return Statement;
}

uint64_t *degas::AttributeValueTable::prepareStatementToReadAll(degas::AttributeValueTable *this)
{
  unsigned int v1;
  uint64_t v2;
  _QWORD v4[5];

  v1 = (*((unsigned __int8 *)this + 48) << 16) | 0x700;
  v2 = *((_QWORD *)this + 5);
  v4[0] = MEMORY[0x1E0C809B0];
  v4[1] = 0x40000000;
  v4[2] = ___ZNK5degas19AttributeValueTable16readAllStatementEv_block_invoke;
  v4[3] = &__block_descriptor_tmp_65;
  v4[4] = this;
  return degas::StatementCache::getStatement(v2, v1, (uint64_t)v4);
}

uint64_t *degas::AttributeValueTable::prepareStatementToReadByValue(uint64_t a1, sqlite3_int64 a2, sqlite3_int64 a3, int a4)
{
  unsigned int v6;
  uint64_t v7;
  uint64_t *Statement;
  _QWORD v10[5];
  int v11;

  v6 = a4 | (*(unsigned __int8 *)(a1 + 48) << 16) | 0x900;
  v7 = *(_QWORD *)(a1 + 40);
  v10[0] = MEMORY[0x1E0C809B0];
  v10[1] = 0x40000000;
  v10[2] = ___ZNK5degas19AttributeValueTable23readByIntValueStatementENS_14BinaryOperatorE_block_invoke;
  v10[3] = &__block_descriptor_tmp_37;
  v10[4] = a1;
  v11 = a4;
  Statement = degas::StatementCache::getStatement(v7, v6, (uint64_t)v10);
  degas::Statement::bindInteger((sqlite3_stmt **)*Statement, 1, a2);
  degas::Statement::bindInteger((sqlite3_stmt **)*Statement, 2, a3);
  return Statement;
}

uint64_t *degas::AttributeValueTable::prepareStatementToReadByValue(uint64_t a1, sqlite3_int64 a2, int a3, double a4)
{
  unsigned int v6;
  uint64_t v7;
  uint64_t *Statement;
  _QWORD v10[5];
  int v11;

  v6 = a3 | (*(unsigned __int8 *)(a1 + 48) << 16) | 0xA00;
  v7 = *(_QWORD *)(a1 + 40);
  v10[0] = MEMORY[0x1E0C809B0];
  v10[1] = 0x40000000;
  v10[2] = ___ZNK5degas19AttributeValueTable24readByRealValueStatementENS_14BinaryOperatorE_block_invoke;
  v10[3] = &__block_descriptor_tmp_41;
  v10[4] = a1;
  v11 = a3;
  Statement = degas::StatementCache::getStatement(v7, v6, (uint64_t)v10);
  degas::Statement::bindInteger((sqlite3_stmt **)*Statement, 1, a2);
  degas::Statement::bindDouble((sqlite3_stmt **)*Statement, 2, a4);
  return Statement;
}

uint64_t *degas::AttributeValueTable::prepareStatementToReadByValue(uint64_t a1, sqlite3_int64 a2, uint64_t *a3, int a4)
{
  unsigned int v6;
  uint64_t v7;
  uint64_t *Statement;
  _QWORD v10[5];
  int v11;

  v6 = a4 | (*(unsigned __int8 *)(a1 + 48) << 16) | 0xB00;
  v7 = *(_QWORD *)(a1 + 40);
  v10[0] = MEMORY[0x1E0C809B0];
  v10[1] = 0x40000000;
  v10[2] = ___ZNK5degas19AttributeValueTable26readByStringValueStatementENS_14BinaryOperatorE_block_invoke;
  v10[3] = &__block_descriptor_tmp_43;
  v10[4] = a1;
  v11 = a4;
  Statement = degas::StatementCache::getStatement(v7, v6, (uint64_t)v10);
  degas::Statement::bindInteger((sqlite3_stmt **)*Statement, 1, a2);
  degas::Statement::bindString(*Statement, 2, a3);
  return Statement;
}

uint64_t *degas::AttributeValueTable::prepareStatementToReadByValues(uint64_t a1, sqlite3_int64 a2, void *a3, int a4, int a5)
{
  unsigned int v8;
  uint64_t v9;
  uint64_t *Statement;
  _QWORD v12[5];
  int v13;

  v8 = a5 | (*(unsigned __int8 *)(a1 + 48) << 16) | 0xC00;
  v9 = *(_QWORD *)(a1 + 40);
  v12[0] = MEMORY[0x1E0C809B0];
  v12[1] = 0x40000000;
  v12[2] = ___ZNK5degas19AttributeValueTable24readByIntValuesStatementENS_14BinaryOperatorE_block_invoke;
  v12[3] = &__block_descriptor_tmp_45;
  v12[4] = a1;
  v13 = a5;
  Statement = degas::StatementCache::getStatement(v9, v8, (uint64_t)v12);
  degas::Statement::bindInteger((sqlite3_stmt **)*Statement, 1, a2);
  degas::Statement::bindArrayPointer((sqlite3_stmt **)*Statement, 2, a3);
  degas::Statement::bindInteger((sqlite3_stmt **)*Statement, 3, a4);
  return Statement;
}

{
  int v8;
  uint64_t v9;
  uint64_t *Statement;
  _QWORD v12[5];
  int v13;

  v8 = a5 | (*(unsigned __int8 *)(a1 + 48) << 16);
  v9 = *(_QWORD *)(a1 + 40);
  v12[0] = MEMORY[0x1E0C809B0];
  v12[2] = ___ZNK5degas19AttributeValueTable25readByRealValuesStatementENS_14BinaryOperatorE_block_invoke;
  v12[3] = &__block_descriptor_tmp_47;
  v12[1] = 0x40000000;
  v12[4] = a1;
  v13 = a5;
  Statement = degas::StatementCache::getStatement(v9, v8 | 0xD00u, (uint64_t)v12);
  degas::Statement::bindInteger((sqlite3_stmt **)*Statement, 1, a2);
  degas::Statement::bindArrayPointer((sqlite3_stmt **)*Statement, 2, a3);
  degas::Statement::bindInteger((sqlite3_stmt **)*Statement, 3, a4);
  return Statement;
}

{
  unsigned int v8;
  uint64_t v9;
  uint64_t *Statement;
  _QWORD v12[5];
  int v13;

  v8 = a5 | (*(unsigned __int8 *)(a1 + 48) << 16) | 0xE00;
  v9 = *(_QWORD *)(a1 + 40);
  v12[0] = MEMORY[0x1E0C809B0];
  v12[1] = 0x40000000;
  v12[2] = ___ZNK5degas19AttributeValueTable27readByStringValuesStatementENS_14BinaryOperatorE_block_invoke;
  v12[3] = &__block_descriptor_tmp_49;
  v12[4] = a1;
  v13 = a5;
  Statement = degas::StatementCache::getStatement(v9, v8, (uint64_t)v12);
  degas::Statement::bindInteger((sqlite3_stmt **)*Statement, 1, a2);
  degas::Statement::bindArrayPointer((sqlite3_stmt **)*Statement, 2, a3);
  degas::Statement::bindInteger((sqlite3_stmt **)*Statement, 3, a4);
  return Statement;
}

uint64_t *degas::AttributeValueTable::prepareStatementToReadByValueIdentifiers(uint64_t a1, sqlite3_int64 a2, sqlite3_int64 a3, int a4, Bitmap *a5)
{
  uint64_t *v8;

  v8 = degas::AttributeValueTable::readByIntValueIdentifiersStatement(a1, a4);
  degas::Statement::bindBitmapPointer((sqlite3_stmt **)*v8, 1, a5);
  degas::Statement::bindInteger((sqlite3_stmt **)*v8, 2, a2);
  degas::Statement::bindInteger((sqlite3_stmt **)*v8, 3, a3);
  return v8;
}

uint64_t *degas::AttributeValueTable::prepareStatementToReadByValueIdentifiers(uint64_t a1, sqlite3_int64 a2, int a3, Bitmap *a4, double a5)
{
  uint64_t *v8;

  v8 = degas::AttributeValueTable::readByRealValueIdentifiersStatement(a1, a3);
  degas::Statement::bindBitmapPointer((sqlite3_stmt **)*v8, 1, a4);
  degas::Statement::bindInteger((sqlite3_stmt **)*v8, 2, a2);
  degas::Statement::bindDouble((sqlite3_stmt **)*v8, 3, a5);
  return v8;
}

uint64_t *degas::AttributeValueTable::prepareStatementToReadByValueIdentifiers(uint64_t a1, sqlite3_int64 a2, uint64_t *a3, int a4, Bitmap *a5)
{
  uint64_t *v8;

  v8 = degas::AttributeValueTable::readByStringValueIdentifiersStatement(a1, a4);
  degas::Statement::bindBitmapPointer((sqlite3_stmt **)*v8, 1, a5);
  degas::Statement::bindInteger((sqlite3_stmt **)*v8, 2, a2);
  degas::Statement::bindString(*v8, 3, a3);
  return v8;
}

uint64_t *degas::AttributeValueTable::prepareStatementToReadByRange(uint64_t a1, sqlite3_int64 a2, sqlite3_int64 a3, sqlite3_int64 a4, int a5)
{
  uint64_t *v8;

  v8 = degas::AttributeValueTable::readByIntRangeStatement(a1, a5);
  degas::Statement::bindInteger((sqlite3_stmt **)*v8, 1, a2);
  degas::Statement::bindInteger((sqlite3_stmt **)*v8, 2, a3);
  degas::Statement::bindInteger((sqlite3_stmt **)*v8, 3, a4);
  return v8;
}

uint64_t *degas::AttributeValueTable::prepareStatementToReadByRange(uint64_t a1, sqlite3_int64 a2, int a3, double a4, double a5)
{
  uint64_t *v8;

  v8 = degas::AttributeValueTable::readByRealRangeStatement(a1, a3);
  degas::Statement::bindInteger((sqlite3_stmt **)*v8, 1, a2);
  degas::Statement::bindDouble((sqlite3_stmt **)*v8, 2, a4);
  degas::Statement::bindDouble((sqlite3_stmt **)*v8, 3, a5);
  return v8;
}

uint64_t *degas::AttributeValueTable::prepareStatementToReadByRange(uint64_t a1, sqlite3_int64 a2, uint64_t *a3, uint64_t *a4, int a5)
{
  uint64_t *v8;

  v8 = degas::AttributeValueTable::readByStringRangeStatement(a1, a5);
  degas::Statement::bindInteger((sqlite3_stmt **)*v8, 1, a2);
  degas::Statement::bindString(*v8, 2, a3);
  degas::Statement::bindString(*v8, 3, a4);
  return v8;
}

_QWORD *degas::AttributeValueCursor::AttributeValueCursor(_QWORD *this)
{
  *this = 0;
  this[1] = 0;
  return this;
}

degas::AttributeValueCursor *degas::AttributeValueCursor::AttributeValueCursor(degas::AttributeValueCursor *this, const degas::AttributeValueTable *a2)
{
  unsigned int v3;
  uint64_t v4;
  uint64_t *Statement;
  uint64_t v6;
  unint64_t *v7;
  unint64_t v8;
  _QWORD v10[5];

  v3 = (*((unsigned __int8 *)a2 + 48) << 16) | 0x700;
  v4 = *((_QWORD *)a2 + 5);
  v10[0] = MEMORY[0x1E0C809B0];
  v10[1] = 0x40000000;
  v10[2] = ___ZNK5degas19AttributeValueTable16readAllStatementEv_block_invoke;
  v10[3] = &__block_descriptor_tmp_65;
  v10[4] = a2;
  Statement = degas::StatementCache::getStatement(v4, v3, (uint64_t)v10);
  *(_QWORD *)this = *Statement;
  v6 = Statement[1];
  *((_QWORD *)this + 1) = v6;
  if (v6)
  {
    v7 = (unint64_t *)(v6 + 8);
    do
      v8 = __ldxr(v7);
    while (__stxr(v8 + 1, v7));
  }
  return this;
}

{
  unsigned int v3;
  uint64_t v4;
  uint64_t *Statement;
  uint64_t v6;
  unint64_t *v7;
  unint64_t v8;
  _QWORD v10[5];

  v3 = (*((unsigned __int8 *)a2 + 48) << 16) | 0x700;
  v4 = *((_QWORD *)a2 + 5);
  v10[0] = MEMORY[0x1E0C809B0];
  v10[1] = 0x40000000;
  v10[2] = ___ZNK5degas19AttributeValueTable16readAllStatementEv_block_invoke;
  v10[3] = &__block_descriptor_tmp_65;
  v10[4] = a2;
  Statement = degas::StatementCache::getStatement(v4, v3, (uint64_t)v10);
  *(_QWORD *)this = *Statement;
  v6 = Statement[1];
  *((_QWORD *)this + 1) = v6;
  if (v6)
  {
    v7 = (unint64_t *)(v6 + 8);
    do
      v8 = __ldxr(v7);
    while (__stxr(v8 + 1, v7));
  }
  return this;
}

degas::AttributeValueCursor *degas::AttributeValueCursor::AttributeValueCursor(degas::AttributeValueCursor *this, sqlite3_int64 a2, const degas::AttributeValueTable *a3)
{
  unsigned int v5;
  uint64_t v6;
  uint64_t *Statement;
  uint64_t v8;
  unint64_t *v9;
  unint64_t v10;
  _QWORD v12[5];

  v5 = (*((unsigned __int8 *)a3 + 48) << 16) | 0x600;
  v6 = *((_QWORD *)a3 + 5);
  v12[0] = MEMORY[0x1E0C809B0];
  v12[1] = 0x40000000;
  v12[2] = ___ZNK5degas19AttributeValueTable25readByIdentifierStatementEv_block_invoke;
  v12[3] = &__block_descriptor_tmp_30;
  v12[4] = a3;
  Statement = degas::StatementCache::getStatement(v6, v5, (uint64_t)v12);
  degas::Statement::bindInteger((sqlite3_stmt **)*Statement, 1, a2);
  *(_QWORD *)this = *Statement;
  v8 = Statement[1];
  *((_QWORD *)this + 1) = v8;
  if (v8)
  {
    v9 = (unint64_t *)(v8 + 8);
    do
      v10 = __ldxr(v9);
    while (__stxr(v10 + 1, v9));
  }
  return this;
}

degas::AttributeValueCursor *degas::AttributeValueCursor::AttributeValueCursor(degas::AttributeValueCursor *this, sqlite3_int64 a2, sqlite3_int64 a3, const degas::AttributeValueTable *a4)
{
  uint64_t *v5;
  uint64_t v6;
  unint64_t *v7;
  unint64_t v8;

  v5 = degas::AttributeValueTable::prepareStatementToReadByAttrIdIdentifier(a4, a2, a3);
  v6 = v5[1];
  *(_QWORD *)this = *v5;
  *((_QWORD *)this + 1) = v6;
  if (v6)
  {
    v7 = (unint64_t *)(v6 + 8);
    do
      v8 = __ldxr(v7);
    while (__stxr(v8 + 1, v7));
  }
  return this;
}

{
  uint64_t *v5;
  uint64_t v6;
  unint64_t *v7;
  unint64_t v8;

  v5 = degas::AttributeValueTable::prepareStatementToReadByAttrIdIdentifier(a4, a2, a3);
  v6 = v5[1];
  *(_QWORD *)this = *v5;
  *((_QWORD *)this + 1) = v6;
  if (v6)
  {
    v7 = (unint64_t *)(v6 + 8);
    do
      v8 = __ldxr(v7);
    while (__stxr(v8 + 1, v7));
  }
  return this;
}

degas::AttributeValueCursor *degas::AttributeValueCursor::AttributeValueCursor(degas::AttributeValueCursor *this, Bitmap *a2, const degas::AttributeValueTable *a3)
{
  unsigned int v5;
  uint64_t v6;
  uint64_t *Statement;
  uint64_t v8;
  unint64_t *v9;
  unint64_t v10;
  _QWORD v12[5];

  v5 = (*((unsigned __int8 *)a3 + 48) << 16) | 0x801;
  v6 = *((_QWORD *)a3 + 5);
  v12[0] = MEMORY[0x1E0C809B0];
  v12[1] = 0x40000000;
  v12[2] = ___ZNK5degas19AttributeValueTable21readByBitmapStatementEv_block_invoke;
  v12[3] = &__block_descriptor_tmp_34;
  v12[4] = a3;
  Statement = degas::StatementCache::getStatement(v6, v5, (uint64_t)v12);
  degas::Statement::bindBitmapPointer((sqlite3_stmt **)*Statement, 1, a2);
  *(_QWORD *)this = *Statement;
  v8 = Statement[1];
  *((_QWORD *)this + 1) = v8;
  if (v8)
  {
    v9 = (unint64_t *)(v8 + 8);
    do
      v10 = __ldxr(v9);
    while (__stxr(v10 + 1, v9));
  }
  return this;
}

degas::AttributeValueCursor *degas::AttributeValueCursor::AttributeValueCursor(degas::AttributeValueCursor *this, Bitmap *a2, sqlite3_int64 a3, const degas::AttributeValueTable *a4)
{
  uint64_t *v5;
  uint64_t v6;
  unint64_t *v7;
  unint64_t v8;

  v5 = degas::AttributeValueTable::prepareStatementToReadByBitmapAndAttrIdIdentifier(a4, a2, a3);
  v6 = v5[1];
  *(_QWORD *)this = *v5;
  *((_QWORD *)this + 1) = v6;
  if (v6)
  {
    v7 = (unint64_t *)(v6 + 8);
    do
      v8 = __ldxr(v7);
    while (__stxr(v8 + 1, v7));
  }
  return this;
}

{
  uint64_t *v5;
  uint64_t v6;
  unint64_t *v7;
  unint64_t v8;

  v5 = degas::AttributeValueTable::prepareStatementToReadByBitmapAndAttrIdIdentifier(a4, a2, a3);
  v6 = v5[1];
  *(_QWORD *)this = *v5;
  *((_QWORD *)this + 1) = v6;
  if (v6)
  {
    v7 = (unint64_t *)(v6 + 8);
    do
      v8 = __ldxr(v7);
    while (__stxr(v8 + 1, v7));
  }
  return this;
}

_QWORD *degas::AttributeValueCursor::setForValue(_QWORD *a1, sqlite3_int64 a2, sqlite3_int64 a3, int a4, uint64_t a5)
{
  uint64_t *v6;

  v6 = degas::AttributeValueTable::prepareStatementToReadByValue(a5, a2, a3, a4);
  return std::shared_ptr<degas::Statement>::operator=[abi:ne180100](a1, *v6, v6[1]);
}

_QWORD *degas::AttributeValueCursor::setForValue(_QWORD *a1, sqlite3_int64 a2, int a3, uint64_t a4, double a5)
{
  uint64_t *v6;

  v6 = degas::AttributeValueTable::prepareStatementToReadByValue(a4, a2, a3, a5);
  return std::shared_ptr<degas::Statement>::operator=[abi:ne180100](a1, *v6, v6[1]);
}

_QWORD *degas::AttributeValueCursor::setForValue(_QWORD *a1, sqlite3_int64 a2, uint64_t *a3, int a4, uint64_t a5)
{
  uint64_t *v6;

  v6 = degas::AttributeValueTable::prepareStatementToReadByValue(a5, a2, a3, a4);
  return std::shared_ptr<degas::Statement>::operator=[abi:ne180100](a1, *v6, v6[1]);
}

_QWORD *degas::AttributeValueCursor::setForValues(_QWORD *a1, sqlite3_int64 a2, void *a3, int a4, int a5, uint64_t a6)
{
  uint64_t *v7;

  v7 = degas::AttributeValueTable::prepareStatementToReadByValues(a6, a2, a3, a4, a5);
  return std::shared_ptr<degas::Statement>::operator=[abi:ne180100](a1, *v7, v7[1]);
}

{
  uint64_t *v7;

  v7 = degas::AttributeValueTable::prepareStatementToReadByValues(a6, a2, a3, a4, a5);
  return std::shared_ptr<degas::Statement>::operator=[abi:ne180100](a1, *v7, v7[1]);
}

{
  uint64_t *v7;

  v7 = degas::AttributeValueTable::prepareStatementToReadByValues(a6, a2, a3, a4, a5);
  return std::shared_ptr<degas::Statement>::operator=[abi:ne180100](a1, *v7, v7[1]);
}

_QWORD *degas::AttributeValueCursor::setToFilterForValue(_QWORD *a1, sqlite3_int64 a2, sqlite3_int64 a3, int a4, Bitmap *a5, uint64_t a6)
{
  uint64_t *v7;

  v7 = degas::AttributeValueTable::prepareStatementToReadByValueIdentifiers(a6, a2, a3, a4, a5);
  return std::shared_ptr<degas::Statement>::operator=[abi:ne180100](a1, *v7, v7[1]);
}

_QWORD *degas::AttributeValueCursor::setToFilterForValue(_QWORD *a1, sqlite3_int64 a2, int a3, Bitmap *a4, uint64_t a5, double a6)
{
  uint64_t *v7;

  v7 = degas::AttributeValueTable::prepareStatementToReadByValueIdentifiers(a5, a2, a3, a4, a6);
  return std::shared_ptr<degas::Statement>::operator=[abi:ne180100](a1, *v7, v7[1]);
}

_QWORD *degas::AttributeValueCursor::setToFilterForValue(_QWORD *a1, sqlite3_int64 a2, uint64_t *a3, int a4, Bitmap *a5, uint64_t a6)
{
  uint64_t *v7;

  v7 = degas::AttributeValueTable::prepareStatementToReadByValueIdentifiers(a6, a2, a3, a4, a5);
  return std::shared_ptr<degas::Statement>::operator=[abi:ne180100](a1, *v7, v7[1]);
}

_QWORD *degas::AttributeValueCursor::setForRange(_QWORD *a1, sqlite3_int64 a2, sqlite3_int64 a3, sqlite3_int64 a4, int a5, uint64_t a6)
{
  uint64_t *v7;

  v7 = degas::AttributeValueTable::prepareStatementToReadByRange(a6, a2, a3, a4, a5);
  return std::shared_ptr<degas::Statement>::operator=[abi:ne180100](a1, *v7, v7[1]);
}

_QWORD *degas::AttributeValueCursor::setForRange(_QWORD *a1, sqlite3_int64 a2, int a3, uint64_t a4, double a5, double a6)
{
  uint64_t *v7;

  v7 = degas::AttributeValueTable::prepareStatementToReadByRange(a4, a2, a3, a5, a6);
  return std::shared_ptr<degas::Statement>::operator=[abi:ne180100](a1, *v7, v7[1]);
}

_QWORD *degas::AttributeValueCursor::setForRange(_QWORD *a1, sqlite3_int64 a2, uint64_t *a3, uint64_t *a4, int a5, uint64_t a6)
{
  uint64_t *v7;

  v7 = degas::AttributeValueTable::prepareStatementToReadByRange(a6, a2, a3, a4, a5);
  return std::shared_ptr<degas::Statement>::operator=[abi:ne180100](a1, *v7, v7[1]);
}

sqlite3_int64 degas::AttributeValueCursor::elementId(sqlite3_stmt ***this)
{
  return sqlite3_column_int64(**this, 0);
}

sqlite3_int64 degas::AttributeValueCursor::attributeId(sqlite3_stmt ***this)
{
  return sqlite3_column_int64(**this, 1);
}

sqlite3_int64 degas::AttributeValueCursor::integerValue(sqlite3_stmt ***this)
{
  return sqlite3_column_int64(**this, 2);
}

double degas::AttributeValueCursor::realValue(sqlite3_stmt ***this)
{
  return sqlite3_column_double(**this, 3);
}

void degas::AttributeValueCursor::stringValue(sqlite3_stmt ***a1, uint64_t a2)
{
  degas::Statement::stringColumnValue(*a1, 4, a2);
}

sqlite3_int64 degas::AttributeValueCursor::valueType(sqlite3_stmt ***this)
{
  return sqlite3_column_int64(**this, 5);
}

_QWORD *degas::TombstoneCopier::TombstoneCopier(_QWORD *result, uint64_t a2, uint64_t a3)
{
  *result = a2;
  result[1] = a3;
  return result;
}

{
  *result = a2;
  result[1] = a3;
  return result;
}

uint64_t degas::TombstoneCopier::copyNode(degas::TombstoneCopier *this, sqlite3_int64 a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t *Statement;
  uint64_t v7;
  uint64_t v8;
  const char *v9;
  NSObject *v10;
  uint64_t v11;
  uint64_t *v12;
  const char *v14;
  _QWORD v15[5];
  _QWORD v16[5];
  uint8_t buf[4];
  const char *v18;
  uint64_t v19;

  v19 = *MEMORY[0x1E0C80C00];
  v4 = MEMORY[0x1E0C809B0];
  v5 = *((_QWORD *)this + 1);
  v16[0] = MEMORY[0x1E0C809B0];
  v16[1] = 0x40000000;
  v16[2] = ___ZN5degas15TombstoneCopier8copyNodeEy_block_invoke;
  v16[3] = &__block_descriptor_tmp_1343;
  v16[4] = this;
  Statement = degas::StatementCache::getStatement(v5, 0x150300u, (uint64_t)v16);
  degas::Statement::bindInteger((sqlite3_stmt **)*Statement, 1, a2);
  v7 = degas::Statement::update((sqlite3_stmt **)*Statement);
  if ((_DWORD)v7)
  {
    v8 = v7;
    if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
    {
      v9 = sqlite3_errmsg(*(sqlite3 **)this);
      *(_DWORD *)buf = 136315138;
      v18 = v9;
      v10 = MEMORY[0x1E0C81028];
LABEL_8:
      _os_log_error_impl(&dword_1CA0A5000, v10, OS_LOG_TYPE_ERROR, "tombstone node copy failed: %s", buf, 0xCu);
    }
  }
  else
  {
    v11 = *((_QWORD *)this + 1);
    v15[0] = v4;
    v15[1] = 0x40000000;
    v15[2] = ___ZN5degas15TombstoneCopier8copyNodeEy_block_invoke_2;
    v15[3] = &__block_descriptor_tmp_4_1345;
    v15[4] = this;
    v12 = degas::StatementCache::getStatement(v11, 0x150301u, (uint64_t)v15);
    degas::Statement::bindInteger((sqlite3_stmt **)*v12, 1, a2);
    v8 = degas::Statement::update((sqlite3_stmt **)*v12);
    if ((_DWORD)v8 && os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
    {
      v14 = sqlite3_errmsg(*(sqlite3 **)this);
      *(_DWORD *)buf = 136315138;
      v18 = v14;
      v10 = MEMORY[0x1E0C81028];
      goto LABEL_8;
    }
  }
  return v8;
}

void ___ZN5degas15TombstoneCopier8copyNodeEy_block_invoke(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  sqlite3 **v3;
  sqlite3_stmt **v4;
  sqlite3 *v5;
  void *__p[2];
  char v7;

  v3 = *(sqlite3 ***)(a1 + 32);
  v4 = (sqlite3_stmt **)operator new();
  v5 = *v3;
  std::string::basic_string[abi:ne180100]<0>(__p, "insert into TombstoneNode (identifier, labels, edgesIn, edgesOut) select identifier, labels, edgesIn, edgesOut from Node where identifier=?1");
  degas::Statement::Statement(v4, v5, (uint64_t)__p);
  std::shared_ptr<degas::Statement>::shared_ptr[abi:ne180100]<degas::Statement,void>(a2, (uint64_t)v4);
  if (v7 < 0)
    operator delete(__p[0]);
}

void sub_1CA1812F0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  uint64_t v15;

  MEMORY[0x1CAA4ADC8](v15, 0x1020C4062D53EE8);
  _Unwind_Resume(a1);
}

void ___ZN5degas15TombstoneCopier8copyNodeEy_block_invoke_2(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  sqlite3 **v3;
  sqlite3_stmt **v4;
  sqlite3 *v5;
  void *__p[2];
  char v7;

  v3 = *(sqlite3 ***)(a1 + 32);
  v4 = (sqlite3_stmt **)operator new();
  v5 = *v3;
  std::string::basic_string[abi:ne180100]<0>(__p, "insert into TombstoneNodeValue (elementId, attributeId, intValue, realValue, stringValue, dataType) select elementId, attributeId, intValue, realValue, stringValue, datatype from NodeValue where elementId=?1");
  degas::Statement::Statement(v4, v5, (uint64_t)__p);
  std::shared_ptr<degas::Statement>::shared_ptr[abi:ne180100]<degas::Statement,void>(a2, (uint64_t)v4);
  if (v7 < 0)
    operator delete(__p[0]);
}

void sub_1CA1813CC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  uint64_t v15;

  MEMORY[0x1CAA4ADC8](v15, 0x1020C4062D53EE8);
  _Unwind_Resume(a1);
}

uint64_t degas::TombstoneCopier::copyEdge(degas::TombstoneCopier *this, sqlite3_int64 a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t *Statement;
  uint64_t v7;
  uint64_t v8;
  const char *v9;
  NSObject *v10;
  uint64_t v11;
  uint64_t *v12;
  const char *v14;
  _QWORD v15[5];
  _QWORD v16[5];
  uint8_t buf[4];
  const char *v18;
  uint64_t v19;

  v19 = *MEMORY[0x1E0C80C00];
  v4 = MEMORY[0x1E0C809B0];
  v5 = *((_QWORD *)this + 1);
  v16[0] = MEMORY[0x1E0C809B0];
  v16[1] = 0x40000000;
  v16[2] = ___ZN5degas15TombstoneCopier8copyEdgeEy_block_invoke;
  v16[3] = &__block_descriptor_tmp_6_1350;
  v16[4] = this;
  Statement = degas::StatementCache::getStatement(v5, 0x150302u, (uint64_t)v16);
  degas::Statement::bindInteger((sqlite3_stmt **)*Statement, 1, a2);
  v7 = degas::Statement::update((sqlite3_stmt **)*Statement);
  if ((_DWORD)v7)
  {
    v8 = v7;
    if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
    {
      v9 = sqlite3_errmsg(*(sqlite3 **)this);
      *(_DWORD *)buf = 136315138;
      v18 = v9;
      v10 = MEMORY[0x1E0C81028];
LABEL_8:
      _os_log_error_impl(&dword_1CA0A5000, v10, OS_LOG_TYPE_ERROR, "tombstone edge copy failed: %s", buf, 0xCu);
    }
  }
  else
  {
    v11 = *((_QWORD *)this + 1);
    v15[0] = v4;
    v15[1] = 0x40000000;
    v15[2] = ___ZN5degas15TombstoneCopier8copyEdgeEy_block_invoke_7;
    v15[3] = &__block_descriptor_tmp_9;
    v15[4] = this;
    v12 = degas::StatementCache::getStatement(v11, 0x150303u, (uint64_t)v15);
    degas::Statement::bindInteger((sqlite3_stmt **)*v12, 1, a2);
    v8 = degas::Statement::update((sqlite3_stmt **)*v12);
    if ((_DWORD)v8 && os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
    {
      v14 = sqlite3_errmsg(*(sqlite3 **)this);
      *(_DWORD *)buf = 136315138;
      v18 = v14;
      v10 = MEMORY[0x1E0C81028];
      goto LABEL_8;
    }
  }
  return v8;
}

void ___ZN5degas15TombstoneCopier8copyEdgeEy_block_invoke(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  sqlite3 **v3;
  sqlite3_stmt **v4;
  sqlite3 *v5;
  void *__p[2];
  char v7;

  v3 = *(sqlite3 ***)(a1 + 32);
  v4 = (sqlite3_stmt **)operator new();
  v5 = *v3;
  std::string::basic_string[abi:ne180100]<0>(__p, "insert into TombstoneEdge (identifier, labels, sourceNodeId, targetNodeId) select identifier, labels, sourceNodeId, targetNodeId from Edge where identifier=?1");
  degas::Statement::Statement(v4, v5, (uint64_t)__p);
  std::shared_ptr<degas::Statement>::shared_ptr[abi:ne180100]<degas::Statement,void>(a2, (uint64_t)v4);
  if (v7 < 0)
    operator delete(__p[0]);
}

void sub_1CA18167C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  uint64_t v15;

  MEMORY[0x1CAA4ADC8](v15, 0x1020C4062D53EE8);
  _Unwind_Resume(a1);
}

void ___ZN5degas15TombstoneCopier8copyEdgeEy_block_invoke_7(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  sqlite3 **v3;
  sqlite3_stmt **v4;
  sqlite3 *v5;
  void *__p[2];
  char v7;

  v3 = *(sqlite3 ***)(a1 + 32);
  v4 = (sqlite3_stmt **)operator new();
  v5 = *v3;
  std::string::basic_string[abi:ne180100]<0>(__p, "insert into TombstoneEdgeValue (elementId, attributeId, intValue, realValue, stringValue, dataType) select elementId, attributeId, intValue, realValue, stringValue, datatype from EdgeValue where elementId=?1");
  degas::Statement::Statement(v4, v5, (uint64_t)__p);
  std::shared_ptr<degas::Statement>::shared_ptr[abi:ne180100]<degas::Statement,void>(a2, (uint64_t)v4);
  if (v7 < 0)
    operator delete(__p[0]);
}

void sub_1CA181758(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  uint64_t v15;

  MEMORY[0x1CAA4ADC8](v15, 0x1020C4062D53EE8);
  _Unwind_Resume(a1);
}

uint64_t degas::TombstoneCopier::copyNodes(degas::TombstoneCopier *this, Bitmap *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t *Statement;
  uint64_t v7;
  uint64_t v8;
  const char *v9;
  NSObject *v10;
  uint64_t v11;
  uint64_t *v12;
  const char *v14;
  _QWORD v15[5];
  _QWORD v16[5];
  uint8_t buf[4];
  const char *v18;
  uint64_t v19;

  v19 = *MEMORY[0x1E0C80C00];
  if (a2->_bitSets.__begin_ == a2->_bitSets.__end_)
    return 0;
  v4 = MEMORY[0x1E0C809B0];
  v5 = *((_QWORD *)this + 1);
  v16[0] = MEMORY[0x1E0C809B0];
  v16[1] = 0x40000000;
  v16[2] = ___ZN5degas15TombstoneCopier9copyNodesERKNS_6BitmapE_block_invoke;
  v16[3] = &__block_descriptor_tmp_11;
  v16[4] = this;
  Statement = degas::StatementCache::getStatement(v5, 0x150304u, (uint64_t)v16);
  degas::Statement::bindBitmapPointer((sqlite3_stmt **)*Statement, 1, a2);
  v7 = degas::Statement::update((sqlite3_stmt **)*Statement);
  if ((_DWORD)v7)
  {
    v8 = v7;
    if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
    {
      v9 = sqlite3_errmsg(*(sqlite3 **)this);
      *(_DWORD *)buf = 136315138;
      v18 = v9;
      v10 = MEMORY[0x1E0C81028];
LABEL_10:
      _os_log_error_impl(&dword_1CA0A5000, v10, OS_LOG_TYPE_ERROR, "tombstone node copy failed: %s", buf, 0xCu);
    }
  }
  else
  {
    v11 = *((_QWORD *)this + 1);
    v15[0] = v4;
    v15[1] = 0x40000000;
    v15[2] = ___ZN5degas15TombstoneCopier9copyNodesERKNS_6BitmapE_block_invoke_12;
    v15[3] = &__block_descriptor_tmp_14_1356;
    v15[4] = this;
    v12 = degas::StatementCache::getStatement(v11, 0x150305u, (uint64_t)v15);
    degas::Statement::bindBitmapPointer((sqlite3_stmt **)*v12, 1, a2);
    v8 = degas::Statement::update((sqlite3_stmt **)*v12);
    if ((_DWORD)v8 && os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
    {
      v14 = sqlite3_errmsg(*(sqlite3 **)this);
      *(_DWORD *)buf = 136315138;
      v18 = v14;
      v10 = MEMORY[0x1E0C81028];
      goto LABEL_10;
    }
  }
  return v8;
}

void ___ZN5degas15TombstoneCopier9copyNodesERKNS_6BitmapE_block_invoke(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  sqlite3 **v3;
  sqlite3_stmt **v4;
  sqlite3 *v5;
  void *__p[2];
  char v7;

  v3 = *(sqlite3 ***)(a1 + 32);
  v4 = (sqlite3_stmt **)operator new();
  v5 = *v3;
  std::string::basic_string[abi:ne180100]<0>(__p, "insert into TombstoneNode (identifier, labels, edgesIn, edgesOut) select identifier, labels, edgesIn, edgesOut from Node where identifier in identifierBitmap(?1)");
  degas::Statement::Statement(v4, v5, (uint64_t)__p);
  std::shared_ptr<degas::Statement>::shared_ptr[abi:ne180100]<degas::Statement,void>(a2, (uint64_t)v4);
  if (v7 < 0)
    operator delete(__p[0]);
}

void sub_1CA181A1C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  uint64_t v15;

  MEMORY[0x1CAA4ADC8](v15, 0x1020C4062D53EE8);
  _Unwind_Resume(a1);
}

void ___ZN5degas15TombstoneCopier9copyNodesERKNS_6BitmapE_block_invoke_12(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  sqlite3 **v3;
  sqlite3_stmt **v4;
  sqlite3 *v5;
  void *__p[2];
  char v7;

  v3 = *(sqlite3 ***)(a1 + 32);
  v4 = (sqlite3_stmt **)operator new();
  v5 = *v3;
  std::string::basic_string[abi:ne180100]<0>(__p, "insert into TombstoneNodeValue (elementId, attributeId, intValue, realValue, stringValue, dataType) select elementId, attributeId, intValue, realValue, stringValue, datatype from NodeValue where elementId in identifierBitmap(?1)");
  degas::Statement::Statement(v4, v5, (uint64_t)__p);
  std::shared_ptr<degas::Statement>::shared_ptr[abi:ne180100]<degas::Statement,void>(a2, (uint64_t)v4);
  if (v7 < 0)
    operator delete(__p[0]);
}

void sub_1CA181AF8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  uint64_t v15;

  MEMORY[0x1CAA4ADC8](v15, 0x1020C4062D53EE8);
  _Unwind_Resume(a1);
}

uint64_t degas::TombstoneCopier::copyEdges(degas::TombstoneCopier *this, Bitmap *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t *Statement;
  uint64_t v7;
  uint64_t v8;
  const char *v9;
  NSObject *v10;
  uint64_t v11;
  uint64_t *v12;
  const char *v14;
  _QWORD v15[5];
  _QWORD v16[5];
  uint8_t buf[4];
  const char *v18;
  uint64_t v19;

  v19 = *MEMORY[0x1E0C80C00];
  if (a2->_bitSets.__begin_ == a2->_bitSets.__end_)
    return 0;
  v4 = MEMORY[0x1E0C809B0];
  v5 = *((_QWORD *)this + 1);
  v16[0] = MEMORY[0x1E0C809B0];
  v16[1] = 0x40000000;
  v16[2] = ___ZN5degas15TombstoneCopier9copyEdgesERKNS_6BitmapE_block_invoke;
  v16[3] = &__block_descriptor_tmp_16;
  v16[4] = this;
  Statement = degas::StatementCache::getStatement(v5, 0x150306u, (uint64_t)v16);
  degas::Statement::bindBitmapPointer((sqlite3_stmt **)*Statement, 1, a2);
  v7 = degas::Statement::update((sqlite3_stmt **)*Statement);
  if ((_DWORD)v7)
  {
    v8 = v7;
    if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
    {
      v9 = sqlite3_errmsg(*(sqlite3 **)this);
      *(_DWORD *)buf = 136315138;
      v18 = v9;
      v10 = MEMORY[0x1E0C81028];
LABEL_10:
      _os_log_error_impl(&dword_1CA0A5000, v10, OS_LOG_TYPE_ERROR, "tombstone edge copy failed: %s", buf, 0xCu);
    }
  }
  else
  {
    v11 = *((_QWORD *)this + 1);
    v15[0] = v4;
    v15[1] = 0x40000000;
    v15[2] = ___ZN5degas15TombstoneCopier9copyEdgesERKNS_6BitmapE_block_invoke_17;
    v15[3] = &__block_descriptor_tmp_19;
    v15[4] = this;
    v12 = degas::StatementCache::getStatement(v11, 0x150307u, (uint64_t)v15);
    degas::Statement::bindBitmapPointer((sqlite3_stmt **)*v12, 1, a2);
    v8 = degas::Statement::update((sqlite3_stmt **)*v12);
    if ((_DWORD)v8 && os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
    {
      v14 = sqlite3_errmsg(*(sqlite3 **)this);
      *(_DWORD *)buf = 136315138;
      v18 = v14;
      v10 = MEMORY[0x1E0C81028];
      goto LABEL_10;
    }
  }
  return v8;
}

void ___ZN5degas15TombstoneCopier9copyEdgesERKNS_6BitmapE_block_invoke(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  sqlite3 **v3;
  sqlite3_stmt **v4;
  sqlite3 *v5;
  void *__p[2];
  char v7;

  v3 = *(sqlite3 ***)(a1 + 32);
  v4 = (sqlite3_stmt **)operator new();
  v5 = *v3;
  std::string::basic_string[abi:ne180100]<0>(__p, "insert into TombstoneEdge (identifier, labels, sourceNodeId, targetNodeId) select identifier, labels, sourceNodeId, targetNodeId from Edge where identifier in identifierBitmap(?1)");
  degas::Statement::Statement(v4, v5, (uint64_t)__p);
  std::shared_ptr<degas::Statement>::shared_ptr[abi:ne180100]<degas::Statement,void>(a2, (uint64_t)v4);
  if (v7 < 0)
    operator delete(__p[0]);
}

void sub_1CA181DBC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  uint64_t v15;

  MEMORY[0x1CAA4ADC8](v15, 0x1020C4062D53EE8);
  _Unwind_Resume(a1);
}

void ___ZN5degas15TombstoneCopier9copyEdgesERKNS_6BitmapE_block_invoke_17(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  sqlite3 **v3;
  sqlite3_stmt **v4;
  sqlite3 *v5;
  void *__p[2];
  char v7;

  v3 = *(sqlite3 ***)(a1 + 32);
  v4 = (sqlite3_stmt **)operator new();
  v5 = *v3;
  std::string::basic_string[abi:ne180100]<0>(__p, "insert into TombstoneEdgeValue (elementId, attributeId, intValue, realValue, stringValue, dataType) select elementId, attributeId, intValue, realValue, stringValue, datatype from EdgeValue where elementId in identifierBitmap(?1)");
  degas::Statement::Statement(v4, v5, (uint64_t)__p);
  std::shared_ptr<degas::Statement>::shared_ptr[abi:ne180100]<degas::Statement,void>(a2, (uint64_t)v4);
  if (v7 < 0)
    operator delete(__p[0]);
}

void sub_1CA181E98(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  uint64_t v15;

  MEMORY[0x1CAA4ADC8](v15, 0x1020C4062D53EE8);
  _Unwind_Resume(a1);
}

void sub_1CA182394(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  uint64_t v9;
  va_list va;

  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Block_object_dispose((const void *)(v9 - 80), 8);
  _Unwind_Resume(a1);
}

uint64_t __Block_byref_object_copy__1409(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void __Block_byref_object_dispose__1410(uint64_t a1)
{

}

void sub_1CA184E84(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t __Block_byref_object_copy__1860(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void __Block_byref_object_dispose__1861(uint64_t a1)
{

}

void degas::LabelledEdgeTable::~LabelledEdgeTable(degas::LabelledEdgeTable *this)
{
  *(_QWORD *)this = off_1E83E43A8;
  *((_QWORD *)this + 4) = 0;
  if (*((char *)this + 31) < 0)
    operator delete(*((void **)this + 1));
}

{
  *(_QWORD *)this = off_1E83E43A8;
  *((_QWORD *)this + 4) = 0;
  if (*((char *)this + 31) < 0)
    operator delete(*((void **)this + 1));
  JUMPOUT(0x1CAA4ADC8);
}

{
  *(_QWORD *)this = off_1E83E43A8;
  *((_QWORD *)this + 4) = 0;
  if (*((char *)this + 31) < 0)
    operator delete(*((void **)this + 1));
}

uint64_t degas::LabelledEdgeTable::createTable(degas::LabelledEdgeTable *this)
{
  return 0;
}

uint64_t degas::LabelledEdgeTable::deleteEntry(degas::LabelledEdgeTable *this)
{
  return 2;
}

degas::LabelledEdgeTable *degas::LabelledEdgeTable::LabelledEdgeTable(degas::LabelledEdgeTable *this, sqlite3 *a2, degas::StatementCache *a3)
{
  std::string *v6;
  int v7;
  void *__p[2];
  uint64_t v10;

  std::string::basic_string[abi:ne180100]<0>(__p, "Edge");
  *(_QWORD *)this = off_1E83E43A8;
  v6 = (std::string *)((char *)this + 8);
  if (SHIBYTE(v10) < 0)
  {
    std::string::__init_copy_ctor_external(v6, (const std::string::value_type *)__p[0], (std::string::size_type)__p[1]);
    v7 = SHIBYTE(v10);
    *((_QWORD *)this + 4) = a2;
    *((_QWORD *)this + 5) = a3;
    if (v7 < 0)
      operator delete(__p[0]);
  }
  else
  {
    *(_OWORD *)&v6->__r_.__value_.__l.__data_ = *(_OWORD *)__p;
    *((_QWORD *)this + 3) = v10;
    *((_QWORD *)this + 4) = a2;
    *((_QWORD *)this + 5) = a3;
  }
  *(_QWORD *)this = off_1E83E3480;
  *((_BYTE *)this + 48) = 22;
  return this;
}

void sub_1CA1854C0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t *degas::LabelledEdgeTable::readTargetNodesByLabelIdentifiersSourceNodeIdentifiersStatement(degas::LabelledEdgeTable *this)
{
  unsigned int v1;
  uint64_t v2;
  _QWORD v4[5];

  v1 = (*((unsigned __int8 *)this + 48) << 16) | 0xC00;
  v2 = *((_QWORD *)this + 5);
  v4[0] = MEMORY[0x1E0C809B0];
  v4[1] = 0x40000000;
  v4[2] = ___ZNK5degas17LabelledEdgeTable63readTargetNodesByLabelIdentifiersSourceNodeIdentifiersStatementEv_block_invoke;
  v4[3] = &__block_descriptor_tmp_1877;
  v4[4] = this;
  return degas::StatementCache::getStatement(v2, v1, (uint64_t)v4);
}

uint64_t ___ZNK5degas17LabelledEdgeTable63readTargetNodesByLabelIdentifiersSourceNodeIdentifiersStatementEv_block_invoke@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v3;
  sqlite3_stmt **v4;
  sqlite3 *v5;
  void *__p;
  char v8;
  _QWORD v9[11];
  char v10;
  uint64_t v11;

  v3 = *(_QWORD *)(a1 + 32);
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v9);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)"select mergeLiteralBitmap(e.targetNodeId) from Edge e, identifierBitmap(?1) b where bitmapContainsBitmap(e.labels, ?2) and e.sourceNodeId = b.value", 147);
  v4 = (sqlite3_stmt **)operator new();
  v5 = *(sqlite3 **)(v3 + 32);
  std::stringbuf::str();
  degas::Statement::Statement(v4, v5, (uint64_t)&__p);
  std::shared_ptr<degas::Statement>::shared_ptr[abi:ne180100]<degas::Statement,void>(a2, (uint64_t)v4);
  if (v8 < 0)
    operator delete(__p);
  v9[0] = *MEMORY[0x1E0DE4F60];
  *(_QWORD *)((char *)v9 + *(_QWORD *)(v9[0] - 24)) = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 24);
  v9[1] = MEMORY[0x1E0DE4FB8] + 16;
  if (v10 < 0)
    operator delete((void *)v9[9]);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  return MEMORY[0x1CAA4AD98](&v11);
}

void sub_1CA18569C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15)
{
  uint64_t v15;

  MEMORY[0x1CAA4ADC8](v15, 0x1020C4062D53EE8);
  std::ostringstream::~ostringstream((uint64_t)&a15);
  _Unwind_Resume(a1);
}

uint64_t *degas::LabelledEdgeTable::readSourceNodesByLabelIdentifiersTargetNodeIdentifiersStatement(degas::LabelledEdgeTable *this)
{
  unsigned int v1;
  uint64_t v2;
  _QWORD v4[5];

  v1 = (*((unsigned __int8 *)this + 48) << 16) | 0xC01;
  v2 = *((_QWORD *)this + 5);
  v4[0] = MEMORY[0x1E0C809B0];
  v4[1] = 0x40000000;
  v4[2] = ___ZNK5degas17LabelledEdgeTable63readSourceNodesByLabelIdentifiersTargetNodeIdentifiersStatementEv_block_invoke;
  v4[3] = &__block_descriptor_tmp_4_1880;
  v4[4] = this;
  return degas::StatementCache::getStatement(v2, v1, (uint64_t)v4);
}

uint64_t ___ZNK5degas17LabelledEdgeTable63readSourceNodesByLabelIdentifiersTargetNodeIdentifiersStatementEv_block_invoke@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v3;
  sqlite3_stmt **v4;
  sqlite3 *v5;
  void *__p;
  char v8;
  _QWORD v9[11];
  char v10;
  uint64_t v11;

  v3 = *(_QWORD *)(a1 + 32);
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v9);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)"select mergeLiteralBitmap(e.sourceNodeId) from Edge e, identifierBitmap(?1) b where bitmapContainsBitmap(e.labels, ?2) and e.targetNodeId = b.value", 147);
  v4 = (sqlite3_stmt **)operator new();
  v5 = *(sqlite3 **)(v3 + 32);
  std::stringbuf::str();
  degas::Statement::Statement(v4, v5, (uint64_t)&__p);
  std::shared_ptr<degas::Statement>::shared_ptr[abi:ne180100]<degas::Statement,void>(a2, (uint64_t)v4);
  if (v8 < 0)
    operator delete(__p);
  v9[0] = *MEMORY[0x1E0DE4F60];
  *(_QWORD *)((char *)v9 + *(_QWORD *)(v9[0] - 24)) = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 24);
  v9[1] = MEMORY[0x1E0DE4FB8] + 16;
  if (v10 < 0)
    operator delete((void *)v9[9]);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  return MEMORY[0x1CAA4AD98](&v11);
}

void sub_1CA185870(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15)
{
  uint64_t v15;

  MEMORY[0x1CAA4ADC8](v15, 0x1020C4062D53EE8);
  std::ostringstream::~ostringstream((uint64_t)&a15);
  _Unwind_Resume(a1);
}

uint64_t *degas::LabelledEdgeTable::readTargetNodesBySourceNodeIdentifiersStatement(degas::LabelledEdgeTable *this)
{
  unsigned int v1;
  uint64_t v2;
  _QWORD v4[5];

  v1 = (*((unsigned __int8 *)this + 48) << 16) | 0xC02;
  v2 = *((_QWORD *)this + 5);
  v4[0] = MEMORY[0x1E0C809B0];
  v4[1] = 0x40000000;
  v4[2] = ___ZNK5degas17LabelledEdgeTable47readTargetNodesBySourceNodeIdentifiersStatementEv_block_invoke;
  v4[3] = &__block_descriptor_tmp_6_1882;
  v4[4] = this;
  return degas::StatementCache::getStatement(v2, v1, (uint64_t)v4);
}

uint64_t ___ZNK5degas17LabelledEdgeTable47readTargetNodesBySourceNodeIdentifiersStatementEv_block_invoke@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v3;
  sqlite3_stmt **v4;
  sqlite3 *v5;
  void *__p;
  char v8;
  _QWORD v9[11];
  char v10;
  uint64_t v11;

  v3 = *(_QWORD *)(a1 + 32);
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v9);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)"select mergeLiteralBitmap(e.targetNodeId) from Edge e, identifierBitmap(?1) b where e.sourceNodeId = b.value", 108);
  v4 = (sqlite3_stmt **)operator new();
  v5 = *(sqlite3 **)(v3 + 32);
  std::stringbuf::str();
  degas::Statement::Statement(v4, v5, (uint64_t)&__p);
  std::shared_ptr<degas::Statement>::shared_ptr[abi:ne180100]<degas::Statement,void>(a2, (uint64_t)v4);
  if (v8 < 0)
    operator delete(__p);
  v9[0] = *MEMORY[0x1E0DE4F60];
  *(_QWORD *)((char *)v9 + *(_QWORD *)(v9[0] - 24)) = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 24);
  v9[1] = MEMORY[0x1E0DE4FB8] + 16;
  if (v10 < 0)
    operator delete((void *)v9[9]);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  return MEMORY[0x1CAA4AD98](&v11);
}

void sub_1CA185A44(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15)
{
  uint64_t v15;

  MEMORY[0x1CAA4ADC8](v15, 0x1020C4062D53EE8);
  std::ostringstream::~ostringstream((uint64_t)&a15);
  _Unwind_Resume(a1);
}

uint64_t *degas::LabelledEdgeTable::readSourceNodesByTargetNodeIdentifiersStatement(degas::LabelledEdgeTable *this)
{
  unsigned int v1;
  uint64_t v2;
  _QWORD v4[5];

  v1 = (*((unsigned __int8 *)this + 48) << 16) | 0xC03;
  v2 = *((_QWORD *)this + 5);
  v4[0] = MEMORY[0x1E0C809B0];
  v4[1] = 0x40000000;
  v4[2] = ___ZNK5degas17LabelledEdgeTable47readSourceNodesByTargetNodeIdentifiersStatementEv_block_invoke;
  v4[3] = &__block_descriptor_tmp_8_1884;
  v4[4] = this;
  return degas::StatementCache::getStatement(v2, v1, (uint64_t)v4);
}

uint64_t ___ZNK5degas17LabelledEdgeTable47readSourceNodesByTargetNodeIdentifiersStatementEv_block_invoke@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v3;
  sqlite3_stmt **v4;
  sqlite3 *v5;
  void *__p;
  char v8;
  _QWORD v9[11];
  char v10;
  uint64_t v11;

  v3 = *(_QWORD *)(a1 + 32);
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v9);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)"select mergeLiteralBitmap(e.sourceNodeId) from Edge e, identifierBitmap(?1) b where e.targetNodeId = b.value", 108);
  v4 = (sqlite3_stmt **)operator new();
  v5 = *(sqlite3 **)(v3 + 32);
  std::stringbuf::str();
  degas::Statement::Statement(v4, v5, (uint64_t)&__p);
  std::shared_ptr<degas::Statement>::shared_ptr[abi:ne180100]<degas::Statement,void>(a2, (uint64_t)v4);
  if (v8 < 0)
    operator delete(__p);
  v9[0] = *MEMORY[0x1E0DE4F60];
  *(_QWORD *)((char *)v9 + *(_QWORD *)(v9[0] - 24)) = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 24);
  v9[1] = MEMORY[0x1E0DE4FB8] + 16;
  if (v10 < 0)
    operator delete((void *)v9[9]);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  return MEMORY[0x1CAA4AD98](&v11);
}

void sub_1CA185C18(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15)
{
  uint64_t v15;

  MEMORY[0x1CAA4ADC8](v15, 0x1020C4062D53EE8);
  std::ostringstream::~ostringstream((uint64_t)&a15);
  _Unwind_Resume(a1);
}

uint64_t *degas::LabelledEdgeTable::readTargetNodesByEdgeIdentifiersSourceNodeIdentifiersJoinBothStatement(degas::LabelledEdgeTable *this)
{
  unsigned int v1;
  uint64_t v2;
  _QWORD v4[5];

  v1 = (*((unsigned __int8 *)this + 48) << 16) | 0xC04;
  v2 = *((_QWORD *)this + 5);
  v4[0] = MEMORY[0x1E0C809B0];
  v4[1] = 0x40000000;
  v4[2] = ___ZNK5degas17LabelledEdgeTable70readTargetNodesByEdgeIdentifiersSourceNodeIdentifiersJoinBothStatementEv_block_invoke;
  v4[3] = &__block_descriptor_tmp_10_1886;
  v4[4] = this;
  return degas::StatementCache::getStatement(v2, v1, (uint64_t)v4);
}

uint64_t ___ZNK5degas17LabelledEdgeTable70readTargetNodesByEdgeIdentifiersSourceNodeIdentifiersJoinBothStatementEv_block_invoke@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v3;
  sqlite3_stmt **v4;
  sqlite3 *v5;
  void *__p;
  char v8;
  _QWORD v9[11];
  char v10;
  uint64_t v11;

  v3 = *(_QWORD *)(a1 + 32);
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v9);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)"select mergeLiteralBitmap(e.targetNodeId) from Edge e, identifierBitmap(?1) nb, identifierBitmap(?2) eb where e.sourceNodeId = nb.value and e.identifier = eb.value", 163);
  v4 = (sqlite3_stmt **)operator new();
  v5 = *(sqlite3 **)(v3 + 32);
  std::stringbuf::str();
  degas::Statement::Statement(v4, v5, (uint64_t)&__p);
  std::shared_ptr<degas::Statement>::shared_ptr[abi:ne180100]<degas::Statement,void>(a2, (uint64_t)v4);
  if (v8 < 0)
    operator delete(__p);
  v9[0] = *MEMORY[0x1E0DE4F60];
  *(_QWORD *)((char *)v9 + *(_QWORD *)(v9[0] - 24)) = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 24);
  v9[1] = MEMORY[0x1E0DE4FB8] + 16;
  if (v10 < 0)
    operator delete((void *)v9[9]);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  return MEMORY[0x1CAA4AD98](&v11);
}

void sub_1CA185DEC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15)
{
  uint64_t v15;

  MEMORY[0x1CAA4ADC8](v15, 0x1020C4062D53EE8);
  std::ostringstream::~ostringstream((uint64_t)&a15);
  _Unwind_Resume(a1);
}

uint64_t *degas::LabelledEdgeTable::readTargetNodesByEdgeIdentifiersSourceNodeIdentifiersJoinNodeStatement(degas::LabelledEdgeTable *this)
{
  unsigned int v1;
  uint64_t v2;
  _QWORD v4[5];

  v1 = (*((unsigned __int8 *)this + 48) << 16) | 0xC06;
  v2 = *((_QWORD *)this + 5);
  v4[0] = MEMORY[0x1E0C809B0];
  v4[1] = 0x40000000;
  v4[2] = ___ZNK5degas17LabelledEdgeTable70readTargetNodesByEdgeIdentifiersSourceNodeIdentifiersJoinNodeStatementEv_block_invoke;
  v4[3] = &__block_descriptor_tmp_12;
  v4[4] = this;
  return degas::StatementCache::getStatement(v2, v1, (uint64_t)v4);
}

uint64_t ___ZNK5degas17LabelledEdgeTable70readTargetNodesByEdgeIdentifiersSourceNodeIdentifiersJoinNodeStatementEv_block_invoke@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v3;
  sqlite3_stmt **v4;
  sqlite3 *v5;
  void *__p;
  char v8;
  _QWORD v9[11];
  char v10;
  uint64_t v11;

  v3 = *(_QWORD *)(a1 + 32);
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v9);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)"select mergeLiteralBitmap(e.targetNodeId) from Edge e, identifierBitmap(?1) nb where e.sourceNodeId = nb.value and e.identifier in (select eb.value from identifierBitmap(?2) eb)", 177);
  v4 = (sqlite3_stmt **)operator new();
  v5 = *(sqlite3 **)(v3 + 32);
  std::stringbuf::str();
  degas::Statement::Statement(v4, v5, (uint64_t)&__p);
  std::shared_ptr<degas::Statement>::shared_ptr[abi:ne180100]<degas::Statement,void>(a2, (uint64_t)v4);
  if (v8 < 0)
    operator delete(__p);
  v9[0] = *MEMORY[0x1E0DE4F60];
  *(_QWORD *)((char *)v9 + *(_QWORD *)(v9[0] - 24)) = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 24);
  v9[1] = MEMORY[0x1E0DE4FB8] + 16;
  if (v10 < 0)
    operator delete((void *)v9[9]);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  return MEMORY[0x1CAA4AD98](&v11);
}

void sub_1CA185FC0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15)
{
  uint64_t v15;

  MEMORY[0x1CAA4ADC8](v15, 0x1020C4062D53EE8);
  std::ostringstream::~ostringstream((uint64_t)&a15);
  _Unwind_Resume(a1);
}

uint64_t *degas::LabelledEdgeTable::readTargetNodesByEdgeIdentifiersSourceNodeIdentifiersJoinEdgeStatement(degas::LabelledEdgeTable *this)
{
  unsigned int v1;
  uint64_t v2;
  _QWORD v4[5];

  v1 = (*((unsigned __int8 *)this + 48) << 16) | 0xC08;
  v2 = *((_QWORD *)this + 5);
  v4[0] = MEMORY[0x1E0C809B0];
  v4[1] = 0x40000000;
  v4[2] = ___ZNK5degas17LabelledEdgeTable70readTargetNodesByEdgeIdentifiersSourceNodeIdentifiersJoinEdgeStatementEv_block_invoke;
  v4[3] = &__block_descriptor_tmp_14_1889;
  v4[4] = this;
  return degas::StatementCache::getStatement(v2, v1, (uint64_t)v4);
}

uint64_t ___ZNK5degas17LabelledEdgeTable70readTargetNodesByEdgeIdentifiersSourceNodeIdentifiersJoinEdgeStatementEv_block_invoke@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v3;
  sqlite3_stmt **v4;
  sqlite3 *v5;
  void *__p;
  char v8;
  _QWORD v9[11];
  char v10;
  uint64_t v11;

  v3 = *(_QWORD *)(a1 + 32);
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v9);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)"select mergeLiteralBitmap(e.targetNodeId) from Edge e, identifierBitmap(?2) eb where e.identifier = eb.value and e.sourceNodeId in (select nb.value from identifierBitmap(?1) nb)", 177);
  v4 = (sqlite3_stmt **)operator new();
  v5 = *(sqlite3 **)(v3 + 32);
  std::stringbuf::str();
  degas::Statement::Statement(v4, v5, (uint64_t)&__p);
  std::shared_ptr<degas::Statement>::shared_ptr[abi:ne180100]<degas::Statement,void>(a2, (uint64_t)v4);
  if (v8 < 0)
    operator delete(__p);
  v9[0] = *MEMORY[0x1E0DE4F60];
  *(_QWORD *)((char *)v9 + *(_QWORD *)(v9[0] - 24)) = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 24);
  v9[1] = MEMORY[0x1E0DE4FB8] + 16;
  if (v10 < 0)
    operator delete((void *)v9[9]);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  return MEMORY[0x1CAA4AD98](&v11);
}

void sub_1CA186194(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15)
{
  uint64_t v15;

  MEMORY[0x1CAA4ADC8](v15, 0x1020C4062D53EE8);
  std::ostringstream::~ostringstream((uint64_t)&a15);
  _Unwind_Resume(a1);
}

uint64_t *degas::LabelledEdgeTable::readTargetNodesByEdgeIdentifiersSourceNodeIdentifiersFilterEdgeStatement(degas::LabelledEdgeTable *this)
{
  unsigned int v1;
  uint64_t v2;
  _QWORD v4[5];

  v1 = (*((unsigned __int8 *)this + 48) << 16) | 0xC0A;
  v2 = *((_QWORD *)this + 5);
  v4[0] = MEMORY[0x1E0C809B0];
  v4[1] = 0x40000000;
  v4[2] = ___ZNK5degas17LabelledEdgeTable72readTargetNodesByEdgeIdentifiersSourceNodeIdentifiersFilterEdgeStatementEv_block_invoke;
  v4[3] = &__block_descriptor_tmp_16_1891;
  v4[4] = this;
  return degas::StatementCache::getStatement(v2, v1, (uint64_t)v4);
}

uint64_t ___ZNK5degas17LabelledEdgeTable72readTargetNodesByEdgeIdentifiersSourceNodeIdentifiersFilterEdgeStatementEv_block_invoke@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v3;
  sqlite3_stmt **v4;
  sqlite3 *v5;
  void *__p;
  char v8;
  _QWORD v9[11];
  char v10;
  uint64_t v11;

  v3 = *(_QWORD *)(a1 + 32);
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v9);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)"select mergeLiteralBitmap(e.targetNodeId) from Edge e, identifierBitmap(?1) nb where  BitmapContainsIdentifier(?2, e.identifier) and e.sourceNodeId = nb.value", 158);
  v4 = (sqlite3_stmt **)operator new();
  v5 = *(sqlite3 **)(v3 + 32);
  std::stringbuf::str();
  degas::Statement::Statement(v4, v5, (uint64_t)&__p);
  std::shared_ptr<degas::Statement>::shared_ptr[abi:ne180100]<degas::Statement,void>(a2, (uint64_t)v4);
  if (v8 < 0)
    operator delete(__p);
  v9[0] = *MEMORY[0x1E0DE4F60];
  *(_QWORD *)((char *)v9 + *(_QWORD *)(v9[0] - 24)) = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 24);
  v9[1] = MEMORY[0x1E0DE4FB8] + 16;
  if (v10 < 0)
    operator delete((void *)v9[9]);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  return MEMORY[0x1CAA4AD98](&v11);
}

void sub_1CA186368(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15)
{
  uint64_t v15;

  MEMORY[0x1CAA4ADC8](v15, 0x1020C4062D53EE8);
  std::ostringstream::~ostringstream((uint64_t)&a15);
  _Unwind_Resume(a1);
}

uint64_t *degas::LabelledEdgeTable::readTargetNodesByEdgeIdentifiersSourceNodeIdentifiersFilterNodeStatement(degas::LabelledEdgeTable *this)
{
  unsigned int v1;
  uint64_t v2;
  _QWORD v4[5];

  v1 = (*((unsigned __int8 *)this + 48) << 16) | 0xC0C;
  v2 = *((_QWORD *)this + 5);
  v4[0] = MEMORY[0x1E0C809B0];
  v4[1] = 0x40000000;
  v4[2] = ___ZNK5degas17LabelledEdgeTable72readTargetNodesByEdgeIdentifiersSourceNodeIdentifiersFilterNodeStatementEv_block_invoke;
  v4[3] = &__block_descriptor_tmp_18;
  v4[4] = this;
  return degas::StatementCache::getStatement(v2, v1, (uint64_t)v4);
}

uint64_t ___ZNK5degas17LabelledEdgeTable72readTargetNodesByEdgeIdentifiersSourceNodeIdentifiersFilterNodeStatementEv_block_invoke@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v3;
  sqlite3_stmt **v4;
  sqlite3 *v5;
  void *__p;
  char v8;
  _QWORD v9[11];
  char v10;
  uint64_t v11;

  v3 = *(_QWORD *)(a1 + 32);
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v9);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)"select mergeLiteralBitmap(e.targetNodeId) from Edge e, identifierBitmap(?2) eb where  BitmapContainsIdentifier(?1, e.sourceNodeId) and e.identifier = eb.value", 158);
  v4 = (sqlite3_stmt **)operator new();
  v5 = *(sqlite3 **)(v3 + 32);
  std::stringbuf::str();
  degas::Statement::Statement(v4, v5, (uint64_t)&__p);
  std::shared_ptr<degas::Statement>::shared_ptr[abi:ne180100]<degas::Statement,void>(a2, (uint64_t)v4);
  if (v8 < 0)
    operator delete(__p);
  v9[0] = *MEMORY[0x1E0DE4F60];
  *(_QWORD *)((char *)v9 + *(_QWORD *)(v9[0] - 24)) = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 24);
  v9[1] = MEMORY[0x1E0DE4FB8] + 16;
  if (v10 < 0)
    operator delete((void *)v9[9]);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  return MEMORY[0x1CAA4AD98](&v11);
}

void sub_1CA18653C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15)
{
  uint64_t v15;

  MEMORY[0x1CAA4ADC8](v15, 0x1020C4062D53EE8);
  std::ostringstream::~ostringstream((uint64_t)&a15);
  _Unwind_Resume(a1);
}

uint64_t *degas::LabelledEdgeTable::readSourceNodesByEdgeIdentifiersTargetNodeIdentifiersJoinBothStatement(degas::LabelledEdgeTable *this)
{
  unsigned int v1;
  uint64_t v2;
  _QWORD v4[5];

  v1 = (*((unsigned __int8 *)this + 48) << 16) | 0xC05;
  v2 = *((_QWORD *)this + 5);
  v4[0] = MEMORY[0x1E0C809B0];
  v4[1] = 0x40000000;
  v4[2] = ___ZNK5degas17LabelledEdgeTable70readSourceNodesByEdgeIdentifiersTargetNodeIdentifiersJoinBothStatementEv_block_invoke;
  v4[3] = &__block_descriptor_tmp_20_1894;
  v4[4] = this;
  return degas::StatementCache::getStatement(v2, v1, (uint64_t)v4);
}

uint64_t ___ZNK5degas17LabelledEdgeTable70readSourceNodesByEdgeIdentifiersTargetNodeIdentifiersJoinBothStatementEv_block_invoke@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v3;
  sqlite3_stmt **v4;
  sqlite3 *v5;
  void *__p;
  char v8;
  _QWORD v9[11];
  char v10;
  uint64_t v11;

  v3 = *(_QWORD *)(a1 + 32);
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v9);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)"select mergeLiteralBitmap(e.sourceNodeId) from Edge e, identifierBitmap(?1) nb, identifierBitmap(?2) eb where e.targetNodeId = nb.value and e.identifier=eb.value", 161);
  v4 = (sqlite3_stmt **)operator new();
  v5 = *(sqlite3 **)(v3 + 32);
  std::stringbuf::str();
  degas::Statement::Statement(v4, v5, (uint64_t)&__p);
  std::shared_ptr<degas::Statement>::shared_ptr[abi:ne180100]<degas::Statement,void>(a2, (uint64_t)v4);
  if (v8 < 0)
    operator delete(__p);
  v9[0] = *MEMORY[0x1E0DE4F60];
  *(_QWORD *)((char *)v9 + *(_QWORD *)(v9[0] - 24)) = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 24);
  v9[1] = MEMORY[0x1E0DE4FB8] + 16;
  if (v10 < 0)
    operator delete((void *)v9[9]);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  return MEMORY[0x1CAA4AD98](&v11);
}

void sub_1CA186710(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15)
{
  uint64_t v15;

  MEMORY[0x1CAA4ADC8](v15, 0x1020C4062D53EE8);
  std::ostringstream::~ostringstream((uint64_t)&a15);
  _Unwind_Resume(a1);
}

uint64_t *degas::LabelledEdgeTable::readSourceNodesByEdgeIdentifiersTargetNodeIdentifiersJoinNodeStatement(degas::LabelledEdgeTable *this)
{
  unsigned int v1;
  uint64_t v2;
  _QWORD v4[5];

  v1 = (*((unsigned __int8 *)this + 48) << 16) | 0xC07;
  v2 = *((_QWORD *)this + 5);
  v4[0] = MEMORY[0x1E0C809B0];
  v4[1] = 0x40000000;
  v4[2] = ___ZNK5degas17LabelledEdgeTable70readSourceNodesByEdgeIdentifiersTargetNodeIdentifiersJoinNodeStatementEv_block_invoke;
  v4[3] = &__block_descriptor_tmp_22;
  v4[4] = this;
  return degas::StatementCache::getStatement(v2, v1, (uint64_t)v4);
}

uint64_t ___ZNK5degas17LabelledEdgeTable70readSourceNodesByEdgeIdentifiersTargetNodeIdentifiersJoinNodeStatementEv_block_invoke@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v3;
  sqlite3_stmt **v4;
  sqlite3 *v5;
  void *__p;
  char v8;
  _QWORD v9[11];
  char v10;
  uint64_t v11;

  v3 = *(_QWORD *)(a1 + 32);
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v9);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)"select mergeLiteralBitmap(e.sourceNodeId) from Edge e, identifierBitmap(?1) nb where e.targetNodeId = nb.value and e.identifier in (select eb.value from identifierBitmap(?2) eb)", 177);
  v4 = (sqlite3_stmt **)operator new();
  v5 = *(sqlite3 **)(v3 + 32);
  std::stringbuf::str();
  degas::Statement::Statement(v4, v5, (uint64_t)&__p);
  std::shared_ptr<degas::Statement>::shared_ptr[abi:ne180100]<degas::Statement,void>(a2, (uint64_t)v4);
  if (v8 < 0)
    operator delete(__p);
  v9[0] = *MEMORY[0x1E0DE4F60];
  *(_QWORD *)((char *)v9 + *(_QWORD *)(v9[0] - 24)) = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 24);
  v9[1] = MEMORY[0x1E0DE4FB8] + 16;
  if (v10 < 0)
    operator delete((void *)v9[9]);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  return MEMORY[0x1CAA4AD98](&v11);
}

void sub_1CA1868E4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15)
{
  uint64_t v15;

  MEMORY[0x1CAA4ADC8](v15, 0x1020C4062D53EE8);
  std::ostringstream::~ostringstream((uint64_t)&a15);
  _Unwind_Resume(a1);
}

uint64_t *degas::LabelledEdgeTable::readSourceNodesByEdgeIdentifiersTargetNodeIdentifiersJoinEdgeStatement(degas::LabelledEdgeTable *this)
{
  unsigned int v1;
  uint64_t v2;
  _QWORD v4[5];

  v1 = (*((unsigned __int8 *)this + 48) << 16) | 0xC09;
  v2 = *((_QWORD *)this + 5);
  v4[0] = MEMORY[0x1E0C809B0];
  v4[1] = 0x40000000;
  v4[2] = ___ZNK5degas17LabelledEdgeTable70readSourceNodesByEdgeIdentifiersTargetNodeIdentifiersJoinEdgeStatementEv_block_invoke;
  v4[3] = &__block_descriptor_tmp_24;
  v4[4] = this;
  return degas::StatementCache::getStatement(v2, v1, (uint64_t)v4);
}

uint64_t ___ZNK5degas17LabelledEdgeTable70readSourceNodesByEdgeIdentifiersTargetNodeIdentifiersJoinEdgeStatementEv_block_invoke@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v3;
  sqlite3_stmt **v4;
  sqlite3 *v5;
  void *__p;
  char v8;
  _QWORD v9[11];
  char v10;
  uint64_t v11;

  v3 = *(_QWORD *)(a1 + 32);
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v9);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)"select mergeLiteralBitmap(e.sourceNodeId) from Edge e, identifierBitmap(?2) eb where e.identifier = eb.value and e.targetNodeId in (select nb.value from identifierBitmap(?1) nb)", 177);
  v4 = (sqlite3_stmt **)operator new();
  v5 = *(sqlite3 **)(v3 + 32);
  std::stringbuf::str();
  degas::Statement::Statement(v4, v5, (uint64_t)&__p);
  std::shared_ptr<degas::Statement>::shared_ptr[abi:ne180100]<degas::Statement,void>(a2, (uint64_t)v4);
  if (v8 < 0)
    operator delete(__p);
  v9[0] = *MEMORY[0x1E0DE4F60];
  *(_QWORD *)((char *)v9 + *(_QWORD *)(v9[0] - 24)) = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 24);
  v9[1] = MEMORY[0x1E0DE4FB8] + 16;
  if (v10 < 0)
    operator delete((void *)v9[9]);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  return MEMORY[0x1CAA4AD98](&v11);
}

void sub_1CA186AB8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15)
{
  uint64_t v15;

  MEMORY[0x1CAA4ADC8](v15, 0x1020C4062D53EE8);
  std::ostringstream::~ostringstream((uint64_t)&a15);
  _Unwind_Resume(a1);
}

uint64_t *degas::LabelledEdgeTable::readSourceNodesByEdgeIdentifiersTargetNodeIdentifiersFilterEdgeStatement(degas::LabelledEdgeTable *this)
{
  unsigned int v1;
  uint64_t v2;
  _QWORD v4[5];

  v1 = (*((unsigned __int8 *)this + 48) << 16) | 0xC0B;
  v2 = *((_QWORD *)this + 5);
  v4[0] = MEMORY[0x1E0C809B0];
  v4[1] = 0x40000000;
  v4[2] = ___ZNK5degas17LabelledEdgeTable72readSourceNodesByEdgeIdentifiersTargetNodeIdentifiersFilterEdgeStatementEv_block_invoke;
  v4[3] = &__block_descriptor_tmp_26_1898;
  v4[4] = this;
  return degas::StatementCache::getStatement(v2, v1, (uint64_t)v4);
}

uint64_t ___ZNK5degas17LabelledEdgeTable72readSourceNodesByEdgeIdentifiersTargetNodeIdentifiersFilterEdgeStatementEv_block_invoke@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v3;
  sqlite3_stmt **v4;
  sqlite3 *v5;
  void *__p;
  char v8;
  _QWORD v9[11];
  char v10;
  uint64_t v11;

  v3 = *(_QWORD *)(a1 + 32);
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v9);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)"select mergeLiteralBitmap(e.sourceNodeId) from Edge e, identifierBitmap(?1) en where e.targetNodeId = en.value and BitmapContainsIdentifier(?2, e.identifier)", 157);
  v4 = (sqlite3_stmt **)operator new();
  v5 = *(sqlite3 **)(v3 + 32);
  std::stringbuf::str();
  degas::Statement::Statement(v4, v5, (uint64_t)&__p);
  std::shared_ptr<degas::Statement>::shared_ptr[abi:ne180100]<degas::Statement,void>(a2, (uint64_t)v4);
  if (v8 < 0)
    operator delete(__p);
  v9[0] = *MEMORY[0x1E0DE4F60];
  *(_QWORD *)((char *)v9 + *(_QWORD *)(v9[0] - 24)) = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 24);
  v9[1] = MEMORY[0x1E0DE4FB8] + 16;
  if (v10 < 0)
    operator delete((void *)v9[9]);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  return MEMORY[0x1CAA4AD98](&v11);
}

void sub_1CA186C8C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15)
{
  uint64_t v15;

  MEMORY[0x1CAA4ADC8](v15, 0x1020C4062D53EE8);
  std::ostringstream::~ostringstream((uint64_t)&a15);
  _Unwind_Resume(a1);
}

uint64_t *degas::LabelledEdgeTable::readSourceNodesByEdgeIdentifiersTargetNodeIdentifiersFilterNodeStatement(degas::LabelledEdgeTable *this)
{
  unsigned int v1;
  uint64_t v2;
  _QWORD v4[5];

  v1 = (*((unsigned __int8 *)this + 48) << 16) | 0xC0D;
  v2 = *((_QWORD *)this + 5);
  v4[0] = MEMORY[0x1E0C809B0];
  v4[1] = 0x40000000;
  v4[2] = ___ZNK5degas17LabelledEdgeTable72readSourceNodesByEdgeIdentifiersTargetNodeIdentifiersFilterNodeStatementEv_block_invoke;
  v4[3] = &__block_descriptor_tmp_28_1900;
  v4[4] = this;
  return degas::StatementCache::getStatement(v2, v1, (uint64_t)v4);
}

uint64_t ___ZNK5degas17LabelledEdgeTable72readSourceNodesByEdgeIdentifiersTargetNodeIdentifiersFilterNodeStatementEv_block_invoke@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v3;
  sqlite3_stmt **v4;
  sqlite3 *v5;
  void *__p;
  char v8;
  _QWORD v9[11];
  char v10;
  uint64_t v11;

  v3 = *(_QWORD *)(a1 + 32);
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v9);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)"select mergeLiteralBitmap(e.sourceNodeId) from Edge e, identifierBitmap(?2) eb where e.identifier = eb.value and BitmapContainsIdentifier(?1, e.targetNodeId)", 157);
  v4 = (sqlite3_stmt **)operator new();
  v5 = *(sqlite3 **)(v3 + 32);
  std::stringbuf::str();
  degas::Statement::Statement(v4, v5, (uint64_t)&__p);
  std::shared_ptr<degas::Statement>::shared_ptr[abi:ne180100]<degas::Statement,void>(a2, (uint64_t)v4);
  if (v8 < 0)
    operator delete(__p);
  v9[0] = *MEMORY[0x1E0DE4F60];
  *(_QWORD *)((char *)v9 + *(_QWORD *)(v9[0] - 24)) = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 24);
  v9[1] = MEMORY[0x1E0DE4FB8] + 16;
  if (v10 < 0)
    operator delete((void *)v9[9]);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  return MEMORY[0x1CAA4AD98](&v11);
}

void sub_1CA186E60(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15)
{
  uint64_t v15;

  MEMORY[0x1CAA4ADC8](v15, 0x1020C4062D53EE8);
  std::ostringstream::~ostringstream((uint64_t)&a15);
  _Unwind_Resume(a1);
}

uint64_t *degas::LabelledEdgeTable::readEdgesByLabelIdentifiersSourceNodeIdentifiersStatement(degas::LabelledEdgeTable *this)
{
  unsigned int v1;
  uint64_t v2;
  _QWORD v4[5];

  v1 = (*((unsigned __int8 *)this + 48) << 16) | 0xC0E;
  v2 = *((_QWORD *)this + 5);
  v4[0] = MEMORY[0x1E0C809B0];
  v4[1] = 0x40000000;
  v4[2] = ___ZNK5degas17LabelledEdgeTable57readEdgesByLabelIdentifiersSourceNodeIdentifiersStatementEv_block_invoke;
  v4[3] = &__block_descriptor_tmp_30_1902;
  v4[4] = this;
  return degas::StatementCache::getStatement(v2, v1, (uint64_t)v4);
}

uint64_t ___ZNK5degas17LabelledEdgeTable57readEdgesByLabelIdentifiersSourceNodeIdentifiersStatementEv_block_invoke@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v3;
  sqlite3_stmt **v4;
  sqlite3 *v5;
  void *__p;
  char v8;
  _QWORD v9[11];
  char v10;
  uint64_t v11;

  v3 = *(_QWORD *)(a1 + 32);
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v9);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)"select mergeLiteralBitmap(e.identifier) from Edge e, identifierBitmap(?1) b where bitmapContainsBitmap(e.labels, ?2) and e.sourceNodeId = b.value", 145);
  v4 = (sqlite3_stmt **)operator new();
  v5 = *(sqlite3 **)(v3 + 32);
  std::stringbuf::str();
  degas::Statement::Statement(v4, v5, (uint64_t)&__p);
  std::shared_ptr<degas::Statement>::shared_ptr[abi:ne180100]<degas::Statement,void>(a2, (uint64_t)v4);
  if (v8 < 0)
    operator delete(__p);
  v9[0] = *MEMORY[0x1E0DE4F60];
  *(_QWORD *)((char *)v9 + *(_QWORD *)(v9[0] - 24)) = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 24);
  v9[1] = MEMORY[0x1E0DE4FB8] + 16;
  if (v10 < 0)
    operator delete((void *)v9[9]);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  return MEMORY[0x1CAA4AD98](&v11);
}

void sub_1CA187034(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15)
{
  uint64_t v15;

  MEMORY[0x1CAA4ADC8](v15, 0x1020C4062D53EE8);
  std::ostringstream::~ostringstream((uint64_t)&a15);
  _Unwind_Resume(a1);
}

uint64_t *degas::LabelledEdgeTable::readEdgesByLabelIdentifiersTargetNodeIdentifiersStatement(degas::LabelledEdgeTable *this)
{
  unsigned int v1;
  uint64_t v2;
  _QWORD v4[5];

  v1 = (*((unsigned __int8 *)this + 48) << 16) | 0xC0F;
  v2 = *((_QWORD *)this + 5);
  v4[0] = MEMORY[0x1E0C809B0];
  v4[1] = 0x40000000;
  v4[2] = ___ZNK5degas17LabelledEdgeTable57readEdgesByLabelIdentifiersTargetNodeIdentifiersStatementEv_block_invoke;
  v4[3] = &__block_descriptor_tmp_32;
  v4[4] = this;
  return degas::StatementCache::getStatement(v2, v1, (uint64_t)v4);
}

uint64_t ___ZNK5degas17LabelledEdgeTable57readEdgesByLabelIdentifiersTargetNodeIdentifiersStatementEv_block_invoke@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v3;
  sqlite3_stmt **v4;
  sqlite3 *v5;
  void *__p;
  char v8;
  _QWORD v9[11];
  char v10;
  uint64_t v11;

  v3 = *(_QWORD *)(a1 + 32);
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v9);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)"select mergeLiteralBitmap(e.identifier) from Edge e, identifierBitmap(?1) b where bitmapContainsBitmap(e.labels, ?2) and e.targetNodeId = b.value", 145);
  v4 = (sqlite3_stmt **)operator new();
  v5 = *(sqlite3 **)(v3 + 32);
  std::stringbuf::str();
  degas::Statement::Statement(v4, v5, (uint64_t)&__p);
  std::shared_ptr<degas::Statement>::shared_ptr[abi:ne180100]<degas::Statement,void>(a2, (uint64_t)v4);
  if (v8 < 0)
    operator delete(__p);
  v9[0] = *MEMORY[0x1E0DE4F60];
  *(_QWORD *)((char *)v9 + *(_QWORD *)(v9[0] - 24)) = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 24);
  v9[1] = MEMORY[0x1E0DE4FB8] + 16;
  if (v10 < 0)
    operator delete((void *)v9[9]);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  return MEMORY[0x1CAA4AD98](&v11);
}

void sub_1CA187208(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15)
{
  uint64_t v15;

  MEMORY[0x1CAA4ADC8](v15, 0x1020C4062D53EE8);
  std::ostringstream::~ostringstream((uint64_t)&a15);
  _Unwind_Resume(a1);
}

uint64_t *degas::LabelledEdgeTable::readEdgesBySourceNodeIdentifiersStatement(degas::LabelledEdgeTable *this)
{
  unsigned int v1;
  uint64_t v2;
  _QWORD v4[5];

  v1 = (*((unsigned __int8 *)this + 48) << 16) | 0xC10;
  v2 = *((_QWORD *)this + 5);
  v4[0] = MEMORY[0x1E0C809B0];
  v4[1] = 0x40000000;
  v4[2] = ___ZNK5degas17LabelledEdgeTable41readEdgesBySourceNodeIdentifiersStatementEv_block_invoke;
  v4[3] = &__block_descriptor_tmp_34_1905;
  v4[4] = this;
  return degas::StatementCache::getStatement(v2, v1, (uint64_t)v4);
}

uint64_t ___ZNK5degas17LabelledEdgeTable41readEdgesBySourceNodeIdentifiersStatementEv_block_invoke@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v3;
  sqlite3_stmt **v4;
  sqlite3 *v5;
  void *__p;
  char v8;
  _QWORD v9[11];
  char v10;
  uint64_t v11;

  v3 = *(_QWORD *)(a1 + 32);
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v9);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)"select mergeLiteralBitmap(e.identifier) from Edge e, identifierBitmap(?1) b where e.sourceNodeId = b.value", 106);
  v4 = (sqlite3_stmt **)operator new();
  v5 = *(sqlite3 **)(v3 + 32);
  std::stringbuf::str();
  degas::Statement::Statement(v4, v5, (uint64_t)&__p);
  std::shared_ptr<degas::Statement>::shared_ptr[abi:ne180100]<degas::Statement,void>(a2, (uint64_t)v4);
  if (v8 < 0)
    operator delete(__p);
  v9[0] = *MEMORY[0x1E0DE4F60];
  *(_QWORD *)((char *)v9 + *(_QWORD *)(v9[0] - 24)) = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 24);
  v9[1] = MEMORY[0x1E0DE4FB8] + 16;
  if (v10 < 0)
    operator delete((void *)v9[9]);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  return MEMORY[0x1CAA4AD98](&v11);
}

void sub_1CA1873DC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15)
{
  uint64_t v15;

  MEMORY[0x1CAA4ADC8](v15, 0x1020C4062D53EE8);
  std::ostringstream::~ostringstream((uint64_t)&a15);
  _Unwind_Resume(a1);
}

uint64_t *degas::LabelledEdgeTable::readEdgesByTargetNodeIdentifiersStatement(degas::LabelledEdgeTable *this)
{
  unsigned int v1;
  uint64_t v2;
  _QWORD v4[5];

  v1 = (*((unsigned __int8 *)this + 48) << 16) | 0xC11;
  v2 = *((_QWORD *)this + 5);
  v4[0] = MEMORY[0x1E0C809B0];
  v4[1] = 0x40000000;
  v4[2] = ___ZNK5degas17LabelledEdgeTable41readEdgesByTargetNodeIdentifiersStatementEv_block_invoke;
  v4[3] = &__block_descriptor_tmp_36;
  v4[4] = this;
  return degas::StatementCache::getStatement(v2, v1, (uint64_t)v4);
}

uint64_t ___ZNK5degas17LabelledEdgeTable41readEdgesByTargetNodeIdentifiersStatementEv_block_invoke@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v3;
  sqlite3_stmt **v4;
  sqlite3 *v5;
  void *__p;
  char v8;
  _QWORD v9[11];
  char v10;
  uint64_t v11;

  v3 = *(_QWORD *)(a1 + 32);
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v9);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)"select mergeLiteralBitmap(e.identifier) from Edge e, identifierBitmap(?1) b where e.targetNodeId = b.value", 106);
  v4 = (sqlite3_stmt **)operator new();
  v5 = *(sqlite3 **)(v3 + 32);
  std::stringbuf::str();
  degas::Statement::Statement(v4, v5, (uint64_t)&__p);
  std::shared_ptr<degas::Statement>::shared_ptr[abi:ne180100]<degas::Statement,void>(a2, (uint64_t)v4);
  if (v8 < 0)
    operator delete(__p);
  v9[0] = *MEMORY[0x1E0DE4F60];
  *(_QWORD *)((char *)v9 + *(_QWORD *)(v9[0] - 24)) = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 24);
  v9[1] = MEMORY[0x1E0DE4FB8] + 16;
  if (v10 < 0)
    operator delete((void *)v9[9]);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  return MEMORY[0x1CAA4AD98](&v11);
}

void sub_1CA1875B0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15)
{
  uint64_t v15;

  MEMORY[0x1CAA4ADC8](v15, 0x1020C4062D53EE8);
  std::ostringstream::~ostringstream((uint64_t)&a15);
  _Unwind_Resume(a1);
}

uint64_t *degas::LabelledEdgeTable::readEdgesBySourceNodeIdentifiersEdgeFilterStatement(degas::LabelledEdgeTable *this)
{
  unsigned int v1;
  uint64_t v2;
  _QWORD v4[5];

  v1 = (*((unsigned __int8 *)this + 48) << 16) | 0xC12;
  v2 = *((_QWORD *)this + 5);
  v4[0] = MEMORY[0x1E0C809B0];
  v4[1] = 0x40000000;
  v4[2] = ___ZNK5degas17LabelledEdgeTable51readEdgesBySourceNodeIdentifiersEdgeFilterStatementEv_block_invoke;
  v4[3] = &__block_descriptor_tmp_38;
  v4[4] = this;
  return degas::StatementCache::getStatement(v2, v1, (uint64_t)v4);
}

uint64_t ___ZNK5degas17LabelledEdgeTable51readEdgesBySourceNodeIdentifiersEdgeFilterStatementEv_block_invoke@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v3;
  sqlite3_stmt **v4;
  sqlite3 *v5;
  void *__p;
  char v8;
  _QWORD v9[11];
  char v10;
  uint64_t v11;

  v3 = *(_QWORD *)(a1 + 32);
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v9);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)"select mergeLiteralBitmap(e.identifier) from Edge e, identifierBitmap(?1) b where e.sourceNodeId = b.value and BitmapContainsIdentifier(?2, e.identifier)", 153);
  v4 = (sqlite3_stmt **)operator new();
  v5 = *(sqlite3 **)(v3 + 32);
  std::stringbuf::str();
  degas::Statement::Statement(v4, v5, (uint64_t)&__p);
  std::shared_ptr<degas::Statement>::shared_ptr[abi:ne180100]<degas::Statement,void>(a2, (uint64_t)v4);
  if (v8 < 0)
    operator delete(__p);
  v9[0] = *MEMORY[0x1E0DE4F60];
  *(_QWORD *)((char *)v9 + *(_QWORD *)(v9[0] - 24)) = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 24);
  v9[1] = MEMORY[0x1E0DE4FB8] + 16;
  if (v10 < 0)
    operator delete((void *)v9[9]);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  return MEMORY[0x1CAA4AD98](&v11);
}

void sub_1CA187784(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15)
{
  uint64_t v15;

  MEMORY[0x1CAA4ADC8](v15, 0x1020C4062D53EE8);
  std::ostringstream::~ostringstream((uint64_t)&a15);
  _Unwind_Resume(a1);
}

uint64_t *degas::LabelledEdgeTable::readEdgesByTargetNodeIdentifiersEdgeFilterStatement(degas::LabelledEdgeTable *this)
{
  unsigned int v1;
  uint64_t v2;
  _QWORD v4[5];

  v1 = (*((unsigned __int8 *)this + 48) << 16) | 0xC13;
  v2 = *((_QWORD *)this + 5);
  v4[0] = MEMORY[0x1E0C809B0];
  v4[1] = 0x40000000;
  v4[2] = ___ZNK5degas17LabelledEdgeTable51readEdgesByTargetNodeIdentifiersEdgeFilterStatementEv_block_invoke;
  v4[3] = &__block_descriptor_tmp_40;
  v4[4] = this;
  return degas::StatementCache::getStatement(v2, v1, (uint64_t)v4);
}

uint64_t ___ZNK5degas17LabelledEdgeTable51readEdgesByTargetNodeIdentifiersEdgeFilterStatementEv_block_invoke@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v3;
  sqlite3_stmt **v4;
  sqlite3 *v5;
  void *__p;
  char v8;
  _QWORD v9[11];
  char v10;
  uint64_t v11;

  v3 = *(_QWORD *)(a1 + 32);
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v9);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)"select mergeLiteralBitmap(e.identifier) from Edge e, identifierBitmap(?1) b where e.targetNodeId = b.value and BitmapContainsIdentifier(?2, e.identifier)", 153);
  v4 = (sqlite3_stmt **)operator new();
  v5 = *(sqlite3 **)(v3 + 32);
  std::stringbuf::str();
  degas::Statement::Statement(v4, v5, (uint64_t)&__p);
  std::shared_ptr<degas::Statement>::shared_ptr[abi:ne180100]<degas::Statement,void>(a2, (uint64_t)v4);
  if (v8 < 0)
    operator delete(__p);
  v9[0] = *MEMORY[0x1E0DE4F60];
  *(_QWORD *)((char *)v9 + *(_QWORD *)(v9[0] - 24)) = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 24);
  v9[1] = MEMORY[0x1E0DE4FB8] + 16;
  if (v10 < 0)
    operator delete((void *)v9[9]);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  return MEMORY[0x1CAA4AD98](&v11);
}

void sub_1CA187958(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15)
{
  uint64_t v15;

  MEMORY[0x1CAA4ADC8](v15, 0x1020C4062D53EE8);
  std::ostringstream::~ostringstream((uint64_t)&a15);
  _Unwind_Resume(a1);
}

uint64_t *degas::LabelledEdgeTable::readEdgesBySourceNodeIdentifierStatement(degas::LabelledEdgeTable *this)
{
  unsigned int v1;
  uint64_t v2;
  _QWORD v4[5];

  v1 = (*((unsigned __int8 *)this + 48) << 16) | 0xC14;
  v2 = *((_QWORD *)this + 5);
  v4[0] = MEMORY[0x1E0C809B0];
  v4[1] = 0x40000000;
  v4[2] = ___ZNK5degas17LabelledEdgeTable40readEdgesBySourceNodeIdentifierStatementEv_block_invoke;
  v4[3] = &__block_descriptor_tmp_42;
  v4[4] = this;
  return degas::StatementCache::getStatement(v2, v1, (uint64_t)v4);
}

uint64_t ___ZNK5degas17LabelledEdgeTable40readEdgesBySourceNodeIdentifierStatementEv_block_invoke@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v3;
  sqlite3_stmt **v4;
  sqlite3 *v5;
  void *__p;
  char v8;
  _QWORD v9[11];
  char v10;
  uint64_t v11;

  v3 = *(_QWORD *)(a1 + 32);
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v9);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)"select mergeLiteralBitmap(e.identifier) from Edge e where e.sourceNodeId = ?1", 77);
  v4 = (sqlite3_stmt **)operator new();
  v5 = *(sqlite3 **)(v3 + 32);
  std::stringbuf::str();
  degas::Statement::Statement(v4, v5, (uint64_t)&__p);
  std::shared_ptr<degas::Statement>::shared_ptr[abi:ne180100]<degas::Statement,void>(a2, (uint64_t)v4);
  if (v8 < 0)
    operator delete(__p);
  v9[0] = *MEMORY[0x1E0DE4F60];
  *(_QWORD *)((char *)v9 + *(_QWORD *)(v9[0] - 24)) = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 24);
  v9[1] = MEMORY[0x1E0DE4FB8] + 16;
  if (v10 < 0)
    operator delete((void *)v9[9]);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  return MEMORY[0x1CAA4AD98](&v11);
}

void sub_1CA187B2C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15)
{
  uint64_t v15;

  MEMORY[0x1CAA4ADC8](v15, 0x1020C4062D53EE8);
  std::ostringstream::~ostringstream((uint64_t)&a15);
  _Unwind_Resume(a1);
}

uint64_t *degas::LabelledEdgeTable::readEdgesByTargetNodeIdentifierStatement(degas::LabelledEdgeTable *this)
{
  unsigned int v1;
  uint64_t v2;
  _QWORD v4[5];

  v1 = (*((unsigned __int8 *)this + 48) << 16) | 0xC15;
  v2 = *((_QWORD *)this + 5);
  v4[0] = MEMORY[0x1E0C809B0];
  v4[1] = 0x40000000;
  v4[2] = ___ZNK5degas17LabelledEdgeTable40readEdgesByTargetNodeIdentifierStatementEv_block_invoke;
  v4[3] = &__block_descriptor_tmp_44;
  v4[4] = this;
  return degas::StatementCache::getStatement(v2, v1, (uint64_t)v4);
}

uint64_t ___ZNK5degas17LabelledEdgeTable40readEdgesByTargetNodeIdentifierStatementEv_block_invoke@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v3;
  sqlite3_stmt **v4;
  sqlite3 *v5;
  void *__p;
  char v8;
  _QWORD v9[11];
  char v10;
  uint64_t v11;

  v3 = *(_QWORD *)(a1 + 32);
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v9);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)"select mergeLiteralBitmap(e.identifier) from Edge e where e.targetNodeId = ?1", 77);
  v4 = (sqlite3_stmt **)operator new();
  v5 = *(sqlite3 **)(v3 + 32);
  std::stringbuf::str();
  degas::Statement::Statement(v4, v5, (uint64_t)&__p);
  std::shared_ptr<degas::Statement>::shared_ptr[abi:ne180100]<degas::Statement,void>(a2, (uint64_t)v4);
  if (v8 < 0)
    operator delete(__p);
  v9[0] = *MEMORY[0x1E0DE4F60];
  *(_QWORD *)((char *)v9 + *(_QWORD *)(v9[0] - 24)) = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 24);
  v9[1] = MEMORY[0x1E0DE4FB8] + 16;
  if (v10 < 0)
    operator delete((void *)v9[9]);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  return MEMORY[0x1CAA4AD98](&v11);
}

void sub_1CA187D00(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15)
{
  uint64_t v15;

  MEMORY[0x1CAA4ADC8](v15, 0x1020C4062D53EE8);
  std::ostringstream::~ostringstream((uint64_t)&a15);
  _Unwind_Resume(a1);
}

uint64_t *degas::LabelledEdgeTable::readTargetNodesByEdgeIdentifiersStatement(degas::LabelledEdgeTable *this)
{
  unsigned int v1;
  uint64_t v2;
  _QWORD v4[5];

  v1 = (*((unsigned __int8 *)this + 48) << 16) | 0xC16;
  v2 = *((_QWORD *)this + 5);
  v4[0] = MEMORY[0x1E0C809B0];
  v4[1] = 0x40000000;
  v4[2] = ___ZNK5degas17LabelledEdgeTable41readTargetNodesByEdgeIdentifiersStatementEv_block_invoke;
  v4[3] = &__block_descriptor_tmp_46;
  v4[4] = this;
  return degas::StatementCache::getStatement(v2, v1, (uint64_t)v4);
}

uint64_t ___ZNK5degas17LabelledEdgeTable41readTargetNodesByEdgeIdentifiersStatementEv_block_invoke@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v3;
  sqlite3_stmt **v4;
  sqlite3 *v5;
  void *__p;
  char v8;
  _QWORD v9[11];
  char v10;
  uint64_t v11;

  v3 = *(_QWORD *)(a1 + 32);
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v9);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)"select mergeLiteralBitmap(e.targetNodeId) from Edge e, identifierBitmap(?1) eb where e.identifier = eb.value", 108);
  v4 = (sqlite3_stmt **)operator new();
  v5 = *(sqlite3 **)(v3 + 32);
  std::stringbuf::str();
  degas::Statement::Statement(v4, v5, (uint64_t)&__p);
  std::shared_ptr<degas::Statement>::shared_ptr[abi:ne180100]<degas::Statement,void>(a2, (uint64_t)v4);
  if (v8 < 0)
    operator delete(__p);
  v9[0] = *MEMORY[0x1E0DE4F60];
  *(_QWORD *)((char *)v9 + *(_QWORD *)(v9[0] - 24)) = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 24);
  v9[1] = MEMORY[0x1E0DE4FB8] + 16;
  if (v10 < 0)
    operator delete((void *)v9[9]);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  return MEMORY[0x1CAA4AD98](&v11);
}

void sub_1CA187ED4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15)
{
  uint64_t v15;

  MEMORY[0x1CAA4ADC8](v15, 0x1020C4062D53EE8);
  std::ostringstream::~ostringstream((uint64_t)&a15);
  _Unwind_Resume(a1);
}

uint64_t *degas::LabelledEdgeTable::readSourceNodesByEdgeIdentifiersStatement(degas::LabelledEdgeTable *this)
{
  unsigned int v1;
  uint64_t v2;
  _QWORD v4[5];

  v1 = (*((unsigned __int8 *)this + 48) << 16) | 0xC17;
  v2 = *((_QWORD *)this + 5);
  v4[0] = MEMORY[0x1E0C809B0];
  v4[1] = 0x40000000;
  v4[2] = ___ZNK5degas17LabelledEdgeTable41readSourceNodesByEdgeIdentifiersStatementEv_block_invoke;
  v4[3] = &__block_descriptor_tmp_48;
  v4[4] = this;
  return degas::StatementCache::getStatement(v2, v1, (uint64_t)v4);
}

uint64_t ___ZNK5degas17LabelledEdgeTable41readSourceNodesByEdgeIdentifiersStatementEv_block_invoke@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v3;
  sqlite3_stmt **v4;
  sqlite3 *v5;
  void *__p;
  char v8;
  _QWORD v9[11];
  char v10;
  uint64_t v11;

  v3 = *(_QWORD *)(a1 + 32);
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v9);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)"select mergeLiteralBitmap(e.sourceNodeId) from Edge e, identifierBitmap(?1) eb where e.identifier = eb.value", 108);
  v4 = (sqlite3_stmt **)operator new();
  v5 = *(sqlite3 **)(v3 + 32);
  std::stringbuf::str();
  degas::Statement::Statement(v4, v5, (uint64_t)&__p);
  std::shared_ptr<degas::Statement>::shared_ptr[abi:ne180100]<degas::Statement,void>(a2, (uint64_t)v4);
  if (v8 < 0)
    operator delete(__p);
  v9[0] = *MEMORY[0x1E0DE4F60];
  *(_QWORD *)((char *)v9 + *(_QWORD *)(v9[0] - 24)) = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 24);
  v9[1] = MEMORY[0x1E0DE4FB8] + 16;
  if (v10 < 0)
    operator delete((void *)v9[9]);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  return MEMORY[0x1CAA4AD98](&v11);
}

void sub_1CA1880A8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15)
{
  uint64_t v15;

  MEMORY[0x1CAA4ADC8](v15, 0x1020C4062D53EE8);
  std::ostringstream::~ostringstream((uint64_t)&a15);
  _Unwind_Resume(a1);
}

uint64_t *degas::LabelledEdgeTable::prepareStatementToReadTargetNodesByLabelIdentifiersSourceNodeIdentifiers(degas::LabelledEdgeTable *this, const degas::Bitmap *a2, Bitmap *a3)
{
  unsigned int v5;
  uint64_t v6;
  uint64_t *Statement;
  _QWORD v9[5];

  v5 = (*((unsigned __int8 *)this + 48) << 16) | 0xC00;
  v6 = *((_QWORD *)this + 5);
  v9[0] = MEMORY[0x1E0C809B0];
  v9[1] = 0x40000000;
  v9[2] = ___ZNK5degas17LabelledEdgeTable63readTargetNodesByLabelIdentifiersSourceNodeIdentifiersStatementEv_block_invoke;
  v9[3] = &__block_descriptor_tmp_1877;
  v9[4] = this;
  Statement = degas::StatementCache::getStatement(v6, v5, (uint64_t)v9);
  degas::Statement::bindBitmapPointer((sqlite3_stmt **)*Statement, 1, a3);
  degas::Statement::bindBitmap((degas::Statement *)*Statement, (const Bitmap *)2, a2);
  return Statement;
}

uint64_t *degas::LabelledEdgeTable::prepareStatementToReadSourceNodesByLabelIdentifiersTargetNodeIdentifiers(degas::LabelledEdgeTable *this, const degas::Bitmap *a2, Bitmap *a3)
{
  unsigned int v5;
  uint64_t v6;
  uint64_t *Statement;
  _QWORD v9[5];

  v5 = (*((unsigned __int8 *)this + 48) << 16) | 0xC01;
  v6 = *((_QWORD *)this + 5);
  v9[0] = MEMORY[0x1E0C809B0];
  v9[1] = 0x40000000;
  v9[2] = ___ZNK5degas17LabelledEdgeTable63readSourceNodesByLabelIdentifiersTargetNodeIdentifiersStatementEv_block_invoke;
  v9[3] = &__block_descriptor_tmp_4_1880;
  v9[4] = this;
  Statement = degas::StatementCache::getStatement(v6, v5, (uint64_t)v9);
  degas::Statement::bindBitmapPointer((sqlite3_stmt **)*Statement, 1, a3);
  degas::Statement::bindBitmap((degas::Statement *)*Statement, (const Bitmap *)2, a2);
  return Statement;
}

uint64_t *degas::LabelledEdgeTable::prepareStatementToReadTargetNodesBySourceNodeIdentifiers(degas::LabelledEdgeTable *this, Bitmap *a2)
{
  unsigned int v3;
  uint64_t v4;
  uint64_t *Statement;
  _QWORD v7[5];

  v3 = (*((unsigned __int8 *)this + 48) << 16) | 0xC02;
  v4 = *((_QWORD *)this + 5);
  v7[0] = MEMORY[0x1E0C809B0];
  v7[1] = 0x40000000;
  v7[2] = ___ZNK5degas17LabelledEdgeTable47readTargetNodesBySourceNodeIdentifiersStatementEv_block_invoke;
  v7[3] = &__block_descriptor_tmp_6_1882;
  v7[4] = this;
  Statement = degas::StatementCache::getStatement(v4, v3, (uint64_t)v7);
  degas::Statement::bindBitmapPointer((sqlite3_stmt **)*Statement, 1, a2);
  return Statement;
}

uint64_t *degas::LabelledEdgeTable::prepareStatementToReadSourceNodesByTargetNodeIdentifiers(degas::LabelledEdgeTable *this, Bitmap *a2)
{
  unsigned int v3;
  uint64_t v4;
  uint64_t *Statement;
  _QWORD v7[5];

  v3 = (*((unsigned __int8 *)this + 48) << 16) | 0xC03;
  v4 = *((_QWORD *)this + 5);
  v7[0] = MEMORY[0x1E0C809B0];
  v7[1] = 0x40000000;
  v7[2] = ___ZNK5degas17LabelledEdgeTable47readSourceNodesByTargetNodeIdentifiersStatementEv_block_invoke;
  v7[3] = &__block_descriptor_tmp_8_1884;
  v7[4] = this;
  Statement = degas::StatementCache::getStatement(v4, v3, (uint64_t)v7);
  degas::Statement::bindBitmapPointer((sqlite3_stmt **)*Statement, 1, a2);
  return Statement;
}

uint64_t *degas::LabelledEdgeTable::prepareStatementToReadTargetNodesByEdgeIdentifiersSourceNodeIdentifiersJoinBoth(degas::LabelledEdgeTable *this, Bitmap *a2, Bitmap *a3)
{
  unsigned int v5;
  uint64_t v6;
  uint64_t *Statement;
  _QWORD v9[5];

  v5 = (*((unsigned __int8 *)this + 48) << 16) | 0xC04;
  v6 = *((_QWORD *)this + 5);
  v9[0] = MEMORY[0x1E0C809B0];
  v9[1] = 0x40000000;
  v9[2] = ___ZNK5degas17LabelledEdgeTable70readTargetNodesByEdgeIdentifiersSourceNodeIdentifiersJoinBothStatementEv_block_invoke;
  v9[3] = &__block_descriptor_tmp_10_1886;
  v9[4] = this;
  Statement = degas::StatementCache::getStatement(v6, v5, (uint64_t)v9);
  degas::Statement::bindBitmapPointer((sqlite3_stmt **)*Statement, 1, a3);
  degas::Statement::bindBitmapPointer((sqlite3_stmt **)*Statement, 2, a2);
  return Statement;
}

uint64_t *degas::LabelledEdgeTable::prepareStatementToReadTargetNodesByEdgeIdentifiersSourceNodeIdentifiersJoinNode(degas::LabelledEdgeTable *this, Bitmap *a2, Bitmap *a3)
{
  unsigned int v5;
  uint64_t v6;
  uint64_t *Statement;
  _QWORD v9[5];

  v5 = (*((unsigned __int8 *)this + 48) << 16) | 0xC06;
  v6 = *((_QWORD *)this + 5);
  v9[0] = MEMORY[0x1E0C809B0];
  v9[1] = 0x40000000;
  v9[2] = ___ZNK5degas17LabelledEdgeTable70readTargetNodesByEdgeIdentifiersSourceNodeIdentifiersJoinNodeStatementEv_block_invoke;
  v9[3] = &__block_descriptor_tmp_12;
  v9[4] = this;
  Statement = degas::StatementCache::getStatement(v6, v5, (uint64_t)v9);
  degas::Statement::bindBitmapPointer((sqlite3_stmt **)*Statement, 1, a3);
  degas::Statement::bindBitmapPointer((sqlite3_stmt **)*Statement, 2, a2);
  return Statement;
}

uint64_t *degas::LabelledEdgeTable::prepareStatementToReadTargetNodesByEdgeIdentifiersSourceNodeIdentifiersJoinEdge(degas::LabelledEdgeTable *this, Bitmap *a2, Bitmap *a3)
{
  unsigned int v5;
  uint64_t v6;
  uint64_t *Statement;
  _QWORD v9[5];

  v5 = (*((unsigned __int8 *)this + 48) << 16) | 0xC08;
  v6 = *((_QWORD *)this + 5);
  v9[0] = MEMORY[0x1E0C809B0];
  v9[1] = 0x40000000;
  v9[2] = ___ZNK5degas17LabelledEdgeTable70readTargetNodesByEdgeIdentifiersSourceNodeIdentifiersJoinEdgeStatementEv_block_invoke;
  v9[3] = &__block_descriptor_tmp_14_1889;
  v9[4] = this;
  Statement = degas::StatementCache::getStatement(v6, v5, (uint64_t)v9);
  degas::Statement::bindBitmapPointer((sqlite3_stmt **)*Statement, 1, a3);
  degas::Statement::bindBitmapPointer((sqlite3_stmt **)*Statement, 2, a2);
  return Statement;
}

uint64_t *degas::LabelledEdgeTable::prepareStatementToReadTargetNodesByEdgeIdentifiersSourceNodeIdentifiersFilterEdge(degas::LabelledEdgeTable *this, const degas::Bitmap *a2, Bitmap *a3)
{
  unsigned int v5;
  uint64_t v6;
  uint64_t *Statement;
  _QWORD v9[5];

  v5 = (*((unsigned __int8 *)this + 48) << 16) | 0xC0A;
  v6 = *((_QWORD *)this + 5);
  v9[0] = MEMORY[0x1E0C809B0];
  v9[1] = 0x40000000;
  v9[2] = ___ZNK5degas17LabelledEdgeTable72readTargetNodesByEdgeIdentifiersSourceNodeIdentifiersFilterEdgeStatementEv_block_invoke;
  v9[3] = &__block_descriptor_tmp_16_1891;
  v9[4] = this;
  Statement = degas::StatementCache::getStatement(v6, v5, (uint64_t)v9);
  degas::Statement::bindBitmapPointer((sqlite3_stmt **)*Statement, 1, a3);
  degas::Statement::bindBitmap((degas::Statement *)*Statement, (const Bitmap *)2, a2);
  return Statement;
}

uint64_t *degas::LabelledEdgeTable::prepareStatementToReadTargetNodesByEdgeIdentifiersSourceNodeIdentifiersFilterNode(degas::LabelledEdgeTable *this, Bitmap *a2, const degas::Bitmap *a3)
{
  unsigned int v5;
  uint64_t v6;
  uint64_t *Statement;
  _QWORD v9[5];

  v5 = (*((unsigned __int8 *)this + 48) << 16) | 0xC0C;
  v6 = *((_QWORD *)this + 5);
  v9[0] = MEMORY[0x1E0C809B0];
  v9[1] = 0x40000000;
  v9[2] = ___ZNK5degas17LabelledEdgeTable72readTargetNodesByEdgeIdentifiersSourceNodeIdentifiersFilterNodeStatementEv_block_invoke;
  v9[3] = &__block_descriptor_tmp_18;
  v9[4] = this;
  Statement = degas::StatementCache::getStatement(v6, v5, (uint64_t)v9);
  degas::Statement::bindBitmap((degas::Statement *)*Statement, (const Bitmap *)1, a3);
  degas::Statement::bindBitmapPointer((sqlite3_stmt **)*Statement, 2, a2);
  return Statement;
}

uint64_t *degas::LabelledEdgeTable::prepareStatementToReadSourceNodesByEdgeIdentifiersTargetNodeIdentifiersJoinBoth(degas::LabelledEdgeTable *this, Bitmap *a2, Bitmap *a3)
{
  unsigned int v5;
  uint64_t v6;
  uint64_t *Statement;
  _QWORD v9[5];

  v5 = (*((unsigned __int8 *)this + 48) << 16) | 0xC05;
  v6 = *((_QWORD *)this + 5);
  v9[0] = MEMORY[0x1E0C809B0];
  v9[1] = 0x40000000;
  v9[2] = ___ZNK5degas17LabelledEdgeTable70readSourceNodesByEdgeIdentifiersTargetNodeIdentifiersJoinBothStatementEv_block_invoke;
  v9[3] = &__block_descriptor_tmp_20_1894;
  v9[4] = this;
  Statement = degas::StatementCache::getStatement(v6, v5, (uint64_t)v9);
  degas::Statement::bindBitmapPointer((sqlite3_stmt **)*Statement, 1, a3);
  degas::Statement::bindBitmapPointer((sqlite3_stmt **)*Statement, 2, a2);
  return Statement;
}

uint64_t *degas::LabelledEdgeTable::prepareStatementToReadSourceNodesByEdgeIdentifiersTargetNodeIdentifiersJoinNode(degas::LabelledEdgeTable *this, Bitmap *a2, Bitmap *a3)
{
  unsigned int v5;
  uint64_t v6;
  uint64_t *Statement;
  _QWORD v9[5];

  v5 = (*((unsigned __int8 *)this + 48) << 16) | 0xC07;
  v6 = *((_QWORD *)this + 5);
  v9[0] = MEMORY[0x1E0C809B0];
  v9[1] = 0x40000000;
  v9[2] = ___ZNK5degas17LabelledEdgeTable70readSourceNodesByEdgeIdentifiersTargetNodeIdentifiersJoinNodeStatementEv_block_invoke;
  v9[3] = &__block_descriptor_tmp_22;
  v9[4] = this;
  Statement = degas::StatementCache::getStatement(v6, v5, (uint64_t)v9);
  degas::Statement::bindBitmapPointer((sqlite3_stmt **)*Statement, 1, a3);
  degas::Statement::bindBitmapPointer((sqlite3_stmt **)*Statement, 2, a2);
  return Statement;
}

uint64_t *degas::LabelledEdgeTable::prepareStatementToReadSourceNodesByEdgeIdentifiersTargetNodeIdentifiersJoinEdge(degas::LabelledEdgeTable *this, Bitmap *a2, Bitmap *a3)
{
  unsigned int v5;
  uint64_t v6;
  uint64_t *Statement;
  _QWORD v9[5];

  v5 = (*((unsigned __int8 *)this + 48) << 16) | 0xC09;
  v6 = *((_QWORD *)this + 5);
  v9[0] = MEMORY[0x1E0C809B0];
  v9[1] = 0x40000000;
  v9[2] = ___ZNK5degas17LabelledEdgeTable70readSourceNodesByEdgeIdentifiersTargetNodeIdentifiersJoinEdgeStatementEv_block_invoke;
  v9[3] = &__block_descriptor_tmp_24;
  v9[4] = this;
  Statement = degas::StatementCache::getStatement(v6, v5, (uint64_t)v9);
  degas::Statement::bindBitmapPointer((sqlite3_stmt **)*Statement, 1, a3);
  degas::Statement::bindBitmapPointer((sqlite3_stmt **)*Statement, 2, a2);
  return Statement;
}

uint64_t *degas::LabelledEdgeTable::prepareStatementToReadSourceNodesByEdgeIdentifiersTargetNodeIdentifiersFilterEdge(degas::LabelledEdgeTable *this, const degas::Bitmap *a2, Bitmap *a3)
{
  unsigned int v5;
  uint64_t v6;
  uint64_t *Statement;
  _QWORD v9[5];

  v5 = (*((unsigned __int8 *)this + 48) << 16) | 0xC0B;
  v6 = *((_QWORD *)this + 5);
  v9[0] = MEMORY[0x1E0C809B0];
  v9[1] = 0x40000000;
  v9[2] = ___ZNK5degas17LabelledEdgeTable72readSourceNodesByEdgeIdentifiersTargetNodeIdentifiersFilterEdgeStatementEv_block_invoke;
  v9[3] = &__block_descriptor_tmp_26_1898;
  v9[4] = this;
  Statement = degas::StatementCache::getStatement(v6, v5, (uint64_t)v9);
  degas::Statement::bindBitmapPointer((sqlite3_stmt **)*Statement, 1, a3);
  degas::Statement::bindBitmap((degas::Statement *)*Statement, (const Bitmap *)2, a2);
  return Statement;
}

uint64_t *degas::LabelledEdgeTable::prepareStatementToReadSourceNodesByEdgeIdentifiersTargetNodeIdentifiersFilterNode(degas::LabelledEdgeTable *this, Bitmap *a2, const degas::Bitmap *a3)
{
  unsigned int v5;
  uint64_t v6;
  uint64_t *Statement;
  _QWORD v9[5];

  v5 = (*((unsigned __int8 *)this + 48) << 16) | 0xC0D;
  v6 = *((_QWORD *)this + 5);
  v9[0] = MEMORY[0x1E0C809B0];
  v9[1] = 0x40000000;
  v9[2] = ___ZNK5degas17LabelledEdgeTable72readSourceNodesByEdgeIdentifiersTargetNodeIdentifiersFilterNodeStatementEv_block_invoke;
  v9[3] = &__block_descriptor_tmp_28_1900;
  v9[4] = this;
  Statement = degas::StatementCache::getStatement(v6, v5, (uint64_t)v9);
  degas::Statement::bindBitmap((degas::Statement *)*Statement, (const Bitmap *)1, a3);
  degas::Statement::bindBitmapPointer((sqlite3_stmt **)*Statement, 2, a2);
  return Statement;
}

uint64_t *degas::LabelledEdgeTable::prepareStatementToReadEdgesByLabelIdentifiersSourceNodeIdentifiers(degas::LabelledEdgeTable *this, const degas::Bitmap *a2, Bitmap *a3)
{
  unsigned int v5;
  uint64_t v6;
  uint64_t *Statement;
  _QWORD v9[5];

  v5 = (*((unsigned __int8 *)this + 48) << 16) | 0xC0E;
  v6 = *((_QWORD *)this + 5);
  v9[0] = MEMORY[0x1E0C809B0];
  v9[1] = 0x40000000;
  v9[2] = ___ZNK5degas17LabelledEdgeTable57readEdgesByLabelIdentifiersSourceNodeIdentifiersStatementEv_block_invoke;
  v9[3] = &__block_descriptor_tmp_30_1902;
  v9[4] = this;
  Statement = degas::StatementCache::getStatement(v6, v5, (uint64_t)v9);
  degas::Statement::bindBitmapPointer((sqlite3_stmt **)*Statement, 1, a3);
  degas::Statement::bindBitmap((degas::Statement *)*Statement, (const Bitmap *)2, a2);
  return Statement;
}

uint64_t *degas::LabelledEdgeTable::prepareStatementToReadEdgesByLabelIdentifiersTargetNodeIdentifiers(degas::LabelledEdgeTable *this, const degas::Bitmap *a2, Bitmap *a3)
{
  unsigned int v5;
  uint64_t v6;
  uint64_t *Statement;
  _QWORD v9[5];

  v5 = (*((unsigned __int8 *)this + 48) << 16) | 0xC0F;
  v6 = *((_QWORD *)this + 5);
  v9[0] = MEMORY[0x1E0C809B0];
  v9[1] = 0x40000000;
  v9[2] = ___ZNK5degas17LabelledEdgeTable57readEdgesByLabelIdentifiersTargetNodeIdentifiersStatementEv_block_invoke;
  v9[3] = &__block_descriptor_tmp_32;
  v9[4] = this;
  Statement = degas::StatementCache::getStatement(v6, v5, (uint64_t)v9);
  degas::Statement::bindBitmapPointer((sqlite3_stmt **)*Statement, 1, a3);
  degas::Statement::bindBitmap((degas::Statement *)*Statement, (const Bitmap *)2, a2);
  return Statement;
}

uint64_t *degas::LabelledEdgeTable::prepareStatementToReadEdgesBySourceNodeIdentifiers(degas::LabelledEdgeTable *this, Bitmap *a2)
{
  unsigned int v3;
  uint64_t v4;
  uint64_t *Statement;
  _QWORD v7[5];

  v3 = (*((unsigned __int8 *)this + 48) << 16) | 0xC10;
  v4 = *((_QWORD *)this + 5);
  v7[0] = MEMORY[0x1E0C809B0];
  v7[1] = 0x40000000;
  v7[2] = ___ZNK5degas17LabelledEdgeTable41readEdgesBySourceNodeIdentifiersStatementEv_block_invoke;
  v7[3] = &__block_descriptor_tmp_34_1905;
  v7[4] = this;
  Statement = degas::StatementCache::getStatement(v4, v3, (uint64_t)v7);
  degas::Statement::bindBitmapPointer((sqlite3_stmt **)*Statement, 1, a2);
  return Statement;
}

uint64_t *degas::LabelledEdgeTable::prepareStatementToReadEdgesByTargetNodeIdentifiers(degas::LabelledEdgeTable *this, Bitmap *a2)
{
  unsigned int v3;
  uint64_t v4;
  uint64_t *Statement;
  _QWORD v7[5];

  v3 = (*((unsigned __int8 *)this + 48) << 16) | 0xC11;
  v4 = *((_QWORD *)this + 5);
  v7[0] = MEMORY[0x1E0C809B0];
  v7[1] = 0x40000000;
  v7[2] = ___ZNK5degas17LabelledEdgeTable41readEdgesByTargetNodeIdentifiersStatementEv_block_invoke;
  v7[3] = &__block_descriptor_tmp_36;
  v7[4] = this;
  Statement = degas::StatementCache::getStatement(v4, v3, (uint64_t)v7);
  degas::Statement::bindBitmapPointer((sqlite3_stmt **)*Statement, 1, a2);
  return Statement;
}

uint64_t *degas::LabelledEdgeTable::prepareStatementToReadEdgesBySourceNodeIdentifiersEdgeFilter(degas::LabelledEdgeTable *this, Bitmap *a2, const degas::Bitmap *a3)
{
  unsigned int v5;
  uint64_t v6;
  uint64_t *Statement;
  _QWORD v9[5];

  v5 = (*((unsigned __int8 *)this + 48) << 16) | 0xC12;
  v6 = *((_QWORD *)this + 5);
  v9[0] = MEMORY[0x1E0C809B0];
  v9[1] = 0x40000000;
  v9[2] = ___ZNK5degas17LabelledEdgeTable51readEdgesBySourceNodeIdentifiersEdgeFilterStatementEv_block_invoke;
  v9[3] = &__block_descriptor_tmp_38;
  v9[4] = this;
  Statement = degas::StatementCache::getStatement(v6, v5, (uint64_t)v9);
  degas::Statement::bindBitmapPointer((sqlite3_stmt **)*Statement, 1, a2);
  degas::Statement::bindBitmap((degas::Statement *)*Statement, (const Bitmap *)2, a3);
  return Statement;
}

uint64_t *degas::LabelledEdgeTable::prepareStatementToReadEdgesByTargetNodeIdentifiersEdgeFilter(degas::LabelledEdgeTable *this, Bitmap *a2, const degas::Bitmap *a3)
{
  unsigned int v5;
  uint64_t v6;
  uint64_t *Statement;
  _QWORD v9[5];

  v5 = (*((unsigned __int8 *)this + 48) << 16) | 0xC13;
  v6 = *((_QWORD *)this + 5);
  v9[0] = MEMORY[0x1E0C809B0];
  v9[1] = 0x40000000;
  v9[2] = ___ZNK5degas17LabelledEdgeTable51readEdgesByTargetNodeIdentifiersEdgeFilterStatementEv_block_invoke;
  v9[3] = &__block_descriptor_tmp_40;
  v9[4] = this;
  Statement = degas::StatementCache::getStatement(v6, v5, (uint64_t)v9);
  degas::Statement::bindBitmapPointer((sqlite3_stmt **)*Statement, 1, a2);
  degas::Statement::bindBitmap((degas::Statement *)*Statement, (const Bitmap *)2, a3);
  return Statement;
}

uint64_t *degas::LabelledEdgeTable::prepareStatementToReadEdgesBySourceNodeIdentifier(degas::LabelledEdgeTable *this, sqlite3_int64 a2)
{
  unsigned int v3;
  uint64_t v4;
  uint64_t *Statement;
  _QWORD v7[5];

  v3 = (*((unsigned __int8 *)this + 48) << 16) | 0xC14;
  v4 = *((_QWORD *)this + 5);
  v7[0] = MEMORY[0x1E0C809B0];
  v7[1] = 0x40000000;
  v7[2] = ___ZNK5degas17LabelledEdgeTable40readEdgesBySourceNodeIdentifierStatementEv_block_invoke;
  v7[3] = &__block_descriptor_tmp_42;
  v7[4] = this;
  Statement = degas::StatementCache::getStatement(v4, v3, (uint64_t)v7);
  degas::Statement::bindInteger((sqlite3_stmt **)*Statement, 1, a2);
  return Statement;
}

uint64_t *degas::LabelledEdgeTable::prepareStatementToReadEdgesByTargetNodeIdentifier(degas::LabelledEdgeTable *this, sqlite3_int64 a2)
{
  unsigned int v3;
  uint64_t v4;
  uint64_t *Statement;
  _QWORD v7[5];

  v3 = (*((unsigned __int8 *)this + 48) << 16) | 0xC15;
  v4 = *((_QWORD *)this + 5);
  v7[0] = MEMORY[0x1E0C809B0];
  v7[1] = 0x40000000;
  v7[2] = ___ZNK5degas17LabelledEdgeTable40readEdgesByTargetNodeIdentifierStatementEv_block_invoke;
  v7[3] = &__block_descriptor_tmp_44;
  v7[4] = this;
  Statement = degas::StatementCache::getStatement(v4, v3, (uint64_t)v7);
  degas::Statement::bindInteger((sqlite3_stmt **)*Statement, 1, a2);
  return Statement;
}

uint64_t *degas::LabelledEdgeTable::prepareStatementToReadTargetNodesByEdgeIdentifiers(degas::LabelledEdgeTable *this, Bitmap *a2)
{
  unsigned int v3;
  uint64_t v4;
  uint64_t *Statement;
  _QWORD v7[5];

  v3 = (*((unsigned __int8 *)this + 48) << 16) | 0xC16;
  v4 = *((_QWORD *)this + 5);
  v7[0] = MEMORY[0x1E0C809B0];
  v7[1] = 0x40000000;
  v7[2] = ___ZNK5degas17LabelledEdgeTable41readTargetNodesByEdgeIdentifiersStatementEv_block_invoke;
  v7[3] = &__block_descriptor_tmp_46;
  v7[4] = this;
  Statement = degas::StatementCache::getStatement(v4, v3, (uint64_t)v7);
  degas::Statement::bindBitmapPointer((sqlite3_stmt **)*Statement, 1, a2);
  return Statement;
}

uint64_t *degas::LabelledEdgeTable::prepareStatementToReadSourceNodesByEdgeIdentifiers(degas::LabelledEdgeTable *this, Bitmap *a2)
{
  unsigned int v3;
  uint64_t v4;
  uint64_t *Statement;
  _QWORD v7[5];

  v3 = (*((unsigned __int8 *)this + 48) << 16) | 0xC17;
  v4 = *((_QWORD *)this + 5);
  v7[0] = MEMORY[0x1E0C809B0];
  v7[1] = 0x40000000;
  v7[2] = ___ZNK5degas17LabelledEdgeTable41readSourceNodesByEdgeIdentifiersStatementEv_block_invoke;
  v7[3] = &__block_descriptor_tmp_48;
  v7[4] = this;
  Statement = degas::StatementCache::getStatement(v4, v3, (uint64_t)v7);
  degas::Statement::bindBitmapPointer((sqlite3_stmt **)*Statement, 1, a2);
  return Statement;
}

_QWORD *degas::LabelledEdgeCursor::LabelledEdgeCursor(_QWORD *this)
{
  *this = 0;
  this[1] = 0;
  return this;
}

_QWORD *degas::LabelledEdgeCursor::setForTargetNodesFromLabelsSourceNodes(degas::LabelledEdgeCursor *this, Bitmap *a2, const degas::Bitmap *a3, const degas::LabelledEdgeTable *a4)
{
  uint64_t *TargetNodesByLabelIdentifiersSourceNodeIdentifiers;

  TargetNodesByLabelIdentifiersSourceNodeIdentifiers = degas::LabelledEdgeTable::prepareStatementToReadTargetNodesByLabelIdentifiersSourceNodeIdentifiers(a4, a3, a2);
  return std::shared_ptr<degas::Statement>::operator=[abi:ne180100](this, *TargetNodesByLabelIdentifiersSourceNodeIdentifiers, TargetNodesByLabelIdentifiersSourceNodeIdentifiers[1]);
}

_QWORD *degas::LabelledEdgeCursor::setForSourceNodesFromLabelsTargetNodes(degas::LabelledEdgeCursor *this, Bitmap *a2, const degas::Bitmap *a3, const degas::LabelledEdgeTable *a4)
{
  uint64_t *SourceNodesByLabelIdentifiersTargetNodeIdentifiers;

  SourceNodesByLabelIdentifiersTargetNodeIdentifiers = degas::LabelledEdgeTable::prepareStatementToReadSourceNodesByLabelIdentifiersTargetNodeIdentifiers(a4, a3, a2);
  return std::shared_ptr<degas::Statement>::operator=[abi:ne180100](this, *SourceNodesByLabelIdentifiersTargetNodeIdentifiers, SourceNodesByLabelIdentifiersTargetNodeIdentifiers[1]);
}

_QWORD *degas::LabelledEdgeCursor::setForTargetNodesFromSourceNodes(degas::LabelledEdgeCursor *this, Bitmap *a2, const degas::LabelledEdgeTable *a3)
{
  unsigned int v5;
  uint64_t v6;
  uint64_t *Statement;
  _QWORD v9[5];

  v5 = (*((unsigned __int8 *)a3 + 48) << 16) | 0xC02;
  v6 = *((_QWORD *)a3 + 5);
  v9[0] = MEMORY[0x1E0C809B0];
  v9[1] = 0x40000000;
  v9[2] = ___ZNK5degas17LabelledEdgeTable47readTargetNodesBySourceNodeIdentifiersStatementEv_block_invoke;
  v9[3] = &__block_descriptor_tmp_6_1882;
  v9[4] = a3;
  Statement = degas::StatementCache::getStatement(v6, v5, (uint64_t)v9);
  degas::Statement::bindBitmapPointer((sqlite3_stmt **)*Statement, 1, a2);
  return std::shared_ptr<degas::Statement>::operator=[abi:ne180100](this, *Statement, Statement[1]);
}

_QWORD *degas::LabelledEdgeCursor::setForSourceNodesFromTargetNodes(degas::LabelledEdgeCursor *this, Bitmap *a2, const degas::LabelledEdgeTable *a3)
{
  unsigned int v5;
  uint64_t v6;
  uint64_t *Statement;
  _QWORD v9[5];

  v5 = (*((unsigned __int8 *)a3 + 48) << 16) | 0xC03;
  v6 = *((_QWORD *)a3 + 5);
  v9[0] = MEMORY[0x1E0C809B0];
  v9[1] = 0x40000000;
  v9[2] = ___ZNK5degas17LabelledEdgeTable47readSourceNodesByTargetNodeIdentifiersStatementEv_block_invoke;
  v9[3] = &__block_descriptor_tmp_8_1884;
  v9[4] = a3;
  Statement = degas::StatementCache::getStatement(v6, v5, (uint64_t)v9);
  degas::Statement::bindBitmapPointer((sqlite3_stmt **)*Statement, 1, a2);
  return std::shared_ptr<degas::Statement>::operator=[abi:ne180100](this, *Statement, Statement[1]);
}

_QWORD *degas::LabelledEdgeCursor::setForTargetNodesFromEdgesSourceNodesJoinBoth(degas::LabelledEdgeCursor *this, Bitmap *a2, Bitmap *a3, const degas::LabelledEdgeTable *a4)
{
  uint64_t *TargetNodesByEdgeIdentifiersSourceNodeIdentifiersJoinBoth;

  TargetNodesByEdgeIdentifiersSourceNodeIdentifiersJoinBoth = degas::LabelledEdgeTable::prepareStatementToReadTargetNodesByEdgeIdentifiersSourceNodeIdentifiersJoinBoth(a4, a3, a2);
  return std::shared_ptr<degas::Statement>::operator=[abi:ne180100](this, *TargetNodesByEdgeIdentifiersSourceNodeIdentifiersJoinBoth, TargetNodesByEdgeIdentifiersSourceNodeIdentifiersJoinBoth[1]);
}

_QWORD *degas::LabelledEdgeCursor::setForTargetNodesFromEdgesSourceNodesJoinNode(degas::LabelledEdgeCursor *this, Bitmap *a2, Bitmap *a3, const degas::LabelledEdgeTable *a4)
{
  uint64_t *TargetNodesByEdgeIdentifiersSourceNodeIdentifiersJoinNode;

  TargetNodesByEdgeIdentifiersSourceNodeIdentifiersJoinNode = degas::LabelledEdgeTable::prepareStatementToReadTargetNodesByEdgeIdentifiersSourceNodeIdentifiersJoinNode(a4, a3, a2);
  return std::shared_ptr<degas::Statement>::operator=[abi:ne180100](this, *TargetNodesByEdgeIdentifiersSourceNodeIdentifiersJoinNode, TargetNodesByEdgeIdentifiersSourceNodeIdentifiersJoinNode[1]);
}

_QWORD *degas::LabelledEdgeCursor::setForTargetNodesFromEdgesSourceNodesJoinEdge(degas::LabelledEdgeCursor *this, Bitmap *a2, Bitmap *a3, const degas::LabelledEdgeTable *a4)
{
  uint64_t *TargetNodesByEdgeIdentifiersSourceNodeIdentifiersJoinEdge;

  TargetNodesByEdgeIdentifiersSourceNodeIdentifiersJoinEdge = degas::LabelledEdgeTable::prepareStatementToReadTargetNodesByEdgeIdentifiersSourceNodeIdentifiersJoinEdge(a4, a3, a2);
  return std::shared_ptr<degas::Statement>::operator=[abi:ne180100](this, *TargetNodesByEdgeIdentifiersSourceNodeIdentifiersJoinEdge, TargetNodesByEdgeIdentifiersSourceNodeIdentifiersJoinEdge[1]);
}

_QWORD *degas::LabelledEdgeCursor::setForTargetNodesFromEdgesSourceNodesFilterEdge(degas::LabelledEdgeCursor *this, Bitmap *a2, const degas::Bitmap *a3, const degas::LabelledEdgeTable *a4)
{
  uint64_t *TargetNodesByEdgeIdentifiersSourceNodeIdentifiersFilterEdge;

  TargetNodesByEdgeIdentifiersSourceNodeIdentifiersFilterEdge = degas::LabelledEdgeTable::prepareStatementToReadTargetNodesByEdgeIdentifiersSourceNodeIdentifiersFilterEdge(a4, a3, a2);
  return std::shared_ptr<degas::Statement>::operator=[abi:ne180100](this, *TargetNodesByEdgeIdentifiersSourceNodeIdentifiersFilterEdge, TargetNodesByEdgeIdentifiersSourceNodeIdentifiersFilterEdge[1]);
}

_QWORD *degas::LabelledEdgeCursor::setForTargetNodesFromEdgesSourceNodesFilterNode(degas::LabelledEdgeCursor *this, const degas::Bitmap *a2, Bitmap *a3, const degas::LabelledEdgeTable *a4)
{
  uint64_t *TargetNodesByEdgeIdentifiersSourceNodeIdentifiersFilterNode;

  TargetNodesByEdgeIdentifiersSourceNodeIdentifiersFilterNode = degas::LabelledEdgeTable::prepareStatementToReadTargetNodesByEdgeIdentifiersSourceNodeIdentifiersFilterNode(a4, a3, a2);
  return std::shared_ptr<degas::Statement>::operator=[abi:ne180100](this, *TargetNodesByEdgeIdentifiersSourceNodeIdentifiersFilterNode, TargetNodesByEdgeIdentifiersSourceNodeIdentifiersFilterNode[1]);
}

_QWORD *degas::LabelledEdgeCursor::setForSourceNodesFromEdgesTargetNodesJoinBoth(degas::LabelledEdgeCursor *this, Bitmap *a2, Bitmap *a3, const degas::LabelledEdgeTable *a4)
{
  uint64_t *SourceNodesByEdgeIdentifiersTargetNodeIdentifiersJoinBoth;

  SourceNodesByEdgeIdentifiersTargetNodeIdentifiersJoinBoth = degas::LabelledEdgeTable::prepareStatementToReadSourceNodesByEdgeIdentifiersTargetNodeIdentifiersJoinBoth(a4, a3, a2);
  return std::shared_ptr<degas::Statement>::operator=[abi:ne180100](this, *SourceNodesByEdgeIdentifiersTargetNodeIdentifiersJoinBoth, SourceNodesByEdgeIdentifiersTargetNodeIdentifiersJoinBoth[1]);
}

_QWORD *degas::LabelledEdgeCursor::setForSourceNodesFromEdgesTargetNodesJoinNode(degas::LabelledEdgeCursor *this, Bitmap *a2, Bitmap *a3, const degas::LabelledEdgeTable *a4)
{
  uint64_t *SourceNodesByEdgeIdentifiersTargetNodeIdentifiersJoinNode;

  SourceNodesByEdgeIdentifiersTargetNodeIdentifiersJoinNode = degas::LabelledEdgeTable::prepareStatementToReadSourceNodesByEdgeIdentifiersTargetNodeIdentifiersJoinNode(a4, a3, a2);
  return std::shared_ptr<degas::Statement>::operator=[abi:ne180100](this, *SourceNodesByEdgeIdentifiersTargetNodeIdentifiersJoinNode, SourceNodesByEdgeIdentifiersTargetNodeIdentifiersJoinNode[1]);
}

_QWORD *degas::LabelledEdgeCursor::setForSourceNodesFromEdgesTargetNodesJoinEdge(degas::LabelledEdgeCursor *this, Bitmap *a2, Bitmap *a3, const degas::LabelledEdgeTable *a4)
{
  uint64_t *SourceNodesByEdgeIdentifiersTargetNodeIdentifiersJoinEdge;

  SourceNodesByEdgeIdentifiersTargetNodeIdentifiersJoinEdge = degas::LabelledEdgeTable::prepareStatementToReadSourceNodesByEdgeIdentifiersTargetNodeIdentifiersJoinEdge(a4, a3, a2);
  return std::shared_ptr<degas::Statement>::operator=[abi:ne180100](this, *SourceNodesByEdgeIdentifiersTargetNodeIdentifiersJoinEdge, SourceNodesByEdgeIdentifiersTargetNodeIdentifiersJoinEdge[1]);
}

_QWORD *degas::LabelledEdgeCursor::setForSourceNodesFromEdgesTargetNodesFilterEdge(degas::LabelledEdgeCursor *this, Bitmap *a2, const degas::Bitmap *a3, const degas::LabelledEdgeTable *a4)
{
  uint64_t *SourceNodesByEdgeIdentifiersTargetNodeIdentifiersFilterEdge;

  SourceNodesByEdgeIdentifiersTargetNodeIdentifiersFilterEdge = degas::LabelledEdgeTable::prepareStatementToReadSourceNodesByEdgeIdentifiersTargetNodeIdentifiersFilterEdge(a4, a3, a2);
  return std::shared_ptr<degas::Statement>::operator=[abi:ne180100](this, *SourceNodesByEdgeIdentifiersTargetNodeIdentifiersFilterEdge, SourceNodesByEdgeIdentifiersTargetNodeIdentifiersFilterEdge[1]);
}

_QWORD *degas::LabelledEdgeCursor::setForSourceNodesFromEdgesTargetNodesFilterNode(degas::LabelledEdgeCursor *this, const degas::Bitmap *a2, Bitmap *a3, const degas::LabelledEdgeTable *a4)
{
  uint64_t *SourceNodesByEdgeIdentifiersTargetNodeIdentifiersFilterNode;

  SourceNodesByEdgeIdentifiersTargetNodeIdentifiersFilterNode = degas::LabelledEdgeTable::prepareStatementToReadSourceNodesByEdgeIdentifiersTargetNodeIdentifiersFilterNode(a4, a3, a2);
  return std::shared_ptr<degas::Statement>::operator=[abi:ne180100](this, *SourceNodesByEdgeIdentifiersTargetNodeIdentifiersFilterNode, SourceNodesByEdgeIdentifiersTargetNodeIdentifiersFilterNode[1]);
}

_QWORD *degas::LabelledEdgeCursor::setForEdgesFromLabelsSourceNodes(degas::LabelledEdgeCursor *this, Bitmap *a2, const degas::Bitmap *a3, const degas::LabelledEdgeTable *a4)
{
  uint64_t *EdgesByLabelIdentifiersSourceNodeIdentifiers;

  EdgesByLabelIdentifiersSourceNodeIdentifiers = degas::LabelledEdgeTable::prepareStatementToReadEdgesByLabelIdentifiersSourceNodeIdentifiers(a4, a3, a2);
  return std::shared_ptr<degas::Statement>::operator=[abi:ne180100](this, *EdgesByLabelIdentifiersSourceNodeIdentifiers, EdgesByLabelIdentifiersSourceNodeIdentifiers[1]);
}

_QWORD *degas::LabelledEdgeCursor::setForEdgesFromLabelsTargetNodes(degas::LabelledEdgeCursor *this, Bitmap *a2, const degas::Bitmap *a3, const degas::LabelledEdgeTable *a4)
{
  uint64_t *EdgesByLabelIdentifiersTargetNodeIdentifiers;

  EdgesByLabelIdentifiersTargetNodeIdentifiers = degas::LabelledEdgeTable::prepareStatementToReadEdgesByLabelIdentifiersTargetNodeIdentifiers(a4, a3, a2);
  return std::shared_ptr<degas::Statement>::operator=[abi:ne180100](this, *EdgesByLabelIdentifiersTargetNodeIdentifiers, EdgesByLabelIdentifiersTargetNodeIdentifiers[1]);
}

_QWORD *degas::LabelledEdgeCursor::setForEdgesFromSourceNodes(degas::LabelledEdgeCursor *this, Bitmap *a2, const degas::LabelledEdgeTable *a3)
{
  unsigned int v5;
  uint64_t v6;
  uint64_t *Statement;
  _QWORD v9[5];

  v5 = (*((unsigned __int8 *)a3 + 48) << 16) | 0xC10;
  v6 = *((_QWORD *)a3 + 5);
  v9[0] = MEMORY[0x1E0C809B0];
  v9[1] = 0x40000000;
  v9[2] = ___ZNK5degas17LabelledEdgeTable41readEdgesBySourceNodeIdentifiersStatementEv_block_invoke;
  v9[3] = &__block_descriptor_tmp_34_1905;
  v9[4] = a3;
  Statement = degas::StatementCache::getStatement(v6, v5, (uint64_t)v9);
  degas::Statement::bindBitmapPointer((sqlite3_stmt **)*Statement, 1, a2);
  return std::shared_ptr<degas::Statement>::operator=[abi:ne180100](this, *Statement, Statement[1]);
}

_QWORD *degas::LabelledEdgeCursor::setForEdgesFromTargetNodes(degas::LabelledEdgeCursor *this, Bitmap *a2, const degas::LabelledEdgeTable *a3)
{
  unsigned int v5;
  uint64_t v6;
  uint64_t *Statement;
  _QWORD v9[5];

  v5 = (*((unsigned __int8 *)a3 + 48) << 16) | 0xC11;
  v6 = *((_QWORD *)a3 + 5);
  v9[0] = MEMORY[0x1E0C809B0];
  v9[1] = 0x40000000;
  v9[2] = ___ZNK5degas17LabelledEdgeTable41readEdgesByTargetNodeIdentifiersStatementEv_block_invoke;
  v9[3] = &__block_descriptor_tmp_36;
  v9[4] = a3;
  Statement = degas::StatementCache::getStatement(v6, v5, (uint64_t)v9);
  degas::Statement::bindBitmapPointer((sqlite3_stmt **)*Statement, 1, a2);
  return std::shared_ptr<degas::Statement>::operator=[abi:ne180100](this, *Statement, Statement[1]);
}

_QWORD *degas::LabelledEdgeCursor::setForEdgesFromSourceNodesEdgeFilter(degas::LabelledEdgeCursor *this, Bitmap *a2, const degas::Bitmap *a3, const degas::LabelledEdgeTable *a4)
{
  uint64_t *EdgesBySourceNodeIdentifiersEdgeFilter;

  EdgesBySourceNodeIdentifiersEdgeFilter = degas::LabelledEdgeTable::prepareStatementToReadEdgesBySourceNodeIdentifiersEdgeFilter(a4, a2, a3);
  return std::shared_ptr<degas::Statement>::operator=[abi:ne180100](this, *EdgesBySourceNodeIdentifiersEdgeFilter, EdgesBySourceNodeIdentifiersEdgeFilter[1]);
}

_QWORD *degas::LabelledEdgeCursor::setForEdgesFromTargetNodesEdgeFilter(degas::LabelledEdgeCursor *this, Bitmap *a2, const degas::Bitmap *a3, const degas::LabelledEdgeTable *a4)
{
  uint64_t *EdgesByTargetNodeIdentifiersEdgeFilter;

  EdgesByTargetNodeIdentifiersEdgeFilter = degas::LabelledEdgeTable::prepareStatementToReadEdgesByTargetNodeIdentifiersEdgeFilter(a4, a2, a3);
  return std::shared_ptr<degas::Statement>::operator=[abi:ne180100](this, *EdgesByTargetNodeIdentifiersEdgeFilter, EdgesByTargetNodeIdentifiersEdgeFilter[1]);
}

_QWORD *degas::LabelledEdgeCursor::setForEdgesFromSourceNode(degas::LabelledEdgeCursor *this, sqlite3_int64 a2, const degas::LabelledEdgeTable *a3)
{
  unsigned int v5;
  uint64_t v6;
  uint64_t *Statement;
  _QWORD v9[5];

  v5 = (*((unsigned __int8 *)a3 + 48) << 16) | 0xC14;
  v6 = *((_QWORD *)a3 + 5);
  v9[0] = MEMORY[0x1E0C809B0];
  v9[1] = 0x40000000;
  v9[2] = ___ZNK5degas17LabelledEdgeTable40readEdgesBySourceNodeIdentifierStatementEv_block_invoke;
  v9[3] = &__block_descriptor_tmp_42;
  v9[4] = a3;
  Statement = degas::StatementCache::getStatement(v6, v5, (uint64_t)v9);
  degas::Statement::bindInteger((sqlite3_stmt **)*Statement, 1, a2);
  return std::shared_ptr<degas::Statement>::operator=[abi:ne180100](this, *Statement, Statement[1]);
}

_QWORD *degas::LabelledEdgeCursor::setForEdgesFromTargetNode(degas::LabelledEdgeCursor *this, sqlite3_int64 a2, const degas::LabelledEdgeTable *a3)
{
  unsigned int v5;
  uint64_t v6;
  uint64_t *Statement;
  _QWORD v9[5];

  v5 = (*((unsigned __int8 *)a3 + 48) << 16) | 0xC15;
  v6 = *((_QWORD *)a3 + 5);
  v9[0] = MEMORY[0x1E0C809B0];
  v9[1] = 0x40000000;
  v9[2] = ___ZNK5degas17LabelledEdgeTable40readEdgesByTargetNodeIdentifierStatementEv_block_invoke;
  v9[3] = &__block_descriptor_tmp_44;
  v9[4] = a3;
  Statement = degas::StatementCache::getStatement(v6, v5, (uint64_t)v9);
  degas::Statement::bindInteger((sqlite3_stmt **)*Statement, 1, a2);
  return std::shared_ptr<degas::Statement>::operator=[abi:ne180100](this, *Statement, Statement[1]);
}

_QWORD *degas::LabelledEdgeCursor::setForTargetNodesFromEdges(degas::LabelledEdgeCursor *this, Bitmap *a2, const degas::LabelledEdgeTable *a3)
{
  unsigned int v5;
  uint64_t v6;
  uint64_t *Statement;
  _QWORD v9[5];

  v5 = (*((unsigned __int8 *)a3 + 48) << 16) | 0xC16;
  v6 = *((_QWORD *)a3 + 5);
  v9[0] = MEMORY[0x1E0C809B0];
  v9[1] = 0x40000000;
  v9[2] = ___ZNK5degas17LabelledEdgeTable41readTargetNodesByEdgeIdentifiersStatementEv_block_invoke;
  v9[3] = &__block_descriptor_tmp_46;
  v9[4] = a3;
  Statement = degas::StatementCache::getStatement(v6, v5, (uint64_t)v9);
  degas::Statement::bindBitmapPointer((sqlite3_stmt **)*Statement, 1, a2);
  return std::shared_ptr<degas::Statement>::operator=[abi:ne180100](this, *Statement, Statement[1]);
}

_QWORD *degas::LabelledEdgeCursor::setForSourceNodesFromEdges(degas::LabelledEdgeCursor *this, Bitmap *a2, const degas::LabelledEdgeTable *a3)
{
  unsigned int v5;
  uint64_t v6;
  uint64_t *Statement;
  _QWORD v9[5];

  v5 = (*((unsigned __int8 *)a3 + 48) << 16) | 0xC17;
  v6 = *((_QWORD *)a3 + 5);
  v9[0] = MEMORY[0x1E0C809B0];
  v9[1] = 0x40000000;
  v9[2] = ___ZNK5degas17LabelledEdgeTable41readSourceNodesByEdgeIdentifiersStatementEv_block_invoke;
  v9[3] = &__block_descriptor_tmp_48;
  v9[4] = a3;
  Statement = degas::StatementCache::getStatement(v6, v5, (uint64_t)v9);
  degas::Statement::bindBitmapPointer((sqlite3_stmt **)*Statement, 1, a2);
  return std::shared_ptr<degas::Statement>::operator=[abi:ne180100](this, *Statement, Statement[1]);
}

const void *degas::LabelledEdgeCursor::identifiers(sqlite3_stmt ***this)
{
  return sqlite3_column_blob(**this, 0);
}

void degas::LabelledEdgeCursor::identifiers(sqlite3_stmt ***this, degas::Bitmap *a2)
{
  degas::Statement::bitmapColumnValue(*this, 0, a2);
}

uint64_t degas::MemoryAccountant::MemoryAccountant(uint64_t this)
{
  *(_QWORD *)this = 0;
  *(_QWORD *)(this + 8) = 0;
  *(_DWORD *)(this + 16) = 0;
  return this;
}

{
  *(_QWORD *)this = 0;
  *(_QWORD *)(this + 8) = 0;
  *(_DWORD *)(this + 16) = 0;
  return this;
}

uint64_t degas::MemoryAccountant::recordDiffs(uint64_t this, uint64_t a2, uint64_t a3)
{
  uint64_t v3;

  v3 = *(_QWORD *)(this + 8) + a3;
  *(_QWORD *)this += a2;
  *(_QWORD *)(this + 8) = v3;
  ++*(_DWORD *)(this + 16);
  return this;
}

void degas::MemoryAccountant::logTotals(degas::MemoryAccountant *this)
{
  void **v2;
  void **v3;
  int v4;
  void *__p[2];
  char v6;
  void *v7[2];
  char v8;
  uint8_t buf[4];
  void **v10;
  __int16 v11;
  void **v12;
  __int16 v13;
  int v14;
  uint64_t v15;

  v15 = *MEMORY[0x1E0C80C00];
  degas::humanReadableMemorySizeWithSize((degas *)v7, *(_QWORD *)this);
  degas::humanReadableMemorySizeWithSize((degas *)__p, *((_QWORD *)this + 1));
  if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_DEFAULT))
  {
    v2 = v7;
    if (v8 < 0)
      v2 = (void **)v7[0];
    v3 = __p;
    if (v6 < 0)
      v3 = (void **)__p[0];
    v4 = *((_DWORD *)this + 4);
    *(_DWORD *)buf = 136315650;
    v10 = v2;
    v11 = 2080;
    v12 = v3;
    v13 = 1024;
    v14 = v4;
    _os_log_impl(&dword_1CA0A5000, MEMORY[0x1E0C81028], OS_LOG_TYPE_DEFAULT, "Total: resident=%s, footprint=%s, count=%u", buf, 0x1Cu);
  }
  if (v6 < 0)
    operator delete(__p[0]);
  if (v8 < 0)
    operator delete(v7[0]);
}

void sub_1CA189CC4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a17 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t degas::humanReadableMemorySizeWithSize(degas *this, unint64_t a2)
{
  uint64_t v2;
  unsigned int v3;
  unint64_t v4;
  unint64_t v5;
  _QWORD *v6;
  const char *v7;
  size_t v8;
  _QWORD v10[11];
  char v11;
  uint64_t v12;

  if (a2 >= 0x100000)
  {
    v3 = 0;
    v4 = a2;
    do
    {
      v2 = v3 + 1;
      if (v3 > 4)
        break;
      v5 = v4 >> 30;
      v4 >>= 10;
      ++v3;
    }
    while (v5);
  }
  else
  {
    v2 = 0;
  }
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v10);
  v6 = (_QWORD *)std::ostream::operator<<();
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)" ", 1);
  v7 = off_1E83E4278[v2];
  v8 = strlen(v7);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)v7, v8);
  std::stringbuf::str();
  v10[0] = *MEMORY[0x1E0DE4F60];
  *(_QWORD *)((char *)v10 + *(_QWORD *)(v10[0] - 24)) = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 24);
  v10[1] = MEMORY[0x1E0DE4FB8] + 16;
  if (v11 < 0)
    operator delete((void *)v10[9]);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  return MEMORY[0x1CAA4AD98](&v12);
}

void sub_1CA189E0C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::ostringstream::~ostringstream((uint64_t)va);
  _Unwind_Resume(a1);
}

degas::MemoryEntry *degas::MemoryEntry::MemoryEntry(degas::MemoryEntry *this, degas::MemoryAccountant *a2, unint64_t *a3)
{
  *(_OWORD *)this = 0u;
  *((_OWORD *)this + 1) = 0u;
  *((_QWORD *)this + 4) = a2;
  degas::report_memory((degas::MemoryEntry *)((char *)this + 8), (unint64_t *)this, a3);
  return this;
}

{
  *(_OWORD *)this = 0u;
  *((_OWORD *)this + 1) = 0u;
  *((_QWORD *)this + 4) = a2;
  degas::report_memory((degas::MemoryEntry *)((char *)this + 8), (unint64_t *)this, a3);
  return this;
}

uint64_t degas::report_memory(degas *this, unint64_t *a2, unint64_t *a3)
{
  uint64_t result;
  uint64_t v6;
  mach_msg_type_number_t task_info_outCnt;
  integer_t task_info_out[4];
  uint64_t v9;
  unint64_t v10;

  task_info_outCnt = 93;
  result = task_info(*MEMORY[0x1E0C83DA0], 0x16u, task_info_out, &task_info_outCnt);
  if (!(_DWORD)result)
  {
    v6 = v9;
    *a2 = v10;
    *(_QWORD *)this = v6;
  }
  return result;
}

void degas::MemoryEntry::~MemoryEntry(uint64x2_t *this, uint64_t a2, unint64_t *a3)
{
  int64x2_t *v4;
  int8x16_t v5;
  uint8_t buf[4];
  uint64_t v7;
  __int16 v8;
  uint64_t v9;
  uint64_t v10;

  v10 = *MEMORY[0x1E0C80C00];
  degas::report_memory((degas *)&this[1].u64[1], (unint64_t *)&this[1], a3);
  v5 = (int8x16_t)vqsubq_u64(this[1], *this);
  if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 134218240;
    v7 = v5.i64[1];
    v8 = 2048;
    v9 = v5.i64[0];
    _os_log_impl(&dword_1CA0A5000, MEMORY[0x1E0C81028], OS_LOG_TYPE_DEFAULT, "entry: resident diff=%llu, footprint diff=%llu", buf, 0x16u);
  }
  v4 = (int64x2_t *)this[2].i64[0];
  *v4 = vaddq_s64(*v4, (int64x2_t)vextq_s8(v5, v5, 8uLL));
  ++v4[1].i32[0];
}

void sub_1CA189FEC(_Unwind_Exception *a1, int a2)
{
  if (!a2)
    _Unwind_Resume(a1);
  __clang_call_terminate(a1);
}

void sub_1CA18A0CC(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1CA18A268(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1CA18A34C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1CA18A430(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1CA18A514(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1CA18A5C8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;
  void *v11;

  _Unwind_Resume(a1);
}

void sub_1CA18A67C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;
  void *v11;

  _Unwind_Resume(a1);
}

void sub_1CA18A8F4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  _Unwind_Resume(a1);
}

void sub_1CA18ABA4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;

  _Unwind_Resume(a1);
}

void sub_1CA18AE0C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, degas::Statement *a18)
{
  void *v18;

  degas::Cursor::~Cursor(&a18);

  _Unwind_Resume(a1);
}

void sub_1CA18AFF0(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1CA18B070(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, objc_super a9)
{
  a9.super_class = (Class)KGDatabase;
  -[_Unwind_Exception dealloc](&a9, sel_dealloc);
  _Unwind_Resume(a1);
}

void sub_1CA18B1AC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  void *v14;

  if (a14 < 0)
    operator delete(__p);

  _Unwind_Resume(a1);
}

void sub_1CA18B2A0(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1CA18B604(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  void *v15;

  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

void sub_1CA18B834(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  void *v15;

  _Unwind_Resume(a1);
}

void sub_1CA18B8B8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_1CA18B984(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_1CA18BAC4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void **a17)
{
  void *v17;
  uint64_t v18;

  a17 = (void **)(v18 + 16);
  std::vector<degas::BitsetPtr>::__destroy_vector::operator()[abi:ne180100](&a17);

  _Unwind_Resume(a1);
}

void sub_1CA18BC40(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1CA18BCD0(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1CA18BE10(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  void *v15;

  _Unwind_Resume(a1);
}

void sub_1CA18BF80(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  void *v15;

  _Unwind_Resume(a1);
}

void sub_1CA18C134(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, degas::Statement *a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19)
{
  void *v19;

  degas::Cursor::~Cursor(&a15);
  a9 = (void **)&a19;
  std::vector<degas::BitsetPtr>::__destroy_vector::operator()[abi:ne180100](&a9);

  _Unwind_Resume(a1);
}

void sub_1CA18C2F0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, degas::Statement *a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19)
{
  void *v19;

  degas::Cursor::~Cursor(&a15);
  a9 = (void **)&a19;
  std::vector<degas::BitsetPtr>::__destroy_vector::operator()[abi:ne180100](&a9);

  _Unwind_Resume(a1);
}

void sub_1CA18C5CC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  void *v21;
  void *v22;

  if (a21 < 0)
    operator delete(__p);

  if (a15 < 0)
    operator delete(a10);
  _Unwind_Resume(a1);
}

void sub_1CA18C7B0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  void *v15;
  void *v16;

  if (a15 < 0)
    operator delete(__p);

  _Unwind_Resume(a1);
}

void sub_1CA18C854(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1CA18C9B0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, degas::Statement *a11)
{
  void *v11;
  void *v12;

  degas::Cursor::~Cursor((degas::Statement **)&a9);
  degas::Cursor::~Cursor(&a11);

  _Unwind_Resume(a1);
}

void sub_1CA18CA70(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, degas::Statement *a11)
{
  void *v11;
  void *v12;

  degas::Cursor::~Cursor((degas::Statement **)&a9);
  degas::Cursor::~Cursor(&a11);

  _Unwind_Resume(a1);
}

void sub_1CA18CB30(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, degas::Statement *a11)
{
  void *v11;
  void *v12;

  degas::Cursor::~Cursor((degas::Statement **)&a9);
  degas::Cursor::~Cursor(&a11);

  _Unwind_Resume(a1);
}

void sub_1CA18CBF0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, degas::Statement *a11)
{
  void *v11;
  void *v12;

  degas::Cursor::~Cursor((degas::Statement **)&a9);
  degas::Cursor::~Cursor(&a11);

  _Unwind_Resume(a1);
}

void sub_1CA18CCE8(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1CA18CDB4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_1CA18CE78(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_1CA18CF30(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_1CA18CFD8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_1CA18D084(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void sub_1CA18D108(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, degas::Statement *a9)
{
  void *v9;

  degas::Cursor::~Cursor(&a9);

  _Unwind_Resume(a1);
}

void sub_1CA18D3EC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11, void **a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,void **a27)
{
  void *v27;
  void *v28;

  a27 = a12;
  std::vector<degas::BitsetPtr>::__destroy_vector::operator()[abi:ne180100](&a27);

  _Unwind_Resume(a1);
}

void sub_1CA18D508(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_1CA18D5CC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_1CA18D684(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_1CA18D72C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_1CA18D7D8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void sub_1CA18D85C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, degas::Statement *a9)
{
  void *v9;

  degas::Cursor::~Cursor(&a9);

  _Unwind_Resume(a1);
}

void sub_1CA18DB70(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11, void **a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,void **a27)
{
  void *v27;
  void *v28;

  a27 = a12;
  std::vector<degas::BitsetPtr>::__destroy_vector::operator()[abi:ne180100](&a27);

  _Unwind_Resume(a1);
}

void sub_1CA18DD64(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,char a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29)
{
  void *v29;
  uint64_t v30;

  _Block_object_dispose(&a25, 8);
  _Block_object_dispose(&a29, 8);
  _Block_object_dispose((const void *)(v30 - 128), 8);

  _Unwind_Resume(a1);
}

void sub_1CA18DF30(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,char a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29)
{
  void *v29;
  uint64_t v30;

  _Block_object_dispose(&a25, 8);
  _Block_object_dispose(&a29, 8);
  _Block_object_dispose((const void *)(v30 - 128), 8);

  _Unwind_Resume(a1);
}

void sub_1CA18E124(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_1CA18E28C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1CA18E514(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  void *v14;

  _Unwind_Resume(a1);
}

void sub_1CA18E6FC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void **a17, uint64_t a18, uint64_t a19, uint64_t a20,char a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29)
{
  void *v29;

  _Block_object_dispose(&a17, 8);
  _Block_object_dispose(&a21, 8);
  a17 = (void **)&a29;
  std::vector<degas::BitsetPtr>::__destroy_vector::operator()[abi:ne180100](&a17);

  _Unwind_Resume(a1);
}

void sub_1CA18ECF8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,void **a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,char a55)
{
  void *v55;

  a33 = (void **)&a55;
  std::vector<degas::NodeCreationRequest>::__destroy_vector::operator()[abi:ne180100](&a33);

  _Unwind_Resume(a1);
}

void sub_1CA18EFD4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  void *v8;
  uint64_t v9;
  uint64_t v10;
  va_list va;

  va_start(va, a8);
  *(_QWORD *)(v10 - 80) = v9;
  std::vector<degas::BitsetPtr>::__destroy_vector::operator()[abi:ne180100]((void ***)(v10 - 80));
  std::vector<degas::BitsetPtr>::__destroy_vector::operator()[abi:ne180100]((void ***)va);

  _Unwind_Resume(a1);
}

void sub_1CA18F1A0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void **a17, uint64_t a18, uint64_t a19, uint64_t a20,char a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29)
{
  void *v29;

  _Block_object_dispose(&a17, 8);
  _Block_object_dispose(&a21, 8);
  a17 = (void **)&a29;
  std::vector<degas::BitsetPtr>::__destroy_vector::operator()[abi:ne180100](&a17);

  _Unwind_Resume(a1);
}

void sub_1CA18F814(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,void **a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,char a57)
{
  void *v57;

  a33 = (void **)&a57;
  std::vector<degas::EdgeCreationRequest>::__destroy_vector::operator()[abi:ne180100](&a33);

  _Unwind_Resume(a1);
}

void sub_1CA18FB28(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  void *v8;
  uint64_t v9;
  uint64_t v10;
  va_list va;

  va_start(va, a8);
  *(_QWORD *)(v10 - 112) = v9;
  std::vector<degas::BitsetPtr>::__destroy_vector::operator()[abi:ne180100]((void ***)(v10 - 112));
  std::vector<degas::BitsetPtr>::__destroy_vector::operator()[abi:ne180100]((void ***)va);

  _Unwind_Resume(a1);
}

void sub_1CA18FCE0(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1CA18FD80(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1CA19002C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  void *v22;
  void *v23;
  void *v24;

  if (a22 < 0)
    operator delete(__p);

  __p = &a13;
  std::vector<degas::BitsetPtr>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);

  _Unwind_Resume(a1);
}

void sub_1CA190138(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1CA1904E0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17, char a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29)
{
  void *v29;
  void *v30;
  void *v31;
  void *v32;
  void *v33;

  if (a15 < 0)
    operator delete(__p);
  if (a29 < 0)
    operator delete(a24);

  a24 = &a20;
  std::vector<degas::BitsetPtr>::__destroy_vector::operator()[abi:ne180100]((void ***)&a24);

  _Unwind_Resume(a1);
}

void sub_1CA190630(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_1CA190870(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  _Unwind_Resume(a1);
}

void sub_1CA190E70(_Unwind_Exception *a1)
{
  uint64_t v1;
  void *v2;

  *(_QWORD *)(v1 + 272) = v1 + 304;
  std::vector<degas::BitsetPtr>::__destroy_vector::operator()[abi:ne180100]((void ***)(v1 + 272));

  _Unwind_Resume(a1);
}

void sub_1CA190FB0(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1CA1913C8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, char a18, uint64_t a19, uint64_t a20)
{
  void *v20;
  void *v21;
  void *v22;
  void *v23;

  __p = &a20;
  std::vector<degas::BitsetPtr>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);

  _Unwind_Resume(a1);
}

void sub_1CA1914F4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_1CA191B84(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15, void *a16, void *a17, void *a18, void *a19, void *a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,void **a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49)
{
  void *v49;
  void *v50;

  if (v50)
    operator delete(v50);

  a45 = (void **)&a49;
  std::vector<degas::BitsetPtr>::__destroy_vector::operator()[abi:ne180100](&a45);

  _Unwind_Resume(a1);
}

void sub_1CA191D18(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_1CA1921A0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17, char a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t *__p,uint64_t a25,int a26,__int16 a27,char a28,char a29)
{
  void *v29;
  void *v30;
  void *v31;
  void *v32;
  void *v33;
  void *v34;

  if (a29 < 0)
    operator delete(__p);

  __p = &a20;
  std::vector<degas::BitsetPtr>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);

  _Unwind_Resume(a1);
}

void sub_1CA192308(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  _Unwind_Resume(a1);
}

void sub_1CA1925B0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  void *v14;
  void *v15;
  void *v16;

  _Unwind_Resume(a1);
}

void sub_1CA1926C4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  uint64_t v9;

  a9 = (void **)(v9 + 16);
  std::vector<degas::BitsetPtr>::__destroy_vector::operator()[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

void sub_1CA1927E8(_Unwind_Exception *a1)
{
  uint64_t v1;

  degas::Cursor::~Cursor((degas::Statement **)(v1 - 40));
  _Unwind_Resume(a1);
}

void sub_1CA192914(_Unwind_Exception *a1)
{
  uint64_t v1;

  degas::Cursor::~Cursor((degas::Statement **)(v1 - 40));
  _Unwind_Resume(a1);
}

void sub_1CA192A40(_Unwind_Exception *a1)
{
  uint64_t v1;

  degas::Cursor::~Cursor((degas::Statement **)(v1 - 40));
  _Unwind_Resume(a1);
}

void sub_1CA192C54(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9, uint64_t a10, void **a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19)
{
  void *v19;
  void *v20;

  a9 = (void **)&a13;
  std::vector<degas::BitsetPtr>::__destroy_vector::operator()[abi:ne180100](&a9);
  a11 = (void **)&a19;
  std::vector<degas::BitsetPtr>::__destroy_vector::operator()[abi:ne180100](&a11);

  _Unwind_Resume(a1);
}

void sub_1CA192F1C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9, uint64_t a10, void **a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19)
{
  void *v19;
  void *v20;

  a9 = (void **)&a13;
  std::vector<degas::BitsetPtr>::__destroy_vector::operator()[abi:ne180100](&a9);
  a11 = (void **)&a19;
  std::vector<degas::BitsetPtr>::__destroy_vector::operator()[abi:ne180100](&a11);

  _Unwind_Resume(a1);
}

void sub_1CA193094(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1CA19317C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_1CA193248(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1CA193330(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_1CA193428(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_1CA193530(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  _Unwind_Resume(a1);
}

void sub_1CA1937D8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  void *v14;
  void *v15;
  void *v16;

  _Unwind_Resume(a1);
}

void sub_1CA1938EC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  uint64_t v9;

  a9 = (void **)(v9 + 16);
  std::vector<degas::BitsetPtr>::__destroy_vector::operator()[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

void sub_1CA193AF8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9, uint64_t a10, void **a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19)
{
  void *v19;
  void *v20;

  a9 = (void **)&a13;
  std::vector<degas::BitsetPtr>::__destroy_vector::operator()[abi:ne180100](&a9);
  a11 = (void **)&a19;
  std::vector<degas::BitsetPtr>::__destroy_vector::operator()[abi:ne180100](&a11);

  _Unwind_Resume(a1);
}

void sub_1CA193DC0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9, uint64_t a10, void **a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19)
{
  void *v19;
  void *v20;

  a9 = (void **)&a13;
  std::vector<degas::BitsetPtr>::__destroy_vector::operator()[abi:ne180100](&a9);
  a11 = (void **)&a19;
  std::vector<degas::BitsetPtr>::__destroy_vector::operator()[abi:ne180100](&a11);

  _Unwind_Resume(a1);
}

void sub_1CA193F68(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9, char a10, uint64_t a11, uint64_t a12, char *a13)
{
  char *v13;
  char *v15;
  uint64_t v16;

  v15 = a13;
  if (a13 == v13)
  {
    v16 = 4;
    v15 = &a10;
  }
  else
  {
    if (!a13)
      goto LABEL_6;
    v16 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v15 + 8 * v16))();
LABEL_6:

  _Unwind_Resume(a1);
}

void sub_1CA19408C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  void *v11;
  uint64_t v12;

  *(_QWORD *)(v12 - 40) = &a11;
  std::vector<degas::BitsetPtr>::__destroy_vector::operator()[abi:ne180100]((void ***)(v12 - 40));

  _Unwind_Resume(a1);
}

void sub_1CA19418C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  void *v11;
  uint64_t v12;

  *(_QWORD *)(v12 - 40) = &a11;
  std::vector<degas::BitsetPtr>::__destroy_vector::operator()[abi:ne180100]((void ***)(v12 - 40));

  _Unwind_Resume(a1);
}

void sub_1CA1942B8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void **a16)
{
  void *v16;
  void *v17;

  a16 = (void **)&a11;
  std::vector<degas::BitsetPtr>::__destroy_vector::operator()[abi:ne180100](&a16);

  _Unwind_Resume(a1);
}

void sub_1CA1943E8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void **a16)
{
  void *v16;
  void *v17;

  a16 = (void **)&a11;
  std::vector<degas::BitsetPtr>::__destroy_vector::operator()[abi:ne180100](&a16);

  _Unwind_Resume(a1);
}

void sub_1CA19456C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void **a16)
{
  void *v16;
  void *v17;
  void *v18;

  a16 = (void **)&a11;
  std::vector<degas::BitsetPtr>::__destroy_vector::operator()[abi:ne180100](&a16);

  _Unwind_Resume(a1);
}

void sub_1CA19468C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_1CA194730(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  void *v11;
  uint64_t v12;

  *(_QWORD *)(v12 - 40) = &a11;
  std::vector<degas::BitsetPtr>::__destroy_vector::operator()[abi:ne180100]((void ***)(v12 - 40));

  _Unwind_Resume(a1);
}

void sub_1CA19481C(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v2 - 40) = v1 + 16;
  std::vector<degas::BitsetPtr>::__destroy_vector::operator()[abi:ne180100]((void ***)(v2 - 40));
  _Unwind_Resume(a1);
}

void sub_1CA194954(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1CA194AD4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1CA194C3C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1CA1956A0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, void *a14, void *a15, void *a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,char a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,char a46,uint64_t a47,uint64_t a48,char a49,uint64_t a50,uint64_t a51,char a52,uint64_t a53,void *__p,uint64_t a55,int a56,__int16 a57,char a58,char a59)
{

  _Unwind_Resume(a1);
}

void sub_1CA195C64(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  void *v18;
  void *v19;
  void *v20;
  uint64_t v21;

  operator delete(v19);
  MEMORY[0x1CAA4ADC8](v21, 0x10F3C403BDC16CCLL);
  if (a18 < 0)
    operator delete(__p);

  _Unwind_Resume(a1);
}

void sub_1CA1961E4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29,char a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t *a36,uint64_t a37,int a38,__int16 a39,char a40,char a41)
{
  void *v41;
  void *v42;
  void *v43;
  void **v44;
  int v45;
  uint64_t v46;
  void *v47;

  if (*(char *)(v46 + 55) < 0)
    operator delete(*v44);
  operator delete(__p);
  if (v45 < 0)
    operator delete(a18);
  MEMORY[0x1CAA4ADC8](v46, 0x10F3C40C42C01C0);
  if (a29 < 0)
    operator delete(a24);
  if (a41 < 0)
    operator delete(a36);

  a36 = &a32;
  std::vector<degas::BitsetPtr>::__destroy_vector::operator()[abi:ne180100]((void ***)&a36);

  _Unwind_Resume(a1);
}

void sub_1CA19659C(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1CAA4ADC8](v1, 0x10E1C406FDA200FLL);
  _Unwind_Resume(a1);
}

void sub_1CA1967F8(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1CAA4ADC8](v1, 0x10E1C406FDA200FLL);
  _Unwind_Resume(a1);
}

void sub_1CA197048(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void **a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31)
{
  void *v31;
  uint64_t v32;
  uint64_t v33;

  MEMORY[0x1CAA4ADC8](v32, 0xA1C4030951706);
  *(_QWORD *)(v33 - 88) = &a9;
  std::vector<std::shared_ptr<degas::Predicate>>::__destroy_vector::operator()[abi:ne180100]((void ***)(v33 - 88));
  _Block_object_dispose(&a19, 8);
  std::vector<std::shared_ptr<degas::Predicate>>::__destroy_vector::operator()[abi:ne180100](&a9);
  a19 = (void **)&a31;
  std::vector<degas::BitsetPtr>::__destroy_vector::operator()[abi:ne180100](&a19);
  a19 = (void **)(v33 - 176);
  std::vector<degas::BitsetPtr>::__destroy_vector::operator()[abi:ne180100](&a19);
  std::shared_ptr<degas::Predicate>::~shared_ptr[abi:ne180100](v33 - 144);
  std::shared_ptr<degas::Predicate>::~shared_ptr[abi:ne180100](v33 - 128);
  std::shared_ptr<degas::Predicate>::~shared_ptr[abi:ne180100](v33 - 112);

  _Unwind_Resume(a1);
}

void sub_1CA1972D4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  void *v8;
  uint64_t v9;
  va_list va;

  va_start(va, a8);
  std::shared_ptr<degas::Predicate>::~shared_ptr[abi:ne180100]((uint64_t)va);
  std::shared_ptr<degas::Predicate>::~shared_ptr[abi:ne180100](v9 - 72);

  _Unwind_Resume(a1);
}

void sub_1CA1974B0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  void *v8;
  uint64_t v9;
  va_list va;

  va_start(va, a8);
  std::shared_ptr<degas::Predicate>::~shared_ptr[abi:ne180100]((uint64_t)va);
  std::shared_ptr<degas::Predicate>::~shared_ptr[abi:ne180100](v9 - 72);

  _Unwind_Resume(a1);
}

_QWORD *std::shared_ptr<degas::Predicate>::shared_ptr[abi:ne180100]<degas::NoPredicate,void>(_QWORD *a1, uint64_t a2)
{
  _QWORD *v4;

  *a1 = a2;
  v4 = (_QWORD *)operator new();
  *v4 = &off_1E83E4238;
  v4[1] = 0;
  v4[2] = 0;
  v4[3] = a2;
  a1[1] = v4;
  return a1;
}

void sub_1CA19779C(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (v1)
    (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(exception_object);
}

__n128 __Block_byref_object_copy__106(__n128 *a1, __n128 *a2)
{
  __n128 result;

  a1[3].n128_u64[0] = 0;
  a1[3].n128_u64[1] = 0;
  a1[4].n128_u64[0] = 0;
  result = a2[3];
  a1[3] = result;
  a1[4].n128_u64[0] = a2[4].n128_u64[0];
  a2[3].n128_u64[0] = 0;
  a2[3].n128_u64[1] = 0;
  a2[4].n128_u64[0] = 0;
  return result;
}

void __Block_byref_object_dispose__107(uint64_t a1)
{
  void **v1;

  v1 = (void **)(a1 + 48);
  std::vector<std::shared_ptr<degas::Predicate>>::__destroy_vector::operator()[abi:ne180100](&v1);
}

void sub_1CA197AF4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  void *v5;
  va_list va;

  va_start(va, a5);
  std::shared_ptr<degas::Predicate>::~shared_ptr[abi:ne180100]((uint64_t)va);

  _Unwind_Resume(a1);
}

void std::shared_ptr<degas::Predicate>::reset[abi:ne180100]<degas::IntersectPredicate,void>(_QWORD *a1, uint64_t a2)
{
  std::__shared_weak_count *v3;
  __int128 v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  __int128 v7;

  std::shared_ptr<degas::Predicate>::shared_ptr[abi:ne180100]<degas::IntersectPredicate,void>(&v7, a2);
  v3 = (std::__shared_weak_count *)a1[1];
  v4 = v7;
  *(_QWORD *)&v7 = *a1;
  *((_QWORD *)&v7 + 1) = v3;
  *(_OWORD *)a1 = v4;
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v6 = __ldaxr(p_shared_owners);
    while (__stlxr(v6 - 1, p_shared_owners));
    if (!v6)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
}

void std::vector<std::shared_ptr<degas::Predicate>>::push_back[abi:ne180100](char **a1, __int128 *a2)
{
  char *v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t *v7;
  unint64_t v8;
  char *v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  char *v14;
  uint64_t v15;
  char *v16;
  __int128 v17;
  unint64_t *v18;
  unint64_t v19;
  char *v20;
  char *v21;
  char *v22;
  __int128 v23;
  int64x2_t v24;
  uint64_t v25;
  void *v26;

  v4 = a1[1];
  v5 = (unint64_t)a1[2];
  if ((unint64_t)v4 >= v5)
  {
    v10 = (v4 - *a1) >> 4;
    v11 = v10 + 1;
    if ((unint64_t)(v10 + 1) >> 60)
      std::vector<unsigned long long>::__throw_length_error[abi:ne180100]();
    v12 = v5 - (_QWORD)*a1;
    if (v12 >> 3 > v11)
      v11 = v12 >> 3;
    if ((unint64_t)v12 >= 0x7FFFFFFFFFFFFFF0)
      v13 = 0xFFFFFFFFFFFFFFFLL;
    else
      v13 = v11;
    v14 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<degas::Predicate>>>(v13);
    v16 = &v14[16 * v10];
    v17 = *a2;
    *(_OWORD *)v16 = *a2;
    if (*((_QWORD *)&v17 + 1))
    {
      v18 = (unint64_t *)(*((_QWORD *)&v17 + 1) + 8);
      do
        v19 = __ldxr(v18);
      while (__stxr(v19 + 1, v18));
    }
    v21 = *a1;
    v20 = a1[1];
    if (v20 == *a1)
    {
      v24 = vdupq_n_s64((unint64_t)v20);
      v22 = &v14[16 * v10];
    }
    else
    {
      v22 = &v14[16 * v10];
      do
      {
        v23 = *((_OWORD *)v20 - 1);
        v20 -= 16;
        *((_OWORD *)v22 - 1) = v23;
        v22 -= 16;
        *(_QWORD *)v20 = 0;
        *((_QWORD *)v20 + 1) = 0;
      }
      while (v20 != v21);
      v24 = *(int64x2_t *)a1;
    }
    v9 = v16 + 16;
    *a1 = v22;
    a1[1] = v16 + 16;
    a1[2] = &v14[16 * v15];
    v25 = v24.i64[1];
    v26 = (void *)v24.i64[0];
    while ((void *)v25 != v26)
      v25 = std::shared_ptr<degas::Predicate>::~shared_ptr[abi:ne180100](v25 - 16);
    if (v26)
      operator delete(v26);
  }
  else
  {
    v6 = *((_QWORD *)a2 + 1);
    *(_QWORD *)v4 = *(_QWORD *)a2;
    *((_QWORD *)v4 + 1) = v6;
    if (v6)
    {
      v7 = (unint64_t *)(v6 + 8);
      do
        v8 = __ldxr(v7);
      while (__stxr(v8 + 1, v7));
    }
    v9 = v4 + 16;
  }
  a1[1] = v9;
}

_QWORD *std::shared_ptr<degas::Predicate>::shared_ptr[abi:ne180100]<degas::IntersectPredicate,void>(_QWORD *a1, uint64_t a2)
{
  _QWORD *v4;

  *a1 = a2;
  v4 = (_QWORD *)operator new();
  *v4 = &off_1E83E5830;
  v4[1] = 0;
  v4[2] = 0;
  v4[3] = a2;
  a1[1] = v4;
  return a1;
}

void sub_1CA197D4C(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (v1)
    (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(exception_object);
}

void std::vector<std::shared_ptr<degas::Predicate>>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  void **v1;
  void *v2;
  uint64_t v4;
  void *v5;

  v1 = *a1;
  v2 = **a1;
  if (v2)
  {
    v4 = (uint64_t)v1[1];
    v5 = v2;
    if ((void *)v4 != v2)
    {
      do
        v4 = std::shared_ptr<degas::Predicate>::~shared_ptr[abi:ne180100](v4 - 16);
      while ((void *)v4 != v2);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void std::__shared_ptr_pointer<degas::IntersectPredicate *,std::shared_ptr<degas::Predicate>::__shared_ptr_default_delete<degas::Predicate,degas::IntersectPredicate>,std::allocator<degas::IntersectPredicate>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1CAA4ADC8);
}

uint64_t std::__shared_ptr_pointer<degas::IntersectPredicate *,std::shared_ptr<degas::Predicate>::__shared_ptr_default_delete<degas::Predicate,degas::IntersectPredicate>,std::allocator<degas::IntersectPredicate>>::__on_zero_shared(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 24);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

uint64_t std::__shared_ptr_pointer<degas::IntersectPredicate *,std::shared_ptr<degas::Predicate>::__shared_ptr_default_delete<degas::Predicate,degas::IntersectPredicate>,std::allocator<degas::IntersectPredicate>>::__get_deleter(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(_QWORD *)(a2 + 8), 0x80000001CA1FE7B1))
    return a1 + 24;
  else
    return 0;
}

void *std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<degas::Predicate>>>(unint64_t a1)
{
  if (a1 >> 60)
    std::__throw_bad_array_new_length[abi:ne180100]();
  return operator new(16 * a1);
}

void std::__shared_ptr_pointer<degas::NoPredicate *,std::shared_ptr<degas::Predicate>::__shared_ptr_default_delete<degas::Predicate,degas::NoPredicate>,std::allocator<degas::NoPredicate>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1CAA4ADC8);
}

uint64_t std::__shared_ptr_pointer<degas::NoPredicate *,std::shared_ptr<degas::Predicate>::__shared_ptr_default_delete<degas::Predicate,degas::NoPredicate>,std::allocator<degas::NoPredicate>>::__on_zero_shared(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 24);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

uint64_t std::__shared_ptr_pointer<degas::NoPredicate *,std::shared_ptr<degas::Predicate>::__shared_ptr_default_delete<degas::Predicate,degas::NoPredicate>,std::allocator<degas::NoPredicate>>::__get_deleter(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(_QWORD *)(a2 + 8), 0x80000001CA1FE19DLL))
    return a1 + 24;
  else
    return 0;
}

_QWORD *std::shared_ptr<degas::Predicate>::shared_ptr[abi:ne180100]<degas::AnyLabelsNodePredicate,void>(_QWORD *a1, uint64_t a2)
{
  _QWORD *v4;

  *a1 = a2;
  v4 = (_QWORD *)operator new();
  *v4 = &off_1E83E4198;
  v4[1] = 0;
  v4[2] = 0;
  v4[3] = a2;
  a1[1] = v4;
  return a1;
}

void sub_1CA197F6C(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (v1)
    (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(exception_object);
}

_QWORD *std::shared_ptr<degas::Predicate>::shared_ptr[abi:ne180100]<degas::AnyLabelsEdgePredicate,void>(_QWORD *a1, uint64_t a2)
{
  _QWORD *v4;

  *a1 = a2;
  v4 = (_QWORD *)operator new();
  *v4 = &off_1E83E41E8;
  v4[1] = 0;
  v4[2] = 0;
  v4[3] = a2;
  a1[1] = v4;
  return a1;
}

void sub_1CA197FE0(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (v1)
    (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(exception_object);
}

void std::__shared_ptr_pointer<degas::AnyLabelsEdgePredicate *,std::shared_ptr<degas::Predicate>::__shared_ptr_default_delete<degas::Predicate,degas::AnyLabelsEdgePredicate>,std::allocator<degas::AnyLabelsEdgePredicate>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1CAA4ADC8);
}

uint64_t std::__shared_ptr_pointer<degas::AnyLabelsEdgePredicate *,std::shared_ptr<degas::Predicate>::__shared_ptr_default_delete<degas::Predicate,degas::AnyLabelsEdgePredicate>,std::allocator<degas::AnyLabelsEdgePredicate>>::__on_zero_shared(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 24);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

uint64_t std::__shared_ptr_pointer<degas::AnyLabelsEdgePredicate *,std::shared_ptr<degas::Predicate>::__shared_ptr_default_delete<degas::Predicate,degas::AnyLabelsEdgePredicate>,std::allocator<degas::AnyLabelsEdgePredicate>>::__get_deleter(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(_QWORD *)(a2 + 8), 0x80000001CA1FE0A5))
    return a1 + 24;
  else
    return 0;
}

void std::__shared_ptr_pointer<degas::AnyLabelsNodePredicate *,std::shared_ptr<degas::Predicate>::__shared_ptr_default_delete<degas::Predicate,degas::AnyLabelsNodePredicate>,std::allocator<degas::AnyLabelsNodePredicate>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1CAA4ADC8);
}

uint64_t std::__shared_ptr_pointer<degas::AnyLabelsNodePredicate *,std::shared_ptr<degas::Predicate>::__shared_ptr_default_delete<degas::Predicate,degas::AnyLabelsNodePredicate>,std::allocator<degas::AnyLabelsNodePredicate>>::__on_zero_shared(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 24);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

uint64_t std::__shared_ptr_pointer<degas::AnyLabelsNodePredicate *,std::shared_ptr<degas::Predicate>::__shared_ptr_default_delete<degas::Predicate,degas::AnyLabelsNodePredicate>,std::allocator<degas::AnyLabelsNodePredicate>>::__get_deleter(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(_QWORD *)(a2 + 8), 0x80000001CA1FDFA2))
    return a1 + 24;
  else
    return 0;
}

_QWORD *std::shared_ptr<degas::Predicate>::shared_ptr[abi:ne180100]<degas::AllLabelsNodePredicate,void>(_QWORD *a1, uint64_t a2)
{
  _QWORD *v4;

  *a1 = a2;
  v4 = (_QWORD *)operator new();
  *v4 = &off_1E83E40F8;
  v4[1] = 0;
  v4[2] = 0;
  v4[3] = a2;
  a1[1] = v4;
  return a1;
}

void sub_1CA19815C(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (v1)
    (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(exception_object);
}

_QWORD *std::shared_ptr<degas::Predicate>::shared_ptr[abi:ne180100]<degas::AllLabelsEdgePredicate,void>(_QWORD *a1, uint64_t a2)
{
  _QWORD *v4;

  *a1 = a2;
  v4 = (_QWORD *)operator new();
  *v4 = &off_1E83E4148;
  v4[1] = 0;
  v4[2] = 0;
  v4[3] = a2;
  a1[1] = v4;
  return a1;
}

void sub_1CA1981D0(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (v1)
    (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(exception_object);
}

void std::__shared_ptr_pointer<degas::AllLabelsEdgePredicate *,std::shared_ptr<degas::Predicate>::__shared_ptr_default_delete<degas::Predicate,degas::AllLabelsEdgePredicate>,std::allocator<degas::AllLabelsEdgePredicate>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1CAA4ADC8);
}

uint64_t std::__shared_ptr_pointer<degas::AllLabelsEdgePredicate *,std::shared_ptr<degas::Predicate>::__shared_ptr_default_delete<degas::Predicate,degas::AllLabelsEdgePredicate>,std::allocator<degas::AllLabelsEdgePredicate>>::__on_zero_shared(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 24);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

uint64_t std::__shared_ptr_pointer<degas::AllLabelsEdgePredicate *,std::shared_ptr<degas::Predicate>::__shared_ptr_default_delete<degas::Predicate,degas::AllLabelsEdgePredicate>,std::allocator<degas::AllLabelsEdgePredicate>>::__get_deleter(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(_QWORD *)(a2 + 8), 0x80000001CA1FDE9FLL))
    return a1 + 24;
  else
    return 0;
}

void std::__shared_ptr_pointer<degas::AllLabelsNodePredicate *,std::shared_ptr<degas::Predicate>::__shared_ptr_default_delete<degas::Predicate,degas::AllLabelsNodePredicate>,std::allocator<degas::AllLabelsNodePredicate>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1CAA4ADC8);
}

uint64_t std::__shared_ptr_pointer<degas::AllLabelsNodePredicate *,std::shared_ptr<degas::Predicate>::__shared_ptr_default_delete<degas::Predicate,degas::AllLabelsNodePredicate>,std::allocator<degas::AllLabelsNodePredicate>>::__on_zero_shared(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 24);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

uint64_t std::__shared_ptr_pointer<degas::AllLabelsNodePredicate *,std::shared_ptr<degas::Predicate>::__shared_ptr_default_delete<degas::Predicate,degas::AllLabelsNodePredicate>,std::allocator<degas::AllLabelsNodePredicate>>::__get_deleter(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(_QWORD *)(a2 + 8), 0x80000001CA1FDD9CLL))
    return a1 + 24;
  else
    return 0;
}

unint64_t rowCountForElementType(int a1, degas::Database *this)
{
  if ((a1 - 3) < 2)
    return 0;
  if (a1 == 2)
    return degas::Database::edgeCount(this);
  if (a1 != 1)
    abort();
  return degas::Database::nodeCount(this);
}

void stringNSToStd(NSString *a1, void *a2)
{
  id v3;
  unint64_t v4;
  uint64_t v5;
  size_t v6;
  unint64_t v7;
  id v8;
  void *v9;
  id v10;
  _QWORD v11[2];

  v11[1] = *MEMORY[0x1E0C80C00];
  v3 = a2;
  v4 = objc_msgSend(v3, "lengthOfBytesUsingEncoding:", 4);
  v6 = v4;
  v7 = v4 + 1;
  if (v4 > 0x3FF)
  {
    v9 = malloc_type_malloc(v4 + 1, 0x1C0BEC6EuLL);
    v10 = v3;
    if ((objc_msgSend(v10, "getCString:maxLength:encoding:", v9, v7, 4) & 1) == 0)
      __assert_rtn("stringNSToChars", "KGDatabase.mm", 96, "success");

    std::string::basic_string[abi:ne180100](a1, v9, v6);
    free(v9);
  }
  else
  {
    MEMORY[0x1E0C80A78](v4, v5);
    v8 = v3;
    if ((objc_msgSend(v8, "getCString:maxLength:encoding:", (char *)v11 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0), v7, 4) & 1) == 0)
      __assert_rtn("stringNSToChars", "KGDatabase.mm", 96, "success");

    std::string::basic_string[abi:ne180100](a1, (char *)v11 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0), v6);
  }

}

void sub_1CA1984B8(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void std::__shared_ptr_pointer<degas::RangePredicate<std::string> *,std::shared_ptr<degas::Predicate>::__shared_ptr_default_delete<degas::Predicate,degas::RangePredicate<std::string>>,std::allocator<degas::RangePredicate<std::string>>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1CAA4ADC8);
}

uint64_t std::__shared_ptr_pointer<degas::RangePredicate<std::string> *,std::shared_ptr<degas::Predicate>::__shared_ptr_default_delete<degas::Predicate,degas::RangePredicate<std::string>>,std::allocator<degas::RangePredicate<std::string>>>::__on_zero_shared(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 24);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

uint64_t std::__shared_ptr_pointer<degas::RangePredicate<std::string> *,std::shared_ptr<degas::Predicate>::__shared_ptr_default_delete<degas::Predicate,degas::RangePredicate<std::string>>,std::allocator<degas::RangePredicate<std::string>>>::__get_deleter(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(_QWORD *)(a2 + 8), 0x80000001CA1FDC65))
    return a1 + 24;
  else
    return 0;
}

uint64_t degas::RangePredicate<std::string>::~RangePredicate(uint64_t a1)
{
  *(_QWORD *)a1 = off_1E83E4038;
  if (*(char *)(a1 + 79) < 0)
    operator delete(*(void **)(a1 + 56));
  if (*(char *)(a1 + 55) < 0)
    operator delete(*(void **)(a1 + 32));
  return a1;
}

void degas::RangePredicate<std::string>::~RangePredicate(uint64_t a1)
{
  *(_QWORD *)a1 = off_1E83E4038;
  if (*(char *)(a1 + 79) < 0)
    operator delete(*(void **)(a1 + 56));
  if (*(char *)(a1 + 55) < 0)
    operator delete(*(void **)(a1 + 32));
  JUMPOUT(0x1CAA4ADC8);
}

uint64_t degas::RangePredicate<std::string>::elements(uint64_t a1, degas::Bitmap *a2)
{
  uint64_t v2;
  uint64_t v4[2];

  v2 = *(_QWORD *)(a1 + 80);
  v4[0] = *(_QWORD *)(a1 + 8);
  v4[1] = v2;
  return degas::AttributeQuery::elementsForAttributeValueRange(v4, *(_QWORD *)(a1 + 24), a1 + 32, a1 + 56, *(_DWORD *)(a1 + 16), a2);
}

uint64_t degas::RangePredicate<std::string>::filterElements(uint64_t a1, Bitmap *a2, degas::AggregateValueCursor *a3)
{
  uint64_t v3;
  uint64_t v5[2];

  v3 = *(_QWORD *)(a1 + 80);
  v5[0] = *(_QWORD *)(a1 + 8);
  v5[1] = v3;
  return degas::AttributeQuery::filterElementsForAttributeValueRange(v5, *(_QWORD *)(a1 + 24), a1 + 32, a1 + 56, *(_DWORD *)(a1 + 16), a2, a3);
}

void degas::RangePredicate<std::string>::decomposeLabelsPredicate(_QWORD *a1@<X1>, _QWORD *a2@<X8>)
{
  uint64_t v2;
  unint64_t *v3;
  unint64_t v4;

  *a2 = 0;
  a2[1] = 0;
  v2 = a1[1];
  a2[2] = *a1;
  a2[3] = v2;
  if (v2)
  {
    v3 = (unint64_t *)(v2 + 8);
    do
      v4 = __ldxr(v3);
    while (__stxr(v4 + 1, v3));
  }
}

uint64_t degas::RangePredicate<std::string>::allLabelIds()
{
  return 0;
}

uint64_t degas::RangePredicate<std::string>::isTrivialYes()
{
  return 0;
}

uint64_t degas::RangePredicate<std::string>::isTrivialNo()
{
  return 0;
}

void degas::RangePredicate<std::string>::debugDescription(uint64_t a1, uint64_t a2)
{
  int v3;
  uint64_t v4;
  uint64_t v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  void **v9;
  uint64_t v10;
  int v11;
  void **v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  void *v17;
  char v18;
  void *__p[2];
  unsigned __int8 v20;
  _QWORD v21[11];
  char v22;
  uint64_t v23;
  _QWORD v24[11];
  char v25;
  uint64_t v26;
  void **v27;
  uint64_t v28;
  uint64_t v29;

  v27 = 0;
  v28 = 0;
  v29 = 0;
  degas::Database::getAttributeProperties(a2, *(_QWORD *)(a1 + 24), (uint64_t)&v27);
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v24);
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v21);
  v3 = *(char *)(a1 + 55);
  if (v3 >= 0)
    v4 = a1 + 32;
  else
    v4 = *(_QWORD *)(a1 + 32);
  if (v3 >= 0)
    v5 = *(unsigned __int8 *)(a1 + 55);
  else
    v5 = *(_QWORD *)(a1 + 40);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v21, v4, v5);
  LOBYTE(__p[0]) = 44;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v21, (uint64_t)__p, 1);
  v6 = *(char *)(a1 + 79);
  if (v6 >= 0)
    v7 = a1 + 56;
  else
    v7 = *(_QWORD *)(a1 + 56);
  if (v6 >= 0)
    v8 = *(unsigned __int8 *)(a1 + 79);
  else
    v8 = *(_QWORD *)(a1 + 64);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v21, v7, v8);
  if (v29 >= 0)
    v9 = (void **)&v27;
  else
    v9 = v27;
  if (v29 >= 0)
    v10 = HIBYTE(v29);
  else
    v10 = v28;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v24, (uint64_t)v9, v10);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v24, (uint64_t)"in ", 3);
  v11 = *(_DWORD *)(a1 + 16);
  std::stringbuf::str();
  degas::TernaryOperatorDescription(v11, (uint64_t)&v17);
  if ((v20 & 0x80u) == 0)
    v12 = __p;
  else
    v12 = (void **)__p[0];
  if ((v20 & 0x80u) == 0)
    v13 = v20;
  else
    v13 = (uint64_t)__p[1];
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v24, (uint64_t)v12, v13);
  if ((char)v20 < 0)
    operator delete(__p[0]);
  if (v18 < 0)
    operator delete(v17);
  std::stringbuf::str();
  v14 = *MEMORY[0x1E0DE4F60];
  v21[0] = v14;
  v15 = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 24);
  *(_QWORD *)((char *)v21 + *(_QWORD *)(v14 - 24)) = v15;
  v16 = MEMORY[0x1E0DE4FB8] + 16;
  v21[1] = MEMORY[0x1E0DE4FB8] + 16;
  if (v22 < 0)
    operator delete((void *)v21[9]);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x1CAA4AD98](&v23);
  v24[0] = v14;
  *(_QWORD *)((char *)v24 + *(_QWORD *)(v14 - 24)) = v15;
  v24[1] = v16;
  if (v25 < 0)
    operator delete((void *)v24[9]);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x1CAA4AD98](&v26);
  if (SHIBYTE(v29) < 0)
    operator delete(v27);
}

void sub_1CA198918(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,char a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,char a55)
{
  uint64_t v55;

  if (a21 < 0)
    operator delete(__p);
  if (a15 < 0)
    operator delete(a10);
  std::ostringstream::~ostringstream((uint64_t)&a22);
  std::ostringstream::~ostringstream((uint64_t)&a55);
  if (*(char *)(v55 - 65) < 0)
    operator delete(*(void **)(v55 - 88));
  _Unwind_Resume(a1);
}

_QWORD *std::string::basic_string[abi:ne180100](_QWORD *__dst, void *__src, size_t __len)
{
  void *v6;
  size_t v7;
  size_t v8;

  if (__len >= 0x7FFFFFFFFFFFFFF8)
    std::string::__throw_length_error[abi:ne180100]();
  if (__len >= 0x17)
  {
    v7 = (__len & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((__len | 7) != 0x17)
      v7 = __len | 7;
    v8 = v7 + 1;
    v6 = operator new(v7 + 1);
    __dst[1] = __len;
    __dst[2] = v8 | 0x8000000000000000;
    *__dst = v6;
  }
  else
  {
    *((_BYTE *)__dst + 23) = __len;
    v6 = __dst;
    if (!__len)
      goto LABEL_9;
  }
  memmove(v6, __src, __len);
LABEL_9:
  *((_BYTE *)v6 + __len) = 0;
  return __dst;
}

void std::__shared_ptr_pointer<degas::RangePredicate<double> *,std::shared_ptr<degas::Predicate>::__shared_ptr_default_delete<degas::Predicate,degas::RangePredicate<double>>,std::allocator<degas::RangePredicate<double>>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1CAA4ADC8);
}

uint64_t std::__shared_ptr_pointer<degas::RangePredicate<double> *,std::shared_ptr<degas::Predicate>::__shared_ptr_default_delete<degas::Predicate,degas::RangePredicate<double>>,std::allocator<degas::RangePredicate<double>>>::__on_zero_shared(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 24);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

uint64_t std::__shared_ptr_pointer<degas::RangePredicate<double> *,std::shared_ptr<degas::Predicate>::__shared_ptr_default_delete<degas::Predicate,degas::RangePredicate<double>>,std::allocator<degas::RangePredicate<double>>>::__get_deleter(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(_QWORD *)(a2 + 8), 0x80000001CA1FDAE1))
    return a1 + 24;
  else
    return 0;
}

void degas::RangePredicate<double>::~RangePredicate()
{
  JUMPOUT(0x1CAA4ADC8);
}

uint64_t degas::RangePredicate<double>::elements(uint64_t a1, degas::Bitmap *a2)
{
  uint64_t v2;
  uint64_t v4[2];

  v2 = *(_QWORD *)(a1 + 48);
  v4[0] = *(_QWORD *)(a1 + 8);
  v4[1] = v2;
  return degas::AttributeQuery::elementsForAttributeValueRange(v4, *(_QWORD *)(a1 + 24), *(_DWORD *)(a1 + 16), a2, *(double *)(a1 + 32), *(double *)(a1 + 40));
}

uint64_t degas::RangePredicate<double>::filterElements(uint64_t a1, Bitmap *a2, degas::AggregateValueCursor *a3)
{
  uint64_t v3;
  uint64_t v5[2];

  v3 = *(_QWORD *)(a1 + 48);
  v5[0] = *(_QWORD *)(a1 + 8);
  v5[1] = v3;
  return degas::AttributeQuery::filterElementsForAttributeValueRange(v5, *(_QWORD *)(a1 + 24), *(_DWORD *)(a1 + 16), a2, a3, *(double *)(a1 + 32), *(double *)(a1 + 40));
}

void degas::RangePredicate<double>::decomposeLabelsPredicate(_QWORD *a1@<X1>, _QWORD *a2@<X8>)
{
  uint64_t v2;
  unint64_t *v3;
  unint64_t v4;

  *a2 = 0;
  a2[1] = 0;
  v2 = a1[1];
  a2[2] = *a1;
  a2[3] = v2;
  if (v2)
  {
    v3 = (unint64_t *)(v2 + 8);
    do
      v4 = __ldxr(v3);
    while (__stxr(v4 + 1, v3));
  }
}

uint64_t degas::RangePredicate<double>::allLabelIds()
{
  return 0;
}

uint64_t degas::RangePredicate<double>::isTrivialYes()
{
  return 0;
}

uint64_t degas::RangePredicate<double>::isTrivialNo()
{
  return 0;
}

void degas::RangePredicate<double>::debugDescription(uint64_t a1, uint64_t a2)
{
  _QWORD *v3;
  void **v4;
  uint64_t v5;
  int v6;
  void **v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;
  char v13;
  void *__p[2];
  unsigned __int8 v15;
  _QWORD v16[11];
  char v17;
  uint64_t v18;
  _QWORD v19[11];
  char v20;
  uint64_t v21;
  void **v22;
  uint64_t v23;
  uint64_t v24;

  v22 = 0;
  v23 = 0;
  v24 = 0;
  degas::Database::getAttributeProperties(a2, *(_QWORD *)(a1 + 24), (uint64_t)&v22);
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v19);
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v16);
  v3 = (_QWORD *)std::ostream::operator<<();
  LOBYTE(__p[0]) = 44;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)__p, 1);
  std::ostream::operator<<();
  if (v24 >= 0)
    v4 = (void **)&v22;
  else
    v4 = v22;
  if (v24 >= 0)
    v5 = HIBYTE(v24);
  else
    v5 = v23;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v19, (uint64_t)v4, v5);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v19, (uint64_t)"in ", 3);
  v6 = *(_DWORD *)(a1 + 16);
  std::stringbuf::str();
  degas::TernaryOperatorDescription(v6, (uint64_t)&v12);
  if ((v15 & 0x80u) == 0)
    v7 = __p;
  else
    v7 = (void **)__p[0];
  if ((v15 & 0x80u) == 0)
    v8 = v15;
  else
    v8 = (uint64_t)__p[1];
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v19, (uint64_t)v7, v8);
  if ((char)v15 < 0)
    operator delete(__p[0]);
  if (v13 < 0)
    operator delete(v12);
  std::stringbuf::str();
  v9 = *MEMORY[0x1E0DE4F60];
  v16[0] = v9;
  v10 = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 24);
  *(_QWORD *)((char *)v16 + *(_QWORD *)(v9 - 24)) = v10;
  v11 = MEMORY[0x1E0DE4FB8] + 16;
  v16[1] = MEMORY[0x1E0DE4FB8] + 16;
  if (v17 < 0)
    operator delete((void *)v16[9]);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x1CAA4AD98](&v18);
  v19[0] = v9;
  *(_QWORD *)((char *)v19 + *(_QWORD *)(v9 - 24)) = v10;
  v19[1] = v11;
  if (v20 < 0)
    operator delete((void *)v19[9]);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x1CAA4AD98](&v21);
  if (SHIBYTE(v24) < 0)
    operator delete(v22);
}

void sub_1CA198D84(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,char a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,char a55)
{
  uint64_t v55;

  if (a21 < 0)
    operator delete(__p);
  if (a15 < 0)
    operator delete(a10);
  std::ostringstream::~ostringstream((uint64_t)&a22);
  std::ostringstream::~ostringstream((uint64_t)&a55);
  if (*(char *)(v55 - 65) < 0)
    operator delete(*(void **)(v55 - 88));
  _Unwind_Resume(a1);
}

void std::__shared_ptr_pointer<degas::RangePredicate<long long> *,std::shared_ptr<degas::Predicate>::__shared_ptr_default_delete<degas::Predicate,degas::RangePredicate<long long>>,std::allocator<degas::RangePredicate<long long>>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1CAA4ADC8);
}

uint64_t std::__shared_ptr_pointer<degas::RangePredicate<long long> *,std::shared_ptr<degas::Predicate>::__shared_ptr_default_delete<degas::Predicate,degas::RangePredicate<long long>>,std::allocator<degas::RangePredicate<long long>>>::__on_zero_shared(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 24);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

uint64_t std::__shared_ptr_pointer<degas::RangePredicate<long long> *,std::shared_ptr<degas::Predicate>::__shared_ptr_default_delete<degas::Predicate,degas::RangePredicate<long long>>,std::allocator<degas::RangePredicate<long long>>>::__get_deleter(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(_QWORD *)(a2 + 8), 0x80000001CA1FD9CCLL))
    return a1 + 24;
  else
    return 0;
}

void degas::RangePredicate<long long>::~RangePredicate()
{
  JUMPOUT(0x1CAA4ADC8);
}

uint64_t degas::RangePredicate<long long>::elements(uint64_t a1, degas::Bitmap *a2)
{
  sqlite3_int64 v2;
  uint64_t v3;
  uint64_t v5[2];

  v2 = *(_QWORD *)(a1 + 40);
  v3 = *(_QWORD *)(a1 + 48);
  v5[0] = *(_QWORD *)(a1 + 8);
  v5[1] = v3;
  return degas::AttributeQuery::elementsForAttributeValueRange(v5, *(_QWORD *)(a1 + 24), *(_QWORD *)(a1 + 32), v2, *(_DWORD *)(a1 + 16), a2);
}

uint64_t degas::RangePredicate<long long>::filterElements(uint64_t a1, Bitmap *a2, degas::AggregateValueCursor *a3)
{
  sqlite3_int64 v3;
  uint64_t v4;
  uint64_t v6[2];

  v3 = *(_QWORD *)(a1 + 40);
  v4 = *(_QWORD *)(a1 + 48);
  v6[0] = *(_QWORD *)(a1 + 8);
  v6[1] = v4;
  return degas::AttributeQuery::filterElementsForAttributeValueRange(v6, *(_QWORD *)(a1 + 24), *(_QWORD *)(a1 + 32), v3, *(_DWORD *)(a1 + 16), a2, a3);
}

void degas::RangePredicate<long long>::decomposeLabelsPredicate(_QWORD *a1@<X1>, _QWORD *a2@<X8>)
{
  uint64_t v2;
  unint64_t *v3;
  unint64_t v4;

  *a2 = 0;
  a2[1] = 0;
  v2 = a1[1];
  a2[2] = *a1;
  a2[3] = v2;
  if (v2)
  {
    v3 = (unint64_t *)(v2 + 8);
    do
      v4 = __ldxr(v3);
    while (__stxr(v4 + 1, v3));
  }
}

uint64_t degas::RangePredicate<long long>::allLabelIds()
{
  return 0;
}

uint64_t degas::RangePredicate<long long>::isTrivialYes()
{
  return 0;
}

uint64_t degas::RangePredicate<long long>::isTrivialNo()
{
  return 0;
}

void degas::RangePredicate<long long>::debugDescription(uint64_t a1, uint64_t a2)
{
  _QWORD *v3;
  void **v4;
  uint64_t v5;
  int v6;
  void **v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;
  char v13;
  void *__p[2];
  unsigned __int8 v15;
  _QWORD v16[11];
  char v17;
  uint64_t v18;
  _QWORD v19[11];
  char v20;
  uint64_t v21;
  void **v22;
  uint64_t v23;
  uint64_t v24;

  v22 = 0;
  v23 = 0;
  v24 = 0;
  degas::Database::getAttributeProperties(a2, *(_QWORD *)(a1 + 24), (uint64_t)&v22);
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v19);
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v16);
  v3 = (_QWORD *)std::ostream::operator<<();
  LOBYTE(__p[0]) = 44;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)__p, 1);
  std::ostream::operator<<();
  if (v24 >= 0)
    v4 = (void **)&v22;
  else
    v4 = v22;
  if (v24 >= 0)
    v5 = HIBYTE(v24);
  else
    v5 = v23;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v19, (uint64_t)v4, v5);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v19, (uint64_t)"in ", 3);
  v6 = *(_DWORD *)(a1 + 16);
  std::stringbuf::str();
  degas::TernaryOperatorDescription(v6, (uint64_t)&v12);
  if ((v15 & 0x80u) == 0)
    v7 = __p;
  else
    v7 = (void **)__p[0];
  if ((v15 & 0x80u) == 0)
    v8 = v15;
  else
    v8 = (uint64_t)__p[1];
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v19, (uint64_t)v7, v8);
  if ((char)v15 < 0)
    operator delete(__p[0]);
  if (v13 < 0)
    operator delete(v12);
  std::stringbuf::str();
  v9 = *MEMORY[0x1E0DE4F60];
  v16[0] = v9;
  v10 = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 24);
  *(_QWORD *)((char *)v16 + *(_QWORD *)(v9 - 24)) = v10;
  v11 = MEMORY[0x1E0DE4FB8] + 16;
  v16[1] = MEMORY[0x1E0DE4FB8] + 16;
  if (v17 < 0)
    operator delete((void *)v16[9]);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x1CAA4AD98](&v18);
  v19[0] = v9;
  *(_QWORD *)((char *)v19 + *(_QWORD *)(v9 - 24)) = v10;
  v19[1] = v11;
  if (v20 < 0)
    operator delete((void *)v19[9]);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x1CAA4AD98](&v21);
  if (SHIBYTE(v24) < 0)
    operator delete(v22);
}

void sub_1CA199144(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,char a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,char a55)
{
  uint64_t v55;

  if (a21 < 0)
    operator delete(__p);
  if (a15 < 0)
    operator delete(a10);
  std::ostringstream::~ostringstream((uint64_t)&a22);
  std::ostringstream::~ostringstream((uint64_t)&a55);
  if (*(char *)(v55 - 65) < 0)
    operator delete(*(void **)(v55 - 88));
  _Unwind_Resume(a1);
}

void std::__shared_ptr_pointer<degas::BinaryPredicate<std::string> *,std::shared_ptr<degas::Predicate>::__shared_ptr_default_delete<degas::Predicate,degas::BinaryPredicate<std::string>>,std::allocator<degas::BinaryPredicate<std::string>>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1CAA4ADC8);
}

uint64_t std::__shared_ptr_pointer<degas::BinaryPredicate<std::string> *,std::shared_ptr<degas::Predicate>::__shared_ptr_default_delete<degas::Predicate,degas::BinaryPredicate<std::string>>,std::allocator<degas::BinaryPredicate<std::string>>>::__on_zero_shared(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 24);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

uint64_t std::__shared_ptr_pointer<degas::BinaryPredicate<std::string> *,std::shared_ptr<degas::Predicate>::__shared_ptr_default_delete<degas::Predicate,degas::BinaryPredicate<std::string>>,std::allocator<degas::BinaryPredicate<std::string>>>::__get_deleter(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(_QWORD *)(a2 + 8), 0x80000001CA1FD87DLL))
    return a1 + 24;
  else
    return 0;
}

uint64_t degas::BinaryPredicate<std::string>::~BinaryPredicate(uint64_t a1)
{
  *(_QWORD *)a1 = off_1E83E3DF8;
  if (*(char *)(a1 + 55) < 0)
    operator delete(*(void **)(a1 + 32));
  return a1;
}

void degas::BinaryPredicate<std::string>::~BinaryPredicate(uint64_t a1)
{
  *(_QWORD *)a1 = off_1E83E3DF8;
  if (*(char *)(a1 + 55) < 0)
    operator delete(*(void **)(a1 + 32));
  JUMPOUT(0x1CAA4ADC8);
}

uint64_t degas::BinaryPredicate<std::string>::elements(uint64_t a1, degas::Bitmap *a2)
{
  uint64_t v2;
  uint64_t v4[2];

  v2 = *(_QWORD *)(a1 + 56);
  v4[0] = *(_QWORD *)(a1 + 8);
  v4[1] = v2;
  return degas::AttributeQuery::elementsForAttributeValue(v4, *(_QWORD *)(a1 + 24), a1 + 32, *(_DWORD *)(a1 + 16), a2);
}

uint64_t degas::BinaryPredicate<std::string>::filterElements(uint64_t a1, Bitmap *a2, degas::AggregateValueCursor *a3)
{
  uint64_t v3;
  uint64_t v5[2];

  v3 = *(_QWORD *)(a1 + 56);
  v5[0] = *(_QWORD *)(a1 + 8);
  v5[1] = v3;
  return degas::AttributeQuery::filterElementsForAttributeValue(v5, *(_QWORD *)(a1 + 24), a1 + 32, *(_DWORD *)(a1 + 16), a2, a3);
}

void degas::BinaryPredicate<std::string>::decomposeLabelsPredicate(_QWORD *a1@<X1>, _QWORD *a2@<X8>)
{
  uint64_t v2;
  unint64_t *v3;
  unint64_t v4;

  *a2 = 0;
  a2[1] = 0;
  v2 = a1[1];
  a2[2] = *a1;
  a2[3] = v2;
  if (v2)
  {
    v3 = (unint64_t *)(v2 + 8);
    do
      v4 = __ldxr(v3);
    while (__stxr(v4 + 1, v3));
  }
}

uint64_t degas::BinaryPredicate<std::string>::allLabelIds()
{
  return 0;
}

uint64_t degas::BinaryPredicate<std::string>::isTrivialYes()
{
  return 0;
}

uint64_t degas::BinaryPredicate<std::string>::isTrivialNo()
{
  return 0;
}

void degas::BinaryPredicate<std::string>::debugDescription(uint64_t a1, uint64_t a2)
{
  void **v3;
  uint64_t v4;
  void **v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  void *__p[2];
  unsigned __int8 v14;
  _QWORD v15[11];
  char v16;
  uint64_t v17;
  void **v18;
  uint64_t v19;
  uint64_t v20;

  v18 = 0;
  v19 = 0;
  v20 = 0;
  degas::Database::getAttributeProperties(a2, *(_QWORD *)(a1 + 24), (uint64_t)&v18);
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v15);
  if (v20 >= 0)
    v3 = (void **)&v18;
  else
    v3 = v18;
  if (v20 >= 0)
    v4 = HIBYTE(v20);
  else
    v4 = v19;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)v3, v4);
  std::string::basic_string[abi:ne180100]<0>(__p, off_1E83E2878[*(int *)(a1 + 16)]);
  if ((v14 & 0x80u) == 0)
    v5 = __p;
  else
    v5 = (void **)__p[0];
  if ((v14 & 0x80u) == 0)
    v6 = v14;
  else
    v6 = (uint64_t)__p[1];
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)v5, v6);
  v9 = *(_QWORD *)(a1 + 32);
  v8 = a1 + 32;
  v7 = v9;
  v10 = *(char *)(v8 + 23);
  if (v10 >= 0)
    v11 = v8;
  else
    v11 = v7;
  if (v10 >= 0)
    v12 = *(unsigned __int8 *)(v8 + 23);
  else
    v12 = *(_QWORD *)(v8 + 8);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, v11, v12);
  if ((char)v14 < 0)
    operator delete(__p[0]);
  std::stringbuf::str();
  v15[0] = *MEMORY[0x1E0DE4F60];
  *(_QWORD *)((char *)v15 + *(_QWORD *)(v15[0] - 24)) = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 24);
  v15[1] = MEMORY[0x1E0DE4FB8] + 16;
  if (v16 < 0)
    operator delete((void *)v15[9]);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x1CAA4AD98](&v17);
  if (SHIBYTE(v20) < 0)
    operator delete(v18);
}

void sub_1CA1994E8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16)
{
  uint64_t v16;

  std::ostringstream::~ostringstream((uint64_t)&a16);
  if (*(char *)(v16 - 33) < 0)
    operator delete(*(void **)(v16 - 56));
  _Unwind_Resume(a1);
}

void std::__shared_ptr_pointer<degas::BinaryPredicate<double> *,std::shared_ptr<degas::Predicate>::__shared_ptr_default_delete<degas::Predicate,degas::BinaryPredicate<double>>,std::allocator<degas::BinaryPredicate<double>>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1CAA4ADC8);
}

uint64_t std::__shared_ptr_pointer<degas::BinaryPredicate<double> *,std::shared_ptr<degas::Predicate>::__shared_ptr_default_delete<degas::Predicate,degas::BinaryPredicate<double>>,std::allocator<degas::BinaryPredicate<double>>>::__on_zero_shared(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 24);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

uint64_t std::__shared_ptr_pointer<degas::BinaryPredicate<double> *,std::shared_ptr<degas::Predicate>::__shared_ptr_default_delete<degas::Predicate,degas::BinaryPredicate<double>>,std::allocator<degas::BinaryPredicate<double>>>::__get_deleter(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(_QWORD *)(a2 + 8), 0x80000001CA1FD6F6))
    return a1 + 24;
  else
    return 0;
}

void degas::BinaryPredicate<double>::~BinaryPredicate()
{
  JUMPOUT(0x1CAA4ADC8);
}

uint64_t degas::BinaryPredicate<double>::elements(uint64_t a1, degas::Bitmap *a2)
{
  uint64_t v2;
  uint64_t v4[2];

  v2 = *(_QWORD *)(a1 + 40);
  v4[0] = *(_QWORD *)(a1 + 8);
  v4[1] = v2;
  return degas::AttributeQuery::elementsForAttributeValue(v4, *(_QWORD *)(a1 + 24), *(_DWORD *)(a1 + 16), a2, *(double *)(a1 + 32));
}

uint64_t degas::BinaryPredicate<double>::filterElements(uint64_t a1, Bitmap *a2, degas::AggregateValueCursor *a3)
{
  uint64_t v3;
  uint64_t v5[2];

  v3 = *(_QWORD *)(a1 + 40);
  v5[0] = *(_QWORD *)(a1 + 8);
  v5[1] = v3;
  return degas::AttributeQuery::filterElementsForAttributeValue(v5, *(_QWORD *)(a1 + 24), *(_DWORD *)(a1 + 16), a2, a3, *(double *)(a1 + 32));
}

void degas::BinaryPredicate<double>::decomposeLabelsPredicate(_QWORD *a1@<X1>, _QWORD *a2@<X8>)
{
  uint64_t v2;
  unint64_t *v3;
  unint64_t v4;

  *a2 = 0;
  a2[1] = 0;
  v2 = a1[1];
  a2[2] = *a1;
  a2[3] = v2;
  if (v2)
  {
    v3 = (unint64_t *)(v2 + 8);
    do
      v4 = __ldxr(v3);
    while (__stxr(v4 + 1, v3));
  }
}

uint64_t degas::BinaryPredicate<double>::allLabelIds()
{
  return 0;
}

uint64_t degas::BinaryPredicate<double>::isTrivialYes()
{
  return 0;
}

uint64_t degas::BinaryPredicate<double>::isTrivialNo()
{
  return 0;
}

void degas::BinaryPredicate<double>::debugDescription(uint64_t a1, uint64_t a2)
{
  void **v3;
  uint64_t v4;
  void **v5;
  uint64_t v6;
  void *__p[2];
  unsigned __int8 v8;
  _QWORD v9[11];
  char v10;
  uint64_t v11;
  void **v12;
  uint64_t v13;
  uint64_t v14;

  v12 = 0;
  v13 = 0;
  v14 = 0;
  degas::Database::getAttributeProperties(a2, *(_QWORD *)(a1 + 24), (uint64_t)&v12);
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v9);
  if (v14 >= 0)
    v3 = (void **)&v12;
  else
    v3 = v12;
  if (v14 >= 0)
    v4 = HIBYTE(v14);
  else
    v4 = v13;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)v3, v4);
  std::string::basic_string[abi:ne180100]<0>(__p, off_1E83E2878[*(int *)(a1 + 16)]);
  if ((v8 & 0x80u) == 0)
    v5 = __p;
  else
    v5 = (void **)__p[0];
  if ((v8 & 0x80u) == 0)
    v6 = v8;
  else
    v6 = (uint64_t)__p[1];
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)v5, v6);
  std::ostream::operator<<();
  if ((char)v8 < 0)
    operator delete(__p[0]);
  std::stringbuf::str();
  v9[0] = *MEMORY[0x1E0DE4F60];
  *(_QWORD *)((char *)v9 + *(_QWORD *)(v9[0] - 24)) = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 24);
  v9[1] = MEMORY[0x1E0DE4FB8] + 16;
  if (v10 < 0)
    operator delete((void *)v9[9]);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x1CAA4AD98](&v11);
  if (SHIBYTE(v14) < 0)
    operator delete(v12);
}

void sub_1CA1997DC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16)
{
  uint64_t v16;

  std::ostringstream::~ostringstream((uint64_t)&a16);
  if (*(char *)(v16 - 33) < 0)
    operator delete(*(void **)(v16 - 56));
  _Unwind_Resume(a1);
}

void std::__shared_ptr_pointer<degas::BinaryPredicate<long long> *,std::shared_ptr<degas::Predicate>::__shared_ptr_default_delete<degas::Predicate,degas::BinaryPredicate<long long>>,std::allocator<degas::BinaryPredicate<long long>>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1CAA4ADC8);
}

uint64_t std::__shared_ptr_pointer<degas::BinaryPredicate<long long> *,std::shared_ptr<degas::Predicate>::__shared_ptr_default_delete<degas::Predicate,degas::BinaryPredicate<long long>>,std::allocator<degas::BinaryPredicate<long long>>>::__on_zero_shared(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 24);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

uint64_t std::__shared_ptr_pointer<degas::BinaryPredicate<long long> *,std::shared_ptr<degas::Predicate>::__shared_ptr_default_delete<degas::Predicate,degas::BinaryPredicate<long long>>,std::allocator<degas::BinaryPredicate<long long>>>::__get_deleter(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(_QWORD *)(a2 + 8), 0x80000001CA1FD5DELL))
    return a1 + 24;
  else
    return 0;
}

void degas::BinaryPredicate<long long>::~BinaryPredicate()
{
  JUMPOUT(0x1CAA4ADC8);
}

uint64_t degas::BinaryPredicate<long long>::elements(uint64_t a1, degas::Bitmap *a2)
{
  sqlite3_int64 v2;
  uint64_t v3;
  uint64_t v5[2];

  v2 = *(_QWORD *)(a1 + 32);
  v3 = *(_QWORD *)(a1 + 40);
  v5[0] = *(_QWORD *)(a1 + 8);
  v5[1] = v3;
  return degas::AttributeQuery::elementsForAttributeValue(v5, *(_QWORD *)(a1 + 24), v2, *(_DWORD *)(a1 + 16), a2);
}

uint64_t degas::BinaryPredicate<long long>::filterElements(uint64_t a1, Bitmap *a2, degas::AggregateValueCursor *a3)
{
  sqlite3_int64 v4;
  uint64_t v5;
  uint64_t v7[2];

  v4 = *(_QWORD *)(a1 + 32);
  v5 = *(_QWORD *)(a1 + 40);
  v7[0] = *(_QWORD *)(a1 + 8);
  v7[1] = v5;
  return degas::AttributeQuery::filterElementsForAttributeValue(v7, *(_QWORD *)(a1 + 24), v4, *(_DWORD *)(a1 + 16), a2, a3);
}

void degas::BinaryPredicate<long long>::decomposeLabelsPredicate(_QWORD *a1@<X1>, _QWORD *a2@<X8>)
{
  uint64_t v2;
  unint64_t *v3;
  unint64_t v4;

  *a2 = 0;
  a2[1] = 0;
  v2 = a1[1];
  a2[2] = *a1;
  a2[3] = v2;
  if (v2)
  {
    v3 = (unint64_t *)(v2 + 8);
    do
      v4 = __ldxr(v3);
    while (__stxr(v4 + 1, v3));
  }
}

uint64_t degas::BinaryPredicate<long long>::allLabelIds()
{
  return 0;
}

uint64_t degas::BinaryPredicate<long long>::isTrivialYes()
{
  return 0;
}

uint64_t degas::BinaryPredicate<long long>::isTrivialNo()
{
  return 0;
}

void degas::BinaryPredicate<long long>::debugDescription(uint64_t a1, uint64_t a2)
{
  void **v3;
  uint64_t v4;
  void **v5;
  uint64_t v6;
  void *__p[2];
  unsigned __int8 v8;
  _QWORD v9[11];
  char v10;
  uint64_t v11;
  void **v12;
  uint64_t v13;
  uint64_t v14;

  v12 = 0;
  v13 = 0;
  v14 = 0;
  degas::Database::getAttributeProperties(a2, *(_QWORD *)(a1 + 24), (uint64_t)&v12);
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v9);
  if (v14 >= 0)
    v3 = (void **)&v12;
  else
    v3 = v12;
  if (v14 >= 0)
    v4 = HIBYTE(v14);
  else
    v4 = v13;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)v3, v4);
  std::string::basic_string[abi:ne180100]<0>(__p, off_1E83E2878[*(int *)(a1 + 16)]);
  if ((v8 & 0x80u) == 0)
    v5 = __p;
  else
    v5 = (void **)__p[0];
  if ((v8 & 0x80u) == 0)
    v6 = v8;
  else
    v6 = (uint64_t)__p[1];
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)v5, v6);
  std::ostream::operator<<();
  if ((char)v8 < 0)
    operator delete(__p[0]);
  std::stringbuf::str();
  v9[0] = *MEMORY[0x1E0DE4F60];
  *(_QWORD *)((char *)v9 + *(_QWORD *)(v9[0] - 24)) = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 24);
  v9[1] = MEMORY[0x1E0DE4FB8] + 16;
  if (v10 < 0)
    operator delete((void *)v9[9]);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x1CAA4AD98](&v11);
  if (SHIBYTE(v14) < 0)
    operator delete(v12);
}

void sub_1CA199AC8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16)
{
  uint64_t v16;

  std::ostringstream::~ostringstream((uint64_t)&a16);
  if (*(char *)(v16 - 33) < 0)
    operator delete(*(void **)(v16 - 56));
  _Unwind_Resume(a1);
}

void *std::__allocate_at_least[abi:ne180100]<std::allocator<std::string>>(unint64_t a1)
{
  if (a1 >= 0xAAAAAAAAAAAAAABLL)
    std::__throw_bad_array_new_length[abi:ne180100]();
  return operator new(24 * a1);
}

void std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  void **v1;
  void **v2;
  void **v4;
  void *v5;

  v1 = *a1;
  v2 = (void **)**a1;
  if (v2)
  {
    v4 = (void **)v1[1];
    v5 = **a1;
    if (v4 != v2)
    {
      do
      {
        if (*((char *)v4 - 1) < 0)
          operator delete(*(v4 - 3));
        v4 -= 3;
      }
      while (v4 != v2);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void *std::__allocate_at_least[abi:ne180100]<std::allocator<long long>>(unint64_t a1)
{
  if (a1 >> 61)
    std::__throw_bad_array_new_length[abi:ne180100]();
  return operator new(8 * a1);
}

void std::__shared_ptr_pointer<degas::UnionPredicate *,std::shared_ptr<degas::Predicate>::__shared_ptr_default_delete<degas::Predicate,degas::UnionPredicate>,std::allocator<degas::UnionPredicate>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1CAA4ADC8);
}

uint64_t std::__shared_ptr_pointer<degas::UnionPredicate *,std::shared_ptr<degas::Predicate>::__shared_ptr_default_delete<degas::Predicate,degas::UnionPredicate>,std::allocator<degas::UnionPredicate>>::__on_zero_shared(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 24);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

uint64_t std::__shared_ptr_pointer<degas::UnionPredicate *,std::shared_ptr<degas::Predicate>::__shared_ptr_default_delete<degas::Predicate,degas::UnionPredicate>,std::allocator<degas::UnionPredicate>>::__get_deleter(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(_QWORD *)(a2 + 8), 0x80000001CA1FD4CALL))
    return a1 + 24;
  else
    return 0;
}

void std::__shared_ptr_pointer<degas::ValueListPredicate<double> *,std::shared_ptr<degas::Predicate>::__shared_ptr_default_delete<degas::Predicate,degas::ValueListPredicate<double>>,std::allocator<degas::ValueListPredicate<double>>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1CAA4ADC8);
}

uint64_t std::__shared_ptr_pointer<degas::ValueListPredicate<double> *,std::shared_ptr<degas::Predicate>::__shared_ptr_default_delete<degas::Predicate,degas::ValueListPredicate<double>>,std::allocator<degas::ValueListPredicate<double>>>::__on_zero_shared(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 24);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

uint64_t std::__shared_ptr_pointer<degas::ValueListPredicate<double> *,std::shared_ptr<degas::Predicate>::__shared_ptr_default_delete<degas::Predicate,degas::ValueListPredicate<double>>,std::allocator<degas::ValueListPredicate<double>>>::__get_deleter(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(_QWORD *)(a2 + 8), 0x80000001CA1FD3D0))
    return a1 + 24;
  else
    return 0;
}

char *std::vector<double>::__vallocate[abi:ne180100](_QWORD *a1, unint64_t a2)
{
  char *result;
  uint64_t v4;

  if (a2 >> 61)
    std::vector<unsigned long long>::__throw_length_error[abi:ne180100]();
  result = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<long long>>(a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[8 * v4];
  return result;
}

_QWORD *degas::ValueListPredicate<double>::~ValueListPredicate(_QWORD *a1)
{
  void *v2;

  *a1 = &off_1E83E3B68;
  v2 = (void *)a1[4];
  if (v2)
  {
    a1[5] = v2;
    operator delete(v2);
  }
  return a1;
}

void degas::ValueListPredicate<double>::~ValueListPredicate(_QWORD *a1)
{
  void *v2;

  *a1 = &off_1E83E3B68;
  v2 = (void *)a1[4];
  if (v2)
  {
    a1[5] = v2;
    operator delete(v2);
  }
  JUMPOUT(0x1CAA4ADC8);
}

uint64_t degas::ValueListPredicate<double>::elements(uint64_t a1, degas::Bitmap *a2)
{
  uint64_t v2;
  uint64_t v4[2];

  v2 = *(_QWORD *)(a1 + 56);
  v4[0] = *(_QWORD *)(a1 + 8);
  v4[1] = v2;
  return degas::AttributeQuery::elementsForAttributeValues(v4, *(_QWORD *)(a1 + 24), *(void **)(a1 + 32), (*(_QWORD *)(a1 + 40) - *(_QWORD *)(a1 + 32)) >> 3, *(_DWORD *)(a1 + 16), a2);
}

uint64_t degas::ValueListPredicate<double>::filterElements(uint64_t a1, Bitmap *a2, degas::AggregateValueCursor *a3)
{
  uint64_t v3;
  uint64_t v5[2];

  v3 = *(_QWORD *)(a1 + 56);
  v5[0] = *(_QWORD *)(a1 + 8);
  v5[1] = v3;
  return degas::AttributeQuery::filterElementsForAttributeValues(v5, *(_QWORD *)(a1 + 24), *(void **)(a1 + 32), (*(_QWORD *)(a1 + 40) - *(_QWORD *)(a1 + 32)) >> 3, *(_DWORD *)(a1 + 16), a2, a3);
}

void degas::ValueListPredicate<double>::decomposeLabelsPredicate(_QWORD *a1@<X1>, _QWORD *a2@<X8>)
{
  uint64_t v2;
  unint64_t *v3;
  unint64_t v4;

  *a2 = 0;
  a2[1] = 0;
  v2 = a1[1];
  a2[2] = *a1;
  a2[3] = v2;
  if (v2)
  {
    v3 = (unint64_t *)(v2 + 8);
    do
      v4 = __ldxr(v3);
    while (__stxr(v4 + 1, v3));
  }
}

uint64_t degas::ValueListPredicate<double>::allLabelIds()
{
  return 0;
}

uint64_t degas::ValueListPredicate<double>::isTrivialYes()
{
  return 0;
}

uint64_t degas::ValueListPredicate<double>::isTrivialNo()
{
  return 0;
}

void degas::ValueListPredicate<double>::debugDescription(uint64_t a1, uint64_t a2)
{
  void **v3;
  uint64_t v4;
  int v5;
  const char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char v10;
  _QWORD v11[11];
  char v12;
  uint64_t v13;
  void **v14;
  uint64_t v15;
  uint64_t v16;
  char v17;

  v14 = 0;
  v15 = 0;
  v16 = 0;
  degas::Database::getAttributeProperties(a2, *(_QWORD *)(a1 + 24), (uint64_t)&v14);
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v11);
  if (v16 >= 0)
    v3 = (void **)&v14;
  else
    v3 = v14;
  if (v16 >= 0)
    v4 = HIBYTE(v16);
  else
    v4 = v15;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v11, (uint64_t)v3, v4);
  v5 = *(_DWORD *)(a1 + 16);
  if (v5 == 1)
    v6 = " in ";
  else
    v6 = " not in ";
  if (v5 == 1)
    v7 = 4;
  else
    v7 = 8;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v11, (uint64_t)v6, v7);
  v17 = 40;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v11, (uint64_t)&v17, 1);
  v9 = *(_QWORD *)(a1 + 32);
  v8 = *(_QWORD *)(a1 + 40);
  if (v9 != v8)
  {
    v10 = 1;
    do
    {
      if ((v10 & 1) == 0)
      {
        v17 = 44;
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v11, (uint64_t)&v17, 1);
      }
      std::ostream::operator<<();
      v10 = 0;
      v9 += 8;
    }
    while (v9 != v8);
  }
  v17 = 41;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v11, (uint64_t)&v17, 1);
  std::stringbuf::str();
  v11[0] = *MEMORY[0x1E0DE4F60];
  *(_QWORD *)((char *)v11 + *(_QWORD *)(v11[0] - 24)) = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 24);
  v11[1] = MEMORY[0x1E0DE4FB8] + 16;
  if (v12 < 0)
    operator delete((void *)v11[9]);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x1CAA4AD98](&v13);
  if (SHIBYTE(v16) < 0)
    operator delete(v14);
}

void sub_1CA19A050(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
  uint64_t v10;

  if (*(char *)(v10 - 73) < 0)
    operator delete(*(void **)(v10 - 96));
  _Unwind_Resume(exception_object);
}

void std::__shared_ptr_pointer<degas::ValueListPredicate<long long> *,std::shared_ptr<degas::Predicate>::__shared_ptr_default_delete<degas::Predicate,degas::ValueListPredicate<long long>>,std::allocator<degas::ValueListPredicate<long long>>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1CAA4ADC8);
}

uint64_t std::__shared_ptr_pointer<degas::ValueListPredicate<long long> *,std::shared_ptr<degas::Predicate>::__shared_ptr_default_delete<degas::Predicate,degas::ValueListPredicate<long long>>,std::allocator<degas::ValueListPredicate<long long>>>::__on_zero_shared(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 24);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

uint64_t std::__shared_ptr_pointer<degas::ValueListPredicate<long long> *,std::shared_ptr<degas::Predicate>::__shared_ptr_default_delete<degas::Predicate,degas::ValueListPredicate<long long>>,std::allocator<degas::ValueListPredicate<long long>>>::__get_deleter(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(_QWORD *)(a2 + 8), 0x80000001CA1FD2AFLL))
    return a1 + 24;
  else
    return 0;
}

_QWORD *degas::ValueListPredicate<long long>::~ValueListPredicate(_QWORD *a1)
{
  void *v2;

  *a1 = &off_1E83E3AA8;
  v2 = (void *)a1[4];
  if (v2)
  {
    a1[5] = v2;
    operator delete(v2);
  }
  return a1;
}

void degas::ValueListPredicate<long long>::~ValueListPredicate(_QWORD *a1)
{
  void *v2;

  *a1 = &off_1E83E3AA8;
  v2 = (void *)a1[4];
  if (v2)
  {
    a1[5] = v2;
    operator delete(v2);
  }
  JUMPOUT(0x1CAA4ADC8);
}

uint64_t degas::ValueListPredicate<long long>::elements(uint64_t a1, degas::Bitmap *a2)
{
  uint64_t v2;
  uint64_t v4[2];

  v2 = *(_QWORD *)(a1 + 56);
  v4[0] = *(_QWORD *)(a1 + 8);
  v4[1] = v2;
  return degas::AttributeQuery::elementsForAttributeValues(v4, *(_QWORD *)(a1 + 24), *(void **)(a1 + 32), (*(_QWORD *)(a1 + 40) - *(_QWORD *)(a1 + 32)) >> 3, *(_DWORD *)(a1 + 16), a2);
}

uint64_t degas::ValueListPredicate<long long>::filterElements(uint64_t a1, Bitmap *a2, degas::AggregateValueCursor *a3)
{
  uint64_t v3;
  uint64_t v5[2];

  v3 = *(_QWORD *)(a1 + 56);
  v5[0] = *(_QWORD *)(a1 + 8);
  v5[1] = v3;
  return degas::AttributeQuery::filterElementsForAttributeValues(v5, *(_QWORD *)(a1 + 24), *(void **)(a1 + 32), (*(_QWORD *)(a1 + 40) - *(_QWORD *)(a1 + 32)) >> 3, *(_DWORD *)(a1 + 16), a2, a3);
}

void degas::ValueListPredicate<long long>::decomposeLabelsPredicate(_QWORD *a1@<X1>, _QWORD *a2@<X8>)
{
  uint64_t v2;
  unint64_t *v3;
  unint64_t v4;

  *a2 = 0;
  a2[1] = 0;
  v2 = a1[1];
  a2[2] = *a1;
  a2[3] = v2;
  if (v2)
  {
    v3 = (unint64_t *)(v2 + 8);
    do
      v4 = __ldxr(v3);
    while (__stxr(v4 + 1, v3));
  }
}

uint64_t degas::ValueListPredicate<long long>::allLabelIds()
{
  return 0;
}

uint64_t degas::ValueListPredicate<long long>::isTrivialYes()
{
  return 0;
}

uint64_t degas::ValueListPredicate<long long>::isTrivialNo()
{
  return 0;
}

void degas::ValueListPredicate<long long>::debugDescription(uint64_t a1, uint64_t a2)
{
  void **v3;
  uint64_t v4;
  int v5;
  const char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char v10;
  _QWORD v11[11];
  char v12;
  uint64_t v13;
  void **v14;
  uint64_t v15;
  uint64_t v16;
  char v17;

  v14 = 0;
  v15 = 0;
  v16 = 0;
  degas::Database::getAttributeProperties(a2, *(_QWORD *)(a1 + 24), (uint64_t)&v14);
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v11);
  if (v16 >= 0)
    v3 = (void **)&v14;
  else
    v3 = v14;
  if (v16 >= 0)
    v4 = HIBYTE(v16);
  else
    v4 = v15;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v11, (uint64_t)v3, v4);
  v5 = *(_DWORD *)(a1 + 16);
  if (v5 == 1)
    v6 = " in ";
  else
    v6 = " not in ";
  if (v5 == 1)
    v7 = 4;
  else
    v7 = 8;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v11, (uint64_t)v6, v7);
  v17 = 40;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v11, (uint64_t)&v17, 1);
  v8 = *(_QWORD *)(a1 + 32);
  v9 = *(_QWORD *)(a1 + 40);
  if (v8 != v9)
  {
    v10 = 1;
    do
    {
      if ((v10 & 1) == 0)
      {
        v17 = 44;
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v11, (uint64_t)&v17, 1);
      }
      std::ostream::operator<<();
      v10 = 0;
      v8 += 8;
    }
    while (v8 != v9);
  }
  v17 = 41;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v11, (uint64_t)&v17, 1);
  std::stringbuf::str();
  v11[0] = *MEMORY[0x1E0DE4F60];
  *(_QWORD *)((char *)v11 + *(_QWORD *)(v11[0] - 24)) = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 24);
  v11[1] = MEMORY[0x1E0DE4FB8] + 16;
  if (v12 < 0)
    operator delete((void *)v11[9]);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x1CAA4AD98](&v13);
  if (SHIBYTE(v16) < 0)
    operator delete(v14);
}

void sub_1CA19A40C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
  uint64_t v10;

  if (*(char *)(v10 - 57) < 0)
    operator delete(*(void **)(v10 - 80));
  _Unwind_Resume(exception_object);
}

void std::__shared_ptr_pointer<degas::ValueListPredicate<std::string> *,std::shared_ptr<degas::Predicate>::__shared_ptr_default_delete<degas::Predicate,degas::ValueListPredicate<std::string>>,std::allocator<degas::ValueListPredicate<std::string>>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1CAA4ADC8);
}

uint64_t std::__shared_ptr_pointer<degas::ValueListPredicate<std::string> *,std::shared_ptr<degas::Predicate>::__shared_ptr_default_delete<degas::Predicate,degas::ValueListPredicate<std::string>>,std::allocator<degas::ValueListPredicate<std::string>>>::__on_zero_shared(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 24);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

uint64_t std::__shared_ptr_pointer<degas::ValueListPredicate<std::string> *,std::shared_ptr<degas::Predicate>::__shared_ptr_default_delete<degas::Predicate,degas::ValueListPredicate<std::string>>,std::allocator<degas::ValueListPredicate<std::string>>>::__get_deleter(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(_QWORD *)(a2 + 8), 0x80000001CA1FD155))
    return a1 + 24;
  else
    return 0;
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::string>,std::string*>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  uint64_t v3;
  uint64_t v4;

  if (!*(_BYTE *)(a1 + 24))
  {
    v3 = **(_QWORD **)(a1 + 16);
    v4 = **(_QWORD **)(a1 + 8);
    while (v3 != v4)
    {
      if (*(char *)(v3 - 1) < 0)
        operator delete(*(void **)(v3 - 24));
      v3 -= 24;
    }
  }
  return a1;
}

uint64_t degas::ValueListPredicate<std::string>::~ValueListPredicate(uint64_t a1)
{
  void **v3;

  *(_QWORD *)a1 = &off_1E83E39E8;
  v3 = (void **)(a1 + 32);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v3);
  return a1;
}

void degas::ValueListPredicate<std::string>::~ValueListPredicate(uint64_t a1)
{
  void **v1;

  *(_QWORD *)a1 = &off_1E83E39E8;
  v1 = (void **)(a1 + 32);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v1);
  JUMPOUT(0x1CAA4ADC8);
}

uint64_t degas::ValueListPredicate<std::string>::elements(uint64_t a1, degas::Bitmap *a2)
{
  uint64_t v2;
  uint64_t v4[2];

  v2 = *(_QWORD *)(a1 + 56);
  v4[0] = *(_QWORD *)(a1 + 8);
  v4[1] = v2;
  return degas::AttributeQuery::elementsForAttributeValues(v4, *(_QWORD *)(a1 + 24), *(uint64_t **)(a1 + 32), -1431655765 * ((*(_QWORD *)(a1 + 40) - *(_QWORD *)(a1 + 32)) >> 3), *(_DWORD *)(a1 + 16), a2);
}

uint64_t degas::ValueListPredicate<std::string>::filterElements(uint64_t a1, Bitmap *a2, degas::AggregateValueCursor *a3)
{
  uint64_t v3;
  _QWORD v5[2];

  v3 = *(_QWORD *)(a1 + 56);
  v5[0] = *(_QWORD *)(a1 + 8);
  v5[1] = v3;
  return degas::AttributeQuery::filterElementsForAttributeValues((uint64_t)v5, *(_QWORD *)(a1 + 24), *(uint64_t **)(a1 + 32), -1431655765 * ((*(_QWORD *)(a1 + 40) - *(_QWORD *)(a1 + 32)) >> 3), *(_DWORD *)(a1 + 16), a2, a3);
}

void degas::ValueListPredicate<std::string>::decomposeLabelsPredicate(_QWORD *a1@<X1>, _QWORD *a2@<X8>)
{
  uint64_t v2;
  unint64_t *v3;
  unint64_t v4;

  *a2 = 0;
  a2[1] = 0;
  v2 = a1[1];
  a2[2] = *a1;
  a2[3] = v2;
  if (v2)
  {
    v3 = (unint64_t *)(v2 + 8);
    do
      v4 = __ldxr(v3);
    while (__stxr(v4 + 1, v3));
  }
}

uint64_t degas::ValueListPredicate<std::string>::allLabelIds()
{
  return 0;
}

uint64_t degas::ValueListPredicate<std::string>::isTrivialYes()
{
  return 0;
}

uint64_t degas::ValueListPredicate<std::string>::isTrivialNo()
{
  return 0;
}

void degas::ValueListPredicate<std::string>::debugDescription(uint64_t a1, uint64_t a2)
{
  void **v3;
  uint64_t v4;
  int v5;
  const char *v6;
  uint64_t v7;
  __int128 *v8;
  __int128 *v9;
  char v10;
  __int128 v11;
  std::string *p_p;
  std::string::size_type size;
  std::string __p;
  _QWORD v15[11];
  char v16;
  uint64_t v17;
  void **v18;
  uint64_t v19;
  uint64_t v20;
  char v21;

  v18 = 0;
  v19 = 0;
  v20 = 0;
  degas::Database::getAttributeProperties(a2, *(_QWORD *)(a1 + 24), (uint64_t)&v18);
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v15);
  if (v20 >= 0)
    v3 = (void **)&v18;
  else
    v3 = v18;
  if (v20 >= 0)
    v4 = HIBYTE(v20);
  else
    v4 = v19;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)v3, v4);
  v5 = *(_DWORD *)(a1 + 16);
  if (v5 == 1)
    v6 = " in ";
  else
    v6 = " not in ";
  if (v5 == 1)
    v7 = 4;
  else
    v7 = 8;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)v6, v7);
  __p.__r_.__value_.__s.__data_[0] = 40;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)&__p, 1);
  v9 = *(__int128 **)(a1 + 32);
  v8 = *(__int128 **)(a1 + 40);
  if (v9 != v8)
  {
    v10 = 1;
    do
    {
      if (*((char *)v9 + 23) < 0)
      {
        std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)v9, *((_QWORD *)v9 + 1));
      }
      else
      {
        v11 = *v9;
        __p.__r_.__value_.__r.__words[2] = *((_QWORD *)v9 + 2);
        *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v11;
      }
      if ((v10 & 1) == 0)
      {
        v21 = 44;
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)&v21, 1);
      }
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        p_p = &__p;
      else
        p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
      else
        size = __p.__r_.__value_.__l.__size_;
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)p_p, size);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__p.__r_.__value_.__l.__data_);
      v10 = 0;
      v9 = (__int128 *)((char *)v9 + 24);
    }
    while (v9 != v8);
  }
  __p.__r_.__value_.__s.__data_[0] = 41;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)&__p, 1);
  std::stringbuf::str();
  v15[0] = *MEMORY[0x1E0DE4F60];
  *(_QWORD *)((char *)v15 + *(_QWORD *)(v15[0] - 24)) = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 24);
  v15[1] = MEMORY[0x1E0DE4FB8] + 16;
  if (v16 < 0)
    operator delete((void *)v15[9]);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x1CAA4AD98](&v17);
  if (SHIBYTE(v20) < 0)
    operator delete(v18);
}

void sub_1CA19A8A0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15)
{
  uint64_t v15;

  if (*(char *)(v15 - 73) < 0)
    operator delete(*(void **)(v15 - 96));
  _Unwind_Resume(exception_object);
}

void sub_1CA19AA5C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;

  _Unwind_Resume(a1);
}

void sub_1CA19AAA4()
{
  JUMPOUT(0x1CA19AA94);
}

void sub_1CA19AB3C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_1CA19AB9C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_1CA19ABFC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_1CA19AC5C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_1CA19ACBC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_1CA19AD1C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void std::vector<degas::EdgeCreationRequest>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  void **v1;
  char *v2;
  char *v4;
  void *v5;
  char *v6;
  void **v7;

  v1 = *a1;
  v2 = (char *)**a1;
  if (v2)
  {
    v4 = (char *)v1[1];
    v5 = **a1;
    if (v4 != v2)
    {
      do
      {
        v6 = v4 - 72;
        v7 = (void **)(v4 - 48);
        std::vector<degas::BitsetPtr>::__destroy_vector::operator()[abi:ne180100](&v7);
        v4 = v6;
      }
      while (v6 != v2);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

uint64_t std::__split_buffer<degas::EdgeCreationRequest>::~__split_buffer(uint64_t a1)
{
  uint64_t i;
  uint64_t v3;
  void **v5;

  v3 = *(_QWORD *)(a1 + 8);
  for (i = *(_QWORD *)(a1 + 16); i != v3; i = *(_QWORD *)(a1 + 16))
  {
    *(_QWORD *)(a1 + 16) = i - 72;
    v5 = (void **)(i - 48);
    std::vector<degas::BitsetPtr>::__destroy_vector::operator()[abi:ne180100](&v5);
  }
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<degas::EdgeCreationRequest>,std::reverse_iterator<degas::EdgeCreationRequest*>>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  uint64_t v3;
  uint64_t v4;
  void **v5;

  if (!*(_BYTE *)(a1 + 24))
  {
    v3 = *(_QWORD *)(*(_QWORD *)(a1 + 16) + 8);
    v4 = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 8);
    while (v3 != v4)
    {
      v5 = (void **)(v3 + 24);
      std::vector<degas::BitsetPtr>::__destroy_vector::operator()[abi:ne180100](&v5);
      v3 += 72;
    }
  }
  return a1;
}

char *__Block_byref_object_copy__2138(uint64_t a1, uint64_t a2)
{
  char *result;

  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 56) = 0u;
  *(_OWORD *)(a1 + 72) = 0u;
  result = std::vector<degas::BitsetPtr>::__init_with_size[abi:ne180100]<degas::BitsetPtr*,degas::BitsetPtr*>((char *)(a1 + 64), *(__int128 **)(a2 + 64), *(__int128 **)(a2 + 72), (uint64_t)(*(_QWORD *)(a2 + 72) - *(_QWORD *)(a2 + 64)) >> 4);
  *(_BYTE *)(a1 + 88) = *(_BYTE *)(a2 + 88);
  return result;
}

void __Block_byref_object_dispose__2139(uint64_t a1)
{
  void **v1;

  v1 = (void **)(a1 + 64);
  std::vector<degas::BitsetPtr>::__destroy_vector::operator()[abi:ne180100](&v1);
}

void sub_1CA19B0C8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  void *v15;
  void *v16;
  void *v17;
  void *v18;

  if (a15 < 0)
    operator delete(__p);

  _Unwind_Resume(a1);
}

void std::vector<degas::NodeCreationRequest>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  void **v1;
  char *v2;
  char *v4;
  void *v5;
  char *v6;
  void **v7;

  v1 = *a1;
  v2 = (char *)**a1;
  if (v2)
  {
    v4 = (char *)v1[1];
    v5 = **a1;
    if (v4 != v2)
    {
      do
      {
        v6 = v4 - 56;
        v7 = (void **)(v4 - 32);
        std::vector<degas::BitsetPtr>::__destroy_vector::operator()[abi:ne180100](&v7);
        v4 = v6;
      }
      while (v6 != v2);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

uint64_t std::__split_buffer<degas::NodeCreationRequest>::~__split_buffer(uint64_t a1)
{
  uint64_t i;
  uint64_t v3;
  void **v5;

  v3 = *(_QWORD *)(a1 + 8);
  for (i = *(_QWORD *)(a1 + 16); i != v3; i = *(_QWORD *)(a1 + 16))
  {
    *(_QWORD *)(a1 + 16) = i - 56;
    v5 = (void **)(i - 32);
    std::vector<degas::BitsetPtr>::__destroy_vector::operator()[abi:ne180100](&v5);
  }
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<degas::NodeCreationRequest>,std::reverse_iterator<degas::NodeCreationRequest*>>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  uint64_t v3;
  uint64_t v4;
  void **v5;

  if (!*(_BYTE *)(a1 + 24))
  {
    v3 = *(_QWORD *)(*(_QWORD *)(a1 + 16) + 8);
    v4 = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 8);
    while (v3 != v4)
    {
      v5 = (void **)(v3 + 24);
      std::vector<degas::BitsetPtr>::__destroy_vector::operator()[abi:ne180100](&v5);
      v3 += 56;
    }
  }
  return a1;
}

void sub_1CA19B438(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  void *v15;
  void *v16;
  void *v17;
  void *v18;

  if (a15 < 0)
    operator delete(__p);

  _Unwind_Resume(a1);
}

void sub_1CA19B5D4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15, void *a16)
{

  _Unwind_Resume(a1);
}

void sub_1CA19B6DC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void sub_1CA19B83C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15, void *a16)
{

  _Unwind_Resume(a1);
}

void sub_1CA19B92C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void sub_1CA19BAB8(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1CA19BBA0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  void *v15;
  void *v16;
  void *v17;

  _Unwind_Resume(a1);
}

void sub_1CA19BC9C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  void *v15;

  _Unwind_Resume(a1);
}

void sub_1CA19BE3C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16)
{
  void *v16;
  void *v17;

  if (a15 < 0)
    operator delete(__p);
  degas::Database::~Database(&a16);

  _Unwind_Resume(a1);
}

void sub_1CA19BF9C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  void *v20;
  void *v21;

  _Unwind_Resume(a1);
}

void sub_1CA19C1B8(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;

  v6 = v4;

  _Unwind_Resume(a1);
}

BOOL report_memory(_QWORD *a1, unint64_t a2, unint64_t a3)
{
  kern_return_t v6;
  _BOOL8 result;
  uint64_t v8;
  kern_return_t v9;
  mach_msg_type_number_t task_info_outCnt;
  integer_t task_info_out[4];
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  int v34;

  if (a2 | a3)
  {
    v34 = 0;
    v32 = 0u;
    v33 = 0u;
    v30 = 0u;
    v31 = 0u;
    v28 = 0u;
    v29 = 0u;
    v26 = 0u;
    v27 = 0u;
    v24 = 0u;
    v25 = 0u;
    v22 = 0u;
    v23 = 0u;
    v20 = 0u;
    v21 = 0u;
    v19 = 0u;
    v17 = 0u;
    v18 = 0u;
    v15 = 0u;
    v16 = 0u;
    v13 = 0u;
    v14 = 0u;
    *(_OWORD *)task_info_out = 0u;
    v12 = 0u;
    task_info_outCnt = 93;
    v6 = task_info(*MEMORY[0x1E0C83DA0], 0x16u, task_info_out, &task_info_outCnt);
    result = v6 == 0;
    if (!v6)
    {
      if (a2)
        *(_QWORD *)a2 = v20;
      if (a3)
        *(_QWORD *)a3 = *((_QWORD *)&v21 + 1);
      if (a1)
      {
        v8 = v12;
LABEL_12:
        *a1 = v8;
      }
    }
  }
  else
  {
    if (a1)
    {
      v12 = 0u;
      v13 = 0u;
      *(_OWORD *)task_info_out = 0u;
      task_info_outCnt = 12;
      v9 = task_info(*MEMORY[0x1E0C83DA0], 0x14u, task_info_out, &task_info_outCnt);
      result = v9 == 0;
      if (v9)
        return result;
      v8 = *(_QWORD *)&task_info_out[2];
      goto LABEL_12;
    }
    return 1;
  }
  return result;
}

void degas::AttributeInstanceTable::~AttributeInstanceTable(degas::AttributeInstanceTable *this)
{
  degas::AttributeInstanceTable::~AttributeInstanceTable(this);
  JUMPOUT(0x1CAA4ADC8);
}

{
  *(_QWORD *)this = &off_1E83E42C0;
  std::shared_ptr<degas::Predicate>::~shared_ptr[abi:ne180100]((uint64_t)this + 168);
  std::shared_ptr<degas::Predicate>::~shared_ptr[abi:ne180100]((uint64_t)this + 152);
  std::shared_ptr<degas::Predicate>::~shared_ptr[abi:ne180100]((uint64_t)this + 136);
  std::shared_ptr<degas::Predicate>::~shared_ptr[abi:ne180100]((uint64_t)this + 120);
  std::shared_ptr<degas::Predicate>::~shared_ptr[abi:ne180100]((uint64_t)this + 104);
  std::shared_ptr<degas::Predicate>::~shared_ptr[abi:ne180100]((uint64_t)this + 88);
  std::shared_ptr<degas::Predicate>::~shared_ptr[abi:ne180100]((uint64_t)this + 72);
  std::shared_ptr<degas::Predicate>::~shared_ptr[abi:ne180100]((uint64_t)this + 56);
  *(_QWORD *)this = off_1E83E43A8;
  *((_QWORD *)this + 4) = 0;
  if (*((char *)this + 31) < 0)
    operator delete(*((void **)this + 1));
}

uint64_t degas::AttributeInstanceTable::createTable(degas::AttributeInstanceTable *this)
{
  int v2;
  char *v3;
  uint64_t v4;
  sqlite3 *v5;
  uint64_t v6;
  void *__p;
  char v9;
  sqlite3_stmt *ppStmt[3];
  _QWORD v11[11];
  char v12;
  uint64_t v13;

  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v11);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v11, (uint64_t)"create table ", 13);
  v2 = *((char *)this + 31);
  if (v2 >= 0)
    v3 = (char *)this + 8;
  else
    v3 = (char *)*((_QWORD *)this + 1);
  if (v2 >= 0)
    v4 = *((unsigned __int8 *)this + 31);
  else
    v4 = *((_QWORD *)this + 2);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v11, (uint64_t)v3, v4);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v11, (uint64_t)" (elementId integer primary key, intValue integer, realValue real, stringValue text, dataType integer)", 102);
  v5 = (sqlite3 *)*((_QWORD *)this + 4);
  std::stringbuf::str();
  degas::Statement::Statement(ppStmt, v5, (uint64_t)&__p);
  if (v9 < 0)
    operator delete(__p);
  v6 = degas::Statement::update(ppStmt);
  degas::Statement::~Statement((degas::Statement *)ppStmt);
  v11[0] = *MEMORY[0x1E0DE4F60];
  *(_QWORD *)((char *)v11 + *(_QWORD *)(v11[0] - 24)) = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 24);
  v11[1] = MEMORY[0x1E0DE4FB8] + 16;
  if (v12 < 0)
    operator delete((void *)v11[9]);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x1CAA4AD98](&v13);
  return v6;
}

void sub_1CA19C948(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16, uint64_t a17, uint64_t a18, char a19)
{
  degas::Statement::~Statement((degas::Statement *)&a16);
  std::ostringstream::~ostringstream((uint64_t)&a19);
  _Unwind_Resume(a1);
}

uint64_t degas::AttributeInstanceTable::deleteEntry(degas::AttributeInstanceTable *this, sqlite3_int64 a2)
{
  sqlite3_stmt ***v3;

  v3 = (sqlite3_stmt ***)degas::AttributeInstanceTable::deleteStatement(this);
  degas::Statement::bindInteger(*v3, 1, a2);
  return degas::Statement::update(*v3);
}

degas::Statement **degas::AttributeInstanceTable::deleteStatement(degas::AttributeInstanceTable *this)
{
  degas::Statement *v2;
  degas::Statement **v3;
  int v4;
  char *v5;
  uint64_t v6;
  sqlite3_stmt **v7;
  sqlite3 *v8;
  void *__p;
  char v11;
  _QWORD v12[11];
  char v13;
  uint64_t v14;

  v3 = (degas::Statement **)((char *)this + 72);
  v2 = (degas::Statement *)*((_QWORD *)this + 9);
  if (!v2)
  {
    std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v12);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, (uint64_t)"delete from ", 12);
    v4 = *((char *)this + 31);
    if (v4 >= 0)
      v5 = (char *)this + 8;
    else
      v5 = (char *)*((_QWORD *)this + 1);
    if (v4 >= 0)
      v6 = *((unsigned __int8 *)this + 31);
    else
      v6 = *((_QWORD *)this + 2);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, (uint64_t)v5, v6);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, (uint64_t)" where elementId=?1", 19);
    v7 = (sqlite3_stmt **)operator new();
    v8 = (sqlite3 *)*((_QWORD *)this + 4);
    std::stringbuf::str();
    degas::Statement::Statement(v7, v8, (uint64_t)&__p);
    std::shared_ptr<degas::Statement>::reset[abi:ne180100]<degas::Statement,void>(v3, (uint64_t)v7);
    if (v11 < 0)
      operator delete(__p);
    v12[0] = *MEMORY[0x1E0DE4F60];
    *(_QWORD *)((char *)v12 + *(_QWORD *)(v12[0] - 24)) = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 24);
    v12[1] = MEMORY[0x1E0DE4FB8] + 16;
    if (v13 < 0)
      operator delete((void *)v12[9]);
    std::streambuf::~streambuf();
    std::ostream::~ostream();
    MEMORY[0x1CAA4AD98](&v14);
    v2 = *v3;
  }
  degas::Statement::prepareForUse(v2);
  return v3;
}

void sub_1CA19CB28(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15)
{
  uint64_t v15;

  MEMORY[0x1CAA4ADC8](v15, 0x1020C4062D53EE8);
  std::ostringstream::~ostringstream((uint64_t)&a15);
  _Unwind_Resume(a1);
}

void std::shared_ptr<degas::Statement>::reset[abi:ne180100]<degas::Statement,void>(_QWORD *a1, uint64_t a2)
{
  std::__shared_weak_count *v3;
  __int128 v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  __int128 v7;

  std::shared_ptr<degas::Statement>::shared_ptr[abi:ne180100]<degas::Statement,void>(&v7, a2);
  v3 = (std::__shared_weak_count *)a1[1];
  v4 = v7;
  *(_QWORD *)&v7 = *a1;
  *((_QWORD *)&v7 + 1) = v3;
  *(_OWORD *)a1 = v4;
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v6 = __ldaxr(p_shared_owners);
    while (__stlxr(v6 - 1, p_shared_owners));
    if (!v6)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
}

uint64_t degas::AttributeInstanceTable::tableSafeName(uint64_t *a1)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD v5[11];
  char v6;
  uint64_t v7;
  char v8;

  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v5);
  v2 = a1[1];
  if (*((char *)a1 + 23) >= 0)
  {
    v3 = *((unsigned __int8 *)a1 + 23);
  }
  else
  {
    a1 = (uint64_t *)*a1;
    v3 = v2;
  }
  for (; v3; --v3)
  {
    if (*(_BYTE *)a1 == 45)
      v8 = 95;
    else
      v8 = *(_BYTE *)a1;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)&v8, 1);
    a1 = (uint64_t *)((char *)a1 + 1);
  }
  std::stringbuf::str();
  v5[0] = *MEMORY[0x1E0DE4F60];
  *(_QWORD *)((char *)v5 + *(_QWORD *)(v5[0] - 24)) = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 24);
  v5[1] = MEMORY[0x1E0DE4FB8] + 16;
  if (v6 < 0)
    operator delete((void *)v5[9]);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  return MEMORY[0x1CAA4AD98](&v7);
}

void sub_1CA19CD8C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::ostringstream::~ostringstream((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t degas::AttributeInstanceTable::AttributeInstanceTable(uint64_t a1, uint64_t a2, uint64_t a3, int a4, char a5, uint64_t a6)
{
  int v12;
  uint64_t v13;
  uint64_t v14;
  const char *v15;
  std::string *v16;
  void *v18[2];
  uint64_t v19;
  void *__p;
  char v21;
  _QWORD v22[11];
  char v23;
  uint64_t v24;

  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v22);
  v12 = *(char *)(a3 + 23);
  if (v12 >= 0)
    v13 = a3;
  else
    v13 = *(_QWORD *)a3;
  if (v12 >= 0)
    v14 = *(unsigned __int8 *)(a3 + 23);
  else
    v14 = *(_QWORD *)(a3 + 8);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v22, v13, v14);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v22, (uint64_t)"-", 1);
  if ((a5 & 1) != 0)
  {
    v15 = "node";
  }
  else
  {
    if ((a5 & 2) == 0)
      goto LABEL_12;
    v15 = "edge";
  }
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v22, (uint64_t)v15, 4);
LABEL_12:
  std::stringbuf::str();
  degas::AttributeInstanceTable::tableSafeName((uint64_t *)&__p);
  if (v21 < 0)
    operator delete(__p);
  v22[0] = *MEMORY[0x1E0DE4F60];
  *(_QWORD *)((char *)v22 + *(_QWORD *)(v22[0] - 24)) = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 24);
  v22[1] = MEMORY[0x1E0DE4FB8] + 16;
  if (v23 < 0)
    operator delete((void *)v22[9]);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x1CAA4AD98](&v24);
  *(_QWORD *)a1 = off_1E83E43A8;
  v16 = (std::string *)(a1 + 8);
  if (SHIBYTE(v19) < 0)
  {
    std::string::__init_copy_ctor_external(v16, (const std::string::value_type *)v18[0], (std::string::size_type)v18[1]);
    *(_QWORD *)(a1 + 32) = a2;
    *(_QWORD *)(a1 + 40) = a6;
    operator delete(v18[0]);
  }
  else
  {
    *(_OWORD *)&v16->__r_.__value_.__l.__data_ = *(_OWORD *)v18;
    *(_QWORD *)(a1 + 24) = v19;
    *(_QWORD *)(a1 + 32) = a2;
    *(_QWORD *)(a1 + 40) = a6;
  }
  *(_QWORD *)a1 = &off_1E83E42C0;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_OWORD *)(a1 + 72) = 0u;
  *(_OWORD *)(a1 + 88) = 0u;
  *(_OWORD *)(a1 + 104) = 0u;
  *(_OWORD *)(a1 + 120) = 0u;
  *(_OWORD *)(a1 + 136) = 0u;
  *(_OWORD *)(a1 + 152) = 0u;
  *(_OWORD *)(a1 + 168) = 0u;
  *(_DWORD *)(a1 + 184) = a4;
  return a1;
}

void sub_1CA19CF68(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,char a22)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

double degas::AttributeInstanceTable::AttributeInstanceTable(degas::AttributeInstanceTable *this, const degas::AttributeInstanceTable *a2)
{
  degas::Table *v3;
  double result;

  v3 = degas::Table::Table(this, a2);
  *(_QWORD *)v3 = &off_1E83E42C0;
  result = 0.0;
  *(_OWORD *)((char *)v3 + 56) = 0u;
  *(_OWORD *)((char *)v3 + 72) = 0u;
  *(_OWORD *)((char *)v3 + 88) = 0u;
  *(_OWORD *)((char *)v3 + 104) = 0u;
  *(_OWORD *)((char *)v3 + 120) = 0u;
  *(_OWORD *)((char *)v3 + 136) = 0u;
  *(_OWORD *)((char *)v3 + 152) = 0u;
  *(_OWORD *)((char *)v3 + 168) = 0u;
  *((_DWORD *)v3 + 46) = *((_DWORD *)a2 + 46);
  return result;
}

{
  degas::Table *v3;
  double result;

  v3 = degas::Table::Table(this, a2);
  *(_QWORD *)v3 = &off_1E83E42C0;
  result = 0.0;
  *(_OWORD *)((char *)v3 + 56) = 0u;
  *(_OWORD *)((char *)v3 + 72) = 0u;
  *(_OWORD *)((char *)v3 + 88) = 0u;
  *(_OWORD *)((char *)v3 + 104) = 0u;
  *(_OWORD *)((char *)v3 + 120) = 0u;
  *(_OWORD *)((char *)v3 + 136) = 0u;
  *(_OWORD *)((char *)v3 + 152) = 0u;
  *(_OWORD *)((char *)v3 + 168) = 0u;
  *((_DWORD *)v3 + 46) = *((_DWORD *)a2 + 46);
  return result;
}

uint64_t degas::AttributeInstanceTable::operator=(uint64_t a1, uint64_t a2)
{
  std::string::operator=((std::string *)(a1 + 8), (const std::string *)(a2 + 8));
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_DWORD *)(a1 + 184) = *(_DWORD *)(a2 + 184);
  return a1;
}

uint64_t degas::AttributeInstanceTable::operator==(uint64_t a1, uint64_t a2)
{
  uint64_t result;

  result = degas::Table::operator==(a1, a2);
  if ((_DWORD)result)
    return *(_DWORD *)(a2 + 184) == *(_DWORD *)(a1 + 184);
  return result;
}

degas::Statement **degas::AttributeInstanceTable::upsertStatement(degas::AttributeInstanceTable *this)
{
  degas::Statement *v2;
  degas::Statement **v3;
  int v4;
  char *v5;
  uint64_t v6;
  sqlite3_stmt **v7;
  sqlite3 *v8;
  void *__p;
  char v11;
  _QWORD v12[11];
  char v13;
  uint64_t v14;

  v3 = (degas::Statement **)((char *)this + 56);
  v2 = (degas::Statement *)*((_QWORD *)this + 7);
  if (!v2)
  {
    std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v12);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, (uint64_t)"insert or replace into ", 23);
    v4 = *((char *)this + 31);
    if (v4 >= 0)
      v5 = (char *)this + 8;
    else
      v5 = (char *)*((_QWORD *)this + 1);
    if (v4 >= 0)
      v6 = *((unsigned __int8 *)this + 31);
    else
      v6 = *((_QWORD *)this + 2);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, (uint64_t)v5, v6);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, (uint64_t)" (elementId, intValue, realValue, stringValue, dataType) values (?1, ?2, ?3, ?4, ?5)", 84);
    v7 = (sqlite3_stmt **)operator new();
    v8 = (sqlite3 *)*((_QWORD *)this + 4);
    std::stringbuf::str();
    degas::Statement::Statement(v7, v8, (uint64_t)&__p);
    std::shared_ptr<degas::Statement>::reset[abi:ne180100]<degas::Statement,void>(v3, (uint64_t)v7);
    if (v11 < 0)
      operator delete(__p);
    v12[0] = *MEMORY[0x1E0DE4F60];
    *(_QWORD *)((char *)v12 + *(_QWORD *)(v12[0] - 24)) = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 24);
    v12[1] = MEMORY[0x1E0DE4FB8] + 16;
    if (v13 < 0)
      operator delete((void *)v12[9]);
    std::streambuf::~streambuf();
    std::ostream::~ostream();
    MEMORY[0x1CAA4AD98](&v14);
    v2 = *v3;
  }
  degas::Statement::prepareForUse(v2);
  return v3;
}

void sub_1CA19D244(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15)
{
  uint64_t v15;

  MEMORY[0x1CAA4ADC8](v15, 0x1020C4062D53EE8);
  std::ostringstream::~ostringstream((uint64_t)&a15);
  _Unwind_Resume(a1);
}

degas::Statement **degas::AttributeInstanceTable::readByIdentifierStatement(degas::AttributeInstanceTable *this)
{
  degas::Statement *v2;
  degas::Statement **v3;
  int v4;
  char *v5;
  uint64_t v6;
  sqlite3_stmt **v7;
  sqlite3 *v8;
  void *__p;
  char v11;
  _QWORD v12[11];
  char v13;
  uint64_t v14;

  v3 = (degas::Statement **)((char *)this + 88);
  v2 = (degas::Statement *)*((_QWORD *)this + 11);
  if (!v2)
  {
    std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v12);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, (uint64_t)"select elementId, intValue, realValue, stringValue, dataType from ", 66);
    v4 = *((char *)this + 31);
    if (v4 >= 0)
      v5 = (char *)this + 8;
    else
      v5 = (char *)*((_QWORD *)this + 1);
    if (v4 >= 0)
      v6 = *((unsigned __int8 *)this + 31);
    else
      v6 = *((_QWORD *)this + 2);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, (uint64_t)v5, v6);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, (uint64_t)" where elementId=?1", 19);
    v7 = (sqlite3_stmt **)operator new();
    v8 = (sqlite3 *)*((_QWORD *)this + 4);
    std::stringbuf::str();
    degas::Statement::Statement(v7, v8, (uint64_t)&__p);
    std::shared_ptr<degas::Statement>::reset[abi:ne180100]<degas::Statement,void>(v3, (uint64_t)v7);
    if (v11 < 0)
      operator delete(__p);
    v12[0] = *MEMORY[0x1E0DE4F60];
    *(_QWORD *)((char *)v12 + *(_QWORD *)(v12[0] - 24)) = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 24);
    v12[1] = MEMORY[0x1E0DE4FB8] + 16;
    if (v13 < 0)
      operator delete((void *)v12[9]);
    std::streambuf::~streambuf();
    std::ostream::~ostream();
    MEMORY[0x1CAA4AD98](&v14);
    v2 = *v3;
  }
  degas::Statement::prepareForUse(v2);
  return v3;
}

void sub_1CA19D404(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15)
{
  uint64_t v15;

  MEMORY[0x1CAA4ADC8](v15, 0x1020C4062D53EE8);
  std::ostringstream::~ostringstream((uint64_t)&a15);
  _Unwind_Resume(a1);
}

degas::Statement **degas::AttributeInstanceTable::readByBitmapStatement(degas::AttributeInstanceTable *this)
{
  degas::Statement *v2;
  degas::Statement **v3;
  int v4;
  char *v5;
  uint64_t v6;
  sqlite3_stmt **v7;
  sqlite3 *v8;
  void *__p;
  char v11;
  _QWORD v12[11];
  char v13;
  uint64_t v14;

  v3 = (degas::Statement **)((char *)this + 104);
  v2 = (degas::Statement *)*((_QWORD *)this + 13);
  if (!v2)
  {
    std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v12);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, (uint64_t)"select v.elementId, v.intValue, v.realValue, v.stringValue, v.dataType from ", 76);
    v4 = *((char *)this + 31);
    if (v4 >= 0)
      v5 = (char *)this + 8;
    else
      v5 = (char *)*((_QWORD *)this + 1);
    if (v4 >= 0)
      v6 = *((unsigned __int8 *)this + 31);
    else
      v6 = *((_QWORD *)this + 2);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, (uint64_t)v5, v6);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, (uint64_t)" v, identifierBitmap(?) b where v.elementId = b.value order by v.elementId", 74);
    v7 = (sqlite3_stmt **)operator new();
    v8 = (sqlite3 *)*((_QWORD *)this + 4);
    std::stringbuf::str();
    degas::Statement::Statement(v7, v8, (uint64_t)&__p);
    std::shared_ptr<degas::Statement>::reset[abi:ne180100]<degas::Statement,void>(v3, (uint64_t)v7);
    if (v11 < 0)
      operator delete(__p);
    v12[0] = *MEMORY[0x1E0DE4F60];
    *(_QWORD *)((char *)v12 + *(_QWORD *)(v12[0] - 24)) = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 24);
    v12[1] = MEMORY[0x1E0DE4FB8] + 16;
    if (v13 < 0)
      operator delete((void *)v12[9]);
    std::streambuf::~streambuf();
    std::ostream::~ostream();
    MEMORY[0x1CAA4AD98](&v14);
    v2 = *v3;
  }
  degas::Statement::prepareForUse(v2);
  return v3;
}

void sub_1CA19D5C4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15)
{
  uint64_t v15;

  MEMORY[0x1CAA4ADC8](v15, 0x1020C4062D53EE8);
  std::ostringstream::~ostringstream((uint64_t)&a15);
  _Unwind_Resume(a1);
}

degas::Statement **degas::AttributeInstanceTable::readByIntValueStatement(degas::AttributeInstanceTable *this)
{
  degas::Statement *v2;
  degas::Statement **v3;
  int v4;
  char *v5;
  uint64_t v6;
  sqlite3_stmt **v7;
  sqlite3 *v8;
  void *__p;
  char v11;
  _QWORD v12[11];
  char v13;
  uint64_t v14;

  v3 = (degas::Statement **)((char *)this + 136);
  v2 = (degas::Statement *)*((_QWORD *)this + 17);
  if (!v2)
  {
    std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v12);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, (uint64_t)"select elementId, intValue, realValue, stringValue, dataType from ", 66);
    v4 = *((char *)this + 31);
    if (v4 >= 0)
      v5 = (char *)this + 8;
    else
      v5 = (char *)*((_QWORD *)this + 1);
    if (v4 >= 0)
      v6 = *((unsigned __int8 *)this + 31);
    else
      v6 = *((_QWORD *)this + 2);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, (uint64_t)v5, v6);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, (uint64_t)" where intValue=?1 order by elementId", 37);
    v7 = (sqlite3_stmt **)operator new();
    v8 = (sqlite3 *)*((_QWORD *)this + 4);
    std::stringbuf::str();
    degas::Statement::Statement(v7, v8, (uint64_t)&__p);
    std::shared_ptr<degas::Statement>::reset[abi:ne180100]<degas::Statement,void>(v3, (uint64_t)v7);
    if (v11 < 0)
      operator delete(__p);
    v12[0] = *MEMORY[0x1E0DE4F60];
    *(_QWORD *)((char *)v12 + *(_QWORD *)(v12[0] - 24)) = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 24);
    v12[1] = MEMORY[0x1E0DE4FB8] + 16;
    if (v13 < 0)
      operator delete((void *)v12[9]);
    std::streambuf::~streambuf();
    std::ostream::~ostream();
    MEMORY[0x1CAA4AD98](&v14);
    v2 = *v3;
  }
  degas::Statement::prepareForUse(v2);
  return v3;
}

void sub_1CA19D784(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15)
{
  uint64_t v15;

  MEMORY[0x1CAA4ADC8](v15, 0x1020C4062D53EE8);
  std::ostringstream::~ostringstream((uint64_t)&a15);
  _Unwind_Resume(a1);
}

degas::Statement **degas::AttributeInstanceTable::readByRealValueStatement(degas::AttributeInstanceTable *this)
{
  degas::Statement *v2;
  degas::Statement **v3;
  int v4;
  char *v5;
  uint64_t v6;
  sqlite3_stmt **v7;
  sqlite3 *v8;
  void *__p;
  char v11;
  _QWORD v12[11];
  char v13;
  uint64_t v14;

  v3 = (degas::Statement **)((char *)this + 152);
  v2 = (degas::Statement *)*((_QWORD *)this + 19);
  if (!v2)
  {
    std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v12);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, (uint64_t)"select elementId, intValue, realValue, stringValue, dataType from ", 66);
    v4 = *((char *)this + 31);
    if (v4 >= 0)
      v5 = (char *)this + 8;
    else
      v5 = (char *)*((_QWORD *)this + 1);
    if (v4 >= 0)
      v6 = *((unsigned __int8 *)this + 31);
    else
      v6 = *((_QWORD *)this + 2);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, (uint64_t)v5, v6);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, (uint64_t)" where realValue=?1 order by elementId", 38);
    v7 = (sqlite3_stmt **)operator new();
    v8 = (sqlite3 *)*((_QWORD *)this + 4);
    std::stringbuf::str();
    degas::Statement::Statement(v7, v8, (uint64_t)&__p);
    std::shared_ptr<degas::Statement>::reset[abi:ne180100]<degas::Statement,void>(v3, (uint64_t)v7);
    if (v11 < 0)
      operator delete(__p);
    v12[0] = *MEMORY[0x1E0DE4F60];
    *(_QWORD *)((char *)v12 + *(_QWORD *)(v12[0] - 24)) = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 24);
    v12[1] = MEMORY[0x1E0DE4FB8] + 16;
    if (v13 < 0)
      operator delete((void *)v12[9]);
    std::streambuf::~streambuf();
    std::ostream::~ostream();
    MEMORY[0x1CAA4AD98](&v14);
    v2 = *v3;
  }
  degas::Statement::prepareForUse(v2);
  return v3;
}

void sub_1CA19D944(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15)
{
  uint64_t v15;

  MEMORY[0x1CAA4ADC8](v15, 0x1020C4062D53EE8);
  std::ostringstream::~ostringstream((uint64_t)&a15);
  _Unwind_Resume(a1);
}

degas::Statement **degas::AttributeInstanceTable::readByStringValueStatement(degas::AttributeInstanceTable *this)
{
  degas::Statement *v2;
  degas::Statement **v3;
  int v4;
  char *v5;
  uint64_t v6;
  sqlite3_stmt **v7;
  sqlite3 *v8;
  void *__p;
  char v11;
  _QWORD v12[11];
  char v13;
  uint64_t v14;

  v3 = (degas::Statement **)((char *)this + 168);
  v2 = (degas::Statement *)*((_QWORD *)this + 21);
  if (!v2)
  {
    std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v12);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, (uint64_t)"select elementId, intValue, realValue, stringValue, dataType from ", 66);
    v4 = *((char *)this + 31);
    if (v4 >= 0)
      v5 = (char *)this + 8;
    else
      v5 = (char *)*((_QWORD *)this + 1);
    if (v4 >= 0)
      v6 = *((unsigned __int8 *)this + 31);
    else
      v6 = *((_QWORD *)this + 2);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, (uint64_t)v5, v6);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, (uint64_t)" where stringValue=?1 order by elementId", 40);
    v7 = (sqlite3_stmt **)operator new();
    v8 = (sqlite3 *)*((_QWORD *)this + 4);
    std::stringbuf::str();
    degas::Statement::Statement(v7, v8, (uint64_t)&__p);
    std::shared_ptr<degas::Statement>::reset[abi:ne180100]<degas::Statement,void>(v3, (uint64_t)v7);
    if (v11 < 0)
      operator delete(__p);
    v12[0] = *MEMORY[0x1E0DE4F60];
    *(_QWORD *)((char *)v12 + *(_QWORD *)(v12[0] - 24)) = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 24);
    v12[1] = MEMORY[0x1E0DE4FB8] + 16;
    if (v13 < 0)
      operator delete((void *)v12[9]);
    std::streambuf::~streambuf();
    std::ostream::~ostream();
    MEMORY[0x1CAA4AD98](&v14);
    v2 = *v3;
  }
  degas::Statement::prepareForUse(v2);
  return v3;
}

void sub_1CA19DB04(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15)
{
  uint64_t v15;

  MEMORY[0x1CAA4ADC8](v15, 0x1020C4062D53EE8);
  std::ostringstream::~ostringstream((uint64_t)&a15);
  _Unwind_Resume(a1);
}

degas::Statement **degas::AttributeInstanceTable::readAllStatement(degas::AttributeInstanceTable *this)
{
  degas::Statement *v2;
  degas::Statement **v3;
  int v4;
  char *v5;
  uint64_t v6;
  sqlite3_stmt **v7;
  sqlite3 *v8;
  void *__p;
  char v11;
  _QWORD v12[11];
  char v13;
  uint64_t v14;

  v3 = (degas::Statement **)((char *)this + 120);
  v2 = (degas::Statement *)*((_QWORD *)this + 15);
  if (!v2)
  {
    std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v12);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, (uint64_t)"select elementId, intValue, realValue, stringValue, dataType from ", 66);
    v4 = *((char *)this + 31);
    if (v4 >= 0)
      v5 = (char *)this + 8;
    else
      v5 = (char *)*((_QWORD *)this + 1);
    if (v4 >= 0)
      v6 = *((unsigned __int8 *)this + 31);
    else
      v6 = *((_QWORD *)this + 2);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, (uint64_t)v5, v6);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, (uint64_t)" order by elementId", 19);
    v7 = (sqlite3_stmt **)operator new();
    v8 = (sqlite3 *)*((_QWORD *)this + 4);
    std::stringbuf::str();
    degas::Statement::Statement(v7, v8, (uint64_t)&__p);
    std::shared_ptr<degas::Statement>::reset[abi:ne180100]<degas::Statement,void>(v3, (uint64_t)v7);
    if (v11 < 0)
      operator delete(__p);
    v12[0] = *MEMORY[0x1E0DE4F60];
    *(_QWORD *)((char *)v12 + *(_QWORD *)(v12[0] - 24)) = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 24);
    v12[1] = MEMORY[0x1E0DE4FB8] + 16;
    if (v13 < 0)
      operator delete((void *)v12[9]);
    std::streambuf::~streambuf();
    std::ostream::~ostream();
    MEMORY[0x1CAA4AD98](&v14);
    v2 = *v3;
  }
  degas::Statement::prepareForUse(v2);
  return v3;
}

void sub_1CA19DCC4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15)
{
  uint64_t v15;

  MEMORY[0x1CAA4ADC8](v15, 0x1020C4062D53EE8);
  std::ostringstream::~ostringstream((uint64_t)&a15);
  _Unwind_Resume(a1);
}

uint64_t degas::AttributeInstanceTable::insertOrUpdate(degas::AttributeInstanceTable *this, sqlite3_int64 a2, sqlite3_int64 a3)
{
  sqlite3_stmt ***v5;

  v5 = (sqlite3_stmt ***)degas::AttributeInstanceTable::upsertStatement(this);
  degas::Statement::bindInteger(*v5, 1, a2);
  degas::Statement::bindInteger(*v5, 2, a3);
  degas::Statement::bindNull(*v5, 3);
  degas::Statement::bindNull(*v5, 4);
  degas::Statement::bindInteger(*v5, 5, 1);
  return degas::Statement::update(*v5);
}

uint64_t degas::AttributeInstanceTable::insertOrUpdateUnsigned(degas::AttributeInstanceTable *this, sqlite3_int64 a2, sqlite3_int64 a3)
{
  sqlite3_stmt ***v5;

  v5 = (sqlite3_stmt ***)degas::AttributeInstanceTable::upsertStatement(this);
  degas::Statement::bindInteger(*v5, 1, a2);
  degas::Statement::bindInteger(*v5, 2, a3);
  degas::Statement::bindNull(*v5, 3);
  degas::Statement::bindNull(*v5, 4);
  degas::Statement::bindInteger(*v5, 5, 4);
  return degas::Statement::update(*v5);
}

uint64_t degas::AttributeInstanceTable::insertOrUpdate(degas::AttributeInstanceTable *this, sqlite3_int64 a2, double a3)
{
  sqlite3_stmt ***v5;

  v5 = (sqlite3_stmt ***)degas::AttributeInstanceTable::upsertStatement(this);
  degas::Statement::bindInteger(*v5, 1, a2);
  degas::Statement::bindNull(*v5, 2);
  degas::Statement::bindDouble(*v5, 3, a3);
  degas::Statement::bindNull(*v5, 4);
  degas::Statement::bindInteger(*v5, 5, 2);
  return degas::Statement::update(*v5);
}

uint64_t degas::AttributeInstanceTable::insertOrUpdate(degas::AttributeInstanceTable *a1, sqlite3_int64 a2, uint64_t *a3)
{
  sqlite3_stmt ***v5;

  v5 = (sqlite3_stmt ***)degas::AttributeInstanceTable::upsertStatement(a1);
  degas::Statement::bindInteger(*v5, 1, a2);
  degas::Statement::bindNull(*v5, 2);
  degas::Statement::bindNull(*v5, 3);
  degas::Statement::bindString((uint64_t)*v5, 4, a3);
  degas::Statement::bindInteger(*v5, 5, 3);
  return degas::Statement::update(*v5);
}

sqlite3_stmt ***degas::AttributeInstanceTable::prepareStatementToReadByIdentifier(degas::AttributeInstanceTable *this, sqlite3_int64 a2)
{
  sqlite3_stmt ***v3;

  v3 = (sqlite3_stmt ***)degas::AttributeInstanceTable::readByIdentifierStatement(this);
  degas::Statement::bindInteger(*v3, 1, a2);
  return v3;
}

sqlite3_stmt ***degas::AttributeInstanceTable::prepareStatementToReadByBitmap(degas::AttributeInstanceTable *this, Bitmap *a2)
{
  sqlite3_stmt ***v3;

  v3 = (sqlite3_stmt ***)degas::AttributeInstanceTable::readByBitmapStatement(this);
  degas::Statement::bindBitmapPointer(*v3, 1, a2);
  return v3;
}

sqlite3_stmt ***degas::AttributeInstanceTable::prepareStatementToReadByValue(degas::AttributeInstanceTable *this, sqlite3_int64 a2)
{
  sqlite3_stmt ***v3;

  v3 = (sqlite3_stmt ***)degas::AttributeInstanceTable::readByIntValueStatement(this);
  degas::Statement::bindInteger(*v3, 1, a2);
  return v3;
}

sqlite3_stmt ***degas::AttributeInstanceTable::prepareStatementToReadByValue(degas::AttributeInstanceTable *this, double a2)
{
  sqlite3_stmt ***v3;

  v3 = (sqlite3_stmt ***)degas::AttributeInstanceTable::readByRealValueStatement(this);
  degas::Statement::bindDouble(*v3, 1, a2);
  return v3;
}

uint64_t *degas::AttributeInstanceTable::prepareStatementToReadByValue(degas::AttributeInstanceTable *a1, uint64_t *a2)
{
  uint64_t *v3;

  v3 = (uint64_t *)degas::AttributeInstanceTable::readByStringValueStatement(a1);
  degas::Statement::bindString(*v3, 1, a2);
  return v3;
}

_QWORD *degas::AttributeInstanceCursor::AttributeInstanceCursor(_QWORD *this)
{
  *this = 0;
  this[1] = 0;
  return this;
}

degas::AttributeInstanceCursor *degas::AttributeInstanceCursor::AttributeInstanceCursor(degas::AttributeInstanceCursor *this, degas::AttributeInstanceTable *a2)
{
  degas::Statement **AllStatement;
  degas::Statement *v4;
  unint64_t *v5;
  unint64_t v6;

  AllStatement = degas::AttributeInstanceTable::readAllStatement(a2);
  v4 = AllStatement[1];
  *(_QWORD *)this = *AllStatement;
  *((_QWORD *)this + 1) = v4;
  if (v4)
  {
    v5 = (unint64_t *)((char *)v4 + 8);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  return this;
}

{
  degas::Statement **AllStatement;
  degas::Statement *v4;
  unint64_t *v5;
  unint64_t v6;

  AllStatement = degas::AttributeInstanceTable::readAllStatement(a2);
  v4 = AllStatement[1];
  *(_QWORD *)this = *AllStatement;
  *((_QWORD *)this + 1) = v4;
  if (v4)
  {
    v5 = (unint64_t *)((char *)v4 + 8);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  return this;
}

degas::AttributeInstanceCursor *degas::AttributeInstanceCursor::AttributeInstanceCursor(degas::AttributeInstanceCursor *this, sqlite3_int64 a2, degas::AttributeInstanceTable *a3)
{
  degas::Statement **v5;
  degas::Statement *v6;
  unint64_t *v7;
  unint64_t v8;

  v5 = degas::AttributeInstanceTable::readByIdentifierStatement(a3);
  degas::Statement::bindInteger((sqlite3_stmt **)*v5, 1, a2);
  v6 = v5[1];
  *(_QWORD *)this = *v5;
  *((_QWORD *)this + 1) = v6;
  if (v6)
  {
    v7 = (unint64_t *)((char *)v6 + 8);
    do
      v8 = __ldxr(v7);
    while (__stxr(v8 + 1, v7));
  }
  return this;
}

degas::AttributeInstanceCursor *degas::AttributeInstanceCursor::AttributeInstanceCursor(degas::AttributeInstanceCursor *this, Bitmap *a2, degas::AttributeInstanceTable *a3)
{
  degas::Statement **v5;
  degas::Statement *v6;
  unint64_t *v7;
  unint64_t v8;

  v5 = degas::AttributeInstanceTable::readByBitmapStatement(a3);
  degas::Statement::bindBitmapPointer((sqlite3_stmt **)*v5, 1, a2);
  v6 = v5[1];
  *(_QWORD *)this = *v5;
  *((_QWORD *)this + 1) = v6;
  if (v6)
  {
    v7 = (unint64_t *)((char *)v6 + 8);
    do
      v8 = __ldxr(v7);
    while (__stxr(v8 + 1, v7));
  }
  return this;
}

_QWORD *degas::AttributeInstanceCursor::setForValue(degas::AttributeInstanceCursor *this, sqlite3_int64 a2, degas::AttributeInstanceTable *a3)
{
  degas::Statement **v5;

  v5 = degas::AttributeInstanceTable::readByIntValueStatement(a3);
  degas::Statement::bindInteger((sqlite3_stmt **)*v5, 1, a2);
  return std::shared_ptr<degas::Statement>::operator=[abi:ne180100](this, (uint64_t)*v5, (uint64_t)v5[1]);
}

_QWORD *degas::AttributeInstanceCursor::setForValue(degas::AttributeInstanceCursor *this, double a2, degas::AttributeInstanceTable *a3)
{
  degas::Statement **v5;

  v5 = degas::AttributeInstanceTable::readByRealValueStatement(a3);
  degas::Statement::bindDouble((sqlite3_stmt **)*v5, 1, a2);
  return std::shared_ptr<degas::Statement>::operator=[abi:ne180100](this, (uint64_t)*v5, (uint64_t)v5[1]);
}

_QWORD *degas::AttributeInstanceCursor::setForValue(_QWORD *a1, uint64_t *a2, degas::AttributeInstanceTable *this)
{
  uint64_t *v5;

  v5 = (uint64_t *)degas::AttributeInstanceTable::readByStringValueStatement(this);
  degas::Statement::bindString(*v5, 1, a2);
  return std::shared_ptr<degas::Statement>::operator=[abi:ne180100](a1, *v5, v5[1]);
}

sqlite3_int64 degas::AttributeInstanceCursor::elementId(sqlite3_stmt ***this)
{
  return sqlite3_column_int64(**this, 0);
}

sqlite3_int64 degas::AttributeInstanceCursor::integerValue(sqlite3_stmt ***this)
{
  return sqlite3_column_int64(**this, 1);
}

double degas::AttributeInstanceCursor::realValue(sqlite3_stmt ***this)
{
  return sqlite3_column_double(**this, 2);
}

void degas::AttributeInstanceCursor::stringValue(sqlite3_stmt ***a1, uint64_t a2)
{
  degas::Statement::stringColumnValue(*a1, 3, a2);
}

sqlite3_int64 degas::AttributeInstanceCursor::valueType(sqlite3_stmt ***this)
{
  return sqlite3_column_int64(**this, 4);
}

void sub_1CA19EB28(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, ...)
{
  va_list va;

  va_start(va, a15);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

_QWORD *degas::Table::Table(_QWORD *a1, __int128 *a2, uint64_t a3, uint64_t a4)
{
  std::string *v7;
  __int128 v8;

  *a1 = off_1E83E43A8;
  v7 = (std::string *)(a1 + 1);
  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v7, *(const std::string::value_type **)a2, *((_QWORD *)a2 + 1));
  }
  else
  {
    v8 = *a2;
    v7->__r_.__value_.__r.__words[2] = *((_QWORD *)a2 + 2);
    *(_OWORD *)&v7->__r_.__value_.__l.__data_ = v8;
  }
  a1[4] = a3;
  a1[5] = a4;
  return a1;
}

degas::Table *degas::Table::Table(degas::Table *this, const degas::Table *a2)
{
  std::string *v4;
  __int128 v5;

  *(_QWORD *)this = off_1E83E43A8;
  v4 = (std::string *)((char *)this + 8);
  if (*((char *)a2 + 31) < 0)
  {
    std::string::__init_copy_ctor_external(v4, *((const std::string::value_type **)a2 + 1), *((_QWORD *)a2 + 2));
  }
  else
  {
    v5 = *(_OWORD *)((char *)a2 + 8);
    v4->__r_.__value_.__r.__words[2] = *((_QWORD *)a2 + 3);
    *(_OWORD *)&v4->__r_.__value_.__l.__data_ = v5;
  }
  *((_OWORD *)this + 2) = *((_OWORD *)a2 + 2);
  return this;
}

void degas::Table::~Table(degas::Table *this)
{
  *(_QWORD *)this = off_1E83E43A8;
  *((_QWORD *)this + 4) = 0;
  if (*((char *)this + 31) < 0)
    operator delete(*((void **)this + 1));
}

uint64_t degas::Table::operator=(uint64_t a1, uint64_t a2)
{
  std::string::operator=((std::string *)(a1 + 8), (const std::string *)(a2 + 8));
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  return a1;
}

uint64_t degas::Table::operator==(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  int v5;
  const void **v6;
  unsigned __int8 *v7;
  unsigned __int8 *v8;
  unsigned __int8 *v9;
  uint64_t v10;
  int v11;
  int v12;
  int v13;
  int v14;
  BOOL v16;
  uint64_t result;

  if (*(_QWORD *)(a1 + 32) != *(_QWORD *)(a2 + 32))
    return 0;
  v2 = *(unsigned __int8 *)(a1 + 31);
  if ((v2 & 0x80u) == 0)
    v3 = *(unsigned __int8 *)(a1 + 31);
  else
    v3 = *(_QWORD *)(a1 + 16);
  v4 = *(unsigned __int8 *)(a2 + 31);
  v5 = (char)v4;
  if ((v4 & 0x80u) != 0)
    v4 = *(_QWORD *)(a2 + 16);
  if (v3 != v4)
    return 0;
  v6 = (const void **)(a1 + 8);
  v9 = *(unsigned __int8 **)(a2 + 8);
  v7 = (unsigned __int8 *)(a2 + 8);
  v8 = v9;
  if (v5 < 0)
    v7 = v8;
  if ((v2 & 0x80) != 0)
    return memcmp(*v6, v7, *(_QWORD *)(a1 + 16)) == 0;
  if (!*(_BYTE *)(a1 + 31))
    return 1;
  v10 = v2 - 1;
  do
  {
    v12 = *(unsigned __int8 *)v6;
    v6 = (const void **)((char *)v6 + 1);
    v11 = v12;
    v14 = *v7++;
    v13 = v14;
    v16 = v10-- != 0;
    result = v11 == v13;
  }
  while (v11 == v13 && v16);
  return result;
}

BOOL degas::Table::checkTableExists(degas::Table *this)
{
  sqlite3 *v2;
  int v3;
  void *__p[2];
  char v6;
  sqlite3_stmt *ppStmt[3];

  v2 = (sqlite3 *)*((_QWORD *)this + 4);
  std::string::basic_string[abi:ne180100]<0>(__p, "select * from sqlite_master where type = 'table' and name = ?");
  degas::Statement::Statement(ppStmt, v2, (uint64_t)__p);
  if (v6 < 0)
    operator delete(__p[0]);
  degas::Statement::bindString((uint64_t)ppStmt, 1, (uint64_t *)this + 1);
  v3 = degas::Statement::next(ppStmt);
  if (v3 == 1)
    degas::Statement::finishStatementCursor((degas::Statement *)ppStmt);
  degas::Statement::~Statement((degas::Statement *)ppStmt);
  return v3 == 1;
}

void sub_1CA19FAA4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15)
{
  degas::Statement::~Statement((degas::Statement *)&a15);
  _Unwind_Resume(a1);
}

uint64_t degas::Table::rowCount(degas::Table *this, sqlite3_int64 *a2)
{
  int v4;
  char *v5;
  uint64_t v6;
  sqlite3 *v7;
  char *v8;
  uint64_t v9;
  void *v11;
  char v12;
  void *__p[2];
  char v14;
  sqlite3_stmt *ppStmt[3];
  _QWORD v16[11];
  char v17;
  uint64_t v18;

  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v16);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, (uint64_t)"select count(*) from ", 21);
  v4 = *((char *)this + 31);
  if (v4 >= 0)
    v5 = (char *)this + 8;
  else
    v5 = (char *)*((_QWORD *)this + 1);
  if (v4 >= 0)
    v6 = *((unsigned __int8 *)this + 31);
  else
    v6 = *((_QWORD *)this + 2);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, (uint64_t)v5, v6);
  v7 = (sqlite3 *)*((_QWORD *)this + 4);
  std::stringbuf::str();
  if (v12 >= 0)
    v8 = (char *)&v11;
  else
    v8 = (char *)v11;
  std::string::basic_string[abi:ne180100]<0>(__p, v8);
  degas::Statement::Statement(ppStmt, v7, (uint64_t)__p);
  if (v14 < 0)
    operator delete(__p[0]);
  if (v12 < 0)
    operator delete(v11);
  v9 = degas::Statement::next(ppStmt);
  if ((_DWORD)v9 == 1)
  {
    *a2 = sqlite3_column_int64(ppStmt[0], 0);
    degas::Statement::finishStatementCursor((degas::Statement *)ppStmt);
    v9 = 0;
  }
  degas::Statement::~Statement((degas::Statement *)ppStmt);
  v16[0] = *MEMORY[0x1E0DE4F60];
  *(_QWORD *)((char *)v16 + *(_QWORD *)(v16[0] - 24)) = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 24);
  v16[1] = MEMORY[0x1E0DE4FB8] + 16;
  if (v17 < 0)
    operator delete((void *)v16[9]);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x1CAA4AD98](&v18);
  return v9;
}

void sub_1CA19FC4C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,char a21,uint64_t a22,uint64_t a23,char a24)
{
  if (a20 < 0)
    operator delete(__p);
  if (a14 < 0)
    operator delete(a9);
  std::ostringstream::~ostringstream((uint64_t)&a24);
  _Unwind_Resume(a1);
}

const char *degas::Table::errorMessage(sqlite3 **this)
{
  return sqlite3_errmsg(this[4]);
}

uint64_t degas::Table::statementIdentifier(degas::Table *this, int a2, unsigned int a3)
{
  return ((_DWORD)this << 16) | (a2 << 8) | a3;
}

{
  return (a2 << 8) | (*((unsigned __int8 *)this + 48) << 16) | a3;
}

void sub_1CA1A0610(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1CA1A06A8(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1CA1A08FC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1CA1A0C74(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1CA1A0EF4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1CA1A1C2C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_list va;

  va_start(va, a11);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1CA1A1EEC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t __Block_byref_object_copy__2618(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void __Block_byref_object_dispose__2619(uint64_t a1)
{

}

void sub_1CA1A2D14(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1CA1A2E0C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t MAInverseEdgeType(uint64_t a1)
{
  if ((unint64_t)(a1 - 1) > 2)
    return 0;
  else
    return qword_1CA1FE818[a1 - 1];
}

void sub_1CA1A3260(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1CA1A3488(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t __Block_byref_object_copy__2705(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void __Block_byref_object_dispose__2706(uint64_t a1)
{

}

void degas::LabelTable::~LabelTable(degas::LabelTable *this)
{
  *(_QWORD *)this = off_1E83E43A8;
  *((_QWORD *)this + 4) = 0;
  if (*((char *)this + 31) < 0)
    operator delete(*((void **)this + 1));
}

{
  *(_QWORD *)this = off_1E83E43A8;
  *((_QWORD *)this + 4) = 0;
  if (*((char *)this + 31) < 0)
    operator delete(*((void **)this + 1));
  JUMPOUT(0x1CAA4ADC8);
}

{
  *(_QWORD *)this = off_1E83E43A8;
  *((_QWORD *)this + 4) = 0;
  if (*((char *)this + 31) < 0)
    operator delete(*((void **)this + 1));
}

uint64_t degas::LabelTable::createTable(degas::LabelTable *this)
{
  sqlite3 *v1;
  uint64_t v2;
  void *__p[2];
  char v5;
  sqlite3_stmt *ppStmt[3];

  v1 = (sqlite3 *)*((_QWORD *)this + 4);
  std::string::basic_string[abi:ne180100]<0>(__p, "create table Label (identifier integer primary key autoincrement, name text, nodeIds blob, edgeIds blob)");
  degas::Statement::Statement(ppStmt, v1, (uint64_t)__p);
  if (v5 < 0)
    operator delete(__p[0]);
  v2 = degas::Statement::update(ppStmt);
  degas::Statement::~Statement((degas::Statement *)ppStmt);
  return v2;
}

void sub_1CA1A37CC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15)
{
  degas::Statement::~Statement((degas::Statement *)&a15);
  _Unwind_Resume(a1);
}

uint64_t degas::LabelTable::deleteEntry(degas::LabelTable *this, sqlite3_int64 a2)
{
  unsigned int v3;
  uint64_t v4;
  uint64_t *Statement;
  _QWORD v7[5];

  v3 = (*((unsigned __int8 *)this + 48) << 16) | 0x500;
  v4 = *((_QWORD *)this + 5);
  v7[0] = MEMORY[0x1E0C809B0];
  v7[1] = 0x40000000;
  v7[2] = ___ZNK5degas10LabelTable15deleteStatementEv_block_invoke;
  v7[3] = &__block_descriptor_tmp_6_2709;
  v7[4] = this;
  Statement = degas::StatementCache::getStatement(v4, v3, (uint64_t)v7);
  degas::Statement::bindInteger((sqlite3_stmt **)*Statement, 1, a2);
  return degas::Statement::update((sqlite3_stmt **)*Statement);
}

uint64_t *degas::LabelTable::deleteStatement(degas::LabelTable *this)
{
  unsigned int v1;
  uint64_t v2;
  _QWORD v4[5];

  v1 = (*((unsigned __int8 *)this + 48) << 16) | 0x500;
  v2 = *((_QWORD *)this + 5);
  v4[0] = MEMORY[0x1E0C809B0];
  v4[1] = 0x40000000;
  v4[2] = ___ZNK5degas10LabelTable15deleteStatementEv_block_invoke;
  v4[3] = &__block_descriptor_tmp_6_2709;
  v4[4] = this;
  return degas::StatementCache::getStatement(v2, v1, (uint64_t)v4);
}

void ___ZNK5degas10LabelTable15deleteStatementEv_block_invoke(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v3;
  sqlite3_stmt **v4;
  sqlite3 *v5;
  void *__p[2];
  char v7;

  v3 = *(_QWORD *)(a1 + 32);
  v4 = (sqlite3_stmt **)operator new();
  v5 = *(sqlite3 **)(v3 + 32);
  std::string::basic_string[abi:ne180100]<0>(__p, "delete from Label where identifier=?1");
  degas::Statement::Statement(v4, v5, (uint64_t)__p);
  std::shared_ptr<degas::Statement>::shared_ptr[abi:ne180100]<degas::Statement,void>(a2, (uint64_t)v4);
  if (v7 < 0)
    operator delete(__p[0]);
}

void sub_1CA1A3978(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  uint64_t v15;

  MEMORY[0x1CAA4ADC8](v15, 0x1020C4062D53EE8);
  _Unwind_Resume(a1);
}

degas::LabelTable *degas::LabelTable::LabelTable(degas::LabelTable *this, sqlite3 *a2, degas::StatementCache *a3)
{
  std::string *v6;
  int v7;
  void *__p[2];
  uint64_t v10;

  std::string::basic_string[abi:ne180100]<0>(__p, "Label");
  *(_QWORD *)this = off_1E83E43A8;
  v6 = (std::string *)((char *)this + 8);
  if (SHIBYTE(v10) < 0)
  {
    std::string::__init_copy_ctor_external(v6, (const std::string::value_type *)__p[0], (std::string::size_type)__p[1]);
    v7 = SHIBYTE(v10);
    *((_QWORD *)this + 4) = a2;
    *((_QWORD *)this + 5) = a3;
    if (v7 < 0)
      operator delete(__p[0]);
  }
  else
  {
    *(_OWORD *)&v6->__r_.__value_.__l.__data_ = *(_OWORD *)__p;
    *((_QWORD *)this + 3) = v10;
    *((_QWORD *)this + 4) = a2;
    *((_QWORD *)this + 5) = a3;
  }
  *(_QWORD *)this = off_1E83E45C0;
  *((_BYTE *)this + 48) = 4;
  return this;
}

void sub_1CA1A3A68(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t *degas::LabelTable::insertStatement(degas::LabelTable *this)
{
  unsigned int v1;
  uint64_t v2;
  _QWORD v4[5];

  v1 = (*((unsigned __int8 *)this + 48) << 16) | 0x300;
  v2 = *((_QWORD *)this + 5);
  v4[0] = MEMORY[0x1E0C809B0];
  v4[1] = 0x40000000;
  v4[2] = ___ZNK5degas10LabelTable15insertStatementEv_block_invoke;
  v4[3] = &__block_descriptor_tmp_2714;
  v4[4] = this;
  return degas::StatementCache::getStatement(v2, v1, (uint64_t)v4);
}

void ___ZNK5degas10LabelTable15insertStatementEv_block_invoke(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v3;
  sqlite3_stmt **v4;
  sqlite3 *v5;
  void *__p[2];
  char v7;

  v3 = *(_QWORD *)(a1 + 32);
  v4 = (sqlite3_stmt **)operator new();
  v5 = *(sqlite3 **)(v3 + 32);
  std::string::basic_string[abi:ne180100]<0>(__p, "insert into Label (identifier, name, nodeIds, edgeIds) values(?1, ?2, ?3, ?4)");
  degas::Statement::Statement(v4, v5, (uint64_t)__p);
  std::shared_ptr<degas::Statement>::shared_ptr[abi:ne180100]<degas::Statement,void>(a2, (uint64_t)v4);
  if (v7 < 0)
    operator delete(__p[0]);
}

void sub_1CA1A3BC0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  uint64_t v15;

  MEMORY[0x1CAA4ADC8](v15, 0x1020C4062D53EE8);
  _Unwind_Resume(a1);
}

uint64_t *degas::LabelTable::updateStatement(degas::LabelTable *this)
{
  unsigned int v1;
  uint64_t v2;
  _QWORD v4[5];

  v1 = (*((unsigned __int8 *)this + 48) << 16) | 0x400;
  v2 = *((_QWORD *)this + 5);
  v4[0] = MEMORY[0x1E0C809B0];
  v4[1] = 0x40000000;
  v4[2] = ___ZNK5degas10LabelTable15updateStatementEv_block_invoke;
  v4[3] = &__block_descriptor_tmp_4_2716;
  v4[4] = this;
  return degas::StatementCache::getStatement(v2, v1, (uint64_t)v4);
}

void ___ZNK5degas10LabelTable15updateStatementEv_block_invoke(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v3;
  sqlite3_stmt **v4;
  sqlite3 *v5;
  void *__p[2];
  char v7;

  v3 = *(_QWORD *)(a1 + 32);
  v4 = (sqlite3_stmt **)operator new();
  v5 = *(sqlite3 **)(v3 + 32);
  std::string::basic_string[abi:ne180100]<0>(__p, "update Label set nodeIds=?2, edgeIds=?3 where identifier=?1");
  degas::Statement::Statement(v4, v5, (uint64_t)__p);
  std::shared_ptr<degas::Statement>::shared_ptr[abi:ne180100]<degas::Statement,void>(a2, (uint64_t)v4);
  if (v7 < 0)
    operator delete(__p[0]);
}

void sub_1CA1A3D00(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  uint64_t v15;

  MEMORY[0x1CAA4ADC8](v15, 0x1020C4062D53EE8);
  _Unwind_Resume(a1);
}

uint64_t *degas::LabelTable::readByIdentifierStatement(degas::LabelTable *this)
{
  unsigned int v1;
  uint64_t v2;
  _QWORD v4[5];

  v1 = (*((unsigned __int8 *)this + 48) << 16) | 0x600;
  v2 = *((_QWORD *)this + 5);
  v4[0] = MEMORY[0x1E0C809B0];
  v4[1] = 0x40000000;
  v4[2] = ___ZNK5degas10LabelTable25readByIdentifierStatementEv_block_invoke;
  v4[3] = &__block_descriptor_tmp_8_2718;
  v4[4] = this;
  return degas::StatementCache::getStatement(v2, v1, (uint64_t)v4);
}

void ___ZNK5degas10LabelTable25readByIdentifierStatementEv_block_invoke(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v3;
  sqlite3_stmt **v4;
  sqlite3 *v5;
  void *__p[2];
  char v7;

  v3 = *(_QWORD *)(a1 + 32);
  v4 = (sqlite3_stmt **)operator new();
  v5 = *(sqlite3 **)(v3 + 32);
  std::string::basic_string[abi:ne180100]<0>(__p, "select identifier, name, nodeIds, edgeIds from Label where identifier=?1");
  degas::Statement::Statement(v4, v5, (uint64_t)__p);
  std::shared_ptr<degas::Statement>::shared_ptr[abi:ne180100]<degas::Statement,void>(a2, (uint64_t)v4);
  if (v7 < 0)
    operator delete(__p[0]);
}

void sub_1CA1A3E40(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  uint64_t v15;

  MEMORY[0x1CAA4ADC8](v15, 0x1020C4062D53EE8);
  _Unwind_Resume(a1);
}

uint64_t *degas::LabelTable::readAfterIdentifierStatement(degas::LabelTable *this)
{
  unsigned int v1;
  uint64_t v2;
  _QWORD v4[5];

  v1 = (*((unsigned __int8 *)this + 48) << 16) | 0x801;
  v2 = *((_QWORD *)this + 5);
  v4[0] = MEMORY[0x1E0C809B0];
  v4[1] = 0x40000000;
  v4[2] = ___ZNK5degas10LabelTable28readAfterIdentifierStatementEv_block_invoke;
  v4[3] = &__block_descriptor_tmp_10_2720;
  v4[4] = this;
  return degas::StatementCache::getStatement(v2, v1, (uint64_t)v4);
}

void ___ZNK5degas10LabelTable28readAfterIdentifierStatementEv_block_invoke(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v3;
  sqlite3_stmt **v4;
  sqlite3 *v5;
  void *__p[2];
  char v7;

  v3 = *(_QWORD *)(a1 + 32);
  v4 = (sqlite3_stmt **)operator new();
  v5 = *(sqlite3 **)(v3 + 32);
  std::string::basic_string[abi:ne180100]<0>(__p, "select identifier, name, nodeIds, edgeIds from Label where identifier > ?1");
  degas::Statement::Statement(v4, v5, (uint64_t)__p);
  std::shared_ptr<degas::Statement>::shared_ptr[abi:ne180100]<degas::Statement,void>(a2, (uint64_t)v4);
  if (v7 < 0)
    operator delete(__p[0]);
}

void sub_1CA1A3F80(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  uint64_t v15;

  MEMORY[0x1CAA4ADC8](v15, 0x1020C4062D53EE8);
  _Unwind_Resume(a1);
}

uint64_t *degas::LabelTable::readByBitmapStatement(degas::LabelTable *this)
{
  unsigned int v1;
  uint64_t v2;
  _QWORD v4[5];

  v1 = (*((unsigned __int8 *)this + 48) << 16) | 0x800;
  v2 = *((_QWORD *)this + 5);
  v4[0] = MEMORY[0x1E0C809B0];
  v4[1] = 0x40000000;
  v4[2] = ___ZNK5degas10LabelTable21readByBitmapStatementEv_block_invoke;
  v4[3] = &__block_descriptor_tmp_12_2722;
  v4[4] = this;
  return degas::StatementCache::getStatement(v2, v1, (uint64_t)v4);
}

void ___ZNK5degas10LabelTable21readByBitmapStatementEv_block_invoke(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v3;
  sqlite3_stmt **v4;
  sqlite3 *v5;
  void *__p[2];
  char v7;

  v3 = *(_QWORD *)(a1 + 32);
  v4 = (sqlite3_stmt **)operator new();
  v5 = *(sqlite3 **)(v3 + 32);
  std::string::basic_string[abi:ne180100]<0>(__p, "select l.identifier, l.name, l.nodeIds, l.edgeIds from Label l, identifierBitmap(?) b where l.identifier = b.value");
  degas::Statement::Statement(v4, v5, (uint64_t)__p);
  std::shared_ptr<degas::Statement>::shared_ptr[abi:ne180100]<degas::Statement,void>(a2, (uint64_t)v4);
  if (v7 < 0)
    operator delete(__p[0]);
}

void sub_1CA1A40C0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  uint64_t v15;

  MEMORY[0x1CAA4ADC8](v15, 0x1020C4062D53EE8);
  _Unwind_Resume(a1);
}

uint64_t *degas::LabelTable::readByNameStatement(degas::LabelTable *this)
{
  unsigned int v1;
  uint64_t v2;
  _QWORD v4[5];

  v1 = (*((unsigned __int8 *)this + 48) << 16) | 0xB00;
  v2 = *((_QWORD *)this + 5);
  v4[0] = MEMORY[0x1E0C809B0];
  v4[1] = 0x40000000;
  v4[2] = ___ZNK5degas10LabelTable19readByNameStatementEv_block_invoke;
  v4[3] = &__block_descriptor_tmp_14_2724;
  v4[4] = this;
  return degas::StatementCache::getStatement(v2, v1, (uint64_t)v4);
}

void ___ZNK5degas10LabelTable19readByNameStatementEv_block_invoke(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v3;
  sqlite3_stmt **v4;
  sqlite3 *v5;
  void *__p[2];
  char v7;

  v3 = *(_QWORD *)(a1 + 32);
  v4 = (sqlite3_stmt **)operator new();
  v5 = *(sqlite3 **)(v3 + 32);
  std::string::basic_string[abi:ne180100]<0>(__p, "select identifier, name, nodeIds, edgeIds from Label where name=?1");
  degas::Statement::Statement(v4, v5, (uint64_t)__p);
  std::shared_ptr<degas::Statement>::shared_ptr[abi:ne180100]<degas::Statement,void>(a2, (uint64_t)v4);
  if (v7 < 0)
    operator delete(__p[0]);
}

void sub_1CA1A4200(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  uint64_t v15;

  MEMORY[0x1CAA4ADC8](v15, 0x1020C4062D53EE8);
  _Unwind_Resume(a1);
}

uint64_t *degas::LabelTable::readAllStatement(degas::LabelTable *this)
{
  unsigned int v1;
  uint64_t v2;
  _QWORD v4[5];

  v1 = (*((unsigned __int8 *)this + 48) << 16) | 0x700;
  v2 = *((_QWORD *)this + 5);
  v4[0] = MEMORY[0x1E0C809B0];
  v4[1] = 0x40000000;
  v4[2] = ___ZNK5degas10LabelTable16readAllStatementEv_block_invoke;
  v4[3] = &__block_descriptor_tmp_16_2726;
  v4[4] = this;
  return degas::StatementCache::getStatement(v2, v1, (uint64_t)v4);
}

void ___ZNK5degas10LabelTable16readAllStatementEv_block_invoke(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v3;
  sqlite3_stmt **v4;
  sqlite3 *v5;
  void *__p[2];
  char v7;

  v3 = *(_QWORD *)(a1 + 32);
  v4 = (sqlite3_stmt **)operator new();
  v5 = *(sqlite3 **)(v3 + 32);
  std::string::basic_string[abi:ne180100]<0>(__p, "select identifier, name, nodeIds, edgeIds from Label order by identifier");
  degas::Statement::Statement(v4, v5, (uint64_t)__p);
  std::shared_ptr<degas::Statement>::shared_ptr[abi:ne180100]<degas::Statement,void>(a2, (uint64_t)v4);
  if (v7 < 0)
    operator delete(__p[0]);
}

void sub_1CA1A4340(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  uint64_t v15;

  MEMORY[0x1CAA4ADC8](v15, 0x1020C4062D53EE8);
  _Unwind_Resume(a1);
}

uint64_t degas::LabelTable::insert(uint64_t a1, sqlite3_int64 *a2, uint64_t *a3)
{
  unsigned int v6;
  uint64_t v7;
  uint64_t *Statement;
  sqlite3_stmt **v9;
  uint64_t v10;
  BOOL v11;
  __int128 v13;
  _QWORD v14[5];
  void **v15;

  v6 = (*(unsigned __int8 *)(a1 + 48) << 16) | 0x300;
  v7 = *(_QWORD *)(a1 + 40);
  *(_QWORD *)&v13 = MEMORY[0x1E0C809B0];
  *((_QWORD *)&v13 + 1) = 0x40000000;
  v14[0] = ___ZNK5degas10LabelTable15insertStatementEv_block_invoke;
  v14[1] = &__block_descriptor_tmp_2714;
  v14[2] = a1;
  Statement = degas::StatementCache::getStatement(v7, v6, (uint64_t)&v13);
  v9 = (sqlite3_stmt **)*Statement;
  if (*a2)
    degas::Statement::bindInteger(v9, 1, *a2);
  else
    degas::Statement::bindNull(v9, 1);
  degas::Statement::bindString(*Statement, 2, a3);
  v13 = 0u;
  memset(v14, 0, 25);
  degas::Statement::bindBitmap((degas::Statement *)*Statement, (const Bitmap *)3, (const degas::Bitmap *)&v13);
  degas::Statement::bindBitmap((degas::Statement *)*Statement, (const Bitmap *)4, (const degas::Bitmap *)&v13);
  v10 = degas::Statement::update((sqlite3_stmt **)*Statement);
  if ((_DWORD)v10)
    v11 = 0;
  else
    v11 = *a2 == 0;
  if (v11)
    *a2 = sqlite3_last_insert_rowid(*(sqlite3 **)(a1 + 32));
  v15 = (void **)v14;
  std::vector<degas::BitsetPtr>::__destroy_vector::operator()[abi:ne180100](&v15);
  return v10;
}

void sub_1CA1A44A0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  uint64_t v11;

  *(_QWORD *)(v11 - 40) = &a11;
  std::vector<degas::BitsetPtr>::__destroy_vector::operator()[abi:ne180100]((void ***)(v11 - 40));
  _Unwind_Resume(a1);
}

uint64_t degas::LabelTable::update(degas::LabelTable *this, sqlite3_int64 a2, const degas::Bitmap *a3, const degas::Bitmap *a4)
{
  unsigned int v7;
  uint64_t v8;
  uint64_t *Statement;
  _QWORD v11[5];

  v7 = (*((unsigned __int8 *)this + 48) << 16) | 0x400;
  v8 = *((_QWORD *)this + 5);
  v11[0] = MEMORY[0x1E0C809B0];
  v11[1] = 0x40000000;
  v11[2] = ___ZNK5degas10LabelTable15updateStatementEv_block_invoke;
  v11[3] = &__block_descriptor_tmp_4_2716;
  v11[4] = this;
  Statement = degas::StatementCache::getStatement(v8, v7, (uint64_t)v11);
  degas::Statement::bindInteger((sqlite3_stmt **)*Statement, 1, a2);
  degas::Statement::bindBitmap((degas::Statement *)*Statement, (const Bitmap *)2, a3);
  degas::Statement::bindBitmap((degas::Statement *)*Statement, (const Bitmap *)3, a4);
  return degas::Statement::update((sqlite3_stmt **)*Statement);
}

uint64_t *degas::LabelTable::prepareStatementToReadByIdentifier(degas::LabelTable *this, sqlite3_int64 a2)
{
  unsigned int v3;
  uint64_t v4;
  uint64_t *Statement;
  _QWORD v7[5];

  v3 = (*((unsigned __int8 *)this + 48) << 16) | 0x600;
  v4 = *((_QWORD *)this + 5);
  v7[0] = MEMORY[0x1E0C809B0];
  v7[1] = 0x40000000;
  v7[2] = ___ZNK5degas10LabelTable25readByIdentifierStatementEv_block_invoke;
  v7[3] = &__block_descriptor_tmp_8_2718;
  v7[4] = this;
  Statement = degas::StatementCache::getStatement(v4, v3, (uint64_t)v7);
  degas::Statement::bindInteger((sqlite3_stmt **)*Statement, 1, a2);
  return Statement;
}

uint64_t *degas::LabelTable::prepareStatementToReadAfterIdentifier(degas::LabelTable *this, sqlite3_int64 a2)
{
  unsigned int v3;
  uint64_t v4;
  uint64_t *Statement;
  _QWORD v7[5];

  v3 = (*((unsigned __int8 *)this + 48) << 16) | 0x801;
  v4 = *((_QWORD *)this + 5);
  v7[0] = MEMORY[0x1E0C809B0];
  v7[1] = 0x40000000;
  v7[2] = ___ZNK5degas10LabelTable28readAfterIdentifierStatementEv_block_invoke;
  v7[3] = &__block_descriptor_tmp_10_2720;
  v7[4] = this;
  Statement = degas::StatementCache::getStatement(v4, v3, (uint64_t)v7);
  degas::Statement::bindInteger((sqlite3_stmt **)*Statement, 1, a2);
  return Statement;
}

uint64_t *degas::LabelTable::prepareStatementToReadByBitmap(degas::LabelTable *this, Bitmap *a2)
{
  unsigned int v3;
  uint64_t v4;
  uint64_t *Statement;
  _QWORD v7[5];

  v3 = (*((unsigned __int8 *)this + 48) << 16) | 0x800;
  v4 = *((_QWORD *)this + 5);
  v7[0] = MEMORY[0x1E0C809B0];
  v7[1] = 0x40000000;
  v7[2] = ___ZNK5degas10LabelTable21readByBitmapStatementEv_block_invoke;
  v7[3] = &__block_descriptor_tmp_12_2722;
  v7[4] = this;
  Statement = degas::StatementCache::getStatement(v4, v3, (uint64_t)v7);
  degas::Statement::bindBitmapPointer((sqlite3_stmt **)*Statement, 1, a2);
  return Statement;
}

uint64_t *degas::LabelTable::prepareStatementToReadByName(uint64_t a1, uint64_t *a2)
{
  unsigned int v3;
  uint64_t v4;
  uint64_t *Statement;
  _QWORD v7[5];

  v3 = (*(unsigned __int8 *)(a1 + 48) << 16) | 0xB00;
  v4 = *(_QWORD *)(a1 + 40);
  v7[0] = MEMORY[0x1E0C809B0];
  v7[1] = 0x40000000;
  v7[2] = ___ZNK5degas10LabelTable19readByNameStatementEv_block_invoke;
  v7[3] = &__block_descriptor_tmp_14_2724;
  v7[4] = a1;
  Statement = degas::StatementCache::getStatement(v4, v3, (uint64_t)v7);
  degas::Statement::bindString(*Statement, 1, a2);
  return Statement;
}

uint64_t *degas::LabelTable::prepareStatementToReadAll(degas::LabelTable *this)
{
  unsigned int v1;
  uint64_t v2;
  _QWORD v4[5];

  v1 = (*((unsigned __int8 *)this + 48) << 16) | 0x700;
  v2 = *((_QWORD *)this + 5);
  v4[0] = MEMORY[0x1E0C809B0];
  v4[1] = 0x40000000;
  v4[2] = ___ZNK5degas10LabelTable16readAllStatementEv_block_invoke;
  v4[3] = &__block_descriptor_tmp_16_2726;
  v4[4] = this;
  return degas::StatementCache::getStatement(v2, v1, (uint64_t)v4);
}

degas::LabelCursor *degas::LabelCursor::LabelCursor(degas::LabelCursor *this, sqlite3_int64 a2, const degas::LabelTable *a3)
{
  unsigned int v5;
  uint64_t v6;
  uint64_t *Statement;
  uint64_t v8;
  unint64_t *v9;
  unint64_t v10;
  _QWORD v12[5];

  v5 = (*((unsigned __int8 *)a3 + 48) << 16) | 0x600;
  v6 = *((_QWORD *)a3 + 5);
  v12[0] = MEMORY[0x1E0C809B0];
  v12[1] = 0x40000000;
  v12[2] = ___ZNK5degas10LabelTable25readByIdentifierStatementEv_block_invoke;
  v12[3] = &__block_descriptor_tmp_8_2718;
  v12[4] = a3;
  Statement = degas::StatementCache::getStatement(v6, v5, (uint64_t)v12);
  degas::Statement::bindInteger((sqlite3_stmt **)*Statement, 1, a2);
  *(_QWORD *)this = *Statement;
  v8 = Statement[1];
  *((_QWORD *)this + 1) = v8;
  if (v8)
  {
    v9 = (unint64_t *)(v8 + 8);
    do
      v10 = __ldxr(v9);
    while (__stxr(v10 + 1, v9));
  }
  return this;
}

uint64_t *degas::LabelCursor::LabelCursor(uint64_t *a1, sqlite3_int64 a2, uint64_t a3, int a4)
{
  unsigned int v6;
  uint64_t v7;
  void (*v8)(uint64_t@<X0>, _QWORD *@<X8>);
  void *v9;
  uint64_t *Statement;
  uint64_t v11;
  unint64_t *v12;
  unint64_t v13;
  uint64_t v15;
  uint64_t v16;
  void (*v17)(uint64_t@<X0>, _QWORD *@<X8>);
  void *v18;
  uint64_t v19;

  if (a4 == 5)
  {
    v6 = (*(unsigned __int8 *)(a3 + 48) << 16) | 0x801;
    v7 = *(_QWORD *)(a3 + 40);
    v15 = MEMORY[0x1E0C809B0];
    v8 = ___ZNK5degas10LabelTable28readAfterIdentifierStatementEv_block_invoke;
    v16 = 0x40000000;
    v9 = &__block_descriptor_tmp_10_2720;
  }
  else
  {
    v6 = (*(unsigned __int8 *)(a3 + 48) << 16) | 0x600;
    v7 = *(_QWORD *)(a3 + 40);
    v15 = MEMORY[0x1E0C809B0];
    v8 = ___ZNK5degas10LabelTable25readByIdentifierStatementEv_block_invoke;
    v16 = 0x40000000;
    v9 = &__block_descriptor_tmp_8_2718;
  }
  v17 = v8;
  v18 = v9;
  v19 = a3;
  Statement = degas::StatementCache::getStatement(v7, v6, (uint64_t)&v15);
  degas::Statement::bindInteger((sqlite3_stmt **)*Statement, 1, a2);
  *a1 = *Statement;
  v11 = Statement[1];
  a1[1] = v11;
  if (v11)
  {
    v12 = (unint64_t *)(v11 + 8);
    do
      v13 = __ldxr(v12);
    while (__stxr(v13 + 1, v12));
  }
  return a1;
}

degas::LabelCursor *degas::LabelCursor::LabelCursor(degas::LabelCursor *this, Bitmap *a2, const degas::LabelTable *a3)
{
  unsigned int v5;
  uint64_t v6;
  uint64_t *Statement;
  uint64_t v8;
  unint64_t *v9;
  unint64_t v10;
  _QWORD v12[5];

  v5 = (*((unsigned __int8 *)a3 + 48) << 16) | 0x800;
  v6 = *((_QWORD *)a3 + 5);
  v12[0] = MEMORY[0x1E0C809B0];
  v12[1] = 0x40000000;
  v12[2] = ___ZNK5degas10LabelTable21readByBitmapStatementEv_block_invoke;
  v12[3] = &__block_descriptor_tmp_12_2722;
  v12[4] = a3;
  Statement = degas::StatementCache::getStatement(v6, v5, (uint64_t)v12);
  degas::Statement::bindBitmapPointer((sqlite3_stmt **)*Statement, 1, a2);
  *(_QWORD *)this = *Statement;
  v8 = Statement[1];
  *((_QWORD *)this + 1) = v8;
  if (v8)
  {
    v9 = (unint64_t *)(v8 + 8);
    do
      v10 = __ldxr(v9);
    while (__stxr(v10 + 1, v9));
  }
  return this;
}

uint64_t *degas::LabelCursor::LabelCursor(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  unsigned int v5;
  uint64_t v6;
  uint64_t *Statement;
  uint64_t v8;
  unint64_t *v9;
  unint64_t v10;
  _QWORD v12[5];

  v5 = (*(unsigned __int8 *)(a3 + 48) << 16) | 0xB00;
  v6 = *(_QWORD *)(a3 + 40);
  v12[0] = MEMORY[0x1E0C809B0];
  v12[1] = 0x40000000;
  v12[2] = ___ZNK5degas10LabelTable19readByNameStatementEv_block_invoke;
  v12[3] = &__block_descriptor_tmp_14_2724;
  v12[4] = a3;
  Statement = degas::StatementCache::getStatement(v6, v5, (uint64_t)v12);
  degas::Statement::bindString(*Statement, 1, a2);
  *a1 = *Statement;
  v8 = Statement[1];
  a1[1] = v8;
  if (v8)
  {
    v9 = (unint64_t *)(v8 + 8);
    do
      v10 = __ldxr(v9);
    while (__stxr(v10 + 1, v9));
  }
  return a1;
}

degas::LabelCursor *degas::LabelCursor::LabelCursor(degas::LabelCursor *this, const degas::LabelTable *a2)
{
  unsigned int v3;
  uint64_t v4;
  uint64_t *Statement;
  uint64_t v6;
  unint64_t *v7;
  unint64_t v8;
  _QWORD v10[5];

  v3 = (*((unsigned __int8 *)a2 + 48) << 16) | 0x700;
  v4 = *((_QWORD *)a2 + 5);
  v10[0] = MEMORY[0x1E0C809B0];
  v10[1] = 0x40000000;
  v10[2] = ___ZNK5degas10LabelTable16readAllStatementEv_block_invoke;
  v10[3] = &__block_descriptor_tmp_16_2726;
  v10[4] = a2;
  Statement = degas::StatementCache::getStatement(v4, v3, (uint64_t)v10);
  *(_QWORD *)this = *Statement;
  v6 = Statement[1];
  *((_QWORD *)this + 1) = v6;
  if (v6)
  {
    v7 = (unint64_t *)(v6 + 8);
    do
      v8 = __ldxr(v7);
    while (__stxr(v8 + 1, v7));
  }
  return this;
}

{
  unsigned int v3;
  uint64_t v4;
  uint64_t *Statement;
  uint64_t v6;
  unint64_t *v7;
  unint64_t v8;
  _QWORD v10[5];

  v3 = (*((unsigned __int8 *)a2 + 48) << 16) | 0x700;
  v4 = *((_QWORD *)a2 + 5);
  v10[0] = MEMORY[0x1E0C809B0];
  v10[1] = 0x40000000;
  v10[2] = ___ZNK5degas10LabelTable16readAllStatementEv_block_invoke;
  v10[3] = &__block_descriptor_tmp_16_2726;
  v10[4] = a2;
  Statement = degas::StatementCache::getStatement(v4, v3, (uint64_t)v10);
  *(_QWORD *)this = *Statement;
  v6 = Statement[1];
  *((_QWORD *)this + 1) = v6;
  if (v6)
  {
    v7 = (unint64_t *)(v6 + 8);
    do
      v8 = __ldxr(v7);
    while (__stxr(v8 + 1, v7));
  }
  return this;
}

sqlite3_int64 degas::LabelCursor::labelId(sqlite3_stmt ***this)
{
  return sqlite3_column_int64(**this, 0);
}

void degas::LabelCursor::name(sqlite3_stmt ***a1, uint64_t a2)
{
  degas::Statement::stringColumnValue(*a1, 1, a2);
}

void degas::LabelCursor::nodeIds(sqlite3_stmt ***this, degas::Bitmap *a2)
{
  degas::Statement::bitmapColumnValue(*this, 2, a2);
}

const void *degas::LabelCursor::literalNodeIds(sqlite3_stmt ***this)
{
  return sqlite3_column_blob(**this, 2);
}

void degas::LabelCursor::edgeIds(sqlite3_stmt ***this, degas::Bitmap *a2)
{
  degas::Statement::bitmapColumnValue(*this, 3, a2);
}

const void *degas::LabelCursor::literalEdgeIds(sqlite3_stmt ***this)
{
  return sqlite3_column_blob(**this, 3);
}

int32x2_t degas::IOAccountingEntry::operator-=(int32x2_t *a1, int32x2_t *a2)
{
  int32x2_t result;

  result = vsub_s32(*a1, *a2);
  *a1 = result;
  a1[1].i32[0] -= a2[1].i32[0];
  return result;
}

int32x2_t degas::IOAccountingEntry::operator+=(int32x2_t *a1, int32x2_t *a2)
{
  int32x2_t result;

  result = vadd_s32(*a1, *a2);
  *a1 = result;
  a1[1].i32[0] += a2[1].i32[0];
  return result;
}

uint64_t degas::IOAccountingEntry::totalCacheActivity(degas::IOAccountingEntry *this)
{
  return (*((_DWORD *)this + 1) + *(_DWORD *)this + *((_DWORD *)this + 2));
}

uint64_t degas::StepSpecification::StepSpecification(uint64_t result, int a2, _QWORD *a3)
{
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;

  *(_DWORD *)result = a2;
  v3 = a3[1];
  *(_QWORD *)(result + 8) = *a3;
  *(_QWORD *)(result + 16) = v3;
  if (v3)
  {
    v4 = (unint64_t *)(v3 + 8);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  *(_QWORD *)(result + 24) = 0;
  *(_QWORD *)(result + 32) = 0;
  return result;
}

{
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;

  *(_DWORD *)result = a2;
  v3 = a3[1];
  *(_QWORD *)(result + 8) = *a3;
  *(_QWORD *)(result + 16) = v3;
  if (v3)
  {
    v4 = (unint64_t *)(v3 + 8);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  *(_QWORD *)(result + 24) = 0;
  *(_QWORD *)(result + 32) = 0;
  return result;
}

uint64_t degas::StepSpecification::StepSpecification(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  unint64_t *v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t *v6;
  unint64_t v7;

  *(_DWORD *)result = *(_DWORD *)a2;
  v2 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(result + 8) = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(result + 16) = v2;
  if (v2)
  {
    v3 = (unint64_t *)(v2 + 8);
    do
      v4 = __ldxr(v3);
    while (__stxr(v4 + 1, v3));
  }
  v5 = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(result + 24) = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(result + 32) = v5;
  if (v5)
  {
    v6 = (unint64_t *)(v5 + 8);
    do
      v7 = __ldxr(v6);
    while (__stxr(v7 + 1, v6));
  }
  return result;
}

{
  uint64_t v2;
  unint64_t *v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t *v6;
  unint64_t v7;

  *(_DWORD *)result = *(_DWORD *)a2;
  v2 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(result + 8) = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(result + 16) = v2;
  if (v2)
  {
    v3 = (unint64_t *)(v2 + 8);
    do
      v4 = __ldxr(v3);
    while (__stxr(v4 + 1, v3));
  }
  v5 = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(result + 24) = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(result + 32) = v5;
  if (v5)
  {
    v6 = (unint64_t *)(v5 + 8);
    do
      v7 = __ldxr(v6);
    while (__stxr(v7 + 1, v6));
  }
  return result;
}

uint64_t degas::StepSpecification::operator=(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  unint64_t *v6;
  unint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;

  *(_DWORD *)a1 = *(_DWORD *)a2;
  v5 = *(_QWORD *)(a2 + 8);
  v4 = *(_QWORD *)(a2 + 16);
  if (v4)
  {
    v6 = (unint64_t *)(v4 + 8);
    do
      v7 = __ldxr(v6);
    while (__stxr(v7 + 1, v6));
  }
  v8 = *(std::__shared_weak_count **)(a1 + 16);
  *(_QWORD *)(a1 + 8) = v5;
  *(_QWORD *)(a1 + 16) = v4;
  if (v8)
  {
    p_shared_owners = (unint64_t *)&v8->__shared_owners_;
    do
      v10 = __ldaxr(p_shared_owners);
    while (__stlxr(v10 - 1, p_shared_owners));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }
  std::shared_ptr<degas::Statement>::operator=[abi:ne180100]((_QWORD *)(a1 + 24), *(_QWORD *)(a2 + 24), *(_QWORD *)(a2 + 32));
  return a1;
}

BOOL degas::StepSpecification::operator==(uint64_t a1, uint64_t a2)
{
  return *(_DWORD *)a2 == *(_DWORD *)a1
      && *(_QWORD *)(a2 + 8) == *(_QWORD *)(a1 + 8)
      && *(_QWORD *)(a2 + 24) == *(_QWORD *)(a1 + 24);
}

_QWORD *degas::StepSpecification::setTargetNodeFilter(uint64_t a1, uint64_t *a2)
{
  return std::shared_ptr<degas::Statement>::operator=[abi:ne180100]((_QWORD *)(a1 + 24), *a2, a2[1]);
}

BOOL degas::StepSpecification::hasSomeFilter(degas::StepSpecification *this)
{
  return *(_DWORD *)this || *((_QWORD *)this + 3) != 0;
}

uint64_t degas::StepSpecification::appendSourceNodesForEdges(degas::StepSpecification *this, degas::Database *a2, Bitmap *a3, degas::Bitmap *a4)
{
  sqlite3_int64 v7;
  int v8;
  uint64_t v10;
  degas::Statement *v12[2];

  degas::EdgeCursor::EdgeCursor(v12);
  degas::EdgeCursor::setForIdentifiers((degas::EdgeCursor *)v12, a3, (degas::Database *)((char *)a2 + 248));
  while (degas::Statement::next((sqlite3_stmt **)v12[0]) == 1)
  {
    v7 = sqlite3_column_int64(*(sqlite3_stmt **)v12[0], 2);
    degas::Bitmap::setBit(a4, v7);
  }
  v8 = *((_DWORD *)v12[0] + 4);
  if ((v8 - 100) < 2 || v8 == 0)
    v10 = 0;
  else
    v10 = 7;
  degas::Cursor::~Cursor(v12);
  return v10;
}

void sub_1CA1A4FC4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, degas::Statement *a9)
{
  degas::Cursor::~Cursor(&a9);
  _Unwind_Resume(a1);
}

uint64_t degas::StepSpecification::appendTargetNodesForEdges(degas::StepSpecification *this, degas::Database *a2, Bitmap *a3, degas::Bitmap *a4)
{
  sqlite3_int64 v7;
  int v8;
  uint64_t v10;
  degas::Statement *v12[2];

  degas::EdgeCursor::EdgeCursor(v12);
  degas::EdgeCursor::setForIdentifiers((degas::EdgeCursor *)v12, a3, (degas::Database *)((char *)a2 + 248));
  while (degas::Statement::next((sqlite3_stmt **)v12[0]) == 1)
  {
    v7 = sqlite3_column_int64(*(sqlite3_stmt **)v12[0], 3);
    degas::Bitmap::setBit(a4, v7);
  }
  v8 = *((_DWORD *)v12[0] + 4);
  if ((v8 - 100) < 2 || v8 == 0)
    v10 = 0;
  else
    v10 = 7;
  degas::Cursor::~Cursor(v12);
  return v10;
}

void sub_1CA1A5088(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, degas::Statement *a9)
{
  degas::Cursor::~Cursor(&a9);
  _Unwind_Resume(a1);
}

uint64_t degas::StepSpecification::performStepWithoutPathRecording(degas::StepSpecification *this, degas::Database *a2, Bitmap *a3, degas::Bitmap *a4)
{
  uint64_t v8;
  uint64_t appended;
  int v10;
  degas::StepSpecification *v11;
  degas::StepSpecification *v12;
  uint64_t v13;
  __int128 v15;
  _BYTE v16[32];
  __int128 v17;
  _BYTE v18[32];
  degas::Statement *v19[2];
  __int128 v20;
  _BYTE v21[32];
  Bitmap v22;
  Bitmap v23;
  void **v24;

  v8 = *((_QWORD *)this + 1);
  memset(&v23, 0, 41);
  memset(&v22, 0, 41);
  v20 = 0u;
  memset(v21, 0, 25);
  if (!v8
    || (appended = (*(uint64_t (**)(uint64_t, __int128 *))(*(_QWORD *)v8 + 16))(v8, &v20), !(_DWORD)appended))
  {
    degas::NodeCursor::NodeCursor(v19);
    degas::NodeCursor::setForIdentifiers((degas::NodeCursor *)v19, a3, (degas::Database *)((char *)a2 + 192));
    v17 = 0u;
    memset(v18, 0, 25);
    while (degas::Statement::next((sqlite3_stmt **)v19[0]) == 1)
    {
      v10 = *(_DWORD *)this;
      if (*(_DWORD *)this <= 1u)
      {
        degas::Statement::bitmapColumnValue((sqlite3_stmt **)v19[0], 3, (degas::Bitmap *)&v23);
        if (v8)
          degas::Bitmap::intersectWith<degas::Bitmap>((degas::Bitmap *)&v23, (degas::Bitmap *)&v20);
        if (v23._bitSets.__begin_ != v23._bitSets.__end_)
        {
          appended = degas::StepSpecification::appendTargetNodesForEdges(v11, a2, &v23, (degas::Bitmap *)&v17);
          if ((_DWORD)appended)
            goto LABEL_22;
        }
        v10 = *(_DWORD *)this;
      }
      if ((v10 | 2) == 2)
      {
        degas::Statement::bitmapColumnValue((sqlite3_stmt **)v19[0], 2, (degas::Bitmap *)&v22);
        if (v8)
          degas::Bitmap::intersectWith<degas::Bitmap>((degas::Bitmap *)&v22, (degas::Bitmap *)&v20);
        if (v22._bitSets.__begin_ != v22._bitSets.__end_)
        {
          appended = degas::StepSpecification::appendSourceNodesForEdges(v12, a2, &v22, (degas::Bitmap *)&v17);
          if ((_DWORD)appended)
            goto LABEL_22;
        }
      }
    }
    v13 = *((_QWORD *)this + 3);
    if (v13)
    {
      v15 = 0u;
      memset(v16, 0, 25);
      appended = (*(uint64_t (**)(uint64_t, __int128 *))(*(_QWORD *)v13 + 16))(v13, &v15);
      if ((_DWORD)appended)
      {
        v24 = (void **)v16;
        std::vector<degas::BitsetPtr>::__destroy_vector::operator()[abi:ne180100](&v24);
LABEL_22:
        *(_QWORD *)&v15 = v18;
        std::vector<degas::BitsetPtr>::__destroy_vector::operator()[abi:ne180100]((void ***)&v15);
        degas::Cursor::~Cursor(v19);
        goto LABEL_23;
      }
      degas::Bitmap::intersectWith<degas::Bitmap>((degas::Bitmap *)&v17, (degas::Bitmap *)&v15);
      v24 = (void **)v16;
      std::vector<degas::BitsetPtr>::__destroy_vector::operator()[abi:ne180100](&v24);
    }
    degas::Bitmap::operator=(a4, &v17);
    appended = 0;
    goto LABEL_22;
  }
LABEL_23:
  *(_QWORD *)&v17 = v21;
  std::vector<degas::BitsetPtr>::__destroy_vector::operator()[abi:ne180100]((void ***)&v17);
  *(_QWORD *)&v20 = &v22._bitSets;
  std::vector<degas::BitsetPtr>::__destroy_vector::operator()[abi:ne180100]((void ***)&v20);
  v22._bitCount = (unint64_t)&v23._bitSets;
  std::vector<degas::BitsetPtr>::__destroy_vector::operator()[abi:ne180100]((void ***)&v22);
  return appended;
}

void sub_1CA1A52E0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void **a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,degas::Statement *a21,uint64_t a22,void **a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,void **a29,uint64_t a30,uint64_t a31)
{
  uint64_t v31;

  a9 = (void **)&a17;
  std::vector<degas::BitsetPtr>::__destroy_vector::operator()[abi:ne180100](&a9);
  degas::Cursor::~Cursor(&a21);
  a15 = (void **)&a25;
  std::vector<degas::BitsetPtr>::__destroy_vector::operator()[abi:ne180100](&a15);
  a23 = (void **)&a31;
  std::vector<degas::BitsetPtr>::__destroy_vector::operator()[abi:ne180100](&a23);
  a29 = (void **)(v31 - 112);
  std::vector<degas::BitsetPtr>::__destroy_vector::operator()[abi:ne180100](&a29);
  _Unwind_Resume(a1);
}

uint64_t degas::StepSpecification::performStepWithUncountedPathRecording(degas::StepSpecification *this, degas::Database *a2, const degas::UncountedPathCollection *a3, degas::UncountedPathCollection *a4)
{
  uint64_t v7;
  uint64_t v8;
  __int128 v9;
  uint64_t appended;
  sqlite3_int64 v11;
  uint64_t i;
  uint64_t v13;
  int v14;
  degas::StepSpecification *v15;
  degas::StepSpecification *v16;
  unint64_t v17;
  char *v19;
  unint64_t v20;
  unint64_t v22;
  unint64_t v26;
  unint64_t v27;
  uint64_t v28;
  unint64_t v29;
  unint64_t v30;
  uint64_t v31;
  __int128 v32;
  _QWORD v33[4];
  degas::Statement *v34[2];
  __int128 v35;
  _OWORD v36[2];
  __int128 v37;
  _BYTE v38[32];
  Bitmap v39;
  Bitmap v40;

  v7 = *((_QWORD *)this + 1);
  v8 = *((_QWORD *)this + 3);
  v9 = 0uLL;
  memset(&v40, 0, 41);
  memset(&v39, 0, 41);
  v37 = 0u;
  memset(v38, 0, 25);
  if (!v7
    || (appended = (*(uint64_t (**)(uint64_t, __int128 *))(*(_QWORD *)v7 + 16))(v7, &v37),
        v9 = 0uLL,
        !(_DWORD)appended))
  {
    *(_OWORD *)((char *)v36 + 9) = v9;
    v35 = v9;
    v36[0] = v9;
    if (v8)
    {
      appended = (*(uint64_t (**)(_QWORD, __int128 *))(**((_QWORD **)this + 3) + 16))(*((_QWORD *)this + 3), &v35);
      if ((_DWORD)appended)
        goto LABEL_52;
    }
    degas::NodeCursor::NodeCursor(v34);
    degas::NodeCursor::setForIdentifiers((degas::NodeCursor *)v34, (Bitmap *)((char *)a3 + 24), (degas::Database *)((char *)a2 + 192));
    v32 = 0u;
    memset(v33, 0, 25);
LABEL_6:
    while (2)
    {
      if (degas::Statement::next((sqlite3_stmt **)v34[0]) == 1)
      {
        v11 = sqlite3_column_int64(*(sqlite3_stmt **)v34[0], 0);
        v32 = 0uLL;
        v13 = v33[0];
        for (i = v33[1]; i != v13; i -= 16)
        {
          degas::BitsetPtr::releaseBitset((degas::BitsetPtr *)(i - 16));
          *(_QWORD *)(i - 8) = 0;
        }
        v33[1] = v13;
        v14 = *(_DWORD *)this;
        if (*(_DWORD *)this > 1u)
        {
LABEL_15:
          if ((v14 | 2) != 2)
            goto LABEL_20;
          degas::Statement::bitmapColumnValue((sqlite3_stmt **)v34[0], 2, (degas::Bitmap *)&v39);
          if (v7)
            degas::Bitmap::intersectWith<degas::Bitmap>((degas::Bitmap *)&v39, (degas::Bitmap *)&v37);
          if (v39._bitSets.__begin_ == v39._bitSets.__end_
            || (appended = degas::StepSpecification::appendSourceNodesForEdges(v16, a2, &v39, (degas::Bitmap *)&v32),
                !(_DWORD)appended))
          {
LABEL_20:
            if (v8)
              degas::Bitmap::intersectWith<degas::Bitmap>((degas::Bitmap *)&v32, (degas::Bitmap *)&v35);
            if (!*((_QWORD *)a3 + 2))
            {
              degas::Bitmap::begin(&v32, &v29);
              while (1)
              {
                v22 = v30;
                if ((__int128 *)v29 == &v32 && v30 == -1)
                {
                  if (v31 == v33[1])
                    goto LABEL_6;
                  v22 = -1;
                }
                degas::UncountedPathCollection::addPath(a4, v11, v22);
                degas::Bitmap::iterator::operator++(&v29);
              }
            }
            degas::Bitmap::begin(&v32, &v29);
LABEL_24:
            v17 = v30;
            if ((__int128 *)v29 == &v32 && v30 == -1)
            {
              if (v31 == v33[1])
                continue;
              v17 = -1;
            }
            v19 = degas::UncountedPathCollection::sourceNodesForTargetNodeId(a3, v11);
            degas::Bitmap::begin(*(_QWORD **)v19, &v26);
            while (1)
            {
              v20 = v27;
              if (v26 == *(_QWORD *)v19 && v27 == -1)
              {
                if (v28 == *(_QWORD *)(*(_QWORD *)v19 + 24))
                {
                  degas::Bitmap::iterator::operator++(&v29);
                  goto LABEL_24;
                }
                v20 = -1;
              }
              degas::UncountedPathCollection::addPath(a4, v20, v17);
              degas::Bitmap::iterator::operator++(&v26);
            }
          }
          break;
        }
        degas::Statement::bitmapColumnValue((sqlite3_stmt **)v34[0], 3, (degas::Bitmap *)&v40);
        if (v7)
          degas::Bitmap::intersectWith<degas::Bitmap>((degas::Bitmap *)&v40, (degas::Bitmap *)&v37);
        if (v40._bitSets.__begin_ == v40._bitSets.__end_
          || (appended = degas::StepSpecification::appendTargetNodesForEdges(v15, a2, &v40, (degas::Bitmap *)&v32),
              !(_DWORD)appended))
        {
          v14 = *(_DWORD *)this;
          goto LABEL_15;
        }
      }
      else
      {
        appended = 0;
      }
      break;
    }
    v29 = (unint64_t)v33;
    std::vector<degas::BitsetPtr>::__destroy_vector::operator()[abi:ne180100]((void ***)&v29);
    degas::Cursor::~Cursor(v34);
LABEL_52:
    *(_QWORD *)&v32 = v36;
    std::vector<degas::BitsetPtr>::__destroy_vector::operator()[abi:ne180100]((void ***)&v32);
  }
  *(_QWORD *)&v35 = v38;
  std::vector<degas::BitsetPtr>::__destroy_vector::operator()[abi:ne180100]((void ***)&v35);
  *(_QWORD *)&v37 = &v39._bitSets;
  std::vector<degas::BitsetPtr>::__destroy_vector::operator()[abi:ne180100]((void ***)&v37);
  v39._bitCount = (unint64_t)&v40._bitSets;
  std::vector<degas::BitsetPtr>::__destroy_vector::operator()[abi:ne180100]((void ***)&v39);
  return appended;
}

void sub_1CA1A56CC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void **a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,degas::Statement *a23,uint64_t a24,void **a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,void **a31,uint64_t a32,uint64_t a33)
{
  uint64_t v33;

  degas::Cursor::~Cursor(&a23);
  a17 = (void **)&a27;
  std::vector<degas::BitsetPtr>::__destroy_vector::operator()[abi:ne180100](&a17);
  a25 = (void **)&a33;
  std::vector<degas::BitsetPtr>::__destroy_vector::operator()[abi:ne180100](&a25);
  a31 = (void **)(v33 - 176);
  std::vector<degas::BitsetPtr>::__destroy_vector::operator()[abi:ne180100](&a31);
  *(_QWORD *)(v33 - 192) = v33 - 128;
  std::vector<degas::BitsetPtr>::__destroy_vector::operator()[abi:ne180100]((void ***)(v33 - 192));
  _Unwind_Resume(a1);
}

uint64_t degas::StepSpecification::performStepWithCountedPathRecording(degas::StepSpecification *this, degas::Database *a2, const degas::CountedPathCollection *a3, degas::CountedPathCollection *a4)
{
  uint64_t v7;
  uint64_t v8;
  __int128 v9;
  uint64_t appended;
  sqlite3_int64 v11;
  uint64_t v12;
  uint64_t i;
  int v14;
  degas::StepSpecification *v15;
  degas::StepSpecification *v16;
  unint64_t v17;
  BOOL v18;
  uint64_t *v19;
  _QWORD *v20;
  uint64_t *v21;
  uint64_t *v22;
  uint64_t *v23;
  unint64_t v24;
  unint64_t v28;
  unint64_t v29;
  uint64_t v30;
  __int128 v31;
  _QWORD v32[4];
  degas::Statement *v33[2];
  __int128 v34;
  _BYTE v35[25];
  __int128 v36;
  _BYTE v37[32];
  Bitmap v38;
  Bitmap v39;

  v7 = *((_QWORD *)this + 1);
  v8 = *((_QWORD *)this + 3);
  v9 = 0uLL;
  memset(&v39, 0, 41);
  memset(&v38, 0, 41);
  v36 = 0u;
  memset(v37, 0, 25);
  if (!v7
    || (appended = (*(uint64_t (**)(uint64_t, __int128 *))(*(_QWORD *)v7 + 16))(v7, &v36),
        v9 = 0uLL,
        !(_DWORD)appended))
  {
    *(_OWORD *)&v35[9] = v9;
    v34 = v9;
    *(_OWORD *)v35 = v9;
    if (v8)
    {
      appended = (*(uint64_t (**)(_QWORD, __int128 *))(**((_QWORD **)this + 3) + 16))(*((_QWORD *)this + 3), &v34);
      if ((_DWORD)appended)
        goto LABEL_50;
    }
    degas::NodeCursor::NodeCursor(v33);
    degas::NodeCursor::setForIdentifiers((degas::NodeCursor *)v33, (Bitmap *)((char *)a3 + 24), (degas::Database *)((char *)a2 + 192));
    v31 = 0u;
    memset(v32, 0, 25);
LABEL_6:
    if (degas::Statement::next((sqlite3_stmt **)v33[0]) == 1)
    {
      v11 = sqlite3_column_int64(*(sqlite3_stmt **)v33[0], 0);
      v31 = 0uLL;
      v12 = v32[0];
      for (i = v32[1]; i != v12; i -= 16)
      {
        degas::BitsetPtr::releaseBitset((degas::BitsetPtr *)(i - 16));
        *(_QWORD *)(i - 8) = 0;
      }
      v32[1] = v12;
      v14 = *(_DWORD *)this;
      if (*(_DWORD *)this > 1u)
      {
LABEL_15:
        if ((v14 | 2) != 2)
          goto LABEL_20;
        degas::Statement::bitmapColumnValue((sqlite3_stmt **)v33[0], 2, (degas::Bitmap *)&v38);
        if (v7)
          degas::Bitmap::intersectWith<degas::Bitmap>((degas::Bitmap *)&v38, (degas::Bitmap *)&v36);
        if (v38._bitSets.__begin_ == v38._bitSets.__end_
          || (appended = degas::StepSpecification::appendSourceNodesForEdges(v16, a2, &v38, (degas::Bitmap *)&v31),
              !(_DWORD)appended))
        {
LABEL_20:
          if (v8)
            degas::Bitmap::intersectWith<degas::Bitmap>((degas::Bitmap *)&v31, (degas::Bitmap *)&v34);
          if (*((_QWORD *)a3 + 2))
          {
            degas::Bitmap::begin(&v31, &v28);
            while (1)
            {
              v17 = v29;
              v18 = (__int128 *)v28 == &v31 && v29 == -1;
              if (v18)
              {
                if (v30 == v32[1])
                  goto LABEL_6;
                v17 = -1;
              }
              v19 = degas::CountedPathCollection::sourcePathsForTargetNodeId(a3, v11);
              v21 = v19 + 1;
              v20 = (_QWORD *)*v19;
              if ((uint64_t *)*v19 != v19 + 1)
              {
                do
                {
                  degas::CountedPathCollection::addPath(a4, v20[4], v17, *((_DWORD *)v20 + 10));
                  v22 = (uint64_t *)v20[1];
                  if (v22)
                  {
                    do
                    {
                      v23 = v22;
                      v22 = (uint64_t *)*v22;
                    }
                    while (v22);
                  }
                  else
                  {
                    do
                    {
                      v23 = (uint64_t *)v20[2];
                      v18 = *v23 == (_QWORD)v20;
                      v20 = v23;
                    }
                    while (!v18);
                  }
                  v20 = v23;
                }
                while (v23 != v21);
              }
              degas::Bitmap::iterator::operator++(&v28);
            }
          }
          degas::Bitmap::begin(&v31, &v28);
          while (1)
          {
            v24 = v29;
            if ((__int128 *)v28 == &v31 && v29 == -1)
            {
              if (v30 == v32[1])
                goto LABEL_6;
              v24 = -1;
            }
            degas::CountedPathCollection::addPath(a4, v11, v24, 1);
            degas::Bitmap::iterator::operator++(&v28);
          }
        }
        goto LABEL_49;
      }
      degas::Statement::bitmapColumnValue((sqlite3_stmt **)v33[0], 3, (degas::Bitmap *)&v39);
      if (v7)
        degas::Bitmap::intersectWith<degas::Bitmap>((degas::Bitmap *)&v39, (degas::Bitmap *)&v36);
      if (v39._bitSets.__begin_ == v39._bitSets.__end_
        || (appended = degas::StepSpecification::appendTargetNodesForEdges(v15, a2, &v39, (degas::Bitmap *)&v31),
            !(_DWORD)appended))
      {
        v14 = *(_DWORD *)this;
        goto LABEL_15;
      }
    }
    else
    {
      appended = 0;
    }
LABEL_49:
    v28 = (unint64_t)v32;
    std::vector<degas::BitsetPtr>::__destroy_vector::operator()[abi:ne180100]((void ***)&v28);
    degas::Cursor::~Cursor(v33);
LABEL_50:
    *(_QWORD *)&v31 = v35;
    std::vector<degas::BitsetPtr>::__destroy_vector::operator()[abi:ne180100]((void ***)&v31);
  }
  *(_QWORD *)&v34 = v37;
  std::vector<degas::BitsetPtr>::__destroy_vector::operator()[abi:ne180100]((void ***)&v34);
  *(_QWORD *)&v36 = &v38._bitSets;
  std::vector<degas::BitsetPtr>::__destroy_vector::operator()[abi:ne180100]((void ***)&v36);
  v38._bitCount = (unint64_t)&v39._bitSets;
  std::vector<degas::BitsetPtr>::__destroy_vector::operator()[abi:ne180100]((void ***)&v38);
  return appended;
}

void sub_1CA1A5AD0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void **a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,degas::Statement *a21,uint64_t a22,void **a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,void **a29,uint64_t a30,uint64_t a31)
{
  uint64_t v31;

  degas::Cursor::~Cursor(&a21);
  a15 = (void **)&a25;
  std::vector<degas::BitsetPtr>::__destroy_vector::operator()[abi:ne180100](&a15);
  a23 = (void **)&a31;
  std::vector<degas::BitsetPtr>::__destroy_vector::operator()[abi:ne180100](&a23);
  a29 = (void **)(v31 - 176);
  std::vector<degas::BitsetPtr>::__destroy_vector::operator()[abi:ne180100](&a29);
  *(_QWORD *)(v31 - 192) = v31 - 128;
  std::vector<degas::BitsetPtr>::__destroy_vector::operator()[abi:ne180100]((void ***)(v31 - 192));
  _Unwind_Resume(a1);
}

double degas::Traversal::Traversal(uint64_t a1, uint64_t a2)
{
  double result;

  *(_QWORD *)a1 = a2;
  result = 0.0;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 41) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_OWORD *)(a1 + 89) = 0u;
  *(_OWORD *)(a1 + 112) = 0u;
  *(_OWORD *)(a1 + 128) = 0u;
  *(_OWORD *)(a1 + 144) = 0u;
  *(_OWORD *)(a1 + 160) = 0u;
  *(_QWORD *)(a1 + 176) = 0;
  return result;
}

{
  double result;

  *(_QWORD *)a1 = a2;
  result = 0.0;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 41) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_OWORD *)(a1 + 89) = 0u;
  *(_OWORD *)(a1 + 112) = 0u;
  *(_OWORD *)(a1 + 128) = 0u;
  *(_OWORD *)(a1 + 144) = 0u;
  *(_OWORD *)(a1 + 160) = 0u;
  *(_QWORD *)(a1 + 176) = 0;
  return result;
}

uint64_t degas::Traversal::setRecordingType(uint64_t result, int a2)
{
  *(_DWORD *)(result + 8) = a2;
  return result;
}

uint64_t degas::Traversal::startFromNodes(uint64_t a1, _QWORD *a2)
{
  uint64_t v3;

  v3 = (*(uint64_t (**)(_QWORD, uint64_t))(*(_QWORD *)*a2 + 16))(*a2, a1 + 64);
  if (!(_DWORD)v3)
    degas::Bitmap::operator=((_QWORD *)(a1 + 16), (_QWORD *)(a1 + 64));
  return v3;
}

_QWORD *degas::Traversal::startFromNodes(degas::Traversal *this, const degas::Bitmap *a2)
{
  degas::Bitmap::operator=((_QWORD *)this + 8, a2);
  return degas::Bitmap::operator=((_QWORD *)this + 2, a2);
}

void degas::Traversal::addStep(degas::Traversal *this, const degas::StepSpecification *a2)
{
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t *v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t *v10;
  unint64_t v11;
  char *v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  char *v18;
  char *v19;
  uint64_t v20;
  unint64_t *v21;
  unint64_t v22;
  uint64_t v23;
  char *v24;
  unint64_t *v25;
  unint64_t v26;
  char *v27;
  char *v28;
  char *v29;
  char *v30;
  char *v31;
  int v32;
  uint64_t v33;
  unint64_t *v34;
  unint64_t v35;
  uint64_t v36;
  unint64_t *v37;
  unint64_t v38;
  char *v39;

  v4 = *((_QWORD *)this + 17);
  v5 = *((_QWORD *)this + 18);
  if (v4 < v5)
  {
    *(_DWORD *)v4 = *(_DWORD *)a2;
    v6 = *((_QWORD *)a2 + 2);
    *(_QWORD *)(v4 + 8) = *((_QWORD *)a2 + 1);
    *(_QWORD *)(v4 + 16) = v6;
    if (v6)
    {
      v7 = (unint64_t *)(v6 + 8);
      do
        v8 = __ldxr(v7);
      while (__stxr(v8 + 1, v7));
    }
    v9 = *((_QWORD *)a2 + 4);
    *(_QWORD *)(v4 + 24) = *((_QWORD *)a2 + 3);
    *(_QWORD *)(v4 + 32) = v9;
    if (v9)
    {
      v10 = (unint64_t *)(v9 + 8);
      do
        v11 = __ldxr(v10);
      while (__stxr(v11 + 1, v10));
    }
    v12 = (char *)(v4 + 40);
    goto LABEL_39;
  }
  v13 = *((_QWORD *)this + 16);
  v14 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v4 - v13) >> 3);
  v15 = v14 + 1;
  if (v14 + 1 > 0x666666666666666)
    std::vector<unsigned long long>::__throw_length_error[abi:ne180100]();
  v16 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v5 - v13) >> 3);
  if (2 * v16 > v15)
    v15 = 2 * v16;
  if (v16 >= 0x333333333333333)
    v17 = 0x666666666666666;
  else
    v17 = v15;
  if (v17)
  {
    if (v17 > 0x666666666666666)
      std::__throw_bad_array_new_length[abi:ne180100]();
    v18 = (char *)operator new(40 * v17);
  }
  else
  {
    v18 = 0;
  }
  v19 = &v18[40 * v14];
  *(_DWORD *)v19 = *(_DWORD *)a2;
  v20 = *((_QWORD *)a2 + 2);
  *((_QWORD *)v19 + 1) = *((_QWORD *)a2 + 1);
  *((_QWORD *)v19 + 2) = v20;
  if (v20)
  {
    v21 = (unint64_t *)(v20 + 8);
    do
      v22 = __ldxr(v21);
    while (__stxr(v22 + 1, v21));
  }
  v23 = *((_QWORD *)a2 + 4);
  v24 = &v18[40 * v14];
  *((_QWORD *)v24 + 3) = *((_QWORD *)a2 + 3);
  *((_QWORD *)v24 + 4) = v23;
  if (v23)
  {
    v25 = (unint64_t *)(v23 + 8);
    do
      v26 = __ldxr(v25);
    while (__stxr(v26 + 1, v25));
  }
  v27 = &v18[40 * v17];
  v12 = v19 + 40;
  v28 = (char *)*((_QWORD *)this + 16);
  v29 = (char *)*((_QWORD *)this + 17);
  if (v29 == v28)
  {
    *((_QWORD *)this + 16) = v19;
    *((_QWORD *)this + 17) = v12;
    *((_QWORD *)this + 18) = v27;
    if (!v29)
      goto LABEL_39;
    goto LABEL_38;
  }
  v30 = (char *)*((_QWORD *)this + 17);
  v31 = v19;
  do
  {
    v32 = *((_DWORD *)v30 - 10);
    v30 -= 40;
    *((_DWORD *)v31 - 10) = v32;
    v31 -= 40;
    v33 = *((_QWORD *)v30 + 2);
    *((_QWORD *)v31 + 1) = *((_QWORD *)v30 + 1);
    *((_QWORD *)v31 + 2) = v33;
    if (v33)
    {
      v34 = (unint64_t *)(v33 + 8);
      do
        v35 = __ldxr(v34);
      while (__stxr(v35 + 1, v34));
    }
    v36 = *((_QWORD *)v29 - 1);
    *((_QWORD *)v19 - 2) = *((_QWORD *)v29 - 2);
    *((_QWORD *)v19 - 1) = v36;
    if (v36)
    {
      v37 = (unint64_t *)(v36 + 8);
      do
        v38 = __ldxr(v37);
      while (__stxr(v38 + 1, v37));
    }
    v19 = v31;
    v29 = v30;
  }
  while (v30 != v28);
  v39 = (char *)*((_QWORD *)this + 16);
  v29 = (char *)*((_QWORD *)this + 17);
  *((_QWORD *)this + 16) = v31;
  *((_QWORD *)this + 17) = v12;
  *((_QWORD *)this + 18) = v27;
  if (v29 != v39)
  {
    do
    {
      std::shared_ptr<degas::Predicate>::~shared_ptr[abi:ne180100]((uint64_t)(v29 - 16));
      std::shared_ptr<degas::Predicate>::~shared_ptr[abi:ne180100]((uint64_t)(v29 - 32));
      v29 -= 40;
    }
    while (v29 != v39);
    v29 = v39;
  }
  if (v29)
LABEL_38:
    operator delete(v29);
LABEL_39:
  *((_QWORD *)this + 17) = v12;
}

_QWORD *degas::Traversal::setTerminatingCondition(uint64_t a1, uint64_t *a2)
{
  return std::shared_ptr<degas::Statement>::operator=[abi:ne180100]((_QWORD *)(a1 + 112), *a2, a2[1]);
}

degas::CountedPathCollection *degas::Traversal::performFixedStepTraversal(degas::Traversal *this)
{
  degas::CountedPathCollection *v1;
  int v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t *v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t *v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  BOOL v15;
  int v16;
  uint64_t v17;
  std::__shared_weak_count *v18;
  unint64_t *v19;
  unint64_t v20;
  std::__shared_weak_count *v21;
  unint64_t *v22;
  unint64_t v23;
  std::__shared_weak_count *v24;
  unint64_t *v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  std::__shared_weak_count *v29;
  unint64_t *v30;
  unint64_t v31;
  std::__shared_weak_count *v32;
  unint64_t *v33;
  unint64_t v34;
  uint64_t v35;
  BOOL v36;
  int v37;
  uint64_t v38;
  uint64_t v39;
  unint64_t *v40;
  unint64_t v41;
  std::__shared_weak_count *v42;
  unint64_t *v43;
  unint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  unint64_t *v48;
  unint64_t v49;
  uint64_t v50;
  unint64_t *v51;
  unint64_t v52;
  uint64_t v53;
  uint64_t v54;
  BOOL v55;
  int v56;
  uint64_t v57;
  std::__shared_weak_count *v58;
  unint64_t *p_shared_owners;
  unint64_t v60;
  std::__shared_weak_count *v61;
  unint64_t *v62;
  unint64_t v63;
  std::__shared_weak_count *v64;
  unint64_t *v65;
  unint64_t v66;
  std::__shared_weak_count *v67;
  unint64_t *v68;
  unint64_t v69;
  unint64_t *v70;
  std::__shared_weak_count *v72;
  unint64_t *v73;
  unint64_t v74;
  unint64_t *v75;
  __int128 v76;
  _OWORD v77[2];
  degas::UncountedPathCollection *v78;
  std::__shared_weak_count *v79;
  std::__shared_weak_count *v80;
  uint64_t v81;
  std::__shared_weak_count *v82;
  void **v83;
  std::__shared_weak_count *v84;

  v3 = *((_DWORD *)this + 2);
  if (v3)
  {
    if (v3 == 2)
    {
      v1 = (degas::CountedPathCollection *)operator new();
      degas::CountedPathCollection::CountedPathCollection(v1, (__int128 **)this + 8);
      std::shared_ptr<degas::CountedPathCollection>::shared_ptr[abi:ne180100]<degas::CountedPathCollection,void>(&v78, (uint64_t)v1);
      v45 = *((_QWORD *)this + 16);
      v46 = *((_QWORD *)this + 17);
      if (v45 == v46)
      {
        v14 = 0;
      }
      else
      {
        while (1)
        {
          LODWORD(v76) = *(_DWORD *)v45;
          v47 = *(_QWORD *)(v45 + 16);
          *((_QWORD *)&v76 + 1) = *(_QWORD *)(v45 + 8);
          *(_QWORD *)&v77[0] = v47;
          if (v47)
          {
            v48 = (unint64_t *)(v47 + 8);
            do
              v49 = __ldxr(v48);
            while (__stxr(v49 + 1, v48));
          }
          v50 = *(_QWORD *)(v45 + 32);
          *((_QWORD *)&v77[0] + 1) = *(_QWORD *)(v45 + 24);
          *(_QWORD *)&v77[1] = v50;
          if (v50)
          {
            v51 = (unint64_t *)(v50 + 8);
            do
              v52 = __ldxr(v51);
            while (__stxr(v52 + 1, v51));
          }
          v53 = operator new();
          *(_QWORD *)(v53 + 16) = 0;
          *(_QWORD *)(v53 + 8) = 0;
          *(_QWORD *)v53 = v53 + 8;
          *(_OWORD *)(v53 + 24) = 0u;
          *(_OWORD *)(v53 + 40) = 0u;
          *(_OWORD *)(v53 + 49) = 0u;
          std::shared_ptr<degas::CountedPathCollection>::shared_ptr[abi:ne180100]<degas::CountedPathCollection,void>(&v83, v53);
          v54 = degas::StepSpecification::performStepWithCountedPathRecording((degas::StepSpecification *)&v76, *(degas::Database **)this, v78, (degas::CountedPathCollection *)v83);
          v14 = v54;
          if ((_DWORD)v54)
          {
            v55 = 0;
            v56 = 1;
            v1 = (degas::CountedPathCollection *)v54;
          }
          else
          {
            std::shared_ptr<degas::Statement>::operator=[abi:ne180100](&v78, (uint64_t)v83, (uint64_t)v84);
            v57 = *((_QWORD *)v78 + 2);
            v55 = v57 != 0;
            if (v57)
              v56 = 0;
            else
              v56 = 5;
          }
          v58 = v84;
          if (v84)
          {
            p_shared_owners = (unint64_t *)&v84->__shared_owners_;
            do
              v60 = __ldaxr(p_shared_owners);
            while (__stlxr(v60 - 1, p_shared_owners));
            if (!v60)
            {
              ((void (*)(std::__shared_weak_count *))v58->__on_zero_shared)(v58);
              std::__shared_weak_count::__release_weak(v58);
            }
          }
          v61 = *(std::__shared_weak_count **)&v77[1];
          if (*(_QWORD *)&v77[1])
          {
            v62 = (unint64_t *)(*(_QWORD *)&v77[1] + 8);
            do
              v63 = __ldaxr(v62);
            while (__stlxr(v63 - 1, v62));
            if (!v63)
            {
              ((void (*)(std::__shared_weak_count *))v61->__on_zero_shared)(v61);
              std::__shared_weak_count::__release_weak(v61);
            }
          }
          v64 = *(std::__shared_weak_count **)&v77[0];
          if (*(_QWORD *)&v77[0])
          {
            v65 = (unint64_t *)(*(_QWORD *)&v77[0] + 8);
            do
              v66 = __ldaxr(v65);
            while (__stlxr(v66 - 1, v65));
            if (!v66)
            {
              ((void (*)(std::__shared_weak_count *))v64->__on_zero_shared)(v64);
              std::__shared_weak_count::__release_weak(v64);
            }
          }
          if (!v55)
            break;
          v45 += 40;
          if (v45 == v46)
            goto LABEL_100;
        }
        if (v56 != 5)
        {
          v72 = v79;
          if (!v79)
            return v1;
          v75 = (unint64_t *)&v79->__shared_owners_;
          do
            v74 = __ldaxr(v75);
          while (__stlxr(v74 - 1, v75));
LABEL_114:
          if (!v74)
          {
            ((void (*)(std::__shared_weak_count *))v72->__on_zero_shared)(v72);
            std::__shared_weak_count::__release_weak(v72);
          }
          return v1;
        }
      }
LABEL_100:
      std::shared_ptr<degas::Statement>::operator=[abi:ne180100]((_QWORD *)this + 19, (uint64_t)v78, (uint64_t)v79);
      v67 = v79;
      if (v79)
      {
        v70 = (unint64_t *)&v79->__shared_owners_;
        do
          v69 = __ldaxr(v70);
        while (__stlxr(v69 - 1, v70));
LABEL_103:
        if (!v69)
        {
          ((void (*)(std::__shared_weak_count *))v67->__on_zero_shared)(v67);
          std::__shared_weak_count::__release_weak(v67);
        }
      }
      return (degas::CountedPathCollection *)v14;
    }
    if (v3 == 1)
    {
      v1 = (degas::CountedPathCollection *)operator new();
      degas::UncountedPathCollection::UncountedPathCollection(v1, (__int128 **)this + 8);
      std::shared_ptr<degas::UncountedPathCollection>::shared_ptr[abi:ne180100]<degas::UncountedPathCollection,void>(&v78, (uint64_t)v1);
      v4 = *((_QWORD *)this + 16);
      v5 = *((_QWORD *)this + 17);
      if (v4 == v5)
      {
        v14 = 0;
        goto LABEL_95;
      }
      while (1)
      {
        LODWORD(v76) = *(_DWORD *)v4;
        v6 = *(_QWORD *)(v4 + 16);
        *((_QWORD *)&v76 + 1) = *(_QWORD *)(v4 + 8);
        *(_QWORD *)&v77[0] = v6;
        if (v6)
        {
          v7 = (unint64_t *)(v6 + 8);
          do
            v8 = __ldxr(v7);
          while (__stxr(v8 + 1, v7));
        }
        v9 = *(_QWORD *)(v4 + 32);
        *((_QWORD *)&v77[0] + 1) = *(_QWORD *)(v4 + 24);
        *(_QWORD *)&v77[1] = v9;
        if (v9)
        {
          v10 = (unint64_t *)(v9 + 8);
          do
            v11 = __ldxr(v10);
          while (__stxr(v11 + 1, v10));
        }
        v12 = operator new();
        *(_QWORD *)(v12 + 16) = 0;
        *(_QWORD *)(v12 + 8) = 0;
        *(_QWORD *)v12 = v12 + 8;
        *(_OWORD *)(v12 + 24) = 0u;
        *(_OWORD *)(v12 + 40) = 0u;
        *(_OWORD *)(v12 + 49) = 0u;
        std::shared_ptr<degas::UncountedPathCollection>::shared_ptr[abi:ne180100]<degas::UncountedPathCollection,void>(&v83, v12);
        v13 = degas::StepSpecification::performStepWithUncountedPathRecording((degas::StepSpecification *)&v76, *(degas::Database **)this, v78, (degas::UncountedPathCollection *)v83);
        v14 = v13;
        if ((_DWORD)v13)
        {
          v15 = 0;
          v16 = 1;
          v1 = (degas::CountedPathCollection *)v13;
        }
        else
        {
          std::shared_ptr<degas::Statement>::operator=[abi:ne180100](&v78, (uint64_t)v83, (uint64_t)v84);
          v17 = *((_QWORD *)v78 + 2);
          v15 = v17 != 0;
          if (v17)
            v16 = 0;
          else
            v16 = 3;
        }
        v18 = v84;
        if (v84)
        {
          v19 = (unint64_t *)&v84->__shared_owners_;
          do
            v20 = __ldaxr(v19);
          while (__stlxr(v20 - 1, v19));
          if (!v20)
          {
            ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
            std::__shared_weak_count::__release_weak(v18);
          }
        }
        v21 = *(std::__shared_weak_count **)&v77[1];
        if (*(_QWORD *)&v77[1])
        {
          v22 = (unint64_t *)(*(_QWORD *)&v77[1] + 8);
          do
            v23 = __ldaxr(v22);
          while (__stlxr(v23 - 1, v22));
          if (!v23)
          {
            ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
            std::__shared_weak_count::__release_weak(v21);
          }
        }
        v24 = *(std::__shared_weak_count **)&v77[0];
        if (*(_QWORD *)&v77[0])
        {
          v25 = (unint64_t *)(*(_QWORD *)&v77[0] + 8);
          do
            v26 = __ldaxr(v25);
          while (__stlxr(v26 - 1, v25));
          if (!v26)
          {
            ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
            std::__shared_weak_count::__release_weak(v24);
          }
        }
        if (!v15)
          break;
        v4 += 40;
        if (v4 == v5)
          goto LABEL_95;
      }
      if (v16 == 3)
      {
LABEL_95:
        std::shared_ptr<degas::Statement>::operator=[abi:ne180100]((_QWORD *)this + 21, (uint64_t)v78, (uint64_t)v79);
        v67 = v79;
        if (v79)
        {
          v68 = (unint64_t *)&v79->__shared_owners_;
          do
            v69 = __ldaxr(v68);
          while (__stlxr(v69 - 1, v68));
          goto LABEL_103;
        }
        return (degas::CountedPathCollection *)v14;
      }
      v72 = v79;
      if (!v79)
        return v1;
      v73 = (unint64_t *)&v79->__shared_owners_;
      do
        v74 = __ldaxr(v73);
      while (__stlxr(v74 - 1, v73));
      goto LABEL_114;
    }
    return 0;
  }
  degas::Bitmap::operator=((_QWORD *)this + 2, (_QWORD *)this + 8);
  v27 = *((_QWORD *)this + 16);
  v28 = *((_QWORD *)this + 17);
  if (v27 == v28)
    return 0;
  while (1)
  {
    LODWORD(v78) = *(_DWORD *)v27;
    v29 = *(std::__shared_weak_count **)(v27 + 16);
    v79 = *(std::__shared_weak_count **)(v27 + 8);
    v80 = v29;
    if (v29)
    {
      v30 = (unint64_t *)&v29->__shared_owners_;
      do
        v31 = __ldxr(v30);
      while (__stxr(v31 + 1, v30));
    }
    v32 = *(std::__shared_weak_count **)(v27 + 32);
    v81 = *(_QWORD *)(v27 + 24);
    v82 = v32;
    if (v32)
    {
      v33 = (unint64_t *)&v32->__shared_owners_;
      do
        v34 = __ldxr(v33);
      while (__stxr(v34 + 1, v33));
    }
    v76 = 0u;
    memset(v77, 0, 25);
    v35 = degas::StepSpecification::performStepWithoutPathRecording((degas::StepSpecification *)&v78, *(degas::Database **)this, (Bitmap *)((char *)this + 16), (degas::Bitmap *)&v76);
    v14 = v35;
    if ((_DWORD)v35)
    {
      v36 = 0;
      v37 = 1;
      v1 = (degas::CountedPathCollection *)v35;
    }
    else
    {
      degas::Bitmap::operator=((_QWORD *)this + 2, &v76);
      v38 = *((_QWORD *)this + 4);
      v39 = *((_QWORD *)this + 5);
      v36 = v38 != v39;
      if (v38 == v39)
        v37 = 7;
      else
        v37 = 0;
    }
    v83 = (void **)v77;
    std::vector<degas::BitsetPtr>::__destroy_vector::operator()[abi:ne180100](&v83);
    if (v32)
    {
      v40 = (unint64_t *)&v32->__shared_owners_;
      do
        v41 = __ldaxr(v40);
      while (__stlxr(v41 - 1, v40));
      if (!v41)
      {
        ((void (*)(std::__shared_weak_count *))v32->__on_zero_shared)(v32);
        std::__shared_weak_count::__release_weak(v32);
      }
    }
    v42 = v80;
    if (v80)
    {
      v43 = (unint64_t *)&v80->__shared_owners_;
      do
        v44 = __ldaxr(v43);
      while (__stlxr(v44 - 1, v43));
      if (!v44)
      {
        ((void (*)(std::__shared_weak_count *))v42->__on_zero_shared)(v42);
        std::__shared_weak_count::__release_weak(v42);
      }
    }
    if (!v36)
      break;
    v27 += 40;
    if (v27 == v28)
      return (degas::CountedPathCollection *)v14;
  }
  if (v37 == 7)
    return (degas::CountedPathCollection *)v14;
  return v1;
}

void sub_1CA1A6510(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1CAA4ADC8](v1, 0x1020C40A1339ED3);
  _Unwind_Resume(a1);
}

_QWORD *std::shared_ptr<degas::UncountedPathCollection>::shared_ptr[abi:ne180100]<degas::UncountedPathCollection,void>(_QWORD *a1, uint64_t a2)
{
  _QWORD *v4;

  *a1 = a2;
  v4 = (_QWORD *)operator new();
  *v4 = &off_1E83E4708;
  v4[1] = 0;
  v4[2] = 0;
  v4[3] = a2;
  a1[1] = v4;
  return a1;
}

void sub_1CA1A6610(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (v1)
    std::default_delete<degas::UncountedPathCollection>::operator()[abi:ne180100](v1);
  _Unwind_Resume(exception_object);
}

_QWORD *std::shared_ptr<degas::CountedPathCollection>::shared_ptr[abi:ne180100]<degas::CountedPathCollection,void>(_QWORD *a1, uint64_t a2)
{
  _QWORD *v4;

  *a1 = a2;
  v4 = (_QWORD *)operator new();
  *v4 = &off_1E83E4758;
  v4[1] = 0;
  v4[2] = 0;
  v4[3] = a2;
  a1[1] = v4;
  return a1;
}

void sub_1CA1A667C(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (v1)
    std::default_delete<degas::CountedPathCollection>::operator()[abi:ne180100](v1);
  _Unwind_Resume(exception_object);
}

uint64_t std::default_delete<degas::CountedPathCollection>::operator()[abi:ne180100](uint64_t result)
{
  uint64_t v1;
  void **v2;

  if (result)
  {
    v1 = result;
    v2 = (void **)(result + 40);
    std::vector<degas::BitsetPtr>::__destroy_vector::operator()[abi:ne180100](&v2);
    std::__tree<std::__value_type<unsigned long long,std::map<unsigned long long,int>>,std::__map_value_compare<unsigned long long,std::__value_type<unsigned long long,std::map<unsigned long long,int>>,std::less<unsigned long long>,true>,std::allocator<std::__value_type<unsigned long long,std::map<unsigned long long,int>>>>::destroy(*(_QWORD **)(v1 + 8));
    JUMPOUT(0x1CAA4ADC8);
  }
  return result;
}

void std::__tree<std::__value_type<unsigned long long,std::map<unsigned long long,int>>,std::__map_value_compare<unsigned long long,std::__value_type<unsigned long long,std::map<unsigned long long,int>>,std::less<unsigned long long>,true>,std::allocator<std::__value_type<unsigned long long,std::map<unsigned long long,int>>>>::destroy(_QWORD *a1)
{
  if (a1)
  {
    std::__tree<std::__value_type<unsigned long long,std::map<unsigned long long,int>>,std::__map_value_compare<unsigned long long,std::__value_type<unsigned long long,std::map<unsigned long long,int>>,std::less<unsigned long long>,true>,std::allocator<std::__value_type<unsigned long long,std::map<unsigned long long,int>>>>::destroy(*a1);
    std::__tree<std::__value_type<unsigned long long,std::map<unsigned long long,int>>,std::__map_value_compare<unsigned long long,std::__value_type<unsigned long long,std::map<unsigned long long,int>>,std::less<unsigned long long>,true>,std::allocator<std::__value_type<unsigned long long,std::map<unsigned long long,int>>>>::destroy(a1[1]);
    std::__tree<unsigned long long>::destroy((_QWORD *)a1[6]);
    operator delete(a1);
  }
}

void std::__shared_ptr_pointer<degas::CountedPathCollection *,std::shared_ptr<degas::CountedPathCollection>::__shared_ptr_default_delete<degas::CountedPathCollection,degas::CountedPathCollection>,std::allocator<degas::CountedPathCollection>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1CAA4ADC8);
}

uint64_t std::__shared_ptr_pointer<degas::CountedPathCollection *,std::shared_ptr<degas::CountedPathCollection>::__shared_ptr_default_delete<degas::CountedPathCollection,degas::CountedPathCollection>,std::allocator<degas::CountedPathCollection>>::__on_zero_shared(uint64_t a1)
{
  return std::default_delete<degas::CountedPathCollection>::operator()[abi:ne180100](*(_QWORD *)(a1 + 24));
}

uint64_t std::__shared_ptr_pointer<degas::CountedPathCollection *,std::shared_ptr<degas::CountedPathCollection>::__shared_ptr_default_delete<degas::CountedPathCollection,degas::CountedPathCollection>,std::allocator<degas::CountedPathCollection>>::__get_deleter(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(_QWORD *)(a2 + 8), 0x80000001CA1FE3BALL))
    return a1 + 24;
  else
    return 0;
}

uint64_t std::default_delete<degas::UncountedPathCollection>::operator()[abi:ne180100](uint64_t result)
{
  uint64_t v1;
  void **v2;

  if (result)
  {
    v1 = result;
    v2 = (void **)(result + 40);
    std::vector<degas::BitsetPtr>::__destroy_vector::operator()[abi:ne180100](&v2);
    std::__tree<std::__value_type<unsigned long long,std::shared_ptr<degas::Bitmap>>,std::__map_value_compare<unsigned long long,std::__value_type<unsigned long long,std::shared_ptr<degas::Bitmap>>,std::less<unsigned long long>,true>,std::allocator<std::__value_type<unsigned long long,std::shared_ptr<degas::Bitmap>>>>::destroy(*(_QWORD **)(v1 + 8));
    JUMPOUT(0x1CAA4ADC8);
  }
  return result;
}

void std::__tree<std::__value_type<unsigned long long,std::shared_ptr<degas::Bitmap>>,std::__map_value_compare<unsigned long long,std::__value_type<unsigned long long,std::shared_ptr<degas::Bitmap>>,std::less<unsigned long long>,true>,std::allocator<std::__value_type<unsigned long long,std::shared_ptr<degas::Bitmap>>>>::destroy(_QWORD *a1)
{
  if (a1)
  {
    std::__tree<std::__value_type<unsigned long long,std::shared_ptr<degas::Bitmap>>,std::__map_value_compare<unsigned long long,std::__value_type<unsigned long long,std::shared_ptr<degas::Bitmap>>,std::less<unsigned long long>,true>,std::allocator<std::__value_type<unsigned long long,std::shared_ptr<degas::Bitmap>>>>::destroy(*a1);
    std::__tree<std::__value_type<unsigned long long,std::shared_ptr<degas::Bitmap>>,std::__map_value_compare<unsigned long long,std::__value_type<unsigned long long,std::shared_ptr<degas::Bitmap>>,std::less<unsigned long long>,true>,std::allocator<std::__value_type<unsigned long long,std::shared_ptr<degas::Bitmap>>>>::destroy(a1[1]);
    std::shared_ptr<degas::Predicate>::~shared_ptr[abi:ne180100]((uint64_t)(a1 + 5));
    operator delete(a1);
  }
}

void std::__shared_ptr_pointer<degas::UncountedPathCollection *,std::shared_ptr<degas::UncountedPathCollection>::__shared_ptr_default_delete<degas::UncountedPathCollection,degas::UncountedPathCollection>,std::allocator<degas::UncountedPathCollection>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1CAA4ADC8);
}

uint64_t std::__shared_ptr_pointer<degas::UncountedPathCollection *,std::shared_ptr<degas::UncountedPathCollection>::__shared_ptr_default_delete<degas::UncountedPathCollection,degas::UncountedPathCollection>,std::allocator<degas::UncountedPathCollection>>::__on_zero_shared(uint64_t a1)
{
  return std::default_delete<degas::UncountedPathCollection>::operator()[abi:ne180100](*(_QWORD *)(a1 + 24));
}

uint64_t std::__shared_ptr_pointer<degas::UncountedPathCollection *,std::shared_ptr<degas::UncountedPathCollection>::__shared_ptr_default_delete<degas::UncountedPathCollection,degas::UncountedPathCollection>,std::allocator<degas::UncountedPathCollection>>::__get_deleter(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(_QWORD *)(a2 + 8), 0x80000001CA1FE2CFLL))
    return a1 + 24;
  else
    return 0;
}

uint64_t degas::Traversal::performVariableStepTraversal(degas::Traversal *this)
{
  uint64_t v1;
  uint64_t v3;
  degas::StepSpecification *v4;
  int v5;
  degas::UncountedPathCollection *v6;
  uint64_t v7;
  degas::UncountedPathCollection *v8;
  __int128 v9;
  unint64_t *v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  std::__shared_weak_count *v16;
  unint64_t *v17;
  unint64_t v18;
  std::__shared_weak_count *v19;
  unint64_t *v20;
  unint64_t v21;
  degas::CountedPathCollection *v22;
  uint64_t v23;
  degas::UncountedPathCollection *v24;
  __int128 v25;
  unint64_t *v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  int v30;
  std::__shared_weak_count *v31;
  unint64_t *v32;
  unint64_t v33;
  unint64_t *v34;
  std::__shared_weak_count *v35;
  unint64_t *v36;
  unint64_t v37;
  unint64_t *v38;
  degas::UncountedPathCollection *v40[2];
  _QWORD v41[4];
  degas::UncountedPathCollection *v42[2];
  _BYTE v43[32];
  __int128 v44;
  _BYTE v45[40];
  void **v46;

  v44 = 0u;
  memset(v45, 0, 25);
  v3 = *((_QWORD *)this + 14);
  if (!v3
    || ((*(void (**)(uint64_t, __int128 *))(*(_QWORD *)v3 + 16))(v3, &v44),
        v4 = (degas::StepSpecification *)*((_QWORD *)this + 16),
        v4 == *((degas::StepSpecification **)this + 17))
    || !*(_DWORD *)v4 && !*((_QWORD *)v4 + 3))
  {
    v14 = 6;
    goto LABEL_73;
  }
  v5 = *((_DWORD *)this + 2);
  if (v5)
  {
    if (v5 == 2)
    {
      v22 = (degas::CountedPathCollection *)operator new();
      degas::CountedPathCollection::CountedPathCollection(v22, (__int128 **)this + 8);
      std::shared_ptr<degas::CountedPathCollection>::shared_ptr[abi:ne180100]<degas::CountedPathCollection,void>(v40, (uint64_t)v22);
      v23 = operator new();
      *(_QWORD *)(v23 + 8) = 0;
      *(_QWORD *)(v23 + 16) = 0;
      *(_QWORD *)v23 = v23 + 8;
      *(_OWORD *)(v23 + 24) = 0u;
      *(_OWORD *)(v23 + 40) = 0u;
      *(_OWORD *)(v23 + 49) = 0u;
      std::shared_ptr<degas::CountedPathCollection>::shared_ptr[abi:ne180100]<degas::CountedPathCollection,void>(v42, v23);
      v24 = (degas::UncountedPathCollection *)*((_QWORD *)this + 20);
      v25 = *(_OWORD *)v42;
      v42[0] = *((degas::UncountedPathCollection **)this + 19);
      v42[1] = v24;
      *(_OWORD *)((char *)this + 152) = v25;
      if (v24)
      {
        v26 = (unint64_t *)((char *)v24 + 8);
        do
          v27 = __ldaxr(v26);
        while (__stlxr(v27 - 1, v26));
        if (!v27)
        {
          (*(void (**)(degas::UncountedPathCollection *))(*(_QWORD *)v24 + 16))(v24);
          std::__shared_weak_count::__release_weak((std::__shared_weak_count *)v24);
        }
      }
      do
      {
        while (1)
        {
          v28 = operator new();
          *(_QWORD *)(v28 + 16) = 0;
          *(_QWORD *)(v28 + 8) = 0;
          *(_QWORD *)v28 = v28 + 8;
          *(_OWORD *)(v28 + 24) = 0u;
          *(_OWORD *)(v28 + 40) = 0u;
          *(_OWORD *)(v28 + 49) = 0u;
          std::shared_ptr<degas::CountedPathCollection>::shared_ptr[abi:ne180100]<degas::CountedPathCollection,void>(v42, v28);
          v29 = degas::StepSpecification::performStepWithCountedPathRecording(v4, *(degas::Database **)this, v40[0], v42[0]);
          v14 = v29;
          if ((_DWORD)v29)
          {
            v30 = 1;
            v1 = v29;
          }
          else if (*((_QWORD *)v42[0] + 2))
          {
            degas::CountedPathCollection::addToCollectionWithFilter(v42[0], *((degas::CountedPathCollection **)this + 19), (const degas::Bitmap *)&v44);
            std::shared_ptr<degas::Statement>::operator=[abi:ne180100](v40, (uint64_t)v42[0], (uint64_t)v42[1]);
            v30 = 0;
          }
          else
          {
            v30 = 6;
          }
          v31 = (std::__shared_weak_count *)v42[1];
          if (v42[1])
          {
            v32 = (unint64_t *)((char *)v42[1] + 8);
            do
              v33 = __ldaxr(v32);
            while (__stlxr(v33 - 1, v32));
            if (!v33)
              break;
          }
          if (v30)
            goto LABEL_55;
        }
        ((void (*)(std::__shared_weak_count *))v31->__on_zero_shared)(v31);
        std::__shared_weak_count::__release_weak(v31);
      }
      while (!v30);
LABEL_55:
      if (v30 == 6)
      {
        v19 = (std::__shared_weak_count *)v40[1];
        if (!v40[1])
          goto LABEL_73;
        v34 = (unint64_t *)((char *)v40[1] + 8);
        do
          v21 = __ldaxr(v34);
        while (__stlxr(v21 - 1, v34));
LABEL_59:
        if (!v21)
        {
          ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
          std::__shared_weak_count::__release_weak(v19);
        }
        goto LABEL_73;
      }
      v35 = (std::__shared_weak_count *)v40[1];
      if (v40[1])
      {
        v38 = (unint64_t *)((char *)v40[1] + 8);
        do
          v37 = __ldaxr(v38);
        while (__stlxr(v37 - 1, v38));
LABEL_70:
        if (!v37)
        {
          ((void (*)(std::__shared_weak_count *))v35->__on_zero_shared)(v35);
          std::__shared_weak_count::__release_weak(v35);
        }
      }
    }
    else
    {
      if (v5 != 1)
        goto LABEL_62;
      v6 = (degas::UncountedPathCollection *)operator new();
      degas::UncountedPathCollection::UncountedPathCollection(v6, (__int128 **)this + 8);
      std::shared_ptr<degas::UncountedPathCollection>::shared_ptr[abi:ne180100]<degas::UncountedPathCollection,void>(v40, (uint64_t)v6);
      v7 = operator new();
      *(_QWORD *)(v7 + 8) = 0;
      *(_QWORD *)(v7 + 16) = 0;
      *(_QWORD *)v7 = v7 + 8;
      *(_OWORD *)(v7 + 24) = 0u;
      *(_OWORD *)(v7 + 40) = 0u;
      *(_OWORD *)(v7 + 49) = 0u;
      std::shared_ptr<degas::UncountedPathCollection>::shared_ptr[abi:ne180100]<degas::UncountedPathCollection,void>(v42, v7);
      v8 = (degas::UncountedPathCollection *)*((_QWORD *)this + 22);
      v9 = *(_OWORD *)v42;
      v42[0] = *((degas::UncountedPathCollection **)this + 21);
      v42[1] = v8;
      *(_OWORD *)((char *)this + 168) = v9;
      if (v8)
      {
        v10 = (unint64_t *)((char *)v8 + 8);
        do
          v11 = __ldaxr(v10);
        while (__stlxr(v11 - 1, v10));
        if (!v11)
        {
          (*(void (**)(degas::UncountedPathCollection *))(*(_QWORD *)v8 + 16))(v8);
          std::__shared_weak_count::__release_weak((std::__shared_weak_count *)v8);
        }
      }
      do
      {
        while (1)
        {
          v12 = operator new();
          *(_QWORD *)(v12 + 16) = 0;
          *(_QWORD *)(v12 + 8) = 0;
          *(_QWORD *)v12 = v12 + 8;
          *(_OWORD *)(v12 + 24) = 0u;
          *(_OWORD *)(v12 + 40) = 0u;
          *(_OWORD *)(v12 + 49) = 0u;
          std::shared_ptr<degas::UncountedPathCollection>::shared_ptr[abi:ne180100]<degas::UncountedPathCollection,void>(v42, v12);
          v13 = degas::StepSpecification::performStepWithUncountedPathRecording(v4, *(degas::Database **)this, v40[0], v42[0]);
          v14 = v13;
          if ((_DWORD)v13)
          {
            v15 = 1;
            v1 = v13;
          }
          else if (*((_QWORD *)v42[0] + 2))
          {
            degas::UncountedPathCollection::addToCollectionWithFilter(v42[0], *((degas::UncountedPathCollection **)this + 21), (const degas::Bitmap *)&v44);
            std::shared_ptr<degas::Statement>::operator=[abi:ne180100](v40, (uint64_t)v42[0], (uint64_t)v42[1]);
            v15 = 0;
          }
          else
          {
            v15 = 4;
          }
          v16 = (std::__shared_weak_count *)v42[1];
          if (v42[1])
          {
            v17 = (unint64_t *)((char *)v42[1] + 8);
            do
              v18 = __ldaxr(v17);
            while (__stlxr(v18 - 1, v17));
            if (!v18)
              break;
          }
          if (v15)
            goto LABEL_25;
        }
        ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
        std::__shared_weak_count::__release_weak(v16);
      }
      while (!v15);
LABEL_25:
      if (v15 == 4)
      {
        v19 = (std::__shared_weak_count *)v40[1];
        if (!v40[1])
          goto LABEL_73;
        v20 = (unint64_t *)((char *)v40[1] + 8);
        do
          v21 = __ldaxr(v20);
        while (__stlxr(v21 - 1, v20));
        goto LABEL_59;
      }
      v35 = (std::__shared_weak_count *)v40[1];
      if (v40[1])
      {
        v36 = (unint64_t *)((char *)v40[1] + 8);
        do
          v37 = __ldaxr(v36);
        while (__stlxr(v37 - 1, v36));
        goto LABEL_70;
      }
    }
    v14 = v1;
    goto LABEL_73;
  }
  degas::Bitmap::operator=((_QWORD *)this + 2, (_QWORD *)this + 8);
  *(_OWORD *)v42 = 0u;
  memset(v43, 0, 25);
  while (1)
  {
    *(_OWORD *)v40 = 0u;
    memset(v41, 0, 25);
    if (degas::StepSpecification::performStepWithoutPathRecording(v4, *(degas::Database **)this, (Bitmap *)((char *)this + 16), (degas::Bitmap *)v40))goto LABEL_37;
    if (v41[0] == v41[1] || degas::Bitmap::operator==((uint64_t)v40, (uint64_t)this + 16))
      break;
    degas::Bitmap::operator=((_QWORD *)this + 2, v40);
    degas::Bitmap::intersectWith<degas::Bitmap>((degas::Bitmap *)v40, (degas::Bitmap *)&v44);
    if (v41[0] != v41[1])
      degas::Bitmap::unionWith<degas::Bitmap>((degas::Bitmap *)v42, (uint64_t)v40);
LABEL_37:
    v46 = (void **)v41;
    std::vector<degas::BitsetPtr>::__destroy_vector::operator()[abi:ne180100](&v46);
  }
  v46 = (void **)v41;
  std::vector<degas::BitsetPtr>::__destroy_vector::operator()[abi:ne180100](&v46);
  degas::Bitmap::operator=((_QWORD *)this + 2, v42);
  v40[0] = (degas::UncountedPathCollection *)v43;
  std::vector<degas::BitsetPtr>::__destroy_vector::operator()[abi:ne180100]((void ***)v40);
LABEL_62:
  v14 = 0;
LABEL_73:
  v42[0] = (degas::UncountedPathCollection *)v45;
  std::vector<degas::BitsetPtr>::__destroy_vector::operator()[abi:ne180100]((void ***)v42);
  return v14;
}

void sub_1CA1A6E28(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23)
{
  a9 = (void **)&a17;
  std::vector<degas::BitsetPtr>::__destroy_vector::operator()[abi:ne180100](&a9);
  a9 = (void **)&a23;
  std::vector<degas::BitsetPtr>::__destroy_vector::operator()[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

uint64_t degas::Traversal::targetNodes(degas::Traversal *this)
{
  int v1;
  uint64_t v2;

  v1 = *((_DWORD *)this + 2);
  if (v1 == 2)
  {
    v2 = *((_QWORD *)this + 19);
    return v2 + 24;
  }
  if (v1 == 1)
  {
    v2 = *((_QWORD *)this + 21);
    return v2 + 24;
  }
  return (uint64_t)this + 16;
}

_QWORD *degas::Traversal::populateDistribution(_QWORD *result, _QWORD *a2)
{
  int v2;

  v2 = *((_DWORD *)result + 2);
  if (v2 == 2)
    return std::shared_ptr<degas::Statement>::operator=[abi:ne180100](a2, result[19], result[20]);
  if (v2 == 1)
    return std::shared_ptr<degas::Statement>::operator=[abi:ne180100](a2 + 2, result[21], result[22]);
  return result;
}

uint64_t degas::Bitset::encodedLength(degas::Bitset *this)
{
  unint64_t v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unsigned int v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t i;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;

  v1 = *((_QWORD *)this + 1);
  if (v1 < 0x80)
  {
    v4 = 1;
  }
  else
  {
    v2 = -1;
    do
    {
      v3 = v1 >> 14;
      v1 >>= 7;
      ++v2;
    }
    while (v3);
    v4 = v2 + 2;
  }
  v5 = *((_DWORD *)this + 1);
  if (v5 <= 0x7F)
  {
    v9 = v4 + 1;
  }
  else
  {
    v6 = -1;
    v7 = *((unsigned int *)this + 1);
    do
    {
      v8 = v7 >> 14;
      v7 >>= 7;
      ++v6;
    }
    while (v8);
    v9 = v6 + v4 + 2;
    if (v5 == 1024)
      return v9;
  }
  for (i = 0; i != 32; ++i)
  {
    v11 = (*((_DWORD *)this + i + 4) + 1);
    if (v11 < 0x80)
    {
      v14 = 1;
    }
    else
    {
      v12 = -1;
      do
      {
        v13 = v11 >> 14;
        v11 >>= 7;
        ++v12;
      }
      while (v13);
      v14 = v12 + 2;
    }
    v9 += v14;
  }
  return v9;
}

uint64_t degas::Bitset::appendEncodedToBuffer(uint64_t this, unsigned __int8 **a2)
{
  unint64_t v2;
  unsigned __int8 *v3;
  unint64_t v4;
  unint64_t v5;
  unsigned __int8 *v6;
  unint64_t v7;
  unsigned __int8 *v8;
  unint64_t v9;
  unint64_t v10;
  unsigned __int8 *v11;
  uint64_t i;
  unint64_t v13;
  unsigned __int8 *v14;
  unint64_t v15;
  unint64_t v16;
  unsigned __int8 *v17;

  v2 = *(_QWORD *)(this + 8);
  if (v2 < 0x80)
  {
    v4 = *(_QWORD *)(this + 8);
  }
  else
  {
    do
    {
      v3 = (*a2)++;
      *v3 = v2 | 0x80;
      v4 = v2 >> 7;
      v5 = v2 >> 14;
      v2 >>= 7;
    }
    while (v5);
  }
  v6 = (*a2)++;
  *v6 = v4;
  v7 = *(unsigned int *)(this + 4);
  if (v7 < 0x80)
  {
    LODWORD(v9) = *(_DWORD *)(this + 4);
  }
  else
  {
    do
    {
      v8 = (*a2)++;
      *v8 = v7 | 0x80;
      v9 = v7 >> 7;
      v10 = v7 >> 14;
      v7 >>= 7;
    }
    while (v10);
  }
  v11 = (*a2)++;
  *v11 = v9;
  if (*(_DWORD *)(this + 4) != 1024)
  {
    for (i = 0; i != 32; ++i)
    {
      v13 = (*(_DWORD *)(this + 4 * i + 16) + 1);
      if (v13 < 0x80)
      {
        LODWORD(v15) = *(_DWORD *)(this + 4 * i + 16) + 1;
      }
      else
      {
        do
        {
          v14 = (*a2)++;
          *v14 = v13 | 0x80;
          v15 = v13 >> 7;
          v16 = v13 >> 14;
          v13 >>= 7;
        }
        while (v16);
      }
      v17 = (*a2)++;
      *v17 = v15;
    }
  }
  return this;
}

degas::Bitset *degas::Bitset::Bitset(degas::Bitset *this, const unsigned __int8 **a2)
{
  const unsigned __int8 **v4;
  int UnsignedInt;
  const unsigned __int8 **v6;
  __int128 v7;
  uint64_t i;

  *(_DWORD *)this = 0;
  *((_QWORD *)this + 1) = degas::_getUnsignedInt((degas *)a2, a2);
  UnsignedInt = degas::_getUnsignedInt((degas *)a2, v4);
  *((_DWORD *)this + 1) = UnsignedInt;
  if (UnsignedInt == 1024)
  {
    *(_QWORD *)&v7 = -1;
    *((_QWORD *)&v7 + 1) = -1;
    *((_OWORD *)this + 7) = v7;
    *((_OWORD *)this + 8) = v7;
    *((_OWORD *)this + 5) = v7;
    *((_OWORD *)this + 6) = v7;
    *((_OWORD *)this + 3) = v7;
    *((_OWORD *)this + 4) = v7;
    *((_OWORD *)this + 1) = v7;
    *((_OWORD *)this + 2) = v7;
    *((_DWORD *)this + 1) = 1024;
  }
  else
  {
    for (i = 0; i != 128; i += 4)
      *(_DWORD *)((char *)this + i + 16) = degas::_getUnsignedInt((degas *)a2, v6) - 1;
  }
  return this;
}

uint64_t degas::_getUnsignedInt(degas *this, const unsigned __int8 **a2)
{
  unsigned __int8 *v2;
  int v3;
  uint64_t v4;

  v2 = (unsigned __int8 *)(*(_QWORD *)this)++;
  v3 = (char)*v2;
  v4 = *v2;
  if (v3 < 0)
    return (v4 - 128) + (degas::_getUnsignedInt(this, a2) << 7);
  return v4;
}

BOOL degas::Bitset::setBit(degas::Bitset *this, uint64_t a2)
{
  unint64_t v2;
  int v3;
  char *v4;
  int *v5;
  int v6;
  int v7;
  int v8;
  int v9;

  v2 = a2 - *((_QWORD *)this + 1);
  v3 = 1 << v2;
  v4 = (char *)this + 4 * (v2 >> 5);
  v7 = *((_DWORD *)v4 + 4);
  v5 = (int *)(v4 + 16);
  v6 = v7;
  v8 = v3 & v7;
  if ((v3 & v7) == 0)
  {
    *v5 = v3 | v6;
    v9 = *((_DWORD *)this + 1);
    if (v9 != -1)
      *((_DWORD *)this + 1) = v9 + 1;
  }
  return v8 == 0;
}

BOOL degas::Bitset::clearBit(degas::Bitset *this, uint64_t a2)
{
  unint64_t v2;
  int v3;
  char *v4;
  int *v5;
  int v6;
  int v7;
  int v8;
  int v9;

  v2 = a2 - *((_QWORD *)this + 1);
  v3 = 1 << v2;
  v4 = (char *)this + 4 * (v2 >> 5);
  v7 = *((_DWORD *)v4 + 4);
  v5 = (int *)(v4 + 16);
  v6 = v7;
  v8 = v3 & v7;
  if ((v3 & v7) != 0)
  {
    *v5 = v6 & ~v3;
    v9 = *((_DWORD *)this + 1);
    if (v9 != -1)
      *((_DWORD *)this + 1) = v9 - 1;
  }
  return v8 != 0;
}

_QWORD *degas::Bitset::setRange(_QWORD *this, unint64_t a2, unint64_t a3)
{
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  BOOL v7;
  unint64_t v9;
  unint64_t v10;
  int v11;
  BOOL v12;
  int v13;
  int v14;
  int v15;
  int v16;
  unint64_t v17;
  char *v18;

  if (a2 <= a3)
  {
    v3 = (uint64_t)this;
    v4 = this[1];
    v5 = v4 + 1024;
    v6 = a2 - v4;
    v7 = a2 >= v4 && v5 > a2;
    if (v7 && v5 > a3)
    {
      v9 = v6 >> 5;
      v10 = a3 - v4;
      v11 = -2 << v6;
      v12 = (v6 & 0x1F) == 31;
      v13 = 1 << v6;
      if (v12)
        v14 = -1;
      else
        v14 = ~v11;
      v15 = v14 & ~v13;
      v16 = (-1 << v10) & ~(1 << v10);
      if (v9 == v10 >> 5)
      {
        v16 |= v15;
        v17 = v9;
      }
      else
      {
        v17 = v10 >> 5;
        v18 = (char *)this + 4 * v9;
        *((_DWORD *)v18 + 4) |= ~v15;
        if (v9 + 1 < v17)
          this = memset(v18 + 20, 255, 4 * (v17 + ~v9));
      }
      *(_DWORD *)(v3 + 4 * v17 + 16) |= ~v16;
      *(_DWORD *)(v3 + 4) = -1;
    }
  }
  return this;
}

void degas::Bitset::clearRange(degas::Bitset *this, unint64_t a2, unint64_t a3)
{
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  BOOL v7;
  unint64_t v9;
  unint64_t v10;
  int v11;
  BOOL v12;
  int v13;
  int v14;
  int v15;
  int v16;
  unint64_t v17;
  char *v18;

  if (a2 <= a3)
  {
    v4 = *((_QWORD *)this + 1);
    v5 = v4 + 1024;
    v6 = a2 - v4;
    v7 = a2 >= v4 && v5 > a2;
    if (v7 && v5 > a3)
    {
      v9 = v6 >> 5;
      v10 = a3 - v4;
      v11 = -2 << v6;
      v12 = (v6 & 0x1F) == 31;
      v13 = 1 << v6;
      if (v12)
        v14 = -1;
      else
        v14 = ~v11;
      v15 = v14 & ~v13;
      v16 = (-1 << v10) & ~(1 << v10);
      if (v9 == v10 >> 5)
      {
        v16 |= v15;
        v17 = v9;
      }
      else
      {
        v17 = v10 >> 5;
        v18 = (char *)this + 4 * v9;
        *((_DWORD *)v18 + 4) &= v15;
        if (v9 + 1 < v17)
          bzero(v18 + 20, 4 * (v17 + ~v9));
      }
      *((_DWORD *)this + v17 + 4) &= v16;
      *((_DWORD *)this + 1) = -1;
    }
  }
}

uint64_t degas::Bitset::countBitsInRange(degas::Bitset *this, unint64_t a2, unint64_t a3, int8x8_t a4)
{
  unint64_t v4;
  unint64_t v5;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  int v11;
  int v12;
  int v13;
  uint64_t v14;
  unint64_t v15;
  int v16;
  unint64_t v17;
  int v18;
  int v19;
  unsigned int v20;
  uint64_t v21;
  int32x4_t v22;

  v4 = *((_QWORD *)this + 1);
  v5 = v4 + 1023;
  if (v4 < a2 || v5 > a3)
  {
    v7 = 0;
    if (v5 >= a3)
      v5 = a3;
    v8 = a2 - v4;
    if (a2 < v4)
      v8 = 0;
    v9 = v5 - v4;
    v10 = v9 >> 5;
    v11 = v9 & 0x1F;
    v12 = -2 << v9;
    if (v11 == 31)
      v13 = -1;
    else
      v13 = ~v12;
    if (v10 >= v8 >> 5)
    {
      v14 = 0;
      v7 = 0;
      v15 = v8 >> 5;
      v16 = -1 << v8;
      v17 = v10 - v15;
      do
      {
        if (v14)
          v18 = -1;
        else
          v18 = v16;
        if (v17 == v14)
          v19 = v13;
        else
          v19 = -1;
        a4.i32[0] = v19 & v18 & *((_DWORD *)this + v15 + v14 + 4);
        a4 = vcnt_s8(a4);
        a4.i16[0] = vaddlv_u8((uint8x8_t)a4);
        v7 += a4.u32[0];
        ++v14;
      }
      while (v17 + 1 != v14);
    }
  }
  else
  {
    v20 = *((_DWORD *)this + 1);
    if (v20 == -1)
    {
      v21 = 0;
      v22 = 0uLL;
      do
      {
        do
        {
          v22 = (int32x4_t)vpadalq_u16((uint32x4_t)v22, vpaddlq_u8((uint8x16_t)vcntq_s8(*(int8x16_t *)((char *)this + 4 * v21 + 16))));
          v21 += 4;
        }
        while (v21 != 32);
        v21 = 0;
        v20 = vaddvq_s32(v22);
        v22 = 0uLL;
      }
      while (v20 == -1);
      *((_DWORD *)this + 1) = v20;
    }
    return v20;
  }
  return v7;
}

BOOL degas::Bitset::overlapsWith(degas::Bitset *this, const degas::Bitset *a2)
{
  uint64_t v3;
  unint64_t v4;
  int v5;
  int v6;

  if ((*((_DWORD *)a2 + 4) & *((_DWORD *)this + 4)) != 0)
    return 1;
  v3 = 0;
  v4 = 31;
  while (v3 != 31)
  {
    v5 = *((_DWORD *)this + v3 + 5);
    v6 = *((_DWORD *)a2 + v3++ + 5);
    if ((v6 & v5) != 0)
    {
      v4 = v3 - 1;
      return v4 < 0x1F;
    }
  }
  return v4 < 0x1F;
}

BOOL degas::Bitset::isSubsetOf(degas::Bitset *this, const degas::Bitset *a2)
{
  BOOL v2;
  unint64_t i;
  int v4;

  v2 = 0;
  for (i = 0; i != 32; ++i)
  {
    v4 = *((_DWORD *)this + i + 4);
    if (v4 && (v4 & ~*((_DWORD *)a2 + i + 4)) != 0)
      break;
    v2 = i > 0x1E;
  }
  return v2;
}

unint64_t degas::Bitset::rangeOfBatch(degas::Bitset *this, unint64_t a2, unint64_t *a3, unint64_t *a4, uint32x4_t a5)
{
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  unint64_t v17;
  unsigned int v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unsigned __int32 v22;
  uint64_t v23;
  unint64_t v24;
  BOOL v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v29;

  v8 = *((_QWORD *)this + 1);
  v9 = *a3 - v8;
  if (*a3 <= v8)
  {
    v18 = *((_DWORD *)this + 1);
    if (v18 == -1)
    {
      v19 = 0;
      a5 = 0uLL;
      do
      {
        do
        {
          a5 = vpadalq_u16(a5, vpaddlq_u8((uint8x16_t)vcntq_s8(*(int8x16_t *)((char *)this + 4 * v19 + 16))));
          v19 += 4;
        }
        while (v19 != 32);
        v19 = 0;
        v18 = vaddvq_s32((int32x4_t)a5);
        a5 = 0uLL;
      }
      while (v18 == -1);
      *((_DWORD *)this + 1) = v18;
    }
    v17 = v18;
    if (v18 <= a2)
    {
      *a4 = v8 + 1023;
    }
    else
    {
      v20 = 0;
      v21 = 0;
      while (1)
      {
        v22 = *((_DWORD *)this + v21 + 4);
        a5.i32[0] = v22;
        *(int8x8_t *)a5.i8 = vcnt_s8(*(int8x8_t *)a5.i8);
        a5.i16[0] = vaddlv_u8(*(uint8x8_t *)a5.i8);
        v17 = v20 + a5.u32[0];
        if (v17 >= a2)
          break;
        ++v21;
        v20 += a5.u32[0];
        if (v21 == 32)
          return v17;
      }
      if (v17 == a2)
      {
        v23 = v8 + 32 * v21;
LABEL_33:
        *a4 = v23 + 31;
        return a2;
      }
      if (v17 > a2)
      {
        v24 = v8 + 32 * v21;
        v29 = v24;
        v25 = v8 + 1024 <= v24 || v8 > v24;
        v26 = v22 & 1;
        if (v25)
          v26 = 0;
        v17 = v20 + v26;
        if (v20 + v26 < a2)
        {
          do
            v17 += degas::Bitset::nextBit(this, &v29, v29);
          while (v17 < a2);
          v24 = v29;
        }
        *a4 = v24;
      }
    }
  }
  else if (*a3 > v8 + 1023 || v9 > 0x3FF)
  {
    return 0;
  }
  else
  {
    v10 = 0;
    v11 = 0;
    v12 = v9 >> 5;
    if (v9 >> 5 <= 0x1F)
      v13 = 31;
    else
      v13 = v9 >> 5;
    v14 = v13 + 1;
    v15 = (32 * v12) | 0x1F;
    while (1)
    {
      if (v10)
      {
        a5.i64[0] = *((unsigned int *)this + v12 + 4);
      }
      else
      {
        v16 = ((*(_DWORD *)a3 - *((_DWORD *)this + 2)) & 0x1F) == 0x1F
            ? -1
            : ~(-2 << (*(_DWORD *)a3 - *((_DWORD *)this + 2)));
        a5.i32[0] = v16 & *((_DWORD *)this + v12 + 4);
      }
      *(int8x8_t *)a5.i8 = vcnt_s8(*(int8x8_t *)a5.i8);
      a5.i16[0] = vaddlv_u8(*(uint8x8_t *)a5.i8);
      v17 = v11 + a5.u32[0];
      if (v17 >= a2)
        break;
      ++v12;
      *a4 = v15 + *((_QWORD *)this + 1);
      v15 += 32;
      --v10;
      v11 += a5.u32[0];
      if (v14 == v12)
        return v17;
    }
    if (v17 == a2)
    {
      v23 = *((_QWORD *)this + 1) + 32 * v12;
      goto LABEL_33;
    }
    if (v17 > a2)
    {
      v27 = *((_QWORD *)this + 1) + 32 * v12 - 1;
      v29 = v27;
      if (v11 < a2)
      {
        do
          v11 += degas::Bitset::nextBit(this, &v29, v29);
        while (v11 < a2);
        v27 = v29;
      }
      *a4 = v27;
      return v11;
    }
  }
  return v17;
}

uint64_t degas::Bitset::nextBit(degas::Bitset *this, unint64_t *a2, unint64_t a3)
{
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  unsigned int v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  unsigned int v10;

  v3 = *((_QWORD *)this + 1);
  while (1)
  {
    if (a3 != -1)
    {
      v4 = a3 - v3;
      if (a3 >= v3)
        break;
    }
    a3 = *((_QWORD *)this + 1);
    if (v3 <= 0xFFFFFFFFFFFFFBFFLL)
    {
      a3 = *((_QWORD *)this + 1);
      if ((*((_BYTE *)this + 16) & 1) != 0)
        goto LABEL_18;
    }
  }
  v5 = v4 >> 5;
  if ((v4 & 0x1F) == 0x1F || (v6 = *((_DWORD *)this + v5 + 4) & (-2 << (v4 & 0x1F))) == 0)
  {
    if (v4 > 0x3DF)
      return 0;
    v7 = 30;
    if (v5 > 0x1E)
      v7 = v5;
    v8 = v7 + 1;
    while (1)
    {
      v9 = v5 + 1;
      v10 = *((_DWORD *)this + v5 + 5);
      if (v10)
        break;
      v5 = v9;
      if (v8 == v9)
        return 0;
    }
    v3 += __clz(__rbit32(v10)) | (32 * v9);
  }
  else
  {
    v3 += (v4 & 0xFFFFFFFFFFFFFFE0) + __clz(__rbit32(v6));
  }
LABEL_18:
  *a2 = v3;
  return 1;
}

uint64_t degas::Bitset::firstBit(degas::Bitset *this, unint64_t *a2)
{
  unint64_t v2;

  v2 = *((_QWORD *)this + 1);
  if (v2 > 0xFFFFFFFFFFFFFBFFLL || (*((_BYTE *)this + 16) & 1) == 0)
    return degas::Bitset::nextBit(this, a2, v2);
  *a2 = v2;
  return 1;
}

uint64_t degas::Bitset::lastBit(degas::Bitset *this, unint64_t *a2)
{
  uint64_t i;
  unsigned int v3;
  uint64_t v4;

  for (i = 35; i != 4; --i)
  {
    v3 = *((_DWORD *)this + i);
    if (v3)
    {
      v4 = i - 4;
      goto LABEL_7;
    }
  }
  v3 = *((_DWORD *)this + 4);
  if (v3)
  {
    v4 = 0;
LABEL_7:
    *a2 = (__clz(v3) ^ 0x1F | (unint64_t)(32 * v4)) + *((_QWORD *)this + 1);
    return 1;
  }
  return 0;
}

uint64_t __Block_byref_object_copy__3179(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void __Block_byref_object_dispose__3180(uint64_t a1)
{

}

double degas::StatementPerformanceEntry::reset(degas::StatementPerformanceEntry *this)
{
  double result;

  *((_QWORD *)this + 6) = 0;
  result = 0.0;
  *((_OWORD *)this + 1) = 0u;
  *((_OWORD *)this + 2) = 0u;
  return result;
}

double degas::StatementPerformanceEntry::addStep(degas::StatementPerformanceEntry *this, double a2, unsigned int a3)
{
  double result;

  *((_QWORD *)this + 2) += a3;
  result = *((double *)this + 6) + a2;
  *((double *)this + 6) = result;
  return result;
}

int32x2_t degas::StatementPerformanceEntry::addIO(int32x2_t *this, int32x2_t *a2)
{
  int32x2_t result;

  result = vadd_s32(this[7], *a2);
  this[7] = result;
  this[8].i32[0] += a2[1].i32[0];
  return result;
}

uint64_t degas::StatementPerformanceLog::StatementPerformanceLog(uint64_t a1, __int128 *a2)
{
  std::string *v3;
  __int128 v4;

  *(_DWORD *)a1 = -1;
  v3 = (std::string *)(a1 + 8);
  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v3, *(const std::string::value_type **)a2, *((_QWORD *)a2 + 1));
  }
  else
  {
    v4 = *a2;
    v3->__r_.__value_.__r.__words[2] = *((_QWORD *)a2 + 2);
    *(_OWORD *)&v3->__r_.__value_.__l.__data_ = v4;
  }
  *(_QWORD *)(a1 + 48) = 0;
  *(_QWORD *)(a1 + 40) = 0;
  *(_QWORD *)(a1 + 32) = a1 + 40;
  return a1;
}

{
  std::string *v3;
  __int128 v4;

  *(_DWORD *)a1 = -1;
  v3 = (std::string *)(a1 + 8);
  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v3, *(const std::string::value_type **)a2, *((_QWORD *)a2 + 1));
  }
  else
  {
    v4 = *a2;
    v3->__r_.__value_.__r.__words[2] = *((_QWORD *)a2 + 2);
    *(_OWORD *)&v3->__r_.__value_.__l.__data_ = v4;
  }
  *(_QWORD *)(a1 + 48) = 0;
  *(_QWORD *)(a1 + 40) = 0;
  *(_QWORD *)(a1 + 32) = a1 + 40;
  return a1;
}

uint64_t degas::StatementPerformanceLog::appendEntry(degas::StatementPerformanceLog *this, const degas::StatementPerformanceEntry *a2)
{
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  _QWORD *v10;
  _QWORD *v11;
  _QWORD *v12;
  _QWORD *v13;
  const std::locale::facet *v14;
  void *__p[2];
  char v17;
  _QWORD v18[11];
  char v19;
  uint64_t v20;

  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v18);
  v3 = (_QWORD *)std::ostream::operator<<();
  LOBYTE(__p[0]) = 44;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)__p, 1);
  v4 = (_QWORD *)std::ostream::operator<<();
  LOBYTE(__p[0]) = 44;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, (uint64_t)__p, 1);
  v5 = (_QWORD *)std::ostream::operator<<();
  LOBYTE(__p[0]) = 44;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)__p, 1);
  v6 = (_QWORD *)std::ostream::operator<<();
  LOBYTE(__p[0]) = 44;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)__p, 1);
  v7 = (_QWORD *)std::ostream::operator<<();
  LOBYTE(__p[0]) = 44;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)__p, 1);
  v8 = (_QWORD *)std::ostream::operator<<();
  LOBYTE(__p[0]) = 44;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)__p, 1);
  v9 = (_QWORD *)std::ostream::operator<<();
  LOBYTE(__p[0]) = 44;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)__p, 1);
  v10 = (_QWORD *)std::ostream::operator<<();
  LOBYTE(__p[0]) = 44;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)__p, 1);
  v11 = (_QWORD *)std::ostream::operator<<();
  LOBYTE(__p[0]) = 44;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v11, (uint64_t)__p, 1);
  v12 = (_QWORD *)std::ostream::operator<<();
  LOBYTE(__p[0]) = 44;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, (uint64_t)__p, 1);
  v13 = (_QWORD *)std::ostream::operator<<();
  std::ios_base::getloc((const std::ios_base *)((char *)v13 + *(_QWORD *)(*v13 - 24)));
  v14 = std::locale::use_facet((const std::locale *)__p, MEMORY[0x1E0DE4A90]);
  ((void (*)(const std::locale::facet *, uint64_t))v14->__vftable[2].~facet_0)(v14, 10);
  std::locale::~locale((std::locale *)__p);
  std::ostream::put();
  std::ostream::flush();
  std::stringbuf::str();
  degas::LocalLogFile::writeText(this, (const void **)__p);
  if (v17 < 0)
    operator delete(__p[0]);
  v18[0] = *MEMORY[0x1E0DE4F60];
  *(_QWORD *)((char *)v18 + *(_QWORD *)(v18[0] - 24)) = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 24);
  v18[1] = MEMORY[0x1E0DE4FB8] + 16;
  if (v19 < 0)
    operator delete((void *)v18[9]);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  return MEMORY[0x1CAA4AD98](&v20);
}

void sub_1CA1AC928(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15)
{
  if (a14 < 0)
    operator delete(__p);
  std::ostringstream::~ostringstream((uint64_t)&a15);
  _Unwind_Resume(a1);
}

unint64_t degas::StatementPerformanceLog::rowCountForTable(degas::StatementPerformanceLog *this, const degas::Table *a2)
{
  char **v4;
  unsigned __int8 **v5;
  unsigned int v6;
  unsigned __int8 **v7;
  unsigned int v8;
  BOOL v9;
  char **v10;
  int v11;
  unint64_t v12;
  unsigned int v13;
  unsigned __int8 *v14;
  unsigned __int8 **v15;
  unsigned int v16;
  unsigned __int8 *v17;
  uint64_t v18;
  uint64_t *v19;
  unint64_t v21;

  v5 = (unsigned __int8 **)((char *)this + 40);
  v4 = (char **)*((_QWORD *)this + 5);
  if (!v4)
    goto LABEL_12;
  v6 = *((unsigned __int8 *)a2 + 48);
  v7 = (unsigned __int8 **)((char *)this + 40);
  do
  {
    v8 = *((unsigned __int8 *)v4 + 32);
    v9 = v8 >= v6;
    if (v8 >= v6)
      v10 = v4;
    else
      v10 = v4 + 1;
    if (v9)
      v7 = (unsigned __int8 **)v4;
    v4 = (char **)*v10;
  }
  while (*v10);
  if (v7 != v5 && v6 >= *((unsigned __int8 *)v7 + 32))
    return (unint64_t)v7[5];
LABEL_12:
  v21 = 0;
  v11 = degas::Table::rowCount(a2, (sqlite3_int64 *)&v21);
  v12 = v21;
  if (!v11)
  {
    v13 = *((unsigned __int8 *)a2 + 48);
    v14 = *v5;
    v15 = v5;
    if (*v5)
    {
      while (1)
      {
        while (1)
        {
          v15 = (unsigned __int8 **)v14;
          v16 = v14[32];
          if (v13 >= v16)
            break;
          v14 = *v15;
          v5 = v15;
          if (!*v15)
            goto LABEL_20;
        }
        if (v16 >= v13)
          break;
        v14 = v15[1];
        if (!v14)
        {
          v5 = v15 + 1;
          goto LABEL_20;
        }
      }
    }
    else
    {
LABEL_20:
      v17 = (unsigned __int8 *)v15;
      v15 = (unsigned __int8 **)operator new(0x30uLL);
      *((_BYTE *)v15 + 32) = v13;
      v15[5] = 0;
      *v15 = 0;
      v15[1] = 0;
      v15[2] = v17;
      *v5 = (unsigned __int8 *)v15;
      v18 = **((_QWORD **)this + 4);
      v19 = (uint64_t *)v15;
      if (v18)
      {
        *((_QWORD *)this + 4) = v18;
        v19 = (uint64_t *)*v5;
      }
      std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(*((uint64_t **)this + 5), v19);
      ++*((_QWORD *)this + 6);
    }
    v15[5] = (unsigned __int8 *)v12;
  }
  return v12;
}

void sub_1CA1ADA40(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1CA1ADB58(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1CA1AEF7C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1CA1AF0AC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1CA1AFF48(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  uint64_t v9;
  va_list va;

  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Block_object_dispose((const void *)(v9 - 64), 8);
  _Unwind_Resume(a1);
}

uint64_t __Block_byref_object_copy__3350(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void __Block_byref_object_dispose__3351(uint64_t a1)
{

}

uint64_t degas::DatabaseMap::DatabaseMap(uint64_t this)
{
  *(_QWORD *)(this + 8) = 0;
  *(_QWORD *)this = this + 8;
  *(_QWORD *)(this + 40) = 0;
  *(_QWORD *)(this + 32) = 0;
  *(_QWORD *)(this + 16) = 0;
  *(_QWORD *)(this + 24) = this + 32;
  *(_DWORD *)(this + 48) = 0;
  return this;
}

{
  *(_QWORD *)(this + 8) = 0;
  *(_QWORD *)this = this + 8;
  *(_QWORD *)(this + 40) = 0;
  *(_QWORD *)(this + 32) = 0;
  *(_QWORD *)(this + 16) = 0;
  *(_QWORD *)(this + 24) = this + 32;
  *(_DWORD *)(this + 48) = 0;
  return this;
}

void degas::DatabaseMap::registerDatabase(_QWORD **a1, std::string::size_type a2, std::string::size_type a3)
{
  os_unfair_lock_s *v6;
  _QWORD **v7;
  uint64_t *v8;
  char **v9;
  uint64_t *v10;
  _QWORD *v11;
  _QWORD *v12;
  _QWORD *v13;
  _QWORD *v14;
  _QWORD *v15;
  _OWORD *v16;
  std::string::size_type v17;
  _QWORD *v18;
  char *v19;
  char **v20;
  _QWORD *v21;
  char *v22;
  _QWORD *v23;
  std::string::size_type v24;
  _QWORD *v25;
  std::string *p_p;
  std::string __p;
  std::string v28;
  std::string v29;
  uint64_t v30;

  v30 = *MEMORY[0x1E0C80C00];
  v6 = (os_unfair_lock_s *)(a1 + 6);
  os_unfair_lock_lock((os_unfair_lock_t)a1 + 12);
  v7 = a1 + 3;
  v8 = std::__tree<std::__value_type<std::string,std::shared_ptr<degas::LabelIndex_Persisted>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<degas::LabelIndex_Persisted>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<degas::LabelIndex_Persisted>>>>::find<std::string>((uint64_t)(a1 + 3), (_QWORD *)a2);
  v9 = (char **)(a1 + 4);
  if (a1 + 4 != (_QWORD **)v8)
  {
    v10 = v8;
    memset(&__p, 0, sizeof(__p));
    degas::callstack((uint64_t)&__p);
    if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_FAULT))
    {
      v24 = *(_QWORD *)a2;
      if (*(char *)(a2 + 23) >= 0)
        v24 = a2;
      v25 = v10 + 7;
      if (*((char *)v10 + 79) < 0)
        v25 = (_QWORD *)*v25;
      p_p = &__p;
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
        p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
      LODWORD(v28.__r_.__value_.__l.__data_) = 136315650;
      *(std::string::size_type *)((char *)v28.__r_.__value_.__r.__words + 4) = v24;
      WORD2(v28.__r_.__value_.__r.__words[1]) = 2080;
      *(std::string::size_type *)((char *)&v28.__r_.__value_.__r.__words[1] + 6) = (std::string::size_type)v25;
      HIWORD(v28.__r_.__value_.__r.__words[2]) = 2080;
      v29.__r_.__value_.__r.__words[0] = (std::string::size_type)p_p;
      _os_log_fault_impl(&dword_1CA0A5000, MEMORY[0x1E0C81028], OS_LOG_TYPE_FAULT, "second open attempt on database at path %s\nprevious call stack:\n%s\ncurrent call stack:\n%s", (uint8_t *)&v28, 0x20u);
    }
    std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__remove_node_pointer(a1 + 3, v10);
    std::__destroy_at[abi:ne180100]<std::pair<std::string const,std::string>,0>((uint64_t)(v10 + 4));
    operator delete(v10);
    v11 = std::__tree<std::__value_type<std::string,std::shared_ptr<degas::LabelIndex_Persisted>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<degas::LabelIndex_Persisted>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<degas::LabelIndex_Persisted>>>>::find<std::string>((uint64_t)a1, (_QWORD *)a2);
    if (a1 + 1 != v11)
      std::__tree<std::__value_type<std::string,degas::Database *>,std::__map_value_compare<std::string,std::__value_type<std::string,degas::Database *>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,degas::Database *>>>::erase(a1, (uint64_t)v11);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (*(char *)(a2 + 23) < 0)
    std::string::__init_copy_ctor_external(&v28, *(const std::string::value_type **)a2, *(_QWORD *)(a2 + 8));
  else
    v28 = *(std::string *)a2;
  v29.__r_.__value_.__r.__words[0] = a3;
  v13 = a1 + 1;
  v12 = a1[1];
  if (v12)
  {
    while (1)
    {
      while (1)
      {
        v13 = v12;
        v14 = v12 + 4;
        if (!std::less<std::string>::operator()[abi:ne180100](&v28, v12 + 4))
          break;
        v12 = (_QWORD *)*v13;
        v15 = v13;
        if (!*v13)
          goto LABEL_18;
      }
      if (!std::less<std::string>::operator()[abi:ne180100](v14, &v28))
        break;
      v15 = v13 + 1;
      v12 = (_QWORD *)v13[1];
      if (!v12)
        goto LABEL_18;
    }
  }
  else
  {
    v15 = a1 + 1;
LABEL_18:
    v16 = operator new(0x40uLL);
    v16[2] = *(_OWORD *)&v28.__r_.__value_.__l.__data_;
    v17 = v28.__r_.__value_.__r.__words[2];
    memset(&v28, 0, sizeof(v28));
    *((_QWORD *)v16 + 6) = v17;
    *((_QWORD *)v16 + 7) = a3;
    *(_QWORD *)v16 = 0;
    *((_QWORD *)v16 + 1) = 0;
    *((_QWORD *)v16 + 2) = v13;
    *v15 = v16;
    v18 = (_QWORD *)**a1;
    if (v18)
    {
      *a1 = v18;
      v16 = (_OWORD *)*v15;
    }
    std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(a1[1], (uint64_t *)v16);
    a1[2] = (_QWORD *)((char *)a1[2] + 1);
  }
  if (SHIBYTE(v28.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v28.__r_.__value_.__l.__data_);
  memset(&__p, 0, sizeof(__p));
  degas::callstack((uint64_t)&__p);
  if (*(char *)(a2 + 23) < 0)
    std::string::__init_copy_ctor_external(&v28, *(const std::string::value_type **)a2, *(_QWORD *)(a2 + 8));
  else
    v28 = *(std::string *)a2;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v29, __p.__r_.__value_.__l.__data_, __p.__r_.__value_.__l.__size_);
  else
    v29 = __p;
  while (1)
  {
    v19 = *v9;
    v20 = v9;
    if (!*v9)
      break;
    while (1)
    {
      v9 = (char **)v19;
      v21 = v19 + 32;
      if (std::less<std::string>::operator()[abi:ne180100](&v28, (_QWORD *)v19 + 4))
        break;
      if (!std::less<std::string>::operator()[abi:ne180100](v21, &v28))
        goto LABEL_36;
      v20 = v9 + 1;
      v19 = v9[1];
      if (!v19)
        goto LABEL_33;
    }
  }
LABEL_33:
  v22 = (char *)operator new(0x50uLL);
  *(std::string *)(v22 + 32) = v28;
  memset(&v28, 0, sizeof(v28));
  *(std::string *)(v22 + 56) = v29;
  memset(&v29, 0, sizeof(v29));
  *(_QWORD *)v22 = 0;
  *((_QWORD *)v22 + 1) = 0;
  *((_QWORD *)v22 + 2) = v9;
  *v20 = v22;
  v23 = (_QWORD *)**v7;
  if (v23)
  {
    *v7 = v23;
    v22 = *v20;
  }
  std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(a1[4], (uint64_t *)v22);
  a1[5] = (_QWORD *)((char *)a1[5] + 1);
LABEL_36:
  if (SHIBYTE(v29.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v29.__r_.__value_.__l.__data_);
  if (SHIBYTE(v28.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v28.__r_.__value_.__l.__data_);
  os_unfair_lock_unlock(v6);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
}

void sub_1CA1B109C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a21 < 0)
    operator delete(__p);
  if (a15 < 0)
    operator delete(a10);
  _Unwind_Resume(exception_object);
}

uint64_t *std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__remove_node_pointer(uint64_t **a1, uint64_t *a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t *v4;
  BOOL v5;
  uint64_t *v6;

  v2 = (uint64_t *)a2[1];
  if (v2)
  {
    do
    {
      v3 = v2;
      v2 = (uint64_t *)*v2;
    }
    while (v2);
  }
  else
  {
    v4 = a2;
    do
    {
      v3 = (uint64_t *)v4[2];
      v5 = *v3 == (_QWORD)v4;
      v4 = v3;
    }
    while (!v5);
  }
  if (*a1 == a2)
    *a1 = v3;
  v6 = a1[1];
  a1[2] = (uint64_t *)((char *)a1[2] - 1);
  return std::__tree_remove[abi:ne180100]<std::__tree_node_base<void *> *>(v6, a2);
}

void std::__destroy_at[abi:ne180100]<std::pair<std::string const,std::string>,0>(uint64_t a1)
{
  if (*(char *)(a1 + 47) < 0)
    operator delete(*(void **)(a1 + 24));
  if (*(char *)(a1 + 23) < 0)
    operator delete(*(void **)a1);
}

uint64_t std::pair<std::string,std::string>::~pair(uint64_t a1)
{
  if (*(char *)(a1 + 47) < 0)
    operator delete(*(void **)(a1 + 24));
  if (*(char *)(a1 + 23) < 0)
    operator delete(*(void **)a1);
  return a1;
}

void std::__tree<std::__value_type<std::string,degas::Database *>,std::__map_value_compare<std::string,std::__value_type<std::string,degas::Database *>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,degas::Database *>>>::erase(_QWORD *a1, uint64_t a2)
{
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *v5;
  BOOL v6;
  uint64_t *v7;

  v3 = *(_QWORD **)(a2 + 8);
  if (v3)
  {
    do
    {
      v4 = v3;
      v3 = (_QWORD *)*v3;
    }
    while (v3);
  }
  else
  {
    v5 = (_QWORD *)a2;
    do
    {
      v4 = (_QWORD *)v5[2];
      v6 = *v4 == (_QWORD)v5;
      v5 = v4;
    }
    while (!v6);
  }
  if (*a1 == a2)
    *a1 = v4;
  v7 = (uint64_t *)a1[1];
  --a1[2];
  std::__tree_remove[abi:ne180100]<std::__tree_node_base<void *> *>(v7, (uint64_t *)a2);
  if (*(char *)(a2 + 55) < 0)
    operator delete(*(void **)(a2 + 32));
  operator delete((void *)a2);
}

void degas::DatabaseMap::deregisterDatabase(uint64_t a1, uint64_t *a2, uint64_t *a3)
{
  os_unfair_lock_s *v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t *v10;
  uint64_t *v11;
  uint64_t *v12;
  int v13;
  uint64_t *v14;
  __int16 v15;
  uint64_t *v16;
  uint64_t v17;

  v17 = *MEMORY[0x1E0C80C00];
  v6 = (os_unfair_lock_s *)(a1 + 48);
  os_unfair_lock_lock((os_unfair_lock_t)(a1 + 48));
  v7 = std::__tree<std::__value_type<std::string,std::shared_ptr<degas::LabelIndex_Persisted>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<degas::LabelIndex_Persisted>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<degas::LabelIndex_Persisted>>>>::find<std::string>(a1, a2);
  if ((_QWORD *)(a1 + 8) == v7)
  {
    if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_FAULT))
    {
      if (*((char *)a2 + 23) >= 0)
        v12 = a2;
      else
        v12 = (uint64_t *)*a2;
      v13 = 136315138;
      v14 = v12;
      _os_log_fault_impl(&dword_1CA0A5000, MEMORY[0x1E0C81028], OS_LOG_TYPE_FAULT, "double deregister of a database at path %s", (uint8_t *)&v13, 0xCu);
    }
  }
  else
  {
    v8 = (uint64_t)v7;
    v9 = (uint64_t *)v7[7];
    if (v9 != a3 && os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_FAULT))
    {
      v13 = 134218240;
      v14 = a3;
      v15 = 2048;
      v16 = v9;
      _os_log_fault_impl(&dword_1CA0A5000, MEMORY[0x1E0C81028], OS_LOG_TYPE_FAULT, "deregister of different database instance %p != %p", (uint8_t *)&v13, 0x16u);
    }
    std::__tree<std::__value_type<std::string,degas::Database *>,std::__map_value_compare<std::string,std::__value_type<std::string,degas::Database *>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,degas::Database *>>>::erase((_QWORD *)a1, v8);
  }
  v10 = std::__tree<std::__value_type<std::string,std::shared_ptr<degas::LabelIndex_Persisted>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<degas::LabelIndex_Persisted>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<degas::LabelIndex_Persisted>>>>::find<std::string>(a1 + 24, a2);
  if ((uint64_t *)(a1 + 32) != v10)
  {
    v11 = v10;
    std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__remove_node_pointer((uint64_t **)(a1 + 24), v10);
    std::__destroy_at[abi:ne180100]<std::pair<std::string const,std::string>,0>((uint64_t)(v11 + 4));
    operator delete(v11);
  }
  os_unfair_lock_unlock(v6);
}

void *degas::nullStatementPtr(degas *this)
{
  unsigned __int8 v1;

  {
    __cxa_atexit((void (*)(void *))std::shared_ptr<degas::Statement>::~shared_ptr[abi:ne180100], &degas::nullStatementPtr(void)::nullPtr, &dword_1CA0A5000);
  }
  return &degas::nullStatementPtr(void)::nullPtr;
}

uint64_t degas::Statement::enableQueryExplain(uint64_t this)
{
  degas::sExplainQuery = this;
  if ((_DWORD)this)
    degas::sExplainQueryPlan = 0;
  return this;
}

uint64_t degas::Statement::enableQueryPlanExplain(uint64_t this)
{
  degas::sExplainQueryPlan = this;
  if ((_DWORD)this)
    degas::sExplainQuery = 0;
  return this;
}

sqlite3_stmt **degas::Statement::Statement(sqlite3_stmt **ppStmt, sqlite3 *db, uint64_t a3)
{
  int v6;
  const char *v7;
  int v8;
  int v9;
  NSObject *v10;
  const char *v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  const char *v16;
  int v17;
  int v18;
  int i;
  int v20;
  int j;
  const unsigned __int8 *v22;
  uint64_t v23;
  size_t v24;
  NSObject *v25;
  int v26;
  const char *v27;
  uint64_t v28;
  void **v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  const char *v34;
  void *__p;
  char v36;
  _QWORD v37[11];
  char v38;
  uint64_t v39;
  sqlite3_stmt *ppStmta;
  void *v41;
  int v42;
  unsigned __int8 v43;
  uint8_t buf[4];
  uint64_t v45;
  __int16 v46;
  void **v47;
  _BYTE v48[18];
  __int16 v49;
  const char *v50;
  void *v51;
  char v52;
  _QWORD v53[22];

  v53[19] = *MEMORY[0x1E0C80C00];
  *((_DWORD *)ppStmt + 5) = 0;
  *ppStmt = 0;
  ppStmt[1] = db;
  v6 = *(char *)(a3 + 23);
  if (v6 >= 0)
    v7 = (const char *)a3;
  else
    v7 = *(const char **)a3;
  if (v6 >= 0)
    v8 = *(unsigned __int8 *)(a3 + 23);
  else
    v8 = *(_DWORD *)(a3 + 8);
  v9 = sqlite3_prepare_v2(db, v7, v8, ppStmt, 0);
  if (v9)
  {
    if (degas::DegasLoggingConnection(void)::onceToken[0] != -1)
      dispatch_once(degas::DegasLoggingConnection(void)::onceToken, &__block_literal_global_5020);
    v10 = degas::DegasLoggingConnection(void)::log;
    if (os_log_type_enabled((os_log_t)degas::DegasLoggingConnection(void)::log, OS_LOG_TYPE_FAULT))
    {
      if (*(char *)(a3 + 23) >= 0)
        v34 = (const char *)a3;
      else
        v34 = *(const char **)a3;
      *(_DWORD *)v48 = 136315650;
      *(_QWORD *)&v48[4] = v34;
      *(_WORD *)&v48[12] = 1024;
      *(_DWORD *)&v48[14] = v9;
      v49 = 2080;
      v50 = sqlite3_errmsg(db);
      _os_log_fault_impl(&dword_1CA0A5000, v10, OS_LOG_TYPE_FAULT, "Failed to prepare statement for query: <%s> rc=%d err=<%s>", v48, 0x1Cu);
    }
  }
  *((_DWORD *)ppStmt + 4) = v9;
  if (degas::sExplainQueryPlan | degas::sExplainQuery)
  {
    std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v48);
    if (degas::sExplainQueryPlan)
      v11 = "explain query plan ";
    else
      v11 = "explain ";
    if (degas::sExplainQueryPlan)
      v12 = 19;
    else
      v12 = 8;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v48, (uint64_t)v11, v12);
    v13 = *(char *)(a3 + 23);
    if (v13 >= 0)
      v14 = a3;
    else
      v14 = *(_QWORD *)a3;
    if (v13 >= 0)
      v15 = *(unsigned __int8 *)(a3 + 23);
    else
      v15 = *(_QWORD *)(a3 + 8);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v48, v14, v15);
    std::stringbuf::str();
    ppStmta = 0;
    if ((v43 & 0x80u) == 0)
      v16 = (const char *)&v41;
    else
      v16 = (const char *)v41;
    if ((v43 & 0x80u) == 0)
      v17 = v43;
    else
      v17 = v42;
    sqlite3_prepare_v2(db, v16, v17, &ppStmta, 0);
    v18 = sqlite3_step(ppStmta);
    std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v37);
    for (i = v18; i == 100; i = sqlite3_step(ppStmta))
    {
      v20 = sqlite3_column_count(ppStmta);
      if (v20 >= 1)
      {
        for (j = 0; j != v20; ++j)
        {
          v22 = sqlite3_column_text(ppStmta, j);
          v23 = (uint64_t)v22;
          if (v22)
          {
            v24 = strlen((const char *)v22);
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v37, v23, v24);
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v37, (uint64_t)" ", 1);
          }
        }
      }
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v37, (uint64_t)"\n", 1);
    }
    if (v18 == 100)
    {
      if (degas::DegasLoggingConnection(void)::onceToken[0] != -1)
        dispatch_once(degas::DegasLoggingConnection(void)::onceToken, &__block_literal_global_5020);
      v25 = degas::DegasLoggingConnection(void)::log;
      if (os_log_type_enabled((os_log_t)degas::DegasLoggingConnection(void)::log, OS_LOG_TYPE_INFO))
      {
        v26 = *(char *)(a3 + 23);
        v27 = *(const char **)a3;
        std::stringbuf::str();
        v28 = v26 >= 0 ? a3 : (uint64_t)v27;
        v29 = v36 >= 0 ? &__p : (void **)__p;
        *(_DWORD *)buf = 136315394;
        v45 = v28;
        v46 = 2080;
        v47 = v29;
        _os_log_impl(&dword_1CA0A5000, v25, OS_LOG_TYPE_INFO, "query plan for: %s\n%s", buf, 0x16u);
        if (v36 < 0)
          operator delete(__p);
      }
    }
    sqlite3_finalize(ppStmta);
    v30 = *MEMORY[0x1E0DE4F60];
    v37[0] = v30;
    v31 = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 24);
    *(_QWORD *)((char *)v37 + *(_QWORD *)(v30 - 24)) = v31;
    v32 = MEMORY[0x1E0DE4FB8];
    v37[1] = MEMORY[0x1E0DE4FB8] + 16;
    if (v38 < 0)
      operator delete((void *)v37[9]);
    std::streambuf::~streambuf();
    std::ostream::~ostream();
    MEMORY[0x1CAA4AD98](&v39);
    if ((char)v43 < 0)
      operator delete(v41);
    *(_QWORD *)v48 = v30;
    *(_QWORD *)&v48[*(_QWORD *)(v30 - 24)] = v31;
    *(_QWORD *)&v48[8] = v32 + 16;
    if (v52 < 0)
      operator delete(v51);
    std::streambuf::~streambuf();
    std::ostream::~ostream();
    MEMORY[0x1CAA4AD98](v53);
  }
  return ppStmt;
}

void sub_1CA1B1900(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,void *__p,uint64_t a47,int a48,__int16 a49,char a50,char a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,char a56)
{
  std::ostringstream::~ostringstream((uint64_t)&a12);
  if (a51 < 0)
    operator delete(__p);
  std::ostringstream::~ostringstream((uint64_t)&a56);
  _Unwind_Resume(a1);
}

void degas::Statement::~Statement(degas::Statement *this)
{
  NSObject *v2;
  uint8_t v3[16];

  if (*((_DWORD *)this + 4) == 100)
  {
    if (degas::DegasLoggingConnection(void)::onceToken[0] != -1)
      dispatch_once(degas::DegasLoggingConnection(void)::onceToken, &__block_literal_global_5020);
    v2 = degas::DegasLoggingConnection(void)::log;
    if (os_log_type_enabled((os_log_t)degas::DegasLoggingConnection(void)::log, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)v3 = 0;
      _os_log_debug_impl(&dword_1CA0A5000, v2, OS_LOG_TYPE_DEBUG, "deleting statement with possible open cursor", v3, 2u);
    }
  }
  if (*(_QWORD *)this)
  {
    sqlite3_finalize(*(sqlite3_stmt **)this);
    *(_QWORD *)this = 0;
  }
}

uint64_t degas::Statement::statementIdentifier(degas::Statement *this)
{
  return *((unsigned int *)this + 5);
}

uint64_t degas::Statement::setStatementIdentifier(uint64_t this, int a2)
{
  *(_DWORD *)(this + 20) = a2;
  return this;
}

uint64_t degas::Statement::prepareForUse(degas::Statement *this)
{
  NSObject *v2;
  int v3;
  int v4;
  unsigned int v5;
  unsigned int v6;
  uint8_t v8[16];

  if (*((_DWORD *)this + 4) == 100)
  {
    if (degas::DegasLoggingConnection(void)::onceToken[0] != -1)
      dispatch_once(degas::DegasLoggingConnection(void)::onceToken, &__block_literal_global_5020);
    v2 = degas::DegasLoggingConnection(void)::log;
    if (os_log_type_enabled((os_log_t)degas::DegasLoggingConnection(void)::log, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)v8 = 0;
      _os_log_debug_impl(&dword_1CA0A5000, v2, OS_LOG_TYPE_DEBUG, "resetting statement with possible open cursor", v8, 2u);
    }
  }
  v3 = sqlite3_reset(*(sqlite3_stmt **)this);
  if (v3 == 101)
    v4 = 2;
  else
    v4 = 3;
  if (v3 == 100)
    v5 = 1;
  else
    v5 = v4;
  if (v3 == 17)
    v6 = 4;
  else
    v6 = 3;
  if (!v3)
    v6 = 0;
  if (v3 <= 99)
    return v6;
  else
    return v5;
}

uint64_t degas::Statement::bindInteger(sqlite3_stmt **this, int a2, sqlite3_int64 a3)
{
  int v4;
  int v5;
  unsigned int v6;
  unsigned int v7;

  v4 = sqlite3_bind_int64(*this, a2, a3);
  *((_DWORD *)this + 4) = v4;
  if (v4 == 101)
    v5 = 2;
  else
    v5 = 3;
  if (v4 == 100)
    v6 = 1;
  else
    v6 = v5;
  if (v4 == 17)
    v7 = 4;
  else
    v7 = 3;
  if (!v4)
    v7 = 0;
  if (v4 <= 99)
    return v7;
  else
    return v6;
}

uint64_t degas::Statement::bindDouble(sqlite3_stmt **this, int a2, double a3)
{
  int v4;
  int v5;
  unsigned int v6;
  unsigned int v7;

  v4 = sqlite3_bind_double(*this, a2, a3);
  *((_DWORD *)this + 4) = v4;
  if (v4 == 101)
    v5 = 2;
  else
    v5 = 3;
  if (v4 == 100)
    v6 = 1;
  else
    v6 = v5;
  if (v4 == 17)
    v7 = 4;
  else
    v7 = 3;
  if (!v4)
    v7 = 0;
  if (v4 <= 99)
    return v7;
  else
    return v6;
}

uint64_t degas::Statement::bindString(uint64_t a1, int a2, uint64_t *a3)
{
  sqlite3_stmt *v4;
  int v5;
  int v6;
  int v7;
  int v8;
  uint64_t result;

  v4 = *(sqlite3_stmt **)a1;
  v5 = *((char *)a3 + 23);
  v6 = *((_DWORD *)a3 + 2);
  if (v5 >= 0)
  {
    v7 = v5;
  }
  else
  {
    a3 = (uint64_t *)*a3;
    v7 = v6;
  }
  v8 = sqlite3_bind_text(v4, a2, (const char *)a3, v7, (void (__cdecl *)(void *))0xFFFFFFFFFFFFFFFFLL);
  *(_DWORD *)(a1 + 16) = v8;
  result = 3;
  if (v8 > 99)
  {
    if (v8 == 100)
    {
      return 1;
    }
    else if (v8 == 101)
    {
      return 2;
    }
  }
  else if (v8)
  {
    if (v8 == 17)
      return 4;
    else
      return 3;
  }
  else
  {
    return 0;
  }
  return result;
}

