void sub_1B6C4D2F4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  _Unwind_Resume(a1);
}

void sub_1B6C4D688(_Unwind_Exception *a1)
{
  void *v1;
  uint64_t v2;
  void *v3;

  MEMORY[0x1BCCA12A4](v2, MEMORY[0x1E0DE4E10]);

  _Unwind_Resume(a1);
}

uint64_t angleForTransform(_OWORD *a1)
{
  __int128 v1;
  unsigned int v2;
  _OWORD v4[3];

  v1 = a1[1];
  v4[0] = *a1;
  v4[1] = v1;
  v4[2] = a1[2];
  v2 = orientationForTransform((double *)v4) - 1;
  if (v2 > 6)
    return 0;
  else
    return dword_1B6FBF1C0[v2];
}

uint64_t orientationForTransform(double *a1)
{
  uint64_t v1;
  double *i;

  v1 = 0;
  for (i = (double *)&qword_1B6FBF030;
        vabdd_f64(*a1, *(i - 2)) >= 0.00999999978
     || vabdd_f64(a1[1], *(i - 1)) >= 0.00999999978
     || vabdd_f64(a1[2], *i) >= 0.00999999978
     || vabdd_f64(a1[3], i[1]) >= 0.00999999978;
        i += 6)
  {
    if (++v1 == 8)
      return 0xFFFFFFFFLL;
  }
  return orientationForTransform::kDegreeMapping[v1];
}

void sub_1B6C4D89C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  uint64_t v3;

  MEMORY[0x1BCCA12A4](v3, MEMORY[0x1E0DE4E10]);

  _Unwind_Resume(a1);
}

ma::EncodeAnalysis *ma::EncodeAnalysis::EncodeAnalysis(ma::EncodeAnalysis *this, const ma::FrameBuffer *a2, char a3, char a4, char a5)
{
  uint64_t v10;

  *((_QWORD *)this + 2) = 0;
  *(_OWORD *)this = 0u;
  ma::Translation::Translation((uint64_t)this + 24);
  *(_OWORD *)((char *)this + 72) = 0u;
  *(_OWORD *)((char *)this + 56) = 0u;
  *(_OWORD *)((char *)this + 40) = 0u;
  *((_QWORD *)this + 11) = a2;
  *((_QWORD *)this + 12) = 0;
  ma::MotionFieldAnalysis::MotionFieldAnalysis((ma::EncodeAnalysis *)((char *)this + 112));
  v10 = MEMORY[0x1E0CA2E18];
  *(_OWORD *)((char *)this + 868) = *MEMORY[0x1E0CA2E18];
  *(_QWORD *)((char *)this + 884) = *(_QWORD *)(v10 + 16);
  *((_DWORD *)this + 224) = 0;
  *(_OWORD *)((char *)this + 904) = 0u;
  *((_BYTE *)this + 920) = a4;
  *((_BYTE *)this + 921) = a3;
  *((_BYTE *)this + 922) = a5;
  *((_OWORD *)this + 48) = 0u;
  *((_OWORD *)this + 49) = 0u;
  *((_OWORD *)this + 50) = 0u;
  *((_OWORD *)this + 51) = 0u;
  *((_OWORD *)this + 52) = 0u;
  *((_OWORD *)this + 53) = 0u;
  *((_DWORD *)this + 216) = 0;
  *((_OWORD *)this + 58) = 0u;
  *((_DWORD *)this + 236) = 0;
  return this;
}

ma::MotionFieldAnalysis *ma::MotionFieldAnalysis::MotionFieldAnalysis(ma::MotionFieldAnalysis *this)
{
  *(_OWORD *)((char *)this + 28) = 0u;
  *(_OWORD *)this = 0u;
  *((_OWORD *)this + 1) = 0u;
  *((_DWORD *)this + 11) = -1;
  __asm { FMOV            V0.2S, #1.0 }
  *((_QWORD *)this + 6) = _D0;
  *((_QWORD *)this + 28) = 0;
  *((_QWORD *)this + 27) = (char *)this + 224;
  *((_QWORD *)this + 29) = 0;
  *((_DWORD *)this + 14) = 0;
  *(_DWORD *)((char *)this + 59) = 0;
  *((_QWORD *)this + 8) = 0;
  *((_QWORD *)this + 9) = 0;
  ma::ObjectDetection::ObjectDetection((ma::MotionFieldAnalysis *)((char *)this + 240));
  ma::ObjectTracking::ObjectTracking((ma::MotionFieldAnalysis *)((char *)this + 304));
  *((_QWORD *)this + 81) = 0;
  *(_OWORD *)((char *)this + 632) = 0u;
  *((_OWORD *)this + 5) = 0u;
  *((_OWORD *)this + 6) = 0u;
  *((_OWORD *)this + 7) = 0u;
  *((_OWORD *)this + 8) = 0u;
  *((_OWORD *)this + 9) = 0u;
  *((_OWORD *)this + 10) = 0u;
  *((_OWORD *)this + 11) = 0u;
  *((_OWORD *)this + 12) = 0u;
  *((_QWORD *)this + 26) = 0;
  return this;
}

void sub_1B6C4DA24(_Unwind_Exception *a1)
{
  uint64_t v1;
  ma::ObjectDetection *v2;
  _QWORD **v3;

  ma::ObjectDetection::~ObjectDetection(v2);
  std::__tree<unsigned long>::destroy(v1, *v3);
  _Unwind_Resume(a1);
}

double ma::ObjectDetection::ObjectDetection(ma::ObjectDetection *this)
{
  double result;

  *(_QWORD *)this = 0;
  result = 0.0;
  *((_OWORD *)this + 1) = 0u;
  *((_OWORD *)this + 2) = 0u;
  *(_OWORD *)((char *)this + 41) = 0u;
  return result;
}

ma::ObjectTracking *ma::ObjectTracking::ObjectTracking(ma::ObjectTracking *this)
{
  uint64_t v2;

  ma::Object::Object(this);
  ma::Object::Object((ma::Object *)(v2 + 96));
  *((_BYTE *)this + 192) = 1;
  *((_DWORD *)this + 49) = 0;
  *((_DWORD *)this + 50) = 0;
  *((_QWORD *)this + 39) = 0;
  *((_BYTE *)this + 320) = 0;
  *((_OWORD *)this + 13) = 0u;
  *((_OWORD *)this + 14) = 0u;
  *((_OWORD *)this + 15) = 0u;
  *((_OWORD *)this + 16) = 0u;
  *((_OWORD *)this + 17) = 0u;
  *((_OWORD *)this + 18) = 0u;
  *((_DWORD *)this + 76) = 0;
  return this;
}

__n128 ma::Object::Object(ma::Object *this)
{
  __n128 result;

  *(_DWORD *)this = -1;
  *(_OWORD *)((char *)this + 8) = 0u;
  *(_OWORD *)((char *)this + 24) = 0u;
  *(_OWORD *)((char *)this + 40) = 0u;
  __asm { FMOV            V0.2D, #1.0 }
  *(__n128 *)((char *)this + 56) = result;
  *((_BYTE *)this + 72) = 0;
  *(_QWORD *)((char *)this + 84) = 0;
  *(_QWORD *)((char *)this + 76) = 0;
  *((_BYTE *)this + 92) = 0;
  return result;
}

void sub_1B6C4DC30(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

uint64_t ma::MotionFieldAnalysis::Initialize(ma::MotionFieldAnalysis *this, int a2, int a3, ma::EncodeStats *a4, signed __int8 *a5, float a6, float a7, char a8, int a9)
{
  int v11;
  int v12;
  unsigned int v14;
  uint64_t result;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char v19;
  const std::nothrow_t *v20;
  char v21;
  int64_t v22;
  size_t v23;
  void *v24;
  _QWORD *v25;
  void *v26;
  size_t v27;
  size_t v28;
  size_t v29;
  void *v30;
  void *v31;
  void *v32;
  void *v33;
  BOOL v34;
  const std::nothrow_t *v38;
  void *v39;
  void *v40;
  signed __int8 *v43;
  char v44;
  int v45;
  ma::EncodeStats *v46;

  v11 = a3;
  v12 = a2;
  v14 = a3 * a2;
  if (*((_DWORD *)this + 9) * *((_DWORD *)this + 8) == a3 * a2)
  {
LABEL_2:
    result = 0;
    *((_DWORD *)this + 8) = v12;
    *((_DWORD *)this + 9) = v11;
    *(_QWORD *)this = a4;
    *((_QWORD *)this + 3) = a5;
    *((float *)this + 12) = a6;
    *((float *)this + 13) = a7;
    *((_BYTE *)this + 60) = a8;
    *((_BYTE *)this + 62) = a9;
    v16 = 32;
    if (a9)
      v16 = 48;
    v17 = 24;
    if (a9)
      v17 = 40;
    *((_QWORD *)this + 8) = *(_QWORD *)((char *)a4 + v16);
    *((_QWORD *)this + 9) = *(_QWORD *)((char *)a4 + v17);
  }
  else
  {
    v43 = a5;
    v44 = a8;
    v45 = a9;
    v46 = a4;
    ma::MotionFieldAnalysis::Destroy(this);
    v18 = 0;
    *((uint32x2_t *)this + 20) = vshl_u32((uint32x2_t)vdup_n_s32(v14), (uint32x2_t)0x300000001);
    v19 = 1;
    v20 = (const std::nothrow_t *)MEMORY[0x1E0DE4E10];
    do
    {
      v21 = v19;
      v22 = *((int *)this + v18 + 40);
      if (v22 < 0)
        v23 = -1;
      else
        v23 = 24 * (_DWORD)v22;
      v24 = operator new[](v23, v20);
      v25 = (_QWORD *)((char *)this + 8 * v18);
      v25[10] = v24;
      v26 = operator new[](v22, v20);
      v25[12] = v26;
      v25[14] = operator new[](v23, v20);
      if ((int)v22 < 0)
        v27 = -1;
      else
        v27 = 2 * v22;
      if ((int)v22 < 0)
        v28 = -1;
      else
        v28 = 4 * v22;
      if ((int)v22 < 0)
        v29 = -1;
      else
        v29 = 4 * ((int)v22 >> 1);
      v30 = operator new[](v27, v20);
      v25[16] = v30;
      v25[18] = operator new[](v28, v20);
      v31 = operator new[](v29, v20);
      v25[21] = v31;
      v32 = operator new[](v29, v20);
      v25[23] = v32;
      v33 = operator new[](v29, v20);
      v25[25] = v33;
      if (v24)
        v34 = v26 == 0;
      else
        v34 = 1;
      if (v34 || v30 == 0 || v31 == 0)
        return 4294967188;
      if (!v32 || v33 == 0)
        return 4294967188;
      v19 = 0;
      v18 = 1;
    }
    while ((v21 & 1) != 0);
    v38 = (const std::nothrow_t *)MEMORY[0x1E0DE4E10];
    v39 = operator new[](0x54uLL, MEMORY[0x1E0DE4E10]);
    *((_QWORD *)this + 1) = v39;
    v40 = operator new[](0x18uLL, v38);
    *((_QWORD *)this + 2) = v40;
    result = 4294967188;
    if (v39 && v40)
    {
      v12 = a2;
      v11 = a3;
      ma::ObjectDetection::Initialize((ma::MotionFieldAnalysis *)((char *)this + 240), 2 * a2, 2 * a3, *((float **)this + 24));
      ma::ObjectTracking::Initialize((ma::MotionFieldAnalysis *)((char *)this + 304));
      *((_DWORD *)this + 11) = -1;
      a4 = v46;
      a8 = v44;
      a9 = v45;
      a5 = v43;
      goto LABEL_2;
    }
  }
  return result;
}

uint64_t ma::MotionFieldAnalysis::Destroy(ma::MotionFieldAnalysis *this)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  char v6;
  char v7;
  char *v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  _QWORD *v22;
  uint64_t v23;
  _QWORD *v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  _QWORD *v28;
  uint64_t result;
  _QWORD *v30;
  uint64_t v31;

  v3 = (_QWORD *)((char *)this + 8);
  v2 = *((_QWORD *)this + 1);
  if (v2)
    MEMORY[0x1BCCA128C](v2, 0x1000C8052888210);
  v4 = *((_QWORD *)this + 2);
  if (v4)
    MEMORY[0x1BCCA128C](v4, 0x1000C8052888210);
  v5 = 0;
  *v3 = 0;
  v3[1] = 0;
  v6 = 1;
  do
  {
    v7 = v6;
    v8 = (char *)this + 8 * v5;
    v10 = v8 + 80;
    v9 = *((_QWORD *)v8 + 10);
    if (v9)
      MEMORY[0x1BCCA128C](v9, 0x1000C8052888210);
    v13 = *((_QWORD *)v8 + 12);
    v12 = v8 + 96;
    v11 = v13;
    if (v13)
      MEMORY[0x1BCCA128C](v11, 0x1000C8077774924);
    v14 = (char *)this + 8 * v5;
    v16 = v14 + 112;
    v15 = *((_QWORD *)v14 + 14);
    if (v15)
      MEMORY[0x1BCCA128C](v15, 0x1000C8052888210);
    v19 = *((_QWORD *)v14 + 16);
    v18 = v14 + 128;
    v17 = v19;
    if (v19)
      MEMORY[0x1BCCA128C](v17, 0x1000C80BDFB0063);
    v20 = (char *)this + 8 * v5;
    v22 = v20 + 144;
    v21 = *((_QWORD *)v20 + 18);
    if (v21)
      MEMORY[0x1BCCA128C](v21, 0x1000C8052888210);
    v25 = *((_QWORD *)v20 + 21);
    v24 = v20 + 168;
    v23 = v25;
    if (v25)
      MEMORY[0x1BCCA128C](v23, 0x1000C8052888210);
    v26 = (char *)this + 8 * v5;
    v28 = v26 + 184;
    v27 = *((_QWORD *)v26 + 23);
    if (v27)
      MEMORY[0x1BCCA128C](v27, 0x1000C8052888210);
    v31 = *((_QWORD *)v26 + 25);
    v30 = v26 + 200;
    result = v31;
    if (v31)
      result = MEMORY[0x1BCCA128C](result, 0x1000C8052888210);
    v6 = 0;
    *v10 = 0;
    *v12 = 0;
    *v16 = 0;
    *v18 = 0;
    *v22 = 0;
    *v24 = 0;
    *v28 = 0;
    v5 = 1;
    *v30 = 0;
  }
  while ((v7 & 1) != 0);
  return result;
}

uint64_t ma::ObjectDetection::Initialize(ma::ObjectDetection *this, int a2, int a3, float *a4)
{
  size_t v7;
  const std::nothrow_t *v8;
  void *v9;
  size_t v10;
  void *v11;
  size_t v12;
  void *v13;
  BOOL v14;

  *((_DWORD *)this + 12) = a2;
  *((_DWORD *)this + 13) = a3;
  *((_QWORD *)this + 2) = a4;
  if (a3 * a2 < 0)
    v7 = -1;
  else
    v7 = 4 * a3 * a2;
  v8 = (const std::nothrow_t *)MEMORY[0x1E0DE4E10];
  v9 = operator new[](v7, MEMORY[0x1E0DE4E10]);
  *((_QWORD *)this + 3) = v9;
  if (a2 < 0)
    v10 = -1;
  else
    v10 = 4 * a2;
  v11 = operator new[](v10, v8);
  *((_QWORD *)this + 4) = v11;
  if (a3 < 0)
    v12 = -1;
  else
    v12 = 4 * a3;
  v13 = operator new[](v12, v8);
  *((_QWORD *)this + 5) = v13;
  if (v13)
    v14 = v11 == 0;
  else
    v14 = 1;
  if (v14 || v9 == 0)
    return 4294967188;
  else
    return 0;
}

uint64_t ma::ObjectTracking::Initialize(ma::ObjectTracking *this)
{
  uint64_t result;

  ma::ObjectTracking::Destroy(this);
  *((_QWORD *)this + 26) = operator new[]();
  *((_QWORD *)this + 27) = operator new[]();
  *((_QWORD *)this + 28) = operator new[]();
  *((_QWORD *)this + 29) = operator new[]();
  *((_QWORD *)this + 30) = operator new[]();
  *((_QWORD *)this + 31) = operator new[]();
  *((_QWORD *)this + 32) = operator new[]();
  if (!*((_QWORD *)this + 26)
    || !*((_QWORD *)this + 27)
    || !*((_QWORD *)this + 28)
    || !*((_QWORD *)this + 29)
    || !*((_QWORD *)this + 30)
    || !*((_QWORD *)this + 31))
  {
    return 4294967188;
  }
  ma::Object::SetBox(this, 0.0, 0.0, 0.0, 0.0);
  result = 0;
  *((_BYTE *)this + 192) = 1;
  return result;
}

double ma::Object::SetBox(ma::Object *this, float a2, float a3, float a4, float a5)
{
  double result;

  *((double *)this + 1) = a2;
  *((double *)this + 2) = a3;
  result = a5;
  *((double *)this + 3) = a4;
  *((double *)this + 4) = a5;
  return result;
}

const __CFArray *ma::ObjectTracking::Destroy(ma::ObjectTracking *this)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v2 = *((_QWORD *)this + 26);
  if (v2)
    MEMORY[0x1BCCA128C](v2, 0x1000C8052888210);
  v3 = *((_QWORD *)this + 27);
  if (v3)
    MEMORY[0x1BCCA128C](v3, 0x1000C8052888210);
  v4 = *((_QWORD *)this + 28);
  if (v4)
    MEMORY[0x1BCCA128C](v4, 0x1000C8052888210);
  v5 = *((_QWORD *)this + 29);
  if (v5)
    MEMORY[0x1BCCA128C](v5, 0x1000C8052888210);
  v6 = *((_QWORD *)this + 30);
  if (v6)
    MEMORY[0x1BCCA128C](v6, 0x1000C8052888210);
  v7 = *((_QWORD *)this + 31);
  if (v7)
    MEMORY[0x1BCCA128C](v7, 0x1000C8052888210);
  v8 = *((_QWORD *)this + 32);
  if (v8)
    MEMORY[0x1BCCA128C](v8, 0x1000C8052888210);
  return ma::ObjectTracking::ClearExperts(this);
}

const __CFArray *ma::ObjectTracking::ClearExperts(ma::ObjectTracking *this)
{
  const __CFArray *result;
  const __CFArray **v3;
  uint64_t v4;

  result = (const __CFArray *)*((_QWORD *)this + 39);
  if (result)
  {
    v3 = (const __CFArray **)((char *)this + 312);
    do
    {
      result = (const __CFArray *)CFArrayGetCount(result);
      if (!(_DWORD)result)
        break;
      v4 = *(_QWORD *)Vector<ma::Object *>::Back(v3);
      if (v4)
        MEMORY[0x1BCCA12BC](v4, 0x1000C40F014A944);
      Vector<ma::Object *>::PopBack(v3);
      result = *v3;
    }
    while (*v3);
  }
  return result;
}

VTCompressionSessionRef *ma::EncodeStatsHW::CreateAsync(ma::EncodeStatsHW *this, int32_t a2, int a3, BOOL a4)
{
  int32_t v7;
  int v8;
  ma::EncodeStatsHW *v9;
  VTCompressionSessionRef *v10;
  char *v11;
  ma::EncodeStatsHW *v12;
  unsigned int (**v13)(VTCompressionSessionRef *, int32_t, int32_t, int, BOOL);

  v7 = (int)this;
  v8 = SocType();
  if ((v8 - 247) <= 1)
  {
    v9 = (ma::EncodeStatsHW *)operator new(0xF8uLL, MEMORY[0x1E0DE4E10]);
    v10 = (VTCompressionSessionRef *)v9;
    if (!v9)
      return v10;
    ma::EncodeStatsHW::EncodeStatsHW(v9);
    goto LABEL_7;
  }
  if ((v8 - 249) > 7)
    return 0;
  v12 = (ma::EncodeStatsHW *)operator new(0xF8uLL, MEMORY[0x1E0DE4E10]);
  v10 = (VTCompressionSessionRef *)v12;
  if (v12)
  {
    ma::EncodeStatsHW::EncodeStatsHW(v12);
LABEL_7:
    v13 = (unsigned int (**)(VTCompressionSessionRef *, int32_t, int32_t, int, BOOL))(v11 + 16);
    *v10 = (VTCompressionSessionRef)v13;
    *((_BYTE *)v10 + 173) = 1;
    *((_BYTE *)v10 + 240) = 1;
    if (v13[2](v10, v7, a2, a3, a4))
    {
      (*((void (**)(VTCompressionSessionRef *))*v10 + 1))(v10);
      return 0;
    }
  }
  return v10;
}

void sub_1B6C4E5B0(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1BCCA12A4](v1, MEMORY[0x1E0DE4E10]);
  _Unwind_Resume(a1);
}

ma::EncodeStatsHW *ma::EncodeStatsHW::EncodeStatsHW(ma::EncodeStatsHW *this)
{
  uint64_t v2;

  ma::EncodeStats::EncodeStats(this);
  *(_QWORD *)v2 = off_1E6B13EA0;
  *(_DWORD *)(v2 + 184) = 0;
  *(_QWORD *)(v2 + 192) = 0;
  *(_QWORD *)(v2 + 200) = 0;
  CMTimeMake((CMTime *)(v2 + 208), 0, 30);
  *((_BYTE *)this + 240) = 0;
  *((_QWORD *)this + 29) = 0;
  return this;
}

void sub_1B6C4E620(_Unwind_Exception *a1)
{
  ma::EncodeStats *v1;

  ma::EncodeStats::~EncodeStats(v1);
  _Unwind_Resume(a1);
}

uint64_t ma::EncodeStatsHW::Initialize(VTCompressionSessionRef *this, int32_t a2, int32_t a3, int a4, BOOL a5)
{
  int v9;
  int v10;
  __CFDictionary *Mutable;
  const void *v12;
  ma **v13;
  uint64_t v14;
  const void *v15;
  uint64_t v17;
  __CFData *v18;
  UInt8 *MutableBytePtr;

  if (a2 >= -15)
    v9 = a2 + 15;
  else
    v9 = a2 + 30;
  if (a3 >= -15)
    v10 = a3 + 15;
  else
    v10 = a3 + 30;
  Mutable = CFDictionaryCreateMutable(0, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  v12 = (const void *)*MEMORY[0x1E0C9AE50];
  CFDictionarySetValue(Mutable, (const void *)*MEMORY[0x1E0CEDD38], (const void *)*MEMORY[0x1E0C9AE50]);
  v13 = this + 24;
  v14 = VTCompressionSessionCreate(0, a2, a3, 0x61766331u, Mutable, 0, 0, (VTCompressionOutputCallback)ma::EncodeStatsHW::CallbackHelper, this, this + 24);
  CFRelease(Mutable);
  if ((_DWORD)v14)
    goto LABEL_17;
  v14 = ma::VTSessionSetProperty(*v13, (const __CFString *)*MEMORY[0x1E0CED248], (const __CFString *)1);
  if ((_DWORD)v14)
    goto LABEL_17;
  v14 = VTSessionSetProperty(*v13, CFSTR("iChatUsageString"), CFSTR("MediaAnalysis"));
  if ((_DWORD)v14)
    goto LABEL_17;
  v14 = ma::VTSessionSetProperty(*v13, CFSTR("EnableStatsCollect"), (const __CFString *)0x8000000);
  if ((_DWORD)v14)
    goto LABEL_17;
  v14 = VTSessionSetProperty(*v13, CFSTR("EnableUserQPForFacetime"), v12);
  if ((_DWORD)v14)
    goto LABEL_17;
  v14 = VTSessionSetProperty(*v13, CFSTR("EnableUserRefForFacetime"), v12);
  if ((_DWORD)v14)
    goto LABEL_17;
  v14 = VTSessionSetProperty(*v13, (CFStringRef)*MEMORY[0x1E0CECEC8], v12);
  if ((_DWORD)v14)
    goto LABEL_17;
  v15 = (const void *)*MEMORY[0x1E0C9AE40];
  v14 = VTSessionSetProperty(*v13, (CFStringRef)*MEMORY[0x1E0CECEB0], (CFTypeRef)*MEMORY[0x1E0C9AE40]);
  if ((_DWORD)v14)
    goto LABEL_17;
  v14 = VTSessionSetProperty(*v13, CFSTR("EnableWeightedPrediction"), v15);
  if ((_DWORD)v14)
    goto LABEL_17;
  v14 = ma::VTSessionSetProperty(*v13, (const __CFString *)*MEMORY[0x1E0CED178], (const __CFString *)0xFFFFFFECLL);
  if ((_DWORD)v14)
    goto LABEL_17;
  if (a4)
  {
    v14 = VTSessionSetProperty(*v13, (CFStringRef)*MEMORY[0x1E0CED0B8], v15);
    if ((_DWORD)v14)
      goto LABEL_17;
    v14 = VTSessionSetProperty(*v13, (CFStringRef)*MEMORY[0x1E0CED1A0], v15);
    if ((_DWORD)v14)
      goto LABEL_17;
    v14 = ma::VTSessionSetProperty(*v13, (const __CFString *)*MEMORY[0x1E0CECFE0], (const __CFString *)0xE);
    if ((_DWORD)v14)
      goto LABEL_17;
  }
  v14 = VTCompressionSessionPrepareToEncodeFrames(*v13);
  if ((_DWORD)v14)
    goto LABEL_17;
  v17 = ((v10 >> 4) * (v9 >> 4));
  v18 = CFDataCreateMutable(0, 16 * (int)v17);
  this[25] = v18;
  if (!v18)
  {
    v14 = 4294967188;
LABEL_17:
    ma::EncodeStatsHW::Destroy((ma::EncodeStatsHW *)this);
    return v14;
  }
  CFDataSetLength(v18, 16 * (int)v17);
  MutableBytePtr = CFDataGetMutableBytePtr(this[25]);
  if ((int)v17 >= 1)
  {
    do
    {
      *(_WORD *)MutableBytePtr = *(_WORD *)MutableBytePtr & 0x3FC | 0x5800;
      MutableBytePtr += 16;
      --v17;
    }
    while (v17);
  }
  v14 = ma::EncodeStats::Initialize((ma::EncodeStats *)this, a2, a3, a5, 0);
  if ((_DWORD)v14)
    goto LABEL_17;
  return v14;
}

uint64_t ma::VTSessionSetProperty(ma *this, const __CFString *a2, const __CFString *a3)
{
  CFNumberRef v5;
  uint64_t v6;
  int valuePtr;

  valuePtr = (int)a3;
  v5 = CFNumberCreate(0, kCFNumberSInt32Type, &valuePtr);
  v6 = VTSessionSetProperty(this, a2, v5);
  CFRelease(v5);
  return v6;
}

double ma::EncodeStats::EncodeStats(ma::EncodeStats *this)
{
  double result;

  *(_QWORD *)this = off_1E6B13E10;
  result = 0.0;
  *(_OWORD *)((char *)this + 8) = 0u;
  *(_OWORD *)((char *)this + 24) = 0u;
  *(_OWORD *)((char *)this + 40) = 0u;
  *(_OWORD *)((char *)this + 56) = 0u;
  *(_OWORD *)((char *)this + 72) = 0u;
  *(_OWORD *)((char *)this + 88) = 0u;
  *(_OWORD *)((char *)this + 104) = 0u;
  *(_OWORD *)((char *)this + 120) = 0u;
  *(_OWORD *)((char *)this + 136) = 0u;
  *(_OWORD *)((char *)this + 152) = 0u;
  *((_DWORD *)this + 42) = 0;
  *((_WORD *)this + 86) = 1;
  *((_BYTE *)this + 174) = 0;
  *((_QWORD *)this + 22) = 0;
  return result;
}

uint64_t ma::EncodeStats::Initialize(ma::EncodeStats *this, int a2, int a3, BOOL a4, char a5)
{
  int v6;
  int v7;
  int v8;
  int v9;
  const std::nothrow_t *v10;
  int v11;
  size_t v12;
  uint64_t v13;
  size_t v14;
  size_t v15;
  size_t v16;
  void *v17;
  void *v18;
  void *v19;
  void *v20;
  void *v21;
  void *v22;
  void *v23;
  void *v24;
  uint64_t result;
  void *v29;
  void *v30;
  void *v31;
  void *v32;
  void *v33;
  void *v34;
  void *v35;
  void *v36;
  void *v37;
  void *v38;
  void *v39;
  void *v40;

  v6 = a2 + 15;
  if (a2 < -15)
    v6 = a2 + 30;
  v7 = v6 >> 4;
  v8 = a3 + 15;
  if (a3 < -15)
    v8 = a3 + 30;
  v9 = (v8 >> 4) * v7;
  v10 = (const std::nothrow_t *)MEMORY[0x1E0DE4E10];
  v40 = operator new[](v9, MEMORY[0x1E0DE4E10]);
  *((_QWORD *)this + 1) = v40;
  v39 = operator new[](v9, v10);
  *((_QWORD *)this + 2) = v39;
  v11 = 4 * v9;
  if ((v9 & 0x20000000) != 0)
    v12 = -1;
  else
    v12 = 4 * v11;
  v13 = 2 * v11;
  if ((v9 & 0x20000000) != 0)
    v14 = -1;
  else
    v14 = v13;
  if (v9 < 0)
    v15 = -1;
  else
    v15 = 4 * v9;
  if (v9 < 0)
    v16 = -1;
  else
    v16 = 2 * v9;
  v38 = operator new[](v15, v10);
  *((_QWORD *)this + 3) = v38;
  v37 = operator new[](v12, v10);
  *((_QWORD *)this + 4) = v37;
  v36 = operator new[](v15, v10);
  *((_QWORD *)this + 5) = v36;
  v35 = operator new[](v12, v10);
  *((_QWORD *)this + 6) = v35;
  v34 = operator new[](v16, v10);
  *((_QWORD *)this + 7) = v34;
  v33 = operator new[](v16, v10);
  *((_QWORD *)this + 8) = v33;
  v32 = operator new[](v15, v10);
  *((_QWORD *)this + 9) = v32;
  v31 = operator new[](v16, v10);
  *((_QWORD *)this + 10) = v31;
  v30 = operator new[](v16, v10);
  *((_QWORD *)this + 11) = v30;
  v29 = operator new[](v14, v10);
  *((_QWORD *)this + 12) = v29;
  v17 = operator new[](v14, v10);
  *((_QWORD *)this + 13) = v17;
  v18 = operator new[](v14, v10);
  *((_QWORD *)this + 14) = v18;
  v19 = operator new[](v16, v10);
  *((_QWORD *)this + 15) = v19;
  v20 = operator new[](v16, v10);
  *((_QWORD *)this + 16) = v20;
  v21 = operator new[](v16, v10);
  *((_QWORD *)this + 17) = v21;
  v22 = operator new[](v16, v10);
  *((_QWORD *)this + 18) = v22;
  v23 = operator new[](v16, v10);
  *((_QWORD *)this + 19) = v23;
  v24 = operator new[](v16, v10);
  *((_QWORD *)this + 20) = v24;
  if (v40
    && v39
    && v38
    && v37
    && v36
    && v35
    && v34
    && v33
    && v32
    && v31
    && v30
    && v29
    && v17
    && v18
    && v19
    && v20
    && v21
    && v22
    && v23
    && v24)
  {
    result = 0;
    *((_DWORD *)this + 44) = a2;
    *((_DWORD *)this + 45) = a3;
    *((_BYTE *)this + 174) = a5;
    *((_BYTE *)this + 172) = 1;
  }
  else
  {
    ma::EncodeStats::Destroy(this);
    return 4294967188;
  }
  return result;
}

uint64_t SocType()
{
  if (SocType::once != -1)
    dispatch_once(&SocType::once, &__block_literal_global_77);
  return SocType::soc_type;
}

ma::Frame *ma::Frame::Frame(ma::Frame *this)
{
  uint64_t v2;
  __int128 v3;

  *(_DWORD *)this = -1;
  v2 = MEMORY[0x1E0CA2E18];
  v3 = *MEMORY[0x1E0CA2E18];
  *(_QWORD *)((char *)this + 20) = *(_QWORD *)(MEMORY[0x1E0CA2E18] + 16);
  *(_OWORD *)((char *)this + 4) = v3;
  *(_OWORD *)((char *)this + 28) = *(_OWORD *)v2;
  *(_QWORD *)((char *)this + 44) = *(_QWORD *)(v2 + 16);
  ma::Translation::Translation((uint64_t)this + 52);
  ma::Translation::Translation((uint64_t)this + 64);
  *(_QWORD *)((char *)this + 84) = 0;
  *(_QWORD *)((char *)this + 76) = 0;
  ma::Translation::Translation((uint64_t)this + 92);
  *((_BYTE *)this + 108) = 0;
  ma::Translation::Translation((uint64_t)this + 112);
  *((_DWORD *)this + 31) = 0;
  ma::MotionResult::MotionResult((ma::Frame *)((char *)this + 128));
  *((_QWORD *)this + 42) = 0;
  *((_QWORD *)this + 43) = 0;
  *((_DWORD *)this + 88) = 0;
  ma::Histogram::Histogram((ma::Frame *)((char *)this + 360));
  ma::MotionResult::Reset((ma::Frame *)((char *)this + 128));
  return this;
}

void sub_1B6C4EE00(_Unwind_Exception *a1)
{
  ma::MotionResult *v1;
  ma::Histogram *v2;

  ma::Histogram::~Histogram(v2);
  ma::MotionResult::~MotionResult(v1);
  _Unwind_Resume(a1);
}

const __CFArray *ma::MotionResult::ClearObjects(ma::MotionResult *this)
{
  const __CFArray *v2;
  const __CFArray **v3;
  uint64_t v4;
  const __CFArray *result;
  const __CFArray **v6;
  const __CFArray *v7;
  uint64_t v8;

  v3 = (const __CFArray **)((char *)this + 184);
  v2 = (const __CFArray *)*((_QWORD *)this + 23);
  if (v2)
  {
    do
    {
      if (!CFArrayGetCount(v2))
        break;
      v4 = *(_QWORD *)Vector<ma::Object *>::Back(v3);
      if (v4)
        MEMORY[0x1BCCA12BC](v4, 0x1000C40E841BE39);
      Vector<ma::Object *>::PopBack(v3);
      v2 = *v3;
    }
    while (*v3);
  }
  v7 = (const __CFArray *)*((_QWORD *)this + 24);
  v6 = (const __CFArray **)((char *)this + 192);
  result = v7;
  if (v7)
  {
    do
    {
      result = (const __CFArray *)CFArrayGetCount(result);
      if (!(_DWORD)result)
        break;
      v8 = *(_QWORD *)Vector<ma::Object *>::Back(v6);
      if (v8)
        MEMORY[0x1BCCA12BC](v8, 0x1000C40E841BE39);
      Vector<ma::Object *>::PopBack(v6);
      result = *v6;
    }
    while (*v6);
  }
  return result;
}

double ma::Histogram::Histogram(ma::Histogram *this)
{
  double result;

  *(_DWORD *)this = 0;
  result = 0.0;
  *(_OWORD *)((char *)this + 8) = 0u;
  *(_OWORD *)((char *)this + 24) = 0u;
  *((_QWORD *)this + 5) = 0;
  return result;
}

uint64_t ma::EncodeAnalysis::Initialize(ma::EncodeAnalysis *this, int a2, int a3)
{
  int v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  uint64_t v11;
  void *v12;
  size_t v13;
  void *v14;
  size_t v15;

  v6 = a3 * a2;
  if (*((_DWORD *)this + 1) * *(_DWORD *)this != a3 * a2)
  {
    ma::EncodeAnalysis::Destroy(this);
    v7 = operator new[](v6, MEMORY[0x1E0DE4E10]);
    if (!v7)
    {
      *((_QWORD *)this + 1) = 0;
      return 4294967188;
    }
    v8 = v7;
    bzero(v7, v6);
    *((_QWORD *)this + 1) = v8;
  }
  if (!*((_QWORD *)this + 5))
    *((_QWORD *)this + 5) = operator new[](0xA0uLL, MEMORY[0x1E0DE4E10]);
  if (!*((_QWORD *)this + 6))
    *((_QWORD *)this + 6) = operator new[](0xA0uLL, MEMORY[0x1E0DE4E10]);
  if (!*((_QWORD *)this + 7))
    *((_QWORD *)this + 7) = operator new[](0x50uLL, MEMORY[0x1E0DE4E10]);
  if (!*((_QWORD *)this + 8))
    *((_QWORD *)this + 8) = operator new[](0x50uLL, MEMORY[0x1E0DE4E10]);
  if (!*((_QWORD *)this + 9))
    *((_QWORD *)this + 9) = operator new[](0x640uLL, MEMORY[0x1E0DE4E10]);
  v9 = (void *)*((_QWORD *)this + 10);
  if (!v9)
  {
    v10 = operator new[](0x12C0uLL, MEMORY[0x1E0DE4E10]);
    v9 = v10;
    if (v10)
    {
      v11 = 400;
      do
      {
        v10 = (void *)(ma::Translation::Translation((uint64_t)v10) + 12);
        --v11;
      }
      while (v11);
    }
    *((_QWORD *)this + 10) = v9;
  }
  v12 = (void *)*((_QWORD *)this + 113);
  if (!v12)
  {
    if ((a2 & 0x2000000) != 0)
      v13 = -1;
    else
      v13 = 4 * (a2 << 6);
    v12 = operator new[](v13, MEMORY[0x1E0DE4E10]);
    *((_QWORD *)this + 113) = v12;
  }
  v14 = (void *)*((_QWORD *)this + 114);
  if (!v14)
  {
    if ((a2 & 0x2000000) != 0)
      v15 = -1;
    else
      v15 = 4 * (a2 << 6);
    v14 = operator new[](v15, MEMORY[0x1E0DE4E10]);
    *((_QWORD *)this + 114) = v14;
  }
  if (*((_QWORD *)this + 5)
    && *((_QWORD *)this + 6)
    && *((_QWORD *)this + 7)
    && *((_QWORD *)this + 8)
    && *((_QWORD *)this + 9)
    && v9
    && v12
    && v14)
  {
    *(_DWORD *)this = a2;
    *((_DWORD *)this + 1) = a3;
    return ma::MotionFieldAnalysis::Initialize((ma::EncodeAnalysis *)((char *)this + 112), a2, a3, *((ma::EncodeStats **)this + 12), *((signed __int8 **)this + 1), *((float *)this + 26), *((float *)this + 27), *((_BYTE *)this + 920), *((unsigned __int8 *)this + 922));
  }
  return 4294967188;
}

void sub_1B6C4F0F0(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1BCCA1280](v1, MEMORY[0x1E0DE4E10]);
  _Unwind_Resume(a1);
}

uint64_t ma::Translation::Translation(uint64_t this)
{
  *(_QWORD *)this = 0;
  *(_DWORD *)(this + 8) = 0;
  return this;
}

void ma::EncodeAnalysis::Destroy(ma::EncodeAnalysis *this)
{
  uint64_t v2;
  const void *v3;

  v2 = *((_QWORD *)this + 1);
  if (v2)
    MEMORY[0x1BCCA128C](v2, 0x1000C8077774924);
  v3 = (const void *)*((_QWORD *)this + 2);
  if (v3)
    CFRelease(v3);
  *((_QWORD *)this + 1) = 0;
}

ma::MotionResult *ma::MotionResult::MotionResult(ma::MotionResult *this)
{
  uint64_t v2;

  v2 = MEMORY[0x1E0CA2E68];
  *(_OWORD *)((char *)this + 148) = *MEMORY[0x1E0CA2E68];
  *(_QWORD *)((char *)this + 164) = *(_QWORD *)(v2 + 16);
  *((_QWORD *)this + 23) = 0;
  *((_DWORD *)this + 43) = 0;
  *((_DWORD *)this + 44) = 0;
  *((_WORD *)this + 40) = 0;
  *(_OWORD *)this = 0u;
  *((_OWORD *)this + 1) = 0u;
  *((_OWORD *)this + 2) = 0u;
  *((_OWORD *)this + 3) = 0u;
  *(_QWORD *)((char *)this + 61) = 0;
  *(_QWORD *)((char *)this + 92) = 0;
  *(_QWORD *)((char *)this + 84) = 0;
  *((_QWORD *)this + 24) = 0;
  *((_QWORD *)this + 25) = 0;
  ma::MotionResult::ClearObjects(this);
  return this;
}

void sub_1B6C4F1D0(_Unwind_Exception *a1)
{
  uint64_t v1;
  const __CFArray **v2;

  Vector<ma::Object *>::~Vector((const __CFArray **)(v1 + 200));
  Vector<ma::Object *>::~Vector((const __CFArray **)(v1 + 192));
  Vector<ma::Object *>::~Vector(v2);
  _Unwind_Resume(a1);
}

const __CFArray *ma::MotionResult::Reset(ma::MotionResult *this)
{
  *((_WORD *)this + 40) = 0;
  *(_OWORD *)this = 0u;
  *((_OWORD *)this + 1) = 0u;
  *((_OWORD *)this + 2) = 0u;
  *((_OWORD *)this + 3) = 0u;
  *(_QWORD *)((char *)this + 61) = 0;
  *(_QWORD *)((char *)this + 92) = 0;
  *(_QWORD *)((char *)this + 84) = 0;
  return ma::MotionResult::ClearObjects(this);
}

void sub_1B6C4F498(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_1B6C4F6EC(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

uint64_t __Block_byref_object_copy_(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void __Block_byref_object_dispose_(uint64_t a1)
{

}

uint64_t VCPProtoMovieLaughterResultReadFrom(uint64_t a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  char v14;
  uint64_t v16;
  int v17;
  VCPProtoTimeRange *v19;
  uint64_t v20;
  unint64_t v21;
  int v22;
  uint64_t result;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) < *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
  {
    v7 = (int *)MEMORY[0x1E0D82BB8];
    do
    {
      if (*(_BYTE *)(a2 + *v5))
        break;
      v8 = 0;
      v9 = 0;
      v10 = 0;
      while (1)
      {
        v11 = *v3;
        v12 = *(_QWORD *)(a2 + v11);
        v13 = v12 + 1;
        if (v12 == -1 || v13 > *(_QWORD *)(a2 + *v4))
          break;
        v14 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
        *(_QWORD *)(a2 + v11) = v13;
        v10 |= (unint64_t)(v14 & 0x7F) << v8;
        if ((v14 & 0x80) == 0)
          goto LABEL_12;
        v8 += 7;
        if (v9++ >= 9)
        {
          v10 = 0;
          v16 = *v5;
          v17 = *(unsigned __int8 *)(a2 + v16);
          goto LABEL_14;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
      v16 = *v5;
      v17 = *(unsigned __int8 *)(a2 + v16);
      if (*(_BYTE *)(a2 + v16))
        v10 = 0;
LABEL_14:
      if (v17 || (v10 & 7) == 4)
        break;
      if ((v10 >> 3) == 2)
      {
        v20 = *v3;
        v21 = *(_QWORD *)(a2 + v20);
        if (v21 <= 0xFFFFFFFFFFFFFFFBLL && v21 + 4 <= *(_QWORD *)(a2 + *v4))
        {
          v22 = *(_DWORD *)(*(_QWORD *)(a2 + *v7) + v21);
          *(_QWORD *)(a2 + v20) = v21 + 4;
        }
        else
        {
          *(_BYTE *)(a2 + v16) = 1;
          v22 = 0;
        }
        *(_DWORD *)(a1 + 8) = v22;
      }
      else if ((v10 >> 3) == 1)
      {
        v19 = objc_alloc_init(VCPProtoTimeRange);
        objc_storeStrong((id *)(a1 + 16), v19);
        if (!PBReaderPlaceMark() || !VCPProtoTimeRangeReadFrom((uint64_t)v19, a2))
        {

          return 0;
        }
        PBReaderRecallMark();

      }
      else
      {
        result = PBReaderSkipValueWithTag();
        if (!(_DWORD)result)
          return result;
      }
    }
    while (*(_QWORD *)(a2 + *v3) < *(_QWORD *)(a2 + *v4));
  }
  return *(_BYTE *)(a2 + *v5) == 0;
}

void sub_1B6C51354(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  _Unwind_Resume(a1);
}

void sub_1B6C5144C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1B6C516F0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, _Unwind_Exception *exception_object, objc_super a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, char a18)
{
  void *v18;
  void *v19;

  a10.super_class = (Class)MADHEVCAlphaSequenceWriter;
  -[_Unwind_Exception dealloc](&a10, sel_dealloc);
  _Unwind_Resume(a1);
}

void sub_1B6C51770(_Unwind_Exception *a1, int a2)
{
  if (!a2)
    _Unwind_Resume(a1);
  __clang_call_terminate(a1);
}

void sub_1B6C517F8(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);

  _Unwind_Resume(a1);
}

void sub_1B6C518B8(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);

  _Unwind_Resume(a1);
}

void sub_1B6C519C8(_Unwind_Exception *a1)
{
  uint64_t v1;

  CF<opaqueCMSampleBuffer *>::~CF((const void **)(v1 - 24));
  _Unwind_Resume(a1);
}

void sub_1B6C51CF4(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1B6C51E84(_Unwind_Exception *a1)
{
  uint64_t v1;

  CF<opaqueCMSampleBuffer *>::~CF((const void **)(v1 - 40));
  _Unwind_Resume(a1);
}

const void **CF<opaqueCMSampleBuffer *>::~CF(const void **a1)
{
  const void *v2;

  v2 = *a1;
  if (v2)
    CFRelease(v2);
  return a1;
}

void VCPImageDescriptorWrapper::VCPImageDescriptorWrapper(VCPImageDescriptorWrapper *this)
{
  *(_QWORD *)this = 0;
}

void VCPImageDescriptorWrapper::~VCPImageDescriptorWrapper(id **this)
{
  id *v1;

  v1 = *this;
  if (*this)
  {

    MEMORY[0x1BCCA12BC](v1, 0x80C40B8603338);
  }
}

uint64_t VCPImageDescriptorWrapper::Initialize(void ***this, __CVBuffer *a2)
{
  void **v4;
  uint64_t v5;
  void *v6;

  if (!*this)
  {
    v4 = (void **)operator new(8uLL, MEMORY[0x1E0DE4E10]);
    if (!v4)
    {
      *this = 0;
      return 4294967188;
    }
    *v4 = 0;
    *this = v4;
  }
  +[VCPImageDescriptor descriptorWithImage:](VCPImageDescriptor, "descriptorWithImage:", a2);
  v5 = objc_claimAutoreleasedReturnValue();
  v6 = **this;
  **this = (void *)v5;

  if (**this)
    return 0;
  else
    return 4294967188;
}

uint64_t VCPImageDescriptorWrapper::Serialize(id **this)
{
  objc_msgSend(**this, "serialize");
  return objc_claimAutoreleasedReturnValue();
}

uint64_t VCPImageDescriptorWrapper::Compare(id **this, const VCPImageDescriptorWrapper *a2, float *a3)
{
  return objc_msgSend(**this, "computeDistance:toDescriptor:", a3, **(_QWORD **)a2);
}

void sub_1B6C52390(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1B6C52894(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, void *a11, uint64_t a12, void *a13, void *a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,void *a21)
{

  _Unwind_Resume(a1);
}

void sub_1B6C52BC4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_1B6C52F4C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, void *a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *a16)
{

  _Unwind_Resume(a1);
}

void sub_1B6C531B0(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1B6C53FD8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, uint64_t a15, uint64_t a16, void *a17, void *a18, void *a19, void *a20,void *a21,void *a22,void *a23)
{
  void *v23;
  void *v24;

  _Unwind_Resume(a1);
}

void sub_1B6C542F0(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1B6C543F4(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1B6C544CC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, objc_super a9)
{
  a9.super_class = (Class)VCPSettlingEffectAnalyzer;
  -[_Unwind_Exception dealloc](&a9, sel_dealloc);
  _Unwind_Resume(a1);
}

void sub_1B6C55B78(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *a16, void *a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,const void *a47)
{
  void *v47;
  void *v48;

  CF<opaqueCMSampleBuffer *>::~CF(&a47);
  _Unwind_Resume(a1);
}

void sub_1B6C56004(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1B6C56970(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *a17)
{
  void *v17;
  void *v18;
  void *v19;
  uint64_t v20;

  CF<opaqueCMSampleBuffer *>::~CF((const void **)(v20 - 248));
  CF<opaqueCMSampleBuffer *>::~CF((const void **)(v20 - 240));
  _Unwind_Resume(a1);
}

void sub_1B6C56EB0(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  _Unwind_Resume(a1);
}

void sub_1B6C56FE4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_1B6C57328(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9)
{
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  void *v13;

  _Unwind_Resume(a1);
}

void sub_1B6C57418(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1B6C574B0(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1B6C5754C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1B6C57C10(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,_Unwind_Exception *exception_object)
{
  void *v29;
  void *v30;
  void *v31;
  void *v32;
  void *v33;

  _Unwind_Resume(a1);
}

void sub_1B6C57ED0(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1B6C57FF8(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1B6C58264(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void ma::ObjectDetection::~ObjectDetection(ma::ObjectDetection *this)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v2 = *((_QWORD *)this + 3);
  if (v2)
    MEMORY[0x1BCCA128C](v2, 0x1000C8052888210);
  v3 = *((_QWORD *)this + 4);
  if (v3)
    MEMORY[0x1BCCA128C](v3, 0x1000C8052888210);
  v4 = *((_QWORD *)this + 5);
  if (v4)
    MEMORY[0x1BCCA128C](v4, 0x1000C8052888210);
  ma::ObjectDetection::ClearObjects((const __CFArray **)this);
  Vector<ma::Object *>::~Vector((const __CFArray **)this);
}

const __CFArray *ma::ObjectDetection::ClearObjects(const __CFArray **this)
{
  const __CFArray *result;
  uint64_t v3;

  result = *this;
  if (result)
  {
    do
    {
      result = (const __CFArray *)CFArrayGetCount(result);
      if (!(_DWORD)result)
        break;
      v3 = *(_QWORD *)Vector<ma::Object *>::Back(this);
      if (v3)
        MEMORY[0x1BCCA12BC](v3, 0x1000C40E841BE39);
      Vector<ma::Object *>::PopBack(this);
      result = *this;
    }
    while (*this);
  }
  return result;
}

uint64_t ma::ObjectDetection::Detect(ma::ObjectDetection *this, ma::MotionResult *a2, MotionVector *a3)
{
  __n128 v6;
  uint64_t result;
  int v8;

  v8 = 0;
  ma::ObjectDetection::ClearObjects((const __CFArray **)this);
  bzero(*((void **)this + 3), 4 * *((int *)this + 12) * (uint64_t)*((int *)this + 13));
  result = ma::ObjectDetection::LabelConnectedComponent(this, &v8, a3, v6);
  if (!(_DWORD)result)
  {
    ma::ObjectDetection::PickDominantObjects(this, v8);
    result = ma::ObjectDetection::BoundingboxObjects(this, a2);
    if (!(_DWORD)result)
    {
      result = ma::ObjectDetection::PickOneInterestedObject((CFArrayRef *)this);
      if (!(_DWORD)result)
        return ma::ObjectDetection::StorePickedObjects((CFArrayRef *)this, a2);
    }
  }
  return result;
}

uint64_t ma::ObjectDetection::LabelConnectedComponent(ma::ObjectDetection *this, int *a2, MotionVector *a3, __n128 a4)
{
  int v4;
  ma::ObjectDetection *v5;
  int v6;
  uint64_t v7;
  uint64_t v13;
  uint64_t v14;
  float v15;
  uint64_t v16;
  unsigned __int16 *v17;
  __n128 v18;
  float v19;
  float v20;
  const __CFArray *v21;
  double *v22;
  double v23;
  double v24;
  uint64_t v25;
  uint64_t v26;
  int v27;
  int v28;
  uint64_t v29;
  uint64_t v30;
  int v31;
  uint64_t v32;
  int v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  char *v37;
  uint64_t v38;
  int v39;
  uint64_t v40;
  ma::ObjectDetection *v41;
  uint64_t v42;
  int v43;
  float v44;
  char *v45;
  int32x2_t v46;
  __n128 v47;
  int v48;
  int v49;
  BOOL v50;
  int v51;
  int v52;
  ma::Object *v53;
  uint64_t v54;
  int v55;
  int v56;
  int v57;
  double v58;
  int v59;
  int v60;
  int v61;
  double v62;
  int v63;
  double v64;
  float v65;
  uint64_t v66;
  uint64_t v69;
  uint64_t v70;
  uint64_t v72;
  char *v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  int v78;
  int v79;
  int v80;
  int v81;
  __n128 v82;
  __n128 v83;
  int v84;
  __int128 v85;
  __int128 v86;
  const __CFArray *v87[2];
  CGPoint v88;

  v87[0] = 0;
  v4 = *((_DWORD *)this + 13);
  if (v4 < 1)
  {
    v84 = 0;
LABEL_64:
    *a2 = v84;
    while (v87[0] && CFArrayGetCount(v87[0]))
      Vector<CGPoint>::PopBack(v87);
    v66 = 0;
    goto LABEL_73;
  }
  v5 = this;
  v80 = 0;
  v84 = 0;
  v6 = *((_DWORD *)this + 12);
  v69 = v6;
  v70 = 0;
  v75 = *((_QWORD *)this + 2);
  v7 = 4 * v6;
  v74 = *((_QWORD *)this + 3) - 4;
  v72 = *((_QWORD *)this + 3);
  v73 = (char *)a3 - 4;
  __asm { FMOV            V10.2S, #0.25 }
  v77 = v7;
  while (v6 < 1)
  {
LABEL_61:
    if (++v70 >= v4)
      goto LABEL_64;
  }
  v13 = 0;
  a4.n128_f64[0] = (double)(int)v70;
  a4.n128_f32[0] = (float)(int)v70;
  while (1)
  {
    v76 = v13;
    v14 = v13 + v70 * v69;
    v15 = *(float *)(v75 + 4 * v14);
    if (v15 >= 0.3 && !*(_DWORD *)(v72 + 4 * v14))
      break;
    v16 = v76;
LABEL_8:
    v13 = v16 + 1;
    if (v13 >= v6)
    {
      v4 = *((_DWORD *)v5 + 13);
      goto LABEL_61;
    }
  }
  v17 = (unsigned __int16 *)((char *)a3 + 4 * v14);
  a4.n128_u16[0] = *v17;
  a4.n128_u16[2] = v17[1];
  v82 = a4;
  *(double *)&v86 = (double)(int)v76;
  *((double *)&v86 + 1) = (double)(int)v70;
  Vector<CGPoint>::PushBack(v87, &v86);
  v18.n128_u64[1] = v82.n128_u64[1];
  v18.n128_u64[0] = (unint64_t)vmul_f32(vcvt_f32_u32((uint32x2_t)vand_s8((int8x8_t)vabs_s32(vshr_n_s32(vshl_n_s32((int32x2_t)v82.n128_u64[0], 0x10uLL), 0x10uLL)), (int8x8_t)0xFFFF0000FFFFLL)), _D10);
  v83 = v18;
  v19 = v15 * (float)(int)v70;
  v20 = v15 * (float)(int)v76;
  ++v84;
  *(_DWORD *)(v72 + 4 * v14) = ++v80;
  v21 = v87[0];
  if (v87[0])
  {
    v81 = 1;
    do
    {
      if (!CFArrayGetCount(v21))
        break;
      v22 = (double *)Vector<ma::Object *>::Back(v87);
      v23 = *v22;
      v24 = v22[1];
      Vector<CGPoint>::PopBack(v87);
      v25 = (int)v24;
      if ((int)v25 <= 1)
        v26 = 1;
      else
        v26 = v25;
      v27 = *((_DWORD *)v5 + 13);
      v79 = v25 + 1;
      if (v27 >= (int)v25 + 1)
        v28 = v25 + 1;
      else
        v28 = *((_DWORD *)v5 + 13);
      if ((int)v26 - 1 <= v28)
      {
        v29 = (int)v23;
        if ((int)v29 <= 1)
          v30 = 1;
        else
          v30 = v29;
        v78 = v30 - 1;
        v31 = v29 + 1;
        v32 = v26 - 1;
        v33 = *((_DWORD *)v5 + 12);
        v34 = v7 * v32 + 4 * v30;
        v35 = v75 - 4 + v34;
        v36 = v74 + v34;
        v37 = &v73[v34];
        v38 = ~v29 + v30;
        do
        {
          if (v33 >= v31)
            v39 = v31;
          else
            v39 = v33;
          if (v78 <= v39)
          {
            v40 = 0;
            do
            {
              if ((v32 != v25 || v38 + v40) && *(float *)(v35 + 4 * v40) > 0.3 && !*(_DWORD *)(v36 + 4 * v40))
              {
                v41 = v5;
                v42 = v30;
                v43 = v30 + v40 - 1;
                *(double *)&v85 = (double)v43;
                *((double *)&v85 + 1) = (double)(int)v32;
                Vector<CGPoint>::PushBack(v87, &v85);
                *(_DWORD *)(v36 + 4 * v40) = v80;
                ++v81;
                ++v84;
                v44 = *(float *)(v35 + 4 * v40);
                v20 = v20 + (float)((float)v43 * v44);
                v19 = v19 + (float)((float)(int)v32 * v44);
                v15 = v15 + v44;
                v45 = &v37[4 * v40];
                v46.i32[0] = *(__int16 *)v45;
                v46.i32[1] = *((__int16 *)v45 + 1);
                v47.n128_u64[1] = v83.n128_u64[1];
                v47.n128_u64[0] = (unint64_t)vadd_f32((float32x2_t)v83.n128_u64[0], vmul_f32(vcvt_f32_u32((uint32x2_t)vand_s8((int8x8_t)vabs_s32(v46), (int8x8_t)0xFFFF0000FFFFLL)), _D10));
                v83 = v47;
                v5 = v41;
                v33 = *((_DWORD *)v41 + 12);
                v25 = (int)v24;
                v30 = v42;
              }
              if (v33 >= v31)
                v48 = v31;
              else
                v48 = v33;
              ++v40;
            }
            while (v30 + v40 - 2 < v48);
            v27 = *((_DWORD *)v5 + 13);
            v7 = v77;
          }
          v49 = v79;
          if (v27 < v79)
            v49 = v27;
          v50 = v32++ < v49;
          v35 += v7;
          v36 += v7;
          v37 += v7;
        }
        while (v50);
      }
      v21 = v87[0];
    }
    while (v87[0]);
  }
  else
  {
    v81 = 1;
  }
  if (v15 == 0.0)
  {
    v66 = 4294967246;
    goto LABEL_73;
  }
  v51 = *((_DWORD *)v5 + 12);
  v52 = *((_DWORD *)v5 + 13);
  *(_QWORD *)&v85 = 0;
  v53 = (ma::Object *)operator new(0x60uLL, MEMORY[0x1E0DE4E10]);
  if (!v53)
  {
    v66 = 4294967188;
    goto LABEL_73;
  }
  v54 = (uint64_t)v53;
  v55 = (int)((float)(v19 / v15) + 0.5);
  if (v55 >= v52)
    v56 = v52;
  else
    v56 = (int)((float)(v19 / v15) + 0.5);
  if (v55 <= 0)
    v57 = 0;
  else
    v57 = v56;
  v58 = (double)v57;
  v59 = (int)((float)(v20 / v15) + 0.5);
  if (v59 >= v51)
    v60 = v51;
  else
    v60 = (int)((float)(v20 / v15) + 0.5);
  if (v59 <= 0)
    v61 = 0;
  else
    v61 = v60;
  v62 = (double)v61;
  v88.x = (double)v51;
  v88.y = (double)v52;
  ma::Object::Object(v53, v80, (float)v81, *(CGPoint *)(&v58 - 1), v88);
  v63 = *((_DWORD *)v5 + 13);
  v64 = v83.n128_f32[0] / ((float)(v15 * (float)*((int *)v5 + 12)) * 8.0);
  *(_QWORD *)&v85 = v54;
  *(float *)&v64 = v64;
  v65 = v83.n128_f32[1] / ((float)(v15 * (float)v63) * 8.0);
  ma::Object::SetMotion(v54, *(float *)&v64, v65);
  v16 = v76;
  v7 = v77;
  v66 = Vector<ma::Object *>::PushBack((CFMutableArrayRef *)v5, &v85);
  if (!(_DWORD)v66)
  {
    v6 = *((_DWORD *)v5 + 12);
    goto LABEL_8;
  }
  if ((_QWORD)v85)
    MEMORY[0x1BCCA12BC](v85, 0x1000C40E841BE39);
LABEL_73:
  Vector<CGPoint>::~Vector(v87);
  return v66;
}

void sub_1B6C58B04(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  MEMORY[0x1BCCA12A4](v1, MEMORY[0x1E0DE4E10]);
  Vector<CGPoint>::~Vector((const __CFArray **)(v2 - 160));
  _Unwind_Resume(a1);
}

uint64_t ma::ObjectDetection::PickDominantObjects(ma::ObjectDetection *this, int a2)
{
  int v3;
  int v4;
  int v5;
  float v6;
  const __CFArray *v7;
  CFIndex v8;
  int v9;
  const __CFArray *v10;
  float v11;

  v3 = 0;
  v4 = 0;
  v5 = (int)(float)((float)a2 * 0.8);
  v6 = (float)(int)(float)((float)(*((_DWORD *)this + 12) * *((_DWORD *)this + 13)) * 0.005);
  do
  {
    v7 = *(const __CFArray **)this;
    if (*(_QWORD *)this)
      LODWORD(v7) = CFArrayGetCount(v7);
    if (v4 >= (int)v7)
      break;
    v8 = 0;
    v9 = 0;
    while (1)
    {
      v10 = *(const __CFArray **)this;
      if (*(_QWORD *)this)
        LODWORD(v10) = CFArrayGetCount(v10);
      if (v8 >= (int)v10)
        break;
      if (!*(_BYTE *)(*(_QWORD *)CFArrayGetValueAtIndex(*(CFArrayRef *)this, v8) + 72))
      {
        v11 = *(float *)(*(_QWORD *)CFArrayGetValueAtIndex(*(CFArrayRef *)this, v8) + 76);
        if (v11 > *(float *)(*(_QWORD *)CFArrayGetValueAtIndex(*(CFArrayRef *)this, v9) + 76))
          v9 = v8;
      }
      ++v8;
    }
    if (!*(_BYTE *)(*(_QWORD *)CFArrayGetValueAtIndex(*(CFArrayRef *)this, v9) + 72)
      && *(float *)(*(_QWORD *)CFArrayGetValueAtIndex(*(CFArrayRef *)this, v9) + 76) >= v6)
    {
      *(_BYTE *)(*(_QWORD *)CFArrayGetValueAtIndex(*(CFArrayRef *)this, v9) + 72) = 1;
      v3 = (int)(float)(*(float *)(*(_QWORD *)CFArrayGetValueAtIndex(*(CFArrayRef *)this, v9) + 76) + (float)v3);
    }
    ++v4;
  }
  while (v3 <= v5);
  return 0;
}

uint64_t ma::ObjectDetection::BoundingboxObjects(ma::ObjectDetection *this, ma::MotionResult *a2)
{
  CFIndex v3;
  int *v4;
  CFMutableArrayRef *v5;
  const std::nothrow_t *v6;
  const __CFArray *v7;
  int v8;
  const void *ValueAtIndex;
  ma::Object *v10;
  ma::Object *v11;
  ma::Object **v12;
  uint64_t v13;
  uint64_t v14;
  ma::Object *v16;

  v3 = 0;
  v4 = (int *)*((_QWORD *)this + 3);
  v5 = (CFMutableArrayRef *)((char *)a2 + 192);
  v6 = (const std::nothrow_t *)MEMORY[0x1E0DE4E10];
  while (1)
  {
    v7 = *(const __CFArray **)this;
    if (*(_QWORD *)this)
      LODWORD(v7) = CFArrayGetCount(v7);
    if (v3 >= (int)v7)
      return 0;
    if (*(_BYTE *)(*(_QWORD *)CFArrayGetValueAtIndex(*(CFArrayRef *)this, v3) + 72))
    {
      v8 = **(_DWORD **)CFArrayGetValueAtIndex(*(CFArrayRef *)this, v3);
      ValueAtIndex = CFArrayGetValueAtIndex(*(CFArrayRef *)this, v3);
      ma::ObjectDetection::GenerateBoundingBox((void **)this, v8, v4, (CGRect *)(*(_QWORD *)ValueAtIndex + 8));
      v16 = 0;
      v10 = (ma::Object *)operator new(0x60uLL, v6);
      if (!v10)
        return 4294967188;
      v11 = v10;
      v12 = (ma::Object **)CFArrayGetValueAtIndex(*(CFArrayRef *)this, v3);
      ma::Object::Object(v11, *v12);
      v16 = v11;
      v13 = Vector<ma::Object *>::PushBack(v5, &v16);
      if ((_DWORD)v13)
        break;
    }
    ++v3;
  }
  v14 = v13;
  if (v16)
    MEMORY[0x1BCCA12BC](v16, 0x1000C40E841BE39);
  return v14;
}

void sub_1B6C58DEC(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1BCCA12A4](v1, MEMORY[0x1E0DE4E10]);
  _Unwind_Resume(a1);
}

uint64_t ma::ObjectDetection::PickOneInterestedObject(CFArrayRef *this)
{
  const __CFArray *v2;
  uint64_t v3;
  size_t v4;
  char *v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  CFIndex v9;
  int v10;
  const __CFArray *v11;
  ma::Object **ValueAtIndex;
  uint64_t v13;
  char *v14;
  _OWORD **v15;
  _OWORD *v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  uint64_t v21;
  ma::Object *v22;
  int v23;
  uint64_t v24;
  CFIndex i;
  const __CFArray *v26;

  v2 = *this;
  if (v2)
    LODWORD(v2) = CFArrayGetCount(v2);
  v3 = (int)v2;
  if (is_mul_ok((int)v2, 0x60uLL))
    v4 = 96 * (int)v2;
  else
    v4 = -1;
  v5 = (char *)operator new[](v4, MEMORY[0x1E0DE4E10]);
  if (!v5)
    return 4294967188;
  v6 = v5;
  if ((_DWORD)v3)
  {
    v7 = 0;
    v8 = 96 * v3;
    do
    {
      ma::Object::Object((ma::Object *)&v6[v7]);
      v7 += 96;
    }
    while (v8 != v7);
  }
  v9 = 0;
  v10 = 0;
  while (1)
  {
    v11 = *this;
    if (*this)
      LODWORD(v11) = CFArrayGetCount(v11);
    if (v9 >= (int)v11)
      break;
    if (*(_BYTE *)(*(_QWORD *)CFArrayGetValueAtIndex(*this, v9) + 72))
    {
      ValueAtIndex = (ma::Object **)CFArrayGetValueAtIndex(*this, v9);
      v13 = ma::Object::CalculateAttentionScore(*ValueAtIndex);
      if ((_DWORD)v13)
      {
        v24 = v13;
        goto LABEL_35;
      }
      v14 = &v6[96 * v10];
      v15 = (_OWORD **)CFArrayGetValueAtIndex(*this, v9);
      v16 = *v15;
      v17 = (*v15)[1];
      *(_OWORD *)v14 = **v15;
      *((_OWORD *)v14 + 1) = v17;
      v18 = v16[2];
      v19 = v16[3];
      v20 = v16[5];
      *((_OWORD *)v14 + 4) = v16[4];
      *((_OWORD *)v14 + 5) = v20;
      *((_OWORD *)v14 + 2) = v18;
      *((_OWORD *)v14 + 3) = v19;
      ++v10;
    }
    ++v9;
  }
  qsort(v6, v10, 0x60uLL, (int (__cdecl *)(const void *, const void *))ma::ObjectDetection::CompareAttentionScoreDescending);
  if (v10 < 1)
  {
LABEL_22:
    v23 = -1;
  }
  else
  {
    v21 = v10;
    v22 = (ma::Object *)v6;
    while (1)
    {
      ma::Object::ScaleBox(v22, (float)*((int *)this + 12), (float)*((int *)this + 13));
      if (ma::ObjectDetection::MotionVariationInRegion((ma::ObjectDetection *)this, v22) < 10.0)
        break;
      v22 = (ma::Object *)((char *)v22 + 96);
      if (!--v21)
        goto LABEL_22;
    }
    v23 = *(_DWORD *)v22;
  }
  for (i = 0; ; ++i)
  {
    v26 = *this;
    if (*this)
      LODWORD(v26) = CFArrayGetCount(v26);
    if (i >= (int)v26)
      break;
    if (*(_BYTE *)(*(_QWORD *)CFArrayGetValueAtIndex(*this, i) + 72)
      && **(_DWORD **)CFArrayGetValueAtIndex(*this, i) != v23)
    {
      *(_BYTE *)(*(_QWORD *)CFArrayGetValueAtIndex(*this, i) + 72) = 0;
    }
  }
  v24 = 0;
LABEL_35:
  MEMORY[0x1BCCA128C](v6, 0x1000C80E841BE39);
  return v24;
}

void sub_1B6C5902C(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1BCCA1280](v1, MEMORY[0x1E0DE4E10]);
  _Unwind_Resume(a1);
}

uint64_t ma::ObjectDetection::StorePickedObjects(CFArrayRef *this, ma::MotionResult *a2)
{
  CFIndex v3;
  CFMutableArrayRef *v4;
  const std::nothrow_t *v5;
  const __CFArray *v6;
  ma::Object *v7;
  ma::Object *v8;
  ma::Object **ValueAtIndex;
  uint64_t v10;
  uint64_t v11;
  ma::Object *v13;

  v3 = 0;
  v4 = (CFMutableArrayRef *)((char *)a2 + 184);
  v5 = (const std::nothrow_t *)MEMORY[0x1E0DE4E10];
  while (1)
  {
    v6 = *this;
    if (*this)
      LODWORD(v6) = CFArrayGetCount(v6);
    if (v3 >= (int)v6)
      return 0;
    if (*(_BYTE *)(*(_QWORD *)CFArrayGetValueAtIndex(*this, v3) + 72))
    {
      v13 = 0;
      v7 = (ma::Object *)operator new(0x60uLL, v5);
      if (!v7)
        return 4294967188;
      v8 = v7;
      ValueAtIndex = (ma::Object **)CFArrayGetValueAtIndex(*this, v3);
      ma::Object::Object(v8, *ValueAtIndex);
      v13 = v8;
      v10 = Vector<ma::Object *>::PushBack(v4, &v13);
      if ((_DWORD)v10)
        break;
    }
    ++v3;
  }
  v11 = v10;
  if (v13)
    MEMORY[0x1BCCA12BC](v13, 0x1000C40E841BE39);
  return v11;
}

void sub_1B6C59138(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1BCCA12A4](v1, MEMORY[0x1E0DE4E10]);
  _Unwind_Resume(a1);
}

uint64_t Vector<ma::Object *>::PushBack(CFMutableArrayRef *a1, _QWORD *a2)
{
  CFMutableArrayRef Mutable;
  _QWORD *v5;

  if (!*a1)
  {
    Mutable = CFArrayCreateMutable(0, 0, 0);
    *a1 = Mutable;
    if (!Mutable)
      return 4294967188;
  }
  v5 = (_QWORD *)operator new();
  *v5 = *a2;
  CFArrayAppendValue(*a1, v5);
  return 0;
}

uint64_t ma::ObjectDetection::SetMvField(uint64_t this, MotionVector *a2)
{
  *(_QWORD *)(this + 8) = a2;
  return this;
}

const void *Vector<ma::Object *>::Back(const __CFArray **a1)
{
  const __CFArray *v2;
  CFIndex v3;

  v2 = *a1;
  if (v2)
  {
    v3 = (int)(CFArrayGetCount(v2) - 1);
    v2 = *a1;
  }
  else
  {
    v3 = -1;
  }
  return CFArrayGetValueAtIndex(v2, v3);
}

void Vector<ma::Object *>::PopBack(CFMutableArrayRef *a1)
{
  const __CFArray *v2;
  CFIndex v3;
  const void *ValueAtIndex;

  v2 = *a1;
  if (v2)
  {
    v3 = (int)(CFArrayGetCount(v2) - 1);
    v2 = *a1;
  }
  else
  {
    v3 = -1;
  }
  ValueAtIndex = CFArrayGetValueAtIndex(v2, v3);
  if (ValueAtIndex)
    MEMORY[0x1BCCA12BC](ValueAtIndex, 0x20C4093837F09);
  CFArrayRemoveValueAtIndex(*a1, v3);
}

uint64_t Vector<CGPoint>::PushBack(CFMutableArrayRef *a1, _OWORD *a2)
{
  CFMutableArrayRef Mutable;
  _OWORD *v5;

  if (!*a1)
  {
    Mutable = CFArrayCreateMutable(0, 0, 0);
    *a1 = Mutable;
    if (!Mutable)
      return 4294967188;
  }
  v5 = (_OWORD *)operator new();
  *v5 = *a2;
  CFArrayAppendValue(*a1, v5);
  return 0;
}

void Vector<CGPoint>::PopBack(CFMutableArrayRef *a1)
{
  const __CFArray *v2;
  CFIndex v3;
  const void *ValueAtIndex;

  v2 = *a1;
  if (v2)
  {
    v3 = (int)(CFArrayGetCount(v2) - 1);
    v2 = *a1;
  }
  else
  {
    v3 = -1;
  }
  ValueAtIndex = CFArrayGetValueAtIndex(v2, v3);
  if (ValueAtIndex)
    MEMORY[0x1BCCA12BC](ValueAtIndex, 0x1000C40451B5BE8);
  CFArrayRemoveValueAtIndex(*a1, v3);
}

uint64_t ma::ObjectDetection::CompareAttentionScoreDescending(ma::ObjectDetection *this, float *a2, const void *a3)
{
  float v3;
  unsigned int v4;

  v3 = a2[20] - *((float *)this + 20);
  if (v3 == 0.0)
    v4 = 0;
  else
    v4 = -1;
  if (v3 > 0.0)
    return 1;
  else
    return v4;
}

float ma::ObjectDetection::MotionVariationInRegion(ma::ObjectDetection *this, ma::Object *a2)
{
  int v2;
  float v3;
  int v4;
  int v5;
  int v6;
  float v7;
  double v8;
  int v9;
  float v10;
  int v11;
  uint64_t v12;
  float v13;
  float v14;
  int v15;
  int v16;
  int v17;
  int v18;
  int v19;
  int v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  float32x2_t v24;
  float32x2_t v30;
  float32x2_t v31;
  uint64_t v32;
  __int16 *v33;
  int64x2_t v34;
  float32x2_t v35;
  int32x2_t v36;
  char v37;
  int8x8_t v38;
  int8x8_t v39;
  unsigned int v40;
  int8x8_t v41;
  float32x2_t v42;
  float32x2_t v43;
  int v44;
  float v45;

  v2 = *((_DWORD *)this + 13);
  v3 = *((double *)a2 + 2);
  v4 = (int)(v3 + 0.5);
  if (v4 >= v2)
    v5 = *((_DWORD *)this + 13);
  else
    v5 = (int)(v3 + 0.5);
  if (v4 <= 0)
    v6 = 0;
  else
    v6 = v5;
  v7 = *((double *)a2 + 4);
  v8 = (float)(v3 + v7) + 0.5;
  if ((int)v8 < v2)
    v2 = (int)v8;
  if ((int)v8 <= 0)
    v9 = 0;
  else
    v9 = v2;
  v10 = 1.0e10;
  if (v6 < v9)
  {
    v11 = 0;
    v12 = *((int *)this + 12);
    v13 = *((double *)a2 + 1);
    v14 = *((double *)a2 + 3);
    v15 = (int)((float)(v13 + v14) + 0.5);
    if (v15 >= (int)v12)
      v16 = *((_DWORD *)this + 12);
    else
      v16 = (int)((float)(v13 + v14) + 0.5);
    if (v15 <= 0)
      v17 = 0;
    else
      v17 = v16;
    v18 = (int)(v13 + 0.5);
    if (v18 >= (int)v12)
      v19 = *((_DWORD *)this + 12);
    else
      v19 = (int)(v13 + 0.5);
    if (v18 <= 0)
      v20 = 0;
    else
      v20 = v19;
    v21 = v6;
    v22 = *((_QWORD *)this + 1) + 4 * (v20 + (int)v12 * (uint64_t)v6);
    v23 = 4 * v12;
    v24 = 0;
    __asm { FMOV            V3.2D, #0.25 }
    v30 = (float32x2_t)vdup_n_s32(0x42700000u);
    v31 = 0;
    do
    {
      v32 = v17 - (uint64_t)v20;
      v33 = (__int16 *)v22;
      if (v20 < v17)
      {
        do
        {
          v34.i64[0] = *v33;
          v34.i64[1] = v33[1];
          v35 = vcvt_f32_f64(vmulq_f64(vcvtq_f64_s64(v34), _Q3));
          v36 = vcgt_f32(v30, vabs_f32(v35));
          v37 = v36.i8[0] & v36.i8[4];
          v38 = (int8x8_t)vadd_f32(v24, v35);
          v39 = (int8x8_t)vmla_f32(v31, v35, v35);
          if ((v37 & 1) != 0)
          {
            ++v11;
            v40 = -1;
          }
          else
          {
            v40 = 0;
          }
          v41 = (int8x8_t)vdup_n_s32(v40);
          v24 = (float32x2_t)vbsl_s8(v41, v38, (int8x8_t)v24);
          v31 = (float32x2_t)vbsl_s8(v41, v39, (int8x8_t)v31);
          v33 += 2;
          --v32;
        }
        while (v32);
      }
      ++v21;
      v22 += v23;
    }
    while (v21 != v9);
    if (v11)
    {
      *(float *)&v8 = (float)v11;
      v42 = (float32x2_t)vdup_lane_s32(*(int32x2_t *)&v8, 0);
      v43 = vdiv_f32(v24, v42);
      v10 = vaddv_f32(vmaxnm_f32(vmls_f32(vdiv_f32(v31, v42), v43, v43), (float32x2_t)vdup_n_s32(0x3727C5ACu)));
    }
  }
  v44 = *((unsigned __int8 *)this + 56);
  v45 = log2f(v10);
  if (v44)
    printf("variation = %6.2f\n", v45);
  return v45;
}

CGFloat ma::ObjectDetection::GenerateBoundingBox(void **this, int a2, int *a3, CGRect *a4)
{
  int v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t i;
  _DWORD *v13;
  uint64_t v14;
  int v15;
  int v16;
  float v17;
  float v18;
  float v19;
  float v20;
  float v21;
  float v22;
  uint64_t v23;
  int v24;
  int v25;
  float v26;
  float v27;
  float v28;
  float v29;
  CGFloat result;

  bzero(this[4], 4 * *((int *)this + 12));
  bzero(this[5], 4 * *((int *)this + 13));
  v9 = *((_DWORD *)this + 12);
  v8 = *((_DWORD *)this + 13);
  if (v8 >= 1)
  {
    v10 = 0;
    v11 = 4 * v9;
    do
    {
      if (v9 >= 1)
      {
        for (i = 0; i < v9; ++i)
        {
          if (a3[i] == a2)
          {
            v13 = this[5];
            ++*((_DWORD *)this[4] + i);
            ++v13[v10];
            v9 = *((_DWORD *)this + 12);
          }
        }
        v8 = *((_DWORD *)this + 13);
      }
      ++v10;
      a3 = (int *)((char *)a3 + v11);
    }
    while (v10 < v8);
  }
  if (v9 < 1)
  {
    v15 = 0;
    v16 = v9;
  }
  else
  {
    v14 = 0;
    v15 = 0;
    v16 = v9;
    do
    {
      if (v14 > v15 && *((_DWORD *)this[4] + v14))
        v15 = v14;
      if (v14 < v16 && *((_DWORD *)this[4] + v14))
        v16 = v14;
      ++v14;
    }
    while (v9 != v14);
  }
  v17 = (float)v16 / (float)v9;
  v18 = 1.0;
  if (v17 < 1.0)
    v19 = (float)v16 / (float)v9;
  else
    v19 = 1.0;
  if (v17 <= 0.0)
    v19 = 0.0;
  a4->origin.x = v19;
  v20 = (float)(v15 - v16 + 1) / (float)v9;
  if (v20 < 1.0)
    v21 = (float)(v15 - v16 + 1) / (float)v9;
  else
    v21 = 1.0;
  if (v20 <= 0.0)
    v22 = 0.0;
  else
    v22 = v21;
  a4->size.width = v22;
  if (v8 < 1)
  {
    v24 = 0;
    v25 = v8;
  }
  else
  {
    v23 = 0;
    v24 = 0;
    v25 = v8;
    do
    {
      if (v23 > v24 && *((_DWORD *)this[5] + v23))
        v24 = v23;
      if (v23 < v25 && *((_DWORD *)this[5] + v23))
        v25 = v23;
      ++v23;
    }
    while (v8 != v23);
  }
  v26 = (float)v25 / (float)v8;
  if (v26 < 1.0)
    v27 = (float)v25 / (float)v8;
  else
    v27 = 1.0;
  if (v26 <= 0.0)
    v28 = 0.0;
  else
    v28 = v27;
  a4->origin.y = v28;
  v29 = (float)(v24 - v25 + 1) / (float)v8;
  if (v29 < 1.0)
    v18 = (float)(v24 - v25 + 1) / (float)v8;
  if (v29 <= 0.0)
    v18 = 0.0;
  result = v18;
  a4->size.height = result;
  return result;
}

const __CFArray **Vector<ma::Object *>::~Vector(const __CFArray **a1)
{
  const __CFArray *v2;
  CFIndex i;
  CFIndex Count;
  const __CFArray *v5;
  const void *ValueAtIndex;

  v2 = *a1;
  if (v2)
  {
    for (i = 0; ; ++i)
    {
      Count = CFArrayGetCount(v2);
      v5 = *a1;
      if (i >= Count)
        break;
      ValueAtIndex = CFArrayGetValueAtIndex(v5, i);
      if (ValueAtIndex)
        MEMORY[0x1BCCA12BC](ValueAtIndex, 0x20C4093837F09);
      v2 = *a1;
    }
    CFRelease(v5);
  }
  return a1;
}

const __CFArray **Vector<CGPoint>::~Vector(const __CFArray **a1)
{
  const __CFArray *v2;
  CFIndex i;
  CFIndex Count;
  const __CFArray *v5;
  const void *ValueAtIndex;

  v2 = *a1;
  if (v2)
  {
    for (i = 0; ; ++i)
    {
      Count = CFArrayGetCount(v2);
      v5 = *a1;
      if (i >= Count)
        break;
      ValueAtIndex = CFArrayGetValueAtIndex(v5, i);
      if (ValueAtIndex)
        MEMORY[0x1BCCA12BC](ValueAtIndex, 0x1000C40451B5BE8);
      v2 = *a1;
    }
    CFRelease(v5);
  }
  return a1;
}

void sub_1B6C59930(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_1B6C59AC0(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  _Unwind_Resume(a1);
}

void sub_1B6C5A384(_Unwind_Exception *a1, void *a2, void *a3, uint64_t a4, uint64_t a5, ...)
{
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  va_list va;

  va_start(va, a5);

  CF<opaqueCMSampleBuffer *>::~CF((const void **)va);
  _Unwind_Resume(a1);
}

void sub_1B6C5C47C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_1B6C5C700(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_1B6C5C910(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;

  _Unwind_Resume(a1);
}

void sub_1B6C5D064(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, void *a11, uint64_t a12, void *a13, void *a14)
{
  void *v14;
  void *v15;
  void *v16;
  void *v17;

  _Unwind_Resume(a1);
}

float handArea(VCPHandObservation *a1)
{
  VCPHandObservation *v1;
  double v2;
  double v3;
  double v4;

  v1 = a1;
  -[VCPHandObservation bounds](v1, "bounds");
  v3 = v2;
  -[VCPHandObservation bounds](v1, "bounds");
  *(float *)&v3 = v3 * v4;

  return *(float *)&v3;
}

{
  VCPHandObservation *v1;
  double v2;
  double v3;
  double v4;

  v1 = a1;
  -[VCPHandObservation bounds](v1, "bounds");
  v3 = v2;
  -[VCPHandObservation bounds](v1, "bounds");
  *(float *)&v3 = v3 * v4;

  return *(float *)&v3;
}

void sub_1B6C5D204(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1B6C5D34C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;

  v6 = v5;

  _Unwind_Resume(a1);
}

void sub_1B6C5D4B8(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  _Unwind_Resume(a1);
}

void sub_1B6C5D690(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void ReachabilityCallback(const __SCNetworkReachability *a1, uint64_t a2, void *a3)
{
  void *v4;
  void *v5;
  void *v6;
  id v7;
  id v8;
  id v9;
  id v10;
  id v11;
  id v12;
  id v13;
  id v14;
  id v15;
  id v16;
  int v17;
  void *v18;
  uint64_t v19;

  v19 = *MEMORY[0x1E0C80C00];
  v4 = a3;
  if ((int)MediaAnalysisLogLevel() >= 7 && os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_DEBUG))
  {
    objc_msgSend(MEMORY[0x1E0CB37A0], "string");
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    v6 = v5;
    if ((_DWORD)a2)
    {
      if ((a2 & 1) != 0)
      {
        v7 = v5;
        if (objc_msgSend(v7, "length") && objc_msgSend(CFSTR("TransientConnection"), "length"))
          objc_msgSend(v7, "appendString:", CFSTR("|"));
        if (objc_msgSend(CFSTR("TransientConnection"), "length"))
          objc_msgSend(v7, "appendString:", CFSTR("TransientConnection"));

      }
      if ((a2 & 2) != 0)
      {
        v8 = v6;
        if (objc_msgSend(v8, "length") && objc_msgSend(CFSTR("Reachable"), "length"))
          objc_msgSend(v8, "appendString:", CFSTR("|"));
        if (objc_msgSend(CFSTR("Reachable"), "length"))
          objc_msgSend(v8, "appendString:", CFSTR("Reachable"));

      }
      if ((a2 & 4) != 0)
      {
        v9 = v6;
        if (objc_msgSend(v9, "length") && objc_msgSend(CFSTR("ConnectionRequired"), "length"))
          objc_msgSend(v9, "appendString:", CFSTR("|"));
        if (objc_msgSend(CFSTR("ConnectionRequired"), "length"))
          objc_msgSend(v9, "appendString:", CFSTR("ConnectionRequired"));

      }
      if ((a2 & 8) != 0)
      {
        v10 = v6;
        if (objc_msgSend(v10, "length") && objc_msgSend(CFSTR("ConnectionOnTraffic"), "length"))
          objc_msgSend(v10, "appendString:", CFSTR("|"));
        if (objc_msgSend(CFSTR("ConnectionOnTraffic"), "length"))
          objc_msgSend(v10, "appendString:", CFSTR("ConnectionOnTraffic"));

      }
      if ((a2 & 0x10) != 0)
      {
        v11 = v6;
        if (objc_msgSend(v11, "length") && objc_msgSend(CFSTR("InterventionRequired"), "length"))
          objc_msgSend(v11, "appendString:", CFSTR("|"));
        if (objc_msgSend(CFSTR("InterventionRequired"), "length"))
          objc_msgSend(v11, "appendString:", CFSTR("InterventionRequired"));

      }
      if ((a2 & 0x20) != 0)
      {
        v12 = v6;
        if (objc_msgSend(v12, "length") && objc_msgSend(CFSTR("ConnectionOnDemand"), "length"))
          objc_msgSend(v12, "appendString:", CFSTR("|"));
        if (objc_msgSend(CFSTR("ConnectionOnDemand"), "length"))
          objc_msgSend(v12, "appendString:", CFSTR("ConnectionOnDemand"));

      }
      if ((a2 & 0x10000) != 0)
      {
        v13 = v6;
        if (objc_msgSend(v13, "length") && objc_msgSend(CFSTR("IsLocalAddress"), "length"))
          objc_msgSend(v13, "appendString:", CFSTR("|"));
        if (objc_msgSend(CFSTR("IsLocalAddress"), "length"))
          objc_msgSend(v13, "appendString:", CFSTR("IsLocalAddress"));

      }
      if ((a2 & 0x20000) != 0)
      {
        v14 = v6;
        if (objc_msgSend(v14, "length") && objc_msgSend(CFSTR("IsDirect"), "length"))
          objc_msgSend(v14, "appendString:", CFSTR("|"));
        if (objc_msgSend(CFSTR("IsDirect"), "length"))
          objc_msgSend(v14, "appendString:", CFSTR("IsDirect"));

      }
      if ((a2 & 0x40000) == 0)
        goto LABEL_72;
      v15 = v6;
      if (objc_msgSend(v15, "length") && objc_msgSend(CFSTR("IsWWAN"), "length"))
        objc_msgSend(v15, "appendString:", CFSTR("|"));
      if (objc_msgSend(CFSTR("IsWWAN"), "length"))
        objc_msgSend(v15, "appendString:", CFSTR("IsWWAN"));
    }
    else
    {
      v16 = v5;
      if (objc_msgSend(v16, "length") && objc_msgSend(CFSTR("None"), "length"))
        objc_msgSend(v16, "appendString:", CFSTR("|"));
      if (objc_msgSend(CFSTR("None"), "length"))
        objc_msgSend(v16, "appendString:", CFSTR("None"));
    }

LABEL_72:
    v17 = 138412290;
    v18 = v6;
    _os_log_impl(&dword_1B6C4A000, MEMORY[0x1E0C81028], OS_LOG_TYPE_DEBUG, "Network reachability flag changed to: %@", (uint8_t *)&v17, 0xCu);

  }
  objc_msgSend(v4, "setReachabilityForFlags:update:", a2, 1);

}

void sub_1B6C5DB10(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1B6C5DCD0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, objc_super a9)
{
  a9.super_class = (Class)VCPInternetReachability;
  -[_Unwind_Exception dealloc](&a9, sel_dealloc);
  _Unwind_Resume(a1);
}

void sub_1B6C5E8F4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, void *a15, void *a16)
{
  void *v16;

  _Unwind_Resume(a1);
}

void sub_1B6C5EEA4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  CVPixelBufferLock::~CVPixelBufferLock((CVPixelBufferLock *)va);
  _Unwind_Resume(a1);
}

uint64_t CVPixelBufferLock::Unlock(CVPixelBufferLock *this)
{
  _BOOL8 v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t result;
  __CVBuffer *v11;
  _QWORD *v12;
  _BOOL8 v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;

  if (*(_DWORD *)this)
  {
    v2 = os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR);
    if (v2)
      CVPixelBufferLock::Unlock(v2, v3, v4, v5, v6, v7, v8, v9);
    return *(unsigned int *)this;
  }
  v12 = (_QWORD *)((char *)this + 8);
  v11 = (__CVBuffer *)*((_QWORD *)this + 1);
  if (v11)
  {
    result = CVPixelBufferUnlockBaseAddress(v11, *((_QWORD *)this + 2));
    *(_DWORD *)this = result;
    if ((_DWORD)result)
    {
      if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
        CVPixelBufferLock::Unlock();
      return *(unsigned int *)this;
    }
    *v12 = 0;
  }
  else
  {
    v13 = os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR);
    if (v13)
      CVPixelBufferLock::Unlock(v13, v14, v15, v16, v17, v18, v19, v20);
    return 4294967278;
  }
  return result;
}

void CVPixelBufferLock::~CVPixelBufferLock(CVPixelBufferLock *this)
{
  __CVBuffer *v2;

  v2 = (__CVBuffer *)*((_QWORD *)this + 1);
  if (v2
    && !*(_DWORD *)this
    && CVPixelBufferUnlockBaseAddress(v2, *((_QWORD *)this + 2))
    && os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
  {
    -[VCPVideoCNNAnalyzer copyImage:withChannels:settling:].cold.2();
  }
}

void sub_1B6C5F378(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  CVPixelBufferLock::~CVPixelBufferLock((CVPixelBufferLock *)va);
  _Unwind_Resume(a1);
}

void sub_1B6C5FAF8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13)
{

  _Unwind_Resume(a1);
}

void sub_1B6C5FCC8(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  _Unwind_Resume(a1);
}

void sub_1B6C60000(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1B6C600AC(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1B6C606A8(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1B6C60C24(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1B6C60E78(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1B6C611F4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void OUTLINED_FUNCTION_0(void *a1, NSObject *a2, uint64_t a3, const char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint8_t a9)
{
  _os_log_error_impl(a1, a2, OS_LOG_TYPE_ERROR, a4, &a9, 0x12u);
}

void OUTLINED_FUNCTION_1(void *a1, NSObject *a2, uint64_t a3, const char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint8_t a9)
{
  _os_log_error_impl(a1, a2, OS_LOG_TYPE_ERROR, a4, &a9, 2u);
}

void OUTLINED_FUNCTION_5(uint64_t a1@<X8>)
{
  uint64_t v1;

  *(_QWORD *)(v1 - 8) = a1;
}

uint64_t VCPProtoMovieSceneResultReadFrom(uint64_t a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  char v14;
  uint64_t v16;
  int v17;
  BOOL v18;
  VCPProtoTimeRange *v19;
  uint64_t result;
  uint64_t v21;
  unint64_t v22;
  int v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) < *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
  {
    v7 = (int *)MEMORY[0x1E0D82BB8];
    while (2)
    {
      if (!*(_BYTE *)(a2 + *v5))
      {
        v8 = 0;
        v9 = 0;
        v10 = 0;
        while (1)
        {
          v11 = *v3;
          v12 = *(_QWORD *)(a2 + v11);
          v13 = v12 + 1;
          if (v12 == -1 || v13 > *(_QWORD *)(a2 + *v4))
            break;
          v14 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
          *(_QWORD *)(a2 + v11) = v13;
          v10 |= (unint64_t)(v14 & 0x7F) << v8;
          if ((v14 & 0x80) == 0)
            goto LABEL_12;
          v8 += 7;
          if (v9++ >= 9)
          {
            v10 = 0;
            v16 = *v5;
            v17 = *(unsigned __int8 *)(a2 + v16);
            goto LABEL_14;
          }
        }
        *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
        v16 = *v5;
        v17 = *(unsigned __int8 *)(a2 + v16);
        if (*(_BYTE *)(a2 + v16))
          v10 = 0;
LABEL_14:
        if (v17)
          v18 = 1;
        else
          v18 = (v10 & 7) == 4;
        if (!v18)
        {
          switch((v10 >> 3))
          {
            case 1u:
              v19 = objc_alloc_init(VCPProtoTimeRange);
              objc_storeStrong((id *)(a1 + 24), v19);
              if (PBReaderPlaceMark() && VCPProtoTimeRangeReadFrom((uint64_t)v19, a2))
              {
                PBReaderRecallMark();

                goto LABEL_45;
              }

              return 0;
            case 2u:
              v21 = *v3;
              v22 = *(_QWORD *)(a2 + v21);
              if (v22 <= 0xFFFFFFFFFFFFFFFBLL && v22 + 4 <= *(_QWORD *)(a2 + *v4))
              {
                v23 = *(_DWORD *)(*(_QWORD *)(a2 + *v7) + v22);
                *(_QWORD *)(a2 + v21) = v22 + 4;
              }
              else
              {
                *(_BYTE *)(a2 + v16) = 1;
                v23 = 0;
              }
              v30 = 16;
              goto LABEL_44;
            case 3u:
              *(_BYTE *)(a1 + 32) |= 1u;
              v24 = *v3;
              v25 = *(_QWORD *)(a2 + v24);
              if (v25 <= 0xFFFFFFFFFFFFFFFBLL && v25 + 4 <= *(_QWORD *)(a2 + *v4))
              {
                v23 = *(_DWORD *)(*(_QWORD *)(a2 + *v7) + v25);
                *(_QWORD *)(a2 + v24) = v25 + 4;
              }
              else
              {
                *(_BYTE *)(a2 + *v5) = 1;
                v23 = 0;
              }
              v30 = 8;
              goto LABEL_44;
            case 4u:
              *(_BYTE *)(a1 + 32) |= 2u;
              v26 = *v3;
              v27 = *(_QWORD *)(a2 + v26);
              if (v27 <= 0xFFFFFFFFFFFFFFFBLL && v27 + 4 <= *(_QWORD *)(a2 + *v4))
              {
                v23 = *(_DWORD *)(*(_QWORD *)(a2 + *v7) + v27);
                *(_QWORD *)(a2 + v26) = v27 + 4;
              }
              else
              {
                *(_BYTE *)(a2 + *v5) = 1;
                v23 = 0;
              }
              v30 = 12;
              goto LABEL_44;
            case 5u:
              *(_BYTE *)(a1 + 32) |= 4u;
              v28 = *v3;
              v29 = *(_QWORD *)(a2 + v28);
              if (v29 <= 0xFFFFFFFFFFFFFFFBLL && v29 + 4 <= *(_QWORD *)(a2 + *v4))
              {
                v23 = *(_DWORD *)(*(_QWORD *)(a2 + *v7) + v29);
                *(_QWORD *)(a2 + v28) = v29 + 4;
              }
              else
              {
                *(_BYTE *)(a2 + *v5) = 1;
                v23 = 0;
              }
              v30 = 20;
LABEL_44:
              *(_DWORD *)(a1 + v30) = v23;
              goto LABEL_45;
            default:
              result = PBReaderSkipValueWithTag();
              if (!(_DWORD)result)
                return result;
LABEL_45:
              if (*(_QWORD *)(a2 + *v3) >= *(_QWORD *)(a2 + *v4))
                return *(_BYTE *)(a2 + *v5) == 0;
              continue;
          }
        }
      }
      break;
    }
  }
  return *(_BYTE *)(a2 + *v5) == 0;
}

void sub_1B6C62360(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1B6C623BC(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1B6C62414(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, objc_super a9)
{
  void *v9;
  void *v10;

  v10 = v9;
  a9.receiver = v10;
  a9.super_class = (Class)VCPMAMLFeatureProvider;
  -[_Unwind_Exception dealloc](&a9, sel_dealloc);
  _Unwind_Resume(a1);
}

void sub_1B6C624B4(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1B6C6258C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1B6C6281C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1B6C62CB0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, id a20)
{
  void *v20;
  void *v21;
  void *v22;

  _Block_object_dispose(&a15, 8);
  _Unwind_Resume(a1);
}

uint64_t __Block_byref_object_copy__0(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void __Block_byref_object_dispose__0(uint64_t a1)
{

}

void sub_1B6C62E38(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1B6C63438(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,const void *a48)
{
  void *v48;

  CF<opaqueCMSampleBuffer *>::~CF(&a48);

  _Unwind_Resume(a1);
}

void sub_1B6C635D0(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1B6C6391C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,char a22,uint64_t a23,uint64_t a24,uint64_t a25,char a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,const void *a33)
{
  void *v33;
  const void **v34;
  void *v35;
  const void **v36;
  uint64_t v37;

  CF<opaqueCMSampleBuffer *>::~CF(v36);

  _Block_object_dispose(&a22, 8);
  _Block_object_dispose(&a26, 8);
  CF<opaqueCMSampleBuffer *>::~CF(v34);
  _Block_object_dispose((const void *)(v37 - 176), 8);
  CF<opaqueCMSampleBuffer *>::~CF(&a33);
  CF<opaqueCMSampleBuffer *>::~CF((const void **)(v37 - 184));

  _Unwind_Resume(a1);
}

__n128 __Block_byref_object_copy__164(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = a2[3];
  a1[4].n128_u64[0] = a2[4].n128_u64[0];
  a1[3] = result;
  return result;
}

uint64_t __Block_byref_object_copy__166(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 48) = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a2 + 48) = 0;
  return result;
}

const void **__Block_byref_object_dispose__167(uint64_t a1)
{
  return CF<opaqueCMSampleBuffer *>::~CF((const void **)(a1 + 48));
}

void sub_1B6C63E4C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  uint64_t v4;

  CF<opaqueCMSampleBuffer *>::~CF((const void **)(v4 - 136));

  _Unwind_Resume(a1);
}

const void **CF<__CVBuffer *>::operator=(const void **a1, const void **a2)
{
  const void *v4;

  v4 = *a1;
  if (v4)
    CFRelease(v4);
  *a1 = *a2;
  *a2 = 0;
  return a1;
}

{
  const void *v4;
  const void *v5;

  v4 = *a1;
  if (v4)
    CFRelease(v4);
  v5 = *a2;
  *a1 = *a2;
  if (v5)
    CFRetain(v5);
  return a1;
}

CFTypeRef __copy_helper_block_ea8_72c31_ZTS2CFIP19__CVPixelBufferPoolE80c40_ZTS2CFIP28OpaqueVTPixelTransferSessionE(uint64_t a1, uint64_t a2)
{
  const void *v4;
  CFTypeRef result;

  v4 = *(const void **)(a2 + 72);
  *(_QWORD *)(a1 + 72) = v4;
  if (v4)
    CFRetain(v4);
  result = *(CFTypeRef *)(a2 + 80);
  *(_QWORD *)(a1 + 80) = result;
  if (result)
    return CFRetain(result);
  return result;
}

void sub_1B6C63F28(_Unwind_Exception *a1)
{
  const void **v1;

  CF<opaqueCMSampleBuffer *>::~CF(v1);
  _Unwind_Resume(a1);
}

const void **__destroy_helper_block_ea8_72c31_ZTS2CFIP19__CVPixelBufferPoolE80c40_ZTS2CFIP28OpaqueVTPixelTransferSessionE(uint64_t a1)
{
  const void **v1;

  v1 = (const void **)(a1 + 72);
  CF<opaqueCMSampleBuffer *>::~CF((const void **)(a1 + 80));
  return CF<opaqueCMSampleBuffer *>::~CF(v1);
}

void sub_1B6C64118(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1B6C64510(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  _Unwind_Resume(a1);
}

Class ___ZL41getIMMediaAnalysisBlastDoorInterfaceClassv_block_invoke(uint64_t a1)
{
  Class result;
  void *v3;

  if (!MediaAnalysisBlastDoorSupportLibraryCore(char **)::frameworkLibrary)
  {
    MediaAnalysisBlastDoorSupportLibraryCore(char **)::frameworkLibrary = _sl_dlopen();
    if (!MediaAnalysisBlastDoorSupportLibraryCore(char **)::frameworkLibrary)
    {
      abort_report_np();
      goto LABEL_6;
    }
  }
  while (1)
  {
    result = objc_getClass("IMMediaAnalysisBlastDoorInterface");
    *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = result;
    if (*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24))
      break;
LABEL_6:
    v3 = (void *)___ZL41getIMMediaAnalysisBlastDoorInterfaceClassv_block_invoke_cold_1();
    free(v3);
  }
  getIMMediaAnalysisBlastDoorInterfaceClass(void)::softClass = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24);
  return result;
}

void sub_1B6C6482C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1B6C64AF8(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;

  v6 = v4;

  _Unwind_Resume(a1);
}

void sub_1B6C64DD4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  v4 = v3;

  _Unwind_Resume(a1);
}

void sub_1B6C64EA8(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1B6C64F28(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1B6C65008(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;
  void *v11;
  void *v12;

  _Unwind_Resume(a1);
}

void sub_1B6C650D0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;
  void *v11;

  _Unwind_Resume(a1);
}

uint64_t VCPProtoMovieAudioQualityResultReadFrom(uint64_t a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  char v14;
  uint64_t v16;
  int v17;
  VCPProtoTimeRange *v19;
  uint64_t v20;
  unint64_t v21;
  int v22;
  uint64_t result;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) < *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
  {
    v7 = (int *)MEMORY[0x1E0D82BB8];
    do
    {
      if (*(_BYTE *)(a2 + *v5))
        break;
      v8 = 0;
      v9 = 0;
      v10 = 0;
      while (1)
      {
        v11 = *v3;
        v12 = *(_QWORD *)(a2 + v11);
        v13 = v12 + 1;
        if (v12 == -1 || v13 > *(_QWORD *)(a2 + *v4))
          break;
        v14 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
        *(_QWORD *)(a2 + v11) = v13;
        v10 |= (unint64_t)(v14 & 0x7F) << v8;
        if ((v14 & 0x80) == 0)
          goto LABEL_12;
        v8 += 7;
        if (v9++ >= 9)
        {
          v10 = 0;
          v16 = *v5;
          v17 = *(unsigned __int8 *)(a2 + v16);
          goto LABEL_14;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
      v16 = *v5;
      v17 = *(unsigned __int8 *)(a2 + v16);
      if (*(_BYTE *)(a2 + v16))
        v10 = 0;
LABEL_14:
      if (v17 || (v10 & 7) == 4)
        break;
      if ((v10 >> 3) == 2)
      {
        v20 = *v3;
        v21 = *(_QWORD *)(a2 + v20);
        if (v21 <= 0xFFFFFFFFFFFFFFFBLL && v21 + 4 <= *(_QWORD *)(a2 + *v4))
        {
          v22 = *(_DWORD *)(*(_QWORD *)(a2 + *v7) + v21);
          *(_QWORD *)(a2 + v20) = v21 + 4;
        }
        else
        {
          *(_BYTE *)(a2 + v16) = 1;
          v22 = 0;
        }
        *(_DWORD *)(a1 + 8) = v22;
      }
      else if ((v10 >> 3) == 1)
      {
        v19 = objc_alloc_init(VCPProtoTimeRange);
        objc_storeStrong((id *)(a1 + 16), v19);
        if (!PBReaderPlaceMark() || !VCPProtoTimeRangeReadFrom((uint64_t)v19, a2))
        {

          return 0;
        }
        PBReaderRecallMark();

      }
      else
      {
        result = PBReaderSkipValueWithTag();
        if (!(_DWORD)result)
          return result;
      }
    }
    while (*(_QWORD *)(a2 + *v3) < *(_QWORD *)(a2 + *v4));
  }
  return *(_BYTE *)(a2 + *v5) == 0;
}

uint64_t AddResultDictionary(CMTime *a1, CMTime *a2, float *a3, int *a4, const __CFDictionary *a5, __CFArray *a6)
{
  CFMutableDictionaryRef Mutable;
  __CFDictionary *v13;
  CFDictionaryRef v14;
  CFDictionaryRef v15;
  CFDictionaryRef v16;
  CFDictionaryRef v17;
  CFNumberRef v18;
  CFNumberRef v19;
  uint64_t v20;
  CMTime v22;
  int valuePtr;

  Mutable = CFDictionaryCreateMutable(0, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  if (Mutable)
  {
    v13 = Mutable;
    if (a1)
    {
      v22 = *a1;
      v14 = CMTimeCopyAsDictionary(&v22, 0);
      if (!v14)
        goto LABEL_19;
      v15 = v14;
      CFDictionarySetValue(v13, CFSTR("start"), v14);
      CFRelease(v15);
    }
    if (!a2)
      goto LABEL_8;
    v22 = *a2;
    v16 = CMTimeCopyAsDictionary(&v22, 0);
    if (v16)
    {
      v17 = v16;
      CFDictionarySetValue(v13, CFSTR("duration"), v16);
      CFRelease(v17);
LABEL_8:
      if (a3)
      {
        valuePtr = *(_DWORD *)a3;
        v18 = CFNumberCreate(0, kCFNumberFloat32Type, &valuePtr);
        v22.value = (CMTimeValue)v18;
        if (!v18)
        {
LABEL_18:
          CF<opaqueCMSampleBuffer *>::~CF((const void **)&v22);
          goto LABEL_19;
        }
        CFDictionarySetValue(v13, CFSTR("quality"), v18);
        CF<opaqueCMSampleBuffer *>::~CF((const void **)&v22);
      }
      if (!a4)
      {
LABEL_14:
        if (a5)
          CFDictionarySetValue(v13, CFSTR("attributes"), a5);
        CFArrayAppendValue(a6, v13);
        v20 = 0;
        goto LABEL_20;
      }
      valuePtr = *a4;
      v19 = CFNumberCreate(0, kCFNumberSInt32Type, &valuePtr);
      v22.value = (CMTimeValue)v19;
      if (v19)
      {
        CFDictionarySetValue(v13, CFSTR("flags"), v19);
        CF<opaqueCMSampleBuffer *>::~CF((const void **)&v22);
        goto LABEL_14;
      }
      goto LABEL_18;
    }
LABEL_19:
    v20 = 4294967188;
LABEL_20:
    CFRelease(v13);
    return v20;
  }
  return 4294967188;
}

void sub_1B6C65968(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, const void *a9)
{
  CF<opaqueCMSampleBuffer *>::~CF(&a9);
  _Unwind_Resume(a1);
}

void sub_1B6C65A20(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1B6C65B44(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1B6C65B98(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1B6C65CCC(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1B6C65E10(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1B6C65F34(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1B6C6610C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1B6C66198(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1B6C662C4(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1B6C66400(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1B6C66520(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1B6C66640(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1B6C667A4(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1B6C66908(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1B6C66A78(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1B6C66BDC(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1B6C66D1C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1B6C66DE4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1B6C66FE4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1B6C671F0(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;

  _Unwind_Resume(a1);
}

void sub_1B6C67400(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;

  v6 = v4;

  _Unwind_Resume(a1);
}

void sub_1B6C67928(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

uint64_t MotionAnalysis<ma::ObstructionSegment>::Initialize(uint64_t a1)
{
  ma::ObstructionSegment *v3;
  ma::ObstructionSegment *v4;

  if (*(_QWORD *)(a1 + 16) || *(_QWORD *)(a1 + 8))
    return 4294967246;
  *(_QWORD *)(a1 + 16) = CFArrayCreateMutable(0, 0, MEMORY[0x1E0C9B378]);
  v3 = (ma::ObstructionSegment *)operator new(0x50uLL, MEMORY[0x1E0DE4E10]);
  if (v3)
  {
    v4 = v3;
    ma::ObstructionSegment::ObstructionSegment(v3);
    *(_QWORD *)(a1 + 8) = v4;
    if (*(_QWORD *)(a1 + 16))
      return 0;
    else
      return 4294967188;
  }
  else
  {
    *(_QWORD *)(a1 + 8) = 0;
    return 4294967188;
  }
}

void sub_1B6C67A00(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1BCCA12A4](v1, MEMORY[0x1E0DE4E10]);
  _Unwind_Resume(a1);
}

void sub_1B6C67EE0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, void *a14, void *a15)
{
  void *v15;

  _Unwind_Resume(a1);
}

void sub_1B6C68298(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1B6C68424(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1B6C68678(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_1B6C691A0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *a17, void *a18, void *a19, void *a20)
{
  void *v20;

  _Unwind_Resume(a1);
}

void sub_1B6C694CC(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1B6C69758(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1B6C69BF4(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1B6C69F74(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1B6C6A080(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1B6C6A150(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1B6C6A1F4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_1B6C6A3A0(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1B6C6A534(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

const __CFArray **MotionAnalysis<ma::ObstructionSegment>::~MotionAnalysis(uint64_t a1)
{
  unint64_t i;
  const __CFArray *v3;
  uint64_t v4;
  uint64_t v5;
  const void *v6;

  for (i = 0; ; ++i)
  {
    v3 = *(const __CFArray **)a1;
    if (*(_QWORD *)a1)
      LODWORD(v3) = CFArrayGetCount(v3);
    if (i >= (int)v3)
      break;
    v4 = *(_QWORD *)CFArrayGetValueAtIndex(*(CFArrayRef *)a1, i);
    if (v4)
      (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
  }
  v5 = *(_QWORD *)(a1 + 8);
  if (v5)
    (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
  v6 = *(const void **)(a1 + 16);
  if (v6)
    CFRelease(v6);
  return Vector<ma::Object *>::~Vector((const __CFArray **)a1);
}

uint64_t VCPProtoMovieFineSubjectMotionResultReadFrom(uint64_t a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  char v14;
  uint64_t v16;
  int v17;
  VCPProtoTimeRange *v19;
  uint64_t v20;
  unint64_t v21;
  int v22;
  uint64_t result;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) < *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
  {
    v7 = (int *)MEMORY[0x1E0D82BB8];
    do
    {
      if (*(_BYTE *)(a2 + *v5))
        break;
      v8 = 0;
      v9 = 0;
      v10 = 0;
      while (1)
      {
        v11 = *v3;
        v12 = *(_QWORD *)(a2 + v11);
        v13 = v12 + 1;
        if (v12 == -1 || v13 > *(_QWORD *)(a2 + *v4))
          break;
        v14 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
        *(_QWORD *)(a2 + v11) = v13;
        v10 |= (unint64_t)(v14 & 0x7F) << v8;
        if ((v14 & 0x80) == 0)
          goto LABEL_12;
        v8 += 7;
        if (v9++ >= 9)
        {
          v10 = 0;
          v16 = *v5;
          v17 = *(unsigned __int8 *)(a2 + v16);
          goto LABEL_14;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
      v16 = *v5;
      v17 = *(unsigned __int8 *)(a2 + v16);
      if (*(_BYTE *)(a2 + v16))
        v10 = 0;
LABEL_14:
      if (v17 || (v10 & 7) == 4)
        break;
      if ((v10 >> 3) == 2)
      {
        v20 = *v3;
        v21 = *(_QWORD *)(a2 + v20);
        if (v21 <= 0xFFFFFFFFFFFFFFFBLL && v21 + 4 <= *(_QWORD *)(a2 + *v4))
        {
          v22 = *(_DWORD *)(*(_QWORD *)(a2 + *v7) + v21);
          *(_QWORD *)(a2 + v20) = v21 + 4;
        }
        else
        {
          *(_BYTE *)(a2 + v16) = 1;
          v22 = 0;
        }
        *(_DWORD *)(a1 + 8) = v22;
      }
      else if ((v10 >> 3) == 1)
      {
        v19 = objc_alloc_init(VCPProtoTimeRange);
        objc_storeStrong((id *)(a1 + 16), v19);
        if (!PBReaderPlaceMark() || !VCPProtoTimeRangeReadFrom((uint64_t)v19, a2))
        {

          return 0;
        }
        PBReaderRecallMark();

      }
      else
      {
        result = PBReaderSkipValueWithTag();
        if (!(_DWORD)result)
          return result;
      }
    }
    while (*(_QWORD *)(a2 + *v3) < *(_QWORD *)(a2 + *v4));
  }
  return *(_BYTE *)(a2 + *v5) == 0;
}

void sub_1B6C6AF08(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1B6C6AFC0(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1B6C6B4C4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_1B6C6C180(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, void *a13, uint64_t a14, uint64_t a15, void *a16, void *a17, uint64_t a18, uint64_t a19, uint64_t a20,void *a21,void *a22,void *a23,void *a24,void *a25,void *a26,uint64_t a27,void *a28)
{
  void *v28;
  void *v29;

  _Unwind_Resume(a1);
}

void sub_1B6C6C4E8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  uint64_t v7;
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Block_object_dispose((const void *)(v7 - 64), 8);

  _Unwind_Resume(a1);
}

uint64_t __Block_byref_object_copy__1(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void __Block_byref_object_dispose__1(uint64_t a1)
{

}

void sub_1B6C6C5CC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void sub_1B6C6C6D4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1B6C6CFFC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, void *a11, void *a12, uint64_t a13, uint64_t a14, void *a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,void *a21,uint64_t a22,uint64_t a23,void *a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  void *a67;
  void *a68;
  void *v68;

  _Unwind_Resume(a1);
}

void sub_1B6C6D29C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1B6C6D35C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1B6C6DD58(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11, void *a12, uint64_t a13, void *a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,void *a21)
{

  _Unwind_Resume(a1);
}

void sub_1B6C6F1C4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, void *a14, void *a15, uint64_t a16, void *a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,void *a24,void *a25)
{
  void *v25;

  _Block_object_dispose(&STACK[0x3B0], 8);
  _Block_object_dispose(&STACK[0x3D0], 8);

  _Block_object_dispose(&STACK[0x400], 8);
  _Unwind_Resume(a1);
}

void sub_1B6C6F63C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;
  void *v11;
  void *v12;

  _Unwind_Resume(a1);
}

void sub_1B6C6F99C(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, void *a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15, void *a16, uint64_t a17, ...)
{
  va_list va;

  va_start(va, a17);

  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1B6C6FB98(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, void *a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  void *v9;
  void *v10;
  void *v11;
  uint64_t v12;
  va_list va;

  va_start(va, a9);

  _Block_object_dispose(va, 8);
  _Block_object_dispose((const void *)(v12 - 64), 8);

  _Unwind_Resume(a1);
}

void sub_1B6C6FCCC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;
  void *v11;

  _Unwind_Resume(a1);
}

void sub_1B6C6FE64(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_1B6C70804(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *a19, uint64_t a20,void *a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,void *a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,char a41)
{
  void *v41;

  _Block_object_dispose(&a41, 8);
  _Unwind_Resume(a1);
}

void sub_1B6C70BF0(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;

  _Unwind_Resume(a1);
}

void ___ZL28getGDVUStreamingGalleryClassv_block_invoke(uint64_t a1)
{
  IntelligencePlatformLibrary();
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = objc_getClass("GDVUStreamingGallery");
  if (*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24))
  {
    getGDVUStreamingGalleryClass(void)::softClass = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24);
  }
  else
  {
    ___ZL28getGDVUStreamingGalleryClassv_block_invoke_cold_1();
    IntelligencePlatformLibrary();
  }
}

void IntelligencePlatformLibrary(void)
{
  void *v0;

  if (!IntelligencePlatformLibraryCore(char **)::frameworkLibrary)
    IntelligencePlatformLibraryCore(char **)::frameworkLibrary = _sl_dlopen();
  if (!IntelligencePlatformLibraryCore(char **)::frameworkLibrary)
  {
    v0 = (void *)abort_report_np();
    free(v0);
  }
}

{
  void *v0;

  if (!IntelligencePlatformLibraryCore(char **)::frameworkLibrary)
    IntelligencePlatformLibraryCore(char **)::frameworkLibrary = _sl_dlopen();
  if (!IntelligencePlatformLibraryCore(char **)::frameworkLibrary)
  {
    v0 = (void *)abort_report_np();
    free(v0);
  }
}

{
  void *v0;

  if (!IntelligencePlatformLibraryCore(char **)::frameworkLibrary)
    IntelligencePlatformLibraryCore(char **)::frameworkLibrary = _sl_dlopen();
  if (!IntelligencePlatformLibraryCore(char **)::frameworkLibrary)
  {
    v0 = (void *)abort_report_np();
    free(v0);
  }
}

{
  void *v0;

  if (!IntelligencePlatformLibraryCore(char **)::frameworkLibrary)
    IntelligencePlatformLibraryCore(char **)::frameworkLibrary = _sl_dlopen();
  if (!IntelligencePlatformLibraryCore(char **)::frameworkLibrary)
  {
    v0 = (void *)abort_report_np();
    free(v0);
  }
}

Class ___ZL35getGDVUEntityRecognitionClientClassv_block_invoke(uint64_t a1)
{
  Class result;
  uint64_t v3;

  IntelligencePlatformLibrary();
  result = objc_getClass("GDVUEntityRecognitionClient");
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = result;
  if (*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24))
  {
    getGDVUEntityRecognitionClientClass(void)::softClass = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24);
  }
  else
  {
    v3 = ___ZL35getGDVUEntityRecognitionClientClassv_block_invoke_cold_1();
    return (Class)___ZL19getGDVUContextClassv_block_invoke(v3);
  }
  return result;
}

ma::SubtleMotionAnalysis *ma::SubtleMotionAnalysis::SubtleMotionAnalysis(ma::SubtleMotionAnalysis *this)
{
  uint64_t v2;

  *(_QWORD *)this = 0;
  *((_QWORD *)this + 1) = 0;
  *((_QWORD *)this + 2) = 0;
  v2 = MEMORY[0x1E0CA2E68];
  *(_OWORD *)((char *)this + 24) = *MEMORY[0x1E0CA2E68];
  *((_QWORD *)this + 5) = *(_QWORD *)(v2 + 16);
  *((_BYTE *)this + 48) = 1;
  *((_DWORD *)this + 13) = 0;
  ma::HinkleyDetector::HinkleyDetector((uint64_t)this + 56);
  *((_BYTE *)this + 84) = 0;
  return this;
}

void sub_1B6C710DC(_Unwind_Exception *a1)
{
  uint64_t v1;

  MotionAnalysis<ma::ObstructionSegment>::~MotionAnalysis(v1);
  _Unwind_Resume(a1);
}

void ma::SubtleMotionAnalysis::~SubtleMotionAnalysis(ma::SubtleMotionAnalysis *this)
{
  ma::MotionFilter::~MotionFilter((ma::SubtleMotionAnalysis *)((char *)this + 56));
  MotionAnalysis<ma::ObstructionSegment>::~MotionAnalysis((uint64_t)this);
}

uint64_t ma::SubtleMotionAnalysis::Initialize(ma::SubtleMotionAnalysis *this, char a2)
{
  *((_BYTE *)this + 84) = a2;
  ma::HinkleyDetector::Initialize((uint64_t)this + 56, 0.5, 1.5, 0x14u >> a2);
  return MotionAnalysis<ma::SubtleMotionSegment>::Initialize((uint64_t)this);
}

uint64_t MotionAnalysis<ma::SubtleMotionSegment>::Initialize(uint64_t a1)
{
  ma::SubtleMotionSegment *v3;
  ma::SubtleMotionSegment *v4;

  if (*(_QWORD *)(a1 + 16) || *(_QWORD *)(a1 + 8))
    return 4294967246;
  *(_QWORD *)(a1 + 16) = CFArrayCreateMutable(0, 0, MEMORY[0x1E0C9B378]);
  v3 = (ma::SubtleMotionSegment *)operator new(0x58uLL, MEMORY[0x1E0DE4E10]);
  if (v3)
  {
    v4 = v3;
    ma::SubtleMotionSegment::SubtleMotionSegment(v3);
    *(_QWORD *)(a1 + 8) = v4;
    if (*(_QWORD *)(a1 + 16))
      return 0;
    else
      return 4294967188;
  }
  else
  {
    *(_QWORD *)(a1 + 8) = 0;
    return 4294967188;
  }
}

void sub_1B6C711E0(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1BCCA12A4](v1, MEMORY[0x1E0DE4E10]);
  _Unwind_Resume(a1);
}

uint64_t ma::SubtleMotionAnalysis::ProcessFrame(ma::SubtleMotionAnalysis *this, Frame *a2)
{
  ma::Segment *v4;
  uint64_t result;
  ma::Segment *v6;
  int frame_idx;
  CMTime v8;
  CMTime v9;

  if (*((_BYTE *)this + 48))
  {
    ma::SubtleMotionSegment::ResetStats(*((ma::SubtleMotionSegment **)this + 1), (const MotionResult *)&a2->acc_var_.z_);
    v4 = (ma::Segment *)*((_QWORD *)this + 1);
    v9 = *(CMTime *)((_BYTE *)this + 1);
    ma::Segment::SetStart(v4, 0, &v9);
    result = 0;
    *((_BYTE *)this + 48) = 0;
    return result;
  }
  if (LOBYTE(a2->motion_result_.action_blocks_))
  {
    if (ma::SubtleMotionAnalysis::DecideSegmentPoint(this, *((const ma::SubtleMotionSegment **)this + 1), a2))
    {
      result = ma::SubtleMotionAnalysis::AddSegment((const __CFArray **)this, (const ma::Frame *)a2, 0);
      if ((_DWORD)result)
        return result;
      ma::SubtleMotionSegment::ResetStats(*((ma::SubtleMotionSegment **)this + 1), (const MotionResult *)&a2->acc_var_.z_);
      v6 = (ma::Segment *)*((_QWORD *)this + 1);
      frame_idx = a2->frame_idx_;
      v8 = *(CMTime *)(&a2->frame_idx_ + 1);
      ma::Segment::SetStart(v6, frame_idx, &v8);
    }
    else
    {
      ma::SubtleMotionSegment::UpdateStats(*((ma::SubtleMotionSegment **)this + 1), (const MotionResult *)&a2->acc_var_.z_);
    }
  }
  return 0;
}

BOOL ma::SubtleMotionAnalysis::DecideSegmentPoint(ma::SubtleMotionAnalysis *this, const ma::SubtleMotionSegment *a2, const Frame *a3)
{
  int v4;
  _BOOL8 v6;
  _BOOL4 v7;

  v4 = *((_DWORD *)a2 + 5);
  if (!v4)
  {
    v6 = 0;
    goto LABEL_8;
  }
  if (*((_DWORD *)this + 16) >= a3->frame_idx_ - *((_DWORD *)a2 + 3))
  {
    v7 = 0;
    v6 = 0;
  }
  else
  {
    v6 = ma::HinkleyDetector::Test((ma::SubtleMotionAnalysis *)((char *)this + 56), (const float *)a2 + 19, &a3->motion_result_.confidence_[4], v4 + 1);
    v7 = *((_DWORD *)a2 + 5) == 0;
    if (v6)
      goto LABEL_8;
  }
  if (v7)
LABEL_8:
    ma::HinkleyDetector::ResetStats((ma::SubtleMotionAnalysis *)((char *)this + 56));
  return v6;
}

uint64_t ma::SubtleMotionAnalysis::AddSegment(const __CFArray **this, const ma::Frame *a2, int a3)
{
  const __CFArray *v6;
  ma::Segment *v7;
  int Count;
  _OWORD *v10;
  int v11;
  CMTime v13;
  CMTime lhs;
  CMTime v15;

  v6 = *this;
  v7 = this[1];
  if (v6)
    Count = CFArrayGetCount(v6);
  else
    Count = 0;
  v10 = (_OWORD *)((char *)a2 + 4);
  v11 = *(_DWORD *)a2;
  if (a3)
  {
    *(_OWORD *)&lhs.value = *v10;
    lhs.epoch = *(_QWORD *)((char *)a2 + 20);
    v13 = *(CMTime *)((char *)a2 + 28);
    CMTimeAdd(&v15, &lhs, &v13);
  }
  else
  {
    *(_OWORD *)&v15.value = *v10;
    v15.epoch = *(_QWORD *)((char *)a2 + 20);
  }
  ma::Segment::Finalize(v7, Count, v11 + a3, &v15);
  ma::SubtleMotionSegment::DetermineType((uint64_t)this[1]);
  return MotionAnalysis<ma::SubtleMotionSegment>::AddSegment((uint64_t)this);
}

uint64_t MotionAnalysis<ma::SubtleMotionSegment>::AddSegment(uint64_t a1)
{
  ma::SubtleMotionSegment *v2;
  ma::SubtleMotionSegment *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;

  v2 = (ma::SubtleMotionSegment *)operator new(0x58uLL, MEMORY[0x1E0DE4E10]);
  if (!v2)
    return 4294967188;
  v3 = v2;
  ma::SubtleMotionSegment::SubtleMotionSegment(v2);
  v4 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)(a1 + 8) = v3;
  v7 = v4;
  v5 = Vector<ma::Object *>::PushBack((CFMutableArrayRef *)a1, &v7);
  if ((_DWORD)v5 && v7)
    (*(void (**)(uint64_t))(*(_QWORD *)v7 + 8))(v7);
  return v5;
}

void sub_1B6C714C0(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1BCCA12A4](v1, MEMORY[0x1E0DE4E10]);
  _Unwind_Resume(a1);
}

uint64_t ma::SubtleMotionAnalysis::FinalizeSegments(const __CFArray **this, const ma::Frame *a2)
{
  uint64_t result;

  result = ma::SubtleMotionAnalysis::AddSegment(this, a2, 1);
  if (!(_DWORD)result)
  {
    result = ma::SubtleMotionAnalysis::MergeSameTypeSegments(this);
    if (!(_DWORD)result)
      return ma::SubtleMotionAnalysis::StoreSegmentResult(this);
  }
  return result;
}

uint64_t ma::SubtleMotionAnalysis::MergeSameTypeSegments(CFArrayRef *this)
{
  CFIndex v2;
  CFIndex v3;
  const __CFArray *v4;
  int v5;
  ma::SubtleMotionSegment *v6;
  const ma::SubtleMotionSegment **ValueAtIndex;
  uint64_t *v8;
  uint64_t result;

  LODWORD(v2) = 0;
LABEL_2:
  v3 = v2;
  v2 = (v2 + 1);
  while (1)
  {
    v4 = *this;
    if (*this)
      LODWORD(v4) = CFArrayGetCount(v4);
    if ((int)v3 >= (int)v4 - 1)
      return 0;
    v5 = *(_DWORD *)(*(_QWORD *)CFArrayGetValueAtIndex(*this, v3) + 72);
    if (v5 != *(_DWORD *)(*(_QWORD *)CFArrayGetValueAtIndex(*this, v2) + 72))
      goto LABEL_2;
    v6 = *(ma::SubtleMotionSegment **)CFArrayGetValueAtIndex(*this, v3);
    ValueAtIndex = (const ma::SubtleMotionSegment **)CFArrayGetValueAtIndex(*this, v2);
    ma::SubtleMotionSegment::Merge(v6, *ValueAtIndex);
    v8 = (uint64_t *)CFArrayGetValueAtIndex(*this, v3);
    ma::SubtleMotionSegment::DetermineType(*v8);
    result = MotionAnalysis<ma::SubtleMotionSegment>::RemoveSegment(this, v2);
    if ((_DWORD)result)
      return result;
  }
}

uint64_t ma::SubtleMotionAnalysis::StoreSegmentResult(CFArrayRef *this)
{
  CFIndex i;
  const __CFArray *v3;
  const void *ValueAtIndex;
  float v5;
  float v6;
  float v7;
  uint64_t result;
  float v9;
  CMTime v10;
  CMTime v11;

  for (i = 0; ; ++i)
  {
    v3 = *this;
    if (*this)
      LODWORD(v3) = CFArrayGetCount(v3);
    if (i >= (int)v3)
      break;
    if (*(_DWORD *)(*(_QWORD *)CFArrayGetValueAtIndex(*this, i) + 16))
    {
      v11 = *(CMTime *)(*(_QWORD *)CFArrayGetValueAtIndex(*this, i) + 24);
      v10 = *(CMTime *)(*(_QWORD *)CFArrayGetValueAtIndex(*this, i) + 48);
      v9 = 0.0;
      ValueAtIndex = CFArrayGetValueAtIndex(*this, i);
      v5 = *(float *)(*(_QWORD *)ValueAtIndex + 80);
      v6 = v5 < 1.0 ? *(float *)(*(_QWORD *)ValueAtIndex + 80) : 1.0;
      v7 = v5 <= 0.0 ? 0.0 : v6;
      v9 = v7;
      result = AddResultDictionary(&v11, &v10, &v9, 0, 0, this[2]);
      if ((_DWORD)result)
        return result;
    }
  }
  return 0;
}

uint64_t ma::SubtleMotionAnalysis::CopyProperty(ma::SubtleMotionAnalysis *this, CFTypeRef cf1, const __CFAllocator *a3, CFArrayRef *a4)
{
  const __CFArray *v7;
  CFArrayRef Copy;

  if (CFEqual(cf1, CFSTR("SubtleMotionResults")))
  {
    v7 = (const __CFArray *)*((_QWORD *)this + 2);
    if (v7)
      Copy = CFArrayCreateCopy(a3, v7);
    else
      Copy = 0;
    *a4 = Copy;
  }
  return 0;
}

uint64_t ma::SubtleMotionAnalysis::CopyProperty(ma::SubtleMotionAnalysis *this, CMTimeRange *a2, CFTypeRef cf1, const __CFAllocator *a4, CFArrayRef *a5)
{
  __CFArray *Mutable;
  CFIndex v10;
  const __CFArray *v11;
  CMTime *v12;
  const void *ValueAtIndex;
  float v14;
  float v15;
  float v16;
  __int128 v17;
  __int128 v18;
  CMTime *v19;
  float v20;
  float v21;
  BOOL v22;
  float v23;
  CFArrayRef Copy;
  CMTimeRange v26;
  CMTime v27;
  float v28;
  CMTime v29;
  CMTime start;
  CMTime v31;
  CMTime rhs;
  CMTime lhs;

  if (!CFEqual(cf1, CFSTR("SubtleMotionResults")))
    return 4294967246;
  Mutable = CFArrayCreateMutable(0, 0, MEMORY[0x1E0C9B378]);
  v10 = 0;
  v28 = 0.0;
  while (1)
  {
    v11 = *(const __CFArray **)this;
    if (*(_QWORD *)this)
      LODWORD(v11) = CFArrayGetCount(v11);
    if (v10 >= (int)v11)
      break;
    start = *(CMTime *)(*(_QWORD *)CFArrayGetValueAtIndex(*(CFArrayRef *)this, v10) + 24);
    v12 = *(CMTime **)CFArrayGetValueAtIndex(*(CFArrayRef *)this, v10);
    v29 = v12[2];
    lhs = start;
    rhs = v12[2];
    CMTimeAdd(&v31, &lhs, &rhs);
    lhs = v31;
    rhs = a2->start;
    if ((CMTimeCompare(&lhs, &rhs) & 0x80000000) == 0)
    {
      lhs = start;
      rhs = a2->start;
      if (CMTimeCompare(&lhs, &rhs) < 0)
      {
        lhs = a2->start;
        rhs = start;
        CMTimeSubtract(&v27, &lhs, &rhs);
        rhs = v29;
        v31 = v27;
        CMTimeSubtract(&lhs, &rhs, &v31);
        v29 = lhs;
        start = a2->start;
      }
      ValueAtIndex = CFArrayGetValueAtIndex(*(CFArrayRef *)this, v10);
      v14 = *(float *)(*(_QWORD *)ValueAtIndex + 80);
      v15 = v14 < 1.0 ? *(float *)(*(_QWORD *)ValueAtIndex + 80) : 1.0;
      v16 = v14 <= 0.0 ? 0.0 : v15;
      v28 = v16;
      if (AddResultDictionary(&start, &v29, &v28, 0, 0, Mutable))
        goto LABEL_29;
    }
    ++v10;
  }
  start = *(CMTime *)(*((_QWORD *)this + 1) + 24);
  v17 = *(_OWORD *)&a2->duration.timescale;
  v18 = *(_OWORD *)&a2->start.value;
  *(_OWORD *)&v26.start.epoch = *(_OWORD *)&a2->start.epoch;
  *(_OWORD *)&v26.duration.timescale = v17;
  *(_OWORD *)&v26.start.value = v18;
  CMTimeRangeGetEnd(&v27, &v26);
  v19 = (CMTime *)*((_QWORD *)this + 1);
  lhs = v27;
  rhs = v19[1];
  CMTimeSubtract(&v31, &lhs, &rhs);
  v29 = v31;
  ma::SubtleMotionSegment::DetermineType(*((_QWORD *)this + 1));
  v20 = *(float *)(*((_QWORD *)this + 1) + 80);
  v21 = 1.0;
  if (v20 < 1.0)
    v21 = *(float *)(*((_QWORD *)this + 1) + 80);
  v22 = v20 > 0.0;
  v23 = 0.0;
  if (v22)
    v23 = v21;
  v28 = v23;
  lhs = start;
  rhs = a2->start;
  if (CMTimeCompare(&lhs, &rhs) < 0)
  {
    lhs = a2->start;
    rhs = start;
    CMTimeSubtract(&v27, &lhs, &rhs);
    rhs = v29;
    v31 = v27;
    CMTimeSubtract(&lhs, &rhs, &v31);
    v29 = lhs;
    start = a2->start;
  }
  if (!AddResultDictionary(&start, &v29, &v28, 0, 0, Mutable))
  {
    if (Mutable)
      Copy = CFArrayCreateCopy(a4, Mutable);
    else
      Copy = 0;
    *a5 = Copy;
  }
LABEL_29:
  if (Mutable)
    CFRelease(Mutable);
  return 0;
}

uint64_t MotionAnalysis<ma::SubtleMotionSegment>::RemoveSegment(CFArrayRef *a1, unsigned int a2)
{
  const __CFArray *v4;
  int Count;
  uint64_t result;
  uint64_t v7;

  v4 = *a1;
  if (v4)
    Count = CFArrayGetCount(v4);
  else
    Count = 0;
  result = 4294967246;
  if ((a2 & 0x80000000) == 0 && Count > (int)a2)
  {
    v7 = *(_QWORD *)CFArrayGetValueAtIndex(*a1, a2);
    if (v7)
      (*(void (**)(uint64_t))(*(_QWORD *)v7 + 8))(v7);
    Vector<ma::SubtleMotionSegment *>::Remove(a1, a2);
    return 0;
  }
  return result;
}

void Vector<ma::SubtleMotionSegment *>::Remove(CFArrayRef *a1, CFIndex a2)
{
  const void *ValueAtIndex;

  ValueAtIndex = CFArrayGetValueAtIndex(*a1, a2);
  if (ValueAtIndex)
    MEMORY[0x1BCCA12BC](ValueAtIndex, 0x20C4093837F09);
  CFArrayRemoveValueAtIndex(*a1, a2);
}

void sub_1B6C71CF8(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;

  v5 = v4;

  _Unwind_Resume(a1);
}

void sub_1B6C71DFC(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1B6C71EF8(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1B6C71F68(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1B6C72030(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1B6C7250C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;

  _Unwind_Resume(a1);
}

void sub_1B6C7295C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_1B6C72EBC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  void *v15;

  _Unwind_Resume(a1);
}

uint64_t ma::RegressionTree::GetDelta(ma::RegressionTree *this, float *a2)
{
  int v2;
  int v3;

  v2 = 0;
  v3 = 4;
  do
  {
    v2 = ((__PAIR64__(2 * v2, *((float *)this + 2 * v2 + 1))
         - COERCE_UNSIGNED_INT(a2[*((__int16 *)this + 4 * v2)] - a2[*((__int16 *)this + 4 * v2 + 1)])) >> 32)
       + 2;
    --v3;
  }
  while (v3);
  return (uint64_t)this + 272 * v2 - 3952;
}

uint64_t ma::RegressionTree::SetNode(uint64_t this, int a2, __int16 a3, __int16 a4, float a5)
{
  uint64_t v5;

  v5 = this + 8 * a2;
  *(_WORD *)v5 = a3;
  *(_WORD *)(v5 + 2) = a4;
  *(float *)(v5 + 4) = a5;
  return this;
}

void *ma::RegressionTree::SetLeaf(uint64_t a1, int a2, int a3, void *__src)
{
  return memcpy((void *)(a1 + 4 * a2 * a3 + 128), __src, 4 * a3);
}

void sub_1B6C7354C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1B6C73700(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_1B6C73BCC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, const void *a15, const void *a16, __int16 a17, char a18, char a19)
{
  CVPixelBufferLock::~CVPixelBufferLock((CVPixelBufferLock *)&a9);
  CVPixelBufferLock::~CVPixelBufferLock((CVPixelBufferLock *)&a17);
  CVPixelBufferLock::~CVPixelBufferLock((CVPixelBufferLock *)&a12);
  CF<opaqueCMSampleBuffer *>::~CF(&a15);
  CF<opaqueCMSampleBuffer *>::~CF(&a16);
  _Unwind_Resume(a1);
}

void CVPixelBufferLock::CVPixelBufferLock(CVPixelBufferLock *this, CVPixelBufferRef pixelBuffer, CVPixelBufferLockFlags lockFlags)
{
  CVReturn v4;
  _BOOL8 v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  *(_DWORD *)this = 0;
  *((_QWORD *)this + 1) = pixelBuffer;
  *((_QWORD *)this + 2) = lockFlags;
  if (pixelBuffer)
  {
    v4 = CVPixelBufferLockBaseAddress(pixelBuffer, lockFlags);
    *(_DWORD *)this = v4;
    if (v4)
    {
      if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
        CVPixelBufferLock::CVPixelBufferLock();
    }
  }
  else
  {
    v5 = os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR);
    if (v5)
      -[VCPVideoCNNAnalyzer copyImage:withChannels:settling:].cold.1(v5, v6, v7, v8, v9, v10, v11, v12);
    *(_DWORD *)this = -50;
  }
}

void sub_1B6C73E08(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1B6C7404C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  void *v8;
  void *v9;
  const void *v11;
  va_list va;
  va_list va1;

  va_start(va1, a8);
  va_start(va, a8);
  v11 = va_arg(va1, const void *);

  CF<opaqueCMSampleBuffer *>::~CF((const void **)va);
  CF<opaqueCMSampleBuffer *>::~CF((const void **)va1);
  _Unwind_Resume(a1);
}

void sub_1B6C742A4(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1B6C74508(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  CF<opaqueCMSampleBuffer *>::~CF((const void **)va);
  _Unwind_Resume(a1);
}

void sub_1B6C745F4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{

  _Unwind_Resume(a1);
}

void sub_1B6C746E4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  void *v5;
  const void *v7;
  va_list va;
  va_list va1;

  va_start(va1, a5);
  va_start(va, a5);
  v7 = va_arg(va1, const void *);
  CF<opaqueCMSampleBuffer *>::~CF((const void **)va);
  CF<opaqueCMSampleBuffer *>::~CF((const void **)va1);

  _Unwind_Resume(a1);
}

void sub_1B6C7486C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

uint64_t MADProtoAssetOCRAnalysisReadFrom(uint64_t a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  char v14;
  BOOL v15;
  uint64_t v16;
  int v17;
  uint64_t v19;
  uint64_t v20;
  uint64_t result;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  char v25;
  unsigned int v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  char v31;
  uint64_t v32;
  unint64_t v33;
  void *v34;
  uint64_t v35;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) < *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
  {
    v7 = (int *)MEMORY[0x1E0D82BB8];
    do
    {
      if (*(_BYTE *)(a2 + *v5))
        break;
      v8 = 0;
      v9 = 0;
      v10 = 0;
      while (1)
      {
        v11 = *v3;
        v12 = *(_QWORD *)(a2 + v11);
        v13 = v12 + 1;
        if (v12 == -1 || v13 > *(_QWORD *)(a2 + *v4))
          break;
        v14 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
        *(_QWORD *)(a2 + v11) = v13;
        v10 |= (unint64_t)(v14 & 0x7F) << v8;
        if ((v14 & 0x80) == 0)
          goto LABEL_12;
        v8 += 7;
        v15 = v9++ >= 9;
        if (v15)
        {
          v10 = 0;
          v16 = *v5;
          v17 = *(unsigned __int8 *)(a2 + v16);
          goto LABEL_14;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
      v16 = *v5;
      v17 = *(unsigned __int8 *)(a2 + v16);
      if (*(_BYTE *)(a2 + v16))
        v10 = 0;
LABEL_14:
      if (v17 || (v10 & 7) == 4)
        break;
      switch((v10 >> 3))
      {
        case 1u:
          PBReaderReadString();
          v19 = objc_claimAutoreleasedReturnValue();
          v20 = 32;
          goto LABEL_37;
        case 2u:
          v22 = *v3;
          v23 = *(_QWORD *)(a2 + v22);
          if (v23 <= 0xFFFFFFFFFFFFFFF7 && v23 + 8 <= *(_QWORD *)(a2 + *v4))
          {
            v24 = *(_QWORD *)(*(_QWORD *)(a2 + *v7) + v23);
            *(_QWORD *)(a2 + v22) = v23 + 8;
          }
          else
          {
            *(_BYTE *)(a2 + v16) = 1;
            v24 = 0;
          }
          v35 = 16;
          goto LABEL_46;
        case 3u:
          v25 = 0;
          v26 = 0;
          v27 = 0;
          break;
        case 4u:
          v32 = *v3;
          v33 = *(_QWORD *)(a2 + v32);
          if (v33 <= 0xFFFFFFFFFFFFFFF7 && v33 + 8 <= *(_QWORD *)(a2 + *v4))
          {
            v24 = *(_QWORD *)(*(_QWORD *)(a2 + *v7) + v33);
            *(_QWORD *)(a2 + v32) = v33 + 8;
          }
          else
          {
            *(_BYTE *)(a2 + v16) = 1;
            v24 = 0;
          }
          v35 = 8;
LABEL_46:
          *(_QWORD *)(a1 + v35) = v24;
          continue;
        case 5u:
          PBReaderReadData();
          v19 = objc_claimAutoreleasedReturnValue();
          v20 = 40;
          goto LABEL_37;
        case 6u:
          PBReaderReadData();
          v19 = objc_claimAutoreleasedReturnValue();
          v20 = 48;
LABEL_37:
          v34 = *(void **)(a1 + v20);
          *(_QWORD *)(a1 + v20) = v19;

          continue;
        default:
          result = PBReaderSkipValueWithTag();
          if (!(_DWORD)result)
            return result;
          continue;
      }
      while (1)
      {
        v28 = *v3;
        v29 = *(_QWORD *)(a2 + v28);
        v30 = v29 + 1;
        if (v29 == -1 || v30 > *(_QWORD *)(a2 + *v4))
          break;
        v31 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v29);
        *(_QWORD *)(a2 + v28) = v30;
        v27 |= (unint64_t)(v31 & 0x7F) << v25;
        if ((v31 & 0x80) == 0)
          goto LABEL_39;
        v25 += 7;
        v15 = v26++ >= 9;
        if (v15)
        {
          LODWORD(v27) = 0;
          goto LABEL_41;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_39:
      if (*(_BYTE *)(a2 + *v5))
        LODWORD(v27) = 0;
LABEL_41:
      *(_DWORD *)(a1 + 24) = v27;
    }
    while (*(_QWORD *)(a2 + *v3) < *(_QWORD *)(a2 + *v4));
  }
  return *(_BYTE *)(a2 + *v5) == 0;
}

void sub_1B6C75DF0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  va_list va;

  va_start(va, a3);

  CVPixelBufferLock::~CVPixelBufferLock((CVPixelBufferLock *)va);
  _Unwind_Resume(a1);
}

__n128 ma::MovingObjectAnalysis::MovingObjectAnalysis(ma::MovingObjectAnalysis *this)
{
  uint64_t v1;
  __n128 result;

  *((_QWORD *)this + 1) = 0;
  *((_QWORD *)this + 2) = 0;
  *(_QWORD *)this = 0;
  v1 = MEMORY[0x1E0CA2E68];
  result = *(__n128 *)MEMORY[0x1E0CA2E68];
  *(_OWORD *)((char *)this + 24) = *MEMORY[0x1E0CA2E68];
  *((_QWORD *)this + 5) = *(_QWORD *)(v1 + 16);
  *((_BYTE *)this + 48) = 1;
  *(_QWORD *)((char *)this + 52) = 0;
  return result;
}

uint64_t ma::MovingObjectAnalysis::Initialize(uint64_t this)
{
  *(_DWORD *)(this + 56) = 0;
  return MotionAnalysis<ma::MovingObjectSegment>::Initialize(this);
}

uint64_t MotionAnalysis<ma::MovingObjectSegment>::Initialize(uint64_t a1)
{
  ma::MovingObjectSegment *v3;
  ma::MovingObjectSegment *v4;

  if (*(_QWORD *)(a1 + 16) || *(_QWORD *)(a1 + 8))
    return 4294967246;
  *(_QWORD *)(a1 + 16) = CFArrayCreateMutable(0, 0, MEMORY[0x1E0C9B378]);
  v3 = (ma::MovingObjectSegment *)operator new(0x60uLL, MEMORY[0x1E0DE4E10]);
  if (v3)
  {
    v4 = v3;
    ma::MovingObjectSegment::MovingObjectSegment(v3);
    *(_QWORD *)(a1 + 8) = v4;
    if (*(_QWORD *)(a1 + 16))
      return 0;
    else
      return 4294967188;
  }
  else
  {
    *(_QWORD *)(a1 + 8) = 0;
    return 4294967188;
  }
}

void sub_1B6C75F54(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1BCCA12A4](v1, MEMORY[0x1E0DE4E10]);
  _Unwind_Resume(a1);
}

uint64_t ma::MovingObjectAnalysis::ProcessFrame(ma::MovingObjectAnalysis *this, Frame *a2)
{
  ma::Segment *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t result;
  uint64_t v8;
  __int128 v9;
  __int128 v10;
  uint64_t v11;
  CMTime v12;
  CMTime rhs;
  CMTime lhs;
  CMTime v15;
  CMTime duration;
  CMTime start;
  CMTimeRange v18;
  CMTime v19;

  if (*((_BYTE *)this + 48))
  {
    v4 = (ma::Segment *)*((_QWORD *)this + 1);
    v19 = *(CMTime *)((_BYTE *)this + 1);
    ma::Segment::SetStart(v4, 0, &v19);
    v5 = MEMORY[0x1E0CA2E68];
    v6 = *((_QWORD *)this + 1);
    *(_OWORD *)(v6 + 48) = *MEMORY[0x1E0CA2E68];
    *(_QWORD *)(v6 + 64) = *(_QWORD *)(v5 + 16);
    *((_BYTE *)this + 48) = 0;
  }
  if (!a2->frame_idx_)
    return 0;
  if (!ma::MovingObjectAnalysis::DecideSegmentPoint(this, *((const ma::MovingObjectSegment **)this + 1), a2))
  {
    if (*((_DWORD *)this + 14))
    {
      ma::MovingObjectSegment::UpdateStats(*((ma::MovingObjectSegment **)this + 1), (const ma::MotionResult *)&a2->acc_var_.z_);
      lhs = *(CMTime *)(&a2->frame_idx_ + 1);
      rhs = *(CMTime *)((char *)&a2->timestamp_.epoch + 4);
      CMTimeAdd(&v15, &lhs, &rhs);
      v12 = *(CMTime *)(*((_QWORD *)this + 1) + 24);
      CMTimeSubtract(&v18.start, &v15, &v12);
      result = 0;
      v11 = *((_QWORD *)this + 1);
      *(_OWORD *)(v11 + 48) = *(_OWORD *)&v18.start.value;
      *(_QWORD *)(v11 + 64) = v18.start.epoch;
      return result;
    }
    return 0;
  }
  result = ma::MovingObjectAnalysis::AddSegment((const __CFArray **)this, (const ma::Frame *)a2, 0);
  if (!(_DWORD)result)
  {
    ma::MovingObjectSegment::ResetStats(*((ma::MovingObjectSegment **)this + 1), (const ma::MotionResult *)&a2->acc_var_.z_);
    start = *(CMTime *)(&a2->frame_idx_ + 1);
    duration = *(CMTime *)((char *)&a2->timestamp_.epoch + 4);
    CMTimeRangeMake(&v18, &start, &duration);
    result = 0;
    v8 = *((_QWORD *)this + 1);
    v10 = *(_OWORD *)&v18.start.epoch;
    v9 = *(_OWORD *)&v18.duration.timescale;
    *(_OWORD *)(v8 + 24) = *(_OWORD *)&v18.start.value;
    *(_OWORD *)(v8 + 40) = v10;
    *(_OWORD *)(v8 + 56) = v9;
  }
  return result;
}

BOOL ma::MovingObjectAnalysis::DecideSegmentPoint(ma::MovingObjectAnalysis *this, const ma::MovingObjectSegment *a2, const Frame *a3)
{
  int v5;
  _BOOL8 result;
  Float64 Seconds;
  uint64_t v8;
  ma::Segment *v9;
  int frame_idx;
  uint64_t v11;
  uint64_t v12;
  CMTime v13;
  CMTime v14;

  v5 = *((_DWORD *)this + 14);
  result = ma::MovingObjectSegment::ExistObject(a2, (const ma::MotionResult *)&a3->acc_var_.z_);
  if (!v5)
  {
    if (!result)
      return result;
    v9 = (ma::Segment *)*((_QWORD *)this + 1);
    frame_idx = a3->frame_idx_;
    v14 = *(CMTime *)(&a3->frame_idx_ + 1);
    ma::Segment::SetStart(v9, frame_idx, &v14);
    v8 = 0;
    v11 = MEMORY[0x1E0CA2E68];
    v12 = *((_QWORD *)this + 1);
    *(_OWORD *)(v12 + 48) = *MEMORY[0x1E0CA2E68];
    *(_QWORD *)(v12 + 64) = *(_QWORD *)(v11 + 16);
    LODWORD(result) = 1;
    goto LABEL_7;
  }
  if (!result
    || (v13 = *(CMTime *)(*((_QWORD *)this + 1) + 48), Seconds = CMTimeGetSeconds(&v13), result = 0, Seconds >= 1.0))
  {
    v8 = 1;
LABEL_7:
    *((_DWORD *)this + 14) = result;
    return v8;
  }
  return result;
}

uint64_t ma::MovingObjectAnalysis::AddSegment(const __CFArray **this, const ma::Frame *a2, int a3)
{
  const __CFArray *v6;
  ma::Segment *v7;
  int Count;
  int v10;
  CMTime v12;
  CMTime lhs;
  CMTime v14;

  v6 = *this;
  v7 = this[1];
  if (v6)
    Count = CFArrayGetCount(v6);
  else
    Count = 0;
  v10 = *(_DWORD *)a2 + a3;
  lhs = *(CMTime *)((char *)a2 + 4);
  v12 = *(CMTime *)((char *)a2 + 28);
  CMTimeAdd(&v14, &lhs, &v12);
  ma::Segment::Finalize(v7, Count, v10, &v14);
  return MotionAnalysis<ma::MovingObjectSegment>::AddSegment((uint64_t)this);
}

uint64_t ma::MovingObjectAnalysis::FinalizeSegments(CFArrayRef *this, const ma::Frame *a2)
{
  uint64_t result;

  if (!*((_DWORD *)this + 14))
    return ma::MovingObjectAnalysis::StoreSegmentResult(this);
  result = ma::MovingObjectAnalysis::AddSegment(this, a2, 1);
  if (!(_DWORD)result)
    return ma::MovingObjectAnalysis::StoreSegmentResult(this);
  return result;
}

uint64_t ma::MovingObjectAnalysis::StoreSegmentResult(CFArrayRef *this)
{
  CFIndex i;
  const __CFArray *v3;
  ma::MovingObjectAnalysis *ValueAtIndex;
  uint64_t result;
  __CFDictionary *v6;
  __CFDictionary *v7;
  CMTime time;
  CMTime v9;
  CMTime v10;

  for (i = 0; ; ++i)
  {
    v3 = *this;
    if (*this)
      LODWORD(v3) = CFArrayGetCount(v3);
    if (i >= (int)v3)
      break;
    v10 = *(CMTime *)(*(_QWORD *)CFArrayGetValueAtIndex(*this, i) + 24);
    v9 = *(CMTime *)(*(_QWORD *)CFArrayGetValueAtIndex(*this, i) + 48);
    time = v9;
    if (CMTimeGetSeconds(&time) >= 1.0)
    {
      v7 = 0;
      ValueAtIndex = (ma::MovingObjectAnalysis *)CFArrayGetValueAtIndex(*this, i);
      result = ma::MovingObjectAnalysis::GenerateAttributes(ValueAtIndex, *(const ma::MovingObjectSegment **)ValueAtIndex, &v7);
      if ((_DWORD)result)
        return result;
      v6 = v7;
      result = AddResultDictionary(&v10, &v9, 0, 0, v7, this[2]);
      if ((_DWORD)result)
        return result;
      if (v6)
        CFRelease(v6);
    }
  }
  return 0;
}

uint64_t ma::MovingObjectAnalysis::GenerateAttributes(ma::MovingObjectAnalysis *this, const ma::MovingObjectSegment *a2, const __CFDictionary **a3)
{
  const __CFArray *v4;
  __CFDictionary *Mutable;
  CFMutableArrayRef v7;
  __CFArray *v8;
  BOOL v9;
  char v10;
  uint64_t v11;
  CFIndex i;
  const __CFArray *v13;
  ma::Object **ValueAtIndex;
  const void *v15;
  CFStringRef v16;
  CFStringRef v17;
  const __CFArray *v18;

  v4 = (const __CFArray *)*((_QWORD *)a2 + 10);
  if (!v4)
  {
    v11 = 0;
LABEL_10:
    Mutable = 0;
    goto LABEL_29;
  }
  if (!CFArrayGetCount(v4))
  {
    Mutable = 0;
    v8 = 0;
LABEL_20:
    v11 = 0;
    v10 = 1;
    goto LABEL_21;
  }
  Mutable = CFDictionaryCreateMutable(0, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  v7 = CFArrayCreateMutable(0, 0, MEMORY[0x1E0C9B378]);
  v8 = v7;
  if (Mutable)
    v9 = v7 == 0;
  else
    v9 = 1;
  if (!v9)
  {
    for (i = 0; ; ++i)
    {
      v13 = (const __CFArray *)*((_QWORD *)a2 + 10);
      if (v13)
        LODWORD(v13) = CFArrayGetCount(v13);
      if (i >= (int)v13)
        break;
      if (!*(_BYTE *)(*(_QWORD *)CFArrayGetValueAtIndex(*((CFArrayRef *)a2 + 10), i) + 92))
      {
        ValueAtIndex = (ma::Object **)CFArrayGetValueAtIndex(*((CFArrayRef *)a2 + 10), i);
        ma::Object::MapBoundingBox(*ValueAtIndex);
      }
      v15 = CFArrayGetValueAtIndex(*((CFArrayRef *)a2 + 10), i);
      v16 = CFStringCreateWithFormat(0, 0, CFSTR("{{%.*g, %.*g}, {%.*g, %.*g}}"), 17, *(_QWORD *)(*(_QWORD *)v15 + 8), 17, *(_QWORD *)(*(_QWORD *)v15 + 16), 17, *(_QWORD *)(*(_QWORD *)v15 + 24), 17, *(_QWORD *)(*(_QWORD *)v15 + 32));
      if (!v16)
        goto LABEL_8;
      v17 = v16;
      CFArrayAppendValue(v8, v16);
      CFRelease(v17);
    }
    CFDictionarySetValue(Mutable, CFSTR("objectBounds"), v8);
    goto LABEL_20;
  }
LABEL_8:
  v10 = 0;
  v11 = 4294967188;
LABEL_21:
  v18 = (const __CFArray *)*((_QWORD *)a2 + 10);
  if (v18 && CFArrayGetCount(v18))
  {
    if (v8)
      CFRelease(v8);
    if ((v10 & 1) != 0)
    {
      v11 = 0;
      goto LABEL_29;
    }
    if (!Mutable)
      goto LABEL_29;
    CFRelease(Mutable);
    goto LABEL_10;
  }
LABEL_29:
  *a3 = Mutable;
  return v11;
}

uint64_t ma::MovingObjectAnalysis::CopyProperty(ma::MovingObjectAnalysis *this, CFTypeRef cf1, const __CFAllocator *a3, CFArrayRef *a4)
{
  const __CFArray *v7;
  CFArrayRef Copy;

  if (CFEqual(cf1, CFSTR("MovingObjectsResults")))
  {
    v7 = (const __CFArray *)*((_QWORD *)this + 2);
    if (v7)
      Copy = CFArrayCreateCopy(a3, v7);
    else
      Copy = 0;
    *a4 = Copy;
  }
  return 0;
}

uint64_t MotionAnalysis<ma::MovingObjectSegment>::AddSegment(uint64_t a1)
{
  ma::MovingObjectSegment *v2;
  ma::MovingObjectSegment *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;

  v2 = (ma::MovingObjectSegment *)operator new(0x60uLL, MEMORY[0x1E0DE4E10]);
  if (!v2)
    return 4294967188;
  v3 = v2;
  ma::MovingObjectSegment::MovingObjectSegment(v2);
  v4 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)(a1 + 8) = v3;
  v7 = v4;
  v5 = Vector<ma::Object *>::PushBack((CFMutableArrayRef *)a1, &v7);
  if ((_DWORD)v5 && v7)
    (*(void (**)(uint64_t))(*(_QWORD *)v7 + 8))(v7);
  return v5;
}

void sub_1B6C76678(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1BCCA12A4](v1, MEMORY[0x1E0DE4E10]);
  _Unwind_Resume(a1);
}

void sub_1B6C76718(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1B6C769DC(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  _Unwind_Resume(a1);
}

void sub_1B6C76BB8(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_1B6C76C60(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

uint64_t VCPProtoLivePhotoKeyFrameResultReadFrom(uint64_t a1, uint64_t a2)
{
  char *v2;
  int *v4;
  int *v5;
  int *v6;
  int *v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  char v15;
  uint64_t v17;
  int v18;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t result;
  uint64_t v25;
  unint64_t v26;
  int v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  unint64_t v31;
  uint64_t v32;
  unint64_t v33;
  uint64_t v34;
  unint64_t v35;
  uint64_t v36;
  unint64_t v37;
  uint64_t v38;
  unint64_t v39;
  VCPProtoLivePhotoKeyFrameFaceResult *v40;
  uint64_t v41;
  unint64_t v42;
  uint64_t v43;
  unint64_t v44;
  uint64_t v45;
  unint64_t v46;
  uint64_t v47;

  v4 = (int *)MEMORY[0x1E0D82BF0];
  v5 = (int *)MEMORY[0x1E0D82BD8];
  v6 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) >= *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
    return *(_BYTE *)(a2 + *v6) == 0;
  v8 = (int *)MEMORY[0x1E0D82BB8];
  while (2)
  {
    if (*(_BYTE *)(a2 + *v6))
      return *(_BYTE *)(a2 + *v6) == 0;
    v9 = 0;
    v10 = 0;
    v11 = 0;
    while (1)
    {
      v12 = *v4;
      v13 = *(_QWORD *)(a2 + v12);
      v14 = v13 + 1;
      if (v13 == -1 || v14 > *(_QWORD *)(a2 + *v5))
        break;
      v15 = *(_BYTE *)(*(_QWORD *)(a2 + *v8) + v13);
      *(_QWORD *)(a2 + v12) = v14;
      v11 |= (unint64_t)(v15 & 0x7F) << v9;
      if ((v15 & 0x80) == 0)
        goto LABEL_12;
      v9 += 7;
      if (v10++ >= 9)
      {
        v11 = 0;
        v17 = *v6;
        v18 = *(unsigned __int8 *)(a2 + v17);
        goto LABEL_14;
      }
    }
    *(_BYTE *)(a2 + *v6) = 1;
LABEL_12:
    v17 = *v6;
    v18 = *(unsigned __int8 *)(a2 + v17);
    if (*(_BYTE *)(a2 + v17))
      v11 = 0;
LABEL_14:
    if (v18 || (v11 & 7) == 4)
      return *(_BYTE *)(a2 + *v6) == 0;
    switch((v11 >> 3))
    {
      case 1u:
        v20 = *v4;
        v21 = *(_QWORD *)(a2 + v20);
        if (v21 <= 0xFFFFFFFFFFFFFFF7 && v21 + 8 <= *(_QWORD *)(a2 + *v5))
        {
          v22 = *(_QWORD *)(*(_QWORD *)(a2 + *v8) + v21);
          *(_QWORD *)(a2 + v20) = v21 + 8;
        }
        else
        {
          *(_BYTE *)(a2 + v17) = 1;
          v22 = 0;
        }
        *(_QWORD *)(a1 + 8) = v22;
        goto LABEL_80;
      case 2u:
        v25 = *v4;
        v26 = *(_QWORD *)(a2 + v25);
        if (v26 <= 0xFFFFFFFFFFFFFFFBLL && v26 + 4 <= *(_QWORD *)(a2 + *v5))
        {
          v27 = *(_DWORD *)(*(_QWORD *)(a2 + *v8) + v26);
          *(_QWORD *)(a2 + v25) = v26 + 4;
        }
        else
        {
          *(_BYTE *)(a2 + v17) = 1;
          v27 = 0;
        }
        v47 = 52;
        goto LABEL_79;
      case 3u:
        v28 = *v4;
        v29 = *(_QWORD *)(a2 + v28);
        if (v29 <= 0xFFFFFFFFFFFFFFFBLL && v29 + 4 <= *(_QWORD *)(a2 + *v5))
        {
          v27 = *(_DWORD *)(*(_QWORD *)(a2 + *v8) + v29);
          *(_QWORD *)(a2 + v28) = v29 + 4;
        }
        else
        {
          *(_BYTE *)(a2 + v17) = 1;
          v27 = 0;
        }
        v47 = 64;
        goto LABEL_79;
      case 4u:
        v30 = *v4;
        v31 = *(_QWORD *)(a2 + v30);
        if (v31 <= 0xFFFFFFFFFFFFFFFBLL && v31 + 4 <= *(_QWORD *)(a2 + *v5))
        {
          v27 = *(_DWORD *)(*(_QWORD *)(a2 + *v8) + v31);
          *(_QWORD *)(a2 + v30) = v31 + 4;
        }
        else
        {
          *(_BYTE *)(a2 + v17) = 1;
          v27 = 0;
        }
        v47 = 44;
        goto LABEL_79;
      case 5u:
        v32 = *v4;
        v33 = *(_QWORD *)(a2 + v32);
        if (v33 <= 0xFFFFFFFFFFFFFFFBLL && v33 + 4 <= *(_QWORD *)(a2 + *v5))
        {
          v27 = *(_DWORD *)(*(_QWORD *)(a2 + *v8) + v33);
          *(_QWORD *)(a2 + v32) = v33 + 4;
        }
        else
        {
          *(_BYTE *)(a2 + v17) = 1;
          v27 = 0;
        }
        v47 = 20;
        goto LABEL_79;
      case 6u:
        v34 = *v4;
        v35 = *(_QWORD *)(a2 + v34);
        if (v35 <= 0xFFFFFFFFFFFFFFFBLL && v35 + 4 <= *(_QWORD *)(a2 + *v5))
        {
          v27 = *(_DWORD *)(*(_QWORD *)(a2 + *v8) + v35);
          *(_QWORD *)(a2 + v34) = v35 + 4;
        }
        else
        {
          *(_BYTE *)(a2 + v17) = 1;
          v27 = 0;
        }
        v47 = 48;
        goto LABEL_79;
      case 7u:
        v36 = *v4;
        v37 = *(_QWORD *)(a2 + v36);
        if (v37 <= 0xFFFFFFFFFFFFFFFBLL && v37 + 4 <= *(_QWORD *)(a2 + *v5))
        {
          v27 = *(_DWORD *)(*(_QWORD *)(a2 + *v8) + v37);
          *(_QWORD *)(a2 + v36) = v37 + 4;
        }
        else
        {
          *(_BYTE *)(a2 + v17) = 1;
          v27 = 0;
        }
        v47 = 60;
        goto LABEL_79;
      case 8u:
        v38 = *v4;
        v39 = *(_QWORD *)(a2 + v38);
        if (v39 <= 0xFFFFFFFFFFFFFFFBLL && v39 + 4 <= *(_QWORD *)(a2 + *v5))
        {
          v27 = *(_DWORD *)(*(_QWORD *)(a2 + *v8) + v39);
          *(_QWORD *)(a2 + v38) = v39 + 4;
        }
        else
        {
          *(_BYTE *)(a2 + v17) = 1;
          v27 = 0;
        }
        v47 = 56;
        goto LABEL_79;
      case 9u:
        v40 = objc_alloc_init(VCPProtoLivePhotoKeyFrameFaceResult);
        objc_msgSend((id)a1, "addFaceResults:", v40);
        if (PBReaderPlaceMark()
          && (VCPProtoLivePhotoKeyFrameFaceResultReadFrom((uint64_t)v40, a2) & 1) != 0)
        {
          PBReaderRecallMark();

          v2 = &jpt_1B6C77378;
          v6 = (int *)MEMORY[0x1E0D82BC8];
LABEL_80:
          if (*(_QWORD *)(a2 + *v4) >= *(_QWORD *)(a2 + *v5))
            return *(_BYTE *)(a2 + *v6) == 0;
          continue;
        }

        return 0;
      case 0xAu:
        *(_BYTE *)(a1 + 68) |= 2u;
        v41 = *v4;
        v42 = *(_QWORD *)(a2 + v41);
        if (v42 <= 0xFFFFFFFFFFFFFFFBLL && v42 + 4 <= *(_QWORD *)(a2 + *v5))
        {
          v27 = *(_DWORD *)(*(_QWORD *)(a2 + *v8) + v42);
          *(_QWORD *)(a2 + v41) = v42 + 4;
        }
        else
        {
          *(_BYTE *)(a2 + *v6) = 1;
          v27 = 0;
        }
        v47 = 40;
        goto LABEL_79;
      case 0xBu:
        *(_BYTE *)(a1 + 68) |= 1u;
        v43 = *v4;
        v44 = *(_QWORD *)(a2 + v43);
        if (v44 <= 0xFFFFFFFFFFFFFFFBLL && v44 + 4 <= *(_QWORD *)(a2 + *v5))
        {
          v27 = *(_DWORD *)(*(_QWORD *)(a2 + *v8) + v44);
          *(_QWORD *)(a2 + v43) = v44 + 4;
        }
        else
        {
          *(_BYTE *)(a2 + *v6) = 1;
          v27 = 0;
        }
        v47 = 16;
        goto LABEL_79;
      case 0xCu:
        v45 = *v4;
        v46 = *(_QWORD *)(a2 + v45);
        if (v46 <= 0xFFFFFFFFFFFFFFFBLL && v46 + 4 <= *(_QWORD *)(a2 + *v5))
        {
          v27 = *(_DWORD *)(*(_QWORD *)(a2 + *v8) + v46);
          *(_QWORD *)(a2 + v45) = v46 + 4;
        }
        else
        {
          *(_BYTE *)(a2 + v17) = 1;
          v27 = 0;
        }
        v47 = 24;
LABEL_79:
        *(_DWORD *)(a1 + v47) = v27;
        goto LABEL_80;
      default:
        v23 = v2;
        result = PBReaderSkipValueWithTag();
        v2 = v23;
        if (!(_DWORD)result)
          return result;
        goto LABEL_80;
    }
  }
}

void sub_1B6C78A28(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_1B6C78C64(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1B6C78F14(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

ma::SubjectMotionAnalysis *ma::SubjectMotionAnalysis::SubjectMotionAnalysis(ma::SubjectMotionAnalysis *this)
{
  uint64_t v2;

  *(_QWORD *)this = 0;
  *((_QWORD *)this + 1) = 0;
  *((_QWORD *)this + 2) = 0;
  v2 = MEMORY[0x1E0CA2E68];
  *(_OWORD *)((char *)this + 24) = *MEMORY[0x1E0CA2E68];
  *((_QWORD *)this + 5) = *(_QWORD *)(v2 + 16);
  *((_BYTE *)this + 48) = 1;
  *((_DWORD *)this + 13) = 0;
  ma::HinkleyDetector::HinkleyDetector((uint64_t)this + 56);
  return this;
}

void sub_1B6C78F80(_Unwind_Exception *a1)
{
  uint64_t v1;

  MotionAnalysis<ma::ObstructionSegment>::~MotionAnalysis(v1);
  _Unwind_Resume(a1);
}

uint64_t ma::SubjectMotionAnalysis::Initialize(ma::SubjectMotionAnalysis *this)
{
  ma::HinkleyDetector::Initialize((uint64_t)this + 56, 0.01, 0.15, 30);
  return MotionAnalysis<ma::SubjectMotionSegment>::Initialize((uint64_t)this);
}

uint64_t MotionAnalysis<ma::SubjectMotionSegment>::Initialize(uint64_t a1)
{
  ma::SubjectMotionSegment *v3;
  ma::SubjectMotionSegment *v4;

  if (*(_QWORD *)(a1 + 16) || *(_QWORD *)(a1 + 8))
    return 4294967246;
  *(_QWORD *)(a1 + 16) = CFArrayCreateMutable(0, 0, MEMORY[0x1E0C9B378]);
  v3 = (ma::SubjectMotionSegment *)operator new(0x60uLL, MEMORY[0x1E0DE4E10]);
  if (v3)
  {
    v4 = v3;
    ma::SubjectMotionSegment::SubjectMotionSegment(v3);
    *(_QWORD *)(a1 + 8) = v4;
    if (*(_QWORD *)(a1 + 16))
      return 0;
    else
      return 4294967188;
  }
  else
  {
    *(_QWORD *)(a1 + 8) = 0;
    return 4294967188;
  }
}

void sub_1B6C7905C(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1BCCA12A4](v1, MEMORY[0x1E0DE4E10]);
  _Unwind_Resume(a1);
}

uint64_t ma::SubjectMotionAnalysis::ProcessFrame(ma::SubjectMotionAnalysis *this, Frame *a2)
{
  ma::Segment *v4;
  uint64_t result;
  ma::Segment *v6;
  int frame_idx;
  CMTime v8;
  CMTime v9;

  if (a2->frame_idx_ < 3 || *((_BYTE *)this + 48))
  {
    ma::SubjectMotionSegment::ResetStats(*((_QWORD *)this + 1), (const ma::MotionResult *)&a2->acc_var_.z_);
    v4 = (ma::Segment *)*((_QWORD *)this + 1);
    v9 = *(CMTime *)((_BYTE *)this + 1);
    ma::Segment::SetStart(v4, 0, &v9);
    result = 0;
    *((_BYTE *)this + 48) = 0;
    return result;
  }
  if (!LOBYTE(a2->motion_result_.action_blocks_))
    return 0;
  if (!ma::SubjectMotionAnalysis::DecideSegmentPoint(this, *((const ma::SubjectMotionSegment **)this + 1), a2))
  {
    ma::SubjectMotionSegment::UpdateStats(*((ma::SubjectMotionSegment **)this + 1), (const ma::MotionResult *)&a2->acc_var_.z_);
    return 0;
  }
  result = ma::SubjectMotionAnalysis::AddSegment((const __CFArray **)this, (const ma::Frame *)a2, 0);
  if (!(_DWORD)result)
  {
    ma::SubjectMotionSegment::ResetStats(*((_QWORD *)this + 1), (const ma::MotionResult *)&a2->acc_var_.z_);
    v6 = (ma::Segment *)*((_QWORD *)this + 1);
    frame_idx = a2->frame_idx_;
    v8 = *(CMTime *)(&a2->frame_idx_ + 1);
    ma::Segment::SetStart(v6, frame_idx, &v8);
    return 0;
  }
  return result;
}

BOOL ma::SubjectMotionAnalysis::DecideSegmentPoint(ma::SubjectMotionAnalysis *this, const ma::SubjectMotionSegment *a2, const Frame *a3)
{
  int v4;
  _BOOL8 v6;
  _BOOL4 v7;

  v4 = *((_DWORD *)a2 + 5);
  if (!v4)
  {
    v6 = 0;
    goto LABEL_8;
  }
  if (*((_DWORD *)this + 16) >= a3->frame_idx_ - *((_DWORD *)a2 + 3))
  {
    v7 = 0;
    v6 = 0;
  }
  else
  {
    v6 = ma::HinkleyDetector::Test((ma::SubjectMotionAnalysis *)((char *)this + 56), (const float *)a2 + 19, &a3->motion_result_.confidence_[5], v4 + 1);
    v7 = *((_DWORD *)a2 + 5) == 0;
    if (v6)
      goto LABEL_8;
  }
  if (v7)
LABEL_8:
    ma::HinkleyDetector::ResetStats((ma::SubjectMotionAnalysis *)((char *)this + 56));
  return v6;
}

uint64_t ma::SubjectMotionAnalysis::AddSegment(const __CFArray **this, const ma::Frame *a2, int a3)
{
  const __CFArray *v6;
  ma::Segment *v7;
  int Count;
  _OWORD *v10;
  int v11;
  CMTime v13;
  CMTime lhs;
  CMTime v15;

  v6 = *this;
  v7 = this[1];
  if (v6)
    Count = CFArrayGetCount(v6);
  else
    Count = 0;
  v10 = (_OWORD *)((char *)a2 + 4);
  v11 = *(_DWORD *)a2;
  if (a3)
  {
    *(_OWORD *)&lhs.value = *v10;
    lhs.epoch = *(_QWORD *)((char *)a2 + 20);
    v13 = *(CMTime *)((char *)a2 + 28);
    CMTimeAdd(&v15, &lhs, &v13);
  }
  else
  {
    *(_OWORD *)&v15.value = *v10;
    v15.epoch = *(_QWORD *)((char *)a2 + 20);
  }
  ma::Segment::Finalize(v7, Count, v11 + a3, &v15);
  ma::SubjectMotionSegment::DetermineType((uint64_t)this[1]);
  return MotionAnalysis<ma::SubjectMotionSegment>::AddSegment((uint64_t)this);
}

uint64_t ma::SubjectMotionAnalysis::FinalizeSegments(const __CFArray **this, const ma::Frame *a2)
{
  uint64_t result;

  result = ma::SubjectMotionAnalysis::AddSegment(this, a2, 1);
  if (!(_DWORD)result)
  {
    ma::SubjectMotionAnalysis::MergeSameTypeSegments(this);
    return ma::SubjectMotionAnalysis::StoreSegmentResult(this);
  }
  return result;
}

uint64_t ma::SubjectMotionAnalysis::MergeSameTypeSegments(CFArrayRef *this)
{
  CFIndex i;
  const __CFArray *v3;
  uint64_t v4;
  const ma::SubjectMotionSegment *v6;
  ma::SubjectMotionSegment **ValueAtIndex;
  ma::SubjectMotionSegment *v8;
  int v9;

  for (i = 1; ; ++i)
  {
    v3 = *this;
    if (*this)
      LODWORD(v3) = CFArrayGetCount(v3);
    v4 = i;
    if (i >= (int)v3)
      break;
    while (v4-- >= 1)
    {
      if (*(_DWORD *)(*(_QWORD *)CFArrayGetValueAtIndex(*this, v4) + 16))
        goto LABEL_9;
    }
    LODWORD(v4) = i;
LABEL_9:
    v6 = *(const ma::SubjectMotionSegment **)CFArrayGetValueAtIndex(*this, (int)v4);
    ValueAtIndex = (ma::SubjectMotionSegment **)CFArrayGetValueAtIndex(*this, i);
    v8 = *ValueAtIndex;
    v9 = *((_DWORD *)*ValueAtIndex + 4);
    if (v9 && *((_DWORD *)v6 + 4) && *((_DWORD *)v8 + 2) != *((_DWORD *)v6 + 2))
    {
      if (*((_DWORD *)v8 + 18) == *((_DWORD *)v6 + 18))
      {
        ma::SubjectMotionSegment::Merge(*ValueAtIndex, v6);
      }
      else
      {
        if (v9 > 9)
          continue;
        ma::SubjectMotionSegment::Merge(v6, v8);
        v6 = v8;
      }
      ma::SubjectMotionSegment::Reset(v6);
    }
  }
  return 0;
}

uint64_t ma::SubjectMotionAnalysis::StoreSegmentResult(CFArrayRef *this)
{
  CFIndex i;
  const __CFArray *v3;
  uint64_t result;
  int v5;
  CMTime v6;
  CMTime v7;

  for (i = 0; ; ++i)
  {
    v3 = *this;
    if (*this)
      LODWORD(v3) = CFArrayGetCount(v3);
    if (i >= (int)v3)
      break;
    if (*(_DWORD *)(*(_QWORD *)CFArrayGetValueAtIndex(*this, i) + 16))
    {
      v7 = *(CMTime *)(*(_QWORD *)CFArrayGetValueAtIndex(*this, i) + 24);
      v6 = *(CMTime *)(*(_QWORD *)CFArrayGetValueAtIndex(*this, i) + 48);
      v5 = 0;
      v5 = (*(_DWORD *)(*(_QWORD *)CFArrayGetValueAtIndex(*this, i) + 72) > 0) << 17;
      result = AddResultDictionary(&v7, &v6, 0, &v5, 0, this[2]);
      if ((_DWORD)result)
        return result;
    }
  }
  return 0;
}

uint64_t ma::SubjectMotionAnalysis::CopyProperty(ma::SubjectMotionAnalysis *this, CFTypeRef cf1, const __CFAllocator *a3, CFArrayRef *a4)
{
  const __CFArray *v7;
  CFArrayRef Copy;
  uint64_t result;

  if (!CFEqual(cf1, CFSTR("SubjectMotionResults")))
    return 4294967246;
  v7 = (const __CFArray *)*((_QWORD *)this + 2);
  if (v7)
    Copy = CFArrayCreateCopy(a3, v7);
  else
    Copy = 0;
  result = 0;
  *a4 = Copy;
  return result;
}

uint64_t MotionAnalysis<ma::SubjectMotionSegment>::AddSegment(uint64_t a1)
{
  ma::SubjectMotionSegment *v2;
  ma::SubjectMotionSegment *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;

  v2 = (ma::SubjectMotionSegment *)operator new(0x60uLL, MEMORY[0x1E0DE4E10]);
  if (!v2)
    return 4294967188;
  v3 = v2;
  ma::SubjectMotionSegment::SubjectMotionSegment(v2);
  v4 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)(a1 + 8) = v3;
  v7 = v4;
  v5 = Vector<ma::Object *>::PushBack((CFMutableArrayRef *)a1, &v7);
  if ((_DWORD)v5 && v7)
    (*(void (**)(uint64_t))(*(_QWORD *)v7 + 8))(v7);
  return v5;
}

void sub_1B6C795D8(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1BCCA12A4](v1, MEMORY[0x1E0DE4E10]);
  _Unwind_Resume(a1);
}

void sub_1B6C797E4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;

  _Unwind_Resume(a1);
}

void sub_1B6C79A74(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1B6C79B7C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1B6C79FE4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9)
{
  void *v9;

  _Unwind_Resume(a1);
}

void sub_1B6C7A3E0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{

  _Unwind_Resume(a1);
}

uint64_t VCPProtoImageHumanPoseResultFromCFDictionary(const __CFDictionary *a1, VCPProtoImageHumanPoseResult *a2)
{
  const __CFNumber *Value;
  const __CFDictionary *v5;
  const __CFNumber *v6;
  const __CFString *v7;
  const __CFArray *v8;
  BOOL v9;
  const __CFArray *v12;
  CGFloat v13;
  CGFloat v14;
  CGFloat v15;
  CFIndex v16;
  Class isa;
  const __CFArray *ValueAtIndex;
  const __CFNumber *v19;
  const __CFNumber *v20;
  const __CFNumber *v21;
  CGRect v22;

  Value = (const __CFNumber *)CFDictionaryGetValue(a1, CFSTR("flags"));
  v5 = (const __CFDictionary *)CFDictionaryGetValue(a1, CFSTR("attributes"));
  v6 = (const __CFNumber *)CFDictionaryGetValue(v5, CFSTR("humanConfidence"));
  v7 = (const __CFString *)CFDictionaryGetValue(v5, CFSTR("humanBounds"));
  v8 = (const __CFArray *)CFDictionaryGetValue(v5, CFSTR("humanKeypoints"));
  if (v6)
    v9 = v7 == 0;
  else
    v9 = 1;
  if (v9 || Value == 0)
    return 4294967246;
  v12 = v8;
  LODWORD(v22.origin.x) = 0;
  CFNumberGetValue(Value, kCFNumberSInt32Type, &v22);
  HIDWORD(a2[1]._bounds) = LODWORD(v22.origin.x);
  LODWORD(v22.origin.x) = 0;
  CFNumberGetValue(v6, kCFNumberFloat32Type, &v22);
  LODWORD(a2[1]._bounds) = LODWORD(v22.origin.x);
  VCPProtoImageHumanPoseResult::makeBounds(a2);
  v22.origin.x = CFStringToCGRect(v7);
  v22.origin.y = v13;
  v22.size.width = v14;
  v22.size.height = v15;
  VCPProtoBoundsFromCGRect(&v22, a2->_bounds);
  if (v12 && CFArrayGetCount(v12) >= 1)
  {
    v16 = 0;
    do
    {
      PB::PtrVector<VCPProtoKeypoint>::emplace_back<>((VCPProtoKeypoint ***)&a2->_confidence);
      isa = a2->_keypoints[-1].super.super.isa;
      ValueAtIndex = (const __CFArray *)CFArrayGetValueAtIndex(v12, v16);
      LODWORD(v22.origin.x) = 0;
      v19 = (const __CFNumber *)CFArrayGetValueAtIndex(ValueAtIndex, 0);
      CFNumberGetValue(v19, kCFNumberFloat32Type, &v22);
      *((_DWORD *)isa + 3) = LODWORD(v22.origin.x);
      LODWORD(v22.origin.x) = 0;
      v20 = (const __CFNumber *)CFArrayGetValueAtIndex(ValueAtIndex, 1);
      CFNumberGetValue(v20, kCFNumberFloat32Type, &v22);
      *((_DWORD *)isa + 4) = LODWORD(v22.origin.x);
      LODWORD(v22.origin.x) = 0;
      v21 = (const __CFNumber *)CFArrayGetValueAtIndex(ValueAtIndex, 2);
      CFNumberGetValue(v21, kCFNumberFloat32Type, &v22);
      *((_DWORD *)isa + 2) = LODWORD(v22.origin.x);
      ++v16;
    }
    while (v16 < CFArrayGetCount(v12));
  }
  return 0;
}

double CFStringToCGRect(CFStringRef theString)
{
  const __CFArray *ArrayBySeparatingStrings;
  CFIndex v2;
  const __CFString *ValueAtIndex;
  CFMutableStringRef MutableCopy;
  __CFString *v5;
  double v6;
  CFStringRef theStringa;
  CFArrayRef theArray;
  _OWORD v10[2];
  uint64_t v11;
  CFRange v12;
  CFRange v13;

  v11 = *MEMORY[0x1E0C80C00];
  memset(v10, 0, sizeof(v10));
  ArrayBySeparatingStrings = CFStringCreateArrayBySeparatingStrings(0, theString, CFSTR(","));
  v2 = 0;
  theArray = ArrayBySeparatingStrings;
  while (v2 < CFArrayGetCount(ArrayBySeparatingStrings))
  {
    ValueAtIndex = (const __CFString *)CFArrayGetValueAtIndex(theArray, v2);
    MutableCopy = CFStringCreateMutableCopy(0, 0, ValueAtIndex);
    theStringa = MutableCopy;
    v12.length = CFStringGetLength(MutableCopy);
    v12.location = 0;
    CFStringFindAndReplace(MutableCopy, CFSTR("{"), &stru_1E6B1C190, v12, 0);
    v5 = (__CFString *)theStringa;
    v13.length = CFStringGetLength(theStringa);
    v13.location = 0;
    CFStringFindAndReplace(v5, CFSTR("}"), &stru_1E6B1C190, v13, 0);
    *((double *)v10 + v2) = CFStringGetDoubleValue(theStringa);
    CF<opaqueCMSampleBuffer *>::~CF((const void **)&theStringa);
    ++v2;
    ArrayBySeparatingStrings = theArray;
  }
  v6 = *(double *)v10;
  CF<opaqueCMSampleBuffer *>::~CF((const void **)&theArray);
  return v6;
}

void sub_1B6C7AAB0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  CF<opaqueCMSampleBuffer *>::~CF((const void **)va);
  _Unwind_Resume(a1);
}

uint64_t PB::PtrVector<VCPProtoKeypoint>::emplace_back<>(VCPProtoKeypoint ***a1)
{
  VCPProtoKeypoint *v2;
  uint64_t result;
  unint64_t v4;
  VCPProtoKeypoint **v5;
  VCPProtoKeypoint **v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  char *v11;
  VCPProtoKeypoint **v12;
  char *v13;
  VCPProtoKeypoint **v14;
  VCPProtoKeypoint **v15;
  VCPProtoKeypoint *v16;
  int64x2_t v17;
  VCPProtoKeypoint **v18;
  uint64_t v19;
  int64x2_t v20;
  char *v21;
  _QWORD *v22;

  v2 = (VCPProtoKeypoint *)operator new();
  VCPProtoKeypoint::VCPProtoKeypoint(v2);
  result = (uint64_t)(a1 + 2);
  v4 = (unint64_t)a1[2];
  v5 = a1[1];
  if ((unint64_t)v5 >= v4)
  {
    v7 = v5 - *a1;
    if ((unint64_t)(v7 + 1) >> 61)
      std::vector<std::unique_ptr<VCPProtoKeypoint>>::__throw_length_error[abi:ne180100]();
    v8 = v4 - (_QWORD)*a1;
    v9 = v8 >> 2;
    if (v8 >> 2 <= (unint64_t)(v7 + 1))
      v9 = v7 + 1;
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8)
      v10 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v10 = v9;
    v22 = a1 + 2;
    if (v10)
      v11 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::unique_ptr<VCPProtoKeypoint>>>(result, v10);
    else
      v11 = 0;
    v12 = (VCPProtoKeypoint **)&v11[8 * v7];
    v13 = &v11[8 * v10];
    v21 = v13;
    *v12 = v2;
    v6 = v12 + 1;
    v20.i64[1] = (uint64_t)(v12 + 1);
    v15 = *a1;
    v14 = a1[1];
    if (v14 == *a1)
    {
      v17 = vdupq_n_s64((unint64_t)v14);
    }
    else
    {
      do
      {
        v16 = *--v14;
        *v14 = 0;
        *--v12 = v16;
      }
      while (v14 != v15);
      v17 = *(int64x2_t *)a1;
      v6 = (VCPProtoKeypoint **)v20.i64[1];
      v13 = v21;
    }
    *a1 = v12;
    a1[1] = v6;
    v20 = v17;
    v18 = a1[2];
    a1[2] = (VCPProtoKeypoint **)v13;
    v21 = (char *)v18;
    v19 = v17.i64[0];
    result = std::__split_buffer<std::unique_ptr<VCPProtoKeypoint>>::~__split_buffer((uint64_t)&v19);
  }
  else
  {
    *v5 = v2;
    v6 = v5 + 1;
  }
  a1[1] = v6;
  return result;
}

void sub_1B6C7AC04(_Unwind_Exception *a1)
{
  uint64_t v1;

  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

__CFDictionary *VCPProtoImageHumanPoseResultToCFDictionary(const VCPProtoImageHumanPoseResult *a1)
{
  double v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  NSMutableArray *v6;
  unint64_t v7;
  const CFArrayCallBacks *v8;
  _DWORD *isa;
  __CFDictionary *Mutable;
  CFNumberRef v11;
  __CFArray *v12;
  CFNumberRef v13;
  __CFArray *v14;
  CFNumberRef v15;
  __CFDictionary *v16;
  CFNumberRef v17;
  __CFDictionary *v18;
  CFNumberRef v19;
  CFMutableDictionaryRef theDict;
  CFArrayRef theArray;
  CFStringRef v23;
  int valuePtr;
  CFNumberRef v25;

  v2 = VCPProtoBoundsToCGRect(a1->_bounds);
  v23 = CFStringCreateWithFormat(0, 0, CFSTR("{{%.*g, %.*g}, {%.*g, %.*g}}"), 17, *(_QWORD *)&v2, 17, v3, 17, v4, 17, v5);
  theArray = CFArrayCreateMutable(0, 0, MEMORY[0x1E0C9B378]);
  v6 = *(NSMutableArray **)&a1->_confidence;
  if (a1->_keypoints != v6)
  {
    v7 = 0;
    v8 = (const CFArrayCallBacks *)MEMORY[0x1E0C9B378];
    do
    {
      isa = v6[v7].super.super.isa;
      Mutable = CFArrayCreateMutable(0, 0, v8);
      theDict = Mutable;
      valuePtr = isa[3];
      v11 = CFNumberCreate(0, kCFNumberFloat32Type, &valuePtr);
      v25 = v11;
      if (v11)
        CFArrayAppendValue(Mutable, v11);
      CF<opaqueCMSampleBuffer *>::~CF((const void **)&v25);
      v12 = theDict;
      valuePtr = isa[4];
      v13 = CFNumberCreate(0, kCFNumberFloat32Type, &valuePtr);
      v25 = v13;
      if (v13)
        CFArrayAppendValue(v12, v13);
      CF<opaqueCMSampleBuffer *>::~CF((const void **)&v25);
      v14 = theDict;
      valuePtr = isa[2];
      v15 = CFNumberCreate(0, kCFNumberFloat32Type, &valuePtr);
      v25 = v15;
      if (v15)
        CFArrayAppendValue(v14, v15);
      CF<opaqueCMSampleBuffer *>::~CF((const void **)&v25);
      CFArrayAppendValue(theArray, theDict);
      CF<opaqueCMSampleBuffer *>::~CF((const void **)&theDict);
      ++v7;
      v6 = *(NSMutableArray **)&a1->_confidence;
    }
    while (v7 < a1->_keypoints - v6);
  }
  v16 = CFDictionaryCreateMutable(0, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  theDict = v16;
  valuePtr = (int)a1[1]._bounds;
  v17 = CFNumberCreate(0, kCFNumberFloat32Type, &valuePtr);
  v25 = v17;
  if (v17)
    CFDictionarySetValue(v16, CFSTR("humanConfidence"), v17);
  CF<opaqueCMSampleBuffer *>::~CF((const void **)&v25);
  CFDictionarySetValue(theDict, CFSTR("humanBounds"), v23);
  if (CFArrayGetCount(theArray))
    CFDictionarySetValue(theDict, CFSTR("humanKeypoints"), theArray);
  v18 = CFDictionaryCreateMutable(0, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  valuePtr = HIDWORD(a1[1]._bounds);
  v19 = CFNumberCreate(0, kCFNumberSInt32Type, &valuePtr);
  v25 = v19;
  if (v19)
    CFDictionarySetValue(v18, CFSTR("flags"), v19);
  CF<opaqueCMSampleBuffer *>::~CF((const void **)&v25);
  CFDictionarySetValue(v18, CFSTR("attributes"), theDict);
  CF<opaqueCMSampleBuffer *>::~CF((const void **)&theDict);
  CF<opaqueCMSampleBuffer *>::~CF((const void **)&theArray);
  CF<opaqueCMSampleBuffer *>::~CF((const void **)&v23);
  return v18;
}

void sub_1B6C7AEDC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, ...)
{
  uint64_t v10;
  const void *v12;
  va_list va;
  va_list va1;

  va_start(va1, a10);
  va_start(va, a10);
  v12 = va_arg(va1, const void *);
  CF<opaqueCMSampleBuffer *>::~CF((const void **)(v10 - 56));
  CF<opaqueCMSampleBuffer *>::~CF((const void **)va);
  CF<opaqueCMSampleBuffer *>::~CF((const void **)va1);
  CF<opaqueCMSampleBuffer *>::~CF((const void **)(v10 - 72));
  _Unwind_Resume(a1);
}

void std::vector<std::unique_ptr<VCPProtoKeypoint>>::__throw_length_error[abi:ne180100]()
{
  std::__throw_length_error[abi:ne180100]("vector");
}

void std::__throw_length_error[abi:ne180100](const char *a1)
{
  std::logic_error *exception;

  exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
  std::length_error::length_error[abi:ne180100](exception, a1);
  __cxa_throw(exception, (struct type_info *)off_1E6B10808, MEMORY[0x1E0DE42D0]);
}

void sub_1B6C7AFA4(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

std::logic_error *std::length_error::length_error[abi:ne180100](std::logic_error *a1, const char *a2)
{
  std::logic_error *result;

  result = std::logic_error::logic_error(a1, a2);
  result->__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E0DE5020] + 16);
  return result;
}

void *std::__allocate_at_least[abi:ne180100]<std::allocator<std::unique_ptr<VCPProtoKeypoint>>>(uint64_t a1, unint64_t a2)
{
  if (a2 >> 61)
    std::__throw_bad_array_new_length[abi:ne180100]();
  return operator new(8 * a2);
}

void std::__throw_bad_array_new_length[abi:ne180100]()
{
  std::bad_array_new_length *exception;
  std::bad_array_new_length *v1;

  exception = (std::bad_array_new_length *)__cxa_allocate_exception(8uLL);
  v1 = std::bad_array_new_length::bad_array_new_length(exception);
  __cxa_throw(v1, MEMORY[0x1E0DE4E98], MEMORY[0x1E0DE4390]);
}

uint64_t std::__split_buffer<std::unique_ptr<VCPProtoKeypoint>>::~__split_buffer(uint64_t a1)
{
  uint64_t i;
  uint64_t v3;
  uint64_t v4;

  v3 = *(_QWORD *)(a1 + 8);
  for (i = *(_QWORD *)(a1 + 16); i != v3; i = *(_QWORD *)(a1 + 16))
  {
    *(_QWORD *)(a1 + 16) = i - 8;
    v4 = *(_QWORD *)(i - 8);
    *(_QWORD *)(i - 8) = 0;
    if (v4)
      (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
  }
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

BOOL VCPProtoKeypointReadFrom(uint64_t a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  char v14;
  uint64_t v16;
  int v17;
  unint64_t v19;
  uint64_t v20;
  unint64_t v21;
  int v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  unint64_t v26;
  int *v27;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) < *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
  {
    v7 = (int *)MEMORY[0x1E0D82BB8];
    while (1)
    {
      if (*(_BYTE *)(a2 + *v5))
        return *(_BYTE *)(a2 + *v5) == 0;
      v8 = 0;
      v9 = 0;
      v10 = 0;
      while (1)
      {
        v11 = *v3;
        v12 = *(_QWORD *)(a2 + v11);
        v13 = v12 + 1;
        if (v12 == -1 || v13 > *(_QWORD *)(a2 + *v4))
          break;
        v14 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
        *(_QWORD *)(a2 + v11) = v13;
        v10 |= (unint64_t)(v14 & 0x7F) << v8;
        if ((v14 & 0x80) == 0)
          goto LABEL_12;
        v8 += 7;
        if (v9++ >= 9)
        {
          v10 = 0;
          v16 = *v5;
          v17 = *(unsigned __int8 *)(a2 + v16);
          goto LABEL_14;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
      v16 = *v5;
      v17 = *(unsigned __int8 *)(a2 + v16);
      if (*(_BYTE *)(a2 + v16))
        v10 = 0;
LABEL_14:
      if (v17 || (v10 & 7) == 4)
        return *(_BYTE *)(a2 + *v5) == 0;
      v19 = v10 >> 3;
      if ((v10 >> 3) == 3)
      {
        v23 = *v3;
        v24 = *(_QWORD *)(a2 + v23);
        if (v24 <= 0xFFFFFFFFFFFFFFFBLL && v24 + 4 <= *(_QWORD *)(a2 + *v4))
        {
          v22 = *(_DWORD *)(*(_QWORD *)(a2 + *v7) + v24);
          *(_QWORD *)(a2 + v23) = v24 + 4;
        }
        else
        {
          *(_BYTE *)(a2 + v16) = 1;
          v22 = 0;
        }
        v27 = &OBJC_IVAR___VCPProtoKeypoint__confidence;
        goto LABEL_38;
      }
      if ((_DWORD)v19 == 2)
        break;
      if ((_DWORD)v19 == 1)
      {
        v20 = *v3;
        v21 = *(_QWORD *)(a2 + v20);
        if (v21 <= 0xFFFFFFFFFFFFFFFBLL && v21 + 4 <= *(_QWORD *)(a2 + *v4))
        {
          v22 = *(_DWORD *)(*(_QWORD *)(a2 + *v7) + v21);
          *(_QWORD *)(a2 + v20) = v21 + 4;
        }
        else
        {
          *(_BYTE *)(a2 + v16) = 1;
          v22 = 0;
        }
        v27 = &OBJC_IVAR___VCPProtoKeypoint__x;
LABEL_38:
        *(_DWORD *)(a1 + *v27) = v22;
        goto LABEL_39;
      }
      if ((PBReaderSkipValueWithTag() & 1) == 0)
        return 0;
LABEL_39:
      if (*(_QWORD *)(a2 + *v3) >= *(_QWORD *)(a2 + *v4))
        return *(_BYTE *)(a2 + *v5) == 0;
    }
    v25 = *v3;
    v26 = *(_QWORD *)(a2 + v25);
    if (v26 <= 0xFFFFFFFFFFFFFFFBLL && v26 + 4 <= *(_QWORD *)(a2 + *v4))
    {
      v22 = *(_DWORD *)(*(_QWORD *)(a2 + *v7) + v26);
      *(_QWORD *)(a2 + v25) = v26 + 4;
    }
    else
    {
      *(_BYTE *)(a2 + v16) = 1;
      v22 = 0;
    }
    v27 = &OBJC_IVAR___VCPProtoKeypoint__y;
    goto LABEL_38;
  }
  return *(_BYTE *)(a2 + *v5) == 0;
}

void sub_1B6C7B970(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1B6C7BDA0(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;

  _Unwind_Resume(a1);
}

id VCPCompareLibraryClustersWithVisionClusters(void *a1, void *a2)
{
  id v3;
  uint64_t v4;
  void *v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  BOOL v9;
  int v10;
  uint64_t i;
  uint64_t v12;
  id v13;
  id v14;
  uint64_t v15;
  void *v16;
  void *v17;
  uint64_t v19;
  void *v20;
  id v21;
  void *v22;
  id obj;
  _QWORD v24[4];
  id v25;
  uint64_t v26;
  id v27;
  id v28;
  id v29;
  uint64_t *v30;
  uint64_t v31;
  uint64_t *v32;
  uint64_t v33;
  char v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  _BYTE v39[128];
  uint64_t v40;

  v40 = *MEMORY[0x1E0C80C00];
  v3 = a1;
  v21 = a2;
  v19 = objc_msgSend(v3, "count", v3);
  v4 = objc_msgSend(v21, "count");
  objc_msgSend(MEMORY[0x1E0C99DE8], "array");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(MEMORY[0x1E0C99DE8], "array");
  v22 = (void *)objc_claimAutoreleasedReturnValue();
  v6 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0CB36B8]), "initWithIndexesInRange:", 0, v4);
  v20 = (void *)objc_msgSend(v6, "mutableCopy");
  v37 = 0u;
  v38 = 0u;
  v35 = 0u;
  v36 = 0u;
  obj = v3;
  v7 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v35, v39, 16);
  if (v7)
  {
    v8 = *(_QWORD *)v36;
    if (v4)
      v9 = 1;
    else
      v9 = v19 == 0;
    v10 = !v9;
    do
    {
      for (i = 0; i != v7; ++i)
      {
        if (*(_QWORD *)v36 != v8)
          objc_enumerationMutation(obj);
        v12 = *(_QWORD *)(*((_QWORD *)&v35 + 1) + 8 * i);
        if (v10)
        {
          objc_msgSend(v5, "addObject:", *(_QWORD *)(*((_QWORD *)&v35 + 1) + 8 * i));
        }
        else
        {
          v31 = 0;
          v32 = &v31;
          v33 = 0x2020000000;
          v34 = 0;
          v24[0] = MEMORY[0x1E0C809B0];
          v24[1] = 3221225472;
          v24[2] = __VCPCompareLibraryClustersWithVisionClusters_block_invoke;
          v24[3] = &unk_1E6B157F8;
          v25 = v21;
          v26 = v12;
          v13 = v5;
          v27 = v13;
          v28 = v22;
          v14 = v20;
          v29 = v14;
          v30 = &v31;
          objc_msgSend(v6, "enumerateIndexesUsingBlock:", v24);
          if (!*((_BYTE *)v32 + 24) && v19)
            objc_msgSend(v13, "addObject:", v12);
          v15 = objc_msgSend(v14, "copy");

          _Block_object_dispose(&v31, 8);
          v6 = (void *)v15;
        }
      }
      v7 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v35, v39, 16);
    }
    while (v7);
  }

  objc_msgSend(MEMORY[0x1E0C99E08], "dictionary");
  v16 = (void *)objc_claimAutoreleasedReturnValue();
  if (objc_msgSend(v5, "count"))
    objc_msgSend(v16, "setObject:forKeyedSubscript:", v5, CFSTR("LibraryClustersMinusVisionClusters"));
  if (objc_msgSend(v6, "count"))
  {
    objc_msgSend(v21, "objectsAtIndexes:", v6);
    v17 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v22, "addObjectsFromArray:", v17);

  }
  if (objc_msgSend(v22, "count"))
    objc_msgSend(v16, "setObject:forKeyedSubscript:", v22, CFSTR("VisionClustersMinusLibraryClusters"));

  return v16;
}

void sub_1B6C7C3AC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9, uint64_t a10, void *a11, void *a12, void *a13)
{
  void *v13;
  void *v14;
  void *v15;
  void *v16;

  _Unwind_Resume(a1);
}

void sub_1B6C7C564(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void sub_1B6C7C758(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, void *a14)
{
  void *v14;
  void *v15;
  void *v16;
  void *v17;
  void *v18;

  _Unwind_Resume(a1);
}

void sub_1B6C7C814(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void sub_1B6C7C8A4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_1B6C7CC28(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;

  _Unwind_Resume(a1);
}

id _cacheFileUrlFromDirectoryUrl(NSURL *a1)
{
  NSURL *v1;
  NSURL *v2;
  void *v3;

  v1 = a1;
  v2 = v1;
  if (v1)
  {
    -[NSURL URLByAppendingPathComponent:](v1, "URLByAppendingPathComponent:", CFSTR("AlgoFaceClusterCache.data"));
    v3 = (void *)objc_claimAutoreleasedReturnValue();
  }
  else
  {
    v3 = 0;
  }

  return v3;
}

void sub_1B6C7CCB0(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1B6C7D08C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1B6C7D1FC(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1B6C7E0D0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,void *a23,uint64_t a24,uint64_t a25,uint64_t a26,void *a27,_Unwind_Exception *exception_object)
{

  _Unwind_Resume(a1);
}

void sub_1B6C7E39C(_Unwind_Exception *exception_object)
{
  _Unwind_Resume(exception_object);
}

void sub_1B6C7E550(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1B6C7E648(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1B6C7E6FC(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1B6C7E810(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1B6C7EB9C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  _Unwind_Resume(a1);
}

void sub_1B6C7F770(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *a19, uint64_t a20,uint64_t a21,void *a22,void *a23,void *a24,void *a25,void *a26,void *a27,void *a28,uint64_t a29,uint64_t a30,void *a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,char a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,id a60,uint64_t a61,uint64_t a62,char a63)
{
  void *v63;
  void *v64;
  void *v65;
  void *v66;
  void *v67;
  void *v68;
  void *v69;

  _Block_object_dispose(&a63, 8);
  _Block_object_dispose(&a55, 8);

  _Unwind_Resume(a1);
}

uint64_t __Block_byref_object_copy__2(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void __Block_byref_object_dispose__2(uint64_t a1)
{

}

void sub_1B6C7F98C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_1B6C7FC10(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_1B6C7FD10(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_1B6C8012C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *a16, void *a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,void *a25)
{

  _Unwind_Resume(a1);
}

void sub_1B6C802B4(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1B6C80714(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_1B6C821C0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,void *a21,uint64_t a22,void *a23)
{
  void *v23;

  _Unwind_Resume(a1);
}

void sub_1B6C82524(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_1B6C82594(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_1B6C825F4(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1B6C82674(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_1B6C826D4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_1B6C829F0(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1B6C83138(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, int a14, char a15)
{
  void *v15;
  void *v16;
  void *v17;
  void *v18;
  void *v19;

  if ((a15 & 1) != 0)
    objc_end_catch();

  _Unwind_Resume(a1);
}

id _tempCacheFileUrlFromCacheFileUrl(NSURL *a1)
{
  NSURL *v1;
  NSURL *v2;
  void *v3;

  v1 = a1;
  v2 = v1;
  if (v1)
  {
    -[NSURL URLByAppendingPathExtension:](v1, "URLByAppendingPathExtension:", CFSTR("temp"));
    v3 = (void *)objc_claimAutoreleasedReturnValue();
  }
  else
  {
    v3 = 0;
  }

  return v3;
}

void sub_1B6C83458(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1B6C835B8(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  _Unwind_Resume(a1);
}

void sub_1B6C8389C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12)
{
  void *v12;
  void *v13;
  void *v14;
  void *v15;

  _Unwind_Resume(a1);
}

void sub_1B6C83C8C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1B6C844BC(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_1B6C848E8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15)
{
  void *v15;

  _Unwind_Resume(a1);
}

void sub_1B6C84DB0(_Unwind_Exception *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *exc_bufa, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, __int128 buf)
{
  void *v19;
  void *v20;

  if (a2)
  {

    if (a2 == 2)
    {
      objc_begin_catch(a1);
      if ((int)MediaAnalysisLogLevel() >= 3 && os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
      {
        LODWORD(buf) = 138412290;
        *(_QWORD *)((char *)&buf + 4) = a11;
        _os_log_impl(&dword_1B6C4A000, MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR, "VCPClusterer: Failed to unarchive cluster cache data blob from '%@'", (uint8_t *)&buf, 0xCu);
      }
      objc_end_catch();
    }
    else
    {
      objc_begin_catch(a1);
    }
    JUMPOUT(0x1B6C84C58);
  }
  _Unwind_Resume(a1);
}

void sub_1B6C8526C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;

  _Unwind_Resume(a1);
}

void sub_1B6C8552C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,id a22)
{
  void *v22;
  void *v23;

  _Block_object_dispose(&a17, 8);
  _Unwind_Resume(a1);
}

void sub_1B6C85688(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16)
{
  uint64_t v16;
  void *v17;
  uint64_t *v20;
  uint64_t *v21;
  void *v22;
  void *v23;
  void *v24;
  uint64_t v25;
  uint64_t v26;
  void *v27;
  void *v28;
  void *v29;
  uint64_t v30;
  uint64_t v31;
  void *v32;
  void *v33;
  void *v34;
  uint64_t v35;
  uint64_t v36;
  void *v37;
  void *v38;
  void *v39;
  uint64_t v40;
  uint64_t v41;
  void *v42;

  if (a2)
  {

    v20 = (uint64_t *)MEMORY[0x1E0CB2F90];
    v21 = (uint64_t *)MEMORY[0x1E0CB2D50];
    if (a2 == 3)
    {
      __cxa_begin_catch(exception_object);
      v22 = (void *)MEMORY[0x1E0CB35C8];
      a11 = *v21;
      objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("VCPClusterer: Failed to restore cluster cache due to device ran out of memory"));
      v23 = (void *)objc_claimAutoreleasedReturnValue();
      a12 = (uint64_t)v23;
      objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", &a12, &a11, 1);
      v24 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v22, "errorWithDomain:code:userInfo:", *v20, -18, v24);
      v25 = objc_claimAutoreleasedReturnValue();
      v26 = *(_QWORD *)(*(_QWORD *)(v16 + 48) + 8);
      v27 = *(void **)(v26 + 40);
      *(_QWORD *)(v26 + 40) = v25;

      __cxa_end_catch();
    }
    else
    {
      v28 = __cxa_begin_catch(exception_object);
      v29 = (void *)MEMORY[0x1E0CB35C8];
      v30 = *v20;
      if (a2 == 2)
      {
        v31 = (uint64_t)v28;
        a13 = *v21;
        v32 = (void *)MEMORY[0x1E0CB3940];
        (*(void (**)(void *))(*(_QWORD *)v28 + 16))(v28);
        objc_msgSend(v32, "stringWithFormat:", CFSTR("VCPClusterer: Failed to restore cluster cache std::exception %s"));
        v33 = (void *)objc_claimAutoreleasedReturnValue();
        a14 = (uint64_t)v33;
        objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", &a14, &a13, 1);
        v34 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v29, "errorWithDomain:code:userInfo:", v30, -18, v34);
        v35 = objc_claimAutoreleasedReturnValue();
        v36 = *(_QWORD *)(*(_QWORD *)(v16 + 48) + 8);
        v37 = *(void **)(v36 + 40);
        *(_QWORD *)(v36 + 40) = v35;

        if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_FAULT))
          __87__VCPClusterer_restoreClusterCacheAndSyncWithLibrary_cancelOrExtendTimeoutBlock_error___block_invoke_cold_1(v31);
      }
      else
      {
        a15 = *v21;
        objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("VCPClusterer: Failed to restore cluster cache"));
        v38 = (void *)objc_claimAutoreleasedReturnValue();
        a16 = (uint64_t)v38;
        objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", &a16, &a15, 1);
        v39 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v29, "errorWithDomain:code:userInfo:", v30, -18, v39);
        v40 = objc_claimAutoreleasedReturnValue();
        v41 = *(_QWORD *)(*(_QWORD *)(v16 + 48) + 8);
        v42 = *(void **)(v41 + 40);
        *(_QWORD *)(v41 + 40) = v40;

        if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_FAULT))
          __87__VCPClusterer_restoreClusterCacheAndSyncWithLibrary_cancelOrExtendTimeoutBlock_error___block_invoke_cold_2();
      }
      __cxa_end_catch();
    }
    JUMPOUT(0x1B6C85644);
  }
  _Unwind_Resume(exception_object);
}

void sub_1B6C85B54(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_1B6C85D0C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1B6C85F8C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;

  _Unwind_Resume(a1);
}

void sub_1B6C86424(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;

  _Unwind_Resume(a1);
}

void sub_1B6C866C4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1B6C86774(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1B6C868DC(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_1B6C86C64(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  _Unwind_Resume(a1);
}

void sub_1B6C86EDC(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  _Unwind_Resume(a1);
}

void sub_1B6C870E8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13)
{
  void *v13;
  void *v14;
  void *v15;
  void *v16;
  void *v17;

  _Unwind_Resume(a1);
}

void sub_1B6C871B4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;
  int v11;

  if (v11)

  _Unwind_Resume(a1);
}

void sub_1B6C8762C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,char a31,uint64_t a32,uint64_t a33,uint64_t a34,char a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,id a40)
{
  void *v40;
  void *v41;
  uint64_t v42;

  _Block_object_dispose(&a31, 8);
  _Block_object_dispose(&a35, 8);

  _Block_object_dispose((const void *)(v42 - 192), 8);
  _Unwind_Resume(a1);
}

void sub_1B6C877E4(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1B6C87C94(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, void *a13, void *a14, uint64_t a15, uint64_t a16, void *a17)
{
  void *v17;

  _Unwind_Resume(a1);
}

void sub_1B6C87F60(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, char a20,uint64_t a21,uint64_t a22,uint64_t a23,char a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,id a29,char a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,id a35)
{
  void *v35;
  uint64_t v36;
  void *v37;

  v37 = v35;

  _Block_object_dispose(&a20, 8);
  _Block_object_dispose(&a24, 8);

  _Block_object_dispose(&a30, 8);
  _Block_object_dispose((const void *)(v36 - 136), 8);

  _Unwind_Resume(a1);
}

void sub_1B6C881CC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;
  void *v11;

  _Unwind_Resume(a1);
}

void sub_1B6C88290(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void sub_1B6C884EC(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1B6C8873C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_1B6C88808(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1B6C88B0C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1B6C88ED4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_list va;

  va_start(va, a11);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t __Block_byref_object_copy__3(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void __Block_byref_object_dispose__3(uint64_t a1)
{

}

void sub_1B6C89304(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1B6C89710(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1B6C8A04C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9, void *a10, void *a11, void *a12, void *a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void *a22,void *a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,void *a28,void *a29,uint64_t a30,void *a31)
{
  void *v31;
  void *v32;

  _Unwind_Resume(a1);
}

void sub_1B6C8A528(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1B6C8A7C8(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1B6C8A8D0(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1B6C8AA3C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1B6C8AB5C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;

  _Unwind_Resume(a1);
}

void sub_1B6C8AE04(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_1B6C8B584(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9, void *a10, uint64_t a11, void *a12, void *a13, uint64_t a14, uint64_t a15, uint64_t a16, void *a17)
{
  void *v17;

  _Unwind_Resume(a1);
}

void sub_1B6C8C03C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11, void *a12)
{
  void *v12;
  void *v13;
  void *v14;

  _Unwind_Resume(a1);
}

uint64_t VCPProtoMovieHighlightScoreResultReadFrom(uint64_t a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  char v14;
  uint64_t v16;
  int v17;
  VCPProtoTimeRange *v19;
  uint64_t v20;
  unint64_t v21;
  int v22;
  uint64_t result;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) < *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
  {
    v7 = (int *)MEMORY[0x1E0D82BB8];
    do
    {
      if (*(_BYTE *)(a2 + *v5))
        break;
      v8 = 0;
      v9 = 0;
      v10 = 0;
      while (1)
      {
        v11 = *v3;
        v12 = *(_QWORD *)(a2 + v11);
        v13 = v12 + 1;
        if (v12 == -1 || v13 > *(_QWORD *)(a2 + *v4))
          break;
        v14 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
        *(_QWORD *)(a2 + v11) = v13;
        v10 |= (unint64_t)(v14 & 0x7F) << v8;
        if ((v14 & 0x80) == 0)
          goto LABEL_12;
        v8 += 7;
        if (v9++ >= 9)
        {
          v10 = 0;
          v16 = *v5;
          v17 = *(unsigned __int8 *)(a2 + v16);
          goto LABEL_14;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
      v16 = *v5;
      v17 = *(unsigned __int8 *)(a2 + v16);
      if (*(_BYTE *)(a2 + v16))
        v10 = 0;
LABEL_14:
      if (v17 || (v10 & 7) == 4)
        break;
      if ((v10 >> 3) == 2)
      {
        v20 = *v3;
        v21 = *(_QWORD *)(a2 + v20);
        if (v21 <= 0xFFFFFFFFFFFFFFFBLL && v21 + 4 <= *(_QWORD *)(a2 + *v4))
        {
          v22 = *(_DWORD *)(*(_QWORD *)(a2 + *v7) + v21);
          *(_QWORD *)(a2 + v20) = v21 + 4;
        }
        else
        {
          *(_BYTE *)(a2 + v16) = 1;
          v22 = 0;
        }
        *(_DWORD *)(a1 + 8) = v22;
      }
      else if ((v10 >> 3) == 1)
      {
        v19 = objc_alloc_init(VCPProtoTimeRange);
        objc_storeStrong((id *)(a1 + 16), v19);
        if (!PBReaderPlaceMark() || !VCPProtoTimeRangeReadFrom((uint64_t)v19, a2))
        {

          return 0;
        }
        PBReaderRecallMark();

      }
      else
      {
        result = PBReaderSkipValueWithTag();
        if (!(_DWORD)result)
          return result;
      }
    }
    while (*(_QWORD *)(a2 + *v3) < *(_QWORD *)(a2 + *v4));
  }
  return *(_BYTE *)(a2 + *v5) == 0;
}

uint64_t ma::EncodeStatsAVE1::ParseStats(ma::EncodeStatsAVE1 *this, CFDataRef theData, int a3, int a4)
{
  uint64_t v8;
  const UInt8 *BytePtr;
  uint64_t v10;
  int v11;
  const UInt8 *i;
  const UInt8 *v13;
  unsigned int v14;
  int v15;
  int v16;
  uint64_t v18;
  uint64_t v19;
  int v20;
  const UInt8 *v21;
  _WORD *v22;
  uint64_t v23;
  char v24;
  uint64_t v25;
  char v26;
  uint64_t v27;
  char v28;
  _WORD *v29;
  char v30;
  _DWORD v32[2];
  uint64_t v33;

  v33 = *MEMORY[0x1E0C80C00];
  v8 = (a4 * a3);
  if (CFDataGetLength(theData) == 320 * (int)v8)
  {
    BytePtr = CFDataGetBytePtr(theData);
    if ((int)v8 < 1)
      return 0;
    v10 = 0;
    v11 = 2 * a3;
    for (i = BytePtr + 8; ; i += 320)
    {
      v13 = &BytePtr[320 * v10];
      v14 = *((_DWORD *)v13 + 60);
      v15 = (int)(v14 << 22) >> 22;
      v16 = (v14 >> 12);
      v32[0] = v11 * 2 * v16 + ((int)(v14 << 22) >> 21);
      v32[1] = v11 * ((2 * v16) | 1) + ((int)(v14 << 22) >> 21);
      if (v15 >= a3 || v16 >= a4)
        break;
      v18 = 0;
      LODWORD(v19) = 0;
      v20 = v15 + v16 * a3;
      v21 = &BytePtr[320 * v10];
      *(_BYTE *)(*((_QWORD *)this + 1) + v20) = (*((_DWORD *)v21 + 20) & 0x3Eu) > 0x19;
      *(_BYTE *)(*((_QWORD *)this + 2) + v20) = (*((_DWORD *)v21 + 20) & 0x3F) == 31;
      v22 = (_WORD *)(*((_QWORD *)this + 3) + 4 * v20);
      *v22 = (__int16)(32 * *(_WORD *)v13) >> 5;
      v22[1] = (__int16)(*(_DWORD *)v13 >> 6) >> 6;
      *(_WORD *)(*((_QWORD *)this + 7) + 2 * v20) = *((_DWORD *)v13 + 1);
      *(_WORD *)(*((_QWORD *)this + 8) + 2 * v20) = *((_DWORD *)v13 + 61);
      *(_DWORD *)(*((_QWORD *)this + 9) + 4 * v20) = *((_DWORD *)v13 + 64) & 0xFFFFFF;
      *(_WORD *)(*((_QWORD *)this + 10) + 2 * v20) = *((_DWORD *)v13 + 62);
      *(_WORD *)(*((_QWORD *)this + 11) + 2 * v20) = *((_DWORD *)v13 + 63);
      *(_WORD *)(*((_QWORD *)this + 15) + 2 * v20) = *((_DWORD *)v13 + 67);
      *(_WORD *)(*((_QWORD *)this + 16) + 2 * v20) = *((_DWORD *)v13 + 68);
      *(_WORD *)(*((_QWORD *)this + 17) + 2 * v20) = *((_WORD *)v21 + 51);
      *(_WORD *)(*((_QWORD *)this + 18) + 2 * v20) = *((_WORD *)v21 + 50) & 0xFFF;
      *(_WORD *)(*((_QWORD *)this + 19) + 2 * v20) = *((_WORD *)v21 + 53);
      *(_WORD *)(*((_QWORD *)this + 20) + 2 * v20) = *((_WORD *)v21 + 52) & 0xFFF;
      v23 = *((_QWORD *)this + 4);
      v24 = 1;
      do
      {
        v25 = 0;
        v26 = v24;
        v27 = (int)v32[v18];
        v19 = (int)v19;
        v28 = 1;
        do
        {
          v29 = (_WORD *)(v23 + 4 * (v25 + v27));
          *v29 = (__int16)(32 * *(_WORD *)&i[4 * v19]) >> 5;
          v30 = v28;
          v29[1] = (__int16)(*(_DWORD *)&i[4 * v19++] >> 6) >> 6;
          v25 = 1;
          v28 = 0;
        }
        while ((v30 & 1) != 0);
        v24 = 0;
        v18 = 1;
      }
      while ((v26 & 1) != 0);
      if (++v10 == v8)
        return 0;
    }
  }
  return 4294967246;
}

void ma::EncodeStatsAVE1::~EncodeStatsAVE1(ma::EncodeStatsAVE1 *this)
{
  ma::EncodeStatsHW::~EncodeStatsHW(this);
  JUMPOUT(0x1BCCA12BCLL);
}

void sub_1B6C8CD90(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  void *v7;
  uint64_t v9;
  va_list va;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  id v15;
  va_list va1;

  va_start(va1, a7);
  va_start(va, a7);
  v9 = va_arg(va1, _QWORD);
  v11 = va_arg(va1, _QWORD);
  v12 = va_arg(va1, _QWORD);
  v13 = va_arg(va1, _QWORD);
  v14 = va_arg(va1, _QWORD);
  v15 = va_arg(va1, id);
  _Block_object_dispose(va, 8);

  _Block_object_dispose(va1, 8);
  _Unwind_Resume(a1);
}

uint64_t __Block_byref_object_copy__4(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void __Block_byref_object_dispose__4(uint64_t a1)
{

}

void sub_1B6C8D254(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  _Unwind_Resume(a1);
}

void sub_1B6C8D4A4(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1B6C8D5E8(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_1B6C8D660(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1B6C8D780(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_1B6C8D7F8(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1B6C8D954(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1B6C8DA04(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1B6C8DA9C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, objc_super a9)
{
  a9.super_class = (Class)VCPImageConverter;
  -[_Unwind_Exception dealloc](&a9, sel_dealloc);
  _Unwind_Resume(a1);
}

void sub_1B6C8DDD4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v3;
  va_list va;
  uint64_t v5;
  uint64_t v6;
  const void *v7;
  va_list va1;
  const void *v9;
  va_list va2;
  va_list va3;

  va_start(va3, a2);
  va_start(va2, a2);
  va_start(va1, a2);
  va_start(va, a2);
  v3 = va_arg(va1, _QWORD);
  v5 = va_arg(va1, _QWORD);
  v6 = va_arg(va1, _QWORD);
  va_copy(va2, va1);
  v7 = va_arg(va2, const void *);
  va_copy(va3, va2);
  v9 = va_arg(va3, const void *);
  CVPixelBufferLock::~CVPixelBufferLock((CVPixelBufferLock *)va);
  CF<opaqueCMSampleBuffer *>::~CF((const void **)va1);
  CF<opaqueCMSampleBuffer *>::~CF((const void **)va2);
  CF<opaqueCMSampleBuffer *>::~CF((const void **)va3);
  _Unwind_Resume(a1);
}

void sub_1B6C8E090(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v3;
  va_list va;
  uint64_t v5;
  uint64_t v6;
  const void *v7;
  va_list va1;
  va_list va2;

  va_start(va2, a2);
  va_start(va1, a2);
  va_start(va, a2);
  v3 = va_arg(va1, _QWORD);
  v5 = va_arg(va1, _QWORD);
  v6 = va_arg(va1, _QWORD);
  va_copy(va2, va1);
  v7 = va_arg(va2, const void *);
  CVPixelBufferLock::~CVPixelBufferLock((CVPixelBufferLock *)va);
  CF<opaqueCMSampleBuffer *>::~CF((const void **)va1);
  CF<opaqueCMSampleBuffer *>::~CF((const void **)va2);
  _Unwind_Resume(a1);
}

void sub_1B6C8E294(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;

  _Unwind_Resume(a1);
}

void sub_1B6C8E364(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  _Unwind_Resume(a1);
}

void sub_1B6C8E4AC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, objc_super a10)
{
  void *v10;
  void *v11;
  void *v12;

  a10.super_class = (Class)VCPFullAnalysisAssetProcessingTask;
  -[_Unwind_Exception dealloc](&a10, sel_dealloc);
  _Unwind_Resume(a1);
}

void sub_1B6C8EE18(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, _Unwind_Exception *exception_object, uint64_t a10, void *a11, void *a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18)
{
  void *v18;
  void *v19;
  void *v20;
  void *v21;

  _Unwind_Resume(a1);
}

void sub_1B6C8EFB4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void sub_1B6C8F4CC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11, void *a12)
{
  void *v12;
  void *v13;
  void *v14;
  void *v15;

  _Unwind_Resume(a1);
}

void sub_1B6C8F9F4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, void *a14)
{
  void *v14;
  void *v15;

  _Unwind_Resume(a1);
}

void sub_1B6C8FCC0(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_1B6C8FE14(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1B6C8FF64(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1B6C902E8(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1B6C909D0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, void *a13, void *a14, void *a15, void *a16)
{
  void *v16;
  void *v17;

  _Unwind_Resume(a1);
}

void sub_1B6C90C74(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,void *a23)
{
  void *v23;
  void *v24;

  _Unwind_Resume(a1);
}

void sub_1B6C90DCC(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1B6C90EA8(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1B6C9104C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1B6C91148(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1B6C91544(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, void *a11, void *a12)
{
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  void *v16;

  _Unwind_Resume(a1);
}

void sub_1B6C917E8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,void *a23)
{
  void *v23;
  void *v24;
  void *v25;
  void *v26;

  _Unwind_Resume(a1);
}

void sub_1B6C9194C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1B6C91A28(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1B6C91BCC(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1B6C91CC8(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1B6C91E4C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  _Unwind_Resume(a1);
}

void sub_1B6C9200C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,void *a23)
{
  void *v23;
  void *v24;

  _Unwind_Resume(a1);
}

void sub_1B6C92158(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1B6C92234(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1B6C923D8(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1B6C924D4(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1B6C92590(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  _Unwind_Resume(a1);
}

void sub_1B6C928AC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,void *a23)
{
  void *v23;
  void *v24;
  void *v25;

  _Unwind_Resume(a1);
}

void sub_1B6C92A04(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1B6C92AE0(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1B6C92C54(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1B6C92D38(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1B6C92E94(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_1B6C931D4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,void *a23)
{
  void *v23;
  void *v24;

  _Unwind_Resume(a1);
}

void sub_1B6C93320(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1B6C933FC(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1B6C935A0(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1B6C9369C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1B6C93984(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,void *a23)
{
  void *v23;
  void *v24;
  void *v25;

  _Unwind_Resume(a1);
}

void sub_1B6C93ADC(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1B6C93BB8(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1B6C93D2C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1B6C93E10(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1B6C94118(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9, uint64_t a10, void *a11, void *a12)
{
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  void *v16;

  _Unwind_Resume(a1);
}

void sub_1B6C9435C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,void *a23)
{
  void *v23;
  void *v24;
  void *v25;
  void *v26;

  _Unwind_Resume(a1);
}

void sub_1B6C944C0(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1B6C9459C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1B6C94740(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1B6C9483C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1B6C9490C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  void *v14;

  _Unwind_Resume(a1);
}

void sub_1B6C949E0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  void *v14;

  _Unwind_Resume(a1);
}

void sub_1B6C94AB4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  void *v14;

  _Unwind_Resume(a1);
}

void sub_1B6C94C64(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  _Unwind_Resume(a1);
}

void sub_1B6C94E04(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,void *a23)
{
  void *v23;
  void *v24;

  _Unwind_Resume(a1);
}

void sub_1B6C94F44(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1B6C95020(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1B6C95194(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1B6C95278(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1B6C953F0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  va_list va;

  va_start(va, a7);

  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1B6C955B0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  va_list va;

  va_start(va, a7);

  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1B6C95BC0(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  _Unwind_Resume(a1);
}

uint64_t __Block_byref_object_copy__5(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void __Block_byref_object_dispose__5(uint64_t a1)
{

}

void sub_1B6C95DF4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;
  void *v11;
  void *v12;

  _Unwind_Resume(a1);
}

void sub_1B6C9607C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,void *a24)
{
  void *v24;
  void *v25;
  void *v26;
  void *v27;

  _Unwind_Resume(a1);
}

void sub_1B6C961EC(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1B6C962C8(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1B6C96548(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;

  _Unwind_Resume(a1);
}

void sub_1B6C9669C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1B6C96C60(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;

  _Unwind_Resume(a1);
}

void sub_1B6C96ED0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,void *a23)
{
  void *v23;
  void *v24;

  _Unwind_Resume(a1);
}

void sub_1B6C97020(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1B6C970FC(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1B6C972A0(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1B6C9739C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1B6C975A0(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1B6C97778(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void sub_1B6C97940(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void sub_1B6C97B38(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18)
{
  void *v18;
  void *v19;
  void *v20;
  void *v21;

  _Unwind_Resume(a1);
}

void sub_1B6C97CA0(_Unwind_Exception *exception_object)
{
  _Unwind_Resume(exception_object);
}

void sub_1B6C97D8C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;
  void *v11;
  void *v12;

  v12 = v11;

  _Unwind_Resume(a1);
}

void sub_1B6C97E94(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1B6C97F94(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1B6C9805C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1B6C982D4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,void *a23)
{
  void *v23;
  void *v24;

  _Unwind_Resume(a1);
}

void sub_1B6C98424(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1B6C98500(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1B6C986A4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1B6C987A0(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1B6C98A30(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,void *a23)
{
  void *v23;
  void *v24;

  _Unwind_Resume(a1);
}

void sub_1B6C98B80(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1B6C98C5C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1B6C98E00(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1B6C98EFC(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1B6C99178(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,void *a23)
{
  void *v23;
  void *v24;

  _Unwind_Resume(a1);
}

void sub_1B6C992C8(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1B6C993A4(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1B6C99518(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1B6C995FC(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1B6C99874(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,void *a23)
{
  void *v23;
  void *v24;

  _Unwind_Resume(a1);
}

void sub_1B6C999C4(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1B6C99AA0(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1B6C99C14(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1B6C99CF8(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1B6C99F70(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,void *a23)
{
  void *v23;
  void *v24;

  _Unwind_Resume(a1);
}

void sub_1B6C9A0C0(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1B6C9A19C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1B6C9A310(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1B6C9A3F4(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1B6C9A63C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,void *a23)
{
  void *v23;
  void *v24;

  _Unwind_Resume(a1);
}

void sub_1B6C9A78C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1B6C9A868(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1B6C9A9DC(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1B6C9AAC0(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1B6C9AE58(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,void *a23)
{
  void *v23;
  void *v24;

  _Unwind_Resume(a1);
}

void sub_1B6C9AFB4(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1B6C9B090(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1B6C9B234(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1B6C9B330(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1B6C9B63C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,void *a23)
{
  void *v23;
  void *v24;

  _Unwind_Resume(a1);
}

void sub_1B6C9B798(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1B6C9B874(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1B6C9B9FC(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1B6C9BAE8(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1B6C9BDD4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,void *a23)
{
  void *v23;
  void *v24;

  _Unwind_Resume(a1);
}

void sub_1B6C9BF30(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1B6C9C00C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1B6C9C1B0(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1B6C9C2AC(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1B6C9C570(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,void *a23)
{
  void *v23;
  void *v24;

  _Unwind_Resume(a1);
}

void sub_1B6C9C6CC(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1B6C9C7A8(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1B6C9C930(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1B6C9CA1C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1B6C9CCE0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,void *a23)
{
  void *v23;
  void *v24;

  _Unwind_Resume(a1);
}

void sub_1B6C9CE3C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1B6C9CF18(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1B6C9D0A0(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1B6C9D18C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1B6C9D478(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,void *a23)
{
  void *v23;
  void *v24;

  _Unwind_Resume(a1);
}

void sub_1B6C9D5D4(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1B6C9D6B0(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1B6C9D854(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1B6C9D950(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1B6C9DC24(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,void *a23)
{
  void *v23;
  void *v24;

  _Unwind_Resume(a1);
}

void sub_1B6C9DD80(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1B6C9DE5C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1B6C9E000(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1B6C9E0FC(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1B6C9E41C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,void *a23)
{
  void *v23;
  void *v24;
  void *v25;

  _Unwind_Resume(a1);
}

void sub_1B6C9E58C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1B6C9E668(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1B6C9E7DC(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1B6C9E8C0(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1B6C9EAF8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,void *a23)
{
  void *v23;
  void *v24;

  _Unwind_Resume(a1);
}

void sub_1B6C9EC38(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1B6C9ED14(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1B6C9EE9C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1B6C9EF88(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1B6C9F24C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,void *a23)
{
  void *v23;
  void *v24;

  _Unwind_Resume(a1);
}

void sub_1B6C9F3A8(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1B6C9F484(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1B6C9F628(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1B6C9F724(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1B6C9F9E8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,void *a23)
{
  void *v23;
  void *v24;

  _Unwind_Resume(a1);
}

void sub_1B6C9FB44(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1B6C9FC20(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1B6C9FDA8(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1B6C9FE94(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1B6CA0158(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,void *a23)
{
  void *v23;
  void *v24;

  _Unwind_Resume(a1);
}

void sub_1B6CA02B4(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1B6CA0390(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1B6CA0518(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1B6CA0604(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1B6CA08F0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,void *a23)
{
  void *v23;
  void *v24;

  _Unwind_Resume(a1);
}

void sub_1B6CA0A4C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1B6CA0B28(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1B6CA0CB0(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1B6CA0D9C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1B6CA104C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,void *a23)
{
  void *v23;
  void *v24;

  _Unwind_Resume(a1);
}

void sub_1B6CA119C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1B6CA1278(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1B6CA141C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1B6CA1518(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1B6CA17C8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,void *a23)
{
  void *v23;
  void *v24;

  _Unwind_Resume(a1);
}

void sub_1B6CA1918(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1B6CA19F4(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1B6CA1B98(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1B6CA1C94(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1B6CA1F10(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,void *a23)
{
  void *v23;
  void *v24;

  _Unwind_Resume(a1);
}

void sub_1B6CA2060(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1B6CA213C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1B6CA22E0(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1B6CA23DC(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1B6CA2658(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,void *a23)
{
  void *v23;
  void *v24;

  _Unwind_Resume(a1);
}

void sub_1B6CA27A8(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1B6CA2884(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1B6CA2A28(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1B6CA2B24(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1B6CA2E00(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,void *a23)
{
  void *v23;
  void *v24;

  _Unwind_Resume(a1);
}

void sub_1B6CA2F50(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1B6CA302C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1B6CA31D0(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1B6CA32CC(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1B6CA357C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,void *a23)
{
  void *v23;
  void *v24;

  _Unwind_Resume(a1);
}

void sub_1B6CA36CC(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1B6CA37A8(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1B6CA394C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1B6CA3A48(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1B6CA3D88(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;

  _Unwind_Resume(a1);
}

void sub_1B6CA3F60(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,void *a23)
{
  void *v23;
  void *v24;
  void *v25;

  _Unwind_Resume(a1);
}

void sub_1B6CA40AC(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1B6CA4188(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1B6CA435C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1B6CA452C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  _Unwind_Resume(a1);
}

void sub_1B6CA46E4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,void *a23)
{
  void *v23;
  void *v24;

  _Unwind_Resume(a1);
}

void sub_1B6CA4830(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1B6CA490C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1B6CA4AA8(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1B6CA4C98(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,void *a23)
{
  void *v23;
  void *v24;

  _Unwind_Resume(a1);
}

void sub_1B6CA4DCC(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1B6CA4EA8(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1B6CA5044(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1B6CA50A8(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1B6CA5620(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, void *a14, void *a15, void *a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,id a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,char a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,id a48)
{
  void *v48;
  void *v49;

  _Block_object_dispose(&a23, 8);
  _Block_object_dispose(&a43, 8);

  _Unwind_Resume(a1);
}

void sub_1B6CA58B0(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1B6CA5990(_Unwind_Exception *exception_object)
{
  _Unwind_Resume(exception_object);
}

void sub_1B6CA59F0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_1B6CA5B40(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, id a20)
{
  void *v20;
  void *v21;
  void *v22;
  uint64_t v23;

  _Block_object_dispose(&a15, 8);
  _Block_object_dispose((const void *)(v23 - 80), 8);

  _Unwind_Resume(a1);
}

void sub_1B6CA5C4C(_Unwind_Exception *exception_object)
{
  _Unwind_Resume(exception_object);
}

void sub_1B6CA5CDC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void sub_1B6CA5F50(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,void *a23)
{
  void *v23;
  void *v24;

  _Unwind_Resume(a1);
}

void sub_1B6CA60DC(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1B6CA61C0(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1B6CA6334(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1B6CA6418(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1B6CA66E0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,void *a23)
{
  void *v23;
  void *v24;
  void *v25;

  _Unwind_Resume(a1);
}

void sub_1B6CA686C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1B6CA6950(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1B6CA6B64(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1B6CA6C4C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1B6CA6E2C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_1B6CA70B8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15, uint64_t a16, void *a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,void *a23,uint64_t a24,void *a25)
{
  void *v25;
  void *v26;

  _Unwind_Resume(a1);
}

void sub_1B6CA726C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1B6CA7350(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1B6CA74D4(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1B6CA75B8(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1B6CA7B0C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, _Unwind_Exception *exception_object)
{
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  void *v16;
  void *v17;

  _Unwind_Resume(a1);
}

void sub_1B6CA7CF8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15, void *a16)
{
  void *v16;
  void *v17;
  void *v18;
  void *v19;
  void *v20;

  _Unwind_Resume(a1);
}

void sub_1B6CA7FF8(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  v4 = v3;

  _Unwind_Resume(a1);
}

void sub_1B6CA8470(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, void *a14, uint64_t a15, uint64_t a16, void *a17, uint64_t a18, uint64_t a19, void *a20)
{

  _Unwind_Resume(a1);
}

void sub_1B6CA8EC8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15, void *a16, uint64_t a17, void *a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,void *a23)
{
  void *v23;
  void *v24;

  _Unwind_Resume(a1);
}

void sub_1B6CA98D4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11, void *a12, void *a13, void *a14, void *a15, void *a16, void *a17, void *a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,void *a30)
{

  _Unwind_Resume(a1);
}

void sub_1B6CAA278(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, void *a14, void *a15, void *a16, void *a17, void *a18, void *a19, uint64_t a20,void *a21,void *a22,uint64_t a23,uint64_t a24,void *a25)
{

  _Unwind_Resume(a1);
}

void sub_1B6CAA628(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;

  _Unwind_Resume(a1);
}

void sub_1B6CAA958(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;

  _Unwind_Resume(a1);
}

void sub_1B6CAAA50(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, objc_super a9)
{
  a9.super_class = (Class)VCPHumanPoseEspressoSession;
  -[_Unwind_Exception dealloc](&a9, sel_dealloc);
  _Unwind_Resume(a1);
}

void sub_1B6CAACFC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9, void *a10)
{
  void *v10;
  void *v11;

  _Unwind_Resume(a1);
}

void sub_1B6CAAEA0(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1B6CABB50(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, void *a11, uint64_t a12, uint64_t a13, void *a14, void *a15, uint64_t a16, void *a17)
{

  _Unwind_Resume(a1);
}

void sub_1B6CABFA8(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1B6CAC110(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15, void *a16, void *a17, void *a18)
{
  void *v18;
  void *v19;
  void *v20;
  void *v21;
  void *v22;

  _Unwind_Resume(a1);
}

void sub_1B6CAC618(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_1B6CAC8BC(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1B6CAC9A0(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1B6CACA70(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1B6CACC10(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1B6CAD638(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, void *a10, uint64_t a11, void *a12, void *__p, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,char a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,void *a27,uint64_t a28,char a29)
{
  void *v29;
  void *v30;
  void *v31;
  void *v32;
  void *v33;
  uint64_t v34;
  void *v36;

  v36 = *(void **)(v34 - 144);
  if (v36)
  {
    *(_QWORD *)(v34 - 136) = v36;
    operator delete(v36);
  }

  _Block_object_dispose(&a22, 8);
  _Unwind_Resume(a1);
}

uint64_t __Block_byref_object_copy__6(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void __Block_byref_object_dispose__6(uint64_t a1)
{

}

void std::vector<void *>::resize(uint64_t a1, unint64_t a2)
{
  unint64_t v2;

  v2 = (uint64_t)(*(_QWORD *)(a1 + 8) - *(_QWORD *)a1) >> 3;
  if (a2 <= v2)
  {
    if (a2 < v2)
      *(_QWORD *)(a1 + 8) = *(_QWORD *)a1 + 8 * a2;
  }
  else
  {
    std::vector<void *>::__append((void **)a1, a2 - v2);
  }
}

void std::vector<void *>::__append(void **a1, unint64_t a2)
{
  uint64_t v4;
  _BYTE *v5;
  _BYTE *v6;
  char *v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char *v13;
  char *v14;
  char *v15;
  char *v16;
  char *v17;
  char *v18;
  uint64_t v19;

  v6 = a1[2];
  v4 = (uint64_t)(a1 + 2);
  v5 = v6;
  v7 = *(char **)(v4 - 8);
  if (a2 <= (v6 - v7) >> 3)
  {
    if (a2)
    {
      bzero(*(void **)(v4 - 8), 8 * a2);
      v7 += 8 * a2;
    }
    a1[1] = v7;
  }
  else
  {
    v8 = v7 - (_BYTE *)*a1;
    v9 = a2 + (v8 >> 3);
    if (v9 >> 61)
      std::vector<std::unique_ptr<VCPProtoKeypoint>>::__throw_length_error[abi:ne180100]();
    v10 = v8 >> 3;
    v11 = v5 - (_BYTE *)*a1;
    if (v11 >> 2 > v9)
      v9 = v11 >> 2;
    if ((unint64_t)v11 >= 0x7FFFFFFFFFFFFFF8)
      v12 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v12 = v9;
    if (v12)
      v13 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::unique_ptr<VCPProtoKeypoint>>>(v4, v12);
    else
      v13 = 0;
    v14 = &v13[8 * v10];
    v15 = &v13[8 * v12];
    bzero(v14, 8 * a2);
    v16 = &v14[8 * a2];
    v18 = (char *)*a1;
    v17 = (char *)a1[1];
    if (v17 != *a1)
    {
      do
      {
        v19 = *((_QWORD *)v17 - 1);
        v17 -= 8;
        *((_QWORD *)v14 - 1) = v19;
        v14 -= 8;
      }
      while (v17 != v18);
      v17 = (char *)*a1;
    }
    *a1 = v14;
    a1[1] = v16;
    a1[2] = v15;
    if (v17)
      operator delete(v17);
  }
}

void std::vector<VCPEspressoV2Data * {__strong}>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  void **v1;
  char *v2;
  char *v4;
  void *v5;
  void *v6;

  v1 = *a1;
  v2 = (char *)**a1;
  if (v2)
  {
    v4 = (char *)v1[1];
    v5 = **a1;
    if (v4 != v2)
    {
      do
      {
        v6 = (void *)*((_QWORD *)v4 - 1);
        v4 -= 8;

      }
      while (v4 != v2);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

_QWORD *std::vector<void *>::__init_with_size[abi:ne180100]<void **,void **>(_QWORD *result, const void *a2, uint64_t a3, unint64_t a4)
{
  _QWORD *v6;
  uint64_t v7;
  size_t v8;

  if (a4)
  {
    v6 = result;
    result = std::vector<void *>::__vallocate[abi:ne180100](result, a4);
    v7 = v6[1];
    v8 = a3 - (_QWORD)a2;
    if (v8)
      result = memmove((void *)v6[1], a2, v8);
    v6[1] = v7 + v8;
  }
  return result;
}

void sub_1B6CADAD0(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

char *std::vector<void *>::__vallocate[abi:ne180100](_QWORD *a1, unint64_t a2)
{
  char *result;
  uint64_t v4;

  if (a2 >> 61)
    std::vector<std::unique_ptr<VCPProtoKeypoint>>::__throw_length_error[abi:ne180100]();
  result = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::unique_ptr<VCPProtoKeypoint>>>((uint64_t)(a1 + 2), a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[8 * v4];
  return result;
}

void VCPCNNEspressoContext::VCPCNNEspressoContext(VCPCNNEspressoContext *this)
{
  objc_class *context;

  LODWORD(this->_espressoContext) = 5;
  context = (objc_class *)espresso_create_context();
  this->super.isa = context;
  if (!context)
  {
    LODWORD(this->_espressoContext) = 0;
    this->super.isa = (Class)espresso_create_context();
  }
}

void VCPCNNEspressoContext::~VCPCNNEspressoContext(VCPCNNEspressoContext *this)
{
  if (this->super.isa)
    espresso_context_destroy();
}

uint64_t ma::MotionFilter::MotionFilter(uint64_t this, const FrameBuffer *a2, char a3, char a4)
{
  *(_QWORD *)this = a2;
  *(_BYTE *)(this + 8) = a3;
  *(_BYTE *)(this + 9) = a4;
  return this;
}

float32x2_t ma::MotionFilter::ProcessMotion(ma::FrameBuffer **this, int a2, ma::Translation *a3, int a4)
{
  float32x2_t result;

  switch(a4)
  {
    case 2:
      ma::MotionFilter::BilateralFilter(this, a2, (float32x2_t *)a3);
      break;
    case 1:
      return ma::MotionFilter::GaussianFilter(this, a2, (float32x2_t *)a3);
    case 0:
      result.f32[0] = ma::MotionFilter::MedianFilter(this, a2, a3);
      break;
  }
  return result;
}

float ma::MotionFilter::MedianFilter(ma::FrameBuffer **this, int a2, ma::Translation *a3)
{
  int v6;
  int v7;
  uint64_t v8;
  unint64_t v9;
  float v10;
  float v11;
  float *v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  float *v16;
  uint64_t v17;
  unint64_t v18;
  float result;
  int v21;
  _DWORD v22[3];
  int v23;
  _DWORD __b[2];
  float v25;
  _BYTE v26[12];

  *(_QWORD *)&v26[4] = *MEMORY[0x1E0C80C00];
  memset_pattern16(__b, &unk_1B6FBCB30, 0x10uLL);
  memset_pattern16(v22, &unk_1B6FBCB30, 0x10uLL);
  v6 = a2 + 2 * *((unsigned __int8 *)this + 9);
  v7 = a2 - 2;
  do
  {
    if (v7 + a2 >= *(_DWORD *)*this)
      break;
    v8 = ma::FrameBuffer::Get(*this, v7);
    if (v8)
    {
      v9 = 0;
      v11 = *(float *)(v8 + 52);
      v10 = *(float *)(v8 + 56);
      v12 = (float *)__b;
      while (*v12 >= v11)
      {
        ++v9;
        ++v12;
        if (v9 == 4)
        {
          v12 = (float *)v26;
          goto LABEL_11;
        }
      }
      if ((int)v9 <= 2)
      {
        v13 = 0;
        do
        {
          *(_DWORD *)&v26[4 * v13] = __b[v13 + 2];
          v14 = v13 + 2;
          --v13;
        }
        while (v14 > v9);
      }
LABEL_11:
      v15 = 0;
      *v12 = v11;
      v16 = (float *)v22;
      while (*v16 >= v10)
      {
        ++v15;
        ++v16;
        if (v15 == 4)
        {
          v16 = (float *)&v23;
          goto LABEL_18;
        }
      }
      if ((int)v15 <= 2)
      {
        v17 = 0;
        do
        {
          v22[v17 + 3] = v22[v17 + 2];
          v18 = v17 + 2;
          --v17;
        }
        while (v18 > v15);
      }
LABEL_18:
      *v16 = v10;
    }
  }
  while (v7++ < v6);
  result = v25;
  v21 = v22[2];
  *(float *)a3 = v25;
  *((_DWORD *)a3 + 1) = v21;
  return result;
}

float32x2_t ma::MotionFilter::GaussianFilter(ma::FrameBuffer **this, int a2, float32x2_t *a3)
{
  __int128 v6;
  int v7;
  int v8;
  int v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  float v13;
  __int32 v14;
  int v15;
  __int128 v16;
  float32x2_t result;
  int32x2_t v18[2];
  float32x2_t v19;
  int v20;
  float32x2_t v21[2];

  ma::Translation::Translation((uint64_t)v21);
  ma::Translation::Translation((uint64_t)v21);
  if (a2 >= 4)
    v7 = 4;
  else
    v7 = a2;
  v8 = -v7;
  v9 = 4 * *((unsigned __int8 *)this + 9);
  LODWORD(v6) = 0;
  v18[0] = (int32x2_t)v6;
  if (v9 >= v8)
  {
    v10 = v9 | 1;
    LODWORD(v6) = 0;
    *(_OWORD *)v18[0].i8 = v6;
    do
    {
      if (a2 + v8 >= *(_DWORD *)*this)
        break;
      v11 = ma::FrameBuffer::Get(*this, a2 + v8);
      if (v11)
      {
        v12 = v11;
        v13 = exp2f((float)((float)((float)v8 * -0.5) * (float)v8) / 10000.0);
        v19.i32[0] = ma::Translation::operator*((float *)(v12 + 52), v13);
        v19.i32[1] = v14;
        v20 = v15;
        ma::Translation::operator+=(v21, &v19);
        v16 = *(_OWORD *)v18[0].i8;
        *(float *)&v16 = *(float *)v18[0].i32 + v13;
        *(_OWORD *)v18[0].i8 = v16;
      }
      ++v8;
    }
    while (v10 != v8);
  }
  result = vdiv_f32(v21[0], (float32x2_t)vdup_lane_s32(v18[0], 0));
  *a3 = result;
  return result;
}

void ma::MotionFilter::BilateralFilter(ma::FrameBuffer **this, int a2, float32x2_t *a3)
{
  int v6;
  uint64_t v7;
  __int128 v8;
  int v9;
  int v10;
  int v11;
  int v12;
  int v13;
  uint64_t v14;
  float *v15;
  float v16;
  __int32 v17;
  int v18;
  float v19;
  float v20;
  __int32 v21;
  int v22;
  __int128 v23;
  float32x2_t v24;
  __int128 v25;
  float32x2_t v26;
  int v27;
  float32x2_t v28[2];
  uint64_t v29;
  int v30;

  v6 = *((unsigned __int8 *)this + 8);
  v7 = ma::FrameBuffer::Get(*this, a2);
  v29 = *(_QWORD *)(v7 + 64);
  v30 = *(_DWORD *)(v7 + 72);
  ma::Translation::Translation((uint64_t)v28);
  ma::Translation::Translation((uint64_t)v28);
  if (v6)
    v9 = 1;
  else
    v9 = 19;
  if (v6)
    v10 = 1;
  else
    v10 = 4;
  if (v9 >= a2)
    v9 = a2;
  v11 = -v9;
  if (*((_BYTE *)this + 9))
    v12 = v10;
  else
    v12 = 0;
  if (v12 < v11)
    goto LABEL_21;
  v13 = v12 + 1;
  LODWORD(v8) = 0;
  v25 = v8;
  do
  {
    if (a2 + v11 >= *(_DWORD *)*this)
      break;
    if (v11)
    {
      v14 = ma::FrameBuffer::Get(*this, a2 + v11);
      if (v14)
      {
        v15 = (float *)v14;
        v16 = exp2f((float)((float)((float)v11 * -0.5) * (float)v11) / 10000.0);
        v15 += 16;
        v26.i32[0] = ma::Translation::operator-(v15, (float *)&v29);
        v26.i32[1] = v17;
        v27 = v18;
        v19 = ma::Translation::AbsSum((ma::Translation *)&v26);
        v20 = v16 * exp2f((float)(v19 * (float)(v19 * -0.5)) / 1600.0);
        v26.i32[0] = ma::Translation::operator*(v15, v20);
        v26.i32[1] = v21;
        v27 = v22;
        ma::Translation::operator+=(v28, &v26);
        v23 = v25;
        *(float *)&v23 = *(float *)&v25 + v20;
        v25 = v23;
      }
    }
    ++v11;
  }
  while (v13 != v11);
  if (*(float *)&v25 <= 0.0)
LABEL_21:
    v24 = *a3;
  else
    v24 = vdiv_f32(v28[0], (float32x2_t)vdup_lane_s32(*(int32x2_t *)&v25, 0));
  if (!*((_BYTE *)this + 8) || vaddv_f32(vabs_f32(v24)) < (float)(ma::Translation::AbsSum((ma::Translation *)a3) * 1.6))
    *a3 = v24;
}

ma::MetaDataAnalysis *ma::MetaDataAnalysis::MetaDataAnalysis(ma::MetaDataAnalysis *this, FrameBuffer *a2)
{
  *(_BYTE *)this = 0;
  *((_QWORD *)this + 1) = a2;
  ma::Translation::Translation((uint64_t)this + 16);
  ma::Translation::Translation((uint64_t)this + 28);
  return this;
}

void ma::MetaDataAnalysis::EstimateMetadataFromMotion(ma::MetaDataAnalysis *this, int a2, const ma::Translation *a3, int a4)
{
  int v7;
  uint64_t v8;
  uint64_t v9;
  __int128 v10;
  Float64 Seconds;
  __int32 v12;
  int v13;
  float v14;
  int v15;
  float *v16;
  float *v17;
  __int32 v18;
  int v19;
  int v20;
  float v21;
  unsigned int v22;
  int v23;
  float32x2_t *v24;
  __int32 v25;
  int v26;
  int v27;
  int v28;
  int v29;
  int v30;
  int v31;
  int v32;
  int v33;
  float v34;
  float v35;
  int v36;
  int v37;
  __int32 v38;
  int v39;
  int v40;
  int v41;
  __int128 v42;
  Float64 v43;
  CMTime v44;
  float v45[3];
  float v46;
  int v47;
  int v48;
  float v49;
  int v50;
  int v51;
  unint64_t v52;
  int v53;
  CMTime time;

  if (a4)
    v7 = 10;
  else
    v7 = 30;
  v8 = ma::FrameBuffer::Get(*((ma::FrameBuffer **)this + 1), a2);
  v9 = v8;
  if (*(_BYTE *)this)
  {
    v10 = *(_OWORD *)(v8 + 4);
    time.epoch = *(_QWORD *)(v8 + 20);
    *(_OWORD *)&time.value = v10;
    Seconds = CMTimeGetSeconds(&time);
    printf("before filter: frame(%d): time_stamp=%f, ave_motion=(%f,%f)\n", a2, Seconds, *(float *)(v9 + 52), *(float *)(v9 + 56));
  }
  ma::Translation::operator=(v9 + 52, (uint64_t)a3);
  if (a2)
  {
    LODWORD(v52) = ma::Translation::operator-((float *)(v9 + 64), (float *)a3);
    HIDWORD(v52) = v12;
    v53 = v13;
    v14 = ma::Translation::AbsSum((ma::Translation *)&v52);
    v15 = a2 - 1;
    if (v14 >= 20.0)
    {
      v16 = (float *)(ma::FrameBuffer::Get(*((ma::FrameBuffer **)this + 1), v15) + 52);
      v17 = (float *)(v9 + 52);
    }
    else
    {
      v16 = (float *)(ma::FrameBuffer::Get(*((ma::FrameBuffer **)this + 1), v15) + 52);
      v17 = (float *)(v9 + 64);
    }
    LODWORD(v52) = ma::Translation::operator-(v17, v16);
    HIDWORD(v52) = v18;
    v53 = v19;
    ma::Translation::operator=(v9 + 92, (uint64_t)&v52);
  }
  else
  {
    ma::Translation::Translation(v9 + 92);
  }
  v20 = *(_DWORD *)v9 + 1;
  if (*(_DWORD *)v9 >= v7)
  {
    v24 = (float32x2_t *)(ma::FrameBuffer::Get(*((ma::FrameBuffer **)this + 1), *(_DWORD *)v9 - v7) + 92);
    LODWORD(v52) = ma::Translation::operator-((float *)(v9 + 92), (float *)v24);
    HIDWORD(v52) = v25;
    v53 = v26;
    ma::Translation::operator+=((float32x2_t *)this + 2, (float32x2_t *)&v52);
    LODWORD(v49) = ma::Translation::operator*((float32x2_t *)(v9 + 92), (float32x2_t *)(v9 + 92)).u32[0];
    v50 = v27;
    v51 = v28;
    LODWORD(v46) = ma::Translation::operator*(v24, v24).u32[0];
    v47 = v29;
    v48 = v30;
    v21 = ma::Translation::operator-(&v49, &v46);
  }
  else
  {
    ma::Translation::operator+=((float32x2_t *)this + 2, (float32x2_t *)(v9 + 92));
    LODWORD(v21) = ma::Translation::operator*((float32x2_t *)(v9 + 92), (float32x2_t *)(v9 + 92)).u32[0];
  }
  v52 = __PAIR64__(v22, LODWORD(v21));
  v53 = v23;
  ma::Translation::operator+=((float32x2_t *)((char *)this + 28), (float32x2_t *)&v52);
  if (v7 >= v20)
    v31 = v20;
  else
    v31 = v7;
  v49 = ma::Translation::operator/((float *)this + 7, (float)v31);
  v50 = v32;
  v51 = v33;
  LODWORD(v45[0]) = ma::Translation::operator*((float32x2_t *)this + 2, (float32x2_t *)this + 2).u32[0];
  v45[1] = v34;
  v45[2] = v35;
  v46 = ma::Translation::operator/(v45, (float)(v31 * v31));
  v47 = v36;
  v48 = v37;
  LODWORD(v52) = ma::Translation::operator-(&v49, &v46);
  HIDWORD(v52) = v38;
  v53 = v39;
  v49 = ma::Translation::operator*((float *)&v52, 0.00025);
  v50 = v40;
  v51 = v41;
  ma::Translation::operator=(v9 + 112, (uint64_t)&v49);
  if (*(_BYTE *)this)
  {
    v42 = *(_OWORD *)(v9 + 4);
    v44.epoch = *(_QWORD *)(v9 + 20);
    *(_OWORD *)&v44.value = v42;
    v43 = CMTimeGetSeconds(&v44);
    printf("frame(%d): time_stamp=%f, ave_motion=(%f,%f), acc_var=(%f, %f), motion_chg=(%f, %f)\n", a2, v43, *(float *)(v9 + 52), *(float *)(v9 + 56), *(float *)(v9 + 112), *(float *)(v9 + 116), *(float *)(v9 + 92), *(float *)(v9 + 96));
  }
}

void sub_1B6CAE820(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
  if (a2)
    __clang_call_terminate(exception_object);
  _Unwind_Resume(exception_object);
}

void sub_1B6CAEA54(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_1B6CAEDE4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void *a22,void *a23)
{

  _Unwind_Resume(a1);
}

void sub_1B6CAEEEC(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1B6CAEFD8(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1B6CAF35C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, void *a11, void *a12)
{
  void *v12;
  void *v13;

  _Unwind_Resume(a1);
}

void sub_1B6CAF514(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_1B6CAF6A4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  _Unwind_Resume(a1);
}

void sub_1B6CAFD24(_Unwind_Exception *a1, uint64_t a2, ...)
{
  void *v2;
  uint64_t v4;
  va_list va;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  va_list va1;
  uint64_t v10;
  uint64_t v11;
  va_list va2;

  va_start(va2, a2);
  va_start(va1, a2);
  va_start(va, a2);
  v4 = va_arg(va1, _QWORD);
  v6 = va_arg(va1, _QWORD);
  v7 = va_arg(va1, _QWORD);
  va_copy(va2, va1);
  v8 = va_arg(va2, _QWORD);
  v10 = va_arg(va2, _QWORD);
  v11 = va_arg(va2, _QWORD);
  CVPixelBufferLock::~CVPixelBufferLock((CVPixelBufferLock *)va);
  CVPixelBufferLock::~CVPixelBufferLock((CVPixelBufferLock *)va1);

  CF<opaqueCMSampleBuffer *>::~CF((const void **)va2);
  _Unwind_Resume(a1);
}

void sub_1B6CB0E1C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, void *a4, uint64_t a5, ...)
{
  void *v5;
  void *v6;
  void *v7;
  const void *v9;
  va_list va;
  const void *v11;
  va_list va1;
  uint64_t v13;
  va_list va2;

  va_start(va2, a5);
  va_start(va1, a5);
  va_start(va, a5);
  v9 = va_arg(va1, const void *);
  va_copy(va2, va1);
  v11 = va_arg(va2, const void *);
  v13 = va_arg(va2, _QWORD);

  CF<opaqueCMSampleBuffer *>::~CF((const void **)va);
  CF<opaqueCMSampleBuffer *>::~CF((const void **)va1);

  CF<opaqueCMSampleBuffer *>::~CF((const void **)va2);
  _Unwind_Resume(a1);
}

void sub_1B6CB1180(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1B6CB1478(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  CVPixelBufferLock::~CVPixelBufferLock((CVPixelBufferLock *)&a9);
  _Unwind_Resume(a1);
}

void sub_1B6CB1598(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1B6CB15EC(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1B6CB2A34(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, _Unwind_Exception *exception_object, void *a15, void *a16, void *a17, void *a18, void *a19, void *a20,void *a21,void *a22,void *a23,void *a24,void *a25,void *a26,void *a27,void *a28,void *a29,void *a30,void *a31,void *a32,void *a33,void *a34,void *a35,const void *a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,void *a42)
{
  void *v42;
  void *v43;
  void *v44;
  void *v45;
  void *v46;
  void *v47;
  uint64_t v48;

  CVPixelBufferLock::~CVPixelBufferLock((CVPixelBufferLock *)(v48 - 208));
  CF<opaqueCMSampleBuffer *>::~CF(&a36);

  _Unwind_Resume(a1);
}

void sub_1B6CB3130(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1B6CB328C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1B6CB4F00(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, uint64_t a14, uint64_t a15, void *a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void *a22,void *a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,uint64_t a28,void *a29,void *a30,uint64_t a31,void *a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,_Unwind_Exception *exception_object,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,void *__p,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,char a52,_QWORD *a53,uint64_t a54,char a55,_QWORD *a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,void *a62)
{
  void *v62;
  void *v63;
  void *v64;
  void *v65;

  if (__p)
    operator delete(__p);

  std::__tree<unsigned long>::destroy((uint64_t)&a52, a53);
  std::__tree<unsigned long>::destroy((uint64_t)&a55, a56);

  _Unwind_Resume(a1);
}

void sub_1B6CB5490(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1B6CB55EC(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1B6CB5C08(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, uint64_t a15, void *a16, uint64_t a17, uint64_t a18, void *a19, void *a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,void *a27)
{
  void *v27;
  void *v28;
  void *v29;
  void *v30;

  _Unwind_Resume(a1);
}

void sub_1B6CB61B0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void *a22,void *a23)
{
  void *v23;
  void *v24;

  _Unwind_Resume(a1);
}

void sub_1B6CB671C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void *a22,void *a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,void *a30)
{

  _Unwind_Resume(a1);
}

void sub_1B6CB68F4(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1B6CB6A50(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1B6CB6C04(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_1B6CB7008(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  void *v14;
  void *v15;
  void *v16;
  void *v17;
  void *v18;
  void *v19;

  _Unwind_Resume(a1);
}

void sub_1B6CB7190(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1B6CB72EC(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1B6CB7680(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;

  _Unwind_Resume(a1);
}

void sub_1B6CB7B80(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18)
{
  void *v18;
  void *v19;
  void *v20;
  void *v21;
  void *v22;
  void *v23;

  _Unwind_Resume(a1);
}

void sub_1B6CB7F10(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *a16)
{
  void *v16;

  _Unwind_Resume(a1);
}

void sub_1B6CB82B4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *a20)
{
  void *v20;

  _Unwind_Resume(a1);
}

void sub_1B6CB889C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15, uint64_t a16, _Unwind_Exception *exception_object, void *a18, void *a19, void *a20,void *a21,void *a22,void *a23,void *a24,void *a25,void *a26,void *a27,void *a28,void *a29,void *a30,char a31,uint64_t a32,uint64_t a33,char a34,uint64_t a35,uint64_t a36,char a37,_QWORD *a38,uint64_t a39,char a40,_QWORD *a41)
{
  void *v41;
  void *v42;
  void *v43;
  void *v44;
  void *v45;
  void *v46;
  void *v47;
  void *v48;
  void *v49;
  uint64_t v50;

  std::__tree<unsigned long>::destroy((uint64_t)&a37, a38);
  std::__tree<unsigned long>::destroy((uint64_t)&a40, a41);

  std::__tree<unsigned long>::destroy(v50 - 208, *(_QWORD **)(v50 - 200));
  std::__tree<unsigned long>::destroy(v50 - 184, *(_QWORD **)(v50 - 176));

  _Unwind_Resume(a1);
}

void sub_1B6CB9114(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_1B6CB92D8(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_1B6CB954C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{

  _Unwind_Resume(a1);
}

void sub_1B6CB987C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1B6CB9930(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1B6CB9A28(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1B6CB9D48(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  _Unwind_Resume(a1);
}

float VCPPFResolutionQuality(unint64_t a1)
{
  float result;

  result = 0.25;
  if (a1 >= 0x400)
  {
    result = 1.0;
    if (a1 <= 0xC00)
      return (float)((float)a1 * 0.00036621) + -0.125;
  }
  return result;
}

float VCPPFFaceAreaQuality(float a1)
{
  BOOL v1;
  float result;

  v1 = a1 > 0.5 || a1 < 0.1;
  result = (float)(a1 * 0.5) + 0.75;
  if (v1)
    return 0.8;
  return result;
}

void std::__tree<unsigned long>::destroy(uint64_t a1, _QWORD *a2)
{
  if (a2)
  {
    std::__tree<unsigned long>::destroy(a1, *a2);
    std::__tree<unsigned long>::destroy(a1, a2[1]);
    operator delete(a2);
  }
}

uint64_t *std::__tree<unsigned long>::__emplace_unique_key_args<unsigned long,unsigned long const&>(uint64_t **a1, unint64_t *a2, uint64_t *a3)
{
  uint64_t *v5;
  uint64_t **v6;
  unint64_t v7;
  uint64_t **v8;
  unint64_t v9;
  uint64_t *v10;

  v6 = a1 + 1;
  v5 = a1[1];
  if (v5)
  {
    v7 = *a2;
    while (1)
    {
      while (1)
      {
        v8 = (uint64_t **)v5;
        v9 = v5[4];
        if (v7 >= v9)
          break;
        v5 = *v8;
        v6 = v8;
        if (!*v8)
          goto LABEL_10;
      }
      if (v9 >= v7)
        break;
      v5 = v8[1];
      if (!v5)
      {
        v6 = v8 + 1;
        goto LABEL_10;
      }
    }
  }
  else
  {
    v8 = a1 + 1;
LABEL_10:
    v10 = (uint64_t *)operator new(0x28uLL);
    v10[4] = *a3;
    std::__tree<unsigned long>::__insert_node_at(a1, (uint64_t)v8, v6, v10);
    return v10;
  }
  return (uint64_t *)v8;
}

uint64_t *std::__tree<unsigned long>::__insert_node_at(uint64_t **a1, uint64_t a2, uint64_t **a3, uint64_t *a4)
{
  uint64_t *v5;
  uint64_t *result;

  *a4 = 0;
  a4[1] = 0;
  a4[2] = a2;
  *a3 = a4;
  v5 = (uint64_t *)**a1;
  if (v5)
  {
    *a1 = v5;
    a4 = *a3;
  }
  result = std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(a1[1], a4);
  a1[2] = (uint64_t *)((char *)a1[2] + 1);
  return result;
}

uint64_t *std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(uint64_t *result, uint64_t *a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t *v4;
  _BYTE *v5;
  int v6;
  uint64_t v7;
  int v8;
  uint64_t **v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  *((_BYTE *)a2 + 24) = a2 == result;
  if (a2 != result)
  {
    do
    {
      v2 = (uint64_t *)a2[2];
      if (*((_BYTE *)v2 + 24))
        return result;
      v3 = (uint64_t *)v2[2];
      v4 = (uint64_t *)*v3;
      if ((uint64_t *)*v3 == v2)
      {
        v7 = v3[1];
        if (!v7 || (v8 = *(unsigned __int8 *)(v7 + 24), v5 = (_BYTE *)(v7 + 24), v8))
        {
          if ((uint64_t *)*v2 == a2)
          {
            v9 = (uint64_t **)a2[2];
          }
          else
          {
            v9 = (uint64_t **)v2[1];
            v10 = *v9;
            v2[1] = (uint64_t)*v9;
            if (v10)
            {
              v10[2] = (uint64_t)v2;
              v3 = (uint64_t *)v2[2];
            }
            v9[2] = v3;
            *(_QWORD *)(v2[2] + 8 * (*(_QWORD *)v2[2] != (_QWORD)v2)) = v9;
            *v9 = v2;
            v2[2] = (uint64_t)v9;
            v3 = v9[2];
            v2 = (uint64_t *)*v3;
          }
          *((_BYTE *)v9 + 24) = 1;
          *((_BYTE *)v3 + 24) = 0;
          v13 = v2[1];
          *v3 = v13;
          if (v13)
            *(_QWORD *)(v13 + 16) = v3;
          v2[2] = v3[2];
          *(_QWORD *)(v3[2] + 8 * (*(_QWORD *)v3[2] != (_QWORD)v3)) = v2;
          v2[1] = (uint64_t)v3;
          goto LABEL_27;
        }
      }
      else if (!v4 || (v6 = *((unsigned __int8 *)v4 + 24), v5 = v4 + 3, v6))
      {
        if ((uint64_t *)*v2 == a2)
        {
          v11 = a2[1];
          *v2 = v11;
          if (v11)
          {
            *(_QWORD *)(v11 + 16) = v2;
            v3 = (uint64_t *)v2[2];
          }
          a2[2] = (uint64_t)v3;
          *(_QWORD *)(v2[2] + 8 * (*(_QWORD *)v2[2] != (_QWORD)v2)) = a2;
          a2[1] = (uint64_t)v2;
          v2[2] = (uint64_t)a2;
          v3 = (uint64_t *)a2[2];
        }
        else
        {
          a2 = (uint64_t *)a2[2];
        }
        *((_BYTE *)a2 + 24) = 1;
        *((_BYTE *)v3 + 24) = 0;
        v2 = (uint64_t *)v3[1];
        v12 = *v2;
        v3[1] = *v2;
        if (v12)
          *(_QWORD *)(v12 + 16) = v3;
        v2[2] = v3[2];
        *(_QWORD *)(v3[2] + 8 * (*(_QWORD *)v3[2] != (_QWORD)v3)) = v2;
        *v2 = (uint64_t)v3;
LABEL_27:
        v3[2] = (uint64_t)v2;
        return result;
      }
      *((_BYTE *)v2 + 24) = 1;
      a2 = v3;
      *((_BYTE *)v3 + 24) = v3 == result;
      *v5 = 1;
    }
    while (v3 != result);
  }
  return result;
}

void *std::__allocate_at_least[abi:ne180100]<std::allocator<std::tuple<float,unsigned long,unsigned long>>>(uint64_t a1, unint64_t a2)
{
  if (a2 >= 0xAAAAAAAAAAAAAABLL)
    std::__throw_bad_array_new_length[abi:ne180100]();
  return operator new(24 * a2);
}

uint64_t std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,+[VCPPhotosFace facesFromFaceObservations:humanObservations:animalObservations:sourceWidth:sourceHeight:visionRequests:blurScorePerFace:exposureScorePerFace:tooSmallFaceObservations:processingVersion:]::$_0 &,std::tuple<float,unsigned long,unsigned long> *>(uint64_t result, uint64_t a2, uint64_t a3)
{
  float v3;
  float v4;
  float v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t *v10;
  float v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  v3 = *(float *)a2;
  v4 = *(float *)result;
  v5 = *(float *)a3;
  if (*(float *)a2 > *(float *)result)
  {
    if (v5 <= v3)
    {
      *(float *)result = v3;
      *(float *)a2 = v4;
      v13 = *(_QWORD *)(result + 8);
      *(_QWORD *)(result + 8) = *(_QWORD *)(a2 + 8);
      v6 = (uint64_t *)(a2 + 16);
      v14 = *(_QWORD *)(a2 + 16);
      *(_QWORD *)(a2 + 8) = v13;
      v15 = *(_QWORD *)(result + 16);
      *(_QWORD *)(result + 16) = v14;
      *(_QWORD *)(a2 + 16) = v15;
      if (*(float *)a3 <= v4)
        return result;
      *(_DWORD *)a2 = *(_DWORD *)a3;
      *(float *)a3 = v4;
      v7 = *(_QWORD *)(a2 + 8);
      *(_QWORD *)(a2 + 8) = *(_QWORD *)(a3 + 8);
    }
    else
    {
      v6 = (uint64_t *)(result + 16);
      *(float *)result = v5;
      *(float *)a3 = v4;
      v7 = *(_QWORD *)(result + 8);
      *(_QWORD *)(result + 8) = *(_QWORD *)(a3 + 8);
    }
    *(_QWORD *)(a3 + 8) = v7;
    v10 = (uint64_t *)(a3 + 16);
    goto LABEL_10;
  }
  if (v5 > v3)
  {
    *(float *)a2 = v5;
    *(float *)a3 = v3;
    v8 = *(_QWORD *)(a2 + 8);
    *(_QWORD *)(a2 + 8) = *(_QWORD *)(a3 + 8);
    *(_QWORD *)(a3 + 8) = v8;
    v10 = (uint64_t *)(a2 + 16);
    v9 = *(_QWORD *)(a2 + 16);
    *(_QWORD *)(a2 + 16) = *(_QWORD *)(a3 + 16);
    *(_QWORD *)(a3 + 16) = v9;
    v11 = *(float *)result;
    if (*(float *)a2 > *(float *)result)
    {
      *(_DWORD *)result = *(_DWORD *)a2;
      *(float *)a2 = v11;
      v12 = *(_QWORD *)(result + 8);
      *(_QWORD *)(result + 8) = *(_QWORD *)(a2 + 8);
      *(_QWORD *)(a2 + 8) = v12;
      v6 = (uint64_t *)(result + 16);
LABEL_10:
      v16 = *v6;
      *v6 = *v10;
      *v10 = v16;
    }
  }
  return result;
}

BOOL std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,+[VCPPhotosFace facesFromFaceObservations:humanObservations:animalObservations:sourceWidth:sourceHeight:visionRequests:blurScorePerFace:exposureScorePerFace:tooSmallFaceObservations:processingVersion:]::$_0 &,std::tuple<float,unsigned long,unsigned long> *>(uint64_t a1, uint64_t a2)
{
  unint64_t v4;
  _BOOL8 result;
  float v6;
  float v7;
  uint64_t v8;
  uint64_t v9;
  float *v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  float v14;
  float v15;
  __int128 v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  float v21;
  float v22;
  uint64_t v23;
  uint64_t v24;
  float v25;
  float v26;
  uint64_t v27;
  uint64_t v28;
  __int128 v29;
  float v30;
  __int128 v31;
  float v32;
  __int128 v33;

  v4 = 0xAAAAAAAAAAAAAAABLL * ((a2 - a1) >> 3);
  result = 1;
  switch(v4)
  {
    case 0uLL:
    case 1uLL:
      return result;
    case 2uLL:
      v6 = *(float *)(a2 - 24);
      v7 = *(float *)a1;
      if (v6 > *(float *)a1)
      {
        *(float *)a1 = v6;
        *(float *)(a2 - 24) = v7;
        v8 = *(_QWORD *)(a1 + 8);
        *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 - 16);
        *(_QWORD *)(a2 - 16) = v8;
        v9 = *(_QWORD *)(a1 + 16);
        *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 - 8);
        *(_QWORD *)(a2 - 8) = v9;
      }
      return result;
    case 3uLL:
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,+[VCPPhotosFace facesFromFaceObservations:humanObservations:animalObservations:sourceWidth:sourceHeight:visionRequests:blurScorePerFace:exposureScorePerFace:tooSmallFaceObservations:processingVersion:]::$_0 &,std::tuple<float,unsigned long,unsigned long> *>(a1, a1 + 24, a2 - 24);
      return 1;
    case 4uLL:
      std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,+[VCPPhotosFace facesFromFaceObservations:humanObservations:animalObservations:sourceWidth:sourceHeight:visionRequests:blurScorePerFace:exposureScorePerFace:tooSmallFaceObservations:processingVersion:]::$_0 &,std::tuple<float,unsigned long,unsigned long> *>(a1, a1 + 24, a1 + 48, a2 - 24);
      return 1;
    case 5uLL:
      std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,+[VCPPhotosFace facesFromFaceObservations:humanObservations:animalObservations:sourceWidth:sourceHeight:visionRequests:blurScorePerFace:exposureScorePerFace:tooSmallFaceObservations:processingVersion:]::$_0 &,std::tuple<float,unsigned long,unsigned long> *>(a1, a1 + 24, a1 + 48, a1 + 72);
      v21 = *(float *)(a2 - 24);
      v22 = *(float *)(a1 + 72);
      if (v21 > v22)
      {
        *(float *)(a1 + 72) = v21;
        *(float *)(a2 - 24) = v22;
        v23 = *(_QWORD *)(a1 + 80);
        *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 - 16);
        *(_QWORD *)(a2 - 16) = v23;
        v24 = *(_QWORD *)(a1 + 88);
        *(_QWORD *)(a1 + 88) = *(_QWORD *)(a2 - 8);
        *(_QWORD *)(a2 - 8) = v24;
        v25 = *(float *)(a1 + 72);
        v26 = *(float *)(a1 + 48);
        if (v25 > v26)
        {
          *(float *)(a1 + 48) = v25;
          *(float *)(a1 + 72) = v26;
          v27 = *(_QWORD *)(a1 + 80);
          v28 = *(_QWORD *)(a1 + 88);
          v29 = *(_OWORD *)(a1 + 56);
          *(_QWORD *)(a1 + 56) = v27;
          *(_QWORD *)(a1 + 64) = v28;
          *(_OWORD *)(a1 + 80) = v29;
          v30 = *(float *)(a1 + 24);
          if (v25 > v30)
          {
            *(float *)(a1 + 24) = v25;
            *(float *)(a1 + 48) = v30;
            v31 = *(_OWORD *)(a1 + 32);
            *(_QWORD *)(a1 + 32) = v27;
            *(_QWORD *)(a1 + 40) = v28;
            *(_OWORD *)(a1 + 56) = v31;
            v32 = *(float *)a1;
            if (v25 > *(float *)a1)
            {
              *(float *)a1 = v25;
              *(float *)(a1 + 24) = v32;
              v33 = *(_OWORD *)(a1 + 8);
              *(_QWORD *)(a1 + 8) = v27;
              *(_QWORD *)(a1 + 16) = v28;
              *(_OWORD *)(a1 + 32) = v33;
            }
          }
        }
      }
      return 1;
    default:
      v10 = (float *)(a1 + 48);
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,+[VCPPhotosFace facesFromFaceObservations:humanObservations:animalObservations:sourceWidth:sourceHeight:visionRequests:blurScorePerFace:exposureScorePerFace:tooSmallFaceObservations:processingVersion:]::$_0 &,std::tuple<float,unsigned long,unsigned long> *>(a1, a1 + 24, a1 + 48);
      v11 = a1 + 72;
      if (a1 + 72 == a2)
        return 1;
      v12 = 0;
      v13 = 0;
      break;
  }
  while (1)
  {
    v14 = *(float *)v11;
    v15 = *v10;
    if (*(float *)v11 > *v10)
    {
      v16 = *(_OWORD *)(v11 + 8);
      v17 = v12;
      while (1)
      {
        v18 = a1 + v17;
        *(float *)(v18 + 72) = v15;
        v19 = *(_QWORD *)(a1 + v17 + 64);
        *(_QWORD *)(v18 + 80) = *(_QWORD *)(a1 + v17 + 56);
        *(_QWORD *)(v18 + 88) = v19;
        if (v17 == -48)
          break;
        v15 = *(float *)(v18 + 24);
        v17 -= 24;
        if (v14 <= v15)
        {
          v20 = a1 + v17 + 72;
          goto LABEL_13;
        }
      }
      v20 = a1;
LABEL_13:
      *(float *)v20 = v14;
      *(_OWORD *)(v20 + 8) = v16;
      if (++v13 == 8)
        return v11 + 24 == a2;
    }
    v10 = (float *)v11;
    v12 += 24;
    v11 += 24;
    if (v11 == a2)
      return 1;
  }
}

uint64_t std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,+[VCPPhotosFace facesFromFaceObservations:humanObservations:animalObservations:sourceWidth:sourceHeight:visionRequests:blurScorePerFace:exposureScorePerFace:tooSmallFaceObservations:processingVersion:]::$_0 &,std::tuple<float,unsigned long,unsigned long> *>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t result;
  float v9;
  uint64_t v10;
  uint64_t v11;
  float v12;
  uint64_t v13;
  uint64_t v14;
  float v15;
  uint64_t v16;
  uint64_t v17;

  result = std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,+[VCPPhotosFace facesFromFaceObservations:humanObservations:animalObservations:sourceWidth:sourceHeight:visionRequests:blurScorePerFace:exposureScorePerFace:tooSmallFaceObservations:processingVersion:]::$_0 &,std::tuple<float,unsigned long,unsigned long> *>(a1, a2, a3);
  v9 = *(float *)a3;
  if (*(float *)a4 > *(float *)a3)
  {
    *(_DWORD *)a3 = *(_DWORD *)a4;
    *(float *)a4 = v9;
    v10 = *(_QWORD *)(a3 + 8);
    *(_QWORD *)(a3 + 8) = *(_QWORD *)(a4 + 8);
    *(_QWORD *)(a4 + 8) = v10;
    v11 = *(_QWORD *)(a3 + 16);
    *(_QWORD *)(a3 + 16) = *(_QWORD *)(a4 + 16);
    *(_QWORD *)(a4 + 16) = v11;
    v12 = *(float *)a2;
    if (*(float *)a3 > *(float *)a2)
    {
      *(_DWORD *)a2 = *(_DWORD *)a3;
      *(float *)a3 = v12;
      v13 = *(_QWORD *)(a2 + 8);
      *(_QWORD *)(a2 + 8) = *(_QWORD *)(a3 + 8);
      *(_QWORD *)(a3 + 8) = v13;
      v14 = *(_QWORD *)(a2 + 16);
      *(_QWORD *)(a2 + 16) = *(_QWORD *)(a3 + 16);
      *(_QWORD *)(a3 + 16) = v14;
      v15 = *(float *)a1;
      if (*(float *)a2 > *(float *)a1)
      {
        *(_DWORD *)a1 = *(_DWORD *)a2;
        *(float *)a2 = v15;
        v16 = *(_QWORD *)(a1 + 8);
        *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
        *(_QWORD *)(a2 + 8) = v16;
        v17 = *(_QWORD *)(a1 + 16);
        *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
        *(_QWORD *)(a2 + 16) = v17;
      }
    }
  }
  return result;
}

uint64_t *std::set<unsigned long>::set[abi:ne180100](uint64_t *a1, uint64_t a2)
{
  a1[2] = 0;
  a1[1] = 0;
  *a1 = (uint64_t)(a1 + 1);
  std::set<unsigned long>::insert[abi:ne180100]<std::__tree_const_iterator<unsigned long,std::__tree_node<unsigned long,void *> *,long>>(a1, *(_QWORD **)a2, (_QWORD *)(a2 + 8));
  return a1;
}

void sub_1B6CBB28C(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::__tree<unsigned long>::destroy(v1, *(_QWORD **)(v1 + 8));
  _Unwind_Resume(a1);
}

uint64_t *std::set<unsigned long>::insert[abi:ne180100]<std::__tree_const_iterator<unsigned long,std::__tree_node<unsigned long,void *> *,long>>(uint64_t *result, _QWORD *a2, _QWORD *a3)
{
  _QWORD *v4;
  uint64_t **v5;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  BOOL v9;

  if (a2 != a3)
  {
    v4 = a2;
    v5 = (uint64_t **)result;
    v6 = result + 1;
    do
    {
      result = std::__tree<unsigned long>::__emplace_hint_unique_key_args<unsigned long,unsigned long const&>(v5, v6, v4 + 4, v4 + 4);
      v7 = (_QWORD *)v4[1];
      if (v7)
      {
        do
        {
          v8 = v7;
          v7 = (_QWORD *)*v7;
        }
        while (v7);
      }
      else
      {
        do
        {
          v8 = (_QWORD *)v4[2];
          v9 = *v8 == (_QWORD)v4;
          v4 = v8;
        }
        while (!v9);
      }
      v4 = v8;
    }
    while (v8 != a3);
  }
  return result;
}

uint64_t *std::__tree<unsigned long>::__emplace_hint_unique_key_args<unsigned long,unsigned long const&>(uint64_t **a1, _QWORD *a2, unint64_t *a3, uint64_t *a4)
{
  uint64_t **v6;
  uint64_t *v7;
  uint64_t **v8;
  uint64_t v10;
  uint64_t v11;

  v6 = (uint64_t **)std::__tree<unsigned long>::__find_equal<unsigned long>(a1, a2, &v11, &v10, a3);
  v7 = *v6;
  if (!*v6)
  {
    v8 = v6;
    v7 = (uint64_t *)operator new(0x28uLL);
    v7[4] = *a4;
    std::__tree<unsigned long>::__insert_node_at(a1, v11, v8, v7);
  }
  return v7;
}

_QWORD *std::__tree<unsigned long>::__find_equal<unsigned long>(_QWORD *a1, _QWORD *a2, _QWORD *a3, _QWORD *a4, unint64_t *a5)
{
  _QWORD *v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  _QWORD *v10;
  uint64_t v11;
  _QWORD *v12;
  _QWORD *v13;
  BOOL v14;
  unint64_t v15;
  _QWORD *v16;
  _QWORD *v17;
  unint64_t v18;
  _QWORD *v19;
  _QWORD *v20;
  _QWORD *v21;
  unint64_t v22;

  v5 = a1 + 1;
  if (a1 + 1 == a2 || (v6 = *a5, v7 = a2[4], *a5 < v7))
  {
    v8 = *a2;
    if ((_QWORD *)*a1 == a2)
    {
      v10 = a2;
LABEL_17:
      if (v8)
      {
        *a3 = v10;
        return v10 + 1;
      }
      else
      {
        *a3 = a2;
        return a2;
      }
    }
    if (v8)
    {
      v9 = (_QWORD *)*a2;
      do
      {
        v10 = v9;
        v9 = (_QWORD *)v9[1];
      }
      while (v9);
    }
    else
    {
      v13 = a2;
      do
      {
        v10 = (_QWORD *)v13[2];
        v14 = *v10 == (_QWORD)v13;
        v13 = v10;
      }
      while (v14);
    }
    v15 = *a5;
    if (v10[4] < *a5)
      goto LABEL_17;
    v16 = (_QWORD *)*v5;
    if (*v5)
    {
      do
      {
        while (1)
        {
          v17 = v16;
          v18 = v16[4];
          if (v15 >= v18)
            break;
          v16 = (_QWORD *)*v17;
          v5 = v17;
          if (!*v17)
            goto LABEL_29;
        }
        if (v18 >= v15)
          break;
        v5 = v17 + 1;
        v16 = (_QWORD *)v17[1];
      }
      while (v16);
    }
    else
    {
      v17 = a1 + 1;
    }
LABEL_29:
    *a3 = v17;
    return v5;
  }
  if (v7 >= v6)
  {
    *a3 = a2;
    *a4 = a2;
    return a4;
  }
  v11 = a2[1];
  if (v11)
  {
    v12 = (_QWORD *)a2[1];
    do
    {
      a4 = v12;
      v12 = (_QWORD *)*v12;
    }
    while (v12);
  }
  else
  {
    v19 = a2;
    do
    {
      a4 = (_QWORD *)v19[2];
      v14 = *a4 == (_QWORD)v19;
      v19 = a4;
    }
    while (!v14);
  }
  if (a4 != v5 && v6 >= a4[4])
  {
    v20 = (_QWORD *)*v5;
    if (*v5)
    {
      do
      {
        while (1)
        {
          v21 = v20;
          v22 = v20[4];
          if (v6 >= v22)
            break;
          v20 = (_QWORD *)*v21;
          v5 = v21;
          if (!*v21)
            goto LABEL_48;
        }
        if (v22 >= v6)
          break;
        v5 = v21 + 1;
        v20 = (_QWORD *)v21[1];
      }
      while (v20);
    }
    else
    {
      v21 = a1 + 1;
    }
LABEL_48:
    *a3 = v21;
    return v5;
  }
  if (v11)
  {
    *a3 = a4;
  }
  else
  {
    *a3 = a2;
    return a2 + 1;
  }
  return a4;
}

void sub_1B6CBBCE4(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1B6CBBE94(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, objc_super a9)
{
  a9.super_class = (Class)VCPCNNEspressoContext;
  -[_Unwind_Exception dealloc](&a9, sel_dealloc);
  _Unwind_Resume(a1);
}

uint64_t VCPProtoMoviePetsFaceResultReadFrom(uint64_t a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  char v14;
  uint64_t v16;
  int v17;
  unint64_t v19;
  VCPProtoBounds *v20;
  uint64_t v21;
  unint64_t v22;
  int v23;
  uint64_t result;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) < *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
  {
    v7 = (int *)MEMORY[0x1E0D82BB8];
    do
    {
      if (*(_BYTE *)(a2 + *v5))
        return *(_BYTE *)(a2 + *v5) == 0;
      v8 = 0;
      v9 = 0;
      v10 = 0;
      while (1)
      {
        v11 = *v3;
        v12 = *(_QWORD *)(a2 + v11);
        v13 = v12 + 1;
        if (v12 == -1 || v13 > *(_QWORD *)(a2 + *v4))
          break;
        v14 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
        *(_QWORD *)(a2 + v11) = v13;
        v10 |= (unint64_t)(v14 & 0x7F) << v8;
        if ((v14 & 0x80) == 0)
          goto LABEL_12;
        v8 += 7;
        if (v9++ >= 9)
        {
          v10 = 0;
          v16 = *v5;
          v17 = *(unsigned __int8 *)(a2 + v16);
          goto LABEL_14;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
      v16 = *v5;
      v17 = *(unsigned __int8 *)(a2 + v16);
      if (*(_BYTE *)(a2 + v16))
        v10 = 0;
LABEL_14:
      if (v17 || (v10 & 7) == 4)
        return *(_BYTE *)(a2 + *v5) == 0;
      v19 = v10 >> 3;
      if ((v10 >> 3) == 3)
      {
        v21 = *v3;
        v22 = *(_QWORD *)(a2 + v21);
        if (v22 <= 0xFFFFFFFFFFFFFFFBLL && v22 + 4 <= *(_QWORD *)(a2 + *v4))
        {
          v23 = *(_DWORD *)(*(_QWORD *)(a2 + *v7) + v22);
          *(_QWORD *)(a2 + v21) = v22 + 4;
        }
        else
        {
          *(_BYTE *)(a2 + v16) = 1;
          v23 = 0;
        }
        *(_DWORD *)(a1 + 16) = v23;
      }
      else
      {
        if ((_DWORD)v19 == 2)
        {
          v20 = objc_alloc_init(VCPProtoBounds);
          objc_storeStrong((id *)(a1 + 8), v20);
          if (!PBReaderPlaceMark() || !VCPProtoBoundsReadFrom((uint64_t)v20, a2))
          {
LABEL_36:

            return 0;
          }
        }
        else
        {
          if ((_DWORD)v19 != 1)
          {
            result = PBReaderSkipValueWithTag();
            if (!(_DWORD)result)
              return result;
            continue;
          }
          v20 = objc_alloc_init(VCPProtoTimeRange);
          objc_storeStrong((id *)(a1 + 24), v20);
          if (!PBReaderPlaceMark() || !VCPProtoTimeRangeReadFrom((uint64_t)v20, a2))
            goto LABEL_36;
        }
        PBReaderRecallMark();

      }
    }
    while (*(_QWORD *)(a2 + *v3) < *(_QWORD *)(a2 + *v4));
  }
  return *(_BYTE *)(a2 + *v5) == 0;
}

void sub_1B6CBC808(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_1B6CBC900(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  void *v14;
  void *v15;

  _Unwind_Resume(a1);
}

void sub_1B6CBCC44(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_1B6CBCF70(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

uint64_t MAComputeRequest::Initialize(MAComputeRequest *this, const __CFDictionary *a2, uint64_t a3, int (*a4)(void *, CFRange, const __CFData **), void (*a5)(void *, const __CFData *), void *a6)
{
  *((_QWORD *)this + 1) = a3;
  *((_QWORD *)this + 2) = a4;
  *((_QWORD *)this + 3) = a5;
  *((_QWORD *)this + 4) = a6;
  return 0;
}

uint64_t MAComputeRequest::Create(MAComputeRequest *this, const __CFString *a2, const __CFDictionary *a3, uint64_t a4, int (*a5)(void *, CFRange, const __CFData **), void (*a6)(void *, const __CFData *), char **a7, MAComputeRequest **a8)
{
  char *v15;
  char *v16;
  char *v17;
  char *v18;
  uint64_t v19;

  if (CFEqual(this, CFSTR("ImageAnalysis")))
  {
    v15 = (char *)operator new(0x28uLL, MEMORY[0x1E0DE4E10]);
    v16 = v15;
    if (!v15)
      goto LABEL_8;
    *(_OWORD *)(v15 + 24) = 0u;
    *(_OWORD *)(v15 + 8) = 0u;
    goto LABEL_7;
  }
  if (!CFEqual(this, CFSTR("MovieAnalysis")))
    return 4294967246;
  v18 = (char *)operator new(0x28uLL, MEMORY[0x1E0DE4E10]);
  v16 = v18;
  if (v18)
  {
    *(_OWORD *)(v18 + 24) = 0u;
    *(_OWORD *)(v18 + 8) = 0u;
LABEL_7:
    *(_QWORD *)v16 = v17 + 16;
  }
LABEL_8:
  v19 = (*(uint64_t (**)(char *, const __CFString *, const __CFDictionary *, uint64_t, int (*)(void *, CFRange, const __CFData **), void (*)(void *, const __CFData *)))(*(_QWORD *)v16 + 24))(v16, a2, a3, a4, a5, a6);
  if ((_DWORD)v19)
    (*(void (**)(char *))(*(_QWORD *)v16 + 8))(v16);
  else
    *a7 = v16;
  return v19;
}

uint64_t MAComputeRequest_RegisterClass(_QWORD *a1)
{
  uint64_t result;

  MAComputeRequest_RegisterClass(void *)::sMAComputeRequestClass = 0;
  unk_1EF150D00 = "MAComputeRequestClass";
  qword_1EF150D08 = (uint64_t)MAComputeRequest_Constructor;
  unk_1EF150D10 = 0;
  qword_1EF150D18 = (uint64_t)MAComputeRequest_Destructor;
  unk_1EF150D20 = 0u;
  unk_1EF150D30 = 0u;
  result = _CFRuntimeRegisterClass();
  *a1 = result;
  return result;
}

uint64_t MAComputeRequest_Create(MAComputeRequest *this, const __CFString *a2, const __CFDictionary *a3, uint64_t a4, int (*a5)(void *, CFRange, const __CFData **), void (*a6)(void *, const __CFData *), uint64_t *a7, MAComputeRequest **a8)
{
  uint64_t result;
  uint64_t Instance;
  uint64_t v12;
  char *v13;

  result = 4294967246;
  if (a3)
  {
    if (a4)
    {
      if (a5)
      {
        if (a7)
        {
          v13 = 0;
          result = MAComputeRequest::Create(this, a2, a3, a4, a5, a6, &v13, a8);
          if (!(_DWORD)result)
          {
            if (MAComputeRequest_GetTypeID(void)::once_token != -1)
              dispatch_once_f(&MAComputeRequest_GetTypeID(void)::once_token, &MAComputeRequest_GetTypeID(void)::type_id, (dispatch_function_t)MAComputeRequest_RegisterClass);
            Instance = _CFRuntimeCreateInstance();
            *a7 = Instance;
            if (Instance)
            {
              v12 = Instance;
              result = 0;
              *(_QWORD *)(v12 + 16) = v13;
            }
            else
            {
              if (v13)
                (*(void (**)(char *))(*(_QWORD *)v13 + 8))(v13);
              return 4294967188;
            }
          }
        }
      }
    }
  }
  return result;
}

uint64_t MAComputeRequest_Start(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  if (a1 && a2 && (v2 = *(_QWORD *)(a1 + 16)) != 0)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v2 + 16))(v2);
  else
    return 4294967246;
}

__CFDictionary *MAComputeRequest_ParseOutput(const __CFData *a1)
{
  const unsigned __int8 *BytePtr;
  __CFDictionary *v3;
  _BYTE v5[32];
  _BYTE v6[40];

  MAImageComputeResult::MAImageComputeResult((MAImageComputeResult *)v6);
  BytePtr = CFDataGetBytePtr(a1);
  CFDataGetLength(a1);
  PB::Reader::Reader((PB::Reader *)v5, BytePtr);
  if ((MAImageComputeResult::readFrom((MAImageComputeResult *)v6, (PB::Reader *)v5) & 1) != 0)
    v3 = MAImageComputeResultToCFDictionary((const MAImageComputeResult *)v6);
  else
    v3 = 0;
  MAImageComputeResult::~MAImageComputeResult((MAImageComputeResult *)v6);
  return v3;
}

void sub_1B6CBD39C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_list va;

  va_start(va, a6);
  MAImageComputeResult::~MAImageComputeResult((MAImageComputeResult *)va);
  _Unwind_Resume(a1);
}

uint64_t MAComputeRequest_Constructor(uint64_t result)
{
  *(_QWORD *)(result + 16) = 0;
  return result;
}

uint64_t MAComputeRequest_Destructor(_QWORD *a1)
{
  uint64_t result;

  result = a1[2];
  if (result)
  {
    result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
    a1[2] = 0;
  }
  return result;
}

void sub_1B6CBDA70(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;

  v6 = v5;

  _Unwind_Resume(a1);
}

void sub_1B6CBDBDC(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  _Unwind_Resume(a1);
}

void sub_1B6CBDCD4(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1B6CBDEA8(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1B6CBE018(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1B6CBE1D8(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_1B6CBE48C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_1B6CBF3D8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9, void *a10, void *a11, uint64_t a12, void *a13, uint64_t a14, uint64_t a15, uint64_t a16, void *a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,void *a25)
{

  _Unwind_Resume(a1);
}

void sub_1B6CBF78C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1B6CBF86C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  v3 = v2;

  _Unwind_Resume(a1);
}

void sub_1B6CBF920(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1B6CBFB20(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void sub_1B6CBFDE4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{

  _Unwind_Resume(a1);
}

void sub_1B6CC0218(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11)
{
  void *v11;
  void *v12;

  _Unwind_Resume(a1);
}

void sub_1B6CC0B2C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t VCPProtoAnimatedStickerResultReadFrom(uint64_t a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  char v14;
  uint64_t v16;
  int v17;
  VCPProtoTimeRange *v19;
  uint64_t v20;
  unint64_t v21;
  int v22;
  uint64_t result;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) < *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
  {
    v7 = (int *)MEMORY[0x1E0D82BB8];
    do
    {
      if (*(_BYTE *)(a2 + *v5))
        break;
      v8 = 0;
      v9 = 0;
      v10 = 0;
      while (1)
      {
        v11 = *v3;
        v12 = *(_QWORD *)(a2 + v11);
        v13 = v12 + 1;
        if (v12 == -1 || v13 > *(_QWORD *)(a2 + *v4))
          break;
        v14 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
        *(_QWORD *)(a2 + v11) = v13;
        v10 |= (unint64_t)(v14 & 0x7F) << v8;
        if ((v14 & 0x80) == 0)
          goto LABEL_12;
        v8 += 7;
        if (v9++ >= 9)
        {
          v10 = 0;
          v16 = *v5;
          v17 = *(unsigned __int8 *)(a2 + v16);
          goto LABEL_14;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
      v16 = *v5;
      v17 = *(unsigned __int8 *)(a2 + v16);
      if (*(_BYTE *)(a2 + v16))
        v10 = 0;
LABEL_14:
      if (v17 || (v10 & 7) == 4)
        break;
      if ((v10 >> 3) == 2)
      {
        v20 = *v3;
        v21 = *(_QWORD *)(a2 + v20);
        if (v21 <= 0xFFFFFFFFFFFFFFFBLL && v21 + 4 <= *(_QWORD *)(a2 + *v4))
        {
          v22 = *(_DWORD *)(*(_QWORD *)(a2 + *v7) + v21);
          *(_QWORD *)(a2 + v20) = v21 + 4;
        }
        else
        {
          *(_BYTE *)(a2 + v16) = 1;
          v22 = 0;
        }
        *(_DWORD *)(a1 + 8) = v22;
      }
      else if ((v10 >> 3) == 1)
      {
        v19 = objc_alloc_init(VCPProtoTimeRange);
        objc_storeStrong((id *)(a1 + 16), v19);
        if (!PBReaderPlaceMark() || !VCPProtoTimeRangeReadFrom((uint64_t)v19, a2))
        {

          return 0;
        }
        PBReaderRecallMark();

      }
      else
      {
        result = PBReaderSkipValueWithTag();
        if (!(_DWORD)result)
          return result;
      }
    }
    while (*(_QWORD *)(a2 + *v3) < *(_QWORD *)(a2 + *v4));
  }
  return *(_BYTE *)(a2 + *v5) == 0;
}

void sub_1B6CC2194(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, id location)
{
  id *v17;

  objc_destroyWeak(v17);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

uint64_t VCPProtoImageFeatureResultReadFrom(uint64_t a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  int v15;
  uint64_t v17;
  void *v18;
  uint64_t result;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) < *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
  {
    v7 = (int *)MEMORY[0x1E0D82BB8];
    do
    {
      if (*(_BYTE *)(a2 + *v5))
        break;
      v8 = 0;
      v9 = 0;
      v10 = 0;
      while (1)
      {
        v11 = *v3;
        v12 = *(_QWORD *)(a2 + v11);
        if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
          break;
        v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
        *(_QWORD *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0)
          goto LABEL_12;
        v8 += 7;
        if (v9++ >= 9)
        {
          v10 = 0;
          v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
      v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(_BYTE *)(a2 + *v5))
        v10 = 0;
LABEL_14:
      if (v15 || (v10 & 7) == 4)
        break;
      if ((v10 >> 3) == 1)
      {
        PBReaderReadData();
        v17 = objc_claimAutoreleasedReturnValue();
        v18 = *(void **)(a1 + 8);
        *(_QWORD *)(a1 + 8) = v17;

      }
      else
      {
        result = PBReaderSkipValueWithTag();
        if (!(_DWORD)result)
          return result;
      }
    }
    while (*(_QWORD *)(a2 + *v3) < *(_QWORD *)(a2 + *v4));
  }
  return *(_BYTE *)(a2 + *v5) == 0;
}

void sub_1B6CC42C4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  _Unwind_Resume(a1);
}

void sub_1B6CC4450(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_1B6CC4604(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1B6CC4650(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_1B6CC46E8(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1B6CC4758(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1B6CC47AC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, objc_super a9)
{
  void *v9;
  void *v10;

  v10 = v9;
  a9.receiver = v10;
  a9.super_class = (Class)VCPTimer;
  -[_Unwind_Exception dealloc](&a9, sel_dealloc);
  _Unwind_Resume(a1);
}

void sub_1B6CC49A8(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  _Unwind_Resume(a1);
}

void sub_1B6CC4B38(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

uint64_t VCPProtoImageHumanPoseResultReadFrom(uint64_t a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  char v14;
  BOOL v15;
  uint64_t v16;
  int v17;
  uint64_t v19;
  unint64_t v20;
  int v21;
  uint64_t result;
  VCPProtoBounds *v23;
  char v24;
  unsigned int v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  char v30;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) >= *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
    return *(_BYTE *)(a2 + *v5) == 0;
  v7 = (int *)MEMORY[0x1E0D82BB8];
  while (2)
  {
    if (*(_BYTE *)(a2 + *v5))
      return *(_BYTE *)(a2 + *v5) == 0;
    v8 = 0;
    v9 = 0;
    v10 = 0;
    while (1)
    {
      v11 = *v3;
      v12 = *(_QWORD *)(a2 + v11);
      v13 = v12 + 1;
      if (v12 == -1 || v13 > *(_QWORD *)(a2 + *v4))
        break;
      v14 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
      *(_QWORD *)(a2 + v11) = v13;
      v10 |= (unint64_t)(v14 & 0x7F) << v8;
      if ((v14 & 0x80) == 0)
        goto LABEL_12;
      v8 += 7;
      v15 = v9++ >= 9;
      if (v15)
      {
        v10 = 0;
        v16 = *v5;
        v17 = *(unsigned __int8 *)(a2 + v16);
        goto LABEL_14;
      }
    }
    *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
    v16 = *v5;
    v17 = *(unsigned __int8 *)(a2 + v16);
    if (*(_BYTE *)(a2 + v16))
      v10 = 0;
LABEL_14:
    if (v17 || (v10 & 7) == 4)
      return *(_BYTE *)(a2 + *v5) == 0;
    switch((v10 >> 3))
    {
      case 1u:
        v19 = *v3;
        v20 = *(_QWORD *)(a2 + v19);
        if (v20 <= 0xFFFFFFFFFFFFFFFBLL && v20 + 4 <= *(_QWORD *)(a2 + *v4))
        {
          v21 = *(_DWORD *)(*(_QWORD *)(a2 + *v7) + v20);
          *(_QWORD *)(a2 + v19) = v20 + 4;
        }
        else
        {
          *(_BYTE *)(a2 + v16) = 1;
          v21 = 0;
        }
        *(_DWORD *)(a1 + 16) = v21;
        goto LABEL_43;
      case 2u:
        v23 = objc_alloc_init(VCPProtoBounds);
        objc_storeStrong((id *)(a1 + 8), v23);
        if (!PBReaderPlaceMark() || !VCPProtoBoundsReadFrom((uint64_t)v23, a2))
          goto LABEL_45;
        goto LABEL_36;
      case 3u:
        v24 = 0;
        v25 = 0;
        v26 = 0;
        while (2)
        {
          v27 = *v3;
          v28 = *(_QWORD *)(a2 + v27);
          v29 = v28 + 1;
          if (v28 == -1 || v29 > *(_QWORD *)(a2 + *v4))
          {
            *(_BYTE *)(a2 + *v5) = 1;
          }
          else
          {
            v30 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v28);
            *(_QWORD *)(a2 + v27) = v29;
            v26 |= (unint64_t)(v30 & 0x7F) << v24;
            if (v30 < 0)
            {
              v24 += 7;
              v15 = v25++ >= 9;
              if (v15)
              {
                LODWORD(v26) = 0;
                goto LABEL_40;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(a2 + *v5))
          LODWORD(v26) = 0;
LABEL_40:
        *(_DWORD *)(a1 + 20) = v26;
        goto LABEL_43;
      case 4u:
        v23 = objc_alloc_init(VCPProtoKeypoint);
        objc_msgSend((id)a1, "addKeypoints:", v23);
        if (PBReaderPlaceMark() && VCPProtoKeypointReadFrom((uint64_t)v23, a2))
        {
LABEL_36:
          PBReaderRecallMark();

LABEL_43:
          if (*(_QWORD *)(a2 + *v3) >= *(_QWORD *)(a2 + *v4))
            return *(_BYTE *)(a2 + *v5) == 0;
          continue;
        }
LABEL_45:

        return 0;
      default:
        result = PBReaderSkipValueWithTag();
        if (!(_DWORD)result)
          return result;
        goto LABEL_43;
    }
  }
}

void sub_1B6CC59A4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_1B6CC5A9C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  v3 = v2;

  _Unwind_Resume(a1);
}

uint64_t VCPProtoMovieQualityResultReadFrom(uint64_t a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  char v14;
  uint64_t v16;
  int v17;
  VCPProtoTimeRange *v19;
  uint64_t v20;
  unint64_t v21;
  int v22;
  uint64_t result;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) < *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
  {
    v7 = (int *)MEMORY[0x1E0D82BB8];
    do
    {
      if (*(_BYTE *)(a2 + *v5))
        break;
      v8 = 0;
      v9 = 0;
      v10 = 0;
      while (1)
      {
        v11 = *v3;
        v12 = *(_QWORD *)(a2 + v11);
        v13 = v12 + 1;
        if (v12 == -1 || v13 > *(_QWORD *)(a2 + *v4))
          break;
        v14 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
        *(_QWORD *)(a2 + v11) = v13;
        v10 |= (unint64_t)(v14 & 0x7F) << v8;
        if ((v14 & 0x80) == 0)
          goto LABEL_12;
        v8 += 7;
        if (v9++ >= 9)
        {
          v10 = 0;
          v16 = *v5;
          v17 = *(unsigned __int8 *)(a2 + v16);
          goto LABEL_14;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
      v16 = *v5;
      v17 = *(unsigned __int8 *)(a2 + v16);
      if (*(_BYTE *)(a2 + v16))
        v10 = 0;
LABEL_14:
      if (v17 || (v10 & 7) == 4)
        break;
      if ((v10 >> 3) == 2)
      {
        v20 = *v3;
        v21 = *(_QWORD *)(a2 + v20);
        if (v21 <= 0xFFFFFFFFFFFFFFFBLL && v21 + 4 <= *(_QWORD *)(a2 + *v4))
        {
          v22 = *(_DWORD *)(*(_QWORD *)(a2 + *v7) + v21);
          *(_QWORD *)(a2 + v20) = v21 + 4;
        }
        else
        {
          *(_BYTE *)(a2 + v16) = 1;
          v22 = 0;
        }
        *(_DWORD *)(a1 + 8) = v22;
      }
      else if ((v10 >> 3) == 1)
      {
        v19 = objc_alloc_init(VCPProtoTimeRange);
        objc_storeStrong((id *)(a1 + 16), v19);
        if (!PBReaderPlaceMark() || !VCPProtoTimeRangeReadFrom((uint64_t)v19, a2))
        {

          return 0;
        }
        PBReaderRecallMark();

      }
      else
      {
        result = PBReaderSkipValueWithTag();
        if (!(_DWORD)result)
          return result;
      }
    }
    while (*(_QWORD *)(a2 + *v3) < *(_QWORD *)(a2 + *v4));
  }
  return *(_BYTE *)(a2 + *v5) == 0;
}

void sub_1B6CC66D4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15, void *a16, void *a17, void *a18)
{
  void *v18;
  void *v19;
  void *v20;
  void *v21;
  void *v22;

  _Unwind_Resume(a1);
}

void sub_1B6CC6B80(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1B6CC6D08(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1B6CC7168(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, char a20)
{
  _Unwind_Resume(exception_object);
}

void sub_1B6CC76F8(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1B6CC7B40(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  v4 = v3;

  _Unwind_Resume(a1);
}

void sub_1B6CC7BAC(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1B6CC8004(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  void *v14;
  void *v15;
  void *v16;
  void *v17;
  void *v18;

  _Unwind_Resume(a1);
}

void sub_1B6CC821C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_1B6CC8398(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_1B6CC8514(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_1B6CC8690(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_1B6CC88DC(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_1B6CC8AB8(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_1B6CC8C50(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_1B6CC8E2C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_1B6CC8FF4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_1B6CC91EC(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_1B6CC93B4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_1B6CC9590(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_1B6CC9758(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_1B6CC99C8(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1B6CC9E4C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;
  void *v11;

  _Unwind_Resume(a1);
}

void sub_1B6CC9FB8(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  _Unwind_Resume(a1);
}

void sub_1B6CCA0FC(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1B6CCA4D8(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_1B6CCA75C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void sub_1B6CCA820(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1B6CCA8EC(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  _Unwind_Resume(a1);
}

void sub_1B6CCAAD4(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

uint64_t MAImageComputeResultFromCFDictionary(const __CFDictionary *a1, MAImageComputeResult *a2)
{
  const __CFNumber *Value;
  uint64_t result;
  const __CFArray *v6;
  CFIndex v7;
  const __CFDictionary *ValueAtIndex;
  int valuePtr;

  Value = (const __CFNumber *)CFDictionaryGetValue(a1, CFSTR("version"));
  if (!Value)
    return 4294967246;
  valuePtr = 0;
  CFNumberGetValue(Value, kCFNumberSInt32Type, &valuePtr);
  *((_DWORD *)a2 + 8) = valuePtr;
  result = (uint64_t)CFDictionaryGetValue(a1, CFSTR("metadataRanges"));
  if (result)
  {
    v6 = (const __CFArray *)CFDictionaryGetValue((CFDictionaryRef)result, CFSTR("HumanPoseResults"));
    if (CFArrayGetCount(v6) < 1)
    {
      return 0;
    }
    else
    {
      v7 = 0;
      while (1)
      {
        ValueAtIndex = (const __CFDictionary *)CFArrayGetValueAtIndex(v6, v7);
        PB::PtrVector<VCPProtoImageHumanPoseResult>::emplace_back<>((VCPProtoImageHumanPoseResult ***)a2 + 1);
        result = VCPProtoImageHumanPoseResultFromCFDictionary(ValueAtIndex, *(VCPProtoImageHumanPoseResult **)(*((_QWORD *)a2 + 2) - 8));
        if ((_DWORD)result)
          break;
        if (++v7 >= CFArrayGetCount(v6))
          return 0;
      }
    }
  }
  return result;
}

uint64_t PB::PtrVector<VCPProtoImageHumanPoseResult>::emplace_back<>(VCPProtoImageHumanPoseResult ***a1)
{
  VCPProtoImageHumanPoseResult *v2;
  uint64_t result;
  unint64_t v4;
  VCPProtoImageHumanPoseResult **v5;
  VCPProtoImageHumanPoseResult **v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  char *v11;
  VCPProtoImageHumanPoseResult **v12;
  char *v13;
  VCPProtoImageHumanPoseResult **v14;
  VCPProtoImageHumanPoseResult **v15;
  VCPProtoImageHumanPoseResult *v16;
  int64x2_t v17;
  VCPProtoImageHumanPoseResult **v18;
  uint64_t v19;
  int64x2_t v20;
  char *v21;
  _QWORD *v22;

  v2 = (VCPProtoImageHumanPoseResult *)operator new();
  VCPProtoImageHumanPoseResult::VCPProtoImageHumanPoseResult(v2);
  result = (uint64_t)(a1 + 2);
  v4 = (unint64_t)a1[2];
  v5 = a1[1];
  if ((unint64_t)v5 >= v4)
  {
    v7 = v5 - *a1;
    if ((unint64_t)(v7 + 1) >> 61)
      std::vector<std::unique_ptr<VCPProtoKeypoint>>::__throw_length_error[abi:ne180100]();
    v8 = v4 - (_QWORD)*a1;
    v9 = v8 >> 2;
    if (v8 >> 2 <= (unint64_t)(v7 + 1))
      v9 = v7 + 1;
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8)
      v10 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v10 = v9;
    v22 = a1 + 2;
    if (v10)
      v11 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::unique_ptr<VCPProtoKeypoint>>>(result, v10);
    else
      v11 = 0;
    v12 = (VCPProtoImageHumanPoseResult **)&v11[8 * v7];
    v13 = &v11[8 * v10];
    v21 = v13;
    *v12 = v2;
    v6 = v12 + 1;
    v20.i64[1] = (uint64_t)(v12 + 1);
    v15 = *a1;
    v14 = a1[1];
    if (v14 == *a1)
    {
      v17 = vdupq_n_s64((unint64_t)v14);
    }
    else
    {
      do
      {
        v16 = *--v14;
        *v14 = 0;
        *--v12 = v16;
      }
      while (v14 != v15);
      v17 = *(int64x2_t *)a1;
      v6 = (VCPProtoImageHumanPoseResult **)v20.i64[1];
      v13 = v21;
    }
    *a1 = v12;
    a1[1] = v6;
    v20 = v17;
    v18 = a1[2];
    a1[2] = (VCPProtoImageHumanPoseResult **)v13;
    v21 = (char *)v18;
    v19 = v17.i64[0];
    result = std::__split_buffer<std::unique_ptr<VCPProtoKeypoint>>::~__split_buffer((uint64_t)&v19);
  }
  else
  {
    *v5 = v2;
    v6 = v5 + 1;
  }
  a1[1] = v6;
  return result;
}

void sub_1B6CCADA4(_Unwind_Exception *a1)
{
  uint64_t v1;

  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

__CFDictionary *MAImageComputeResultToCFDictionary(const MAImageComputeResult *a1)
{
  uint64_t v2;
  unint64_t v3;
  __CFDictionary *Mutable;
  CFNumberRef v5;
  void *value;
  CFMutableArrayRef theArray;
  int valuePtr;
  __CFDictionary *v10;

  theArray = CFArrayCreateMutable(0, 0, MEMORY[0x1E0C9B378]);
  v2 = *((_QWORD *)a1 + 1);
  if (*((_QWORD *)a1 + 2) != v2)
  {
    v3 = 0;
    do
    {
      v10 = VCPProtoImageHumanPoseResultToCFDictionary(*(const VCPProtoImageHumanPoseResult **)(v2 + 8 * v3));
      CFArrayAppendValue(theArray, v10);
      CF<opaqueCMSampleBuffer *>::~CF((const void **)&v10);
      ++v3;
      v2 = *((_QWORD *)a1 + 1);
    }
    while (v3 < (*((_QWORD *)a1 + 2) - v2) >> 3);
  }
  value = CFDictionaryCreateMutable(0, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  CFDictionarySetValue((CFMutableDictionaryRef)value, CFSTR("HumanPoseResults"), theArray);
  Mutable = CFDictionaryCreateMutable(0, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  valuePtr = *((_DWORD *)a1 + 8);
  v5 = CFNumberCreate(0, kCFNumberSInt32Type, &valuePtr);
  v10 = v5;
  if (v5)
    CFDictionarySetValue(Mutable, CFSTR("version"), v5);
  CF<opaqueCMSampleBuffer *>::~CF((const void **)&v10);
  CFDictionarySetValue(Mutable, CFSTR("metadataRanges"), value);
  CF<opaqueCMSampleBuffer *>::~CF((const void **)&value);
  CF<opaqueCMSampleBuffer *>::~CF((const void **)&theArray);
  return Mutable;
}

void sub_1B6CCAF00(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, const void *a9, const void *a10, uint64_t a11, const void *a12)
{
  CF<opaqueCMSampleBuffer *>::~CF(&a12);
  CF<opaqueCMSampleBuffer *>::~CF(&a9);
  CF<opaqueCMSampleBuffer *>::~CF(&a10);
  _Unwind_Resume(a1);
}

uint64_t VCPProtoImageSceneprintResultReadFrom(uint64_t a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  int v15;
  uint64_t v17;
  void *v18;
  uint64_t result;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) < *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
  {
    v7 = (int *)MEMORY[0x1E0D82BB8];
    do
    {
      if (*(_BYTE *)(a2 + *v5))
        break;
      v8 = 0;
      v9 = 0;
      v10 = 0;
      while (1)
      {
        v11 = *v3;
        v12 = *(_QWORD *)(a2 + v11);
        if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
          break;
        v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
        *(_QWORD *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0)
          goto LABEL_12;
        v8 += 7;
        if (v9++ >= 9)
        {
          v10 = 0;
          v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
      v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(_BYTE *)(a2 + *v5))
        v10 = 0;
LABEL_14:
      if (v15 || (v10 & 7) == 4)
        break;
      if ((v10 >> 3) == 1)
      {
        PBReaderReadData();
        v17 = objc_claimAutoreleasedReturnValue();
        v18 = *(void **)(a1 + 8);
        *(_QWORD *)(a1 + 8) = v17;

      }
      else
      {
        result = PBReaderSkipValueWithTag();
        if (!(_DWORD)result)
          return result;
      }
    }
    while (*(_QWORD *)(a2 + *v3) < *(_QWORD *)(a2 + *v4));
  }
  return *(_BYTE *)(a2 + *v5) == 0;
}

ma::SlowMotionAnalysis *ma::SlowMotionAnalysis::SlowMotionAnalysis(ma::SlowMotionAnalysis *this, const ma::FrameBuffer *a2)
{
  uint64_t v3;

  *((_QWORD *)this + 1) = 0;
  *((_QWORD *)this + 2) = 0;
  *(_QWORD *)this = 0;
  v3 = MEMORY[0x1E0CA2E68];
  *(_OWORD *)((char *)this + 24) = *MEMORY[0x1E0CA2E68];
  *((_QWORD *)this + 5) = *(_QWORD *)(v3 + 16);
  *((_BYTE *)this + 48) = 1;
  *((_DWORD *)this + 13) = 0;
  *((_QWORD *)this + 7) = a2;
  *((_QWORD *)this + 8) = 0;
  ma::HinkleyDetector::HinkleyDetector((uint64_t)this + 72);
  return this;
}

void sub_1B6CCB378(_Unwind_Exception *a1)
{
  uint64_t v1;

  MotionAnalysis<ma::ObstructionSegment>::~MotionAnalysis(v1);
  _Unwind_Resume(a1);
}

uint64_t ma::SlowMotionAnalysis::Initialize(ma::SlowMotionAnalysis *this)
{
  ma::HinkleyDetector::Initialize((uint64_t)this + 72, 0.1, 0.35, 30);
  return MotionAnalysis<ma::SlowMotionSegment>::Initialize((uint64_t)this);
}

uint64_t MotionAnalysis<ma::SlowMotionSegment>::Initialize(uint64_t a1)
{
  ma::SlowMotionSegment *v3;
  ma::SlowMotionSegment *v4;

  if (*(_QWORD *)(a1 + 16) || *(_QWORD *)(a1 + 8))
    return 4294967246;
  *(_QWORD *)(a1 + 16) = CFArrayCreateMutable(0, 0, MEMORY[0x1E0C9B378]);
  v3 = (ma::SlowMotionSegment *)operator new(0x50uLL, MEMORY[0x1E0DE4E10]);
  if (v3)
  {
    v4 = v3;
    ma::SlowMotionSegment::SlowMotionSegment(v3);
    *(_QWORD *)(a1 + 8) = v4;
    if (*(_QWORD *)(a1 + 16))
      return 0;
    else
      return 4294967188;
  }
  else
  {
    *(_QWORD *)(a1 + 8) = 0;
    return 4294967188;
  }
}

void sub_1B6CCB454(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1BCCA12A4](v1, MEMORY[0x1E0DE4E10]);
  _Unwind_Resume(a1);
}

uint64_t ma::SlowMotionAnalysis::ProcessFrame(ma::SlowMotionAnalysis *this, const ma::Frame *a2)
{
  ma::Segment *v4;
  float v5;
  uint64_t result;
  ma::Segment *v7;
  int v8;
  CMTime v9;
  CMTime v10;

  if (*((_BYTE *)this + 48))
  {
    v4 = (ma::Segment *)*((_QWORD *)this + 1);
    v10 = *(CMTime *)((_BYTE *)this + 1);
    ma::Segment::SetStart(v4, 0, &v10);
    *((_BYTE *)this + 48) = 0;
  }
  if (*(_DWORD *)a2)
  {
    v5 = ma::SlowMotionAnalysis::EstimateFlickerness(this, a2);
    if (ma::SlowMotionAnalysis::DecideSegmentPoint(this, *((const ma::SlowMotionSegment **)this + 1), *(_DWORD *)a2, v5))
    {
      result = ma::SlowMotionAnalysis::AddSegment((const __CFArray **)this, a2, 0);
      if ((_DWORD)result)
        return result;
      ma::Segment::Reset(*((ma::Segment **)this + 1));
      v7 = (ma::Segment *)*((_QWORD *)this + 1);
      v8 = *(_DWORD *)a2;
      v9 = *(CMTime *)((char *)a2 + 4);
      ma::Segment::SetStart(v7, v8, &v9);
    }
    ma::SlowMotionSegment::UpdateStats(*((_QWORD *)this + 1), v5);
  }
  return 0;
}

float ma::SlowMotionAnalysis::EstimateFlickerness(ma::SlowMotionAnalysis *this, const ma::Frame *a2)
{
  int v4;
  float v5;
  float v6;
  float v7;
  uint64_t v8;
  _BYTE v10[48];

  if (!*((_QWORD *)this + 8))
    return 0.0;
  ma::Histogram::Histogram((ma::Histogram *)v10);
  v4 = ma::Histogram::Initialize((ma::Histogram *)v10, *((CVPixelBufferRef *)this + 8), 0);
  if (v4)
  {
    v5 = (float)v4;
  }
  else
  {
    v6 = ma::Histogram::EarthMoverDistance((const ma::Frame *)((char *)a2 + 360), (const ma::Histogram *)v10);
    v5 = 0.0;
    v7 = 0.0;
    if (*(int *)a2 >= 2)
    {
      v8 = ma::FrameBuffer::Get(*((ma::FrameBuffer **)this + 7), *(_DWORD *)a2 - 2);
      v7 = 0.0;
      if (v8)
        v7 = ma::Histogram::EarthMoverDistance((const ma::Frame *)((char *)a2 + 360), (const ma::Histogram *)(v8 + 360));
    }
    if (v6 > v7)
    {
      v5 = -1.0;
      if (v7 != 0.0)
        v5 = v6 / v7;
    }
  }
  ma::Histogram::~Histogram((ma::Histogram *)v10);
  return v5;
}

void sub_1B6CCB618(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  ma::Histogram::~Histogram((ma::Histogram *)&a9);
  _Unwind_Resume(a1);
}

BOOL ma::SlowMotionAnalysis::DecideSegmentPoint(ma::SlowMotionAnalysis *this, const ma::SlowMotionSegment *a2, int a3, float a4)
{
  ma::HinkleyDetector *v5;
  const float *v6;
  BOOL v7;
  float v8;
  _BOOL8 v9;
  float v11;

  v5 = (ma::SlowMotionAnalysis *)((char *)this + 72);
  if (*((_DWORD *)this + 20) >= a3 - *((_DWORD *)a2 + 3))
  {
    v9 = 0;
  }
  else
  {
    v6 = (const float *)((char *)a2 + 72);
    v7 = a4 < 1.0;
    v8 = 0.0;
    if (!v7)
      v8 = 1.0;
    v11 = v8;
    v9 = ma::HinkleyDetector::Test((ma::SlowMotionAnalysis *)((char *)this + 72), v6, &v11, *((_DWORD *)a2 + 5) + 1);
    if (v9)
      goto LABEL_8;
  }
  if (!*((_DWORD *)a2 + 5))
LABEL_8:
    ma::HinkleyDetector::ResetStats(v5);
  return v9;
}

uint64_t ma::SlowMotionAnalysis::AddSegment(const __CFArray **this, const ma::Frame *a2, int a3)
{
  const __CFArray *v6;
  ma::Segment *v7;
  int Count;
  _OWORD *v10;
  int v11;
  CMTime v13;
  CMTime lhs;
  CMTime v15;

  v6 = *this;
  v7 = this[1];
  if (v6)
    Count = CFArrayGetCount(v6);
  else
    Count = 0;
  v10 = (_OWORD *)((char *)a2 + 4);
  v11 = *(_DWORD *)a2;
  if (a3)
  {
    *(_OWORD *)&lhs.value = *v10;
    lhs.epoch = *(_QWORD *)((char *)a2 + 20);
    v13 = *(CMTime *)((char *)a2 + 28);
    CMTimeAdd(&v15, &lhs, &v13);
  }
  else
  {
    *(_OWORD *)&v15.value = *v10;
    v15.epoch = *(_QWORD *)((char *)a2 + 20);
  }
  ma::Segment::Finalize(v7, Count, v11 + a3, &v15);
  return MotionAnalysis<ma::SlowMotionSegment>::AddSegment((uint64_t)this);
}

uint64_t ma::SlowMotionAnalysis::FinalizeSegments(const __CFArray **this, const ma::Frame *a2)
{
  uint64_t result;

  result = ma::SlowMotionAnalysis::AddSegment(this, a2, 1);
  if (!(_DWORD)result)
  {
    result = ma::SlowMotionAnalysis::MergeSameTypeSegments(this);
    if (!(_DWORD)result)
    {
      result = ma::SlowMotionAnalysis::MergeConsecutiveShortSegments(this);
      if (!(_DWORD)result)
        return ma::SlowMotionAnalysis::MergeSparseShortSegments(this);
    }
  }
  return result;
}

uint64_t ma::SlowMotionAnalysis::MergeSameTypeSegments(CFArrayRef *this)
{
  const __CFArray *v2;
  uint64_t v3;
  uint64_t v4;
  const ma::SlowMotionSegment *v5;
  ma::SlowMotionSegment *v6;
  _BOOL4 IsFlicker;
  uint64_t result;
  int Count;
  int v10;
  CFIndex v11;
  ma::SlowMotionSegment *v12;
  const ma::SlowMotionSegment **ValueAtIndex;
  CMTime v14;

  v2 = *this;
  if (!v2)
    return 0;
  v3 = 0;
  while ((int)CFArrayGetCount(v2) >= 2)
  {
    if (!*this)
      return 0;
    v4 = (v3 + 1);
    if ((int)v4 >= (int)CFArrayGetCount(*this))
      break;
    v5 = *(const ma::SlowMotionSegment **)CFArrayGetValueAtIndex(*this, v3);
    v6 = *(ma::SlowMotionSegment **)CFArrayGetValueAtIndex(*this, (v3 + 1));
    IsFlicker = ma::SlowMotionSegment::IsFlicker(v6);
    if (IsFlicker == ma::SlowMotionSegment::IsFlicker(v5))
    {
      ma::SlowMotionSegment::Merge(v6, v5);
      result = MotionAnalysis<ma::SubtleMotionSegment>::RemoveSegment(this, v3);
      v4 = v3;
      if ((_DWORD)result)
        return result;
    }
    v2 = *this;
    v3 = v4;
    if (!*this)
      return 0;
  }
  if (!*this)
    return 0;
  Count = CFArrayGetCount(*this);
  v10 = Count;
  if (Count < 2)
    return 0;
  v11 = (Count - 1);
  v14 = *(CMTime *)(*(_QWORD *)CFArrayGetValueAtIndex(*this, v11) + 48);
  if (CMTimeGetSeconds(&v14) >= 1.0)
    return 0;
  v12 = *(ma::SlowMotionSegment **)CFArrayGetValueAtIndex(*this, (v10 - 2));
  ValueAtIndex = (const ma::SlowMotionSegment **)CFArrayGetValueAtIndex(*this, v11);
  ma::SlowMotionSegment::Merge(v12, *ValueAtIndex);
  result = MotionAnalysis<ma::SubtleMotionSegment>::RemoveSegment(this, v11);
  if (!(_DWORD)result)
    return 0;
  return result;
}

uint64_t ma::SlowMotionAnalysis::MergeConsecutiveShortSegments(CFArrayRef *this)
{
  signed int v2;
  signed int v3;
  const __CFArray *v4;
  uint64_t v5;
  ma::SlowMotionSegment *v6;
  signed int v7;
  uint64_t v8;
  signed int v9;
  const __CFArray *v10;
  ma::SlowMotionSegment **ValueAtIndex;
  const ma::SlowMotionSegment **v12;
  uint64_t result;

  v2 = 0;
  while (1)
  {
    v3 = v2;
    v4 = *this;
    if (*this)
      LODWORD(v4) = CFArrayGetCount(v4);
    if (v2 >= (int)v4 - 1)
      break;
    ++v2;
    v5 = v3;
    v6 = *(ma::SlowMotionSegment **)CFArrayGetValueAtIndex(*this, v3);
    if (ma::SlowMotionSegment::IsShort(v6))
    {
      v7 = v3;
      v8 = 1;
      do
      {
        v9 = v3;
        v10 = *this;
        if (*this)
          LODWORD(v10) = CFArrayGetCount(v10);
        if (v5 + v8 >= (int)v10)
          break;
        ValueAtIndex = (ma::SlowMotionSegment **)CFArrayGetValueAtIndex(*this, v5 + v8++);
        ++v3;
      }
      while (ma::SlowMotionSegment::IsShort(*ValueAtIndex));
      while (v7 < v9)
      {
        v12 = (const ma::SlowMotionSegment **)CFArrayGetValueAtIndex(*this, v2);
        ma::SlowMotionSegment::Merge(v6, *v12);
        result = MotionAnalysis<ma::SubtleMotionSegment>::RemoveSegment(this, v2);
        --v9;
        if ((_DWORD)result)
          return result;
      }
      v2 = v9 + 1;
    }
  }
  return ma::SlowMotionAnalysis::MergeSameTypeSegments(this);
}

uint64_t ma::SlowMotionAnalysis::MergeSparseShortSegments(CFArrayRef *this)
{
  const __CFArray *v2;
  ma::SlowMotionSegment **ValueAtIndex;
  ma::SlowMotionSegment *v4;
  const ma::SlowMotionSegment **v5;
  uint64_t result;
  int Count;
  const __CFArray *v8;
  CFIndex v9;
  ma::SlowMotionSegment **v10;
  _BOOL4 IsShort;
  CFIndex v12;
  ma::SlowMotionSegment *v13;
  const __CFArray *v14;
  CFIndex v15;
  const ma::SlowMotionSegment **v16;
  unsigned int v17;
  int v18;
  int v19;
  const __CFArray *v20;
  ma::SlowMotionSegment *v21;
  ma::SlowMotionSegment *v22;
  const ma::SlowMotionSegment *v23;

  v2 = *this;
  if (!v2)
    return ma::SlowMotionAnalysis::MergeSameTypeSegments(this);
  if ((int)CFArrayGetCount(v2) >= 2)
  {
    ValueAtIndex = (ma::SlowMotionSegment **)CFArrayGetValueAtIndex(*this, 0);
    if (ma::SlowMotionSegment::IsShort(*ValueAtIndex))
    {
      v4 = *(ma::SlowMotionSegment **)CFArrayGetValueAtIndex(*this, 1);
      v5 = (const ma::SlowMotionSegment **)CFArrayGetValueAtIndex(*this, 0);
      ma::SlowMotionSegment::Merge(v4, *v5);
      result = MotionAnalysis<ma::SubtleMotionSegment>::RemoveSegment(this, 0);
      if ((_DWORD)result)
        return result;
    }
  }
  if (!*this)
    return ma::SlowMotionAnalysis::MergeSameTypeSegments(this);
  Count = CFArrayGetCount(*this);
  v8 = *this;
  if (Count < 2
    || (!v8 ? (const __CFArray *)(v9 = -1) : (v9 = (int)(CFArrayGetCount(v8) - 1), v8 = *this),
        v10 = (ma::SlowMotionSegment **)CFArrayGetValueAtIndex(v8, v9),
        IsShort = ma::SlowMotionSegment::IsShort(*v10),
        v8 = *this,
        !IsShort))
  {
LABEL_23:
    if (v8)
    {
      v18 = 0;
      v19 = 1;
      while ((int)CFArrayGetCount(v8) >= 3)
      {
        v20 = *this;
        if (*this)
          LODWORD(v20) = CFArrayGetCount(v20);
        if (v19 >= (int)v20 - 1)
          break;
        v21 = *(ma::SlowMotionSegment **)CFArrayGetValueAtIndex(*this, v18);
        v22 = *(ma::SlowMotionSegment **)CFArrayGetValueAtIndex(*this, v19);
        v23 = *(const ma::SlowMotionSegment **)CFArrayGetValueAtIndex(*this, v19 + 1);
        if (ma::SlowMotionSegment::IsShort(v21)
          || !ma::SlowMotionSegment::IsShort(v22)
          || ma::SlowMotionSegment::IsShort(v23))
        {
          v18 = v19++;
        }
        else
        {
          ma::SlowMotionSegment::Merge(v22, v23);
          result = MotionAnalysis<ma::SubtleMotionSegment>::RemoveSegment(this, v19 + 1);
          if ((_DWORD)result)
            return result;
        }
        v8 = *this;
        if (!*this)
          return ma::SlowMotionAnalysis::MergeSameTypeSegments(this);
      }
    }
    return ma::SlowMotionAnalysis::MergeSameTypeSegments(this);
  }
  if (v8)
  {
    v12 = (int)(CFArrayGetCount(v8) - 2);
    v8 = *this;
  }
  else
  {
    v12 = -2;
  }
  v13 = *(ma::SlowMotionSegment **)CFArrayGetValueAtIndex(v8, v12);
  v14 = *this;
  if (*this)
  {
    v15 = (int)(CFArrayGetCount(v14) - 1);
    v14 = *this;
  }
  else
  {
    v15 = -1;
  }
  v16 = (const ma::SlowMotionSegment **)CFArrayGetValueAtIndex(v14, v15);
  ma::SlowMotionSegment::Merge(v13, *v16);
  if (*this)
    v17 = CFArrayGetCount(*this) - 1;
  else
    v17 = -1;
  result = MotionAnalysis<ma::SubtleMotionSegment>::RemoveSegment(this, v17);
  if (!(_DWORD)result)
  {
    v8 = *this;
    goto LABEL_23;
  }
  return result;
}

uint64_t MotionAnalysis<ma::SlowMotionSegment>::AddSegment(uint64_t a1)
{
  ma::SlowMotionSegment *v2;
  ma::SlowMotionSegment *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;

  v2 = (ma::SlowMotionSegment *)operator new(0x50uLL, MEMORY[0x1E0DE4E10]);
  if (!v2)
    return 4294967188;
  v3 = v2;
  ma::SlowMotionSegment::SlowMotionSegment(v2);
  v4 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)(a1 + 8) = v3;
  v7 = v4;
  v5 = Vector<ma::Object *>::PushBack((CFMutableArrayRef *)a1, &v7);
  if ((_DWORD)v5 && v7)
    (*(void (**)(uint64_t))(*(_QWORD *)v7 + 8))(v7);
  return v5;
}

void sub_1B6CCBD10(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1BCCA12A4](v1, MEMORY[0x1E0DE4E10]);
  _Unwind_Resume(a1);
}

void ma::SlowMotionAnalysis::FlickernessForRange(CFArrayRef *this, CMTimeRange *a2)
{
  CFIndex v4;
  float v5;
  const __CFArray *v6;
  uint64_t *ValueAtIndex;
  uint64_t v8;
  CMTimeFlags v9;
  CMTimeEpoch v10;
  CMTimeValue v11;
  CMTimeScale v12;
  CMTimeFlags v13;
  CMTimeEpoch v14;
  __int128 v15;
  __int128 v16;
  double Seconds;
  CMTime v18;
  CMTime time;
  CMTime v20;
  CMTime duration;
  CMTimeRange otherRange;
  CMTimeRange v23;
  CMTimeRange v24;
  CMTimeRange range;
  CMTime v26;
  CMTime time2;
  CMTime time1;
  CMTime v29;
  CMTime v30;
  CMTime v31;
  CMTimeValue v32;
  CMTimeScale v33;
  uint64_t v34;

  v34 = *MEMORY[0x1E0C80C00];
  if ((a2->start.flags & 1) == 0
    || (a2->duration.flags & 1) == 0
    || a2->duration.epoch
    || a2->duration.value < 0
    || (v30 = a2->duration, v29 = *(CMTime *)*(_QWORD *)&MEMORY[0x1E0CA2E68], CMTimeCompare(&v30, &v29)))
  {
    v4 = 0;
    v5 = 0.0;
    while (1)
    {
      v6 = *this;
      if (*this)
        LODWORD(v6) = CFArrayGetCount(v6);
      if (v4 >= (int)v6)
        break;
      ValueAtIndex = (uint64_t *)CFArrayGetValueAtIndex(*this, v4);
      v8 = *ValueAtIndex;
      v32 = *(_QWORD *)(*ValueAtIndex + 24);
      v9 = *(_DWORD *)(v8 + 36);
      v33 = *(_DWORD *)(v8 + 32);
      v10 = *(_QWORD *)(v8 + 40);
      v11 = *(_QWORD *)(v8 + 48);
      v12 = *(_DWORD *)(v8 + 56);
      v13 = *(_DWORD *)(v8 + 60);
      v14 = *(_QWORD *)(v8 + 64);
      if ((v9 & 1) == 0
        || (v13 & 1) == 0
        || v14
        || v11 < 0
        || (time1.value = *(_QWORD *)(v8 + 48),
            time1.timescale = v12,
            time1.flags = v13,
            time1.epoch = 0,
            time2 = *(CMTime *)*(_QWORD *)&MEMORY[0x1E0CA2E68],
            CMTimeCompare(&time1, &time2)))
      {
        v15 = *(_OWORD *)&a2->start.epoch;
        *(_OWORD *)&range.start.value = *(_OWORD *)&a2->start.value;
        *(_OWORD *)&range.start.epoch = v15;
        *(_OWORD *)&range.duration.timescale = *(_OWORD *)&a2->duration.timescale;
        CMTimeRangeGetEnd(&v26, &range);
        v24.start = v26;
        v31.value = v32;
        v31.timescale = v33;
        v31.flags = v9;
        v31.epoch = v10;
        if (CMTimeCompare(&v24.start, &v31) < 0)
          break;
        v16 = *(_OWORD *)&a2->start.epoch;
        *(_OWORD *)&v23.start.value = *(_OWORD *)&a2->start.value;
        *(_OWORD *)&v23.start.epoch = v16;
        *(_OWORD *)&v23.duration.timescale = *(_OWORD *)&a2->duration.timescale;
        memset(&v24, 0, sizeof(v24));
        otherRange.start.value = v32;
        otherRange.start.timescale = v33;
        otherRange.start.flags = v9;
        otherRange.start.epoch = v10;
        otherRange.duration.value = v11;
        otherRange.duration.timescale = v12;
        otherRange.duration.flags = v13;
        otherRange.duration.epoch = v14;
        CMTimeRangeGetIntersection(&v24, &v23, &otherRange);
        if ((v24.start.flags & 1) == 0
          || (v24.duration.flags & 1) == 0
          || v24.duration.epoch
          || v24.duration.value < 0
          || (duration = v24.duration, v20 = *(CMTime *)*(_QWORD *)&MEMORY[0x1E0CA2E68], CMTimeCompare(&duration, &v20)))
        {
          time = v24.duration;
          Seconds = CMTimeGetSeconds(&time);
          v5 = v5 + Seconds * *(float *)(*(_QWORD *)CFArrayGetValueAtIndex(*this, v4) + 72);
        }
      }
      ++v4;
    }
    v18 = a2->duration;
    CMTimeGetSeconds(&v18);
  }
}

uint64_t VCPProtoMovieSubtleMotionResultReadFrom(uint64_t a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  char v14;
  uint64_t v16;
  int v17;
  VCPProtoTimeRange *v19;
  uint64_t v20;
  unint64_t v21;
  int v22;
  uint64_t result;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) < *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
  {
    v7 = (int *)MEMORY[0x1E0D82BB8];
    do
    {
      if (*(_BYTE *)(a2 + *v5))
        break;
      v8 = 0;
      v9 = 0;
      v10 = 0;
      while (1)
      {
        v11 = *v3;
        v12 = *(_QWORD *)(a2 + v11);
        v13 = v12 + 1;
        if (v12 == -1 || v13 > *(_QWORD *)(a2 + *v4))
          break;
        v14 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
        *(_QWORD *)(a2 + v11) = v13;
        v10 |= (unint64_t)(v14 & 0x7F) << v8;
        if ((v14 & 0x80) == 0)
          goto LABEL_12;
        v8 += 7;
        if (v9++ >= 9)
        {
          v10 = 0;
          v16 = *v5;
          v17 = *(unsigned __int8 *)(a2 + v16);
          goto LABEL_14;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
      v16 = *v5;
      v17 = *(unsigned __int8 *)(a2 + v16);
      if (*(_BYTE *)(a2 + v16))
        v10 = 0;
LABEL_14:
      if (v17 || (v10 & 7) == 4)
        break;
      if ((v10 >> 3) == 2)
      {
        v20 = *v3;
        v21 = *(_QWORD *)(a2 + v20);
        if (v21 <= 0xFFFFFFFFFFFFFFFBLL && v21 + 4 <= *(_QWORD *)(a2 + *v4))
        {
          v22 = *(_DWORD *)(*(_QWORD *)(a2 + *v7) + v21);
          *(_QWORD *)(a2 + v20) = v21 + 4;
        }
        else
        {
          *(_BYTE *)(a2 + v16) = 1;
          v22 = 0;
        }
        *(_DWORD *)(a1 + 8) = v22;
      }
      else if ((v10 >> 3) == 1)
      {
        v19 = objc_alloc_init(VCPProtoTimeRange);
        objc_storeStrong((id *)(a1 + 16), v19);
        if (!PBReaderPlaceMark() || !VCPProtoTimeRangeReadFrom((uint64_t)v19, a2))
        {

          return 0;
        }
        PBReaderRecallMark();

      }
      else
      {
        result = PBReaderSkipValueWithTag();
        if (!(_DWORD)result)
          return result;
      }
    }
    while (*(_QWORD *)(a2 + *v3) < *(_QWORD *)(a2 + *v4));
  }
  return *(_BYTE *)(a2 + *v5) == 0;
}

uint64_t VCPProtoMovieHumanActionResultReadFrom(uint64_t a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  char v14;
  uint64_t v16;
  int v17;
  VCPProtoTimeRange *v19;
  uint64_t result;
  uint64_t v21;
  unint64_t v22;
  int v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  void *v29;
  uint64_t v30;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) >= *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
    return *(_BYTE *)(a2 + *v5) == 0;
  v7 = (int *)MEMORY[0x1E0D82BB8];
  while (2)
  {
    if (*(_BYTE *)(a2 + *v5))
      return *(_BYTE *)(a2 + *v5) == 0;
    v8 = 0;
    v9 = 0;
    v10 = 0;
    while (1)
    {
      v11 = *v3;
      v12 = *(_QWORD *)(a2 + v11);
      v13 = v12 + 1;
      if (v12 == -1 || v13 > *(_QWORD *)(a2 + *v4))
        break;
      v14 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
      *(_QWORD *)(a2 + v11) = v13;
      v10 |= (unint64_t)(v14 & 0x7F) << v8;
      if ((v14 & 0x80) == 0)
        goto LABEL_12;
      v8 += 7;
      if (v9++ >= 9)
      {
        v10 = 0;
        v16 = *v5;
        v17 = *(unsigned __int8 *)(a2 + v16);
        goto LABEL_14;
      }
    }
    *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
    v16 = *v5;
    v17 = *(unsigned __int8 *)(a2 + v16);
    if (*(_BYTE *)(a2 + v16))
      v10 = 0;
LABEL_14:
    if (v17 || (v10 & 7) == 4)
      return *(_BYTE *)(a2 + *v5) == 0;
    switch((v10 >> 3))
    {
      case 1u:
        v19 = objc_alloc_init(VCPProtoTimeRange);
        objc_storeStrong((id *)(a1 + 40), v19);
        if (PBReaderPlaceMark() && VCPProtoTimeRangeReadFrom((uint64_t)v19, a2))
          goto LABEL_36;
        goto LABEL_46;
      case 2u:
        v21 = *v3;
        v22 = *(_QWORD *)(a2 + v21);
        if (v22 <= 0xFFFFFFFFFFFFFFFBLL && v22 + 4 <= *(_QWORD *)(a2 + *v4))
        {
          v23 = *(_DWORD *)(*(_QWORD *)(a2 + *v7) + v22);
          *(_QWORD *)(a2 + v21) = v22 + 4;
        }
        else
        {
          *(_BYTE *)(a2 + v16) = 1;
          v23 = 0;
        }
        v30 = 8;
        goto LABEL_43;
      case 3u:
        v24 = *v3;
        v25 = *(_QWORD *)(a2 + v24);
        if (v25 <= 0xFFFFFFFFFFFFFFFBLL && v25 + 4 <= *(_QWORD *)(a2 + *v4))
        {
          v23 = *(_DWORD *)(*(_QWORD *)(a2 + *v7) + v25);
          *(_QWORD *)(a2 + v24) = v25 + 4;
        }
        else
        {
          *(_BYTE *)(a2 + v16) = 1;
          v23 = 0;
        }
        v30 = 36;
        goto LABEL_43;
      case 4u:
        v26 = *v3;
        v27 = *(_QWORD *)(a2 + v26);
        if (v27 <= 0xFFFFFFFFFFFFFFFBLL && v27 + 4 <= *(_QWORD *)(a2 + *v4))
        {
          v23 = *(_DWORD *)(*(_QWORD *)(a2 + *v7) + v27);
          *(_QWORD *)(a2 + v26) = v27 + 4;
        }
        else
        {
          *(_BYTE *)(a2 + v16) = 1;
          v23 = 0;
        }
        v30 = 32;
LABEL_43:
        *(_DWORD *)(a1 + v30) = v23;
        goto LABEL_44;
      case 5u:
        PBReaderReadString();
        v28 = objc_claimAutoreleasedReturnValue();
        v29 = *(void **)(a1 + 24);
        *(_QWORD *)(a1 + 24) = v28;

        goto LABEL_44;
      case 6u:
        v19 = objc_alloc_init(VCPProtoBounds);
        objc_storeStrong((id *)(a1 + 16), v19);
        if (PBReaderPlaceMark() && VCPProtoBoundsReadFrom((uint64_t)v19, a2))
        {
LABEL_36:
          PBReaderRecallMark();

LABEL_44:
          if (*(_QWORD *)(a2 + *v3) >= *(_QWORD *)(a2 + *v4))
            return *(_BYTE *)(a2 + *v5) == 0;
          continue;
        }
LABEL_46:

        return 0;
      default:
        result = PBReaderSkipValueWithTag();
        if (!(_DWORD)result)
          return result;
        goto LABEL_44;
    }
  }
}

void sub_1B6CCDF98(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, void *a13, void *a14, uint64_t a15, void *a16)
{
  void *v16;
  void *v17;
  void *v18;

  _Unwind_Resume(a1);
}

id _espressoPlanErrorMessage(void *a1)
{
  uint64_t error_info;
  uint64_t v2;
  uint64_t v3;
  void *v4;
  __CFString *v5;
  void *v6;

  error_info = espresso_plan_get_error_info();
  v3 = v2;
  v4 = (void *)MEMORY[0x1E0CB3940];
  if (error_info >= 3)
  {
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("plan phase %u"), error_info);
    v5 = (__CFString *)objc_claimAutoreleasedReturnValue();
  }
  else
  {
    v5 = off_1E6B16AE8[(int)error_info];
  }
  objc_msgSend(v4, "stringWithFormat:", CFSTR("%s (%@)"), v3, v5);
  v6 = (void *)objc_claimAutoreleasedReturnValue();

  return v6;
}

void sub_1B6CCE164(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1B6CCE730(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_1B6CCEC20(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;

  _Unwind_Resume(a1);
}

void sub_1B6CCEF34(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, objc_super a9)
{
  void *v9;
  void *v10;

  v10 = v9;

  a9.super_class = (Class)VCPCNNVisionCoreDetector;
  -[_Unwind_Exception dealloc](&a9, sel_dealloc);
  _Unwind_Resume(a1);
}

void sub_1B6CCF3A0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9, uint64_t a10, uint64_t a11, void *a12)
{
  void *v12;
  void *v13;
  void *v14;

  _Unwind_Resume(a1);
}

void sub_1B6CCFCF0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, const void *a19)
{
  void *v19;
  void *v20;
  void *v21;
  void *v22;
  void *v23;
  void *v24;

  CF<opaqueCMSampleBuffer *>::~CF(&a19);
  _Unwind_Resume(a1);
}

void sub_1B6CD0188(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11)
{
  void *v11;

  _Unwind_Resume(a1);
}

void sub_1B6CD054C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11)
{
  void *v11;

  _Unwind_Resume(a1);
}

void *std::__allocate_at_least[abi:ne180100]<std::allocator<espresso_buffer_t>>(uint64_t a1, unint64_t a2)
{
  if (a2 >= 0x186186186186187)
    std::__throw_bad_array_new_length[abi:ne180100]();
  return operator new(168 * a2);
}

_QWORD *std::vector<espresso_buffer_t>::__init_with_size[abi:ne180100]<espresso_buffer_t*,espresso_buffer_t*>(_QWORD *result, const void *a2, uint64_t a3, unint64_t a4)
{
  _QWORD *v6;
  uint64_t v7;
  size_t v8;

  if (a4)
  {
    v6 = result;
    result = std::vector<espresso_buffer_t>::__vallocate[abi:ne180100](result, a4);
    v7 = v6[1];
    v8 = a3 - (_QWORD)a2;
    if (v8)
      result = memmove((void *)v6[1], a2, v8);
    v6[1] = v7 + v8;
  }
  return result;
}

void sub_1B6CD06E0(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

char *std::vector<espresso_buffer_t>::__vallocate[abi:ne180100](_QWORD *a1, unint64_t a2)
{
  char *result;
  uint64_t v4;

  if (a2 >= 0x186186186186187)
    std::vector<std::unique_ptr<VCPProtoKeypoint>>::__throw_length_error[abi:ne180100]();
  result = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<espresso_buffer_t>>((uint64_t)(a1 + 2), a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[168 * v4];
  return result;
}

ma::Segment *ma::SubtleMotionSegment::SubtleMotionSegment(ma::SubtleMotionSegment *this)
{
  ma::Segment *result;

  result = ma::Segment::Segment(this);
  *(_QWORD *)result = &off_1E6B140C8;
  *((_DWORD *)result + 19) = 0;
  *((_DWORD *)result + 20) = 0;
  *((_DWORD *)result + 18) = -1;
  return result;
}

float ma::SubtleMotionSegment::UpdateStats(ma::SubtleMotionSegment *this, const MotionResult *a2)
{
  float result;

  ++*((_DWORD *)this + 5);
  result = a2->subtle_motion_score_ + *((float *)this + 19);
  *((float *)this + 19) = result;
  return result;
}

float ma::SubtleMotionSegment::ResetStats(ma::SubtleMotionSegment *this, const MotionResult *a2)
{
  float result;

  *((_DWORD *)this + 5) = a2->valid_mb_;
  result = a2->subtle_motion_score_;
  *((float *)this + 19) = result;
  return result;
}

uint64_t ma::SubtleMotionSegment::DetermineType(uint64_t this)
{
  float v1;
  float v2;
  BOOL v3;
  float v4;
  int v5;

  v1 = *(float *)(this + 76) / (float)*(int *)(this + 16);
  v2 = 1.0;
  if (v1 < 10.0)
    v2 = v1 / 10.0;
  v3 = v1 > 0.0;
  v4 = 0.0;
  if (v3)
    v4 = v2;
  *(float *)(this + 80) = v4;
  if (v4 <= 0.25)
  {
    *(_DWORD *)(this + 72) = 0;
  }
  else
  {
    if (v4 <= 0.42)
    {
      v5 = 1;
    }
    else if (v4 <= 0.7)
    {
      v5 = 2;
    }
    else
    {
      v5 = 3;
    }
    *(_DWORD *)(this + 72) = v5;
  }
  return this;
}

float ma::SubtleMotionSegment::Merge(ma::SubtleMotionSegment *this, const ma::SubtleMotionSegment *a2)
{
  float result;

  ma::Segment::Merge(this, a2);
  result = *((float *)a2 + 19) + *((float *)this + 19);
  *((float *)this + 19) = result;
  return result;
}

uint64_t ma::SubtleMotionSegment::ToDictionary(ma::SubtleMotionSegment *this, const __CFAllocator *a2, const __CFDictionary **a3)
{
  uint64_t result;
  __CFDictionary *v6;
  CFNumberRef v7;
  CFNumberRef v8;
  int valuePtr;
  CFNumberRef v10;

  result = ma::Segment::ToDictionary(this, a2, a3);
  if (!(_DWORD)result)
  {
    v6 = *a3;
    if (*a3)
    {
      valuePtr = *((_DWORD *)this + 18);
      v7 = CFNumberCreate(0, kCFNumberSInt32Type, &valuePtr);
      v10 = v7;
      if (v7)
      {
        CFDictionarySetValue(v6, CFSTR("Action"), v7);
        CF<opaqueCMSampleBuffer *>::~CF((const void **)&v10);
        valuePtr = *((_DWORD *)this + 20);
        v8 = CFNumberCreate(0, kCFNumberFloat32Type, &valuePtr);
        v10 = v8;
        if (v8)
        {
          CFDictionarySetValue(v6, CFSTR("ActionScore"), v8);
          CF<opaqueCMSampleBuffer *>::~CF((const void **)&v10);
          result = 0;
LABEL_8:
          *a3 = v6;
          return result;
        }
      }
      CF<opaqueCMSampleBuffer *>::~CF((const void **)&v10);
      CFRelease(v6);
      v6 = 0;
    }
    result = 4294967188;
    goto LABEL_8;
  }
  return result;
}

void sub_1B6CD0944(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  CF<opaqueCMSampleBuffer *>::~CF((const void **)va);
  _Unwind_Resume(a1);
}

uint64_t ma::SubtleMotionSegment::FromDictionary(ma::SubtleMotionSegment *this, const __CFDictionary *a2)
{
  const __CFNumber *Value;
  int v5;
  uint64_t result;
  const __CFNumber *v7;
  int v8;
  int valuePtr;
  int v10;

  if (!a2)
    return 4294967246;
  ma::Segment::FromDictionary(this, a2);
  valuePtr = 0;
  Value = (const __CFNumber *)CFDictionaryGetValue(a2, CFSTR("Action"));
  if (Value)
  {
    CFNumberGetValue(Value, kCFNumberSInt32Type, &valuePtr);
    v5 = valuePtr;
  }
  else
  {
    v5 = 0;
  }
  *((_DWORD *)this + 18) = v5;
  v10 = 0;
  v7 = (const __CFNumber *)CFDictionaryGetValue(a2, CFSTR("ActionScore"));
  if (v7)
  {
    CFNumberGetValue(v7, kCFNumberFloat32Type, &v10);
    v8 = v10;
  }
  else
  {
    v8 = 0;
  }
  result = 0;
  *((_DWORD *)this + 20) = v8;
  return result;
}

void ma::SubtleMotionSegment::~SubtleMotionSegment(ma::SubtleMotionSegment *this)
{
  JUMPOUT(0x1BCCA12BCLL);
}

ma::SceneAnalysis *ma::SceneAnalysis::SceneAnalysis(ma::SceneAnalysis *this, int a2, int a3, char a4, char a5, char a6, const ma::FrameBuffer *a7, char a8)
{
  uint64_t v10;

  *((_QWORD *)this + 1) = 0;
  *((_QWORD *)this + 2) = 0;
  *(_QWORD *)this = 0;
  v10 = MEMORY[0x1E0CA2E68];
  *(_OWORD *)((char *)this + 24) = *MEMORY[0x1E0CA2E68];
  *((_QWORD *)this + 5) = *(_QWORD *)(v10 + 16);
  *((_BYTE *)this + 48) = 1;
  *(_QWORD *)((char *)this + 52) = 0;
  *((_BYTE *)this + 60) = 0;
  *((_BYTE *)this + 61) = a4;
  *((_BYTE *)this + 62) = a5;
  *((_BYTE *)this + 63) = a6;
  *((_BYTE *)this + 64) = 0;
  *((_DWORD *)this + 17) = a2;
  *((_DWORD *)this + 18) = a3;
  *((_BYTE *)this + 76) = a8;
  ma::CameraMotionAnalysis::CameraMotionAnalysis((ma::SceneAnalysis *)((char *)this + 80));
  ma::SubjectMotionAnalysis::SubjectMotionAnalysis((ma::SceneAnalysis *)((char *)this + 408));
  ma::FineSubjectMotionAnalysis::FineSubjectMotionAnalysis((ma::SceneAnalysis *)((char *)this + 496));
  ma::SubtleMotionAnalysis::SubtleMotionAnalysis((ma::SceneAnalysis *)((char *)this + 584));
  ma::TrackingAnalysis::TrackingAnalysis((ma::SceneAnalysis *)((char *)this + 672));
  ma::DescriptorAnalysis::DescriptorAnalysis((ma::SceneAnalysis *)((char *)this + 760));
  ma::MovingObjectAnalysis::MovingObjectAnalysis((ma::SceneAnalysis *)((char *)this + 832));
  *((_QWORD *)this + 114) = 0;
  *((_OWORD *)this + 56) = 0u;
  *(_OWORD *)((char *)this + 920) = *(_OWORD *)v10;
  *((_QWORD *)this + 117) = *(_QWORD *)(v10 + 16);
  *((_BYTE *)this + 944) = 1;
  *((_DWORD *)this + 237) = 0;
  ma::HinkleyDetector::HinkleyDetector((uint64_t)this + 952);
  ma::QualityAnalysis::QualityAnalysis((ma::SceneAnalysis *)((char *)this + 984), a7);
  ma::SlowMotionAnalysis::SlowMotionAnalysis((ma::SceneAnalysis *)((char *)this + 1200), a7);
  return this;
}

void sub_1B6CD0C34(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, ma::SubtleMotionAnalysis *a9, ma::CameraMotionAnalysis *a10)
{
  uint64_t v10;
  ma::MotionFilter *v11;
  ma::QualityAnalysis *v12;
  ma::SubtleMotionAnalysis *v13;
  ma::SubtleMotionAnalysis *v14;
  ma::SubtleMotionAnalysis *v15;
  ma::DescriptorAnalysis *v16;
  ma::MovingObjectAnalysis *v17;
  uint64_t v18;

  ma::QualityAnalysis::~QualityAnalysis(v12);
  ma::MotionFilter::~MotionFilter(v11);
  MotionAnalysis<ma::ObstructionSegment>::~MotionAnalysis(v18);
  ma::MovingObjectAnalysis::~MovingObjectAnalysis(v17);
  ma::DescriptorAnalysis::~DescriptorAnalysis(v16);
  ma::SubtleMotionAnalysis::~SubtleMotionAnalysis(v15);
  ma::SubtleMotionAnalysis::~SubtleMotionAnalysis(v14);
  ma::SubtleMotionAnalysis::~SubtleMotionAnalysis(v13);
  ma::SubtleMotionAnalysis::~SubtleMotionAnalysis(a9);
  ma::CameraMotionAnalysis::~CameraMotionAnalysis(a10);
  MotionAnalysis<ma::ObstructionSegment>::~MotionAnalysis(v10);
  _Unwind_Resume(a1);
}

void sub_1B6CD0CB8()
{
  JUMPOUT(0x1B6CD0C88);
}

void sub_1B6CD0CC0()
{
  JUMPOUT(0x1B6CD0C90);
}

void sub_1B6CD0CC8()
{
  JUMPOUT(0x1B6CD0C98);
}

void sub_1B6CD0CD0()
{
  JUMPOUT(0x1B6CD0CA0);
}

void sub_1B6CD0CD8()
{
  JUMPOUT(0x1B6CD0CA8);
}

uint64_t ma::SceneAnalysis::Initialize(ma::SceneAnalysis *this, const __CFArray *a2, const __CFDictionary *a3, float a4)
{
  ma::CameraMotionAnalysis *v8;
  uint64_t result;

  v8 = (ma::SceneAnalysis *)((char *)this + 80);
  result = ma::CameraMotionAnalysis::Initialize((ma::SceneAnalysis *)((char *)this + 80), *((_DWORD *)this + 17), *((_BYTE *)this + 61));
  if (!(_DWORD)result)
  {
    result = ma::SubjectMotionAnalysis::Initialize((ma::SceneAnalysis *)((char *)this + 408));
    if (!(_DWORD)result)
    {
      result = ma::TrackingAnalysis::Initialize((ma::SceneAnalysis *)((char *)this + 672));
      if (!(_DWORD)result)
      {
        result = ma::FineSubjectMotionAnalysis::Initialize((ma::SceneAnalysis *)((char *)this + 496), *((_BYTE *)this + 61));
        if (!(_DWORD)result)
        {
          result = ma::SubtleMotionAnalysis::Initialize((ma::SceneAnalysis *)((char *)this + 584), *((_BYTE *)this + 61));
          if (!(_DWORD)result)
          {
            result = ma::MovingObjectAnalysis::Initialize((uint64_t)this + 832);
            if (!(_DWORD)result)
            {
              result = ma::InterestingnessAnalysis::Initialize((ma::SceneAnalysis *)((char *)this + 896));
              if (!(_DWORD)result)
              {
                if (*((_BYTE *)this + 61)
                  || (result = ma::DescriptorAnalysis::Initialize((ma::SceneAnalysis *)((char *)this + 760), *((_DWORD *)this + 18)), !(_DWORD)result))
                {
                  result = MotionAnalysis<ma::SceneSegment>::Initialize((uint64_t)this);
                  if (!(_DWORD)result)
                  {
                    result = ma::CameraMotionAnalysis::SetOrientationResult(v8, a2);
                    if (!(_DWORD)result)
                    {
                      result = ma::QualityAnalysis::Initialize((ma::SceneAnalysis *)((char *)this + 984), *((unsigned __int8 *)this + 61), *((unsigned __int8 *)this + 62), a3, a4);
                      if (!(_DWORD)result)
                      {
                        if (!*((_BYTE *)this + 63))
                          return 0;
                        result = ma::SlowMotionAnalysis::Initialize((ma::SceneAnalysis *)((char *)this + 1200));
                        if (!(_DWORD)result)
                          return 0;
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  return result;
}

uint64_t MotionAnalysis<ma::SceneSegment>::Initialize(uint64_t a1)
{
  ma::SceneSegment *v3;
  ma::SceneSegment *v4;

  if (*(_QWORD *)(a1 + 16) || *(_QWORD *)(a1 + 8))
    return 4294967246;
  *(_QWORD *)(a1 + 16) = CFArrayCreateMutable(0, 0, MEMORY[0x1E0C9B378]);
  v3 = (ma::SceneSegment *)operator new(0x60uLL, MEMORY[0x1E0DE4E10]);
  if (v3)
  {
    v4 = v3;
    ma::SceneSegment::SceneSegment(v3);
    *(_QWORD *)(a1 + 8) = v4;
    if (*(_QWORD *)(a1 + 16))
      return 0;
    else
      return 4294967188;
  }
  else
  {
    *(_QWORD *)(a1 + 8) = 0;
    return 4294967188;
  }
}

void sub_1B6CD0E78(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1BCCA12A4](v1, MEMORY[0x1E0DE4E10]);
  _Unwind_Resume(a1);
}

__n128 ma::SceneAnalysis::SetStartTime(ma::SceneAnalysis *this, CMTime *a2)
{
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __n128 result;
  CMTime v11;

  v11 = *a2;
  ma::CameraMotionAnalysis::SetStartTime((ma::SceneAnalysis *)((char *)this + 80), &v11);
  v4 = *(_OWORD *)&a2->value;
  *((_QWORD *)this + 56) = a2->epoch;
  *((_OWORD *)this + 27) = v4;
  v5 = *(_OWORD *)&a2->value;
  *((_QWORD *)this + 89) = a2->epoch;
  *(_OWORD *)((char *)this + 696) = v5;
  v6 = *(_OWORD *)&a2->value;
  *((_QWORD *)this + 67) = a2->epoch;
  *(_OWORD *)((char *)this + 520) = v6;
  v7 = *(_OWORD *)&a2->value;
  *((_QWORD *)this + 78) = a2->epoch;
  *((_OWORD *)this + 38) = v7;
  v8 = *(_OWORD *)&a2->value;
  *((_QWORD *)this + 109) = a2->epoch;
  *(_OWORD *)((char *)this + 856) = v8;
  v9 = *(_OWORD *)&a2->value;
  *((_QWORD *)this + 117) = a2->epoch;
  *(_OWORD *)((char *)this + 920) = v9;
  result = *(__n128 *)&a2->value;
  *((_QWORD *)this + 128) = a2->epoch;
  *((__n128 *)this + 63) = result;
  return result;
}

uint64_t ma::SceneAnalysis::ProcessFrame(ma::SceneAnalysis *this, Frame *a2, Frame *a3)
{
  uint64_t result;

  result = ma::CameraMotionAnalysis::ProcessFrame((ma::SceneAnalysis *)((char *)this + 80), a3);
  if (!(_DWORD)result)
  {
    result = ma::SubjectMotionAnalysis::ProcessFrame((ma::SceneAnalysis *)((char *)this + 408), a3);
    if (!(_DWORD)result)
    {
      result = ma::FineSubjectMotionAnalysis::ProcessFrame((ma::SceneAnalysis *)((char *)this + 496), a3);
      if (!(_DWORD)result)
      {
        if (!*((_BYTE *)this + 64)
          || (result = ma::SubtleMotionAnalysis::ProcessFrame((ma::SceneAnalysis *)((char *)this + 584), a3),
              !(_DWORD)result))
        {
          result = ma::MovingObjectAnalysis::ProcessFrame((ma::SceneAnalysis *)((char *)this + 832), a3);
          if (!(_DWORD)result)
          {
            result = ma::InterestingnessAnalysis::ProcessFrame((ma::SceneAnalysis *)((char *)this + 896), a3);
            if (!(_DWORD)result)
            {
              result = ma::TrackingAnalysis::ProcessFrame((ma::SceneAnalysis *)((char *)this + 672), a3);
              if (!(_DWORD)result)
                return ma::QualityAnalysis::ProcessFrame((ma::SceneAnalysis *)((char *)this + 984), a3, a2);
            }
          }
        }
      }
    }
  }
  return result;
}

uint64_t ma::SceneAnalysis::Finalize(const __CFArray **this, const ma::Frame *a2, int a3, CFArrayRef *a4)
{
  uint64_t InitialSceneSegments;
  uint64_t SceneResultsFromQualityScore;
  const __CFArray *Results;
  int v11;
  void *__p[3];
  void *v13[3];
  void *v14[3];
  void *v15[3];

  if (*((_BYTE *)this + 63))
  {
    InitialSceneSegments = ma::SlowMotionAnalysis::FinalizeSegments(this + 150, a2);
    if ((_DWORD)InitialSceneSegments)
      return InitialSceneSegments;
  }
  InitialSceneSegments = ma::CameraMotionAnalysis::FinalizeSegments(this + 10, a2);
  if ((_DWORD)InitialSceneSegments)
    return InitialSceneSegments;
  InitialSceneSegments = ma::SubjectMotionAnalysis::FinalizeSegments(this + 51, a2);
  if ((_DWORD)InitialSceneSegments)
    return InitialSceneSegments;
  InitialSceneSegments = ma::FineSubjectMotionAnalysis::FinalizeSegments(this + 62, a2);
  if ((_DWORD)InitialSceneSegments)
    return InitialSceneSegments;
  if (*((_BYTE *)this + 64))
  {
    InitialSceneSegments = ma::SubtleMotionAnalysis::FinalizeSegments(this + 73, a2);
    if ((_DWORD)InitialSceneSegments)
      return InitialSceneSegments;
  }
  InitialSceneSegments = ma::MovingObjectAnalysis::FinalizeSegments(this + 104, a2);
  if ((_DWORD)InitialSceneSegments)
    return InitialSceneSegments;
  InitialSceneSegments = ma::InterestingnessAnalysis::FinalizeSegments((ma::InterestingnessAnalysis *)(this + 112), (const Frame *)a2);
  if ((_DWORD)InitialSceneSegments)
    return InitialSceneSegments;
  InitialSceneSegments = ma::TrackingAnalysis::FinalizeSegments(this + 84, a2);
  if ((_DWORD)InitialSceneSegments)
    return InitialSceneSegments;
  ma::CameraMotionAnalysis::GetTimeRangeAndScoreResults(this + 10, v15);
  ma::ObstructionAnalysis::GetTimeRangesHasDegradedScore(a4, v14);
  ma::TrackingAnalysis::GetTimeRangesHasTracking(this + 84, v13);
  ma::CameraMotionAnalysis::GetTimeRangesIsStable(this + 10, (char **)__p);
  InitialSceneSegments = ma::QualityAnalysis::FinalizeSegments((uint64_t)(this + 123), a2, (uint64_t *)v15, (uint64_t *)v14, __p, (uint64_t *)v13);
  if (!(_DWORD)InitialSceneSegments)
  {
    if (*((_BYTE *)this + 61))
    {
      SceneResultsFromQualityScore = ma::QualityAnalysis::GenerateSceneResultsFromQualityScore(this + 123);
    }
    else
    {
      InitialSceneSegments = ma::SceneAnalysis::ComputeSceneSwitchFrequency((ma::SceneAnalysis *)this);
      if ((_DWORD)InitialSceneSegments)
        goto LABEL_13;
      Results = (const __CFArray *)ma::QualityAnalysis::GetResults((ma::QualityAnalysis *)(this + 123));
      InitialSceneSegments = ma::SceneAnalysis::GenerateInitialSceneSegments((ma::SceneAnalysis *)this, v11, Results);
      if ((_DWORD)InitialSceneSegments)
        goto LABEL_13;
      InitialSceneSegments = (uint64_t)ma::SceneAnalysis::RefineSceneSegments(this, Results);
      if ((_DWORD)InitialSceneSegments)
        goto LABEL_13;
      InitialSceneSegments = (uint64_t)ma::SceneAnalysis::ComputeSceneDistances(this);
      if ((_DWORD)InitialSceneSegments)
        goto LABEL_13;
      SceneResultsFromQualityScore = ma::SceneAnalysis::StoreSegmentResult(this, Results);
    }
    InitialSceneSegments = SceneResultsFromQualityScore;
    if (!(_DWORD)SceneResultsFromQualityScore)
      InitialSceneSegments = 0;
  }
LABEL_13:
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
  if (v13[0])
  {
    v13[1] = v13[0];
    operator delete(v13[0]);
  }
  if (v14[0])
  {
    v14[1] = v14[0];
    operator delete(v14[0]);
  }
  if (v15[0])
  {
    v15[1] = v15[0];
    operator delete(v15[0]);
  }
  return InitialSceneSegments;
}

void sub_1B6CD1230(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, uint64_t a14, void *a15, uint64_t a16, uint64_t a17, void *a18, uint64_t a19)
{
  if (__p)
    operator delete(__p);
  if (a12)
    operator delete(a12);
  if (a15)
    operator delete(a15);
  if (a18)
    operator delete(a18);
  _Unwind_Resume(exception_object);
}

uint64_t ma::SceneAnalysis::ComputeSceneSwitchFrequency(ma::SceneAnalysis *this)
{
  const __CFArray *v2;
  float Count;
  CFIndex v4;
  int v5;
  const __CFArray *v6;
  const void *ValueAtIndex;
  CFIndex v8;
  __int128 *v9;
  const __CFArray *v10;
  uint64_t v11;
  uint64_t v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  uint64_t result;
  float v20;
  CMTimeRange v21;
  CMTimeRange v22;
  CMTimeRange otherRange;
  CMTimeRange range;
  CMTimeRange v25;
  CMTimeRange v26;

  v2 = (const __CFArray *)*((_QWORD *)this + 95);
  if (v2)
    Count = (float)(int)CFArrayGetCount(v2);
  else
    Count = 0.0;
  v4 = 0;
  v5 = 0;
  while (1)
  {
    v6 = (const __CFArray *)*((_QWORD *)this + 123);
    if (v6)
      LODWORD(v6) = CFArrayGetCount(v6);
    if (v4 >= (int)v6)
      break;
    ValueAtIndex = CFArrayGetValueAtIndex(*((CFArrayRef *)this + 123), v4);
    if (*(float *)(*(_QWORD *)ValueAtIndex + 76) > 0.2)
    {
      v8 = 0;
      v9 = (__int128 *)(*(_QWORD *)ValueAtIndex + 24);
      while (1)
      {
        v10 = (const __CFArray *)*((_QWORD *)this + 95);
        if (v10)
          LODWORD(v10) = CFArrayGetCount(v10);
        if (v8 >= (int)v10 - 1)
          break;
        v11 = *(_QWORD *)CFArrayGetValueAtIndex(*((CFArrayRef *)this + 95), v8++);
        v12 = *(_QWORD *)CFArrayGetValueAtIndex(*((CFArrayRef *)this + 95), v8);
        v13 = *(_OWORD *)(v11 + 24);
        v14 = *(_OWORD *)(v11 + 56);
        *(_OWORD *)&v26.start.epoch = *(_OWORD *)(v11 + 40);
        *(_OWORD *)&v26.duration.timescale = v14;
        v15 = *(_OWORD *)(v12 + 40);
        *(_OWORD *)&v25.start.value = *(_OWORD *)(v12 + 24);
        *(_OWORD *)&v25.start.epoch = v15;
        *(_OWORD *)&v25.duration.timescale = *(_OWORD *)(v12 + 56);
        *(_OWORD *)&v26.start.value = v13;
        v16 = *v9;
        v17 = v9[2];
        *(_OWORD *)&range.start.epoch = v9[1];
        *(_OWORD *)&range.duration.timescale = v17;
        otherRange = v26;
        *(_OWORD *)&range.start.value = v16;
        if (CMTimeRangeContainsTimeRange(&range, &otherRange))
        {
          v18 = v9[1];
          *(_OWORD *)&v22.start.value = *v9;
          *(_OWORD *)&v22.start.epoch = v18;
          *(_OWORD *)&v22.duration.timescale = v9[2];
          v21 = v25;
          if (CMTimeRangeContainsTimeRange(&v22, &v21))
          {
            v20 = 0.0;
            result = ma::DescriptorSegment::Compare((id **)v11, (const ma::DescriptorSegment *)v12, &v20, *((unsigned __int8 *)this + 76));
            if (v20 >= 0.2)
              ++v5;
            if ((_DWORD)result)
              return result;
          }
        }
      }
    }
    ++v4;
  }
  result = 0;
  *((float *)this + 14) = (float)v5 / Count;
  return result;
}

uint64_t ma::SceneAnalysis::GenerateInitialSceneSegments(ma::SceneAnalysis *this, int a2, const __CFArray *a3)
{
  CFIndex v5;
  int v6;
  const __CFArray *v7;
  uint64_t *ValueAtIndex;
  uint64_t v9;
  uint64_t result;
  uint64_t *v11;
  uint64_t v12;
  __int128 v13;
  const void *v14;
  int32x2_t v15;
  CFIndex i;
  const __CFArray *v17;
  int v18;
  int v19;
  int v20;
  int v21;
  const void *v22;
  CMTimeRange v23;

  v5 = 0;
  v6 = 0;
  while (1)
  {
    v7 = (const __CFArray *)*((_QWORD *)this + 10);
    if (v7)
      LODWORD(v7) = CFArrayGetCount(v7);
    if (v5 >= (int)v7)
      break;
    ValueAtIndex = (uint64_t *)CFArrayGetValueAtIndex(*((CFArrayRef *)this + 10), v5);
    v9 = *ValueAtIndex;
    if (*(_DWORD *)(*ValueAtIndex + 16))
    {
      result = ma::SceneAnalysis::AddSegment((CFArrayRef *)this, (const ma::CameraMotionSegment *)v9);
      if ((_DWORD)result)
        return result;
      v11 = (uint64_t *)CFArrayGetValueAtIndex(*(CFArrayRef *)this, v6);
      v12 = *v11;
      v13 = *(_OWORD *)(*v11 + 40);
      *(_OWORD *)&v23.start.value = *(_OWORD *)(*v11 + 24);
      *(_OWORD *)&v23.start.epoch = v13;
      *(_OWORD *)&v23.duration.timescale = *(_OWORD *)(v12 + 56);
      v14 = CFArrayGetValueAtIndex(*(CFArrayRef *)this, v6);
      result = ma::SceneAnalysis::AverageQualityScore(this, a3, &v23, (float *)(*(_QWORD *)v14 + 84));
      if ((_DWORD)result)
        return result;
      ++v6;
      *(float *)v15.i32 = (float)*(int *)(v9 + 16);
      *(float32x2_t *)(v9 + 180) = vdiv_f32(*(float32x2_t *)(v9 + 172), (float32x2_t)vdup_lane_s32(v15, 0));
    }
    ++v5;
  }
  if (*((_BYTE *)this + 60))
  {
    puts("segments");
    for (i = 0; ; ++i)
    {
      v17 = *(const __CFArray **)this;
      if (*(_QWORD *)this)
        LODWORD(v17) = CFArrayGetCount(v17);
      if (i >= (int)v17)
        break;
      v18 = *(_DWORD *)(*(_QWORD *)CFArrayGetValueAtIndex(*(CFArrayRef *)this, i) + 8);
      v19 = *(_DWORD *)(*(_QWORD *)CFArrayGetValueAtIndex(*(CFArrayRef *)this, i) + 12);
      v20 = *(_DWORD *)(*(_QWORD *)CFArrayGetValueAtIndex(*(CFArrayRef *)this, i) + 12);
      v21 = v20 + *(_DWORD *)(*(_QWORD *)CFArrayGetValueAtIndex(*(CFArrayRef *)this, i) + 16) - 1;
      v22 = CFArrayGetValueAtIndex(*(CFArrayRef *)this, i);
      printf("seg %d: [%d, %d], sceneCut=%d\n", v18, v19, v21, *(unsigned __int8 *)(*(_QWORD *)v22 + 88));
    }
  }
  return 0;
}

const __CFArray *ma::SceneAnalysis::RefineSceneSegments(CFArrayRef *this, const __CFArray *a2)
{
  const __CFArray *v3;
  uint64_t v4;
  CFArrayRef *v5;
  CFArrayRef *v6;
  float v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t *ValueAtIndex;
  uint64_t v11;
  signed int v12;
  int v13;
  float v14;
  float *v15;
  float v16;
  double Seconds;
  __int128 v18;
  __int128 v19;
  Float64 v20;
  int v21;
  signed int v22;
  CFArrayRef *v23;
  CFArrayRef *v24;
  int v25;
  double v26;
  __int128 v27;
  __int128 v28;
  Float64 v29;
  BOOL v30;
  Float64 v31;
  int v32;
  _BOOL4 v33;
  uint64_t v34;
  _BOOL4 v35;
  const __CFArray *result;
  float v37;
  __int128 v38;
  double v39;
  int v40;
  int v41;
  CFArrayRef *v42;
  int v43;
  int v44;
  int v45;
  int v46;
  int v47;
  int v48;
  int v49;
  CMTimeRange v51;
  CMTime v52;
  CMTime v53;
  CMTime v54;
  CMTimeRange v55;
  CMTime v56;
  CMTime v57;
  CMTimeRange range;
  CMTime v59;
  CMTime time;
  float v61;
  unsigned __int8 v62[10];

  v3 = *this;
  if (v3)
  {
    v4 = 0;
    v5 = this + 10;
    v6 = this + 84;
    v7 = 0.5;
    while (1)
    {
      if ((int)CFArrayGetCount(v3) < 2)
        return ma::SceneAnalysis::MergeLensSwitchSegments(this, a2);
      if (!*this)
        return ma::SceneAnalysis::MergeLensSwitchSegments(this, a2);
      v8 = (v4 + 1);
      if ((int)v8 >= (int)CFArrayGetCount(*this))
        return ma::SceneAnalysis::MergeLensSwitchSegments(this, a2);
      v9 = *(_QWORD *)CFArrayGetValueAtIndex(*this, v4);
      ValueAtIndex = (uint64_t *)CFArrayGetValueAtIndex(*this, (v4 + 1));
      if (!*(_BYTE *)(v9 + 88))
      {
        v11 = *ValueAtIndex;
        if (!*(_BYTE *)(*ValueAtIndex + 88))
        {
          v48 = ma::SceneAnalysis::FindSegmentContainsFrame<ma::CameraMotionSegment>((uint64_t)this, *(_DWORD *)(v9 + 12) + *(_DWORD *)(v9 + 16) - 1, 0, v5);
          v12 = ma::SceneAnalysis::FindSegmentContainsFrame<ma::CameraMotionSegment>((uint64_t)this, *(_DWORD *)(v11 + 12), 0, v5);
          ma::SceneAnalysis::FindSegmentContainsFrame<ma::CameraMotionSegment>((uint64_t)this, *(_DWORD *)(v11 + 16) + *(_DWORD *)(v11 + 12), v12, v5);
          v49 = ma::SceneAnalysis::FindSegmentContainsFrame<ma::CameraMotionSegment>((uint64_t)this, *(_DWORD *)(v11 + 72), 0, v6);
          v13 = ma::SceneAnalysis::FindSegmentContainsFrame<ma::CameraMotionSegment>((uint64_t)this, *(_DWORD *)(v9 + 72), 0, v6);
          v14 = *(float *)(v9 + 84);
          v15 = (float *)(v11 + 84);
          v16 = *(float *)(v11 + 84);
          *(_WORD *)v62 = 0;
          v61 = 0.0;
          if (*((_BYTE *)this + 60))
          {
            v45 = *(_DWORD *)(v9 + 12);
            v46 = *(_DWORD *)(v9 + 8);
            v44 = v45 + *(_DWORD *)(v9 + 16) - 1;
            time = *(CMTime *)(v9 + 24);
            Seconds = CMTimeGetSeconds(&time);
            v18 = *(_OWORD *)(v9 + 24);
            v19 = *(_OWORD *)(v9 + 56);
            *(_OWORD *)&range.start.epoch = *(_OWORD *)(v9 + 40);
            *(_OWORD *)&range.duration.timescale = v19;
            *(_OWORD *)&range.start.value = v18;
            CMTimeRangeGetEnd(&v59, &range);
            v20 = CMTimeGetSeconds(&v59);
            v47 = v13;
            v21 = *(_DWORD *)(v11 + 12);
            v43 = *(_DWORD *)(v11 + 8);
            v22 = v12;
            v23 = v6;
            v24 = v5;
            v25 = v21 + *(_DWORD *)(v11 + 16) - 1;
            v57 = *(CMTime *)(v11 + 24);
            v26 = CMTimeGetSeconds(&v57);
            v27 = *(_OWORD *)(v11 + 24);
            v28 = *(_OWORD *)(v11 + 56);
            *(_OWORD *)&v55.start.epoch = *(_OWORD *)(v11 + 40);
            *(_OWORD *)&v55.duration.timescale = v28;
            *(_OWORD *)&v55.start.value = v27;
            CMTimeRangeGetEnd(&v56, &v55);
            v29 = CMTimeGetSeconds(&v56);
            v40 = v21;
            v41 = v25;
            v5 = v24;
            v6 = v23;
            v12 = v22;
            v13 = v47;
            v15 = (float *)(v11 + 84);
            v39 = v20;
            v7 = 0.5;
            printf("prev(%d) [%d, %d][%6.1f, %6.1f] qs = %6.2f, curr(%d) [%d, %d] [%6.1f, %6.1f]qs = %6.2f:\n", v46, v45, v44, Seconds, v39, v14, v43, v40, v41, v26, v29, v16);
          }
          if (*(_BYTE *)(*(_QWORD *)CFArrayGetValueAtIndex(*v6, v49) + 72)
            && *(_BYTE *)(*(_QWORD *)CFArrayGetValueAtIndex(*v6, v13) + 72)
            && (*(_DWORD *)(*(_QWORD *)CFArrayGetValueAtIndex(*v5, v48) + 188) & 0xFFFFFFFE) != 6
            && (*(_DWORD *)(*(_QWORD *)CFArrayGetValueAtIndex(*v5, v12) + 188) & 0xFFFFFFFE) != 6)
          {
            break;
          }
          if (vabds_f32(v14, v16) < v7)
          {
            v30 = v14 <= 0.4;
            if (v16 > 0.4)
              v30 = 0;
            v62[1] = v30;
            v62[0] = 0;
            if (v30)
              break;
          }
          else if ((v14 < 0.4 || v16 < 0.4) && (v54 = *(CMTime *)(v9 + 48), CMTimeGetSeconds(&v54) >= 1.0))
          {
            v53 = *(CMTime *)(v11 + 48);
            v31 = CMTimeGetSeconds(&v53);
            v62[1] = v31 < 1.0;
            v62[0] = 1;
            if (v31 >= 1.0)
              goto LABEL_38;
          }
          else
          {
            v62[1] = 1;
            v62[0] = 1;
          }
          v52 = *(CMTime *)(v9 + 48);
          if (CMTimeGetSeconds(&v52) < 1.0)
            break;
          ma::SceneAnalysis::CheckMergeBasedOnCmType(this, v48, v12, v32, (BOOL *)&v62[1], (BOOL *)v62);
          v33 = v62[1];
          if (v62[1] == v62[0])
          {
            v42 = v6;
            if ((*(_DWORD *)(*(_QWORD *)CFArrayGetValueAtIndex(*v5, v48) + 188) - 1) > 4
              || *(_DWORD *)(*(_QWORD *)CFArrayGetValueAtIndex(*v5, v12) + 188)
              && (*(_DWORD *)(*(_QWORD *)CFArrayGetValueAtIndex(*v5, v12) + 188) - 1) >= 5)
            {
              v34 = 2 * (*(_DWORD *)(*(_QWORD *)CFArrayGetValueAtIndex(*v5, v12) + 188) == 6);
            }
            else
            {
              v34 = 1;
            }
            v35 = *(_DWORD *)(*(_QWORD *)CFArrayGetValueAtIndex(this[10], v48) + 188) == 0;
            result = (const __CFArray *)ma::DescriptorAnalysis::ComputeDistanceForSceneMerge(this + 95, (const CMTimeRange *)(v9 + 24), (const CMTimeRange *)(v11 + 24), v35, &v61, *((unsigned __int8 *)this + 76));
            if ((_DWORD)result)
              return result;
            v37 = ma::SceneAnalysis::RefineSceneSegments(__CFArray const*)::kDescriptorThreshold[v34];
            if (*((_BYTE *)this + 60))
              printf("dist({%d %d}, {%d %d}) = %6.2f, th = %6.2f\n", *(_DWORD *)(v9 + 12), *(_DWORD *)(v9 + 72), *(_DWORD *)(v11 + 12), *(_DWORD *)(v11 + 72), v61, v37);
            v6 = v42;
            v33 = v61 < v37;
          }
          if (v33)
            break;
        }
      }
LABEL_38:
      v3 = *this;
      v4 = v8;
      if (!*this)
        return ma::SceneAnalysis::MergeLensSwitchSegments(this, a2);
    }
    ma::SceneSegment::Merge((ma::Segment *)v11, (const ma::Segment *)v9);
    result = (const __CFArray *)MotionAnalysis<ma::SubtleMotionSegment>::RemoveSegment(this, v4);
    if ((_DWORD)result)
      return result;
    v38 = *(_OWORD *)(v11 + 40);
    *(_OWORD *)&v51.start.value = *(_OWORD *)(v11 + 24);
    *(_OWORD *)&v51.start.epoch = v38;
    *(_OWORD *)&v51.duration.timescale = *(_OWORD *)(v11 + 56);
    result = (const __CFArray *)ma::SceneAnalysis::AverageQualityScore((ma::SceneAnalysis *)this, a2, &v51, v15);
    v8 = v4;
    if ((_DWORD)result)
      return result;
    goto LABEL_38;
  }
  return ma::SceneAnalysis::MergeLensSwitchSegments(this, a2);
}

const __CFArray *ma::SceneAnalysis::ComputeSceneDistances(CFArrayRef *this)
{
  const __CFArray *result;
  CFIndex v3;
  uint64_t v4;
  uint64_t v5;
  const CMTimeRange *v6;
  int v7;
  uint64_t v8;

  v8 = 0;
  result = (const __CFArray *)ma::SceneAnalysis::PruneDescriptorsBasedOnScene((ma::SceneAnalysis *)this);
  if (!(_DWORD)result)
  {
    result = *this;
    if (*this)
    {
      v3 = 1;
      while ((int)CFArrayGetCount(result) >= 2)
      {
        result = *this;
        if (!*this)
          return result;
        if ((int)v3 >= (int)CFArrayGetCount(result))
          break;
        v4 = *(_QWORD *)CFArrayGetValueAtIndex(*this, v3 - 1);
        v5 = *(_QWORD *)CFArrayGetValueAtIndex(*this, v3);
        v6 = (const CMTimeRange *)(v4 + 24);
        result = (const __CFArray *)ma::DescriptorAnalysis::ComputeDistance(this + 95, v6, (const CMTimeRange *)(v5 + 24), (float *)&v8 + 1, 0);
        if (!(_DWORD)result)
        {
          result = (const __CFArray *)ma::DescriptorAnalysis::ComputeDistance(this + 95, v6, (const CMTimeRange *)(v5 + 24), (float *)&v8, 1);
          if (!(_DWORD)result)
          {
            v7 = v8;
            *(_DWORD *)(v5 + 76) = HIDWORD(v8);
            *(_DWORD *)(v5 + 80) = v7;
            result = *this;
            ++v3;
            if (*this)
              continue;
          }
        }
        return result;
      }
      return 0;
    }
  }
  return result;
}

uint64_t ma::SceneAnalysis::StoreSegmentResult(CFArrayRef *this, const __CFArray *a2)
{
  CFIndex v4;
  const __CFArray *v5;
  ma::SceneAnalysis *ValueAtIndex;
  uint64_t v7;
  uint64_t FrameQualityScore;
  CMTime *v9;
  __int128 v10;
  CMTime *End;
  uint64_t v12;
  __CFDictionary *v13;
  uint64_t v14;
  CFArrayRef v15;
  CMTimeRange v17;
  CMTime v18;
  CMTime v19;
  CMTime v20;
  CMTime v21;
  uint64_t v22;
  float v23;
  float v24;
  __CFDictionary *v25;
  CMTime rhs;
  CMTime time;

  v4 = 0;
  v25 = 0;
  while (1)
  {
    v5 = *this;
    if (*this)
      LODWORD(v5) = CFArrayGetCount(v5);
    if (v4 >= (int)v5)
      break;
    ValueAtIndex = (ma::SceneAnalysis *)CFArrayGetValueAtIndex(*this, v4);
    v7 = *(_QWORD *)ValueAtIndex;
    if (*(_DWORD *)(*(_QWORD *)ValueAtIndex + 16))
    {
      v24 = 0.0;
      v23 = 0.0;
      v21 = *(CMTime *)(v7 + 24);
      v22 = 0;
      FrameQualityScore = ma::SceneAnalysis::FindFrameQualityScore(ValueAtIndex, a2, &v21, &v23);
      if ((_DWORD)FrameQualityScore)
        goto LABEL_14;
      time = *(CMTime *)(v7 + 48);
      CMTimeMultiplyByRatio(&v19, &time, 1, 2);
      time = *(CMTime *)(v7 + 24);
      rhs = v19;
      v9 = CMTimeAdd(&v20, &time, &rhs);
      FrameQualityScore = ma::SceneAnalysis::FindFrameQualityScore((ma::SceneAnalysis *)v9, a2, &v20, (float *)&v22 + 1);
      if ((_DWORD)FrameQualityScore
        || (v10 = *(_OWORD *)(v7 + 40),
            *(_OWORD *)&v17.start.value = *(_OWORD *)(v7 + 24),
            *(_OWORD *)&v17.start.epoch = v10,
            *(_OWORD *)&v17.duration.timescale = *(_OWORD *)(v7 + 56),
            End = CMTimeRangeGetEnd(&v18, &v17),
            FrameQualityScore = ma::SceneAnalysis::FindFrameQualityScore((ma::SceneAnalysis *)End, a2, &v18, (float *)&v22), (_DWORD)FrameQualityScore))
      {
LABEL_14:
        v14 = FrameQualityScore;
        goto LABEL_18;
      }
      v24 = (float)((float)(v23 + *((float *)&v22 + 1)) + *(float *)&v22) / 3.0;
      v12 = ma::SceneAnalysis::GenerateSceneAttributes(this, (const ma::SceneSegment *)v7, &v25);
      v13 = v25;
      if ((_DWORD)v12
        || (v12 = AddResultDictionary((CMTime *)(v7 + 24), (CMTime *)(v7 + 48), &v24, 0, v25, this[2]), (_DWORD)v12))
      {
        v14 = v12;
        if (v13)
          CFRelease(v13);
        goto LABEL_18;
      }
      if (v13)
      {
        CFRelease(v13);
        v25 = 0;
      }
    }
    ++v4;
  }
  v14 = ma::DescriptorAnalysis::FinalizeDescriptorAnalysis(this + 95);
  if (!(_DWORD)v14)
    return v14;
LABEL_18:
  v15 = this[2];
  if (v15)
  {
    CFRelease(v15);
    this[2] = 0;
  }
  return v14;
}

uint64_t ma::SceneAnalysis::CopyProperty(ma::SceneAnalysis *this, CFTypeRef cf1, const __CFAllocator *a3, CFArrayRef *a4)
{
  uint64_t result;
  const __CFArray *v9;
  CFArrayRef Copy;

  if (CFEqual(cf1, CFSTR("SceneResults")))
  {
    if (*((_BYTE *)this + 61))
    {
      result = ma::QualityAnalysis::CopyQualitySceneProperty((ma::SceneAnalysis *)((char *)this + 984), a3, a4);
      if ((_DWORD)result)
        return result;
    }
    else
    {
      v9 = (const __CFArray *)*((_QWORD *)this + 2);
      if (v9)
        Copy = CFArrayCreateCopy(a3, v9);
      else
        Copy = 0;
      *a4 = Copy;
    }
    return 0;
  }
  if (CFEqual(cf1, CFSTR("FeatureVectorResults")) || CFEqual(cf1, CFSTR("SceneprintResults")))
  {
    result = ma::DescriptorAnalysis::CopyProperty((ma::SceneAnalysis *)((char *)this + 760), cf1, a3, a4);
    if ((_DWORD)result)
      return result;
    return 0;
  }
  if (CFEqual(cf1, CFSTR("CameraMotionResults")))
  {
    result = ma::CameraMotionAnalysis::CopyProperty((ma::SceneAnalysis *)((char *)this + 80), cf1, a3, a4);
    if (!(_DWORD)result)
      return 0;
  }
  else if (CFEqual(cf1, CFSTR("OrientationResults")))
  {
    result = ma::RotationAnalysis::CopyProperty((ma::SceneAnalysis *)((char *)this + 312), cf1, a3, a4);
    if (!(_DWORD)result)
      return 0;
  }
  else if (CFEqual(cf1, CFSTR("SubjectMotionResults")))
  {
    result = ma::SubjectMotionAnalysis::CopyProperty((ma::SceneAnalysis *)((char *)this + 408), cf1, a3, a4);
    if (!(_DWORD)result)
      return 0;
  }
  else if (CFEqual(cf1, CFSTR("FineSubjectMotionResults")))
  {
    result = ma::FineSubjectMotionAnalysis::CopyProperty((ma::SceneAnalysis *)((char *)this + 496), cf1, a3, a4);
    if (!(_DWORD)result)
      return 0;
  }
  else if (CFEqual(cf1, CFSTR("SubtleMotionResults")))
  {
    result = ma::SubtleMotionAnalysis::CopyProperty((ma::SceneAnalysis *)((char *)this + 584), cf1, a3, a4);
    if (!(_DWORD)result)
      return 0;
  }
  else if (CFEqual(cf1, CFSTR("TrackSegments")))
  {
    result = ma::TrackingAnalysis::CopyProperty((CFArrayRef *)this + 84, cf1, a3, a4);
    if (!(_DWORD)result)
      return 0;
  }
  else if (CFEqual(cf1, CFSTR("MovingObjectsResults")))
  {
    result = ma::MovingObjectAnalysis::CopyProperty((ma::SceneAnalysis *)((char *)this + 832), cf1, a3, a4);
    if (!(_DWORD)result)
      return 0;
  }
  else if (CFEqual(cf1, CFSTR("InterestingnessResults")))
  {
    result = ma::InterestingnessAnalysis::CopyProperty((ma::SceneAnalysis *)((char *)this + 896), cf1, a3, a4);
    if (!(_DWORD)result)
      return 0;
  }
  else if (CFEqual(cf1, CFSTR("QualityResults")))
  {
    result = ma::QualityAnalysis::CopyProperty((ma::SceneAnalysis *)((char *)this + 984), cf1, a3, a4);
    if (!(_DWORD)result)
      return 0;
  }
  else
  {
    if (!CFEqual(cf1, CFSTR("MetaMotionProcessedResults")))
      return 4294967246;
    result = ma::QualityAnalysis::CopyMetaMotionProperty((ma::SceneAnalysis *)((char *)this + 984), a3, a4);
    if (!(_DWORD)result)
      return 0;
  }
  return result;
}

uint64_t ma::SceneAnalysis::CopyProperty(CFArrayRef *this, CMTimeRange *a2, CFTypeRef cf1, const __CFAllocator *a4, CFArrayRef *a5)
{
  __int128 v10;
  uint64_t result;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  CMTimeRange v16;
  CMTimeRange v17;
  CMTimeRange v18;
  CMTimeRange v19;
  CMTimeRange v20;

  if (CFEqual(cf1, CFSTR("CameraMotionResults")))
  {
    v10 = *(_OWORD *)&a2->start.epoch;
    *(_OWORD *)&v20.start.value = *(_OWORD *)&a2->start.value;
    *(_OWORD *)&v20.start.epoch = v10;
    *(_OWORD *)&v20.duration.timescale = *(_OWORD *)&a2->duration.timescale;
    result = ma::CameraMotionAnalysis::CopyProperty(this + 10, &v20, cf1, a4, a5);
    if ((_DWORD)result)
      return result;
    return 0;
  }
  if (CFEqual(cf1, CFSTR("FineSubjectMotionResults")))
  {
    v12 = *(_OWORD *)&a2->start.epoch;
    *(_OWORD *)&v19.start.value = *(_OWORD *)&a2->start.value;
    *(_OWORD *)&v19.start.epoch = v12;
    *(_OWORD *)&v19.duration.timescale = *(_OWORD *)&a2->duration.timescale;
    result = ma::FineSubjectMotionAnalysis::CopyProperty((ma::FineSubjectMotionAnalysis *)(this + 62), &v19, cf1, a4, a5);
    if ((_DWORD)result)
      return result;
    return 0;
  }
  if (CFEqual(cf1, CFSTR("SubtleMotionResults")))
  {
    v13 = *(_OWORD *)&a2->start.epoch;
    *(_OWORD *)&v18.start.value = *(_OWORD *)&a2->start.value;
    *(_OWORD *)&v18.start.epoch = v13;
    *(_OWORD *)&v18.duration.timescale = *(_OWORD *)&a2->duration.timescale;
    result = ma::SubtleMotionAnalysis::CopyProperty((ma::SubtleMotionAnalysis *)(this + 73), &v18, cf1, a4, a5);
    if ((_DWORD)result)
      return result;
    return 0;
  }
  if (CFEqual(cf1, CFSTR("InterestingnessResults")))
  {
    v14 = *(_OWORD *)&a2->start.epoch;
    *(_OWORD *)&v17.start.value = *(_OWORD *)&a2->start.value;
    *(_OWORD *)&v17.start.epoch = v14;
    *(_OWORD *)&v17.duration.timescale = *(_OWORD *)&a2->duration.timescale;
    result = ma::InterestingnessAnalysis::CopyProperty(this + 112, &v17, cf1, a4, a5);
    if ((_DWORD)result)
      return result;
    return 0;
  }
  if (!CFEqual(cf1, CFSTR("QualityResults")))
    return 4294967246;
  v15 = *(_OWORD *)&a2->start.epoch;
  *(_OWORD *)&v16.start.value = *(_OWORD *)&a2->start.value;
  *(_OWORD *)&v16.start.epoch = v15;
  *(_OWORD *)&v16.duration.timescale = *(_OWORD *)&a2->duration.timescale;
  result = ma::QualityAnalysis::CopyProperty(this + 123, &v16, cf1, a4, a5);
  if (!(_DWORD)result)
    return 0;
  return result;
}

uint64_t ma::SceneAnalysis::AddSegment(CFArrayRef *this, const ma::CameraMotionSegment *a2)
{
  ma::SceneSegment *v4;
  ma::SceneSegment *v5;
  int Count;
  uint64_t v7;
  ma::SceneSegment *v9;

  v4 = (ma::SceneSegment *)operator new(0x60uLL, MEMORY[0x1E0DE4E10]);
  if (!v4)
    return 4294967188;
  v5 = v4;
  if (*this)
    Count = CFArrayGetCount(*this);
  else
    Count = 0;
  ma::SceneSegment::SceneSegment(v5, Count, a2);
  v9 = v5;
  v7 = Vector<ma::Object *>::PushBack(this, &v9);
  if ((_DWORD)v7 && v9)
    (*(void (**)(ma::SceneSegment *))(*(_QWORD *)v9 + 8))(v9);
  return v7;
}

void sub_1B6CD23D0(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1BCCA12A4](v1, MEMORY[0x1E0DE4E10]);
  _Unwind_Resume(a1);
}

uint64_t ma::SceneAnalysis::AverageQualityScore(ma::SceneAnalysis *this, const __CFArray *a2, CMTimeRange *a3, float *a4)
{
  ma::SceneAnalysis *v7;
  int Count;
  CFIndex v9;
  uint64_t v10;
  float v11;
  float v12;
  const __CFDictionary *ValueAtIndex;
  __int128 v14;
  float Seconds;
  const __CFNumber *Value;
  float v17;
  uint64_t result;
  CMTime duration;
  CMTimeRange otherRange;
  CMTimeRange range;
  CMTimeRange v22;
  CMTimeRange v23;
  CMTime start;
  CMTime time;
  float v26;
  float valuePtr;

  v26 = 0.0;
  time = a3->duration;
  if (CMTimeGetSeconds(&time) <= 1.0)
  {
    start = a3->start;
    result = ma::SceneAnalysis::FindFrameQualityScore(v7, a2, &start, &v26);
    if ((_DWORD)result)
      return result;
    v17 = v26;
    goto LABEL_11;
  }
  Count = CFArrayGetCount(a2);
  if (Count >= 1)
  {
    v9 = 0;
    v10 = Count;
    v11 = 0.0;
    v12 = 0.0;
    do
    {
      ValueAtIndex = (const __CFDictionary *)CFArrayGetValueAtIndex(a2, v9);
      memset(&v23, 0, sizeof(v23));
      CMTimeRangeMakeFromDictionary(&v23, ValueAtIndex);
      v14 = *(_OWORD *)&a3->start.epoch;
      *(_OWORD *)&range.start.value = *(_OWORD *)&a3->start.value;
      *(_OWORD *)&range.start.epoch = v14;
      *(_OWORD *)&range.duration.timescale = *(_OWORD *)&a3->duration.timescale;
      memset(&v22, 0, sizeof(v22));
      otherRange = v23;
      CMTimeRangeGetIntersection(&v22, &range, &otherRange);
      duration = v22.duration;
      Seconds = CMTimeGetSeconds(&duration);
      if (Seconds > 0.0)
      {
        Value = (const __CFNumber *)CFDictionaryGetValue(ValueAtIndex, CFSTR("quality"));
        valuePtr = 0.0;
        CFNumberGetValue(Value, kCFNumberFloat32Type, &valuePtr);
        v12 = v12 + (float)(valuePtr * Seconds);
        v11 = v11 + Seconds;
      }
      ++v9;
    }
    while (v10 != v9);
    if (v11 != 0.0)
    {
      v17 = v12 / v11;
LABEL_11:
      result = 0;
      *a4 = v17;
      return result;
    }
  }
  return 4294967246;
}

uint64_t ma::SceneAnalysis::FindSegmentContainsFrame<ma::CameraMotionSegment>(uint64_t a1, int a2, unsigned int a3, CFArrayRef *a4)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  const __CFArray *v10;
  const void *ValueAtIndex;
  int v12;

  v7 = 0;
  v8 = (int)a3;
  v9 = a3;
  while (1)
  {
    v10 = *a4;
    if (*a4)
      LODWORD(v10) = CFArrayGetCount(v10);
    if (v8 + v7 >= (int)v10)
      break;
    ValueAtIndex = CFArrayGetValueAtIndex(*a4, v8 + v7);
    v12 = *(_DWORD *)(*(_QWORD *)ValueAtIndex + 12);
    if (v12 <= a2 && *(_DWORD *)(*(_QWORD *)ValueAtIndex + 16) + v12 > a2)
      return a3 + v7;
    ++v7;
  }
  return v9;
}

void ma::SceneAnalysis::CheckMergeBasedOnCmType(CFArrayRef *this, int a2, int a3, int a4, BOOL *a5, BOOL *a6)
{
  uint64_t v10;
  uint64_t *ValueAtIndex;
  uint64_t v12;
  int v13;
  int v14;
  _BOOL4 IsFast;
  BOOL v17;
  _BOOL4 v18;
  _BOOL4 v19;
  _BOOL4 v20;
  CMTime time;

  v10 = *(_QWORD *)CFArrayGetValueAtIndex(this[10], a2);
  ValueAtIndex = (uint64_t *)CFArrayGetValueAtIndex(this[10], a3);
  v12 = *ValueAtIndex;
  v13 = *(_DWORD *)(v10 + 188);
  v14 = *(_DWORD *)(*ValueAtIndex + 188);
  if (v13 >= 8 && v14 > 7)
    goto LABEL_13;
  if (v13 == v14)
  {
    IsFast = ma::CameraMotionSegment::IsFast((ma::CameraMotionSegment *)v10);
    if (IsFast == ma::CameraMotionSegment::IsFast((ma::CameraMotionSegment *)v12))
      goto LABEL_13;
  }
  if (!ma::CameraMotionSegment::IsFast((ma::CameraMotionSegment *)v10))
  {
    if (v13 != 6)
      goto LABEL_17;
LABEL_13:
    v18 = 1;
    goto LABEL_14;
  }
  v17 = ma::CameraMotionSegment::IsFast((ma::CameraMotionSegment *)v12);
  v18 = 1;
  if (v13 != 6 && !v17)
LABEL_17:
    v18 = *(_DWORD *)(v10 + 188)
       && !ma::CameraMotionSegment::IsFast((ma::CameraMotionSegment *)v10)
       && (time = *(CMTime *)(v10 + 48), CMTimeGetSeconds(&time) < 2.0)
       && *(_DWORD *)(v12 + 188) == 0;
LABEL_14:
  if (*((_BYTE *)this + 60))
  {
    v19 = ma::CameraMotionSegment::IsFast((ma::CameraMotionSegment *)v10);
    printf("prev: type = %d, fast = %d, gmv_sum {%6.1f, %6.1f}, merge = %d, split = 0\n", v13, v19, *(float *)(v10 + 172), *(float *)(v10 + 176), v18);
    v20 = ma::CameraMotionSegment::IsFast((ma::CameraMotionSegment *)v12);
    printf("curr: type = %d, fast = %d, gmv_sum {%6.1f, %6.1f}, merge = %d, split = 0\n", v14, v20, *(float *)(v12 + 172), *(float *)(v12 + 176), v18);
  }
  *a5 = v18;
  *a6 = 0;
}

const __CFArray *ma::SceneAnalysis::MergeLensSwitchSegments(CFArrayRef *this, const __CFArray *a2)
{
  const __CFArray *result;
  unsigned int v5;
  uint64_t v6;
  ma::CameraMotionSegment **ValueAtIndex;
  ma::CameraMotionSegment *v8;
  int v9;
  _BOOL4 v10;
  _BOOL4 v11;
  __int128 v12;
  CMTimeRange v13;

  result = *this;
  if (result)
  {
    v5 = 0;
    while ((int)CFArrayGetCount(result) >= 2)
    {
      result = *this;
      if (!*this)
        return result;
      if ((int)(v5 + 1) >= (int)CFArrayGetCount(result))
        break;
      v6 = *(_QWORD *)CFArrayGetValueAtIndex(*this, v5);
      ValueAtIndex = (ma::CameraMotionSegment **)CFArrayGetValueAtIndex(*this, v5 + 1);
      v8 = *ValueAtIndex;
      if (*(_BYTE *)(v6 + 88))
      {
        v9 = *((unsigned __int8 *)v8 + 88);
        v10 = *((float *)v8 + 21) < 0.3 || ma::CameraMotionSegment::IsVeryShort(*ValueAtIndex);
      }
      else
      {
        v9 = 0;
        v10 = 0;
      }
      if (*((_BYTE *)v8 + 88))
        v11 = *(float *)(v6 + 84) < 0.3 || ma::CameraMotionSegment::IsVeryShort((ma::CameraMotionSegment *)v6);
      else
        v11 = 0;
      if (v9 | v10 | v11)
      {
        ma::SceneSegment::Merge(v8, (const ma::Segment *)v6);
        *((_BYTE *)v8 + 88) = 1;
        result = (const __CFArray *)MotionAnalysis<ma::SubtleMotionSegment>::RemoveSegment(this, v5);
        if ((_DWORD)result)
          return result;
        v12 = *(_OWORD *)((char *)v8 + 40);
        *(_OWORD *)&v13.start.value = *(_OWORD *)((char *)v8 + 24);
        *(_OWORD *)&v13.start.epoch = v12;
        *(_OWORD *)&v13.duration.timescale = *(_OWORD *)((char *)v8 + 56);
        result = (const __CFArray *)ma::SceneAnalysis::AverageQualityScore((ma::SceneAnalysis *)this, a2, &v13, (float *)v8 + 21);
        if ((_DWORD)result)
          return result;
      }
      else
      {
        ++v5;
      }
      result = *this;
      if (!*this)
        return result;
    }
    return 0;
  }
  return result;
}

uint64_t ma::SceneAnalysis::PruneDescriptorsBasedOnScene(ma::SceneAnalysis *this)
{
  const __CFArray *v2;
  CFIndex v3;
  const __CFArray **v4;
  const __CFArray *v5;
  const void *ValueAtIndex;
  __int128 v7;
  __int128 v8;
  uint64_t result;
  uint64_t v10;
  int v11;
  const __CFArray *v12;
  id **v13;
  const ma::DescriptorSegment **v14;
  const ma::Segment *v15;
  CMTimeRange v16;
  float v17;
  CFIndex idx;

  idx = 0;
  v17 = 0.0;
  v2 = (const __CFArray *)*((_QWORD *)this + 95);
  if (!v2 || !CFArrayGetCount(v2))
    return 4294967246;
  v3 = 0;
  v4 = (const __CFArray **)((char *)this + 760);
  while (1)
  {
    v5 = *(const __CFArray **)this;
    if (*(_QWORD *)this)
      LODWORD(v5) = CFArrayGetCount(v5);
    if (v3 >= (int)v5)
      return 0;
    ValueAtIndex = CFArrayGetValueAtIndex(*(CFArrayRef *)this, v3);
    v7 = *(_OWORD *)(*(_QWORD *)ValueAtIndex + 24);
    v8 = *(_OWORD *)(*(_QWORD *)ValueAtIndex + 56);
    *(_OWORD *)&v16.start.epoch = *(_OWORD *)(*(_QWORD *)ValueAtIndex + 40);
    *(_OWORD *)&v16.duration.timescale = v8;
    *(_OWORD *)&v16.start.value = v7;
    result = ma::DescriptorAnalysis::GetBoundaryIndexOfTimeRange((CFArrayRef *)this + 95, &v16, (int *)&idx + 1, (int *)&idx);
    if ((_DWORD)result)
      return result;
    LODWORD(v10) = HIDWORD(idx);
LABEL_9:
    v11 = idx;
    while ((int)v10 < v11)
    {
      v12 = *v4;
      if (*v4)
        LODWORD(v12) = CFArrayGetCount(v12);
      if ((int)v10 >= (int)v12 - 1)
        break;
      v10 = SHIDWORD(idx) + 1;
      v13 = *(id ***)CFArrayGetValueAtIndex(*((CFArrayRef *)this + 95), SHIDWORD(idx));
      v14 = (const ma::DescriptorSegment **)CFArrayGetValueAtIndex(*((CFArrayRef *)this + 95), v10);
      v15 = *v14;
      result = ma::DescriptorSegment::Compare(v13, *v14, &v17, *((unsigned __int8 *)this + 76));
      if ((_DWORD)result)
        return result;
      if (v17 >= 0.1)
      {
        HIDWORD(idx) = v10;
        goto LABEL_9;
      }
      ma::Segment::Merge((ma::Segment *)v13, v15);
      result = MotionAnalysis<ma::SubtleMotionSegment>::RemoveSegment((CFArrayRef *)this + 95, v10);
      if ((_DWORD)result)
        return result;
      LODWORD(v10) = HIDWORD(idx);
      v11 = idx - 1;
      LODWORD(idx) = idx - 1;
    }
    ++v3;
  }
}

uint64_t ma::SceneAnalysis::FindFrameQualityScore(ma::SceneAnalysis *this, CFArrayRef theArray, CMTime *a3, float *a4)
{
  int Count;
  int v8;
  uint64_t v9;
  const __CFDictionary *ValueAtIndex;
  const __CFNumber *Value;
  uint64_t result;
  CFIndex v13;
  CMTime v14;
  CMTimeRange range;
  CMTimeRange time1;
  CMTimeRange v17;
  CMTime time2;

  Count = CFArrayGetCount(theArray);
  v8 = Count;
  if (!Count)
    return 4294967246;
  v9 = (Count - 1);
  ValueAtIndex = (const __CFDictionary *)CFArrayGetValueAtIndex(theArray, (int)v9);
  memset(&v17, 0, sizeof(v17));
  CMTimeRangeMakeFromDictionary(&v17, ValueAtIndex);
  *(_OWORD *)&time1.start.value = *(_OWORD *)&a3->value;
  time1.start.epoch = a3->epoch;
  time2 = v17.start;
  if (CMTimeCompare(&time1.start, &time2) < 0)
  {
    if (v8 < 2)
      return 4294967246;
    v13 = 0;
    while (1)
    {
      ValueAtIndex = (const __CFDictionary *)CFArrayGetValueAtIndex(theArray, v13);
      CMTimeRangeMakeFromDictionary(&time1, ValueAtIndex);
      v17 = time1;
      range = time1;
      v14 = *a3;
      if (CMTimeRangeContainsTime(&range, &v14))
        break;
      if (v9 == ++v13)
        return 4294967246;
    }
  }
  Value = (const __CFNumber *)CFDictionaryGetValue(ValueAtIndex, CFSTR("quality"));
  LODWORD(time1.start.value) = 0;
  CFNumberGetValue(Value, kCFNumberFloat32Type, &time1);
  if (*(float *)&time1.start.value >= 0.0)
  {
    result = 0;
    *a4 = *(float *)&time1.start.value;
    return result;
  }
  return 4294967246;
}

uint64_t ma::SceneAnalysis::GenerateSceneAttributes(CFArrayRef *this, const ma::SceneSegment *a2, const __CFDictionary **a3)
{
  CFMutableDictionaryRef Mutable;
  CFNumberRef v7;
  CFNumberRef v8;
  __int128 v9;
  int v10;
  CFNumberRef v11;
  uint64_t result;
  CMTimeRange v13;
  int valuePtr;
  CFNumberRef v15;

  Mutable = CFDictionaryCreateMutable(0, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  if (!Mutable)
    goto LABEL_9;
  valuePtr = *((_DWORD *)a2 + 19);
  v7 = CFNumberCreate(0, kCFNumberFloat32Type, &valuePtr);
  v15 = v7;
  if (!v7
    || (CFDictionarySetValue(Mutable, CFSTR("distance"), v7),
        CF<opaqueCMSampleBuffer *>::~CF((const void **)&v15),
        valuePtr = *((_DWORD *)a2 + 20),
        v8 = CFNumberCreate(0, kCFNumberFloat32Type, &valuePtr),
        (v15 = v8) == 0))
  {
LABEL_8:
    CF<opaqueCMSampleBuffer *>::~CF((const void **)&v15);
    CFRelease(Mutable);
    Mutable = 0;
LABEL_9:
    result = 4294967188;
    goto LABEL_10;
  }
  CFDictionarySetValue(Mutable, CFSTR("sceneprintDistance"), v8);
  CF<opaqueCMSampleBuffer *>::~CF((const void **)&v15);
  if (*((_BYTE *)this + 63))
  {
    v9 = *(_OWORD *)((char *)a2 + 40);
    *(_OWORD *)&v13.start.value = *(_OWORD *)((char *)a2 + 24);
    *(_OWORD *)&v13.start.epoch = v9;
    *(_OWORD *)&v13.duration.timescale = *(_OWORD *)((char *)a2 + 56);
    ma::SlowMotionAnalysis::FlickernessForRange(this + 150, &v13);
    valuePtr = v10;
    v11 = CFNumberCreate(0, kCFNumberFloat32Type, &valuePtr);
    v15 = v11;
    if (v11)
    {
      CFDictionarySetValue(Mutable, CFSTR("slowMoFlicker"), v11);
      CF<opaqueCMSampleBuffer *>::~CF((const void **)&v15);
      goto LABEL_7;
    }
    goto LABEL_8;
  }
LABEL_7:
  result = 0;
LABEL_10:
  *a3 = Mutable;
  return result;
}

void sub_1B6CD2D68(_Unwind_Exception *a1)
{
  uint64_t v1;

  CF<opaqueCMSampleBuffer *>::~CF((const void **)(v1 - 40));
  _Unwind_Resume(a1);
}

void sub_1B6CD2EF8(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  v4 = v3;

  _Unwind_Resume(a1);
}

void sub_1B6CD2F8C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, objc_super a9)
{
  a9.super_class = (Class)VCPVideoPixelStabilizer;
  -[_Unwind_Exception dealloc](&a9, sel_dealloc);
  _Unwind_Resume(a1);
}

void sub_1B6CD30E8(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1B6CD3198(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

uint64_t __Block_byref_object_copy__7(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void __Block_byref_object_dispose__7(uint64_t a1)
{

}

void sub_1B6CD34D8(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1B6CD35E4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1B6CD3A4C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, _Unwind_Exception *exception_object, void *a10, void *a11, void *a12)
{
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  void *v16;
  void *v17;
  void *v18;
  void *v19;

  _Unwind_Resume(a1);
}

void sub_1B6CD3BB8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, objc_super a9)
{
  a9.super_class = (Class)VCPContentAnalysis;
  -[_Unwind_Exception dealloc](&a9, sel_dealloc);
  _Unwind_Resume(a1);
}

void sub_1B6CD3FF4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  CVPixelBufferLock::~CVPixelBufferLock((CVPixelBufferLock *)va);
  _Unwind_Resume(a1);
}

uint64_t MAImageAnalysisRequest::DecodeImage(MAImageAnalysisRequest *this, const __CFData *a2, __CVBuffer **a3)
{
  CFMutableDictionaryRef Mutable;
  CFNumberRef v4;
  uint64_t Container;
  CFMutableDictionaryRef v7;
  CFDictionaryRef theDict;
  const void *v9;
  CFTypeRef cf;
  int valuePtr;
  CFNumberRef v12;

  v9 = 0;
  cf = 0;
  theDict = 0;
  Mutable = CFDictionaryCreateMutable(0, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  v7 = Mutable;
  valuePtr = 875704422;
  v4 = CFNumberCreate(0, kCFNumberSInt32Type, &valuePtr);
  v12 = v4;
  if (v4)
    CFDictionarySetValue(Mutable, (const void *)*MEMORY[0x1E0D09570], v4);
  CF<opaqueCMSampleBuffer *>::~CF((const void **)&v12);
  Container = CMPhotoDecompressionSessionCreate();
  if (!(_DWORD)Container)
  {
    Container = CMPhotoDecompressionSessionCreateContainer();
    if (!(_DWORD)Container)
    {
      Container = CMPhotoDecompressionContainerCreateDictionaryDescription();
      if (!(_DWORD)Container)
        Container = 4294967246;
    }
  }
  CF<opaqueCMSampleBuffer *>::~CF((const void **)&v7);
  CF<opaqueCMSampleBuffer *>::~CF((const void **)&theDict);
  CF<opaqueCMSampleBuffer *>::~CF(&v9);
  CF<opaqueCMSampleBuffer *>::~CF(&cf);
  return Container;
}

void sub_1B6CD4388(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, const void *a9, const void *a10, const void *a11, const void *a12)
{
  CF<opaqueCMSampleBuffer *>::~CF(&a9);
  CF<opaqueCMSampleBuffer *>::~CF(&a10);
  CF<opaqueCMSampleBuffer *>::~CF(&a11);
  CF<opaqueCMSampleBuffer *>::~CF(&a12);
  _Unwind_Resume(a1);
}

uint64_t CFDictionarySet<int>(__CFDictionary *a1, const void *a2, int a3)
{
  CFNumberRef v5;
  uint64_t v6;
  int valuePtr;
  CFNumberRef v9;

  valuePtr = a3;
  v5 = CFNumberCreate(0, kCFNumberSInt32Type, &valuePtr);
  v9 = v5;
  if (v5)
  {
    CFDictionarySetValue(a1, a2, v5);
    v6 = 0;
  }
  else
  {
    v6 = 4294967188;
  }
  CF<opaqueCMSampleBuffer *>::~CF((const void **)&v9);
  return v6;
}

void sub_1B6CD444C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  CF<opaqueCMSampleBuffer *>::~CF((const void **)va);
  _Unwind_Resume(a1);
}

uint64_t MAImageAnalysisRequest::Start(MAImageAnalysisRequest *this, void (*a2)(void *, int))
{
  MAImageAnalysisRequest *v4;
  uint64_t v5;
  std::__shared_weak_count *v6;
  VCPImageHumanPoseAnalyzer *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  CFDataRef v11;
  VCPImageHumanPoseAnalyzer *v12;
  std::__shared_weak_count *v13;
  uint64_t v14;
  const UInt8 *v15;
  CFMutableDictionaryRef theDict;
  VCPImageHumanPoseAnalyzer *v17;
  std::__shared_weak_count *v18;
  __CFDictionary *Mutable;
  __CVBuffer *v20;
  const __CFData *v21;

  v21 = 0;
  v4 = (MAImageAnalysisRequest *)(*((uint64_t (**)(_QWORD, _QWORD, _QWORD, const __CFData **))this + 2))(*((_QWORD *)this + 4), 0, *((_QWORD *)this + 1), &v21);
  v5 = (uint64_t)v4;
  if (!(_DWORD)v4)
  {
    v20 = 0;
    v5 = MAImageAnalysisRequest::DecodeImage(v4, v21, &v20);
    if (!(_DWORD)v5)
    {
      Mutable = CFDictionaryCreateMutable(0, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
      v17 = 0;
      v18 = 0;
      _ZNSt3__115allocate_sharedB8ne180100I25VCPImageHumanPoseAnalyzerNS_9allocatorIS1_EEJEvEENS_10shared_ptrIT_EERKT0_DpOT1_(&v12);
      v7 = v12;
      v6 = v13;
      v17 = v12;
      v18 = v13;
      if (v12)
      {
        v5 = VCPImageHumanPoseAnalyzer::Init(v12);
        if (!(_DWORD)v5)
        {
          v5 = VCPImageHumanPoseAnalyzer::Analyze(v7, v20, Mutable);
          if (!(_DWORD)v5)
          {
            theDict = CFDictionaryCreateMutable(0, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
            CFDictionarySet<int>(theDict, CFSTR("version"), 34);
            CFDictionarySetValue(theDict, CFSTR("metadataRanges"), Mutable);
            PB::Writer::Writer((PB::Writer *)&v14);
            MAImageComputeResult::MAImageComputeResult((MAImageComputeResult *)&v12);
            v5 = MAImageComputeResultFromCFDictionary(theDict, (MAImageComputeResult *)&v12);
            if (!(_DWORD)v5)
            {
              MAImageComputeResult::writeTo((MAImageComputeResult *)&v12, (PB::Writer *)&v14);
              v11 = CFDataCreateWithBytesNoCopy(0, v15, v14 - (_QWORD)v15, (CFAllocatorRef)*MEMORY[0x1E0C9AE20]);
              (*((void (**)(_QWORD))this + 3))(*((_QWORD *)this + 4));
              a2(*((void **)this + 4), 0);
              CF<opaqueCMSampleBuffer *>::~CF((const void **)&v11);
            }
            MAImageComputeResult::~MAImageComputeResult((MAImageComputeResult *)&v12);
            PB::Writer::~Writer((PB::Writer *)&v14);
            CF<opaqueCMSampleBuffer *>::~CF((const void **)&theDict);
          }
        }
      }
      else
      {
        v5 = 1;
      }
      if (v6)
      {
        p_shared_owners = (unint64_t *)&v6->__shared_owners_;
        do
          v9 = __ldaxr(p_shared_owners);
        while (__stlxr(v9 - 1, p_shared_owners));
        if (!v9)
        {
          ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
          std::__shared_weak_count::__release_weak(v6);
        }
      }
      CF<opaqueCMSampleBuffer *>::~CF((const void **)&Mutable);
    }
    CF<opaqueCMSampleBuffer *>::~CF((const void **)&v20);
  }
  CF<opaqueCMSampleBuffer *>::~CF((const void **)&v21);
  return v5;
}

void sub_1B6CD465C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  uint64_t v3;
  uint64_t v5;
  va_list va;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  va_list va1;
  uint64_t v13;
  uint64_t v14;
  const void *v15;
  va_list va2;
  va_list va3;

  va_start(va3, a3);
  va_start(va2, a3);
  va_start(va1, a3);
  va_start(va, a3);
  v5 = va_arg(va1, _QWORD);
  v7 = va_arg(va1, _QWORD);
  v8 = va_arg(va1, _QWORD);
  v9 = va_arg(va1, _QWORD);
  v10 = va_arg(va1, _QWORD);
  va_copy(va2, va1);
  v11 = va_arg(va2, _QWORD);
  v13 = va_arg(va2, _QWORD);
  v14 = va_arg(va2, _QWORD);
  va_copy(va3, va2);
  v15 = va_arg(va3, const void *);
  MAImageComputeResult::~MAImageComputeResult((MAImageComputeResult *)va);
  PB::Writer::~Writer((PB::Writer *)va1);
  CF<opaqueCMSampleBuffer *>::~CF((const void **)va2);
  std::shared_ptr<VCPImageHumanPoseAnalyzer>::~shared_ptr[abi:ne180100]((uint64_t)va3);
  CF<opaqueCMSampleBuffer *>::~CF((const void **)(v3 - 72));
  CF<opaqueCMSampleBuffer *>::~CF((const void **)(v3 - 64));
  CF<opaqueCMSampleBuffer *>::~CF((const void **)(v3 - 56));
  _Unwind_Resume(a1);
}

void MAImageAnalysisRequest::~MAImageAnalysisRequest(MAImageAnalysisRequest *this)
{
  ma::MotionFilter::~MotionFilter(this);
  JUMPOUT(0x1BCCA12BCLL);
}

uint64_t std::shared_ptr<VCPImageHumanPoseAnalyzer>::~shared_ptr[abi:ne180100](uint64_t a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  v2 = *(std::__shared_weak_count **)(a1 + 8);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  return a1;
}

_QWORD *_ZNSt3__115allocate_sharedB8ne180100I25VCPImageHumanPoseAnalyzerNS_9allocatorIS1_EEJEvEENS_10shared_ptrIT_EERKT0_DpOT1_@<X0>(_QWORD *a1@<X8>)
{
  _QWORD *v2;
  _QWORD *result;

  v2 = operator new(0x1D8uLL);
  result = _ZNSt3__120__shared_ptr_emplaceI25VCPImageHumanPoseAnalyzerNS_9allocatorIS1_EEEC2B8ne180100IJES3_Li0EEES3_DpOT_(v2);
  *a1 = v2 + 3;
  a1[1] = v2;
  return result;
}

void sub_1B6CD47A0(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *_ZNSt3__120__shared_ptr_emplaceI25VCPImageHumanPoseAnalyzerNS_9allocatorIS1_EEEC2B8ne180100IJES3_Li0EEES3_DpOT_(_QWORD *a1)
{
  char v3;

  a1[2] = 0;
  *a1 = &unk_1E6B14548;
  a1[1] = 0;
  std::allocator<VCPImageHumanPoseAnalyzer>::construct[abi:ne180100]<VCPImageHumanPoseAnalyzer>((uint64_t)&v3, (uint64_t)(a1 + 3));
  return a1;
}

void sub_1B6CD47FC(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;

  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<VCPImageHumanPoseAnalyzer>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1E6B14548;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<VCPImageHumanPoseAnalyzer>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1E6B14548;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1BCCA12BCLL);
}

void std::__shared_ptr_emplace<VCPImageHumanPoseAnalyzer>::__on_zero_shared(uint64_t a1)
{
  char v1;

  std::allocator<VCPImageHumanPoseAnalyzer>::destroy[abi:ne180100]((uint64_t)&v1, a1 + 24);
}

CFMutableArrayRef std::allocator<VCPImageHumanPoseAnalyzer>::construct[abi:ne180100]<VCPImageHumanPoseAnalyzer>(uint64_t a1, uint64_t a2)
{
  CFMutableArrayRef result;

  *(_OWORD *)(a2 + 416) = 0u;
  *(_OWORD *)(a2 + 432) = 0u;
  *(_OWORD *)(a2 + 384) = 0u;
  *(_OWORD *)(a2 + 400) = 0u;
  *(_OWORD *)(a2 + 352) = 0u;
  *(_OWORD *)(a2 + 368) = 0u;
  *(_OWORD *)(a2 + 320) = 0u;
  *(_OWORD *)(a2 + 336) = 0u;
  *(_OWORD *)(a2 + 288) = 0u;
  *(_OWORD *)(a2 + 304) = 0u;
  *(_OWORD *)(a2 + 256) = 0u;
  *(_OWORD *)(a2 + 272) = 0u;
  *(_OWORD *)(a2 + 224) = 0u;
  *(_OWORD *)(a2 + 240) = 0u;
  *(_OWORD *)(a2 + 192) = 0u;
  *(_OWORD *)(a2 + 208) = 0u;
  *(_OWORD *)(a2 + 160) = 0u;
  *(_OWORD *)(a2 + 176) = 0u;
  *(_OWORD *)(a2 + 128) = 0u;
  *(_OWORD *)(a2 + 144) = 0u;
  *(_OWORD *)(a2 + 96) = 0u;
  *(_OWORD *)(a2 + 112) = 0u;
  *(_OWORD *)(a2 + 64) = 0u;
  *(_OWORD *)(a2 + 80) = 0u;
  *(_OWORD *)(a2 + 32) = 0u;
  *(_OWORD *)(a2 + 48) = 0u;
  *(_OWORD *)a2 = 0u;
  *(_OWORD *)(a2 + 16) = 0u;
  *(_QWORD *)(a2 + 8) = 0;
  *(_BYTE *)(a2 + 1) = 1;
  *(_DWORD *)(a2 + 396) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)(a2 + 24) = 0;
  result = CFArrayCreateMutable(0, 0, MEMORY[0x1E0C9B378]);
  *(_QWORD *)(a2 + 416) = result;
  *(_QWORD *)(a2 + 424) = 0;
  *(_QWORD *)(a2 + 432) = 0;
  *(_QWORD *)(a2 + 440) = 0;
  return result;
}

void sub_1B6CD4910(_Unwind_Exception *a1)
{
  VCPCNNModelEspresso *v1;

  VCPCNNModelEspresso::~VCPCNNModelEspresso(v1);
  _Unwind_Resume(a1);
}

void std::allocator<VCPImageHumanPoseAnalyzer>::destroy[abi:ne180100](uint64_t a1, uint64_t a2)
{
  void **v3;

  v3 = (void **)(a2 + 424);
  std::vector<std::vector<std::vector<float>>>::__destroy_vector::operator()[abi:ne180100](&v3);
  CF<opaqueCMSampleBuffer *>::~CF((const void **)(a2 + 416));
  VCPCNNModelEspresso::~VCPCNNModelEspresso((VCPCNNModelEspresso *)(a2 + 8));
}

void std::vector<std::vector<std::vector<float>>>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  void **v1;
  void **v2;
  void **v4;
  void *v5;
  void **v6;

  v1 = *a1;
  v2 = (void **)**a1;
  if (v2)
  {
    v4 = (void **)v1[1];
    v5 = **a1;
    if (v4 != v2)
    {
      do
      {
        v4 -= 3;
        v6 = v4;
        std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100](&v6);
      }
      while (v4 != v2);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  void **v2;

  v2 = *a1;
  if (*v2)
  {
    std::vector<std::vector<float>>::__clear[abi:ne180100]((uint64_t *)v2);
    operator delete(**a1);
  }
}

void std::vector<std::vector<float>>::__clear[abi:ne180100](uint64_t *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  void *v6;

  v3 = *a1;
  v2 = a1[1];
  if (v2 != *a1)
  {
    v4 = a1[1];
    do
    {
      v6 = *(void **)(v4 - 24);
      v4 -= 24;
      v5 = v6;
      if (v6)
      {
        *(_QWORD *)(v2 - 16) = v5;
        operator delete(v5);
      }
      v2 = v4;
    }
    while (v4 != v3);
  }
  a1[1] = v3;
}

void sub_1B6CD4C88(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1B6CD54B4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, void *a13, void *a14)
{
  void *v14;
  void *v15;

  _Unwind_Resume(a1);
}

void sub_1B6CD56A8(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  v3 = v2;

  _Unwind_Resume(a1);
}

void sub_1B6CD67A0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void *a22,void *a23,void *a24,void *a25,void *a26,void *a27,void *a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,void *a33,void *a34)
{
  void *v34;

  _Unwind_Resume(a1);
}

void sub_1B6CD6BBC(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1B6CD6E58(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{

  _Unwind_Resume(a1);
}

void sub_1B6CD7028(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1B6CD71E0(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1B6CD72E4(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1B6CD7650(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9, void *a10, void *a11)
{

  _Unwind_Resume(a1);
}

CFDictionaryRef CMTimeToNSDictionary(CMTime *a1)
{
  CMTime v2;

  v2 = *a1;
  return CMTimeCopyAsDictionary(&v2, 0);
}

void sub_1B6CD79A0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, objc_super a10)
{
  void *v10;
  void *v11;

  a10.super_class = (Class)VCPVideoInterpolator;
  -[_Unwind_Exception dealloc](&a10, sel_dealloc);
  _Unwind_Resume(a1);
}

void sub_1B6CD9A94(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, void *a13, void *a14, void *a15, uint64_t a16, void *a17, void *a18, void *a19, void *a20,void *a21,void *a22,void *a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,void *a28,uint64_t a29,uint64_t a30,void *a31,uint64_t a32,void *a33,void *a34,void *a35,void *a36,uint64_t a37,void *a38)
{
  void *v38;

  _Unwind_Resume(a1);
}

void sub_1B6CDA070(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1B6CDA6D0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *a19, void *a20,uint64_t a21,uint64_t a22,uint64_t a23,void *a24)
{
  void *v24;

  _Unwind_Resume(a1);
}

void sub_1B6CDA8E8(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_1B6CDB124(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1B6CDB8D8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13)
{
  void *v13;
  void *v14;

  _Unwind_Resume(a1);
}

void sub_1B6CDC7A8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9, void *a10, void *a11, void *a12, void *a13, void *a14, void *a15, void *a16, void *a17, void *a18, void *a19, void *a20,void *a21,void *a22,void *a23,void *a24,void *a25,void *a26)
{
  void *v26;
  void *v27;
  void *v28;

  _Unwind_Resume(a1);
}

void sub_1B6CDCD8C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, void *a13)
{
  void *v13;

  _Unwind_Resume(a1);
}

void sub_1B6CDCF04(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_1B6CDCFB8(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1B6CDD1F4(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1B6CDD464(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1B6CDD744(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *a16)
{

  _Unwind_Resume(a1);
}

void sub_1B6CDD920(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1B6CDDC8C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15)
{

  _Unwind_Resume(a1);
}

void sub_1B6CDF9E0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, void *a11, void *a12, void *a13, void *a14, void *a15, void *a16, void *a17, uint64_t a18, void *a19, void *a20,void *a21,void *a22,void *a23,void *a24,void *a25,void *a26,void *a27,void *a28,void *a29,void *a30,void *a31,void *a32,void *a33,_Unwind_Exception *exception_object,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,void *a39)
{
  void *v39;
  void *v40;
  void *v41;
  void *v42;

  _Unwind_Resume(a1);
}

void sub_1B6CE00D4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;

  _Unwind_Resume(a1);
}

void sub_1B6CE0390(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void sub_1B6CE0448(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1B6CE0938(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9)
{
  void *v9;

  _Unwind_Resume(a1);
}

void sub_1B6CE1090(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  void *v14;

  _Unwind_Resume(a1);
}

void sub_1B6CE13E0(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1B6CE1454(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, objc_super a9)
{
  void *v9;
  void *v10;

  v10 = v9;

  a9.super_class = (Class)VCPLoaned;
  -[_Unwind_Exception dealloc](&a9, sel_dealloc);
  _Unwind_Resume(a1);
}

void sub_1B6CE1554(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1B6CE15AC(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1B6CE16F0(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);

  _Unwind_Resume(a1);
}

void sub_1B6CE1788(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id obj)
{
  void *v10;

  objc_sync_exit(obj);
  _Unwind_Resume(a1);
}

void sub_1B6CE1980(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

uint64_t VCPProtoMovieSaliencyResultReadFrom(uint64_t a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  char v14;
  uint64_t v16;
  int v17;
  unint64_t v19;
  VCPProtoBounds *v20;
  uint64_t v21;
  unint64_t v22;
  int v23;
  uint64_t result;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) < *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
  {
    v7 = (int *)MEMORY[0x1E0D82BB8];
    do
    {
      if (*(_BYTE *)(a2 + *v5))
        return *(_BYTE *)(a2 + *v5) == 0;
      v8 = 0;
      v9 = 0;
      v10 = 0;
      while (1)
      {
        v11 = *v3;
        v12 = *(_QWORD *)(a2 + v11);
        v13 = v12 + 1;
        if (v12 == -1 || v13 > *(_QWORD *)(a2 + *v4))
          break;
        v14 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
        *(_QWORD *)(a2 + v11) = v13;
        v10 |= (unint64_t)(v14 & 0x7F) << v8;
        if ((v14 & 0x80) == 0)
          goto LABEL_12;
        v8 += 7;
        if (v9++ >= 9)
        {
          v10 = 0;
          v16 = *v5;
          v17 = *(unsigned __int8 *)(a2 + v16);
          goto LABEL_14;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
      v16 = *v5;
      v17 = *(unsigned __int8 *)(a2 + v16);
      if (*(_BYTE *)(a2 + v16))
        v10 = 0;
LABEL_14:
      if (v17 || (v10 & 7) == 4)
        return *(_BYTE *)(a2 + *v5) == 0;
      v19 = v10 >> 3;
      if ((v10 >> 3) == 3)
      {
        v21 = *v3;
        v22 = *(_QWORD *)(a2 + v21);
        if (v22 <= 0xFFFFFFFFFFFFFFFBLL && v22 + 4 <= *(_QWORD *)(a2 + *v4))
        {
          v23 = *(_DWORD *)(*(_QWORD *)(a2 + *v7) + v22);
          *(_QWORD *)(a2 + v21) = v22 + 4;
        }
        else
        {
          *(_BYTE *)(a2 + v16) = 1;
          v23 = 0;
        }
        *(_DWORD *)(a1 + 16) = v23;
      }
      else
      {
        if ((_DWORD)v19 == 2)
        {
          v20 = objc_alloc_init(VCPProtoBounds);
          objc_storeStrong((id *)(a1 + 8), v20);
          if (!PBReaderPlaceMark() || !VCPProtoBoundsReadFrom((uint64_t)v20, a2))
          {
LABEL_36:

            return 0;
          }
        }
        else
        {
          if ((_DWORD)v19 != 1)
          {
            result = PBReaderSkipValueWithTag();
            if (!(_DWORD)result)
              return result;
            continue;
          }
          v20 = objc_alloc_init(VCPProtoTimeRange);
          objc_storeStrong((id *)(a1 + 24), v20);
          if (!PBReaderPlaceMark() || !VCPProtoTimeRangeReadFrom((uint64_t)v20, a2))
            goto LABEL_36;
        }
        PBReaderRecallMark();

      }
    }
    while (*(_QWORD *)(a2 + *v3) < *(_QWORD *)(a2 + *v4));
  }
  return *(_BYTE *)(a2 + *v5) == 0;
}

void sub_1B6CE22EC(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;

  v5 = v4;

  _Unwind_Resume(a1);
}

void sub_1B6CE23F0(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1B6CE24DC(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_1B6CE266C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  _Unwind_Resume(a1);
}

void sub_1B6CE2F5C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  va_list va;

  va_start(va, a5);

  CF<opaqueCMSampleBuffer *>::~CF((const void **)va);
  _Unwind_Resume(a1);
}

void sub_1B6CE3364(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1B6CE3A80(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *a17, uint64_t a18, void *a19)
{
  void *v19;

  _Unwind_Resume(a1);
}

void sub_1B6CE3E9C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  void *v14;
  void *v15;

  _Unwind_Resume(a1);
}

void sub_1B6CE41C4(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1B6CE4690(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  _Unwind_Resume(a1);
}

void sub_1B6CE4ADC(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  _Unwind_Resume(a1);
}

void sub_1B6CE4C60(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_1B6CE4D30(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

uint64_t VCPProtoImageFaceResultReadFrom(uint64_t a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  char v14;
  BOOL v15;
  int v16;
  char v18;
  unsigned int v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  char v24;
  uint64_t result;
  char v26;
  unsigned int v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  char v31;
  char v32;
  unsigned int v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  char v37;
  char v38;
  unsigned int v39;
  uint64_t v40;
  uint64_t v41;
  unint64_t v42;
  char v43;
  VCPProtoBounds *v44;
  char v45;
  unsigned int v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  unint64_t v50;
  char v51;
  uint64_t v52;
  unint64_t v53;
  int v54;
  uint64_t v55;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) >= *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
    return *(_BYTE *)(a2 + *v5) == 0;
  v7 = (int *)MEMORY[0x1E0D82BB8];
  while (2)
  {
    if (*(_BYTE *)(a2 + *v5))
      return *(_BYTE *)(a2 + *v5) == 0;
    v8 = 0;
    v9 = 0;
    v10 = 0;
    while (1)
    {
      v11 = *v3;
      v12 = *(_QWORD *)(a2 + v11);
      v13 = v12 + 1;
      if (v12 == -1 || v13 > *(_QWORD *)(a2 + *v4))
        break;
      v14 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
      *(_QWORD *)(a2 + v11) = v13;
      v10 |= (unint64_t)(v14 & 0x7F) << v8;
      if ((v14 & 0x80) == 0)
        goto LABEL_12;
      v8 += 7;
      v15 = v9++ >= 9;
      if (v15)
      {
        v10 = 0;
        v16 = *(unsigned __int8 *)(a2 + *v5);
        goto LABEL_14;
      }
    }
    *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
    v16 = *(unsigned __int8 *)(a2 + *v5);
    if (*(_BYTE *)(a2 + *v5))
      v10 = 0;
LABEL_14:
    if (v16 || (v10 & 7) == 4)
      return *(_BYTE *)(a2 + *v5) == 0;
    switch((v10 >> 3))
    {
      case 1u:
        v18 = 0;
        v19 = 0;
        v20 = 0;
        while (1)
        {
          v21 = *v3;
          v22 = *(_QWORD *)(a2 + v21);
          v23 = v22 + 1;
          if (v22 == -1 || v23 > *(_QWORD *)(a2 + *v4))
            break;
          v24 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v22);
          *(_QWORD *)(a2 + v21) = v23;
          v20 |= (unint64_t)(v24 & 0x7F) << v18;
          if ((v24 & 0x80) == 0)
            goto LABEL_63;
          v18 += 7;
          v15 = v19++ >= 9;
          if (v15)
          {
            LODWORD(v20) = 0;
            goto LABEL_65;
          }
        }
        *(_BYTE *)(a2 + *v5) = 1;
LABEL_63:
        if (*(_BYTE *)(a2 + *v5))
          LODWORD(v20) = 0;
LABEL_65:
        v55 = 16;
        goto LABEL_78;
      case 2u:
        v26 = 0;
        v27 = 0;
        v20 = 0;
        while (2)
        {
          v28 = *v3;
          v29 = *(_QWORD *)(a2 + v28);
          v30 = v29 + 1;
          if (v29 == -1 || v30 > *(_QWORD *)(a2 + *v4))
          {
            *(_BYTE *)(a2 + *v5) = 1;
          }
          else
          {
            v31 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v29);
            *(_QWORD *)(a2 + v28) = v30;
            v20 |= (unint64_t)(v31 & 0x7F) << v26;
            if (v31 < 0)
            {
              v26 += 7;
              v15 = v27++ >= 9;
              if (v15)
              {
                LODWORD(v20) = 0;
                goto LABEL_69;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(a2 + *v5))
          LODWORD(v20) = 0;
LABEL_69:
        v55 = 24;
        goto LABEL_78;
      case 3u:
        v32 = 0;
        v33 = 0;
        v20 = 0;
        while (2)
        {
          v34 = *v3;
          v35 = *(_QWORD *)(a2 + v34);
          v36 = v35 + 1;
          if (v35 == -1 || v36 > *(_QWORD *)(a2 + *v4))
          {
            *(_BYTE *)(a2 + *v5) = 1;
          }
          else
          {
            v37 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v35);
            *(_QWORD *)(a2 + v34) = v36;
            v20 |= (unint64_t)(v37 & 0x7F) << v32;
            if (v37 < 0)
            {
              v32 += 7;
              v15 = v33++ >= 9;
              if (v15)
              {
                LODWORD(v20) = 0;
                goto LABEL_73;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(a2 + *v5))
          LODWORD(v20) = 0;
LABEL_73:
        v55 = 32;
        goto LABEL_78;
      case 4u:
        v38 = 0;
        v39 = 0;
        v20 = 0;
        while (2)
        {
          v40 = *v3;
          v41 = *(_QWORD *)(a2 + v40);
          v42 = v41 + 1;
          if (v41 == -1 || v42 > *(_QWORD *)(a2 + *v4))
          {
            *(_BYTE *)(a2 + *v5) = 1;
          }
          else
          {
            v43 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v41);
            *(_QWORD *)(a2 + v40) = v42;
            v20 |= (unint64_t)(v43 & 0x7F) << v38;
            if (v43 < 0)
            {
              v38 += 7;
              v15 = v39++ >= 9;
              if (v15)
              {
                LODWORD(v20) = 0;
                goto LABEL_77;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(a2 + *v5))
          LODWORD(v20) = 0;
LABEL_77:
        v55 = 28;
LABEL_78:
        *(_DWORD *)(a1 + v55) = v20;
        goto LABEL_79;
      case 5u:
        v44 = objc_alloc_init(VCPProtoBounds);
        objc_storeStrong((id *)(a1 + 8), v44);
        if (PBReaderPlaceMark() && VCPProtoBoundsReadFrom((uint64_t)v44, a2))
        {
          PBReaderRecallMark();

LABEL_79:
          if (*(_QWORD *)(a2 + *v3) >= *(_QWORD *)(a2 + *v4))
            return *(_BYTE *)(a2 + *v5) == 0;
          continue;
        }

        return 0;
      case 6u:
        v45 = 0;
        v46 = 0;
        v47 = 0;
        while (2)
        {
          v48 = *v3;
          v49 = *(_QWORD *)(a2 + v48);
          v50 = v49 + 1;
          if (v49 == -1 || v50 > *(_QWORD *)(a2 + *v4))
          {
            *(_BYTE *)(a2 + *v5) = 1;
          }
          else
          {
            v51 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v49);
            *(_QWORD *)(a2 + v48) = v50;
            v47 |= (unint64_t)(v51 & 0x7F) << v45;
            if (v51 < 0)
            {
              v45 += 7;
              v15 = v46++ >= 9;
              if (v15)
              {
                v47 = 0;
                goto LABEL_84;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(a2 + *v5))
          v47 = 0;
LABEL_84:
        *(_BYTE *)(a1 + 36) = v47 != 0;
        goto LABEL_79;
      case 7u:
        *(_BYTE *)(a1 + 40) |= 1u;
        v52 = *v3;
        v53 = *(_QWORD *)(a2 + v52);
        if (v53 <= 0xFFFFFFFFFFFFFFFBLL && v53 + 4 <= *(_QWORD *)(a2 + *v4))
        {
          v54 = *(_DWORD *)(*(_QWORD *)(a2 + *v7) + v53);
          *(_QWORD *)(a2 + v52) = v53 + 4;
        }
        else
        {
          *(_BYTE *)(a2 + *v5) = 1;
          v54 = 0;
        }
        *(_DWORD *)(a1 + 20) = v54;
        goto LABEL_79;
      default:
        result = PBReaderSkipValueWithTag();
        if (!(_DWORD)result)
          return result;
        goto LABEL_79;
    }
  }
}

void sub_1B6CE5F20(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  _Unwind_Resume(a1);
}

void sub_1B6CE60BC(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1B6CE62F8(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1B6CE6404(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1B6CE66A4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9)
{

  _Unwind_Resume(a1);
}

void sub_1B6CE6800(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1B6CE6AA4(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

uint64_t __Block_byref_object_copy__8(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void __Block_byref_object_dispose__8(uint64_t a1)
{

}

uint64_t VCPProtoVideoKeyFrameReadFrom(uint64_t a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  char v14;
  uint64_t v16;
  int v17;
  VCPProtoTime *v19;
  uint64_t v20;
  unint64_t v21;
  int v22;
  uint64_t result;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) < *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
  {
    v7 = (int *)MEMORY[0x1E0D82BB8];
    do
    {
      if (*(_BYTE *)(a2 + *v5))
        break;
      v8 = 0;
      v9 = 0;
      v10 = 0;
      while (1)
      {
        v11 = *v3;
        v12 = *(_QWORD *)(a2 + v11);
        v13 = v12 + 1;
        if (v12 == -1 || v13 > *(_QWORD *)(a2 + *v4))
          break;
        v14 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
        *(_QWORD *)(a2 + v11) = v13;
        v10 |= (unint64_t)(v14 & 0x7F) << v8;
        if ((v14 & 0x80) == 0)
          goto LABEL_12;
        v8 += 7;
        if (v9++ >= 9)
        {
          v10 = 0;
          v16 = *v5;
          v17 = *(unsigned __int8 *)(a2 + v16);
          goto LABEL_14;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
      v16 = *v5;
      v17 = *(unsigned __int8 *)(a2 + v16);
      if (*(_BYTE *)(a2 + v16))
        v10 = 0;
LABEL_14:
      if (v17 || (v10 & 7) == 4)
        break;
      if ((v10 >> 3) == 2)
      {
        v20 = *v3;
        v21 = *(_QWORD *)(a2 + v20);
        if (v21 <= 0xFFFFFFFFFFFFFFFBLL && v21 + 4 <= *(_QWORD *)(a2 + *v4))
        {
          v22 = *(_DWORD *)(*(_QWORD *)(a2 + *v7) + v21);
          *(_QWORD *)(a2 + v20) = v21 + 4;
        }
        else
        {
          *(_BYTE *)(a2 + v16) = 1;
          v22 = 0;
        }
        *(_DWORD *)(a1 + 8) = v22;
      }
      else if ((v10 >> 3) == 1)
      {
        v19 = objc_alloc_init(VCPProtoTime);
        objc_storeStrong((id *)(a1 + 16), v19);
        if (!PBReaderPlaceMark() || (VCPProtoTimeReadFrom((uint64_t)v19, a2) & 1) == 0)
        {

          return 0;
        }
        PBReaderRecallMark();

      }
      else
      {
        result = PBReaderSkipValueWithTag();
        if (!(_DWORD)result)
          return result;
      }
    }
    while (*(_QWORD *)(a2 + *v3) < *(_QWORD *)(a2 + *v4));
  }
  return *(_BYTE *)(a2 + *v5) == 0;
}

void sub_1B6CE7970(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, void *a11, void *a12)
{
  void *v12;
  void *v13;
  void *v14;

  _Unwind_Resume(a1);
}

void sub_1B6CE7CC8(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void std::vector<espresso_buffer_t>::resize(uint64_t a1, unint64_t a2)
{
  unint64_t v2;
  BOOL v3;
  unint64_t v4;

  v2 = 0xCF3CF3CF3CF3CF3DLL * ((uint64_t)(*(_QWORD *)(a1 + 8) - *(_QWORD *)a1) >> 3);
  v3 = a2 >= v2;
  v4 = a2 - v2;
  if (v4 != 0 && v3)
  {
    std::vector<espresso_buffer_t>::__append((void **)a1, v4);
  }
  else if (!v3)
  {
    *(_QWORD *)(a1 + 8) = *(_QWORD *)a1 + 168 * a2;
  }
}

void sub_1B6CE7F34(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_1B6CE80BC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void sub_1B6CE8204(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, objc_super a9)
{
  void *v9;
  void *v10;

  v10 = v9;
  a9.receiver = v10;
  a9.super_class = (Class)VCPCNNModelEspresso;
  -[_Unwind_Exception dealloc](&a9, sel_dealloc);
  _Unwind_Resume(a1);
}

char *std::vector<espresso_buffer_t>::__assign_with_size[abi:ne180100]<espresso_buffer_t*,espresso_buffer_t*>(char *result, char *__src, uint64_t a3, unint64_t a4)
{
  _QWORD *v7;
  uint64_t v8;
  char *v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  void **v13;
  char *v14;
  _BYTE *v15;
  char *v16;
  size_t v17;
  void *v18;
  char *v19;

  v7 = result;
  v8 = *((_QWORD *)result + 2);
  v9 = *(char **)result;
  if (0xCF3CF3CF3CF3CF3DLL * ((v8 - *(_QWORD *)result) >> 3) < a4)
  {
    if (v9)
    {
      *((_QWORD *)result + 1) = v9;
      operator delete(v9);
      v8 = 0;
      *v7 = 0;
      v7[1] = 0;
      v7[2] = 0;
    }
    if (a4 > 0x186186186186186)
      std::vector<std::unique_ptr<VCPProtoKeypoint>>::__throw_length_error[abi:ne180100]();
    v10 = 0xCF3CF3CF3CF3CF3DLL * (v8 >> 3);
    v11 = 2 * v10;
    if (2 * v10 <= a4)
      v11 = a4;
    if (v10 >= 0xC30C30C30C30C3)
      v12 = 0x186186186186186;
    else
      v12 = v11;
    result = std::vector<espresso_buffer_t>::__vallocate[abi:ne180100](v7, v12);
    v14 = (char *)v7[1];
    v13 = (void **)(v7 + 1);
    v9 = v14;
LABEL_16:
    v17 = a3 - (_QWORD)__src;
    if (v17)
    {
      v18 = v9;
      v19 = __src;
      goto LABEL_18;
    }
    goto LABEL_19;
  }
  v13 = (void **)(result + 8);
  v15 = (_BYTE *)*((_QWORD *)result + 1);
  if (0xCF3CF3CF3CF3CF3DLL * ((v15 - v9) >> 3) >= a4)
    goto LABEL_16;
  v16 = &__src[8 * ((v15 - v9) >> 3)];
  if (v15 != v9)
  {
    result = (char *)memmove(*(void **)result, __src, v15 - v9);
    v9 = (char *)*v13;
  }
  v17 = a3 - (_QWORD)v16;
  if (v17)
  {
    v18 = v9;
    v19 = v16;
LABEL_18:
    result = (char *)memmove(v18, v19, v17);
  }
LABEL_19:
  *v13 = &v9[v17];
  return result;
}

void std::vector<espresso_buffer_t>::__append(void **a1, unint64_t a2)
{
  uint64_t v4;
  _BYTE *v5;
  _BYTE *v6;
  char *v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  char *v12;
  size_t v13;
  char *v14;
  char *v15;
  size_t v16;
  char *v17;
  char *v18;
  char *v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;

  v6 = a1[2];
  v4 = (uint64_t)(a1 + 2);
  v5 = v6;
  v7 = *(char **)(v4 - 8);
  if (0xCF3CF3CF3CF3CF3DLL * ((v6 - v7) >> 3) >= a2)
  {
    if (a2)
    {
      v13 = 168 * ((168 * a2 - 168) / 0xA8) + 168;
      bzero(*(void **)(v4 - 8), v13);
      v7 += v13;
    }
    a1[1] = v7;
  }
  else
  {
    v8 = 0xCF3CF3CF3CF3CF3DLL * ((v7 - (_BYTE *)*a1) >> 3);
    v9 = v8 + a2;
    if (v8 + a2 > 0x186186186186186)
      std::vector<std::unique_ptr<VCPProtoKeypoint>>::__throw_length_error[abi:ne180100]();
    v10 = 0xCF3CF3CF3CF3CF3DLL * ((v5 - (_BYTE *)*a1) >> 3);
    if (2 * v10 > v9)
      v9 = 2 * v10;
    if (v10 >= 0xC30C30C30C30C3)
      v11 = 0x186186186186186;
    else
      v11 = v9;
    if (v11)
      v12 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<espresso_buffer_t>>(v4, v11);
    else
      v12 = 0;
    v14 = &v12[168 * v8];
    v15 = &v12[168 * v11];
    v16 = 168 * ((168 * a2 - 168) / 0xA8) + 168;
    bzero(v14, v16);
    v17 = &v14[v16];
    v19 = (char *)*a1;
    v18 = (char *)a1[1];
    if (v18 != *a1)
    {
      do
      {
        v20 = *(_OWORD *)(v18 - 168);
        v21 = *(_OWORD *)(v18 - 152);
        *(_OWORD *)(v14 - 136) = *(_OWORD *)(v18 - 136);
        *(_OWORD *)(v14 - 152) = v21;
        *(_OWORD *)(v14 - 168) = v20;
        v22 = *(_OWORD *)(v18 - 120);
        v23 = *(_OWORD *)(v18 - 104);
        v24 = *(_OWORD *)(v18 - 88);
        *(_OWORD *)(v14 - 72) = *(_OWORD *)(v18 - 72);
        *(_OWORD *)(v14 - 88) = v24;
        *(_OWORD *)(v14 - 104) = v23;
        *(_OWORD *)(v14 - 120) = v22;
        v25 = *(_OWORD *)(v18 - 56);
        v26 = *(_OWORD *)(v18 - 40);
        v27 = *(_OWORD *)(v18 - 24);
        *((_QWORD *)v14 - 1) = *((_QWORD *)v18 - 1);
        *(_OWORD *)(v14 - 24) = v27;
        *(_OWORD *)(v14 - 40) = v26;
        *(_OWORD *)(v14 - 56) = v25;
        v14 -= 168;
        v18 -= 168;
      }
      while (v18 != v19);
      v18 = (char *)*a1;
    }
    *a1 = v14;
    a1[1] = v17;
    a1[2] = v15;
    if (v18)
      operator delete(v18);
  }
}

_QWORD *std::vector<float *>::__init_with_size[abi:ne180100]<float **,float **>(_QWORD *result, const void *a2, uint64_t a3, unint64_t a4)
{
  _QWORD *v6;
  uint64_t v7;
  size_t v8;

  if (a4)
  {
    v6 = result;
    result = std::vector<void *>::__vallocate[abi:ne180100](result, a4);
    v7 = v6[1];
    v8 = a3 - (_QWORD)a2;
    if (v8)
      result = memmove((void *)v6[1], a2, v8);
    v6[1] = v7 + v8;
  }
  return result;
}

void sub_1B6CE8848(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void sub_1B6CE88B4(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1B6CE896C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1B6CE8A50(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1B6CE8AB0(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1B6CE8D24(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  _Unwind_Resume(a1);
}

ma::Segment *ma::SlowMotionSegment::SlowMotionSegment(ma::SlowMotionSegment *this)
{
  ma::Segment *result;

  result = ma::Segment::Segment(this);
  *(_QWORD *)result = &unk_1E6B14008;
  *((_QWORD *)result + 9) = 0;
  return result;
}

uint64_t ma::SlowMotionSegment::UpdateStats(uint64_t this, float a2)
{
  float v2;
  int v3;
  int v4;
  float v5;
  BOOL v6;
  float v7;

  v2 = 1.0;
  v3 = *(_DWORD *)(this + 76);
  if (a2 > 1.0)
    ++v3;
  *(_DWORD *)(this + 76) = v3;
  v4 = *(_DWORD *)(this + 20) + 1;
  *(_DWORD *)(this + 20) = v4;
  v5 = (float)v3 / (float)v4;
  if (v5 < 1.0)
    v2 = (float)v3 / (float)v4;
  v6 = v5 > 0.0;
  v7 = 0.0;
  if (v6)
    v7 = v2;
  *(float *)(this + 72) = v7;
  return this;
}

void ma::SlowMotionSegment::Merge(ma::SlowMotionSegment *this, const ma::SlowMotionSegment *a2)
{
  int v4;
  int v5;
  float v6;
  float v7;
  BOOL v8;
  float v9;

  ma::Segment::Merge(this, a2);
  v4 = *((_DWORD *)this + 19) + *((_DWORD *)a2 + 19);
  *((_DWORD *)this + 19) = v4;
  v5 = *((_DWORD *)this + 5);
  if (v5)
  {
    v6 = (float)v4 / (float)v5;
    v7 = 1.0;
    if (v6 < 1.0)
      v7 = (float)v4 / (float)v5;
    v8 = v6 > 0.0;
    v9 = 0.0;
    if (v8)
      v9 = v7;
  }
  else
  {
    v9 = 0.0;
  }
  *((float *)this + 18) = v9;
}

BOOL ma::SlowMotionSegment::IsShort(ma::SlowMotionSegment *this)
{
  CMTime v2;

  v2 = *(CMTime *)((_BYTE *)this + 2);
  return CMTimeGetSeconds(&v2) <= 1.0;
}

BOOL ma::SlowMotionSegment::IsFlicker(ma::SlowMotionSegment *this)
{
  return *((float *)this + 18) >= 0.5;
}

void ma::SlowMotionSegment::~SlowMotionSegment(ma::SlowMotionSegment *this)
{
  JUMPOUT(0x1BCCA12BCLL);
}

void sub_1B6CEA5E0(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;

  _Unwind_Resume(a1);
}

void sub_1B6CEA8E0(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  _Unwind_Resume(a1);
}

void sub_1B6CEAD94(_Unwind_Exception *exception_object, int a2)
{
  uint64_t v2;

  if (a2)
  {
    __cxa_begin_catch(exception_object);
    if ((int)MediaAnalysisLogLevel() >= 3 && os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)(v2 + 32) = 0;
      _os_log_impl(&dword_1B6C4A000, MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR, "findSummarizedEmbeddings : caught dlib failures", (uint8_t *)(v2 + 32), 2u);
    }
    __cxa_end_catch();
    JUMPOUT(0x1B6CEAD20);
  }
  _Unwind_Resume(exception_object);
}

uint64_t partitionEmbeddingsBySpectralClustering@<X0>(uint64_t *a1@<X0>, std::vector<int> *a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  float v10;
  uint64_t v11;
  unint64_t v12;
  float v13;
  unint64_t v14;
  char *v15;
  uint64_t i;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  unint64_t v22;
  char *v23;
  char *v24;
  char *v25;
  int v26;
  _BYTE *v27;
  int *begin;
  int *end;
  int v30;
  std::vector<int>::pointer v31;
  int *v32;
  uint64_t v33;
  uint64_t v34;
  float v35;
  float *v36;
  float *v37;
  unint64_t v38;
  float *v39;
  uint64_t v40;
  uint64_t v41;
  _BYTE *v42;
  int v43;
  float *v44;
  float v45;
  int v46;
  char *v47;
  uint64_t v48;
  uint64_t v49;
  float *v50;
  float *v51;
  float *v52;
  float v53;
  float *v54;
  float v55;
  float *v56;
  BOOL v57;
  float *v58;
  float v59;
  float *v60;
  float v61;
  float v62;
  uint64_t j;
  std::vector<int>::pointer v64;
  uint64_t v65;
  uint64_t v66;
  _DWORD *v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t *v70;
  uint64_t *v71;
  unsigned int v72;
  uint64_t k;
  std::vector<int>::pointer v74;
  std::vector<int>::pointer v75;
  int v76;
  std::vector<int>::pointer v77;
  unint64_t v78;
  uint64_t *v79;
  uint64_t v80;
  int **v81;
  uint64_t result;
  std::vector<int> v83;
  void *p_p;
  float **v85;
  uint64_t v86;
  std::random_device v87;
  int **v88;
  int **v89;
  unint64_t v90;
  uint64_t *v91;
  uint64_t *v92;
  unint64_t v93;
  std::vector<int> v94;
  void *__p;
  char *v96;
  char *v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  float *v103[2];
  int *v104;
  uint64_t v105;
  uint64_t v106[4];
  uint64_t v107;
  uint64_t v108;
  float *v109[4];
  _QWORD v110[4];
  _QWORD v111[4];
  uint64_t v112[5];

  v4 = 0xAAAAAAAAAAAAAAABLL * ((a1[1] - *a1) >> 3);
  dlib::matrix<float,0l,0l,dlib::memory_manager_stateless_kernel_1<char>,dlib::row_major_layout>::matrix(v112, v4, v4);
  v5 = *a1;
  v6 = a1[1];
  if (v6 != *a1)
  {
    v7 = 0;
    do
    {
      if (v6 == v5)
        break;
      v8 = 0;
      v9 = 0;
      do
      {
        dlib::matrix<float,0l,0l,dlib::memory_manager_stateless_kernel_1<char>,dlib::row_major_layout>::matrix<dlib::matrix<float,1l,0l,dlib::memory_manager_stateless_kernel_1<char>,dlib::row_major_layout>>((uint64_t *)&p_p, (int **)(v5 + 24 * v7));
        dlib::matrix<float,0l,0l,dlib::memory_manager_stateless_kernel_1<char>,dlib::row_major_layout>::matrix<dlib::matrix<float,1l,0l,dlib::memory_manager_stateless_kernel_1<char>,dlib::row_major_layout>>((uint64_t *)v103, (int **)(*a1 + v8));
        v10 = cosSimilarity((uint64_t *)&p_p, (uint64_t *)v103);
        v11 = v112[0];
        v12 = v9 + v7 * v112[2];
        v13 = exp((float)(v10 + -1.0) * (float)(v10 + -1.0) / -0.000799999964);
        *(float *)(v11 + 4 * v12) = v13;
        if (v103[0])
          MEMORY[0x1BCCA128C](v103[0], 0x1000C8052888210);
        if (p_p)
          MEMORY[0x1BCCA128C](p_p, 0x1000C8052888210);
        ++v9;
        v5 = *a1;
        v6 = a1[1];
        v14 = 0xAAAAAAAAAAAAAAABLL * ((v6 - *a1) >> 3);
        v8 += 24;
      }
      while (v14 > v9);
      ++v7;
    }
    while (v14 > v7);
  }
  memset(v111, 0, 24);
  v111[3] = &unk_1E6B131D0;
  v103[0] = (float *)v112;
  p_p = v103;
  dlib::matrix<float,0l,0l,dlib::memory_manager_stateless_kernel_1<char>,dlib::row_major_layout>::operator=<dlib::matrix_diag_op<dlib::op_diagm<dlib::matrix_op<dlib::op_sumr<dlib::matrix<float,0l,0l,dlib::memory_manager_stateless_kernel_1<char>,dlib::row_major_layout>>>>>>((uint64_t)v111, (float ****)&p_p);
  memset(v110, 0, 24);
  v110[3] = &unk_1E6B131D0;
  v109[0] = (float *)v112;
  p_p = v109;
  LODWORD(v85) = 1065353216;
  v103[0] = (float *)&p_p;
  dlib::matrix<float,0l,0l,dlib::memory_manager_stateless_kernel_1<char>,dlib::row_major_layout>::operator=<dlib::matrix_diag_op<dlib::op_diagm<dlib::matrix_op<dlib::op_s_div_m<dlib::matrix_op<dlib::op_sumr<dlib::matrix<float,0l,0l,dlib::memory_manager_stateless_kernel_1<char>,dlib::row_major_layout>>>>>>>>((uint64_t)v110, v103);
  memset(v109, 0, 24);
  v109[3] = (float *)&unk_1E6B131D0;
  v103[0] = (float *)v111;
  v103[1] = (float *)v112;
  p_p = v110;
  v85 = v103;
  dlib::matrix<float,0l,0l,dlib::memory_manager_stateless_kernel_1<char>,dlib::row_major_layout>::operator=<dlib::matrix_multiply_exp<dlib::matrix<float,0l,0l,dlib::memory_manager_stateless_kernel_1<char>,dlib::row_major_layout>,dlib::matrix_subtract_exp<dlib::matrix<float,0l,0l,dlib::memory_manager_stateless_kernel_1<char>,dlib::row_major_layout>,dlib::matrix<float,0l,0l,dlib::memory_manager_stateless_kernel_1<char>,dlib::row_major_layout>>>>((uint64_t *)v109, (uint64_t **)&p_p);
  dlib::eigenvalue_decomposition<dlib::matrix<float,0l,0l,dlib::memory_manager_stateless_kernel_1<char>,dlib::row_major_layout>>::eigenvalue_decomposition<dlib::matrix<float,0l,0l,dlib::memory_manager_stateless_kernel_1<char>,dlib::row_major_layout>>((uint64_t)v103, v109);
  dlib::matrix<float,0l,1l,dlib::memory_manager_stateless_kernel_1<char>,dlib::row_major_layout>::matrix(&v101, &v104);
  dlib::matrix<float,0l,0l,dlib::memory_manager_stateless_kernel_1<char>,dlib::row_major_layout>::matrix(&v98, v106);
  v96 = 0;
  __p = 0;
  v97 = 0;
  if (v102 < 1)
  {
    v27 = 0;
    v15 = 0;
  }
  else
  {
    v15 = 0;
    for (i = 0; i < v102; ++i)
    {
      v17 = v101;
      if (v15 >= v97)
      {
        v18 = (char *)__p;
        v19 = (v15 - (_BYTE *)__p) >> 2;
        v20 = v19 + 1;
        if ((unint64_t)(v19 + 1) >> 62)
          std::vector<std::unique_ptr<VCPProtoKeypoint>>::__throw_length_error[abi:ne180100]();
        v21 = v97 - (_BYTE *)__p;
        if ((v97 - (_BYTE *)__p) >> 1 > v20)
          v20 = v21 >> 1;
        if ((unint64_t)v21 >= 0x7FFFFFFFFFFFFFFCLL)
          v22 = 0x3FFFFFFFFFFFFFFFLL;
        else
          v22 = v20;
        if (v22)
        {
          v23 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<float>>((uint64_t)&v97, v22);
          v15 = v96;
          v18 = (char *)__p;
        }
        else
        {
          v23 = 0;
        }
        v24 = &v23[4 * v19];
        *(_DWORD *)v24 = *(_DWORD *)(v17 + 4 * i);
        v25 = v24 + 4;
        while (v15 != v18)
        {
          v26 = *((_DWORD *)v15 - 1);
          v15 -= 4;
          *((_DWORD *)v24 - 1) = v26;
          v24 -= 4;
        }
        __p = v24;
        v96 = v25;
        v97 = &v23[4 * v22];
        if (v18)
          operator delete(v18);
        v15 = v25;
      }
      else
      {
        *(_DWORD *)v15 = *(_DWORD *)(v101 + 4 * i);
        v15 += 4;
      }
      v96 = v15;
    }
    v27 = __p;
  }
  std::vector<int>::vector(&v94, (v15 - v27) >> 2);
  begin = v94.__begin_;
  end = v94.__end_;
  if (v94.__begin_ != v94.__end_)
  {
    v30 = 0;
    v31 = v94.__begin_;
    do
      *v31++ = v30++;
    while (v31 != end);
  }
  p_p = &__p;
  if ((char *)end - (char *)begin < 513)
  {
    v32 = 0;
    v34 = 0;
  }
  else
  {
    v32 = (int *)std::get_temporary_buffer[abi:ne180100]<int>(end - begin);
    v34 = v33;
  }
  std::__stable_sort<std::_ClassicAlgPolicy,partitionEmbeddingsBySpectralClustering(std::vector<dlib::matrix<float,1l,0l,dlib::memory_manager_stateless_kernel_1<char>,dlib::row_major_layout>> const&)::$_0 &,std::__wrap_iter<int *>>(begin, end, (uint64_t **)&p_p, end - begin, v32, v34);
  if (v32)
    operator delete(v32);
  v36 = (float *)__p;
  v37 = (float *)v96;
  v38 = (v96 - (_BYTE *)__p) >> 2;
  if (v96 - (_BYTE *)__p < 513)
  {
    v39 = 0;
    v41 = 0;
  }
  else
  {
    v39 = (float *)std::get_temporary_buffer[abi:ne180100]<int>((v96 - (_BYTE *)__p) >> 2);
    v41 = v40;
  }
  std::__stable_sort<std::_ClassicAlgPolicy,std::__less<void,void> &,std::__wrap_iter<float *>>(v36, v37, (uint64_t)&p_p, v38, v39, v41, v35);
  if (v39)
    operator delete(v39);
  v42 = __p;
  if (__p == v96)
  {
    v43 = 0;
  }
  else
  {
    v43 = 0;
    v44 = (float *)__p;
    do
    {
      v45 = *v44++;
      if (v45 < 0.001)
        ++v43;
    }
    while (v44 != (float *)v96);
  }
  if (v43 <= 1)
    v46 = 1;
  else
    v46 = v43;
  v47 = (char *)__p + 4 * v46;
  v48 = v96 - v47;
  if (v96 != v47)
    memmove(__p, v47, v96 - v47);
  v96 = &v42[v48];
  v49 = &v42[v48] - (_BYTE *)__p;
  if (v49)
  {
    std::vector<float>::vector(&p_p, v49 >> 2);
    v50 = (float *)v96;
    v51 = (float *)p_p;
    if (__p != v96)
    {
      v52 = (float *)((char *)__p + 4);
      v53 = *(float *)__p;
      *(_DWORD *)p_p = *(_DWORD *)__p;
      if (v52 != v50)
      {
        v54 = v51 + 1;
        do
        {
          v55 = *v52++;
          *v54++ = v55 - v53;
          v53 = v55;
        }
        while (v52 != v50);
      }
    }
    v56 = v51 + 1;
    v57 = v51 == (float *)v85 || v56 == (float *)v85;
    v58 = v51;
    if (!v57)
    {
      v59 = *v51;
      v58 = v51;
      v60 = v51 + 1;
      do
      {
        v61 = *v60++;
        v62 = v61;
        if (v59 < v61)
        {
          v59 = v62;
          v58 = v56;
        }
        v56 = v60;
      }
      while (v60 != (float *)v85);
    }
    if ((int)(v46 + ((unint64_t)((char *)v58 - (char *)v51) >> 2)) >= 150)
      v46 = 150;
    else
      v46 += (unint64_t)((char *)v58 - (char *)v51) >> 2;
    if (v51)
    {
      v85 = (float **)v51;
      operator delete(v51);
    }
  }
  v92 = 0;
  v91 = 0;
  v93 = 0;
  if (v99 >= 1)
  {
    for (j = 0; j < v99; ++j)
    {
      dlib::matrix<float,1l,0l,dlib::memory_manager_stateless_kernel_1<char>,dlib::row_major_layout>::matrix((uint64_t *)&p_p, v46);
      if (v46 >= 1)
      {
        v64 = v94.__begin_;
        v65 = v98;
        v66 = v100 * j;
        v67 = p_p;
        v68 = v46;
        do
        {
          v69 = *v64++;
          *v67++ = *(_DWORD *)(v65 + 4 * (v66 + v69));
          --v68;
        }
        while (v68);
      }
      v70 = v92;
      if ((unint64_t)v92 >= v93)
      {
        v71 = (uint64_t *)std::vector<dlib::matrix<float,1l,0l,dlib::memory_manager_stateless_kernel_1<char>,dlib::row_major_layout>>::__push_back_slow_path<dlib::matrix<float,1l,0l,dlib::memory_manager_stateless_kernel_1<char>,dlib::row_major_layout> const&>((uint64_t *)&v91, (int **)&p_p);
      }
      else
      {
        dlib::matrix<float,1l,0l,dlib::memory_manager_stateless_kernel_1<char>,dlib::row_major_layout>::matrix(v92, (int **)&p_p);
        v71 = v70 + 3;
      }
      v92 = v71;
      if (p_p)
        MEMORY[0x1BCCA128C](p_p, 0x1000C8052888210);
    }
  }
  v89 = 0;
  v88 = 0;
  v90 = 0;
  std::random_device::random_device[abi:ne180100](&v87);
  v72 = MEMORY[0x1BCCA119C](&v87);
  LODWORD(p_p) = v72;
  for (k = 1; k != 624; ++k)
  {
    v72 = k + 1812433253 * (v72 ^ (v72 >> 30));
    *((_DWORD *)&p_p + k) = v72;
  }
  v86 = 0;
  std::vector<int>::vector(&v83, 0xAAAAAAAAAAAAAAABLL * (v92 - v91));
  v74 = v83.__begin_;
  v75 = v83.__end_;
  if (v83.__begin_ != v83.__end_)
  {
    v76 = 0;
    v77 = v83.__begin_;
    do
      *v77++ = v76++;
    while (v77 != v75);
  }
  std::__shuffle[abi:ne180100]<std::_ClassicAlgPolicy,std::__wrap_iter<int *>,std::__wrap_iter<int *>,std::mersenne_twister_engine<unsigned int,32ul,624ul,397ul,31ul,2567483615u,11ul,4294967295u,7ul,2636928640u,15ul,4022730752u,18ul,1812433253u> &>((unint64_t)v74, (uint64_t)v75, (uint64_t)&p_p);
  if (v46 >= 1)
  {
    v78 = 0;
    v79 = (uint64_t *)v89;
    v80 = 4 * v46;
    do
    {
      v81 = (int **)&v91[3 * v83.__begin_[v78 / 4]];
      if ((unint64_t)v79 >= v90)
      {
        v79 = (uint64_t *)std::vector<dlib::matrix<float,1l,0l,dlib::memory_manager_stateless_kernel_1<char>,dlib::row_major_layout>>::__push_back_slow_path<dlib::matrix<float,1l,0l,dlib::memory_manager_stateless_kernel_1<char>,dlib::row_major_layout> const&>((uint64_t *)&v88, v81);
      }
      else
      {
        dlib::matrix<float,1l,0l,dlib::memory_manager_stateless_kernel_1<char>,dlib::row_major_layout>::matrix(v79, v81);
        v79 += 3;
      }
      v78 += 4;
      v89 = (int **)v79;
    }
    while (v80 != v78);
  }
  if (v91 == v92 || v88 == v89)
  {
    a2->__begin_ = 0;
    a2->__end_ = 0;
    a2->__end_cap_.__value_ = 0;
  }
  else
  {
    dlib::find_clusters_using_kmeans<std::vector<dlib::matrix<float,1l,0l,dlib::memory_manager_stateless_kernel_1<char>,dlib::row_major_layout>>,dlib::matrix<float,1l,0l,dlib::memory_manager_stateless_kernel_1<char>,dlib::row_major_layout>,std::allocator<dlib::matrix<float,1l,0l,dlib::memory_manager_stateless_kernel_1<char>,dlib::row_major_layout>>>((uint64_t *)&v91, &v88, 0x3E8uLL);
    getClusteringLabels((uint64_t *)&v91, (uint64_t *)&v88, a2);
  }
  if (v83.__begin_)
  {
    v83.__end_ = v83.__begin_;
    operator delete(v83.__begin_);
  }
  std::random_device::~random_device(&v87);
  p_p = &v88;
  std::vector<dlib::matrix<float,1l,0l,dlib::memory_manager_stateless_kernel_1<char>,dlib::row_major_layout>>::__destroy_vector::operator()[abi:ne180100]((void ***)&p_p);
  p_p = &v91;
  std::vector<dlib::matrix<float,1l,0l,dlib::memory_manager_stateless_kernel_1<char>,dlib::row_major_layout>>::__destroy_vector::operator()[abi:ne180100]((void ***)&p_p);
  if (v94.__begin_)
  {
    v94.__end_ = v94.__begin_;
    operator delete(v94.__begin_);
  }
  if (__p)
  {
    v96 = (char *)__p;
    operator delete(__p);
  }
  if (v98)
    MEMORY[0x1BCCA128C](v98, 0x1000C8052888210);
  if (v101)
    MEMORY[0x1BCCA128C](v101, 0x1000C8052888210);
  if (v108)
    MEMORY[0x1BCCA128C](v108, 0x1000C8052888210);
  if (v107)
    MEMORY[0x1BCCA128C](v107, 0x1000C8052888210);
  if (v106[0])
    MEMORY[0x1BCCA128C](v106[0], 0x1000C8052888210);
  if (v105)
    MEMORY[0x1BCCA128C](v105, 0x1000C8052888210);
  if (v104)
    MEMORY[0x1BCCA128C](v104, 0x1000C8052888210);
  if (v109[0])
    MEMORY[0x1BCCA128C](v109[0], 0x1000C8052888210);
  if (v110[0])
    MEMORY[0x1BCCA128C](v110[0], 0x1000C8052888210);
  if (v111[0])
    MEMORY[0x1BCCA128C](v111[0], 0x1000C8052888210);
  result = v112[0];
  if (v112[0])
    return MEMORY[0x1BCCA128C](v112[0], 0x1000C8052888210);
  return result;
}

void sub_1B6CEB7FC(_Unwind_Exception *a1)
{
  uint64_t v1;
  void *v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v3 = (void *)STACK[0xA20];
  if (STACK[0xA20])
  {
    STACK[0xA28] = (unint64_t)v3;
    operator delete(v3);
  }
  v4 = (void *)STACK[0xA38];
  if (STACK[0xA38])
  {
    STACK[0xA40] = (unint64_t)v4;
    operator delete(v4);
  }
  if (STACK[0xA50])
    MEMORY[0x1BCCA128C](STACK[0xA50], 0x1000C8052888210);
  if (STACK[0xA70])
    MEMORY[0x1BCCA128C](STACK[0xA70], 0x1000C8052888210);
  dlib::eigenvalue_decomposition<dlib::matrix<float,0l,0l,dlib::memory_manager_stateless_kernel_1<char>,dlib::row_major_layout>>::~eigenvalue_decomposition(&STACK[0xA88]);
  v5 = *(_QWORD *)(v1 - 232);
  if (v5)
    MEMORY[0x1BCCA128C](v5, 0x1000C8052888210);
  v6 = *(_QWORD *)(v1 - 200);
  if (v6)
    MEMORY[0x1BCCA128C](v6, 0x1000C8052888210);
  v7 = *(_QWORD *)(v1 - 168);
  if (v7)
    MEMORY[0x1BCCA128C](v7, 0x1000C8052888210);
  v8 = *(_QWORD *)(v1 - 136);
  if (v8)
    MEMORY[0x1BCCA128C](v8, 0x1000C8052888210);
  _Unwind_Resume(a1);
}

uint64_t getClusterCentroids@<X0>(_QWORD *a1@<X0>, int **a2@<X1>, uint64_t *a3@<X8>)
{
  int *v6;
  int *v7;
  uint64_t v8;
  int v9;
  unint64_t v10;
  int v11;
  int v12;
  int v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  int v20;
  uint64_t result;
  uint64_t *v22;
  float v23;
  uint64_t v24[2];
  int v25;
  uint64_t v26[3];

  v6 = *a2;
  v7 = a2[1];
  v8 = (char *)v7 - (char *)*a2;
  if (v7 == *a2)
  {
    v13 = 1;
  }
  else
  {
    v9 = 0;
    v10 = v8 >> 2;
    if (v10 <= 1)
      v10 = 1;
    do
    {
      v12 = *v6++;
      v11 = v12;
      if (v9 <= v12)
        v9 = v11;
      --v10;
    }
    while (v10);
    v13 = v9 + 1;
  }
  v14 = 0;
  *a3 = 0;
  a3[1] = 0;
  a3[2] = 0;
  do
  {
    v15 = *(_QWORD *)(*a1 + 8);
    v24[0] = 1;
    v24[1] = v15;
    v25 = 0;
    dlib::matrix<float,1l,0l,dlib::memory_manager_stateless_kernel_1<char>,dlib::row_major_layout>::matrix<dlib::matrix_op<dlib::op_uniform_matrix_3<float>>>(v26, v24);
    v17 = *a1;
    v16 = a1[1];
    if (v16 == *a1)
    {
      v20 = 0;
    }
    else
    {
      v18 = 0;
      v19 = 0;
      v20 = 0;
      do
      {
        if ((*a2)[v19] == v14)
        {
          dlib::matrix<float,1l,0l,dlib::memory_manager_stateless_kernel_1<char>,dlib::row_major_layout>::operator+=(v26, v17 + v18);
          ++v20;
          v17 = *a1;
          v16 = a1[1];
        }
        ++v19;
        v18 += 24;
      }
      while (0xAAAAAAAAAAAAAAABLL * ((v16 - v17) >> 3) > v19);
    }
    v22 = v26;
    v23 = 1.0 / (float)v20;
    dlib::matrix<float,1l,0l,dlib::memory_manager_stateless_kernel_1<char>,dlib::row_major_layout>::matrix<dlib::matrix_mul_scal_exp<dlib::matrix<float,1l,0l,dlib::memory_manager_stateless_kernel_1<char>,dlib::row_major_layout>,true>>(v24, (uint64_t)&v22);
    std::vector<dlib::matrix<float,1l,0l,dlib::memory_manager_stateless_kernel_1<char>,dlib::row_major_layout>>::push_back[abi:ne180100](a3, v24);
    if (v24[0])
      MEMORY[0x1BCCA128C](v24[0], 0x1000C8052888210);
    result = v26[0];
    if (v26[0])
      result = MEMORY[0x1BCCA128C](v26[0], 0x1000C8052888210);
    ++v14;
  }
  while (v14 != v13);
  return result;
}

void sub_1B6CEBBA8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void **a14)
{
  if (a14)
    MEMORY[0x1BCCA128C](a14, 0x1000C8052888210);
  std::vector<dlib::matrix<float,1l,0l,dlib::memory_manager_stateless_kernel_1<char>,dlib::row_major_layout>>::__destroy_vector::operator()[abi:ne180100](&a14);
  _Unwind_Resume(a1);
}

void partitionEmbeddingsByKmeansWithSilhouetteScore(uint64_t *a1@<X0>, void **a2@<X1>, uint64_t a3@<X8>)
{
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  int v11;
  int v12;
  uint64_t v13;
  int v14;
  float v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  int **v21;
  float v22;
  _QWORD v25[3];
  std::vector<int> v26;
  void *__p;
  int **v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  _QWORD v32[2];
  uint64_t **v33;
  uint64_t *v34[2];
  float v35[3];

  v4 = 0xAAAAAAAAAAAAAAABLL * ((a1[1] - *a1) >> 3);
  std::vector<float>::vector(&__p, v4);
  std::vector<std::vector<float>>::vector(&v30, v4, (uint64_t)&__p);
  if (__p)
  {
    v28 = (int **)__p;
    operator delete(__p);
  }
  v5 = *a1;
  v6 = a1[1];
  if (v6 == *a1)
  {
    v10 = 0xAAAAAAAAAAAAAAABLL * ((v6 - *a1) >> 3);
  }
  else
  {
    v7 = 0;
    while (v6 != v5)
    {
      v8 = 0;
      v9 = 0;
      do
      {
        dlib::matrix<float,0l,0l,dlib::memory_manager_stateless_kernel_1<char>,dlib::row_major_layout>::matrix<dlib::matrix<float,1l,0l,dlib::memory_manager_stateless_kernel_1<char>,dlib::row_major_layout>>((uint64_t *)&__p, (int **)(v5 + 24 * v7));
        dlib::matrix<float,0l,0l,dlib::memory_manager_stateless_kernel_1<char>,dlib::row_major_layout>::matrix<dlib::matrix<float,1l,0l,dlib::memory_manager_stateless_kernel_1<char>,dlib::row_major_layout>>((uint64_t *)&v26, (int **)(*a1 + v8));
        v34[0] = (uint64_t *)&__p;
        v34[1] = (uint64_t *)&v26;
        v32[0] = &__p;
        v32[1] = &v26;
        v33 = (uint64_t **)v32;
        v35[0] = 0.0;
        dlib::default_matrix_multiply<dlib::matrix<float,1l,1l,dlib::memory_manager_stateless_kernel_1<char>,dlib::row_major_layout>,dlib::matrix_subtract_exp<dlib::matrix<float,0l,0l,dlib::memory_manager_stateless_kernel_1<char>,dlib::row_major_layout>,dlib::matrix<float,0l,0l,dlib::memory_manager_stateless_kernel_1<char>,dlib::row_major_layout>>,dlib::matrix_op<dlib::op_trans<dlib::matrix_subtract_exp<dlib::matrix<float,0l,0l,dlib::memory_manager_stateless_kernel_1<char>,dlib::row_major_layout>,dlib::matrix<float,0l,0l,dlib::memory_manager_stateless_kernel_1<char>,dlib::row_major_layout>>>>>(v35, v34, &v33);
        *(float *)(*(_QWORD *)(v30 + 24 * v7) + 4 * v9) = sqrtf(v35[0]);
        if (v26.__begin_)
          MEMORY[0x1BCCA128C](v26.__begin_, 0x1000C8052888210);
        if (__p)
          MEMORY[0x1BCCA128C](__p, 0x1000C8052888210);
        ++v9;
        v5 = *a1;
        v6 = a1[1];
        v10 = 0xAAAAAAAAAAAAAAABLL * ((v6 - *a1) >> 3);
        v8 += 24;
      }
      while (v10 > v9);
      if (v10 <= ++v7)
        goto LABEL_16;
    }
    LODWORD(v10) = 0;
  }
LABEL_16:
  *(_QWORD *)a3 = 0;
  *(_QWORD *)(a3 + 8) = 0;
  *(_QWORD *)(a3 + 16) = 0;
  if ((int)v10 >= 150)
    v11 = 150;
  else
    v11 = v10;
  if ((int)v10 >= 3)
    v12 = 3;
  else
    v12 = v10;
  if (v12 <= v11)
  {
    if ((int)v10 >= 3)
      v13 = 3;
    else
      v13 = (int)v10;
    v14 = v11 + v13 - v12 + 1;
    v15 = -INFINITY;
    do
    {
      __p = 0;
      v28 = 0;
      v29 = 0;
      if (v13 >= 1)
      {
        v16 = 0;
        v17 = 0;
        v18 = v13;
        v19 = 0xAAAAAAAAAAAAAAABLL * ((a1[1] - *a1) >> 3) / v13;
        if ((int)v19 <= 1)
          v20 = 1;
        else
          v20 = v19;
        do
        {
          if (0xAAAAAAAAAAAAAAABLL * ((a1[1] - *a1) >> 3) <= v17 * v20)
            break;
          v21 = (int **)(*a1 + 24 * v17 * v20);
          if ((unint64_t)v16 >= v29)
          {
            v16 = (uint64_t *)std::vector<dlib::matrix<float,1l,0l,dlib::memory_manager_stateless_kernel_1<char>,dlib::row_major_layout>>::__push_back_slow_path<dlib::matrix<float,1l,0l,dlib::memory_manager_stateless_kernel_1<char>,dlib::row_major_layout> const&>((uint64_t *)&__p, v21);
          }
          else
          {
            dlib::matrix<float,1l,0l,dlib::memory_manager_stateless_kernel_1<char>,dlib::row_major_layout>::matrix(v16, v21);
            v16 += 3;
          }
          ++v17;
          v28 = (int **)v16;
          --v18;
        }
        while (v18);
      }
      dlib::find_clusters_using_kmeans<std::vector<dlib::matrix<float,1l,0l,dlib::memory_manager_stateless_kernel_1<char>,dlib::row_major_layout>>,dlib::matrix<float,1l,0l,dlib::memory_manager_stateless_kernel_1<char>,dlib::row_major_layout>,std::allocator<dlib::matrix<float,1l,0l,dlib::memory_manager_stateless_kernel_1<char>,dlib::row_major_layout>>>(a1, (int ***)&__p, 0x3E8uLL);
      getClusteringLabels(a1, (uint64_t *)&__p, &v26);
      memset(v25, 0, sizeof(v25));
      std::vector<std::vector<float>>::__init_with_size[abi:ne180100]<std::vector<float>*,std::vector<float>*>(v25, v30, v31, 0xAAAAAAAAAAAAAAABLL * ((v31 - v30) >> 3));
      v22 = silhouetteScore(v25, &v26.__begin_, v13);
      v34[0] = v25;
      std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100]((void ***)v34);
      if (v22 > v15)
      {
        if (&__p != a2)
          std::vector<dlib::matrix<float,1l,0l,dlib::memory_manager_stateless_kernel_1<char>,dlib::row_major_layout>>::__assign_with_size[abi:ne180100]<dlib::matrix<float,1l,0l,dlib::memory_manager_stateless_kernel_1<char>,dlib::row_major_layout>*,dlib::matrix<float,1l,0l,dlib::memory_manager_stateless_kernel_1<char>,dlib::row_major_layout>*>((uint64_t)a2, (int **)__p, v28, 0xAAAAAAAAAAAAAAABLL * (((char *)v28 - (_BYTE *)__p) >> 3));
        if (&v26 != (std::vector<int> *)a3)
          std::vector<int>::__assign_with_size[abi:ne180100]<int *,int *>((char *)a3, (char *)v26.__begin_, (uint64_t)v26.__end_, v26.__end_ - v26.__begin_);
        v15 = v22;
      }
      if (v26.__begin_)
      {
        v26.__end_ = v26.__begin_;
        operator delete(v26.__begin_);
      }
      v26.__begin_ = (std::vector<int>::pointer)&__p;
      std::vector<dlib::matrix<float,1l,0l,dlib::memory_manager_stateless_kernel_1<char>,dlib::row_major_layout>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v26);
      ++v13;
    }
    while (v14 != (_DWORD)v13);
  }
  __p = &v30;
  std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
}

void sub_1B6CEBF88(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, void *a15, uint64_t a16, uint64_t a17, uint64_t a18, void *__p, uint64_t a20,uint64_t a21,uint64_t a22,char a23)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

std::vector<int> *pickRepresentativesByDistribution@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X1>, std::vector<int> *a3@<X8>)
{
  std::vector<int> *result;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  BOOL v11;
  uint64_t v12;
  unint64_t v13;
  float v14;
  float v15;
  float v16;
  uint64_t v18[4];
  uint64_t v19[4];
  _QWORD v20[2];
  uint64_t **v21;
  uint64_t *v22[2];
  float v23;

  result = std::vector<int>::vector(a3, 0xAAAAAAAAAAAAAAABLL * ((a2[1] - *a2) >> 3));
  v7 = *a2;
  v6 = a2[1];
  if (v6 != *a2)
  {
    v8 = 0;
    v9 = *a1;
    v10 = a1[1];
    do
    {
      v11 = v10 == v9;
      v10 = v9;
      if (!v11)
      {
        v12 = 0;
        v13 = 0;
        v14 = INFINITY;
        do
        {
          dlib::matrix<float,0l,0l,dlib::memory_manager_stateless_kernel_1<char>,dlib::row_major_layout>::matrix<dlib::matrix<float,1l,0l,dlib::memory_manager_stateless_kernel_1<char>,dlib::row_major_layout>>(v19, (int **)(*a2 + 24 * v8));
          dlib::matrix<float,0l,0l,dlib::memory_manager_stateless_kernel_1<char>,dlib::row_major_layout>::matrix<dlib::matrix<float,1l,0l,dlib::memory_manager_stateless_kernel_1<char>,dlib::row_major_layout>>(v18, (int **)(*a1 + v12));
          v22[0] = v19;
          v22[1] = v18;
          v20[0] = v19;
          v20[1] = v18;
          v21 = (uint64_t **)v20;
          v23 = 0.0;
          dlib::default_matrix_multiply<dlib::matrix<float,1l,1l,dlib::memory_manager_stateless_kernel_1<char>,dlib::row_major_layout>,dlib::matrix_subtract_exp<dlib::matrix<float,0l,0l,dlib::memory_manager_stateless_kernel_1<char>,dlib::row_major_layout>,dlib::matrix<float,0l,0l,dlib::memory_manager_stateless_kernel_1<char>,dlib::row_major_layout>>,dlib::matrix_op<dlib::op_trans<dlib::matrix_subtract_exp<dlib::matrix<float,0l,0l,dlib::memory_manager_stateless_kernel_1<char>,dlib::row_major_layout>,dlib::matrix<float,0l,0l,dlib::memory_manager_stateless_kernel_1<char>,dlib::row_major_layout>>>>>(&v23, v22, &v21);
          v15 = v23;
          if (v18[0])
            MEMORY[0x1BCCA128C](v18[0], 0x1000C8052888210);
          result = (std::vector<int> *)v19[0];
          if (v19[0])
            result = (std::vector<int> *)MEMORY[0x1BCCA128C](v19[0], 0x1000C8052888210);
          v16 = sqrtf(v15);
          if (v16 < v14)
          {
            a3->__begin_[v8] = v13;
            v14 = v16;
          }
          ++v13;
          v9 = *a1;
          v10 = a1[1];
          v12 += 24;
        }
        while (0xAAAAAAAAAAAAAAABLL * ((v10 - *a1) >> 3) > v13);
        v7 = *a2;
        v6 = a2[1];
      }
      ++v8;
    }
    while (0xAAAAAAAAAAAAAAABLL * ((v6 - v7) >> 3) > v8);
  }
  return result;
}

void sub_1B6CEC1FC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15)
{
  void *v16;

  if (a15)
    MEMORY[0x1BCCA128C](a15, 0x1000C8052888210);
  v16 = *(void **)a10;
  if (*(_QWORD *)a10)
  {
    *(_QWORD *)(a10 + 8) = v16;
    operator delete(v16);
  }
  _Unwind_Resume(exception_object);
}

float cosSimilarity(uint64_t *a1, uint64_t *a2)
{
  float v4;
  float v5;
  uint64_t *v7;

  v4 = dlib::dot<dlib::matrix<float,0l,0l,dlib::memory_manager_stateless_kernel_1<char>,dlib::row_major_layout>,dlib::matrix<float,0l,0l,dlib::memory_manager_stateless_kernel_1<char>,dlib::row_major_layout>>(a1, a2);
  v7 = a1;
  v5 = dlib::sum<dlib::matrix_op<dlib::op_squared<dlib::matrix<float,0l,0l,dlib::memory_manager_stateless_kernel_1<char>,dlib::row_major_layout>>>>((uint64_t)&v7);
  v7 = a2;
  return v4
       / (float)(sqrtf(v5)
               * sqrtf(dlib::sum<dlib::matrix_op<dlib::op_squared<dlib::matrix<float,0l,0l,dlib::memory_manager_stateless_kernel_1<char>,dlib::row_major_layout>>>>((uint64_t)&v7)));
}

uint64_t dlib::matrix<float,0l,0l,dlib::memory_manager_stateless_kernel_1<char>,dlib::row_major_layout>::operator=<dlib::matrix_diag_op<dlib::op_diagm<dlib::matrix_op<dlib::op_sumr<dlib::matrix<float,0l,0l,dlib::memory_manager_stateless_kernel_1<char>,dlib::row_major_layout>>>>>>(uint64_t a1, float ****a2)
{
  float **v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  __int128 v10;
  uint64_t v12;
  __int128 v13;
  void *v14;

  v4 = **a2;
  if (v4 == (float **)a1)
  {
    v12 = 0;
    v13 = 0uLL;
    v14 = &unk_1E6B131D0;
    if (*(uint64_t *)(a1 + 16) <= 1)
      v8 = 1;
    else
      v8 = *(_QWORD *)(a1 + 16);
    dlib::row_major_layout::layout<float,0l,0l,dlib::memory_manager_stateless_kernel_1<char>,5>::set_size(&v12, v8, v8);
    dlib::matrix_assign_big<dlib::matrix<float,0l,0l,dlib::memory_manager_stateless_kernel_1<char>,dlib::row_major_layout>,dlib::matrix_diag_op<dlib::op_diagm<dlib::matrix_op<dlib::op_sumr<dlib::matrix<float,0l,0l,dlib::memory_manager_stateless_kernel_1<char>,dlib::row_major_layout>>>>>>(&v12, a2);
    v9 = *(_QWORD *)a1;
    *(_QWORD *)a1 = v12;
    v12 = v9;
    v10 = *(_OWORD *)(a1 + 8);
    *(_OWORD *)(a1 + 8) = v13;
    v13 = v10;
    if (v9)
      MEMORY[0x1BCCA128C](v9, 0x1000C8052888210);
  }
  else
  {
    v5 = *(_QWORD *)(a1 + 8);
    v6 = (uint64_t)v4[2];
    if (v6 <= 1)
      v7 = 1;
    else
      v7 = v6;
    if (v5 != v7 || *(_QWORD *)(a1 + 16) != v5)
      dlib::row_major_layout::layout<float,0l,0l,dlib::memory_manager_stateless_kernel_1<char>,5>::set_size((uint64_t *)a1, v7, v7);
    dlib::matrix_assign_big<dlib::matrix<float,0l,0l,dlib::memory_manager_stateless_kernel_1<char>,dlib::row_major_layout>,dlib::matrix_diag_op<dlib::op_diagm<dlib::matrix_op<dlib::op_sumr<dlib::matrix<float,0l,0l,dlib::memory_manager_stateless_kernel_1<char>,dlib::row_major_layout>>>>>>((_QWORD *)a1, a2);
  }
  return a1;
}

void sub_1B6CEC3B0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9)
{
  if (a9)
    MEMORY[0x1BCCA128C](a9, 0x1000C8052888210);
  _Unwind_Resume(exception_object);
}

uint64_t dlib::matrix<float,0l,0l,dlib::memory_manager_stateless_kernel_1<char>,dlib::row_major_layout>::operator=<dlib::matrix_diag_op<dlib::op_diagm<dlib::matrix_op<dlib::op_s_div_m<dlib::matrix_op<dlib::op_sumr<dlib::matrix<float,0l,0l,dlib::memory_manager_stateless_kernel_1<char>,dlib::row_major_layout>>>>>>>>(uint64_t a1, float **a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  __int128 v10;
  uint64_t v12;
  __int128 v13;
  void *v14;

  v4 = **(_QWORD **)*a2;
  if (v4 == a1)
  {
    v12 = 0;
    v13 = 0uLL;
    v14 = &unk_1E6B131D0;
    if (*(uint64_t *)(a1 + 16) <= 1)
      v8 = 1;
    else
      v8 = *(_QWORD *)(a1 + 16);
    dlib::row_major_layout::layout<float,0l,0l,dlib::memory_manager_stateless_kernel_1<char>,5>::set_size(&v12, v8, v8);
    dlib::matrix_assign_big<dlib::matrix<float,0l,0l,dlib::memory_manager_stateless_kernel_1<char>,dlib::row_major_layout>,dlib::matrix_diag_op<dlib::op_diagm<dlib::matrix_op<dlib::op_s_div_m<dlib::matrix_op<dlib::op_sumr<dlib::matrix<float,0l,0l,dlib::memory_manager_stateless_kernel_1<char>,dlib::row_major_layout>>>>>>>>(&v12, a2);
    v9 = *(_QWORD *)a1;
    *(_QWORD *)a1 = v12;
    v12 = v9;
    v10 = *(_OWORD *)(a1 + 8);
    *(_OWORD *)(a1 + 8) = v13;
    v13 = v10;
    if (v9)
      MEMORY[0x1BCCA128C](v9, 0x1000C8052888210);
  }
  else
  {
    v5 = *(_QWORD *)(a1 + 8);
    v6 = *(_QWORD *)(v4 + 16);
    if (v6 <= 1)
      v7 = 1;
    else
      v7 = v6;
    if (v5 != v7 || *(_QWORD *)(a1 + 16) != v5)
      dlib::row_major_layout::layout<float,0l,0l,dlib::memory_manager_stateless_kernel_1<char>,5>::set_size((uint64_t *)a1, v7, v7);
    dlib::matrix_assign_big<dlib::matrix<float,0l,0l,dlib::memory_manager_stateless_kernel_1<char>,dlib::row_major_layout>,dlib::matrix_diag_op<dlib::op_diagm<dlib::matrix_op<dlib::op_s_div_m<dlib::matrix_op<dlib::op_sumr<dlib::matrix<float,0l,0l,dlib::memory_manager_stateless_kernel_1<char>,dlib::row_major_layout>>>>>>>>((_QWORD *)a1, a2);
  }
  return a1;
}

void sub_1B6CEC4C8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9)
{
  if (a9)
    MEMORY[0x1BCCA128C](a9, 0x1000C8052888210);
  _Unwind_Resume(exception_object);
}

uint64_t *dlib::matrix<float,0l,0l,dlib::memory_manager_stateless_kernel_1<char>,dlib::row_major_layout>::operator=<dlib::matrix_multiply_exp<dlib::matrix<float,0l,0l,dlib::memory_manager_stateless_kernel_1<char>,dlib::row_major_layout>,dlib::matrix_subtract_exp<dlib::matrix<float,0l,0l,dlib::memory_manager_stateless_kernel_1<char>,dlib::row_major_layout>,dlib::matrix<float,0l,0l,dlib::memory_manager_stateless_kernel_1<char>,dlib::row_major_layout>>>>(uint64_t *a1, uint64_t **a2)
{
  uint64_t *v4;
  uint64_t **v5;
  uint64_t *v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  __int128 v13;
  uint64_t v15;
  __int128 v16;
  void *v17;

  v4 = *a2;
  v5 = (uint64_t **)a2[1];
  v6 = *v5;
  if (*a2 == a1)
  {
LABEL_7:
    v7 = *v5;
    goto LABEL_8;
  }
  v7 = a1;
  if (v6 != a1)
  {
    if (v5[1] != a1)
    {
      v8 = v4[1];
      if (a1[1] == v8)
      {
        v9 = v6[2];
        if (a1[2] == v9)
          goto LABEL_14;
      }
      else
      {
        v9 = v6[2];
      }
      dlib::row_major_layout::layout<float,0l,0l,dlib::memory_manager_stateless_kernel_1<char>,5>::set_size(a1, v8, v9);
LABEL_14:
      dlib::blas_bindings::matrix_assign_blas<float,0l,0l,dlib::memory_manager_stateless_kernel_1<char>,dlib::row_major_layout,dlib::matrix_multiply_exp<dlib::matrix<float,0l,0l,dlib::memory_manager_stateless_kernel_1<char>,dlib::row_major_layout>,dlib::matrix_subtract_exp<dlib::matrix<float,0l,0l,dlib::memory_manager_stateless_kernel_1<char>,dlib::row_major_layout>,dlib::matrix<float,0l,0l,dlib::memory_manager_stateless_kernel_1<char>,dlib::row_major_layout>>>>((uint64_t)a1, a2);
      return a1;
    }
    goto LABEL_7;
  }
LABEL_8:
  v15 = 0;
  v16 = 0uLL;
  v17 = &unk_1E6B131D0;
  v10 = v4[1];
  v11 = v7[2];
  if (v10 | v11)
    dlib::row_major_layout::layout<float,0l,0l,dlib::memory_manager_stateless_kernel_1<char>,5>::set_size(&v15, v10, v11);
  dlib::blas_bindings::matrix_assign_blas<float,0l,0l,dlib::memory_manager_stateless_kernel_1<char>,dlib::row_major_layout,dlib::matrix_multiply_exp<dlib::matrix<float,0l,0l,dlib::memory_manager_stateless_kernel_1<char>,dlib::row_major_layout>,dlib::matrix_subtract_exp<dlib::matrix<float,0l,0l,dlib::memory_manager_stateless_kernel_1<char>,dlib::row_major_layout>,dlib::matrix<float,0l,0l,dlib::memory_manager_stateless_kernel_1<char>,dlib::row_major_layout>>>>((uint64_t)&v15, a2);
  v12 = *a1;
  *a1 = v15;
  v15 = v12;
  v13 = *(_OWORD *)(a1 + 1);
  *(_OWORD *)(a1 + 1) = v16;
  v16 = v13;
  if (v12)
    MEMORY[0x1BCCA128C](v12, 0x1000C8052888210);
  return a1;
}

void sub_1B6CEC5F8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9)
{
  if (a9)
    MEMORY[0x1BCCA128C](a9, 0x1000C8052888210);
  _Unwind_Resume(exception_object);
}

std::random_device *std::random_device::random_device[abi:ne180100](std::random_device *a1)
{
  std::string __token;

  std::string::basic_string[abi:ne180100]<0>(&__token, "/dev/urandom");
  std::random_device::random_device(a1, &__token);
  if (SHIBYTE(__token.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__token.__r_.__value_.__l.__data_);
  return a1;
}

void sub_1B6CEC674(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void *dlib::find_clusters_using_kmeans<std::vector<dlib::matrix<float,1l,0l,dlib::memory_manager_stateless_kernel_1<char>,dlib::row_major_layout>>,dlib::matrix<float,1l,0l,dlib::memory_manager_stateless_kernel_1<char>,dlib::row_major_layout>,std::allocator<dlib::matrix<float,1l,0l,dlib::memory_manager_stateless_kernel_1<char>,dlib::row_major_layout>>>(uint64_t *a1, int ***a2, unint64_t a3)
{
  unint64_t v6;
  int **v7;
  int **v8;
  uint64_t v9;
  uint64_t v10;
  int **v11;
  int **v12;
  uint64_t v13;
  uint64_t v14;
  char v15;
  unint64_t v16;
  unint64_t v17;
  _QWORD *v18;
  _QWORD *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  float v23;
  float **v24;
  uint64_t v25;
  float *v26;
  float *v27;
  float v28;
  float v29;
  float v30;
  float v31;
  float v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  uint64_t v36;
  unint64_t v37;
  unint64_t v38;
  void *result;
  void *__p[3];
  void *v41;
  void *v42;
  uint64_t v43;
  void *v44;
  uint64_t v45;
  unint64_t v46;
  float v47;

  dlib::matrix<float,1l,0l,dlib::memory_manager_stateless_kernel_1<char>,dlib::row_major_layout>::matrix((uint64_t *)&v44, *a2);
  if (v45 >= 1)
    bzero(v44, 4 * v45);
  v41 = 0;
  v42 = 0;
  v43 = 0;
  v46 = 0xAAAAAAAAAAAAAAABLL * ((a1[1] - *a1) >> 3);
  std::vector<unsigned long>::vector(__p, v46, &v46);
  if (a3)
  {
    v6 = 0;
    v8 = *a2;
    v7 = a2[1];
    do
    {
      v46 = 0;
      std::vector<unsigned long>::assign((char **)&v41, 0xAAAAAAAAAAAAAAABLL * (v7 - v8), &v46);
      v9 = *a1;
      v10 = a1[1];
      v12 = *a2;
      v11 = a2[1];
      v13 = v10 - *a1;
      if (v10 == *a1)
      {
        v15 = 0;
        v17 = 0xAAAAAAAAAAAAAAABLL * (v11 - v12);
      }
      else
      {
        v14 = 0;
        v15 = 0;
        v16 = v13 / 24;
        v17 = ((char *)v11 - (char *)v12) / 24;
        v18 = __p[0];
        v19 = v41;
        if (v17 <= 1)
          v20 = 1;
        else
          v20 = ((char *)v11 - (char *)v12) / 24;
        if (v16 <= 1)
          v16 = 1;
        do
        {
          if (v11 == v12)
          {
            v22 = 0;
          }
          else
          {
            v21 = 0;
            v22 = 0;
            v23 = 3.4028e38;
            do
            {
              v24 = (float **)&v12[3 * v21];
              v25 = (uint64_t)v24[1];
              if (v25 < 1)
              {
                v28 = 0.0;
              }
              else
              {
                v26 = *v24;
                v27 = *(float **)(v9 + 24 * v14);
                v28 = 0.0;
                do
                {
                  v29 = *v26++;
                  v30 = v29;
                  v31 = *v27++;
                  v28 = v28 + (float)((float)(v30 - v31) * (float)(v30 - v31));
                  --v25;
                }
                while (v25);
              }
              v32 = sqrtf(v28);
              if (v32 < v23)
              {
                v23 = v32;
                v22 = v21;
              }
              ++v21;
            }
            while (v21 != v20);
          }
          if (v18[v14] != v22)
          {
            v18[v14] = v22;
            v15 = 1;
          }
          ++v19[v22];
          ++v14;
        }
        while (v14 != v16);
      }
      std::vector<dlib::matrix<float,1l,0l,dlib::memory_manager_stateless_kernel_1<char>,dlib::row_major_layout>>::assign((uint64_t *)a2, v17, (uint64_t *)&v44);
      v33 = *a1;
      if (a1[1] != *a1)
      {
        v34 = 0;
        v35 = 0;
        do
        {
          dlib::matrix<float,1l,0l,dlib::memory_manager_stateless_kernel_1<char>,dlib::row_major_layout>::operator+=((uint64_t *)&(*a2)[3 * *((_QWORD *)__p[0] + v35++)], v33 + v34);
          v33 = *a1;
          v34 += 24;
        }
        while (v35 < 0xAAAAAAAAAAAAAAABLL * ((a1[1] - *a1) >> 3));
      }
      v8 = *a2;
      v7 = a2[1];
      if (v7 == *a2)
      {
        v8 = a2[1];
        if ((v15 & 1) == 0)
          break;
      }
      else
      {
        v36 = 0;
        v37 = 0;
        do
        {
          v38 = *((_QWORD *)v41 + v37);
          if (v38)
          {
            v46 = (unint64_t)&v8[v36];
            v47 = 1.0 / (float)v38;
            dlib::matrix<float,1l,0l,dlib::memory_manager_stateless_kernel_1<char>,dlib::row_major_layout>::operator=<dlib::matrix_mul_scal_exp<dlib::matrix<float,1l,0l,dlib::memory_manager_stateless_kernel_1<char>,dlib::row_major_layout>,true>>((uint64_t *)&v8[v36], (uint64_t)&v46);
            v8 = *a2;
            v7 = a2[1];
          }
          ++v37;
          v36 += 3;
        }
        while (v37 < 0xAAAAAAAAAAAAAAABLL * (v7 - v8));
        if ((v15 & 1) == 0)
          break;
      }
      ++v6;
    }
    while (v6 < a3);
  }
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
  if (v41)
  {
    v42 = v41;
    operator delete(v41);
  }
  result = v44;
  if (v44)
    return (void *)MEMORY[0x1BCCA128C](v44, 0x1000C8052888210);
  return result;
}

void sub_1B6CEC994(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, uint64_t a15, uint64_t a16)
{
  if (__p)
    operator delete(__p);
  if (a16)
    MEMORY[0x1BCCA128C](a16, 0x1000C8052888210);
  _Unwind_Resume(exception_object);
}

std::vector<int> *getClusteringLabels@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X1>, std::vector<int> *a3@<X8>)
{
  std::vector<int> *result;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  BOOL v11;
  uint64_t v12;
  unint64_t v13;
  float v14;
  float v15;
  float v16;
  uint64_t v18[4];
  uint64_t v19[4];
  _QWORD v20[2];
  uint64_t **v21;
  uint64_t *v22[2];
  float v23;

  result = std::vector<int>::vector(a3, 0xAAAAAAAAAAAAAAABLL * ((a1[1] - *a1) >> 3));
  v7 = *a1;
  v6 = a1[1];
  if (v6 != *a1)
  {
    v8 = 0;
    v9 = *a2;
    v10 = a2[1];
    do
    {
      v11 = v10 == v9;
      v10 = v9;
      if (!v11)
      {
        v12 = 0;
        v13 = 0;
        v14 = INFINITY;
        do
        {
          dlib::matrix<float,0l,0l,dlib::memory_manager_stateless_kernel_1<char>,dlib::row_major_layout>::matrix<dlib::matrix<float,1l,0l,dlib::memory_manager_stateless_kernel_1<char>,dlib::row_major_layout>>(v19, (int **)(*a1 + 24 * v8));
          dlib::matrix<float,0l,0l,dlib::memory_manager_stateless_kernel_1<char>,dlib::row_major_layout>::matrix<dlib::matrix<float,1l,0l,dlib::memory_manager_stateless_kernel_1<char>,dlib::row_major_layout>>(v18, (int **)(*a2 + v12));
          v22[0] = v19;
          v22[1] = v18;
          v20[0] = v19;
          v20[1] = v18;
          v21 = (uint64_t **)v20;
          v23 = 0.0;
          dlib::default_matrix_multiply<dlib::matrix<float,1l,1l,dlib::memory_manager_stateless_kernel_1<char>,dlib::row_major_layout>,dlib::matrix_subtract_exp<dlib::matrix<float,0l,0l,dlib::memory_manager_stateless_kernel_1<char>,dlib::row_major_layout>,dlib::matrix<float,0l,0l,dlib::memory_manager_stateless_kernel_1<char>,dlib::row_major_layout>>,dlib::matrix_op<dlib::op_trans<dlib::matrix_subtract_exp<dlib::matrix<float,0l,0l,dlib::memory_manager_stateless_kernel_1<char>,dlib::row_major_layout>,dlib::matrix<float,0l,0l,dlib::memory_manager_stateless_kernel_1<char>,dlib::row_major_layout>>>>>(&v23, v22, &v21);
          v15 = v23;
          if (v18[0])
            MEMORY[0x1BCCA128C](v18[0], 0x1000C8052888210);
          result = (std::vector<int> *)v19[0];
          if (v19[0])
            result = (std::vector<int> *)MEMORY[0x1BCCA128C](v19[0], 0x1000C8052888210);
          v16 = sqrtf(v15);
          if (v16 < v14)
          {
            a3->__begin_[v8] = v13;
            v14 = v16;
          }
          ++v13;
          v9 = *a2;
          v10 = a2[1];
          v12 += 24;
        }
        while (0xAAAAAAAAAAAAAAABLL * ((v10 - *a2) >> 3) > v13);
        v7 = *a1;
        v6 = a1[1];
      }
      ++v8;
    }
    while (0xAAAAAAAAAAAAAAABLL * ((v6 - v7) >> 3) > v8);
  }
  return result;
}

void sub_1B6CECB78(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15)
{
  void *v16;

  if (a15)
    MEMORY[0x1BCCA128C](a15, 0x1000C8052888210);
  v16 = *(void **)a10;
  if (*(_QWORD *)a10)
  {
    *(_QWORD *)(a10 + 8) = v16;
    operator delete(v16);
  }
  _Unwind_Resume(exception_object);
}

_QWORD *dlib::eigenvalue_decomposition<dlib::matrix<float,0l,0l,dlib::memory_manager_stateless_kernel_1<char>,dlib::row_major_layout>>::~eigenvalue_decomposition(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v2 = a1[16];
  if (v2)
    MEMORY[0x1BCCA128C](v2, 0x1000C8052888210);
  v3 = a1[12];
  if (v3)
    MEMORY[0x1BCCA128C](v3, 0x1000C8052888210);
  v4 = a1[8];
  if (v4)
    MEMORY[0x1BCCA128C](v4, 0x1000C8052888210);
  v5 = a1[5];
  if (v5)
    MEMORY[0x1BCCA128C](v5, 0x1000C8052888210);
  v6 = a1[2];
  if (v6)
    MEMORY[0x1BCCA128C](v6, 0x1000C8052888210);
  return a1;
}

float silhouetteScore(_QWORD *a1, int **a2, int a3)
{
  float v3;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  int *v10;
  std::vector<int>::pointer begin;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  int *v15;
  unint64_t v16;
  float *v17;
  float *v18;
  uint64_t v19;
  int *v20;
  float v21;
  float v22;
  uint64_t v23;
  uint64_t v24;
  std::vector<int>::pointer v25;
  int v26;
  float v27;
  float *v28;
  float v29;
  uint64_t v30;
  int v31;
  float v32;
  int v34;
  std::vector<int>::value_type __x[2];
  float *v36;
  std::vector<int> v37;

  v3 = 0.0;
  if (a3 != 1)
  {
    v7 = a3;
    __x[0] = 0;
    std::vector<int>::vector(&v37, a3, __x);
    v8 = a1[1] - *a1;
    if (v8)
    {
      v9 = v8 / 24;
      v10 = *a2;
      begin = v37.__begin_;
      if (v9 <= 1)
        v9 = 1;
      do
      {
        v13 = *v10++;
        v12 = v13;
        if ((int)v13 >= a3)
        {
          v3 = -18.0;
          goto LABEL_34;
        }
        ++begin[v12];
        --v9;
      }
      while (v9);
      v14 = 0;
      v3 = 0.0;
      do
      {
        v34 = 0;
        std::vector<float>::vector(__x, v7, &v34);
        v15 = *a2;
        v16 = (a1[1] - *a1) / 24;
        if (a1[1] != *a1)
        {
          v17 = *(float **)(*a1 + 24 * v14);
          v18 = *(float **)__x;
          if (v16 <= 1)
            v19 = 1;
          else
            v19 = (a1[1] - *a1) / 24;
          v20 = *a2;
          do
          {
            v21 = *v17++;
            v22 = v21;
            v23 = *v20++;
            v18[v23] = v22 + v18[v23];
            --v19;
          }
          while (v19);
        }
        v24 = v15[v14];
        v25 = v37.__begin_;
        v26 = v37.__begin_[v24];
        v27 = 0.0;
        if (v26 != 1)
          v27 = *(float *)(*(_QWORD *)__x + 4 * v24) / (float)(v26 - 1);
        if (a3 < 1)
        {
          v29 = INFINITY;
        }
        else
        {
          v28 = *(float **)__x;
          v24 = v24;
          v29 = INFINITY;
          v30 = a3;
          do
          {
            if (v24)
            {
              v31 = *v25;
              if (*v25 >= 1 && (float)(*v28 / (float)v31) < v29)
                v29 = *v28 / (float)v31;
            }
            --v24;
            ++v25;
            ++v28;
            --v30;
          }
          while (v30);
        }
        if (v26 > 1)
        {
          v32 = v29 - v27;
          if (v27 < v29)
            v27 = v29;
          v3 = v3 + (float)(v32 / v27);
        }
        if (*(_QWORD *)__x)
        {
          v36 = *(float **)__x;
          operator delete(*(void **)__x);
          v16 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(a1[1] - *a1) >> 3);
        }
        ++v14;
      }
      while (v16 > v14);
    }
    v3 = v3 / (float)(unint64_t)(a2[1] - *a2);
LABEL_34:
    if (v37.__begin_)
    {
      v37.__end_ = v37.__begin_;
      operator delete(v37.__begin_);
    }
  }
  return v3;
}

void sub_1B6CECEE4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t *dlib::matrix<float,1l,0l,dlib::memory_manager_stateless_kernel_1<char>,dlib::row_major_layout>::operator+=(uint64_t *a1, uint64_t a2)
{
  uint64_t v4;
  float *v5;
  float *v6;
  float v7;
  float *v8;
  _DWORD *v9;
  int v10;

  v4 = *(_QWORD *)(a2 + 8);
  if (a1[1] == v4)
  {
    if (v4 >= 1)
    {
      v5 = *(float **)a2;
      v6 = (float *)*a1;
      do
      {
        v7 = *v5++;
        *v6 = v7 + *v6;
        ++v6;
        --v4;
      }
      while (v4);
    }
  }
  else
  {
    dlib::row_major_layout::layout<float,1l,0l,dlib::memory_manager_stateless_kernel_1<char>,4>::set_size(a1, 1, v4);
    if (v4 >= 1)
    {
      v8 = *(float **)a2;
      v9 = (_DWORD *)*a1;
      do
      {
        v10 = *(_DWORD *)v8++;
        *v9++ = v10;
        --v4;
      }
      while (v4);
    }
  }
  return a1;
}

uint64_t std::vector<dlib::matrix<float,1l,0l,dlib::memory_manager_stateless_kernel_1<char>,dlib::row_major_layout>>::push_back[abi:ne180100](uint64_t *a1, uint64_t *a2)
{
  uint64_t result;
  unint64_t v5;
  unint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  char *v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD v19[5];

  v6 = a1[2];
  result = (uint64_t)(a1 + 2);
  v5 = v6;
  v7 = *(_QWORD **)(result - 8);
  if ((unint64_t)v7 >= v6)
  {
    v11 = 0xAAAAAAAAAAAAAAABLL * (((uint64_t)v7 - *a1) >> 3);
    v12 = v11 + 1;
    if (v11 + 1 > 0xAAAAAAAAAAAAAAALL)
      std::vector<std::unique_ptr<VCPProtoKeypoint>>::__throw_length_error[abi:ne180100]();
    v13 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v5 - *a1) >> 3);
    if (2 * v13 > v12)
      v12 = 2 * v13;
    if (v13 >= 0x555555555555555)
      v14 = 0xAAAAAAAAAAAAAAALL;
    else
      v14 = v12;
    v19[4] = result;
    if (v14)
      v15 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::tuple<float,unsigned long,unsigned long>>>(result, v14);
    else
      v15 = 0;
    v16 = &v15[24 * v11];
    v19[0] = v15;
    v19[1] = v16;
    v19[3] = &v15[24 * v14];
    *(_QWORD *)v16 = 0;
    *((_QWORD *)v16 + 1) = 0;
    *((_QWORD *)v16 + 2) = &unk_1E6B131D0;
    v17 = *a2;
    v18 = a2[1];
    *a2 = 0;
    a2[1] = 0;
    *(_QWORD *)v16 = v17;
    *((_QWORD *)v16 + 1) = v18;
    v19[2] = v16 + 24;
    std::vector<dlib::matrix<float,1l,0l,dlib::memory_manager_stateless_kernel_1<char>,dlib::row_major_layout>>::__swap_out_circular_buffer(a1, v19);
    v10 = (_QWORD *)a1[1];
    result = std::__split_buffer<dlib::matrix<float,1l,0l,dlib::memory_manager_stateless_kernel_1<char>,dlib::row_major_layout>>::~__split_buffer((uint64_t)v19);
  }
  else
  {
    *v7 = 0;
    v7[1] = 0;
    v7[2] = &unk_1E6B131D0;
    v8 = *a2;
    v9 = a2[1];
    *a2 = 0;
    a2[1] = 0;
    *v7 = v8;
    v7[1] = v9;
    v10 = v7 + 3;
    a1[1] = (uint64_t)(v7 + 3);
  }
  a1[1] = (uint64_t)v10;
  return result;
}

void sub_1B6CED0CC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::__split_buffer<dlib::matrix<float,1l,0l,dlib::memory_manager_stateless_kernel_1<char>,dlib::row_major_layout>>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

float dlib::dot<dlib::matrix<float,0l,0l,dlib::memory_manager_stateless_kernel_1<char>,dlib::row_major_layout>,dlib::matrix<float,0l,0l,dlib::memory_manager_stateless_kernel_1<char>,dlib::row_major_layout>>(uint64_t *a1, uint64_t *a2)
{
  uint64_t *v3;
  uint64_t *v4;
  uint64_t *v5;

  if (a1[2] == 1)
  {
    if (a2[2] == 1)
    {
      v3 = a1;
      v4 = (uint64_t *)&v3;
      v5 = a2;
      return dlib::matrix_exp<dlib::matrix_multiply_exp<dlib::matrix_op<dlib::op_trans<dlib::matrix<float,0l,0l,dlib::memory_manager_stateless_kernel_1<char>,dlib::row_major_layout>>>,dlib::matrix<float,0l,0l,dlib::memory_manager_stateless_kernel_1<char>,dlib::row_major_layout>>>::operator()(&v4, 0);
    }
    if (a2[1] == 1)
    {
      v4 = a2;
      v5 = a1;
      return dlib::matrix_exp<dlib::matrix_multiply_exp<dlib::matrix<float,0l,0l,dlib::memory_manager_stateless_kernel_1<char>,dlib::row_major_layout>,dlib::matrix<float,0l,0l,dlib::memory_manager_stateless_kernel_1<char>,dlib::row_major_layout>>>::operator()((uint64_t)&v4, 0);
    }
  }
  if (a1[1] == 1 && a2[2] == 1)
  {
    v4 = a1;
    v5 = a2;
    return dlib::matrix_exp<dlib::matrix_multiply_exp<dlib::matrix<float,0l,0l,dlib::memory_manager_stateless_kernel_1<char>,dlib::row_major_layout>,dlib::matrix<float,0l,0l,dlib::memory_manager_stateless_kernel_1<char>,dlib::row_major_layout>>>::operator()((uint64_t)&v4, 0);
  }
  v3 = a2;
  v4 = a1;
  v5 = (uint64_t *)&v3;
  return dlib::matrix_exp<dlib::matrix_multiply_exp<dlib::matrix<float,0l,0l,dlib::memory_manager_stateless_kernel_1<char>,dlib::row_major_layout>,dlib::matrix_op<dlib::op_trans<dlib::matrix<float,0l,0l,dlib::memory_manager_stateless_kernel_1<char>,dlib::row_major_layout>>>>>::operator()((float ***)&v4, 0);
}

void sub_1B6CED444(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;

  v6 = v2;

  _Unwind_Resume(a1);
}

_QWORD *std::string::basic_string[abi:ne180100]<0>(_QWORD *a1, char *__s)
{
  size_t v4;
  size_t v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;

  v4 = strlen(__s);
  if (v4 >= 0x7FFFFFFFFFFFFFF8)
    std::string::__throw_length_error[abi:ne180100]();
  v5 = v4;
  if (v4 >= 0x17)
  {
    v7 = (v4 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v4 | 7) != 0x17)
      v7 = v4 | 7;
    v8 = v7 + 1;
    v6 = operator new(v7 + 1);
    a1[1] = v5;
    a1[2] = v8 | 0x8000000000000000;
    *a1 = v6;
  }
  else
  {
    *((_BYTE *)a1 + 23) = v4;
    v6 = a1;
    if (!v4)
      goto LABEL_9;
  }
  memmove(v6, __s, v5);
LABEL_9:
  *((_BYTE *)v6 + v5) = 0;
  return a1;
}

void std::string::__throw_length_error[abi:ne180100]()
{
  std::__throw_length_error[abi:ne180100]("basic_string");
}

void std::vector<dlib::matrix<float,1l,0l,dlib::memory_manager_stateless_kernel_1<char>,dlib::row_major_layout>>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  void **v2;

  v2 = *a1;
  if (*v2)
  {
    std::vector<dlib::matrix<float,1l,0l,dlib::memory_manager_stateless_kernel_1<char>,dlib::row_major_layout>>::__clear[abi:ne180100](v2);
    operator delete(**a1);
  }
}

_QWORD *std::vector<dlib::matrix<float,1l,0l,dlib::memory_manager_stateless_kernel_1<char>,dlib::row_major_layout>>::__clear[abi:ne180100](_QWORD *result)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t i;
  _QWORD *v4;

  v1 = result;
  v2 = *result;
  for (i = result[1]; i != v2; i -= 24)
  {
    v4 = *(_QWORD **)(i - 24);
    result = v4;
    if (v4)
      result = (_QWORD *)MEMORY[0x1BCCA128C](result, 0x1000C8052888210);
  }
  v1[1] = v2;
  return result;
}

uint64_t *dlib::matrix<float,1l,0l,dlib::memory_manager_stateless_kernel_1<char>,dlib::row_major_layout>::matrix(uint64_t *a1, uint64_t a2)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = (uint64_t)&unk_1E6B131D0;
  dlib::row_major_layout::layout<float,1l,0l,dlib::memory_manager_stateless_kernel_1<char>,4>::set_size(a1, 1, a2);
  return a1;
}

void sub_1B6CED688(_Unwind_Exception *exception_object)
{
  _QWORD *v1;

  if (*v1)
    MEMORY[0x1BCCA128C](*v1, 0x1000C8052888210);
  _Unwind_Resume(exception_object);
}

uint64_t dlib::row_major_layout::layout<float,1l,0l,dlib::memory_manager_stateless_kernel_1<char>,4>::set_size(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t result;

  v5 = *a1;
  if (v5)
    MEMORY[0x1BCCA128C](v5, 0x1000C8052888210);
  result = operator new[]();
  *a1 = result;
  a1[1] = a3;
  return result;
}

void dlib::memory_manager_stateless_kernel_1<float>::~memory_manager_stateless_kernel_1()
{
  JUMPOUT(0x1BCCA12BCLL);
}

uint64_t std::vector<dlib::matrix<float,1l,0l,dlib::memory_manager_stateless_kernel_1<char>,dlib::row_major_layout>>::__push_back_slow_path<dlib::matrix<float,1l,0l,dlib::memory_manager_stateless_kernel_1<char>,dlib::row_major_layout> const&>(uint64_t *a1, int **a2)
{
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  char *v10;
  uint64_t v11;
  char *v13;
  uint64_t *v14;
  uint64_t *v15;
  char *v16;
  uint64_t *v17;

  v3 = *a1;
  v4 = 0xAAAAAAAAAAAAAAABLL * ((a1[1] - *a1) >> 3);
  v5 = v4 + 1;
  if (v4 + 1 > 0xAAAAAAAAAAAAAAALL)
    std::vector<std::unique_ptr<VCPProtoKeypoint>>::__throw_length_error[abi:ne180100]();
  v7 = (uint64_t)(a1 + 2);
  v8 = 0xAAAAAAAAAAAAAAABLL * ((a1[2] - v3) >> 3);
  if (2 * v8 > v5)
    v5 = 2 * v8;
  if (v8 >= 0x555555555555555)
    v9 = 0xAAAAAAAAAAAAAAALL;
  else
    v9 = v5;
  v17 = a1 + 2;
  if (v9)
    v10 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::tuple<float,unsigned long,unsigned long>>>(v7, v9);
  else
    v10 = 0;
  v13 = v10;
  v14 = (uint64_t *)&v10[24 * v4];
  v16 = &v10[24 * v9];
  dlib::matrix<float,1l,0l,dlib::memory_manager_stateless_kernel_1<char>,dlib::row_major_layout>::matrix(v14, a2);
  v15 = v14 + 3;
  std::vector<dlib::matrix<float,1l,0l,dlib::memory_manager_stateless_kernel_1<char>,dlib::row_major_layout>>::__swap_out_circular_buffer(a1, &v13);
  v11 = a1[1];
  std::__split_buffer<dlib::matrix<float,1l,0l,dlib::memory_manager_stateless_kernel_1<char>,dlib::row_major_layout>>::~__split_buffer((uint64_t)&v13);
  return v11;
}

void sub_1B6CED828(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::__split_buffer<dlib::matrix<float,1l,0l,dlib::memory_manager_stateless_kernel_1<char>,dlib::row_major_layout>>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t *dlib::matrix<float,1l,0l,dlib::memory_manager_stateless_kernel_1<char>,dlib::row_major_layout>::matrix(uint64_t *a1, int **a2)
{
  uint64_t v4;
  _DWORD *v5;
  int *v6;
  int v7;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = (uint64_t)&unk_1E6B131D0;
  dlib::row_major_layout::layout<float,1l,0l,dlib::memory_manager_stateless_kernel_1<char>,4>::set_size(a1, 1, (uint64_t)a2[1]);
  v4 = (uint64_t)a2[1];
  if (v4 >= 1)
  {
    v5 = (_DWORD *)*a1;
    v6 = *a2;
    do
    {
      v7 = *v6++;
      *v5++ = v7;
      --v4;
    }
    while (v4);
  }
  return a1;
}

void sub_1B6CED8A4(_Unwind_Exception *exception_object)
{
  _QWORD *v1;

  if (*v1)
    MEMORY[0x1BCCA128C](*v1, 0x1000C8052888210);
  _Unwind_Resume(exception_object);
}

uint64_t std::vector<dlib::matrix<float,1l,0l,dlib::memory_manager_stateless_kernel_1<char>,dlib::row_major_layout>>::__swap_out_circular_buffer(uint64_t *a1, _QWORD *a2)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  result = std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<dlib::matrix<float,1l,0l,dlib::memory_manager_stateless_kernel_1<char>,dlib::row_major_layout>>,std::reverse_iterator<dlib::matrix<float,1l,0l,dlib::memory_manager_stateless_kernel_1<char>,dlib::row_major_layout>*>,std::reverse_iterator<dlib::matrix<float,1l,0l,dlib::memory_manager_stateless_kernel_1<char>,dlib::row_major_layout>*>,std::reverse_iterator<dlib::matrix<float,1l,0l,dlib::memory_manager_stateless_kernel_1<char>,dlib::row_major_layout>*>>((uint64_t)(a1 + 2), a1[1], (int **)a1[1], *a1, (int **)*a1, a2[1], a2[1]);
  a2[1] = v5;
  v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<dlib::matrix<float,1l,0l,dlib::memory_manager_stateless_kernel_1<char>,dlib::row_major_layout>>,std::reverse_iterator<dlib::matrix<float,1l,0l,dlib::memory_manager_stateless_kernel_1<char>,dlib::row_major_layout>*>,std::reverse_iterator<dlib::matrix<float,1l,0l,dlib::memory_manager_stateless_kernel_1<char>,dlib::row_major_layout>*>,std::reverse_iterator<dlib::matrix<float,1l,0l,dlib::memory_manager_stateless_kernel_1<char>,dlib::row_major_layout>*>>(uint64_t a1, uint64_t a2, int **a3, uint64_t a4, int **a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7;
  int **v9;
  uint64_t v10;
  _QWORD v12[3];
  char v13;
  __int128 v14;
  __int128 v15;

  v7 = a7;
  *(_QWORD *)&v15 = a6;
  *((_QWORD *)&v15 + 1) = a7;
  v14 = v15;
  v12[0] = a1;
  v12[1] = &v14;
  v12[2] = &v15;
  v13 = 0;
  if (a3 == a5)
  {
    v10 = a6;
  }
  else
  {
    v9 = a3;
    do
    {
      v9 -= 3;
      dlib::matrix<float,1l,0l,dlib::memory_manager_stateless_kernel_1<char>,dlib::row_major_layout>::matrix((uint64_t *)(v7 - 24), v9);
      v7 = *((_QWORD *)&v15 + 1) - 24;
      *((_QWORD *)&v15 + 1) -= 24;
    }
    while (v9 != a5);
    v10 = v15;
  }
  v13 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<dlib::matrix<float,1l,0l,dlib::memory_manager_stateless_kernel_1<char>,dlib::row_major_layout>>,std::reverse_iterator<dlib::matrix<float,1l,0l,dlib::memory_manager_stateless_kernel_1<char>,dlib::row_major_layout>*>>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v12);
  return v10;
}

void sub_1B6CED9E4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<dlib::matrix<float,1l,0l,dlib::memory_manager_stateless_kernel_1<char>,dlib::row_major_layout>>,std::reverse_iterator<dlib::matrix<float,1l,0l,dlib::memory_manager_stateless_kernel_1<char>,dlib::row_major_layout>*>>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<dlib::matrix<float,1l,0l,dlib::memory_manager_stateless_kernel_1<char>,dlib::row_major_layout>>,std::reverse_iterator<dlib::matrix<float,1l,0l,dlib::memory_manager_stateless_kernel_1<char>,dlib::row_major_layout>*>>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(_BYTE *)(a1 + 24))
    std::_AllocatorDestroyRangeReverse<std::allocator<dlib::matrix<float,1l,0l,dlib::memory_manager_stateless_kernel_1<char>,dlib::row_major_layout>>,std::reverse_iterator<dlib::matrix<float,1l,0l,dlib::memory_manager_stateless_kernel_1<char>,dlib::row_major_layout>*>>::operator()[abi:ne180100](a1);
  return a1;
}

uint64_t std::_AllocatorDestroyRangeReverse<std::allocator<dlib::matrix<float,1l,0l,dlib::memory_manager_stateless_kernel_1<char>,dlib::row_major_layout>>,std::reverse_iterator<dlib::matrix<float,1l,0l,dlib::memory_manager_stateless_kernel_1<char>,dlib::row_major_layout>*>>::operator()[abi:ne180100](uint64_t result)
{
  uint64_t *v1;
  uint64_t *v2;

  v1 = *(uint64_t **)(*(_QWORD *)(result + 16) + 8);
  v2 = *(uint64_t **)(*(_QWORD *)(result + 8) + 8);
  while (v1 != v2)
  {
    result = *v1;
    if (*v1)
      result = MEMORY[0x1BCCA128C](result, 0x1000C8052888210);
    v1 += 3;
  }
  return result;
}

uint64_t std::__split_buffer<dlib::matrix<float,1l,0l,dlib::memory_manager_stateless_kernel_1<char>,dlib::row_major_layout>>::~__split_buffer(uint64_t a1)
{
  std::__split_buffer<dlib::matrix<float,1l,0l,dlib::memory_manager_stateless_kernel_1<char>,dlib::row_major_layout>>::__destruct_at_end[abi:ne180100](a1, *(_QWORD *)(a1 + 8));
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

uint64_t std::__split_buffer<dlib::matrix<float,1l,0l,dlib::memory_manager_stateless_kernel_1<char>,dlib::row_major_layout>>::__destruct_at_end[abi:ne180100](uint64_t result, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;

  v2 = *(_QWORD *)(result + 16);
  if (v2 != a2)
  {
    v4 = result;
    do
    {
      v5 = *(_QWORD *)(v2 - 24);
      v2 -= 24;
      result = v5;
      *(_QWORD *)(v4 + 16) = v2;
      if (v5)
      {
        result = MEMORY[0x1BCCA128C](result, 0x1000C8052888210);
        v2 = *(_QWORD *)(v4 + 16);
      }
    }
    while (v2 != a2);
  }
  return result;
}

void std::vector<dlib::matrix<float,1l,0l,dlib::memory_manager_stateless_kernel_1<char>,dlib::row_major_layout>>::__vdeallocate(void **a1)
{
  if (*a1)
  {
    std::vector<dlib::matrix<float,1l,0l,dlib::memory_manager_stateless_kernel_1<char>,dlib::row_major_layout>>::__clear[abi:ne180100](a1);
    operator delete(*a1);
    *a1 = 0;
    a1[1] = 0;
    a1[2] = 0;
  }
}

uint64_t *dlib::matrix<float,0l,0l,dlib::memory_manager_stateless_kernel_1<char>,dlib::row_major_layout>::matrix(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  a1[3] = (uint64_t)&unk_1E6B131D0;
  dlib::row_major_layout::layout<float,0l,0l,dlib::memory_manager_stateless_kernel_1<char>,5>::set_size(a1, a2, a3);
  return a1;
}

void sub_1B6CEDB78(_Unwind_Exception *exception_object)
{
  _QWORD *v1;

  if (*v1)
    MEMORY[0x1BCCA128C](*v1, 0x1000C8052888210);
  _Unwind_Resume(exception_object);
}

uint64_t dlib::row_major_layout::layout<float,0l,0l,dlib::memory_manager_stateless_kernel_1<char>,5>::set_size(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t result;

  v6 = *a1;
  if (v6)
    MEMORY[0x1BCCA128C](v6, 0x1000C8052888210);
  result = operator new[]();
  *a1 = result;
  a1[1] = a2;
  a1[2] = a3;
  return result;
}

uint64_t *dlib::matrix<float,0l,0l,dlib::memory_manager_stateless_kernel_1<char>,dlib::row_major_layout>::matrix<dlib::matrix<float,1l,0l,dlib::memory_manager_stateless_kernel_1<char>,dlib::row_major_layout>>(uint64_t *a1, int **a2)
{
  uint64_t v4;
  _DWORD *v5;
  int *v6;
  int v7;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  a1[3] = (uint64_t)&unk_1E6B131D0;
  dlib::row_major_layout::layout<float,0l,0l,dlib::memory_manager_stateless_kernel_1<char>,5>::set_size(a1, 1, (uint64_t)a2[1]);
  v4 = (uint64_t)a2[1];
  if (v4 >= 1)
  {
    v5 = (_DWORD *)*a1;
    v6 = *a2;
    do
    {
      v7 = *v6++;
      *v5++ = v7;
      --v4;
    }
    while (v4);
  }
  return a1;
}

void sub_1B6CEDC80(_Unwind_Exception *exception_object)
{
  _QWORD *v1;

  if (*v1)
    MEMORY[0x1BCCA128C](*v1, 0x1000C8052888210);
  _Unwind_Resume(exception_object);
}

float ***dlib::matrix_assign_big<dlib::matrix<float,0l,0l,dlib::memory_manager_stateless_kernel_1<char>,dlib::row_major_layout>,dlib::matrix_diag_op<dlib::op_diagm<dlib::matrix_op<dlib::op_sumr<dlib::matrix<float,0l,0l,dlib::memory_manager_stateless_kernel_1<char>,dlib::row_major_layout>>>>>>(_QWORD *a1, float ****a2)
{
  unint64_t v4;
  float ***result;
  unint64_t v6;
  float v7;
  uint64_t v8;
  uint64_t v9;

  v4 = 0;
  result = *a2;
  do
  {
    v6 = 0;
    do
    {
      v7 = 0.0;
      if (v4 == v6)
      {
        v7 = dlib::matrix_exp<dlib::matrix_op<dlib::op_sumr<dlib::matrix<float,0l,0l,dlib::memory_manager_stateless_kernel_1<char>,dlib::row_major_layout>>>>::operator()(result, v4);
        result = *a2;
      }
      *(float *)(*a1 + 4 * (v6 + v4 * a1[2])) = v7;
      ++v6;
      v8 = (uint64_t)(*result)[2];
      if (v8 <= 1)
        v8 = 1;
    }
    while (v6 < v8);
    ++v4;
    v9 = (uint64_t)(*result)[2];
    if (v9 <= 1)
      v9 = 1;
  }
  while (v4 < v9);
  return result;
}

float dlib::matrix_exp<dlib::matrix_op<dlib::op_sumr<dlib::matrix<float,0l,0l,dlib::memory_manager_stateless_kernel_1<char>,dlib::row_major_layout>>>>::operator()(float ***a1, uint64_t a2)
{
  float **v2;
  float *v3;
  float *v4;
  float result;
  uint64_t v6;
  float *v7;
  uint64_t v8;
  float v9;
  uint64_t v10;
  uint64_t v11;
  float *v12;
  uint64_t v13;

  v2 = *a1;
  v3 = (*a1)[2];
  v4 = **a1;
  if (v3 == (float *)1)
  {
    result = *v4;
    v6 = (uint64_t)v2[1];
    if (v6 >= 2)
    {
      v7 = v4 + 1;
      v8 = v6 - 1;
      do
      {
        v9 = *v7++;
        result = result + v9;
        --v8;
      }
      while (v8);
    }
  }
  else
  {
    result = v4[a2];
    v10 = (uint64_t)v2[1];
    if (v10 >= 2)
    {
      v11 = v10 - 1;
      v12 = &v4[(_QWORD)v3 + a2];
      v13 = 4 * (_QWORD)v3;
      do
      {
        result = result + *v12;
        v12 = (float *)((char *)v12 + v13);
        --v11;
      }
      while (v11);
    }
  }
  return result;
}

float *dlib::matrix_assign_big<dlib::matrix<float,0l,0l,dlib::memory_manager_stateless_kernel_1<char>,dlib::row_major_layout>,dlib::matrix_diag_op<dlib::op_diagm<dlib::matrix_op<dlib::op_s_div_m<dlib::matrix_op<dlib::op_sumr<dlib::matrix<float,0l,0l,dlib::memory_manager_stateless_kernel_1<char>,dlib::row_major_layout>>>>>>>>(_QWORD *a1, float **a2)
{
  unint64_t v4;
  float *result;
  unint64_t v6;
  float v7;
  uint64_t v8;
  uint64_t v9;

  v4 = 0;
  result = *a2;
  do
  {
    v6 = 0;
    do
    {
      v7 = 0.0;
      if (v4 == v6)
      {
        v7 = dlib::matrix_exp<dlib::matrix_op<dlib::op_s_div_m<dlib::matrix_op<dlib::op_sumr<dlib::matrix<float,0l,0l,dlib::memory_manager_stateless_kernel_1<char>,dlib::row_major_layout>>>>>>::operator()(result, v4);
        result = *a2;
      }
      *(float *)(*a1 + 4 * (v6 + v4 * a1[2])) = v7;
      ++v6;
      v8 = *(_QWORD *)(**(_QWORD **)result + 16);
      if (v8 <= 1)
        v8 = 1;
    }
    while (v6 < v8);
    ++v4;
    v9 = *(_QWORD *)(**(_QWORD **)result + 16);
    if (v9 <= 1)
      v9 = 1;
  }
  while (v4 < v9);
  return result;
}

float dlib::matrix_exp<dlib::matrix_op<dlib::op_s_div_m<dlib::matrix_op<dlib::op_sumr<dlib::matrix<float,0l,0l,dlib::memory_manager_stateless_kernel_1<char>,dlib::row_major_layout>>>>>>::operator()(float *a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  float *v4;
  float v5;
  uint64_t v6;
  float *v7;
  uint64_t v8;
  float v9;
  uint64_t v10;
  uint64_t v11;
  float *v12;
  uint64_t v13;

  v2 = **(_QWORD **)a1;
  v3 = *(_QWORD *)(v2 + 16);
  v4 = *(float **)v2;
  if (v3 == 1)
  {
    v5 = *v4;
    v6 = *(_QWORD *)(v2 + 8);
    if (v6 >= 2)
    {
      v7 = v4 + 1;
      v8 = v6 - 1;
      do
      {
        v9 = *v7++;
        v5 = v5 + v9;
        --v8;
      }
      while (v8);
    }
  }
  else
  {
    v5 = v4[a2];
    v10 = *(_QWORD *)(v2 + 8);
    if (v10 >= 2)
    {
      v11 = v10 - 1;
      v12 = &v4[v3 + a2];
      v13 = 4 * v3;
      do
      {
        v5 = v5 + *v12;
        v12 = (float *)((char *)v12 + v13);
        --v11;
      }
      while (v11);
    }
  }
  return a1[2] / v5;
}

float *dlib::blas_bindings::matrix_assign_blas<float,0l,0l,dlib::memory_manager_stateless_kernel_1<char>,dlib::row_major_layout,dlib::matrix_multiply_exp<dlib::matrix<float,0l,0l,dlib::memory_manager_stateless_kernel_1<char>,dlib::row_major_layout>,dlib::matrix_subtract_exp<dlib::matrix<float,0l,0l,dlib::memory_manager_stateless_kernel_1<char>,dlib::row_major_layout>,dlib::matrix<float,0l,0l,dlib::memory_manager_stateless_kernel_1<char>,dlib::row_major_layout>>>>(uint64_t a1, _QWORD *a2)
{
  _QWORD *v4;
  float *result;
  __int128 v6;
  float *v7;
  __int128 v8;

  if (*a2 != a1)
  {
    v4 = (_QWORD *)a2[1];
    if (*v4 != a1 && v4[1] != a1)
      return (float *)dlib::blas_bindings::matrix_assign_blas_helper<dlib::matrix<float,0l,0l,dlib::memory_manager_stateless_kernel_1<char>,dlib::row_major_layout>,dlib::matrix_multiply_exp<dlib::matrix<float,0l,0l,dlib::memory_manager_stateless_kernel_1<char>,dlib::row_major_layout>,dlib::matrix_subtract_exp<dlib::matrix<float,0l,0l,dlib::memory_manager_stateless_kernel_1<char>,dlib::row_major_layout>,dlib::matrix<float,0l,0l,dlib::memory_manager_stateless_kernel_1<char>,dlib::row_major_layout>>>,void>::assign<dlib::matrix<float,0l,0l,dlib::memory_manager_stateless_kernel_1<char>,dlib::row_major_layout>,dlib::matrix_subtract_exp<dlib::matrix<float,0l,0l,dlib::memory_manager_stateless_kernel_1<char>,dlib::row_major_layout>,dlib::matrix<float,0l,0l,dlib::memory_manager_stateless_kernel_1<char>,dlib::row_major_layout>>>((float **)a1, (uint64_t)a2, 0, 0, 1.0);
  }
  dlib::matrix<float,0l,0l,dlib::memory_manager_stateless_kernel_1<char>,dlib::row_major_layout>::matrix((uint64_t *)&v7, *(_QWORD *)(a1 + 8), *(_QWORD *)(a1 + 16));
  dlib::blas_bindings::matrix_assign_blas_helper<dlib::matrix<float,0l,0l,dlib::memory_manager_stateless_kernel_1<char>,dlib::row_major_layout>,dlib::matrix_multiply_exp<dlib::matrix<float,0l,0l,dlib::memory_manager_stateless_kernel_1<char>,dlib::row_major_layout>,dlib::matrix_subtract_exp<dlib::matrix<float,0l,0l,dlib::memory_manager_stateless_kernel_1<char>,dlib::row_major_layout>,dlib::matrix<float,0l,0l,dlib::memory_manager_stateless_kernel_1<char>,dlib::row_major_layout>>>,void>::assign<dlib::matrix<float,0l,0l,dlib::memory_manager_stateless_kernel_1<char>,dlib::row_major_layout>,dlib::matrix_subtract_exp<dlib::matrix<float,0l,0l,dlib::memory_manager_stateless_kernel_1<char>,dlib::row_major_layout>,dlib::matrix<float,0l,0l,dlib::memory_manager_stateless_kernel_1<char>,dlib::row_major_layout>>>(&v7, (uint64_t)a2, 0, 0, 1.0);
  result = *(float **)a1;
  *(_QWORD *)a1 = v7;
  v7 = result;
  v6 = *(_OWORD *)(a1 + 8);
  *(_OWORD *)(a1 + 8) = v8;
  v8 = v6;
  if (result)
    return (float *)MEMORY[0x1BCCA128C](result, 0x1000C8052888210);
  return result;
}

void sub_1B6CEDFA4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9)
{
  if (a9)
    MEMORY[0x1BCCA128C](a9, 0x1000C8052888210);
  _Unwind_Resume(exception_object);
}

uint64_t dlib::blas_bindings::matrix_assign_blas_helper<dlib::matrix<float,0l,0l,dlib::memory_manager_stateless_kernel_1<char>,dlib::row_major_layout>,dlib::matrix_multiply_exp<dlib::matrix<float,0l,0l,dlib::memory_manager_stateless_kernel_1<char>,dlib::row_major_layout>,dlib::matrix_subtract_exp<dlib::matrix<float,0l,0l,dlib::memory_manager_stateless_kernel_1<char>,dlib::row_major_layout>,dlib::matrix<float,0l,0l,dlib::memory_manager_stateless_kernel_1<char>,dlib::row_major_layout>>>,void>::assign<dlib::matrix<float,0l,0l,dlib::memory_manager_stateless_kernel_1<char>,dlib::row_major_layout>,dlib::matrix_subtract_exp<dlib::matrix<float,0l,0l,dlib::memory_manager_stateless_kernel_1<char>,dlib::row_major_layout>,dlib::matrix<float,0l,0l,dlib::memory_manager_stateless_kernel_1<char>,dlib::row_major_layout>>>(float **a1, uint64_t a2, int a3, char a4, float a5)
{
  uint64_t v9;
  uint64_t v10;
  float *v11;
  uint64_t *v12;
  uint64_t result;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  size_t v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t v20;
  float *v21;
  uint64_t *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  float *v26;
  float *v27;
  uint64_t v28;
  uint64_t v29;
  float *v30;
  float *v31;
  uint64_t v32;
  float v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  float *v37;
  float *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  float *v42;
  float *v43;
  uint64_t v44;
  uint64_t v45;
  float *v46;
  float *v47;
  uint64_t v48;
  float v49;
  uint64_t *v50;
  void *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t *v54;

  if (a5 == 1.0)
  {
    if ((a3 & 1) == 0)
    {
      v9 = (uint64_t)a1[1];
      if (v9 >= 1)
      {
        v10 = (uint64_t)a1[2];
        v11 = *a1;
        do
        {
          if (v10 >= 1)
            bzero(v11, 4 * v10);
          v11 += v10;
          --v9;
        }
        while (v9);
      }
    }
    if ((a4 & 1) != 0)
    {
      v12 = *(uint64_t **)a2;
      v51 = *(void **)(a2 + 8);
      v54 = v12;
      return dlib::default_matrix_multiply<dlib::matrix<float,0l,0l,dlib::memory_manager_stateless_kernel_1<char>,dlib::row_major_layout>,dlib::matrix_op<dlib::op_trans<dlib::matrix_subtract_exp<dlib::matrix<float,0l,0l,dlib::memory_manager_stateless_kernel_1<char>,dlib::row_major_layout>,dlib::matrix<float,0l,0l,dlib::memory_manager_stateless_kernel_1<char>,dlib::row_major_layout>>>>,dlib::matrix_op<dlib::op_trans<dlib::matrix<float,0l,0l,dlib::memory_manager_stateless_kernel_1<char>,dlib::row_major_layout>>>>((uint64_t)a1, (uint64_t ***)&v51, &v54);
    }
    else
    {
      return dlib::default_matrix_multiply<dlib::matrix<float,0l,0l,dlib::memory_manager_stateless_kernel_1<char>,dlib::row_major_layout>,dlib::matrix<float,0l,0l,dlib::memory_manager_stateless_kernel_1<char>,dlib::row_major_layout>,dlib::matrix_subtract_exp<dlib::matrix<float,0l,0l,dlib::memory_manager_stateless_kernel_1<char>,dlib::row_major_layout>,dlib::matrix<float,0l,0l,dlib::memory_manager_stateless_kernel_1<char>,dlib::row_major_layout>>>((uint64_t)a1, *(uint64_t **)a2, *(uint64_t ***)(a2 + 8));
    }
  }
  else if (a3)
  {
    dlib::matrix<float,0l,0l,dlib::memory_manager_stateless_kernel_1<char>,dlib::row_major_layout>::matrix((uint64_t *)&v51, (uint64_t)a1[1], (uint64_t)a1[2]);
    v14 = v52;
    if (v52 >= 1)
    {
      v15 = v53;
      v16 = (char *)v51;
      v17 = 4 * v53;
      do
      {
        if (v15 >= 1)
          bzero(v16, v17);
        v16 += v17;
        --v14;
      }
      while (v14);
    }
    if ((a4 & 1) != 0)
    {
      v18 = *(uint64_t **)a2;
      v54 = *(uint64_t **)(a2 + 8);
      v50 = v18;
      dlib::default_matrix_multiply<dlib::matrix<float,0l,0l,dlib::memory_manager_stateless_kernel_1<char>,dlib::row_major_layout>,dlib::matrix_op<dlib::op_trans<dlib::matrix_subtract_exp<dlib::matrix<float,0l,0l,dlib::memory_manager_stateless_kernel_1<char>,dlib::row_major_layout>,dlib::matrix<float,0l,0l,dlib::memory_manager_stateless_kernel_1<char>,dlib::row_major_layout>>>>,dlib::matrix_op<dlib::op_trans<dlib::matrix<float,0l,0l,dlib::memory_manager_stateless_kernel_1<char>,dlib::row_major_layout>>>>((uint64_t)&v51, (uint64_t ***)&v54, &v50);
    }
    else
    {
      dlib::default_matrix_multiply<dlib::matrix<float,0l,0l,dlib::memory_manager_stateless_kernel_1<char>,dlib::row_major_layout>,dlib::matrix<float,0l,0l,dlib::memory_manager_stateless_kernel_1<char>,dlib::row_major_layout>,dlib::matrix_subtract_exp<dlib::matrix<float,0l,0l,dlib::memory_manager_stateless_kernel_1<char>,dlib::row_major_layout>,dlib::matrix<float,0l,0l,dlib::memory_manager_stateless_kernel_1<char>,dlib::row_major_layout>>>((uint64_t)&v51, *(uint64_t **)a2, *(uint64_t ***)(a2 + 8));
    }
    v23 = v52;
    if (a5 == -1.0)
    {
      if (v52 >= 1)
      {
        v24 = 0;
        v25 = v53;
        v26 = (float *)v51;
        v27 = *a1;
        v28 = 4 * (_QWORD)a1[2];
        v29 = 4 * v53;
        do
        {
          v30 = v26;
          v31 = v27;
          v32 = v25;
          if (v25 >= 1)
          {
            do
            {
              v33 = *v30++;
              *v31 = *v31 - v33;
              ++v31;
              --v32;
            }
            while (v32);
          }
          ++v24;
          v27 = (float *)((char *)v27 + v28);
          v26 = (float *)((char *)v26 + v29);
        }
        while (v24 != v23);
      }
    }
    else if (v52 >= 1)
    {
      v40 = 0;
      v41 = v53;
      v42 = (float *)v51;
      v43 = *a1;
      v44 = 4 * (_QWORD)a1[2];
      v45 = 4 * v53;
      do
      {
        v46 = v42;
        v47 = v43;
        v48 = v41;
        if (v41 >= 1)
        {
          do
          {
            v49 = *v46++;
            *v47 = *v47 + (float)(a5 * v49);
            ++v47;
            --v48;
          }
          while (v48);
        }
        ++v40;
        v43 = (float *)((char *)v43 + v44);
        v42 = (float *)((char *)v42 + v45);
      }
      while (v40 != v23);
    }
    result = (uint64_t)v51;
    if (v51)
      return MEMORY[0x1BCCA128C](v51, 0x1000C8052888210);
  }
  else
  {
    v19 = (uint64_t)a1[1];
    if (v19 >= 1)
    {
      v20 = (uint64_t)a1[2];
      v21 = *a1;
      do
      {
        if (v20 >= 1)
          bzero(v21, 4 * v20);
        v21 += v20;
        --v19;
      }
      while (v19);
    }
    if ((a4 & 1) != 0)
    {
      v22 = *(uint64_t **)a2;
      v51 = *(void **)(a2 + 8);
      v54 = v22;
      result = dlib::default_matrix_multiply<dlib::matrix<float,0l,0l,dlib::memory_manager_stateless_kernel_1<char>,dlib::row_major_layout>,dlib::matrix_op<dlib::op_trans<dlib::matrix_subtract_exp<dlib::matrix<float,0l,0l,dlib::memory_manager_stateless_kernel_1<char>,dlib::row_major_layout>,dlib::matrix<float,0l,0l,dlib::memory_manager_stateless_kernel_1<char>,dlib::row_major_layout>>>>,dlib::matrix_op<dlib::op_trans<dlib::matrix<float,0l,0l,dlib::memory_manager_stateless_kernel_1<char>,dlib::row_major_layout>>>>((uint64_t)a1, (uint64_t ***)&v51, &v54);
    }
    else
    {
      result = dlib::default_matrix_multiply<dlib::matrix<float,0l,0l,dlib::memory_manager_stateless_kernel_1<char>,dlib::row_major_layout>,dlib::matrix<float,0l,0l,dlib::memory_manager_stateless_kernel_1<char>,dlib::row_major_layout>,dlib::matrix_subtract_exp<dlib::matrix<float,0l,0l,dlib::memory_manager_stateless_kernel_1<char>,dlib::row_major_layout>,dlib::matrix<float,0l,0l,dlib::memory_manager_stateless_kernel_1<char>,dlib::row_major_layout>>>((uint64_t)a1, *(uint64_t **)a2, *(uint64_t ***)(a2 + 8));
    }
    v34 = (uint64_t)a1[1];
    if (v34 >= 1)
    {
      v35 = 0;
      v36 = (uint64_t)a1[2];
      v37 = *a1;
      do
      {
        v38 = v37;
        v39 = v36;
        if (v36 >= 1)
        {
          do
          {
            *v38 = *v38 * a5;
            ++v38;
            --v39;
          }
          while (v39);
        }
        ++v35;
        v37 += v36;
      }
      while (v35 != v34);
    }
  }
  return result;
}

void sub_1B6CEE2DC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a10)
    MEMORY[0x1BCCA128C](a10, 0x1000C8052888210);
  _Unwind_Resume(exception_object);
}

uint64_t dlib::default_matrix_multiply<dlib::matrix<float,0l,0l,dlib::memory_manager_stateless_kernel_1<char>,dlib::row_major_layout>,dlib::matrix<float,0l,0l,dlib::memory_manager_stateless_kernel_1<char>,dlib::row_major_layout>,dlib::matrix_subtract_exp<dlib::matrix<float,0l,0l,dlib::memory_manager_stateless_kernel_1<char>,dlib::row_major_layout>,dlib::matrix<float,0l,0l,dlib::memory_manager_stateless_kernel_1<char>,dlib::row_major_layout>>>(uint64_t result, uint64_t *a2, uint64_t **a3)
{
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  float *v18;
  float v19;
  uint64_t v20;
  float *v21;
  uint64_t v22;
  float *v23;
  float *v24;
  uint64_t v25;
  float v26;
  uint64_t i;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  float v45;
  uint64_t v46;
  uint64_t v47;
  BOOL v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;

  v3 = a2[2];
  if (v3 >= 3
    && (v4 = *a3, v53 = (*a3)[2], v53 >= 3)
    && (v49 = a2[1], v49 >= 3)
    && (v5 = v4[1], v5 >= 3)
    && (v49 * v3 > 900 || v5 * v53 >= 901))
  {
    v52 = 0;
    for (i = 0; i < v49; i += 90)
    {
      v28 = 0;
      v29 = 0;
      v30 = 0;
      if (v49 - 1 >= i + 89)
        v31 = i + 89;
      else
        v31 = v49 - 1;
      do
      {
        v32 = 0;
        v33 = 0;
        v50 = v30 + 90;
        v51 = v29;
        if (v3 - 1 >= v30 + 89)
          v34 = v30 + 89;
        else
          v34 = v3 - 1;
        do
        {
          if (v53 - 1 >= v33 + 89)
            v35 = v33 + 89;
          else
            v35 = v53 - 1;
          if (i <= v31)
          {
            v36 = v52;
            v37 = *a2;
            v38 = i;
            do
            {
              if (v30 <= v34)
              {
                v39 = a3[1];
                v40 = *(_QWORD *)result + v32 + *(_QWORD *)(result + 16) * v36;
                v41 = v28;
                v42 = v29;
                v43 = v30;
                do
                {
                  if (v33 <= v35)
                  {
                    v44 = 0;
                    v45 = *(float *)(v37 + 4 * (v43 + v38 * v3));
                    v46 = *v4 + v42;
                    v47 = *v39 + v32 + v39[2] * v41;
                    do
                    {
                      *(float *)(v40 + 4 * v44) = *(float *)(v40 + 4 * v44)
                                                + (float)((float)(*(float *)(v46 + 4 * v44) - *(float *)(v47 + 4 * v44))
                                                        * v45);
                      ++v44;
                    }
                    while (v33 + v44 - 1 < v35);
                  }
                  v42 += 4 * v53;
                  v41 += 4;
                  v48 = v43++ < v34;
                }
                while (v48);
              }
              v36 += 4;
              v48 = v38++ < v31;
            }
            while (v48);
          }
          v33 += 90;
          v29 += 360;
          v32 += 360;
        }
        while (v33 < v53);
        v30 += 90;
        v29 = v51 + 360 * v53;
        v28 += 360;
      }
      while (v50 < v3);
      v52 += 360;
    }
  }
  else
  {
    v6 = a2[1];
    if (v6 >= 1)
    {
      v7 = 0;
      v8 = *a3;
      v9 = a3[1];
      v10 = (*a3)[2];
      v11 = *(_QWORD *)result;
      v12 = *(_QWORD *)(result + 16);
      v13 = *a2;
      result = 4 * v10;
      v14 = *a2 + 4;
      do
      {
        if (v10 >= 1)
        {
          v15 = 0;
          v16 = *v8;
          v17 = *v9;
          v18 = (float *)(*v8 + result);
          do
          {
            v19 = *(float *)(v13 + 4 * v7 * v3) * (float)(*(float *)(v16 + 4 * v15) - *(float *)(v17 + 4 * v15));
            if (v3 >= 2)
            {
              v20 = v9[2];
              v21 = (float *)(v17 + 4 * (v20 + v15));
              v22 = 4 * v20;
              v23 = (float *)v14;
              v24 = v18;
              v25 = v3 - 1;
              do
              {
                v26 = *v23++;
                v19 = v19 + (float)(v26 * (float)(*v24 - *v21));
                v21 = (float *)((char *)v21 + v22);
                v24 = (float *)((char *)v24 + result);
                --v25;
              }
              while (v25);
            }
            *(float *)(v11 + 4 * (v15 + v7 * v12)) = v19 + *(float *)(v11 + 4 * (v15 + v7 * v12));
            ++v15;
            ++v18;
          }
          while (v15 != v10);
        }
        ++v7;
        v14 += 4 * v3;
      }
      while (v7 != v6);
    }
  }
  return result;
}

uint64_t dlib::default_matrix_multiply<dlib::matrix<float,0l,0l,dlib::memory_manager_stateless_kernel_1<char>,dlib::row_major_layout>,dlib::matrix_op<dlib::op_trans<dlib::matrix_subtract_exp<dlib::matrix<float,0l,0l,dlib::memory_manager_stateless_kernel_1<char>,dlib::row_major_layout>,dlib::matrix<float,0l,0l,dlib::memory_manager_stateless_kernel_1<char>,dlib::row_major_layout>>>>,dlib::matrix_op<dlib::op_trans<dlib::matrix<float,0l,0l,dlib::memory_manager_stateless_kernel_1<char>,dlib::row_major_layout>>>>(uint64_t result, uint64_t ***a2, uint64_t **a3)
{
  uint64_t **v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  float *v24;
  float v25;
  uint64_t v26;
  float *v27;
  uint64_t v28;
  float *v29;
  float *v30;
  uint64_t v31;
  float v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  float v53;
  float *v54;
  uint64_t v55;
  BOOL v56;
  uint64_t v57;
  uint64_t v58;

  v3 = *a2;
  v4 = **a2;
  v5 = v4[1];
  if (v5 >= 3
    && (v6 = *a3, v7 = (*a3)[1], v7 >= 3)
    && (v8 = v4[2], v8 >= 3)
    && (v9 = v6[2], v9 >= 3)
    && (v8 * v5 > 900 || v9 * v7 >= 901))
  {
    v33 = 0;
    v34 = 0;
    v57 = v4[1];
    v35 = 360 * v9;
    v36 = 4 * v9;
    do
    {
      v37 = 0;
      v38 = 0;
      if (v8 - 1 >= v34 + 89)
        v39 = v34 + 89;
      else
        v39 = v8 - 1;
      do
      {
        v40 = 0;
        v58 = v38 + 90;
        if (v5 - 1 >= v38 + 89)
          v41 = v38 + 89;
        else
          v41 = v5 - 1;
        v42 = v37;
        do
        {
          if (v7 - 1 >= v40 + 89)
            v43 = v40 + 89;
          else
            v43 = v7 - 1;
          if (v34 <= v39)
          {
            v44 = v33;
            v45 = v34;
            do
            {
              if (v38 <= v41)
              {
                v46 = *v4;
                v47 = v3[1];
                v48 = *v47;
                v49 = v47[2];
                v50 = *(_QWORD *)result + *(_QWORD *)(result + 16) * v44;
                v51 = v42;
                v52 = v38;
                do
                {
                  if (v40 <= v43)
                  {
                    v53 = *(float *)(v46 + 4 * (v45 + v52 * v8)) - *(float *)(v48 + 4 * (v45 + v49 * v52));
                    v54 = (float *)(*v6 + v51);
                    v55 = v40;
                    do
                    {
                      *(float *)(v50 + 4 * v55) = *(float *)(v50 + 4 * v55) + (float)(*v54 * v53);
                      v54 = (float *)((char *)v54 + v36);
                      v56 = v55++ < v43;
                    }
                    while (v56);
                  }
                  v51 += 4;
                  v56 = v52++ < v41;
                }
                while (v56);
              }
              v44 += 4;
              v56 = v45++ < v39;
            }
            while (v56);
          }
          v40 += 90;
          v42 += v35;
        }
        while (v40 < v7);
        v37 += 360;
        v38 += 90;
      }
      while (v58 < v57);
      v34 += 90;
      v33 += 360;
    }
    while (v34 < v8);
  }
  else
  {
    v10 = v4[2];
    if (v10 >= 1)
    {
      v11 = 0;
      v12 = *a3;
      v13 = (*a3)[1];
      v14 = *(_QWORD *)result;
      v15 = *(_QWORD *)(result + 16);
      result = 4 * v10;
      v16 = 4 * v10;
      do
      {
        if (v13 >= 1)
        {
          v17 = 0;
          v18 = *v4;
          v19 = v3[1];
          v20 = *v19;
          v21 = *v12;
          v22 = v12[2];
          v23 = *v12 + 4;
          v24 = (float *)(*v4 + v16);
          do
          {
            v25 = (float)(*(float *)(v18 + 4 * v11) - *(float *)(v20 + 4 * v11)) * *(float *)(v21 + 4 * v17 * v22);
            if (v5 >= 2)
            {
              v26 = v19[2];
              v27 = (float *)(v20 + 4 * (v11 + v26));
              v28 = 4 * v26;
              v29 = v24;
              v30 = (float *)v23;
              v31 = v5 - 1;
              do
              {
                v32 = *v30++;
                v25 = v25 + (float)((float)(*v29 - *v27) * v32);
                v27 = (float *)((char *)v27 + v28);
                v29 = (float *)((char *)v29 + result);
                --v31;
              }
              while (v31);
            }
            *(float *)(v14 + 4 * (v17 + v11 * v15)) = v25 + *(float *)(v14 + 4 * (v17 + v11 * v15));
            ++v17;
            v23 += 4 * v22;
          }
          while (v17 != v13);
        }
        ++v11;
        v16 += 4;
      }
      while (v11 != v10);
    }
  }
  return result;
}

uint64_t dlib::eigenvalue_decomposition<dlib::matrix<float,0l,0l,dlib::memory_manager_stateless_kernel_1<char>,dlib::row_major_layout>>::eigenvalue_decomposition<dlib::matrix<float,0l,0l,dlib::memory_manager_stateless_kernel_1<char>,dlib::row_major_layout>>(uint64_t a1, float **a2)
{
  uint64_t *v3;
  uint64_t *v4;
  uint64_t *v5;
  uint64_t *v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  float *v11;
  uint64_t v12;
  float *v13;
  uint64_t v14;
  float *v15;
  uint64_t v16;
  float v17;
  float v18;
  BOOL v19;
  double v20;
  double v21;
  double v22;
  double v23;
  double v24;
  double v25;
  double v26;
  float **v28;

  *(_QWORD *)(a1 + 16) = 0;
  v3 = (uint64_t *)(a1 + 16);
  *(_QWORD *)(a1 + 24) = 0;
  *(_QWORD *)(a1 + 32) = &unk_1E6B131D0;
  *(_QWORD *)(a1 + 40) = 0;
  v4 = (uint64_t *)(a1 + 40);
  *(_QWORD *)(a1 + 64) = 0;
  v5 = (uint64_t *)(a1 + 64);
  *(_QWORD *)(a1 + 48) = 0;
  *(_QWORD *)(a1 + 56) = &unk_1E6B131D0;
  *(_QWORD *)(a1 + 72) = 0;
  *(_QWORD *)(a1 + 80) = 0;
  *(_QWORD *)(a1 + 96) = 0;
  v6 = (uint64_t *)(a1 + 96);
  *(_QWORD *)(a1 + 88) = &unk_1E6B131D0;
  *(_QWORD *)(a1 + 104) = 0;
  *(_QWORD *)(a1 + 112) = 0;
  *(_QWORD *)(a1 + 128) = 0;
  v7 = (uint64_t *)(a1 + 128);
  *(_QWORD *)(a1 + 120) = &unk_1E6B131D0;
  *(_QWORD *)(a1 + 136) = 0;
  *(_QWORD *)(a1 + 144) = &unk_1E6B131D0;
  v28 = a2;
  v8 = (uint64_t)a2[2];
  *(_QWORD *)a1 = v8;
  if (v8)
  {
    dlib::row_major_layout::layout<float,0l,0l,dlib::memory_manager_stateless_kernel_1<char>,5>::set_size((uint64_t *)(a1 + 64), v8, v8);
    v8 = *(_QWORD *)(a1 + 24);
    if (v8 != *(_QWORD *)a1)
    {
      dlib::row_major_layout::layout<float,0l,1l,dlib::memory_manager_stateless_kernel_1<char>,3>::set_size(v3, *(_QWORD *)a1);
      v8 = *(_QWORD *)a1;
    }
  }
  if (*(_QWORD *)(a1 + 48) != v8)
  {
    dlib::row_major_layout::layout<float,0l,1l,dlib::memory_manager_stateless_kernel_1<char>,3>::set_size(v4, v8);
    v8 = *(_QWORD *)a1;
  }
  *(_BYTE *)(a1 + 8) = 1;
  v9 = v8 - 1;
  if (v8 < 1)
  {
LABEL_16:
    dlib::matrix<float,0l,0l,dlib::memory_manager_stateless_kernel_1<char>,dlib::row_major_layout>::operator=<dlib::const_temp_matrix<dlib::matrix<float,0l,0l,dlib::memory_manager_stateless_kernel_1<char>,dlib::row_major_layout>>>(v5, (uint64_t)&v28);
    dlib::eigenvalue_decomposition<dlib::matrix<float,0l,0l,dlib::memory_manager_stateless_kernel_1<char>,dlib::row_major_layout>>::tred2((_QWORD *)a1);
    dlib::eigenvalue_decomposition<dlib::matrix<float,0l,0l,dlib::memory_manager_stateless_kernel_1<char>,dlib::row_major_layout>>::tql2((uint64_t *)a1);
  }
  else
  {
    v10 = 0;
    v11 = *v28;
    v12 = 4 * (_QWORD)v28[2];
    v13 = *v28;
    while (1)
    {
      v14 = 0;
      v15 = v11;
      do
      {
        v16 = v14;
        v17 = *v15;
        v18 = v13[v14];
        v19 = *v15 == v18;
        if (v9 == v14)
          break;
        ++v14;
        v15 = (float *)((char *)v15 + v12);
      }
      while (v17 == v18);
      if (++v10 == v8)
        break;
      if (v9 == v16)
      {
        v13 = (float *)((char *)v13 + v12);
        ++v11;
        if (v17 == v18)
          continue;
      }
      *(_BYTE *)(a1 + 8) = v19;
      goto LABEL_17;
    }
    *(_BYTE *)(a1 + 8) = v19;
    if (v17 == v18)
      goto LABEL_16;
LABEL_17:
    dlib::matrix<float,0l,0l,dlib::memory_manager_stateless_kernel_1<char>,dlib::row_major_layout>::operator=<dlib::const_temp_matrix<dlib::matrix<float,0l,0l,dlib::memory_manager_stateless_kernel_1<char>,dlib::row_major_layout>>>(v6, (uint64_t)&v28);
    if (*(_QWORD *)(a1 + 136) != *(_QWORD *)a1)
      dlib::row_major_layout::layout<float,0l,1l,dlib::memory_manager_stateless_kernel_1<char>,3>::set_size(v7, *(_QWORD *)a1);
    dlib::eigenvalue_decomposition<dlib::matrix<float,0l,0l,dlib::memory_manager_stateless_kernel_1<char>,dlib::row_major_layout>>::orthes((uint64_t *)a1);
    dlib::eigenvalue_decomposition<dlib::matrix<float,0l,0l,dlib::memory_manager_stateless_kernel_1<char>,dlib::row_major_layout>>::hqr2(a1, v20, v21, v22, v23, v24, v25, v26);
  }
  return a1;
}

void sub_1B6CEEABC(_Unwind_Exception *a1)
{
  uint64_t *v1;
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *v5;

  if (*v5)
    MEMORY[0x1BCCA128C](*v5, 0x1000C8052888210);
  dlib::eigenvalue_decomposition<dlib::matrix<float,0l,0l,dlib::memory_manager_stateless_kernel_1<char>,dlib::row_major_layout>>::eigenvalue_decomposition<dlib::matrix<float,0l,0l,dlib::memory_manager_stateless_kernel_1<char>,dlib::row_major_layout>>(v4, v3, v2, v1);
  _Unwind_Resume(a1);
}

uint64_t *dlib::matrix<float,0l,0l,dlib::memory_manager_stateless_kernel_1<char>,dlib::row_major_layout>::operator=<dlib::const_temp_matrix<dlib::matrix<float,0l,0l,dlib::memory_manager_stateless_kernel_1<char>,dlib::row_major_layout>>>(uint64_t *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v4 = *(_QWORD *)a2;
  v5 = *(_QWORD *)(*(_QWORD *)a2 + 8);
  if (a1[1] == v5)
  {
    v6 = *(_QWORD *)(v4 + 16);
    if (a1[2] == v6)
      goto LABEL_6;
  }
  else
  {
    v6 = *(_QWORD *)(v4 + 16);
  }
  dlib::row_major_layout::layout<float,0l,0l,dlib::memory_manager_stateless_kernel_1<char>,5>::set_size(a1, v5, v6);
LABEL_6:
  dlib::matrix_assign_big<dlib::matrix<float,0l,0l,dlib::memory_manager_stateless_kernel_1<char>,dlib::row_major_layout>,dlib::const_temp_matrix<dlib::matrix<float,0l,0l,dlib::memory_manager_stateless_kernel_1<char>,dlib::row_major_layout>>>(a1, a2);
  return a1;
}

_QWORD *dlib::eigenvalue_decomposition<dlib::matrix<float,0l,0l,dlib::memory_manager_stateless_kernel_1<char>,dlib::row_major_layout>>::tred2(_QWORD *result)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  float *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  float v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _DWORD *v22;
  uint64_t v23;
  float v24;
  uint64_t v25;
  float v26;
  float v27;
  uint64_t v28;
  float v29;
  float v30;
  float *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  float *v35;
  float v36;
  float v37;
  float *v38;
  uint64_t i;
  uint64_t v40;
  float v41;
  float v42;
  uint64_t v43;
  float v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  float *v50;
  float *v51;
  float *v52;
  float *v53;
  uint64_t v54;
  float v55;
  float v56;
  float *v57;
  float *v58;
  float *v59;
  uint64_t v60;
  float v61;
  float v62;
  float v63;
  uint64_t v64;
  float *v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  float *v70;
  uint64_t v71;
  uint64_t v72;
  float v73;
  uint64_t v74;
  float *v75;
  uint64_t v76;
  float *v77;
  uint64_t v78;
  float v79;
  uint64_t v80;
  uint64_t v81;
  float v82;
  float *v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  _DWORD *v87;
  _DWORD *v88;
  uint64_t v89;
  uint64_t v90;

  v1 = result;
  v2 = *result;
  v3 = *result - 1;
  if ((uint64_t)*result >= 1)
  {
    v4 = 0;
    v5 = result[2];
    v6 = result[8] + 4 * result[10] * v3;
    do
    {
      *(_DWORD *)(v5 + 4 * v4) = *(_DWORD *)(v6 + 4 * v4);
      ++v4;
    }
    while (v2 != v4);
    if (v2 > 1)
    {
      v7 = 0;
      v8 = (float *)result[2];
      v9 = 4 * v2 - 4;
      v10 = 4 * v2 - 8;
      v11 = v9;
      v12 = v3;
      v13 = v2;
      v89 = v3;
      do
      {
        v14 = 0;
        v15 = v13--;
        v16 = 0.0;
        do
          v16 = v16 + fabsf(v8[v14++]);
        while (v12 != v14);
        if (v16 == 0.0)
        {
          v17 = 0;
          *(float *)(v1[5] + 4 * v13) = v8[v15 - 2];
          v18 = v1[8];
          v19 = v1[10];
          v20 = v18 + v19 * v10;
          v21 = v18 + v19 * v11;
          v22 = (_DWORD *)(v18 + v11);
          v23 = 4 * v19;
          do
          {
            v8[v17] = *(float *)(v20 + 4 * v17);
            *(_DWORD *)(v21 + 4 * v17) = 0;
            *v22 = 0;
            ++v17;
            v22 = (_DWORD *)((char *)v22 + v23);
          }
          while (v12 != v17);
          v24 = 0.0;
        }
        else
        {
          v90 = v10;
          v25 = 0;
          v26 = 0.0;
          do
          {
            v27 = v8[v25] / v16;
            v8[v25] = v27;
            v26 = v26 + (float)(v27 * v27);
            ++v25;
          }
          while (v12 != v25);
          v28 = v15 - 2;
          v29 = v8[v15 - 2];
          v30 = sqrtf(v26);
          if (v29 > 0.0)
            v30 = -v30;
          v31 = (float *)v1[5];
          v31[v13] = v16 * v30;
          v24 = v26 - (float)(v29 * v30);
          v8[v28] = v29 - v30;
          bzero(v31, v9 - 4 * v7);
          v32 = 0;
          v33 = v1[8];
          v34 = v1[10];
          v35 = (float *)(v33 + 4 * v34);
          do
          {
            v36 = v8[v32];
            *(float *)(v33 + 4 * (v34 * v32 + v13)) = v36;
            v37 = v31[v32] + (float)(*(float *)(v33 + 4 * (v34 * v32 + v32)) * v36);
            v38 = v35;
            for (i = v32; i < v28; v38 += v34)
            {
              v37 = v37 + (float)(*v38 * v8[i + 1]);
              v31[i + 1] = v31[i + 1] + (float)(*v38 * v36);
              ++i;
            }
            v31[v32] = v37;
            v35 += v34 + 1;
            ++v32;
          }
          while (v32 != v12);
          v40 = 0;
          v41 = 0.0;
          do
          {
            v42 = v31[v40] / v24;
            v31[v40] = v42;
            v41 = v41 + (float)(v42 * v8[v40++]);
          }
          while (v12 != v40);
          v43 = 0;
          v44 = (float)-v41 / (float)(v24 + v24);
          do
          {
            v31[v43] = v31[v43] + (float)(v44 * v8[v43]);
            ++v43;
          }
          while (v12 != v43);
          v45 = 0;
          v46 = v1[10];
          v47 = v46 * v28;
          v48 = v46 * v13;
          v49 = 4 * v46;
          v50 = (float *)v1[8];
          v51 = v50;
          v52 = v8;
          v53 = v31;
          v54 = v12;
          do
          {
            if (v45 <= v28)
            {
              v55 = v8[v45];
              v56 = v31[v45];
              v57 = v51;
              v58 = v52;
              v59 = v53;
              v60 = v54;
              do
              {
                v61 = *v59++;
                v62 = v61;
                v63 = *v58++;
                *v57 = *v57 - (float)((float)(v56 * v63) + (float)(v55 * v62));
                v57 = (float *)((char *)v57 + v49);
                --v60;
              }
              while (v60);
            }
            v8[v45] = v50[v47 + v45];
            v50[v48 + v45++] = 0.0;
            --v54;
            ++v53;
            ++v52;
            v51 = (float *)((char *)v51 + v49 + 4);
          }
          while (v45 != v12);
          v9 = 4 * v2 - 4;
          v3 = v89;
          v10 = v90;
        }
        v8[v13] = v24;
        --v12;
        ++v7;
        v10 -= 4;
        v11 -= 4;
      }
      while (v7 != v3);
      v64 = 0;
      v65 = (float *)v1[8];
      v66 = v1[10];
      v67 = v66 + 1;
      v68 = v66 * v3;
      v69 = v1[2];
      v70 = v65 + 1;
      v71 = 4 * v66;
      v72 = 1;
      do
      {
        v65[v68 + v64] = v65[v67 * v64];
        v65[v67 * v64++] = 1.0;
        v73 = *(float *)(v69 + 4 * v64);
        if (v73 != 0.0)
        {
          v74 = 0;
          v75 = v70;
          do
          {
            *(float *)(v69 + 4 * v74++) = *v75 / v73;
            v75 = (float *)((char *)v75 + v71);
          }
          while (v72 != v74);
          v76 = 0;
          v77 = v65;
          do
          {
            v78 = 0;
            v79 = 0.0;
            v80 = v72;
            do
            {
              v79 = v79 + (float)(*(float *)((char *)v70 + v78) * *(float *)((char *)v77 + v78));
              v78 += v71;
              --v80;
            }
            while (v80);
            v81 = 0;
            v82 = -v79;
            v83 = v77;
            do
            {
              *v83 = *v83 + (float)(v82 * *(float *)(v69 + 4 * v81++));
              v83 = (float *)((char *)v83 + v71);
            }
            while (v72 != v81);
            ++v76;
            ++v77;
          }
          while (v76 != v72);
        }
        v84 = 0;
        result = (_QWORD *)v72;
        do
        {
          *(float *)((char *)v70 + v84) = 0.0;
          v84 += v71;
          result = (_QWORD *)((char *)result - 1);
        }
        while (result);
        ++v72;
        ++v70;
      }
      while (v64 != v3);
    }
  }
  v85 = v1[8];
  v86 = v1[10];
  if (v2 >= 1)
  {
    v87 = (_DWORD *)v1[2];
    v88 = (_DWORD *)(v85 + 4 * v3 * v86);
    do
    {
      *v87++ = *v88;
      *v88++ = 0;
      --v2;
    }
    while (v2);
  }
  *(_DWORD *)(v85 + 4 * (v3 + v3 * v86)) = 1065353216;
  *(_DWORD *)v1[5] = 0;
  return result;
}

void dlib::eigenvalue_decomposition<dlib::matrix<float,0l,0l,dlib::memory_manager_stateless_kernel_1<char>,dlib::row_major_layout>>::tql2(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  float v5;
  uint64_t v6;
  float v7;
  uint64_t v8;
  uint64_t v9;
  float v10;
  float v11;
  float v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  float v16;
  float v17;
  float v18;
  float v19;
  float *v20;
  uint64_t v21;
  float v22;
  float v23;
  float v24;
  float *v25;
  uint64_t v26;
  float v27;
  float v28;
  float v29;
  float v30;
  uint64_t v31;
  float v32;
  float v33;
  float v34;
  float v35;
  float v36;
  float v37;
  float *v38;
  uint64_t v39;
  float v40;
  float v41;
  float v42;
  float v44;
  uint64_t v45;
  uint64_t v46;
  float v47;
  float *v48;
  uint64_t v49;
  float v50;
  float v51;
  float v52;

  v1 = *a1;
  v2 = a1[5];
  v49 = *a1 - 2;
  if (*a1 < 2)
  {
    *(_DWORD *)(v2 + 4 * v1 - 4) = 0;
    if (v1 != 1)
      return;
  }
  else
  {
    memmove((void *)v2, (const void *)(v2 + 4), 4 * v1 - 4);
    *(_DWORD *)(v2 + 4 * v1 - 4) = 0;
  }
  v3 = 0;
  v4 = a1[2];
  v48 = (float *)(v4 + 8);
  v5 = 0.0;
  v6 = 1;
  v7 = 0.0;
  do
  {
    v8 = v3;
    if (v1 <= v6)
      v9 = v6;
    else
      v9 = v1;
    v10 = *(float *)(v4 + 4 * v3);
    v11 = *(float *)(v2 + 4 * v3);
    v12 = fabsf(v10) + fabsf(v11);
    if (v7 < v12)
      v7 = v12;
    v13 = v3;
    while (fabsf(*(float *)(v2 + 4 * v13)) > (float)(v7 * 0.00000011921))
    {
      if (++v13 >= v1)
      {
        v13 = v9;
        break;
      }
    }
    v14 = v13 - (v13 == v1);
    ++v3;
    v45 = v6;
    v44 = v7;
    if (v14 > v8)
    {
      v46 = a1[8] + 4 * v14;
      v15 = 4 * a1[10];
      v47 = v7 * 0.00000011921;
      do
      {
        v52 = v5;
        v16 = (float)(*(float *)(v4 + 4 * v3) - v10) / (v11 + v11);
        v17 = hypotf(v16, 1.0);
        if (v16 < 0.0)
          v17 = -v17;
        v18 = v17 + v16;
        *(float *)(v4 + 4 * v8) = v11 / v18;
        v51 = *(float *)(v2 + 4 * v8) * v18;
        *(float *)(v4 + 4 * v3) = v51;
        v19 = v10 - (float)(v11 / v18);
        v20 = v48;
        v21 = v49;
        if (v8 + 2 < v1)
        {
          do
          {
            *v20 = *v20 - v19;
            ++v20;
            --v21;
          }
          while (v21);
        }
        v22 = *(float *)(v4 + 4 * v14);
        v50 = *(float *)(v2 + 4 * v3);
        v23 = 1.0;
        v24 = 0.0;
        v25 = (float *)v46;
        v26 = v14;
        v27 = 1.0;
        do
        {
          v28 = v27;
          v29 = v23;
          v30 = v24;
          v31 = v26--;
          v32 = *(float *)(v2 + 4 * v26);
          v33 = v27 * v32;
          v34 = v22 * v27;
          v35 = hypotf(v22, v32);
          *(float *)(v2 + 4 * v31) = v30 * v35;
          v24 = v32 / v35;
          v27 = v22 / v35;
          v36 = *(float *)(v4 + 4 * v26);
          v37 = -v24;
          v22 = (float)(v27 * v36) - (float)(v24 * v33);
          *(float *)(v4 + 4 * v31) = v34 + (float)(v24 * (float)((float)(v24 * v36) + (float)(v27 * v33)));
          v38 = v25;
          v39 = v1;
          do
          {
            v40 = *(v38 - 1);
            v41 = (float)(v27 * *v38) + (float)(v24 * v40);
            *(v38 - 1) = (float)(*v38 * v37) + (float)(v27 * v40);
            *v38 = v41;
            v38 = (float *)((char *)v38 + v15);
            --v39;
          }
          while (v39);
          --v25;
          v23 = v28;
        }
        while (v26 > v8);
        v5 = v52 + v19;
        v42 = (float)((float)(v50 * (float)(v29 * (float)(v30 * v37))) * *(float *)(v2 + 4 * v8)) / v51;
        *(float *)(v2 + 4 * v8) = v24 * v42;
        v10 = v27 * v42;
        *(float *)(v4 + 4 * v8) = v27 * v42;
        v11 = *(float *)(v2 + 4 * v8);
      }
      while (fabsf(v11) > v47);
    }
    *(float *)(v4 + 4 * v8) = v5 + v10;
    *(_DWORD *)(v2 + 4 * v8) = 0;
    v6 = v45 + 1;
    ++v48;
    --v49;
    v7 = v44;
  }
  while (v3 != v1);
}

uint64_t *dlib::eigenvalue_decomposition<dlib::matrix<float,0l,0l,dlib::memory_manager_stateless_kernel_1<char>,dlib::row_major_layout>>::orthes(uint64_t *result)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  float *v9;
  uint64_t v10;
  float v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  float *v15;
  uint64_t v16;
  uint64_t v17;
  float v18;
  uint64_t v19;
  float v20;
  float v21;
  float v22;
  float v23;
  uint64_t v24;
  uint64_t v25;
  float *v26;
  uint64_t v27;
  float *v28;
  uint64_t v29;
  uint64_t v30;
  float v31;
  float *v32;
  uint64_t v33;
  float *v34;
  uint64_t v35;
  float v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  float v41;
  uint64_t v42;
  uint64_t v43;
  float v44;
  uint64_t v45;
  uint64_t v46;
  uint64x2_t v47;
  int64x2_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  float *v52;
  int64x2_t v53;
  int32x2_t v54;
  float v55;
  float v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  _DWORD *v66;
  uint64_t v67;
  BOOL v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  float *v72;
  uint64_t v73;
  uint64_t v74;
  float v75;
  float *v76;
  uint64_t v77;
  uint64_t v78;
  float v79;
  uint64_t v80;

  v1 = *result;
  v2 = *result - 1;
  if (*result >= 3)
  {
    v3 = 0;
    v4 = 0;
    v5 = 4 * v2;
    v6 = 1;
    v7 = 4;
    do
    {
      if (v6 < v1)
      {
        v8 = result[14];
        v9 = (float *)(result[12] + 4 * (v4 + v8 * v6));
        v10 = 4 * v8;
        v11 = 0.0;
        v12 = v1;
        do
        {
          v11 = v11 + fabsf(*v9);
          --v12;
          v9 = (float *)((char *)v9 + v10);
        }
        while (v6 != v12);
        if (v11 != 0.0)
        {
          v13 = result[16];
          v14 = result[14];
          v15 = (float *)(result[12] + v3 + v5 * v14);
          v16 = -4 * v14;
          v17 = v13 - 4;
          v18 = 0.0;
          v19 = v1;
          do
          {
            v20 = *v15 / v11;
            *(float *)(v17 + 4 * v19) = v20;
            v18 = v18 + (float)(v20 * v20);
            --v19;
            v15 = (float *)((char *)v15 + v16);
          }
          while (v19 > v6);
          v21 = sqrtf(v18);
          v22 = *(float *)(v13 + 4 * v6);
          if (v22 > 0.0)
            v21 = -v21;
          v23 = v18 - (float)(v22 * v21);
          *(float *)(v13 + 4 * v6) = v22 - v21;
          v24 = result[12];
          v25 = result[14];
          v26 = (float *)(v24 + v7 + v5 * v25);
          v27 = -4 * v25;
          v28 = (float *)(v24 + v7 + v7 * v25);
          v29 = 4 * v25;
          v30 = v6;
          do
          {
            v31 = 0.0;
            v32 = v26;
            v33 = v1;
            do
            {
              v31 = v31 + (float)(*(float *)(v17 + 4 * v33--) * *v32);
              v32 = (float *)((char *)v32 + v27);
            }
            while (v33 > v6);
            v34 = v28;
            v35 = v6;
            v36 = (float)-v31 / v23;
            do
            {
              *v34 = *v34 + (float)(v36 * *(float *)(v13 + 4 * v35++));
              v34 = (float *)((char *)v34 + v29);
            }
            while (v1 != v35);
            ++v30;
            ++v26;
            ++v28;
          }
          while (v30 != v1);
          v37 = 0;
          v38 = result[12];
          v39 = v38 - 4;
          v40 = 4 * result[14];
          do
          {
            v41 = 0.0;
            v42 = v1;
            do
            {
              v41 = v41 + (float)(*(float *)(v17 + 4 * v42) * *(float *)(v39 + 4 * v42));
              --v42;
            }
            while (v42 > v6);
            v43 = v6;
            v44 = (float)-v41 / v23;
            do
            {
              *(float *)(v38 + 4 * v43) = *(float *)(v38 + 4 * v43) + (float)(v44 * *(float *)(v13 + 4 * v43));
              ++v43;
            }
            while (v1 != v43);
            ++v37;
            v39 += v40;
            v38 += v40;
          }
          while (v37 != v1);
          *(float *)(v13 + 4 * v6) = v11 * *(float *)(v13 + 4 * v6);
          *(float *)(result[12] + 4 * (v6 - 1 + result[14] * v6)) = v11 * v21;
        }
      }
      ++v6;
      ++v4;
      v3 += 4;
      v7 += 4;
    }
    while (v6 != v2);
  }
  if (v1 >= 1)
  {
    v45 = 0;
    v46 = v1 - 2;
    v47 = (uint64x2_t)vdupq_n_s64(v1 - 1);
    v48 = vdupq_n_s64(2uLL);
    v49 = result[8] + 4;
    v50 = 4 * result[10];
    do
    {
      v51 = 0;
      v52 = (float *)v49;
      v53 = (int64x2_t)xmmword_1B6FBCE90;
      do
      {
        v54 = vmovn_s64((int64x2_t)vcgeq_u64(v47, (uint64x2_t)v53));
        if ((v54.i8[0] & 1) != 0)
        {
          if (v45 == v51)
            v55 = 1.0;
          else
            v55 = 0.0;
          *(v52 - 1) = v55;
        }
        if ((v54.i8[4] & 1) != 0)
        {
          if (v45 - 1 == v51)
            v56 = 1.0;
          else
            v56 = 0.0;
          *v52 = v56;
        }
        v51 += 2;
        v53 = vaddq_s64(v53, v48);
        v52 += 2;
      }
      while (((v1 + 1) & 0xFFFFFFFFFFFFFFFELL) != v51);
      ++v45;
      v49 += v50;
    }
    while (v45 != v1);
    if (v1 >= 3)
    {
      v57 = result[12];
      v58 = result[14];
      v59 = 4 * v1;
      v60 = 4 * v58 * v2 + 4 * v1 + v57 - 12;
      v61 = 4 * v1 - 8;
      v62 = -1;
      v63 = -2;
      do
      {
        v64 = v46 - 1 + v58 * v46;
        if (*(float *)(v57 + 4 * v64) != 0.0)
        {
          if (v46 < v2)
          {
            v65 = result[16] + v59;
            v66 = (_DWORD *)v60;
            v67 = v62;
            do
            {
              *(_DWORD *)(v65 + 4 * v67) = *v66;
              v66 += v58;
              v68 = __CFADD__(v67++, 1);
            }
            while (!v68);
          }
          if (v46 < v1)
          {
            v69 = result[16];
            v70 = result[10];
            v71 = v69 + v59;
            v72 = (float *)(result[8] + v61 + v61 * v70);
            v73 = 4 * v70;
            v74 = v46;
            do
            {
              v75 = 0.0;
              v76 = v72;
              v77 = v63;
              do
              {
                v75 = v75 + (float)(*(float *)(v71 + 4 * v77) * *v76);
                v76 = (float *)((char *)v76 + v73);
                v68 = __CFADD__(v77++, 1);
              }
              while (!v68);
              v78 = 0;
              v79 = (float)(v75 / *(float *)(v69 + 4 * v46)) / *(float *)(v57 + 4 * v64);
              v80 = v63;
              do
              {
                *(float *)((char *)v72 + v78) = *(float *)((char *)v72 + v78) + (float)(v79 * *(float *)(v71 + 4 * v80));
                v78 += v73;
                v68 = __CFADD__(v80++, 1);
              }
              while (!v68);
              ++v74;
              ++v72;
            }
            while (v74 != v1);
          }
        }
        --v62;
        v60 += (4 * v58) ^ 0xFFFFFFFFFFFFFFFCLL;
        --v63;
        v61 -= 4;
      }
      while (v46-- > 1);
    }
  }
  return result;
}

uint64_t dlib::eigenvalue_decomposition<dlib::matrix<float,0l,0l,dlib::memory_manager_stateless_kernel_1<char>,dlib::row_major_layout>>::hqr2(uint64_t result, double a2, double a3, double a4, double a5, double a6, double a7, double a8)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  float v13;
  uint64_t v14;
  uint64_t v15;
  float *v16;
  float v17;
  uint64_t v18;
  float v19;
  float v20;
  float v21;
  float v22;
  float v23;
  uint64_t v24;
  float v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  float v33;
  uint64_t v34;
  uint64_t v35;
  float v36;
  float *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  float v41;
  float v42;
  float v43;
  uint64_t v44;
  uint64_t v45;
  float v46;
  float v47;
  float v48;
  uint64_t v49;
  float *v50;
  double v51;
  float v52;
  float v53;
  float v54;
  uint64_t v55;
  float *v56;
  uint64_t v57;
  float v58;
  uint64_t v59;
  uint64_t v60;
  float *v61;
  float v62;
  float v63;
  float v64;
  float v65;
  float v66;
  float v67;
  float v68;
  float v69;
  float v70;
  float v71;
  uint64_t v72;
  float v73;
  uint64_t v74;
  float v75;
  float v76;
  float v77;
  float v78;
  uint64_t v79;
  float *v80;
  float *v81;
  float v82;
  uint64_t v83;
  uint64_t v84;
  float v85;
  float v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  float v90;
  uint64_t v91;
  _DWORD *v92;
  char *v93;
  uint64_t v94;
  char *v95;
  char *v96;
  uint64_t v97;
  float *v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  float v103;
  float v104;
  float v105;
  uint64_t v106;
  float v107;
  float v108;
  float v109;
  float v110;
  float v111;
  uint64_t v112;
  uint64_t v113;
  float *v114;
  float v115;
  float v116;
  float v117;
  float v118;
  float *v119;
  uint64_t v120;
  uint64_t v121;
  float v122;
  float v123;
  float v124;
  float v125;
  float v126;
  _QWORD *v127;
  const std::locale::facet *v128;
  uint64_t v129;
  uint64_t v130;
  float v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  int64_t v138;
  float v139;
  float v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  int64_t v145;
  int64_t v146;
  uint64_t v147;
  float v148;
  float *v149;
  int64_t v150;
  uint64_t v151;
  float v152;
  float v153;
  float v154;
  uint64_t v155;
  float v156;
  float v157;
  float v158;
  float v159;
  float v160;
  float v161;
  BOOL v162;
  uint64_t v163;
  uint64_t v164;
  int64_t v165;
  uint64_t v166;
  uint64_t v167;
  int64_t v168;
  uint64_t v169;
  float v170;
  uint64_t v171;
  uint64_t v172;
  float v173;
  uint64_t v174;
  int64_t v175;
  float v176;
  float v177;
  float v178;
  float v179;
  BOOL v180;
  float v181;
  float v182;
  float v183;
  float v184;
  float v185;
  float v186;
  float v187;
  float v188;
  int64_t v189;
  float v190;
  float v191;
  uint64_t v192;
  uint64_t v193;
  uint64_t v194;
  int64_t v195;
  float v196;
  float v197;
  float *v198;
  int64_t v199;
  float v200;
  int64_t v201;
  float v202;
  BOOL v203;
  float v204;
  float v205;
  float v206;
  float v207;
  float v208;
  float v209;
  float v210;
  int64_t v211;
  float v212;
  uint64_t v213;
  int64_t v214;
  float v215;
  uint64_t v216;
  float v217;
  float v218;
  float v219;
  float v220;
  float v221;
  float v222;
  float v223;
  float v224;
  BOOL v225;
  float v226;
  float v227;
  float v228;
  float v229;
  float v230;
  float v231;
  float v232;
  float v233;
  float v234;
  float v235;
  float v236;
  float v237;
  BOOL v238;
  float v239;
  float v240;
  float v241;
  float v242;
  float v243;
  float v244;
  float v245;
  float v246;
  float v247;
  uint64_t v249;
  uint64_t v250;
  uint64_t v251;
  uint64_t v252;
  uint64_t v253;
  uint64_t v254;
  uint64_t v255;
  float *v256;
  float v257;
  uint64_t v258;
  float v259;
  std::locale v260;

  v8 = *(_QWORD *)result;
  v9 = *(_QWORD *)result - 1;
  if (*(uint64_t *)result < 1)
    return result;
  v10 = result;
  v11 = 0;
  v12 = *(_QWORD *)result - 1;
  v13 = 0.0;
  do
  {
    if (v11 <= 1)
      v14 = 1;
    else
      v14 = v11;
    if (v14 <= v8)
    {
      v15 = v8 + 1 - v14;
      v16 = (float *)(*(_QWORD *)(result + 96) + 4 * (v14 + *(_QWORD *)(result + 112) * v11) - 4);
      do
      {
        v17 = *v16++;
        v13 = v13 + fabsf(v17);
        --v15;
      }
      while (v15);
    }
    ++v11;
  }
  while (v11 != v8);
  v18 = 0;
  v19 = 0.0;
  v20 = 0.0;
  v21 = 0.0;
  v22 = 0.0;
  v23 = 0.0;
  v24 = *(_QWORD *)result - 1;
  v25 = 0.0;
  while (1)
  {
    if (v24)
    {
      v26 = *(_QWORD *)(v10 + 96);
      v27 = *(_QWORD *)(v10 + 112);
      v28 = v24 - 1;
      v29 = 4 * (v24 - 1) * (v27 + 1);
      v30 = 4 * ~v27;
      v31 = 4 * v24 * (v27 + 1);
      v32 = v24;
      while (1)
      {
        result = v26 + v31;
        v33 = fabsf(*(float *)(v26 + v29)) + fabsf(*(float *)(v26 + v31));
        v20 = v33 == 0.0 ? v13 : v33;
        if (fabsf(*(float *)(result - 4)) < (float)(v20 * 0.00000011921))
          break;
        result = v32--;
        v26 += v30;
        if ((unint64_t)(v32 + 1) < 2)
        {
          v32 = 0;
          break;
        }
      }
      if (v32 != v24)
        break;
    }
    v18 = 0;
    v34 = *(_QWORD *)(v10 + 96);
    v35 = v24 + v24 * *(_QWORD *)(v10 + 112);
    v36 = v25 + *(float *)(v34 + 4 * v35);
    *(float *)(v34 + 4 * v35) = v36;
    *(float *)(*(_QWORD *)(v10 + 16) + 4 * v24) = v36;
    *(_DWORD *)(*(_QWORD *)(v10 + 40) + 4 * v24--) = 0;
LABEL_21:
    if (v24 < 0)
      goto LABEL_109;
  }
  v37 = *(float **)(v10 + 96);
  v38 = *(_QWORD *)(v10 + 112);
  v39 = v38 * v24;
  if (v32 == v28)
  {
    v40 = v38 * v32 + v32;
    v41 = v37[v39 + v24];
    v42 = v37[v39 + v32] * v37[v38 * v32 + v24];
    v23 = (float)(v37[v40] - v41) * 0.5;
    v22 = v42 + (float)(v23 * v23);
    v19 = sqrtf(fabsf(v22));
    v37[v39 + v24] = v25 + v41;
    v37[v40] = v25 + v37[v40];
    v43 = v37[v39 + v24];
    if (v22 >= 0.0)
    {
      if (v23 >= 0.0)
        v69 = v19;
      else
        v69 = -v19;
      v70 = v23 + v69;
      v71 = v43 + v70;
      v72 = *(_QWORD *)(v10 + 16);
      *(float *)(v72 + 4 * v32) = v43 + v70;
      v73 = v43 - (float)(v42 / v70);
      if (v70 != 0.0)
        v71 = v73;
      *(float *)(v72 + 4 * v24) = v71;
      v74 = *(_QWORD *)(v10 + 40);
      *(_DWORD *)(v74 + 4 * v32) = 0;
      *(_DWORD *)(v74 + 4 * v24) = 0;
      v75 = v37[v39 + v32];
      v20 = fabsf(v70) + fabsf(v75);
      v76 = v75 / v20;
      v77 = v70 / v20;
      v21 = sqrtf((float)(v77 * v77) + (float)(v76 * v76));
      v23 = v76 / v21;
      v22 = v77 / v21;
      v78 = -v23;
      if (v24 <= v8)
      {
        v79 = v8 - v32;
        v80 = &v37[v32 + v32 * v38];
        v81 = &v37[v32 + v39];
        do
        {
          v82 = *v80;
          *v80 = (float)(v23 * *v81) + (float)(v22 * *v80);
          ++v80;
          *v81 = (float)(v82 * v78) + (float)(v22 * *v81);
          ++v81;
          --v79;
        }
        while (v79);
      }
      if ((v24 & 0x8000000000000000) == 0)
      {
        v83 = v24 + 1;
        v84 = 4 * v38;
        do
        {
          v85 = v37[v32];
          v86 = v37[v24];
          v37[v32] = (float)(v23 * v86) + (float)(v22 * v85);
          v37[v24] = (float)(v85 * v78) + (float)(v22 * v86);
          v37 = (float *)((char *)v37 + v84);
          --v83;
        }
        while (v83);
      }
      v87 = *(_QWORD *)(v10 + 64);
      v88 = 4 * *(_QWORD *)(v10 + 80);
      v89 = v8;
      do
      {
        v19 = *(float *)(v87 + 4 * v32);
        v90 = *(float *)(v87 + 4 * v24);
        *(float *)(v87 + 4 * v32) = (float)(v23 * v90) + (float)(v22 * v19);
        *(float *)(v87 + 4 * v24) = (float)(v19 * v78) + (float)(v22 * v90);
        v87 += v88;
        --v89;
      }
      while (v89);
    }
    else
    {
      v44 = *(_QWORD *)(v10 + 16);
      *(float *)(v44 + 4 * v32) = v23 + v43;
      *(float *)(v44 + 4 * v24) = v23 + v43;
      v45 = *(_QWORD *)(v10 + 40);
      *(float *)(v45 + 4 * v32) = v19;
      *(float *)(v45 + 4 * v24) = -v19;
    }
    v18 = 0;
    v24 -= 2;
    goto LABEL_21;
  }
  v46 = 0.0;
  v47 = 0.0;
  if (v32 < v24)
  {
    v47 = v37[v38 * v28 + v28];
    result = v39 + v28;
    v46 = v37[v39 + v28] * v37[v38 * v28 + v24];
  }
  v48 = v37[v39 + v24];
  v49 = 4 * v38;
  if (v18 == 10)
  {
    if ((v24 & 0x8000000000000000) == 0)
    {
      result = v24 + 1;
      v50 = *(float **)(v10 + 96);
      do
      {
        *v50 = *v50 - v48;
        v50 = (float *)((char *)v50 + v49 + 4);
        --result;
      }
      while (result);
    }
    v25 = v25 + v48;
    v20 = fabsf(v37[v39 + v28]) + fabsf(v37[v24 - 2 + v38 * v28]);
    v48 = v20 * 0.75;
    v46 = v20 * -0.4375 * v20;
    v47 = v20 * 0.75;
  }
  if (v18 == 30)
  {
    v51 = (float)(v47 - v48) * 0.5;
    v52 = v51;
    v20 = v46 + (float)(v52 * v52);
    if (v20 > 0.0)
    {
      v53 = sqrtf(v20);
      if (v47 >= v48)
        v54 = v53;
      else
        v54 = -v53;
      v20 = v48 - v46 / (v51 + v54);
      if ((v24 & 0x8000000000000000) == 0)
      {
        v55 = v24 + 1;
        result = v49 + 4;
        v56 = v37;
        do
        {
          *v56 = *v56 - v20;
          v56 = (float *)((char *)v56 + result);
          --v55;
        }
        while (v55);
      }
      v25 = v25 + v20;
      v46 = 0.964;
      v48 = 0.964;
      v47 = 0.964;
    }
  }
  if (v18 < 1000 * v24)
  {
    v57 = v24 - 2;
    if (v24 - 2 >= v32)
    {
      v58 = -v46;
      result = 4 * v24 * (v38 + 1) - 4;
      v59 = v49 * v28 + 4 * v24 - 8;
      v60 = v49 * v57 + 4 * v24 - 12;
      v61 = v37;
      while (1)
      {
        v19 = *(float *)((char *)v61 + v60 + 4);
        v62 = *(float *)((char *)v61 + v59 + 4);
        v63 = *(float *)((char *)v61 + v60 + 8)
            + (float)((float)(v58 + (float)((float)(v48 - v19) * (float)(v47 - v19))) / *(float *)((char *)v61 + v59));
        v64 = (float)(v62 - v19) - (float)(v48 - v19);
        v65 = v64 - (float)(v47 - v19);
        v66 = *(float *)((char *)v61 + result);
        v20 = fabsf(v66) + (float)(fabsf(v63) + vabds_f32(v64, v47 - v19));
        v23 = v63 / v20;
        v22 = v65 / v20;
        v21 = v66 / v20;
        if (v32 == v57)
          break;
        --v57;
        v67 = (float)(fabsf(v22) + fabsf(v21)) * fabsf(*(float *)((char *)v61 + v60));
        v68 = (float)(fabsf(v23) * (float)(fabsf(v62) + (float)(fabsf(v19) + fabsf(v61[(v24 - 3) * (v38 + 1)]))))
            * 0.00000011921;
        v61 = (float *)((char *)v61 + (v49 ^ 0xFFFFFFFFFFFFFFFCLL));
        if (v67 < v68)
        {
          ++v57;
          goto LABEL_63;
        }
      }
      v57 = v32;
    }
LABEL_63:
    v91 = v57 + 2;
    if (v57 + 2 <= v24)
    {
      result = v57 + 1;
      v92 = (_DWORD *)((char *)&v37[v57] + v49 * v91);
      do
      {
        ++result;
        *v92 = 0;
        if (result > v91)
          *(v92 - 1) = 0;
        v92 = (_DWORD *)((char *)v92 + v49 + 4);
      }
      while (v24 != result);
    }
    ++v18;
    if (v57 < v24)
    {
      result = v57 + 3;
      v93 = (char *)&v37[v57] + 4 * v57 * v38;
      v94 = v49 + 4;
      v95 = (char *)&v37[v38 + v57] + v49 * v57;
      v96 = (char *)&v37[v57] + v49 * v91;
      v97 = 4 * v57 + 4;
      v98 = (float *)((char *)v37 + v97);
      v99 = v57;
      do
      {
        if (v24 >= result)
          v100 = result;
        else
          v100 = v24;
        if (v99 != v57)
        {
          v101 = v99 - 1;
          v21 = 0.0;
          if (v99 != v28)
            v21 = v37[v101 + (v99 + 2) * v38];
          v102 = v101 + v99 * v38;
          v23 = v37[v102];
          v22 = v37[v102 + v38];
          v48 = (float)(fabsf(v23) + fabsf(v22)) + fabsf(v21);
          if (v48 != 0.0)
          {
            v23 = v23 / v48;
            v22 = v22 / v48;
            v21 = v21 / v48;
          }
        }
        if (v48 == 0.0)
          break;
        v103 = sqrtf((float)((float)(v22 * v22) + (float)(v23 * v23)) + (float)(v21 * v21));
        if (v23 >= 0.0)
          v20 = v103;
        else
          v20 = -v103;
        if (v20 != 0.0)
        {
          if (v99 == v57)
          {
            if (v32 != v57)
              v37[v57 - 1 + v57 * v38] = -v37[v57 - 1 + v57 * v38];
          }
          else
          {
            v37[v99 - 1 + v99 * v38] = -(float)(v20 * v48);
          }
          v104 = v23 + v20;
          v48 = v104 / v20;
          v105 = v22 / v20;
          v19 = v21 / v20;
          v22 = v22 / v104;
          v21 = v21 / v104;
          if (v99 < v8)
          {
            v106 = 0;
            do
            {
              v107 = *(float *)&v93[4 * v106];
              v108 = v107 + (float)(v22 * *(float *)&v95[4 * v106]);
              if (v99 == v28)
              {
                v109 = -v108;
              }
              else
              {
                v110 = *(float *)&v96[4 * v106];
                v111 = v108 + (float)(v21 * v110);
                v109 = -v111;
                *(float *)&v96[4 * v106] = v110 - (float)(v111 * v19);
                v107 = *(float *)&v93[4 * v106];
              }
              *(float *)&v93[4 * v106] = v107 + (float)(v109 * v48);
              *(float *)&v95[4 * v106] = *(float *)&v95[4 * v106] + (float)(v109 * v105);
              ++v106;
            }
            while (v99 + v106 < v8);
          }
          v112 = v99 + 3;
          if (v99 + 3 >= v24)
            v112 = v24;
          if ((v112 & 0x8000000000000000) == 0)
          {
            v113 = v100 + 1;
            v114 = v98;
            do
            {
              v115 = *(v114 - 1);
              v116 = (float)(v105 * *v114) + (float)(v48 * v115);
              if (v99 == v28)
              {
                v117 = -v116;
              }
              else
              {
                v118 = v114[1];
                v117 = -(float)(v116 + (float)(v19 * v118));
                v116 = v116 + (float)(v19 * v118);
                v114[1] = v118 - (float)(v116 * v21);
                v115 = *(v114 - 1);
              }
              *(v114 - 1) = v115 - v116;
              *v114 = *v114 + (float)(v117 * v22);
              v114 = (float *)((char *)v114 + v49);
              --v113;
            }
            while (v113);
          }
          v119 = (float *)(*(_QWORD *)(v10 + 64) + v97);
          v120 = 4 * *(_QWORD *)(v10 + 80);
          v121 = v8;
          do
          {
            v122 = *(v119 - 1);
            v23 = (float)(v105 * *v119) + (float)(v48 * v122);
            if (v99 == v28)
            {
              v123 = -v23;
            }
            else
            {
              v124 = v119[1];
              v123 = -(float)(v23 + (float)(v19 * v124));
              v23 = v23 + (float)(v19 * v124);
              v119[1] = v124 - (float)(v23 * v21);
              v122 = *(v119 - 1);
            }
            v125 = v122 - v23;
            v126 = *v119 + (float)(v123 * v22);
            *(v119 - 1) = v125;
            *v119 = v126;
            v119 = (float *)((char *)v119 + v120);
            --v121;
          }
          while (v121);
        }
        ++v99;
        ++result;
        v93 += v94;
        v95 += v94;
        v96 += v94;
        ++v98;
        v97 += 4;
      }
      while (v99 != v24);
    }
    goto LABEL_21;
  }
  v127 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(MEMORY[0x1E0DE4A50], (uint64_t)"eigenvalue_decomposition::hqr2() did not converge within the iteration limit", 76);
  std::ios_base::getloc((const std::ios_base *)((char *)v127 + *(_QWORD *)(*v127 - 24)));
  v128 = std::locale::use_facet(&v260, MEMORY[0x1E0DE4A90]);
  ((void (*)(const std::locale::facet *, uint64_t))v128->__vftable[2].~facet_0)(v128, 10);
  std::locale::~locale(&v260);
  std::ostream::put();
  result = std::ostream::flush();
LABEL_109:
  if (v13 != 0.0)
  {
    v129 = *(_QWORD *)(v10 + 16);
    v130 = *(_QWORD *)(v10 + 40);
    v131 = v13 * 0.00000011921;
    v132 = 4 * v8 - 12;
    v133 = v8 - 2;
    v134 = 4 * v8 - 8;
    v135 = 4 * v8 - 4;
    v136 = v135;
    v137 = v8;
    v138 = v9;
    do
    {
      v139 = *(float *)(v129 + 4 * v138);
      v140 = *(float *)(v130 + 4 * v138);
      if (v140 == 0.0)
      {
        result = *(_QWORD *)(v10 + 96);
        v141 = *(_QWORD *)(v10 + 112);
        *(_DWORD *)(result + 4 * (v138 + v138 * v141)) = 1065353216;
        if (!v138)
          break;
        v142 = result + v141 * v134;
        v143 = 4 * v141;
        v144 = 2;
        v145 = v138;
        v146 = v138;
        do
        {
          v147 = v145;
          v148 = 0.0;
          if (v146 <= v138)
          {
            v149 = (float *)(result + 4 * (v138 + v141 * v146));
            v150 = v146;
            do
            {
              v148 = v148 + (float)(*(float *)(v142 + 4 * v150++) * *v149);
              v149 = (float *)((char *)v149 + v143);
            }
            while (v137 != v150);
          }
          v145 = v147 - 1;
          v151 = (v147 - 1) * v141;
          v152 = *(float *)(result + 4 * (v151 + v147 - 1)) - v139;
          v153 = *(float *)(v130 + 4 * (v147 - 1));
          if (v153 >= 0.0)
          {
            if (v153 == 0.0)
            {
              v154 = -v148;
              v155 = v151 + v138;
              if (v152 == 0.0)
                v156 = v154 / v131;
              else
                v156 = v154 / v152;
              *(float *)(result + 4 * v155) = v156;
            }
            else
            {
              v157 = *(float *)(result + 4 * (v151 + v147));
              v158 = *(float *)(result + 4 * (v147 * v141 + v145));
              v159 = (float)((float)(v157 * v20) - (float)(v19 * v148))
                   / (float)((float)(v153 * v153)
                           + (float)((float)(*(float *)(v129 + 4 * v145) - v139)
                                   * (float)(*(float *)(v129 + 4 * v145) - v139)));
              v155 = v151 + v138;
              *(float *)(result + 4 * (v151 + v138)) = v159;
              if (fabsf(v157) <= fabsf(v19))
                v160 = (float)-(float)(v20 + (float)(v158 * v159)) / v19;
              else
                v160 = (float)-(float)(v148 + (float)(v152 * v159)) / v157;
              *(float *)(result + 4 * (v147 * v141 + v138)) = v160;
            }
            v161 = fabsf(*(float *)(result + 4 * v155));
            v162 = (float)(v161 * (float)(v161 * 0.00000011921)) > 1.0 && v145 <= v138;
            if (v162)
            {
              v163 = v136;
              v164 = v144;
              do
              {
                *(float *)(v142 + v163) = *(float *)(v142 + v163) / v161;
                v163 += v143;
                --v164;
              }
              while (v164);
            }
            v146 = v147 - 1;
          }
          else
          {
            v20 = v148;
            v19 = *(float *)(result + 4 * (v151 + v147 - 1)) - v139;
          }
          v142 -= 4 * v141;
          ++v144;
        }
        while (v147 > 1);
      }
      else
      {
        if (v140 >= 0.0)
          goto LABEL_190;
        v165 = v138 - 1;
        v166 = *(_QWORD *)(v10 + 96);
        v167 = *(_QWORD *)(v10 + 112);
        v168 = v167 * v138;
        v169 = v167 * v138 + v138 - 1;
        v170 = *(float *)(v166 + 4 * v169);
        v171 = v167 * (v138 - 1);
        v172 = v171 + v138;
        v173 = *(float *)(v166 + 4 * (v171 + v138));
        v174 = v171 + v138 - 1;
        if (fabsf(v170) <= fabsf(v173))
        {
          v177 = -v173;
          v178 = *(float *)(v166 + 4 * v174);
          v179 = v178 - v139;
          v180 = vabds_f32(v178, v139) <= fabsf(v140);
          v181 = v140 + (float)((float)(v179 / v140) * v179);
          v182 = (float)(v177 + (float)((float)((float)(v178 - v139) / v140) * 0.0)) / v181;
          v183 = (float)((float)((float)(v178 - v139) / v140) * v177) / v181;
          v184 = v140 / v179;
          v185 = v179 + (float)((float)(v140 / v179) * v140);
          v186 = (float)((float)(v184 * v177) + 0.0) / v185;
          v187 = (float)(v177 - (float)(v184 * 0.0)) / v185;
          if (v180)
            v188 = v182;
          else
            v188 = v186;
          if (v180)
            v187 = v183;
          *(float *)(v10 + 152) = v188;
          *(float *)(v10 + 156) = v187;
          *(float *)(v166 + 4 * v174) = v188;
          v176 = *(float *)(v10 + 156);
          v175 = v168 + v138;
        }
        else
        {
          *(float *)(v166 + 4 * v174) = v140 / v170;
          v175 = v168 + v138;
          v176 = (float)-(float)(*(float *)(v166 + 4 * v175) - v139) / *(float *)(v166 + 4 * v169);
        }
        *(float *)(v166 + 4 * v172) = v176;
        *(_DWORD *)(v166 + 4 * v169) = 0;
        *(_DWORD *)(v166 + 4 * v175) = 1065353216;
        v189 = v138 - 2;
        if ((unint64_t)v138 < 2)
        {
LABEL_190:
          v148 = v21;
        }
        else
        {
          v190 = -v140;
          v191 = fabsf(v140);
          v192 = v166 + v167 * v132;
          v193 = 4 * v167;
          v194 = 3;
          v195 = v138 - 1;
          v196 = v19;
          v197 = v20;
          do
          {
            v148 = 0.0;
            v20 = 0.0;
            if (v195 <= v138)
            {
              v198 = (float *)(v166 + 4 * (v133 + v167 * v195));
              v199 = v195;
              do
              {
                v200 = *(float *)(v192 + 4 * v199);
                v148 = v148 + (float)(v200 * *v198);
                v20 = v20 + (float)(v200 * v198[1]);
                ++v199;
                v198 = (float *)((char *)v198 + v193);
              }
              while (v137 != v199);
            }
            v201 = v167 * v189;
            v19 = *(float *)(v166 + 4 * (v167 * v189 + v189)) - v139;
            v202 = *(float *)(v130 + 4 * v189);
            if (v202 >= 0.0)
            {
              if (v202 == 0.0)
              {
                v203 = fabsf(v19) <= v191;
                v204 = v140 + (float)((float)(v19 / v140) * v19);
                v205 = (float)((float)((float)(v19 / v140) * (float)-v148) - v20) / v204;
                v206 = (float)(v148 + (float)((float)(v19 / v140) * (float)-v20)) / v204;
                v207 = v19 + (float)((float)(v140 / v19) * v140);
                v208 = (float)((float)((float)(v140 / v19) * (float)-v20) - v148) / v207;
                v209 = (float)((float)(v140 / v19) * v148) - v20;
                if (v203)
                  v208 = v205;
                v210 = v209 / v207;
                if (v203)
                  v210 = v206;
                *(float *)(v10 + 152) = v208;
                *(float *)(v10 + 156) = v210;
                v211 = v201 + v165;
                *(float *)(v166 + 4 * (v201 + v165)) = v208;
                v212 = *(float *)(v10 + 156);
                v213 = v201 + v138;
                v214 = v201 + v138;
              }
              else
              {
                v215 = *(float *)(v166 + 4 * (v201 + v189 + 1));
                v216 = v167 * (v189 + 1);
                v217 = *(float *)(v166 + 4 * (v216 + v189));
                v218 = *(float *)(v129 + 4 * v189) - v139;
                v219 = (float)((float)(v202 * v202) + (float)(v218 * v218)) + (float)(v190 * v140);
                v220 = (v218 + v218) * v140;
                v221 = fabsf(v215);
                v222 = fabsf(v196);
                if (v219 == 0.0 && v220 == 0.0)
                  v219 = v131 * (float)(v222 + (float)((float)((float)(v191 + fabsf(v19)) + v221) + fabsf(v217)));
                v223 = (float)((float)(v215 * v21) - (float)(v196 * v148)) + (float)(v140 * v20);
                v224 = (float)((float)(v215 * v197) - (float)(v196 * v20)) + (float)(v190 * v148);
                v225 = fabsf(v219) <= fabsf(v220);
                v226 = v220 + (float)((float)(v219 / v220) * v219);
                v227 = (float)(v224 + (float)((float)(v219 / v220) * v223)) / v226;
                v228 = (float)-(float)(v223 - (float)((float)(v219 / v220) * v224)) / v226;
                v229 = v220 / v219;
                v230 = v219 + (float)((float)(v220 / v219) * v220);
                v231 = (float)(v223 + (float)(v229 * v224)) / v230;
                v232 = (float)(v224 - (float)(v229 * v223)) / v230;
                if (v225)
                  v233 = v227;
                else
                  v233 = v231;
                if (v225)
                  v234 = v228;
                else
                  v234 = v232;
                *(float *)(v10 + 152) = v233;
                *(float *)(v10 + 156) = v234;
                v211 = v201 + v165;
                *(float *)(v166 + 4 * (v201 + v165)) = v233;
                v235 = *(float *)(v10 + 156);
                v214 = v201 + v138;
                *(float *)(v166 + 4 * v214) = v235;
                if (v221 <= (float)(v191 + v222))
                {
                  v236 = -(float)(v21 + (float)(v217 * v233));
                  v237 = -(float)(v197 + (float)(v217 * v235));
                  v238 = v222 <= v191;
                  v239 = v140 + (float)((float)(v196 / v140) * v196);
                  v240 = (float)((float)((float)(v196 / v140) * v236) - (float)(v197 + (float)(v217 * v235))) / v239;
                  v241 = (float)-(float)(v236 - (float)((float)(v196 / v140) * v237)) / v239;
                  v242 = v196 + (float)((float)(v140 / v196) * v140);
                  v243 = (float)(v236 + (float)((float)(v140 / v196) * v237)) / v242;
                  v244 = v237 - (float)((float)(v140 / v196) * v236);
                  if (v238)
                    v245 = v240;
                  else
                    v245 = v243;
                  v246 = v244 / v242;
                  if (v238)
                    v246 = v241;
                  *(float *)(v10 + 152) = v245;
                  *(float *)(v10 + 156) = v246;
                  *(float *)(v166 + 4 * (v216 + v165)) = v245;
                  v212 = *(float *)(v10 + 156);
                }
                else
                {
                  *(float *)(v166 + 4 * (v216 + v165)) = (float)((float)(v140 * v235)
                                                               - (float)(v148 + (float)(v19 * v233)))
                                                       / v215;
                  v212 = (float)((float)(v190 * *(float *)(v166 + 4 * v211))
                               - (float)(v20 + (float)(v19 * *(float *)(v166 + 4 * v214))))
                       / v215;
                }
                v213 = v216 + v138;
              }
              *(float *)(v166 + 4 * v213) = v212;
              *(float *)&a8 = fabsf(*(float *)(v166 + 4 * v211));
              v247 = fabsf(*(float *)(v166 + 4 * v214));
              if (*(float *)&a8 < v247)
                *(float *)&a8 = v247;
              if ((float)(*(float *)&a8 * (float)(*(float *)&a8 * 0.00000011921)) > 1.0 && v189 <= v138)
              {
                a8 = COERCE_DOUBLE(vdup_lane_s32(*(int32x2_t *)&a8, 0));
                v249 = v134;
                v250 = v194;
                do
                {
                  *(float32x2_t *)(v192 + v249) = vdiv_f32(*(float32x2_t *)(v192 + v249), *(float32x2_t *)&a8);
                  v249 += v193;
                  --v250;
                }
                while (v250);
              }
              v148 = v21;
              v20 = v197;
              v19 = v196;
              v195 = v189;
            }
            v192 -= 4 * v167;
            ++v194;
            v196 = v19;
            v197 = v20;
            v21 = v148;
            v162 = v189-- <= 0;
          }
          while (!v162);
        }
      }
      result = v138 - 1;
      --v137;
      v132 -= 4;
      --v133;
      v134 -= 4;
      v136 -= 4;
      v21 = v148;
      v162 = v138-- <= 0;
    }
    while (!v162);
    v251 = *(_QWORD *)(v10 + 64);
    v252 = *(_QWORD *)(v10 + 80);
    do
    {
      v253 = 0;
      if (v12 >= v9)
        v254 = v9;
      else
        v254 = v12;
      v255 = v251;
      do
      {
        if (v254 < 0)
        {
          v257 = 0.0;
        }
        else
        {
          v256 = (float *)(*(_QWORD *)(v10 + 96) + v135);
          v257 = 0.0;
          result = v255;
          v258 = v254 + 1;
          do
          {
            v259 = *(float *)result;
            result += 4;
            v257 = v257 + (float)(v259 * *v256);
            v256 += *(_QWORD *)(v10 + 112);
            --v258;
          }
          while (v258);
        }
        *(float *)(v251 + 4 * (v252 * v253++ + v12)) = v257;
        v255 += 4 * v252;
      }
      while (v253 != v8);
      v135 -= 4;
      v162 = v12-- <= 0;
    }
    while (!v162);
  }
  return result;
}

void sub_1B6CF0600(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::locale a10)
{
  std::locale::~locale(&a10);
  _Unwind_Resume(a1);
}

uint64_t dlib::row_major_layout::layout<float,0l,1l,dlib::memory_manager_stateless_kernel_1<char>,3>::set_size(uint64_t *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t result;

  v4 = *a1;
  if (v4)
    MEMORY[0x1BCCA128C](v4, 0x1000C8052888210);
  result = operator new[]();
  *a1 = result;
  a1[1] = a2;
  return result;
}

_QWORD *dlib::matrix_assign_big<dlib::matrix<float,0l,0l,dlib::memory_manager_stateless_kernel_1<char>,dlib::row_major_layout>,dlib::const_temp_matrix<dlib::matrix<float,0l,0l,dlib::memory_manager_stateless_kernel_1<char>,dlib::row_major_layout>>>(_QWORD *result, uint64_t a2)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _DWORD *v7;
  uint64_t v8;
  int *v9;
  _DWORD *v10;
  int v11;

  v2 = *(_QWORD **)a2;
  v3 = *(_QWORD *)(*(_QWORD *)a2 + 8);
  if (v3 >= 1)
  {
    v4 = 0;
    v5 = 0;
    v6 = v2[2];
    v7 = (_DWORD *)*result;
    v8 = 4 * result[2];
    do
    {
      if (v6 >= 1)
      {
        v9 = (int *)(*v2 + v4);
        v10 = v7;
        result = (_QWORD *)v6;
        do
        {
          v11 = *v9++;
          *v10++ = v11;
          result = (_QWORD *)((char *)result - 1);
        }
        while (result);
      }
      ++v5;
      v7 = (_DWORD *)((char *)v7 + v8);
      v4 += 4 * v6;
    }
    while (v5 != v3);
  }
  return result;
}

_QWORD *std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  int v8;
  int v9;
  const std::locale::facet *v10;
  uint64_t v11;
  _BYTE v13[16];
  std::locale v14;

  MEMORY[0x1BCCA110C](v13, a1);
  if (v13[0])
  {
    v6 = (uint64_t)a1 + *(_QWORD *)(*a1 - 24);
    v7 = *(_QWORD *)(v6 + 40);
    v8 = *(_DWORD *)(v6 + 8);
    v9 = *(_DWORD *)(v6 + 144);
    if (v9 == -1)
    {
      std::ios_base::getloc((const std::ios_base *)((char *)a1 + *(_QWORD *)(*a1 - 24)));
      v10 = std::locale::use_facet(&v14, MEMORY[0x1E0DE4A90]);
      v9 = ((uint64_t (*)(const std::locale::facet *, uint64_t))v10->__vftable[2].~facet_0)(v10, 32);
      std::locale::~locale(&v14);
      *(_DWORD *)(v6 + 144) = v9;
    }
    if ((v8 & 0xB0) == 0x20)
      v11 = a2 + a3;
    else
      v11 = a2;
    if (!std::__pad_and_output[abi:ne180100]<char,std::char_traits<char>>(v7, a2, v11, a2 + a3, v6, (char)v9))
      std::ios_base::clear((std::ios_base *)((char *)a1 + *(_QWORD *)(*a1 - 24)), *(_DWORD *)((char *)a1 + *(_QWORD *)(*a1 - 24) + 32) | 5);
  }
  MEMORY[0x1BCCA1118](v13);
  return a1;
}

void sub_1B6CF07FC(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, std::locale a12)
{
  _QWORD *v12;

  MEMORY[0x1BCCA1118](&a10);
  __cxa_begin_catch(a1);
  std::ios_base::__set_badbit_and_consider_rethrow((std::ios_base *)((char *)v12 + *(_QWORD *)(*v12 - 24)));
  __cxa_end_catch();
  JUMPOUT(0x1B6CF07DCLL);
}

void sub_1B6CF0844(_Unwind_Exception *a1)
{
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

uint64_t std::__pad_and_output[abi:ne180100]<char,std::char_traits<char>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, int __c)
{
  uint64_t v6;
  uint64_t v11;
  int64_t v12;
  void **v13;
  uint64_t v14;
  uint64_t v15;
  void *__p[2];
  char v18;

  v6 = a1;
  if (a1)
  {
    v11 = *(_QWORD *)(a5 + 24);
    if (v11 <= a4 - a2)
      v12 = 0;
    else
      v12 = v11 - (a4 - a2);
    if (a3 - a2 >= 1 && (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 96))(a1) != a3 - a2)
      return 0;
    if (v12 >= 1)
    {
      std::string::basic_string[abi:ne180100](__p, v12, __c);
      v13 = v18 >= 0 ? __p : (void **)__p[0];
      v14 = (*(uint64_t (**)(uint64_t, void **, int64_t))(*(_QWORD *)v6 + 96))(v6, v13, v12);
      if (v18 < 0)
        operator delete(__p[0]);
      if (v14 != v12)
        return 0;
    }
    v15 = a4 - a3;
    if (v15 < 1 || (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v6 + 96))(v6, a3, v15) == v15)
      *(_QWORD *)(a5 + 24) = 0;
    else
      return 0;
  }
  return v6;
}

void sub_1B6CF0978(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

_QWORD *std::string::basic_string[abi:ne180100](_QWORD *__b, size_t __len, int __c)
{
  void *v6;
  size_t v7;
  size_t v8;

  if (__len >= 0x7FFFFFFFFFFFFFF8)
    std::string::__throw_length_error[abi:ne180100]();
  if (__len >= 0x17)
  {
    v7 = (__len & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((__len | 7) != 0x17)
      v7 = __len | 7;
    v8 = v7 + 1;
    v6 = operator new(v7 + 1);
    __b[1] = __len;
    __b[2] = v8 | 0x8000000000000000;
    *__b = v6;
  }
  else
  {
    *((_BYTE *)__b + 23) = __len;
    v6 = __b;
    if (!__len)
      goto LABEL_9;
  }
  memset(v6, __c, __len);
LABEL_9:
  *((_BYTE *)v6 + __len) = 0;
  return __b;
}

uint64_t *dlib::matrix<float,0l,1l,dlib::memory_manager_stateless_kernel_1<char>,dlib::row_major_layout>::matrix(uint64_t *a1, int **a2)
{
  uint64_t v4;
  int *v5;
  _DWORD *v6;
  int v7;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = (uint64_t)&unk_1E6B131D0;
  dlib::row_major_layout::layout<float,0l,1l,dlib::memory_manager_stateless_kernel_1<char>,3>::set_size(a1, (uint64_t)a2[1]);
  v4 = (uint64_t)a2[1];
  if (v4 >= 1)
  {
    v5 = *a2;
    v6 = (_DWORD *)*a1;
    do
    {
      v7 = *v5++;
      *v6++ = v7;
      --v4;
    }
    while (v4);
  }
  return a1;
}

void sub_1B6CF0AA4(_Unwind_Exception *exception_object)
{
  _QWORD *v1;

  if (*v1)
    MEMORY[0x1BCCA128C](*v1, 0x1000C8052888210);
  _Unwind_Resume(exception_object);
}

uint64_t *dlib::matrix<float,0l,0l,dlib::memory_manager_stateless_kernel_1<char>,dlib::row_major_layout>::matrix(uint64_t *a1, _QWORD *a2)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  a1[3] = (uint64_t)&unk_1E6B131D0;
  dlib::row_major_layout::layout<float,0l,0l,dlib::memory_manager_stateless_kernel_1<char>,5>::set_size(a1, a2[1], a2[2]);
  dlib::matrix_assign_big<dlib::matrix<float,0l,0l,dlib::memory_manager_stateless_kernel_1<char>,dlib::row_major_layout>,dlib::matrix<float,0l,0l,dlib::memory_manager_stateless_kernel_1<char>,dlib::row_major_layout>>(a1, a2);
  return a1;
}

void sub_1B6CF0B1C(_Unwind_Exception *exception_object)
{
  _QWORD *v1;

  if (*v1)
    MEMORY[0x1BCCA128C](*v1, 0x1000C8052888210);
  _Unwind_Resume(exception_object);
}

_QWORD *dlib::matrix_assign_big<dlib::matrix<float,0l,0l,dlib::memory_manager_stateless_kernel_1<char>,dlib::row_major_layout>,dlib::matrix<float,0l,0l,dlib::memory_manager_stateless_kernel_1<char>,dlib::row_major_layout>>(_QWORD *result, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _DWORD *v6;
  uint64_t v7;
  int *v8;
  _DWORD *v9;
  uint64_t v10;
  int v11;

  v2 = a2[1];
  if (v2 >= 1)
  {
    v3 = 0;
    v4 = 0;
    v5 = a2[2];
    v6 = (_DWORD *)*result;
    v7 = 4 * result[2];
    do
    {
      if (v5 >= 1)
      {
        v8 = (int *)(*a2 + v3);
        v9 = v6;
        v10 = v5;
        do
        {
          v11 = *v8++;
          *v9++ = v11;
          --v10;
        }
        while (v10);
      }
      ++v4;
      v6 = (_DWORD *)((char *)v6 + v7);
      v3 += 4 * v5;
    }
    while (v4 != v2);
  }
  return result;
}

void *std::__allocate_at_least[abi:ne180100]<std::allocator<float>>(uint64_t a1, unint64_t a2)
{
  if (a2 >> 62)
    std::__throw_bad_array_new_length[abi:ne180100]();
  return operator new(4 * a2);
}

std::vector<int> *__cdecl std::vector<int>::vector(std::vector<int> *this, std::vector<int>::size_type __n)
{
  std::vector<int>::pointer end;

  this->__begin_ = 0;
  this->__end_ = 0;
  this->__end_cap_.__value_ = 0;
  if (__n)
  {
    std::vector<int>::__vallocate[abi:ne180100](this, __n);
    end = this->__end_;
    bzero(end, 4 * __n);
    this->__end_ = &end[__n];
  }
  return this;
}

void sub_1B6CF0C38(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

char *std::vector<int>::__vallocate[abi:ne180100](_QWORD *a1, unint64_t a2)
{
  char *result;
  uint64_t v4;

  if (a2 >> 62)
    std::vector<std::unique_ptr<VCPProtoKeypoint>>::__throw_length_error[abi:ne180100]();
  result = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<float>>((uint64_t)(a1 + 2), a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[4 * v4];
  return result;
}

void *std::get_temporary_buffer[abi:ne180100]<int>(uint64_t a1)
{
  unint64_t v1;
  const std::nothrow_t *v2;
  void *result;
  BOOL v4;

  if (a1 < 1)
    return 0;
  if (a1 >= 0x1FFFFFFFFFFFFFFFLL)
    v1 = 0x1FFFFFFFFFFFFFFFLL;
  else
    v1 = a1;
  v2 = (const std::nothrow_t *)MEMORY[0x1E0DE4E10];
  while (1)
  {
    result = operator new(4 * v1, v2);
    if (result)
      break;
    v4 = v1 > 1;
    v1 >>= 1;
    if (!v4)
      return 0;
  }
  return result;
}

int *std::__stable_sort<std::_ClassicAlgPolicy,partitionEmbeddingsBySpectralClustering(std::vector<dlib::matrix<float,1l,0l,dlib::memory_manager_stateless_kernel_1<char>,dlib::row_major_layout>> const&)::$_0 &,std::__wrap_iter<int *>>(int *result, int *a2, uint64_t **a3, unint64_t a4, int *a5, uint64_t a6)
{
  char *v8;
  uint64_t v9;
  uint64_t v10;
  int *v12;
  uint64_t v13;
  uint64_t v14;
  int *v15;
  uint64_t v16;
  uint64_t v17;
  float v18;
  uint64_t v19;
  int *v20;
  int *v22;
  unint64_t v23;
  int *v24;
  unint64_t v25;
  int *v26;
  int *v27;
  uint64_t *v28;
  int *v29;
  int *v30;
  uint64_t v31;
  float v32;
  uint64_t v33;
  float v34;
  uint64_t v35;
  char v36;
  int *v37;
  uint64_t v38;

  if (a4 >= 2)
  {
    v8 = (char *)result;
    if (a4 == 2)
    {
      v9 = *(a2 - 1);
      v10 = *result;
      if (*(float *)(**a3 + 4 * v9) < *(float *)(**a3 + 4 * v10))
      {
        *result = v9;
        *(a2 - 1) = v10;
      }
    }
    else if ((uint64_t)a4 > 128)
    {
      v22 = a5;
      v23 = a4 >> 1;
      v24 = &result[a4 >> 1];
      v25 = a4 >> 1;
      if ((uint64_t)a4 <= a6)
      {
        std::__stable_sort_move<std::_ClassicAlgPolicy,partitionEmbeddingsBySpectralClustering(std::vector<dlib::matrix<float,1l,0l,dlib::memory_manager_stateless_kernel_1<char>,dlib::row_major_layout>> const&)::$_0 &,std::__wrap_iter<int *>>(result, v24, a3, v25, a5);
        v26 = &v22[v23];
        result = std::__stable_sort_move<std::_ClassicAlgPolicy,partitionEmbeddingsBySpectralClustering(std::vector<dlib::matrix<float,1l,0l,dlib::memory_manager_stateless_kernel_1<char>,dlib::row_major_layout>> const&)::$_0 &,std::__wrap_iter<int *>>((int *)&v8[4 * (a4 >> 1)], a2, a3, a4 - (a4 >> 1), v26);
        v27 = &v22[a4];
        v28 = *a3;
        v29 = v26;
        while (v29 != v27)
        {
          v30 = v29;
          v31 = *v29;
          v32 = *(float *)(*v28 + 4 * v31);
          v33 = *v22;
          v34 = *(float *)(*v28 + 4 * v33);
          if (v32 < v34)
            LODWORD(v33) = v31;
          v22 += v32 >= v34;
          v29 = &v30[v32 < v34];
          *(_DWORD *)v8 = v33;
          v8 += 4;
          if (v22 == v26)
          {
            if (v29 != v27)
            {
              v35 = 0;
              if (v32 < v34)
                v36 = 1;
              else
                v36 = 2;
              v37 = &v30[v36 & 1];
              do
              {
                *(_DWORD *)&v8[v35 * 4] = v37[v35];
                ++v35;
              }
              while (&v37[v35] != v27);
            }
            return result;
          }
        }
        if (v22 != v26)
        {
          v38 = 0;
          do
          {
            *(_DWORD *)&v8[v38 * 4] = v22[v38];
            ++v38;
          }
          while (&v22[v38] != v26);
        }
      }
      else
      {
        std::__stable_sort<std::_ClassicAlgPolicy,partitionEmbeddingsBySpectralClustering(std::vector<dlib::matrix<float,1l,0l,dlib::memory_manager_stateless_kernel_1<char>,dlib::row_major_layout>> const&)::$_0 &,std::__wrap_iter<int *>>(result, v24, a3, v25, a5, a6);
        std::__stable_sort<std::_ClassicAlgPolicy,partitionEmbeddingsBySpectralClustering(std::vector<dlib::matrix<float,1l,0l,dlib::memory_manager_stateless_kernel_1<char>,dlib::row_major_layout>> const&)::$_0 &,std::__wrap_iter<int *>>(&v8[4 * (a4 >> 1)], a2, a3, a4 - (a4 >> 1), v22, a6);
        return (int *)std::__inplace_merge<std::_ClassicAlgPolicy,partitionEmbeddingsBySpectralClustering(std::vector<dlib::matrix<float,1l,0l,dlib::memory_manager_stateless_kernel_1<char>,dlib::row_major_layout>> const&)::$_0 &,std::__wrap_iter<int *>>(v8, &v8[4 * (a4 >> 1)], (char *)a2, a3, a4 >> 1, a4 - (a4 >> 1), v22, a6);
      }
    }
    else if (result != a2)
    {
      v12 = result + 1;
      if (result + 1 != a2)
      {
        v13 = 0;
        v14 = **a3;
        v15 = result;
        do
        {
          v16 = *v15;
          v15 = v12;
          v17 = *v12;
          v18 = *(float *)(v14 + 4 * v17);
          if (v18 < *(float *)(v14 + 4 * v16))
          {
            v19 = v13;
            while (1)
            {
              *(int *)((char *)result + v19 + 4) = v16;
              if (!v19)
                break;
              v16 = *(int *)((char *)result + v19 - 4);
              v19 -= 4;
              if (v18 >= *(float *)(v14 + 4 * v16))
              {
                v20 = (int *)((char *)result + v19 + 4);
                goto LABEL_15;
              }
            }
            v20 = result;
LABEL_15:
            *v20 = v17;
          }
          v12 = v15 + 1;
          v13 += 4;
        }
        while (v15 + 1 != a2);
      }
    }
  }
  return result;
}

int *std::__stable_sort_move<std::_ClassicAlgPolicy,partitionEmbeddingsBySpectralClustering(std::vector<dlib::matrix<float,1l,0l,dlib::memory_manager_stateless_kernel_1<char>,dlib::row_major_layout>> const&)::$_0 &,std::__wrap_iter<int *>>(int *result, int *a2, uint64_t **a3, unint64_t a4, int *a5)
{
  int *v5;
  int *v7;
  uint64_t v10;
  uint64_t v11;
  float v12;
  float v13;
  int *v14;
  uint64_t v15;
  uint64_t v16;
  int *v17;
  int *v18;
  int v19;
  uint64_t v20;
  uint64_t v21;
  int *v22;
  uint64_t v23;
  uint64_t v24;
  int *v25;
  uint64_t *v26;
  int *v27;
  int *v28;
  uint64_t v29;
  float v30;
  uint64_t v31;
  float v32;
  uint64_t v33;
  int *v34;
  uint64_t v35;

  if (a4)
  {
    v5 = a5;
    v7 = result;
    if (a4 == 1)
    {
LABEL_8:
      *v5 = *v7;
      return result;
    }
    if (a4 == 2)
    {
      v10 = *(a2 - 1);
      v11 = **a3;
      v12 = *(float *)(v11 + 4 * v10);
      v13 = *(float *)(v11 + 4 * *result);
      if (v12 >= v13)
        LODWORD(v10) = *result;
      *a5 = v10;
      v5 = a5 + 1;
      if (v12 >= v13)
        v7 = a2 - 1;
      goto LABEL_8;
    }
    if ((uint64_t)a4 > 8)
    {
      v25 = &result[a4 >> 1];
      std::__stable_sort<std::_ClassicAlgPolicy,partitionEmbeddingsBySpectralClustering(std::vector<dlib::matrix<float,1l,0l,dlib::memory_manager_stateless_kernel_1<char>,dlib::row_major_layout>> const&)::$_0 &,std::__wrap_iter<int *>>(result, v25, a3, a4 >> 1, a5, a4 >> 1);
      result = (int *)std::__stable_sort<std::_ClassicAlgPolicy,partitionEmbeddingsBySpectralClustering(std::vector<dlib::matrix<float,1l,0l,dlib::memory_manager_stateless_kernel_1<char>,dlib::row_major_layout>> const&)::$_0 &,std::__wrap_iter<int *>>(&v7[a4 >> 1], a2, a3, a4 - (a4 >> 1), &v5[a4 >> 1], a4 - (a4 >> 1));
      v26 = *a3;
      v27 = &v7[a4 >> 1];
      while (v27 != a2)
      {
        v28 = v27;
        v29 = *v27;
        v30 = *(float *)(*v26 + 4 * v29);
        v31 = *v7;
        v32 = *(float *)(*v26 + 4 * v31);
        if (v30 < v32)
          LODWORD(v31) = v29;
        v27 = &v28[v30 < v32];
        v7 += v30 >= v32;
        *v5++ = v31;
        if (v7 == v25)
        {
          if (v27 != a2)
          {
            v33 = 0;
            v34 = &v28[v30 < v32];
            do
            {
              v5[v33] = v34[v33];
              ++v33;
            }
            while (&v34[v33] != a2);
          }
          return result;
        }
      }
      if (v7 != v25)
      {
        v35 = 0;
        do
        {
          v5[v35] = v7[v35];
          ++v35;
        }
        while (&v7[v35] != v25);
      }
    }
    else if (result != a2)
    {
      v14 = result + 1;
      *a5 = *result;
      if (result + 1 != a2)
      {
        v15 = 0;
        v16 = **a3;
        v17 = a5;
        v18 = a5;
        do
        {
          v20 = *v18++;
          v19 = v20;
          v21 = *v14;
          if (*(float *)(v16 + 4 * v21) >= *(float *)(v16 + 4 * v20))
          {
            *v18 = v21;
          }
          else
          {
            v17[1] = v19;
            v22 = a5;
            if (v17 != a5)
            {
              v23 = v15;
              while (1)
              {
                v22 = (int *)((char *)a5 + v23);
                v24 = *(int *)((char *)a5 + v23 - 4);
                if (*(float *)(v16 + 4 * *v14) >= *(float *)(v16 + 4 * v24))
                  break;
                *v22 = v24;
                v23 -= 4;
                if (!v23)
                {
                  v22 = a5;
                  break;
                }
              }
            }
            *v22 = *v14;
          }
          ++v14;
          v15 += 4;
          v17 = v18;
        }
        while (v14 != a2);
      }
    }
  }
  return result;
}

char *std::__inplace_merge<std::_ClassicAlgPolicy,partitionEmbeddingsBySpectralClustering(std::vector<dlib::matrix<float,1l,0l,dlib::memory_manager_stateless_kernel_1<char>,dlib::row_major_layout>> const&)::$_0 &,std::__wrap_iter<int *>>(char *result, char *a2, char *a3, uint64_t **a4, uint64_t a5, uint64_t a6, int *a7, uint64_t a8)
{
  uint64_t v10;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  char *v23;
  unint64_t v24;
  unint64_t v25;
  char *v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  unint64_t v32;
  char *v33;
  char *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  char *v38;
  uint64_t v39;
  char *v40;
  char *v41;
  uint64_t v42;
  char *v43;
  uint64_t v44;
  uint64_t v45;
  int *v46;
  char *v47;
  uint64_t v48;
  unint64_t v49;
  uint64_t *v50;
  int *v51;
  uint64_t v52;
  float v53;
  float v54;
  uint64_t v55;
  char *v56;
  uint64_t v57;
  char *v58;
  uint64_t **v59;
  int *__src;

  if (a6)
  {
    v10 = a6;
    v13 = result;
    while (v10 > a8 && a5 > a8)
    {
      if (!a5)
        return result;
      v14 = 0;
      v15 = *(int *)a2;
      v16 = **a4;
      v17 = -a5;
      while (1)
      {
        v18 = *(int *)&v13[v14];
        if (*(float *)(v16 + 4 * v15) < *(float *)(v16 + 4 * v18))
          break;
        v14 += 4;
        if (__CFADD__(v17++, 1))
          return result;
      }
      v59 = a4;
      __src = a7;
      v57 = a8;
      v58 = a3;
      v56 = &v13[v14];
      if (-v17 >= v10)
      {
        if (v17 == -1)
        {
          *(_DWORD *)&v13[v14] = v15;
          *(_DWORD *)a2 = v18;
          return result;
        }
        if (v17 <= 0)
          v30 = -v17;
        else
          v30 = 1 - v17;
        v29 = v30 >> 1;
        v23 = &v13[4 * (v30 >> 1) + v14];
        v22 = a2;
        if (a2 != a3)
        {
          v31 = (a3 - a2) >> 2;
          v22 = a2;
          do
          {
            v32 = v31 >> 1;
            v33 = &v22[4 * (v31 >> 1)];
            v35 = *(int *)v33;
            v34 = v33 + 4;
            v31 += ~(v31 >> 1);
            if (*(float *)(v16 + 4 * v35) < *(float *)(v16 + 4 * *(int *)v23))
              v22 = v34;
            else
              v31 = v32;
          }
          while (v31);
        }
        v21 = (v22 - a2) >> 2;
      }
      else
      {
        if (v10 >= 0)
          v20 = v10;
        else
          v20 = v10 + 1;
        v21 = v20 >> 1;
        v22 = &a2[4 * (v20 >> 1)];
        v23 = a2;
        if (a2 - v13 != v14)
        {
          v24 = (a2 - v13 - v14) >> 2;
          v23 = &v13[v14];
          do
          {
            v25 = v24 >> 1;
            v26 = &v23[4 * (v24 >> 1)];
            v28 = *(int *)v26;
            v27 = v26 + 4;
            v24 += ~(v24 >> 1);
            if (*(float *)(v16 + 4 * *(int *)v22) < *(float *)(v16 + 4 * v28))
              v24 = v25;
            else
              v23 = v27;
          }
          while (v24);
        }
        v29 = (v23 - v13 - v14) >> 2;
      }
      a5 = -(v29 + v17);
      v36 = v10 - v21;
      v37 = v29;
      v38 = std::__rotate[abi:ne180100]<std::_ClassicAlgPolicy,std::__wrap_iter<int *>,std::__wrap_iter<int *>>(v23, a2, v22);
      v39 = v37;
      v40 = v38;
      if (v39 + v21 >= v10 - (v39 + v21) - v17)
      {
        v43 = v22;
        v44 = v39;
        a8 = v57;
        result = (char *)std::__inplace_merge<std::_ClassicAlgPolicy,partitionEmbeddingsBySpectralClustering(std::vector<dlib::matrix<float,1l,0l,dlib::memory_manager_stateless_kernel_1<char>,dlib::row_major_layout>> const&)::$_0 &,std::__wrap_iter<int *>>(v38, v43, v58, v59, a5, v10 - v21, __src, v57);
        a2 = v23;
        a4 = v59;
        v36 = v21;
        a7 = __src;
        a5 = v44;
        a3 = v40;
        v13 = v56;
      }
      else
      {
        v41 = v23;
        a4 = v59;
        v42 = v21;
        a7 = __src;
        result = (char *)std::__inplace_merge<std::_ClassicAlgPolicy,partitionEmbeddingsBySpectralClustering(std::vector<dlib::matrix<float,1l,0l,dlib::memory_manager_stateless_kernel_1<char>,dlib::row_major_layout>> const&)::$_0 &,std::__wrap_iter<int *>>(&v13[v14], v41, v38, v59, v39, v42, __src, v57);
        v13 = v40;
        a2 = v22;
        a8 = v57;
        a3 = v58;
      }
      v10 = v36;
      if (!v36)
        return result;
    }
    if (a5 <= v10)
    {
      if (v13 != a2)
      {
        v49 = 0;
        do
        {
          a7[v49 / 4] = *(_DWORD *)&v13[v49];
          v49 += 4;
        }
        while (&v13[v49] != a2);
        if (v49)
        {
          v50 = *a4;
          v51 = a7;
          while (a2 != a3)
          {
            v52 = *(int *)a2;
            v53 = *(float *)(*v50 + 4 * v52);
            v54 = *(float *)(*v50 + 4 * *v51);
            if (v53 >= v54)
              LODWORD(v52) = *v51;
            a2 += 4 * (v53 < v54);
            v51 += v53 >= v54;
            *(_DWORD *)v13 = v52;
            v13 += 4;
            if (&a7[v49 / 4] == v51)
              return result;
          }
          return (char *)memmove(v13, v51, (char *)a7 - (char *)v51 + v49);
        }
      }
    }
    else if (a3 != a2)
    {
      v45 = 0;
      do
      {
        a7[v45] = *(_DWORD *)&a2[v45 * 4];
        ++v45;
      }
      while (&a2[v45 * 4] != a3);
      if (v45 * 4)
      {
        v46 = &a7[v45];
        v47 = a3 - 4;
        while (a2 != v13)
        {
          v48 = *(v46 - 1);
          if (*(float *)(**a4 + 4 * v48) >= *(float *)(**a4 + 4 * *((int *)a2 - 1)))
          {
            --v46;
          }
          else
          {
            LODWORD(v48) = *((_DWORD *)a2 - 1);
            a2 -= 4;
          }
          *(_DWORD *)v47 = v48;
          v47 -= 4;
          if (v46 == a7)
            return result;
        }
        v55 = 0;
        do
        {
          *(_DWORD *)&v47[v55 * 4] = v46[v55 - 1];
          --v55;
        }
        while (&v46[v55] != a7);
      }
    }
  }
  return result;
}

char *std::__rotate[abi:ne180100]<std::_ClassicAlgPolicy,std::__wrap_iter<int *>,std::__wrap_iter<int *>>(char *__src, char *a2, char *a3)
{
  char *v4;
  int v6;
  int64_t v7;
  int v8;
  size_t v9;

  v4 = a3;
  if (__src != a2)
  {
    if (a2 == a3)
    {
      return __src;
    }
    else if (__src + 4 == a2)
    {
      v6 = *(_DWORD *)__src;
      v7 = a3 - a2;
      memmove(__src, a2, a3 - a2);
      v4 = &__src[v7];
      *(_DWORD *)v4 = v6;
    }
    else if (a2 + 4 == a3)
    {
      v8 = *((_DWORD *)a3 - 1);
      v4 = __src + 4;
      v9 = a3 - 4 - __src;
      if (a3 - 4 != __src)
        memmove(__src + 4, __src, v9);
      *(_DWORD *)__src = v8;
    }
    else
    {
      return (char *)std::__rotate_gcd[abi:ne180100]<std::_ClassicAlgPolicy,std::__wrap_iter<int *>>(__src, a2, a3);
    }
  }
  return v4;
}

_DWORD *std::__rotate_gcd[abi:ne180100]<std::_ClassicAlgPolicy,std::__wrap_iter<int *>>(_DWORD *a1, _DWORD *a2, _DWORD *a3)
{
  uint64_t v3;
  _DWORD *v4;
  _DWORD *v5;
  int v6;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _DWORD *v11;
  int v12;
  int v13;
  _DWORD *v14;
  _DWORD *v15;
  _DWORD *v16;
  _DWORD *v17;
  BOOL v18;
  char v19;
  uint64_t v20;

  v3 = a2 - a1;
  if (v3 == a3 - a2)
  {
    if (a1 != a2 && a2 != a3)
    {
      v4 = a1 + 1;
      v5 = a2 + 1;
      do
      {
        v6 = *(v4 - 1);
        *(v4 - 1) = *(v5 - 1);
        *(v5 - 1) = v6;
        if (v4 == a2)
          break;
        ++v4;
      }
      while (v5++ != a3);
    }
  }
  else
  {
    v8 = a3 - a2;
    v9 = a2 - a1;
    do
    {
      v10 = v9;
      v9 = v8;
      v8 = v10 % v8;
    }
    while (v8);
    if (v9)
    {
      v11 = &a1[v9];
      do
      {
        v13 = *--v11;
        v12 = v13;
        v14 = &v11[v3];
        v15 = v11;
        do
        {
          v16 = v14;
          *v15 = *v14;
          v17 = &v14[v3];
          v18 = __OFSUB__(v3, a3 - v14);
          v20 = v3 - (a3 - v14);
          v19 = (v20 < 0) ^ v18;
          v14 = &a1[v20];
          if (v19)
            v14 = v17;
          v15 = v16;
        }
        while (v14 != v11);
        *v16 = v12;
      }
      while (v11 != a1);
    }
    return &a1[a3 - a2];
  }
  return a2;
}

float std::__stable_sort<std::_ClassicAlgPolicy,std::__less<void,void> &,std::__wrap_iter<float *>>(float *a1, float *a2, uint64_t a3, unint64_t a4, float *a5, uint64_t a6, float result)
{
  float v9;
  float *v11;
  uint64_t v12;
  float *v13;
  float v14;
  uint64_t v15;
  float *v16;
  unint64_t v20;
  float *v21;
  unint64_t v22;
  float v23;
  float v24;

  if (a4 >= 2)
  {
    if (a4 == 2)
    {
      result = *(a2 - 1);
      v9 = *a1;
      if (result < *a1)
      {
        *a1 = result;
        *(a2 - 1) = v9;
      }
    }
    else if ((uint64_t)a4 > 128)
    {
      v20 = a4 >> 1;
      v21 = &a1[a4 >> 1];
      v22 = a4 >> 1;
      if ((uint64_t)a4 <= a6)
      {
        v23 = std::__stable_sort_move<std::_ClassicAlgPolicy,std::__less<void,void> &,std::__wrap_iter<float *>>(a1, v21, a3, v22, a5, result);
        v24 = std::__stable_sort_move<std::_ClassicAlgPolicy,std::__less<void,void> &,std::__wrap_iter<float *>>(&a1[a4 >> 1], a2, a3, a4 - (a4 >> 1), &a5[v20], v23);
        return std::__merge_move_assign[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,float *,float *,std::__wrap_iter<float *>>(a5, &a5[v20], &a5[v20], &a5[a4], a1, v24);
      }
      else
      {
        std::__stable_sort<std::_ClassicAlgPolicy,std::__less<void,void> &,std::__wrap_iter<float *>>(a1, v21, a3, v22, a5, a6);
        std::__stable_sort<std::_ClassicAlgPolicy,std::__less<void,void> &,std::__wrap_iter<float *>>(&a1[a4 >> 1], a2, a3, a4 - (a4 >> 1), a5, a6);
        std::__inplace_merge<std::_ClassicAlgPolicy,std::__less<void,void> &,std::__wrap_iter<float *>>(a1, &a1[a4 >> 1], a2, a3, a4 >> 1, a4 - (a4 >> 1), a5, a6);
      }
    }
    else if (a1 != a2)
    {
      v11 = a1 + 1;
      if (a1 + 1 != a2)
      {
        v12 = 0;
        v13 = a1;
        do
        {
          v14 = *v13;
          v13 = v11;
          result = *v11;
          if (*v11 < v14)
          {
            v15 = v12;
            while (1)
            {
              *(float *)((char *)a1 + v15 + 4) = v14;
              if (!v15)
                break;
              v14 = *(float *)((char *)a1 + v15 - 4);
              v15 -= 4;
              if (result >= v14)
              {
                v16 = (float *)((char *)a1 + v15 + 4);
                goto LABEL_15;
              }
            }
            v16 = a1;
LABEL_15:
            *v16 = result;
          }
          v11 = v13 + 1;
          v12 += 4;
        }
        while (v13 + 1 != a2);
      }
    }
  }
  return result;
}

float std::__stable_sort_move<std::_ClassicAlgPolicy,std::__less<void,void> &,std::__wrap_iter<float *>>(float *a1, float *a2, uint64_t a3, unint64_t a4, float *a5, float result)
{
  float v10;
  float v12;

  if (a4)
  {
    if (a4 == 2)
    {
      v10 = *(a2 - 1);
      if (v10 >= *a1)
      {
        *a5 = *a1;
        result = *(a2 - 1);
      }
      else
      {
        *a5 = v10;
        result = *a1;
      }
      a5[1] = result;
    }
    else if (a4 == 1)
    {
      result = *a1;
      *a5 = *a1;
    }
    else if ((uint64_t)a4 > 8)
    {
      std::__stable_sort<std::_ClassicAlgPolicy,std::__less<void,void> &,std::__wrap_iter<float *>>(a1, &a1[a4 >> 1], a3, a4 >> 1, a5, a4 >> 1);
      std::__stable_sort<std::_ClassicAlgPolicy,std::__less<void,void> &,std::__wrap_iter<float *>>(&a1[a4 >> 1], a2, a3, a4 - (a4 >> 1), &a5[a4 >> 1], a4 - (a4 >> 1));
      return std::__merge_move_construct[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::__wrap_iter<float *>,std::__wrap_iter<float *>>(a1, &a1[a4 >> 1], &a1[a4 >> 1], a2, a5, v12);
    }
    else
    {
      std::__insertion_sort_move[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::__wrap_iter<float *>>(a1, a2, a5);
    }
  }
  return result;
}

float std::__merge_move_assign[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,float *,float *,std::__wrap_iter<float *>>(float *a1, float *a2, float *a3, float *a4, float *a5, float result)
{
  _BOOL4 v6;
  float v7;
  uint64_t v8;

  while (1)
  {
    if (a1 == a2)
    {
      while (a3 != a4)
      {
        v7 = *a3++;
        result = v7;
        *a5++ = v7;
      }
      return result;
    }
    if (a3 == a4)
      break;
    result = *a3;
    v6 = *a3 < *a1;
    if (*a3 >= *a1)
      result = *a1;
    a1 += *a3 >= *a1;
    a3 += v6;
    *a5++ = result;
  }
  if (a1 != a2)
  {
    v8 = 0;
    do
    {
      result = a1[v8];
      a5[v8++] = result;
    }
    while (&a1[v8] != a2);
  }
  return result;
}

float *std::__inplace_merge<std::_ClassicAlgPolicy,std::__less<void,void> &,std::__wrap_iter<float *>>(float *result, float *a2, float *a3, uint64_t a4, uint64_t a5, uint64_t a6, float *a7, uint64_t a8)
{
  uint64_t v9;
  float *v11;
  unint64_t v12;
  float v13;
  uint64_t v14;
  float v15;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  char *v21;
  unint64_t v22;
  unint64_t v23;
  float *v24;
  char *v25;
  float v26;
  uint64_t v27;
  unint64_t v28;
  unint64_t v29;
  float *v30;
  char *v31;
  float v32;
  uint64_t v33;
  uint64_t v34;
  char *v35;
  uint64_t v36;
  float *v37;
  uint64_t v38;
  uint64_t v39;
  float *v40;
  float *v41;
  uint64_t v42;

  if (a6)
  {
    v9 = a6;
    v11 = result;
    do
    {
      if (v9 <= a8 || a5 <= a8)
        return std::__buffered_inplace_merge[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::__wrap_iter<float *>>(v11, a2, a3, a4, a5, v9, a7);
      if (!a5)
        return result;
      v12 = 0;
      v13 = *a2;
      v14 = -a5;
      while (1)
      {
        v15 = v11[v12 / 4];
        if (v13 < v15)
          break;
        v12 += 4;
        if (__CFADD__(v14++, 1))
          return result;
      }
      v17 = -v14;
      v41 = a3;
      v42 = a8;
      v40 = &v11[v12 / 4];
      if (-v14 >= v9)
      {
        if (v14 == -1)
        {
          v11[v12 / 4] = v13;
          *a2 = v15;
          return result;
        }
        if (v14 > 0)
          v17 = 1 - v14;
        v27 = v17 >> 1;
        v21 = (char *)&v11[(v17 >> 1) + v12 / 4];
        v20 = (char *)a2;
        if (a2 != a3)
        {
          v28 = a3 - a2;
          v20 = (char *)a2;
          do
          {
            v29 = v28 >> 1;
            v30 = (float *)&v20[4 * (v28 >> 1)];
            v32 = *v30;
            v31 = (char *)(v30 + 1);
            v28 += ~(v28 >> 1);
            if (v32 < *(float *)v21)
              v20 = v31;
            else
              v28 = v29;
          }
          while (v28);
        }
        v19 = (v20 - (char *)a2) >> 2;
      }
      else
      {
        if (v9 >= 0)
          v18 = v9;
        else
          v18 = v9 + 1;
        v19 = v18 >> 1;
        v20 = (char *)&a2[v18 >> 1];
        v21 = (char *)a2;
        if ((char *)a2 - (char *)v11 != v12)
        {
          v22 = (uint64_t)((char *)a2 - (char *)v11 - v12) >> 2;
          v21 = (char *)&v11[v12 / 4];
          do
          {
            v23 = v22 >> 1;
            v24 = (float *)&v21[4 * (v22 >> 1)];
            v26 = *v24;
            v25 = (char *)(v24 + 1);
            v22 += ~(v22 >> 1);
            if (*(float *)v20 < v26)
              v22 = v23;
            else
              v21 = v25;
          }
          while (v22);
        }
        v27 = (uint64_t)(v21 - (char *)v11 - v12) >> 2;
      }
      a5 = -(v27 + v14);
      v33 = v9 - v19;
      v34 = v27;
      v35 = std::__rotate[abi:ne180100]<std::_ClassicAlgPolicy,std::__wrap_iter<float *>,std::__wrap_iter<float *>>(v21, (char *)a2, v20);
      v36 = v34;
      v37 = (float *)v35;
      if (v36 + v19 >= v9 - (v36 + v19) - v14)
      {
        v39 = v36;
        result = (float *)std::__inplace_merge<std::_ClassicAlgPolicy,std::__less<void,void> &,std::__wrap_iter<float *>>(v35, v20, v41, a4, a5, v9 - v19, a7, v42);
        a2 = (float *)v21;
        v33 = v19;
        a8 = v42;
        a5 = v39;
        a3 = v37;
        v11 = v40;
      }
      else
      {
        v38 = v19;
        a8 = v42;
        result = (float *)std::__inplace_merge<std::_ClassicAlgPolicy,std::__less<void,void> &,std::__wrap_iter<float *>>(&v11[v12 / 4], v21, v35, a4, v36, v38, a7, v42);
        v11 = v37;
        a2 = (float *)v20;
        a3 = v41;
      }
      v9 = v33;
    }
    while (v33);
  }
  return result;
}

float *std::__insertion_sort_move[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::__wrap_iter<float *>>(float *result, float *a2, float *a3)
{
  float v3;
  uint64_t v4;
  float *v5;
  float *v6;
  float v7;
  float v8;
  float *v9;
  uint64_t v10;
  float v11;

  if (result != a2)
  {
    v3 = *result++;
    *a3 = v3;
    if (result != a2)
    {
      v4 = 0;
      v5 = a3;
      v6 = a3;
      do
      {
        v7 = *v6++;
        v8 = v7;
        if (*result >= v7)
        {
          *v6 = *result;
        }
        else
        {
          v5[1] = v8;
          v9 = a3;
          if (v5 != a3)
          {
            v10 = v4;
            while (1)
            {
              v9 = (float *)((char *)a3 + v10);
              v11 = *(float *)((char *)a3 + v10 - 4);
              if (*result >= v11)
                break;
              *v9 = v11;
              v10 -= 4;
              if (!v10)
              {
                v9 = a3;
                break;
              }
            }
          }
          *v9 = *result;
        }
        ++result;
        v4 += 4;
        v5 = v6;
      }
      while (result != a2);
    }
  }
  return result;
}

float std::__merge_move_construct[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::__wrap_iter<float *>,std::__wrap_iter<float *>>(float *a1, float *a2, float *a3, float *a4, float *a5, float result)
{
  _BOOL4 v6;
  float v7;
  uint64_t v8;

  while (1)
  {
    if (a1 == a2)
    {
      while (a3 != a4)
      {
        v7 = *a3++;
        result = v7;
        *a5++ = v7;
      }
      return result;
    }
    if (a3 == a4)
      break;
    result = *a3;
    v6 = *a3 >= *a1;
    if (*a3 >= *a1)
      result = *a1;
    a3 += *a3 < *a1;
    a1 += v6;
    *a5++ = result;
  }
  if (a1 != a2)
  {
    v8 = 0;
    do
    {
      result = a1[v8];
      a5[v8++] = result;
    }
    while (&a1[v8] != a2);
  }
  return result;
}

float *std::__buffered_inplace_merge[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::__wrap_iter<float *>>(float *result, float *a2, float *a3, int a4, uint64_t a5, uint64_t a6, float *__src)
{
  uint64_t v7;
  float *v8;
  float *v9;
  float v10;
  uint64_t v11;
  float *v12;
  float v13;
  _BOOL4 v14;
  uint64_t v15;

  if (a5 <= a6)
  {
    if (result != a2)
    {
      v11 = 0;
      do
      {
        __src[v11] = result[v11];
        ++v11;
      }
      while (&result[v11] != a2);
      if (v11 * 4)
      {
        v12 = __src;
        while (a2 != a3)
        {
          v13 = *a2;
          v14 = *a2 >= *v12;
          if (*a2 >= *v12)
            v13 = *v12;
          a2 += *a2 < *v12;
          v12 += v14;
          *result++ = v13;
          if (&__src[v11] == v12)
            return result;
        }
        return (float *)memmove(result, v12, (char *)__src - (char *)v12 + v11 * 4);
      }
    }
  }
  else if (a2 != a3)
  {
    v7 = 0;
    do
    {
      __src[v7] = a2[v7];
      ++v7;
    }
    while (&a2[v7] != a3);
    if (v7 * 4)
    {
      v8 = &__src[v7];
      v9 = a3 - 1;
      while (a2 != result)
      {
        v10 = *(v8 - 1);
        if (v10 >= *(a2 - 1))
          --v8;
        else
          v10 = *--a2;
        *v9-- = v10;
        if (v8 == __src)
          return result;
      }
      v15 = 0;
      do
      {
        v9[v15] = v8[v15 - 1];
        --v15;
      }
      while (&v8[v15] != __src);
    }
  }
  return result;
}

char *std::__rotate[abi:ne180100]<std::_ClassicAlgPolicy,std::__wrap_iter<float *>,std::__wrap_iter<float *>>(char *__src, char *a2, char *a3)
{
  char *v4;
  int v6;
  int64_t v7;
  int v8;
  size_t v9;

  v4 = a3;
  if (__src != a2)
  {
    if (a2 == a3)
    {
      return __src;
    }
    else if (__src + 4 == a2)
    {
      v6 = *(_DWORD *)__src;
      v7 = a3 - a2;
      memmove(__src, a2, a3 - a2);
      v4 = &__src[v7];
      *(_DWORD *)v4 = v6;
    }
    else if (a2 + 4 == a3)
    {
      v8 = *((_DWORD *)a3 - 1);
      v4 = __src + 4;
      v9 = a3 - 4 - __src;
      if (a3 - 4 != __src)
        memmove(__src + 4, __src, v9);
      *(_DWORD *)__src = v8;
    }
    else
    {
      return (char *)std::__rotate_gcd[abi:ne180100]<std::_ClassicAlgPolicy,std::__wrap_iter<float *>>(__src, a2, a3);
    }
  }
  return v4;
}

_DWORD *std::__rotate_gcd[abi:ne180100]<std::_ClassicAlgPolicy,std::__wrap_iter<float *>>(_DWORD *a1, _DWORD *a2, _DWORD *a3)
{
  uint64_t v3;
  _DWORD *v4;
  _DWORD *v5;
  int v6;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _DWORD *v11;
  int v12;
  int v13;
  _DWORD *v14;
  _DWORD *v15;
  _DWORD *v16;
  _DWORD *v17;
  BOOL v18;
  char v19;
  uint64_t v20;

  v3 = a2 - a1;
  if (v3 == a3 - a2)
  {
    if (a1 != a2 && a2 != a3)
    {
      v4 = a1 + 1;
      v5 = a2 + 1;
      do
      {
        v6 = *(v4 - 1);
        *(v4 - 1) = *(v5 - 1);
        *(v5 - 1) = v6;
        if (v4 == a2)
          break;
        ++v4;
      }
      while (v5++ != a3);
    }
  }
  else
  {
    v8 = a3 - a2;
    v9 = a2 - a1;
    do
    {
      v10 = v9;
      v9 = v8;
      v8 = v10 % v8;
    }
    while (v8);
    if (v9)
    {
      v11 = &a1[v9];
      do
      {
        v12 = *--v11;
        v13 = v12;
        v14 = &v11[v3];
        v15 = v11;
        do
        {
          v16 = v14;
          *v15 = *v14;
          v17 = &v14[v3];
          v18 = __OFSUB__(v3, a3 - v14);
          v20 = v3 - (a3 - v14);
          v19 = (v20 < 0) ^ v18;
          v14 = &a1[v20];
          if (v19)
            v14 = v17;
          v15 = v16;
        }
        while (v14 != v11);
        *v16 = v13;
      }
      while (v11 != a1);
    }
    return &a1[a3 - a2];
  }
  return a2;
}

_QWORD *std::vector<float>::vector(_QWORD *a1, unint64_t a2)
{
  char *v4;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    std::vector<int>::__vallocate[abi:ne180100](a1, a2);
    v4 = (char *)a1[1];
    bzero(v4, 4 * a2);
    a1[1] = &v4[4 * a2];
  }
  return a1;
}

void sub_1B6CF20B4(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::__shuffle[abi:ne180100]<std::_ClassicAlgPolicy,std::__wrap_iter<int *>,std::__wrap_iter<int *>,std::mersenne_twister_engine<unsigned int,32ul,624ul,397ul,31ul,2567483615u,11ul,4294967295u,7ul,2636928640u,15ul,4022730752u,18ul,1812433253u> &>(unint64_t a1, uint64_t a2, uint64_t a3)
{
  int *v4;
  unint64_t v5;
  uint64_t v7;
  uint64_t v8;
  int v9;
  _QWORD v11[2];
  __int128 v12;

  if ((uint64_t)(a2 - a1) >= 5)
  {
    v4 = (int *)a1;
    v12 = xmmword_1B6FBCEA0;
    v5 = a2 - 4;
    if (a2 - 4 > a1)
    {
      v7 = ((a2 - a1) >> 2) - 1;
      do
      {
        v11[0] = 0;
        v11[1] = v7;
        v8 = std::uniform_int_distribution<long>::operator()<std::mersenne_twister_engine<unsigned int,32ul,624ul,397ul,31ul,2567483615u,11ul,4294967295u,7ul,2636928640u,15ul,4022730752u,18ul,1812433253u>>((uint64_t)&v12, a3, v11);
        if (v8)
        {
          v9 = *v4;
          *v4 = v4[v8];
          v4[v8] = v9;
        }
        ++v4;
        --v7;
      }
      while ((unint64_t)v4 < v5);
    }
  }
  return a2;
}

uint64_t std::uniform_int_distribution<long>::operator()<std::mersenne_twister_engine<unsigned int,32ul,624ul,397ul,31ul,2567483615u,11ul,4294967295u,7ul,2636928640u,15ul,4022730752u,18ul,1812433253u>>(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  uint64_t result;
  uint64_t v4;
  unint64_t v5;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  _BYTE v10[64];

  result = a3[1];
  v4 = result - *a3;
  if (result != *a3)
  {
    v5 = v4 + 1;
    if (v4 == -1)
    {
      std::__independent_bits_engine<std::mersenne_twister_engine<unsigned int,32ul,624ul,397ul,31ul,2567483615u,11ul,4294967295u,7ul,2636928640u,15ul,4022730752u,18ul,1812433253u>,unsigned long>::__independent_bits_engine((uint64_t)v10, a2, 0x40uLL);
      return std::__independent_bits_engine<std::mersenne_twister_engine<unsigned int,32ul,624ul,397ul,31ul,2567483615u,11ul,4294967295u,7ul,2636928640u,15ul,4022730752u,18ul,1812433253u>,unsigned long>::__eval((uint64_t)v10);
    }
    else
    {
      v7 = __clz(v5);
      v8 = 63;
      if (((v5 << v7) & 0x7FFFFFFFFFFFFFFFLL) != 0)
        v8 = 64;
      std::__independent_bits_engine<std::mersenne_twister_engine<unsigned int,32ul,624ul,397ul,31ul,2567483615u,11ul,4294967295u,7ul,2636928640u,15ul,4022730752u,18ul,1812433253u>,unsigned long>::__independent_bits_engine((uint64_t)v10, a2, v8 - v7);
      do
        v9 = std::__independent_bits_engine<std::mersenne_twister_engine<unsigned int,32ul,624ul,397ul,31ul,2567483615u,11ul,4294967295u,7ul,2636928640u,15ul,4022730752u,18ul,1812433253u>,unsigned long>::__eval((uint64_t)v10);
      while (v9 >= v5);
      return *a3 + v9;
    }
  }
  return result;
}

uint64_t std::__independent_bits_engine<std::mersenne_twister_engine<unsigned int,32ul,624ul,397ul,31ul,2567483615u,11ul,4294967295u,7ul,2636928640u,15ul,4022730752u,18ul,1812433253u>,unsigned long>::__independent_bits_engine(uint64_t result, uint64_t a2, unint64_t a3)
{
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unsigned int v7;
  unsigned int v8;

  *(_QWORD *)result = a2;
  *(_QWORD *)(result + 8) = a3;
  if ((a3 & 0x1F) != 0)
    v3 = (a3 >> 5) + 1;
  else
    v3 = a3 >> 5;
  v4 = a3 / v3;
  *(_QWORD *)(result + 16) = a3 / v3;
  *(_QWORD *)(result + 24) = v3;
  v5 = (-1 << (a3 / v3)) & 0x100000000;
  if (a3 / v3 >= 0x40)
    v5 = 0;
  *(_QWORD *)(result + 40) = v5;
  if ((v5 ^ 0x100000000) > v5 / v3)
  {
    ++v3;
    v4 = a3 / v3;
    *(_QWORD *)(result + 16) = a3 / v3;
    *(_QWORD *)(result + 24) = v3;
    if (a3 / v3 > 0x3F)
    {
      v6 = 0;
      *(_QWORD *)(result + 32) = v3 + v4 * v3 - a3;
      *(_QWORD *)(result + 40) = 0;
      goto LABEL_13;
    }
    *(_QWORD *)(result + 40) = (-1 << v4) & 0x100000000;
  }
  *(_QWORD *)(result + 32) = v3 + a3 / v3 * v3 - a3;
  if (v4 > 0x3E)
    v6 = 0;
  else
    v6 = 0x80000000uLL >> v4 << (v4 + 1);
LABEL_13:
  *(_QWORD *)(result + 48) = v6;
  v7 = 0xFFFFFFFF >> -(char)v4;
  if (!v4)
    v7 = 0;
  if (v4 >= 0x1F)
    v8 = -1;
  else
    v8 = 0xFFFFFFFF >> ~(_BYTE)v4;
  *(_DWORD *)(result + 56) = v7;
  *(_DWORD *)(result + 60) = v8;
  return result;
}

uint64_t std::__independent_bits_engine<std::mersenne_twister_engine<unsigned int,32ul,624ul,397ul,31ul,2567483615u,11ul,4294967295u,7ul,2636928640u,15ul,4022730752u,18ul,1812433253u>,unsigned long>::__eval(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  std::mersenne_twister_engine<unsigned int, 32, 624, 397, 31, 2567483615, 11, 4294967295, 7, 2636928640, 15, 4022730752, 18, 1812433253>::result_type v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  std::mersenne_twister_engine<unsigned int, 32, 624, 397, 31, 2567483615, 11, 4294967295, 7, 2636928640, 15, 4022730752, 18, 1812433253>::result_type v8;
  unint64_t v9;
  uint64_t v10;

  if (*(_QWORD *)(a1 + 32))
  {
    v2 = 0;
    v3 = 0;
    do
    {
      do
        v4 = std::mersenne_twister_engine<unsigned int,32ul,624ul,397ul,31ul,2567483615u,11ul,4294967295u,7ul,2636928640u,15ul,4022730752u,18ul,1812433253u>::operator()(*(std::mersenne_twister_engine<unsigned int, 32, 624, 397, 31, 2567483615, 11, 4294967295, 7, 2636928640, 15, 4022730752, 18, 1812433253> **)a1);
      while (*(_QWORD *)(a1 + 40) <= (unint64_t)v4);
      v5 = *(_QWORD *)(a1 + 16);
      if (v5 >= 0x40)
        v6 = 0;
      else
        v6 = v2 << v5;
      v2 = v6 + (*(_DWORD *)(a1 + 56) & v4);
      ++v3;
      v7 = *(_QWORD *)(a1 + 32);
    }
    while (v3 < v7);
  }
  else
  {
    v2 = 0;
    v7 = 0;
  }
  for (; v7 < *(_QWORD *)(a1 + 24); ++v7)
  {
    do
      v8 = std::mersenne_twister_engine<unsigned int,32ul,624ul,397ul,31ul,2567483615u,11ul,4294967295u,7ul,2636928640u,15ul,4022730752u,18ul,1812433253u>::operator()(*(std::mersenne_twister_engine<unsigned int, 32, 624, 397, 31, 2567483615, 11, 4294967295, 7, 2636928640, 15, 4022730752, 18, 1812433253> **)a1);
    while (*(_QWORD *)(a1 + 48) <= (unint64_t)v8);
    v9 = *(_QWORD *)(a1 + 16);
    if (v9 >= 0x3F)
      v10 = 0;
    else
      v10 = v2 << (v9 + 1);
    v2 = v10 + (*(_DWORD *)(a1 + 60) & v8);
  }
  return v2;
}

std::mersenne_twister_engine<unsigned int, 32, 624, 397, 31, 2567483615, 11, 4294967295, 7, 2636928640, 15, 4022730752, 18, 1812433253>::result_type std::mersenne_twister_engine<unsigned int,32ul,624ul,397ul,31ul,2567483615u,11ul,4294967295u,7ul,2636928640u,15ul,4022730752u,18ul,1812433253u>::operator()(std::mersenne_twister_engine<unsigned int, 32, 624, 397, 31, 2567483615, 11, 4294967295, 7, 2636928640, 15, 4022730752, 18, 1812433253> *this)
{
  size_t i;
  size_t v2;
  std::mersenne_twister_engine<unsigned int, 32, 624, 397, 31, 2567483615, 11, 4294967295, 7, 2636928640, 15, 4022730752, 18, 1812433253>::result_type v3;

  i = this->__i_;
  v2 = (i + 1) % 0x270;
  v3 = this->__x_[(i + 397) % 0x270] ^ ((this->__x_[v2] & 0x7FFFFFFE | this->__x_[i] & 0x80000000) >> 1) ^ ((int)(this->__x_[v2] << 31) >> 31) & 0x9908B0DF;
  this->__x_[i] = v3;
  this->__i_ = v2;
  LODWORD(i) = ((v3 ^ (v3 >> 11)) << 7) & 0x9D2C5680 ^ v3 ^ (v3 >> 11);
  return ((_DWORD)i << 15) & 0xEFC60000 ^ i ^ ((((_DWORD)i << 15) & 0xEFC60000 ^ i) >> 18);
}

char *std::vector<unsigned long>::assign(char **a1, unint64_t a2, _QWORD *a3)
{
  uint64_t v6;
  char *result;
  uint64_t v8;
  unint64_t v9;
  char *v10;
  char *v11;
  uint64_t v12;
  char *v13;
  unint64_t v14;
  uint64_t v15;
  char *v16;
  char *v17;
  uint64_t v18;

  v6 = (uint64_t)a1[2];
  result = *a1;
  if (a2 <= (v6 - (uint64_t)result) >> 3)
  {
    v13 = a1[1];
    v14 = (v13 - result) >> 3;
    if (v14 >= a2)
      v15 = a2;
    else
      v15 = (v13 - result) >> 3;
    if (v15)
    {
      v16 = result;
      do
      {
        *(_QWORD *)v16 = *a3;
        v16 += 8;
        --v15;
      }
      while (v15);
    }
    if (a2 <= v14)
    {
      a1[1] = &result[8 * a2];
    }
    else
    {
      v17 = &v13[8 * (a2 - v14)];
      v18 = 8 * a2 - 8 * v14;
      do
      {
        *(_QWORD *)v13 = *a3;
        v13 += 8;
        v18 -= 8;
      }
      while (v18);
      a1[1] = v17;
    }
  }
  else
  {
    if (result)
    {
      a1[1] = result;
      operator delete(result);
      v6 = 0;
      *a1 = 0;
      a1[1] = 0;
      a1[2] = 0;
    }
    if (a2 >> 61)
      std::vector<std::unique_ptr<VCPProtoKeypoint>>::__throw_length_error[abi:ne180100]();
    v8 = v6 >> 2;
    if (v6 >> 2 <= a2)
      v8 = a2;
    if ((unint64_t)v6 >= 0x7FFFFFFFFFFFFFF8)
      v9 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v9 = v8;
    result = std::vector<void *>::__vallocate[abi:ne180100](a1, v9);
    v10 = a1[1];
    v11 = &v10[8 * a2];
    v12 = 8 * a2;
    do
    {
      *(_QWORD *)v10 = *a3;
      v10 += 8;
      v12 -= 8;
    }
    while (v12);
    a1[1] = v11;
  }
  return result;
}

uint64_t *std::vector<dlib::matrix<float,1l,0l,dlib::memory_manager_stateless_kernel_1<char>,dlib::row_major_layout>>::assign(uint64_t *result, unint64_t a2, uint64_t *a3)
{
  uint64_t *v5;
  uint64_t *v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t *v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t *v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t *v20;

  v5 = result;
  v6 = (uint64_t *)*result;
  if (0xAAAAAAAAAAAAAAABLL * ((result[2] - *result) >> 3) >= a2)
  {
    v13 = (result[1] - (uint64_t)v6) / 24;
    if (v13 >= a2)
      v14 = a2;
    else
      v14 = (result[1] - (uint64_t)v6) / 24;
    for (; v14; --v14)
    {
      result = dlib::matrix<float,1l,0l,dlib::memory_manager_stateless_kernel_1<char>,dlib::row_major_layout>::operator=(v6, a3);
      v6 += 3;
    }
    if (a2 <= v13)
    {
      v18 = v5[1];
      v19 = *v5 + 24 * a2;
      while (v18 != v19)
      {
        v20 = *(uint64_t **)(v18 - 24);
        v18 -= 24;
        result = v20;
        if (v20)
          result = (uint64_t *)MEMORY[0x1BCCA128C](result, 0x1000C8052888210);
      }
      v5[1] = v19;
    }
    else
    {
      v15 = (uint64_t *)v5[1];
      v16 = &v15[3 * (a2 - v13)];
      v17 = -24 * v13 + 24 * a2;
      do
      {
        result = dlib::matrix<float,1l,0l,dlib::memory_manager_stateless_kernel_1<char>,dlib::row_major_layout>::matrix(v15, (int **)a3);
        v15 += 3;
        v17 -= 24;
      }
      while (v17);
      v5[1] = (uint64_t)v16;
    }
  }
  else
  {
    std::vector<dlib::matrix<float,1l,0l,dlib::memory_manager_stateless_kernel_1<char>,dlib::row_major_layout>>::__vdeallocate((void **)result);
    if (a2 > 0xAAAAAAAAAAAAAAALL)
      std::vector<std::unique_ptr<VCPProtoKeypoint>>::__throw_length_error[abi:ne180100]();
    v7 = 0x5555555555555556 * ((v5[2] - *v5) >> 3);
    if (v7 <= a2)
      v7 = a2;
    if (0xAAAAAAAAAAAAAAABLL * ((v5[2] - *v5) >> 3) >= 0x555555555555555)
      v8 = 0xAAAAAAAAAAAAAAALL;
    else
      v8 = v7;
    std::vector<dlib::matrix<float,1l,0l,dlib::memory_manager_stateless_kernel_1<char>,dlib::row_major_layout>>::__vallocate[abi:ne180100](v5, v8);
    v9 = (uint64_t *)v5[1];
    v10 = 3 * a2;
    v11 = &v9[3 * a2];
    v12 = 8 * v10;
    do
    {
      result = dlib::matrix<float,1l,0l,dlib::memory_manager_stateless_kernel_1<char>,dlib::row_major_layout>::matrix(v9, (int **)a3);
      v9 += 3;
      v12 -= 24;
    }
    while (v12);
    v5[1] = (uint64_t)v11;
  }
  return result;
}

void sub_1B6CF2700(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

_QWORD *std::vector<unsigned long>::vector(_QWORD *a1, unint64_t a2, _QWORD *a3)
{
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    std::vector<void *>::__vallocate[abi:ne180100](a1, a2);
    v6 = (_QWORD *)a1[1];
    v7 = &v6[a2];
    v8 = 8 * a2;
    do
    {
      *v6++ = *a3;
      v8 -= 8;
    }
    while (v8);
    a1[1] = v7;
  }
  return a1;
}

void sub_1B6CF2770(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

char *std::vector<dlib::matrix<float,1l,0l,dlib::memory_manager_stateless_kernel_1<char>,dlib::row_major_layout>>::__vallocate[abi:ne180100](_QWORD *a1, unint64_t a2)
{
  char *result;
  uint64_t v4;

  if (a2 >= 0xAAAAAAAAAAAAAABLL)
    std::vector<std::unique_ptr<VCPProtoKeypoint>>::__throw_length_error[abi:ne180100]();
  result = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::tuple<float,unsigned long,unsigned long>>>((uint64_t)(a1 + 2), a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[24 * v4];
  return result;
}

uint64_t *dlib::matrix<float,1l,0l,dlib::memory_manager_stateless_kernel_1<char>,dlib::row_major_layout>::operator=(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4;
  int *v5;
  _DWORD *v6;
  int v7;

  if (a1 != a2)
  {
    v4 = a2[1];
    if (a1[1] != v4)
    {
      dlib::row_major_layout::layout<float,1l,0l,dlib::memory_manager_stateless_kernel_1<char>,4>::set_size(a1, 1, v4);
      v4 = a2[1];
    }
    if (v4 >= 1)
    {
      v5 = (int *)*a2;
      v6 = (_DWORD *)*a1;
      do
      {
        v7 = *v5++;
        *v6++ = v7;
        --v4;
      }
      while (v4);
    }
  }
  return a1;
}

uint64_t *dlib::matrix<float,1l,0l,dlib::memory_manager_stateless_kernel_1<char>,dlib::row_major_layout>::operator=<dlib::matrix_mul_scal_exp<dlib::matrix<float,1l,0l,dlib::memory_manager_stateless_kernel_1<char>,dlib::row_major_layout>,true>>(uint64_t *a1, uint64_t a2)
{
  uint64_t v4;

  v4 = *(_QWORD *)(*(_QWORD *)a2 + 8);
  if (a1[1] != v4)
    dlib::row_major_layout::layout<float,1l,0l,dlib::memory_manager_stateless_kernel_1<char>,4>::set_size(a1, 1, v4);
  dlib::blas_bindings::matrix_assign_blas<float,1l,0l,dlib::memory_manager_stateless_kernel_1<char>,dlib::row_major_layout,1l,0l,true>((float **)a1, a2);
  return a1;
}

float **dlib::blas_bindings::matrix_assign_blas<float,1l,0l,dlib::memory_manager_stateless_kernel_1<char>,dlib::row_major_layout,1l,0l,true>(float **result, uint64_t a2)
{
  float v2;
  uint64_t v3;
  float *v4;
  float *v5;
  float v6;
  float v7;

  v2 = *(float *)(a2 + 8);
  v4 = **(float ***)a2;
  v3 = *(_QWORD *)(*(_QWORD *)a2 + 8);
  v5 = *result;
  if (v2 == 1.0)
  {
    if (v3 >= 1)
    {
      do
      {
        v6 = *v4++;
        *v5++ = v6;
        --v3;
      }
      while (v3);
    }
  }
  else if (v3 >= 1)
  {
    do
    {
      v7 = *v4++;
      *v5++ = v2 * v7;
      --v3;
    }
    while (v3);
  }
  return result;
}

_QWORD *std::vector<std::vector<float>>::vector(_QWORD *a1, unint64_t a2, uint64_t a3)
{
  _QWORD *v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    std::vector<dlib::matrix<float,1l,0l,dlib::memory_manager_stateless_kernel_1<char>,dlib::row_major_layout>>::__vallocate[abi:ne180100](a1, a2);
    v6 = (_QWORD *)a1[1];
    v7 = 3 * a2;
    v8 = &v6[3 * a2];
    v9 = 8 * v7;
    do
    {
      *v6 = 0;
      v6[1] = 0;
      v6[2] = 0;
      std::vector<float>::__init_with_size[abi:ne180100]<float *,float *>(v6, *(const void **)a3, *(_QWORD *)(a3 + 8), (uint64_t)(*(_QWORD *)(a3 + 8) - *(_QWORD *)a3) >> 2);
      v6 += 3;
      v9 -= 24;
    }
    while (v9);
    a1[1] = v8;
  }
  return a1;
}

void sub_1B6CF2988(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

_QWORD *std::vector<float>::__init_with_size[abi:ne180100]<float *,float *>(_QWORD *result, const void *a2, uint64_t a3, unint64_t a4)
{
  _QWORD *v6;
  uint64_t v7;
  size_t v8;

  if (a4)
  {
    v6 = result;
    result = std::vector<int>::__vallocate[abi:ne180100](result, a4);
    v7 = v6[1];
    v8 = a3 - (_QWORD)a2;
    if (v8)
      result = memmove((void *)v6[1], a2, v8);
    v6[1] = v7 + v8;
  }
  return result;
}

void sub_1B6CF2A04(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

_QWORD *std::vector<std::vector<float>>::__init_with_size[abi:ne180100]<std::vector<float>*,std::vector<float>*>(_QWORD *result, uint64_t a2, uint64_t a3, unint64_t a4)
{
  _QWORD *v6;

  if (a4)
  {
    v6 = result;
    std::vector<dlib::matrix<float,1l,0l,dlib::memory_manager_stateless_kernel_1<char>,dlib::row_major_layout>>::__vallocate[abi:ne180100](result, a4);
    result = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::vector<float>>,std::vector<float>*,std::vector<float>*,std::vector<float>*>((uint64_t)(v6 + 2), a2, a3, (_QWORD *)v6[1]);
    v6[1] = result;
  }
  return result;
}

void sub_1B6CF2A84(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  uint64_t v9;
  uint64_t v10;

  *(_QWORD *)(v9 + 8) = v10;
  std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

_QWORD *std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::vector<float>>,std::vector<float>*,std::vector<float>*,std::vector<float>*>(uint64_t a1, uint64_t a2, uint64_t a3, _QWORD *a4)
{
  _QWORD *v4;
  uint64_t v6;
  _QWORD v8[3];
  char v9;
  _QWORD *v10;
  _QWORD *v11;

  v4 = a4;
  v10 = a4;
  v11 = a4;
  v8[0] = a1;
  v8[1] = &v10;
  v8[2] = &v11;
  v9 = 0;
  if (a2 != a3)
  {
    v6 = a2;
    do
    {
      *v4 = 0;
      v4[1] = 0;
      v4[2] = 0;
      std::vector<float>::__init_with_size[abi:ne180100]<float *,float *>(v4, *(const void **)v6, *(_QWORD *)(v6 + 8), (uint64_t)(*(_QWORD *)(v6 + 8) - *(_QWORD *)v6) >> 2);
      v4 = v11 + 3;
      v11 += 3;
      v6 += 24;
    }
    while (v6 != a3);
  }
  v9 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<float>>,std::vector<float>*>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v8);
  return v4;
}

void sub_1B6CF2B40(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<float>>,std::vector<float>*>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<float>>,std::vector<float>*>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(_BYTE *)(a1 + 24))
    std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<float>>,std::vector<float>*>::operator()[abi:ne180100](a1);
  return a1;
}

void std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<float>>,std::vector<float>*>::operator()[abi:ne180100](uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  void *v4;
  void *v5;

  v1 = **(_QWORD **)(a1 + 16);
  v2 = **(_QWORD **)(a1 + 8);
  if (v1 != v2)
  {
    v3 = **(_QWORD **)(a1 + 16);
    do
    {
      v5 = *(void **)(v3 - 24);
      v3 -= 24;
      v4 = v5;
      if (v5)
      {
        *(_QWORD *)(v1 - 16) = v4;
        operator delete(v4);
      }
      v1 = v3;
    }
    while (v3 != v2);
  }
}

uint64_t *std::vector<dlib::matrix<float,1l,0l,dlib::memory_manager_stateless_kernel_1<char>,dlib::row_major_layout>>::__assign_with_size[abi:ne180100]<dlib::matrix<float,1l,0l,dlib::memory_manager_stateless_kernel_1<char>,dlib::row_major_layout>*,dlib::matrix<float,1l,0l,dlib::memory_manager_stateless_kernel_1<char>,dlib::row_major_layout>*>(uint64_t a1, int **a2, int **a3, unint64_t a4)
{
  uint64_t v8;
  uint64_t *v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t *result;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t *v17;

  v8 = a1 + 16;
  v9 = *(uint64_t **)a1;
  if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a1 + 16) - *(_QWORD *)a1) >> 3) < a4)
  {
    std::vector<dlib::matrix<float,1l,0l,dlib::memory_manager_stateless_kernel_1<char>,dlib::row_major_layout>>::__vdeallocate((void **)a1);
    if (a4 > 0xAAAAAAAAAAAAAAALL)
      std::vector<std::unique_ptr<VCPProtoKeypoint>>::__throw_length_error[abi:ne180100]();
    v10 = 0x5555555555555556 * ((uint64_t)(*(_QWORD *)(a1 + 16) - *(_QWORD *)a1) >> 3);
    if (v10 <= a4)
      v10 = a4;
    if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a1 + 16) - *(_QWORD *)a1) >> 3) >= 0x555555555555555)
      v11 = 0xAAAAAAAAAAAAAAALL;
    else
      v11 = v10;
    std::vector<dlib::matrix<float,1l,0l,dlib::memory_manager_stateless_kernel_1<char>,dlib::row_major_layout>>::__vallocate[abi:ne180100]((_QWORD *)a1, v11);
    result = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<dlib::matrix<float,1l,0l,dlib::memory_manager_stateless_kernel_1<char>,dlib::row_major_layout>>,dlib::matrix<float,1l,0l,dlib::memory_manager_stateless_kernel_1<char>,dlib::row_major_layout>*,dlib::matrix<float,1l,0l,dlib::memory_manager_stateless_kernel_1<char>,dlib::row_major_layout>*,dlib::matrix<float,1l,0l,dlib::memory_manager_stateless_kernel_1<char>,dlib::row_major_layout>*>(v8, a2, a3, *(uint64_t **)(a1 + 8));
    goto LABEL_11;
  }
  if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a1 + 8) - (_QWORD)v9) >> 3) < a4)
  {
    v13 = (uint64_t *)&a2[(uint64_t)(*(_QWORD *)(a1 + 8) - (_QWORD)v9) >> 3];
    std::__unwrap_and_dispatch[abi:ne180100]<std::__overload<std::__copy_loop<std::_ClassicAlgPolicy>,std::__copy_trivial>,dlib::matrix<float,1l,0l,dlib::memory_manager_stateless_kernel_1<char>,dlib::row_major_layout> *,dlib::matrix<float,1l,0l,dlib::memory_manager_stateless_kernel_1<char>,dlib::row_major_layout> *,dlib::matrix<float,1l,0l,dlib::memory_manager_stateless_kernel_1<char>,dlib::row_major_layout> *,0>((uint64_t *)a2, v13, v9);
    result = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<dlib::matrix<float,1l,0l,dlib::memory_manager_stateless_kernel_1<char>,dlib::row_major_layout>>,dlib::matrix<float,1l,0l,dlib::memory_manager_stateless_kernel_1<char>,dlib::row_major_layout>*,dlib::matrix<float,1l,0l,dlib::memory_manager_stateless_kernel_1<char>,dlib::row_major_layout>*,dlib::matrix<float,1l,0l,dlib::memory_manager_stateless_kernel_1<char>,dlib::row_major_layout>*>(v8, (int **)v13, a3, *(uint64_t **)(a1 + 8));
LABEL_11:
    *(_QWORD *)(a1 + 8) = result;
    return result;
  }
  result = std::__unwrap_and_dispatch[abi:ne180100]<std::__overload<std::__copy_loop<std::_ClassicAlgPolicy>,std::__copy_trivial>,dlib::matrix<float,1l,0l,dlib::memory_manager_stateless_kernel_1<char>,dlib::row_major_layout> *,dlib::matrix<float,1l,0l,dlib::memory_manager_stateless_kernel_1<char>,dlib::row_major_layout> *,dlib::matrix<float,1l,0l,dlib::memory_manager_stateless_kernel_1<char>,dlib::row_major_layout> *,0>((uint64_t *)a2, (uint64_t *)a3, v9);
  v15 = v14;
  v16 = *(_QWORD *)(a1 + 8);
  if (v16 != v14)
  {
    do
    {
      v17 = *(uint64_t **)(v16 - 24);
      v16 -= 24;
      result = v17;
      if (v17)
        result = (uint64_t *)MEMORY[0x1BCCA128C](result, 0x1000C8052888210);
    }
    while (v16 != v15);
  }
  *(_QWORD *)(a1 + 8) = v15;
  return result;
}

void sub_1B6CF2D40(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

void sub_1B6CF2D48(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

uint64_t *std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<dlib::matrix<float,1l,0l,dlib::memory_manager_stateless_kernel_1<char>,dlib::row_major_layout>>,dlib::matrix<float,1l,0l,dlib::memory_manager_stateless_kernel_1<char>,dlib::row_major_layout>*,dlib::matrix<float,1l,0l,dlib::memory_manager_stateless_kernel_1<char>,dlib::row_major_layout>*,dlib::matrix<float,1l,0l,dlib::memory_manager_stateless_kernel_1<char>,dlib::row_major_layout>*>(uint64_t a1, int **a2, int **a3, uint64_t *a4)
{
  uint64_t *v4;
  int **v6;
  _QWORD v8[3];
  char v9;
  uint64_t *v10;
  uint64_t *v11;

  v4 = a4;
  v10 = a4;
  v11 = a4;
  v8[0] = a1;
  v8[1] = &v10;
  v8[2] = &v11;
  v9 = 0;
  if (a2 != a3)
  {
    v6 = a2;
    do
    {
      dlib::matrix<float,1l,0l,dlib::memory_manager_stateless_kernel_1<char>,dlib::row_major_layout>::matrix(v4, v6);
      v6 += 3;
      v4 = v11 + 3;
      v11 += 3;
    }
    while (v6 != a3);
  }
  v9 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<dlib::matrix<float,1l,0l,dlib::memory_manager_stateless_kernel_1<char>,dlib::row_major_layout>>,dlib::matrix<float,1l,0l,dlib::memory_manager_stateless_kernel_1<char>,dlib::row_major_layout>*>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v8);
  return v4;
}

void sub_1B6CF2DDC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<dlib::matrix<float,1l,0l,dlib::memory_manager_stateless_kernel_1<char>,dlib::row_major_layout>>,dlib::matrix<float,1l,0l,dlib::memory_manager_stateless_kernel_1<char>,dlib::row_major_layout>*>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<dlib::matrix<float,1l,0l,dlib::memory_manager_stateless_kernel_1<char>,dlib::row_major_layout>>,dlib::matrix<float,1l,0l,dlib::memory_manager_stateless_kernel_1<char>,dlib::row_major_layout>*>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(_BYTE *)(a1 + 24))
    std::_AllocatorDestroyRangeReverse<std::allocator<dlib::matrix<float,1l,0l,dlib::memory_manager_stateless_kernel_1<char>,dlib::row_major_layout>>,dlib::matrix<float,1l,0l,dlib::memory_manager_stateless_kernel_1<char>,dlib::row_major_layout>*>::operator()[abi:ne180100](a1);
  return a1;
}

uint64_t std::_AllocatorDestroyRangeReverse<std::allocator<dlib::matrix<float,1l,0l,dlib::memory_manager_stateless_kernel_1<char>,dlib::row_major_layout>>,dlib::matrix<float,1l,0l,dlib::memory_manager_stateless_kernel_1<char>,dlib::row_major_layout>*>::operator()[abi:ne180100](uint64_t result)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v1 = **(_QWORD **)(result + 16);
  v2 = **(_QWORD **)(result + 8);
  while (v1 != v2)
  {
    v3 = *(_QWORD *)(v1 - 24);
    v1 -= 24;
    result = v3;
    if (v3)
      result = MEMORY[0x1BCCA128C](result, 0x1000C8052888210);
  }
  return result;
}

uint64_t *std::__unwrap_and_dispatch[abi:ne180100]<std::__overload<std::__copy_loop<std::_ClassicAlgPolicy>,std::__copy_trivial>,dlib::matrix<float,1l,0l,dlib::memory_manager_stateless_kernel_1<char>,dlib::row_major_layout> *,dlib::matrix<float,1l,0l,dlib::memory_manager_stateless_kernel_1<char>,dlib::row_major_layout> *,dlib::matrix<float,1l,0l,dlib::memory_manager_stateless_kernel_1<char>,dlib::row_major_layout> *,0>(uint64_t *a1, uint64_t *a2, uint64_t *a3)
{
  uint64_t *v4;

  v4 = a1;
  if (a1 != a2)
  {
    do
    {
      dlib::matrix<float,1l,0l,dlib::memory_manager_stateless_kernel_1<char>,dlib::row_major_layout>::operator=(a3, v4);
      v4 += 3;
      a3 += 3;
    }
    while (v4 != a2);
    return a2;
  }
  return v4;
}

char *std::vector<int>::__assign_with_size[abi:ne180100]<int *,int *>(char *result, char *__src, uint64_t a3, unint64_t a4)
{
  _QWORD *v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  unint64_t v11;
  void **v12;
  char *v13;
  _BYTE *v14;
  unint64_t v15;
  char *v16;
  size_t v17;
  void *v18;
  char *v19;

  v7 = result;
  v8 = *((_QWORD *)result + 2);
  v9 = *(char **)result;
  if (a4 > (v8 - *(_QWORD *)result) >> 2)
  {
    if (v9)
    {
      *((_QWORD *)result + 1) = v9;
      operator delete(v9);
      v8 = 0;
      *v7 = 0;
      v7[1] = 0;
      v7[2] = 0;
    }
    if (a4 >> 62)
      std::vector<std::unique_ptr<VCPProtoKeypoint>>::__throw_length_error[abi:ne180100]();
    v10 = v8 >> 1;
    if (v8 >> 1 <= a4)
      v10 = a4;
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFFCLL)
      v11 = 0x3FFFFFFFFFFFFFFFLL;
    else
      v11 = v10;
    result = std::vector<int>::__vallocate[abi:ne180100](v7, v11);
    v13 = (char *)v7[1];
    v12 = (void **)(v7 + 1);
    v9 = v13;
LABEL_16:
    v17 = a3 - (_QWORD)__src;
    if (v17)
    {
      v18 = v9;
      v19 = __src;
      goto LABEL_18;
    }
    goto LABEL_19;
  }
  v12 = (void **)(result + 8);
  v14 = (_BYTE *)*((_QWORD *)result + 1);
  v15 = (v14 - v9) >> 2;
  if (v15 >= a4)
    goto LABEL_16;
  v16 = &__src[4 * v15];
  if (v14 != v9)
  {
    result = (char *)memmove(*(void **)result, __src, v14 - v9);
    v9 = (char *)*v12;
  }
  v17 = a3 - (_QWORD)v16;
  if (v17)
  {
    v18 = v9;
    v19 = v16;
LABEL_18:
    result = (char *)memmove(v18, v19, v17);
  }
LABEL_19:
  *v12 = &v9[v17];
  return result;
}

uint64_t *dlib::matrix<float,1l,0l,dlib::memory_manager_stateless_kernel_1<char>,dlib::row_major_layout>::matrix<dlib::matrix_op<dlib::op_uniform_matrix_3<float>>>(uint64_t *a1, uint64_t *a2)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = (uint64_t)&unk_1E6B131D0;
  dlib::row_major_layout::layout<float,1l,0l,dlib::memory_manager_stateless_kernel_1<char>,4>::set_size(a1, *a2, a2[1]);
  dlib::matrix_assign_big<dlib::matrix<float,1l,0l,dlib::memory_manager_stateless_kernel_1<char>,dlib::row_major_layout>,dlib::matrix_op<dlib::op_uniform_matrix_3<float>>>(a1, (uint64_t)a2);
  return a1;
}

void sub_1B6CF3024(_Unwind_Exception *exception_object)
{
  _QWORD *v1;

  if (*v1)
    MEMORY[0x1BCCA128C](*v1, 0x1000C8052888210);
  _Unwind_Resume(exception_object);
}

_QWORD *dlib::matrix_assign_big<dlib::matrix<float,1l,0l,dlib::memory_manager_stateless_kernel_1<char>,dlib::row_major_layout>,dlib::matrix_op<dlib::op_uniform_matrix_3<float>>>(_QWORD *result, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _DWORD *v5;
  uint64_t v6;
  _DWORD *v7;
  uint64_t v8;

  v2 = *(_QWORD *)a2;
  if (*(uint64_t *)a2 >= 1)
  {
    v3 = 0;
    v4 = *(_QWORD *)(a2 + 8);
    v5 = (_DWORD *)*result;
    v6 = 4 * result[1];
    do
    {
      v7 = v5;
      v8 = v4;
      if (v4 >= 1)
      {
        do
        {
          *v7++ = *(_DWORD *)(a2 + 16);
          --v8;
        }
        while (v8);
      }
      ++v3;
      v5 = (_DWORD *)((char *)v5 + v6);
    }
    while (v3 != v2);
  }
  return result;
}

uint64_t *dlib::matrix<float,1l,0l,dlib::memory_manager_stateless_kernel_1<char>,dlib::row_major_layout>::matrix<dlib::matrix_mul_scal_exp<dlib::matrix<float,1l,0l,dlib::memory_manager_stateless_kernel_1<char>,dlib::row_major_layout>,true>>(uint64_t *a1, uint64_t a2)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = (uint64_t)&unk_1E6B131D0;
  dlib::row_major_layout::layout<float,1l,0l,dlib::memory_manager_stateless_kernel_1<char>,4>::set_size(a1, 1, *(_QWORD *)(*(_QWORD *)a2 + 8));
  dlib::blas_bindings::matrix_assign_blas<float,1l,0l,dlib::memory_manager_stateless_kernel_1<char>,dlib::row_major_layout,1l,0l,true>((float **)a1, a2);
  return a1;
}

void sub_1B6CF30F0(_Unwind_Exception *exception_object)
{
  _QWORD *v1;

  if (*v1)
    MEMORY[0x1BCCA128C](*v1, 0x1000C8052888210);
  _Unwind_Resume(exception_object);
}

float *dlib::default_matrix_multiply<dlib::matrix<float,1l,1l,dlib::memory_manager_stateless_kernel_1<char>,dlib::row_major_layout>,dlib::matrix_subtract_exp<dlib::matrix<float,0l,0l,dlib::memory_manager_stateless_kernel_1<char>,dlib::row_major_layout>,dlib::matrix<float,0l,0l,dlib::memory_manager_stateless_kernel_1<char>,dlib::row_major_layout>>,dlib::matrix_op<dlib::op_trans<dlib::matrix_subtract_exp<dlib::matrix<float,0l,0l,dlib::memory_manager_stateless_kernel_1<char>,dlib::row_major_layout>,dlib::matrix<float,0l,0l,dlib::memory_manager_stateless_kernel_1<char>,dlib::row_major_layout>>>>>(float *result, uint64_t **a2, uint64_t ***a3)
{
  uint64_t *v3;
  uint64_t v4;
  uint64_t **v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  float *v26;
  float v27;
  float *v28;
  float *v29;
  float *v30;
  uint64_t v31;
  float v32;
  float v33;
  float v34;
  float v35;
  float v36;
  float v37;
  float v38;
  uint64_t i;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  float *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t *v47;
  float *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  float v55;
  uint64_t *v56;
  uint64_t v57;
  uint64_t v58;
  float *v59;
  float *v60;
  BOOL v61;
  uint64_t v62;
  float *v63;
  uint64_t *v64;
  uint64_t v65;
  uint64_t **v66;
  uint64_t v67;
  uint64_t v69;
  uint64_t v70;

  v63 = result;
  v3 = *a2;
  v4 = (*a2)[2];
  if (v4 >= 3
    && (v5 = *a3, v6 = **a3, v69 = v6[1], v69 >= 3)
    && (v62 = v3[1], v62 >= 3)
    && (v7 = v6[2], v7 >= 3)
    && (v62 * v4 > 900 || v7 * v69 >= 901))
  {
    for (i = 0; i < v62; i += 90)
    {
      v40 = 0;
      v41 = 0;
      if (v62 - 1 >= i + 89)
        v42 = i + 89;
      else
        v42 = v62 - 1;
      do
      {
        v43 = 0;
        v65 = v41 + 90;
        v67 = v40;
        v44 = v63;
        if (v4 - 1 >= v41 + 89)
          v45 = v41 + 89;
        else
          v45 = v4 - 1;
        do
        {
          if (v69 - 1 >= v43 + 89)
            v46 = v43 + 89;
          else
            v46 = v69 - 1;
          if (i <= v42)
          {
            v47 = a2[1];
            v48 = v44;
            v49 = i;
            do
            {
              if (v41 <= v45)
              {
                v50 = *v3;
                v51 = *v47;
                v52 = v47[2] * v49;
                v53 = v40;
                v54 = v41;
                do
                {
                  if (v43 <= v46)
                  {
                    result = 0;
                    v55 = *(float *)(v50 + 4 * (v54 + v49 * v4)) - *(float *)(v51 + 4 * (v52 + v54));
                    v56 = v5[1];
                    v57 = *v56;
                    v58 = v56[2];
                    v59 = (float *)(*v6 + v53);
                    v60 = (float *)(v57 + 4 * (v54 + v43 * v58));
                    do
                    {
                      v48[(_QWORD)result] = v48[(_QWORD)result] + (float)((float)(*v59 - *v60) * v55);
                      result = (float *)((char *)result + 1);
                      v59 += v7;
                      v60 += v58;
                    }
                    while ((uint64_t)result + v43 - 1 < v46);
                  }
                  v53 += 4;
                  v61 = v54++ < v45;
                }
                while (v61);
              }
              ++v48;
              v61 = v49++ < v42;
            }
            while (v61);
          }
          v43 += 90;
          v40 += 360 * v7;
          v44 += 90;
        }
        while (v43 < v69);
        v41 += 90;
        v40 = v67 + 360;
      }
      while (v65 < v4);
      v63 += 90;
    }
  }
  else
  {
    v70 = v3[1];
    if (v70 >= 1)
    {
      v8 = 0;
      v9 = 0;
      v66 = *a3;
      v10 = **a3;
      v11 = v10[1];
      v64 = a2[1];
      v12 = 4;
      do
      {
        if (v11 >= 1)
        {
          v13 = 0;
          v14 = *v3;
          v15 = *v64;
          v16 = v64[2];
          v17 = v16 * v9;
          v18 = *v10;
          v19 = v10[2];
          v20 = v66[1];
          v21 = *v20;
          v22 = v20[2];
          v23 = *v20 + 4;
          v24 = *v10 + 4;
          v25 = *v64 + v16 * v8 + 4;
          v26 = (float *)(*v3 + v12);
          do
          {
            v27 = (float)(*(float *)(v14 + 4 * v9 * v4) - *(float *)(v15 + 4 * v17))
                * (float)(*(float *)(v18 + 4 * v13 * v19) - *(float *)(v21 + 4 * v13 * v22));
            if (v4 >= 2)
            {
              result = v26;
              v28 = (float *)v25;
              v29 = (float *)v24;
              v30 = (float *)v23;
              v31 = v4 - 1;
              do
              {
                v32 = *result++;
                v33 = v32;
                v34 = *v28++;
                v35 = v34;
                v36 = *v29++;
                v37 = v36;
                v38 = *v30++;
                v27 = v27 + (float)((float)(v33 - v35) * (float)(v37 - v38));
                --v31;
              }
              while (v31);
            }
            v63[v9 + v13] = v27 + v63[v9 + v13];
            ++v13;
            v23 += 4 * v22;
            v24 += 4 * v19;
          }
          while (v13 != v11);
        }
        ++v9;
        v8 += 4;
        v12 += 4 * v4;
      }
      while (v9 != v70);
    }
  }
  return result;
}

float dlib::matrix_exp<dlib::matrix_multiply_exp<dlib::matrix_op<dlib::op_trans<dlib::matrix<float,0l,0l,dlib::memory_manager_stateless_kernel_1<char>,dlib::row_major_layout>>>,dlib::matrix<float,0l,0l,dlib::memory_manager_stateless_kernel_1<char>,dlib::row_major_layout>>>::operator()(uint64_t **a1, uint64_t a2)
{
  float **v2;
  float *v3;
  uint64_t v4;
  float *v5;
  uint64_t v6;
  float *v7;
  float result;
  uint64_t v9;
  float *v10;
  uint64_t v11;
  float *v12;
  float v13;
  float *v14;
  uint64_t v15;
  float *v16;
  uint64_t v17;
  uint64_t v18;
  float *v19;

  v2 = (float **)a1[1];
  v3 = v2[2];
  v4 = **a1;
  v5 = *(float **)v4;
  v6 = *(_QWORD *)(v4 + 8);
  if (v3 == (float *)1)
  {
    v7 = *v2;
    result = v5[a2] * **v2;
    if (v6 >= 2)
    {
      v9 = *(_QWORD *)(v4 + 16);
      v10 = v7 + 1;
      v11 = v6 - 1;
      v12 = &v5[v9 + a2];
      do
      {
        v13 = *v10++;
        result = result + (float)(*v12 * v13);
        v12 += v9;
        --v11;
      }
      while (v11);
    }
  }
  else
  {
    v14 = *v2;
    result = *v5 * v14[a2];
    if (v6 >= 2)
    {
      v15 = *(_QWORD *)(v4 + 16);
      v16 = &v14[(_QWORD)v3 + a2];
      v17 = v6 - 1;
      v18 = 4 * (_QWORD)v3;
      v19 = &v5[v15];
      do
      {
        result = result + (float)(*v19 * *v16);
        v16 = (float *)((char *)v16 + v18);
        v19 += v15;
        --v17;
      }
      while (v17);
    }
  }
  return result;
}

float dlib::matrix_exp<dlib::matrix_multiply_exp<dlib::matrix<float,0l,0l,dlib::memory_manager_stateless_kernel_1<char>,dlib::row_major_layout>,dlib::matrix<float,0l,0l,dlib::memory_manager_stateless_kernel_1<char>,dlib::row_major_layout>>>::operator()(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  float *v4;
  uint64_t v5;
  uint64_t v6;
  float *v7;
  float result;
  float *v9;
  uint64_t v10;
  float *v11;
  float v12;
  float v13;
  float v14;
  float *v15;
  uint64_t v16;
  float *v17;
  uint64_t v18;
  float *v19;
  float v20;

  v2 = *(_QWORD *)(a1 + 8);
  v3 = *(_QWORD *)(v2 + 16);
  v4 = **(float ***)a1;
  v5 = *(_QWORD *)(*(_QWORD *)a1 + 16);
  if (v3 == 1)
  {
    v6 = v5 * a2;
    v7 = *(float **)v2;
    result = v4[v5 * a2] * *v7;
    if (v5 >= 2)
    {
      v9 = v7 + 1;
      v10 = v5 - 1;
      v11 = &v4[v6 + 1];
      do
      {
        v12 = *v11++;
        v13 = v12;
        v14 = *v9++;
        result = result + (float)(v13 * v14);
        --v10;
      }
      while (v10);
    }
  }
  else
  {
    v15 = *(float **)v2;
    result = *v4 * *(float *)(*(_QWORD *)v2 + 4 * a2);
    if (v5 >= 2)
    {
      v16 = v5 - 1;
      v17 = &v15[v3 + a2];
      v18 = 4 * v3;
      v19 = v4 + 1;
      do
      {
        v20 = *v19++;
        result = result + (float)(v20 * *v17);
        v17 = (float *)((char *)v17 + v18);
        --v16;
      }
      while (v16);
    }
  }
  return result;
}

float dlib::matrix_exp<dlib::matrix_multiply_exp<dlib::matrix<float,0l,0l,dlib::memory_manager_stateless_kernel_1<char>,dlib::row_major_layout>,dlib::matrix_op<dlib::op_trans<dlib::matrix<float,0l,0l,dlib::memory_manager_stateless_kernel_1<char>,dlib::row_major_layout>>>>>::operator()(float ***a1, uint64_t a2)
{
  uint64_t v2;
  float *v3;
  uint64_t v4;
  uint64_t v5;
  float *v6;
  float result;
  uint64_t v8;
  float *v9;
  float *v10;
  float v11;
  float v12;
  float v13;
  float *v14;
  uint64_t v15;
  uint64_t v16;
  float *v17;
  float *v18;
  float v19;
  float v20;
  float v21;

  v2 = (uint64_t)*a1[1];
  v3 = **a1;
  v4 = (uint64_t)(*a1)[2];
  if (*(_QWORD *)(v2 + 8) == 1)
  {
    v5 = v4 * a2;
    v6 = *(float **)v2;
    result = v3[v4 * a2] * *v6;
    if (v4 >= 2)
    {
      v8 = v4 - 1;
      v9 = v6 + 1;
      v10 = &v3[v5 + 1];
      do
      {
        v11 = *v10++;
        v12 = v11;
        v13 = *v9++;
        result = result + (float)(v12 * v13);
        --v8;
      }
      while (v8);
    }
  }
  else
  {
    v14 = *(float **)v2;
    v15 = *(_QWORD *)(v2 + 16) * a2;
    result = *v3 * v14[v15];
    if (v4 >= 2)
    {
      v16 = v4 - 1;
      v17 = &v14[v15 + 1];
      v18 = v3 + 1;
      do
      {
        v19 = *v18++;
        v20 = v19;
        v21 = *v17++;
        result = result + (float)(v20 * v21);
        --v16;
      }
      while (v16);
    }
  }
  return result;
}

float dlib::sum<dlib::matrix_op<dlib::op_squared<dlib::matrix<float,0l,0l,dlib::memory_manager_stateless_kernel_1<char>,dlib::row_major_layout>>>>(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  float result;
  float *v7;
  uint64_t v8;
  float v9;

  v1 = *(_QWORD **)a1;
  v2 = *(_QWORD *)(*(_QWORD *)a1 + 8);
  if (v2 < 1)
    return 0.0;
  v3 = 0;
  v4 = 0;
  v5 = v1[2];
  result = 0.0;
  do
  {
    if (v5 >= 1)
    {
      v7 = (float *)(*v1 + v3);
      v8 = v1[2];
      do
      {
        v9 = *v7++;
        result = result + (float)(v9 * v9);
        --v8;
      }
      while (v8);
    }
    ++v4;
    v3 += 4 * v5;
  }
  while (v4 != v2);
  return result;
}

std::vector<int> *__cdecl std::vector<int>::vector(std::vector<int> *this, std::vector<int>::size_type __n, const std::vector<int>::value_type *__x)
{
  std::vector<int>::pointer end;
  int *v7;
  std::vector<int>::size_type v8;

  this->__begin_ = 0;
  this->__end_ = 0;
  this->__end_cap_.__value_ = 0;
  if (__n)
  {
    std::vector<int>::__vallocate[abi:ne180100](this, __n);
    end = this->__end_;
    v7 = &end[__n];
    v8 = 4 * __n;
    do
    {
      *end++ = *__x;
      v8 -= 4;
    }
    while (v8);
    this->__end_ = v7;
  }
  return this;
}

void sub_1B6CF3760(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

_QWORD *std::vector<float>::vector(_QWORD *a1, unint64_t a2, _DWORD *a3)
{
  _DWORD *v6;
  _DWORD *v7;
  uint64_t v8;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    std::vector<int>::__vallocate[abi:ne180100](a1, a2);
    v6 = (_DWORD *)a1[1];
    v7 = &v6[a2];
    v8 = 4 * a2;
    do
    {
      *v6++ = *a3;
      v8 -= 4;
    }
    while (v8);
    a1[1] = v7;
  }
  return a1;
}

void sub_1B6CF37E0(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void OUTLINED_FUNCTION_0_0()
{
  JUMPOUT(0x1BCCA128CLL);
}

void VCPProtoBounds::VCPProtoBounds(VCPProtoBounds *this)
{
  this->super.super.isa = (Class)&off_1E6B13CD0;
}

void VCPProtoBounds::~VCPProtoBounds(VCPProtoBounds *this)
{
  PB::Base::~Base((PB::Base *)this);
  JUMPOUT(0x1BCCA12BCLL);
}

uint64_t VCPProtoBounds::formatText(VCPProtoBounds *this, PB::TextFormatter *a2, const char *a3)
{
  PB::TextFormatter::beginObject(a2, a3);
  PB::TextFormatter::format(a2, "height", this->_height);
  PB::TextFormatter::format(a2, "width", this->_width);
  PB::TextFormatter::format(a2, "x0", this->_x0);
  PB::TextFormatter::format(a2, "y0", this->_y0);
  return PB::TextFormatter::endObject(a2);
}

uint64_t VCPProtoBounds::readFrom(VCPProtoBounds *this, PB::Reader *a2)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  char v15;
  unsigned int v16;
  unint64_t v17;
  unint64_t v18;
  char v19;
  uint64_t result;

  v2 = *((_QWORD *)a2 + 1);
  v3 = *((_QWORD *)a2 + 2);
  v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      v8 = *(_QWORD *)a2;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
        break;
      v9 = 0;
      v10 = 0;
      v11 = 0;
      while (1)
      {
        v12 = v2 + 1;
        *((_QWORD *)a2 + 1) = v2 + 1;
        v13 = *(_BYTE *)(v8 + v2);
        v11 |= (unint64_t)(v13 & 0x7F) << v9;
        if ((v13 & 0x80) == 0)
          break;
        v9 += 7;
        v2 = v12;
        if (v10++ > 8)
        {
          v11 = 0;
          break;
        }
      }
      v2 = v12;
LABEL_23:
      if ((v11 & 7) == 4)
      {
        v4 = 0;
        return v4 == 0;
      }
      switch((v11 >> 3))
      {
        case 1u:
          if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > v3)
            goto LABEL_40;
          this->_x0 = *(double *)(v8 + v2);
          goto LABEL_39;
        case 2u:
          if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > v3)
            goto LABEL_40;
          this->_y0 = *(double *)(v8 + v2);
          goto LABEL_39;
        case 3u:
          if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > v3)
            goto LABEL_40;
          this->_width = *(double *)(v8 + v2);
          goto LABEL_39;
        case 4u:
          if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > v3)
          {
LABEL_40:
            *((_BYTE *)a2 + 24) = 1;
          }
          else
          {
            this->_height = *(double *)(v8 + v2);
LABEL_39:
            v2 = *((_QWORD *)a2 + 1) + 8;
            *((_QWORD *)a2 + 1) = v2;
          }
          break;
        default:
          result = PB::Reader::skip(a2);
          if (!(_DWORD)result)
            return result;
          v2 = *((_QWORD *)a2 + 1);
          break;
      }
      v3 = *((_QWORD *)a2 + 2);
      v4 = *((unsigned __int8 *)a2 + 24);
      if (v2 >= v3 || *((_BYTE *)a2 + 24))
        return v4 == 0;
    }
    v15 = 0;
    v16 = 0;
    v11 = 0;
    if (v2 <= v3)
      v17 = v3;
    else
      v17 = v2;
    while (v17 != v2)
    {
      v18 = v2++;
      v19 = *(_BYTE *)(v8 + v18);
      *((_QWORD *)a2 + 1) = v2;
      v11 |= (unint64_t)(v19 & 0x7F) << v15;
      if ((v19 & 0x80) == 0)
        goto LABEL_22;
      v15 += 7;
      if (v16++ >= 9)
      {
        v11 = 0;
LABEL_22:
        v2 = v18 + 1;
        goto LABEL_23;
      }
    }
    v4 = 1;
    *((_BYTE *)a2 + 24) = 1;
  }
  return v4 == 0;
}

uint64_t VCPProtoBounds::writeTo(VCPProtoBounds *this, PB::Writer *a2)
{
  PB::Writer::write(a2, this->_x0);
  PB::Writer::write(a2, this->_y0);
  PB::Writer::write(a2, this->_width);
  return PB::Writer::write(a2, this->_height);
}

void sub_1B6CF3E10(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t __Block_byref_object_copy__9(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void __Block_byref_object_dispose__9(uint64_t a1)
{

}

void sub_1B6CF40EC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1B6CF4CA4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;

  v5 = v4;

  _Unwind_Resume(a1);
}

void sub_1B6CF4DA8(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1B6CF4E70(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1B6CF50E4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, objc_super a9)
{
  void *v9;
  void *v10;

  v10 = v9;
  a9.receiver = v10;
  a9.super_class = (Class)MADVSKClient;
  -[_Unwind_Exception dealloc](&a9, sel_dealloc);
  _Unwind_Resume(a1);
}

void sub_1B6CF52E4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_1B6CF5354(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1B6CF554C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1B6CF5678(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1B6CF595C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15)
{
  void *v15;
  void *v16;

  _Unwind_Resume(a1);
}

void sub_1B6CF5A5C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1B6CF5C38(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1B6CF647C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *a20)
{
  void *v20;

  _Unwind_Resume(a1);
}

void sub_1B6CF6888(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_1B6CF6F10(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_1B6CF705C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1B6CF73C0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, void *a15, void *a16, void *a17, void *a18, void *a19)
{
  void *v19;
  void *v20;
  void *v21;
  void *v22;

  _Unwind_Resume(a1);
}

void sub_1B6CF775C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1B6CF7B54(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_1B6CF8090(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_1B6CF8708(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_1B6CF8A30(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1B6CF8D28(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

uint64_t __Block_byref_object_copy__10(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void __Block_byref_object_dispose__10(uint64_t a1)
{

}

void sub_1B6CF909C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1B6CF9448(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_1B6CF9518(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;
  void *v11;

  _Unwind_Resume(a1);
}

void sub_1B6CF9614(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1B6CF9ACC(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1B6CF9D90(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1B6CF9E80(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1B6CF9FA0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  void *v2;
  va_list va;

  va_start(va, a2);
  CF<opaqueCMSampleBuffer *>::~CF((const void **)va);

  _Unwind_Resume(a1);
}

void sub_1B6CFA01C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, objc_super a9)
{
  void *v9;
  void *v10;

  v10 = v9;
  a9.receiver = v10;
  a9.super_class = (Class)MADMattedFullFrame;
  -[_Unwind_Exception dealloc](&a9, sel_dealloc);
  _Unwind_Resume(a1);
}

void sub_1B6CFA260(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9, void *a10, void *a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18)
{
  void *v18;
  void *v19;
  void *v20;
  void *v21;
  void *v22;
  void *v23;

  _Unwind_Resume(a1);
}

void sub_1B6CFA390(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;

  _Unwind_Resume(a1);
}

void sub_1B6CFA414(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, objc_super a9)
{
  void *v9;
  void *v10;

  v10 = v9;

  a9.super_class = (Class)MADVideoRemoveBackgroundCropTask;
  -[_Unwind_Exception dealloc](&a9, sel_dealloc);
  _Unwind_Resume(a1);
}

void sub_1B6CFA4CC(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1B6CFA854(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_1B6CFAB18(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_1B6CFB1D4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,void *a23,void *a24)
{
  void *v24;

  _Unwind_Resume(a1);
}

void sub_1B6CFBE90(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, uint64_t a15, void *a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27)
{
  void *v27;
  void *v28;
  void *v29;
  void *v30;
  void *v31;
  void *v32;

  CVPixelBufferLock::~CVPixelBufferLock((CVPixelBufferLock *)&a27);
  _Unwind_Resume(a1);
}

void sub_1B6CFC80C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18, uint64_t a19, void *a20,uint64_t a21,uint64_t a22,uint64_t a23,void *a24,void *a25)
{
  void *v25;
  void *v26;
  void *v27;

  _Unwind_Resume(a1);
}

void sub_1B6CFCD58(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, void *a15)
{
  void *v15;
  void *v16;

  _Unwind_Resume(a1);
}

void sub_1B6CFD97C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,void *a28,void *a29,uint64_t a30,void *a31,uint64_t a32,uint64_t a33,void *a34)
{

  _Unwind_Resume(a1);
}

void sub_1B6CFDD4C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1B6CFE1F0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, void *a15)
{
  void *v15;
  void *v16;

  _Unwind_Resume(a1);
}

void sub_1B6CFE748(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *a17, uint64_t a18, uint64_t a19, void *a20)
{

  _Unwind_Resume(a1);
}

void sub_1B6CFEC78(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11, void *a12)
{
  void *v12;
  void *v13;

  _Unwind_Resume(a1);
}

void sub_1B6CFEE84(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;

  _Unwind_Resume(a1);
}

void sub_1B6D01034(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *a16, const void **a17, uint64_t a18, void *a19, void *a20,void *a21,void *a22,uint64_t a23,void *a24,void *a25,void *a26,void *a27,void *a28,void *a29,void *a30,void *a31,void *a32,void *a33)
{
  void *v33;
  void *v34;
  void *v35;
  void *v36;
  void *v37;
  uint64_t v38;

  CF<opaqueCMSampleBuffer *>::~CF(a17);
  _Block_object_dispose(&STACK[0x390], 8);

  _Block_object_dispose((const void *)(v38 - 224), 8);
  _Block_object_dispose(&STACK[0x890], 8);

  CF<opaqueCMSampleBuffer *>::~CF((const void **)&STACK[0x3C0]);
  CF<opaqueCMSampleBuffer *>::~CF((const void **)&STACK[0x3C8]);

  _Unwind_Resume(a1);
}

__n128 __Block_byref_object_copy__11(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;

  result = *(__n128 *)(a2 + 48);
  v3 = *(_OWORD *)(a2 + 64);
  *(__n128 *)(a1 + 48) = result;
  *(_OWORD *)(a1 + 64) = v3;
  return result;
}

uint64_t __Block_byref_object_copy__307(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void __Block_byref_object_dispose__308(uint64_t a1)
{

}

CFTypeRef __copy_helper_block_ea8_80c22_ZTS2CFIP10__CVBufferE(uint64_t a1, uint64_t a2)
{
  CFTypeRef result;

  result = *(CFTypeRef *)(a2 + 80);
  *(_QWORD *)(a1 + 80) = result;
  if (result)
    return CFRetain(result);
  return result;
}

const void **__destroy_helper_block_ea8_80c22_ZTS2CFIP10__CVBufferE(uint64_t a1)
{
  return CF<opaqueCMSampleBuffer *>::~CF((const void **)(a1 + 80));
}

void sub_1B6D0191C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1B6D01A38(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

uint64_t VCPProtoVideoCaptionResultReadFrom(uint64_t a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  char v14;
  uint64_t v16;
  int v17;
  uint64_t v19;
  unint64_t v20;
  int v21;
  uint64_t v22;
  void *v23;
  uint64_t result;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) < *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
  {
    v7 = (int *)MEMORY[0x1E0D82BB8];
    do
    {
      if (*(_BYTE *)(a2 + *v5))
        break;
      v8 = 0;
      v9 = 0;
      v10 = 0;
      while (1)
      {
        v11 = *v3;
        v12 = *(_QWORD *)(a2 + v11);
        v13 = v12 + 1;
        if (v12 == -1 || v13 > *(_QWORD *)(a2 + *v4))
          break;
        v14 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
        *(_QWORD *)(a2 + v11) = v13;
        v10 |= (unint64_t)(v14 & 0x7F) << v8;
        if ((v14 & 0x80) == 0)
          goto LABEL_12;
        v8 += 7;
        if (v9++ >= 9)
        {
          v10 = 0;
          v16 = *v5;
          v17 = *(unsigned __int8 *)(a2 + v16);
          goto LABEL_14;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
      v16 = *v5;
      v17 = *(unsigned __int8 *)(a2 + v16);
      if (*(_BYTE *)(a2 + v16))
        v10 = 0;
LABEL_14:
      if (v17 || (v10 & 7) == 4)
        break;
      if ((v10 >> 3) == 2)
      {
        PBReaderReadString();
        v22 = objc_claimAutoreleasedReturnValue();
        v23 = *(void **)(a1 + 16);
        *(_QWORD *)(a1 + 16) = v22;

      }
      else if ((v10 >> 3) == 1)
      {
        v19 = *v3;
        v20 = *(_QWORD *)(a2 + v19);
        if (v20 <= 0xFFFFFFFFFFFFFFFBLL && v20 + 4 <= *(_QWORD *)(a2 + *v4))
        {
          v21 = *(_DWORD *)(*(_QWORD *)(a2 + *v7) + v20);
          *(_QWORD *)(a2 + v19) = v20 + 4;
        }
        else
        {
          *(_BYTE *)(a2 + v16) = 1;
          v21 = 0;
        }
        *(_DWORD *)(a1 + 8) = v21;
      }
      else
      {
        result = PBReaderSkipValueWithTag();
        if (!(_DWORD)result)
          return result;
      }
    }
    while (*(_QWORD *)(a2 + *v3) < *(_QWORD *)(a2 + *v4));
  }
  return *(_BYTE *)(a2 + *v5) == 0;
}

void sub_1B6D028BC(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;

  v5 = v4;

  _Unwind_Resume(a1);
}

void sub_1B6D029C0(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1B6D02AEC(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;

  v5 = v4;

  _Unwind_Resume(a1);
}

void sub_1B6D02BF0(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1B6D02D14(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  _Unwind_Resume(a1);
}

void sub_1B6D02ECC(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1B6D03164(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1B6D034E4(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1B6D03A24(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_1B6D03F44(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, void *a14)
{
  void *v14;
  void *v15;
  void *v16;

  _Unwind_Resume(a1);
}

void sub_1B6D040F4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1B6D04230(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  void *v14;
  void *v15;
  void *v16;

  _Unwind_Resume(a1);
}

void sub_1B6D043BC(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1B6D04644(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  CVPixelBufferLock::~CVPixelBufferLock((CVPixelBufferLock *)va);
  _Unwind_Resume(a1);
}

void sub_1B6D04994(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  CVPixelBufferLock::~CVPixelBufferLock((CVPixelBufferLock *)va);
  _Unwind_Resume(a1);
}

void sub_1B6D04C44(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1B6D058F8(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  _Unwind_Resume(a1);
}

void sub_1B6D05DF4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;

  _Unwind_Resume(a1);
}

void sub_1B6D06108(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void ma::EncodeAnalysis::~EncodeAnalysis(ma::EncodeAnalysis *this)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  ma::EncodeAnalysis::Destroy(this);
  v2 = *((_QWORD *)this + 5);
  if (v2)
    MEMORY[0x1BCCA128C](v2, 0x1000C8000313F17);
  v3 = *((_QWORD *)this + 6);
  if (v3)
    MEMORY[0x1BCCA128C](v3, 0x1000C8000313F17);
  v4 = *((_QWORD *)this + 7);
  if (v4)
    MEMORY[0x1BCCA128C](v4, 0x1000C8052888210);
  v5 = *((_QWORD *)this + 8);
  if (v5)
    MEMORY[0x1BCCA128C](v5, 0x1000C8052888210);
  v6 = *((_QWORD *)this + 9);
  if (v6)
    MEMORY[0x1BCCA128C](v6, 0x1000C8052888210);
  v7 = *((_QWORD *)this + 10);
  if (v7)
    MEMORY[0x1BCCA128C](v7, 0x1000C803E1C8BA9);
  v8 = *((_QWORD *)this + 113);
  if (v8)
    MEMORY[0x1BCCA128C](v8, 0x1000C8052888210);
  v9 = *((_QWORD *)this + 114);
  if (v9)
    MEMORY[0x1BCCA128C](v9, 0x1000C8052888210);
  v10 = *((_QWORD *)this + 12);
  if (v10)
    (*(void (**)(uint64_t))(*(_QWORD *)v10 + 8))(v10);
  ma::MotionFieldAnalysis::~MotionFieldAnalysis((ma::EncodeAnalysis *)((char *)this + 112));
}

uint64_t ma::EncodeAnalysis::getEncodeStats(ma::EncodeAnalysis *this)
{
  return *((_QWORD *)this + 12);
}

uint64_t ma::EncodeAnalysis::MotionVectorAndEdgeProcessing(uint64_t this)
{
  int v1;
  int v2;
  int v3;
  int v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  BOOL v8;
  int v9;
  uint64_t v10;
  int v11;
  int v12;
  float v13;
  float v14;
  uint64_t v15;
  uint64_t v16;
  __int16 *v17;
  uint64_t v18;
  char v19;
  uint64_t v20;
  char v21;
  uint64_t v22;
  char v23;
  char v24;
  __int16 *v25;
  int v26;
  _DWORD v27[2];
  uint64_t v28;

  v28 = *MEMORY[0x1E0C80C00];
  v1 = *(_DWORD *)(this + 4);
  if (v1 >= 1)
  {
    v2 = 0;
    v3 = 0;
    v4 = *(_DWORD *)this;
    do
    {
      if (v4 >= 1)
      {
        v5 = 0;
        v6 = v2;
        do
        {
          *(_BYTE *)(*(_QWORD *)(this + 8) + v6) = 0;
          if (*(unsigned __int16 *)(*(_QWORD *)(*(_QWORD *)(this + 96) + 120) + 2 * v6)
             + *(unsigned __int16 *)(*(_QWORD *)(*(_QWORD *)(this + 96) + 128) + 2 * v6) >= 0x3EA)
            *(_BYTE *)(*(_QWORD *)(this + 8) + v6) = 1;
          ++v5;
          ++v6;
          v4 = *(_DWORD *)this;
        }
        while (v5 < *(_DWORD *)this);
        v2 += v5;
        v1 = *(_DWORD *)(this + 4);
      }
      ++v3;
    }
    while (v3 < v1);
    v7 = *(_QWORD *)(this + 96);
    if (*(_BYTE *)(v7 + 172))
      v8 = 1;
    else
      v8 = v1 < 1;
    if (!v8)
    {
      v9 = 0;
      LODWORD(v10) = 0;
      v11 = *(_DWORD *)this;
      do
      {
        if (v11 >= 1)
        {
          v12 = 0;
          v13 = *(float *)(this + 104);
          v14 = *(float *)(this + 108);
          v15 = *(_QWORD *)(v7 + 24);
          v16 = *(_QWORD *)(v7 + 32);
          v10 = (int)v10;
          do
          {
            v17 = (__int16 *)(v15 + 4 * v10);
            *v17 = (int)(float)(v13 * (float)*v17);
            v17[1] = (int)(float)(v14 * (float)v17[1]);
            if (v16 && !*(_BYTE *)(this + 920))
            {
              v18 = 0;
              v27[0] = 2 * (v11 * 2 * v9 + v12);
              v27[1] = 2 * (v11 * ((2 * v9) | 1) + v12);
              v19 = 1;
              do
              {
                v20 = 0;
                v21 = v19;
                v22 = (int)v27[v18];
                v23 = 1;
                do
                {
                  v24 = v23;
                  v25 = (__int16 *)(v16 + 4 * (v20 + v22));
                  v26 = v25[1];
                  *v25 = (int)(float)(v13 * (float)*v25);
                  v25[1] = (int)(float)(v14 * (float)v26);
                  v20 = 1;
                  v23 = 0;
                }
                while ((v24 & 1) != 0);
                v19 = 0;
                v18 = 1;
              }
              while ((v21 & 1) != 0);
            }
            ++v12;
            ++v10;
          }
          while (v12 != v11);
        }
        ++v9;
      }
      while (v9 != v1);
    }
  }
  return this;
}

uint64_t ma::EncodeAnalysis::ComputeSpatialStats(ma::EncodeAnalysis *this, Frame *a2)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  int v5;
  _QWORD *v6;
  unsigned int *v7;
  unsigned __int16 *v8;
  unsigned __int16 *v9;
  unsigned __int16 *v10;
  unsigned __int16 *v11;
  char *v12;
  uint64_t result;
  float v14;
  float v15;
  unsigned int v16;
  unsigned int v17;
  unsigned int v18;
  int v19;
  uint64_t v20;
  unsigned int v21;
  unsigned int v22;
  int v23;
  int v24;
  int v25;
  int v26;
  float v27;
  int v28;
  float v29;
  BOOL v30;

  v2 = *((int *)this + 1) * (uint64_t)*(int *)this;
  if ((int)v2 < 1)
    return 4294967246;
  v3 = 0;
  v4 = 0;
  v5 = 0;
  v6 = (_QWORD *)*((_QWORD *)this + 12);
  v8 = (unsigned __int16 *)v6[8];
  v7 = (unsigned int *)v6[9];
  v9 = (unsigned __int16 *)v6[7];
  v10 = (unsigned __int16 *)v6[15];
  v11 = (unsigned __int16 *)v6[16];
  v12 = (char *)*((_QWORD *)this + 1);
  result = v2;
  v14 = 0.0;
  v15 = 0.0;
  do
  {
    v16 = *v7++;
    v17 = v16 >> 8;
    v18 = *v8++;
    v19 = (v18 >> 8) * (v18 >> 8);
    if (v17 - v19 > 0x64)
      ++v4;
    v21 = *v9++;
    v20 = v21;
    v22 = v17 - v19;
    if (v22)
      v14 = v14 + (float)((float)(v20 >> 8) / (float)(sqrtf((float)v22) + 8.0));
    v3 += v20;
    v24 = *v10++;
    v23 = v24;
    v25 = *v11++;
    v26 = v23 * v23 + v25 * v25;
    v27 = sqrtf((float)v26);
    if (!v26)
      v27 = -0.0;
    v15 = v15 + v27;
    v28 = *v12++;
    v5 += v28;
    --result;
  }
  while (result);
  a2->acc_var_.y_ = v15 / (float)(int)v2;
  *(_QWORD *)&a2->quality_score_ = v3 / v2;
  *(float *)&a2->distortion_ = v14 / (float)(int)v2;
  v29 = (float)v4 * 0.15;
  v30 = (float)((float)(int)v2 * 0.01) > (float)v5;
  if (v29 > (float)v5)
    v30 = 1;
  LOBYTE(a2->motion_change_.z_) = v30;
  return result;
}

uint64_t ma::EncodeAnalysis::ComputeTemporalStats(ma::EncodeAnalysis *this, ma::Frame *a2, int a3)
{
  ma::FrameBuffer *v4;
  uint64_t result;
  float v7;
  float v8;
  float v9;
  float v10;
  float v11;
  float v12;
  int v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  int v21;
  int v22;
  uint64_t v23;
  uint64_t v24;
  __int16 *v25;
  uint64_t v26;
  uint64_t v27;
  int v28;
  unsigned int v29;
  int v30;
  float v31;
  float v32;
  float v33;
  _OWORD *v34;
  _OWORD *v35;
  _OWORD *v36;
  _OWORD *v37;
  int v38;
  int v39;
  int v40;
  int v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  int v45;
  int v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  __int16 *v50;
  uint64_t v51;
  uint64_t v52;
  int v53;
  int v54;
  int v55;
  int v56;
  int v57;
  int v58;
  int v59;
  int v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  unsigned int v64;
  uint64_t v65;
  int v66;
  int32x2_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  int v76;
  int v77;
  int v78;
  int v79;
  int v80;
  int v81;
  float v82;
  float v83;
  uint64_t v84;
  uint64_t v85;
  float v86;
  int v87;
  int v88;
  CMTimeScale v89;
  char *v90;
  CMTime *p_lhs;
  CMTimeEpoch v92;
  float Seconds;
  float v94;
  float v95;
  float v96;
  float v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  int v102;
  int v103;
  uint64_t v104;
  int v106;
  int v107;
  uint64_t v108;
  int v109;
  int v110;
  int v111;
  int v112;
  int v113;
  int v114;
  CMTime time;
  float32x2_t v116[2];
  CMTime rhs;
  CMTime lhs;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;

  v121 = *MEMORY[0x1E0C80C00];
  v4 = (ma::FrameBuffer *)*((_QWORD *)this + 11);
  if (!v4)
    return 4294967246;
  if (*(_BYTE *)(*((_QWORD *)this + 12) + 172))
  {
    ma::Translation::Translation((uint64_t)a2 + 52);
    ma::Translation::Translation((uint64_t)a2 + 92);
    ma::Translation::Translation((uint64_t)a2 + 64);
    result = 0;
    *((_DWORD *)a2 + 19) = 1065353216;
    return result;
  }
  if (a3)
    v7 = 0.2;
  else
    v7 = 0.05;
  v8 = (float)*(int *)this;
  v9 = v8 * 0.012255;
  v10 = (float)*((int *)this + 1);
  v11 = v8 * 0.04902;
  v12 = v8 * 0.0012255;
  v104 = ma::FrameBuffer::Get(v4, *(_DWORD *)a2 - 1);
  v13 = *(_DWORD *)this;
  v14 = *((_DWORD *)this + 1);
  v15 = (v14 * *(_DWORD *)this);
  if ((int)v15 < 1)
  {
    v22 = 0;
    v21 = 0;
    v20 = 0;
    v19 = 0;
    v18 = 0;
    v17 = 0;
  }
  else
  {
    v16 = 0;
    v17 = 0;
    v18 = 0;
    v19 = 0;
    v20 = 0;
    v21 = 0;
    v22 = 0;
    v23 = *((_QWORD *)this + 12);
    v24 = 2;
    do
    {
      if (*(_BYTE *)(*(_QWORD *)(v23 + 8) + v16) && *(_BYTE *)(*((_QWORD *)this + 1) + v16))
      {
        ++v22;
        v25 = (__int16 *)(*(_QWORD *)(v23 + 24) + v24);
        v26 = *(v25 - 1);
        v20 += v26;
        v27 = *v25;
        v19 += v27;
        if ((int)v26 >= 0)
          LOWORD(v28) = v26;
        else
          v28 = -(int)v26;
        v29 = (unsigned __int16)v28;
        if ((int)v27 >= 0)
          LOWORD(v30) = v27;
        else
          v30 = -(int)v27;
        if (v29 > 0xC8 || (unsigned __int16)v30 >= 0xC9u)
        {
          ++v21;
          v18 += v26;
          v17 += v27;
        }
      }
      ++v16;
      v24 += 4;
    }
    while (v15 != v16);
  }
  v102 = v22;
  v98 = v17;
  v99 = v18;
  v100 = v19;
  v101 = v20;
  v31 = v9 * v10;
  v32 = v11 * v10;
  v33 = v12 * v10;
  v119 = 0;
  v120 = 0;
  v34 = (_OWORD *)*((_QWORD *)this + 5);
  *v34 = 0u;
  v34[1] = 0u;
  v34[2] = 0u;
  v34[3] = 0u;
  v34[4] = 0u;
  v34[5] = 0u;
  v34[6] = 0u;
  v34[7] = 0u;
  v34[8] = 0u;
  v34[9] = 0u;
  v35 = (_OWORD *)*((_QWORD *)this + 6);
  *v35 = 0u;
  v35[1] = 0u;
  v35[2] = 0u;
  v35[3] = 0u;
  v35[4] = 0u;
  v35[5] = 0u;
  v35[6] = 0u;
  v35[7] = 0u;
  v35[8] = 0u;
  v35[9] = 0u;
  v36 = (_OWORD *)*((_QWORD *)this + 7);
  *v36 = 0u;
  v36[1] = 0u;
  v36[2] = 0u;
  v36[3] = 0u;
  v36[4] = 0u;
  v37 = (_OWORD *)*((_QWORD *)this + 8);
  *v37 = 0u;
  v37[1] = 0u;
  v37[2] = 0u;
  v37[3] = 0u;
  v37[4] = 0u;
  bzero(*((void **)this + 9), 0x640uLL);
  bzero(*((void **)this + 10), 0x12C0uLL);
  v38 = *((_DWORD *)this + 1);
  v103 = v21;
  if (v38 < 3)
  {
    LODWORD(v44) = 0;
    v43 = 0;
    v42 = 0;
    v41 = 0;
    v40 = 0;
    v114 = 0;
    goto LABEL_57;
  }
  v39 = 0;
  v109 = 0;
  v114 = 0;
  v40 = 0;
  v41 = 0;
  v42 = 0;
  v43 = 0;
  v44 = 0;
  v107 = (v14 - 1) * v13;
  v45 = *(_DWORD *)this;
  do
  {
    if (v45 < 3)
      goto LABEL_54;
    v112 = v45;
    v106 = v39;
    v46 = 0;
    do
    {
      v47 = 0;
      LODWORD(v119) = v46 + v109;
      HIDWORD(v119) = v112 - 1 + v109;
      v110 = v46;
      --v112;
      LODWORD(v120) = v46 + v107;
      HIDWORD(v120) = v112 + v107;
      do
      {
        v48 = *((_QWORD *)this + 12);
        v49 = *(int *)((char *)&v119 + v47);
        v50 = (__int16 *)(*(_QWORD *)(v48 + 24) + 4 * v49);
        v51 = *v50;
        v52 = v50[1];
        if ((int)v51 >= 0)
          LOWORD(v53) = v51;
        else
          v53 = -(int)v51;
        if ((unsigned __int16)v53 <= 0xC7u)
        {
          if ((int)v52 >= 0)
            LOWORD(v54) = v52;
          else
            v54 = -(int)v52;
          if ((unsigned __int16)v54 <= 0xC7u)
          {
            v55 = 26215 * (__int16)((v51 >> 2) + 50);
            v56 = (v55 >> 17) + (v55 >> 31);
            if (v56 >= 19)
              v56 = 19;
            v57 = v56 & ~(v56 >> 31);
            v58 = 26215 * (__int16)((v52 >> 2) + 50);
            v59 = (v58 >> 17) + (v58 >> 31);
            if (v59 >= 19)
              v59 = 19;
            v60 = v59 & ~(v59 >> 31);
            if ((unsigned __int16)v53 < 5u)
            {
              if ((unsigned __int16)v54 < 5u)
              {
                ++v114;
                goto LABEL_51;
              }
            }
            else
            {
              *(_QWORD *)(*((_QWORD *)this + 5) + 8 * (unsigned __int16)v57) += v51;
              ++*(_DWORD *)(*((_QWORD *)this + 7) + 4 * (unsigned __int16)v57);
              if ((unsigned __int16)v54 <= 4u)
              {
LABEL_48:
                ma::Translation::Translation((float *)&lhs, (float)(int)v51, (float)(int)v52, 0.0);
                v61 = v43;
                v62 = v44;
                v63 = v42;
                v64 = v60 + 20 * v57;
                ma::Translation::operator+=((float32x2_t *)(*((_QWORD *)this + 10) + 12 * v64), (float32x2_t *)&lhs);
                v65 = *((_QWORD *)this + 9);
                v66 = *(_DWORD *)(v65 + 4 * v64);
                *(_DWORD *)(v65 + 4 * v64) = v66 + 1;
                v42 = v63;
                v44 = v62;
                v43 = v61;
                if (v66 >= *(_DWORD *)(v65 + 4 * (v40 + 20 * v41)))
                {
                  v41 = v57;
                  v40 = v60;
                }
                goto LABEL_51;
              }
            }
            *(_QWORD *)(*((_QWORD *)this + 6) + 8 * (unsigned __int16)(v59 & ~(unsigned __int16)(v59 >> 31))) += v52;
            ++*(_DWORD *)(*((_QWORD *)this + 8) + 4 * (unsigned __int16)(v59 & ~(unsigned __int16)(v59 >> 31)));
            goto LABEL_48;
          }
        }
        if (*(_BYTE *)(*(_QWORD *)(v48 + 8) + v49) && *(_BYTE *)(*((_QWORD *)this + 1) + v49) == 1)
        {
          v44 = (v44 + 1);
          v43 += v51;
          v42 += v52;
        }
LABEL_51:
        v47 += 4;
      }
      while (v47 != 16);
      v46 = v110 + 1;
      v45 = *(_DWORD *)this;
    }
    while (v110 + 1 < *(_DWORD *)this / 3);
    v38 = *((_DWORD *)this + 1);
    v39 = v106;
LABEL_54:
    v109 += v45;
    v107 -= v45;
    ++v39;
  }
  while (v39 < v38 / 3);
LABEL_57:
  v108 = v43;
  v111 = (int)v33;
  v113 = (int)v31;
  ma::Translation::Translation((uint64_t)v116);
  v68 = 0;
  v69 = 0;
  v70 = 0;
  v71 = 0;
  v72 = (v40 + 20 * v41);
  v73 = *((_QWORD *)this + 9);
  do
  {
    v74 = 0;
    v75 = v69;
    do
    {
      if (*(_DWORD *)(v73 + v75) > *(_DWORD *)(v73 + 4 * v72) / 2)
      {
        ma::Translation::operator+=(v116, (float32x2_t *)(*((_QWORD *)this + 10) + v68 + v74));
        v73 = *((_QWORD *)this + 9);
        v71 += *(int *)(v73 + v75);
      }
      v75 += 4;
      v74 += 12;
    }
    while (v74 != 240);
    ++v70;
    v69 += 80;
    v68 += 240;
  }
  while (v70 != 20);
  v76 = *(_DWORD *)(v73 + 4 * v72);
  v77 = (int)v31;
  if (v113 >= 0)
    v78 = (int)v31;
  else
    v78 = v113 + 3;
  if (v76 < v78 >> 2 || v103 > 2 * v71)
  {
    ma::Translation::Translation((uint64_t)v116);
    v77 = (int)v31;
    if (v114 <= 5 * v113)
      v79 = 1;
    else
      v79 = v114;
    v71 = v79;
  }
  if (v103 >= v111)
    v80 = 0;
  else
    v80 = v103;
  v81 = v102 - v80;
  if (v102 - v80 > v111)
  {
    v84 = v98;
    v85 = v99;
    if (v103 >= v111)
    {
      v84 = 0;
      v85 = 0;
    }
    v83 = (float)(int)((v101 - v85) / v81) * 0.25;
    v82 = (float)(int)((v100 - v84) / v81) * 0.25;
  }
  else
  {
    v82 = 540.0;
    v83 = 960.0;
  }
  *((float *)a2 + 13) = v83;
  *((float *)a2 + 14) = v82;
  if (!*((_BYTE *)a2 + 108))
  {
    if (v71 >= v78 >> 2 || v103 < (int)v32)
    {
      *(float *)v67.i32 = (float)v71 * 4.0;
      *(float32x2_t *)((char *)a2 + 52) = vdiv_f32(v116[0], (float32x2_t)vdup_lane_s32(v67, 0));
    }
    else if ((int)v44 <= v77)
    {
      ma::Translation::operator=((uint64_t)a2 + 52, v104 + 52);
      v77 = (int)v31;
    }
    else
    {
      v86 = (float)(int)v44 * 4.0;
      *((float *)a2 + 13) = (float)v108 / v86;
      *((float *)a2 + 14) = (float)v42 / v86;
    }
  }
  if (v77 >= 0)
    v87 = v77;
  else
    v87 = v77 + 1;
  if (v71 >= v87 >> 1 || v103 >= v77 || v81 > v111 && *((_BYTE *)a2 + 108))
  {
    LODWORD(lhs.value) = ma::Translation::operator-((float *)a2 + 13, (float *)(v104 + 52));
    HIDWORD(lhs.value) = v88;
    lhs.timescale = v89;
    v90 = (char *)a2 + 92;
    p_lhs = &lhs;
  }
  else
  {
    ma::Translation::Translation((uint64_t)a2 + 92);
    p_lhs = (CMTime *)(v104 + 52);
    v90 = (char *)a2 + 52;
  }
  ma::Translation::operator=((uint64_t)v90, (uint64_t)p_lhs);
  ma::Translation::operator=((uint64_t)a2 + 64, (uint64_t)a2 + 52);
  lhs = *(CMTime *)((char *)a2 + 4);
  v92 = *(_QWORD *)(v104 + 20);
  *(_OWORD *)&rhs.value = *(_OWORD *)(v104 + 4);
  rhs.epoch = v92;
  CMTimeSubtract(&time, &lhs, &rhs);
  Seconds = CMTimeGetSeconds(&time);
  if (Seconds == 0.0)
    return 4294967246;
  v94 = 1.0 / (float)(fabsf(Seconds) * 30.0);
  if (v94 >= 0.5)
    v95 = v94;
  else
    v95 = 0.5;
  v96 = ma::Translation::AbsSum((ma::Frame *)((char *)a2 + 52));
  v97 = expf(v95 * (float)-(float)(v7 * v96));
  result = 0;
  *((float *)a2 + 19) = v97;
  return result;
}

uint64_t ma::EncodeAnalysis::ComputeFrameStats(ma::EncodeAnalysis *this, Frame *a2, int a3)
{
  uint64_t result;

  result = ma::EncodeAnalysis::ComputeSpatialStats(this, a2);
  if (!(_DWORD)result)
  {
    result = ma::EncodeAnalysis::ComputeTemporalStats(this, (ma::Frame *)a2, a3);
    if (!(_DWORD)result)
      a2->motion_change_.y_ = *(float *)(*((_QWORD *)this + 12) + 168);
  }
  return result;
}

uint64_t ma::EncodeAnalysis::ComputeSceneDelta(ma::EncodeAnalysis *this, ma::Frame *a2)
{
  ma::FrameBuffer *v3;
  float v5;
  unsigned int v6;
  uint64_t v7;
  uint64_t v8;
  float v9;
  float *v10;
  float v11;
  uint64_t v12;
  float v13;
  float v14;
  uint64_t result;

  v3 = (ma::FrameBuffer *)*((_QWORD *)this + 11);
  if (!v3)
    return 4294967246;
  v5 = *(float *)a2;
  v6 = *(_DWORD *)a2 - 3;
  if (*(int *)a2 < 3)
    return 0;
  if (LODWORD(v5) <= 0xC)
    v7 = v6;
  else
    v7 = 10;
  v8 = ma::FrameBuffer::Get(v3, LODWORD(v5) - 2);
  v9 = ma::Histogram::EarthMoverDistance((ma::Frame *)((char *)a2 + 360), (const ma::Histogram *)(v8 + 360));
  if ((_DWORD)v7)
  {
    v10 = (float *)((char *)this + 768);
    v11 = 0.0;
    v12 = v7;
    do
    {
      v13 = *v10++;
      v11 = v11 + v13;
      --v12;
    }
    while (v12);
    v14 = fmaxf(v9 - (float)(v11 / (float)(int)v7), 0.0) / (float)((float)(v11 / (float)(int)v7) + 0.000001);
  }
  else
  {
    v14 = 0.0;
  }
  result = 0;
  *((float *)this + v6 % 0xA + 192) = v9;
  *((float *)a2 + 75) = v9;
  *((float *)a2 + 76) = v14;
  return result;
}

uint64_t ma::EncodeAnalysis::AnalyzeFrame(ma::EncodeAnalysis *this, ma::EncodeStats *a2, CMTime *a3, CVPixelBufferRef pixelBuffer, ma::Frame *a5, int a6, int a7)
{
  int Width;
  int Height;
  int v15;
  float v16;
  float v17;
  int v18;
  int v19;
  BOOL v20;
  int v21;
  int v22;
  int v23;
  int v24;
  int v25;
  uint64_t result;
  ma::EncodeStats *v27;
  double v28;
  float v29;

  Width = CVPixelBufferGetWidth(pixelBuffer);
  Height = CVPixelBufferGetHeight(pixelBuffer);
  v15 = Height;
  v16 = 1080.0;
  if (Width <= Height)
    v17 = 1080.0;
  else
    v17 = 1920.0;
  if (Width <= Height)
    v16 = 1920.0;
  *((float *)this + 26) = v17 / (float)Width;
  *((float *)this + 27) = v16 / (float)Height;
  if (!a2)
    return 4294967246;
  *((_QWORD *)this + 12) = a2;
  v18 = *((_DWORD *)a2 + 44);
  v19 = *((_DWORD *)a2 + 45);
  v21 = v18 + 15;
  v20 = v18 < -15;
  v22 = v18 + 30;
  if (!v20)
    v22 = v21;
  v23 = v22 >> 4;
  v24 = v19 + 15;
  v20 = v19 < -15;
  v25 = v19 + 30;
  if (v20)
    v24 = v25;
  result = ma::EncodeAnalysis::Initialize(this, v23, v24 >> 4);
  if (!(_DWORD)result)
  {
    ma::EncodeAnalysis::MotionVectorAndEdgeProcessing((uint64_t)this);
    if (*((_BYTE *)this + 922))
      ma::EncodeAnalysis::MotionVectorFromFlow(this, *((float **)a5 + 42), Width, v15);
    result = ma::MotionFieldAnalysis::ProcessFrame((ma::EncodeAnalysis *)((char *)this + 112), pixelBuffer, *(_DWORD *)a5, (const __CFArray **)a5 + 16);
    if (!(_DWORD)result)
    {
      if (*((_BYTE *)this + 920))
        return 0;
      result = ma::EncodeAnalysis::ComputeFrameStats(this, (Frame *)a5, a6);
      if (!(_DWORD)result)
      {
        ma::EncodeAnalysis::ComputeSceneDelta(this, a5);
        result = ma::EncodeAnalysis::GetFrameColorfulness(this, pixelBuffer);
        if (!(_DWORD)result)
        {
          result = ma::EncodeAnalysis::ComputeInterestingnessLBP(this, pixelBuffer, a5, a7);
          if (!(_DWORD)result)
          {
            LODWORD(v28) = *((_DWORD *)this + 234);
            *((_DWORD *)a5 + 88) = LODWORD(v28);
            if (*(int *)a5 >= 2 && !*(_BYTE *)(*((_QWORD *)this + 12) + 172))
              ma::EncodeAnalysis::ComputeObstruction(this, a5, v27, v28, v29);
            return 0;
          }
        }
      }
    }
  }
  return result;
}

void ma::EncodeAnalysis::MotionVectorFromFlow(ma::EncodeAnalysis *this, float *a2, int a3, int a4)
{
  const std::nothrow_t *v6;
  char *v7;
  int v8;
  uint64_t v9;
  float *v10;
  float *v11;
  uint64_t v12;
  int v13;
  int v14;
  int v15;
  int v16;
  uint64_t v17;
  int v18;
  uint64_t v19;
  uint64_t v20;
  size_t v21;
  float *v22;
  int v23;
  _WORD *v24;
  int v25;
  int v26;
  int v27;
  int v28;
  float *v29;
  int v30;
  int v31;
  int v32;
  int v33;
  float *v34;
  uint64_t v35;
  int v36;
  uint64_t v37;
  uint64_t v38;
  size_t v39;
  char *v40;
  int v41;
  int v42;
  uint64_t v43;
  int v44;
  _WORD *v45;
  int v46;
  _WORD *v47;
  _WORD *v48;
  uint64_t v49;
  int v50;
  float *v51;
  int v52;
  float *v53;
  int v54;
  float *v55;
  float *v56;
  int v58;
  int v59;
  int v60;
  int v61;
  float *v62;
  float *__A;
  int __Aa;
  int v65;
  int v66;
  int v67;
  int v68;
  int v69;
  const float *__dst;
  int v71;
  int v72;
  uint64_t v73;
  int v74;
  int v75;
  uint64_t v77;
  int v78;
  float __C[4];

  v6 = (const std::nothrow_t *)MEMORY[0x1E0DE4E10];
  v7 = (char *)operator new[](0x800uLL, MEMORY[0x1E0DE4E10]);
  v62 = (float *)operator new[](0x200uLL, v6);
  if (a4 >= 1)
  {
    v8 = 0;
    LODWORD(v9) = 0;
    v10 = a2;
    v11 = &a2[a4 * a3];
    v49 = a3;
    __A = (float *)(v7 + 1024);
    v12 = 4 * a3;
    v13 = a4;
    v55 = v11;
    v65 = a4;
    v75 = a3;
    __dst = (const float *)v7;
    do
    {
      v14 = v13 - 16;
      if (v13 >= 16)
        v13 = 16;
      if (v13 <= 1)
        v13 = 1;
      v60 = v13;
      v15 = a4 - v8;
      v66 = a4 - v8;
      if (a4 - v8 >= 16)
        v15 = 16;
      v68 = v15;
      if (a3 >= 1)
      {
        v50 = v14;
        v58 = v8;
        v16 = 0;
        v9 = (int)v9;
        LODWORD(v17) = a3;
        v51 = v10;
        v53 = v11;
        do
        {
          v71 = v17;
          v73 = v9;
          v17 = (int)v17;
          if ((int)v17 >= 16)
            v17 = 16;
          v18 = a3 - v16;
          if (a3 - v16 >= 16)
            v18 = 16;
          v77 = v18;
          *(_QWORD *)__C = 0;
          if (v66 >= 1)
          {
            v19 = 0;
            v20 = 4 * v17;
            v21 = 4 * v18;
            v22 = (float *)__dst;
            v23 = v60;
            do
            {
              memcpy(v22, (char *)v10 + v19, v21);
              memcpy(v22 + 256, (char *)v11 + v19, v21);
              v22 = (float *)((char *)v22 + v20);
              v19 += v12;
              --v23;
            }
            while (v23);
          }
          vDSP_meanv(__dst, 1, &__C[1], (int)v77 * v68);
          vDSP_meanv(__A, 1, __C, (int)v77 * v68);
          a3 = v75;
          v24 = (_WORD *)(*(_QWORD *)(*((_QWORD *)this + 12) + 40) + 4 * v73);
          *v24 = (int)(float)((float)(*((float *)this + 26) * 4.0) * __C[1]);
          v24[1] = (int)(float)((float)(*((float *)this + 27) * 4.0) * __C[0]);
          v10 += v77;
          v11 += v77;
          v16 += 16;
          v9 = v73 + 1;
          LODWORD(v17) = v71 - 16;
        }
        while (v16 < v75);
        a4 = v65;
        v8 = v58;
        v10 = v51;
        v11 = v53;
        v14 = v50;
      }
      v10 += v68 * a3;
      v11 += v68 * a3;
      v8 += 16;
      v13 = v14;
    }
    while (v8 < a4);
    v25 = 0;
    v26 = 0;
    if (a3 <= a4)
      v27 = 56;
    else
      v27 = 74;
    v59 = v27;
    v28 = a4;
    v29 = v55;
    do
    {
      v30 = v28 - 8;
      if (v28 >= 8)
        v28 = 8;
      if (v28 <= 1)
        v28 = 1;
      v61 = v28;
      v69 = a4 - v25;
      if (a4 - v25 >= 8)
        v31 = 8;
      else
        v31 = a4 - v25;
      v56 = v29;
      v54 = v25;
      v52 = v30;
      if (a3 >= 1)
      {
        v32 = 0;
        __Aa = v31 + v25;
        v33 = a3;
        v34 = a2;
        v67 = v31;
        do
        {
          v72 = v33;
          v74 = v26;
          v35 = v33;
          if (v33 >= 8)
            v35 = 8;
          v36 = a3 - v32;
          if (a3 - v32 >= 8)
            v36 = 8;
          v78 = v36;
          *(_QWORD *)__C = 0;
          if (v69 >= 1)
          {
            v37 = 0;
            v38 = 4 * v35;
            v39 = 4 * v36;
            v40 = (char *)(v62 + 64);
            v41 = v61;
            do
            {
              memcpy(v40 - 256, &v34[v37], v39);
              memcpy(v40, &v29[v37], v39);
              v40 += v38;
              v37 += v49;
              --v41;
            }
            while (v41);
          }
          v31 = v67;
          vDSP_meanv(v62, 1, &__C[1], v78 * v67);
          vDSP_meanv(v62 + 64, 1, __C, v78 * v67);
          a3 = v75;
          v42 = (int)(float)((float)(*((float *)this + 26) * 4.0) * __C[1]);
          v43 = *(_QWORD *)(*((_QWORD *)this + 12) + 48);
          v44 = v74;
          v45 = (_WORD *)(v43 + 4 * v74);
          *v45 = v42;
          v46 = (int)(float)((float)(*((float *)this + 27) * 4.0) * __C[0]);
          v45[1] = v46;
          if (v78 + v32 == v75)
          {
            v47 = (_WORD *)(v43 + 4 * (v74 + 1));
            *v47 = v42;
            v47[1] = v46;
            v44 = v74 + 1;
          }
          a4 = v65;
          if (__Aa == v65)
          {
            v48 = (_WORD *)(v43 + 4 * (v44 + v59));
            *v48 = v42;
            v48[1] = v46;
          }
          v34 += v78;
          v29 += v78;
          v32 += 8;
          v26 = v44 + 1;
          v33 = v72 - 8;
        }
        while (v32 < v75);
      }
      a2 += v31 * a3;
      v29 = &v56[v31 * a3];
      v25 = v54 + 8;
      v28 = v52;
    }
    while (v54 + 8 < a4);
  }
}

uint64_t ma::EncodeAnalysis::GetFrameColorfulness(ma::EncodeAnalysis *this, __CVBuffer *a2)
{
  uint64_t v4;
  const __CFAllocator *v5;
  size_t Width;
  size_t Height;
  uint64_t v8;
  CVPixelBufferRef v9;
  CVPixelBufferRef destinationBuffer;
  VTPixelTransferSessionRef pixelTransferSessionOut;

  destinationBuffer = 0;
  pixelTransferSessionOut = 0;
  v4 = VTPixelTransferSessionCreate(0, &pixelTransferSessionOut);
  if (!(_DWORD)v4)
  {
    v5 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
    Width = CVPixelBufferGetWidth(a2);
    Height = CVPixelBufferGetHeight(a2);
    v8 = CVPixelBufferCreate(v5, Width, Height, 0x20u, 0, &destinationBuffer);
    v9 = destinationBuffer;
    if ((_DWORD)v8
      || (v8 = VTPixelTransferSessionTransferImage(pixelTransferSessionOut, a2, destinationBuffer),
          v9 = destinationBuffer,
          (_DWORD)v8))
    {
      v4 = v8;
      if (!v9)
        goto LABEL_6;
      goto LABEL_5;
    }
    v4 = ma::EncodeAnalysis::ComputeBlockAndPixelColorfulness(this, destinationBuffer);
    v9 = destinationBuffer;
    if (destinationBuffer)
    {
LABEL_5:
      CFRelease(v9);
      destinationBuffer = 0;
    }
  }
LABEL_6:
  if (pixelTransferSessionOut)
    CFRelease(pixelTransferSessionOut);
  return v4;
}

uint64_t ma::EncodeAnalysis::ComputeInterestingnessLBP(ma::EncodeAnalysis *this, __CVBuffer *a2, ma::Frame *a3, int a4)
{
  _QWORD *v6;
  float v7;
  BOOL v8;
  int v9;
  uint64_t result;

  if (a4)
  {
    *((_DWORD *)a3 + 86) = 1065353216;
    v6 = (_QWORD *)((char *)this + 928);
LABEL_15:
    result = 0;
    ++*v6;
    return result;
  }
  if (0xCCCCCCCCCCCCCCCDLL * *((_QWORD *)this + 116) + 0x1999999999999999 > 0x3333333333333332
    || (result = ma::EncodeAnalysis::GetFrameInterestingness(this, a2), !(_DWORD)result))
  {
    v6 = (_QWORD *)((char *)this + 928);
    v7 = *((float *)this + 235);
    v8 = *((float *)this + 234) <= 75.0 || v7 <= 50.0;
    if (v8 && (float)(v7 + (float)(*((float *)this + 236) * 100.0)) <= 105.0)
      v9 = -1082130432;
    else
      v9 = 1065353216;
    *((_DWORD *)a3 + 86) = v9;
    goto LABEL_15;
  }
  return result;
}

uint64_t ma::EncodeAnalysis::ComputeObstruction(ma::EncodeAnalysis *this, ma::Frame *a2, ma::EncodeStats *a3, double a4, float a5)
{
  ma::EncodeStats *v7;
  double v8;
  float v9;
  uint64_t v10;

  *((_DWORD *)this + 210) = 0;
  *(_OWORD *)((char *)this + 808) = 0u;
  *(_OWORD *)((char *)this + 824) = 0u;
  ma::EncodeAnalysis::FindSeedBoundarySegment(this, 0.0, a5, (uint64_t)a2, a3);
  if (*((_DWORD *)this + 203))
    ma::EncodeAnalysis::FindObstructionRegion(this, (ma::Frame *)((char *)a2 + 128), v7, v8, v9);
  ma::EncodeAnalysis::FindObstructionScene(this, (Frame *)a2);
  *(_OWORD *)((char *)this + 844) = *(_OWORD *)((char *)this + 820);
  *(_QWORD *)((char *)this + 860) = *(_QWORD *)((char *)this + 836);
  v10 = *(_QWORD *)((char *)a2 + 20);
  *(_OWORD *)((char *)this + 868) = *(_OWORD *)((char *)a2 + 4);
  *(_QWORD *)((char *)this + 884) = v10;
  return 0;
}

uint64_t ma::EncodeAnalysis::ProcessFrame(ma::EncodeAnalysis *this, CMTime *a2, CVPixelBufferRef pixelBuffer, ma::Frame *a4, int a5, int a6)
{
  ma::EncodeStats *Width;
  size_t Height;
  uint64_t v14;
  float v15;
  float v16;
  VTCompressionSessionRef *v17;
  uint64_t result;
  CMTime *v19;
  CMTime v20;

  Width = (ma::EncodeStats *)CVPixelBufferGetWidth(pixelBuffer);
  Height = CVPixelBufferGetHeight(pixelBuffer);
  v14 = Height;
  v15 = 1080.0;
  if ((int)Width <= (int)Height)
    v16 = 1080.0;
  else
    v16 = 1920.0;
  if ((int)Width <= (int)Height)
    v15 = 1920.0;
  *((float *)this + 26) = v16 / (float)(int)Width;
  *((float *)this + 27) = v15 / (float)(int)Height;
  v17 = (VTCompressionSessionRef *)*((_QWORD *)this + 12);
  if (!v17)
  {
    v17 = ma::EncodeStats::Create(Width, v14, *((unsigned __int8 *)this + 921), *((unsigned __int8 *)this + 920));
    *((_QWORD *)this + 12) = v17;
    if (!v17)
      return 4294967278;
  }
  v20 = *a2;
  result = ma::EncodeStats::ProcessFrame((ma::EncodeStats *)v17, &v20, pixelBuffer);
  if (!(_DWORD)result)
    return ma::EncodeAnalysis::AnalyzeFrame(this, *((ma::EncodeStats **)this + 12), v19, pixelBuffer, a4, a5, a6);
  return result;
}

uint64_t ma::EncodeAnalysis::GetFrameInterestingness(ma::EncodeAnalysis *this, __CVBuffer *a2)
{
  uint64_t FrameLBP;
  const __CFAllocator *v5;
  size_t Width;
  size_t Height;
  uint64_t v8;
  CVPixelBufferRef v9;
  CVPixelBufferRef destinationBuffer;
  VTPixelTransferSessionRef pixelTransferSessionOut;

  destinationBuffer = 0;
  pixelTransferSessionOut = 0;
  FrameLBP = VTPixelTransferSessionCreate(0, &pixelTransferSessionOut);
  if (!(_DWORD)FrameLBP)
  {
    v5 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
    Width = CVPixelBufferGetWidth(a2);
    Height = CVPixelBufferGetHeight(a2);
    v8 = CVPixelBufferCreate(v5, Width, Height, 0x28u, 0, &destinationBuffer);
    v9 = destinationBuffer;
    if ((_DWORD)v8
      || (v8 = VTPixelTransferSessionTransferImage(pixelTransferSessionOut, a2, destinationBuffer),
          v9 = destinationBuffer,
          (_DWORD)v8))
    {
      FrameLBP = v8;
      if (!v9)
        goto LABEL_6;
      goto LABEL_5;
    }
    FrameLBP = ma::EncodeAnalysis::GetFrameLBP(this, destinationBuffer);
    v9 = destinationBuffer;
    if (destinationBuffer)
    {
LABEL_5:
      CFRelease(v9);
      destinationBuffer = 0;
    }
  }
LABEL_6:
  if (pixelTransferSessionOut)
    CFRelease(pixelTransferSessionOut);
  return FrameLBP;
}

uint64_t ma::EncodeAnalysis::GetFrameLBP(ma::EncodeAnalysis *this, CVPixelBufferRef pixelBuffer)
{
  uint64_t v4;
  uint64_t v5;
  int Width;
  int Height;
  unsigned __int8 *BaseAddress;
  int BytesPerRow;
  int v10;
  uint64_t i;
  uint64_t j;
  int v13;
  int v14;
  char *v15;
  char *v16;
  char *v17;
  char *v18;
  uint64_t k;
  float v20;
  float v21;
  char *v22;
  uint64_t m;
  float v24;
  _BOOL8 v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  void *__p[3];
  void *v35;
  char *v36;
  uint64_t v37;
  unsigned int v38;
  CVPixelBufferRef pixelBuffera;
  CVPixelBufferLockFlags unlockFlags;
  _BYTE buf[24];
  uint64_t v42;
  void *v43;
  uint64_t v44;
  uint64_t v45;
  char v46;
  uint64_t v47;

  v47 = *MEMORY[0x1E0C80C00];
  if (CVPixelBufferGetPixelFormatType(pixelBuffer) != 40)
    return 4294967246;
  v38 = 0;
  pixelBuffera = pixelBuffer;
  unlockFlags = 1;
  if (!pixelBuffer)
  {
    v25 = os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR);
    if (v25)
      -[VCPVideoCNNAnalyzer copyImage:withChannels:settling:].cold.1(v25, v26, v27, v28, v29, v30, v31, v32);
    return 4294967246;
  }
  v4 = CVPixelBufferLockBaseAddress(pixelBuffer, 1uLL);
  v38 = v4;
  if (!(_DWORD)v4
    || (v5 = v4, os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
    && (*(_DWORD *)buf = 134218240,
        *(_QWORD *)&buf[4] = pixelBuffer,
        *(_WORD *)&buf[12] = 1024,
        *(_DWORD *)&buf[14] = v5,
        _os_log_error_impl(&dword_1B6C4A000, MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR, "Failed to lock CVPixelBuffer (%p, %d)", buf, 0x12u), (v5 = v38) == 0))
  {
    Width = CVPixelBufferGetWidth(pixelBuffer);
    Height = CVPixelBufferGetHeight(pixelBuffer);
    BaseAddress = (unsigned __int8 *)CVPixelBufferGetBaseAddress(pixelBuffer);
    BytesPerRow = CVPixelBufferGetBytesPerRow(pixelBuffer);
    v35 = 0;
    v36 = 0;
    v37 = 0;
    *(_DWORD *)buf = 0;
    std::vector<float>::vector(__p, 0xAuLL, buf);
    *(_QWORD *)buf = &unk_1E6B142D8;
    *(_OWORD *)&buf[8] = 0uLL;
    v42 = 0;
    v44 = 0;
    v45 = 0;
    v43 = &unk_1E6B14290;
    v46 = 1;
    dlib::array2d<unsigned char,dlib::memory_manager_stateless_kernel_1<char>>::set_size((uint64_t)buf, Height, Width);
    if (Height >= 1)
    {
      v10 = 0;
      for (i = 0; i != Height; ++i)
      {
        if (Width >= 1)
        {
          for (j = 0; j != Width; ++j)
            *(_BYTE *)(*(_QWORD *)&buf[8] + i * *(_QWORD *)&buf[16] + j) = (int)(float)(roundf(ma::EncodeAnalysis::GetFrameLBP(__CVBuffer *)::kRandomGaussian[(v10 + (int)j) % 200])
                                                                                      + (float)(BaseAddress[j] ^ 0xFFu));
        }
        BaseAddress += BytesPerRow;
        v10 += Width;
      }
    }
    v5 = CVPixelBufferLock::Unlock((CVPixelBufferLock *)&v38);
    if (!(_DWORD)v5)
    {
      dlib::extract_uniform_lbp_descriptors_mod<dlib::array2d<unsigned char,dlib::memory_manager_stateless_kernel_1<char>>,float>(buf, (uint64_t)&v35, 0x3Eu);
      v13 = vcvtms_s32_f32((float)Width / 62.0);
      v14 = vcvtms_s32_f32((float)Height / 62.0);
      v15 = (char *)v35;
      v16 = v36;
      if (v35 == v36)
      {
        v21 = 0.0;
      }
      else
      {
        v17 = (char *)__p[0];
        v18 = (char *)v35;
        do
        {
          for (k = 0; k != 40; k += 4)
          {
            v20 = *(float *)&v18[k] / 3844.0;
            *(float *)&v18[k] = v20;
            *(float *)&v17[k] = (float)(v20 / (float)(v14 * v13)) + *(float *)&v17[k];
          }
          v18 += 40;
        }
        while (v18 != v16);
        v21 = 0.0;
        v22 = (char *)__p[0];
        do
        {
          for (m = 0; m != 40; m += 4)
          {
            v24 = (float)(*(float *)&v15[m] - *(float *)&v22[m]) * (float)(*(float *)&v15[m] - *(float *)&v22[m]);
            *(float *)&v15[m] = v24;
            v21 = v21 + v24;
          }
          v15 += 40;
        }
        while (v15 != v16);
      }
      v5 = 0;
      *((float *)this + 236) = sqrtf((float)(v21 / (float)v13) * (float)v14);
    }
    *(_QWORD *)buf = &unk_1E6B142D8;
    if (*(_QWORD *)&buf[8])
      MEMORY[0x1BCCA128C](*(_QWORD *)&buf[8], 0x1000C8077774924);
    if (__p[0])
    {
      __p[1] = __p[0];
      operator delete(__p[0]);
    }
    if (v35)
    {
      v36 = (char *)v35;
      operator delete(v35);
    }
    if (pixelBuffera
      && !v38
      && CVPixelBufferUnlockBaseAddress(pixelBuffera, unlockFlags)
      && os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
    {
      -[VCPImageExposurePreAnalyzer analyzePixelBuffer:flags:results:cancel:].cold.1();
    }
  }
  return v5;
}

void sub_1B6D07E60(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, uint64_t a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20)
{
  uint64_t v20;

  a19 = v20 + 16;
  if (a20)
    MEMORY[0x1BCCA128C](a20, 0x1000C8077774924);
  if (__p)
    operator delete(__p);
  if (a13)
    operator delete(a13);
  CVPixelBufferLock::~CVPixelBufferLock((CVPixelBufferLock *)&a16);
  _Unwind_Resume(a1);
}

uint64_t dlib::extract_uniform_lbp_descriptors_mod<dlib::array2d<unsigned char,dlib::memory_manager_stateless_kernel_1<char>>,float>(_QWORD *a1, uint64_t a2, unsigned int a3)
{
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  BOOL v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t result;
  void *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  void *v20;
  uint64_t v21;
  uint64_t v22;
  char v23;
  _OWORD v24[2];
  uint64_t v25;
  uint64_t v26;

  v26 = *MEMORY[0x1E0C80C00];
  *(_QWORD *)(a2 + 8) = *(_QWORD *)a2;
  v16 = &unk_1E6B142D8;
  v17 = 0;
  v18 = 0;
  v19 = 0;
  v21 = 0;
  v22 = 0;
  v20 = &unk_1E6B14290;
  v23 = 1;
  dlib::make_uniform_lbp_image_mod<dlib::array2d<unsigned char,dlib::memory_manager_stateless_kernel_1<char>>,dlib::array2d<unsigned char,dlib::memory_manager_stateless_kernel_1<char>>>(a1, (uint64_t)&v16);
  v5 = v19;
  if (v19 >= 1)
  {
    v6 = 0;
    v7 = v18;
    do
    {
      v8 = v6 + a3;
      if (v7 >= 1)
      {
        v9 = 0;
        do
        {
          v10 = v9 + a3;
          v11 = v10 <= v7 && v8 <= v19;
          if (v11)
          {
            v25 = 0;
            memset(v24, 0, sizeof(v24));
            if (a3)
            {
              v12 = v17 + v6 * v7;
              v13 = v6;
              do
              {
                v14 = v9;
                do
                {
                  ++*((_DWORD *)v24 + *(unsigned __int8 *)(v12 + v14));
                  v11 = v14++ < v10 - 1;
                }
                while (v11);
                ++v13;
                v12 += v7;
              }
              while (v13 < v8);
            }
            std::vector<float>::__insert_with_size[abi:ne180100]<unsigned int *,unsigned int *>(a2, *(char **)(a2 + 8), (unsigned int *)v24, (unsigned int *)&v26, 10);
            v7 = v18;
          }
          v9 = v10;
        }
        while (v10 < v7);
        v5 = v19;
      }
      v6 += a3;
    }
    while (v8 < v5);
  }
  v16 = &unk_1E6B142D8;
  result = v17;
  if (v17)
    return MEMORY[0x1BCCA128C](v17, 0x1000C8077774924);
  return result;
}

void sub_1B6D080A0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a10)
    MEMORY[0x1BCCA128C](a10, 0x1000C8077774924);
  _Unwind_Resume(exception_object);
}

uint64_t dlib::array2d<unsigned char,dlib::memory_manager_stateless_kernel_1<char>>::~array2d(uint64_t a1)
{
  uint64_t v2;
  _QWORD *v3;

  *(_QWORD *)a1 = &unk_1E6B142D8;
  v3 = (_QWORD *)(a1 + 8);
  v2 = *(_QWORD *)(a1 + 8);
  if (v2)
  {
    MEMORY[0x1BCCA128C](v2, 0x1000C8077774924);
    *v3 = 0;
    v3[1] = 0;
    v3[2] = 0;
    *(_BYTE *)(a1 + 56) = 1;
    *(_QWORD *)(a1 + 40) = 0;
    *(_QWORD *)(a1 + 48) = 0;
  }
  return a1;
}

uint64_t ma::EncodeAnalysis::ComputeBlockAndPixelColorfulness(ma::EncodeAnalysis *this, CVPixelBufferRef pixelBuffer)
{
  uint64_t v4;
  uint64_t v5;
  size_t Width;
  size_t Height;
  size_t BytesPerRow;
  unsigned __int8 *BaseAddress;
  int v10;
  const float *v11;
  const float *v12;
  int v13;
  const float *v14;
  const float *v15;
  double v16;
  double v17;
  double v18;
  const unsigned __int8 *v19;
  int i;
  float v21;
  int v22;
  const unsigned __int8 *v23;
  float v24;
  float v25;
  float v26;
  float v27;
  char *v28;
  float v29;
  float *v30;
  char *v31;
  uint64_t v32;
  unint64_t v33;
  uint64_t v34;
  unint64_t v35;
  char *v36;
  float *v37;
  int v38;
  float *v39;
  float v40;
  float *v41;
  float *v42;
  uint64_t v43;
  unint64_t v44;
  uint64_t v45;
  unint64_t v46;
  char *v47;
  float *v48;
  int v49;
  float *v50;
  float v51;
  float *v52;
  float *v53;
  uint64_t v54;
  unint64_t v55;
  uint64_t v56;
  unint64_t v57;
  char *v58;
  float *v59;
  int v60;
  _BOOL8 v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  const unsigned __int8 *v70;
  int v71;
  float v72;
  float v73;
  float v74;
  double v75;
  double v76;
  float *v77;
  float *v78;
  uint64_t v79;
  float *v80;
  float v81;
  double v82;
  float v83;
  double v84;
  double v85;
  float v86;
  float v87;
  uint64_t v88;
  size_t v89;
  float *j;
  float v91;
  float v92;
  float v93;
  unsigned __int8 *__A;
  size_t v95;
  size_t v96;
  int v97;
  const unsigned __int8 *v98;
  int v99;
  float __C;
  void *v101;
  float *v102;
  float *v103;
  void *__p;
  float *v105;
  float *v106;
  unsigned int v107;
  CVPixelBufferRef pixelBuffera;
  CVPixelBufferLockFlags unlockFlags;
  uint8_t buf[32];
  uint64_t v111;

  v111 = *MEMORY[0x1E0C80C00];
  if (CVPixelBufferGetPixelFormatType(pixelBuffer) != 32)
    return 4294967246;
  v107 = 0;
  pixelBuffera = pixelBuffer;
  unlockFlags = 1;
  if (!pixelBuffer)
  {
    v61 = os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR);
    if (v61)
      -[VCPVideoCNNAnalyzer copyImage:withChannels:settling:].cold.1(v61, v62, v63, v64, v65, v66, v67, v68);
    return 4294967246;
  }
  v4 = CVPixelBufferLockBaseAddress(pixelBuffer, 1uLL);
  v107 = v4;
  if (!(_DWORD)v4
    || (v5 = v4, os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
    && (*(_DWORD *)buf = 134218240,
        *(_QWORD *)&buf[4] = pixelBuffer,
        *(_WORD *)&buf[12] = 1024,
        *(_DWORD *)&buf[14] = v5,
        _os_log_error_impl(&dword_1B6C4A000, MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR, "Failed to lock CVPixelBuffer (%p, %d)", buf, 0x12u), (v5 = v107) == 0))
  {
    Width = CVPixelBufferGetWidth(pixelBuffer);
    Height = CVPixelBufferGetHeight(pixelBuffer);
    BytesPerRow = CVPixelBufferGetBytesPerRow(pixelBuffer);
    BaseAddress = (unsigned __int8 *)CVPixelBufferGetBaseAddress(pixelBuffer);
    v95 = Height;
    v96 = Width;
    v10 = vcvtms_s32_f32((float)Width / 62.0);
    memset(buf, 0, 24);
    __p = 0;
    v105 = 0;
    v106 = 0;
    v101 = 0;
    v102 = 0;
    v103 = 0;
    v11 = (const float *)*((_QWORD *)this + 113);
    v12 = v11 + 3;
    v97 = vcvtms_s32_f32((float)Height / 62.0);
    __A = BaseAddress;
    if (v97 < 1)
    {
      v18 = 0.0;
      v17 = 0.0;
      v16 = 0.0;
    }
    else
    {
      v13 = 0;
      v14 = v11 + 1;
      v15 = v11 + 2;
      v16 = 0.0;
      v17 = 0.0;
      v18 = 0.0;
      v19 = BaseAddress;
      do
      {
        v99 = v13;
        v98 = v19;
        if (v10 >= 1)
        {
          for (i = 0; i != v10; ++i)
          {
            v21 = 0.0;
            v22 = 62;
            v23 = v19;
            v24 = 0.0;
            v25 = 0.0;
            do
            {
              __C = 0.0;
              vDSP_vfltu8(v23, 1, *((float **)this + 113), 1, 0xF8uLL);
              vDSP_sve(v14, 4, &__C, 0x3EuLL);
              v26 = __C;
              vDSP_sve(v15, 4, &__C, 0x3EuLL);
              v27 = __C;
              vDSP_sve(v12, 4, &__C, 0x3EuLL);
              v25 = v25 + v26;
              v24 = v24 + v27;
              v21 = v21 + __C;
              v23 += BytesPerRow;
              --v22;
            }
            while (v22);
            v28 = *(char **)&buf[8];
            v29 = v25 / 3844.0;
            if (*(_QWORD *)&buf[8] >= *(_QWORD *)&buf[16])
            {
              v31 = *(char **)buf;
              v32 = (uint64_t)(*(_QWORD *)&buf[8] - *(_QWORD *)buf) >> 2;
              v33 = v32 + 1;
              if ((unint64_t)(v32 + 1) >> 62)
                std::vector<std::unique_ptr<VCPProtoKeypoint>>::__throw_length_error[abi:ne180100]();
              v34 = *(_QWORD *)&buf[16] - *(_QWORD *)buf;
              if ((uint64_t)(*(_QWORD *)&buf[16] - *(_QWORD *)buf) >> 1 > v33)
                v33 = v34 >> 1;
              if ((unint64_t)v34 >= 0x7FFFFFFFFFFFFFFCLL)
                v35 = 0x3FFFFFFFFFFFFFFFLL;
              else
                v35 = v33;
              if (v35)
              {
                v36 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<float>>((uint64_t)&buf[16], v35);
                v31 = *(char **)buf;
                v28 = *(char **)&buf[8];
              }
              else
              {
                v36 = 0;
              }
              v37 = (float *)&v36[4 * v32];
              *v37 = v29;
              v30 = v37 + 1;
              while (v28 != v31)
              {
                v38 = *((_DWORD *)v28 - 1);
                v28 -= 4;
                *((_DWORD *)v37-- - 1) = v38;
              }
              *(_QWORD *)buf = v37;
              *(_QWORD *)&buf[8] = v30;
              *(_QWORD *)&buf[16] = &v36[4 * v35];
              if (v31)
                operator delete(v31);
            }
            else
            {
              **(float **)&buf[8] = v29;
              v30 = (float *)(v28 + 4);
            }
            *(_QWORD *)&buf[8] = v30;
            v39 = v105;
            v40 = v24 / 3844.0;
            if (v105 >= v106)
            {
              v42 = (float *)__p;
              v43 = ((char *)v105 - (_BYTE *)__p) >> 2;
              v44 = v43 + 1;
              if ((unint64_t)(v43 + 1) >> 62)
                std::vector<std::unique_ptr<VCPProtoKeypoint>>::__throw_length_error[abi:ne180100]();
              v45 = (char *)v106 - (_BYTE *)__p;
              if (((char *)v106 - (_BYTE *)__p) >> 1 > v44)
                v44 = v45 >> 1;
              if ((unint64_t)v45 >= 0x7FFFFFFFFFFFFFFCLL)
                v46 = 0x3FFFFFFFFFFFFFFFLL;
              else
                v46 = v44;
              if (v46)
              {
                v47 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<float>>((uint64_t)&v106, v46);
                v42 = (float *)__p;
                v39 = v105;
              }
              else
              {
                v47 = 0;
              }
              v48 = (float *)&v47[4 * v43];
              *v48 = v40;
              v41 = v48 + 1;
              while (v39 != v42)
              {
                v49 = *((_DWORD *)v39-- - 1);
                *((_DWORD *)v48-- - 1) = v49;
              }
              __p = v48;
              v105 = v41;
              v106 = (float *)&v47[4 * v46];
              if (v42)
                operator delete(v42);
            }
            else
            {
              *v105 = v40;
              v41 = v39 + 1;
            }
            v105 = v41;
            v50 = v102;
            v51 = v21 / 3844.0;
            if (v102 >= v103)
            {
              v53 = (float *)v101;
              v54 = ((char *)v102 - (_BYTE *)v101) >> 2;
              v55 = v54 + 1;
              if ((unint64_t)(v54 + 1) >> 62)
                std::vector<std::unique_ptr<VCPProtoKeypoint>>::__throw_length_error[abi:ne180100]();
              v56 = (char *)v103 - (_BYTE *)v101;
              if (((char *)v103 - (_BYTE *)v101) >> 1 > v55)
                v55 = v56 >> 1;
              if ((unint64_t)v56 >= 0x7FFFFFFFFFFFFFFCLL)
                v57 = 0x3FFFFFFFFFFFFFFFLL;
              else
                v57 = v55;
              if (v57)
              {
                v58 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<float>>((uint64_t)&v103, v57);
                v53 = (float *)v101;
                v50 = v102;
              }
              else
              {
                v58 = 0;
              }
              v59 = (float *)&v58[4 * v54];
              *v59 = v51;
              v52 = v59 + 1;
              while (v50 != v53)
              {
                v60 = *((_DWORD *)v50-- - 1);
                *((_DWORD *)v59-- - 1) = v60;
              }
              v101 = v59;
              v102 = v52;
              v103 = (float *)&v58[4 * v57];
              if (v53)
                operator delete(v53);
            }
            else
            {
              *v102 = v51;
              v52 = v50 + 1;
            }
            v18 = v18 + v25;
            v17 = v17 + v24;
            v16 = v16 + v21;
            v102 = v52;
            v19 += 248;
          }
        }
        v19 = &v98[62 * BytesPerRow];
        v13 = v99 + 1;
      }
      while (v99 + 1 != v97);
    }
    v5 = CVPixelBufferLock::Unlock((CVPixelBufferLock *)&v107);
    v70 = __A;
    if (!(_DWORD)v5)
    {
      v71 = 3844 * v97 * v10;
      v72 = v18 / (double)v71;
      v73 = v17 / (double)v71;
      v74 = v16 / (double)v71;
      v75 = 0.0;
      v76 = 0.0;
      if (v97 * v10 >= 1)
      {
        v77 = *(float **)buf;
        v78 = (float *)__p;
        v79 = (v97 * v10);
        v80 = (float *)v101;
        do
        {
          v81 = *v77++;
          v82 = (float)((float)(v81 - v72) * (float)(v81 - v72));
          v83 = *v78++;
          v84 = v76 + v82;
          v85 = (float)((float)(v83 - v73) * (float)(v83 - v73));
          v86 = *v80++;
          v76 = v84 + v85 + (float)((float)(v86 - v74) * (float)(v86 - v74));
          --v79;
        }
        while (v79);
      }
      v87 = sqrt(v76 / (double)(v97 * v10));
      *((float *)this + 235) = v87;
      if (v95)
      {
        v88 = 0;
        v75 = 0.0;
        do
        {
          vDSP_vfltu8(v70, 1, *((float **)this + 113), 1, 4 * v96);
          v89 = v96;
          for (j = (float *)v12; v89; --v89)
          {
            v91 = (float)((float)(*(j - 1) - v73) * (float)(*(j - 1) - v73))
                + (float)((float)(*(j - 2) - v72) * (float)(*(j - 2) - v72));
            v92 = *j;
            j += 4;
            v75 = v75 + (float)(v91 + (float)((float)(v92 - v74) * (float)(v92 - v74)));
          }
          v70 += BytesPerRow;
          ++v88;
        }
        while (v88 != v95);
      }
      v5 = 0;
      v93 = sqrt(v75 / (double)(v95 * v96));
      *((float *)this + 234) = v93;
    }
    if (v101)
    {
      v102 = (float *)v101;
      operator delete(v101);
    }
    if (__p)
    {
      v105 = (float *)__p;
      operator delete(__p);
    }
    if (*(_QWORD *)buf)
    {
      *(_QWORD *)&buf[8] = *(_QWORD *)buf;
      operator delete(*(void **)buf);
    }
    if (pixelBuffera
      && !v107
      && CVPixelBufferUnlockBaseAddress(pixelBuffera, unlockFlags)
      && os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
    {
      -[VCPImageExposurePreAnalyzer analyzePixelBuffer:flags:results:cancel:].cold.1();
    }
  }
  return v5;
}

void sub_1B6D08838(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *__p,uint64_t a21,uint64_t a22,void *a23,uint64_t a24,uint64_t a25,char a26,uint64_t a27,uint64_t a28,void *a29,uint64_t a30)
{
  if (a2)
    __clang_call_terminate(exception_object);
  _Unwind_Resume(exception_object);
}

uint64_t ma::EncodeAnalysis::FindSeedBoundarySegment(ma::EncodeAnalysis *this, double a2, float a3, uint64_t a4, ma::EncodeStats *a5)
{
  uint64_t v6;
  int v7;
  int v8;
  int v9;
  int v10;
  int v11;
  char v12;
  uint64_t i;
  int v14;
  int v15;
  int v16;
  int v17;
  unint64_t v18;
  int v19;
  int v20;
  _BYTE v22[4];
  _DWORD v23[4];
  _DWORD v24[4];
  _DWORD v25[4];
  uint64_t v26;

  v6 = 0;
  v26 = *MEMORY[0x1E0C80C00];
  v7 = *(_DWORD *)this;
  v8 = *((_DWORD *)this + 1);
  v9 = *(_DWORD *)this - 2;
  v25[0] = 0;
  v25[1] = v9;
  v25[2] = (v8 - 2) * v7;
  v25[3] = 0;
  v24[0] = 1;
  v24[1] = v7;
  v24[2] = 1;
  v24[3] = v7;
  v23[0] = v7;
  v23[1] = v8;
  v23[2] = v7;
  v23[3] = v8;
  v10 = *((_DWORD *)this + 224);
  do
  {
    if (v10 < 1)
      goto LABEL_7;
    v11 = v6 - *((_DWORD *)this + 214);
    if (v11 < 0)
      v11 = *((_DWORD *)this + 214) - v6;
    if (v11 == 2)
      v12 = 0;
    else
LABEL_7:
      v12 = 1;
    v22[v6++] = v12;
  }
  while (v6 != 4);
  for (i = 0; i != 4; ++i)
  {
    if (v22[i])
    {
      v14 = v23[i];
      if (v14 >= 1)
      {
        v15 = 0;
        v16 = 0;
        v17 = 0;
        v18 = v25[i];
        v19 = v24[i];
        v20 = -v14;
        do
        {
          if (v20 + v15 == -1 || !ma::CheckBlock((ma *)v18, *((_QWORD **)this + 12), a5, a2, a3))
          {
            if (v17 > *((_DWORD *)this + 203))
            {
              *((_DWORD *)this + 203) = v17;
              *((_DWORD *)this + 202) = v16;
              *((_DWORD *)this + 204) = i;
            }
            v17 = 0;
            v16 = 0;
          }
          else
          {
            if (!v17)
              v16 = v15;
            ++v17;
          }
          ++v15;
          v18 = (v18 + v19);
        }
        while (v20 + v15);
      }
    }
  }
  return 0;
}

uint64_t ma::EncodeAnalysis::FindObstructionRegion(ma::EncodeAnalysis *this, const ma::MotionResult *a2, ma::EncodeStats *a3, double a4, float a5)
{
  uint64_t v5;
  uint64_t v6;
  int v7;
  uint64_t v9;
  uint64_t v10;
  int v11;
  float v12;
  float v13;
  float v14;
  float v15;
  int v16;
  int v17;
  int v18;
  int v19;
  int v20;
  unsigned __int16 v21;
  int v22;
  unsigned __int16 v23;
  _QWORD *v24;
  unint64_t v25;
  unsigned int v26;
  __int16 *v27;
  int v28;
  float v29;
  ma *v30;
  uint64_t v31;
  uint64_t v32;
  int v33;
  _QWORD *v34;
  ma *v35;
  uint64_t v36;
  _QWORD *v37;
  int v40;
  uint64_t v41;
  int v42;
  int v43;
  int v44;
  uint64_t v45;
  int v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  _DWORD v50[4];
  _DWORD v51[4];
  _DWORD v52[4];
  uint64_t v53;

  v53 = *MEMORY[0x1E0C80C00];
  v5 = *((unsigned int *)this + 1);
  v6 = *(int *)this;
  v52[0] = v6;
  v52[1] = -1;
  v52[2] = -(int)v6;
  v52[3] = 1;
  v51[0] = v5;
  v51[1] = v6 - 1;
  v45 = v5;
  v51[2] = v5 - 1;
  v51[3] = v6;
  v7 = *((_DWORD *)this + 203);
  if (!v7)
    return 0;
  v9 = v6;
  v10 = *((int *)this + 204);
  *((_DWORD *)this + 208) = v10;
  v11 = *((_DWORD *)this + 202);
  *((_DWORD *)this + 205) = v11;
  *((_DWORD *)this + 206) = v7;
  v48 = v6;
  v49 = v6;
  if (v7 < 1)
  {
    v41 = 0;
    v40 = 0;
    v15 = 0.0;
    v14 = 0.0;
    v13 = 0.0;
    v12 = 0.0;
    goto LABEL_21;
  }
  v41 = 0;
  v40 = 0;
  v44 = v11 + v7;
  v42 = v51[v10];
  v43 = (v5 - 2) * v6;
  v12 = 0.0;
  v13 = 0.0;
  v14 = 0.0;
  v15 = 0.0;
  do
  {
    v16 = v11;
    v17 = v11 + v43;
    v18 = v11 * v6;
    ++v11;
    v50[0] = v16;
    v50[1] = v11 * v9 - 2;
    v50[2] = v17;
    v50[3] = v18;
    if (v42 < 1)
      continue;
    v46 = v11;
    v19 = 0;
    v20 = 0;
    v21 = 0;
    v22 = 0;
    v23 = 0;
    v24 = (_QWORD *)*((_QWORD *)this + 12);
    v25 = v50[v10];
    while (!v19)
    {
      v22 = *(unsigned __int16 *)(v24[8] + 2 * (int)v25);
      if (!ma::CheckBlock((ma *)v25, v24, a3, a4, a5))
        goto LABEL_16;
LABEL_10:
      v26 = *(unsigned __int16 *)(v24[8] + 2 * (int)v25);
      v13 = v13 + (float)v26;
      if (v26 > v21)
        ++v20;
      ++*((_DWORD *)this + 209);
      v27 = (__int16 *)(v24[3] + 4 * (int)v25);
      if (v23 <= v26)
        v23 = v26;
      v15 = v15 + (float)*v27;
      *(float *)&a4 = (float)v27[1];
      v14 = v14 + *(float *)&a4;
      v25 = (v52[v10] + v25);
      --v19;
      v21 = v26;
      if (-v42 == v19)
      {
        v9 = v48;
        v6 = v49;
        v11 = v46;
        goto LABEL_18;
      }
    }
    if (ma::CheckBlock((ma *)v25, v24, a3, a4, a5))
      goto LABEL_10;
    a5 = 0.0039062;
    *(float *)&a4 = (float)(v23 - v22) * 0.0039062;
    v12 = v12 + *(float *)&a4;
    v40 += v20;
    LODWORD(v41) = v41 + 1;
    HIDWORD(v41) -= v19;
LABEL_16:
    v9 = v48;
    v6 = v49;
    v11 = v46;
    if (-v19 > *((_DWORD *)this + 207))
      *((_DWORD *)this + 207) = -v19;
LABEL_18:
    ;
  }
  while (v11 < v44);
LABEL_21:
  v28 = *((_DWORD *)this + 209);
  v29 = (float)v28;
  if (v28 > 0)
    v13 = v13 / v29;
  if ((int)v45 < 1)
  {
    v33 = 0;
  }
  else
  {
    v30 = 0;
    v31 = 0;
    v32 = 0;
    v33 = 0;
    v47 = 2 * v6;
    do
    {
      if ((int)v6 >= 1)
      {
        v34 = (_QWORD *)*((_QWORD *)this + 12);
        v35 = v30;
        v36 = v31;
        do
        {
          if (ma::CheckBlock(v35, v34, a3, a4, a5))
          {
            LOWORD(a4) = *(_WORD *)(v34[8] + v36);
            *(float *)&a4 = vabds_f32((float)LODWORD(a4), v13);
            a5 = 8960.0;
            if (*(float *)&a4 < 8960.0)
              ++v33;
          }
          v36 += 2;
          v35 = (ma *)((_DWORD)v35 + 1);
          --v9;
        }
        while (v9);
      }
      ++v32;
      v9 = v48;
      v31 += v47;
      v30 = (ma *)((_DWORD)v30 + v48);
      LODWORD(v6) = v49;
    }
    while (v32 != v45);
  }
  v37 = (_QWORD *)((char *)this + 820);
  if ((float)((float)v33 * 0.5) <= v29)
  {
    *((_DWORD *)this + 210) = (int)sqrtf((float)((float)((float)(v14 / v29) - *((float *)a2 + 24))* (float)((float)(v14 / v29) - *((float *)a2 + 24)))+ (float)((float)((float)(v15 / v29) - *((float *)a2 + 23))* (float)((float)(v15 / v29) - *((float *)a2 + 23))));
  }
  else
  {
    *v37 = 0;
    *(_QWORD *)((char *)this + 828) = 0;
    *(_QWORD *)((char *)this + 836) = 0;
  }
  if (!*((_DWORD *)this + 224)
    && (SHIDWORD(v41) >= 11 && (float)((float)SHIDWORD(v41) * 0.5) > (float)v40
     || (int)v41 >= 3 && v12 < (float)((float)(int)v41 * 1.5)))
  {
    *v37 = 0;
    *(_QWORD *)((char *)this + 828) = 0;
    *(_QWORD *)((char *)this + 836) = 0;
  }
  return 0;
}

uint64_t ma::EncodeAnalysis::FindObstructionScene(ma::EncodeAnalysis *this, Frame *a2)
{
  int v2;
  int v3;
  float v4;
  float v5;
  float v6;
  _BOOL4 v7;
  _BOOL4 v8;
  int v9;

  v2 = *((_DWORD *)this + 209);
  if (!v2)
    goto LABEL_14;
  v3 = *((_DWORD *)this + 224);
  if (v3 <= 0)
    v4 = 1.0;
  else
    v4 = 1.3;
  v5 = (float)v2;
  v6 = (float)(*((_DWORD *)this + 1) * *(_DWORD *)this);
  v7 = (float)(flt_1B6FBCFA8[v3 > 0] * v6) < (float)v2;
  if ((float)((float)*((int *)this + 207) / (float)*((int *)this + 206)) > v4)
    v7 = 0;
  if (v3 == 1)
    v8 = (float)((float)*((int *)this + 216) / 25.0) < (float)*((int *)this + 210);
  else
    v8 = v3 || *((_DWORD *)this + 210) > 128;
  if (v7 && v8)
  {
    *((float *)&a2->flow_ + 1) = v5 / v6;
    v9 = v3 + 1;
  }
  else
  {
LABEL_14:
    v9 = 0;
    HIDWORD(a2->flow_) = 0;
  }
  *((_DWORD *)this + 224) = v9;
  return 0;
}

BOOL ma::CheckBlock(ma *this, _QWORD *a2, ma::EncodeStats *a3, double a4, float a5)
{
  unsigned int v5;
  float v6;
  float v7;
  float v8;
  float v9;
  BOOL v11;
  BOOL v12;

  LOWORD(a5) = *(_WORD *)(a2[8] + 2 * (int)this);
  HIWORD(v5) = 17280;
  v6 = (float)((float)((float)*(unsigned int *)(a2[9] + 4 * (int)this) * 256.0)
             - (float)((float)LODWORD(a5) * (float)LODWORD(a5)))
     * 0.000015259;
  if (v6 >= 9.0)
    return 0;
  LOWORD(v6) = *(_WORD *)(a2[10] + 2 * (int)this);
  v7 = (float)LODWORD(v6) * 0.015625;
  LOWORD(v5) = *(_WORD *)(a2[11] + 2 * (int)this);
  v8 = (float)v5 * 0.015625;
  v9 = v8 - v7;
  if (v7 > 128.0 || v8 < 128.0)
  {
    v11 = 1;
    v12 = 0;
  }
  else
  {
    v11 = v9 == 5.0;
    v12 = v9 < 5.0;
  }
  return !v12 && !v11 && (float)(v7 + v8) > 240.0;
}

uint64_t dlib::array2d<unsigned char,dlib::memory_manager_stateless_kernel_1<char>>::set_size(uint64_t result, uint64_t a2, uint64_t a3)
{
  _QWORD *v3;

  v3 = (_QWORD *)result;
  *(_BYTE *)(result + 56) = 1;
  *(_QWORD *)(result + 40) = 0;
  if (*(_QWORD *)(result + 16) != a3 || *(_QWORD *)(result + 24) != a2)
  {
    result = *(_QWORD *)(result + 8);
    v3[2] = a3;
    v3[3] = a2;
    if (result)
    {
      result = MEMORY[0x1BCCA128C](result, 0x1000C8077774924);
      v3[1] = 0;
      a2 = v3[3];
    }
    if (a2 >= 1)
    {
      result = operator new[]();
      v3[1] = result;
      v3[6] = result + v3[2] * v3[3] - 1;
    }
  }
  return result;
}

void sub_1B6D09088(void *a1)
{
  uint64_t v1;
  _QWORD *v2;

  __cxa_begin_catch(a1);
  if (*v2)
    MEMORY[0x1BCCA128C](*v2, 0x1000C8077774924);
  *(_QWORD *)(v1 + 48) = 0;
  v2[1] = 0;
  v2[2] = 0;
  *v2 = 0;
  __cxa_rethrow();
}

void sub_1B6D090BC(_Unwind_Exception *a1)
{
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

void dlib::array2d<unsigned char,dlib::memory_manager_stateless_kernel_1<char>>::~array2d(uint64_t a1)
{
  uint64_t v2;
  _QWORD *v3;

  *(_QWORD *)a1 = &unk_1E6B142D8;
  v3 = (_QWORD *)(a1 + 8);
  v2 = *(_QWORD *)(a1 + 8);
  if (v2)
  {
    MEMORY[0x1BCCA128C](v2, 0x1000C8077774924);
    *v3 = 0;
    v3[1] = 0;
    v3[2] = 0;
    *(_BYTE *)(a1 + 56) = 1;
    *(_QWORD *)(a1 + 40) = 0;
    *(_QWORD *)(a1 + 48) = 0;
  }
  JUMPOUT(0x1BCCA12BCLL);
}

uint64_t dlib::array2d<unsigned char,dlib::memory_manager_stateless_kernel_1<char>>::at_start(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 56);
}

uint64_t dlib::array2d<unsigned char,dlib::memory_manager_stateless_kernel_1<char>>::reset(uint64_t result)
{
  *(_BYTE *)(result + 56) = 1;
  *(_QWORD *)(result + 40) = 0;
  return result;
}

BOOL dlib::array2d<unsigned char,dlib::memory_manager_stateless_kernel_1<char>>::current_element_valid(uint64_t a1)
{
  return *(_QWORD *)(a1 + 40) != 0;
}

uint64_t dlib::array2d<unsigned char,dlib::memory_manager_stateless_kernel_1<char>>::element(uint64_t a1)
{
  return *(_QWORD *)(a1 + 40);
}

{
  return *(_QWORD *)(a1 + 40);
}

BOOL dlib::array2d<unsigned char,dlib::memory_manager_stateless_kernel_1<char>>::move_next(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v1 = *(_QWORD *)(a1 + 40);
  if (v1)
  {
    if (v1 == *(_QWORD *)(a1 + 48))
    {
      v2 = 0;
      *(_QWORD *)(a1 + 40) = 0;
    }
    else
    {
      *(_QWORD *)(a1 + 40) = v1 + 1;
      return 1;
    }
  }
  else
  {
    v2 = *(unsigned __int8 *)(a1 + 56);
    if (*(_BYTE *)(a1 + 56))
    {
      v3 = *(_QWORD *)(a1 + 8);
      *(_QWORD *)(a1 + 40) = v3;
      *(_BYTE *)(a1 + 56) = 0;
      return v3 != 0;
    }
  }
  return v2;
}

uint64_t dlib::array2d<unsigned char,dlib::memory_manager_stateless_kernel_1<char>>::size(uint64_t a1)
{
  return *(_QWORD *)(a1 + 24) * *(_QWORD *)(a1 + 16);
}

void dlib::memory_manager_stateless_kernel_1<unsigned char>::~memory_manager_stateless_kernel_1()
{
  JUMPOUT(0x1BCCA12BCLL);
}

unint64_t dlib::make_uniform_lbp_image_mod<dlib::array2d<unsigned char,dlib::memory_manager_stateless_kernel_1<char>>,dlib::array2d<unsigned char,dlib::memory_manager_stateless_kernel_1<char>>>(_QWORD *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  unsigned __int8 *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t result;
  uint64_t v11;
  uint64_t i;
  unsigned __int8 *v13;
  uint64_t v14;
  unsigned __int8 *v15;
  unsigned int v16;
  unsigned int v17;
  _BOOL8 v18;
  _BOOL8 v19;
  unint64_t v20;
  unsigned __int8 *v21;
  char v22;
  uint64_t v23;
  __int128 v24;
  uint64_t v25;
  uint64_t v26;

  v4 = (*(uint64_t (**)(_QWORD *))(*a1 + 64))(a1);
  v5 = a1[2];
  if (v4)
    v6 = (unsigned __int8 *)a1[1];
  else
    v6 = 0;
  v7 = a1[3];
  (*(void (**)(uint64_t))(*(_QWORD *)a2 + 64))(a2);
  dlib::array2d<unsigned char,dlib::memory_manager_stateless_kernel_1<char>>::set_size(a2, v7, v5);
  v8 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 64))(a2);
  v9 = *(_QWORD *)(a2 + 8);
  if (!v8)
    v9 = 0;
  v23 = v9;
  v24 = *(_OWORD *)(a2 + 16);
  v25 = v24;
  v26 = a2;
  v22 = 9;
  result = (unint64_t)dlib::assign_border_pixels<dlib::array2d<unsigned char,dlib::memory_manager_stateless_kernel_1<char>>>(&v23, 1, 1, &v22);
  if (v7 >= 3)
  {
    v11 = 1;
    for (i = 2; i != v7; ++i)
    {
      if (v5 >= 3)
      {
        v13 = v6;
        v14 = 2;
        v15 = v6;
        do
        {
          v16 = v13[v5 + 1];
          v17 = *++v15;
          v18 = v13[v5] > v16;
          v19 = v13[v5 + 2] > v16;
          v20 = ((unint64_t)(*v13 > v16) << 7) | ((unint64_t)(v17 > v16) << 6) | (32 * (v13[2] > v16));
          v21 = &v13[(2 * v5) | 1];
          result = *(v21 - 1) > v16;
          *(_BYTE *)(v23 + v11 * v24 + v14++ - 1) = dlib::make_uniform_lbp_image_mod<dlib::array2d<unsigned char,dlib::memory_manager_stateless_kernel_1<char>>,dlib::array2d<unsigned char,dlib::memory_manager_stateless_kernel_1<char>>>(dlib::array2d<unsigned char,dlib::memory_manager_stateless_kernel_1<char>> const&,dlib::array2d<unsigned char,dlib::memory_manager_stateless_kernel_1<char>> &)::uniform_lbps[v20 | (16 * v18) | (8 * v19) | (4 * result) | (2 * (*v21 > v16)) | (v21[1] > v16)];
          v13 = v15;
        }
        while (v5 != v14);
      }
      v6 += v5;
      ++v11;
    }
  }
  return result;
}

_QWORD *dlib::assign_border_pixels<dlib::array2d<unsigned char,dlib::memory_manager_stateless_kernel_1<char>>>(_QWORD *result, uint64_t a2, uint64_t a3, _BYTE *a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t i;
  uint64_t j;
  uint64_t v14;
  uint64_t k;
  uint64_t v16;
  uint64_t m;
  uint64_t v18;

  v5 = result[2];
  v4 = result[3];
  if (v5 >= 0)
    v6 = result[2];
  else
    v6 = v5 + 1;
  v7 = v6 >> 1;
  if (v7 + 1 < a3)
    v8 = v7 + 1;
  else
    v8 = a3;
  if (v4 >= 0)
    v9 = result[3];
  else
    v9 = v4 + 1;
  v10 = v9 >> 1;
  if (v10 + 1 < a2)
    v11 = v10 + 1;
  else
    v11 = a2;
  if (v8 >= 1)
  {
    for (i = 0; i != v8; ++i)
    {
      if (v4 >= 1)
      {
        for (j = 0; j < v4; ++j)
        {
          *(_BYTE *)(*result + i * result[1] + j) = *a4;
          v4 = result[3];
        }
      }
    }
    v5 = result[2];
    v14 = v5 - v8;
    do
    {
      if (v4 >= 1)
      {
        for (k = 0; k < v4; ++k)
        {
          *(_BYTE *)(*result + v14 * result[1] + k) = *a4;
          v4 = result[3];
        }
        v5 = result[2];
      }
      ++v14;
    }
    while (v14 < v5);
  }
  if (v8 < v5 - v8)
  {
    v16 = v8;
    do
    {
      if (v11 >= 1)
      {
        for (m = 0; m != v11; ++m)
          *(_BYTE *)(*result + v16 * result[1] + m) = *a4;
        v18 = result[3] - v11;
        do
          *(_BYTE *)(*result + v16 * result[1] + v18++) = *a4;
        while (v18 < result[3]);
      }
      ++v16;
    }
    while (v16 < result[2] - v8);
  }
  return result;
}

char *std::vector<float>::__insert_with_size[abi:ne180100]<unsigned int *,unsigned int *>(uint64_t a1, char *__src, unsigned int *a3, unsigned int *a4, uint64_t a5)
{
  char *v5;
  unsigned int *v7;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  _BYTE *v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  char *v18;
  uint64_t v19;
  unsigned int *v20;
  char *v21;
  unsigned int *v22;
  float *v23;
  unsigned int v24;
  char *v25;
  char *v26;
  char *v27;
  int v28;
  float *v29;
  unsigned int v30;
  float *v31;
  uint64_t v32;
  float *v33;
  unsigned int v34;
  void *__p;
  float *v37;
  float *v38;
  char *v39;
  uint64_t v40;

  v5 = __src;
  if (a5 < 1)
    return v5;
  v7 = a3;
  v11 = *(_QWORD *)(a1 + 16);
  v9 = a1 + 16;
  v10 = v11;
  v12 = *(_QWORD *)(v9 - 8);
  if (a5 > (uint64_t)(v11 - v12) >> 2)
  {
    v13 = *(_BYTE **)a1;
    v14 = a5 + ((uint64_t)(v12 - *(_QWORD *)a1) >> 2);
    if (v14 >> 62)
      std::vector<std::unique_ptr<VCPProtoKeypoint>>::__throw_length_error[abi:ne180100]();
    v15 = (__src - v13) >> 2;
    v16 = v10 - (_QWORD)v13;
    if (v16 >> 1 > v14)
      v14 = v16 >> 1;
    if ((unint64_t)v16 >= 0x7FFFFFFFFFFFFFFCLL)
      v17 = 0x3FFFFFFFFFFFFFFFLL;
    else
      v17 = v14;
    v40 = v9;
    if (v17)
      v18 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<float>>(v9, v17);
    else
      v18 = 0;
    v31 = (float *)&v18[4 * v15];
    __p = v18;
    v37 = v31;
    v39 = &v18[4 * v17];
    v32 = 4 * a5;
    v33 = &v31[a5];
    do
    {
      v34 = *v7++;
      *v31++ = (float)v34;
      v32 -= 4;
    }
    while (v32);
    v38 = v33;
    v5 = std::vector<float>::__swap_out_circular_buffer((void **)a1, (uint64_t)&__p, v5);
    if (v38 != v37)
      v38 = (float *)((char *)v38 + (((char *)v37 - (char *)v38 + 3) & 0xFFFFFFFFFFFFFFFCLL));
    if (__p)
      operator delete(__p);
    return v5;
  }
  v19 = (uint64_t)(v12 - (_QWORD)__src) >> 2;
  if (v19 >= a5)
  {
    v20 = &a3[a5];
    v21 = *(char **)(v9 - 8);
LABEL_18:
    v25 = &__src[4 * a5];
    v26 = &v21[-4 * a5];
    v27 = v21;
    if ((unint64_t)v26 < v12)
    {
      v27 = v21;
      do
      {
        v28 = *(_DWORD *)v26;
        v26 += 4;
        *(_DWORD *)v27 = v28;
        v27 += 4;
      }
      while ((unint64_t)v26 < v12);
    }
    *(_QWORD *)(a1 + 8) = v27;
    if (v21 != v25)
      memmove(&v21[-4 * ((v21 - v25) >> 2)], __src, v21 - v25);
    if (v20 != v7)
    {
      v29 = (float *)v5;
      do
      {
        v30 = *v7++;
        *v29++ = (float)v30;
      }
      while (v7 != v20);
    }
    return v5;
  }
  v20 = &a3[v19];
  v21 = *(char **)(v9 - 8);
  if (v20 != a4)
  {
    v22 = v20;
    v23 = *(float **)(v9 - 8);
    do
    {
      v24 = *v22++;
      *v23++ = (float)v24;
      v21 += 4;
    }
    while (v22 != a4);
  }
  *(_QWORD *)(a1 + 8) = v21;
  if ((uint64_t)(v12 - (_QWORD)__src) >= 1)
    goto LABEL_18;
  return v5;
}

void sub_1B6D096C8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

char *std::vector<float>::__swap_out_circular_buffer(void **a1, uint64_t a2, char *__src)
{
  char *v5;
  char *v6;
  char *v7;
  char *v8;
  int v9;
  _BYTE *v10;
  uint64_t v11;
  int64_t v12;
  char *v13;
  void *v14;
  void *v15;

  v5 = *(char **)(a2 + 8);
  v6 = (char *)*a1;
  v7 = v5;
  if (*a1 != __src)
  {
    v8 = __src;
    v7 = *(char **)(a2 + 8);
    do
    {
      v9 = *((_DWORD *)v8 - 1);
      v8 -= 4;
      *((_DWORD *)v7 - 1) = v9;
      v7 -= 4;
    }
    while (v8 != v6);
  }
  *(_QWORD *)(a2 + 8) = v7;
  v10 = a1[1];
  v11 = *(_QWORD *)(a2 + 16);
  v12 = v10 - __src;
  if (v10 != __src)
  {
    memmove(*(void **)(a2 + 16), __src, v10 - __src);
    v7 = *(char **)(a2 + 8);
  }
  *(_QWORD *)(a2 + 16) = v11 + v12;
  v13 = (char *)*a1;
  *a1 = v7;
  *(_QWORD *)(a2 + 8) = v13;
  v14 = a1[1];
  a1[1] = *(void **)(a2 + 16);
  *(_QWORD *)(a2 + 16) = v14;
  v15 = a1[2];
  a1[2] = *(void **)(a2 + 24);
  *(_QWORD *)(a2 + 24) = v15;
  *(_QWORD *)a2 = *(_QWORD *)(a2 + 8);
  return v5;
}

void sub_1B6D09A24(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_1B6D09B14(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, objc_super a9)
{
  a9.super_class = (Class)VCPVideoTrackSyncDecoder;
  -[_Unwind_Exception dealloc](&a9, sel_dealloc);
  _Unwind_Resume(a1);
}

void sub_1B6D09FDC(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1B6D0A890(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  void *v4;
  void *v5;
  void *v6;
  va_list va;

  va_start(va, a4);
  sentencepiece::util::Status::~Status((sentencepiece::util::Status *)va);

  _Unwind_Resume(a1);
}

void sub_1B6D0AABC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15, void *__p, uint64_t a17)
{
  void *v17;
  void *v18;
  void *v19;

  sentencepiece::util::Status::~Status((sentencepiece::util::Status *)&a15);
  if (__p)
  {
    a17 = (uint64_t)__p;
    operator delete(__p);
  }

  _Unwind_Resume(a1);
}

BOOL VCPProtoMovieClassificationResultReadFrom(id *a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  int v15;
  VCPProtoTimeRange *v17;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) < *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
  {
    v7 = (int *)MEMORY[0x1E0D82BB8];
    while (1)
    {
      if (*(_BYTE *)(a2 + *v5))
        return *(_BYTE *)(a2 + *v5) == 0;
      v8 = 0;
      v9 = 0;
      v10 = 0;
      while (1)
      {
        v11 = *v3;
        v12 = *(_QWORD *)(a2 + v11);
        if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
          break;
        v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
        *(_QWORD *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0)
          goto LABEL_12;
        v8 += 7;
        if (v9++ >= 9)
        {
          v10 = 0;
          v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
      v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(_BYTE *)(a2 + *v5))
        v10 = 0;
LABEL_14:
      if (v15 || (v10 & 7) == 4)
        return *(_BYTE *)(a2 + *v5) == 0;
      if ((v10 >> 3) == 2)
        break;
      if ((v10 >> 3) == 1)
      {
        v17 = objc_alloc_init(VCPProtoTimeRange);
        objc_storeStrong(a1 + 2, v17);
        if (!PBReaderPlaceMark() || !VCPProtoTimeRangeReadFrom((uint64_t)v17, a2))
          goto LABEL_30;
LABEL_25:
        PBReaderRecallMark();

        goto LABEL_27;
      }
      if ((PBReaderSkipValueWithTag() & 1) == 0)
        return 0;
LABEL_27:
      if (*(_QWORD *)(a2 + *v3) >= *(_QWORD *)(a2 + *v4))
        return *(_BYTE *)(a2 + *v5) == 0;
    }
    v17 = objc_alloc_init(VCPProtoClassification);
    objc_msgSend(a1, "addClassification:", v17);
    if (!PBReaderPlaceMark() || (VCPProtoClassificationReadFrom((uint64_t)v17, a2) & 1) == 0)
    {
LABEL_30:

      return 0;
    }
    goto LABEL_25;
  }
  return *(_BYTE *)(a2 + *v5) == 0;
}

void sub_1B6D0B6C8(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1B6D0B730(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1B6D0B880(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_1B6D0BF8C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;

  _Unwind_Resume(a1);
}

void sub_1B6D0C188(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  v4 = v2;

  _Unwind_Resume(a1);
}

void sub_1B6D0C350(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1B6D0C6D0(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1B6D0C7B8(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1B6D0C848(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void sub_1B6D0CA5C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void sub_1B6D0CBB8(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1B6D0CDA4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_1B6D0CE90(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1B6D0D1DC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, void *a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,char a55,uint64_t a56,uint64_t a57,uint64_t a58,char a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  id a64;

  _Block_object_dispose(&a55, 8);
  _Block_object_dispose(&a59, 8);

  _Unwind_Resume(a1);
}

uint64_t __Block_byref_object_copy__12(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void __Block_byref_object_dispose__12(uint64_t a1)
{

}

void sub_1B6D0D438(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1B6D0D51C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1B6D0D758(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1B6D0DA5C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{

  _Unwind_Resume(a1);
}

void sub_1B6D0DC9C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1B6D0DDFC(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1B6D0E084(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

uint64_t __Block_byref_object_copy__13(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void __Block_byref_object_dispose__13(uint64_t a1)
{

}

void sub_1B6D0E690(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_1B6D0E720(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, objc_super a9)
{
  a9.super_class = (Class)CNNMLEnhancerEspresso;
  -[_Unwind_Exception dealloc](&a9, sel_dealloc);
  _Unwind_Resume(a1);
}

void sub_1B6D0EA14(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_1B6D0EA88(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, objc_super a9)
{
  void *v9;
  void *v10;

  v10 = v9;
  a9.receiver = v10;
  a9.super_class = (Class)VCPMetaTrackDecoder;
  -[_Unwind_Exception dealloc](&a9, sel_dealloc);
  _Unwind_Resume(a1);
}

void sub_1B6D113B4(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1B6D11450(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1B6D11504(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1B6D11698(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, objc_super a9)
{
  a9.super_class = (Class)MADEmbeddingStoreService;
  -[_Unwind_Exception dealloc](&a9, sel_dealloc);
  _Unwind_Resume(a1);
}

void sub_1B6D1194C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

uint64_t __Block_byref_object_copy__14(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void __Block_byref_object_dispose__14(uint64_t a1)
{

}

void sub_1B6D11C58(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id location)
{
  void *v14;
  id *v15;

  objc_destroyWeak(v15);
  objc_destroyWeak(&location);

  _Unwind_Resume(a1);
}

void sub_1B6D11EE4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  CF<opaqueCMSampleBuffer *>::~CF((const void **)va);
  _Unwind_Resume(a1);
}

void sub_1B6D12144(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  void *v13;
  uint64_t v14;
  va_list va;

  va_start(va, a13);

  _Block_object_dispose(va, 8);
  _Block_object_dispose((const void *)(v14 - 96), 8);

  _Unwind_Resume(a1);
}

void sub_1B6D12270(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1B6D12444(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  _Unwind_Resume(a1);
}

void sub_1B6D129A0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,id a28,char a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,id a34)
{
  void *v34;
  void *v35;
  void *v36;
  void *v37;
  void *v38;

  v38 = v35;

  _Block_object_dispose(&a23, 8);
  _Block_object_dispose(&a29, 8);

  _Unwind_Resume(a1);
}

void sub_1B6D12B24(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1B6D12BB8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void sub_1B6D130FC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,id a28,char a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,id a34)
{
  void *v34;
  void *v35;
  void *v36;
  void *v37;
  void *v38;

  v38 = v35;

  _Block_object_dispose(&a23, 8);
  _Block_object_dispose(&a29, 8);

  _Unwind_Resume(a1);
}

void sub_1B6D13280(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1B6D13314(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void sub_1B6D13740(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,id a28)
{
  void *v28;
  void *v29;

  _Block_object_dispose(&a23, 8);
  _Unwind_Resume(a1);
}

void sub_1B6D13898(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1B6D138F8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_1B6D13A54(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1B6D13DAC(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  _Unwind_Resume(a1);
}

void sub_1B6D14238(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1B6D14864(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

float32x2_t CalculateDotProductOfChunkFilterSize1(float32x4_t *a1, uint64_t a2, float32x4_t *a3)
{
  int8x16_t v3;

  v3 = (int8x16_t)vmulq_f32(*a1, *a3);
  *(float32x2_t *)v3.i8 = vadd_f32((float32x2_t)*(_OWORD *)&vextq_s8(v3, v3, 8uLL), *(float32x2_t *)v3.i8);
  return vpadd_f32(*(float32x2_t *)v3.i8, *(float32x2_t *)v3.i8);
}

float32x2_t CalculateDotProductOfChunkFilterSize2(float *a1, uint64_t a2, float *a3)
{
  int8x16_t v3;

  v3 = (int8x16_t)vaddq_f32(vaddq_f32(vmulq_f32(*(float32x4_t *)a1, *(float32x4_t *)a3), vmulq_f32(*(float32x4_t *)&a1[a2], *(float32x4_t *)(a3 + 8))), vaddq_f32(vmulq_f32(*(float32x4_t *)(a1 + 4), *(float32x4_t *)(a3 + 4)), vmulq_f32(*(float32x4_t *)&a1[a2 + 4], *(float32x4_t *)(a3 + 12))));
  *(float32x2_t *)v3.i8 = vadd_f32((float32x2_t)*(_OWORD *)&vextq_s8(v3, v3, 8uLL), *(float32x2_t *)v3.i8);
  return vpadd_f32(*(float32x2_t *)v3.i8, *(float32x2_t *)v3.i8);
}

float32x2_t CalculateDotProductOfChunkFilterSize3(float *a1, uint64_t a2, float *a3)
{
  float *v3;
  float32x4_t v4;
  float32x4_t v5;
  float32x4_t v6;
  float32x4_t *v7;
  int8x16_t v8;

  v3 = &a1[a2];
  v4 = *(float32x4_t *)v3;
  v5 = *(float32x4_t *)(v3 + 4);
  v6 = *(float32x4_t *)(v3 + 8);
  v7 = (float32x4_t *)&v3[a2];
  v8 = (int8x16_t)vaddq_f32(vmulq_f32(v7[2], *(float32x4_t *)(a3 + 32)), vaddq_f32(vaddq_f32(vaddq_f32(vmulq_f32(*(float32x4_t *)a1, *(float32x4_t *)a3), vmulq_f32(v5, *(float32x4_t *)(a3 + 16))), vaddq_f32(vmulq_f32(*(float32x4_t *)(a1 + 8), *(float32x4_t *)(a3 + 8)), vmulq_f32(*v7, *(float32x4_t *)(a3 + 24)))), vaddq_f32(vaddq_f32(vmulq_f32(*(float32x4_t *)(a1 + 4), *(float32x4_t *)(a3 + 4)), vmulq_f32(v6, *(float32x4_t *)(a3 + 20))), vaddq_f32(vmulq_f32(v4, *(float32x4_t *)(a3 + 12)), vmulq_f32(v7[1], *(float32x4_t *)(a3 + 28))))));
  *(float32x2_t *)v8.i8 = vadd_f32((float32x2_t)*(_OWORD *)&vextq_s8(v8, v8, 8uLL), *(float32x2_t *)v8.i8);
  return vpadd_f32(*(float32x2_t *)v8.i8, *(float32x2_t *)v8.i8);
}

float32x2_t CalculateDotProductOfChunkFilterSize5(float *a1, uint64_t a2, float *a3)
{
  float *v3;
  float32x4_t v4;
  float32x4_t v5;
  float32x4_t v6;
  float32x4_t v7;
  float32x4_t v8;
  float32x4_t *v9;
  float32x4_t v10;
  float32x4_t v11;
  float32x4_t v12;
  float32x4_t v13;
  float32x4_t v14;
  float32x4_t *v15;
  float32x4_t v16;
  float32x4_t v17;
  float32x4_t v18;
  float32x4_t v19;
  float32x4_t v20;
  float32x4_t *v21;
  int8x16_t v22;

  v3 = &a1[a2];
  v4 = *(float32x4_t *)v3;
  v5 = *(float32x4_t *)(v3 + 4);
  v6 = *(float32x4_t *)(v3 + 8);
  v7 = *(float32x4_t *)(v3 + 12);
  v8 = *(float32x4_t *)(v3 + 16);
  v9 = (float32x4_t *)&v3[a2];
  v10 = *v9;
  v11 = v9[1];
  v12 = v9[2];
  v13 = v9[3];
  v14 = v9[4];
  v15 = (float32x4_t *)((char *)v9 + 4 * a2);
  v16 = *v15;
  v17 = v15[1];
  v18 = v15[2];
  v19 = v15[3];
  v20 = v15[4];
  v21 = (float32x4_t *)((char *)v15 + 4 * a2);
  v22 = (int8x16_t)vaddq_f32(vaddq_f32(vmulq_f32(v21[4], *(float32x4_t *)(a3 + 96)), vaddq_f32(vaddq_f32(vaddq_f32(vmulq_f32(*(float32x4_t *)(a1 + 4), *(float32x4_t *)(a3 + 4)), vmulq_f32(v13, *(float32x4_t *)(a3 + 52))), vaddq_f32(vmulq_f32(v6, *(float32x4_t *)(a3 + 28)), vmulq_f32(v20, *(float32x4_t *)(a3 + 76)))), vaddq_f32(vaddq_f32(vmulq_f32(*(float32x4_t *)(a1 + 16), *(float32x4_t *)(a3 + 16)), vmulq_f32(v17, *(float32x4_t *)(a3 + 64))), vaddq_f32(vmulq_f32(v10, *(float32x4_t *)(a3 + 40)), vmulq_f32(v21[2], *(float32x4_t *)(a3 + 88)))))), vaddq_f32(vaddq_f32(
                         vaddq_f32(vaddq_f32(vmulq_f32(*(float32x4_t *)a1, *(float32x4_t *)a3), vmulq_f32(v12, *(float32x4_t *)(a3 + 48))), vaddq_f32(vmulq_f32(v5, *(float32x4_t *)(a3 + 24)), vmulq_f32(v19, *(float32x4_t *)(a3 + 72)))), vaddq_f32(vaddq_f32(vmulq_f32(*(float32x4_t *)(a1 + 12), *(float32x4_t *)(a3 + 12)), vmulq_f32(v16, *(float32x4_t *)(a3 + 60))), vaddq_f32(vmulq_f32(v8, *(float32x4_t *)(a3 + 36)), vmulq_f32(v21[1], *(float32x4_t *)(a3 + 84))))), vaddq_f32(vaddq_f32(vaddq_f32(vmulq_f32(*(float32x4_t *)(a1 + 8), *(float32x4_t *)(a3 + 8)), vmulq_f32(v14, *(float32x4_t *)(a3 + 56))), vaddq_f32(
                             vmulq_f32(v7, *(float32x4_t *)(a3 + 32)),
                             vmulq_f32(*v21, *(float32x4_t *)(a3 + 80)))),
                         vaddq_f32(vaddq_f32(vmulq_f32(v4, *(float32x4_t *)(a3 + 20)), vmulq_f32(v18, *(float32x4_t *)(a3 + 68))), vaddq_f32(vmulq_f32(v11, *(float32x4_t *)(a3 + 44)), vmulq_f32(v21[3], *(float32x4_t *)(a3 + 92)))))));
  *(float32x2_t *)v22.i8 = vadd_f32((float32x2_t)*(_OWORD *)&vextq_s8(v22, v22, 8uLL), *(float32x2_t *)v22.i8);
  return vpadd_f32(*(float32x2_t *)v22.i8, *(float32x2_t *)v22.i8);
}

void sub_1B6D14C54(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_1B6D14DE8(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  _Unwind_Resume(a1);
}

void sub_1B6D14EE0(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1B6D14F5C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_1B6D150BC(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_1B6D1531C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1B6D157BC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, void *a11)
{

  _Unwind_Resume(a1);
}

void sub_1B6D163E8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, void *a14, void *a15, void *a16, void *a17, uint64_t a18, void *a19)
{

  _Unwind_Resume(a1);
}

void sub_1B6D1677C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_1B6D1683C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1B6D16B90(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{

  _Unwind_Resume(a1);
}

void sub_1B6D16DA8(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1B6D16F58(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1B6D17174(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1B6D1738C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1B6D17A64(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, void *a15, uint64_t a16, void *a17)
{
  void *v17;

  _Unwind_Resume(a1);
}

void sub_1B6D17F44(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9)
{
  void *v9;

  _Unwind_Resume(a1);
}

void sub_1B6D1817C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, uint64_t a15, void *a16, uint64_t a17)
{
  if (__p)
    operator delete(__p);
  if (a16)
    operator delete(a16);
  _Unwind_Resume(exception_object);
}

void sub_1B6D18318(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_1B6D18418(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, objc_super a9)
{
  a9.super_class = (Class)VCPMoFlowSingleEspresso;
  -[_Unwind_Exception dealloc](&a9, sel_dealloc);
  _Unwind_Resume(a1);
}

void sub_1B6D18718(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1B6D18800(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, void *a14)
{
  void *v14;
  void *v15;
  void *v16;

  _Unwind_Resume(a1);
}

void sub_1B6D18A6C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  CVPixelBufferLock::~CVPixelBufferLock((CVPixelBufferLock *)va);
  _Unwind_Resume(a1);
}

void sub_1B6D18BB4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  CF<opaqueCMSampleBuffer *>::~CF((const void **)va);
  _Unwind_Resume(a1);
}

void sub_1B6D18FA0(_Unwind_Exception *exception_object)
{
  _Unwind_Resume(exception_object);
}

void sub_1B6D19250(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  CVPixelBufferLock::~CVPixelBufferLock((CVPixelBufferLock *)va);
  _Unwind_Resume(a1);
}

void sub_1B6D19494(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  CVPixelBufferLock::~CVPixelBufferLock((CVPixelBufferLock *)va);
  _Unwind_Resume(a1);
}

void sub_1B6D19854(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v3;
  va_list va;
  uint64_t v5;
  uint64_t v6;
  va_list va1;

  va_start(va1, a2);
  va_start(va, a2);
  v3 = va_arg(va1, _QWORD);
  v5 = va_arg(va1, _QWORD);
  v6 = va_arg(va1, _QWORD);
  CVPixelBufferLock::~CVPixelBufferLock((CVPixelBufferLock *)va1);
  CVPixelBufferLock::~CVPixelBufferLock((CVPixelBufferLock *)va);
  _Unwind_Resume(a1);
}

void sub_1B6D1994C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1B6D19DE8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11, void *a12, void *a13)
{
  void *v13;
  void *v14;

  _Unwind_Resume(a1);
}

void sub_1B6D19F44(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1B6D1A148(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  _Unwind_Resume(a1);
}

void sub_1B6D1A404(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_1B6D1A708(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1B6D1A854(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1B6D1A9AC(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_1B6D1AD64(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1B6D1B7B8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,void *a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,char a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  char a67;
  void *v67;

  _Block_object_dispose(&a55, 8);

  _Block_object_dispose(&a67, 8);
  _Block_object_dispose(&STACK[0x220], 8);

  _Unwind_Resume(a1);
}

uint64_t __Block_byref_object_copy__15(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void __Block_byref_object_dispose__15(uint64_t a1)
{

}

void sub_1B6D1BC1C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  CF<opaqueCMSampleBuffer *>::~CF((const void **)va);
  _Unwind_Resume(a1);
}

void sub_1B6D1BD6C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14)
{
  _Unwind_Resume(exception_object);
}

BOOL VCPProtoImageBlurResultReadFrom(uint64_t a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  char v14;
  uint64_t v16;
  int v17;
  uint64_t v19;
  unint64_t v20;
  int v21;
  uint64_t v22;
  unint64_t v23;
  int *v24;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) < *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
  {
    v7 = (int *)MEMORY[0x1E0D82BB8];
    while (1)
    {
      if (*(_BYTE *)(a2 + *v5))
        return *(_BYTE *)(a2 + *v5) == 0;
      v8 = 0;
      v9 = 0;
      v10 = 0;
      while (1)
      {
        v11 = *v3;
        v12 = *(_QWORD *)(a2 + v11);
        v13 = v12 + 1;
        if (v12 == -1 || v13 > *(_QWORD *)(a2 + *v4))
          break;
        v14 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
        *(_QWORD *)(a2 + v11) = v13;
        v10 |= (unint64_t)(v14 & 0x7F) << v8;
        if ((v14 & 0x80) == 0)
          goto LABEL_12;
        v8 += 7;
        if (v9++ >= 9)
        {
          v10 = 0;
          v16 = *v5;
          v17 = *(unsigned __int8 *)(a2 + v16);
          goto LABEL_14;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
      v16 = *v5;
      v17 = *(unsigned __int8 *)(a2 + v16);
      if (*(_BYTE *)(a2 + v16))
        v10 = 0;
LABEL_14:
      if (v17 || (v10 & 7) == 4)
        return *(_BYTE *)(a2 + *v5) == 0;
      if ((v10 >> 3) == 2)
        break;
      if ((v10 >> 3) == 1)
      {
        v19 = *v3;
        v20 = *(_QWORD *)(a2 + v19);
        if (v20 <= 0xFFFFFFFFFFFFFFFBLL && v20 + 4 <= *(_QWORD *)(a2 + *v4))
        {
          v21 = *(_DWORD *)(*(_QWORD *)(a2 + *v7) + v20);
          *(_QWORD *)(a2 + v19) = v20 + 4;
        }
        else
        {
          *(_BYTE *)(a2 + v16) = 1;
          v21 = 0;
        }
        v24 = &OBJC_IVAR___VCPProtoImageBlurResult__sharpness;
LABEL_32:
        *(_DWORD *)(a1 + *v24) = v21;
        goto LABEL_33;
      }
      if ((PBReaderSkipValueWithTag() & 1) == 0)
        return 0;
LABEL_33:
      if (*(_QWORD *)(a2 + *v3) >= *(_QWORD *)(a2 + *v4))
        return *(_BYTE *)(a2 + *v5) == 0;
    }
    *(_BYTE *)(a1 + 16) |= 1u;
    v22 = *v3;
    v23 = *(_QWORD *)(a2 + v22);
    if (v23 <= 0xFFFFFFFFFFFFFFFBLL && v23 + 4 <= *(_QWORD *)(a2 + *v4))
    {
      v21 = *(_DWORD *)(*(_QWORD *)(a2 + *v7) + v23);
      *(_QWORD *)(a2 + v22) = v23 + 4;
    }
    else
    {
      *(_BYTE *)(a2 + *v5) = 1;
      v21 = 0;
    }
    v24 = &OBJC_IVAR___VCPProtoImageBlurResult__faceSharpness;
    goto LABEL_32;
  }
  return *(_BYTE *)(a2 + *v5) == 0;
}

void sub_1B6D1C674(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;

  v6 = v5;

  _Unwind_Resume(a1);
}

void sub_1B6D1C7DC(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_1B6D1C860(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1B6D1CA84(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1B6D1CCC8(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1B6D1CD68(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1B6D1CDF8(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1B6D1CFC0(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1B6D1D068(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1B6D1D118(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1B6D1D214(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1B6D1D3DC(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1B6D1D8CC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, const void *a12)
{
  CVPixelBufferLock::~CVPixelBufferLock((CVPixelBufferLock *)&a9);
  CF<opaqueCMSampleBuffer *>::~CF(&a12);
  _Unwind_Resume(a1);
}

void sub_1B6D1E4A0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void sub_1B6D1E854(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1B6D1EC44(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, void *a11)
{
  void *v11;

  _Unwind_Resume(a1);
}

void sub_1B6D1ED94(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1B6D1EECC(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1B6D1F230(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
  if (a2)
    __clang_call_terminate(exception_object);
  _Unwind_Resume(exception_object);
}

void sub_1B6D1FE6C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1B6D20140(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void sub_1B6D20564(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9, void *a10)
{

  _Unwind_Resume(a1);
}

void sub_1B6D20A08(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11, void *a12, void *a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void *a22)
{

  _Unwind_Resume(a1);
}

void sub_1B6D20B4C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  v3 = v2;

  _Unwind_Resume(a1);
}

void sub_1B6D20BFC(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1B6D20C48(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1B6D20C94(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1B6D20D28(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1B6D20D94(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1B6D20E20(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1B6D20EA8(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1B6D20F34(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1B6D21114(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_1B6D2148C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12)
{

  _Unwind_Resume(a1);
}

void sub_1B6D21538(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1B6D215C8(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1B6D216A8(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1B6D21910(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  _Unwind_Resume(a1);
}

void sub_1B6D21A88(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;

  _Unwind_Resume(a1);
}

void sub_1B6D21EC4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1B6D21F84(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1B6D22008(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  objc_sync_exit(v2);

  _Unwind_Resume(a1);
}

void sub_1B6D222C4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;

  objc_sync_exit(v4);
  _Unwind_Resume(a1);
}

void sub_1B6D22470(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_1B6D22660(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_1B6D2280C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1B6D22898(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1B6D22908(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1B6D22B18(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1B6D22C90(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1B6D22E00(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1B6D22E80(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1B6D22F20(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1B6D22FA0(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1B6D231C4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;

  _Unwind_Resume(a1);
}

ma::Segment *ma::TrackSegment::TrackSegment(ma::TrackSegment *this)
{
  ma::Segment *result;

  result = ma::Segment::Segment(this);
  *(_QWORD *)result = &off_1E6B13E70;
  *((_BYTE *)result + 72) = 0;
  *((_DWORD *)result + 19) = 0;
  *((_DWORD *)result + 20) = 0;
  return result;
}

void ma::TrackSegment::Reset(ma::TrackSegment *this)
{
  ma::Segment::Reset(this);
  *((_BYTE *)this + 72) = 0;
  *((_DWORD *)this + 19) = 0;
  *((_DWORD *)this + 20) = 0;
}

float ma::TrackSegment::UpdateStats(ma::TrackSegment *this, const MotionResult *a2)
{
  int v2;
  float result;

  v2 = *((_DWORD *)this + 5) + 1;
  *((_DWORD *)this + 5) = v2;
  result = a2->track_score_ + *((float *)this + 19);
  *((float *)this + 19) = result;
  *((float *)this + 20) = result / (float)v2;
  return result;
}

float ma::TrackSegment::ResetStats(ma::TrackSegment *this, const MotionResult *a2)
{
  float result;

  *((_DWORD *)this + 5) = a2->valid_mb_;
  result = a2->track_score_;
  *((float *)this + 19) = result;
  *((float *)this + 20) = result;
  return result;
}

float ma::TrackSegment::Merge(ma::TrackSegment *this, const ma::TrackSegment *a2)
{
  float result;
  float v5;

  ma::Segment::Merge(this, a2);
  result = *((float *)a2 + 19) + *((float *)this + 19);
  v5 = result / (float)*((int *)this + 5);
  *((float *)this + 19) = result;
  *((float *)this + 20) = v5;
  return result;
}

uint64_t ma::TrackSegment::ToDictionary(ma::TrackSegment *this, const __CFAllocator *a2, const __CFDictionary **a3)
{
  uint64_t result;
  __CFDictionary *v6;
  const void **v7;
  CFNumberRef v8;
  int valuePtr;
  CFNumberRef v10;

  result = ma::Segment::ToDictionary(this, a2, a3);
  if (!(_DWORD)result)
  {
    v6 = *a3;
    if (*a3)
    {
      v7 = (const void **)MEMORY[0x1E0C9AE50];
      if (!*((_BYTE *)this + 72))
        v7 = (const void **)MEMORY[0x1E0C9AE40];
      CFDictionarySetValue(*a3, CFSTR("Tracking"), *v7);
      valuePtr = *((_DWORD *)this + 20);
      v8 = CFNumberCreate(0, kCFNumberFloat32Type, &valuePtr);
      v10 = v8;
      if (v8)
      {
        CFDictionarySetValue(v6, CFSTR("TrackingScore"), v8);
        CF<opaqueCMSampleBuffer *>::~CF((const void **)&v10);
        result = 0;
LABEL_9:
        *a3 = v6;
        return result;
      }
      CF<opaqueCMSampleBuffer *>::~CF((const void **)&v10);
      CFRelease(v6);
      v6 = 0;
    }
    result = 4294967188;
    goto LABEL_9;
  }
  return result;
}

void sub_1B6D23668(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  CF<opaqueCMSampleBuffer *>::~CF((const void **)va);
  _Unwind_Resume(a1);
}

uint64_t ma::TrackSegment::FromDictionary(ma::TrackSegment *this, const __CFDictionary *a2)
{
  const void *Value;
  const void *v5;
  CFTypeID v6;
  BOOL v7;
  const __CFNumber *v8;
  int v9;
  uint64_t result;
  int valuePtr;

  if (!a2)
    return 4294967246;
  ma::Segment::FromDictionary(this, a2);
  Value = CFDictionaryGetValue(a2, CFSTR("Tracking"));
  v7 = Value
    && (v5 = Value, v6 = CFGetTypeID(Value), v6 == CFBooleanGetTypeID())
    && CFEqual(v5, (CFTypeRef)*MEMORY[0x1E0C9AE50]) != 0;
  *((_BYTE *)this + 72) = v7;
  valuePtr = 0;
  v8 = (const __CFNumber *)CFDictionaryGetValue(a2, CFSTR("TrackingScore"));
  if (v8)
  {
    CFNumberGetValue(v8, kCFNumberFloat32Type, &valuePtr);
    v9 = valuePtr;
  }
  else
  {
    v9 = 0;
  }
  result = 0;
  *((_DWORD *)this + 20) = v9;
  return result;
}

void ma::TrackSegment::~TrackSegment(ma::TrackSegment *this)
{
  JUMPOUT(0x1BCCA12BCLL);
}

uint64_t VCPProtoSummarizedEmbeddingResultReadFrom(uint64_t a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  int v15;
  int v16;
  VCPProtoTimeRange *v18;
  uint64_t result;
  char v20;
  unsigned int v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  char v25;
  char v26;
  unsigned int v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  char v31;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) < *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
  {
    v7 = (int *)MEMORY[0x1E0D82BB8];
    do
    {
      if (*(_BYTE *)(a2 + *v5))
        break;
      v8 = 0;
      v9 = 0;
      v10 = 0;
      while (1)
      {
        v11 = *v3;
        v12 = *(_QWORD *)(a2 + v11);
        if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
          break;
        v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
        *(_QWORD *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0)
          goto LABEL_12;
        v8 += 7;
        v14 = v9++ >= 9;
        if (v14)
        {
          v10 = 0;
          v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
      v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(_BYTE *)(a2 + *v5))
        v10 = 0;
LABEL_14:
      v16 = v10 & 7;
      if (v15 || v16 == 4)
        break;
      if ((v10 >> 3) == 2)
      {
        if (v16 == 2)
        {
          result = PBReaderPlaceMark();
          if (!(_DWORD)result)
            return result;
          while (*(_QWORD *)(a2 + *v3) < *(_QWORD *)(a2 + *v4) && !*(_BYTE *)(a2 + *v5))
          {
            v20 = 0;
            v21 = 0;
            v22 = 0;
            while (1)
            {
              v23 = *v3;
              v24 = *(_QWORD *)(a2 + v23);
              if (v24 == -1 || v24 >= *(_QWORD *)(a2 + *v4))
                break;
              v25 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v24);
              *(_QWORD *)(a2 + v23) = v24 + 1;
              v22 |= (unint64_t)(v25 & 0x7F) << v20;
              if (v25 < 0)
              {
                v20 += 7;
                v14 = v21++ >= 9;
                if (!v14)
                  continue;
              }
              goto LABEL_35;
            }
            *(_BYTE *)(a2 + *v5) = 1;
LABEL_35:
            PBRepeatedUInt32Add();
          }
          PBReaderRecallMark();
        }
        else
        {
          v26 = 0;
          v27 = 0;
          v28 = 0;
          while (1)
          {
            v29 = *v3;
            v30 = *(_QWORD *)(a2 + v29);
            if (v30 == -1 || v30 >= *(_QWORD *)(a2 + *v4))
              break;
            v31 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v30);
            *(_QWORD *)(a2 + v29) = v30 + 1;
            v28 |= (unint64_t)(v31 & 0x7F) << v26;
            if (v31 < 0)
            {
              v26 += 7;
              v14 = v27++ >= 9;
              if (!v14)
                continue;
            }
            goto LABEL_47;
          }
          *(_BYTE *)(a2 + *v5) = 1;
LABEL_47:
          PBRepeatedUInt32Add();
        }
      }
      else if ((v10 >> 3) == 1)
      {
        v18 = objc_alloc_init(VCPProtoTimeRange);
        objc_storeStrong((id *)(a1 + 32), v18);
        if (!PBReaderPlaceMark() || !VCPProtoTimeRangeReadFrom((uint64_t)v18, a2))
        {

          return 0;
        }
        PBReaderRecallMark();

      }
      else if ((PBReaderSkipValueWithTag() & 1) == 0)
      {
        return 0;
      }
    }
    while (*(_QWORD *)(a2 + *v3) < *(_QWORD *)(a2 + *v4));
  }
  return *(_BYTE *)(a2 + *v5) == 0;
}

void ma::EncodeStats::~EncodeStats(ma::EncodeStats *this)
{
  *(_QWORD *)this = off_1E6B13E10;
  ma::EncodeStats::Destroy(this);
}

double ma::EncodeStats::Destroy(ma::EncodeStats *this)
{
  uint64_t v2;
  _OWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  double result;

  v3 = (_OWORD *)((char *)this + 8);
  v2 = *((_QWORD *)this + 1);
  if (v2)
    MEMORY[0x1BCCA128C](v2, 0x1000C8077774924);
  v4 = *((_QWORD *)this + 2);
  if (v4)
    MEMORY[0x1BCCA128C](v4, 0x1000C8077774924);
  v5 = *((_QWORD *)this + 3);
  if (v5)
    MEMORY[0x1BCCA128C](v5, 0x1000C8052888210);
  v6 = *((_QWORD *)this + 4);
  if (v6)
    MEMORY[0x1BCCA128C](v6, 0x1000C8052888210);
  v7 = *((_QWORD *)this + 5);
  if (v7)
    MEMORY[0x1BCCA128C](v7, 0x1000C8052888210);
  v8 = *((_QWORD *)this + 6);
  if (v8)
    MEMORY[0x1BCCA128C](v8, 0x1000C8052888210);
  v9 = *((_QWORD *)this + 7);
  if (v9)
    MEMORY[0x1BCCA128C](v9, 0x1000C80BDFB0063);
  v10 = *((_QWORD *)this + 8);
  if (v10)
    MEMORY[0x1BCCA128C](v10, 0x1000C80BDFB0063);
  v11 = *((_QWORD *)this + 9);
  if (v11)
    MEMORY[0x1BCCA128C](v11, 0x1000C8052888210);
  v12 = *((_QWORD *)this + 10);
  if (v12)
    MEMORY[0x1BCCA128C](v12, 0x1000C80BDFB0063);
  v13 = *((_QWORD *)this + 11);
  if (v13)
    MEMORY[0x1BCCA128C](v13, 0x1000C80BDFB0063);
  v14 = *((_QWORD *)this + 12);
  if (v14)
    MEMORY[0x1BCCA128C](v14, 0x1000C80BDFB0063);
  v15 = *((_QWORD *)this + 13);
  if (v15)
    MEMORY[0x1BCCA128C](v15, 0x1000C80BDFB0063);
  v16 = *((_QWORD *)this + 14);
  if (v16)
    MEMORY[0x1BCCA128C](v16, 0x1000C80BDFB0063);
  v17 = *((_QWORD *)this + 15);
  if (v17)
    MEMORY[0x1BCCA128C](v17, 0x1000C80BDFB0063);
  v18 = *((_QWORD *)this + 16);
  if (v18)
    MEMORY[0x1BCCA128C](v18, 0x1000C80BDFB0063);
  v19 = *((_QWORD *)this + 17);
  if (v19)
    MEMORY[0x1BCCA128C](v19, 0x1000C80BDFB0063);
  v20 = *((_QWORD *)this + 18);
  if (v20)
    MEMORY[0x1BCCA128C](v20, 0x1000C80BDFB0063);
  v21 = *((_QWORD *)this + 19);
  if (v21)
    MEMORY[0x1BCCA128C](v21, 0x1000C80BDFB0063);
  v22 = *((_QWORD *)this + 20);
  if (v22)
    MEMORY[0x1BCCA128C](v22, 0x1000C80BDFB0063);
  result = 0.0;
  v3[8] = 0u;
  v3[9] = 0u;
  v3[6] = 0u;
  v3[7] = 0u;
  v3[4] = 0u;
  v3[5] = 0u;
  v3[2] = 0u;
  v3[3] = 0u;
  *v3 = 0u;
  v3[1] = 0u;
  return result;
}

VTCompressionSessionRef *ma::EncodeStats::Create(ma::EncodeStats *this, uint64_t a2, uint64_t a3, _BOOL8 a4)
{
  int v8;
  ma::EncodeStatsHW *v9;
  VTCompressionSessionRef *v10;
  char *v11;
  ma::EncodeStatsHW *v12;
  unsigned int (**v13)(VTCompressionSessionRef *, int32_t, int32_t, int, BOOL);

  v8 = SocType();
  if ((v8 - 247) > 1)
  {
    if ((v8 - 249) > 7)
      goto LABEL_9;
    v12 = (ma::EncodeStatsHW *)operator new(0xF8uLL, MEMORY[0x1E0DE4E10]);
    if (!v12)
      goto LABEL_9;
    v10 = (VTCompressionSessionRef *)v12;
    ma::EncodeStatsHW::EncodeStatsHW(v12);
  }
  else
  {
    v9 = (ma::EncodeStatsHW *)operator new(0xF8uLL, MEMORY[0x1E0DE4E10]);
    if (!v9)
      goto LABEL_9;
    v10 = (VTCompressionSessionRef *)v9;
    ma::EncodeStatsHW::EncodeStatsHW(v9);
  }
  v13 = (unsigned int (**)(VTCompressionSessionRef *, int32_t, int32_t, int, BOOL))(v11 + 16);
  *v10 = (VTCompressionSessionRef)v13;
  *((_BYTE *)v10 + 173) = 1;
  if (!v13[2](v10, (int32_t)this, a2, a3, a4))
    return v10;
  (*((void (**)(VTCompressionSessionRef *))*v10 + 1))(v10);
LABEL_9:
  v10 = (VTCompressionSessionRef *)operator new(0xF8uLL, MEMORY[0x1E0DE4E10]);
  ma::EncodeStatsSW::EncodeStatsSW((ma::EncodeStatsSW *)v10);
  if ((*((unsigned int (**)(VTCompressionSessionRef *, ma::EncodeStats *, uint64_t, uint64_t, _BOOL8))*v10 + 2))(v10, this, a2, a3, a4))
  {
    (*((void (**)(VTCompressionSessionRef *))*v10 + 1))(v10);
    return 0;
  }
  return v10;
}

void sub_1B6D24458(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1BCCA12A4](v1, MEMORY[0x1E0DE4E10]);
  _Unwind_Resume(a1);
}

uint64_t ma::EncodeStats::ParseStatistics(ma::EncodeStats *this, CFDataRef theData)
{
  const UInt8 *BytePtr;
  int v5;
  int v6;
  BOOL v7;
  int v8;
  int v9;
  int v10;
  int v11;
  int v12;
  int v13;
  int v14;
  int v15;
  const UInt8 *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _WORD *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t result;

  if (!CFDataGetBytePtr(theData))
    return 4294967246;
  CFDataGetLength(theData);
  BytePtr = CFDataGetBytePtr(theData);
  v5 = *(_DWORD *)BytePtr;
  v6 = *((_DWORD *)this + 44);
  v8 = v6 + 15;
  v7 = v6 < -15;
  v9 = v6 + 30;
  if (!v7)
    v9 = v8;
  if (v5 != v9 >> 4)
    return 4294967246;
  v10 = *((_DWORD *)BytePtr + 1);
  v11 = *((_DWORD *)this + 45);
  v12 = v11 + 15;
  v7 = v11 < -15;
  v13 = v11 + 30;
  if (!v7)
    v13 = v12;
  if (v10 != v13 >> 4)
    return 4294967246;
  if (v10 >= 1)
  {
    v14 = 0;
    v15 = 0;
    v16 = BytePtr + 8;
    while (v5 < 1)
    {
LABEL_16:
      result = 0;
      if (++v14 == v10)
        return result;
    }
    v17 = 0;
    v18 = 2 * v15;
    v19 = 2;
    v20 = 4 * v15;
    while (v14 == *(_DWORD *)v16 && (_DWORD)v17 == *((_DWORD *)v16 + 1))
    {
      *(_BYTE *)(*((_QWORD *)this + 1) + v15 + v17) = v16[8] > 0x19u;
      v21 = (_WORD *)(*((_QWORD *)this + 3) + v20 + v19);
      *(v21 - 1) = *((_WORD *)v16 + 141);
      *v21 = *((_WORD *)v16 + 142);
      v22 = *((_QWORD *)this + 8);
      *(_WORD *)(*((_QWORD *)this + 7) + v18 + 2 * v17) = *((_WORD *)v16 + 143);
      *(_WORD *)(v22 + v18 + 2 * v17) = *((_WORD *)v16 + 179);
      v23 = *((_QWORD *)this + 9);
      *(_WORD *)(*((_QWORD *)this + 10) + v18 + 2 * v17) = *((_WORD *)v16 + 180);
      *(_WORD *)(*((_QWORD *)this + 11) + v18 + 2 * v17) = *((_WORD *)v16 + 181);
      *(_DWORD *)(v23 + v20 + 4 * v17) = *((_DWORD *)v16 + 91);
      v24 = *((_QWORD *)this + 16);
      *(_WORD *)(*((_QWORD *)this + 15) + v18 + 2 * v17) = *((_DWORD *)v16 + 94);
      *(_WORD *)(v24 + v18 + 2 * v17) = *((_DWORD *)v16 + 97);
      v16 += 400;
      ++v17;
      v19 += 4;
      if (v5 == (_DWORD)v17)
      {
        v15 += v17;
        goto LABEL_16;
      }
    }
    return 4294967246;
  }
  return 0;
}

uint64_t ma::EncodeStats::GenerateSubMacroBlockStats(ma::EncodeStats *this, CVPixelBufferRef pixelBuffer)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _BOOL8 v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  size_t BytesPerRowOfPlane;
  size_t v22;
  const unsigned __int8 *BaseAddressOfPlane;
  const unsigned __int8 *v24;
  int v25;
  const unsigned __int8 *v26;
  int v27;
  int v28;
  int v29;
  uint64_t v30;
  int v31;
  CVPixelBufferRef pixelBuffera;
  CVPixelBufferLockFlags unlockFlags;

  pixelBuffera = pixelBuffer;
  unlockFlags = 1;
  if (pixelBuffer)
  {
    v4 = CVPixelBufferLockBaseAddress(pixelBuffer, 1uLL);
    v31 = v4;
    if ((_DWORD)v4)
    {
      v5 = v4;
      if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
        -[VCPImageConverter convertImage:yuvFrame:].cold.3((uint64_t)pixelBuffer, v5, v6, v7, v8, v9, v10, v11);
    }
    else
    {
      BytesPerRowOfPlane = CVPixelBufferGetBytesPerRowOfPlane(pixelBuffer, 0);
      v22 = CVPixelBufferGetBytesPerRowOfPlane(pixelBuffer, 1uLL);
      BaseAddressOfPlane = (const unsigned __int8 *)CVPixelBufferGetBaseAddressOfPlane(pixelBuffer, 0);
      v24 = (const unsigned __int8 *)CVPixelBufferGetBaseAddressOfPlane(pixelBuffer, 1uLL);
      v25 = *((_DWORD *)this + 45);
      if (v25 >= 1)
      {
        v26 = v24;
        v27 = 0;
        v28 = 0;
        v29 = *((_DWORD *)this + 44);
        do
        {
          if (v29 >= 1)
          {
            v30 = 0;
            do
            {
              ma::EncodeStats::GenerateSubMacroBlockSum(this, v27, BytesPerRowOfPlane, v22, &BaseAddressOfPlane[v30], &v26[v30]);
              v30 += 8;
              ++v27;
              v29 = *((_DWORD *)this + 44);
            }
            while (v29 > (int)v30);
            v25 = *((_DWORD *)this + 45);
          }
          v28 += 8;
          BaseAddressOfPlane += 8 * BytesPerRowOfPlane;
          v26 += 4 * v22;
        }
        while (v28 < v25);
      }
      v5 = CVPixelBufferLock::Unlock((CVPixelBufferLock *)&v31);
      if (pixelBuffera
        && !v31
        && CVPixelBufferUnlockBaseAddress(pixelBuffera, unlockFlags)
        && os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
      {
        -[VCPImageExposurePreAnalyzer analyzePixelBuffer:flags:results:cancel:].cold.1();
      }
    }
  }
  else
  {
    v12 = os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR);
    if (v12)
      ma::EncodeStats::GenerateSubMacroBlockStats(v12, v13, v14, v15, v16, v17, v18, v19);
    return 4294967246;
  }
  return v5;
}

void sub_1B6D247C8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  CVPixelBufferLock::~CVPixelBufferLock((CVPixelBufferLock *)va);
  _Unwind_Resume(a1);
}

_QWORD *ma::EncodeStats::GenerateSubMacroBlockSum(_QWORD *this, int a2, uint64_t a3, uint64_t a4, const unsigned __int8 *a5, const unsigned __int8 *a6)
{
  int v6;
  __int16 v7;
  uint64_t i;
  int v9;
  __int16 v10;
  __int16 v11;
  unint64_t v12;
  BOOL v13;
  uint64_t v14;

  v6 = 0;
  v7 = 0;
  do
  {
    for (i = 0; i != 8; ++i)
      v7 += a5[i];
    ++v6;
    a5 += a3;
  }
  while (v6 != 8);
  v9 = 0;
  v10 = 0;
  v11 = 0;
  do
  {
    v12 = 0;
    do
    {
      v11 += a6[v12];
      v10 += a6[v12 + 1];
      v13 = v12 >= 6;
      v12 += 2;
    }
    while (!v13);
    ++v9;
    a6 += a4;
  }
  while (v9 != 4);
  v14 = this[13];
  *(_WORD *)(this[12] + 2 * a2) = v7;
  *(_WORD *)(v14 + 2 * a2) = v11;
  *(_WORD *)(this[14] + 2 * a2) = v10;
  return this;
}

uint64_t ma::EncodeStats::ProcessFrame(ma::EncodeStats *this, CMTime *a2, CVBufferRef buffer)
{
  const __CFData *Attachment;
  unsigned int v7;
  uint64_t v8;
  uint64_t result;
  __int128 v10;
  CMTimeEpoch epoch;

  Attachment = (const __CFData *)CVBufferGetAttachment(buffer, CFSTR("AveStats"), 0);
  if (Attachment && ma::EncodeStats::ParseStatistics(this, Attachment))
  {
    puts("Failed to parse AVE statistics frame attachment; re-generating statistics");
    v7 = 0;
  }
  else
  {
    v7 = 1;
  }
  v10 = *(_OWORD *)&a2->value;
  epoch = a2->epoch;
  if (Attachment)
    v8 = v7;
  else
    v8 = 0;
  result = (*(uint64_t (**)(ma::EncodeStats *, __int128 *, CVBufferRef, uint64_t))(*(_QWORD *)this + 24))(this, &v10, buffer, v8);
  if (!(_DWORD)result)
  {
    if (*((_BYTE *)this + 174))
      return 0;
    result = ma::EncodeStats::GenerateSubMacroBlockStats(this, buffer);
    if (!(_DWORD)result)
      return 0;
  }
  return result;
}

void sub_1B6D24A38(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;

  v5 = v4;

  _Unwind_Resume(a1);
}

void sub_1B6D24B3C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1B6D24DD0(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_1B6D24FB8(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1B6D251AC(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1B6D25338(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1B6D2563C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;
  void *v11;
  void *v12;

  _Unwind_Resume(a1);
}

void sub_1B6D25784(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1B6D259F8(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1B6D25DA0(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;

  _Unwind_Resume(a1);
}

void sub_1B6D26230(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9)
{
  void *v9;

  _Unwind_Resume(a1);
}

void sub_1B6D26488(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;

  v7 = v5;

  _Unwind_Resume(a1);
}

void sub_1B6D26834(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  void *v16;

  _Unwind_Resume(a1);
}

void sub_1B6D26DFC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, void *a11, void *a12, void *a13, uint64_t a14, uint64_t a15, void *a16, void *a17)
{
  void *v17;

  _Unwind_Resume(a1);
}

void sub_1B6D271E0(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  _Unwind_Resume(a1);
}

void sub_1B6D2742C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1B6D27690(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15)
{

  _Unwind_Resume(a1);
}

void sub_1B6D27AEC(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1B6D27C30(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_1B6D27FFC(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1B6D2846C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1B6D285FC(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1B6D28764(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1B6D28CEC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  void *v14;

  _Unwind_Resume(a1);
}

void sub_1B6D29160(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{

  _Unwind_Resume(a1);
}

void sub_1B6D29574(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v3;
  va_list va;
  uint64_t v5;
  uint64_t v6;
  va_list va1;

  va_start(va1, a2);
  va_start(va, a2);
  v3 = va_arg(va1, _QWORD);
  v5 = va_arg(va1, _QWORD);
  v6 = va_arg(va1, _QWORD);
  CVPixelBufferLock::~CVPixelBufferLock((CVPixelBufferLock *)va1);
  CVPixelBufferLock::~CVPixelBufferLock((CVPixelBufferLock *)va);
  _Unwind_Resume(a1);
}

void sub_1B6D296F4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  CF<opaqueCMSampleBuffer *>::~CF((const void **)va);
  _Unwind_Resume(a1);
}

void sub_1B6D29B68(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v3;
  va_list va;
  uint64_t v5;
  uint64_t v6;
  va_list va1;

  va_start(va1, a2);
  va_start(va, a2);
  v3 = va_arg(va1, _QWORD);
  v5 = va_arg(va1, _QWORD);
  v6 = va_arg(va1, _QWORD);
  CVPixelBufferLock::~CVPixelBufferLock((CVPixelBufferLock *)va1);
  CVPixelBufferLock::~CVPixelBufferLock((CVPixelBufferLock *)va);
  _Unwind_Resume(a1);
}

void sub_1B6D2A040(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v3;
  va_list va;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  va_list va1;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  va_list va2;

  va_start(va2, a2);
  va_start(va1, a2);
  va_start(va, a2);
  v3 = va_arg(va1, _QWORD);
  v5 = va_arg(va1, _QWORD);
  v6 = va_arg(va1, _QWORD);
  va_copy(va2, va1);
  v7 = va_arg(va2, _QWORD);
  v9 = va_arg(va2, _QWORD);
  v10 = va_arg(va2, _QWORD);
  v11 = va_arg(va2, _QWORD);
  CVPixelBufferLock::~CVPixelBufferLock((CVPixelBufferLock *)va1);
  CVPixelBufferLock::~CVPixelBufferLock((CVPixelBufferLock *)va2);
  CVPixelBufferLock::~CVPixelBufferLock((CVPixelBufferLock *)va);
  _Unwind_Resume(a1);
}

void sub_1B6D2A13C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1B6D2A1C0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, objc_super a9)
{
  void *v9;
  void *v10;

  v10 = v9;
  a9.receiver = v10;
  a9.super_class = (Class)VCPModelR2D2;
  -[_Unwind_Exception dealloc](&a9, sel_dealloc);
  _Unwind_Resume(a1);
}

uint64_t VCPProtoMovieUtteranceResultReadFrom(uint64_t a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  int v15;
  VCPProtoTimeRange *v17;
  uint64_t result;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) < *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
  {
    v7 = (int *)MEMORY[0x1E0D82BB8];
    do
    {
      if (*(_BYTE *)(a2 + *v5))
        break;
      v8 = 0;
      v9 = 0;
      v10 = 0;
      while (1)
      {
        v11 = *v3;
        v12 = *(_QWORD *)(a2 + v11);
        if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
          break;
        v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
        *(_QWORD *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0)
          goto LABEL_12;
        v8 += 7;
        if (v9++ >= 9)
        {
          v10 = 0;
          v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
      v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(_BYTE *)(a2 + *v5))
        v10 = 0;
LABEL_14:
      if (v15 || (v10 & 7) == 4)
        break;
      if ((v10 >> 3) == 1)
      {
        v17 = objc_alloc_init(VCPProtoTimeRange);
        objc_storeStrong((id *)(a1 + 8), v17);
        if (!PBReaderPlaceMark() || !VCPProtoTimeRangeReadFrom((uint64_t)v17, a2))
        {

          return 0;
        }
        PBReaderRecallMark();

      }
      else
      {
        result = PBReaderSkipValueWithTag();
        if (!(_DWORD)result)
          return result;
      }
    }
    while (*(_QWORD *)(a2 + *v3) < *(_QWORD *)(a2 + *v4));
  }
  return *(_BYTE *)(a2 + *v5) == 0;
}

__n128 ma::DescriptorAnalysis::DescriptorAnalysis(ma::DescriptorAnalysis *this)
{
  uint64_t v1;
  __n128 result;

  *((_QWORD *)this + 1) = 0;
  *((_QWORD *)this + 2) = 0;
  *(_QWORD *)this = 0;
  v1 = MEMORY[0x1E0CA2E68];
  result = *(__n128 *)MEMORY[0x1E0CA2E68];
  *(_OWORD *)((char *)this + 24) = *MEMORY[0x1E0CA2E68];
  *((_QWORD *)this + 5) = *(_QWORD *)(v1 + 16);
  *((_BYTE *)this + 48) = 1;
  *(_QWORD *)((char *)this + 60) = 0;
  *(_QWORD *)((char *)this + 52) = 0;
  *((_DWORD *)this + 17) = 0;
  return result;
}

void ma::DescriptorAnalysis::~DescriptorAnalysis(ma::DescriptorAnalysis *this)
{
  ma::Rotator *v2;
  const void *v3;

  v2 = (ma::Rotator *)*((_QWORD *)this + 7);
  if (v2)
  {
    ma::Rotator::~Rotator(v2);
    MEMORY[0x1BCCA12BC]();
  }
  v3 = (const void *)*((_QWORD *)this + 8);
  if (v3)
    CFRelease(v3);
  MotionAnalysis<ma::ObstructionSegment>::~MotionAnalysis((uint64_t)this);
}

uint64_t ma::DescriptorAnalysis::Initialize(ma::DescriptorAnalysis *this, int a2)
{
  ma::Rotator *v3;
  void *v5;
  void *v6;
  uint64_t result;
  CFMutableArrayRef Mutable;

  v3 = (ma::Rotator *)*((_QWORD *)this + 7);
  if (a2)
  {
    if (v3)
    {
      if (*((_DWORD *)v3 + 4) == a2)
        goto LABEL_11;
      ma::Rotator::~Rotator(v3);
      MEMORY[0x1BCCA12BC]();
    }
    v5 = operator new(0x20uLL, MEMORY[0x1E0DE4E10]);
    if (!v5)
    {
      *((_QWORD *)this + 7) = 0;
      return 4294967188;
    }
    v6 = v5;
    ma::Rotator::Rotator((uint64_t)v5, a2);
  }
  else
  {
    if (v3)
    {
      ma::Rotator::~Rotator(v3);
      MEMORY[0x1BCCA12BC]();
    }
    v6 = 0;
  }
  *((_QWORD *)this + 7) = v6;
LABEL_11:
  result = MotionAnalysis<ma::DescriptorSegment>::Initialize((uint64_t)this);
  if ((_DWORD)result)
    return result;
  Mutable = CFArrayCreateMutable(0, 0, MEMORY[0x1E0C9B378]);
  *((_QWORD *)this + 8) = Mutable;
  if (Mutable)
    return 0;
  return 4294967188;
}

void sub_1B6D2A8C0(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1BCCA12A4](v1, MEMORY[0x1E0DE4E10]);
  _Unwind_Resume(a1);
}

uint64_t MotionAnalysis<ma::DescriptorSegment>::Initialize(uint64_t a1)
{
  _QWORD *v3;
  _QWORD *v4;

  if (*(_QWORD *)(a1 + 16) || *(_QWORD *)(a1 + 8))
    return 4294967246;
  *(_QWORD *)(a1 + 16) = CFArrayCreateMutable(0, 0, MEMORY[0x1E0C9B378]);
  v3 = operator new(0x58uLL, MEMORY[0x1E0DE4E10]);
  if (v3)
  {
    v4 = v3;
    v3[10] = 0;
    *((_OWORD *)v3 + 3) = 0u;
    *((_OWORD *)v3 + 4) = 0u;
    *((_OWORD *)v3 + 1) = 0u;
    *((_OWORD *)v3 + 2) = 0u;
    *(_OWORD *)v3 = 0u;
    ma::Segment::Segment((ma::Segment *)v3);
    *v4 = &unk_1E6B13FD8;
    VCPImageDescriptorWrapper::VCPImageDescriptorWrapper((VCPImageDescriptorWrapper *)(v4 + 9));
    VCPImageDescriptorWrapper::VCPImageDescriptorWrapper((VCPImageDescriptorWrapper *)(v4 + 10));
    *(_QWORD *)(a1 + 8) = v4;
    if (*(_QWORD *)(a1 + 16))
      return 0;
    else
      return 4294967188;
  }
  else
  {
    *(_QWORD *)(a1 + 8) = 0;
    return 4294967188;
  }
}

void sub_1B6D2A9A4(_Unwind_Exception *a1)
{
  uint64_t v1;
  VCPImageDescriptorWrapper *v2;

  VCPImageDescriptorWrapper::~VCPImageDescriptorWrapper(v2);
  MEMORY[0x1BCCA12A4](v1, MEMORY[0x1E0DE4E10]);
  _Unwind_Resume(a1);
}

uint64_t ma::DescriptorAnalysis::GenerateDescriptor(ma::DescriptorAnalysis *this, __CVBuffer *a2, ma::Frame *a3)
{
  const __CFArray *v6;
  uint64_t v7;
  _OWORD *v8;
  uint64_t Descriptor;
  uint64_t v10;
  __int128 v11;
  __int128 v12;
  uint64_t v13;
  ma::Rotator *v14;
  __CVBuffer *v15;
  ma::Segment *v17;
  ma::Segment *v18;
  CMTimeValue v19;
  CMTime v20;
  CMTime start;
  CMTimeRange lhs;
  CMTime v23;
  CMTime time;
  __CVBuffer *v25;
  CMTime rhs;

  v25 = 0;
  v6 = *(const __CFArray **)this;
  if (v6)
  {
    if (CFArrayGetCount(v6))
    {
      v7 = *(_QWORD *)Vector<ma::Object *>::Back((const __CFArray **)this);
      if (v7)
      {
        v8 = (_OWORD *)(v7 + 48);
        time = *(CMTime *)(v7 + 48);
        if (CMTimeGetSeconds(&time) < 1.0)
        {
          *(_OWORD *)&lhs.start.value = *v8;
          lhs.start.epoch = *(_QWORD *)(v7 + 64);
          rhs = *(CMTime *)((char *)a3 + 28);
          CMTimeAdd(&v23, &lhs.start, &rhs);
          Descriptor = 0;
          *v8 = *(_OWORD *)&v23.value;
          *(_QWORD *)(v7 + 64) = v23.epoch;
          ++*(_DWORD *)(v7 + 16);
          goto LABEL_12;
        }
        *(_OWORD *)&lhs.start.value = *(_OWORD *)((char *)a3 + 4);
        lhs.start.epoch = *(_QWORD *)((char *)a3 + 20);
        rhs = *(CMTime *)(v7 + 24);
        CMTimeSubtract(&v23, &lhs.start, &rhs);
        *v8 = *(_OWORD *)&v23.value;
        *(_QWORD *)(v7 + 64) = v23.epoch;
        *(_DWORD *)(v7 + 16) = *(_DWORD *)a3 - *(_DWORD *)(v7 + 12);
      }
    }
  }
  start = *(CMTime *)((char *)a3 + 4);
  v20 = *(CMTime *)((char *)a3 + 28);
  CMTimeRangeMake(&lhs, &start, &v20);
  v10 = *((_QWORD *)this + 1);
  v12 = *(_OWORD *)&lhs.start.epoch;
  v11 = *(_OWORD *)&lhs.duration.timescale;
  *(_OWORD *)(v10 + 24) = *(_OWORD *)&lhs.start.value;
  *(_OWORD *)(v10 + 40) = v12;
  *(_OWORD *)(v10 + 56) = v11;
  v13 = *((_QWORD *)this + 1);
  *(_DWORD *)(v13 + 12) = *(_DWORD *)a3;
  *(_DWORD *)(v13 + 16) = 1;
  v14 = (ma::Rotator *)*((_QWORD *)this + 7);
  if (v14)
  {
    Descriptor = ma::Rotator::Rotate(v14, a2, (CFTypeRef *)&v25);
    if ((_DWORD)Descriptor)
      goto LABEL_12;
    v15 = v25;
  }
  else
  {
    v15 = (__CVBuffer *)CFRetain(a2);
    v25 = v15;
  }
  Descriptor = ma::DescriptorSegment::GenerateDescriptor(*((void ****)this + 1), v15);
  if (!(_DWORD)Descriptor)
  {
    v17 = (ma::Segment *)operator new(0x58uLL, MEMORY[0x1E0DE4E10]);
    if (v17)
    {
      v18 = v17;
      ma::Segment::Segment(v17);
      *(_QWORD *)v18 = &unk_1E6B13FD8;
      VCPImageDescriptorWrapper::VCPImageDescriptorWrapper((ma::Segment *)((char *)v18 + 72));
      VCPImageDescriptorWrapper::VCPImageDescriptorWrapper((ma::Segment *)((char *)v18 + 80));
      v19 = *((_QWORD *)this + 1);
      *((_QWORD *)this + 1) = v18;
      lhs.start.value = v19;
      Descriptor = Vector<ma::Object *>::PushBack((CFMutableArrayRef *)this, &lhs);
      if ((_DWORD)Descriptor && lhs.start.value)
        (*(void (**)(CMTimeValue))(*(_QWORD *)lhs.start.value + 8))(lhs.start.value);
    }
    else
    {
      Descriptor = 4294967188;
    }
  }
LABEL_12:
  if (v25)
    CFRelease(v25);
  return Descriptor;
}

void sub_1B6D2AC28(_Unwind_Exception *a1)
{
  uint64_t v1;
  VCPImageDescriptorWrapper *v2;

  VCPImageDescriptorWrapper::~VCPImageDescriptorWrapper(v2);
  MEMORY[0x1BCCA12A4](v1, MEMORY[0x1E0DE4E10]);
  _Unwind_Resume(a1);
}

uint64_t ma::DescriptorAnalysis::CopyProperty(ma::DescriptorAnalysis *this, CFTypeRef cf1, const __CFAllocator *a3, CFArrayRef *a4)
{
  const __CFArray *v8;
  CFArrayRef Copy;
  uint64_t result;

  if (CFEqual(cf1, CFSTR("FeatureVectorResults")))
  {
    v8 = (const __CFArray *)*((_QWORD *)this + 2);
    if (v8)
    {
LABEL_3:
      Copy = CFArrayCreateCopy(a3, v8);
LABEL_7:
      result = 0;
      *a4 = Copy;
      return result;
    }
LABEL_6:
    Copy = 0;
    goto LABEL_7;
  }
  if (CFEqual(cf1, CFSTR("SceneprintResults")))
  {
    v8 = (const __CFArray *)*((_QWORD *)this + 8);
    if (v8)
      goto LABEL_3;
    goto LABEL_6;
  }
  return 4294967246;
}

uint64_t ma::DescriptorAnalysis::FinalizeDescriptorAnalysis(CFArrayRef *this)
{
  CFIndex v2;
  const __CFArray *v3;
  id **v4;
  ma::DescriptorAnalysis *v5;
  uint64_t Attributes;
  CMTime *v7;
  CFTypeRef v9;
  CFTypeRef cf;

  v2 = 0;
  v9 = 0;
  cf = 0;
  while (1)
  {
    v3 = *this;
    if (*this)
      LODWORD(v3) = CFArrayGetCount(v3);
    if (v2 >= (int)v3)
      break;
    v4 = *(id ***)CFArrayGetValueAtIndex(*this, v2);
    if (cf)
    {
      CFRelease(cf);
      cf = 0;
    }
    v5 = (ma::DescriptorAnalysis *)v9;
    if (v9)
    {
      CFRelease(v9);
      v9 = 0;
    }
    Attributes = ma::DescriptorAnalysis::GenerateAttributes(v5, v4, (const __CFDictionary **)&cf, (const __CFDictionary **)&v9);
    if (!(_DWORD)Attributes)
    {
      v7 = (CMTime *)(v4 + 3);
      Attributes = AddResultDictionary(v7, 0, 0, 0, (const __CFDictionary *)cf, this[2]);
      if (!(_DWORD)Attributes)
      {
        Attributes = AddResultDictionary(v7, 0, 0, 0, (const __CFDictionary *)v9, this[8]);
        ++v2;
        if (!(_DWORD)Attributes)
          continue;
      }
    }
    goto LABEL_14;
  }
  Attributes = 0;
LABEL_14:
  CF<opaqueCMSampleBuffer *>::~CF(&v9);
  CF<opaqueCMSampleBuffer *>::~CF(&cf);
  return Attributes;
}

void sub_1B6D2ADE4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, const void *a9, const void *a10)
{
  CF<opaqueCMSampleBuffer *>::~CF(&a9);
  CF<opaqueCMSampleBuffer *>::~CF(&a10);
  _Unwind_Resume(a1);
}

uint64_t ma::DescriptorAnalysis::GenerateAttributes(ma::DescriptorAnalysis *this, id **a2, const __CFDictionary **a3, const __CFDictionary **a4)
{
  __CFDictionary *Mutable;
  __CFDictionary *v8;
  __CFDictionary *v9;
  const __CFDictionary *v10;
  uint64_t v11;
  void *v13;
  void *value;

  value = (void *)ma::DescriptorSegment::SerializeImageprintDescriptor(a2);
  v13 = (void *)ma::DescriptorSegment::SerializeSceneprintDescriptor(a2);
  if (!value)
    goto LABEL_7;
  Mutable = CFDictionaryCreateMutable(0, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  v8 = Mutable;
  if (!Mutable)
  {
LABEL_8:
    v10 = 0;
    v11 = 4294967188;
    goto LABEL_9;
  }
  CFDictionarySetValue(Mutable, CFSTR("featureVector"), value);
  if (!v13 || (v9 = CFDictionaryCreateMutable(0, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]), (v10 = v9) == 0))
  {
    CFRelease(v8);
LABEL_7:
    v8 = 0;
    goto LABEL_8;
  }
  CFDictionarySetValue(v9, CFSTR("sceneprint"), v13);
  v11 = 0;
LABEL_9:
  *a3 = v8;
  *a4 = v10;
  CF<opaqueCMSampleBuffer *>::~CF((const void **)&v13);
  CF<opaqueCMSampleBuffer *>::~CF((const void **)&value);
  return v11;
}

void sub_1B6D2AF24(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  CF<opaqueCMSampleBuffer *>::~CF((const void **)va);
  _Unwind_Resume(a1);
}

const __CFArray *ma::DescriptorAnalysis::GetDescriptorInTimeRange@<X0>(CFArrayRef *this@<X0>, CMTimeRange *a2@<X1>, CFMutableArrayRef *a3@<X8>)
{
  CFIndex v6;
  const __CFArray *v7;
  __int128 v8;
  __int128 v9;
  const __CFArray *result;
  CFIndex i;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  CMTimeRange v15;
  CMTimeRange v16;
  CMTime time;
  CMTimeRange range;
  uint64_t v19;

  v6 = 0;
  *a3 = 0;
  while (1)
  {
    v7 = *this;
    if (*this)
      LODWORD(v7) = CFArrayGetCount(v7);
    if (v6 >= (int)v7)
      break;
    v19 = 0;
    v19 = *(_QWORD *)CFArrayGetValueAtIndex(*this, v6);
    v8 = *(_OWORD *)&a2->duration.timescale;
    v9 = *(_OWORD *)&a2->start.value;
    *(_OWORD *)&range.start.epoch = *(_OWORD *)&a2->start.epoch;
    *(_OWORD *)&range.duration.timescale = v8;
    *(_OWORD *)&range.start.value = v9;
    time = *(CMTime *)(v19 + 24);
    if (CMTimeRangeContainsTime(&range, &time))
      Vector<ma::Object *>::PushBack(a3, &v19);
    ++v6;
  }
  if (!*a3 || (result = (const __CFArray *)CFArrayGetCount(*a3), !(_DWORD)result))
  {
    for (i = 0; ; ++i)
    {
      result = *this;
      if (*this)
        result = (const __CFArray *)CFArrayGetCount(result);
      if (i >= (int)result)
        break;
      v19 = *(_QWORD *)CFArrayGetValueAtIndex(*this, i);
      v12 = *(_OWORD *)(v19 + 24);
      v13 = *(_OWORD *)(v19 + 56);
      *(_OWORD *)&v16.start.epoch = *(_OWORD *)(v19 + 40);
      *(_OWORD *)&v16.duration.timescale = v13;
      v14 = *(_OWORD *)&a2->start.epoch;
      *(_OWORD *)&v15.start.value = *(_OWORD *)&a2->start.value;
      *(_OWORD *)&v15.start.epoch = v14;
      *(_OWORD *)&v15.duration.timescale = *(_OWORD *)&a2->duration.timescale;
      *(_OWORD *)&v16.start.value = v12;
      if (CMTimeRangeContainsTimeRange(&v16, &v15))
        return (const __CFArray *)Vector<ma::Object *>::PushBack(a3, &v19);
    }
  }
  return result;
}

void sub_1B6D2B074(_Unwind_Exception *a1)
{
  const __CFArray **v1;

  Vector<ma::Object *>::~Vector(v1);
  _Unwind_Resume(a1);
}

uint64_t ma::DescriptorAnalysis::ComputeDistance(CFArrayRef *this, const CMTimeRange *a2, const CMTimeRange *a3, float *a4, int a5)
{
  __int128 v9;
  __int128 v10;
  const __CFArray *DescriptorInTimeRange;
  uint64_t v12;
  CMTimeRange v14;
  const __CFArray *v15;
  CMTimeRange v16;
  const __CFArray *v17;

  v9 = *(_OWORD *)&a2->start.epoch;
  *(_OWORD *)&v16.start.value = *(_OWORD *)&a2->start.value;
  *(_OWORD *)&v16.start.epoch = v9;
  *(_OWORD *)&v16.duration.timescale = *(_OWORD *)&a2->duration.timescale;
  ma::DescriptorAnalysis::GetDescriptorInTimeRange(this, &v16, &v17);
  v10 = *(_OWORD *)&a3->start.epoch;
  *(_OWORD *)&v14.start.value = *(_OWORD *)&a3->start.value;
  *(_OWORD *)&v14.start.epoch = v10;
  *(_OWORD *)&v14.duration.timescale = *(_OWORD *)&a3->duration.timescale;
  DescriptorInTimeRange = ma::DescriptorAnalysis::GetDescriptorInTimeRange(this, &v14, &v15);
  v12 = ma::DescriptorAnalysis::ComputeDistance((uint64_t)DescriptorInTimeRange, &v17, &v15, a4, a5);
  Vector<ma::Object *>::~Vector(&v15);
  Vector<ma::Object *>::~Vector(&v17);
  return v12;
}

void sub_1B6D2B13C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  uint64_t v8;
  va_list va;

  va_start(va, a8);
  Vector<ma::Object *>::~Vector((const __CFArray **)va);
  Vector<ma::Object *>::~Vector((const __CFArray **)(v8 - 40));
  _Unwind_Resume(a1);
}

uint64_t ma::DescriptorAnalysis::ComputeDistance(uint64_t a1, CFArrayRef *a2, CFArrayRef *a3, float *a4, int a5)
{
  id **v9;
  const ma::DescriptorSegment **ValueAtIndex;
  uint64_t v12;
  const __CFArray *v13;
  int Count;
  int v15;
  const __CFArray *v16;
  int v17;
  int v18;
  CFIndex v19;
  id **v20;
  const ma::DescriptorSegment **v21;
  uint64_t v22;
  void *v23;
  int v24;
  int v25;
  const __CFArray *v26;
  size_t v27;
  CFIndex v28;
  uint64_t v29;
  int v30;
  int v31;
  float v32;
  float v33;
  id **v34;
  CFIndex i;
  const __CFArray *v36;
  const ma::DescriptorSegment **v37;
  uint64_t v38;
  float v39;
  float v40;
  CMTime *v41;
  CMTime *v42;
  double Seconds;
  float v44;
  int v45;
  int v46;
  int v47;
  float v48;
  float v49;
  int v50;
  float v51;
  float v52;
  float *v53;
  int v54;
  uint64_t v55;
  float *v56;
  int v57;
  CFIndex idx;
  void *v59;
  CMTime time;
  float v61;
  CMTime rhs;
  CMTime lhs;

  if (*a2 && CFArrayGetCount(*a2) && *a3 && CFArrayGetCount(*a3))
  {
    if (*a2)
    {
      if (CFArrayGetCount(*a2) == 1 && *a3 && CFArrayGetCount(*a3) == 1)
      {
        v9 = *(id ***)CFArrayGetValueAtIndex(*a2, 0);
        ValueAtIndex = (const ma::DescriptorSegment **)CFArrayGetValueAtIndex(*a3, 0);
        return ma::DescriptorSegment::Compare(v9, *ValueAtIndex, a4, a5);
      }
      v13 = *a2;
      v61 = 3.4028e38;
      if (v13)
        Count = CFArrayGetCount(v13);
      else
        Count = 0;
    }
    else
    {
      Count = 0;
      v61 = 3.4028e38;
    }
    if (*a3)
      v15 = CFArrayGetCount(*a3);
    else
      v15 = 0;
    v16 = *a2;
    if (*a2)
    {
      v17 = CFArrayGetCount(v16);
      v16 = *a2;
      if (*a2)
      {
        v18 = CFArrayGetCount(v16);
        v16 = *a2;
        v19 = v18 - 1;
LABEL_24:
        v20 = *(id ***)CFArrayGetValueAtIndex(v16, v19);
        v21 = (const ma::DescriptorSegment **)CFArrayGetValueAtIndex(*a3, 0);
        v22 = ma::DescriptorSegment::Compare(v20, *v21, &v61, a5);
        if ((_DWORD)v22)
        {
          v12 = v22;
          v23 = 0;
        }
        else
        {
          if (v61 >= 0.1)
          {
            idx = 0;
          }
          else
          {
            if (*a3)
              v24 = (int)CFArrayGetCount(*a3) > 1;
            else
              v24 = 0;
            if (*a2 && (int)CFArrayGetCount(*a2) >= 2)
            {
              if (*a2)
                v17 = CFArrayGetCount(*a2) - 1;
              else
                v17 = -1;
            }
            v25 = v24 << 31 >> 31;
            v26 = *a3;
            if (*a3)
              LODWORD(v26) = CFArrayGetCount(v26);
            v15 = (_DWORD)v26 + v25;
            idx = v25 & 1;
            Count = v17;
          }
          if (v15 * Count < 0)
            v27 = -1;
          else
            v27 = 4 * v15 * Count;
          v23 = operator new[](v27, MEMORY[0x1E0DE4E10]);
          if (v23)
          {
            v56 = a4;
            v57 = v15 * Count;
            v54 = v15;
            v59 = v23;
            if (v17 < 1)
            {
              v31 = 0;
              v30 = 0;
              v32 = 0.0;
              v33 = 3.4028e38;
            }
            else
            {
              v28 = 0;
              LODWORD(v29) = 0;
              v30 = 0;
              v31 = 0;
              v55 = v17;
              v32 = 0.0;
              v33 = 3.4028e38;
              while (2)
              {
                v34 = *(id ***)CFArrayGetValueAtIndex(*a2, v28);
                v29 = (int)v29;
                for (i = idx; ; ++i)
                {
                  v36 = *a3;
                  if (*a3)
                    LODWORD(v36) = CFArrayGetCount(v36);
                  if (i >= (int)v36)
                    break;
                  v37 = (const ma::DescriptorSegment **)CFArrayGetValueAtIndex(*a3, i);
                  v38 = ma::DescriptorSegment::Compare(v34, *v37, &v61, a5);
                  if ((_DWORD)v38)
                  {
                    v12 = v38;
                    v23 = v59;
                    goto LABEL_26;
                  }
                  v39 = v61;
                  *((float *)v59 + v29) = v61;
                  v32 = v32 + v39;
                  if (v39 < v33)
                  {
                    v33 = v39;
                    v31 = v28;
                    v30 = i;
                  }
                  ++v29;
                }
                if (++v28 != v55)
                  continue;
                break;
              }
            }
            v40 = v32 / (float)v57;
            v41 = *(CMTime **)CFArrayGetValueAtIndex(*a2, v31);
            v42 = *(CMTime **)CFArrayGetValueAtIndex(*a3, v30);
            lhs = v41[2];
            rhs = v42[2];
            CMTimeAdd(&time, &lhs, &rhs);
            Seconds = CMTimeGetSeconds(&time);
            if (v57 <= 1 || (v44 = Seconds, v44 >= 3.0))
            {
              v53 = v56;
              v23 = v59;
            }
            else
            {
              v45 = v30 + (v31 - 1) * v54;
              v46 = v30 + v31 * v54;
              v47 = v46 + v54;
              v48 = 1.0;
              v49 = 1.0;
              v23 = v59;
              if (v45 >= 1)
                v49 = *((float *)v59 + v45);
              if (v47 < v57)
                v48 = *((float *)v59 + v47);
              v50 = v46 + 1;
              v51 = 1.0;
              v52 = 1.0;
              v53 = v56;
              if (v46 >= 2)
                v52 = *((float *)v59 + (v46 - 1));
              if (v50 < v57)
                v51 = *((float *)v59 + v50);
              if (v51 >= v52)
                v51 = v52;
              if (v48 >= v49)
                v48 = v49;
              if (v51 < v48)
                v48 = v51;
              v33 = (float)(v33 + v48) * 0.5;
            }
            v12 = 0;
            *v53 = (float)(v40 * 0.4) + (float)(v33 * 0.6);
          }
          else
          {
            v12 = 4294967188;
          }
        }
LABEL_26:
        if (v23)
          MEMORY[0x1BCCA128C](v23, 0x1000C8052888210);
        return v12;
      }
    }
    else
    {
      v17 = 0;
    }
    v19 = -1;
    goto LABEL_24;
  }
  return 4294967246;
}

uint64_t ma::DescriptorAnalysis::ComputeDistanceForSceneMerge(CFArrayRef *this, const CMTimeRange *a2, const CMTimeRange *a3, int a4, float *a5, int a6)
{
  uint64_t result;
  id **v13;
  const ma::DescriptorSegment **ValueAtIndex;
  _QWORD *v15;
  uint64_t v16;
  char v17;
  float v18;
  uint64_t v19;
  char v20;
  id **v21;
  char v22;
  char v23;
  CMTime v24;
  CMTime v25;
  CMTime v26;
  CMTime v27;
  CMTime start;
  CFIndex idx;
  CFIndex v30;
  CMTime rhs;
  CMTime time;
  uint64_t v33;

  v33 = *MEMORY[0x1E0C80C00];
  v30 = 0;
  idx = 0;
  start = a2->start;
  result = ma::DescriptorAnalysis::GetNearestDescriptorForTime(this, &start, (int *)&v30 + 1);
  if (!(_DWORD)result)
  {
    v27 = a3->start;
    result = ma::DescriptorAnalysis::GetNearestDescriptorForTime(this, &v27, (int *)&v30);
    if (!(_DWORD)result)
    {
      time = a2->duration;
      CMTimeMultiplyByRatio(&v25, &time, 1, 2);
      time = a2->start;
      rhs = v25;
      CMTimeAdd(&v26, &time, &rhs);
      result = ma::DescriptorAnalysis::GetNearestDescriptorForTime(this, &v26, (int *)&idx + 1);
      if (!(_DWORD)result)
      {
        time = a3->duration;
        CMTimeMultiplyByRatio(&v25, &time, 1, 2);
        time = a3->start;
        rhs = v25;
        CMTimeAdd(&v24, &time, &rhs);
        result = ma::DescriptorAnalysis::GetNearestDescriptorForTime(this, &v24, (int *)&idx);
        if (!(_DWORD)result)
        {
          if (a4)
          {
            v13 = *(id ***)CFArrayGetValueAtIndex(*this, SHIDWORD(idx));
            ValueAtIndex = (const ma::DescriptorSegment **)CFArrayGetValueAtIndex(*this, (int)idx);
            ma::DescriptorSegment::Compare(v13, *ValueAtIndex, a5, a6);
            return 0;
          }
          else
          {
            time.value = *(_QWORD *)CFArrayGetValueAtIndex(*this, SHIDWORD(v30));
            *(_QWORD *)&time.timescale = *(_QWORD *)CFArrayGetValueAtIndex(*this, SHIDWORD(idx));
            rhs.value = *(_QWORD *)CFArrayGetValueAtIndex(*this, (int)v30);
            v15 = CFArrayGetValueAtIndex(*this, (int)idx);
            v16 = 0;
            *(_QWORD *)&rhs.timescale = *v15;
            v17 = 1;
            v18 = 3.4028e38;
            do
            {
              v19 = 0;
              v20 = v17;
              v21 = (id **)*(&time.value + v16);
              v22 = 1;
              do
              {
                v23 = v22;
                LODWORD(v25.value) = 0;
                ma::DescriptorSegment::Compare(v21, *((const ma::DescriptorSegment **)&rhs.value + v19), (float *)&v25, a6);
                v22 = 0;
                if (*(float *)&v25.value < v18)
                  v18 = *(float *)&v25.value;
                v19 = 1;
              }
              while ((v23 & 1) != 0);
              v17 = 0;
              v16 = 1;
            }
            while ((v20 & 1) != 0);
            result = 0;
            *a5 = v18;
          }
        }
      }
    }
  }
  return result;
}

uint64_t ma::DescriptorAnalysis::GetNearestDescriptorForTime(CFArrayRef *this, CMTime *a2, int *a3)
{
  const __CFArray *v4;
  CFIndex v7;
  int v8;
  float v9;
  const __CFArray *v10;
  CMTime **ValueAtIndex;
  CMTime *v12;
  float Seconds;
  float v14;
  uint64_t result;
  CMTime time;
  CMTime v17;
  CMTime rhs;
  CMTime lhs;

  v4 = *this;
  if (!v4 || !CFArrayGetCount(v4))
    return 4294967246;
  v7 = 0;
  v8 = 0;
  v9 = 3.4028e38;
  while (1)
  {
    v10 = *this;
    if (*this)
      LODWORD(v10) = CFArrayGetCount(v10);
    if (v7 >= (int)v10)
      break;
    ValueAtIndex = (CMTime **)CFArrayGetValueAtIndex(*this, v7);
    v12 = *ValueAtIndex;
    v17 = (*ValueAtIndex)[1];
    lhs = *a2;
    rhs = v12[1];
    CMTimeSubtract(&time, &lhs, &rhs);
    Seconds = CMTimeGetSeconds(&time);
    v14 = fabsf(Seconds);
    if (v9 > v14)
      v8 = v7;
    lhs = v17;
    rhs = *a2;
    if (CMTimeCompare(&lhs, &rhs) > 0)
      break;
    if (v9 > v14)
      v9 = v14;
    ++v7;
  }
  result = 0;
  *a3 = v8;
  return result;
}

uint64_t ma::DescriptorAnalysis::GetBoundaryIndexOfTimeRange(CFArrayRef *this, CMTimeRange *a2, int *a3, int *a4)
{
  __int128 v7;
  __int128 v8;
  CFIndex v9;
  int v10;
  int v11;
  const __CFArray *v12;
  const void *ValueAtIndex;
  __int128 v14;
  __int128 v15;
  const __CFArray *v16;
  uint64_t result;
  const __CFArray *v18;
  const __CFArray *v19;
  CMTimeRange v20;
  CMTime v21;
  CMTime v22;
  CMTimeRange range;
  CMTime v24;
  CMTime v25;
  CMTime time2;
  CMTime time1;

  v7 = *(_OWORD *)&a2->start.epoch;
  *(_OWORD *)&v25.value = *(_OWORD *)&a2->start.value;
  v8 = *(_OWORD *)&a2->duration.timescale;
  *(_OWORD *)&range.start.value = *(_OWORD *)&a2->start.value;
  *(_OWORD *)&range.start.epoch = v7;
  v25.epoch = a2->start.epoch;
  memset(&v24, 0, sizeof(v24));
  *(_OWORD *)&range.duration.timescale = v8;
  CMTimeRangeGetEnd(&v24, &range);
  v9 = 0;
  v10 = -1;
  v11 = -1;
  while (1)
  {
    v12 = *this;
    if (*this)
      LODWORD(v12) = CFArrayGetCount(v12);
    if (v9 >= (int)v12)
      break;
    v22 = *(CMTime *)(*(_QWORD *)CFArrayGetValueAtIndex(*this, v9) + 24);
    memset(&v21, 0, sizeof(v21));
    ValueAtIndex = CFArrayGetValueAtIndex(*this, v9);
    v14 = *(_OWORD *)(*(_QWORD *)ValueAtIndex + 24);
    v15 = *(_OWORD *)(*(_QWORD *)ValueAtIndex + 56);
    *(_OWORD *)&v20.start.epoch = *(_OWORD *)(*(_QWORD *)ValueAtIndex + 40);
    *(_OWORD *)&v20.duration.timescale = v15;
    *(_OWORD *)&v20.start.value = v14;
    CMTimeRangeGetEnd(&v21, &v20);
    time1 = v25;
    time2 = v22;
    if ((CMTimeCompare(&time1, &time2) & 0x80000000) == 0)
    {
      time1 = v25;
      time2 = v21;
      if (CMTimeCompare(&time1, &time2) < 0)
      {
        time1 = v25;
        time2 = v22;
        if (CMTimeCompare(&time1, &time2))
          v10 = v9 + 1;
        else
          v10 = v9;
        v16 = *this;
        if (*this)
          LODWORD(v16) = CFArrayGetCount(v16);
        if ((int)v16 - 1 < v10)
          v10 = (_DWORD)v16 - 1;
      }
    }
    time1 = v24;
    time2 = v22;
    if (CMTimeCompare(&time1, &time2) >= 1)
    {
      time1 = v24;
      time2 = v21;
      if (CMTimeCompare(&time1, &time2) < 1)
        v11 = v9;
    }
    ++v9;
  }
  result = 4294967246;
  if ((v10 & 0x80000000) == 0 && (v11 & 0x80000000) == 0)
  {
    v18 = *this;
    if (*this)
      LODWORD(v18) = CFArrayGetCount(v18);
    if (v10 >= (int)v18)
      return 4294967246;
    v19 = *this;
    if (*this)
      LODWORD(v19) = CFArrayGetCount(v19);
    if (v11 >= (int)v19)
    {
      return 4294967246;
    }
    else
    {
      result = 0;
      *a3 = v10;
      *a4 = v11;
    }
  }
  return result;
}

void ma::DescriptorSegment::~DescriptorSegment(ma::DescriptorSegment *this)
{
  VCPImageDescriptorWrapper *v1;

  *(_QWORD *)this = &unk_1E6B13FD8;
  v1 = (ma::DescriptorSegment *)((char *)this + 72);
  VCPImageDescriptorWrapper::~VCPImageDescriptorWrapper((ma::DescriptorSegment *)((char *)this + 80));
  VCPImageDescriptorWrapper::~VCPImageDescriptorWrapper(v1);
}

{
  VCPImageDescriptorWrapper *v1;

  *(_QWORD *)this = &unk_1E6B13FD8;
  v1 = (ma::DescriptorSegment *)((char *)this + 72);
  VCPImageDescriptorWrapper::~VCPImageDescriptorWrapper((ma::DescriptorSegment *)((char *)this + 80));
  VCPImageDescriptorWrapper::~VCPImageDescriptorWrapper(v1);
  JUMPOUT(0x1BCCA12BCLL);
}

uint64_t VCPProtoImageSaliencyResultReadFrom(uint64_t a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  char v14;
  uint64_t v16;
  int v17;
  uint64_t v19;
  unint64_t v20;
  int v21;
  VCPProtoBounds *v22;
  uint64_t result;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) < *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
  {
    v7 = (int *)MEMORY[0x1E0D82BB8];
    do
    {
      if (*(_BYTE *)(a2 + *v5))
        break;
      v8 = 0;
      v9 = 0;
      v10 = 0;
      while (1)
      {
        v11 = *v3;
        v12 = *(_QWORD *)(a2 + v11);
        v13 = v12 + 1;
        if (v12 == -1 || v13 > *(_QWORD *)(a2 + *v4))
          break;
        v14 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
        *(_QWORD *)(a2 + v11) = v13;
        v10 |= (unint64_t)(v14 & 0x7F) << v8;
        if ((v14 & 0x80) == 0)
          goto LABEL_12;
        v8 += 7;
        if (v9++ >= 9)
        {
          v10 = 0;
          v16 = *v5;
          v17 = *(unsigned __int8 *)(a2 + v16);
          goto LABEL_14;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
      v16 = *v5;
      v17 = *(unsigned __int8 *)(a2 + v16);
      if (*(_BYTE *)(a2 + v16))
        v10 = 0;
LABEL_14:
      if (v17 || (v10 & 7) == 4)
        break;
      if ((v10 >> 3) == 2)
      {
        v22 = objc_alloc_init(VCPProtoBounds);
        objc_storeStrong((id *)(a1 + 8), v22);
        if (!PBReaderPlaceMark() || !VCPProtoBoundsReadFrom((uint64_t)v22, a2))
        {

          return 0;
        }
        PBReaderRecallMark();

      }
      else if ((v10 >> 3) == 1)
      {
        v19 = *v3;
        v20 = *(_QWORD *)(a2 + v19);
        if (v20 <= 0xFFFFFFFFFFFFFFFBLL && v20 + 4 <= *(_QWORD *)(a2 + *v4))
        {
          v21 = *(_DWORD *)(*(_QWORD *)(a2 + *v7) + v20);
          *(_QWORD *)(a2 + v19) = v20 + 4;
        }
        else
        {
          *(_BYTE *)(a2 + v16) = 1;
          v21 = 0;
        }
        *(_DWORD *)(a1 + 16) = v21;
      }
      else
      {
        result = PBReaderSkipValueWithTag();
        if (!(_DWORD)result)
          return result;
      }
    }
    while (*(_QWORD *)(a2 + *v3) < *(_QWORD *)(a2 + *v4));
  }
  return *(_BYTE *)(a2 + *v5) == 0;
}

void sub_1B6D2C49C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;

  v7 = v6;

  _Unwind_Resume(a1);
}

void sub_1B6D2C664(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;

  v6 = v3;

  _Unwind_Resume(a1);
}

void sub_1B6D2C74C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1B6D2C8B0(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_1B6D2CA3C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  _Unwind_Resume(a1);
}

void sub_1B6D2CB44(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1B6D2CEB8(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1B6D2D244(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1B6D2D3A8(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1B6D2D4C4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, objc_super a9)
{
  a9.super_class = (Class)VCPMotionFlowRequest;
  -[_Unwind_Exception dealloc](&a9, sel_dealloc);
  _Unwind_Resume(a1);
}

void sub_1B6D2D7E4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_1B6D2D88C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1B6D2E094(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, void *a11, void *a12, uint64_t a13, uint64_t a14, void *a15, void *a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,const void *a32)
{

  CF<opaqueCMSampleBuffer *>::~CF(&a32);
  _Unwind_Resume(a1);
}

void sub_1B6D2E6DC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9, void *a10, void *a11, void *a12)
{
  void *v12;
  void *v13;

  _Unwind_Resume(a1);
}

void sub_1B6D2F05C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1B6D2F2E0(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1B6D2F45C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1B6D2F588(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1B6D2F6E0(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1B6D2F848(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1B6D2F9B0(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1B6D2FA28(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, objc_super a9)
{
  void *v9;
  void *v10;

  v10 = v9;
  a9.receiver = v10;
  a9.super_class = (Class)VCPCNNModelEspressoV2;
  -[_Unwind_Exception dealloc](&a9, sel_dealloc);
  _Unwind_Resume(a1);
}

void sub_1B6D2FEAC(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1B6D305E0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, objc_super a9)
{
  a9.super_class = (Class)VCPEspressoV2IOPort;
  -[_Unwind_Exception dealloc](&a9, sel_dealloc);
  _Unwind_Resume(a1);
}

char *std::vector<VCPEspressoV2Data * {__strong}>::__init_with_size[abi:ne180100]<VCPEspressoV2Data * {__strong}*,VCPEspressoV2Data * {__strong}*>(char *result, void **a2, void **a3, unint64_t a4)
{
  char *v6;
  char **v7;
  void *v8;

  if (a4)
  {
    v6 = result;
    result = std::vector<void *>::__vallocate[abi:ne180100](result, a4);
    v7 = (char **)*((_QWORD *)v6 + 1);
    while (a2 != a3)
    {
      v8 = *a2++;
      result = v8;
      *v7++ = result;
    }
    *((_QWORD *)v6 + 1) = v7;
  }
  return result;
}

void sub_1B6D3068C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  std::vector<VCPEspressoV2Data * {__strong}>::__destroy_vector::operator()[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

_QWORD *std::vector<VCPEspressoV2Data * {__strong}>::vector(_QWORD *a1, unint64_t a2)
{
  char *v4;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    std::vector<void *>::__vallocate[abi:ne180100](a1, a2);
    v4 = (char *)a1[1];
    bzero(v4, 8 * a2);
    a1[1] = &v4[8 * a2];
  }
  return a1;
}

void sub_1B6D30708(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  std::vector<VCPEspressoV2Data * {__strong}>::__destroy_vector::operator()[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

void std::vector<VCPEspressoV2Data * {__strong}>::__vdeallocate(void **a1)
{
  char *v1;
  char *v3;
  void *v4;
  void *v5;

  v1 = (char *)*a1;
  if (*a1)
  {
    v3 = (char *)a1[1];
    v4 = *a1;
    if (v3 != v1)
    {
      do
      {
        v5 = (void *)*((_QWORD *)v3 - 1);
        v3 -= 8;

      }
      while (v3 != v1);
      v4 = *a1;
    }
    a1[1] = v1;
    operator delete(v4);
    *a1 = 0;
    a1[1] = 0;
    a1[2] = 0;
  }
}

void sub_1B6D30A84(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;

  _Unwind_Resume(a1);
}

void sub_1B6D30C34(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_1B6D30D4C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  void *v14;
  void *v15;
  void *v16;
  void *v17;
  void *v18;

  v18 = v17;

  _Unwind_Resume(a1);
}

void sub_1B6D30E28(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1B6D30F60(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1B6D3106C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1B6D310F0(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1B6D31324(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1B6D3151C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1B6D316D4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  _Unwind_Resume(a1);
}

void sub_1B6D318E4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1B6D31ABC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{
  void *v10;

  objc_sync_exit(v10);
  _Unwind_Resume(a1);
}

void sub_1B6D31C98(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_1B6D31EA4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1B6D32228(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;

  _Unwind_Resume(a1);
}

void sub_1B6D324F0(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1B6D3275C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11)
{
  void *v11;

  _Unwind_Resume(a1);
}

void sub_1B6D329D8(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1B6D32B84(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1B6D32CC4(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1B6D33168(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, void *a11, void *a12, uint64_t a13, void *a14)
{

  _Unwind_Resume(a1);
}

void sub_1B6D33328(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1B6D33790(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1B6D33D48(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13)
{

  _Unwind_Resume(a1);
}

void sub_1B6D34194(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1B6D345C0(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1B6D34964(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;

  _Unwind_Resume(a1);
}

void sub_1B6D34B98(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_1B6D34CA0(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

uint64_t VCPProtoImageShotTypeResultReadFrom(uint64_t a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  int v15;
  char v17;
  unsigned int v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  char v22;
  uint64_t result;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) < *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
  {
    v7 = (int *)MEMORY[0x1E0D82BB8];
    do
    {
      if (*(_BYTE *)(a2 + *v5))
        break;
      v8 = 0;
      v9 = 0;
      v10 = 0;
      while (1)
      {
        v11 = *v3;
        v12 = *(_QWORD *)(a2 + v11);
        if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
          break;
        v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
        *(_QWORD *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0)
          goto LABEL_12;
        v8 += 7;
        v14 = v9++ >= 9;
        if (v14)
        {
          v10 = 0;
          v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
      v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(_BYTE *)(a2 + *v5))
        v10 = 0;
LABEL_14:
      if (v15 || (v10 & 7) == 4)
        break;
      if ((v10 >> 3) == 1)
      {
        v17 = 0;
        v18 = 0;
        v19 = 0;
        while (1)
        {
          v20 = *v3;
          v21 = *(_QWORD *)(a2 + v20);
          if (v21 == -1 || v21 >= *(_QWORD *)(a2 + *v4))
            break;
          v22 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v21);
          *(_QWORD *)(a2 + v20) = v21 + 1;
          v19 |= (unint64_t)(v22 & 0x7F) << v17;
          if ((v22 & 0x80) == 0)
            goto LABEL_29;
          v17 += 7;
          v14 = v18++ >= 9;
          if (v14)
          {
            LODWORD(v19) = 0;
            goto LABEL_31;
          }
        }
        *(_BYTE *)(a2 + *v5) = 1;
LABEL_29:
        if (*(_BYTE *)(a2 + *v5))
          LODWORD(v19) = 0;
LABEL_31:
        *(_DWORD *)(a1 + 8) = v19;
      }
      else
      {
        result = PBReaderSkipValueWithTag();
        if (!(_DWORD)result)
          return result;
      }
    }
    while (*(_QWORD *)(a2 + *v3) < *(_QWORD *)(a2 + *v4));
  }
  return *(_BYTE *)(a2 + *v5) == 0;
}

uint64_t VCPProtoVideoCaptionPreferenceResultReadFrom(uint64_t a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  char v14;
  BOOL v15;
  uint64_t v16;
  int v17;
  char v19;
  unsigned int v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  char v25;
  uint64_t v26;
  unint64_t v27;
  int v28;
  uint64_t result;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) < *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
  {
    v7 = (int *)MEMORY[0x1E0D82BB8];
    do
    {
      if (*(_BYTE *)(a2 + *v5))
        break;
      v8 = 0;
      v9 = 0;
      v10 = 0;
      while (1)
      {
        v11 = *v3;
        v12 = *(_QWORD *)(a2 + v11);
        v13 = v12 + 1;
        if (v12 == -1 || v13 > *(_QWORD *)(a2 + *v4))
          break;
        v14 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
        *(_QWORD *)(a2 + v11) = v13;
        v10 |= (unint64_t)(v14 & 0x7F) << v8;
        if ((v14 & 0x80) == 0)
          goto LABEL_12;
        v8 += 7;
        v15 = v9++ >= 9;
        if (v15)
        {
          v10 = 0;
          v16 = *v5;
          v17 = *(unsigned __int8 *)(a2 + v16);
          goto LABEL_14;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
      v16 = *v5;
      v17 = *(unsigned __int8 *)(a2 + v16);
      if (*(_BYTE *)(a2 + v16))
        v10 = 0;
LABEL_14:
      if (v17 || (v10 & 7) == 4)
        break;
      if ((v10 >> 3) == 2)
      {
        v26 = *v3;
        v27 = *(_QWORD *)(a2 + v26);
        if (v27 <= 0xFFFFFFFFFFFFFFFBLL && v27 + 4 <= *(_QWORD *)(a2 + *v4))
        {
          v28 = *(_DWORD *)(*(_QWORD *)(a2 + *v7) + v27);
          *(_QWORD *)(a2 + v26) = v27 + 4;
        }
        else
        {
          *(_BYTE *)(a2 + v16) = 1;
          v28 = 0;
        }
        *(_DWORD *)(a1 + 8) = v28;
      }
      else if ((v10 >> 3) == 1)
      {
        v19 = 0;
        v20 = 0;
        v21 = 0;
        while (1)
        {
          v22 = *v3;
          v23 = *(_QWORD *)(a2 + v22);
          v24 = v23 + 1;
          if (v23 == -1 || v24 > *(_QWORD *)(a2 + *v4))
            break;
          v25 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v23);
          *(_QWORD *)(a2 + v22) = v24;
          v21 |= (unint64_t)(v25 & 0x7F) << v19;
          if ((v25 & 0x80) == 0)
            goto LABEL_33;
          v19 += 7;
          v15 = v20++ >= 9;
          if (v15)
          {
            v21 = 0;
            goto LABEL_35;
          }
        }
        *(_BYTE *)(a2 + *v5) = 1;
LABEL_33:
        if (*(_BYTE *)(a2 + *v5))
          v21 = 0;
LABEL_35:
        *(_BYTE *)(a1 + 12) = v21 != 0;
      }
      else
      {
        result = PBReaderSkipValueWithTag();
        if (!(_DWORD)result)
          return result;
      }
    }
    while (*(_QWORD *)(a2 + *v3) < *(_QWORD *)(a2 + *v4));
  }
  return *(_BYTE *)(a2 + *v5) == 0;
}

uint64_t VCPProtoImagePetsFaceResultReadFrom(uint64_t a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  char v14;
  uint64_t v16;
  int v17;
  uint64_t v19;
  unint64_t v20;
  int v21;
  VCPProtoBounds *v22;
  uint64_t result;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) < *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
  {
    v7 = (int *)MEMORY[0x1E0D82BB8];
    do
    {
      if (*(_BYTE *)(a2 + *v5))
        break;
      v8 = 0;
      v9 = 0;
      v10 = 0;
      while (1)
      {
        v11 = *v3;
        v12 = *(_QWORD *)(a2 + v11);
        v13 = v12 + 1;
        if (v12 == -1 || v13 > *(_QWORD *)(a2 + *v4))
          break;
        v14 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
        *(_QWORD *)(a2 + v11) = v13;
        v10 |= (unint64_t)(v14 & 0x7F) << v8;
        if ((v14 & 0x80) == 0)
          goto LABEL_12;
        v8 += 7;
        if (v9++ >= 9)
        {
          v10 = 0;
          v16 = *v5;
          v17 = *(unsigned __int8 *)(a2 + v16);
          goto LABEL_14;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
      v16 = *v5;
      v17 = *(unsigned __int8 *)(a2 + v16);
      if (*(_BYTE *)(a2 + v16))
        v10 = 0;
LABEL_14:
      if (v17 || (v10 & 7) == 4)
        break;
      if ((v10 >> 3) == 2)
      {
        v22 = objc_alloc_init(VCPProtoBounds);
        objc_storeStrong((id *)(a1 + 8), v22);
        if (!PBReaderPlaceMark() || !VCPProtoBoundsReadFrom((uint64_t)v22, a2))
        {

          return 0;
        }
        PBReaderRecallMark();

      }
      else if ((v10 >> 3) == 1)
      {
        v19 = *v3;
        v20 = *(_QWORD *)(a2 + v19);
        if (v20 <= 0xFFFFFFFFFFFFFFFBLL && v20 + 4 <= *(_QWORD *)(a2 + *v4))
        {
          v21 = *(_DWORD *)(*(_QWORD *)(a2 + *v7) + v20);
          *(_QWORD *)(a2 + v19) = v20 + 4;
        }
        else
        {
          *(_BYTE *)(a2 + v16) = 1;
          v21 = 0;
        }
        *(_DWORD *)(a1 + 16) = v21;
      }
      else
      {
        result = PBReaderSkipValueWithTag();
        if (!(_DWORD)result)
          return result;
      }
    }
    while (*(_QWORD *)(a2 + *v3) < *(_QWORD *)(a2 + *v4));
  }
  return *(_BYTE *)(a2 + *v5) == 0;
}

void sub_1B6D35DF0(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1B6D360C8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *a17)
{

  _Unwind_Resume(a1);
}

void sub_1B6D362D8(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;

  _Unwind_Resume(a1);
}

ma::TrackingAnalysis *ma::TrackingAnalysis::TrackingAnalysis(ma::TrackingAnalysis *this)
{
  uint64_t v2;

  *(_QWORD *)this = 0;
  *((_QWORD *)this + 1) = 0;
  *((_QWORD *)this + 2) = 0;
  v2 = MEMORY[0x1E0CA2E68];
  *(_OWORD *)((char *)this + 24) = *MEMORY[0x1E0CA2E68];
  *((_QWORD *)this + 5) = *(_QWORD *)(v2 + 16);
  *((_BYTE *)this + 48) = 1;
  *((_DWORD *)this + 13) = 0;
  ma::HinkleyDetector::HinkleyDetector((uint64_t)this + 56);
  return this;
}

void sub_1B6D3639C(_Unwind_Exception *a1)
{
  uint64_t v1;

  MotionAnalysis<ma::ObstructionSegment>::~MotionAnalysis(v1);
  _Unwind_Resume(a1);
}

uint64_t ma::TrackingAnalysis::Initialize(ma::TrackingAnalysis *this)
{
  ma::HinkleyDetector::Initialize((uint64_t)this + 56, 0.1, 0.35, 20);
  return MotionAnalysis<ma::TrackSegment>::Initialize((uint64_t)this);
}

uint64_t MotionAnalysis<ma::TrackSegment>::Initialize(uint64_t a1)
{
  ma::TrackSegment *v3;
  ma::TrackSegment *v4;

  if (*(_QWORD *)(a1 + 16) || *(_QWORD *)(a1 + 8))
    return 4294967246;
  *(_QWORD *)(a1 + 16) = CFArrayCreateMutable(0, 0, MEMORY[0x1E0C9B378]);
  v3 = (ma::TrackSegment *)operator new(0x58uLL, MEMORY[0x1E0DE4E10]);
  if (v3)
  {
    v4 = v3;
    ma::TrackSegment::TrackSegment(v3);
    *(_QWORD *)(a1 + 8) = v4;
    if (*(_QWORD *)(a1 + 16))
      return 0;
    else
      return 4294967188;
  }
  else
  {
    *(_QWORD *)(a1 + 8) = 0;
    return 4294967188;
  }
}

void sub_1B6D36478(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1BCCA12A4](v1, MEMORY[0x1E0DE4E10]);
  _Unwind_Resume(a1);
}

uint64_t ma::TrackingAnalysis::ProcessFrame(ma::TrackingAnalysis *this, Frame *a2)
{
  ma::Segment *v4;
  uint64_t result;
  ma::Segment *v6;
  int frame_idx;
  CMTime v8;
  CMTime v9;

  if (*((_BYTE *)this + 48))
  {
    ma::TrackSegment::ResetStats(*((ma::TrackSegment **)this + 1), (const MotionResult *)&a2->acc_var_.z_);
    v4 = (ma::Segment *)*((_QWORD *)this + 1);
    v9 = *(CMTime *)((_BYTE *)this + 1);
    ma::Segment::SetStart(v4, 0, &v9);
    *((_BYTE *)this + 48) = 0;
  }
  if (a2->frame_idx_ && LOBYTE(a2->motion_result_.action_blocks_))
  {
    if (ma::TrackingAnalysis::DecideSegmentPoint(this, *((const ma::TrackSegment **)this + 1), a2))
    {
      result = ma::TrackingAnalysis::AddSegment((const __CFArray **)this, (const ma::Frame *)a2, 0);
      if ((_DWORD)result)
        return result;
      ma::TrackSegment::ResetStats(*((ma::TrackSegment **)this + 1), (const MotionResult *)&a2->acc_var_.z_);
      v6 = (ma::Segment *)*((_QWORD *)this + 1);
      frame_idx = a2->frame_idx_;
      v8 = *(CMTime *)(&a2->frame_idx_ + 1);
      ma::Segment::SetStart(v6, frame_idx, &v8);
    }
    else
    {
      ma::TrackSegment::UpdateStats(*((ma::TrackSegment **)this + 1), (const MotionResult *)&a2->acc_var_.z_);
    }
  }
  return 0;
}

BOOL ma::TrackingAnalysis::DecideSegmentPoint(ma::TrackingAnalysis *this, const ma::TrackSegment *a2, const Frame *a3)
{
  int v4;
  _BOOL8 v6;
  _BOOL4 v7;

  v4 = *((_DWORD *)a2 + 5);
  if (!v4)
  {
    v6 = 0;
    goto LABEL_8;
  }
  if (*((_DWORD *)this + 16) >= a3->frame_idx_ - *((_DWORD *)a2 + 3))
  {
    v7 = 0;
    v6 = 0;
  }
  else
  {
    v6 = ma::HinkleyDetector::Test((ma::TrackingAnalysis *)((char *)this + 56), (const float *)a2 + 19, &a3->motion_result_.fine_action_score_, v4 + 1);
    v7 = *((_DWORD *)a2 + 5) == 0;
    if (v6)
      goto LABEL_8;
  }
  if (v7)
LABEL_8:
    ma::HinkleyDetector::ResetStats((ma::TrackingAnalysis *)((char *)this + 56));
  return v6;
}

uint64_t ma::TrackingAnalysis::AddSegment(const __CFArray **this, const ma::Frame *a2, int a3)
{
  const __CFArray *v6;
  ma::Segment *v7;
  int Count;
  _OWORD *v10;
  int v11;
  CMTime v13;
  CMTime lhs;
  CMTime v15;

  v6 = *this;
  v7 = this[1];
  if (v6)
    Count = CFArrayGetCount(v6);
  else
    Count = 0;
  v10 = (_OWORD *)((char *)a2 + 4);
  v11 = *(_DWORD *)a2;
  if (a3)
  {
    *(_OWORD *)&lhs.value = *v10;
    lhs.epoch = *(_QWORD *)((char *)a2 + 20);
    v13 = *(CMTime *)((char *)a2 + 28);
    CMTimeAdd(&v15, &lhs, &v13);
  }
  else
  {
    *(_OWORD *)&v15.value = *v10;
    v15.epoch = *(_QWORD *)((char *)a2 + 20);
  }
  ma::Segment::Finalize(v7, Count, v11 + a3, &v15);
  *((_BYTE *)this[1] + 72) = *((float *)this[1] + 20) > 0.35;
  return MotionAnalysis<ma::TrackSegment>::AddSegment((uint64_t)this);
}

uint64_t ma::TrackingAnalysis::FinalizeSegments(const __CFArray **this, const ma::Frame *a2)
{
  uint64_t v3;

  v3 = ma::TrackingAnalysis::AddSegment(this, a2, 1);
  if (!(_DWORD)v3)
    ma::TrackingAnalysis::MergeSameTypeSegments(this);
  return v3;
}

const __CFArray *ma::TrackingAnalysis::MergeSameTypeSegments(CFArrayRef *this)
{
  CFIndex i;
  const __CFArray *result;
  uint64_t v4;
  ma::TrackSegment *v6;
  ma::TrackSegment **ValueAtIndex;
  ma::TrackSegment *v8;
  int v9;

  for (i = 1; ; ++i)
  {
    result = *this;
    if (*this)
      result = (const __CFArray *)CFArrayGetCount(result);
    v4 = i;
    if (i >= (int)result)
      break;
    while (v4-- >= 1)
    {
      if (*(_DWORD *)(*(_QWORD *)CFArrayGetValueAtIndex(*this, v4) + 16))
        goto LABEL_9;
    }
    LODWORD(v4) = i;
LABEL_9:
    v6 = *(ma::TrackSegment **)CFArrayGetValueAtIndex(*this, (int)v4);
    ValueAtIndex = (ma::TrackSegment **)CFArrayGetValueAtIndex(*this, i);
    v8 = *ValueAtIndex;
    v9 = *((_DWORD *)*ValueAtIndex + 4);
    if (v9 && *((_DWORD *)v6 + 4) && *((_DWORD *)v8 + 2) != *((_DWORD *)v6 + 2))
    {
      if (*((unsigned __int8 *)v8 + 72) == *((unsigned __int8 *)v6 + 72))
      {
        ma::TrackSegment::Merge(*ValueAtIndex, v6);
      }
      else
      {
        if (v9 > 9)
          continue;
        ma::TrackSegment::Merge(v6, v8);
        v6 = v8;
      }
      ma::TrackSegment::Reset(v6);
    }
  }
  return result;
}

uint64_t ma::TrackingAnalysis::CopyProperty(CFArrayRef *this, CFTypeRef cf1, const __CFAllocator *a3, CFMutableArrayRef *a4)
{
  CFIndex Count;
  uint64_t v8;
  CFMutableArrayRef Mutable;
  CFMutableArrayRef v10;
  CFIndex i;
  const __CFArray *v12;
  _QWORD *ValueAtIndex;
  uint64_t v14;
  void *value;

  if (!CFEqual(cf1, CFSTR("TrackSegments")))
    return 0;
  if (*this)
    Count = (int)CFArrayGetCount(*this);
  else
    Count = 0;
  Mutable = CFArrayCreateMutable(a3, Count, MEMORY[0x1E0C9B378]);
  if (Mutable)
  {
    v10 = Mutable;
    for (i = 0; ; ++i)
    {
      v12 = *this;
      if (*this)
        LODWORD(v12) = CFArrayGetCount(v12);
      if (i >= (int)v12)
      {
        v8 = 0;
        *a4 = v10;
        return v8;
      }
      if (*(_DWORD *)(*(_QWORD *)CFArrayGetValueAtIndex(*this, i) + 16))
      {
        value = 0;
        ValueAtIndex = CFArrayGetValueAtIndex(*this, i);
        v14 = (*(uint64_t (**)(_QWORD, const __CFAllocator *, void **))(*(_QWORD *)*ValueAtIndex + 16))(*ValueAtIndex, a3, &value);
        if ((_DWORD)v14)
        {
          v8 = v14;
          CFRelease(v10);
          return v8;
        }
        CFArrayAppendValue(v10, value);
        CFRelease(value);
      }
    }
  }
  return 4294967188;
}

uint64_t MotionAnalysis<ma::TrackSegment>::AddSegment(uint64_t a1)
{
  ma::TrackSegment *v2;
  ma::TrackSegment *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;

  v2 = (ma::TrackSegment *)operator new(0x58uLL, MEMORY[0x1E0DE4E10]);
  if (!v2)
    return 4294967188;
  v3 = v2;
  ma::TrackSegment::TrackSegment(v2);
  v4 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)(a1 + 8) = v3;
  v7 = v4;
  v5 = Vector<ma::Object *>::PushBack((CFMutableArrayRef *)a1, &v7);
  if ((_DWORD)v5 && v7)
    (*(void (**)(uint64_t))(*(_QWORD *)v7 + 8))(v7);
  return v5;
}

void sub_1B6D369C4(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1BCCA12A4](v1, MEMORY[0x1E0DE4E10]);
  _Unwind_Resume(a1);
}

const __CFArray *ma::TrackingAnalysis::GetTimeRangesHasTracking@<X0>(CFArrayRef *this@<X0>, void **a2@<X8>)
{
  CFIndex v4;
  uint64_t v5;
  const __CFArray *result;
  uint64_t v7;
  const void *ValueAtIndex;
  int v9;
  char *v10;
  char *v11;
  __int128 v12;
  __int128 v13;
  char *v14;
  char *v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  char *v20;
  char *v21;
  char *v22;
  char *v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;

  v4 = 0;
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  v5 = (uint64_t)(a2 + 2);
  while (1)
  {
    result = *this;
    if (*this)
      result = (const __CFArray *)CFArrayGetCount(result);
    if (v4 >= (int)result)
      break;
    if (*(_BYTE *)(*(_QWORD *)CFArrayGetValueAtIndex(*this, v4) + 72))
    {
      v7 = *(_QWORD *)CFArrayGetValueAtIndex(*this, v4);
      ValueAtIndex = CFArrayGetValueAtIndex(*this, v4);
      v27 = *(_OWORD *)(v7 + 24);
      v28 = *(_OWORD *)(v7 + 40);
      v29 = *(_OWORD *)(v7 + 56);
      v9 = *(_DWORD *)(*(_QWORD *)ValueAtIndex + 80);
      v11 = (char *)a2[1];
      v10 = (char *)a2[2];
      if (v11 >= v10)
      {
        v15 = (char *)*a2;
        v16 = 0x4EC4EC4EC4EC4EC5 * ((v11 - (_BYTE *)*a2) >> 2);
        v17 = v16 + 1;
        if ((unint64_t)(v16 + 1) > 0x4EC4EC4EC4EC4ECLL)
          std::vector<std::unique_ptr<VCPProtoKeypoint>>::__throw_length_error[abi:ne180100]();
        v18 = 0x4EC4EC4EC4EC4EC5 * ((v10 - v15) >> 2);
        if (2 * v18 > v17)
          v17 = 2 * v18;
        if (v18 >= 0x276276276276276)
          v19 = 0x4EC4EC4EC4EC4ECLL;
        else
          v19 = v17;
        if (v19)
        {
          v20 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::pair<CMTimeRange,float>>>(v5, v19);
          v15 = (char *)*a2;
          v11 = (char *)a2[1];
        }
        else
        {
          v20 = 0;
        }
        v21 = &v20[52 * v16];
        *(_OWORD *)v21 = v27;
        *((_OWORD *)v21 + 1) = v28;
        *((_OWORD *)v21 + 2) = v29;
        *((_DWORD *)v21 + 12) = v9;
        if (v11 == v15)
        {
          v23 = &v20[52 * v16];
        }
        else
        {
          v22 = &v20[52 * v16];
          do
          {
            v23 = v22 - 52;
            v24 = *(_OWORD *)(v11 - 52);
            v25 = *(_OWORD *)(v11 - 36);
            v26 = *(_OWORD *)(v11 - 20);
            *((_DWORD *)v22 - 1) = *((_DWORD *)v11 - 1);
            *(_OWORD *)(v22 - 20) = v26;
            *(_OWORD *)(v22 - 36) = v25;
            *(_OWORD *)(v22 - 52) = v24;
            v11 -= 52;
            v22 -= 52;
          }
          while (v11 != v15);
        }
        v14 = v21 + 52;
        *a2 = v23;
        a2[1] = v21 + 52;
        a2[2] = &v20[52 * v19];
        if (v15)
          operator delete(v15);
      }
      else
      {
        v12 = *(_OWORD *)(v7 + 24);
        v13 = *(_OWORD *)(v7 + 56);
        *((_OWORD *)v11 + 1) = *(_OWORD *)(v7 + 40);
        *((_OWORD *)v11 + 2) = v13;
        *(_OWORD *)v11 = v12;
        *((_DWORD *)v11 + 12) = v9;
        v14 = v11 + 52;
      }
      a2[1] = v14;
    }
    ++v4;
  }
  return result;
}

void sub_1B6D36BF0(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void *std::__allocate_at_least[abi:ne180100]<std::allocator<std::pair<CMTimeRange,float>>>(uint64_t a1, unint64_t a2)
{
  if (a2 >= 0x4EC4EC4EC4EC4EDLL)
    std::__throw_bad_array_new_length[abi:ne180100]();
  return operator new(52 * a2);
}

uint64_t VCPProtoFilesystemMovieHumanActionClassificationResultReadFrom(uint64_t a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  char v14;
  BOOL v15;
  uint64_t v16;
  int v17;
  int v18;
  unint64_t v20;
  uint64_t v21;
  unint64_t v22;
  int v23;
  uint64_t result;
  char v25;
  unsigned int v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  char v31;
  uint64_t v32;
  unint64_t v33;
  char v34;
  unsigned int v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  unint64_t v39;
  char v40;
  uint64_t v41;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) < *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
  {
    v7 = (int *)MEMORY[0x1E0D82BB8];
    while (1)
    {
      if (*(_BYTE *)(a2 + *v5))
        return *(_BYTE *)(a2 + *v5) == 0;
      v8 = 0;
      v9 = 0;
      v10 = 0;
      while (1)
      {
        v11 = *v3;
        v12 = *(_QWORD *)(a2 + v11);
        v13 = v12 + 1;
        if (v12 == -1 || v13 > *(_QWORD *)(a2 + *v4))
          break;
        v14 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
        *(_QWORD *)(a2 + v11) = v13;
        v10 |= (unint64_t)(v14 & 0x7F) << v8;
        if ((v14 & 0x80) == 0)
          goto LABEL_12;
        v8 += 7;
        v15 = v9++ >= 9;
        if (v15)
        {
          v10 = 0;
          v16 = *v5;
          v17 = *(unsigned __int8 *)(a2 + v16);
          goto LABEL_14;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
      v16 = *v5;
      v17 = *(unsigned __int8 *)(a2 + v16);
      if (*(_BYTE *)(a2 + v16))
        v10 = 0;
LABEL_14:
      v18 = v10 & 7;
      if (v17 || v18 == 4)
        return *(_BYTE *)(a2 + *v5) == 0;
      v20 = v10 >> 3;
      if ((v10 >> 3) == 3)
      {
        if (v18 == 2)
        {
          result = PBReaderPlaceMark();
          if (!(_DWORD)result)
            return result;
          while (*(_QWORD *)(a2 + *v3) < *(_QWORD *)(a2 + *v4) && !*(_BYTE *)(a2 + *v5))
          {
            v25 = 0;
            v26 = 0;
            v27 = 0;
            while (1)
            {
              v28 = *v3;
              v29 = *(_QWORD *)(a2 + v28);
              v30 = v29 + 1;
              if (v29 == -1 || v30 > *(_QWORD *)(a2 + *v4))
                break;
              v31 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v29);
              *(_QWORD *)(a2 + v28) = v30;
              v27 |= (unint64_t)(v31 & 0x7F) << v25;
              if (v31 < 0)
              {
                v25 += 7;
                v15 = v26++ >= 9;
                if (!v15)
                  continue;
              }
              goto LABEL_36;
            }
            *(_BYTE *)(a2 + *v5) = 1;
LABEL_36:
            PBRepeatedUInt32Add();
          }
          PBReaderRecallMark();
        }
        else
        {
          v34 = 0;
          v35 = 0;
          v36 = 0;
          while (1)
          {
            v37 = *v3;
            v38 = *(_QWORD *)(a2 + v37);
            v39 = v38 + 1;
            if (v38 == -1 || v39 > *(_QWORD *)(a2 + *v4))
              break;
            v40 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v38);
            *(_QWORD *)(a2 + v37) = v39;
            v36 |= (unint64_t)(v40 & 0x7F) << v34;
            if (v40 < 0)
            {
              v34 += 7;
              v15 = v35++ >= 9;
              if (!v15)
                continue;
            }
            goto LABEL_51;
          }
          *(_BYTE *)(a2 + *v5) = 1;
LABEL_51:
          PBRepeatedUInt32Add();
        }
        goto LABEL_57;
      }
      if ((_DWORD)v20 == 2)
        break;
      if ((_DWORD)v20 == 1)
      {
        v21 = *v3;
        v22 = *(_QWORD *)(a2 + v21);
        if (v22 <= 0xFFFFFFFFFFFFFFFBLL && v22 + 4 <= *(_QWORD *)(a2 + *v4))
        {
          v23 = *(_DWORD *)(*(_QWORD *)(a2 + *v7) + v22);
          *(_QWORD *)(a2 + v21) = v22 + 4;
        }
        else
        {
          *(_BYTE *)(a2 + v16) = 1;
          v23 = 0;
        }
        v41 = 36;
LABEL_56:
        *(_DWORD *)(a1 + v41) = v23;
        goto LABEL_57;
      }
      if ((PBReaderSkipValueWithTag() & 1) == 0)
        return 0;
LABEL_57:
      if (*(_QWORD *)(a2 + *v3) >= *(_QWORD *)(a2 + *v4))
        return *(_BYTE *)(a2 + *v5) == 0;
    }
    v32 = *v3;
    v33 = *(_QWORD *)(a2 + v32);
    if (v33 <= 0xFFFFFFFFFFFFFFFBLL && v33 + 4 <= *(_QWORD *)(a2 + *v4))
    {
      v23 = *(_DWORD *)(*(_QWORD *)(a2 + *v7) + v33);
      *(_QWORD *)(a2 + v32) = v33 + 4;
    }
    else
    {
      *(_BYTE *)(a2 + v16) = 1;
      v23 = 0;
    }
    v41 = 32;
    goto LABEL_56;
  }
  return *(_BYTE *)(a2 + *v5) == 0;
}

void ma::MotionResult::~MotionResult(const __CFArray **this)
{
  ma::MotionResult::ClearObjects((ma::MotionResult *)this);
  ma::MotionResult::ClearImportedObjects((ma::MotionResult *)this);
  Vector<ma::Object *>::~Vector(this + 25);
  Vector<ma::Object *>::~Vector(this + 24);
  Vector<ma::Object *>::~Vector(this + 23);
}

const __CFArray *ma::MotionResult::ClearImportedObjects(ma::MotionResult *this)
{
  const __CFArray *result;
  const __CFArray **v2;
  uint64_t v3;

  v2 = (const __CFArray **)((char *)this + 200);
  result = (const __CFArray *)*((_QWORD *)this + 25);
  if (result)
  {
    do
    {
      result = (const __CFArray *)CFArrayGetCount(result);
      if (!(_DWORD)result)
        break;
      v3 = *(_QWORD *)Vector<ma::Object *>::Back(v2);
      if (v3)
        MEMORY[0x1BCCA12BC](v3, 0x1000C40E841BE39);
      Vector<ma::Object *>::PopBack(v2);
      result = *v2;
    }
    while (*v2);
  }
  return result;
}

void sub_1B6D37950(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  _Unwind_Resume(a1);
}

void sub_1B6D37AE0(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1B6D381B0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, uint64_t a14, void *a15, uint64_t a16, uint64_t a17, void *a18, uint64_t a19, uint64_t a20,void *a21)
{
  free(a12);
  free(a15);
  free(a18);
  free(a21);
  _Unwind_Resume(a1);
}

void sub_1B6D38B18(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, uint64_t a14, void *a15, uint64_t a16, uint64_t a17, void *a18, uint64_t a19, uint64_t a20,void *a21,uint64_t a22,uint64_t a23,void *a24,uint64_t a25,uint64_t a26,void *a27,uint64_t a28,uint64_t a29,void *a30,uint64_t a31,uint64_t a32,void *a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40)
{
  void *v40;
  uint64_t v41;

  free(*(void **)(v41 - 224));
  free(v40);
  free(a9);
  free(a12);
  cva::SVD<cva::Matrix<float,0u,0u,false>,true>::~SVD((void **)(v41 - 192));
  free(a15);
  free(a18);
  free(a21);
  free(a24);
  free(a27);
  free(a30);
  free(a33);
  _Unwind_Resume(a1);
}

void sub_1B6D38BC0()
{
  JUMPOUT(0x1B6D38B70);
}

void sub_1B6D38BC8()
{
  JUMPOUT(0x1B6D38B78);
}

void sub_1B6D38BD0()
{
  JUMPOUT(0x1B6D38B80);
}

void sub_1B6D38BD8()
{
  JUMPOUT(0x1B6D38B84);
}

void sub_1B6D38BE8()
{
  JUMPOUT(0x1B6D38B88);
}

void sub_1B6D38BF0()
{
  JUMPOUT(0x1B6D38B90);
}

void sub_1B6D38BF8()
{
  JUMPOUT(0x1B6D38B94);
}

void sub_1B6D38C08()
{
  JUMPOUT(0x1B6D38B98);
}

void sub_1B6D38C10()
{
  JUMPOUT(0x1B6D38BA0);
}

void sub_1B6D38C1C()
{
  JUMPOUT(0x1B6D38BA8);
}

void sub_1B6D38C24()
{
  JUMPOUT(0x1B6D38BB0);
}

void sub_1B6D38C2C()
{
  JUMPOUT(0x1B6D38BB8);
}

void cva::SVD<cva::Matrix<float,0u,0u,false>,true>::inverse(_DWORD *a1@<X0>, unsigned int *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v4;
  unsigned int v5;
  uint64_t v6;
  size_t v7;
  int v8;
  _DWORD *v9;
  _QWORD v10[2];
  _QWORD v11[2];
  _DWORD *v12;
  _QWORD v13[2];
  void *memptr[3];
  int v15;
  uint64_t v16;

  v4 = a3;
  v16 = *MEMORY[0x1E0C80C00];
  v5 = a1[18];
  LODWORD(a3) = a1[19];
  if (a3 >= v5)
    a3 = v5;
  else
    a3 = a3;
  v10[0] = a3 | (a3 << 32);
  v10[1] = a1 + 12;
  v6 = *a2;
  v11[0] = v10;
  v11[1] = v6;
  v12 = a1 + 6;
  v13[0] = &v12;
  v13[1] = v11;
  v9 = a1;
  v7 = (4 * (a1[4] * a1[11]) + 31) & 0x7FFFFFFE0;
  *(_QWORD *)v4 = 0;
  *(_QWORD *)(v4 + 8) = v7 >> 2;
  memptr[0] = 0;
  malloc_type_posix_memalign(memptr, 0x20uLL, v7, 0x49090899uLL);
  *(void **)v4 = memptr[0];
  v8 = a1[4];
  *(_DWORD *)(v4 + 16) = v12[5];
  *(_DWORD *)(v4 + 20) = v8;
  memptr[1] = v13;
  memptr[2] = &v9;
  v15 = 1065353216;
  cva::assign<false,false,cva::Matrix<float,0u,0u,false>,cva::MatrixMultExpr<cva::MatrixTransposeExpr<cva::Matrix<float,0u,0u,false> const>,cva::DiagonalMatrixInverseExpr<cva::VectorAsDiagonalExpr<cva::Matrix<float,0u,1u,false>,0u,0u>>>,cva::MatrixTransposeExpr<cva::Matrix<float,0u,0u,false> const>>(v4, (uint64_t)memptr);
}

void sub_1B6D38D34(_Unwind_Exception *a1)
{
  void **v1;

  free(*v1);
  _Unwind_Resume(a1);
}

void **cva::SVD<cva::Matrix<float,0u,0u,false>,true>::~SVD(void **a1)
{
  free(a1[6]);
  free(a1[3]);
  free(*a1);
  return a1;
}

void cva::assign<false,false,cva::Matrix<float,0u,0u,false>,cva::MatrixMultExpr<cva::Matrix<float,0u,0u,false>,cva::Matrix<float,0u,0u,false>>,cva::Matrix<float,0u,0u,false>>(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  void *v5;
  size_t *v6;
  size_t v7;
  size_t v8;
  size_t v9;
  int v10;
  void *v11;
  uint64_t v12;
  size_t v13;
  int v14;
  size_t v15;
  size_t v16;
  void *v17[2];
  int v18;
  int v19;
  void *memptr;
  size_t v21;
  size_t v22;
  int v23;
  uint64_t v24;

  v24 = *MEMORY[0x1E0C80C00];
  v4 = *(_QWORD *)(a2 + 16);
  v5 = *(void **)a1;
  if (*(void **)v4 == v5)
  {
    v12 = a2 + 8;
    v13 = (4 * (*(_DWORD *)(v4 + 20) * *(_DWORD *)(**(_QWORD **)(a2 + 8) + 16)) + 31) & 0x7FFFFFFE0;
    v21 = v13 >> 2;
    v17[0] = 0;
    malloc_type_posix_memalign(v17, 0x20uLL, v13, 0x49090899uLL);
    memptr = v17[0];
    v14 = *(_DWORD *)(*(_QWORD *)(a2 + 16) + 20);
    LODWORD(v22) = *(_DWORD *)(**(_QWORD **)v12 + 16);
    HIDWORD(v22) = v14;
    cva::assign<false,false,cva::Matrix<float,0u,0u,false>,cva::MatrixMultExpr<cva::Matrix<float,0u,0u,false>,cva::Matrix<float,0u,0u,false>>,cva::Matrix<float,0u,0u,false>>(&memptr, a2);
    v11 = *(void **)a1;
    v15 = *(_QWORD *)(a1 + 8);
    v16 = v21;
    *(_QWORD *)a1 = memptr;
    *(_QWORD *)(a1 + 8) = v16;
    memptr = v11;
    v21 = v15;
    *(_QWORD *)(a1 + 16) = v22;
    v22 = 0;
    goto LABEL_8;
  }
  v6 = *(size_t **)(a2 + 8);
  if (*(_DWORD *)(v6[1] + 20) * *(_DWORD *)(*v6 + 16) && *(_DWORD *)(v4 + 20) * *(_DWORD *)(v4 + 16))
  {
    v7 = (4 * (*(_DWORD *)(v6[1] + 20) * *(_DWORD *)(*v6 + 16)) + 31) & 0x7FFFFFFE0;
    v17[1] = (void *)(v7 >> 2);
    memptr = 0;
    malloc_type_posix_memalign(&memptr, 0x20uLL, v7, 0x49090899uLL);
    v17[0] = memptr;
    v8 = *v6;
    v9 = v6[1];
    v10 = *(_DWORD *)(v9 + 20);
    v18 = *(_DWORD *)(*v6 + 16);
    v19 = v10;
    v21 = v8;
    v22 = v9;
    v23 = 1065353216;
    cva::assign<false,false,cva::Matrix<float,0u,0u,false>,cva::Matrix<float,0u,0u,false>,cva::Matrix<float,0u,0u,false>>((uint64_t)v17, (uint64_t)&memptr);
    cva::VecLib<float>::gemm();
    v11 = v17[0];
LABEL_8:
    free(v11);
    return;
  }
  if (*(_DWORD *)(a1 + 20) * *(_DWORD *)(a1 + 16))
    bzero(v5, 4 * (*(_DWORD *)(a1 + 20) * *(_DWORD *)(a1 + 16)));
}

void sub_1B6D39104(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, uint64_t a15, uint64_t a16)
{
  free(a13);
  _Unwind_Resume(a1);
}

void cva::assign<false,false,cva::Matrix<float,0u,0u,false>,cva::Matrix<float,0u,0u,false>,cva::Matrix<float,0u,0u,false>>(uint64_t a1, uint64_t a2)
{
  void *v4;
  uint64_t v5;
  uint64_t v6;
  size_t v7;
  int v8;
  void *v9;
  size_t v10;
  size_t v11;
  int v12;
  void *v13;
  size_t v14;
  uint64_t v15;
  void *memptr;

  v4 = *(void **)a1;
  v5 = *(_QWORD *)(a2 + 8);
  v6 = *(_QWORD *)(a2 + 16);
  if (*(void **)v5 == v4 || *(void **)v6 == v4)
  {
    v7 = (4 * (*(_DWORD *)(v6 + 20) * *(_DWORD *)(v5 + 16)) + 31) & 0x7FFFFFFE0;
    v14 = v7 >> 2;
    memptr = 0;
    malloc_type_posix_memalign(&memptr, 0x20uLL, v7, 0x49090899uLL);
    v13 = memptr;
    v8 = *(_DWORD *)(*(_QWORD *)(a2 + 16) + 20);
    LODWORD(v15) = *(_DWORD *)(*(_QWORD *)(a2 + 8) + 16);
    HIDWORD(v15) = v8;
    cva::assign<false,false,cva::Matrix<float,0u,0u,false>,cva::Matrix<float,0u,0u,false>,cva::Matrix<float,0u,0u,false>>(&v13, a2);
    v9 = *(void **)a1;
    v10 = *(_QWORD *)(a1 + 8);
    v11 = v14;
    *(_QWORD *)a1 = v13;
    *(_QWORD *)(a1 + 8) = v11;
    v13 = v9;
    v14 = v10;
    *(_QWORD *)(a1 + 16) = v15;
    v15 = 0;
    free(v9);
  }
  else if (*(_DWORD *)(v5 + 20) * *(_DWORD *)(v5 + 16) && *(_DWORD *)(v6 + 20) * *(_DWORD *)(v6 + 16))
  {
    cva::VecLib<float>::gemm();
  }
  else
  {
    v12 = *(_DWORD *)(a1 + 20);
    if (v12 * *(_DWORD *)(a1 + 16))
      bzero(v4, 4 * (v12 * *(_DWORD *)(a1 + 16)));
  }
}

void sub_1B6D39258(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13)
{
  free(a13);
  _Unwind_Resume(a1);
}

void cva::assign<false,false,cva::Matrix<float,0u,0u,false>,cva::Matrix<float,0u,0u,false>,cva::Matrix<float,12u,1u,false>>(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  size_t v5;
  void *v6;
  size_t v7;
  size_t v8;
  int v9;
  void *v10;
  size_t v11;
  uint64_t v12;
  void *memptr;

  v4 = *(_QWORD *)(a2 + 8);
  if (*(_QWORD *)v4 == *(_QWORD *)a1 || *(_QWORD *)(a2 + 16) == *(_QWORD *)a1)
  {
    v5 = (4 * *(unsigned int *)(v4 + 16) + 31) & 0x7FFFFFFE0;
    v11 = v5 >> 2;
    memptr = 0;
    malloc_type_posix_memalign(&memptr, 0x20uLL, v5, 0x49090899uLL);
    v10 = memptr;
    LODWORD(v12) = *(_DWORD *)(*(_QWORD *)(a2 + 8) + 16);
    HIDWORD(v12) = 1;
    cva::assign<false,false,cva::Matrix<float,0u,0u,false>,cva::Matrix<float,0u,0u,false>,cva::Matrix<float,12u,1u,false>>(&v10, a2);
    v6 = *(void **)a1;
    v7 = *(_QWORD *)(a1 + 8);
    v8 = v11;
    *(_QWORD *)a1 = v10;
    *(_QWORD *)(a1 + 8) = v8;
    v10 = v6;
    v11 = v7;
    *(_QWORD *)(a1 + 16) = v12;
    v12 = 0;
    free(v6);
  }
  else if (*(_DWORD *)(v4 + 20) * *(_DWORD *)(v4 + 16))
  {
    cva::VecLib<float>::gemv();
  }
  else
  {
    v9 = *(_DWORD *)(a1 + 20);
    if (v9 * *(_DWORD *)(a1 + 16))
      bzero(*(void **)a1, 4 * (v9 * *(_DWORD *)(a1 + 16)));
  }
}

void sub_1B6D39388(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11)
{
  free(a11);
  _Unwind_Resume(a1);
}

void cva::assign<false,false,cva::Matrix<float,0u,0u,false>,cva::MatrixMultExpr<cva::Matrix<float,0u,0u,false>,cva::Matrix<float,12u,12u,false>>,cva::MatrixTransposeExpr<cva::Matrix<float,0u,0u,false>>>(uint64_t a1, uint64_t a2)
{
  void *v4;
  uint64_t v5;
  size_t *v6;
  size_t v7;
  size_t v8;
  size_t v9;
  void *v10;
  uint64_t v11;
  size_t v12;
  int v13;
  size_t v14;
  size_t v15;
  void *v16[2];
  int v17;
  void *memptr;
  size_t v19;
  size_t v20;
  int v21;
  uint64_t v22;

  v22 = *MEMORY[0x1E0C80C00];
  v4 = *(void **)a1;
  v5 = **(_QWORD **)(a2 + 16);
  if (*(void **)v5 == v4)
  {
    v11 = a2 + 8;
    v12 = (4 * (*(_DWORD *)(v5 + 16) * *(_DWORD *)(**(_QWORD **)(a2 + 8) + 16)) + 31) & 0x7FFFFFFE0;
    v19 = v12 >> 2;
    v16[0] = 0;
    malloc_type_posix_memalign(v16, 0x20uLL, v12, 0x49090899uLL);
    memptr = v16[0];
    v13 = *(_DWORD *)(**(_QWORD **)(a2 + 16) + 16);
    LODWORD(v20) = *(_DWORD *)(**(_QWORD **)v11 + 16);
    HIDWORD(v20) = v13;
    cva::assign<false,false,cva::Matrix<float,0u,0u,false>,cva::MatrixMultExpr<cva::Matrix<float,0u,0u,false>,cva::Matrix<float,12u,12u,false>>,cva::MatrixTransposeExpr<cva::Matrix<float,0u,0u,false>>>(&memptr, a2);
    v10 = *(void **)a1;
    v14 = *(_QWORD *)(a1 + 8);
    v15 = v19;
    *(_QWORD *)a1 = memptr;
    *(_QWORD *)(a1 + 8) = v15;
    memptr = v10;
    v19 = v14;
    *(_QWORD *)(a1 + 16) = v20;
    v20 = 0;
    goto LABEL_8;
  }
  v6 = *(size_t **)(a2 + 8);
  if (12 * *(_DWORD *)(*v6 + 16) && *(_DWORD *)(v5 + 16) * *(_DWORD *)(v5 + 20))
  {
    v7 = (4 * (12 * *(_DWORD *)(*v6 + 16)) + 31) & 0x7FFFFFFE0;
    v16[1] = (void *)(v7 >> 2);
    memptr = 0;
    malloc_type_posix_memalign(&memptr, 0x20uLL, v7, 0x49090899uLL);
    v16[0] = memptr;
    v8 = *v6;
    v17 = *(_DWORD *)(*v6 + 16);
    v9 = v6[1];
    v19 = v8;
    v20 = v9;
    v21 = 1065353216;
    cva::assign<false,false,cva::Matrix<float,0u,12u,false>,cva::Matrix<float,0u,0u,false>,cva::Matrix<float,12u,12u,false>>((uint64_t)v16, (uint64_t)&memptr);
    cva::VecLib<float>::gemm();
    v10 = v16[0];
LABEL_8:
    free(v10);
    return;
  }
  if (*(_DWORD *)(a1 + 20) * *(_DWORD *)(a1 + 16))
    bzero(v4, 4 * (*(_DWORD *)(a1 + 20) * *(_DWORD *)(a1 + 16)));
}

void sub_1B6D395B4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, uint64_t a15, uint64_t a16)
{
  free(a13);
  _Unwind_Resume(a1);
}

void cva::assign<false,false,cva::Matrix<float,0u,12u,false>,cva::Matrix<float,0u,0u,false>,cva::Matrix<float,12u,12u,false>>(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  void *v5;
  size_t v6;
  void *v7;
  size_t v8;
  size_t v9;
  void *v10;
  size_t v11;
  int v12;
  void *memptr;

  v4 = *(_QWORD *)(a2 + 8);
  v5 = *(void **)a1;
  if (*(void **)v4 == v5 || *(void **)(a2 + 16) == v5)
  {
    v6 = (4 * (12 * *(_DWORD *)(v4 + 16)) + 31) & 0x7FFFFFFE0;
    v11 = v6 >> 2;
    memptr = 0;
    malloc_type_posix_memalign(&memptr, 0x20uLL, v6, 0x49090899uLL);
    v10 = memptr;
    v12 = *(_DWORD *)(*(_QWORD *)(a2 + 8) + 16);
    cva::assign<false,false,cva::Matrix<float,0u,12u,false>,cva::Matrix<float,0u,0u,false>,cva::Matrix<float,12u,12u,false>>(&v10, a2);
    v7 = *(void **)a1;
    v8 = *(_QWORD *)(a1 + 8);
    v9 = v11;
    *(_QWORD *)a1 = v10;
    *(_QWORD *)(a1 + 8) = v9;
    v10 = v7;
    v11 = v8;
    *(_DWORD *)(a1 + 16) = v12;
    v12 = 0;
    free(v7);
  }
  else if (*(_DWORD *)(v4 + 20) * *(_DWORD *)(v4 + 16))
  {
    cva::VecLib<float>::gemm();
  }
  else if (12 * *(_DWORD *)(a1 + 16))
  {
    bzero(v5, 4 * (12 * *(_DWORD *)(a1 + 16)));
  }
}

void sub_1B6D39704(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13)
{
  free(a13);
  _Unwind_Resume(a1);
}

void cva::assign<false,false,cva::Matrix<float,0u,0u,false>,cva::MatrixMultExpr<cva::Matrix<float,0u,0u,false>,cva::Matrix<float,0u,0u,false>>,cva::MatrixTransposeExpr<cva::Matrix<float,0u,0u,false>>>(uint64_t a1, uint64_t a2)
{
  void *v4;
  uint64_t v5;
  size_t *v6;
  size_t v7;
  size_t v8;
  size_t v9;
  int v10;
  void *v11;
  uint64_t v12;
  size_t v13;
  int v14;
  size_t v15;
  size_t v16;
  void *v17[2];
  int v18;
  int v19;
  void *memptr;
  size_t v21;
  size_t v22;
  int v23;
  uint64_t v24;

  v24 = *MEMORY[0x1E0C80C00];
  v4 = *(void **)a1;
  v5 = **(_QWORD **)(a2 + 16);
  if (*(void **)v5 == v4)
  {
    v12 = a2 + 8;
    v13 = (4 * (*(_DWORD *)(v5 + 16) * *(_DWORD *)(**(_QWORD **)(a2 + 8) + 16)) + 31) & 0x7FFFFFFE0;
    v21 = v13 >> 2;
    v17[0] = 0;
    malloc_type_posix_memalign(v17, 0x20uLL, v13, 0x49090899uLL);
    memptr = v17[0];
    v14 = *(_DWORD *)(**(_QWORD **)(a2 + 16) + 16);
    LODWORD(v22) = *(_DWORD *)(**(_QWORD **)v12 + 16);
    HIDWORD(v22) = v14;
    cva::assign<false,false,cva::Matrix<float,0u,0u,false>,cva::MatrixMultExpr<cva::Matrix<float,0u,0u,false>,cva::Matrix<float,0u,0u,false>>,cva::MatrixTransposeExpr<cva::Matrix<float,0u,0u,false>>>(&memptr, a2);
    v11 = *(void **)a1;
    v15 = *(_QWORD *)(a1 + 8);
    v16 = v21;
    *(_QWORD *)a1 = memptr;
    *(_QWORD *)(a1 + 8) = v16;
    memptr = v11;
    v21 = v15;
    *(_QWORD *)(a1 + 16) = v22;
    v22 = 0;
    goto LABEL_8;
  }
  v6 = *(size_t **)(a2 + 8);
  if (*(_DWORD *)(v6[1] + 20) * *(_DWORD *)(*v6 + 16) && *(_DWORD *)(v5 + 16) * *(_DWORD *)(v5 + 20))
  {
    v7 = (4 * (*(_DWORD *)(v6[1] + 20) * *(_DWORD *)(*v6 + 16)) + 31) & 0x7FFFFFFE0;
    v17[1] = (void *)(v7 >> 2);
    memptr = 0;
    malloc_type_posix_memalign(&memptr, 0x20uLL, v7, 0x49090899uLL);
    v17[0] = memptr;
    v8 = *v6;
    v9 = v6[1];
    v10 = *(_DWORD *)(v9 + 20);
    v18 = *(_DWORD *)(*v6 + 16);
    v19 = v10;
    v21 = v8;
    v22 = v9;
    v23 = 1065353216;
    cva::assign<false,false,cva::Matrix<float,0u,0u,false>,cva::Matrix<float,0u,0u,false>,cva::Matrix<float,0u,0u,false>>((uint64_t)v17, (uint64_t)&memptr);
    cva::VecLib<float>::gemm();
    v11 = v17[0];
LABEL_8:
    free(v11);
    return;
  }
  if (*(_DWORD *)(a1 + 20) * *(_DWORD *)(a1 + 16))
    bzero(v4, 4 * (*(_DWORD *)(a1 + 20) * *(_DWORD *)(a1 + 16)));
}

void sub_1B6D39930(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, uint64_t a15, uint64_t a16)
{
  free(a13);
  _Unwind_Resume(a1);
}

uint64_t cva::SVD<cva::Matrix<float,0u,0u,false>,true>::SVD<cva::Matrix<float,0u,0u,false>>(uint64_t a1, _DWORD *a2, char a3, int a4)
{
  *(_DWORD *)(a1 + 64) = 0;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_QWORD *)(a1 + 72) = 0;
  *(_BYTE *)(a1 + 80) = 0;
  cva::SVD<cva::Matrix<float,0u,0u,false>,true>::decompose<cva::Matrix<float,0u,0u,false> const&>(a1, a2, a3, a4);
  return a1;
}

void sub_1B6D39998(_Unwind_Exception *a1)
{
  void **v1;

  free(v1[6]);
  free(v1[3]);
  free(*v1);
  _Unwind_Resume(a1);
}

void cva::SVD<cva::Matrix<float,0u,0u,false>,true>::decompose<cva::Matrix<float,0u,0u,false> const&>(uint64_t a1, _DWORD *a2, char a3, int a4)
{
  int v5;
  int v6;
  void *v7;
  void *v8;
  void *v9;

  v5 = a2[4];
  v6 = a2[5];
  *(_DWORD *)(a1 + 72) = v5;
  *(_DWORD *)(a1 + 76) = v6;
  if (!(v5 | v6))
  {
    *(_BYTE *)(a1 + 80) = 1;
LABEL_8:
    v7 = *(void **)(a1 + 48);
    *(_DWORD *)(a1 + 64) = 0;
    *(_QWORD *)(a1 + 48) = 0;
    *(_QWORD *)(a1 + 56) = 0;
    free(v7);
    v8 = *(void **)a1;
    *(_QWORD *)(a1 + 8) = 0;
    *(_QWORD *)(a1 + 16) = 0;
    *(_QWORD *)a1 = 0;
    free(v8);
    v9 = *(void **)(a1 + 24);
    *(_QWORD *)(a1 + 32) = 0;
    *(_QWORD *)(a1 + 40) = 0;
    *(_QWORD *)(a1 + 24) = 0;
    free(v9);
    return;
  }
  if (a4 && fabsf((float)(v5 - v6)) >= (float)((float)(v6 + v5) * 0.1))
    cva::SVD<cva::Matrix<float,0u,0u,false>,true>::decomposeRectangular<cva::Matrix<float,0u,0u,false>>(a1, a2, a3);
  else
    cva::SVD<cva::Matrix<float,0u,0u,false>,true>::decomposeDirect<cva::Matrix<float,0u,0u,false>>(a1, (uint64_t)a2, a3);
  if (!*(_BYTE *)(a1 + 80))
    goto LABEL_8;
}

void cva::SVD<cva::Matrix<float,0u,0u,false>,true>::decomposeDirect<cva::Matrix<float,0u,0u,false>>(uint64_t a1, uint64_t a2, char a3)
{
  void *v6[3];

  cva::MatrixData<float,0ul,0ul,false>::MatrixData(v6, (const void **)a2, (*(_DWORD *)(a2 + 20) * *(_DWORD *)(a2 + 16)));
  v6[2] = *(void **)(a2 + 16);
  cva::SVD<cva::Matrix<float,0u,0u,false>,true>::decomposeDirect<0u,0u>(a1, (uint64_t)v6, a3);
  free(v6[0]);
}

void sub_1B6D39AD8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10)
{
  free(a10);
  _Unwind_Resume(a1);
}

void cva::SVD<cva::Matrix<float,0u,0u,false>,true>::decomposeRectangular<cva::Matrix<float,0u,0u,false>>(uint64_t a1, _DWORD *a2, int a3)
{
  char v3;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  float *v9;
  uint64_t v10;
  unsigned int v11;
  int v12;
  void *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  float *v17;
  uint64_t v18;
  unsigned int v19;
  uint64_t *v20;
  int v21;
  uint64_t v22;
  int v23;
  size_t v24;
  int v25;
  void *v26;
  size_t v27;
  size_t v28;
  size_t v29;
  int v30;
  size_t v31;
  size_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t *v38;
  uint64_t *v39;
  void *v40;
  size_t v41;
  uint64_t v42;
  void *memptr;
  void **v44;
  uint64_t **v45;
  int v46;
  uint64_t v47;

  v3 = a3;
  v47 = *MEMORY[0x1E0C80C00];
  if (a2[5] >= a2[4])
  {
    v40 = a2;
    memptr = a2;
    v44 = &v40;
    cva::SVD<cva::Matrix<float,0u,0u,false>,true>::decomposeDirect<cva::MatrixMultExpr<cva::Matrix<float,0u,0u,false>,cva::MatrixTransposeExpr<cva::Matrix<float,0u,0u,false> const>>>(a1, (_QWORD **)&memptr, a3 != 0);
    if (!*(_BYTE *)(a1 + 80))
      return;
    v14 = *(_QWORD *)(a1 + 48);
    v15 = *(unsigned int *)(a1 + 64);
    if ((_DWORD)v15)
    {
      v16 = 4 * v15;
      v17 = *(float **)(a1 + 48);
      do
      {
        *v17 = sqrtf(*v17);
        ++v17;
        v16 -= 4;
      }
      while (v16);
    }
    if ((v3 & 2) == 0)
      return;
    v19 = *(_DWORD *)(a1 + 72);
    LODWORD(v18) = *(_DWORD *)(a1 + 76);
    if (v18 >= v19)
      v18 = v19;
    else
      v18 = v18;
    v33 = v18 | (v18 << 32);
    v34 = a1 + 48;
    v35 = &v33;
    v36 = 925353388;
    v37 = a1;
    v38 = (uint64_t *)&v35;
    v39 = &v37;
    v20 = (uint64_t *)(a1 + 24);
    v21 = HIDWORD(v33);
    if (__PAIR64__(a2[5], HIDWORD(v33)) != *(_QWORD *)(a1 + 40))
    {
      v22 = *v20;
      if (v14 == *v20)
      {
        v23 = a2[5];
      }
      else
      {
        v23 = a2[5];
        if (*(_QWORD *)a1 != v22 && *(_QWORD *)a2 != v22)
        {
          *(_DWORD *)(a1 + 40) = HIDWORD(v33);
          *(_DWORD *)(a1 + 44) = v23;
          cva::MatrixData<float,0ul,0ul,false>::reserve(a1 + 24, (v23 * v21));
          goto LABEL_30;
        }
      }
      v29 = (4 * (v23 * HIDWORD(v33)) + 31) & 0x7FFFFFFE0;
      v41 = v29 >> 2;
      memptr = 0;
      malloc_type_posix_memalign(&memptr, 0x20uLL, v29, 0x49090899uLL);
      v40 = memptr;
      v30 = a2[5];
      LODWORD(v42) = *(_DWORD *)(*v38 + 4);
      HIDWORD(v42) = v30;
      v44 = (void **)&v38;
      v45 = (uint64_t **)a2;
      v46 = 1065353216;
      cva::assign<false,false,cva::Matrix<float,0u,0u,false>,cva::MatrixMultExpr<cva::DiagonalMatrixInverseExpr<cva::VectorAsDiagonalExpr<cva::Matrix<float,0u,1u,false>,0u,0u>>,cva::MatrixTransposeExpr<cva::Matrix<float,0u,0u,false>>>,cva::Matrix<float,0u,0u,false>>((uint64_t)&v40, (uint64_t)&memptr);
      v26 = *(void **)(a1 + 24);
      v31 = *(_QWORD *)(a1 + 32);
      v32 = v41;
      *(_QWORD *)(a1 + 24) = v40;
      *(_QWORD *)(a1 + 32) = v32;
      v40 = v26;
      v41 = v31;
      *(_QWORD *)(a1 + 40) = v42;
LABEL_34:
      v42 = 0;
      free(v26);
      return;
    }
LABEL_30:
    v44 = (void **)&v38;
    v45 = (uint64_t **)a2;
    v46 = 1065353216;
    cva::assign<false,false,cva::Matrix<float,0u,0u,false>,cva::MatrixMultExpr<cva::DiagonalMatrixInverseExpr<cva::VectorAsDiagonalExpr<cva::Matrix<float,0u,1u,false>,0u,0u>>,cva::MatrixTransposeExpr<cva::Matrix<float,0u,0u,false>>>,cva::Matrix<float,0u,0u,false>>(a1 + 24, (uint64_t)&memptr);
    return;
  }
  v40 = a2;
  memptr = &v40;
  v44 = (void **)a2;
  cva::SVD<cva::Matrix<float,0u,0u,false>,true>::decomposeDirect<cva::MatrixMultExpr<cva::MatrixTransposeExpr<cva::Matrix<float,0u,0u,false> const>,cva::Matrix<float,0u,0u,false>>>(a1, &memptr, 2 * (a3 != 0));
  if (*(_BYTE *)(a1 + 80))
  {
    v6 = *(void **)(a1 + 48);
    v7 = *(unsigned int *)(a1 + 64);
    if ((_DWORD)v7)
    {
      v8 = 4 * v7;
      v9 = *(float **)(a1 + 48);
      do
      {
        *v9 = sqrtf(*v9);
        ++v9;
        v8 -= 4;
      }
      while (v8);
    }
    if ((v3 & 1) != 0)
    {
      v11 = *(_DWORD *)(a1 + 72);
      LODWORD(v10) = *(_DWORD *)(a1 + 76);
      if (v10 >= v11)
        v10 = v11;
      else
        v10 = v10;
      v33 = v10 | (v10 << 32);
      v34 = a1 + 48;
      v35 = &v33;
      v36 = 925353388;
      v37 = a1 + 24;
      v38 = &v37;
      v39 = (uint64_t *)&v35;
      v12 = a2[4];
      if (v12 == *(_DWORD *)(a1 + 16) && *(_DWORD *)(a1 + 20) == (_DWORD)v10)
        goto LABEL_16;
      v13 = *(void **)a1;
      if (*(_QWORD *)a2 != *(_QWORD *)a1 && *(void **)(a1 + 24) != v13 && v6 != v13)
      {
        *(_DWORD *)(a1 + 16) = v12;
        *(_DWORD *)(a1 + 20) = v10;
        cva::MatrixData<float,0ul,0ul,false>::reserve(a1, (v12 * v10));
LABEL_16:
        v44 = (void **)a2;
        v45 = &v38;
        v46 = 1065353216;
        cva::assign<false,false,cva::Matrix<float,0u,0u,false>,cva::Matrix<float,0u,0u,false>,cva::MatrixMultExpr<cva::MatrixTransposeExpr<cva::Matrix<float,0u,0u,false>>,cva::DiagonalMatrixInverseExpr<cva::VectorAsDiagonalExpr<cva::Matrix<float,0u,1u,false>,0u,0u>>>>(a1, (uint64_t)&memptr);
        return;
      }
      v24 = (4 * (v12 * v10) + 31) & 0x7FFFFFFE0;
      v41 = v24 >> 2;
      memptr = 0;
      malloc_type_posix_memalign(&memptr, 0x20uLL, v24, 0x49090899uLL);
      v40 = memptr;
      v25 = *(_DWORD *)*v39;
      LODWORD(v42) = a2[4];
      HIDWORD(v42) = v25;
      v44 = (void **)a2;
      v45 = &v38;
      v46 = 1065353216;
      cva::assign<false,false,cva::Matrix<float,0u,0u,false>,cva::Matrix<float,0u,0u,false>,cva::MatrixMultExpr<cva::MatrixTransposeExpr<cva::Matrix<float,0u,0u,false>>,cva::DiagonalMatrixInverseExpr<cva::VectorAsDiagonalExpr<cva::Matrix<float,0u,1u,false>,0u,0u>>>>((uint64_t)&v40, (uint64_t)&memptr);
      v26 = *(void **)a1;
      v27 = *(_QWORD *)(a1 + 8);
      v28 = v41;
      *(_QWORD *)a1 = v40;
      *(_QWORD *)(a1 + 8) = v28;
      v40 = v26;
      v41 = v27;
      *(_QWORD *)(a1 + 16) = v42;
      goto LABEL_34;
    }
  }
}

void sub_1B6D39E74(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *a17)
{
  free(a17);
  _Unwind_Resume(a1);
}

void cva::SVD<cva::Matrix<float,0u,0u,false>,true>::decomposeDirect<0u,0u>(uint64_t a1, uint64_t a2, char a3)
{
  unsigned int v5;
  unsigned int v6;
  unint64_t v7;
  void *v8;
  void **v9;
  void *v10;
  void *v11;
  void *memptr;

  v5 = *(_DWORD *)(a2 + 16);
  v6 = *(_DWORD *)(a2 + 20);
  if ((int)v6 >= (int)v5)
    v7 = v5;
  else
    v7 = v6;
  *(_DWORD *)(a1 + 64) = v7;
  cva::MatrixData<float,0ul,0ul,false>::reserve(a1 + 48, v7);
  if ((a3 & 1) != 0)
  {
    *(_DWORD *)(a1 + 16) = v5;
    *(_DWORD *)(a1 + 20) = v7;
    cva::MatrixData<float,0ul,0ul,false>::reserve(a1, v7 * v5);
  }
  else
  {
    v8 = *(void **)a1;
    *(_QWORD *)(a1 + 8) = 0;
    *(_QWORD *)(a1 + 16) = 0;
    *(_QWORD *)a1 = 0;
    free(v8);
  }
  v9 = (void **)(a1 + 24);
  if ((a3 & 2) != 0)
  {
    *(_DWORD *)(a1 + 40) = v7;
    *(_DWORD *)(a1 + 44) = v6;
    cva::MatrixData<float,0ul,0ul,false>::reserve(a1 + 24, v7 * v6);
  }
  else
  {
    v10 = *v9;
    *(_QWORD *)(a1 + 32) = 0;
    *(_QWORD *)(a1 + 40) = 0;
    *v9 = 0;
    free(v10);
  }
  cva::vecLib::gesvd<float>();
  memptr = 0;
  malloc_type_posix_memalign(&memptr, 0x20uLL, (4 * 0.0 + 31) & 0x7FFFFFFE0, 0x49090899uLL);
  v11 = memptr;
  cva::vecLib::gesvd<float>();
  free(v11);
  *(_BYTE *)(a1 + 80) = 1;
}

void sub_1B6D3A0B0(_Unwind_Exception *a1)
{
  void *v1;

  free(v1);
  _Unwind_Resume(a1);
}

void cva::MatrixData<float,0ul,0ul,false>::reserve(uint64_t a1, unint64_t a2)
{
  size_t v4;
  void *memptr;

  if (a2)
  {
    if (*(_QWORD *)(a1 + 8) < a2)
    {
      free(*(void **)a1);
      v4 = (4 * a2 + 31) & 0xFFFFFFFFFFFFFFE0;
      *(_QWORD *)a1 = 0;
      *(_QWORD *)(a1 + 8) = v4 >> 2;
      memptr = 0;
      malloc_type_posix_memalign(&memptr, 0x20uLL, v4, 0x49090899uLL);
      *(_QWORD *)a1 = memptr;
    }
  }
  else
  {
    free(*(void **)a1);
    *(_QWORD *)a1 = 0;
    *(_QWORD *)(a1 + 8) = 0;
  }
}

void **cva::MatrixData<float,0ul,0ul,false>::MatrixData(void **a1, const void **a2, uint64_t a3)
{
  size_t v6;
  size_t v7;
  void *v8;
  void *memptr;

  v6 = 4 * a3;
  v7 = (4 * a3 + 31) & 0xFFFFFFFFFFFFFFE0;
  *a1 = 0;
  a1[1] = (void *)(v7 >> 2);
  memptr = 0;
  malloc_type_posix_memalign(&memptr, 0x20uLL, v7, 0x49090899uLL);
  v8 = memptr;
  *a1 = memptr;
  if (a3)
    memcpy(v8, *a2, v6);
  return a1;
}

void cva::SVD<cva::Matrix<float,0u,0u,false>,true>::decomposeDirect<cva::MatrixMultExpr<cva::MatrixTransposeExpr<cva::Matrix<float,0u,0u,false> const>,cva::Matrix<float,0u,0u,false>>>(uint64_t a1, _QWORD *a2, char a3)
{
  _QWORD *v6;
  size_t v7;
  void *v8;
  void *v9;
  int v10;
  void *v11[2];
  int v12;
  int v13;
  void *memptr[3];
  int v15;
  uint64_t v16;

  v16 = *MEMORY[0x1E0C80C00];
  v6 = a2 + 1;
  v7 = (4 * (*(_DWORD *)(a2[1] + 20) * *(_DWORD *)(*(_QWORD *)*a2 + 20)) + 31) & 0x7FFFFFFE0;
  v11[1] = (void *)(v7 >> 2);
  memptr[0] = 0;
  malloc_type_posix_memalign(memptr, 0x20uLL, v7, 0x49090899uLL);
  v11[0] = memptr[0];
  v8 = (void *)*a2;
  v9 = (void *)*v6;
  v10 = *(_DWORD *)(*v6 + 20);
  v12 = *(_DWORD *)(*(_QWORD *)*a2 + 20);
  v13 = v10;
  memptr[1] = v8;
  memptr[2] = v9;
  v15 = 1065353216;
  cva::assign<false,false,cva::Matrix<float,0u,0u,false>,cva::MatrixTransposeExpr<cva::Matrix<float,0u,0u,false> const>,cva::Matrix<float,0u,0u,false>>((uint64_t)v11, (uint64_t)memptr);
  cva::SVD<cva::Matrix<float,0u,0u,false>,true>::decomposeDirect<0u,0u>(a1, (uint64_t)v11, a3);
  free(v11[0]);
}

void sub_1B6D3A2BC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9)
{
  free(a9);
  _Unwind_Resume(a1);
}

void cva::SVD<cva::Matrix<float,0u,0u,false>,true>::decomposeDirect<cva::MatrixMultExpr<cva::Matrix<float,0u,0u,false>,cva::MatrixTransposeExpr<cva::Matrix<float,0u,0u,false> const>>>(uint64_t a1, _QWORD **a2, char a3)
{
  _QWORD **v6;
  size_t v7;
  _DWORD *v8;
  void *v9;
  int v10;
  void *v11[2];
  int v12;
  int v13;
  void *memptr[3];
  int v15;
  uint64_t v16;

  v16 = *MEMORY[0x1E0C80C00];
  v6 = a2 + 1;
  v7 = (4 * (*(_DWORD *)(*a2[1] + 16) * *((_DWORD *)*a2 + 4)) + 31) & 0x7FFFFFFE0;
  v11[1] = (void *)(v7 >> 2);
  memptr[0] = 0;
  malloc_type_posix_memalign(memptr, 0x20uLL, v7, 0x49090899uLL);
  v11[0] = memptr[0];
  v8 = *a2;
  v9 = *v6;
  v10 = *(_DWORD *)(**v6 + 16);
  v12 = *((_DWORD *)*a2 + 4);
  v13 = v10;
  memptr[1] = v8;
  memptr[2] = v9;
  v15 = 1065353216;
  cva::assign<false,false,cva::Matrix<float,0u,0u,false>,cva::Matrix<float,0u,0u,false>,cva::MatrixTransposeExpr<cva::Matrix<float,0u,0u,false> const>>((uint64_t)v11, (uint64_t)memptr);
  cva::SVD<cva::Matrix<float,0u,0u,false>,true>::decomposeDirect<0u,0u>(a1, (uint64_t)v11, a3);
  free(v11[0]);
}

void sub_1B6D3A3D4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9)
{
  free(a9);
  _Unwind_Resume(a1);
}

void cva::assign<false,false,cva::Matrix<float,0u,0u,false>,cva::MatrixTransposeExpr<cva::Matrix<float,0u,0u,false> const>,cva::Matrix<float,0u,0u,false>>(uint64_t a1, uint64_t a2)
{
  void *v4;
  uint64_t v5;
  uint64_t v6;
  size_t v7;
  int v8;
  void *v9;
  size_t v10;
  size_t v11;
  int v12;
  void *v13;
  size_t v14;
  uint64_t v15;
  void *memptr;

  v4 = *(void **)a1;
  v5 = *(_QWORD *)(a2 + 16);
  v6 = **(_QWORD **)(a2 + 8);
  if (*(void **)v6 == v4 || *(void **)v5 == v4)
  {
    v7 = (4 * (*(_DWORD *)(v5 + 20) * *(_DWORD *)(v6 + 20)) + 31) & 0x7FFFFFFE0;
    v14 = v7 >> 2;
    memptr = 0;
    malloc_type_posix_memalign(&memptr, 0x20uLL, v7, 0x49090899uLL);
    v13 = memptr;
    v8 = *(_DWORD *)(*(_QWORD *)(a2 + 16) + 20);
    LODWORD(v15) = *(_DWORD *)(**(_QWORD **)(a2 + 8) + 20);
    HIDWORD(v15) = v8;
    cva::assign<false,false,cva::Matrix<float,0u,0u,false>,cva::MatrixTransposeExpr<cva::Matrix<float,0u,0u,false> const>,cva::Matrix<float,0u,0u,false>>(&v13, a2);
    v9 = *(void **)a1;
    v10 = *(_QWORD *)(a1 + 8);
    v11 = v14;
    *(_QWORD *)a1 = v13;
    *(_QWORD *)(a1 + 8) = v11;
    v13 = v9;
    v14 = v10;
    *(_QWORD *)(a1 + 16) = v15;
    v15 = 0;
    free(v9);
  }
  else if (*(_DWORD *)(v6 + 16) * *(_DWORD *)(v6 + 20) && *(_DWORD *)(v5 + 20) * *(_DWORD *)(v5 + 16))
  {
    cva::VecLib<float>::gemm();
  }
  else
  {
    v12 = *(_DWORD *)(a1 + 20);
    if (v12 * *(_DWORD *)(a1 + 16))
      bzero(v4, 4 * (v12 * *(_DWORD *)(a1 + 16)));
  }
}

void sub_1B6D3A524(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13)
{
  free(a13);
  _Unwind_Resume(a1);
}

void cva::assign<false,false,cva::Matrix<float,0u,0u,false>,cva::Matrix<float,0u,0u,false>,cva::MatrixMultExpr<cva::MatrixTransposeExpr<cva::Matrix<float,0u,0u,false>>,cva::DiagonalMatrixInverseExpr<cva::VectorAsDiagonalExpr<cva::Matrix<float,0u,1u,false>,0u,0u>>>>(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  void *v5;
  void **v6;
  unsigned int v7;
  char *v8;
  unsigned int **v9;
  void *v10;
  int v11;
  unsigned int *v12;
  unsigned int v13;
  unsigned int v14;
  unsigned int v15;
  int v16;
  char *v17;
  unsigned int v18;
  BOOL v19;
  char *v20;
  char *v21;
  void *v22;
  int v23;
  size_t v24;
  int v25;
  char *v26;
  char *v27;
  int v28[2];
  char *v29;
  int v30;
  int v31;
  unsigned int ***v32;
  char v33;
  int v34;
  unsigned int v35;
  unsigned int ****v36;
  void *v37[3];
  void *memptr;
  char *v39;
  uint64_t v40;
  unsigned int **v41;

  v4 = *(_QWORD *)(a2 + 8);
  v5 = *(void **)a1;
  if (*(void **)v4 == v5)
  {
    v24 = (4 * (***(_DWORD ***)(*(_QWORD *)(a2 + 16) + 8) * *(_DWORD *)(v4 + 16)) + 31) & 0x7FFFFFFE0;
    v39 = (char *)(v24 >> 2);
    v37[0] = 0;
    malloc_type_posix_memalign(v37, 0x20uLL, v24, 0x49090899uLL);
    memptr = v37[0];
    v25 = ***(_DWORD ***)(*(_QWORD *)(a2 + 16) + 8);
    LODWORD(v40) = *(_DWORD *)(*(_QWORD *)(a2 + 8) + 16);
    HIDWORD(v40) = v25;
    cva::assign<false,false,cva::Matrix<float,0u,0u,false>,cva::Matrix<float,0u,0u,false>,cva::MatrixMultExpr<cva::MatrixTransposeExpr<cva::Matrix<float,0u,0u,false>>,cva::DiagonalMatrixInverseExpr<cva::VectorAsDiagonalExpr<cva::Matrix<float,0u,1u,false>,0u,0u>>>>(&memptr, a2);
    v22 = *(void **)a1;
    v26 = *(char **)(a1 + 8);
    v27 = v39;
    *(_QWORD *)a1 = memptr;
    *(_QWORD *)(a1 + 8) = v27;
    memptr = v22;
    v39 = v26;
    *(_QWORD *)(a1 + 16) = v40;
    v40 = 0;
LABEL_18:
    free(v22);
    return;
  }
  if (*(_DWORD *)(v4 + 20) * *(_DWORD *)(v4 + 16))
  {
    v6 = *(void ***)(a2 + 16);
    v7 = **(_DWORD **)v6[1] * *(_DWORD *)(*(_QWORD *)*v6 + 20);
    if (v7)
    {
      memptr = 0;
      malloc_type_posix_memalign(&memptr, 0x20uLL, (4 * v7 + 31) & 0x7FFFFFFE0, 0x49090899uLL);
      v8 = (char *)memptr;
      v10 = *v6;
      v9 = (unsigned int **)v6[1];
      v11 = *(_DWORD *)(*(_QWORD *)*v6 + 20);
      v12 = *v9;
      v13 = **v9;
      v41 = v9;
      v14 = v12[1];
      if (v13 < v14)
        v14 = v13;
      v37[0] = (void *)__PAIR64__(v14, v11);
      v37[1] = v10;
      v37[2] = 0;
      v32 = &v41;
      v34 = v11;
      v35 = v14;
      v36 = &v32;
      memptr = v37;
      v39 = &v33;
      v28[0] = v11;
      v28[1] = v14;
      v29 = v8;
      v30 = v11;
      v31 = 0;
      cva::MatrixRef<float,0u,0u,false>::operator=<cva::MatrixBinaryExpr<cva::MatrixSubExpr<cva::MatrixTransposeExpr<cva::Matrix<float,0u,0u,false>> const,0u,0u>,cva::MatrixRepeatExpr<cva::MatrixTransposeExpr<cva::MatrixDiagonalExpr<cva::DiagonalMatrixInverseExpr<cva::VectorAsDiagonalExpr<cva::Matrix<float,0u,1u,false>,0u,0u>> const> const>,0u,1u>,cva::detail::MulOp>>(v28, (int **)&memptr);
      v15 = *(_DWORD *)(*(_QWORD *)v10 + 16);
      v16 = v13 - v15;
      if (v13 > v15)
      {
        v17 = &v8[4 * v15 * v11];
        v18 = v16 * v11;
        v19 = v18 == 0;
        if (v18)
          v20 = v17;
        else
          v20 = 0;
        v21 = &v17[4 * v18];
        if (v19)
          v21 = 0;
        if (v20 != v21)
          bzero(v20, (v21 - v20) & 0xFFFFFFFFFFFFFFFCLL);
      }
      cva::VecLib<float>::gemm();
      v22 = v8;
      goto LABEL_18;
    }
  }
  v23 = *(_DWORD *)(a1 + 20);
  if (v23 * *(_DWORD *)(a1 + 16))
    bzero(v5, 4 * (v23 * *(_DWORD *)(a1 + 16)));
}

void sub_1B6D3A790(_Unwind_Exception *a1)
{
  void *v1;

  free(v1);
  _Unwind_Resume(a1);
}

int *cva::MatrixRef<float,0u,0u,false>::operator=<cva::MatrixBinaryExpr<cva::MatrixSubExpr<cva::MatrixTransposeExpr<cva::Matrix<float,0u,0u,false>> const,0u,0u>,cva::MatrixRepeatExpr<cva::MatrixTransposeExpr<cva::MatrixDiagonalExpr<cva::DiagonalMatrixInverseExpr<cva::VectorAsDiagonalExpr<cva::Matrix<float,0u,1u,false>,0u,0u>> const> const>,0u,1u>,cva::detail::MulOp>>(int *a1, int **a2)
{
  uint64_t v4;
  uint64_t v5;
  int *v6;
  uint64_t *v7;
  uint64_t v8;
  int *v9;
  float *v10;
  uint64_t v11;
  int v12;
  int v13;
  int v14;
  int v15;
  BOOL v16;
  float *v17;
  float *v18;
  unint64_t v19;
  unint64_t v20;
  int v21;
  unsigned int v22;
  int v23;
  int v24;
  int v25;
  unsigned int v26;
  int v27;
  int v28;
  float v29;
  float v30;
  float v31;
  uint64_t v32;
  unint64_t v33;
  unint64_t v34;
  uint64_t v35;
  unint64_t v36;
  unint64_t v37;
  unsigned int v38;
  uint64_t v39;
  int *v40;
  unint64_t v41;
  unint64_t v42;
  int *v43;
  int v44;
  int v45;
  uint64_t *v46;
  int v47;
  uint64_t v48;
  float *v49;
  unsigned int v50;
  uint64_t v51;
  int v52;
  int v53;
  uint64_t v54;
  float *v55;
  float v56;
  float v57;
  float v58;
  uint64_t v59;
  unint64_t v60;
  unint64_t v61;
  uint64_t v62;
  unint64_t v63;
  unint64_t v64;
  int v65;
  int v66;
  int v67;
  int v68;
  BOOL v69;
  _DWORD *v70;
  uint64_t v71;
  int v72;
  unsigned int v73;
  int *v74;
  int v75;
  unsigned int v76;
  void *memptr;

  v4 = *((_QWORD *)a1 + 1);
  v5 = v4 - 4 * a1[5];
  v6 = *a2;
  v7 = (uint64_t *)**((_QWORD **)*a2 + 1);
  v8 = *v7;
  if (*v7 == v5
    || (v9 = a2[1], v10 = (float *)***((_QWORD ***)v9 + 2), v11 = **(_QWORD **)(*(_QWORD *)v10 + 8), v11 == v5))
  {
    v39 = (a1[1] * *a1);
    memptr = 0;
    malloc_type_posix_memalign(&memptr, 0x20uLL, (4 * v39 + 31) & 0x7FFFFFFE0, 0x49090899uLL);
    v40 = (int *)memptr;
    if ((_DWORD)v39)
    {
      v41 = 0;
      v42 = 0;
      v43 = a2[1];
      v44 = (*a2)[4];
      v45 = (*a2)[5];
      v46 = (uint64_t *)**((_QWORD **)*a2 + 1);
      v47 = *((_DWORD *)v46 + 4);
      v48 = *v46;
      v49 = (float *)***((_QWORD ***)v43 + 2);
      v50 = *(_DWORD *)(*(_QWORD *)v49 + 4);
      if (**(_DWORD **)v49 < v50)
        v50 = **(_DWORD **)v49;
      v51 = **(_QWORD **)(*(_QWORD *)v49 + 8);
      v52 = **a2;
      v53 = v43[1];
      v54 = 4 * v39;
      v55 = (float *)memptr;
      do
      {
        v56 = *(float *)(v51 + 4 * (HIDWORD(v41) % v50));
        v57 = fabsf(v56);
        v58 = 1.0 / v56;
        if (v57 < v49[2])
          v58 = 0.0;
        *v55++ = *(float *)(v48 + 4 * (v45 + HIDWORD(v42) + (v44 + v42) * v47)) * v58;
        v59 = (v42 + 1);
        v60 = v42 & 0xFFFFFFFF00000000;
        v61 = v60 | v59;
        v42 = v60 + 0x100000000;
        if (v52 > (int)v59)
          v42 = v61;
        v62 = (v41 + 1);
        v63 = v41 & 0xFFFFFFFF00000000;
        v64 = v63 | v62;
        v41 = v63 + 0x100000000;
        if (v53 > (int)v62)
          v41 = v64;
        v54 -= 4;
      }
      while (v54);
    }
    v65 = *a1;
    v66 = a1[1];
    v67 = v66 * *a1;
    v68 = a1[4];
    v69 = v67 == 0;
    if (v67)
      v70 = (_DWORD *)*((_QWORD *)a1 + 1);
    else
      v70 = 0;
    v71 = *((_QWORD *)a1 + 1) + 4 * (v68 * v66);
    if (v69)
      v71 = 0;
    if (v70 != (_DWORD *)v71)
    {
      v72 = 0;
      v73 = v68 - v65;
      v74 = v40;
      do
      {
        v75 = *v74++;
        *v70 = v75;
        if (v72 + 1 >= v65)
          v76 = v73;
        else
          v76 = 0;
        v70 += v76 + 1;
        if (v72 + 1 < v65)
          ++v72;
        else
          v72 = 0;
      }
      while (v70 != (_DWORD *)v71);
    }
    free(v40);
  }
  else
  {
    v12 = *a1;
    v13 = a1[1];
    v14 = v13 * *a1;
    v15 = a1[4];
    v16 = v14 == 0;
    if (v14)
      v17 = (float *)*((_QWORD *)a1 + 1);
    else
      v17 = 0;
    v18 = (float *)(v4 + 4 * (v15 * v13));
    if (v16)
      v18 = 0;
    if (v17 != v18)
    {
      v19 = 0;
      v20 = 0;
      v21 = 0;
      v22 = v15 - v12;
      v23 = v6[4];
      v24 = v6[5];
      v25 = *((_DWORD *)v7 + 4);
      v26 = **(_DWORD **)v10;
      if (v26 >= *(_DWORD *)(*(_QWORD *)v10 + 4))
        v26 = *(_DWORD *)(*(_QWORD *)v10 + 4);
      v27 = *v6;
      v28 = v9[1];
      do
      {
        v29 = *(float *)(v11 + 4 * (HIDWORD(v19) % v26));
        v30 = fabsf(v29);
        v31 = 1.0 / v29;
        if (v30 < v10[2])
          v31 = 0.0;
        *v17 = *(float *)(v8 + 4 * (v24 + HIDWORD(v20) + (v23 + v20) * v25)) * v31;
        v32 = (v20 + 1);
        v33 = v20 & 0xFFFFFFFF00000000;
        v34 = v33 | v32;
        v20 = v33 + 0x100000000;
        if (v27 > (int)v32)
          v20 = v34;
        v35 = (v19 + 1);
        v36 = v19 & 0xFFFFFFFF00000000;
        v37 = v36 | v35;
        v19 = v36 + 0x100000000;
        if (v28 > (int)v35)
          v19 = v37;
        if (v21 + 1 >= v12)
          v38 = v22;
        else
          v38 = 0;
        v17 += v38 + 1;
        if (v21 + 1 < v12)
          ++v21;
        else
          v21 = 0;
      }
      while (v17 != v18);
    }
  }
  return a1;
}

void cva::assign<false,false,cva::Matrix<float,0u,0u,false>,cva::Matrix<float,0u,0u,false>,cva::MatrixTransposeExpr<cva::Matrix<float,0u,0u,false> const>>(uint64_t a1, uint64_t a2)
{
  void *v4;
  uint64_t v5;
  uint64_t v6;
  size_t v7;
  int v8;
  void *v9;
  size_t v10;
  size_t v11;
  int v12;
  void *v13;
  size_t v14;
  uint64_t v15;
  void *memptr;

  v4 = *(void **)a1;
  v5 = *(_QWORD *)(a2 + 8);
  v6 = **(_QWORD **)(a2 + 16);
  if (*(void **)v5 == v4 || *(void **)v6 == v4)
  {
    v7 = (4 * (*(_DWORD *)(v6 + 16) * *(_DWORD *)(v5 + 16)) + 31) & 0x7FFFFFFE0;
    v14 = v7 >> 2;
    memptr = 0;
    malloc_type_posix_memalign(&memptr, 0x20uLL, v7, 0x49090899uLL);
    v13 = memptr;
    v8 = *(_DWORD *)(**(_QWORD **)(a2 + 16) + 16);
    LODWORD(v15) = *(_DWORD *)(*(_QWORD *)(a2 + 8) + 16);
    HIDWORD(v15) = v8;
    cva::assign<false,false,cva::Matrix<float,0u,0u,false>,cva::Matrix<float,0u,0u,false>,cva::MatrixTransposeExpr<cva::Matrix<float,0u,0u,false> const>>(&v13, a2);
    v9 = *(void **)a1;
    v10 = *(_QWORD *)(a1 + 8);
    v11 = v14;
    *(_QWORD *)a1 = v13;
    *(_QWORD *)(a1 + 8) = v11;
    v13 = v9;
    v14 = v10;
    *(_QWORD *)(a1 + 16) = v15;
    v15 = 0;
    free(v9);
  }
  else if (*(_DWORD *)(v5 + 20) * *(_DWORD *)(v5 + 16) && *(_DWORD *)(v6 + 16) * *(_DWORD *)(v6 + 20))
  {
    cva::VecLib<float>::gemm();
  }
  else
  {
    v12 = *(_DWORD *)(a1 + 20);
    if (v12 * *(_DWORD *)(a1 + 16))
      bzero(v4, 4 * (v12 * *(_DWORD *)(a1 + 16)));
  }
}

void sub_1B6D3ABC4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13)
{
  free(a13);
  _Unwind_Resume(a1);
}

void cva::assign<false,false,cva::Matrix<float,0u,0u,false>,cva::MatrixMultExpr<cva::DiagonalMatrixInverseExpr<cva::VectorAsDiagonalExpr<cva::Matrix<float,0u,1u,false>,0u,0u>>,cva::MatrixTransposeExpr<cva::Matrix<float,0u,0u,false>>>,cva::Matrix<float,0u,0u,false>>(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  void *v5;
  int ***v6;
  unsigned int v7;
  char *v8;
  int **v9;
  int **v10;
  int *v11;
  unsigned int v12;
  int v13;
  int v14;
  uint64_t v15;
  int v16;
  int v17;
  BOOL v18;
  char *v19;
  uint64_t v20;
  int v21;
  unsigned int v22;
  void *v23;
  int v24;
  size_t v25;
  int v26;
  char *v27;
  char *v28;
  int v29[2];
  char *v30;
  unsigned int v31;
  int v32;
  char v33;
  int v34;
  int v35;
  int ***v36;
  void *v37[3];
  void *memptr;
  char *v39;
  uint64_t v40;
  int **v41;

  v4 = *(_QWORD *)(a2 + 16);
  v5 = *(void **)a1;
  if (*(void **)v4 == v5)
  {
    v25 = (4 * (*(_DWORD *)(v4 + 20) * *(_DWORD *)(***(_QWORD ***)(a2 + 8) + 4)) + 31) & 0x7FFFFFFE0;
    v39 = (char *)(v25 >> 2);
    v37[0] = 0;
    malloc_type_posix_memalign(v37, 0x20uLL, v25, 0x49090899uLL);
    memptr = v37[0];
    v26 = *(_DWORD *)(*(_QWORD *)(a2 + 16) + 20);
    LODWORD(v40) = *(_DWORD *)(***(_QWORD ***)(a2 + 8) + 4);
    HIDWORD(v40) = v26;
    cva::assign<false,false,cva::Matrix<float,0u,0u,false>,cva::MatrixMultExpr<cva::DiagonalMatrixInverseExpr<cva::VectorAsDiagonalExpr<cva::Matrix<float,0u,1u,false>,0u,0u>>,cva::MatrixTransposeExpr<cva::Matrix<float,0u,0u,false>>>,cva::Matrix<float,0u,0u,false>>(&memptr, a2);
    v23 = *(void **)a1;
    v27 = *(char **)(a1 + 8);
    v28 = v39;
    *(_QWORD *)a1 = memptr;
    *(_QWORD *)(a1 + 8) = v28;
    memptr = v23;
    v39 = v27;
    *(_QWORD *)(a1 + 16) = v40;
    v40 = 0;
LABEL_25:
    free(v23);
    return;
  }
  v6 = *(int ****)(a2 + 8);
  v7 = (*v6[1])[4] * (**v6)[1];
  if (v7 && *(_DWORD *)(v4 + 20) * *(_DWORD *)(v4 + 16))
  {
    memptr = 0;
    malloc_type_posix_memalign(&memptr, 0x20uLL, (4 * v7 + 31) & 0x7FFFFFFE0, 0x49090899uLL);
    v8 = (char *)memptr;
    v9 = *v6;
    v10 = v6[1];
    v11 = **v6;
    v12 = v11[1];
    v13 = (*v10)[4];
    v41 = v9;
    v14 = *v11;
    if (*v11 >= v12)
      v14 = v12;
    v37[0] = (void *)__PAIR64__(v13, v14);
    v37[1] = v10;
    v37[2] = 0;
    v34 = v14;
    v35 = v13;
    v36 = &v41;
    memptr = v37;
    v39 = &v33;
    v29[0] = v14;
    v29[1] = v13;
    v30 = v8;
    v31 = v12;
    v32 = 0;
    cva::MatrixRef<float,0u,0u,false>::operator=<cva::MatrixBinaryExpr<cva::MatrixSubExpr<cva::MatrixTransposeExpr<cva::Matrix<float,0u,0u,false>> const,0u,0u>,cva::MatrixRepeatExpr<cva::MatrixDiagonalExpr<cva::DiagonalMatrixInverseExpr<cva::VectorAsDiagonalExpr<cva::Matrix<float,0u,1u,false>,0u,0u>> const>,1u,0u>,cva::detail::MulOp>>(v29, (int **)&memptr);
    v15 = (*v10)[5];
    if (v12 > v15)
    {
      v16 = v12 - v15;
      v17 = (v12 - v15) * v13;
      v18 = v17 == 0;
      if (v17)
        v19 = &v8[4 * v15];
      else
        v19 = 0;
      v20 = (uint64_t)&v8[4 * v15 + 4 * v13 * v12];
      if (v18)
        v20 = 0;
      if (v19 != (char *)v20)
      {
        v21 = 0;
        do
        {
          *(_DWORD *)v19 = 0;
          if (v21 + 1 >= v16)
            v22 = v15;
          else
            v22 = 0;
          v19 += 4 * v22 + 4;
          if (v21 + 1 < v16)
            ++v21;
          else
            v21 = 0;
        }
        while (v19 != (char *)v20);
      }
    }
    cva::VecLib<float>::gemm();
    v23 = v8;
    goto LABEL_25;
  }
  v24 = *(_DWORD *)(a1 + 20);
  if (v24 * *(_DWORD *)(a1 + 16))
    bzero(v5, 4 * (v24 * *(_DWORD *)(a1 + 16)));
}

void sub_1B6D3AE44(_Unwind_Exception *a1)
{
  void *v1;

  free(v1);
  _Unwind_Resume(a1);
}

int *cva::MatrixRef<float,0u,0u,false>::operator=<cva::MatrixBinaryExpr<cva::MatrixSubExpr<cva::MatrixTransposeExpr<cva::Matrix<float,0u,0u,false>> const,0u,0u>,cva::MatrixRepeatExpr<cva::MatrixDiagonalExpr<cva::DiagonalMatrixInverseExpr<cva::VectorAsDiagonalExpr<cva::Matrix<float,0u,1u,false>,0u,0u>> const>,1u,0u>,cva::detail::MulOp>>(int *a1, int **a2)
{
  uint64_t v4;
  uint64_t v5;
  int *v6;
  uint64_t *v7;
  uint64_t v8;
  int *v9;
  float *v10;
  uint64_t v11;
  int v12;
  int v13;
  int v14;
  int v15;
  BOOL v16;
  float *v17;
  float *v18;
  unsigned int v19;
  unint64_t v20;
  int v21;
  unsigned int v22;
  int v23;
  int v24;
  int v25;
  unsigned int v26;
  int v27;
  int v28;
  float v29;
  float v30;
  float v31;
  uint64_t v32;
  unint64_t v33;
  unint64_t v34;
  unsigned int v35;
  uint64_t v36;
  int *v37;
  unsigned int v38;
  unint64_t v39;
  int *v40;
  int v41;
  int v42;
  uint64_t *v43;
  int v44;
  uint64_t v45;
  float *v46;
  unsigned int v47;
  uint64_t v48;
  int v49;
  int v50;
  uint64_t v51;
  float *v52;
  float v53;
  float v54;
  float v55;
  uint64_t v56;
  unint64_t v57;
  unint64_t v58;
  int v59;
  int v60;
  int v61;
  int v62;
  BOOL v63;
  _DWORD *v64;
  uint64_t v65;
  int v66;
  unsigned int v67;
  int *v68;
  int v69;
  unsigned int v70;
  void *memptr;

  v4 = *((_QWORD *)a1 + 1);
  v5 = v4 - 4 * a1[5];
  v6 = *a2;
  v7 = (uint64_t *)**((_QWORD **)*a2 + 1);
  v8 = *v7;
  if (*v7 == v5
    || (v9 = a2[1], v10 = (float *)**((_QWORD **)v9 + 2), v11 = **(_QWORD **)(*(_QWORD *)v10 + 8), v11 == v5))
  {
    v36 = (a1[1] * *a1);
    memptr = 0;
    malloc_type_posix_memalign(&memptr, 0x20uLL, (4 * v36 + 31) & 0x7FFFFFFE0, 0x49090899uLL);
    v37 = (int *)memptr;
    if ((_DWORD)v36)
    {
      v38 = 0;
      v39 = 0;
      v40 = a2[1];
      v41 = (*a2)[4];
      v42 = (*a2)[5];
      v43 = (uint64_t *)**((_QWORD **)*a2 + 1);
      v44 = *((_DWORD *)v43 + 4);
      v45 = *v43;
      v46 = (float *)**((_QWORD **)v40 + 2);
      v47 = *(_DWORD *)(*(_QWORD *)v46 + 4);
      if (**(_DWORD **)v46 < v47)
        v47 = **(_DWORD **)v46;
      v48 = **(_QWORD **)(*(_QWORD *)v46 + 8);
      v49 = **a2;
      v50 = v40[1];
      v51 = 4 * v36;
      v52 = (float *)memptr;
      do
      {
        v53 = *(float *)(v48 + 4 * (v38 % v47));
        v54 = fabsf(v53);
        v55 = 1.0 / v53;
        if (v54 < v46[2])
          v55 = 0.0;
        *v52++ = *(float *)(v45 + 4 * (v42 + HIDWORD(v39) + (v41 + v39) * v44)) * v55;
        v56 = (v39 + 1);
        v57 = v39 & 0xFFFFFFFF00000000;
        v58 = v57 | v56;
        v39 = v57 + 0x100000000;
        if (v49 > (int)v56)
          v39 = v58;
        if (v50 > (int)(v38 + 1))
          ++v38;
        else
          v38 = 0;
        v51 -= 4;
      }
      while (v51);
    }
    v59 = *a1;
    v60 = a1[1];
    v61 = v60 * *a1;
    v62 = a1[4];
    v63 = v61 == 0;
    if (v61)
      v64 = (_DWORD *)*((_QWORD *)a1 + 1);
    else
      v64 = 0;
    v65 = *((_QWORD *)a1 + 1) + 4 * (v62 * v60);
    if (v63)
      v65 = 0;
    if (v64 != (_DWORD *)v65)
    {
      v66 = 0;
      v67 = v62 - v59;
      v68 = v37;
      do
      {
        v69 = *v68++;
        *v64 = v69;
        if (v66 + 1 >= v59)
          v70 = v67;
        else
          v70 = 0;
        v64 += v70 + 1;
        if (v66 + 1 < v59)
          ++v66;
        else
          v66 = 0;
      }
      while (v64 != (_DWORD *)v65);
    }
    free(v37);
  }
  else
  {
    v12 = *a1;
    v13 = a1[1];
    v14 = v13 * *a1;
    v15 = a1[4];
    v16 = v14 == 0;
    if (v14)
      v17 = (float *)*((_QWORD *)a1 + 1);
    else
      v17 = 0;
    v18 = (float *)(v4 + 4 * (v15 * v13));
    if (v16)
      v18 = 0;
    if (v17 != v18)
    {
      v19 = 0;
      v20 = 0;
      v21 = 0;
      v22 = v15 - v12;
      v23 = v6[4];
      v24 = v6[5];
      v25 = *((_DWORD *)v7 + 4);
      v26 = **(_DWORD **)v10;
      if (v26 >= *(_DWORD *)(*(_QWORD *)v10 + 4))
        v26 = *(_DWORD *)(*(_QWORD *)v10 + 4);
      v27 = *v6;
      v28 = v9[1];
      do
      {
        v29 = *(float *)(v11 + 4 * (v19 % v26));
        v30 = fabsf(v29);
        v31 = 1.0 / v29;
        if (v30 < v10[2])
          v31 = 0.0;
        *v17 = *(float *)(v8 + 4 * (v24 + HIDWORD(v20) + (v23 + v20) * v25)) * v31;
        v32 = (v20 + 1);
        v33 = v20 & 0xFFFFFFFF00000000;
        v34 = v33 | v32;
        v20 = v33 + 0x100000000;
        if (v27 > (int)v32)
          v20 = v34;
        if (v28 > (int)(v19 + 1))
          ++v19;
        else
          v19 = 0;
        if (v21 + 1 >= v12)
          v35 = v22;
        else
          v35 = 0;
        v17 += v35 + 1;
        if (v21 + 1 < v12)
          ++v21;
        else
          v21 = 0;
      }
      while (v17 != v18);
    }
  }
  return a1;
}

void cva::assign<false,false,cva::Matrix<float,0u,0u,false>,cva::MatrixMultExpr<cva::MatrixTransposeExpr<cva::Matrix<float,0u,0u,false> const>,cva::DiagonalMatrixInverseExpr<cva::VectorAsDiagonalExpr<cva::Matrix<float,0u,1u,false>,0u,0u>>>,cva::MatrixTransposeExpr<cva::Matrix<float,0u,0u,false> const>>(uint64_t a1, uint64_t a2)
{
  void *v4;
  uint64_t v5;
  void **v6;
  unsigned int v7;
  char *v8;
  unsigned int **v9;
  void *v10;
  int v11;
  unsigned int *v12;
  unsigned int v13;
  unsigned int v14;
  unsigned int v15;
  int v16;
  char *v17;
  unsigned int v18;
  BOOL v19;
  char *v20;
  char *v21;
  void *v22;
  int v23;
  size_t v24;
  int v25;
  char *v26;
  char *v27;
  int v28[2];
  char *v29;
  int v30;
  int v31;
  unsigned int ***v32;
  char v33;
  int v34;
  unsigned int v35;
  unsigned int ****v36;
  void *v37[3];
  void *memptr;
  char *v39;
  uint64_t v40;
  unsigned int **v41;

  v4 = *(void **)a1;
  v5 = **(_QWORD **)(a2 + 16);
  if (*(void **)v5 == v4)
  {
    v24 = (4 * (*(_DWORD *)(v5 + 16) * *(_DWORD *)(***(_QWORD ***)(a2 + 8) + 20)) + 31) & 0x7FFFFFFE0;
    v39 = (char *)(v24 >> 2);
    v37[0] = 0;
    malloc_type_posix_memalign(v37, 0x20uLL, v24, 0x49090899uLL);
    memptr = v37[0];
    v25 = *(_DWORD *)(**(_QWORD **)(a2 + 16) + 16);
    LODWORD(v40) = *(_DWORD *)(***(_QWORD ***)(a2 + 8) + 20);
    HIDWORD(v40) = v25;
    cva::assign<false,false,cva::Matrix<float,0u,0u,false>,cva::MatrixMultExpr<cva::MatrixTransposeExpr<cva::Matrix<float,0u,0u,false> const>,cva::DiagonalMatrixInverseExpr<cva::VectorAsDiagonalExpr<cva::Matrix<float,0u,1u,false>,0u,0u>>>,cva::MatrixTransposeExpr<cva::Matrix<float,0u,0u,false> const>>(&memptr, a2);
    v22 = *(void **)a1;
    v26 = *(char **)(a1 + 8);
    v27 = v39;
    *(_QWORD *)a1 = memptr;
    *(_QWORD *)(a1 + 8) = v27;
    memptr = v22;
    v39 = v26;
    *(_QWORD *)(a1 + 16) = v40;
    v40 = 0;
LABEL_18:
    free(v22);
    return;
  }
  v6 = *(void ***)(a2 + 8);
  v7 = **(_DWORD **)v6[1] * *(_DWORD *)(*(_QWORD *)*v6 + 20);
  if (v7 && *(_DWORD *)(v5 + 16) * *(_DWORD *)(v5 + 20))
  {
    memptr = 0;
    malloc_type_posix_memalign(&memptr, 0x20uLL, (4 * v7 + 31) & 0x7FFFFFFE0, 0x49090899uLL);
    v8 = (char *)memptr;
    v10 = *v6;
    v9 = (unsigned int **)v6[1];
    v11 = *(_DWORD *)(*(_QWORD *)*v6 + 20);
    v12 = *v9;
    v13 = **v9;
    v41 = v9;
    v14 = v12[1];
    if (v13 < v14)
      v14 = v13;
    v37[0] = (void *)__PAIR64__(v14, v11);
    v37[1] = v10;
    v37[2] = 0;
    v32 = &v41;
    v34 = v11;
    v35 = v14;
    v36 = &v32;
    memptr = v37;
    v39 = &v33;
    v28[0] = v11;
    v28[1] = v14;
    v29 = v8;
    v30 = v11;
    v31 = 0;
    cva::MatrixRef<float,0u,0u,false>::operator=<cva::MatrixBinaryExpr<cva::MatrixSubExpr<cva::MatrixTransposeExpr<cva::Matrix<float,0u,0u,false>> const,0u,0u>,cva::MatrixRepeatExpr<cva::MatrixTransposeExpr<cva::MatrixDiagonalExpr<cva::DiagonalMatrixInverseExpr<cva::VectorAsDiagonalExpr<cva::Matrix<float,0u,1u,false>,0u,0u>> const> const>,0u,1u>,cva::detail::MulOp>>(v28, (int **)&memptr);
    v15 = *(_DWORD *)(*(_QWORD *)v10 + 16);
    v16 = v13 - v15;
    if (v13 > v15)
    {
      v17 = &v8[4 * v15 * v11];
      v18 = v16 * v11;
      v19 = v18 == 0;
      if (v18)
        v20 = v17;
      else
        v20 = 0;
      v21 = &v17[4 * v18];
      if (v19)
        v21 = 0;
      if (v20 != v21)
        bzero(v20, (v21 - v20) & 0xFFFFFFFFFFFFFFFCLL);
    }
    cva::VecLib<float>::gemm();
    v22 = v8;
    goto LABEL_18;
  }
  v23 = *(_DWORD *)(a1 + 20);
  if (v23 * *(_DWORD *)(a1 + 16))
    bzero(v4, 4 * (v23 * *(_DWORD *)(a1 + 16)));
}

void sub_1B6D3B380(_Unwind_Exception *a1)
{
  void *v1;

  free(v1);
  _Unwind_Resume(a1);
}

void cva::assign<false,false,cva::Matrix<float,0u,0u,false>,cva::MatrixMultExpr<cva::Matrix<float,0u,0u,false>,cva::MatrixTransposeExpr<cva::Matrix<float,0u,0u,false>>>,cva::Matrix<float,0u,0u,false>>(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  void *v5;
  _QWORD **v6;
  size_t v7;
  _DWORD *v8;
  _QWORD *v9;
  int v10;
  void *v11;
  uint64_t v12;
  size_t v13;
  int v14;
  size_t v15;
  size_t v16;
  void *v17[2];
  int v18;
  int v19;
  void *memptr;
  size_t v21;
  _QWORD *v22;
  int v23;
  uint64_t v24;

  v24 = *MEMORY[0x1E0C80C00];
  v4 = *(_QWORD *)(a2 + 16);
  v5 = *(void **)a1;
  if (*(void **)v4 == v5)
  {
    v12 = a2 + 8;
    v13 = (4 * (*(_DWORD *)(v4 + 20) * *(_DWORD *)(**(_QWORD **)(a2 + 8) + 16)) + 31) & 0x7FFFFFFE0;
    v21 = v13 >> 2;
    v17[0] = 0;
    malloc_type_posix_memalign(v17, 0x20uLL, v13, 0x49090899uLL);
    memptr = v17[0];
    v14 = *(_DWORD *)(*(_QWORD *)(a2 + 16) + 20);
    LODWORD(v22) = *(_DWORD *)(**(_QWORD **)v12 + 16);
    HIDWORD(v22) = v14;
    cva::assign<false,false,cva::Matrix<float,0u,0u,false>,cva::MatrixMultExpr<cva::Matrix<float,0u,0u,false>,cva::MatrixTransposeExpr<cva::Matrix<float,0u,0u,false>>>,cva::Matrix<float,0u,0u,false>>(&memptr, a2);
    v11 = *(void **)a1;
    v15 = *(_QWORD *)(a1 + 8);
    v16 = v21;
    *(_QWORD *)a1 = memptr;
    *(_QWORD *)(a1 + 8) = v16;
    memptr = v11;
    v21 = v15;
    *(_QWORD *)(a1 + 16) = v22;
    v22 = 0;
    goto LABEL_8;
  }
  v6 = *(_QWORD ***)(a2 + 8);
  if (*(_DWORD *)(*v6[1] + 16) * *((_DWORD *)*v6 + 4) && *(_DWORD *)(v4 + 20) * *(_DWORD *)(v4 + 16))
  {
    v7 = (4 * (*(_DWORD *)(*v6[1] + 16) * *((_DWORD *)*v6 + 4)) + 31) & 0x7FFFFFFE0;
    v17[1] = (void *)(v7 >> 2);
    memptr = 0;
    malloc_type_posix_memalign(&memptr, 0x20uLL, v7, 0x49090899uLL);
    v17[0] = memptr;
    v8 = *v6;
    v9 = v6[1];
    v10 = *(_DWORD *)(*v9 + 16);
    v18 = *((_DWORD *)*v6 + 4);
    v19 = v10;
    v21 = (size_t)v8;
    v22 = v9;
    v23 = 1065353216;
    cva::assign<false,false,cva::Matrix<float,0u,0u,false>,cva::Matrix<float,0u,0u,false>,cva::MatrixTransposeExpr<cva::Matrix<float,0u,0u,false>>>((uint64_t)v17, (uint64_t)&memptr);
    cva::VecLib<float>::gemm();
    v11 = v17[0];
LABEL_8:
    free(v11);
    return;
  }
  if (*(_DWORD *)(a1 + 20) * *(_DWORD *)(a1 + 16))
    bzero(v5, 4 * (*(_DWORD *)(a1 + 20) * *(_DWORD *)(a1 + 16)));
}

void sub_1B6D3B5BC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, uint64_t a15, uint64_t a16)
{
  free(a13);
  _Unwind_Resume(a1);
}

void cva::assign<false,false,cva::Matrix<float,0u,0u,false>,cva::Matrix<float,0u,0u,false>,cva::MatrixTransposeExpr<cva::Matrix<float,0u,0u,false>>>(uint64_t a1, uint64_t a2)
{
  void *v4;
  uint64_t v5;
  uint64_t v6;
  size_t v7;
  int v8;
  void *v9;
  size_t v10;
  size_t v11;
  int v12;
  void *v13;
  size_t v14;
  uint64_t v15;
  void *memptr;

  v4 = *(void **)a1;
  v5 = *(_QWORD *)(a2 + 8);
  v6 = **(_QWORD **)(a2 + 16);
  if (*(void **)v5 == v4 || *(void **)v6 == v4)
  {
    v7 = (4 * (*(_DWORD *)(v6 + 16) * *(_DWORD *)(v5 + 16)) + 31) & 0x7FFFFFFE0;
    v14 = v7 >> 2;
    memptr = 0;
    malloc_type_posix_memalign(&memptr, 0x20uLL, v7, 0x49090899uLL);
    v13 = memptr;
    v8 = *(_DWORD *)(**(_QWORD **)(a2 + 16) + 16);
    LODWORD(v15) = *(_DWORD *)(*(_QWORD *)(a2 + 8) + 16);
    HIDWORD(v15) = v8;
    cva::assign<false,false,cva::Matrix<float,0u,0u,false>,cva::Matrix<float,0u,0u,false>,cva::MatrixTransposeExpr<cva::Matrix<float,0u,0u,false>>>(&v13, a2);
    v9 = *(void **)a1;
    v10 = *(_QWORD *)(a1 + 8);
    v11 = v14;
    *(_QWORD *)a1 = v13;
    *(_QWORD *)(a1 + 8) = v11;
    v13 = v9;
    v14 = v10;
    *(_QWORD *)(a1 + 16) = v15;
    v15 = 0;
    free(v9);
  }
  else if (*(_DWORD *)(v5 + 20) * *(_DWORD *)(v5 + 16) && *(_DWORD *)(v6 + 16) * *(_DWORD *)(v6 + 20))
  {
    cva::VecLib<float>::gemm();
  }
  else
  {
    v12 = *(_DWORD *)(a1 + 20);
    if (v12 * *(_DWORD *)(a1 + 16))
      bzero(v4, 4 * (v12 * *(_DWORD *)(a1 + 16)));
  }
}

void sub_1B6D3B718(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13)
{
  free(a13);
  _Unwind_Resume(a1);
}

void cva::assign<false,false,cva::Matrix<float,0u,1u,false>,cva::Matrix<float,0u,0u,false>,cva::MatrixBinaryExpr<cva::Matrix<float,6u,1u,false>,cva::MatrixMultExpr<cva::Matrix<float,0u,0u,false>,cva::Matrix<float,0u,0u,false>>,cva::detail::SubOp>>(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  size_t v9;
  void *v10;
  size_t v11;
  size_t v12;
  uint64_t v13;
  void *v14;
  size_t v15;
  uint64_t v16;
  void *memptr;

  v4 = *(_QWORD *)(a2 + 8);
  if (*(_QWORD *)v4 == *(_QWORD *)a1)
  {
    v9 = (4 * *(unsigned int *)(v4 + 16) + 31) & 0x7FFFFFFE0;
    v15 = v9 >> 2;
    memptr = 0;
    malloc_type_posix_memalign(&memptr, 0x20uLL, v9, 0x49090899uLL);
    v14 = memptr;
    LODWORD(v16) = *(_DWORD *)(*(_QWORD *)(a2 + 8) + 16);
    cva::assign<false,false,cva::Matrix<float,0u,1u,false>,cva::Matrix<float,0u,0u,false>,cva::MatrixBinaryExpr<cva::Matrix<float,6u,1u,false>,cva::MatrixMultExpr<cva::Matrix<float,0u,0u,false>,cva::Matrix<float,0u,0u,false>>,cva::detail::SubOp>>(&v14, a2);
    v10 = *(void **)a1;
    v11 = *(_QWORD *)(a1 + 8);
    v12 = v15;
    *(_QWORD *)a1 = v14;
    *(_QWORD *)(a1 + 8) = v12;
    v14 = v10;
    v15 = v11;
    *(_DWORD *)(a1 + 16) = v16;
    LODWORD(v16) = 0;
    free(v10);
  }
  else if (*(_DWORD *)(v4 + 20) * *(_DWORD *)(v4 + 16))
  {
    v5 = 0;
    v6 = *(uint64_t **)(a2 + 16);
    v15 = 0;
    v16 = 0;
    v14 = 0;
    v7 = *v6;
    v8 = v6[1];
    do
    {
      *(float *)((char *)&v14 + v5) = *(float *)(v7 + v5) - *(float *)(v8 + v5);
      v5 += 4;
    }
    while (v5 != 24);
    cva::VecLib<float>::gemv();
  }
  else
  {
    v13 = *(unsigned int *)(a1 + 16);
    if ((_DWORD)v13)
      bzero(*(void **)a1, 4 * v13);
  }
}

void sub_1B6D3B860(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11)
{
  free(a11);
  _Unwind_Resume(a1);
}

void sub_1B6D3BBB4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1B6D3BF28(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, void *a11, void *a12)
{
  void *v12;
  void *v13;

  _Unwind_Resume(a1);
}

void sub_1B6D3C0F8(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  _Unwind_Resume(a1);
}

void VCPCNNModelEspresso::~VCPCNNModelEspresso(VCPCNNModelEspresso *this)
{
  if (*(_QWORD *)&this->_net.network_index)
    espresso_plan_destroy();
  CF<opaqueCMSampleBuffer *>::~CF((const void **)&this->_outputBlob.sequence_length);
  CF<opaqueCMSampleBuffer *>::~CF((const void **)&this->_outputBlob.height);
  std::shared_ptr<VCPImageHumanPoseAnalyzer>::~shared_ptr[abi:ne180100]((uint64_t)this);
}

uint64_t VCPCNNModelEspresso::LoadModel(_QWORD *a1, uint64_t a2)
{
  __CFBundle *BundleWithIdentifier;
  CFURLRef v5;
  int v6;
  const UInt8 *v7;
  CFIndex v8;
  uint64_t v9;
  std::__shared_weak_count *size;
  unint64_t *v11;
  unint64_t v12;
  uint64_t plan;
  std::string v15;
  const __CFString *v16;
  const __CFURL *v17;
  const void *v18[5];

  memset(&v18[1], 0, 24);
  BundleWithIdentifier = CFBundleGetBundleWithIdentifier(CFSTR("com.apple.MediaAnalysis"));
  if (!BundleWithIdentifier)
    BundleWithIdentifier = CFBundleGetBundleWithIdentifier(CFSTR("com.apple.mediaanalysisd"));
  v5 = CFBundleCopyResourcesDirectoryURL(BundleWithIdentifier);
  v18[0] = v5;
  v6 = *(char *)(a2 + 23);
  if (v6 >= 0)
    v7 = (const UInt8 *)a2;
  else
    v7 = *(const UInt8 **)a2;
  if (v6 >= 0)
    v8 = *(unsigned __int8 *)(a2 + 23);
  else
    v8 = *(_QWORD *)(a2 + 8);
  v17 = CFURLCreateAbsoluteURLWithBytes(0, v7, v8, 0x8000100u, v5, 0);
  v16 = CFURLCopyPath(v17);
  CFString_GetString(v16, &v15);
  *(std::string *)&v18[1] = v15;
  CF<opaqueCMSampleBuffer *>::~CF((const void **)&v16);
  CF<opaqueCMSampleBuffer *>::~CF((const void **)&v17);
  CF<opaqueCMSampleBuffer *>::~CF(v18);
  if (*a1)
  {
    v9 = 0;
  }
  else
  {
    _ZNSt3__115allocate_sharedB8ne180100I21VCPCNNEspressoContextNS_9allocatorIS1_EEJEvEENS_10shared_ptrIT_EERKT0_DpOT1_(&v15);
    std::shared_ptr<VCPCNNEspressoContext>::operator=[abi:ne180100]((uint64_t)a1, (__int128 *)&v15);
    size = (std::__shared_weak_count *)v15.__r_.__value_.__l.__size_;
    if (v15.__r_.__value_.__l.__size_)
    {
      v11 = (unint64_t *)(v15.__r_.__value_.__l.__size_ + 8);
      do
        v12 = __ldaxr(v11);
      while (__stlxr(v12 - 1, v11));
      if (!v12)
      {
        ((void (*)(std::__shared_weak_count *))size->__on_zero_shared)(size);
        std::__shared_weak_count::__release_weak(size);
      }
    }
    if (*a1 && (plan = espresso_create_plan(), (a1[2] = plan) != 0))
    {
      v9 = espresso_plan_add_network();
      if (!(_DWORD)v9)
      {
        v9 = espresso_plan_build();
        if (!(_DWORD)v9)
        {
          v9 = espresso_network_bind_buffer();
          if (!(_DWORD)v9)
            v9 = espresso_network_bind_buffer();
        }
      }
    }
    else
    {
      v9 = 4294967188;
    }
  }
  if (SHIBYTE(v18[3]) < 0)
    operator delete((void *)v18[1]);
  return v9;
}

void sub_1B6D3C368(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, int a13, __int16 a14, char a15, char a16, int a17, __int16 a18, char a19, char a20,void *__p,uint64_t a22,int a23,__int16 a24,char a25,char a26)
{
  if (a26 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void CFString_GetString(const __CFString *a1@<X0>, std::string *a2@<X8>)
{
  CFIndex Length;
  CFIndex v5;
  std::string *p_b;
  std::string::size_type size;
  std::string *v8;
  char *v9;
  std::string __b;

  if (a1 && CFStringGetLength(a1))
  {
    Length = CFStringGetLength(a1);
    v5 = CFStringGetMaximumSizeForEncoding(Length, 0) + 1;
    std::string::basic_string[abi:ne180100](&__b, v5, 0);
    if ((__b.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      p_b = &__b;
    else
      p_b = (std::string *)__b.__r_.__value_.__r.__words[0];
    if (CFStringGetCString(a1, (char *)p_b, v5, 0))
    {
      size = HIBYTE(__b.__r_.__value_.__r.__words[2]);
      v8 = &__b;
      if ((__b.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
      {
        size = __b.__r_.__value_.__l.__size_;
        v8 = (std::string *)__b.__r_.__value_.__r.__words[0];
      }
      v9 = (char *)&v8[-1].__r_.__value_.__r.__words[2] + 7;
      while (size)
      {
        if (v9[size--])
        {
          if (size != -1)
            std::string::resize(&__b, size + 1, 0);
          break;
        }
      }
      *a2 = __b;
    }
    else
    {
      std::string::basic_string[abi:ne180100]<0>(a2, "");
      if (SHIBYTE(__b.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__b.__r_.__value_.__l.__data_);
    }
  }
  else
  {
    std::string::basic_string[abi:ne180100]<0>(a2, "");
  }
}

void sub_1B6D3C4F4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t std::shared_ptr<VCPCNNEspressoContext>::operator=[abi:ne180100](uint64_t a1, __int128 *a2)
{
  __int128 v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;

  v3 = *a2;
  *(_QWORD *)a2 = 0;
  *((_QWORD *)a2 + 1) = 0;
  v4 = *(std::__shared_weak_count **)(a1 + 8);
  *(_OWORD *)a1 = v3;
  if (v4)
  {
    p_shared_owners = (unint64_t *)&v4->__shared_owners_;
    do
      v6 = __ldaxr(p_shared_owners);
    while (__stlxr(v6 - 1, p_shared_owners));
    if (!v6)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
  return a1;
}

uint64_t _ZNSt3__115allocate_sharedB8ne180100I21VCPCNNEspressoContextNS_9allocatorIS1_EEJEvEENS_10shared_ptrIT_EERKT0_DpOT1_@<X0>(_QWORD *a1@<X8>)
{
  char *v2;
  uint64_t result;

  v2 = (char *)operator new(0x28uLL);
  result = _ZNSt3__120__shared_ptr_emplaceI21VCPCNNEspressoContextNS_9allocatorIS1_EEEC2B8ne180100IJES3_Li0EEES3_DpOT_((uint64_t)v2);
  *a1 = v2 + 24;
  a1[1] = v2;
  return result;
}

void sub_1B6D3C5B0(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t _ZNSt3__120__shared_ptr_emplaceI21VCPCNNEspressoContextNS_9allocatorIS1_EEEC2B8ne180100IJES3_Li0EEES3_DpOT_(uint64_t a1)
{
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)a1 = &unk_1E6B14510;
  *(_QWORD *)(a1 + 8) = 0;
  VCPCNNEspressoContext::VCPCNNEspressoContext((VCPCNNEspressoContext *)(a1 + 24));
  return a1;
}

void sub_1B6D3C5FC(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;

  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<VCPCNNEspressoContext>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1E6B14510;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<VCPCNNEspressoContext>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1E6B14510;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1BCCA12BCLL);
}

void std::__shared_ptr_emplace<VCPCNNEspressoContext>::__on_zero_shared(uint64_t a1)
{
  VCPCNNEspressoContext::~VCPCNNEspressoContext((VCPCNNEspressoContext *)(a1 + 24));
}

void sub_1B6D3C770(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;

  v6 = v5;

  _Unwind_Resume(a1);
}

void sub_1B6D3C900(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  _Unwind_Resume(a1);
}

void MAImageComputeResult::MAImageComputeResult(MAImageComputeResult *this)
{
  *(_QWORD *)this = off_1E6B13D40;
  *((_QWORD *)this + 1) = 0;
  *((_QWORD *)this + 2) = 0;
  *((_QWORD *)this + 3) = 0;
}

void MAImageComputeResult::~MAImageComputeResult(MAImageComputeResult *this)
{
  void **v2;

  *(_QWORD *)this = off_1E6B13D40;
  v2 = (void **)((char *)this + 8);
  std::vector<std::unique_ptr<VCPProtoImageHumanPoseResult>>::__destroy_vector::operator()[abi:ne180100](&v2);
  PB::Base::~Base(this);
}

{
  void **v2;

  *(_QWORD *)this = off_1E6B13D40;
  v2 = (void **)((char *)this + 8);
  std::vector<std::unique_ptr<VCPProtoImageHumanPoseResult>>::__destroy_vector::operator()[abi:ne180100](&v2);
  PB::Base::~Base(this);
  MEMORY[0x1BCCA12BC]();
}

uint64_t MAImageComputeResult::formatText(MAImageComputeResult *this, PB::TextFormatter *a2, const char *a3)
{
  uint64_t *v5;
  uint64_t *v6;
  uint64_t v7;

  PB::TextFormatter::beginObject(a2, a3);
  v5 = (uint64_t *)*((_QWORD *)this + 1);
  v6 = (uint64_t *)*((_QWORD *)this + 2);
  while (v5 != v6)
  {
    v7 = *v5++;
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v7 + 32))(v7, a2, "humanPoseResults");
  }
  PB::TextFormatter::format(a2, "version");
  return PB::TextFormatter::endObject(a2);
}

uint64_t MAImageComputeResult::readFrom(MAImageComputeResult *this, PB::Reader *a2)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  VCPProtoImageHumanPoseResult ***v8;
  uint64_t v9;
  char v10;
  unsigned int v11;
  unint64_t v12;
  unint64_t v13;
  char v14;
  BOOL v15;
  char v16;
  unsigned int v17;
  unint64_t v18;
  unint64_t v19;
  char v20;
  BOOL v21;
  char v22;
  unsigned int v23;
  uint64_t v24;
  unint64_t v25;
  char v26;
  uint64_t v27;
  uint64_t result;
  char v29;
  unsigned int v30;
  unint64_t v31;
  char v32;

  v3 = *((_QWORD *)a2 + 1);
  v2 = *((_QWORD *)a2 + 2);
  v4 = *((unsigned __int8 *)a2 + 24);
  if (v3 < v2 && v4 == 0)
  {
    v8 = (VCPProtoImageHumanPoseResult ***)((char *)this + 8);
    while (1)
    {
      v9 = *(_QWORD *)a2;
      if (v3 > 0xFFFFFFFFFFFFFFF5 || v3 + 10 > v2)
        break;
      v10 = 0;
      v11 = 0;
      v12 = 0;
      while (1)
      {
        v13 = v3 + 1;
        *((_QWORD *)a2 + 1) = v3 + 1;
        v14 = *(_BYTE *)(v9 + v3);
        v12 |= (unint64_t)(v14 & 0x7F) << v10;
        if ((v14 & 0x80) == 0)
          break;
        v10 += 7;
        v3 = v13;
        v15 = v11++ > 8;
        if (v15)
        {
          v12 = 0;
          break;
        }
      }
LABEL_23:
      if ((v12 & 7) == 4)
      {
        v4 = 0;
        return v4 == 0;
      }
      if ((v12 >> 3) == 2)
      {
        PB::PtrVector<VCPProtoImageHumanPoseResult>::emplace_back<>(v8);
        v27 = *(_QWORD *)(*((_QWORD *)this + 2) - 8);
        if (!PB::Reader::placeMark()
          || ((*(uint64_t (**)(uint64_t, PB::Reader *))(*(_QWORD *)v27 + 16))(v27, a2) & 1) == 0)
        {
          return 0;
        }
        PB::Reader::recallMark();
      }
      else if ((v12 >> 3) == 1)
      {
        if (v13 > 0xFFFFFFFFFFFFFFF5 || v13 + 10 > v2)
        {
          v29 = 0;
          v30 = 0;
          v24 = 0;
          if (v2 <= v13)
            v2 = v13;
          while (v2 != v13)
          {
            v31 = v13 + 1;
            v32 = *(_BYTE *)(v9 + v13);
            *((_QWORD *)a2 + 1) = v31;
            v24 |= (unint64_t)(v32 & 0x7F) << v29;
            if ((v32 & 0x80) == 0)
              goto LABEL_46;
            v29 += 7;
            v13 = v31;
            v21 = v30++ >= 9;
            if (v21)
            {
LABEL_44:
              LODWORD(v24) = 0;
              goto LABEL_46;
            }
          }
          LODWORD(v24) = 0;
          *((_BYTE *)a2 + 24) = 1;
        }
        else
        {
          v22 = 0;
          v23 = 0;
          v24 = 0;
          while (1)
          {
            v25 = v13 + 1;
            *((_QWORD *)a2 + 1) = v13 + 1;
            v26 = *(_BYTE *)(v9 + v13);
            v24 |= (unint64_t)(v26 & 0x7F) << v22;
            if ((v26 & 0x80) == 0)
              break;
            v22 += 7;
            v13 = v25;
            v15 = v23++ > 8;
            if (v15)
              goto LABEL_44;
          }
        }
LABEL_46:
        *((_DWORD *)this + 8) = v24;
      }
      else
      {
        result = PB::Reader::skip(a2);
        if (!(_DWORD)result)
          return result;
      }
      v3 = *((_QWORD *)a2 + 1);
      v2 = *((_QWORD *)a2 + 2);
      v4 = *((unsigned __int8 *)a2 + 24);
      if (v3 >= v2 || v4 != 0)
        return v4 == 0;
    }
    v16 = 0;
    v17 = 0;
    v12 = 0;
    if (v3 <= v2)
      v18 = v2;
    else
      v18 = v3;
    while (v18 != v3)
    {
      v19 = v3++;
      v20 = *(_BYTE *)(v9 + v19);
      *((_QWORD *)a2 + 1) = v3;
      v12 |= (unint64_t)(v20 & 0x7F) << v16;
      if ((v20 & 0x80) == 0)
        goto LABEL_22;
      v16 += 7;
      v21 = v17++ >= 9;
      if (v21)
      {
        v12 = 0;
LABEL_22:
        v13 = v19 + 1;
        goto LABEL_23;
      }
    }
    v4 = 1;
    *((_BYTE *)a2 + 24) = 1;
  }
  return v4 == 0;
}

uint64_t MAImageComputeResult::writeTo(MAImageComputeResult *this, PB::Writer *a2)
{
  uint64_t result;
  const PB::Base **v5;
  const PB::Base **v6;
  const PB::Base *v7;

  result = PB::Writer::writeVarInt(a2);
  v6 = (const PB::Base **)*((_QWORD *)this + 1);
  v5 = (const PB::Base **)*((_QWORD *)this + 2);
  while (v6 != v5)
  {
    v7 = *v6++;
    result = PB::Writer::writeSubmessage(a2, v7);
  }
  return result;
}

void std::vector<std::unique_ptr<VCPProtoImageHumanPoseResult>>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  void **v1;
  _QWORD *v2;
  _QWORD *v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;

  v1 = *a1;
  v2 = **a1;
  if (v2)
  {
    v4 = v1[1];
    v5 = **a1;
    if (v4 != v2)
    {
      do
      {
        v7 = *--v4;
        v6 = v7;
        *v4 = 0;
        if (v7)
          (*(void (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
      }
      while (v4 != v2);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

uint64_t ma::DescriptorSegment::GenerateDescriptor(void ***this, __CVBuffer *a2)
{
  uint64_t result;

  result = VCPImageDescriptorWrapper::Initialize(this + 9, a2);
  if (!(_DWORD)result)
    return VCPSceneprintDescriptorWrapper::Initialize(this + 10, a2);
  return result;
}

uint64_t ma::DescriptorSegment::Compare(id **this, const ma::DescriptorSegment *a2, float *a3, int a4)
{
  uint64_t result;

  if (a4)
  {
    result = VCPImageDescriptorWrapper::Compare(this + 10, (const ma::DescriptorSegment *)((char *)a2 + 80), a3);
    if ((_DWORD)result)
      return result;
  }
  else
  {
    result = VCPImageDescriptorWrapper::Compare(this + 9, (const ma::DescriptorSegment *)((char *)a2 + 72), a3);
    if ((_DWORD)result)
      return result;
  }
  return 0;
}

uint64_t ma::DescriptorSegment::SerializeImageprintDescriptor(id **this)
{
  return VCPImageDescriptorWrapper::Serialize(this + 9);
}

uint64_t ma::DescriptorSegment::SerializeSceneprintDescriptor(id **this)
{
  return VCPImageDescriptorWrapper::Serialize(this + 10);
}

void sub_1B6D3D504(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1B6D3DF1C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, void *a15, void *a16, uint64_t a17, void *a18, uint64_t a19, uint64_t a20,void *a21,uint64_t a22,uint64_t a23,void *a24)
{
  void *v24;

  _Unwind_Resume(a1);
}

void sub_1B6D3E268(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_1B6D3E340(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1B6D3E50C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_1B6D3E5D4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

BOOL VCPProtoFilesystemMovieAudioClassificationResultReadFrom(uint64_t a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  char v14;
  uint64_t v16;
  int v17;
  uint64_t v19;
  unint64_t v20;
  int v21;
  uint64_t v22;
  unint64_t v23;
  int *v24;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) < *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
  {
    v7 = (int *)MEMORY[0x1E0D82BB8];
    while (1)
    {
      if (*(_BYTE *)(a2 + *v5))
        return *(_BYTE *)(a2 + *v5) == 0;
      v8 = 0;
      v9 = 0;
      v10 = 0;
      while (1)
      {
        v11 = *v3;
        v12 = *(_QWORD *)(a2 + v11);
        v13 = v12 + 1;
        if (v12 == -1 || v13 > *(_QWORD *)(a2 + *v4))
          break;
        v14 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
        *(_QWORD *)(a2 + v11) = v13;
        v10 |= (unint64_t)(v14 & 0x7F) << v8;
        if ((v14 & 0x80) == 0)
          goto LABEL_12;
        v8 += 7;
        if (v9++ >= 9)
        {
          v10 = 0;
          v16 = *v5;
          v17 = *(unsigned __int8 *)(a2 + v16);
          goto LABEL_14;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
      v16 = *v5;
      v17 = *(unsigned __int8 *)(a2 + v16);
      if (*(_BYTE *)(a2 + v16))
        v10 = 0;
LABEL_14:
      if (v17 || (v10 & 7) == 4)
        return *(_BYTE *)(a2 + *v5) == 0;
      if ((v10 >> 3) == 2)
        break;
      if ((v10 >> 3) == 1)
      {
        v19 = *v3;
        v20 = *(_QWORD *)(a2 + v19);
        if (v20 <= 0xFFFFFFFFFFFFFFFBLL && v20 + 4 <= *(_QWORD *)(a2 + *v4))
        {
          v21 = *(_DWORD *)(*(_QWORD *)(a2 + *v7) + v20);
          *(_QWORD *)(a2 + v19) = v20 + 4;
        }
        else
        {
          *(_BYTE *)(a2 + v16) = 1;
          v21 = 0;
        }
        v24 = &OBJC_IVAR___VCPProtoFilesystemMovieAudioClassificationResult__start;
LABEL_32:
        *(_DWORD *)(a1 + *v24) = v21;
        goto LABEL_33;
      }
      if ((PBReaderSkipValueWithTag() & 1) == 0)
        return 0;
LABEL_33:
      if (*(_QWORD *)(a2 + *v3) >= *(_QWORD *)(a2 + *v4))
        return *(_BYTE *)(a2 + *v5) == 0;
    }
    v22 = *v3;
    v23 = *(_QWORD *)(a2 + v22);
    if (v23 <= 0xFFFFFFFFFFFFFFFBLL && v23 + 4 <= *(_QWORD *)(a2 + *v4))
    {
      v21 = *(_DWORD *)(*(_QWORD *)(a2 + *v7) + v23);
      *(_QWORD *)(a2 + v22) = v23 + 4;
    }
    else
    {
      *(_BYTE *)(a2 + v16) = 1;
      v21 = 0;
    }
    v24 = &OBJC_IVAR___VCPProtoFilesystemMovieAudioClassificationResult__duration;
    goto LABEL_32;
  }
  return *(_BYTE *)(a2 + *v5) == 0;
}

void sub_1B6D3EF34(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1B6D3F04C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1B6D3F1AC(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1B6D3F3B0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, void *a11, void *a12)
{
  void *v12;

  _Unwind_Resume(a1);
}

void sub_1B6D3FEF4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11, void *a12, uint64_t a13, uint64_t a14, uint64_t a15, void *a16, void *a17, void *a18, void *a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,const void *a42)
{

  CF<opaqueCMSampleBuffer *>::~CF(&a42);
  _Unwind_Resume(a1);
}

void sub_1B6D4020C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;

  v7 = v6;

  _Unwind_Resume(a1);
}

void sub_1B6D403D4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;

  v6 = v3;

  _Unwind_Resume(a1);
}

void sub_1B6D406C0(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;

  _Unwind_Resume(a1);
}

void sub_1B6D409B4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;

  _Unwind_Resume(a1);
}

uint64_t MADProtoSceneAssetReadFrom(char *a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  char v14;
  BOOL v15;
  uint64_t v16;
  int v17;
  uint64_t v19;
  uint64_t v20;
  uint64_t result;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  char v25;
  unsigned int v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  char v31;
  uint64_t v32;
  unint64_t v33;
  MADProtoSceneClassification *v34;
  uint64_t v35;
  unint64_t v36;
  int v37;
  uint64_t v38;
  unint64_t v39;
  uint64_t v40;
  unint64_t v41;
  uint64_t v42;
  unint64_t v43;
  uint64_t v44;
  unint64_t v45;
  uint64_t v46;
  unint64_t v47;
  uint64_t v48;
  unint64_t v49;
  uint64_t v50;
  unint64_t v51;
  uint64_t v52;
  unint64_t v53;
  uint64_t v54;
  unint64_t v55;
  uint64_t v56;
  unint64_t v57;
  uint64_t v58;
  unint64_t v59;
  uint64_t v60;
  unint64_t v61;
  uint64_t v62;
  unint64_t v63;
  uint64_t v64;
  unint64_t v65;
  uint64_t v66;
  unint64_t v67;
  uint64_t v68;
  unint64_t v69;
  uint64_t v70;
  unint64_t v71;
  uint64_t v72;
  unint64_t v73;
  uint64_t v74;
  unint64_t v75;
  uint64_t v76;
  unint64_t v77;
  uint64_t v78;
  unint64_t v79;
  uint64_t v80;
  uint64_t v81;
  unint64_t v82;
  uint64_t v83;
  unint64_t v84;
  uint64_t v85;
  unint64_t v86;
  char v87;
  unsigned int v88;
  uint64_t v89;
  uint64_t v90;
  unint64_t v91;
  char v92;
  uint64_t v93;
  unint64_t v94;
  void *v95;
  uint64_t v96;
  unint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) >= *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
    return *(_BYTE *)(a2 + *v5) == 0;
  v7 = (int *)MEMORY[0x1E0D82BB8];
  while (2)
  {
    if (*(_BYTE *)(a2 + *v5))
      return *(_BYTE *)(a2 + *v5) == 0;
    v8 = 0;
    v9 = 0;
    v10 = 0;
    while (1)
    {
      v11 = *v3;
      v12 = *(_QWORD *)(a2 + v11);
      v13 = v12 + 1;
      if (v12 == -1 || v13 > *(_QWORD *)(a2 + *v4))
        break;
      v14 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
      *(_QWORD *)(a2 + v11) = v13;
      v10 |= (unint64_t)(v14 & 0x7F) << v8;
      if ((v14 & 0x80) == 0)
        goto LABEL_12;
      v8 += 7;
      v15 = v9++ >= 9;
      if (v15)
      {
        v10 = 0;
        v16 = *v5;
        v17 = *(unsigned __int8 *)(a2 + v16);
        goto LABEL_14;
      }
    }
    *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
    v16 = *v5;
    v17 = *(unsigned __int8 *)(a2 + v16);
    if (*(_BYTE *)(a2 + v16))
      v10 = 0;
LABEL_14:
    if (v17 || (v10 & 7) == 4)
      return *(_BYTE *)(a2 + *v5) == 0;
    switch((v10 >> 3))
    {
      case 1u:
        PBReaderReadString();
        v19 = objc_claimAutoreleasedReturnValue();
        v20 = 40;
        goto LABEL_134;
      case 2u:
        v22 = *v3;
        v23 = *(_QWORD *)(a2 + v22);
        if (v23 <= 0xFFFFFFFFFFFFFFF7 && v23 + 8 <= *(_QWORD *)(a2 + *v4))
        {
          v24 = *(_QWORD *)(*(_QWORD *)(a2 + *v7) + v23);
          *(_QWORD *)(a2 + v22) = v23 + 8;
        }
        else
        {
          *(_BYTE *)(a2 + v16) = 1;
          v24 = 0;
        }
        v99 = 16;
        goto LABEL_151;
      case 3u:
        v25 = 0;
        v26 = 0;
        v27 = 0;
        while (2)
        {
          v28 = *v3;
          v29 = *(_QWORD *)(a2 + v28);
          v30 = v29 + 1;
          if (v29 == -1 || v30 > *(_QWORD *)(a2 + *v4))
          {
            *(_BYTE *)(a2 + *v5) = 1;
          }
          else
          {
            v31 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v29);
            *(_QWORD *)(a2 + v28) = v30;
            v27 |= (unint64_t)(v31 & 0x7F) << v25;
            if (v31 < 0)
            {
              v25 += 7;
              v15 = v26++ >= 9;
              if (v15)
              {
                LODWORD(v27) = 0;
                goto LABEL_141;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(a2 + *v5))
          LODWORD(v27) = 0;
LABEL_141:
        v98 = 32;
        goto LABEL_146;
      case 4u:
        v32 = *v3;
        v33 = *(_QWORD *)(a2 + v32);
        if (v33 <= 0xFFFFFFFFFFFFFFF7 && v33 + 8 <= *(_QWORD *)(a2 + *v4))
        {
          v24 = *(_QWORD *)(*(_QWORD *)(a2 + *v7) + v33);
          *(_QWORD *)(a2 + v32) = v33 + 8;
        }
        else
        {
          *(_BYTE *)(a2 + v16) = 1;
          v24 = 0;
        }
        v99 = 8;
LABEL_151:
        *(_QWORD *)&a1[v99] = v24;
        goto LABEL_207;
      case 5u:
        v34 = objc_alloc_init(MADProtoSceneClassification);
        objc_msgSend(a1, "addSceneClassifications:", v34);
        if (!PBReaderPlaceMark() || (MADProtoSceneClassificationReadFrom((uint64_t)v34, a2) & 1) == 0)
          goto LABEL_209;
        goto LABEL_110;
      case 6u:
        v35 = *v3;
        v36 = *(_QWORD *)(a2 + v35);
        if (v36 <= 0xFFFFFFFFFFFFFFFBLL && v36 + 4 <= *(_QWORD *)(a2 + *v4))
        {
          v37 = *(_DWORD *)(*(_QWORD *)(a2 + *v7) + v36);
          *(_QWORD *)(a2 + v35) = v36 + 4;
        }
        else
        {
          *(_BYTE *)(a2 + v16) = 1;
          v37 = 0;
        }
        v100 = 128;
        goto LABEL_206;
      case 7u:
        v38 = *v3;
        v39 = *(_QWORD *)(a2 + v38);
        if (v39 <= 0xFFFFFFFFFFFFFFFBLL && v39 + 4 <= *(_QWORD *)(a2 + *v4))
        {
          v37 = *(_DWORD *)(*(_QWORD *)(a2 + *v7) + v39);
          *(_QWORD *)(a2 + v38) = v39 + 4;
        }
        else
        {
          *(_BYTE *)(a2 + v16) = 1;
          v37 = 0;
        }
        v100 = 216;
        goto LABEL_206;
      case 8u:
        v40 = *v3;
        v41 = *(_QWORD *)(a2 + v40);
        if (v41 <= 0xFFFFFFFFFFFFFFFBLL && v41 + 4 <= *(_QWORD *)(a2 + *v4))
        {
          v37 = *(_DWORD *)(*(_QWORD *)(a2 + *v7) + v41);
          *(_QWORD *)(a2 + v40) = v41 + 4;
        }
        else
        {
          *(_BYTE *)(a2 + v16) = 1;
          v37 = 0;
        }
        v100 = 212;
        goto LABEL_206;
      case 9u:
        v42 = *v3;
        v43 = *(_QWORD *)(a2 + v42);
        if (v43 <= 0xFFFFFFFFFFFFFFFBLL && v43 + 4 <= *(_QWORD *)(a2 + *v4))
        {
          v37 = *(_DWORD *)(*(_QWORD *)(a2 + *v7) + v43);
          *(_QWORD *)(a2 + v42) = v43 + 4;
        }
        else
        {
          *(_BYTE *)(a2 + v16) = 1;
          v37 = 0;
        }
        v100 = 204;
        goto LABEL_206;
      case 0xAu:
        v44 = *v3;
        v45 = *(_QWORD *)(a2 + v44);
        if (v45 <= 0xFFFFFFFFFFFFFFFBLL && v45 + 4 <= *(_QWORD *)(a2 + *v4))
        {
          v37 = *(_DWORD *)(*(_QWORD *)(a2 + *v7) + v45);
          *(_QWORD *)(a2 + v44) = v45 + 4;
        }
        else
        {
          *(_BYTE *)(a2 + v16) = 1;
          v37 = 0;
        }
        v100 = 200;
        goto LABEL_206;
      case 0xBu:
        v46 = *v3;
        v47 = *(_QWORD *)(a2 + v46);
        if (v47 <= 0xFFFFFFFFFFFFFFFBLL && v47 + 4 <= *(_QWORD *)(a2 + *v4))
        {
          v37 = *(_DWORD *)(*(_QWORD *)(a2 + *v7) + v47);
          *(_QWORD *)(a2 + v46) = v47 + 4;
        }
        else
        {
          *(_BYTE *)(a2 + v16) = 1;
          v37 = 0;
        }
        v100 = 220;
        goto LABEL_206;
      case 0xCu:
        v48 = *v3;
        v49 = *(_QWORD *)(a2 + v48);
        if (v49 <= 0xFFFFFFFFFFFFFFFBLL && v49 + 4 <= *(_QWORD *)(a2 + *v4))
        {
          v37 = *(_DWORD *)(*(_QWORD *)(a2 + *v7) + v49);
          *(_QWORD *)(a2 + v48) = v49 + 4;
        }
        else
        {
          *(_BYTE *)(a2 + v16) = 1;
          v37 = 0;
        }
        v100 = 140;
        goto LABEL_206;
      case 0xDu:
        v50 = *v3;
        v51 = *(_QWORD *)(a2 + v50);
        if (v51 <= 0xFFFFFFFFFFFFFFFBLL && v51 + 4 <= *(_QWORD *)(a2 + *v4))
        {
          v37 = *(_DWORD *)(*(_QWORD *)(a2 + *v7) + v51);
          *(_QWORD *)(a2 + v50) = v51 + 4;
        }
        else
        {
          *(_BYTE *)(a2 + v16) = 1;
          v37 = 0;
        }
        v100 = 156;
        goto LABEL_206;
      case 0xEu:
        v52 = *v3;
        v53 = *(_QWORD *)(a2 + v52);
        if (v53 <= 0xFFFFFFFFFFFFFFFBLL && v53 + 4 <= *(_QWORD *)(a2 + *v4))
        {
          v37 = *(_DWORD *)(*(_QWORD *)(a2 + *v7) + v53);
          *(_QWORD *)(a2 + v52) = v53 + 4;
        }
        else
        {
          *(_BYTE *)(a2 + v16) = 1;
          v37 = 0;
        }
        v100 = 88;
        goto LABEL_206;
      case 0xFu:
        v54 = *v3;
        v55 = *(_QWORD *)(a2 + v54);
        if (v55 <= 0xFFFFFFFFFFFFFFFBLL && v55 + 4 <= *(_QWORD *)(a2 + *v4))
        {
          v37 = *(_DWORD *)(*(_QWORD *)(a2 + *v7) + v55);
          *(_QWORD *)(a2 + v54) = v55 + 4;
        }
        else
        {
          *(_BYTE *)(a2 + v16) = 1;
          v37 = 0;
        }
        v100 = 108;
        goto LABEL_206;
      case 0x10u:
        v56 = *v3;
        v57 = *(_QWORD *)(a2 + v56);
        if (v57 <= 0xFFFFFFFFFFFFFFFBLL && v57 + 4 <= *(_QWORD *)(a2 + *v4))
        {
          v37 = *(_DWORD *)(*(_QWORD *)(a2 + *v7) + v57);
          *(_QWORD *)(a2 + v56) = v57 + 4;
        }
        else
        {
          *(_BYTE *)(a2 + v16) = 1;
          v37 = 0;
        }
        v100 = 160;
        goto LABEL_206;
      case 0x11u:
        v58 = *v3;
        v59 = *(_QWORD *)(a2 + v58);
        if (v59 <= 0xFFFFFFFFFFFFFFFBLL && v59 + 4 <= *(_QWORD *)(a2 + *v4))
        {
          v37 = *(_DWORD *)(*(_QWORD *)(a2 + *v7) + v59);
          *(_QWORD *)(a2 + v58) = v59 + 4;
        }
        else
        {
          *(_BYTE *)(a2 + v16) = 1;
          v37 = 0;
        }
        v100 = 144;
        goto LABEL_206;
      case 0x12u:
        v60 = *v3;
        v61 = *(_QWORD *)(a2 + v60);
        if (v61 <= 0xFFFFFFFFFFFFFFFBLL && v61 + 4 <= *(_QWORD *)(a2 + *v4))
        {
          v37 = *(_DWORD *)(*(_QWORD *)(a2 + *v7) + v61);
          *(_QWORD *)(a2 + v60) = v61 + 4;
        }
        else
        {
          *(_BYTE *)(a2 + v16) = 1;
          v37 = 0;
        }
        v100 = 96;
        goto LABEL_206;
      case 0x13u:
        v62 = *v3;
        v63 = *(_QWORD *)(a2 + v62);
        if (v63 <= 0xFFFFFFFFFFFFFFFBLL && v63 + 4 <= *(_QWORD *)(a2 + *v4))
        {
          v37 = *(_DWORD *)(*(_QWORD *)(a2 + *v7) + v63);
          *(_QWORD *)(a2 + v62) = v63 + 4;
        }
        else
        {
          *(_BYTE *)(a2 + v16) = 1;
          v37 = 0;
        }
        v100 = 148;
        goto LABEL_206;
      case 0x14u:
        v64 = *v3;
        v65 = *(_QWORD *)(a2 + v64);
        if (v65 <= 0xFFFFFFFFFFFFFFFBLL && v65 + 4 <= *(_QWORD *)(a2 + *v4))
        {
          v37 = *(_DWORD *)(*(_QWORD *)(a2 + *v7) + v65);
          *(_QWORD *)(a2 + v64) = v65 + 4;
        }
        else
        {
          *(_BYTE *)(a2 + v16) = 1;
          v37 = 0;
        }
        v100 = 152;
        goto LABEL_206;
      case 0x15u:
        v66 = *v3;
        v67 = *(_QWORD *)(a2 + v66);
        if (v67 <= 0xFFFFFFFFFFFFFFFBLL && v67 + 4 <= *(_QWORD *)(a2 + *v4))
        {
          v37 = *(_DWORD *)(*(_QWORD *)(a2 + *v7) + v67);
          *(_QWORD *)(a2 + v66) = v67 + 4;
        }
        else
        {
          *(_BYTE *)(a2 + v16) = 1;
          v37 = 0;
        }
        v100 = 116;
        goto LABEL_206;
      case 0x16u:
        v68 = *v3;
        v69 = *(_QWORD *)(a2 + v68);
        if (v69 <= 0xFFFFFFFFFFFFFFFBLL && v69 + 4 <= *(_QWORD *)(a2 + *v4))
        {
          v37 = *(_DWORD *)(*(_QWORD *)(a2 + *v7) + v69);
          *(_QWORD *)(a2 + v68) = v69 + 4;
        }
        else
        {
          *(_BYTE *)(a2 + v16) = 1;
          v37 = 0;
        }
        v100 = 84;
        goto LABEL_206;
      case 0x17u:
        v70 = *v3;
        v71 = *(_QWORD *)(a2 + v70);
        if (v71 <= 0xFFFFFFFFFFFFFFFBLL && v71 + 4 <= *(_QWORD *)(a2 + *v4))
        {
          v37 = *(_DWORD *)(*(_QWORD *)(a2 + *v7) + v71);
          *(_QWORD *)(a2 + v70) = v71 + 4;
        }
        else
        {
          *(_BYTE *)(a2 + v16) = 1;
          v37 = 0;
        }
        v100 = 136;
        goto LABEL_206;
      case 0x18u:
        v72 = *v3;
        v73 = *(_QWORD *)(a2 + v72);
        if (v73 <= 0xFFFFFFFFFFFFFFFBLL && v73 + 4 <= *(_QWORD *)(a2 + *v4))
        {
          v37 = *(_DWORD *)(*(_QWORD *)(a2 + *v7) + v73);
          *(_QWORD *)(a2 + v72) = v73 + 4;
        }
        else
        {
          *(_BYTE *)(a2 + v16) = 1;
          v37 = 0;
        }
        v100 = 100;
        goto LABEL_206;
      case 0x19u:
        v74 = *v3;
        v75 = *(_QWORD *)(a2 + v74);
        if (v75 <= 0xFFFFFFFFFFFFFFFBLL && v75 + 4 <= *(_QWORD *)(a2 + *v4))
        {
          v37 = *(_DWORD *)(*(_QWORD *)(a2 + *v7) + v75);
          *(_QWORD *)(a2 + v74) = v75 + 4;
        }
        else
        {
          *(_BYTE *)(a2 + v16) = 1;
          v37 = 0;
        }
        v100 = 104;
        goto LABEL_206;
      case 0x1Au:
        v76 = *v3;
        v77 = *(_QWORD *)(a2 + v76);
        if (v77 <= 0xFFFFFFFFFFFFFFFBLL && v77 + 4 <= *(_QWORD *)(a2 + *v4))
        {
          v37 = *(_DWORD *)(*(_QWORD *)(a2 + *v7) + v77);
          *(_QWORD *)(a2 + v76) = v77 + 4;
        }
        else
        {
          *(_BYTE *)(a2 + v16) = 1;
          v37 = 0;
        }
        v100 = 132;
        goto LABEL_206;
      case 0x1Bu:
        v78 = *v3;
        v79 = *(_QWORD *)(a2 + v78);
        if (v79 <= 0xFFFFFFFFFFFFFFFBLL && v79 + 4 <= *(_QWORD *)(a2 + *v4))
        {
          v37 = *(_DWORD *)(*(_QWORD *)(a2 + *v7) + v79);
          *(_QWORD *)(a2 + v78) = v79 + 4;
        }
        else
        {
          *(_BYTE *)(a2 + v16) = 1;
          v37 = 0;
        }
        v100 = 112;
        goto LABEL_206;
      case 0x1Cu:
        v34 = objc_alloc_init(VCPProtoBounds);
        v80 = 168;
        goto LABEL_106;
      case 0x1Du:
        v34 = objc_alloc_init(VCPProtoBounds);
        v80 = 24;
LABEL_106:
        objc_storeStrong((id *)&a1[v80], v34);
        goto LABEL_108;
      case 0x1Eu:
        v34 = objc_alloc_init(VCPProtoBounds);
        objc_msgSend(a1, "addObjectSaliencyRects:", v34);
LABEL_108:
        if (PBReaderPlaceMark() && VCPProtoBoundsReadFrom((uint64_t)v34, a2))
        {
LABEL_110:
          PBReaderRecallMark();

LABEL_207:
          if (*(_QWORD *)(a2 + *v3) >= *(_QWORD *)(a2 + *v4))
            return *(_BYTE *)(a2 + *v5) == 0;
          continue;
        }
LABEL_209:

        return 0;
      case 0x1Fu:
        PBReaderReadData();
        v19 = objc_claimAutoreleasedReturnValue();
        v20 = 192;
        goto LABEL_134;
      case 0x20u:
        v81 = *v3;
        v82 = *(_QWORD *)(a2 + v81);
        if (v82 <= 0xFFFFFFFFFFFFFFFBLL && v82 + 4 <= *(_QWORD *)(a2 + *v4))
        {
          v37 = *(_DWORD *)(*(_QWORD *)(a2 + *v7) + v82);
          *(_QWORD *)(a2 + v81) = v82 + 4;
        }
        else
        {
          *(_BYTE *)(a2 + v16) = 1;
          v37 = 0;
        }
        v100 = 208;
        goto LABEL_206;
      case 0x21u:
        PBReaderReadData();
        v19 = objc_claimAutoreleasedReturnValue();
        v20 = 56;
        goto LABEL_134;
      case 0x22u:
        v83 = *v3;
        v84 = *(_QWORD *)(a2 + v83);
        if (v84 <= 0xFFFFFFFFFFFFFFFBLL && v84 + 4 <= *(_QWORD *)(a2 + *v4))
        {
          v37 = *(_DWORD *)(*(_QWORD *)(a2 + *v7) + v84);
          *(_QWORD *)(a2 + v83) = v84 + 4;
        }
        else
        {
          *(_BYTE *)(a2 + v16) = 1;
          v37 = 0;
        }
        v100 = 48;
        goto LABEL_206;
      case 0x23u:
        v85 = *v3;
        v86 = *(_QWORD *)(a2 + v85);
        if (v86 <= 0xFFFFFFFFFFFFFFFBLL && v86 + 4 <= *(_QWORD *)(a2 + *v4))
        {
          v37 = *(_DWORD *)(*(_QWORD *)(a2 + *v7) + v86);
          *(_QWORD *)(a2 + v85) = v86 + 4;
        }
        else
        {
          *(_BYTE *)(a2 + v16) = 1;
          v37 = 0;
        }
        v100 = 80;
        goto LABEL_206;
      case 0x24u:
        v87 = 0;
        v88 = 0;
        v27 = 0;
        while (2)
        {
          v89 = *v3;
          v90 = *(_QWORD *)(a2 + v89);
          v91 = v90 + 1;
          if (v90 == -1 || v91 > *(_QWORD *)(a2 + *v4))
          {
            *(_BYTE *)(a2 + *v5) = 1;
          }
          else
          {
            v92 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v90);
            *(_QWORD *)(a2 + v89) = v91;
            v27 |= (unint64_t)(v92 & 0x7F) << v87;
            if (v92 < 0)
            {
              v87 += 7;
              v15 = v88++ >= 9;
              if (v15)
              {
                LODWORD(v27) = 0;
                goto LABEL_145;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(a2 + *v5))
          LODWORD(v27) = 0;
LABEL_145:
        v98 = 176;
LABEL_146:
        *(_DWORD *)&a1[v98] = v27;
        goto LABEL_207;
      case 0x25u:
        v93 = *v3;
        v94 = *(_QWORD *)(a2 + v93);
        if (v94 <= 0xFFFFFFFFFFFFFFFBLL && v94 + 4 <= *(_QWORD *)(a2 + *v4))
        {
          v37 = *(_DWORD *)(*(_QWORD *)(a2 + *v7) + v94);
          *(_QWORD *)(a2 + v93) = v94 + 4;
        }
        else
        {
          *(_BYTE *)(a2 + v16) = 1;
          v37 = 0;
        }
        v100 = 180;
        goto LABEL_206;
      case 0x26u:
        PBReaderReadData();
        v19 = objc_claimAutoreleasedReturnValue();
        v20 = 72;
        goto LABEL_134;
      case 0x27u:
        PBReaderReadData();
        v19 = objc_claimAutoreleasedReturnValue();
        v20 = 64;
LABEL_134:
        v95 = *(void **)&a1[v20];
        *(_QWORD *)&a1[v20] = v19;

        goto LABEL_207;
      case 0x28u:
        v96 = *v3;
        v97 = *(_QWORD *)(a2 + v96);
        if (v97 <= 0xFFFFFFFFFFFFFFFBLL && v97 + 4 <= *(_QWORD *)(a2 + *v4))
        {
          v37 = *(_DWORD *)(*(_QWORD *)(a2 + *v7) + v97);
          *(_QWORD *)(a2 + v96) = v97 + 4;
        }
        else
        {
          *(_BYTE *)(a2 + v16) = 1;
          v37 = 0;
        }
        v100 = 92;
LABEL_206:
        *(_DWORD *)&a1[v100] = v37;
        goto LABEL_207;
      default:
        result = PBReaderSkipValueWithTag();
        if (!(_DWORD)result)
          return result;
        goto LABEL_207;
    }
  }
}

void sub_1B6D45198(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, void *a11, void *a12, void *a13, void *a14, void *a15, void *a16, void *a17, void *a18)
{
  void *v18;
  void *v19;
  void *v20;
  void *v21;
  void *v22;

  _Unwind_Resume(a1);
}

void sub_1B6D45778(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;

  _Unwind_Resume(a1);
}

void sub_1B6D45970(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  v4 = v3;

  _Unwind_Resume(a1);
}

void sub_1B6D45A64(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  v4 = v3;

  _Unwind_Resume(a1);
}

BOOL VCPProtoBoundsReadFrom(uint64_t a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  char v14;
  uint64_t v16;
  int v17;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  unint64_t v27;
  int *v28;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) < *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
  {
    v7 = (int *)MEMORY[0x1E0D82BB8];
    while (1)
    {
      if (*(_BYTE *)(a2 + *v5))
        return *(_BYTE *)(a2 + *v5) == 0;
      v8 = 0;
      v9 = 0;
      v10 = 0;
      while (1)
      {
        v11 = *v3;
        v12 = *(_QWORD *)(a2 + v11);
        v13 = v12 + 1;
        if (v12 == -1 || v13 > *(_QWORD *)(a2 + *v4))
          break;
        v14 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
        *(_QWORD *)(a2 + v11) = v13;
        v10 |= (unint64_t)(v14 & 0x7F) << v8;
        if ((v14 & 0x80) == 0)
          goto LABEL_12;
        v8 += 7;
        if (v9++ >= 9)
        {
          v10 = 0;
          v16 = *v5;
          v17 = *(unsigned __int8 *)(a2 + v16);
          goto LABEL_14;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
      v16 = *v5;
      v17 = *(unsigned __int8 *)(a2 + v16);
      if (*(_BYTE *)(a2 + v16))
        v10 = 0;
LABEL_14:
      if (v17 || (v10 & 7) == 4)
        return *(_BYTE *)(a2 + *v5) == 0;
      switch((v10 >> 3))
      {
        case 1u:
          v19 = *v3;
          v20 = *(_QWORD *)(a2 + v19);
          if (v20 <= 0xFFFFFFFFFFFFFFF7 && v20 + 8 <= *(_QWORD *)(a2 + *v4))
          {
            v21 = *(_QWORD *)(*(_QWORD *)(a2 + *v7) + v20);
            *(_QWORD *)(a2 + v19) = v20 + 8;
          }
          else
          {
            *(_BYTE *)(a2 + v16) = 1;
            v21 = 0;
          }
          v28 = &OBJC_IVAR___VCPProtoBounds__x0;
          goto LABEL_41;
        case 2u:
          v22 = *v3;
          v23 = *(_QWORD *)(a2 + v22);
          if (v23 <= 0xFFFFFFFFFFFFFFF7 && v23 + 8 <= *(_QWORD *)(a2 + *v4))
          {
            v21 = *(_QWORD *)(*(_QWORD *)(a2 + *v7) + v23);
            *(_QWORD *)(a2 + v22) = v23 + 8;
          }
          else
          {
            *(_BYTE *)(a2 + v16) = 1;
            v21 = 0;
          }
          v28 = &OBJC_IVAR___VCPProtoBounds__y0;
          goto LABEL_41;
        case 3u:
          v24 = *v3;
          v25 = *(_QWORD *)(a2 + v24);
          if (v25 <= 0xFFFFFFFFFFFFFFF7 && v25 + 8 <= *(_QWORD *)(a2 + *v4))
          {
            v21 = *(_QWORD *)(*(_QWORD *)(a2 + *v7) + v25);
            *(_QWORD *)(a2 + v24) = v25 + 8;
          }
          else
          {
            *(_BYTE *)(a2 + v16) = 1;
            v21 = 0;
          }
          v28 = &OBJC_IVAR___VCPProtoBounds__width;
          goto LABEL_41;
        case 4u:
          v26 = *v3;
          v27 = *(_QWORD *)(a2 + v26);
          if (v27 <= 0xFFFFFFFFFFFFFFF7 && v27 + 8 <= *(_QWORD *)(a2 + *v4))
          {
            v21 = *(_QWORD *)(*(_QWORD *)(a2 + *v7) + v27);
            *(_QWORD *)(a2 + v26) = v27 + 8;
          }
          else
          {
            *(_BYTE *)(a2 + v16) = 1;
            v21 = 0;
          }
          v28 = &OBJC_IVAR___VCPProtoBounds__height;
LABEL_41:
          *(_QWORD *)(a1 + *v28) = v21;
          goto LABEL_42;
        default:
          if ((PBReaderSkipValueWithTag() & 1) == 0)
            return 0;
LABEL_42:
          if (*(_QWORD *)(a2 + *v3) >= *(_QWORD *)(a2 + *v4))
            return *(_BYTE *)(a2 + *v5) == 0;
          break;
      }
    }
  }
  return *(_BYTE *)(a2 + *v5) == 0;
}

ma::ObstructionSegment *ma::ObstructionSegment::ObstructionSegment(ma::ObstructionSegment *this)
{
  ma::Segment *v2;
  CMTime v4;

  v2 = ma::Segment::Segment(this);
  *(_QWORD *)v2 = &unk_1E6B14038;
  *((_QWORD *)v2 + 9) = 1065353216;
  v4 = *(CMTime *)*(_QWORD *)&MEMORY[0x1E0CA2E18];
  ma::Segment::SetStart(v2, -1, &v4);
  return this;
}

double ma::ObstructionSegment::Reset(ma::ObstructionSegment *this)
{
  double result;
  CMTime v3;

  ma::Segment::Reset(this);
  v3 = *(CMTime *)*(_QWORD *)&MEMORY[0x1E0CA2E18];
  ma::Segment::SetStart(this, -1, &v3);
  *(_QWORD *)&result = 1065353216;
  *((_QWORD *)this + 9) = 1065353216;
  return result;
}

float ma::ObstructionSegment::UpdateStats(ma::ObstructionSegment *this, float result)
{
  int v2;

  if (result >= 0.0)
  {
    result = *((float *)this + 19) + result;
    v2 = *((_DWORD *)this + 5) + 1;
    *((_DWORD *)this + 5) = v2;
    *((float *)this + 18) = 1.0 - sqrtf(result / (float)v2);
    *((float *)this + 19) = result;
  }
  return result;
}

float ma::ObstructionSegment::ResetStats(ma::ObstructionSegment *this, float result)
{
  int v2;

  *((_DWORD *)this + 19) = 0;
  if (result >= 0.0)
  {
    result = result + 0.0;
    v2 = *((_DWORD *)this + 5) + 1;
    *((_DWORD *)this + 5) = v2;
    *((float *)this + 18) = 1.0 - sqrtf(result / (float)v2);
    *((float *)this + 19) = result;
  }
  return result;
}

uint64_t ma::ObstructionSegment::TrackingStarted(ma::ObstructionSegment *this)
{
  return *((_DWORD *)this + 9) & 1;
}

BOOL ma::ObstructionSegment::IsValid(ma::ObstructionSegment *this)
{
  CMTime v3;
  CMTime time1;

  time1 = *(CMTime *)((_BYTE *)this + 2);
  v3.epoch = 0;
  *(_OWORD *)&v3.value = ma::ObstructionSegment::IsValid(void)::kMinDuration;
  return CMTimeCompare(&time1, &v3) >= 1 && *((float *)this + 18) < 0.96;
}

void ma::ObstructionSegment::~ObstructionSegment(ma::ObstructionSegment *this)
{
  JUMPOUT(0x1BCCA12BCLL);
}

id VCPBlendShapeLocationFromIndex(unint64_t a1)
{
  if (a1 > 0x32)
    return 0;
  else
    return off_1E6B171A0[a1]->isa;
}

void sub_1B6D46A38(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1B6D472FC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *a16, void *a17)
{
  void *v17;
  void *v18;

  _Unwind_Resume(a1);
}

double LossFuncExpr(uint64_t *a1, uint64_t a2, char *__src, const float *a4, uint64_t a5, int a6)
{
  uint64_t v10;
  uint64_t v11;
  float v12;
  char *v13;
  uint64_t i;
  uint64_t v15;
  float v16;
  uint64_t v17;
  float *v18;
  float v19;
  float v20;
  float v21;
  uint64_t v22;
  float v23;
  float v24;
  float __C;
  float v27;
  float v28;
  uint64_t __B;
  int v30;
  int v31;
  _BYTE __dst[960];
  uint64_t v33;

  v10 = 0;
  v33 = *MEMORY[0x1E0C80C00];
  v11 = *a1;
  do
  {
    v12 = *(double *)(v11 + 8 * v10);
    *(float *)&__dst[4 * v10++ + 756] = v12;
  }
  while (v10 != 51);
  v13 = __src + 756;
  memcpy(__dst, __src, 0x2F4uLL);
  for (i = 0; i != 51; ++i)
  {
    v15 = 0;
    v16 = *(float *)&__dst[4 * i + 756];
    do
    {
      *(float *)&__dst[v15] = *(float *)&__dst[v15] + (float)(*(float *)&v13[v15] * v16);
      v15 += 4;
    }
    while (v15 != 756);
    v13 += 756;
  }
  v17 = 0;
  v18 = (float *)(a5 + 4);
  v19 = 0.0;
  do
  {
    __B = *(_QWORD *)&__dst[v17];
    v30 = *(_DWORD *)&__dst[v17 + 8];
    v31 = 1065353216;
    matrix_multiplication(a4, (const float *)&__B, &__C, 3, 4, 1);
    v20 = (float)(__C / v28) - *(v18 - 1);
    v21 = *v18;
    v18 += 2;
    v19 = (float)(v19 + (float)(v20 * v20))
        + (float)((float)((float)(v27 / v28) - v21) * (float)((float)(v27 / v28) - v21));
    v17 += 12;
  }
  while (v17 != 756);
  v22 = 0;
  v23 = 100.0;
  if (!a6)
    v23 = 0.0;
  do
  {
    v24 = 100.0;
    if (v22 != 80)
      v24 = 0.01;
    v19 = (float)(v19 + (float)((float)(*(float *)&__dst[v22 + 756] * *(float *)&__dst[v22 + 756]) * v24))
        + (float)((float)((float)(*(float *)&__dst[v22 + 756] - *(float *)(a2 + v22))
                        * (float)(*(float *)&__dst[v22 + 756] - *(float *)(a2 + v22)))
                * v23);
    v22 += 4;
  }
  while (v22 != 204);
  return (float)(v19 * 0.5);
}

uint64_t CloseFormDerivativeLossExpr@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, char *a3@<X2>, const float *a4@<X3>, uint64_t a5@<X4>, int a6@<W5>, uint64_t *a7@<X8>)
{
  uint64_t v9;
  uint64_t v10;
  float v11;
  char *v12;
  uint64_t i;
  uint64_t v14;
  float v15;
  uint64_t v16;
  float v17;
  _BYTE *v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  const float *v23;
  float32x2_t v24;
  float32x2_t v25;
  float32x2_t v26;
  float v27;
  float32x2_t v28;
  float32x2_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t result;
  float v37[51];
  float v38[51];
  float v39[51];
  uint64_t v40[77];
  float32x2_t __C;
  uint64_t v42;
  uint64_t __B;
  int v44;
  int v45;
  _BYTE v46[216];
  _BYTE __dst[960];
  uint64_t v48;

  v9 = 0;
  v48 = *MEMORY[0x1E0C80C00];
  v10 = *a1;
  do
  {
    v11 = *(double *)(v10 + 8 * v9);
    *(float *)&__dst[4 * v9++ + 756] = v11;
  }
  while (v9 != 51);
  v12 = a3 + 756;
  memcpy(__dst, a3, 0x2F4uLL);
  for (i = 0; i != 51; ++i)
  {
    v14 = 0;
    v15 = *(float *)&__dst[4 * i + 756];
    do
    {
      *(float *)&__dst[v14] = *(float *)&__dst[v14] + (float)(*(float *)&v12[v14] * v15);
      v14 += 4;
    }
    while (v14 != 756);
    v12 += 756;
  }
  v16 = 0;
  if (a6)
    v17 = 100.0;
  else
    v17 = 0.0;
  memset(v46, 0, 204);
  do
  {
    v18 = &__dst[12 * v16];
    __B = *(_QWORD *)v18;
    v44 = *((_DWORD *)v18 + 2);
    v45 = 1065353216;
    matrix_multiplication(a4, (const float *)&__B, (float *)&__C, 3, 4, 1);
    v19 = 0;
    v20 = (uint64_t)&a3[12 * v16 + 756];
    do
    {
      v21 = (char *)v40 + v19;
      *(_QWORD *)v21 = *(_QWORD *)v20;
      *((_DWORD *)v21 + 2) = *(_DWORD *)(v20 + 8);
      v20 += 756;
      v19 += 12;
    }
    while (v19 != 612);
    matrix_inplace_transpose((float *)v40, 51, 3);
    matrix_multiplication(a4, (const float *)v40, v39, 1, 3, 51);
    matrix_multiplication(a4 + 4, (const float *)v40, v38, 1, 3, 51);
    matrix_multiplication(a4 + 8, (const float *)v40, v37, 1, 3, 51);
    v22 = 0;
    v23 = (const float *)&v42;
    v24 = __C;
    v25 = vld1_dup_f32(v23);
    v26 = vdiv_f32(vdiv_f32(vsub_f32(vdiv_f32(__C, v25), *(float32x2_t *)(a5 + 8 * v16)), v25), v25);
    do
    {
      v27 = 100.0;
      if (v22 != 20)
        v27 = 0.01;
      v28.f32[0] = v39[v22];
      v28.f32[1] = v38[v22];
      v29 = vmul_f32(vsub_f32(vmul_f32(v25, v28), vmul_n_f32(v24, v37[v22])), v26);
      v39[v22] = v29.f32[0];
      v38[v22] = v29.f32[1];
      *(float *)&v46[v22 * 4] = (float)((float)((float)(v29.f32[0] + *(float *)&v46[v22 * 4]) + v29.f32[1])
                                      + (float)(v27 * *(float *)&__dst[v22 * 4 + 756]))
                              + (float)(v17 * (float)(*(float *)&__dst[v22 * 4 + 756] - *(float *)(a2 + v22 * 4)));
      ++v22;
    }
    while (v22 != 51);
    ++v16;
  }
  while (v16 != 63);
  v40[1] = (uint64_t)&unk_1E6B14270;
  v30 = operator new[]();
  v31 = 0;
  v40[0] = v30;
  do
  {
    *(double *)(v30 + 8 * v31) = *(float *)&v46[4 * v31];
    ++v31;
  }
  while (v31 != 51);
  dlib::matrix<double,0l,0l,dlib::memory_manager_stateless_kernel_1<char>,dlib::row_major_layout>::matrix<dlib::matrix<double,1l,51l,dlib::memory_manager_stateless_kernel_1<char>,dlib::row_major_layout>>(a7, v40);
  result = v40[0];
  if (v40[0])
    return MEMORY[0x1BCCA128C](v40[0], 0x1000C8000313F17);
  return result;
}

void sub_1B6D489B8(_Unwind_Exception *a1)
{
  if (STACK[0x298])
    MEMORY[0x1BCCA128C](STACK[0x298], 0x1000C8000313F17);
  _Unwind_Resume(a1);
}

double LossFuncProjectionMatrix(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  float v6;
  float v7;
  float v8;
  __float2 v9;
  __float2 v10;
  __float2 v11;
  float *v12;
  uint64_t i;
  float *v14;
  uint64_t v15;
  float v16;
  float v17;
  float v18;
  uint64_t v19;
  float *v20;
  float v21;
  float v22;
  float v23;
  float v25;
  float v26;
  float v27;
  uint64_t v28;
  int v29;
  int v30;
  float v31[12];
  float v32[12];
  float v33[9];
  float __C[9];
  float v35[3];
  __float2 v36;
  __int128 v37;
  float __B[3];
  uint64_t v39;
  int v40;
  float sinval;
  int v42;
  float v43;
  __int128 v44;
  float cosval;
  float v46;
  int v47;
  __float2 v48;
  uint64_t v49;

  v49 = *MEMORY[0x1E0C80C00];
  v6 = *(double *)*a1 / 180.0 * 3.14159265;
  v7 = *(double *)(*a1 + 8) / 180.0 * 3.14159265;
  v8 = *(double *)(*a1 + 16) / 180.0 * 3.14159265;
  v44 = xmmword_1B6FBC940;
  v9 = __sincosf_stret(v8);
  cosval = v9.__cosval;
  v46 = -v9.__sinval;
  v47 = 0;
  v48 = v9;
  v10 = __sincosf_stret(v7);
  __B[0] = v10.__cosval;
  __B[1] = 0.0;
  __B[2] = -v10.__sinval;
  v39 = 0x3F80000000000000;
  v40 = 0;
  sinval = v10.__sinval;
  v42 = 0;
  v43 = v10.__cosval;
  v11 = __sincosf_stret(v6);
  v35[0] = v11.__cosval;
  v35[1] = -v11.__sinval;
  v35[2] = 0.0;
  v36 = v11;
  v37 = xmmword_1B6FBD970;
  matrix_multiplication(v35, __B, __C, 3, 3, 3);
  v12 = v33;
  matrix_multiplication(__C, (const float *)&v44, v33, 3, 3, 3);
  for (i = 0; i != 12; i += 4)
  {
    v14 = &v31[i];
    *(_QWORD *)v14 = *(_QWORD *)v12;
    v14[2] = v12[2];
    v12 += 3;
  }
  v15 = *a1;
  v16 = *(double *)(*a1 + 24);
  v17 = *(double *)(*a1 + 32);
  v31[3] = v16;
  v31[7] = v17;
  v18 = *(double *)(v15 + 40);
  v31[11] = v18;
  matrix_multiplication((const float *)&intrinsic_matrix, v31, v32, 3, 3, 4);
  v19 = 0;
  v20 = (float *)(a2 + 4);
  v21 = 0.0;
  do
  {
    v28 = *(_QWORD *)(a3 + v19);
    v29 = *(_DWORD *)(a3 + v19 + 8);
    v30 = 1065353216;
    matrix_multiplication(v32, (const float *)&v28, &v25, 3, 4, 1);
    v22 = (float)(v25 / v27) - *(v20 - 1);
    v23 = *v20;
    v20 += 2;
    v21 = (float)(v21 + (float)(v22 * v22))
        + (float)((float)((float)(v26 / v27) - v23) * (float)((float)(v26 / v27) - v23));
    v19 += 12;
  }
  while (v19 != 756);
  return v21;
}

double LossFuncIdentity(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, int *a9, float *a10, float *a11)
{
  uint64_t *v11;
  const float *v12;
  float *v13;
  float *v14;
  const float *v15;
  const float *v16;
  uint64_t v17;
  uint64_t v18;
  const float *v19;
  const float *v20;
  const float *v21;
  const float *v22;
  uint64_t v23;
  uint64_t v24;
  float v25;
  uint64_t i;
  uint64_t v27;
  float *v28;
  float v29;
  float v30;
  float v31;
  uint64_t j;
  float v34;
  float v35;
  float v36;
  uint64_t __B;
  float v38;
  int v39;
  float __C[189];
  float v41[189];
  float v42;
  uint64_t v43;

  v11 = (uint64_t *)MEMORY[0x1E0C80A78]();
  v16 = v12;
  v18 = v17;
  v20 = v19;
  v22 = v21;
  v23 = 0;
  v43 = *MEMORY[0x1E0C80C00];
  v24 = *v11;
  do
  {
    v25 = *(double *)(v24 + 8 * v23);
    v12[v23++] = v25;
  }
  while (v23 != 501);
  CalculateBlendshapes(v12, v13, v14, 63, 501, 52, v15, a10, a11, a9, v41);
  matrix_multiplication(v22, &v42, __C, 1, 51, 189);
  for (i = 0; i != 189; ++i)
    __C[i] = v41[i] + __C[i];
  v27 = 0;
  v28 = (float *)(v18 + 4);
  v29 = 0.0;
  do
  {
    __B = *(_QWORD *)&__C[v27];
    v38 = __C[v27 + 2];
    v39 = 1065353216;
    matrix_multiplication(v20, (const float *)&__B, &v34, 3, 4, 1);
    v30 = (float)(v34 / v36) - *(v28 - 1);
    v31 = *v28;
    v28 += 2;
    v29 = (float)(v29 + (float)(v30 * v30))
        + (float)((float)((float)(v35 / v36) - v31) * (float)((float)(v35 / v36) - v31));
    v27 += 3;
  }
  while (v27 != 189);
  for (j = 0; j != 501; ++j)
    v29 = v29 + (float)((float)(v16[j] * v16[j]) * 10.0);
  return (float)(v29 * 0.5);
}

uint64_t CloseFormDerivativeLossIdentity(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, int *a9, float *a10, float *a11, const float *a12)
{
  uint64_t *v12;
  const float *v13;
  float *v14;
  float *v15;
  const float *v16;
  const float *v17;
  uint64_t v18;
  uint64_t *v19;
  const float *v20;
  const float *v21;
  const float *v22;
  const float *v23;
  uint64_t v24;
  uint64_t v25;
  float v26;
  uint64_t i;
  uint64_t j;
  float *v29;
  float *v30;
  uint64_t *v31;
  uint64_t v32;
  uint64_t v33;
  const float *v34;
  float32x2_t v35;
  float32x2_t v36;
  float32x2_t v37;
  float32x2_t v38;
  float32x2_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t result;
  uint64_t *v43;
  uint64_t v44;
  float *v45;
  float v46[501];
  float __C[501];
  float v48[501];
  float v49[1503];
  float v50[1503];
  uint64_t v51[752];
  float32x2_t v52;
  uint64_t v53;
  uint64_t v54;
  int v55;
  int v56;
  _BYTE v57[2004];
  float v58[189];
  float v59[189];
  float v60;
  uint64_t v61;

  v12 = (uint64_t *)MEMORY[0x1E0C80A78]();
  v45 = (float *)v16;
  v17 = v13;
  v43 = v19;
  v44 = v18;
  v21 = v20;
  v23 = v22;
  v24 = 0;
  v61 = *MEMORY[0x1E0C80C00];
  v25 = *v12;
  do
  {
    v26 = *(double *)(v25 + 8 * v24);
    v13[v24++] = v26;
  }
  while (v24 != 501);
  CalculateBlendshapes(v13, v14, v15, 63, 501, 52, v16, a10, a11, a9, v59);
  matrix_multiplication(v23, &v60, v58, 1, 51, 189);
  for (i = 0; i != 189; ++i)
    v58[i] = v59[i] + v58[i];
  bzero(v57, 0x7D4uLL);
  for (j = 0; j != 63; ++j)
  {
    v29 = &v58[3 * j];
    v54 = *(_QWORD *)v29;
    v55 = *((_DWORD *)v29 + 2);
    v56 = 1065353216;
    matrix_multiplication(v21, (const float *)&v54, (float *)&v52, 3, 4, 1);
    v30 = &a11[3 * j];
    v31 = v51;
    v32 = 501;
    do
    {
      *v31 = *(_QWORD *)v30;
      *((float *)v31 + 2) = v30[2];
      v30 += 189;
      v31 = (uint64_t *)((char *)v31 + 12);
      --v32;
    }
    while (v32);
    matrix_inplace_transpose((float *)v51, 501, 3);
    matrix_multiplication((const float *)v51, a12, v50, 3, 501, 501);
    matrix_multiplication(v50, v45, v49, 3, 501, 501);
    matrix_multiplication(v21, v49, __C, 1, 3, 501);
    matrix_multiplication(v21 + 4, v49, v46, 1, 3, 501);
    matrix_multiplication(v21 + 8, v49, v48, 1, 3, 501);
    v33 = 0;
    v34 = (const float *)&v53;
    v35 = v52;
    v36 = vld1_dup_f32(v34);
    v37 = vdiv_f32(vdiv_f32(vsub_f32(vdiv_f32(v52, v36), *(float32x2_t *)(v44 + 8 * j)), v36), v36);
    do
    {
      v38.f32[0] = __C[v33];
      v38.f32[1] = v46[v33];
      v39 = vmul_f32(vsub_f32(vmul_f32(v36, v38), vmul_n_f32(v35, v48[v33])), v37);
      __C[v33] = v39.f32[0];
      v46[v33] = v39.f32[1];
      *(float *)&v57[v33 * 4] = (float)((float)(v39.f32[0] + *(float *)&v57[v33 * 4]) + v39.f32[1])
                              + (float)(v17[v33] * 10.0);
      ++v33;
    }
    while (v33 != 501);
  }
  v51[1] = (uint64_t)&unk_1E6B14270;
  v40 = operator new[]();
  v41 = 0;
  v51[0] = v40;
  do
  {
    *(double *)(v40 + 8 * v41) = *(float *)&v57[4 * v41];
    ++v41;
  }
  while (v41 != 501);
  dlib::matrix<double,0l,0l,dlib::memory_manager_stateless_kernel_1<char>,dlib::row_major_layout>::matrix<dlib::matrix<double,1l,501l,dlib::memory_manager_stateless_kernel_1<char>,dlib::row_major_layout>>(v43, v51);
  result = v51[0];
  if (v51[0])
    return MEMORY[0x1BCCA128C](v51[0], 0x1000C8000313F17);
  return result;
}

void sub_1B6D491EC(_Unwind_Exception *exception_object)
{
  _QWORD *v1;

  if (*v1)
    MEMORY[0x1BCCA128C](*v1, 0x1000C8000313F17);
  _Unwind_Resume(exception_object);
}

void sub_1B6D49554(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19)
{
  uint64_t v19;
  uint64_t v21;
  _QWORD *v22;
  uint64_t v23;
  _QWORD *v24;
  uint64_t v25;

  v21 = *(_QWORD *)(v19 - 216);
  if (v21)
    MEMORY[0x1BCCA128C](v21, 0x1000C8000313F17);
  v22 = *(_QWORD **)(v19 - 176);
  if (v22 == (_QWORD *)(v19 - 200))
  {
    v23 = 4;
    v22 = (_QWORD *)(v19 - 200);
  }
  else
  {
    if (!v22)
      goto LABEL_8;
    v23 = 5;
  }
  (*(void (**)(void))(*v22 + 8 * v23))();
LABEL_8:
  v24 = *(_QWORD **)(v19 - 144);
  if (v24 == (_QWORD *)(v19 - 168))
  {
    v25 = 4;
    v24 = (_QWORD *)(v19 - 168);
  }
  else
  {
    if (!v24)
      goto LABEL_13;
    v25 = 5;
  }
  (*(void (**)(void))(*v24 + 8 * v25))();
LABEL_13:
  _Unwind_Resume(exception_object);
}

double dlib::find_min_box_constrained<dlib::lbfgs_search_strategy,dlib::objective_delta_stop_strategy,std::function<double ()(dlib::matrix<double,0l,0l,dlib::memory_manager_stateless_kernel_1<char>,dlib::row_major_layout>)>,std::function<dlib::matrix<double,0l,0l,dlib::memory_manager_stateless_kernel_1<char>,dlib::row_major_layout> ()(dlib::matrix<double,0l,0l,dlib::memory_manager_stateless_kernel_1<char>,dlib::row_major_layout>)>,dlib::matrix<double,51l,1l,dlib::memory_manager_stateless_kernel_1<char>,dlib::row_major_layout>>(dlib::lbfgs_search_strategy *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t *a5, double a6, double a7)
{
  __int128 v13;
  double v14;
  __int128 v16;
  double v17;
  __int128 v18;
  double v19;
  _OWORD v20[2];
  uint64_t v21;
  _BYTE v22[232];

  dlib::lbfgs_search_strategy::lbfgs_search_strategy((dlib::lbfgs_search_strategy *)v22, a1);
  v13 = *(_OWORD *)(a2 + 16);
  v20[0] = *(_OWORD *)a2;
  v20[1] = v13;
  v21 = *(_QWORD *)(a2 + 32);
  v18 = xmmword_1B6FBD980;
  v19 = a6;
  v16 = xmmword_1B6FBD980;
  v17 = a7;
  v14 = dlib::find_min_box_constrained<dlib::lbfgs_search_strategy,dlib::objective_delta_stop_strategy,std::function<double ()(dlib::matrix<double,0l,0l,dlib::memory_manager_stateless_kernel_1<char>,dlib::row_major_layout>)>,std::function<dlib::matrix<double,0l,0l,dlib::memory_manager_stateless_kernel_1<char>,dlib::row_major_layout> ()(dlib::matrix<double,0l,0l,dlib::memory_manager_stateless_kernel_1<char>,dlib::row_major_layout>)>,dlib::matrix<double,51l,1l,dlib::memory_manager_stateless_kernel_1<char>,dlib::row_major_layout>,dlib::matrix_op<dlib::op_uniform_matrix_3<double>>,dlib::matrix_op<dlib::op_uniform_matrix_3<double>>>((uint64_t)v22, (uint64_t)v20, a3, a4, a5, &v18, &v16);
  dlib::lbfgs_search_strategy::~lbfgs_search_strategy((dlib::lbfgs_search_strategy *)v22);
  return v14;
}

void sub_1B6D4972C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, ...)
{
  va_list va;

  va_start(va, a14);
  dlib::lbfgs_search_strategy::~lbfgs_search_strategy((dlib::lbfgs_search_strategy *)va);
  _Unwind_Resume(a1);
}

void sub_1B6D49B54(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, char a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49)
{
  uint64_t v49;
  uint64_t v51;
  _QWORD *v52;
  uint64_t v53;
  _QWORD *v54;
  uint64_t v55;

  v51 = *(_QWORD *)(v49 - 240);
  if (v51)
    MEMORY[0x1BCCA128C](v51, 0x1000C8000313F17);
  v52 = *(_QWORD **)(v49 - 200);
  if (v52 == (_QWORD *)(v49 - 224))
  {
    v53 = 4;
    v52 = (_QWORD *)(v49 - 224);
  }
  else
  {
    if (!v52)
      goto LABEL_8;
    v53 = 5;
  }
  (*(void (**)(void))(*v52 + 8 * v53))();
LABEL_8:
  v54 = *(_QWORD **)(v49 - 168);
  if (v54 == (_QWORD *)(v49 - 192))
  {
    v55 = 4;
    v54 = (_QWORD *)(v49 - 192);
  }
  else
  {
    if (!v54)
      goto LABEL_13;
    v55 = 5;
  }
  (*(void (**)(void))(*v54 + 8 * v55))();
LABEL_13:
  _Unwind_Resume(exception_object);
}

double dlib::find_min<dlib::lbfgs_search_strategy,dlib::objective_delta_stop_strategy,std::function<double ()(dlib::matrix<double,0l,0l,dlib::memory_manager_stateless_kernel_1<char>,dlib::row_major_layout>)>,std::function<dlib::matrix<double,0l,0l,dlib::memory_manager_stateless_kernel_1<char>,dlib::row_major_layout> ()(dlib::matrix<double,0l,0l,dlib::memory_manager_stateless_kernel_1<char>,dlib::row_major_layout>)>,dlib::matrix<double,501l,1l,dlib::memory_manager_stateless_kernel_1<char>,dlib::row_major_layout>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t *a5, double a6)
{
  uint64_t v12;
  double v13;
  uint64_t v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t *v21;
  _QWORD *v22;
  uint64_t v23;
  uint64_t v24;
  double v25;
  uint64_t v28;
  double v29;
  int v31;
  double v32;
  int v33;
  uint64_t *v34;
  uint64_t v35;
  double *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t *v39;
  _QWORD *v40;
  uint64_t v41;
  double v42;
  uint64_t i;
  float64x2_t v44;
  double v45;
  unint64_t v48;
  unint64_t v49;
  double v50;
  void *v52;
  void *v54;
  void *v55;
  void *exception;
  _QWORD *v57;
  double v58;
  _QWORD *v59;
  uint64_t *v60;
  uint64_t v61;
  __int128 v62;
  uint64_t v63;
  uint64_t v64;
  double *v65;
  uint64_t v66[4];
  uint64_t v67[4];
  double v68;
  _QWORD v69[2];
  uint64_t v70[2];

  v70[1] = (uint64_t)&unk_1E6B14270;
  v69[1] = &unk_1E6B14270;
  v70[0] = operator new[]();
  v69[0] = operator new[]();
  dlib::matrix<double,0l,0l,dlib::memory_manager_stateless_kernel_1<char>,dlib::row_major_layout>::matrix<dlib::matrix<double,501l,1l,dlib::memory_manager_stateless_kernel_1<char>,dlib::row_major_layout>>(v67, a5);
  v12 = *(_QWORD *)(a3 + 24);
  if (!v12)
    std::__throw_bad_function_call[abi:ne180100]();
  v13 = (*(double (**)(uint64_t, uint64_t *))(*(_QWORD *)v12 + 48))(v12, v67);
  if (v67[0])
    MEMORY[0x1BCCA128C](v67[0], 0x1000C8000313F17);
  v68 = v13;
  dlib::matrix<double,0l,0l,dlib::memory_manager_stateless_kernel_1<char>,dlib::row_major_layout>::matrix<dlib::matrix<double,501l,1l,dlib::memory_manager_stateless_kernel_1<char>,dlib::row_major_layout>>(v66, a5);
  v14 = *(_QWORD *)(a4 + 24);
  if (!v14)
    std::__throw_bad_function_call[abi:ne180100]();
  (*(void (**)(__int128 *__return_ptr, uint64_t, uint64_t *))(*(_QWORD *)v14 + 48))(&v62, v14, v66);
  v16 = *((_QWORD *)&v62 + 1);
  v15 = (uint64_t *)v62;
  if (*((uint64_t *)&v62 + 1) >= 1)
  {
    v17 = 0;
    v18 = v63;
    v19 = v70[0];
    v20 = 8 * v63;
    do
    {
      v21 = v15;
      v22 = (_QWORD *)v19;
      v23 = v18;
      if (v18 >= 1)
      {
        do
        {
          v24 = *v21++;
          *v22++ = v24;
          --v23;
        }
        while (v23);
      }
      ++v17;
      v19 += 8;
      v15 = (uint64_t *)((char *)v15 + v20);
    }
    while (v17 != v16);
    v15 = (uint64_t *)v62;
  }
  if (v15)
    MEMORY[0x1BCCA128C](v15, 0x1000C8000313F17);
  if (v66[0])
    MEMORY[0x1BCCA128C](v66[0], 0x1000C8000313F17);
  v25 = v68;
  if (v68 <= -INFINITY || v68 >= INFINITY)
  {
    exception = __cxa_allocate_exception(0x28uLL);
    std::string::basic_string[abi:ne180100]<0>(&v62, "The objective function generated non-finite outputs");
    dlib::error::error((uint64_t)exception, &v62);
  }
  if (*(double *)v70[0] <= -INFINITY || *(double *)v70[0] >= INFINITY)
    goto LABEL_68;
  v28 = 1;
  do
  {
    if (v28 == 501)
      goto LABEL_32;
    v29 = *(double *)(v70[0] + 8 * v28++);
  }
  while (v29 > -INFINITY && v29 < INFINITY);
  if ((unint64_t)(v28 - 2) < 0x1F4)
  {
LABEL_68:
    v55 = __cxa_allocate_exception(0x28uLL);
    std::string::basic_string[abi:ne180100]<0>(&v62, "The objective function generated non-finite outputs");
    dlib::error::error((uint64_t)v55, &v62);
  }
LABEL_32:
  while (1)
  {
    v31 = dlib::objective_delta_stop_strategy::should_continue_search<dlib::matrix<double,501l,1l,dlib::memory_manager_stateless_kernel_1<char>,dlib::row_major_layout>>(a2, v25);
    v32 = v68;
    v33 = v68 > a6 ? v31 : 0;
    if (v33 != 1)
      break;
    v34 = dlib::lbfgs_search_strategy::get_next_direction<dlib::matrix<double,501l,1l,dlib::memory_manager_stateless_kernel_1<char>,dlib::row_major_layout>>(a1, a5, v70);
    v35 = v34[1];
    v36 = (double *)v69[0];
    if (v35 == 501)
    {
      v37 = 0;
      v38 = *v34;
      do
      {
        v36[v37] = *(double *)(v38 + v37 * 8);
        ++v37;
      }
      while (v37 != 501);
    }
    else if (v35 >= 1)
    {
      v39 = (uint64_t *)*v34;
      v40 = (_QWORD *)v69[0];
      do
      {
        v41 = *v39++;
        *v40++ = v41;
        --v35;
      }
      while (v35);
    }
    *(_QWORD *)&v62 = a3;
    *((_QWORD *)&v62 + 1) = a5;
    v63 = (uint64_t)v69;
    v64 = 0;
    v65 = &v68;
    v57 = (_QWORD *)a4;
    v58 = *(double *)&a5;
    v59 = v69;
    v60 = v70;
    v61 = 0;
    v42 = *(double *)v70[0] * *v36;
    for (i = 1; i != 501; i += 2)
    {
      v44 = vmulq_f64(*(float64x2_t *)(v70[0] + i * 8), *(float64x2_t *)&v36[i]);
      v42 = v42 + v44.f64[0] + v44.f64[1];
    }
    v45 = dlib::line_search<dlib::line_search_funct<std::function<double ()(dlib::matrix<double,0l,0l,dlib::memory_manager_stateless_kernel_1<char>,dlib::row_major_layout>)>,dlib::matrix<double,501l,1l,dlib::memory_manager_stateless_kernel_1<char>,dlib::row_major_layout>>,dlib::line_search_funct<std::function<dlib::matrix<double,0l,0l,dlib::memory_manager_stateless_kernel_1<char>,dlib::row_major_layout> ()(dlib::matrix<double,0l,0l,dlib::memory_manager_stateless_kernel_1<char>,dlib::row_major_layout>)>,dlib::matrix<double,501l,1l,dlib::memory_manager_stateless_kernel_1<char>,dlib::row_major_layout>>>((uint64_t *)&v62, (uint64_t *)&v57, 0x64uLL, v68, v42 + 0.0, 0.01, 0.9, a6);
    v57 = v69;
    v58 = v45;
    *(_QWORD *)&v62 = a5;
    *((_QWORD *)&v62 + 1) = &v57;
    dlib::blas_bindings::matrix_assign_blas<double,501l,1l,dlib::memory_manager_stateless_kernel_1<char>,dlib::row_major_layout,dlib::matrix_mul_scal_exp<dlib::matrix<double,501l,1l,dlib::memory_manager_stateless_kernel_1<char>,dlib::row_major_layout>,true>>(a5, (uint64_t **)&v62);
    v25 = v68;
    if (v68 <= -INFINITY || v68 >= INFINITY)
    {
      v54 = __cxa_allocate_exception(0x28uLL);
      std::string::basic_string[abi:ne180100]<0>(&v62, "The objective function generated non-finite outputs");
      dlib::error::error((uint64_t)v54, &v62);
    }
    if (*(double *)v70[0] > -INFINITY && *(double *)v70[0] < INFINITY)
    {
      v48 = 0;
      do
      {
        v49 = v48;
        if (v48 == 500)
          break;
        v50 = *(double *)(v70[0] + 8 + 8 * v48++);
      }
      while (v50 > -INFINITY && v50 < INFINITY);
      if (v49 > 0x1F3)
        continue;
    }
    v52 = __cxa_allocate_exception(0x28uLL);
    std::string::basic_string[abi:ne180100]<0>(&v62, "The objective function generated non-finite outputs");
    dlib::error::error((uint64_t)v52, &v62);
  }
  if (v69[0])
    MEMORY[0x1BCCA128C](v69[0], 0x1000C8000313F17);
  if (v70[0])
    MEMORY[0x1BCCA128C](v70[0], 0x1000C8000313F17);
  return v32;
}

void sub_1B6D4A1C4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27)
{
  void *v27;
  int v28;
  uint64_t v29;
  uint64_t v31;
  uint64_t v32;

  if (a20 < 0)
  {
    operator delete(__p);
    if ((v28 & 1) == 0)
    {
LABEL_6:
      v31 = *(_QWORD *)(v29 - 112);
      if (v31)
        MEMORY[0x1BCCA128C](v31, 0x1000C8000313F17);
      v32 = *(_QWORD *)(v29 - 96);
      if (v32)
        MEMORY[0x1BCCA128C](v32, 0x1000C8000313F17);
      _Unwind_Resume(a1);
    }
  }
  else if (!v28)
  {
    goto LABEL_6;
  }
  __cxa_free_exception(v27);
  goto LABEL_6;
}

void sub_1B6D4A848()
{
  __cxa_end_catch();
  JUMPOUT(0x1B6D4A8A0);
}

void sub_1B6D4A854(_Unwind_Exception *a1, int a2)
{
  if (a2)
    __clang_call_terminate(a1);
  _Unwind_Resume(a1);
}

void sub_1B6D4A864()
{
  JUMPOUT(0x1B6D4A8A0);
}

void sub_1B6D4A870(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;

  if (a9)
    MEMORY[0x1BCCA128C](a9, 0x1000C8000313F17);
  v10 = *(_QWORD **)(v9 - 96);
  if (v10 == (_QWORD *)(v9 - 120))
  {
    v11 = 4;
    v10 = (_QWORD *)(v9 - 120);
  }
  else
  {
    if (!v10)
      goto LABEL_8;
    v11 = 5;
  }
  (*(void (**)(void))(*v10 + 8 * v11))();
LABEL_8:
  JUMPOUT(0x1B6D4A8D8);
}

void sub_1B6D4A880(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59)
{
  if (a59)
    JUMPOUT(0x1B6D4A88CLL);
  JUMPOUT(0x1B6D4A8A0);
}

uint64_t dlib::find_min_using_approximate_derivatives<dlib::lbfgs_search_strategy,dlib::objective_delta_stop_strategy,std::function<double ()(dlib::matrix<double,0l,0l,dlib::memory_manager_stateless_kernel_1<char>,dlib::row_major_layout>)>,dlib::matrix<double,6l,1l,dlib::memory_manager_stateless_kernel_1<char>,dlib::row_major_layout>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4, double a5, double a6)
{
  uint64_t v11;
  double v12;
  uint64_t i;
  __int128 v14;
  double v15;
  uint64_t v18;
  double v19;
  uint64_t result;
  uint64_t *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t *v26;
  __int128 *v27;
  uint64_t v28;
  double v29;
  uint64_t v30;
  double v31;
  uint64_t j;
  __int128 v33;
  unint64_t v36;
  unint64_t v37;
  double v38;
  void *v40;
  void *v41;
  void *v42;
  _QWORD *v43;
  _QWORD *v44;
  _QWORD *v45;
  _QWORD *v46;
  _QWORD *v47;
  _QWORD *v48;
  _QWORD *v49;
  _QWORD *v50;
  _QWORD *v51;
  _QWORD *v52;
  _QWORD *v53;
  void *exception;
  void *v55;
  uint64_t v57;
  double v58;
  __int128 *v59;
  uint64_t v60;
  uint64_t v61;
  _QWORD v62[2];
  __int128 v63;
  __int128 *v64;
  uint64_t v65;
  double *v66;
  uint64_t v67[4];
  double v68;
  __int128 v69[3];
  double v70[34];

  if (a6 <= 0.0)
  {
    std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v70);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v70, (uint64_t)"\n\nError detected at line ", 25);
    v43 = (_QWORD *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v43, (uint64_t)".\n", 2);
    v44 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v70, (uint64_t)"Error detected in file ", 23);
    v45 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v44, (uint64_t)"Submodules/dlib/dlib/optimization/optimization.h", 48);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v45, (uint64_t)".\n", 2);
    v46 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v70, (uint64_t)"Error detected in function ", 27);
    v47 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v46, (uint64_t)"double dlib::find_min_using_approximate_derivatives(search_strategy_type, stop_strategy_type, const funct &, T &, double, double) [search_strategy_type = dlib::lbfgs_search_strategy, stop_strategy_type = dlib::objective_delta_stop_strategy, funct = std::function<double (dlib::matrix<double>)>, T = dlib::matrix<double, 6, 1>]", 326);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v47, (uint64_t)".\n\n", 3);
    v48 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v70, (uint64_t)"Failing expression was ", 23);
    v49 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v48, (uint64_t)"is_col_vector(x) && derivative_eps > 0", 38);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v49, (uint64_t)".\n", 2);
    *(_DWORD *)((char *)&v70[1] + *(_QWORD *)(*(_QWORD *)&v70[0] - 24)) |= 1u;
    v50 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v70, (uint64_t)"\tdouble find_min_using_approximate_derivatives()", 48);
    v51 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v50, (uint64_t)"\n\tYou have to supply column vectors to this function", 52);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v51, (uint64_t)"\n\tx.nc():         ", 18);
    v52 = (_QWORD *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v52, (uint64_t)"\n\tderivative_eps: ", 18);
    v53 = (_QWORD *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v53, (uint64_t)"\n", 1);
    exception = __cxa_allocate_exception(0x28uLL);
    std::stringbuf::str();
    dlib::fatal_error::fatal_error((uint64_t)exception, 20, v69);
  }
  dlib::matrix<double,0l,0l,dlib::memory_manager_stateless_kernel_1<char>,dlib::row_major_layout>::matrix<dlib::matrix<double,6l,1l,dlib::memory_manager_stateless_kernel_1<char>,dlib::row_major_layout>>(v67, a4);
  v11 = *(_QWORD *)(a3 + 24);
  if (!v11)
    std::__throw_bad_function_call[abi:ne180100]();
  v12 = (*(double (**)(uint64_t, uint64_t *))(*(_QWORD *)v11 + 48))(v11, v67);
  if (v67[0])
    MEMORY[0x1BCCA128C](v67[0], 0x1000C8000313F17);
  v68 = v12;
  v57 = a3;
  v58 = a6;
  dlib::central_differences<std::function<double ()(dlib::matrix<double,0l,0l,dlib::memory_manager_stateless_kernel_1<char>,dlib::row_major_layout>)>>::operator()<dlib::matrix<double,6l,1l,dlib::memory_manager_stateless_kernel_1<char>,dlib::row_major_layout>>((double *)&v57, a4, (uint64_t)&v63);
  for (i = 0; i != 6; i += 2)
  {
    v14 = *(_OWORD *)&v70[i];
    *(_OWORD *)&v70[i] = *(__int128 *)((char *)&v63 + i * 8);
    *(__int128 *)((char *)&v63 + i * 8) = v14;
  }
  v15 = v68;
  if (v68 <= -INFINITY || v68 >= INFINITY)
  {
    v55 = __cxa_allocate_exception(0x28uLL);
    std::string::basic_string[abi:ne180100]<0>(&v63, "The objective function generated non-finite outputs");
    dlib::error::error((uint64_t)v55, &v63);
  }
  if (v70[0] <= -INFINITY || v70[0] >= INFINITY)
    goto LABEL_56;
  v18 = 1;
  do
  {
    if (v18 == 6)
      goto LABEL_24;
    v19 = v70[v18++];
  }
  while (v19 > -INFINITY && v19 < INFINITY);
  if ((unint64_t)(v18 - 2) < 5)
  {
LABEL_56:
    v42 = __cxa_allocate_exception(0x28uLL);
    std::string::basic_string[abi:ne180100]<0>(&v63, "The objective function generated non-finite outputs");
    dlib::error::error((uint64_t)v42, &v63);
  }
LABEL_24:
  while (1)
  {
    result = dlib::objective_delta_stop_strategy::should_continue_search<dlib::matrix<double,6l,1l,dlib::memory_manager_stateless_kernel_1<char>,dlib::row_major_layout>>(a2, v15);
    if (!(_DWORD)result || v68 <= a5)
      break;
    v22 = dlib::lbfgs_search_strategy::get_next_direction<dlib::matrix<double,6l,1l,dlib::memory_manager_stateless_kernel_1<char>,dlib::row_major_layout>>(a1, a4, (uint64_t *)v70);
    v23 = v22[1];
    if (v23 == 6)
    {
      v24 = 0;
      v25 = *v22;
      do
      {
        *(_QWORD *)((char *)v69 + v24) = *(_QWORD *)(v25 + v24);
        v24 += 8;
      }
      while (v24 != 48);
    }
    else if (v23 >= 1)
    {
      v26 = (uint64_t *)*v22;
      v27 = v69;
      do
      {
        v28 = *v26++;
        *(_QWORD *)v27 = v28;
        v27 = (__int128 *)((char *)v27 + 8);
        --v23;
      }
      while (v23);
    }
    *(_QWORD *)&v63 = a3;
    *((_QWORD *)&v63 + 1) = a4;
    v64 = v69;
    v65 = 0;
    v66 = &v68;
    v57 = a3;
    v58 = *(double *)&a4;
    v59 = v69;
    v60 = 0;
    v61 = 0;
    v62[0] = &v57;
    v29 = v70[0] * *(double *)v69;
    v30 = 1;
    *(double *)&v62[1] = a6;
    do
    {
      v29 = v29 + v70[v30] * *(double *)((char *)v69 + v30 * 8);
      ++v30;
    }
    while (v30 != 6);
    v31 = dlib::line_search<dlib::line_search_funct<std::function<double ()(dlib::matrix<double,0l,0l,dlib::memory_manager_stateless_kernel_1<char>,dlib::row_major_layout>)>,dlib::matrix<double,6l,1l,dlib::memory_manager_stateless_kernel_1<char>,dlib::row_major_layout>>,dlib::central_differences<dlib::line_search_funct<std::function<double ()(dlib::matrix<double,0l,0l,dlib::memory_manager_stateless_kernel_1<char>,dlib::row_major_layout>)>,dlib::matrix<double,6l,1l,dlib::memory_manager_stateless_kernel_1<char>,dlib::row_major_layout>>>>((uint64_t *)&v63, (uint64_t)v62, 0x64uLL, v68, v29, 0.01, 0.9, a5);
    *(_QWORD *)&v63 = v69;
    *((double *)&v63 + 1) = v31;
    dlib::matrix<double,6l,1l,dlib::memory_manager_stateless_kernel_1<char>,dlib::row_major_layout>::operator+=<dlib::matrix_mul_scal_exp<dlib::matrix<double,6l,1l,dlib::memory_manager_stateless_kernel_1<char>,dlib::row_major_layout>,true>>((double *)a4, (uint64_t)&v63);
    v57 = a3;
    v58 = a6;
    dlib::central_differences<std::function<double ()(dlib::matrix<double,0l,0l,dlib::memory_manager_stateless_kernel_1<char>,dlib::row_major_layout>)>>::operator()<dlib::matrix<double,6l,1l,dlib::memory_manager_stateless_kernel_1<char>,dlib::row_major_layout>>((double *)&v57, a4, (uint64_t)&v63);
    for (j = 0; j != 6; j += 2)
    {
      v33 = *(_OWORD *)&v70[j];
      *(_OWORD *)&v70[j] = *(__int128 *)((char *)&v63 + j * 8);
      *(__int128 *)((char *)&v63 + j * 8) = v33;
    }
    v15 = v68;
    if (v68 <= -INFINITY || v68 >= INFINITY)
    {
      v41 = __cxa_allocate_exception(0x28uLL);
      std::string::basic_string[abi:ne180100]<0>(&v63, "The objective function generated non-finite outputs");
      dlib::error::error((uint64_t)v41, &v63);
    }
    if (v70[0] > -INFINITY && v70[0] < INFINITY)
    {
      v36 = 0;
      do
      {
        v37 = v36;
        if (v36 == 5)
          break;
        v38 = v70[++v36];
      }
      while (v38 > -INFINITY && v38 < INFINITY);
      if (v37 > 4)
        continue;
    }
    v40 = __cxa_allocate_exception(0x28uLL);
    std::string::basic_string[abi:ne180100]<0>(&v63, "The objective function generated non-finite outputs");
    dlib::error::error((uint64_t)v40, &v63);
  }
  return result;
}

void sub_1B6D4AEF8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,void *__p,uint64_t a33,int a34,__int16 a35,char a36,char a37,uint64_t a38,uint64_t a39,uint64_t a40,char a41)
{
  void *v41;
  int v42;

  if (a37 < 0)
  {
    operator delete(__p);
    if ((v42 & 1) == 0)
    {
LABEL_6:
      std::ostringstream::~ostringstream((uint64_t)&a41);
      _Unwind_Resume(a1);
    }
  }
  else if (!v42)
  {
    goto LABEL_6;
  }
  __cxa_free_exception(v41);
  goto LABEL_6;
}

void sub_1B6D4B1E4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

uint64_t dlib::sequence_kernel_2<dlib::lbfgs_search_strategy::data_helper,dlib::memory_manager_stateless_kernel_1<char>>::~sequence_kernel_2(uint64_t a1)
{
  *(_QWORD *)a1 = &unk_1E6B141E0;
  *(_QWORD *)(a1 + 8) = &unk_1E6B14240;
  dlib::sequence_kernel_2<dlib::lbfgs_search_strategy::data_helper,dlib::memory_manager_stateless_kernel_1<char>>::delete_nodes(a1, *(_QWORD **)(a1 + 24), *(_QWORD *)(a1 + 16));
  return a1;
}

void dlib::sequence_kernel_2<dlib::lbfgs_search_strategy::data_helper,dlib::memory_manager_stateless_kernel_1<char>>::~sequence_kernel_2(uint64_t a1)
{
  *(_QWORD *)a1 = &unk_1E6B141E0;
  *(_QWORD *)(a1 + 8) = &unk_1E6B14240;
  dlib::sequence_kernel_2<dlib::lbfgs_search_strategy::data_helper,dlib::memory_manager_stateless_kernel_1<char>>::delete_nodes(a1, *(_QWORD **)(a1 + 24), *(_QWORD *)(a1 + 16));
  JUMPOUT(0x1BCCA12BCLL);
}

uint64_t dlib::sequence_kernel_2<dlib::lbfgs_search_strategy::data_helper,dlib::memory_manager_stateless_kernel_1<char>>::at_start(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 40);
}

uint64_t dlib::sequence_kernel_2<dlib::lbfgs_search_strategy::data_helper,dlib::memory_manager_stateless_kernel_1<char>>::reset(uint64_t result)
{
  *(_BYTE *)(result + 40) = 1;
  *(_QWORD *)(result + 48) = 0;
  return result;
}

BOOL dlib::sequence_kernel_2<dlib::lbfgs_search_strategy::data_helper,dlib::memory_manager_stateless_kernel_1<char>>::current_element_valid(uint64_t a1)
{
  return *(_QWORD *)(a1 + 48) != 0;
}

uint64_t dlib::sequence_kernel_2<dlib::lbfgs_search_strategy::data_helper,dlib::memory_manager_stateless_kernel_1<char>>::element(uint64_t a1)
{
  return *(_QWORD *)(a1 + 48);
}

BOOL dlib::sequence_kernel_2<dlib::lbfgs_search_strategy::data_helper,dlib::memory_manager_stateless_kernel_1<char>>::move_next(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;

  if (*(_BYTE *)(a1 + 40) && (v2 = *(_QWORD *)(a1 + 16)) != 0)
  {
    dlib::sequence_kernel_2<dlib::lbfgs_search_strategy::data_helper,dlib::memory_manager_stateless_kernel_1<char>>::move_to_pos(a1, (uint64_t *)(a1 + 24), (uint64_t *)(a1 + 32), 0, v2);
    v3 = *(_QWORD *)(a1 + 24);
    *(_QWORD *)(a1 + 48) = v3;
    *(_QWORD *)(a1 + 56) = 0;
  }
  else
  {
    v3 = *(_QWORD *)(a1 + 48);
    if (v3)
    {
      v4 = *(_QWORD *)(a1 + 56) + 1;
      *(_QWORD *)(a1 + 56) = v4;
      if (v4 >= *(_QWORD *)(a1 + 16))
      {
        v3 = 0;
        *(_QWORD *)(a1 + 48) = 0;
      }
      else
      {
        v3 = *(_QWORD *)(v3 + 56);
        *(_QWORD *)(a1 + 48) = v3;
      }
    }
  }
  *(_BYTE *)(a1 + 40) = 0;
  return v3 != 0;
}

uint64_t dlib::sequence_kernel_2<dlib::lbfgs_search_strategy::data_helper,dlib::memory_manager_stateless_kernel_1<char>>::size(uint64_t a1)
{
  return *(_QWORD *)(a1 + 16);
}

uint64_t dlib::sequence_kernel_2<dlib::lbfgs_search_strategy::data_helper,dlib::memory_manager_stateless_kernel_1<char>>::remove_any(uint64_t *a1, uint64_t *a2)
{
  return dlib::sequence_kernel_2<dlib::lbfgs_search_strategy::data_helper,dlib::memory_manager_stateless_kernel_1<char>>::remove(a1, 0, a2);
}

void `non-virtual thunk to'dlib::sequence_kernel_2<dlib::lbfgs_search_strategy::data_helper,dlib::memory_manager_stateless_kernel_1<char>>::~sequence_kernel_2(_QWORD *a1)
{
  _QWORD *v1;
  uint64_t v2;

  *a1 = &unk_1E6B14240;
  v2 = a1[1];
  v1 = (_QWORD *)a1[2];
  *(a1 - 1) = &unk_1E6B141E0;
  dlib::sequence_kernel_2<dlib::lbfgs_search_strategy::data_helper,dlib::memory_manager_stateless_kernel_1<char>>::delete_nodes((uint64_t)(a1 - 1), v1, v2);
}

{
  _QWORD *v1;
  uint64_t v2;

  *a1 = &unk_1E6B14240;
  v2 = a1[1];
  v1 = (_QWORD *)a1[2];
  *(a1 - 1) = &unk_1E6B141E0;
  dlib::sequence_kernel_2<dlib::lbfgs_search_strategy::data_helper,dlib::memory_manager_stateless_kernel_1<char>>::delete_nodes((uint64_t)(a1 - 1), v1, v2);
  JUMPOUT(0x1BCCA12BCLL);
}

uint64_t `non-virtual thunk to'dlib::sequence_kernel_2<dlib::lbfgs_search_strategy::data_helper,dlib::memory_manager_stateless_kernel_1<char>>::remove_any(uint64_t a1, uint64_t *a2)
{
  return dlib::sequence_kernel_2<dlib::lbfgs_search_strategy::data_helper,dlib::memory_manager_stateless_kernel_1<char>>::remove((uint64_t *)(a1 - 8), 0, a2);
}

uint64_t `non-virtual thunk to'dlib::sequence_kernel_2<dlib::lbfgs_search_strategy::data_helper,dlib::memory_manager_stateless_kernel_1<char>>::size(uint64_t a1)
{
  return *(_QWORD *)(a1 + 8);
}

void dlib::sequence_kernel_2<dlib::lbfgs_search_strategy::data_helper,dlib::memory_manager_stateless_kernel_1<char>>::move_to_pos(uint64_t a1, uint64_t *a2, uint64_t *a3, unint64_t a4, uint64_t a5)
{
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  BOOL v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v5 = *a3;
  v6 = *a3 - a4;
  if (*a3 <= a4)
  {
    if (*a3 != a4)
    {
      v11 = v5 + a5 - a4;
      *a3 = a4;
      if (v11 >= a4 - v5)
      {
        if (a4 != v5)
        {
          v14 = *a2;
          do
          {
            v14 = *(_QWORD *)(v14 + 56);
            *a2 = v14;
            v10 = __CFADD__(v6++, 1);
          }
          while (!v10);
        }
      }
      else if (v11)
      {
        v12 = *a2;
        do
        {
          v12 = *(_QWORD *)(v12 + 64);
          *a2 = v12;
          --v11;
        }
        while (v11);
      }
    }
  }
  else
  {
    v7 = a5 + a4 - v5;
    *a3 = a4;
    if (v6 >= v7)
    {
      if (v7)
      {
        v13 = *a2;
        do
        {
          v13 = *(_QWORD *)(v13 + 56);
          *a2 = v13;
          --v7;
        }
        while (v7);
      }
    }
    else if (v6)
    {
      v8 = *a2;
      v9 = a4 - v5;
      do
      {
        v8 = *(_QWORD *)(v8 + 64);
        *a2 = v8;
        v10 = __CFADD__(v9++, 1);
      }
      while (!v10);
    }
  }
}

uint64_t dlib::sequence_kernel_2<dlib::lbfgs_search_strategy::data_helper,dlib::memory_manager_stateless_kernel_1<char>>::remove(uint64_t *a1, unint64_t a2, uint64_t *a3)
{
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;

  dlib::sequence_kernel_2<dlib::lbfgs_search_strategy::data_helper,dlib::memory_manager_stateless_kernel_1<char>>::move_to_pos((uint64_t)a1, a1 + 3, a1 + 4, a2, a1[2]);
  v5 = (uint64_t *)a1[3];
  v6 = *a3;
  v7 = a3[1];
  v8 = v5[1];
  *a3 = *v5;
  a3[1] = v8;
  *v5 = v6;
  v5[1] = v7;
  v9 = a3[3];
  v10 = a3[4];
  v11 = v5[4];
  a3[3] = v5[3];
  a3[4] = v11;
  v5[3] = v9;
  v5[4] = v10;
  v12 = v5[6];
  v5[6] = a3[6];
  a3[6] = v12;
  v13 = v5[8];
  *(_QWORD *)(v13 + 56) = v5[7];
  v14 = v5[7];
  *(_QWORD *)(v14 + 64) = v13;
  v15 = (_QWORD *)a1[3];
  --a1[2];
  a1[3] = v14;
  if (v15)
  {
    v16 = v15[3];
    if (v16)
      MEMORY[0x1BCCA128C](v16, 0x1000C8000313F17);
    if (*v15)
      MEMORY[0x1BCCA128C](*v15, 0x1000C8000313F17);
    MEMORY[0x1BCCA12BC](v15, 0x10A0C40A06494AALL);
  }
  return (*(uint64_t (**)(uint64_t *))(*a1 + 24))(a1);
}

void dlib::lbfgs_search_strategy::data_helper::~data_helper(dlib::lbfgs_search_strategy::data_helper *this)
{
  uint64_t v2;

  v2 = *((_QWORD *)this + 3);
  if (v2)
    MEMORY[0x1BCCA128C](v2, 0x1000C8000313F17);
  if (*(_QWORD *)this)
    MEMORY[0x1BCCA128C](*(_QWORD *)this, 0x1000C8000313F17);
}

void dlib::memory_manager_stateless_kernel_1<double>::~memory_manager_stateless_kernel_1()
{
  JUMPOUT(0x1BCCA12BCLL);
}

void dlib::sequence_kernel_2<dlib::lbfgs_search_strategy::data_helper,dlib::memory_manager_stateless_kernel_1<char>>::delete_nodes(uint64_t a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v3;
  _QWORD *v5;
  uint64_t v6;

  if (a3)
  {
    v3 = a3;
    do
    {
      v5 = (_QWORD *)a2[7];
      v6 = a2[3];
      if (v6)
        MEMORY[0x1BCCA128C](v6, 0x1000C8000313F17);
      if (*a2)
        MEMORY[0x1BCCA128C](*a2, 0x1000C8000313F17);
      MEMORY[0x1BCCA12BC](a2, 0x10A0C40A06494AALL);
      a2 = v5;
      --v3;
    }
    while (v3);
  }
}

void dlib::lbfgs_search_strategy::~lbfgs_search_strategy(dlib::lbfgs_search_strategy *this)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v2 = *((_QWORD *)this + 25);
  if (v2)
    MEMORY[0x1BCCA128C](v2, 0x1000C8000313F17);
  v3 = *((_QWORD *)this + 22);
  if (v3)
    MEMORY[0x1BCCA128C](v3, 0x1000C8000313F17);
  v4 = (void *)*((_QWORD *)this + 19);
  if (v4)
  {
    *((_QWORD *)this + 20) = v4;
    operator delete(v4);
  }
  v5 = *((_QWORD *)this + 16);
  if (v5)
    MEMORY[0x1BCCA128C](v5, 0x1000C8000313F17);
  v6 = *((_QWORD *)this + 13);
  if (v6)
    MEMORY[0x1BCCA128C](v6, 0x1000C8000313F17);
  v7 = *((_QWORD *)this + 10);
  if (v7)
    MEMORY[0x1BCCA128C](v7, 0x1000C8000313F17);
  *(_QWORD *)this = &unk_1E6B141E0;
  *((_QWORD *)this + 1) = &unk_1E6B14240;
  dlib::sequence_kernel_2<dlib::lbfgs_search_strategy::data_helper,dlib::memory_manager_stateless_kernel_1<char>>::delete_nodes((uint64_t)this, *((_QWORD **)this + 3), *((_QWORD *)this + 2));
}

void std::__function::__func<std::__bind<double (*)(dlib::matrix<double,0l,0l,dlib::memory_manager_stateless_kernel_1<char>,dlib::row_major_layout> const&,float *,float *,float *,float *,BOOL),std::placeholders::__ph<1> const&,float *&,float *&,float (&)[12],float (&)[126],BOOL>,std::allocator<std::__bind<double (*)(dlib::matrix<double,0l,0l,dlib::memory_manager_stateless_kernel_1<char>,dlib::row_major_layout> const&,float *,float *,float *,float *,BOOL),std::placeholders::__ph<1> const&,float *&,float *&,float (&)[12],float (&)[126],BOOL>>,double ()(dlib::matrix<double,0l,0l,dlib::memory_manager_stateless_kernel_1<char>,dlib::row_major_layout>)>::~__func()
{
  JUMPOUT(0x1BCCA12BCLL);
}

__n128 std::__function::__func<std::__bind<double (*)(dlib::matrix<double,0l,0l,dlib::memory_manager_stateless_kernel_1<char>,dlib::row_major_layout> const&,float *,float *,float *,float *,BOOL),std::placeholders::__ph<1> const&,float *&,float *&,float (&)[12],float (&)[126],BOOL>,std::allocator<std::__bind<double (*)(dlib::matrix<double,0l,0l,dlib::memory_manager_stateless_kernel_1<char>,dlib::row_major_layout> const&,float *,float *,float *,float *,BOOL),std::placeholders::__ph<1> const&,float *&,float *&,float (&)[12],float (&)[126],BOOL>>,double ()(dlib::matrix<double,0l,0l,dlib::memory_manager_stateless_kernel_1<char>,dlib::row_major_layout>)>::__clone(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x38uLL);
  *(_QWORD *)v2 = &unk_1E6B14490;
  *(_OWORD *)(v2 + 8) = *(_OWORD *)(a1 + 8);
  *(_OWORD *)(v2 + 24) = *(_OWORD *)(a1 + 24);
  result = *(__n128 *)(a1 + 40);
  *(__n128 *)(v2 + 40) = result;
  return result;
}

__n128 std::__function::__func<std::__bind<double (*)(dlib::matrix<double,0l,0l,dlib::memory_manager_stateless_kernel_1<char>,dlib::row_major_layout> const&,float *,float *,float *,float *,BOOL),std::placeholders::__ph<1> const&,float *&,float *&,float (&)[12],float (&)[126],BOOL>,std::allocator<std::__bind<double (*)(dlib::matrix<double,0l,0l,dlib::memory_manager_stateless_kernel_1<char>,dlib::row_major_layout> const&,float *,float *,float *,float *,BOOL),std::placeholders::__ph<1> const&,float *&,float *&,float (&)[12],float (&)[126],BOOL>>,double ()(dlib::matrix<double,0l,0l,dlib::memory_manager_stateless_kernel_1<char>,dlib::row_major_layout>)>::__clone(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;

  *(_QWORD *)a2 = &unk_1E6B14490;
  result = *(__n128 *)(a1 + 8);
  v3 = *(_OWORD *)(a1 + 24);
  *(_OWORD *)(a2 + 40) = *(_OWORD *)(a1 + 40);
  *(_OWORD *)(a2 + 24) = v3;
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t std::__function::__func<std::__bind<double (*)(dlib::matrix<double,0l,0l,dlib::memory_manager_stateless_kernel_1<char>,dlib::row_major_layout> const&,float *,float *,float *,float *,BOOL),std::placeholders::__ph<1> const&,float *&,float *&,float (&)[12],float (&)[126],BOOL>,std::allocator<std::__bind<double (*)(dlib::matrix<double,0l,0l,dlib::memory_manager_stateless_kernel_1<char>,dlib::row_major_layout> const&,float *,float *,float *,float *,BOOL),std::placeholders::__ph<1> const&,float *&,float *&,float (&)[12],float (&)[126],BOOL>>,double ()(dlib::matrix<double,0l,0l,dlib::memory_manager_stateless_kernel_1<char>,dlib::row_major_layout>)>::operator()(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))(a1 + 8))(a2, *(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), *(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 40), *(unsigned __int8 *)(a1 + 48));
}

uint64_t std::__function::__func<std::__bind<double (*)(dlib::matrix<double,0l,0l,dlib::memory_manager_stateless_kernel_1<char>,dlib::row_major_layout> const&,float *,float *,float *,float *,BOOL),std::placeholders::__ph<1> const&,float *&,float *&,float (&)[12],float (&)[126],BOOL>,std::allocator<std::__bind<double (*)(dlib::matrix<double,0l,0l,dlib::memory_manager_stateless_kernel_1<char>,dlib::row_major_layout> const&,float *,float *,float *,float *,BOOL),std::placeholders::__ph<1> const&,float *&,float *&,float (&)[12],float (&)[126],BOOL>>,double ()(dlib::matrix<double,0l,0l,dlib::memory_manager_stateless_kernel_1<char>,dlib::row_major_layout>)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<std::__bind<double (*)(dlib::matrix<double,0l,0l,dlib::memory_manager_stateless_kernel_1<char>,dlib::row_major_layout> const&,float *,float *,float *,float *,BOOL),std::placeholders::__ph<1> const&,float *&,float *&,float (&)[12],float (&)[126],BOOL>,std::allocator<std::__bind<double (*)(dlib::matrix<double,0l,0l,dlib::memory_manager_stateless_kernel_1<char>,dlib::row_major_layout> const&,float *,float *,float *,float *,BOOL),std::placeholders::__ph<1> const&,float *&,float *&,float (&)[12],float (&)[126],BOOL>>,double ()(dlib::matrix<double,0l,0l,dlib::memory_manager_stateless_kernel_1<char>,dlib::row_major_layout>)>::target_type()
{
}

BOOL std::type_info::operator==[abi:ne180100](uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;

  v2 = *(_QWORD *)(a1 + 8);
  v3 = *(_QWORD *)(a2 + 8);
  if (v2 == v3)
    return 1;
  if ((v3 & v2) < 0 != __OFSUB__(v2, v3))
    return strcmp((const char *)(v2 & 0x7FFFFFFFFFFFFFFFLL), (const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL)) == 0;
  return 0;
}

void std::__function::__func<std::__bind<dlib::matrix<double,0l,0l,dlib::memory_manager_stateless_kernel_1<char>,dlib::row_major_layout> (*)(dlib::matrix<double,0l,0l,dlib::memory_manager_stateless_kernel_1<char>,dlib::row_major_layout> const&,float *,float *,float *,float *,BOOL),std::placeholders::__ph<1> const&,float *&,float *&,float (&)[12],float (&)[126],BOOL>,std::allocator<std::__bind<dlib::matrix<double,0l,0l,dlib::memory_manager_stateless_kernel_1<char>,dlib::row_major_layout> (*)(dlib::matrix<double,0l,0l,dlib::memory_manager_stateless_kernel_1<char>,dlib::row_major_layout> const&,float *,float *,float *,float *,BOOL),std::placeholders::__ph<1> const&,float *&,float *&,float (&)[12],float (&)[126],BOOL>>,dlib::matrix<double,0l,0l,dlib::memory_manager_stateless_kernel_1<char>,dlib::row_major_layout> ()(dlib::matrix<double,0l,0l,dlib::memory_manager_stateless_kernel_1<char>,dlib::row_major_layout>)>::~__func()
{
  JUMPOUT(0x1BCCA12BCLL);
}

__n128 std::__function::__func<std::__bind<dlib::matrix<double,0l,0l,dlib::memory_manager_stateless_kernel_1<char>,dlib::row_major_layout> (*)(dlib::matrix<double,0l,0l,dlib::memory_manager_stateless_kernel_1<char>,dlib::row_major_layout> const&,float *,float *,float *,float *,BOOL),std::placeholders::__ph<1> const&,float *&,float *&,float (&)[12],float (&)[126],BOOL>,std::allocator<std::__bind<dlib::matrix<double,0l,0l,dlib::memory_manager_stateless_kernel_1<char>,dlib::row_major_layout> (*)(dlib::matrix<double,0l,0l,dlib::memory_manager_stateless_kernel_1<char>,dlib::row_major_layout> const&,float *,float *,float *,float *,BOOL),std::placeholders::__ph<1> const&,float *&,float *&,float (&)[12],float (&)[126],BOOL>>,dlib::matrix<double,0l,0l,dlib::memory_manager_stateless_kernel_1<char>,dlib::row_major_layout> ()(dlib::matrix<double,0l,0l,dlib::memory_manager_stateless_kernel_1<char>,dlib::row_major_layout>)>::__clone(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x38uLL);
  *(_QWORD *)v2 = &unk_1E6B14388;
  *(_OWORD *)(v2 + 8) = *(_OWORD *)(a1 + 8);
  *(_OWORD *)(v2 + 24) = *(_OWORD *)(a1 + 24);
  result = *(__n128 *)(a1 + 40);
  *(__n128 *)(v2 + 40) = result;
  return result;
}

__n128 std::__function::__func<std::__bind<dlib::matrix<double,0l,0l,dlib::memory_manager_stateless_kernel_1<char>,dlib::row_major_layout> (*)(dlib::matrix<double,0l,0l,dlib::memory_manager_stateless_kernel_1<char>,dlib::row_major_layout> const&,float *,float *,float *,float *,BOOL),std::placeholders::__ph<1> const&,float *&,float *&,float (&)[12],float (&)[126],BOOL>,std::allocator<std::__bind<dlib::matrix<double,0l,0l,dlib::memory_manager_stateless_kernel_1<char>,dlib::row_major_layout> (*)(dlib::matrix<double,0l,0l,dlib::memory_manager_stateless_kernel_1<char>,dlib::row_major_layout> const&,float *,float *,float *,float *,BOOL),std::placeholders::__ph<1> const&,float *&,float *&,float (&)[12],float (&)[126],BOOL>>,dlib::matrix<double,0l,0l,dlib::memory_manager_stateless_kernel_1<char>,dlib::row_major_layout> ()(dlib::matrix<double,0l,0l,dlib::memory_manager_stateless_kernel_1<char>,dlib::row_major_layout>)>::__clone(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;

  *(_QWORD *)a2 = &unk_1E6B14388;
  result = *(__n128 *)(a1 + 8);
  v3 = *(_OWORD *)(a1 + 24);
  *(_OWORD *)(a2 + 40) = *(_OWORD *)(a1 + 40);
  *(_OWORD *)(a2 + 24) = v3;
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t std::__function::__func<std::__bind<dlib::matrix<double,0l,0l,dlib::memory_manager_stateless_kernel_1<char>,dlib::row_major_layout> (*)(dlib::matrix<double,0l,0l,dlib::memory_manager_stateless_kernel_1<char>,dlib::row_major_layout> const&,float *,float *,float *,float *,BOOL),std::placeholders::__ph<1> const&,float *&,float *&,float (&)[12],float (&)[126],BOOL>,std::allocator<std::__bind<dlib::matrix<double,0l,0l,dlib::memory_manager_stateless_kernel_1<char>,dlib::row_major_layout> (*)(dlib::matrix<double,0l,0l,dlib::memory_manager_stateless_kernel_1<char>,dlib::row_major_layout> const&,float *,float *,float *,float *,BOOL),std::placeholders::__ph<1> const&,float *&,float *&,float (&)[12],float (&)[126],BOOL>>,dlib::matrix<double,0l,0l,dlib::memory_manager_stateless_kernel_1<char>,dlib::row_major_layout> ()(dlib::matrix<double,0l,0l,dlib::memory_manager_stateless_kernel_1<char>,dlib::row_major_layout>)>::operator()(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))(a1 + 8))(a2, *(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), *(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 40), *(unsigned __int8 *)(a1 + 48));
}

uint64_t std::__function::__func<std::__bind<dlib::matrix<double,0l,0l,dlib::memory_manager_stateless_kernel_1<char>,dlib::row_major_layout> (*)(dlib::matrix<double,0l,0l,dlib::memory_manager_stateless_kernel_1<char>,dlib::row_major_layout> const&,float *,float *,float *,float *,BOOL),std::placeholders::__ph<1> const&,float *&,float *&,float (&)[12],float (&)[126],BOOL>,std::allocator<std::__bind<dlib::matrix<double,0l,0l,dlib::memory_manager_stateless_kernel_1<char>,dlib::row_major_layout> (*)(dlib::matrix<double,0l,0l,dlib::memory_manager_stateless_kernel_1<char>,dlib::row_major_layout> const&,float *,float *,float *,float *,BOOL),std::placeholders::__ph<1> const&,float *&,float *&,float (&)[12],float (&)[126],BOOL>>,dlib::matrix<double,0l,0l,dlib::memory_manager_stateless_kernel_1<char>,dlib::row_major_layout> ()(dlib::matrix<double,0l,0l,dlib::memory_manager_stateless_kernel_1<char>,dlib::row_major_layout>)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<std::__bind<dlib::matrix<double,0l,0l,dlib::memory_manager_stateless_kernel_1<char>,dlib::row_major_layout> (*)(dlib::matrix<double,0l,0l,dlib::memory_manager_stateless_kernel_1<char>,dlib::row_major_layout> const&,float *,float *,float *,float *,BOOL),std::placeholders::__ph<1> const&,float *&,float *&,float (&)[12],float (&)[126],BOOL>,std::allocator<std::__bind<dlib::matrix<double,0l,0l,dlib::memory_manager_stateless_kernel_1<char>,dlib::row_major_layout> (*)(dlib::matrix<double,0l,0l,dlib::memory_manager_stateless_kernel_1<char>,dlib::row_major_layout> const&,float *,float *,float *,float *,BOOL),std::placeholders::__ph<1> const&,float *&,float *&,float (&)[12],float (&)[126],BOOL>>,dlib::matrix<double,0l,0l,dlib::memory_manager_stateless_kernel_1<char>,dlib::row_major_layout> ()(dlib::matrix<double,0l,0l,dlib::memory_manager_stateless_kernel_1<char>,dlib::row_major_layout>)>::target_type()
{
}

void std::__throw_bad_function_call[abi:ne180100]()
{
  _QWORD *exception;

  exception = __cxa_allocate_exception(8uLL);
}

void std::bad_function_call::~bad_function_call(std::bad_function_call *this)
{
  std::exception::~exception(this);
  JUMPOUT(0x1BCCA12BCLL);
}

uint64_t *dlib::matrix<double,0l,0l,dlib::memory_manager_stateless_kernel_1<char>,dlib::row_major_layout>::matrix<dlib::matrix<double,51l,1l,dlib::memory_manager_stateless_kernel_1<char>,dlib::row_major_layout>>(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  a1[3] = (uint64_t)&unk_1E6B14270;
  dlib::row_major_layout::layout<double,0l,0l,dlib::memory_manager_stateless_kernel_1<char>,5>::set_size(a1, 51, 1);
  v4 = 0;
  v5 = *a2;
  v6 = (_QWORD *)*a1;
  v7 = 8 * a1[2];
  do
  {
    *v6 = *(_QWORD *)(v5 + v4);
    v4 += 8;
    v6 = (_QWORD *)((char *)v6 + v7);
  }
  while (v4 != 408);
  return a1;
}

void sub_1B6D4BB4C(_Unwind_Exception *exception_object)
{
  _QWORD *v1;

  if (*v1)
    MEMORY[0x1BCCA128C](*v1, 0x1000C8000313F17);
  _Unwind_Resume(exception_object);
}

uint64_t dlib::row_major_layout::layout<double,0l,0l,dlib::memory_manager_stateless_kernel_1<char>,5>::set_size(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t result;

  v6 = *a1;
  if (v6)
    MEMORY[0x1BCCA128C](v6, 0x1000C8000313F17);
  result = operator new[]();
  *a1 = result;
  a1[1] = a2;
  a1[2] = a3;
  return result;
}

double dlib::find_min_box_constrained<dlib::lbfgs_search_strategy,dlib::objective_delta_stop_strategy,std::function<double ()(dlib::matrix<double,0l,0l,dlib::memory_manager_stateless_kernel_1<char>,dlib::row_major_layout>)>,std::function<dlib::matrix<double,0l,0l,dlib::memory_manager_stateless_kernel_1<char>,dlib::row_major_layout> ()(dlib::matrix<double,0l,0l,dlib::memory_manager_stateless_kernel_1<char>,dlib::row_major_layout>)>,dlib::matrix<double,51l,1l,dlib::memory_manager_stateless_kernel_1<char>,dlib::row_major_layout>,dlib::matrix_op<dlib::op_uniform_matrix_3<double>>,dlib::matrix_op<dlib::op_uniform_matrix_3<double>>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t *a5, _QWORD *a6, _QWORD *a7)
{
  uint64_t v12;
  double v13;
  uint64_t v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t *v21;
  _QWORD *v22;
  uint64_t v23;
  uint64_t v24;
  double v25;
  uint64_t v28;
  double v29;
  double v31;
  int v32;
  double v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t *v42;
  _QWORD *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  double v50;
  uint64_t i;
  float64x2_t v52;
  double v53;
  double v54;
  uint64_t v55;
  uint64_t *v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t *v62;
  _QWORD *v63;
  uint64_t v64;
  uint64_t v65;
  unint64_t v68;
  unint64_t v69;
  double v70;
  void *v72;
  void *v74;
  _QWORD *v75;
  _QWORD *v76;
  _QWORD *v77;
  _QWORD *v78;
  _QWORD *v79;
  _QWORD *v80;
  _QWORD *v81;
  _QWORD *v82;
  _QWORD *v83;
  _QWORD *v84;
  _QWORD *v85;
  _QWORD *v86;
  _QWORD *v87;
  _QWORD *v88;
  _QWORD *v89;
  void *exception;
  void *v91;
  void *v92;
  uint64_t v95[4];
  _QWORD v96[2];
  uint64_t v97[2];
  uint64_t v98[2];
  uint64_t v99[4];
  uint64_t v100[4];
  double v101;
  _QWORD v102[2];
  uint64_t v103[2];
  __int128 v104;
  _QWORD *v105;
  __int128 v106;
  uint64_t v107;
  uint64_t v108;
  double *v109;

  if (a6[1] != 1 || a7[1] != 1 || *a6 != 51 || *a7 != 51)
  {
    std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)&v106);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v106, (uint64_t)"\n\nError detected at line ", 25);
    v75 = (_QWORD *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v75, (uint64_t)".\n", 2);
    v76 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v106, (uint64_t)"Error detected in file ", 23);
    v77 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v76, (uint64_t)"Submodules/dlib/dlib/optimization/optimization.h", 48);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v77, (uint64_t)".\n", 2);
    v78 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v106, (uint64_t)"Error detected in function ", 27);
    v79 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v78, (uint64_t)"double dlib::find_min_box_constrained(search_strategy_type, stop_strategy_type, const funct &, const funct_der &, T &, const matrix_exp<EXP1> &, const matrix_exp<EXP2> &) [search_strategy_type = dlib::lbfgs_search_strategy, stop_strategy_type = dlib::objective_delta_stop_strategy, funct = std::function<double (dlib::matrix<double>)>, funct_der = std::function<dlib::matrix<double> (dlib::matrix<double>)>, T = dlib::matrix<double, 51, 1>, EXP1 = dlib::matrix_op<dlib::op_uniform_matrix_3<double>>, EXP2 = dlib::matrix_op<dlib::op_uniform_matrix_3<double>>]", 558);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v79, (uint64_t)".\n\n", 3);
    v80 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v106, (uint64_t)"Failing expression was ", 23);
    v81 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v80, (uint64_t)"is_col_vector(x) && is_col_vector(x_lower) && is_col_vector(x_upper) && x.size() == x_lower.size() && x.size() == x_upper.size()", 128);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v81, (uint64_t)".\n", 2);
    *(_DWORD *)((char *)&v106 + *(_QWORD *)(v106 - 24) + 8) |= 1u;
    v82 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v106, (uint64_t)"\tdouble find_min_box_constrained()", 34);
    v83 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v82, (uint64_t)"\n\t The inputs to this function must be equal length column vectors.", 67);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v83, (uint64_t)"\n\t is_col_vector(x):       ", 27);
    v84 = (_QWORD *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v84, (uint64_t)"\n\t is_col_vector(x_upper): ", 27);
    v85 = (_QWORD *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v85, (uint64_t)"\n\t is_col_vector(x_upper): ", 27);
    v86 = (_QWORD *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v86, (uint64_t)"\n\t x.size():               ", 27);
    v87 = (_QWORD *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v87, (uint64_t)"\n\t x_lower.size():         ", 27);
    v88 = (_QWORD *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v88, (uint64_t)"\n\t x_upper.size():         ", 27);
    v89 = (_QWORD *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v89, (uint64_t)"\n", 1);
    exception = __cxa_allocate_exception(0x28uLL);
    std::stringbuf::str();
    dlib::fatal_error::fatal_error((uint64_t)exception, 20, &v104);
  }
  v103[1] = (uint64_t)&unk_1E6B14270;
  v102[1] = &unk_1E6B14270;
  v103[0] = operator new[]();
  v101 = 0.0;
  v102[0] = operator new[]();
  dlib::matrix<double,0l,0l,dlib::memory_manager_stateless_kernel_1<char>,dlib::row_major_layout>::matrix<dlib::matrix<double,51l,1l,dlib::memory_manager_stateless_kernel_1<char>,dlib::row_major_layout>>(v100, a5);
  v12 = *(_QWORD *)(a3 + 24);
  if (!v12)
    std::__throw_bad_function_call[abi:ne180100]();
  v13 = (*(double (**)(uint64_t, uint64_t *))(*(_QWORD *)v12 + 48))(v12, v100);
  if (v100[0])
    MEMORY[0x1BCCA128C](v100[0], 0x1000C8000313F17);
  v101 = v13;
  dlib::matrix<double,0l,0l,dlib::memory_manager_stateless_kernel_1<char>,dlib::row_major_layout>::matrix<dlib::matrix<double,51l,1l,dlib::memory_manager_stateless_kernel_1<char>,dlib::row_major_layout>>(v99, a5);
  v14 = *(_QWORD *)(a4 + 24);
  if (!v14)
    std::__throw_bad_function_call[abi:ne180100]();
  (*(void (**)(__int128 *__return_ptr, uint64_t, uint64_t *))(*(_QWORD *)v14 + 48))(&v106, v14, v99);
  v16 = *((_QWORD *)&v106 + 1);
  v15 = (uint64_t *)v106;
  if (*((uint64_t *)&v106 + 1) >= 1)
  {
    v17 = 0;
    v18 = v107;
    v19 = v103[0];
    v20 = 8 * v107;
    do
    {
      v21 = v15;
      v22 = (_QWORD *)v19;
      v23 = v18;
      if (v18 >= 1)
      {
        do
        {
          v24 = *v21++;
          *v22++ = v24;
          --v23;
        }
        while (v23);
      }
      ++v17;
      v19 += 8;
      v15 = (uint64_t *)((char *)v15 + v20);
    }
    while (v17 != v16);
    v15 = (uint64_t *)v106;
  }
  if (v15)
    MEMORY[0x1BCCA128C](v15, 0x1000C8000313F17);
  if (v99[0])
    MEMORY[0x1BCCA128C](v99[0], 0x1000C8000313F17);
  v25 = v101;
  if (v101 <= -INFINITY || v101 >= INFINITY)
  {
    v92 = __cxa_allocate_exception(0x28uLL);
    std::string::basic_string[abi:ne180100]<0>(&v106, "The objective function generated non-finite outputs");
    dlib::error::error((uint64_t)v92, &v106);
  }
  if (*(double *)v103[0] <= -INFINITY || *(double *)v103[0] >= INFINITY)
    goto LABEL_100;
  v28 = 1;
  do
  {
    if (v28 == 51)
      goto LABEL_36;
    v29 = *(double *)(v103[0] + 8 * v28++);
  }
  while (v29 > -INFINITY && v29 < INFINITY);
  if ((unint64_t)(v28 - 2) < 0x32)
  {
LABEL_100:
    v91 = __cxa_allocate_exception(0x28uLL);
    std::string::basic_string[abi:ne180100]<0>(&v106, "The objective function generated non-finite outputs");
    dlib::error::error((uint64_t)v91, &v106);
  }
LABEL_36:
  v31 = 1.0;
  while (1)
  {
    v32 = dlib::objective_delta_stop_strategy::should_continue_search<dlib::matrix<double,51l,1l,dlib::memory_manager_stateless_kernel_1<char>,dlib::row_major_layout>>(a2, v25);
    v33 = v101;
    if (!v32)
      break;
    v98[1] = (uint64_t)&unk_1E6B14270;
    v34 = operator new[]();
    v35 = 0;
    v98[0] = v34;
    v36 = v103[0];
    do
    {
      *(_QWORD *)(v34 + v35) = *(_QWORD *)(v36 + v35);
      v35 += 8;
    }
    while (v35 != 408);
    dlib::zero_bounded_variables<dlib::matrix<double,51l,1l,dlib::memory_manager_stateless_kernel_1<char>,dlib::row_major_layout>,dlib::matrix_exp<dlib::matrix_op<dlib::op_uniform_matrix_3<double>>>,dlib::matrix_exp<dlib::matrix_op<dlib::op_uniform_matrix_3<double>>>>(v98, a5, v103, (uint64_t)a6, (uint64_t)a7, (uint64_t *)&v106, 0.00000001);
    v37 = dlib::lbfgs_search_strategy::get_next_direction<dlib::matrix<double,51l,1l,dlib::memory_manager_stateless_kernel_1<char>,dlib::row_major_layout>>(a1, a5, (uint64_t *)&v106);
    v38 = v37[1];
    if (v38 == 51)
    {
      v39 = 0;
      v40 = *v37;
      v41 = v102[0];
      do
      {
        *(_QWORD *)(v41 + v39) = *(_QWORD *)(v40 + v39);
        v39 += 8;
      }
      while (v39 != 408);
    }
    else if (v38 >= 1)
    {
      v42 = (uint64_t *)*v37;
      v43 = (_QWORD *)v102[0];
      do
      {
        v44 = *v42++;
        *v43++ = v44;
        --v38;
      }
      while (v38);
    }
    if ((_QWORD)v106)
      MEMORY[0x1BCCA128C](v106, 0x1000C8000313F17);
    if (v98[0])
      MEMORY[0x1BCCA128C](v98[0], 0x1000C8000313F17);
    v97[1] = (uint64_t)&unk_1E6B14270;
    v45 = operator new[]();
    v46 = 0;
    v97[0] = v45;
    v47 = v102[0];
    do
    {
      *(_QWORD *)(v45 + v46) = *(_QWORD *)(v47 + v46);
      v46 += 8;
    }
    while (v46 != 408);
    dlib::gap_step_assign_bounded_variables<dlib::matrix<double,51l,1l,dlib::memory_manager_stateless_kernel_1<char>,dlib::row_major_layout>,dlib::matrix_exp<dlib::matrix_op<dlib::op_uniform_matrix_3<double>>>,dlib::matrix_exp<dlib::matrix_op<dlib::op_uniform_matrix_3<double>>>>(v97, a5, v103, (uint64_t)a6, (uint64_t)a7, (uint64_t *)&v106, 0.00000001);
    v48 = v106;
    v49 = v102[0];
    *(_QWORD *)&v106 = v102[0];
    v102[0] = v48;
    if ((_QWORD)v106)
      MEMORY[0x1BCCA128C](v49, 0x1000C8000313F17);
    if (v97[0])
      MEMORY[0x1BCCA128C](v97[0], 0x1000C8000313F17);
    *(_QWORD *)&v104 = a3;
    *((_QWORD *)&v104 + 1) = a6;
    v105 = a7;
    *(_QWORD *)&v106 = &v104;
    *((_QWORD *)&v106 + 1) = a5;
    v107 = (uint64_t)v102;
    v108 = 0;
    v109 = &v101;
    v50 = *(double *)v103[0] * *(double *)v102[0];
    for (i = 8; i != 408; i += 16)
    {
      v52 = vmulq_f64(*(float64x2_t *)(v103[0] + i), *(float64x2_t *)(v102[0] + i));
      v50 = v50 + v52.f64[0] + v52.f64[1];
    }
    v53 = dlib::backtracking_line_search<dlib::line_search_funct<dlib::clamped_function_object<std::function<double ()(dlib::matrix<double,0l,0l,dlib::memory_manager_stateless_kernel_1<char>,dlib::row_major_layout>)>,dlib::matrix_op<dlib::op_uniform_matrix_3<double>>,dlib::matrix_op<dlib::op_uniform_matrix_3<double>>>,dlib::matrix<double,51l,1l,dlib::memory_manager_stateless_kernel_1<char>,dlib::row_major_layout>>>((uint64_t)&v106, 0x64uLL, v101, v50 + 0.0, v31, 0.01);
    v54 = v31 * 10.0;
    if (v31 * 10.0 > 1.0)
      v54 = 1.0;
    v96[0] = v102;
    *(double *)&v96[1] = v53;
    if (v53 == v31)
      v31 = v54;
    else
      v31 = v53;
    *(_QWORD *)&v104 = a5;
    *((_QWORD *)&v104 + 1) = v96;
    *(_QWORD *)&v106 = &v104;
    *((_QWORD *)&v106 + 1) = a6;
    v107 = (uint64_t)a7;
    dlib::matrix_assign_big<dlib::matrix<double,51l,1l,dlib::memory_manager_stateless_kernel_1<char>,dlib::row_major_layout>,dlib::matrix_op<dlib::op_clamp_m<dlib::matrix_add_exp<dlib::matrix<double,51l,1l,dlib::memory_manager_stateless_kernel_1<char>,dlib::row_major_layout>,dlib::matrix_mul_scal_exp<dlib::matrix<double,51l,1l,dlib::memory_manager_stateless_kernel_1<char>,dlib::row_major_layout>,true>>,dlib::matrix_op<dlib::op_uniform_matrix_3<double>>,dlib::matrix_op<dlib::op_uniform_matrix_3<double>>>>>(a5, (uint64_t ***)&v106);
    dlib::matrix<double,0l,0l,dlib::memory_manager_stateless_kernel_1<char>,dlib::row_major_layout>::matrix<dlib::matrix<double,51l,1l,dlib::memory_manager_stateless_kernel_1<char>,dlib::row_major_layout>>(v95, a5);
    v55 = *(_QWORD *)(a4 + 24);
    if (!v55)
      std::__throw_bad_function_call[abi:ne180100]();
    (*(void (**)(__int128 *__return_ptr, uint64_t, uint64_t *))(*(_QWORD *)v55 + 48))(&v106, v55, v95);
    v57 = *((_QWORD *)&v106 + 1);
    v56 = (uint64_t *)v106;
    if (*((uint64_t *)&v106 + 1) >= 1)
    {
      v58 = 0;
      v59 = v107;
      v60 = v103[0];
      v61 = 8 * v107;
      do
      {
        v62 = v56;
        v63 = (_QWORD *)v60;
        v64 = v59;
        if (v59 >= 1)
        {
          do
          {
            v65 = *v62++;
            *v63++ = v65;
            --v64;
          }
          while (v64);
        }
        ++v58;
        v60 += 8;
        v56 = (uint64_t *)((char *)v56 + v61);
      }
      while (v58 != v57);
      v56 = (uint64_t *)v106;
    }
    if (v56)
      MEMORY[0x1BCCA128C](v56, 0x1000C8000313F17);
    if (v95[0])
      MEMORY[0x1BCCA128C](v95[0], 0x1000C8000313F17);
    v25 = v101;
    if (v101 <= -INFINITY || v101 >= INFINITY)
    {
      v74 = __cxa_allocate_exception(0x28uLL);
      std::string::basic_string[abi:ne180100]<0>(&v106, "The objective function generated non-finite outputs");
      dlib::error::error((uint64_t)v74, &v106);
    }
    if (*(double *)v103[0] > -INFINITY && *(double *)v103[0] < INFINITY)
    {
      v68 = 0;
      do
      {
        v69 = v68;
        if (v68 == 50)
          break;
        v70 = *(double *)(v103[0] + 8 + 8 * v68++);
      }
      while (v70 > -INFINITY && v70 < INFINITY);
      if (v69 > 0x31)
        continue;
    }
    v72 = __cxa_allocate_exception(0x28uLL);
    std::string::basic_string[abi:ne180100]<0>(&v106, "The objective function generated non-finite outputs");
    dlib::error::error((uint64_t)v72, &v106);
  }
  if (v102[0])
    MEMORY[0x1BCCA128C](v102[0], 0x1000C8000313F17);
  if (v103[0])
    MEMORY[0x1BCCA128C](v103[0], 0x1000C8000313F17);
  return v33;
}

void sub_1B6D4C5B4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,void *__p,uint64_t a35,int a36,__int16 a37,char a38,char a39,void *a40,uint64_t a41,int a42,__int16 a43,char a44,char a45)
{
  void *v45;
  int v46;

  if (a39 < 0)
  {
    operator delete(__p);
    if ((v46 & 1) == 0)
    {
LABEL_6:
      std::ostringstream::~ostringstream((uint64_t)&a40);
      _Unwind_Resume(a1);
    }
  }
  else if (!v46)
  {
    goto LABEL_6;
  }
  __cxa_free_exception(v45);
  goto LABEL_6;
}

uint64_t std::ostringstream::basic_ostringstream[abi:ne180100](uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  std::ios_base *v6;

  v2 = MEMORY[0x1E0DE4FE0];
  v3 = MEMORY[0x1E0DE4FE0] + 64;
  *(_QWORD *)(a1 + 112) = MEMORY[0x1E0DE4FE0] + 64;
  v4 = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 8);
  v5 = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 16);
  *(_QWORD *)a1 = v4;
  *(_QWORD *)(a1 + *(_QWORD *)(v4 - 24)) = v5;
  v6 = (std::ios_base *)(a1 + *(_QWORD *)(*(_QWORD *)a1 - 24));
  std::ios_base::init(v6, (void *)(a1 + 8));
  v6[1].__vftable = 0;
  v6[1].__fmtflags_ = -1;
  *(_QWORD *)a1 = v2 + 24;
  *(_QWORD *)(a1 + 112) = v3;
  std::streambuf::basic_streambuf();
  *(_QWORD *)(a1 + 8) = MEMORY[0x1E0DE4FB8] + 16;
  *(_OWORD *)(a1 + 72) = 0u;
  *(_OWORD *)(a1 + 88) = 0u;
  *(_DWORD *)(a1 + 104) = 16;
  return a1;
}

void sub_1B6D4C7FC(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::ostream::~ostream();
  MEMORY[0x1BCCA1244](v1);
  _Unwind_Resume(a1);
}

_QWORD *std::operator<<[abi:ne180100]<std::char_traits<char>>(_QWORD *a1, char *__s)
{
  size_t v4;

  v4 = strlen(__s);
  return std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a1, (uint64_t)__s, v4);
}

uint64_t std::ostringstream::~ostringstream(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;

  v2 = MEMORY[0x1E0DE4F60];
  v3 = *MEMORY[0x1E0DE4F60];
  *(_QWORD *)a1 = *MEMORY[0x1E0DE4F60];
  *(_QWORD *)(a1 + *(_QWORD *)(v3 - 24)) = *(_QWORD *)(v2 + 24);
  *(_QWORD *)(a1 + 8) = MEMORY[0x1E0DE4FB8] + 16;
  if (*(char *)(a1 + 95) < 0)
    operator delete(*(void **)(a1 + 72));
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x1BCCA1244](a1 + 112);
  return a1;
}

uint64_t dlib::objective_delta_stop_strategy::should_continue_search<dlib::matrix<double,51l,1l,dlib::memory_manager_stateless_kernel_1<char>,dlib::row_major_layout>>(uint64_t a1, double a2)
{
  _QWORD *v4;
  _QWORD *v5;
  const std::locale::facet *v6;
  unint64_t v7;
  unint64_t v8;
  BOOL v9;
  uint64_t result;
  std::locale v11;

  if (*(_BYTE *)a1)
  {
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(MEMORY[0x1E0DE4A60], (uint64_t)"iteration: ", 11);
    v4 = (_QWORD *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, (uint64_t)"   objective: ", 14);
    v5 = (_QWORD *)std::ostream::operator<<();
    std::ios_base::getloc((const std::ios_base *)((char *)v5 + *(_QWORD *)(*v5 - 24)));
    v6 = std::locale::use_facet(&v11, MEMORY[0x1E0DE4A90]);
    ((void (*)(const std::locale::facet *, uint64_t))v6->__vftable[2].~facet_0)(v6, 10);
    std::locale::~locale(&v11);
    std::ostream::put();
    std::ostream::flush();
  }
  v7 = *(_QWORD *)(a1 + 24) + 1;
  *(_QWORD *)(a1 + 24) = v7;
  if (*(_BYTE *)(a1 + 1))
  {
    v8 = *(_QWORD *)(a1 + 16);
    v9 = v8 && v7 > v8;
    if (v9 || vabdd_f64(a2, *(double *)(a1 + 32)) < *(double *)(a1 + 8))
      return 0;
  }
  result = 1;
  *(_BYTE *)(a1 + 1) = 1;
  *(double *)(a1 + 32) = a2;
  return result;
}

void sub_1B6D4CA00(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::locale a10)
{
  std::locale::~locale(&a10);
  _Unwind_Resume(a1);
}

uint64_t *dlib::lbfgs_search_strategy::get_next_direction<dlib::matrix<double,51l,1l,dlib::memory_manager_stateless_kernel_1<char>,dlib::row_major_layout>>(uint64_t a1, uint64_t *a2, uint64_t *a3)
{
  uint64_t *v6;
  double *v7;
  uint64_t v8;
  double *v9;
  double v10;
  uint64_t v11;
  double *v12;
  double *v13;
  double v14;
  double v15;
  double v16;
  double v17;
  unint64_t v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  double v23;
  uint64_t v24;
  double *v25;
  uint64_t v26;
  double *v27;
  double v28;
  uint64_t v29;
  double *v30;
  double *v31;
  double v32;
  double v33;
  double v34;
  uint64_t v35;
  double v36;
  double v37;
  uint64_t v38;
  double *v39;
  uint64_t v40;
  double *v41;
  double v42;
  uint64_t v43;
  double *v44;
  double *v45;
  double v46;
  double v47;
  double v48;
  double v49;
  uint64_t v50;
  unint64_t i;
  double v52;
  uint64_t v53;
  double *v54;
  uint64_t v55;
  double *v56;
  double v57;
  uint64_t v58;
  double *v59;
  double *v60;
  double v61;
  double v62;
  double v63;
  double v64;
  double v65;
  uint64_t *v67;
  double v68;

  v67 = a3;
  v68 = -1.0;
  v6 = (uint64_t *)(a1 + 128);
  dlib::matrix<double,0l,1l,dlib::memory_manager_stateless_kernel_1<char>,dlib::row_major_layout>::operator=<dlib::matrix_mul_scal_exp<dlib::matrix<double,51l,1l,dlib::memory_manager_stateless_kernel_1<char>,dlib::row_major_layout>,true>>((uint64_t *)(a1 + 128), (double *)&v67);
  if (!*(_BYTE *)(a1 + 72))
  {
    *(_BYTE *)(a1 + 72) = 1;
    v18 = *(_QWORD *)(a1 + 16);
LABEL_30:
    if (v18 > *(_QWORD *)(a1 + 64))
      dlib::sequence_kernel_2<dlib::lbfgs_search_strategy::data_helper,dlib::memory_manager_stateless_kernel_1<char>>::remove((uint64_t *)a1, 0, (uint64_t *)(a1 + 176));
    goto LABEL_32;
  }
  v67 = a2;
  *(_QWORD *)&v68 = a1 + 80;
  dlib::matrix<double,0l,1l,dlib::memory_manager_stateless_kernel_1<char>,dlib::row_major_layout>::operator=<dlib::matrix_subtract_exp<dlib::matrix<double,51l,1l,dlib::memory_manager_stateless_kernel_1<char>,dlib::row_major_layout>,dlib::matrix<double,0l,1l,dlib::memory_manager_stateless_kernel_1<char>,dlib::row_major_layout>>>((uint64_t *)(a1 + 176), &v67);
  v67 = a3;
  *(_QWORD *)&v68 = a1 + 104;
  dlib::matrix<double,0l,1l,dlib::memory_manager_stateless_kernel_1<char>,dlib::row_major_layout>::operator=<dlib::matrix_subtract_exp<dlib::matrix<double,51l,1l,dlib::memory_manager_stateless_kernel_1<char>,dlib::row_major_layout>,dlib::matrix<double,0l,1l,dlib::memory_manager_stateless_kernel_1<char>,dlib::row_major_layout>>>((uint64_t *)(a1 + 200), &v67);
  v7 = *(double **)(a1 + 200);
  v9 = *(double **)(a1 + 176);
  v8 = *(_QWORD *)(a1 + 184);
  v10 = *v9 * *v7;
  if (v8 >= 2)
  {
    v11 = v8 - 1;
    v12 = v7 + 1;
    v13 = v9 + 1;
    do
    {
      v14 = *v13++;
      v15 = v14;
      v16 = *v12++;
      v10 = v10 + v15 * v16;
      --v11;
    }
    while (v11);
  }
  v17 = v10 + 0.0;
  if (fabs(v17) <= 2.22044605e-16)
  {
    v19 = *(_QWORD *)(a1 + 16);
    if (v19)
    {
      dlib::sequence_kernel_2<dlib::lbfgs_search_strategy::data_helper,dlib::memory_manager_stateless_kernel_1<char>>::delete_nodes(a1, *(_QWORD **)(a1 + 24), v19);
      *(_QWORD *)(a1 + 16) = 0;
    }
    (*(void (**)(uint64_t))(*(_QWORD *)a1 + 24))(a1);
  }
  else
  {
    *(double *)(a1 + 224) = 1.0 / v17;
    dlib::sequence_kernel_2<dlib::lbfgs_search_strategy::data_helper,dlib::memory_manager_stateless_kernel_1<char>>::add((uint64_t *)a1, *(_QWORD *)(a1 + 16), (_QWORD *)(a1 + 176));
  }
  v20 = *(_QWORD *)(a1 + 16);
  if (v20)
  {
    std::vector<double>::resize(a1 + 152, v20);
    v21 = *(_QWORD *)(a1 + 16);
    if (v21)
    {
      v22 = v21 - 1;
      do
      {
        dlib::sequence_kernel_2<dlib::lbfgs_search_strategy::data_helper,dlib::memory_manager_stateless_kernel_1<char>>::move_to_pos(a1, (uint64_t *)(a1 + 24), (uint64_t *)(a1 + 32), v22, v21);
        v23 = *(double *)(*(_QWORD *)(a1 + 24) + 48);
        dlib::sequence_kernel_2<dlib::lbfgs_search_strategy::data_helper,dlib::memory_manager_stateless_kernel_1<char>>::move_to_pos(a1, (uint64_t *)(a1 + 24), (uint64_t *)(a1 + 32), v22, *(_QWORD *)(a1 + 16));
        v24 = *(_QWORD *)(a1 + 24);
        v25 = *(double **)(a1 + 128);
        v27 = *(double **)v24;
        v26 = *(_QWORD *)(v24 + 8);
        v28 = *v27 * *v25;
        if (v26 >= 2)
        {
          v29 = v26 - 1;
          v30 = v25 + 1;
          v31 = v27 + 1;
          do
          {
            v32 = *v31++;
            v33 = v32;
            v34 = *v30++;
            v28 = v28 + v33 * v34;
            --v29;
          }
          while (v29);
        }
        v35 = *(_QWORD *)(a1 + 152);
        *(double *)(v35 + 8 * v22) = v23 * (v28 + 0.0);
        dlib::sequence_kernel_2<dlib::lbfgs_search_strategy::data_helper,dlib::memory_manager_stateless_kernel_1<char>>::move_to_pos(a1, (uint64_t *)(a1 + 24), (uint64_t *)(a1 + 32), v22, *(_QWORD *)(a1 + 16));
        v36 = *(double *)(v35 + 8 * v22);
        v67 = (uint64_t *)(*(_QWORD *)(a1 + 24) + 24);
        v68 = v36;
        dlib::matrix<double,0l,1l,dlib::memory_manager_stateless_kernel_1<char>,dlib::row_major_layout>::operator-=<dlib::matrix_mul_scal_exp<dlib::matrix<double,0l,1l,dlib::memory_manager_stateless_kernel_1<char>,dlib::row_major_layout>,true>>(v6, (uint64_t *)&v67);
        --v22;
        v21 = *(_QWORD *)(a1 + 16);
      }
      while (v22 < v21);
    }
    dlib::sequence_kernel_2<dlib::lbfgs_search_strategy::data_helper,dlib::memory_manager_stateless_kernel_1<char>>::move_to_pos(a1, (uint64_t *)(a1 + 24), (uint64_t *)(a1 + 32), v21 - 1, v21);
    v37 = 1.0 / *(double *)(*(_QWORD *)(a1 + 24) + 48);
    dlib::sequence_kernel_2<dlib::lbfgs_search_strategy::data_helper,dlib::memory_manager_stateless_kernel_1<char>>::move_to_pos(a1, (uint64_t *)(a1 + 24), (uint64_t *)(a1 + 32), *(_QWORD *)(a1 + 16) - 1, *(_QWORD *)(a1 + 16));
    v38 = *(_QWORD *)(a1 + 24);
    dlib::sequence_kernel_2<dlib::lbfgs_search_strategy::data_helper,dlib::memory_manager_stateless_kernel_1<char>>::move_to_pos(a1, (uint64_t *)(a1 + 24), (uint64_t *)(a1 + 32), *(_QWORD *)(a1 + 16) - 1, *(_QWORD *)(a1 + 16));
    v39 = *(double **)(*(_QWORD *)(a1 + 24) + 24);
    v41 = *(double **)(v38 + 24);
    v40 = *(_QWORD *)(v38 + 32);
    v42 = *v41 * *v39;
    if (v40 >= 2)
    {
      v43 = v40 - 1;
      v44 = v39 + 1;
      v45 = v41 + 1;
      do
      {
        v46 = *v45++;
        v47 = v46;
        v48 = *v44++;
        v42 = v42 + v47 * v48;
        --v43;
      }
      while (v43);
    }
    v49 = v37 / (v42 + 0.0);
    *(double *)&v50 = 0.001;
    if (v49 >= 0.001)
    {
      *(double *)&v50 = 1000.0;
      if (v49 <= 1000.0)
        *(double *)&v50 = v49;
    }
    v67 = v6;
    v68 = *(double *)&v50;
    dlib::matrix<double,0l,1l,dlib::memory_manager_stateless_kernel_1<char>,dlib::row_major_layout>::operator=<dlib::matrix_mul_scal_exp<dlib::matrix<double,0l,1l,dlib::memory_manager_stateless_kernel_1<char>,dlib::row_major_layout>,true>>(v6, (uint64_t)&v67);
    v18 = *(_QWORD *)(a1 + 16);
    if (v18)
    {
      for (i = 0; i < v18; ++i)
      {
        dlib::sequence_kernel_2<dlib::lbfgs_search_strategy::data_helper,dlib::memory_manager_stateless_kernel_1<char>>::move_to_pos(a1, (uint64_t *)(a1 + 24), (uint64_t *)(a1 + 32), i, v18);
        v52 = *(double *)(*(_QWORD *)(a1 + 24) + 48);
        dlib::sequence_kernel_2<dlib::lbfgs_search_strategy::data_helper,dlib::memory_manager_stateless_kernel_1<char>>::move_to_pos(a1, (uint64_t *)(a1 + 24), (uint64_t *)(a1 + 32), i, *(_QWORD *)(a1 + 16));
        v53 = *(_QWORD *)(a1 + 24);
        v54 = *(double **)(a1 + 128);
        v56 = *(double **)(v53 + 24);
        v55 = *(_QWORD *)(v53 + 32);
        v57 = *v56 * *v54;
        if (v55 >= 2)
        {
          v58 = v55 - 1;
          v59 = v54 + 1;
          v60 = v56 + 1;
          do
          {
            v61 = *v60++;
            v62 = v61;
            v63 = *v59++;
            v57 = v57 + v62 * v63;
            --v58;
          }
          while (v58);
        }
        v64 = v52 * (v57 + 0.0);
        dlib::sequence_kernel_2<dlib::lbfgs_search_strategy::data_helper,dlib::memory_manager_stateless_kernel_1<char>>::move_to_pos(a1, (uint64_t *)(a1 + 24), (uint64_t *)(a1 + 32), i, *(_QWORD *)(a1 + 16));
        v65 = *(double *)(*(_QWORD *)(a1 + 152) + 8 * i) - v64;
        v67 = *(uint64_t **)(a1 + 24);
        v68 = v65;
        dlib::matrix<double,0l,1l,dlib::memory_manager_stateless_kernel_1<char>,dlib::row_major_layout>::operator+=<dlib::matrix_mul_scal_exp<dlib::matrix<double,0l,1l,dlib::memory_manager_stateless_kernel_1<char>,dlib::row_major_layout>,true>>(v6, (uint64_t)&v67);
        v18 = *(_QWORD *)(a1 + 16);
      }
      goto LABEL_30;
    }
  }
LABEL_32:
  dlib::matrix<double,0l,1l,dlib::memory_manager_stateless_kernel_1<char>,dlib::row_major_layout>::operator=<dlib::matrix<double,51l,1l,dlib::memory_manager_stateless_kernel_1<char>,dlib::row_major_layout>>((uint64_t *)(a1 + 80), a2);
  dlib::matrix<double,0l,1l,dlib::memory_manager_stateless_kernel_1<char>,dlib::row_major_layout>::operator=<dlib::matrix<double,51l,1l,dlib::memory_manager_stateless_kernel_1<char>,dlib::row_major_layout>>((uint64_t *)(a1 + 104), a3);
  return v6;
}

uint64_t dlib::zero_bounded_variables<dlib::matrix<double,51l,1l,dlib::memory_manager_stateless_kernel_1<char>,dlib::row_major_layout>,dlib::matrix_exp<dlib::matrix_op<dlib::op_uniform_matrix_3<double>>>,dlib::matrix_exp<dlib::matrix_op<dlib::op_uniform_matrix_3<double>>>>@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X1>, uint64_t *a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t *a6@<X8>, double a7@<D0>)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  double v12;
  double v13;
  uint64_t result;
  uint64_t v15;

  v9 = 0;
  v10 = *a2;
  v11 = *a3;
  do
  {
    v12 = *(double *)(v10 + v9);
    v13 = fabs(v12) * a7;
    if (*(double *)(a4 + 16) + v13 >= v12 && *(double *)(v11 + v9) > 0.0
      || *(double *)(a5 + 16) - v13 <= v12 && *(double *)(v11 + v9) < 0.0)
    {
      *(_QWORD *)(*a1 + v9) = 0;
    }
    v9 += 8;
  }
  while (v9 != 408);
  a6[1] = (uint64_t)&unk_1E6B14270;
  result = operator new[]();
  v15 = *a1;
  *a1 = result;
  *a6 = v15;
  return result;
}

uint64_t dlib::gap_step_assign_bounded_variables<dlib::matrix<double,51l,1l,dlib::memory_manager_stateless_kernel_1<char>,dlib::row_major_layout>,dlib::matrix_exp<dlib::matrix_op<dlib::op_uniform_matrix_3<double>>>,dlib::matrix_exp<dlib::matrix_op<dlib::op_uniform_matrix_3<double>>>>@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X1>, uint64_t *a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t *a6@<X8>, double a7@<D0>)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  double v12;
  double v13;
  double v14;
  uint64_t result;
  uint64_t v16;

  v9 = 0;
  v10 = *a2;
  v11 = *a3;
  do
  {
    v12 = *(double *)(v10 + v9);
    v13 = fabs(v12) * a7;
    v14 = *(double *)(a4 + 16);
    if (v14 + v13 >= v12 && *(double *)(v11 + v9) > 0.0
      || (v14 = *(double *)(a5 + 16), v14 - v13 <= v12) && *(double *)(v11 + v9) < 0.0)
    {
      *(double *)(*a1 + v9) = v14 - v12;
    }
    v9 += 8;
  }
  while (v9 != 408);
  a6[1] = (uint64_t)&unk_1E6B14270;
  result = operator new[]();
  v16 = *a1;
  *a1 = result;
  *a6 = v16;
  return result;
}

double dlib::backtracking_line_search<dlib::line_search_funct<dlib::clamped_function_object<std::function<double ()(dlib::matrix<double,0l,0l,dlib::memory_manager_stateless_kernel_1<char>,dlib::row_major_layout>)>,dlib::matrix_op<dlib::op_uniform_matrix_3<double>>,dlib::matrix_op<dlib::op_uniform_matrix_3<double>>>,dlib::matrix<double,51l,1l,dlib::memory_manager_stateless_kernel_1<char>,dlib::row_major_layout>>>(uint64_t a1, unint64_t a2, double a3, double a4, double a5, double a6)
{
  dlib *v11;
  double v12;
  double v13;
  char v15;
  double v16;
  unint64_t v17;
  double v18;
  double v19;
  double v20;
  double v21;
  double v22;
  double v23;
  double v24;
  double v25;
  double v26;
  BOOL v27;
  double v28;
  double v29;
  double v30;
  BOOL v31;
  double v33;
  double v34;

  v34 = a5;
  if (a4 > 0.0 && a5 > 0.0 || a4 < 0.0 && a5 < 0.0)
    v34 = -a5;
  dlib::line_search_funct<dlib::clamped_function_object<std::function<double ()(dlib::matrix<double,0l,0l,dlib::memory_manager_stateless_kernel_1<char>,dlib::row_major_layout>)>,dlib::matrix_op<dlib::op_uniform_matrix_3<double>>,dlib::matrix_op<dlib::op_uniform_matrix_3<double>>>,dlib::matrix<double,51l,1l,dlib::memory_manager_stateless_kernel_1<char>,dlib::row_major_layout>>::operator()(a1, (uint64_t *)&v34);
  v13 = v34;
  if (v12 > a3 + v34 * a6 * a4 && a2 >= 2)
  {
    v15 = 0;
    v33 = -a4;
    v16 = 0.0;
    v17 = 2;
    v18 = 0.0;
    while (1)
    {
      v19 = v16;
      v16 = v12;
      if ((v15 & 1) == 0)
        break;
      v20 = v13 * 0.1;
      v21 = v13 * 0.9;
      if (a4 >= 0.0)
      {
        dlib::poly_min_extrap(v11, a3, v33, -v13, v12, -v18, v19);
        v22 = -v29;
        if (v20 >= v21)
        {
          v23 = v21;
          if (v21 <= v22)
          {
            v23 = v20;
            if (v20 >= v22)
LABEL_41:
              v23 = v22;
          }
        }
        else
        {
          v23 = v20;
          if (v20 <= v22)
          {
            v23 = v21;
            if (v21 >= v22)
              goto LABEL_41;
          }
        }
      }
      else
      {
        dlib::poly_min_extrap(v11, a3, a4, v13, v12, v18, v19);
        if (v20 >= v21)
        {
          v23 = v21;
          if (v22 >= v21)
          {
            v23 = v20;
            if (v22 <= v20)
              goto LABEL_41;
          }
        }
        else
        {
          v23 = v20;
          if (v22 >= v20)
          {
            v23 = v21;
            if (v22 <= v21)
              goto LABEL_41;
          }
        }
      }
LABEL_42:
      v18 = v34;
      v34 = v23;
      dlib::line_search_funct<dlib::clamped_function_object<std::function<double ()(dlib::matrix<double,0l,0l,dlib::memory_manager_stateless_kernel_1<char>,dlib::row_major_layout>)>,dlib::matrix_op<dlib::op_uniform_matrix_3<double>>,dlib::matrix_op<dlib::op_uniform_matrix_3<double>>>,dlib::matrix<double,51l,1l,dlib::memory_manager_stateless_kernel_1<char>,dlib::row_major_layout>>::operator()(a1, (uint64_t *)&v34);
      v13 = v34;
      v31 = v12 <= a3 + v34 * a6 * a4 || v17++ >= a2;
      v15 = 1;
      if (v31)
        return v13;
    }
    v24 = v12 - a3;
    if (a4 >= 0.0)
    {
      v30 = v24 + a4 + v24 + a4;
      v26 = 0.5;
      if (fabs(v30) <= a4 * -2.22044605e-16)
        goto LABEL_34;
      v26 = a4 / v30;
      v27 = a4 / v30 < 0.0;
      v28 = 0.1;
      if (v27)
        goto LABEL_35;
      v28 = 0.9;
      if (v26 > 1.0)
        goto LABEL_35;
      v28 = 0.1;
      if (v26 < 0.1)
        goto LABEL_35;
      v28 = 0.9;
    }
    else
    {
      v25 = v24 - a4 + v24 - a4;
      v26 = 0.5;
      if (fabs(v25) <= a4 * 2.22044605e-16)
        goto LABEL_34;
      v26 = v33 / v25;
      v27 = v33 / v25 < 0.0;
      v28 = 0.1;
      if (v27)
        goto LABEL_35;
      v28 = 0.9;
      if (v26 > 1.0)
        goto LABEL_35;
      v28 = 0.1;
      if (v26 < 0.1)
        goto LABEL_35;
      v28 = 0.9;
    }
    if (v26 > 0.9)
    {
LABEL_35:
      v23 = v13 * v28;
      goto LABEL_42;
    }
LABEL_34:
    v28 = v26;
    goto LABEL_35;
  }
  return v13;
}

uint64_t dlib::fatal_error::fatal_error(uint64_t a1, int a2, __int128 *a3)
{
  dlib::fatal_error *v4;

  v4 = (dlib::fatal_error *)dlib::error::error(a1, a2, a3);
  *(_QWORD *)v4 = &unk_1E6B141B8;
  dlib::fatal_error::check_for_previous_fatal_errors(v4);
  return a1;
}

void sub_1B6D4D2A4(_Unwind_Exception *a1)
{
  std::exception *v1;

  dlib::error::~error(v1);
  _Unwind_Resume(a1);
}

uint64_t dlib::error::error(uint64_t a1, int a2, __int128 *a3)
{
  std::string *v5;
  __int128 v6;

  *(_QWORD *)a1 = &unk_1E6B142B0;
  v5 = (std::string *)(a1 + 8);
  if (*((char *)a3 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v5, *(const std::string::value_type **)a3, *((_QWORD *)a3 + 1));
  }
  else
  {
    v6 = *a3;
    v5->__r_.__value_.__r.__words[2] = *((_QWORD *)a3 + 2);
    *(_OWORD *)&v5->__r_.__value_.__l.__data_ = v6;
  }
  *(_DWORD *)(a1 + 32) = a2;
  return a1;
}

void sub_1B6D4D314(_Unwind_Exception *a1)
{
  std::exception *v1;

  std::exception::~exception(v1);
  _Unwind_Resume(a1);
}

std::terminate_handler dlib::fatal_error::check_for_previous_fatal_errors(dlib::fatal_error *this)
{
  unint64_t v1;
  unint64_t v2;
  char *v3;
  std::terminate_handler result;

  if (!dlib::fatal_error::check_for_previous_fatal_errors(void)::is_first_fatal_error)
    dlib::fatal_error::check_for_previous_fatal_errors((uint64_t)this);
  v1 = 0;
  byte_1EF14FA24 = 0;
  do
  {
    if (*((char *)this + 31) < 0)
      v2 = *((_QWORD *)this + 2);
    else
      v2 = *((unsigned __int8 *)this + 31);
    if (v1 >= v2)
      break;
    v3 = (char *)this + 8;
    if ((*((_BYTE *)this + 31) & 0x80) != 0)
      v3 = (char *)*((_QWORD *)this + 1);
    dlib::fatal_error::message(void)::buf[v1] = v3[v1];
    ++v1;
  }
  while (v1 != 1999);
  dlib::fatal_error::message(void)::buf[v1] = 0;
  result = std::set_terminate((std::terminate_handler)dlib::fatal_error::dlib_fatal_error_terminate);
  dlib::fatal_error::check_for_previous_fatal_errors(void)::is_first_fatal_error = 0;
  return result;
}

void dlib::error::~error(std::exception *this)
{
  this->__vftable = (std::exception_vtbl *)&unk_1E6B142B0;
  if (SHIBYTE(this[3].__vftable) < 0)
    operator delete(this[1].__vftable);
  std::exception::~exception(this);
}

{
  dlib::error::~error(this);
  JUMPOUT(0x1BCCA12BCLL);
}

void dlib::fatal_error::~fatal_error(std::exception *this)
{
  dlib::error::~error(this);
  JUMPOUT(0x1BCCA12BCLL);
}

const char *dlib::error::what(dlib::error *this)
{
  const char *result;

  result = (char *)this + 8;
  if (*((char *)this + 31) < 0)
  {
    if (*((_QWORD *)this + 2))
      return *(const char **)result;
    return dlib::error::type_to_string(this);
  }
  if (!*((_BYTE *)this + 31))
    return dlib::error::type_to_string(this);
  return result;
}

_QWORD *std::endl[abi:ne180100]<char,std::char_traits<char>>(_QWORD *a1)
{
  const std::locale::facet *v2;
  std::locale v4;

  std::ios_base::getloc((const std::ios_base *)((char *)a1 + *(_QWORD *)(*a1 - 24)));
  v2 = std::locale::use_facet(&v4, MEMORY[0x1E0DE4A90]);
  ((void (*)(const std::locale::facet *, uint64_t))v2->__vftable[2].~facet_0)(v2, 10);
  std::locale::~locale(&v4);
  std::ostream::put();
  std::ostream::flush();
  return a1;
}

void sub_1B6D4D4F0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::locale a10)
{
  std::locale::~locale(&a10);
  _Unwind_Resume(a1);
}

uint64_t dlib::fatal_error::dlib_fatal_error_terminate(dlib::fatal_error *this)
{
  _QWORD *v1;
  size_t v2;
  _QWORD *v3;
  const std::locale::facet *v4;
  _QWORD *v5;
  const std::locale::facet *v6;
  std::locale v8;

  v1 = (_QWORD *)MEMORY[0x1E0DE4A50];
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(MEMORY[0x1E0DE4A50], (uint64_t)"\n**************************** FATAL ERROR DETECTED ****************************", 79);
  byte_1EF14FA24 = 0;
  v2 = strlen(&dlib::fatal_error::message(void)::buf);
  v3 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v1, (uint64_t)&dlib::fatal_error::message(void)::buf, v2);
  std::ios_base::getloc((const std::ios_base *)((char *)v3 + *(_QWORD *)(*v3 - 24)));
  v4 = std::locale::use_facet(&v8, MEMORY[0x1E0DE4A90]);
  ((void (*)(const std::locale::facet *, uint64_t))v4->__vftable[2].~facet_0)(v4, 10);
  std::locale::~locale(&v8);
  std::ostream::put();
  std::ostream::flush();
  v5 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(MEMORY[0x1E0DE4A50], (uint64_t)"******************************************************************************\n", 79);
  std::ios_base::getloc((const std::ios_base *)((char *)v5 + *(_QWORD *)(*v5 - 24)));
  v6 = std::locale::use_facet(&v8, MEMORY[0x1E0DE4A90]);
  ((void (*)(const std::locale::facet *, uint64_t))v6->__vftable[2].~facet_0)(v6, 10);
  std::locale::~locale(&v8);
  std::ostream::put();
  return std::ostream::flush();
}

void sub_1B6D4D62C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::locale a10)
{
  std::locale::~locale(&a10);
  _Unwind_Resume(a1);
}

const char *dlib::error::type_to_string(dlib::error *this)
{
  uint64_t v1;

  v1 = *((int *)this + 8);
  if (v1 > 0x20)
    return "undefined error type";
  else
    return off_1E6B17338[v1];
}

uint64_t dlib::error::error(uint64_t a1, __int128 *a2)
{
  std::string *v3;
  __int128 v4;

  *(_QWORD *)a1 = &unk_1E6B142B0;
  v3 = (std::string *)(a1 + 8);
  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v3, *(const std::string::value_type **)a2, *((_QWORD *)a2 + 1));
  }
  else
  {
    v4 = *a2;
    v3->__r_.__value_.__r.__words[2] = *((_QWORD *)a2 + 2);
    *(_OWORD *)&v3->__r_.__value_.__l.__data_ = v4;
  }
  *(_DWORD *)(a1 + 32) = 9;
  return a1;
}

void sub_1B6D4D6CC(_Unwind_Exception *a1)
{
  std::exception *v1;

  std::exception::~exception(v1);
  _Unwind_Resume(a1);
}

uint64_t *dlib::matrix<double,0l,1l,dlib::memory_manager_stateless_kernel_1<char>,dlib::row_major_layout>::operator=<dlib::matrix_mul_scal_exp<dlib::matrix<double,51l,1l,dlib::memory_manager_stateless_kernel_1<char>,dlib::row_major_layout>,true>>(uint64_t *a1, double *a2)
{
  double v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  double v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  if (a1[1] == 51)
  {
    v4 = a2[1];
    v5 = **(_QWORD **)a2;
    v6 = *a1;
    v7 = 0;
    if (v4 == 1.0)
    {
      do
      {
        *(_QWORD *)(v6 + v7) = *(_QWORD *)(v5 + v7);
        v7 += 8;
      }
      while (v7 != 408);
    }
    else
    {
      do
      {
        *(double *)(v6 + v7) = v4 * *(double *)(v5 + v7);
        v7 += 8;
      }
      while (v7 != 408);
    }
  }
  else
  {
    dlib::row_major_layout::layout<double,0l,1l,dlib::memory_manager_stateless_kernel_1<char>,3>::set_size(a1, 51);
    v8 = a2[1];
    v9 = **(_QWORD **)a2;
    v10 = *a1;
    v11 = 0;
    if (v8 == 1.0)
    {
      do
      {
        *(_QWORD *)(v10 + v11) = *(_QWORD *)(v9 + v11);
        v11 += 8;
      }
      while (v11 != 408);
    }
    else
    {
      do
      {
        *(double *)(v10 + v11) = v8 * *(double *)(v9 + v11);
        v11 += 8;
      }
      while (v11 != 408);
    }
  }
  return a1;
}

uint64_t *dlib::matrix<double,0l,1l,dlib::memory_manager_stateless_kernel_1<char>,dlib::row_major_layout>::operator=<dlib::matrix_subtract_exp<dlib::matrix<double,51l,1l,dlib::memory_manager_stateless_kernel_1<char>,dlib::row_major_layout>,dlib::matrix<double,0l,1l,dlib::memory_manager_stateless_kernel_1<char>,dlib::row_major_layout>>>(uint64_t *a1, uint64_t **a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  if (a1[1] == 51)
  {
    v4 = 0;
    v5 = **a2;
    v6 = *a2[1];
    v7 = *a1;
    do
    {
      *(double *)(v7 + v4) = *(double *)(v5 + v4) - *(double *)(v6 + v4);
      v4 += 8;
    }
    while (v4 != 408);
  }
  else
  {
    dlib::row_major_layout::layout<double,0l,1l,dlib::memory_manager_stateless_kernel_1<char>,3>::set_size(a1, 51);
    v8 = 0;
    v9 = **a2;
    v10 = *a2[1];
    v11 = *a1;
    do
    {
      *(double *)(v11 + v8) = *(double *)(v9 + v8) - *(double *)(v10 + v8);
      v8 += 8;
    }
    while (v8 != 408);
  }
  return a1;
}

uint64_t dlib::sequence_kernel_2<dlib::lbfgs_search_strategy::data_helper,dlib::memory_manager_stateless_kernel_1<char>>::add(uint64_t *a1, unint64_t a2, _QWORD *a3)
{
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  v6 = (_QWORD *)operator new();
  v7 = v6;
  v8 = a3[1];
  *v6 = *a3;
  v6[1] = v8;
  v9 = a3[3];
  v10 = a3[4];
  v6[2] = &unk_1E6B14270;
  v6[3] = v9;
  *a3 = 0;
  a3[1] = 0;
  a3[3] = 0;
  a3[4] = 0;
  v6[4] = v10;
  v6[5] = &unk_1E6B14270;
  v11 = a3[6];
  a3[6] = v6[6];
  v6[6] = v11;
  v12 = a1[2];
  if (v12)
  {
    v13 = a1 + 3;
    v14 = a1 + 4;
    if (v12 == a2)
    {
      dlib::sequence_kernel_2<dlib::lbfgs_search_strategy::data_helper,dlib::memory_manager_stateless_kernel_1<char>>::move_to_pos((uint64_t)a1, v13, v14, a2 - 1, a2);
      v15 = a1[3];
      v7[7] = *(_QWORD *)(v15 + 56);
      v7[8] = v15;
      *(_QWORD *)(*(_QWORD *)(v15 + 56) + 64) = v7;
      *(_QWORD *)(v15 + 56) = v7;
      a1[4] = a2;
    }
    else
    {
      dlib::sequence_kernel_2<dlib::lbfgs_search_strategy::data_helper,dlib::memory_manager_stateless_kernel_1<char>>::move_to_pos((uint64_t)a1, v13, v14, a2, v12);
      v16 = a1[3];
      v17 = *(_QWORD *)(v16 + 64);
      v7[7] = v16;
      v7[8] = v17;
      *(_QWORD *)(*(_QWORD *)(v16 + 64) + 56) = v7;
      *(_QWORD *)(v16 + 64) = v7;
    }
  }
  else
  {
    a1[4] = 0;
    v6[7] = v6;
    v6[8] = v6;
  }
  ++a1[2];
  a1[3] = (uint64_t)v7;
  return (*(uint64_t (**)(uint64_t *))(*a1 + 24))(a1);
}

void std::vector<double>::resize(uint64_t a1, unint64_t a2)
{
  unint64_t v2;

  v2 = (uint64_t)(*(_QWORD *)(a1 + 8) - *(_QWORD *)a1) >> 3;
  if (a2 <= v2)
  {
    if (a2 < v2)
      *(_QWORD *)(a1 + 8) = *(_QWORD *)a1 + 8 * a2;
  }
  else
  {
    std::vector<double>::__append((char **)a1, a2 - v2);
  }
}

uint64_t *dlib::matrix<double,0l,1l,dlib::memory_manager_stateless_kernel_1<char>,dlib::row_major_layout>::operator-=<dlib::matrix_mul_scal_exp<dlib::matrix<double,0l,1l,dlib::memory_manager_stateless_kernel_1<char>,dlib::row_major_layout>,true>>(uint64_t *a1, uint64_t *a2)
{
  uint64_t *v4;
  unint64_t v5;

  if (a1[1] == *(_QWORD *)(*a2 + 8))
  {
    v4 = a1;
    v5 = (unint64_t)a2;
    dlib::blas_bindings::matrix_assign_blas<double,0l,1l,dlib::memory_manager_stateless_kernel_1<char>,dlib::row_major_layout,dlib::matrix_mul_scal_exp<dlib::matrix<double,0l,1l,dlib::memory_manager_stateless_kernel_1<char>,dlib::row_major_layout>,true>>(a1, (uint64_t)&v4);
  }
  else
  {
    v4 = a2;
    v5 = 0xBFF0000000000000;
    dlib::matrix<double,0l,1l,dlib::memory_manager_stateless_kernel_1<char>,dlib::row_major_layout>::operator=<dlib::matrix_mul_scal_exp<dlib::matrix_mul_scal_exp<dlib::matrix<double,0l,1l,dlib::memory_manager_stateless_kernel_1<char>,dlib::row_major_layout>,true>,true>>(a1, &v4);
  }
  return a1;
}

uint64_t *dlib::matrix<double,0l,1l,dlib::memory_manager_stateless_kernel_1<char>,dlib::row_major_layout>::operator+=<dlib::matrix_mul_scal_exp<dlib::matrix<double,0l,1l,dlib::memory_manager_stateless_kernel_1<char>,dlib::row_major_layout>,true>>(uint64_t *a1, uint64_t a2)
{
  _QWORD v4[2];

  if (a1[1] == *(_QWORD *)(*(_QWORD *)a2 + 8))
  {
    v4[0] = a1;
    v4[1] = a2;
    dlib::blas_bindings::matrix_assign_blas<double,0l,1l,dlib::memory_manager_stateless_kernel_1<char>,dlib::row_major_layout,dlib::matrix_mul_scal_exp<dlib::matrix<double,0l,1l,dlib::memory_manager_stateless_kernel_1<char>,dlib::row_major_layout>,true>>(a1, (uint64_t)v4);
  }
  else
  {
    dlib::matrix<double,0l,1l,dlib::memory_manager_stateless_kernel_1<char>,dlib::row_major_layout>::operator=<dlib::matrix_mul_scal_exp<dlib::matrix<double,0l,1l,dlib::memory_manager_stateless_kernel_1<char>,dlib::row_major_layout>,true>>(a1, a2);
  }
  return a1;
}

uint64_t *dlib::matrix<double,0l,1l,dlib::memory_manager_stateless_kernel_1<char>,dlib::row_major_layout>::operator=<dlib::matrix<double,51l,1l,dlib::memory_manager_stateless_kernel_1<char>,dlib::row_major_layout>>(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  if (a1[1] == 51)
  {
    v4 = 0;
    v5 = *a2;
    v6 = *a1;
    do
    {
      *(_QWORD *)(v6 + v4) = *(_QWORD *)(v5 + v4);
      v4 += 8;
    }
    while (v4 != 408);
  }
  else
  {
    dlib::row_major_layout::layout<double,0l,1l,dlib::memory_manager_stateless_kernel_1<char>,3>::set_size(a1, 51);
    v7 = 0;
    v8 = *a2;
    v9 = *a1;
    do
    {
      *(_QWORD *)(v9 + v7) = *(_QWORD *)(v8 + v7);
      v7 += 8;
    }
    while (v7 != 408);
  }
  return a1;
}

uint64_t dlib::row_major_layout::layout<double,0l,1l,dlib::memory_manager_stateless_kernel_1<char>,3>::set_size(uint64_t *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t result;

  v4 = *a1;
  if (v4)
    MEMORY[0x1BCCA128C](v4, 0x1000C8000313F17);
  result = operator new[]();
  *a1 = result;
  a1[1] = a2;
  return result;
}

void std::vector<double>::__append(char **a1, unint64_t a2)
{
  uint64_t v4;
  char *v5;
  char *v6;
  char *v7;
  char *v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  char *v14;
  char *v15;
  char *v16;
  char *v17;
  uint64_t v18;

  v6 = a1[2];
  v4 = (uint64_t)(a1 + 2);
  v5 = v6;
  v7 = *(char **)(v4 - 8);
  if (a2 <= (v6 - v7) >> 3)
  {
    if (a2)
    {
      bzero(*(void **)(v4 - 8), 8 * a2);
      v7 += 8 * a2;
    }
    a1[1] = v7;
  }
  else
  {
    v8 = *a1;
    v9 = v7 - *a1;
    v10 = a2 + (v9 >> 3);
    if (v10 >> 61)
      std::vector<std::unique_ptr<VCPProtoKeypoint>>::__throw_length_error[abi:ne180100]();
    v11 = v9 >> 3;
    v12 = v5 - v8;
    if (v12 >> 2 > v10)
      v10 = v12 >> 2;
    if ((unint64_t)v12 >= 0x7FFFFFFFFFFFFFF8)
      v13 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v13 = v10;
    if (v13)
    {
      v14 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::unique_ptr<VCPProtoKeypoint>>>(v4, v13);
      v8 = *a1;
      v7 = a1[1];
    }
    else
    {
      v14 = 0;
    }
    v15 = &v14[8 * v11];
    v16 = &v14[8 * v13];
    bzero(v15, 8 * a2);
    v17 = &v15[8 * a2];
    while (v7 != v8)
    {
      v18 = *((_QWORD *)v7 - 1);
      v7 -= 8;
      *((_QWORD *)v15 - 1) = v18;
      v15 -= 8;
    }
    *a1 = v15;
    a1[1] = v17;
    a1[2] = v16;
    if (v8)
      operator delete(v8);
  }
}

uint64_t *dlib::matrix<double,0l,1l,dlib::memory_manager_stateless_kernel_1<char>,dlib::row_major_layout>::operator=<dlib::matrix_mul_scal_exp<dlib::matrix_mul_scal_exp<dlib::matrix<double,0l,1l,dlib::memory_manager_stateless_kernel_1<char>,dlib::row_major_layout>,true>,true>>(uint64_t *a1, uint64_t **a2)
{
  uint64_t v4;

  v4 = *(_QWORD *)(**a2 + 8);
  if (a1[1] != v4)
    dlib::row_major_layout::layout<double,0l,1l,dlib::memory_manager_stateless_kernel_1<char>,3>::set_size(a1, v4);
  dlib::blas_bindings::matrix_assign_blas<double,0l,1l,dlib::memory_manager_stateless_kernel_1<char>,dlib::row_major_layout,dlib::matrix_mul_scal_exp<dlib::matrix_mul_scal_exp<dlib::matrix<double,0l,1l,dlib::memory_manager_stateless_kernel_1<char>,dlib::row_major_layout>,true>,true>>((uint64_t)a1, a2);
  return a1;
}

double *dlib::blas_bindings::matrix_assign_blas<double,0l,1l,dlib::memory_manager_stateless_kernel_1<char>,dlib::row_major_layout,dlib::matrix_mul_scal_exp<dlib::matrix<double,0l,1l,dlib::memory_manager_stateless_kernel_1<char>,dlib::row_major_layout>,true>>(uint64_t *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  double *result;
  uint64_t v7;
  uint64_t v8;
  double *v9;
  uint64_t v10;

  v4 = *(_QWORD *)(a2 + 8);
  v5 = *(_QWORD *)v4;
  if (*(uint64_t **)v4 == a1)
  {
    dlib::matrix<double,0l,1l,dlib::memory_manager_stateless_kernel_1<char>,dlib::row_major_layout>::matrix((uint64_t *)&v9, *(_QWORD *)a2);
    dlib::blas_bindings::matrix_assign_blas_helper<dlib::matrix<double,0l,1l,dlib::memory_manager_stateless_kernel_1<char>,dlib::row_major_layout>,dlib::matrix<double,0l,1l,dlib::memory_manager_stateless_kernel_1<char>,dlib::row_major_layout>,void>::assign<dlib::matrix<double,0l,1l,dlib::memory_manager_stateless_kernel_1<char>,dlib::row_major_layout>>(&v9, **(_QWORD **)(a2 + 8), 1, 0, -*(double *)(*(_QWORD *)(a2 + 8) + 8));
    result = (double *)*a1;
    v7 = a1[1];
    v8 = v10;
    *a1 = (uint64_t)v9;
    a1[1] = v8;
    v9 = result;
    v10 = v7;
    if (result)
      return (double *)MEMORY[0x1BCCA128C](result, 0x1000C8000313F17);
  }
  else
  {
    if (*(uint64_t **)a2 != a1)
    {
      dlib::matrix<double,0l,1l,dlib::memory_manager_stateless_kernel_1<char>,dlib::row_major_layout>::operator=(a1, *(uint64_t **)a2);
      v4 = *(_QWORD *)(a2 + 8);
      v5 = *(_QWORD *)v4;
    }
    return (double *)dlib::blas_bindings::matrix_assign_blas_helper<dlib::matrix<double,0l,1l,dlib::memory_manager_stateless_kernel_1<char>,dlib::row_major_layout>,dlib::matrix<double,0l,1l,dlib::memory_manager_stateless_kernel_1<char>,dlib::row_major_layout>,void>::assign<dlib::matrix<double,0l,1l,dlib::memory_manager_stateless_kernel_1<char>,dlib::row_major_layout>>((double **)a1, v5, 1, 0, -*(double *)(v4 + 8));
  }
  return result;
}

{
  uint64_t v4;
  uint64_t v5;
  double *result;
  uint64_t v7;
  uint64_t v8;
  double *v9;
  uint64_t v10;

  v4 = *(_QWORD *)(a2 + 8);
  v5 = *(_QWORD *)v4;
  if (*(uint64_t **)v4 == a1)
  {
    dlib::matrix<double,0l,1l,dlib::memory_manager_stateless_kernel_1<char>,dlib::row_major_layout>::matrix((uint64_t *)&v9, *(_QWORD *)a2);
    dlib::blas_bindings::matrix_assign_blas_helper<dlib::matrix<double,0l,1l,dlib::memory_manager_stateless_kernel_1<char>,dlib::row_major_layout>,dlib::matrix<double,0l,1l,dlib::memory_manager_stateless_kernel_1<char>,dlib::row_major_layout>,void>::assign<dlib::matrix<double,0l,1l,dlib::memory_manager_stateless_kernel_1<char>,dlib::row_major_layout>>(&v9, **(_QWORD **)(a2 + 8), 1, 0, *(double *)(*(_QWORD *)(a2 + 8) + 8));
    result = (double *)*a1;
    v7 = a1[1];
    v8 = v10;
    *a1 = (uint64_t)v9;
    a1[1] = v8;
    v9 = result;
    v10 = v7;
    if (result)
      return (double *)MEMORY[0x1BCCA128C](result, 0x1000C8000313F17);
  }
  else
  {
    if (*(uint64_t **)a2 != a1)
    {
      dlib::matrix<double,0l,1l,dlib::memory_manager_stateless_kernel_1<char>,dlib::row_major_layout>::operator=(a1, *(uint64_t **)a2);
      v4 = *(_QWORD *)(a2 + 8);
      v5 = *(_QWORD *)v4;
    }
    return (double *)dlib::blas_bindings::matrix_assign_blas_helper<dlib::matrix<double,0l,1l,dlib::memory_manager_stateless_kernel_1<char>,dlib::row_major_layout>,dlib::matrix<double,0l,1l,dlib::memory_manager_stateless_kernel_1<char>,dlib::row_major_layout>,void>::assign<dlib::matrix<double,0l,1l,dlib::memory_manager_stateless_kernel_1<char>,dlib::row_major_layout>>((double **)a1, v5, 1, 0, *(double *)(v4 + 8));
  }
  return result;
}

void sub_1B6D4DD88(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a10)
    MEMORY[0x1BCCA128C](a10, 0x1000C8000313F17);
  _Unwind_Resume(exception_object);
}

uint64_t *dlib::matrix<double,0l,1l,dlib::memory_manager_stateless_kernel_1<char>,dlib::row_major_layout>::operator=(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t *v5;
  _QWORD *v6;
  uint64_t v7;

  if (a1 != a2)
  {
    v4 = a2[1];
    if (a1[1] != v4)
    {
      dlib::row_major_layout::layout<double,0l,1l,dlib::memory_manager_stateless_kernel_1<char>,3>::set_size(a1, v4);
      v4 = a2[1];
    }
    if (v4 >= 1)
    {
      v5 = (uint64_t *)*a2;
      v6 = (_QWORD *)*a1;
      do
      {
        v7 = *v5++;
        *v6++ = v7;
        --v4;
      }
      while (v4);
    }
  }
  return a1;
}

double **dlib::blas_bindings::matrix_assign_blas_helper<dlib::matrix<double,0l,1l,dlib::memory_manager_stateless_kernel_1<char>,dlib::row_major_layout>,dlib::matrix<double,0l,1l,dlib::memory_manager_stateless_kernel_1<char>,dlib::row_major_layout>,void>::assign<dlib::matrix<double,0l,1l,dlib::memory_manager_stateless_kernel_1<char>,dlib::row_major_layout>>(double **result, uint64_t a2, int a3, char a4, double a5)
{
  uint64_t v5;
  double *v6;
  double *v7;
  double v8;
  uint64_t v9;
  double *v10;
  double *v11;
  double v12;
  uint64_t v13;
  double *v14;
  double *v15;
  uint64_t v16;
  uint64_t v17;
  double *v18;
  double *v19;
  uint64_t v20;
  uint64_t v21;
  double *v22;
  double *v23;
  double v24;
  uint64_t v25;
  double *v26;
  double *v27;
  double v28;
  double *v29;
  double v30;
  double *v31;
  double *v32;
  double v33;
  double *v34;
  double v35;
  double *v36;
  double *v37;
  double v38;

  if ((a4 & 1) != 0)
  {
    if (a3)
    {
      if (a5 == 1.0)
      {
        v5 = *(_QWORD *)(a2 + 8);
        if (v5 >= 1)
        {
          v6 = *result;
          v7 = *(double **)a2;
          do
          {
            v8 = *v7++;
            *v6 = v8 + *v6;
            ++v6;
            --v5;
          }
          while (v5);
        }
      }
      else
      {
        v21 = *(_QWORD *)(a2 + 8);
        v22 = *result;
        if (a5 == -1.0)
        {
          if (v21 >= 1)
          {
            v23 = *(double **)a2;
            do
            {
              v24 = *v23++;
              *v22 = *v22 - v24;
              ++v22;
              --v21;
            }
            while (v21);
          }
        }
        else if (v21 > 0)
        {
          v34 = *(double **)a2;
          do
          {
            v35 = *v34++;
            *v22 = *v22 + a5 * v35;
            ++v22;
            --v21;
          }
          while (v21);
        }
      }
    }
    else
    {
      v13 = *(_QWORD *)(a2 + 8);
      v14 = *result;
      if (a5 == 1.0)
      {
        if (v13 >= 1)
        {
          v15 = *(double **)a2;
          do
          {
            v16 = *(_QWORD *)v15++;
            *(_QWORD *)v14++ = v16;
            --v13;
          }
          while (v13);
        }
      }
      else if (v13 > 0)
      {
        v29 = *(double **)a2;
        do
        {
          v30 = *v29++;
          *v14++ = v30 * a5;
          --v13;
        }
        while (v13);
      }
    }
  }
  else if (a3)
  {
    if (a5 == 1.0)
    {
      v9 = *(_QWORD *)(a2 + 8);
      if (v9 >= 1)
      {
        v10 = *(double **)a2;
        v11 = *result;
        do
        {
          v12 = *v10++;
          *v11 = v12 + *v11;
          ++v11;
          --v9;
        }
        while (v9);
      }
    }
    else
    {
      v25 = *(_QWORD *)(a2 + 8);
      if (a5 == -1.0)
      {
        if (v25 >= 1)
        {
          v26 = *(double **)a2;
          v27 = *result;
          do
          {
            v28 = *v26++;
            *v27 = *v27 - v28;
            ++v27;
            --v25;
          }
          while (v25);
        }
      }
      else if (v25 >= 1)
      {
        v36 = *(double **)a2;
        v37 = *result;
        do
        {
          v38 = *v36++;
          *v37 = *v37 + a5 * v38;
          ++v37;
          --v25;
        }
        while (v25);
      }
    }
  }
  else
  {
    v17 = *(_QWORD *)(a2 + 8);
    if (a5 == 1.0)
    {
      if (v17 >= 1)
      {
        v18 = *(double **)a2;
        v19 = *result;
        do
        {
          v20 = *(_QWORD *)v18++;
          *(_QWORD *)v19++ = v20;
          --v17;
        }
        while (v17);
      }
    }
    else if (v17 >= 1)
    {
      v31 = *(double **)a2;
      v32 = *result;
      do
      {
        v33 = *v31++;
        *v32++ = v33 * a5;
        --v17;
      }
      while (v17);
    }
  }
  return result;
}

uint64_t *dlib::matrix<double,0l,1l,dlib::memory_manager_stateless_kernel_1<char>,dlib::row_major_layout>::matrix(uint64_t *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t *v5;
  _QWORD *v6;
  uint64_t v7;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = (uint64_t)&unk_1E6B14270;
  dlib::row_major_layout::layout<double,0l,1l,dlib::memory_manager_stateless_kernel_1<char>,3>::set_size(a1, *(_QWORD *)(a2 + 8));
  v4 = *(_QWORD *)(a2 + 8);
  if (v4 >= 1)
  {
    v5 = *(uint64_t **)a2;
    v6 = (_QWORD *)*a1;
    do
    {
      v7 = *v5++;
      *v6++ = v7;
      --v4;
    }
    while (v4);
  }
  return a1;
}

{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = (uint64_t)&unk_1E6B14270;
  dlib::row_major_layout::layout<double,0l,1l,dlib::memory_manager_stateless_kernel_1<char>,3>::set_size(a1, a2);
  return a1;
}

void sub_1B6D4E088(_Unwind_Exception *exception_object)
{
  _QWORD *v1;

  if (*v1)
    MEMORY[0x1BCCA128C](*v1, 0x1000C8000313F17);
  _Unwind_Resume(exception_object);
}

double *dlib::blas_bindings::matrix_assign_blas<double,0l,1l,dlib::memory_manager_stateless_kernel_1<char>,dlib::row_major_layout,dlib::matrix_mul_scal_exp<dlib::matrix_mul_scal_exp<dlib::matrix<double,0l,1l,dlib::memory_manager_stateless_kernel_1<char>,dlib::row_major_layout>,true>,true>>(uint64_t a1, uint64_t **a2)
{
  uint64_t *v4;
  uint64_t v5;
  double *result;
  uint64_t v7;
  double v8;
  uint64_t v9;
  double *v10;
  double *v11;
  uint64_t v12;
  double *v13;
  double *v14;
  double v15;
  uint64_t v16;
  uint64_t v17;
  double *v18;
  uint64_t v19;

  v4 = *a2;
  v5 = **a2;
  if (v5 != a1)
    return (double *)dlib::blas_bindings::matrix_assign_blas_helper<dlib::matrix<double,0l,1l,dlib::memory_manager_stateless_kernel_1<char>,dlib::row_major_layout>,dlib::matrix<double,0l,1l,dlib::memory_manager_stateless_kernel_1<char>,dlib::row_major_layout>,void>::assign<dlib::matrix<double,0l,1l,dlib::memory_manager_stateless_kernel_1<char>,dlib::row_major_layout>>((double **)a1, v5, 0, 0, *((double *)a2 + 1) * *((double *)v4 + 1));
  dlib::matrix<double,0l,1l,dlib::memory_manager_stateless_kernel_1<char>,dlib::row_major_layout>::matrix((uint64_t *)&v18, *(_QWORD *)(a1 + 8));
  v7 = **a2;
  v8 = *((double *)a2 + 1) * *((double *)*a2 + 1);
  v9 = *(_QWORD *)(v7 + 8);
  if (v8 == 1.0)
  {
    if (v9 >= 1)
    {
      v10 = *(double **)v7;
      v11 = v18;
      do
      {
        v12 = *(_QWORD *)v10++;
        *(_QWORD *)v11++ = v12;
        --v9;
      }
      while (v9);
    }
  }
  else if (v9 >= 1)
  {
    v13 = *(double **)v7;
    v14 = v18;
    do
    {
      v15 = *v13++;
      *v14++ = v8 * v15;
      --v9;
    }
    while (v9);
  }
  result = *(double **)a1;
  v16 = *(_QWORD *)(a1 + 8);
  v17 = v19;
  *(_QWORD *)a1 = v18;
  *(_QWORD *)(a1 + 8) = v17;
  v18 = result;
  v19 = v16;
  if (result)
    return (double *)MEMORY[0x1BCCA128C](result, 0x1000C8000313F17);
  return result;
}

void sub_1B6D4E1EC(_Unwind_Exception *exception_object)
{
  _QWORD *v1;

  if (*v1)
    MEMORY[0x1BCCA128C](*v1, 0x1000C8000313F17);
  _Unwind_Resume(exception_object);
}

uint64_t *dlib::matrix<double,0l,1l,dlib::memory_manager_stateless_kernel_1<char>,dlib::row_major_layout>::operator=<dlib::matrix_mul_scal_exp<dlib::matrix<double,0l,1l,dlib::memory_manager_stateless_kernel_1<char>,dlib::row_major_layout>,true>>(uint64_t *a1, uint64_t a2)
{
  uint64_t v4;

  v4 = *(_QWORD *)a2;
  if (a1[1] != *(_QWORD *)(v4 + 8))
  {
    dlib::row_major_layout::layout<double,0l,1l,dlib::memory_manager_stateless_kernel_1<char>,3>::set_size(a1, *(_QWORD *)(v4 + 8));
    v4 = *(_QWORD *)a2;
  }
  dlib::blas_bindings::matrix_assign_blas_helper<dlib::matrix<double,0l,1l,dlib::memory_manager_stateless_kernel_1<char>,dlib::row_major_layout>,dlib::matrix<double,0l,1l,dlib::memory_manager_stateless_kernel_1<char>,dlib::row_major_layout>,void>::assign<dlib::matrix<double,0l,1l,dlib::memory_manager_stateless_kernel_1<char>,dlib::row_major_layout>>((double **)a1, v4, 0, 0, *(double *)(a2 + 8));
  return a1;
}

void sub_1B6D4E33C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a10)
    MEMORY[0x1BCCA128C](a10, 0x1000C8000313F17);
  _Unwind_Resume(exception_object);
}

void dlib::line_search_funct<dlib::clamped_function_object<std::function<double ()(dlib::matrix<double,0l,0l,dlib::memory_manager_stateless_kernel_1<char>,dlib::row_major_layout>)>,dlib::matrix_op<dlib::op_uniform_matrix_3<double>>,dlib::matrix_op<dlib::op_uniform_matrix_3<double>>>,dlib::matrix<double,51l,1l,dlib::memory_manager_stateless_kernel_1<char>,dlib::row_major_layout>>::operator()(uint64_t a1, uint64_t *a2)
{
  uint64_t *v3;
  uint64_t *v4;
  uint64_t v5;
  double v6;
  double *v7;
  _QWORD v8[2];
  uint64_t *v9[2];

  v3 = *(uint64_t **)a1;
  v4 = *(uint64_t **)(a1 + 8);
  v5 = *a2;
  v8[0] = *(_QWORD *)(a1 + 16);
  v8[1] = v5;
  v9[0] = v4;
  v9[1] = v8;
  v6 = dlib::clamped_function_object<std::function<double ()(dlib::matrix<double,0l,0l,dlib::memory_manager_stateless_kernel_1<char>,dlib::row_major_layout>)>,dlib::matrix_op<dlib::op_uniform_matrix_3<double>>,dlib::matrix_op<dlib::op_uniform_matrix_3<double>>>::operator()<dlib::matrix_add_exp<dlib::matrix<double,51l,1l,dlib::memory_manager_stateless_kernel_1<char>,dlib::row_major_layout>,dlib::matrix_mul_scal_exp<dlib::matrix<double,51l,1l,dlib::memory_manager_stateless_kernel_1<char>,dlib::row_major_layout>,true>>>(v3, v9);
  v7 = *(double **)(a1 + 32);
  if (v7)
    *v7 = v6;
}

double *dlib::poly_min_extrap(dlib *this, double a2, double a3, double a4, double a5, double a6, double a7)
{
  double v13;
  uint64_t v14;
  uint64_t v15;
  double *result;
  double v17;
  double v18[2];
  double v19[2];
  double v20;
  double *v21;
  uint64_t v22;
  uint64_t v23;
  char v24;
  double v25[2];
  double v26[4];

  v13 = a6 * a6;
  v26[0] = a6 * a6;
  v26[1] = a6 * a6;
  v26[2] = a6 * a6;
  v26[3] = a6 * a6;
  v21 = v26;
  v22 = 0;
  v24 = 0;
  v23 = 1;
  v19[0] = -(a4 * a4);
  v14 = dlib::matrix<double,2l,2l,dlib::memory_manager_stateless_kernel_1<char>,dlib::row_major_layout>::literal_assign_helper::operator,((uint64_t)&v21, v19);
  v18[0] = -(v13 * a6);
  v15 = dlib::matrix<double,2l,2l,dlib::memory_manager_stateless_kernel_1<char>,dlib::row_major_layout>::literal_assign_helper::operator,(v14, v18);
  v20 = a4 * a4 * a4;
  dlib::matrix<double,2l,2l,dlib::memory_manager_stateless_kernel_1<char>,dlib::row_major_layout>::literal_assign_helper::operator,(v15, &v20);
  dlib::matrix<double,2l,2l,dlib::memory_manager_stateless_kernel_1<char>,dlib::row_major_layout>::literal_assign_helper::~literal_assign_helper((uint64_t)&v21);
  v25[0] = a5 - a2 - a3 * a4;
  v25[1] = v25[0];
  v24 = 0;
  v21 = v25;
  v22 = 1;
  v23 = 0;
  v19[0] = a7 - a2 - a3 * a6;
  dlib::matrix<double,2l,1l,dlib::memory_manager_stateless_kernel_1<char>,dlib::row_major_layout>::literal_assign_helper::operator,((uint64_t)&v21, v19);
  result = (double *)dlib::matrix<double,2l,1l,dlib::memory_manager_stateless_kernel_1<char>,dlib::row_major_layout>::literal_assign_helper::~literal_assign_helper((uint64_t)&v21);
  v17 = (a4 - a6) * (a4 * a4 * v13);
  if (v17 != 0.0 && (*(_QWORD *)&v17 & 0x7FF0000000000000) != 0)
  {
    *(_QWORD *)&v18[0] = v26;
    *(_QWORD *)&v18[1] = v25;
    *(_QWORD *)&v19[0] = v18;
    v19[1] = 1.0 / v17;
    return dlib::matrix<double,2l,1l,dlib::memory_manager_stateless_kernel_1<char>,dlib::row_major_layout>::operator=<dlib::matrix_mul_scal_exp<dlib::matrix_multiply_exp<dlib::matrix<double,2l,2l,dlib::memory_manager_stateless_kernel_1<char>,dlib::row_major_layout>,dlib::matrix<double,2l,1l,dlib::memory_manager_stateless_kernel_1<char>,dlib::row_major_layout>>,true>>((double *)&v21, (uint64_t)v19);
  }
  return result;
}

void sub_1B6D4E594(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  dlib::matrix<double,2l,1l,dlib::memory_manager_stateless_kernel_1<char>,dlib::row_major_layout>::literal_assign_helper::~literal_assign_helper((uint64_t)va);
  _Unwind_Resume(a1);
}

double dlib::clamped_function_object<std::function<double ()(dlib::matrix<double,0l,0l,dlib::memory_manager_stateless_kernel_1<char>,dlib::row_major_layout>)>,dlib::matrix_op<dlib::op_uniform_matrix_3<double>>,dlib::matrix_op<dlib::op_uniform_matrix_3<double>>>::operator()<dlib::matrix_add_exp<dlib::matrix<double,51l,1l,dlib::memory_manager_stateless_kernel_1<char>,dlib::row_major_layout>,dlib::matrix_mul_scal_exp<dlib::matrix<double,51l,1l,dlib::memory_manager_stateless_kernel_1<char>,dlib::row_major_layout>,true>>>(uint64_t *a1, uint64_t **a2)
{
  uint64_t v2;
  uint64_t v3;
  double v4;
  uint64_t **v6;
  __int128 v7;
  uint64_t v8[4];

  v2 = *a1;
  v6 = a2;
  v7 = *(_OWORD *)(a1 + 1);
  dlib::matrix<double,0l,0l,dlib::memory_manager_stateless_kernel_1<char>,dlib::row_major_layout>::matrix<dlib::matrix_op<dlib::op_clamp_m<dlib::matrix_add_exp<dlib::matrix<double,51l,1l,dlib::memory_manager_stateless_kernel_1<char>,dlib::row_major_layout>,dlib::matrix_mul_scal_exp<dlib::matrix<double,51l,1l,dlib::memory_manager_stateless_kernel_1<char>,dlib::row_major_layout>,true>>,dlib::matrix_op<dlib::op_uniform_matrix_3<double>>,dlib::matrix_op<dlib::op_uniform_matrix_3<double>>>>>(v8, &v6);
  v3 = *(_QWORD *)(v2 + 24);
  if (!v3)
    std::__throw_bad_function_call[abi:ne180100]();
  v4 = (*(double (**)(uint64_t, uint64_t *))(*(_QWORD *)v3 + 48))(v3, v8);
  if (v8[0])
    MEMORY[0x1BCCA128C](v8[0], 0x1000C8000313F17);
  return v4;
}

void sub_1B6D4E64C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13)
{
  if (a13)
    MEMORY[0x1BCCA128C](a13, 0x1000C8000313F17);
  _Unwind_Resume(exception_object);
}

uint64_t *dlib::matrix<double,0l,0l,dlib::memory_manager_stateless_kernel_1<char>,dlib::row_major_layout>::matrix<dlib::matrix_op<dlib::op_clamp_m<dlib::matrix_add_exp<dlib::matrix<double,51l,1l,dlib::memory_manager_stateless_kernel_1<char>,dlib::row_major_layout>,dlib::matrix_mul_scal_exp<dlib::matrix<double,51l,1l,dlib::memory_manager_stateless_kernel_1<char>,dlib::row_major_layout>,true>>,dlib::matrix_op<dlib::op_uniform_matrix_3<double>>,dlib::matrix_op<dlib::op_uniform_matrix_3<double>>>>>(uint64_t *a1, uint64_t ***a2)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  a1[3] = (uint64_t)&unk_1E6B14270;
  dlib::row_major_layout::layout<double,0l,0l,dlib::memory_manager_stateless_kernel_1<char>,5>::set_size(a1, 51, 1);
  dlib::matrix_assign_big<dlib::matrix<double,0l,0l,dlib::memory_manager_stateless_kernel_1<char>,dlib::row_major_layout>,dlib::matrix_op<dlib::op_clamp_m<dlib::matrix_add_exp<dlib::matrix<double,51l,1l,dlib::memory_manager_stateless_kernel_1<char>,dlib::row_major_layout>,dlib::matrix_mul_scal_exp<dlib::matrix<double,51l,1l,dlib::memory_manager_stateless_kernel_1<char>,dlib::row_major_layout>,true>>,dlib::matrix_op<dlib::op_uniform_matrix_3<double>>,dlib::matrix_op<dlib::op_uniform_matrix_3<double>>>>>((uint64_t)a1, a2);
  return a1;
}

void sub_1B6D4E6C4(_Unwind_Exception *exception_object)
{
  _QWORD *v1;

  if (*v1)
    MEMORY[0x1BCCA128C](*v1, 0x1000C8000313F17);
  _Unwind_Resume(exception_object);
}

uint64_t dlib::matrix_assign_big<dlib::matrix<double,0l,0l,dlib::memory_manager_stateless_kernel_1<char>,dlib::row_major_layout>,dlib::matrix_op<dlib::op_clamp_m<dlib::matrix_add_exp<dlib::matrix<double,51l,1l,dlib::memory_manager_stateless_kernel_1<char>,dlib::row_major_layout>,dlib::matrix_mul_scal_exp<dlib::matrix<double,51l,1l,dlib::memory_manager_stateless_kernel_1<char>,dlib::row_major_layout>,true>>,dlib::matrix_op<dlib::op_uniform_matrix_3<double>>,dlib::matrix_op<dlib::op_uniform_matrix_3<double>>>>>(uint64_t result, uint64_t ***a2)
{
  uint64_t v2;
  uint64_t **v3;
  double *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t **v7;
  double *v8;
  uint64_t v9;
  double v10;
  double v11;
  double v12;

  v2 = 0;
  v3 = a2[1];
  v4 = (double *)(*a2)[1];
  v5 = ***a2;
  v6 = **(_QWORD **)v4;
  v7 = a2[2];
  v8 = *(double **)result;
  v9 = 8 * *(_QWORD *)(result + 16);
  do
  {
    v10 = *(double *)(v5 + v2) + *(double *)(v6 + v2) * v4[1];
    v11 = *((double *)v3 + 2);
    if (v11 <= v10)
      v11 = *(double *)(v5 + v2) + *(double *)(v6 + v2) * v4[1];
    if (v10 <= *((double *)v7 + 2))
      v12 = v11;
    else
      v12 = *((double *)v7 + 2);
    *v8 = v12;
    v2 += 8;
    v8 = (double *)((char *)v8 + v9);
  }
  while (v2 != 408);
  return result;
}

uint64_t dlib::matrix<double,2l,2l,dlib::memory_manager_stateless_kernel_1<char>,dlib::row_major_layout>::literal_assign_helper::operator,(uint64_t result, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  _QWORD *v10;
  _QWORD *v11;
  _QWORD *v12;
  _QWORD *v13;
  _QWORD *v14;
  _QWORD *v15;
  _QWORD *v16;
  _QWORD *v17;
  _QWORD *v18;
  void *exception;
  __int128 v20;
  _QWORD v21[33];

  v2 = *(_QWORD *)(result + 8);
  if (v2 > 1 || (v3 = *(_QWORD *)(result + 16), v3 >= 2))
  {
    std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v21);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v21, (uint64_t)"\n\nError detected at line ", 25);
    v5 = (_QWORD *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)".\n", 2);
    v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v21, (uint64_t)"Error detected in file ", 23);
    v7 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)"Submodules/dlib/dlib/optimization/../matrix/matrix.h", 52);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)".\n", 2);
    v8 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v21, (uint64_t)"Error detected in function ", 27);
    v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"const literal_assign_helper &dlib::matrix<double, 2, 2>::literal_assign_helper::operator,(const T &) const [T = double, num_rows = 2, num_cols = 2, mem_manager = dlib::memory_manager_stateless_kernel_1<char>, layout = dlib::row_major_layout]", 241);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)".\n\n", 3);
    v10 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v21, (uint64_t)"Failing expression was ", 23);
    v11 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)"r < m->nr() && c < m->nc()", 26);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v11, (uint64_t)".\n", 2);
    *(_DWORD *)((char *)&v21[1] + *(_QWORD *)(v21[0] - 24)) |= 1u;
    v12 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v21, (uint64_t)"You have used the matrix comma based assignment incorrectly by attempting to\n", 77);
    v13 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, (uint64_t)"supply more values than there are elements in the matrix object being assigned to.\n\n", 84);
    v14 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v13, (uint64_t)"Did you forget to call set_size()?", 34);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, (uint64_t)"\n\t r: ", 6);
    v15 = (_QWORD *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)"\n\t c: ", 6);
    v16 = (_QWORD *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, (uint64_t)"\n\t m->nr(): ", 12);
    v17 = (_QWORD *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v17, (uint64_t)"\n\t m->nc(): ", 12);
    v18 = (_QWORD *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v18, (uint64_t)"\n", 1);
    exception = __cxa_allocate_exception(0x28uLL);
    std::stringbuf::str();
    dlib::fatal_error::fatal_error((uint64_t)exception, 20, &v20);
  }
  *(_QWORD *)(*(_QWORD *)result + 16 * v2 + 8 * v3) = *a2;
  v4 = v3 + 1;
  *(_QWORD *)(result + 16) = v4;
  if (v4 == 2)
  {
    *(_QWORD *)(result + 8) = v2 + 1;
    *(_QWORD *)(result + 16) = 0;
  }
  *(_BYTE *)(result + 24) = 1;
  return result;
}

void sub_1B6D4E9AC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15)
{
  void *v15;
  int v16;

  if (a14 < 0)
  {
    operator delete(__p);
    if ((v16 & 1) == 0)
    {
LABEL_6:
      std::ostringstream::~ostringstream((uint64_t)&a15);
      _Unwind_Resume(a1);
    }
  }
  else if (!v16)
  {
    goto LABEL_6;
  }
  __cxa_free_exception(v15);
  goto LABEL_6;
}

uint64_t dlib::matrix<double,2l,1l,dlib::memory_manager_stateless_kernel_1<char>,dlib::row_major_layout>::literal_assign_helper::operator,(uint64_t result, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  _QWORD *v10;
  _QWORD *v11;
  _QWORD *v12;
  _QWORD *v13;
  _QWORD *v14;
  _QWORD *v15;
  _QWORD *v16;
  _QWORD *v17;
  void *exception;
  __int128 v19;
  _QWORD v20[33];

  v2 = *(_QWORD *)(result + 8);
  if (v2 > 1 || (v3 = *(_QWORD *)(result + 16), v3 >= 1))
  {
    std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v20);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v20, (uint64_t)"\n\nError detected at line ", 25);
    v4 = (_QWORD *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, (uint64_t)".\n", 2);
    v5 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v20, (uint64_t)"Error detected in file ", 23);
    v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)"Submodules/dlib/dlib/optimization/../matrix/matrix.h", 52);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)".\n", 2);
    v7 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v20, (uint64_t)"Error detected in function ", 27);
    v8 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)"const literal_assign_helper &dlib::matrix<double, 2, 1>::literal_assign_helper::operator,(const T &) const [T = double, num_rows = 2, num_cols = 1, mem_manager = dlib::memory_manager_stateless_kernel_1<char>, layout = dlib::row_major_layout]", 241);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)".\n\n", 3);
    v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v20, (uint64_t)"Failing expression was ", 23);
    v10 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)"r < m->nr() && c < m->nc()", 26);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)".\n", 2);
    *(_DWORD *)((char *)&v20[1] + *(_QWORD *)(v20[0] - 24)) |= 1u;
    v11 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v20, (uint64_t)"You have used the matrix comma based assignment incorrectly by attempting to\n", 77);
    v12 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v11, (uint64_t)"supply more values than there are elements in the matrix object being assigned to.\n\n", 84);
    v13 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, (uint64_t)"Did you forget to call set_size()?", 34);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v13, (uint64_t)"\n\t r: ", 6);
    v14 = (_QWORD *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, (uint64_t)"\n\t c: ", 6);
    v15 = (_QWORD *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)"\n\t m->nr(): ", 12);
    v16 = (_QWORD *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, (uint64_t)"\n\t m->nc(): ", 12);
    v17 = (_QWORD *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v17, (uint64_t)"\n", 1);
    exception = __cxa_allocate_exception(0x28uLL);
    std::stringbuf::str();
    dlib::fatal_error::fatal_error((uint64_t)exception, 20, &v19);
  }
  *(_QWORD *)(*(_QWORD *)result + 8 * v2 + 8 * v3) = *a2;
  *(_QWORD *)(result + 16) = v3 + 1;
  if (!v3)
  {
    *(_QWORD *)(result + 8) = v2 + 1;
    *(_QWORD *)(result + 16) = 0;
  }
  *(_BYTE *)(result + 24) = 1;
  return result;
}

void sub_1B6D4EC44(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15)
{
  void *v15;
  int v16;

  if (a14 < 0)
  {
    operator delete(__p);
    if ((v16 & 1) == 0)
    {
LABEL_6:
      std::ostringstream::~ostringstream((uint64_t)&a15);
      _Unwind_Resume(a1);
    }
  }
  else if (!v16)
  {
    goto LABEL_6;
  }
  __cxa_free_exception(v15);
  goto LABEL_6;
}

double *dlib::matrix<double,2l,1l,dlib::memory_manager_stateless_kernel_1<char>,dlib::row_major_layout>::operator=<dlib::matrix_mul_scal_exp<dlib::matrix_multiply_exp<dlib::matrix<double,2l,2l,dlib::memory_manager_stateless_kernel_1<char>,dlib::row_major_layout>,dlib::matrix<double,2l,1l,dlib::memory_manager_stateless_kernel_1<char>,dlib::row_major_layout>>,true>>(double *result, uint64_t a2)
{
  double *v2;
  double *v3;
  double v4;
  double v5;
  double v6;
  double v7;
  double v8;
  double v9;

  v2 = **(double ***)a2;
  v3 = *(double **)(*(_QWORD *)a2 + 8);
  v4 = *v2;
  v5 = v2[1];
  v6 = *(double *)(a2 + 8);
  if (v3 == result)
  {
    v8 = result[1];
    v9 = (v4 * *result + v5 * v8) * v6;
    v7 = v6 * (*result * v2[2] + v2[3] * v8);
    *result = v9;
  }
  else
  {
    *result = (v4 * *v3 + v5 * v3[1]) * v6;
    v7 = (v2[2] * *v3 + v2[3] * v3[1]) * *(double *)(a2 + 8);
  }
  result[1] = v7;
  return result;
}

uint64_t dlib::matrix<double,2l,2l,dlib::memory_manager_stateless_kernel_1<char>,dlib::row_major_layout>::literal_assign_helper::~literal_assign_helper(uint64_t result)
{
  _QWORD *v1;
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  void *exception;
  __int128 v10;
  _QWORD v11[33];

  if (*(_BYTE *)(result + 24))
  {
    if (*(_QWORD *)(result + 8) != 2)
    {
      std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v11);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v11, (uint64_t)"\n\nError detected at line ", 25);
      v1 = (_QWORD *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v1, (uint64_t)".\n", 2);
      v2 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v11, (uint64_t)"Error detected in file ", 23);
      v3 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)"Submodules/dlib/dlib/optimization/../matrix/matrix.h", 52);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)".\n", 2);
      v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v11, (uint64_t)"Error detected in function ", 27);
      v5 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, (uint64_t)"dlib::matrix<double, 2, 2>::literal_assign_helper::~literal_assign_helper() [T = double, num_rows = 2, num_cols = 2, mem_manager = dlib::memory_manager_stateless_kernel_1<char>, layout = dlib::row_major_layout]", 210);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)".\n\n", 3);
      v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v11, (uint64_t)"Failing expression was ", 23);
      v7 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)"!has_been_used || r == m->nr()", 30);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)".\n", 2);
      *(_DWORD *)((char *)&v11[1] + *(_QWORD *)(v11[0] - 24)) |= 1u;
      v8 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v11, (uint64_t)"You have used the matrix comma based assignment incorrectly by failing to\nsupply a full set of values for every element of a matrix object.\n", 140);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"\n", 1);
      exception = __cxa_allocate_exception(0x28uLL);
      std::stringbuf::str();
      dlib::fatal_error::fatal_error((uint64_t)exception, 20, &v10);
    }
  }
  return result;
}

void sub_1B6D4EE9C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15)
{
  void *v15;
  int v16;

  if (a14 < 0)
  {
    operator delete(__p);
    if ((v16 & 1) == 0)
    {
LABEL_6:
      std::ostringstream::~ostringstream((uint64_t)&a15);
      _Unwind_Resume(a1);
    }
  }
  else if (!v16)
  {
    goto LABEL_6;
  }
  __cxa_free_exception(v15);
  goto LABEL_6;
}

uint64_t dlib::matrix<double,2l,1l,dlib::memory_manager_stateless_kernel_1<char>,dlib::row_major_layout>::literal_assign_helper::~literal_assign_helper(uint64_t result)
{
  _QWORD *v1;
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  void *exception;
  __int128 v10;
  _QWORD v11[33];

  if (*(_BYTE *)(result + 24))
  {
    if (*(_QWORD *)(result + 8) != 2)
    {
      std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v11);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v11, (uint64_t)"\n\nError detected at line ", 25);
      v1 = (_QWORD *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v1, (uint64_t)".\n", 2);
      v2 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v11, (uint64_t)"Error detected in file ", 23);
      v3 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)"Submodules/dlib/dlib/optimization/../matrix/matrix.h", 52);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)".\n", 2);
      v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v11, (uint64_t)"Error detected in function ", 27);
      v5 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, (uint64_t)"dlib::matrix<double, 2, 1>::literal_assign_helper::~literal_assign_helper() [T = double, num_rows = 2, num_cols = 1, mem_manager = dlib::memory_manager_stateless_kernel_1<char>, layout = dlib::row_major_layout]", 210);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)".\n\n", 3);
      v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v11, (uint64_t)"Failing expression was ", 23);
      v7 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)"!has_been_used || r == m->nr()", 30);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)".\n", 2);
      *(_DWORD *)((char *)&v11[1] + *(_QWORD *)(v11[0] - 24)) |= 1u;
      v8 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v11, (uint64_t)"You have used the matrix comma based assignment incorrectly by failing to\nsupply a full set of values for every element of a matrix object.\n", 140);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"\n", 1);
      exception = __cxa_allocate_exception(0x28uLL);
      std::stringbuf::str();
      dlib::fatal_error::fatal_error((uint64_t)exception, 20, &v10);
    }
  }
  return result;
}

void sub_1B6D4F080(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15)
{
  void *v15;
  int v16;

  if (a14 < 0)
  {
    operator delete(__p);
    if ((v16 & 1) == 0)
    {
LABEL_6:
      std::ostringstream::~ostringstream((uint64_t)&a15);
      _Unwind_Resume(a1);
    }
  }
  else if (!v16)
  {
    goto LABEL_6;
  }
  __cxa_free_exception(v15);
  goto LABEL_6;
}

uint64_t *dlib::matrix_assign_big<dlib::matrix<double,51l,1l,dlib::memory_manager_stateless_kernel_1<char>,dlib::row_major_layout>,dlib::matrix_op<dlib::op_clamp_m<dlib::matrix_add_exp<dlib::matrix<double,51l,1l,dlib::memory_manager_stateless_kernel_1<char>,dlib::row_major_layout>,dlib::matrix_mul_scal_exp<dlib::matrix<double,51l,1l,dlib::memory_manager_stateless_kernel_1<char>,dlib::row_major_layout>,true>>,dlib::matrix_op<dlib::op_uniform_matrix_3<double>>,dlib::matrix_op<dlib::op_uniform_matrix_3<double>>>>>(uint64_t *result, uint64_t ***a2)
{
  uint64_t v2;
  uint64_t **v3;
  double *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t **v7;
  uint64_t v8;
  double v9;
  double v10;
  double v11;

  v2 = 0;
  v3 = a2[1];
  v4 = (double *)(*a2)[1];
  v5 = ***a2;
  v6 = **(_QWORD **)v4;
  v7 = a2[2];
  v8 = *result;
  do
  {
    v9 = *(double *)(v5 + v2) + *(double *)(v6 + v2) * v4[1];
    v10 = *((double *)v3 + 2);
    if (v10 <= v9)
      v10 = *(double *)(v5 + v2) + *(double *)(v6 + v2) * v4[1];
    if (v9 <= *((double *)v7 + 2))
      v11 = v10;
    else
      v11 = *((double *)v7 + 2);
    *(double *)(v8 + v2) = v11;
    v2 += 8;
  }
  while (v2 != 408);
  return result;
}

dlib::lbfgs_search_strategy *dlib::lbfgs_search_strategy::lbfgs_search_strategy(dlib::lbfgs_search_strategy *this, const dlib::lbfgs_search_strategy *a2)
{
  uint64_t *v4;
  uint64_t *v5;
  char *v6;
  uint64_t *v7;
  uint64_t *v8;

  *(_QWORD *)this = &unk_1E6B141E0;
  *((_QWORD *)this + 1) = &unk_1E6B14240;
  *((_QWORD *)this + 2) = 0;
  *((_BYTE *)this + 40) = 1;
  *((_QWORD *)this + 10) = 0;
  *((_QWORD *)this + 11) = 0;
  *((_QWORD *)this + 12) = &unk_1E6B14270;
  *((_QWORD *)this + 13) = 0;
  v4 = (uint64_t *)((char *)this + 104);
  *((_QWORD *)this + 14) = 0;
  *((_QWORD *)this + 15) = &unk_1E6B14270;
  *((_QWORD *)this + 16) = 0;
  v5 = (uint64_t *)((char *)this + 128);
  *((_QWORD *)this + 17) = 0;
  *((_QWORD *)this + 18) = &unk_1E6B14270;
  *(_OWORD *)((char *)this + 152) = 0u;
  v6 = (char *)this + 152;
  v7 = (uint64_t *)((char *)this + 176);
  *(_OWORD *)((char *)this + 168) = 0u;
  *((_QWORD *)this + 23) = 0;
  *((_QWORD *)this + 24) = &unk_1E6B14270;
  *((_QWORD *)this + 25) = 0;
  v8 = (uint64_t *)((char *)this + 200);
  *((_QWORD *)this + 26) = 0;
  *((_QWORD *)this + 27) = &unk_1E6B14270;
  *((_QWORD *)this + 8) = *((_QWORD *)a2 + 8);
  *((_BYTE *)this + 72) = *((_BYTE *)a2 + 72);
  *((_QWORD *)this + 6) = 0;
  dlib::matrix<double,0l,1l,dlib::memory_manager_stateless_kernel_1<char>,dlib::row_major_layout>::operator=((uint64_t *)this + 10, (uint64_t *)a2 + 10);
  dlib::matrix<double,0l,1l,dlib::memory_manager_stateless_kernel_1<char>,dlib::row_major_layout>::operator=(v4, (uint64_t *)a2 + 13);
  dlib::matrix<double,0l,1l,dlib::memory_manager_stateless_kernel_1<char>,dlib::row_major_layout>::operator=(v5, (uint64_t *)a2 + 16);
  if (this != a2)
    std::vector<double>::__assign_with_size[abi:ne180100]<double *,double *>(v6, *((char **)a2 + 19), *((_QWORD *)a2 + 20), (uint64_t)(*((_QWORD *)a2 + 20) - *((_QWORD *)a2 + 19)) >> 3);
  dlib::matrix<double,0l,1l,dlib::memory_manager_stateless_kernel_1<char>,dlib::row_major_layout>::operator=(v7, (uint64_t *)a2 + 22);
  dlib::matrix<double,0l,1l,dlib::memory_manager_stateless_kernel_1<char>,dlib::row_major_layout>::operator=(v8, (uint64_t *)a2 + 25);
  *((_QWORD *)this + 28) = *((_QWORD *)a2 + 28);
  return this;
}

void sub_1B6D4F254(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t *v2;
  _QWORD *v3;
  _QWORD *v4;
  void **v5;
  dlib::lbfgs_search_strategy::data_helper *v6;
  uint64_t v7;
  void *v9;

  dlib::lbfgs_search_strategy::data_helper::~data_helper(v6);
  v9 = *v5;
  if (*v5)
  {
    *(_QWORD *)(v1 + 160) = v9;
    operator delete(v9);
  }
  dlib::lbfgs_search_strategy::lbfgs_search_strategy(v4, v3, v2);
  *(_QWORD *)v1 = v7 + 16;
  *(_QWORD *)(v1 + 8) = v7 + 112;
  dlib::sequence_kernel_2<dlib::lbfgs_search_strategy::data_helper,dlib::memory_manager_stateless_kernel_1<char>>::delete_nodes(v1, *(_QWORD **)(v1 + 24), *(_QWORD *)(v1 + 16));
  _Unwind_Resume(a1);
}

char *std::vector<double>::__assign_with_size[abi:ne180100]<double *,double *>(char *result, char *__src, uint64_t a3, unint64_t a4)
{
  _QWORD *v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  unint64_t v11;
  void **v12;
  char *v13;
  _BYTE *v14;
  unint64_t v15;
  char *v16;
  size_t v17;
  void *v18;
  char *v19;

  v7 = result;
  v8 = *((_QWORD *)result + 2);
  v9 = *(char **)result;
  if (a4 > (v8 - *(_QWORD *)result) >> 3)
  {
    if (v9)
    {
      *((_QWORD *)result + 1) = v9;
      operator delete(v9);
      v8 = 0;
      *v7 = 0;
      v7[1] = 0;
      v7[2] = 0;
    }
    if (a4 >> 61)
      std::vector<std::unique_ptr<VCPProtoKeypoint>>::__throw_length_error[abi:ne180100]();
    v10 = v8 >> 2;
    if (v8 >> 2 <= a4)
      v10 = a4;
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8)
      v11 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v11 = v10;
    result = std::vector<void *>::__vallocate[abi:ne180100](v7, v11);
    v13 = (char *)v7[1];
    v12 = (void **)(v7 + 1);
    v9 = v13;
LABEL_16:
    v17 = a3 - (_QWORD)__src;
    if (v17)
    {
      v18 = v9;
      v19 = __src;
      goto LABEL_18;
    }
    goto LABEL_19;
  }
  v12 = (void **)(result + 8);
  v14 = (_BYTE *)*((_QWORD *)result + 1);
  v15 = (v14 - v9) >> 3;
  if (v15 >= a4)
    goto LABEL_16;
  v16 = &__src[8 * v15];
  if (v14 != v9)
  {
    result = (char *)memmove(*(void **)result, __src, v14 - v9);
    v9 = (char *)*v12;
  }
  v17 = a3 - (_QWORD)v16;
  if (v17)
  {
    v18 = v9;
    v19 = v16;
LABEL_18:
    result = (char *)memmove(v18, v19, v17);
  }
LABEL_19:
  *v12 = &v9[v17];
  return result;
}

void std::__function::__func<std::__bind<double (*)(dlib::matrix<double,0l,0l,dlib::memory_manager_stateless_kernel_1<char>,dlib::row_major_layout> const&,float *,float *,float *,float *,float *,float *,float *,int *,float *,float *),std::placeholders::__ph<1> const&,float *&,float (&)[12],float *&,float *&,float *&,float *&,float *,int *,float *&,float *&>,std::allocator<std::__bind<double (*)(dlib::matrix<double,0l,0l,dlib::memory_manager_stateless_kernel_1<char>,dlib::row_major_layout> const&,float *,float *,float *,float *,float *,float *,float *,int *,float *,float *),std::placeholders::__ph<1> const&,float *&,float (&)[12],float *&,float *&,float *&,float *&,float *,int *,float *&,float *&>>,double ()(dlib::matrix<double,0l,0l,dlib::memory_manager_stateless_kernel_1<char>,dlib::row_major_layout>)>::~__func()
{
  JUMPOUT(0x1BCCA12BCLL);
}

__n128 std::__function::__func<std::__bind<double (*)(dlib::matrix<double,0l,0l,dlib::memory_manager_stateless_kernel_1<char>,dlib::row_major_layout> const&,float *,float *,float *,float *,float *,float *,float *,int *,float *,float *),std::placeholders::__ph<1> const&,float *&,float (&)[12],float *&,float *&,float *&,float *&,float *,int *,float *&,float *&>,std::allocator<std::__bind<double (*)(dlib::matrix<double,0l,0l,dlib::memory_manager_stateless_kernel_1<char>,dlib::row_major_layout> const&,float *,float *,float *,float *,float *,float *,float *,int *,float *,float *),std::placeholders::__ph<1> const&,float *&,float (&)[12],float *&,float *&,float *&,float *&,float *,int *,float *&,float *&>>,double ()(dlib::matrix<double,0l,0l,dlib::memory_manager_stateless_kernel_1<char>,dlib::row_major_layout>)>::__clone(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x60uLL);
  *(_QWORD *)v2 = &unk_1E6B14438;
  *(_OWORD *)(v2 + 40) = *(_OWORD *)(a1 + 40);
  *(_OWORD *)(v2 + 56) = *(_OWORD *)(a1 + 56);
  *(_OWORD *)(v2 + 72) = *(_OWORD *)(a1 + 72);
  *((_QWORD *)v2 + 11) = *(_QWORD *)(a1 + 88);
  *(_OWORD *)(v2 + 8) = *(_OWORD *)(a1 + 8);
  result = *(__n128 *)(a1 + 24);
  *(__n128 *)(v2 + 24) = result;
  return result;
}

__n128 std::__function::__func<std::__bind<double (*)(dlib::matrix<double,0l,0l,dlib::memory_manager_stateless_kernel_1<char>,dlib::row_major_layout> const&,float *,float *,float *,float *,float *,float *,float *,int *,float *,float *),std::placeholders::__ph<1> const&,float *&,float (&)[12],float *&,float *&,float *&,float *&,float *,int *,float *&,float *&>,std::allocator<std::__bind<double (*)(dlib::matrix<double,0l,0l,dlib::memory_manager_stateless_kernel_1<char>,dlib::row_major_layout> const&,float *,float *,float *,float *,float *,float *,float *,int *,float *,float *),std::placeholders::__ph<1> const&,float *&,float (&)[12],float *&,float *&,float *&,float *&,float *,int *,float *&,float *&>>,double ()(dlib::matrix<double,0l,0l,dlib::memory_manager_stateless_kernel_1<char>,dlib::row_major_layout>)>::__clone(uint64_t a1, uint64_t a2)
{
  __int128 v2;
  __n128 result;
  __int128 v4;
  __int128 v5;

  *(_QWORD *)a2 = &unk_1E6B14438;
  v2 = *(_OWORD *)(a1 + 8);
  *(_OWORD *)(a2 + 24) = *(_OWORD *)(a1 + 24);
  *(_OWORD *)(a2 + 8) = v2;
  result = *(__n128 *)(a1 + 40);
  v4 = *(_OWORD *)(a1 + 56);
  v5 = *(_OWORD *)(a1 + 72);
  *(_QWORD *)(a2 + 88) = *(_QWORD *)(a1 + 88);
  *(_OWORD *)(a2 + 72) = v5;
  *(_OWORD *)(a2 + 56) = v4;
  *(__n128 *)(a2 + 40) = result;
  return result;
}

uint64_t std::__function::__func<std::__bind<double (*)(dlib::matrix<double,0l,0l,dlib::memory_manager_stateless_kernel_1<char>,dlib::row_major_layout> const&,float *,float *,float *,float *,float *,float *,float *,int *,float *,float *),std::placeholders::__ph<1> const&,float *&,float (&)[12],float *&,float *&,float *&,float *&,float *,int *,float *&,float *&>,std::allocator<std::__bind<double (*)(dlib::matrix<double,0l,0l,dlib::memory_manager_stateless_kernel_1<char>,dlib::row_major_layout> const&,float *,float *,float *,float *,float *,float *,float *,int *,float *,float *),std::placeholders::__ph<1> const&,float *&,float (&)[12],float *&,float *&,float *&,float *&,float *,int *,float *&,float *&>>,double ()(dlib::matrix<double,0l,0l,dlib::memory_manager_stateless_kernel_1<char>,dlib::row_major_layout>)>::operator()(uint64_t a1, uint64_t a2)
{
  return std::__bind<double (*)(dlib::matrix<double,0l,0l,dlib::memory_manager_stateless_kernel_1<char>,dlib::row_major_layout> const&,float *,float *,float *,float *,float *,float *,float *,int *,float *,float *),std::placeholders::__ph<1> const&,float *&,float (&)[12],float *&,float *&,float *&,float *&,float *,int *,float *&,float *&>::operator()[abi:ne180100]<dlib::matrix<double,0l,0l,dlib::memory_manager_stateless_kernel_1<char>,dlib::row_major_layout>>(a1 + 8, a2);
}

uint64_t std::__function::__func<std::__bind<double (*)(dlib::matrix<double,0l,0l,dlib::memory_manager_stateless_kernel_1<char>,dlib::row_major_layout> const&,float *,float *,float *,float *,float *,float *,float *,int *,float *,float *),std::placeholders::__ph<1> const&,float *&,float (&)[12],float *&,float *&,float *&,float *&,float *,int *,float *&,float *&>,std::allocator<std::__bind<double (*)(dlib::matrix<double,0l,0l,dlib::memory_manager_stateless_kernel_1<char>,dlib::row_major_layout> const&,float *,float *,float *,float *,float *,float *,float *,int *,float *,float *),std::placeholders::__ph<1> const&,float *&,float (&)[12],float *&,float *&,float *&,float *&,float *,int *,float *&,float *&>>,double ()(dlib::matrix<double,0l,0l,dlib::memory_manager_stateless_kernel_1<char>,dlib::row_major_layout>)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<std::__bind<double (*)(dlib::matrix<double,0l,0l,dlib::memory_manager_stateless_kernel_1<char>,dlib::row_major_layout> const&,float *,float *,float *,float *,float *,float *,float *,int *,float *,float *),std::placeholders::__ph<1> const&,float *&,float (&)[12],float *&,float *&,float *&,float *&,float *,int *,float *&,float *&>,std::allocator<std::__bind<double (*)(dlib::matrix<double,0l,0l,dlib::memory_manager_stateless_kernel_1<char>,dlib::row_major_layout> const&,float *,float *,float *,float *,float *,float *,float *,int *,float *,float *),std::placeholders::__ph<1> const&,float *&,float (&)[12],float *&,float *&,float *&,float *&,float *,int *,float *&,float *&>>,double ()(dlib::matrix<double,0l,0l,dlib::memory_manager_stateless_kernel_1<char>,dlib::row_major_layout>)>::target_type()
{
}

uint64_t std::__bind<double (*)(dlib::matrix<double,0l,0l,dlib::memory_manager_stateless_kernel_1<char>,dlib::row_major_layout> const&,float *,float *,float *,float *,float *,float *,float *,int *,float *,float *),std::placeholders::__ph<1> const&,float *&,float (&)[12],float *&,float *&,float *&,float *&,float *,int *,float *&,float *&>::operator()[abi:ne180100]<dlib::matrix<double,0l,0l,dlib::memory_manager_stateless_kernel_1<char>,dlib::row_major_layout>>(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))a1)(a2, *(_QWORD *)(a1 + 8), *(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), *(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48), *(_QWORD *)(a1 + 56), *(_QWORD *)(a1 + 64), *(_QWORD *)(a1 + 72), *(_QWORD *)(a1 + 80));
}

void std::__function::__func<std::__bind<dlib::matrix<double,0l,0l,dlib::memory_manager_stateless_kernel_1<char>,dlib::row_major_layout> (*)(dlib::matrix<double,0l,0l,dlib::memory_manager_stateless_kernel_1<char>,dlib::row_major_layout> const&,float *,float *,float *,float *,float *,float *,float *,int *,float *,float *,float *),std::placeholders::__ph<1> const&,float *&,float (&)[12],float *&,float *&,float *&,float *&,float *,int *,float *&,float *&,float *&>,std::allocator<std::__bind<dlib::matrix<double,0l,0l,dlib::memory_manager_stateless_kernel_1<char>,dlib::row_major_layout> (*)(dlib::matrix<double,0l,0l,dlib::memory_manager_stateless_kernel_1<char>,dlib::row_major_layout> const&,float *,float *,float *,float *,float *,float *,float *,int *,float *,float *,float *),std::placeholders::__ph<1> const&,float *&,float (&)[12],float *&,float *&,float *&,float *&,float *,int *,float *&,float *&,float *&>>,dlib::matrix<double,0l,0l,dlib::memory_manager_stateless_kernel_1<char>,dlib::row_major_layout> ()(dlib::matrix<double,0l,0l,dlib::memory_manager_stateless_kernel_1<char>,dlib::row_major_layout>)>::~__func()
{
  JUMPOUT(0x1BCCA12BCLL);
}

__n128 std::__function::__func<std::__bind<dlib::matrix<double,0l,0l,dlib::memory_manager_stateless_kernel_1<char>,dlib::row_major_layout> (*)(dlib::matrix<double,0l,0l,dlib::memory_manager_stateless_kernel_1<char>,dlib::row_major_layout> const&,float *,float *,float *,float *,float *,float *,float *,int *,float *,float *,float *),std::placeholders::__ph<1> const&,float *&,float (&)[12],float *&,float *&,float *&,float *&,float *,int *,float *&,float *&,float *&>,std::allocator<std::__bind<dlib::matrix<double,0l,0l,dlib::memory_manager_stateless_kernel_1<char>,dlib::row_major_layout> (*)(dlib::matrix<double,0l,0l,dlib::memory_manager_stateless_kernel_1<char>,dlib::row_major_layout> const&,float *,float *,float *,float *,float *,float *,float *,int *,float *,float *,float *),std::placeholders::__ph<1> const&,float *&,float (&)[12],float *&,float *&,float *&,float *&,float *,int *,float *&,float *&,float *&>>,dlib::matrix<double,0l,0l,dlib::memory_manager_stateless_kernel_1<char>,dlib::row_major_layout> ()(dlib::matrix<double,0l,0l,dlib::memory_manager_stateless_kernel_1<char>,dlib::row_major_layout>)>::__clone(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x68uLL);
  *(_QWORD *)v2 = &unk_1E6B14330;
  *(_OWORD *)(v2 + 40) = *(_OWORD *)(a1 + 40);
  *(_OWORD *)(v2 + 56) = *(_OWORD *)(a1 + 56);
  *(_OWORD *)(v2 + 72) = *(_OWORD *)(a1 + 72);
  *(_OWORD *)(v2 + 88) = *(_OWORD *)(a1 + 88);
  *(_OWORD *)(v2 + 8) = *(_OWORD *)(a1 + 8);
  result = *(__n128 *)(a1 + 24);
  *(__n128 *)(v2 + 24) = result;
  return result;
}

__n128 std::__function::__func<std::__bind<dlib::matrix<double,0l,0l,dlib::memory_manager_stateless_kernel_1<char>,dlib::row_major_layout> (*)(dlib::matrix<double,0l,0l,dlib::memory_manager_stateless_kernel_1<char>,dlib::row_major_layout> const&,float *,float *,float *,float *,float *,float *,float *,int *,float *,float *,float *),std::placeholders::__ph<1> const&,float *&,float (&)[12],float *&,float *&,float *&,float *&,float *,int *,float *&,float *&,float *&>,std::allocator<std::__bind<dlib::matrix<double,0l,0l,dlib::memory_manager_stateless_kernel_1<char>,dlib::row_major_layout> (*)(dlib::matrix<double,0l,0l,dlib::memory_manager_stateless_kernel_1<char>,dlib::row_major_layout> const&,float *,float *,float *,float *,float *,float *,float *,int *,float *,float *,float *),std::placeholders::__ph<1> const&,float *&,float (&)[12],float *&,float *&,float *&,float *&,float *,int *,float *&,float *&,float *&>>,dlib::matrix<double,0l,0l,dlib::memory_manager_stateless_kernel_1<char>,dlib::row_major_layout> ()(dlib::matrix<double,0l,0l,dlib::memory_manager_stateless_kernel_1<char>,dlib::row_major_layout>)>::__clone(uint64_t a1, uint64_t a2)
{
  __int128 v2;
  __n128 result;
  __int128 v4;
  __int128 v5;

  *(_QWORD *)a2 = &unk_1E6B14330;
  v2 = *(_OWORD *)(a1 + 8);
  *(_OWORD *)(a2 + 24) = *(_OWORD *)(a1 + 24);
  *(_OWORD *)(a2 + 8) = v2;
  result = *(__n128 *)(a1 + 40);
  v4 = *(_OWORD *)(a1 + 56);
  v5 = *(_OWORD *)(a1 + 72);
  *(_OWORD *)(a2 + 88) = *(_OWORD *)(a1 + 88);
  *(_OWORD *)(a2 + 72) = v5;
  *(_OWORD *)(a2 + 56) = v4;
  *(__n128 *)(a2 + 40) = result;
  return result;
}

uint64_t std::__function::__func<std::__bind<dlib::matrix<double,0l,0l,dlib::memory_manager_stateless_kernel_1<char>,dlib::row_major_layout> (*)(dlib::matrix<double,0l,0l,dlib::memory_manager_stateless_kernel_1<char>,dlib::row_major_layout> const&,float *,float *,float *,float *,float *,float *,float *,int *,float *,float *,float *),std::placeholders::__ph<1> const&,float *&,float (&)[12],float *&,float *&,float *&,float *&,float *,int *,float *&,float *&,float *&>,std::allocator<std::__bind<dlib::matrix<double,0l,0l,dlib::memory_manager_stateless_kernel_1<char>,dlib::row_major_layout> (*)(dlib::matrix<double,0l,0l,dlib::memory_manager_stateless_kernel_1<char>,dlib::row_major_layout> const&,float *,float *,float *,float *,float *,float *,float *,int *,float *,float *,float *),std::placeholders::__ph<1> const&,float *&,float (&)[12],float *&,float *&,float *&,float *&,float *,int *,float *&,float *&,float *&>>,dlib::matrix<double,0l,0l,dlib::memory_manager_stateless_kernel_1<char>,dlib::row_major_layout> ()(dlib::matrix<double,0l,0l,dlib::memory_manager_stateless_kernel_1<char>,dlib::row_major_layout>)>::operator()(uint64_t a1, uint64_t a2)
{
  return std::__bind<dlib::matrix<double,0l,0l,dlib::memory_manager_stateless_kernel_1<char>,dlib::row_major_layout> (*)(dlib::matrix<double,0l,0l,dlib::memory_manager_stateless_kernel_1<char>,dlib::row_major_layout> const&,float *,float *,float *,float *,float *,float *,float *,int *,float *,float *,float *),std::placeholders::__ph<1> const&,float *&,float (&)[12],float *&,float *&,float *&,float *&,float *,int *,float *&,float *&,float *&>::operator()[abi:ne180100]<dlib::matrix<double,0l,0l,dlib::memory_manager_stateless_kernel_1<char>,dlib::row_major_layout>>(a1 + 8, a2);
}

uint64_t std::__function::__func<std::__bind<dlib::matrix<double,0l,0l,dlib::memory_manager_stateless_kernel_1<char>,dlib::row_major_layout> (*)(dlib::matrix<double,0l,0l,dlib::memory_manager_stateless_kernel_1<char>,dlib::row_major_layout> const&,float *,float *,float *,float *,float *,float *,float *,int *,float *,float *,float *),std::placeholders::__ph<1> const&,float *&,float (&)[12],float *&,float *&,float *&,float *&,float *,int *,float *&,float *&,float *&>,std::allocator<std::__bind<dlib::matrix<double,0l,0l,dlib::memory_manager_stateless_kernel_1<char>,dlib::row_major_layout> (*)(dlib::matrix<double,0l,0l,dlib::memory_manager_stateless_kernel_1<char>,dlib::row_major_layout> const&,float *,float *,float *,float *,float *,float *,float *,int *,float *,float *,float *),std::placeholders::__ph<1> const&,float *&,float (&)[12],float *&,float *&,float *&,float *&,float *,int *,float *&,float *&,float *&>>,dlib::matrix<double,0l,0l,dlib::memory_manager_stateless_kernel_1<char>,dlib::row_major_layout> ()(dlib::matrix<double,0l,0l,dlib::memory_manager_stateless_kernel_1<char>,dlib::row_major_layout>)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<std::__bind<dlib::matrix<double,0l,0l,dlib::memory_manager_stateless_kernel_1<char>,dlib::row_major_layout> (*)(dlib::matrix<double,0l,0l,dlib::memory_manager_stateless_kernel_1<char>,dlib::row_major_layout> const&,float *,float *,float *,float *,float *,float *,float *,int *,float *,float *,float *),std::placeholders::__ph<1> const&,float *&,float (&)[12],float *&,float *&,float *&,float *&,float *,int *,float *&,float *&,float *&>,std::allocator<std::__bind<dlib::matrix<double,0l,0l,dlib::memory_manager_stateless_kernel_1<char>,dlib::row_major_layout> (*)(dlib::matrix<double,0l,0l,dlib::memory_manager_stateless_kernel_1<char>,dlib::row_major_layout> const&,float *,float *,float *,float *,float *,float *,float *,int *,float *,float *,float *),std::placeholders::__ph<1> const&,float *&,float (&)[12],float *&,float *&,float *&,float *&,float *,int *,float *&,float *&,float *&>>,dlib::matrix<double,0l,0l,dlib::memory_manager_stateless_kernel_1<char>,dlib::row_major_layout> ()(dlib::matrix<double,0l,0l,dlib::memory_manager_stateless_kernel_1<char>,dlib::row_major_layout>)>::target_type()
{
}

uint64_t std::__bind<dlib::matrix<double,0l,0l,dlib::memory_manager_stateless_kernel_1<char>,dlib::row_major_layout> (*)(dlib::matrix<double,0l,0l,dlib::memory_manager_stateless_kernel_1<char>,dlib::row_major_layout> const&,float *,float *,float *,float *,float *,float *,float *,int *,float *,float *,float *),std::placeholders::__ph<1> const&,float *&,float (&)[12],float *&,float *&,float *&,float *&,float *,int *,float *&,float *&,float *&>::operator()[abi:ne180100]<dlib::matrix<double,0l,0l,dlib::memory_manager_stateless_kernel_1<char>,dlib::row_major_layout>>(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))a1)(a2, *(_QWORD *)(a1 + 8), *(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), *(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48), *(_QWORD *)(a1 + 56), *(_QWORD *)(a1 + 64), *(_QWORD *)(a1 + 72), *(_QWORD *)(a1 + 80), *(_QWORD *)(a1 + 88));
}

uint64_t *dlib::matrix<double,0l,0l,dlib::memory_manager_stateless_kernel_1<char>,dlib::row_major_layout>::matrix<dlib::matrix<double,501l,1l,dlib::memory_manager_stateless_kernel_1<char>,dlib::row_major_layout>>(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  a1[3] = (uint64_t)&unk_1E6B14270;
  dlib::row_major_layout::layout<double,0l,0l,dlib::memory_manager_stateless_kernel_1<char>,5>::set_size(a1, 501, 1);
  v4 = 0;
  v5 = *a2;
  v6 = (_QWORD *)*a1;
  v7 = 8 * a1[2];
  do
  {
    *v6 = *(_QWORD *)(v5 + v4);
    v4 += 8;
    v6 = (_QWORD *)((char *)v6 + v7);
  }
  while (v4 != 4008);
  return a1;
}

void sub_1B6D4F6D0(_Unwind_Exception *exception_object)
{
  _QWORD *v1;

  if (*v1)
    MEMORY[0x1BCCA128C](*v1, 0x1000C8000313F17);
  _Unwind_Resume(exception_object);
}

uint64_t dlib::objective_delta_stop_strategy::should_continue_search<dlib::matrix<double,501l,1l,dlib::memory_manager_stateless_kernel_1<char>,dlib::row_major_layout>>(uint64_t a1, double a2)
{
  _QWORD *v4;
  _QWORD *v5;
  const std::locale::facet *v6;
  unint64_t v7;
  unint64_t v8;
  BOOL v9;
  uint64_t result;
  std::locale v11;

  if (*(_BYTE *)a1)
  {
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(MEMORY[0x1E0DE4A60], (uint64_t)"iteration: ", 11);
    v4 = (_QWORD *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, (uint64_t)"   objective: ", 14);
    v5 = (_QWORD *)std::ostream::operator<<();
    std::ios_base::getloc((const std::ios_base *)((char *)v5 + *(_QWORD *)(*v5 - 24)));
    v6 = std::locale::use_facet(&v11, MEMORY[0x1E0DE4A90]);
    ((void (*)(const std::locale::facet *, uint64_t))v6->__vftable[2].~facet_0)(v6, 10);
    std::locale::~locale(&v11);
    std::ostream::put();
    std::ostream::flush();
  }
  v7 = *(_QWORD *)(a1 + 24) + 1;
  *(_QWORD *)(a1 + 24) = v7;
  if (*(_BYTE *)(a1 + 1))
  {
    v8 = *(_QWORD *)(a1 + 16);
    v9 = v8 && v7 > v8;
    if (v9 || vabdd_f64(a2, *(double *)(a1 + 32)) < *(double *)(a1 + 8))
      return 0;
  }
  result = 1;
  *(_BYTE *)(a1 + 1) = 1;
  *(double *)(a1 + 32) = a2;
  return result;
}

void sub_1B6D4F814(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::locale a10)
{
  std::locale::~locale(&a10);
  _Unwind_Resume(a1);
}

uint64_t *dlib::lbfgs_search_strategy::get_next_direction<dlib::matrix<double,501l,1l,dlib::memory_manager_stateless_kernel_1<char>,dlib::row_major_layout>>(uint64_t a1, uint64_t *a2, uint64_t *a3)
{
  uint64_t *v6;
  double *v7;
  uint64_t v8;
  double *v9;
  double v10;
  uint64_t v11;
  double *v12;
  double *v13;
  double v14;
  double v15;
  double v16;
  double v17;
  unint64_t v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  double v23;
  uint64_t v24;
  double *v25;
  uint64_t v26;
  double *v27;
  double v28;
  uint64_t v29;
  double *v30;
  double *v31;
  double v32;
  double v33;
  double v34;
  uint64_t v35;
  double v36;
  double v37;
  uint64_t v38;
  double *v39;
  uint64_t v40;
  double *v41;
  double v42;
  uint64_t v43;
  double *v44;
  double *v45;
  double v46;
  double v47;
  double v48;
  double v49;
  uint64_t v50;
  unint64_t i;
  double v52;
  uint64_t v53;
  double *v54;
  uint64_t v55;
  double *v56;
  double v57;
  uint64_t v58;
  double *v59;
  double *v60;
  double v61;
  double v62;
  double v63;
  double v64;
  double v65;
  uint64_t *v67;
  double v68;

  v67 = a3;
  v68 = -1.0;
  v6 = (uint64_t *)(a1 + 128);
  dlib::matrix<double,0l,1l,dlib::memory_manager_stateless_kernel_1<char>,dlib::row_major_layout>::operator=<dlib::matrix_mul_scal_exp<dlib::matrix<double,501l,1l,dlib::memory_manager_stateless_kernel_1<char>,dlib::row_major_layout>,true>>((uint64_t *)(a1 + 128), (double *)&v67);
  if (!*(_BYTE *)(a1 + 72))
  {
    *(_BYTE *)(a1 + 72) = 1;
    v18 = *(_QWORD *)(a1 + 16);
LABEL_30:
    if (v18 > *(_QWORD *)(a1 + 64))
      dlib::sequence_kernel_2<dlib::lbfgs_search_strategy::data_helper,dlib::memory_manager_stateless_kernel_1<char>>::remove((uint64_t *)a1, 0, (uint64_t *)(a1 + 176));
    goto LABEL_32;
  }
  v67 = a2;
  *(_QWORD *)&v68 = a1 + 80;
  dlib::matrix<double,0l,1l,dlib::memory_manager_stateless_kernel_1<char>,dlib::row_major_layout>::operator=<dlib::matrix_subtract_exp<dlib::matrix<double,501l,1l,dlib::memory_manager_stateless_kernel_1<char>,dlib::row_major_layout>,dlib::matrix<double,0l,1l,dlib::memory_manager_stateless_kernel_1<char>,dlib::row_major_layout>>>((uint64_t *)(a1 + 176), &v67);
  v67 = a3;
  *(_QWORD *)&v68 = a1 + 104;
  dlib::matrix<double,0l,1l,dlib::memory_manager_stateless_kernel_1<char>,dlib::row_major_layout>::operator=<dlib::matrix_subtract_exp<dlib::matrix<double,501l,1l,dlib::memory_manager_stateless_kernel_1<char>,dlib::row_major_layout>,dlib::matrix<double,0l,1l,dlib::memory_manager_stateless_kernel_1<char>,dlib::row_major_layout>>>((uint64_t *)(a1 + 200), &v67);
  v7 = *(double **)(a1 + 200);
  v9 = *(double **)(a1 + 176);
  v8 = *(_QWORD *)(a1 + 184);
  v10 = *v9 * *v7;
  if (v8 >= 2)
  {
    v11 = v8 - 1;
    v12 = v7 + 1;
    v13 = v9 + 1;
    do
    {
      v14 = *v13++;
      v15 = v14;
      v16 = *v12++;
      v10 = v10 + v15 * v16;
      --v11;
    }
    while (v11);
  }
  v17 = v10 + 0.0;
  if (fabs(v17) <= 2.22044605e-16)
  {
    v19 = *(_QWORD *)(a1 + 16);
    if (v19)
    {
      dlib::sequence_kernel_2<dlib::lbfgs_search_strategy::data_helper,dlib::memory_manager_stateless_kernel_1<char>>::delete_nodes(a1, *(_QWORD **)(a1 + 24), v19);
      *(_QWORD *)(a1 + 16) = 0;
    }
    (*(void (**)(uint64_t))(*(_QWORD *)a1 + 24))(a1);
  }
  else
  {
    *(double *)(a1 + 224) = 1.0 / v17;
    dlib::sequence_kernel_2<dlib::lbfgs_search_strategy::data_helper,dlib::memory_manager_stateless_kernel_1<char>>::add((uint64_t *)a1, *(_QWORD *)(a1 + 16), (_QWORD *)(a1 + 176));
  }
  v20 = *(_QWORD *)(a1 + 16);
  if (v20)
  {
    std::vector<double>::resize(a1 + 152, v20);
    v21 = *(_QWORD *)(a1 + 16);
    if (v21)
    {
      v22 = v21 - 1;
      do
      {
        dlib::sequence_kernel_2<dlib::lbfgs_search_strategy::data_helper,dlib::memory_manager_stateless_kernel_1<char>>::move_to_pos(a1, (uint64_t *)(a1 + 24), (uint64_t *)(a1 + 32), v22, v21);
        v23 = *(double *)(*(_QWORD *)(a1 + 24) + 48);
        dlib::sequence_kernel_2<dlib::lbfgs_search_strategy::data_helper,dlib::memory_manager_stateless_kernel_1<char>>::move_to_pos(a1, (uint64_t *)(a1 + 24), (uint64_t *)(a1 + 32), v22, *(_QWORD *)(a1 + 16));
        v24 = *(_QWORD *)(a1 + 24);
        v25 = *(double **)(a1 + 128);
        v27 = *(double **)v24;
        v26 = *(_QWORD *)(v24 + 8);
        v28 = *v27 * *v25;
        if (v26 >= 2)
        {
          v29 = v26 - 1;
          v30 = v25 + 1;
          v31 = v27 + 1;
          do
          {
            v32 = *v31++;
            v33 = v32;
            v34 = *v30++;
            v28 = v28 + v33 * v34;
            --v29;
          }
          while (v29);
        }
        v35 = *(_QWORD *)(a1 + 152);
        *(double *)(v35 + 8 * v22) = v23 * (v28 + 0.0);
        dlib::sequence_kernel_2<dlib::lbfgs_search_strategy::data_helper,dlib::memory_manager_stateless_kernel_1<char>>::move_to_pos(a1, (uint64_t *)(a1 + 24), (uint64_t *)(a1 + 32), v22, *(_QWORD *)(a1 + 16));
        v36 = *(double *)(v35 + 8 * v22);
        v67 = (uint64_t *)(*(_QWORD *)(a1 + 24) + 24);
        v68 = v36;
        dlib::matrix<double,0l,1l,dlib::memory_manager_stateless_kernel_1<char>,dlib::row_major_layout>::operator-=<dlib::matrix_mul_scal_exp<dlib::matrix<double,0l,1l,dlib::memory_manager_stateless_kernel_1<char>,dlib::row_major_layout>,true>>(v6, (uint64_t *)&v67);
        --v22;
        v21 = *(_QWORD *)(a1 + 16);
      }
      while (v22 < v21);
    }
    dlib::sequence_kernel_2<dlib::lbfgs_search_strategy::data_helper,dlib::memory_manager_stateless_kernel_1<char>>::move_to_pos(a1, (uint64_t *)(a1 + 24), (uint64_t *)(a1 + 32), v21 - 1, v21);
    v37 = 1.0 / *(double *)(*(_QWORD *)(a1 + 24) + 48);
    dlib::sequence_kernel_2<dlib::lbfgs_search_strategy::data_helper,dlib::memory_manager_stateless_kernel_1<char>>::move_to_pos(a1, (uint64_t *)(a1 + 24), (uint64_t *)(a1 + 32), *(_QWORD *)(a1 + 16) - 1, *(_QWORD *)(a1 + 16));
    v38 = *(_QWORD *)(a1 + 24);
    dlib::sequence_kernel_2<dlib::lbfgs_search_strategy::data_helper,dlib::memory_manager_stateless_kernel_1<char>>::move_to_pos(a1, (uint64_t *)(a1 + 24), (uint64_t *)(a1 + 32), *(_QWORD *)(a1 + 16) - 1, *(_QWORD *)(a1 + 16));
    v39 = *(double **)(*(_QWORD *)(a1 + 24) + 24);
    v41 = *(double **)(v38 + 24);
    v40 = *(_QWORD *)(v38 + 32);
    v42 = *v41 * *v39;
    if (v40 >= 2)
    {
      v43 = v40 - 1;
      v44 = v39 + 1;
      v45 = v41 + 1;
      do
      {
        v46 = *v45++;
        v47 = v46;
        v48 = *v44++;
        v42 = v42 + v47 * v48;
        --v43;
      }
      while (v43);
    }
    v49 = v37 / (v42 + 0.0);
    *(double *)&v50 = 0.001;
    if (v49 >= 0.001)
    {
      *(double *)&v50 = 1000.0;
      if (v49 <= 1000.0)
        *(double *)&v50 = v49;
    }
    v67 = v6;
    v68 = *(double *)&v50;
    dlib::matrix<double,0l,1l,dlib::memory_manager_stateless_kernel_1<char>,dlib::row_major_layout>::operator=<dlib::matrix_mul_scal_exp<dlib::matrix<double,0l,1l,dlib::memory_manager_stateless_kernel_1<char>,dlib::row_major_layout>,true>>(v6, (uint64_t)&v67);
    v18 = *(_QWORD *)(a1 + 16);
    if (v18)
    {
      for (i = 0; i < v18; ++i)
      {
        dlib::sequence_kernel_2<dlib::lbfgs_search_strategy::data_helper,dlib::memory_manager_stateless_kernel_1<char>>::move_to_pos(a1, (uint64_t *)(a1 + 24), (uint64_t *)(a1 + 32), i, v18);
        v52 = *(double *)(*(_QWORD *)(a1 + 24) + 48);
        dlib::sequence_kernel_2<dlib::lbfgs_search_strategy::data_helper,dlib::memory_manager_stateless_kernel_1<char>>::move_to_pos(a1, (uint64_t *)(a1 + 24), (uint64_t *)(a1 + 32), i, *(_QWORD *)(a1 + 16));
        v53 = *(_QWORD *)(a1 + 24);
        v54 = *(double **)(a1 + 128);
        v56 = *(double **)(v53 + 24);
        v55 = *(_QWORD *)(v53 + 32);
        v57 = *v56 * *v54;
        if (v55 >= 2)
        {
          v58 = v55 - 1;
          v59 = v54 + 1;
          v60 = v56 + 1;
          do
          {
            v61 = *v60++;
            v62 = v61;
            v63 = *v59++;
            v57 = v57 + v62 * v63;
            --v58;
          }
          while (v58);
        }
        v64 = v52 * (v57 + 0.0);
        dlib::sequence_kernel_2<dlib::lbfgs_search_strategy::data_helper,dlib::memory_manager_stateless_kernel_1<char>>::move_to_pos(a1, (uint64_t *)(a1 + 24), (uint64_t *)(a1 + 32), i, *(_QWORD *)(a1 + 16));
        v65 = *(double *)(*(_QWORD *)(a1 + 152) + 8 * i) - v64;
        v67 = *(uint64_t **)(a1 + 24);
        v68 = v65;
        dlib::matrix<double,0l,1l,dlib::memory_manager_stateless_kernel_1<char>,dlib::row_major_layout>::operator+=<dlib::matrix_mul_scal_exp<dlib::matrix<double,0l,1l,dlib::memory_manager_stateless_kernel_1<char>,dlib::row_major_layout>,true>>(v6, (uint64_t)&v67);
        v18 = *(_QWORD *)(a1 + 16);
      }
      goto LABEL_30;
    }
  }
LABEL_32:
  dlib::matrix<double,0l,1l,dlib::memory_manager_stateless_kernel_1<char>,dlib::row_major_layout>::operator=<dlib::matrix<double,501l,1l,dlib::memory_manager_stateless_kernel_1<char>,dlib::row_major_layout>>((uint64_t *)(a1 + 80), a2);
  dlib::matrix<double,0l,1l,dlib::memory_manager_stateless_kernel_1<char>,dlib::row_major_layout>::operator=<dlib::matrix<double,501l,1l,dlib::memory_manager_stateless_kernel_1<char>,dlib::row_major_layout>>((uint64_t *)(a1 + 104), a3);
  return v6;
}

double dlib::line_search<dlib::line_search_funct<std::function<double ()(dlib::matrix<double,0l,0l,dlib::memory_manager_stateless_kernel_1<char>,dlib::row_major_layout>)>,dlib::matrix<double,501l,1l,dlib::memory_manager_stateless_kernel_1<char>,dlib::row_major_layout>>,dlib::line_search_funct<std::function<dlib::matrix<double,0l,0l,dlib::memory_manager_stateless_kernel_1<char>,dlib::row_major_layout> ()(dlib::matrix<double,0l,0l,dlib::memory_manager_stateless_kernel_1<char>,dlib::row_major_layout>)>,dlib::matrix<double,501l,1l,dlib::memory_manager_stateless_kernel_1<char>,dlib::row_major_layout>>>(uint64_t *a1, uint64_t *a2, unint64_t a3, double a4, double a5, double a6, double a7, double a8)
{
  double v11;
  double v12;
  double v18;
  double v19;
  double v20;
  double v21;
  double v22;
  double v23;
  double v24;
  double v25;
  unint64_t v26;
  double v27;
  double v28;
  double v29;
  double v30;
  double v31;
  double v35;
  double v36;
  double v37;
  _BOOL4 v38;
  double v39;
  double v40;
  double v41;
  double v42;
  double v43;
  double v44;
  double v45;
  double v46;
  double v47;
  double v48;
  double v49;
  double v50;
  double v51;
  double v52;
  double v53;
  double v54;
  double v55;
  double v56;
  double v57;
  double v58;
  double v59;
  double v60;
  double v61;
  double v62;
  double v63;
  double v64;
  double v65;
  double v66;
  double v67;
  double v68;
  double v69;
  double v70;
  double v71;
  double v72;
  double v73;
  double v74;
  double v75;
  double v76;
  double v77;
  double v78;
  double v81;
  double v82;
  double v83;
  double v84;
  double v86;
  double v87;
  double v88;
  double v89;
  double v90;
  double v91;
  double v92;
  double v93;
  double v94;
  double v95;
  double v97;

  v11 = fabs(a4) * 2.22044605e-16;
  v12 = 0.0;
  if (fabs(a5) > v11 && a4 > a8)
  {
    v18 = (a8 - a4) / (a5 * a6);
    v19 = 1.0;
    if (v18 < 0.0)
      v19 = -1.0;
    v20 = v18 * 0.65;
    if (v18 * 0.65 <= 0.0)
    {
      v21 = v18 * 0.65;
      if (v19 < v20)
        goto LABEL_15;
      v21 = 0.0;
      if (v19 > 0.0)
        goto LABEL_15;
    }
    else
    {
      v21 = 0.0;
      if (v18 < 0.0)
        goto LABEL_15;
      v21 = v18 * 0.65;
      if (v20 < 1.0)
        goto LABEL_15;
    }
    v21 = v19;
LABEL_15:
    v97 = v21;
    v22 = dlib::line_search_funct<std::function<double ()(dlib::matrix<double,0l,0l,dlib::memory_manager_stateless_kernel_1<char>,dlib::row_major_layout>)>,dlib::matrix<double,501l,1l,dlib::memory_manager_stateless_kernel_1<char>,dlib::row_major_layout>>::operator()(a1, (uint64_t *)&v97);
    v23 = dlib::line_search_funct<std::function<dlib::matrix<double,0l,0l,dlib::memory_manager_stateless_kernel_1<char>,dlib::row_major_layout> ()(dlib::matrix<double,0l,0l,dlib::memory_manager_stateless_kernel_1<char>,dlib::row_major_layout>)>,dlib::matrix<double,501l,1l,dlib::memory_manager_stateless_kernel_1<char>,dlib::row_major_layout>>::operator()(a2, (uint64_t *)&v97);
    v12 = v97;
    if (v22 <= a8)
      return v12;
    v24 = a5;
    v92 = v11;
    v93 = fabs(a5 * a7);
    v25 = 0.0;
    v26 = 1;
    v27 = a4;
    v28 = a5;
    v95 = v27;
    do
    {
      v29 = v25;
      v30 = v27;
      v31 = v28;
      v27 = v22;
      v28 = v23;
      v25 = v12;
      if (v22 > v95 + v12 * a6 * v24 || v22 >= v30)
      {
        v86 = a6;
        v91 = a8;
        v61 = v29;
        v62 = v30;
        v94 = v31;
LABEL_71:
        v63 = -2.0;
        while (2)
        {
          v87 = v94 * v63;
          v89 = v62;
          v90 = fabs(v61);
LABEL_73:
          v64 = v28;
          v12 = v25;
          v88 = v27;
          v65 = v94 + v28 + (v27 - v62) * v63;
          v66 = 0.5;
          if (fabs(v65) > 2.22044605e-16)
          {
            v67 = v87 + (v27 - v62) * 3.0 - v28;
            v68 = v65 * 3.0;
            v69 = v67 * v67 - v65 * 3.0 * v94;
            v66 = 0.0;
            if (v69 < 0.0)
              v69 = 0.0;
            v70 = sqrt(v69);
            v71 = (v70 - v67) / v68;
            v72 = -(v67 + v70) / v68;
            if (v62 + v94 * v71 + v67 * v71 * v71 + v71 * (v65 * v71) * v71 >= v62
                                                                              + v94 * v72
                                                                              + v67 * v72 * v72
                                                                              + v72 * (v65 * v72) * v72)
              v73 = v72;
            else
              v73 = v71;
            if (v73 >= 0.0)
            {
              v66 = 1.0;
              if (v73 <= 1.0)
                v66 = v73;
            }
          }
          v74 = v25 - v61;
          v75 = v61 + (v25 - v61) * 0.1;
          v76 = v12 + (v12 - v61) * -0.5;
          v77 = v61 + (v12 - v61) * v66;
          if (v75 >= v76)
          {
            v78 = v12 + (v12 - v61) * -0.5;
            if (v77 < v76 || (v78 = v61 + (v12 - v61) * 0.1, v77 > v75))
            {
LABEL_89:
              ++v26;
              v97 = v78;
              v27 = dlib::line_search_funct<std::function<double ()(dlib::matrix<double,0l,0l,dlib::memory_manager_stateless_kernel_1<char>,dlib::row_major_layout>)>,dlib::matrix<double,501l,1l,dlib::memory_manager_stateless_kernel_1<char>,dlib::row_major_layout>>::operator()(a1, (uint64_t *)&v97);
              v28 = dlib::line_search_funct<std::function<dlib::matrix<double,0l,0l,dlib::memory_manager_stateless_kernel_1<char>,dlib::row_major_layout> ()(dlib::matrix<double,0l,0l,dlib::memory_manager_stateless_kernel_1<char>,dlib::row_major_layout>)>,dlib::matrix<double,501l,1l,dlib::memory_manager_stateless_kernel_1<char>,dlib::row_major_layout>>::operator()(a2, (uint64_t *)&v97);
              if (v27 <= v91 || v26 >= a3)
                return v97;
              if (v61 == v75 || v12 == v76)
                return v12;
              v81 = fabs(v12);
              if (v90 >= v81)
                v81 = v90;
              v25 = v97;
              if (fabs(v81 * a5) <= v92)
                return v25;
              v62 = v89;
              v63 = -2.0;
              if (v27 < v89 && v27 <= v95 + v97 * v86 * a5)
              {
                if (fabs(v28) <= v93)
                  return v25;
                if (v74 * v28 >= 0.0)
                  v82 = v61;
                else
                  v82 = v12;
                v83 = v88;
                if (v74 * v28 >= 0.0)
                  v83 = v89;
                v61 = v97;
                v25 = v82;
                v84 = v94;
                if (v74 * v28 < 0.0)
                  v84 = v64;
                v62 = v27;
                v27 = v83;
                v94 = v28;
                v28 = v84;
                continue;
              }
              goto LABEL_73;
            }
          }
          else
          {
            v78 = v61 + (v12 - v61) * 0.1;
            if (v77 < v75)
              goto LABEL_89;
            v78 = v12 + (v12 - v61) * -0.5;
            if (v77 > v76)
              goto LABEL_89;
          }
          break;
        }
        v78 = v77;
        goto LABEL_89;
      }
      if (fabs(v23) <= v93 || v29 == v12 || v26 >= a3)
        return v25;
      if (v23 >= 0.0)
      {
        v86 = a6;
        v91 = a8;
        v61 = v12;
        v25 = v29;
        v62 = v22;
        v27 = v30;
        v94 = v23;
        v28 = v31;
        goto LABEL_71;
      }
      v35 = v12 + (v12 - v29) * 1.4;
      v36 = v12 + (v12 - v29) * 9.0;
      if (v18 >= v35)
        v37 = v18;
      else
        v37 = v12 + (v12 - v29) * 1.4;
      v38 = v18 < v36;
      if (v35 >= v18)
        v35 = v18;
      if (v18 <= 0.0)
        v35 = v37;
      else
        v38 = v36 < v18;
      if (!v38)
        v36 = v18;
      v39 = v31 + v28;
      if (v29 >= v12)
      {
        v50 = v30 - v22;
        v51 = v39 + (v30 - v22) * -2.0;
        v52 = 0.5;
        if (fabs(v51) > 2.22044605e-16)
        {
          v53 = v28 * -2.0 + v50 * 3.0 - v31;
          v54 = v51 * 3.0;
          v55 = v53 * v53 - v51 * 3.0 * v28;
          v52 = 0.0;
          if (v55 < 0.0)
            v55 = 0.0;
          v56 = sqrt(v55);
          v57 = (v56 - v53) / v54;
          v58 = -(v53 + v56) / v54;
          if (v22 + v28 * v57 + v53 * v57 * v57 + v57 * (v51 * v57) * v57 >= v22
                                                                            + v28 * v58
                                                                            + v53 * v58 * v58
                                                                            + v58 * (v51 * v58) * v58)
            v59 = v58;
          else
            v59 = v57;
          if (v59 >= 0.0)
          {
            v52 = 1.0e10;
            if (v59 <= 1.0e10)
              v52 = v59;
          }
        }
        v49 = v12 + (v29 - v12) * v52;
      }
      else
      {
        v40 = v39 + (v22 - v30) * -2.0;
        v41 = 0.5;
        if (fabs(v40) > 2.22044605e-16)
        {
          v42 = v31 * -2.0 + (v22 - v30) * 3.0 - v28;
          v43 = v40 * 3.0;
          v44 = v42 * v42 - v40 * 3.0 * v31;
          v41 = 0.0;
          if (v44 < 0.0)
            v44 = 0.0;
          v45 = sqrt(v44);
          v46 = (v45 - v42) / v43;
          v47 = -(v42 + v45) / v43;
          if (v30 + v31 * v46 + v42 * v46 * v46 + v46 * (v40 * v46) * v46 >= v30
                                                                            + v31 * v47
                                                                            + v42 * v47 * v47
                                                                            + v47 * (v40 * v47) * v47)
            v48 = v47;
          else
            v48 = v46;
          if (v48 >= 0.0)
          {
            v41 = 1.0e10;
            if (v48 <= 1.0e10)
              v41 = v48;
          }
        }
        v49 = v29 + (v12 - v29) * v41;
      }
      if (v35 >= v36)
      {
        v60 = v36;
        if (v49 < v36)
          goto LABEL_68;
        v60 = v35;
        if (v49 > v35)
          goto LABEL_68;
      }
      else
      {
        v60 = v35;
        if (v49 < v35)
          goto LABEL_68;
        v60 = v36;
        if (v49 > v36)
          goto LABEL_68;
      }
      v60 = v49;
LABEL_68:
      v97 = v60;
      ++v26;
      v22 = dlib::line_search_funct<std::function<double ()(dlib::matrix<double,0l,0l,dlib::memory_manager_stateless_kernel_1<char>,dlib::row_major_layout>)>,dlib::matrix<double,501l,1l,dlib::memory_manager_stateless_kernel_1<char>,dlib::row_major_layout>>::operator()(a1, (uint64_t *)&v97);
      v23 = dlib::line_search_funct<std::function<dlib::matrix<double,0l,0l,dlib::memory_manager_stateless_kernel_1<char>,dlib::row_major_layout> ()(dlib::matrix<double,0l,0l,dlib::memory_manager_stateless_kernel_1<char>,dlib::row_major_layout>)>,dlib::matrix<double,501l,1l,dlib::memory_manager_stateless_kernel_1<char>,dlib::row_major_layout>>::operator()(a2, (uint64_t *)&v97);
      v24 = a5;
      v12 = v97;
    }
    while (v22 > a8);
  }
  return v12;
}

_QWORD *dlib::matrix_assign_big<dlib::matrix<double,501l,1l,dlib::memory_manager_stateless_kernel_1<char>,dlib::row_major_layout>,dlib::matrix<double,0l,0l,dlib::memory_manager_stateless_kernel_1<char>,dlib::row_major_layout>>(_QWORD *result, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t *v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;

  v2 = a2[1];
  if (v2 >= 1)
  {
    v3 = 0;
    v4 = 0;
    v5 = a2[2];
    v6 = (_QWORD *)*result;
    do
    {
      if (v5 >= 1)
      {
        v7 = (uint64_t *)(*a2 + v3);
        v8 = v6;
        v9 = v5;
        do
        {
          v10 = *v7++;
          *v8++ = v10;
          --v9;
        }
        while (v9);
      }
      ++v4;
      ++v6;
      v3 += 8 * v5;
    }
    while (v4 != v2);
  }
  return result;
}

uint64_t *dlib::matrix<double,0l,1l,dlib::memory_manager_stateless_kernel_1<char>,dlib::row_major_layout>::operator=<dlib::matrix_mul_scal_exp<dlib::matrix<double,501l,1l,dlib::memory_manager_stateless_kernel_1<char>,dlib::row_major_layout>,true>>(uint64_t *a1, double *a2)
{
  double v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  double v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  if (a1[1] == 501)
  {
    v4 = a2[1];
    v5 = **(_QWORD **)a2;
    v6 = *a1;
    v7 = 0;
    if (v4 == 1.0)
    {
      do
      {
        *(_QWORD *)(v6 + v7) = *(_QWORD *)(v5 + v7);
        v7 += 8;
      }
      while (v7 != 4008);
    }
    else
    {
      do
      {
        *(double *)(v6 + v7) = v4 * *(double *)(v5 + v7);
        v7 += 8;
      }
      while (v7 != 4008);
    }
  }
  else
  {
    dlib::row_major_layout::layout<double,0l,1l,dlib::memory_manager_stateless_kernel_1<char>,3>::set_size(a1, 501);
    v8 = a2[1];
    v9 = **(_QWORD **)a2;
    v10 = *a1;
    v11 = 0;
    if (v8 == 1.0)
    {
      do
      {
        *(_QWORD *)(v10 + v11) = *(_QWORD *)(v9 + v11);
        v11 += 8;
      }
      while (v11 != 4008);
    }
    else
    {
      do
      {
        *(double *)(v10 + v11) = v8 * *(double *)(v9 + v11);
        v11 += 8;
      }
      while (v11 != 4008);
    }
  }
  return a1;
}

uint64_t *dlib::matrix<double,0l,1l,dlib::memory_manager_stateless_kernel_1<char>,dlib::row_major_layout>::operator=<dlib::matrix_subtract_exp<dlib::matrix<double,501l,1l,dlib::memory_manager_stateless_kernel_1<char>,dlib::row_major_layout>,dlib::matrix<double,0l,1l,dlib::memory_manager_stateless_kernel_1<char>,dlib::row_major_layout>>>(uint64_t *a1, uint64_t **a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  if (a1[1] == 501)
  {
    v4 = 0;
    v5 = **a2;
    v6 = *a2[1];
    v7 = *a1;
    do
    {
      *(double *)(v7 + v4) = *(double *)(v5 + v4) - *(double *)(v6 + v4);
      v4 += 8;
    }
    while (v4 != 4008);
  }
  else
  {
    dlib::row_major_layout::layout<double,0l,1l,dlib::memory_manager_stateless_kernel_1<char>,3>::set_size(a1, 501);
    v8 = 0;
    v9 = **a2;
    v10 = *a2[1];
    v11 = *a1;
    do
    {
      *(double *)(v11 + v8) = *(double *)(v9 + v8) - *(double *)(v10 + v8);
      v8 += 8;
    }
    while (v8 != 4008);
  }
  return a1;
}

uint64_t *dlib::matrix<double,0l,1l,dlib::memory_manager_stateless_kernel_1<char>,dlib::row_major_layout>::operator=<dlib::matrix<double,501l,1l,dlib::memory_manager_stateless_kernel_1<char>,dlib::row_major_layout>>(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  if (a1[1] == 501)
  {
    v4 = 0;
    v5 = *a2;
    v6 = *a1;
    do
    {
      *(_QWORD *)(v6 + v4) = *(_QWORD *)(v5 + v4);
      v4 += 8;
    }
    while (v4 != 4008);
  }
  else
  {
    dlib::row_major_layout::layout<double,0l,1l,dlib::memory_manager_stateless_kernel_1<char>,3>::set_size(a1, 501);
    v7 = 0;
    v8 = *a2;
    v9 = *a1;
    do
    {
      *(_QWORD *)(v9 + v7) = *(_QWORD *)(v8 + v7);
      v7 += 8;
    }
    while (v7 != 4008);
  }
  return a1;
}

double dlib::line_search_funct<std::function<double ()(dlib::matrix<double,0l,0l,dlib::memory_manager_stateless_kernel_1<char>,dlib::row_major_layout>)>,dlib::matrix<double,501l,1l,dlib::memory_manager_stateless_kernel_1<char>,dlib::row_major_layout>>::operator()(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  double v7;
  double v8;
  double *v9;
  _QWORD v11[2];
  _QWORD v12[2];
  uint64_t v13[4];

  v4 = *a1;
  v3 = a1[1];
  v5 = *a2;
  v11[0] = a1[2];
  v11[1] = v5;
  v12[0] = v3;
  v12[1] = v11;
  dlib::matrix<double,0l,0l,dlib::memory_manager_stateless_kernel_1<char>,dlib::row_major_layout>::matrix<dlib::matrix_add_exp<dlib::matrix<double,501l,1l,dlib::memory_manager_stateless_kernel_1<char>,dlib::row_major_layout>,dlib::matrix_mul_scal_exp<dlib::matrix<double,501l,1l,dlib::memory_manager_stateless_kernel_1<char>,dlib::row_major_layout>,true>>>(v13, (uint64_t)v12);
  v6 = *(_QWORD *)(v4 + 24);
  if (!v6)
    std::__throw_bad_function_call[abi:ne180100]();
  v7 = (*(double (**)(uint64_t, uint64_t *))(*(_QWORD *)v6 + 48))(v6, v13);
  v8 = v7;
  v9 = (double *)a1[4];
  if (v9)
    *v9 = v7;
  if (v13[0])
    MEMORY[0x1BCCA128C](v13[0], 0x1000C8000313F17);
  return v8;
}

void sub_1B6D505B0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13)
{
  if (a13)
    MEMORY[0x1BCCA128C](a13, 0x1000C8000313F17);
  _Unwind_Resume(exception_object);
}

double dlib::line_search_funct<std::function<dlib::matrix<double,0l,0l,dlib::memory_manager_stateless_kernel_1<char>,dlib::row_major_layout> ()(dlib::matrix<double,0l,0l,dlib::memory_manager_stateless_kernel_1<char>,dlib::row_major_layout>)>,dlib::matrix<double,501l,1l,dlib::memory_manager_stateless_kernel_1<char>,dlib::row_major_layout>>::operator()(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  double v7;
  _QWORD v9[2];
  _QWORD v10[2];
  uint64_t v11[4];
  _QWORD v12[4];

  v4 = *a1;
  v3 = a1[1];
  v5 = *a2;
  v9[0] = a1[2];
  v9[1] = v5;
  v10[0] = v3;
  v10[1] = v9;
  dlib::matrix<double,0l,0l,dlib::memory_manager_stateless_kernel_1<char>,dlib::row_major_layout>::matrix<dlib::matrix_add_exp<dlib::matrix<double,501l,1l,dlib::memory_manager_stateless_kernel_1<char>,dlib::row_major_layout>,dlib::matrix_mul_scal_exp<dlib::matrix<double,501l,1l,dlib::memory_manager_stateless_kernel_1<char>,dlib::row_major_layout>,true>>>(v11, (uint64_t)v10);
  v6 = *(_QWORD *)(v4 + 24);
  if (!v6)
    std::__throw_bad_function_call[abi:ne180100]();
  (*(void (**)(_QWORD *__return_ptr, uint64_t, uint64_t *))(*(_QWORD *)v6 + 48))(v12, v6, v11);
  v7 = dlib::line_search_funct<std::function<dlib::matrix<double,0l,0l,dlib::memory_manager_stateless_kernel_1<char>,dlib::row_major_layout> ()(dlib::matrix<double,0l,0l,dlib::memory_manager_stateless_kernel_1<char>,dlib::row_major_layout>)>,dlib::matrix<double,501l,1l,dlib::memory_manager_stateless_kernel_1<char>,dlib::row_major_layout>>::get_value<dlib::matrix<double,0l,0l,dlib::memory_manager_stateless_kernel_1<char>,dlib::row_major_layout>>((uint64_t)a1, v12);
  if (v12[0])
    MEMORY[0x1BCCA128C](v12[0], 0x1000C8000313F17);
  if (v11[0])
    MEMORY[0x1BCCA128C](v11[0], 0x1000C8000313F17);
  return v7;
}

void sub_1B6D5069C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17)
{
  if (a17)
    MEMORY[0x1BCCA128C](a17, 0x1000C8000313F17);
  if (a13)
    MEMORY[0x1BCCA128C](a13, 0x1000C8000313F17);
  _Unwind_Resume(exception_object);
}

uint64_t *dlib::matrix<double,0l,0l,dlib::memory_manager_stateless_kernel_1<char>,dlib::row_major_layout>::matrix<dlib::matrix_add_exp<dlib::matrix<double,501l,1l,dlib::memory_manager_stateless_kernel_1<char>,dlib::row_major_layout>,dlib::matrix_mul_scal_exp<dlib::matrix<double,501l,1l,dlib::memory_manager_stateless_kernel_1<char>,dlib::row_major_layout>,true>>>(uint64_t *a1, uint64_t a2)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  a1[3] = (uint64_t)&unk_1E6B14270;
  dlib::row_major_layout::layout<double,0l,0l,dlib::memory_manager_stateless_kernel_1<char>,5>::set_size(a1, 501, 1);
  dlib::blas_bindings::matrix_assign_blas_proxy<dlib::matrix<double,0l,0l,dlib::memory_manager_stateless_kernel_1<char>,dlib::row_major_layout>,dlib::matrix<double,501l,1l,dlib::memory_manager_stateless_kernel_1<char>,dlib::row_major_layout>,dlib::matrix_mul_scal_exp<dlib::matrix<double,501l,1l,dlib::memory_manager_stateless_kernel_1<char>,dlib::row_major_layout>,true>>((double **)a1, a2, 0, 0, 1.0);
  return a1;
}

void sub_1B6D50744(_Unwind_Exception *exception_object)
{
  _QWORD *v1;

  if (*v1)
    MEMORY[0x1BCCA128C](*v1, 0x1000C8000313F17);
  _Unwind_Resume(exception_object);
}

double **dlib::blas_bindings::matrix_assign_blas_proxy<dlib::matrix<double,0l,0l,dlib::memory_manager_stateless_kernel_1<char>,dlib::row_major_layout>,dlib::matrix<double,501l,1l,dlib::memory_manager_stateless_kernel_1<char>,dlib::row_major_layout>,dlib::matrix_mul_scal_exp<dlib::matrix<double,501l,1l,dlib::memory_manager_stateless_kernel_1<char>,dlib::row_major_layout>,true>>(double **a1, uint64_t a2, int a3, char a4, double a5)
{
  dlib::blas_bindings::matrix_assign_blas_helper<dlib::matrix<double,0l,0l,dlib::memory_manager_stateless_kernel_1<char>,dlib::row_major_layout>,dlib::matrix<double,501l,1l,dlib::memory_manager_stateless_kernel_1<char>,dlib::row_major_layout>,void>::assign<dlib::matrix<double,501l,1l,dlib::memory_manager_stateless_kernel_1<char>,dlib::row_major_layout>>(a1, *(uint64_t **)a2, a3, a4, a5);
  return dlib::blas_bindings::matrix_assign_blas_helper<dlib::matrix<double,0l,0l,dlib::memory_manager_stateless_kernel_1<char>,dlib::row_major_layout>,dlib::matrix<double,501l,1l,dlib::memory_manager_stateless_kernel_1<char>,dlib::row_major_layout>,void>::assign<dlib::matrix<double,501l,1l,dlib::memory_manager_stateless_kernel_1<char>,dlib::row_major_layout>>(a1, **(uint64_t ***)(a2 + 8), 1, a4, *(double *)(*(_QWORD *)(a2 + 8) + 8) * a5);
}

double **dlib::blas_bindings::matrix_assign_blas_helper<dlib::matrix<double,0l,0l,dlib::memory_manager_stateless_kernel_1<char>,dlib::row_major_layout>,dlib::matrix<double,501l,1l,dlib::memory_manager_stateless_kernel_1<char>,dlib::row_major_layout>,void>::assign<dlib::matrix<double,501l,1l,dlib::memory_manager_stateless_kernel_1<char>,dlib::row_major_layout>>(double **result, uint64_t *a2, int a3, char a4, double a5)
{
  uint64_t v5;
  uint64_t v6;
  double *v7;
  uint64_t v8;
  uint64_t v9;
  double *v10;
  uint64_t v11;
  uint64_t v12;
  double *v13;
  uint64_t v14;
  uint64_t v15;
  double *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  double *v20;
  uint64_t v21;
  uint64_t v22;
  double *v23;
  uint64_t v24;
  uint64_t v25;

  if ((a4 & 1) != 0)
  {
    if (a3)
    {
      if (a5 == 1.0)
      {
        v5 = 0;
        v6 = *a2;
        v7 = *result;
        do
        {
          v7[v5] = *(double *)(v6 + v5 * 8) + v7[v5];
          ++v5;
        }
        while (v5 != 501);
      }
      else
      {
        v19 = *a2;
        v20 = *result;
        v21 = 0;
        if (a5 == -1.0)
        {
          do
          {
            v20[v21] = v20[v21] - *(double *)(v19 + v21 * 8);
            ++v21;
          }
          while (v21 != 501);
        }
        else
        {
          do
          {
            v20[v21] = v20[v21] + a5 * *(double *)(v19 + v21 * 8);
            ++v21;
          }
          while (v21 != 501);
        }
      }
    }
    else
    {
      v12 = *a2;
      v13 = *result;
      v14 = 0;
      if (a5 == 1.0)
      {
        do
        {
          v13[v14] = *(double *)(v12 + v14 * 8);
          ++v14;
        }
        while (v14 != 501);
      }
      else
      {
        do
        {
          v13[v14] = *(double *)(v12 + v14 * 8) * a5;
          ++v14;
        }
        while (v14 != 501);
      }
    }
  }
  else if (a3)
  {
    if (a5 == 1.0)
    {
      v8 = 0;
      v9 = *a2;
      v10 = *result;
      v11 = 8 * (_QWORD)result[2];
      do
      {
        *v10 = *(double *)(v9 + v8) + *v10;
        v8 += 8;
        v10 = (double *)((char *)v10 + v11);
      }
      while (v8 != 4008);
    }
    else
    {
      v22 = *a2;
      v23 = *result;
      v24 = 0;
      v25 = 8 * (_QWORD)result[2];
      if (a5 == -1.0)
      {
        do
        {
          *v23 = *v23 - *(double *)(v22 + v24);
          v24 += 8;
          v23 = (double *)((char *)v23 + v25);
        }
        while (v24 != 4008);
      }
      else
      {
        do
        {
          *v23 = *v23 + a5 * *(double *)(v22 + v24);
          v24 += 8;
          v23 = (double *)((char *)v23 + v25);
        }
        while (v24 != 4008);
      }
    }
  }
  else
  {
    v15 = *a2;
    v16 = *result;
    v17 = 0;
    v18 = 8 * (_QWORD)result[2];
    if (a5 == 1.0)
    {
      do
      {
        *v16 = *(double *)(v15 + v17);
        v17 += 8;
        v16 = (double *)((char *)v16 + v18);
      }
      while (v17 != 4008);
    }
    else
    {
      do
      {
        *v16 = *(double *)(v15 + v17) * a5;
        v17 += 8;
        v16 = (double *)((char *)v16 + v18);
      }
      while (v17 != 4008);
    }
  }
  return result;
}

double dlib::line_search_funct<std::function<dlib::matrix<double,0l,0l,dlib::memory_manager_stateless_kernel_1<char>,dlib::row_major_layout> ()(dlib::matrix<double,0l,0l,dlib::memory_manager_stateless_kernel_1<char>,dlib::row_major_layout>)>,dlib::matrix<double,501l,1l,dlib::memory_manager_stateless_kernel_1<char>,dlib::row_major_layout>>::get_value<dlib::matrix<double,0l,0l,dlib::memory_manager_stateless_kernel_1<char>,dlib::row_major_layout>>(uint64_t a1, _QWORD *a2)
{
  _QWORD *v4;

  v4 = *(_QWORD **)(a1 + 24);
  if (v4)
    dlib::matrix_assign_big<dlib::matrix<double,501l,1l,dlib::memory_manager_stateless_kernel_1<char>,dlib::row_major_layout>,dlib::matrix<double,0l,0l,dlib::memory_manager_stateless_kernel_1<char>,dlib::row_major_layout>>(v4, a2);
  return dlib::dot<dlib::matrix<double,0l,0l,dlib::memory_manager_stateless_kernel_1<char>,dlib::row_major_layout>,dlib::matrix<double,501l,1l,dlib::memory_manager_stateless_kernel_1<char>,dlib::row_major_layout>>((uint64_t)a2, *(double ***)(a1 + 16));
}

double dlib::dot<dlib::matrix<double,0l,0l,dlib::memory_manager_stateless_kernel_1<char>,dlib::row_major_layout>,dlib::matrix<double,501l,1l,dlib::memory_manager_stateless_kernel_1<char>,dlib::row_major_layout>>(uint64_t a1, double **a2)
{
  double result;
  uint64_t i;
  float64x2_t v4;
  uint64_t j;
  float64x2_t v6;

  if (*(_QWORD *)(a1 + 16) == 1)
  {
    result = **(double **)a1 * **a2;
    for (i = 1; i != 501; i += 2)
    {
      v4 = vmulq_f64(*(float64x2_t *)(*(_QWORD *)a1 + i * 8), *(float64x2_t *)&(*a2)[i]);
      result = result + v4.f64[0] + v4.f64[1];
    }
  }
  else
  {
    result = **(double **)a1 * **a2;
    if (*(_QWORD *)(a1 + 8) == 1)
    {
      for (j = 1; j != 501; j += 2)
      {
        v6 = vmulq_f64(*(float64x2_t *)(*(_QWORD *)a1 + j * 8), *(float64x2_t *)&(*a2)[j]);
        result = result + v6.f64[0] + v6.f64[1];
      }
    }
  }
  return result;
}

uint64_t *dlib::blas_bindings::matrix_assign_blas<double,501l,1l,dlib::memory_manager_stateless_kernel_1<char>,dlib::row_major_layout,dlib::matrix_mul_scal_exp<dlib::matrix<double,501l,1l,dlib::memory_manager_stateless_kernel_1<char>,dlib::row_major_layout>,true>>(uint64_t *a1, uint64_t **a2)
{
  uint64_t *v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t *result;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14[2];

  v4 = a2[1];
  v5 = (uint64_t *)*v4;
  if ((uint64_t *)*v4 == a1)
  {
    v10 = *a2;
    v14[1] = (uint64_t)&unk_1E6B14270;
    v11 = operator new[]();
    v12 = 0;
    v14[0] = v11;
    v13 = *v10;
    do
    {
      *(_QWORD *)(v11 + v12) = *(_QWORD *)(v13 + v12);
      v12 += 8;
    }
    while (v12 != 4008);
    dlib::blas_bindings::matrix_assign_blas_helper<dlib::matrix<double,501l,1l,dlib::memory_manager_stateless_kernel_1<char>,dlib::row_major_layout>,dlib::matrix<double,501l,1l,dlib::memory_manager_stateless_kernel_1<char>,dlib::row_major_layout>,void>::assign<dlib::matrix<double,501l,1l,dlib::memory_manager_stateless_kernel_1<char>,dlib::row_major_layout>>(v14, (uint64_t *)*a2[1], 1, 0, *((double *)a2[1] + 1));
    result = (uint64_t *)*a1;
    *a1 = v14[0];
    v14[0] = (uint64_t)result;
    if (result)
      return (uint64_t *)MEMORY[0x1BCCA128C](result, 0x1000C8000313F17);
  }
  else
  {
    if (*a2 != a1)
    {
      v6 = 0;
      v7 = **a2;
      v8 = *a1;
      do
      {
        *(_QWORD *)(v8 + v6) = *(_QWORD *)(v7 + v6);
        v6 += 8;
      }
      while (v6 != 4008);
    }
    return dlib::blas_bindings::matrix_assign_blas_helper<dlib::matrix<double,501l,1l,dlib::memory_manager_stateless_kernel_1<char>,dlib::row_major_layout>,dlib::matrix<double,501l,1l,dlib::memory_manager_stateless_kernel_1<char>,dlib::row_major_layout>,void>::assign<dlib::matrix<double,501l,1l,dlib::memory_manager_stateless_kernel_1<char>,dlib::row_major_layout>>(a1, v5, 1, 0, *((double *)v4 + 1));
  }
  return result;
}

void sub_1B6D50BA4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9)
{
  if (a9)
    MEMORY[0x1BCCA128C](a9, 0x1000C8000313F17);
  _Unwind_Resume(exception_object);
}

uint64_t *dlib::blas_bindings::matrix_assign_blas_helper<dlib::matrix<double,501l,1l,dlib::memory_manager_stateless_kernel_1<char>,dlib::row_major_layout>,dlib::matrix<double,501l,1l,dlib::memory_manager_stateless_kernel_1<char>,dlib::row_major_layout>,void>::assign<dlib::matrix<double,501l,1l,dlib::memory_manager_stateless_kernel_1<char>,dlib::row_major_layout>>(uint64_t *result, uint64_t *a2, int a3, char a4, double a5)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;

  if ((a4 & 1) != 0)
  {
    if (a3)
    {
      if (a5 == 1.0)
      {
        v5 = 0;
        v6 = *a2;
        v7 = *result;
        do
        {
          *(double *)(v7 + v5) = *(double *)(v6 + v5) + *(double *)(v7 + v5);
          v5 += 8;
        }
        while (v5 != 4008);
      }
      else
      {
        v17 = *a2;
        v18 = *result;
        v19 = 0;
        if (a5 == -1.0)
        {
          do
          {
            *(double *)(v18 + v19) = *(double *)(v18 + v19) - *(double *)(v17 + v19);
            v19 += 8;
          }
          while (v19 != 4008);
        }
        else
        {
          do
          {
            *(double *)(v18 + v19) = *(double *)(v18 + v19) + a5 * *(double *)(v17 + v19);
            v19 += 8;
          }
          while (v19 != 4008);
        }
      }
    }
    else
    {
      v11 = *a2;
      v12 = *result;
      v13 = 0;
      if (a5 == 1.0)
      {
        do
        {
          *(_QWORD *)(v12 + v13) = *(_QWORD *)(v11 + v13);
          v13 += 8;
        }
        while (v13 != 4008);
      }
      else
      {
        do
        {
          *(double *)(v12 + v13) = *(double *)(v11 + v13) * a5;
          v13 += 8;
        }
        while (v13 != 4008);
      }
    }
  }
  else if (a3)
  {
    if (a5 == 1.0)
    {
      v8 = 0;
      v9 = *a2;
      v10 = *result;
      do
      {
        *(double *)(v10 + v8) = *(double *)(v9 + v8) + *(double *)(v10 + v8);
        v8 += 8;
      }
      while (v8 != 4008);
    }
    else
    {
      v20 = *a2;
      v21 = *result;
      v22 = 0;
      if (a5 == -1.0)
      {
        do
        {
          *(double *)(v21 + v22) = *(double *)(v21 + v22) - *(double *)(v20 + v22);
          v22 += 8;
        }
        while (v22 != 4008);
      }
      else
      {
        do
        {
          *(double *)(v21 + v22) = *(double *)(v21 + v22) + a5 * *(double *)(v20 + v22);
          v22 += 8;
        }
        while (v22 != 4008);
      }
    }
  }
  else
  {
    v14 = *a2;
    v15 = *result;
    v16 = 0;
    if (a5 == 1.0)
    {
      do
      {
        *(_QWORD *)(v15 + v16) = *(_QWORD *)(v14 + v16);
        v16 += 8;
      }
      while (v16 != 4008);
    }
    else
    {
      do
      {
        *(double *)(v15 + v16) = *(double *)(v14 + v16) * a5;
        v16 += 8;
      }
      while (v16 != 4008);
    }
  }
  return result;
}

void std::__function::__func<std::__bind<double (*)(dlib::matrix<double,0l,0l,dlib::memory_manager_stateless_kernel_1<char>,dlib::row_major_layout> const&,float *,float *),std::placeholders::__ph<1> const&,float (&)[126],float (&)[189]>,std::allocator<std::__bind<double (*)(dlib::matrix<double,0l,0l,dlib::memory_manager_stateless_kernel_1<char>,dlib::row_major_layout> const&,float *,float *),std::placeholders::__ph<1> const&,float (&)[126],float (&)[189]>>,double ()(dlib::matrix<double,0l,0l,dlib::memory_manager_stateless_kernel_1<char>,dlib::row_major_layout>)>::~__func()
{
  JUMPOUT(0x1BCCA12BCLL);
}

__n128 std::__function::__func<std::__bind<double (*)(dlib::matrix<double,0l,0l,dlib::memory_manager_stateless_kernel_1<char>,dlib::row_major_layout> const&,float *,float *),std::placeholders::__ph<1> const&,float (&)[126],float (&)[189]>,std::allocator<std::__bind<double (*)(dlib::matrix<double,0l,0l,dlib::memory_manager_stateless_kernel_1<char>,dlib::row_major_layout> const&,float *,float *),std::placeholders::__ph<1> const&,float (&)[126],float (&)[189]>>,double ()(dlib::matrix<double,0l,0l,dlib::memory_manager_stateless_kernel_1<char>,dlib::row_major_layout>)>::__clone(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x20uLL);
  *(_QWORD *)v2 = &unk_1E6B143E0;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  *((_QWORD *)v2 + 3) = *(_QWORD *)(a1 + 24);
  return result;
}

__n128 std::__function::__func<std::__bind<double (*)(dlib::matrix<double,0l,0l,dlib::memory_manager_stateless_kernel_1<char>,dlib::row_major_layout> const&,float *,float *),std::placeholders::__ph<1> const&,float (&)[126],float (&)[189]>,std::allocator<std::__bind<double (*)(dlib::matrix<double,0l,0l,dlib::memory_manager_stateless_kernel_1<char>,dlib::row_major_layout> const&,float *,float *),std::placeholders::__ph<1> const&,float (&)[126],float (&)[189]>>,double ()(dlib::matrix<double,0l,0l,dlib::memory_manager_stateless_kernel_1<char>,dlib::row_major_layout>)>::__clone(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &unk_1E6B143E0;
  result = *(__n128 *)(a1 + 8);
  *(_QWORD *)(a2 + 24) = *(_QWORD *)(a1 + 24);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t std::__function::__func<std::__bind<double (*)(dlib::matrix<double,0l,0l,dlib::memory_manager_stateless_kernel_1<char>,dlib::row_major_layout> const&,float *,float *),std::placeholders::__ph<1> const&,float (&)[126],float (&)[189]>,std::allocator<std::__bind<double (*)(dlib::matrix<double,0l,0l,dlib::memory_manager_stateless_kernel_1<char>,dlib::row_major_layout> const&,float *,float *),std::placeholders::__ph<1> const&,float (&)[126],float (&)[189]>>,double ()(dlib::matrix<double,0l,0l,dlib::memory_manager_stateless_kernel_1<char>,dlib::row_major_layout>)>::operator()(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t, _QWORD, _QWORD))(a1 + 8))(a2, *(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24));
}

uint64_t std::__function::__func<std::__bind<double (*)(dlib::matrix<double,0l,0l,dlib::memory_manager_stateless_kernel_1<char>,dlib::row_major_layout> const&,float *,float *),std::placeholders::__ph<1> const&,float (&)[126],float (&)[189]>,std::allocator<std::__bind<double (*)(dlib::matrix<double,0l,0l,dlib::memory_manager_stateless_kernel_1<char>,dlib::row_major_layout> const&,float *,float *),std::placeholders::__ph<1> const&,float (&)[126],float (&)[189]>>,double ()(dlib::matrix<double,0l,0l,dlib::memory_manager_stateless_kernel_1<char>,dlib::row_major_layout>)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<std::__bind<double (*)(dlib::matrix<double,0l,0l,dlib::memory_manager_stateless_kernel_1<char>,dlib::row_major_layout> const&,float *,float *),std::placeholders::__ph<1> const&,float (&)[126],float (&)[189]>,std::allocator<std::__bind<double (*)(dlib::matrix<double,0l,0l,dlib::memory_manager_stateless_kernel_1<char>,dlib::row_major_layout> const&,float *,float *),std::placeholders::__ph<1> const&,float (&)[126],float (&)[189]>>,double ()(dlib::matrix<double,0l,0l,dlib::memory_manager_stateless_kernel_1<char>,dlib::row_major_layout>)>::target_type()
{
}

uint64_t *dlib::matrix<double,0l,0l,dlib::memory_manager_stateless_kernel_1<char>,dlib::row_major_layout>::matrix<dlib::matrix<double,6l,1l,dlib::memory_manager_stateless_kernel_1<char>,dlib::row_major_layout>>(uint64_t *a1, _QWORD *a2)
{
  _QWORD *v4;
  uint64_t v5;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  a1[3] = (uint64_t)&unk_1E6B14270;
  dlib::row_major_layout::layout<double,0l,0l,dlib::memory_manager_stateless_kernel_1<char>,5>::set_size(a1, 6, 1);
  v4 = (_QWORD *)*a1;
  *v4 = *a2;
  v5 = a1[2];
  v4[v5] = a2[1];
  v4[2 * v5] = a2[2];
  v4[3 * v5] = a2[3];
  v4[4 * v5] = a2[4];
  v4[5 * v5] = a2[5];
  return a1;
}

void sub_1B6D50F08(_Unwind_Exception *exception_object)
{
  _QWORD *v1;

  if (*v1)
    MEMORY[0x1BCCA128C](*v1, 0x1000C8000313F17);
  _Unwind_Resume(exception_object);
}

uint64_t dlib::central_differences<std::function<double ()(dlib::matrix<double,0l,0l,dlib::memory_manager_stateless_kernel_1<char>,dlib::row_major_layout>)>>::operator()<dlib::matrix<double,6l,1l,dlib::memory_manager_stateless_kernel_1<char>,dlib::row_major_layout>>@<X0>(double *a1@<X0>, _OWORD *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5;
  __int128 v6;
  double v7;
  double v8;
  double v9;
  uint64_t v10;
  double v11;
  double v12;
  uint64_t v13;
  double v14;
  uint64_t result;
  uint64_t v16[4];
  uint64_t v17[4];
  _OWORD v18[3];

  v5 = 0;
  v6 = a2[1];
  v18[0] = *a2;
  v18[1] = v6;
  v18[2] = a2[2];
  v7 = a1[1];
  do
  {
    v8 = *(double *)((char *)v18 + v5);
    *(double *)((char *)v18 + v5) = v8 + v7;
    v9 = *a1;
    dlib::matrix<double,0l,0l,dlib::memory_manager_stateless_kernel_1<char>,dlib::row_major_layout>::matrix<dlib::matrix<double,6l,1l,dlib::memory_manager_stateless_kernel_1<char>,dlib::row_major_layout>>(v17, v18);
    v10 = *(_QWORD *)(*(_QWORD *)&v9 + 24);
    if (!v10)
      std::__throw_bad_function_call[abi:ne180100]();
    v11 = (*(double (**)(uint64_t, uint64_t *))(*(_QWORD *)v10 + 48))(v10, v17);
    if (v17[0])
      MEMORY[0x1BCCA128C](v17[0], 0x1000C8000313F17);
    *(double *)((char *)v18 + v5) = v8 - a1[1];
    v12 = *a1;
    dlib::matrix<double,0l,0l,dlib::memory_manager_stateless_kernel_1<char>,dlib::row_major_layout>::matrix<dlib::matrix<double,6l,1l,dlib::memory_manager_stateless_kernel_1<char>,dlib::row_major_layout>>(v16, v18);
    v13 = *(_QWORD *)(*(_QWORD *)&v12 + 24);
    if (!v13)
      std::__throw_bad_function_call[abi:ne180100]();
    v14 = (*(double (**)(uint64_t, uint64_t *))(*(_QWORD *)v13 + 48))(v13, v16);
    result = v16[0];
    if (v16[0])
      result = MEMORY[0x1BCCA128C](v16[0], 0x1000C8000313F17);
    v7 = a1[1];
    *(double *)(a3 + v5) = (v11 - v14) / (v8 + v7 - (v8 - v7));
    *(double *)((char *)v18 + v5) = v8;
    v5 += 8;
  }
  while (v5 != 48);
  return result;
}

void sub_1B6D51078(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13)
{
  if (a13)
    MEMORY[0x1BCCA128C](a13, 0x1000C8000313F17);
  _Unwind_Resume(a1);
}

uint64_t dlib::objective_delta_stop_strategy::should_continue_search<dlib::matrix<double,6l,1l,dlib::memory_manager_stateless_kernel_1<char>,dlib::row_major_layout>>(uint64_t a1, double a2)
{
  _QWORD *v4;
  _QWORD *v5;
  const std::locale::facet *v6;
  unint64_t v7;
  unint64_t v8;
  BOOL v9;
  uint64_t result;
  std::locale v11;

  if (*(_BYTE *)a1)
  {
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(MEMORY[0x1E0DE4A60], (uint64_t)"iteration: ", 11);
    v4 = (_QWORD *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, (uint64_t)"   objective: ", 14);
    v5 = (_QWORD *)std::ostream::operator<<();
    std::ios_base::getloc((const std::ios_base *)((char *)v5 + *(_QWORD *)(*v5 - 24)));
    v6 = std::locale::use_facet(&v11, MEMORY[0x1E0DE4A90]);
    ((void (*)(const std::locale::facet *, uint64_t))v6->__vftable[2].~facet_0)(v6, 10);
    std::locale::~locale(&v11);
    std::ostream::put();
    std::ostream::flush();
  }
  v7 = *(_QWORD *)(a1 + 24) + 1;
  *(_QWORD *)(a1 + 24) = v7;
  if (*(_BYTE *)(a1 + 1))
  {
    v8 = *(_QWORD *)(a1 + 16);
    v9 = v8 && v7 > v8;
    if (v9 || vabdd_f64(a2, *(double *)(a1 + 32)) < *(double *)(a1 + 8))
      return 0;
  }
  result = 1;
  *(_BYTE *)(a1 + 1) = 1;
  *(double *)(a1 + 32) = a2;
  return result;
}

void sub_1B6D511D4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::locale a10)
{
  std::locale::~locale(&a10);
  _Unwind_Resume(a1);
}

uint64_t *dlib::lbfgs_search_strategy::get_next_direction<dlib::matrix<double,6l,1l,dlib::memory_manager_stateless_kernel_1<char>,dlib::row_major_layout>>(uint64_t a1, uint64_t *a2, uint64_t *a3)
{
  uint64_t *v6;
  double *v7;
  uint64_t v8;
  double *v9;
  double v10;
  uint64_t v11;
  double *v12;
  double *v13;
  double v14;
  double v15;
  double v16;
  double v17;
  unint64_t v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  double v23;
  uint64_t v24;
  double *v25;
  uint64_t v26;
  double *v27;
  double v28;
  uint64_t v29;
  double *v30;
  double *v31;
  double v32;
  double v33;
  double v34;
  uint64_t v35;
  double v36;
  double v37;
  uint64_t v38;
  double *v39;
  uint64_t v40;
  double *v41;
  double v42;
  uint64_t v43;
  double *v44;
  double *v45;
  double v46;
  double v47;
  double v48;
  double v49;
  uint64_t v50;
  unint64_t i;
  double v52;
  uint64_t v53;
  double *v54;
  uint64_t v55;
  double *v56;
  double v57;
  uint64_t v58;
  double *v59;
  double *v60;
  double v61;
  double v62;
  double v63;
  double v64;
  double v65;
  uint64_t *v67;
  double v68;

  v67 = a3;
  v68 = -1.0;
  v6 = (uint64_t *)(a1 + 128);
  dlib::matrix<double,0l,1l,dlib::memory_manager_stateless_kernel_1<char>,dlib::row_major_layout>::operator=<dlib::matrix_mul_scal_exp<dlib::matrix<double,6l,1l,dlib::memory_manager_stateless_kernel_1<char>,dlib::row_major_layout>,true>>((uint64_t *)(a1 + 128), (uint64_t)&v67);
  if (!*(_BYTE *)(a1 + 72))
  {
    *(_BYTE *)(a1 + 72) = 1;
    v18 = *(_QWORD *)(a1 + 16);
LABEL_30:
    if (v18 > *(_QWORD *)(a1 + 64))
      dlib::sequence_kernel_2<dlib::lbfgs_search_strategy::data_helper,dlib::memory_manager_stateless_kernel_1<char>>::remove((uint64_t *)a1, 0, (uint64_t *)(a1 + 176));
    goto LABEL_32;
  }
  v67 = a2;
  *(_QWORD *)&v68 = a1 + 80;
  dlib::matrix<double,0l,1l,dlib::memory_manager_stateless_kernel_1<char>,dlib::row_major_layout>::operator=<dlib::matrix_subtract_exp<dlib::matrix<double,6l,1l,dlib::memory_manager_stateless_kernel_1<char>,dlib::row_major_layout>,dlib::matrix<double,0l,1l,dlib::memory_manager_stateless_kernel_1<char>,dlib::row_major_layout>>>((uint64_t *)(a1 + 176), (uint64_t)&v67);
  v67 = a3;
  *(_QWORD *)&v68 = a1 + 104;
  dlib::matrix<double,0l,1l,dlib::memory_manager_stateless_kernel_1<char>,dlib::row_major_layout>::operator=<dlib::matrix_subtract_exp<dlib::matrix<double,6l,1l,dlib::memory_manager_stateless_kernel_1<char>,dlib::row_major_layout>,dlib::matrix<double,0l,1l,dlib::memory_manager_stateless_kernel_1<char>,dlib::row_major_layout>>>((uint64_t *)(a1 + 200), (uint64_t)&v67);
  v7 = *(double **)(a1 + 200);
  v9 = *(double **)(a1 + 176);
  v8 = *(_QWORD *)(a1 + 184);
  v10 = *v9 * *v7;
  if (v8 >= 2)
  {
    v11 = v8 - 1;
    v12 = v7 + 1;
    v13 = v9 + 1;
    do
    {
      v14 = *v13++;
      v15 = v14;
      v16 = *v12++;
      v10 = v10 + v15 * v16;
      --v11;
    }
    while (v11);
  }
  v17 = v10 + 0.0;
  if (fabs(v17) <= 2.22044605e-16)
  {
    v19 = *(_QWORD *)(a1 + 16);
    if (v19)
    {
      dlib::sequence_kernel_2<dlib::lbfgs_search_strategy::data_helper,dlib::memory_manager_stateless_kernel_1<char>>::delete_nodes(a1, *(_QWORD **)(a1 + 24), v19);
      *(_QWORD *)(a1 + 16) = 0;
    }
    (*(void (**)(uint64_t))(*(_QWORD *)a1 + 24))(a1);
  }
  else
  {
    *(double *)(a1 + 224) = 1.0 / v17;
    dlib::sequence_kernel_2<dlib::lbfgs_search_strategy::data_helper,dlib::memory_manager_stateless_kernel_1<char>>::add((uint64_t *)a1, *(_QWORD *)(a1 + 16), (_QWORD *)(a1 + 176));
  }
  v20 = *(_QWORD *)(a1 + 16);
  if (v20)
  {
    std::vector<double>::resize(a1 + 152, v20);
    v21 = *(_QWORD *)(a1 + 16);
    if (v21)
    {
      v22 = v21 - 1;
      do
      {
        dlib::sequence_kernel_2<dlib::lbfgs_search_strategy::data_helper,dlib::memory_manager_stateless_kernel_1<char>>::move_to_pos(a1, (uint64_t *)(a1 + 24), (uint64_t *)(a1 + 32), v22, v21);
        v23 = *(double *)(*(_QWORD *)(a1 + 24) + 48);
        dlib::sequence_kernel_2<dlib::lbfgs_search_strategy::data_helper,dlib::memory_manager_stateless_kernel_1<char>>::move_to_pos(a1, (uint64_t *)(a1 + 24), (uint64_t *)(a1 + 32), v22, *(_QWORD *)(a1 + 16));
        v24 = *(_QWORD *)(a1 + 24);
        v25 = *(double **)(a1 + 128);
        v27 = *(double **)v24;
        v26 = *(_QWORD *)(v24 + 8);
        v28 = *v27 * *v25;
        if (v26 >= 2)
        {
          v29 = v26 - 1;
          v30 = v25 + 1;
          v31 = v27 + 1;
          do
          {
            v32 = *v31++;
            v33 = v32;
            v34 = *v30++;
            v28 = v28 + v33 * v34;
            --v29;
          }
          while (v29);
        }
        v35 = *(_QWORD *)(a1 + 152);
        *(double *)(v35 + 8 * v22) = v23 * (v28 + 0.0);
        dlib::sequence_kernel_2<dlib::lbfgs_search_strategy::data_helper,dlib::memory_manager_stateless_kernel_1<char>>::move_to_pos(a1, (uint64_t *)(a1 + 24), (uint64_t *)(a1 + 32), v22, *(_QWORD *)(a1 + 16));
        v36 = *(double *)(v35 + 8 * v22);
        v67 = (uint64_t *)(*(_QWORD *)(a1 + 24) + 24);
        v68 = v36;
        dlib::matrix<double,0l,1l,dlib::memory_manager_stateless_kernel_1<char>,dlib::row_major_layout>::operator-=<dlib::matrix_mul_scal_exp<dlib::matrix<double,0l,1l,dlib::memory_manager_stateless_kernel_1<char>,dlib::row_major_layout>,true>>(v6, (uint64_t *)&v67);
        --v22;
        v21 = *(_QWORD *)(a1 + 16);
      }
      while (v22 < v21);
    }
    dlib::sequence_kernel_2<dlib::lbfgs_search_strategy::data_helper,dlib::memory_manager_stateless_kernel_1<char>>::move_to_pos(a1, (uint64_t *)(a1 + 24), (uint64_t *)(a1 + 32), v21 - 1, v21);
    v37 = 1.0 / *(double *)(*(_QWORD *)(a1 + 24) + 48);
    dlib::sequence_kernel_2<dlib::lbfgs_search_strategy::data_helper,dlib::memory_manager_stateless_kernel_1<char>>::move_to_pos(a1, (uint64_t *)(a1 + 24), (uint64_t *)(a1 + 32), *(_QWORD *)(a1 + 16) - 1, *(_QWORD *)(a1 + 16));
    v38 = *(_QWORD *)(a1 + 24);
    dlib::sequence_kernel_2<dlib::lbfgs_search_strategy::data_helper,dlib::memory_manager_stateless_kernel_1<char>>::move_to_pos(a1, (uint64_t *)(a1 + 24), (uint64_t *)(a1 + 32), *(_QWORD *)(a1 + 16) - 1, *(_QWORD *)(a1 + 16));
    v39 = *(double **)(*(_QWORD *)(a1 + 24) + 24);
    v41 = *(double **)(v38 + 24);
    v40 = *(_QWORD *)(v38 + 32);
    v42 = *v41 * *v39;
    if (v40 >= 2)
    {
      v43 = v40 - 1;
      v44 = v39 + 1;
      v45 = v41 + 1;
      do
      {
        v46 = *v45++;
        v47 = v46;
        v48 = *v44++;
        v42 = v42 + v47 * v48;
        --v43;
      }
      while (v43);
    }
    v49 = v37 / (v42 + 0.0);
    *(double *)&v50 = 0.001;
    if (v49 >= 0.001)
    {
      *(double *)&v50 = 1000.0;
      if (v49 <= 1000.0)
        *(double *)&v50 = v49;
    }
    v67 = v6;
    v68 = *(double *)&v50;
    dlib::matrix<double,0l,1l,dlib::memory_manager_stateless_kernel_1<char>,dlib::row_major_layout>::operator=<dlib::matrix_mul_scal_exp<dlib::matrix<double,0l,1l,dlib::memory_manager_stateless_kernel_1<char>,dlib::row_major_layout>,true>>(v6, (uint64_t)&v67);
    v18 = *(_QWORD *)(a1 + 16);
    if (v18)
    {
      for (i = 0; i < v18; ++i)
      {
        dlib::sequence_kernel_2<dlib::lbfgs_search_strategy::data_helper,dlib::memory_manager_stateless_kernel_1<char>>::move_to_pos(a1, (uint64_t *)(a1 + 24), (uint64_t *)(a1 + 32), i, v18);
        v52 = *(double *)(*(_QWORD *)(a1 + 24) + 48);
        dlib::sequence_kernel_2<dlib::lbfgs_search_strategy::data_helper,dlib::memory_manager_stateless_kernel_1<char>>::move_to_pos(a1, (uint64_t *)(a1 + 24), (uint64_t *)(a1 + 32), i, *(_QWORD *)(a1 + 16));
        v53 = *(_QWORD *)(a1 + 24);
        v54 = *(double **)(a1 + 128);
        v56 = *(double **)(v53 + 24);
        v55 = *(_QWORD *)(v53 + 32);
        v57 = *v56 * *v54;
        if (v55 >= 2)
        {
          v58 = v55 - 1;
          v59 = v54 + 1;
          v60 = v56 + 1;
          do
          {
            v61 = *v60++;
            v62 = v61;
            v63 = *v59++;
            v57 = v57 + v62 * v63;
            --v58;
          }
          while (v58);
        }
        v64 = v52 * (v57 + 0.0);
        dlib::sequence_kernel_2<dlib::lbfgs_search_strategy::data_helper,dlib::memory_manager_stateless_kernel_1<char>>::move_to_pos(a1, (uint64_t *)(a1 + 24), (uint64_t *)(a1 + 32), i, *(_QWORD *)(a1 + 16));
        v65 = *(double *)(*(_QWORD *)(a1 + 152) + 8 * i) - v64;
        v67 = *(uint64_t **)(a1 + 24);
        v68 = v65;
        dlib::matrix<double,0l,1l,dlib::memory_manager_stateless_kernel_1<char>,dlib::row_major_layout>::operator+=<dlib::matrix_mul_scal_exp<dlib::matrix<double,0l,1l,dlib::memory_manager_stateless_kernel_1<char>,dlib::row_major_layout>,true>>(v6, (uint64_t)&v67);
        v18 = *(_QWORD *)(a1 + 16);
      }
      goto LABEL_30;
    }
  }
LABEL_32:
  dlib::matrix<double,0l,1l,dlib::memory_manager_stateless_kernel_1<char>,dlib::row_major_layout>::operator=<dlib::matrix<double,6l,1l,dlib::memory_manager_stateless_kernel_1<char>,dlib::row_major_layout>>((uint64_t *)(a1 + 80), a2);
  dlib::matrix<double,0l,1l,dlib::memory_manager_stateless_kernel_1<char>,dlib::row_major_layout>::operator=<dlib::matrix<double,6l,1l,dlib::memory_manager_stateless_kernel_1<char>,dlib::row_major_layout>>((uint64_t *)(a1 + 104), a3);
  return v6;
}

double dlib::line_search<dlib::line_search_funct<std::function<double ()(dlib::matrix<double,0l,0l,dlib::memory_manager_stateless_kernel_1<char>,dlib::row_major_layout>)>,dlib::matrix<double,6l,1l,dlib::memory_manager_stateless_kernel_1<char>,dlib::row_major_layout>>,dlib::central_differences<dlib::line_search_funct<std::function<double ()(dlib::matrix<double,0l,0l,dlib::memory_manager_stateless_kernel_1<char>,dlib::row_major_layout>)>,dlib::matrix<double,6l,1l,dlib::memory_manager_stateless_kernel_1<char>,dlib::row_major_layout>>>>(uint64_t *a1, uint64_t a2, unint64_t a3, double a4, double a5, double a6, double a7, double a8)
{
  double v11;
  double v12;
  double v18;
  double v19;
  double v20;
  double v21;
  double v22;
  double v23;
  double v24;
  double v25;
  unint64_t v26;
  double v27;
  double v28;
  double v29;
  double v30;
  double v31;
  double v35;
  double v36;
  double v37;
  _BOOL4 v38;
  double v39;
  double v40;
  double v41;
  double v42;
  double v43;
  double v44;
  double v45;
  double v46;
  double v47;
  double v48;
  double v49;
  double v50;
  double v51;
  double v52;
  double v53;
  double v54;
  double v55;
  double v56;
  double v57;
  double v58;
  double v59;
  double v60;
  double v61;
  double v62;
  double v63;
  double v64;
  double v65;
  double v66;
  double v67;
  double v68;
  double v69;
  double v70;
  double v71;
  double v72;
  double v73;
  double v74;
  double v75;
  double v76;
  double v77;
  double v78;
  double v81;
  double v82;
  double v83;
  double v84;
  double v86;
  double v87;
  double v88;
  double v89;
  double v90;
  double v91;
  double v92;
  double v93;
  double v94;
  double v95;
  double v97;

  v11 = fabs(a4) * 2.22044605e-16;
  v12 = 0.0;
  if (fabs(a5) > v11 && a4 > a8)
  {
    v18 = (a8 - a4) / (a5 * a6);
    v19 = 1.0;
    if (v18 < 0.0)
      v19 = -1.0;
    v20 = v18 * 0.65;
    if (v18 * 0.65 <= 0.0)
    {
      v21 = v18 * 0.65;
      if (v19 < v20)
        goto LABEL_15;
      v21 = 0.0;
      if (v19 > 0.0)
        goto LABEL_15;
    }
    else
    {
      v21 = 0.0;
      if (v18 < 0.0)
        goto LABEL_15;
      v21 = v18 * 0.65;
      if (v20 < 1.0)
        goto LABEL_15;
    }
    v21 = v19;
LABEL_15:
    v97 = v21;
    v22 = dlib::line_search_funct<std::function<double ()(dlib::matrix<double,0l,0l,dlib::memory_manager_stateless_kernel_1<char>,dlib::row_major_layout>)>,dlib::matrix<double,6l,1l,dlib::memory_manager_stateless_kernel_1<char>,dlib::row_major_layout>>::operator()(a1, (uint64_t *)&v97);
    v23 = dlib::central_differences<dlib::line_search_funct<std::function<double ()(dlib::matrix<double,0l,0l,dlib::memory_manager_stateless_kernel_1<char>,dlib::row_major_layout>)>,dlib::matrix<double,6l,1l,dlib::memory_manager_stateless_kernel_1<char>,dlib::row_major_layout>>>::operator()(a2, &v97);
    v12 = v97;
    if (v22 <= a8)
      return v12;
    v24 = a5;
    v92 = v11;
    v93 = fabs(a5 * a7);
    v25 = 0.0;
    v26 = 1;
    v27 = a4;
    v28 = a5;
    v95 = v27;
    do
    {
      v29 = v25;
      v30 = v27;
      v31 = v28;
      v27 = v22;
      v28 = v23;
      v25 = v12;
      if (v22 > v95 + v12 * a6 * v24 || v22 >= v30)
      {
        v86 = a6;
        v91 = a8;
        v61 = v29;
        v62 = v30;
        v94 = v31;
LABEL_71:
        v63 = -2.0;
        while (2)
        {
          v87 = v94 * v63;
          v89 = v62;
          v90 = fabs(v61);
LABEL_73:
          v64 = v28;
          v12 = v25;
          v88 = v27;
          v65 = v94 + v28 + (v27 - v62) * v63;
          v66 = 0.5;
          if (fabs(v65) > 2.22044605e-16)
          {
            v67 = v87 + (v27 - v62) * 3.0 - v28;
            v68 = v65 * 3.0;
            v69 = v67 * v67 - v65 * 3.0 * v94;
            v66 = 0.0;
            if (v69 < 0.0)
              v69 = 0.0;
            v70 = sqrt(v69);
            v71 = (v70 - v67) / v68;
            v72 = -(v67 + v70) / v68;
            if (v62 + v94 * v71 + v67 * v71 * v71 + v71 * (v65 * v71) * v71 >= v62
                                                                              + v94 * v72
                                                                              + v67 * v72 * v72
                                                                              + v72 * (v65 * v72) * v72)
              v73 = v72;
            else
              v73 = v71;
            if (v73 >= 0.0)
            {
              v66 = 1.0;
              if (v73 <= 1.0)
                v66 = v73;
            }
          }
          v74 = v25 - v61;
          v75 = v61 + (v25 - v61) * 0.1;
          v76 = v12 + (v12 - v61) * -0.5;
          v77 = v61 + (v12 - v61) * v66;
          if (v75 >= v76)
          {
            v78 = v12 + (v12 - v61) * -0.5;
            if (v77 < v76 || (v78 = v61 + (v12 - v61) * 0.1, v77 > v75))
            {
LABEL_89:
              ++v26;
              v97 = v78;
              v27 = dlib::line_search_funct<std::function<double ()(dlib::matrix<double,0l,0l,dlib::memory_manager_stateless_kernel_1<char>,dlib::row_major_layout>)>,dlib::matrix<double,6l,1l,dlib::memory_manager_stateless_kernel_1<char>,dlib::row_major_layout>>::operator()(a1, (uint64_t *)&v97);
              v28 = dlib::central_differences<dlib::line_search_funct<std::function<double ()(dlib::matrix<double,0l,0l,dlib::memory_manager_stateless_kernel_1<char>,dlib::row_major_layout>)>,dlib::matrix<double,6l,1l,dlib::memory_manager_stateless_kernel_1<char>,dlib::row_major_layout>>>::operator()(a2, &v97);
              if (v27 <= v91 || v26 >= a3)
                return v97;
              if (v61 == v75 || v12 == v76)
                return v12;
              v81 = fabs(v12);
              if (v90 >= v81)
                v81 = v90;
              v25 = v97;
              if (fabs(v81 * a5) <= v92)
                return v25;
              v62 = v89;
              v63 = -2.0;
              if (v27 < v89 && v27 <= v95 + v97 * v86 * a5)
              {
                if (fabs(v28) <= v93)
                  return v25;
                if (v74 * v28 >= 0.0)
                  v82 = v61;
                else
                  v82 = v12;
                v83 = v88;
                if (v74 * v28 >= 0.0)
                  v83 = v89;
                v61 = v97;
                v25 = v82;
                v84 = v94;
                if (v74 * v28 < 0.0)
                  v84 = v64;
                v62 = v27;
                v27 = v83;
                v94 = v28;
                v28 = v84;
                continue;
              }
              goto LABEL_73;
            }
          }
          else
          {
            v78 = v61 + (v12 - v61) * 0.1;
            if (v77 < v75)
              goto LABEL_89;
            v78 = v12 + (v12 - v61) * -0.5;
            if (v77 > v76)
              goto LABEL_89;
          }
          break;
        }
        v78 = v77;
        goto LABEL_89;
      }
      if (fabs(v23) <= v93 || v29 == v12 || v26 >= a3)
        return v25;
      if (v23 >= 0.0)
      {
        v86 = a6;
        v91 = a8;
        v61 = v12;
        v25 = v29;
        v62 = v22;
        v27 = v30;
        v94 = v23;
        v28 = v31;
        goto LABEL_71;
      }
      v35 = v12 + (v12 - v29) * 1.4;
      v36 = v12 + (v12 - v29) * 9.0;
      if (v18 >= v35)
        v37 = v18;
      else
        v37 = v12 + (v12 - v29) * 1.4;
      v38 = v18 < v36;
      if (v35 >= v18)
        v35 = v18;
      if (v18 <= 0.0)
        v35 = v37;
      else
        v38 = v36 < v18;
      if (!v38)
        v36 = v18;
      v39 = v31 + v28;
      if (v29 >= v12)
      {
        v50 = v30 - v22;
        v51 = v39 + (v30 - v22) * -2.0;
        v52 = 0.5;
        if (fabs(v51) > 2.22044605e-16)
        {
          v53 = v28 * -2.0 + v50 * 3.0 - v31;
          v54 = v51 * 3.0;
          v55 = v53 * v53 - v51 * 3.0 * v28;
          v52 = 0.0;
          if (v55 < 0.0)
            v55 = 0.0;
          v56 = sqrt(v55);
          v57 = (v56 - v53) / v54;
          v58 = -(v53 + v56) / v54;
          if (v22 + v28 * v57 + v53 * v57 * v57 + v57 * (v51 * v57) * v57 >= v22
                                                                            + v28 * v58
                                                                            + v53 * v58 * v58
                                                                            + v58 * (v51 * v58) * v58)
            v59 = v58;
          else
            v59 = v57;
          if (v59 >= 0.0)
          {
            v52 = 1.0e10;
            if (v59 <= 1.0e10)
              v52 = v59;
          }
        }
        v49 = v12 + (v29 - v12) * v52;
      }
      else
      {
        v40 = v39 + (v22 - v30) * -2.0;
        v41 = 0.5;
        if (fabs(v40) > 2.22044605e-16)
        {
          v42 = v31 * -2.0 + (v22 - v30) * 3.0 - v28;
          v43 = v40 * 3.0;
          v44 = v42 * v42 - v40 * 3.0 * v31;
          v41 = 0.0;
          if (v44 < 0.0)
            v44 = 0.0;
          v45 = sqrt(v44);
          v46 = (v45 - v42) / v43;
          v47 = -(v42 + v45) / v43;
          if (v30 + v31 * v46 + v42 * v46 * v46 + v46 * (v40 * v46) * v46 >= v30
                                                                            + v31 * v47
                                                                            + v42 * v47 * v47
                                                                            + v47 * (v40 * v47) * v47)
            v48 = v47;
          else
            v48 = v46;
          if (v48 >= 0.0)
          {
            v41 = 1.0e10;
            if (v48 <= 1.0e10)
              v41 = v48;
          }
        }
        v49 = v29 + (v12 - v29) * v41;
      }
      if (v35 >= v36)
      {
        v60 = v36;
        if (v49 < v36)
          goto LABEL_68;
        v60 = v35;
        if (v49 > v35)
          goto LABEL_68;
      }
      else
      {
        v60 = v35;
        if (v49 < v35)
          goto LABEL_68;
        v60 = v36;
        if (v49 > v36)
          goto LABEL_68;
      }
      v60 = v49;
LABEL_68:
      v97 = v60;
      ++v26;
      v22 = dlib::line_search_funct<std::function<double ()(dlib::matrix<double,0l,0l,dlib::memory_manager_stateless_kernel_1<char>,dlib::row_major_layout>)>,dlib::matrix<double,6l,1l,dlib::memory_manager_stateless_kernel_1<char>,dlib::row_major_layout>>::operator()(a1, (uint64_t *)&v97);
      v23 = dlib::central_differences<dlib::line_search_funct<std::function<double ()(dlib::matrix<double,0l,0l,dlib::memory_manager_stateless_kernel_1<char>,dlib::row_major_layout>)>,dlib::matrix<double,6l,1l,dlib::memory_manager_stateless_kernel_1<char>,dlib::row_major_layout>>>::operator()(a2, &v97);
      v24 = a5;
      v12 = v97;
    }
    while (v22 > a8);
  }
  return v12;
}

double dlib::matrix<double,6l,1l,dlib::memory_manager_stateless_kernel_1<char>,dlib::row_major_layout>::operator+=<dlib::matrix_mul_scal_exp<dlib::matrix<double,6l,1l,dlib::memory_manager_stateless_kernel_1<char>,dlib::row_major_layout>,true>>(double *a1, uint64_t a2)
{
  double *v2;
  double v3;
  double v4;
  double v5;
  double result;

  v2 = *(double **)a2;
  v3 = a1[1];
  *a1 = *a1 + **(double **)a2 * *(double *)(a2 + 8);
  a1[1] = v3 + v2[1] * *(double *)(a2 + 8);
  v4 = a1[3];
  a1[2] = a1[2] + v2[2] * *(double *)(a2 + 8);
  a1[3] = v4 + v2[3] * *(double *)(a2 + 8);
  v5 = a1[5];
  a1[4] = a1[4] + v2[4] * *(double *)(a2 + 8);
  result = v5 + v2[5] * *(double *)(a2 + 8);
  a1[5] = result;
  return result;
}

uint64_t *dlib::matrix<double,0l,1l,dlib::memory_manager_stateless_kernel_1<char>,dlib::row_major_layout>::operator=<dlib::matrix_mul_scal_exp<dlib::matrix<double,6l,1l,dlib::memory_manager_stateless_kernel_1<char>,dlib::row_major_layout>,true>>(uint64_t *a1, uint64_t a2)
{
  double *v4;
  double v5;
  double *v6;
  double v7;
  double *v8;

  if (a1[1] != 6)
    dlib::row_major_layout::layout<double,0l,1l,dlib::memory_manager_stateless_kernel_1<char>,3>::set_size(a1, 6);
  v4 = *(double **)a2;
  v5 = **(double **)a2;
  v7 = *(double *)(a2 + 8);
  v6 = (double *)(a2 + 8);
  v8 = (double *)*a1;
  *v8 = v5 * v7;
  v8[1] = v4[1] * *v6;
  v8[2] = v4[2] * *v6;
  v8[3] = v4[3] * *v6;
  v8[4] = v4[4] * *v6;
  v8[5] = v4[5] * *v6;
  return a1;
}

uint64_t *dlib::matrix<double,0l,1l,dlib::memory_manager_stateless_kernel_1<char>,dlib::row_major_layout>::operator=<dlib::matrix_subtract_exp<dlib::matrix<double,6l,1l,dlib::memory_manager_stateless_kernel_1<char>,dlib::row_major_layout>,dlib::matrix<double,0l,1l,dlib::memory_manager_stateless_kernel_1<char>,dlib::row_major_layout>>>(uint64_t *a1, uint64_t a2)
{
  double *v4;
  double *v5;
  double *v6;

  if (a1[1] != 6)
    dlib::row_major_layout::layout<double,0l,1l,dlib::memory_manager_stateless_kernel_1<char>,3>::set_size(a1, 6);
  v4 = *(double **)a2;
  v5 = **(double ***)(a2 + 8);
  v6 = (double *)*a1;
  *v6 = **(double **)a2 - *v5;
  v6[1] = v4[1] - v5[1];
  v6[2] = v4[2] - v5[2];
  v6[3] = v4[3] - v5[3];
  v6[4] = v4[4] - v5[4];
  v6[5] = v4[5] - v5[5];
  return a1;
}

uint64_t *dlib::matrix<double,0l,1l,dlib::memory_manager_stateless_kernel_1<char>,dlib::row_major_layout>::operator=<dlib::matrix<double,6l,1l,dlib::memory_manager_stateless_kernel_1<char>,dlib::row_major_layout>>(uint64_t *a1, _QWORD *a2)
{
  _QWORD *v4;

  if (a1[1] != 6)
    dlib::row_major_layout::layout<double,0l,1l,dlib::memory_manager_stateless_kernel_1<char>,3>::set_size(a1, 6);
  v4 = (_QWORD *)*a1;
  *v4 = *a2;
  v4[1] = a2[1];
  v4[2] = a2[2];
  v4[3] = a2[3];
  v4[4] = a2[4];
  v4[5] = a2[5];
  return a1;
}

double dlib::line_search_funct<std::function<double ()(dlib::matrix<double,0l,0l,dlib::memory_manager_stateless_kernel_1<char>,dlib::row_major_layout>)>,dlib::matrix<double,6l,1l,dlib::memory_manager_stateless_kernel_1<char>,dlib::row_major_layout>>::operator()(uint64_t *a1, uint64_t *a2)
{
  double *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  double v7;
  double v8;
  double *v9;
  _QWORD v11[2];
  double *v12[2];
  uint64_t v13[4];

  v4 = *a1;
  v3 = (double *)a1[1];
  v5 = *a2;
  v11[0] = a1[2];
  v11[1] = v5;
  v12[0] = v3;
  v12[1] = (double *)v11;
  dlib::matrix<double,0l,0l,dlib::memory_manager_stateless_kernel_1<char>,dlib::row_major_layout>::matrix<dlib::matrix_add_exp<dlib::matrix<double,6l,1l,dlib::memory_manager_stateless_kernel_1<char>,dlib::row_major_layout>,dlib::matrix_mul_scal_exp<dlib::matrix<double,6l,1l,dlib::memory_manager_stateless_kernel_1<char>,dlib::row_major_layout>,true>>>(v13, v12);
  v6 = *(_QWORD *)(v4 + 24);
  if (!v6)
    std::__throw_bad_function_call[abi:ne180100]();
  v7 = (*(double (**)(uint64_t, uint64_t *))(*(_QWORD *)v6 + 48))(v6, v13);
  v8 = v7;
  v9 = (double *)a1[4];
  if (v9)
    *v9 = v7;
  if (v13[0])
    MEMORY[0x1BCCA128C](v13[0], 0x1000C8000313F17);
  return v8;
}

void sub_1B6D51F58(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13)
{
  if (a13)
    MEMORY[0x1BCCA128C](a13, 0x1000C8000313F17);
  _Unwind_Resume(exception_object);
}

double dlib::central_differences<dlib::line_search_funct<std::function<double ()(dlib::matrix<double,0l,0l,dlib::memory_manager_stateless_kernel_1<char>,dlib::row_major_layout>)>,dlib::matrix<double,6l,1l,dlib::memory_manager_stateless_kernel_1<char>,dlib::row_major_layout>>>::operator()(uint64_t a1, double *a2)
{
  uint64_t *v4;
  double v5;
  uint64_t *v6;
  double v8;
  double v9;

  v4 = *(uint64_t **)a1;
  v9 = *a2 + *(double *)(a1 + 8);
  v5 = dlib::line_search_funct<std::function<double ()(dlib::matrix<double,0l,0l,dlib::memory_manager_stateless_kernel_1<char>,dlib::row_major_layout>)>,dlib::matrix<double,6l,1l,dlib::memory_manager_stateless_kernel_1<char>,dlib::row_major_layout>>::operator()(v4, (uint64_t *)&v9);
  v6 = *(uint64_t **)a1;
  v8 = *a2 - *(double *)(a1 + 8);
  return (v5
        - dlib::line_search_funct<std::function<double ()(dlib::matrix<double,0l,0l,dlib::memory_manager_stateless_kernel_1<char>,dlib::row_major_layout>)>,dlib::matrix<double,6l,1l,dlib::memory_manager_stateless_kernel_1<char>,dlib::row_major_layout>>::operator()(v6, (uint64_t *)&v8))/ (*a2 + *(double *)(a1 + 8) - (*a2 - *(double *)(a1 + 8)));
}

uint64_t *dlib::matrix<double,0l,0l,dlib::memory_manager_stateless_kernel_1<char>,dlib::row_major_layout>::matrix<dlib::matrix_add_exp<dlib::matrix<double,6l,1l,dlib::memory_manager_stateless_kernel_1<char>,dlib::row_major_layout>,dlib::matrix_mul_scal_exp<dlib::matrix<double,6l,1l,dlib::memory_manager_stateless_kernel_1<char>,dlib::row_major_layout>,true>>>(uint64_t *a1, double **a2)
{
  double *v4;
  double *v5;
  double *v6;
  double *v7;
  uint64_t v8;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  a1[3] = (uint64_t)&unk_1E6B14270;
  dlib::row_major_layout::layout<double,0l,0l,dlib::memory_manager_stateless_kernel_1<char>,5>::set_size(a1, 6, 1);
  v4 = *a2;
  v5 = a2[1];
  v6 = *(double **)v5;
  v7 = (double *)*a1;
  *v7 = **a2 + **(double **)v5 * v5[1];
  v8 = a1[2];
  v7[v8] = v4[1] + v6[1] * v5[1];
  v7[2 * v8] = v4[2] + v6[2] * v5[1];
  v7[3 * v8] = v4[3] + v6[3] * v5[1];
  v7[4 * v8] = v4[4] + v6[4] * v5[1];
  v7[5 * v8] = v4[5] + v6[5] * v5[1];
  return a1;
}

void sub_1B6D52104(_Unwind_Exception *exception_object)
{
  _QWORD *v1;

  if (*v1)
    MEMORY[0x1BCCA128C](*v1, 0x1000C8000313F17);
  _Unwind_Resume(exception_object);
}

uint64_t *dlib::matrix<double,0l,0l,dlib::memory_manager_stateless_kernel_1<char>,dlib::row_major_layout>::matrix<dlib::matrix<double,1l,51l,dlib::memory_manager_stateless_kernel_1<char>,dlib::row_major_layout>>(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  a1[3] = (uint64_t)&unk_1E6B14270;
  dlib::row_major_layout::layout<double,0l,0l,dlib::memory_manager_stateless_kernel_1<char>,5>::set_size(a1, 1, 51);
  v4 = 0;
  v5 = *a2;
  v6 = *a1;
  do
  {
    *(_QWORD *)(v6 + v4) = *(_QWORD *)(v5 + v4);
    v4 += 8;
  }
  while (v4 != 408);
  return a1;
}

void sub_1B6D52190(_Unwind_Exception *exception_object)
{
  _QWORD *v1;

  if (*v1)
    MEMORY[0x1BCCA128C](*v1, 0x1000C8000313F17);
  _Unwind_Resume(exception_object);
}

uint64_t *dlib::matrix<double,0l,0l,dlib::memory_manager_stateless_kernel_1<char>,dlib::row_major_layout>::matrix<dlib::matrix<double,1l,501l,dlib::memory_manager_stateless_kernel_1<char>,dlib::row_major_layout>>(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  a1[3] = (uint64_t)&unk_1E6B14270;
  dlib::row_major_layout::layout<double,0l,0l,dlib::memory_manager_stateless_kernel_1<char>,5>::set_size(a1, 1, 501);
  v4 = 0;
  v5 = *a2;
  v6 = *a1;
  do
  {
    *(_QWORD *)(v6 + v4) = *(_QWORD *)(v5 + v4);
    v4 += 8;
  }
  while (v4 != 4008);
  return a1;
}

void sub_1B6D5221C(_Unwind_Exception *exception_object)
{
  _QWORD *v1;

  if (*v1)
    MEMORY[0x1BCCA128C](*v1, 0x1000C8000313F17);
  _Unwind_Resume(exception_object);
}

void OUTLINED_FUNCTION_0_1(void *a1, NSObject *a2, uint64_t a3, const char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint8_t a9)
{
  os_log_type_t v9;

  _os_log_impl(a1, a2, v9, a4, &a9, 2u);
}

void OUTLINED_FUNCTION_1_0()
{
  JUMPOUT(0x1BCCA128CLL);
}

_QWORD *OUTLINED_FUNCTION_2_1(uint64_t a1, char *a2)
{
  _QWORD *v2;

  return std::operator<<[abi:ne180100]<std::char_traits<char>>(v2, a2);
}

BOOL OUTLINED_FUNCTION_3_0(NSObject *a1)
{
  os_log_type_t v1;

  return os_log_type_enabled(a1, v1);
}

void sub_1B6D52370(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;

  v5 = v4;

  _Unwind_Resume(a1);
}

void sub_1B6D52474(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1B6D525CC(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_1B6D526C4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  void *v14;
  void *v15;

  _Unwind_Resume(a1);
}

void sub_1B6D529F0(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;

  v5 = v4;

  _Unwind_Resume(a1);
}

void sub_1B6D52AF4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

uint64_t MAAssetByteStream::CopyProperty(MAAssetByteStream *this, CFTypeRef cf1, const __CFAllocator *a3, CFURLRef *a4)
{
  CFTypeRef *v8;
  const __CFURL *v9;
  const __CFURL *v10;
  uint64_t result;
  const __CFString *valuePtr;

  if (*(_DWORD *)this != 1)
    return 4294967278;
  if (CFEqual(cf1, (CFTypeRef)*MEMORY[0x1E0CA2FC8]))
  {
    v8 = (CFTypeRef *)MEMORY[0x1E0CC4288];
LABEL_4:
    v9 = (const __CFURL *)CFRetain(*v8);
LABEL_5:
    v10 = v9;
    result = 0;
    *a4 = v10;
    return result;
  }
  if (CFEqual(cf1, (CFTypeRef)*MEMORY[0x1E0CA2098]))
  {
    valuePtr = CFSTR("mediaanalysis://asset.mov");
    *a4 = CFURLCreateWithString(0, CFSTR("mediaanalysis://asset.mov"), 0);
    CF<opaqueCMSampleBuffer *>::~CF((const void **)&valuePtr);
    return 0;
  }
  else
  {
    if (CFEqual(cf1, (CFTypeRef)*MEMORY[0x1E0CA2088]))
      goto LABEL_11;
    if (CFEqual(cf1, (CFTypeRef)*MEMORY[0x1E0CA20A0]))
    {
      v8 = (CFTypeRef *)MEMORY[0x1E0C9AE40];
      goto LABEL_4;
    }
    if (CFEqual(cf1, (CFTypeRef)*MEMORY[0x1E0CA2070]) || CFEqual(cf1, (CFTypeRef)*MEMORY[0x1E0CA2068]))
    {
      valuePtr = (const __CFString *)*((_QWORD *)this + 1);
      v9 = CFNumberCreate(a3, kCFNumberSInt64Type, &valuePtr);
      goto LABEL_5;
    }
    if (CFEqual(cf1, (CFTypeRef)*MEMORY[0x1E0CA2078]))
    {
LABEL_11:
      v8 = (CFTypeRef *)MEMORY[0x1E0C9AE50];
      goto LABEL_4;
    }
    return 4294967246;
  }
}

void sub_1B6D52CA0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  CF<opaqueCMSampleBuffer *>::~CF((const void **)va);
  _Unwind_Resume(a1);
}

uint64_t MAAssetByteStream::Read(MAAssetByteStream *this, uint64_t a2, uint64_t a3, void *a4, CFIndex *a5)
{
  uint64_t v7;
  const UInt8 *BytePtr;
  CFIndex Length;
  CFDataRef theData;

  if (*(_DWORD *)this != 1)
    return 4294967278;
  theData = 0;
  v7 = (*((uint64_t (**)(_QWORD, uint64_t, uint64_t, CFDataRef *))this + 2))(*((_QWORD *)this + 3), a3, a2, &theData);
  if (!(_DWORD)v7)
  {
    BytePtr = CFDataGetBytePtr(theData);
    Length = CFDataGetLength(theData);
    memcpy(a4, BytePtr, Length);
    if (a5)
      *a5 = CFDataGetLength(theData);
  }
  CF<opaqueCMSampleBuffer *>::~CF((const void **)&theData);
  return v7;
}

void sub_1B6D52D5C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  CF<opaqueCMSampleBuffer *>::~CF((const void **)va);
  _Unwind_Resume(a1);
}

uint64_t MAAssetByteStream::Read(MAAssetByteStream *this, size_t blockLength, uint64_t a3, CMBlockBufferRef *blockBufferOut, CFIndex *a5)
{
  uint64_t DataPointer;
  CMBlockBufferRef v11;
  char *dataPointerOut;

  if (*(_DWORD *)this != 1)
    return 4294967278;
  dataPointerOut = 0;
  DataPointer = CMBlockBufferCreateWithMemoryBlock(0, 0, blockLength, 0, 0, 0, blockLength, 0, blockBufferOut);
  if ((_DWORD)DataPointer
    || (DataPointer = CMBlockBufferAssureBlockMemory(*blockBufferOut), (_DWORD)DataPointer)
    || (DataPointer = CMBlockBufferGetDataPointer(*blockBufferOut, 0, 0, 0, &dataPointerOut), (_DWORD)DataPointer)
    || (DataPointer = MAAssetByteStream::Read(this, blockLength, a3, dataPointerOut, a5), (_DWORD)DataPointer))
  {
    v11 = *blockBufferOut;
    if (*(_QWORD *)v11)
    {
      CFRelease(*(CFTypeRef *)v11);
      *(_QWORD *)v11 = 0;
    }
  }
  return DataPointer;
}

uint64_t MAAssetByteStream_Finalize()
{
  uint64_t *DerivedStorage;
  uint64_t result;

  DerivedStorage = (uint64_t *)CMBaseObjectGetDerivedStorage();
  result = *DerivedStorage;
  if (*DerivedStorage)
    result = MEMORY[0x1BCCA12BC](result, 0x1080C40A9F9A45FLL);
  *DerivedStorage = 0;
  return result;
}

uint64_t MAAssetByteStream_CopyProperty(uint64_t a1, const void *a2, const __CFAllocator *a3, CFURLRef *a4)
{
  MAAssetByteStream **DerivedStorage;

  DerivedStorage = (MAAssetByteStream **)CMBaseObjectGetDerivedStorage();
  return MAAssetByteStream::CopyProperty(*DerivedStorage, a2, a3, a4);
}

uint64_t MAAssetByteStream_SetProperty()
{
  if (**(_DWORD **)CMBaseObjectGetDerivedStorage() == 1)
    return 4294967246;
  else
    return 4294967278;
}

uint64_t MAAssetByteStream_StreamRead(uint64_t a1, uint64_t a2, uint64_t a3, void *a4, CFIndex *a5)
{
  MAAssetByteStream **DerivedStorage;

  DerivedStorage = (MAAssetByteStream **)CMBaseObjectGetDerivedStorage();
  return MAAssetByteStream::Read(*DerivedStorage, a2, a3, a4, a5);
}

uint64_t MAAssetByteStream_GetAvailableLengthAtOffset(uint64_t a1, unint64_t a2, unint64_t *a3)
{
  uint64_t DerivedStorage;
  unint64_t v6;
  BOOL v7;
  unint64_t v8;
  uint64_t result;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (**(_DWORD **)DerivedStorage != 1)
    return 4294967278;
  v6 = *(_QWORD *)(*(_QWORD *)DerivedStorage + 8);
  v7 = v6 >= a2;
  v8 = v6 - a2;
  if (!v7)
    return 4294967246;
  result = 0;
  *a3 = v8;
  return result;
}

uint64_t MAAssetByteStream_ReadAndCreateBlockBuffer(uint64_t a1, size_t a2, uint64_t a3, CMBlockBufferRef *a4, CFIndex *a5)
{
  MAAssetByteStream **DerivedStorage;

  DerivedStorage = (MAAssetByteStream **)CMBaseObjectGetDerivedStorage();
  return MAAssetByteStream::Read(*DerivedStorage, a2, a3, a4, a5);
}

uint64_t MAAssetByteStream_Create(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, CFTypeRef *a5)
{
  uint64_t v9;
  uint64_t DerivedStorage;
  _QWORD *v11;
  _QWORD *v12;

  CMByteStreamGetClassID();
  v9 = CMDerivedObjectCreate();
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if ((_DWORD)v9)
  {
    if (*a5)
    {
      CFRelease(*a5);
      *a5 = 0;
    }
  }
  else
  {
    v11 = (_QWORD *)DerivedStorage;
    v12 = (_QWORD *)operator new();
    *v12 = 0;
    *v11 = v12;
    v12[1] = a2;
    v12[2] = a3;
    v12[3] = a4;
    *(_DWORD *)v12 = 1;
  }
  return v9;
}

void sub_1B6D53180(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_1B6D53310(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  _Unwind_Resume(a1);
}

void sub_1B6D5364C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1B6D538C4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, void *a7, void *a8, uint64_t a9, ...)
{
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  va_list va;

  va_start(va, a9);

  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1B6D53E34(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,void *a27)
{
  void *v27;
  void *v28;
  void *v29;

  _Unwind_Resume(a1);
}

void sub_1B6D54000(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  CF<opaqueCMSampleBuffer *>::~CF((const void **)va);
  _Unwind_Resume(a1);
}

uint64_t __Block_byref_object_copy__16(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void __Block_byref_object_dispose__16(uint64_t a1)
{

}

void sub_1B6D541C0(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_1B6D5433C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

uint64_t compare_func(float *a1, float *a2)
{
  if (*a1 > *a2)
    return 1;
  else
    return 0xFFFFFFFFLL;
}

uint64_t getConvexHull(char *a1, int a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  int v8;
  float *v9;
  uint64_t result;
  uint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  float v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  float *v21;
  float v22;
  uint64_t v23;
  uint64_t v24;

  v6 = a2;
  qsort(a1, a2, 0xCuLL, (int (__cdecl *)(const void *, const void *))compare_func);
  if (a2 < 1)
    return 0xFFFFFFFFLL;
  v7 = 0;
  v8 = 0;
  do
  {
    v9 = (float *)&a1[12 * v7];
    if (v8 >= 1)
      result = 1;
    else
      result = v8;
    v11 = v8 + 4294967294;
    v12 = (uint64_t *)(a3 + 12 * (v8 - 1));
    while (v8 >= 2)
    {
      v13 = *v12;
      v12 = (uint64_t *)((char *)v12 - 12);
      v14 = (float)((float)(*(float *)&v13 - *(float *)(a3 + 12 * v11))
                  * (float)(v9[1] - *(float *)(a3 + 12 * v11 + 4)))
          - (float)((float)(*v9 - *(float *)(a3 + 12 * v11))
                  * (float)(*((float *)&v13 + 1) - *(float *)(a3 + 12 * v11 + 4)));
      --v11;
      --v8;
      if (v14 > 0.0)
      {
        result = (v8 + 1);
        break;
      }
    }
    v8 = result + 1;
    v15 = a3 + 12 * (int)result;
    v16 = *(_QWORD *)v9;
    *(float *)(v15 + 8) = v9[2];
    *(_QWORD *)v15 = v16;
    ++v7;
  }
  while (v7 != a2);
  if (a2 >= 2)
  {
    v17 = result + 1;
    do
    {
      v18 = v6--;
      v19 = v17;
      if (v17 >= v8)
        v20 = v8;
      else
        v20 = v17;
      LODWORD(result) = v17 + 1;
      v21 = (float *)(a3 - 24 + 12 * v17);
      while (v19 > v8)
      {
        --v19;
        v22 = (float)((float)(v21[3] - *v21) * (float)(*(float *)&a1[12 * v18 - 20] - v21[1]))
            - (float)((float)(*(float *)&a1[12 * v18 - 24] - *v21) * (float)(v21[4] - v21[1]));
        result = (result - 1);
        v21 -= 3;
        if (v22 > 0.0)
          goto LABEL_21;
      }
      result = v20;
LABEL_21:
      v17 = result + 1;
      v23 = *(_QWORD *)&a1[12 * v18 - 24];
      v24 = a3 + 12 * (int)result;
      *(_DWORD *)(v24 + 8) = *(_DWORD *)&a1[12 * v18 - 16];
      *(_QWORD *)v24 = v23;
    }
    while (v18 > 2);
  }
  return result;
}

uint64_t getExtendedFaceHull(char *a1, int a2, uint64_t a3)
{
  uint64_t ConvexHull;
  uint64_t v7;
  size_t v8;
  const std::nothrow_t *v9;
  float *v10;
  float *v11;
  float *v12;
  uint64_t v13;
  uint64_t v14;
  BOOL v15;
  uint64_t v17;
  uint64_t v18;
  float *v19;
  uint64_t v20;
  uint64_t v21;
  float *v22;
  float v23;
  float v24;
  float v25;
  uint64_t v26;
  uint64_t v27;
  float v28;
  int v29;
  unsigned int v30;
  uint64_t v31;
  int v32;
  float *v33;
  float v34;
  float v35;
  float *v36;
  float v37;
  float v38;
  float v39;
  float v40;
  float v41;
  float *v42;
  float v43;
  int v44;
  int v45;
  float v46;
  int v47;
  int v48;
  float v49;
  int v50;
  uint64_t v51;
  uint64_t v52;
  int v53;
  int v54;
  uint64_t v55;
  float v56;
  float v57;
  float v58;
  uint64_t v59;
  int v60;
  float *v61;
  float v62;
  float v63;
  float v64;
  int v65;
  char *v66;
  uint64_t v67;
  int v68;

  ConvexHull = getConvexHull(a1, a2, a3);
  v7 = ConvexHull;
  if ((int)ConvexHull < 0)
    v8 = -1;
  else
    v8 = 4 * (int)ConvexHull;
  v9 = (const std::nothrow_t *)MEMORY[0x1E0DE4E10];
  v10 = (float *)operator new[](v8, MEMORY[0x1E0DE4E10]);
  v11 = (float *)operator new[](v8, v9);
  v12 = (float *)operator new[](v8, v9);
  v13 = operator new[]();
  v14 = operator new[]();
  if (v10)
    v15 = v11 == 0;
  else
    v15 = 1;
  if (v15 || v12 == 0)
  {
LABEL_65:
    if (!v10)
      goto LABEL_67;
  }
  else
  {
    v17 = (v7 - 1);
    if ((int)v7 >= 1)
    {
      v18 = 0;
      v19 = (float *)(a3 + 4);
      v20 = v7;
      do
      {
        if (v17 == v18)
          v21 = 0;
        else
          v21 = v18 + 1;
        v22 = (float *)(a3 + 12 * v21);
        v23 = v22[1];
        v24 = *v22 - *(v19 - 1);
        v11[v18] = v24;
        v25 = *v19;
        v19 += 3;
        v12[v18] = v23 - v25;
        v10[v18++] = sqrtf((float)((float)(v23 - v25) * (float)(v23 - v25)) + (float)(v24 * v24));
      }
      while (v7 != v18);
      v26 = 0;
      while (1)
      {
        v27 = v26 + 1;
        v28 = v10[v26];
        v29 = (int)(float)((float)(v28 / INFINITY) + -1.0);
        if (v29 >= 1)
        {
          v30 = v26 == v17 ? 0 : v26 + 1;
          if (a2 >= 1)
          {
            v31 = 0;
            v32 = 0;
            v33 = (float *)(a3 + 12 * v30);
            v34 = *v33;
            v35 = v33[1];
            v36 = (float *)(a3 + 12 * v26);
            v38 = *v36;
            v37 = v36[1];
            v39 = (float)(v34 * v37) - (float)(v35 * *v36);
            v40 = v11[v26];
            v41 = v12[v26];
            v42 = (float *)(a1 + 4);
            do
            {
              v43 = *(v42 - 1);
              v44 = (float)(v43 - v38) > 0.0;
              if ((float)(v43 - v38) < 0.0)
                v44 = -1;
              if ((float)(v43 - v34) <= 0.0)
                v45 = 0;
              else
                v45 = -1;
              if ((float)(v43 - v34) < 0.0)
                v45 = 1;
              v46 = *v42;
              if (v44 == v45)
                goto LABEL_40;
              v47 = (float)(v46 - v37) > 0.0;
              if ((float)(v46 - v37) < 0.0)
                v47 = -1;
              if ((float)(v46 - v35) <= 0.0)
                v48 = 0;
              else
                v48 = -1;
              if ((float)(v46 - v35) < 0.0)
                v48 = 1;
              if (v47 == v48)
              {
LABEL_40:
                v49 = fabsf(v39 + (float)((float)(v46 * (float)-v40) + (float)(v41 * v43))) / v28;
                if (v49 < INFINITY)
                {
                  *(_DWORD *)(v13 + 4 * v32) = v31;
                  *(float *)(v14 + 4 * v32++) = v49;
                }
              }
              ++v31;
              v42 += 3;
            }
            while (a2 != v31);
            if (v32 >= 3)
              break;
          }
        }
LABEL_64:
        v26 = v27;
        if (v27 == v20)
          goto LABEL_65;
      }
      v50 = 0;
      v51 = (int)v7;
LABEL_45:
      v52 = 0;
      v53 = 0;
      v54 = 0;
      v55 = 0;
      v38 = (float)(v40 / (float)v29) + v38;
      v37 = (float)(v41 / (float)v29) + v37;
      v56 = 0.0;
      v57 = 3.4028e38;
      v58 = 0.0;
      while (1)
      {
        v59 = v55;
        v60 = v54;
        v61 = (float *)&a1[12 * *(int *)(v13 + 4 * v52)];
        v62 = (float)((float)(v61[1] - v37) * (float)(v61[1] - v37))
            + (float)((float)(*v61 - v38) * (float)(*v61 - v38));
        if (v62 >= v57)
        {
          if (v62 >= v56)
          {
            if (v62 >= v58)
            {
              v62 = v57;
              v55 = v59;
            }
            else
            {
              v58 = (float)((float)(v61[1] - v37) * (float)(v61[1] - v37))
                  + (float)((float)(*v61 - v38) * (float)(*v61 - v38));
              v62 = v57;
              v55 = v59;
              v53 = v52;
            }
            goto LABEL_51;
          }
          v58 = v56;
          v56 = (float)((float)(v61[1] - v37) * (float)(v61[1] - v37))
              + (float)((float)(*v61 - v38) * (float)(*v61 - v38));
          v62 = v57;
          v55 = v59;
          v54 = v52;
        }
        else
        {
          v58 = v56;
          v56 = v57;
          v55 = v52;
          v54 = v59;
        }
        v53 = v60;
LABEL_51:
        ++v52;
        v57 = v62;
        if (v32 == v52)
        {
          v63 = *(float *)(v14 + 4 * (int)v55);
          v64 = *(float *)(v14 + 4 * v54);
          if (v63 <= v64)
            v65 = v55;
          else
            v65 = v54;
          if (v63 > v64)
            v63 = *(float *)(v14 + 4 * v54);
          if (v63 > *(float *)(v14 + 4 * v53))
            v65 = v53;
          v66 = &a1[12 * *(int *)(v13 + 4 * v65)];
          v7 = v51 + 1;
          v67 = a3 + 12 * v51;
          v68 = *((_DWORD *)v66 + 2);
          *(_QWORD *)v67 = *(_QWORD *)v66;
          *(_DWORD *)(v67 + 8) = v68;
          ++v50;
          v51 = v7;
          if (v50 == v29)
            goto LABEL_64;
          goto LABEL_45;
        }
      }
    }
  }
  MEMORY[0x1BCCA128C](v10, 0x1000C8052888210);
LABEL_67:
  if (v11)
    MEMORY[0x1BCCA128C](v11, 0x1000C8052888210);
  if (v12)
    MEMORY[0x1BCCA128C](v12, 0x1000C8052888210);
  MEMORY[0x1BCCA128C](v13, 0x1000C8052888210);
  MEMORY[0x1BCCA128C](v14, 0x1000C8052888210);
  return v7;
}

uint64_t VCPProtoImageCompositionResultReadFrom(uint64_t a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  char v14;
  uint64_t v16;
  int v17;
  unint64_t v19;
  uint64_t v20;
  unint64_t v21;
  int v22;
  VCPProtoLine *v23;
  uint64_t result;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) < *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
  {
    v7 = (int *)MEMORY[0x1E0D82BB8];
    do
    {
      if (*(_BYTE *)(a2 + *v5))
        return *(_BYTE *)(a2 + *v5) == 0;
      v8 = 0;
      v9 = 0;
      v10 = 0;
      while (1)
      {
        v11 = *v3;
        v12 = *(_QWORD *)(a2 + v11);
        v13 = v12 + 1;
        if (v12 == -1 || v13 > *(_QWORD *)(a2 + *v4))
          break;
        v14 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
        *(_QWORD *)(a2 + v11) = v13;
        v10 |= (unint64_t)(v14 & 0x7F) << v8;
        if ((v14 & 0x80) == 0)
          goto LABEL_12;
        v8 += 7;
        if (v9++ >= 9)
        {
          v10 = 0;
          v16 = *v5;
          v17 = *(unsigned __int8 *)(a2 + v16);
          goto LABEL_14;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
      v16 = *v5;
      v17 = *(unsigned __int8 *)(a2 + v16);
      if (*(_BYTE *)(a2 + v16))
        v10 = 0;
LABEL_14:
      if (v17 || (v10 & 7) == 4)
        return *(_BYTE *)(a2 + *v5) == 0;
      v19 = v10 >> 3;
      if ((v10 >> 3) == 3)
      {
        v23 = objc_alloc_init(VCPProtoLine);
        objc_storeStrong((id *)(a1 + 16), v23);
        if (!PBReaderPlaceMark() || !VCPProtoLineReadFrom((uint64_t)v23, a2))
        {
LABEL_36:

          return 0;
        }
      }
      else
      {
        if ((_DWORD)v19 != 2)
        {
          if ((_DWORD)v19 == 1)
          {
            v20 = *v3;
            v21 = *(_QWORD *)(a2 + v20);
            if (v21 <= 0xFFFFFFFFFFFFFFFBLL && v21 + 4 <= *(_QWORD *)(a2 + *v4))
            {
              v22 = *(_DWORD *)(*(_QWORD *)(a2 + *v7) + v21);
              *(_QWORD *)(a2 + v20) = v21 + 4;
            }
            else
            {
              *(_BYTE *)(a2 + v16) = 1;
              v22 = 0;
            }
            *(_DWORD *)(a1 + 8) = v22;
          }
          else
          {
            result = PBReaderSkipValueWithTag();
            if (!(_DWORD)result)
              return result;
          }
          continue;
        }
        v23 = objc_alloc_init(VCPProtoPoint);
        objc_storeStrong((id *)(a1 + 24), v23);
        if (!PBReaderPlaceMark() || !VCPProtoPointReadFrom((uint64_t)v23, a2))
          goto LABEL_36;
      }
      PBReaderRecallMark();

    }
    while (*(_QWORD *)(a2 + *v3) < *(_QWORD *)(a2 + *v4));
  }
  return *(_BYTE *)(a2 + *v5) == 0;
}

void sub_1B6D552FC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  void *v14;
  void *v15;
  void *v16;

  _Unwind_Resume(a1);
}

void sub_1B6D553D4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void sub_1B6D5556C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1B6D55B20(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, void *a14, void *a15)
{
  void *v15;
  void *v16;
  void *v17;
  void *v18;
  void *v19;

  _Unwind_Resume(a1);
}

void sub_1B6D55FC0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, uint64_t a11, void *a12)
{
  void *v12;

  _Unwind_Resume(a1);
}

void sub_1B6D5660C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, void *a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,void *a23)
{
  void *v23;
  void *v24;
  void *v25;
  void *v26;

  _Unwind_Resume(a1);
}

float *ma::Translation::Translation(float *this, float a2, float a3, float a4)
{
  *this = a2;
  this[1] = a3;
  this[2] = a4;
  return this;
}

float ma::Translation::AbsSum(ma::Translation *this)
{
  return (float)(fabsf(*(float *)this) + fabsf(*((float *)this + 1))) + fabsf(*((float *)this + 2));
}

float ma::Translation::CroCorr(ma::Translation *this, const ma::Translation *a2)
{
  float v2;
  float v3;
  float v4;
  float v5;
  float v6;
  float v7;
  float v8;
  float result;
  float v10;

  v2 = *(float *)this;
  v3 = *((float *)this + 1);
  v4 = *(float *)a2;
  v5 = *((float *)a2 + 1);
  v6 = *((float *)this + 2);
  v7 = *((float *)a2 + 2);
  v8 = sqrtf((float)((float)((float)(v3 * v3) + (float)(v2 * v2)) + (float)(v6 * v6))* (float)((float)((float)(v5 * v5) + (float)(v4 * v4)) + (float)(v7 * v7)));
  result = 1.0;
  if (v8 != 0.0)
  {
    v10 = (float)((float)(v3 * v5) + (float)(v2 * v4)) + (float)(v6 * v7);
    result = 0.0;
    if ((float)(v10 * v8) > 0.0)
      return v10 / v8;
  }
  return result;
}

float ma::Translation::operator=(uint64_t a1, uint64_t a2)
{
  float result;

  if (a1 != a2)
  {
    *(_QWORD *)a1 = *(_QWORD *)a2;
    result = *(float *)(a2 + 8);
    *(float *)(a1 + 8) = result;
  }
  return result;
}

float32_t ma::Translation::operator+=(float32x2_t *a1, float32x2_t *a2)
{
  float32_t result;

  *a1 = vadd_f32(*a2, *a1);
  result = a2[1].f32[0] + a1[1].f32[0];
  a1[1].f32[0] = result;
  return result;
}

float ma::Translation::operator-(float *a1, float *a2)
{
  return *a1 - *a2;
}

float32x2_t ma::Translation::operator*(float32x2_t *a1, float32x2_t *a2)
{
  return vmul_f32(*a1, *a2);
}

float ma::Translation::operator*(float *a1, float a2)
{
  return *a1 * a2;
}

float ma::Translation::operator/(float *a1, float a2)
{
  return *a1 / a2;
}

void sub_1B6D56A6C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_1B6D56B64(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  void *v14;
  void *v15;

  _Unwind_Resume(a1);
}

void sub_1B6D56EA4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_1B6D574B8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{

  _Unwind_Resume(a1);
}

void sub_1B6D578F0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{

  _Unwind_Resume(a1);
}

void sub_1B6D57AF0(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1B6D57B5C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, objc_super a9)
{
  void *v9;
  void *v10;

  v10 = v9;
  a9.receiver = v10;
  a9.super_class = (Class)VCPRealTimeAnalysisService;
  -[_Unwind_Exception dealloc](&a9, sel_dealloc);
  _Unwind_Resume(a1);
}

void sub_1B6D57C54(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1B6D57DE4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id location)
{
  id *v14;

  objc_destroyWeak(v14);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_1B6D57F3C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1B6D5810C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  _Unwind_Resume(a1);
}

void sub_1B6D58200(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1B6D5841C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1B6D58588(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1B6D58664(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1B6D588F8(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1B6D58BE0(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_1B6D58E64(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

double keyPointPosition(VCPKeypoint *x0_0, int a2)
{
  VCPKeypoint *v3;
  float64_t v4;
  float64x2_t v5;
  double v6;
  CGPoint v8;

  v3 = x0_0;
  -[VCPKeypoint location](v3, "location");
  transformLocation(v8, 0, a2);
  v5.f64[1] = v4;
  v6 = COERCE_DOUBLE(vcvt_f32_f64(v5));

  return v6;
}

{
  VCPKeypoint *v3;
  float64_t v4;
  float64x2_t v5;
  double v6;
  CGPoint v8;

  v3 = x0_0;
  -[VCPKeypoint location](v3, "location");
  transformLocation(v8, 0, a2);
  v5.f64[1] = v4;
  v6 = COERCE_DOUBLE(vcvt_f32_f64(v5));

  return v6;
}

void sub_1B6D58F04(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1B6D59110(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1B6D592BC(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_1B6D59524(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1B6D59768(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1B6D59DAC(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1B6D59E44()
{
  JUMPOUT(0x1B6D59E38);
}

void sub_1B6D59E50()
{
  JUMPOUT(0x1B6D59E3CLL);
}

void sub_1B6D5A804(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  _Unwind_Resume(a1);
}

void sub_1B6D5A8E4()
{
  JUMPOUT(0x1B6D5A8D4);
}

void sub_1B6D5B5C8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15, uint64_t a16, uint64_t a17, void *a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,_Unwind_Exception *exception_object,uint64_t a25,void *a26,void *a27,uint64_t a28)
{
  void *v28;
  void *v29;

  _Unwind_Resume(a1);
}

void sub_1B6D5B898(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1B6D5BA14(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_1B6D5BAEC(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1B6D5BC9C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_1B6D5BD50(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1B6D5C7B0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{
  void *v10;
  void *v11;
  void *v12;

  _Unwind_Resume(a1);
}

void sub_1B6D5CAB4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  _Unwind_Resume(a1);
}

void sub_1B6D5CDB4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1B6D5CEA4(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1B6D5D364(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9, void *a10, uint64_t a11, void *a12)
{
  void *v12;
  void *v13;
  void *v14;
  void *v15;

  _Unwind_Resume(a1);
}

void sub_1B6D5D9B8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, objc_super a9)
{
  a9.super_class = (Class)MADTextEmbeddingThreshold;
  -[_Unwind_Exception dealloc](&a9, sel_dealloc);
  _Unwind_Resume(a1);
}

void sub_1B6D5DC94(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1B6D5DEF4(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1B6D5E65C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  void *v2;
  va_list va;

  va_start(va, a2);
  CVPixelBufferLock::~CVPixelBufferLock((CVPixelBufferLock *)va);

  _Unwind_Resume(a1);
}

uint64_t VCPProtoLivePhotoFrameInstructionReadFrom(uint64_t a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  char v14;
  BOOL v15;
  uint64_t v16;
  int v17;
  int v18;
  char v20;
  unsigned int v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  char v26;
  unint64_t *v27;
  unint64_t v28;
  unint64_t v29;
  uint64_t v30;
  char v31;
  unsigned int v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  char v37;
  char v38;
  unsigned int v39;
  uint64_t v40;
  uint64_t v41;
  unint64_t v42;
  char v43;
  char v44;
  unsigned int v45;
  uint64_t v46;
  uint64_t v47;
  unint64_t v48;
  char v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  unint64_t v53;
  uint64_t result;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) < *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
  {
    v7 = (int *)MEMORY[0x1E0D82BB8];
    while (2)
    {
      if (!*(_BYTE *)(a2 + *v5))
      {
        v8 = 0;
        v9 = 0;
        v10 = 0;
        while (1)
        {
          v11 = *v3;
          v12 = *(_QWORD *)(a2 + v11);
          v13 = v12 + 1;
          if (v12 == -1 || v13 > *(_QWORD *)(a2 + *v4))
            break;
          v14 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
          *(_QWORD *)(a2 + v11) = v13;
          v10 |= (unint64_t)(v14 & 0x7F) << v8;
          if ((v14 & 0x80) == 0)
            goto LABEL_12;
          v8 += 7;
          v15 = v9++ >= 9;
          if (v15)
          {
            v10 = 0;
            v16 = *v5;
            v17 = *(unsigned __int8 *)(a2 + v16);
            goto LABEL_14;
          }
        }
        *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
        v16 = *v5;
        v17 = *(unsigned __int8 *)(a2 + v16);
        if (*(_BYTE *)(a2 + v16))
          v10 = 0;
LABEL_14:
        v18 = v10 & 7;
        if (!v17 && v18 != 4)
        {
          switch((v10 >> 3))
          {
            case 1u:
              v20 = 0;
              v21 = 0;
              v22 = 0;
              while (1)
              {
                v23 = *v3;
                v24 = *(_QWORD *)(a2 + v23);
                v25 = v24 + 1;
                if (v24 == -1 || v25 > *(_QWORD *)(a2 + *v4))
                  break;
                v26 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v24);
                *(_QWORD *)(a2 + v23) = v25;
                v22 |= (unint64_t)(v26 & 0x7F) << v20;
                if ((v26 & 0x80) == 0)
                  goto LABEL_59;
                v20 += 7;
                v15 = v21++ >= 9;
                if (v15)
                {
                  v22 = 0;
                  goto LABEL_61;
                }
              }
              *(_BYTE *)(a2 + *v5) = 1;
LABEL_59:
              if (*(_BYTE *)(a2 + *v5))
                v22 = 0;
LABEL_61:
              v50 = 40;
              goto LABEL_70;
            case 2u:
              if (v18 == 2)
              {
                result = PBReaderPlaceMark();
                if (!(_DWORD)result)
                  return result;
                while (1)
                {
                  v27 = (unint64_t *)(a2 + *v3);
                  v28 = *v27;
                  v29 = *(_QWORD *)(a2 + *v4);
                  if (*v27 >= v29)
                    break;
                  v30 = *v5;
                  if (*(_BYTE *)(a2 + v30))
                    break;
                  if (v28 > 0xFFFFFFFFFFFFFFFBLL || v28 + 4 > v29)
                    *(_BYTE *)(a2 + v30) = 1;
                  else
                    *v27 = v28 + 4;
                  PBRepeatedFloatAdd();
                }
                PBReaderRecallMark();
              }
              else
              {
                v52 = *v3;
                v53 = *(_QWORD *)(a2 + v52);
                if (v53 <= 0xFFFFFFFFFFFFFFFBLL && v53 + 4 <= *(_QWORD *)(a2 + *v4))
                  *(_QWORD *)(a2 + v52) = v53 + 4;
                else
                  *(_BYTE *)(a2 + v16) = 1;
                PBRepeatedFloatAdd();
              }
LABEL_82:
              if (*(_QWORD *)(a2 + *v3) >= *(_QWORD *)(a2 + *v4))
                return *(_BYTE *)(a2 + *v5) == 0;
              continue;
            case 3u:
              v31 = 0;
              v32 = 0;
              v33 = 0;
              while (2)
              {
                v34 = *v3;
                v35 = *(_QWORD *)(a2 + v34);
                v36 = v35 + 1;
                if (v35 == -1 || v36 > *(_QWORD *)(a2 + *v4))
                {
                  *(_BYTE *)(a2 + *v5) = 1;
                }
                else
                {
                  v37 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v35);
                  *(_QWORD *)(a2 + v34) = v36;
                  v33 |= (unint64_t)(v37 & 0x7F) << v31;
                  if (v37 < 0)
                  {
                    v31 += 7;
                    v15 = v32++ >= 9;
                    if (v15)
                    {
                      LODWORD(v33) = 0;
                      goto LABEL_65;
                    }
                    continue;
                  }
                }
                break;
              }
              if (*(_BYTE *)(a2 + *v5))
                LODWORD(v33) = 0;
LABEL_65:
              v51 = 52;
              goto LABEL_75;
            case 4u:
              v38 = 0;
              v39 = 0;
              v22 = 0;
              while (2)
              {
                v40 = *v3;
                v41 = *(_QWORD *)(a2 + v40);
                v42 = v41 + 1;
                if (v41 == -1 || v42 > *(_QWORD *)(a2 + *v4))
                {
                  *(_BYTE *)(a2 + *v5) = 1;
                }
                else
                {
                  v43 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v41);
                  *(_QWORD *)(a2 + v40) = v42;
                  v22 |= (unint64_t)(v43 & 0x7F) << v38;
                  if (v43 < 0)
                  {
                    v38 += 7;
                    v15 = v39++ >= 9;
                    if (v15)
                    {
                      v22 = 0;
                      goto LABEL_69;
                    }
                    continue;
                  }
                }
                break;
              }
              if (*(_BYTE *)(a2 + *v5))
                v22 = 0;
LABEL_69:
              v50 = 32;
LABEL_70:
              *(_QWORD *)(a1 + v50) = v22;
              goto LABEL_82;
            case 5u:
              v44 = 0;
              v45 = 0;
              v33 = 0;
              while (2)
              {
                v46 = *v3;
                v47 = *(_QWORD *)(a2 + v46);
                v48 = v47 + 1;
                if (v47 == -1 || v48 > *(_QWORD *)(a2 + *v4))
                {
                  *(_BYTE *)(a2 + *v5) = 1;
                }
                else
                {
                  v49 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v47);
                  *(_QWORD *)(a2 + v46) = v48;
                  v33 |= (unint64_t)(v49 & 0x7F) << v44;
                  if (v49 < 0)
                  {
                    v44 += 7;
                    v15 = v45++ >= 9;
                    if (v15)
                    {
                      LODWORD(v33) = 0;
                      goto LABEL_74;
                    }
                    continue;
                  }
                }
                break;
              }
              if (*(_BYTE *)(a2 + *v5))
                LODWORD(v33) = 0;
LABEL_74:
              v51 = 48;
LABEL_75:
              *(_DWORD *)(a1 + v51) = v33;
              goto LABEL_82;
            default:
              if ((PBReaderSkipValueWithTag() & 1) != 0)
                goto LABEL_82;
              return 0;
          }
        }
      }
      break;
    }
  }
  return *(_BYTE *)(a2 + *v5) == 0;
}

ma::RotationAnalysis *ma::RotationAnalysis::RotationAnalysis(ma::RotationAnalysis *this)
{
  uint64_t v2;

  *(_QWORD *)this = 0;
  *((_QWORD *)this + 1) = 0;
  *((_QWORD *)this + 2) = 0;
  v2 = MEMORY[0x1E0CA2E68];
  *(_OWORD *)((char *)this + 24) = *MEMORY[0x1E0CA2E68];
  *((_QWORD *)this + 5) = *(_QWORD *)(v2 + 16);
  *((_BYTE *)this + 48) = 1;
  *((_DWORD *)this + 13) = 0;
  ma::HinkleyDetector::HinkleyDetector((uint64_t)this + 56);
  *((_DWORD *)this + 21) = 0;
  return this;
}

void sub_1B6D5F4E0(_Unwind_Exception *a1)
{
  uint64_t v1;

  MotionAnalysis<ma::ObstructionSegment>::~MotionAnalysis(v1);
  _Unwind_Resume(a1);
}

uint64_t ma::RotationAnalysis::Initialize(ma::RotationAnalysis *this, int a2)
{
  ma::HinkleyDetector::Initialize((uint64_t)this + 56, 0.2, 0.7, 10);
  *((_DWORD *)this + 21) = a2;
  if (a2)
    return MotionAnalysis<ma::RotationSegment>::Initialize((uint64_t)this);
  else
    return 4294967246;
}

uint64_t MotionAnalysis<ma::RotationSegment>::Initialize(uint64_t a1)
{
  ma::RotationSegment *v3;
  ma::RotationSegment *v4;

  if (*(_QWORD *)(a1 + 16) || *(_QWORD *)(a1 + 8))
    return 4294967246;
  *(_QWORD *)(a1 + 16) = CFArrayCreateMutable(0, 0, MEMORY[0x1E0C9B378]);
  v3 = (ma::RotationSegment *)operator new(0x58uLL, MEMORY[0x1E0DE4E10]);
  if (v3)
  {
    v4 = v3;
    ma::RotationSegment::RotationSegment(v3);
    *(_QWORD *)(a1 + 8) = v4;
    if (*(_QWORD *)(a1 + 16))
      return 0;
    else
      return 4294967188;
  }
  else
  {
    *(_QWORD *)(a1 + 8) = 0;
    return 4294967188;
  }
}

void sub_1B6D5F5D8(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1BCCA12A4](v1, MEMORY[0x1E0DE4E10]);
  _Unwind_Resume(a1);
}

uint64_t ma::RotationAnalysis::ProcessFrame(ma::RotationAnalysis *this, Frame *a2)
{
  ma::Segment *v4;
  uint64_t result;
  const __CFArray *v6;
  uint64_t v7;
  CFIndex v8;
  ma::RotationSegment **ValueAtIndex;
  ma::Segment *v10;
  int frame_idx;
  CMTime v12;
  CMTime v13;

  if (*((_BYTE *)this + 48))
  {
    ma::RotationSegment::ResetStats(*((_QWORD *)this + 1), 0, (const ma::MotionResult *)&a2->acc_var_.z_);
    v4 = (ma::Segment *)*((_QWORD *)this + 1);
    v13 = *(CMTime *)((_BYTE *)this + 1);
    ma::Segment::SetStart(v4, 0, &v13);
    result = 0;
    *((_BYTE *)this + 48) = 0;
    return result;
  }
  if (LOBYTE(a2->motion_result_.action_blocks_))
  {
    if (ma::RotationAnalysis::DecideSegmentPoint(this, *((const ma::RotationSegment **)this + 1), a2))
    {
      result = ma::RotationAnalysis::AddSegment((ma::RotationSegment **)this, (const ma::Frame *)a2, 0);
      if ((_DWORD)result)
        return result;
      v6 = *(const __CFArray **)this;
      v7 = *((_QWORD *)this + 1);
      if (*(_QWORD *)this)
      {
        v8 = (int)(CFArrayGetCount(v6) - 1);
        v6 = *(const __CFArray **)this;
      }
      else
      {
        v8 = -1;
      }
      ValueAtIndex = (ma::RotationSegment **)CFArrayGetValueAtIndex(v6, v8);
      ma::RotationSegment::ResetStats(v7, *ValueAtIndex, (const ma::MotionResult *)&a2->acc_var_.z_);
      v10 = (ma::Segment *)*((_QWORD *)this + 1);
      frame_idx = a2->frame_idx_;
      v12 = *(CMTime *)(&a2->frame_idx_ + 1);
      ma::Segment::SetStart(v10, frame_idx, &v12);
    }
    else
    {
      ma::RotationSegment::UpdateStats(*((_QWORD *)this + 1), (const ma::MotionResult *)&a2->acc_var_.z_);
    }
  }
  return 0;
}

BOOL ma::RotationAnalysis::DecideSegmentPoint(ma::RotationAnalysis *this, const ma::RotationSegment *a2, const Frame *a3)
{
  int AngleLevel;
  float v6;
  _BOOL8 v7;
  _BOOL4 v8;
  float v10;
  float v11;

  if (!*((_DWORD *)a2 + 5))
  {
    v7 = 0;
    goto LABEL_8;
  }
  if (*((_DWORD *)this + 16) >= a3->frame_idx_ - *((_DWORD *)a2 + 3))
  {
    v8 = 0;
    v7 = 0;
  }
  else
  {
    AngleLevel = ma::RotationSegment::GetAngleLevel(a2, *((float *)a2 + 18) + a3->motion_result_.action_score_);
    v6 = (float)*((int *)a2 + 19);
    v10 = (float)AngleLevel;
    v11 = v6;
    v7 = ma::HinkleyDetector::Test((ma::RotationAnalysis *)((char *)this + 56), &v11, &v10, *((_DWORD *)a2 + 5) + 1);
    v8 = *((_DWORD *)a2 + 5) == 0;
    if (v7)
      goto LABEL_8;
  }
  if (v8)
LABEL_8:
    ma::HinkleyDetector::ResetStats((ma::RotationAnalysis *)((char *)this + 56));
  return v7;
}

uint64_t ma::RotationAnalysis::AddSegment(ma::RotationSegment **this, const ma::Frame *a2, int a3)
{
  uint64_t result;
  ma::Segment *v7;
  int Count;
  _OWORD *v9;
  int v10;
  CMTime v11;
  CMTime lhs;
  CMTime v13;

  result = ma::RotationSegment::DetermineType(this[1], kOrientationMapToUIResults[*((int *)this + 21)]);
  if (!(_DWORD)result)
  {
    v7 = this[1];
    if (*this)
      Count = CFArrayGetCount(*this);
    else
      Count = 0;
    v9 = (_OWORD *)((char *)a2 + 4);
    v10 = *(_DWORD *)a2 + a3;
    if (a3)
    {
      *(_OWORD *)&lhs.value = *v9;
      lhs.epoch = *(_QWORD *)((char *)a2 + 20);
      v11 = *(CMTime *)((char *)a2 + 28);
      CMTimeAdd(&v13, &lhs, &v11);
    }
    else
    {
      *(_OWORD *)&v13.value = *v9;
      v13.epoch = *(_QWORD *)((char *)a2 + 20);
    }
    ma::Segment::Finalize(v7, Count, v10, &v13);
    return MotionAnalysis<ma::RotationSegment>::AddSegment((uint64_t)this);
  }
  return result;
}

uint64_t ma::RotationAnalysis::FinalizeSegments(ma::RotationSegment **this, const ma::Frame *a2)
{
  uint64_t result;

  result = ma::RotationAnalysis::AddSegment(this, a2, 1);
  if (!(_DWORD)result)
  {
    ma::RotationAnalysis::MergeConsecutiveSameSegments(this);
    return ma::RotationAnalysis::StoreSegmentResult(this);
  }
  return result;
}

uint64_t ma::RotationAnalysis::MergeConsecutiveSameSegments(CFArrayRef *this)
{
  CFIndex i;
  const __CFArray *v3;
  int v4;
  ma::RotationSegment *v5;
  const ma::RotationSegment **ValueAtIndex;
  ma::RotationSegment **v7;

  for (i = 0; ; ++i)
  {
    v3 = *this;
    if (*this)
      LODWORD(v3) = CFArrayGetCount(v3);
    if (i + 1 >= (int)v3)
      break;
    v4 = *(_DWORD *)(*(_QWORD *)CFArrayGetValueAtIndex(*this, i + 1) + 80);
    if (v4 == *(_DWORD *)(*(_QWORD *)CFArrayGetValueAtIndex(*this, i) + 80))
    {
      v5 = *(ma::RotationSegment **)CFArrayGetValueAtIndex(*this, i + 1);
      ValueAtIndex = (const ma::RotationSegment **)CFArrayGetValueAtIndex(*this, i);
      ma::RotationSegment::Merge(v5, *ValueAtIndex);
      v7 = (ma::RotationSegment **)CFArrayGetValueAtIndex(*this, i);
      ma::RotationSegment::Reset(*v7);
    }
  }
  return 0;
}

uint64_t ma::RotationAnalysis::StoreSegmentResult(CFArrayRef *this)
{
  CFIndex v2;
  const __CFArray *v3;
  uint64_t *ValueAtIndex;
  uint64_t v5;
  CFMutableDictionaryRef v6;
  uint64_t v7;
  CFArrayRef v8;
  CMTime v10;
  CMTime v11;
  CMTime time;
  CFMutableDictionaryRef v13;

  v2 = 0;
  v13 = 0;
  while (1)
  {
    v3 = *this;
    if (*this)
      LODWORD(v3) = CFArrayGetCount(v3);
    if (v2 >= (int)v3)
      return 0;
    time = *(CMTime *)(*(_QWORD *)CFArrayGetValueAtIndex(*this, v2) + 48);
    if (CMTimeGetSeconds(&time) > 0.0)
      break;
LABEL_10:
    ++v2;
  }
  v11 = *(CMTime *)(*(_QWORD *)CFArrayGetValueAtIndex(*this, v2) + 24);
  v10 = *(CMTime *)(*(_QWORD *)CFArrayGetValueAtIndex(*this, v2) + 48);
  ValueAtIndex = (uint64_t *)CFArrayGetValueAtIndex(*this, v2);
  v5 = ma::RotationAnalysis::GenerateSegmentAttribute((uint64_t)ValueAtIndex, *ValueAtIndex, &v13);
  v6 = v13;
  if (!(_DWORD)v5)
  {
    v5 = AddResultDictionary(&v11, &v10, 0, 0, v13, this[2]);
    if (!(_DWORD)v5)
    {
      if (v6)
      {
        CFRelease(v6);
        v13 = 0;
      }
      goto LABEL_10;
    }
  }
  v7 = v5;
  if (v6)
    CFRelease(v6);
  v8 = this[2];
  if (v8)
  {
    CFRelease(v8);
    this[2] = 0;
  }
  return v7;
}

uint64_t ma::RotationAnalysis::GenerateSegmentAttribute(uint64_t a1, uint64_t a2, CFMutableDictionaryRef *a3)
{
  CFMutableDictionaryRef Mutable;
  CFNumberRef v6;
  uint64_t result;
  int valuePtr;
  CFNumberRef v9;

  Mutable = CFDictionaryCreateMutable(0, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  if (!Mutable)
    goto LABEL_5;
  valuePtr = kOrientationMapToUIResults[*(int *)(a2 + 80)];
  v6 = CFNumberCreate(0, kCFNumberSInt32Type, &valuePtr);
  v9 = v6;
  if (!v6)
  {
    CF<opaqueCMSampleBuffer *>::~CF((const void **)&v9);
    CFRelease(Mutable);
    Mutable = 0;
LABEL_5:
    result = 4294967188;
    goto LABEL_6;
  }
  CFDictionarySetValue(Mutable, CFSTR("orientation"), v6);
  CF<opaqueCMSampleBuffer *>::~CF((const void **)&v9);
  result = 0;
LABEL_6:
  *a3 = Mutable;
  return result;
}

void sub_1B6D5FBA8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  CF<opaqueCMSampleBuffer *>::~CF((const void **)va);
  _Unwind_Resume(a1);
}

uint64_t ma::RotationAnalysis::CopyProperty(ma::RotationAnalysis *this, CFTypeRef cf1, const __CFAllocator *a3, CFArrayRef *a4)
{
  const __CFArray *v7;
  CFArrayRef Copy;

  if (CFEqual(cf1, CFSTR("OrientationResults")))
  {
    v7 = (const __CFArray *)*((_QWORD *)this + 2);
    if (v7)
      Copy = CFArrayCreateCopy(a3, v7);
    else
      Copy = 0;
    *a4 = Copy;
  }
  return 0;
}

uint64_t ma::RotationAnalysis::CheckCameraOrientation(ma::RotationAnalysis *this, CMTimeRange *a2, int *a3)
{
  const __CFArray *v4;
  int v7;
  CFIndex v8;
  char v9;
  CMTime *v10;
  const __CFArray *v11;
  const void *ValueAtIndex;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  double Seconds;
  float *v17;
  float v18;
  uint64_t v19;
  float v20;
  float v21;
  uint64_t v22;
  BOOL v23;
  uint64_t result;
  CMTime duration;
  CMTime time2;
  CMTime time1;
  CMTimeRange otherRange;
  CMTimeRange range;
  CMTimeRange v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  CMTime v35;
  CMTime v36;
  _OWORD v37[2];
  uint64_t v38;

  v38 = *MEMORY[0x1E0C80C00];
  v4 = *(const __CFArray **)this;
  if (!v4)
    return 4294967246;
  v7 = *((_DWORD *)this + 21);
  if (!CFArrayGetCount(v4))
    return 4294967246;
  v8 = 0;
  v9 = 0;
  memset(v37, 0, sizeof(v37));
  v10 = (CMTime *)MEMORY[0x1E0CA2E68];
  while (1)
  {
    v11 = *(const __CFArray **)this;
    if (*(_QWORD *)this)
      LODWORD(v11) = CFArrayGetCount(v11);
    if (v8 >= (int)v11)
      break;
    if ((*(_BYTE *)(*(_QWORD *)CFArrayGetValueAtIndex(*(CFArrayRef *)this, v8) + 36) & 1) == 0
      || (*(_BYTE *)(*(_QWORD *)CFArrayGetValueAtIndex(*(CFArrayRef *)this, v8) + 60) & 1) == 0
      || *(_QWORD *)(*(_QWORD *)CFArrayGetValueAtIndex(*(CFArrayRef *)this, v8) + 64)
      || (*(_QWORD *)(*(_QWORD *)CFArrayGetValueAtIndex(*(CFArrayRef *)this, v8) + 48) & 0x8000000000000000) != 0
      || (v36 = *(CMTime *)(*(_QWORD *)CFArrayGetValueAtIndex(*(CFArrayRef *)this, v8) + 48),
          v35 = *v10,
          CMTimeCompare(&v36, &v35)))
    {
      ValueAtIndex = CFArrayGetValueAtIndex(*(CFArrayRef *)this, v8);
      v13 = *(_OWORD *)(*(_QWORD *)ValueAtIndex + 56);
      v14 = *(_OWORD *)(*(_QWORD *)ValueAtIndex + 24);
      v33 = *(_OWORD *)(*(_QWORD *)ValueAtIndex + 40);
      v34 = v13;
      v32 = v14;
      memset(&v31, 0, sizeof(v31));
      *(_OWORD *)&range.start.epoch = v33;
      *(_OWORD *)&range.duration.timescale = v13;
      v15 = *(_OWORD *)&a2->start.epoch;
      *(_OWORD *)&otherRange.duration.timescale = *(_OWORD *)&a2->duration.timescale;
      *(_OWORD *)&range.start.value = v14;
      *(_OWORD *)&otherRange.start.value = *(_OWORD *)&a2->start.value;
      *(_OWORD *)&otherRange.start.epoch = v15;
      CMTimeRangeGetIntersection(&v31, &range, &otherRange);
      if ((v31.start.flags & 1) == 0
        || (v31.duration.flags & 1) == 0
        || v31.duration.epoch
        || v31.duration.value < 0
        || (time1 = v31.duration, time2 = *v10, CMTimeCompare(&time1, &time2)))
      {
        if (*(int *)(*(_QWORD *)CFArrayGetValueAtIndex(*(CFArrayRef *)this, v8) + 80) < 1
          || *(int *)(*(_QWORD *)CFArrayGetValueAtIndex(*(CFArrayRef *)this, v8) + 80) > 8)
        {
          return 4294967246;
        }
        duration = v31.duration;
        Seconds = CMTimeGetSeconds(&duration);
        v17 = (float *)v37 + *(int *)(*(_QWORD *)CFArrayGetValueAtIndex(*(CFArrayRef *)this, v8) + 80);
        v18 = Seconds + *(v17 - 1);
        *(v17 - 1) = v18;
        v9 = 1;
      }
    }
    ++v8;
  }
  if ((v9 & 1) != 0)
  {
    v19 = 0;
    v20 = 0.0;
    do
    {
      v21 = *((float *)v37 + v19++);
      if (v20 < v21)
      {
        v7 = v19;
        v20 = v21;
      }
    }
    while (v19 != 8);
  }
  v22 = *((unsigned int *)this + 21);
  if ((int)v22 < 1)
    return 4294967246;
  v23 = v22 > 8 || v7 < 1;
  if (v23 || v7 > 8)
    return 4294967246;
  result = 0;
  *a3 = kOrientationMappingTable[8 * kOrientationMapToUIResults[v22] - 8 + v7 - 1];
  return result;
}

uint64_t ma::RotationAnalysis::SetOrientationResult(ma::RotationAnalysis *this, CFArrayRef theArray)
{
  CFIndex v4;
  const __CFDictionary *ValueAtIndex;
  const __CFDictionary *Value;
  unint64_t v7;
  const __CFNumber *v8;
  int v9;
  uint64_t result;
  CMTimeRange v11;
  CMTimeRange v12;
  unsigned int valuePtr;

  if (!theArray)
    return 4294967246;
  if (CFArrayGetCount(theArray) < 1)
    return 0;
  v4 = 0;
  while (1)
  {
    ValueAtIndex = (const __CFDictionary *)CFArrayGetValueAtIndex(theArray, v4);
    memset(&v12, 0, sizeof(v12));
    CMTimeRangeMakeFromDictionary(&v12, ValueAtIndex);
    Value = (const __CFDictionary *)CFDictionaryGetValue(ValueAtIndex, CFSTR("attributes"));
    if (Value)
    {
      v7 = *((unsigned int *)this + 21);
      valuePtr = *((_DWORD *)this + 21);
      v8 = (const __CFNumber *)CFDictionaryGetValue(Value, CFSTR("orientation"));
      if (v8)
      {
        CFNumberGetValue(v8, kCFNumberSInt32Type, &valuePtr);
        v7 = valuePtr;
      }
      v11 = v12;
      v9 = v7 <= 8 ? kQuickTimeVideoOrientationToVCPOrientation[v7] : 0;
      result = ma::RotationAnalysis::SetResults((CFMutableArrayRef *)this, &v11, v9);
      if ((_DWORD)result)
        break;
    }
    if (++v4 >= CFArrayGetCount(theArray))
      return 0;
  }
  return result;
}

uint64_t ma::RotationAnalysis::SetResults(CFMutableArrayRef *this, CMTimeRange *a2, int a3)
{
  ma::RotationSegment *v6;
  ma::RotationSegment *v7;
  __int128 v8;
  uint64_t v9;
  ma::RotationSegment *v11;

  v6 = (ma::RotationSegment *)operator new(0x58uLL, MEMORY[0x1E0DE4E10]);
  if (!v6)
    return 4294967188;
  v7 = v6;
  ma::RotationSegment::RotationSegment(v6);
  v11 = v7;
  v8 = *(_OWORD *)&a2->start.epoch;
  *(_OWORD *)((char *)v7 + 24) = *(_OWORD *)&a2->start.value;
  *(_OWORD *)((char *)v7 + 40) = v8;
  *(_OWORD *)((char *)v7 + 56) = *(_OWORD *)&a2->duration.timescale;
  *((_DWORD *)v7 + 20) = a3;
  v9 = Vector<ma::Object *>::PushBack(this, &v11);
  if ((_DWORD)v9 && v11)
    (*(void (**)(ma::RotationSegment *))(*(_QWORD *)v11 + 8))(v11);
  return v9;
}

void sub_1B6D60100(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1BCCA12A4](v1, MEMORY[0x1E0DE4E10]);
  _Unwind_Resume(a1);
}

uint64_t MotionAnalysis<ma::RotationSegment>::AddSegment(uint64_t a1)
{
  ma::RotationSegment *v2;
  ma::RotationSegment *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;

  v2 = (ma::RotationSegment *)operator new(0x58uLL, MEMORY[0x1E0DE4E10]);
  if (!v2)
    return 4294967188;
  v3 = v2;
  ma::RotationSegment::RotationSegment(v2);
  v4 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)(a1 + 8) = v3;
  v7 = v4;
  v5 = Vector<ma::Object *>::PushBack((CFMutableArrayRef *)a1, &v7);
  if ((_DWORD)v5 && v7)
    (*(void (**)(uint64_t))(*(_QWORD *)v7 + 8))(v7);
  return v5;
}

void sub_1B6D6019C(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1BCCA12A4](v1, MEMORY[0x1E0DE4E10]);
  _Unwind_Resume(a1);
}

void sub_1B6D60370(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1B6D60964(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, void *a14, void *a15, void *a16, uint64_t a17, void *a18)
{
  void *v18;
  void *v19;

  _Unwind_Resume(a1);
}

void sub_1B6D616BC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,void *a23,uint64_t a24,uint64_t a25,void *a26,void *a27,void *a28,void *a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,void *a37,void *a38,uint64_t a39,void *a40)
{

  _Unwind_Resume(a1);
}

void sub_1B6D61A14(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1B6D61E90(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void CalculateBlendshapes(const float *__B, float *__C, float *a3, int a4, int a5, int a6, const float *a7, float *a8, float *a9, int *a10, float *a11)
{
  const float *v14;
  uint64_t v15;
  uint64_t v18;
  unsigned int v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v24;

  v14 = __C;
  matrix_multiplication(a7, __B, __C, a5, a5, 1);
  if (a6 >= 1)
  {
    v15 = 0;
    v18 = 3 * a4;
    v24 = a6;
    if (3 * a4 <= 1)
      v19 = 1;
    else
      v19 = 3 * a4;
    v20 = 4 * v19;
    do
    {
      memcpy(a11, a8, 12 * a4);
      v21 = a10[v15];
      if ((int)v21 >= 1)
      {
        matrix_multiplication(v14, a9, a3, 1, a10[v15], v18);
        if (a4 >= 1)
        {
          v22 = 0;
          do
          {
            a11[v22 / 4] = a3[v22 / 4] + a11[v22 / 4];
            v22 += 4;
          }
          while (v20 != v22);
        }
        v14 += v21;
        a9 += (int)v21 * (int)v18;
      }
      a8 += v18;
      a11 += 3 * a4;
      ++v15;
    }
    while (v15 != v24);
  }
}

BOOL VCPProtoLivePhotoVariationParamsReadFrom(uint64_t a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  int v15;
  char v17;
  unsigned int v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  char v22;
  BOOL v23;
  int *v24;
  char v25;
  unsigned int v26;
  uint64_t v27;
  unint64_t v28;
  char v29;
  char v30;
  unsigned int v31;
  uint64_t v32;
  unint64_t v33;
  char v34;
  char v35;
  unsigned int v36;
  uint64_t v37;
  unint64_t v38;
  char v39;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) < *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
  {
    v7 = (int *)MEMORY[0x1E0D82BB8];
    do
    {
      if (*(_BYTE *)(a2 + *v5))
        break;
      v8 = 0;
      v9 = 0;
      v10 = 0;
      while (1)
      {
        v11 = *v3;
        v12 = *(_QWORD *)(a2 + v11);
        if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
          break;
        v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
        *(_QWORD *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0)
          goto LABEL_12;
        v8 += 7;
        if (v9++ >= 9)
        {
          v10 = 0;
          v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
      v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(_BYTE *)(a2 + *v5))
        v10 = 0;
LABEL_14:
      if (v15 || (v10 & 7) == 4)
        break;
      switch((v10 >> 3))
      {
        case 1u:
          v17 = 0;
          v18 = 0;
          v19 = 0;
          while (1)
          {
            v20 = *v3;
            v21 = *(_QWORD *)(a2 + v20);
            if (v21 == -1 || v21 >= *(_QWORD *)(a2 + *v4))
            {
              v24 = &OBJC_IVAR___VCPProtoLivePhotoVariationParams__errorCode;
              goto LABEL_53;
            }
            v22 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v21);
            *(_QWORD *)(a2 + v20) = v21 + 1;
            v19 |= (unint64_t)(v22 & 0x7F) << v17;
            if ((v22 & 0x80) == 0)
              break;
            v17 += 7;
            v23 = v18++ > 8;
            if (v23)
            {
              LODWORD(v19) = 0;
              v24 = &OBJC_IVAR___VCPProtoLivePhotoVariationParams__errorCode;
              goto LABEL_56;
            }
          }
          v24 = &OBJC_IVAR___VCPProtoLivePhotoVariationParams__errorCode;
          goto LABEL_54;
        case 2u:
          v25 = 0;
          v26 = 0;
          v19 = 0;
          *(_BYTE *)(a1 + 24) |= 1u;
          while (2)
          {
            v27 = *v3;
            v28 = *(_QWORD *)(a2 + v27);
            if (v28 == -1 || v28 >= *(_QWORD *)(a2 + *v4))
            {
              v24 = &OBJC_IVAR___VCPProtoLivePhotoVariationParams__loopFadeLen;
              goto LABEL_53;
            }
            v29 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v28);
            *(_QWORD *)(a2 + v27) = v28 + 1;
            v19 |= (unint64_t)(v29 & 0x7F) << v25;
            if (v29 < 0)
            {
              v25 += 7;
              v23 = v26++ > 8;
              if (v23)
              {
                LODWORD(v19) = 0;
                v24 = &OBJC_IVAR___VCPProtoLivePhotoVariationParams__loopFadeLen;
                goto LABEL_56;
              }
              continue;
            }
            break;
          }
          v24 = &OBJC_IVAR___VCPProtoLivePhotoVariationParams__loopFadeLen;
          goto LABEL_54;
        case 3u:
          v30 = 0;
          v31 = 0;
          v19 = 0;
          *(_BYTE *)(a1 + 24) |= 2u;
          while (2)
          {
            v32 = *v3;
            v33 = *(_QWORD *)(a2 + v32);
            if (v33 == -1 || v33 >= *(_QWORD *)(a2 + *v4))
            {
              v24 = &OBJC_IVAR___VCPProtoLivePhotoVariationParams__loopPeriod;
              goto LABEL_53;
            }
            v34 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v33);
            *(_QWORD *)(a2 + v32) = v33 + 1;
            v19 |= (unint64_t)(v34 & 0x7F) << v30;
            if (v34 < 0)
            {
              v30 += 7;
              v23 = v31++ > 8;
              if (v23)
              {
                LODWORD(v19) = 0;
                v24 = &OBJC_IVAR___VCPProtoLivePhotoVariationParams__loopPeriod;
                goto LABEL_56;
              }
              continue;
            }
            break;
          }
          v24 = &OBJC_IVAR___VCPProtoLivePhotoVariationParams__loopPeriod;
          goto LABEL_54;
        case 4u:
          v35 = 0;
          v36 = 0;
          v19 = 0;
          *(_BYTE *)(a1 + 24) |= 4u;
          break;
        default:
          if ((PBReaderSkipValueWithTag() & 1) != 0)
            continue;
          return 0;
      }
      while (1)
      {
        v37 = *v3;
        v38 = *(_QWORD *)(a2 + v37);
        if (v38 == -1 || v38 >= *(_QWORD *)(a2 + *v4))
          break;
        v39 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v38);
        *(_QWORD *)(a2 + v37) = v38 + 1;
        v19 |= (unint64_t)(v39 & 0x7F) << v35;
        if ((v39 & 0x80) == 0)
        {
          v24 = &OBJC_IVAR___VCPProtoLivePhotoVariationParams__loopStart;
          goto LABEL_54;
        }
        v35 += 7;
        v23 = v36++ > 8;
        if (v23)
        {
          LODWORD(v19) = 0;
          v24 = &OBJC_IVAR___VCPProtoLivePhotoVariationParams__loopStart;
          goto LABEL_56;
        }
      }
      v24 = &OBJC_IVAR___VCPProtoLivePhotoVariationParams__loopStart;
LABEL_53:
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_54:
      if (*(_BYTE *)(a2 + *v5))
        LODWORD(v19) = 0;
LABEL_56:
      *(_DWORD *)(a1 + *v24) = v19;
    }
    while (*(_QWORD *)(a2 + *v3) < *(_QWORD *)(a2 + *v4));
  }
  return *(_BYTE *)(a2 + *v5) == 0;
}

void sub_1B6D632D4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  void *v14;
  void *v15;
  void *v16;
  void *v17;
  void *v18;
  void *v19;
  void *v20;

  _Unwind_Resume(a1);
}

void sub_1B6D633E0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void sub_1B6D63660(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_1B6D63784(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1B6D6388C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  v3 = v2;

  _Unwind_Resume(a1);
}

void sub_1B6D63928(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1B6D63A7C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_1B6D63C0C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  _Unwind_Resume(a1);
}

void sub_1B6D63DAC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_1B6D63E20(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void sub_1B6D63E88(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_1B6D64F74(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, void *a14, uint64_t a15, void *a16, uint64_t a17, uint64_t a18, void *a19, void *a20,uint64_t a21,uint64_t a22,uint64_t a23,void *a24,void *a25,void *a26,void *a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,void *a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,void *a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,void *a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  void *a64;
  void *a70;
  void *v70;
  void *v71;
  void *v72;
  void *v73;

  CF<opaqueCMSampleBuffer *>::~CF((const void **)&STACK[0x200]);
  _Unwind_Resume(a1);
}

uint64_t MADProtoFaceprintReadFrom(uint64_t a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  int v15;
  char v17;
  unsigned int v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  char v22;
  uint64_t v23;
  void *v24;
  uint64_t result;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) < *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
  {
    v7 = (int *)MEMORY[0x1E0D82BB8];
    do
    {
      if (*(_BYTE *)(a2 + *v5))
        break;
      v8 = 0;
      v9 = 0;
      v10 = 0;
      while (1)
      {
        v11 = *v3;
        v12 = *(_QWORD *)(a2 + v11);
        if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
          break;
        v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
        *(_QWORD *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0)
          goto LABEL_12;
        v8 += 7;
        v14 = v9++ >= 9;
        if (v14)
        {
          v10 = 0;
          v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
      v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(_BYTE *)(a2 + *v5))
        v10 = 0;
LABEL_14:
      if (v15 || (v10 & 7) == 4)
        break;
      if ((v10 >> 3) == 2)
      {
        PBReaderReadData();
        v23 = objc_claimAutoreleasedReturnValue();
        v24 = *(void **)(a1 + 16);
        *(_QWORD *)(a1 + 16) = v23;

      }
      else if ((v10 >> 3) == 1)
      {
        v17 = 0;
        v18 = 0;
        v19 = 0;
        *(_BYTE *)(a1 + 24) |= 1u;
        while (1)
        {
          v20 = *v3;
          v21 = *(_QWORD *)(a2 + v20);
          if (v21 == -1 || v21 >= *(_QWORD *)(a2 + *v4))
            break;
          v22 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v21);
          *(_QWORD *)(a2 + v20) = v21 + 1;
          v19 |= (unint64_t)(v22 & 0x7F) << v17;
          if ((v22 & 0x80) == 0)
            goto LABEL_31;
          v17 += 7;
          v14 = v18++ >= 9;
          if (v14)
          {
            v19 = 0;
            goto LABEL_33;
          }
        }
        *(_BYTE *)(a2 + *v5) = 1;
LABEL_31:
        if (*(_BYTE *)(a2 + *v5))
          v19 = 0;
LABEL_33:
        *(_QWORD *)(a1 + 8) = v19;
      }
      else
      {
        result = PBReaderSkipValueWithTag();
        if (!(_DWORD)result)
          return result;
      }
    }
    while (*(_QWORD *)(a2 + *v3) < *(_QWORD *)(a2 + *v4));
  }
  return *(_BYTE *)(a2 + *v5) == 0;
}

void sub_1B6D65B30(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1B6D66570(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, void *a13, uint64_t a14, uint64_t a15, void *a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,void *a36)
{

  _Unwind_Resume(a1);
}

void sub_1B6D66C74(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;

  _Unwind_Resume(a1);
}

void sub_1B6D670A4(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1B6D67218(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1B6D6739C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;

  _Unwind_Resume(a1);
}

void sub_1B6D67578(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1B6D67798(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1B6D679F8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void sub_1B6D67C88(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1B6D67FE4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{

  _Unwind_Resume(a1);
}

void sub_1B6D68310(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1B6D6861C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1B6D687E0(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1B6D68BA8(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1B6D68FC8(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1B6D69260(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void sub_1B6D6A000(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, uint64_t a15, void *a16)
{

  _Unwind_Resume(a1);
}

void sub_1B6D6A3F4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1B6D6AA64(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15)
{

  _Unwind_Resume(a1);
}

void sub_1B6D6AFE4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, void *a13)
{

  _Unwind_Resume(a1);
}

void sub_1B6D6B2C8(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_1B6D6B77C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, void *a13)
{

  _Unwind_Resume(a1);
}

void sub_1B6D6B9D0(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1B6D6BC40(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1B6D6BFAC(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1B6D6C4F8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{
  void *v10;
  void *v11;

  _Unwind_Resume(a1);
}

void sub_1B6D6C800(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1B6D6CAD4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1B6D6CE6C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_1B6D6D25C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

uint64_t VCPProtoMovieHumanPoseResultReadFrom(uint64_t a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  char v14;
  BOOL v15;
  uint64_t v16;
  int v17;
  VCPProtoTimeRange *v19;
  uint64_t result;
  uint64_t v21;
  unint64_t v22;
  int v23;
  char v24;
  unsigned int v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  char v30;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) >= *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
    return *(_BYTE *)(a2 + *v5) == 0;
  v7 = (int *)MEMORY[0x1E0D82BB8];
  while (2)
  {
    if (*(_BYTE *)(a2 + *v5))
      return *(_BYTE *)(a2 + *v5) == 0;
    v8 = 0;
    v9 = 0;
    v10 = 0;
    while (1)
    {
      v11 = *v3;
      v12 = *(_QWORD *)(a2 + v11);
      v13 = v12 + 1;
      if (v12 == -1 || v13 > *(_QWORD *)(a2 + *v4))
        break;
      v14 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
      *(_QWORD *)(a2 + v11) = v13;
      v10 |= (unint64_t)(v14 & 0x7F) << v8;
      if ((v14 & 0x80) == 0)
        goto LABEL_12;
      v8 += 7;
      v15 = v9++ >= 9;
      if (v15)
      {
        v10 = 0;
        v16 = *v5;
        v17 = *(unsigned __int8 *)(a2 + v16);
        goto LABEL_14;
      }
    }
    *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
    v16 = *v5;
    v17 = *(unsigned __int8 *)(a2 + v16);
    if (*(_BYTE *)(a2 + v16))
      v10 = 0;
LABEL_14:
    if (v17 || (v10 & 7) == 4)
      return *(_BYTE *)(a2 + *v5) == 0;
    switch((v10 >> 3))
    {
      case 1u:
        v19 = objc_alloc_init(VCPProtoTimeRange);
        objc_storeStrong((id *)(a1 + 24), v19);
        if (PBReaderPlaceMark() && VCPProtoTimeRangeReadFrom((uint64_t)v19, a2))
          goto LABEL_29;
        goto LABEL_45;
      case 2u:
        v21 = *v3;
        v22 = *(_QWORD *)(a2 + v21);
        if (v22 <= 0xFFFFFFFFFFFFFFFBLL && v22 + 4 <= *(_QWORD *)(a2 + *v4))
        {
          v23 = *(_DWORD *)(*(_QWORD *)(a2 + *v7) + v22);
          *(_QWORD *)(a2 + v21) = v22 + 4;
        }
        else
        {
          *(_BYTE *)(a2 + v16) = 1;
          v23 = 0;
        }
        *(_DWORD *)(a1 + 16) = v23;
        goto LABEL_43;
      case 3u:
        v19 = objc_alloc_init(VCPProtoBounds);
        objc_storeStrong((id *)(a1 + 8), v19);
        if (PBReaderPlaceMark() && VCPProtoBoundsReadFrom((uint64_t)v19, a2))
        {
LABEL_29:
          PBReaderRecallMark();

LABEL_43:
          if (*(_QWORD *)(a2 + *v3) >= *(_QWORD *)(a2 + *v4))
            return *(_BYTE *)(a2 + *v5) == 0;
          continue;
        }
LABEL_45:

        return 0;
      case 4u:
        v24 = 0;
        v25 = 0;
        v26 = 0;
        while (2)
        {
          v27 = *v3;
          v28 = *(_QWORD *)(a2 + v27);
          v29 = v28 + 1;
          if (v28 == -1 || v29 > *(_QWORD *)(a2 + *v4))
          {
            *(_BYTE *)(a2 + *v5) = 1;
          }
          else
          {
            v30 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v28);
            *(_QWORD *)(a2 + v27) = v29;
            v26 |= (unint64_t)(v30 & 0x7F) << v24;
            if (v30 < 0)
            {
              v24 += 7;
              v15 = v25++ >= 9;
              if (v15)
              {
                LODWORD(v26) = 0;
                goto LABEL_40;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(a2 + *v5))
          LODWORD(v26) = 0;
LABEL_40:
        *(_DWORD *)(a1 + 20) = v26;
        goto LABEL_43;
      default:
        result = PBReaderSkipValueWithTag();
        if (!(_DWORD)result)
          return result;
        goto LABEL_43;
    }
  }
}

void sub_1B6D6E060(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1B6D6E4B8(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;

  v6 = v4;

  _Unwind_Resume(a1);
}

void sub_1B6D6EA28(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1B6D6ECCC(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1B6D6FC68(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11, void *a12)
{
  void *v12;

  _Unwind_Resume(a1);
}

CFDictionaryRef CMTimeRangeToNSDictionary(CMTimeRange *a1)
{
  __int128 v1;
  CMTimeRange v3;

  v1 = *(_OWORD *)&a1->start.epoch;
  *(_OWORD *)&v3.start.value = *(_OWORD *)&a1->start.value;
  *(_OWORD *)&v3.start.epoch = v1;
  *(_OWORD *)&v3.duration.timescale = *(_OWORD *)&a1->duration.timescale;
  return CMTimeRangeCopyAsDictionary(&v3, 0);
}

void sub_1B6D70134(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1B6D7028C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1B6D7098C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_1B6D70EE0(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_1B6D71110(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1B6D7168C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11, void *a12)
{
  void *v12;
  void *v13;
  void *v14;
  void *v15;

  _Unwind_Resume(a1);
}

void sub_1B6D71A14(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1B6D72064(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15, void *a16)
{

  _Unwind_Resume(a1);
}

void sub_1B6D724D8(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1B6D727B8(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1B6D72B70(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1B6D73234(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *a16)
{
  void *v16;
  void *v17;
  void *v18;

  _Unwind_Resume(a1);
}

void sub_1B6D73524(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11)
{

  _Unwind_Resume(a1);
}

void sub_1B6D7389C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1B6D73D14(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1B6D74738(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1B6D74E60(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1B6D75A60(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *a16)
{

  _Unwind_Resume(a1);
}

void sub_1B6D75DD8(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1B6D75F84(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1B6D7625C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1B6D76528(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1B6D76A78(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,void *a23,void *a24)
{

  _Unwind_Resume(a1);
}

void sub_1B6D77694(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, void *a11)
{
  void *v11;

  _Unwind_Resume(a1);
}

void sub_1B6D77F58(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1B6D792DC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *a16)
{

  _Unwind_Resume(a1);
}

void sub_1B6D79A78(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13)
{

  _Unwind_Resume(a1);
}

void sub_1B6D79D58(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1B6D7A064(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1B6D7A1EC(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1B6D7A77C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{

  _Unwind_Resume(a1);
}

void sub_1B6D7AC2C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1B6D7AF68(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, _Unwind_Exception *exception_object)
{
  void *v11;
  void *v12;
  void *v13;

  _Unwind_Resume(a1);
}

void sub_1B6D7B4A0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void sub_1B6D7B6A0(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1B6D7BD98(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1B6D7C104(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{

  _Unwind_Resume(a1);
}

void sub_1B6D7C2FC(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1B6D7C60C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1B6D7C938(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1B6D7CEB0(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1B6D7D22C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1B6D7D4D4(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1B6D7D788(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1B6D7D9B8(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1B6D7DCFC(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1B6D7DFD4(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1B6D7E780(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1B6D7EC90(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{

  _Unwind_Resume(a1);
}

void sub_1B6D7EEC8(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1B6D7F44C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{

  _Unwind_Resume(a1);
}

void sub_1B6D7FC00(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{

  _Unwind_Resume(a1);
}

void sub_1B6D7FEF0(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

uint64_t std::__introsort<std::_ClassicAlgPolicy,std::__less<void,void> &,std::tuple<int,int> *,false>(uint64_t result, int *a2, uint64_t a3, uint64_t a4, char a5)
{
  int *v8;
  int *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  int *v15;
  uint64_t v16;
  int v17;
  int *v18;
  char v19;
  BOOL v20;
  int v21;
  int v22;
  int v23;

  v8 = (int *)result;
LABEL_2:
  v9 = v8;
LABEL_3:
  v10 = 1 - a4;
  while (2)
  {
    v8 = v9;
    v11 = v10;
    v12 = (char *)a2 - (char *)v9;
    v13 = ((char *)a2 - (char *)v9) >> 3;
    switch(v13)
    {
      case 0uLL:
      case 1uLL:
        return result;
      case 2uLL:
        v21 = *(a2 - 2);
        v22 = *v9;
        if (v21 < *v9 || v22 >= v21 && *(a2 - 1) < v9[1])
        {
          *v9 = v21;
          *(a2 - 2) = v22;
          v23 = v9[1];
          v9[1] = *(a2 - 1);
          *(a2 - 1) = v23;
        }
        return result;
      case 3uLL:
        return std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::tuple<int,int> *>(v9, v9 + 2, a2 - 2);
      case 4uLL:
        return std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::tuple<int,int> *>(v9, v9 + 2, v9 + 4, a2 - 2);
      case 5uLL:
        return std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::tuple<int,int> *>(v9, v9 + 2, v9 + 4, v9 + 6, a2 - 2);
      default:
        if (v12 <= 191)
        {
          if ((a5 & 1) != 0)
            return (uint64_t)std::__insertion_sort[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::tuple<int,int> *>(v9, a2);
          else
            return (uint64_t)std::__insertion_sort_unguarded[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::tuple<int,int> *>(v9, a2);
        }
        if (v11 != 1)
        {
          v14 = v13 >> 1;
          v15 = &v9[2 * (v13 >> 1)];
          if ((unint64_t)v12 < 0x401)
          {
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::tuple<int,int> *>(&v9[2 * (v13 >> 1)], v9, a2 - 2);
            if ((a5 & 1) != 0)
              goto LABEL_14;
          }
          else
          {
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::tuple<int,int> *>(v9, &v9[2 * (v13 >> 1)], a2 - 2);
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::tuple<int,int> *>(v9 + 2, v15 - 2, a2 - 4);
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::tuple<int,int> *>(v9 + 4, &v9[2 * v14 + 2], a2 - 6);
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::tuple<int,int> *>(v15 - 2, v15, &v9[2 * v14 + 2]);
            v16 = *(_QWORD *)v9;
            *(_QWORD *)v9 = *(_QWORD *)v15;
            *(_QWORD *)v15 = v16;
            if ((a5 & 1) != 0)
              goto LABEL_14;
          }
          v17 = *(v9 - 2);
          if (v17 >= *v9 && (*v9 < v17 || *(v9 - 1) >= v9[1]))
          {
            result = (uint64_t)std::__partition_with_equals_on_left[abi:ne180100]<std::_ClassicAlgPolicy,std::tuple<int,int> *,std::__less<void,void> &>(v9, a2);
            v9 = (int *)result;
            goto LABEL_19;
          }
LABEL_14:
          v18 = std::__partition_with_equals_on_right[abi:ne180100]<std::_ClassicAlgPolicy,std::tuple<int,int> *,std::__less<void,void> &>(v9, a2);
          if ((v19 & 1) == 0)
            goto LABEL_17;
          v20 = std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::tuple<int,int> *>(v9, v18);
          v9 = v18 + 2;
          result = std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::tuple<int,int> *>(v18 + 2, a2);
          if (!(_DWORD)result)
          {
            v10 = v11 + 1;
            if (v20)
              continue;
LABEL_17:
            result = std::__introsort<std::_ClassicAlgPolicy,std::__less<void,void> &,std::tuple<int,int> *,false>(v8, v18, a3, -v11, a5 & 1);
            v9 = v18 + 2;
LABEL_19:
            a5 = 0;
            a4 = -v11;
            goto LABEL_3;
          }
          a4 = -v11;
          a2 = v18;
          if (v20)
            return result;
          goto LABEL_2;
        }
        if (v9 != a2)
          return (uint64_t)std::__partial_sort_impl[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::tuple<int,int> *,std::tuple<int,int> *>(v9, a2, a2, a3);
        return result;
    }
  }
}

_DWORD *std::__insertion_sort[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::tuple<int,int> *>(_DWORD *result, _DWORD *a2)
{
  _DWORD *v2;
  uint64_t v3;
  _DWORD *v4;
  _DWORD *v5;
  int v6;
  int v7;
  int v8;
  int v9;
  int v10;
  _DWORD *v11;
  uint64_t v12;
  int v13;
  int v14;
  _DWORD *v15;

  if (result == a2)
    return result;
  v2 = result + 2;
  if (result + 2 == a2)
    return result;
  v3 = 0;
  v4 = result;
  do
  {
    v5 = v4;
    v4 = v2;
    v6 = v5[2];
    v7 = *v5;
    if (v6 >= *v5 && (v7 < v6 || v5[3] >= v5[1]))
      goto LABEL_18;
    v9 = v5[2];
    v8 = v5[3];
    v10 = v5[1];
    v5[2] = v7;
    v4[1] = v10;
    v11 = result;
    if (v5 == result)
      goto LABEL_17;
    v12 = v3;
    while (1)
    {
      v13 = *(_DWORD *)((char *)result + v12 - 8);
      if (v13 <= v9)
        break;
      v14 = *(_DWORD *)((char *)result + v12 - 4);
LABEL_11:
      v5 -= 2;
      v15 = (_DWORD *)((char *)result + v12);
      *v15 = v13;
      v15[1] = v14;
      v12 -= 8;
      if (!v12)
      {
        v11 = result;
        goto LABEL_17;
      }
    }
    if (v13 >= v9)
    {
      v11 = (_DWORD *)((char *)result + v12);
      v14 = *(_DWORD *)((char *)result + v12 - 4);
      if (v14 <= v8)
        goto LABEL_17;
      goto LABEL_11;
    }
    v11 = v5;
LABEL_17:
    *v11 = v9;
    v11[1] = v8;
LABEL_18:
    v2 = v4 + 2;
    v3 += 8;
  }
  while (v4 + 2 != a2);
  return result;
}

int *std::__insertion_sort_unguarded[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::tuple<int,int> *>(int *result, int *a2)
{
  int *v2;
  int *v3;
  int *v4;
  int v5;
  int v6;
  int v7;
  int v8;
  int *i;
  int v10;

  if (result != a2)
  {
    v2 = result + 2;
    if (result + 2 != a2)
    {
      v3 = result + 1;
      do
      {
        v4 = result;
        result = v2;
        v5 = v4[2];
        v6 = *v4;
        if (v5 < *v4 || v6 >= v5 && v4[3] < v4[1])
        {
          v7 = *result;
          v8 = result[1];
          for (i = v3; ; i -= 2)
          {
            v10 = *i;
            i[1] = v6;
            i[2] = v10;
            v6 = *(i - 3);
            if (v6 <= v7 && (v6 < v7 || *(i - 2) <= v8))
              break;
          }
          *(i - 1) = v7;
          *i = v8;
        }
        v2 = result + 2;
        v3 += 2;
      }
      while (result + 2 != a2);
    }
  }
  return result;
}

uint64_t std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::tuple<int,int> *>(int *a1, int *a2, int *a3)
{
  int v3;
  int v4;
  int v5;
  int *v6;
  int *v7;
  uint64_t v8;
  int v9;
  int v10;
  int *v11;
  int v12;
  int v13;
  int v14;
  int v15;
  int v16;
  int v17;

  v3 = *a2;
  v4 = *a1;
  if (*a2 >= *a1 && (v4 < v3 || a2[1] >= a1[1]))
  {
    v9 = *a3;
    if (*a3 >= v3 && (v3 < v9 || a3[1] >= a2[1]))
      return 0;
    *a2 = v9;
    *a3 = v3;
    v11 = a2 + 1;
    v10 = a2[1];
    a2[1] = a3[1];
    a3[1] = v10;
    v12 = *a2;
    v13 = *a1;
    if (*a2 >= *a1 && (v13 < v12 || *v11 >= a1[1]))
      return 1;
    *a1 = v12;
    v6 = a1 + 1;
    *a2 = v13;
    v8 = 2;
  }
  else
  {
    v5 = *a3;
    if (*a3 < v3 || v3 >= v5 && a3[1] < a2[1])
    {
      *a1 = v5;
      v6 = a1 + 1;
      *a3 = v4;
      v7 = a3 + 1;
      v8 = 1;
    }
    else
    {
      *a1 = v3;
      *a2 = v4;
      v14 = a1[1];
      a1[1] = a2[1];
      a2[1] = v14;
      v15 = *a3;
      v16 = *a2;
      if (*a3 >= *a2 && (v16 < v15 || a3[1] >= v14))
        return 1;
      *a2 = v15;
      *a3 = v16;
      v7 = a3 + 1;
      v8 = 2;
      v6 = a2 + 1;
    }
    v11 = v7;
  }
  v17 = *v6;
  *v6 = *v11;
  *v11 = v17;
  return v8;
}

int *std::__partition_with_equals_on_left[abi:ne180100]<std::_ClassicAlgPolicy,std::tuple<int,int> *,std::__less<void,void> &>(int *a1, int *a2)
{
  int v2;
  int v3;
  int v4;
  int *i;
  int v6;
  int v7;
  int v8;
  int v9;
  int v10;
  int v11;
  int v12;
  int v13;
  BOOL v14;

  v3 = *a1;
  v2 = a1[1];
  v4 = *(a2 - 2);
  if (v4 <= *a1 && (v4 < v3 || *(a2 - 1) <= v2))
  {
    for (i = a1 + 2; i < a2 && *i <= v3 && (*i < v3 || i[1] <= v2); i += 2)
      ;
  }
  else
  {
    i = a1;
    do
    {
      v7 = i[2];
      i += 2;
      v6 = v7;
    }
    while (v7 <= v3 && (v6 < v3 || i[1] <= v2));
  }
  if (i < a2)
  {
    for (a2 -= 2; v4 > v3 || v4 >= v3 && a2[1] > v2; a2 -= 2)
    {
      v8 = *(a2 - 2);
      v4 = v8;
    }
  }
  if (i < a2)
  {
    v9 = *i;
    v10 = *a2;
    do
    {
      *i = v10;
      *a2 = v9;
      v11 = i[1];
      i[1] = a2[1];
      a2[1] = v11;
      do
      {
        v12 = i[2];
        i += 2;
        v9 = v12;
      }
      while (v12 <= v3 && (v9 < v3 || i[1] <= v2));
      do
      {
        do
        {
          v13 = *(a2 - 2);
          a2 -= 2;
          v10 = v13;
          v14 = v13 < v3;
        }
        while (v13 > v3);
      }
      while (!v14 && a2[1] > v2);
    }
    while (i < a2);
  }
  if (i - 2 != a1)
  {
    *a1 = *(i - 2);
    a1[1] = *(i - 1);
  }
  *(i - 2) = v3;
  *(i - 1) = v2;
  return i;
}

_DWORD *std::__partition_with_equals_on_right[abi:ne180100]<std::_ClassicAlgPolicy,std::tuple<int,int> *,std::__less<void,void> &>(int *a1, _DWORD *a2)
{
  uint64_t v2;
  int v3;
  int v4;
  int v5;
  unint64_t v6;
  int v7;
  int v8;
  int v9;
  int v10;
  int v12;
  _DWORD *v13;
  _DWORD *v14;
  int v15;
  int v16;
  BOOL v17;
  int v18;

  v2 = 0;
  v3 = *a1;
  v4 = a1[1];
  while (1)
  {
    v5 = a1[v2 + 2];
    if (v5 >= v3 && (v5 > v3 || a1[v2 + 3] >= v4))
      break;
    v2 += 2;
  }
  v6 = (unint64_t)&a1[v2 + 2];
  if (v2 * 4)
  {
    do
    {
      v8 = *(a2 - 2);
      a2 -= 2;
      v7 = v8;
    }
    while (v8 >= v3 && (v7 > v3 || a2[1] >= v4));
  }
  else
  {
LABEL_19:
    if (v6 < (unint64_t)a2)
    {
      do
      {
        v10 = *(a2 - 2);
        a2 -= 2;
        v9 = v10;
        if (v10 < v3)
          break;
        if (v9 > v3)
          goto LABEL_19;
      }
      while (a2[1] >= v4 && v6 < (unint64_t)a2);
    }
  }
  if (v6 >= (unint64_t)a2)
  {
    v13 = (_DWORD *)v6;
  }
  else
  {
    v12 = *a2;
    v13 = (_DWORD *)v6;
    v14 = a2;
    do
    {
      *v13 = v12;
      *v14 = v5;
      v15 = v13[1];
      v13[1] = v14[1];
      v14[1] = v15;
      do
      {
        do
        {
          v16 = v13[2];
          v13 += 2;
          v5 = v16;
          v17 = v16 <= v3;
        }
        while (v16 < v3);
      }
      while (v17 && v13[1] < v4);
      do
      {
        v18 = *(v14 - 2);
        v14 -= 2;
        v12 = v18;
      }
      while (v18 >= v3 && (v12 > v3 || v14[1] >= v4));
    }
    while (v13 < v14);
  }
  if (v13 - 2 != a1)
  {
    *a1 = *(v13 - 2);
    a1[1] = *(v13 - 1);
  }
  *(v13 - 2) = v3;
  *(v13 - 1) = v4;
  return v13 - 2;
}

BOOL std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::tuple<int,int> *>(int *a1, int *a2)
{
  uint64_t v4;
  _BOOL8 result;
  int v6;
  int v7;
  int v8;
  int *v9;
  int *v10;
  uint64_t v11;
  int v12;
  int v13;
  int v14;
  int v15;
  int *v16;
  uint64_t v17;
  char *v18;
  int v19;
  int v20;

  v4 = ((char *)a2 - (char *)a1) >> 3;
  result = 1;
  switch(v4)
  {
    case 0:
    case 1:
      return result;
    case 2:
      v6 = *(a2 - 2);
      v7 = *a1;
      if (v6 < *a1 || v7 >= v6 && *(a2 - 1) < a1[1])
      {
        *a1 = v6;
        *(a2 - 2) = v7;
        v8 = a1[1];
        a1[1] = *(a2 - 1);
        *(a2 - 1) = v8;
      }
      return result;
    case 3:
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::tuple<int,int> *>(a1, a1 + 2, a2 - 2);
      return 1;
    case 4:
      std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::tuple<int,int> *>(a1, a1 + 2, a1 + 4, a2 - 2);
      return 1;
    case 5:
      std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::tuple<int,int> *>(a1, a1 + 2, a1 + 4, a1 + 6, a2 - 2);
      return 1;
    default:
      v9 = a1 + 4;
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::tuple<int,int> *>(a1, a1 + 2, a1 + 4);
      v10 = a1 + 6;
      if (a1 + 6 == a2)
        return 1;
      v11 = 0;
      v12 = 0;
      break;
  }
  do
  {
    v13 = *v9;
    if (*v10 >= *v9 && (v13 < *v10 || v10[1] >= v9[1]))
      goto LABEL_22;
    v14 = *v10;
    v15 = v10[1];
    *v10 = v13;
    v10[1] = v9[1];
    v16 = a1;
    if (v9 == a1)
      goto LABEL_21;
    v17 = v11;
    while (1)
    {
      v18 = (char *)a1 + v17;
      v19 = *(int *)((char *)a1 + v17 + 8);
      if (v19 > v14)
      {
        v20 = *((_DWORD *)v18 + 3);
        goto LABEL_17;
      }
      if (v19 < v14)
      {
        v16 = v9;
        goto LABEL_21;
      }
      v20 = *(int *)((char *)a1 + v17 + 12);
      if (v20 <= v15)
        break;
LABEL_17:
      v9 -= 2;
      *((_DWORD *)v18 + 4) = v19;
      *(int *)((char *)a1 + v17 + 20) = v20;
      v17 -= 8;
      if (v17 == -16)
      {
        v16 = a1;
        goto LABEL_21;
      }
    }
    v16 = (int *)((char *)a1 + v17 + 16);
LABEL_21:
    *v16 = v14;
    v16[1] = v15;
    if (++v12 == 8)
      return v10 + 2 == a2;
LABEL_22:
    v9 = v10;
    v11 += 8;
    v10 += 2;
  }
  while (v10 != a2);
  return 1;
}

uint64_t std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::tuple<int,int> *>(int *a1, int *a2, int *a3, int *a4)
{
  uint64_t result;
  int v9;
  int v10;
  int v11;
  int v12;
  int v13;
  int v14;
  int v15;
  int v16;
  int v17;

  result = std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::tuple<int,int> *>(a1, a2, a3);
  v9 = *a4;
  v10 = *a3;
  if (*a4 < *a3 || v10 >= v9 && a4[1] < a3[1])
  {
    *a3 = v9;
    *a4 = v10;
    v11 = a3[1];
    a3[1] = a4[1];
    a4[1] = v11;
    v12 = *a3;
    v13 = *a2;
    if (*a3 < *a2 || v13 >= v12 && a3[1] < a2[1])
    {
      *a2 = v12;
      *a3 = v13;
      v14 = a2[1];
      a2[1] = a3[1];
      a3[1] = v14;
      v15 = *a2;
      v16 = *a1;
      if (*a2 < *a1 || v16 >= v15 && a2[1] < a1[1])
      {
        *a1 = v15;
        *a2 = v16;
        v17 = a1[1];
        a1[1] = a2[1];
        a2[1] = v17;
      }
    }
  }
  return result;
}

uint64_t std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::tuple<int,int> *>(int *a1, int *a2, int *a3, int *a4, int *a5)
{
  uint64_t result;
  int v11;
  int v12;
  int v13;
  int v14;
  int v15;
  int v16;
  int v17;
  int v18;
  int v19;
  int v20;
  int v21;
  int v22;

  result = std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::tuple<int,int> *>(a1, a2, a3, a4);
  v11 = *a5;
  v12 = *a4;
  if (*a5 < *a4 || v12 >= v11 && a5[1] < a4[1])
  {
    *a4 = v11;
    *a5 = v12;
    v13 = a4[1];
    a4[1] = a5[1];
    a5[1] = v13;
    v14 = *a4;
    v15 = *a3;
    if (*a4 < *a3 || v15 >= v14 && a4[1] < a3[1])
    {
      *a3 = v14;
      *a4 = v15;
      v16 = a3[1];
      a3[1] = a4[1];
      a4[1] = v16;
      v17 = *a3;
      v18 = *a2;
      if (*a3 < *a2 || v18 >= v17 && a3[1] < a2[1])
      {
        *a2 = v17;
        *a3 = v18;
        v19 = a2[1];
        a2[1] = a3[1];
        a3[1] = v19;
        v20 = *a2;
        v21 = *a1;
        if (*a2 < *a1 || v21 >= v20 && a2[1] < a1[1])
        {
          *a1 = v20;
          *a2 = v21;
          v22 = a1[1];
          a1[1] = a2[1];
          a2[1] = v22;
        }
      }
    }
  }
  return result;
}

int *std::__partial_sort_impl[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::tuple<int,int> *,std::tuple<int,int> *>(int *a1, int *a2, int *a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  int *v12;
  int *v13;
  int *v14;
  int v15;
  int v16;
  int v17;
  uint64_t v18;
  int *v19;
  int v20;
  int v21;
  int *v22;

  if (a1 != a2)
  {
    v8 = (char *)a2 - (char *)a1;
    v9 = ((char *)a2 - (char *)a1) >> 3;
    if ((char *)a2 - (char *)a1 >= 9)
    {
      v10 = (unint64_t)(v9 - 2) >> 1;
      v11 = v10 + 1;
      v12 = &a1[2 * v10];
      do
      {
        std::__sift_down[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::tuple<int,int> *>((uint64_t)a1, a4, v9, v12);
        v12 -= 2;
        --v11;
      }
      while (v11);
    }
    v13 = a2;
    if (a2 != a3)
    {
      v14 = a2;
      do
      {
        v15 = *v14;
        v16 = *a1;
        if (*v14 < *a1 || v16 >= v15 && v14[1] < a1[1])
        {
          *v14 = v16;
          *a1 = v15;
          v17 = v14[1];
          v14[1] = a1[1];
          a1[1] = v17;
          std::__sift_down[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::tuple<int,int> *>((uint64_t)a1, a4, v9, a1);
        }
        v14 += 2;
      }
      while (v14 != a3);
      v13 = a3;
    }
    if (v8 >= 9)
    {
      v18 = (unint64_t)v8 >> 3;
      v19 = a2 - 2;
      do
      {
        v21 = *a1;
        v20 = a1[1];
        v22 = std::__floyd_sift_down[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::tuple<int,int> *>(a1, a4, v18);
        if (v19 == v22)
        {
          *v22 = v21;
          v22[1] = v20;
        }
        else
        {
          *v22 = *v19;
          v22[1] = v19[1];
          *v19 = v21;
          v19[1] = v20;
          std::__sift_up[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::tuple<int,int> *>((uint64_t)a1, (uint64_t)(v22 + 2), a4, ((char *)(v22 + 2) - (char *)a1) >> 3);
        }
        v19 -= 2;
      }
      while (v18-- > 2);
    }
    return v13;
  }
  return a3;
}

uint64_t std::__sift_down[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::tuple<int,int> *>(uint64_t result, uint64_t a2, uint64_t a3, int *a4)
{
  uint64_t v4;
  int64_t v5;
  uint64_t v6;
  uint64_t v7;
  int *v8;
  uint64_t v9;
  int v10;
  int v11;
  int v12;
  int v13;
  int *v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  int v18;

  if (a3 >= 2)
  {
    v4 = (uint64_t)a4 - result;
    v5 = (unint64_t)(a3 - 2) >> 1;
    if (v5 >= ((uint64_t)a4 - result) >> 3)
    {
      v6 = v4 >> 2;
      v7 = (v4 >> 2) + 1;
      v8 = (int *)(result + 8 * v7);
      v9 = v6 + 2;
      if (v9 < a3)
      {
        v10 = v8[2];
        if (*v8 < v10 || v10 >= *v8 && v8[1] < v8[3])
        {
          v8 += 2;
          v7 = v9;
        }
      }
      v11 = *v8;
      if (*v8 >= *a4 && (*a4 < v11 || v8[1] >= a4[1]))
      {
        v12 = *a4;
        v13 = a4[1];
        *a4 = v11;
        a4[1] = v8[1];
        if (v5 >= v7)
        {
          while (1)
          {
            v15 = 2 * v7;
            v7 = (2 * v7) | 1;
            v14 = (int *)(result + 8 * v7);
            v16 = v15 + 2;
            if (v16 < a3)
            {
              v17 = v14[2];
              if (*v14 < v17 || v17 >= *v14 && v14[1] < v14[3])
              {
                v14 += 2;
                v7 = v16;
              }
            }
            v18 = *v14;
            if (*v14 < v12 || v18 <= v12 && v14[1] < v13)
              break;
            *v8 = v18;
            v8[1] = v14[1];
            v8 = v14;
            if (v5 < v7)
              goto LABEL_22;
          }
        }
        v14 = v8;
LABEL_22:
        *v14 = v12;
        v14[1] = v13;
      }
    }
  }
  return result;
}

_DWORD *std::__floyd_sift_down[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::tuple<int,int> *>(_DWORD *result, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _DWORD *v6;
  uint64_t v7;
  uint64_t v8;
  int v9;

  v3 = 0;
  v4 = a3 - 2;
  if (a3 < 2)
    v4 = a3 - 1;
  v5 = v4 >> 1;
  do
  {
    v6 = result;
    result += 2 * v3 + 2;
    v7 = 2 * v3;
    v3 = (2 * v3) | 1;
    v8 = v7 + 2;
    if (v8 < a3)
    {
      v9 = result[2];
      if (*result < v9 || v9 >= *result && result[1] < result[3])
      {
        result += 2;
        v3 = v8;
      }
    }
    *v6 = *result;
    v6[1] = result[1];
  }
  while (v3 <= v5);
  return result;
}

uint64_t std::__sift_up[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::tuple<int,int> *>(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4)
{
  unint64_t v4;
  unint64_t v5;
  int *v6;
  int v7;
  int v8;
  int v9;
  int v10;
  int *v11;
  unint64_t v12;
  int v13;
  int v14;

  v4 = a4 - 2;
  if (a4 >= 2)
  {
    v5 = v4 >> 1;
    v6 = (int *)(result + 8 * (v4 >> 1));
    v7 = *v6;
    v8 = *(_DWORD *)(a2 - 8);
    if (*v6 < v8 || v8 >= v7 && v6[1] < *(_DWORD *)(a2 - 4))
    {
      v9 = *(_DWORD *)(a2 - 8);
      v10 = *(_DWORD *)(a2 - 4);
      *(_DWORD *)(a2 - 8) = v7;
      *(_DWORD *)(a2 - 4) = v6[1];
      if (v4 >= 2)
      {
        while (1)
        {
          v12 = v5 - 1;
          v5 = (v5 - 1) >> 1;
          v11 = (int *)(result + 8 * v5);
          v13 = *v11;
          if (*v11 >= v9)
          {
            if (v13 > v9)
              break;
            v14 = v11[1];
            if (v14 >= v10)
              break;
          }
          else
          {
            v14 = v11[1];
          }
          *v6 = v13;
          v6[1] = v14;
          v6 = (int *)(result + 8 * v5);
          if (v12 <= 1)
            goto LABEL_12;
        }
      }
      v11 = v6;
LABEL_12:
      *v11 = v9;
      v11[1] = v10;
    }
  }
  return result;
}

ma::Segment *ma::SubjectMotionSegment::SubjectMotionSegment(ma::SubjectMotionSegment *this)
{
  ma::Segment *result;

  result = ma::Segment::Segment(this);
  *(_QWORD *)result = &off_1E6B140F8;
  *((_DWORD *)result + 18) = -1;
  *(_QWORD *)((char *)result + 84) = 0;
  *(_QWORD *)((char *)result + 76) = 0;
  return result;
}

void ma::SubjectMotionSegment::Reset(ma::SubjectMotionSegment *this)
{
  ma::Segment::Reset(this);
  *((_DWORD *)this + 18) = -1;
  *(_QWORD *)((char *)this + 84) = 0;
  *(_QWORD *)((char *)this + 76) = 0;
}

float ma::SubjectMotionSegment::UpdateStats(ma::SubjectMotionSegment *this, const ma::MotionResult *a2)
{
  float v2;
  float result;

  ++*((_DWORD *)this + 5);
  v2 = *((float *)a2 + 13);
  *((float *)this + 19) = v2 + *((float *)this + 19);
  if (v2 >= 0.52)
  {
    ++*((_DWORD *)this + 22);
    result = v2 + *((float *)this + 20);
    *((float *)this + 20) = result;
  }
  else
  {
    result = v2 + *((float *)this + 21);
    *((float *)this + 21) = result;
  }
  return result;
}

uint64_t ma::SubjectMotionSegment::ResetStats(uint64_t this, const ma::MotionResult *a2)
{
  int v2;
  float v3;

  v2 = *((unsigned __int8 *)a2 + 80);
  *(_DWORD *)(this + 20) = v2;
  v3 = *((float *)a2 + 13);
  *(float *)(this + 76) = v3;
  *(_QWORD *)(this + 80) = 0;
  *(_DWORD *)(this + 88) = 0;
  if (v3 >= 0.52)
  {
    *(_DWORD *)(this + 88) = v2;
    *(float *)(this + 80) = v3;
  }
  else
  {
    *(float *)(this + 84) = v3;
  }
  return this;
}

uint64_t ma::SubjectMotionSegment::DetermineType(uint64_t this)
{
  int v1;
  int v2;
  float v3;

  v1 = *(_DWORD *)(this + 88);
  v2 = *(_DWORD *)(this + 20);
  v3 = (double)v1 / (double)v2;
  *(_DWORD *)(this + 72) = (float)((float)((float)(*(float *)(this + 80) * v3)
                                         + (float)(*(float *)(this + 84) * (float)(1.0 - v3)))
                                 / (float)((float)((float)v1 * v3) + (float)((float)(v2 - v1) * (float)(1.0 - v3)))) >= 0.52;
  return this;
}

float ma::SubjectMotionSegment::Merge(ma::SubjectMotionSegment *this, const ma::SubjectMotionSegment *a2)
{
  float result;

  ma::Segment::Merge(this, a2);
  *((_DWORD *)this + 22) += *((_DWORD *)a2 + 22);
  *(float32x2_t *)((char *)this + 76) = vadd_f32(*(float32x2_t *)((char *)a2 + 76), *(float32x2_t *)((char *)this + 76));
  result = *((float *)a2 + 21) + *((float *)this + 21);
  *((float *)this + 21) = result;
  return result;
}

uint64_t ma::SubjectMotionSegment::ToDictionary(ma::SubjectMotionSegment *this, const __CFAllocator *a2, const __CFDictionary **a3)
{
  uint64_t result;
  __CFDictionary *v6;
  CFNumberRef v7;
  int valuePtr;
  CFNumberRef v9;

  result = ma::Segment::ToDictionary(this, a2, a3);
  if (!(_DWORD)result)
  {
    v6 = *a3;
    if (*a3)
    {
      valuePtr = *((_DWORD *)this + 18);
      v7 = CFNumberCreate(0, kCFNumberSInt32Type, &valuePtr);
      v9 = v7;
      if (v7)
      {
        CFDictionarySetValue(v6, CFSTR("Action"), v7);
        CF<opaqueCMSampleBuffer *>::~CF((const void **)&v9);
        result = 0;
LABEL_7:
        *a3 = v6;
        return result;
      }
      CF<opaqueCMSampleBuffer *>::~CF((const void **)&v9);
      CFRelease(v6);
      v6 = 0;
    }
    result = 4294967188;
    goto LABEL_7;
  }
  return result;
}

void sub_1B6D81394(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  CF<opaqueCMSampleBuffer *>::~CF((const void **)va);
  _Unwind_Resume(a1);
}

uint64_t ma::SubjectMotionSegment::FromDictionary(ma::SubjectMotionSegment *this, const __CFDictionary *a2)
{
  const __CFNumber *Value;
  int v5;
  uint64_t result;
  int valuePtr;

  if (!a2)
    return 4294967246;
  ma::Segment::FromDictionary(this, a2);
  valuePtr = 0;
  Value = (const __CFNumber *)CFDictionaryGetValue(a2, CFSTR("Action"));
  if (Value)
  {
    CFNumberGetValue(Value, kCFNumberSInt32Type, &valuePtr);
    v5 = valuePtr;
  }
  else
  {
    v5 = 0;
  }
  result = 0;
  *((_DWORD *)this + 18) = v5;
  return result;
}

void ma::SubjectMotionSegment::~SubjectMotionSegment(ma::SubjectMotionSegment *this)
{
  JUMPOUT(0x1BCCA12BCLL);
}

void sub_1B6D81700(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,char a21,uint64_t a22,uint64_t a23,uint64_t a24,char a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,id a30)
{
  void *v30;
  void *v31;
  void *v32;
  void *v33;
  void *v34;
  void *v35;
  void *v36;

  v36 = v34;

  _Block_object_dispose(&a21, 8);
  _Block_object_dispose(&a25, 8);

  _Unwind_Resume(a1);
}

uint64_t __Block_byref_object_copy__17(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void __Block_byref_object_dispose__17(uint64_t a1)
{

}

void sub_1B6D81864(_Unwind_Exception *exception_object)
{
  _Unwind_Resume(exception_object);
}

void sub_1B6D8196C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1B6D819EC(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1B6D81A78(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_1B6D81D70(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, id location, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,char a24)
{
  void *v24;
  void *v25;
  void *v26;

  _Block_object_dispose(&a24, 8);

  _Unwind_Resume(a1);
}

void sub_1B6D81E90(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1B6D81F48(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1B6D820DC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  void *v14;
  void *v15;

  _Unwind_Resume(a1);
}

void sub_1B6D8249C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_1B6D82590(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1B6D828C8(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_1B6D829BC(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1B6D82C1C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;

  v6 = v4;

  _Unwind_Resume(a1);
}

void sub_1B6D82E88(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;

  v7 = v5;

  _Unwind_Resume(a1);
}

Class ___ZL24getHMIVideoAnalyzerClassv_block_invoke(uint64_t a1)
{
  Class result;
  void *v3;

  if (!HomeAILibraryCore(char **)::frameworkLibrary)
  {
    HomeAILibraryCore(char **)::frameworkLibrary = _sl_dlopen();
    if (!HomeAILibraryCore(char **)::frameworkLibrary)
    {
      abort_report_np();
      goto LABEL_6;
    }
  }
  while (1)
  {
    result = objc_getClass("HMIVideoAnalyzer");
    *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = result;
    if (*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24))
      break;
LABEL_6:
    v3 = (void *)___ZL24getHMIVideoAnalyzerClassv_block_invoke_cold_1();
    free(v3);
  }
  getHMIVideoAnalyzerClass(void)::softClass = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24);
  return result;
}

ma::CameraMotionAnalysis *ma::CameraMotionAnalysis::CameraMotionAnalysis(ma::CameraMotionAnalysis *this)
{
  uint64_t v2;
  uint64_t v3;

  v2 = 0;
  *(_QWORD *)this = 0;
  *((_QWORD *)this + 1) = 0;
  *((_QWORD *)this + 2) = 0;
  v3 = MEMORY[0x1E0CA2E68];
  *(_OWORD *)((char *)this + 24) = *MEMORY[0x1E0CA2E68];
  *((_QWORD *)this + 5) = *(_QWORD *)(v3 + 16);
  *((_BYTE *)this + 48) = 1;
  *((_DWORD *)this + 13) = 0;
  do
  {
    ma::HinkleyDetector::HinkleyDetector((uint64_t)this + v2 + 56);
    v2 += 28;
  }
  while (v2 != 168);
  *((_DWORD *)this + 56) = 0;
  ma::RotationAnalysis::RotationAnalysis((ma::CameraMotionAnalysis *)((char *)this + 232));
  *((_WORD *)this + 160) = 1;
  return this;
}

void sub_1B6D8307C(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t i;

  for (i = 196; i != 28; i -= 28)
    ma::MotionFilter::~MotionFilter((ma::MotionFilter *)(v1 + i));
  MotionAnalysis<ma::ObstructionSegment>::~MotionAnalysis(v1);
  _Unwind_Resume(a1);
}

void ma::CameraMotionAnalysis::~CameraMotionAnalysis(ma::CameraMotionAnalysis *this)
{
  char *v2;
  uint64_t i;

  v2 = (char *)this + 232;
  ma::MotionFilter::~MotionFilter((ma::CameraMotionAnalysis *)((char *)this + 288));
  MotionAnalysis<ma::ObstructionSegment>::~MotionAnalysis((uint64_t)v2);
  for (i = 196; i != 28; i -= 28)
    ma::MotionFilter::~MotionFilter((ma::CameraMotionAnalysis *)((char *)this + i));
  MotionAnalysis<ma::ObstructionSegment>::~MotionAnalysis((uint64_t)this);
}

uint64_t ma::CameraMotionAnalysis::Initialize(ma::CameraMotionAnalysis *this, int a2, char a3)
{
  uint64_t v6;
  int *v7;
  float v8;
  uint64_t result;

  v6 = 56;
  v7 = &ma::CameraMotionAnalysis::Initialize(int,BOOL)::kDeltaM;
  do
  {
    v8 = *(float *)v7++;
    ma::HinkleyDetector::Initialize((uint64_t)this + v6, v8, 0.5, 15);
    v6 += 28;
  }
  while (v6 != 224);
  *((_DWORD *)this + 56) = a2;
  *((_BYTE *)this + 321) = a3;
  result = MotionAnalysis<ma::CameraMotionSegment>::Initialize((uint64_t)this);
  if (!(_DWORD)result)
  {
    if (!*((_BYTE *)this + 320))
      return 0;
    result = ma::RotationAnalysis::Initialize((ma::CameraMotionAnalysis *)((char *)this + 232), *((_DWORD *)this + 56));
    if (!(_DWORD)result)
      return 0;
  }
  return result;
}

uint64_t MotionAnalysis<ma::CameraMotionSegment>::Initialize(uint64_t a1)
{
  ma::CameraMotionSegment *v3;
  ma::CameraMotionSegment *v4;

  if (*(_QWORD *)(a1 + 16) || *(_QWORD *)(a1 + 8))
    return 4294967246;
  *(_QWORD *)(a1 + 16) = CFArrayCreateMutable(0, 0, MEMORY[0x1E0C9B378]);
  v3 = (ma::CameraMotionSegment *)operator new(0xC8uLL, MEMORY[0x1E0DE4E10]);
  if (v3)
  {
    v4 = v3;
    ma::CameraMotionSegment::CameraMotionSegment(v3);
    *(_QWORD *)(a1 + 8) = v4;
    if (*(_QWORD *)(a1 + 16))
      return 0;
    else
      return 4294967188;
  }
  else
  {
    *(_QWORD *)(a1 + 8) = 0;
    return 4294967188;
  }
}

void sub_1B6D83234(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1BCCA12A4](v1, MEMORY[0x1E0DE4E10]);
  _Unwind_Resume(a1);
}

uint64_t ma::CameraMotionAnalysis::ProcessFrame(ma::CameraMotionAnalysis *this, Frame *a2)
{
  uint64_t result;
  ma::Segment *v5;
  uint64_t v6;
  int v7;
  float v8;
  ma::Segment *v10;
  int v11;
  ma::Segment *v13;
  int frame_idx;
  CMTime v15;
  CMTime v16;
  CMTime v17;

  if (!*((_BYTE *)this + 320)
    || (result = ma::RotationAnalysis::ProcessFrame((ma::CameraMotionAnalysis *)((char *)this + 232), a2),
        !(_DWORD)result))
  {
    if (a2->frame_idx_ < 3 || *((_BYTE *)this + 48))
    {
      ma::CameraMotionSegment::ResetStats(*((_QWORD *)this + 1), (const ma::MotionResult *)&a2->acc_var_.z_, a2->org_motion_.z_);
      v5 = (ma::Segment *)*((_QWORD *)this + 1);
      v17 = *(CMTime *)((_BYTE *)this + 1);
      ma::Segment::SetStart(v5, 0, &v17);
      result = 0;
      *((_BYTE *)this + 48) = 0;
      return result;
    }
    v6 = *((_QWORD *)this + 1);
    v7 = *(unsigned __int8 *)(v6 + 72);
    v8 = *(float *)&a2->motion_result_.duration_.epoch;
    if (*(_BYTE *)(v6 + 72))
    {
      if (v8 < 1.0 && a2->frame_idx_ - *(_DWORD *)(v6 + 12) > 3)
      {
LABEL_21:
        result = ma::CameraMotionAnalysis::AddSegment((const __CFArray **)this, (const ma::Frame *)a2, v7 != 0, 0);
        if (!(_DWORD)result)
        {
          ma::CameraMotionSegment::ResetStats(*((_QWORD *)this + 1), (const ma::MotionResult *)&a2->acc_var_.z_, a2->org_motion_.z_);
          v13 = (ma::Segment *)*((_QWORD *)this + 1);
          frame_idx = a2->frame_idx_;
          v16 = *(CMTime *)(&a2->frame_idx_ + 1);
          ma::Segment::SetStart(v13, frame_idx, &v16);
          result = 0;
          *(_BYTE *)(*((_QWORD *)this + 1) + 72) = v7 == 0;
        }
        return result;
      }
    }
    else if (v8 > 6.8 && *(float *)&a2->motion_result_.duration_.flags > 3.5)
    {
      goto LABEL_21;
    }
    if (LOBYTE(a2->motion_result_.action_blocks_))
    {
      if (ma::CameraMotionAnalysis::DecideSegmentPoint(this, (const ma::CameraMotionSegment *)v6, a2))
      {
        result = ma::CameraMotionAnalysis::AddSegment((const __CFArray **)this, (const ma::Frame *)a2, 0, 0);
        if ((_DWORD)result)
          return result;
        ma::CameraMotionSegment::ResetStats(*((_QWORD *)this + 1), (const ma::MotionResult *)&a2->acc_var_.z_, a2->org_motion_.z_);
        v10 = (ma::Segment *)*((_QWORD *)this + 1);
        v11 = a2->frame_idx_;
        v15 = *(CMTime *)(&a2->frame_idx_ + 1);
        ma::Segment::SetStart(v10, v11, &v15);
      }
      else
      {
        ma::CameraMotionSegment::UpdateStats(*((ma::CameraMotionSegment **)this + 1), (const ma::MotionResult *)&a2->acc_var_.z_, a2->org_motion_.z_);
      }
    }
    return 0;
  }
  return result;
}

uint64_t ma::CameraMotionAnalysis::AddSegment(const __CFArray **this, const ma::Frame *a2, int a3, int a4)
{
  const __CFArray *v8;
  ma::Segment *v9;
  int Count;
  _OWORD *v12;
  int v13;
  const __CFArray *v14;
  CMTime v16;
  CMTime lhs;
  CMTime v18;

  v8 = *this;
  v9 = this[1];
  if (v8)
    Count = CFArrayGetCount(v8);
  else
    Count = 0;
  v12 = (_OWORD *)((char *)a2 + 4);
  v13 = *(_DWORD *)a2 + a4;
  if (a4)
  {
    *(_OWORD *)&lhs.value = *v12;
    lhs.epoch = *(_QWORD *)((char *)a2 + 20);
    v16 = *(CMTime *)((char *)a2 + 28);
    CMTimeAdd(&v18, &lhs, &v16);
  }
  else
  {
    *(_OWORD *)&v18.value = *v12;
    v18.epoch = *(_QWORD *)((char *)a2 + 20);
  }
  ma::Segment::Finalize(v9, Count, v13, &v18);
  v14 = this[1];
  *((_BYTE *)v14 + 72) = a3;
  if (a3)
    *((_DWORD *)v14 + 47) = 9;
  else
    ma::CameraMotionSegment::DetermineType(v14);
  return MotionAnalysis<ma::CameraMotionSegment>::AddSegment((uint64_t)this);
}

uint64_t ma::CameraMotionAnalysis::DecideSegmentPoint(ma::CameraMotionAnalysis *this, const ma::CameraMotionSegment *a2, const Frame *a3)
{
  int v4;
  uint64_t v6;
  int v7;
  int v8;
  float *p_z;
  ma::HinkleyDetector *v10;
  char *v11;
  uint64_t v12;
  uint64_t i;

  v4 = *((_DWORD *)a2 + 5);
  if (v4)
  {
    v6 = 0;
    v7 = v4 + 1;
    v8 = a3->frame_idx_ - *((_DWORD *)a2 + 3);
    p_z = &a3->acc_var_.z_;
    v10 = (ma::CameraMotionAnalysis *)((char *)this + 56);
    v11 = (char *)a2 + 76;
    do
    {
      if (*((_DWORD *)v10 + 2) >= v8)
        break;
      if (ma::HinkleyDetector::Test(v10, (const float *)&v11[v6 * 4], &p_z[v6], v7))
      {
        v12 = 1;
        goto LABEL_10;
      }
      ++v6;
      v10 = (ma::HinkleyDetector *)((char *)v10 + 28);
    }
    while (v6 != 6);
    v12 = 0;
    if (*((_DWORD *)a2 + 5))
      return v12;
  }
  else
  {
    v12 = 0;
  }
LABEL_10:
  for (i = 56; i != 224; i += 28)
    ma::HinkleyDetector::ResetStats((ma::CameraMotionAnalysis *)((char *)this + i));
  return v12;
}

uint64_t ma::CameraMotionAnalysis::FinalizeSegments(const __CFArray **this, const ma::Frame *a2)
{
  int v4;
  ma::RotationSegment **v5;
  uint64_t result;
  CMTime v7;

  v4 = *((unsigned __int8 *)this + 320);
  v5 = this + 29;
  if (v4)
  {
    result = ma::RotationAnalysis::FinalizeSegments(v5, a2);
    if ((_DWORD)result)
      return result;
  }
  else
  {
    result = ma::RotationAnalysis::StoreSegmentResult(v5);
    if ((_DWORD)result)
      return result;
  }
  result = ma::CameraMotionAnalysis::AddSegment(this, a2, 0, 1);
  if (!(_DWORD)result)
  {
    result = ma::CameraMotionAnalysis::MergeBadQualitySegments(this);
    if (!(_DWORD)result)
    {
      result = ma::CameraMotionAnalysis::MergeSameTypeSegments(this);
      if (!(_DWORD)result)
      {
        ma::CameraMotionAnalysis::AdjustStableSegments(this);
        result = ma::CameraMotionAnalysis::MergeSparseShortSegments(this);
        if (!(_DWORD)result)
        {
          v7 = *(CMTime *)((char *)a2 + 4);
          result = ma::CameraMotionAnalysis::MergeConsecutiveShortSegments((ma::CameraMotionAnalysis *)this, &v7);
          if (!(_DWORD)result)
          {
            result = ma::CameraMotionAnalysis::MergeSameTypeSegments(this);
            if (!(_DWORD)result)
            {
              result = ma::CameraMotionAnalysis::StablizationSegments(this);
              if (!(_DWORD)result)
              {
                ma::CameraMotionAnalysis::AdjustStableSegments(this);
                result = ma::CameraMotionAnalysis::MergeLensSwitchSegments(this);
                if (!(_DWORD)result)
                  return ma::CameraMotionAnalysis::StoreSegmentResult((ma::CameraMotionAnalysis *)this);
              }
            }
          }
        }
      }
    }
  }
  return result;
}

uint64_t ma::CameraMotionAnalysis::MergeBadQualitySegments(CFArrayRef *this)
{
  CFIndex v2;
  CFIndex v3;
  const __CFArray *v4;
  float v5;
  float v6;
  uint64_t v7;
  uint64_t *ValueAtIndex;
  ma::CameraMotionSegment *v9;
  const ma::CameraMotionSegment **v10;
  uint64_t result;
  CFIndex i;
  const __CFArray *v13;
  float v14;
  ma::CameraMotionSegment **v15;

  LODWORD(v2) = 0;
LABEL_2:
  v3 = v2;
  v2 = (v2 + 1);
  while (1)
  {
    v4 = *this;
    if (*this)
      LODWORD(v4) = CFArrayGetCount(v4);
    if ((int)v3 >= (int)v4 - 1)
      break;
    if (*(_BYTE *)(*(_QWORD *)CFArrayGetValueAtIndex(*this, v3) + 72))
      goto LABEL_2;
    if (*(_BYTE *)(*(_QWORD *)CFArrayGetValueAtIndex(*this, v2) + 72))
      goto LABEL_2;
    v5 = *(float *)(*(_QWORD *)CFArrayGetValueAtIndex(*this, v3) + 196);
    if ((float)(v5 / (float)*(int *)(*(_QWORD *)CFArrayGetValueAtIndex(*this, v3) + 20)) >= 0.25)
      goto LABEL_2;
    v6 = *(float *)(*(_QWORD *)CFArrayGetValueAtIndex(*this, v2) + 196);
    if ((float)(v6 / (float)*(int *)(*(_QWORD *)CFArrayGetValueAtIndex(*this, v2) + 20)) >= 0.25)
      goto LABEL_2;
    v7 = *(_QWORD *)CFArrayGetValueAtIndex(*this, v3);
    ValueAtIndex = (uint64_t *)CFArrayGetValueAtIndex(*this, v2);
    ma::CameraMotionSegment::CombineConfidenceValues(v7, *ValueAtIndex);
    v9 = *(ma::CameraMotionSegment **)CFArrayGetValueAtIndex(*this, v3);
    v10 = (const ma::CameraMotionSegment **)CFArrayGetValueAtIndex(*this, v2);
    ma::CameraMotionSegment::Merge(v9, *v10);
    result = MotionAnalysis<ma::SubtleMotionSegment>::RemoveSegment(this, v2);
    if ((_DWORD)result)
      return result;
  }
  for (i = 0; ; ++i)
  {
    v13 = *this;
    if (*this)
      LODWORD(v13) = CFArrayGetCount(v13);
    if (i >= (int)v13)
      break;
    if (!*(_BYTE *)(*(_QWORD *)CFArrayGetValueAtIndex(*this, i) + 72))
    {
      v14 = *(float *)(*(_QWORD *)CFArrayGetValueAtIndex(*this, i) + 196);
      if ((float)(v14 / (float)*(int *)(*(_QWORD *)CFArrayGetValueAtIndex(*this, i) + 20)) < 0.25)
      {
        v15 = (ma::CameraMotionSegment **)CFArrayGetValueAtIndex(*this, i);
        if (!ma::CameraMotionSegment::IsVeryShort(*v15))
          *(_BYTE *)(*(_QWORD *)CFArrayGetValueAtIndex(*this, i) + 72) = 1;
      }
    }
  }
  return 0;
}

uint64_t ma::CameraMotionAnalysis::MergeSameTypeSegments(CFArrayRef *this)
{
  CFIndex v2;
  CFIndex v3;
  const __CFArray *v4;
  ma::CameraMotionSegment *v5;
  ma::CameraMotionSegment **ValueAtIndex;
  uint64_t v7;
  uint64_t *v8;
  ma::CameraMotionSegment *v9;
  const ma::CameraMotionSegment **v10;
  uint64_t result;

  LODWORD(v2) = 0;
LABEL_2:
  v3 = v2;
  v2 = (v2 + 1);
  while (1)
  {
    v4 = *this;
    if (*this)
      LODWORD(v4) = CFArrayGetCount(v4);
    if ((int)v3 >= (int)v4 - 1)
      return 0;
    if (*(_BYTE *)(*(_QWORD *)CFArrayGetValueAtIndex(*this, v3) + 72))
      goto LABEL_2;
    if (*(_BYTE *)(*(_QWORD *)CFArrayGetValueAtIndex(*this, v2) + 72))
      goto LABEL_2;
    v5 = *(ma::CameraMotionSegment **)CFArrayGetValueAtIndex(*this, v3);
    ValueAtIndex = (ma::CameraMotionSegment **)CFArrayGetValueAtIndex(*this, v2);
    if (!ma::CameraMotionSegment::IsSimiliarMotionType(v5, *ValueAtIndex))
      goto LABEL_2;
    v7 = *(_QWORD *)CFArrayGetValueAtIndex(*this, v3);
    v8 = (uint64_t *)CFArrayGetValueAtIndex(*this, v2);
    ma::CameraMotionSegment::CombineConfidenceValues(v7, *v8);
    v9 = *(ma::CameraMotionSegment **)CFArrayGetValueAtIndex(*this, v3);
    v10 = (const ma::CameraMotionSegment **)CFArrayGetValueAtIndex(*this, v2);
    ma::CameraMotionSegment::Merge(v9, *v10);
    result = MotionAnalysis<ma::SubtleMotionSegment>::RemoveSegment(this, v2);
    if ((_DWORD)result)
      return result;
  }
}

uint64_t ma::CameraMotionAnalysis::AdjustStableSegments(CFArrayRef *this)
{
  CFIndex i;
  const __CFArray *v3;
  uint64_t v4;
  const void *ValueAtIndex;
  uint64_t v6;
  const void *v7;
  float v8;
  float v9;
  int v10;
  float v11;

  for (i = 0; ; ++i)
  {
    v3 = *this;
    if (*this)
      LODWORD(v3) = CFArrayGetCount(v3);
    if (i >= (int)v3)
      break;
    if (!*(_DWORD *)(*(_QWORD *)CFArrayGetValueAtIndex(*this, i) + 188))
    {
      v4 = *(_QWORD *)CFArrayGetValueAtIndex(*this, i);
      ValueAtIndex = CFArrayGetValueAtIndex(*this, i);
      if (fabsf(*(float *)(v4
                          + 4
                          * (fabsf(*(float *)(*(_QWORD *)ValueAtIndex + 180)) < fabsf(*(float *)(*(_QWORD *)ValueAtIndex
                                                                                                 + 184)))
                          + 172)) > 5000.0)
      {
        v6 = *(_QWORD *)CFArrayGetValueAtIndex(*this, i);
        v7 = CFArrayGetValueAtIndex(*this, i);
        if (fabsf(*(float *)(v6
                            + 4
                            * (fabsf(*(float *)(*(_QWORD *)v7 + 180)) < fabsf(*(float *)(*(_QWORD *)v7 + 184)))
                            + 180)) < 100.0)
        {
          v8 = *(float *)(*(_QWORD *)CFArrayGetValueAtIndex(*this, i) + 180);
          v9 = *(float *)(*(_QWORD *)CFArrayGetValueAtIndex(*this, i) + 184);
          if (v8 == 0.0)
          {
LABEL_9:
            if (v9 <= 0.0)
              v10 = 3;
            else
              v10 = 4;
          }
          else
          {
            v11 = fabsf(v9 / v8);
            if (v11 >= 0.26)
            {
              if (v11 > 3.73)
                goto LABEL_9;
              v10 = 5;
            }
            else if (v8 <= 0.0)
            {
              v10 = 1;
            }
            else
            {
              v10 = 2;
            }
          }
          *(_DWORD *)(*(_QWORD *)CFArrayGetValueAtIndex(*this, i) + 188) = v10;
          continue;
        }
      }
    }
  }
  return 0;
}

uint64_t ma::CameraMotionAnalysis::MergeSparseShortSegments(CFArrayRef *this)
{
  signed int v2;
  unsigned int v3;
  unsigned int v4;
  CFIndex v5;
  const __CFArray *v6;
  uint64_t v7;
  uint64_t v8;
  BOOL v9;
  const __CFArray *v10;
  CFArrayRef *v11;
  unsigned int v12;
  ma::CameraMotionSegment **ValueAtIndex;
  ma::CameraMotionSegment *v14;
  const __CFArray *v15;
  int v16;
  int v17;
  int v18;
  float v19;
  float v20;
  _BOOL4 v21;
  float v22;
  float v23;
  uint64_t result;
  float v25;

  v2 = 0;
  v3 = 2;
  v4 = 1;
LABEL_2:
  v5 = v2;
  while (1)
  {
    v6 = *this;
    if (*this)
      LODWORD(v6) = CFArrayGetCount(v6);
    if ((int)v4 >= (int)v6)
      return 0;
    v7 = *(_QWORD *)CFArrayGetValueAtIndex(*this, v5);
    v8 = *(_QWORD *)CFArrayGetValueAtIndex(*this, v4);
    v9 = !ma::CameraMotionSegment::IsShort((ma::CameraMotionSegment *)v7, *((unsigned __int8 *)this + 321))
      || (_DWORD)v5 == 0;
    if (!v9 || !ma::CameraMotionSegment::IsShort((ma::CameraMotionSegment *)v8, *((unsigned __int8 *)this + 321)))
      goto LABEL_48;
    v10 = *this;
    if (*this)
      LODWORD(v10) = CFArrayGetCount(v10);
    if (v4 == (_DWORD)v10 - 1)
    {
      if (*(_BYTE *)(v7 + 72))
        goto LABEL_48;
      goto LABEL_16;
    }
    ValueAtIndex = (ma::CameraMotionSegment **)CFArrayGetValueAtIndex(*this, v3);
    v14 = *ValueAtIndex;
    if (ma::CameraMotionSegment::IsShort(*ValueAtIndex, *((unsigned __int8 *)this + 321)))
    {
      v15 = *this;
      if (*this)
        LODWORD(v15) = CFArrayGetCount(v15);
      if (v3 != (_DWORD)v15 - 1)
      {
LABEL_48:
        v2 = v4;
        v4 = v3++;
        goto LABEL_2;
      }
    }
    v16 = *(_DWORD *)(v7 + 188);
    v17 = *((_DWORD *)v14 + 47);
    if (v16 != v17 || *(_BYTE *)(v7 + 72) || *((_BYTE *)v14 + 72))
    {
      v18 = *(_DWORD *)(v8 + 188);
      if (v16 == v18 && !*(_BYTE *)(v7 + 72))
      {
        ma::CameraMotionSegment::Merge((ma::CameraMotionSegment *)v7, (const ma::CameraMotionSegment *)v8);
        v23 = *(float *)(v7 + 192);
        if (v23 < *(float *)(v8 + 192))
          v23 = *(float *)(v8 + 192);
        *(float *)(v7 + 192) = v23;
      }
      else
      {
        if (v18 == v17 && !*((_BYTE *)v14 + 72))
        {
          ma::CameraMotionSegment::Merge((ma::CameraMotionSegment *)v8, v14);
          v22 = *(float *)(v8 + 192);
          if (v22 < *((float *)v14 + 48))
            v22 = *((float *)v14 + 48);
LABEL_41:
          *(float *)(v8 + 192) = v22;
          v11 = this;
          v12 = v3;
          goto LABEL_42;
        }
        if (v18 <= 5)
        {
          v19 = fabsf(*(float *)(v7 + 180));
          v20 = fabsf(*(float *)(v7 + 184));
          v21 = fabsf(*((float *)v14 + 45)) < fabsf(*((float *)v14 + 46));
          if ((((v19 < v20) ^ v21) & 1) == 0
            && (float)(*(float *)(v7 + 4 * (v19 < v20) + 180) * *((float *)v14 + v21 + 45)) < 0.0)
          {
            goto LABEL_48;
          }
        }
        if (v16 < v17 || *(_BYTE *)(v7 + 72))
        {
          if (*((_BYTE *)v14 + 72))
            goto LABEL_48;
          ma::CameraMotionSegment::Merge((ma::CameraMotionSegment *)v8, v14);
          *(_DWORD *)(v8 + 188) = *((_DWORD *)v14 + 47);
          v22 = *((float *)v14 + 48);
          goto LABEL_41;
        }
LABEL_16:
        ma::CameraMotionSegment::Merge((ma::CameraMotionSegment *)v7, (const ma::CameraMotionSegment *)v8);
      }
      v11 = this;
      v12 = v4;
      goto LABEL_42;
    }
    ma::CameraMotionSegment::Merge((ma::CameraMotionSegment *)v7, (const ma::CameraMotionSegment *)v8);
    ma::CameraMotionSegment::Merge((ma::CameraMotionSegment *)v7, v14);
    v25 = *(float *)(v7 + 192);
    if (v25 < *((float *)v14 + 48))
      v25 = *((float *)v14 + 48);
    *(float *)(v7 + 192) = v25;
    result = MotionAnalysis<ma::SubtleMotionSegment>::RemoveSegment(this, v4);
    if ((_DWORD)result)
      return result;
    v11 = this;
    v12 = v3 - 1;
LABEL_42:
    result = MotionAnalysis<ma::SubtleMotionSegment>::RemoveSegment(v11, v12);
    if ((_DWORD)result)
      return result;
  }
}

uint64_t ma::CameraMotionAnalysis::MergeConsecutiveShortSegments(ma::CameraMotionAnalysis *this, CMTime *a2)
{
  float v4;
  unsigned int NextLongSegment;
  unsigned int v6;
  int v7;
  int v8;
  int v9;
  const void *ValueAtIndex;
  int SameTypeSegmentInRange;
  int v12;
  const void *v13;
  uint64_t result;
  int v15;
  const void *v16;
  int v17;
  int v18;
  const void *v19;
  unsigned int v20;
  CFIndex v21;
  CFIndex v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t *v25;
  uint64_t v26;
  int v27;
  int v28;
  int v29;
  float v30;
  float v31;
  CFArrayRef *v32;
  unsigned int v33;
  float v34;
  int v35;
  unsigned int v36;
  unsigned int v37;
  const void *v38;
  int *v39;
  CFArrayRef *v40;
  int v41;
  int v42;
  CFIndex Count;
  int PrevLongSegment;
  const __CFArray *v45;
  uint64_t *v46;
  uint64_t v47;
  __int128 v48;
  int v49;
  const __CFArray *v50;
  int v51;
  int *p_range;
  CFArrayRef *v53;
  int v54;
  const void *v55;
  const __CFArray *v56;
  int v57;
  int v58;
  CMTime rhs;
  CMTime lhs;
  CMTime v61;
  CMTime time;
  int v63;
  int v64;
  int v65;
  int v66;
  CMTimeRange range;

  if (*((_BYTE *)this + 321))
    v4 = 0.5;
  else
    v4 = 1.5;
  v63 = 0;
  NextLongSegment = ma::CameraMotionAnalysis::GetNextLongSegment((CFArrayRef *)this, 0xFFFFFFFF);
  if ((NextLongSegment & 0x80000000) != 0)
    return 0;
  v6 = NextLongSegment;
  v7 = ma::CameraMotionAnalysis::GetNextLongSegment((CFArrayRef *)this, NextLongSegment);
  if ((v7 & 0x80000000) == 0)
  {
    v8 = v7;
    while (v6 != v8)
    {
      if (v8 > v6 + 1)
      {
        v9 = v8 - 1;
        ValueAtIndex = CFArrayGetValueAtIndex(*(CFArrayRef *)this, v6);
        SameTypeSegmentInRange = ma::CameraMotionAnalysis::GetSameTypeSegmentInRange((CFArrayRef *)this, v6 + 1, v8 - 1, *(_DWORD *)(*(_QWORD *)ValueAtIndex + 188));
        v64 = SameTypeSegmentInRange;
        if (SameTypeSegmentInRange < 1)
        {
          v64 = v6;
          v15 = v6;
        }
        else
        {
          v12 = SameTypeSegmentInRange;
          v13 = CFArrayGetValueAtIndex(*(CFArrayRef *)this, v6);
          result = ma::CameraMotionAnalysis::MergeSegmentsInRange((CFArrayRef *)this, v6, v12, *(_DWORD *)(*(_QWORD *)v13 + 188), &v64);
          if ((_DWORD)result)
            return result;
          v15 = v64;
          v8 = ma::CameraMotionAnalysis::GetNextLongSegment((CFArrayRef *)this, v64);
          v65 = v8;
          v9 = v8 - 1;
        }
        v16 = CFArrayGetValueAtIndex(*(CFArrayRef *)this, v8);
        v17 = ma::CameraMotionAnalysis::GetSameTypeSegmentInRange((CFArrayRef *)this, v15, v9, *(_DWORD *)(*(_QWORD *)v16 + 188));
        if (v17 >= 1)
        {
          v18 = v17;
          v19 = CFArrayGetValueAtIndex(*(CFArrayRef *)this, v8);
          result = ma::CameraMotionAnalysis::MergeSegmentsInRange((CFArrayRef *)this, v18, v8, *(_DWORD *)(*(_QWORD *)v19 + 188), &v65);
          v8 = v18;
          if ((_DWORD)result)
            return result;
        }
        if (v8 > v15 + 1)
        {
          result = ma::CameraMotionAnalysis::MergeSegmentsInRange((CFArrayRef *)this, v15 + 1, v8 - 1, 9, &v63);
          if ((_DWORD)result)
            return result;
          v20 = v63;
          v21 = v63;
          v22 = v63 + 1;
          v23 = *(_QWORD *)CFArrayGetValueAtIndex(*(CFArrayRef *)this, v63 - 1);
          v24 = *(_QWORD *)CFArrayGetValueAtIndex(*(CFArrayRef *)this, v21);
          v25 = (uint64_t *)CFArrayGetValueAtIndex(*(CFArrayRef *)this, v22);
          v26 = *v25;
          v27 = *(_DWORD *)(v23 + 188);
          v28 = *(_DWORD *)(*v25 + 188);
          if (v27 == v28 && !*(_BYTE *)(v23 + 72) && !*(_BYTE *)(v26 + 72))
          {
            ma::CameraMotionSegment::Merge((ma::CameraMotionSegment *)v23, (const ma::CameraMotionSegment *)v24);
            ma::CameraMotionSegment::Merge((ma::CameraMotionSegment *)v23, (const ma::CameraMotionSegment *)v26);
            v34 = *(float *)(v23 + 192);
            if (v34 < *(float *)(v26 + 192))
              v34 = *(float *)(v26 + 192);
            *(float *)(v23 + 192) = v34;
            result = MotionAnalysis<ma::SubtleMotionSegment>::RemoveSegment((CFArrayRef *)this, v20);
            if ((_DWORD)result)
              return result;
LABEL_38:
            v32 = (CFArrayRef *)this;
            v33 = v20;
LABEL_39:
            result = MotionAnalysis<ma::SubtleMotionSegment>::RemoveSegment(v32, v33);
            if ((_DWORD)result)
              return result;
            goto LABEL_40;
          }
          v29 = *(_DWORD *)(v24 + 188);
          if (v27 == v29 && !*(_BYTE *)(v23 + 72))
          {
            ma::CameraMotionSegment::Merge((ma::CameraMotionSegment *)v23, (const ma::CameraMotionSegment *)v24);
            v31 = *(float *)(v24 + 192);
            if (v31 < *(float *)(v23 + 192))
              v31 = *(float *)(v23 + 192);
            *(float *)(v23 + 192) = v31;
            goto LABEL_38;
          }
          if (v29 == v28 && !*(_BYTE *)(v26 + 72))
          {
            ma::CameraMotionSegment::Merge((ma::CameraMotionSegment *)v24, (const ma::CameraMotionSegment *)v26);
            v30 = *(float *)(v24 + 192);
            if (v30 < *(float *)(v26 + 192))
              v30 = *(float *)(v26 + 192);
LABEL_33:
            *(float *)(v24 + 192) = v30;
            v32 = (CFArrayRef *)this;
            v33 = v22;
            goto LABEL_39;
          }
          if (v27 >= v28 && !*(_BYTE *)(v23 + 72))
          {
            ma::CameraMotionSegment::Merge((ma::CameraMotionSegment *)v23, (const ma::CameraMotionSegment *)v24);
            goto LABEL_38;
          }
          if (!*(_BYTE *)(v26 + 72))
          {
            ma::CameraMotionSegment::Merge((ma::CameraMotionSegment *)v24, (const ma::CameraMotionSegment *)v26);
            *(_DWORD *)(v24 + 188) = *(_DWORD *)(v26 + 188);
            v30 = *(float *)(v26 + 192);
            goto LABEL_33;
          }
        }
      }
LABEL_40:
      v6 = ma::CameraMotionAnalysis::GetNextLongSegment((CFArrayRef *)this, v6);
      v35 = ma::CameraMotionAnalysis::GetNextLongSegment((CFArrayRef *)this, v6);
      v65 = v35;
      if ((v6 & 0x80000000) == 0)
      {
        v8 = v35;
        if ((v35 & 0x80000000) == 0)
          continue;
      }
      break;
    }
  }
  v36 = ma::CameraMotionAnalysis::GetNextLongSegment((CFArrayRef *)this, 0xFFFFFFFF);
  if ((v36 & 0x80000000) != 0)
    return 0;
  v37 = v36;
  if (v36)
  {
    time = *(CMTime *)(*(_QWORD *)CFArrayGetValueAtIndex(*(CFArrayRef *)this, v36) + 24);
    if (CMTimeGetSeconds(&time) >= v4)
    {
      v38 = CFArrayGetValueAtIndex(*(CFArrayRef *)this, v37);
      if (!ma::CameraMotionAnalysis::HasTypeInRange((CFArrayRef *)this, 0, v37 - 1, *(_DWORD *)(*(_QWORD *)v38 + 188))|| *(_BYTE *)(*(_QWORD *)CFArrayGetValueAtIndex(*(CFArrayRef *)this, v37) + 72))
      {
        v39 = &v64;
        v40 = (CFArrayRef *)this;
        v41 = v37 - 1;
        v42 = 9;
        goto LABEL_51;
      }
    }
    else if (*(_BYTE *)(*(_QWORD *)CFArrayGetValueAtIndex(*(CFArrayRef *)this, v37) + 72))
    {
      goto LABEL_52;
    }
    v42 = *(_DWORD *)(*(_QWORD *)CFArrayGetValueAtIndex(*(CFArrayRef *)this, v37) + 188);
    v39 = &v66;
    v40 = (CFArrayRef *)this;
    v41 = v37;
LABEL_51:
    result = ma::CameraMotionAnalysis::MergeSegmentsInRange(v40, 0, v41, v42, v39);
    if ((_DWORD)result)
      return result;
  }
LABEL_52:
  if (*(_QWORD *)this)
    Count = CFArrayGetCount(*(CFArrayRef *)this);
  else
    Count = 0;
  PrevLongSegment = ma::CameraMotionAnalysis::GetPrevLongSegment((CFArrayRef *)this, Count);
  v45 = *(const __CFArray **)this;
  if (*(_QWORD *)this)
    LODWORD(v45) = CFArrayGetCount(v45);
  if (PrevLongSegment >= (int)v45)
  {
    if (*(_QWORD *)this)
      v49 = CFArrayGetCount(*(CFArrayRef *)this) - 1;
    else
      v49 = -1;
    p_range = (int *)&range;
    v53 = (CFArrayRef *)this;
    v54 = 0;
    goto LABEL_76;
  }
  lhs = *a2;
  v46 = (uint64_t *)CFArrayGetValueAtIndex(*(CFArrayRef *)this, PrevLongSegment);
  v47 = *v46;
  *(_OWORD *)&range.start.value = *(_OWORD *)(*v46 + 24);
  v48 = *(_OWORD *)(v47 + 56);
  *(_OWORD *)&range.start.epoch = *(_OWORD *)(v47 + 40);
  *(_OWORD *)&range.duration.timescale = v48;
  CMTimeRangeGetEnd(&rhs, &range);
  CMTimeSubtract(&v61, &lhs, &rhs);
  if (CMTimeGetSeconds(&v61) >= v4)
  {
    v50 = *(const __CFArray **)this;
    if (*(_QWORD *)this)
    {
      v51 = CFArrayGetCount(v50) - 1;
      v50 = *(const __CFArray **)this;
    }
    else
    {
      v51 = -1;
    }
    v55 = CFArrayGetValueAtIndex(v50, PrevLongSegment);
    if (ma::CameraMotionAnalysis::HasTypeInRange((CFArrayRef *)this, PrevLongSegment + 1, v51, *(_DWORD *)(*(_QWORD *)v55 + 188))&& !*(_BYTE *)(*(_QWORD *)CFArrayGetValueAtIndex(*(CFArrayRef *)this, PrevLongSegment) + 72))
    {
      goto LABEL_72;
    }
    if (*(_QWORD *)this)
      v49 = CFArrayGetCount(*(CFArrayRef *)this) - 1;
    else
      v49 = -1;
    p_range = (int *)&range;
    v53 = (CFArrayRef *)this;
    v54 = PrevLongSegment + 1;
LABEL_76:
    v58 = 9;
    goto LABEL_77;
  }
  if (!*(_BYTE *)(*(_QWORD *)CFArrayGetValueAtIndex(*(CFArrayRef *)this, PrevLongSegment) + 72))
  {
LABEL_72:
    v56 = *(const __CFArray **)this;
    if (*(_QWORD *)this)
    {
      v57 = CFArrayGetCount(v56) - 1;
      v56 = *(const __CFArray **)this;
    }
    else
    {
      v57 = -1;
    }
    v58 = *(_DWORD *)(*(_QWORD *)CFArrayGetValueAtIndex(v56, PrevLongSegment) + 188);
    p_range = &v65;
    v53 = (CFArrayRef *)this;
    v54 = PrevLongSegment;
    v49 = v57;
LABEL_77:
    result = ma::CameraMotionAnalysis::MergeSegmentsInRange(v53, v54, v49, v58, p_range);
    if ((_DWORD)result)
      return result;
  }
  return 0;
}

uint64_t ma::CameraMotionAnalysis::StablizationSegments(CFArrayRef *this)
{
  signed int NextSegmentWithType;
  signed int v3;
  int i;
  signed int v5;
  int v6;
  int v9;
  uint64_t *v10;
  uint64_t v11;
  __int128 v12;
  float v13;
  CFIndex v15;
  const __CFArray *v16;
  const void *v17;
  int v18;
  uint64_t result;
  int v20;
  signed int v21;
  uint64_t *ValueAtIndex;
  uint64_t v23;
  __int128 v24;
  float Seconds;
  CFIndex v27;
  uint64_t *v28;
  uint64_t v29;
  BOOL v30;
  int v31;
  CFIndex v32;
  CFIndex v33;
  CFIndex v34;
  int Count;
  const __CFArray *v36;
  uint64_t *v37;
  uint64_t v38;
  __int128 v39;
  double v40;
  BOOL v41;
  int v42;
  const void *v43;
  float v44;
  float v45;
  const void *v46;
  float v47;
  float v48;
  _BOOL8 v49;
  float v50;
  _BOOL4 v51;
  float v52;
  char v53;
  ma::CameraMotionSegment *v54;
  ma::CameraMotionSegment **v55;
  ma::CameraMotionSegment *v56;
  const ma::CameraMotionSegment **v57;
  ma::CameraMotionSegment *v58;
  ma::CameraMotionSegment **v59;
  ma::CameraMotionSegment *v60;
  const ma::CameraMotionSegment **v61;
  unsigned int v62;
  unsigned int v63;
  const void *v64;
  float v65;
  float v66;
  const void *v67;
  _BOOL4 v68;
  float v69;
  ma::CameraMotionSegment *v70;
  const ma::CameraMotionSegment **v71;
  uint64_t v72;
  int v73;
  int v74;
  ma::CameraMotionSegment *v75;
  const ma::CameraMotionSegment **v76;
  CMTime v77;
  CMTime v78;
  CMTime v79;
  CMTime v80;
  CMTime rhs;
  CMTime lhs;
  CMTime time;
  CMTime v84;
  CMTime v85;
  CMTime v86;
  int v87;
  CMTimeRange range;

  NextSegmentWithType = ma::CameraMotionAnalysis::GetNextSegmentWithType(this, 0xFFFFFFFF, 0);
  v3 = ma::CameraMotionAnalysis::GetNextSegmentWithType(this, NextSegmentWithType, 0);
  if (NextSegmentWithType != v3)
  {
    v21 = v3;
    do
    {
      v85 = *(CMTime *)(*(_QWORD *)CFArrayGetValueAtIndex(*this, v21) + 24);
      ValueAtIndex = (uint64_t *)CFArrayGetValueAtIndex(*this, NextSegmentWithType);
      v23 = *ValueAtIndex;
      v24 = *(_OWORD *)(*ValueAtIndex + 40);
      *(_OWORD *)&range.start.value = *(_OWORD *)(*ValueAtIndex + 24);
      *(_OWORD *)&range.start.epoch = v24;
      *(_OWORD *)&range.duration.timescale = *(_OWORD *)(v23 + 56);
      CMTimeRangeGetEnd(&v84, &range);
      CMTimeSubtract(&v86, &v85, &v84);
      Seconds = CMTimeGetSeconds(&v86);
      if (Seconds <= 0.1
        || ma::CameraMotionAnalysis::StablizationSegments(void)::kGracePeriod[2 * *((unsigned __int8 *)this + 321)] <= Seconds)
      {
LABEL_38:
        v87 = v21;
      }
      else
      {
        v27 = NextSegmentWithType + 1;
        while (v27 < v21)
        {
          v28 = (uint64_t *)CFArrayGetValueAtIndex(*this, v27);
          v29 = *v28;
          v30 = fabsf(*(float *)(*v28 + 172)) >= 2000.0 || fabsf(*(float *)(v29 + 176)) >= 2000.0;
          if (*(_DWORD *)(v29 + 188) == 6 || *(_BYTE *)(v29 + 72))
            goto LABEL_38;
          if (*(float *)(v29 + 192) < 0.3)
            break;
          ++v27;
          if (v30)
            goto LABEL_38;
        }
        v31 = NextSegmentWithType
            + *(unsigned __int8 *)(*(_QWORD *)CFArrayGetValueAtIndex(*this, NextSegmentWithType) + 72);
        v87 = v31;
        if (*(_BYTE *)(*(_QWORD *)CFArrayGetValueAtIndex(*this, v21) + 72))
        {
          if (v21 - v31 > 1)
          {
            v21 -= *(unsigned __int8 *)(*(_QWORD *)CFArrayGetValueAtIndex(*this, v21) + 72);
          }
          else
          {
            v87 = v21;
            v31 = v21;
          }
        }
        result = ma::CameraMotionAnalysis::MergeSegmentsInRange(this, v31, v21, 0, &v87);
        if ((_DWORD)result)
          return result;
        v21 = v87;
      }
      NextSegmentWithType = v21;
      v21 = ma::CameraMotionAnalysis::GetNextSegmentWithType(this, v21, 0);
    }
    while (NextSegmentWithType != v21);
  }
  for (i = 1; i != 9; ++i)
  {
    v5 = ma::CameraMotionAnalysis::GetNextSegmentWithType(this, 0xFFFFFFFF, i);
    v6 = ma::CameraMotionAnalysis::GetNextSegmentWithType(this, v5, i);
    if (v6 != -1 && v5 != -1 && v5 != v6)
    {
      v9 = v6;
      do
      {
        lhs = *(CMTime *)(*(_QWORD *)CFArrayGetValueAtIndex(*this, v9) + 24);
        v10 = (uint64_t *)CFArrayGetValueAtIndex(*this, v5);
        v11 = *v10;
        v12 = *(_OWORD *)(*v10 + 40);
        *(_OWORD *)&range.start.value = *(_OWORD *)(*v10 + 24);
        *(_OWORD *)&range.start.epoch = v12;
        *(_OWORD *)&range.duration.timescale = *(_OWORD *)(v11 + 56);
        CMTimeRangeGetEnd(&rhs, &range);
        CMTimeSubtract(&time, &lhs, &rhs);
        v13 = CMTimeGetSeconds(&time);
        if (v13 <= 0.1
          || ma::CameraMotionAnalysis::StablizationSegments(void)::kGracePeriod[2 * *((unsigned __int8 *)this + 321)] <= v13)
        {
LABEL_21:
          v5 = v9;
        }
        else
        {
          v15 = v5 + 1;
          while (1)
          {
            v16 = *this;
            if (v15 >= v9)
              break;
            v17 = CFArrayGetValueAtIndex(v16, v15++);
            if (*(_BYTE *)(*(_QWORD *)v17 + 72))
            {
              v87 = v9;
              goto LABEL_21;
            }
          }
          v18 = v5 + *(unsigned __int8 *)(*(_QWORD *)CFArrayGetValueAtIndex(v16, v5) + 72);
          v87 = v18;
          if (*(_BYTE *)(*(_QWORD *)CFArrayGetValueAtIndex(*this, v9) + 72))
          {
            if (v9 - v18 > 1)
            {
              v9 -= *(unsigned __int8 *)(*(_QWORD *)CFArrayGetValueAtIndex(*this, v9) + 72);
            }
            else
            {
              v87 = v9;
              v18 = v9;
            }
          }
          result = ma::CameraMotionAnalysis::MergeSegmentsInRange(this, v18, v9, i, &v87);
          if ((_DWORD)result)
            return result;
          v5 = v87;
        }
        v20 = ma::CameraMotionAnalysis::GetNextSegmentWithType(this, v5, i);
        if (v20 == -1)
          break;
        if (v5 == -1)
          break;
        v9 = v20;
      }
      while (v5 != v20);
    }
  }
  LODWORD(v32) = 0;
  v87 = 0;
LABEL_56:
  while (2)
  {
    while (2)
    {
      while (2)
      {
        while (2)
        {
          v33 = (v32 + 2);
          v34 = v32;
          v32 = (v32 + 1);
          while (1)
          {
            if (*this)
              Count = CFArrayGetCount(*this);
            else
              Count = 0;
            v36 = *this;
            if ((int)v33 >= Count)
            {
              if (!v36)
                return 0;
              v62 = 0;
              v63 = 1;
              while ((int)v63 < (int)CFArrayGetCount(v36))
              {
                if ((*(_DWORD *)(*(_QWORD *)CFArrayGetValueAtIndex(*this, v62) + 188) - 1) > 4
                  || (*(_DWORD *)(*(_QWORD *)CFArrayGetValueAtIndex(*this, v63) + 188) - 1) > 4
                  || (v64 = CFArrayGetValueAtIndex(*this, v62),
                      v65 = fabsf(*(float *)(*(_QWORD *)v64 + 180)),
                      v66 = fabsf(*(float *)(*(_QWORD *)v64 + 184)),
                      v67 = CFArrayGetValueAtIndex(*this, v63),
                      v68 = fabsf(*(float *)(*(_QWORD *)v67 + 180)) < fabsf(*(float *)(*(_QWORD *)v67 + 184)),
                      (((v65 < v66) ^ v68) & 1) != 0)
                  || (v69 = *(float *)(*(_QWORD *)CFArrayGetValueAtIndex(*this, v62) + 4 * (v65 < v66) + 180),
                      (float)(v69 * *(float *)(*(_QWORD *)CFArrayGetValueAtIndex(*this, v63) + 4 * v68 + 180)) < 0.0)
                  || *(_BYTE *)(*(_QWORD *)CFArrayGetValueAtIndex(*this, v62) + 72)
                  || *(_BYTE *)(*(_QWORD *)CFArrayGetValueAtIndex(*this, v63) + 72))
                {
                  v62 = v63;
                }
                else
                {
                  v70 = *(ma::CameraMotionSegment **)CFArrayGetValueAtIndex(*this, v62);
                  v71 = (const ma::CameraMotionSegment **)CFArrayGetValueAtIndex(*this, v63);
                  ma::CameraMotionSegment::Merge(v70, *v71);
                  v72 = *(_QWORD *)CFArrayGetValueAtIndex(*this, v62);
                  v73 = *(_DWORD *)(*(_QWORD *)CFArrayGetValueAtIndex(*this, v63) + 188);
                  if (v73 >= *(_DWORD *)(v72 + 188))
                    v74 = *(_DWORD *)(v72 + 188);
                  else
                    v74 = v73;
                  *(_DWORD *)(*(_QWORD *)CFArrayGetValueAtIndex(*this, v62) + 188) = v74;
                  result = MotionAnalysis<ma::SubtleMotionSegment>::RemoveSegment(this, v63);
                  if ((_DWORD)result)
                    return result;
                }
                v63 = v62 + 1;
                v36 = *this;
                if (!*this)
                  return 0;
              }
              if (!*this)
                return 0;
              if ((int)CFArrayGetCount(*this) < 2)
                return 0;
              if ((*(_DWORD *)(*(_QWORD *)CFArrayGetValueAtIndex(*this, 0) + 188) - 1) > 4)
                return 0;
              if (*(_DWORD *)(*(_QWORD *)CFArrayGetValueAtIndex(*this, 1) + 188))
                return 0;
              if (*(_BYTE *)(*(_QWORD *)CFArrayGetValueAtIndex(*this, 0) + 72))
                return 0;
              if (*(_BYTE *)(*(_QWORD *)CFArrayGetValueAtIndex(*this, 1) + 72))
                return 0;
              v77 = *(CMTime *)(*(_QWORD *)CFArrayGetValueAtIndex(*this, 0) + 48);
              if (CMTimeGetSeconds(&v77) >= ma::CameraMotionAnalysis::StablizationSegments(void)::kHeadPeriod[*((unsigned __int8 *)this + 321)])
                return 0;
              v75 = *(ma::CameraMotionSegment **)CFArrayGetValueAtIndex(*this, 1);
              v76 = (const ma::CameraMotionSegment **)CFArrayGetValueAtIndex(*this, 0);
              ma::CameraMotionSegment::Merge(v75, *v76);
              result = MotionAnalysis<ma::SubtleMotionSegment>::RemoveSegment(this, 0);
              if (!(_DWORD)result)
                return 0;
              return result;
            }
            v79 = *(CMTime *)(*(_QWORD *)CFArrayGetValueAtIndex(v36, v33) + 24);
            v37 = (uint64_t *)CFArrayGetValueAtIndex(*this, v34);
            v38 = *v37;
            v39 = *(_OWORD *)(*v37 + 40);
            *(_OWORD *)&range.start.value = *(_OWORD *)(*v37 + 24);
            *(_OWORD *)&range.start.epoch = v39;
            *(_OWORD *)&range.duration.timescale = *(_OWORD *)(v38 + 56);
            CMTimeRangeGetEnd(&v78, &range);
            CMTimeSubtract(&v80, &v79, &v78);
            v40 = CMTimeGetSeconds(&v80);
            v41 = (fabsf(*(float *)(*(_QWORD *)CFArrayGetValueAtIndex(*this, v32) + 172)) >= 2000.0
                || fabsf(*(float *)(*(_QWORD *)CFArrayGetValueAtIndex(*this, v32) + 176)) >= 2000.0)
               && (*(_DWORD *)(*(_QWORD *)CFArrayGetValueAtIndex(*this, v32) + 188) - 1) < 5;
            v42 = *(_DWORD *)(*(_QWORD *)CFArrayGetValueAtIndex(*this, v32) + 188);
            v43 = CFArrayGetValueAtIndex(*this, v34);
            v44 = fabsf(*(float *)(*(_QWORD *)v43 + 180));
            v45 = fabsf(*(float *)(*(_QWORD *)v43 + 184));
            v46 = CFArrayGetValueAtIndex(*this, v33);
            v47 = fabsf(*(float *)(*(_QWORD *)v46 + 180));
            v48 = fabsf(*(float *)(*(_QWORD *)v46 + 184));
            if (v44 < v45 == v47 < v48)
            {
              v49 = v44 < v45;
              v50 = *(float *)(*(_QWORD *)CFArrayGetValueAtIndex(*this, v34) + 4 * v49 + 180);
              if ((float)(v50 * *(float *)(*(_QWORD *)CFArrayGetValueAtIndex(*this, v33) + 4 * (v47 < v48) + 180)) >= 0.0)
                goto LABEL_70;
            }
            else
            {
              v49 = v44 < v45;
            }
            if (fabsf(*(float *)(*(_QWORD *)CFArrayGetValueAtIndex(*this, v34) + 4 * v49 + 172)) < 2000.0
              || fabsf(*(float *)(*(_QWORD *)CFArrayGetValueAtIndex(*this, v33) + 4 * (v47 < v48) + 172)) < 2000.0)
            {
LABEL_70:
              v51 = 0;
              goto LABEL_71;
            }
            v51 = *(_DWORD *)(*(_QWORD *)CFArrayGetValueAtIndex(*this, v32) + 188) == 0;
LABEL_71:
            v52 = v40;
            v53 = ma::CameraMotionAnalysis::StablizationSegments(void)::kGracePeriod[2
                                                                                   * *((unsigned __int8 *)this + 321)
                                                                                   + v51] <= v52
               || v41;
            if ((v53 & 1) != 0
              || v42 == 6
              || !*(_DWORD *)(*(_QWORD *)CFArrayGetValueAtIndex(*this, v34) + 188)
              && !*(_DWORD *)(*(_QWORD *)CFArrayGetValueAtIndex(*this, v33) + 188))
            {
              goto LABEL_56;
            }
            v54 = *(ma::CameraMotionSegment **)CFArrayGetValueAtIndex(*this, v32);
            v55 = (ma::CameraMotionSegment **)CFArrayGetValueAtIndex(*this, v34);
            if (!ma::CameraMotionSegment::IsMovingSameDirection(v54, *v55)
              || *(_BYTE *)(*(_QWORD *)CFArrayGetValueAtIndex(*this, v34) + 72)
              || *(_BYTE *)(*(_QWORD *)CFArrayGetValueAtIndex(*this, v32) + 72))
            {
              break;
            }
            v56 = *(ma::CameraMotionSegment **)CFArrayGetValueAtIndex(*this, v34);
            v57 = (const ma::CameraMotionSegment **)CFArrayGetValueAtIndex(*this, v32);
            ma::CameraMotionSegment::Merge(v56, *v57);
            result = MotionAnalysis<ma::SubtleMotionSegment>::RemoveSegment(this, v32);
            if ((_DWORD)result)
              return result;
          }
          v58 = *(ma::CameraMotionSegment **)CFArrayGetValueAtIndex(*this, v32);
          v59 = (ma::CameraMotionSegment **)CFArrayGetValueAtIndex(*this, v33);
          if (!ma::CameraMotionSegment::IsMovingSameDirection(v58, *v59))
            continue;
          break;
        }
        if (*(_BYTE *)(*(_QWORD *)CFArrayGetValueAtIndex(*this, v32) + 72))
          continue;
        break;
      }
      if (*(_BYTE *)(*(_QWORD *)CFArrayGetValueAtIndex(*this, v33) + 72))
        continue;
      break;
    }
    v60 = *(ma::CameraMotionSegment **)CFArrayGetValueAtIndex(*this, v33);
    v61 = (const ma::CameraMotionSegment **)CFArrayGetValueAtIndex(*this, v32);
    ma::CameraMotionSegment::Merge(v60, *v61);
    result = MotionAnalysis<ma::SubtleMotionSegment>::RemoveSegment(this, v32);
    if (!(_DWORD)result)
      continue;
    return result;
  }
}

uint64_t ma::CameraMotionAnalysis::MergeLensSwitchSegments(CFArrayRef *this)
{
  CFIndex v2;
  CFIndex v3;
  const __CFArray *v4;
  uint64_t v5;
  ma::CameraMotionSegment **ValueAtIndex;
  ma::CameraMotionSegment *v7;
  int v8;
  _BOOL4 v9;
  _BOOL4 v10;
  int v11;
  uint64_t result;

  LODWORD(v2) = 0;
LABEL_2:
  v3 = v2;
  v2 = (v2 + 1);
  while (1)
  {
    v4 = *this;
    if (*this)
      LODWORD(v4) = CFArrayGetCount(v4);
    if ((int)v3 >= (int)v4 - 1)
      return 0;
    v5 = *(_QWORD *)CFArrayGetValueAtIndex(*this, v3);
    ValueAtIndex = (ma::CameraMotionSegment **)CFArrayGetValueAtIndex(*this, v2);
    v7 = *ValueAtIndex;
    if (*(_BYTE *)(v5 + 72))
    {
      v8 = *((unsigned __int8 *)v7 + 72);
      v9 = ma::CameraMotionSegment::IsFast(*ValueAtIndex)
        || *((_DWORD *)v7 + 47) == 6
        || ma::CameraMotionSegment::IsVeryShort(v7);
    }
    else
    {
      v8 = 0;
      v9 = 0;
    }
    if (*((_BYTE *)v7 + 72))
      v10 = ma::CameraMotionSegment::IsFast((ma::CameraMotionSegment *)v5)
         || *(_DWORD *)(v5 + 188) == 6
         || ma::CameraMotionSegment::IsVeryShort((ma::CameraMotionSegment *)v5);
    else
      v10 = 0;
    if (!(v8 | v9 | v10))
      goto LABEL_2;
    ma::CameraMotionSegment::CombineConfidenceValues(v5, (uint64_t)v7);
    ma::CameraMotionSegment::Merge((ma::CameraMotionSegment *)v5, v7);
    if (*(_DWORD *)(v5 + 188) == 6 || *((_DWORD *)v7 + 47) == 6)
      v11 = 6;
    else
      v11 = 9;
    *(_DWORD *)(v5 + 188) = v11;
    *(_BYTE *)(v5 + 72) = 1;
    result = MotionAnalysis<ma::SubtleMotionSegment>::RemoveSegment(this, v2);
    if ((_DWORD)result)
      return result;
  }
}

uint64_t ma::CameraMotionAnalysis::StoreSegmentResult(ma::CameraMotionAnalysis *this)
{
  CFIndex v2;
  int v3;
  ma::RotationAnalysis *v4;
  const __CFArray *v5;
  int v6;
  const void *ValueAtIndex;
  __int128 v8;
  __int128 v9;
  char v10;
  char v11;
  ma::CameraMotionSegment **v12;
  float v13;
  __CFArray *v14;
  float *v15;
  uint64_t result;
  float v17;
  int v18;
  CMTimeRange v19;
  CMTime v20;
  CMTime v21;
  int v22;

  v2 = 0;
  v3 = *((_DWORD *)this + 56);
  if (v3 >= 4)
    v3 = 4;
  if (v3 <= 1)
    v3 = 1;
  v22 = v3 - 1;
  v4 = (ma::CameraMotionAnalysis *)((char *)this + 232);
  while (1)
  {
    v5 = *(const __CFArray **)this;
    if (*(_QWORD *)this)
      LODWORD(v5) = CFArrayGetCount(v5);
    if (v2 >= (int)v5)
      return 0;
    v21 = *(CMTime *)(*(_QWORD *)CFArrayGetValueAtIndex(*(CFArrayRef *)this, v2) + 24);
    v20 = *(CMTime *)(*(_QWORD *)CFArrayGetValueAtIndex(*(CFArrayRef *)this, v2) + 48);
    v6 = *(_DWORD *)(*(_QWORD *)CFArrayGetValueAtIndex(*(CFArrayRef *)this, v2) + 188);
    ValueAtIndex = CFArrayGetValueAtIndex(*(CFArrayRef *)this, v2);
    v8 = *(_OWORD *)(*(_QWORD *)ValueAtIndex + 24);
    v9 = *(_OWORD *)(*(_QWORD *)ValueAtIndex + 56);
    *(_OWORD *)&v19.start.epoch = *(_OWORD *)(*(_QWORD *)ValueAtIndex + 40);
    *(_OWORD *)&v19.duration.timescale = v9;
    *(_OWORD *)&v19.start.value = v8;
    ma::RotationAnalysis::CheckCameraOrientation(v4, &v19, &v22);
    if (v6 <= 4)
      break;
LABEL_12:
    v10 = v6 + 6;
    v11 = 1;
    v18 = 1 << v10;
    v12 = (ma::CameraMotionSegment **)CFArrayGetValueAtIndex(*(CFArrayRef *)this, v2);
    if (!ma::CameraMotionSegment::IsFast(*v12))
    {
      if (*(_DWORD *)(*(_QWORD *)CFArrayGetValueAtIndex(*(CFArrayRef *)this, v2) + 188) == 9)
        v11 = *(_BYTE *)(*(_QWORD *)CFArrayGetValueAtIndex(*(CFArrayRef *)this, v2) + 72);
      else
        v11 = 0;
    }
    v18 += (v11 & 1) << 16;
    if (*((_BYTE *)this + 321))
    {
      v17 = 0.0;
      v13 = fabsf(*(float *)(*(_QWORD *)CFArrayGetValueAtIndex(*(CFArrayRef *)this, v2) + 180));
      v17 = v13 + fabsf(*(float *)(*(_QWORD *)CFArrayGetValueAtIndex(*(CFArrayRef *)this, v2) + 184));
      v14 = (__CFArray *)*((_QWORD *)this + 2);
      v15 = &v17;
    }
    else
    {
      v14 = (__CFArray *)*((_QWORD *)this + 2);
      v15 = 0;
    }
    result = AddResultDictionary(&v21, &v20, v15, &v18, 0, v14);
    if ((_DWORD)result)
      return result;
    ++v2;
  }
  if (v22 < 4)
  {
    v6 = ma::CameraMotionAnalysis::StoreSegmentResult(void)::kCameraMotionMapWithOrientation[5 * v22 + v6];
    goto LABEL_12;
  }
  return 4294967246;
}

uint64_t ma::CameraMotionAnalysis::CopyProperty(ma::CameraMotionAnalysis *this, CFTypeRef cf1, const __CFAllocator *a3, CFArrayRef *a4)
{
  const __CFArray *v7;
  CFArrayRef Copy;
  uint64_t result;

  if (!CFEqual(cf1, CFSTR("CameraMotionResults")))
    return 4294967246;
  v7 = (const __CFArray *)*((_QWORD *)this + 2);
  if (v7)
    Copy = CFArrayCreateCopy(a3, v7);
  else
    Copy = 0;
  result = 0;
  *a4 = Copy;
  return result;
}

uint64_t ma::CameraMotionAnalysis::CopyProperty(CFArrayRef *this, CMTimeRange *a2, CFTypeRef cf1, const __CFAllocator *a4, CFArrayRef *a5)
{
  __CFArray *Mutable;
  CFIndex v10;
  const __CFArray *v11;
  CMTime *v12;
  float v13;
  uint64_t v14;
  __int128 v15;
  __int128 v16;
  CMTime *v17;
  float v18;
  uint64_t v19;
  CFArrayRef Copy;
  CMTimeRange v22;
  CMTime v23;
  float v24;
  CMTime v25;
  CMTime start;
  CMTime v27;
  CMTime rhs;
  CMTime lhs;

  if (!CFEqual(cf1, CFSTR("CameraMotionResults")))
    return 4294967246;
  Mutable = CFArrayCreateMutable(0, 0, MEMORY[0x1E0C9B378]);
  v10 = 0;
  v24 = 0.0;
  while (1)
  {
    v11 = *this;
    if (*this)
      LODWORD(v11) = CFArrayGetCount(v11);
    if (v10 >= (int)v11)
      break;
    start = *(CMTime *)(*(_QWORD *)CFArrayGetValueAtIndex(*this, v10) + 24);
    v12 = *(CMTime **)CFArrayGetValueAtIndex(*this, v10);
    v25 = v12[2];
    lhs = start;
    rhs = v12[2];
    CMTimeAdd(&v27, &lhs, &rhs);
    lhs = v27;
    rhs = a2->start;
    if ((CMTimeCompare(&lhs, &rhs) & 0x80000000) == 0)
    {
      lhs = start;
      rhs = a2->start;
      if (CMTimeCompare(&lhs, &rhs) < 0)
      {
        lhs = a2->start;
        rhs = start;
        CMTimeSubtract(&v23, &lhs, &rhs);
        rhs = v25;
        v27 = v23;
        CMTimeSubtract(&lhs, &rhs, &v27);
        v25 = lhs;
        start = a2->start;
      }
      v13 = *(int *)(*(_QWORD *)CFArrayGetValueAtIndex(*this, v10) + 188) >= 5 ? 0.0 : 1.0;
      v24 = v13;
      v14 = AddResultDictionary(&start, &v25, &v24, 0, 0, Mutable);
      if ((_DWORD)v14)
      {
        v19 = v14;
LABEL_23:
        if (!Mutable)
          return v19;
        goto LABEL_24;
      }
    }
    ++v10;
  }
  start = *(CMTime *)((_BYTE *)this[1] + 1);
  v15 = *(_OWORD *)&a2->duration.timescale;
  v16 = *(_OWORD *)&a2->start.value;
  *(_OWORD *)&v22.start.epoch = *(_OWORD *)&a2->start.epoch;
  *(_OWORD *)&v22.duration.timescale = v15;
  *(_OWORD *)&v22.start.value = v16;
  CMTimeRangeGetEnd(&v23, &v22);
  v17 = (CMTime *)this[1];
  lhs = v23;
  rhs = v17[1];
  CMTimeSubtract(&v27, &lhs, &rhs);
  v25 = v27;
  ma::CameraMotionSegment::DetermineType(this[1]);
  v18 = 0.0;
  if (*((int *)this[1] + 47) < 5)
    v18 = 1.0;
  v24 = v18;
  lhs = start;
  rhs = a2->start;
  if (CMTimeCompare(&lhs, &rhs) < 0)
  {
    lhs = a2->start;
    rhs = start;
    CMTimeSubtract(&v23, &lhs, &rhs);
    rhs = v25;
    v27 = v23;
    CMTimeSubtract(&lhs, &rhs, &v27);
    v25 = lhs;
    start = a2->start;
  }
  v19 = AddResultDictionary(&start, &v25, &v24, 0, 0, Mutable);
  if ((_DWORD)v19)
    goto LABEL_23;
  if (Mutable)
    Copy = CFArrayCreateCopy(a4, Mutable);
  else
    Copy = 0;
  v19 = 0;
  *a5 = Copy;
  if (Mutable)
LABEL_24:
    CFRelease(Mutable);
  return v19;
}

__n128 ma::CameraMotionAnalysis::SetStartTime(ma::CameraMotionAnalysis *this, CMTime *a2)
{
  __int128 v2;
  __n128 result;

  v2 = *(_OWORD *)&a2->value;
  *((_QWORD *)this + 5) = a2->epoch;
  *(_OWORD *)((char *)this + 24) = v2;
  result = *(__n128 *)&a2->value;
  *((_QWORD *)this + 34) = a2->epoch;
  *((__n128 *)this + 16) = result;
  return result;
}

uint64_t ma::CameraMotionAnalysis::SetOrientationResult(ma::CameraMotionAnalysis *this, const __CFArray *a2)
{
  uint64_t result;

  *((_BYTE *)this + 320) = a2 == 0;
  if (!a2)
    return 0;
  result = ma::RotationAnalysis::SetOrientationResult((ma::CameraMotionAnalysis *)((char *)this + 232), a2);
  if (!(_DWORD)result)
    return 0;
  return result;
}

BOOL ma::CameraMotionAnalysis::isCurrentSegmentStable(ma::CameraMotionSegment **this)
{
  ma::CameraMotionSegment::DetermineType(this[1]);
  return *((_DWORD *)this[1] + 47) == 0;
}

const __CFArray *ma::CameraMotionAnalysis::GetTimeRangeAndScoreResults@<X0>(CFArrayRef *this@<X0>, void **a2@<X8>)
{
  CFIndex v4;
  uint64_t v5;
  const __CFArray *result;
  const void *ValueAtIndex;
  char *v8;
  char *v9;
  __int128 v10;
  __int128 v11;
  const void *v12;
  char *v13;
  __int128 v14;
  __int128 v15;
  char *v16;
  char *v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  char *v22;
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;
  char *v26;
  char *v27;
  char *v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  char *v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;

  v4 = 0;
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  v5 = (uint64_t)(a2 + 2);
  while (1)
  {
    result = *this;
    if (*this)
      result = (const __CFArray *)CFArrayGetCount(result);
    if (v4 >= (int)result)
      return result;
    if (*(_DWORD *)(*(_QWORD *)CFArrayGetValueAtIndex(*this, v4) + 188) == 9
      && *(_BYTE *)(*(_QWORD *)CFArrayGetValueAtIndex(*this, v4) + 72))
    {
      ValueAtIndex = CFArrayGetValueAtIndex(*this, v4);
      v36 = *(_OWORD *)(*(_QWORD *)ValueAtIndex + 24);
      v38 = *(_OWORD *)(*(_QWORD *)ValueAtIndex + 40);
      v40 = *(_OWORD *)(*(_QWORD *)ValueAtIndex + 56);
      v8 = (char *)a2[1];
      v9 = (char *)a2[2];
      if (v8 >= v9)
      {
        v17 = (char *)*a2;
        v23 = 0x4EC4EC4EC4EC4EC5 * ((v8 - (_BYTE *)*a2) >> 2);
        v24 = v23 + 1;
        if ((unint64_t)(v23 + 1) > 0x4EC4EC4EC4EC4ECLL)
          std::vector<std::unique_ptr<VCPProtoKeypoint>>::__throw_length_error[abi:ne180100]();
        v25 = 0x4EC4EC4EC4EC4EC5 * ((v9 - v17) >> 2);
        if (2 * v25 > v24)
          v24 = 2 * v25;
        if (v25 >= 0x276276276276276)
          v21 = 0x4EC4EC4EC4EC4ECLL;
        else
          v21 = v24;
        if (v21)
        {
          v22 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::pair<CMTimeRange,float>>>(v5, v21);
          v17 = (char *)*a2;
          v8 = (char *)a2[1];
        }
        else
        {
          v22 = 0;
        }
        v26 = &v22[52 * v23];
        *(_OWORD *)v26 = v36;
        *((_OWORD *)v26 + 1) = v38;
        *((_OWORD *)v26 + 2) = v40;
        *((_DWORD *)v26 + 12) = 1065353216;
        if (v8 == v17)
          goto LABEL_39;
        v32 = &v22[52 * v23];
        do
        {
          v28 = v32 - 52;
          v33 = *(_OWORD *)(v8 - 52);
          v34 = *(_OWORD *)(v8 - 36);
          v35 = *(_OWORD *)(v8 - 20);
          *((_DWORD *)v32 - 1) = *((_DWORD *)v8 - 1);
          *(_OWORD *)(v32 - 20) = v35;
          *(_OWORD *)(v32 - 36) = v34;
          *(_OWORD *)(v32 - 52) = v33;
          v8 -= 52;
          v32 -= 52;
        }
        while (v8 != v17);
        goto LABEL_40;
      }
      v10 = *(_OWORD *)(*(_QWORD *)ValueAtIndex + 24);
      v11 = *(_OWORD *)(*(_QWORD *)ValueAtIndex + 56);
      *((_OWORD *)v8 + 1) = *(_OWORD *)(*(_QWORD *)ValueAtIndex + 40);
      *((_OWORD *)v8 + 2) = v11;
      *(_OWORD *)v8 = v10;
      *((_DWORD *)v8 + 12) = 1065353216;
    }
    else
    {
      if ((*(_DWORD *)(*(_QWORD *)CFArrayGetValueAtIndex(*this, v4) + 188) - 1) > 4)
        goto LABEL_43;
      v12 = CFArrayGetValueAtIndex(*this, v4);
      v37 = *(_OWORD *)(*(_QWORD *)v12 + 24);
      v39 = *(_OWORD *)(*(_QWORD *)v12 + 40);
      v41 = *(_OWORD *)(*(_QWORD *)v12 + 56);
      v8 = (char *)a2[1];
      v13 = (char *)a2[2];
      if (v8 >= v13)
      {
        v17 = (char *)*a2;
        v18 = 0x4EC4EC4EC4EC4EC5 * ((v8 - (_BYTE *)*a2) >> 2);
        v19 = v18 + 1;
        if ((unint64_t)(v18 + 1) > 0x4EC4EC4EC4EC4ECLL)
          std::vector<std::unique_ptr<VCPProtoKeypoint>>::__throw_length_error[abi:ne180100]();
        v20 = 0x4EC4EC4EC4EC4EC5 * ((v13 - v17) >> 2);
        if (2 * v20 > v19)
          v19 = 2 * v20;
        if (v20 >= 0x276276276276276)
          v21 = 0x4EC4EC4EC4EC4ECLL;
        else
          v21 = v19;
        if (v21)
        {
          v22 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::pair<CMTimeRange,float>>>(v5, v21);
          v17 = (char *)*a2;
          v8 = (char *)a2[1];
        }
        else
        {
          v22 = 0;
        }
        v26 = &v22[52 * v18];
        *(_OWORD *)v26 = v37;
        *((_OWORD *)v26 + 1) = v39;
        *((_OWORD *)v26 + 2) = v41;
        *((_DWORD *)v26 + 12) = 0;
        if (v8 != v17)
        {
          v27 = &v22[52 * v18];
          do
          {
            v28 = v27 - 52;
            v29 = *(_OWORD *)(v8 - 52);
            v30 = *(_OWORD *)(v8 - 36);
            v31 = *(_OWORD *)(v8 - 20);
            *((_DWORD *)v27 - 1) = *((_DWORD *)v8 - 1);
            *(_OWORD *)(v27 - 20) = v31;
            *(_OWORD *)(v27 - 36) = v30;
            *(_OWORD *)(v27 - 52) = v29;
            v8 -= 52;
            v27 -= 52;
          }
          while (v8 != v17);
          goto LABEL_40;
        }
LABEL_39:
        v28 = v26;
LABEL_40:
        v16 = v26 + 52;
        *a2 = v28;
        a2[1] = v26 + 52;
        a2[2] = &v22[52 * v21];
        if (v17)
          operator delete(v17);
        goto LABEL_42;
      }
      v14 = *(_OWORD *)(*(_QWORD *)v12 + 24);
      v15 = *(_OWORD *)(*(_QWORD *)v12 + 56);
      *((_OWORD *)v8 + 1) = *(_OWORD *)(*(_QWORD *)v12 + 40);
      *((_OWORD *)v8 + 2) = v15;
      *(_OWORD *)v8 = v14;
      *((_DWORD *)v8 + 12) = 0;
    }
    v16 = v8 + 52;
LABEL_42:
    a2[1] = v16;
LABEL_43:
    ++v4;
  }
}

void sub_1B6D85A80(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

const __CFArray *ma::CameraMotionAnalysis::GetTimeRangesIsStable@<X0>(CFArrayRef *this@<X0>, char **a2@<X8>)
{
  CFIndex v4;
  uint64_t v5;
  const __CFArray *result;
  const void *ValueAtIndex;
  __int128 *v8;
  unint64_t v9;
  char *v10;
  __int128 v11;
  __int128 v12;
  char *v13;
  char *v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  char *v19;
  char *v20;
  __int128 v21;
  __int128 v22;
  char *v23;
  __int128 v24;
  __int128 v25;
  char *v26;

  v4 = 0;
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  v5 = (uint64_t)(a2 + 2);
  while (1)
  {
    result = *this;
    if (*this)
      result = (const __CFArray *)CFArrayGetCount(result);
    if (v4 >= (int)result)
      break;
    if (!*(_DWORD *)(*(_QWORD *)CFArrayGetValueAtIndex(*this, v4) + 188))
    {
      ValueAtIndex = CFArrayGetValueAtIndex(*this, v4);
      v8 = (__int128 *)(*(_QWORD *)ValueAtIndex + 24);
      v10 = a2[1];
      v9 = (unint64_t)a2[2];
      if ((unint64_t)v10 >= v9)
      {
        v14 = *a2;
        v15 = 0xAAAAAAAAAAAAAAABLL * ((v10 - *a2) >> 4);
        v16 = v15 + 1;
        if (v15 + 1 > 0x555555555555555)
          std::vector<std::unique_ptr<VCPProtoKeypoint>>::__throw_length_error[abi:ne180100]();
        v17 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v9 - (_QWORD)v14) >> 4);
        if (2 * v17 > v16)
          v16 = 2 * v17;
        if (v17 >= 0x2AAAAAAAAAAAAAALL)
          v18 = 0x555555555555555;
        else
          v18 = v16;
        if (v18)
        {
          v19 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<CMTimeRange>>(v5, v18);
          v14 = *a2;
          v10 = a2[1];
        }
        else
        {
          v19 = 0;
        }
        v20 = &v19[48 * v15];
        v21 = *v8;
        v22 = v8[2];
        *((_OWORD *)v20 + 1) = v8[1];
        *((_OWORD *)v20 + 2) = v22;
        *(_OWORD *)v20 = v21;
        if (v10 == v14)
        {
          v26 = &v19[48 * v15];
        }
        else
        {
          v23 = &v19[48 * v15];
          do
          {
            v24 = *((_OWORD *)v10 - 3);
            v25 = *((_OWORD *)v10 - 1);
            v26 = v23 - 48;
            *((_OWORD *)v23 - 2) = *((_OWORD *)v10 - 2);
            *((_OWORD *)v23 - 1) = v25;
            *((_OWORD *)v23 - 3) = v24;
            v10 -= 48;
            v23 -= 48;
          }
          while (v10 != v14);
        }
        v13 = v20 + 48;
        *a2 = v26;
        a2[1] = v20 + 48;
        a2[2] = &v19[48 * v18];
        if (v14)
          operator delete(v14);
      }
      else
      {
        v11 = *v8;
        v12 = *(_OWORD *)(*(_QWORD *)ValueAtIndex + 56);
        *((_OWORD *)v10 + 1) = *(_OWORD *)(*(_QWORD *)ValueAtIndex + 40);
        *((_OWORD *)v10 + 2) = v12;
        *(_OWORD *)v10 = v11;
        v13 = v10 + 48;
      }
      a2[1] = v13;
    }
    ++v4;
  }
  return result;
}

void sub_1B6D85C5C(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

uint64_t MotionAnalysis<ma::CameraMotionSegment>::AddSegment(uint64_t a1)
{
  ma::CameraMotionSegment *v2;
  ma::CameraMotionSegment *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;

  v2 = (ma::CameraMotionSegment *)operator new(0xC8uLL, MEMORY[0x1E0DE4E10]);
  if (!v2)
    return 4294967188;
  v3 = v2;
  ma::CameraMotionSegment::CameraMotionSegment(v2);
  v4 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)(a1 + 8) = v3;
  v7 = v4;
  v5 = Vector<ma::Object *>::PushBack((CFMutableArrayRef *)a1, &v7);
  if ((_DWORD)v5 && v7)
    (*(void (**)(uint64_t))(*(_QWORD *)v7 + 8))(v7);
  return v5;
}

void sub_1B6D85CFC(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1BCCA12A4](v1, MEMORY[0x1E0DE4E10]);
  _Unwind_Resume(a1);
}

uint64_t ma::CameraMotionAnalysis::GetNextLongSegment(CFArrayRef *this, unsigned int a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  const __CFArray *v7;
  ma::CameraMotionSegment **ValueAtIndex;

  v4 = 0;
  v5 = (int)a2 + 1;
  v6 = a2;
  while (1)
  {
    v7 = *this;
    if (*this)
      LODWORD(v7) = CFArrayGetCount(v7);
    if (v5 + v4 >= (int)v7)
      break;
    ValueAtIndex = (ma::CameraMotionSegment **)CFArrayGetValueAtIndex(*this, v5 + v4++);
    if (!ma::CameraMotionSegment::IsShort(*ValueAtIndex, *((unsigned __int8 *)this + 321)))
      return a2 + v4;
  }
  return v6;
}

CFIndex ma::CameraMotionAnalysis::GetSameTypeSegmentInRange(CFArrayRef *this, int a2, int a3, int a4)
{
  CFIndex v6;
  int v7;
  CFIndex v8;

  if (a2 >= a3)
  {
    if (a2 <= a3)
    {
      return 0xFFFFFFFFLL;
    }
    else
    {
      v6 = a2;
      v8 = a3;
      while (*(_DWORD *)(*(_QWORD *)CFArrayGetValueAtIndex(*this, v6) + 188) != a4)
      {
        if (v6-- <= v8)
          return 0xFFFFFFFFLL;
      }
    }
  }
  else
  {
    v6 = a2;
    v7 = a3 + 1;
    while (*(_DWORD *)(*(_QWORD *)CFArrayGetValueAtIndex(*this, v6) + 188) != a4)
    {
      if (v7 == (_DWORD)++v6)
        return 0xFFFFFFFFLL;
    }
  }
  return v6;
}

uint64_t ma::CameraMotionAnalysis::MergeSegmentsInRange(CFArrayRef *this, int a2, int a3, int a4, int *a5)
{
  int v8;
  int v9;
  ma::CameraMotionSegment *v10;
  CFIndex v11;
  int v12;
  const ma::CameraMotionSegment **ValueAtIndex;
  uint64_t result;

  if (a3 >= a2)
    v8 = a2;
  else
    v8 = a3;
  if (a2 <= a3)
    v9 = a3;
  else
    v9 = a2;
  v10 = *(ma::CameraMotionSegment **)CFArrayGetValueAtIndex(*this, v8);
  if (v9 == v8)
  {
LABEL_12:
    if (a4 > 8)
      ma::CameraMotionSegment::DetermineType(v10);
    else
      *((_DWORD *)v10 + 47) = a4;
    result = 0;
    *a5 = v8;
  }
  else
  {
    v11 = v8 + 1;
    v12 = v8 - v9;
    while (1)
    {
      ValueAtIndex = (const ma::CameraMotionSegment **)CFArrayGetValueAtIndex(*this, v11);
      ma::CameraMotionSegment::Merge(v10, *ValueAtIndex);
      result = MotionAnalysis<ma::SubtleMotionSegment>::RemoveSegment(this, v11);
      if ((_DWORD)result)
        break;
      if (__CFADD__(v12++, 1))
        goto LABEL_12;
    }
  }
  return result;
}

const __CFArray *ma::CameraMotionAnalysis::HasTypeInRange(CFArrayRef *this, int a2, int a3, int a4)
{
  int v4;
  int v5;
  const __CFArray *result;
  int v11;
  CFIndex v12;
  int v13;
  int v14;

  if (a3 >= a2)
    v4 = a2;
  else
    v4 = a3;
  if (a2 <= a3)
    v5 = a3;
  else
    v5 = a2;
  if (v4 < 0)
    return 0;
  result = *this;
  if (!result)
    return result;
  if (v4 >= (int)CFArrayGetCount(result))
    return 0;
  result = *this;
  if (!*this)
    return result;
  if (v5 >= (int)CFArrayGetCount(result))
    return 0;
  if (a3 >= a2)
    v11 = a2;
  else
    v11 = a3;
  v12 = v11;
  v13 = a3 + a2 - v11;
  do
  {
    v14 = *(_DWORD *)(*(_QWORD *)CFArrayGetValueAtIndex(*this, v12) + 188);
    result = (const __CFArray *)(v14 == a4);
  }
  while (v14 != a4 && v13 != (_DWORD)v12++);
  return result;
}

uint64_t ma::CameraMotionAnalysis::GetPrevLongSegment(CFArrayRef *this, uint64_t a2)
{
  unsigned int v4;
  uint64_t v5;
  BOOL v6;
  ma::CameraMotionSegment **ValueAtIndex;

  v4 = a2 - 1;
  LODWORD(v5) = a2;
  while (1)
  {
    v6 = __OFSUB__((_DWORD)v5, 1);
    v5 = (v5 - 1);
    if ((int)v5 < 0 != v6)
      break;
    ValueAtIndex = (ma::CameraMotionSegment **)CFArrayGetValueAtIndex(*this, v4--);
    if (!ma::CameraMotionSegment::IsShort(*ValueAtIndex, *((unsigned __int8 *)this + 321)))
      return v5;
  }
  return a2;
}

uint64_t ma::CameraMotionAnalysis::GetNextSegmentWithType(CFArrayRef *this, unsigned int a2, int a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  const __CFArray *v9;
  CFIndex v10;

  v6 = 0;
  v7 = (int)a2 + 1;
  v8 = a2;
  while (1)
  {
    v9 = *this;
    if (*this)
      LODWORD(v9) = CFArrayGetCount(v9);
    v10 = v7 + v6;
    if (v7 + v6 >= (int)v9)
      break;
    ++v6;
    if (*(_DWORD *)(*(_QWORD *)CFArrayGetValueAtIndex(*this, v10) + 188) == a3)
      return a2 + v6;
  }
  return v8;
}

void *std::__allocate_at_least[abi:ne180100]<std::allocator<CMTimeRange>>(uint64_t a1, unint64_t a2)
{
  if (a2 >= 0x555555555555556)
    std::__throw_bad_array_new_length[abi:ne180100]();
  return operator new(48 * a2);
}

void sub_1B6D86278(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

uint64_t __Block_byref_object_copy__18(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void __Block_byref_object_dispose__18(uint64_t a1)
{

}

void sub_1B6D8680C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1B6D86924(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  v4 = v3;

  _Unwind_Resume(a1);
}

void sub_1B6D869FC(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1B6D86A54(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1B6D86AA8(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1B6D86AFC(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1B6D86B54(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, objc_super a9)
{
  void *v9;
  void *v10;

  v10 = v9;
  a9.receiver = v10;
  a9.super_class = (Class)VCPDatabaseReader;
  -[_Unwind_Exception dealloc](&a9, sel_dealloc);
  _Unwind_Resume(a1);
}

void sub_1B6D86BC8(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1B6D86D80(_Unwind_Exception *exception_object)
{
  _Unwind_Resume(exception_object);
}

BOOL busyHandler(void *a1, int a2)
{
  void *v2;
  double v3;
  double v4;
  _BOOL8 result;
  void *v6;
  uint64_t v7;
  uint8_t v8[16];
  uint8_t buf[16];

  if (!a2)
  {
    if ((int)MediaAnalysisLogLevel() >= 4 && os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl(&dword_1B6C4A000, MEMORY[0x1E0C81028], OS_LOG_TYPE_DEFAULT, "[VCPDatabaseReader] Error SQLITE_BUSY encountered, attempting first retry", buf, 2u);
    }
    objc_msgSend(MEMORY[0x1E0C99D68], "now");
    v6 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v6, "timeIntervalSinceReferenceDate");
    firstRetryStartTime = v7;

    return 1;
  }
  objc_msgSend(MEMORY[0x1E0C99D68], "now");
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v2, "timeIntervalSinceReferenceDate");
  v4 = v3;

  if (v4 - *(double *)&firstRetryStartTime <= 0.01)
    return 1;
  if ((int)MediaAnalysisLogLevel() >= 4)
  {
    result = os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_DEFAULT);
    if (!result)
      return result;
    *(_WORD *)v8 = 0;
    _os_log_impl(&dword_1B6C4A000, MEMORY[0x1E0C81028], OS_LOG_TYPE_DEFAULT, "[VCPDatabaseReader] busy timeout has passed since first retry, stop retrying", v8, 2u);
  }
  return 0;
}

void sub_1B6D86EE0(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1B6D872C0(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  _Unwind_Resume(a1);
}

id sqlite3_column_nsdate(sqlite3_stmt *a1, int a2)
{
  void *v4;

  if (sqlite3_column_type(a1, a2) == 5)
  {
    v4 = 0;
  }
  else
  {
    objc_msgSend(MEMORY[0x1E0C99D68], "dateWithTimeIntervalSinceReferenceDate:", sqlite3_column_double(a1, a2));
    v4 = (void *)objc_claimAutoreleasedReturnValue();
  }
  return v4;
}

void sub_1B6D875D4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_1B6D878FC(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1B6D87B98(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1B6D87FBC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9, void *a10)
{
  void *v10;
  void *v11;
  void *v12;

  _Unwind_Resume(a1);
}

void sub_1B6D88448(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, void *a11)
{
  void *v11;
  void *v12;
  void *v13;

  _Unwind_Resume(a1);
}

void sub_1B6D88A8C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12)
{
  void *v12;
  void *v13;
  void *v14;
  void *v15;

  _Unwind_Resume(a1);
}

void sub_1B6D88F4C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, void *a7, uint64_t a8, uint64_t a9, ...)
{
  void *v9;
  va_list va;

  va_start(va, a9);

  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1B6D891E4(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1B6D893A4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,id a22)
{
  void *v22;

  _Block_object_dispose(&a17, 8);
  _Unwind_Resume(a1);
}

uint64_t __Block_byref_object_copy__19(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void __Block_byref_object_dispose__19(uint64_t a1)
{

}

void sub_1B6D897C0(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1B6D89994(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, id a20)
{
  _Block_object_dispose(&a15, 8);

  _Unwind_Resume(a1);
}

void sub_1B6D89C14(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1B6D89DB4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,id a22)
{
  void *v22;

  _Block_object_dispose(&a17, 8);
  _Unwind_Resume(a1);
}

void sub_1B6D8A0B4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,id a22)
{
  void *v22;

  _Block_object_dispose(&a17, 8);
  _Unwind_Resume(a1);
}

void sub_1B6D8A3A4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,id a22)
{
  void *v22;

  _Block_object_dispose(&a17, 8);
  _Unwind_Resume(a1);
}

void sub_1B6D8A788(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1B6D8A9A4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, void *a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,id a22)
{
  void *v22;
  void *v23;

  _Block_object_dispose(&a17, 8);
  _Unwind_Resume(a1);
}

void sub_1B6D8AB90(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1B6D8AD70(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, void *a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,id a22)
{
  void *v22;
  void *v23;

  _Block_object_dispose(&a17, 8);
  _Unwind_Resume(a1);
}

void sub_1B6D8B0F4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  _Unwind_Resume(a1);
}

void sub_1B6D8B328(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,id a22)
{
  _Block_object_dispose(&a17, 8);

  _Unwind_Resume(a1);
}

void sub_1B6D8B674(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1B6D8B850(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,id a22)
{
  void *v22;

  _Block_object_dispose(&a17, 8);
  _Unwind_Resume(a1);
}

void sub_1B6D8BDB4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1B6D8BFC0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,id a22)
{
  _Block_object_dispose(&a17, 8);

  _Unwind_Resume(a1);
}

void sub_1B6D8C274(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1B6D8C3FC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1B6D8C840(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1B6D8C9D8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, void *a8, uint64_t a9, ...)
{
  void *v9;
  va_list va;

  va_start(va, a9);

  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1B6D8CC00(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15, void *a16, uint64_t a17, uint64_t a18, char a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,id a24)
{
  void *v24;
  void *v25;

  _Block_object_dispose(&a19, 8);
  _Unwind_Resume(a1);
}

void sub_1B6D8D004(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1B6D8D224(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, void *a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,id a22)
{
  void *v22;
  void *v23;

  _Block_object_dispose(&a17, 8);
  _Unwind_Resume(a1);
}

void sub_1B6D8D5EC(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1B6D8D7DC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,id a22)
{
  void *v22;

  _Block_object_dispose(&a17, 8);
  _Unwind_Resume(a1);
}

void sub_1B6D8DB20(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1B6D8DC08(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1B6D8DE90(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, const void *a9)
{
  void *v9;

  CF<opaqueCMSampleBuffer *>::~CF(&a9);

  _Unwind_Resume(a1);
}

void sub_1B6D8E304(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12)
{
  void *v12;
  void *v13;
  void *v14;

  _Unwind_Resume(a1);
}

void sub_1B6D8E834(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1B6D8EB74(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27)
{
  _Block_object_dispose(&a27, 8);
  _Unwind_Resume(a1);
}

CFTypeRef __copy_helper_block_ea8_48c22_ZTS2CFIP10__CVBufferE56c22_ZTS2CFIP10__CVBufferE(uint64_t a1, uint64_t a2)
{
  const void *v4;
  CFTypeRef result;

  v4 = *(const void **)(a2 + 48);
  *(_QWORD *)(a1 + 48) = v4;
  if (v4)
    CFRetain(v4);
  result = *(CFTypeRef *)(a2 + 56);
  *(_QWORD *)(a1 + 56) = result;
  if (result)
    return CFRetain(result);
  return result;
}

void sub_1B6D8EC7C(_Unwind_Exception *a1)
{
  const void **v1;

  CF<opaqueCMSampleBuffer *>::~CF(v1);
  _Unwind_Resume(a1);
}

const void **__destroy_helper_block_ea8_48c22_ZTS2CFIP10__CVBufferE56c22_ZTS2CFIP10__CVBufferE(uint64_t a1)
{
  const void **v1;

  v1 = (const void **)(a1 + 48);
  CF<opaqueCMSampleBuffer *>::~CF((const void **)(a1 + 56));
  return CF<opaqueCMSampleBuffer *>::~CF(v1);
}

void sub_1B6D8EDE0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  CF<opaqueCMSampleBuffer *>::~CF((const void **)va);
  _Unwind_Resume(a1);
}

uint64_t VCPProtoTimeReadFrom(uint64_t a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  int v15;
  char v17;
  unsigned int v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  char v22;
  uint64_t result;
  char v24;
  unsigned int v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  char v29;
  char v30;
  unsigned int v31;
  uint64_t v32;
  unint64_t v33;
  char v34;
  char v35;
  unsigned int v36;
  uint64_t v37;
  unint64_t v38;
  char v39;
  uint64_t v40;
  uint64_t v41;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) < *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
  {
    v7 = (int *)MEMORY[0x1E0D82BB8];
    do
    {
      if (*(_BYTE *)(a2 + *v5))
        break;
      v8 = 0;
      v9 = 0;
      v10 = 0;
      while (1)
      {
        v11 = *v3;
        v12 = *(_QWORD *)(a2 + v11);
        if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
          break;
        v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
        *(_QWORD *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0)
          goto LABEL_12;
        v8 += 7;
        v14 = v9++ >= 9;
        if (v14)
        {
          v10 = 0;
          v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
      v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(_BYTE *)(a2 + *v5))
        v10 = 0;
LABEL_14:
      if (v15 || (v10 & 7) == 4)
        break;
      switch((v10 >> 3))
      {
        case 1u:
          v17 = 0;
          v18 = 0;
          v19 = 0;
          while (1)
          {
            v20 = *v3;
            v21 = *(_QWORD *)(a2 + v20);
            if (v21 == -1 || v21 >= *(_QWORD *)(a2 + *v4))
              break;
            v22 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v21);
            *(_QWORD *)(a2 + v20) = v21 + 1;
            v19 |= (unint64_t)(v22 & 0x7F) << v17;
            if ((v22 & 0x80) == 0)
              goto LABEL_50;
            v17 += 7;
            v14 = v18++ >= 9;
            if (v14)
            {
              v19 = 0;
              goto LABEL_52;
            }
          }
          *(_BYTE *)(a2 + *v5) = 1;
LABEL_50:
          if (*(_BYTE *)(a2 + *v5))
            v19 = 0;
LABEL_52:
          v40 = 16;
          goto LABEL_66;
        case 2u:
          v24 = 0;
          v25 = 0;
          v26 = 0;
          while (2)
          {
            v27 = *v3;
            v28 = *(_QWORD *)(a2 + v27);
            if (v28 == -1 || v28 >= *(_QWORD *)(a2 + *v4))
            {
              *(_BYTE *)(a2 + *v5) = 1;
            }
            else
            {
              v29 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v28);
              *(_QWORD *)(a2 + v27) = v28 + 1;
              v26 |= (unint64_t)(v29 & 0x7F) << v24;
              if (v29 < 0)
              {
                v24 += 7;
                v14 = v25++ >= 9;
                if (v14)
                {
                  LODWORD(v26) = 0;
                  goto LABEL_56;
                }
                continue;
              }
            }
            break;
          }
          if (*(_BYTE *)(a2 + *v5))
            LODWORD(v26) = 0;
LABEL_56:
          v41 = 28;
          goto LABEL_61;
        case 3u:
          v30 = 0;
          v31 = 0;
          v26 = 0;
          while (2)
          {
            v32 = *v3;
            v33 = *(_QWORD *)(a2 + v32);
            if (v33 == -1 || v33 >= *(_QWORD *)(a2 + *v4))
            {
              *(_BYTE *)(a2 + *v5) = 1;
            }
            else
            {
              v34 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v33);
              *(_QWORD *)(a2 + v32) = v33 + 1;
              v26 |= (unint64_t)(v34 & 0x7F) << v30;
              if (v34 < 0)
              {
                v30 += 7;
                v14 = v31++ >= 9;
                if (v14)
                {
                  LODWORD(v26) = 0;
                  goto LABEL_60;
                }
                continue;
              }
            }
            break;
          }
          if (*(_BYTE *)(a2 + *v5))
            LODWORD(v26) = 0;
LABEL_60:
          v41 = 24;
LABEL_61:
          *(_DWORD *)(a1 + v41) = v26;
          continue;
        case 4u:
          v35 = 0;
          v36 = 0;
          v19 = 0;
          break;
        default:
          result = PBReaderSkipValueWithTag();
          if (!(_DWORD)result)
            return result;
          continue;
      }
      while (1)
      {
        v37 = *v3;
        v38 = *(_QWORD *)(a2 + v37);
        if (v38 == -1 || v38 >= *(_QWORD *)(a2 + *v4))
          break;
        v39 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v38);
        *(_QWORD *)(a2 + v37) = v38 + 1;
        v19 |= (unint64_t)(v39 & 0x7F) << v35;
        if ((v39 & 0x80) == 0)
          goto LABEL_63;
        v35 += 7;
        v14 = v36++ >= 9;
        if (v14)
        {
          v19 = 0;
          goto LABEL_65;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_63:
      if (*(_BYTE *)(a2 + *v5))
        v19 = 0;
LABEL_65:
      v40 = 8;
LABEL_66:
      *(_QWORD *)(a1 + v40) = v19;
    }
    while (*(_QWORD *)(a2 + *v3) < *(_QWORD *)(a2 + *v4));
  }
  return *(_BYTE *)(a2 + *v5) == 0;
}

void sub_1B6D8F7C4(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1B6D8FB84(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1B6D8FCB0(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1B6D8FE94(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

double CGImageSourceGetSize(CGImageSource *a1)
{
  CFDictionaryRef v1;
  void *v2;
  void *v3;
  void *v4;
  id v5;
  id v6;
  id v7;
  unsigned int v8;
  unsigned int v9;
  int v10;
  double v11;
  _DWORD v13[2];
  uint64_t v14;

  v14 = *MEMORY[0x1E0C80C00];
  v1 = CGImageSourceCopyPropertiesAtIndex(a1, 0, 0);
  -[__CFDictionary objectForKey:](v1, "objectForKey:", *MEMORY[0x1E0CBD048]);
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  -[__CFDictionary objectForKey:](v1, "objectForKey:", *MEMORY[0x1E0CBD040]);
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  -[__CFDictionary objectForKey:](v1, "objectForKey:", *MEMORY[0x1E0CBCFF0]);
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  v5 = v2;
  v6 = v3;
  v7 = v4;
  if (objc_msgSend(v5, "intValue") && objc_msgSend(v6, "intValue"))
  {
    if (!v7)
      goto LABEL_10;
    v8 = objc_msgSend(v7, "unsignedIntValue");
    v9 = v8;
    if (v8 - 9 <= 0xFFFFFFF7)
    {
      if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_DEFAULT))
      {
        v13[0] = 67109120;
        v13[1] = v9;
        _os_log_impl(&dword_1B6C4A000, MEMORY[0x1E0C81028], OS_LOG_TYPE_DEFAULT, "Orientation value %u invalid, assuming kCGImagePropertyOrientationUp", (uint8_t *)v13, 8u);
      }
      v10 = objc_msgSend(v5, "intValue");
      objc_msgSend(v6, "intValue");
      goto LABEL_12;
    }
    if (v8 > 4)
    {
      v10 = objc_msgSend(v6, "intValue");
      objc_msgSend(v5, "intValue");
    }
    else
    {
LABEL_10:
      v10 = objc_msgSend(v5, "intValue");
      objc_msgSend(v6, "intValue");
    }
LABEL_12:
    v11 = (double)v10;
    goto LABEL_13;
  }
  v11 = *MEMORY[0x1E0C9D820];
LABEL_13:

  return v11;
}

{
  CFDictionaryRef v1;
  NSNumber *v2;
  NSNumber *v3;
  NSNumber *v4;
  double v5;

  v1 = CGImageSourceCopyPropertiesAtIndex(a1, 0, 0);
  -[__CFDictionary objectForKey:](v1, "objectForKey:", *MEMORY[0x1E0CBD048]);
  v2 = (NSNumber *)objc_claimAutoreleasedReturnValue();
  -[__CFDictionary objectForKey:](v1, "objectForKey:", *MEMORY[0x1E0CBD040]);
  v3 = (NSNumber *)objc_claimAutoreleasedReturnValue();
  -[__CFDictionary objectForKey:](v1, "objectForKey:", *MEMORY[0x1E0CBCFF0]);
  v4 = (NSNumber *)objc_claimAutoreleasedReturnValue();
  v5 = CGSizeWithOrientation(v2, v3, v4);

  return v5;
}

void sub_1B6D90098(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;

  _Unwind_Resume(a1);
}

void sub_1B6D90138(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1B6D9019C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1B6D90234(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);

  _Unwind_Resume(a1);
}

void sub_1B6D902B0(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1B6D9032C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1B6D904B0(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_1B6D90538(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1B6D9079C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1B6D90804(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1B6D908C0(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1B6D90A30(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1B6D90F34(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  void *v16;

  _Unwind_Resume(a1);
}

void sub_1B6D912FC(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1B6D9152C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1B6D916BC(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1B6D917D8(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;

  v5 = v4;

  _Unwind_Resume(a1);
}

void sub_1B6D918DC(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1B6D919C8(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_1B6D91B58(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  _Unwind_Resume(a1);
}

void sub_1B6D91E18(_Unwind_Exception *a1, uint64_t a2, ...)
{
  const void *v3;
  va_list va;
  va_list va1;

  va_start(va1, a2);
  va_start(va, a2);
  v3 = va_arg(va1, const void *);
  CF<opaqueCMSampleBuffer *>::~CF((const void **)va);
  CF<opaqueCMSampleBuffer *>::~CF((const void **)va1);
  _Unwind_Resume(a1);
}

void sub_1B6D92DC0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, char a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,const void *a27)
{
  CVPixelBufferLock::~CVPixelBufferLock((CVPixelBufferLock *)&a15);
  CVPixelBufferLock::~CVPixelBufferLock((CVPixelBufferLock *)&a18);
  CF<opaqueCMSampleBuffer *>::~CF(&a27);
  _Unwind_Resume(a1);
}

void sub_1B6D9314C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1B6D93914(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, void *a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *a17, void *a18, uint64_t a19, void *a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,void *a25,void *a26)
{
  void *v26;
  void *v27;
  void *v28;

  _Unwind_Resume(a1);
}

void sub_1B6D93BE8(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_1B6D93C74(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_1B6D93DB4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, objc_super a10)
{
  void *v10;
  void *v11;
  void *v12;

  a10.super_class = (Class)VCPHomeResidentMaintenanceTask;
  -[_Unwind_Exception dealloc](&a10, sel_dealloc);
  _Unwind_Resume(a1);
}

void sub_1B6D941D0(_Unwind_Exception *a1)
{
  uint64_t v1;

  _Block_object_dispose((const void *)(v1 - 144), 8);
  _Unwind_Resume(a1);
}

uint64_t __Block_byref_object_copy__20(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void __Block_byref_object_dispose__20(uint64_t a1)
{

}

void sub_1B6D944B0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

Class ___ZL22getHMITaskServiceClassv_block_invoke(uint64_t a1)
{
  Class result;
  void *v3;

  if (!HomeAILibraryCore(char **)::frameworkLibrary)
  {
    HomeAILibraryCore(char **)::frameworkLibrary = _sl_dlopen();
    if (!HomeAILibraryCore(char **)::frameworkLibrary)
    {
      abort_report_np();
      goto LABEL_6;
    }
  }
  while (1)
  {
    result = objc_getClass("HMITaskService");
    *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = result;
    if (*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24))
      break;
LABEL_6:
    v3 = (void *)___ZL22getHMITaskServiceClassv_block_invoke_cold_1();
    free(v3);
  }
  getHMITaskServiceClass(void)::softClass = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24);
  return result;
}

void sub_1B6D9479C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *a16)
{
  void *v16;
  void *v17;
  void *v18;
  void *v19;
  void *v20;
  void *v21;

  _Unwind_Resume(a1);
}

void sub_1B6D948AC(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;

  _Unwind_Resume(a1);
}

void sub_1B6D94C28(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;

  _Unwind_Resume(a1);
}

void sub_1B6D953A0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *a26)
{

  _Unwind_Resume(a1);
}

void sub_1B6D955C4(_Unwind_Exception *exception_object)
{
  _Unwind_Resume(exception_object);
}

void sub_1B6D95780(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, void *a15, void *a16)
{
  void *v16;
  void *v17;
  void *v18;
  void *v19;

  _Unwind_Resume(a1);
}

void sub_1B6D95A04(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;

  _Unwind_Resume(a1);
}

void sub_1B6D95C2C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, uint64_t a14, void *a15, uint64_t a16, uint64_t a17, void *a18, uint64_t a19)
{
  if (__p)
    operator delete(__p);
  if (a15)
    operator delete(a15);
  if (a18)
    operator delete(a18);
  _Unwind_Resume(exception_object);
}

void sub_1B6D95D68(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1B6D95EDC(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1BCCA12BC](v1, 0x1030C405C6B8F91);
  _Unwind_Resume(a1);
}

void sub_1B6D96274(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_1B6D96608(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19)
{
  void *v19;
  void *v20;
  void *v21;
  void *v22;
  void *v23;
  void *v24;

  if (__p)
    operator delete(__p);
  _Unwind_Resume(a1);
}

char *std::vector<float>::__insert_with_size[abi:ne180100]<float *,float *>(uint64_t a1, uint64_t __dst, char *__src, char *a4, uint64_t a5)
{
  char *v5;
  char *v7;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  void *v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  int64_t v22;
  char *v23;
  char *v24;
  char *v25;
  char *v26;
  int v27;
  char *v28;
  uint64_t v29;
  char *v30;
  int v31;
  void *__p;
  char *v34;
  char *v35;
  char *v36;
  uint64_t v37;

  v5 = (char *)__dst;
  if (a5 < 1)
    return v5;
  v7 = __src;
  v11 = *(_QWORD *)(a1 + 16);
  v9 = a1 + 16;
  v10 = v11;
  v12 = *(_QWORD *)(v9 - 8);
  if (a5 > (uint64_t)(v11 - v12) >> 2)
  {
    v13 = *(void **)a1;
    v14 = a5 + ((uint64_t)(v12 - *(_QWORD *)a1) >> 2);
    if (v14 >> 62)
      std::vector<std::unique_ptr<VCPProtoKeypoint>>::__throw_length_error[abi:ne180100]();
    v15 = (__dst - (uint64_t)v13) >> 2;
    v16 = v10 - (_QWORD)v13;
    if (v16 >> 1 > v14)
      v14 = v16 >> 1;
    if ((unint64_t)v16 >= 0x7FFFFFFFFFFFFFFCLL)
      v17 = 0x3FFFFFFFFFFFFFFFLL;
    else
      v17 = v14;
    v37 = v9;
    if (v17)
      v18 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<float>>(v9, v17);
    else
      v18 = 0;
    v28 = &v18[4 * v15];
    __p = v18;
    v34 = v28;
    v36 = &v18[4 * v17];
    v29 = 4 * a5;
    v30 = &v28[4 * a5];
    do
    {
      v31 = *(_DWORD *)v7;
      v7 += 4;
      *(_DWORD *)v28 = v31;
      v28 += 4;
      v29 -= 4;
    }
    while (v29);
    v35 = v30;
    v5 = std::vector<float>::__swap_out_circular_buffer((void **)a1, (uint64_t)&__p, v5);
    if (v35 != v34)
      v35 += (v34 - v35 + 3) & 0xFFFFFFFFFFFFFFFCLL;
    if (__p)
      operator delete(__p);
    return v5;
  }
  v19 = v12 - __dst;
  v20 = (uint64_t)(v12 - __dst) >> 2;
  if (v20 >= a5)
  {
    v21 = &__src[4 * a5];
    v23 = *(char **)(v9 - 8);
LABEL_17:
    v24 = &v5[4 * a5];
    v25 = &v23[-4 * a5];
    v26 = v23;
    if ((unint64_t)v25 < v12)
    {
      v26 = v23;
      do
      {
        v27 = *(_DWORD *)v25;
        v25 += 4;
        *(_DWORD *)v26 = v27;
        v26 += 4;
      }
      while ((unint64_t)v25 < v12);
    }
    *(_QWORD *)(a1 + 8) = v26;
    if (v23 != v24)
      memmove(&v23[-4 * ((v23 - v24) >> 2)], v5, v23 - v24);
    if (v21 != v7)
      memmove(v5, v7, v21 - v7);
    return v5;
  }
  v21 = &__src[4 * v20];
  v22 = a4 - v21;
  if (a4 != v21)
    memmove(*(void **)(v9 - 8), &__src[4 * v20], a4 - v21);
  v23 = (char *)(v12 + v22);
  *(_QWORD *)(a1 + 8) = v12 + v22;
  if (v19 >= 1)
    goto LABEL_17;
  return v5;
}

void sub_1B6D9693C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

char *std::vector<double>::__insert_with_size[abi:ne180100]<std::__wrap_iter<double *>,std::__wrap_iter<double *>>(uint64_t a1, uint64_t __dst, char *__src, char *a4, uint64_t a5)
{
  char *v5;
  char *v7;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  void *v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  int64_t v22;
  char *v23;
  char *v24;
  char *v25;
  char *v26;
  uint64_t v27;
  char *v28;
  uint64_t v29;
  char *v30;
  uint64_t v31;
  void *__p;
  char *v34;
  char *v35;
  char *v36;
  uint64_t v37;

  v5 = (char *)__dst;
  if (a5 < 1)
    return v5;
  v7 = __src;
  v11 = *(_QWORD *)(a1 + 16);
  v9 = a1 + 16;
  v10 = v11;
  v12 = *(_QWORD *)(v9 - 8);
  if (a5 > (uint64_t)(v11 - v12) >> 3)
  {
    v13 = *(void **)a1;
    v14 = a5 + ((uint64_t)(v12 - *(_QWORD *)a1) >> 3);
    if (v14 >> 61)
      std::vector<std::unique_ptr<VCPProtoKeypoint>>::__throw_length_error[abi:ne180100]();
    v15 = (__dst - (uint64_t)v13) >> 3;
    v16 = v10 - (_QWORD)v13;
    if (v16 >> 2 > v14)
      v14 = v16 >> 2;
    if ((unint64_t)v16 >= 0x7FFFFFFFFFFFFFF8)
      v17 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v17 = v14;
    v37 = v9;
    if (v17)
      v18 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::unique_ptr<VCPProtoKeypoint>>>(v9, v17);
    else
      v18 = 0;
    v28 = &v18[8 * v15];
    __p = v18;
    v34 = v28;
    v36 = &v18[8 * v17];
    v29 = 8 * a5;
    v30 = &v28[8 * a5];
    do
    {
      v31 = *(_QWORD *)v7;
      v7 += 8;
      *(_QWORD *)v28 = v31;
      v28 += 8;
      v29 -= 8;
    }
    while (v29);
    v35 = v30;
    v5 = std::vector<double>::__swap_out_circular_buffer((void **)a1, (uint64_t)&__p, v5);
    if (v35 != v34)
      v35 += (v34 - v35 + 7) & 0xFFFFFFFFFFFFFFF8;
    if (__p)
      operator delete(__p);
    return v5;
  }
  v19 = v12 - __dst;
  v20 = (uint64_t)(v12 - __dst) >> 3;
  if (v20 >= a5)
  {
    v21 = &__src[8 * a5];
    v23 = *(char **)(v9 - 8);
LABEL_17:
    v24 = &v5[8 * a5];
    v25 = &v23[-8 * a5];
    v26 = v23;
    if ((unint64_t)v25 < v12)
    {
      v26 = v23;
      do
      {
        v27 = *(_QWORD *)v25;
        v25 += 8;
        *(_QWORD *)v26 = v27;
        v26 += 8;
      }
      while ((unint64_t)v25 < v12);
    }
    *(_QWORD *)(a1 + 8) = v26;
    if (v23 != v24)
      memmove(&v23[-8 * ((v23 - v24) >> 3)], v5, v23 - v24);
    if (v21 != v7)
      memmove(v5, v7, v21 - v7);
    return v5;
  }
  v21 = &__src[8 * v20];
  v22 = a4 - v21;
  if (a4 != v21)
    memmove(*(void **)(v9 - 8), &__src[8 * v20], a4 - v21);
  v23 = (char *)(v12 + v22);
  *(_QWORD *)(a1 + 8) = v12 + v22;
  if (v19 >= 1)
    goto LABEL_17;
  return v5;
}

void sub_1B6D96B48(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

char *std::vector<double>::__swap_out_circular_buffer(void **a1, uint64_t a2, char *__src)
{
  char *v5;
  char *v6;
  char *v7;
  char *v8;
  uint64_t v9;
  _BYTE *v10;
  uint64_t v11;
  int64_t v12;
  char *v13;
  void *v14;
  void *v15;

  v5 = *(char **)(a2 + 8);
  v6 = (char *)*a1;
  v7 = v5;
  if (*a1 != __src)
  {
    v8 = __src;
    v7 = *(char **)(a2 + 8);
    do
    {
      v9 = *((_QWORD *)v8 - 1);
      v8 -= 8;
      *((_QWORD *)v7 - 1) = v9;
      v7 -= 8;
    }
    while (v8 != v6);
  }
  *(_QWORD *)(a2 + 8) = v7;
  v10 = a1[1];
  v11 = *(_QWORD *)(a2 + 16);
  v12 = v10 - __src;
  if (v10 != __src)
  {
    memmove(*(void **)(a2 + 16), __src, v10 - __src);
    v7 = *(char **)(a2 + 8);
  }
  *(_QWORD *)(a2 + 16) = v11 + v12;
  v13 = (char *)*a1;
  *a1 = v7;
  *(_QWORD *)(a2 + 8) = v13;
  v14 = a1[1];
  a1[1] = *(void **)(a2 + 16);
  *(_QWORD *)(a2 + 16) = v14;
  v15 = a1[2];
  a1[2] = *(void **)(a2 + 24);
  *(_QWORD *)(a2 + 24) = v15;
  *(_QWORD *)a2 = *(_QWORD *)(a2 + 8);
  return v5;
}

uint64_t VCPProtoMovieActivityLevelResultReadFrom(uint64_t a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  char v14;
  uint64_t v16;
  int v17;
  VCPProtoTimeRange *v19;
  uint64_t v20;
  unint64_t v21;
  int v22;
  uint64_t result;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) < *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
  {
    v7 = (int *)MEMORY[0x1E0D82BB8];
    do
    {
      if (*(_BYTE *)(a2 + *v5))
        break;
      v8 = 0;
      v9 = 0;
      v10 = 0;
      while (1)
      {
        v11 = *v3;
        v12 = *(_QWORD *)(a2 + v11);
        v13 = v12 + 1;
        if (v12 == -1 || v13 > *(_QWORD *)(a2 + *v4))
          break;
        v14 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
        *(_QWORD *)(a2 + v11) = v13;
        v10 |= (unint64_t)(v14 & 0x7F) << v8;
        if ((v14 & 0x80) == 0)
          goto LABEL_12;
        v8 += 7;
        if (v9++ >= 9)
        {
          v10 = 0;
          v16 = *v5;
          v17 = *(unsigned __int8 *)(a2 + v16);
          goto LABEL_14;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
      v16 = *v5;
      v17 = *(unsigned __int8 *)(a2 + v16);
      if (*(_BYTE *)(a2 + v16))
        v10 = 0;
LABEL_14:
      if (v17 || (v10 & 7) == 4)
        break;
      if ((v10 >> 3) == 2)
      {
        v20 = *v3;
        v21 = *(_QWORD *)(a2 + v20);
        if (v21 <= 0xFFFFFFFFFFFFFFFBLL && v21 + 4 <= *(_QWORD *)(a2 + *v4))
        {
          v22 = *(_DWORD *)(*(_QWORD *)(a2 + *v7) + v21);
          *(_QWORD *)(a2 + v20) = v21 + 4;
        }
        else
        {
          *(_BYTE *)(a2 + v16) = 1;
          v22 = 0;
        }
        *(_DWORD *)(a1 + 8) = v22;
      }
      else if ((v10 >> 3) == 1)
      {
        v19 = objc_alloc_init(VCPProtoTimeRange);
        objc_storeStrong((id *)(a1 + 16), v19);
        if (!PBReaderPlaceMark() || !VCPProtoTimeRangeReadFrom((uint64_t)v19, a2))
        {

          return 0;
        }
        PBReaderRecallMark();

      }
      else
      {
        result = PBReaderSkipValueWithTag();
        if (!(_DWORD)result)
          return result;
      }
    }
    while (*(_QWORD *)(a2 + *v3) < *(_QWORD *)(a2 + *v4));
  }
  return *(_BYTE *)(a2 + *v5) == 0;
}

void sub_1B6D973F8(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;

  v5 = v4;

  _Unwind_Resume(a1);
}

void sub_1B6D975D0(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  v3 = v2;

  _Unwind_Resume(a1);
}

void sub_1B6D976A0(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1B6D97BBC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9, void *a10, void *a11, void *a12)
{
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  void *v16;

  _Unwind_Resume(a1);
}

void sub_1B6D97E7C(_Unwind_Exception *exception_object, int a2)
{
  const void *v2;
  id v3;

  if (a2 == 1)
  {
    v3 = objc_begin_catch(exception_object);
    if (v2)
      CFRelease(v2);

    objc_end_catch();
    JUMPOUT(0x1B6D97DA4);
  }
  _Unwind_Resume(exception_object);
}

void sub_1B6D98064(void *a1, int a2)
{
  uint64_t v2;

  objc_begin_catch(a1);
  if (a2 == 2)
    objc_end_catch();
  if (!v2)
    JUMPOUT(0x1B6D97FACLL);
  JUMPOUT(0x1B6D97FA0);
}

void sub_1B6D988F0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18)
{
  id v18;
  void *v19;
  void *v20;
  void *v21;
  void *v22;
  void *v23;
  id v24;

  if (a2)
  {
    if (a2 == 2)
    {
      v18 = objc_begin_catch(exception_object);
      v19 = (void *)MEMORY[0x1E0CB35C8];
      a17 = *MEMORY[0x1E0CB2D50];
      v20 = (void *)MEMORY[0x1E0CB3940];
      v24 = v18;
      objc_msgSend(v18, "reason");
      v23 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v20, "stringWithFormat:", CFSTR("VCPFaceCropUtils : newFaceCropFromImageData - %@"));
      v21 = (void *)objc_claimAutoreleasedReturnValue();
      a18 = (uint64_t)v21;
      objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", &a18, &a17, 1);
      v22 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v19, "errorWithDomain:code:userInfo:", *MEMORY[0x1E0CB2F90], -18, v22);
      objc_claimAutoreleasedReturnValue();

      objc_end_catch();
    }
    else
    {
      objc_begin_catch(exception_object);
    }
    JUMPOUT(0x1B6D986F4);
  }
  _Unwind_Resume(exception_object);
}

uint64_t getImagePropertiesFromCGImageSource(CGImageSource *a1, int *a2, size_t *a3, size_t *a4)
{
  uint64_t result;
  CGImage *ImageAtIndex;
  CFDictionaryRef v9;
  int v10;
  void *v11;
  void *v12;
  int v13;
  size_t Height;
  size_t Width;
  size_t v16;
  id v17;
  void *context;

  result = 0;
  if (a1 && a2 && a3 && a4)
  {
    context = (void *)MEMORY[0x1BCCA1B2C](0);
    ImageAtIndex = CGImageSourceCreateImageAtIndex(a1, 0, 0);
    if (!ImageAtIndex)
    {
      objc_msgSend(MEMORY[0x1E0C99DA0], "exceptionWithName:reason:userInfo:", *MEMORY[0x1E0C99750], CFSTR("could not create image ref"), 0);
      v17 = (id)objc_claimAutoreleasedReturnValue();
      objc_exception_throw(v17);
    }
    v9 = CGImageSourceCopyPropertiesAtIndex(a1, 0, 0);
    v10 = 1;
    -[__CFDictionary objectForKeyedSubscript:](v9, "objectForKeyedSubscript:", *MEMORY[0x1E0CBCFF0]);
    v11 = (void *)objc_claimAutoreleasedReturnValue();
    v12 = v11;
    if (v11)
      v10 = objc_msgSend(v11, "intValue");
    if ((v10 - 9) < 0xFFFFFFF8)
      v13 = 1;
    else
      v13 = v10;
    if (v13 > 4)
    {
      Height = CGImageGetHeight(ImageAtIndex);
      Width = CGImageGetWidth(ImageAtIndex);
    }
    else
    {
      Height = CGImageGetWidth(ImageAtIndex);
      Width = CGImageGetHeight(ImageAtIndex);
    }
    v16 = Width;

    CGImageRelease(ImageAtIndex);
    objc_autoreleasePoolPop(context);
    *a2 = v13;
    *a3 = Height;
    result = 1;
    *a4 = v16;
  }
  return result;
}

void sub_1B6D98C38(_Unwind_Exception *exception_object)
{
  char v1;

  if ((v1 & 1) != 0)
    objc_end_catch();
  _Unwind_Resume(exception_object);
}

void sub_1B6D98C64()
{
  JUMPOUT(0x1B6D98C70);
}

void sub_1B6D98C78()
{
  JUMPOUT(0x1B6D98C80);
}

double makeRectWithAllIntegers(double a1)
{
  if (a1 > 0.0)
    a1 = a1 + 0.5;
  return (double)(int)a1;
}

CGImageSource *createOrientedCroppedAndScaledImageFromCGImageSource(CGImageSource *a1, double a2, double a3, double a4, double a5, double a6)
{
  CGImageSource *v6;
  double v11;
  double v12;
  double v13;
  double v14;
  uint64_t v15;
  CFDictionaryRef v16;
  void *v17;
  void *v18;
  unsigned int v19;
  uint64_t v20;
  uint64_t v21;
  void *v22;
  const __CFDictionary *v23;
  CGImage *ImageAtIndex;
  CGImage *v25;
  size_t Width;
  size_t Height;
  size_t v28;
  size_t v29;
  double v30;
  CGFloat v31;
  CGFloat v32;
  double v33;
  double v34;
  CGFloat x;
  double y;
  double v37;
  double v38;
  void *v39;
  CGColorSpace *v40;
  CGImage *v41;
  id v42;
  CGContext *v43;
  CGImageRef Image;
  id v46;
  id v47;
  id v48;
  id v49;
  const __CFDictionary *v50;
  CFDictionaryRef v51;
  double v52;
  double v53;
  double v54;
  void *context;
  CGAffineTransform v56;
  CGAffineTransform transform;
  CGAffineTransform v58;
  CGAffineTransform v59;
  CGAffineTransform v60;
  _QWORD v61[2];
  _QWORD v62[4];
  CGRect v63;
  CGRect v64;
  CGRect v65;
  CGRect v66;

  v6 = a1;
  v62[2] = *MEMORY[0x1E0C80C00];
  if (a1)
  {
    v11 = a4 * a6 + 0.5;
    v12 = a5 * a6 + 0.5;
    v13 = (double)(unint64_t)v12;
    v53 = a5 / v13;
    v54 = a4 / (double)(unint64_t)v11;
    v14 = fmin(v54, a5 / v13);
    if (v14 <= 0.125)
    {
      v15 = 8;
    }
    else if (v14 <= 0.25)
    {
      v15 = 4;
    }
    else if (v14 <= 0.5)
    {
      v15 = 2;
    }
    else
    {
      v15 = 1;
    }
    context = (void *)MEMORY[0x1BCCA1B2C]();
    v16 = CGImageSourceCopyPropertiesAtIndex(v6, 0, 0);
    -[__CFDictionary objectForKeyedSubscript:](v16, "objectForKeyedSubscript:", *MEMORY[0x1E0CBCFF0]);
    v17 = (void *)objc_claimAutoreleasedReturnValue();
    v18 = v17;
    v51 = v16;
    if (v17)
      v19 = objc_msgSend(v17, "intValue");
    else
      v19 = 1;
    if (v19 - 9 < 0xFFFFFFF8)
      v20 = 1;
    else
      v20 = v19;
    v21 = *MEMORY[0x1E0CBD290];
    v61[0] = *MEMORY[0x1E0CBD240];
    v61[1] = v21;
    v62[0] = MEMORY[0x1E0C9AAA0];
    objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInt:", v15);
    v22 = (void *)objc_claimAutoreleasedReturnValue();
    v62[1] = v22;
    objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", v62, v61, 2);
    v23 = (const __CFDictionary *)objc_claimAutoreleasedReturnValue();

    ImageAtIndex = CGImageSourceCreateImageAtIndex(v6, 0, v23);
    v25 = ImageAtIndex;
    if (!ImageAtIndex)
    {
      objc_msgSend(MEMORY[0x1E0C99DA0], "exceptionWithName:reason:userInfo:", *MEMORY[0x1E0C99750], CFSTR("Could not create image for rendering"), 0);
      v46 = (id)objc_claimAutoreleasedReturnValue();
      objc_exception_throw(v46);
    }
    Width = CGImageGetWidth(ImageAtIndex);
    v50 = v23;
    v52 = (double)(unint64_t)v11;
    Height = CGImageGetHeight(v25);
    v28 = (unint64_t)v11;
    v29 = (unint64_t)v12;
    v30 = (double)(int)v15;
    v31 = (double)(int)(a2 / (double)(int)v15);
    v32 = (double)(int)(a3 / (double)(int)v15);
    v33 = (double)(int)(a4 / (double)(int)v15);
    v34 = (double)(int)(a5 / (double)(int)v15);
    memset(&v60, 0, sizeof(v60));
    makeOrientationTransform(v20, Width, Height, (uint64_t)&v59);
    CGAffineTransformInvert(&v60, &v59);
    v58 = v60;
    v63.origin.x = v31;
    v63.origin.y = v32;
    v63.size.width = v33;
    v63.size.height = v34;
    v64 = CGRectApplyAffineTransform(v63, &v58);
    x = v64.origin.x;
    y = v64.origin.y;
    v37 = v64.size.width;
    v38 = v64.size.height;
    v39 = malloc_type_malloc(4 * v28 * v29, 0xD8E04810uLL);
    if (!v39)
    {
      objc_msgSend(MEMORY[0x1E0C99DA0], "exceptionWithName:reason:userInfo:", *MEMORY[0x1E0C99750], CFSTR("Could not create buffer for rendering"), 0, v23, v51);
      v47 = (id)objc_claimAutoreleasedReturnValue();
      objc_exception_throw(v47);
    }
    v40 = CGColorSpaceCreateWithName((CFStringRef)*MEMORY[0x1E0C9DA10]);
    if (!v40)
    {
      objc_msgSend(MEMORY[0x1E0C99DA0], "exceptionWithName:reason:userInfo:", *MEMORY[0x1E0C99750], CFSTR("Could not create srgb colorspace"), 0, v23, v51);
      v48 = (id)objc_claimAutoreleasedReturnValue();
      objc_exception_throw(v48);
    }
    v65.origin.y = (double)Height - (y + v38);
    v65.origin.x = x;
    v65.size.width = v37;
    v65.size.height = v38;
    v41 = CGImageCreateWithImageInRect(v25, v65);
    if (!v41)
      v42 = (id)objc_msgSend(MEMORY[0x1E0C99DA0], "exceptionWithName:reason:userInfo:", *MEMORY[0x1E0C99750], CFSTR("Could not create cropped and subsampled image"), 0, v23, v51);
    v43 = CGBitmapContextCreate(v39, v28, v29, 8uLL, 4 * v28, v40, 0x2002u);
    if (!v43)
    {
      objc_msgSend(MEMORY[0x1E0C99DA0], "exceptionWithName:reason:userInfo:", *MEMORY[0x1E0C99750], CFSTR("Could not create bitmap context"), 0);
      v49 = (id)objc_claimAutoreleasedReturnValue();
      objc_exception_throw(v49);
    }
    memset(&v58, 0, sizeof(v58));
    CGAffineTransformMakeScale(&v58, v54 * v30, v53 * v30);
    if (v33 != v52 || v34 != v13)
    {
      CGAffineTransformMakeScale(&transform, v52 / v33, v13 / v34);
      v58 = transform;
    }
    transform = v58;
    CGContextConcatCTM(v43, &transform);
    memset(&transform, 0, sizeof(transform));
    makeOrientationTransform(v20, (unint64_t)v37, (unint64_t)v38, (uint64_t)&transform);
    v56 = transform;
    CGContextConcatCTM(v43, &v56);
    CGContextSetInterpolationQuality(v43, kCGInterpolationMedium);
    CGContextSetShouldAntialias(v43, 0);
    CGContextSetBlendMode(v43, kCGBlendModeCopy);
    v66.origin.x = 0.0;
    v66.origin.y = 0.0;
    v66.size.width = v37;
    v66.size.height = v38;
    CGContextDrawImage(v43, v66, v41);
    Image = CGBitmapContextCreateImage(v43);

    free(v39);
    v6 = Image;
    CGColorSpaceRelease(v40);
    CGContextRelease(v43);
    if (v41)
      CGImageRelease(v41);
    if (v25)
      CGImageRelease(v25);
    objc_autoreleasePoolPop(context);
  }
  return v6;
}

void sub_1B6D992D0(_Unwind_Exception *exc_buf, int a2)
{
  if (a2)
  {
    objc_begin_catch(exc_buf);
    if (a2 == 2)
      objc_end_catch();
    JUMPOUT(0x1B6D99144);
  }
  _Unwind_Resume(exc_buf);
}

void sub_1B6D9977C(_Unwind_Exception *a1)
{
  objc_end_catch();
  _Unwind_Resume(a1);
}

void sub_1B6D99A5C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13)
{
  char v13;

  if ((v13 & 1) != 0)
    objc_end_catch();
  _Unwind_Resume(exception_object);
}

void sub_1B6D99DE8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, __int128 a11, __int128 a12, __int128 a13, __int128 a14, uint64_t a15, uint64_t a16)
{
  _QWORD *v16;
  void *v17;
  uint64_t v18;
  id v19;
  void *v20;
  void *v21;
  void *v22;
  void *v23;
  void *v24;
  void *v25;

  if (a2 == 1)
  {
    v19 = objc_begin_catch(exception_object);
    v20 = (void *)MEMORY[0x1E0CB35C8];
    a16 = *MEMORY[0x1E0CB2D50];
    v21 = (void *)MEMORY[0x1E0CB3940];
    objc_msgSend(v19, "reason");
    v25 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v21, "stringWithFormat:", CFSTR("VCPFaceCropUtils:faceBoundsFromFaceCrop -- %@"));
    v22 = (void *)objc_claimAutoreleasedReturnValue();
    *(_QWORD *)(v18 - 80) = v22;
    objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", v18 - 80, &a16, 1);
    v23 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v20, "errorWithDomain:code:userInfo:", *MEMORY[0x1E0CB2F90], -18, v23);
    v24 = (void *)objc_claimAutoreleasedReturnValue();

    objc_end_catch();
    objc_autoreleasePoolPop(v17);
    if (v16)
    {
      if (v24)
        *v16 = objc_retainAutorelease(v24);
    }
    JUMPOUT(0x1B6D99D6CLL);
  }
  _Unwind_Resume(exception_object);
}

void sub_1B6D9A020(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, __int128 a11, __int128 a12, __int128 a13, __int128 a14, uint64_t a15, uint64_t a16)
{
  _QWORD *v16;
  void *v17;
  uint64_t v18;
  id v19;
  void *v20;
  void *v21;
  void *v22;
  void *v23;
  void *v24;
  void *v25;

  if (a2 == 1)
  {
    v19 = objc_begin_catch(exception_object);
    v20 = (void *)MEMORY[0x1E0CB35C8];
    a16 = *MEMORY[0x1E0CB2D50];
    v21 = (void *)MEMORY[0x1E0CB3940];
    objc_msgSend(v19, "reason");
    v25 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v21, "stringWithFormat:", CFSTR("VCPFaceCropUtils:cropBoundsInOriginalImageFromFaceCrop -- %@"));
    v22 = (void *)objc_claimAutoreleasedReturnValue();
    *(_QWORD *)(v18 - 80) = v22;
    objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", v18 - 80, &a16, 1);
    v23 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v20, "errorWithDomain:code:userInfo:", *MEMORY[0x1E0CB2F90], -18, v23);
    v24 = (void *)objc_claimAutoreleasedReturnValue();

    objc_end_catch();
    objc_autoreleasePoolPop(v17);
    if (v16)
    {
      if (v24)
        *v16 = objc_retainAutorelease(v24);
    }
    JUMPOUT(0x1B6D99FA4);
  }
  _Unwind_Resume(exception_object);
}

void sub_1B6D9A4D8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15)
{
  char v15;

  if ((v15 & 1) != 0)
    objc_end_catch();
  _Unwind_Resume(exception_object);
}

uint64_t makeOrientationTransform@<X0>(uint64_t result@<X0>, unint64_t a2@<X1>, unint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v4;
  __int128 v5;
  double v6;
  double v7;
  double v8;
  double v9;

  v4 = MEMORY[0x1E0C9BAA8];
  v5 = *(_OWORD *)(MEMORY[0x1E0C9BAA8] + 16);
  *(_OWORD *)a4 = *MEMORY[0x1E0C9BAA8];
  *(_OWORD *)(a4 + 16) = v5;
  *(_OWORD *)(a4 + 32) = *(_OWORD *)(v4 + 32);
  switch((int)result)
  {
    case 1:
      *(_QWORD *)a4 = 0x3FF0000000000000;
      *(_QWORD *)(a4 + 8) = 0;
      *(_QWORD *)(a4 + 16) = 0;
      *(_QWORD *)(a4 + 24) = 0x3FF0000000000000;
      goto LABEL_11;
    case 2:
      v6 = (double)a2;
      *(_QWORD *)a4 = 0xBFF0000000000000;
      *(_QWORD *)(a4 + 8) = 0;
      *(_QWORD *)(a4 + 16) = 0;
      *(_QWORD *)(a4 + 24) = 0x3FF0000000000000;
      goto LABEL_13;
    case 3:
      v7 = (double)a2;
      v8 = (double)a3;
      *(_QWORD *)a4 = 0xBFF0000000000000;
      *(_QWORD *)(a4 + 8) = 0;
      *(_QWORD *)(a4 + 16) = 0;
      *(_QWORD *)(a4 + 24) = 0xBFF0000000000000;
      goto LABEL_7;
    case 4:
      v9 = (double)a3;
      *(_QWORD *)(a4 + 8) = 0;
      *(_QWORD *)(a4 + 16) = 0;
      *(_QWORD *)a4 = 0x3FF0000000000000;
      *(_OWORD *)(a4 + 24) = xmmword_1B6FBCA30;
      goto LABEL_9;
    case 5:
      v7 = (double)a3;
      v8 = (double)a2;
      *(_OWORD *)a4 = xmmword_1B6FBCBF0;
      *(_OWORD *)(a4 + 16) = xmmword_1B6FBCA30;
LABEL_7:
      *(double *)(a4 + 32) = v7;
      *(double *)(a4 + 40) = v8;
      break;
    case 6:
      v9 = (double)a2;
      *(_OWORD *)a4 = xmmword_1B6FBCBF0;
      *(_QWORD *)(a4 + 24) = 0;
      *(_QWORD *)(a4 + 32) = 0;
      *(_QWORD *)(a4 + 16) = 0x3FF0000000000000;
LABEL_9:
      *(double *)(a4 + 40) = v9;
      break;
    case 7:
      *(_OWORD *)a4 = xmmword_1B6FBD470;
      *(_QWORD *)(a4 + 16) = 0x3FF0000000000000;
      *(_QWORD *)(a4 + 24) = 0;
LABEL_11:
      *(_QWORD *)(a4 + 32) = 0;
      *(_QWORD *)(a4 + 40) = 0;
      break;
    case 8:
      v6 = (double)a3;
      *(_OWORD *)a4 = xmmword_1B6FBD470;
      *(_OWORD *)(a4 + 16) = xmmword_1B6FBCA30;
LABEL_13:
      *(double *)(a4 + 32) = v6;
      *(_QWORD *)(a4 + 40) = 0;
      break;
    default:
      return result;
  }
  return result;
}

void sub_1B6D9A7FC(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1B6D9A9E0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15, void *a16)
{
  void *v16;
  void *v17;
  void *v18;
  void *v19;

  _Unwind_Resume(a1);
}

void sub_1B6D9ABD4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1B6D9AE40(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  _Unwind_Resume(a1);
}

void sub_1B6D9C188(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1B6D9C2DC(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_1B6D9C46C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  _Unwind_Resume(a1);
}

void sub_1B6D9C568(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_1B6D9C624(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_1B6D9CF54(_Unwind_Exception *a1, uint64_t a2, void *a3, void *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, ...)
{
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  va_list va;

  va_start(va, a12);

  CF<opaqueCMSampleBuffer *>::~CF((const void **)va);
  _Unwind_Resume(a1);
}

void sub_1B6D9D32C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_1B6D9D4CC(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_1B6D9D5C4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  v3 = v2;

  _Unwind_Resume(a1);
}

void sub_1B6D9D704(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_1B6D9D9CC(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1B6D9DB94(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  void *v14;

  _Unwind_Resume(a1);
}

uint64_t VCPProtoMovieInterestingnessResultReadFrom(uint64_t a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  char v14;
  uint64_t v16;
  int v17;
  VCPProtoTimeRange *v19;
  uint64_t v20;
  unint64_t v21;
  int v22;
  uint64_t result;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) < *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
  {
    v7 = (int *)MEMORY[0x1E0D82BB8];
    do
    {
      if (*(_BYTE *)(a2 + *v5))
        break;
      v8 = 0;
      v9 = 0;
      v10 = 0;
      while (1)
      {
        v11 = *v3;
        v12 = *(_QWORD *)(a2 + v11);
        v13 = v12 + 1;
        if (v12 == -1 || v13 > *(_QWORD *)(a2 + *v4))
          break;
        v14 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
        *(_QWORD *)(a2 + v11) = v13;
        v10 |= (unint64_t)(v14 & 0x7F) << v8;
        if ((v14 & 0x80) == 0)
          goto LABEL_12;
        v8 += 7;
        if (v9++ >= 9)
        {
          v10 = 0;
          v16 = *v5;
          v17 = *(unsigned __int8 *)(a2 + v16);
          goto LABEL_14;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
      v16 = *v5;
      v17 = *(unsigned __int8 *)(a2 + v16);
      if (*(_BYTE *)(a2 + v16))
        v10 = 0;
LABEL_14:
      if (v17 || (v10 & 7) == 4)
        break;
      if ((v10 >> 3) == 2)
      {
        v20 = *v3;
        v21 = *(_QWORD *)(a2 + v20);
        if (v21 <= 0xFFFFFFFFFFFFFFFBLL && v21 + 4 <= *(_QWORD *)(a2 + *v4))
        {
          v22 = *(_DWORD *)(*(_QWORD *)(a2 + *v7) + v21);
          *(_QWORD *)(a2 + v20) = v21 + 4;
        }
        else
        {
          *(_BYTE *)(a2 + v16) = 1;
          v22 = 0;
        }
        *(_DWORD *)(a1 + 8) = v22;
      }
      else if ((v10 >> 3) == 1)
      {
        v19 = objc_alloc_init(VCPProtoTimeRange);
        objc_storeStrong((id *)(a1 + 16), v19);
        if (!PBReaderPlaceMark() || !VCPProtoTimeRangeReadFrom((uint64_t)v19, a2))
        {

          return 0;
        }
        PBReaderRecallMark();

      }
      else
      {
        result = PBReaderSkipValueWithTag();
        if (!(_DWORD)result)
          return result;
      }
    }
    while (*(_QWORD *)(a2 + *v3) < *(_QWORD *)(a2 + *v4));
  }
  return *(_BYTE *)(a2 + *v5) == 0;
}

void sub_1B6D9E75C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11, void *a12)
{
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  void *v16;
  void *v17;

  _Unwind_Resume(a1);
}

void sub_1B6D9EDC0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, ...)
{
  void *v14;
  va_list va;

  va_start(va, a14);

  CVPixelBufferLock::~CVPixelBufferLock((CVPixelBufferLock *)va);
  _Unwind_Resume(a1);
}

void sub_1B6D9EF20(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1B6D9F008(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1B6D9F088(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, objc_super a9)
{
  a9.super_class = (Class)VCPVideoStabilizer;
  -[_Unwind_Exception dealloc](&a9, sel_dealloc);
  _Unwind_Resume(a1);
}

void sub_1B6D9FCA4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, void *a14, void *a15, void *a16)
{
  void *v16;
  void *v17;

  _Unwind_Resume(a1);
}

void sub_1B6DA06CC(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_1B6DA136C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  CF<opaqueCMSampleBuffer *>::~CF((const void **)va);
  _Unwind_Resume(a1);
}

void sub_1B6DA13D0()
{
  JUMPOUT(0x1B6DA13C8);
}

void sub_1B6DA1CDC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,char a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,const void *a33)
{
  const void **v33;
  void *v34;

  CF<opaqueCMSampleBuffer *>::~CF(&a33);

  _Block_object_dispose(&a24, 8);
  CF<opaqueCMSampleBuffer *>::~CF(v33);
  _Unwind_Resume(a1);
}

uint64_t __Block_byref_object_copy__21(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 48) = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a2 + 48) = 0;
  return result;
}

const void **__Block_byref_object_dispose__21(uint64_t a1)
{
  return CF<opaqueCMSampleBuffer *>::~CF((const void **)(a1 + 48));
}

uint64_t __Block_byref_object_copy__22(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void __Block_byref_object_dispose__22(uint64_t a1)
{

}

void sub_1B6DA2CB8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15)
{
  _Unwind_Resume(exception_object);
}

void sub_1B6DA459C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1B6DA4C9C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15, void *a16, void *a17, void *a18, void *a19, void *a20,void *a21,void *a22,void *a23)
{
  void *v23;
  void *v24;
  void *v25;
  void *v26;
  void *v27;

  _Unwind_Resume(a1);
}

void sub_1B6DA4F0C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_1B6DA522C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;

  _Unwind_Resume(a1);
}

void DspLibBiquad::DspLibBiquad(DspLibBiquad *this, int a2, int a3, uint64_t a4)
{
  uint64_t v5;
  _QWORD *v6;

  *((_DWORD *)this + 6) = a2;
  *((_DWORD *)this + 7) = a3;
  *((_QWORD *)this + 4) = a4;
  *(_QWORD *)this = operator new[]();
  *((_QWORD *)this + 1) = operator new[]();
  *((_QWORD *)this + 2) = operator new[]();
  v5 = *((unsigned int *)this + 7);
  if ((_DWORD)v5)
  {
    v6 = (_QWORD *)(*(_QWORD *)this + 20);
    do
    {
      *v6 = 0;
      v6[1] = 0;
      v6 = (_QWORD *)((char *)v6 + 52);
      --v5;
    }
    while (v5);
  }
}

DspLibBiquad *DspLibBiquad::resetState(DspLibBiquad *this)
{
  uint64_t v1;
  _QWORD *v2;

  v1 = *((unsigned int *)this + 7);
  if ((_DWORD)v1)
  {
    v2 = (_QWORD *)(*(_QWORD *)this + 20);
    do
    {
      *v2 = 0;
      v2[1] = 0;
      v2 = (_QWORD *)((char *)v2 + 52);
      --v1;
    }
    while (v1);
  }
  return this;
}

void DspLibBiquad::~DspLibBiquad(DspLibBiquad *this)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v2 = *(_QWORD *)this;
  if (v2)
    MEMORY[0x1BCCA128C](v2, 0x1000C803884A0CCLL);
  v3 = *((_QWORD *)this + 1);
  if (v3)
    MEMORY[0x1BCCA128C](v3, 0x1000C8052888210);
  v4 = *((_QWORD *)this + 2);
  if (v4)
    MEMORY[0x1BCCA128C](v4, 0x1000C8052888210);
}

DspLibBiquad *DspLibBiquad::setBiquadCoefficients(DspLibBiquad *this, unsigned int a2, float64_t a3, double a4, float64x2_t a5, float64_t a6, float64x2_t a7)
{
  uint64_t v7;
  float32_t v8;
  float32x4_t *v9;
  uint64_t v10;
  _QWORD *v11;

  a7.f64[1] = a3;
  a5.f64[1] = a6;
  v7 = *(_QWORD *)this;
  v8 = a4;
  v9 = (float32x4_t *)(*(_QWORD *)this + 52 * a2);
  v9[1].f32[0] = v8;
  *v9 = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(a5), a7);
  v10 = *((unsigned int *)this + 7);
  if ((_DWORD)v10)
  {
    v11 = (_QWORD *)(v7 + 20);
    do
    {
      *v11 = 0;
      v11[1] = 0;
      v11 = (_QWORD *)((char *)v11 + 52);
      --v10;
    }
    while (v10);
  }
  return this;
}

float DspLibBiquad::biquadProcess(DspLibBiquad *this, const float *__A, float *a3, int64_t __N)
{
  unint64_t v6;
  uint64_t v9;
  unint64_t v10;
  int64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  float result;
  float __B;

  if (*((_QWORD *)this + 4) >= __N)
  {
    v6 = *((unsigned int *)this + 7);
    if ((_DWORD)v6)
    {
      v9 = 0;
      v10 = 0;
      v11 = __N + 1;
      v12 = *((_QWORD *)this + 1);
      do
      {
        __B = 0.0;
        vDSP_vsadd(__A, v6, &__B, (float *)(v12 + 8), 1, __N);
        v13 = *((_QWORD *)this + 1);
        v14 = *(_QWORD *)this + v9;
        *(_DWORD *)v13 = *(_DWORD *)(v14 + 20);
        *(_DWORD *)(v13 + 4) = *(_DWORD *)(v14 + 24);
        v15 = *((_QWORD *)this + 2);
        *(_DWORD *)v15 = *(_DWORD *)(v14 + 28);
        *(_DWORD *)(v15 + 4) = *(_DWORD *)(v14 + 32);
        vDSP_deq22((const float *)v13, 1, (const float *)v14, (float *)v15, 1, __N);
        vDSP_vsadd(*((const float **)this + 2), 1, &__B, a3, *((unsigned int *)this + 7), __N);
        v12 = *((_QWORD *)this + 1);
        v16 = *(_QWORD *)this + v9;
        *(_DWORD *)(v16 + 20) = *(_DWORD *)(v12 + 4 * __N);
        *(_DWORD *)(v16 + 24) = *(_DWORD *)(v12 + 4 * v11);
        v17 = *((_QWORD *)this + 2);
        *(_DWORD *)(v16 + 28) = *(_DWORD *)(v17 + 4 * __N);
        result = *(float *)(v17 + 4 * v11);
        *(float *)(v16 + 32) = result;
        ++v10;
        v6 = *((unsigned int *)this + 7);
        ++__A;
        v9 += 52;
        ++a3;
      }
      while (v10 < v6);
    }
  }
  return result;
}

uint64_t VCPSceneprintDescriptorWrapper::Initialize(void ***this, __CVBuffer *a2)
{
  void **v4;
  uint64_t v5;
  void *v6;

  if (!*this)
  {
    v4 = (void **)operator new(8uLL, MEMORY[0x1E0DE4E10]);
    if (!v4)
    {
      *this = 0;
      return 4294967188;
    }
    *v4 = 0;
    *this = v4;
  }
  +[VCPSceneprintDescriptor descriptorWithImage:](VCPSceneprintDescriptor, "descriptorWithImage:", a2);
  v5 = objc_claimAutoreleasedReturnValue();
  v6 = **this;
  **this = (void *)v5;

  if (**this)
    return 0;
  else
    return 4294967188;
}

void sub_1B6DA572C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1B6DA57EC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  void *v14;

  _Unwind_Resume(a1);
}

void sub_1B6DA58A0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  void *v14;

  _Unwind_Resume(a1);
}

void sub_1B6DA5934(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_1B6DA5A30(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  _Unwind_Resume(a1);
}

void sub_1B6DA5B88(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  char v5;
  void *v6;
  void *v7;

  if ((v5 & 1) != 0)
  _Unwind_Resume(a1);
}

void sub_1B6DA5C78(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1B6DA5D4C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1B6DA5DC4(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1B6DA5E70(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  v3 = v2;

  _Unwind_Resume(a1);
}

void sub_1B6DA5F1C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1B6DA5F94(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1B6DA6038(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1B6DA60FC(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1B6DA620C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1B6DA63B0(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1B6DA6438(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1B6DA6568(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1B6DA6730(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1B6DA6960(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, _Unwind_Exception *exception_object)
{
  void *v10;
  void *v11;
  void *v12;

  _Unwind_Resume(a1);
}

void sub_1B6DA6D58(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9, void *a10, void *a11, void *a12, void *a13, uint64_t a14, void *a15)
{
  void *v15;
  void *v16;

  _Unwind_Resume(a1);
}

void sub_1B6DA70EC(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  _Unwind_Resume(a1);
}

uint64_t __Block_byref_object_copy__23(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void __Block_byref_object_dispose__23(uint64_t a1)
{

}

void sub_1B6DA731C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_1B6DA74C4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15, void *a16, void *a17, void *a18)
{
  void *v18;
  void *v19;
  void *v20;
  void *v21;

  _Unwind_Resume(a1);
}

void sub_1B6DA7628(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, void *a15, void *a16)
{
  void *v16;
  void *v17;
  void *v18;
  void *v19;

  v19 = v18;

  _Unwind_Resume(a1);
}

void sub_1B6DA7748(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;
  void *v11;

  _Unwind_Resume(a1);
}

void sub_1B6DA7ACC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, uint64_t a11, void *a12, void *a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,char a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,id a36,char a37)
{
  void *v37;

  _Block_object_dispose(&a31, 8);
  _Block_object_dispose(&a37, 8);

  _Unwind_Resume(a1);
}

void sub_1B6DA7BE8(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1B6DA8390(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, void *a14, void *a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *a20,void *a21)
{
  void *v21;
  void *v22;
  void *v23;
  void *v24;

  _Unwind_Resume(a1);
}

void sub_1B6DA868C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;
  void *v11;

  _Unwind_Resume(a1);
}

void sub_1B6DA87E4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  v4 = v3;

  _Unwind_Resume(a1);
}

void sub_1B6DA8928(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  v4 = v3;

  _Unwind_Resume(a1);
}

void sub_1B6DA8A84(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, void *a6, void *a7, uint64_t a8, uint64_t a9, ...)
{
  void *v9;
  void *v10;
  void *v11;
  va_list va;

  va_start(va, a9);

  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1B6DA8BB4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, void *a14)
{
  void *v14;

  _Unwind_Resume(a1);
}

void sub_1B6DA8D20(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1B6DA9060(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  _Unwind_Resume(a1);
}

void sub_1B6DA9640(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18)
{
  void *v18;

  _Unwind_Resume(a1);
}

void sub_1B6DA97F8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;
  void *v11;
  void *v12;

  v12 = v11;

  _Unwind_Resume(a1);
}

void sub_1B6DA9C24(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, void *a14)
{
  void *v14;
  void *v15;
  void *v16;
  void *v17;
  void *v18;

  _Unwind_Resume(a1);
}

void sub_1B6DA9F4C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, _Unwind_Exception *exception_object, void *a10)
{
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;

  _Unwind_Resume(a1);
}

void sub_1B6DAA434(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, void *a11, void *a12, uint64_t a13, void *a14, void *a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,void *a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,void *a36,void *a37,void *a38,void *a39,void *a40,void *a41)
{
  void *v41;
  void *v42;
  void *v43;
  void *v44;
  void *v45;

  _Unwind_Resume(a1);
}

void sub_1B6DAA9D8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, void *a15, uint64_t a16, void *a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void *a22,void *a23,void *a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,void *a29,void *a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,void *a35,void *a36,void *a37)
{
  void *v37;
  void *v38;
  void *v39;
  void *v40;
  void *v41;
  uint64_t v42;

  _Unwind_Resume(a1);
}

void sub_1B6DAABA8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void sub_1B6DAAC28(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void sub_1B6DAACC0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;
  void *v11;
  void *v12;

  v12 = v11;

  _Unwind_Resume(a1);
}

void sub_1B6DAAD9C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, void *a14)
{
  void *v14;

  _Unwind_Resume(a1);
}

void sub_1B6DAAE3C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;
  void *v11;
  void *v12;

  v12 = v11;

  _Unwind_Resume(a1);
}

void sub_1B6DAAEB0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_1B6DAAF08(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_1B6DAAFD8(_Unwind_Exception *exception_object)
{
  _Unwind_Resume(exception_object);
}

void sub_1B6DAB0E4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1B6DAC2E8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *a16, uint64_t a17, uint64_t a18, void *a19, void *a20,void *a21,void *a22,void *a23,void *a24,void *a25,uint64_t a26,void *a27,void *a28,void *a29,void *a30,void *a31,void *a32,void *a33,void *a34,void *a35,void *a36,void *a37,void *a38,void *a39,void *a40,uint64_t a41,void *a42,_Unwind_Exception *exception_objecta,void *a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,void *a52,void *a53,void *a54,void *a55,void *a56,void *a57,void *a58,void *a59,void *a60,uint64_t a61,void *a62,void *a63)
{
  void *a64;
  void *v64;
  void *v65;
  void *v66;

  _Unwind_Resume(a1);
}

void sub_1B6DAC93C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_1B6DACA3C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;
  void *v11;

  v11 = v10;

  _Unwind_Resume(a1);
}

void sub_1B6DACFEC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9)
{
  void *v9;
  void *v10;
  void *v11;

  _Unwind_Resume(a1);
}

void sub_1B6DAD2D8(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_1B6DAD3F8(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1B6DAD484(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_1B6DAD55C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1B6DAD63C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1B6DAE2EC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18, void *a19, uint64_t a20,void *a21,void *a22,void *a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,void *a28,uint64_t a29,void *a30,uint64_t a31,uint64_t a32,uint64_t a33,void *a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,void *a46,void *a47,void *a48,void *a49,void *a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  void *a64;
  void *a65;
  void *v65;
  void *v66;
  void *v67;
  void *v68;

  _Unwind_Resume(a1);
}

void sub_1B6DAE614(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1B6DAE6BC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_1B6DAE810(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_1B6DAE94C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1B6DAEDAC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12)
{
  void *v12;
  void *v13;

  _Unwind_Resume(a1);
}

void sub_1B6DAEFEC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  void *v14;

  _Unwind_Resume(a1);
}

void sub_1B6DAF160(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1B6DAF29C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  void *v14;
  void *v15;
  void *v16;
  void *v17;

  _Unwind_Resume(a1);
}

void sub_1B6DAFAF4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *a17, void *a18, uint64_t a19, uint64_t a20,void *a21,void *a22,void *a23,uint64_t a24,void *a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,void *a31,uint64_t a32,void *a33,void *a34)
{
  void *v34;
  void *v35;
  void *v36;
  void *v37;
  void *v38;

  _Unwind_Resume(a1);
}

void sub_1B6DAFE34(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1B6DB02BC(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1B6DB0514(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1B6DB06D4(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1B6DB0894(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1B6DB293C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,void *a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,void *a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,void *a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,void *a62)
{
  void *v62;

  _Unwind_Resume(a1);
}

void sub_1B6DB3154(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  _Unwind_Resume(a1);
}

void sub_1B6DB364C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, void *a11, void *a12, void *a13, void *a14, void *a15, void *a16)
{
  void *v16;
  void *v17;

  _Unwind_Resume(a1);
}

void sub_1B6DB3C58(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *a16)
{
  void *v16;
  void *v17;

  _Unwind_Resume(a1);
}

void sub_1B6DB3FF4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, void *a11)
{
  void *v11;

  _Unwind_Resume(a1);
}

void sub_1B6DB437C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, uint64_t a11, void *a12, void *a13)
{
  void *v13;

  _Unwind_Resume(a1);
}

void sub_1B6DB44F8(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  v4 = v3;

  _Unwind_Resume(a1);
}

void sub_1B6DB4C98(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15, void *a16, void *a17, void *a18, uint64_t a19, void *a20,void *a21,void *a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,void *a35,uint64_t a36,void *a37,void *a38,void *a39,void *a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,void *a47,void *a48)
{
  void *v48;
  void *v49;
  void *v50;
  void *v51;
  void *v52;

  _Unwind_Resume(a1);
}

void AddMergeCandidatePersonsForPerson(void *a1, void *a2, void *a3, void *a4)
{
  id v7;
  id v8;
  id v9;
  uint64_t v10;
  id v11;
  uint64_t v12;
  uint64_t v13;
  const __CFString *v14;
  uint64_t i;
  void *v16;
  void *v17;
  __CFString *v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  _BYTE v23[128];
  uint64_t v24;

  v24 = *MEMORY[0x1E0C80C00];
  v7 = a1;
  v8 = a2;
  v9 = a3;
  v18 = a4;
  v10 = objc_msgSend(v8, "count");
  if (v9 && v10)
  {
    v21 = 0u;
    v22 = 0u;
    v19 = 0u;
    v20 = 0u;
    v11 = v8;
    v12 = objc_msgSend(v11, "countByEnumeratingWithState:objects:count:", &v19, v23, 16);
    if (v12)
    {
      v13 = *(_QWORD *)v20;
      if (v18)
        v14 = v18;
      else
        v14 = CFSTR("not known");
      do
      {
        for (i = 0; i != v12; ++i)
        {
          if (*(_QWORD *)v20 != v13)
            objc_enumerationMutation(v11);
          v16 = *(void **)(*((_QWORD *)&v19 + 1) + 8 * i);
          if ((objc_msgSend(v16, "isEqualToString:", v9) & 1) == 0)
          {
            +[VCPMergeCandidatePair mergeCandidatePairWithPerson:andPerson:reason:](VCPMergeCandidatePair, "mergeCandidatePairWithPerson:andPerson:reason:", v9, v16, v14);
            v17 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend(v7, "addObject:", v17);

          }
        }
        v12 = objc_msgSend(v11, "countByEnumeratingWithState:objects:count:", &v19, v23, 16);
      }
      while (v12);
    }

  }
}

void sub_1B6DB4FF4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{
  void *v10;
  void *v11;
  void *v12;
  void *v13;

  _Unwind_Resume(a1);
}

void sub_1B6DB527C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, void *a11, void *a12)
{
  void *v12;

  _Unwind_Resume(a1);
}

void sub_1B6DB55B0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11, void *a12, void *a13, void *a14)
{
  void *v14;
  void *v15;
  void *v16;
  void *v17;
  void *v18;
  void *v19;

  _Unwind_Resume(a1);
}

void sub_1B6DB5720(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, void *a14)
{

  _Unwind_Resume(a1);
}

void sub_1B6DB5884(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;

  v6 = v4;

  _Unwind_Resume(a1);
}

void sub_1B6DB5AC8(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_1B6DB5CF8(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  _Unwind_Resume(a1);
}

void sub_1B6DB6028(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9, void *a10, void *a11)
{
  void *v11;
  void *v12;

  _Unwind_Resume(a1);
}

void sub_1B6DB66EC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11, void *a12, void *a13, void *a14, void *a15, void *a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void *a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,void *a33,void *a34)
{
  void *v34;
  void *v35;
  void *v36;
  void *v37;

  _Unwind_Resume(a1);
}

void sub_1B6DB687C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_1B6DB6D40(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9, void *a10, uint64_t a11, uint64_t a12, void *a13)
{
  void *v13;
  void *v14;

  _Unwind_Resume(a1);
}

void sub_1B6DB7704(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,void *a21,void *a22,void *a23,void *a24,void *a25,uint64_t a26,void *a27,uint64_t a28,uint64_t a29,void *a30,void *a31,void *a32,void *a33,void *a34,void *a35,void *a36,void *a37,void *a38,void *a39)
{
  void *v39;
  void *v40;

  _Unwind_Resume(a1);
}

void sub_1B6DB7C88(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, void *a13, void *a14, void *a15, void *a16)
{
  void *v16;
  void *v17;
  void *v18;
  void *v19;

  _Unwind_Resume(a1);
}

void sub_1B6DB8548(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *a16, void *a17, void *a18, void *a19, void *a20,void *a21,void *a22,void *a23,uint64_t a24,void *a25,void *a26,void *a27,void *a28,void *a29,void *a30,void *a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,void *a37,void *a38,void *a39,void *a40,void *a41,void *a42,void *a43,uint64_t a44,void *a45,void *a46,void *a47,void *a48,void *a49)
{
  void *v49;
  void *v50;
  void *v51;
  void *v52;

  _Unwind_Resume(a1);
}

void sub_1B6DB8A2C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;

  _Unwind_Resume(a1);
}

void sub_1B6DB9B98(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,void *a23)
{

  _Unwind_Resume(a1);
}

void sub_1B6DB9E10(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, void *a6, uint64_t a7, ...)
{
  void *v7;
  void *v8;
  va_list va;

  va_start(va, a7);

  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1B6DB9EB8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void sub_1B6DB9F10(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1B6DBA32C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, void *a14, uint64_t a15, uint64_t a16, void *a17)
{
  void *v17;
  void *v18;

  _Unwind_Resume(a1);
}

void sub_1B6DBA74C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9, uint64_t a10, uint64_t a11, void *a12, void *a13, void *a14, void *a15, void *a16)
{

  _Unwind_Resume(a1);
}

void sub_1B6DBB004(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, void *a14, void *a15, void *a16)
{
  void *v16;
  void *v17;
  void *v18;
  void *v19;
  uint64_t v20;

  _Unwind_Resume(a1);
}

void sub_1B6DBB764(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, void *a13)
{
  void *v13;
  void *v14;
  void *v15;
  void *v16;
  void *v17;
  void *v18;
  void *v19;
  void *v20;

  _Unwind_Resume(a1);
}

void sub_1B6DBB8A4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void sub_1B6DBB9A8(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1B6DBBA3C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13)
{

  _Unwind_Resume(a1);
}

void sub_1B6DBBCD4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_1B6DBBDB4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{

  _Unwind_Resume(a1);
}

void sub_1B6DBBF08(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1B6DBC064(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1B6DBCCC4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,void *a24,void *a25,void *a26,void *a27,uint64_t a28,void *a29,void *a30,void *a31,void *a32,void *a33,void *a34,uint64_t a35,void *a36,void *a37,void *a38,uint64_t a39,uint64_t a40,uint64_t a41,void *a42,void *a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,void *a55)
{
  void *v55;
  void *v56;
  void *v57;
  void *v58;
  void *v59;
  void *v60;
  uint64_t v61;

  _Unwind_Resume(a1);
}

void sub_1B6DBD0AC(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  v4 = v3;

  _Unwind_Resume(a1);
}

void sub_1B6DBD1E0(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  v3 = v2;

  _Unwind_Resume(a1);
}

void sub_1B6DBD274(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  v4 = v3;

  _Unwind_Resume(a1);
}

void sub_1B6DBD3B4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_1B6DBDE30(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,void *a24,uint64_t a25,void *a26)
{

  _Unwind_Resume(a1);
}

void sub_1B6DBDFDC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void sub_1B6DBE044(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_1B6DC4524(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,void *a28,uint64_t a29,uint64_t a30,void *a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,void *a36,uint64_t a37,uint64_t a38,uint64_t a39,void *a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,void *a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,void *a63)
{
  void *a71;
  void *v71;
  void *v72;
  void *v73;
  void *v74;
  void *v75;

  _Unwind_Resume(a1);
}

void sub_1B6DC48D0(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1B6DC4AA0(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;

  _Unwind_Resume(a1);
}

void sub_1B6DC4C60(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1B6DC4D54(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;
  void *v11;

  _Unwind_Resume(a1);
}

void sub_1B6DC4ED4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  _Unwind_Resume(a1);
}

void sub_1B6DC56DC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *exc_buf, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *a26)
{
  void *v26;
  void *v27;
  void *v28;

  if (a2)
  {

    objc_begin_catch(a1);
    JUMPOUT(0x1B6DC5608);
  }
  _Unwind_Resume(a1);
}

void sub_1B6DC59F4(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1B6DC5AC4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  void *v14;

  _Unwind_Resume(a1);
}

void sub_1B6DC5B88(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

id getPGPNGraphHelperClass(void)
{
  void *v0;
  id v1;
  _QWORD v3[5];
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;

  v4 = 0;
  v5 = &v4;
  v6 = 0x2050000000;
  v0 = (void *)getPGPNGraphHelperClass(void)::softClass;
  v7 = getPGPNGraphHelperClass(void)::softClass;
  if (!getPGPNGraphHelperClass(void)::softClass)
  {
    v3[0] = MEMORY[0x1E0C809B0];
    v3[1] = 3221225472;
    v3[2] = ___ZL23getPGPNGraphHelperClassv_block_invoke;
    v3[3] = &unk_1E6B15540;
    v3[4] = &v4;
    ___ZL23getPGPNGraphHelperClassv_block_invoke((uint64_t)v3);
    v0 = (void *)v5[3];
  }
  v1 = v0;
  _Block_object_dispose(&v4, 8);
  return v1;
}

void sub_1B6DC5C40(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1B6DC5CE8(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_1B6DC5D70(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1B6DC5FCC(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;

  _Unwind_Resume(a1);
}

void sub_1B6DC62E4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;

  _Unwind_Resume(a1);
}

void sub_1B6DC6588(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;

  _Unwind_Resume(a1);
}

void sub_1B6DC667C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1B6DC6D14(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15, void *a16, uint64_t a17, uint64_t a18, void *a19, uint64_t a20,void *a21,uint64_t a22,void *a23,void *a24,void *a25)
{
  void *v25;
  void *v26;
  void *v27;

  _Unwind_Resume(a1);
}

void sub_1B6DC7030(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

Class ___ZL23getPGPNGraphHelperClassv_block_invoke(uint64_t a1)
{
  Class result;
  void *v3;

  if (!PhotosGraphLibraryCore(char **)::frameworkLibrary)
  {
    PhotosGraphLibraryCore(char **)::frameworkLibrary = _sl_dlopen();
    if (!PhotosGraphLibraryCore(char **)::frameworkLibrary)
    {
      abort_report_np();
      goto LABEL_6;
    }
  }
  while (1)
  {
    result = objc_getClass("PGPNGraphHelper");
    *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = result;
    if (*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24))
      break;
LABEL_6:
    v3 = (void *)___ZL23getPGPNGraphHelperClassv_block_invoke_cold_1();
    free(v3);
  }
  getPGPNGraphHelperClass(void)::softClass = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24);
  return result;
}

void VCPProtoImageHumanPoseResult::VCPProtoImageHumanPoseResult(VCPProtoImageHumanPoseResult *this)
{
  this->super.super.isa = (Class)&off_1E6B13DD8;
  *(_OWORD *)&this->_bounds = 0u;
  *(_OWORD *)&this->_keypoints = 0u;
}

void VCPProtoImageHumanPoseResult::~VCPProtoImageHumanPoseResult(VCPProtoImageHumanPoseResult *this)
{
  VCPProtoBounds *bounds;
  VCPProtoImageHumanPoseResult *p_confidence;

  this->super.super.isa = (Class)&off_1E6B13DD8;
  p_confidence = (VCPProtoImageHumanPoseResult *)&this->_confidence;
  std::vector<std::unique_ptr<VCPProtoImageHumanPoseResult>>::__destroy_vector::operator()[abi:ne180100]((void ***)&p_confidence);
  bounds = this->_bounds;
  this->_bounds = 0;
  if (bounds)
    (*((void (**)(VCPProtoBounds *))bounds->super.super.isa + 1))(bounds);
  PB::Base::~Base((PB::Base *)this);
}

{
  VCPProtoImageHumanPoseResult::~VCPProtoImageHumanPoseResult(this);
  JUMPOUT(0x1BCCA12BCLL);
}

uint64_t VCPProtoImageHumanPoseResult::formatText(VCPProtoImageHumanPoseResult *this, PB::TextFormatter *a2, const char *a3)
{
  VCPProtoBounds *bounds;
  NSMutableArray *v6;
  NSMutableArray *keypoints;
  Class isa;

  PB::TextFormatter::beginObject(a2, a3);
  bounds = this->_bounds;
  if (bounds)
    (*((void (**)(VCPProtoBounds *, PB::TextFormatter *, const char *))bounds->super.super.isa + 4))(bounds, a2, "bounds");
  PB::TextFormatter::format(a2, "confidence", *(float *)&this[1]._bounds);
  PB::TextFormatter::format(a2, "flags");
  v6 = *(NSMutableArray **)&this->_confidence;
  keypoints = this->_keypoints;
  while (v6 != keypoints)
  {
    isa = v6->super.super.isa;
    ++v6;
    (*(void (**)(Class, PB::TextFormatter *, const char *))(*(_QWORD *)isa + 32))(isa, a2, "keypoints");
  }
  return PB::TextFormatter::endObject(a2);
}

uint64_t VCPProtoImageHumanPoseResult::readFrom(VCPProtoImageHumanPoseResult *this, PB::Reader *a2)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  float *p_confidence;
  uint64_t v9;
  char v10;
  unsigned int v11;
  unint64_t v12;
  unint64_t v13;
  char v14;
  BOOL v15;
  char v16;
  unsigned int v17;
  unint64_t v18;
  unint64_t v19;
  char v20;
  BOOL v21;
  uint64_t result;
  VCPProtoBounds *isa;
  VCPProtoBounds *bounds;
  char v25;
  unsigned int v26;
  uint64_t v27;
  unint64_t v28;
  char v29;
  char v30;
  unsigned int v31;
  unint64_t v32;
  char v33;

  v3 = *((_QWORD *)a2 + 1);
  v2 = *((_QWORD *)a2 + 2);
  v4 = *((unsigned __int8 *)a2 + 24);
  if (v3 >= v2 || v4 != 0)
    return v4 == 0;
  p_confidence = &this->_confidence;
  while (2)
  {
    v9 = *(_QWORD *)a2;
    if (v3 <= 0xFFFFFFFFFFFFFFF5 && v3 + 10 <= v2)
    {
      v10 = 0;
      v11 = 0;
      v12 = 0;
      while (1)
      {
        v13 = v3 + 1;
        *((_QWORD *)a2 + 1) = v3 + 1;
        v14 = *(_BYTE *)(v9 + v3);
        v12 |= (unint64_t)(v14 & 0x7F) << v10;
        if ((v14 & 0x80) == 0)
          goto LABEL_23;
        v10 += 7;
        v3 = v13;
        v15 = v11++ > 8;
        if (v15)
        {
          v12 = 0;
          goto LABEL_23;
        }
      }
    }
    v16 = 0;
    v17 = 0;
    v12 = 0;
    if (v3 <= v2)
      v18 = v2;
    else
      v18 = v3;
    do
    {
      if (v18 == v3)
      {
        v4 = 1;
        *((_BYTE *)a2 + 24) = 1;
        return v4 == 0;
      }
      v19 = v3++;
      v20 = *(_BYTE *)(v9 + v19);
      *((_QWORD *)a2 + 1) = v3;
      v12 |= (unint64_t)(v20 & 0x7F) << v16;
      if ((v20 & 0x80) == 0)
        goto LABEL_22;
      v16 += 7;
      v21 = v17++ >= 9;
    }
    while (!v21);
    v12 = 0;
LABEL_22:
    v13 = v19 + 1;
LABEL_23:
    if ((v12 & 7) == 4)
    {
      v4 = 0;
      return v4 == 0;
    }
    switch((v12 >> 3))
    {
      case 1u:
        if (v13 > 0xFFFFFFFFFFFFFFFBLL || v13 + 4 > v2)
        {
          *((_BYTE *)a2 + 24) = 1;
        }
        else
        {
          LODWORD(this[1]._bounds) = *(_DWORD *)(v9 + v13);
          *((_QWORD *)a2 + 1) += 4;
        }
        goto LABEL_53;
      case 2u:
        isa = (VCPProtoBounds *)operator new();
        VCPProtoBounds::VCPProtoBounds(isa);
        bounds = this->_bounds;
        this->_bounds = isa;
        if (bounds)
        {
          (*((void (**)(VCPProtoBounds *))bounds->super.super.isa + 1))(bounds);
          isa = this->_bounds;
        }
        goto LABEL_40;
      case 3u:
        if (v13 <= 0xFFFFFFFFFFFFFFF5 && v13 + 10 <= v2)
        {
          v25 = 0;
          v26 = 0;
          v27 = 0;
          do
          {
            v28 = v13 + 1;
            *((_QWORD *)a2 + 1) = v13 + 1;
            v29 = *(_BYTE *)(v9 + v13);
            v27 |= (unint64_t)(v29 & 0x7F) << v25;
            if ((v29 & 0x80) == 0)
              goto LABEL_52;
            v25 += 7;
            v13 = v28;
            v15 = v26++ > 8;
          }
          while (!v15);
LABEL_50:
          LODWORD(v27) = 0;
          goto LABEL_52;
        }
        v30 = 0;
        v31 = 0;
        v27 = 0;
        if (v2 <= v13)
          v2 = v13;
        while (v2 != v13)
        {
          v32 = v13 + 1;
          v33 = *(_BYTE *)(v9 + v13);
          *((_QWORD *)a2 + 1) = v32;
          v27 |= (unint64_t)(v33 & 0x7F) << v30;
          if ((v33 & 0x80) == 0)
            goto LABEL_52;
          v30 += 7;
          v13 = v32;
          v21 = v31++ >= 9;
          if (v21)
            goto LABEL_50;
        }
        LODWORD(v27) = 0;
        *((_BYTE *)a2 + 24) = 1;
LABEL_52:
        HIDWORD(this[1]._bounds) = v27;
        goto LABEL_53;
      case 4u:
        PB::PtrVector<VCPProtoKeypoint>::emplace_back<>((VCPProtoKeypoint ***)p_confidence);
        isa = (VCPProtoBounds *)this->_keypoints[-1].super.super.isa;
LABEL_40:
        if (PB::Reader::placeMark()
          && ((*((uint64_t (**)(VCPProtoBounds *, PB::Reader *))isa->super.super.isa + 2))(isa, a2) & 1) != 0)
        {
          PB::Reader::recallMark();
LABEL_53:
          v3 = *((_QWORD *)a2 + 1);
          v2 = *((_QWORD *)a2 + 2);
          v4 = *((unsigned __int8 *)a2 + 24);
          if (v3 >= v2 || v4 != 0)
            return v4 == 0;
          continue;
        }
        return 0;
      default:
        result = PB::Reader::skip(a2);
        if (!(_DWORD)result)
          return result;
        goto LABEL_53;
    }
  }
}

uint64_t VCPProtoImageHumanPoseResult::writeTo(VCPProtoImageHumanPoseResult *this, PB::Writer *a2)
{
  uint64_t result;
  NSMutableArray *keypoints;
  const PB::Base **v6;
  const PB::Base *v7;

  PB::Writer::write(a2, *(float *)&this[1]._bounds);
  PB::Writer::writeSubmessage(a2, (const PB::Base *)this->_bounds);
  result = PB::Writer::writeVarInt(a2);
  v6 = *(const PB::Base ***)&this->_confidence;
  keypoints = this->_keypoints;
  while (v6 != (const PB::Base **)keypoints)
  {
    v7 = *v6++;
    result = PB::Writer::writeSubmessage(a2, v7);
  }
  return result;
}

VCPProtoImageHumanPoseResult *VCPProtoImageHumanPoseResult::makeBounds(VCPProtoImageHumanPoseResult *this)
{
  VCPProtoImageHumanPoseResult *v1;
  VCPProtoBounds *v2;

  if (!this->_bounds)
  {
    v1 = this;
    v2 = (VCPProtoBounds *)operator new();
    VCPProtoBounds::VCPProtoBounds(v2);
    this = (VCPProtoImageHumanPoseResult *)v1->_bounds;
    v1->_bounds = v2;
    if (this)
      return (VCPProtoImageHumanPoseResult *)(*((uint64_t (**)(VCPProtoImageHumanPoseResult *))this->super.super.isa
                                              + 1))(this);
  }
  return this;
}

void sub_1B6DC78E0(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  _Unwind_Resume(a1);
}

void sub_1B6DC7A60(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_1B6DC7C34(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  void *v14;
  void *v15;
  void *v16;
  void *v17;
  void *v18;

  _Unwind_Resume(a1);
}

void sub_1B6DC7D20(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void sub_1B6DC7F58(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  _Unwind_Resume(a1);
}

__n128 ma::PreEncodeAnalysis::PreEncodeAnalysis(ma::PreEncodeAnalysis *this)
{
  uint64_t v1;
  __n128 result;
  uint64_t v3;

  *(_WORD *)this = 0;
  *((_BYTE *)this + 24) = 0;
  *((_QWORD *)this + 1) = 0;
  *((_QWORD *)this + 2) = 0;
  *((_OWORD *)this + 2) = 0u;
  *((_OWORD *)this + 3) = 0u;
  v1 = MEMORY[0x1E0CA2E18];
  result = *(__n128 *)MEMORY[0x1E0CA2E18];
  *((_OWORD *)this + 4) = *MEMORY[0x1E0CA2E18];
  v3 = *(_QWORD *)(v1 + 16);
  *((_QWORD *)this + 10) = v3;
  *((_DWORD *)this + 22) = 0;
  *((_QWORD *)this + 12) = 0;
  *((_QWORD *)this + 13) = 0;
  *(_OWORD *)((char *)this + 136) = xmmword_1B6FBEC30;
  *(__n128 *)((char *)this + 152) = result;
  *((_QWORD *)this + 21) = v3;
  *((_QWORD *)this + 22) = 0;
  *((_DWORD *)this + 46) = 0;
  return result;
}

void ma::PreEncodeAnalysis::~PreEncodeAnalysis(ma::PreEncodeAnalysis *this)
{
  const void *v2;
  const void *v3;

  v2 = (const void *)*((_QWORD *)this + 2);
  if (v2)
    CFRelease(v2);
  v3 = (const void *)*((_QWORD *)this + 1);
  if (v3)
    CFRelease(v3);
  Vector<unsigned int>::~Vector((const __CFArray **)this + 7);
  Vector<unsigned int>::~Vector((const __CFArray **)this + 6);
  Vector<unsigned short>::~Vector((const __CFArray **)this + 5);
  Vector<unsigned int>::~Vector((const __CFArray **)this + 4);
}

uint64_t ma::PreEncodeAnalysis::Initialize(uint64_t this, int a2, int a3)
{
  *(_DWORD *)(this + 112) = a2;
  *(_DWORD *)(this + 116) = a3;
  *(_BYTE *)this = 1;
  *(_BYTE *)(this + 24) = 1;
  return this;
}

__n128 ma::PreEncodeAnalysis::AddSecondData(ma::PreEncodeAnalysis *this, const ma::Frame *a2)
{
  __n128 result;
  unint64_t v5;
  double v6;
  float v7;
  float v8;
  float v9;
  CMTime time;
  CMTime rhs;
  CMTime lhs;

  lhs = *(CMTime *)((char *)a2 + 4);
  rhs = *(CMTime *)((char *)this + 64);
  CMTimeSubtract(&time, &lhs, &rhs);
  result.n128_f64[0] = CMTimeGetSeconds(&time);
  if (result.n128_f64[0] != 0.0)
  {
    v5 = *((int *)this + 22);
    if ((_DWORD)v5)
    {
      v6 = (float)((float)((float)*((unint64_t *)this + 12) * 8.0) / 1000.0) / result.n128_f64[0];
      *(float *)&rhs.value = (float)(*((_QWORD *)this + 13) / v5);
      v7 = fmaxf(*((float *)this + 36), *(float *)&rhs.value);
      v8 = fminf(*((float *)this + 37), *(float *)&rhs.value);
      *(float *)&v6 = v6;
      LODWORD(lhs.value) = LODWORD(v6);
      *((float *)this + 36) = v7;
      *((float *)this + 37) = v8;
      v9 = fmaxf(*((float *)this + 34), *(float *)&v6);
      *(float *)&v6 = fminf(*((float *)this + 35), *(float *)&v6);
      *((float *)this + 34) = v9;
      *((_DWORD *)this + 35) = LODWORD(v6);
      if (!Vector<float>::PushBack((CFMutableArrayRef *)this + 7, &rhs)
        && !Vector<float>::PushBack((CFMutableArrayRef *)this + 6, &lhs))
      {
        result = *(__n128 *)((char *)a2 + 4);
        *((_QWORD *)this + 10) = *(_QWORD *)((char *)a2 + 20);
        *((__n128 *)this + 4) = result;
        *((_DWORD *)this + 22) = 0;
        *((_QWORD *)this + 12) = 0;
        *((_QWORD *)this + 13) = 0;
      }
    }
  }
  return result;
}

uint64_t Vector<float>::PushBack(CFMutableArrayRef *a1, _DWORD *a2)
{
  CFMutableArrayRef Mutable;
  _DWORD *v5;

  if (!*a1)
  {
    Mutable = CFArrayCreateMutable(0, 0, 0);
    *a1 = Mutable;
    if (!Mutable)
      return 4294967188;
  }
  v5 = (_DWORD *)operator new();
  *v5 = *a2;
  CFArrayAppendValue(*a1, v5);
  return 0;
}

uint64_t ma::PreEncodeAnalysis::ProcessFrame(ma::PreEncodeAnalysis *this, const ma::Frame *a2)
{
  _DWORD *v4;
  __int128 *v5;
  __int128 v6;
  __int128 v7;
  int v8;
  uint64_t v9;
  CMTime v11;
  CMTime v12;
  CMTime rhs;
  CMTime lhs;

  if (*(_BYTE *)this)
  {
    if (!a2)
      goto LABEL_14;
    v4 = (_DWORD *)((char *)a2 + 104);
    if (!*((_DWORD *)a2 + 26))
      goto LABEL_14;
    if (*((_BYTE *)this + 24))
    {
      if (*((_DWORD *)this + 46) < 0x2329u)
      {
        if (Vector<unsigned int>::PushBack((CFMutableArrayRef *)this + 4, v4))
          goto LABEL_14;
        LOWORD(lhs.value) = *((_QWORD *)a2 + 10);
        if (Vector<unsigned short>::PushBack((CFMutableArrayRef *)this + 5, &lhs))
          goto LABEL_14;
      }
      else
      {
        *((_BYTE *)this + 24) = 0;
      }
    }
    v5 = (__int128 *)((char *)a2 + 4);
    if ((*((_BYTE *)this + 164) & 1) == 0)
    {
      v6 = *v5;
      *((_QWORD *)this + 21) = *(_QWORD *)((char *)a2 + 20);
      *(_OWORD *)((char *)this + 152) = v6;
      v7 = *v5;
      *((_QWORD *)this + 10) = *(_QWORD *)((char *)a2 + 20);
      *((_OWORD *)this + 4) = v7;
LABEL_11:
      v9 = *((_QWORD *)this + 12);
      *((_QWORD *)this + 13) += *((_QWORD *)a2 + 10);
      *((_QWORD *)this + 12) = v9 + *((unsigned int *)a2 + 26);
      ++*((_DWORD *)this + 22);
      ++*((_DWORD *)this + 46);
      return 0;
    }
    *(_OWORD *)&lhs.value = *v5;
    lhs.epoch = *(_QWORD *)((char *)a2 + 20);
    rhs = *(CMTime *)((char *)this + 64);
    CMTimeSubtract(&v12, &lhs, &rhs);
    CMTimeMake(&v11, 1, 1);
    lhs = v12;
    rhs = v11;
    if (CMTimeCompare(&lhs, &rhs) < 0)
      goto LABEL_11;
    ma::PreEncodeAnalysis::AddSecondData(this, a2);
    if (!v8)
      goto LABEL_11;
LABEL_14:
    *(_BYTE *)this = 0;
  }
  return 0;
}

uint64_t Vector<unsigned int>::PushBack(CFMutableArrayRef *a1, _DWORD *a2)
{
  CFMutableArrayRef Mutable;
  _DWORD *v5;

  if (!*a1)
  {
    Mutable = CFArrayCreateMutable(0, 0, 0);
    *a1 = Mutable;
    if (!Mutable)
      return 4294967188;
  }
  v5 = (_DWORD *)operator new();
  *v5 = *a2;
  CFArrayAppendValue(*a1, v5);
  return 0;
}

uint64_t Vector<unsigned short>::PushBack(CFMutableArrayRef *a1, _WORD *a2)
{
  CFMutableArrayRef Mutable;
  _WORD *v5;

  if (!*a1)
  {
    Mutable = CFArrayCreateMutable(0, 0, 0);
    *a1 = Mutable;
    if (!Mutable)
      return 4294967188;
  }
  v5 = (_WORD *)operator new();
  *v5 = *a2;
  CFArrayAppendValue(*a1, v5);
  return 0;
}

uint64_t ma::PreEncodeAnalysis::PopulateAndStoreEncodeParameters(ma::PreEncodeAnalysis *this)
{
  const __CFArray *v2;
  unsigned int Count;
  const __CFArray *v4;
  __int16 v5;
  CFIndex v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;

  v2 = (const __CFArray *)*((_QWORD *)this + 6);
  if (!v2)
    return 4294967278;
  Count = CFArrayGetCount(v2);
  if (!Count)
    return 4294967278;
  v4 = (const __CFArray *)*((_QWORD *)this + 7);
  if (!v4 || Count != CFArrayGetCount(v4))
    return 4294967278;
  v5 = *((unsigned __int8 *)this + 24);
  if (*((_BYTE *)this + 24))
  {
    v6 = 0;
    v7 = 0;
    v8 = 0;
    do
    {
      v9 = *(unsigned __int16 *)CFArrayGetValueAtIndex(*((CFArrayRef *)this + 5), v6);
      v7 += v9;
      v8 += (v9 * v9);
      ++v6;
    }
    while (Count != v6);
    v10 = Count >> 1;
    v11 = (v7 + v10) / (unint64_t)Count;
    v5 = vcvtad_u64_f64(sqrt((double)((v8 + v10) / (unint64_t)Count - v11 * v11)));
    *((_WORD *)this + 66) = v11;
  }
  else
  {
    *((_WORD *)this + 66) = 0;
  }
  *((_WORD *)this + 67) = v5;
  *((_DWORD *)this + 30) = *((_DWORD *)this + 46);
  *((_DWORD *)this + 31) = Count;
  *((_DWORD *)this + 32) = 22;
  CFDataAppendBytes(*((CFMutableDataRef *)this + 1), (const UInt8 *)this + 112, 24);
  return 0;
}

uint64_t ma::PreEncodeAnalysis::QuantizeAndStore(uint64_t a1, CFArrayRef *a2, float a3, float a4)
{
  int Count;
  int v9;
  unsigned int v12;
  unsigned int v13;
  CFIndex Length;
  UInt8 *MutableBytePtr;
  CFIndex v16;
  UInt8 *v17;
  unsigned int v18;
  UInt8 bytes[4];
  unsigned int v20;

  if (!*a2)
    return 4294967278;
  Count = CFArrayGetCount(*a2);
  v9 = Count;
  if (*(_DWORD *)(a1 + 124) != Count || Count == 0)
    return 4294967278;
  v12 = (float)(a4 - a3);
  if (v12 == (char)v12)
    v13 = 1;
  else
    v13 = (v12 + 128) >> 8;
  *(_DWORD *)bytes = a3;
  v20 = v13;
  CFDataAppendBytes(*(CFMutableDataRef *)(a1 + 8), bytes, 8);
  Length = CFDataGetLength(*(CFDataRef *)(a1 + 8));
  CFDataSetLength(*(CFMutableDataRef *)(a1 + 8), Length + v9);
  MutableBytePtr = CFDataGetMutableBytePtr(*(CFMutableDataRef *)(a1 + 8));
  if (v9 >= 1)
  {
    v16 = 0;
    v17 = &MutableBytePtr[Length];
    do
    {
      v18 = vcvtas_u32_f32((float)(*(float *)CFArrayGetValueAtIndex(*a2, v16) - a3) / (float)v13);
      if (v18 >= 0xFF)
        LOBYTE(v18) = -1;
      v17[v16++] = v18;
    }
    while (v9 != v16);
  }
  return 0;
}

uint64_t ma::PreEncodeAnalysis::GenerateQRTableAndStore(ma::PreEncodeAnalysis *this, double a2, float a3)
{
  double v4;
  uint64_t v6;
  float v7;
  float v8;
  uint64_t v9;
  int v10;
  CFIndex v11;
  int v12;
  float v13;
  int v14;
  float v15;
  unsigned int v16;
  float v17;
  int v18;
  float v19;
  float v20;
  int v21;
  int v22;
  int v23;
  float v24;
  int v25;
  _DWORD bytes[7];
  uint64_t v27;

  v27 = *MEMORY[0x1E0C80C00];
  if (*((_BYTE *)this + 24))
  {
    if (!*((_WORD *)this + 66))
      return 4294967278;
    v4 = *((double *)this + 22);
    if (v4 == 0.0)
      return 4294967278;
    v6 = 0;
    LOWORD(a3) = *((_WORD *)this + 67);
    v7 = (float)LODWORD(a3);
    v8 = (float)*((unsigned __int16 *)this + 66);
    v9 = *((unsigned int *)this + 30);
    v10 = *((_DWORD *)this + 32);
    do
    {
      if ((int)v9 < 1)
      {
        v15 = 0.0;
      }
      else
      {
        v11 = 0;
        v12 = ma::PreEncodeAnalysis::GenerateQRTableAndStore(void)::kTestQps[v6];
        v13 = (float)((float)(v7 * (float)v12) / v8) + (float)v12;
        v14 = (int)(float)((float)(v13 * 0.25) + 0.5);
        v15 = 0.0;
        do
        {
          LOWORD(v16) = *(_WORD *)CFArrayGetValueAtIndex(*((CFArrayRef *)this + 5), v11);
          v17 = (float)v16;
          v18 = v12;
          if (v17 != v8)
          {
            v19 = v17 - v8;
            if (v19 <= 0.0)
              v20 = v13 * 3.0;
            else
              v20 = (float)((float)(v7 * (float)v12) / v8) + (float)v12;
            v21 = llroundf((float)(v19 * (float)(v20 * 0.0625)) / v8);
            if (v21 >= v14)
              v22 = (int)(float)((float)(v13 * 0.25) + 0.5);
            else
              v22 = v21;
            if (v21 <= -v14)
              v23 = -v14;
            else
              v23 = v22;
            v18 = v23 + v12;
          }
          v24 = (float)*(unsigned int *)CFArrayGetValueAtIndex(*((CFArrayRef *)this + 4), v11);
          if (v10 != v18)
          {
            if (v18 <= 1)
              v25 = 1;
            else
              v25 = v18;
            v24 = powf((float)v10 / (float)v25, 1.5) * v24;
          }
          v15 = v15 + v24;
          ++v11;
        }
        while (v9 != v11);
        v4 = *((double *)this + 22);
      }
      bytes[v6++] = (int)((float)((float)(v15 * 8.0) / 1000.0) / v4 + 0.5);
    }
    while (v6 != 7);
    CFDataAppendBytes(*((CFMutableDataRef *)this + 1), (const UInt8 *)bytes, 28);
  }
  return 0;
}

uint64_t ma::PreEncodeAnalysis::Finalize(ma::PreEncodeAnalysis *this, const ma::Frame *a2)
{
  const CFDictionaryKeyCallBacks *v4;
  const CFDictionaryValueCallBacks *v5;
  __CFDictionary *Mutable;
  __CFDictionary *v7;
  const __CFAllocator *v8;
  CFMutableDataRef v9;
  BOOL v10;
  int v12;
  uint64_t v14;
  int v15;
  Float64 Seconds;
  double v17;
  float v18;
  CMTime time;
  CMTime rhs;
  CMTime lhs;

  if (!*(_BYTE *)this)
    return 0;
  v4 = (const CFDictionaryKeyCallBacks *)MEMORY[0x1E0C9B390];
  v5 = (const CFDictionaryValueCallBacks *)MEMORY[0x1E0C9B3A0];
  Mutable = CFDictionaryCreateMutable(0, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  v7 = CFDictionaryCreateMutable(0, 0, v4, v5);
  v8 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
  *((_QWORD *)this + 2) = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B378]);
  v9 = CFDataCreateMutable(v8, 0);
  *((_QWORD *)this + 1) = v9;
  if (*((_QWORD *)this + 2))
  {
    v10 = !v9 || Mutable == 0;
    if (!v10 && v7 != 0)
    {
      if (*((int *)this + 22) < 2
        || (v14 = *((_QWORD *)this + 13),
            *((_QWORD *)this + 12) -= *((unsigned int *)a2 + 26),
            *((_QWORD *)this + 13) = v14 - *((_QWORD *)a2 + 10),
            ma::PreEncodeAnalysis::AddSecondData(this, a2),
            (v12 = v15) == 0))
      {
        lhs = *(CMTime *)((char *)a2 + 4);
        rhs = *(CMTime *)((char *)this + 152);
        CMTimeSubtract(&time, &lhs, &rhs);
        Seconds = CMTimeGetSeconds(&time);
        *((Float64 *)this + 22) = Seconds;
        if (Seconds >= 10.0)
        {
          v12 = ma::PreEncodeAnalysis::PopulateAndStoreEncodeParameters(this);
          if (!v12)
          {
            v12 = ma::PreEncodeAnalysis::QuantizeAndStore((uint64_t)this, (CFArrayRef *)this + 7, *((float *)this + 37), *((float *)this + 36));
            if (!v12)
            {
              v12 = ma::PreEncodeAnalysis::QuantizeAndStore((uint64_t)this, (CFArrayRef *)this + 6, *((float *)this + 35), *((float *)this + 34));
              if (!v12)
              {
                ma::PreEncodeAnalysis::GenerateQRTableAndStore(this, v17, v18);
                CFDictionarySetValue(v7, CFSTR("Data"), *((const void **)this + 1));
                CFDictionarySetValue(Mutable, CFSTR("attributes"), v7);
                CFArrayAppendValue(*((CFMutableArrayRef *)this + 2), Mutable);
              }
            }
          }
        }
        else
        {
          v12 = 0;
          *(_BYTE *)this = 0;
        }
      }
      goto LABEL_12;
    }
  }
  v12 = -108;
  if (v7)
LABEL_12:
    CFRelease(v7);
  if (Mutable)
    CFRelease(Mutable);
  if (v12)
    *(_BYTE *)this = 0;
  *((_BYTE *)this + 1) = 1;
  return 0;
}

uint64_t ma::PreEncodeAnalysis::GetResults(ma::PreEncodeAnalysis *this)
{
  if (*(_BYTE *)this && *((_BYTE *)this + 1))
    return *((_QWORD *)this + 2);
  else
    return 0;
}

const __CFArray **Vector<unsigned int>::~Vector(const __CFArray **a1)
{
  const __CFArray *v2;
  CFIndex i;
  CFIndex Count;
  const __CFArray *v5;
  const void *ValueAtIndex;

  v2 = *a1;
  if (v2)
  {
    for (i = 0; ; ++i)
    {
      Count = CFArrayGetCount(v2);
      v5 = *a1;
      if (i >= Count)
        break;
      ValueAtIndex = CFArrayGetValueAtIndex(v5, i);
      if (ValueAtIndex)
        MEMORY[0x1BCCA12BC](ValueAtIndex, 0x1000C4052888210);
      v2 = *a1;
    }
    CFRelease(v5);
  }
  return a1;
}

const __CFArray **Vector<unsigned short>::~Vector(const __CFArray **a1)
{
  const __CFArray *v2;
  CFIndex i;
  CFIndex Count;
  const __CFArray *v5;
  const void *ValueAtIndex;

  v2 = *a1;
  if (v2)
  {
    for (i = 0; ; ++i)
    {
      Count = CFArrayGetCount(v2);
      v5 = *a1;
      if (i >= Count)
        break;
      ValueAtIndex = CFArrayGetValueAtIndex(v5, i);
      if (ValueAtIndex)
        MEMORY[0x1BCCA12BC](ValueAtIndex, 0x1000C40BDFB0063);
      v2 = *a1;
    }
    CFRelease(v5);
  }
  return a1;
}

BOOL VCPProtoImageExposureResultReadFrom(uint64_t a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  char v14;
  uint64_t v16;
  int v17;
  uint64_t v19;
  unint64_t v20;
  int v21;
  uint64_t v22;
  unint64_t v23;
  int *v24;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) < *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
  {
    v7 = (int *)MEMORY[0x1E0D82BB8];
    while (1)
    {
      if (*(_BYTE *)(a2 + *v5))
        return *(_BYTE *)(a2 + *v5) == 0;
      v8 = 0;
      v9 = 0;
      v10 = 0;
      while (1)
      {
        v11 = *v3;
        v12 = *(_QWORD *)(a2 + v11);
        v13 = v12 + 1;
        if (v12 == -1 || v13 > *(_QWORD *)(a2 + *v4))
          break;
        v14 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
        *(_QWORD *)(a2 + v11) = v13;
        v10 |= (unint64_t)(v14 & 0x7F) << v8;
        if ((v14 & 0x80) == 0)
          goto LABEL_12;
        v8 += 7;
        if (v9++ >= 9)
        {
          v10 = 0;
          v16 = *v5;
          v17 = *(unsigned __int8 *)(a2 + v16);
          goto LABEL_14;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
      v16 = *v5;
      v17 = *(unsigned __int8 *)(a2 + v16);
      if (*(_BYTE *)(a2 + v16))
        v10 = 0;
LABEL_14:
      if (v17 || (v10 & 7) == 4)
        return *(_BYTE *)(a2 + *v5) == 0;
      if ((v10 >> 3) == 2)
        break;
      if ((v10 >> 3) == 1)
      {
        v19 = *v3;
        v20 = *(_QWORD *)(a2 + v19);
        if (v20 <= 0xFFFFFFFFFFFFFFFBLL && v20 + 4 <= *(_QWORD *)(a2 + *v4))
        {
          v21 = *(_DWORD *)(*(_QWORD *)(a2 + *v7) + v20);
          *(_QWORD *)(a2 + v19) = v20 + 4;
        }
        else
        {
          *(_BYTE *)(a2 + v16) = 1;
          v21 = 0;
        }
        v24 = &OBJC_IVAR___VCPProtoImageExposureResult__exposure;
LABEL_32:
        *(_DWORD *)(a1 + *v24) = v21;
        goto LABEL_33;
      }
      if ((PBReaderSkipValueWithTag() & 1) == 0)
        return 0;
LABEL_33:
      if (*(_QWORD *)(a2 + *v3) >= *(_QWORD *)(a2 + *v4))
        return *(_BYTE *)(a2 + *v5) == 0;
    }
    *(_BYTE *)(a1 + 16) |= 1u;
    v22 = *v3;
    v23 = *(_QWORD *)(a2 + v22);
    if (v23 <= 0xFFFFFFFFFFFFFFFBLL && v23 + 4 <= *(_QWORD *)(a2 + *v4))
    {
      v21 = *(_DWORD *)(*(_QWORD *)(a2 + *v7) + v23);
      *(_QWORD *)(a2 + v22) = v23 + 4;
    }
    else
    {
      *(_BYTE *)(a2 + *v5) = 1;
      v21 = 0;
    }
    v24 = &OBJC_IVAR___VCPProtoImageExposureResult__underExpose;
    goto LABEL_32;
  }
  return *(_BYTE *)(a2 + *v5) == 0;
}

BOOL VCPProtoMovieFeatureResultReadFrom(uint64_t a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  int v15;
  VCPProtoTime *v17;
  uint64_t v18;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) < *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
  {
    v7 = (int *)MEMORY[0x1E0D82BB8];
    while (1)
    {
      if (*(_BYTE *)(a2 + *v5))
        return *(_BYTE *)(a2 + *v5) == 0;
      v8 = 0;
      v9 = 0;
      v10 = 0;
      while (1)
      {
        v11 = *v3;
        v12 = *(_QWORD *)(a2 + v11);
        if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
          break;
        v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
        *(_QWORD *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0)
          goto LABEL_12;
        v8 += 7;
        if (v9++ >= 9)
        {
          v10 = 0;
          v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
      v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(_BYTE *)(a2 + *v5))
        v10 = 0;
LABEL_14:
      if (v15 || (v10 & 7) == 4)
        return *(_BYTE *)(a2 + *v5) == 0;
      if ((v10 >> 3) == 2)
        break;
      if ((v10 >> 3) == 1)
      {
        v17 = objc_alloc_init(VCPProtoTime);
        objc_storeStrong((id *)(a1 + 16), v17);
        if (!PBReaderPlaceMark() || (VCPProtoTimeReadFrom((uint64_t)v17, a2) & 1) == 0)
        {

          return 0;
        }
        PBReaderRecallMark();
        goto LABEL_24;
      }
      if ((PBReaderSkipValueWithTag() & 1) == 0)
        return 0;
LABEL_26:
      if (*(_QWORD *)(a2 + *v3) >= *(_QWORD *)(a2 + *v4))
        return *(_BYTE *)(a2 + *v5) == 0;
    }
    PBReaderReadData();
    v18 = objc_claimAutoreleasedReturnValue();
    v17 = *(VCPProtoTime **)(a1 + 8);
    *(_QWORD *)(a1 + 8) = v18;
LABEL_24:

    goto LABEL_26;
  }
  return *(_BYTE *)(a2 + *v5) == 0;
}

uint64_t ma::Rotator::Rotator(uint64_t this, int a2)
{
  *(_QWORD *)this = 0;
  *(_QWORD *)(this + 8) = 0;
  *(_DWORD *)(this + 16) = a2;
  *(_QWORD *)(this + 24) = 0;
  return this;
}

void ma::Rotator::~Rotator(ma::Rotator *this)
{
  const void *v2;
  const void *v3;

  v2 = *(const void **)this;
  if (v2)
    CFRelease(v2);
  v3 = (const void *)*((_QWORD *)this + 3);
  if (v3)
    CFRelease(v3);
}

uint64_t ma::Rotator::Initialize(ma::Rotator *this, CVPixelBufferRef pixelBuffer)
{
  int v2;
  unint64_t v3;
  uint64_t v4;
  const void *v7;
  const void *v8;
  OSType Height;
  OSType v10;
  const CFDictionaryKeyCallBacks *v11;
  const CFDictionaryValueCallBacks *v12;
  __CFDictionary *Mutable;
  CFMutableDictionaryRef v14;
  CFMutableDictionaryRef v15;
  int v16;
  CFNumberRef v17;
  CFNumberRef v18;
  CFNumberRef v19;
  OSType valuePtr;
  CFNumberRef v22;

  v2 = *((_DWORD *)this + 4);
  HIDWORD(v3) = -1527099483 * v2 + 47721858;
  LODWORD(v3) = HIDWORD(v3);
  if ((v3 >> 1) > 0x2D82D82)
    return 4294967246;
  *((_DWORD *)this + 4) = v2 % 360 + (v2 % 360 < 0 ? 0x168 : 0);
  v7 = *(const void **)this;
  if (v7)
  {
    CFRelease(v7);
    *(_QWORD *)this = 0;
  }
  v8 = (const void *)*((_QWORD *)this + 3);
  if (v8)
  {
    CFRelease(v8);
    *((_QWORD *)this + 3) = 0;
  }
  *((_DWORD *)this + 2) = CVPixelBufferGetWidth(pixelBuffer);
  Height = CVPixelBufferGetHeight(pixelBuffer);
  *((_DWORD *)this + 3) = Height;
  v10 = *((_DWORD *)this + 2);
  v11 = (const CFDictionaryKeyCallBacks *)MEMORY[0x1E0C9B390];
  v12 = (const CFDictionaryValueCallBacks *)MEMORY[0x1E0C9B3A0];
  Mutable = CFDictionaryCreateMutable(0, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  v14 = CFDictionaryCreateMutable(0, 0, v11, v12);
  v15 = v14;
  if (Mutable && v14)
  {
    v16 = *((_DWORD *)this + 4);
    if (v16 == 270 || v16 == 90)
    {
      Height = *((_DWORD *)this + 2);
      v10 = *((_DWORD *)this + 3);
    }
    valuePtr = v10;
    v17 = CFNumberCreate(0, kCFNumberSInt32Type, &valuePtr);
    v22 = v17;
    if (v17)
      CFDictionarySetValue(Mutable, (const void *)*MEMORY[0x1E0CA90E0], v17);
    CF<opaqueCMSampleBuffer *>::~CF((const void **)&v22);
    valuePtr = Height;
    v18 = CFNumberCreate(0, kCFNumberSInt32Type, &valuePtr);
    v22 = v18;
    if (v18)
      CFDictionarySetValue(Mutable, (const void *)*MEMORY[0x1E0CA8FD8], v18);
    CF<opaqueCMSampleBuffer *>::~CF((const void **)&v22);
    valuePtr = CVPixelBufferGetPixelFormatType(pixelBuffer);
    v19 = CFNumberCreate(0, kCFNumberSInt32Type, &valuePtr);
    v22 = v19;
    if (v19)
      CFDictionarySetValue(Mutable, (const void *)*MEMORY[0x1E0CA9040], v19);
    CF<opaqueCMSampleBuffer *>::~CF((const void **)&v22);
    CFDictionarySetValue(Mutable, (const void *)*MEMORY[0x1E0CA8FF0], v15);
    v4 = CVPixelBufferPoolCreate(0, 0, Mutable, (CVPixelBufferPoolRef *)this);
    if (!(_DWORD)v4)
      v4 = VTImageRotationSessionCreate();
  }
  else
  {
    v4 = 4294967188;
    if (!Mutable)
      goto LABEL_22;
  }
  CFRelease(Mutable);
LABEL_22:
  if (v15)
    CFRelease(v15);
  return v4;
}

void sub_1B6DC9C00(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  CF<opaqueCMSampleBuffer *>::~CF((const void **)va);
  _Unwind_Resume(a1);
}

uint64_t ma::Rotator::Rotate(ma::Rotator *this, CVPixelBufferRef pixelBuffer, CFTypeRef *a3)
{
  uint64_t v6;

  if ((*((_DWORD *)this + 2) != CVPixelBufferGetWidth(pixelBuffer)
     || *((_DWORD *)this + 3) != CVPixelBufferGetHeight(pixelBuffer))
    && (v6 = ma::Rotator::Initialize(this, pixelBuffer), (_DWORD)v6)
    || (v6 = CVPixelBufferPoolCreatePixelBuffer(0, *(CVPixelBufferPoolRef *)this, (CVPixelBufferRef *)a3), (_DWORD)v6)
    || (v6 = MEMORY[0x1BCCA0E18](*((_QWORD *)this + 3), pixelBuffer, *a3), (_DWORD)v6))
  {
    if (*a3)
    {
      CFRelease(*a3);
      *a3 = 0;
    }
  }
  return v6;
}

void sub_1B6DC9D6C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1B6DC9DE0(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1B6DC9E3C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1B6DC9F54(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1B6DCA064(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1B6DCA494(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id obj)
{
  objc_sync_exit(obj);

  _Unwind_Resume(a1);
}

void sub_1B6DCA5FC(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1B6DCA740(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1B6DCA9B8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{
  void *v10;
  void *v11;

  objc_sync_exit(v10);
  _Unwind_Resume(a1);
}

void sub_1B6DCAD48(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{
  void *v10;
  void *v11;
  void *v12;

  _Unwind_Resume(a1);
}

void sub_1B6DCAE70(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1B6DCB020(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1B6DCB0C4(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1B6DCB2F4(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1B6DCB470(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_1B6DCB53C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  v3 = v2;

  _Unwind_Resume(a1);
}

void sub_1B6DCB78C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1B6DCB850(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1B6DCB8E4(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1B6DCBC88(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1B6DCBDDC(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_1B6DCBF6C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  _Unwind_Resume(a1);
}

void sub_1B6DCC074(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_1B6DCCA10(_Unwind_Exception *a1, void *a2, void *a3, void *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, ...)
{
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  va_list va;

  va_start(va, a12);

  CF<opaqueCMSampleBuffer *>::~CF((const void **)va);
  _Unwind_Resume(a1);
}

void sub_1B6DCCCC8(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1B6DCD2FC(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

uint64_t __Block_byref_object_copy__24(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void __Block_byref_object_dispose__24(uint64_t a1)
{

}

void sub_1B6DCD9CC(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_1B6DCDB5C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  _Unwind_Resume(a1);
}

void sub_1B6DCF8DC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,void *a29,void *a30,void *a31,void *a32,void *a33,void *a34,void *a35,uint64_t a36,uint64_t a37,void *a38,void *a39,uint64_t a40,uint64_t a41,uint64_t a42,void *a43,uint64_t a44,uint64_t a45,void *a46,void *a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  const void *a64;
  void *v64;

  CF<opaqueCMSampleBuffer *>::~CF(&a64);
  _Unwind_Resume(a1);
}

void sub_1B6DD00BC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;
  void *v11;
  void *v12;

  _Unwind_Resume(a1);
}

void sub_1B6DD01B8(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void ___ZL38getGDVUVisualUnderstandingServiceClassv_block_invoke(uint64_t a1)
{
  IntelligencePlatformLibrary();
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = objc_getClass("GDVUVisualUnderstandingService");
  if (*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24))
  {
    getGDVUVisualUnderstandingServiceClass(void)::softClass = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24);
  }
  else
  {
    ___ZL38getGDVUVisualUnderstandingServiceClassv_block_invoke_cold_1();
    IntelligencePlatformLibrary();
  }
}

float ___ZL35getGDVUEntityRecognitionClientClassv_block_invoke_0(uint64_t a1)
{
  float result;
  VCPBlurAnalyzer *v3;
  SEL v4;
  char *v5;
  int v6;
  int v7;
  int64_t v8;

  IntelligencePlatformLibrary();
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = objc_getClass("GDVUEntityRecognitionClient");
  if (*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24))
  {
    getGDVUEntityRecognitionClientClass(void)::softClass = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24);
  }
  else
  {
    v3 = (VCPBlurAnalyzer *)___ZL35getGDVUEntityRecognitionClientClassv_block_invoke_cold_1();
    return -[VCPBlurAnalyzer computeRegionSharpness:width:height:stride:](v3, v4, v5, v6, v7, v8);
  }
  return result;
}

void sub_1B6DD092C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,char a34)
{
  void *v34;

  CVPixelBufferLock::~CVPixelBufferLock((CVPixelBufferLock *)&a34);

  _Unwind_Resume(a1);
}

void sub_1B6DD0F8C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  _Unwind_Resume(a1);
}

void sub_1B6DD19D8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, void *a13, void *a14, void *a15, void *a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,void *a24)
{
  void *v24;
  void *v25;
  void *v26;
  void *v27;
  void *v28;
  void *v29;

  _Unwind_Resume(a1);
}

void sub_1B6DD1C2C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

uint64_t VCPPhotosVisualSearchProcessingVersion()
{
  if (VCPPhotosVisualSearchAlgorithmVersion::once != -1)
    dispatch_once(&VCPPhotosVisualSearchAlgorithmVersion::once, &__block_literal_global_43);
  return VCPPhotosVisualSearchAlgorithmVersion::version | 0x10000u;
}

uint64_t VCPPhotosVisualSearchAlgorithmVersion()
{
  if (VCPPhotosVisualSearchAlgorithmVersion::once != -1)
    dispatch_once(&VCPPhotosVisualSearchAlgorithmVersion::once, &__block_literal_global_43);
  return VCPPhotosVisualSearchAlgorithmVersion::version;
}

uint64_t VCPPhotosSceneProcessingVersionInternal()
{
  return 100;
}

uint64_t MediaAnalysisTypesUpdatedSince(unsigned int a1, void *a2)
{
  id v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _DWORD v17[2];
  uint64_t v18;

  v18 = *MEMORY[0x1E0C80C00];
  v3 = a2;
  v4 = v3;
  if ((int)a1 < 43)
  {
    v5 = 0x7FFFFFFFFFFFFLL;
    goto LABEL_48;
  }
  v6 = 0x440040000;
  if (a1 >= 0x2D)
    v6 = 0;
  if (a1 >= 0x2E)
    v7 = v6;
  else
    v7 = v6 | 0x400040000;
  if (a1 <= 0x32 && objc_msgSend(v3, "isVideo"))
    v7 |= 0x40000008uLL;
  v8 = v7 | 0x200008;
  if (a1 >= 0x34)
    v8 = v7;
  if (a1 >= 0x35)
    v9 = v8;
  else
    v9 = v8 | 0x4000;
  if (a1 <= 0x37)
  {
    v10 = objc_msgSend(v4, "vcp_isVideoSlowmo");
    v11 = 16392;
    if (v10)
      v11 = 2113560;
    v9 |= v11;
LABEL_23:
    if (objc_msgSend(v4, "isVideo"))
      v9 |= 0x48088uLL;
    goto LABEL_26;
  }
  if (a1 == 56)
    v9 |= 8uLL;
  if (a1 <= 0x39)
    goto LABEL_23;
  if (a1 != 58)
  {
    if (a1 < 0x3E)
      v9 |= 0x40040000uLL;
    if (a1 > 0x3E)
      goto LABEL_31;
    goto LABEL_29;
  }
LABEL_26:
  v12 = objc_msgSend(v4, "isVideo");
  v13 = v9 | 0x4000;
  if (!v12)
    v13 = v9;
  v9 = v13 | 0x40040000;
LABEL_29:
  if (objc_msgSend(v4, "vcp_isLivePhoto"))
    v9 |= 0x40000uLL;
LABEL_31:
  v14 = v9 | 0x1080000000000;
  if (a1 >= 0x40)
    v14 = v9;
  if (a1 >= 0x44)
    v5 = v14;
  else
    v5 = v14 | 0x3280000000000;
  if (a1 <= 0x44 && ((objc_msgSend(v4, "isVideo") & 1) != 0 || objc_msgSend(v4, "vcp_isLivePhoto")))
    v5 |= 0x280000000000uLL;
  if (objc_msgSend(v4, "isVideo"))
  {
    v15 = 295048;
    if ((v5 & 0x48088) == 0)
      v15 = 0;
    v5 |= v15;
  }
  if (a1 >= 0x46 && (int)MediaAnalysisLogLevel() >= 4 && os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_DEFAULT))
  {
    v17[0] = 67109120;
    v17[1] = a1;
    _os_log_impl(&dword_1B6C4A000, MEMORY[0x1E0C81028], OS_LOG_TYPE_DEFAULT, "Unknown Media Analysis version specified (%d)", (uint8_t *)v17, 8u);
  }
LABEL_48:

  return v5;
}

void sub_1B6DD1F74(_Unwind_Exception *exception_object)
{
  _Unwind_Resume(exception_object);
}

id MediaAnalysisResultsUpdatedSince(unsigned int a1, void *a2)
{
  id v3;
  void *v4;
  id v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  void *v16;
  void *v17;
  void *v18;
  void *v19;
  void *v20;
  void *v21;
  void *v22;
  void *v23;
  void *v24;
  void *v25;
  void *v26;
  _DWORD v28[2];
  uint64_t v29;

  v29 = *MEMORY[0x1E0C80C00];
  v3 = a2;
  objc_msgSend(MEMORY[0x1E0C99E20], "set");
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  if ((int)a1 > 42)
  {
    if (a1 > 0x2C)
    {
      if (a1 != 45)
      {
        if (a1 > 0x32)
        {
          if (a1 != 51)
          {
            if (a1 > 0x34)
            {
              if (a1 > 0x37)
              {
                if (a1 != 56)
                {
                  if (a1 > 0x39)
                  {
                    if (a1 != 58)
                    {
                      if (a1 > 0x3D)
                      {
                        if (a1 != 62)
                        {
                          if (a1 > 0x3F)
                          {
                            if (a1 > 0x41)
                            {
                              if (a1 != 66)
                              {
                                if (a1 > 0x43)
                                {
                                  if (a1 != 68)
                                  {
                                    if (a1 >= 0x46
                                      && (int)MediaAnalysisLogLevel() >= 4
                                      && os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_DEFAULT))
                                    {
                                      v28[0] = 67109120;
                                      v28[1] = a1;
                                      _os_log_impl(&dword_1B6C4A000, MEMORY[0x1E0C81028], OS_LOG_TYPE_DEFAULT, "Unknown Media Analysis version specified (%d)", (uint8_t *)v28, 8u);
                                    }
                                    goto LABEL_27;
                                  }
LABEL_24:
                                  if ((objc_msgSend(v3, "isVideo") & 1) != 0
                                    || objc_msgSend(v3, "vcp_isLivePhoto"))
                                  {
                                    MediaAnalysisResultsKeysForAnalysisTypes(0x280000000000);
                                    v25 = (void *)objc_claimAutoreleasedReturnValue();
                                    objc_msgSend(v4, "unionSet:", v25);

                                  }
LABEL_27:
                                  v5 = v4;
                                  goto LABEL_28;
                                }
LABEL_23:
                                MediaAnalysisResultsKeysForAnalysisTypes(0x3000000000000);
                                v23 = (void *)objc_claimAutoreleasedReturnValue();
                                objc_msgSend(v4, "unionSet:", v23);

                                MediaAnalysisResultsKeysForAnalysisTypes(0x280000000000);
                                v24 = (void *)objc_claimAutoreleasedReturnValue();
                                objc_msgSend(v4, "unionSet:", v24);

                                goto LABEL_24;
                              }
LABEL_22:
                              MediaAnalysisResultsKeysForAnalysisTypes(0x3000000000000);
                              v21 = (void *)objc_claimAutoreleasedReturnValue();
                              objc_msgSend(v4, "unionSet:", v21);

                              MediaAnalysisResultsKeysForAnalysisTypes(0x280000000000);
                              v22 = (void *)objc_claimAutoreleasedReturnValue();
                              objc_msgSend(v4, "unionSet:", v22);

                              goto LABEL_23;
                            }
LABEL_21:
                            MediaAnalysisResultsKeysForAnalysisTypes(0x3000000000000);
                            v19 = (void *)objc_claimAutoreleasedReturnValue();
                            objc_msgSend(v4, "unionSet:", v19);

                            MediaAnalysisResultsKeysForAnalysisTypes(0x280000000000);
                            v20 = (void *)objc_claimAutoreleasedReturnValue();
                            objc_msgSend(v4, "unionSet:", v20);

                            goto LABEL_22;
                          }
LABEL_20:
                          MediaAnalysisResultsKeysForAnalysisTypes(0x1080000000000);
                          v18 = (void *)objc_claimAutoreleasedReturnValue();
                          objc_msgSend(v4, "unionSet:", v18);

                          goto LABEL_21;
                        }
LABEL_18:
                        if (objc_msgSend(v3, "vcp_isLivePhoto"))
                        {
                          MediaAnalysisResultsKeysForAnalysisTypes(0x40000);
                          v17 = (void *)objc_claimAutoreleasedReturnValue();
                          objc_msgSend(v4, "unionSet:", v17);

                        }
                        goto LABEL_20;
                      }
LABEL_17:
                      MediaAnalysisResultsKeysForAnalysisTypes(1074003968);
                      v16 = (void *)objc_claimAutoreleasedReturnValue();
                      objc_msgSend(v4, "unionSet:", v16);

                      goto LABEL_18;
                    }
LABEL_15:
                    if (objc_msgSend(v3, "isVideo"))
                    {
                      MediaAnalysisResultsKeysForAnalysisTypes(0x4000);
                      v15 = (void *)objc_claimAutoreleasedReturnValue();
                      objc_msgSend(v4, "unionSet:", v15);

                    }
                    goto LABEL_17;
                  }
LABEL_14:
                  MediaAnalysisResultsKeysForAnalysisTypes(295048);
                  v14 = (void *)objc_claimAutoreleasedReturnValue();
                  objc_msgSend(v4, "unionSet:", v14);

                  goto LABEL_15;
                }
LABEL_13:
                MediaAnalysisResultsKeysForAnalysisTypes(8);
                v13 = (void *)objc_claimAutoreleasedReturnValue();
                objc_msgSend(v4, "unionSet:", v13);

                goto LABEL_14;
              }
LABEL_11:
              MediaAnalysisResultsKeysForAnalysisTypes(16392);
              v11 = (void *)objc_claimAutoreleasedReturnValue();
              objc_msgSend(v4, "unionSet:", v11);

              if (objc_msgSend(v3, "vcp_isVideoSlowmo"))
              {
                MediaAnalysisResultsKeysForAnalysisTypes(2097168);
                v12 = (void *)objc_claimAutoreleasedReturnValue();
                objc_msgSend(v4, "unionSet:", v12);

              }
              goto LABEL_13;
            }
LABEL_10:
            MediaAnalysisResultsKeysForAnalysisTypes(0x4000);
            v10 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend(v4, "unionSet:", v10);

            goto LABEL_11;
          }
LABEL_9:
          MediaAnalysisResultsKeysForAnalysisTypes(2097160);
          v9 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v4, "unionSet:", v9);

          goto LABEL_10;
        }
LABEL_7:
        if (objc_msgSend(v3, "isVideo"))
        {
          MediaAnalysisResultsKeysForAnalysisTypes(1073741832);
          v8 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v4, "unionSet:", v8);

        }
        goto LABEL_9;
      }
    }
    else
    {
      MediaAnalysisResultsKeysForAnalysisTypes(0x440040000);
      v6 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v4, "unionSet:", v6);

    }
    MediaAnalysisResultsKeysForAnalysisTypes(0x400040000);
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v4, "unionSet:", v7);

    goto LABEL_7;
  }
  MediaAnalysisResultsKeysForAnalysisTypes(0x7FFFFFFFFFFFFLL);
  v5 = (id)objc_claimAutoreleasedReturnValue();
LABEL_28:
  v26 = v5;

  return v26;
}

void sub_1B6DD2408(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

id MediaAnalysisResultsKeysForAnalysisTypes(uint64_t a1)
{
  void *v2;
  void *v3;
  id v4;

  objc_msgSend(MEMORY[0x1E0C99E20], "set");
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  v3 = v2;
  if ((a1 & 0x10) != 0)
  {
    objc_msgSend(v2, "addObject:", CFSTR("VoiceResults"));
    objc_msgSend(v3, "addObject:", CFSTR("UtteranceResults"));
  }
  if ((a1 & 0x200000) != 0)
  {
    objc_msgSend(v3, "addObject:", CFSTR("ApplauseResults"));
    objc_msgSend(v3, "addObject:", CFSTR("BabbleResults"));
    objc_msgSend(v3, "addObject:", CFSTR("CheeringResults"));
    objc_msgSend(v3, "addObject:", CFSTR("LaughterResults"));
    objc_msgSend(v3, "addObject:", CFSTR("MusicResults"));
  }
  if ((a1 & 0x400000000) != 0)
    objc_msgSend(v3, "addObject:", CFSTR("AudioQualityResults"));
  if ((a1 & 0x800000000000) != 0)
    objc_msgSend(v3, "addObject:", CFSTR("AudioEmbeddingResults"));
  if ((a1 & 0x20000000000) != 0)
    objc_msgSend(v3, "addObject:", CFSTR("SoundClassificationResults"));
  if ((a1 & 0x8000000) != 0)
    objc_msgSend(v3, "addObject:", CFSTR("SongResults"));
  if ((a1 & 0x400000) != 0)
  {
    objc_msgSend(v3, "addObject:", CFSTR("HumanPoseResults"));
    objc_msgSend(v3, "addObject:", CFSTR("HumanActionResults"));
    objc_msgSend(v3, "addObject:", CFSTR("HumanPoseInternalResults"));
  }
  if ((a1 & 0x40000000) != 0)
  {
    objc_msgSend(v3, "addObject:", CFSTR("HumanActionClassificationResults"));
    objc_msgSend(v3, "addObject:", CFSTR("HumanPoseInternalResults"));
  }
  if ((a1 & 0x100000000) != 0)
  {
    objc_msgSend(v3, "addObject:", CFSTR("VideoCaptionResults"));
    objc_msgSend(v3, "addObject:", CFSTR("ImageCaptionResults"));
  }
  if ((a1 & 0x2000000000000) != 0)
    objc_msgSend(v3, "addObject:", CFSTR("MiCaImageCaptionResults"));
  if ((a1 & 0x200000000000) != 0)
  {
    objc_msgSend(v3, "addObject:", CFSTR("MiCaVideoCaptionResults"));
    objc_msgSend(v3, "addObject:", CFSTR("VideoSegmentCaptionResults"));
    objc_msgSend(v3, "addObject:", CFSTR("VideoCaptionPreferenceResults"));
  }
  if ((a1 & 0x800000) != 0)
    objc_msgSend(v3, "addObject:", CFSTR("LoudnessResults"));
  if ((a1 & 0x14000000) != 0)
    objc_msgSend(v3, "addObject:", CFSTR("VideoStabilizationResults"));
  if ((a1 & 0x20000000) != 0)
    objc_msgSend(v3, "addObject:", CFSTR("InterpolationResults"));
  if ((a1 & 0x4000000000) != 0)
    objc_msgSend(v3, "addObject:", CFSTR("SettlingEffectResults"));
  if ((a1 & 0x10000000000) != 0)
    objc_msgSend(v3, "addObject:", CFSTR("PathConstraintsStabilizationResults"));
  if ((a1 & 0xC) != 0)
  {
    objc_msgSend(v3, "addObject:", CFSTR("FaceResults"));
    objc_msgSend(v3, "addObject:", CFSTR("ShotTypeResults"));
  }
  if ((a1 & 8) != 0)
  {
    objc_msgSend(v3, "addObject:", CFSTR("FacePrintResults"));
    objc_msgSend(v3, "addObject:", CFSTR("TorsoResults"));
  }
  if ((a1 & 0xC0) != 0)
  {
    objc_msgSend(v3, "addObject:", CFSTR("SceneResults"));
    objc_msgSend(v3, "addObject:", CFSTR("QualityResults"));
    objc_msgSend(v3, "addObject:", CFSTR("CameraMotionResults"));
    objc_msgSend(v3, "addObject:", CFSTR("SubjectMotionResults"));
    objc_msgSend(v3, "addObject:", CFSTR("FineSubjectMotionResults"));
    objc_msgSend(v3, "addObject:", CFSTR("SubtleMotionResults"));
    objc_msgSend(v3, "addObject:", CFSTR("OrientationResults"));
    objc_msgSend(v3, "addObject:", CFSTR("PreEncodeResults"));
    objc_msgSend(v3, "addObject:", CFSTR("IrisSharpnessResults"));
    objc_msgSend(v3, "addObject:", CFSTR("MovingObjectsResults"));
    objc_msgSend(v3, "addObject:", CFSTR("ObstructionResults"));
    objc_msgSend(v3, "addObject:", CFSTR("InterestingnessResults"));
  }
  if ((a1 & 0x200000000) != 0)
  {
    objc_msgSend(v3, "addObject:", CFSTR("MLQualityResults"));
    objc_msgSend(v3, "addObject:", CFSTR("MLCameraMotionResults"));
  }
  if ((a1 & 0x100) != 0)
    objc_msgSend(v3, "addObject:", CFSTR("JunkResults"));
  if ((a1 & 0x200) != 0)
    objc_msgSend(v3, "addObject:", CFSTR("BlurResults"));
  if ((a1 & 0x80000) != 0)
    objc_msgSend(v3, "addObject:", CFSTR("ExposureResults"));
  if ((a1 & 0x800) != 0)
  {
    objc_msgSend(v3, "addObject:", CFSTR("FeatureVectorResults"));
    objc_msgSend(v3, "addObject:", CFSTR("SceneprintResults"));
    objc_msgSend(v3, "addObject:", CFSTR("DistanceResults"));
  }
  if ((a1 & 0x1000) != 0)
    objc_msgSend(v3, "addObject:", CFSTR("SaliencyResults"));
  if ((a1 & 0x2000) != 0)
    objc_msgSend(v3, "addObject:", CFSTR("CompositionResults"));
  if ((a1 & 0x4000) != 0)
    objc_msgSend(v3, "addObject:", CFSTR("ClassificationResults"));
  if ((a1 & 0x8000) != 0)
    objc_msgSend(v3, "addObject:", CFSTR("ActivityLevelResults"));
  if ((a1 & 0x20000) != 0)
  {
    objc_msgSend(v3, "addObject:", CFSTR("PetsResults"));
    objc_msgSend(v3, "addObject:", CFSTR("PetsFaceResults"));
  }
  if ((a1 & 0x2000000000) != 0)
  {
    objc_msgSend(v3, "addObject:", CFSTR("PetsKeypointsResults"));
    objc_msgSend(v3, "addObject:", CFSTR("PetsActionResults"));
  }
  if ((a1 & 0x40000) != 0)
  {
    objc_msgSend(v3, "addObject:", CFSTR("MovieSummaryResults"));
    objc_msgSend(v3, "addObject:", CFSTR("MovieHighlightResults"));
    objc_msgSend(v3, "addObject:", CFSTR("KeyFrameResourceResults"));
    objc_msgSend(v3, "addObject:", CFSTR("MovieHighlightScoreResults"));
    objc_msgSend(v3, "addObject:", CFSTR("SettlingEffectsGatingResults"));
    objc_msgSend(v3, "addObject:", CFSTR("AnimatedStickerResults"));
  }
  if ((a1 & 0x1000000) != 0)
  {
    objc_msgSend(v3, "addObject:", CFSTR("KeyFrameResults"));
    objc_msgSend(v3, "addObject:", CFSTR("KeyFrameStillResults"));
  }
  if ((a1 & 0x100000) != 0)
    objc_msgSend(v3, "addObject:", CFSTR("LivePhotoEffectsResults"));
  if ((a1 & 0x800000000) != 0)
    objc_msgSend(v3, "addObject:", CFSTR("ParallaxResults"));
  if ((a1 & 0x8000000000) != 0)
    objc_msgSend(v3, "addObject:", CFSTR("WallpaperExportResults"));
  if ((a1 & 0x400000000000) != 0)
    objc_msgSend(v3, "addObject:", CFSTR("WatchFaceResults"));
  if ((a1 & 0x1000000000) != 0)
    objc_msgSend(v3, "addObject:", CFSTR("FaceQualityResults"));
  if ((a1 & 0x2000000) != 0)
    objc_msgSend(v3, "addObject:", CFSTR("HandsResults"));
  if ((a1 & 0x80000000) != 0)
    objc_msgSend(v3, "addObject:", CFSTR("IrisRecommendResults"));
  if ((a1 & 0x40000000000) != 0)
    objc_msgSend(v3, "addObject:", CFSTR("SafetyResults"));
  if ((a1 & 0x1000000000000) != 0)
    objc_msgSend(v3, "addObject:", CFSTR("ImageEmbeddingResults"));
  if ((a1 & 0x80000000000) != 0)
  {
    objc_msgSend(v3, "addObject:", CFSTR("VideoEmbeddingResults"));
    objc_msgSend(v3, "addObject:", CFSTR("SummarizedEmbeddingResults"));
    objc_msgSend(v3, "addObject:", CFSTR("AudioFusedVideoEmbeddingResults"));
    objc_msgSend(v3, "addObject:", CFSTR("AdaptiveSegmentResults"));
  }
  v4 = v3;

  return v4;
}

void sub_1B6DD2A80(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

uint64_t MediaAnalysisResultsKeyToAnalysisType(void *a1)
{
  id v1;
  void *v2;
  void *v3;
  uint64_t v4;

  v1 = a1;
  if (MediaAnalysisResultsKeyToAnalysisType::once != -1)
    dispatch_once(&MediaAnalysisResultsKeyToAnalysisType::once, &__block_literal_global_769);
  objc_msgSend((id)MediaAnalysisResultsKeyToAnalysisType::mapping, "objectForKey:", v1);
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  v3 = v2;
  if (v2)
    v4 = objc_msgSend(v2, "integerValue");
  else
    v4 = 0;

  return v4;
}

void sub_1B6DD2B1C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

uint64_t MediaAnalysisResultsKeyToType(void *a1)
{
  id v1;
  void *v2;
  void *v3;
  uint64_t v4;

  v1 = a1;
  if (MediaAnalysisResultsKeyToType::once != -1)
    dispatch_once(&MediaAnalysisResultsKeyToType::once, &__block_literal_global_814);
  objc_msgSend((id)MediaAnalysisResultsKeyToType::mapping, "objectForKey:", v1);
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  v3 = v2;
  if (v2)
    v4 = objc_msgSend(v2, "integerValue");
  else
    v4 = 0;

  return v4;
}

void sub_1B6DD321C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

__CFString *MediaAnalysisResultsTypeToKey(uint64_t a1)
{
  if ((unint64_t)(a1 - 1) > 0x52)
    return 0;
  else
    return off_1E6B19000[a1 - 1];
}

uint64_t MediaAnalysisFlagsForTypes(char a1)
{
  uint64_t v1;

  v1 = 62;
  if ((a1 & 0xC) == 0)
    v1 = 0;
  if ((a1 & 0xC0) != 0)
    return v1 | 0x3FFC0;
  else
    return v1;
}

__CFString *MediaAnalysisTypeShortDescription(uint64_t a1)
{
  void *v2;
  void *v3;
  const __CFString *v4;
  __CFString *v5;
  const __CFString *v6;

  if (!a1)
  {
    v5 = &stru_1E6B1C190;
    return v5;
  }
  objc_msgSend(MEMORY[0x1E0CB37A0], "string");
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  v3 = v2;
  if ((a1 & 8) != 0)
  {
    v4 = CFSTR("F");
  }
  else
  {
    if ((a1 & 4) == 0)
      goto LABEL_8;
    v4 = CFSTR("f");
  }
  objc_msgSend(v2, "appendString:", v4);
LABEL_8:
  if ((a1 & 0x10) != 0)
    objc_msgSend(v3, "appendString:", CFSTR("v"));
  if ((a1 & 0x80) != 0)
  {
    v6 = CFSTR("S");
    goto LABEL_14;
  }
  if ((a1 & 0x40) != 0)
  {
    v6 = CFSTR("s");
LABEL_14:
    objc_msgSend(v3, "appendString:", v6);
  }
  if ((a1 & 0x100) != 0)
    objc_msgSend(v3, "appendString:", CFSTR("j"));
  if ((a1 & 0x200) != 0)
    objc_msgSend(v3, "appendString:", CFSTR("b"));
  if ((a1 & 0x80000) != 0)
    objc_msgSend(v3, "appendString:", CFSTR("x"));
  if ((a1 & 0x400) != 0)
    objc_msgSend(v3, "appendString:", CFSTR("d"));
  if ((a1 & 0x800) != 0)
    objc_msgSend(v3, "appendString:", CFSTR("V"));
  if ((a1 & 0x1000) != 0)
    objc_msgSend(v3, "appendString:", CFSTR("i"));
  if ((a1 & 0x2000) != 0)
    objc_msgSend(v3, "appendString:", CFSTR("c"));
  if ((a1 & 0x4000) != 0)
    objc_msgSend(v3, "appendString:", CFSTR("C"));
  if ((a1 & 0x8000) != 0)
    objc_msgSend(v3, "appendString:", CFSTR("t"));
  if ((a1 & 0x10000) != 0)
    objc_msgSend(v3, "appendString:", CFSTR("q"));
  if ((a1 & 0x20000) != 0)
    objc_msgSend(v3, "appendString:", CFSTR("e"));
  if ((a1 & 0x2000000000) != 0)
    objc_msgSend(v3, "appendString:", CFSTR("K"));
  if ((a1 & 0x40000) != 0)
    objc_msgSend(v3, "appendString:", CFSTR("H"));
  if ((a1 & 0x100000) != 0)
    objc_msgSend(v3, "appendString:", CFSTR("E"));
  if ((a1 & 0x800000000) != 0)
    objc_msgSend(v3, "appendString:", CFSTR("p"));
  if ((a1 & 0x1000000000) != 0)
    objc_msgSend(v3, "appendString:", CFSTR("w"));
  if ((a1 & 0x200000) != 0)
    objc_msgSend(v3, "appendString:", CFSTR("u"));
  if ((a1 & 0x400000) != 0)
    objc_msgSend(v3, "appendString:", CFSTR("y"));
  if ((a1 & 0x800000) != 0)
    objc_msgSend(v3, "appendString:", CFSTR("l"));
  if ((a1 & 0x2000000) != 0)
    objc_msgSend(v3, "appendString:", CFSTR("z"));
  if ((a1 & 0x4000000) != 0)
    objc_msgSend(v3, "appendString:", CFSTR("P"));
  if ((a1 & 0x10000000) != 0)
    objc_msgSend(v3, "appendString:", CFSTR("G"));
  if ((a1 & 0x4000000000000000) != 0)
    objc_msgSend(v3, "appendString:", CFSTR("A"));
  if ((a1 & 0x200000000) != 0)
    objc_msgSend(v3, "appendString:", CFSTR("O"));
  if ((a1 & 0x8000000) != 0)
    objc_msgSend(v3, "appendString:", CFSTR("g"));
  if ((a1 & 0x20000000) != 0)
    objc_msgSend(v3, "appendString:", CFSTR("I"));
  if ((a1 & 0x40000000) != 0)
    objc_msgSend(v3, "appendString:", CFSTR("Y"));
  if ((a1 & 0x80000000) != 0)
    objc_msgSend(v3, "appendString:", CFSTR("R"));
  if ((a1 & 0x100000000) != 0)
    objc_msgSend(v3, "appendString:", CFSTR("U"));
  if ((a1 & 0x400000000) != 0)
    objc_msgSend(v3, "appendString:", CFSTR("Q"));
  if ((a1 & 0x20000000000) != 0)
    objc_msgSend(v3, "appendString:", CFSTR("L"));
  if ((a1 & 0x40000000000) != 0)
    objc_msgSend(v3, "appendString:", CFSTR("T"));
  if ((a1 & 0x1000000000000) != 0)
    objc_msgSend(v3, "appendString:", CFSTR("m"));
  if ((a1 & 0x80000000000) != 0)
    objc_msgSend(v3, "appendString:", CFSTR("M"));
  if ((a1 & 0x800000000000) != 0)
    objc_msgSend(v3, "appendString:", CFSTR("D"));
  if ((a1 & 0x2000000000000) != 0)
    objc_msgSend(v3, "appendString:", CFSTR("n"));
  if ((a1 & 0x200000000000) != 0)
    objc_msgSend(v3, "appendString:", CFSTR("N"));
  v5 = v3;

  return v5;
}

void sub_1B6DD3D60(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

__CFString *MediaAnalysisTypeDescription(uint64_t a1)
{
  void *v2;
  void *v3;
  const __CFString *v4;
  __CFString *v5;
  const __CFString *v6;

  if (!a1)
  {
    v5 = CFSTR("None");
    return v5;
  }
  objc_msgSend(MEMORY[0x1E0CB37A0], "string");
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  v3 = v2;
  if ((a1 & 8) != 0)
  {
    v4 = CFSTR("Full Face, ");
  }
  else
  {
    if ((a1 & 4) == 0)
      goto LABEL_8;
    v4 = CFSTR("Face, ");
  }
  objc_msgSend(v2, "appendString:", v4);
LABEL_8:
  if ((a1 & 0x10) != 0)
    objc_msgSend(v3, "appendString:", CFSTR("Voice, "));
  if ((a1 & 0x80) != 0)
  {
    v6 = CFSTR("Full Scene, ");
    goto LABEL_14;
  }
  if ((a1 & 0x40) != 0)
  {
    v6 = CFSTR("Scene, ");
LABEL_14:
    objc_msgSend(v3, "appendString:", v6);
  }
  if ((a1 & 0x100) != 0)
    objc_msgSend(v3, "appendString:", CFSTR("Junk, "));
  if ((a1 & 0x200) != 0)
    objc_msgSend(v3, "appendString:", CFSTR("Blur, "));
  if ((a1 & 0x80000) != 0)
    objc_msgSend(v3, "appendString:", CFSTR("Exposure, "));
  if ((a1 & 0x400) != 0)
    objc_msgSend(v3, "appendString:", CFSTR("Distance, "));
  if ((a1 & 0x800) != 0)
    objc_msgSend(v3, "appendString:", CFSTR("Feature, "));
  if ((a1 & 0x1000) != 0)
    objc_msgSend(v3, "appendString:", CFSTR("Saliency, "));
  if ((a1 & 0x2000) != 0)
    objc_msgSend(v3, "appendString:", CFSTR("Composition, "));
  if ((a1 & 0x4000) != 0)
    objc_msgSend(v3, "appendString:", CFSTR("Classification, "));
  if ((a1 & 0x8000) != 0)
    objc_msgSend(v3, "appendString:", CFSTR("ActivityLevel, "));
  if ((a1 & 0x10000) != 0)
    objc_msgSend(v3, "appendString:", CFSTR("CurationScore, "));
  if ((a1 & 0x20000) != 0)
    objc_msgSend(v3, "appendString:", CFSTR("Pets, "));
  if ((a1 & 0x2000000000) != 0)
    objc_msgSend(v3, "appendString:", CFSTR("PetsPose, "));
  if ((a1 & 0x40000) != 0)
    objc_msgSend(v3, "appendString:", CFSTR("MovieCuration, "));
  if ((a1 & 0x100000) != 0)
    objc_msgSend(v3, "appendString:", CFSTR("Effects, "));
  if ((a1 & 0x800000000) != 0)
    objc_msgSend(v3, "appendString:", CFSTR("Parallax, "));
  if ((a1 & 0x8000000000) != 0)
    objc_msgSend(v3, "appendString:", CFSTR("Wallpaper Export, "));
  if ((a1 & 0x1000000000) != 0)
    objc_msgSend(v3, "appendString:", CFSTR("Face Quality, "));
  if ((a1 & 0x200000) != 0)
    objc_msgSend(v3, "appendString:", CFSTR("Audio Classification, "));
  if ((a1 & 0x400000) != 0)
    objc_msgSend(v3, "appendString:", CFSTR("Human pose, "));
  if ((a1 & 0x800000) != 0)
    objc_msgSend(v3, "appendString:", CFSTR("Loudness Measure, "));
  if ((a1 & 0x2000000) != 0)
    objc_msgSend(v3, "appendString:", CFSTR("Hands, "));
  if ((a1 & 0x4000000) != 0)
    objc_msgSend(v3, "appendString:", CFSTR("Video Stabilization Pixel, "));
  if ((a1 & 0x10000000) != 0)
    objc_msgSend(v3, "appendString:", CFSTR("Video Stabilization Gyro, "));
  if ((a1 & 0x4000000000000000) != 0)
    objc_msgSend(v3, "appendString:", CFSTR("Gyro Analytics, "));
  if ((a1 & 0x200000000) != 0)
    objc_msgSend(v3, "appendString:", CFSTR("ML Video Attributes, "));
  if ((a1 & 0x8000000) != 0)
    objc_msgSend(v3, "appendString:", CFSTR("Song detection, "));
  if ((a1 & 0x20000000) != 0)
    objc_msgSend(v3, "appendString:", CFSTR("Video Interpolation, "));
  if ((a1 & 0x4000000000) != 0)
    objc_msgSend(v3, "appendString:", CFSTR("Settling effect, "));
  if ((a1 & 0x10000000000) != 0)
    objc_msgSend(v3, "appendString:", CFSTR("Path constraint stabilization, "));
  if ((a1 & 0x40000000) != 0)
    objc_msgSend(v3, "appendString:", CFSTR("Human action, "));
  if ((a1 & 0x80000000) != 0)
    objc_msgSend(v3, "appendString:", CFSTR("Iris Recommendation, "));
  if ((a1 & 0x100000000) != 0)
    objc_msgSend(v3, "appendString:", CFSTR("AX Caption, "));
  if ((a1 & 0x2000000000000) != 0)
    objc_msgSend(v3, "appendString:", CFSTR("Image Caption, "));
  if ((a1 & 0x200000000000) != 0)
    objc_msgSend(v3, "appendString:", CFSTR("Video Caption, "));
  if ((a1 & 0x400000000) != 0)
    objc_msgSend(v3, "appendString:", CFSTR("Audio Quality, "));
  if ((a1 & 0x20000000000) != 0)
    objc_msgSend(v3, "appendString:", CFSTR("Sound Classification, "));
  if ((a1 & 0x40000000000) != 0)
    objc_msgSend(v3, "appendString:", CFSTR("Safety, "));
  if ((a1 & 0x1000000000000) != 0)
    objc_msgSend(v3, "appendString:", CFSTR("Image MUBackbone, "));
  if ((a1 & 0x80000000000) != 0)
    objc_msgSend(v3, "appendString:", CFSTR("Video MUBackbone, "));
  if ((a1 & 0x800000000000) != 0)
    objc_msgSend(v3, "appendString:", CFSTR("Audio Embedding, "));
  if (objc_msgSend(v3, "length"))
  {
    objc_msgSend(v3, "substringToIndex:", objc_msgSend(v3, "length") - 2);
    v5 = (__CFString *)objc_claimAutoreleasedReturnValue();
  }
  else
  {
    v5 = CFSTR("Unknown");
  }

  return v5;
}

void sub_1B6DD4178(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

id MediaAnalysisPostProcessSlowmoResults(void *a1, void *a2, int a3)
{
  id v5;
  id v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  double v13;
  double v14;
  int v15;
  int v16;
  double v17;
  void *v18;
  void *v19;
  id v20;
  void *v22;
  void *v23;
  uint64_t v24;
  uint8_t buf[4];
  void *v26;
  uint64_t v27;

  v27 = *MEMORY[0x1E0C80C00];
  v5 = a1;
  v6 = a2;
  if (v6 && objc_msgSend(v5, "mediaType") == 2 && (objc_msgSend(v5, "vcp_isVideoSlowmo") & 1) != 0)
  {
    objc_msgSend(MEMORY[0x1E0CD1440], "assetResourcesForAsset:", v5);
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v7, "vcp_adjustmentsResource");
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v8, "privateFileURL");
    v9 = (void *)objc_claimAutoreleasedReturnValue();

    if (v9)
    {
      v10 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0D75310]), "initWithURL:", v9);
      v11 = v10;
      if (v10 && (objc_msgSend(v10, "hasSlowMotionAdjustments") & 1) != 0)
      {
        v12 = (void *)MEMORY[0x1E0D75290];
        objc_msgSend(v5, "duration");
        v14 = v13;
        objc_msgSend(v11, "slowMotionRate");
        v16 = v15;
        objc_msgSend(v11, "slowMotionTimeRange");
        LODWORD(v17) = v16;
        objc_msgSend(v12, "timeRangeMapperForSourceDuration:slowMotionRate:slowMotionTimeRange:forExport:", &v24, 1, v14, v17);
        v18 = (void *)objc_claimAutoreleasedReturnValue();
        v19 = v18;
        if (a3)
          MediaAnalysisConvertAnalysisToOriginalTime(v18, v6);
        else
          MediaAnalysisConvertAnalysisToScaledTime(v18, v6);
        v20 = (id)objc_claimAutoreleasedReturnValue();

      }
      else
      {
        if ((int)MediaAnalysisLogLevel() >= 6 && os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_INFO))
        {
          objc_msgSend(v5, "localIdentifier");
          v22 = (void *)objc_claimAutoreleasedReturnValue();
          *(_DWORD *)buf = 138412290;
          v26 = v22;
          _os_log_impl(&dword_1B6C4A000, MEMORY[0x1E0C81028], OS_LOG_TYPE_INFO, "[MediaAnalysis][%@] No slow-mo timestamp mapping file found", buf, 0xCu);

        }
        v20 = 0;
      }

    }
    else
    {
      if ((int)MediaAnalysisLogLevel() >= 6 && os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_INFO))
      {
        objc_msgSend(v5, "localIdentifier");
        v23 = (void *)objc_claimAutoreleasedReturnValue();
        *(_DWORD *)buf = 138412290;
        v26 = v23;
        _os_log_impl(&dword_1B6C4A000, MEMORY[0x1E0C81028], OS_LOG_TYPE_INFO, "[MediaAnalysis][%@] No slow-mo timestamp mapping file URL found", buf, 0xCu);

      }
      v20 = 0;
    }

  }
  else
  {
    v20 = v6;
  }

  return v20;
}

void sub_1B6DD442C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;

  _Unwind_Resume(a1);
}

id MediaAnalysisConvertAnalysisToOriginalTime(void *a1, void *a2)
{
  id v3;
  id v4;
  void *v5;
  void *v6;
  id v7;
  id v8;
  uint64_t v10;
  uint64_t v11;
  void (*v12)(uint64_t, void *, void *);
  void *v13;
  id v14;
  id v15;
  uint8_t buf[16];

  v3 = a1;
  v4 = a2;
  if (v3)
  {
    objc_msgSend(MEMORY[0x1E0C99E08], "dictionary");
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v4, "vcp_results");
    v6 = (void *)objc_claimAutoreleasedReturnValue();
    v10 = MEMORY[0x1E0C809B0];
    v11 = 3221225472;
    v12 = __MediaAnalysisConvertAnalysisToOriginalTime_block_invoke;
    v13 = &unk_1E6B18CE8;
    v14 = v3;
    v7 = v5;
    v15 = v7;
    objc_msgSend(v6, "enumerateKeysAndObjectsUsingBlock:", &v10);

    objc_msgSend(MEMORY[0x1E0C99E08], "dictionaryWithDictionary:", v4, v10, v11, v12, v13);
    v8 = (id)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v8, "setObject:forKey:", v7, CFSTR("metadataRanges"));

  }
  else
  {
    if ((int)MediaAnalysisLogLevel() >= 6 && os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_INFO))
    {
      *(_WORD *)buf = 0;
      _os_log_impl(&dword_1B6C4A000, MEMORY[0x1E0C81028], OS_LOG_TYPE_INFO, "[MediaAnalysis] No slow-mo timerange mapper available, fall back to Scaled Time", buf, 2u);
    }
    v8 = v4;
  }

  return v8;
}

void sub_1B6DD4600(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

id MediaAnalysisConvertAnalysisToScaledTime(void *a1, void *a2)
{
  id v3;
  id v4;
  void *v5;
  void *v6;
  id v7;
  id v8;
  uint64_t v10;
  uint64_t v11;
  void (*v12)(uint64_t, void *, void *);
  void *v13;
  id v14;
  id v15;
  uint8_t buf[16];

  v3 = a1;
  v4 = a2;
  if (v3)
  {
    objc_msgSend(MEMORY[0x1E0C99E08], "dictionary");
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v4, "vcp_results");
    v6 = (void *)objc_claimAutoreleasedReturnValue();
    v10 = MEMORY[0x1E0C809B0];
    v11 = 3221225472;
    v12 = __MediaAnalysisConvertAnalysisToScaledTime_block_invoke;
    v13 = &unk_1E6B18CE8;
    v14 = v3;
    v7 = v5;
    v15 = v7;
    objc_msgSend(v6, "enumerateKeysAndObjectsUsingBlock:", &v10);

    objc_msgSend(MEMORY[0x1E0C99E08], "dictionaryWithDictionary:", v4, v10, v11, v12, v13);
    v8 = (id)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v8, "setObject:forKey:", v7, CFSTR("metadataRanges"));

  }
  else
  {
    if ((int)MediaAnalysisLogLevel() >= 6 && os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_INFO))
    {
      *(_WORD *)buf = 0;
      _os_log_impl(&dword_1B6C4A000, MEMORY[0x1E0C81028], OS_LOG_TYPE_INFO, "[MediaAnalysis] No slow-mo timerange mapper available, fall back to Original Time", buf, 2u);
    }
    v8 = v4;
  }

  return v8;
}

void sub_1B6DD47C8(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1B6DD4AA4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{
  void *v10;
  void *v11;

  _Unwind_Resume(a1);
}

void sub_1B6DD4D78(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{
  void *v10;
  void *v11;

  _Unwind_Resume(a1);
}

id MediaAnalysisStripInternalResultsFromAnalysis(void *a1)
{
  id v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  uint64_t v6;

  v1 = a1;
  if (v1)
  {
    objc_msgSend(MEMORY[0x1E0C99E08], "dictionaryWithDictionary:", v1);
    v2 = (void *)objc_claimAutoreleasedReturnValue();
    v3 = (void *)MEMORY[0x1E0C99E08];
    objc_msgSend(v2, "vcp_results");
    v4 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v3, "dictionaryWithDictionary:", v4);
    v5 = (void *)objc_claimAutoreleasedReturnValue();

    v6 = objc_msgSend(v2, "vcp_types");
    objc_msgSend(v5, "removeObjectForKey:", CFSTR("PreEncodeResults"));
    objc_msgSend(v5, "removeObjectForKey:", CFSTR("FeatureVectorResults"));
    objc_msgSend(v5, "removeObjectForKey:", CFSTR("SceneprintResults"));
    objc_msgSend(v2, "removeObjectForKey:", CFSTR("metadataRanges"));
    objc_msgSend(v2, "removeObjectForKey:", CFSTR("statsFlags"));
    if (objc_msgSend(v5, "count"))
      objc_msgSend(v2, "vcp_setResults:", v5);
    objc_msgSend(v2, "vcp_setTypes:", v6 & 0xFFFFFFFFFFFFF7FFLL);

  }
  else
  {
    v2 = 0;
  }

  return v2;
}

void sub_1B6DD4ED4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  v4 = v3;

  _Unwind_Resume(a1);
}

id MediaAnalysisStripKeyframeResourceResultsFromAnalysis(void *a1)
{
  id v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;

  v1 = a1;
  if (v1)
  {
    objc_msgSend(MEMORY[0x1E0C99E08], "dictionaryWithDictionary:", v1);
    v2 = (void *)objc_claimAutoreleasedReturnValue();
    v3 = (void *)MEMORY[0x1E0C99E08];
    objc_msgSend(v2, "vcp_results");
    v4 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v3, "dictionaryWithDictionary:", v4);
    v5 = (void *)objc_claimAutoreleasedReturnValue();

    objc_msgSend(v5, "removeObjectForKey:", CFSTR("KeyFrameResourceResults"));
    objc_msgSend(v2, "removeObjectForKey:", CFSTR("metadataRanges"));
    if (objc_msgSend(v5, "count"))
      objc_msgSend(v2, "vcp_setResults:", v5);

  }
  else
  {
    v2 = 0;
  }

  return v2;
}

void sub_1B6DD4FC4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  v4 = v3;

  _Unwind_Resume(a1);
}

void MediaAnalysisPurgeResources()
{
  id v0;

  +[VCPSharedInstanceManager sharedManager](VCPSharedInstanceManager, "sharedManager");
  v0 = (id)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v0, "reset");

}

void sub_1B6DD5038(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

uint64_t MediaAnalysisLivePhotoGatingResultKeyToType(void *a1)
{
  id v1;
  uint64_t v2;
  int v4;
  id v5;
  uint64_t v6;

  v6 = *MEMORY[0x1E0C80C00];
  v1 = a1;
  if ((objc_msgSend(v1, "isEqualToString:", CFSTR("mShortInputDecision")) & 1) != 0)
  {
    v2 = 8;
  }
  else if ((objc_msgSend(v1, "isEqualToString:", CFSTR("mPreGateStillMetadataDecision")) & 1) != 0)
  {
    v2 = 12;
  }
  else if ((objc_msgSend(v1, "isEqualToString:", CFSTR("mPreGateVideoTrimDecision")) & 1) != 0)
  {
    v2 = 16;
  }
  else if ((objc_msgSend(v1, "isEqualToString:", CFSTR("mPreGateVideoMLDecision")) & 1) != 0)
  {
    v2 = 20;
  }
  else if ((objc_msgSend(v1, "isEqualToString:", CFSTR("mPreGateFacesDecision")) & 1) != 0)
  {
    v2 = 24;
  }
  else if ((objc_msgSend(v1, "isEqualToString:", CFSTR("stabilizeGateDecision")) & 1) != 0)
  {
    v2 = 28;
  }
  else if ((objc_msgSend(v1, "isEqualToString:", CFSTR("postGateDecision")) & 1) != 0)
  {
    v2 = 32;
  }
  else if ((objc_msgSend(v1, "isEqualToString:", CFSTR("finalDecision")) & 1) != 0)
  {
    v2 = 36;
  }
  else if ((objc_msgSend(v1, "isEqualToString:", CFSTR("loopActivityDecision")) & 1) != 0)
  {
    v2 = 40;
  }
  else if ((objc_msgSend(v1, "isEqualToString:", CFSTR("bounceActivityDecision")) & 1) != 0)
  {
    v2 = 44;
  }
  else if ((objc_msgSend(v1, "isEqualToString:", CFSTR("longexpActivityDecision")) & 1) != 0)
  {
    v2 = 48;
  }
  else if ((objc_msgSend(v1, "isEqualToString:", CFSTR("stabilizeResult")) & 1) != 0)
  {
    v2 = 52;
  }
  else
  {
    if ((int)MediaAnalysisLogLevel() >= 4 && os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_DEFAULT))
    {
      v4 = 138412290;
      v5 = v1;
      _os_log_impl(&dword_1B6C4A000, MEMORY[0x1E0C81028], OS_LOG_TYPE_DEFAULT, "Invalid Live Photo Gating result type key [%@]", (uint8_t *)&v4, 0xCu);
    }
    v2 = 0;
  }

  return v2;
}

void sub_1B6DD525C(_Unwind_Exception *exception_object)
{
  _Unwind_Resume(exception_object);
}

__CFString *VCPTaskIDDescription(uint64_t a1)
{
  uint64_t v2;
  __CFString *v3;

  v2 = a1 - 1;
  v3 = CFSTR("MediaAnalysis");
  switch(v2)
  {
    case 0:
      return v3;
    case 1:
      v3 = CFSTR("SceneAnalysis");
      return v3;
    case 2:
      return CFSTR("FaceAnalysis");
    case 3:
      return CFSTR("EffectsAnalysis");
    case 4:
      return CFSTR("Sceneprint");
    case 5:
      return CFSTR("VideoStabilization");
    case 6:
      return CFSTR("MultiWorkerAnalysis");
    case 7:
      return CFSTR("QuickFaceIdentification");
    case 8:
      goto LABEL_7;
    case 9:
      return CFSTR("OCRAnalysis");
    case 10:
      return CFSTR("MovieHighlightProcessing");
    case 11:
      return CFSTR("VisualSearchAnalysis");
    case 12:
      return CFSTR("FilesystemAnalysis");
    case 13:
      return CFSTR("FilesystemVideoAnalysis");
    case 14:
      return CFSTR("VideoCaptionAnalysis");
    case 15:
      return CFSTR("PECAnalysis");
    case 16:
      return CFSTR("SpotlightImageAnalysis");
    case 17:
      return CFSTR("SpotlightMovieAnalysis");
    default:
      if (a1 == 255)
        return CFSTR("FullImageAnalysis");
LABEL_7:
      objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("Unknown(%lu)"), a1);
      v3 = (__CFString *)objc_claimAutoreleasedReturnValue();
      return v3;
  }
}

uint64_t PHMediaProcessingTaskIDForVCPTaskID(uint64_t result)
{
  uint64_t v1;

  switch(result)
  {
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
    case 15:
    case 16:
      return result;
    default:
      if (result == 0x7FFFFFFF)
        v1 = 0x7FFFFFFFLL;
      else
        v1 = 0;
      if (result == 255)
        result = 17;
      else
        result = v1;
      break;
  }
  return result;
}

uint64_t VCPVersionForTask(uint64_t a1)
{
  uint64_t v2;
  uint64_t result;
  void *v4;
  int v5;
  void *v6;
  __int16 v7;
  int v8;
  __int16 v9;
  int v10;
  uint64_t v11;

  v11 = *MEMORY[0x1E0C80C00];
  v2 = a1 - 1;
  result = 8;
  switch(v2)
  {
    case 0:
      return 69;
    case 1:
      return 100;
    case 2:
      if (_os_feature_enabled_impl())
        return 15;
      else
        return 11;
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 10:
      goto LABEL_5;
    case 9:
      return result;
    case 11:
      if (VCPPhotosVisualSearchAlgorithmVersion::once != -1)
        dispatch_once(&VCPPhotosVisualSearchAlgorithmVersion::once, &__block_literal_global_43);
      return VCPPhotosVisualSearchAlgorithmVersion::version | 0x10000u;
    default:
      if (a1 == 16)
        return 5;
LABEL_5:
      if ((int)MediaAnalysisLogLevel() >= 4 && os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_DEFAULT))
      {
        VCPTaskIDDescription(a1);
        v4 = (void *)objc_claimAutoreleasedReturnValue();
        v5 = 138412802;
        v6 = v4;
        v7 = 1024;
        v8 = a1;
        v9 = 1024;
        v10 = 69;
        _os_log_impl(&dword_1B6C4A000, MEMORY[0x1E0C81028], OS_LOG_TYPE_DEFAULT, "VCPVersionForTask not implemented for %@ (%d); using MediaAnalysisVersion (%d)",
          (uint8_t *)&v5,
          0x18u);

      }
      return 69;
  }
}

id VCPSpecialLabelToExtendedSceneClassificationID(void *a1)
{
  id v1;
  void *v2;

  v1 = a1;
  if (VCPSpecialLabelToExtendedSceneClassificationID::once != -1)
    dispatch_once(&VCPSpecialLabelToExtendedSceneClassificationID::once, &__block_literal_global_1165);
  objc_msgSend((id)VCPSpecialLabelToExtendedSceneClassificationID::mapping, "objectForKeyedSubscript:", v1);
  v2 = (void *)objc_claimAutoreleasedReturnValue();

  return v2;
}

void sub_1B6DD5618(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

id VCPHumanActionOperatingPointFromActionID(void *a1)
{
  id v1;
  void *v2;

  v1 = a1;
  if (VCPHumanActionOperatingPointFromActionID::once != -1)
    dispatch_once(&VCPHumanActionOperatingPointFromActionID::once, &__block_literal_global_1336);
  objc_msgSend((id)VCPHumanActionOperatingPointFromActionID::humanActionOperatingPoint, "objectForKeyedSubscript:", v1);
  v2 = (void *)objc_claimAutoreleasedReturnValue();

  return v2;
}

void sub_1B6DD5E38(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

id VCPSpecialLabelFromExtendedSceneClassificationID(uint64_t a1)
{
  void *v2;
  void *v3;
  void *v4;

  if (VCPSpecialLabelFromExtendedSceneClassificationID::once != -1)
    dispatch_once(&VCPSpecialLabelFromExtendedSceneClassificationID::once, &__block_literal_global_1387);
  v2 = (void *)VCPSpecialLabelFromExtendedSceneClassificationID::mapping;
  objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithUnsignedLongLong:", a1);
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v2, "objectForKeyedSubscript:", v3);
  v4 = (void *)objc_claimAutoreleasedReturnValue();

  return v4;
}

void sub_1B6DD5EE0(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

const __CFString *VCPProcessingStatusDescription(uint64_t a1)
{
  uint64_t v1;
  const __CFString *result;

  v1 = a1 - 1;
  result = CFSTR("Running");
  switch(v1)
  {
    case 0:
      return result;
    case 1:
      result = CFSTR("No Resource");
      break;
    case 2:
      result = CFSTR("Soft Failure");
      break;
    case 3:
      result = CFSTR("Hard Failure");
      break;
    case 4:
      result = CFSTR("Duplicate Failure");
      break;
    case 5:
      result = CFSTR("Upload Failure");
      break;
    case 6:
      result = CFSTR("Download Throttled");
      break;
    default:
      if (CFSTR("Running") == (__CFString *)0x7FFF)
        result = CFSTR("Done");
      else
        result = CFSTR("Undefined");
      break;
  }
  return result;
}

id MediaAnalysisStripOutdatedAnalysis(void *a1, void *a2)
{
  id v3;
  id v4;
  void *v5;
  id v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  double v13;
  uint64_t v14;
  double v15;
  uint64_t v16;
  void *v17;
  void *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t i;
  uint64_t v22;
  void *v23;
  void *v24;
  void *v25;
  void *v26;
  void *v27;
  void *v28;
  void *v29;
  uint64_t v31;
  uint64_t v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  uint8_t v37[128];
  uint8_t buf[4];
  void *v39;
  __int16 v40;
  int v41;
  uint64_t v42;

  v42 = *MEMORY[0x1E0C80C00];
  v3 = a1;
  v4 = a2;
  v5 = v4;
  v6 = 0;
  if (v3 && v4)
  {
    if (objc_msgSend(v4, "vcp_version") == 69)
    {
      v6 = v5;
      goto LABEL_34;
    }
    if ((int)objc_msgSend(v5, "vcp_version") >= 69)
    {
      if ((int)MediaAnalysisLogLevel() >= 4 && os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_DEFAULT))
      {
        objc_msgSend(v3, "localIdentifier");
        v7 = (void *)objc_claimAutoreleasedReturnValue();
        *(_DWORD *)buf = 138412546;
        v39 = v7;
        v40 = 1024;
        v41 = objc_msgSend(v5, "vcp_version");
        _os_log_impl(&dword_1B6C4A000, MEMORY[0x1E0C81028], OS_LOG_TYPE_DEFAULT, "  [%@] Unknown analysis version %d; discarding",
          buf,
          0x12u);

      }
LABEL_33:
      v6 = 0;
      goto LABEL_34;
    }
    v8 = MediaAnalysisTypesUpdatedSince(objc_msgSend(v5, "vcp_version"), v3);
    v9 = objc_msgSend(v5, "vcp_types");
    v10 = objc_msgSend(v5, "vcp_flags");
    v11 = 62;
    if ((v8 & 0xC) == 0)
      v11 = 0;
    if ((v8 & 0xC0) != 0)
      v12 = v11 | 0x3FFC0;
    else
      v12 = v11;
    objc_msgSend(v5, "vcp_quality");
    v14 = v9 & ~v8;
    if (!v14)
      goto LABEL_33;
    v15 = v13;
    v16 = v10 & ~v12;
    if (objc_msgSend(v3, "vcp_isLivePhoto") && (v14 & 0x32C04C1A41090) == 0
      || objc_msgSend(v3, "isVideo") && (v14 & 0x32C0040E4D898) == 0)
    {
      v16 &= ~0x20000000uLL;
    }
    v32 = v14;
    objc_msgSend(MEMORY[0x1E0C99E08], "dictionary");
    v17 = (void *)objc_claimAutoreleasedReturnValue();
    v35 = 0u;
    v36 = 0u;
    v33 = 0u;
    v34 = 0u;
    MediaAnalysisResultsKeysForAnalysisTypes(v32);
    v18 = (void *)objc_claimAutoreleasedReturnValue();
    v31 = v16;
    v19 = objc_msgSend(v18, "countByEnumeratingWithState:objects:count:", &v33, v37, 16);
    if (v19)
    {
      v20 = *(_QWORD *)v34;
      do
      {
        for (i = 0; i != v19; ++i)
        {
          if (*(_QWORD *)v34 != v20)
            objc_enumerationMutation(v18);
          v22 = *(_QWORD *)(*((_QWORD *)&v33 + 1) + 8 * i);
          objc_msgSend(v5, "vcp_results");
          v23 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v23, "objectForKey:", v22);
          v24 = (void *)objc_claimAutoreleasedReturnValue();

          if (v24)
            objc_msgSend(v17, "setObject:forKey:", v24, v22);

        }
        v19 = objc_msgSend(v18, "countByEnumeratingWithState:objects:count:", &v33, v37, 16);
      }
      while (v19);
    }

    objc_msgSend(MEMORY[0x1E0C99E08], "dictionary");
    v6 = (id)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v6, "setObject:forKey:", &unk_1E6B74180, CFSTR("version"));
    objc_msgSend(v5, "vcp_dateModified");
    v25 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v6, "setObject:forKey:", v25, CFSTR("dateModified"));

    objc_msgSend(v5, "vcp_dateAnalyzed");
    v26 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v6, "setObject:forKey:", v26, CFSTR("dateAnalyzed"));

    objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithUnsignedLongLong:", v32);
    v27 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v6, "setObject:forKey:", v27, CFSTR("performedAnalysisTypes"));

    objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithUnsignedInteger:", v31);
    v28 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v6, "setObject:forKey:", v28, CFSTR("flags"));

    objc_msgSend(v6, "setObject:forKey:", v17, CFSTR("metadataRanges"));
    if ((int)objc_msgSend(v5, "vcp_version") >= 3 && v15 != -1.0)
    {
      objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithDouble:", v15);
      v29 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v6, "setObject:forKey:", v29, CFSTR("quality"));

    }
  }
LABEL_34:

  return v6;
}

void sub_1B6DD6AEC(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

uint64_t VCPBaseRetryIntervalSeconds()
{
  return 60;
}

const __CFString *VCPMAQoSDescription(int a1)
{
  if (a1 > 20)
  {
    switch(a1)
    {
      case 21:
        return CFSTR("Default");
      case 33:
        return CFSTR("UserInteractive");
      case 25:
        return CFSTR("UserInitiated");
    }
  }
  else
  {
    switch(a1)
    {
      case 0:
        return CFSTR("Unspecified");
      case 9:
        return CFSTR("Background");
      case 17:
        return CFSTR("Utility");
    }
  }
  return CFSTR("Unknown");
}

const __CFString *MADStatusDescription(int a1)
{
  if (a1 > -19)
  {
    if (a1 != -18)
    {
      if (!a1)
        return CFSTR("Success");
      return CFSTR("Unknown Error");
    }
    return CFSTR("Status Error");
  }
  else
  {
    if (a1 != -128)
    {
      if (a1 == -50)
        return CFSTR("Parameter Error");
      return CFSTR("Unknown Error");
    }
    return CFSTR("Canceled");
  }
}

BOOL VCPMADGetMemoryUsageInformation(unint64_t a1, unint64_t a2, unint64_t a3, unint64_t a4)
{
  kern_return_t v8;
  _BOOL8 result;
  uint64_t v10;
  kern_return_t v11;
  mach_msg_type_number_t task_info_outCnt;
  integer_t task_info_out[2];
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  if (a3 | a4)
  {
    task_info_outCnt = 93;
    v8 = task_info(*MEMORY[0x1E0C83DA0], 0x16u, task_info_out, &task_info_outCnt);
    result = v8 == 0;
    if (v8)
      return result;
    if (a3)
      *(_QWORD *)a3 = v16;
    if (a4)
      *(_QWORD *)a4 = v17;
    if (!a1)
      goto LABEL_14;
    v10 = v15;
    goto LABEL_13;
  }
  if (!(a1 | a2))
    return 1;
  task_info_outCnt = 12;
  v11 = task_info(*MEMORY[0x1E0C83DA0], 0x14u, task_info_out, &task_info_outCnt);
  result = v11 == 0;
  if (v11)
    return result;
  if (a1)
  {
    v10 = v14;
LABEL_13:
    *(_QWORD *)a1 = v10;
  }
LABEL_14:
  if (a2)
    *(_QWORD *)a2 = *(_QWORD *)task_info_out;
  return result;
}

__CFString *VCPMADGetReadableMemoryUsageInformation()
{
  void *v0;
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  uint8_t buf[16];
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;

  v11 = 0;
  v9 = 0;
  v10 = 0;
  v8 = 0;
  if (VCPMADGetMemoryUsageInformation((unint64_t)&v11, (unint64_t)&v10, (unint64_t)&v9, (unint64_t)&v8))
  {
    v0 = (void *)MEMORY[0x1E0CB3940];
    _humanReadableMemorySize(v11);
    v1 = (void *)objc_claimAutoreleasedReturnValue();
    _humanReadableMemorySize(v10);
    v2 = (void *)objc_claimAutoreleasedReturnValue();
    _humanReadableMemorySize(v9);
    v3 = (void *)objc_claimAutoreleasedReturnValue();
    _humanReadableMemorySize(v8);
    v4 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v0, "stringWithFormat:", CFSTR("resident: %@, virtual: %@, phys_footprint: %@, phys_footprint_peak: %@."), v1, v2, v3, v4);
    v5 = (void *)objc_claimAutoreleasedReturnValue();

    return (__CFString *)v5;
  }
  else
  {
    if ((int)MediaAnalysisLogLevel() >= 3 && os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)buf = 0;
      _os_log_impl(&dword_1B6C4A000, MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR, "Failed to get memory information", buf, 2u);
    }
    return CFSTR("resident: N/A, virtual: N/A, phys_footprint: N/A, phys_footprint_peak: N/A.");
  }
}

void sub_1B6DD6EE8(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  _Unwind_Resume(a1);
}

id _humanReadableMemorySize(unint64_t a1)
{
  const __CFString *v1;
  uint64_t v2;
  unint64_t v3;
  unsigned int v4;
  unint64_t v5;
  void *v6;
  uint64_t i;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  uint64_t v12;

  v12 = *MEMORY[0x1E0C80C00];
  v9 = xmmword_1E6B18FD0;
  v10 = *(_OWORD *)&off_1E6B18FE0;
  v11 = xmmword_1E6B18FF0;
  if (a1 >= 0x100000)
  {
    v2 = 0;
    v3 = a1;
    do
    {
      a1 = v3 >> 10;
      v4 = v2++;
      if (v4 > 4)
        break;
      v5 = v3 >> 30;
      v3 >>= 10;
    }
    while (v5);
    v1 = (const __CFString *)*((_QWORD *)&v9 + v2);
  }
  else
  {
    v1 = CFSTR("Bytes");
  }
  objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("%llu %@"), a1, v1, v9, v10, v11);
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  for (i = 40; i != -8; i -= 8)

  return v6;
}

void sub_1B6DD7010(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11)
{
  uint64_t i;

  for (i = 40; i != -8; i -= 8)

  _Unwind_Resume(a1);
}

uint64_t VCPMAVNRequestSupportRevision(void *a1, void *a2)
{
  id v3;
  void *v4;
  NSObject *v5;
  const char *v6;
  uint32_t v7;
  uint64_t v8;
  void *v10;
  char v11;
  int v12;
  id v13;
  __int16 v14;
  id v15;
  uint64_t v16;

  v16 = *MEMORY[0x1E0C80C00];
  v3 = a1;
  NSSelectorFromString(CFSTR("supportedRevisions"));
  if ((objc_opt_respondsToSelector() & 1) == 0
    || (NSSelectorFromString(CFSTR("supportedPrivateRevisions")), (objc_opt_respondsToSelector() & 1) == 0))
  {
    if ((int)MediaAnalysisLogLevel() < 3 || !os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
      goto LABEL_9;
    v12 = 138412290;
    v13 = v3;
    v5 = MEMORY[0x1E0C81028];
    v6 = "Failed to query supported revision; %@ does not support";
    v7 = 12;
    goto LABEL_8;
  }
  objc_msgSend(v3, "supportedRevisions");
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  if (objc_msgSend(v4, "containsIndex:", a2))
  {

LABEL_12:
    v8 = 1;
    goto LABEL_10;
  }
  objc_msgSend(v3, "supportedPrivateRevisions");
  v10 = (void *)objc_claimAutoreleasedReturnValue();
  v11 = objc_msgSend(v10, "containsIndex:", a2);

  if ((v11 & 1) != 0)
    goto LABEL_12;
  if ((int)MediaAnalysisLogLevel() >= 3 && os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
  {
    v12 = 134218242;
    v13 = a2;
    v14 = 2112;
    v15 = v3;
    v5 = MEMORY[0x1E0C81028];
    v6 = "Unsupported revision (%lu) for %@";
    v7 = 22;
LABEL_8:
    _os_log_impl(&dword_1B6C4A000, v5, OS_LOG_TYPE_ERROR, v6, (uint8_t *)&v12, v7);
  }
LABEL_9:
  v8 = 0;
LABEL_10:

  return v8;
}

void sub_1B6DD7214(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

uint64_t VCPMAGetRevisionForMediaAnalysisType(uint64_t a1)
{
  void *v3;
  int v4;
  void *v5;
  uint64_t v6;

  v6 = *MEMORY[0x1E0C80C00];
  if (a1 == 0x1000000000)
    return 3;
  if ((int)MediaAnalysisLogLevel() >= 4 && os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_DEFAULT))
  {
    MediaAnalysisTypeDescription(a1);
    v3 = (void *)objc_claimAutoreleasedReturnValue();
    v4 = 138412290;
    v5 = v3;
    _os_log_impl(&dword_1B6C4A000, MEMORY[0x1E0C81028], OS_LOG_TYPE_DEFAULT, "Checking revision for %@ is not supporteds", (uint8_t *)&v4, 0xCu);

  }
  return 0;
}

uint64_t VCPMADUnifiedBackgroundProcessing()
{
  unsigned __int8 v0;

  {
    VCPMADUnifiedBackgroundProcessing::enabled = DeviceHasANE();
  }
  return VCPMADUnifiedBackgroundProcessing::enabled;
}

void sub_1B6DD7384(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

float VCPPersonFaceVIPMatchingThreshold()
{
  return 0.5;
}

const __CFString *VCPVersionKeyForTask(uint64_t a1)
{
  uint64_t v1;
  const __CFString *result;

  v1 = a1 - 1;
  result = 0;
  switch(v1)
  {
    case 0:
      result = CFSTR("MediaAnalysisVersion");
      break;
    case 1:
      result = CFSTR("SceneAnalysisVersion");
      break;
    case 2:
      result = CFSTR("FaceAnalysisVersion");
      break;
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 10:
      return result;
    case 9:
      result = CFSTR("OCRAnalysisVersion");
      break;
    case 11:
      result = CFSTR("VisualSearchAnalysisVersion");
      break;
    default:
      result = 0;
      break;
  }
  return result;
}

const __CFString *VCPStartTimestampKeyForTask(uint64_t a1)
{
  uint64_t v1;
  const __CFString *result;

  v1 = a1 - 1;
  result = 0;
  switch(v1)
  {
    case 0:
      result = CFSTR("LatestVersionTimeStamp");
      break;
    case 1:
      result = CFSTR("LatestSceneAnalysisVersionTimestamp");
      break;
    case 2:
      result = CFSTR("LatestFaceAnalysisVersionTimestamp");
      break;
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 10:
      return result;
    case 9:
      result = CFSTR("LatestOCRAnalysisVersionTimestamp");
      break;
    case 11:
      result = CFSTR("LatestVisualSearchAnalysisVersionTimestamp");
      break;
    default:
      result = 0;
      break;
  }
  return result;
}

const __CFString *VCPCompleteTimestampKeyForTask(uint64_t a1, int a2)
{
  uint64_t v2;
  const __CFString *result;

  v2 = a1 - 1;
  if (a2)
  {
    result = 0;
    switch(v2)
    {
      case 0:
        result = CFSTR("MediaAnalysisCompleteWithFailureTimestamp");
        break;
      case 1:
        result = CFSTR("SceneAnalysisCompleteWithFailureTimestamp");
        break;
      case 2:
        result = CFSTR("FaceAnalysisCompleteWithFailureTimestamp");
        break;
      case 3:
      case 4:
      case 5:
      case 6:
      case 7:
      case 8:
      case 10:
        return result;
      case 9:
        result = CFSTR("OCRAnalysisCompleteWithFailureTimestamp");
        break;
      case 11:
        result = CFSTR("VisualSearchAnalysisCompleteWithFailureTimestamp");
        break;
      default:
        goto LABEL_6;
    }
  }
  else
  {
    result = 0;
    switch(v2)
    {
      case 0:
        result = CFSTR("MediaAnalysisCompleteTimestamp");
        break;
      case 1:
        result = CFSTR("SceneAnalysisCompleteTimestamp");
        break;
      case 2:
        result = CFSTR("FaceAnalysisCompleteTimestamp");
        break;
      case 3:
      case 4:
      case 5:
      case 6:
      case 7:
      case 8:
      case 10:
        return result;
      case 9:
        result = CFSTR("OCRAnalysisCompleteTimestamp");
        break;
      case 11:
        result = CFSTR("VisualSearchAnalysisCompleteTimestamp");
        break;
      default:
LABEL_6:
        result = 0;
        break;
    }
  }
  return result;
}

const __CFString *VCPProgressPercentageKeyForTask(uint64_t a1, int a2)
{
  uint64_t v2;
  const __CFString *result;

  v2 = a1 - 1;
  if (a2)
  {
    result = 0;
    switch(v2)
    {
      case 0:
        result = CFSTR("MediaAnalysisProgressPercentageWithFailure");
        break;
      case 1:
        result = CFSTR("SceneAnalysisProgressPercentageWithFailure");
        break;
      case 2:
        result = CFSTR("FaceAnalysisProgressPercentageWithFailure");
        break;
      case 3:
      case 4:
      case 5:
      case 6:
      case 7:
      case 8:
      case 10:
        return result;
      case 9:
        result = CFSTR("OCRAnalysisProgressPercentageWithFailure");
        break;
      case 11:
        result = CFSTR("VisualSearchAnalysisProgressPercentageWithFailure");
        break;
      default:
        goto LABEL_6;
    }
  }
  else
  {
    result = 0;
    switch(v2)
    {
      case 0:
        result = CFSTR("MediaAnalysisProgressPercentage");
        break;
      case 1:
        result = CFSTR("SceneAnalysisProgressPercentage");
        break;
      case 2:
        result = CFSTR("FaceAnalysisProgressPercentage");
        break;
      case 3:
      case 4:
      case 5:
      case 6:
      case 7:
      case 8:
      case 10:
        return result;
      case 9:
        result = CFSTR("OCRAnalysisProgressPercentage");
        break;
      case 11:
        result = CFSTR("VisualSearchAnalysisProgressPercentage");
        break;
      default:
LABEL_6:
        result = 0;
        break;
    }
  }
  return result;
}

const __CFString *VCPBGSTCheckpointTimestampKeyForTask(uint64_t a1, int a2)
{
  uint64_t v2;
  const __CFString *result;

  v2 = a1 - 1;
  if (a2)
  {
    result = 0;
    switch(v2)
    {
      case 0:
        result = CFSTR("MediaAnalysisCheckpointWithFailureReportedTimestamp");
        break;
      case 1:
        result = CFSTR("SceneAnalysisCheckpointWithFailureReportedTimestamp");
        break;
      case 2:
        result = CFSTR("FaceAnalysisCheckpointWithFailureReportedTimestamp");
        break;
      case 3:
      case 4:
      case 5:
      case 6:
      case 7:
      case 8:
      case 10:
        return result;
      case 9:
        result = CFSTR("OCRAnalysisCheckpointWithFailureReportedTimestamp");
        break;
      case 11:
        result = CFSTR("VisualSearchAnalysisCheckpointWithFailureReportedTimestamp");
        break;
      default:
        goto LABEL_6;
    }
  }
  else
  {
    result = 0;
    switch(v2)
    {
      case 0:
        result = CFSTR("MediaAnalysisCheckpointReportedTimestamp");
        break;
      case 1:
        result = CFSTR("SceneAnalysisCheckpointReportedTimestamp");
        break;
      case 2:
        result = CFSTR("FaceAnalysisCheckpointReportedTimestamp");
        break;
      case 3:
      case 4:
      case 5:
      case 6:
      case 7:
      case 8:
      case 10:
        return result;
      case 9:
        result = CFSTR("OCRAnalysisCheckpointReportedTimestamp");
        break;
      case 11:
        result = CFSTR("VisualSearchAnalysisCheckpointReportedTimestamp");
        break;
      default:
LABEL_6:
        result = 0;
        break;
    }
  }
  return result;
}

const __CFString *VCPPhotosDatabaseSyncTimestampKeyForTask(uint64_t a1)
{
  if (a1 == 1)
    return CFSTR("LatestMediaAnalysisPhotosDatabaseSyncTimestamp");
  else
    return 0;
}

const __CFString *VCPRequestBGSTProgressReportKeyForTask(uint64_t a1)
{
  uint64_t v1;
  const __CFString *result;

  v1 = a1 - 1;
  result = 0;
  switch(v1)
  {
    case 0:
      result = CFSTR("MediaAnalysisRequestBGSTProgressReport");
      break;
    case 1:
      result = CFSTR("SceneAnalysisRequestBGSTProgressReport");
      break;
    case 2:
      result = CFSTR("FaceAnalysisRequestBGSTProgressReport");
      break;
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 10:
      return result;
    case 9:
      result = CFSTR("OCRAnalysisRequestBGSTProgressReport");
      break;
    case 11:
      result = CFSTR("VisualSearchAnalysisRequestBGSTProgressReport");
      break;
    default:
      result = 0;
      break;
  }
  return result;
}

const __CFString *VCPLastBGSTProgressReportAttemptKeyForTask(uint64_t a1)
{
  uint64_t v1;
  const __CFString *result;

  v1 = a1 - 1;
  result = 0;
  switch(v1)
  {
    case 0:
      result = CFSTR("MediaAnalysisLastBGSTProgressReportAttempt");
      break;
    case 1:
      result = CFSTR("SceneAnalysisLastBGSTProgressReportAttempt");
      break;
    case 2:
      result = CFSTR("FaceAnalysisLastBGSTProgressReportAttempt");
      break;
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 10:
      return result;
    case 9:
      result = CFSTR("OCRAnalysisLastBGSTProgressReportAttempt");
      break;
    case 11:
      result = CFSTR("VisualSearchAnalysisLastBGSTProgressReportAttempt");
      break;
    default:
      result = 0;
      break;
  }
  return result;
}

uint64_t MADCheckBackUpVersion(unint64_t a1)
{
  return (a1 < 0xB) & (0x40Eu >> a1);
}

double MADRetryBackoffTime(unint64_t a1)
{
  uint64_t v1;

  v1 = 5;
  if (a1 < 5)
    v1 = a1;
  return MADRetryBackoffTime::kBackoffInterval[v1];
}

BOOL MADIsPECProcessingEnabled()
{
  int AppBooleanValue;
  BOOL v1;
  Boolean keyExistsAndHasValidFormat;

  keyExistsAndHasValidFormat = 0;
  AppBooleanValue = CFPreferencesGetAppBooleanValue(CFSTR("enhancedVisualSearchEnabled"), CFSTR("com.apple.mobileslideshow"), &keyExistsAndHasValidFormat);
  if (keyExistsAndHasValidFormat)
    v1 = AppBooleanValue == 0;
  else
    v1 = 0;
  return !v1;
}

id MediaAnalysisJSONStringFromObject(void *a1)
{
  id v1;
  void *v2;
  id v3;
  void *v4;
  id v6;
  uint8_t buf[4];
  id v8;
  uint64_t v9;

  v9 = *MEMORY[0x1E0C80C00];
  v1 = a1;
  if ((objc_msgSend(MEMORY[0x1E0CB36D8], "isValidJSONObject:", v1) & 1) != 0)
  {
    v6 = 0;
    objc_msgSend(MEMORY[0x1E0CB36D8], "dataWithJSONObject:options:error:", v1, 1, &v6);
    v2 = (void *)objc_claimAutoreleasedReturnValue();
    v3 = v6;
    if (v2)
    {
      v4 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0CB3940]), "initWithData:encoding:", v2, 4);
    }
    else
    {
      if ((int)MediaAnalysisLogLevel() >= 3 && os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 138412290;
        v8 = v3;
        _os_log_impl(&dword_1B6C4A000, MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR, "Error parsing JSON output: %@", buf, 0xCu);
      }
      v4 = 0;
    }

  }
  else
  {
    if ((int)MediaAnalysisLogLevel() >= 3 && os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 138412290;
      v8 = v1;
      _os_log_impl(&dword_1B6C4A000, MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR, "Input is not valid JSON-able object - %@", buf, 0xCu);
    }
    v4 = 0;
  }

  return v4;
}

void sub_1B6DD7A6C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1B6DD7B94(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1B6DD7CFC(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_1B6DD7DB0(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1B6DD7F50(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1B6DD8184(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1B6DD85FC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{
  void *v10;
  void *v11;

  _Unwind_Resume(a1);
}

void sub_1B6DD8C54(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9, uint64_t a10, void *a11)
{
  void *v11;

  _Unwind_Resume(a1);
}

void sub_1B6DD92BC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *a19, uint64_t a20,void *a21)
{

  _Unwind_Resume(a1);
}

void sub_1B6DD9AFC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, void *a15, uint64_t a16, void *a17)
{
  void *v17;

  _Unwind_Resume(a1);
}

void sub_1B6DD9E50(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1B6DD9F64(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_1B6DDA05C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1B6DDA740(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, void *a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,void *a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,char a46)
{
  CVPixelBufferLock::~CVPixelBufferLock((CVPixelBufferLock *)&a46);

  _Unwind_Resume(a1);
}

void sub_1B6DDA9B4(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1B6DDAE6C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  CVPixelBufferLock::~CVPixelBufferLock((CVPixelBufferLock *)va);
  _Unwind_Resume(a1);
}

void sub_1B6DDB144(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  void *v16;

  _Unwind_Resume(a1);
}

void sub_1B6DDB3E8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, const void *a12)
{
  void *v12;

  CVPixelBufferLock::~CVPixelBufferLock((CVPixelBufferLock *)&a9);
  CF<opaqueCMSampleBuffer *>::~CF(&a12);

  _Unwind_Resume(a1);
}

void sub_1B6DDB898(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11)
{
  void *v11;
  void *v12;
  void *v13;

  _Unwind_Resume(a1);
}

void sub_1B6DDBAC0(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1B6DDBE38(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1B6DDC154(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1B6DDC694(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, void *a11)
{
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  void *v16;
  void *v17;

  _Unwind_Resume(a1);
}

void sub_1B6DDC8C8(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  _Unwind_Resume(a1);
}

void sub_1B6DDCD04(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;

  _Unwind_Resume(a1);
}

void sub_1B6DDCF48(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;

  _Unwind_Resume(a1);
}

void sub_1B6DDD140(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_1B6DDD2B4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_1B6DDD4E4(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1B6DDD698(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  void *v14;

  _Unwind_Resume(a1);
}

void sub_1B6DDD7C8(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1B6DDDA44(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;

  v10 = v9;

  _Unwind_Resume(a1);
}

void sub_1B6DDDCB4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;

  v5 = v3;

  _Unwind_Resume(a1);
}

void sub_1B6DDE5BC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12, char a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,void *a25,uint64_t a26)
{
  void *v26;
  void *v27;
  void *v28;
  void *v29;
  void *v30;
  void *v31;

  if (__p)
    operator delete(__p);
  if (a25)
  {
    a26 = (uint64_t)a25;
    operator delete(a25);
  }
  CVPixelBufferLock::~CVPixelBufferLock((CVPixelBufferLock *)&a13);

  _Unwind_Resume(a1);
}

_QWORD *std::vector<unsigned char>::vector(_QWORD *a1, size_t a2)
{
  char *v4;
  char *v5;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    std::vector<unsigned char>::__vallocate[abi:ne180100](a1, a2);
    v4 = (char *)a1[1];
    v5 = &v4[a2];
    bzero(v4, a2);
    a1[1] = v5;
  }
  return a1;
}

void sub_1B6DDE6E0(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

char *std::vector<unsigned char>::__vallocate[abi:ne180100](_QWORD *a1, size_t __sz)
{
  char *result;

  if ((__sz & 0x8000000000000000) != 0)
    std::vector<std::unique_ptr<VCPProtoKeypoint>>::__throw_length_error[abi:ne180100]();
  result = (char *)operator new(__sz);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[__sz];
  return result;
}

void sub_1B6DDE900(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_1B6DDF570(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *a20,uint64_t a21,uint64_t a22,void *a23,void *a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,void *a29)
{
  void *v29;
  void *v30;

  _Block_object_dispose(&STACK[0x200], 8);
  _Unwind_Resume(a1);
}

uint64_t __Block_byref_object_copy__25(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void __Block_byref_object_dispose__25(uint64_t a1)
{

}

ma::QualitySegment *ma::QualitySegment::QualitySegment(ma::QualitySegment *this)
{
  ma::Segment *v2;

  v2 = ma::Segment::Segment(this);
  *(_QWORD *)v2 = &unk_1E6B13F08;
  *((_BYTE *)v2 + 72) = 0;
  *((_DWORD *)v2 + 19) = 0;
  *((_BYTE *)v2 + 80) = 0;
  ma::Translation::Translation((uint64_t)v2 + 84);
  ma::Translation::Translation((uint64_t)this + 96);
  ma::Translation::Translation((uint64_t)this + 108);
  *((_QWORD *)this + 15) = 0;
  *((_QWORD *)this + 16) = 0;
  *((_DWORD *)this + 36) = 0;
  *((_QWORD *)this + 17) = 0;
  return this;
}

uint64_t ma::QualitySegment::UpdateStats(ma::QualitySegment *this, const Frame *a2, const Frame *a3, float a4)
{
  float v8;
  float v9;
  int v10;
  CMTimeScale v11;
  float v12;
  int v13;
  CMTimeScale v14;
  float v15;
  float v16;
  float v17;
  float v18;
  uint64_t result;
  int v20;
  CMTime time;
  CMTime time2;
  CMTime time1;

  *(_OWORD *)&time1.value = *(_OWORD *)(&a2->frame_idx_ + 1);
  time1.epoch = *(_QWORD *)&a2->timestamp_.flags;
  *(_OWORD *)&time2.value = *(_OWORD *)(&a3->frame_idx_ + 1);
  time2.epoch = *(_QWORD *)&a3->timestamp_.flags;
  if (CMTimeCompare(&time1, &time2))
  {
    time1 = *(CMTime *)(&a2->frame_idx_ + 1);
    time2 = *(CMTime *)(&a3->frame_idx_ + 1);
    CMTimeSubtract(&time, &time1, &time2);
    v8 = 0.0333333351 / CMTimeGetSeconds(&time);
    if (v8 < 0.5)
      v8 = 0.5;
    v9 = v8 * a4;
  }
  else
  {
    v9 = 1.0;
  }
  LODWORD(time1.value) = ma::Translation::operator*((float *)&a2->distortion_ + 1, v9);
  HIDWORD(time1.value) = v10;
  time1.timescale = v11;
  v12 = v9 * ma::Translation::AbsSum((ma::Translation *)((char *)&a2->duration_.epoch + 4));
  ma::Translation::operator+=((float32x2_t *)((char *)this + 84), (float32x2_t *)&time1);
  LODWORD(time2.value) = ma::Translation::operator*((float32x2_t *)&time1, (float32x2_t *)&time1).u32[0];
  HIDWORD(time2.value) = v13;
  time2.timescale = v14;
  ma::Translation::operator+=((float32x2_t *)this + 12, (float32x2_t *)&time2);
  v15 = ma::Translation::CroCorr((ma::Translation *)((char *)&a2->duration_.epoch + 4), (const ma::Translation *)((char *)&a3->duration_.epoch + 4));
  v16 = *((float *)this + 31);
  *((float *)this + 30) = v15 + *((float *)this + 30);
  *((float *)this + 31) = v12 + v16;
  v17 = *((float *)this + 32);
  v18 = *((float *)this + 33);
  if (v12 >= v17)
    v17 = v12;
  *((float *)this + 32) = v17;
  *((float *)this + 33) = a2->org_motion_.z_ + v18;
  ma::Translation::operator+=((float32x2_t *)((char *)this + 108), (float32x2_t *)((char *)&a2->duration_.epoch + 4));
  result = ma::Histogram::NoInfo((ma::Histogram *)&a2->colorfulness_score_);
  v20 = *((_DWORD *)this + 35);
  *((_DWORD *)this + 34) += result;
  *((_DWORD *)this + 35) = v20 + LOBYTE(a2->motion_change_.z_);
  ++*((_DWORD *)this + 5);
  return result;
}

uint64_t ma::QualitySegment::ResetStats(ma::QualitySegment *this, const Frame *a2, const Frame *a3, float a4)
{
  uint64_t result;

  ma::Translation::Translation((uint64_t)this + 84);
  ma::Translation::Translation((uint64_t)this + 96);
  ma::Translation::Translation((uint64_t)this + 108);
  *((_DWORD *)this + 5) = 0;
  *((_BYTE *)this + 80) = 0;
  *(_QWORD *)((char *)this + 132) = 0;
  *(_QWORD *)((char *)this + 124) = 0;
  *((_DWORD *)this + 35) = 0;
  result = ma::QualitySegment::UpdateStats(this, a2, a3, a4);
  *((_DWORD *)this + 30) = 1065353216;
  return result;
}

void ma::QualitySegment::CalculateQualityScore(ma::QualitySegment *this, int a2)
{
  int v3;
  float v4;
  float v5;
  float v6;
  float v7;
  float v8;
  float v9;
  __int32 v10;
  int v11;
  float v12;
  float v13;
  float v14;
  float v15;
  int v16;
  int v17;
  float v18;
  float v19;
  float v20;
  int32x2_t v21;
  float32x2_t v27;
  float v28;
  float v29[3];
  _DWORD v30[3];
  float v31[3];
  float32x2_t v32;
  int v33;

  v3 = *((_DWORD *)this + 5);
  if (v3)
  {
    if (a2)
      v4 = 400.0;
    else
      v4 = 10.0;
    if (a2)
      v5 = 0.2;
    else
      v5 = 0.07;
    if (a2)
      v6 = 1.0;
    else
      v6 = 0.7;
    v7 = *((float *)this + 30) / (float)v3;
    v8 = (float)v3 / 5.0;
    if (v8 > 1.0)
      v8 = 1.0;
    v9 = (float)(v8 * (float)(*((float *)this + 31) / (float)v3)) + (float)((float)(1.0 - v8) * *((float *)this + 32));
    v32.i32[0] = ma::Translation::operator/((float *)this + 21, (float)v3);
    v32.i32[1] = v10;
    v33 = v11;
    v31[0] = ma::Translation::operator/((float *)this + 24, (float)*((int *)this + 5));
    v31[1] = v12;
    v31[2] = v13;
    LODWORD(v29[0]) = ma::Translation::operator*(&v32, &v32).u32[0];
    v29[1] = v14;
    v29[2] = v15;
    v30[0] = ma::Translation::operator-(v31, v29);
    v30[1] = v16;
    v30[2] = v17;
    v18 = expf(-(float)(v5 * v9));
    v19 = ma::Translation::AbsSum((ma::Translation *)v30);
    v20 = expf((float)((float)((float)((float)((float)(v7 * (float)(v7 + v7)) / (float)((float)(v9 * 3.0) + 1.0)) + 1.0)* (float)(v19 * -0.00025))/ (float)((float)(v7 * (float)(v7 + v7)) + 1.0))* v4);
    *(float *)v21.i32 = (float)*((int *)this + 5);
    __asm { FMOV            V2.2S, #1.0 }
    v27 = vsub_f32(_D2, vdiv_f32(vcvt_f32_s32(*(int32x2_t *)((char *)this + 136)), (float32x2_t)vdup_lane_s32(v21, 0)));
    v28 = vmuls_lane_f32((float)((float)(v6 * fmaxf(v18, 0.0)) + (float)((float)(1.0 - v6) * fmaxf(v20, 0.0))) * v27.f32[0], v27, 1);
  }
  else
  {
    v28 = 0.0;
  }
  *((float *)this + 19) = v28;
}

void ma::QualitySegment::Merge(ma::QualitySegment *this, const ma::QualitySegment *a2, char a3, int a4)
{
  double Seconds;
  double v9;
  float v10;
  float v11;
  float v12;
  float v13;
  float v14;
  CMTime v15;
  CMTime time;

  time = *(CMTime *)((_BYTE *)a2 + 2);
  Seconds = CMTimeGetSeconds(&time);
  v15 = *(CMTime *)((_BYTE *)this + 2);
  v9 = CMTimeGetSeconds(&v15);
  ma::Translation::operator+=((float32x2_t *)((char *)this + 84), (float32x2_t *)((char *)a2 + 84));
  ma::Translation::operator+=((float32x2_t *)this + 12, (float32x2_t *)a2 + 12);
  *((float32x2_t *)this + 15) = vadd_f32(*(float32x2_t *)((char *)a2 + 120), *(float32x2_t *)((char *)this + 120));
  v10 = *((float *)a2 + 32);
  if (v10 < *((float *)this + 32))
    v10 = *((float *)this + 32);
  *((float *)this + 32) = v10;
  *((int32x2_t *)this + 17) = vadd_s32(*(int32x2_t *)((char *)this + 136), *(int32x2_t *)((char *)a2 + 136));
  ma::Translation::operator+=((float32x2_t *)((char *)this + 108), (float32x2_t *)((char *)a2 + 108));
  *((float *)this + 33) = *((float *)a2 + 33) + *((float *)this + 33);
  ma::Segment::Merge(this, a2);
  if (a4)
  {
    if ((a3 & 1) != 0
      || *((_BYTE *)this + 72) && *((_BYTE *)a2 + 72)
      || *((unsigned __int8 *)this + 80) | *((unsigned __int8 *)a2 + 80))
    {
      goto LABEL_11;
    }
    v11 = *((float *)this + 36);
    if (v11 < *((float *)a2 + 36))
      v11 = *((float *)a2 + 36);
    if (v11 != 0.0)
    {
LABEL_11:
      v12 = Seconds;
      v13 = v9;
      *((float *)this + 19) = (float)((float)(*((float *)this + 19) * v13) + (float)(*((float *)a2 + 19) * v12))
                            / (float)(v12 + v13);
      *((float *)this + 36) = (float)((float)(*((float *)this + 36) * v13) + (float)(*((float *)a2 + 36) * v12))
                            / (float)(v12 + v13);
    }
    else if (*((unsigned __int8 *)this + 72) == *((unsigned __int8 *)a2 + 72))
    {
      ma::QualitySegment::CalculateQualityScore(this, 0);
    }
    else
    {
      v14 = *((float *)a2 + 19);
      if (v14 >= *((float *)this + 19))
        v14 = *((float *)this + 19);
      *((float *)this + 19) = v14;
    }
  }
  *((_BYTE *)this + 72) |= *((_BYTE *)a2 + 72);
  *((_BYTE *)this + 80) |= *((_BYTE *)a2 + 80);
}

BOOL ma::QualitySegment::IsShort(ma::QualitySegment *this, int a2, float a3)
{
  double v5;
  double Seconds;
  double v7;
  CMTime v9;

  v5 = (float)(a3 * 0.8);
  v9 = *(CMTime *)((_BYTE *)this + 2);
  Seconds = CMTimeGetSeconds(&v9);
  v7 = 0.300000012;
  if (!a2)
    v7 = v5;
  return Seconds < v7 && ma::Translation::AbsSum((ma::QualitySegment *)((char *)this + 108)) < 1200.0;
}

BOOL ma::QualitySegment::IsTracking(ma::QualitySegment *this)
{
  return *((float *)this + 36) > 0.35;
}

float ma::QualitySegment::QuantizeQualityScore(ma::QualitySegment *this)
{
  float result;

  result = roundf(*((float *)this + 19) * 5.0) / 5.0;
  *((float *)this + 19) = result;
  return result;
}

BOOL ma::QualitySegment::ReviseQualityScoreForTimelapse(int32x2_t *this)
{
  _BOOL8 result;
  int32x2_t v3;
  int v4;
  float32x2_t v10;
  float v11;

  result = ma::QualitySegment::IsShort((ma::QualitySegment *)this, 1, 1.0);
  if (!result && !this[9].i8[0])
  {
    v4 = this[2].i32[1];
    if (v4 >= 1)
    {
      *(float *)v3.i32 = (float)v4;
      __asm { FMOV            V2.2S, #1.0 }
      v10 = vsub_f32(_D2, vdiv_f32(vcvt_f32_s32(this[17]), (float32x2_t)vdup_lane_s32(v3, 0)));
      v11 = vmuls_lane_f32(fminf((float)((float)(*(float *)this[15].i32 / (float)v4) * 2.0) + -0.8, 0.8) * v10.f32[0], v10, 1);
      if (*(float *)&this[9].i32[1] >= v11)
        v11 = *(float *)&this[9].i32[1];
      *(float *)&this[9].i32[1] = v11;
    }
  }
  return result;
}

void ma::QualitySegment::~QualitySegment(ma::QualitySegment *this)
{
  JUMPOUT(0x1BCCA12BCLL);
}

uint64_t VCPProtoAssetAnalysisReadFrom(_BYTE *a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  char v14;
  BOOL v15;
  uint64_t v16;
  int v17;
  char v19;
  unsigned int v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  char v25;
  uint64_t result;
  char v27;
  unsigned int v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  char v32;
  char v33;
  unsigned int v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  char v38;
  uint64_t v39;
  unint64_t v40;
  uint64_t v41;
  uint64_t v42;
  unint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  unint64_t v47;
  VCPProtoImageBlurResult *v48;
  char v49;
  unsigned int v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  unint64_t v54;
  char v55;
  char v56;
  unsigned int v57;
  uint64_t v58;
  uint64_t v59;
  unint64_t v60;
  char v61;
  void *v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) >= *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
    return *(_BYTE *)(a2 + *v5) == 0;
  v7 = (int *)MEMORY[0x1E0D82BB8];
  while (2)
  {
    if (*(_BYTE *)(a2 + *v5))
      return *(_BYTE *)(a2 + *v5) == 0;
    v8 = 0;
    v9 = 0;
    v10 = 0;
    while (1)
    {
      v11 = *v3;
      v12 = *(_QWORD *)(a2 + v11);
      v13 = v12 + 1;
      if (v12 == -1 || v13 > *(_QWORD *)(a2 + *v4))
        break;
      v14 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
      *(_QWORD *)(a2 + v11) = v13;
      v10 |= (unint64_t)(v14 & 0x7F) << v8;
      if ((v14 & 0x80) == 0)
        goto LABEL_12;
      v8 += 7;
      v15 = v9++ >= 9;
      if (v15)
      {
        v10 = 0;
        v16 = *v5;
        v17 = *(unsigned __int8 *)(a2 + v16);
        goto LABEL_14;
      }
    }
    *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
    v16 = *v5;
    v17 = *(unsigned __int8 *)(a2 + v16);
    if (*(_BYTE *)(a2 + v16))
      v10 = 0;
LABEL_14:
    if (v17 || (v10 & 7) == 4)
      return *(_BYTE *)(a2 + *v5) == 0;
    switch((v10 >> 3))
    {
      case 1u:
        v19 = 0;
        v20 = 0;
        v21 = 0;
        while (1)
        {
          v22 = *v3;
          v23 = *(_QWORD *)(a2 + v22);
          v24 = v23 + 1;
          if (v23 == -1 || v24 > *(_QWORD *)(a2 + *v4))
            break;
          v25 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v23);
          *(_QWORD *)(a2 + v22) = v24;
          v21 |= (unint64_t)(v25 & 0x7F) << v19;
          if ((v25 & 0x80) == 0)
            goto LABEL_285;
          v19 += 7;
          v15 = v20++ >= 9;
          if (v15)
          {
            LODWORD(v21) = 0;
            goto LABEL_287;
          }
        }
        *(_BYTE *)(a2 + *v5) = 1;
LABEL_285:
        if (*(_BYTE *)(a2 + *v5))
          LODWORD(v21) = 0;
LABEL_287:
        v63 = 652;
        goto LABEL_296;
      case 2u:
        v27 = 0;
        v28 = 0;
        v21 = 0;
        while (2)
        {
          v29 = *v3;
          v30 = *(_QWORD *)(a2 + v29);
          v31 = v30 + 1;
          if (v30 == -1 || v31 > *(_QWORD *)(a2 + *v4))
          {
            *(_BYTE *)(a2 + *v5) = 1;
          }
          else
          {
            v32 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v30);
            *(_QWORD *)(a2 + v29) = v31;
            v21 |= (unint64_t)(v32 & 0x7F) << v27;
            if (v32 < 0)
            {
              v27 += 7;
              v15 = v28++ >= 9;
              if (v15)
              {
                LODWORD(v21) = 0;
                goto LABEL_291;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(a2 + *v5))
          LODWORD(v21) = 0;
LABEL_291:
        v63 = 648;
        goto LABEL_296;
      case 3u:
        v33 = 0;
        v34 = 0;
        v21 = 0;
        while (2)
        {
          v35 = *v3;
          v36 = *(_QWORD *)(a2 + v35);
          v37 = v36 + 1;
          if (v36 == -1 || v37 > *(_QWORD *)(a2 + *v4))
          {
            *(_BYTE *)(a2 + *v5) = 1;
          }
          else
          {
            v38 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v36);
            *(_QWORD *)(a2 + v35) = v37;
            v21 |= (unint64_t)(v38 & 0x7F) << v33;
            if (v38 < 0)
            {
              v33 += 7;
              v15 = v34++ >= 9;
              if (v15)
              {
                LODWORD(v21) = 0;
                goto LABEL_295;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(a2 + *v5))
          LODWORD(v21) = 0;
LABEL_295:
        v63 = 160;
LABEL_296:
        *(_DWORD *)&a1[v63] = v21;
        goto LABEL_282;
      case 4u:
        v39 = *v3;
        v40 = *(_QWORD *)(a2 + v39);
        if (v40 <= 0xFFFFFFFFFFFFFFF7 && v40 + 8 <= *(_QWORD *)(a2 + *v4))
        {
          v41 = *(_QWORD *)(*(_QWORD *)(a2 + *v7) + v40);
          *(_QWORD *)(a2 + v39) = v40 + 8;
        }
        else
        {
          *(_BYTE *)(a2 + v16) = 1;
          v41 = 0;
        }
        v65 = 16;
        goto LABEL_312;
      case 5u:
        a1[688] |= 1u;
        v42 = *v3;
        v43 = *(_QWORD *)(a2 + v42);
        if (v43 <= 0xFFFFFFFFFFFFFFF7 && v43 + 8 <= *(_QWORD *)(a2 + *v4))
        {
          v41 = *(_QWORD *)(*(_QWORD *)(a2 + *v7) + v43);
          *(_QWORD *)(a2 + v42) = v43 + 8;
        }
        else
        {
          *(_BYTE *)(a2 + *v5) = 1;
          v41 = 0;
        }
        v65 = 24;
        goto LABEL_312;
      case 6u:
        PBReaderReadString();
        v44 = objc_claimAutoreleasedReturnValue();
        v45 = 72;
        goto LABEL_252;
      case 7u:
        v46 = *v3;
        v47 = *(_QWORD *)(a2 + v46);
        if (v47 <= 0xFFFFFFFFFFFFFFF7 && v47 + 8 <= *(_QWORD *)(a2 + *v4))
        {
          v41 = *(_QWORD *)(*(_QWORD *)(a2 + *v7) + v47);
          *(_QWORD *)(a2 + v46) = v47 + 8;
        }
        else
        {
          *(_BYTE *)(a2 + v16) = 1;
          v41 = 0;
        }
        v65 = 8;
LABEL_312:
        *(_QWORD *)&a1[v65] = v41;
        goto LABEL_282;
      case 8u:
        PBReaderReadString();
        v44 = objc_claimAutoreleasedReturnValue();
        v45 = 80;
        goto LABEL_252;
      case 9u:
        PBReaderReadString();
        v44 = objc_claimAutoreleasedReturnValue();
        v45 = 56;
        goto LABEL_252;
      case 0xAu:
        v48 = objc_alloc_init(VCPProtoImageBlurResult);
        objc_msgSend(a1, "addImageBlurResults:", v48);
        if (!PBReaderPlaceMark() || !VCPProtoImageBlurResultReadFrom((uint64_t)v48, a2))
          goto LABEL_314;
        goto LABEL_281;
      case 0xBu:
        v48 = objc_alloc_init(VCPProtoImageCompositionResult);
        objc_msgSend(a1, "addImageCompositionResults:", v48);
        if (!PBReaderPlaceMark() || (VCPProtoImageCompositionResultReadFrom((uint64_t)v48, a2) & 1) == 0)
          goto LABEL_314;
        goto LABEL_281;
      case 0xCu:
        v48 = objc_alloc_init(VCPProtoImageFaceResult);
        objc_msgSend(a1, "addImageFaceResults:", v48);
        if (!PBReaderPlaceMark() || (VCPProtoImageFaceResultReadFrom((uint64_t)v48, a2) & 1) == 0)
          goto LABEL_314;
        goto LABEL_281;
      case 0xDu:
        v48 = objc_alloc_init(VCPProtoImageFeatureResult);
        objc_msgSend(a1, "addImageFeatureResults:", v48);
        if (!PBReaderPlaceMark() || (VCPProtoImageFeatureResultReadFrom((uint64_t)v48, a2) & 1) == 0)
          goto LABEL_314;
        goto LABEL_281;
      case 0xEu:
        v48 = objc_alloc_init(VCPProtoImageJunkResult);
        objc_msgSend(a1, "addImageJunkResults:", v48);
        if (!PBReaderPlaceMark() || (VCPProtoImageJunkResultReadFrom((uint64_t)v48, a2) & 1) == 0)
          goto LABEL_314;
        goto LABEL_281;
      case 0xFu:
        v48 = objc_alloc_init(VCPProtoImageSaliencyResult);
        objc_msgSend(a1, "addImageSaliencyResults:", v48);
        if (!PBReaderPlaceMark() || (VCPProtoImageSaliencyResultReadFrom((uint64_t)v48, a2) & 1) == 0)
          goto LABEL_314;
        goto LABEL_281;
      case 0x10u:
        v48 = objc_alloc_init(VCPProtoImageShotTypeResult);
        objc_msgSend(a1, "addImageShotTypeResults:", v48);
        if (!PBReaderPlaceMark() || (VCPProtoImageShotTypeResultReadFrom((uint64_t)v48, a2) & 1) == 0)
          goto LABEL_314;
        goto LABEL_281;
      case 0x11u:
        v48 = objc_alloc_init(VCPProtoLivePhotoRecommendationResult);
        objc_msgSend(a1, "addLivePhotoRecommendationResults:", v48);
        if (!PBReaderPlaceMark()
          || (VCPProtoLivePhotoRecommendationResultReadFrom((uint64_t)v48, a2) & 1) == 0)
        {
          goto LABEL_314;
        }
        goto LABEL_281;
      case 0x12u:
        v48 = objc_alloc_init(VCPProtoLivePhotoSharpnessResult);
        objc_msgSend(a1, "addLivePhotoSharpnessResults:", v48);
        if (!PBReaderPlaceMark() || (VCPProtoLivePhotoSharpnessResultReadFrom((uint64_t)v48, a2) & 1) == 0)
          goto LABEL_314;
        goto LABEL_281;
      case 0x13u:
        v48 = objc_alloc_init(VCPProtoMovieActivityLevelResult);
        objc_msgSend(a1, "addMovieActivityLevelResults:", v48);
        if (!PBReaderPlaceMark() || (VCPProtoMovieActivityLevelResultReadFrom((uint64_t)v48, a2) & 1) == 0)
          goto LABEL_314;
        goto LABEL_281;
      case 0x14u:
        v48 = objc_alloc_init(VCPProtoMovieCameraMotionResult);
        objc_msgSend(a1, "addMovieCameraMotionResults:", v48);
        if (!PBReaderPlaceMark() || (VCPProtoMovieCameraMotionResultReadFrom((uint64_t)v48, a2) & 1) == 0)
          goto LABEL_314;
        goto LABEL_281;
      case 0x15u:
        v48 = objc_alloc_init(VCPProtoMovieClassificationResult);
        objc_msgSend(a1, "addMovieClassificationResults:", v48);
        if (!PBReaderPlaceMark()
          || !VCPProtoMovieClassificationResultReadFrom((id *)&v48->super.super.isa, a2))
        {
          goto LABEL_314;
        }
        goto LABEL_281;
      case 0x16u:
        v48 = objc_alloc_init(VCPProtoMovieFaceResult);
        objc_msgSend(a1, "addMovieFaceResults:", v48);
        if (!PBReaderPlaceMark() || (VCPProtoMovieFaceResultReadFrom((uint64_t)v48, a2) & 1) == 0)
          goto LABEL_314;
        goto LABEL_281;
      case 0x17u:
        v48 = objc_alloc_init(VCPProtoMovieFaceprintResult);
        objc_msgSend(a1, "addMovieFaceprintResults:", v48);
        if (!PBReaderPlaceMark() || (VCPProtoMovieFaceprintResultReadFrom((uint64_t)v48, a2) & 1) == 0)
          goto LABEL_314;
        goto LABEL_281;
      case 0x18u:
        v48 = objc_alloc_init(VCPProtoMovieFeatureResult);
        objc_msgSend(a1, "addMovieFeatureResults:", v48);
        if (!PBReaderPlaceMark() || !VCPProtoMovieFeatureResultReadFrom((uint64_t)v48, a2))
          goto LABEL_314;
        goto LABEL_281;
      case 0x19u:
        v48 = objc_alloc_init(VCPProtoMovieFineSubjectMotionResult);
        objc_msgSend(a1, "addMovieFineSubjectMotionResults:", v48);
        if (!PBReaderPlaceMark()
          || (VCPProtoMovieFineSubjectMotionResultReadFrom((uint64_t)v48, a2) & 1) == 0)
        {
          goto LABEL_314;
        }
        goto LABEL_281;
      case 0x1Au:
        v48 = objc_alloc_init(VCPProtoMovieInterestingnessResult);
        objc_msgSend(a1, "addMovieInterestingnessResults:", v48);
        if (!PBReaderPlaceMark()
          || (VCPProtoMovieInterestingnessResultReadFrom((uint64_t)v48, a2) & 1) == 0)
        {
          goto LABEL_314;
        }
        goto LABEL_281;
      case 0x1Bu:
        v48 = objc_alloc_init(VCPProtoMovieMovingObjectResult);
        objc_msgSend(a1, "addMovieMovingObjectResults:", v48);
        if (!PBReaderPlaceMark()
          || !VCPProtoMovieMovingObjectResultReadFrom((id *)&v48->super.super.isa, a2))
        {
          goto LABEL_314;
        }
        goto LABEL_281;
      case 0x1Cu:
        v48 = objc_alloc_init(VCPProtoMovieMusicResult);
        objc_msgSend(a1, "addMovieMusicResults:", v48);
        if (!PBReaderPlaceMark() || (VCPProtoMovieMusicResultReadFrom((uint64_t)v48, a2) & 1) == 0)
          goto LABEL_314;
        goto LABEL_281;
      case 0x1Du:
        v48 = objc_alloc_init(VCPProtoMovieObstructionResult);
        objc_msgSend(a1, "addMovieObstructionResults:", v48);
        if (!PBReaderPlaceMark() || (VCPProtoMovieObstructionResultReadFrom((uint64_t)v48, a2) & 1) == 0)
          goto LABEL_314;
        goto LABEL_281;
      case 0x1Eu:
        v48 = objc_alloc_init(VCPProtoMovieOrientationResult);
        objc_msgSend(a1, "addMovieOrientationResults:", v48);
        if (!PBReaderPlaceMark() || (VCPProtoMovieOrientationResultReadFrom((uint64_t)v48, a2) & 1) == 0)
          goto LABEL_314;
        goto LABEL_281;
      case 0x1Fu:
        v48 = objc_alloc_init(VCPProtoMoviePreEncodeResult);
        objc_msgSend(a1, "addMoviePreEncodeResults:", v48);
        if (!PBReaderPlaceMark() || (VCPProtoMoviePreEncodeResultReadFrom((uint64_t)v48, a2) & 1) == 0)
          goto LABEL_314;
        goto LABEL_281;
      case 0x20u:
        v48 = objc_alloc_init(VCPProtoMovieQualityResult);
        objc_msgSend(a1, "addMovieQualityResults:", v48);
        if (!PBReaderPlaceMark() || (VCPProtoMovieQualityResultReadFrom((uint64_t)v48, a2) & 1) == 0)
          goto LABEL_314;
        goto LABEL_281;
      case 0x21u:
        v48 = objc_alloc_init(VCPProtoMovieSaliencyResult);
        objc_msgSend(a1, "addMovieSaliencyResults:", v48);
        if (!PBReaderPlaceMark() || (VCPProtoMovieSaliencyResultReadFrom((uint64_t)v48, a2) & 1) == 0)
          goto LABEL_314;
        goto LABEL_281;
      case 0x22u:
        v48 = objc_alloc_init(VCPProtoMovieSceneResult);
        objc_msgSend(a1, "addMovieSceneResults:", v48);
        if (!PBReaderPlaceMark() || (VCPProtoMovieSceneResultReadFrom((uint64_t)v48, a2) & 1) == 0)
          goto LABEL_314;
        goto LABEL_281;
      case 0x23u:
        v48 = objc_alloc_init(VCPProtoMovieSubjectMotionResult);
        objc_msgSend(a1, "addMovieSubjectMotionResults:", v48);
        if (!PBReaderPlaceMark() || (VCPProtoMovieSubjectMotionResultReadFrom((uint64_t)v48, a2) & 1) == 0)
          goto LABEL_314;
        goto LABEL_281;
      case 0x24u:
        v48 = objc_alloc_init(VCPProtoMovieUtteranceResult);
        objc_msgSend(a1, "addMovieUtteranceResults:", v48);
        if (!PBReaderPlaceMark() || (VCPProtoMovieUtteranceResultReadFrom((uint64_t)v48, a2) & 1) == 0)
          goto LABEL_314;
        goto LABEL_281;
      case 0x25u:
        v48 = objc_alloc_init(VCPProtoMovieVoiceResult);
        objc_msgSend(a1, "addMovieVoiceResults:", v48);
        if (!PBReaderPlaceMark() || (VCPProtoMovieVoiceResultReadFrom((uint64_t)v48, a2) & 1) == 0)
          goto LABEL_314;
        goto LABEL_281;
      case 0x26u:
        v48 = objc_alloc_init(VCPProtoImagePetsResult);
        objc_msgSend(a1, "addImagePetsResults:", v48);
        if (!PBReaderPlaceMark() || (VCPProtoImagePetsResultReadFrom((uint64_t)v48, a2) & 1) == 0)
          goto LABEL_314;
        goto LABEL_281;
      case 0x27u:
        v48 = objc_alloc_init(VCPProtoMovieSummaryResult);
        objc_msgSend(a1, "addMovieSummaryResults:", v48);
        if (!PBReaderPlaceMark() || (VCPProtoMovieSummaryResultReadFrom((uint64_t)v48, a2) & 1) == 0)
          goto LABEL_314;
        goto LABEL_281;
      case 0x28u:
        v48 = objc_alloc_init(VCPProtoMovieHighlightResult);
        objc_msgSend(a1, "addMovieHighlightResults:", v48);
        if (!PBReaderPlaceMark() || (VCPProtoMovieHighlightResultReadFrom((uint64_t)v48, a2) & 1) == 0)
          goto LABEL_314;
        goto LABEL_281;
      case 0x29u:
        v48 = objc_alloc_init(VCPProtoImageExposureResult);
        objc_msgSend(a1, "addImageExposureResults:", v48);
        if (!PBReaderPlaceMark() || !VCPProtoImageExposureResultReadFrom((uint64_t)v48, a2))
          goto LABEL_314;
        goto LABEL_281;
      case 0x2Au:
        v48 = objc_alloc_init(VCPProtoLivePhotoEffectsResult);
        objc_msgSend(a1, "addLivePhotoEffectsResults:", v48);
        if (!PBReaderPlaceMark() || (VCPProtoLivePhotoEffectsResultReadFrom((uint64_t)v48, a2) & 1) == 0)
          goto LABEL_314;
        goto LABEL_281;
      case 0x2Bu:
        v49 = 0;
        v50 = 0;
        v51 = 0;
        a1[688] |= 2u;
        while (2)
        {
          v52 = *v3;
          v53 = *(_QWORD *)(a2 + v52);
          v54 = v53 + 1;
          if (v53 == -1 || v54 > *(_QWORD *)(a2 + *v4))
          {
            *(_BYTE *)(a2 + *v5) = 1;
          }
          else
          {
            v55 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v53);
            *(_QWORD *)(a2 + v52) = v54;
            v51 |= (unint64_t)(v55 & 0x7F) << v49;
            if (v55 < 0)
            {
              v49 += 7;
              v15 = v50++ >= 9;
              if (v15)
              {
                v51 = 0;
                goto LABEL_300;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(a2 + *v5))
          v51 = 0;
LABEL_300:
        v64 = 32;
        goto LABEL_305;
      case 0x2Cu:
        v48 = objc_alloc_init(VCPProtoImagePetsFaceResult);
        objc_msgSend(a1, "addImagePetsFaceResults:", v48);
        if (!PBReaderPlaceMark() || (VCPProtoImagePetsFaceResultReadFrom((uint64_t)v48, a2) & 1) == 0)
          goto LABEL_314;
        goto LABEL_281;
      case 0x2Du:
        v48 = objc_alloc_init(VCPProtoImageSceneprintResult);
        objc_msgSend(a1, "addImageSceneprintResults:", v48);
        if (!PBReaderPlaceMark() || (VCPProtoImageSceneprintResultReadFrom((uint64_t)v48, a2) & 1) == 0)
          goto LABEL_314;
        goto LABEL_281;
      case 0x2Eu:
        v48 = objc_alloc_init(VCPProtoMovieSceneprintResult);
        objc_msgSend(a1, "addMovieSceneprintResults:", v48);
        if (!PBReaderPlaceMark() || !VCPProtoMovieSceneprintResultReadFrom((uint64_t)v48, a2))
          goto LABEL_314;
        goto LABEL_281;
      case 0x2Fu:
        v48 = objc_alloc_init(VCPProtoImageHumanPoseResult);
        objc_msgSend(a1, "addImageHumanPoseResults:", v48);
        if (!PBReaderPlaceMark() || (VCPProtoImageHumanPoseResultReadFrom((uint64_t)v48, a2) & 1) == 0)
          goto LABEL_314;
        goto LABEL_281;
      case 0x30u:
        v48 = objc_alloc_init(VCPProtoMovieHumanPoseResult);
        objc_msgSend(a1, "addMovieHumanPoseResults:", v48);
        if (!PBReaderPlaceMark() || (VCPProtoMovieHumanPoseResultReadFrom((uint64_t)v48, a2) & 1) == 0)
          goto LABEL_314;
        goto LABEL_281;
      case 0x31u:
        v48 = objc_alloc_init(VCPProtoMovieApplauseResult);
        objc_msgSend(a1, "addMovieApplauseResults:", v48);
        if (!PBReaderPlaceMark() || (VCPProtoMovieApplauseResultReadFrom((uint64_t)v48, a2) & 1) == 0)
          goto LABEL_314;
        goto LABEL_281;
      case 0x32u:
        v48 = objc_alloc_init(VCPProtoMovieBabbleResult);
        objc_msgSend(a1, "addMovieBabbleResults:", v48);
        if (!PBReaderPlaceMark() || (VCPProtoMovieBabbleResultReadFrom((uint64_t)v48, a2) & 1) == 0)
          goto LABEL_314;
        goto LABEL_281;
      case 0x33u:
        v48 = objc_alloc_init(VCPProtoMovieCheeringResult);
        objc_msgSend(a1, "addMovieCheeringResults:", v48);
        if (!PBReaderPlaceMark() || (VCPProtoMovieCheeringResultReadFrom((uint64_t)v48, a2) & 1) == 0)
          goto LABEL_314;
        goto LABEL_281;
      case 0x34u:
        v48 = objc_alloc_init(VCPProtoMovieLaughterResult);
        objc_msgSend(a1, "addMovieLaughterResults:", v48);
        if (!PBReaderPlaceMark() || (VCPProtoMovieLaughterResultReadFrom((uint64_t)v48, a2) & 1) == 0)
          goto LABEL_314;
        goto LABEL_281;
      case 0x35u:
        v48 = objc_alloc_init(VCPProtoLivePhotoKeyFrameResult);
        objc_msgSend(a1, "addLivePhotoKeyFrameResults:", v48);
        if (!PBReaderPlaceMark() || (VCPProtoLivePhotoKeyFrameResultReadFrom((uint64_t)v48, a2) & 1) == 0)
          goto LABEL_314;
        goto LABEL_281;
      case 0x36u:
        v48 = objc_alloc_init(VCPProtoLivePhotoKeyFrameStillResult);
        objc_msgSend(a1, "addLivePhotoKeyFrameStillResults:", v48);
        if (!PBReaderPlaceMark()
          || (VCPProtoLivePhotoKeyFrameStillResultReadFrom((uint64_t)v48, a2) & 1) == 0)
        {
          goto LABEL_314;
        }
        goto LABEL_281;
      case 0x37u:
        v48 = objc_alloc_init(VCPProtoMovieHumanActionResult);
        objc_msgSend(a1, "addMovieHumanActionResults:", v48);
        if (!PBReaderPlaceMark() || (VCPProtoMovieHumanActionResultReadFrom((uint64_t)v48, a2) & 1) == 0)
          goto LABEL_314;
        goto LABEL_281;
      case 0x38u:
        v48 = objc_alloc_init(VCPProtoMovieSubtleMotionResult);
        objc_msgSend(a1, "addMovieSubtleMotionResults:", v48);
        if (!PBReaderPlaceMark() || (VCPProtoMovieSubtleMotionResultReadFrom((uint64_t)v48, a2) & 1) == 0)
          goto LABEL_314;
        goto LABEL_281;
      case 0x39u:
        v48 = objc_alloc_init(VCPProtoMovieLoudnessResult);
        objc_msgSend(a1, "addMovieLoudnessResults:", v48);
        if (!PBReaderPlaceMark() || (VCPProtoMovieLoudnessResultReadFrom((uint64_t)v48, a2) & 1) == 0)
          goto LABEL_314;
        goto LABEL_281;
      case 0x3Au:
        v48 = objc_alloc_init(VCPProtoMoviePetsResult);
        objc_msgSend(a1, "addMoviePetsResults:", v48);
        if (!PBReaderPlaceMark() || (VCPProtoMoviePetsResultReadFrom((uint64_t)v48, a2) & 1) == 0)
          goto LABEL_314;
        goto LABEL_281;
      case 0x3Bu:
        v48 = objc_alloc_init(VCPProtoMoviePetsFaceResult);
        objc_msgSend(a1, "addMoviePetsFaceResults:", v48);
        if (!PBReaderPlaceMark() || (VCPProtoMoviePetsFaceResultReadFrom((uint64_t)v48, a2) & 1) == 0)
          goto LABEL_314;
        goto LABEL_281;
      case 0x3Cu:
        v48 = objc_alloc_init(VCPProtoMovieStabilizationResult);
        objc_msgSend(a1, "addMovieStabilizationResults:", v48);
        if (!PBReaderPlaceMark() || (VCPProtoMovieStabilizationResultReadFrom((uint64_t)v48, a2) & 1) == 0)
          goto LABEL_314;
        goto LABEL_281;
      case 0x3Du:
        v56 = 0;
        v57 = 0;
        v51 = 0;
        a1[688] |= 4u;
        while (2)
        {
          v58 = *v3;
          v59 = *(_QWORD *)(a2 + v58);
          v60 = v59 + 1;
          if (v59 == -1 || v60 > *(_QWORD *)(a2 + *v4))
          {
            *(_BYTE *)(a2 + *v5) = 1;
          }
          else
          {
            v61 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v59);
            *(_QWORD *)(a2 + v58) = v60;
            v51 |= (unint64_t)(v61 & 0x7F) << v56;
            if (v61 < 0)
            {
              v56 += 7;
              v15 = v57++ >= 9;
              if (v15)
              {
                v51 = 0;
                goto LABEL_304;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(a2 + *v5))
          v51 = 0;
LABEL_304:
        v64 = 40;
LABEL_305:
        *(_QWORD *)&a1[v64] = v51;
        goto LABEL_282;
      case 0x3Eu:
        v48 = objc_alloc_init(VCPProtoMovieHighlightScoreResult);
        objc_msgSend(a1, "addMovieHighlightScoreResults:", v48);
        if (!PBReaderPlaceMark()
          || (VCPProtoMovieHighlightScoreResultReadFrom((uint64_t)v48, a2) & 1) == 0)
        {
          goto LABEL_314;
        }
        goto LABEL_281;
      case 0x3Fu:
        v48 = objc_alloc_init(VCPProtoLivePhotoHumanActionClassificationResult);
        objc_msgSend(a1, "addLivePhotoHumanActionClassificationResults:", v48);
        if (!PBReaderPlaceMark()
          || !VCPProtoLivePhotoHumanActionClassificationResultReadFrom((uint64_t)v48, a2))
        {
          goto LABEL_314;
        }
        goto LABEL_281;
      case 0x40u:
        v48 = objc_alloc_init(VCPProtoMovieAudioQualityResult);
        objc_msgSend(a1, "addMovieAudioQualityResults:", v48);
        if (!PBReaderPlaceMark() || (VCPProtoMovieAudioQualityResultReadFrom((uint64_t)v48, a2) & 1) == 0)
          goto LABEL_314;
        goto LABEL_281;
      case 0x41u:
        v48 = objc_alloc_init(VCPProtoMovieSafetyResult);
        objc_msgSend(a1, "addMovieSafetyResults:", v48);
        if (!PBReaderPlaceMark() || (VCPProtoMovieSafetyResultReadFrom((uint64_t)v48, a2) & 1) == 0)
          goto LABEL_314;
        goto LABEL_281;
      case 0x42u:
        v48 = objc_alloc_init(VCPProtoFilesystemMovieClassificationResult);
        objc_msgSend(a1, "addFilesystemMovieClassificationResults:", v48);
        if (!PBReaderPlaceMark()
          || (VCPProtoFilesystemMovieClassificationResultReadFrom((uint64_t)v48, a2) & 1) == 0)
        {
          goto LABEL_314;
        }
        goto LABEL_281;
      case 0x43u:
        v48 = objc_alloc_init(VCPProtoFilesystemMovieHumanActionClassificationResult);
        objc_msgSend(a1, "addFilesystemMovieHumanActionClassificationResults:", v48);
        if (!PBReaderPlaceMark()
          || (VCPProtoFilesystemMovieHumanActionClassificationResultReadFrom((uint64_t)v48, a2) & 1) == 0)
        {
          goto LABEL_314;
        }
        goto LABEL_281;
      case 0x44u:
        v48 = objc_alloc_init(VCPProtoFilesystemMovieAudioClassificationResult);
        objc_msgSend(a1, "addFilesystemMovieApplauseResults:", v48);
        goto LABEL_242;
      case 0x45u:
        v48 = objc_alloc_init(VCPProtoFilesystemMovieAudioClassificationResult);
        objc_msgSend(a1, "addFilesystemMovieBabbleResults:", v48);
        goto LABEL_242;
      case 0x46u:
        v48 = objc_alloc_init(VCPProtoFilesystemMovieAudioClassificationResult);
        objc_msgSend(a1, "addFilesystemMovieCheeringResults:", v48);
        goto LABEL_242;
      case 0x47u:
        v48 = objc_alloc_init(VCPProtoFilesystemMovieAudioClassificationResult);
        objc_msgSend(a1, "addFilesystemMovieLaughterResults:", v48);
        goto LABEL_242;
      case 0x48u:
        v48 = objc_alloc_init(VCPProtoFilesystemMovieAudioClassificationResult);
        objc_msgSend(a1, "addFilesystemMovieMusicResults:", v48);
        goto LABEL_242;
      case 0x49u:
        v48 = objc_alloc_init(VCPProtoFilesystemMovieAudioClassificationResult);
        objc_msgSend(a1, "addFilesystemMovieVoiceResults:", v48);
LABEL_242:
        if (!PBReaderPlaceMark()
          || !VCPProtoFilesystemMovieAudioClassificationResultReadFrom((uint64_t)v48, a2))
        {
          goto LABEL_314;
        }
        goto LABEL_281;
      case 0x4Au:
        v48 = objc_alloc_init(VCPProtoAnimatedStickerResult);
        objc_msgSend(a1, "addAnimatedStickerResults:", v48);
        if (!PBReaderPlaceMark() || (VCPProtoAnimatedStickerResultReadFrom((uint64_t)v48, a2) & 1) == 0)
          goto LABEL_314;
        goto LABEL_281;
      case 0x4Bu:
        v48 = objc_alloc_init(VCPProtoLivePhotoSettlingEffectGatingResult);
        objc_msgSend(a1, "addLivePhotoSettlingEffectGatingResults:", v48);
        if (!PBReaderPlaceMark()
          || (VCPProtoLivePhotoSettlingEffectGatingResultReadFrom((uint64_t)v48, a2) & 1) == 0)
        {
          goto LABEL_314;
        }
        goto LABEL_281;
      case 0x4Cu:
        PBReaderReadString();
        v44 = objc_claimAutoreleasedReturnValue();
        v45 = 64;
LABEL_252:
        v62 = *(void **)&a1[v45];
        *(_QWORD *)&a1[v45] = v44;

        goto LABEL_282;
      case 0x4Du:
        v48 = objc_alloc_init(VCPProtoMovieTorsoResult);
        objc_msgSend(a1, "addMovieTorsoResults:", v48);
        if (!PBReaderPlaceMark() || (VCPProtoMovieTorsoResultReadFrom((uint64_t)v48, a2) & 1) == 0)
          goto LABEL_314;
        goto LABEL_281;
      case 0x4Eu:
        v48 = objc_alloc_init(VCPProtoMovieHumanActionClassificationResult);
        objc_msgSend(a1, "addMovieHumanActionClassificationResults:", v48);
        if (!PBReaderPlaceMark()
          || !VCPProtoMovieHumanActionClassificationResultReadFrom((id *)&v48->super.super.isa, a2))
        {
          goto LABEL_314;
        }
        goto LABEL_281;
      case 0x4Fu:
        v48 = objc_alloc_init(VCPProtoEmbeddingResult);
        objc_msgSend(a1, "addVideoEmbeddingResults:", v48);
        goto LABEL_267;
      case 0x50u:
        v48 = objc_alloc_init(VCPProtoSummarizedEmbeddingResult);
        objc_msgSend(a1, "addSummarizedEmbeddingResults:", v48);
        if (!PBReaderPlaceMark()
          || (VCPProtoSummarizedEmbeddingResultReadFrom((uint64_t)v48, a2) & 1) == 0)
        {
          goto LABEL_314;
        }
        goto LABEL_281;
      case 0x51u:
        v48 = objc_alloc_init(VCPProtoAudioFusedVideoEmbeddingResult);
        objc_msgSend(a1, "addAudioFusedVideoEmbeddingResults:", v48);
        if (!PBReaderPlaceMark()
          || (VCPProtoAudioFusedVideoEmbeddingResultReadFrom((uint64_t)v48, a2) & 1) == 0)
        {
          goto LABEL_314;
        }
        goto LABEL_281;
      case 0x52u:
        v48 = objc_alloc_init(VCPProtoEmbeddingResult);
        objc_msgSend(a1, "addImageEmbeddingResults:", v48);
LABEL_267:
        if (!PBReaderPlaceMark() || (VCPProtoEmbeddingResultReadFrom((uint64_t)v48, a2) & 1) == 0)
          goto LABEL_314;
        goto LABEL_281;
      case 0x53u:
        v48 = objc_alloc_init(VCPProtoImageCaptionResult);
        objc_msgSend(a1, "addImageCaptionResults:", v48);
        if (!PBReaderPlaceMark() || (VCPProtoImageCaptionResultReadFrom((uint64_t)v48, a2) & 1) == 0)
          goto LABEL_314;
        goto LABEL_281;
      case 0x54u:
        v48 = objc_alloc_init(VCPProtoVideoCaptionResult);
        objc_msgSend(a1, "addVideoCaptionResults:", v48);
        if (!PBReaderPlaceMark() || (VCPProtoVideoCaptionResultReadFrom((uint64_t)v48, a2) & 1) == 0)
          goto LABEL_314;
        goto LABEL_281;
      case 0x55u:
        v48 = objc_alloc_init(VCPProtoVideoCaptionPreferenceResult);
        objc_msgSend(a1, "addVideoCaptionPreferenceResults:", v48);
        if (!PBReaderPlaceMark()
          || (VCPProtoVideoCaptionPreferenceResultReadFrom((uint64_t)v48, a2) & 1) == 0)
        {
          goto LABEL_314;
        }
        goto LABEL_281;
      case 0x56u:
        v48 = objc_alloc_init(VCPProtoVideoSegmentCaptionResult);
        objc_msgSend(a1, "addVideoSegmentCaptionResults:", v48);
        if (PBReaderPlaceMark() && (VCPProtoVideoSegmentCaptionResultReadFrom((uint64_t)v48, a2) & 1) != 0)
        {
LABEL_281:
          PBReaderRecallMark();

LABEL_282:
          if (*(_QWORD *)(a2 + *v3) >= *(_QWORD *)(a2 + *v4))
            return *(_BYTE *)(a2 + *v5) == 0;
          continue;
        }
LABEL_314:

        return 0;
      default:
        result = PBReaderSkipValueWithTag();
        if (!(_DWORD)result)
          return result;
        goto LABEL_282;
    }
  }
}

void sub_1B6DF78DC(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1B6DF7AEC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_1B6DF7C44(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_1B6DF7D98(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1B6DF7EC8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  CF<opaqueCMSampleBuffer *>::~CF((const void **)va);
  _Unwind_Resume(a1);
}

double CGSizeWithOrientation(NSNumber *a1, NSNumber *a2, NSNumber *a3)
{
  NSNumber *v5;
  NSNumber *v6;
  NSNumber *v7;
  unsigned int v8;
  unsigned int v9;
  int v10;
  double v11;
  _DWORD v13[2];
  uint64_t v14;

  v14 = *MEMORY[0x1E0C80C00];
  v5 = a1;
  v6 = a2;
  v7 = a3;
  if (-[NSNumber intValue](v5, "intValue") && -[NSNumber intValue](v6, "intValue"))
  {
    if (!v7)
      goto LABEL_10;
    v8 = -[NSNumber unsignedIntValue](v7, "unsignedIntValue");
    v9 = v8;
    if (v8 - 9 <= 0xFFFFFFF7)
    {
      if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_DEFAULT))
      {
        v13[0] = 67109120;
        v13[1] = v9;
        _os_log_impl(&dword_1B6C4A000, MEMORY[0x1E0C81028], OS_LOG_TYPE_DEFAULT, "Orientation value %u invalid, assuming kCGImagePropertyOrientationUp", (uint8_t *)v13, 8u);
      }
      v10 = -[NSNumber intValue](v5, "intValue");
      -[NSNumber intValue](v6, "intValue");
      goto LABEL_12;
    }
    if (v8 > 4)
    {
      v10 = -[NSNumber intValue](v6, "intValue");
      -[NSNumber intValue](v5, "intValue");
    }
    else
    {
LABEL_10:
      v10 = -[NSNumber intValue](v5, "intValue");
      -[NSNumber intValue](v6, "intValue");
    }
LABEL_12:
    v11 = (double)v10;
    goto LABEL_13;
  }
  v11 = *MEMORY[0x1E0C9D820];
LABEL_13:

  return v11;
}

void sub_1B6DF8078(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_1B6DF8154(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;

  v5 = v4;

  _Unwind_Resume(a1);
}

void sub_1B6DF83D4(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1B6DF8528(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_1B6DF8680(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_1B6DF8814(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_1B6DF8948(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  CF<opaqueCMSampleBuffer *>::~CF((const void **)va);
  _Unwind_Resume(a1);
}

void sub_1B6DF8BDC(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1B6DF8D30(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_1B6DF8E88(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_1B6DF8FC8(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1B6DF90B8(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1B6DF9534(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1B6DF97F4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1B6DF9B20(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1B6DF9F58(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1B6DFAA5C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,void *a30)
{

  _Unwind_Resume(a1);
}

void sub_1B6DFB2F4(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1B6DFC114(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,void *a25,uint64_t a26,void *a27)
{

  _Unwind_Resume(a1);
}

void sub_1B6DFCAB8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9)
{
  void *v9;
  void *v10;
  void *v11;

  _Unwind_Resume(a1);
}

void sub_1B6DFCC64(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void sub_1B6DFCE14(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1B6DFD2D0(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_1B6DFD398(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_1B6DFD888(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_1B6DFD958(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_1B6DFDCB0(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1B6DFE008(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1B6DFE118(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void sub_1B6DFE2B0(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1B6DFE3D4(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1B6DFE448(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1B6DFE4B4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1B6DFE64C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1B6DFE6E8(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_1B6DFE78C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  _Unwind_Resume(a1);
}

void sub_1B6DFE848(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;

  _Unwind_Resume(a1);
}

void sub_1B6DFE8D8(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_1B6DFE978(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

double ma::CameraMotionSegment::CameraMotionSegment(ma::CameraMotionSegment *this)
{
  ma::Segment *v1;
  double result;

  v1 = ma::Segment::Segment(this);
  *(_QWORD *)v1 = &off_1E6B14068;
  *((_BYTE *)v1 + 72) = 0;
  *(_QWORD *)((char *)v1 + 188) = 9;
  result = 0.0;
  *(_OWORD *)((char *)v1 + 76) = 0u;
  *(_OWORD *)((char *)v1 + 92) = 0u;
  *(_OWORD *)((char *)v1 + 108) = 0u;
  *(_OWORD *)((char *)v1 + 124) = 0u;
  *(_OWORD *)((char *)v1 + 140) = 0u;
  *(_OWORD *)((char *)v1 + 156) = 0u;
  *(_OWORD *)((char *)v1 + 172) = 0u;
  return result;
}

float ma::CameraMotionSegment::Merge(ma::CameraMotionSegment *this, const ma::CameraMotionSegment *a2)
{
  float v4;
  char *v5;
  char *v6;
  uint64_t v7;
  float *v8;
  float v9;
  float v10;
  float v11;
  float v12;
  float v13;
  float result;

  ma::Segment::Merge(this, a2);
  v4 = (float)*((int *)this + 5);
  v5 = (char *)this + 148;
  v6 = (char *)a2 + 124;
  v7 = -24;
  do
  {
    v8 = (float *)&v5[v7];
    v9 = *(float *)&v6[v7 - 24] + *(float *)&v5[v7 - 48];
    *(v8 - 12) = v9;
    *(v8 - 6) = v9 / v4;
    v10 = *(float *)&v6[v7 + 24] + *(float *)&v5[v7];
    *v8 = v10;
    v8[6] = v10 / v4;
    v7 += 4;
  }
  while (v7);
  *((_BYTE *)this + 72) = 0;
  v11 = *((float *)this + 44);
  v12 = *((float *)a2 + 43) + *((float *)this + 43);
  *((float *)this + 43) = v12;
  v13 = *((float *)a2 + 44) + v11;
  *((float *)this + 44) = v13;
  *((float *)this + 45) = v12 / v4;
  *((float *)this + 46) = v13 / v4;
  result = *((float *)a2 + 49) + *((float *)this + 49);
  *((float *)this + 49) = result;
  return result;
}

float ma::CameraMotionSegment::CombineConfidenceValues(uint64_t a1, uint64_t a2)
{
  float result;

  result = (float)((float)(*(float *)(a2 + 192) * (float)*(int *)(a2 + 16))
                 + (float)(*(float *)(a1 + 192) * (float)*(int *)(a1 + 16)))
         / (float)(*(_DWORD *)(a2 + 16) + *(_DWORD *)(a1 + 16));
  *(float *)(a1 + 192) = result;
  return result;
}

float ma::CameraMotionSegment::UpdateStats(ma::CameraMotionSegment *this, const ma::MotionResult *a2, float a3)
{
  int v3;
  float v4;
  char *v5;
  uint64_t v6;
  float *v7;
  float v8;
  float v9;
  float v10;
  float v11;
  float v12;
  float result;

  v3 = *((_DWORD *)this + 5) + 1;
  *((_DWORD *)this + 5) = v3;
  v4 = (float)v3;
  v5 = (char *)this + 148;
  v6 = -24;
  do
  {
    v7 = (float *)&v5[v6];
    v8 = *(float *)((char *)a2 + v6 + 24) + *(float *)&v5[v6 - 48];
    *(v7 - 12) = v8;
    *(v7 - 6) = v8 / v4;
    v9 = *(float *)((char *)a2 + v6 + 48) + *(float *)&v5[v6];
    *v7 = v9;
    v7[6] = v9 / v4;
    v6 += 4;
  }
  while (v6);
  v10 = *((float *)this + 44);
  v11 = *((float *)a2 + 23) + *((float *)this + 43);
  *((float *)this + 43) = v11;
  v12 = *((float *)a2 + 24) + v10;
  *((float *)this + 44) = v12;
  *((float *)this + 45) = v11 / v4;
  *((float *)this + 46) = v12 / v4;
  result = *((float *)this + 49) + a3;
  *((float *)this + 49) = result;
  return result;
}

uint64_t ma::CameraMotionSegment::ResetStats(uint64_t this, const ma::MotionResult *a2, float a3)
{
  uint64_t v3;
  char *v4;
  _DWORD *v5;

  v3 = 0;
  v4 = (char *)a2 + 24;
  do
  {
    v5 = (_DWORD *)(this + 148 + v3);
    *(v5 - 18) = *(_DWORD *)((char *)a2 + v3);
    *(v5 - 12) = *(_DWORD *)((char *)a2 + v3);
    *(v5 - 6) = *(_DWORD *)&v4[v3];
    *v5 = *(_DWORD *)&v4[v3];
    v3 += 4;
  }
  while (v3 != 24);
  *(_DWORD *)(this + 20) = *((unsigned __int8 *)a2 + 80);
  *(_QWORD *)(this + 188) = 9;
  *(float *)(this + 196) = a3;
  *(_QWORD *)(this + 172) = *(_QWORD *)((char *)a2 + 92);
  *(_QWORD *)(this + 180) = *(_QWORD *)((char *)a2 + 92);
  return this;
}

uint64_t ma::CameraMotionSegment::DetermineType(ma::CameraMotionSegment *this)
{
  float v2;
  float v3;
  float v4;
  uint64_t i;
  uint64_t v6;
  float v7;
  float v8;
  float v9;
  uint64_t v10;
  int v11;
  float v12;
  float v13;
  int v15;
  uint64_t result;
  int v17;
  uint64_t v18;
  float v19;
  int v20;
  uint64_t j;
  float v22;
  int v23;
  _BYTE v24[24];
  uint64_t v25;

  v25 = *MEMORY[0x1E0C80C00];
  v2 = fabsf(*((float *)this + 45));
  v3 = fabsf(*((float *)this + 46));
  v4 = 1000000.0;
  for (i = 100; i != 124; i += 4)
  {
    if (*(float *)((char *)this + i) < v4)
      v4 = *(float *)((char *)this + i);
  }
  v6 = 0;
  if (v2 >= v3)
    v7 = v2;
  else
    v7 = v3;
  do
  {
    v8 = *(float *)((char *)this + v6 + 148);
    v9 = -4.5;
    if (v8 >= 0.1)
    {
      v9 = -0.1;
      if (v8 <= 0.9)
        v9 = (float)(v8 * 5.5) + -5.05;
    }
    *(float *)&v24[v6] = v9;
    v6 += 4;
  }
  while (v6 != 24);
  v10 = 0;
  v11 = 0;
  v12 = v4 * 0.5;
  do
  {
    v13 = *((float *)this + v10 + 25);
    if (v13 >= v12 || v13 >= *(float *)&v24[4 * v10])
      v13 = 0.0;
    v15 = 1 << v10;
    if (v13 == 0.0)
      v15 = 0;
    v11 += v15;
    ++v10;
  }
  while (v10 != 6);
  result = ma::CameraMotionSegment::SetType((uint64_t)this, v11);
  if (v7 >= 40.0)
  {
    v17 = *((_DWORD *)this + 47);
    if (!v17)
    {
      for (j = 0; j != 6; ++j)
      {
        v22 = *((float *)this + j + 25);
        if (v22 >= ma::CameraMotionSegment::DetermineType(void)::kLambdaSGMV[j])
          v22 = 0.0;
        v23 = 1 << j;
        if (v22 == 0.0)
          v23 = 0;
        v17 += v23;
      }
      return ma::CameraMotionSegment::SetType((uint64_t)this, v17);
    }
    if (v17 == 8)
    {
      v18 = 0;
      v17 = 0;
      do
      {
        v19 = *((float *)this + v18 + 25);
        if (v19 >= ma::CameraMotionSegment::DetermineType(void)::kLambdaSGMV[v18 + 6])
          v19 = 0.0;
        v20 = 1 << v18;
        if (v19 == 0.0)
          v20 = 0;
        v17 += v20;
        ++v18;
      }
      while (v18 != 6);
      return ma::CameraMotionSegment::SetType((uint64_t)this, v17);
    }
  }
  return result;
}

uint64_t ma::CameraMotionSegment::SetType(uint64_t this, int a2)
{
  uint64_t v2;
  float v3;
  float v4;
  int v5;
  float v6;
  int v7;

  if (a2 >= 16)
  {
    v2 = 0x3F80000000000008;
LABEL_3:
    *(_QWORD *)(this + 188) = v2;
    return this;
  }
  if ((a2 & 8) != 0)
  {
    *(_DWORD *)(this + 188) = 7;
    v4 = *(float *)(this + 160);
LABEL_21:
    *(float *)(this + 192) = v4;
    return this;
  }
  if ((a2 & 4) != 0)
  {
    *(_DWORD *)(this + 188) = 6;
    v4 = *(float *)(this + 156);
    goto LABEL_21;
  }
  if ((a2 & 3) == 0)
  {
    v2 = 0x3F80000000000000;
    goto LABEL_3;
  }
  if ((a2 & 3) == 3)
  {
    *(_DWORD *)(this + 188) = 5;
    v3 = *(float *)(this + 148);
LABEL_19:
    v6 = *(float *)(this + 152);
LABEL_20:
    v4 = v3 + v6;
    goto LABEL_21;
  }
  if ((a2 & 2) != 0)
  {
    if (*(float *)(this + 184) <= 0.0)
      v7 = 3;
    else
      v7 = 4;
    *(_DWORD *)(this + 188) = v7;
    v3 = *(float *)(this + 152);
    *(float *)(this + 192) = v3;
    if (v3 < 0.5)
    {
      *(_DWORD *)(this + 188) = 5;
      v6 = *(float *)(this + 148);
      goto LABEL_20;
    }
  }
  else
  {
    if (*(float *)(this + 180) <= 0.0)
      v5 = 1;
    else
      v5 = 2;
    *(_DWORD *)(this + 188) = v5;
    v3 = *(float *)(this + 148);
    *(float *)(this + 192) = v3;
    if (v3 < 0.5)
    {
      *(_DWORD *)(this + 188) = 5;
      goto LABEL_19;
    }
  }
  return this;
}

BOOL ma::CameraMotionSegment::IsShort(ma::CameraMotionSegment *this, int a2)
{
  double Seconds;
  int v5;
  int v6;
  float v8;
  float v9;
  __int128 *v11;
  CMTime *v12;
  __int128 v13;
  uint64_t v14;
  CMTime v15;
  CMTime time;

  time = *(CMTime *)((_BYTE *)this + 2);
  Seconds = CMTimeGetSeconds(&time);
  v5 = *((_DWORD *)this + 47);
  if (v5 >= 11)
    v6 = 11;
  else
    v6 = *((_DWORD *)this + 47);
  if (Seconds >= ma::CameraMotionSegment::IsShort(BOOL)::kShortSegmentTimeLUT[12 * a2 + v6] || *((_BYTE *)this + 72))
    return 0;
  if ((v5 - 1) > 4)
  {
    if ((v5 & 0xFFFFFFFE) != 6)
    {
      v11 = (__int128 *)((char *)this + 48);
      if (v5)
      {
        v13 = *v11;
        v14 = *((_QWORD *)this + 8);
        v12 = (CMTime *)&v13;
      }
      else
      {
        *(_OWORD *)&v15.value = *v11;
        v15.epoch = *((_QWORD *)this + 8);
        v12 = &v15;
      }
      return CMTimeGetSeconds(v12) < 0.829999983;
    }
    v8 = *((float *)this + 48) * (float)*((int *)this + 4);
    v9 = 3.65;
    if (v5 != 6)
      v9 = 4.5;
  }
  else
  {
    v8 = sqrtf((float)(*((float *)this + 44) * *((float *)this + 44))+ (float)(*((float *)this + 43) * *((float *)this + 43)));
    v9 = 750.0;
  }
  return v8 < v9;
}

BOOL ma::CameraMotionSegment::IsVeryShort(ma::CameraMotionSegment *this)
{
  CMTime v2;

  v2 = *(CMTime *)((_BYTE *)this + 2);
  return CMTimeGetSeconds(&v2) < 0.300000012;
}

BOOL ma::CameraMotionSegment::IsSimiliarMotionType(ma::CameraMotionSegment *this, ma::CameraMotionSegment *a2)
{
  int v2;
  int v3;
  _BOOL4 v4;
  int v6;

  v2 = *((_DWORD *)this + 47);
  v3 = *((_DWORD *)a2 + 47);
  if ((v2 - 1) > 3)
    return v2 == v3;
  v4 = v3 == 5 && *((float *)a2 + 48) < 0.4;
  v6 = v3 == v2 || v4;
  return v6 != 0;
}

BOOL ma::CameraMotionSegment::IsMovingSameDirection(ma::CameraMotionSegment *this, ma::CameraMotionSegment *a2)
{
  float v2;
  float v3;
  float v4;
  float v5;

  v2 = fabsf(*((float *)this + 45));
  v3 = fabsf(*((float *)this + 46));
  v4 = fabsf(*((float *)a2 + 45));
  v5 = fabsf(*((float *)a2 + 46));
  return v2 < v3 == v4 < v5 && (float)(*((float *)this + (v2 < v3) + 43) * *((float *)a2 + (v4 < v5) + 43)) >= 0.0;
}

BOOL ma::CameraMotionSegment::IsFast(ma::CameraMotionSegment *this)
{
  unsigned int v1;
  BOOL v2;
  int v3;
  BOOL v4;

  v1 = *((_DWORD *)this + 47);
  v2 = v1 >= 9;
  v4 = v1 == 9;
  v3 = (1 << v1) & 0x33E;
  v4 = !v4 && v2 || v3 == 0;
  if (v4)
    return 0;
  if (fabsf(*((float *)this + 45)) <= 100.0)
    return fabsf(*((float *)this + 46)) > 100.0;
  return 1;
}

uint64_t ma::CameraMotionSegment::ToDictionary(ma::CameraMotionSegment *this, const __CFAllocator *a2, const __CFDictionary **a3)
{
  uint64_t v5;
  __CFDictionary *v6;
  CFNumberRef v7;
  CFNumberRef v8;
  CFNumberRef v9;
  int valuePtr;
  CFNumberRef v12;

  v5 = ma::Segment::ToDictionary(this, a2, a3);
  if (!(_DWORD)v5)
  {
    v6 = *a3;
    if (*a3)
    {
      valuePtr = *((_DWORD *)this + 43);
      v7 = CFNumberCreate(0, kCFNumberFloat32Type, &valuePtr);
      v12 = v7;
      if (!v7)
        goto LABEL_8;
      CFDictionarySetValue(v6, CFSTR("GlobalXSum"), v7);
      CF<opaqueCMSampleBuffer *>::~CF((const void **)&v12);
      valuePtr = *((_DWORD *)this + 44);
      v8 = CFNumberCreate(0, kCFNumberFloat32Type, &valuePtr);
      v12 = v8;
      if (!v8)
        goto LABEL_8;
      CFDictionarySetValue(v6, CFSTR("GlobalYSum"), v8);
      CF<opaqueCMSampleBuffer *>::~CF((const void **)&v12);
      valuePtr = *((_DWORD *)this + 47);
      v9 = CFNumberCreate(0, kCFNumberSInt32Type, &valuePtr);
      v12 = v9;
      if (v9)
      {
        CFDictionarySetValue(v6, CFSTR("Type"), v9);
        CF<opaqueCMSampleBuffer *>::~CF((const void **)&v12);
        v5 = CFDictionarySet<float>(v6, CFSTR("Confidence"), *((float *)this + 48));
        if (!(_DWORD)v5)
          goto LABEL_11;
      }
      else
      {
LABEL_8:
        CF<opaqueCMSampleBuffer *>::~CF((const void **)&v12);
        v5 = 4294967188;
      }
      CFRelease(v6);
      v6 = 0;
    }
    else
    {
      v5 = 4294967188;
    }
LABEL_11:
    *a3 = v6;
  }
  return v5;
}

void sub_1B6DFF3F4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  CF<opaqueCMSampleBuffer *>::~CF((const void **)va);
  _Unwind_Resume(a1);
}

uint64_t CFDictionarySet<float>(__CFDictionary *a1, const void *a2, float a3)
{
  CFNumberRef v5;
  uint64_t v6;
  float valuePtr;
  CFNumberRef v9;

  valuePtr = a3;
  v5 = CFNumberCreate(0, kCFNumberFloat32Type, &valuePtr);
  v9 = v5;
  if (v5)
  {
    CFDictionarySetValue(a1, a2, v5);
    v6 = 0;
  }
  else
  {
    v6 = 4294967188;
  }
  CF<opaqueCMSampleBuffer *>::~CF((const void **)&v9);
  return v6;
}

void sub_1B6DFF47C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  CF<opaqueCMSampleBuffer *>::~CF((const void **)va);
  _Unwind_Resume(a1);
}

uint64_t ma::CameraMotionSegment::FromDictionary(ma::CameraMotionSegment *this, const __CFDictionary *a2)
{
  const __CFNumber *Value;
  int v5;
  int v6;
  const __CFNumber *v7;
  const __CFNumber *v8;
  int v9;
  uint64_t result;
  const __CFNumber *v11;
  int v12;
  int valuePtr;

  if (!a2)
    return 4294967246;
  ma::Segment::FromDictionary(this, a2);
  valuePtr = 0;
  Value = (const __CFNumber *)CFDictionaryGetValue(a2, CFSTR("GlobalXSum"));
  v5 = 0;
  v6 = 0;
  if (Value)
  {
    CFNumberGetValue(Value, kCFNumberFloat32Type, &valuePtr);
    v6 = valuePtr;
  }
  *((_DWORD *)this + 43) = v6;
  valuePtr = 0;
  v7 = (const __CFNumber *)CFDictionaryGetValue(a2, CFSTR("GlobalYSum"));
  if (v7)
  {
    CFNumberGetValue(v7, kCFNumberFloat32Type, &valuePtr);
    v5 = valuePtr;
  }
  *((_DWORD *)this + 44) = v5;
  valuePtr = 0;
  v8 = (const __CFNumber *)CFDictionaryGetValue(a2, CFSTR("Type"));
  if (v8)
  {
    CFNumberGetValue(v8, kCFNumberSInt32Type, &valuePtr);
    v9 = valuePtr;
  }
  else
  {
    v9 = 0;
  }
  *((_DWORD *)this + 47) = v9;
  valuePtr = 0;
  v11 = (const __CFNumber *)CFDictionaryGetValue(a2, CFSTR("Confidence"));
  if (v11)
  {
    CFNumberGetValue(v11, kCFNumberFloat32Type, &valuePtr);
    v12 = valuePtr;
  }
  else
  {
    v12 = 0;
  }
  result = 0;
  *((_DWORD *)this + 48) = v12;
  return result;
}

void ma::CameraMotionSegment::~CameraMotionSegment(ma::CameraMotionSegment *this)
{
  JUMPOUT(0x1BCCA12BCLL);
}

void sub_1B6DFFD4C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, void *a11, void *a12, void *a13, void *a14, void *a15, void *a16)
{
  void *v16;
  void *v17;
  void *v18;
  void *v19;
  void *v20;
  void *v21;

  _Unwind_Resume(a1);
}

void sub_1B6DFFF80(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1B6E00E04(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  void *v9;

  CVPixelBufferLock::~CVPixelBufferLock((CVPixelBufferLock *)&a9);

  _Unwind_Resume(a1);
}

void sub_1B6E01128(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  CVPixelBufferLock::~CVPixelBufferLock((CVPixelBufferLock *)va);
  _Unwind_Resume(a1);
}

void sub_1B6E01158(void *a1, int a2)
{
  if (a2)
    __clang_call_terminate(a1);
  JUMPOUT(0x1B6E01150);
}

void sub_1B6E01244(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1B6E017C0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, void *a13, void *a14, void *a15, void *a16, uint64_t a17, uint64_t a18, uint64_t a19, void *a20)
{

  _Unwind_Resume(a1);
}

void sub_1B6E01AF4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12)
{

  _Unwind_Resume(a1);
}

void sub_1B6E01BE8(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  v4 = v3;

  _Unwind_Resume(a1);
}

void sub_1B6E01E08(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1B6E02264(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11)
{
  void *v11;
  void *v12;
  void *v13;

  _Unwind_Resume(a1);
}

void sub_1B6E024D4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1B6E028E4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;

  _Unwind_Resume(a1);
}

void sub_1B6E040D8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, void *a15, void *a16, void *a17, void *a18, void *a19)
{
  void *v19;
  void *v20;
  void *v21;
  void *v22;
  void *v23;
  void *v24;
  void *v25;

  _Unwind_Resume(a1);
}

void sub_1B6E0483C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, void *a14, uint64_t a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,id a21)
{
  void *v21;
  void *v22;
  void *v23;
  void *v24;
  void *v25;

  _Block_object_dispose(&a16, 8);
  _Unwind_Resume(a1);
}

uint64_t __Block_byref_object_copy__26(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void __Block_byref_object_dispose__26(uint64_t a1)
{

}

void sub_1B6E04998(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void sub_1B6E04AD4(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1B6E04B40(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_1B6E04E48(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;

  _Unwind_Resume(a1);
}

void sub_1B6E050EC(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_1B6E05294(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1B6E053BC(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  _Unwind_Resume(a1);
}

void sub_1B6E055BC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  void *v14;
  void *v15;
  void *v16;
  void *v17;
  void *v18;
  void *v19;

  _Unwind_Resume(a1);
}

void sub_1B6E0565C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_1B6E05BD4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;

  _Unwind_Resume(a1);
}

void sub_1B6E05D00(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  v4 = v3;

  _Unwind_Resume(a1);
}

void sub_1B6E062F0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,void *a23,void *a24)
{
  void *v24;

  _Unwind_Resume(a1);
}

void sub_1B6E06738(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void ___ZL22_GetGroupingIdentifierP6NSDate_block_invoke()
{
  id v0;
  void *v1;
  id v2;
  id v3;

  v0 = objc_alloc_init(MEMORY[0x1E0CB3578]);
  v1 = (void *)_GetGroupingIdentifier(NSDate *)::dateFormatterToStripTime;
  _GetGroupingIdentifier(NSDate *)::dateFormatterToStripTime = (uint64_t)v0;

  objc_msgSend((id)_GetGroupingIdentifier(NSDate *)::dateFormatterToStripTime, "setDateFormat:", CFSTR("yyyyMMdd"));
  v2 = (id)objc_msgSend(objc_alloc(MEMORY[0x1E0C99DC8]), "initWithLocaleIdentifier:", CFSTR("en_US_POSIX"));
  objc_msgSend((id)_GetGroupingIdentifier(NSDate *)::dateFormatterToStripTime, "setLocale:");

  objc_msgSend(MEMORY[0x1E0C99E80], "timeZoneForSecondsFromGMT:", 0);
  v3 = (id)objc_claimAutoreleasedReturnValue();
  objc_msgSend((id)_GetGroupingIdentifier(NSDate *)::dateFormatterToStripTime, "setTimeZone:");

}

void sub_1B6E0686C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{

  _Unwind_Resume(a1);
}

__CFString *VCPMAVIPTypeDescription(uint64_t a1)
{
  __CFString *v1;

  if (!a1)
    return CFSTR("Person");
  if (a1 == 1)
  {
    v1 = CFSTR("Pet");
  }
  else
  {
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("Unknown(%lu)"), a1);
    v1 = (__CFString *)objc_claimAutoreleasedReturnValue();
  }
  return v1;
}

void sub_1B6E06984(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1B6E071E8(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_1B6E07544(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1B6E07BDC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, void *a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,void *a24,uint64_t a25,void *a26,uint64_t a27,void *a28)
{
  void *v28;
  void *v29;
  void *v30;
  void *v31;

  _Unwind_Resume(a1);
}

uint64_t __Block_byref_object_copy__27(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void __Block_byref_object_dispose__27(uint64_t a1)
{

}

void sub_1B6E08234(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;

  _Unwind_Resume(a1);
}

void sub_1B6E089A8(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_1B6E09508(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9, void *a10, void *a11, void *a12, uint64_t a13, uint64_t a14, uint64_t a15, void *a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,void *a41)
{
  void *v41;
  void *v42;
  void *v43;
  void *v44;
  uint64_t v45;

  _Block_object_dispose((const void *)(v45 - 256), 8);
  _Block_object_dispose((const void *)(v45 - 208), 8);

  _Unwind_Resume(a1);
}

void sub_1B6E099C8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12)
{
  void *v12;

  _Unwind_Resume(a1);
}

void sub_1B6E0AA24(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, void *a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,void *a25,void *a26,uint64_t a27,void *a28,void *a29,void *a30,void *a31,uint64_t a32,void *a33,void *a34,void *a35,void *a36)
{
  void *v36;
  void *v37;
  void *v38;
  void *v39;
  void *v40;

  _Unwind_Resume(a1);
}

void sub_1B6E0AE38(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{

  _Unwind_Resume(a1);
}

void sub_1B6E0AEF0(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1B6E0AF78(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1B6E0B164(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;

  v5 = v3;

  _Unwind_Resume(a1);
}

void sub_1B6E0B328(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;

  v5 = v4;

  _Unwind_Resume(a1);
}

void sub_1B6E0C3A4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, void *a15, uint64_t a16, void *a17, uint64_t a18, void *a19, void *a20,uint64_t a21,void *a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,void *a27,void *a28,void *a29,void *a30,void *a31,void *a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,void *a38,void *a39,void *a40)
{
  void *v40;
  void *v41;
  void *v42;
  void *v43;
  void *v44;
  void *v45;
  void *v46;

  _Unwind_Resume(a1);
}

void sub_1B6E0CB18(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *a16)
{

  _Unwind_Resume(a1);
}

void sub_1B6E0CD38(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1B6E0DC04(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, void *a14, uint64_t a15, uint64_t a16, void *a17, void *a18, void *a19, void *a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,void *a28,_Unwind_Exception *exception_objecta,uint64_t a30,void *a31,void *a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,void *a38,void *a39,void *a40)
{
  void *v40;
  void *v41;
  void *v42;
  void *v43;
  void *v44;
  void *v45;
  void *v46;
  void *v47;

  _Unwind_Resume(a1);
}

void sub_1B6E0E4A0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *a19)
{
  void *v19;

  _Unwind_Resume(a1);
}

void sub_1B6E0E720(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1B6E0E910(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_1B6E0EBB0(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1B6E0ECD8(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1B6E0EEEC(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_1B6E0F098(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1B6E0F2A4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void ___ZL38getGDVUVisualUnderstandingServiceClassv_block_invoke_0(uint64_t a1)
{
  IntelligencePlatformLibrary();
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = objc_getClass("GDVUVisualUnderstandingService");
  if (*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24))
  {
    getGDVUVisualUnderstandingServiceClass(void)::softClass = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24);
  }
  else
  {
    ___ZL38getGDVUVisualUnderstandingServiceClassv_block_invoke_cold_1();
    IntelligencePlatformLibrary();
  }
}

Class ___ZL35getGDVUEntityRecognitionClientClassv_block_invoke_1(uint64_t a1)
{
  Class result;
  void *v3;
  SEL v4;
  unint64_t v5;

  IntelligencePlatformLibrary();
  result = objc_getClass("GDVUEntityRecognitionClient");
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = result;
  if (*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24))
  {
    getGDVUEntityRecognitionClientClass(void)::softClass = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24);
  }
  else
  {
    v3 = (void *)___ZL35getGDVUEntityRecognitionClientClassv_block_invoke_cold_1();
    return (Class)+[VCPCNNBlurAnalyzerEspresso sharedModelPoolWithRevision:](v3, v4, v5);
  }
  return result;
}

void sub_1B6E0F528(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1B6E0F66C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1B6E0F75C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1B6E0F89C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  void *v14;
  void *v15;

  _Unwind_Resume(a1);
}

void sub_1B6E0FC4C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_1B6E0FD78(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1B6E10018(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1B6E10FC0(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1B6E112A4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, void *a11)
{

  _Unwind_Resume(a1);
}

void sub_1B6E11714(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1B6E14408(_Unwind_Exception *a1)
{
  _Block_object_dispose(&STACK[0x220], 8);
  _Block_object_dispose(&STACK[0x630], 8);
  _Unwind_Resume(a1);
}

id getGDEntityIdentifierClass()
{
  void *v0;
  id v1;
  _QWORD v3[5];
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;

  v4 = 0;
  v5 = &v4;
  v6 = 0x2050000000;
  v0 = (void *)getGDEntityIdentifierClass_softClass;
  v7 = getGDEntityIdentifierClass_softClass;
  if (!getGDEntityIdentifierClass_softClass)
  {
    v3[0] = MEMORY[0x1E0C809B0];
    v3[1] = 3221225472;
    v3[2] = __getGDEntityIdentifierClass_block_invoke;
    v3[3] = &unk_1E6B19610;
    v3[4] = &v4;
    __getGDEntityIdentifierClass_block_invoke((uint64_t)v3);
    v0 = (void *)v5[3];
  }
  v1 = v0;
  _Block_object_dispose(&v4, 8);
  return v1;
}

void sub_1B6E147F4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t __Block_byref_object_copy__28(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void __Block_byref_object_dispose__28(uint64_t a1)
{

}

uint64_t _personSuggestionsAreAllSingletons(void *a1)
{
  id v1;
  id v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  _BYTE v13[128];
  uint64_t v14;

  v14 = *MEMORY[0x1E0C80C00];
  v1 = a1;
  if (objc_msgSend(v1, "count"))
  {
    v11 = 0u;
    v12 = 0u;
    v9 = 0u;
    v10 = 0u;
    v2 = v1;
    v3 = objc_msgSend(v2, "countByEnumeratingWithState:objects:count:", &v9, v13, 16);
    if (v3)
    {
      v4 = v3;
      v5 = *(_QWORD *)v10;
      while (2)
      {
        v6 = 0;
        do
        {
          if (*(_QWORD *)v10 != v5)
            objc_enumerationMutation(v2);
          if (!_isSingletonPersonSuggestion(*(void **)(*((_QWORD *)&v9 + 1) + 8 * v6)))
          {
            v7 = 0;
            goto LABEL_12;
          }
          ++v6;
        }
        while (v4 != v6);
        v4 = objc_msgSend(v2, "countByEnumeratingWithState:objects:count:", &v9, v13, 16);
        if (v4)
          continue;
        break;
      }
    }
    v7 = 1;
LABEL_12:

  }
  else
  {
    v7 = 0;
  }

  return v7;
}

void _removeAllSingletonPersonSuggestionsInArray(void *a1)
{
  id v1;
  id v2;

  v1 = a1;
  objc_msgSend(v1, "indexesOfObjectsPassingTest:", &__block_literal_global_398_0);
  v2 = (id)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v1, "removeObjectsAtIndexes:", v2);

}

void sub_1B6E17100(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, ...)
{
  va_list va;

  va_start(va, a17);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void __getGDVUVisualUnderstandingServiceClass_block_invoke(uint64_t a1)
{
  IntelligencePlatformLibrary();
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = objc_getClass("GDVUVisualUnderstandingService");
  if (*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24))
  {
    getGDVUVisualUnderstandingServiceClass_softClass = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24);
  }
  else
  {
    ___ZL38getGDVUVisualUnderstandingServiceClassv_block_invoke_cold_1();
    IntelligencePlatformLibrary();
  }
}

void IntelligencePlatformLibrary()
{
  void *v0;

  if (!IntelligencePlatformLibraryCore_frameworkLibrary)
    IntelligencePlatformLibraryCore_frameworkLibrary = _sl_dlopen();
  if (!IntelligencePlatformLibraryCore_frameworkLibrary)
  {
    v0 = (void *)abort_report_np();
    free(v0);
  }
}

Class __getGDVUEntityRecognitionClientClass_block_invoke(uint64_t a1)
{
  Class result;
  uint64_t v3;

  IntelligencePlatformLibrary();
  result = objc_getClass("GDVUEntityRecognitionClient");
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = result;
  if (*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24))
  {
    getGDVUEntityRecognitionClientClass_softClass = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24);
  }
  else
  {
    v3 = ___ZL35getGDVUEntityRecognitionClientClassv_block_invoke_cold_1();
    return (Class)__getGDEntityIdentifierClass_block_invoke(v3);
  }
  return result;
}

Class __getGDEntityIdentifierClass_block_invoke(uint64_t a1)
{
  Class result;
  uint64_t v3;

  IntelligencePlatformLibrary();
  result = objc_getClass("GDEntityIdentifier");
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = result;
  if (*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24))
  {
    getGDEntityIdentifierClass_softClass = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24);
  }
  else
  {
    v3 = __getGDEntityIdentifierClass_block_invoke_cold_1();
    return (Class)_isSingletonPersonSuggestion(v3);
  }
  return result;
}

BOOL _isSingletonPersonSuggestion(void *a1)
{
  void *v1;
  _BOOL8 v2;

  objc_msgSend(a1, "objectForKeyedSubscript:", CFSTR("personFaceCount"));
  v1 = (void *)objc_claimAutoreleasedReturnValue();
  v2 = objc_msgSend(v1, "integerValue") == 1;

  return v2;
}

BOOL ___removeAllSingletonPersonSuggestionsInArray_block_invoke(uint64_t a1, void *a2)
{
  return _isSingletonPersonSuggestion(a2);
}

void sub_1B6E17614(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1B6E17768(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_1B6E17984(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  v4 = v3;

  _Unwind_Resume(a1);
}

void sub_1B6E17D58(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15)
{
  void *v15;
  void *v16;

  _Unwind_Resume(a1);
}

void sub_1B6E17F80(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, void *a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, ...)
{
  void *v10;
  const void **v11;
  void *v12;
  va_list va;

  va_start(va, a10);

  _Block_object_dispose(va, 8);
  CF<opaqueCMSampleBuffer *>::~CF(v11);

  _Unwind_Resume(a1);
}

uint64_t __Block_byref_object_copy__29(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 48) = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a2 + 48) = 0;
  return result;
}

const void **__Block_byref_object_dispose__29(uint64_t a1)
{
  return CF<opaqueCMSampleBuffer *>::~CF((const void **)(a1 + 48));
}

void sub_1B6E180D4(_Unwind_Exception *exception_object)
{
  _Unwind_Resume(exception_object);
}

const void **CGImage_CreateCVPixelBuffer(CGImage *a1, __CVBuffer **a2)
{
  __IOSurface *Property;
  const void **result;
  unint64_t Width;
  unint64_t Height;
  __int128 v8;
  CGColorSpace *ColorSpace;
  CGColorSpace *v10;
  OSType v11;
  size_t NumberOfComponents;
  uint32_t v13;
  uint64_t v14;
  void *BaseAddress;
  size_t v16;
  size_t v17;
  size_t BytesPerRow;
  CGContext *v19;
  __CVBuffer *v20;
  _BOOL8 v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  _BOOL8 v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  _BOOL8 v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  CGAffineTransform v45;
  CGContextRef c;
  int v47;
  CVPixelBufferRef pixelBuffer;
  CVPixelBufferLockFlags unlockFlags;
  CVPixelBufferRef pixelBufferOut;
  CFDictionaryRef pixelBufferAttributes;
  void *value;
  CFTypeRef cf;
  CGAffineTransform buf;
  CGRect v55;

  *a2 = 0;
  Property = (__IOSurface *)CGImageGetProperty();
  if (Property)
  {
    result = (const void **)CVPixelBufferCreateWithIOSurface(0, Property, 0, a2);
    if (!(_DWORD)result)
      return result;
    if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_DEFAULT))
    {
      LOWORD(buf.a) = 0;
      _os_log_impl(&dword_1B6C4A000, MEMORY[0x1E0C81028], OS_LOG_TYPE_DEFAULT, "[CGImage->CVPixelBuffer] Failed to create CVPixelBuffer with existing IOSurface", (uint8_t *)&buf, 2u);
    }
  }
  else if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_DEBUG))
  {
    CGImage_CreateCVPixelBuffer();
  }
  *a2 = 0;
  Width = CGImageGetWidth(a1);
  Height = CGImageGetHeight(a1);
  v8 = *(_OWORD *)(MEMORY[0x1E0C9BAA8] + 16);
  *(_OWORD *)&buf.a = *MEMORY[0x1E0C9BAA8];
  *(_OWORD *)&buf.c = v8;
  *(_OWORD *)&buf.tx = *(_OWORD *)(MEMORY[0x1E0C9BAA8] + 32);
  cf = 0;
  ColorSpace = CGImageGetColorSpace(a1);
  v10 = ColorSpace;
  v11 = 1111970369;
  if (ColorSpace)
  {
    if (CGColorSpaceSupportsOutput(ColorSpace))
    {
      NumberOfComponents = CGColorSpaceGetNumberOfComponents(v10);
      if (NumberOfComponents == 1)
        v13 = 0;
      else
        v13 = 8194;
      if (NumberOfComponents == 1)
        v11 = 1278226488;
      else
        v11 = 1111970369;
    }
    else
    {
      v13 = 8194;
    }
    if (CGColorSpaceSupportsOutput(v10) && !CGColorSpaceUsesExtendedRange(v10))
      goto LABEL_20;
  }
  else
  {
    v13 = 8194;
  }
  v10 = CGColorSpaceCreateWithName((CFStringRef)*MEMORY[0x1E0C9DA10]);
  cf = v10;
  v45.a = 0.0;
  CF<opaqueCMSampleBuffer *>::~CF((const void **)&v45);
LABEL_20:
  value = CFDictionaryCreateMutable(0, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  pixelBufferAttributes = CFDictionaryCreateMutable(0, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  CFDictionarySetValue(pixelBufferAttributes, (const void *)*MEMORY[0x1E0CA8FF0], value);
  pixelBufferOut = 0;
  CVPixelBufferCreate(0, Width, Height, v11, pixelBufferAttributes, &pixelBufferOut);
  if (pixelBufferOut)
  {
    CVBufferSetAttachment(pixelBufferOut, (CFStringRef)*MEMORY[0x1E0CA8CD8], v10, kCVAttachmentMode_ShouldPropagate);
    v47 = 0;
    pixelBuffer = pixelBufferOut;
    unlockFlags = 0;
    if (pixelBufferOut)
    {
      v14 = CVPixelBufferLockBaseAddress(pixelBufferOut, 0);
      v47 = v14;
      if (!(_DWORD)v14
        || os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR)
        && CGImage_CreateCVPixelBuffer((uint64_t)&pixelBuffer, v14, &v47))
      {
        BaseAddress = CVPixelBufferGetBaseAddress(pixelBufferOut);
        v16 = CVPixelBufferGetWidth(pixelBufferOut);
        v17 = CVPixelBufferGetHeight(pixelBufferOut);
        BytesPerRow = CVPixelBufferGetBytesPerRow(pixelBufferOut);
        v19 = CGBitmapContextCreate(BaseAddress, v16, v17, 8uLL, BytesPerRow, v10, v13);
        c = v19;
        if (v19)
        {
          v45 = buf;
          CGContextConcatCTM(v19, &v45);
          v55.size.width = (double)Width;
          v55.size.height = (double)Height;
          v55.origin.x = 0.0;
          v55.origin.y = 0.0;
          CGContextDrawImage(c, v55, a1);
          if (!CVPixelBufferLock::Unlock((CVPixelBufferLock *)&v47))
          {
            v20 = pixelBufferOut;
            if (pixelBufferOut)
              v20 = (__CVBuffer *)CFRetain(pixelBufferOut);
            *a2 = v20;
          }
        }
        else
        {
          v37 = os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR);
          if (v37)
            CGImage_CreateCVPixelBuffer(v37, v38, v39, v40, v41, v42, v43, v44);
        }
        CF<opaqueCMSampleBuffer *>::~CF((const void **)&c);
        if (pixelBuffer
          && !v47
          && CVPixelBufferUnlockBaseAddress(pixelBuffer, unlockFlags)
          && os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
        {
          -[VCPImageExposurePreAnalyzer analyzePixelBuffer:flags:results:cancel:].cold.1();
        }
      }
    }
    else
    {
      v29 = os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR);
      if (v29)
        -[VCPVideoCNNAnalyzer copyImage:withChannels:settling:].cold.1(v29, v30, v31, v32, v33, v34, v35, v36);
    }
  }
  else
  {
    v21 = os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR);
    if (v21)
      CGImage_CreateCVPixelBuffer(v21, v22, v23, v24, v25, v26, v27, v28);
  }
  CF<opaqueCMSampleBuffer *>::~CF((const void **)&pixelBufferOut);
  CF<opaqueCMSampleBuffer *>::~CF((const void **)&pixelBufferAttributes);
  CF<opaqueCMSampleBuffer *>::~CF((const void **)&value);
  return CF<opaqueCMSampleBuffer *>::~CF(&cf);
}

void sub_1B6E184F4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  const void *v8;
  va_list va;
  uint64_t v10;
  va_list va1;
  uint64_t v12;
  uint64_t v13;
  const void *v14;
  va_list va2;
  const void *v16;
  va_list va3;
  const void *v18;
  va_list va4;
  va_list va5;

  va_start(va5, a7);
  va_start(va4, a7);
  va_start(va3, a7);
  va_start(va2, a7);
  va_start(va1, a7);
  va_start(va, a7);
  v8 = va_arg(va1, const void *);
  va_copy(va2, va1);
  v10 = va_arg(va2, _QWORD);
  v12 = va_arg(va2, _QWORD);
  v13 = va_arg(va2, _QWORD);
  va_copy(va3, va2);
  v14 = va_arg(va3, const void *);
  va_copy(va4, va3);
  v16 = va_arg(va4, const void *);
  va_copy(va5, va4);
  v18 = va_arg(va5, const void *);
  CF<opaqueCMSampleBuffer *>::~CF((const void **)va);
  CVPixelBufferLock::~CVPixelBufferLock((CVPixelBufferLock *)va1);
  CF<opaqueCMSampleBuffer *>::~CF((const void **)va2);
  CF<opaqueCMSampleBuffer *>::~CF((const void **)va3);
  CF<opaqueCMSampleBuffer *>::~CF((const void **)va4);
  CF<opaqueCMSampleBuffer *>::~CF((const void **)va5);
  _Unwind_Resume(a1);
}

void sub_1B6E18738(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, void *a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, ...)
{
  void *v10;
  const void **v11;
  void *v12;
  va_list va;

  va_start(va, a10);

  _Block_object_dispose(va, 8);
  CF<opaqueCMSampleBuffer *>::~CF(v11);

  _Unwind_Resume(a1);
}

void sub_1B6E18874(_Unwind_Exception *exception_object)
{
  _Unwind_Resume(exception_object);
}

void sub_1B6E19E70(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{
  void *v10;
  void *v11;
  void *v12;
  void *v13;

  _Unwind_Resume(a1);
}

void sub_1B6E19FC0(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1B6E1A06C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1B6E1A188(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, objc_super a10)
{
  a10.super_class = (Class)VCPMovieAssetWriter;
  -[_Unwind_Exception dealloc](&a10, sel_dealloc);
  _Unwind_Resume(a1);
}

void sub_1B6E1A248(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);

  _Unwind_Resume(a1);
}

void sub_1B6E1A2F0(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);

  _Unwind_Resume(a1);
}

void sub_1B6E1A36C(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);

  _Unwind_Resume(a1);
}

void sub_1B6E1A414(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);

  _Unwind_Resume(a1);
}

void sub_1B6E1A490(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);

  _Unwind_Resume(a1);
}

void sub_1B6E1A538(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);

  _Unwind_Resume(a1);
}

void sub_1B6E1A798(_Unwind_Exception *a1)
{
  uint64_t v1;

  CF<opaqueCMSampleBuffer *>::~CF((const void **)(v1 - 40));
  _Unwind_Resume(a1);
}

void sub_1B6E1AA44(_Unwind_Exception *a1)
{
  uint64_t v1;

  CF<opaqueCMSampleBuffer *>::~CF((const void **)(v1 - 40));
  _Unwind_Resume(a1);
}

void sub_1B6E1B0AC(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_1B6E1B318(_Unwind_Exception *a1, uint64_t a2, ...)
{
  void *v2;
  uint64_t v3;
  va_list va;

  va_start(va, a2);
  CF<opaqueCMSampleBuffer *>::~CF((const void **)va);
  CF<opaqueCMSampleBuffer *>::~CF((const void **)(v3 - 56));

  _Unwind_Resume(a1);
}

void sub_1B6E1B58C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  void *v2;
  uint64_t v3;
  va_list va;

  va_start(va, a2);
  CF<opaqueCMSampleBuffer *>::~CF((const void **)va);
  CF<opaqueCMSampleBuffer *>::~CF((const void **)(v3 - 56));

  _Unwind_Resume(a1);
}

void sub_1B6E1BB14(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *a20)
{

  _Unwind_Resume(a1);
}

void sub_1B6E1C028(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18)
{

  _Unwind_Resume(a1);
}

void sub_1B6E1C2B4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1B6E1C83C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  _Unwind_Resume(a1);
}

void sub_1B6E1CFCC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13)
{
  void *v13;
  void *v14;
  void *v15;
  void *v16;
  void *v17;

  _Unwind_Resume(a1);
}

void sub_1B6E1D1A0(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_1B6E1D260(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1B6E1D34C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1B6E1D818(_Unwind_Exception *a1)
{
  uint64_t v1;

  CF<opaqueCMSampleBuffer *>::~CF((const void **)(v1 - 40));
  _Unwind_Resume(a1);
}

void sub_1B6E1DA74(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, uint64_t a15, void *a16)
{
  void *v16;
  void *v17;

  _Unwind_Resume(a1);
}

void sub_1B6E1DDE4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1B6E1DED0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, uint64_t a15, void *a16)
{
  void *v16;
  void *v17;

  _Unwind_Resume(a1);
}

void sub_1B6E1E348(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  void *v14;

  _Unwind_Resume(a1);
}

void sub_1B6E1EAE4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1B6E1EBD0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, objc_super a9)
{
  a9.super_class = (Class)VCPVideoTrackSubsamplingDecoder;
  -[_Unwind_Exception dealloc](&a9, sel_dealloc);
  _Unwind_Resume(a1);
}

void sub_1B6E1F258(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

uint64_t MediaAnalysisShotType(double a1)
{
  if (a1 >= 0.449999988)
    return 1;
  if (a1 >= 0.25)
    return 2;
  if (a1 >= 0.100000001)
    return 3;
  if (a1 > 0.0)
    return 4;
  return 0;
}

uint64_t MediaAnalysisFacePosition(CGRect *a1)
{
  double MidX;
  double MidY;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  MidX = CGRectGetMidX(*a1);
  MidY = CGRectGetMidY(*a1);
  v4 = 8;
  v5 = 2;
  if (MidX < 0.75)
    v5 = 0;
  if (MidX > 0.25)
    v4 = v5;
  v6 = v4 | 1;
  if (MidY < 0.75)
    v6 = v4;
  v7 = v4 | 4;
  if (MidY > 0.25)
    v7 = v6;
  if (v7)
    return v7;
  else
    return 16;
}

uint64_t MediaAnalysisPoseYawFromRadian(float a1)
{
  int v1;

  v1 = (int)(float)(a1 / 0.5236);
  if (v1 >= 2)
    v1 = 2;
  if (v1 <= -2)
    v1 = -2;
  return (v1 + 2);
}

id MediaAnalysisPostProcessAnalysis(void *a1, void *a2, int a3)
{
  id v5;
  id v6;
  uint64_t v7;
  uint64_t v8;

  v5 = a1;
  v6 = a2;
  if ((int)objc_msgSend(v6, "vcp_version") <= 17 && objc_msgSend(v5, "vcp_isVideoTimelapse"))
  {
    MediaAnalysisPostProcessCurationScore(v5, v6);
    v7 = objc_claimAutoreleasedReturnValue();

    v6 = (id)v7;
  }
  if ((int)objc_msgSend(v6, "vcp_version") >= 6 != a3)
  {
    MediaAnalysisPostProcessSlowmoResults(v5, v6, a3);
    v8 = objc_claimAutoreleasedReturnValue();

    v6 = (id)v8;
  }

  return v6;
}

void sub_1B6E1F674(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

id MediaAnalysisPostProcessCurationScore(void *a1, void *a2)
{
  id v3;
  id v4;
  uint64_t v5;
  double v6;
  id v7;
  __CFString **v9;
  int v10;
  int v11;
  VCPVideoGlobalAnalyzer *v12;
  void *v13;
  float v14;
  float v15;
  double v16;
  float v17;
  double v18;

  v3 = a1;
  v4 = a2;
  if (!v4
    || objc_msgSend(v3, "mediaType") != 2
    || (v5 = objc_msgSend(v4, "vcp_types"), v5 == 0x7FFFFFFFFFFFFLL) && (objc_msgSend(v4, "vcp_quality"), v6 == 0.0))
  {
    v7 = v4;
    goto LABEL_6;
  }
  v7 = (id)objc_msgSend(v4, "mutableCopy");
  if (objc_msgSend(v3, "vcp_isShortMovie"))
  {
    objc_msgSend(v7, "vcp_setFlags:", 0);
    objc_msgSend(v7, "vcp_setQuality:", 0.0);
    objc_msgSend(v7, "vcp_setStatsFlags:", 0);
    objc_msgSend(v7, "vcp_setTypes:", 0x7FFFFFFFFFFFFFFFLL);
    v9 = MediaAnalysisResultsKey;
LABEL_13:
    objc_msgSend(v7, "removeObjectForKey:", *v9);
    goto LABEL_6;
  }
  v10 = objc_msgSend(v4, "vcp_degraded");
  if (v5 == 2048)
    v11 = v10;
  else
    v11 = 0;
  v9 = MediaAnalysisQualityKey;
  if (v11 == 1)
    goto LABEL_13;
  v12 = objc_alloc_init(VCPVideoGlobalAnalyzer);
  if (v12)
  {
    if (objc_msgSend(v3, "vcp_isVideoSlowmo"))
    {
      objc_msgSend(MEMORY[0x1E0CD1440], "vcp_allAcceptableResourcesForAsset:", v3);
      v13 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v13, "vcp_getFpsRate");
      v15 = v14;

    }
    else if (objc_msgSend(v3, "vcp_isVideoTimelapse"))
    {
      v15 = 0.66667;
    }
    else
    {
      v15 = 1.0;
    }
    *(float *)&v16 = v15;
    -[VCPVideoGlobalAnalyzer analyzeOverallQuality:withFpsRate:](v12, "analyzeOverallQuality:withFpsRate:", v7, v16);
    v18 = v17;
    if (v18 == -1.0)
      objc_msgSend(v7, "removeObjectForKey:", CFSTR("quality"));
    else
      objc_msgSend(v7, "vcp_setQuality:", v18, -1.0);
  }

LABEL_6:
  return v7;
}

void sub_1B6E1F84C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;

  v6 = v5;

  _Unwind_Resume(a1);
}

id MediaAnalysisMergeAnalysis(void *a1, void *a2, int a3)
{
  id v5;
  id v6;
  void *v7;
  void *v8;
  char v9;
  void *v10;
  void *v11;
  uint64_t v12;
  void *v13;
  void *v14;
  void *v15;
  void *v16;
  void *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t i;
  uint64_t v21;
  void *v22;
  void *v23;
  void *v24;
  void *v25;
  void *v26;
  void *v27;
  void *v28;
  void *v29;
  double v30;
  void *v31;
  void *v32;
  id v33;
  void *v34;
  double v36;
  void *v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  _BYTE v42[128];
  uint64_t v43;

  v43 = *MEMORY[0x1E0C80C00];
  v5 = a1;
  v6 = a2;
  if (objc_msgSend(v5, "vcp_types") || objc_msgSend(v6, "vcp_types"))
  {
    if (!objc_msgSend(v5, "vcp_types") && objc_msgSend(v6, "vcp_types"))
      goto LABEL_32;
    if (!objc_msgSend(v6, "vcp_types") && objc_msgSend(v5, "vcp_types"))
    {
LABEL_37:
      v33 = v5;
      v5 = v33;
      goto LABEL_43;
    }
    if (objc_msgSend(v5, "vcp_version") == 69)
    {
      if (objc_msgSend(v6, "vcp_version") == 69)
      {
        objc_msgSend(v5, "vcp_dateModified");
        v7 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v6, "vcp_dateModified");
        v8 = (void *)objc_claimAutoreleasedReturnValue();
        v9 = objc_msgSend(v7, "isEqualToDate:", v8);

        if ((v9 & 1) != 0)
        {
          if (!a3)
            goto LABEL_13;
          if (!objc_msgSend(v5, "vcp_degraded") || (objc_msgSend(v6, "vcp_degraded") & 1) != 0)
          {
            if (objc_msgSend(v6, "vcp_degraded") && (objc_msgSend(v5, "vcp_degraded") & 1) == 0)
              goto LABEL_37;
LABEL_13:
            objc_msgSend(v5, "vcp_dateAnalyzed");
            v10 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend(v6, "vcp_dateAnalyzed");
            v11 = (void *)objc_claimAutoreleasedReturnValue();
            v12 = objc_msgSend(v10, "compare:", v11);

            if (v12 == 1)
              v13 = v5;
            else
              v13 = v6;
            if (v12 == 1)
              v5 = v6;
            objc_msgSend(MEMORY[0x1E0C99E08], "dictionary");
            v14 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend(v5, "vcp_results");
            v15 = (void *)objc_claimAutoreleasedReturnValue();

            if (v15)
            {
              objc_msgSend(v5, "vcp_results");
              v16 = (void *)objc_claimAutoreleasedReturnValue();
              objc_msgSend(v14, "addEntriesFromDictionary:", v16);

            }
            v40 = 0u;
            v41 = 0u;
            v38 = 0u;
            v39 = 0u;
            MediaAnalysisResultsKeysForAnalysisTypes(objc_msgSend(v13, "vcp_types") & ~objc_msgSend(v5, "vcp_types"));
            v17 = (void *)objc_claimAutoreleasedReturnValue();
            v18 = objc_msgSend(v17, "countByEnumeratingWithState:objects:count:", &v38, v42, 16);
            if (v18)
            {
              v19 = *(_QWORD *)v39;
              do
              {
                for (i = 0; i != v18; ++i)
                {
                  if (*(_QWORD *)v39 != v19)
                    objc_enumerationMutation(v17);
                  v21 = *(_QWORD *)(*((_QWORD *)&v38 + 1) + 8 * i);
                  objc_msgSend(v13, "vcp_results");
                  v22 = (void *)objc_claimAutoreleasedReturnValue();
                  objc_msgSend(v22, "objectForKey:", v21);
                  v23 = (void *)objc_claimAutoreleasedReturnValue();

                  if (v23)
                    objc_msgSend(v14, "setObject:forKey:", v23, v21);

                }
                v18 = objc_msgSend(v17, "countByEnumeratingWithState:objects:count:", &v38, v42, 16);
              }
              while (v18);
            }

            objc_msgSend(MEMORY[0x1E0C99E08], "dictionaryWithDictionary:", v5);
            v24 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInt:", objc_msgSend(v13, "vcp_version"));
            v25 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend(v24, "setObject:forKey:", v25, CFSTR("version"));

            objc_msgSend(v13, "vcp_dateModified");
            v26 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend(v24, "setObject:forKey:", v26, CFSTR("dateModified"));

            objc_msgSend(v13, "vcp_dateAnalyzed");
            v27 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend(v24, "setObject:forKey:", v27, CFSTR("dateAnalyzed"));

            objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithUnsignedLongLong:", objc_msgSend(v13, "vcp_types") | objc_msgSend(v5, "vcp_types"));
            v28 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend(v24, "setObject:forKey:", v28, CFSTR("performedAnalysisTypes"));

            objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithUnsignedInteger:", objc_msgSend(v13, "vcp_flags") | objc_msgSend(v5, "vcp_flags"));
            v29 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend(v24, "setObject:forKey:", v29, CFSTR("flags"));

            objc_msgSend(v24, "setObject:forKey:", v14, CFSTR("metadataRanges"));
            objc_msgSend(v13, "vcp_quality");
            if (v30 == -1.0)
            {
              objc_msgSend(v5, "vcp_quality");
              if (v36 == -1.0)
              {
LABEL_48:

                v6 = v13;
                goto LABEL_44;
              }
              v37 = (void *)MEMORY[0x1E0CB37E8];
              objc_msgSend(v5, "vcp_quality");
              objc_msgSend(v37, "numberWithDouble:");
              v32 = (void *)objc_claimAutoreleasedReturnValue();
              objc_msgSend(v24, "setObject:forKey:", v32, CFSTR("quality"));
            }
            else
            {
              v31 = (void *)MEMORY[0x1E0CB37E8];
              objc_msgSend(v13, "vcp_quality");
              objc_msgSend(v31, "numberWithDouble:");
              v32 = (void *)objc_claimAutoreleasedReturnValue();
              objc_msgSend(v24, "setObject:forKey:", v32, CFSTR("quality"));
            }

            goto LABEL_48;
          }
        }
LABEL_32:
        v33 = v6;
        v6 = v33;
LABEL_43:
        v24 = v33;
        goto LABEL_44;
      }
      if (objc_msgSend(v5, "vcp_version") == 69)
        v34 = v5;
      else
        v34 = 0;
    }
    else if (objc_msgSend(v6, "vcp_version") == 69)
    {
      v34 = v6;
    }
    else
    {
      v34 = 0;
    }
    v33 = v34;
    goto LABEL_43;
  }
  v24 = 0;
LABEL_44:

  return v24;
}

void sub_1B6E1FDD0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, _Unwind_Exception *exception_object)
{
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;

  _Unwind_Resume(a1);
}

id MediaAnalysisPostProcessMovieHighlights(void *a1, void *a2, void *a3, double a4, double a5)
{
  id v9;
  id v10;
  id v11;
  int v12;
  void *v13;
  int v14;
  void *v15;
  void *v16;
  void *v17;
  id v18;
  void *v19;
  void *v20;
  void *v21;
  VCPMovieHighlightAnalyzer *v22;
  void *v23;
  void *v24;
  void *v25;
  uint8_t v27[16];
  uint8_t buf[16];

  v9 = a1;
  v10 = a2;
  v11 = a3;
  if (v9)
  {
    v12 = objc_msgSend(v9, "vcp_types");
    objc_msgSend(v10, "objectForKeyedSubscript:", CFSTR("HighlightFullResult"));
    v13 = (void *)objc_claimAutoreleasedReturnValue();
    v14 = objc_msgSend(v13, "BOOLValue");

    if ((v12 & 0x40000) != 0)
    {
      objc_msgSend(v9, "vcp_results");
      v15 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v15, "objectForKeyedSubscript:", CFSTR("MovieHighlightScoreResults"));
      v16 = (void *)objc_claimAutoreleasedReturnValue();
      if (v16)
      {
        objc_msgSend(v10, "objectForKeyedSubscript:", CFSTR("HighlightContexts"));
        v17 = (void *)objc_claimAutoreleasedReturnValue();
        if (v17)
        {

LABEL_16:
          v22 = -[VCPMovieHighlightAnalyzer initWithPostProcessOptions:asset:]([VCPMovieHighlightAnalyzer alloc], "initWithPostProcessOptions:asset:", v10, v11);
          if (v22)
          {
            objc_msgSend(v9, "vcp_results");
            v23 = (void *)objc_claimAutoreleasedReturnValue();
            -[VCPMovieHighlightAnalyzer postProcessMovieHighlight:frameSize:](v22, "postProcessMovieHighlight:frameSize:", v23, a4, a5);
            v24 = (void *)objc_claimAutoreleasedReturnValue();

            if (v24)
            {
              if (v14)
              {
                v18 = (id)objc_msgSend(v9, "mutableCopy");
                objc_msgSend(v18, "vcp_addEntriesFromResults:", v24);
              }
              else
              {
                if (objc_msgSend(v24, "count"))
                  v25 = v24;
                else
                  v25 = 0;
                v18 = v25;
              }
            }
            else
            {
              if ((int)MediaAnalysisLogLevel() >= 3 && os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
              {
                *(_WORD *)v27 = 0;
                _os_log_impl(&dword_1B6C4A000, MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR, "[MediaAnalysis] Post-process highlights returned NULL", v27, 2u);
              }
              v18 = 0;
            }

          }
          else
          {
            v18 = 0;
          }

          goto LABEL_31;
        }
        objc_msgSend(v9, "vcp_results");
        v20 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v20, "objectForKeyedSubscript:", CFSTR("MovieHighlightResults"));
        v21 = (void *)objc_claimAutoreleasedReturnValue();

        if (v21)
          goto LABEL_16;
      }
      else
      {

      }
    }
    if (v14)
      v19 = v9;
    else
      v19 = 0;
    v18 = v19;
    goto LABEL_31;
  }
  if ((int)MediaAnalysisLogLevel() >= 4 && os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl(&dword_1B6C4A000, MEMORY[0x1E0C81028], OS_LOG_TYPE_DEFAULT, "[MediaAnalysis] Requested post process highlight with NULL input analysis", buf, 2u);
  }
  v18 = 0;
LABEL_31:

  return v18;
}

void sub_1B6E2018C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;

  v7 = v5;

  _Unwind_Resume(a1);
}

id MediaAnalysisResultsTypesForAnalysisTypes(uint64_t a1)
{
  void *v1;
  id v2;
  uint64_t v3;
  uint64_t v4;
  NSObject *v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  void *v10;
  uint8_t buf[16];
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  _BYTE v16[128];
  uint64_t v17;

  v17 = *MEMORY[0x1E0C80C00];
  MediaAnalysisResultsKeysForAnalysisTypes(a1);
  v10 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(MEMORY[0x1E0C99E20], "set");
  v1 = (void *)objc_claimAutoreleasedReturnValue();
  v14 = 0u;
  v15 = 0u;
  v12 = 0u;
  v13 = 0u;
  v2 = v10;
  v3 = objc_msgSend(v2, "countByEnumeratingWithState:objects:count:", &v12, v16, 16);
  if (v3)
  {
    v4 = *(_QWORD *)v13;
    v5 = MEMORY[0x1E0C81028];
    do
    {
      v6 = 0;
      do
      {
        if (*(_QWORD *)v13 != v4)
          objc_enumerationMutation(v2);
        v7 = MediaAnalysisResultsKeyToType(*(void **)(*((_QWORD *)&v12 + 1) + 8 * v6));
        if (v7)
        {
          objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithUnsignedInteger:", v7);
          v8 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v1, "addObject:", v8);

        }
        else if ((int)MediaAnalysisLogLevel() >= 3 && os_log_type_enabled(v5, OS_LOG_TYPE_ERROR))
        {
          *(_WORD *)buf = 0;
          _os_log_impl(&dword_1B6C4A000, v5, OS_LOG_TYPE_ERROR, "[MediaAnalysisResultsTypesForAnalysisTypes] Unknown result type", buf, 2u);
        }
        ++v6;
      }
      while (v3 != v6);
      v3 = objc_msgSend(v2, "countByEnumeratingWithState:objects:count:", &v12, v16, 16);
    }
    while (v3);
  }

  return v1;
}

void sub_1B6E203B8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{
  void *v10;
  void *v11;

  _Unwind_Resume(a1);
}

void sub_1B6E205FC(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_1B6E20FDC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *a17)
{

  _Unwind_Resume(a1);
}

void sub_1B6E215A4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  void *v11;
  void *v12;

  _Unwind_Resume(a1);
}

void sub_1B6E2176C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1B6E21AEC(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1B6E21C98(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, _Unwind_Exception *exception_object)
{
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  void *v16;
  void *v17;
  void *v18;
  void *v19;

  _Unwind_Resume(a1);
}

void sub_1B6E21CF4()
{
  JUMPOUT(0x1B6E21CD8);
}

void sub_1B6E21CFC()
{
  JUMPOUT(0x1B6E21CDCLL);
}

void sub_1B6E21D04()
{
  JUMPOUT(0x1B6E21CE0);
}

void sub_1B6E22230(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18)
{

  _Unwind_Resume(a1);
}

void sub_1B6E227F0(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1B6E231E4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, uint64_t a15, void *a16, void *a17, void *a18)
{
  void *v18;
  void *v19;
  void *v20;
  void *v21;

  _Unwind_Resume(a1);
}

void sub_1B6E23F10(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *a17, uint64_t a18, void *a19, void *a20,void *a21,uint64_t a22,void *a23)
{

  _Unwind_Resume(a1);
}

void sub_1B6E241A0(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

uint64_t EdgeExtendLuma420(__CVBuffer *a1)
{
  int Width;
  int Height;
  uint64_t v4;
  uint64_t v5;
  size_t BytesPerRowOfPlane;
  char *BaseAddressOfPlane;
  size_t v9;
  char *v10;
  int v11;
  char v12;
  size_t v13;
  char *v14;
  uint64_t v15;
  size_t v16;
  unsigned int v17;
  size_t v18;
  int v20;
  CVPixelBufferRef pixelBuffer;
  CVPixelBufferLockFlags unlockFlags;

  if (!a1)
    return 4294967246;
  Width = CVPixelBufferGetWidth(a1);
  Height = CVPixelBufferGetHeight(a1);
  pixelBuffer = a1;
  unlockFlags = 0;
  v4 = CVPixelBufferLockBaseAddress(a1, 0);
  v20 = v4;
  if ((_DWORD)v4)
  {
    v5 = v4;
    if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
      -[VCPVideoCNNAnalyzer copyImage:withChannels:settling:].cold.3();
  }
  else
  {
    if ((Width & 0xF) != 0)
    {
      BytesPerRowOfPlane = CVPixelBufferGetBytesPerRowOfPlane(a1, 0);
      BaseAddressOfPlane = (char *)CVPixelBufferGetBaseAddressOfPlane(a1, 0);
      if (Height >= 1)
      {
        v9 = 16 - (Width & 0xFu);
        v10 = &BaseAddressOfPlane[Width];
        v11 = Height;
        do
        {
          memset(v10, *(v10 - 1), v9);
          v10 += BytesPerRowOfPlane;
          --v11;
        }
        while (v11);
      }
    }
    v12 = Height & 0xF;
    if ((Height & 0xF) != 0)
    {
      v13 = CVPixelBufferGetBytesPerRowOfPlane(a1, 0);
      v14 = (char *)CVPixelBufferGetBaseAddressOfPlane(a1, 0);
      v15 = Height - 1;
      v16 = v13 * v15;
      v17 = *(_DWORD *)&v12 | 0xFFFFFFF0;
      v18 = v13 + v13 * v15;
      do
      {
        memcpy(&v14[v18], &v14[v16], v13);
        v14 += v13;
      }
      while (!__CFADD__(v17++, 1));
    }
    v5 = CVPixelBufferLock::Unlock((CVPixelBufferLock *)&v20);
    if (pixelBuffer
      && !v20
      && CVPixelBufferUnlockBaseAddress(pixelBuffer, unlockFlags)
      && os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
    {
      -[VCPCNNSmileDetector detectSmileForFace:inBuffer:smile:].cold.1();
    }
  }
  return v5;
}

void sub_1B6E24424(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  CVPixelBufferLock::~CVPixelBufferLock((CVPixelBufferLock *)va);
  _Unwind_Resume(a1);
}

void sub_1B6E247DC(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1B6E249BC(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  _Unwind_Resume(a1);
}

void sub_1B6E24B68(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  _Unwind_Resume(a1);
}

void sub_1B6E24D20(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1B6E24F84(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, objc_super a9)
{
  a9.super_class = (Class)MADTextEmbeddingCalibration;
  -[_Unwind_Exception dealloc](&a9, sel_dealloc);
  _Unwind_Resume(a1);
}

void sub_1B6E2521C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1B6E2545C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1B6E25938(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  void *v3;
  va_list va;

  va_start(va, a3);
  CVPixelBufferLock::~CVPixelBufferLock((CVPixelBufferLock *)va);

  _Unwind_Resume(a1);
}

void sub_1B6E25AF0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_1B6E25EA4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;

  v10 = v8;

  _Unwind_Resume(a1);
}

void sub_1B6E2615C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  _Unwind_Resume(a1);
}

void sub_1B6E26A60(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;

  v7 = v6;

  _Unwind_Resume(a1);
}

void sub_1B6E26C14(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;

  v5 = v3;

  _Unwind_Resume(a1);
}

void sub_1B6E26E88(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  _Unwind_Resume(a1);
}

void sub_1B6E26F90(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

uint64_t VCPProtoMovieBabbleResultReadFrom(uint64_t a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  char v14;
  uint64_t v16;
  int v17;
  VCPProtoTimeRange *v19;
  uint64_t v20;
  unint64_t v21;
  int v22;
  uint64_t result;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) < *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
  {
    v7 = (int *)MEMORY[0x1E0D82BB8];
    do
    {
      if (*(_BYTE *)(a2 + *v5))
        break;
      v8 = 0;
      v9 = 0;
      v10 = 0;
      while (1)
      {
        v11 = *v3;
        v12 = *(_QWORD *)(a2 + v11);
        v13 = v12 + 1;
        if (v12 == -1 || v13 > *(_QWORD *)(a2 + *v4))
          break;
        v14 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
        *(_QWORD *)(a2 + v11) = v13;
        v10 |= (unint64_t)(v14 & 0x7F) << v8;
        if ((v14 & 0x80) == 0)
          goto LABEL_12;
        v8 += 7;
        if (v9++ >= 9)
        {
          v10 = 0;
          v16 = *v5;
          v17 = *(unsigned __int8 *)(a2 + v16);
          goto LABEL_14;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
      v16 = *v5;
      v17 = *(unsigned __int8 *)(a2 + v16);
      if (*(_BYTE *)(a2 + v16))
        v10 = 0;
LABEL_14:
      if (v17 || (v10 & 7) == 4)
        break;
      if ((v10 >> 3) == 2)
      {
        v20 = *v3;
        v21 = *(_QWORD *)(a2 + v20);
        if (v21 <= 0xFFFFFFFFFFFFFFFBLL && v21 + 4 <= *(_QWORD *)(a2 + *v4))
        {
          v22 = *(_DWORD *)(*(_QWORD *)(a2 + *v7) + v21);
          *(_QWORD *)(a2 + v20) = v21 + 4;
        }
        else
        {
          *(_BYTE *)(a2 + v16) = 1;
          v22 = 0;
        }
        *(_DWORD *)(a1 + 8) = v22;
      }
      else if ((v10 >> 3) == 1)
      {
        v19 = objc_alloc_init(VCPProtoTimeRange);
        objc_storeStrong((id *)(a1 + 16), v19);
        if (!PBReaderPlaceMark() || !VCPProtoTimeRangeReadFrom((uint64_t)v19, a2))
        {

          return 0;
        }
        PBReaderRecallMark();

      }
      else
      {
        result = PBReaderSkipValueWithTag();
        if (!(_DWORD)result)
          return result;
      }
    }
    while (*(_QWORD *)(a2 + *v3) < *(_QWORD *)(a2 + *v4));
  }
  return *(_BYTE *)(a2 + *v5) == 0;
}

void sub_1B6E28438(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_1B6E285C8(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  _Unwind_Resume(a1);
}

void sub_1B6E28AD0(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1B6E28ECC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, void *a13)
{
  void *v13;
  void *v14;
  void *v15;
  void *v16;

  _Unwind_Resume(a1);
}

void sub_1B6E29664(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,void *a34)
{
  void *v34;
  void *v35;

  _Unwind_Resume(a1);
}

void sub_1B6E29878(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  CF<opaqueCMSampleBuffer *>::~CF((const void **)va);
  _Unwind_Resume(a1);
}

void sub_1B6E29A9C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,char a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,id a26)
{
  void *v26;

  _Block_object_dispose(&a21, 8);
  _Unwind_Resume(a1);
}

uint64_t __Block_byref_object_copy__30(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void __Block_byref_object_dispose__30(uint64_t a1)
{

}

void sub_1B6E29D24(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  _Unwind_Resume(a1);
}

void sub_1B6E29EA4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1B6E29F90(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_1B6E2A2D8(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  _Unwind_Resume(a1);
}

void sub_1B6E2A514(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_1B6E2A684(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_1B6E2A754(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, objc_super a9)
{
  a9.super_class = (Class)VCPEspressoModel;
  -[_Unwind_Exception dealloc](&a9, sel_dealloc);
  _Unwind_Resume(a1);
}

void sub_1B6E2A864(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1B6E2AB48(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9, uint64_t a10, uint64_t a11, void *a12)
{
  void *v12;
  void *v13;

  _Unwind_Resume(a1);
}

void sub_1B6E2AD6C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9, void *a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void sub_1B6E2C4F8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,void *a28,uint64_t a29,void *a30,void *a31,uint64_t a32,uint64_t a33,uint64_t a34,void *a35,void *a36,void *a37,void *a38,void *a39,void *a40,void *a41,uint64_t a42,void *a43,void *a44,void *a45)
{
  void *v45;
  void *v46;

  _Unwind_Resume(a1);
}

void sub_1B6E2D2A4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, void *a13, void *a14, void *a15, uint64_t a16, void *a17)
{
  void *v17;
  void *v18;
  void *v19;
  void *v20;

  _Unwind_Resume(a1);
}

void sub_1B6E2D454(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1B6E2E1EC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, uint64_t a15, uint64_t a16, void *a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void *a22,void *a23,uint64_t a24,uint64_t a25,uint64_t a26,void *a27,uint64_t a28,void *a29,void *a30,uint64_t a31,uint64_t a32,uint64_t a33,void *a34)
{
  void *v34;
  void *v35;
  void *v36;

  _Unwind_Resume(a1);
}

void sub_1B6E2EDD0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, uint64_t a15, void *a16, uint64_t a17, uint64_t a18, void *a19, void *a20,void *a21,void *a22,uint64_t a23,void *a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,void *a31)
{

  _Unwind_Resume(a1);
}

void sub_1B6E2F67C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, void *a11, void *a12)
{

  _Unwind_Resume(a1);
}

void sub_1B6E2FC78(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  void *v16;

  _Unwind_Resume(a1);
}

void sub_1B6E2FF50(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  _Unwind_Resume(a1);
}

void sub_1B6E3037C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1B6E31264(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,void *a25,void *a26,uint64_t a27,void *a28,void *a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,void *a39)
{

  _Unwind_Resume(a1);
}

void sub_1B6E32258(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *a19, void *a20,void *a21,void *a22,void *a23,void *a24,void *a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,void *a30,void *a31,uint64_t a32,void *a33,void *a34)
{
  void *v34;

  _Unwind_Resume(a1);
}

void sub_1B6E32588(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1B6E32888(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_1B6E32944(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1B6E329D0(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1B6E32A2C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1B6E32B78(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1B6E32C3C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_1B6E32D88(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_1B6E32F14(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  _Unwind_Resume(a1);
}

void sub_1B6E33054(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  _Unwind_Resume(a1);
}

void sub_1B6E338CC(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;

  _Unwind_Resume(a1);
}

void sub_1B6E33F94(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_1B6E3405C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

ma::MovingObjectSegment *ma::MovingObjectSegment::MovingObjectSegment(ma::MovingObjectSegment *this)
{
  ma::Segment *v2;

  v2 = ma::Segment::Segment(this);
  *(_QWORD *)v2 = &off_1E6B14098;
  *((_QWORD *)v2 + 10) = 0;
  *((_DWORD *)v2 + 22) = 0;
  ma::MovingObjectSegment::ClearObjects(v2);
  return this;
}

void sub_1B6E340AC(_Unwind_Exception *a1)
{
  const __CFArray **v1;

  Vector<ma::Object *>::~Vector(v1);
  _Unwind_Resume(a1);
}

const __CFArray *ma::MovingObjectSegment::ClearObjects(ma::MovingObjectSegment *this)
{
  const __CFArray *result;
  const __CFArray **v2;
  uint64_t v3;

  v2 = (const __CFArray **)((char *)this + 80);
  result = (const __CFArray *)*((_QWORD *)this + 10);
  if (result)
  {
    do
    {
      result = (const __CFArray *)CFArrayGetCount(result);
      if (!(_DWORD)result)
        break;
      v3 = *(_QWORD *)Vector<ma::Object *>::Back(v2);
      if (v3)
        MEMORY[0x1BCCA12BC](v3, 0x1000C40E841BE39);
      Vector<ma::Object *>::PopBack(v2);
      result = *v2;
    }
    while (*v2);
  }
  return result;
}

void ma::MovingObjectSegment::~MovingObjectSegment(const __CFArray **this)
{
  *this = (const __CFArray *)&off_1E6B14098;
  ma::MovingObjectSegment::ClearObjects((ma::MovingObjectSegment *)this);
  Vector<ma::Object *>::~Vector(this + 10);
}

{
  ma::MovingObjectSegment::~MovingObjectSegment(this);
  JUMPOUT(0x1BCCA12BCLL);
}

uint64_t ma::MovingObjectSegment::UpdateStats(ma::MovingObjectSegment *this, const ma::MotionResult *a2)
{
  ++*((_DWORD *)this + 22);
  return ma::MovingObjectSegment::AddObjects(this, a2);
}

uint64_t ma::MovingObjectSegment::AddObjects(ma::MovingObjectSegment *this, const ma::MotionResult *a2)
{
  CFIndex v4;
  CFArrayRef *v5;
  const std::nothrow_t *v6;
  const __CFArray *v7;
  int **ValueAtIndex;
  CFIndex v9;
  const void *v10;
  CGFloat v11;
  CGFloat v12;
  CGFloat v13;
  CGFloat v14;
  const void *v15;
  CGFloat v16;
  CGFloat v17;
  CGFloat v18;
  CGFloat v19;
  uint64_t v20;
  ma::Object *v21;
  ma::Object *v22;
  _OWORD **v23;
  _OWORD *v24;
  ma::Object *v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  uint64_t v30;
  uint64_t v31;
  ma::Object *v33;
  CFIndex idx;
  CGRect v35;
  CGRect v36;

  v4 = 0;
  v5 = (CFArrayRef *)((char *)this + 80);
  v6 = (const std::nothrow_t *)MEMORY[0x1E0DE4E10];
  while (1)
  {
    v7 = (const __CFArray *)*((_QWORD *)a2 + 23);
    if (v7)
      LODWORD(v7) = CFArrayGetCount(v7);
    if (v4 >= (int)v7)
      return 0;
    if (*(_BYTE *)(*(_QWORD *)CFArrayGetValueAtIndex(*((CFArrayRef *)a2 + 23), v4) + 72))
    {
      LODWORD(idx) = 0;
      ValueAtIndex = (int **)CFArrayGetValueAtIndex(*((CFArrayRef *)a2 + 23), v4);
      if (ma::MovingObjectSegment::ObjectExist(this, **ValueAtIndex, (int *)&idx))
      {
        v9 = (int)idx;
        v10 = CFArrayGetValueAtIndex(*v5, (int)idx);
        v11 = *(double *)(*(_QWORD *)v10 + 8);
        v12 = *(double *)(*(_QWORD *)v10 + 16);
        v13 = *(double *)(*(_QWORD *)v10 + 24);
        v14 = *(double *)(*(_QWORD *)v10 + 32);
        v15 = CFArrayGetValueAtIndex(*((CFArrayRef *)a2 + 23), v4);
        v16 = *(double *)(*(_QWORD *)v15 + 8);
        v17 = *(double *)(*(_QWORD *)v15 + 16);
        v18 = *(double *)(*(_QWORD *)v15 + 24);
        v19 = *(double *)(*(_QWORD *)v15 + 32);
        v20 = *(_QWORD *)CFArrayGetValueAtIndex(*v5, v9);
        v35.origin.x = v11;
        v35.origin.y = v12;
        v35.size.width = v13;
        v35.size.height = v14;
        v36.origin.x = v16;
        v36.origin.y = v17;
        v36.size.width = v18;
        v36.size.height = v19;
        *(CGRect *)(v20 + 8) = CGRectUnion(v35, v36);
        goto LABEL_10;
      }
      ma::MovingObjectSegment::ClearObjects(this);
      v33 = 0;
      v21 = (ma::Object *)operator new(0x60uLL, v6);
      if (!v21)
        return 4294967188;
      v22 = v21;
      ma::Object::Object(v21);
      v33 = v22;
      v23 = (_OWORD **)CFArrayGetValueAtIndex(*((CFArrayRef *)a2 + 23), v4);
      v24 = *v23;
      v25 = v33;
      v26 = (*v23)[1];
      *(_OWORD *)v33 = **v23;
      *((_OWORD *)v25 + 1) = v26;
      v28 = v24[3];
      v27 = v24[4];
      v29 = v24[2];
      *(_OWORD *)((char *)v25 + 77) = *(_OWORD *)((char *)v24 + 77);
      *((_OWORD *)v25 + 3) = v28;
      *((_OWORD *)v25 + 4) = v27;
      *((_OWORD *)v25 + 2) = v29;
      v30 = Vector<ma::Object *>::PushBack(v5, &v33);
      if ((_DWORD)v30)
        break;
    }
LABEL_10:
    ++v4;
  }
  v31 = v30;
  if (v33)
    MEMORY[0x1BCCA12BC](v33, 0x1000C40E841BE39);
  return v31;
}

void sub_1B6E34370(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1BCCA12A4](v1, MEMORY[0x1E0DE4E10]);
  _Unwind_Resume(a1);
}

uint64_t ma::MovingObjectSegment::ResetStats(ma::MovingObjectSegment *this, const ma::MotionResult *a2)
{
  ma::MovingObjectSegment::ClearObjects(this);
  *((_DWORD *)this + 22) = *((unsigned __int8 *)a2 + 80);
  return ma::MovingObjectSegment::AddObjects(this, a2);
}

BOOL ma::MovingObjectSegment::ObjectExist(ma::MovingObjectSegment *this, int a2, int *a3)
{
  CFIndex i;
  const __CFArray *v7;
  int v8;

  for (i = 0; ; ++i)
  {
    v7 = (const __CFArray *)*((_QWORD *)this + 10);
    v8 = v7 ? CFArrayGetCount(v7) : 0;
    if (i >= v8)
      break;
    if (**(_DWORD **)CFArrayGetValueAtIndex(*((CFArrayRef *)this + 10), i) == a2
      && (**(_DWORD **)CFArrayGetValueAtIndex(*((CFArrayRef *)this + 10), i) & 0x80000000) == 0)
    {
      *a3 = i;
      return i < v8;
    }
  }
  return i < v8;
}

BOOL ma::MovingObjectSegment::ExistObject(ma::MovingObjectSegment *this, const ma::MotionResult *a2)
{
  CFIndex v3;
  CFIndex v4;
  const __CFArray *v5;
  int Count;
  const void *ValueAtIndex;

  v3 = 0;
  do
  {
    v4 = v3;
    v5 = (const __CFArray *)*((_QWORD *)a2 + 23);
    if (v5)
      Count = CFArrayGetCount(v5);
    else
      Count = 0;
    if (v4 >= Count)
      break;
    ValueAtIndex = CFArrayGetValueAtIndex(*((CFArrayRef *)a2 + 23), v4);
    v3 = v4 + 1;
  }
  while (!*(_BYTE *)(*(_QWORD *)ValueAtIndex + 72));
  return v4 < Count;
}

void sub_1B6E345E8(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1B6E347F8(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;

  _Unwind_Resume(a1);
}

void sub_1B6E349FC(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_1B6E34C3C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1B6E34E3C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;

  _Unwind_Resume(a1);
}

void sub_1B6E350AC(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  _Unwind_Resume(a1);
}

void sub_1B6E352B0(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1B6E35494(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;

  _Unwind_Resume(a1);
}

void sub_1B6E35738(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{
  void *v10;
  void *v11;
  void *v12;

  _Unwind_Resume(a1);
}

void sub_1B6E35928(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1B6E35C4C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, id a20)
{
  void *v20;
  void *v21;
  void *v22;
  void *v23;
  void *v24;
  void *v25;
  void *v26;
  void *v27;

  v27 = v22;

  _Block_object_dispose(&a15, 8);
  _Unwind_Resume(a1);
}

uint64_t __Block_byref_object_copy__31(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void __Block_byref_object_dispose__31(uint64_t a1)
{

}

void sub_1B6E35E48(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  _Unwind_Resume(a1);
}

void sub_1B6E360B0(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1B6E361C4(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1B6E36360(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  void *v14;
  void *v15;

  _Unwind_Resume(a1);
}

void sub_1B6E36548(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  void *v14;
  void *v15;

  _Unwind_Resume(a1);
}

void sub_1B6E36F54(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, void *a14, void *a15, void *a16)
{
  void *v16;
  void *v17;

  _Unwind_Resume(a1);
}

void sub_1B6E37444(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1B6E377A8(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

uint64_t VCPProtoMovieFaceprintResultReadFrom(uint64_t a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  int v15;
  char v17;
  unsigned int v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  char v22;
  uint64_t v23;
  void *v24;
  uint64_t result;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) < *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
  {
    v7 = (int *)MEMORY[0x1E0D82BB8];
    do
    {
      if (*(_BYTE *)(a2 + *v5))
        break;
      v8 = 0;
      v9 = 0;
      v10 = 0;
      while (1)
      {
        v11 = *v3;
        v12 = *(_QWORD *)(a2 + v11);
        if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
          break;
        v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
        *(_QWORD *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0)
          goto LABEL_12;
        v8 += 7;
        v14 = v9++ >= 9;
        if (v14)
        {
          v10 = 0;
          v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
      v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(_BYTE *)(a2 + *v5))
        v10 = 0;
LABEL_14:
      if (v15 || (v10 & 7) == 4)
        break;
      if ((v10 >> 3) == 2)
      {
        PBReaderReadData();
        v23 = objc_claimAutoreleasedReturnValue();
        v24 = *(void **)(a1 + 16);
        *(_QWORD *)(a1 + 16) = v23;

      }
      else if ((v10 >> 3) == 1)
      {
        v17 = 0;
        v18 = 0;
        v19 = 0;
        while (1)
        {
          v20 = *v3;
          v21 = *(_QWORD *)(a2 + v20);
          if (v21 == -1 || v21 >= *(_QWORD *)(a2 + *v4))
            break;
          v22 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v21);
          *(_QWORD *)(a2 + v20) = v21 + 1;
          v19 |= (unint64_t)(v22 & 0x7F) << v17;
          if ((v22 & 0x80) == 0)
            goto LABEL_31;
          v17 += 7;
          v14 = v18++ >= 9;
          if (v14)
          {
            LODWORD(v19) = 0;
            goto LABEL_33;
          }
        }
        *(_BYTE *)(a2 + *v5) = 1;
LABEL_31:
        if (*(_BYTE *)(a2 + *v5))
          LODWORD(v19) = 0;
LABEL_33:
        *(_DWORD *)(a1 + 8) = v19;
      }
      else
      {
        result = PBReaderSkipValueWithTag();
        if (!(_DWORD)result)
          return result;
      }
    }
    while (*(_QWORD *)(a2 + *v3) < *(_QWORD *)(a2 + *v4));
  }
  return *(_BYTE *)(a2 + *v5) == 0;
}

void sub_1B6E3801C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;

  v5 = v4;

  _Unwind_Resume(a1);
}

void sub_1B6E38120(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1B6E3824C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;

  v5 = v4;

  _Unwind_Resume(a1);
}

void sub_1B6E38350(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1B6E387F4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, void *a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18)
{
  void *v18;

  _Unwind_Resume(a1);
}

void sub_1B6E38980(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_1B6E38D60(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  _Unwind_Resume(a1);
}

void sub_1B6E38E20(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

float palmScale(VCPHandObservation *a1, int a2)
{
  VCPHandObservation *v3;
  VCPHandObservation *v4;
  void *v5;
  void *v6;
  VCPKeypoint *v7;
  double v8;
  VCPKeypoint *v9;
  double v10;
  VCPKeypoint *v11;
  double v12;
  VCPKeypoint *v13;
  double v14;
  VCPKeypoint *v15;
  double v16;
  uint64_t v17;
  float32x2_t v18;
  float32x2_t v24;
  int32x2_t v25;
  float32x2_t v26;
  int32x2_t v27;
  float32x2_t v28;
  float v29;
  _QWORD v31[5];

  v31[4] = *MEMORY[0x1E0C80C00];
  v3 = a1;
  v4 = v3;
  if (v3)
  {
    -[VCPHandObservation keypoints](v3, "keypoints");
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    v6 = v5;
    if (v5)
    {
      objc_msgSend(v5, "objectAtIndexedSubscript:", 0);
      v7 = (VCPKeypoint *)objc_claimAutoreleasedReturnValue();
      v8 = keyPointPosition(v7, a2);

      objc_msgSend(v6, "objectAtIndexedSubscript:", 5);
      v9 = (VCPKeypoint *)objc_claimAutoreleasedReturnValue();
      v10 = keyPointPosition(v9, a2);

      objc_msgSend(v6, "objectAtIndexedSubscript:", 9);
      v11 = (VCPKeypoint *)objc_claimAutoreleasedReturnValue();
      v12 = keyPointPosition(v11, a2);

      objc_msgSend(v6, "objectAtIndexedSubscript:", 13);
      v13 = (VCPKeypoint *)objc_claimAutoreleasedReturnValue();
      v14 = keyPointPosition(v13, a2);

      objc_msgSend(v6, "objectAtIndexedSubscript:", 17);
      v15 = (VCPKeypoint *)objc_claimAutoreleasedReturnValue();
      v16 = keyPointPosition(v15, a2);

      v17 = 0;
      *(double *)v31 = v10;
      *(double *)&v31[1] = v12;
      v18 = 0;
      __asm { FMOV            V1.2S, #0.25 }
      *(double *)&v31[2] = v14;
      *(double *)&v31[3] = v16;
      do
        v18 = vadd_f32(v18, vmul_f32((float32x2_t)v31[v17++], _D1));
      while (v17 != 4);
      v24 = vsub_f32(v18, *(float32x2_t *)&v8);
      v25 = (int32x2_t)vmul_f32(v24, v24);
      v26 = vsub_f32(*(float32x2_t *)&v16, *(float32x2_t *)&v10);
      v27 = (int32x2_t)vmul_f32(v26, v26);
      v28 = vsqrt_f32(vadd_f32((float32x2_t)vzip1_s32(v25, v27), (float32x2_t)vzip2_s32(v25, v27)));
      if (v28.f32[0] >= v28.f32[1])
        v29 = v28.f32[0];
      else
        v29 = v28.f32[1];
    }
    else
    {
      v29 = -1.0;
    }

  }
  else
  {
    v29 = -1.0;
  }

  return v29;
}

void sub_1B6E38FEC(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_1B6E3902C()
{
  JUMPOUT(0x1B6E39020);
}

void sub_1B6E3925C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

double palmCenter(VCPHandObservation *a1, int a2)
{
  void *v3;
  void *v4;
  VCPKeypoint *v5;
  double v6;
  VCPKeypoint *v7;
  double v8;
  VCPKeypoint *v9;
  double v10;
  VCPKeypoint *v11;
  double v12;
  VCPKeypoint *v13;
  double v14;
  uint64_t v15;
  float32x2_t v16;
  _QWORD v23[6];

  v23[5] = *MEMORY[0x1E0C80C00];
  -[VCPHandObservation keypoints](a1, "keypoints");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  v4 = v3;
  if (v3)
  {
    objc_msgSend(v3, "objectAtIndexedSubscript:", 0);
    v5 = (VCPKeypoint *)objc_claimAutoreleasedReturnValue();
    v6 = keyPointPosition(v5, a2);

    objc_msgSend(v4, "objectAtIndexedSubscript:", 5);
    v7 = (VCPKeypoint *)objc_claimAutoreleasedReturnValue();
    v8 = keyPointPosition(v7, a2);

    objc_msgSend(v4, "objectAtIndexedSubscript:", 9);
    v9 = (VCPKeypoint *)objc_claimAutoreleasedReturnValue();
    v10 = keyPointPosition(v9, a2);

    objc_msgSend(v4, "objectAtIndexedSubscript:", 13);
    v11 = (VCPKeypoint *)objc_claimAutoreleasedReturnValue();
    v12 = keyPointPosition(v11, a2);

    objc_msgSend(v4, "objectAtIndexedSubscript:", 17);
    v13 = (VCPKeypoint *)objc_claimAutoreleasedReturnValue();
    v14 = keyPointPosition(v13, a2);

    v15 = 0;
    *(double *)v23 = v8;
    *(double *)&v23[1] = v10;
    *(double *)&v23[2] = v12;
    *(double *)&v23[3] = v14;
    *(double *)&v16 = 0.0;
    __asm { FMOV            V0.2S, #5.0 }
    *(double *)&v23[4] = v6;
    do
      v16 = vadd_f32(v16, vdiv_f32((float32x2_t)v23[v15++], _D0));
    while (v15 != 5);
  }
  else
  {
    *(double *)&v16 = 0.0;
  }

  return *(double *)&v16;
}

void sub_1B6E393FC(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1B6E39438()
{
  JUMPOUT(0x1B6E39430);
}

void sub_1B6E3961C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1B6E39B28(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  _Unwind_Resume(a1);
}

void sub_1B6E39DBC(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1B6E3A100(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1B6E3A394(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1B6E3A874(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1B6E3AAB0(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1B6E3AC74(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1B6E3AF4C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_1B6E3BA38(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9, void *a10)
{
  void *v10;
  void *v11;
  void *v12;
  void *v13;

  _Unwind_Resume(a1);
}

void sub_1B6E3BF7C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  void *v16;
  void *v17;

  _Unwind_Resume(a1);
}

void sub_1B6E3C214(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1B6E3C4B8(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1B6E3CD78(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9)
{
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  void *v16;

  v16 = v11;

  _Unwind_Resume(a1);
}

void sub_1B6E3CFDC(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1B6E3D880(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1B6E3D9D4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_1B6E3DA7C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1B6E3DB18(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1B6E3DDD4(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1B6E3DE60(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1B6E3E284(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1B6E3E4A0(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1B6E3E58C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_1B6E3E988(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1B6E3EE70(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1B6E3F25C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_1B6E3F470(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  v4 = v3;

  _Unwind_Resume(a1);
}

void sub_1B6E3F66C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1B6E3F7F0(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_1B6E3F85C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1B6E3FBF4(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1B6E3FE50(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1B6E3FF3C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  _Unwind_Resume(a1);
}

void sub_1B6E3FFC8(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1B6E4006C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  v4 = v3;

  _Unwind_Resume(a1);
}

void sub_1B6E402E8(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1B6E403E4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_1B6E40574(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  _Unwind_Resume(a1);
}

void sub_1B6E40BA8(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1B6E412C4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, uint64_t a15, uint64_t a16, void *a17, void *a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,_Unwind_Exception *exception_object)
{

  _Unwind_Resume(a1);
}

void sub_1B6E418B4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  void *v11;
  void *v12;
  void *v13;
  uint64_t v14;
  va_list va;

  va_start(va, a11);

  _Block_object_dispose(va, 8);
  CF<opaqueCMSampleBuffer *>::~CF((const void **)(v14 - 88));
  _Unwind_Resume(a1);
}

void sub_1B6E42170(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,void *a56)
{

  _Unwind_Resume(a1);
}

uint64_t __Block_byref_object_copy__32(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void __Block_byref_object_dispose__32(uint64_t a1)
{

}

void sub_1B6E42404(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;
  void *v11;

  _Unwind_Resume(a1);
}

void sub_1B6E42558(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1B6E4269C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

CFTypeRef __copy_helper_block_ea8_64c22_ZTS2CFIP10__CVBufferE(uint64_t a1, uint64_t a2)
{
  CFTypeRef result;

  result = *(CFTypeRef *)(a2 + 64);
  *(_QWORD *)(a1 + 64) = result;
  if (result)
    return CFRetain(result);
  return result;
}

const void **__destroy_helper_block_ea8_64c22_ZTS2CFIP10__CVBufferE(uint64_t a1)
{
  return CF<opaqueCMSampleBuffer *>::~CF((const void **)(a1 + 64));
}

void sub_1B6E429C0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_list va;

  va_start(va, a11);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t __Block_byref_object_copy__33(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void __Block_byref_object_dispose__33(uint64_t a1)
{

}

ma::Segment *ma::InterestingnessSegment::InterestingnessSegment(ma::InterestingnessSegment *this)
{
  ma::Segment *result;

  result = ma::Segment::Segment(this);
  *(_QWORD *)result = &unk_1E6B14128;
  *((_BYTE *)result + 72) = 0;
  *(_QWORD *)((char *)result + 76) = 0;
  return result;
}

double ma::InterestingnessSegment::Reset(ma::Segment *this)
{
  *((_BYTE *)this + 72) = 0;
  *(_QWORD *)((char *)this + 76) = 0;
  return ma::Segment::Reset(this);
}

BOOL ma::InterestingnessSegment::IsShort(ma::InterestingnessSegment *this)
{
  CMTime v2;

  v2 = *(CMTime *)((_BYTE *)this + 2);
  return CMTimeGetSeconds(&v2) <= 1.5;
}

uint64_t ma::InterestingnessSegment::Update(uint64_t this, const Frame *a2)
{
  int v2;
  int v3;
  float v4;
  float v5;
  BOOL v6;
  float v7;

  v2 = *(_DWORD *)(this + 20) + 1;
  *(_DWORD *)(this + 20) = v2;
  v3 = *(_DWORD *)(this + 80);
  if (*(float *)&a2->flow_ < 0.0)
    ++v3;
  *(_DWORD *)(this + 80) = v3;
  v4 = 1.0;
  v5 = 1.0 - (float)((float)v3 / (float)v2);
  if (v5 < 1.0)
    v4 = 1.0 - (float)((float)v3 / (float)v2);
  v6 = v5 > 0.0;
  v7 = 0.0;
  if (v6)
    v7 = v4;
  *(float *)(this + 76) = v7;
  return this;
}

void ma::InterestingnessSegment::DetermineStatus(ma::InterestingnessSegment *this, float a2)
{
  float v4;

  v4 = powf(*((float *)this + 19), 3.0);
  *((float *)this + 19) = v4;
  *((_BYTE *)this + 72) = v4 >= a2;
}

void ma::InterestingnessSegment::Merge(ma::InterestingnessSegment *this, const ma::InterestingnessSegment *a2)
{
  int v4;
  float v5;
  float v6;
  BOOL v7;
  float v8;

  ma::Segment::Merge(this, a2);
  v4 = *((_DWORD *)this + 20) + *((_DWORD *)a2 + 20);
  *((_DWORD *)this + 20) = v4;
  v5 = 1.0;
  v6 = 1.0 - (float)((float)v4 / (float)*((int *)this + 5));
  if (v6 < 1.0)
    v5 = 1.0 - (float)((float)v4 / (float)*((int *)this + 5));
  v7 = v6 > 0.0;
  v8 = 0.0;
  if (v7)
    v8 = v5;
  *((float *)this + 19) = v8;
}

void ma::InterestingnessSegment::~InterestingnessSegment(ma::InterestingnessSegment *this)
{
  JUMPOUT(0x1BCCA12BCLL);
}

uint64_t VCPProtoMovieCheeringResultReadFrom(uint64_t a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  char v14;
  uint64_t v16;
  int v17;
  VCPProtoTimeRange *v19;
  uint64_t v20;
  unint64_t v21;
  int v22;
  uint64_t result;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) < *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
  {
    v7 = (int *)MEMORY[0x1E0D82BB8];
    do
    {
      if (*(_BYTE *)(a2 + *v5))
        break;
      v8 = 0;
      v9 = 0;
      v10 = 0;
      while (1)
      {
        v11 = *v3;
        v12 = *(_QWORD *)(a2 + v11);
        v13 = v12 + 1;
        if (v12 == -1 || v13 > *(_QWORD *)(a2 + *v4))
          break;
        v14 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
        *(_QWORD *)(a2 + v11) = v13;
        v10 |= (unint64_t)(v14 & 0x7F) << v8;
        if ((v14 & 0x80) == 0)
          goto LABEL_12;
        v8 += 7;
        if (v9++ >= 9)
        {
          v10 = 0;
          v16 = *v5;
          v17 = *(unsigned __int8 *)(a2 + v16);
          goto LABEL_14;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
      v16 = *v5;
      v17 = *(unsigned __int8 *)(a2 + v16);
      if (*(_BYTE *)(a2 + v16))
        v10 = 0;
LABEL_14:
      if (v17 || (v10 & 7) == 4)
        break;
      if ((v10 >> 3) == 2)
      {
        v20 = *v3;
        v21 = *(_QWORD *)(a2 + v20);
        if (v21 <= 0xFFFFFFFFFFFFFFFBLL && v21 + 4 <= *(_QWORD *)(a2 + *v4))
        {
          v22 = *(_DWORD *)(*(_QWORD *)(a2 + *v7) + v21);
          *(_QWORD *)(a2 + v20) = v21 + 4;
        }
        else
        {
          *(_BYTE *)(a2 + v16) = 1;
          v22 = 0;
        }
        *(_DWORD *)(a1 + 8) = v22;
      }
      else if ((v10 >> 3) == 1)
      {
        v19 = objc_alloc_init(VCPProtoTimeRange);
        objc_storeStrong((id *)(a1 + 16), v19);
        if (!PBReaderPlaceMark() || !VCPProtoTimeRangeReadFrom((uint64_t)v19, a2))
        {

          return 0;
        }
        PBReaderRecallMark();

      }
      else
      {
        result = PBReaderSkipValueWithTag();
        if (!(_DWORD)result)
          return result;
      }
    }
    while (*(_QWORD *)(a2 + *v3) < *(_QWORD *)(a2 + *v4));
  }
  return *(_BYTE *)(a2 + *v5) == 0;
}

uint64_t VCPProtoLivePhotoSettlingEffectGatingResultReadFrom(uint64_t a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  char v14;
  uint64_t v16;
  int v17;
  VCPProtoTimeRange *v19;
  uint64_t v20;
  unint64_t v21;
  int v22;
  uint64_t result;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) < *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
  {
    v7 = (int *)MEMORY[0x1E0D82BB8];
    do
    {
      if (*(_BYTE *)(a2 + *v5))
        break;
      v8 = 0;
      v9 = 0;
      v10 = 0;
      while (1)
      {
        v11 = *v3;
        v12 = *(_QWORD *)(a2 + v11);
        v13 = v12 + 1;
        if (v12 == -1 || v13 > *(_QWORD *)(a2 + *v4))
          break;
        v14 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
        *(_QWORD *)(a2 + v11) = v13;
        v10 |= (unint64_t)(v14 & 0x7F) << v8;
        if ((v14 & 0x80) == 0)
          goto LABEL_12;
        v8 += 7;
        if (v9++ >= 9)
        {
          v10 = 0;
          v16 = *v5;
          v17 = *(unsigned __int8 *)(a2 + v16);
          goto LABEL_14;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
      v16 = *v5;
      v17 = *(unsigned __int8 *)(a2 + v16);
      if (*(_BYTE *)(a2 + v16))
        v10 = 0;
LABEL_14:
      if (v17 || (v10 & 7) == 4)
        break;
      if ((v10 >> 3) == 2)
      {
        v20 = *v3;
        v21 = *(_QWORD *)(a2 + v20);
        if (v21 <= 0xFFFFFFFFFFFFFFFBLL && v21 + 4 <= *(_QWORD *)(a2 + *v4))
        {
          v22 = *(_DWORD *)(*(_QWORD *)(a2 + *v7) + v21);
          *(_QWORD *)(a2 + v20) = v21 + 4;
        }
        else
        {
          *(_BYTE *)(a2 + v16) = 1;
          v22 = 0;
        }
        *(_DWORD *)(a1 + 8) = v22;
      }
      else if ((v10 >> 3) == 1)
      {
        v19 = objc_alloc_init(VCPProtoTimeRange);
        objc_storeStrong((id *)(a1 + 16), v19);
        if (!PBReaderPlaceMark() || !VCPProtoTimeRangeReadFrom((uint64_t)v19, a2))
        {

          return 0;
        }
        PBReaderRecallMark();

      }
      else
      {
        result = PBReaderSkipValueWithTag();
        if (!(_DWORD)result)
          return result;
      }
    }
    while (*(_QWORD *)(a2 + *v3) < *(_QWORD *)(a2 + *v4));
  }
  return *(_BYTE *)(a2 + *v5) == 0;
}

uint64_t VCPProtoMovieMusicResultReadFrom(uint64_t a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  char v14;
  uint64_t v16;
  int v17;
  VCPProtoTimeRange *v19;
  uint64_t v20;
  unint64_t v21;
  int v22;
  uint64_t result;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) < *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
  {
    v7 = (int *)MEMORY[0x1E0D82BB8];
    do
    {
      if (*(_BYTE *)(a2 + *v5))
        break;
      v8 = 0;
      v9 = 0;
      v10 = 0;
      while (1)
      {
        v11 = *v3;
        v12 = *(_QWORD *)(a2 + v11);
        v13 = v12 + 1;
        if (v12 == -1 || v13 > *(_QWORD *)(a2 + *v4))
          break;
        v14 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
        *(_QWORD *)(a2 + v11) = v13;
        v10 |= (unint64_t)(v14 & 0x7F) << v8;
        if ((v14 & 0x80) == 0)
          goto LABEL_12;
        v8 += 7;
        if (v9++ >= 9)
        {
          v10 = 0;
          v16 = *v5;
          v17 = *(unsigned __int8 *)(a2 + v16);
          goto LABEL_14;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
      v16 = *v5;
      v17 = *(unsigned __int8 *)(a2 + v16);
      if (*(_BYTE *)(a2 + v16))
        v10 = 0;
LABEL_14:
      if (v17 || (v10 & 7) == 4)
        break;
      if ((v10 >> 3) == 2)
      {
        v20 = *v3;
        v21 = *(_QWORD *)(a2 + v20);
        if (v21 <= 0xFFFFFFFFFFFFFFFBLL && v21 + 4 <= *(_QWORD *)(a2 + *v4))
        {
          v22 = *(_DWORD *)(*(_QWORD *)(a2 + *v7) + v21);
          *(_QWORD *)(a2 + v20) = v21 + 4;
        }
        else
        {
          *(_BYTE *)(a2 + v16) = 1;
          v22 = 0;
        }
        *(_DWORD *)(a1 + 8) = v22;
      }
      else if ((v10 >> 3) == 1)
      {
        v19 = objc_alloc_init(VCPProtoTimeRange);
        objc_storeStrong((id *)(a1 + 16), v19);
        if (!PBReaderPlaceMark() || !VCPProtoTimeRangeReadFrom((uint64_t)v19, a2))
        {

          return 0;
        }
        PBReaderRecallMark();

      }
      else
      {
        result = PBReaderSkipValueWithTag();
        if (!(_DWORD)result)
          return result;
      }
    }
    while (*(_QWORD *)(a2 + *v3) < *(_QWORD *)(a2 + *v4));
  }
  return *(_BYTE *)(a2 + *v5) == 0;
}

void sub_1B6E44444(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1B6E448AC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  CVPixelBufferLock::~CVPixelBufferLock((CVPixelBufferLock *)va);
  _Unwind_Resume(a1);
}

void sub_1B6E44DBC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, void *a11, void *a12, void *a13, void *a14, void *a15, void *a16)
{
  void *v16;
  void *v17;
  void *v18;
  void *v19;
  void *v20;
  void *v21;

  _Unwind_Resume(a1);
}

void sub_1B6E44F80(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1B6E45124(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1B6E456E0(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1B6E459FC(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1B6E45C4C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;

  v5 = v4;

  _Unwind_Resume(a1);
}

void sub_1B6E45D94(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1B6E45F5C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_1B6E460A4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1B6E461DC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, objc_super a9)
{
  void *v9;
  void *v10;

  v10 = v9;
  a9.receiver = v10;
  a9.super_class = (Class)VCPCNNConvBlockGPU;
  -[_Unwind_Exception dealloc](&a9, sel_dealloc);
  _Unwind_Resume(a1);
}

void sub_1B6E46374(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  _Unwind_Resume(a1);
}

void sub_1B6E4694C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1B6E46EB0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_1B6E4700C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  v4 = v3;

  _Unwind_Resume(a1);
}

void sub_1B6E47C00(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, void *a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,const void *a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,id a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,char a38)
{
  void *v38;
  void *v39;
  void *v40;
  void *v41;
  void *v42;
  void *v43;

  CF<opaqueCMSampleBuffer *>::~CF(&a23);
  _Block_object_dispose(&a38, 8);

  _Unwind_Resume(a1);
}

__n128 __Block_byref_object_copy__34(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = a2[3];
  a1[4].n128_u64[0] = a2[4].n128_u64[0];
  a1[3] = result;
  return result;
}

void sub_1B6E47EF8(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1B6E480BC(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

uint64_t VCPProtoMovieStabilizationResultReadFrom(uint64_t a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  char v14;
  BOOL v15;
  uint64_t v16;
  int v17;
  unint64_t v19;
  char v20;
  unsigned int v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  char v26;
  uint64_t v27;
  unint64_t v28;
  int v29;
  uint64_t v30;
  void *v31;
  uint64_t result;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) < *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
  {
    v7 = (int *)MEMORY[0x1E0D82BB8];
    do
    {
      if (*(_BYTE *)(a2 + *v5))
        break;
      v8 = 0;
      v9 = 0;
      v10 = 0;
      while (1)
      {
        v11 = *v3;
        v12 = *(_QWORD *)(a2 + v11);
        v13 = v12 + 1;
        if (v12 == -1 || v13 > *(_QWORD *)(a2 + *v4))
          break;
        v14 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
        *(_QWORD *)(a2 + v11) = v13;
        v10 |= (unint64_t)(v14 & 0x7F) << v8;
        if ((v14 & 0x80) == 0)
          goto LABEL_12;
        v8 += 7;
        v15 = v9++ >= 9;
        if (v15)
        {
          v10 = 0;
          v16 = *v5;
          v17 = *(unsigned __int8 *)(a2 + v16);
          goto LABEL_14;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
      v16 = *v5;
      v17 = *(unsigned __int8 *)(a2 + v16);
      if (*(_BYTE *)(a2 + v16))
        v10 = 0;
LABEL_14:
      if (v17 || (v10 & 7) == 4)
        break;
      v19 = v10 >> 3;
      if ((v10 >> 3) == 1)
      {
        v27 = *v3;
        v28 = *(_QWORD *)(a2 + v27);
        if (v28 <= 0xFFFFFFFFFFFFFFFBLL && v28 + 4 <= *(_QWORD *)(a2 + *v4))
        {
          v29 = *(_DWORD *)(*(_QWORD *)(a2 + *v7) + v28);
          *(_QWORD *)(a2 + v27) = v28 + 4;
        }
        else
        {
          *(_BYTE *)(a2 + v16) = 1;
          v29 = 0;
        }
        *(_DWORD *)(a1 + 8) = v29;
      }
      else if ((_DWORD)v19 == 3)
      {
        PBReaderReadData();
        v30 = objc_claimAutoreleasedReturnValue();
        v31 = *(void **)(a1 + 16);
        *(_QWORD *)(a1 + 16) = v30;

      }
      else if ((_DWORD)v19 == 2)
      {
        v20 = 0;
        v21 = 0;
        v22 = 0;
        while (1)
        {
          v23 = *v3;
          v24 = *(_QWORD *)(a2 + v23);
          v25 = v24 + 1;
          if (v24 == -1 || v25 > *(_QWORD *)(a2 + *v4))
            break;
          v26 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v24);
          *(_QWORD *)(a2 + v23) = v25;
          v22 |= (unint64_t)(v26 & 0x7F) << v20;
          if ((v26 & 0x80) == 0)
            goto LABEL_35;
          v20 += 7;
          v15 = v21++ >= 9;
          if (v15)
          {
            v22 = 0;
            goto LABEL_37;
          }
        }
        *(_BYTE *)(a2 + *v5) = 1;
LABEL_35:
        if (*(_BYTE *)(a2 + *v5))
          v22 = 0;
LABEL_37:
        *(_BYTE *)(a1 + 24) = v22 != 0;
      }
      else
      {
        result = PBReaderSkipValueWithTag();
        if (!(_DWORD)result)
          return result;
      }
    }
    while (*(_QWORD *)(a2 + *v3) < *(_QWORD *)(a2 + *v4));
  }
  return *(_BYTE *)(a2 + *v5) == 0;
}

void VCPProtoKeypoint::VCPProtoKeypoint(VCPProtoKeypoint *this)
{
  this->super.super.isa = (Class)&off_1E6B13D08;
}

void VCPProtoKeypoint::~VCPProtoKeypoint(VCPProtoKeypoint *this)
{
  PB::Base::~Base((PB::Base *)this);
  JUMPOUT(0x1BCCA12BCLL);
}

uint64_t VCPProtoKeypoint::formatText(VCPProtoKeypoint *this, PB::TextFormatter *a2, const char *a3)
{
  PB::TextFormatter::beginObject(a2, a3);
  PB::TextFormatter::format(a2, "confidence", this->_confidence);
  PB::TextFormatter::format(a2, "x", this->_x);
  PB::TextFormatter::format(a2, "y", this->_y);
  return PB::TextFormatter::endObject(a2);
}

uint64_t VCPProtoKeypoint::readFrom(VCPProtoKeypoint *this, PB::Reader *a2)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  char v15;
  unsigned int v16;
  unint64_t v17;
  unint64_t v18;
  char v19;
  unint64_t v21;
  uint64_t result;

  v2 = *((_QWORD *)a2 + 1);
  v3 = *((_QWORD *)a2 + 2);
  v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 < v3 && v4 == 0)
  {
    do
    {
      v8 = *(_QWORD *)a2;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
      {
        v15 = 0;
        v16 = 0;
        v11 = 0;
        if (v2 <= v3)
          v17 = v3;
        else
          v17 = v2;
        while (v17 != v2)
        {
          v18 = v2++;
          v19 = *(_BYTE *)(v8 + v18);
          *((_QWORD *)a2 + 1) = v2;
          v11 |= (unint64_t)(v19 & 0x7F) << v15;
          if ((v19 & 0x80) == 0)
            goto LABEL_22;
          v15 += 7;
          if (v16++ >= 9)
          {
            v11 = 0;
LABEL_22:
            v2 = v18 + 1;
            goto LABEL_23;
          }
        }
        v4 = 1;
        *((_BYTE *)a2 + 24) = 1;
        return v4 == 0;
      }
      v9 = 0;
      v10 = 0;
      v11 = 0;
      while (1)
      {
        v12 = v2 + 1;
        *((_QWORD *)a2 + 1) = v2 + 1;
        v13 = *(_BYTE *)(v8 + v2);
        v11 |= (unint64_t)(v13 & 0x7F) << v9;
        if ((v13 & 0x80) == 0)
          break;
        v9 += 7;
        v2 = v12;
        if (v10++ > 8)
        {
          v11 = 0;
          break;
        }
      }
      v2 = v12;
LABEL_23:
      if ((v11 & 7) == 4)
      {
        v4 = 0;
        return v4 == 0;
      }
      v21 = v11 >> 3;
      if ((v11 >> 3) == 3)
      {
        if (v2 <= 0xFFFFFFFFFFFFFFFBLL && v2 + 4 <= v3)
        {
          this->_confidence = *(float *)(v8 + v2);
          goto LABEL_36;
        }
      }
      else if ((_DWORD)v21 == 2)
      {
        if (v2 <= 0xFFFFFFFFFFFFFFFBLL && v2 + 4 <= v3)
        {
          this->_y = *(float *)(v8 + v2);
          goto LABEL_36;
        }
      }
      else
      {
        if ((_DWORD)v21 != 1)
        {
          result = PB::Reader::skip(a2);
          if (!(_DWORD)result)
            return result;
          v2 = *((_QWORD *)a2 + 1);
          goto LABEL_40;
        }
        if (v2 <= 0xFFFFFFFFFFFFFFFBLL && v2 + 4 <= v3)
        {
          this->_x = *(float *)(v8 + v2);
LABEL_36:
          v2 = *((_QWORD *)a2 + 1) + 4;
          *((_QWORD *)a2 + 1) = v2;
          goto LABEL_40;
        }
      }
      *((_BYTE *)a2 + 24) = 1;
LABEL_40:
      v3 = *((_QWORD *)a2 + 2);
      v4 = *((unsigned __int8 *)a2 + 24);
    }
    while (v2 < v3 && !*((_BYTE *)a2 + 24));
  }
  return v4 == 0;
}

uint64_t VCPProtoKeypoint::writeTo(VCPProtoKeypoint *this, PB::Writer *a2)
{
  PB::Writer::write(a2, this->_x);
  PB::Writer::write(a2, this->_y);
  return PB::Writer::write(a2, this->_confidence);
}

uint64_t VCPProtoMovieHighlightResultReadFrom(uint64_t a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  char v14;
  uint64_t v16;
  int v17;
  VCPProtoTimeRange *v19;
  uint64_t result;
  uint64_t v21;
  unint64_t v22;
  int v23;
  uint64_t v24;
  void *v25;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) >= *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
    return *(_BYTE *)(a2 + *v5) == 0;
  v7 = (int *)MEMORY[0x1E0D82BB8];
  while (2)
  {
    if (*(_BYTE *)(a2 + *v5))
      return *(_BYTE *)(a2 + *v5) == 0;
    v8 = 0;
    v9 = 0;
    v10 = 0;
    while (1)
    {
      v11 = *v3;
      v12 = *(_QWORD *)(a2 + v11);
      v13 = v12 + 1;
      if (v12 == -1 || v13 > *(_QWORD *)(a2 + *v4))
        break;
      v14 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
      *(_QWORD *)(a2 + v11) = v13;
      v10 |= (unint64_t)(v14 & 0x7F) << v8;
      if ((v14 & 0x80) == 0)
        goto LABEL_12;
      v8 += 7;
      if (v9++ >= 9)
      {
        v10 = 0;
        v16 = *v5;
        v17 = *(unsigned __int8 *)(a2 + v16);
        goto LABEL_14;
      }
    }
    *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
    v16 = *v5;
    v17 = *(unsigned __int8 *)(a2 + v16);
    if (*(_BYTE *)(a2 + v16))
      v10 = 0;
LABEL_14:
    if (v17 || (v10 & 7) == 4)
      return *(_BYTE *)(a2 + *v5) == 0;
    switch((v10 >> 3))
    {
      case 1u:
        v19 = objc_alloc_init(VCPProtoTimeRange);
        objc_storeStrong((id *)(a1 + 40), v19);
        if (PBReaderPlaceMark() && VCPProtoTimeRangeReadFrom((uint64_t)v19, a2))
          goto LABEL_32;
        goto LABEL_38;
      case 2u:
        v21 = *v3;
        v22 = *(_QWORD *)(a2 + v21);
        if (v22 <= 0xFFFFFFFFFFFFFFFBLL && v22 + 4 <= *(_QWORD *)(a2 + *v4))
        {
          v23 = *(_DWORD *)(*(_QWORD *)(a2 + *v7) + v22);
          *(_QWORD *)(a2 + v21) = v22 + 4;
        }
        else
        {
          *(_BYTE *)(a2 + v16) = 1;
          v23 = 0;
        }
        *(_DWORD *)(a1 + 16) = v23;
        goto LABEL_36;
      case 3u:
        v19 = objc_alloc_init(VCPProtoVideoKeyFrame);
        objc_storeStrong((id *)(a1 + 24), v19);
        if (!PBReaderPlaceMark() || (VCPProtoVideoKeyFrameReadFrom((uint64_t)v19, a2) & 1) == 0)
          goto LABEL_38;
        goto LABEL_32;
      case 4u:
        v19 = objc_alloc_init(VCPProtoBounds);
        objc_storeStrong((id *)(a1 + 32), v19);
        if (PBReaderPlaceMark() && VCPProtoBoundsReadFrom((uint64_t)v19, a2))
        {
LABEL_32:
          PBReaderRecallMark();

LABEL_36:
          if (*(_QWORD *)(a2 + *v3) >= *(_QWORD *)(a2 + *v4))
            return *(_BYTE *)(a2 + *v5) == 0;
          continue;
        }
LABEL_38:

        return 0;
      case 5u:
        PBReaderReadData();
        v24 = objc_claimAutoreleasedReturnValue();
        v25 = *(void **)(a1 + 8);
        *(_QWORD *)(a1 + 8) = v24;

        goto LABEL_36;
      default:
        result = PBReaderSkipValueWithTag();
        if (!(_DWORD)result)
          return result;
        goto LABEL_36;
    }
  }
}

void sub_1B6E49950(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1B6E49C38(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1B6E49D6C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;

  v6 = v5;

  _Unwind_Resume(a1);
}

void sub_1B6E49ED8(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  _Unwind_Resume(a1);
}

void sub_1B6E4A020(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1B6E4A124(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, objc_super a9)
{
  a9.super_class = (Class)VCPHomeKitMotionAnalyzer;
  -[_Unwind_Exception dealloc](&a9, sel_dealloc);
  _Unwind_Resume(a1);
}

void sub_1B6E4A924(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13)
{
  CVPixelBufferLock::~CVPixelBufferLock((CVPixelBufferLock *)&a13);
  CVPixelBufferLock::~CVPixelBufferLock((CVPixelBufferLock *)&a9);
  _Unwind_Resume(a1);
}

void sub_1B6E4AD84(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15)
{
  void *v15;

  if (__p)
    operator delete(__p);
  _Unwind_Resume(a1);
}

void sub_1B6E4B160(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;

  v7 = v6;

  _Unwind_Resume(a1);
}

void sub_1B6E4B33C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1B6E4B404(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1B6E4B558(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_1B6E4B6E8(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  _Unwind_Resume(a1);
}

void sub_1B6E4B888(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_1B6E4CDCC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11, void *a12, uint64_t a13, void *a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *a19, void *a20,void *a21,void *a22,uint64_t a23,void *a24,void *a25,void *a26,void *a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,void *a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,void *a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,void *a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  void *a64;
  void *a72;
  void *v72;
  void *v73;
  void *v74;
  void *v75;

  CF<opaqueCMSampleBuffer *>::~CF((const void **)&STACK[0x210]);
  _Unwind_Resume(a1);
}

BOOL VCPProtoMovieSceneprintResultReadFrom(uint64_t a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  int v15;
  VCPProtoTime *v17;
  uint64_t v18;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) < *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
  {
    v7 = (int *)MEMORY[0x1E0D82BB8];
    while (1)
    {
      if (*(_BYTE *)(a2 + *v5))
        return *(_BYTE *)(a2 + *v5) == 0;
      v8 = 0;
      v9 = 0;
      v10 = 0;
      while (1)
      {
        v11 = *v3;
        v12 = *(_QWORD *)(a2 + v11);
        if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
          break;
        v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
        *(_QWORD *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0)
          goto LABEL_12;
        v8 += 7;
        if (v9++ >= 9)
        {
          v10 = 0;
          v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
      v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(_BYTE *)(a2 + *v5))
        v10 = 0;
LABEL_14:
      if (v15 || (v10 & 7) == 4)
        return *(_BYTE *)(a2 + *v5) == 0;
      if ((v10 >> 3) == 2)
        break;
      if ((v10 >> 3) == 1)
      {
        v17 = objc_alloc_init(VCPProtoTime);
        objc_storeStrong((id *)(a1 + 16), v17);
        if (!PBReaderPlaceMark() || (VCPProtoTimeReadFrom((uint64_t)v17, a2) & 1) == 0)
        {

          return 0;
        }
        PBReaderRecallMark();
        goto LABEL_24;
      }
      if ((PBReaderSkipValueWithTag() & 1) == 0)
        return 0;
LABEL_26:
      if (*(_QWORD *)(a2 + *v3) >= *(_QWORD *)(a2 + *v4))
        return *(_BYTE *)(a2 + *v5) == 0;
    }
    PBReaderReadData();
    v18 = objc_claimAutoreleasedReturnValue();
    v17 = *(VCPProtoTime **)(a1 + 8);
    *(_QWORD *)(a1 + 8) = v18;
LABEL_24:

    goto LABEL_26;
  }
  return *(_BYTE *)(a2 + *v5) == 0;
}

void sub_1B6E4DA0C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1B6E4DC7C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  _Unwind_Resume(a1);
}

void sub_1B6E4E2AC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, void *a11, void *a12, void *a13, void *a14, void *a15, void *a16, void *a17, void *a18)
{
  void *v18;
  void *v19;

  _Unwind_Resume(a1);
}

uint64_t VCPProtoVideoSegmentCaptionResultReadFrom(uint64_t a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  char v14;
  uint64_t v16;
  int v17;
  unint64_t v19;
  VCPProtoTimeRange *v20;
  uint64_t v21;
  void *v22;
  uint64_t v23;
  unint64_t v24;
  int v25;
  uint64_t result;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) < *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
  {
    v7 = (int *)MEMORY[0x1E0D82BB8];
    do
    {
      if (*(_BYTE *)(a2 + *v5))
        break;
      v8 = 0;
      v9 = 0;
      v10 = 0;
      while (1)
      {
        v11 = *v3;
        v12 = *(_QWORD *)(a2 + v11);
        v13 = v12 + 1;
        if (v12 == -1 || v13 > *(_QWORD *)(a2 + *v4))
          break;
        v14 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
        *(_QWORD *)(a2 + v11) = v13;
        v10 |= (unint64_t)(v14 & 0x7F) << v8;
        if ((v14 & 0x80) == 0)
          goto LABEL_12;
        v8 += 7;
        if (v9++ >= 9)
        {
          v10 = 0;
          v16 = *v5;
          v17 = *(unsigned __int8 *)(a2 + v16);
          goto LABEL_14;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
      v16 = *v5;
      v17 = *(unsigned __int8 *)(a2 + v16);
      if (*(_BYTE *)(a2 + v16))
        v10 = 0;
LABEL_14:
      if (v17 || (v10 & 7) == 4)
        break;
      v19 = v10 >> 3;
      if ((v10 >> 3) == 3)
      {
        PBReaderReadString();
        v21 = objc_claimAutoreleasedReturnValue();
        v22 = *(void **)(a1 + 16);
        *(_QWORD *)(a1 + 16) = v21;

      }
      else if ((_DWORD)v19 == 2)
      {
        v23 = *v3;
        v24 = *(_QWORD *)(a2 + v23);
        if (v24 <= 0xFFFFFFFFFFFFFFFBLL && v24 + 4 <= *(_QWORD *)(a2 + *v4))
        {
          v25 = *(_DWORD *)(*(_QWORD *)(a2 + *v7) + v24);
          *(_QWORD *)(a2 + v23) = v24 + 4;
        }
        else
        {
          *(_BYTE *)(a2 + v16) = 1;
          v25 = 0;
        }
        *(_DWORD *)(a1 + 8) = v25;
      }
      else if ((_DWORD)v19 == 1)
      {
        v20 = objc_alloc_init(VCPProtoTimeRange);
        objc_storeStrong((id *)(a1 + 24), v20);
        if (!PBReaderPlaceMark() || !VCPProtoTimeRangeReadFrom((uint64_t)v20, a2))
        {

          return 0;
        }
        PBReaderRecallMark();

      }
      else
      {
        result = PBReaderSkipValueWithTag();
        if (!(_DWORD)result)
          return result;
      }
    }
    while (*(_QWORD *)(a2 + *v3) < *(_QWORD *)(a2 + *v4));
  }
  return *(_BYTE *)(a2 + *v5) == 0;
}

void sub_1B6E4EE60(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1B6E4F020(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1B6E4F0D4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1B6E4F620(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, void *a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, ...)
{
  va_list va;

  va_start(va, a15);
  _Block_object_dispose(va, 8);

  _Unwind_Resume(a1);
}

uint64_t __Block_byref_object_copy__35(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void __Block_byref_object_dispose__35(uint64_t a1)
{

}

void sub_1B6E4FCE0(_Unwind_Exception *a1, void *a2, void *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, ...)
{
  void *v14;
  va_list va;

  va_start(va, a14);
  CF<opaqueCMSampleBuffer *>::~CF((const void **)va);

  _Unwind_Resume(a1);
}

Class ___ZL36getIMMessagesBlastDoorInterfaceClassv_block_invoke(uint64_t a1)
{
  Class result;
  void *v3;

  if (!MessagesBlastDoorSupportLibraryCore(char **)::frameworkLibrary)
  {
    MessagesBlastDoorSupportLibraryCore(char **)::frameworkLibrary = _sl_dlopen();
    if (!MessagesBlastDoorSupportLibraryCore(char **)::frameworkLibrary)
    {
      abort_report_np();
      goto LABEL_6;
    }
  }
  while (1)
  {
    result = objc_getClass("IMMessagesBlastDoorInterface");
    *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = result;
    if (*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24))
      break;
LABEL_6:
    v3 = (void *)___ZL36getIMMessagesBlastDoorInterfaceClassv_block_invoke_cold_1();
    free(v3);
  }
  getIMMessagesBlastDoorInterfaceClass(void)::softClass = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24);
  return result;
}

uint64_t VCPProtoMovieSubjectMotionResultReadFrom(uint64_t a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  int v15;
  char v17;
  unsigned int v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  char v22;
  VCPProtoTimeRange *v23;
  uint64_t result;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) < *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
  {
    v7 = (int *)MEMORY[0x1E0D82BB8];
    do
    {
      if (*(_BYTE *)(a2 + *v5))
        break;
      v8 = 0;
      v9 = 0;
      v10 = 0;
      while (1)
      {
        v11 = *v3;
        v12 = *(_QWORD *)(a2 + v11);
        if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
          break;
        v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
        *(_QWORD *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0)
          goto LABEL_12;
        v8 += 7;
        v14 = v9++ >= 9;
        if (v14)
        {
          v10 = 0;
          v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
      v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(_BYTE *)(a2 + *v5))
        v10 = 0;
LABEL_14:
      if (v15 || (v10 & 7) == 4)
        break;
      if ((v10 >> 3) == 1)
      {
        v23 = objc_alloc_init(VCPProtoTimeRange);
        objc_storeStrong((id *)(a1 + 8), v23);
        if (!PBReaderPlaceMark() || !VCPProtoTimeRangeReadFrom((uint64_t)v23, a2))
        {

          return 0;
        }
        PBReaderRecallMark();

      }
      else if ((v10 >> 3) == 2)
      {
        v17 = 0;
        v18 = 0;
        v19 = 0;
        while (1)
        {
          v20 = *v3;
          v21 = *(_QWORD *)(a2 + v20);
          if (v21 == -1 || v21 >= *(_QWORD *)(a2 + *v4))
            break;
          v22 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v21);
          *(_QWORD *)(a2 + v20) = v21 + 1;
          v19 |= (unint64_t)(v22 & 0x7F) << v17;
          if ((v22 & 0x80) == 0)
            goto LABEL_33;
          v17 += 7;
          v14 = v18++ >= 9;
          if (v14)
          {
            v19 = 0;
            goto LABEL_35;
          }
        }
        *(_BYTE *)(a2 + *v5) = 1;
LABEL_33:
        if (*(_BYTE *)(a2 + *v5))
          v19 = 0;
LABEL_35:
        *(_BYTE *)(a1 + 16) = v19 != 0;
      }
      else
      {
        result = PBReaderSkipValueWithTag();
        if (!(_DWORD)result)
          return result;
      }
    }
    while (*(_QWORD *)(a2 + *v3) < *(_QWORD *)(a2 + *v4));
  }
  return *(_BYTE *)(a2 + *v5) == 0;
}

void sub_1B6E507DC(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1B6E50904(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1B6E50A50(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1B6E50B60(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1B6E50C34(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_1B6E50F94(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1B6E512B4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  CVPixelBufferLock::~CVPixelBufferLock((CVPixelBufferLock *)va);
  _Unwind_Resume(a1);
}

void sub_1B6E5150C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;

  _Unwind_Resume(a1);
}

void sub_1B6E515BC(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_1B6E51700(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, objc_super a10)
{
  void *v10;
  void *v11;
  void *v12;

  a10.super_class = (Class)VCPVideoStabilizationAssetProcessingTask;
  -[_Unwind_Exception dealloc](&a10, sel_dealloc);
  _Unwind_Resume(a1);
}

void sub_1B6E5184C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1B6E51CB4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11, void *a12)
{

  _Unwind_Resume(a1);
}

void sub_1B6E52028(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_1B6E5213C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1B6E5222C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1B6E526A4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;

  _Unwind_Resume(a1);
}

void sub_1B6E52794(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_1B6E52A34(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  _Unwind_Resume(a1);
}

void sub_1B6E52CB4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  _Unwind_Resume(a1);
}

void sub_1B6E52ED0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, void *a15, void *a16, void *a17)
{
  void *v17;
  void *v18;
  void *v19;
  void *v20;

  _Unwind_Resume(a1);
}

void sub_1B6E52FA4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, void *a14)
{

  _Unwind_Resume(a1);
}

void sub_1B6E53130(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1B6E53610(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11, void *a12)
{

  _Unwind_Resume(a1);
}

void sub_1B6E539D0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, void *a11)
{
  void *v11;

  _Unwind_Resume(a1);
}

void sub_1B6E53D7C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_1B6E53F28(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1B6E57848(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,void *a30,uint64_t a31,void *a32,uint64_t a33,uint64_t a34,uint64_t a35,void *a36,void *a37,void *a38,void *a39,void *a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,void *a52,void *a53,void *a54,void *a55,void *a56,void *a57,void *a58,void *a59,void *a60,void *a61,void *a62,void *a63)
{
  void *a64;
  void *a65;
  void *a66;
  void *a68;
  void *a69;
  void *a70;
  void *v70;
  void *v71;

  _Unwind_Resume(a1);
}

void sub_1B6E58E54(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1B6E594A4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1B6E5A090(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1B6E5A400(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_1B6E5ABE0(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1B6E5C738(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13)
{
  void *v13;
  void *v14;
  void *v15;
  void *v16;
  void *v17;

  _Unwind_Resume(a1);
}

void sub_1B6E5CD50(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;

  _Unwind_Resume(a1);
}

void sub_1B6E5CDB8()
{
  void *v0;

  JUMPOUT(0x1B6E5CDACLL);
}

void sub_1B6E5CDC4()
{
  JUMPOUT(0x1B6E5CDACLL);
}

void sub_1B6E5D1EC(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  _Unwind_Resume(a1);
}

void sub_1B6E5D2A0(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1B6E5D64C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1B6E5D788(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1B6E5D878(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1B6E5DE5C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, void *a15, void *a16, uint64_t a17, void *a18)
{
  void *v18;
  void *v19;

  _Unwind_Resume(a1);
}

void sub_1B6E5E314(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1B6E5EBB4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, void *a13)
{
  void *v13;

  _Unwind_Resume(a1);
}

uint64_t VCPProtoMovieObstructionResultReadFrom(uint64_t a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  char v14;
  uint64_t v16;
  int v17;
  VCPProtoTimeRange *v19;
  uint64_t v20;
  unint64_t v21;
  int v22;
  uint64_t result;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) < *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
  {
    v7 = (int *)MEMORY[0x1E0D82BB8];
    do
    {
      if (*(_BYTE *)(a2 + *v5))
        break;
      v8 = 0;
      v9 = 0;
      v10 = 0;
      while (1)
      {
        v11 = *v3;
        v12 = *(_QWORD *)(a2 + v11);
        v13 = v12 + 1;
        if (v12 == -1 || v13 > *(_QWORD *)(a2 + *v4))
          break;
        v14 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
        *(_QWORD *)(a2 + v11) = v13;
        v10 |= (unint64_t)(v14 & 0x7F) << v8;
        if ((v14 & 0x80) == 0)
          goto LABEL_12;
        v8 += 7;
        if (v9++ >= 9)
        {
          v10 = 0;
          v16 = *v5;
          v17 = *(unsigned __int8 *)(a2 + v16);
          goto LABEL_14;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
      v16 = *v5;
      v17 = *(unsigned __int8 *)(a2 + v16);
      if (*(_BYTE *)(a2 + v16))
        v10 = 0;
LABEL_14:
      if (v17 || (v10 & 7) == 4)
        break;
      if ((v10 >> 3) == 2)
      {
        v20 = *v3;
        v21 = *(_QWORD *)(a2 + v20);
        if (v21 <= 0xFFFFFFFFFFFFFFFBLL && v21 + 4 <= *(_QWORD *)(a2 + *v4))
        {
          v22 = *(_DWORD *)(*(_QWORD *)(a2 + *v7) + v21);
          *(_QWORD *)(a2 + v20) = v21 + 4;
        }
        else
        {
          *(_BYTE *)(a2 + v16) = 1;
          v22 = 0;
        }
        *(_DWORD *)(a1 + 8) = v22;
      }
      else if ((v10 >> 3) == 1)
      {
        v19 = objc_alloc_init(VCPProtoTimeRange);
        objc_storeStrong((id *)(a1 + 16), v19);
        if (!PBReaderPlaceMark() || !VCPProtoTimeRangeReadFrom((uint64_t)v19, a2))
        {

          return 0;
        }
        PBReaderRecallMark();

      }
      else
      {
        result = PBReaderSkipValueWithTag();
        if (!(_DWORD)result)
          return result;
      }
    }
    while (*(_QWORD *)(a2 + *v3) < *(_QWORD *)(a2 + *v4));
  }
  return *(_BYTE *)(a2 + *v5) == 0;
}

void sub_1B6E5F678(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *a16)
{
  void *v16;
  void *v17;
  void *v18;
  void *v19;

  _Unwind_Resume(a1);
}

void sub_1B6E5F74C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  _Unwind_Resume(a1);
}

void sub_1B6E5FCC8(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1B6E5FF70(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12)
{

  _Unwind_Resume(a1);
}

void sub_1B6E60084(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_1B6E60220(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

uint64_t VCPProtoLivePhotoEffectsResultReadFrom(uint64_t a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  int v15;
  unint64_t v17;
  char v18;
  unsigned int v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  char v23;
  char v24;
  unsigned int v25;
  uint64_t v26;
  unint64_t v27;
  char v28;
  uint64_t v29;
  void *v30;
  uint64_t result;
  uint64_t v32;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) < *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
  {
    v7 = (int *)MEMORY[0x1E0D82BB8];
    while (1)
    {
      if (*(_BYTE *)(a2 + *v5))
        return *(_BYTE *)(a2 + *v5) == 0;
      v8 = 0;
      v9 = 0;
      v10 = 0;
      while (1)
      {
        v11 = *v3;
        v12 = *(_QWORD *)(a2 + v11);
        if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
          break;
        v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
        *(_QWORD *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0)
          goto LABEL_12;
        v8 += 7;
        v14 = v9++ >= 9;
        if (v14)
        {
          v10 = 0;
          v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
      v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(_BYTE *)(a2 + *v5))
        v10 = 0;
LABEL_14:
      if (v15 || (v10 & 7) == 4)
        return *(_BYTE *)(a2 + *v5) == 0;
      v17 = v10 >> 3;
      if ((v10 >> 3) == 1)
        break;
      if ((_DWORD)v17 != 3)
      {
        if ((_DWORD)v17 != 2)
        {
          result = PBReaderSkipValueWithTag();
          if (!(_DWORD)result)
            return result;
          goto LABEL_47;
        }
        v18 = 0;
        v19 = 0;
        v20 = 0;
        while (1)
        {
          v21 = *v3;
          v22 = *(_QWORD *)(a2 + v21);
          if (v22 == -1 || v22 >= *(_QWORD *)(a2 + *v4))
            break;
          v23 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v22);
          *(_QWORD *)(a2 + v21) = v22 + 1;
          v20 |= (unint64_t)(v23 & 0x7F) << v18;
          if ((v23 & 0x80) == 0)
            goto LABEL_39;
          v18 += 7;
          v14 = v19++ >= 9;
          if (v14)
          {
            v20 = 0;
            goto LABEL_41;
          }
        }
        *(_BYTE *)(a2 + *v5) = 1;
LABEL_39:
        if (*(_BYTE *)(a2 + *v5))
          v20 = 0;
LABEL_41:
        v32 = 8;
        goto LABEL_46;
      }
      PBReaderReadData();
      v29 = objc_claimAutoreleasedReturnValue();
      v30 = *(void **)(a1 + 24);
      *(_QWORD *)(a1 + 24) = v29;

LABEL_47:
      if (*(_QWORD *)(a2 + *v3) >= *(_QWORD *)(a2 + *v4))
        return *(_BYTE *)(a2 + *v5) == 0;
    }
    v24 = 0;
    v25 = 0;
    v20 = 0;
    while (1)
    {
      v26 = *v3;
      v27 = *(_QWORD *)(a2 + v26);
      if (v27 == -1 || v27 >= *(_QWORD *)(a2 + *v4))
        break;
      v28 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v27);
      *(_QWORD *)(a2 + v26) = v27 + 1;
      v20 |= (unint64_t)(v28 & 0x7F) << v24;
      if ((v28 & 0x80) == 0)
        goto LABEL_43;
      v24 += 7;
      v14 = v25++ >= 9;
      if (v14)
      {
        v20 = 0;
        goto LABEL_45;
      }
    }
    *(_BYTE *)(a2 + *v5) = 1;
LABEL_43:
    if (*(_BYTE *)(a2 + *v5))
      v20 = 0;
LABEL_45:
    v32 = 16;
LABEL_46:
    *(_QWORD *)(a1 + v32) = v20;
    goto LABEL_47;
  }
  return *(_BYTE *)(a2 + *v5) == 0;
}

void sub_1B6E60A7C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1B6E60DE4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, const void *a12)
{
  CVPixelBufferLock::~CVPixelBufferLock((CVPixelBufferLock *)&a9);
  CF<opaqueCMSampleBuffer *>::~CF(&a12);
  _Unwind_Resume(a1);
}

void sub_1B6E61430(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

uint64_t VCPProtoLivePhotoRecommendationResultReadFrom(uint64_t a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  char v14;
  uint64_t v16;
  int v17;
  VCPProtoTimeRange *v19;
  uint64_t v20;
  unint64_t v21;
  int v22;
  uint64_t result;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) < *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
  {
    v7 = (int *)MEMORY[0x1E0D82BB8];
    do
    {
      if (*(_BYTE *)(a2 + *v5))
        break;
      v8 = 0;
      v9 = 0;
      v10 = 0;
      while (1)
      {
        v11 = *v3;
        v12 = *(_QWORD *)(a2 + v11);
        v13 = v12 + 1;
        if (v12 == -1 || v13 > *(_QWORD *)(a2 + *v4))
          break;
        v14 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
        *(_QWORD *)(a2 + v11) = v13;
        v10 |= (unint64_t)(v14 & 0x7F) << v8;
        if ((v14 & 0x80) == 0)
          goto LABEL_12;
        v8 += 7;
        if (v9++ >= 9)
        {
          v10 = 0;
          v16 = *v5;
          v17 = *(unsigned __int8 *)(a2 + v16);
          goto LABEL_14;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
      v16 = *v5;
      v17 = *(unsigned __int8 *)(a2 + v16);
      if (*(_BYTE *)(a2 + v16))
        v10 = 0;
LABEL_14:
      if (v17 || (v10 & 7) == 4)
        break;
      if ((v10 >> 3) == 2)
      {
        v20 = *v3;
        v21 = *(_QWORD *)(a2 + v20);
        if (v21 <= 0xFFFFFFFFFFFFFFFBLL && v21 + 4 <= *(_QWORD *)(a2 + *v4))
        {
          v22 = *(_DWORD *)(*(_QWORD *)(a2 + *v7) + v21);
          *(_QWORD *)(a2 + v20) = v21 + 4;
        }
        else
        {
          *(_BYTE *)(a2 + v16) = 1;
          v22 = 0;
        }
        *(_DWORD *)(a1 + 8) = v22;
      }
      else if ((v10 >> 3) == 1)
      {
        v19 = objc_alloc_init(VCPProtoTimeRange);
        objc_storeStrong((id *)(a1 + 16), v19);
        if (!PBReaderPlaceMark() || !VCPProtoTimeRangeReadFrom((uint64_t)v19, a2))
        {

          return 0;
        }
        PBReaderRecallMark();

      }
      else
      {
        result = PBReaderSkipValueWithTag();
        if (!(_DWORD)result)
          return result;
      }
    }
    while (*(_QWORD *)(a2 + *v3) < *(_QWORD *)(a2 + *v4));
  }
  return *(_BYTE *)(a2 + *v5) == 0;
}

void sub_1B6E61BC8(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_1B6E61CC4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_1B6E61DC8(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1B6E61F94(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

BOOL VCPProtoMovieHumanActionClassificationResultReadFrom(id *a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  int v15;
  VCPProtoTimeRange *v17;
  uint64_t v18;
  uint64_t v19;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) >= *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
    return *(_BYTE *)(a2 + *v5) == 0;
  v7 = (int *)MEMORY[0x1E0D82BB8];
  while (2)
  {
    if (*(_BYTE *)(a2 + *v5))
      return *(_BYTE *)(a2 + *v5) == 0;
    v8 = 0;
    v9 = 0;
    v10 = 0;
    while (1)
    {
      v11 = *v3;
      v12 = *(_QWORD *)(a2 + v11);
      if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
        break;
      v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
      *(_QWORD *)(a2 + v11) = v12 + 1;
      v10 |= (unint64_t)(v13 & 0x7F) << v8;
      if ((v13 & 0x80) == 0)
        goto LABEL_12;
      v8 += 7;
      if (v9++ >= 9)
      {
        v10 = 0;
        v15 = *(unsigned __int8 *)(a2 + *v5);
        goto LABEL_14;
      }
    }
    *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
    v15 = *(unsigned __int8 *)(a2 + *v5);
    if (*(_BYTE *)(a2 + *v5))
      v10 = 0;
LABEL_14:
    if (v15 || (v10 & 7) == 4)
      return *(_BYTE *)(a2 + *v5) == 0;
    switch((v10 >> 3))
    {
      case 1u:
        v17 = objc_alloc_init(VCPProtoTimeRange);
        objc_storeStrong(a1 + 4, v17);
        if (PBReaderPlaceMark() && VCPProtoTimeRangeReadFrom((uint64_t)v17, a2))
          goto LABEL_29;
        goto LABEL_37;
      case 2u:
        v17 = objc_alloc_init(VCPProtoBounds);
        objc_storeStrong(a1 + 1, v17);
        if (!PBReaderPlaceMark() || !VCPProtoBoundsReadFrom((uint64_t)v17, a2))
          goto LABEL_37;
        goto LABEL_29;
      case 3u:
        v17 = objc_alloc_init(VCPProtoClassification);
        objc_msgSend(a1, "addClassification:", v17);
        if (PBReaderPlaceMark() && (VCPProtoClassificationReadFrom((uint64_t)v17, a2) & 1) != 0)
        {
LABEL_29:
          PBReaderRecallMark();
LABEL_33:

LABEL_34:
          if (*(_QWORD *)(a2 + *v3) >= *(_QWORD *)(a2 + *v4))
            return *(_BYTE *)(a2 + *v5) == 0;
          continue;
        }
LABEL_37:

        return 0;
      case 4u:
        PBReaderReadString();
        v18 = objc_claimAutoreleasedReturnValue();
        v19 = 3;
        goto LABEL_32;
      case 5u:
        PBReaderReadData();
        v18 = objc_claimAutoreleasedReturnValue();
        v19 = 5;
LABEL_32:
        v17 = (VCPProtoTimeRange *)a1[v19];
        a1[v19] = (id)v18;
        goto LABEL_33;
      default:
        if ((PBReaderSkipValueWithTag() & 1) == 0)
          return 0;
        goto LABEL_34;
    }
  }
}

void sub_1B6E630C0(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;

  v9 = v8;

  _Unwind_Resume(a1);
}

void sub_1B6E63124()
{
  JUMPOUT(0x1B6E63118);
}

void sub_1B6E63308(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1B6E63414(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1B6E634A4(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

BOOL VCPProtoTimeRangeReadFrom(uint64_t a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  int v15;
  VCPProtoTime *v17;
  uint64_t v18;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) < *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
  {
    v7 = (int *)MEMORY[0x1E0D82BB8];
    do
    {
      if (*(_BYTE *)(a2 + *v5))
        return *(_BYTE *)(a2 + *v5) == 0;
      v8 = 0;
      v9 = 0;
      v10 = 0;
      while (1)
      {
        v11 = *v3;
        v12 = *(_QWORD *)(a2 + v11);
        if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
          break;
        v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
        *(_QWORD *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0)
          goto LABEL_12;
        v8 += 7;
        if (v9++ >= 9)
        {
          v10 = 0;
          v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
      v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(_BYTE *)(a2 + *v5))
        v10 = 0;
LABEL_14:
      if (v15 || (v10 & 7) == 4)
        return *(_BYTE *)(a2 + *v5) == 0;
      if ((v10 >> 3) == 2)
      {
        v17 = objc_alloc_init(VCPProtoTime);
        v18 = 8;
      }
      else
      {
        if ((v10 >> 3) != 1)
        {
          if ((PBReaderSkipValueWithTag() & 1) == 0)
            return 0;
          continue;
        }
        v17 = objc_alloc_init(VCPProtoTime);
        v18 = 16;
      }
      objc_storeStrong((id *)(a1 + v18), v17);
      if (!PBReaderPlaceMark() || (VCPProtoTimeReadFrom((uint64_t)v17, a2) & 1) == 0)
      {

        return 0;
      }
      PBReaderRecallMark();

    }
    while (*(_QWORD *)(a2 + *v3) < *(_QWORD *)(a2 + *v4));
  }
  return *(_BYTE *)(a2 + *v5) == 0;
}

void sub_1B6E643B4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, void *a11, uint64_t a12, void *a13, void *a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,char a35)
{
  void *v35;
  void *v36;
  void *v37;
  void *v38;
  void *v39;
  void *v40;
  uint64_t v41;

  _Block_object_dispose((const void *)(v41 - 160), 8);
  _Block_object_dispose(&a35, 8);

  _Unwind_Resume(a1);
}

uint64_t __Block_byref_object_copy__36(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void __Block_byref_object_dispose__36(uint64_t a1)
{

}

void sub_1B6E647C8(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1B6E64938(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;

  v5 = v4;

  _Unwind_Resume(a1);
}

void sub_1B6E64CF0(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1B6E64F2C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1B6E651B0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *a16)
{
  void *v16;

  _Unwind_Resume(a1);
}

void sub_1B6E65338(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;

  v5 = v4;

  _Unwind_Resume(a1);
}

void sub_1B6E656EC(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1B6E658F0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, ...)
{
  va_list va;

  va_start(va, a12);
  CF<opaqueCMSampleBuffer *>::~CF((const void **)va);
  _Unwind_Resume(a1);
}

void sub_1B6E65BF0(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1B6E65D84(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1B6E65F18(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  _Unwind_Resume(a1);
}

CVPixelBufferRef VCPFlowCreatePixelBuffer(size_t a1, size_t a2, OSType a3, uint64_t a4)
{
  const __CFAllocator *v7;
  const CFDictionaryKeyCallBacks *v8;
  const CFDictionaryValueCallBacks *v9;
  CFMutableDictionaryRef Mutable;
  __CFDictionary *v11;
  CFNumberRef v12;
  CVPixelBufferRef v14;
  uint64_t valuePtr;

  v14 = 0;
  valuePtr = a4;
  v7 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
  v8 = (const CFDictionaryKeyCallBacks *)MEMORY[0x1E0C9B390];
  v9 = (const CFDictionaryValueCallBacks *)MEMORY[0x1E0C9B3A0];
  Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  v11 = CFDictionaryCreateMutable(v7, 0, v8, v9);
  CFDictionaryAddValue(v11, (const void *)*MEMORY[0x1E0CA8FF0], Mutable);
  CFRelease(Mutable);
  v12 = CFNumberCreate(v7, kCFNumberIntType, &valuePtr);
  CFDictionarySetValue(v11, (const void *)*MEMORY[0x1E0CA8F68], v12);
  CFRelease(v12);
  CVPixelBufferCreate(v7, a1, a2, a3, v11, &v14);
  CFRelease(v11);
  return v14;
}

id createTexture(void *a1, uint64_t a2, uint64_t a3, int a4, unint64_t a5)
{
  id v9;
  void *v10;
  void *v11;

  v9 = a1;
  createTextureDescriptor(a2, a3, a4, a5);
  v10 = (void *)objc_claimAutoreleasedReturnValue();
  v11 = (void *)objc_msgSend(v9, "newTextureWithDescriptor:", v10);

  return v11;
}

void sub_1B6E660F4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

id createTextureDescriptor(uint64_t a1, uint64_t a2, int a3, unint64_t a4)
{
  uint64_t v5;
  void *v6;

  if (a3)
    v5 = 65;
  else
    v5 = 25;
  objc_msgSend(MEMORY[0x1E0CC6BB0], "texture2DDescriptorWithPixelFormat:width:height:mipmapped:", v5, a1, a2, 0);
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v6, "setUsage:", 3);
  if (a4 >= 2)
  {
    objc_msgSend(v6, "setTextureType:", 3);
    objc_msgSend(v6, "setArrayLength:", a4);
  }
  return v6;
}

void sub_1B6E661A0(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

id createRGBA8TextureFromBuffer(__CVBuffer *a1, void *a2)
{
  id v3;
  void *v4;
  size_t Width;
  void *v6;
  void *v7;

  v3 = a2;
  v4 = (void *)MEMORY[0x1E0CC6BB0];
  Width = CVPixelBufferGetWidth(a1);
  objc_msgSend(v4, "texture2DDescriptorWithPixelFormat:width:height:mipmapped:", 70, Width, CVPixelBufferGetHeight(a1), 0);
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v6, "setUsage:", 3);
  v7 = (void *)objc_msgSend(v3, "newTextureWithDescriptor:iosurface:plane:", v6, CVPixelBufferGetIOSurface(a1), 0);

  return v7;
}

void sub_1B6E6624C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

BOOL needDeepCopy(unint64_t a1, unint64_t a2)
{
  return a1 < 0x80 || a2 > 0x80;
}

id createTextureFromBuffer(__CVBuffer *a1, void *a2, int a3, unint64_t a4)
{
  id v7;
  size_t Width;
  size_t Height;
  size_t BytesPerRow;
  size_t v11;
  void *v12;
  void *v13;
  id v14;
  id v15;
  size_t v16;
  size_t v17;
  size_t v18;
  void *v19;
  size_t v20;
  size_t v21;
  CVReturn v22;
  char *BaseAddress;
  unint64_t v24;
  unsigned int v25;
  _BOOL8 v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  id v35;
  int v36;
  CVPixelBufferRef pixelBuffer;
  CVPixelBufferLockFlags unlockFlags;
  uint8_t v39[4];
  CVReturn v40;
  uint8_t buf[24];
  size_t v42;
  size_t v43;
  uint64_t v44;
  uint64_t v45;

  v45 = *MEMORY[0x1E0C80C00];
  v7 = a2;
  Width = CVPixelBufferGetWidth(a1);
  Height = CVPixelBufferGetHeight(a1);
  BytesPerRow = CVPixelBufferGetBytesPerRow(a1);
  if (a4 <= 0x80 && Width > 0x7F)
  {
    v11 = BytesPerRow;
    createTextureDescriptor(Width, Height / a4, a3, a4);
    v12 = (void *)objc_claimAutoreleasedReturnValue();
    v13 = (void *)objc_msgSend(v7, "newBufferWithIOSurface:", CVPixelBufferGetIOSurface(a1));
    v14 = (id)objc_msgSend(v13, "newLinearTextureWithDescriptor:offset:bytesPerRow:bytesPerImage:", v12, 0, v11, 0);

    goto LABEL_25;
  }
  v15 = v7;
  v16 = CVPixelBufferGetWidth(a1);
  v17 = CVPixelBufferGetHeight(a1);
  v18 = v17 / a4;
  createTexture(v15, v16, v17 / a4, a3, a4);
  v19 = (void *)objc_claimAutoreleasedReturnValue();
  v20 = CVPixelBufferGetBytesPerRow(a1);
  v36 = 0;
  pixelBuffer = a1;
  unlockFlags = 1;
  if (!a1)
  {
    v26 = os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR);
    if (v26)
      -[VCPVideoCNNAnalyzer copyImage:withChannels:settling:].cold.1(v26, v27, v28, v29, v30, v31, v32, v33);
    v22 = -50;
    v36 = -50;
    goto LABEL_15;
  }
  v21 = v20;
  v22 = CVPixelBufferLockBaseAddress(a1, 1uLL);
  v36 = v22;
  if (v22)
  {
    if (!os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
      goto LABEL_15;
    *(_DWORD *)buf = 134218240;
    *(_QWORD *)&buf[4] = pixelBuffer;
    *(_WORD *)&buf[12] = 1024;
    *(_DWORD *)&buf[14] = v22;
    _os_log_error_impl(&dword_1B6C4A000, MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR, "Failed to lock CVPixelBuffer (%p, %d)", buf, 0x12u);
    v22 = v36;
    if (v36)
      goto LABEL_15;
  }
  v35 = v15;
  BaseAddress = (char *)CVPixelBufferGetBaseAddress(a1);
  v24 = 0;
  v25 = 1;
  do
  {
    memset(buf, 0, sizeof(buf));
    v42 = v16;
    v43 = v18;
    v44 = 1;
    objc_msgSend(v19, "replaceRegion:mipmapLevel:slice:withBytes:bytesPerRow:bytesPerImage:", buf, 0, v24, &BaseAddress[v24 * v21 * v18], v21, v21 * v18, v35);
    v24 = v25++;
  }
  while (v24 < a4);
  v22 = CVPixelBufferLock::Unlock((CVPixelBufferLock *)&v36);
  v15 = v35;
  if (v22)
  {
LABEL_15:
    if ((int)MediaAnalysisLogLevel() >= 4 && os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)v39 = 67109120;
      v40 = v22;
      _os_log_impl(&dword_1B6C4A000, MEMORY[0x1E0C81028], OS_LOG_TYPE_DEFAULT, "[MotionFlow] Failed to lock/unlock pixelbuffer (errcode: %d)", v39, 8u);
    }

    v19 = 0;
  }
  v14 = v19;
  if (pixelBuffer
    && !v36
    && CVPixelBufferUnlockBaseAddress(pixelBuffer, unlockFlags)
    && os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
  {
    -[MADHEICSAlphaSequenceWriter demuxPixelBuffer:imagePixelBuffer:alphaPixelBuffer:].cold.2();
  }

LABEL_25:
  return v14;
}

void sub_1B6E665C0(_Unwind_Exception *a1, void *a2, ...)
{
  void *v2;
  void *v3;
  va_list va;

  va_start(va, a2);
  CVPixelBufferLock::~CVPixelBufferLock((CVPixelBufferLock *)va);

  _Unwind_Resume(a1);
}

uint64_t copyTextureToBuffer(void *a1, __CVBuffer *a2)
{
  id v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  size_t BytesPerRow;
  size_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _BOOL8 v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *BaseAddress;
  char *v26;
  uint64_t v27;
  unsigned int v28;
  _QWORD v30[6];
  int v31;
  CVPixelBufferRef pixelBuffer;
  CVPixelBufferLockFlags unlockFlags;

  v3 = a1;
  v4 = objc_msgSend(v3, "width");
  v5 = objc_msgSend(v3, "height");
  v6 = objc_msgSend(v3, "arrayLength");
  BytesPerRow = CVPixelBufferGetBytesPerRow(a2);
  pixelBuffer = a2;
  unlockFlags = 0;
  if (a2)
  {
    v8 = BytesPerRow;
    v9 = CVPixelBufferLockBaseAddress(a2, 0);
    v31 = v9;
    if ((_DWORD)v9)
    {
      if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
        -[VCPImageConverter convertImage:yuvFrame:].cold.3((uint64_t)a2, v9, v10, v11, v12, v13, v14, v15);
    }
    else
    {
      BaseAddress = (char *)CVPixelBufferGetBaseAddress(a2);
      if (v6)
      {
        v26 = BaseAddress;
        v27 = 0;
        v28 = 1;
        do
        {
          memset(v30, 0, 24);
          v30[3] = v4;
          v30[4] = v5;
          v30[5] = 1;
          objc_msgSend(v3, "getBytes:bytesPerRow:bytesPerImage:fromRegion:mipmapLevel:slice:", v26, v8, v8 * v5, v30, 0, v27);
          v26 += v8 * v5;
          v27 = v28;
        }
        while (v6 > v28++);
      }
      v9 = CVPixelBufferLock::Unlock((CVPixelBufferLock *)&v31);
      if (pixelBuffer
        && !v31
        && CVPixelBufferUnlockBaseAddress(pixelBuffer, unlockFlags)
        && os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
      {
        -[MADHEICSAlphaSequenceWriter demuxPixelBuffer:imagePixelBuffer:alphaPixelBuffer:].cold.2();
      }
    }
  }
  else
  {
    v16 = os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR);
    if (v16)
      -[VCPVideoCNNAnalyzer copyImage:withChannels:settling:].cold.1(v16, v17, v18, v19, v20, v21, v22, v23);
    v9 = 4294967246;
  }

  return v9;
}

void sub_1B6E667EC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  void *v8;
  va_list va;

  va_start(va, a8);
  CVPixelBufferLock::~CVPixelBufferLock((CVPixelBufferLock *)va);

  _Unwind_Resume(a1);
}

void sub_1B6E669A0(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;

  _Unwind_Resume(a1);
}

void sub_1B6E66A5C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  _Unwind_Resume(a1);
}

void sub_1B6E67374(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;

  _Unwind_Resume(a1);
}

void sub_1B6E67734(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_1B6E678C4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  _Unwind_Resume(a1);
}

void sub_1B6E67B7C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  const void *v3;
  va_list va;
  va_list va1;

  va_start(va1, a2);
  va_start(va, a2);
  v3 = va_arg(va1, const void *);
  CF<opaqueCMSampleBuffer *>::~CF((const void **)va);
  CF<opaqueCMSampleBuffer *>::~CF((const void **)va1);
  _Unwind_Resume(a1);
}

void sub_1B6E68304(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11)
{
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  void *v15;

  _Unwind_Resume(a1);
}

void sub_1B6E68F1C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,char a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,const void *a27)
{
  CVPixelBufferLock::~CVPixelBufferLock((CVPixelBufferLock *)&a17);
  CVPixelBufferLock::~CVPixelBufferLock((CVPixelBufferLock *)&a21);
  CF<opaqueCMSampleBuffer *>::~CF(&a27);
  _Unwind_Resume(a1);
}

uint64_t VCPProtoImageCaptionResultReadFrom(uint64_t a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  char v14;
  BOOL v15;
  uint64_t v16;
  int v17;
  unint64_t v19;
  char v20;
  unsigned int v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  char v26;
  uint64_t v27;
  unint64_t v28;
  int v29;
  uint64_t v30;
  void *v31;
  uint64_t result;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) < *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
  {
    v7 = (int *)MEMORY[0x1E0D82BB8];
    do
    {
      if (*(_BYTE *)(a2 + *v5))
        break;
      v8 = 0;
      v9 = 0;
      v10 = 0;
      while (1)
      {
        v11 = *v3;
        v12 = *(_QWORD *)(a2 + v11);
        v13 = v12 + 1;
        if (v12 == -1 || v13 > *(_QWORD *)(a2 + *v4))
          break;
        v14 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
        *(_QWORD *)(a2 + v11) = v13;
        v10 |= (unint64_t)(v14 & 0x7F) << v8;
        if ((v14 & 0x80) == 0)
          goto LABEL_12;
        v8 += 7;
        v15 = v9++ >= 9;
        if (v15)
        {
          v10 = 0;
          v16 = *v5;
          v17 = *(unsigned __int8 *)(a2 + v16);
          goto LABEL_14;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
      v16 = *v5;
      v17 = *(unsigned __int8 *)(a2 + v16);
      if (*(_BYTE *)(a2 + v16))
        v10 = 0;
LABEL_14:
      if (v17 || (v10 & 7) == 4)
        break;
      v19 = v10 >> 3;
      if ((v10 >> 3) == 1)
      {
        v27 = *v3;
        v28 = *(_QWORD *)(a2 + v27);
        if (v28 <= 0xFFFFFFFFFFFFFFFBLL && v28 + 4 <= *(_QWORD *)(a2 + *v4))
        {
          v29 = *(_DWORD *)(*(_QWORD *)(a2 + *v7) + v28);
          *(_QWORD *)(a2 + v27) = v28 + 4;
        }
        else
        {
          *(_BYTE *)(a2 + v16) = 1;
          v29 = 0;
        }
        *(_DWORD *)(a1 + 8) = v29;
      }
      else if ((_DWORD)v19 == 2)
      {
        PBReaderReadString();
        v30 = objc_claimAutoreleasedReturnValue();
        v31 = *(void **)(a1 + 16);
        *(_QWORD *)(a1 + 16) = v30;

      }
      else if ((_DWORD)v19 == 3)
      {
        v20 = 0;
        v21 = 0;
        v22 = 0;
        while (1)
        {
          v23 = *v3;
          v24 = *(_QWORD *)(a2 + v23);
          v25 = v24 + 1;
          if (v24 == -1 || v25 > *(_QWORD *)(a2 + *v4))
            break;
          v26 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v24);
          *(_QWORD *)(a2 + v23) = v25;
          v22 |= (unint64_t)(v26 & 0x7F) << v20;
          if ((v26 & 0x80) == 0)
            goto LABEL_35;
          v20 += 7;
          v15 = v21++ >= 9;
          if (v15)
          {
            v22 = 0;
            goto LABEL_37;
          }
        }
        *(_BYTE *)(a2 + *v5) = 1;
LABEL_35:
        if (*(_BYTE *)(a2 + *v5))
          v22 = 0;
LABEL_37:
        *(_BYTE *)(a1 + 24) = v22 != 0;
      }
      else
      {
        result = PBReaderSkipValueWithTag();
        if (!(_DWORD)result)
          return result;
      }
    }
    while (*(_QWORD *)(a2 + *v3) < *(_QWORD *)(a2 + *v4));
  }
  return *(_BYTE *)(a2 + *v5) == 0;
}

void sub_1B6E69934(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1B6E699F4(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

uint64_t VCPProtoLivePhotoEffectsRecipeReadFrom(_BYTE *a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  int v15;
  char v17;
  unsigned int v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  char v22;
  uint64_t result;
  char v24;
  unsigned int v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  char v29;
  char v30;
  unsigned int v31;
  uint64_t v32;
  unint64_t v33;
  char v34;
  char v35;
  unsigned int v36;
  uint64_t v37;
  unint64_t v38;
  char v39;
  char v40;
  unsigned int v41;
  uint64_t v42;
  unint64_t v43;
  char v44;
  char v45;
  unsigned int v46;
  uint64_t v47;
  unint64_t v48;
  char v49;
  char v50;
  unsigned int v51;
  uint64_t v52;
  unint64_t v53;
  char v54;
  char v55;
  unsigned int v56;
  uint64_t v57;
  unint64_t v58;
  char v59;
  char v60;
  unsigned int v61;
  uint64_t v62;
  unint64_t v63;
  char v64;
  VCPProtoLivePhotoFrameInstruction *v65;
  uint64_t v66;
  char v67;
  unsigned int v68;
  uint64_t v69;
  unint64_t v70;
  char v71;
  char v72;
  unsigned int v73;
  uint64_t v74;
  unint64_t v75;
  char v76;
  uint64_t v77;
  uint64_t v78;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) >= *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
    return *(_BYTE *)(a2 + *v5) == 0;
  v7 = (int *)MEMORY[0x1E0D82BB8];
  while (2)
  {
    if (*(_BYTE *)(a2 + *v5))
      return *(_BYTE *)(a2 + *v5) == 0;
    v8 = 0;
    v9 = 0;
    v10 = 0;
    while (1)
    {
      v11 = *v3;
      v12 = *(_QWORD *)(a2 + v11);
      if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
        break;
      v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
      *(_QWORD *)(a2 + v11) = v12 + 1;
      v10 |= (unint64_t)(v13 & 0x7F) << v8;
      if ((v13 & 0x80) == 0)
        goto LABEL_12;
      v8 += 7;
      v14 = v9++ >= 9;
      if (v14)
      {
        v10 = 0;
        v15 = *(unsigned __int8 *)(a2 + *v5);
        goto LABEL_14;
      }
    }
    *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
    v15 = *(unsigned __int8 *)(a2 + *v5);
    if (*(_BYTE *)(a2 + *v5))
      v10 = 0;
LABEL_14:
    if (v15 || (v10 & 7) == 4)
      return *(_BYTE *)(a2 + *v5) == 0;
    switch((v10 >> 3))
    {
      case 1u:
        v17 = 0;
        v18 = 0;
        v19 = 0;
        while (1)
        {
          v20 = *v3;
          v21 = *(_QWORD *)(a2 + v20);
          if (v21 == -1 || v21 >= *(_QWORD *)(a2 + *v4))
            break;
          v22 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v21);
          *(_QWORD *)(a2 + v20) = v21 + 1;
          v19 |= (unint64_t)(v22 & 0x7F) << v17;
          if ((v22 & 0x80) == 0)
            goto LABEL_109;
          v17 += 7;
          v14 = v18++ >= 9;
          if (v14)
          {
            LODWORD(v19) = 0;
            goto LABEL_111;
          }
        }
        *(_BYTE *)(a2 + *v5) = 1;
LABEL_109:
        if (*(_BYTE *)(a2 + *v5))
          LODWORD(v19) = 0;
LABEL_111:
        v77 = 96;
        goto LABEL_153;
      case 2u:
        v24 = 0;
        v25 = 0;
        v26 = 0;
        while (2)
        {
          v27 = *v3;
          v28 = *(_QWORD *)(a2 + v27);
          if (v28 == -1 || v28 >= *(_QWORD *)(a2 + *v4))
          {
            *(_BYTE *)(a2 + *v5) = 1;
          }
          else
          {
            v29 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v28);
            *(_QWORD *)(a2 + v27) = v28 + 1;
            v26 |= (unint64_t)(v29 & 0x7F) << v24;
            if (v29 < 0)
            {
              v24 += 7;
              v14 = v25++ >= 9;
              if (v14)
              {
                v26 = 0;
                goto LABEL_115;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(a2 + *v5))
          v26 = 0;
LABEL_115:
        v78 = 16;
        goto LABEL_140;
      case 3u:
        v30 = 0;
        v31 = 0;
        v19 = 0;
        while (2)
        {
          v32 = *v3;
          v33 = *(_QWORD *)(a2 + v32);
          if (v33 == -1 || v33 >= *(_QWORD *)(a2 + *v4))
          {
            *(_BYTE *)(a2 + *v5) = 1;
          }
          else
          {
            v34 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v33);
            *(_QWORD *)(a2 + v32) = v33 + 1;
            v19 |= (unint64_t)(v34 & 0x7F) << v30;
            if (v34 < 0)
            {
              v30 += 7;
              v14 = v31++ >= 9;
              if (v14)
              {
                LODWORD(v19) = 0;
                goto LABEL_119;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(a2 + *v5))
          LODWORD(v19) = 0;
LABEL_119:
        v77 = 48;
        goto LABEL_153;
      case 4u:
        v35 = 0;
        v36 = 0;
        v19 = 0;
        while (2)
        {
          v37 = *v3;
          v38 = *(_QWORD *)(a2 + v37);
          if (v38 == -1 || v38 >= *(_QWORD *)(a2 + *v4))
          {
            *(_BYTE *)(a2 + *v5) = 1;
          }
          else
          {
            v39 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v38);
            *(_QWORD *)(a2 + v37) = v38 + 1;
            v19 |= (unint64_t)(v39 & 0x7F) << v35;
            if (v39 < 0)
            {
              v35 += 7;
              v14 = v36++ >= 9;
              if (v14)
              {
                LODWORD(v19) = 0;
                goto LABEL_123;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(a2 + *v5))
          LODWORD(v19) = 0;
LABEL_123:
        v77 = 52;
        goto LABEL_153;
      case 5u:
        v40 = 0;
        v41 = 0;
        v19 = 0;
        while (2)
        {
          v42 = *v3;
          v43 = *(_QWORD *)(a2 + v42);
          if (v43 == -1 || v43 >= *(_QWORD *)(a2 + *v4))
          {
            *(_BYTE *)(a2 + *v5) = 1;
          }
          else
          {
            v44 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v43);
            *(_QWORD *)(a2 + v42) = v43 + 1;
            v19 |= (unint64_t)(v44 & 0x7F) << v40;
            if (v44 < 0)
            {
              v40 += 7;
              v14 = v41++ >= 9;
              if (v14)
              {
                LODWORD(v19) = 0;
                goto LABEL_127;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(a2 + *v5))
          LODWORD(v19) = 0;
LABEL_127:
        v77 = 40;
        goto LABEL_153;
      case 6u:
        v45 = 0;
        v46 = 0;
        v19 = 0;
        while (2)
        {
          v47 = *v3;
          v48 = *(_QWORD *)(a2 + v47);
          if (v48 == -1 || v48 >= *(_QWORD *)(a2 + *v4))
          {
            *(_BYTE *)(a2 + *v5) = 1;
          }
          else
          {
            v49 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v48);
            *(_QWORD *)(a2 + v47) = v48 + 1;
            v19 |= (unint64_t)(v49 & 0x7F) << v45;
            if (v49 < 0)
            {
              v45 += 7;
              v14 = v46++ >= 9;
              if (v14)
              {
                LODWORD(v19) = 0;
                goto LABEL_131;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(a2 + *v5))
          LODWORD(v19) = 0;
LABEL_131:
        v77 = 44;
        goto LABEL_153;
      case 7u:
        v50 = 0;
        v51 = 0;
        v19 = 0;
        while (2)
        {
          v52 = *v3;
          v53 = *(_QWORD *)(a2 + v52);
          if (v53 == -1 || v53 >= *(_QWORD *)(a2 + *v4))
          {
            *(_BYTE *)(a2 + *v5) = 1;
          }
          else
          {
            v54 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v53);
            *(_QWORD *)(a2 + v52) = v53 + 1;
            v19 |= (unint64_t)(v54 & 0x7F) << v50;
            if (v54 < 0)
            {
              v50 += 7;
              v14 = v51++ >= 9;
              if (v14)
              {
                LODWORD(v19) = 0;
                goto LABEL_135;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(a2 + *v5))
          LODWORD(v19) = 0;
LABEL_135:
        v77 = 100;
        goto LABEL_153;
      case 8u:
        v55 = 0;
        v56 = 0;
        v26 = 0;
        a1[108] |= 1u;
        while (2)
        {
          v57 = *v3;
          v58 = *(_QWORD *)(a2 + v57);
          if (v58 == -1 || v58 >= *(_QWORD *)(a2 + *v4))
          {
            *(_BYTE *)(a2 + *v5) = 1;
          }
          else
          {
            v59 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v58);
            *(_QWORD *)(a2 + v57) = v58 + 1;
            v26 |= (unint64_t)(v59 & 0x7F) << v55;
            if (v59 < 0)
            {
              v55 += 7;
              v14 = v56++ >= 9;
              if (v14)
              {
                v26 = 0;
                goto LABEL_139;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(a2 + *v5))
          v26 = 0;
LABEL_139:
        v78 = 8;
LABEL_140:
        *(_QWORD *)&a1[v78] = v26;
        goto LABEL_154;
      case 9u:
        v60 = 0;
        v61 = 0;
        v19 = 0;
        a1[108] |= 2u;
        while (2)
        {
          v62 = *v3;
          v63 = *(_QWORD *)(a2 + v62);
          if (v63 == -1 || v63 >= *(_QWORD *)(a2 + *v4))
          {
            *(_BYTE *)(a2 + *v5) = 1;
          }
          else
          {
            v64 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v63);
            *(_QWORD *)(a2 + v62) = v63 + 1;
            v19 |= (unint64_t)(v64 & 0x7F) << v60;
            if (v64 < 0)
            {
              v60 += 7;
              v14 = v61++ >= 9;
              if (v14)
              {
                LODWORD(v19) = 0;
                goto LABEL_144;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(a2 + *v5))
          LODWORD(v19) = 0;
LABEL_144:
        v77 = 56;
        goto LABEL_153;
      case 0xAu:
        v65 = objc_alloc_init(VCPProtoLivePhotoFrameInstruction);
        objc_msgSend(a1, "addFrameInstructions:", v65);
        if (!PBReaderPlaceMark()
          || (VCPProtoLivePhotoFrameInstructionReadFrom((uint64_t)v65, a2) & 1) == 0)
        {
          goto LABEL_156;
        }
        goto LABEL_93;
      case 0xBu:
        v65 = objc_alloc_init(VCPProtoLivePhotoVariationParams);
        v66 = 24;
        goto LABEL_91;
      case 0xCu:
        v65 = objc_alloc_init(VCPProtoLivePhotoVariationParams);
        v66 = 32;
        goto LABEL_91;
      case 0xDu:
        v65 = objc_alloc_init(VCPProtoLivePhotoVariationParams);
        v66 = 72;
        goto LABEL_91;
      case 0xEu:
        v65 = objc_alloc_init(VCPProtoLivePhotoVariationParams);
        v66 = 88;
LABEL_91:
        objc_storeStrong((id *)&a1[v66], v65);
        if (PBReaderPlaceMark() && VCPProtoLivePhotoVariationParamsReadFrom((uint64_t)v65, a2))
        {
LABEL_93:
          PBReaderRecallMark();

LABEL_154:
          if (*(_QWORD *)(a2 + *v3) >= *(_QWORD *)(a2 + *v4))
            return *(_BYTE *)(a2 + *v5) == 0;
          continue;
        }
LABEL_156:

        return 0;
      case 0xFu:
        v67 = 0;
        v68 = 0;
        v19 = 0;
        while (2)
        {
          v69 = *v3;
          v70 = *(_QWORD *)(a2 + v69);
          if (v70 == -1 || v70 >= *(_QWORD *)(a2 + *v4))
          {
            *(_BYTE *)(a2 + *v5) = 1;
          }
          else
          {
            v71 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v70);
            *(_QWORD *)(a2 + v69) = v70 + 1;
            v19 |= (unint64_t)(v71 & 0x7F) << v67;
            if (v71 < 0)
            {
              v67 += 7;
              v14 = v68++ >= 9;
              if (v14)
              {
                LODWORD(v19) = 0;
                goto LABEL_148;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(a2 + *v5))
          LODWORD(v19) = 0;
LABEL_148:
        v77 = 80;
        goto LABEL_153;
      case 0x10u:
        v72 = 0;
        v73 = 0;
        v19 = 0;
        while (2)
        {
          v74 = *v3;
          v75 = *(_QWORD *)(a2 + v74);
          if (v75 == -1 || v75 >= *(_QWORD *)(a2 + *v4))
          {
            *(_BYTE *)(a2 + *v5) = 1;
          }
          else
          {
            v76 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v75);
            *(_QWORD *)(a2 + v74) = v75 + 1;
            v19 |= (unint64_t)(v76 & 0x7F) << v72;
            if (v76 < 0)
            {
              v72 += 7;
              v14 = v73++ >= 9;
              if (v14)
              {
                LODWORD(v19) = 0;
                goto LABEL_152;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(a2 + *v5))
          LODWORD(v19) = 0;
LABEL_152:
        v77 = 104;
LABEL_153:
        *(_DWORD *)&a1[v77] = v19;
        goto LABEL_154;
      default:
        result = PBReaderSkipValueWithTag();
        if (!(_DWORD)result)
          return result;
        goto LABEL_154;
    }
  }
}

BOOL VCPProtoLivePhotoHumanActionClassificationResultReadFrom(uint64_t a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  int v15;
  VCPProtoTimeRange *v17;
  uint64_t v18;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) >= *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
    return *(_BYTE *)(a2 + *v5) == 0;
  v7 = (int *)MEMORY[0x1E0D82BB8];
  while (2)
  {
    if (*(_BYTE *)(a2 + *v5))
      return *(_BYTE *)(a2 + *v5) == 0;
    v8 = 0;
    v9 = 0;
    v10 = 0;
    while (1)
    {
      v11 = *v3;
      v12 = *(_QWORD *)(a2 + v11);
      if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
        break;
      v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
      *(_QWORD *)(a2 + v11) = v12 + 1;
      v10 |= (unint64_t)(v13 & 0x7F) << v8;
      if ((v13 & 0x80) == 0)
        goto LABEL_12;
      v8 += 7;
      if (v9++ >= 9)
      {
        v10 = 0;
        v15 = *(unsigned __int8 *)(a2 + *v5);
        goto LABEL_14;
      }
    }
    *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
    v15 = *(unsigned __int8 *)(a2 + *v5);
    if (*(_BYTE *)(a2 + *v5))
      v10 = 0;
LABEL_14:
    if (v15 || (v10 & 7) == 4)
      return *(_BYTE *)(a2 + *v5) == 0;
    switch((v10 >> 3))
    {
      case 1u:
        v17 = objc_alloc_init(VCPProtoTimeRange);
        objc_storeStrong((id *)(a1 + 32), v17);
        if (PBReaderPlaceMark() && VCPProtoTimeRangeReadFrom((uint64_t)v17, a2))
          goto LABEL_29;
        goto LABEL_35;
      case 2u:
        v17 = objc_alloc_init(VCPProtoClassification);
        objc_msgSend((id)a1, "addClassification:", v17);
        if (!PBReaderPlaceMark() || (VCPProtoClassificationReadFrom((uint64_t)v17, a2) & 1) == 0)
          goto LABEL_35;
        goto LABEL_29;
      case 3u:
        v17 = objc_alloc_init(VCPProtoBounds);
        objc_storeStrong((id *)(a1 + 8), v17);
        if (PBReaderPlaceMark() && VCPProtoBoundsReadFrom((uint64_t)v17, a2))
        {
LABEL_29:
          PBReaderRecallMark();
LABEL_31:

LABEL_32:
          if (*(_QWORD *)(a2 + *v3) >= *(_QWORD *)(a2 + *v4))
            return *(_BYTE *)(a2 + *v5) == 0;
          continue;
        }
LABEL_35:

        return 0;
      case 4u:
        PBReaderReadString();
        v18 = objc_claimAutoreleasedReturnValue();
        v17 = *(VCPProtoTimeRange **)(a1 + 24);
        *(_QWORD *)(a1 + 24) = v18;
        goto LABEL_31;
      default:
        if ((PBReaderSkipValueWithTag() & 1) == 0)
          return 0;
        goto LABEL_32;
    }
  }
}

void sub_1B6E6C7EC(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1B6E6D264(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *a19, uint64_t a20,void *a21,void *a22)
{
  void *v22;

  _Unwind_Resume(a1);
}

void sub_1B6E6DD24(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_1B6E6DE18(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  void *v14;
  void *v15;

  _Unwind_Resume(a1);
}

void sub_1B6E6E118(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  CVPixelBufferLock::~CVPixelBufferLock((CVPixelBufferLock *)va);
  _Unwind_Resume(a1);
}

void sub_1B6E6E488(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;

  v6 = v5;

  _Unwind_Resume(a1);
}

void sub_1B6E6E5F0(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_1B6E6E740(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1B6E6E91C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1B6E6EA38(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, objc_super a9)
{
  a9.super_class = (Class)VCPEspressoV2Data;
  -[_Unwind_Exception dealloc](&a9, sel_dealloc);
  _Unwind_Resume(a1);
}

void sub_1B6E6EB14(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;
  void *v11;

  _Unwind_Resume(a1);
}

void sub_1B6E6ECD4(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1B6E6F284(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1B6E6FB14(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_list va;

  va_start(va, a11);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t __Block_byref_object_copy__37(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void __Block_byref_object_dispose__37(uint64_t a1)
{

}

void sub_1B6E6FD20(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1B6E6FE54(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1B6E7056C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,void *a28,uint64_t a29,uint64_t a30,uint64_t a31,void *a32,void *a33)
{

  _Unwind_Resume(a1);
}

uint64_t VCPProtoMoviePreEncodeResultReadFrom(uint64_t a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  int v15;
  uint64_t v17;
  void *v18;
  uint64_t result;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) < *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
  {
    v7 = (int *)MEMORY[0x1E0D82BB8];
    do
    {
      if (*(_BYTE *)(a2 + *v5))
        break;
      v8 = 0;
      v9 = 0;
      v10 = 0;
      while (1)
      {
        v11 = *v3;
        v12 = *(_QWORD *)(a2 + v11);
        if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
          break;
        v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
        *(_QWORD *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0)
          goto LABEL_12;
        v8 += 7;
        if (v9++ >= 9)
        {
          v10 = 0;
          v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
      v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(_BYTE *)(a2 + *v5))
        v10 = 0;
LABEL_14:
      if (v15 || (v10 & 7) == 4)
        break;
      if ((v10 >> 3) == 1)
      {
        PBReaderReadData();
        v17 = objc_claimAutoreleasedReturnValue();
        v18 = *(void **)(a1 + 8);
        *(_QWORD *)(a1 + 8) = v17;

      }
      else
      {
        result = PBReaderSkipValueWithTag();
        if (!(_DWORD)result)
          return result;
      }
    }
    while (*(_QWORD *)(a2 + *v3) < *(_QWORD *)(a2 + *v4));
  }
  return *(_BYTE *)(a2 + *v5) == 0;
}

void sub_1B6E70C08(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;

  v5 = v4;

  _Unwind_Resume(a1);
}

void sub_1B6E70D0C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1B6E70DB4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1B6E70ED0(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_1B6E71060(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  _Unwind_Resume(a1);
}

void sub_1B6E71168(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_1B6E71908(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, void *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, ...)
{
  void *v12;
  void *v13;
  va_list va;

  va_start(va, a12);

  CF<opaqueCMSampleBuffer *>::~CF((const void **)va);
  _Unwind_Resume(a1);
}

void sub_1B6E730A4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1B6E73414(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1B6E735C8(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_1B6E73680(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void sub_1B6E736E8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_1B6E74BD4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1B6E7509C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1B6E753CC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *a16)
{
  void *v16;
  void *v17;

  _Unwind_Resume(a1);
}

void sub_1B6E7586C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, void *a15)
{
  void *v15;

  _Unwind_Resume(a1);
}

void sub_1B6E759A4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;
  void *v11;

  _Unwind_Resume(a1);
}

void sub_1B6E75F9C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9, void *a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void sub_1B6E76180(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void sub_1B6E762C8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *a20)
{
  void *v20;
  void *v21;
  void *v22;
  void *v23;

  v23 = v22;

  _Unwind_Resume(a1);
}

void sub_1B6E765E8(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  _Unwind_Resume(a1);
}

void sub_1B6E76714(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_1B6E76B48(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, void *a15, uint64_t a16, ...)
{
  void *v16;
  void *v17;
  void *v18;
  void *v19;
  void *v20;
  va_list va;

  va_start(va, a16);

  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1B6E76E60(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  _Unwind_Resume(a1);
}

void sub_1B6E78444(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *a17, void *a18, void *a19, void *a20,uint64_t a21,void *a22,uint64_t a23,uint64_t a24,_Unwind_Exception *exception_object,void *a26,void *a27,void *a28,void *a29,void *a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51)
{
  void *v51;
  void *v52;
  void *v53;
  void *v54;
  void *v55;
  void *v56;
  void *v57;

  _Unwind_Resume(a1);
}

void sub_1B6E78B7C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;

  v6 = v4;

  _Unwind_Resume(a1);
}

void sub_1B6E79A18(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *a17, void *a18, void *a19, void *a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,const void *a48)
{
  void *v48;
  void *v49;

  CF<opaqueCMSampleBuffer *>::~CF(&a48);
  _Unwind_Resume(a1);
}

void sub_1B6E79E60(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1B6E7A3B8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  uint64_t v15;
  va_list va;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  va_list va1;
  uint64_t v21;
  uint64_t v22;
  va_list va2;

  va_start(va2, a9);
  va_start(va1, a9);
  va_start(va, a9);
  v15 = va_arg(va1, _QWORD);
  v17 = va_arg(va1, _QWORD);
  v18 = va_arg(va1, _QWORD);
  va_copy(va2, va1);
  v19 = va_arg(va2, _QWORD);
  v21 = va_arg(va2, _QWORD);
  v22 = va_arg(va2, _QWORD);

  CVPixelBufferLock::~CVPixelBufferLock((CVPixelBufferLock *)va);
  CVPixelBufferLock::~CVPixelBufferLock((CVPixelBufferLock *)va1);
  CF<opaqueCMSampleBuffer *>::~CF((const void **)va2);

  _Unwind_Resume(a1);
}

void sub_1B6E7A72C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1B6E7A970(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1B6E7B1B8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, void *a4, uint64_t a5, void *a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  void *v9;
  void *v10;
  void *v11;
  uint64_t v13;
  va_list va;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  va_list va1;
  uint64_t v19;
  uint64_t v20;
  va_list va2;

  va_start(va2, a9);
  va_start(va1, a9);
  va_start(va, a9);
  v13 = va_arg(va1, _QWORD);
  v15 = va_arg(va1, _QWORD);
  v16 = va_arg(va1, _QWORD);
  va_copy(va2, va1);
  v17 = va_arg(va2, _QWORD);
  v19 = va_arg(va2, _QWORD);
  v20 = va_arg(va2, _QWORD);

  CVPixelBufferLock::~CVPixelBufferLock((CVPixelBufferLock *)va);
  CVPixelBufferLock::~CVPixelBufferLock((CVPixelBufferLock *)va1);
  CF<opaqueCMSampleBuffer *>::~CF((const void **)va2);
  _Unwind_Resume(a1);
}

void sub_1B6E7B574(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1B6E7B88C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,char a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,id a35,char a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,id a41,char a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,id a47,char a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,id a53)
{
  void *v53;
  uint64_t v54;

  _Block_object_dispose(&a30, 8);
  _Block_object_dispose(&a36, 8);

  _Block_object_dispose(&a42, 8);
  _Block_object_dispose(&a48, 8);

  _Block_object_dispose((const void *)(v54 - 216), 8);
  _Block_object_dispose((const void *)(v54 - 184), 8);
  _Block_object_dispose((const void *)(v54 - 152), 8);
  _Block_object_dispose((const void *)(v54 - 120), 8);

  _Unwind_Resume(a1);
}

uint64_t __Block_byref_object_copy__38(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void __Block_byref_object_dispose__38(uint64_t a1)
{

}

void sub_1B6E7BF2C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  uint64_t v4;

  CF<opaqueCMSampleBuffer *>::~CF((const void **)(v4 - 128));
  CF<opaqueCMSampleBuffer *>::~CF((const void **)(v4 - 120));

  _Unwind_Resume(a1);
}

void sub_1B6E7C108(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1B6E7C388(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  _Unwind_Resume(a1);
}

void sub_1B6E7C41C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, objc_super a9)
{
  a9.super_class = (Class)VCPVideoTrackStandardDecoder;
  -[_Unwind_Exception dealloc](&a9, sel_dealloc);
  _Unwind_Resume(a1);
}

void sub_1B6E7C67C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1B6E7C9A8(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_1B6E7CD0C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  CVPixelBufferLock::~CVPixelBufferLock((CVPixelBufferLock *)va);
  _Unwind_Resume(a1);
}

void sub_1B6E7D00C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1B6E7D10C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1B6E7D3C0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, _Unwind_Exception *exception_object, void *a12)
{

  _Unwind_Resume(a1);
}

void sub_1B6E7D510(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1B6E7D5F0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void sub_1B6E7D718(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1B6E7D810(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_1B6E7D8C4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void sub_1B6E7DA50(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;

  v5 = v4;

  _Unwind_Resume(a1);
}

void sub_1B6E7DBC4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1B6E7DCB4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1B6E7EC60(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *a19, uint64_t a20,uint64_t a21,void *a22)
{
  void *v22;
  void *v23;
  void *v24;
  void *v25;
  void *v26;
  void *v27;
  void *v28;

  _Unwind_Resume(a1);
}

void sub_1B6E7EFB0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  void *v14;

  _Unwind_Resume(a1);
}

void sub_1B6E7F104(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_1B6E7F1F0(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1B6E7F2FC(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1B6E7F380(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1B6E7F60C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1B6E7F6EC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  void *v14;
  void *v15;

  _Unwind_Resume(a1);
}

void sub_1B6E7FAAC(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void MADPLLogIVSProcessing(void *a1, uint64_t a2, uint64_t a3, double a4)
{
  __CFString *v7;
  void *v8;
  double v9;
  double v10;
  __CFString *v11;
  __CFString *v12;
  void *v13;
  void *v14;
  void *v15;
  void *v16;
  double v17;
  _QWORD v18[5];
  _QWORD v19[5];
  uint8_t buf[4];
  double v21;
  __int16 v22;
  double v23;
  uint64_t v24;

  v24 = *MEMORY[0x1E0C80C00];
  v7 = a1;
  objc_msgSend(MEMORY[0x1E0C99D68], "now");
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v8, "timeIntervalSince1970");
  v10 = v9;

  if (v10 >= a4)
  {
    v11 = &stru_1E6B1C190;
    if (v7)
      v11 = v7;
    v12 = v11;

    objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithDouble:", a4, CFSTR("StartTimestamp"));
    v13 = (void *)objc_claimAutoreleasedReturnValue();
    v19[0] = v13;
    v18[1] = CFSTR("EndTimestamp");
    objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithDouble:", v10);
    v14 = (void *)objc_claimAutoreleasedReturnValue();
    v19[1] = v14;
    v19[2] = v12;
    v18[2] = CFSTR("ClientBundleID");
    v18[3] = CFSTR("IsCacheReused");
    objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithBool:", a2);
    v15 = (void *)objc_claimAutoreleasedReturnValue();
    v19[3] = v15;
    v18[4] = CFSTR("AssetType");
    objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithUnsignedInteger:", a3);
    v16 = (void *)objc_claimAutoreleasedReturnValue();
    v19[4] = v16;
    objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", v19, v18, 5);
    v17 = COERCE_DOUBLE(objc_claimAutoreleasedReturnValue());

    if ((int)MediaAnalysisLogLevel() >= 7 && os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 138412290;
      v21 = v17;
      _os_log_impl(&dword_1B6C4A000, MEMORY[0x1E0C81028], OS_LOG_TYPE_DEBUG, "[IVS] Sending Power Log %@", buf, 0xCu);
    }
    PLLogRegisteredEvent();

    v7 = v12;
  }
  else if ((int)MediaAnalysisLogLevel() >= 3 && os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
  {
    *(_DWORD *)buf = 134218240;
    v21 = a4;
    v22 = 2048;
    v23 = v10;
    _os_log_impl(&dword_1B6C4A000, MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR, "[IVS] Processing start time (%f) > end time (%f), failed to send Power Log", buf, 0x16u);
  }

}

void MADPLLogMomentsDeferredProcessing(uint64_t a1, uint64_t a2, uint64_t a3, double a4)
{
  void *v8;
  double v9;
  double v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  double v16;
  _QWORD v17[5];
  _QWORD v18[5];
  uint8_t buf[4];
  double v20;
  __int16 v21;
  double v22;
  uint64_t v23;

  v23 = *MEMORY[0x1E0C80C00];
  objc_msgSend(MEMORY[0x1E0C99D68], "now");
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v8, "timeIntervalSince1970");
  v10 = v9;

  if (v10 >= a4)
  {
    objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithDouble:", a4, CFSTR("StartTimestamp"));
    v11 = (void *)objc_claimAutoreleasedReturnValue();
    v18[0] = v11;
    v17[1] = CFSTR("EndTimestamp");
    objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithDouble:", v10);
    v12 = (void *)objc_claimAutoreleasedReturnValue();
    v18[1] = v12;
    v17[2] = CFSTR("ProcessingType");
    objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithUnsignedInteger:", a1);
    v13 = (void *)objc_claimAutoreleasedReturnValue();
    v18[2] = v13;
    v17[3] = CFSTR("RequestedAssetCount");
    objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithUnsignedInteger:", a2);
    v14 = (void *)objc_claimAutoreleasedReturnValue();
    v18[3] = v14;
    v17[4] = CFSTR("ProcessedAssetCount");
    objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithUnsignedInteger:", a3);
    v15 = (void *)objc_claimAutoreleasedReturnValue();
    v18[4] = v15;
    objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", v18, v17, 5);
    v16 = COERCE_DOUBLE(objc_claimAutoreleasedReturnValue());

    if ((int)MediaAnalysisLogLevel() >= 7 && os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 138412290;
      v20 = v16;
      _os_log_impl(&dword_1B6C4A000, MEMORY[0x1E0C81028], OS_LOG_TYPE_DEBUG, "[Moments] Sending Power Log %@", buf, 0xCu);
    }
    PLLogRegisteredEvent();

  }
  else if ((int)MediaAnalysisLogLevel() >= 3 && os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
  {
    *(_DWORD *)buf = 134218240;
    v20 = a4;
    v21 = 2048;
    v22 = v10;
    _os_log_impl(&dword_1B6C4A000, MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR, "[Moments] Processing start time (%f) > end time (%f), failed to send Power Log", buf, 0x16u);
  }
}

void MADPLLogStaticStickerCreation(double a1)
{
  void *v2;
  double v3;
  double v4;
  void *v5;
  void *v6;
  double v7;
  _QWORD v8[2];
  _QWORD v9[2];
  uint8_t buf[4];
  double v11;
  __int16 v12;
  double v13;
  uint64_t v14;

  v14 = *MEMORY[0x1E0C80C00];
  objc_msgSend(MEMORY[0x1E0C99D68], "now");
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v2, "timeIntervalSince1970");
  v4 = v3;

  if (v4 >= a1)
  {
    objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithDouble:", a1, CFSTR("StartTimestamp"));
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    v8[1] = CFSTR("EndTimestamp");
    v9[0] = v5;
    objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithDouble:", v4);
    v6 = (void *)objc_claimAutoreleasedReturnValue();
    v9[1] = v6;
    objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", v9, v8, 2);
    v7 = COERCE_DOUBLE(objc_claimAutoreleasedReturnValue());

    if ((int)MediaAnalysisLogLevel() >= 7 && os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 138412290;
      v11 = v7;
      _os_log_impl(&dword_1B6C4A000, MEMORY[0x1E0C81028], OS_LOG_TYPE_DEBUG, "[StaticStickerCreation] Sending Power Log %@", buf, 0xCu);
    }
    PLLogRegisteredEvent();

  }
  else if ((int)MediaAnalysisLogLevel() >= 3 && os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
  {
    *(_DWORD *)buf = 134218240;
    v11 = a1;
    v12 = 2048;
    v13 = v4;
    _os_log_impl(&dword_1B6C4A000, MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR, "[StaticStickerCreation] Processing start time (%f) > end time (%f), failed to send Power Log", buf, 0x16u);
  }
}

void MADPLLogOnDemandStaticStickerScoring(uint64_t a1, double a2)
{
  void *v4;
  double v5;
  double v6;
  void *v7;
  void *v8;
  void *v9;
  double v10;
  _QWORD v11[4];
  _QWORD v12[4];
  uint8_t buf[4];
  double v14;
  __int16 v15;
  double v16;
  uint64_t v17;

  v17 = *MEMORY[0x1E0C80C00];
  objc_msgSend(MEMORY[0x1E0C99D68], "now");
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v4, "timeIntervalSince1970");
  v6 = v5;

  if (v6 >= a2)
  {
    v12[0] = MEMORY[0x1E0C9AAB0];
    objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithDouble:", a2, CFSTR("IsOnDemand"), CFSTR("StartTimestamp"));
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    v12[1] = v7;
    v11[2] = CFSTR("EndTimestamp");
    objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithDouble:", v6);
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    v12[2] = v8;
    v11[3] = CFSTR("ProcessedAssetCount");
    objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithUnsignedInteger:", a1);
    v9 = (void *)objc_claimAutoreleasedReturnValue();
    v12[3] = v9;
    objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", v12, v11, 4);
    v10 = COERCE_DOUBLE(objc_claimAutoreleasedReturnValue());

    if ((int)MediaAnalysisLogLevel() >= 7 && os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 138412290;
      v14 = v10;
      _os_log_impl(&dword_1B6C4A000, MEMORY[0x1E0C81028], OS_LOG_TYPE_DEBUG, "[OnDemandStaticStickerScoring] Sending Power Log %@", buf, 0xCu);
    }
    PLLogRegisteredEvent();

  }
  else if ((int)MediaAnalysisLogLevel() >= 3 && os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
  {
    *(_DWORD *)buf = 134218240;
    v14 = a2;
    v15 = 2048;
    v16 = v6;
    _os_log_impl(&dword_1B6C4A000, MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR, "[OnDemandStaticStickerScoring] Processing start time (%f) > end time (%f), failed to send Power Log", buf, 0x16u);
  }
}

void MADPLLogBackgroundStaticStickerScoring(uint64_t a1, uint64_t a2, uint64_t a3, double a4)
{
  void *v8;
  double v9;
  double v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  double v16;
  _QWORD v17[6];
  _QWORD v18[6];
  uint8_t buf[4];
  double v20;
  __int16 v21;
  double v22;
  uint64_t v23;

  v23 = *MEMORY[0x1E0C80C00];
  objc_msgSend(MEMORY[0x1E0C99D68], "now");
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v8, "timeIntervalSince1970");
  v10 = v9;

  if (v10 >= a4)
  {
    v18[0] = MEMORY[0x1E0C9AAA0];
    objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithDouble:", a4, CFSTR("IsOnDemand"), CFSTR("StartTimestamp"));
    v11 = (void *)objc_claimAutoreleasedReturnValue();
    v18[1] = v11;
    v17[2] = CFSTR("EndTimestamp");
    objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithDouble:", v10);
    v12 = (void *)objc_claimAutoreleasedReturnValue();
    v18[2] = v12;
    v17[3] = CFSTR("ProcessedAssetCount");
    objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithUnsignedInteger:", a1);
    v13 = (void *)objc_claimAutoreleasedReturnValue();
    v18[3] = v13;
    v17[4] = CFSTR("StickerScoringAssetCount");
    objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithUnsignedInteger:", a2);
    v14 = (void *)objc_claimAutoreleasedReturnValue();
    v18[4] = v14;
    v17[5] = CFSTR("VisualSearchAssetCount");
    objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithUnsignedInteger:", a3);
    v15 = (void *)objc_claimAutoreleasedReturnValue();
    v18[5] = v15;
    objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", v18, v17, 6);
    v16 = COERCE_DOUBLE(objc_claimAutoreleasedReturnValue());

    if ((int)MediaAnalysisLogLevel() >= 7 && os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 138412290;
      v20 = v16;
      _os_log_impl(&dword_1B6C4A000, MEMORY[0x1E0C81028], OS_LOG_TYPE_DEBUG, "[BackgroundStaticStickerScoring] Sending Power Log %@", buf, 0xCu);
    }
    PLLogRegisteredEvent();

  }
  else if ((int)MediaAnalysisLogLevel() >= 3 && os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
  {
    *(_DWORD *)buf = 134218240;
    v20 = a4;
    v21 = 2048;
    v22 = v10;
    _os_log_impl(&dword_1B6C4A000, MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR, "[BackgroundStaticStickerScoring] Processing start time (%f) > end time (%f), failed to send Power Log", buf, 0x16u);
  }
}

void MADPLLogAnimatedStickerCreation(uint64_t a1, double a2)
{
  void *v4;
  double v5;
  double v6;
  void *v7;
  void *v8;
  void *v9;
  double v10;
  _QWORD v11[3];
  _QWORD v12[3];
  uint8_t buf[4];
  double v14;
  __int16 v15;
  double v16;
  uint64_t v17;

  v17 = *MEMORY[0x1E0C80C00];
  objc_msgSend(MEMORY[0x1E0C99D68], "now");
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v4, "timeIntervalSince1970");
  v6 = v5;

  if (v6 >= a2)
  {
    objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithDouble:", a2, CFSTR("StartTimestamp"));
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    v12[0] = v7;
    v11[1] = CFSTR("EndTimestamp");
    objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithDouble:", v6);
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    v12[1] = v8;
    v11[2] = CFSTR("ProcessedFrameCount");
    objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithUnsignedInteger:", a1);
    v9 = (void *)objc_claimAutoreleasedReturnValue();
    v12[2] = v9;
    objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", v12, v11, 3);
    v10 = COERCE_DOUBLE(objc_claimAutoreleasedReturnValue());

    if ((int)MediaAnalysisLogLevel() >= 7 && os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 138412290;
      v14 = v10;
      _os_log_impl(&dword_1B6C4A000, MEMORY[0x1E0C81028], OS_LOG_TYPE_DEBUG, "[AnimatedStickerCreation] Sending Power Log %@", buf, 0xCu);
    }
    PLLogRegisteredEvent();

  }
  else if ((int)MediaAnalysisLogLevel() >= 3 && os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
  {
    *(_DWORD *)buf = 134218240;
    v14 = a2;
    v15 = 2048;
    v16 = v6;
    _os_log_impl(&dword_1B6C4A000, MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR, "[AnimatedStickerCreation] Processing start time (%f) > end time (%f), failed to send Power Log", buf, 0x16u);
  }
}

void MADPLLogAnimatedStickerScoring(double a1)
{
  void *v2;
  double v3;
  double v4;
  void *v5;
  void *v6;
  double v7;
  _QWORD v8[2];
  _QWORD v9[2];
  uint8_t buf[4];
  double v11;
  __int16 v12;
  double v13;
  uint64_t v14;

  v14 = *MEMORY[0x1E0C80C00];
  objc_msgSend(MEMORY[0x1E0C99D68], "now");
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v2, "timeIntervalSince1970");
  v4 = v3;

  if (v4 >= a1)
  {
    objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithDouble:", a1, CFSTR("StartTimestamp"));
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    v8[1] = CFSTR("EndTimestamp");
    v9[0] = v5;
    objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithDouble:", v4);
    v6 = (void *)objc_claimAutoreleasedReturnValue();
    v9[1] = v6;
    objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", v9, v8, 2);
    v7 = COERCE_DOUBLE(objc_claimAutoreleasedReturnValue());

    if ((int)MediaAnalysisLogLevel() >= 7 && os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 138412290;
      v11 = v7;
      _os_log_impl(&dword_1B6C4A000, MEMORY[0x1E0C81028], OS_LOG_TYPE_DEBUG, "[AnimatedStickerScoring] Sending Power Log %@", buf, 0xCu);
    }
    PLLogRegisteredEvent();

  }
  else if ((int)MediaAnalysisLogLevel() >= 3 && os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
  {
    *(_DWORD *)buf = 134218240;
    v11 = a1;
    v12 = 2048;
    v13 = v4;
    _os_log_impl(&dword_1B6C4A000, MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR, "[AnimatedStickerScoring] Processing start time (%f) > end time (%f), failed to send Power Log", buf, 0x16u);
  }
}

uint64_t VCPProtoMovieTorsoResultReadFrom(uint64_t a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  int v15;
  unint64_t v17;
  char v18;
  unsigned int v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  char v23;
  VCPProtoTimeRange *v24;
  uint64_t result;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) < *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
  {
    v7 = (int *)MEMORY[0x1E0D82BB8];
    do
    {
      if (*(_BYTE *)(a2 + *v5))
        return *(_BYTE *)(a2 + *v5) == 0;
      v8 = 0;
      v9 = 0;
      v10 = 0;
      while (1)
      {
        v11 = *v3;
        v12 = *(_QWORD *)(a2 + v11);
        if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
          break;
        v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
        *(_QWORD *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0)
          goto LABEL_12;
        v8 += 7;
        v14 = v9++ >= 9;
        if (v14)
        {
          v10 = 0;
          v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
      v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(_BYTE *)(a2 + *v5))
        v10 = 0;
LABEL_14:
      if (v15 || (v10 & 7) == 4)
        return *(_BYTE *)(a2 + *v5) == 0;
      v17 = v10 >> 3;
      if ((v10 >> 3) == 1)
      {
        v24 = objc_alloc_init(VCPProtoTimeRange);
        objc_storeStrong((id *)(a1 + 24), v24);
        if (!PBReaderPlaceMark() || !VCPProtoTimeRangeReadFrom((uint64_t)v24, a2))
        {
LABEL_42:

          return 0;
        }
      }
      else
      {
        if ((_DWORD)v17 != 2)
        {
          if ((_DWORD)v17 == 3)
          {
            v18 = 0;
            v19 = 0;
            v20 = 0;
            while (1)
            {
              v21 = *v3;
              v22 = *(_QWORD *)(a2 + v21);
              if (v22 == -1 || v22 >= *(_QWORD *)(a2 + *v4))
                break;
              v23 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v22);
              *(_QWORD *)(a2 + v21) = v22 + 1;
              v20 |= (unint64_t)(v23 & 0x7F) << v18;
              if ((v23 & 0x80) == 0)
                goto LABEL_37;
              v18 += 7;
              v14 = v19++ >= 9;
              if (v14)
              {
                LODWORD(v20) = 0;
                goto LABEL_39;
              }
            }
            *(_BYTE *)(a2 + *v5) = 1;
LABEL_37:
            if (*(_BYTE *)(a2 + *v5))
              LODWORD(v20) = 0;
LABEL_39:
            *(_DWORD *)(a1 + 16) = v20;
          }
          else
          {
            result = PBReaderSkipValueWithTag();
            if (!(_DWORD)result)
              return result;
          }
          continue;
        }
        v24 = objc_alloc_init(VCPProtoBounds);
        objc_storeStrong((id *)(a1 + 8), v24);
        if (!PBReaderPlaceMark() || !VCPProtoBoundsReadFrom((uint64_t)v24, a2))
          goto LABEL_42;
      }
      PBReaderRecallMark();

    }
    while (*(_QWORD *)(a2 + *v3) < *(_QWORD *)(a2 + *v4));
  }
  return *(_BYTE *)(a2 + *v5) == 0;
}

__n128 ma::Frame::Initialize(ma::Frame *this, CMTime *a2, CMTime *a3, CVPixelBufferRef pixelBuffer, int a5)
{
  __n128 result;
  __int128 v9;
  __int128 v10;

  if (!a5 || !ma::Histogram::Initialize((ma::Frame *)((char *)this + 360), pixelBuffer, 0))
  {
    ma::MotionResult::Reset((ma::Frame *)((char *)this + 128));
    v9 = *(_OWORD *)&a2->value;
    *(_QWORD *)((char *)this + 20) = a2->epoch;
    *(_OWORD *)((char *)this + 4) = v9;
    v10 = *(_OWORD *)&a3->value;
    *(_QWORD *)((char *)this + 44) = a3->epoch;
    *(_OWORD *)((char *)this + 28) = v10;
    result = *(__n128 *)&a3->value;
    *(_QWORD *)((char *)this + 292) = a3->epoch;
    *(__n128 *)((char *)this + 276) = result;
  }
  return result;
}

void sub_1B6E81748(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_1B6E8187C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1B6E819AC(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

uint64_t VCPProtoFilesystemMovieClassificationResultReadFrom(uint64_t a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  char v14;
  BOOL v15;
  uint64_t v16;
  int v17;
  int v18;
  unint64_t v20;
  uint64_t v21;
  unint64_t v22;
  int v23;
  uint64_t result;
  char v25;
  unsigned int v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  char v31;
  uint64_t v32;
  unint64_t v33;
  char v34;
  unsigned int v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  unint64_t v39;
  char v40;
  uint64_t v41;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) < *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
  {
    v7 = (int *)MEMORY[0x1E0D82BB8];
    while (1)
    {
      if (*(_BYTE *)(a2 + *v5))
        return *(_BYTE *)(a2 + *v5) == 0;
      v8 = 0;
      v9 = 0;
      v10 = 0;
      while (1)
      {
        v11 = *v3;
        v12 = *(_QWORD *)(a2 + v11);
        v13 = v12 + 1;
        if (v12 == -1 || v13 > *(_QWORD *)(a2 + *v4))
          break;
        v14 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
        *(_QWORD *)(a2 + v11) = v13;
        v10 |= (unint64_t)(v14 & 0x7F) << v8;
        if ((v14 & 0x80) == 0)
          goto LABEL_12;
        v8 += 7;
        v15 = v9++ >= 9;
        if (v15)
        {
          v10 = 0;
          v16 = *v5;
          v17 = *(unsigned __int8 *)(a2 + v16);
          goto LABEL_14;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
      v16 = *v5;
      v17 = *(unsigned __int8 *)(a2 + v16);
      if (*(_BYTE *)(a2 + v16))
        v10 = 0;
LABEL_14:
      v18 = v10 & 7;
      if (v17 || v18 == 4)
        return *(_BYTE *)(a2 + *v5) == 0;
      v20 = v10 >> 3;
      if ((v10 >> 3) == 3)
      {
        if (v18 == 2)
        {
          result = PBReaderPlaceMark();
          if (!(_DWORD)result)
            return result;
          while (*(_QWORD *)(a2 + *v3) < *(_QWORD *)(a2 + *v4) && !*(_BYTE *)(a2 + *v5))
          {
            v25 = 0;
            v26 = 0;
            v27 = 0;
            while (1)
            {
              v28 = *v3;
              v29 = *(_QWORD *)(a2 + v28);
              v30 = v29 + 1;
              if (v29 == -1 || v30 > *(_QWORD *)(a2 + *v4))
                break;
              v31 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v29);
              *(_QWORD *)(a2 + v28) = v30;
              v27 |= (unint64_t)(v31 & 0x7F) << v25;
              if (v31 < 0)
              {
                v25 += 7;
                v15 = v26++ >= 9;
                if (!v15)
                  continue;
              }
              goto LABEL_36;
            }
            *(_BYTE *)(a2 + *v5) = 1;
LABEL_36:
            PBRepeatedUInt32Add();
          }
          PBReaderRecallMark();
        }
        else
        {
          v34 = 0;
          v35 = 0;
          v36 = 0;
          while (1)
          {
            v37 = *v3;
            v38 = *(_QWORD *)(a2 + v37);
            v39 = v38 + 1;
            if (v38 == -1 || v39 > *(_QWORD *)(a2 + *v4))
              break;
            v40 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v38);
            *(_QWORD *)(a2 + v37) = v39;
            v36 |= (unint64_t)(v40 & 0x7F) << v34;
            if (v40 < 0)
            {
              v34 += 7;
              v15 = v35++ >= 9;
              if (!v15)
                continue;
            }
            goto LABEL_51;
          }
          *(_BYTE *)(a2 + *v5) = 1;
LABEL_51:
          PBRepeatedUInt32Add();
        }
        goto LABEL_57;
      }
      if ((_DWORD)v20 == 2)
        break;
      if ((_DWORD)v20 == 1)
      {
        v21 = *v3;
        v22 = *(_QWORD *)(a2 + v21);
        if (v22 <= 0xFFFFFFFFFFFFFFFBLL && v22 + 4 <= *(_QWORD *)(a2 + *v4))
        {
          v23 = *(_DWORD *)(*(_QWORD *)(a2 + *v7) + v22);
          *(_QWORD *)(a2 + v21) = v22 + 4;
        }
        else
        {
          *(_BYTE *)(a2 + v16) = 1;
          v23 = 0;
        }
        v41 = 36;
LABEL_56:
        *(_DWORD *)(a1 + v41) = v23;
        goto LABEL_57;
      }
      if ((PBReaderSkipValueWithTag() & 1) == 0)
        return 0;
LABEL_57:
      if (*(_QWORD *)(a2 + *v3) >= *(_QWORD *)(a2 + *v4))
        return *(_BYTE *)(a2 + *v5) == 0;
    }
    v32 = *v3;
    v33 = *(_QWORD *)(a2 + v32);
    if (v33 <= 0xFFFFFFFFFFFFFFFBLL && v33 + 4 <= *(_QWORD *)(a2 + *v4))
    {
      v23 = *(_DWORD *)(*(_QWORD *)(a2 + *v7) + v33);
      *(_QWORD *)(a2 + v32) = v33 + 4;
    }
    else
    {
      *(_BYTE *)(a2 + v16) = 1;
      v23 = 0;
    }
    v41 = 32;
    goto LABEL_56;
  }
  return *(_BYTE *)(a2 + *v5) == 0;
}

uint64_t VCPHumanGetflagsFromKeypoints(uint64_t *a1, float a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  unsigned __int8 v6;
  int v7;
  int v8;
  int v9;
  unsigned int v10;
  unint64_t v11;
  unsigned int v12;
  unsigned int v13;
  int v14;
  int v15;
  int v16;
  BOOL v17;
  int v18;
  int v19;
  BOOL v20;

  v3 = *a1;
  v2 = a1[1];
  v4 = v2 - *a1;
  if (v2 == *a1)
  {
    v10 = 0;
    v9 = 0;
    v8 = 0;
    v7 = 0;
    v6 = 0;
  }
  else
  {
    v5 = 0;
    v6 = 0;
    v7 = 0;
    v8 = 0;
    v9 = 0;
    v10 = 0;
    v11 = v4 / 24;
    if (v11 <= 1)
      v11 = 1;
    v12 = -13;
    do
    {
      if (*(float *)(*(_QWORD *)v3 + 8) > a2)
      {
        v13 = v12 + 8;
        v14 = v10 | 0x800000;
        if (v12 >= 2)
          v14 = v10;
        if (v12 + 6 <= 1)
          v15 = v10 | 0x400000;
        else
          v15 = v14;
        if (v12 < 0xFFFFFFFE)
        {
          v16 = v7;
        }
        else
        {
          v15 = v10;
          v16 = v7 + 1;
        }
        v17 = v13 > 1;
        if (v13 <= 1)
          v18 = v10;
        else
          v18 = v15;
        if (v17)
          v19 = v8;
        else
          v19 = v8 + 1;
        if (!v17)
          v16 = v7;
        if (v5 <= 4)
          ++v9;
        else
          v10 = v18;
        if (v5 <= 4)
        {
          v6 |= v5 < 3;
        }
        else
        {
          v8 = v19;
          v7 = v16;
        }
      }
      ++v5;
      ++v12;
      v3 += 24;
    }
    while (v11 != v5);
  }
  if ((v6 & (v9 > 2)) != 0)
    v10 |= 0x100000u;
  if (v7)
    v20 = v8 == 0;
  else
    v20 = 1;
  if (v20)
    return v10;
  else
    return v10 | 0x200000;
}

void sub_1B6E827D0(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1B6E82900(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, objc_super a9)
{
  a9.super_class = (Class)VCPMotionFlowSubtleMotionAnalyzer;
  -[_Unwind_Exception dealloc](&a9, sel_dealloc);
  _Unwind_Resume(a1);
}

void sub_1B6E82C54(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1B6E82E60(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  CVPixelBufferLock::~CVPixelBufferLock((CVPixelBufferLock *)va);
  _Unwind_Resume(a1);
}

void sub_1B6E82F5C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1B6E835E0(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1B6E83A58(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *__p,uint64_t a21)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_1B6E83C30(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

float *std::__introsort<std::_ClassicAlgPolicy,std::greater<float> &,float *,false>(float *result, float *a2, uint64_t a3, uint64_t a4, char a5)
{
  float *v8;
  float *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  float *v15;
  float v16;
  float *v17;
  char v18;
  BOOL v19;
  float v20;
  float v21;
  float v22;
  float v23;
  int v24;
  float v25;
  float v26;
  float v27;
  int v28;
  float v29;
  float v30;
  int v31;
  float v32;
  float v33;
  float v34;
  float v35;
  float v36;
  float v37;
  float v38;
  float v39;
  float v40;
  int v41;
  float v42;
  int v43;
  float v44;
  float v45;
  int v46;
  float v47;
  float v48;
  float v49;
  float v50;
  int v51;
  float v52;
  float v53;
  float v54;
  int v55;
  float v56;
  float v57;
  float v58;
  float v59;
  float v60;
  float *v61;
  BOOL v63;
  uint64_t v64;
  float *v65;
  float v66;
  float v67;
  uint64_t v68;
  float *v69;
  float v70;
  float v71;
  float *v72;

  v8 = result;
LABEL_2:
  v9 = v8;
LABEL_3:
  v10 = 1 - a4;
  while (2)
  {
    v8 = v9;
    v11 = v10;
    v12 = (char *)a2 - (char *)v9;
    v13 = a2 - v9;
    switch(v13)
    {
      case 0uLL:
      case 1uLL:
        return result;
      case 2uLL:
        v20 = *(a2 - 1);
        v21 = *v9;
        if (v20 > *v9)
        {
          *v9 = v20;
          *(a2 - 1) = v21;
        }
        return result;
      case 3uLL:
        v22 = v9[1];
        v23 = *(a2 - 1);
        if (v22 <= v23)
          v24 = *((_DWORD *)a2 - 1);
        else
          v24 = *((_DWORD *)v9 + 1);
        if (v22 > v23)
          v22 = *(a2 - 1);
        *(a2 - 1) = v22;
        *((_DWORD *)v9 + 1) = v24;
        v25 = *(a2 - 1);
        if (v25 <= *v9)
          v26 = *v9;
        else
          v26 = *(a2 - 1);
        if (v25 > *v9)
          v25 = *v9;
        *(a2 - 1) = v25;
        v28 = *(_DWORD *)v9;
        v27 = v9[1];
        if (v26 <= v27)
        {
          v28 = *((_DWORD *)v9 + 1);
          v27 = v26;
        }
        *(_DWORD *)v9 = v28;
        v9[1] = v27;
        return result;
      case 4uLL:
        v30 = v9[1];
        v29 = v9[2];
        if (*v9 <= v29)
          v31 = *((_DWORD *)v9 + 2);
        else
          v31 = *(_DWORD *)v9;
        if (*v9 <= v29)
          v29 = *v9;
        v9[2] = v29;
        *(_DWORD *)v9 = v31;
        v32 = *(a2 - 1);
        if (v30 <= v32)
          v33 = *(a2 - 1);
        else
          v33 = v30;
        if (v30 <= v32)
          v32 = v30;
        *(a2 - 1) = v32;
        v34 = *v9;
        if (*v9 <= v33)
          v35 = v33;
        else
          v35 = *v9;
        if (*v9 > v33)
          v34 = v33;
        *v9 = v35;
        v9[1] = v34;
        v36 = v9[2];
        v37 = *(a2 - 1);
        if (v36 <= v37)
          v38 = *(a2 - 1);
        else
          v38 = v9[2];
        if (v36 > v37)
          v36 = *(a2 - 1);
        *(a2 - 1) = v36;
        v39 = v9[1];
        if (v39 <= v38)
          v40 = v38;
        else
          v40 = v9[1];
        if (v39 > v38)
          v39 = v38;
        v9[1] = v40;
        v9[2] = v39;
        return result;
      case 5uLL:
        v41 = *(_DWORD *)v9;
        v42 = v9[1];
        if (*v9 <= v42)
          v43 = *((_DWORD *)v9 + 1);
        else
          v43 = *(_DWORD *)v9;
        if (*v9 > v42)
          v41 = *((_DWORD *)v9 + 1);
        *(_DWORD *)v9 = v43;
        *((_DWORD *)v9 + 1) = v41;
        v44 = v9[3];
        v45 = *(a2 - 1);
        if (v44 <= v45)
          v46 = *((_DWORD *)a2 - 1);
        else
          v46 = *((_DWORD *)v9 + 3);
        if (v44 > v45)
          v44 = *(a2 - 1);
        *(a2 - 1) = v44;
        *((_DWORD *)v9 + 3) = v46;
        v47 = *(a2 - 1);
        v48 = v9[2];
        if (v47 <= v48)
          v49 = v9[2];
        else
          v49 = *(a2 - 1);
        if (v47 > v48)
          v47 = v9[2];
        *(a2 - 1) = v47;
        v51 = *((_DWORD *)v9 + 2);
        v50 = v9[3];
        v52 = v9[1];
        if (v49 <= v50)
        {
          v51 = *((_DWORD *)v9 + 3);
          v50 = v49;
        }
        *((_DWORD *)v9 + 2) = v51;
        v9[3] = v50;
        v53 = *(a2 - 1);
        if (v52 <= v53)
          v54 = *(a2 - 1);
        else
          v54 = v52;
        if (v52 <= v53)
          v53 = v52;
        *(a2 - 1) = v53;
        v55 = *(_DWORD *)v9;
        v57 = v9[2];
        v56 = v9[3];
        if (v56 <= *v9)
          v58 = *v9;
        else
          v58 = v9[3];
        if (v56 > *v9)
          v56 = *v9;
        if (v58 <= v57)
        {
          v55 = *((_DWORD *)v9 + 2);
          v57 = v58;
        }
        if (v56 <= v54)
          v59 = v54;
        else
          v59 = v56;
        if (v56 > v54)
          v56 = v54;
        if (v59 <= v57)
          v54 = v57;
        *(_DWORD *)v9 = v55;
        v9[1] = v54;
        if (v59 <= v57)
          v60 = v59;
        else
          v60 = v57;
        v9[2] = v60;
        v9[3] = v56;
        return result;
      default:
        if (v12 > 95)
        {
          if (v11 == 1)
          {
            if (v9 != a2)
              return std::__partial_sort_impl[abi:ne180100]<std::_ClassicAlgPolicy,std::greater<float> &,float *,float *>(v9, a2, a2, a3);
            return result;
          }
          v14 = v13 >> 1;
          v15 = &v9[v13 >> 1];
          if ((unint64_t)v12 < 0x201)
          {
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::greater<float> &,float *>(&v9[v13 >> 1], v9, a2 - 1);
            if ((a5 & 1) != 0)
              goto LABEL_12;
          }
          else
          {
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::greater<float> &,float *>(v9, &v9[v13 >> 1], a2 - 1);
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::greater<float> &,float *>(v9 + 1, v15 - 1, a2 - 2);
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::greater<float> &,float *>(v9 + 2, &v9[v14 + 1], a2 - 3);
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::greater<float> &,float *>(v15 - 1, v15, &v9[v14 + 1]);
            v16 = *v9;
            *v9 = *v15;
            *v15 = v16;
            if ((a5 & 1) != 0)
              goto LABEL_12;
          }
          if (*(v9 - 1) <= *v9)
          {
            result = std::__partition_with_equals_on_left[abi:ne180100]<std::_ClassicAlgPolicy,float *,std::greater<float> &>(v9, a2);
            v9 = result;
            goto LABEL_17;
          }
LABEL_12:
          v17 = std::__partition_with_equals_on_right[abi:ne180100]<std::_ClassicAlgPolicy,float *,std::greater<float> &>(v9, a2);
          if ((v18 & 1) == 0)
            goto LABEL_15;
          v19 = std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,std::greater<float> &,float *>(v9, v17);
          v9 = v17 + 1;
          result = (float *)std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,std::greater<float> &,float *>(v17 + 1, a2);
          if (!(_DWORD)result)
          {
            v10 = v11 + 1;
            if (v19)
              continue;
LABEL_15:
            result = (float *)std::__introsort<std::_ClassicAlgPolicy,std::greater<float> &,float *,false>(v8, v17, a3, -v11, a5 & 1);
            v9 = v17 + 1;
LABEL_17:
            a5 = 0;
            a4 = -v11;
            goto LABEL_3;
          }
          a4 = -v11;
          a2 = v17;
          if (v19)
            return result;
          goto LABEL_2;
        }
        v61 = v9 + 1;
        v63 = v9 == a2 || v61 == a2;
        if ((a5 & 1) != 0)
        {
          if (!v63)
          {
            v64 = 0;
            v65 = v9;
            do
            {
              v67 = *v65;
              v66 = v65[1];
              v65 = v61;
              if (v66 > v67)
              {
                v68 = v64;
                while (1)
                {
                  *(float *)((char *)v9 + v68 + 4) = v67;
                  if (!v68)
                    break;
                  v67 = *(float *)((char *)v9 + v68 - 4);
                  v68 -= 4;
                  if (v66 <= v67)
                  {
                    v69 = (float *)((char *)v9 + v68 + 4);
                    goto LABEL_117;
                  }
                }
                v69 = v9;
LABEL_117:
                *v69 = v66;
              }
              v61 = v65 + 1;
              v64 += 4;
            }
            while (v65 + 1 != a2);
          }
        }
        else if (!v63)
        {
          do
          {
            v71 = *v8;
            v70 = v8[1];
            v8 = v61;
            if (v70 > v71)
            {
              v72 = v61;
              do
              {
                *v72 = v71;
                v71 = *(v72 - 2);
                --v72;
              }
              while (v70 > v71);
              *v72 = v70;
            }
            ++v61;
          }
          while (v8 + 1 != a2);
        }
        return result;
    }
  }
}

uint64_t std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::greater<float> &,float *>(float *a1, float *a2, float *a3)
{
  float v3;
  float v4;
  float v5;
  float v6;

  v3 = *a2;
  v4 = *a1;
  v5 = *a3;
  if (*a2 > *a1)
  {
    if (v5 > v3)
    {
      *a1 = v5;
      *a3 = v4;
      return 1;
    }
    *a1 = v3;
    *a2 = v4;
    if (*a3 <= v4)
      return 1;
    *a2 = *a3;
    *a3 = v4;
    return 2;
  }
  if (v5 > v3)
  {
    *a2 = v5;
    *a3 = v3;
    v6 = *a1;
    if (*a2 <= *a1)
      return 1;
    *a1 = *a2;
    *a2 = v6;
    return 2;
  }
  return 0;
}

float *std::__partition_with_equals_on_left[abi:ne180100]<std::_ClassicAlgPolicy,float *,std::greater<float> &>(float *a1, float *a2)
{
  float v2;
  float *v3;
  float v4;
  float *v5;
  float v6;
  float v7;
  float v8;
  float v9;
  float v10;

  v2 = *a1;
  if (*a1 <= *(a2 - 1))
  {
    v5 = a1 + 1;
    do
    {
      v3 = v5;
      if (v5 >= a2)
        break;
      ++v5;
    }
    while (v2 <= *v3);
  }
  else
  {
    v3 = a1;
    do
    {
      v4 = v3[1];
      ++v3;
    }
    while (v2 <= v4);
  }
  if (v3 < a2)
  {
    do
      v6 = *--a2;
    while (v2 > v6);
  }
  if (v3 < a2)
  {
    v7 = *v3;
    v8 = *a2;
    do
    {
      *v3 = v8;
      *a2 = v7;
      do
      {
        v9 = v3[1];
        ++v3;
        v7 = v9;
      }
      while (v2 <= v9);
      do
      {
        v10 = *--a2;
        v8 = v10;
      }
      while (v2 > v10);
    }
    while (v3 < a2);
  }
  if (v3 - 1 != a1)
    *a1 = *(v3 - 1);
  *(v3 - 1) = v2;
  return v3;
}

float *std::__partition_with_equals_on_right[abi:ne180100]<std::_ClassicAlgPolicy,float *,std::greater<float> &>(float *a1, float *a2)
{
  uint64_t v2;
  float v3;
  float v4;
  float *v5;
  float *v6;
  float v7;
  float v8;
  float v9;
  float *v10;
  float *v11;
  float v12;
  float v13;

  v2 = 0;
  v3 = *a1;
  do
    v4 = a1[++v2];
  while (v4 > v3);
  v5 = &a1[v2];
  v6 = &a1[v2 - 1];
  if (v2 == 1)
  {
    do
    {
      if (v5 >= a2)
        break;
      v8 = *--a2;
    }
    while (v8 <= v3);
  }
  else
  {
    do
      v7 = *--a2;
    while (v7 <= v3);
  }
  if (v5 < a2)
  {
    v9 = *a2;
    v10 = &a1[v2];
    v11 = a2;
    do
    {
      *v10 = v9;
      *v11 = v4;
      do
      {
        v12 = v10[1];
        ++v10;
        v4 = v12;
      }
      while (v12 > v3);
      do
      {
        v13 = *--v11;
        v9 = v13;
      }
      while (v13 <= v3);
    }
    while (v10 < v11);
    v6 = v10 - 1;
  }
  if (v6 != a1)
    *a1 = *v6;
  *v6 = v3;
  return v6;
}

BOOL std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,std::greater<float> &,float *>(float *a1, float *a2)
{
  _BOOL8 v2;
  float v3;
  float v4;
  float *v5;
  float v6;
  float v7;
  float v8;
  float v9;
  float v10;
  float v11;
  float *v12;
  int v13;
  uint64_t v14;
  float v15;
  float v16;
  uint64_t v17;
  uint64_t v18;
  float *v19;
  float v20;
  float v21;
  int v22;
  float v23;
  float v24;
  float v25;
  float v26;
  float v27;
  float v28;
  float v29;
  float v30;
  float v31;
  int v32;
  float v33;
  float v34;
  float v35;
  float v36;
  int v37;
  float v38;
  float v39;
  float v40;
  float v41;
  float v42;
  float v43;
  float v44;
  float v45;
  float v46;
  float v47;
  float v48;
  float v49;
  float v50;
  float v51;
  float v52;
  float v53;
  float v54;
  float v55;
  float v56;
  float v57;
  float v58;

  v2 = 1;
  switch(a2 - a1)
  {
    case 0:
    case 1:
      return v2;
    case 2:
      v3 = *(a2 - 1);
      v4 = *a1;
      if (v3 > *a1)
      {
        *a1 = v3;
        *(a2 - 1) = v4;
      }
      break;
    case 3:
      v20 = a1[1];
      v21 = *(a2 - 1);
      if (v20 <= v21)
        v22 = *((_DWORD *)a2 - 1);
      else
        v22 = *((_DWORD *)a1 + 1);
      if (v20 > v21)
        v20 = *(a2 - 1);
      *(a2 - 1) = v20;
      *((_DWORD *)a1 + 1) = v22;
      v23 = *(a2 - 1);
      if (v23 <= *a1)
        v24 = *a1;
      else
        v24 = *(a2 - 1);
      if (v23 > *a1)
        v23 = *a1;
      *(a2 - 1) = v23;
      v26 = *a1;
      v25 = a1[1];
      if (v24 <= v25)
      {
        v26 = a1[1];
        v25 = v24;
      }
      *a1 = v26;
      a1[1] = v25;
      break;
    case 4:
      v48 = a1[1];
      v47 = a1[2];
      if (*a1 <= v47)
        v49 = a1[2];
      else
        v49 = *a1;
      if (*a1 <= v47)
        v47 = *a1;
      a1[2] = v47;
      *a1 = v49;
      v50 = *(a2 - 1);
      if (v48 <= v50)
        v51 = *(a2 - 1);
      else
        v51 = v48;
      if (v48 <= v50)
        v50 = v48;
      *(a2 - 1) = v50;
      v52 = *a1;
      if (*a1 <= v51)
        v53 = v51;
      else
        v53 = *a1;
      if (*a1 > v51)
        v52 = v51;
      *a1 = v53;
      a1[1] = v52;
      v54 = a1[2];
      v55 = *(a2 - 1);
      if (v54 <= v55)
        v56 = *(a2 - 1);
      else
        v56 = a1[2];
      if (v54 > v55)
        v54 = *(a2 - 1);
      *(a2 - 1) = v54;
      v57 = a1[1];
      if (v57 <= v56)
        v58 = v56;
      else
        v58 = a1[1];
      if (v57 > v56)
        v57 = v56;
      a1[1] = v58;
      a1[2] = v57;
      break;
    case 5:
      v27 = *a1;
      v28 = a1[1];
      if (*a1 <= v28)
        v29 = a1[1];
      else
        v29 = *a1;
      if (*a1 > v28)
        v27 = a1[1];
      *a1 = v29;
      a1[1] = v27;
      v30 = a1[3];
      v31 = *(a2 - 1);
      if (v30 <= v31)
        v32 = *((_DWORD *)a2 - 1);
      else
        v32 = *((_DWORD *)a1 + 3);
      if (v30 > v31)
        v30 = *(a2 - 1);
      *(a2 - 1) = v30;
      *((_DWORD *)a1 + 3) = v32;
      v33 = *(a2 - 1);
      v34 = a1[2];
      if (v33 <= v34)
        v35 = a1[2];
      else
        v35 = *(a2 - 1);
      if (v33 > v34)
        v33 = a1[2];
      *(a2 - 1) = v33;
      v37 = *((_DWORD *)a1 + 2);
      v36 = a1[3];
      v38 = a1[1];
      if (v35 <= v36)
      {
        v37 = *((_DWORD *)a1 + 3);
        v36 = v35;
      }
      *((_DWORD *)a1 + 2) = v37;
      a1[3] = v36;
      v39 = *(a2 - 1);
      if (v38 <= v39)
        v40 = *(a2 - 1);
      else
        v40 = v38;
      if (v38 <= v39)
        v39 = v38;
      *(a2 - 1) = v39;
      v41 = *a1;
      v43 = a1[2];
      v42 = a1[3];
      if (v42 <= *a1)
        v44 = *a1;
      else
        v44 = a1[3];
      if (v42 > *a1)
        v42 = *a1;
      if (v44 <= v43)
      {
        v41 = a1[2];
        v43 = v44;
      }
      if (v42 <= v40)
        v45 = v40;
      else
        v45 = v42;
      if (v42 > v40)
        v42 = v40;
      if (v45 <= v43)
        v40 = v43;
      *a1 = v41;
      a1[1] = v40;
      if (v45 <= v43)
        v46 = v45;
      else
        v46 = v43;
      a1[2] = v46;
      a1[3] = v42;
      break;
    default:
      v5 = a1 + 2;
      v6 = a1[2];
      v8 = *a1;
      v7 = a1[1];
      if (v7 <= v6)
        v9 = a1[2];
      else
        v9 = a1[1];
      if (v7 <= v6)
        v6 = a1[1];
      if (v6 <= v8)
        v10 = *a1;
      else
        v10 = v6;
      if (v6 > v8)
        v6 = *a1;
      *v5 = v6;
      if (v10 <= v9)
        v11 = v9;
      else
        v11 = v8;
      if (v10 > v9)
        v10 = v9;
      *a1 = v11;
      a1[1] = v10;
      v12 = a1 + 3;
      if (a1 + 3 == a2)
      {
LABEL_29:
        v2 = 1;
      }
      else
      {
        v13 = 0;
        v14 = 12;
        while (1)
        {
          v15 = *v12;
          v16 = *v5;
          if (*v12 > *v5)
          {
            v17 = v14;
            while (1)
            {
              *(float *)((char *)a1 + v17) = v16;
              v18 = v17 - 4;
              if (v17 == 4)
                break;
              v16 = *(float *)((char *)a1 + v17 - 8);
              v17 -= 4;
              if (v15 <= v16)
              {
                v19 = (float *)((char *)a1 + v18);
                goto LABEL_27;
              }
            }
            v19 = a1;
LABEL_27:
            *v19 = v15;
            if (++v13 == 8)
              break;
          }
          v5 = v12;
          v14 += 4;
          if (++v12 == a2)
            goto LABEL_29;
        }
        v2 = v12 + 1 == a2;
      }
      break;
  }
  return v2;
}

float *std::__partial_sort_impl[abi:ne180100]<std::_ClassicAlgPolicy,std::greater<float> &,float *,float *>(float *a1, float *a2, float *a3, uint64_t a4)
{
  float *v6;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  float *v12;
  float *v13;
  float *v14;
  float v15;
  uint64_t v16;
  uint64_t v17;
  float v18;
  float *v19;
  float *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  float *v25;
  float v26;

  if (a1 != a2)
  {
    v6 = a2;
    v8 = (char *)a2 - (char *)a1;
    v9 = a2 - a1;
    if ((char *)a2 - (char *)a1 >= 5)
    {
      v10 = (unint64_t)(v9 - 2) >> 1;
      v11 = v10 + 1;
      v12 = &a1[v10];
      do
      {
        std::__sift_down[abi:ne180100]<std::_ClassicAlgPolicy,std::greater<float> &,float *>((uint64_t)a1, a4, v9, v12--);
        --v11;
      }
      while (v11);
    }
    v13 = v6;
    if (v6 != a3)
    {
      v14 = v6;
      do
      {
        v15 = *v14;
        if (*v14 > *a1)
        {
          *v14 = *a1;
          *a1 = v15;
          std::__sift_down[abi:ne180100]<std::_ClassicAlgPolicy,std::greater<float> &,float *>((uint64_t)a1, a4, v9, a1);
        }
        ++v14;
      }
      while (v14 != a3);
      v13 = a3;
    }
    if (v8 >= 5)
    {
      v16 = (unint64_t)v8 >> 2;
      do
      {
        v17 = 0;
        v18 = *a1;
        v19 = a1;
        do
        {
          v20 = v19;
          v19 += v17 + 1;
          v21 = 2 * v17;
          v17 = (2 * v17) | 1;
          v22 = v21 + 2;
          if (v22 < v16 && *v19 > v19[1])
          {
            ++v19;
            v17 = v22;
          }
          *v20 = *v19;
        }
        while (v17 <= (uint64_t)((unint64_t)(v16 - 2) >> 1));
        if (v19 != --v6)
        {
          *v19 = *v6;
          *v6 = v18;
          v23 = (char *)v19 - (char *)a1 + 4;
          if (v23 < 5)
            continue;
          v24 = (((unint64_t)v23 >> 2) - 2) >> 1;
          v25 = &a1[v24];
          v26 = *v25;
          v18 = *v19;
          if (*v25 <= *v19)
            continue;
          do
          {
            *v19 = v26;
            v19 = v25;
            if (!v24)
              break;
            v24 = (v24 - 1) >> 1;
            v25 = &a1[v24];
            v26 = *v25;
          }
          while (*v25 > v18);
        }
        *v19 = v18;
      }
      while (v16-- > 2);
    }
    return v13;
  }
  return a3;
}

uint64_t std::__sift_down[abi:ne180100]<std::_ClassicAlgPolicy,std::greater<float> &,float *>(uint64_t result, uint64_t a2, uint64_t a3, float *a4)
{
  uint64_t v4;
  int64_t v5;
  uint64_t v6;
  uint64_t v7;
  float *v8;
  uint64_t v9;
  float v10;
  float v11;
  uint64_t v12;
  uint64_t v13;

  if (a3 >= 2)
  {
    v4 = (uint64_t)a4 - result;
    v5 = (unint64_t)(a3 - 2) >> 1;
    if (v5 >= ((uint64_t)a4 - result) >> 2)
    {
      v6 = v4 >> 1;
      v7 = (v4 >> 1) + 1;
      v8 = (float *)(result + 4 * v7);
      v9 = v6 + 2;
      if (v9 < a3 && *v8 > v8[1])
      {
        ++v8;
        v7 = v9;
      }
      v10 = *v8;
      v11 = *a4;
      if (*v8 <= *a4)
      {
        do
        {
          *a4 = v10;
          a4 = v8;
          if (v5 < v7)
            break;
          v12 = 2 * v7;
          v7 = (2 * v7) | 1;
          v8 = (float *)(result + 4 * v7);
          v13 = v12 + 2;
          if (v13 < a3 && *v8 > v8[1])
          {
            ++v8;
            v7 = v13;
          }
          v10 = *v8;
        }
        while (*v8 <= v11);
        *a4 = v11;
      }
    }
  }
  return result;
}

void sub_1B6E85794(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t __Block_byref_object_copy__39(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void __Block_byref_object_dispose__39(uint64_t a1)
{

}

void sub_1B6E86534(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_1B6E86678(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_1B6E86748(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1B6E869F0(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

uint64_t VCPImageHumanPoseAnalyzer::Init(VCPImageHumanPoseAnalyzer *this)
{
  unsigned __int8 v2;

  {
    std::string::basic_string[abi:ne180100]<0>(VCPImageHumanPoseAnalyzer::Init(void)::name, "cnn_human_pose.espresso.net");
    __cxa_atexit(MEMORY[0x1E0DE44D0], VCPImageHumanPoseAnalyzer::Init(void)::name, &dword_1B6C4A000);
  }
  return VCPCNNModelEspresso::LoadModel(&this->super._scaler.pool_.value_, (uint64_t)VCPImageHumanPoseAnalyzer::Init(void)::name);
}

void sub_1B6E86DBC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t VCPImageHumanPoseAnalyzer::Analyze(VCPImageHumanPoseAnalyzer *this, CVPixelBufferRef pixelBuffer, __CFDictionary *a3)
{
  int Width;
  int Height;
  int v7;

  Width = CVPixelBufferGetWidth(pixelBuffer);
  Height = CVPixelBufferGetHeight(pixelBuffer);
  if (Height >= Width)
    v7 = Width;
  else
    v7 = Height;
  if (v7 >= 64)
    VCPCNNModelEspresso::ExecuteModel((VCPCNNModelEspresso *)&this->super._scaler, pixelBuffer);
  return 0;
}

void VCPImageHumanPoseAnalyzer::ParsePersons(VCPImageHumanPoseAnalyzer *this, float a2)
{
  float *inputData;
  uint64_t v5;
  OpaqueVTPixelTransferSession *value;
  int v7;
  int v8;
  uint64_t v9;
  int v10;
  char *v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  char *v18;
  uint64_t v19;
  char *v20;
  float v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  _BOOL4 v26;
  uint64_t v27;
  char *v28;
  int v29;
  float v30;
  unsigned int v31;
  unsigned int v32;
  float v33;
  float **v34;
  float *v35;
  float v36;
  char *v37;
  float v38;
  float v39;
  float v40;
  char *v41;
  float *v42;
  int v43;
  _DWORD *v44;
  __CVPixelBufferPool *v45;
  uint64_t v46;
  float *heatmapNms;
  float *i;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  int v52;
  uint64_t v53;
  unint64_t v54;
  float *v55;
  int v56;
  uint64_t v57;
  float *v58;
  float v59;
  uint64_t v60;
  float v61;
  float v62;
  uint64_t v63;
  uint64_t j;
  float v65;
  int v66;
  float *v67;
  int v68;
  int v69;
  uint64_t *p_heatmapNms;
  uint64_t v71;
  float **v72;
  float **v73;
  uint64_t v74;
  void *__dst[3];
  void *__src;
  _QWORD v77[2];
  void *__p;
  void *v79;
  char *v80;
  uint64_t v81;

  v81 = *MEMORY[0x1E0C80C00];
  inputData = this[1]._inputData;
  if (inputData)
  {
    v5 = *(_QWORD *)&this[1]._scaler.format_;
    value = this[1]._scaler.transfer_session_.value_;
    v7 = 17 * v5 * (_DWORD)value;
    std::vector<float>::vector(__dst, v7);
    memcpy(__dst[0], inputData, 4 * v7);
    v8 = 0;
    v9 = 0;
    v10 = (_DWORD)value * v5;
    v11 = (char *)__dst[0];
    v12 = (int)value;
    v13 = (char *)__dst[0] - 12 * (int)v5 - 12;
    v14 = 4 * (int)v5;
    do
    {
      if ((int)value >= 1)
      {
        v15 = 0;
        LODWORD(v16) = 0;
        v17 = &v13[4 * v8];
        v18 = &v11[4 * v10 * (int)v9];
        do
        {
          if ((int)v5 >= 1)
          {
            v19 = 0;
            v16 = (int)v16;
            v20 = v17;
            do
            {
              v21 = *(float *)&v18[4 * v16];
              if (v21 >= a2)
              {
                v22 = -3;
                v23 = v20;
                do
                {
                  v24 = 0;
                  v26 = v22 + v15 >= 0 && v22 + v15 < (int)value;
                  while (!v26 || v19 + v24 - 3 < 0 || v19 + v24 - 3 >= (int)v5 || *(float *)&v23[4 * v24] <= v21)
                  {
                    if (++v24 == 7)
                      goto LABEL_23;
                  }
                  v21 = v21 + -1.0;
                  *(float *)&v18[4 * v16] = v21;
LABEL_23:
                  ++v22;
                  v23 += v14;
                }
                while (v22 != 4);
              }
              else
              {
                *(float *)&v18[4 * v16] = v21 + -1.0;
              }
              ++v19;
              ++v16;
              v20 += 4;
            }
            while (v19 != v5);
          }
          ++v15;
          v17 += v14;
        }
        while (v15 != value);
      }
      ++v9;
      v8 += v10;
    }
    while (v9 != 17);
    v66 = (_DWORD)value * v5;
    v67 = inputData;
    v71 = 0;
    v72 = 0;
    v73 = 0;
    v74 = 0;
    p_heatmapNms = (uint64_t *)&this[2]._heatmapNms;
    v68 = (int)value;
    do
    {
      if ((int)value >= 1)
      {
        LODWORD(v27) = 0;
        v69 = 0;
        v28 = (char *)__dst[0] + 4 * v66 * (int)v71;
        do
        {
          if ((int)v5 >= 1)
          {
            v29 = 0;
            v27 = (int)v27;
            do
            {
              if (*(float *)&v28[4 * v27] > a2)
              {
                v30 = v67[v66 * ((int)v71 + 17) + v27];
                if (v72 == v73)
                  goto LABEL_42;
                v31 = 0;
                v32 = -1;
                v33 = 3.4028e38;
                v34 = v72;
                do
                {
                  v35 = *v34;
                  v34 += 3;
                  v36 = vabds_f32(v30, *v35);
                  if (v36 < v33)
                  {
                    v32 = v31;
                    v33 = v36;
                  }
                  ++v31;
                }
                while (v34 != v73);
                if ((v32 & 0x80000000) != 0 || v33 >= 0.3)
                {
LABEL_42:
                  v42 = (float *)operator new(8uLL);
                  v79 = v42 + 2;
                  v80 = (char *)(v42 + 2);
                  *v42 = v30;
                  v42[1] = 1.0;
                  __p = v42;
                  std::vector<std::vector<float>>::push_back[abi:ne180100]((uint64_t *)&v72, (uint64_t)&__p);
                  if (__p)
                  {
                    v79 = __p;
                    operator delete(__p);
                  }
                  __p = 0;
                  v79 = 0;
                  v43 = 17;
                  v80 = 0;
                  do
                  {
                    v44 = operator new(0xCuLL);
                    v77[0] = v44 + 3;
                    v77[1] = v44 + 3;
                    *(_QWORD *)v44 = 0;
                    v44[2] = 0;
                    __src = v44;
                    std::vector<std::vector<float>>::push_back[abi:ne180100]((uint64_t *)&__p, (uint64_t)&__src);
                    if (__src)
                    {
                      v77[0] = __src;
                      operator delete(__src);
                    }
                    --v43;
                  }
                  while (v43);
                  *(float *)&__src = (float)v29;
                  *((float *)&__src + 1) = (float)v69;
                  LODWORD(v77[0]) = *(_DWORD *)&v28[4 * v27];
                  std::vector<int>::__assign_with_size[abi:ne180100]<int *,int *>((char *)__p + 24 * v71, (char *)&__src, (uint64_t)v77 + 4, 3uLL);
                  v45 = *(__CVPixelBufferPool **)&this[2]._forceCPU;
                  if (v45 >= this[2]._scaler.pool_.value_)
                  {
                    v46 = std::vector<std::vector<std::vector<float>>>::__push_back_slow_path<std::vector<std::vector<float>> const&>(p_heatmapNms, (uint64_t *)&__p);
                  }
                  else
                  {
                    std::vector<std::vector<std::vector<float>>>::__construct_one_at_end[abi:ne180100]<std::vector<std::vector<float>> const&>((uint64_t)p_heatmapNms, (uint64_t *)&__p);
                    v46 = (uint64_t)v45 + 24;
                  }
                  *(_QWORD *)&this[2]._forceCPU = v46;
                  __src = &__p;
                  std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100]((void ***)&__src);
                }
                else
                {
                  v37 = (char *)&v72[3 * v32];
                  v38 = *(float *)(*(_QWORD *)v37 + 4);
                  v39 = v30 + (float)(**(float **)v37 * v38);
                  v40 = v38 + 1.0;
                  *(float *)&__p = v39 / v40;
                  *((float *)&__p + 1) = v40;
                  std::vector<int>::__assign_with_size[abi:ne180100]<int *,int *>(v37, (char *)&__p, (uint64_t)&v79, 2uLL);
                  v41 = (char *)(*(_QWORD *)(*p_heatmapNms + 24 * v32) + 24 * v71);
                  if (*(float *)&v28[4 * v27] > *(float *)(*(_QWORD *)v41 + 8))
                  {
                    *(float *)&__p = (float)v29;
                    *((float *)&__p + 1) = (float)v69;
                    LODWORD(v79) = *(_DWORD *)&v28[4 * v27];
                    std::vector<int>::__assign_with_size[abi:ne180100]<int *,int *>(v41, (char *)&__p, (uint64_t)&v79 + 4, 3uLL);
                  }
                }
              }
              ++v29;
              ++v27;
            }
            while (v29 != (_DWORD)v5);
            LODWORD(value) = v68;
          }
          ++v69;
        }
        while (v69 != (_DWORD)value);
      }
      ++v71;
    }
    while (v71 != 17);
    heatmapNms = this[2]._heatmapNms;
    for (i = *(float **)&this[2]._forceCPU; heatmapNms != i; heatmapNms += 6)
    {
      v49 = *(_QWORD *)heatmapNms;
      v50 = *((_QWORD *)heatmapNms + 1);
      v51 = v50 - *(_QWORD *)heatmapNms;
      if (v50 != *(_QWORD *)heatmapNms)
      {
        v52 = 0;
        v53 = 0;
        v54 = v51 / 24;
        if (v54 <= 1)
          v54 = 1;
        do
        {
          v55 = *(float **)(v49 + 24 * v53);
          if (v55[2] > 0.1)
          {
            v56 = (int)*v55;
            v57 = (int)v55[1];
            v58 = &v67[(int)v5 * (v57 - 3) + v56 + v52];
            v59 = 0.0;
            v60 = -3;
            v61 = 0.0;
            v62 = 0.0;
            do
            {
              v63 = v60 + v57;
              for (j = -3; j != 4; ++j)
              {
                if ((v63 & 0x8000000000000000) == 0
                  && v63 < v12
                  && ((v56 + j) & 0x8000000000000000) == 0
                  && v56 + j < (int)v5)
                {
                  v65 = v58[j];
                  if (v65 > 0.05)
                  {
                    v59 = v59 + v65;
                    v62 = v62 + (float)(v65 * (float)(v56 + j));
                    v61 = v61 + (float)(v65 * (float)(v60 + v57));
                  }
                }
              }
              ++v60;
              v58 = (float *)((char *)v58 + v14);
            }
            while (v60 != 4);
            if (v59 > 0.0)
            {
              *v55 = (float)(v62 / v59) + 0.5;
              v55[1] = (float)(v61 / v59) + 0.5;
            }
          }
          ++v53;
          v52 += v66;
        }
        while (v53 != v54);
      }
    }
    __p = &v72;
    std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
    if (__dst[0])
    {
      __dst[1] = __dst[0];
      operator delete(__dst[0]);
    }
  }
}

void sub_1B6E874B8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19, uint64_t a20,uint64_t a21,void *__p,uint64_t a23,uint64_t a24,void *a25,uint64_t a26,uint64_t a27,void *a28,uint64_t a29)
{
  _Unwind_Resume(exception_object);
}

void VCPImageHumanPoseAnalyzer::ProcessPersons(VCPImageHumanPoseAnalyzer *this, float a2)
{
  uint64_t *heatmapNms;
  const __CFString *v4;
  float v5;
  const CFArrayCallBacks *v6;
  uint64_t v7;
  float v8;
  float v9;
  float v10;
  float v11;
  float v12;
  float v13;
  uint64_t v14;
  unint64_t v15;
  char *v16;
  uint64_t v17;
  float v18;
  float *v19;
  float v20;
  float v21;
  unsigned int v22;
  unsigned int v23;
  float v24;
  float v25;
  float v26;
  double v27;
  double v28;
  double v29;
  float v30;
  float v31;
  float v32;
  float v33;
  float v34;
  float v35;
  float v36;
  float v37;
  float v38;
  __CFDictionary *Mutable;
  void **v40;
  __CFDictionary *v41;
  CFStringRef v42;
  CFMutableArrayRef v43;
  const __CFString *v44;
  uint64_t v45;
  unint64_t v46;
  CFMutableArrayRef v47;
  void **v48;
  __CFArray *v49;
  void **v50;
  __CFArray *v51;
  void **v52;
  CFMutableDictionaryRef v53;
  void **v54;
  float *v55;
  float value_low;
  float format;
  void *value;
  CFMutableDictionaryRef theDict;
  int v61;
  __CFArray *valuePtr;
  void **__src;
  int v64;
  _BYTE v65[20];

  *(_QWORD *)&v65[4] = *MEMORY[0x1E0C80C00];
  heatmapNms = (uint64_t *)this[2]._heatmapNms;
  if (heatmapNms != *(uint64_t **)&this[2]._forceCPU)
  {
    value_low = (float)SLODWORD(this[1]._scaler.transfer_session_.value_);
    format = (float)(int)this[1]._scaler.format_;
    v4 = CFSTR("humanConfidence");
    v5 = 1.0;
    v6 = (const CFArrayCallBacks *)MEMORY[0x1E0C9B378];
    do
    {
      v7 = *heatmapNms;
      v8 = 0.0;
      v9 = 0.0;
      v10 = 1.0;
      v11 = 1.0;
      v12 = 0.0;
      v13 = 0.0;
      if (heatmapNms[1] != *heatmapNms)
      {
        v14 = 0;
        v15 = 0;
        do
        {
          v16 = (char *)(v7 + v14);
          v17 = *(_QWORD *)(v7 + v14);
          v18 = v5 - (float)(*(float *)(v17 + 4) / value_low);
          *(float *)&__src = *(float *)v17 / format;
          *((float *)&__src + 1) = v18;
          v64 = *(_DWORD *)(v17 + 8);
          std::vector<int>::__assign_with_size[abi:ne180100]<int *,int *>(v16, (char *)&__src, (uint64_t)v65, 3uLL);
          v7 = *heatmapNms;
          v19 = *(float **)(*heatmapNms + v14);
          v20 = v19[2];
          if (v20 > 0.1)
          {
            v21 = v19[1];
            if (v11 >= *v19)
              v11 = *v19;
            if (v10 >= v21)
              v10 = v19[1];
            if (*v19 >= v9)
              v9 = *v19;
            if (v21 >= v8)
              v8 = v19[1];
            v13 = v13 + v20;
            v12 = v12 + v5;
          }
          ++v15;
          v14 += 24;
        }
        while (0xAAAAAAAAAAAAAAABLL * ((heatmapNms[1] - v7) >> 3) > v15);
      }
      v22 = VCPHumanGetflagsFromKeypoints(heatmapNms, 0.1);
      if ((float)(v9 - v11) != 0.0 && (float)(v8 - v10) != 0.0 && v12 > 4.0)
      {
        v23 = v22;
        if ((v22 & 0xFFEFFFFF) != 0)
        {
          v24 = vabds_f32(v9, v11);
          v25 = vabds_f32(v8, v10);
          v26 = v24 >= v25 ? v24 : v25;
          if (v26 > 0.1)
          {
            v27 = v10;
            v28 = v24;
            v29 = v25;
            v30 = v13 / v12;
            v31 = v11 - v28 * 0.150000006;
            v32 = v31 >= 0.0 ? v11 - v28 * 0.150000006 : 0.0;
            v33 = v27 - v29 * 0.150000006;
            v34 = v33 >= 0.0 ? v27 - v29 * 0.150000006 : 0.0;
            v35 = v11 + v28 * 1.14999998;
            v36 = v35 <= 1.0 ? v35 : 1.0;
            v37 = v27 + v29 * 1.14999998;
            v5 = 1.0;
            v38 = v37 <= 1.0 ? v27 + v29 * 1.14999998 : 1.0;
            if (v30 > a2)
            {
              Mutable = CFDictionaryCreateMutable(0, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
              theDict = Mutable;
              *(float *)&valuePtr = v30;
              v40 = (void **)CFNumberCreate(0, kCFNumberFloatType, &valuePtr);
              __src = v40;
              if (v40)
                CFDictionaryAddValue(Mutable, v4, v40);
              CF<opaqueCMSampleBuffer *>::~CF((const void **)&__src);
              v41 = theDict;
              v42 = CFStringCreateWithFormat(0, 0, CFSTR("{{%.*g, %.*g}, {%.*g, %.*g}}"), 17, v32, 17, v34, 17, (float)(v36 - v32), 17, (float)(v38 - v34));
              __src = &v42->isa;
              if (v42)
                CFDictionaryAddValue(v41, CFSTR("humanBounds"), v42);
              CF<opaqueCMSampleBuffer *>::~CF((const void **)&__src);
              if (BYTE1(this->super.super.isa))
              {
                v43 = CFArrayCreateMutable(0, 0, v6);
                valuePtr = v43;
                if (heatmapNms[1] != *heatmapNms)
                {
                  v44 = v4;
                  v45 = 0;
                  v46 = 0;
                  do
                  {
                    v47 = CFArrayCreateMutable(0, 0, v6);
                    value = v47;
                    v61 = **(_DWORD **)(*heatmapNms + v45);
                    v48 = (void **)CFNumberCreate(0, kCFNumberFloat32Type, &v61);
                    __src = v48;
                    if (v48)
                      CFArrayAppendValue(v47, v48);
                    CF<opaqueCMSampleBuffer *>::~CF((const void **)&__src);
                    v49 = (__CFArray *)value;
                    v61 = *(_DWORD *)(*(_QWORD *)(*heatmapNms + v45) + 4);
                    v50 = (void **)CFNumberCreate(0, kCFNumberFloat32Type, &v61);
                    __src = v50;
                    if (v50)
                      CFArrayAppendValue(v49, v50);
                    CF<opaqueCMSampleBuffer *>::~CF((const void **)&__src);
                    v51 = (__CFArray *)value;
                    v61 = *(_DWORD *)(*(_QWORD *)(*heatmapNms + v45) + 8);
                    v52 = (void **)CFNumberCreate(0, kCFNumberFloat32Type, &v61);
                    __src = v52;
                    if (v52)
                      CFArrayAppendValue(v51, v52);
                    CF<opaqueCMSampleBuffer *>::~CF((const void **)&__src);
                    CFArrayAppendValue(valuePtr, value);
                    CF<opaqueCMSampleBuffer *>::~CF((const void **)&value);
                    ++v46;
                    v45 += 24;
                  }
                  while (0xAAAAAAAAAAAAAAABLL * ((heatmapNms[1] - *heatmapNms) >> 3) > v46);
                  v43 = valuePtr;
                  v4 = v44;
                }
                CFDictionaryAddValue(theDict, CFSTR("humanKeypoints"), v43);
                CF<opaqueCMSampleBuffer *>::~CF((const void **)&valuePtr);
              }
              v53 = CFDictionaryCreateMutable(0, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
              value = v53;
              valuePtr = (__CFArray *)v23;
              v54 = (void **)CFNumberCreate(0, kCFNumberSInt64Type, &valuePtr);
              __src = v54;
              if (v54)
                CFDictionaryAddValue(v53, CFSTR("flags"), v54);
              CF<opaqueCMSampleBuffer *>::~CF((const void **)&__src);
              CFDictionaryAddValue((CFMutableDictionaryRef)value, CFSTR("attributes"), theDict);
              CFArrayAppendValue(*(CFMutableArrayRef *)&this[2]._inputHeight, value);
              CF<opaqueCMSampleBuffer *>::~CF((const void **)&value);
              CF<opaqueCMSampleBuffer *>::~CF((const void **)&theDict);
            }
          }
        }
      }
      heatmapNms += 3;
    }
    while (heatmapNms != *(uint64_t **)&this[2]._forceCPU);
    v55 = this[2]._heatmapNms;
    while (heatmapNms != (uint64_t *)v55)
    {
      heatmapNms -= 3;
      __src = (void **)heatmapNms;
      std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100](&__src);
    }
    heatmapNms = (uint64_t *)v55;
  }
  *(_QWORD *)&this[2]._forceCPU = heatmapNms;
}

void sub_1B6E87AFC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,const void *a25,const void *a26,uint64_t a27,uint64_t a28,const void *a29)
{
  CF<opaqueCMSampleBuffer *>::~CF(&a29);
  CF<opaqueCMSampleBuffer *>::~CF(&a25);
  CF<opaqueCMSampleBuffer *>::~CF(&a26);
  _Unwind_Resume(a1);
}

uint64_t std::vector<std::vector<float>>::push_back[abi:ne180100](uint64_t *a1, uint64_t a2)
{
  uint64_t result;
  unint64_t v5;
  unint64_t v6;
  _QWORD *v7;
  _QWORD *v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  char *v13;
  char *v14;
  uint64_t v15;
  _QWORD v16[5];

  v6 = a1[2];
  result = (uint64_t)(a1 + 2);
  v5 = v6;
  v7 = *(_QWORD **)(result - 8);
  if ((unint64_t)v7 >= v6)
  {
    v9 = 0xAAAAAAAAAAAAAAABLL * (((uint64_t)v7 - *a1) >> 3);
    v10 = v9 + 1;
    if (v9 + 1 > 0xAAAAAAAAAAAAAAALL)
      std::vector<std::unique_ptr<VCPProtoKeypoint>>::__throw_length_error[abi:ne180100]();
    v11 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v5 - *a1) >> 3);
    if (2 * v11 > v10)
      v10 = 2 * v11;
    if (v11 >= 0x555555555555555)
      v12 = 0xAAAAAAAAAAAAAAALL;
    else
      v12 = v10;
    v16[4] = result;
    v13 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::tuple<float,unsigned long,unsigned long>>>(result, v12);
    v14 = &v13[24 * v9];
    v16[0] = v13;
    v16[1] = v14;
    v16[3] = &v13[24 * v15];
    *((_QWORD *)v14 + 1) = 0;
    *((_QWORD *)v14 + 2) = 0;
    *(_QWORD *)v14 = 0;
    *(_OWORD *)v14 = *(_OWORD *)a2;
    *((_QWORD *)v14 + 2) = *(_QWORD *)(a2 + 16);
    *(_QWORD *)a2 = 0;
    *(_QWORD *)(a2 + 8) = 0;
    *(_QWORD *)(a2 + 16) = 0;
    v16[2] = v14 + 24;
    std::vector<std::vector<float>>::__swap_out_circular_buffer(a1, v16);
    v8 = (_QWORD *)a1[1];
    result = std::__split_buffer<std::vector<float>>::~__split_buffer((uint64_t)v16);
  }
  else
  {
    *v7 = 0;
    v7[1] = 0;
    v7[2] = 0;
    *(_OWORD *)v7 = *(_OWORD *)a2;
    v7[2] = *(_QWORD *)(a2 + 16);
    *(_QWORD *)a2 = 0;
    *(_QWORD *)(a2 + 8) = 0;
    *(_QWORD *)(a2 + 16) = 0;
    v8 = v7 + 3;
    a1[1] = (uint64_t)(v7 + 3);
  }
  a1[1] = (uint64_t)v8;
  return result;
}

void sub_1B6E87CC4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::__split_buffer<std::vector<float>>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t std::vector<std::vector<float>>::__swap_out_circular_buffer(uint64_t *a1, _QWORD *a2)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  result = std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::vector<float>>,std::reverse_iterator<std::vector<float>*>,std::reverse_iterator<std::vector<float>*>,std::reverse_iterator<std::vector<float>*>>((uint64_t)(a1 + 2), a1[1], (_QWORD *)a1[1], *a1, (_QWORD *)*a1, a2[1], a2[1]);
  a2[1] = v5;
  v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::vector<float>>,std::reverse_iterator<std::vector<float>*>,std::reverse_iterator<std::vector<float>*>,std::reverse_iterator<std::vector<float>*>>(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t a4, _QWORD *a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7;
  __int128 v8;
  uint64_t v9;
  _QWORD v11[3];
  char v12;
  __int128 v13;
  __int128 v14;

  v7 = a7;
  *(_QWORD *)&v14 = a6;
  *((_QWORD *)&v14 + 1) = a7;
  v13 = v14;
  v11[0] = a1;
  v11[1] = &v13;
  v11[2] = &v14;
  if (a3 == a5)
  {
    v9 = a6;
  }
  else
  {
    do
    {
      *(_QWORD *)(v7 - 24) = 0;
      *(_QWORD *)(v7 - 16) = 0;
      *(_QWORD *)(v7 - 8) = 0;
      v8 = *(_OWORD *)(a3 - 3);
      a3 -= 3;
      *(_OWORD *)(v7 - 24) = v8;
      *(_QWORD *)(v7 - 8) = a3[2];
      *a3 = 0;
      a3[1] = 0;
      a3[2] = 0;
      v7 = *((_QWORD *)&v14 + 1) - 24;
      *((_QWORD *)&v14 + 1) -= 24;
    }
    while (a3 != a5);
    v9 = v14;
  }
  v12 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<float>>,std::reverse_iterator<std::vector<float>*>>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v11);
  return v9;
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<float>>,std::reverse_iterator<std::vector<float>*>>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(_BYTE *)(a1 + 24))
    std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<float>>,std::reverse_iterator<std::vector<float>*>>::operator()[abi:ne180100](a1);
  return a1;
}

void std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<float>>,std::reverse_iterator<std::vector<float>*>>::operator()[abi:ne180100](uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  void *v3;

  v1 = *(_QWORD *)(*(_QWORD *)(a1 + 16) + 8);
  v2 = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 8);
  while (v1 != v2)
  {
    v3 = *(void **)v1;
    if (*(_QWORD *)v1)
    {
      *(_QWORD *)(v1 + 8) = v3;
      operator delete(v3);
    }
    v1 += 24;
  }
}

uint64_t std::__split_buffer<std::vector<float>>::~__split_buffer(uint64_t a1)
{
  std::__split_buffer<std::vector<float>>::__destruct_at_end[abi:ne180100](a1, *(_QWORD *)(a1 + 8));
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

void std::__split_buffer<std::vector<float>>::__destruct_at_end[abi:ne180100](uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  void *v5;

  v2 = *(_QWORD *)(a1 + 16);
  while (v2 != a2)
  {
    v5 = *(void **)(v2 - 24);
    *(_QWORD *)(a1 + 16) = v2 - 24;
    if (v5)
    {
      *(_QWORD *)(v2 - 16) = v5;
      operator delete(v5);
      v2 = *(_QWORD *)(a1 + 16);
    }
    else
    {
      v2 -= 24;
    }
  }
}

_QWORD *std::vector<std::vector<std::vector<float>>>::__construct_one_at_end[abi:ne180100]<std::vector<std::vector<float>> const&>(uint64_t a1, uint64_t *a2)
{
  _QWORD *v3;
  _QWORD *result;

  v3 = *(_QWORD **)(a1 + 8);
  *v3 = 0;
  v3[1] = 0;
  v3[2] = 0;
  result = std::vector<std::vector<float>>::__init_with_size[abi:ne180100]<std::vector<float>*,std::vector<float>*>(v3, *a2, a2[1], 0xAAAAAAAAAAAAAAABLL * ((a2[1] - *a2) >> 3));
  *(_QWORD *)(a1 + 8) = v3 + 3;
  return result;
}

void sub_1B6E87F44(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

uint64_t std::vector<std::vector<std::vector<float>>>::__push_back_slow_path<std::vector<std::vector<float>> const&>(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  char *v10;
  char *v11;
  uint64_t v12;
  void *v14[2];
  char *v15;
  char *v16;
  uint64_t *v17;

  v3 = *a1;
  v4 = 0xAAAAAAAAAAAAAAABLL * ((a1[1] - *a1) >> 3);
  v5 = v4 + 1;
  if (v4 + 1 > 0xAAAAAAAAAAAAAAALL)
    std::vector<std::unique_ptr<VCPProtoKeypoint>>::__throw_length_error[abi:ne180100]();
  v7 = (uint64_t)(a1 + 2);
  v8 = 0xAAAAAAAAAAAAAAABLL * ((a1[2] - v3) >> 3);
  if (2 * v8 > v5)
    v5 = 2 * v8;
  if (v8 >= 0x555555555555555)
    v9 = 0xAAAAAAAAAAAAAAALL;
  else
    v9 = v5;
  v17 = a1 + 2;
  if (v9)
    v10 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::tuple<float,unsigned long,unsigned long>>>(v7, v9);
  else
    v10 = 0;
  v11 = &v10[24 * v4];
  v14[0] = v10;
  v14[1] = v11;
  v15 = v11;
  v16 = &v10[24 * v9];
  *(_QWORD *)v11 = 0;
  *((_QWORD *)v11 + 1) = 0;
  *((_QWORD *)v11 + 2) = 0;
  std::vector<std::vector<float>>::__init_with_size[abi:ne180100]<std::vector<float>*,std::vector<float>*>(v11, *a2, a2[1], 0xAAAAAAAAAAAAAAABLL * ((a2[1] - *a2) >> 3));
  v15 += 24;
  std::vector<std::vector<std::vector<float>>>::__swap_out_circular_buffer(a1, v14);
  v12 = a1[1];
  std::__split_buffer<std::vector<std::vector<float>>>::~__split_buffer(v14);
  return v12;
}

void sub_1B6E88058(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::__split_buffer<std::vector<std::vector<float>>>::~__split_buffer((void **)va);
  _Unwind_Resume(a1);
}

uint64_t std::vector<std::vector<std::vector<float>>>::__swap_out_circular_buffer(uint64_t *a1, _QWORD *a2)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  result = std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::vector<std::vector<float>>>,std::reverse_iterator<std::vector<std::vector<float>>*>,std::reverse_iterator<std::vector<std::vector<float>>*>,std::reverse_iterator<std::vector<std::vector<float>>*>>((uint64_t)(a1 + 2), a1[1], (_QWORD *)a1[1], *a1, (_QWORD *)*a1, a2[1], a2[1]);
  a2[1] = v5;
  v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::vector<std::vector<float>>>,std::reverse_iterator<std::vector<std::vector<float>>*>,std::reverse_iterator<std::vector<std::vector<float>>*>,std::reverse_iterator<std::vector<std::vector<float>>*>>(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t a4, _QWORD *a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7;
  __int128 v8;
  uint64_t v9;
  _QWORD v11[3];
  char v12;
  __int128 v13;
  __int128 v14;

  v7 = a7;
  *(_QWORD *)&v14 = a6;
  *((_QWORD *)&v14 + 1) = a7;
  v13 = v14;
  v11[0] = a1;
  v11[1] = &v13;
  v11[2] = &v14;
  if (a3 == a5)
  {
    v9 = a6;
  }
  else
  {
    do
    {
      *(_QWORD *)(v7 - 24) = 0;
      *(_QWORD *)(v7 - 16) = 0;
      *(_QWORD *)(v7 - 8) = 0;
      v8 = *(_OWORD *)(a3 - 3);
      a3 -= 3;
      *(_OWORD *)(v7 - 24) = v8;
      *(_QWORD *)(v7 - 8) = a3[2];
      *a3 = 0;
      a3[1] = 0;
      a3[2] = 0;
      v7 = *((_QWORD *)&v14 + 1) - 24;
      *((_QWORD *)&v14 + 1) -= 24;
    }
    while (a3 != a5);
    v9 = v14;
  }
  v12 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<std::vector<float>>>,std::reverse_iterator<std::vector<std::vector<float>>*>>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v11);
  return v9;
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<std::vector<float>>>,std::reverse_iterator<std::vector<std::vector<float>>*>>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(_BYTE *)(a1 + 24))
    std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<std::vector<float>>>,std::reverse_iterator<std::vector<std::vector<float>>*>>::operator()[abi:ne180100](a1);
  return a1;
}

void std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<std::vector<float>>>,std::reverse_iterator<std::vector<std::vector<float>>*>>::operator()[abi:ne180100](uint64_t a1)
{
  void **v1;
  void **v2;
  void **v3;

  v1 = *(void ***)(*(_QWORD *)(a1 + 16) + 8);
  v2 = *(void ***)(*(_QWORD *)(a1 + 8) + 8);
  while (v1 != v2)
  {
    v3 = v1;
    std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100](&v3);
    v1 += 3;
  }
}

void **std::__split_buffer<std::vector<std::vector<float>>>::~__split_buffer(void **a1)
{
  std::__split_buffer<std::vector<std::vector<float>>>::clear[abi:ne180100]((uint64_t)a1);
  if (*a1)
    operator delete(*a1);
  return a1;
}

void std::__split_buffer<std::vector<std::vector<float>>>::clear[abi:ne180100](uint64_t a1)
{
  uint64_t i;
  uint64_t v2;
  void **v4;
  void **v5;

  v2 = *(_QWORD *)(a1 + 8);
  for (i = *(_QWORD *)(a1 + 16); i != v2; i = *(_QWORD *)(a1 + 16))
  {
    v4 = (void **)(i - 24);
    *(_QWORD *)(a1 + 16) = v4;
    v5 = v4;
    std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100](&v5);
  }
}

void sub_1B6E88408(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1B6E88598(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1B6E886DC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, objc_super a9)
{
  void *v9;

  a9.super_class = (Class)VCPMediaAnalyzer;
  -[_Unwind_Exception dealloc](&a9, sel_dealloc);
  _Unwind_Resume(a1);
}

void sub_1B6E88844(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id location)
{
  id *v14;

  objc_destroyWeak(v14);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_1B6E88B58(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, void *a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, ...)
{
  void *v13;
  void *v14;
  void *v15;
  va_list va;

  va_start(va, a13);

  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1B6E88C98(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1B6E88DD0(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1B6E88E68(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1B6E88FCC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, void *a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, ...)
{
  void *v13;
  void *v14;
  void *v15;
  void *v16;
  va_list va;

  va_start(va, a13);

  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1B6E891B4(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1B6E89264(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13)
{
  void *v13;

  _Unwind_Resume(a1);
}

void sub_1B6E893DC(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1B6E89728(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{
  void *v10;
  void *v11;
  void *v12;
  void *v13;

  _Unwind_Resume(a1);
}

void sub_1B6E8A4A4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, void *a11, void *a12, void *a13, void *a14, void *a15, void *a16)
{
  void *v16;
  void *v17;
  void *v18;
  void *v19;

  _Unwind_Resume(a1);
}

void sub_1B6E8AACC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11)
{
  void *v11;
  void *v12;

  _Unwind_Resume(a1);
}

void sub_1B6E8AE14(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1B6E8B0A8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *a20,void *a21,void *a22,void *a23,uint64_t a24,uint64_t a25,char a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,id a31)
{
  void *v31;
  void *v32;
  void *v33;
  void *v34;

  _Block_object_dispose(&a26, 8);
  _Unwind_Resume(a1);
}

uint64_t __Block_byref_object_copy__40(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void __Block_byref_object_dispose__40(uint64_t a1)
{

}

void sub_1B6E8B378(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1B6E8B7B8(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1B6E8B968(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1B6E8BA68(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, id a20)
{
  void *v20;

  _Block_object_dispose(&a15, 8);
  _Unwind_Resume(a1);
}

void sub_1B6E8BF68(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  _Unwind_Resume(a1);
}

void sub_1B6E8CC60(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *a17, void *a18, void *a19)
{
  void *v19;
  void *v20;
  void *v21;
  void *v22;

  _Unwind_Resume(a1);
}

void sub_1B6E8D07C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1B6E8D1FC(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  char v3;
  void *v4;
  char v5;

  v5 = v3;
  if ((v5 & 1) == 0)

  _Unwind_Resume(a1);
}

void sub_1B6E8D45C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1B6E8D744(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;

  _Unwind_Resume(a1);
}

void sub_1B6E8D89C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;
  void *v11;
  void *v12;
  void *v13;

  _Unwind_Resume(a1);
}

void sub_1B6E8DD48(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, void *a15)
{
  void *v15;
  void *v16;

  _Unwind_Resume(a1);
}

void sub_1B6E8E5B0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, void *a11, void *a12, void *a13, void *a14, void *a15)
{
  void *v15;
  void *v16;
  void *v17;
  void *v18;
  void *v19;
  void *v20;

  _Unwind_Resume(a1);
}

void sub_1B6E8E7B0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1B6E8EAFC(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1B6E8EEF8(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1B6E9045C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *a20,uint64_t a21,uint64_t a22,void *a23,void *a24,uint64_t a25,void *a26,uint64_t a27,uint64_t a28,void *a29,void *a30,void *a31,uint64_t a32,void *a33,uint64_t a34,void *a35,void *a36,void *a37,void *a38,void *a39,void *a40,uint64_t a41,void *a42,void *a43,void *a44,void *a45,void *a46,void *a47,void *a48)
{
  void *v48;
  void *v49;
  void *v50;
  void *v51;
  void *v52;
  void *v53;
  void *v54;
  void *v55;

  _Unwind_Resume(a1);
}

void sub_1B6E90978(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;

  _Unwind_Resume(a1);
}

void sub_1B6E90D7C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  _Unwind_Resume(a1);
}

void sub_1B6E90E0C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_1B6E90EDC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_1B6E90F44(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_1B6E91060(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  _Unwind_Resume(a1);
}

void sub_1B6E91370(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_1B6E91D24(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,void *a30)
{

  _Unwind_Resume(a1);
}

void sub_1B6E925E0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, uint64_t a11, void *a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *a20)
{
  void *v20;
  void *v21;

  _Unwind_Resume(a1);
}

void sub_1B6E92E2C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, void *a11, void *a12, void *a13, void *a14, void *a15, void *a16)
{
  void *v16;
  void *v17;
  void *v18;

  _Unwind_Resume(a1);
}

void sub_1B6E93638(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9, void *a10, void *a11, uint64_t a12, void *a13, void *a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *a19, void *a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,void *a25)
{
  void *v25;
  void *v26;
  void *v27;
  void *v28;
  void *v29;
  void *v30;
  uint64_t v31;

  _Unwind_Resume(a1);
}

void sub_1B6E9387C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1B6E93DB8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, uint64_t a15, void *a16, void *a17, uint64_t a18, void *a19, uint64_t a20,uint64_t a21,uint64_t a22,void *a23)
{

  _Unwind_Resume(a1);
}

void sub_1B6E942EC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9, void *a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, void *a15)
{

  _Unwind_Resume(a1);
}

void sub_1B6E947C0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11, void *a12, uint64_t a13, void *a14, uint64_t a15, void *a16)
{
  void *v16;

  _Unwind_Resume(a1);
}

void sub_1B6E94BFC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, void *a11, void *a12, void *a13, void *a14)
{
  void *v14;

  _Unwind_Resume(a1);
}

void sub_1B6E95694(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void *a22,uint64_t a23,void *a24,void *a25,void *a26,void *a27,uint64_t a28,uint64_t a29,uint64_t a30,void *a31)
{
  void *v31;

  _Unwind_Resume(a1);
}

void sub_1B6E95D70(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, void *a13)
{
  void *v13;

  _Unwind_Resume(a1);
}

void sub_1B6E96590(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *a16, uint64_t a17, void *a18, void *a19)
{
  void *v19;
  void *v20;

  _Unwind_Resume(a1);
}

void sub_1B6E969E8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{
  void *v10;
  void *v11;
  void *v12;
  void *v13;

  _Unwind_Resume(a1);
}

void sub_1B6E96B14(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  _Unwind_Resume(a1);
}

void sub_1B6E96ECC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, void *a11, void *a12, void *a13, void *a14)
{

  _Unwind_Resume(a1);
}

void sub_1B6E97B98(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, uint64_t a15, uint64_t a16, void *a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,void *a28,void *a29,void *a30)
{

  _Unwind_Resume(a1);
}

void sub_1B6E98008(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;

  _Unwind_Resume(a1);
}

void sub_1B6E984E8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9, uint64_t a10, void *a11, void *a12)
{
  void *v12;

  _Unwind_Resume(a1);
}

void sub_1B6E98B74(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, void *a11, void *a12, void *a13, void *a14)
{

  _Unwind_Resume(a1);
}

void sub_1B6E98CCC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;
  void *v11;

  _Unwind_Resume(a1);
}

void sub_1B6E98D50(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_1B6E999E0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *a17, void *a18)
{

  _Unwind_Resume(a1);
}

void sub_1B6E99C84(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_1B6E99D3C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;

  _Unwind_Resume(a1);
}

void sub_1B6E99E08(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;

  _Unwind_Resume(a1);
}

void sub_1B6E99FE0(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_1B6E9A45C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9, void *a10)
{

  _Unwind_Resume(a1);
}

void sub_1B6E9A600(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1B6E9A914(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{
  void *v10;
  void *v11;
  void *v12;
  void *v13;

  _Unwind_Resume(a1);
}

void sub_1B6E9ADF8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11, void *a12, void *a13, void *a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void *a22)
{
  void *v22;

  _Unwind_Resume(a1);
}

void sub_1B6E9B598(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15, uint64_t a16, uint64_t a17, void *a18, void *a19)
{
  void *v19;

  _Unwind_Resume(a1);
}

void sub_1B6E9BBC0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9, uint64_t a10, void *a11, void *a12)
{
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  void *v16;
  void *v17;
  void *v18;
  void *v19;

  _Unwind_Resume(a1);
}

void sub_1B6E9BEA0(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

uint64_t VCPProtoMovieSafetyResultReadFrom(uint64_t a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  int v15;
  unint64_t v17;
  char v18;
  unsigned int v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  char v23;
  VCPProtoTimeRange *v24;
  uint64_t result;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) < *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
  {
    v7 = (int *)MEMORY[0x1E0D82BB8];
    do
    {
      if (*(_BYTE *)(a2 + *v5))
        return *(_BYTE *)(a2 + *v5) == 0;
      v8 = 0;
      v9 = 0;
      v10 = 0;
      while (1)
      {
        v11 = *v3;
        v12 = *(_QWORD *)(a2 + v11);
        if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
          break;
        v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
        *(_QWORD *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0)
          goto LABEL_12;
        v8 += 7;
        v14 = v9++ >= 9;
        if (v14)
        {
          v10 = 0;
          v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
      v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(_BYTE *)(a2 + *v5))
        v10 = 0;
LABEL_14:
      if (v15 || (v10 & 7) == 4)
        return *(_BYTE *)(a2 + *v5) == 0;
      v17 = v10 >> 3;
      if ((v10 >> 3) == 1)
      {
        v24 = objc_alloc_init(VCPProtoTimeRange);
        objc_storeStrong((id *)(a1 + 24), v24);
        if (!PBReaderPlaceMark() || !VCPProtoTimeRangeReadFrom((uint64_t)v24, a2))
        {
LABEL_42:

          return 0;
        }
      }
      else
      {
        if ((_DWORD)v17 != 3)
        {
          if ((_DWORD)v17 == 2)
          {
            v18 = 0;
            v19 = 0;
            v20 = 0;
            while (1)
            {
              v21 = *v3;
              v22 = *(_QWORD *)(a2 + v21);
              if (v22 == -1 || v22 >= *(_QWORD *)(a2 + *v4))
                break;
              v23 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v22);
              *(_QWORD *)(a2 + v21) = v22 + 1;
              v20 |= (unint64_t)(v23 & 0x7F) << v18;
              if ((v23 & 0x80) == 0)
                goto LABEL_37;
              v18 += 7;
              v14 = v19++ >= 9;
              if (v14)
              {
                LODWORD(v20) = 0;
                goto LABEL_39;
              }
            }
            *(_BYTE *)(a2 + *v5) = 1;
LABEL_37:
            if (*(_BYTE *)(a2 + *v5))
              LODWORD(v20) = 0;
LABEL_39:
            *(_DWORD *)(a1 + 16) = v20;
          }
          else
          {
            result = PBReaderSkipValueWithTag();
            if (!(_DWORD)result)
              return result;
          }
          continue;
        }
        v24 = objc_alloc_init(VCPProtoClassification);
        objc_msgSend((id)a1, "addClassification:", v24);
        if (!PBReaderPlaceMark() || (VCPProtoClassificationReadFrom((uint64_t)v24, a2) & 1) == 0)
          goto LABEL_42;
      }
      PBReaderRecallMark();

    }
    while (*(_QWORD *)(a2 + *v3) < *(_QWORD *)(a2 + *v4));
  }
  return *(_BYTE *)(a2 + *v5) == 0;
}

void ma::Histogram::~Histogram(ma::Histogram *this)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v2 = *((_QWORD *)this + 1);
  if (v2)
    MEMORY[0x1BCCA128C](v2, 0x1000C8052888210);
  v3 = *((_QWORD *)this + 2);
  if (v3)
    MEMORY[0x1BCCA128C](v3, 0x1000C8052888210);
  v4 = *((_QWORD *)this + 3);
  if (v4)
    MEMORY[0x1BCCA128C](v4, 0x1000C8052888210);
  v5 = *((_QWORD *)this + 4);
  if (v5)
    MEMORY[0x1BCCA128C](v5, 0x1000C8052888210);
  v6 = *((_QWORD *)this + 5);
  if (v6)
    MEMORY[0x1BCCA128C](v6, 0x1000C8052888210);
}

unsigned __int8 *ma::Histogram::LumaHistogram(ma::Histogram *this, CVPixelBufferRef pixelBuffer)
{
  int Width;
  int Height;
  size_t BytesPerRowOfPlane;
  unsigned __int8 *result;
  int i;
  uint64_t v9;
  uint64_t v10;

  Width = CVPixelBufferGetWidth(pixelBuffer);
  Height = CVPixelBufferGetHeight(pixelBuffer);
  BytesPerRowOfPlane = CVPixelBufferGetBytesPerRowOfPlane(pixelBuffer, 0);
  result = (unsigned __int8 *)CVPixelBufferGetBaseAddressOfPlane(pixelBuffer, 0);
  if (Height >= 1)
  {
    for (i = 0; i != Height; ++i)
    {
      if (Width >= 1)
      {
        v9 = 0;
        v10 = *((_QWORD *)this + 1);
        do
          ++*(_DWORD *)(v10 + 4 * result[v9++]);
        while (Width != v9);
      }
      result += BytesPerRowOfPlane;
    }
  }
  return result;
}

char *ma::Histogram::ChromaHistogram(ma::Histogram *this, CVPixelBufferRef pixelBuffer)
{
  int Width;
  int Height;
  int v6;
  int v7;
  size_t BytesPerRowOfPlane;
  char *result;
  int v10;
  int v11;
  uint64_t v12;
  unsigned __int8 *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unsigned __int8 *v17;
  unsigned int v18;

  Width = CVPixelBufferGetWidth(pixelBuffer);
  Height = CVPixelBufferGetHeight(pixelBuffer);
  v6 = Height;
  if (Height >= 0)
    v7 = Height;
  else
    v7 = Height + 1;
  BytesPerRowOfPlane = CVPixelBufferGetBytesPerRowOfPlane(pixelBuffer, 1uLL);
  result = (char *)CVPixelBufferGetBaseAddressOfPlane(pixelBuffer, 1uLL);
  if (result && v6 >= 2)
  {
    v10 = 0;
    if (Width >= 0)
      v11 = Width;
    else
      v11 = Width + 1;
    v12 = (v11 >> 1);
    v13 = (unsigned __int8 *)(result + 1);
    do
    {
      if (Width >= 2)
      {
        v14 = *((_QWORD *)this + 2);
        v15 = *((_QWORD *)this + 3);
        v16 = v12;
        v17 = v13;
        do
        {
          ++*(_DWORD *)(v14 + 4 * *(v17 - 1));
          v18 = *v17;
          v17 += 2;
          ++*(_DWORD *)(v15 + 4 * v18);
          --v16;
        }
        while (v16);
      }
      ++v10;
      v13 += BytesPerRowOfPlane;
    }
    while (v10 != v7 >> 1);
  }
  return result;
}

float ma::Histogram::MomentsHistogram(ma::Histogram *this, CVPixelBufferRef pixelBuffer)
{
  int Width;
  int Height;
  size_t BytesPerRowOfPlane;
  unsigned __int8 *BaseAddressOfPlane;
  int v8;
  int v9;
  int v10;
  int v11;
  int v12;
  int v13;
  int v14;
  int v15;
  int v16;
  int v17;
  uint64_t v18;
  uint64_t v19;
  int v20;
  uint64_t v21;
  int v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  double v27;
  float v28;
  float v29;
  float v30;
  _OWORD v32[5];
  _OWORD v33[10];
  _OWORD v34[10];
  uint64_t v35;

  v35 = *MEMORY[0x1E0C80C00];
  Width = CVPixelBufferGetWidth(pixelBuffer);
  Height = CVPixelBufferGetHeight(pixelBuffer);
  BytesPerRowOfPlane = CVPixelBufferGetBytesPerRowOfPlane(pixelBuffer, 0);
  BaseAddressOfPlane = (unsigned __int8 *)CVPixelBufferGetBaseAddressOfPlane(pixelBuffer, 0);
  memset(v34, 0, 32);
  if (Width >= 0)
    v8 = Width;
  else
    v8 = Width + 1;
  if (Width >= 0)
    v9 = Width;
  else
    v9 = Width + 3;
  memset(&v34[2], 0, 32);
  if (Height >= 0)
    v10 = Height;
  else
    v10 = Height + 1;
  if (Height >= 0)
    v11 = Height;
  else
    v11 = Height + 3;
  memset(&v34[4], 0, 96);
  memset(v33, 0, sizeof(v33));
  memset(v32, 0, sizeof(v32));
  if (Height >= 4)
  {
    v12 = 0;
    v13 = v8 >> 1;
    v14 = v10 >> 1;
    v15 = v9 >> 2;
    v16 = v11 >> 2;
    v17 = 4 * v16;
    LODWORD(v18) = 4 * v15;
    if (4 * v15 <= 1)
      v18 = 1;
    else
      v18 = v18;
    if (v17 <= 1)
      v17 = 1;
    do
    {
      if (Width >= 4)
      {
        v19 = 0;
        do
        {
          v20 = (int)v19 / v13 + 2 * (v12 / v14);
          v21 = BaseAddressOfPlane[v19];
          v22 = 4 * (v12 / v16) + 4 + (int)v19 / v15;
          *((_QWORD *)v34 + v20) += v21;
          *((_QWORD *)v34 + v22) += v21;
          v23 = (v21 * v21);
          *((_QWORD *)v33 + v20) += v23;
          *((_QWORD *)v33 + v22) += v23;
          ++*((_DWORD *)v32 + v20);
          ++*((_DWORD *)v32 + v22);
          ++v19;
        }
        while (v18 != v19);
      }
      ++v12;
      BaseAddressOfPlane += BytesPerRowOfPlane;
    }
    while (v12 != v17);
  }
  v24 = 0;
  v25 = *((_QWORD *)this + 4);
  v26 = *((_QWORD *)this + 5);
  v27 = 0.5;
  do
  {
    v28 = (float)*((int *)v32 + v24);
    v29 = (float)*((uint64_t *)v34 + v24) / v28;
    v30 = (float)((float)*((uint64_t *)v33 + v24) / v28) - (float)(v29 * v29);
    *(_DWORD *)(v25 + 4 * v24) = vcvtmd_s64_f64(v29 + 0.5);
    *(_DWORD *)(v26 + 4 * v24++) = vcvtmd_s64_f64(v30 + 0.5);
  }
  while (v24 != 20);
  return *(float *)&v27;
}

uint64_t ma::Histogram::Initialize(ma::Histogram *this, CVPixelBufferRef pixelBuffer, int a3)
{
  uint64_t v6;
  const std::nothrow_t *v7;
  void *v8;
  uint64_t v9;
  char v10;
  const std::nothrow_t *v11;
  __int128 v12;
  char v13;
  char *v14;
  _OWORD *v15;
  _QWORD *v16;
  _OWORD *v17;
  uint64_t v18;
  uint64_t v19;
  _BOOL8 v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  size_t v28;
  uint64_t v29;
  uint64_t v30;
  size_t Width;
  uint64_t v32;
  int v33;
  int v34;
  size_t v35;
  _QWORD block[6];
  int v38;
  CVPixelBufferRef pixelBuffera;
  CVPixelBufferLockFlags unlockFlags;

  if (CVPixelBufferGetPixelFormatType(pixelBuffer) != 875704438)
    return 4294967246;
  v6 = 8;
  v7 = (const std::nothrow_t *)MEMORY[0x1E0DE4E10];
  do
  {
    v8 = *(void **)((char *)this + v6);
    if (!v8)
    {
      v8 = operator new[](0x400uLL, v7);
      *(_QWORD *)((char *)this + v6) = v8;
      if (!v8)
        return 4294967188;
    }
    bzero(v8, 0x400uLL);
    v6 += 8;
  }
  while (v6 != 32);
  if (a3)
  {
    v9 = 0;
    v10 = 1;
    v11 = (const std::nothrow_t *)MEMORY[0x1E0DE4E10];
    v12 = 0uLL;
    do
    {
      v13 = v10;
      v14 = (char *)this + 8 * v9;
      v17 = (_OWORD *)*((_QWORD *)v14 + 4);
      v16 = v14 + 32;
      v15 = v17;
      if (!v17)
      {
        v15 = operator new[](0x50uLL, v11);
        v12 = 0uLL;
        *v16 = v15;
        if (!v15)
          return 4294967188;
      }
      v10 = 0;
      v15[3] = v12;
      v15[4] = v12;
      v15[1] = v12;
      v15[2] = v12;
      v9 = 1;
      *v15 = v12;
    }
    while ((v13 & 1) != 0);
  }
  pixelBuffera = pixelBuffer;
  unlockFlags = 1;
  if (pixelBuffer)
  {
    v18 = CVPixelBufferLockBaseAddress(pixelBuffer, 1uLL);
    v38 = v18;
    if ((_DWORD)v18)
    {
      v19 = v18;
      if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
        -[VCPVideoCNNAnalyzer copyImage:withChannels:settling:].cold.3();
    }
    else
    {
      if (a3)
        v28 = 3;
      else
        v28 = 2;
      block[0] = MEMORY[0x1E0C809B0];
      block[1] = 0x40000000;
      block[2] = ___ZN2ma9Histogram10InitializeEP10__CVBufferb_block_invoke;
      block[3] = &__block_descriptor_tmp;
      block[4] = this;
      block[5] = pixelBuffer;
      dispatch_apply(v28, 0, block);
      v19 = CVPixelBufferLock::Unlock((CVPixelBufferLock *)&v38);
      if (!(_DWORD)v19)
      {
        v29 = 0;
        v30 = 1020;
        do
        {
          LODWORD(v19) = *(_DWORD *)(*((_QWORD *)this + 1) + v29) + v19 + *(_DWORD *)(*((_QWORD *)this + 1) + v30);
          v30 -= 4;
          v29 += 4;
        }
        while (v29 != 120);
        Width = CVPixelBufferGetWidth(pixelBuffer);
        *(float *)this = (float)(int)v19 / (float)(CVPixelBufferGetHeight(pixelBuffer) * Width);
        v32 = *((_QWORD *)this + 1);
        v33 = *(_DWORD *)(v32 + 940);
        v34 = *(_DWORD *)(v32 + 936);
        v35 = CVPixelBufferGetWidth(pixelBuffer);
        v19 = 0;
        *((float *)this + 1) = (float)(v34 + v33) / (float)(CVPixelBufferGetHeight(pixelBuffer) * v35);
      }
    }
  }
  else
  {
    v20 = os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR);
    if (v20)
      ma::EncodeStats::GenerateSubMacroBlockStats(v20, v21, v22, v23, v24, v25, v26, v27);
    v19 = 4294967246;
    v38 = -50;
  }
  if (pixelBuffera
    && !v38
    && CVPixelBufferUnlockBaseAddress(pixelBuffera, unlockFlags)
    && os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
  {
    -[VCPCNNSmileDetector detectSmileForFace:inBuffer:smile:].cold.1();
  }
  return v19;
}

void sub_1B6E9D308(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  va_list va;

  va_start(va, a8);
  CVPixelBufferLock::~CVPixelBufferLock((CVPixelBufferLock *)va);
  _Unwind_Resume(a1);
}

float ___ZN2ma9Histogram10InitializeEP10__CVBufferb_block_invoke(uint64_t a1, uint64_t a2)
{
  ma::Histogram *v3;
  float result;

  v3 = *(ma::Histogram **)(a1 + 32);
  if (a2 == 1)
  {
    ma::Histogram::ChromaHistogram(v3, *(CVPixelBufferRef *)(a1 + 40));
  }
  else if (a2)
  {
    return ma::Histogram::MomentsHistogram(v3, *(CVPixelBufferRef *)(a1 + 40));
  }
  else
  {
    ma::Histogram::LumaHistogram(v3, *(CVPixelBufferRef *)(a1 + 40));
  }
  return result;
}

uint64_t ma::Histogram::InitializeAsIdealExposureHistogram(ma::Histogram *this, int a2)
{
  uint64_t v3;
  const std::nothrow_t *v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  int32x4_t v8;
  float32x4_t v9;
  float32x4_t v10;
  float32x4_t v11;
  float v12;
  float32x4_t v13;
  float v14;
  float32x4_t v15;
  float v17;
  int32x4_t v18;
  float v19;
  float32x4_t v20;
  float32x4_t v21;
  float32x4_t v22;

  if (a2 < 1)
    return 4294967246;
  v17 = (float)a2 / 80.212;
  v3 = 8;
  v4 = (const std::nothrow_t *)MEMORY[0x1E0DE4E10];
  do
  {
    v5 = *(void **)((char *)this + v3);
    if (!v5)
    {
      v5 = operator new[](0x400uLL, v4);
      *(_QWORD *)((char *)this + v3) = v5;
      if (!v5)
        return 4294967188;
    }
    bzero(v5, 0x400uLL);
    v3 += 8;
  }
  while (v3 != 32);
  v6 = 0;
  v7 = *((_QWORD *)this + 1);
  v8 = (int32x4_t)xmmword_1B6FBF530;
  do
  {
    v18 = v8;
    v9.i64[0] = 0xC3000000C3000000;
    v9.i64[1] = 0xC3000000C3000000;
    v10 = vaddq_f32(vcvtq_f32_s32(v8), v9);
    v9.i64[0] = 0xBA000000BA000000;
    v9.i64[1] = 0xBA000000BA000000;
    v22 = vmulq_f32(vmulq_f32(v10, v10), v9);
    v19 = expf(v22.f32[1]);
    v11.f32[0] = expf(v22.f32[0]);
    v11.f32[1] = v19;
    v20 = v11;
    v12 = expf(v22.f32[2]);
    v13 = v20;
    v13.f32[2] = v12;
    v21 = v13;
    v14 = expf(v22.f32[3]);
    v15 = v21;
    v15.f32[3] = v14;
    *(int32x4_t *)(v7 + v6) = vcvtq_s32_f32(vrndaq_f32(vmulq_n_f32(v15, v17)));
    v15.i64[0] = 0x400000004;
    v15.i64[1] = 0x400000004;
    v8 = vaddq_s32(v18, (int32x4_t)v15);
    v6 += 16;
  }
  while (v6 != 1024);
  return 0;
}

BOOL ma::Histogram::NoInfo(ma::Histogram *this)
{
  return *(float *)this > 0.9 || *((float *)this + 1) > 0.3;
}

float ma::Histogram::EarthMoverDistance(ma::Histogram *this, const ma::Histogram *a2)
{
  uint64_t v2;
  float v3;
  uint64_t v4;
  float v5;
  float v6;
  float v7;
  float v8;
  float v9;
  float v10;

  v2 = 0;
  v3 = 0.0;
  do
  {
    v4 = 0;
    v5 = 0.0;
    v6 = 0.0;
    v7 = 0.0;
    do
    {
      v8 = (float)*(int *)(*((_QWORD *)this + v2 + 1) + v4);
      v9 = v7 + v8;
      v10 = (float)*(int *)(*((_QWORD *)a2 + v2 + 1) + v4);
      v7 = (float)(v7 + v8) - v10;
      v5 = v5 + vabds_f32(v9, v10);
      v6 = v6 + v8;
      v4 += 4;
    }
    while (v4 != 1024);
    v3 = (float)(v5 / v6) + v3;
    ++v2;
  }
  while (v2 != 3);
  return v3 / 3.0;
}

float ma::Histogram::EarthMoverDistance(ma::Histogram *this, const ma::Histogram *a2, int a3)
{
  uint64_t v3;
  float v4;
  float v5;
  float v6;
  float v7;
  float v8;
  float v9;

  v3 = 0;
  v4 = 0.0;
  v5 = 0.0;
  v6 = 0.0;
  do
  {
    v7 = (float)*(int *)(*((_QWORD *)this + a3 + 1) + v3);
    v8 = v6 + v7;
    v9 = (float)*(int *)(*((_QWORD *)a2 + a3 + 1) + v3);
    v6 = (float)(v6 + v7) - v9;
    v4 = v4 + vabds_f32(v8, v9);
    v5 = v5 + v7;
    v3 += 4;
  }
  while (v3 != 1024);
  return v4 / v5;
}

void sub_1B6E9D6D4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;

  v6 = v5;

  _Unwind_Resume(a1);
}

void sub_1B6E9D848(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, objc_super a10)
{
  void *v10;
  void *v11;
  void *v12;

  a10.super_class = (Class)VCPPhotosSceneprintAssetProcessingTask;
  -[_Unwind_Exception dealloc](&a10, sel_dealloc);
  _Unwind_Resume(a1);
}

void sub_1B6E9D92C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_1B6E9E21C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, uint64_t a15, uint64_t a16, void *a17, void *a18, uint64_t a19, uint64_t a20,void *a21)
{
  void *v21;
  void *v22;
  void *v23;

  _Unwind_Resume(a1);
}

void sub_1B6E9E530(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{

  _Unwind_Resume(a1);
}

void sub_1B6E9E7A0(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1B6E9EAA8(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1B6E9EF34(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1B6E9F35C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1B6E9F430(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1B6E9F788(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1B6E9F8D8(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1B6E9FBC8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9, uint64_t a10, uint64_t a11, void *a12)
{

  _Unwind_Resume(a1);
}

void sub_1B6E9FF18(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  void *v14;

  _Unwind_Resume(a1);
}

void sub_1B6EA064C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_1B6EA096C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1B6EA0BE0(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1B6EA0C80(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1B6EA1210(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, char a20,uint64_t a21,uint64_t a22,uint64_t a23,char a24,uint64_t a25,uint64_t a26,uint64_t a27,char a28)
{
  void *v28;
  void *v29;
  void *v30;
  void *v31;
  void *v32;
  void *v33;
  uint64_t v34;

  _Block_object_dispose(&a20, 8);
  _Block_object_dispose(&a24, 8);
  _Block_object_dispose(&a28, 8);
  _Block_object_dispose((const void *)(v34 - 136), 8);

  _Unwind_Resume(a1);
}

void sub_1B6EA1378(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;
  void *v11;

  _Unwind_Resume(a1);
}

void sub_1B6EA15E4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9, void *a10)
{
  void *v10;
  void *v11;

  _Unwind_Resume(a1);
}

void sub_1B6EA1C68(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1B6EA1E5C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1B6EA29FC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *a20)
{
  void *v20;
  void *v21;
  void *v22;
  void *v23;
  void *v24;
  void *v25;
  void *v26;

  _Unwind_Resume(a1);
}

void sub_1B6EA2F44(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_1B6EA31A0(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1B6EA3214(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1B6EA32B0(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1B6EA3364(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1B6EA34C0(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_1B6EA3690(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1B6EA3764(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1B6EA3B5C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
  if (a2)
    __clang_call_terminate(exception_object);
  _Unwind_Resume(exception_object);
}

void sub_1B6EA3D3C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1B6EA3E48(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1B6EA3F28(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1B6EA40FC(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1B6EA44CC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{

  _Unwind_Resume(a1);
}

void sub_1B6EA4598(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

uint64_t MADProtoFaceAssetReadFrom(uint64_t a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  char v14;
  BOOL v15;
  int v16;
  uint64_t v18;
  uint64_t v19;
  uint64_t result;
  void *v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  char v25;
  unsigned int v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  char v31;
  uint64_t v32;
  unint64_t v33;
  MADProtoDetectedFace *v34;
  uint64_t v35;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) >= *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
    return *(_BYTE *)(a2 + *v5) == 0;
  v7 = (int *)MEMORY[0x1E0D82BB8];
  while (2)
  {
    if (*(_BYTE *)(a2 + *v5))
      return *(_BYTE *)(a2 + *v5) == 0;
    v8 = 0;
    v9 = 0;
    v10 = 0;
    while (1)
    {
      v11 = *v3;
      v12 = *(_QWORD *)(a2 + v11);
      v13 = v12 + 1;
      if (v12 == -1 || v13 > *(_QWORD *)(a2 + *v4))
        break;
      v14 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
      *(_QWORD *)(a2 + v11) = v13;
      v10 |= (unint64_t)(v14 & 0x7F) << v8;
      if ((v14 & 0x80) == 0)
        goto LABEL_12;
      v8 += 7;
      v15 = v9++ >= 9;
      if (v15)
      {
        v10 = 0;
        v16 = *(unsigned __int8 *)(a2 + *v5);
        goto LABEL_14;
      }
    }
    *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
    v16 = *(unsigned __int8 *)(a2 + *v5);
    if (*(_BYTE *)(a2 + *v5))
      v10 = 0;
LABEL_14:
    if (v16 || (v10 & 7) == 4)
      return *(_BYTE *)(a2 + *v5) == 0;
    switch((v10 >> 3))
    {
      case 1u:
        PBReaderReadString();
        v18 = objc_claimAutoreleasedReturnValue();
        v19 = 40;
        goto LABEL_23;
      case 2u:
        PBReaderReadString();
        v18 = objc_claimAutoreleasedReturnValue();
        v19 = 32;
LABEL_23:
        v21 = *(void **)(a1 + v19);
        *(_QWORD *)(a1 + v19) = v18;

        goto LABEL_49;
      case 3u:
        *(_BYTE *)(a1 + 56) |= 2u;
        v22 = *v3;
        v23 = *(_QWORD *)(a2 + v22);
        if (v23 <= 0xFFFFFFFFFFFFFFF7 && v23 + 8 <= *(_QWORD *)(a2 + *v4))
        {
          v24 = *(_QWORD *)(*(_QWORD *)(a2 + *v7) + v23);
          *(_QWORD *)(a2 + v22) = v23 + 8;
        }
        else
        {
          *(_BYTE *)(a2 + *v5) = 1;
          v24 = 0;
        }
        v35 = 16;
        goto LABEL_48;
      case 4u:
        v25 = 0;
        v26 = 0;
        v27 = 0;
        *(_BYTE *)(a1 + 56) |= 4u;
        while (2)
        {
          v28 = *v3;
          v29 = *(_QWORD *)(a2 + v28);
          v30 = v29 + 1;
          if (v29 == -1 || v30 > *(_QWORD *)(a2 + *v4))
          {
            *(_BYTE *)(a2 + *v5) = 1;
          }
          else
          {
            v31 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v29);
            *(_QWORD *)(a2 + v28) = v30;
            v27 |= (unint64_t)(v31 & 0x7F) << v25;
            if (v31 < 0)
            {
              v25 += 7;
              v15 = v26++ >= 9;
              if (v15)
              {
                LODWORD(v27) = 0;
                goto LABEL_43;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(a2 + *v5))
          LODWORD(v27) = 0;
LABEL_43:
        *(_DWORD *)(a1 + 24) = v27;
        goto LABEL_49;
      case 5u:
        *(_BYTE *)(a1 + 56) |= 1u;
        v32 = *v3;
        v33 = *(_QWORD *)(a2 + v32);
        if (v33 <= 0xFFFFFFFFFFFFFFF7 && v33 + 8 <= *(_QWORD *)(a2 + *v4))
        {
          v24 = *(_QWORD *)(*(_QWORD *)(a2 + *v7) + v33);
          *(_QWORD *)(a2 + v32) = v33 + 8;
        }
        else
        {
          *(_BYTE *)(a2 + *v5) = 1;
          v24 = 0;
        }
        v35 = 8;
LABEL_48:
        *(_QWORD *)(a1 + v35) = v24;
        goto LABEL_49;
      case 6u:
        v34 = objc_alloc_init(MADProtoDetectedFace);
        objc_msgSend((id)a1, "addDetectedFaces:", v34);
        if (PBReaderPlaceMark() && (MADProtoDetectedFaceReadFrom((uint64_t)v34, a2) & 1) != 0)
        {
          PBReaderRecallMark();

LABEL_49:
          if (*(_QWORD *)(a2 + *v3) >= *(_QWORD *)(a2 + *v4))
            return *(_BYTE *)(a2 + *v5) == 0;
          continue;
        }

        return 0;
      default:
        result = PBReaderSkipValueWithTag();
        if (!(_DWORD)result)
          return result;
        goto LABEL_49;
    }
  }
}

void sub_1B6EA5B48(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;

  v6 = v5;

  _Unwind_Resume(a1);
}

void sub_1B6EA5CC0(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  v4 = v3;

  _Unwind_Resume(a1);
}

void sub_1B6EA5F64(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1B6EA6014(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1B6EA6160(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

uint64_t __Block_byref_object_copy__41(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void __Block_byref_object_dispose__41(uint64_t a1)
{

}

void sub_1B6EA70CC(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  uint64_t v3;

  MEMORY[0x1BCCA12A4](v3, MEMORY[0x1E0DE4E10]);

  _Unwind_Resume(a1);
}

void sub_1B6EA7A58(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13)
{
  void *v13;

  _Unwind_Resume(a1);
}

void sub_1B6EA8000(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

uint64_t Scaler::InitializePixelBufferPool(Scaler *this, uint64_t a2, uint64_t a3, uint64_t a4)
{
  void *v7;
  void *v8;
  void *v9;
  uint64_t v10;
  void *v11;
  uint64_t v12;
  void *v13;
  const __CFDictionary *v14;
  uint64_t v15;
  _QWORD v17[6];
  _QWORD v18[7];

  v18[6] = *MEMORY[0x1E0C80C00];
  this->width_ = a2;
  this->height_ = a3;
  this->format_ = a4;
  v17[0] = *MEMORY[0x1E0CA9040];
  objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithUnsignedInt:", a4);
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  v18[0] = v7;
  v17[1] = *MEMORY[0x1E0CA90E0];
  objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInt:", a2);
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  v18[1] = v8;
  v17[2] = *MEMORY[0x1E0CA8FD8];
  objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInt:", a3);
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  v18[2] = v9;
  v17[3] = *MEMORY[0x1E0CA8FB8];
  if ((a2 & 0xF) != 0)
    v10 = 16 - (a2 & 0xF);
  else
    v10 = 0;
  objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInt:", v10);
  v11 = (void *)objc_claimAutoreleasedReturnValue();
  v18[3] = v11;
  v17[4] = *MEMORY[0x1E0CA8FA0];
  if ((a3 & 0xF) != 0)
    v12 = 16 - (a3 & 0xF);
  else
    v12 = 0;
  objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInt:", v12);
  v13 = (void *)objc_claimAutoreleasedReturnValue();
  v17[5] = *MEMORY[0x1E0CA8FF0];
  v18[4] = v13;
  v18[5] = MEMORY[0x1E0C9AA70];
  objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", v18, v17, 6);
  v14 = (const __CFDictionary *)objc_claimAutoreleasedReturnValue();

  if (this->pool_.value_)
  {
    CFRelease(this->pool_.value_);
    this->pool_.value_ = 0;
  }
  v15 = CVPixelBufferPoolCreate(0, 0, v14, &this->pool_.value_);
  if ((_DWORD)v15 && this->pool_.value_)
  {
    CFRelease(this->pool_.value_);
    this->pool_.value_ = 0;
  }

  return v15;
}

void sub_1B6EA823C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

uint64_t Scaler::ScaleCropped(Scaler *this, CGRect a2, __CVBuffer *a3, __CVBuffer **a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  __CVBuffer *v11;
  double height;
  double width;
  double y;
  double x;
  int v17;
  int v18;
  uint64_t PixelBuffer;
  CF<OpaqueVTPixelTransferSession *> *p_transfer_session;
  double v22;
  double v23;
  unsigned int v24;
  unsigned int v25;
  float v27;
  float v28;
  __IOSurface *IOSurface;
  uint8_t v30[16];
  CFTypeRef value;
  CFTypeRef cf;
  CGRect v33;

  v11 = a3;
  height = a2.size.height;
  width = a2.size.width;
  y = a2.origin.y;
  x = a2.origin.x;
  *a4 = 0;
  v17 = CVPixelBufferGetWidth(a3);
  v18 = CVPixelBufferGetHeight(v11);
  cf = 0;
  if (*(_QWORD *)&this->width_ != __PAIR64__(a6, a5) || this->format_ != (_DWORD)a7)
  {
    PixelBuffer = Scaler::InitializePixelBufferPool(this, a5, a6, a7);
    if ((_DWORD)PixelBuffer)
      goto LABEL_4;
  }
  p_transfer_session = &this->transfer_session_;
  if (!this->transfer_session_.value_)
  {
    PixelBuffer = VTPixelTransferSessionCreate(0, &this->transfer_session_.value_);
    if ((_DWORD)PixelBuffer)
      goto LABEL_4;
  }
  v33.origin.x = x;
  v33.origin.y = y;
  v33.size.width = width;
  v33.size.height = height;
  if (CGRectIsEmpty(v33))
  {
    VTSessionSetProperty(p_transfer_session->value_, (CFStringRef)*MEMORY[0x1E0CED848], 0);
  }
  else
  {
    PixelBuffer = 4294967246;
    if (x < 0.0 || x > 1.0 || y < 0.0 || y > 1.0 || width < 0.0 || width > 1.0 || height < 0.0 || height > 1.0)
      goto LABEL_4;
    v22 = 1.0 - x;
    if (1.0 - x >= width)
      v22 = width;
    v23 = 1.0 - y;
    if (1.0 - y >= height)
      v23 = height;
    v24 = (int)(v22 * (double)v17) & 0xFFFFFFFE;
    v25 = (int)(v23 * (double)v18) & 0xFFFFFFFE;
    if (!v24 || v25 == 0)
      goto LABEL_4;
    v27 = x + v22 * 0.5;
    v28 = y + v23 * 0.5;
    value = CleanApertureDictionary(v24, v25, (int)(float)((float)(v27 + -0.5) * (float)v17) & 0xFFFFFFFE, (int)(float)((float)(v28 + -0.5) * (float)v18) & 0xFFFFFFFE);
    if (value)
    {
      IOSurface = CVPixelBufferGetIOSurface(v11);
      if (IOSurface)
      {
        PixelBuffer = CVPixelBufferCreateWithIOSurface(0, IOSurface, 0, (CVPixelBufferRef *)&cf);
        if ((_DWORD)PixelBuffer)
        {
          CF<opaqueCMSampleBuffer *>::~CF(&value);
          goto LABEL_4;
        }
        CVBufferPropagateAttachments(v11, (CVBufferRef)cf);
        v11 = (__CVBuffer *)cf;
      }
      else if ((int)MediaAnalysisLogLevel() >= 4 && os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)v30 = 0;
        _os_log_impl(&dword_1B6C4A000, MEMORY[0x1E0C81028], OS_LOG_TYPE_DEFAULT, "Scaler: sets CleanAperture on input pixel buffer (not iosurface-backed)", v30, 2u);
      }
      CVBufferSetAttachment(v11, (CFStringRef)*MEMORY[0x1E0CA8D50], value, kCVAttachmentMode_ShouldNotPropagate);
    }
    VTSessionSetProperty(p_transfer_session->value_, (CFStringRef)*MEMORY[0x1E0CED848], (CFTypeRef)*MEMORY[0x1E0CEDB30]);
    CF<opaqueCMSampleBuffer *>::~CF(&value);
  }
  PixelBuffer = CVPixelBufferPoolCreatePixelBuffer(0, this->pool_.value_, a4);
  if (!(_DWORD)PixelBuffer)
  {
    PixelBuffer = VTPixelTransferSessionTransferImage(p_transfer_session->value_, v11, *a4);
    if (!(_DWORD)PixelBuffer)
    {
      CVBufferPropagateAttachments(v11, *a4);
      PixelBuffer = 0;
      goto LABEL_6;
    }
  }
LABEL_4:
  if (*a4)
  {
    CFRelease(*a4);
    *a4 = 0;
  }
LABEL_6:
  CF<opaqueCMSampleBuffer *>::~CF(&cf);
  return PixelBuffer;
}

void sub_1B6EA85F8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  const void *v4;
  va_list va;
  va_list va1;

  va_start(va1, a3);
  va_start(va, a3);
  v4 = va_arg(va1, const void *);
  CF<opaqueCMSampleBuffer *>::~CF((const void **)va);
  CF<opaqueCMSampleBuffer *>::~CF((const void **)va1);
  _Unwind_Resume(a1);
}

CFTypeRef CleanApertureDictionary(int a1, int a2, int a3, int a4)
{
  CFMutableDictionaryRef Mutable;
  __CFDictionary *v9;
  CFNumberRef v10;
  int v11;
  CFNumberRef v12;
  int v13;
  CFNumberRef v14;
  int v15;
  CFNumberRef v16;
  int v17;
  CFTypeRef v18;
  CFTypeRef cf;
  int valuePtr;
  CFNumberRef v22;

  Mutable = CFDictionaryCreateMutable(0, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  cf = Mutable;
  if (!Mutable)
    goto LABEL_19;
  v9 = Mutable;
  valuePtr = a1;
  v10 = CFNumberCreate(0, kCFNumberSInt32Type, &valuePtr);
  v22 = v10;
  if (v10)
  {
    CFDictionarySetValue(v9, (const void *)*MEMORY[0x1E0CA8D60], v10);
    v11 = 0;
  }
  else
  {
    v11 = -108;
  }
  CF<opaqueCMSampleBuffer *>::~CF((const void **)&v22);
  valuePtr = a2;
  v12 = CFNumberCreate(0, kCFNumberSInt32Type, &valuePtr);
  v22 = v12;
  if (v12)
  {
    CFDictionarySetValue((CFMutableDictionaryRef)cf, (const void *)*MEMORY[0x1E0CA8D40], v12);
    v13 = 0;
  }
  else
  {
    v13 = -108;
  }
  CF<opaqueCMSampleBuffer *>::~CF((const void **)&v22);
  valuePtr = a3;
  v14 = CFNumberCreate(0, kCFNumberSInt32Type, &valuePtr);
  v22 = v14;
  if (v14)
  {
    CFDictionarySetValue((CFMutableDictionaryRef)cf, (const void *)*MEMORY[0x1E0CA8D48], v14);
    v15 = 0;
  }
  else
  {
    v15 = -108;
  }
  CF<opaqueCMSampleBuffer *>::~CF((const void **)&v22);
  valuePtr = a4;
  v16 = CFNumberCreate(0, kCFNumberSInt32Type, &valuePtr);
  v22 = v16;
  if (v16)
  {
    CFDictionarySetValue((CFMutableDictionaryRef)cf, (const void *)*MEMORY[0x1E0CA8D58], v16);
    v17 = 0;
  }
  else
  {
    v17 = -108;
  }
  CF<opaqueCMSampleBuffer *>::~CF((const void **)&v22);
  if (!(v13 | v11 | v15 | v17))
  {
    if (cf)
    {
      v18 = CFRetain(cf);
      goto LABEL_20;
    }
LABEL_19:
    v18 = 0;
    goto LABEL_20;
  }
  if (!cf)
    goto LABEL_19;
  CFRelease(cf);
  v18 = 0;
  cf = 0;
LABEL_20:
  CF<opaqueCMSampleBuffer *>::~CF(&cf);
  return v18;
}

void sub_1B6EA8814(_Unwind_Exception *a1, uint64_t a2, ...)
{
  const void *v3;
  va_list va;
  uint64_t v5;
  va_list va1;

  va_start(va1, a2);
  va_start(va, a2);
  v3 = va_arg(va1, const void *);
  v5 = va_arg(va1, _QWORD);
  CF<opaqueCMSampleBuffer *>::~CF((const void **)va1);
  CF<opaqueCMSampleBuffer *>::~CF((const void **)va);
  _Unwind_Resume(a1);
}

void Scaler::Scale(Scaler *this, __CVBuffer *a2, __CVBuffer **a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  Scaler::ScaleCropped(this, *MEMORY[0x1E0C9D648], a2, a3, a4, a5, a6);
}

double ma::LandmarkDetector::LandmarkDetector(ma::LandmarkDetector *this)
{
  double result;

  *(_QWORD *)this = 0;
  *((_QWORD *)this + 1) = 0;
  *(_QWORD *)((char *)this + 21) = 0;
  *((_QWORD *)this + 2) = 0;
  result = 0.0;
  *((_OWORD *)this + 2) = 0u;
  *((_OWORD *)this + 3) = 0u;
  *((_OWORD *)this + 4) = 0u;
  *((_QWORD *)this + 10) = 0;
  return result;
}

void ma::LandmarkDetector::~LandmarkDetector(ma::LandmarkDetector *this)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v2 = *((_QWORD *)this + 4);
  if (v2)
    MEMORY[0x1BCCA128C](v2, 0x1000C8052888210);
  v3 = *((_QWORD *)this + 5);
  if (v3)
    MEMORY[0x1BCCA128C](v3, 0x1000C8052888210);
  v4 = *((_QWORD *)this + 6);
  if (v4)
    MEMORY[0x1BCCA128C](v4, 0x1000C8052888210);
  v5 = *((_QWORD *)this + 7);
  if (v5)
    MEMORY[0x1BCCA128C](v5, 0x1000C8052888210);
  v6 = *((_QWORD *)this + 8);
  if (v6)
    MEMORY[0x1BCCA128C](v6, 0x1000C8000313F17);
  v7 = *((_QWORD *)this + 9);
  if (v7)
    MEMORY[0x1BCCA128C](v7, 0x1000C80D8EEE597);
}

uint64_t ma::LandmarkDetector::Initialize(ma::LandmarkDetector *this, __sFILE *a2, int a3, int a4, int a5, int a6, int a7)
{
  int v12;
  size_t v13;
  const std::nothrow_t *v14;
  void *v15;
  void *v16;
  void *v17;
  int v18;
  size_t v19;
  uint64_t v20;
  size_t v21;
  void *v22;
  void *v23;
  unint64_t v24;
  size_t v25;
  void *v26;
  uint64_t result;

  *(_DWORD *)this = a3;
  *((_DWORD *)this + 1) = a4;
  *((_DWORD *)this + 2) = a5;
  *((_DWORD *)this + 3) = a6;
  v12 = 1 << (a6 - 1);
  *((_DWORD *)this + 4) = a7;
  *((_DWORD *)this + 5) = v12 - 1;
  *((_DWORD *)this + 6) = v12;
  if (a4 < 0)
    v13 = -1;
  else
    v13 = 8 * a4;
  v14 = (const std::nothrow_t *)MEMORY[0x1E0DE4E10];
  v15 = operator new[](v13, MEMORY[0x1E0DE4E10]);
  *((_QWORD *)this + 4) = v15;
  v16 = operator new[](v13, v14);
  *((_QWORD *)this + 5) = v16;
  v17 = operator new[](v13, v14);
  *((_QWORD *)this + 6) = v17;
  v18 = a7 * a3;
  if (a7 * a3 < 0)
    v19 = -1;
  else
    v19 = 4 * v18;
  v20 = 8 * v18;
  if (a7 * a3 < 0)
    v21 = -1;
  else
    v21 = v20;
  v22 = operator new[](v19, v14);
  *((_QWORD *)this + 7) = v22;
  v23 = operator new[](v21, v14);
  *((_QWORD *)this + 8) = v23;
  v24 = a5 * a3;
  if (is_mul_ok(v24, 0x1180uLL))
    v25 = 4480 * v24;
  else
    v25 = -1;
  v26 = operator new[](v25, v14);
  *((_QWORD *)this + 9) = v26;
  result = 4294967188;
  if (v15 && v16 && v17 && v22 && v23 && v26)
  {
    result = ma::LandmarkDetector::Deserialize(this, a2);
    if (!(_DWORD)result)
      *((_QWORD *)this + 10) = ma::AdjustLandmark_neon_;
  }
  return result;
}

uint64_t ma::LandmarkDetector::Deserialize(ma::LandmarkDetector *this, __sFILE *a2)
{
  int v4;
  int v5;
  size_t v6;
  const std::nothrow_t *v7;
  void *v8;
  void *v9;
  void *v10;
  void *v12;
  __int16 *v13;
  uint64_t v14;
  _DWORD *v16;
  uint64_t v17;
  __int16 *v18;
  __int16 v19;
  int v25;
  int v26;
  int v27;
  int v28;
  uint64_t v29;
  int v30;
  int v33;
  size_t v34;
  size_t v35;
  size_t v36;
  const std::nothrow_t *v37;
  size_t v38;
  uint64_t v39;
  uint64_t v40;
  size_t v41;
  float16x4_t v42;
  uint64_t v43;
  uint64_t v44;
  int v45;
  __int16 v46;
  int v47;
  _BYTE v48[18];

  *(_QWORD *)&v48[10] = *MEMORY[0x1E0C80C00];
  v4 = *((_DWORD *)this + 1);
  v5 = 2 * v4;
  if (v4 < 0)
    v6 = -1;
  else
    v6 = 2 * v5;
  v7 = (const std::nothrow_t *)MEMORY[0x1E0DE4E10];
  v8 = operator new[](v6, MEMORY[0x1E0DE4E10]);
  v9 = operator new[](v6, v7);
  v10 = v9;
  if (v8)
    _ZF = v9 == 0;
  else
    _ZF = 1;
  if (_ZF)
  {
    v12 = 0;
    v13 = 0;
    v14 = 4294967188;
    goto LABEL_10;
  }
  if (fread(v48, 0xAuLL, 1uLL, a2) != 1)
  {
    v13 = 0;
    v12 = 0;
    v14 = 4294967277;
LABEL_60:
    MEMORY[0x1BCCA128C](v8, 0x1000C80BDFB0063);
    if (!v10)
      goto LABEL_13;
    goto LABEL_12;
  }
  if (fread(v10, 2uLL, v5, a2) != v5)
    return 4294967277;
  if (v4)
  {
    v16 = (_DWORD *)*((_QWORD *)this + 5);
    if (v5 <= 1)
      v17 = 1;
    else
      v17 = v5;
    v18 = (__int16 *)v10;
    do
    {
      v19 = *v18++;
      _H0 = v19;
      __asm { FCVT            S0, H0 }
      *v16++ = _S0;
      --v17;
    }
    while (v17);
  }
  v25 = *(_DWORD *)this;
  if (*(int *)this >= 1)
  {
    v26 = 0;
    v27 = *((_DWORD *)this + 2);
    while (v27 < 1)
    {
LABEL_41:
      if (++v26 >= v25)
        goto LABEL_42;
    }
    v28 = 0;
    v45 = v26;
    while (1)
    {
      v29 = v27 * v26 + (uint64_t)v28;
      if (*((int *)this + 5) >= 1)
        break;
LABEL_35:
      if (*((int *)this + 6) >= 1)
      {
        v33 = 0;
        while (fread(v8, 2uLL, v5, a2) == v5)
        {
          ma::RegressionTree::SetLeaf(*((_QWORD *)this + 9) + 4480 * v29, v33++, *((_DWORD *)this + 1), v8);
          if (v33 >= *((_DWORD *)this + 6))
            goto LABEL_39;
        }
        goto LABEL_63;
      }
LABEL_39:
      ++v28;
      v27 = *((_DWORD *)this + 2);
      v26 = v45;
      if (v28 >= v27)
      {
        v25 = *(_DWORD *)this;
        goto LABEL_41;
      }
    }
    v30 = 0;
    while (1)
    {
      v46 = 0;
      if (fread(&v47, 4uLL, 1uLL, a2) != 1 || fread(&v46, 2uLL, 1uLL, a2) != 1)
        break;
      _H0 = v46;
      __asm { FCVT            S0, H0; float }
      ma::RegressionTree::SetNode(*((_QWORD *)this + 9) + 4480 * (int)v29, v30++, v47, SHIWORD(v47), _S0);
      if (v30 >= *((_DWORD *)this + 5))
        goto LABEL_35;
    }
LABEL_63:
    v12 = 0;
    v13 = 0;
    goto LABEL_64;
  }
LABEL_42:
  v34 = *((int *)this + 4) * (uint64_t)v25;
  v35 = 2 * v34;
  if ((v34 & 0x80000000) != 0)
    v36 = -1;
  else
    v36 = 2 * v34;
  v37 = (const std::nothrow_t *)MEMORY[0x1E0DE4E10];
  if ((v34 & 0x80000000) != 0)
    v38 = -1;
  else
    v38 = 4 * v34;
  v13 = (__int16 *)operator new[](v36, MEMORY[0x1E0DE4E10]);
  v12 = operator new[](v38, v37);
  if (fread(v13, 2uLL, v34, a2) != v34)
  {
LABEL_64:
    v14 = 4294967277;
    goto LABEL_10;
  }
  if ((_DWORD)v34)
  {
    v39 = 0;
    v40 = *((_QWORD *)this + 7);
    do
    {
      *(_DWORD *)(v40 + 4 * v39) = v13[v39];
      ++v39;
    }
    while (v34 != v39);
    v41 = fread(v12, 2uLL, v35, a2);
    if (v41 == v35)
      v14 = 0;
    else
      v14 = 4294967277;
    if (v41 == v35)
    {
      v43 = 0;
      v44 = *((_QWORD *)this + 8);
      do
      {
        v42.i32[0] = *((_DWORD *)v12 + v43);
        v42 = (float16x4_t)vcvtq_f32_f16(v42).u64[0];
        *(float16x4_t *)(v44 + 8 * v43++) = v42;
      }
      while (v34 != v43);
      v14 = 0;
    }
  }
  else if (fread(v12, 2uLL, v35, a2) == v35)
  {
    v14 = 0;
  }
  else
  {
    v14 = 4294967277;
  }
LABEL_10:
  if (v8)
    goto LABEL_60;
  if (v10)
LABEL_12:
    MEMORY[0x1BCCA128C](v10, 0x1000C80BDFB0063);
LABEL_13:
  if (v13)
    MEMORY[0x1BCCA128C](v13, 0x1000C80BDFB0063);
  if (v12)
    MEMORY[0x1BCCA128C](v12, 0x1000C80BDFB0063);
  return v14;
}

void **ma::LandmarkDetector::SetPreviousLandmarks(void **this, float *__src)
{
  void **v3;

  v3 = this;
  if (__src)
    this = (void **)memcpy(this[4], __src, 8 * *((int *)this + 1));
  *((_BYTE *)v3 + 28) = __src != 0;
  return this;
}

uint64_t ma::LandmarkDetector::ConvertPreviousPointsToCurrentPoints(uint64_t this, int a2, int a3, int a4, float *a5)
{
  uint64_t v5;
  float v6;
  float v7;
  float *v8;
  float *v9;
  float v10;

  v5 = *(unsigned int *)(this + 4);
  if ((int)v5 >= 1)
  {
    v6 = a5[2] - *a5;
    v7 = (float)(int)(float)(a5[3] - a5[1]);
    v8 = (float *)(*(_QWORD *)(this + 48) + 4);
    v9 = (float *)(*(_QWORD *)(this + 32) + 4);
    do
    {
      *(v8 - 1) = (float)(*(v9 - 1) - a5[1]) / v7;
      v10 = *v9;
      v9 += 2;
      *v8 = (float)(v10 - *a5) / (float)(int)v6;
      v8 += 2;
      --v5;
    }
    while (v5);
  }
  return this;
}

uint64_t ma::LandmarkDetector::DetectLandmarks(ma::LandmarkDetector *this, const unsigned __int8 *a2, int a3, int a4, int a5, float *a6, float *a7)
{
  float v13;
  float v14;
  float v15;
  float v16;
  uint64_t v17;
  size_t v18;
  const std::nothrow_t *v19;
  float *v20;
  uint64_t v21;
  size_t v22;
  _QWORD *v23;
  double v24;
  double v25;
  double v26;
  double v27;
  double v28;
  int32x4_t v29;
  _QWORD *v30;
  uint64_t v32;
  int v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v42;
  float *v43;
  float *v44;
  float v45;

  if (*((_BYTE *)this + 28))
    ma::LandmarkDetector::ConvertPreviousPointsToCurrentPoints((uint64_t)this, (int)a2, a3, a4, a6);
  else
    memcpy(*((void **)this + 6), *((const void **)this + 5), 8 * *((int *)this + 1));
  v14 = a6[2];
  v13 = a6[3];
  v15 = *a6;
  v16 = a6[1];
  v17 = *((int *)this + 4);
  if ((int)v17 < 0)
    v18 = -1;
  else
    v18 = 4 * v17;
  v19 = (const std::nothrow_t *)MEMORY[0x1E0DE4E10];
  v20 = (float *)operator new[](v18, MEMORY[0x1E0DE4E10]);
  v21 = *((int *)this + 2);
  if ((int)v21 < 0)
    v22 = -1;
  else
    v22 = 8 * v21;
  v23 = operator new[](v22, v19);
  v30 = v23;
  if (v20)
    _ZF = v23 == 0;
  else
    _ZF = 1;
  if (_ZF)
  {
    v32 = 4294967188;
    if (v20)
LABEL_25:
      MEMORY[0x1BCCA128C](v20, 0x1000C8052888210);
  }
  else
  {
    v33 = 0;
    *(float *)&v24 = v14 - v15;
    do
    {
      ma::LandmarkDetector::GetFeaturePixelValues(this, a2, a3, a4, a5, v33, a6, v20, v24, v25, v26, v27, v28, v29);
      LODWORD(v34) = *((_DWORD *)this + 2);
      if ((int)v34 >= 3)
      {
        v35 = 0;
        do
        {
          v36 = *((_QWORD *)this + 9);
          _X10 = v36 + 4480 * ((int)v35 + v33 * (int)v34 + 2);
          __asm { PRFM            #0, [X10] }
          v30[v35] = ma::RegressionTree::GetDelta((ma::RegressionTree *)(v36 + 4480 * (v35 + v33 * (int)v34)), v20);
          ++v35;
          v34 = *((int *)this + 2);
        }
        while (v35 < v34 - 2);
      }
      (*((void (**)(_QWORD, _QWORD *, _QWORD))this + 10))(*((_QWORD *)this + 6), v30, *((unsigned int *)this + 1));
      ++v33;
    }
    while (v33 != 10);
    v42 = *((unsigned int *)this + 1);
    if ((int)v42 >= 1)
    {
      v43 = a7 + 1;
      v44 = (float *)(*((_QWORD *)this + 6) + 4);
      do
      {
        *(v43 - 1) = a6[1] + (float)(*(v44 - 1) * (float)(int)(float)(v13 - v16));
        v45 = *v44;
        v44 += 2;
        *v43 = *a6 + (float)(v45 * (float)(int)(float)(v14 - v15));
        v43 += 2;
        --v42;
      }
      while (v42);
    }
    v32 = 0;
    if (v20)
      goto LABEL_25;
  }
  if (v30)
    MEMORY[0x1BCCA128C](v30, 0x80C80B8603338);
  return v32;
}

void ma::LandmarkDetector::GetFeaturePixelValues(ma::LandmarkDetector *this, const unsigned __int8 *a2, int a3, int a4, int a5, int a6, float *a7, float *a8, double a9, double a10, double a11, double a12, double a13, int32x4_t a14)
{
  float v22;
  float v23;
  float v24;
  uint64_t v25;
  uint64_t v26;
  int *v27;
  float v28;
  float v29;
  float v30;
  float v31;
  float v32;
  float v33;
  float *v34;
  uint64_t v35;
  float v36;
  float v37;
  float v38;
  float v39;
  float v40;
  float v41;
  float v42;
  float v43;
  float v44;
  signed int v45;
  float v46;
  unsigned int v47;
  signed int v48;
  float v49;
  const unsigned __int8 *v50;
  float v51;
  uint64_t v52;
  float v53;
  float v54[4];
  uint64_t v55;

  v55 = *MEMORY[0x1E0C80C00];
  ma::LandmarkDetector::GetTransformCoefficients(this, v54, a9, a10, a11, a12, a13, a14);
  v25 = *((unsigned int *)this + 4);
  if ((int)v25 >= 1)
  {
    v26 = *((_QWORD *)this + 6);
    v27 = (int *)(*((_QWORD *)this + 7) + 4 * (int)v25 * a6);
    v28 = v54[0];
    v29 = v54[1];
    v30 = v54[2];
    v31 = v54[3];
    v32 = (float)(int)(float)(a7[2] - *a7);
    v33 = (float)(int)(float)(a7[3] - a7[1]);
    v34 = (float *)(*((_QWORD *)this + 8) + 8 * (int)v25 * a6 + 4);
    do
    {
      v35 = *v27++;
      v36 = *(float *)(v26 + 8 * v35);
      v37 = *(v34 - 1);
      v38 = (float)(v29 * *v34) + (float)(v28 * v37);
      v39 = *a7
          + (float)((float)(*(float *)(v26 + 4 * (int)((2 * v35) | 1))
                          + (float)((float)(*v34 * v31) + (float)(v30 * v37)))
                  * v32);
      if (v39 < (float)(a4 - 2))
        v40 = v39;
      else
        v40 = (float)(a4 - 2);
      if (v39 <= 0.0)
        v41 = 0.0;
      else
        v41 = v40;
      v42 = a7[1] + (float)((float)(v36 + v38) * v33);
      if (v42 < (float)(a3 - 2))
        v43 = v42;
      else
        v43 = (float)(a3 - 2);
      if (v42 <= 0.0)
        v44 = 0.0;
      else
        v44 = v43;
      v45 = vcvtms_s32_f32(v44);
      v46 = floorf(v41);
      *(float *)&v47 = (float)(int)floorf(v44);
      v48 = vcvtms_s32_f32(v41) * a5;
      v49 = v44 - *(float *)&v47;
      v50 = &a2[v48 + (uint64_t)v45];
      LOBYTE(v47) = *v50;
      v51 = 1.0 - v49;
      LOBYTE(v22) = v50[1];
      v52 = a5 + v48 + (uint64_t)v45;
      LOBYTE(v23) = a2[v52];
      v23 = (float)LODWORD(v23);
      LOBYTE(v24) = a2[(int)v52 + 1];
      v24 = v49 * (float)LODWORD(v24);
      v53 = v49 * (float)LODWORD(v22);
      v22 = v24 + (float)(v23 * v51);
      *a8++ = (float)((float)(v41 - (float)(int)v46) * v22)
            + (float)((float)(v53 + (float)((float)v47 * v51)) * (float)(1.0 - (float)(v41 - (float)(int)v46)));
      v34 += 2;
      --v25;
    }
    while (v25);
  }
}

void ma::LandmarkDetector::GetTransformCoefficients(ma::LandmarkDetector *this, float *a2, double a3, double a4, double a5, double a6, double a7, int32x4_t a8)
{
  uint64_t v9;
  float32x2_t *v10;
  float32x2_t *v11;
  float32x2_t v12;
  uint64_t v13;
  float32x2_t v14;
  float32x2_t v15;
  float32x2_t v16;
  float32x2_t v17;
  float32x2_t v18;
  float32x2_t v19;
  float32x2_t *v20;
  float32x2_t *v21;
  float32x4_t v22;
  float32x2_t v23;
  float32x4_t v24;
  float32x2_t v25;
  float v26;
  float v27;
  float v28;
  float v29;
  float v30;
  float v31;
  float v32;
  float v33;
  float v34;
  float v35;
  float v36;
  float v37;
  float32x4_t v38;
  float v39[3];
  float v40;
  float32x4_t v41;
  float v42;
  float v43;
  float v44;
  float v45;
  float32x4_t v46;
  uint64_t v47;

  v47 = *MEMORY[0x1E0C80C00];
  v9 = *((unsigned int *)this + 1);
  if ((int)v9 < 1)
  {
    v12 = 0;
    v14 = 0;
  }
  else
  {
    v10 = (float32x2_t *)*((_QWORD *)this + 5);
    v11 = (float32x2_t *)*((_QWORD *)this + 6);
    v12 = 0;
    v13 = *((unsigned int *)this + 1);
    v14 = 0;
    do
    {
      v15 = *v10++;
      v14 = vadd_f32(v14, v15);
      v16 = *v11++;
      HIDWORD(a3) = v16.i32[1];
      v12 = vadd_f32(v12, v16);
      --v13;
    }
    while (v13);
  }
  *(float *)&a3 = (float)(int)v9;
  if ((int)v9 < 1)
  {
    v22 = 0uLL;
    v14.i32[0] = 0;
  }
  else
  {
    v17 = (float32x2_t)vdup_lane_s32(*(int32x2_t *)&a3, 0);
    v18 = vdiv_f32(v14, v17);
    v19 = vdiv_f32(v12, v17);
    v20 = (float32x2_t *)*((_QWORD *)this + 5);
    v21 = (float32x2_t *)*((_QWORD *)this + 6);
    v22 = 0uLL;
    v14.i32[0] = 0;
    do
    {
      v23 = *v20++;
      *(float32x2_t *)v24.f32 = vsub_f32(v23, v18);
      v24.i64[1] = v24.i64[0];
      v25 = *v21++;
      *(float32x2_t *)a8.i8 = vsub_f32(v25, v19);
      a8 = vzip1q_s32(a8, a8);
      v14.f32[0] = v14.f32[0]
                 + vmlas_n_f32(COERCE_FLOAT(vmul_f32(*(float32x2_t *)&v24, *(float32x2_t *)&v24).i32[1]), v24.f32[0], v24.f32[0]);
      v22 = vmlaq_f32(v22, v24, (float32x4_t)a8);
      --v9;
    }
    while (v9);
  }
  v26 = v14.f32[0] / *(float *)&a3;
  v38 = vdivq_f32(v22, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)&a3, 0));
  v46 = v38;
  ma::LandmarkDetector::GetSvd2x2(this, v46.f32, &v42, &v41, v39, *(double *)v38.i64, *(double *)v22.i64, *(double *)&v14);
  v27 = 1.0;
  v28 = 1.0;
  v29 = 1.0;
  if (vmlas_n_f32(vmuls_lane_f32(-v38.f32[1], v38, 2), v38.f32[3], v38.f32[0]) < 0.0)
  {
    if (v40 >= v39[0])
      v28 = -1.0;
    else
      v28 = 1.0;
    if (v40 >= v39[0])
      v29 = 1.0;
    else
      v29 = -1.0;
  }
  if (v26 > 0.000001)
    v27 = (float)(1.0 / v26)
        * (float)((float)((float)(v29 * v40) + (float)(v39[2] * 0.0))
                + (float)((float)(v39[1] * 0.0) + (float)(v39[0] * v28)));
  v30 = (float)(v43 * 0.0) + (float)(v42 * v28);
  v31 = (float)(v29 * v43) + (float)(v42 * 0.0);
  v32 = (float)(v45 * 0.0) + (float)(v44 * v28);
  v33 = (float)(v29 * v45) + (float)(v44 * 0.0);
  v34 = (float)(v31 * v41.f32[1]) + (float)(v30 * v41.f32[0]);
  v35 = (float)(v33 * v41.f32[1]) + (float)(v32 * v41.f32[0]);
  v36 = (float)(v33 * v41.f32[3]) + (float)(v32 * v41.f32[2]);
  v37 = v27 * (float)((float)(v31 * v41.f32[3]) + (float)(v30 * v41.f32[2]));
  *a2 = v27 * v34;
  a2[1] = v37;
  a2[2] = v27 * v35;
  a2[3] = v27 * v36;
}

float ma::LandmarkDetector::GetSvd2x2(ma::LandmarkDetector *this, float *a2, float *a3, float32x4_t *a4, float *a5, double a6, double a7, double a8)
{
  float v8;
  float v9;
  float v10;
  float v11;
  float v12;
  float32x2_t v13;
  float32x2_t v14;
  float32x2_t v15;
  float32x4_t v21;
  float32x4_t v22;
  float result;

  *(float *)&a6 = a2[2];
  v8 = a2[3];
  v9 = a2[1];
  *(float *)&a8 = (float)(*(float *)&a6 * *(float *)&a6) + (float)(*a2 * *a2);
  *(float *)&a6 = (float)(*(float *)&a6 * v8) + (float)(*a2 * v9);
  v10 = (float)(v8 * v8) + (float)(v9 * v9);
  v11 = *(float *)&a8 + v10;
  v12 = sqrtf((float)((float)((float)(*(float *)&a8 * v10) - (float)(*(float *)&a6 * *(float *)&a6)) * -4.0)+ (float)(v11 * v11));
  v13.f32[0] = v11 + v12;
  a5[1] = 0.0;
  a5[2] = 0.0;
  v13.f32[1] = v11 - v12;
  v14 = vmul_f32(v13, (float32x2_t)0x3F0000003F000000);
  *a5 = sqrtf(v14.f32[0]);
  a5[3] = sqrtf(v14.f32[1]);
  v15 = vdiv_f32(vneg_f32(vsub_f32((float32x2_t)vdup_lane_s32(*(int32x2_t *)&a8, 0), v14)), (float32x2_t)vdup_lane_s32(*(int32x2_t *)&a6, 0));
  __asm { FMOV            V2.2S, #1.0 }
  *(float32x2_t *)v21.f32 = vsqrt_f32(vadd_f32(vmul_f32(v15, v15), *(float32x2_t *)_Q2.f32));
  v21.i64[1] = v21.i64[0];
  *(float32x2_t *)&_Q2.u32[2] = v15;
  v22 = vdivq_f32(_Q2, v21);
  *a4 = v22;
  *a3 = vmlas_n_f32(vmuls_lane_f32(a2[1], v22, 2), *a2, v22.f32[0]) / *a5;
  a3[2] = (float)((float)(a2[3] * a4->f32[2]) + (float)(a2[2] * a4->f32[0])) / *a5;
  a3[1] = (float)((float)(a2[1] * a4->f32[3]) + (float)(*a2 * a4->f32[1])) / a5[3];
  result = (float)((float)(a2[3] * a4->f32[3]) + (float)(a2[2] * a4->f32[1])) / a5[3];
  a3[3] = result;
  return result;
}

uint64_t ma::AdjustLandmark_neon_(uint64_t result, uint64_t *a2, uint64_t a3, int a4)
{
  uint64_t v4;
  char v5;
  float32x4_t *v6;
  float32x4_t v7;
  float32x4_t v8;
  char v9;
  float32x4_t v10;
  float32x4_t v11;
  float32x4_t v12;
  float32x4_t v13;
  float32x4_t v14;
  float32x4_t v15;
  float32x4_t v16;
  float32x4_t v17;
  float32x4_t v18;
  float32x4_t v19;
  float32x4_t v20;
  float32x4_t v21;
  float32x4_t v22;
  float32x4_t v23;
  float32x4_t v24;
  uint64_t *v26;
  uint64_t v27;
  float16x4_t *v28;
  uint64_t v29;

  v4 = 0;
  v5 = 1;
  do
  {
    v6 = (float32x4_t *)(result + 4 * v4);
    v7 = *v6;
    v8 = v6[1];
    v9 = v5;
    v10 = v6[2];
    v11 = v6[3];
    v12 = v6[4];
    v13 = v6[5];
    v14 = v6[6];
    v15 = v6[7];
    v16 = v6[8];
    v17 = v6[9];
    v18 = v6[10];
    v19 = v6[11];
    v20 = v6[12];
    v21 = v6[13];
    v22 = v6[14];
    v23 = v6[15];
    v24 = v6[16];
    if (a4 >= 3)
    {
      _X14 = *a2;
      v26 = a2 + 1;
      v27 = (a4 - 2);
      do
      {
        v28 = (float16x4_t *)(_X14 + 2 * v4);
        v29 = *v26++;
        _X14 = v29;
        __asm { PRFM            #0, [X14] }
        v7 = vaddq_f32(v7, vcvtq_f32_f16(*v28));
        v8 = vaddq_f32(v8, vcvtq_f32_f16(v28[1]));
        v10 = vaddq_f32(v10, vcvtq_f32_f16(v28[2]));
        v11 = vaddq_f32(v11, vcvtq_f32_f16(v28[3]));
        v12 = vaddq_f32(v12, vcvtq_f32_f16(v28[4]));
        v13 = vaddq_f32(v13, vcvtq_f32_f16(v28[5]));
        v14 = vaddq_f32(v14, vcvtq_f32_f16(v28[6]));
        v15 = vaddq_f32(v15, vcvtq_f32_f16(v28[7]));
        v16 = vaddq_f32(v16, vcvtq_f32_f16(v28[8]));
        v17 = vaddq_f32(v17, vcvtq_f32_f16(v28[9]));
        v18 = vaddq_f32(v18, vcvtq_f32_f16(v28[10]));
        v19 = vaddq_f32(v19, vcvtq_f32_f16(v28[11]));
        v20 = vaddq_f32(v20, vcvtq_f32_f16(v28[12]));
        v21 = vaddq_f32(v21, vcvtq_f32_f16(v28[13]));
        v22 = vaddq_f32(v22, vcvtq_f32_f16(v28[14]));
        v23 = vaddq_f32(v23, vcvtq_f32_f16(v28[15]));
        v24 = vaddq_f32(v24, vcvtq_f32_f16(v28[16]));
        --v27;
      }
      while (v27);
    }
    v5 = 0;
    *v6 = v7;
    v6[1] = v8;
    v6[2] = v10;
    v6[3] = v11;
    v6[4] = v12;
    v6[5] = v13;
    v6[6] = v14;
    v6[7] = v15;
    v6[8] = v16;
    v6[9] = v17;
    v6[10] = v18;
    v6[11] = v19;
    v6[12] = v20;
    v6[13] = v21;
    v6[14] = v22;
    v6[15] = v23;
    v6[16] = v24;
    v4 = 68;
  }
  while ((v9 & 1) != 0);
  return result;
}

uint64_t VCPProtoImagePetsResultReadFrom(uint64_t a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  char v14;
  uint64_t v16;
  int v17;
  uint64_t v19;
  unint64_t v20;
  int v21;
  VCPProtoBounds *v22;
  uint64_t result;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) < *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
  {
    v7 = (int *)MEMORY[0x1E0D82BB8];
    do
    {
      if (*(_BYTE *)(a2 + *v5))
        break;
      v8 = 0;
      v9 = 0;
      v10 = 0;
      while (1)
      {
        v11 = *v3;
        v12 = *(_QWORD *)(a2 + v11);
        v13 = v12 + 1;
        if (v12 == -1 || v13 > *(_QWORD *)(a2 + *v4))
          break;
        v14 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
        *(_QWORD *)(a2 + v11) = v13;
        v10 |= (unint64_t)(v14 & 0x7F) << v8;
        if ((v14 & 0x80) == 0)
          goto LABEL_12;
        v8 += 7;
        if (v9++ >= 9)
        {
          v10 = 0;
          v16 = *v5;
          v17 = *(unsigned __int8 *)(a2 + v16);
          goto LABEL_14;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
      v16 = *v5;
      v17 = *(unsigned __int8 *)(a2 + v16);
      if (*(_BYTE *)(a2 + v16))
        v10 = 0;
LABEL_14:
      if (v17 || (v10 & 7) == 4)
        break;
      if ((v10 >> 3) == 2)
      {
        v22 = objc_alloc_init(VCPProtoBounds);
        objc_storeStrong((id *)(a1 + 8), v22);
        if (!PBReaderPlaceMark() || !VCPProtoBoundsReadFrom((uint64_t)v22, a2))
        {

          return 0;
        }
        PBReaderRecallMark();

      }
      else if ((v10 >> 3) == 1)
      {
        v19 = *v3;
        v20 = *(_QWORD *)(a2 + v19);
        if (v20 <= 0xFFFFFFFFFFFFFFFBLL && v20 + 4 <= *(_QWORD *)(a2 + *v4))
        {
          v21 = *(_DWORD *)(*(_QWORD *)(a2 + *v7) + v20);
          *(_QWORD *)(a2 + v19) = v20 + 4;
        }
        else
        {
          *(_BYTE *)(a2 + v16) = 1;
          v21 = 0;
        }
        *(_DWORD *)(a1 + 16) = v21;
      }
      else
      {
        result = PBReaderSkipValueWithTag();
        if (!(_DWORD)result)
          return result;
      }
    }
    while (*(_QWORD *)(a2 + *v3) < *(_QWORD *)(a2 + *v4));
  }
  return *(_BYTE *)(a2 + *v5) == 0;
}

uint64_t __Block_byref_object_copy__42(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void __Block_byref_object_dispose__42(uint64_t a1)
{

}

void sub_1B6EAA3B8(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;

  _Unwind_Resume(a1);
}

void sub_1B6EAA5B0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, _Unwind_Exception *exception_object)
{
  void *v10;
  void *v11;
  void *v12;

  _Unwind_Resume(a1);
}

void sub_1B6EAA6A8(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1B6EAAA98(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  _Unwind_Resume(a1);
}

void sub_1B6EAAC18(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1B6EAADC8(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1B6EAB0BC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  CVPixelBufferLock::~CVPixelBufferLock((CVPixelBufferLock *)va);
  _Unwind_Resume(a1);
}

void sub_1B6EAB3B4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void sub_1B6EAB548(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_1B6EAB988(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,void *a24)
{
  void *v24;

  _Unwind_Resume(a1);
}

void sub_1B6EABBA4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1B6EABC58(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1B6EABDC0(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1B6EAC2E4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_1B6EAC414(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1B6EAC548(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1B6EAC938(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18, uint64_t a19, void *a20)
{

  _Unwind_Resume(a1);
}

void sub_1B6EACB70(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_1B6EACCE8(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1B6EACEFC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9, void *a10)
{

  _Unwind_Resume(a1);
}

void sub_1B6EADA84(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void transformLocation(CGPoint a1, uint64_t a2, int a3)
{
  _DWORD v4[2];
  uint64_t v5;

  v5 = *MEMORY[0x1E0C80C00];
  if (a3 > 179)
  {
    if (a3 == 180 || a3 == 270)
      return;
  }
  else if (!a3 || a3 == 90)
  {
    return;
  }
  if ((int)MediaAnalysisLogLevel() >= 4 && os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_DEFAULT))
  {
    v4[0] = 67109120;
    v4[1] = a3;
    _os_log_impl(&dword_1B6C4A000, MEMORY[0x1E0C81028], OS_LOG_TYPE_DEFAULT, "invalid gesture rotation degrees %d", (uint8_t *)v4, 8u);
  }
}

uint64_t getRotationInDegrees(NSDictionary *a1)
{
  NSDictionary *v1;
  uint64_t v2;
  void *v3;
  int v4;
  int v5;
  _DWORD v7[2];
  __int16 v8;
  unsigned int v9;
  uint64_t v10;

  v10 = *MEMORY[0x1E0C80C00];
  v1 = a1;
  -[NSDictionary objectForKeyedSubscript:](v1, "objectForKeyedSubscript:", CFSTR("rotationInDegrees"));
  v2 = objc_claimAutoreleasedReturnValue();

  if (v2)
  {
    -[NSDictionary objectForKeyedSubscript:](v1, "objectForKeyedSubscript:", CFSTR("rotationInDegrees"));
    v3 = (void *)objc_claimAutoreleasedReturnValue();
    v4 = objc_msgSend(v3, "intValue");

    if (v4 % 360 >= 0)
      v5 = v4 % 360;
    else
      v5 = v4 % 360 + 360;
    v2 = 90 * ((v5 + 45) / 0x5Au);
    if ((int)MediaAnalysisLogLevel() >= 6 && os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_INFO))
    {
      v7[0] = 67109376;
      v7[1] = v4;
      v8 = 1024;
      v9 = 90 * ((v5 + 45) / 0x5Au);
      _os_log_impl(&dword_1B6C4A000, MEMORY[0x1E0C81028], OS_LOG_TYPE_INFO, "VCPRequest : rotation degrees %d, mapped to %d", (uint8_t *)v7, 0xEu);
    }
  }

  return v2;
}

void sub_1B6EADD5C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1B6EADE0C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1B6EAE374(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_1B6EAE4E8(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1B6EAE798(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

uint64_t __Block_byref_object_copy__43(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void __Block_byref_object_dispose__43(uint64_t a1)
{

}

void sub_1B6EAE938(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

uint64_t VCPProtoClassificationReadFrom(uint64_t a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  char v14;
  BOOL v15;
  uint64_t v16;
  int v17;
  char v19;
  unsigned int v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  char v25;
  uint64_t v26;
  unint64_t v27;
  int v28;
  uint64_t result;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) < *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
  {
    v7 = (int *)MEMORY[0x1E0D82BB8];
    do
    {
      if (*(_BYTE *)(a2 + *v5))
        break;
      v8 = 0;
      v9 = 0;
      v10 = 0;
      while (1)
      {
        v11 = *v3;
        v12 = *(_QWORD *)(a2 + v11);
        v13 = v12 + 1;
        if (v12 == -1 || v13 > *(_QWORD *)(a2 + *v4))
          break;
        v14 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
        *(_QWORD *)(a2 + v11) = v13;
        v10 |= (unint64_t)(v14 & 0x7F) << v8;
        if ((v14 & 0x80) == 0)
          goto LABEL_12;
        v8 += 7;
        v15 = v9++ >= 9;
        if (v15)
        {
          v10 = 0;
          v16 = *v5;
          v17 = *(unsigned __int8 *)(a2 + v16);
          goto LABEL_14;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
      v16 = *v5;
      v17 = *(unsigned __int8 *)(a2 + v16);
      if (*(_BYTE *)(a2 + v16))
        v10 = 0;
LABEL_14:
      if (v17 || (v10 & 7) == 4)
        break;
      if ((v10 >> 3) == 2)
      {
        v26 = *v3;
        v27 = *(_QWORD *)(a2 + v26);
        if (v27 <= 0xFFFFFFFFFFFFFFFBLL && v27 + 4 <= *(_QWORD *)(a2 + *v4))
        {
          v28 = *(_DWORD *)(*(_QWORD *)(a2 + *v7) + v27);
          *(_QWORD *)(a2 + v26) = v27 + 4;
        }
        else
        {
          *(_BYTE *)(a2 + v16) = 1;
          v28 = 0;
        }
        *(_DWORD *)(a1 + 8) = v28;
      }
      else if ((v10 >> 3) == 1)
      {
        v19 = 0;
        v20 = 0;
        v21 = 0;
        while (1)
        {
          v22 = *v3;
          v23 = *(_QWORD *)(a2 + v22);
          v24 = v23 + 1;
          if (v23 == -1 || v24 > *(_QWORD *)(a2 + *v4))
            break;
          v25 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v23);
          *(_QWORD *)(a2 + v22) = v24;
          v21 |= (unint64_t)(v25 & 0x7F) << v19;
          if ((v25 & 0x80) == 0)
            goto LABEL_33;
          v19 += 7;
          v15 = v20++ >= 9;
          if (v15)
          {
            LODWORD(v21) = 0;
            goto LABEL_35;
          }
        }
        *(_BYTE *)(a2 + *v5) = 1;
LABEL_33:
        if (*(_BYTE *)(a2 + *v5))
          LODWORD(v21) = 0;
LABEL_35:
        *(_DWORD *)(a1 + 12) = v21;
      }
      else
      {
        result = PBReaderSkipValueWithTag();
        if (!(_DWORD)result)
          return result;
      }
    }
    while (*(_QWORD *)(a2 + *v3) < *(_QWORD *)(a2 + *v4));
  }
  return *(_BYTE *)(a2 + *v5) == 0;
}

void sub_1B6EAF5A0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t __Block_byref_object_copy__44(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void __Block_byref_object_dispose__44(uint64_t a1)
{

}

uint64_t VCPProtoMovieFaceResultReadFrom(uint64_t a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  int v15;
  VCPProtoTimeRange *v17;
  uint64_t result;
  char v19;
  unsigned int v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  char v24;
  char v25;
  unsigned int v26;
  uint64_t v27;
  unint64_t v28;
  char v29;
  uint64_t v30;
  char v31;
  unsigned int v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  char v36;
  char v37;
  unsigned int v38;
  uint64_t v39;
  unint64_t v40;
  char v41;
  uint64_t v42;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) >= *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
    return *(_BYTE *)(a2 + *v5) == 0;
  v7 = (int *)MEMORY[0x1E0D82BB8];
  while (2)
  {
    if (*(_BYTE *)(a2 + *v5))
      return *(_BYTE *)(a2 + *v5) == 0;
    v8 = 0;
    v9 = 0;
    v10 = 0;
    while (1)
    {
      v11 = *v3;
      v12 = *(_QWORD *)(a2 + v11);
      if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
        break;
      v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
      *(_QWORD *)(a2 + v11) = v12 + 1;
      v10 |= (unint64_t)(v13 & 0x7F) << v8;
      if ((v13 & 0x80) == 0)
        goto LABEL_12;
      v8 += 7;
      v14 = v9++ >= 9;
      if (v14)
      {
        v10 = 0;
        v15 = *(unsigned __int8 *)(a2 + *v5);
        goto LABEL_14;
      }
    }
    *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
    v15 = *(unsigned __int8 *)(a2 + *v5);
    if (*(_BYTE *)(a2 + *v5))
      v10 = 0;
LABEL_14:
    if (v15 || (v10 & 7) == 4)
      return *(_BYTE *)(a2 + *v5) == 0;
    switch((v10 >> 3))
    {
      case 1u:
        v17 = objc_alloc_init(VCPProtoTimeRange);
        objc_storeStrong((id *)(a1 + 40), v17);
        if (PBReaderPlaceMark() && VCPProtoTimeRangeReadFrom((uint64_t)v17, a2))
          goto LABEL_56;
        goto LABEL_76;
      case 2u:
        v19 = 0;
        v20 = 0;
        v21 = 0;
        while (2)
        {
          v22 = *v3;
          v23 = *(_QWORD *)(a2 + v22);
          if (v23 == -1 || v23 >= *(_QWORD *)(a2 + *v4))
          {
            *(_BYTE *)(a2 + *v5) = 1;
          }
          else
          {
            v24 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v23);
            *(_QWORD *)(a2 + v22) = v23 + 1;
            v21 |= (unint64_t)(v24 & 0x7F) << v19;
            if (v24 < 0)
            {
              v19 += 7;
              v14 = v20++ >= 9;
              if (v14)
              {
                LODWORD(v21) = 0;
                goto LABEL_60;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(a2 + *v5))
          LODWORD(v21) = 0;
LABEL_60:
        v42 = 32;
        goto LABEL_73;
      case 3u:
        v25 = 0;
        v26 = 0;
        v21 = 0;
        while (2)
        {
          v27 = *v3;
          v28 = *(_QWORD *)(a2 + v27);
          if (v28 == -1 || v28 >= *(_QWORD *)(a2 + *v4))
          {
            *(_BYTE *)(a2 + *v5) = 1;
          }
          else
          {
            v29 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v28);
            *(_QWORD *)(a2 + v27) = v28 + 1;
            v21 |= (unint64_t)(v29 & 0x7F) << v25;
            if (v29 < 0)
            {
              v25 += 7;
              v14 = v26++ >= 9;
              if (v14)
              {
                LODWORD(v21) = 0;
                goto LABEL_64;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(a2 + *v5))
          LODWORD(v21) = 0;
LABEL_64:
        v42 = 36;
        goto LABEL_73;
      case 4u:
        v17 = objc_alloc_init(VCPProtoBounds);
        v30 = 8;
        goto LABEL_54;
      case 5u:
        v31 = 0;
        v32 = 0;
        v33 = 0;
        while (2)
        {
          v34 = *v3;
          v35 = *(_QWORD *)(a2 + v34);
          if (v35 == -1 || v35 >= *(_QWORD *)(a2 + *v4))
          {
            *(_BYTE *)(a2 + *v5) = 1;
          }
          else
          {
            v36 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v35);
            *(_QWORD *)(a2 + v34) = v35 + 1;
            v33 |= (unint64_t)(v36 & 0x7F) << v31;
            if (v36 < 0)
            {
              v31 += 7;
              v14 = v32++ >= 9;
              if (v14)
              {
                v33 = 0;
                goto LABEL_68;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(a2 + *v5))
          v33 = 0;
LABEL_68:
        *(_BYTE *)(a1 + 48) = v33 != 0;
        goto LABEL_74;
      case 6u:
        v37 = 0;
        v38 = 0;
        v21 = 0;
        while (2)
        {
          v39 = *v3;
          v40 = *(_QWORD *)(a2 + v39);
          if (v40 == -1 || v40 >= *(_QWORD *)(a2 + *v4))
          {
            *(_BYTE *)(a2 + *v5) = 1;
          }
          else
          {
            v41 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v40);
            *(_QWORD *)(a2 + v39) = v40 + 1;
            v21 |= (unint64_t)(v41 & 0x7F) << v37;
            if (v41 < 0)
            {
              v37 += 7;
              v14 = v38++ >= 9;
              if (v14)
              {
                LODWORD(v21) = 0;
                goto LABEL_72;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(a2 + *v5))
          LODWORD(v21) = 0;
LABEL_72:
        v42 = 16;
LABEL_73:
        *(_DWORD *)(a1 + v42) = v21;
        goto LABEL_74;
      case 7u:
        v17 = objc_alloc_init(VCPProtoBounds);
        v30 = 24;
LABEL_54:
        objc_storeStrong((id *)(a1 + v30), v17);
        if (PBReaderPlaceMark() && VCPProtoBoundsReadFrom((uint64_t)v17, a2))
        {
LABEL_56:
          PBReaderRecallMark();

LABEL_74:
          if (*(_QWORD *)(a2 + *v3) >= *(_QWORD *)(a2 + *v4))
            return *(_BYTE *)(a2 + *v5) == 0;
          continue;
        }
LABEL_76:

        return 0;
      default:
        result = PBReaderSkipValueWithTag();
        if (!(_DWORD)result)
          return result;
        goto LABEL_74;
    }
  }
}

uint64_t MAMovieAnalysisRequest::Start(MAMovieAnalysisRequest *this, void (*a2)(void *, int))
{
  uint64_t started;
  uint64_t (*v6)(uint64_t, unsigned int *);
  const void *v7;
  uint64_t v8;
  uint64_t (*v9)(const void *, uint64_t, const void **);
  uint64_t v10;
  uint64_t v11;
  uint64_t (*v12)(uint64_t, uint64_t, __CFDictionary *, _QWORD, __int128 *, _QWORD, unsigned int *);
  int v13;
  const CFDictionaryKeyCallBacks *v14;
  const CFDictionaryValueCallBacks *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t (*v18)(uint64_t, uint64_t, uint64_t, char *, CMSampleBufferRef *);
  __CVBuffer *ImageBuffer;
  CFTypeRef obj;
  CMSampleBufferRef sbuf[2];
  char v22;
  __int128 v23;
  uint64_t v24;
  __int128 v25;
  uint64_t v26;
  __int128 v27;
  uint64_t v28;
  unsigned int v29;
  __CFDictionary *Mutable;
  const void *v31;
  unsigned int v32;
  uint64_t v33;
  const void *v34;
  const void *v35;
  __int128 v36;
  uint64_t v37;

  v35 = 0;
  started = MAAssetByteStream_Create(0, *((_QWORD *)this + 1), *((_QWORD *)this + 2), *((_QWORD *)this + 4), &v35);
  if (!(_DWORD)started)
  {
    v34 = 0;
    started = FigAssetCreateWithByteStream();
    if (!(_DWORD)started)
    {
      v33 = 0;
      started = FigAssetReaderCreateWithAsset();
      if (!(_DWORD)started)
      {
        v32 = 0;
        v6 = *(uint64_t (**)(uint64_t, unsigned int *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 16);
        if (v6)
        {
          started = v6(v33, &v32);
          if (!(_DWORD)started)
          {
            v31 = 0;
            v7 = v34;
            v8 = v32;
            v9 = *(uint64_t (**)(const void *, uint64_t, const void **))(*(_QWORD *)(CMBaseObjectGetVTable()
                                                                                            + 16)
                                                                                + 40);
            if (v9)
            {
              started = v9(v7, v8, &v31);
              if (!(_DWORD)started)
              {
                Mutable = CFDictionaryCreateMutable(0, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
                CFDictionarySet<int>(Mutable, (const void *)*MEMORY[0x1E0CA9040], 875704422);
                v29 = 0;
                v10 = v33;
                v11 = v32;
                v27 = *MEMORY[0x1E0CA2E18];
                v28 = *(_QWORD *)(MEMORY[0x1E0CA2E18] + 16);
                v12 = *(uint64_t (**)(uint64_t, uint64_t, __CFDictionary *, _QWORD, __int128 *, _QWORD, unsigned int *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 48);
                if (!v12)
                {
                  started = 4294954514;
                  goto LABEL_25;
                }
                v36 = v27;
                v37 = v28;
                started = v12(v10, v11, Mutable, 0, &v36, 0, &v29);
                if (!(_DWORD)started)
                {
                  v25 = *MEMORY[0x1E0CA2E68];
                  v26 = *(_QWORD *)(MEMORY[0x1E0CA2E68] + 16);
                  v23 = *MEMORY[0x1E0CA2E30];
                  v24 = *(_QWORD *)(MEMORY[0x1E0CA2E30] + 16);
                  started = FigAssetReaderStartExtractionForTimeRange(v33, &v25, &v23);
                  if (!(_DWORD)started)
                  {
                    v22 = 0;
                    v36 = 0uLL;
                    _ZNSt3__115allocate_sharedB8ne180100I25VCPImageHumanPoseAnalyzerNS_9allocatorIS1_EEJEvEENS_10shared_ptrIT_EERKT0_DpOT1_(sbuf);
                    std::shared_ptr<VCPCNNEspressoContext>::operator=[abi:ne180100]((uint64_t)&v36, (__int128 *)sbuf);
                    std::shared_ptr<VCPImageHumanPoseAnalyzer>::~shared_ptr[abi:ne180100]((uint64_t)sbuf);
                    if (!(_QWORD)v36)
                    {
                      started = 1;
                      goto LABEL_33;
                    }
                    started = VCPImageHumanPoseAnalyzer::Init((VCPImageHumanPoseAnalyzer *)v36);
                    if ((_DWORD)started)
                      goto LABEL_33;
                    v13 = 0;
                    v14 = (const CFDictionaryKeyCallBacks *)MEMORY[0x1E0C9B390];
                    v15 = (const CFDictionaryValueCallBacks *)MEMORY[0x1E0C9B3A0];
                    while (1)
                    {
                      printf("Frame: %u\n", v13);
                      sbuf[0] = 0;
                      v16 = v33;
                      v17 = v29;
                      v18 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, char *, CMSampleBufferRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 104);
                      if (!v18)
                        break;
                      started = v18(v16, v17, 1, &v22, sbuf);
                      if ((_DWORD)started)
                        goto LABEL_32;
                      if (!sbuf[0])
                      {
                        CF<opaqueCMSampleBuffer *>::~CF((const void **)sbuf);
                        if (v22)
                        {
                          a2(*((void **)this + 4), 0);
                          started = 0;
                        }
                        else
                        {
                          started = 4294967278;
                        }
LABEL_33:
                        std::shared_ptr<VCPImageHumanPoseAnalyzer>::~shared_ptr[abi:ne180100]((uint64_t)&v36);
                        goto LABEL_25;
                      }
                      ImageBuffer = CMSampleBufferGetImageBuffer(sbuf[0]);
                      obj = CFDictionaryCreateMutable(0, 0, v14, v15);
                      started = VCPImageHumanPoseAnalyzer::Analyze((VCPImageHumanPoseAnalyzer *)v36, ImageBuffer, (__CFDictionary *)obj);
                      if ((_DWORD)started)
                      {
                        CF<opaqueCMSampleBuffer *>::~CF(&obj);
                        goto LABEL_32;
                      }
                      CFShow(obj);
                      CF<opaqueCMSampleBuffer *>::~CF(&obj);
                      CF<opaqueCMSampleBuffer *>::~CF((const void **)sbuf);
                      ++v13;
                    }
                    started = 4294954514;
LABEL_32:
                    CF<opaqueCMSampleBuffer *>::~CF((const void **)sbuf);
                    goto LABEL_33;
                  }
                }
LABEL_25:
                CF<opaqueCMSampleBuffer *>::~CF((const void **)&Mutable);
              }
            }
            else
            {
              started = 4294954514;
            }
            CF<opaqueCMSampleBuffer *>::~CF(&v31);
          }
        }
        else
        {
          started = 4294954514;
        }
      }
      CF<opaqueCMSampleBuffer *>::~CF((const void **)&v33);
    }
    CF<opaqueCMSampleBuffer *>::~CF(&v34);
  }
  CF<opaqueCMSampleBuffer *>::~CF(&v35);
  return started;
}

void sub_1B6EB0728(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,const void *a27,const void *a28)
{
  uint64_t v28;

  std::shared_ptr<VCPImageHumanPoseAnalyzer>::~shared_ptr[abi:ne180100](v28 - 112);
  CF<opaqueCMSampleBuffer *>::~CF(&a27);
  CF<opaqueCMSampleBuffer *>::~CF(&a28);
  CF<opaqueCMSampleBuffer *>::~CF((const void **)(v28 - 136));
  CF<opaqueCMSampleBuffer *>::~CF((const void **)(v28 - 128));
  CF<opaqueCMSampleBuffer *>::~CF((const void **)(v28 - 120));
  _Unwind_Resume(a1);
}

uint64_t FigAssetReaderStartExtractionForTimeRange(uint64_t a1, __int128 *a2, __int128 *a3)
{
  uint64_t (*v6)(uint64_t, __int128 *, __int128 *);
  __int128 v8;
  uint64_t v9;
  __int128 v10;
  uint64_t v11;

  v6 = *(uint64_t (**)(uint64_t, __int128 *, __int128 *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 96);
  if (!v6)
    return 4294954514;
  v10 = *a2;
  v11 = *((_QWORD *)a2 + 2);
  v8 = *a3;
  v9 = *((_QWORD *)a3 + 2);
  return v6(a1, &v10, &v8);
}

void MAMovieAnalysisRequest::~MAMovieAnalysisRequest(MAMovieAnalysisRequest *this)
{
  ma::MotionFilter::~MotionFilter(this);
  JUMPOUT(0x1BCCA12BCLL);
}

void sub_1B6EB091C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

uint64_t __Block_byref_object_copy__45(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void __Block_byref_object_dispose__45(uint64_t a1)
{

}

void sub_1B6EB11CC(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1B6EB190C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;

  _Unwind_Resume(a1);
}

void sub_1B6EB1A10(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1B6EB1D34(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  _Unwind_Resume(a1);
}

void sub_1B6EB1FB0(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1B6EB247C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  void *v16;

  _Unwind_Resume(a1);
}

void sub_1B6EB34C8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, void *a11, void *a12, void *a13, void *a14, void *a15, uint64_t a16, uint64_t a17, uint64_t a18, _Unwind_Exception *exception_object, void *a20,void *a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,const void *a28)
{
  void *v28;
  void *v29;
  void *v30;
  void *v31;
  void *v32;

  CF<opaqueCMSampleBuffer *>::~CF(&a28);
  _Unwind_Resume(a1);
}

void sub_1B6EB3B20(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;

  _Unwind_Resume(a1);
}

void sub_1B6EB4E80(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *a20,uint64_t a21,uint64_t a22,void *a23,void *a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,void *a30,uint64_t a31,uint64_t a32,uint64_t a33,void *a34)
{

  _Unwind_Resume(a1);
}

void sub_1B6EB5154(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1B6EB5698(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9)
{
  void *v9;
  void *v10;
  void *v11;
  void *v12;

  _Unwind_Resume(a1);
}

void sub_1B6EB58A4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1B6EB6460(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, void *a4, void *a5, void *a6, void *a7, void *a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, ...)
{
  void *v16;
  void *v17;
  void *v18;
  va_list va;

  va_start(va, a16);

  CF<opaqueCMSampleBuffer *>::~CF((const void **)va);
  _Unwind_Resume(a1);
}

void sub_1B6EB6B58(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, void *a15, uint64_t a16, uint64_t a17, void *a18, void *a19, void *a20,void *a21)
{
  void *v21;
  void *v22;
  void *v23;
  void *v24;
  void *v25;

  _Unwind_Resume(a1);
}

void sub_1B6EB72DC(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

uint64_t VCPProtoLivePhotoKeyFrameStillResultReadFrom(uint64_t a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  char v14;
  BOOL v15;
  uint64_t v16;
  int v17;
  uint64_t v19;
  unint64_t v20;
  int v21;
  uint64_t result;
  uint64_t v23;
  unint64_t v24;
  char v25;
  unsigned int v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  char v31;
  uint64_t v32;
  unint64_t v33;
  uint64_t v34;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) < *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
  {
    v7 = (int *)MEMORY[0x1E0D82BB8];
    do
    {
      if (*(_BYTE *)(a2 + *v5))
        break;
      v8 = 0;
      v9 = 0;
      v10 = 0;
      while (1)
      {
        v11 = *v3;
        v12 = *(_QWORD *)(a2 + v11);
        v13 = v12 + 1;
        if (v12 == -1 || v13 > *(_QWORD *)(a2 + *v4))
          break;
        v14 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
        *(_QWORD *)(a2 + v11) = v13;
        v10 |= (unint64_t)(v14 & 0x7F) << v8;
        if ((v14 & 0x80) == 0)
          goto LABEL_12;
        v8 += 7;
        v15 = v9++ >= 9;
        if (v15)
        {
          v10 = 0;
          v16 = *v5;
          v17 = *(unsigned __int8 *)(a2 + v16);
          goto LABEL_14;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
      v16 = *v5;
      v17 = *(unsigned __int8 *)(a2 + v16);
      if (*(_BYTE *)(a2 + v16))
        v10 = 0;
LABEL_14:
      if (v17 || (v10 & 7) == 4)
        break;
      switch((v10 >> 3))
      {
        case 1u:
          v19 = *v3;
          v20 = *(_QWORD *)(a2 + v19);
          if (v20 <= 0xFFFFFFFFFFFFFFFBLL && v20 + 4 <= *(_QWORD *)(a2 + *v4))
          {
            v21 = *(_DWORD *)(*(_QWORD *)(a2 + *v7) + v20);
            *(_QWORD *)(a2 + v19) = v20 + 4;
          }
          else
          {
            *(_BYTE *)(a2 + v16) = 1;
            v21 = 0;
          }
          v34 = 8;
          goto LABEL_47;
        case 2u:
          v23 = *v3;
          v24 = *(_QWORD *)(a2 + v23);
          if (v24 <= 0xFFFFFFFFFFFFFFFBLL && v24 + 4 <= *(_QWORD *)(a2 + *v4))
          {
            v21 = *(_DWORD *)(*(_QWORD *)(a2 + *v7) + v24);
            *(_QWORD *)(a2 + v23) = v24 + 4;
          }
          else
          {
            *(_BYTE *)(a2 + v16) = 1;
            v21 = 0;
          }
          v34 = 16;
          goto LABEL_47;
        case 3u:
          v25 = 0;
          v26 = 0;
          v27 = 0;
          break;
        case 4u:
          v32 = *v3;
          v33 = *(_QWORD *)(a2 + v32);
          if (v33 <= 0xFFFFFFFFFFFFFFFBLL && v33 + 4 <= *(_QWORD *)(a2 + *v4))
          {
            v21 = *(_DWORD *)(*(_QWORD *)(a2 + *v7) + v33);
            *(_QWORD *)(a2 + v32) = v33 + 4;
          }
          else
          {
            *(_BYTE *)(a2 + v16) = 1;
            v21 = 0;
          }
          v34 = 12;
LABEL_47:
          *(_DWORD *)(a1 + v34) = v21;
          continue;
        default:
          result = PBReaderSkipValueWithTag();
          if (!(_DWORD)result)
            return result;
          continue;
      }
      while (1)
      {
        v28 = *v3;
        v29 = *(_QWORD *)(a2 + v28);
        v30 = v29 + 1;
        if (v29 == -1 || v30 > *(_QWORD *)(a2 + *v4))
          break;
        v31 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v29);
        *(_QWORD *)(a2 + v28) = v30;
        v27 |= (unint64_t)(v31 & 0x7F) << v25;
        if ((v31 & 0x80) == 0)
          goto LABEL_38;
        v25 += 7;
        v15 = v26++ >= 9;
        if (v15)
        {
          v27 = 0;
          goto LABEL_40;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_38:
      if (*(_BYTE *)(a2 + *v5))
        v27 = 0;
LABEL_40:
      *(_BYTE *)(a1 + 20) = v27 != 0;
    }
    while (*(_QWORD *)(a2 + *v3) < *(_QWORD *)(a2 + *v4));
  }
  return *(_BYTE *)(a2 + *v5) == 0;
}

void sub_1B6EB7EC4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  void *v14;
  void *v15;
  void *v16;
  void *v17;
  void *v18;
  void *v19;

  _Unwind_Resume(a1);
}

void sub_1B6EB7FC8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void sub_1B6EB8210(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_1B6EB9A24(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,char a34)
{
  uint64_t v34;

  _Block_object_dispose(&a27, 8);
  _Block_object_dispose(&a34, 8);
  _Block_object_dispose((const void *)(v34 - 232), 8);
  _Block_object_dispose((const void *)(v34 - 160), 8);
  _Unwind_Resume(a1);
}

uint64_t __Block_byref_object_copy__46(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void __Block_byref_object_dispose__46(uint64_t a1)
{

}

void sub_1B6EBA300(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1B6EBA57C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1B6EBA7D8(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1B6EBA8F0(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1B6EBAA34(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1B6EBAD0C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1B6EBAD90(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1B6EBAE68(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1B6EBB0D8(_Unwind_Exception *a1)
{
  uint64_t v1;

  _Block_object_dispose((const void *)(v1 - 128), 8);
  _Block_object_dispose((const void *)(v1 - 96), 8);
  _Unwind_Resume(a1);
}

void sub_1B6EBB218(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1B6EBB298(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1B6EBB308(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1B6EBB358(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1B6EBB3A8(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1B6EBB418(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1B6EBB4BC(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1B6EBB80C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15)
{
  void *v15;

  _Unwind_Resume(a1);
}

void sub_1B6EBC7B0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, uint64_t a13, void *a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,void *a24,uint64_t a25,void *a26,uint64_t a27,void *a28,void *a29,void *a30,void *a31,void *a32)
{
  void *v32;
  void *v33;
  void *v34;

  _Unwind_Resume(a1);
}

void sub_1B6EBCAB8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_1B6EBCB40(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_1B6EBCBA8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_1B6EBCC10(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_1B6EBCC78(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_1B6EBCD70(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void sub_1B6EBCE8C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1B6EBCF30(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;
  void *v11;
  void *v12;
  void *v13;

  v13 = v12;

  _Unwind_Resume(a1);
}

void sub_1B6EBD01C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_1B6EBD0EC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;

  v14 = v13;

  _Unwind_Resume(a1);
}

void sub_1B6EBD1E4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void sub_1B6EBD24C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_1B6EBD2B8(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1B6EBD330(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_1B6EBD3A4(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1B6EBD4A0(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1B6EBD6C4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_1B6EBD8DC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  void *v2;
  void *v3;
  void *v4;
  va_list va;

  va_start(va, a2);

  CF<opaqueCMSampleBuffer *>::~CF((const void **)va);
  _Unwind_Resume(a1);
}

void sub_1B6EBDD74(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v3;
  va_list va;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  va_list va1;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  va_list va2;

  va_start(va2, a2);
  va_start(va1, a2);
  va_start(va, a2);
  v3 = va_arg(va1, _QWORD);
  v5 = va_arg(va1, _QWORD);
  v6 = va_arg(va1, _QWORD);
  va_copy(va2, va1);
  v7 = va_arg(va2, _QWORD);
  v9 = va_arg(va2, _QWORD);
  v10 = va_arg(va2, _QWORD);
  v11 = va_arg(va2, _QWORD);
  CVPixelBufferLock::~CVPixelBufferLock((CVPixelBufferLock *)va1);
  CVPixelBufferLock::~CVPixelBufferLock((CVPixelBufferLock *)va2);
  CVPixelBufferLock::~CVPixelBufferLock((CVPixelBufferLock *)va);
  _Unwind_Resume(a1);
}

void sub_1B6EBE0F0(_Unwind_Exception *a1, void *a2, ...)
{
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  const void *v10;
  va_list va;
  const void *v12;
  va_list va1;
  const void *v14;
  va_list va2;
  va_list va3;

  va_start(va3, a2);
  va_start(va2, a2);
  va_start(va1, a2);
  va_start(va, a2);
  v10 = va_arg(va1, const void *);
  va_copy(va2, va1);
  v12 = va_arg(va2, const void *);
  va_copy(va3, va2);
  v14 = va_arg(va3, const void *);

  CF<opaqueCMSampleBuffer *>::~CF((const void **)va);
  CF<opaqueCMSampleBuffer *>::~CF((const void **)va1);
  CF<opaqueCMSampleBuffer *>::~CF((const void **)va2);
  CF<opaqueCMSampleBuffer *>::~CF((const void **)va3);
  _Unwind_Resume(a1);
}

void sub_1B6EBE454(void *a1)
{
  objc_begin_catch(a1);
  objc_end_catch();
  JUMPOUT(0x1B6EBE440);
}

uint64_t __Block_byref_object_copy__47(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void __Block_byref_object_dispose__47(uint64_t a1)
{

}

void sub_1B6EBEA9C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1B6EBEB98(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1B6EBEE14(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;

  _Unwind_Resume(a1);
}

void sub_1B6EBF0D4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;

  _Unwind_Resume(a1);
}

void sub_1B6EBF30C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1B6EBF468(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;

  _Unwind_Resume(a1);
}

void sub_1B6EBF7B0(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  _Unwind_Resume(a1);
}

void sub_1B6EBF938(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;

  v5 = v4;

  _Unwind_Resume(a1);
}

void sub_1B6EBFA44(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1B6EBFB18(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1B6EBFC94(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;

  _Unwind_Resume(a1);
}

void sub_1B6EBFE20(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;

  _Unwind_Resume(a1);
}

void sub_1B6EBFFA0(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;

  _Unwind_Resume(a1);
}

void sub_1B6EC0224(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;

  v7 = v4;

  _Unwind_Resume(a1);
}

id getGDVUVisualUnderstandingServiceClass(void)
{
  void *v0;
  id v1;
  _QWORD v3[5];
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;

  v4 = 0;
  v5 = &v4;
  v6 = 0x2050000000;
  v0 = (void *)getGDVUVisualUnderstandingServiceClass(void)::softClass;
  v7 = getGDVUVisualUnderstandingServiceClass(void)::softClass;
  if (!getGDVUVisualUnderstandingServiceClass(void)::softClass)
  {
    v3[0] = MEMORY[0x1E0C809B0];
    v3[1] = 3221225472;
    v3[2] = ___ZL38getGDVUVisualUnderstandingServiceClassv_block_invoke_1;
    v3[3] = &unk_1E6B15540;
    v3[4] = &v4;
    ___ZL38getGDVUVisualUnderstandingServiceClassv_block_invoke_1((uint64_t)v3);
    v0 = (void *)v5[3];
  }
  v1 = v0;
  _Block_object_dispose(&v4, 8);
  return v1;
}

void sub_1B6EC0324(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

id getGDVUEntityRecognitionClientClass(void)
{
  void *v0;
  id v1;
  _QWORD v3[5];
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;

  v4 = 0;
  v5 = &v4;
  v6 = 0x2050000000;
  v0 = (void *)getGDVUEntityRecognitionClientClass(void)::softClass;
  v7 = getGDVUEntityRecognitionClientClass(void)::softClass;
  if (!getGDVUEntityRecognitionClientClass(void)::softClass)
  {
    v3[0] = MEMORY[0x1E0C809B0];
    v3[1] = 3221225472;
    v3[2] = ___ZL35getGDVUEntityRecognitionClientClassv_block_invoke_2;
    v3[3] = &unk_1E6B15540;
    v3[4] = &v4;
    ___ZL35getGDVUEntityRecognitionClientClassv_block_invoke_2((uint64_t)v3);
    v0 = (void *)v5[3];
  }
  v1 = v0;
  _Block_object_dispose(&v4, 8);
  return v1;
}

void sub_1B6EC03DC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1B6EC04A4(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1B6EC05A4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void sub_1B6EC0784(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_1B6EC083C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1B6EC08B0(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1B6EC09C4(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1B6EC0AF0(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_1B6EC16B8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9, uint64_t a10, void *a11, uint64_t a12, uint64_t a13, void *a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,void *a24,void *a25,void *a26,void *a27,void *a28,uint64_t a29,uint64_t a30,void *a31,void *a32)
{

  _Unwind_Resume(a1);
}

void sub_1B6EC1BF8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, void *a13)
{
  void *v13;
  void *v14;
  void *v15;
  void *v16;
  void *v17;
  void *v18;
  void *v19;

  _Unwind_Resume(a1);
}

id getGDVUEntityClassClass(void)
{
  void *v0;
  id v1;
  _QWORD v3[5];
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;

  v4 = 0;
  v5 = &v4;
  v6 = 0x2050000000;
  v0 = (void *)getGDVUEntityClassClass(void)::softClass;
  v7 = getGDVUEntityClassClass(void)::softClass;
  if (!getGDVUEntityClassClass(void)::softClass)
  {
    v3[0] = MEMORY[0x1E0C809B0];
    v3[1] = 3221225472;
    v3[2] = ___ZL23getGDVUEntityClassClassv_block_invoke;
    v3[3] = &unk_1E6B15540;
    v3[4] = &v4;
    ___ZL23getGDVUEntityClassClassv_block_invoke((uint64_t)v3);
    v0 = (void *)v5[3];
  }
  v1 = v0;
  _Block_object_dispose(&v4, 8);
  return v1;
}

void sub_1B6EC1D70(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1B6EC1E74(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1B6EC2658(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11, void *a12, void *a13, void *a14, void *a15, void *a16, void *a17, void *a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,void *a24)
{
  void *v24;
  void *v25;
  void *v26;
  void *v27;
  void *v28;

  _Unwind_Resume(a1);
}

void sub_1B6EC2900(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1B6EC3770(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18, void *a19, void *a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,void *a37,void *a38,void *a39,void *a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,void *a45,uint64_t a46,void *a47)
{

  _Unwind_Resume(a1);
}

void sub_1B6EC419C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *a16, void *a17, void *a18, uint64_t a19, void *a20,void *a21,void *a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,void *a27)
{
  void *v27;
  void *v28;
  void *v29;
  void *v30;
  void *v31;
  void *v32;

  _Unwind_Resume(a1);
}

void sub_1B6EC4408(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1B6EC4F38(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *a16, uint64_t a17, void *a18, uint64_t a19, void *a20,void *a21,void *a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,void *a32,void *a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,void *a40)
{
  void *v40;
  void *v41;
  void *v42;
  void *v43;
  void *v44;

  _Unwind_Resume(a1);
}

void sub_1B6EC549C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, void *a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *a19, void *a20,void *a21,void *a22,void *a23,void *a24,void *a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29)
{
  void *v29;
  void *v30;
  void *v31;
  void *v32;
  void *v33;
  void *v34;
  void *v35;

  _Block_object_dispose(&a29, 8);
  _Unwind_Resume(a1);
}

void sub_1B6EC57AC(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1B6EC59BC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18)
{
  void *v18;
  void *v19;

  _Unwind_Resume(a1);
}

void sub_1B6EC5C3C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_1B6EC5E60(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  _Unwind_Resume(a1);
}

void sub_1B6EC7250(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *a17, void *a18, void *a19, void *a20,void *a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,void *a27,void *a28,void *a29,void *a30,void *a31,uint64_t a32,void *a33,void *a34,uint64_t a35,void *a36,void *a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,void *a42,void *a43,void *a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,void *a58)
{

  _Block_object_dispose(&STACK[0x310], 8);
  _Unwind_Resume(a1);
}

void sub_1B6EC7A38(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;

  _Unwind_Resume(a1);
}

void sub_1B6EC7FE8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, uint64_t a15, void *a16, void *a17, void *a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,char a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,id a30,char a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,id a36)
{
  void *v36;
  void *v37;
  void *v38;

  _Block_object_dispose(&a25, 8);
  _Block_object_dispose(&a31, 8);

  _Unwind_Resume(a1);
}

uint64_t __Block_byref_object_copy__48(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void __Block_byref_object_dispose__48(uint64_t a1)
{

}

void sub_1B6EC85CC(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;

  _Unwind_Resume(a1);
}

void sub_1B6EC8768(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1B6EC97D4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11, void *a12, void *a13, void *a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *a20,uint64_t a21,uint64_t a22,uint64_t a23,void *a24,uint64_t a25,void *a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,void *a31,void *a32,void *a33,uint64_t a34,uint64_t a35,void *a36,uint64_t a37,void *a38,void *a39,void *a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,void *a45,void *a46,void *a47,void *a48,void *a49,void *a50,void *a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,char a57,uint64_t a58,uint64_t a59,uint64_t a60,char a61)
{

  _Block_object_dispose(&a57, 8);
  _Block_object_dispose(&a61, 8);
  _Block_object_dispose(&STACK[0x2F0], 8);
  _Block_object_dispose(&STACK[0x220], 8);
  _Block_object_dispose(&STACK[0x320], 8);

  _Unwind_Resume(a1);
}

void sub_1B6EC9FE0(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  _Unwind_Resume(a1);
}

void sub_1B6ECA504(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, void *a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,id a25,id a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,char a31,uint64_t a32,uint64_t a33,uint64_t a34,char a35,uint64_t a36,uint64_t a37,uint64_t a38,char a39)
{
  void *v39;
  void *v40;
  void *v41;
  void *v42;
  uint64_t v43;

  _Block_object_dispose(&a17, 8);
  _Block_object_dispose(&a31, 8);
  _Block_object_dispose(&a35, 8);
  _Block_object_dispose(&a39, 8);
  _Block_object_dispose((const void *)(v43 - 224), 8);

  _Unwind_Resume(a1);
}

void sub_1B6ECA7A4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;

  _Unwind_Resume(a1);
}

void sub_1B6ECA868(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1B6ECA9A4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, id a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  void *v14;
  void *v15;

  _Unwind_Resume(a1);
}

void sub_1B6ECAA50(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_1B6ECB1B0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *a16, void *a17, void *a18, void *a19, void *a20,void *a21,void *a22,void *a23,void *a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,void *a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,void *a36,void *a37,uint64_t a38,void *a39,void *a40,void *a41,void *a42)
{
  void *v42;
  void *v43;
  void *v44;
  void *v45;

  _Unwind_Resume(a1);
}

void sub_1B6ECBC24(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,void *a33,uint64_t a34,void *a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,void *a40,uint64_t a41,char a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,id a50,uint64_t a51,char a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,id a60,uint64_t a61,uint64_t a62,char a63)
{
  char a67;
  void *v67;
  void *v68;

  _Block_object_dispose(&a42, 8);
  _Block_object_dispose(&a52, 8);

  _Block_object_dispose(&a63, 8);
  _Block_object_dispose(&a67, 8);

  _Block_object_dispose(&STACK[0x230], 8);
  _Block_object_dispose(&STACK[0x250], 8);
  _Block_object_dispose(&STACK[0x270], 8);

  _Unwind_Resume(a1);
}

void sub_1B6ECBF98(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void sub_1B6ECC090(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void sub_1B6ECC158(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void sub_1B6ECC21C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void sub_1B6ECC380(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  void *v14;
  void *v15;

  _Unwind_Resume(a1);
}

void sub_1B6ECC4B0(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1B6ECCAB8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11, void *a12, void *a13, void *a14, void *a15, void *a16, void *a17, void *a18, void *a19, void *a20,void *a21,void *a22,void *a23,void *a24,void *a25,void *a26,void *a27)
{
  void *v27;
  void *v28;
  void *v29;
  void *v30;
  void *v31;
  void *v32;
  void *v33;
  void *v34;

  _Unwind_Resume(a1);
}

void sub_1B6ECCCB4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;

  _Unwind_Resume(a1);
}

void sub_1B6ECD2C8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, void *a15, void *a16, uint64_t a17, void *a18, uint64_t a19, void *a20,void *a21,void *a22,void *a23,void *a24)
{
  void *v24;

  _Unwind_Resume(a1);
}

void sub_1B6ECD4B8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void sub_1B6ECD7B0(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;

  _Unwind_Resume(a1);
}

void sub_1B6ECDD54(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, void *a13, void *a14, void *a15, void *a16, void *a17, void *a18, void *a19, void *a20,uint64_t a21,uint64_t a22,void *a23,void *a24,void *a25)
{
  void *v25;
  void *v26;
  void *v27;
  void *v28;
  void *v29;
  void *v30;
  void *v31;

  _Unwind_Resume(a1);
}

void sub_1B6ECDF44(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;

  _Unwind_Resume(a1);
}

void ___ZL38getGDVUVisualUnderstandingServiceClassv_block_invoke_1(uint64_t a1)
{
  IntelligencePlatformLibrary();
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = objc_getClass("GDVUVisualUnderstandingService");
  if (*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24))
  {
    getGDVUVisualUnderstandingServiceClass(void)::softClass = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24);
  }
  else
  {
    ___ZL38getGDVUVisualUnderstandingServiceClassv_block_invoke_cold_1();
    IntelligencePlatformLibrary();
  }
}

Class ___ZL35getGDVUEntityRecognitionClientClassv_block_invoke_2(uint64_t a1)
{
  Class result;
  uint64_t v3;

  IntelligencePlatformLibrary();
  result = objc_getClass("GDVUEntityRecognitionClient");
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = result;
  if (*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24))
  {
    getGDVUEntityRecognitionClientClass(void)::softClass = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24);
  }
  else
  {
    v3 = ___ZL35getGDVUEntityRecognitionClientClassv_block_invoke_cold_1();
    return (Class)___ZL23getGDVUEntityClassClassv_block_invoke(v3);
  }
  return result;
}

Class ___ZL23getGDVUEntityClassClassv_block_invoke(uint64_t a1)
{
  Class result;
  uint64_t v3;

  IntelligencePlatformLibrary();
  result = objc_getClass("GDVUEntityClass");
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = result;
  if (*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24))
  {
    getGDVUEntityClassClass(void)::softClass = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24);
  }
  else
  {
    v3 = ___ZL23getGDVUEntityClassClassv_block_invoke_cold_1();
    return (Class)-[NSDate(MADProcessingStatus) mad_nextAttemptDateForStatus:attempts:](v3);
  }
  return result;
}

BOOL VCPProtoPointReadFrom(uint64_t a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  char v14;
  uint64_t v16;
  int v17;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  int *v24;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) < *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
  {
    v7 = (int *)MEMORY[0x1E0D82BB8];
    while (1)
    {
      if (*(_BYTE *)(a2 + *v5))
        return *(_BYTE *)(a2 + *v5) == 0;
      v8 = 0;
      v9 = 0;
      v10 = 0;
      while (1)
      {
        v11 = *v3;
        v12 = *(_QWORD *)(a2 + v11);
        v13 = v12 + 1;
        if (v12 == -1 || v13 > *(_QWORD *)(a2 + *v4))
          break;
        v14 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
        *(_QWORD *)(a2 + v11) = v13;
        v10 |= (unint64_t)(v14 & 0x7F) << v8;
        if ((v14 & 0x80) == 0)
          goto LABEL_12;
        v8 += 7;
        if (v9++ >= 9)
        {
          v10 = 0;
          v16 = *v5;
          v17 = *(unsigned __int8 *)(a2 + v16);
          goto LABEL_14;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
      v16 = *v5;
      v17 = *(unsigned __int8 *)(a2 + v16);
      if (*(_BYTE *)(a2 + v16))
        v10 = 0;
LABEL_14:
      if (v17 || (v10 & 7) == 4)
        return *(_BYTE *)(a2 + *v5) == 0;
      if ((v10 >> 3) == 2)
        break;
      if ((v10 >> 3) == 1)
      {
        v19 = *v3;
        v20 = *(_QWORD *)(a2 + v19);
        if (v20 <= 0xFFFFFFFFFFFFFFF7 && v20 + 8 <= *(_QWORD *)(a2 + *v4))
        {
          v21 = *(_QWORD *)(*(_QWORD *)(a2 + *v7) + v20);
          *(_QWORD *)(a2 + v19) = v20 + 8;
        }
        else
        {
          *(_BYTE *)(a2 + v16) = 1;
          v21 = 0;
        }
        v24 = &OBJC_IVAR___VCPProtoPoint__x;
LABEL_32:
        *(_QWORD *)(a1 + *v24) = v21;
        goto LABEL_33;
      }
      if ((PBReaderSkipValueWithTag() & 1) == 0)
        return 0;
LABEL_33:
      if (*(_QWORD *)(a2 + *v3) >= *(_QWORD *)(a2 + *v4))
        return *(_BYTE *)(a2 + *v5) == 0;
    }
    v22 = *v3;
    v23 = *(_QWORD *)(a2 + v22);
    if (v23 <= 0xFFFFFFFFFFFFFFF7 && v23 + 8 <= *(_QWORD *)(a2 + *v4))
    {
      v21 = *(_QWORD *)(*(_QWORD *)(a2 + *v7) + v23);
      *(_QWORD *)(a2 + v22) = v23 + 8;
    }
    else
    {
      *(_BYTE *)(a2 + v16) = 1;
      v21 = 0;
    }
    v24 = &OBJC_IVAR___VCPProtoPoint__y;
    goto LABEL_32;
  }
  return *(_BYTE *)(a2 + *v5) == 0;
}

void sub_1B6ECE888(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1B6ECE9D4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_1B6ECEAA4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  v3 = v2;

  _Unwind_Resume(a1);
}

void sub_1B6ECEB18(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1B6ECEB78(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1B6ECEBC4(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

ma::QualityAnalysis *ma::QualityAnalysis::QualityAnalysis(ma::QualityAnalysis *this, const ma::FrameBuffer *a2)
{
  uint64_t v4;
  uint64_t v5;

  *(_QWORD *)this = 0;
  *((_QWORD *)this + 1) = 0;
  *((_QWORD *)this + 2) = 0;
  v4 = MEMORY[0x1E0CA2E68];
  *(_OWORD *)((char *)this + 24) = *MEMORY[0x1E0CA2E68];
  *((_QWORD *)this + 5) = *(_QWORD *)(v4 + 16);
  *((_BYTE *)this + 48) = 1;
  *((_DWORD *)this + 13) = 0;
  ma::HinkleyDetector::HinkleyDetector((uint64_t)this + 56);
  v5 = MEMORY[0x1E0CA2E18];
  *(_OWORD *)((char *)this + 84) = *MEMORY[0x1E0CA2E18];
  *(_QWORD *)((char *)this + 100) = *(_QWORD *)(v5 + 16);
  *((_DWORD *)this + 27) = 0;
  *((_QWORD *)this + 14) = a2;
  *((_DWORD *)this + 30) = 0;
  *((_QWORD *)this + 16) = 0;
  *((_QWORD *)this + 17) = 0;
  *(_QWORD *)((char *)this + 143) = 0;
  *((_QWORD *)this + 21) = 0;
  *(_OWORD *)((char *)this + 152) = ma::QualityAnalysis::kDefaultQualityScoreInterval;
  *((_QWORD *)this + 22) = 0x3F8000003E19999ALL;
  *(_OWORD *)((char *)this + 184) = 0u;
  *(_OWORD *)((char *)this + 200) = 0u;
  return this;
}

void sub_1B6ECEC84(_Unwind_Exception *a1)
{
  uint64_t v1;

  MotionAnalysis<ma::ObstructionSegment>::~MotionAnalysis(v1);
  _Unwind_Resume(a1);
}

void ma::QualityAnalysis::~QualityAnalysis(ma::QualityAnalysis *this)
{
  const void *v2;
  const void *v3;

  v2 = (const void *)*((_QWORD *)this + 23);
  if (v2)
    CFRelease(v2);
  v3 = (const void *)*((_QWORD *)this + 24);
  if (v3)
    CFRelease(v3);
  ma::MotionFilter::~MotionFilter((ma::QualityAnalysis *)((char *)this + 56));
  MotionAnalysis<ma::ObstructionSegment>::~MotionAnalysis((uint64_t)this);
}

uint64_t ma::QualityAnalysis::Initialize(ma::QualityAnalysis *this, int a2, int a3, const __CFDictionary *a4, float a5)
{
  char v6;
  float v10;
  float v11;
  int v12;
  const CFArrayCallBacks *v13;
  CFMutableArrayRef Mutable;
  uint64_t result;
  __int128 *v16;
  _OWORD *v17;
  float v18;
  CMTime v19;
  CMTime v20;

  v6 = a3;
  if (a2)
    v10 = 0.05;
  else
    v10 = 0.03;
  if (a2)
    v11 = 0.2;
  else
    v11 = 0.1;
  if (a2 | a3)
    v12 = 1;
  else
    v12 = (int)(float)(a5 * 10.0);
  v13 = (const CFArrayCallBacks *)MEMORY[0x1E0C9B378];
  *((_QWORD *)this + 23) = CFArrayCreateMutable(0, 0, MEMORY[0x1E0C9B378]);
  Mutable = CFArrayCreateMutable(0, 0, v13);
  *((_QWORD *)this + 24) = Mutable;
  result = 4294967188;
  if (*((_QWORD *)this + 23) && Mutable)
  {
    v16 = &ma::QualityAnalysis::kDefaultQualityScoreInterval;
    if (a2)
      v16 = (__int128 *)&ma::QualityAnalysis::kIrisQualityScoreInterval;
    v17 = (_OWORD *)((char *)this + 152);
    *(_OWORD *)((char *)this + 152) = *v16;
    *((_QWORD *)this + 21) = *((_QWORD *)v16 + 2);
    v18 = 0.15;
    if (a2)
      v18 = *(float *)"\nף<";
    *((float *)this + 44) = v18;
    *((_BYTE *)this + 149) = a2;
    *((_BYTE *)this + 150) = v6;
    if (a2)
    {
      if (CFDictionaryContainsKey(a4, CFSTR("MetaFocusResults")))
        *((_QWORD *)this + 25) = CFDictionaryGetValue(a4, CFSTR("MetaFocusResults"));
      if (CFDictionaryContainsKey(a4, CFSTR("MetaMotionResults")))
        *((_QWORD *)this + 26) = CFDictionaryGetValue(a4, CFSTR("MetaMotionResults"));
    }
    ma::HinkleyDetector::Initialize((uint64_t)this + 56, v10, v11, v12);
    *(_OWORD *)&v19.value = *v17;
    v19.epoch = *((_QWORD *)this + 21);
    CMTimeMultiplyByFloat64(&v20, &v19, a5);
    *v17 = *(_OWORD *)&v20.value;
    *((_QWORD *)this + 21) = v20.epoch;
    *((float *)this + 45) = a5;
    return MotionAnalysis<ma::QualitySegment>::Initialize((uint64_t)this);
  }
  return result;
}

uint64_t MotionAnalysis<ma::QualitySegment>::Initialize(uint64_t a1)
{
  ma::QualitySegment *v3;
  ma::QualitySegment *v4;

  if (*(_QWORD *)(a1 + 16) || *(_QWORD *)(a1 + 8))
    return 4294967246;
  *(_QWORD *)(a1 + 16) = CFArrayCreateMutable(0, 0, MEMORY[0x1E0C9B378]);
  v3 = (ma::QualitySegment *)operator new(0x98uLL, MEMORY[0x1E0DE4E10]);
  if (v3)
  {
    v4 = v3;
    ma::QualitySegment::QualitySegment(v3);
    *(_QWORD *)(a1 + 8) = v4;
    if (*(_QWORD *)(a1 + 16))
      return 0;
    else
      return 4294967188;
  }
  else
  {
    *(_QWORD *)(a1 + 8) = 0;
    return 4294967188;
  }
}

void sub_1B6ECEF40(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1BCCA12A4](v1, MEMORY[0x1E0DE4E10]);
  _Unwind_Resume(a1);
}

uint64_t ma::QualityAnalysis::ProcessFrame(ma::QualityAnalysis *this, Frame *a2, Frame *a3)
{
  ma::Segment *v6;
  uint64_t result;
  ma::Segment *v8;
  int frame_idx;
  CMTime v10;
  CMTime v11;

  if (*((_BYTE *)this + 48))
  {
    ma::QualitySegment::ResetStats(*((ma::QualitySegment **)this + 1), a2, a3, *((float *)this + 45));
    v6 = (ma::Segment *)*((_QWORD *)this + 1);
    v11 = *(CMTime *)((_BYTE *)this + 1);
    ma::Segment::SetStart(v6, 0, &v11);
    result = 0;
    *((_BYTE *)this + 48) = 0;
    return result;
  }
  if (ma::QualityAnalysis::DecideSegmentPoint(this, *((const ma::QualitySegment **)this + 1), a2))
  {
    result = ma::QualityAnalysis::AddSegment((const __CFArray **)this, (const ma::Frame *)a2, 0);
    if ((_DWORD)result)
      return result;
    ma::QualitySegment::ResetStats(*((ma::QualitySegment **)this + 1), a2, a3, *((float *)this + 45));
    v8 = (ma::Segment *)*((_QWORD *)this + 1);
    frame_idx = a2->frame_idx_;
    v10 = *(CMTime *)(&a2->frame_idx_ + 1);
    ma::Segment::SetStart(v8, frame_idx, &v10);
  }
  else
  {
    ma::QualitySegment::UpdateStats(*((ma::QualitySegment **)this + 1), a2, a3, *((float *)this + 45));
  }
  return 0;
}

BOOL ma::QualityAnalysis::DecideSegmentPoint(ma::QualityAnalysis *this, const ma::QualitySegment *a2, const Frame *a3)
{
  int v4;
  _BOOL8 v6;
  _BOOL4 v7;

  v4 = *((_DWORD *)a2 + 5);
  if (!v4)
  {
    v6 = 0;
    goto LABEL_8;
  }
  if (*((_DWORD *)this + 16) >= a3->frame_idx_ - *((_DWORD *)a2 + 3))
  {
    v7 = 0;
    v6 = 0;
  }
  else
  {
    v6 = ma::HinkleyDetector::Test((ma::QualityAnalysis *)((char *)this + 56), (const float *)a2 + 33, &a3->org_motion_.z_, v4 + 1);
    v7 = *((_DWORD *)a2 + 5) == 0;
    if (v6)
      goto LABEL_8;
  }
  if (v7)
LABEL_8:
    ma::HinkleyDetector::ResetStats((ma::QualityAnalysis *)((char *)this + 56));
  return v6;
}

uint64_t ma::QualityAnalysis::AddSegment(const __CFArray **this, const ma::Frame *a2, int a3)
{
  const __CFArray *v6;
  ma::Segment *v7;
  int Count;
  _OWORD *v10;
  int v11;
  _BOOL4 v12;
  CMTime v14;
  CMTime lhs;
  CMTime v16;

  v6 = *this;
  v7 = this[1];
  if (v6)
    Count = CFArrayGetCount(v6);
  else
    Count = 0;
  v10 = (_OWORD *)((char *)a2 + 4);
  v11 = *(_DWORD *)a2 + a3;
  if (a3)
  {
    *(_OWORD *)&lhs.value = *v10;
    lhs.epoch = *(_QWORD *)((char *)a2 + 20);
    v14 = *(CMTime *)((char *)a2 + 28);
    CMTimeAdd(&v16, &lhs, &v14);
  }
  else
  {
    *(_OWORD *)&v16.value = *v10;
    v16.epoch = *(_QWORD *)((char *)a2 + 20);
  }
  ma::Segment::Finalize(v7, Count, v11, &v16);
  v12 = *((_BYTE *)this + 149) != 0;
  if (*((_BYTE *)this + 149) && (a3 & 1) == 0)
  {
    if (*this)
      v12 = CFArrayGetCount(*this) == 0;
    else
      v12 = 1;
  }
  ma::QualitySegment::CalculateQualityScore(this[1], v12);
  return MotionAnalysis<ma::QualitySegment>::AddSegment((uint64_t)this);
}

uint64_t MotionAnalysis<ma::QualitySegment>::AddSegment(uint64_t a1)
{
  ma::QualitySegment *v2;
  ma::QualitySegment *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;

  v2 = (ma::QualitySegment *)operator new(0x98uLL, MEMORY[0x1E0DE4E10]);
  if (!v2)
    return 4294967188;
  v3 = v2;
  ma::QualitySegment::QualitySegment(v2);
  v4 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)(a1 + 8) = v3;
  v7 = v4;
  v5 = Vector<ma::Object *>::PushBack((CFMutableArrayRef *)a1, &v7);
  if ((_DWORD)v5 && v7)
    (*(void (**)(uint64_t))(*(_QWORD *)v7 + 8))(v7);
  return v5;
}

void sub_1B6ECF264(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1BCCA12A4](v1, MEMORY[0x1E0DE4E10]);
  _Unwind_Resume(a1);
}

uint64_t ma::QualityAnalysis::FinalizeSegments(uint64_t a1, const ma::Frame *a2, uint64_t *a3, uint64_t *a4, _QWORD *a5, uint64_t *a6)
{
  uint64_t v11;
  void *__p;
  void *v14;

  v11 = ma::QualityAnalysis::AddSegment((const __CFArray **)a1, a2, 1);
  if (!(_DWORD)v11)
  {
    v11 = (uint64_t)ma::QualityAnalysis::SplitSegment(a1, a3);
    if (!(_DWORD)v11)
    {
      v11 = (uint64_t)ma::QualityAnalysis::SplitSegment(a1, a4);
      if (!(_DWORD)v11)
      {
        ma::QualityAnalysis::AdjustQualityScore((CFArrayRef *)a1, a3);
        ma::QualityAnalysis::AdjustQualityScore((CFArrayRef *)a1, a4);
        if (!*(_BYTE *)(a1 + 149))
          goto LABEL_13;
        if (*(_QWORD *)(a1 + 208))
          ma::QualityAnalysis::RefineQualityScore((CFArrayRef *)a1, a3);
        if (!*(_QWORD *)(a1 + 200))
          goto LABEL_13;
        ma::QualityAnalysis::GenerateDegradedScores((CFArrayRef *)a1, &__p);
        v11 = (uint64_t)ma::QualityAnalysis::SplitSegment(a1, &__p);
        if (!(_DWORD)v11)
          ma::QualityAnalysis::AdjustQualityScore((CFArrayRef *)a1, (uint64_t *)&__p);
        if (__p)
        {
          v14 = __p;
          operator delete(__p);
        }
        if (!(_DWORD)v11)
        {
LABEL_13:
          ma::QualityAnalysis::GetTrackSegment(a5, a6, &__p);
          v11 = (uint64_t)ma::QualityAnalysis::SplitSegment(a1, &__p);
          if (!(_DWORD)v11)
          {
            ma::QualityAnalysis::AdjustQualityScoreTracking((const __CFArray *)a1, &__p);
            v11 = (uint64_t)ma::QualityAnalysis::MergeTrackingSegments((ma::QualityAnalysis *)a1);
            if (!(_DWORD)v11)
            {
              v11 = (uint64_t)ma::QualityAnalysis::MergeSimilarSegments((ma::QualityAnalysis *)a1);
              if (!(_DWORD)v11)
              {
                v11 = (uint64_t)ma::QualityAnalysis::MergeConsecutiveShortSegments((ma::QualityAnalysis *)a1);
                if (!(_DWORD)v11)
                {
                  v11 = (uint64_t)ma::QualityAnalysis::MergeSparseShortSegments((ma::QualityAnalysis *)a1);
                  if (!(_DWORD)v11)
                  {
                    v11 = (uint64_t)ma::QualityAnalysis::MergeSimilarSegments((ma::QualityAnalysis *)a1);
                    if (!(_DWORD)v11)
                    {
                      if (*(_BYTE *)(a1 + 150))
                        ma::QualityAnalysis::RecalculateQualityScore((CFArrayRef *)a1);
                      v11 = ma::QualityAnalysis::QuantizeQualityAndMergeSameSegments((ma::QualityAnalysis *)a1);
                      if (!(_DWORD)v11)
                        v11 = ma::QualityAnalysis::StoreSegmentResult((CFArrayRef *)a1);
                    }
                  }
                }
              }
            }
          }
          if (__p)
          {
            v14 = __p;
            operator delete(__p);
          }
        }
      }
    }
  }
  return v11;
}

void sub_1B6ECF438(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

const __CFArray *ma::QualityAnalysis::SplitSegment(uint64_t a1, _QWORD *a2)
{
  const __CFArray *result;
  int Count;
  uint64_t v6;
  const void *ValueAtIndex;
  __int128 v8;
  __int128 v9;
  unint64_t i;
  _OWORD *v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  const void *v16;
  uint64_t v17;
  uint64_t v18;
  const void *v19;
  uint64_t v20;
  CMTime *v21;
  CMTimeRange v23;
  CMTimeRange v24;
  CMTime v25;
  CMTimeRange v26;
  CMTimeRange v27;
  CMTimeRange v28;
  CMTime v29;
  CMTimeRange v30;
  CMTime v31;
  CMTime v32;
  CMTime duration;
  CMTimeRange otherRange;
  CMTimeRange v35;
  CMTimeRange time1;
  CMTimeRange range;
  CMTimeRange v38;
  CMTimeRange v39;
  CMTime rhs;
  CMTime time2;

  result = *(const __CFArray **)a1;
  if (result)
  {
    Count = CFArrayGetCount(result);
    if (Count >= 1)
    {
      v6 = Count;
      do
      {
        ValueAtIndex = CFArrayGetValueAtIndex(*(CFArrayRef *)a1, (v6 - 1));
        v8 = *(_OWORD *)(*(_QWORD *)ValueAtIndex + 24);
        v9 = *(_OWORD *)(*(_QWORD *)ValueAtIndex + 56);
        *(_OWORD *)&v39.start.epoch = *(_OWORD *)(*(_QWORD *)ValueAtIndex + 40);
        *(_OWORD *)&v39.duration.timescale = v9;
        *(_OWORD *)&v39.start.value = v8;
        if ((int)(-991146299 * ((uint64_t)(a2[1] - *a2) >> 2)) >= 1)
        {
          for (i = -991146299 * ((uint64_t)(a2[1] - *a2) >> 2) + 1; i > 1; --i)
          {
            v11 = (_OWORD *)(*a2 + 52 * (i - 2));
            v12 = v11[1];
            *(_OWORD *)&v38.start.value = *v11;
            *(_OWORD *)&v38.start.epoch = v12;
            v14 = *v11;
            v13 = v11[1];
            *(_OWORD *)&v38.duration.timescale = v11[2];
            v15 = v11[2];
            *(_OWORD *)&range.start.epoch = v13;
            *(_OWORD *)&range.duration.timescale = v15;
            *(_OWORD *)&range.start.value = v14;
            CMTimeRangeGetEnd(&rhs, &range);
            time1.start = rhs;
            time2 = v39.start;
            if (CMTimeCompare(&time1.start, &time2) < 0)
              break;
            if (*(float *)(*a2 + 52 * (i - 2) + 48) != 0.0)
            {
              v35 = v39;
              memset(&time1, 0, sizeof(time1));
              otherRange = v38;
              CMTimeRangeGetIntersection(&time1, &v35, &otherRange);
              if ((time1.start.flags & 1) == 0
                || (time1.duration.flags & 1) == 0
                || time1.duration.epoch
                || time1.duration.value < 0
                || (duration = time1.duration,
                    v32 = *(CMTime *)*(_QWORD *)&MEMORY[0x1E0CA2E68],
                    CMTimeCompare(&duration, &v32)))
              {
                v30 = time1;
                CMTimeRangeGetEnd(&v31, &v30);
                v28 = v39;
                CMTimeRangeGetEnd(&v29, &v28);
                time2 = v31;
                rhs = v29;
                if (CMTimeCompare(&time2, &rhs) < 0)
                {
                  v27 = time1;
                  CMTimeRangeGetEnd(&time2, &v27);
                  *(CMTime *)(*(_QWORD *)(a1 + 8) + 24) = time2;
                  v26 = v39;
                  CMTimeRangeGetEnd(&v29, &v26);
                  v24 = time1;
                  CMTimeRangeGetEnd(&v25, &v24);
                  time2 = v29;
                  rhs = v25;
                  CMTimeSubtract(&v31, &time2, &rhs);
                  *(CMTime *)(*(_QWORD *)(a1 + 8) + 48) = v31;
                  *(_DWORD *)(*(_QWORD *)(a1 + 8) + 76) = *(_DWORD *)(*(_QWORD *)CFArrayGetValueAtIndex(*(CFArrayRef *)a1, (v6 - 1))+ 76);
                  v16 = CFArrayGetValueAtIndex(*(CFArrayRef *)a1, (v6 - 1));
                  v17 = *(_QWORD *)(a1 + 8);
                  *(_BYTE *)(v17 + 80) = *(_BYTE *)(*(_QWORD *)v16 + 80);
                  *(_DWORD *)(v17 + 8) = v6;
                  time2 = v39.duration;
                  rhs = *(CMTime *)(v17 + 48);
                  CMTimeSubtract(&v39.duration, &time2, &rhs);
                  result = (const __CFArray *)MotionAnalysis<ma::QualitySegment>::InsertSegment(a1, v6);
                  if ((_DWORD)result)
                    return result;
                }
                time2 = time1.start;
                rhs = v39.start;
                if (CMTimeCompare(&time2, &rhs) >= 1)
                {
                  v18 = *(_QWORD *)(a1 + 8);
                  *(_OWORD *)(v18 + 24) = *(_OWORD *)&time1.start.value;
                  *(_QWORD *)(v18 + 40) = time1.start.epoch;
                  v23 = v39;
                  CMTimeRangeGetEnd(&v29, &v23);
                  time2 = v29;
                  rhs = time1.start;
                  CMTimeSubtract(&v31, &time2, &rhs);
                  *(CMTime *)(*(_QWORD *)(a1 + 8) + 48) = v31;
                  *(_DWORD *)(*(_QWORD *)(a1 + 8) + 76) = *(_DWORD *)(*(_QWORD *)CFArrayGetValueAtIndex(*(CFArrayRef *)a1, (v6 - 1))+ 76);
                  v19 = CFArrayGetValueAtIndex(*(CFArrayRef *)a1, (v6 - 1));
                  v20 = *(_QWORD *)(a1 + 8);
                  *(_BYTE *)(v20 + 80) = *(_BYTE *)(*(_QWORD *)v19 + 80);
                  *(_DWORD *)(v20 + 8) = v6;
                  time2 = v39.duration;
                  rhs = *(CMTime *)(v20 + 48);
                  CMTimeSubtract(&v31, &time2, &rhs);
                  v39.duration = v31;
                  result = (const __CFArray *)MotionAnalysis<ma::QualitySegment>::InsertSegment(a1, v6);
                  if ((_DWORD)result)
                    return result;
                }
              }
            }
          }
        }
        v21 = *(CMTime **)CFArrayGetValueAtIndex(*(CFArrayRef *)a1, (v6 - 1));
        v21[2] = v39.duration;
      }
      while (v6-- > 1);
    }
    return 0;
  }
  return result;
}

uint64_t ma::QualityAnalysis::AdjustQualityScore(CFArrayRef *a1, uint64_t *a2)
{
  CFArrayRef *v3;
  CFIndex i;
  const __CFArray *v5;
  uint64_t *ValueAtIndex;
  uint64_t v7;
  CMTimeFlags v8;
  CMTimeValue v9;
  CMTimeFlags v10;
  CMTimeScale v11;
  CMTimeEpoch v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  float v16;
  float *v17;
  __int128 v18;
  __int128 v19;
  float v20;
  float v21;
  float v22;
  const void *v23;
  float v24;
  float v25;
  float v26;
  CFIndex v29;
  CMTimeEpoch v30;
  CMTime v31;
  CMTime time;
  CMTime v33;
  CMTime duration;
  CMTimeRange otherRange;
  CMTimeRange range;
  CMTimeRange v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  CMTime time2;
  CMTime time1;
  CMTimeValue v43;
  CMTimeScale v44;
  uint64_t v45;

  v45 = *MEMORY[0x1E0C80C00];
  if (a2[1] != *a2)
  {
    v3 = a1;
    for (i = 0; ; ++i)
    {
      v5 = *v3;
      if (*v3)
        LODWORD(v5) = CFArrayGetCount(v5);
      if (i >= (int)v5)
        break;
      ValueAtIndex = (uint64_t *)CFArrayGetValueAtIndex(*v3, i);
      v7 = *ValueAtIndex;
      v43 = *(_QWORD *)(*ValueAtIndex + 24);
      v8 = *(_DWORD *)(v7 + 36);
      v44 = *(_DWORD *)(v7 + 32);
      v9 = *(_QWORD *)(v7 + 48);
      v30 = *(_QWORD *)(v7 + 40);
      v11 = *(_DWORD *)(v7 + 56);
      v10 = *(_DWORD *)(v7 + 60);
      v12 = *(_QWORD *)(v7 + 64);
      if ((v8 & 1) != 0 && (v10 & 1) != 0 && !v12 && (v9 & 0x8000000000000000) == 0)
      {
        time1.value = *(_QWORD *)(v7 + 48);
        time1.timescale = v11;
        time1.flags = v10;
        time1.epoch = 0;
        time2 = *(CMTime *)*(_QWORD *)&MEMORY[0x1E0CA2E68];
        if (!CMTimeCompare(&time1, &time2))
          continue;
      }
      v13 = *a2;
      if (a2[1] != *a2)
      {
        v29 = i;
        v14 = 0;
        v15 = 0;
        v16 = 0.0;
        do
        {
          v17 = (float *)(v13 + v14);
          v18 = *(_OWORD *)v17;
          v19 = *((_OWORD *)v17 + 2);
          v39 = *((_OWORD *)v17 + 1);
          v40 = v19;
          v20 = v17[12];
          v38 = v18;
          memset(&v37, 0, sizeof(v37));
          range.start.value = v43;
          range.start.timescale = v44;
          range.start.flags = v8;
          range.start.epoch = v30;
          range.duration.value = v9;
          range.duration.timescale = v11;
          range.duration.flags = v10;
          range.duration.epoch = v12;
          *(_OWORD *)&otherRange.start.epoch = v39;
          *(_OWORD *)&otherRange.duration.timescale = v19;
          *(_OWORD *)&otherRange.start.value = v18;
          CMTimeRangeGetIntersection(&v37, &range, &otherRange);
          if ((v37.start.flags & 1) == 0
            || (v37.duration.flags & 1) == 0
            || v37.duration.epoch
            || v37.duration.value < 0
            || (duration = v37.duration, v33 = *(CMTime *)*(_QWORD *)&MEMORY[0x1E0CA2E68],
                                         CMTimeCompare(&duration, &v33)))
          {
            time = v37.duration;
            v16 = v16 + CMTimeGetSeconds(&time) * v20;
          }
          ++v15;
          v13 = *a2;
          v14 += 52;
        }
        while (0x4EC4EC4EC4EC4EC5 * ((a2[1] - *a2) >> 2) > v15);
        v3 = a1;
        i = v29;
        if (v16 != 0.0)
        {
          v31.value = v9;
          v31.timescale = v11;
          v31.flags = v10;
          v31.epoch = v12;
          v21 = v16 / CMTimeGetSeconds(&v31);
          v22 = expf((float)(v21 * v21) / -0.05);
          v23 = CFArrayGetValueAtIndex(*a1, v29);
          v24 = (float)(v22 * *(float *)(*(_QWORD *)v23 + 76)) + -0.45;
          if (v24 < 1.0)
            v25 = (float)(v22 * *(float *)(*(_QWORD *)v23 + 76)) + -0.45;
          else
            v25 = 1.0;
          if (v24 <= 0.0)
            v26 = 0.0;
          else
            v26 = v25;
          *(float *)(*(_QWORD *)CFArrayGetValueAtIndex(*a1, v29) + 76) = v26;
          *(_BYTE *)(*(_QWORD *)CFArrayGetValueAtIndex(*a1, v29) + 72) = 1;
        }
      }
    }
  }
  return 0;
}

const __CFArray *ma::QualityAnalysis::RefineQualityScore(CFArrayRef *a1, uint64_t *a2)
{
  const __CFArray *result;
  CFIndex i;
  uint64_t *ValueAtIndex;
  uint64_t v7;
  CMTimeFlags v8;
  CMTimeFlags v9;
  CFIndex v10;
  float v11;
  const __CFDictionary *v12;
  const __CFNumber *Value;
  float v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  float v19;
  __int128 *v20;
  __int128 v21;
  __int128 v22;
  float v23;
  CFIndex v24;
  CMTimeEpoch v25;
  CMTimeScale v26;
  CMTimeEpoch v27;
  CMTimeValue v28;
  CMTime v29;
  CMTime v30;
  CMTime duration;
  CMTime v32;
  CMTime v33;
  CMTimeRange v34;
  CMTimeRange v35;
  CMTimeRange v36;
  CMTimeRange v37;
  CMTime v38;
  CMTimeRange v39;
  CMTime v40;
  CMTimeRange v41;
  CMTimeRange otherRange;
  CMTimeRange range;
  CMTimeRange valuePtr;
  CMTimeRange v45;
  CMTime time;
  CMTime time2;
  CMTime time1;
  CMTime start;
  CMTimeValue v50;
  CMTimeScale v51;
  uint64_t v52;

  v52 = *MEMORY[0x1E0C80C00];
  result = (const __CFArray *)CFArrayGetCount(a1[26]);
  if (result)
  {
    for (i = 0; ; ++i)
    {
      result = *a1;
      if (*a1)
        result = (const __CFArray *)CFArrayGetCount(result);
      if (i >= (int)result)
        break;
      ValueAtIndex = (uint64_t *)CFArrayGetValueAtIndex(*a1, i);
      v7 = *ValueAtIndex;
      v50 = *(_QWORD *)(*ValueAtIndex + 24);
      v8 = *(_DWORD *)(v7 + 36);
      v51 = *(_DWORD *)(v7 + 32);
      v25 = *(_QWORD *)(v7 + 40);
      v9 = *(_DWORD *)(v7 + 60);
      v26 = *(_DWORD *)(v7 + 56);
      v27 = *(_QWORD *)(v7 + 64);
      v28 = *(_QWORD *)(v7 + 48);
      if ((v8 & 1) != 0 && (v9 & 1) != 0 && !v27 && (v28 & 0x8000000000000000) == 0)
      {
        time1.value = *(_QWORD *)(v7 + 48);
        time1.timescale = v26;
        time1.flags = v9;
        time1.epoch = 0;
        time2 = *(CMTime *)*(_QWORD *)&MEMORY[0x1E0CA2E68];
        if (!CMTimeCompare(&time1, &time2))
          continue;
      }
      if (*(float *)(*(_QWORD *)CFArrayGetValueAtIndex(*a1, i) + 76) <= 0.6)
      {
        time = *(CMTime *)(*(_QWORD *)CFArrayGetValueAtIndex(*a1, i) + 48);
        if (CMTimeGetSeconds(&time) >= 0.5 && CFArrayGetCount(a1[26]) >= 1)
        {
          v24 = i;
          v10 = 0;
          v11 = -1.0;
          do
          {
            v12 = (const __CFDictionary *)CFArrayGetValueAtIndex(a1[26], v10);
            memset(&v45, 0, sizeof(v45));
            CMTimeRangeMakeFromDictionary(&v45, v12);
            Value = (const __CFNumber *)CFDictionaryGetValue(v12, CFSTR("quality"));
            LODWORD(valuePtr.start.value) = 0;
            CFNumberGetValue(Value, kCFNumberFloat32Type, &valuePtr);
            v14 = *(float *)&valuePtr.start.value;
            memset(&valuePtr, 0, sizeof(valuePtr));
            range.start.value = v50;
            range.start.timescale = v51;
            range.start.flags = v8;
            range.start.epoch = v25;
            range.duration.value = v28;
            range.duration.timescale = v26;
            range.duration.flags = v9;
            range.duration.epoch = v27;
            otherRange = v45;
            CMTimeRangeGetIntersection(&valuePtr, &range, &otherRange);
            v16 = *a2;
            v15 = a2[1];
            if (v15 == *a2)
            {
              v19 = 0.0;
            }
            else
            {
              v17 = 0;
              v18 = 0;
              v19 = 0.0;
              do
              {
                v20 = (__int128 *)(v16 + v17);
                if (*(float *)(v16 + v17 + 48) == 0.0)
                {
                  v21 = *v20;
                  v22 = v20[2];
                  *(_OWORD *)&v41.start.epoch = v20[1];
                  *(_OWORD *)&v41.duration.timescale = v22;
                  *(_OWORD *)&v41.start.value = v21;
                  v39 = v45;
                  CMTimeRangeGetEnd(&v40, &v39);
                  *(_OWORD *)&v36.start.value = *(_OWORD *)&v41.start.value;
                  v36.start.epoch = v41.start.epoch;
                  start = v40;
                  if (CMTimeCompare(&v36.start, &start) <= 0)
                  {
                    v37 = v41;
                    CMTimeRangeGetEnd(&v38, &v37);
                    v36.start = v38;
                    start = v45.start;
                    if ((CMTimeCompare(&v36.start, &start) & 0x80000000) == 0)
                    {
                      v35 = v41;
                      memset(&v36, 0, sizeof(v36));
                      v34 = valuePtr;
                      CMTimeRangeGetIntersection(&v36, &v35, &v34);
                      if ((v36.start.flags & 1) == 0
                        || (v36.duration.flags & 1) == 0
                        || v36.duration.epoch
                        || v36.duration.value < 0
                        || (v33 = v36.duration,
                            v32 = *(CMTime *)*(_QWORD *)&MEMORY[0x1E0CA2E68],
                            CMTimeCompare(&v33, &v32)))
                      {
                        duration = v36.duration;
                        v19 = CMTimeGetSeconds(&duration) + v19;
                      }
                    }
                  }
                  v16 = *a2;
                  v15 = a2[1];
                }
                ++v18;
                v17 += 52;
              }
              while (0x4EC4EC4EC4EC4EC5 * ((v15 - v16) >> 2) > v18);
            }
            if ((valuePtr.start.flags & 1) == 0
              || (valuePtr.duration.flags & 1) == 0
              || valuePtr.duration.epoch
              || valuePtr.duration.value < 0
              || (v30 = valuePtr.duration, v29 = *(CMTime *)*(_QWORD *)&MEMORY[0x1E0CA2E68], CMTimeCompare(&v30, &v29)))
            {
              if (v19 > 0.5 && v14 >= v11)
                v11 = v14;
            }
            ++v10;
          }
          while (CFArrayGetCount(a1[26]) > v10);
          i = v24;
          if (v11 < 10.0 && v11 >= 0.0)
          {
            v23 = expf(v11 * -0.1);
            *(float *)(*(_QWORD *)CFArrayGetValueAtIndex(*a1, v24) + 76) = v23;
            *(_BYTE *)(*(_QWORD *)CFArrayGetValueAtIndex(*a1, v24) + 80) = 1;
          }
        }
      }
    }
  }
  return result;
}

CFIndex ma::QualityAnalysis::GenerateDegradedScores@<X0>(CFArrayRef *this@<X0>, void **a2@<X8>)
{
  CFIndex v4;
  uint64_t v5;
  CFIndex result;
  const __CFDictionary *ValueAtIndex;
  const __CFNumber *Value;
  char *v9;
  char *v10;
  __int128 v11;
  __int128 v12;
  char *v13;
  char *v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  char *v19;
  char *v20;
  char *v21;
  char *v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  CMTimeRange v26;
  CMTimeRange v27;

  v4 = 0;
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  v5 = (uint64_t)(a2 + 2);
  while (1)
  {
    result = CFArrayGetCount(this[25]);
    if (v4 >= result)
      break;
    ValueAtIndex = (const __CFDictionary *)CFArrayGetValueAtIndex(this[25], v4);
    memset(&v27, 0, sizeof(v27));
    CMTimeRangeMakeFromDictionary(&v27, ValueAtIndex);
    Value = (const __CFNumber *)CFDictionaryGetValue(ValueAtIndex, CFSTR("quality"));
    LODWORD(v26.start.value) = 0;
    CFNumberGetValue(Value, kCFNumberFloat32Type, &v26);
    if (*(float *)&v26.start.value != 1.0)
    {
      v26 = v27;
      v10 = (char *)a2[1];
      v9 = (char *)a2[2];
      if (v10 >= v9)
      {
        v14 = (char *)*a2;
        v15 = 0x4EC4EC4EC4EC4EC5 * ((v10 - (_BYTE *)*a2) >> 2);
        v16 = v15 + 1;
        if ((unint64_t)(v15 + 1) > 0x4EC4EC4EC4EC4ECLL)
          std::vector<std::unique_ptr<VCPProtoKeypoint>>::__throw_length_error[abi:ne180100]();
        v17 = 0x4EC4EC4EC4EC4EC5 * ((v9 - v14) >> 2);
        if (2 * v17 > v16)
          v16 = 2 * v17;
        if (v17 >= 0x276276276276276)
          v18 = 0x4EC4EC4EC4EC4ECLL;
        else
          v18 = v16;
        if (v18)
        {
          v19 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::pair<CMTimeRange,float>>>(v5, v18);
          v14 = (char *)*a2;
          v10 = (char *)a2[1];
        }
        else
        {
          v19 = 0;
        }
        v20 = &v19[52 * v15];
        *(CMTimeRange *)v20 = v26;
        *((_DWORD *)v20 + 12) = 1065353216;
        if (v10 == v14)
        {
          v22 = &v19[52 * v15];
        }
        else
        {
          v21 = &v19[52 * v15];
          do
          {
            v22 = v21 - 52;
            v23 = *(_OWORD *)(v10 - 52);
            v24 = *(_OWORD *)(v10 - 36);
            v25 = *(_OWORD *)(v10 - 20);
            *((_DWORD *)v21 - 1) = *((_DWORD *)v10 - 1);
            *(_OWORD *)(v21 - 20) = v25;
            *(_OWORD *)(v21 - 36) = v24;
            *(_OWORD *)(v21 - 52) = v23;
            v10 -= 52;
            v21 -= 52;
          }
          while (v10 != v14);
        }
        v13 = v20 + 52;
        *a2 = v22;
        a2[1] = v20 + 52;
        a2[2] = &v19[52 * v18];
        if (v14)
          operator delete(v14);
      }
      else
      {
        v11 = *(_OWORD *)&v27.start.value;
        v12 = *(_OWORD *)&v27.duration.timescale;
        *((_OWORD *)v10 + 1) = *(_OWORD *)&v27.start.epoch;
        *((_OWORD *)v10 + 2) = v12;
        *(_OWORD *)v10 = v11;
        *((_DWORD *)v10 + 12) = 1065353216;
        v13 = v10 + 52;
      }
      a2[1] = v13;
    }
    ++v4;
  }
  return result;
}

void sub_1B6ED03D8(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void ma::QualityAnalysis::GetTrackSegment(_QWORD *a1@<X1>, uint64_t *a2@<X2>, void **a3@<X8>)
{
  uint64_t *v3;
  unsigned __int8 v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  CMTimeFlags flags;
  CMTimeEpoch epoch;
  CMTimeValue v13;
  CMTimeScale v14;
  CMTimeFlags v15;
  CMTimeEpoch v16;
  unint64_t v17;
  uint64_t v18;
  CMTimeEpoch v19;
  _OWORD *v20;
  __int128 v21;
  __int128 v22;
  uint64_t v23;
  int v24;
  char *v25;
  char *v26;
  __int128 v27;
  __int128 v28;
  char *v29;
  char *v30;
  uint64_t v31;
  unint64_t v32;
  unint64_t v33;
  unint64_t v34;
  char *v35;
  char *v36;
  char *v37;
  char *v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  _OWORD *v42;
  __int128 v43;
  __int128 v44;
  int32_t v45;
  uint64_t *v46;
  int v47;
  char *v48;
  char *v49;
  char *v50;
  unint64_t v51;
  unint64_t v52;
  unint64_t v53;
  unint64_t v54;
  char *v55;
  char *v56;
  char *v57;
  char *v58;
  char *v59;
  uint64_t *v60;
  __int128 v61;
  __int128 v62;
  __int128 v63;
  uint64_t v64;
  uint64_t v65;
  unint64_t v67;
  CMTimeRange v68;
  CMTimeRange v69;
  CMTime v70;
  CMTime v71;
  CMTimeRange v72;
  CMTime v73;
  CMTimeRange v74;
  CMTimeRange rhs;
  CMTime end;
  CMTime start;
  CMTimeRange lhs;
  CMTime v79;
  CMTime time;
  CMTime v81;
  CMTime duration;
  CMTimeRange otherRange;
  CMTimeRange v84;
  CMTimeRange v85;
  CMTimeRange range;
  CMTime time2;
  CMTime time1;
  CMTimeValue value;
  CMTimeScale timescale;
  uint64_t v91;

  v3 = a2;
  v91 = *MEMORY[0x1E0C80C00];
  if ((v6 & 1) == 0
  {
    CMTimeMakeWithSeconds((CMTime *)&ma::QualityAnalysis::GetTrackSegment(std::vector<CMTimeRange> const&,std::vector<std::pair<CMTimeRange,float>> const&)::kMinTrackLength, 1.0, 600);
    v3 = a2;
  }
  *a3 = 0;
  a3[1] = 0;
  a3[2] = 0;
  v7 = *v3;
  if (v3[1] != *v3)
  {
    v8 = 0;
    LODWORD(v9) = 0;
    v65 = (uint64_t)(a3 + 2);
    do
    {
      v67 = v8;
      v10 = v7 + 52 * v8;
      value = *(_QWORD *)v10;
      flags = *(_DWORD *)(v10 + 12);
      timescale = *(_DWORD *)(v10 + 8);
      epoch = *(_QWORD *)(v10 + 16);
      v13 = *(_QWORD *)(v10 + 24);
      v14 = *(_DWORD *)(v10 + 32);
      v15 = *(_DWORD *)(v10 + 36);
      v16 = *(_QWORD *)(v10 + 40);
      if ((flags & 1) != 0 && (v15 & 1) != 0 && !v16 && (v13 & 0x8000000000000000) == 0)
      {
        time1.value = *(_QWORD *)(v10 + 24);
        time1.timescale = v14;
        time1.flags = v15;
        time1.epoch = 0;
        time2 = *(CMTime *)*(_QWORD *)&MEMORY[0x1E0CA2E68];
        if (!CMTimeCompare(&time1, &time2))
          goto LABEL_43;
      }
      v17 = (int)v9;
      do
      {
        v9 = v17;
        if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(a1[1] - *a1) >> 4) <= v17)
          break;
        range.start.value = value;
        range.start.timescale = timescale;
        range.start.flags = flags;
        range.start.epoch = epoch;
        range.duration.value = v13;
        range.duration.timescale = v14;
        range.duration.flags = v15;
        range.duration.epoch = v16;
        CMTimeRangeGetEnd(&rhs.start, &range);
        v18 = *a1 + 48 * v9;
        *(_OWORD *)&v85.start.value = *(_OWORD *)&rhs.start.value;
        v85.start.epoch = rhs.start.epoch;
        v19 = *(_QWORD *)(v18 + 16);
        *(_OWORD *)&lhs.start.value = *(_OWORD *)v18;
        lhs.start.epoch = v19;
        if (CMTimeCompare(&v85.start, &lhs.start) < 1)
          break;
        memset(&v85, 0, sizeof(v85));
        v84.start.value = value;
        v84.start.timescale = timescale;
        v84.start.flags = flags;
        v84.start.epoch = epoch;
        v84.duration.value = v13;
        v84.duration.timescale = v14;
        v84.duration.flags = v15;
        v84.duration.epoch = v16;
        v20 = (_OWORD *)(*a1 + 48 * v9);
        v22 = v20[1];
        v21 = v20[2];
        *(_OWORD *)&otherRange.start.value = *v20;
        *(_OWORD *)&otherRange.start.epoch = v22;
        *(_OWORD *)&otherRange.duration.timescale = v21;
        CMTimeRangeGetIntersection(&v85, &v84, &otherRange);
        if ((v85.start.flags & 1) != 0
          && (v85.duration.flags & 1) != 0
          && !v85.duration.epoch
          && (v85.duration.value & 0x8000000000000000) == 0)
        {
          duration = v85.duration;
          v81 = *(CMTime *)*(_QWORD *)&MEMORY[0x1E0CA2E68];
          if (!CMTimeCompare(&duration, &v81))
            continue;
        }
        time = v85.duration;
        CMTimeGetSeconds(&time);
        *(_OWORD *)&lhs.start.value = *(_OWORD *)&v85.start.value;
        lhs.start.epoch = v85.start.epoch;
        rhs.start.value = value;
        *(_QWORD *)&rhs.start.timescale = __PAIR64__(flags, timescale);
        rhs.start.epoch = epoch;
        CMTimeSubtract(&v79, &lhs.start, &rhs.start);
        lhs.start = v79;
        *(_OWORD *)&rhs.start.value = ma::QualityAnalysis::GetTrackSegment(std::vector<CMTimeRange> const&,std::vector<std::pair<CMTimeRange,float>> const&)::kMinTrackLength;
        rhs.start.epoch = qword_1ED261168;
        if (CMTimeCompare(&lhs.start, &rhs.start) >= 1)
        {
          memset(&lhs, 0, sizeof(lhs));
          start.timescale = timescale;
          start.flags = flags;
          start.epoch = epoch;
          end = v85.start;
          start.value = value;
          CMTimeRangeFromTimeToTime(&lhs, &start, &end);
          v23 = *a2 + 52 * v67;
          rhs = lhs;
          v24 = *(_DWORD *)(v23 + 48);
          v26 = (char *)a3[1];
          v25 = (char *)a3[2];
          if (v26 >= v25)
          {
            v30 = (char *)*a3;
            v31 = 0x4EC4EC4EC4EC4EC5 * ((v26 - (_BYTE *)*a3) >> 2);
            v32 = v31 + 1;
            if ((unint64_t)(v31 + 1) > 0x4EC4EC4EC4EC4ECLL)
              std::vector<std::unique_ptr<VCPProtoKeypoint>>::__throw_length_error[abi:ne180100]();
            v33 = 0x4EC4EC4EC4EC4EC5 * ((v25 - v30) >> 2);
            if (2 * v33 > v32)
              v32 = 2 * v33;
            if (v33 >= 0x276276276276276)
              v34 = 0x4EC4EC4EC4EC4ECLL;
            else
              v34 = v32;
            if (v34)
            {
              v35 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::pair<CMTimeRange,float>>>(v65, v34);
              v30 = (char *)*a3;
              v26 = (char *)a3[1];
            }
            else
            {
              v35 = 0;
            }
            v36 = &v35[52 * v31];
            *(CMTimeRange *)v36 = rhs;
            *((_DWORD *)v36 + 12) = v24;
            if (v26 == v30)
            {
              v38 = &v35[52 * v31];
            }
            else
            {
              v37 = &v35[52 * v31];
              do
              {
                v38 = v37 - 52;
                v39 = *(_OWORD *)(v26 - 52);
                v40 = *(_OWORD *)(v26 - 36);
                v41 = *(_OWORD *)(v26 - 20);
                *((_DWORD *)v37 - 1) = *((_DWORD *)v26 - 1);
                *(_OWORD *)(v37 - 20) = v41;
                *(_OWORD *)(v37 - 36) = v40;
                *(_OWORD *)(v37 - 52) = v39;
                v26 -= 52;
                v37 -= 52;
              }
              while (v26 != v30);
            }
            v29 = v36 + 52;
            *a3 = v38;
            a3[1] = v36 + 52;
            a3[2] = &v35[52 * v34];
            if (v30)
              operator delete(v30);
          }
          else
          {
            v27 = *(_OWORD *)&lhs.start.value;
            v28 = *(_OWORD *)&lhs.duration.timescale;
            *((_OWORD *)v26 + 1) = *(_OWORD *)&lhs.start.epoch;
            *((_OWORD *)v26 + 2) = v28;
            *(_OWORD *)v26 = v27;
            *((_DWORD *)v26 + 12) = v24;
            v29 = v26 + 52;
          }
          a3[1] = v29;
        }
        memset(&v79, 0, sizeof(v79));
        v74 = v85;
        CMTimeRangeGetEnd(&v79, &v74);
        memset(&v73, 0, sizeof(v73));
        v72.start.value = value;
        v72.start.timescale = timescale;
        v72.start.flags = flags;
        v72.start.epoch = epoch;
        v72.duration.value = v13;
        v72.duration.timescale = v14;
        v72.duration.flags = v15;
        v72.duration.epoch = v16;
        CMTimeRangeGetEnd(&v73, &v72);
        lhs.start = v79;
        rhs.start = v73;
        if (CMTimeCompare(&lhs.start, &rhs.start) <= 0)
        {
          v71 = v79;
          v70 = v73;
          CMTimeRangeFromTimeToTime(&lhs, &v71, &v70);
          value = lhs.start.value;
          flags = lhs.start.flags;
          timescale = lhs.start.timescale;
          epoch = lhs.start.epoch;
          v13 = lhs.duration.value;
          v14 = lhs.duration.timescale;
          v15 = lhs.duration.flags;
          v16 = lhs.duration.epoch;
        }
        v69.start.value = value;
        v69.start.timescale = timescale;
        v69.start.flags = flags;
        v69.start.epoch = epoch;
        v69.duration.value = v13;
        v69.duration.timescale = v14;
        v69.duration.flags = v15;
        v69.duration.epoch = v16;
        CMTimeRangeGetEnd(&v79, &v69);
        v42 = (_OWORD *)(*a1 + 48 * v9);
        v44 = v42[1];
        v43 = v42[2];
        *(_OWORD *)&v68.start.value = *v42;
        *(_OWORD *)&v68.start.epoch = v44;
        *(_OWORD *)&v68.duration.timescale = v43;
        CMTimeRangeGetEnd(&v73, &v68);
        lhs.start = v79;
        rhs.start = v73;
        v45 = CMTimeCompare(&lhs.start, &rhs.start);
        v17 = v9 + 1;
      }
      while (v45 >= 1);
      v85.start.value = v13;
      v85.start.timescale = v14;
      v85.start.flags = v15;
      v85.start.epoch = v16;
      *(_OWORD *)&lhs.start.value = ma::QualityAnalysis::GetTrackSegment(std::vector<CMTimeRange> const&,std::vector<std::pair<CMTimeRange,float>> const&)::kMinTrackLength;
      lhs.start.epoch = qword_1ED261168;
      if (CMTimeCompare(&v85.start, &lhs.start) >= 1)
      {
        v46 = a2;
        v47 = *(_DWORD *)(*a2 + 52 * v67 + 48);
        v48 = (char *)a3[1];
        v49 = (char *)a3[2];
        if (v48 >= v49)
        {
          v64 = 0x4EC4EC4EC4EC4EC5 * ((v48 - (_BYTE *)*a3) >> 2);
          v52 = v64 + 1;
          if ((unint64_t)(v64 + 1) > 0x4EC4EC4EC4EC4ECLL)
            std::vector<std::unique_ptr<VCPProtoKeypoint>>::__throw_length_error[abi:ne180100]();
          v53 = 0x4EC4EC4EC4EC4EC5 * ((v49 - (_BYTE *)*a3) >> 2);
          if (2 * v53 > v52)
            v52 = 2 * v53;
          if (v53 >= 0x276276276276276)
            v54 = 0x4EC4EC4EC4EC4ECLL;
          else
            v54 = v52;
          if (v54)
            v55 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::pair<CMTimeRange,float>>>(v65, v54);
          else
            v55 = 0;
          v56 = &v55[52 * v64];
          *(_QWORD *)v56 = value;
          *((_DWORD *)v56 + 2) = timescale;
          *((_DWORD *)v56 + 3) = flags;
          *((_QWORD *)v56 + 2) = epoch;
          *((_QWORD *)v56 + 3) = v13;
          *((_DWORD *)v56 + 8) = v14;
          *((_DWORD *)v56 + 9) = v15;
          *((_QWORD *)v56 + 5) = v16;
          *((_DWORD *)v56 + 12) = v47;
          v58 = (char *)*a3;
          v57 = (char *)a3[1];
          v59 = v56;
          if (v57 == *a3)
          {
            v60 = a2;
            v51 = v67;
          }
          else
          {
            v60 = a2;
            v51 = v67;
            do
            {
              v61 = *(_OWORD *)(v57 - 52);
              v62 = *(_OWORD *)(v57 - 36);
              v63 = *(_OWORD *)(v57 - 20);
              *((_DWORD *)v59 - 1) = *((_DWORD *)v57 - 1);
              *(_OWORD *)(v59 - 20) = v63;
              *(_OWORD *)(v59 - 36) = v62;
              *(_OWORD *)(v59 - 52) = v61;
              v59 -= 52;
              v57 -= 52;
            }
            while (v57 != v58);
            v57 = v58;
          }
          v50 = v56 + 52;
          *a3 = v59;
          a3[1] = v56 + 52;
          a3[2] = &v55[52 * v54];
          if (v57)
            operator delete(v57);
          v46 = v60;
        }
        else
        {
          *(_QWORD *)v48 = value;
          *((_DWORD *)v48 + 2) = timescale;
          *((_DWORD *)v48 + 3) = flags;
          *((_QWORD *)v48 + 2) = epoch;
          *((_QWORD *)v48 + 3) = v13;
          *((_DWORD *)v48 + 8) = v14;
          *((_DWORD *)v48 + 9) = v15;
          *((_QWORD *)v48 + 5) = v16;
          v50 = v48 + 52;
          *((_DWORD *)v48 + 12) = v47;
          v51 = v67;
        }
        a3[1] = v50;
      }
      else
      {
LABEL_43:
        v46 = a2;
        v51 = v67;
      }
      v8 = v51 + 1;
      v7 = *v46;
    }
    while (0x4EC4EC4EC4EC4EC5 * ((v46[1] - *v46) >> 2) > v8);
  }
}

